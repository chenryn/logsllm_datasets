### 2.1 查找Javascript层的api对应的Native实现
对于大部分Javascript层的api,直接在EScript.api模块中搜索对应的属性名称或者方法名称，再利用IDA的交叉引用即可找到对应的Native实现，比如下图的app.alert。
再比如，this.addScript如下图所示（在Acrobat
Reader中，全局作用域中this指代的是当前打开的pdf文档——一个Doc对象，所以this.addScript本质上是Doc::addScript）。
但是，某些Javascript层的api不在EScript.api模块中实现，而是在其他模块中实现，这种时候对应的属性名称或者方法名称既在EScript.api模块中会出现，也会在其他模块中出现。
比如app.media对象的所有属性和方法对应的Native实现都不在EScript.api模块中（虽然app对象是），而是在Multimedia.api模块中。
现在在EScript.api中搜索一下app.media的方法alertFileNotFound，结果如下所示。
可以看到，无法在EScript.api中找到app.media对象的属性和方法对应的Native实现，但是EScript.api明显以特定的结构保存了app.media对象的相关信息。
再在Multimedia.api模块中搜索一下alertFileNotFound，如下图所示。
注意，通过这种方法找Javascript
api对应的Native实现不是取巧，是由实现机制得到的（这里的实现机制包括SpiderMonkey本身实现的Javascript调用Native函数机制和Adobe在这个机制的基础上进一步实现了自己的机制，这里不适合展开，后续内容会涉及这部分内容）。
掌握了该方法后，就可以根据Acrobat SDK中的Javascript
API重命名各个对象属性和方法的Native实现，进一步达到识别符号的目的，也方便调试时下断点。
### 2.2 SpiderMonkey关键结构
虽然用SpiderMonkey本身来解释这些结构会更好(有pdb信息和源码)，但是因为Acrobat的EScript.api在最关键的JSObject对象做了一些修改，防止混淆以下所有内容都是展示EScript的结果。
这部分结内容可以先大致看一下，掌握了后续内容后再回过头阅读。
因为在自己调试实验的时候需要有一个出发点，而这个出发点在后续小节里才涉及。
**2.2.1 Value结构体**
Javascript是无类型语言，但是这只是语言层面而言，在底层一定是要有和类型相关的信息的，Value结构体的功能就是如此（可以参考vbs的variant类型）。
一个Value结构体占8个字节，除了double和超过32位大小的整数，其他类型都是高4字节用于保存类型，低4字节保存值或者实际对象的指针，类型的值对应的类型如下所示。
    JS_ENUM_HEADER(JSValueType, uint8_t)
    {
        JSVAL_TYPE_DOUBLE              = 0x00,
        JSVAL_TYPE_INT32               = 0x01,
        JSVAL_TYPE_UNDEFINED           = 0x02,
        JSVAL_TYPE_BOOLEAN             = 0x03,
        JSVAL_TYPE_MAGIC               = 0x04,
        JSVAL_TYPE_STRING              = 0x05,
        JSVAL_TYPE_NULL                = 0x06,
        JSVAL_TYPE_OBJECT              = 0x07,
        /* These never appear in a jsval; they are only provided as an out-of-band value. */
        JSVAL_TYPE_UNKNOWN             = 0x20,
        JSVAL_TYPE_MISSING             = 0x21
    } JS_ENUM_FOOTER(JSValueType);
比如对于下面的Javascript代码
    this["0"] = 0x5
    this["1"] = 0x100000000
    this["2"] = 3.14
    this["3"] = undefined
    this["4"] = false
    this["5"] = true
    this["6"] = null
    this["7"] = "str1"
    this["8"] = {}
    this["9"] = function() {app.alert("in function");}
    app.alert("end");
底层表示如下所示。
**2.2.2 String对象**
String对象的第1个4字节由字符串字符长度（不是字节长度）和flag组成（低4位用于保存flag，其余位用于保存字符串字符长度）。
为了提高字符串的处理效率，String对象又细分成不同类型，由flag决定，flag的值和字符串的类型如下所示。
         *   Rope         0000       0000
         *   Linear       -         !0000
         *   HasBase      -          xxx1
         *   Dependent    0001       0001
         *   Flat         -          isLinear && !isDependent
         *   Undepended   0011       0011
         *   Extensible   0010       0010
         *   Inline       0100       isFlat && !isExtensible && (u1.chars == inlineStorage) || isInt32)
         *   Stable       0100       isFlat && !isExtensible && (u1.chars != inlineStorage)
         *   Short        0100       header in FINALIZE_SHORT_STRING arena
         *   External     0100       header in FINALIZE_EXTERNAL_STRING arena
         *   Int32        0110       x110 (NYI, Bug 654190)
         *   Atom         1000       1xxx
         *   InlineAtom   1000       1000 && is Inline
         *   ShortAtom    1000       1000 && is Short
    Int32Atom    1110       1110 (NYI, Bug 654190)
不过这里只介绍最常见的一种——Atom字符串，也就是flag为0x8。
对于2.2.1节中的代码
    this["7"] = "str1"
实际的存储如下所示。
这里需要注意一点，一个String对象至少占32个字节，除了头8个字节，剩余的内存是用来直接保存长度比较小的字符串，这样可以提高内存的使用效率。
如果字符串的长度过长，剩余的内存则不使用，第2个4字节指向实际的字符串，如下图所示。
**2.2.3 JSObject**
JSObject对应的是Javascript层的Object概念。
这个结构涉及的概念有点多，也是需要重点消化的对象，因为接下来的function、Array、Map、Set等都建立在JSObject的基础上。
首先我们从一个空的Object开始来研究JSObject。
**2.2.3.1 空Object对应的JSObject**
对于以下代码（this.dummy1和this.dummy2是为了直观地确认emptyObject的存在，可以忽略）
    this.dummy1 = 255
    this.emptyObject = {}
    this.dummy2 = 255
首先this.emptyObject的值是一个空的Object，Native层的表示如下。
**2.2.3.2 Shape对象**
从上面的一些图中应该可以看到SpiderMonkey引擎在添加新的属性时，属性的值是按照顺序在内存中存放的（以一个Value结构体为单位）,那么一定是需要一个中间的媒介，来保存属性的名称以及属性的值的对应关系，从而通过属性（字符串）找到对应的Value。
Shape对象就是这个中间的媒介，Shape的逻辑如下图所示。
① 每一个Shape对象保存了id和slot索引，通过对比id来进行所谓的查找属性，id一致后就可以根据对应的slot索引得到属性的值。
② 一个JSObject的第一个成员指向Shape单链表的最后一个元素。
③ 单链表的最后一个Shape对象可能会指向一个哈希表。
④ 查找属性的时候，先通过id尝试在哈希表里直接获取对应的Shape（如果有哈希表的话）。
⑤ 如果没有找到或者哈希表不存在，则通过遍历单链表，然后对比id来查找Shape。
⑥ 如果找到了Shape，则根据Shape中的slot索引获取属性的值。
实际演示，对于如下代码
    this.dummy1 = 255
    this.emptyObject = {}
    this.dummy2 = 255
    this.emptyObject.mem1 = "mem1"
    this.emptyObject.mem2 = "mem2"
    this.emptyObject.mem3 = "mem3"
    this.emptyObject.mem4 = "mem4"
    this.emptyObject.mem5 = "mem5"
在内存中的实际关系如下图所示。
上图中出现了一个新的概念——fixed slots，fixed
slots是紧跟在JSObject（或者JSObject的子类）后面的固定大小的slot数组，主要用于优化，给一个对象添加属性时，会先填充fixed
slots，fixed slots用完后才会使用单独的slots（JSObject偏移量+0x8指向的slot数组）。
理解上图可能需要配合前面的Shape对象的逻辑图。
调试时，为了方便，可以使用如下windbg 脚本命令，@$t0寄存器代表的是JSObject的起始地址。
    r @$t0 = 0x08067b68 ;
    r @$t1 = poi(@$t0) ;
    r @$t2 = poi(@$t0 + 0x8 );
    r @$t8 = poi(@$t1 + 0x10);
    .for(; @$t8 != 0; r @$t1 = @$t8;r @$t8 = poi(@$t1 + 0x10)) {r @$t3 = poi(@$t1 + 0x4);r @$t9 = 0;.catch {du poi(@$t3 + 0x4); r @$t9 = 0xaa};.if (@$t9 != 0xaa) {r @$t3};r @$t3 = poi(@$t1 + 0x8);r @$t4 = @$t3 >> 0n27;r @$t5 = @$t3 & 0x00ffffff;r @$t4, @$t5;.if(@$t5  r @$t0 = 0x08067b68 ;
    0:000> r @$t1 = poi(@$t0) ;
    0:000> r @$t2 = poi(@$t0 + 0x8 );
    0:000> r @$t8 = poi(@$t1 + 0x10);
    0:000> .for(; @$t8 != 0; r @$t1 = @$t8;r @$t8 = poi(@$t1 + 0x10)) {r @$t3 = poi(@$t1 + 0x4);r @$t9 = 0;.catch {du poi(@$t3 + 0x4); r @$t9 = 0xaa};.if (@$t9 != 0xaa) {r @$t3};r @$t3 = poi(@$t1 + 0x8);r @$t4 = @$t3 >> 0n27;r @$t5 = @$t3 & 0x00ffffff;r @$t4, @$t5;.if(@$t5 < @$t4) {dd @$t0+0x18+@$t5*8 L0x2;}.else {r @$t5 = @$t5-@$t4;dd @$t2+@$t5*8 L0x2;};.echo --------------------;}
    07e3c1c8  "mem5"                                          
    $t4=00000004 $t5=00000004
    0efda218  07e3c1c0 ffffff85
    --------------------    
    07e3c1a8  "mem4"
    $t4=00000004 $t5=00000003
    08067b98  07e3c1a0 ffffff85
    --------------------    
    07e3c188  "mem3"
    $t4=00000004 $t5=00000002
    08067b90  07e3c180 ffffff85
    --------------------    
    07e3c168  "mem2"