purchasers / donors can use the revealed secret keys
{κi}i∈Ω to decrypt the corresponding segments. If they
like the decrypted segments, they can donate money to
the contract as contribution for the leakage.
• Accept. If enough money has been collected, C decom-
mits msk for the contract (sends the randomness for the
ciphertext along with msk). If the contract veriﬁes the
decommitment successfully, all donated money is paid
to C. The contract thus enforces a fair exchange of msk
for money. (If the contract expires at time Tend without
release of msk, all donations are refunded.)
The contract. Our proposed CSC PublicLeaks for im-
plementing this public leakage protocol is given in Fig-
ure 2. The corresponding user side is as explained infor-
mally above (and inferable from the contract).
Contract PublicLeaks
Init: Set state := INIT, and donations := {}. Let crs :=
KeyGennizk(1λ ), pk := KeyGenenc(1λ ) denote
hardcoded public parameters generated through a
trusted setup.
some leaker C:
Create: Upon receiving (“create”, c0, {cti}n
i=1, Tend) from
Set state := CREATED.
Select a random subset Ω ⊂ [n] of size k, and
send (“challenge”, Ω) to C.
Conﬁrm: Upon receiving (“conﬁrm”, {(κi,πi)}i∈Ω) from C:
Assert state = CREATED.
Assert that ∀i ∈ S: πi is a valid NIZK proof (un-
der crs) for the following statement:
∃(msk,r0), s.t. (c0 = Enc(pk, msk,r0))
∧ (κi = PRF(msk,i))
Set state := CONFIRMED.
Donate: Upon receiving (“donate”, $amt) from some pur-
chaser P:
Assert state = CONFIRMED.
Assert ledger[P] ≥ $amt.
Set ledger[P] := ledger[P]− $amt.
donations := donations∪{($amt,P)}.
Accept: Upon receiving (“accept”, msk, r0) from C:
Assert state = CONFIRMED
Assert c0 = Enc(pk, msk,r0)
ledger[C] := ledger[C] + sum(donations)
Send (“leak”, msk) to all parties.
Set state := ABORTED.
Timer: If state = CONFIRMED and T > Tend: ∀($amt,P) ∈
donations: let ledger[P] := ledger[P] + $amt. Set
state := ABORTED.
Figure 2: A contract PublicLeaks that leaks a secret M
to the public in exchange for donations.
7
4.3 Commission-fairness: Formal deﬁni-
tion and proof
In Appendix E, we give a formal deﬁnition of
commission-fairness for public leakage (explained infor-
mally above) as an ideal functionality. We also prove
that PublicLeaks realizes this functionality assuming all
revealed segments are valid—a property enforced with
high (but not overwhelming) probability by random sam-
pling of M in PublicLeaks.
4.4 Optimizations and Ethereum imple-
mentation
The formally speciﬁed contract PublicLeaks uses generic
cryptographic primitives in a black-box manner. We now
give a practical, optimized version, relying on the ran-
dom oracle model (ROM), that eliminates trusted setup,
and also achieves better efﬁciency and easy integration
with Ethereum [63].
A practical optimization. During contract creation, C
chooses random κi
$←{0,1}λ for i ∈ [n], and computes
c0 := {H(κ1,1), . . . ,H(κn,n)}.
The master secret key is simply msk := {κ1, . . . ,κn},
i.e., the set of hash pre-images. As in PublicLeaks,
each segment mi will still be encrypted as cti :=
encκ [mi].
(For technical reasons—to achieve simu-
latability in the security proof—here encκ [mi] = mi ⊕
[H(κi,1,“enc”)||H(κi,2,“enc”) . . . ,
||H(κi,z,“enc”)] for suitably large z.)
C submits c0 to the smart contract. When challenged
with the set Ω, C reveals {κi}i∈Ω to the contract, which
then veriﬁes its correctness by hashing and comparing
with c0. To accept donations, C reveals the entire msk.
This optimized scheme is asymptotically less efﬁcient
than our generic, black-box construction PublicLeaks—
as the master secret key scales linearly in the number of
segments n. But for typical, realistic document set sizes
in practice (e.g., n = 100, as recommended for Dark-
leaks), it is more efﬁcient.
Ethereum-based implementation. To demonstrate the
feasibility of implementing leakage contracts using cur-
rently available technology, we implemented a version of
the contract PublicLeaks atop Ethereum [63], using the
Serpent contract language [10]. We specify the full im-
plementation in detail in Appendix F.2.
The version we implemented relies on the practical
optimizations described above. As a technical matter,
Ethereum does not appear at present to support timer-
activated functions, so we implemented Timer in such a
way that purchasers / donors make explicit withdrawals,
rather than receiving automatic refunds.
This public leakage Ethereum contract is highly efﬁ-
cient, as it does not require expensive cryptographic op-
erations. It mainly relies on hashing (SHA3-256) for ran-
dom number generation and for verifying hash commit-
ments. The total number of storage entries (needed for
encryption keys) and hashing operations is O(n), where,
again, Darkleaks recommends n = 100. (A hash func-
tion call in practice takes a few micro-seconds, e.g., 3.92
µsecs measured on a core i7 processor.)
4.5 Extension: private leakage
As noted above, shortcoming 3. of Darkleaks is its in-
ability to support private leakage, in which C sells a se-
cret exclusively to a purchaser P. In Appendix F.3, we
show how PublicLeaks can be modiﬁed for this purpose.
The basic idea is for C not to reveal msk directly, but to
provide a ciphertext ct = encpkP [msk] on msk to the con-
tract for a purchaser P, along with a proof that ct is cor-
rectly formed. We describe a black-box variant whose
security can be proven in essentially the same way as
PublicLeaks. We also describe a practical variant that
variant combines a veriﬁable random function (VRF) of
Chaum and Pedersen [31] (for generation of {κi}n
i=1)
with a veriﬁable encryption (VE) scheme of Camensich
and Shoup [25] (to prove correctness of ct). This variant
can be deployed today using beta support for big number
arithmetic in Ethereum.
5 A Key-Compromise CSC
Example 1b in the paper introduction described a CSC
that rewards a perpetrator P for delivering to C the stolen
key skV of a victim V—in this case a certiﬁcate authority
(CA) with public key pkV. Recall that C generates a pri-
vate / public key encryption pair (skC, pkC). The contract
accepts as a claim by P a pair (ct,π). It sends reward
$reward to P if π is a valid proof that ct = encpkC [skV ]
and skV is the private key corresponding to pkV.
Intuitively, a key-theft contract is commission-fair if
it rewards a perpetrator P for delivery of a private key
that: (1) P was responsible for stealing and (2) Is valid
for a substantial period of time. (We formally deﬁne it in
Appendix D.)
This form of contract can be used to solicit theft of
any type of private key, e.g., the signing key of a CA, the
private key for a SSL/TLS certiﬁcate, a PGP private key,
etc. (Similar contracts could solicit abuse, but not full
compromise of a private key, e.g., forged certiﬁcates.)
Figure 3 shows the contract of Example 1b in our
notation for smart contracts. We let crs here de-
note a common reference string for a NIZK scheme
and match(pkV , skV ) denote an algorithm that veriﬁes
8
Contract KeyTheft-Naive
Create: Upon receiving (“create”, $reward, pkV , Tend) from
Init: Set state := INIT. Let crs := KeyGennizk(1λ ) denote
a hard-coded NIZK common reference string gener-
ated during a trusted setup process.
some contractor C := (pkC, . . .):
Assert state = INIT.
Assert ledger[C] ≥ $reward.
ledger[C] := ledger[C]− $reward.
Set state := CREATED.
Claim: Upon receiving (“claim”, ct, π) from some purported
perpetrator P:
Assert state = CREATED.
Assert that π is a valid NIZK proof (under crs) for
the following statement:
∃r, skV s.t. ct = Enc(pkC, (skV ,P),r)
and match(pkV , skV ) = true
Timer: If state = CREATED and current time T > Tend:
ledger[P] := ledger[P] + $reward.
Set state := CLAIMED.
ledger[C] := ledger[C] + $reward
state := ABORTED
Figure 3: A na¨ıve, ﬂawed key theft contract (lacking
commission-fairness)
whether skV is the corresponding private key for some
public key pkV in a target public-key cryptosystem.
As noted above,
this CSC is not commission-fair.
Thus we refer to it as KeyTheft-Naive.We use KeyTheft-
Naive as a helpful starting point for motivating and un-
derstanding the construction of a commission-fair con-
tract proposed later, called KeyTheft.
5.1 Flaws in KeyTheft-Naive
fails
achieve
contract KeyTheft-Naive
The
to
commission-fairness due to two shortcomings.
Revoke-and-claim attack. The CA V can revoke the
key skV and then itself submit the key for payment. The
CA then not only negates the value of the contract but
actually proﬁts from it! This revoke-and-claim attack
demonstrates that KeyTheft-Naive is not commission-
fair in the sense of ensuring the delivery of a usable pri-
vate key skV .
Rushing attack. Another attack is a rushing attack.
As noted in Section 3, an adversary can arbitrarily re-
order messages—a reﬂection of possible attacks against
the network layer in a cryptocurrency. (See also the for-
mal blockchain model [45].) Thus, given a valid claim
from perpetrator P, a corrupt C can decrypt and learn
skV, construct another valid-looking claim of its own,
and make its own claim arrive before the valid one.
5.2 Fixing ﬂaws in KeyTheft-Naive
We now show how to modify KeyTheft-Naive to prevent
the above two attacks and achieve commission-fairness.
Thwarting revoke-and-claim attacks. In a revoke-and-
claim attack against KeyTheft-Naive, V preemptively re-
vokes its public key pkV and replaces it with a fresh one
pk(cid:48)
V. As noted above, the victim can then play the role
of perpetrator P, submit skV to the contract and claim
the reward. The result is that C pays $reward to V and
obtains a stale key.
We address this problem by adding to the contract a
feature called reward truncation, whereby the contract
accepts evidence of revocation Πrevoke.
This evidence Πrevoke can be an Online Certiﬁcate Sta-
tus Protocol (OCSP) response indicating that pkV is no
longer valid, a new certiﬁcate for V that was unknown
at the time of contract creation (and thus not stored in
Contract), or a certiﬁcate revocation list (CRL) contain-
ing the certiﬁcate with pkV.
C could submit Πrevoke, but to minimize interaction
by C, KeyTheft could provide a reward $smallreward to
a third-party submitter. The reward could be small, as
Πrevoke would be easy for ordinary users to obtain.
The contract then provides a reward based on the in-
terval of time over which the key skV remains valid. Let
Tclaim denote the time at which the key skV is provided
and Tend be an expiration time for the contract (which
must not exceed the expiration of the certiﬁcate contain-
ing the targeted key). Let Trevoke be the time at which
Πrevoke is presented (Trevoke = ∞ if no revocation happens
prior to Tend). Then the contract assigns to P a reward of
f (reward,t), where t = min(Tend,Trevoke)− Tclaim.
We do not explore choices of f here. We note, how-
ever, that given that a CA key skV can be used to forge
certiﬁcates for rapid use in, e.g., malware or falsiﬁed
software updates, much of its value can be realized in a
short interval of time which we denote by δ . (A slant
toward up-front realization of the value of exploits is
common in general [22].) A suitable choice of reward
function should be front-loaded and rapidly decaying. A
natural, simple choice with this property is
(cid:26) 0
f ($reward,t) =
$reward(1− ae−b(t−δ ))
: t < δ
: t ≥ δ
for a < 1/2 and some positive real value b. Note that a
majority of the reward is paid provided that t ≥ δ .
Thwarting rushing attacks. To thwart rushing attacks,
we separate the claim into two phases. In the ﬁrst phase,
P expresses an intent to claim by submitting a commit-
ment of the real claim message. P then waits for the
next round to open the commitment and reveal the claim
message. (Due to technical subtleties in the proof, the
9
commitment must be adaptively secure; in the proof, the
simulator must be able to simulate a commitment with-
out knowing the string s being committed to, and later, be
able to claim the commitment to any string s.) In real-life
decentralized cryptocurrencies, P can potentially wait
multiple block intervals before opening the commitment,
to have higher conﬁdence that the blockchain will not
fork. In our formalism, one round can correspond to one
or more block intervals.
Figure 4 gives a key theft contract KeyTheft that
thwarts revoke-and-claim and the rushing attacks.
5.3 Target and state exposure
An undesirable property of KeyTheft-Naive is that its
target / victim and state are publicly visible. V can
thus learn whether it is the target of KeyTheft-Naive. V
also observes successful claims—i.e., whether skV has
been stolen—and can thus take informed defensive ac-
tion. For example, as key revocation is expensive and
time-consuming, V might wait until a successful claim
occurs and only then perform a revoke-and-claim attack.
To limit target and state exposure, wenote two possi-
ble enhancements to KeyTheft. The ﬁrst is a multi-target
contract, in which key theft is requested for any one of a
set of multiple victims. The second is what we call cover
claims, false claims that conceal any true claim. Our im-
plementation of KeyTheft, as speciﬁed in Figure 4, is a
multi-target contract, as this technique provides both par-
tial target and partial state concealment.
Multi-target contract.
A multi-target contract so-
licits the private key of any of m potential victims
V1,V2, . . . ,Vm. There are many settings in which the pri-
vate keys of different victims are of similar value. For
example, a multi-target contract KeyTheft could offer a
reward for the private key skV of any CA able to issue
SSL/TLS certiﬁcates trusted by, e.g., Internet Explorer
(of which there are more than 650 [39]).
A challenge here is that the contract state is public,
thus the contract must be able to verify the proof for a
valid claim (private key) skVi without knowing which key
was furnished, i.e., without learning i. Our implementa-
tion shows that constructing such proofs as zk-SNARKs
(The contractor C itself can easily learn i
is practical.
by decrypting skVi, generating pkVi, and identifying the
corresponding victim.)
Cover claims. As the state of a contract is publicly vis-
ible, a victim V learns whether or not a successful claim
has been submitted to KeyTheft-Naive. This is particu-
larly problematic in the case of single-target contracts.
Rather than sending the NIZK proof π with ct, it is
possible instead to delay submission of π (and payment
of the reward) until Tend. (That is, Claim takes as input
Contract KeyTheft
Init: Set state := INIT. Let crs := KeyGennizk(1λ ) de-
note a hard-coded NIZK common reference string
generated during a trusted setup process.
Create: Same as in Contract KeyTheft-Naive (Figure 3),
except that an additional parameter ∆T is addition-
ally submitted by C.
perpetrator P:
Intent: Upon receiving (“intent”, cm) from some purported
Assert state = CREATED
Assert that P has not sent “intent” earlier
Store cm,P