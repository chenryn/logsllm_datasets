30.8 动画
在动画中，可以使用移动的元素、颜色变化、变换等制作平滑的变换效果。XAML使
动画的制作非常简单。还可以连续改变任意依赖属性的值。不同的动画类可以根据其类
型，连续改变不同属性的值。
动画最重要的元素是时间轴，它定义了值随时间的变化方式。有不同类型的时间轴，
可用于改变不同类型的值。所有时间轴的基类都是Timeline。为了连续改变double值，可
以使用DoubleAnimation类。Int32Animation类是int值的动画类。PointAnimation类用于连
续改变点，ColorAnimation类用于连续改变颜色。
Storyboard类可以用于合并时间轴。Storyboard类派生自基类TimelineGroup,
TimelineGroup又派生自基类Timeline。
  注意： 动画类的名称空间，在WPF中是System.Windows.Media.Animation。
在UWP应用程序中是Windows.UI.Xaml.Media.Animation。
30.8.1 时间轴
Timeline定义了值随时间的变化方式。下面的示例连续改变椭圆的大小。在接下来的
代码中，DoubleAnimation时间轴缩放和平移椭圆；ColorAnimation改变填充画笔的颜色。
Ellipse类的Triggers属性设置为EventTrigger。加载椭圆时触发事件。BeginStoryboard是启
动故事板的触发器动作。在故事板中，DoubleAnimation元素用于连续改变
CompositeTransform类的ScaleX、ScaleY、TranslateX、TranslateY属性。动画在10秒内把
水平比例改为5，垂直比例改为3（代码文件AnimationUWP /SimpleAnimation.xaml）：
在WPF中，XAML代码略有不同。因为没有CompositeTransform元素，所以使用
Transfor-mationGroup元素（代码文件AnimationWPF / SimpleAnimation.xaml）：
使用ScaleTransform和TranslateTransform，动画就会访问TransformGroup的集合，使
用一个索引器可以访问ScaleX、ScaleY、X和Y属性：
除了在组合变换中使用索引器之外，也可以通过名称访问ScaleTransform元素。下面
的代码简化了该属性的名称：
在WPF中，还必须通过EventTrigger指定RoutedEvent属性。在Windows Universal应用
程序中，事件会在加载元素时自动触发。在WPF中这可以显式地指定：
图30-23和图30-24显示了具有动画效果的椭圆的两个状态。
图30-23
图30-24
动画并不仅仅是一直和立刻显示在屏幕上的一般窗口动画。还可以给业务应用程序添
加动画，使用户界面的响应性更好。光标划过按钮或单击按钮时的外观由动画定义。
Timeline可以完成的任务如表30-3所示。
表30-3
Timeline属性
说明
AutoReverse
使用AutoReverse属性，可以指定连续改变的值在动画结束
后是否返回初始值
SpeedRatio
使用SpeedRatio，可以改变动画的移动速度。在这个属性
中，可以定义父子元素的相对关系。默认值为1；将速率设
置为较小的值，会使动画移动较慢；将速率设置为高于1的
值，会使动画移动较快
BeginTime
使用BeginTime，可以指定从触发器事件开始到动画开始移
动之间的时间长度。其单位可以是天、小时、分钟、秒和几
分之秒。根据SpeedRatio，这可以不是真实的时间。例如，
如果把SpeedRatio设置为2，把开始时间设置为6秒，动画就
在3秒后开始
Duration
使用Duration属性，可以指定动画重复一次的时间长度
RepeatBehavior
给RepeatBehavior属性指定一个RepeatBehavior结构，可以定
义动画的重复次数或重复时间
FillBehavior
如果父元素的时间轴有不同的持续时间，FillBehavior属性
就很重要。例如，如果父元素的时间轴比实际动画的持续时
间短，则将FillBehavior设置为Stop就表示实际动画停止。如
果父元素的时间轴比实际动画的持续时间长，HoldEnd就会
一直执行动画，直到把它重置为初始值为止（假定把
AutoReverse设置为true）
根据Timeline类的类型，还可以使用其他一些属性。例如，使用DoubleAnimation，可
以为动画的开始和结束设置From和To属性。还可以指定By属性，用Bound属性的当前值
启动动画，该属性值会递增由By属性指定的值。
30.8.2 缓动函数
在前面的动画中，值以线性的方式变化。但在现实生活中，移动不会呈线性的方式。
移动可能开始时较慢，逐步加快，达到最高速度，然后减缓，最后停止。一个球掉到地
上，会反弹几次，最后停在地上。这种非线性行为可以使用非线性动画创建。
动画类有EasingFunction属性。这个属性接受一个实现了IEasingFunction接口（WPF）
或派生自基类EasingFunctionBase （Windows Universal应用程序）的对象。通过这个类
型，缓动函数对象可以定义值随着时间如何变化。有几个缓动函数可用于创建非线性动
画，如ExponentialEase，它给动画使用指数公式；QuadraticEase、CubicEase、QuarticEase
和QuinticEase的指数分别是2、3、4、5, 
PowerEase的指数是可以配置的。特别有趣的是
SineEase，它使用正弦曲线，BounceEase创建弹跳效果，ElasticEase用弹簧的来回震荡模
拟动画值。
下面的代码把BounceEase函数添加到DoubleAnimation中。添加不同的缓动函数，就
会看到动画的有趣效果：
为了看到不同的缓动动画，下一个示例让椭圆在两个小矩形之间移动。Rectangle和
Ellipse元素在Canvas画布上定义，椭圆定义了TranslateTransform变换，来移动椭圆（代码
文件Animation[WPF| UWP]\EasingFunctions.xaml）：
图30-25显示了矩形和椭圆。
图30-25
用户单击一个按钮，启动动画。单击此按钮之前，用户可以从
ComboBoxcomboEasingFunctions中选择缓动函数，使用单选按钮选择一个EasingMode枚
举值。
      Start
ComboBox中显示的、动画激活的缓动函数列表从EasingFunctionManager的
EasingFunctionModels属性中返回。这个管理器把缓动函数转换为EasingFunctionModel，
以显示出来（代码文件Animation [WPF | UWP]\EasingFunctionsManager.cs）：
    public class EasingFunctionsManager
    {
      private static IEnumerable s_easingFunctions =
        new List()
        {
        new BackEase(),
        new SineEase(),
        new BounceEase(),
        new CircleEase(),
        new CubicEase(),
        new ElasticEase(),
        new ExponentialEase(),
        new PowerEase(),
        new QuadraticEase(),
        new QuinticEase()
        };
      public IEnumerable EasingFunctionModels =>
        s_easingFunctions.Select(f => new EasingFunctionModel(f));
    }
EasingFunctionModel的类定义了ToString方法，返回定义了缓动函数的类的名称。这
个名字显示在组合框中（代码文件Animation[WPF | UWP]\EasingFunctionModel.cs）：
    public class EasingFunctionModel
    {
      public EasingFunctionModel(EasingFunctionBase easingFunction)
      {
        EasingFunction = easingFunction;
      }
      public EasingFunctionBase EasingFunction { get; }
      public override string ToString() => EasingFunction.GetType().Name;
    }
ComboBox在代码隐藏文件的构造函数中填充（代码文件Animation[WPF 
|
UWP]/EasingFunctions. xaml.cs）：
    private EasingFunctionsManager _easingFunctions = new EasingFunctionsManager(
);
    private const int AnimationTimeSeconds = 6;
    public EasingFunctions()
    {
      this.InitializeComponent();
      foreach (var easingFunctionModel in _easingFunctions.EasingFunctionModels)
      {
        comboEasingFunctions.Items.Add(easingFunctionModel);
      }
    }
在用户界面中，不仅可以选择应该用于动画的缓动函数的类型，也可以选择缓动模
式。所有缓动函数的基类（EasingFunctionBase）定义了EasingMode属性，它可以是
EasingMode枚举的值。
单击此按钮，启动动画，会调用OnStartAnimation方法。该方法又调用StartAnimation
方法。在这个方法中，通过编程方式创建一个包含DoubleAnimation的故事板。之前列出
了使用XAML的类似代码。动画连续改变translate1元素的X属性。在WPF和UWP应用程序
中以编程方式创建动画略有不同；不同的代码由预处理器命令处理（代码文件
Animation[WPF | UWP]\ EasingFunctions.xaml.cs）：
    private void OnStartAnimation(object sender, RoutedEventArgs e)
    {
      var easingFunctionModel =
        comboEasingFunctions.SelectedItem as EasingFunctionModel;
      if (easingFunctionModel ! = null)
      {
        EasingFunctionBase easingFunction = easingFunctionModel.EasingFunction;
        easingFunction.EasingMode = GetEasingMode();
        StartAnimation(easingFunction);
      }
    }
    private void StartAnimation(EasingFunctionBase easingFunction)
    {
    #if WPF
      NameScope.SetNameScope(translate1, new NameScope());
    #endif
      var storyboard = new Storyboard();
      var ellipseMove = new DoubleAnimation();
      ellipseMove.EasingFunction = easingFunction;
      ellipseMove.Duration = new
        Duration(TimeSpan.FromSeconds(AnimationTimeSeconds));
      ellipseMove.From = 0;
      ellipseMove.To = 460;
    #if WPF
      Storyboard.SetTargetName(ellipseMove, nameof(translate1));
      Storyboard.SetTargetProperty(ellipseMove,
        new PropertyPath(TranslateTransform.XProperty));
    #else
      Storyboard.SetTarget(ellipseMove, translate1);
      Storyboard.SetTargetProperty(ellipseMove, "X");
    #endif
      // start the animation in 0.5 seconds
      ellipseMove.BeginTime = TimeSpan.FromSeconds(0.5);
      // keep the position after the animation
      ellipseMove.FillBehavior = FillBehavior.HoldEnd;
      storyboard.Children.Add(ellipseMove);
    #if WPF
      storyboard.Begin(this);
    #else
      storyBoard.Begin();
    #endif
    }
现在，可以运行应用程序，看看椭圆使用不同的缓动函数，以不同的方式，从左矩形
移动到右矩形。使用一些缓动函数，比如BackEase、BounceEase或ElasticEase，区别是显
而易见的。其他的一些缓动函数没有明显的区别。为了更好地理解缓动值如何变化，可以
创建一个折线图，其中显示了一条线，其上的值由基于时间的缓动函数返回。
为了显示折线图，可以创建一个用户控件，它定义了一个Canvas元素。默认情况下，
x方向从左到右，y方向从上到下。为了把y方向改为从下到上，可以定义一个变换（代码
文件Animation[WPF| UWP]/EasingChartControl.xaml）：