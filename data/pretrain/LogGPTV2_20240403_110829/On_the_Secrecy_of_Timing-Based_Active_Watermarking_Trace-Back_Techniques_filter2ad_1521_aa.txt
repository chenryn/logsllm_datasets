title:On the Secrecy of Timing-Based Active Watermarking Trace-Back Techniques
author:Pai Peng and
Peng Ning and
Douglas S. Reeves
On the Secrecy of Timing-Based Active Watermarking Trace-Back Techniques∗
Pai Peng
Peng Ning
Douglas S. Reeves
Cyber Defense Laboratory
Department of Computer Science
North Carolina State University
Raleigh, NC 27695, USA
Abstract
Timing-based active watermarking schemes are devel-
oped to trace back attackers through stepping stone con-
nections or anonymizing networks. By slightly changing
packet timing, these schemes achieve robust correlation
for encrypted network connections under timing perturba-
tion. However, the manipulation on packet timing makes
the schemes themselves a potential target of intelligent at-
tackers. In this paper, we analyze the secrecy of the timing-
based active watermarking techniques for tracing through
stepping stones, and propose an attack scheme based on an-
alyzing the packet delays between adjacent stepping stones.
We develop attack techniques to infer important watermark
parameters, and to recover and duplicate embedded water-
marks. The resulting techniques enable an attacker to de-
feat the tracing systems in certain cases by removing water-
marks from the stepping stone connections, or replicating
watermarks in non-stepping stone connections. We also de-
velop techniques to determine in real-time whether a step-
ping stone connection is being watermarked for trace-back
purposes. We have performed substantial experiments using
real-world data to evaluate these techniques. The experi-
mental results demonstrate that for the watermark scheme
being attacked (1) embedded watermarks can be success-
fully recovered and duplicated when the watermark param-
eters are not chosen carefully, and (2) the existence of wa-
termarks in a network ﬂow can always be quickly detected.
1. Introduction
The rapid growth of the Internet not only brings the
global connectivity to the general public, but also offers
malicious users an opportunity to hide their traces. In par-
ticular, a malicious user may attack other computers from
∗
The work described in this paper has been supported by ARDA under
contract NBCHC030142. The contents of this paper do not necessarily
reﬂect the position or the policies of the U.S. Government.
anywhere on the Internet through, for example, a sequence
of stepping stones (i.e., compromised hosts used as inter-
mediate steps to launch the ﬁnal attack) or an anonymizing
network such as Tor [4] and FindNot [7]. As a result, it is
challenging to identify the sources of attacks and hold at-
tackers accountable for their malicious actions.
Various network forensic techniques have been pro-
posed in the past decade to address this issue. Several ap-
proaches have been proposed to identify the origin of an at-
tack launched through a sequence of stepping stones (e.g.,
[1,5,18,24,30,35]). Moreover, substantial results have been
obtained for IP trace-back aimed at locating the sources of
Distributed Denial of Service (DDoS) attacks with spoofed
source IP addresses (e.g., [21–23]). Recently researchers
have also been investigating how to correlate trafﬁc through
anonymizing networks [9, 13, 16, 27, 32].
Among these network forensic techniques, timing-based
active watermarking is one of the promising approaches
aimed at tracing back to the attacker’s origin through a
sequence of stepping stones [28] or an anonymizing net-
work [27]. These approaches embed a timing-based wa-
termark into a network ﬂow by delaying selected packets.
Trace-back is achieved by embedding/decoding watermarks
in network ﬂows and correlating the ﬂows with similar wa-
termarks. Because these techniques only use packet timing
for trace-back purposes, they can handle encryption due to
secure protocols such as SSH and IPsec. Compared with
timing-based passive approaches (e.g., [1, 5, 34, 35]), which
correlate network ﬂows simply using packet timing (with-
out alteration), the active watermark schemes in general re-
quire fewer packets and thus can identify the sources of at-
tacks more efﬁciently. It has been shown in [27, 28] that
such techniques are robust to timing perturbation injected
by attackers and can successfully defeat anonymizing net-
works such as FindNot [7].
However, research on timing-based active watermarking
has overlooked an important issue: the secrecy of the pa-
rameters used in watermarking. There are two immediate
implications if an attacker knows these parameters. First,
Proceedings of the 2006 IEEE Symposium on Security and Privacy (S&P’06) 
1081-6011/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 02:49:15 UTC from IEEE Xplore.  Restrictions apply. 
the attacker may attempt to remove the watermark, thus ren-
dering the trace-back schemes ineffective. Second, the at-
tacker may replicate the watermark in other network ﬂows,
so that benign users will be held accountable for the at-
tacker’s malicious activities. The previous work [27, 28]
relies on the assumption that these watermark parameters
are kept only to the trace-back system. However, it is desir-
able to investigate if an attacker can detect and recover the
parameters from the network ﬂows when he/she is being
traced.
The objective of this paper is to investigate how an at-
tacker being traced by a timing-based active watermarking
system can detect and recover the watermark parameters,
using the technique proposed in [28] as the target. We as-
sume the attacker uses nothing but the packet timestamps on
the stepping stone hosts. We study how such an attacker can
achieve two complementary goals: (1) How to recover the
watermark parameters or replicate the watermark to a dif-
ferent network ﬂow? (2) How to quickly determine whether
the attacker is being traced by a timing-based active water-
marking scheme?
In this paper, we propose an attack scheme that compro-
mises timing-based active watermarking trace-back systems
by analyzing the packet delays between adjacent stepping
stones. We develop a suite of algorithms to infer water-
mark parameters, recover/duplicate watermarks, and detect
the existence of watermarks as early as possible. We also
investigate the trade-off between watermark capability (i.e.,
detection rate & false positive rate) and watermark secrecy,
and demonstrate that a watermark cannot evade detection
without degradation of its trace-back capability. Our exper-
imental results have conﬁrmed that almost the entire wa-
termark can be recovered or duplicated if the watermark
parameters are not selected cautiously. Although our at-
tack focuses on a speciﬁc watermarking scheme, it can po-
tentially be extended to compromise other timing-based ac-
tive watermarking approaches. Our results indicate that the
threats of intelligent attackers must be carefully considered
for any active trace-back scheme that manipulates packet
timing.
The rest of this paper is organized as follows. Section 2
gives a brief introduction to the timing-based active water-
marking scheme proposed in [28], which is the main target
of our attack. Section 3 presents an overview of the pro-
posed attack. Section 4 discusses our approach for inferring
unknown watermark parameters and recovering/duplicating
watermark. Section 5 describes our approach for quickly
detecting the existence of (unknown) watermarks. Section
6 presents our experiments used to validate the proposed
approaches. Section 7 discusses related work, and Section
8 concludes our paper and points out some future research
directions.
2. Timing-Based Active Watermarking for
Tracing through Stepping Stones [28]
In this section, we brieﬂy describe the timing-based ac-
tive watermarking scheme proposed in [28], which will be
the target of our analysis in later sections.
When using a sequence of stepping stone hosts, an at-
tacker needs to establish a connection between any two ad-
jacent hosts in this sequence to have a chain of connections,
so that the attacker’s commands can be relayed to the re-
mote host by these connections and the responses can be
relayed back to the attacker. The timing-based active water-
marking approach in [28] embeds watermarks in upstream
connections (ﬂows) and attempts to detect them in down-
stream connections (ﬂows) in order to trace back to the at-
tacker’s origin.
A watermark is embedded through manipulating the
inter-packet delays (IPDs) of certain pre-selected water-
mark embedding packets. The IPD between two packets
pa and pb is ipd(a,b) = tb − ta, where pb is transmitted
later than pa, and ta and tb are the timestamps of pa and
pb, respectively. IPDs are quantized for robustness; given
a quantization step S, the quantization function q(ipd, S)
rounds off ipd/S to the nearest integer. To embed one wa-
termark bit w (0 or 1), an ipd is slightly increased (by de-
laying the second packet the smallest amount) so that the
watermarked IPD, denoted as ipdW , satisﬁes the condition
q(ipdW , S) mod 2 = w. This means ipdW is even multi-
ples of S when 0 is embedded, and odd multiples of S when
1 is embedded.
Watermarked IPD ipdW is computed by the watermark
embedding function: e(ipd, w, S) = [q(ipd + S/2, S) +
δ] × S, where δ = (w − (q(ipd + S/2, S) mod 2) + 2)
mod 2. This approach quantizes (ipd + S/2) instead of
ipd to ensure ipdW ≥ ipd, so that the watermark bit can
be embedded by delaying the second packet involved in the
IPD by the amount of (ipdW − ipd). Hereafter, a delay
caused by watermark embedding is called as a watermark
delay.
The watermark decoding function is d(ipd, S) =
q(ipd, S) mod 2. When timing perturbation (due to attacks
or network delays) is introduced after watermarking, as long
as the change on ipdW is limited by (−S/2, S/2], this func-
tion can decode the watermark bit correctly. Therefore, a
watermark bit embedded in a single IPD can resist up to
S/2 random timing perturbation. To resist perturbations
larger than S/2, M (M > 1) IPDs are used to embed one
bit. Speciﬁcally, the average of the M IPDs is computed as
ipdavg = 1
i=1 ipdi, and then watermarked IPD aver-
M
avg = e(ipdavg, w, S) is calculated. The watermark
age ipdW
bit is embedded by increasing each of these M IPDs by the
− ipdavg). Decoding the watermark bit
amount of (ipdW
avg
, S).
on the M IPDs simply involves computing d(ipdW
avg
(cid:2)
M
Proceedings of the 2006 IEEE Symposium on Security and Privacy (S&P’06) 
1081-6011/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 02:49:15 UTC from IEEE Xplore.  Restrictions apply. 
With the same S, embedding 1 bit watermark with multiple
IPDs provides higher resistance to random timing perturba-
tion than a single IPD.
This approach uses multiple watermark bits to further in-
crease the detection rate and reduce the false positive rate
for trace-back. An L-bit watermark W is embedded by re-
peating the procedure of embedding a single bit L times.
During watermark detection, another L-bit watermark W (cid:2)
is decoded from the suspicious ﬂow and compared with W .
If the hamming distance between W and W (cid:2)
is less than or
equal to a pre-deﬁned threshold h, this approach reports that
a stepping-stone ﬂow is detected. It has been shown in [28]
that this approach is highly robust against random timing
perturbation.
Table 1 summarizes the parameters used in this ap-
proach.
Table 1. Watermark Parameters
S
L
M
w1 . . . wL
Quantization step
The number of binary bits in the watermark
Degree of robustness (i.e., the number of
IPDs used to embed 1 bit)
The watermark, in which each bit wi
is either 0 or 1
3. Basis of the Timing Analysis Attack
As discussed earlier, the secrecy of the watermark pa-
rameters has not been seriously investigated. If an attacker
is able to derived these parameters, the attacker can either
remove the watermark (i.e., reduce the detection rate) or
duplicate the watermark in benign ﬂows (i.e., increase the
false positive rate). In both cases, the attacker can success-
fully defeat the tracing system. In this paper, we take an
attacker’s position, aiming at understanding how well an at-
tacker can derive the watermark parameters used by timing-
based active watermarking through timing analysis.
pad timestamp t
i into 
Compute packet 
s
every packet sent out
delay di from t
i & t
i
s
r
Stepping 
Stone h
a-1
watermark
Stepping 
stone h
a
Figure 1. Overview of our attacks to the wa-
termark scheme
As discussed in Section 2, when an attacker uses a se-
ries of stepping stone hosts, the attacker has to establish a
sequence of connections between adjacent hosts, and appli-
cation data (e.g., a shell command) is relayed by these con-
nections from the attacker to the ﬁnal target or vice versa.
s
t
e
k
c
a
p
f
o
r
e
b
m
u
n
e
h
T
70
60
50
40
30
20
10
0
0
μ=0.3669
σ=0.1656
0.5
1
Packet delay (ms)
1.5
2
Figure 2. The distribution of packet delays af-
ter the clock skew is removed
0.04
0.03
0.02
0.01
← fX (μ = 0, σ = 10)
minimax
solution
 fZ (S = 100)
↓
0
-30
0
14.5
50
100
Delay (ms)
150
200
Figure 3. Probability density for normal and
the sum of normal and uniform distributions
An attacker can easily obtain the one-way packet transit de-
lay (abbreviated as packet delay) of a piece of application
data as it is forwarded from one host to another. For exam-
ple, as illustrated in Figure 1, when ha−1 forwards a shell
command to ha in a packet, the attacker can include ha−1’s
current local time ts along with the command. When ha
receives this shell command, the attacker can retrieve ts,
check the receipt time tr at ha, and calculate the delay as
d = tr − ts. The packet delays are the target of our timing
analysis.
When the stepping stone hosts do not have well synchro-
nized time, the packet delay will include the clock offset
(i.e., the difference between the clocks at a speciﬁc time)
and the clock skew (i.e., the ﬁrst derivative of the offset).
Clock skew is a critical issue since it constantly changes the
packet delays. We may use the approach proposed in [17]
to handle this problem. That is, we use cumulative minima
(or maxima) to identify the skew, and then use linear ﬁt to
compute and remove the skew. As a result, clock discrep-
ancy only introduces a constant clock offset into all packet
delays after the clock skews are removed.
We examined the one-way packet transit delays between
computers in the PlanetLab [19], which are distributed
Proceedings of the 2006 IEEE Symposium on Security and Privacy (S&P’06) 
1081-6011/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 02:49:15 UTC from IEEE Xplore.  Restrictions apply. 
world wide. Figure 2 shows a typical distribution of the
packet delays from a computer at MIT to a computer on
our campus network after the clock skew between these
computers are removed. To simplify our analysis, we ap-
proximate such distributions with normal distributions. In
our experiments, such approximations pass Kolmogorov-
Smirnov [6] goodness-of-ﬁt test with a signiﬁcance level of
0.05, which is the probability that we wrongly reject the
normal distribution approximation when it is actually true.
It is easy to see that an attacker can observe the packet de-
lays and estimate the parameters (i.e., mean μ and variance
σ2) of the delay distribution. To distinguish such packet de-
lays from the delays introduced by watermark embedding,
hereafter we call them normal network delays.
When a timing-based active watermarking approach is
used for trace-back, certain packets will have to be delayed
to embed the watermark. Assuming the packets to be de-
layed come at random time, we can easily derive that the
watermark delays (i.e., additional delays of the embedding
packets) follow a uniform distribution over [0, 2S), where
S is the quantization step. We performed experiments to
validate this assumption. The results pass Kolmogorov-
Smirnov goodness-of-ﬁt test for uniform distribution with
a signiﬁcance level of 0.05.
When a watermark is embedded, the packet delay of each
embedding packet should be the combination of the normal
network delay and the watermark delay. Let normal random
variable X represent the normal network delay, and uniform
random variable Y represent the watermark delay. The de-
lay of the embedding packet is Z = X + Y . We can easily
derive the probability density function of Z as:
fX(y)fY (x − y)dy
−∞