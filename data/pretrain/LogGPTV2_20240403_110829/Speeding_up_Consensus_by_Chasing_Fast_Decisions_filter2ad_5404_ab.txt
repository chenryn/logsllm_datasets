(cid:11)(cid:12)(cid:2)(cid:3)(cid:7)(cid:5)(cid:13)
(cid:14)(cid:18)(cid:14)(cid:15)(cid:4)(cid:16)
(a) The non-commutative commands c and ¯c are executed only after a
quorum of nodes receives them. A total order of the commands is not
enforced in this case, since commands are submitted “only” via reliable
broadcast.
(b) The non-commutative commands c and ¯c are executed only after
a quorum of nodes receives them. A total order of the commands is
enforced in this case: ¯c is executed after c on all nodes, since T =
0  T , will be executed before c. Note that
in this section we do not distinguish between fast and classic
quorums, although in Section V we explain that a fast quorum
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:00:16 UTC from IEEE Xplore.  Restrictions apply. 
(cid:9)(cid:10)(cid:8)(cid:9)(cid:8)(cid:11)(cid:5)(cid:13)
(cid:4)(cid:14)(cid:17)
(cid:8)(cid:6)(cid:13)(cid:1)(cid:4)(cid:14)(cid:15)(cid:16)
(cid:11)(cid:12)(cid:2)(cid:3)(cid:7)(cid:5)(cid:13)
(cid:4)(cid:14)(cid:17)(cid:14)(cid:15)(cid:16)
(cid:8)(cid:6)(cid:13)(cid:1)(cid:4)(cid:14)(cid:15)(cid:16)
(cid:1)(cid:2)
(cid:8)(cid:6)(cid:13)(cid:1)(cid:1)(cid:1)(cid:14)(cid:15)(cid:4)(cid:16)
(cid:1)(cid:2)
(cid:8)(cid:6)(cid:13)(cid:1)(cid:1)(cid:1)(cid:14)(cid:15)(cid:16)
(cid:9)(cid:6)(cid:7)(cid:8)
(cid:1)(cid:2)
(cid:11)(cid:12)(cid:2)(cid:3)(cid:7)(cid:5)(cid:13)
(cid:14)(cid:18)(cid:14)(cid:15)(cid:4)(cid:16)
(cid:1)(cid:2)
(cid:9)(cid:10)(cid:8)(cid:9)(cid:8)(cid:11)(cid:5)(cid:13)
(cid:14)(cid:18)
(cid:11)(cid:1)
(cid:11)(cid:2)
(cid:11)(cid:3)
(cid:11)(cid:4)
(cid:11)(cid:5)
(cid:1)(cid:2)
(cid:1)(cid:2)
(cid:10)
(cid:10)
(cid:10)
(cid:10)
(cid:1)(cid:2)
(cid:10)
(cid:1)(cid:2)
(cid:1)(cid:2)
(cid:11)(cid:1)
(cid:11)(cid:2)
(cid:11)(cid:3)
(cid:11)(cid:4)
(cid:11)(cid:5)
(cid:10)(cid:11)(cid:9)(cid:10)(cid:9)(cid:12)(cid:5)(cid:15)
(cid:4)(cid:16)(cid:19)
(cid:9)(cid:6)(cid:15)(cid:1)(cid:4)(cid:16)(cid:17)(cid:18)
(cid:1)(cid:2)
(cid:9)(cid:6)(cid:15)(cid:1)(cid:1)(cid:1)(cid:16)(cid:17)(cid:18)
(cid:1)(cid:2)
(cid:9)(cid:6)(cid:15)(cid:1)(cid:1)(cid:1)(cid:16)(cid:17)(cid:18)
(cid:1)(cid:2)
(cid:1)(cid:2)
(cid:9)(cid:6)(cid:7)(cid:8)
(cid:1)(cid:2)
(cid:12)(cid:13)(cid:2)(cid:3)(cid:7)(cid:5)(cid:15)
(cid:16)(cid:20)(cid:16)(cid:17)(cid:18)
(cid:1)(cid:2)
(cid:10)(cid:11)(cid:9)(cid:10)(cid:9)(cid:12)(cid:5)(cid:15)
(cid:16)(cid:20)
(cid:1)(cid:2)
(cid:8)(cid:2)(cid:4)(cid:6)(cid:15)(cid:1)(cid:4)(cid:16)(cid:17)(cid:1)(cid:1)(cid:1)(cid:18)
(cid:1)(cid:2)
(cid:1)(cid:2)
(cid:1)(cid:2)
(cid:1)(cid:2)
(cid:11)(cid:5)(cid:13)(cid:11)(cid:14)(cid:15)
(cid:4)(cid:16)(cid:21)(cid:16)(cid:17)(cid:1)(cid:1)(cid:1)(cid:18)
(cid:1)(cid:2)
(cid:12)(cid:13)(cid:2)(cid:3)(cid:7)(cid:5)(cid:15)
(cid:4)(cid:16)(cid:21)(cid:16)(cid:17)(cid:1)(cid:1)(cid:1)(cid:18)
(cid:1)(cid:2)
(cid:9)(cid:6)(cid:15)(cid:1)(cid:4)(cid:16)(cid:17)(cid:1)(cid:1)(cid:1)(cid:18)
(cid:10)
(cid:10)
(cid:10)
(cid:10)
(cid:10)
(a) p2 sends an OK message for c at timestamp T = 0 because c is in the
predecessors set of ¯c, and ¯c is decided at timestamp ¯T = 4.
(b) p2 rejects c at timestamp T = 0 because c is not in the predecessors
set of ¯c, and ¯c is decided at timestamp ¯T = 4. c is decided at timestamp 5
after a retry.
Fig. 2. Execution of the wait condition in CAESAR due to out of order reception of non-commutative commands on node p2. Command c waits for command
¯c to be stable on node p2, since c’s timestamp T has been received after ¯c’s timestamp ¯T , and T = 0  T and c is not in ¯c’s Pred. p2 also sends back the set of
commands that caused the rejection (i.e., ¯c) to aid in choosing
the next timestamp for c.
In CAESAR, if a command’s leader receives at least one
NACK message for the proposed command c, it assigns a
new timestamp Tnew greater than any suggestion received in
the NACK messages, and it broadcasts a RETRY message to
ask for the acceptance of Tnew to a quorum of nodes. Note
that if a node sends a NACK message for a command c to
c’s leader, it means that c’s leader would receive at least a
NACK message for c from any other quorum due to the way
a command rejection is computed (see Section V).
The RETRY message also contains the predecessors set
Pred, which is computed as the union of predecessors re-
ceived in the quorum of replies from the previous phase, as the
case of Section IV-A. Therefore, in Figure 2(b), p0 broadcasts
the RETRY with timestamp Tnew = 5 and Pred = {¯c} for c.
52
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:00:16 UTC from IEEE Xplore.  Restrictions apply. 
Retrying a command with a new timestamp does not entail
restarting the procedure from the beginning. In fact, unlike
the case of a PROPOSE message, CAESAR guarantees that
a RETRY message can never be rejected (see Sections V-C
and V-F). Such a guarantee ensures starvation-free agreement
of commands. The reply to a RETRY message for c could
contain a set of additional predecessors that were not received
by c’s leader during the previous communication phase. This
set is sent along with the STABLE message for c.
V. PROTOCOL DETAILS
A command c that is proposed to CAESAR can go through
four phases before it gets decided and the outcome of its
execution is returned to the client. CAESAR schedules the
execution of those four phases in order to provide two modes
of decision, called fast decision and slow decision.
A command c is proposed by one of the nodes, which
assumes the role of c’s leader and coordinates the decision
of c by starting the fast proposal phase. If this phase returns a
positive outcome after having collected replies from a quorum
of FQ nodes, the leader can execute the ﬁnal stable phase,
which ﬁnalizes the decision of c as a fast decision, with a
latency of two communication delays. Otherwise, if the fast
proposal phase returns a negative outcome, the leader executes
an additional retry phase, in which it contacts a quorum of CQ