title:Where Does It Go?: Refining Indirect-Call Targets with Multi-Layer
Type Analysis
author:Kangjie Lu and
Hong Hu
Where Does It Go? Refining Indirect-Call Targets with
Multi-Layer Type Analysis
Kangjie Lu
University of Minnesota, Twin Cities
Hong Hu
Georgia Institute of Technology
Abstract
System software commonly uses indirect calls to realize dynamic
program behaviors. However, indirect-calls also bring challenges
to constructing a precise control-flow graph that is a standard pre-
requisite for many static program-analysis and system-hardening
techniques. Unfortunately, identifying indirect-call targets is a hard
problem. In particular, modern compilers do not recognize indirect-
call targets by default. Existing approaches identify indirect-call
targets based on type analysis that matches the types of function
pointers and the ones of address-taken functions. Such approaches,
however, suffer from a high false-positive rate as many irrelevant
functions may share the same types.
In this paper, we propose a new approach, namely Multi-Layer
Type Analysis (MLTA), to effectively refine indirect-call targets
for C/C++ programs. MLTA relies on an observation that function
pointers are commonly stored into objects whose types have a multi-
layer type hierarchy; before indirect calls, function pointers will be
loaded from objects with the same type hierarchy “layer by layer”.
By matching the multi-layer types of function pointers and func-
tions, MLTA can dramatically refine indirect-call targets. MLTA is
effective because multi-layer types are more restrictive than single-
layer types. It does not introduce false negatives by conservatively
tracking targets propagation between multi-layer types, and the
layered design allows MLTA to safely fall back whenever the anal-
ysis for a layer becomes infeasible. We have implemented MLTA
in a system, namely TypeDive, based on LLVM and extensively
evaluated it with the Linux kernel, the FreeBSD kernel, and the
Firefox browser. Evaluation results show that TypeDive can elimi-
nate 86% to 98% more indirect-call targets than existing approaches
do, without introducing new false negatives. We also demonstrate
that TypeDive not only improves the scalability of static analysis
but also benefits semantic-bug detection. With TypeDive, we have
found 35 new deep semantic bugs in the Linux kernel.
CCS Concepts
• Security and privacy → Systems security; Software and ap-
plication security.
Keywords
Layered type analysis; Indirect-call targets; Function pointers; CFI
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
CCS ’19, November 11–15, 2019, London, United Kingdom
© 2019 Association for Computing Machinery.
ACM ISBN 978-1-4503-6747-9/19/11...$15.00
https://doi.org/10.1145/3319535.3354244
ACM Reference Format:
Kangjie Lu and Hong Hu. 2019. Where Does It Go? Refining Indirect-Call
Targets with Multi-Layer Type Analysis. In 2019 ACM SIGSAC Conference
on Computer and Communications Security (CCS ’19), November 11–15, 2019,
London, United Kingdom. ACM, New York, NY, USA, 15 pages. https://doi.
org/10.1145/3319535.3354244
1 Introduction
Function pointers are commonly used in C/C++ programs to sup-
port dynamic program behaviors. For example, the Linux kernel
provides unified APIs for common file operations such as open().
Internally, different file systems have their own implementations of
these APIs, and the kernel uses function pointers to decide which
concrete implementation to invoke at runtime. Such an invocation
is known as an indirect call (icall for short). Common icall targets
include callback functions, jump-table entries, and virtual functions.
While icalls are common and useful, by their dynamic nature,
icall targets cannot be precisely decided through static analysis.
This leads to inherent challenges in constructing precise global
Control-Flow Graph (CFG) that connects icalls to their targets. In
particular, compilers such as GCC and LLVM do not recognize icall
targets by default. Users of CFG have two options: stopping an
analysis when encountering icalls or continuing an analysis by
taking all address-taken functions as potential targets. Both options
have apparent drawbacks. The former limits the coverage of the
analysis, while the latter limits the scalability and precision of the
analysis, and hurts the strength of system hardening techniques.
More specifically, many bug detection tools using inter-procedural
analysis choose to skip icalls [24, 26, 40, 50], and thus will miss bugs
hidden behind icalls. Including massive irrelevant functions, on the
other hand, will lead to significant false positives to bug detection
techniques based on cross-checking [34, 52], and will likely cause
path explosion to symbolic executions [5, 47], impeding precise
analyses. Furthermore, Control-Flow Integrity (CFI) [1, 6, 35, 46, 53,
55] prevents control-flow hijacking attacks by restricting control
transfers to predefined icall targets. The inaccuracy in finding icall
targets will result in a permissive CFI enforcement, rendering the
protection ineffective [8, 12, 14, 17, 42].
Given the importance of identifying icall targets, researchers
have attempted to achieve it in two general ways: pointer analysis
and type analysis. In theory, pointer analysis can find out all possible
icall targets through whole-program analysis [1, 2, 4, 33, 45]. How-
ever, since pointer analysis itself requires a CFG from the beginning,
the analysis must be recursive and thus computational expensive.
More importantly, realizing a precise pointer analysis is hard or
typically does not guarantee the soundness [3, 14]. Given the limita-
tions with pointer analysis, recent practical CFI techniques opt for
function-type analysis [14, 35, 46]. These approaches identify icall
targets by matching the type of function pointers with the ones
Session 8D: Language SecurityCCS ’19, November 11–15, 2019, London, United Kingdom1867of potential target functions. While such approaches have been
practically applied to harden programs, they still suffer significant
false positives—indirect calls with a small number of general-type
parameters (e.g., void (*)(char *)) will match a large number of
unrelated function targets.
In this paper, we propose a new approach, Multi-Layer Type Anal-
ysis (MLTA), to effectively refine icall targets without introducing
false negatives to existing type analysis–based approaches. The
intuition behind MLTA is that a function address is often stored
into objects whose types belong to a multi-layer type hierarchy;
when the function pointer is used in an icall, its value is loaded
layer by layer from the same type hierarchy. For example, in the
statement, b.a.fptr=&f, the function address of f is stored into the
function-pointer field (fptr) of a type-A object (a) which is stored in
a type-B object (b). Correspondingly, to invoke the function through
an icall, the function address will be loaded layer by layer: object a
will be first loaded from object b, and the function pointer, fptr, will
be further loaded from object a. By matching the multi-layer types
(i.e., B.A.fptr_t) instead of only the first-layer type (i.e., fptr_t)
between address-taken functions and function pointers, we can
dramatically refine icall targets. Accordingly, we denote the exist-
ing type analyses focusing on the “first-layer” as First-Layer Type
Analysis (FLTA).
MLTA has two unique advantages. First, given the fact that
multi-layer types are more restrictive than first-layer types, it can
significantly reduce false positives. Since the first-layer type P is
the inner-most layer of all multi-layer types for an icall, the target
set provided by FLTA for the first-layer type is the union of that
provided by MLTA for all related multi-layer types. In other words,
for the same icall, MLTA always provides a subset of the one given
by FLTA. Second, the multi-layer type matching can be elastic to
avoid potential false negatives. In general, types with more layers
provide stronger restrictions in confining icall targets. However,
when the complete multi-layer type is not available, e.g., due to
type escaping (§4.1.3), MLTA can fall back to a more permissive
sub-type to find icall targets, without introducing false negatives.
We provide a formal analysis in §6 to show that MLTA guarantees
the effectiveness and does not introduce false negatives.
There are however two challenges in implementing the MLTA
analysis. First, maintaining the map between multi-layer types and
address-taken functions can be expensive in both storage and com-
putation. In the aforementioned example, MLTA has to maintain
the map for fptr_t, A.fptr_t, and B.A.fptr_t, if they are used
separately in the program. Given that the map must be maintained
globally for the target program, it is potentially large. Second, the
maintaining may become complicated when casting occurs fre-
quently between these multi-layer types; types must be recursively
maintained for each casting. More importantly, the multi-layer
types in the source and sink of a cast should be extracted, which can
be challenging when complicated data flows are involved. MLTA
must address this issue carefully to avoid potential false negatives.
Our solution to these challenges is to break a multi-layer type
into a series of two-layer types and map each of them with its
associated icall targets. For example, given b.a.fptr=&f, we will
maintain the mapping for only B.A and A.fptr_t. Any cast can thus
be simply recorded for the two-layer type instead of all involved
multi-layer types. Each two-layer type is independent of others.
Given an icall, based on where the function pointer is loaded from,
we can assemble the two-layer types into a multi-layer type back
and resolve the final icall targets. This way, we can restrict icall
targets both effectively and efficiently.
Applying MLTA to C++ programs requires additional design
efforts because the pointer to virtual-function tables (VTable) is
frequently cast to general types such as char*, rendering the type
matching ineffective. To address this problem, we develop a mech-
anism to precisely connect VTables to the corresponding classes
and to keep track of class casting. A few recent works [25, 54] have
attempted to enforce CFI for C++ programs in a similar way that
a virtual function call can only invoke the virtual functions imple-
mented in the current class or its derived classes, but not others.
Such an analysis is realized by extracting the class hierarchy infor-
mation from the C++ programs. We find that MLTA can outperform
these works for two reasons. First, MLTA can further refine icall
targets when an object pointer is recursively stored into an object
of a different class. Second, MLTA precisely tracks type casting.
Therefore, virtual functions of a derived class become valid icall
targets of a base class only when an actual cast exists.
We have implemented our design of MLTA in a system called
TypeDive. TypeDive can not only identify how function addresses
are stored into and loaded from objects layer by layer, but also
conservatively capture type-escaping cases. We have also evaluated
the effectiveness and potential false-negative cases of TypeDive
with three widely used large system programs—the Linux kernel,
the FreeBSD kernel, and the Firefox browser. The evaluation results
show that, compared to existing approaches using FLTA, TypeDive
can additionally eliminate 86% to 98% icall targets for these large
and complex programs. Our empirical false-negative evaluation
also shows that TypeDive does not introduce any false negatives to
FLTA. Further, we show how TypeDive can improve the scalability
and precision of traditional static analyses. At last, we leveraged
TypeDive to find peer functions and cross-check them to identify
semantic bugs that either miss security checks or use initialized
variables. From the results, we have manually confirmed 25 new
missing-check bugs and 10 new missing-initialization bugs in the
Linux kernel. All these bugs are hidden behind icalls where existing
detection approaches either simply ignore or have significant false
positives.
In summary, we make the following contributions in this paper.
• A new approach. We propose the multi-layer type analysis to
effectively refine indirect-call targets. MLTA is elastic and does
not introduce false negatives to existing type analysis–based
approaches.
• New techniques. We propose multiple techniques such as type
confinement and propagation analysis, and type escaping anal-
ysis to ensure the effectiveness of MLTA and to conservatively
eliminate potential false negatives. We also extend MLTA to
support C++ programs.
• Extensive evaluation and new bugs. We have implemented
MLTA in a prototype system, TypeDive. We extensively evalu-
ated its effectiveness, scalability, and false negatives by applying
it to three large and complex real-world system programs. With
TypeDive, we found 35 new semantic bugs in the Linux kernel.
Session 8D: Language SecurityCCS ’19, November 11–15, 2019, London, United Kingdom1868The rest of this paper is organized as follows. We present the
problem of icall-target resolving in §2; the overview of TypeDive in
§3; the design of TypeDive in §4; the implementation of TypeDive
in §5. We then formally analyze MLTA in §6. We present the evalu-
ation of TypeDive in section §7, discuss its limitations in §8 and its
related work in §9. We finally conclude in §10.
2 Problem Definition
In this section, we first provide the background of function pointers,
including their usage and prevalence, and then show the limitations
with existing approaches to motivate our approach.
2.1 Function Pointers and Indirect Calls
Programs use function pointers to realize dynamic features and
to improve program performance. To achieve dynamic features,
the icall target is determined by the value of a function pointer
that originates from callbacks, exception handling, or C++ virtual
functions. For example, C++ programs heavily use virtual functions
to realize polymorphism, where the concrete behavior of a function
is determined by the runtime type. C++ compilers save the addresses
of all virtual functions implemented in a class into a table (VTable)
and store the table address into the first entry of each class object.
Following the pointer of a class object, the program can find the
virtual function table, obtain the real function pointer by indexing
the VTable and finally jump to the particular function through an
icall. In OS kernels, function pointers are also extensively used to
achieve polymorphism analogous to C++, e.g., which open() to
invoke is determined by the specific file system in use.
Indirect calls can also help save CPU cycles. Considering a com-
mand dispatcher which supposes to invoke proper functions based
on the input value. One way to implement the switch is to use a
long list of comparisons followed by direct function calls. However,
implementing such a switch with an icall is much more efficient
because the program can just retrieve the proper function pointer
using the input as an index and jump to that function through an
icall.
Function pointers in memory. Function pointers can reside in
two classes of memory objects, primitive-type variables or composite-
type objects. Before a function pointer is stored into memory, its
function type can be preserved or cast to general types, such as
char*. To understand how common each case is, we conducted a
study to statistically count each case in the Linux kernel by analyz-
ing its LLVM bitcode files. In our results, among 212K instructions
that store function pointers, 88% of them put function addresses
into a composite-type object, and only 12% of them save function
addresses into a primitive-type variable. In the former case, 91%
of them do not cast the function type before the store instruction,
while in the latter case, 80% of them cast the function pointer into
a different type. The numbers show that storing function addresses
in a composite-type object is quite common, and the function ad-
dresses will typically be loaded from objects of the same composite
types before being dereferenced for icalls. MLTA will exploit such
type information to refine icall targets.
A motivating example. We show a sample usage of function
pointers in Figure 1. This code snippet defines one function pointer
type, fptr_t, and three structures, A, B and C, where A contains
if (strlen(src) < MAX_LEN) strcpy(dst, src);
strcpy(dst, src);
// safe
// buffer overflow !!
// B is an outer layer of A
// C is an outer layer of A
1 typedef void (*fptr_t)(char *, char *);
2 struct A { fptr_t handler; };
3 struct B { struct A a; };
4 struct C { struct A a; };
5
6 void copy_with_check(char *dst, char *src) {
7
8 }
9
10 void copy_no_check(char *dst, char *src) {
11
12 }
13
14 // Store functions with initializers
15 struct B b = { .a = { .handler = &copy_with_check } };
16
17 // Store function with store instruction
18 struct C c; c.a.handler = &copy_no_check;
19
20 void handle_input(char *user_input) {
21
22
23
24
25
26 }
Figure 1: Indirect function calls that can be confined by multi-layer
type analysis. Function pointers used in line 23 and line 24 have type
fptr_t, where traditional type-based matching will find two potential tar-
gets copy_with_check() and copy_no_check(). However, MLTA will identify
that the pointer in line 23 can only be copy_with_check(), while the pointer