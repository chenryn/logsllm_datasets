title:A Logic for Constraint-based Security Protocol Analysis
author:Ricardo Corin and
Sandro Etalle and
Ari Saptawijaya
A Logic for Constraint-based Security Protocol Analysis
Ricardo Corin
University of Twente, The Netherlands
Ari Saptawijaya∗
University of Indonesia, Indonesia
Sandro Etalle
University of Twente, The Netherlands
Abstract
We propose PS-LTL, a pure-past security linear tempo-
ral logic that allows the speciﬁcation of a variety of authen-
tication, secrecy and data freshness properties. Further-
more, we present a sound and complete decision procedure
to establish the validity of security properties for symbolic
execution traces, and show the integration with constraint-
based analysis techniques.
1
Introduction
The communication via a shared medium, like the Inter-
net, is inherently insecure: anyone has access to en route
messages and can potentially eavesdrop or even manipulate
the ongoing communication. Security protocols are dis-
tributed programs speciﬁcally designed to achieve secure
communication over such media, typically exchanging mes-
sages constructed using cryptographic operations.
Security protocols are difﬁcult to design correctly, hence
their analysis is critical. A successful analysis model is the
Dolev Yao model [17], in which the attacker has complete
network control and ideal cryptography is assumed. The
model is attractive because it has an appropriate level of
abstraction, as many attacks are independent of the under-
lying details of the cryptographic operations. Moreover, the
model can be easily formalized using languages and tools
based on formal methods (e.g.
[5, 26, 24, 23, 15]). For
the case of analysis with a bounded number of protocol
instances (and also allowing the attacker to use composed
keys), the security problem is known to be decidable [29].
In this setting, constraint solving approaches (originally
presented by Millen and Shmatikov [28] and later extended
and improved [10, 1, 13, 21]) are efﬁcient and effective,
since instead of considering all possible traces (i.e. proto-
col executions) only evaluate a ﬁnite number of symbolic
∗Part of this work was done while the author was afﬁliated to University
of Twente.
traces in a lazy fashion.
Unfortunately, constraint-based veriﬁcation systems are
relatively weak when it comes to specifying the properties
one wants to check. Typically, for each security property
an ad-hoc recipe is given, which amounts to modifying the
protocol instance with particular tests that capture viola-
tions of the property under analysis. For example, to check
authentication [28], one has to craft a protocol instance in
which some participant is present but not its corresponding
party, and observe whether the participant can still ﬁnish its
run. This is coarse-grained and cumbersome to implement.
(Later, Millen [27] implemented a ﬁxed, built-in notion of
authentication in his Prolog veriﬁer.) Checking secrecy is
also done ad-hoc and in a restrictive manner, by adding an
artiﬁcial protocol role which expects a secret no other par-
ticipant would send.
In this paper we remedy this situation by proposing a
dedicated language to specify security properties. The lan-
guage is expressive and ﬂexible, and allows the speciﬁca-
tion of complex properties in a clean and intuitive manner,
fairly separated from the protocol being analyzed. More
speciﬁcally, our contribution is twofold:
• First, we develop PS-LTL, a language to specify se-
curity properties based on linear temporal logic (LTL)
with pure-past operators. As we shall see, our lan-
guage provides adequate ﬂexibility, allowing one to
specify several security properties like authentica-
tion ([23, 12]) (including aliveness, weak agreement
and non-injective agreement), secrecy (standard se-
crecy [2] and perfect forward secrecy [16]) and also
data freshness [9]. We also present a preliminary study
of denial of service (DoS) [25] within our language.
• While the semantics of PS-LTL is deﬁned as usual on
concrete (variable-free) traces, constraint-based proto-
col veriﬁers generate symbolic traces which contain
constrained variables (i.e. variables which may be in-
stantiated only with values the attacker can compute).
We present a decision procedure which allows to check
Proceedings of the 2006 IEEE Symposium on Security and Privacy (S&P’06) 
1081-6011/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 02:51:42 UTC from IEEE Xplore.  Restrictions apply. 
a relevant subset (that covers all the properties of in-
terest) on the symbolic traces produced by constraint
solving systems. Moreover, we show the soundness
and completeness of our decision procedure. Finally,
we implement the procedure using Prolog into our pro-
tocol veriﬁcation tool thereby providing a full veriﬁca-
tion system (an online demo is available[11]) where we
verify several protocols (at present, more than twenty
protocols from the Clark and Jacob library [6]).
is the ﬁrst
To the best of our knowledge,
in the context of
constraint-based methods our proposal
lan-
guage for the speciﬁcation of security properties which is
equipped with a sound and complete procedure for evalu-
ating formulas against a symbolic trace. Moreover, besides
the theoretical value of our results we believe that our con-
tribution has also practical signiﬁcance, as protocol design-
ers can use our approach to systematically engineer and de-
bug protocols during the early design phases.
Paper Structure We review the protocol model and the
constraint solving technique in Section 2. PS-LTL is pre-
sented in Section 3, along several example properties. Our
decision procedure is presented in Section 4. Section 5 dis-
cusses related work and ﬁnally Section 6 concludes the pa-
per. Example scenarios and proofs may be found in [8].
2 Protocol Model and Constraint Solving
We introduce some notation for the rest of the paper: ﬁrst
the term algebra and intruder rules, then the protocol model
and ﬁnally constraint solving as introduced in [28].
2.1 Preliminaries
Term algebra and substitutions Messages are repre-
sented as terms in a free algebra T generated by the op-
erators in Table 1 (left), from an enumerable set of vari-
ables V (denoted by uppercase letters A, B, N a, K, . . . ),
and an enumerable set of constants C (denoted by lower-
case a, b, na, k, . . . ), representing the principal identities,
nonces and keys. (We do not consider different types, al-
though it would be straightforward to do so.) A special con-
stant e ∈ C is distinguished to denote the intruder’s identity.
We have constructors for representing public keys, pair-
ing, message hashing, symmetric and asymmetric encryp-
tion, and signature. Private keys in asymmetric encryption
are not modelled in the term algebra since we assume that
these keys are never part of messages in protocols. (This
assumption is realistic, as every protocol we consider does
not send its private key in messages.) For readability, we
simply write (t1, t2, . . . , tn−1, tn) to denote multiple pair-
ing (t1, (t2, . . . , (tn−1, tn) . . .)).
For i ≤ j, the integer interval {i, i + 1, . . . , j − 1, j}
is denoted as [i . . . j]. The set of ground terms, denoted by
T +, is generated like T above but only from constants C
and excluding V. When t ∈ T +, we say that t is ground,
otherwise it is non-ground. The variables of a term t are
denoted as var(t).
Substitutions (denoted by σ, ρ, γ, . . . ) are ﬁnite map-
pings from V to T . Ground substitutions map V to T +.
The domain of σ is denoted as dom(σ). The empty sub-
stitution is denoted as ε. Given v ∈ V and t ∈ T , [t/v]
denotes the singleton substitution mapping of v to t. Given
a term t ∈ T and a substitution σ, tσ denotes the term re-
sulting from substituting each occurrence of v ∈ dom(σ) in
(cid:2) is an instance of another term t if there
t by σ(v). A term t
(cid:2) = tσ. The same terminology is used for the
exists σ s.t. t
(later introduced) events, protocol roles and traces.
Intruder model Rules are used to represent the abilities
of the intruder. Let A be a set of terms and t a term, and
let (cid:6) be a rule label, stating the name of the rule. A rule is
denoted by A →(cid:2) t. We work with the set of rules given in
Table 1 (right), where t1 and t2 are terms in T . As usual, the
attacker is allowed to pair and split terms, hash, symmetri-
cally encrypt terms with any (possibly non-atomic) key and
decrypt symmetrically if the key is known. Public-key en-
cryption (penc) is modelled by allowing to encrypt with any
key. However, rule pdec only allows the asymmetric de-
cryption of a term encrypted with the attacker’s public key.
The attacker cannot decrypt any term encrypted with a dif-
ferent public key than his own, since we assume that private
keys are never leaked (as they do not take part of any mes-
sage). Moreover, the attacker can only sign terms using his
private key, represented in rule sig (here pk(e) is the public
key that is needed to verify the signature).
We now deﬁne F(T ) (the fake operation), representing
the terms the intruder can generate from the set of ground
terms T :
Deﬁnition 1. Let T be a set of ground terms, i.e. T ⊆ T +.
Then, F(T ) is deﬁned as ∪n≥0F n(T ), where F n(T ) is the
set deﬁned inductively as follows:
F 0(T ) = T
F n(T ) = F n−1(T ) ∪ {t | A →(cid:2) t is a DY rule and
A ⊆ F n−1(T )}
Intuitively, when the attacker knows (e.g. has eaves-
dropped) a set of messages T , then he can compute the set
of terms F(T ).
2.2 Protocol Model
Our protocol model is related to the strand-space formal-
ism [31], although we sometimes use a different terminol-
ogy, e.g. we call system scenario what in strand spaces is
Proceedings of the 2006 IEEE Symposium on Security and Privacy (S&P’06) 
1081-6011/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 02:51:42 UTC from IEEE Xplore.  Restrictions apply. 
t1, t2 ::= c
v
pk(t1)
(t1, t2)
h(t1)
{t1}t2
{t1}→
sigt1(t2)
t2
constant in C
variable in V
public key
pair
hash
symmetric encryption
asymmetric encryption
signature
→pair
{t1, t2}
→f irst
{(t1, t2)}
→second
{(t1, t2)}
→hash
{t}
→senc
{t1, t2}
{{t1}t2, t2} →sdec
→penc
{t1, t2}
{{t1}→
pk(e)} →pdec
{t1}
→sig
(t1, t2)
t1
t2
h(t)
{t1}t2
t1
{t1}→
t1
sigpk(e)(t1)
t2
Table 1. Grammar for terms (left) and DY rules (right)
called a semibundle. In the following, we introduce events,
traces, protocol roles, and system scenarios.
Deﬁnition 2. An event is one of the following:
• A communication event is a pair (cid:7)a : m(cid:8) b(cid:9) where a, b
are variables or principal constants, (cid:8) ∈ {(cid:7), (cid:8)} and
m is a term. a is called the active party, and b is the
passive party.
Since we will let the attacker intercept and forge com-
munication messages, the event (cid:7)a : m (cid:8) b(cid:9) reads
as “principal a sends message m with intended des-
tination b”. Symmetrically, (cid:7)a : m (cid:7) b(cid:9) stands for
“principal a receives message m apparently from b”.
• A status event: p(d1,··· , dn), with di a term for i ∈
[1 . . . n] and p is a function symbol.
We consider three different, self-explanatory status
events: start, run and end (see Example 4).
Deﬁnition 3. A protocol role is a ﬁnite sequence of events
in which all events share the same active principal.
Given a protocol written in standard ‘a → b : m’ nota-
tion, it is straightforward to obtain its parametric protocol
roles1, as shown in the next example.
Example 4. Consider the BAN Concrete Andrew Secure
RPC protocol [5], that aims to achieve mutual authentica-