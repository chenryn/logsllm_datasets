     cur_floor = 0
     cur_x = 0
     cur_y = 0
     mon_floor = -1
     upstairs = []
     downstairs = [None]
     floors = []
     princesses = {ord('a') : [80, 60, 1000], ord('b') : [200, 150, 1000], ord('c') : [300, 150, 1000], ord('d') : [300, 250, 3000]}
     princess_floor = {ord('a') : -1, ord('b') : -1, ord('c') : -1, ord('d') : -1}
     def beat_princess(hp, p):
         att = princesses[p]
         prin_atk, prin_def, prin_hp = att
         if cur_atk  cur_def:
             hp -= (battle_rounds - 1) * (prin_atk - cur_def)
         else:
             hp -= 0
         return hp
     def can_beat_all_princesses():
         new_hp = cur_hp
         for p in princesses.keys():
             new_hp = beat_princess(cur_hp, p)
             if new_hp  0:
                     continue
                 if pixels[new_y, new_x] in map(ord, list('#')):
                     continue
                 if pixels[new_y, new_x] in map(ord, list('abcd')):
                     if go_type == GO_PRINCESS:
                         return [new_seq, new_x, new_y]
                     princess_floor[pixels[new_y, new_x]] = cur_floor
                     continue
                 count_map[new_y, new_x] = count_map[y, x] + 1
                 if pixels[new_y, new_x] in map(ord, list('/')):
                     up_x, up_y = upstairs[cur_floor]
                     if go_type == GO_UP:
                         return [new_seq, up_x, up_y]
                     if cur_floor == len(floors) - 1:
                         goto_dest([new_seq, up_x, up_y])
                         back = find_next_dest(GO_DOWN)
                         goto_dest(back)
                         dest = find_next_dest(go_type)
                         return dest
                     else:
                         for i, d2 in enumerate(directions):
                             s, dx, dy = d2
                             up_pixels = floors[cur_floor + 1].load()
                             down_x, down_y = downstairs[cur_floor + 1]
                             if up_pixels[down_y + dy, down_x + dx] in map(ord, list('.')):
                                 new_seq += s
                                 new_seq += directions[3 - i][0]
                                 break
                     q.put([new_seq, new_x, new_y])
                     continue
                 if pixels[new_y, new_x] in map(ord, list('\')):
                     down_x, down_y = downstairs[cur_floor]
                     if go_type == GO_DOWN:
                         return [new_seq, down_x, down_y]
                     for i, d2 in enumerate(directions):
                         s, dx, dy = d2
                         down_pixels = floors[cur_floor - 1].load()
                         up_x, up_y = upstairs[cur_floor - 1]
                         if down_pixels[up_y + dy, up_x + dx] in map(ord, list('.')):
                             new_seq += s
                             new_seq += directions[3 - i][0]
                             break
                     q.put([new_seq, new_x, new_y])
                     continue
                 if pixels[new_y, new_x] in map(ord, list('Y')):
                     return [new_seq, new_x, new_y]
                 if pixels[new_y, new_x] in map(ord, list('ADP')):
                     return [new_seq, new_x, new_y]
                 if pixels[new_y, new_x] in map(ord, list('.')):
                     q.put([new_seq, new_x, new_y])
         return None
     def run():
         io.write("OKn")
         r = io.read_nonblocking(4096)
         add_new_floor(r)
         r = io.read_nonblocking(4096)
         add_new_floor(r)
         while True:
             dest = find_next_dest(GO_THROUGH)
             if dest != None:
                 goto_dest(dest)
             else:
                 dest = find_next_dest(GO_UP)
                 if dest == None:
                     dest = find_next_dest(GO_PRINCESS)
                     if dest == None:
                         break
                 goto_dest(dest)
             time.sleep(1)
             if can_beat_all_princesses():
                 break
         while cur_floor != 0:
             dest = find_next_dest(GO_DOWN)
             goto_dest(dest)
         dest = find_next_dest(GO_PRINCESS)
         goto_dest(dest)
         dest = find_next_dest(GO_THROUGH)
         goto_dest(dest)
         r = io.read_nonblocking(4096)
         r = io.read_nonblocking(4096)
         r = io.read_nonblocking(4096)
         r = io.read_nonblocking(4096)
     run()
这题虽然是赛后解出来的,但是也发出来吧→_→