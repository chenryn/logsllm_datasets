### 优化后的文本

#### 中断向量和相关数据结构

以下是中断向量及其相关数据结构的详细信息：

```
0x70 
+0x05c Irql: 0x7
+0x05d SynchronizeIrql: 0x7
+0x05e FloatingSave: 0
+0x05f Connected: 0x1
+0x060 Number: 6
+0x064 ShareVector: 0
+0x065 EmulateActiveBoth: 0
+0x066 ActiveCount: 0
+0x068 InternalState: 0n4
+0x06c Mode: 1 (Latched)
+0x070 Polarity: 0 (InterruptPolarityUnknown)
+0x074 ServiceCount: 0
+0x078 DispatchCount: 0
+0x080 PassiveEvent: (null)
+0x088 TrapFrame: (null)
+0x090 DisconnectData: (null)
+0x098 ServiceThread: (null)
+0x0a0 ConnectionData: 0xffffe50f`9db3bd90 _INTERRUPT_CONNECTION_DATA
+0x0a8 IntTrackEntry: 0xffffe50f`9d091d90 Void
+0x0b0 IsrDpcStats: _ISRDPCSTATS
+0x0f0 RedirectObject: (null)
+0x0f8 Padding: [8] ""
```

在这个例子中，Windows 分配给中断的 IRQL 是 7，这与 `DispatchAddressKiInterruptDispatch` 样式的中断一致，没有额外的优化或共享。

如果要查看与中断关联的 GSIV（IRQ），有两种方法：

1. 使用嵌入在 `ConnectionData` 中的 `_INTERRUPT_CONNECTION_DATA` 结构。
2. 使用 `!acpiirqarb` 和 `!arbiter` 命令查询 ACPI IRQ 裁决器。

#### 使用 `_INTERRUPT_CONNECTION_DATA` 结构

可以通过以下命令来转储 `_INTERRUPT_CONNECTION_DATA` 指针中的信息：

```kd> dt 0xffffe50f`9db3bd90 _INTERRUPT_CONNECTION_DATA Vectors[0]..
nt!_INTERRUPT_CONNECTION_DATA
+0x008 Vectors: [0]
+0x000 Type: 0 (InterruptTypeControllerInput)
+0x004 Vector: 0x70
+0x008 Irql: 0x7
+0x00c Polarity: 1 (InterruptActiveHigh)
+0x010 Mode: 1 (Latched)
+0x018 TargetProcessors:
+0x018 ServiceRoutine: 0xfffff804`65e56820 unsigned char i8042prt!I8042KeyboardInterruptService
+0x020 MessageServiceRoutine: (null)
+0x028 MessageIndex: 0
+0x030 ServiceContext: 0xffffe50f`9dfe9040 Void
+0x038 SpinLock: 0
+0x040 TickCount: 0
+0x048 ActualLock: 0xffffe50f`9dfe91a0 -> 0
+0x050 DispatchAddress: 0xfffff804`565ca320 void nt!KiInterruptDispatch+0
+0x058 Vector: 0x70
+0x05c Irql: 0x7
+0x05d SynchronizeIrql: 0x7
+0x05e FloatingSave: 0
+0x05f Connected: 0x1
+0x060 Number: 6
+0x064 ShareVector: 0
+0x065 EmulateActiveBoth: 0
+0x066 ActiveCount: 0
+0x068 InternalState: 0n4
+0x06c Mode: 1 (Latched)
+0x070 Polarity: 0 (InterruptPolarityUnknown)
+0x074 ServiceCount: 0
+0x078 DispatchCount: 0
+0x080 PassiveEvent: (null)
+0x088 TrapFrame: (null)
+0x090 DisconnectData: (null)
+0x098 ServiceThread: (null)
+0x0a0 ConnectionData: 0xffffe50f`9db3bd90 _INTERRUPT_CONNECTION_DATA
+0x0a8 IntTrackEntry: 0xffffe50f`9d091d90 Void
+0x0b0 IsrDpcStats: _ISRDPCSTATS
+0x0f0 RedirectObject: (null)
+0x0f8 Padding: [8] ""
```

类型字段表明这是一个传统的基于控制器的输入中断。向量和 IRQL 字段也提供了相关信息。

#### 使用 `!acpiirqarb` 和 `!arbiter` 命令

Windows 通过称为裁决器的机制来管理设备资源，并保持虚拟资源使用（如中断向量）和物理资源（如中断线）之间的关系。可以使用 `!acpiirqarb` 和 `!arbiter` 命令来获取这些映射信息。

例如，使用 `!acpiirqarb` 命令：

```kd> !acpiirqarb
Processor 0 (0, 0):
Device Object: 0000000000000000
Current IDT Allocation:
...
  000000070 - 00000070  D  ffffe50f9959baf0 (i8042prt) A:ffffce0717950280 IRQ(GSIV):1
...
```

注意，键盘的 GSIV 是 IRQ 1，这是从 IBM PC/AT 时代遗留下来的编号。

也可以使用 `!arbiter 4` 命令：

```kd> !arbiter 4
DEVNODE ffffe50f97445c70 (ACPI_HAL\PNP0C08\0)
Interrupt Arbiter "ACPI_IRQ" at fffff804575415a0
Allocated ranges:
0000000000000001 - 0000000000000001
ffffe50f9959baf0  (i8042prt)
```

在这两种输出中，都会显示向量的所有者，即设备对象。可以使用 `!devobj` 命令获取关于设备对象的信息。例如，对于 `i8042prt` 设备：

```kd> !devobj 0xFFFFE50F9959BAF0
Device object (ffffe50f9959baf0) is for:
 00000049 \Driver\ACPI DriverObject ffffe50f974356f0
Current Irp 00000000 RefCount 1 Type 00000032 Flags 00001040
SecurityDescriptor ffffce0711ebf3e0 DevExt ffffe50f995573f0 DevObjExt ffffe50f9959bc40
DevNode ffffe50f9959e670
ExtensionFlags (0x00000800)  DOE_DEFAULT_SD_PRESENT
Characteristics (0x00000080)  FILE_AUTOGENERATED_DEVICE_NAME
AttachedDevice (Upper) ffffe50f9dfe9040 \Driver\i8042prt
Device queue is not busy.
```

设备对象与设备节点相关联。可以使用 `!devnode` 命令转储这些资源信息：

```kd> !devnode ffffe50f9959e670 f
DevNode 0xffffe50f9959e670 for PDO 0xffffe50f9959baf0
  InstancePath is "ACPI\LEN0071\4&36899b7b&0"
  ServiceName is "i8042prt"
  TargetDeviceNotify List - f 0xffffce0717307b20  b 0xffffce0717307b20
  State = DeviceNodeStarted (0x308)
  Previous State = DeviceNodeEnumerateCompletion (0x30d)
  CmResourceList at 0xffffce0713518330  Version 1.1  Interface 0xf  Bus #0
    Entry 0 - Port (0x1) Device Exclusive (0x1)
Flags (PORT_MEMORY PORT_IO 16_BIT_DECODE
Range starts at 0x60 for 0x1 bytes
    Entry 1 - Port (0x1) Device Exclusive (0x1)
Flags (PORT_MEMORY PORT_IO 16_BIT_DECODE
Range starts at 0x64 for 0x1 bytes
    Entry 2 - Interrupt (0x2) Device Exclusive (0x1)
Flags (LATCHED
Level 0x1, Vector 0x1, Group 0, Affinity 0xffffffff
...
  TranslatedResourceList at 0xffffce0713517bb0  Version 1.1  Interface 0xf  Bus #0
    Entry 0 - Port (0x1) Device Exclusive (0x1)
Flags (PORT_MEMORY PORT_IO 16_BIT_DECODE
Range starts at 0x60 for 0x1 bytes
    Entry 1 - Port (0x1) Device Exclusive (0x1)
Flags (PORT_MEMORY PORT_IO 16_BIT_DECODE
Range starts at 0x64 for 0x1 bytes
    Entry 2 - Interrupt (0x2) Device Exclusive (0x1)
Flags (LATCHED
Level 0x7, Vector 0x70, Group 0, Affinity 0xff
```

设备节点显示该设备有一个包含三个条目的资源列表，其中一个条目是与 IRQ 1 对应的中断条目。级别和向量号分别表示 GSIV 和 IRQL 为 7，中断向量为 0x70。

在 ACPI 系统上，还可以通过 `!acpiirqarb` 命令的扩展输出更轻松地获取这些信息。其输出包括 IRQ 到 IDT 的映射表：

```
Interrupt Controller (Inputs: 0x0-0x77):
(01)Cur:IDT-70 Ref-1 Boot-0 edg hi    Pos:IDT-00 Ref-0 Boot-0 lev unk
(02)Cur:IDT-80 Ref-1 Boot-1 edg hi    Pos:IDT-00 Ref-0 Boot-1 lev unk
(08)Cur:IDT-90 Ref-1 Boot-0 edg hi    Pos:IDT-00 Ref-0 Boot-0 lev unk
```

通过这些方法，可以详细了解系统中的中断向量及其相关配置。