time of normal VoIP ﬂows is either 20ms or 30ms. This
means that the delay of any VoIP packet must be less than
20ms. In order to hide the watermark embedding into the
“background noise” introduced by the normal network delay
jitter, the delay of any VoIP packet should be no more than
a few milliseconds. To achieve packet delay of such a pre-
cision, the operating system must provide a hard real-time
scheduling capability.
However, the standard Linux kernel lacks the hard real-
time scheduling capability and it does not support time-
critical tasks. Because the standard Linux is a time-sharing
OS, the execution of any process depends on not only the
priority of the process but also the current load in the OS,
and there is no guarantee that a time-critical task will be
processed and completed on time. In addition, the resolu-
tion of the software timer in the Linux kernel is by default
10ms, which is too coarse for our needs.
To achieve the guaranteed high precision, we choose to
build our packet delay capability upon the Real Time Appli-
cation Interface (RTAI) [23] of Linux. The following features
of RTAI have made it an attractive platform for implement-
ing the high precision packet delay capability:
• The hard real-time scheduling functions introduced by
The RTAI coexist with all the original Linux kernel
services. This makes it possible to leverage existing
Linux kernel services, especially the IP stack compo-
nents, from within the real-time task.
• The RTAI guarantees the execution time of real-time
tasks regardless of the current load of non real-time
tasks.
• The RTAI supports high precision software timer with
the resolution of microseconds.
We built our transparent and real-time VoIP watermark-
ing engine upon RTAI 3.1 in Linux kernel 2.6.8.1, and we
implemented the VoIP watermarking engine as a RTAI ker-
nel module. To facilitate the management of the kernel VoIP
watermarking engine from user space, we also extended the
netﬁlter/iptable mechanism in Linux kernel.
By integrating the RTAI hard real-time scheduling and
the Linux kernel functionality, our real-time VoIP water-
marking engine achieves the guaranteed delay precision of
100 microseconds over any speciﬁed packets of any speciﬁed
ﬂows despite the workload of the Linux kernel.
5. EXPERIMENTS
In this section, we empirically validate our active water-
mark based tracking of anonymous, peer-to-peer VoIP calls
on the Internet.
In speciﬁc, we conduct our experiments
with real-time Skype peer-to-peer VoIP calls over the com-
mercially deployed anonymizing system of ﬁndnot.com. Fig-
ure 6 shows the setup of our experiments. The Skype peer
A is connected to some entry point of the anonymizing net-
work of ﬁndnot.com via PPTP (Point to Point Tunnel Pro-
tocol) and all the Internet traﬃc of Skype peer A is routed
through and anonymized by the anonymizing network of
ﬁndnot.com. As a result, Skype peer B never sees the real
 Internet Cloud Low Latency Anonymizing Network Intermediate Skype Peers Skype Peer A Watermarked Skype VoIP flow PPTP Tunnel Watermarked Skype VoIP flow Original Skype VoIP flow  Skype Peer B Transparent VoIP Watermark Engine 86IP address of Skype peer A, and Skype peer A could appear
to be some host of thousands miles away. In our experimen-
tal setup, the two communicating Skype peers are at least
27 hops away with about 60ms end to end latency.
We place our high precision VoIP watermarking engine
between Skype peer B and the Internet and let it transpar-
ently watermark the VoIP ﬂow from Skype peer B to peer
A. We intercept the VoIP ﬂow from the anonymizing net-
work of ﬁndnot.com to Skype peer A, and try to detect the
watermark from the intercepted VoIP ﬂow.
While Skype VoIP call can use both TCP and UDP, we
have found that it almost always use UPD. In our experi-
ments, all the Skype calls happen to be UPD, and none of
them has noticeable packet loss.
5.1 Watermarking Parameter Selection
Equation (7) gives us the quantitative tradeoﬀ between
the watermark bit detection rate, watermark embedding pa-
rameters and the deﬁning characteristics of the network de-
lay jitters.
To make the embedded watermark more robust against
the network delay jitters and have high watermark bit de-
tection rate, it is desirable to have larger watermark embed-
ding delay a and bigger redundancy number r. However, a
bigger watermark embedding delay means bigger distortion
of the original inter-packet timing of the VoIP ﬂow, which
could potentially be used by the adversary to determine if a
VoIP ﬂow has been watermarked or not. Ideally, the delay
introduced by the watermark embedding should be indistin-
guishable from the normal network delay.
To understand the normal network delay jitter as well as
the hiding space for embedding our transparent watermark
into the inter-packet timing of VoIP ﬂows, we made a Skype
call of 6 minutes long without watermarking, and collected
the traces of the VoIP ﬂows from both Skype peer A and
B. We calculated the network delay jitter by comparing the
timestamps of 10424 corresponding packets between the two
VoIP ﬂows. Figure 7 shows the distribution of the normal-
ized network delay jitters. It indicates that there are about
50% chances that the network delay jitter will be equal to or
bigger than 3ms. Therefore, it would be hard to distinguish
any watermarked VoIP ﬂow from unwatermarked ones if we
embed the watermark with 3ms delay.
With watermark embedding delay a=3ms, we tried dif-
ferent redundancy numbers r to embed a 24-bit watermark
into the Skype VoIP calls over the same anonymizing net-
work of ﬁndnot.com. Figure 8 shows the average number
of the error bits of the decoded watermarks of 10 Skype
calls with a range of redundancy numbers. It clearly shows
that the number of error bits can be eﬀectively decreased
by increasing the redundancy number r. With redundancy
number r=25, the average number of error bits of the de-
coded 24-bit watermark is only 1.4.
In all of the following experiments, we use 24-bit water-
marks with embedding delay a=3ms and redundancy num-
ber r=25. With this set of watermarking parameters, the
watermarking of VoIP ﬂow only requires 1200 packets to
be delayed by 3ms. Given the 30ms packetization interval
of Skype VoIP calls, the transparent watermarking can be
applied to any VoIP calls that are as short as 90 seconds.
5.2 True Positive Experiments
We randomly generated 100 24-bit watermarks such that
the Hamming distance between any two of them is at least
9. We then made 100 Skype calls of 2 minutes long and
watermarked each of them with diﬀerent watermark. We
collected the originating and terminating watermarked VoIP
ﬂows from Skype peer B and A respectively, and decoded
the 24-bit watermarks from them. We call any bit in the
decoded 24-bit watermark that is diﬀerent from the cor-
responding embedded bit as an error bit. Figure 9 shows
the number of error bits of the 100 Skype VoIP calls and
the watermark detection true positive rates given diﬀerent
numbers of allowed error bits.
It indicates that very few
of the 100 watermarked originating ﬂows has 1 or 2 error
bits, and a number of watermarked terminating ﬂows has 1
to 6 error bits. If we require the exact match between the
embedded watermark and the detected watermark, then we
have 59% true positive rate. If the number of allowed error
bits is increased to 4, the true positive rate becomes 99%.
With number of allowed error bits being 6 or greater, we
have 100% true positive rate.
5.3 False Positive Experiments
No matter what watermark we choose, it is always possi-
ble that an unwatermarked VoIP ﬂow happens to have the
chosen watermark naturally. We call this case as a false
positive in correlating the VoIP ﬂows.
We have shown that the true positive rate is generally
higher if the number of allowed error bits is bigger. However,
a bigger number of allowed error bits tends to increase the
false positive rate. Therefore, it is important to choose an
appropriate number of allowed error bits that will yield both
high true positive rate and low false positive rate at the
same time. To ﬁnd the appropriate number of allowed error
bits, we need to know the false positive rates under diﬀerent
numbers of allowed error bits.
Assuming the 24-bit watermark decoded from a random
ﬂow is uniformly distributed, then the expected false posi-
tive rate with h ≥ 0 allowed error bits will be
(cid:182)
(cid:181)
h(cid:88)
i=0
24
i
(
1
2
)24
(8)
Because each of the 100 Skype calls is watermarked with
diﬀerent watermark, any of the 100 watermarked Skype
ﬂows has 99 uncorrelated watermarked Skype ﬂows. Ideally,
the number of diﬀerent bits between the 24-bit watermarks
decoded from diﬀerent watermarked ﬂows should be high.
Figure 10 shows the expected and measured numbers of
diﬀerent bits between the 24-watermarks decoded from the
9900 pairs of uncorrelated VoIP ﬂows as well as the expected
and measured watermark detection false positive rates un-
der various numbers of allowed error bits. It indicates that
the measured values are very close to expected value. This
validates our assumption that the 24-bit watermark decoded
from a random ﬂow is uniformly distributed.
Out of the 9900 pairs of uncorrelated ﬂows, no one has less
than 6 diﬀerent bits between the two watermarks decoded.
There are 10 pairs of uncorrelated ﬂows that have 6 diﬀerent
bits. Therefore, if we choose 5 as the number of allowed
error bits, we would have 99% true positive rate and 0%
false positive rate.
If we use 6 as the number of allowed
error bits, we would get 100% true positive rate and 0.1%
false positive rate.
87Figure 7: Distribution of the Network Delay Jit-
ters of Skype VoIP Call
Figure 8: Average Number of Bit Errors vs the
Redundancy Number r
Figure 9: The Numbers of Error Bits and Correlation True Positive Rates of 100 Skype VoIP Calls
Figure 10: The Numbers of Error Bits and Correlation False Positive Rates of 9900 Pairs of Uncorrelated
Skype VoIP Flows
Distribution of the 10424 Network Delay Jitters02004006008001000120014001600-20-16-12-8-4048121620Network Delay Jitter in MillisecondNumber of Occurances0.01.02.03.04.05.06.07.08.0Error Bit Number510152025Redundancy NumberAverage Number of Error bits of 24-Bit WatermarkNumber of Error Bits of 100 VoIP Calls012345670102030405060708090100VoIP Call NumberNumber of Error BitsOriginating FlowTerminating Flow0102030405060708090100True Positive Rate %01234567 Number of Allowed Error Bits of 24-Bit WatermarkCorrelation True Positive Rate of 100 VoIP CallsDistribution of Numbers of Different Bits of 9900 Pairs of Uncorrelated VoIP Calls02004006008001000120014001600024681012141618202224Number of Error BitsNumber of OccurrancesOriginating FlowTerminating FlowExpected Value False Positive Rates of 9900 Pairs of Uncorrelated VoIP Calls0102030405060708090100024681012141618202224Number of Allowed Error BitsFalse Positive Rate %Originating FlowTerminating FlowExpected Value886. RELATED WORKS
There have been substantial research works on how to
trace attack packets with spoofed source address. Notably,
Savage et al. [24] proposed IP traceback approach based on
probabilistic packet marking (PPM), and Snoeren et al. [30]
proposed logging based IP traceback approach. While both
approaches have been shown to be eﬀective in tracing the
real source of large number of packets with spoofed source
address, they can not be used directly to trace VoIP ﬂows.
Nevertheless, Savage’s work demonstrated the potentials of
active approach in tracing IP packets.
There are a number of works [34, 35, 33, 7, 32, 5] on how to
trace encrypted attack traﬃc through stepping stones based
on the inter-packet timing characteristics. Except Wang and
Reeves’ work [32], all other timing based approaches are
passive. As the timing characteristics of VoIP ﬂows are not
distinct enough, passive examination of existing inter-packet
timing of VoIP ﬂows won’t be able to distinguish diﬀerent
VoIP ﬂows. Our proposed work diﬀers from work [32] in
that it does not require packet buﬀering to achieve the even
time adjustment for embedding the watermark.
A number of low-latency anonymizing systems have been
proposed to provide various levels of anonymity. Notably,
Onion Routing [13] and its second generation Tor [6] aim to
provide anonymous transport of TCP ﬂows over the Inter-
net.
ISDN mixes [21] proposed a technique to anonymize
the phone calls over the traditional PSTN. Tarzan [12] is
an anonymizing network layer based on peer-to-peer model.
Unlike most other anonymizing systems, Tarzan introduces
cover traﬃc in addition to encrypting and relaying the nor-
mal traﬃc.
Felton and Schneider [10] identiﬁed a web caching exploit-
ing technique that would allow malicious web site to infer
whether its visitors have visited some other web pages, even
if the browsing is protected by anonymizing services. Mur-
doch et al. [20] have recently investigated timing based at-
tack on Tor with the assumption that the attacker controls a
corrupt Tor node. Levine et al. [18] investigated passive tim-
ing based attack on low-latency anonymizing systems with
the assumption that the attacker controls both the ﬁrst and
the last mix in the anonymizing network. However, none of
these timing based approaches can be directly used to track
VoIP calls.
7. CONCLUSIONS
Tracking encrypted, peer-to-peer VoIP calls has been widely
viewed as impossible, especially when the VoIP calls are
anonymized by the low latency anonymizing system. The
key contribution of our work is that it demonstrates (1)
tracking anonymous, peer-to-peer VoIP calls on the Inter-
net is feasible; and (2) low latency anonymizing system is
susceptible to timing based attack.
Our technique for tracking anonymous, peer-to-peer VoIP
calls is based on subtle and deliberate manipulation of the
inter-packet timing of selected packets of the VoIP ﬂow. Our
experiments of the real-time peer-to-peer VoIP calls over a
commercially deployed anonymizing system show that the
encrypted and anonymized VoIP ﬂow could be made highly
unique with only 3ms timing adjustment on selected packets.
This level of timing adjustment is well within the range of
normal network delay jitters. Our results also show that
our watermark based tracking technique can be eﬀectively
applied to any peer-to-peer VoIP calls that are at least 90
seconds long.
8. REFERENCES
[1] Anonymizer. URL. http://www.anonymizer.com
[2] M. Arango, A. Dugan, I. Elliott, C. Huitema and S.
Pickett. RFC 2705: Media Gateway Control Protocol
(MGCP) Version 1.0. IETF, October 1999.
[3] A. Back, I. Goldberg, and A. Shostack. Freedom 2.1
Security Issues and Analysis. Zero-Knowledge
Systems, Inc. white paper, May 2001
[4] S. A. Baset and H. Schulzrinne. An Analysis of the
Skype Peer-to-Peer Internet Telephony Protocol.
Columbia Technical Report CUCS-039-04, December
2004
[5] A. Blum, D. Song, and S. Venkataraman. Detection of
Interactive Stepping Stones: Algorithms and
Conﬁdence Bounds. In Proceedings of the 7th
International Symposium on Recent Advances in
Intrusion Detection (RAID 2004). Springer, October
2004.
[6] R. Dingledine, N. Mathewson and and P. Syverson.