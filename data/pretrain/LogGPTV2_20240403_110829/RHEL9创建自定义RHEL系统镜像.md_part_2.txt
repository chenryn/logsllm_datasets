    $ sudo mkdir -p /etc/osbuild-composer/repositories
    ```
2.  创建具有以下结构的 JSON 文件，例如：
    ::: informalexample
    ``` screen
    {
        "": [
            {
                "name": "baseos",
                "metalink": "",
                "baseurl": "http://mirror.example.com/composes/released/RHEL-8/8.2.0/BaseOS/x86_64/os/",
                "mirrorlist": "",
                "gpgkey": "-----BEGIN PGP PUBLIC KEY BLOCK-----\n\n (...)",
                "check_gpg": true,
                "metadata_expire": "",
            }
        ]
    }
    ```
    :::
    仅指定以下属性之一： `metalink`{.literal}、`mirrorlist`{.literal} 或
    `baseurl`{.literal}。剩余的字段是可选的。
3.  使用与 RHEL 版本对应的名称保存该文件，例如：
    ``` screen
    /etc/osbuild-composer/repositories/rhel-84.json
    /etc/osbuild-composer/repositories/rhel-85.json
    /etc/osbuild-composer/repositories/rhel-90.json
    ```
    或者，您还可以从 `/usr/share/osbuild-composer/`{.literal}
    中复制用于分发的文件，并修改其内容。
4.  将存储库文件复制到您创建的目录中。
    ``` screen
    $  cp /usr/share/osbuild-composer/repositories/rhel-version.json /etc/osbuild-composer/repositories/
    ```
    将 rhel-version.json 替换为您的 RHEL 版本，例如： rhel-85.json
5.  使用您选择的编辑器，编辑 `rhel-85.json`{.literal} 文件中的
    `baseurl`{.literal} 路径。例如：
    ``` screen
    $  vi etc/osbuild-composer/repositories/rhel-85.json
    ```
:::
因此，存储库指向从 `/etc/yum.repos.d/redhat.repo`{.literal}
文件中复制过来的正确的 URL。
:::
::: section
::: titlepage
# []{#managing-repositories_composing-a-customized-rhel-system-image.html#overriding-a-system-repository-with-support-for-subscriptions_managing-repositories}覆盖支持订阅的系统存储库 {.title}
:::
`osbuild-composer`{.literal} 服务可以使用
`/etc/yum.repos.d/redhat.repo`{.literal} 文件中定义的系统订阅。要在
`osbuild-composer`{.literal}
中使用系统订阅，您需要定义一个具有以下特点的存储库覆盖：
::: itemizedlist
-   与 `/etc/yum.repos.d/redhat.repo`{.literal} 中定义的存储库相同的
    `baseurl`{.literal}。
-   JSON 对象中定义的 `"rhsm": true`{.literal} 值。
:::
::: itemizedlist
**先决条件**
-   在 `/etc/yum.repos.d/redhat.repo`{.literal} 中定义了订阅的系统
-   您已创建了一个存储库覆盖。请参阅
    [覆盖系统存储库](#managing-repositories_composing-a-customized-rhel-system-image.html#overriding-a-system-repository_managing-repositories "覆盖系统存储库"){.link}。
:::
::: orderedlist
**流程**
1.  从 `/etc/yum.repos.d/redhat.repo`{.literal} 文件中获取
    `baseurl`{.literal} ：
    ::: informalexample
    ``` screen
    [AppStream]
    name = AppStream mirror example
    baseurl = https://mirror.example.com/RHEL-8/8.5.0/AppStream/x86_64/os/
    enabled = 1
    gpgcheck = 0
    sslverify = 1
    sslcacert = /etc/pki/ca1/ca.crt
    sslclientkey = /etc/pki/ca1/client.key
    sslclientcert = /etc/pki/ca1/client.crt
    metadata_expire = 86400
    enabled_metadata = 0
    ```
    :::
2.  配置存储库覆盖以使用相同的 `baseurl`{.literal}，并将
    `rhsm`{.literal} 设为 true：
    ::: informalexample
    ``` screen
    {
        "x86_64": [
            {
                "name": "AppStream mirror example",
                "baseurl": "https://mirror.example.com/RHEL-8/8.5.0/AppStream/x86_64/os/",
                "gpgkey": "-----BEGIN PGP PUBLIC KEY BLOCK-----\n\n (...)",
                "check_gpg": true,
                “rhsm": true
            }
        ]
    }
    ```
    :::
:::
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
`osbuild-composer`{.literal} 不自动使用 `/etc/yum.repos.d/`{.literal}
中定义的存储库。您需要手动将它们指定为系统存储库覆盖 ，或使用
`composer-cli`{.literal} 指定为额外的
`源`{.literal}。系统存储库覆盖通常用于\"BaseOS\"和\"AppStream\"存储库，而
`composer-cli`{.literal} 源则用于所有其他存储库。
:::
::: itemizedlist
**其他资源**
-   [当主机注册到 Satellite 6 时，Composer 镜像构建器使用 CDN
    存储库](https://access.redhat.com/solutions/5773421){.link}
:::
:::
:::
[]{#creating-system-images-with-composer-command-line-interface_composing-a-customized-rhel-system-image.html}
::: chapter
::: titlepage
# []{#creating-system-images-with-composer-command-line-interface_composing-a-customized-rhel-system-image.html#creating-system-images-with-composer-command-line-interface_composing-a-customized-rhel-system-image}第 4 章 使用镜像构建器命令行界面创建系统镜像 {.title}
:::
镜像构建器是创建自定义系统镜像的工具。要控制镜像构建器并创建自定义系统镜像，请使用命令行界面，这是当前使用镜像构建器的首选方法。
::: section
::: titlepage
# []{#creating-system-images-with-composer-command-line-interface_composing-a-customized-rhel-system-image.html#composer-command-line-interface_creating-system-images-with-composer-command-line-interface}镜像构建器命令行界面 {.title}
:::
镜像构建器命令行界面目前是使用镜像构建器的首选方法。它所提供的功能比
[Web
控制台界面](#creating-system-images-with-composer-web-console-interface_composing-a-customized-rhel-system-image.html "第 5 章 使用 Image Builder Web 控制台界面创建系统镜像"){.link}更多。要使用此界面，请使用适当的选项和子命令来运行
`composer-cli`{.literal} 命令。
命令行界面的工作流总结如下：
::: orderedlist
1.  将蓝图定义导出（[*保存*]{.emphasis}）到纯文本文件
2.  在文本编辑器中编辑这个文件
3.  将蓝图文本文件导入（[*推送*]{.emphasis}）到镜像构建器
4.  运行 compose 来从蓝图构建镜像
5.  导出镜像文件以下载它
:::
除了实现此过程的基本子命令外，`composer-cli`{.literal}
命令还提供多个子命令来检查配置的蓝图和组合的状态。
要以非 root 身份运行 `composer-cli`{.literal} 命令，用户必须在
`weldr`{.literal} 或 `root`{.literal} 组中。
:::
::: section
::: titlepage
# []{#creating-system-images-with-composer-command-line-interface_composing-a-customized-rhel-system-image.html#creating-a-composer-blueprint-with-command-line-interface_creating-system-images-with-composer-command-line-interface}使用命令行界面创建镜像构建器蓝图 {.title}
:::
此流程描述了如何使用命令行界面创建新镜像构建器蓝图。
::: orderedlist
**流程**
1.  创建一个包含以下内容的纯文本文件：
    ``` screen
    name = "BLUEPRINT-NAME"
    description = "LONG FORM DESCRIPTION TEXT"
    version = "0.0.1"
    modules = []
    groups = []
    ```
    用您的蓝图的名称和描述替换 [*BLUEPRINT-NAME*]{.emphasis} 和 [*LONG
    FORM DESCRIPTION TEXT*]{.emphasis}。
    根据 [Semantic Versioning](https://semver.org/){.link} 方案，将
    [*0.0.1*]{.emphasis} 替换为一个版本号。
2.  对于您要包含在蓝图中的每个软件包，请在文件中添加以下行：
    ``` screen
    [[packages]]
    name = "package-name"
    version = "package-version"
    ```
    使用软件包名称替换 [*package-name*]{.emphasis}，比如
    [**[httpd]{.package}**]{.strong}、[**[gdb-doc]{.package}**]{.strong}
    或者 [**[coreutils]{.package}**]{.strong}。
    将 [*package-version*]{.emphasis} 替换为要使用的版本。此字段支持
    `dnf`{.literal} 版本规范：
    ::: informalexample
    ::: itemizedlist
    -   对于特定版本，请使用具体的版本号，如 [**8.30**]{.strong}。
    -   对于最新的可用版本，请使用星号 [**\***]{.strong}。
    -   对于最新的次版本，请使用以下格式，如 [**8.**]{.strong}\*。
    :::
    :::
3.  蓝图可以通过多种方式自定义。在本例中，可以通过执行以下步骤禁用
    Simultaneous Multi Threading(SMT)。有关其他可用的定制信息，请参阅
    [支持的镜像自定义](#creating-system-images-with-composer-command-line-interface_composing-a-customized-rhel-system-image.html#image-customizations_creating-system-images-with-composer-command-line-interface "支持的镜像自定义"){.link}。
    ``` screen
    [customizations.kernel]
    append = "nosmt=force"
    ```
4.  将文件保存为 [*BLUEPRINT-NAME*]{.emphasis}.toml，并关闭文本编辑器。
5.  推送（导入）蓝图：
    ``` screen
    # composer-cli blueprints push BLUEPRINT-NAME.toml
    ```
    将 [*BLUEPRINT-NAME*]{.emphasis} 替换为您在前面步骤中使用的值。
6.  要验证蓝图是否已被推送并已存在，列出现有的蓝图：
    ``` screen
    # composer-cli blueprints list
    ```
7.  检查蓝图中列出的组件和版本是否有效：
    ``` screen
    # composer-cli blueprints depsolve BLUEPRINT-NAME
    ```
:::
::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
### 注意 {.title}
您可以使用 `composer-cli`{.literal} 命令，以非 root
身份创建镜像。为此，请将您的用户添加到 `weldr`{.literal} 或
`root`{.literal} 组中。要将您的用户添加到 `weldr`{.literal}
组，请执行以下步骤：
``` screen
# usermod -a -G weldr user
$ newgrp weldr
```
:::
:::
::: section
::: titlepage
# []{#creating-system-images-with-composer-command-line-interface_composing-a-customized-rhel-system-image.html#editing-a-composer-blueprint-with-command-line-interface_creating-system-images-with-composer-command-line-interface}使用命令行界面编辑镜像构建器蓝图 {.title}
:::
此流程描述了如何在命令行界面中编辑现有镜像构建器蓝图。
::: orderedlist
**流程**
1.  将蓝图保存（导出）到本地文本文件：
    ``` screen
    # composer-cli blueprints save BLUEPRINT-NAME
    ```
2.  使用您选择的文本编辑器编辑 BLUEPRINT [*-NAME*]{.emphasis}.toml
    文件并进行修改。
3.  在完成编辑前，请确保文件是一个有效的蓝图：
    ::: orderedlist
    1.  如果存在，删除此行：
        ``` screen
        packages = []
        ```
    2.  增加版本号。请记住, Image Builder 蓝图版本必须使用 [Semantic
        Versioning](https://semver.org/){.link}
        方案。另请注意，如果您不更改版本，则版本的
        [**patch**]{.strong}组件会自动增加。
    3.  检查内容是否是有效的 TOML 规格。如需更多信息，请参阅 [TOML
        文档](https://github.com/toml-lang/toml#toml/){.link}。
        ::: {.note style="margin-left: 0.5in; margin-right: 0.5in;"}
        ### 注意 {.title}
        TOML
        文档是一款社区产品，红帽不支持。您可以使用该工具报告任何问题：
        [https://github.com/toml-lang/toml/issues](https://github.com/toml-lang/toml/issues){.link}
        :::
    :::
4.  保存文件并关闭编辑器。
5.  将蓝图推送到镜像构建器：
    ``` screen
    # composer-cli blueprints push BLUEPRINT-NAME.toml
    ```
    请注意，您必须提供包括 `.toml`{.literal}
    扩展名的文件名，而在其他命令中，您只能使用蓝图的名称。
6.  要验证上传到镜像构建器的内容是否与您的编辑匹配，请列出蓝图的内容：
    ``` screen
    # composer-cli blueprints show BLUEPRINT-NAME
    ```
7.  检查蓝图中列出的组件和版本是否有效：
    ``` screen
    # composer-cli blueprints depsolve BLUEPRINT-NAME
    ```
:::
:::
::: section
::: titlepage
# []{#creating-system-images-with-composer-command-line-interface_composing-a-customized-rhel-system-image.html#creating-a-system-image-with-composer-in-the-command-line-interface_creating-system-images-with-composer-command-line-interface}在命令行界面中使用镜像构建器创建系统镜像 {.title}
:::
此流程演示了如何使用 Image Builder 命令行界面构建自定义镜像。
::: itemizedlist
**先决条件**
-   您已为镜像准备了蓝图。
:::
::: orderedlist
**流程**
1.  启动 compose：
    ``` screen
    # composer-cli compose start BLUEPRINT-NAME IMAGE-TYPE
    ```
    将 [*BLUEPRINT-NAME*]{.emphasis} 替换为蓝图的名称，将
    [*IMAGE-TYPE*]{.emphasis} 替换为镜像的类型。对于可能的值，请参阅
    `composer-cli compose types`{.literal} 命令的输出。
    compose 进程在后台启动，并显示 Compose 的 UUID。
2.  等待 compose 完成。请注意，这可能需要几分钟时间。
    检查 Compose 的状态：
    ``` screen
    # composer-cli compose status
    ```
    完成的 compose 显示状态值 [**FINISHED**]{.strong}。根据 UUID