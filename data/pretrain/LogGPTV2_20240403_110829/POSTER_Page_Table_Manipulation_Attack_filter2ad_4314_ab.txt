# Page Table Modification Attack (PTMA) in AArch32 and x86-64

## 1. PTMA in AArch32

### 1.1 First-Level Descriptor Formats of Short Descriptors in AArch32
The pseudo code for clearing the XN (Execute Never) bit for the memory located at virtual address `0xED800000` is as follows:

```c
/* AArch32 Pseudo code */
{
    unsigned int* a = (unsigned int*)0xC0007B60;
    *a = *a & ~(0x10);  /* Clear XN bit */
}
```

### 1.2 Confirmation of the Work
After modifying the Page Table Entry (PTE) attribute of the Master Kernel Page Table, it is necessary to invalidate the Translation Lookaside Buffer (TLB) and access the modified region to ensure that the current address space reflects the changes. Creating a new process can serve as an alternative method, as the newly created process will always refer to the Master Kernel Page Table.

To confirm the modification of the kernel address space, the page table dump (PT_DUMP) feature can be used to provide information about the kernel space.

## 2. PTMA in x86-64

### 2.1 Overview
In the x86-64 Linux Kernel, multi-level mapping is applied for the kernel space. Except for the Page Global Directory, all other tables are dynamically allocated, making it challenging to determine the address of the targeted PTE with only the address of the Master Kernel Page Table. This section introduces an effective method to find the targeted PTE through simple categorization and calculation using information from the Linux Kernel booting log.

### 2.2 Discovering the Master Kernel Page Table
In various Linux distributions, the booting log is accessible without root permission and includes information on memory mapping, page size, and physical memory addresses for the Master Kernel Page Table. This information can be obtained using the `dmesg` command.

In x86-64, a page table is 4KB in size and consists of 512 64-bit entries. The size of the mapped region varies based on the page size. For example:
- If the page size is 4KB, a page table can map a 2MB memory region (4KB × 512 entries).
- If the page size is 2MB, a page table can map a 1GB memory region.

Mapping information can be categorized by physical address and mapping size, as shown in Figure 2.

### 2.3 Finding the Targeted PTE
The next step is to pair two types of mapping information: Mapping info and Page Table allocation. The allocation information includes the physical address of the page table. By pairing this information, the address of the page table for the targeted region can be determined. For kernel memory mapping, there are two rules:
1. The mapping for lower addresses comes first.
2. For lower-level mappings, the higher-level mapping that includes the lower level must be done first.

In Figure 2, a region from `0x00000000` to `0x000fffff` should be mapped first (Rule 1). However, the higher-level mapping including this region is not yet done. Therefore, a mapping (①) with a 1GB page size and another mapping (②) with a 2MB page size will be done in that order (Rule 2). After the higher-level mapping, the mapping (③) for the region from `0x00000000` to `0x001fffff` can be performed. This method allows us to pair the two types of mapping information.

Virtual addresses are linearly mapped to physical memory from the virtual address `_PAGE_OFFSET` in the x86-64 Linux Kernel. For example, the physical address of the memory located at virtual address `0xffff880075200000` is `0x75200000`. The memory at physical address `0x75200000` belongs to a region from `0x40000000` to `0x7fffdfff`. From Figure 2, the base address of the page table for this region is `0x228c000`. Through calculation, we can determine that the PTE address for the memory at virtual address `0xffff880075200000` is `0x0228cd48`.

### 2.4 Modifying the Attribute of Corresponding Memory
Figure 3 shows the format of the IA32-e Page-Directory Entry that maps to a 2-Mbyte page. The highest bit (bit 63) in this format is the execute-disable (XD) bit.

The pseudo code for clearing the XD bit for the virtual address `0xffff880075200000` is as follows:

```c
/* x86-64 Pseudo code */
{
    unsigned long* a = (unsigned long*)(0xFFFF880000000000 + 0x228cd48);
    *a = *a & ~(0x8000000000000000);  /* Clear XD bit */
}
```

After this operation, the memory located at virtual address `0xffff880075200000` to `0xffff8800753fffff` is changed to executable.

### 2.5 Confirmation of the Work
To reflect the modified Master Kernel Page Table in a new address space, create a new process. The page table dump (PT_DUMP) can be used to check the kernel space and confirm the result of the kernel space modification. PT_DUMP shows the attributes of the kernel address space, allowing for comparison before and after clearing bit 63 of the PTE.

After modifying the PTE at `0xffff88000228cd48`, we confirmed that the attribute of the corresponding memory at virtual address `0xffff880075200000` to `0xffff8800753fffff` was changed to executable.

## 3. Summary
PTMA is an effective technique for kernel exploitation, as it attacks the fundamental principles of the memory management mechanism used for kernel exploit defense in almost all systems. Our tests on widely used architectures such as AArch32 and x86-64 confirm that any designated memory can be accessed without restriction, leading to unlimited possibilities for kernel exploitation. For example, the Android kernel rootkit [7] can be easily realized even in a hardened kernel. We hope that presenting this critical attack will inspire and contribute to the development of more secure architectures.

## 4. References
[1] V. P. Kemerlis, M. Polychronakis, and A. D. Keromytis. ret2dir: Rethinking kernel isolation. In 23rd USENIX Security Symposium (USENIX Security 14), pages 957–972, San Diego, CA, Aug. 2014. USENIX Association.

[2] P. Sundareson. ARM Linux embedded memory protection techniques. http://www.slideshare.net/prabindh/arm-memory-protection-techniques, 2013. Accessed: 2015-08-09.

[3] J. Edge. Extending the use of RO and NX. http://lwn.net/Articles/422487/, 2011. Accessed: 2015-08-09.

[4] C. Matthieu. x86: Add NX protection for kernel data. https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=5bd5a452662bc37c54fb6828db1a3faf87e6511c, 2010. Accessed: 2015-08-09.

[5] R. King. ARM: implement basic NX support for kernel lowmem mappings. http://marc.info/?l=git-commits-head&m=139053447618651&w=2, 2013. Accessed: 2015-08-09.

[6] C. Team. Exploit writing tutorial part 10: Chaining DEP with ROP the Rubik's[tm] cube. https://www.corelan.be/index.php/2010/06/16/exploit-writing-tutorial-part-10-chaining-dep-with-rop-the-rubikstm-cube, 2010. Accessed: 2015-08-09.

[7] D. You. Android platform based linux kernel rootkit. http://www.phrack.com/issues/68/6.html#article, 2011. Accessed: 2015-08-09.