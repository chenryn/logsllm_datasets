version. The set of mutated versions are the faultload that will
be executed in the experiments. At the end of every experiment,
ProFIPy collects logs from the target system for data analysis
(§ IV-C).
The user also conﬁgures a workload, i.e., a set of directives
to exercise the target software during the experiments. The
workload emulates the operating conditions of the system and
triggers the injected fault. Moreover, the workload serves to
detect service failures and recovery abilities, e.g., by looking
for crashes and timeouts of the workload (e.g., due to stalled
service calls), or by performing consistency checks with test
assertions on the outputs of the workload (e.g., after a resource
has been modiﬁed by the workload, the behavior of the system
should reﬂect the new state of the resource).
The user deﬁnes the workload by providing command-line
directives. For example, the user can use UNIX shell commands
to start the target software, e.g., to launch a UNIX daemon such
as a network server. Command-line directives can be used both to
invoke the command-line interface of the target Python program
or to indirectly launch the software by running automated test
scripts. These scripts can be uploaded by the user along with the
target Python source code (Fig. 2). Additionally, the user can
specify command-line directives to launch workload generator
tools, such as HTTP and RPC trafﬁc generators, which in turn
exercise the target software.
ProFIPy runs the fault
injection experiments within a
container-based experimental environment, by using the Docker
virtualization system [50]. The tool ﬁrst creates a container
image, in which it copies the Python source code uploaded by
the user. The user can customize the container image by adding
conﬁguration directives in Dockerﬁle format [51], such as, to
install within the container external dependencies to run the
Python software under test (e.g., using the pip command), and
to install external tools (e.g., HTTP and RPC trafﬁc generators).
Then, for each fault to be injected, ProFIPy deploys a new
container, by copying into it the mutated source code with
Authorized licensed use limited to: University College London. Downloaded on October 01,2020 at 12:46:15 UTC from IEEE Xplore.  Restrictions apply. 
367
(cid:18)(cid:39)(cid:26)(cid:38)(cid:38)
(cid:16)(cid:5)(cid:3)(cid:12)
(cid:7)(cid:21)(cid:7)(cid:5)(cid:18)(cid:17)(cid:9)(cid:13)(cid:12)
(cid:6)(cid:3)(cid:17)(cid:3)(cid:1)(cid:3)(cid:12)(cid:3)(cid:10)(cid:22)(cid:16)(cid:9)(cid:16)
(cid:20)(cid:36)(cid:38)(cid:32)(cid:33)(cid:36)(cid:23)(cid:25)(cid:1)
(cid:24)(cid:36)(cid:35)(cid:27)(cid:30)(cid:28)(cid:41)(cid:38)(cid:23)(cid:40)(cid:30)(cid:36)(cid:35)
(cid:28)
(cid:13)(cid:38)(cid:30)(cid:28)(cid:30)(cid:35)(cid:23)(cid:33)(cid:1)(cid:14)(cid:43)(cid:40)(cid:29)(cid:36)(cid:35)(cid:1)
(cid:39)(cid:36)(cid:41)(cid:38)(cid:24)(cid:26)(cid:1)(cid:24)(cid:36)(cid:25)(cid:26)
(cid:4)(cid:41)(cid:28)(cid:1)(cid:39)(cid:37)(cid:26)(cid:24)(cid:30)(cid:27)(cid:30)(cid:24)(cid:23)(cid:40)(cid:30)(cid:36)(cid:35)(cid:1)
change {
. . .
} 
into {
. . .
(cid:16)(cid:36)(cid:41)(cid:38)(cid:24)(cid:26)(cid:1)
(cid:24)(cid:36)(cid:25)(cid:26)(cid:1)
(cid:39)(cid:24)(cid:23)(cid:35)(cid:35)(cid:26)(cid:38)
(cid:9)(cid:35)(cid:31)(cid:26)(cid:24)(cid:40)(cid:30)(cid:36)(cid:35)(cid:1)
(cid:24)(cid:36)(cid:35)(cid:27)(cid:30)(cid:28)(cid:41)(cid:38)(cid:23)(cid:40)(cid:30)(cid:36)(cid:35)(cid:1)
(cid:2)(cid:1)(cid:16)(cid:23)(cid:34)(cid:37)(cid:33)(cid:30)(cid:35)(cid:28)
(cid:6)(cid:16)(cid:10)(cid:1)
(cid:24)(cid:36)(cid:34)(cid:37)(cid:30)(cid:33)(cid:26)(cid:38)
(cid:2)(cid:2)(cid:2)(cid:12)(cid:14)(cid:13)(cid:11)(cid:10)(cid:16)(cid:12)(cid:15)(cid:14)(cid:1)(cid:3)(cid:2)(cid:2)(cid:2)
(cid:2)(cid:2)(cid:2)(cid:12)(cid:14)(cid:13)(cid:11)(cid:10)(cid:16)(cid:12)(cid:15)(cid:14)(cid:1)(cid:4)(cid:2)(cid:2)(cid:2)
(cid:18)
(cid:2)(cid:2)(cid:2)(cid:12)(cid:14)(cid:13)(cid:11)(cid:10)(cid:16)(cid:12)(cid:15)(cid:14)(cid:1)(cid:9)(cid:2)(cid:2)(cid:2)
(cid:8)(cid:23)(cid:41)(cid:33)(cid:40)(cid:1)(cid:30)(cid:35)(cid:31)(cid:26)(cid:24)(cid:40)(cid:30)(cid:36)(cid:35)(cid:1)(cid:37)(cid:33)(cid:23)(cid:35)
(cid:11)(cid:41)(cid:40)(cid:23)(cid:40)(cid:26)(cid:25)(cid:1)
(cid:42)(cid:26)(cid:38)(cid:39)(cid:30)(cid:36)(cid:35)(cid:39)
(cid:16)(cid:36)(cid:41)(cid:38)(cid:24)(cid:26)(cid:1)(cid:24)(cid:36)(cid:25)(cid:26)(cid:1)
(cid:34)(cid:41)(cid:40)(cid:23)(cid:40)(cid:36)(cid:38)
(cid:2) (cid:16)(cid:43)(cid:39)(cid:40)(cid:26)(cid:34)(cid:1)(cid:33)(cid:36)(cid:28)(cid:39)
(cid:2) (cid:20)(cid:36)(cid:38)(cid:32)(cid:33)(cid:36)(cid:23)(cid:25)(cid:1)(cid:33)(cid:36)(cid:28)(cid:39)
(cid:2) (cid:17)(cid:38)(cid:23)(cid:24)(cid:26)(cid:1)(cid:27)(cid:30)(cid:33)(cid:26)(cid:39)
}
(cid:6)(cid:16)(cid:10)
Fig. 2. Workﬂow of the ProFIPy tool.
(cid:6)(cid:26)(cid:37)(cid:33)(cid:36)(cid:43)(cid:1)(cid:23)(cid:35)(cid:25)(cid:1)(cid:15)(cid:41)(cid:35)
(cid:2)(cid:4)(cid:10)(cid:11)(cid:18)(cid:16)(cid:8)(cid:1)
(cid:12)(cid:14)(cid:7)(cid:8)
(cid:3)(cid:8)(cid:16)(cid:19)(cid:10)(cid:6)(cid:8)(cid:1)
(cid:4)(cid:19)(cid:4)(cid:10)(cid:11)(cid:4)(cid:5)(cid:10)(cid:11)(cid:10)(cid:17)(cid:20)
(cid:3)(cid:35)(cid:23)(cid:33)(cid:43)(cid:40)(cid:30)(cid:24)(cid:39)
(cid:19)(cid:30)(cid:39)(cid:41)(cid:23)(cid:33)(cid:30)(cid:44)(cid:23)(cid:40)(cid:30)(cid:36)(cid:35)
(cid:2)(cid:4)(cid:10)(cid:11)(cid:18)(cid:16)(cid:8)(cid:1)
(cid:11)(cid:14)(cid:9)(cid:9)(cid:10)(cid:13)(cid:9)
(cid:2)(cid:4)(cid:10)(cid:11)(cid:18)(cid:16)(cid:8)(cid:1)
(cid:15)(cid:16)(cid:14)(cid:15)(cid:4)(cid:9)(cid:4)(cid:17)(cid:10)(cid:14)(cid:13)
(cid:8)(cid:17)(cid:11)(cid:14)(cid:16)(cid:1)(cid:5)
(cid:8)(cid:17)(cid:11)(cid:14)(cid:16)(cid:1)(cid:6)
(cid:8)(cid:17)(cid:11)(cid:14)(cid:16)(cid:1)(cid:7)
(cid:3)(cid:15)(cid:11)(cid:2)(cid:6)(cid:5)(cid:17)(cid:9)(cid:8)(cid:1)(cid:10)(cid:5)(cid:12)(cid:13)(cid:18)(cid:16)(cid:9)(cid:1)(cid:5)(cid:14)(cid:5)(cid:13)(cid:19)(cid:17)(cid:12)(cid:17)
(cid:4)(cid:16)(cid:5)(cid:7)(cid:9)(cid:2)(cid:6)(cid:5)(cid:17)(cid:9)(cid:8)(cid:1)(cid:10)(cid:5)(cid:12)(cid:13)(cid:18)(cid:16)(cid:9)(cid:1)(cid:5)(cid:14)(cid:5)(cid:13)(cid:19)(cid:17)(cid:12)(cid:17)
the fault, and runs the workload directives deﬁned by the user.
The experiment ends when the workload completes, or when
a user-deﬁned timeout expires. Finally, ProFIPy cleans-up the
experimental environment by deallocating the container. In this
way, the tool can also clean-up any resource leaked or corrupted
because of the injected fault (e.g., stale processes or ﬁles). Using
containers also allows the tool to run several parallel experiments
on independent sandboxes, to take advantage of multi-core CPUs.
ProFIPy tunes the number of parallel experiments according to
run at most N − 1 parallel containers at the same time, where
N is the number CPU cores in the host system [52]. To avoid
interferences in memory and I/O bandwidth, the tool further
reduces the number of parallel containers if it hits a threshold
for memory and I/O utilization.
ProFIPy can enable and disable the injected faulty code at any
time during the execution of the target software. The mutated
source code retains a copy of the original statements of the fault
injection point, similarly to the EDFI fault injection tool [39]:
ProFIPy mutates the source code by inserting an IF ... ELSE
... construct, where the two branches include respectively
the original statements and the faulty ones. Then, the tool can
control which of the two branches to execute, by writing a
control variable (a “trigger”) allocated in a shared memory area
between the tool and the target software. This ability enables
additional analyses of the effects of failures and recovery. The
tool executes the workload for two times (“rounds”), without
restarting the target program between the two executions. In the
ﬁrst round, the injected fault is enabled, so that it infects the
target software with error states, possibly causing service failures.
The workload is executed again in the second round, but the
injected fault is disabled. Of course, if the target program fails
and is unable to recover, the second workload execution will fail.
The second round allows us to analyze the scope of the error
states [53], [54]. In the best case, the error state is conﬁned to
service requests that were issued during the ﬁrst round, and the
requests during the second round are not affected by any error
(e.g., the target software recovers a correct state with a restart).
In the worst case, the error states are persistent even after that
the faulty code is disabled, causing further failures during the
second round. This analysis provides additional feedback to the
user about the failure behavior of the target software.
During the experiments, ProFIPy saves the output of the target
program (stdout, stderr) and the output of the workload directives
(e.g., the commands for launching a workload generator, which
reports service failures). Moreover, the tool can be conﬁgured to
save log ﬁles that may be generated by the target software or by
the workload. These outputs and logs are analyzed in the last
phase of the ProFIPy workﬂow (data analysis), as discussed in
the following.
C. Data Analysis
The data analysis evaluates the target software in terms of
service failures, logging, and recovery. ProFIPy classiﬁes the
experiments into a set of failure modes, which include the crash
and the timeout of the target software, and user-deﬁned failure
modes. The user can specify patterns (e.g., using keywords and
regex) that the tool will look for among the outputs and the logs
produced by the experiments. For example, failure modes can
include failures of the workload (e.g., the workload stops due to
a service API exception) and of the target software (e.g., the
software detects an error state with an internal assertion, and
reports it with a high-severity log message). The tool reports
the statistical distribution of failure modes. The user can drill-
down the individual classes of failures, to further inspect logs
of experiments in that class. The user can also drill-down with
respect to fault types and injected components, to identify the
critical areas (e.g., components that are most prone to failures)
where failure mitigations are most needed.
ProFIPy can analyze failures with respect to workload rounds.
It computes a service availability metric, i.e., the percentage
of experiments in which the software was (un)available in the
second round of execution (injected fault disabled), because
of error states generated during the ﬁrst round (injection fault
enabled) that persisted and were not recovered. These cases
deserve a deeper analysis, e.g., to identify resource leaks that
may occur in error handling paths, and that may cause more
failures over time [55], [56].
D. Advanced Features
ProFIPy includes more, optional features for deeper analysis of
the large amounts of data produced by fault injection experiments.
Authorized licensed use limited to: University College London. Downloaded on October 01,2020 at 12:46:15 UTC from IEEE Xplore.  Restrictions apply. 
368
We brieﬂy report here on these features.
(cid:2) Coverage analysis. To reduce the time needed to run the fault
injection experiments, ProFIPy performs a preliminary analysis
to avoid injecting faults in program paths that are not covered
by the workload. Most likely, the workload will not cover all of
the paths in the program, and injecting into non-covered paths
causes a waste of time since the fault would not cause any
effect. Before executing the experiments, ProFIPy conducts a
coverage analysis, by running a “fault-free” execution (i.e., no
fault injected) using the same workload that will be used for
the experiments. It generates coverage information by adding
logging statements at every fault injection point in the target
program discovered by the scan phase (see § IV-A). After the
fault-free run, ProFIPy generates a reduced fault injection plan,
by only including the covered fault locations.
(cid:2) Failure logging. ProFIPy checks whether the target system
can detect error states and report diagnostic information on
log ﬁles. The tool computes a failure logging metric, i.e., the
percentage of experiments in which the target software both
experienced a workload failure and logged at least one error
message. Failures and error logs are identiﬁed with user-provided
keywords and regex. This metric gives feedback about the logging
abilities, and non-logged failures are opportunities for improving
telemetry. An example of this analysis can be found in a previous
study [45].
(cid:2) Failure propagation. ProFIPy checks if the fault in the
injected component propagated across other components. The
tool computes a failure propagation metric, i.e., the percentage of
injected faults that impacted on more than one component. This
metric is applicable for larger software with a component-based
architecture, where each sub-system generates a distinct log