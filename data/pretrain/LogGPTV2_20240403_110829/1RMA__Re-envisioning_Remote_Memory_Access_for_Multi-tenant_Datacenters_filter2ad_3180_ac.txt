subverting a participating host.
Of note, 1RMA also protects against replay attacks: though
1RMA does not prevent replayed read requests from being admitted,
such attacks generate freshly-salted (by virtue of the server’s ascend-
ing counter) ciphertext, so that an attacker still requires the correct
𝐾𝑑 to decrypt the resulting responses (§5 discusses replay attacks on
mutating commands).
1RMA’s security model does not meaningfully change the behav-
ior of a host with a root-level compromise; a root-level attacker can
impersonate the processes on the host, and therefore can authenticate
by whatever means it chooses as one of those users. The primary de-
fenses against this threat are to accelerate detection, for example, by
enacting frequent encryption key rotation, forcing repeated authenti-
cation steps, which can be logged and inspected. 1RMA provides
explicit support for encryption key rotation to aid this objective (§5).
Authentication failures: 1RMA NICs drop responses that fail
their authentication steps. In contrast, inbound requests failing
authentication are sent an immediate failure notification in re-
sponse, signed with a well-known reserved key, and with outcome
REMOTE_AUTHENTICATION_FAILURE. It would be stronger to drop
such requests, thereby forcing an attacker to face a timeout rather
than a timely negative response. However, doing so penalizes non-
attack cases, as the REMOTE_AUTHENTICATION_FAILURE error code
is easily recognizable as a side effect of encryption key rotation, and
therefore recovery steps are obvious to client software. In contrast,
a dropped request manifests as a TIMEOUT, which does not immedi-
ately indicate that an encryption key rotation may have occurred.
Line-rate operation. Because 1RMA ops are independent and un-
ordered, we are able to deploy multiple copies of AES-GCM hard-
ware encryption blocks in our 100Gbps implementation of 1RMA
Figure 5: Derived region key generation and distribution. (1)
Client sends its address, PID, and OpType to the server via an
encrypted RPC. (2) Server software generates a derived region
key, 𝐾𝑑, using the information provided by the client and the
region key, 𝐾𝑟 , corresponding to the memory region in question
and (3) sends 𝐾𝑑 to the client. (4) The client-side 1RMA NIC
signs the op using the obtained 𝐾𝑑 and (5) sends the request to
the server. (6) On receiving the request, the serving 1RMA NIC
regenerates the key and uses it for authentication and decryp-
tion.
away with on-NIC caches and the associated cache consistency
between the host and NIC, leading to simpler hardware and
avoiding performance pathologies of cache-oriented designs.
• Fast completions with precise feedback: Building on the pre-
dictability offered by solicitation and explicit resource manage-
ment, the 1RMA NIC imposes tight timeouts on op completions.
1RMA aggressively times out delayed ops—slow ops are con-
verted to failures—and provides unified timeout and failure
semantics. Fail-fast behaviors simplify reasoning about con-
gestion, ensure that operations do not consume the solicitation
window for an inordinate amount of time, bound the worst-
case operation latency, and allow applications to handle failures
responsively and in an application-appropriate way.
4.2 1RMA Security
Given that we target deployments with mutually untrusting endpoints
and an untrusted network fabric, security is built into and tied to
all basic aspects of 1RMA. Before delving into the details, we first
discuss the two attacks vectors 1RMA addresses:
A1 A malicious user process that attempts to access remote memory
regions owned by other tenants. Such an attacker can freely
initiate 1RMA ops of their choice (which must fail).
A2 An attacker with full access to network links and switches (e.g.,
root exploit of network control plane or physical/side-channel
observation). Such an attacker can observe, corrupt or inject
ciphertext in transit, and also inject arbitrary packets.
Similar to standard RDMA, 1RMA bootstraps remote access be-
tween a client and a server with an out-of-band encrypted RPC that
includes secure exchange of a key (Figure 5, 1 – 3 ). Specifically,
on memory registration, a region is assigned a RegionId. An ap-
plication specifies a region key, 𝐾𝑟 , that protects the corresponding
memory region. 𝐾𝑟 is a 128-bit value from which derived region
keys, 𝐾𝑑 , are computed, and these form the basis of 1RMA’s security
and protect individual transfers. Neither 𝐾𝑟 nor 𝐾𝑑 are ever sent over
the network as a part of a 1RMA op or its response.
Derived keys (Figure 5). 𝐾𝑑 is used to generate a message authen-
tication code to sign all protocol messages, and to encrypt all data
712
Sign the opusing KdClientServerSWNICNICSW{Addrinitiator, PIDinitiator, OpType}{RegionID, Kd}Generate KdRegionID AddrinitiatorPIDinitiatorGenerate Kd, authenticate and decrypt using Kd123456Encrypted RPCSIGCOMM ’20, August 10–14, 2020, Virtual Event, NY, USA
A. Singhvi et al.
based on its class of service ( 2 ), awaiting its turn for dispatch.
The queue head waits for capacity in the solicitation window
( 3 ) before sending a request to the remote side, designated by
address information in the command itself ( 4 – 5 ).
Each hardware structure’s capacity is implementation specific
and can change across 1RMA device generations. Capacity in the
RRT and CST is centrally managed for each datacenter application,
reflecting application needs. Unlike connections, the number of
memory regions for RMA use cases is typically proportional to
tasks, not task-pairs, and hence is manageable in finite resources.
Similarly, the number of command slots allocated to a process is
centrally managed, and caps how many outstanding operations a
process may initiate, effectively bounding its burst potential in the
network (e.g., for lower-priority applications). Applications request
command slot allocations from the host driver via an ioctl.
1RMA Software
1RMA’s solicitation rules can cause ops to queue in the initiating
NIC while waiting for capacity in the solicitation window. Because
the number of command slots is bounded, these queues, too, can be
finitely sized and do not spill to the host. Because we desire highly
responsive ops, these queues shed load eagerly by timing out ops
that have been waiting too long to enter service. Timing out delayed
ops helps to mitigate head-of-line blocking and provides a useful
congestion signal to software congestion control (§6).
4.4
Software layers: 1RMA software provides large-transfer abstrac-
tions and congestion management (see Figure 4). At the lowest layer,
a CommandPortal object manages a collection of command slots
and a memory region configured to accept completions, providing a
familiar command/completion queue construct. Because command
slots are memory-mapped registers in the NIC, the CommandPortal
handles the details of mmap() to insert these registers into appli-
cation memory; and provides routines to issue properly-formatted
commands via MMIO stores to the correct portion of the 1RMA
NIC’s PCIe BAR (details in Appendix B).
Building on CommandPortal, the next layer in the software stack,
CommandExecutor, provides support for arbitrary-sized transfers,
transparently chunked into up-to-4KB-sized operations and subject
to software pacing for congestion control (§6). Application software
layers above CommandExecutor bear no responsibility for chunking,
pacing, or congestion control. Applications can elect to manage
failures according to individual needs. For example, consider a repli-
cated key/value service in which a read op to a particular backend
fails; rather than retrying for an inordinate amount of time under
hardware control, the client software can opt to quickly redirect
traffic to another backend server replica.
Commands: As the 1RMA NIC retains no per-destination state,
each individual command fully encodes all metadata needed for the
op. Apart from the op type and size, each command includes:
• Remote host address and RegionId, which uniquely identify
• Two local RegionIds, one to source/sink data and another to
• The derived region key 𝐾𝑑 , used to sign the request and to
the remote memory targeted by the operation.
serve as a completion queue.
decrypt responses.
Figure 6: 1RMA NIC hardware components. (1) The client ini-
tiates an op, it is written to a command slot in the CST, and (2)
the op is enqueued in a hardware FIFO, awaiting its turn for
dispatch. (3) The queue head waits for capacity in the solicita-
tion window after which the request is (4) signed with 𝐾𝑑 and
(5) sent to the remote side.
and freely load-balance among them. We assign work to these en-
cryption pipelines as they become free, irrespective of order, as the
underlying protocol and semantics allow this optimization.
4.3 Managing Hardware Resources
Given the inherent complexity, scalability, and performance limita-
tions associated with cache-oriented NIC designs, 1RMA builds its
finite resources into its execution model. The four main 1RMA NIC
components (Figure 6) are:
• Registered Region Table (RRT): The RRT is 1RMA’s mem-
ory translation table. Unlike standard RDMA, this table is main-
tained in fixed-size, on-NIC SRAM. A RegionId indexes this
table to indicate a specific host memory range and all corre-
sponding metadata—region key 𝐾𝑟 , PCIe address, bounds, per-
missions, etc. Every time 1RMA accesses host memory, it does
so on behalf of precisely one memory region in the RRT. Mem-
ory regions are managed via memory registration, similar to
ibv_reg_mr() in standard RDMA.
• Command Slots and Command Slot Table (CST): Com-
mand slots are 1RMA analogues of RDMA WQEs; each slot
represents a single in-flight operation and can be reused once
the op completes. The CST consists of a fixed-number of
slots in on-NIC SRAM. Each slot is uniquely identified by its
CommandSlotId, which the NIC encodes in the op completion.
This token indicates to the controlling software which command
has completed, because ops may complete out-of-order.
• SRAM Solicitation Window: The solicitation window is al-
located to inbound transfers and is the means to ensure that
solicited data is not dropped due to, for example, transient PCIe
backpressure. Because it is shared among outstanding opera-
tions, the solicitation window is sized proportional to bandwidth-
delay product, with slack to account for jitter or RTT variation.
• FIFO Arbiters: Capacity in the solicitation window is shared
dynamically by a pair of FIFO arbiters—one for each internal
1RMA class of service—which select among ready commands
in the CST. When an application issues an op to a command slot,
the CPU performs an MMIO write across PCIe to corresponding
hardware registers [35] ( 1 in Figure 6). This write causes the
1RMA hardware pipeline to enqueue the op in a hardware FIFO
713
Incoming Op FIFOsOutgoing Op FIFOsSolicitation WindowsRRTEncryption-Decryption BlocksCST1RMA NICPCIe BusHOST124531RMA: Re-envisioning Remote Memory Access for Multi-tenant Datacenters
SIGCOMM ’20, August 10–14, 2020, Virtual Event, NY, USA
Op Status Code
OK
REMOTE_AUTHENTICATION_FAILURE
NACK
TIMEOUT
DISPATCH_TIMEOUT
Op Outcome
Op completed successfully and data was transferred.
Command did not provide the correct derived region key 𝐾𝑑 .
Op reached the remote 1RMA device, discovered the inbound request queue above configured
depth, and was NACKed, which signals congestion at the specific remote 1RMA device.
Receipt of NACK immediately refunds capacity in the solicitation window.
Op timed out without transferring any data. TIMEOUT could arise due to a programming error
(e.g., wrong destination address), a network partition, a drop, or congestion.
The request was queued too long locally, awaiting capacity in the solicitation window, and
the op did not enter service. This outcome signals congestion local to the initiating NIC.
Table 3: Op status codes and rationale.
Implementing write as request-to-read incurs the downside of an
additional RTT, but offers several benefits:
(1) 1RMA writes obey solicitation, thereby providing incast burst
protection for writes as well as reads, even when they occur
concurrently.
(2) The additional protocol messages allow the server-side to in-
clude its own entropy as a salt, curried into the third- and fourth-
step signatures, which protect 4-hop transactions against replay
attacks.
(3) 4-hop write transactions have strong timeout semantics, like
their RMA read counterparts, and unlike those provided by stan-
dard RDMA (§2.1). Figure 7 depicts the behavior of timeouts in
4-hop transactions. After receiving the second-phase “read re-
quest” ( 2 ), the initiating NIC resets its own local timeout, to a
new, fixed time in the future, which is identical to the receiving-
side’s read timeout. Causality then guarantees that, if a timeout
condition occurs, the initiator will necessarily time out after the
receiver. Because the initiator always times out last, all 4-hop
transactions provide a guarantee that a client timeout happens
after any side effects in remote memory.
5.2 Rekey
1RMA offers a management operation, Rekey, to cheaply, and pos-
sibly remotely, install a new region key 𝐾𝑟 in the RRT. Rekey is
unique to 1RMA: no existing RMA implementation provides first-
class support for encryption key rotation. We built Rekey because
it is difficult to construct encryption key rotation primitives using
standard RDMA without introducing either high transient connec-
tion usage (to pre-establish new connections with new encryption
keys) or bursts of connection failure (which occurs when the server
abruptly closes a connection when rotating keys). Coupled with
1RMA’s connectionless nature, Rekey vastly simplifies encryption
key rotation and minimizes performance side effects.
Systems built above 1RMA can leverage Rekey by initiating an
RMA operation, which is no more expensive than an RMA write.
In the simplest case, there is no need to proactively notify remote
users of an upcoming rotation. Such users’ ops simply begin to fail
with outcome REMOTE_AUTHENTICATION_FAILURE, but only those
ops targeting the intended RegionId are affected; those ops target-
ing unrelated regions see no performance impact, and there are no
connections to fail. This makes Rekey an attractive means to unobtru-
sively install new encryption keys, without additional system-level