---
author: Yuki Izumi, Vicent Martí
category: 观点
comments_data:
- date: '2017-04-15 08:24:05'
  message: '666'
  postip: 114.249.235.230
  username: 来自北京的 Chrome 57.0|Windows 10 用户
- date: '2017-05-09 10:14:08'
  message: Markdown也要碎片化了呢
  postip: 183.39.157.43
  username: 来自广东深圳的 Chrome 58.0|Windows 7 用户
- date: '2019-04-13 11:03:37'
  message: 贵站支持的是什么 markdown 标准
  postip: 118.26.142.95
  username: 来自北京的 Chrome 73.0|Mac 10.14 用户
count:
  commentnum: 3
  favtimes: 3
  likes: 0
  sharetimes: 0
  viewnum: 20273
date: '2017-04-13 17:42:08'
editorchoice: false
excerpt: "五年前，我们在 Sundown 的基础之上开始构建 GitHub 自定义版本的 Markdown —— GFM （GitHub 风格的 MarkdownGitHub
  Flavored Markdown），这是我们特地为解决当时已有的 Markdown 解析器的不足而开发的一款解析器。\r\n今天，我们希望通过发布 GitHub
  风格的 Markdown 的正式语法规范及其相应的参考实现来改善现状。"
fromurl: https://githubengineering.com/a-formal-spec-for-github-markdown/
id: 8399
islctt: true
largepic: /data/attachment/album/201704/13/174201xoa91hvt0vlh2d2t.jpg
permalink: /article-8399-1.html
pic: /data/attachment/album/201704/13/174201xoa91hvt0vlh2d2t.jpg.thumb.jpg
related: []
reviewer: ''
selector: ''
summary: "五年前，我们在 Sundown 的基础之上开始构建 GitHub 自定义版本的 Markdown —— GFM （GitHub 风格的 MarkdownGitHub
  Flavored Markdown），这是我们特地为解决当时已有的 Markdown 解析器的不足而开发的一款解析器。\r\n今天，我们希望通过发布 GitHub
  风格的 Markdown 的正式语法规范及其相应的参考实现来改善现状。"
tags:
- GitHub
- Markdown
thumb: false
title: 《GitHub 风格的 Markdown 正式规范》发布
titlepic: true
translator: GHLandy
updated: '2017-04-13 17:42:08'
---
很庆幸，我们当初选择 Markdown 作为用户在 GitHub 上托管内容的标记语言，它为用户提供了强大且直接的方式 （不管是技术的还是非技术的） 来编写可以很好的渲染成 HTML 的纯文本文档。
然而，其最主要的限制，就是缺乏在最模糊的语言细节上的标准。比如，使用多少个空格来进行行缩进、两个不同元素之间需要使用多少空行区分、大量繁琐细节往往造成不同的实现：相似的 Markdown 文档会因为选用的不同的语法解析器而渲染成相当不同的呈现效果。
![](/data/attachment/album/201704/13/174201xoa91hvt0vlh2d2t.jpg)
五年前，我们在 [Sundown](https://github.com/vmg/sundown) 的基础之上开始构建 GitHub 自定义版本的 Markdown —— GFM （ GitHub 风格的 Markdown   GitHub Flavored Markdown ），这是我们特地为解决当时已有的 Markdown 解析器的不足而开发的一款解析器。
今天，我们希望通过发布 GitHub 风格的 Markdown 的正式语法规范及其相应的参考实现来改善现状。
该正式规范基于 [CommonMark](http://commonmark.org/)，这是一个雄心勃勃的项目，旨在通过一个反映现实世界用法的方式来规范目前互联网上绝大多数网站使用的 Markdown 语法。CommonMark 允许人们以他们原有的习惯来使用 Markdown，同时为开发者提供一个综合规范和参考实例，从而实现跨平台的 Markdown 互操作和显示。
### 规范
使用 CommonMark 规范并围绕它来重新加工我们当前用户内容需要不少努力。我们纠结的主要问题是该规范 （及其参考实现） 过多关注由原生 Perl 实现支持的 Markdown 通用子集。这还不包括那些 GitHub 上已经在用的扩展特性。最明显的就是缺少  表格   （    tables    ） 、 删除线   （    strikethrough    ） 、 自动链接   （    autolinks    ）  和  任务列表   （    task lists    ） 的支持。
为完全描述 GitHub 的 Markdown 版本 （也称为 GFM），我们必须要要正式定义这些特性的的语法和语意，这在以前从未做过。我们是在现存的 CommonMark 规范中来完成这一项工作的，同时还特意关注以确保我们的扩展是原有规范的一个严格且可选的超集。
当评估 [GFM 规范](https://github.github.com/gfm/) 的时候，你可以清楚的知道哪些是 GFM 特定规范的补充内容，因为它们都高亮显示了。并且你也会看到原有规范的所有部分都保持原样，因此，GFM 规范能够与任何其他的实现保持兼容。
### 实现
为确保我们网站中的 Markdown 渲染能够完美兼容 CommonMark 规范，GitHub 的 GFM 解析器的后端实现基于 `cmark` 来开发，这是 CommonMark 规范的一个参考实现，由 [John MacFarlane](https://github.com/jgm) 和许多其他的 [出色的贡献者](https://github.com/jgm/cmark/#authors) 开发完成。
就像规范本身那样，`cmark` 是 Markdown 的严格子集解析器，所以我们还必须在现存解析器的基础上完成 GitHub 自定义扩展的解析功能。你可以通过 [`cmark` 的分支](https://github.com/github/cmark) 来查看变更记录；为了跟踪不断改进的上游项目，我们持续将我们的补丁变基到上游主线上去。我们希望，这些扩展的正式规范一旦确定，这些补丁集同样可以应用到原始项目的上游变更中去。
除了在 `cmark` 分支中实现 GFM 规范特性，我们也同时将许多目标相似的变更贡献到上游。绝大多数的贡献都主要围绕性能和安全。我们的后端每天都需要渲染大量的 Markdown 文档，所以我们主要关注这些操作可以尽可能的高效率完成，同时还要确保那些滥用的恶意 Markdown 文档无法攻击到我们的服务器。
第一版使用 C 语言编写的解析器存在严重的安全隐患：通过足够深度的特殊 Markdown 元素的嵌套，它可能造成堆栈溢出 （甚至有时候可以运行任意代码）。而 `cmark` 实现，就像我们之前设计的解析器 Sundown，从一开始设计就考虑到要抵御这些攻击。其解析算法和基于 AST 的输出可以优雅的解决深层递归以及其他的恶意文档格式。