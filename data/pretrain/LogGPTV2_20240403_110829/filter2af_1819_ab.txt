综上举个例子
    .data
    array1:     .space  12      #  declare 12 bytes of storage to hold array of 3 integers
                            #  定义一个 12字节 长度的数组 array1, 容纳 3个整型
            .text
    __start:    la  $t0, array1 #  load base address of array into register $t0
                            #  让 $t0 = 数组首地址
            li  $t1, 5      #  $t1 = 5   ("load immediate")
            sw  $t1, ($t0)  #  first array element set to 5; indirect addressing
                            # 对于 数组第一个元素赋值 array[0] = $1 = 5
            li  $t1, 13     #   $t1 = 13
            sw  $t1, 4($t0) #  second array element set to 13
                            # 对于 数组第二个元素赋值 array[1] = $1 = 13 
                            # (该数组中每个元素地址相距长度就是自身数据类型长度，即4字节， 所以对于array+4就是array[1])
            li  $t1, -7     #   $t1 = -7
            sw  $t1, 8($t0) #  third array element set to -7
                            # 同上， array+8 = （address[array[0])+4）+ 4 = address(array[1]) + 4 = address(array[2])
            done
### 算数指令集（Arithmetic Instructions）
  * 最多3个操作数
  * 操作数只能是寄存器，绝对不允许出现地址
  * 所有指令统一是32位 = 4 * 8 bit = 4bytes = 1 word
    add     $t0,$t1,$t2     #  $t0 = $t1 + $t2; add as signed (2's complement) integers
                                添加为有符号（2 的补码）整数
            sub $t2,$t3,$t4 #  $t2 = $t3 - $t4
            addi    $t2,$t3, 5  #  $t2 = $t3 + 5;   "add immediate" (no sub immediate)
                                    “添加立即数”（没有子立即数）
            addu    $t1,$t6,$t7 #  $t1 = $t6 + $t7;   add as unsigned integers
                                    添加为无符号整数
            subu    $t1,$t6,$t7 #  $t1 = $t6 + $t7;   subtract as unsigned integers
                                    减去无符号整数
            mult    $t3,$t4     #  multiply 32-bit quantities in $t3 and $t4, and store 64-bit
                        #  result in special registers Lo and Hi:  (Hi,Lo) = $t3 * $t4
                        将$t3和$t4中的32位数量相乘，并存储 64 位                
                        运算结果在特殊寄存器 Lo 和 Hi: (Hi,Lo) = $t3 * $t4
            div $t5,$t6     #  Lo = $t5 / $t6   (integer quotient)
                        #  Hi = $t5 mod $t6   (remainder)
                            整数商存放在 lo, 余数存放在 hi
            mfhi    $t0     #  move quantity in special register Hi to $t0:   $t0 = Hi
                            不能直接获取hi或lo中的值，需要mfhi,mflo指令传值给寄存器
                        这里将特殊寄存器Hi中的数量移动到$t0：$t0=Hi
            mflo    $t1     #  move quantity in special register Lo to $t1:   $t1 = Lo
                        #  used to get at result of product or quotient
                        将特殊寄存器 Lo 中的数量移动到 $t1： $t1 = Lo
                        用于获取乘积或商的结果
            move    $t2,$t3     #  $t2 = $t3
### 控制流（Control Structures）
#### Branches
分支（if else系列），条件分支的比较内置于指令中
    b   target      #  unconditional branch to program label target
                           无条件分支到程序标号
            beq $t0,$t1,target  #  branch to target if  $t0 = $t1
                           如果 $t0 = $t1 则分支到目标
            blt $t0,$t1,target  #  branch to target if  $t0  $t1
                           如果 $t0 > $t1 则分支到目标
            bge $t0,$t1,target  #  branch to target if  $t0 >= $t1
                           如果 $t0 >= $t1 则分支到目标
            bne $t0,$t1,target  #  branch to target if  $t0 <> $t1
                           如果 $t0不等于$t1 则分支到目标
#### Jumps
跳转（while, for, goto系列）
    j   target       #  unconditional jump to program label target
                               看到就跳， 不用考虑任何条件
            jr  $t3     #  jump to address contained in $t3 ("jump register")
                              类似相对寻址，跳到该寄存器给出的地址处
#### Subroutine Calls
子程序调用
subroutine call: "jump and link" instruction——子程序调用：“跳转链接”指令
    jal sub_label   #  "jump and link"
                       “跳转链接”
  * copy program counter (return address) to register $ra (return address register)
  * 将当前的程序计数器保存到 $ra 中
  * jump to program statement at sub_label
  * 跳转到 sub_label 处的程序语句
subroutine return: "jump register" instruction——子程序返回：“跳转寄存器”指令
    jr  $ra #  "jump register"
  * jump to return address in $ra (stored by jal instruction)
  * 通过上面保存在 $ra 中的计数器返回调用前
如果说调用的子程序中有调用了其他子程序，如此往复， 则返回地址的标记就用 栈（stack） 来存储, 毕竟 $ra 只有一个
## 系统调用 与 输入/输出(主要针对SPIM模拟器）（System Calls and I/O (SPIM Simulator)）
  * 通过系统调用实现终端的输入输出，以及声明程序结束
  * 学会使用 syscall
  * 参数所使用的寄存器：$v0， $a0, $a1
  * 返回值使用： $v0
### 系统服务指令Syscall用法
在C语言中输出文本可以使用`printf`函数,但是汇编中没有printf这么一说,如果想要输出文本,需要借助`syscall`指令
如果想要输出一个数字1,那么 **`syscall`指令从$a0寄存器中取出需要输出的数据**
因此, 你在执行`syscall`指令之前需要将数据提前放入`$a0`之中:
    li $a0,1
    syscall
**同时,还需要指定输出的数据类型,数据类型的指定保存在$v0寄存器中**
    # $v0=1, syscall--->print_int
    # $v0=4, syscall--->print_string
#### **syscall指令读写对照表**
Service | Code in `$v0` | Arguments  
所需参数  
| Results返回值  
---|---|---|---  
print_int  
打印一个整型  
| `$v0 = 1` | a0 = integer to be printed  
将要打印的整型赋值给a0  
|  
print_float  
打印一个浮点  
| `$v0 = 2` | f12 = float to be printed  
将要打印的浮点赋值给f12  
|  
print_double  
打印双精度  
| `$v0 = 3` | f12 = double to be printed  
将要打印的双精度赋值给f12  
|  
print_string  
打印字符串 | `$v0 = 4` | a0 = address of string in memory  
将要打印的字符串的地址赋值给a0  
|  
read_int  
读取整形 | `$v0 = 5` |  | integer returned in v0  
将读取的整型赋值给v0  
read_float  
读取浮点  
| `$v0 = 6` |  | float returned in v0  
将读取的浮点赋值给v0  
read_double  
读取双精度  
| `$v0 = 7` |  | double returned in v0  
将读取的双精度赋值给v0  
read_string  
读取字符串  
| `$v0 = 8` | a0 = memory address of string input buffer  
将读取的字符串地址赋值给a0  
a1 = length of string buffer (n)  
将读取的字符串长度赋值给a1  
|  
sbrk  
应该同C中的sbrk()函数动态分配内存  
| `$v0 = 9` | a0 = amount  
需要分配的空间大小（单位目测是字节 bytes）  
| address in v0  
将分配好的空间首地址给v0  
exit  
退出  
| `$v0 =10` |  
  * 大概意思是要打印的字符串应该有一个终止符，估计类似C中的'\0', 在这里我们只要声明字符串为 **.asciiz** 类型即可。
  * 
  * .ascii 与 .asciiz唯一区别就是 后者会在字符串最后自动加上一个终止符， 仅此而已
  * The read_int, read_float and read_double services read an entire line of input up to and including the newline character.
  * 对于读取整型， 浮点型，双精度的数据操作， 系统会读取一整行，（也就是说以换行符为标志 '\n'）
> The read_string service has the same semantices as the UNIX library routine
> fgets.
>
> read_string 服务与 UNIX 库例程 fgets 具有相同的语义。
>
> It reads up to n-1 characters into a buffer and terminates the string with a
> null character.
>
> 它将最多 n-1 个字符读入缓冲区并以空字符终止字符串。
>
> If fewer than n-1 characters are in the current line, it reads up to and
> including the newline and terminates the string with a null character.
>
> 如果当前行中的字符少于 n-1 个，它会读取并包括换行符并以空字符终止字符串。
### 举点例子
#### 打印一个存储在寄存器 $2 里的整型
    li  $v0, 1          # load appropriate system call code into register $v0;
                                 声明需要调用的操作代码为 1 （print_int) 并赋值给 $v0
                            # code for printing integer is 1
            li  $t2, 3          #将t2的值写为3
            move    $a0, $t2        # move integer to be printed into $a0:  $a0 = $t2
                                 将要打印的整型赋值给 $a0
            syscall             # call operating system to perform operation
#### 打印一个字符串(这是完整的，其实上面栗子都可以直接替换main: 部分，都能直接运行）
    .data
    string1:    .asciiz "Print this.\n"     # declaration for string variable, 
                            # .asciiz directive makes string null terminated
                            #类似于C语言中 char* msg="hello world"