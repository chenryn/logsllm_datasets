# Why Zalando Trusts in PostgreSQL: A Developer's Perspective on the Most Advanced Open-Source Database

## Presenters
- **Henning Jacobs** - Technical Lead, Platform/Software, Zalando GmbH (With Zalando since 2010; Not a DBA or PostgreSQL Expert)
- **Valentine Gogichashvili** - Technical Lead, Platform/Database, Zalando GmbH (With Zalando since 2010; DBA and PostgreSQL Expert)

## Event
- **GOTO Berlin 2013**
- **Date**: October 18, 2013

## About Zalando
- **Operational Scope**: 14 countries
- **Revenue (2012)**: Over 1 billion €
- **Product Range**: Over 150,000 products
- **Logistics**: 3 warehouses
- **Market Position**: Europe's largest online fashion retailer

## Our ZEOS Platform
### Main Stack
- **Java → PostgreSQL**
- **Main/Production Environment**:
  - **Web Services**: CXF-WS
  - **Stored Procedure Wrapper**: SProcWrapper
  - **JDBC Driver**: JDBC
  - **Application Server**: Tomcat
  - **Schemas**: API Schema, Data Schemas
  - **Database**: Postgres
  - **Versions**: Java 7, Tomcat 7, PostgreSQL 9.0–9.3

### Different Use Cases with the Same Database
- **Main/Production CRUD/JPA**:
  - **Web Services**: CXF-WS
  - **Data Access**: JPA
  - **JDBC Driver**: JDBC
  - **Application Server**: Tomcat
  - **Schemas**: Data Schemas
  - **Database**: Postgres
  - **Versions**: Java 7, Tomcat 7, PostgreSQL 9.0–9.3

- **Scripting/Python**:
  - **Web Services**: HTTP/REST
  - **Data Access**: SQLAlchemy
  - **JDBC Driver**: psycopg2
  - **Application Server**: CherryPy
  - **Schemas**: Data Schemas
  - **Database**: Postgres
  - **Versions**: Python 2.7, PostgreSQL 9.0–9.3

## Key Metrics
- **Deployment Units (WARs)**: Over 90
- **Production Tomcat Instances**: Over 800
- **Databases**: Over 50
- **Database Master Instances**: Over 90
- **PostgreSQL Data Size**: Over 5 TB
- **Developers**: Over 200
- **DBAs**: 8

## Stored Procedures
### Example 1: Simple Registration
- **Java Interface**:
  ```java
  @SProcService
  public interface CustomerSProcService {
      @SProcCall
      int registerCustomer(@SProcParam String email, @SProcParam Gender gender);
  }
  ```

- **SQL Function**:
  ```sql
  CREATE FUNCTION register_customer(p_email text, p_gender z_data.gender)
  RETURNS int AS
  $$
  INSERT INTO z_data.customer (c_email, c_gender)
  VALUES (p_email, p_gender)
  RETURNING c_id
  $$
  LANGUAGE 'sql' SECURITY DEFINER;
  ```

### Example 2: Complex Types
- **Java Interface**:
  ```java
  @SProcCall
  List<Order> findOrders(@SProcParam String email);
  ```

- **SQL Function**:
  ```sql
  CREATE FUNCTION find_orders(p_email text,
  OUT order_id int,
  OUT order_date timestamp,
  OUT shipping_address order_address) RETURNS SETOF RECORD AS
  $$
  SELECT o_id, o_date, ROW(oa_street, oa_city, oa_country)::order_address
  FROM z_data.order
  JOIN z_data.order_address ON oa_order_id = o_id
  JOIN z_data.customer ON c_id = o_customer_id
  WHERE c_email = p_email
  $$
  LANGUAGE 'sql' SECURITY DEFINER;
  ```

### Benefits of Stored Procedures
- **Performance Improvements**
- **Easy to Modify Live Behavior**
- **Validation Close to Data**
- **Simple Transaction Management**
- **Easier Software Version Upgrades**
- **Cross-Language API Layer**
- **CRUD Operations via JPA**

### Rolling Out Database Changes
- **API Versioning**:
  - **Automatic Roll-Out During Deployment**
  - **Java Backend Selects the Correct API Version**
- **Modularization**:
  - **Shared SQL as Maven Artifacts**
  - **Feature/Library Bundles of Java + SQL**
- **Database Diffs**:
  - **SQL Scripts for Database Changes**
  - **Review Process**
  - **Tooling Support**

## Constraints
### Ensuring Data Quality
- **Example Table Creation**:
  ```sql
  CREATE TABLE z_data.host (
      h_hostname varchar(63) NOT NULL UNIQUE CHECK (h_hostname ~ '^[a-z][a-z0-9-]*$'),
      h_ip inet UNIQUE CHECK (masklen(h_ip) = 32),
      h_memory_bytes bigint CHECK (h_memory_bytes > 8*1024*1024)
  );
  COMMENT ON COLUMN z_data.host.h_memory_bytes IS 'Main memory (RAM) of host in Bytes';
  ```

- **Combining Check Constraints and Stored Procedures**:
  ```sql
  CREATE TABLE z_data.customer (
      c_email text NOT NULL UNIQUE CHECK (is_valid_email(c_email)),
      ...
  );
  ```

### MySQL Comparison
- **MySQL Manual Note**:
  - The `CHECK` clause is parsed but ignored by all storage engines.
  - Open Bug Ticket Since 2004: [MySQL Bug #3464](http://bugs.mysql.com/bug.php?id=3464)

### Custom Type Validation Using Triggers
- **Trigger Function**:
  ```sql
  CREATE FUNCTION validate_value_trigger() RETURNS trigger AS
  $$
  BEGIN
      PERFORM validate_value(NEW.cv_value, NEW.cv_type_id);
  END;
  $$
  LANGUAGE 'plpgsql';
  ```

- **Validation Function**:
  ```sql
  CREATE FUNCTION validate_value(p_value json, p_type_id int) RETURNS void AS
  $$
  import json
  import re
  # ... Python code, see next slide
  $$
  LANGUAGE 'plpythonu';
  ```

- **Python Code**:
  ```python
  class TypeValidator(object):
      @staticmethod
      def load_by_id(id):
          tdef = plpy.execute('SELECT * FROM config_type WHERE ct_id = %d' % int(id))[0]
          return _get_validator(tdef)
      
      def check(self, condition, msg):
          if not condition:
              raise ValueError('Value does not match the type "%s". Details: %s' %
                               (self.type_name, msg))
  
  class BooleanValidator(TypeValidator):
      def validate(self, value):
          self.check(type(value) is bool, 'Boolean expected')
  
  validator = TypeValidator.load_by_id(p_type_id)
  validator.validate(json.loads(p_value))
  ```

## Scaling
### Sharding
- **Horizontal Scaling**:
  - **App**
  - **SProcWrapper**
  - **Shards**:
    - **Shard 1**: Customers A-F
    - **Shard 2**: Customers G-K
    - **Shard N**: Customers Y-Z

- **SProcWrapper Support**:
  - **Sharding by ID**:
    ```java
    @SProcCall
    int registerCustomer(@SProcParam @ShardKey int customerId, @SProcParam String email, @SProcParam Gender gender);
    ```
  - **Sharding by SKU (MD5 Hash)**:
    ```java
    @SProcCall
    Article getArticle(@SProcParam @ShardKey Sku sku);
    ```
  - **Concurrent Information Collection**:
    ```java
    @SProcCall(runOnAllShards = true, parallel = true)
    List<Order> findOrders(@SProcParam String email);
    ```
  - **Auto Partitioning Collections**:
    ```java
    @SProcCall(parallel = true)
    void updateStockItems(@SProcParam @ShardKey List<StockItem> items);
    ```

- **Experience**:
  - **Scalability Without Sacrificing SQL Features**
  - **Start with a Reasonable Number of Shards (8)**
  - **Some Tooling Required**
  - **Avoid Caching If Possible and Scale Horizontally**

## Fail Safety
### Replication
- **Streaming Replication**:
  - **Every Database Has a Hot Standby and a Delayed Slave**
  - **WAL Service IP for Switching/Failover**
  - **Monitoring with Java and Custom Web Frontend**
  - **Failover is a Manual Task**

### General Remarks
- **Hardware**:
  - **HP G8 Servers**
  - **ECC RAM, RAID**
- **No Downtimes Allowed**:
  - **Major PostgreSQL Version Upgrades?**
- **Two Data Centers**
- **Dedicated 24x7 Team**
- **Maintenance**:
  - **Concurrent Index Rebuild, Table Compactor**

## Monitoring
- **Nagios/Icinga**
- **PGObserver**
- **pg_view**

### PGObserver
- **Locate Hot Spots**:
  - **Frequent Stored Procedure Calls**
  - **Long-Running Stored Procedures**
  - **I/O Patterns**
- **Tune DB Performance**
- **Creating the Right Indices Often a Silver Bullet**

### pg_view
- **Top-Like Command Line Utility**
- **DBA's Daily Tool**
- **Analyze Live Problems**
- **Monitor Data Migrations**

## NoSQL
### Relational Databases vs. NoSQL
- **Quote from Martin Fowler, GOTO Aarhus 2012**:
  - "If your project is not particularly vital and/or your team is not particularly good, use relational databases!"
- **F1: A Distributed SQL Database That Scales**:
  - **Consistency**: ACID Transactions
  - **Usability**: Full SQL Query Support
  - **Features Like Indexes and Ad Hoc Queries are Absolute Requirements**

### NoSQL Comparison
- **Aggregate-Oriented?**
  - **Schemaless**: SProcWrapper
  - **Aggregate-Oriented**: Document
  - **Column-Family**: Graph
  - **Key-Value**: Implicit Schema, HStore, JSON
- **Scaling?**
- **Authentication and Authorization?**
- **Use Cases?** ⇒ "Polyglot Persistence"

## YeSQL
### PostgreSQL at Zalando
- **Fast, Stable, and Well-Documented Code Base**
- **Performs as Well as (and Outperforms Some) NoSQL Databases While Retaining Deeper Flexibility**
- **Horizontal Scaling Can Be Easy**
- **Know Your Tools — Whatever They Are!**

## Thank You!
- **Visit Us**:
  - **SProcWrapper**: [GitHub](https://github.com/zalando/java-sproc-wrapper)
  - **PGObserver**: [GitHub](https://github.com/zalando/PGObserver)
  - **pg_view**: [GitHub](https://github.com/zalando/pg_view)
  - **Tech Blog**: [tech.zalando.com](https://tech.zalando.com)
- **Please Rate This Session!**