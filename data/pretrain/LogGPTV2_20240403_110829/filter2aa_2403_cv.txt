uint64_t f (uint64_t a) 
{ 
         return a>>7; 
}; 
24.4.1  x86 
指令清单 24.14  Optimizing MSVC 2012 /Ob1 
_a$ = 8 
; size = 8 
_f 
  PROC 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 24 章 32 位系统处理 64 位数据 
371 
  mov  
eax, DWORD PTR _a$[esp-4] 
  mov  
edx, DWORD PTR _a$[esp] 
  shrd 
eax, edx, 7 
  shr  
edx, 7 
  ret  
0 
_f  
  ENDP 
指令清单 24.15  Optimizing GCC 4.8.1 -fno-inline 
_f: 
  mov  
edx, DWORD PTR [esp+8] 
  mov  
eax, DWORD PTR [esp+4] 
  shrd 
eax, edx, 7 
  shr  
edx, 7 
  ret 
位移运算仍然分为 2 步：第一步处理低 32 位数据，第二步处理高 32 位数据。需要注意的是处理低 32
位数据的指令——SHRD 指令。这个指令不仅可以把 EAX 里的低 32 位数据右移 7 位运算，而且还能从 EDX
寄存器里读取高 32 位中的低 7 位、用它填补到低 32 位数据的高位。如此一来，就可直接使用最普通的 SHR
指令对高 32 位进行位移操作，并用零补充位移产生的空位了。 
24.4.2  ARM 
ARM 的指令集比 x86 的小，没有 SHRD 之类的指令。因此，Keil 把它拆分为位移和或运算，以进行
等效处理。 
指令清单 24.16  Optimizing Keil 6/2013 (ARM mode) 
||f|| PROC 
         LSR      r0,r0,#7 
         ORR      r0,r0,r1,LSL #25 
         LSR      r1,r1,#7 
         BX       lr 
         ENDP 
指令清单 24.17  Optimizing Keil 6/2013 (Thumb mode) 
||f|| PROC 
         LSLS     r2,r1,#25 
         LSRS     r0,r0,#7 
         ORRS     r0,r0,r2 
         LSRS     r1,r1,#7 
         BX       lr 
         ENDP 
24.4.3  MIPS 
GCC for MIPS 采用了 Keil for Thumb 的编译手段。 
指令清单 24.18  Optimizing GCC 4.4.5 (IDA) 
f: 
sll     $v0, $a0, 25 
srl     $v1, $a1, 7 
or      $v1, $v0, $v1 
jr      $ra 
srl     $v0, $a0, 7 
24.5  32 位数据转换为 64 位数据 
#include  
异步社区会员 dearfuture(15918834820) 专享 尊重版权
372 
逆向工程权威指南（上册） 
int64_t f (int32_t a) 
{ 
         return a;  
}; 
24.5.1  x86 
指令清单 24.19  Optimizing MSVC 2012 
_a$ = 8 
_f         PROC 
           mov     eax, DWORD PTR _a$[esp-4] 
           cdq 
           ret     0 
_f        ENDP 
在这种情况下，我们需要把 32 位有符号数参量扩展为 64 位有符号数。无符号数的转换过程较为直接：
高位设置为 0 就万事大吉。但是对于有符号数来说，最高的一位是符号位，不能一概而论地把高位都填零。
这里使用了 CDQ 指令进行有符号数的格式转换。它把 EAX 的值扩展为 64 位，将结果存储到 EDX:EAX
寄存器对中。换句话说，CDQ 指令获取 EAX 寄存器中的符号位（最高位），并按照符号位的不同把高 32
位都设为 0 或 1。CDQ 指令的作用和 MOVSX 指令相似。 
GCC 生成的汇编指令使用了 inlines 乘法运算。其他部分和 MSVC 的编译结果大体相同。 
24.5.2  ARM 
指令清单 24.20  Optimizing Keil 6/2013 (ARM mode) 
||f|| PROC 
          ASR     r1,r0,#31 
          BX      lr  
          ENDP 
Keil for ARM 的编译方法与 MSVC 不同：它把参数向右位移 31 位，只用了算术右移指令。MSB 是符
号位，而算术位移指令会用符号位填补位移产生的空缺位。所以在执行“ASRr1,r0,#31”指令的时候，如
果输入值是负数，那么 R1 就是 0xFFFFFFFF；否则 R1 的值会是零。在生成 64 位值的时候，高 32 位应当
存储在 R1 寄存器里。 
换句话说，这个指令用最高数权位填充 R1 寄存器以形成 64 位值的高 32 位。 
24.5.3  MIPS 
GCC for MIPS 的编译方法和 Keil 编译 ARM 程序的方法相同。 
指令清单 24.21  Optimizing GCC 4.4.5 (IDA) 
f: 
                  sra    $v0, $a0, 31 
                  jr     $ra 
                  move   $v1, $a0 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第
第 2255 章
章    SSIIM
MDD  
SIMD 意为“单指令流多数据流”，其全称是“Single Instruction, Multiple Data”。顾名思义，这类指令
可以一次处理多个数据。在 x86 的 CPU 里，SIMD 子系统和 FPU 都由专用模块实现。 
不久之后，x86 CPU 通过 MMX 指令率先整合了 SIMD 的运算功能。支持这种技术的 CPU 里都有 8 个
64 位寄存器，即 MM0～MM7。每个 MMX 寄存器都是 8 字节寄存器，可以容纳 2 个 32 位数据，或者 4
个 16 位数据。使用 SIMD 指令进行操作数的计算时，它可以把 8 个 8 位数据分为 4 组数据同时运算。 
平面图像可视为一种由二维数组构成的数据结构。在美工人员调整图像亮度的时候，图像编辑程序得
对每个像素的亮度系数进行加减法的运算。简单地说，图像的每个像素都有灰度系数，而且灰度系统是 8
位数据（1 个字节）。因而，每执行一个 SIMD 指令就能够同时调整 8 个像素的灰度（即亮度）。为了满足
这种需要，处理器厂商后来专门推出了基于 SIMD 技术的饱和度调整指令。这种饱和度调整指令甚至有越
界保护功能，能够避免亮度调整时可能会产生的因子上溢（overflow）和下溢（underflow）等问题。 
在刚刚推出 MMX 技术的时候，SIMD 借用了 FPU 的寄存器（别名）。这有利于 FPU 或 MMX 的混合
运算。有人说 Intel 这样处理是为了节约晶体管，但是其实际原因更为简单：老式操作系统并不会利用新增
的 CPU 寄存器，还是会把数据保存到 FPU 上。所以说，只有同时满足“支持 MMX 技术的 CPU”＋“老
式操作系统”＋“利用 MMX 指令集的程序”这 3 个条件，才能充分体现 SIMD 的优势。 
SSE 技术是 SIMD 的扩展技术，它把 SIMD 寄存器扩展为 128 位寄存器。支持 SSE 技术的 CPU 已经
有了单独的 SIMD 通用寄存器，不再复用 FPU 的寄存器。 
AVX 是另外一种 SIMD 技术，它的通用寄存器都是 256 位寄存器。 
现在转入正题，看看使用 SIMD 的具体应用。 
SIMD 技术当然可用于内存复制（memcpy）和内存比较（memcmp）等用途。 
此外它还可用于DES的运算。DES（Data Encryption Standard）是分组对称密码算法。它采用了 64 位
的分组和 56 位的密钥，将 64 位的输入经过一系列变换得到 64 位的输出。如果在电路的与、或、非门和导
线实现DES模块，电路规模将会是非常庞大。基于并行分组密码算法的Bitslice DES
①
25.1  矢量化 
应运而生。这种算法
可由单指令并行处理技术/SIMD实现。我们已经知道，x86 平台的unsigned int型数据占用 32 位空间。因此，
在进行unsigned int型数据的 64 位数据和 56 位密钥的演算时，可以以把 64 位中间运算结果和运算密钥都分
为 2 个 32 位数据，再进行分步的并行处理。 
在 Oracle 存储密码和 hash 的算法就是 DES。为了进行有关演示，您还可以研究一下暴力破解 Oracle 
RDBMS 密码和 hash 的小程序。这个程序利用了 bitslice DES 算法，针对 SSE2 和 AVX 指令集进行了优
化。对其稍加修改，则可用于 128 位/256 位消息模块的并行加密运算。如需查看这个程序的源代码，请参
阅 http://conus.info/utils/ops_SIMD/。 
矢量化
②
① 请参见 http://www.darkside.com.au/bitslice/。 
② Vectorization，又称“向量化”。请参见 http://en.wikipedia.org/wiki/Vectorization_(computer_science)。 
泛指将多个标量数组计算为（转换成）一个矢量数组的技术。进行这种计算时，循环体从输
入数组中取值，进行某种运算后生成最终数组。这种算法只对数组中的单个元素进行一次运算。“（并行）
矢量化技术”是矢量化处理的并行计算技术。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
374 
逆向工程权威指南（上册） 
矢量化并不是最近才出现的技术。本书的作者在 1998 年的 Cray Y-MP 超级计算机系列产品中就见到过“Cray 
Y-MP EL”的羽量级 lite 版本。有兴趣的读者可以去他们在线超级计算机博物馆去看看：http://www.cray-cyber.org/。 
举例来说，下述循环就采用了矢量化技术： 
for (i = 0; i < 1024; i++) 
{ 
     C[i] = A[i]*B[i]; 
}  
上述代码从数组 A 和数组 B 取值，把这两个数组元素进行乘法运算，并把求得的积存储在数组 C 里。 
如果输入数组中的每个元素都是 32 位 int 型数据，那么就可以把 A 的四个元素放在 128 位的 MMX 寄
存器中，再把数组 B 的四个元素放在另一个 MMX 寄存器里，然后通过 PMULLD（Multiply Packed Signed 
Dword Integers and Store Low Result）和 PMULHW（Multiply Packed Signed Integers and Store High Result）
指令进行并行乘法运算。这可以一次获得 4 个 64 位的积。 
这样一来，循环体的执行次数不再是 1024，而是 1024/4。换句话说，程序的性能将提高 4 倍。 
某些编译器具有简单的矢量化自动优化功能。Intel C++编译器就有这样的智能优化功能，详情请参见
http://www.intel.com/intelpress/sum_vmmx.htm。 
25.1.1  用于加法计算 
本节将使用下述程序作为编译对象。 
int f (int sz, int *ar1, int *ar2, int *ar3) 
{ 
         for (int i=0; i<sz; i++) 
                  ar3[i]=ar1[i]+ar2[i]; 
         return 0;  
}; 
Intel C++ 
我们通过下述指令用 win32 版本的 Intel C++编译器编译上述代码： 
icl intel.cpp /QaxSSE2 /Faintel.asm /Ox 
利用 IDA 打开上面生成的可执行文件，可看到： 
; int __cdecl f(int, int *, int *, int *) 
                   public ?f@@YAHHPAH00@Z 
?f@@YAHHPAH00@Z proc near 
var_10 = dword ptr -10h 
sz      = dword ptr  4 
ar1     = dword ptr  8 
ar2     = dword ptr  0Ch 
ar3     = dword ptr  10h 
        push     edi 
        push     esi 
        push     ebx 
        push     esi 
        mov      edx, [esp+10h+sz] 
        test     edx, edx 
        jle      loc_15B 
        mov      eax, [esp+10h+ar3] 
        cmp      edx, 6 
        jle      loc_143 
        cmp      eax, [esp+10h+ar2] 
        jbe      short loc_36 
        mov      esi, [esp+10h+ar2] 
        sub      esi, eax 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 25 章 SIMD 
375 
        lea      ecx, ds:0[edx*4] 
        neg      esi 
        cmp      ecx, esi 
        jbe      short loc_55 
loc_36: ; CODE XREF: f(int,int *,int *,int *)+21 
        cmp      eax, [esp+10h+ar2] 
        jnb      loc_143 
        mov      esi, [esp+10h+ar2] 
        sub      esi, eax 
        lea      ecx, ds:0[edx*4] 
        cmp      esi, ecx 
        jb       loc_143 
loc_55: ; CODE XREF: f(int,int *,int *,int *)+34 
        cmp      eax, [esp+10h+ar1] 
        jbe      short loc_67 
        mov      esi, [esp+10h+ar1] 
        sub      esi, eax 
        neg      esi 
        cmp      ecx, esi 
        jbe      short loc_7F 
loc_67: ; CODE XREF: f(int,int *,int *,int *)+59 
        cmp      eax, [esp+10h+ar1] 
        jnb      loc_143 
        mov      esi, [esp+10h+ar1] 
        sub      esi, eax 
        cmp      esi, ecx 
        jb       loc_143 
loc_7F: ; CODE XREF: f(int,int *,int *,int *)+65 
        mov      edi, eax 
;edi = ar3 
        and      edi, 0Fh 
; is ar3 16-byte aligned? 
        jz       short loc_9A  
; yes 
        test     edi, 3 
        jnz      loc_162 
        neg      edi 
        add      edi, 10h 
        shr      edi, 2 
loc_9A: ; CODE XREF: f(int,int *,int *,int *)+84 
        lea      ecx, [edi+4] 
        cmp      edx, ecx 
        jl       loc_162 
        mov      ecx, edx 
        sub      ecx, edi 
        and      ecx, 3 
        neg      ecx 
        add      ecx, edx 
        test     edi, edi 
        jbe      short loc_D6 
        mov      ebx, [esp+10h+ar2] 
        mov      [esp+10h+var_10], ecx 
        mov      ecx, [esp+10h+ar1] 
        xor      esi, esi 
loc_C1: ; CODE XREF: f(int,int *,int *,int *)+CD 
        mov      edx, [ecx+esi*4] 
        add      edx, [ebx+esi*4] 
        mov      [eax+esi*4], edx 
        inc      esi 
        cmp      esi, edi 
        jb       short loc_C1 
        mov      ecx, [esp+10h+var_10] 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
376 
逆向工程权威指南（上册） 
        mov      edx, [esp+10h+sz] 
loc_D6: ; CODE XREF: f(int,int *,int *,int *)+B2 
        mov      esi, [esp+10h+ar2] 
        lea      esi, [esi+edi*4] ; is ar2+i*4 16-byte aligned? 
        test     esi, 0Fh 
        jz       short loc_109   ; yes! 
        mov      ebx, [esp+10h+ar1] 
        mov      esi, [esp+10h+ar2] 
loc_ED: ; CODE XREF: f(int,int *,int *,int *)+105 
        movdqu   xmm1, xmmword ptr [ebx+edi*4] 
        movdqu   xmm0, xmmword ptr [esi+edi*4] ; ar2+i*4 is not 16-byte aligned, so load it to XMM0 
        paddd    xmm1, xmm0 
        movdqa   xmmword ptr [eax+edi*4], xmm1 add edi, 4 
        cmp       edi, ecx 
        jb        short loc_ED 
        jmp       short loc_127 
loc_109: ; CODE XREF: f(int,int *,int *,int *)+E3 
        mov       ebx, [esp+10h+ar1] 
        mov       esi, [esp+10h+ar2] 
loc_111: ; CODE XREF: f(int,int *,int *,int *)+125 
        movdqu   xmm0, xmmword ptr [ebx+edi*4] 
        paddd    xmm0, xmmword ptr [esi+edi*4] 
        movdqa   xmmword ptr [eax+edi*4], xmm0 
        add      edi, 4 
        cmp      edi, ecx 
        jb       short loc_111 
loc_127: ; CODE XREF: f(int,int *,int *,int *)+107 
           ; f(int,int *,int *,int *)+164 
        cmp      ecx, edx 
        jnb      short loc_15B 
        mov      esi, [esp+10h+ar1] 
        mov      edi, [esp+10h+ar2] 
loc_133: ; CODE XREF: f(int,int *,int *,int *)+13F 
        mov      ebx, [esi+ecx*4] 
        add      ebx, [edi+ecx*4] 
        mov      [eax+ecx*4], ebx 
        inc      ecx 
        cmp      ecx, edx 
        jb       short loc_133 
        jmp      short loc_15B 
loc_143: ; CODE XREF: f(int,int *,int *,int *)+17 
           ; f(int,int *,int *,int *)+3A ... 
        mov      esi, [esp+10h+ar1] 
        mov      edi, [esp+10h+ar2] 
        xor      ecx, ecx 
loc_14D: ; CODE XREF: f(int,int *,int *,int *)+159 
        mov      ebx, [esi+ecx*4] 