I had already moved to Azure when writing for the sixth edition got underway, and by 
the time we were ready for the seventh edition, I no longer had time to contribute to the 
book. Dave Solomon had retired, and the task of updating the book became even more 
challenging when Windows went from shipping every few years with a major release and 
version number to just being called Windows 10 and releasing constantly with feature 
and functionality upgrades. Pavel Yosifovitch stepped in to help Alex with Part 1, but he 
too became busy with other projects and couldn’t contribute to Part 2. Alex was also 
busy with his startup CrowdStrike, so we were unsure if there would even be a Part 2.
xxii 
Foreword
Fortunately, Andrea came to the rescue. He and Alex have updated a broad swath of 
the system in Part 2, including the startup and shutdown process, Registry subsystem, 
and UWP. Not just content to provide a refresh, they’ve also added three new chapters 
the Windows Internals book series being the most technically deep and accurate word on 
the inner workings on Windows, one of the most important software releases in history, 
is secure, and I’m proud to have my name still listed on the byline. 
A memorable moment in my career came when we asked David Cutler to write the 
foreword for Inside Windows 2000. Dave Solomon and I had visited Microsoft a few times 
to meet with the Windows engineers and had met David on a few of the trips. However, 
we had no idea if he’d agree, so were thrilled when he did. It’s a bit surreal to now be 
on the other side, in a similar position to his when we asked David, and I’m honored to 
be given the opportunity. I hope the endorsement my foreword represents gives you 
Cutler’s did for buyers of Inside Windows 2000. 
Mark Russinovich
Microsoft
March 2021
Bellevue, Washington
xxiii
Introduction
W
indows Internals, Seventh Edition, Part 2 is intended for advanced computer 
professionals (developers, security researchers, and system administrators) who 
want to understand how the core components of the Microsoft Windows 10 (up to and 
including the May 2021 Update, a.k.a. 21H1) and Windows Server (from Server 2016 up 
to Server 2022) operating systems work internally, including many components that are 
shared with Windows 11X and the Xbox Operating System. 
With this knowledge, developers can better comprehend the rationale behind design 
decisions to create more powerful, scalable, and secure software. They will also improve 
their skills at debugging complex problems rooted deep in the heart of the system, all 
System administrators can leverage this information as well because understand-
ing how the operating system works “under the hood” facilitates an understanding of 
the expected performance behavior of the system. This makes troubleshooting system 
problems much easier when things go wrong and empowers the triage of critical issues 
from the mundane.
-
ing system can misbehave and be misused, causing undesirable behavior, while also un-
derstanding the mitigations and security features offered by modern Windows systems 
against such scenarios. Forensic experts can learn which data structures and mechanisms 
Whoever the reader might be, after reading this book, they will have a better under-
standing of how Windows works and why it behaves the way it does.
History of the book
This is the seventh edition of a book that was originally called Inside Windows NT 
(Microsoft Press, 1992), written by Helen Custer (prior to the initial release of Microsoft 
Windows NT 3.1). Inside Windows NT
NT and provided key insights into the architecture and design of the system. Inside 
Windows NT, Second Edition (Microsoft Press, 1998) was written by David Solomon. It 
updated the original book to cover Windows NT 4.0 and had a greatly increased level of 
technical depth.
xxiv 
Introduction
Inside Windows 2000, Third Edition (Microsoft Press, 2000) was authored by David 
Solomon and Mark Russinovich. It added many new topics, such as startup and shutdown, 
kernel changes in Windows 2000, such as the Windows Driver Model (WDM), Plug and 
Play, power management, Windows Management Instrumentation (WMI), encryption, the 
job object, and Terminal Services. Windows Internals, Fourth Edition (Microsoft Press, 2004) 
was the Windows XP and Windows Server 2003 update and added more content focused 
on helping IT professionals make use of their knowledge of Windows internals, such as us-
ing key tools from Windows SysInternals and analyzing crash dumps.
Windows Internals, Fifth Edition (Microsoft Press, 2009) was the update for Windows 
Vista and Windows Server 2008. It saw Mark Russinovich move on to a full-time job 
at Microsoft (where he is now the Azure CTO) and the addition of a new co-author, 
Alex Ionescu. New content included the image loader, user-mode debugging facil-
ity, Advanced Local Procedure Call (ALPC), and Hyper-V. The next release, Windows 
Internals, Sixth Edition (Microsoft Press, 2012), was fully updated to address the many 
kernel changes in Windows 7 and Windows Server 2008 R2, with many new hands-on 
Seventh edition changes
of allowing the authors to publish parts of the book more quickly than others (March 
2012 for Part 1, and September 2012 for Part 2). At the time, however, this split was purely 
based on page counts, with the same overall chapters returning in the same order as 
prior editions.
brought together the Windows 8 and Windows Phone 8 kernels, and eventually incorpo-
rated the modern application environment in Windows 8.1, Windows RT, and Windows 
Phone 8.1. The convergence story was complete with Windows 10, which runs on desk-
tops, laptops, cell phones, servers, Xbox One, HoloLens, and various Internet of Things 
With the seventh edition (Microsoft Press, 2017), the authors did just that, joined for 
insider” and overall book manager. Working alongside Alex Ionescu, who like Mark, 
had moved on to his own full-time job at CrowdStrike (where is now the VP of endpoint 
Introduction
xxv
engineering), Pavel made the decision to refactor the book’s chapters so that the two 
parts could be more meaningfully cohesive manuscripts instead of forcing readers to 
wait for Part 2 to understand concepts introduced in Part 1. This allowed Part 1 to stand 
fully on its own, introducing readers to the key concepts of Windows 10’s system archi-
tecture, process management, thread scheduling, memory management, I/O handling, 
plus user, data, and platform security. Part 1 covered aspects of Windows 10 up to and 
including Version 1703, the May 2017 Update, as well as Windows Server 2016.
Changes in Part 2
With Alex Ionescu and Mark Russinovich consumed by their full-time jobs, and Pavel 
champion. The authors are grateful to Andrea Allievi for having eventually stepped up 
to carry on the mantle and complete the series. Working with advice and guidance from 
book around and brought his own vision to the series. 
Realizing that chapters on topics such as networking and crash dump analysis were 
beyond today’s readers’ interests, Andrea instead added exciting new content around 
Hyper-V, which is now a key part of the Windows platform strategy, both on Azure and 
on client systems. This complements fully rewritten chapters on the boot process, on 
new storage technologies such as ReFS and DAX, and expansive updates on both system 
and management mechanisms, alongside the usual hands-on experiments, which have 
been fully updated to take advantage of new debugger technologies and tooling.
The long delay between Parts 1 and 2 made it possible to make sure the book was 
fully updated to cover the latest public build of Windows 10, Version 2103 (May 2021 
Update / 21H1), including Windows Server 2019 and 2022, such that readers would not be 
“behind” after such a long gap long gap. As Windows 11 builds upon the foundation of 
the same operating system kernel, readers will be adequately prepared for this upcom-
ing version as well.
Hands-on experiments
Even without access to the Windows source code, you can glean much about Windows 
internals from the kernel debugger, tools from SysInternals, and the tools developed 
aspect of the internal behavior of Windows, the steps for trying the tool yourself are 
listed in special “EXPERIMENT” sections. These appear throughout the book, and we 
xxvi 
Introduction
encourage you to try them as you’re reading. Seeing visible proof of how Windows works 
internally will make much more of an impression on you than just reading about it will.
Topics not covered
Windows is a large and complex operating system. This book doesn’t cover everything 
relevant to Windows internals but instead focuses on the base system components. For 
example, this book doesn’t describe COM+, the Windows distributed object-oriented pro-
gramming infrastructure, or the Microsoft .NET Framework, the foundation of managed 
code applications. Because this is an “internals” book and not a user, programming, or sys-
A warning and a caveat
Because this book describes undocumented behavior of the internal architecture and 
the operation of the Windows operating system (such as internal kernel structures and 
functions), this content is subject to change between releases. By “subject to change,” we 
don’t necessarily mean that details described in this book will change between releases, 
but you can’t count on them not changing. Any software that uses these undocumented 
interfaces, or insider knowledge about the operating system, might not work on future 
releases of Windows. Even worse, software that runs in kernel mode (such as device 
drivers) and uses these undocumented interfaces might experience a system crash when 
running on a newer release of Windows, resulting in potential loss of data to users of 
such software.
In short, you should never use any internal Windows functionality, registry key, 
behavior, API, or other undocumented detail mentioned in this book during the devel-
opment of any kind of software designed for end-user systems or for any other purpose 
other than research and documentation. Always check with the Microsoft Software 
Assumptions about you
The book assumes the reader is comfortable with working on Windows at a power-user 
level and has a basic understanding of operating system and hardware concepts, such as 
CPU registers, memory, processes, and threads. Basic understanding of functions, point-
Introduction
xxvii
Organization of this book
The book is divided into two parts (as was the sixth edition), the second of which you’re 
holding in your hands.
I 
Chapter 8, “System mechanisms,” provides information about the important
internal mechanisms that the operating system uses to provide key services to
device drivers and applications, such as ALPC, the Object Manager, and synchro-
nization routines. It also includes details about the hardware architecture that
Windows runs on, including trap processing, segmentation, and side channel
vulnerabilities, as well as the mitigations required to address them.
I 
Chapter 9, “Virtualization technologies,” describes how the Windows OS uses the
virtualization technologies exposed by modern processors to allow users to cre-
ate and use multiple virtual machines on the same system. Virtualization is also
extensively used by Windows to provide a new level of security. Thus, the Secure
Kernel and Isolated User Mode are extensively discussed in this chapter.
I 
Chapter 10, “Management, diagnostics, and tracing,” details the fundamental
-
tion, and diagnostics. In particular, the Windows registry, Windows services, WMI,
and Task Scheduling are introduced along with diagnostics services like Event
Tracing for Windows (ETW) and DTrace.
I 
-
ports, with particular detail on NTFS and ReFS.
I 
when the system starts and shuts down, and the operating system components
brought on by UEFI, such as Secure Boot, Measured Boot, and Secure Launch.
Conventions
The following conventions are used in this book:
I 
Boldface type is used to indicate text that you type as well as interface items that
you are instructed to click or buttons that you are instructed to press.
xxviii 
Introduction
I 
Italic type is used to indicate new terms.
I 
Code elements appear in italics or in a monospaced font, depending on context.
I 
-
talized—for example, the Save As dialog box.
I 
Keyboard shortcuts are indicated by a plus sign (+) separating the key names. For
example, Ctrl+Alt+Delete means that you press the Ctrl, Alt, and Delete keys at
the same time.
About the companion content
We have included companion content to enrich your learning experience. You can down-
load the companion content for this book from the following page:
MicrosoftPressStore.com/WindowsInternals7ePart2/downloads
Acknowledgments
The book contains complex technical details, as well as their reasoning, which are often 
hard to describe and understand from an outsider’s perspective. Throughout its history, 
to provide access to the vast swath of knowledge that exists within the company and 
the rich development history behind the Windows operating system. For this Seventh 
Edition, Part 2, the authors are grateful to Andrea Allievi for having joined as a main 
author and having helped spearhead most of the book and its updated content.
Apart from Andrea, this book wouldn’t contain the depth of technical detail or the 
level of accuracy it has without the review, input, and support of key members of the 
Windows development team, other experts at Microsoft, and other trusted colleagues, 
friends, and experts in their own domains. 
It is worth noting that the newly written Chapter 9, “Virtualization technologies” 
wouldn’t have been so complete and detailed without the help of Alexander Grest and 
Jon Lange, who are world-class subject experts and deserve a special thanks, in particu-
lar for the days that they spent helping Andrea understand the inner details of the most 
obscure features of the hypervisor and the Secure Kernel. 
Introduction
xxix
Alex would like to particularly bring special thanks to Arun Kishan, Mehmet Iyigun, 
David Weston, and Andy Luhrs, who continue to be advocates for the book and Alex’s 
inside access to people and information to increase the accuracy and completeness 
of the book.
Furthermore, we want to thank the following people, who provided technical 
review and/or input to the book or were simply a source of support and help to the 
authors: Saar Amar, Craig Barkhouse, Michelle Bergeron, Joe Bialek, Kevin Broas, Omar 
Carey, Neal Christiansen, Chris Fernald, Stephen Finnigan, Elia Florio, James Forshaw, 
Andrew Harper, Ben Hillis, Howard Kapustein, Saruhan Karademir, Chris Kleynhans, 
John Lambert, Attilio Mainetti, Bill Messmer, Matt Miller, Jake Oshins, Simon Pope, 
Matthew Woolman, and Adam Zabrocki. 
We continue to thank Ilfak Guilfanov of Hex-Rays (http://www.hex-rays.com) for 
the IDA Pro Advanced and Hex-Rays licenses granted to Alex Ionescu, including most 
recently a lifetime license, which is an invaluable tool for speeding up the reverse engi-
neering of the Windows kernel. The Hex-Rays team continues to support Alex’s research 
and builds relevant new decompiler features in every release, which make writing a book 
such as this possible without source code access.
Finally, the authors would like to thank the great staff at Microsoft Press (Pearson) 
who have been behind turning this book into a reality. Loretta Yates, Charvi Arora, and 
their support staff all deserve a special mention for their unlimited patience from turning 
a contract signed in 2018 into an actual book two and a half years later.
Errata and book support
We’ve made every effort to ensure the accuracy of this book and its companion content. 
You can access updates to this book—in the form of a list of submitted errata and their 
related corrections at
MicrosoftPressStore.com/WindowsInternals7ePart2/errata 
If you discover an error that is not already listed, please submit it to us at the 
same page.
For additional book support and information, please visit 
http://www.MicrosoftPressStore.com/Support.
xxx 
Introduction
Please note that product support for Microsoft software and hardware is not offered 
through the previous addresses. For help with Microsoft software or hardware, go to 
http://support.microsoft.com.
Stay in touch
Let’s keep the conversation going! We’re on Twitter: @MicrosoftPress.
1
C H A P T E R  8
System mechanisms
T
he Windows operating system provides several base mechanisms that kernel-mode components 
such as the executive, the kernel, and device drivers use. This chapter explains the following system 
mechanisms and describes how they are used:
I 
Processor execution model, including ring levels, segmentation, task states, trap dispatching,
including interrupts, deferred procedure calls (DPCs), asynchronous procedure calls (APCs),
timers, system worker threads, exception dispatching, and system service dispatching
I 
Speculative execution barriers and other software-side channel mitigations
I 
The executive Object Manager
I 
Synchronization, including spinlocks, kernel dispatcher objects, wait dispatching, and user-
and slim reader-writer (SRW) locks
I 
Advanced Local Procedure Call (ALPC) subsystem
I 
I 
WoW64
I 
User-mode debugging framework
Additionally, this chapter also includes detailed information on the Universal Windows Platform 
(UWP) and the set of user-mode and kernel-mode services that power it, such as the following:
I 
Packaged Applications and the AppX Deployment Service
I 
Centennial Applications and the Windows Desktop Bridge
I 
Process State Management (PSM) and the Process Lifetime Manager (PLM)
I 
Host Activity Moderator (HAM) and Background Activity Moderator (BAM)
2 
CHAPTER 8 System mechanisms
Processor execution model
This section takes a deep look at the internal mechanics of Intel i386–based processor architecture and 
its extension, the AMD64-based architecture used on modern systems. Although the two respective 
We discuss concepts such as segmentation, tasks, and ring levels, which are critical mechanisms, and 
we discuss the concept of traps, interrupts, and system calls.