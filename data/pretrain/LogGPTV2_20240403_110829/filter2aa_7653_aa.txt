# 认证
> 注 : 笔记中拓扑图 drawio 与 xmind 源文件在其图片目录下
---
---
## 大纲
* **[本地认证](#本地认证)**
    * [LM-Hash](#lm-hash)
    * [NTLM-Hash](#ntlm-hash)
    * [本地认证流程](#本地认证流程)
    * [DPAPI](#dpapi)
* **[网络认证](#网络认证)**
    * [LM](#lm)
    * [NTLM](#ntlm)
        * [Challenge/Response](#challengeresponse)
        * [NTLMv2](#ntlmv2)
        * [Net-NTLM hash](#net-ntlm-hash)
        * [域环境中NTLM认证方式](#域环境中ntlm认证方式)
        * [SSP & SSPI](#ssp--sspi)
        * [Signing](#signing)
        * [Negotiation](#negotiation)
        * [MIC](#mic)
    * [EPA](#epa)
    * [LmCompatibilityLevel](#lmcompatibilitylevel)
* **[域认证](#域认证)**
    * [MSCACHE](#mscache)
    * [Kerberos](#kerberos)
        * [简要概括认证过程](#简要概括认证过程)
        * [详细概括认证过程](#详细概括认证过程)
    * [PAC](#pac)
    * [SPN](#spn)
    * [委派](#委派)
        * [约束委派](#约束委派)
        * [基于资源的约束委派](#基于资源的约束委派)
---
## 本地认证
在 Windows 系统中本机的用户密码以 hash 形式存储在 `%SystemRoot%\system32\config\sam` 数据库文件中。sam 的简称是Security Account Manager，安全账户管理器。被保存的 hash 分为 `LM Hash` 和 `NTLM hash`；微软在 Windows NT 4.0 中引入 SYSKEY 对 `SAM` 文件加密。而域内用户的密码 Hash 是存在域控的 `NTDS.DIT` 文件里面。
这个 SAM 文件中保留了计算机本地所有用户的凭证信息，可以理解为是一个数据库。登录系统的时候,系统会自动地读取 `SAM` 文件中的密码与键入的密码进行比对，如果相同，则认证成功。
操作系统启动之后，`SAM` 文件将同时被锁定。这意味着操作系统运行之时，用户无法打开或复制 `SAM` 文件。除了锁定，整个 `SAM` 文件还经过加密，且不可见。
**哈希（hash）**
Windows 本身不保存明文密码，只保留密码的 Hash。为了保证存储的不是明文，从而采用 Hash，但是密码 Hash 也需要特定的生成算法以及表现形式。
Hash 就是使用一种加密函数进行计算后的结果。这个加密函数对一个任意长度的字符串数据进行一次数学加密函数运算，然后返回一个固定长度的字符串。现在已经有了更新的 NTLMv2 以及 Kerberos 验证体系。Windows 加密过的密码口令，我们称之为 hash，Windows 的系统密码 hash 默认情况下一般由两部分组成：第一部分是 LM-hash，第二部分是 NTLM-hash。
---
### LM-Hash
LAN Manager（LM）哈希是 Windows 系统所用的第一种密码哈希算法，是一种较古老的 Hash，在 LAN Manager 协议中使用，非常容易通过暴力破解获取明文凭据。它只有唯一一个版本且一直用到了 NT LAN Manager（NTLM）哈希的出现，在 Windows Vista/Windows 7/Windows Server 2008 以及后面的系统中，LM 哈希算法是默认关闭的，LM 算法是在 DES 基础上实现的，不区分字母大小写，由 IBM 设计。
**生成原理**
1. 用户的密码转换为大写，密码转换为16进制字符串，不足14字节将会用0来再后面补全。
2. 密码的16进制字符串被分成两个 7byte 部分。每部分转换成比特流，并且长度位 56bit，长度不足用0在左边补齐长度
3. 再分 7bit 为一组,每组末尾加 0，再组成一组
4. 上步骤得到的二组，分别作为 key 为 `KGS!@#$%` 进行 DES 加密。
4. 将加密后的两组拼接在一起，得到最终 LM HASH 值。
**风险**
LM 加密算法存在一些固有的漏洞
1. 首先，密码长度最大只能为14个字符
2. 密码不区分大小写。在生成哈希值之前，所有密码都将转换为大写
3. 查看我们的加密过程，就可以看到使用的是分组的 DES，如果密码强度是小于 7 位，那么第二个分组加密后的结果肯定是 aad3b435b51404ee，同理,如果我们看到 lm hash 的结尾是 aad3b435b51404ee，就可以判断密码强度少于7位
4. 一个14个字符的密码分成7 + 7个字符，并且分别为这两个半部分计算哈希值。这种计算哈希值的方式使破解难度成倍增加，因为攻击者需要将7个字符（而不是14个字符）强制暴力破解。这使得14个字符的密码的有效强度等于，或者是7个字符的密码的两倍，该密码的复杂度明显低于 9514 14个字符的密码的理论强度。
5. Des 密码强度不高
---
### NTLM-Hash
**NTLM Hash**
为了解决 LM 加密和身份验证方案中固有的安全弱点，Microsoft 于 1993 年在 Windows NT 3.1 中引入了 NTLM 协议。
NT LAN Manager（NTLM）哈希是 Windows 系统认可的另一种算法，用于替代古老的 LM-Hash，一般指 Windows 系统下 Security Account Manager（SAM）中保存的用户密码 hash，在 Windows Vista/Windows 7/Windows Server 2008 以及后面的系统中，NTLM 哈希算法是默认启用的。
下面是各个版本对 LM 和 NTLM 的支持。
|       | 2000  | XP | 2003 | Vista | Win7 | 2008 | Win8 | 2012 |
| -     | -     | -  |  -   |   -   |  -   |  -   |  -   |  -   |
| LM    | ✔     | ✔  |  ✔  |       |      |      |      |      |
| NTLM  | 🔺    | 🔺 | 🔺  |   ✔   |  ✔  |   ✔  |   ✔  |   ✔  |
---
| ✔ | 系统默认使用的加密方式         |
| -  | -                          |
| 🔺 | 当密码超过14位时使用的加密方式 |
当用户登录时，将用户输入的明文密码加密成 `NTLM Hash`，与 `SAM` 数据库文件中的 `NTLM Hash` 进行比较。
在渗透测试中，通常可从 Windows 系统中的 `SAM` 文件和域控的 `NTDS.dit` 文件中获得所有用户的 hash，通过 Mimikatz 读取 `lsass.exe` 进程能获得已登录用户的 `NTLM hash`。
**生成原理**
1. 先将用户密码转换为十六进制格式。
2. 将十六进制格式的密码进行 Unicode 编码。
3. 使用 MD4 摘要算法对 Unicode 编码数据进行 Hash 计算
**快速生成**
```bash
python2 -c 'import hashlib,binascii; print binascii.hexlify(hashlib.new("md4", "P@ssw0rd".encode("utf-16le")).digest())'
```
**NTLM Hash 与 NTLM 的关系**
在 Windows 中，密码 Hash 目前称之为 NTLM Hash，其中 NTLM 全称是：“NT LAN Manager”。
而 NTLM 是一种网络认证协议，与 NTLM Hash 的关系就是：NTLM 网络认证协议是以 NTLM Hash 作为根本凭证进行认证的协议。也就是说，NTLM 与 NTLM Hash 相互对应。
在本地认证的过程中，其实就是将用户输入的密码转换为 NTLM Hash 与 SAM 中的 NTLM Hash 进行比较。
---
### 本地认证流程
本地登录时，用户的密码存储在 `%SystemRoot%\system32\config\SAM` 这个文件里。当用户输入密码进行本地认证的过程中，所有的操作都是在本地进行的。他其实就是将用户输入的密码转换为 NTLM Hash，然后与 SAM 中的 NTLM Hash 进行比较。当用户注销、重启、锁屏后，操作系统会让 winlogon 显示登录界面，也就是输入框。当 winlogon.exe 接收输入后，将密码交给 lsass 进程，这个进程中会存一份明文密码，将明文密码加密成 NTLM Hash，对 SAM 数据库比较认证。
- Windows Logon Process(即 winlogon.exe)，是Windows NT 用户登录程序，用于管理用户登录和退出。
- LSASS 用于微软 Windows 系统的安全机制。用于本地安全和登录策略。
**参考如下**
```bash
winlogon.exe -> 接收用户输入 -> lsass.exe -> 认证
```
1. 当刚开机、注销等操作后，winlogon.exe 进程会显示一个登录界面要求输入用户名和密码。
2. 输入用户名和密码后，会被 winlogon.exe 获取，然后将其发送给 lsass.exe 进程。