---
author: Gustavo Duarte
category: 技术
comments_data: []
count:
  commentnum: 0
  favtimes: 2
  likes: 0
  sharetimes: 0
  viewnum: 8143
date: '2018-05-11 00:23:00'
editorchoice: false
excerpt: 我其实不想将它分解开给你看，用户应用程序其实就是一个可怜的瓮中大脑。
fromurl: https://manybutfinite.com/post/system-calls/
id: 9628
islctt: true
largepic: /data/attachment/album/201805/11/102324n76s77z4tsc737lm.jpg
permalink: /article-9628-1.html
pic: /data/attachment/album/201805/11/102324n76s77z4tsc737lm.jpg.thumb.jpg
related: []
reviewer: ''
selector: ''
summary: 我其实不想将它分解开给你看，用户应用程序其实就是一个可怜的瓮中大脑。
tags:
- 系统调用
thumb: false
title: 系统调用，让世界转起来！
titlepic: true
translator: qhwdw
updated: '2018-05-11 00:23:00'
---
![](/data/attachment/album/201805/11/102324n76s77z4tsc737lm.jpg)
我其实不想将它分解开给你看，用户应用程序其实就是一个可怜的 瓮中大脑   brain in a vat ：
![](/data/attachment/album/201805/11/002311xjk81y2vlj4v1vvj.png)
它与外部世界的*每个*交流都要在内核的帮助下通过**系统调用**才能完成。一个应用程序要想保存一个文件、写到终端、或者打开一个 TCP 连接，内核都要参与。应用程序是被内核高度怀疑的：认为它到处充斥着 bug，甚至是个充满邪恶想法的脑子。
这些系统调用是从一个应用程序到内核的函数调用。出于安全考虑，它们使用了特定的机制，实际上你只是调用了内核的 API。“ 系统调用   system call ”这个术语指的是调用由内核提供的特定功能（比如，系统调用 `open()`）或者是调用途径。你也可以简称为：**syscall**。
这篇文章讲解系统调用，系统调用与调用一个库有何区别，以及在操作系统/应用程序接口上的刺探工具。如果彻底了解了应用程序借助操作系统发生的哪些事情，那么就可以将一个不可能解决的问题转变成一个快速而有趣的难题。
那么，下图是一个运行着的应用程序，一个用户进程：
![](/data/attachment/album/201805/11/002312eyc214ts8yc2ic88.png)
它有一个私有的 [虚拟地址空间](https://manybutfinite.com/post/anatomy-of-a-program-in-memory)—— 它自己的内存沙箱。整个系统都在它的地址空间中（即上面比喻的那个“瓮”），程序的二进制文件加上它所使用的库全部都 [被映射到内存中](https://manybutfinite.com/post/page-cache-the-affair-between-memory-and-files/)。内核自身也映射为地址空间的一部分。
下面是我们程序 `pid` 的代码，它通过 [getpid(2)](http://linux.die.net/man/2/getpid) 直接获取了其进程 id：
```
#include 
#include 
#include 
int main()
{
    pid_t p = getpid();
    printf("%d\n", p);
}
```
*pid.c [download](https://manybutfinite.com/code/x86-os/pid.c)*
在 Linux 中，一个进程并不是一出生就知道它的 PID。要想知道它的 PID，它必须去询问内核，因此，这个询问请求也是一个系统调用：
![](/data/attachment/album/201805/11/002313rlllbb8od77b9nmx.png)
它的第一步是开始于调用 C 库的 [getpid()](https://sourceware.org/git/?p=glibc.git;a=blob;f=sysdeps/unix/sysv/linux/getpid.c;h=937b1d4e113b1cff4a5c698f83d662e130d596af;hb=4c6da7da9fb1f0f94e668e6d2966a4f50a7f0d85#l49)，它是系统调用的一个*封装*。当你调用一些函数时，比如，`open(2)`、`read(2)` 之类，你是在调用这些封装。其实，对于大多数编程语言在这一块的原生方法，最终都是在 libc 中完成的。
封装为这些基本的操作系统 API 提供了方便，这样可以保持内核的简洁。*所有的内核代码*运行在特权模式下，有 bug 的内核代码行将会产生致命的后果。能在用户模式下做的任何事情都应该在用户模式中完成。由库来提供友好的方法和想要的参数处理，像 `printf(3)` 这样。
我们拿一个 web API 进行比较，内核的封装方式可以类比为构建一个尽可能简单的 HTTP 接口去提供服务，然后提供特定语言的库及辅助方法。或者也可能有一些缓存，这就是 libc 的 `getpid()` 所做的：首次调用时，它真实地去执行了一个系统调用，然后，它缓存了 PID，这样就可以避免后续调用时的系统调用开销。
一旦封装完成，它做的第一件事就是进入了内核   超空间    hyperspace 。这种转换机制因处理器架构设计不同而不同。在 Intel 处理器中，参数和 [系统调用号](https://github.com/torvalds/linux/blob/v3.17/arch/x86/syscalls/syscall_64.tbl#L48) 是 [加载到寄存器中的](https://sourceware.org/git/?p=glibc.git;a=blob;f=sysdeps/unix/sysv/linux/x86_64/sysdep.h;h=4a619dafebd180426bf32ab6b6cb0e5e560b718a;hb=4c6da7da9fb1f0f94e668e6d2966a4f50a7f0d85#l139)，然后，运行一个 [指令](https://sourceware.org/git/?p=glibc.git;a=blob;f=sysdeps/unix/sysv/linux/x86_64/sysdep.h;h=4a619dafebd180426bf32ab6b6cb0e5e560b718a;hb=4c6da7da9fb1f0f94e668e6d2966a4f50a7f0d85#l179) 将 CPU 置于 [特权模式](https://manybutfinite.com/post/cpu-rings-privilege-and-protection) 中，并立即将控制权转移到内核中的全局系统调用 [入口](https://github.com/torvalds/linux/blob/v3.17/arch/x86/kernel/entry_64.S#L354-L386)。如果你对这些细节感兴趣，David Drysdale 在 LWN 上有两篇非常好的文章（[其一](http://lwn.net/Articles/604287/)，[其二](http://lwn.net/Articles/604515/)）。
内核然后使用这个系统调用号作为进入 [`sys_call_table`](https://github.com/torvalds/linux/blob/v3.17/arch/x86/kernel/syscall_64.c#L25) 的一个 [索引](https://github.com/torvalds/linux/blob/v3.17/arch/x86/kernel/entry_64.S#L422)，它是一个函数指针到每个系统调用实现的数组。在这里，调用了 [`sys_getpid`](https://github.com/torvalds/linux/blob/v3.17/kernel/sys.c#L800-L809)：
![](/data/attachment/album/201805/11/002314hgssggz6rggafza2.png)
在 Linux 中，系统调用大多数都实现为架构无关的 C 函数，有时候这样做 [很琐碎](https://github.com/torvalds/linux/blob/v3.17/kernel/sys.c#L800-L859)，但是通过内核优秀的设计，系统调用机制被严格隔离。它们是工作在一般数据结构中的普通代码。嗯，除了*完全偏执*的参数校验以外。
一旦它们的工作完成，它们就会正常*返回*，然后，架构特定的代码会接手转回到用户模式，封装将在那里继续做一些后续处理工作。在我们的例子中，[getpid(2)](http://linux.die.net/man/2/getpid) 现在缓存了由内核返回的 PID。如果内核返回了一个错误，另外的封装可以去设置全局 `errno` 变量。这些细节可以让你知道 GNU 是怎么处理的。
如果你想要原生的调用，glibc 提供了 [syscall(2)](http://linux.die.net/man/2/syscall) 函数，它可以不通过封装来产生一个系统调用。你也可以通过它来做一个你自己的封装。这对一个 C 库来说，既不神奇，也不特殊。
这种系统调用的设计影响是很深远的。我们从一个非常有用的 [strace(1)](http://linux.die.net/man/1/strace) 开始，这个工具可以用来监视 Linux 进程的系统调用（在 Mac 上，参见 [dtruss(1m)](https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man1/dtruss.1m.html) 和神奇的 [dtrace](http://dtrace.org/blogs/brendan/2011/10/10/top-10-dtrace-scripts-for-mac-os-x/)；在 Windows 中，参见 [sysinternals](http://technet.microsoft.com/en-us/sysinternals/bb842062.aspx)）。这是对 `pid` 程序的跟踪：