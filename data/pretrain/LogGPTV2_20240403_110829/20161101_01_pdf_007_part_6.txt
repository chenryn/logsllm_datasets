 Buffers: shared hit=3
 Total runtime: 0.098 ms
 (11 rows)
EXPLAIN 成本计算举例
 digoal=# explain (analyze,verbose,buffers,timing,costs) select * from n2 limit 2;
 QUERY PLAN
 -----------------------------------------------------------------------------------------------------------------
 Limit (cost=0.00..0.02 rows=2 width=9) (actual time=0.033..0.034 rows=2 loops=1) -- 使用限制后, 总成本低于子节点的成本. 只算十万分之2
 Output: id, info
 Buffers: shared hit=1
 -> Seq Scan on public.n2 (cost=0.00..1135.00 rows=100000 width=9) (actual time=0.031..0.031 rows=2 loops=1)
 Output: id, info
 Buffers: shared hit=1
 Total runtime: 0.059 ms
 (7 rows)
 digoal=# select 1135.00/50000;
 ?column?
 ------------------------
 0.02270000000
EXPLAIN成本因子校准
 http://blog.163.com/digoal@126/blog/static/163877040201310255717379/
 不同的硬件环境CPU性能, IO性能各不相同, 所以默认的代价因子可能不适合实际的硬件环境.
 校准方法是求未知数的过程. 其中要用到第三方的工具得到一些比较容易得到的值.
 这里有个例子, 根据SQL实际的执行时间, 计算代价因子的值.
 seq_page_cost和cpu_tuple_cost的校准:
 seq_page_cost通过stap测试得到.
 cpu_tuple_cost通过公式得到.
 安装systemtap环境
 vi /etc/yum.repos.d/CentOS-Debuginfo.repo
 enabled=1
 # uname -r
 2.6.32-358.el6.x86_64
 yum install -y kernel-devel-2.6.32-358.el6.x86_64 kernel-debuginfo-2.6.32-358.el6.x86_64 kernel-debuginfo-common-x86_64-2.6.32-
358.el6.x86_64 systemtap
 stap -v -e 'probe vfs.read {printf("read performed\n"); exit()}'
 https://sourceware.org/systemtap/ftp/releases/ 或下载systemtap源码编译
EXPLAIN成本因子校准
 创建测试表, 插入测试数据
 digoal=# create table tbl_cost_align (id int, info text, crt_time timestamp);
 CREATE TABLE
 digoal=# insert into tbl_cost_align select (random()*2000000000)::int, md5(random()::text), clock_timestamp() from generate_series(1,100000);
 INSERT 0 100000
 digoal=# insert into tbl_cost_align select (random()*2000000000)::int, md5(random()::text), clock_timestamp() from generate_series(1,10000000);
 INSERT 0 10000000
 分析表
 digoal=# analyze tbl_cost_align;
 ANALYZE
EXPLAIN成本因子校准
 得到表的PAGE数
 digoal=# select relpages from pg_class where relname='tbl_cost_align';
 relpages
 ----------
 94393
 (1 row)
 检查点
 digoal=# checkpoint;
 CHECKPOINT
 停库
 pg93@db-172-16-3-150-> pg_ctl stop -m fast
 waiting for server to shut down.... done
 server stopped
 把操作系统的缓存刷入硬盘
 [root@db-172-16-3-150 ssd1]# sync; echo 3 > /proc/sys/vm/drop_caches
 以1号CPU亲和启动数据库, 0号CPU会带来一定的额外开销问题.
 pg93@db-172-16-3-150-> taskset -c 1 /home/pg93/pgsql9.3.1/bin/postgres >/dev/null 2>&1
EXPLAIN成本因子校准
 启动一个客户端
 pg93@db-172-16-3-150-> psql
 psql (9.3.1)
 Type "help" for help.
 digoal=# select pg_backend_pid();
 pg_backend_pid
 ----------------
 5727
 (1 row)
EXPLAIN成本因子校准
 使用stap跟踪, 得到seq_page_cost. (替换对应的bin路径)
 [root@db-172-16-3-150 ~]# taskset -c 7 stap -e '
 global a
 probe process("/home/pg93/pgsql9.3.1/bin/postgres").mark("query__start") {
 delete a
 println("query__start ", user_string($arg1), "pid:", pid())
 }
 probe vfs.read.return {
 t = gettimeofday_ns() - @entry(gettimeofday_ns())
 # if (execname() == "postgres" && devname != "N/A")
 a[pid()] 1998999963;
 QUERY PLAN
 ------------------------------------------------------------------------------------------------------------------------------------
 Index Scan using idx_tbl_cost_align_id on postgres.tbl_cost_align (cost=174.00..20181.67 rows=5031 width=45) (actual time=0.029..17.773
rows=5037 loops=1)
 Output: id, info, crt_time
 Index Cond: (tbl_cost_align.id > 1998999963)
 Buffers: shared hit=5054
 Total runtime: 18.477 ms
 (5 rows)
 执行计划表明这是个索引扫描, 至于扫了多少个数据块是未知的, 索引的tuples也是未知的, 已知的是cost和rows.
 20181.67 = blocks*random_page_cost + cpu_tuple_cost*5031 + cpu_index_tuple_cost*? + cpu_operator_cost*?
EXPLAIN成本因子校准
 求这个问号, 可以通过更改cpu_operator_cost来得到.
 digoal=# set cpu_operator_cost=2;
 SET
 digoal=# set enable_seqscan=off; set enable_bitmapscan=off; explain (analyze,verbose,costs,buffers,timing) select * from tbl_cost_align where
id>1998999963;
 SET
 SET
 QUERY PLAN
 ------------------------------------------------------------------------------------------------------------------------------------
 Index Scan using idx_tbl_cost_align_id on postgres.tbl_cost_align (cost=348.00..25386.67 rows=5031 width=45) (actual time=0.013..5.785
rows=5037 loops=1)
 Output: id, info, crt_time
 Index Cond: (tbl_cost_align.id > 1998999963)
 Buffers: shared hit=5054
 Total runtime: 6.336 ms
 (5 rows)
 25386.67-20181.67 = 5205 得到本例通过索引扫描的条数. 等式就变成了
 20181.67 = blocks*random_page_cost + cpu_tuple_cost*5031 + cpu_index_tuple_cost*5031 + cpu_operator_cost*5205
EXPLAIN成本因子校准
 接下来要求blocks, 也就是扫描的随机页数.
 通过调整random_page_cost得到.
 digoal=# set random_page_cost = 2;
 SET
 digoal=# set enable_seqscan=off; set enable_bitmapscan=off; explain (analyze,verbose,costs,buffers,timing) select * from tbl_cost_align where
id>1998999963;
 SET
 SET
 QUERY PLAN
 ------------------------------------------------------------------------------------------------------------------------------------------------------------
 Index Scan using idx_tbl_cost_align_id on postgres.tbl_cost_align (cost=348.00..30301.33 rows=5031 width=45) (actual time=0.013..5.778
rows=5037 loops=1)
 Output: id, info, crt_time