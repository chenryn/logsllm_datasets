redblue
blueblueblue
redbluewhite
redred#color
whitewhite#color
blueredred#color
However, it won't match the following strings:
#color
red#color
bluered#color
redbluefruit
redbluered#color
Invalid (non-existing) backward or forward
references
The Java regular expression engine handles back references to non-existing groups in the
same manner as back references to existing groups. Invalid or non-existing back references
do not participate in the match. This means that a regular expression with an invalid back
reference always fails, although it does not cause any exception.
For example, consider the following regex example:
(apple|orange|banana)\2
The \2 back reference will be invalid because there is only one capturing group in this
regular expression. Hence, the back reference of \2 always makes it a failed match against
any input.
[ 51 ]
Working with Groups, Capturing, and References
The same happens even when we have a regex pattern as follows:
\1
Due to a similar rule, it will fail to match an empty string as well.
Summary
In this chapter, you learned how to capture and reference substrings from an input text
using regular expressions. Using non-capturing groups, we discussed how to optimize our
regex patterns. We discussed the various types of groups available in Java regular
expressions, the numbering of captured groups, and named groups. You also learned how
to use back reference and forward reference of the capturing groups using numbered and
named references. In the next chapter, you will get to writing code in Java to evaluate
regular expressions. You will also be introduced to Java regular expressions using the Java
String API, and then, we will move on to regex capabilities in the Java Scanner API.
[ 52 ]
4
Regular Expression
Programming Using Java String
and Scanner APIs
In this chapter, you will be introduced to Java regular expressions using Java String
methods and we will move on to regular expression capabilities in Java Scanner API.
We will cover the following topics in this chapter:
Java String methods that use regular expressions
What these methods are used for and how to use them
The use of regular expressions in Java Scanner
So far, we have covered many theoretical concepts of writing regular expressions in depth.
The time has now come to see some of these regular expressions in action. We are going to
introduce you to Java programs evaluating these regular expressions using the
java.lang.String and java.util.Scanner APIs.
Regular Expression Programming Using Java String and Scanner APIs
Introduction to the Java String API for
regular expressions' evaluation
The Java String API provides some useful methods to evaluate regular expressions against a
text represented by the String object. Let's list those methods from the String class:
Method Signature Purpose
boolean matches(String regex) Matches the given regular expression against the string
that the method is invoked on and returns true/false,
indicating whether the match is successful (true) or not
(false).
String replaceAll(String regex, Replaces each substring of the subject string that
String replacement) matches the given regular expression with the
replacement string and returns the new string with the
replaced content.
String replaceFirst(String This method does the same as the previous one with
regex, String replacement) the exception that it replaces only the first substring of
the subject string that matches the given regular
expression with the replacement string and returns the
new string with the replaced content.
String[] split(String regex) Splits the subject string using the given regular
expression into an array of substrings (example given
ahead).
String[] split(String regex, int This overloaded method does the same as the previous
limit) one but there is an additional second parameter. The
limit parameter controls the number of times regular
expressions are applied for splitting.
For the complete reference of the String class, refer to https://docs.oracle.com/javase
/8/docs/api/java/lang/String.html.
[ 54 ]
Regular Expression Programming Using Java String and Scanner APIs
Method - boolean matches(String regex)
This method attempts to match a given regular expression against the complete subject
String and returns true/false, indicating whether the match is successful or not. The
following are a few important points to note:
Regular expression is applied against the entire String; there is no partial
matching
Regular expression does not need to be anchored using ^ and $, since it is
matched against the entire input
The equivalent of Pattern.matches(String regex, CharSequenceinput)
method (will be covered later)
Example of the matches method
Let's look at a few examples to understand this method better.
The following code snippet using the matches method will return false:
"1234".matches("\\d");
It is because the matches method attempts to apply a given regex against the entire input
and effectively runs this code as:
"1234".matches("^\\d$");
This will obviously fail as we have three digits in the input, not just one.
The code that matches the string "1234" and the call to the matches()method that returns
true will use the quantifier + or * after \\d. Therefore, the following two method calls will
return true:
"1234".matches("\\d+");
"1234".matches("\\d+");
To validate a given string that contains the colors red, blue, or green, we shall use this code
listing:
package example.regex;
public class StringMatches
{
public static void main(String[] args)
{
[ 55 ]
Regular Expression Programming Using Java String and Scanner APIs
boolean result;
String regex;
String input = "Sky is blue"; // First regex
regex = "\\b(red|blue|green)\\b";
result = input.matches(regex);
System.out.printf("Match result: %s%n", result);
// prints false
// Second regex
regex = ".*\\b(red|blue|green)\\b.*";
result = input.matches(regex);
System.out.printf("Match result: %s%n", result);
// prints true
}
}
A few points about this regex are as follows:
Alternation (red|blue|green) is being used to match any of the allowed colors
The first regex fails to match because we are only matching the allowed colors
using alternation but are not matching the text on either side of the alternation
The second regex succeeds as we are using . * on both sides of the alternation to
match any text before and after the allowed colors in the input text
We are also using the word, boundary assertions, around our alternation
expression to ensure that we match complete words only
To verify that the given input starts and ends with an English letter while allowing digits,
letters, underscores, and hyphens in the middle, we can use the following regular
expression in the matches() method:
input.matches("[a-zA-Z][a-zA-Z0-9_-]*[a-zA-Z]");
Else, we can also use the predefined class, \w:
input.matches("[a-zA-Z][\w-]*[a-zA-Z]");
In addition, we can use the modifier, (?i):
input.matches("(?i)[a-z][\w-]*[a-z]");
To verify that the input contains six to nine digits, use the following:
input.matches("\\d{6,9}");
[ 56 ]
Regular Expression Programming Using Java String and Scanner APIs
Method - String replaceAll(String regex, String
replacement)
This method replaces each substring of the subject string that matches the given regular
expression with the replacement String. As the name implies, replaceAll replaces all the
matching occurrences of the input String. Note that we can also supply a simple String
containing no regex meta character in the first argument.
Calling this method is equivalent to a call to the following:
Pattern.compile(regex).matcher(input).replaceAll(replacement);
Note: We will cover Pattern and Matcher APIs in Chapter 5, Introduction
to Java Regular Expression APIs - Pattern and Matcher Classes.
The replacement string allows the use of references to substrings, represented by the
captured groups used in the regular expression. These references can be of two types:
Numbered references: These are written as $n, where n is a number, such as $1,
$2, and $3, which represent a reference to each of the captured groups in the
regular expression
Named references: These are written as ${groupName}, where groupName is the
name of the captured group in the regular expression
To place a literal dollar or literal backslash in the replacement string, we need to escape
these characters using double backslash (\\).
Here, at this point, you should understand the difference between back-reference and
replacement reference. Back-reference is used in the regular expression pattern itself and is
written as \1,\2,\3, and so on for a numbered group's back-reference and
\k for a named group's back-reference. However, replacement reference is
either written as $1, $2, $3, for a numbered group's reference or ${groupName} for a
named group's reference.
[ 57 ]
Regular Expression Programming Using Java String and Scanner APIs
Examples of the replaceAll method
To replace all the semi-colons with hyphens, we can use the following:
input = input.replaceAll(";", "-");
To remove all the non-digits from the input, we can use:
input = input.replace("\\D+", "");
To replace all the leading and trailing commas from an input, we can use an alternation
regex:
input = input.replaceAll("^,+|,+$", "");
To replace all the occurrences of two or more white spaces with a single space, we can use:
input = input.replaceAll("\\s{2,}, " ");
How can we escape all the dollar signs that are just before the % character? In other words,
to replace all the occurrences of $% with \$%, we can use:
input = input.replaceAll("\\$%", "\\\\\\$%");
Note that we are using \\\\ (four backslashes) to enter a single \, and we're using \\$ to
enter a single $ in the replacement, whereas % will just be a literal.
Consider the following input:
$200 $%apple% $%banana% $%orange%
It will be converted into this:
$200 \$%apple% \$%banana} \${orange}
We can also leverage the group reference $0 here, which is populated with the entire
matched text using a regex. So, our code can be simplified to this as $0 will refer to the
matched text $% by our regex:
input = input.replaceAll("\\$%", "\\\\$0");
[ 58 ]
Regular Expression Programming Using Java String and Scanner APIs
Another nice trick we can use here is to use the static method,
Matcher.quoteReplacement that is in the Matcher API. This method handles all the
special characters in a replacement string and escapes them appropriately. Now, our code
can become this:
input = input.replaceAll("\\$%", Matcher.quoteReplacement("\\") + "$0");
Let's solve an interesting problem. We need to replace all the multiple occurrences of non-
word characters with a single instance of the same character.
Consider the following input text:
Let''''''s learn::: how to write cool regex...
The expected output is:
Let's learn: how to write cool regex.
Note that we are replacing multiple occurrences of non-word characters only and not
replacing multiple occurrences of word characters.
Here is the code listing to solve this problem:
package example.regex;
public class StringReplaceAll
{
public static void main(String[] args)
{
// our input string
String input = "Let''''''s learn::: how to write cool regex...";
// call replaceAll and assign replaced string to same variable
input = input.replaceAll("(\\W)\\1+", "$1");
// print the result
System.out.printf("Replaced result: %s%n", input);
}
}
Here are a few points about this solution:
We are using the predefined class, \W, to match a non-word character
We are using a capturing group around the non-word character to be able to use
a back-reference later in the regex and in the replacement
[ 59 ]
Regular Expression Programming Using Java String and Scanner APIs
The pattern, (\\W)\\1+, is used to match two or more occurrences of the same
non-word character
\1 represents the back-reference to the first captured group
In the replacement, we are using the reference, $1, to place the captured non-
word character back in the replaced string
$1 represents the reference to the first captured group
Using the named group directives that you learnt in the previous chapter, we can
also write the replaceAll method call as follows:
input = input.replaceAll("(?\\W)\\k+", "${nwchar}");
Method - String replaceFirst(String regex, String
replacement)
This method replaces the first substring of the subject string, which matches the given
regular expression with the replacement String. As the name implies, replaceFirst
replaces only the first matching occurrence of the input String. Note that we can also supply
a simple String containing no regex meta character in the first argument as regex.
Calling this method is equivalent to the following call:
Pattern.compile(regex).matcher(input).replaceFirst(replacement);
Note: We will cover the Pattern and Matcher APIs in later chapters.
A replacement string allows the use of group references, such as $1, $2, $3, and so on, for
numbered references or ${groupName} for named references, which represent each of the
captured groups in the regular expressions. To place a literal dollar or a literal backslash in
the replacement, we need to escape these characters using the double backslash.
Examples of the replaceFirst method
To replace only the first semi-colon with a hyphen, we can use the following:
input = input.replaceFirst(";", "-");
[ 60 ]
Regular Expression Programming Using Java String and Scanner APIs
What will be the output if we have to use the replaceFirst method instead of
replaceAll in the input text of "$%apple% $%banana% $%orange%" for escaping the
dollar signs?
The code will become as follows:
input = input.replaceFirst("\\$", "\\\\\\$");
It will replace only the first $ sign; hence, the output will only have the first $ escaped as
follows:
\$%apple% $%banana% $%orange%
To replace the first dot of an IPV4 IP address with a colon, we can use the following code:
String newip = ipaddress.replaceFirst("\\.", ":");
Only the first dot will be replaced by a colon; hence, an IP value of 10.11.22.123 will
become 10:11.22.123.
Methods - String split methods
The String class has two split methods with the following signatures:
String[] split(String regex, int limit)
String[] split(String regex)
These split methods split the subject string into an array around the matches of the given
regular expression, also called delimiters.
When there is a positive width match at the beginning of an input string, then an empty
string is included at the beginning of the resulting array. However, a match of zero width by
regular expression does not include any empty string at the beginning of the resulting
array.
The array returned by this method contains a combination of the following elements:
Token substrings that are split by the delimiter, matched using the given regular
expression
Input substring beyond the last match of the delimiter, using the given regular
expression
[ 61 ]
Regular Expression Programming Using Java String and Scanner APIs
A leading empty string when there is a positive width delimiter
Trailing empty strings (see the next subsection on the limit parameter)
When splitting regular a expression does not match any part of the input, the resulting
array will just have a single element, that is, the complete input string.
split(String regex) is just an overloaded method with the same functionality that calls
the two-argument split method with the limit parameter as zero, thus making a call as:
split(regex, 0)
The limit parameter rules
The limit parameter controls the number of times the regular expression pattern is applied
for splitting the subject string. It affects the length of the resulting array with the following
rules:
1. If the limit is greater than 0, then the pattern will be applied at most one time, the
resulting array's length will not be greater than the limit, and the array's last
entry will contain all input substrings beyond the last matched delimiter.
2. If the limit is negative, then the pattern will be applied as many times as possible,
and the resulting array can have any length.
3. If the limit is zero (as in the single parameter split method call), then the pattern
will be applied as many times as possible, the array can have any length, and
trailing empty strings will be discarded.
Examples of the split method
Let's look at the following code listing, which splits the subject string on each occurrence of
a hyphen:
package example.regex;
import java.util.*;
class StringSplit
{
public static void main (String[] args)
{
final String input = "green-red-blue-yellow";
Arrays.stream(input.split("-"))
[ 62 ]
Regular Expression Programming Using Java String and Scanner APIs
.forEach(System.out::println);
}
}
This will generate the following output:
"green"
"red"
"blue"
"yellow"
Now, let's change our code to the following by splitting on each occurrence of the letter e:
Arrays.stream(input.split("e"))
.forEach(System.out::println);
The preceding code will generate the following output:
"gr"
""
"n-r"
"d-blu"
"-y"
"llow"
We got one empty result because we split on each e and there are two e letters in green,
thus giving us an empty string between the two e letters.