Toovercomethesedrawbacksandchallenges,weproposeamethodologythatrec-
ommendstheoptimalsetofcloudprovidersandcreatesamulti-cloudsolutionforthe
client. We evaluate the optimal set of cloud providers based on best the fit between
recommendationsfromhistoricaldataaswellasadecisionoptimizationsolutionframe-
work.Wealsoproviderecommendationformultipleapplicationsatonceinsteadofjust
oneapplicationasthecurrentliterature.Lastly,weproviderecommendationbasedon
datacollectedfromtheclientandprocessingitautomaticallyinsteadofgoingbackand
forthbyhumans.
Therestofthispaperisorganizedasfollows:InSect.2wediscussthepriorartand
inSect.3,wediscussourmethodology.InSect.4,weprovideadetailproof-of-concept
implementationforit,thenweenditwithprovidingourconclusions,ongoing,andfuture
workinSect.5.
2 PriorArt
Priorresearchandanalyticalworkoffindingcloudprovidersusingstructuredapplication
dataaswellasoptimizingcloudsolutiondesigntogetherwithmigrationhavebeendone
inthisarea.Pamamietal.[7]showsaframeworktocreateagenericreferenceforprocess
of cloud migration while Iqbal et al. [8] discusses different cloud migration strategies
andmodels,rightfromevaluatingperformancetochoosingacloudprovider.Iyoobetal.
[9] proposes a cloud comparison engine that maps application specifications to cloud
servicespricingforspecificcloudofferings.In[10],Iyoobetal.detailasystemforauto-
prioritizationofworkloadmigrationtocloudwhilein[11],theypresentdata-drivencloud
workloadscreening.Yang[12]showsahybridcloudsolutiondesignforgenomicsNext
GenerationSequencing(NGS)service,whichisstreamlinedforthisparticularservice.
Megahed et al. proposes an optimal approach for cloud solution design that satisfies
clientrequirementsandcloudofferingconstraintsforanapplicationin[13,14],though
theydonotaccountforthedifferentconstraintsofchoosingdifferentcloudprovidersin
thesolution.
Multi-cloudSolutionDesignforMigratingaPortfolio 487
Moreover,thereisanumerousamountofpriorartinapplyinganalyticalandopti-
mizationtechniquestodifferentcloudcomputingproblems.Forexample,migratingvir-
tualmachines,applicationstocloudenvironmenthavebeendiscussedin[15–18].Cloud
elasticityoptimizationinsoftwareasaservicecloudcomputinghavebeenexploredin
[19–22].Teyebetal.[23]proposedanotheroptimizationmodelfordynamicplacement
of virtual machines in cloud data centers. Other works that provide other analytical
approaches for different problems, though still in the cloud computing arena, are the
ones in [24–26]. Amato et al. [27] and Iyoob et al. [28] provide analytical works that
havesolvedproblemsinthecloud,includingmulti-cloud.However,theydonotinclude
anyworksthatinvolvemulti-cloudsolutions.
Intheaforementionedexistingstateoftheart,weobserveafewdrawbacks.First,
the time taken to gather all the features of the applications is quite inefficient, as it
takes a lot of time and resources. Second, there is no analytical automated way of
efficiently recommending a multi-cloud solution, where the current solutions rely on
manual,inefficientevaluationofpossibleavailablecloudprovidersandthusrequiresa
lotofbackandforthwiththeclient.Thatis,thepriorartdiscussedabove,aswellasother
worksnotreviewedabove,focusondifferentaspectsofcloudcomputingoptimization
andanalytics,ratherthanmulti-cloudsolutions.
3 Methodology
Wefirstprovideanoverviewofourtwo-stepapproachinSect.3.1,andthendetaileach
ofthesestepsinSect.3.2.
3.1 OverviewofOurApproach
Ourmethodologyisafour-stepapproachthataimsatpreparingamulti-cloudsolutionfor
aclientportfolioofapplications.Westartwithcollectingmetadataforeachapplication
thattheclientwantstomigratetocloud.Theselistsofapplicationstogetherwiththeir
detailslikeusers,geography,security,softwareplatformsetc.aretheinputstoourmodel.
Wethenperformtextminingonthissemi-structuredtextdataforeachapplication.Next,
weevaluatethecloudfeasibilityofeachapplicationusingadependencygraphsapproach.
Theoutputofthisstepistocomeupwitharankofapplicationsshowinghowfeasibleit
istomoveeachapplicationtothecloud.Weevaluatethefeaturesoftheapplicationsand
buildamatrixofapplicationsversusservicecloudprovidersbasedondifferentfactors
suchascost,securityfeatures,servicelevelrequirements,etc.
Lastly,webuildanoptimizationmodelthatfindstheoptimalsetofsolutionproviders
forthedifferentapplicationsthataredeemedcloud-migration-feasible.Themodelputs
in consideration the different requirements of the client. Our output is a competitive
solutioncomprisingofdifferentapplicationsandtheircorrespondingserviceproviders,
fulfillingtherequirementsoftheclient.Figure1outlinesthefourstepsofourmethod
1.Inthenextsection,wedetaileachstepinourmethod.
488 S.Asthanaetal.
For each
application, do
the sf to el plo sw :ing Re foq ru mes ot rt eo dc ali te ant Optimizing the multi-cloud solution
Stop
Yes
a mppL igli is rct aa o tt eif o dC n tl si oe t n o tht b ee mP tese i xtnr a r tf i uo n s dcr g e am tm u tu a rist e -e i fn d ox g rt inIn foc ro mm ap tl ie ot ne ? No df ee pbaC eusl nio ib l ddu il e d i at n y c: y FeN C ao l so iu bd le ? Yes a aC p a cpt u le al sig c sina so g itr fii ioz ee n r am p sB vpa eeu lt ri ri cr vl sid a ix u c t a s eio o f n Opt mim oi dz ea ltion
cloud each graph model cloud
application providers
UI Storage Authentication Platforms
Success criteria map
Historical data of
pa c rp olop vul ii ddc ea s dt oi o tlun ots i t o ha n en s md Clie f fo en r at tcr ule o rq u eu sde st Ap fep ali tc ua rt eio sn
Fig.1. Outlineofourmethodology
3.2 DetailedStepsofOurApproach
In this section, we provide a detailed description of the four steps of our approach as
follows.
PerformTextMiningonDataforEachApplication. In this step, we first collect
meta-dataforeachapplication.Foreachclientapplicationthattheclientwantstomigrate
tocloud,wescreenapplicationsandcollectapplicationmetadatafeatureslikenumber
ofusers,geographyofusers,investmentonapplication,securityandcomplianceagree-
ment, geography of database where data is stored, software platforms, authentication
server, server, hardware, network setup, reliability, scalability, etc. Also, we collect
clientrequestforfeaturesthatshouldbeinthecloudforthisapplication,e.g.,security
compliance,costbudgetforcloudusage.
Next,weperformtextminingonthelooselysemi-structureddocumentwhichhas
data collected about the application. Text mining can be performed by identifying
tags/keywords for each feature and labelling them. We extract texts and map them to
relevanttags,toidentifycompletenessofdatausingthesetags.Forexample:
TextItems:
1. NumberofusersforXYZapplicationis455inEurope.
2. ApplicationrequiressoftwareJavaSDKv6.0orbelow.
SampleRulestoextractdatafromtextandensurecompletenessofinformation:
A.NumberofUsers→455:TextItem1→Extractedtag:users.
B.InvestmentonApplication→?:Informationincomplete.
C.SoftwarePlatform→Java:Extractedtag:software.
Wehaveapre-setlistoftagsthatarerequiredforanyspecificmodelthatwecheck
for completeness while we apply our methodology. Particularly, after the text mining
step of our methodology, if we are unable to extract the data for a particular tag, we
Multi-cloudSolutionDesignforMigratingaPortfolio 489
deemittobemissingandwegetbacktotheuserwithsuchmissingdataifany.Thus,
weevaluatecompletenessofdatausingthenecessarytagsthatarerequiredtoevaluate
theapplication.
EvaluateCloudFeasibilityandRanktheApplications. Inthisstep,weevaluatefea-
sibility of cloud migration of applications and rank them based on effort required to
migrate each one of them. Here we train a graph machine learning model and build
adependency graph. The nodes of the graph correspond tothe tags/keywords thatwe
extractedintheearliertextminingstep.Wethenstackthenodes’featurevectorsintoa
designgraphandthentrainaclassifierlikerandomforestonasubsetofdatatobuildthis
graph.Ourmodelclassifieseachtagunderparentnodeslikeweb,authentication,user
interface,platforms,datastorage,etc.Themodelisvisualizedintheformofagraph,
andweareabletoidentifytheupwardanddownstreamdependenciesshowingdifferent
levelsofinterconnections.
The interconnections can be between components like databased sharing software
andnetworkservices,LDAPservices,platformswhicharesoftwareversionspecificetc.
Here we consider the feasibility of cloud based on number of services or compo-
nentsthathaveminimumupwardanddownwarddependencies.Examplesofapplication
dependenciesincludesimilarservicesthatarepullingdatafromtheapplication,common
databaseforlightweightdirectoryaccessprotocolandbackenddata,etc.
Wecanranktheapplicationbasedonruleslike:
• Applications that have immediate business need to scale and are running out of
capacity
• Applicationsthathavearchitecturalflexibility
• Applicationsthatrequireglobalscalee.g.,marketingandadvertisingapplications
• Lowerprioritytoapplicationsthatrequirespecializedhardwaretofunction
Weleveragethedependenciesbetweenthedifferentcomponentsoftheapplication
identifytheinter-dependencies.Thisinter-dependencyaswellasrankingofapplications
andapplicationdataenoughtogetaclearpictureoftheeffortrequiredtomigratethe
applicationtocloud,anditsfeasibility.
BuildaMatrixofApplicationversusServiceCloudProvider. In this step, using
applicationfeatures,weuseaclassifiermodeltocategorizetheapplicationsintodifferent
categories–
• Basedonhistoricalrecommendationsandcurrentframework
• Basedonsecuritytypeofdata
• Basedonsimilardependenciesinapplications
• Basedonapplicationsusingsimilarplatforms
• Basedonapplicationswithsimilararchitecturesincludingmicroservices,cloudnative,
mobileetc.
• Basedoneaseofcloudmigration(dependingonefforttomigrateapplications)
490 S.Asthanaetal.
Forthis,weuseaweightingfunctionbasedonimportanceoffeatures(e.g.cost,QoS,
coverage,securityetc.).Aftercreatingtheweightingfunction,wecaneasilypreparea
solutioncomprisingofservicesfromdifferentcloudproviderswithminimumcostand
maximumcoverageofservices.Thisisdonebypreparingamatrixofapplicationsversus
different service cloud providers on metrics like cost, QoS, coverage, security etc. as
illustrated in Fig. 2. We build the matrix in a simplistic manner, where we take the
availablecloudprovidersasfieldsinthecolumns,andthedifferentapplicationsinthe
rows
Fig.2. Matrixofapplicationsversusservicecloudprovider.
BuildanOptimizationModel. In this step, we build an optimization model for the
currentsetofapplications.Herewetrytooptimizethecloudserviceprovidersbasedon
constraintslike:
• Minimumsetofserviceproviders
• Maximumsetofcoverage
• Serviceproviderswhichfulfillsecurityrequirementsofdata
• Serviceproviderprovidingservicesbasedongeographicalregion
• Constraintwhereapplicationscannotbeunderthesameproviderorsamegeography.
DefiningthesetofapplicationsasI,thatofprovidersasJ,andthatofgeographies
as K, the decision variables of the optimization model are X and Y . Both sets of
ijk j
variables are binary, where X is 1 if application i ∈ I is assigned to provider j ∈ J
ijk
at geography k ∈ K and zero otherwise. Y is 1 if provider j ∈ J is selected and zero,
j
otherwise.Theobjectivefunctionminimizesthecapacityofcloudproviderselections
andcostofapplicationportfolioassignments.Besidestheaforementionedconstraints,
other logical constraints are those assuring that each provider can be assigned to any
applicationonlyifithasbeenselected.
4 AnExampleUseCase
Inthissection,weshowanexampleusecaseofourmethodinSect.3.Weconsideralarge
ITcompanywithglobalemployeesacross20countries,havingupto~100applications
thatitwantstomigratetocloud.Here,wewanttoclarifythatwedohavethedatafrom
differentcloudproviders,basedonservicesprovidedandhaveitsmetricslikecoverage,
QoS,securityetc.Wedidnotincludeallthedetailsofthedatabecauseofconfidentiality
Multi-cloudSolutionDesignforMigratingaPortfolio 491
reasons as well as space limitations. However, we did implement our approach and
appliedittoanapplicationusingrealdata.
Forourimplementation,wefirstunderstoodwhichapplicationsshouldbemovedto
thecloud.Wealsodocumentedtheapplicationsthatshouldbegroupedtogetherunder
samecloudprovider,andwhichapplicationsshouldbekeptseparatefromeachother.
Therecanbeotherconstraintsfromtheclientlikeapplicationswhichcanbeunder
samecloudprovider,butindifferentregions.Weeliminatedapplicationswhichcannot
be moved to cloud because of organization policy or security. After screening all the
applications,weputitinasemistructureddocument,withtags.Useoftagsisimportant
tounderstandifdataabouteachapplicationiscompleteandreadyforassessment.
Next,weevaluatedifapplicationisfeasible.Foreachapplication,webuiltthedepen-
dencygrapharounddifferentpartsoftheapplication.Weshowedthesampledependency
graph in Fig. 3. Our real-world example application XYZ has the following logical
constructsthatwereusedtoevaluatethedependencies,risks,securityandcompliance
requirements.
Fig.3. Exampleofdependencygraph.
Here the dotted lines indicated the identified upward and downstream dependen-
cies showing different levels of interconnections of components. Next we evaluated
applicationsusingquestionslike:
• Does the application have immediate business need to scale and are running out of
capacity?–limitedscalablestorageupto2TBPS
• Doesithavearchitecturalflexibility?–Notmuch,itrequiresmorestoragecapacity
andmorein-stancestomakeitscalableandreliable.
• Numberofupwardanddownwarddependencies–twointernal,1external
492 S.Asthanaetal.
• Anydependencyon3rdpartyinfrastructure/hardwareorapplications?–Yes
Thisevaluationwasusedtorankhowcloudfeasibletheapplicationis.Aftereval-
uatingthecloudfeasibilityoftheapplication,webuiltthematrixofapplicationversus
service cloud providers as shown in Fig. 4. Then, the optimization algorithm helped
to optimize the recommended set of cloud providers which prepared the multi-cloud
solutionfortheclient.
Providers
Cloud Provider 1 Cloud Provider 2 Cloud Provider 3
Apps
App 1
App 2
App 3
App 4
App 5
App 6
App 7
Fig.4. Matrixofapplicationversusservicecloudprovider.
5 ConclusionandFutureWork
Inthiswork-in-progress paper, wepresented anovel method toprepare amulti-cloud
solutionforaclientportfolioofapplications.Weshowedamethodthatusedtextmining,
dependency graph, and optimization to create that multi-cloud solution. We showed a
usecaseforapplyingourmethodtoareal-worldapplication.Ourfutureworkincludes
enhancingthetext-miningprocedure,formallyformulatingandsolvingtheoptimization
model,andapplyingourapproachtoreal-datatotestitsapplicability.
References
1. Mohamed,M.,Megahed,A.:Optimalassignmentofautonomicmanagerstocloudresources.
In:2015IEEEInternationalConferenceonServiceOperationsandLogistics,andInformatics
(SOLI),pp.88–93.IEEE(2015)
2. Megahed,A.,Mohamed,M.,Tata,S.:Astochasticoptimizationapproachforcloudelasticity.
In:2017IEEE10thInternationalConferenceonCloudComputing(CLOUD),pp.456–463
(2017)
3. IBMblog-‘NewIBMserviceshelpcompaniesmanagethenewmulticloudworld’
4. Litchfield,A.,Althouse,J.:Asystematicreviewofcloudcomputing,bigdataanddatabases
onthecloud.In:Americas’ConferenceonInformationSystems(AMCIS)(2014)
5. NewlinRajkumar,V.:Securitymeasuresincloudcomputinganextensiveassessment.Int.J.
Adv.Inf.Commun.Technol.4,405–410(2014)
Multi-cloudSolutionDesignforMigratingaPortfolio 493
6. Cranford,N.:Fivechallengesofcloudmigration.RCRWirelNews(2017).https://www.rcr
wireless.com/20171003/five-challenges-of-cloud-migration-tag27-tag99
7. Pamami,P.,Jain,A.,Sharma,N.:Cloudmigrationmetamodel:aframeworkforlegacyto
cloud migration. In: 9th International Conference on Cloud Computing, Data Science &
Engineering(Confluence),pp.43–50(2019)
8. Iqbal,A.,Colomo-Palacios,R.:Keyopportunitiesandchallengesofdatamigrationincloud:
resultsfromamultivocalliteraturereview.ProcediaComput.Sci.164,48–55(2019)
9. Ilyas,I.,Modh,M.M.:Implementingcomparisonofcloudserviceproviderpackageofferings.
U.S.Patent9,818,127,issued14November2017(2017)
10. Iyoob,I.,Yan,A.M.:Assessmentofbestfitclouddeploymentinfrastructures.U.S.Patent
9,813,318,issued7November2017(2017)