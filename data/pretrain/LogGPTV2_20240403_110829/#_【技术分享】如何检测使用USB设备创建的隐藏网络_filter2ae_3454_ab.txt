    if(-Not $nop)
如果程序检测到与USB设备连接有关的任何信息，以上条件语句为真，程序会执行如下代码：
代码段1：
    ForEach($SubKey1 in $USBSTORSubKeys1)
    {
    $Key2 = "SYSTEMCurrentControlSetEnumUSBSTOR$SubKey1"
    $RegSubKey2 = $Reg.OpenSubKey($Key2)
    $SubkeyName2 = $RegSubKey2.GetSubKeyNames()
    $Subkeys2 += "$Key2$SubKeyName2"
    $RegSubKey2.Close()
    }
注册表中存储的每一条信息都代表着一个不同的USB设备。这些设备会被保存到@Subkeys2数组中。
代码段2：
    ForEach($Subkey2 in $Subkeys2)
    {
    $USBKey = $Reg.OpenSubKey($Subkey2)
    $USBDevice = $USBKey.GetValue('FriendlyName')
    $USBContainerID = $USBKey.GetValue('ContainerID')
    If($USBDevice)
    {
    $USBDevices += New-Object -TypeName PSObject -Property @{
    USBDevice = $USBDevice
    USBContainerID = $USBContainerID
    USBComputerName= $ComputerName
    ComputerIP = $ComputerIP
    }
    }
    $USBKey.Close()
    }
这段代码用来处理上一段代码中识别出的保存在@Subkeys2数组中的每个USB设备。如果某个设备包含$USBDevice字段，那么程序就会获取USB设备的ID信息（USBContainerID）。程序会顺便获取计算机的主机名以及IP地址，以便导出到CSV输出文件中。
图11. 存放USB设备信息的注册表路径
代码段3：
    for ($i=0; $i -lt $USBDevices.length; $i++) {
    $IDUnico=$USBDevices[$i] | Select -ExpandProperty "USBContainerID"
    $USBNombre=$USBDevices[$i] | Select -ExpandProperty "USBDevice"
    Write-Host "Computer: ",$ComputerName -foregroundcolor "black" -    backgroundcolor "green"
    Write-Host "IP: ",$ComputerIP
    Write-Host "USB found: ",$USBNombre
    Write-Host "USB ID: ",$IDUnico
    Echo "$ComputerName,$ComputerIP,$USBNombre,$IDUnico"
    }
最后，这段代码用来格式化显示从远程主机获取的信息。Write-Host这条命令用来在当前屏幕中打印出相关信息。Echo命令作为数据输出方式，以便在CSV文件中写入数据。
图12. 程序运行后的输出结果
**2.3 使用SMB及PSExec检测USB隐藏网络**
为了使用SMB协议来运行检测脚本，我们需要事先安装PSTools，具体说来，我们需要在待检测主机中运行PSExec命令。这个脚本的原理与WinRM版的脚本几乎完全一致。服务器需要连接到远程主机，并且使用域管账户运行检测脚本，然后通过脚本收集USB设备相关数据。
我们稍微修改了LaunchUSBHiddenNetworks.ps1脚本，以适应这种连接环境。主要的改动是没有使用Invoke-Command这条命令来远程运行脚本。我们会通过Powershell运行一个shell接口，然后利用该接口运行脚本。脚本需要从某个网络位置中下载，最好能通过使用HTTP协议的Web服务器来下载这个脚本。通过这种方式，我们可以规避在访问本地共享资源时可能碰到的一些问题，如执行策略问题以及权限问题。
与WinRM版的脚本类似，我们会将执行结果存储在CSV文件中。为了避免出现同步问题，也为了给远程主机上的脚本预留充足的运行时间，我们在代码中使用了一些延迟量。
**2.3.1 LaunchUSBHiddenNetworks脚本**
    $computers = gc "C:scriptsHiddenNetworksPSExecUSBHiddenNetworks_for_SMBservers.txt"
    $url = "http://192.168.1.14/test/RecollectUSBData.ps1"
    $sincro = 40
这段代码中分配了几个变量。servers.txt文件中保存的服务器名或IP地址信息会被赋值到$computers变量中，$url变量用来存储RecollectUSBData.ps1脚本的网络地址，$sincro变量表示同步操作所需等待的时长。我们需要根据具体运行的环境来调整这个数字。某个执行样例如下所示：
图13. 使用PSEXEC工具运行Powershell以及脚本程序
servers.txt文件保存了计算机名或者IP地址，如下所示：
图14. 待分析的计算机列表
    foreach ($computer in $computers) {
    $Process = [Diagnostics.Process]::Start("cmd.exe","/c psexec.exe
    \$computer powershell.exe -C IEX (New-Object Net.Webclient).Downloadstring('$url') >>
    C:scriptsHiddenNetworksPSExecUSBHiddenNetworks_for_SMBusbdata.csv")
    $id = $Process.Id
    sleep $sincro
    Write-Host "Process created. Process id is $id"
    taskkill.exe /PID $id
    }
以上这个循环会对servers.txt文本中的所有计算机（存储在$computers变量中）进行检查。对于这段代码，我们可以重点关注一下$Process这个对象。在这个对象中，程序会打开一台远程电脑的控制台，利用该控制台启动其他Powershell控制台，通过$url变量传入RecollectUSBData.ps1文件。在运行脚本前，我们必须正确配置每个文件的正确路径。
在处理列表中的下一台主机之前，程序必须保证当前的信息收集过程已经结束。有多种方法可以做到这一点，这里我们选择在两次动作之间添加一个sleep命令，延迟X秒运行来实现。一旦收集过程被终止，在审计下一台主机前，我们会通过taskkill命令结束当前的执行进程。程序会将当前操作的ID以及结果输出到屏幕上，如下图所示：
图15. 在Powershell中运行的脚本
**2.3.2 RecollectUSBData脚本**
我们只对这个脚本的最后一个代码段（第3个代码段）进行了修改，使输出格式与新的执行环境相匹配。如下代码中，“Echo”已经被替换为带有变量的“Write-Host”：
    for ($i=0; $i -lt $USBDevices.length; $i++) {
    $IDUnico=$USBDevices[$i] | Select -ExpandProperty "USBContainerID"
    $USBNombre=$USBDevices[$i] | Select -ExpandProperty "USBDevice"
    Write-Host "$ComputerName,$ComputerIP,$USBNombre,$IDUnico"
    }
程序生成的USBData.CSV文件与前一个版本的程序完全一致。
**2.4 历史信息收集**
如果我们需要了解隐藏网络中的USB设备路由的更多信息，我们可以收集USB设备首次连接到计算机上的注册日期。Windows的所有版本中默认会在事件日志中禁用这个功能，这一功能的具体路径为：
    Windows Logs -> Applications and Services Logs ->Microsoft-> Windows -> DriverFrameworks->UserMode -> Operational
因此，无需访问计算机，我们可以分析系统中的如下文件，获取该计算机中USB设备的首次连接日期：
    C:Windowsinfsetuoapi.dev.log
这个文件除了记录其他数据，也会记录首次连接的时间。为了准确定位已插入的USB设备，我们需要在运行“RecollectUSBData.ps1”脚本时，保存一个新的字段，这个字段即为DiskID：
图16. DiskID键值
对于某个USB设备来说，这个字段的值在当前Windows系统中具有唯一性，但当它连接到其他计算机中时，这个值就会发生改变，这种情况与ContainerId这个字段不同，它在每台Windows主机上的值都一致。我们可以在setupoapi.dev.log文件中使用这个值识别USB设备。如下图所示，我们可以通过DiskID识别USB设备的位置，也能识别出首次插入目标系统中的日期：
图17. 获取USB设备的连接日期
**2.5 OS X中的隐藏链接**
对于运行Mac OS
X或者macOS的计算机，有一个PLIST文件用来保存连接到计算机的USB设备的相关信息，这个文件名为com.apple.finder.plist。OS
X或者macOS环境中该文件的典型内容如下图所示：
图18. 连接到OS X系统中的USB设备的相关信息
**2.6 防御措施**
防止企业网络中计算机之间交叉感染的一种方法是限制USB设备的使用。我们可以通过活动目录策略强制部署防御措施或预防措施，在这种情况下，只有当用户同意或授权后，USB设备才能连接到主机中。这种安全策略可以与经过授权设备的白名单策略配合使用，这样一来，每个用户都能避免受到此类隐藏链接的影响，但这种解决方法在日常维护上代价较为昂贵。
图19. 受主机策略影响USB设备无法连接到当前主机
**三、总结**
除了有可能会泄露企业信息，隐藏网络也会对企业的完整性造成影响。这类USB设备可以在基础架构内的不同设施之间传播恶意软件，而这些设施的安全级别各有不同，理论上讲，恶意软件可能借助这类网络从低级别设施传播到高级别设施中。将内部网络与互联网断开后，人们误认为这种情况下自己会得到更高级别的保护，直到安全事件发生才意识到这是一种错觉，实际上这会带来更多的系统漏洞。
通过USB设备传播恶意软件是一个现实问题，更是一个潜在问题，不仅有震网病毒的前车之鉴，CIA出品的野蛮袋鼠（Brutal
Kangaroo）系列工具也能给我们足够的警示。
为了避免此类网络对我们的基础设施造成严重的影响，我们发表了这篇文章，介绍了此类隐藏网络的识别方法，同时也提供了相关工具来控制这类网络。因此，对于这类网络的安全取证而言，预防及控制工作也会变得更为简单。
**四、参考资料**
[1] 
[2] 
[3] 