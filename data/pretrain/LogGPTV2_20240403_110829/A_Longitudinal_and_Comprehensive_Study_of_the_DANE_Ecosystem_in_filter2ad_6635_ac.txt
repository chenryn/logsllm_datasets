observations:
First, we ﬁnd that most of the TLSA records conﬁgure their
DNSSEC properly if they do not miss any related DNSSEC
records; the average failure rate is only 0.47%. Compared with
the recent study [23] reporting a 0.5% failure rate of RRSIGs
of signed domains, this result indicates that TLSA records are
managed similarly well. Focusing on the validation failure
reason, we ﬁnd that expired RRSIGs are the primary reason
(70% of the failures) and the other 30% are due to non-existent
DNSKEYs. Second, we ﬁnd that on average 14.17% of the cer-
tiﬁcates cannot be validated due to a mismatch with their cor-
responding TLSA records; 2.7% of these errors are caused by
a wrong Selector or Certificate Usage. In other words,
we can make them valid simply by changing the option num-
ber of the Selector or Certificate Usage. The others
(97.3%) are due to Certificate Association Data that
does not match with any certiﬁcate in the chain presented by
the TLS server. One possible explanation is that the admin-
istrators forgot to update either TLSA records or certiﬁcates
when changing their public keys, which we consider in more
detail in subsection 5.5.
Impact of TLSA Validation Failure
5.4
As explained in section 4, a popular email server (MX record)
can be used by many domains, meaning that the validation
failure of a single TLSA record can affect many domains that
rely on its MX record. We now combine our Daily and Hourly
datasets to analyze how many domains have TLSA records
with missing or incorrect DANE components, allowing us to
estimate the impact of TLSA record validity. Figure 8 shows
the percentage of domains that have TLSA records that cannot
be validated by sending email clients, classiﬁed by their TLDs.
As the ﬁgure shows, the impact varies across TLDs; for ex-
ample, only 0.006% of .se domains cannot be validated due
to missing or invalid DNSSEC or STARTTLS conﬁgurations,
while .org domains show a much higher error rate of 1.65%,
which is 275 times higher.
Interestingly, we observe only 30 ∼ 150 .se domains with
incorrect or missing TLSA records. We believe this success in
deployment is related to the .se registry’s consistent efforts
to deploy TLSA records and DNSSEC by offering ﬁnancial
incentives to registrars [23,51] that deploy these technologies
correctly7. Surprisingly, for almost 8,200 .nl domains, the
TLSA records were invalid for 7 hours on October 19, 2019.
This was mainly due to four TLSA records sharing the same
7Similarly, the .nl registry manages a program called Registrar Score-
card, which offers ﬁnancial incentives to registrars who enable and manage
Internet security protocols such as DKIM and DNSSEC [67, 78].
Figure 8: The percentage of domains with misconﬁgured TLSA
records is shown.
second-level domain, mailplatform.eu8. From manual in-
spection, we ﬁnd that their DNSSEC signatures were not valid
due to no DNSKEYs matching the DS record in the parent zone.
We suspect that they made a mistake during the update of
their DS records and DNSKEYs.
5.5 TLSA Management
The previous sections focus on the necessary and correct
components to provide valid certiﬁcates, which are consistent
with the TLSA records. In this subsection, we focus on how
TLSA records and the corresponding public keys are managed;
more speciﬁcally, we investigate if the TLSA records are used
as intended and how often public and private key pairs are
changed.
Unsuitable Usages The primary purpose of DANE is to let
domain owners use custom certiﬁcates for their TLS connec-
tions by using TLSA records with the DANE-EE or DANE-TA
usage without relying on third party CAs. If the domain owner
has a certiﬁcate issued by a CA, but serves a TLSA record
with the DANE-EE or DANE-TA usage, they do not beneﬁt fully
from the security measures that DANE provides (instead, they
should use the PKIX-EE or PKIX-TA Certificate Usage).
Moreover, the validity periods of such certiﬁcates are usually
determined by CAs, which are usually short.9 Thus, domain
owners incur additional complexity as they need to update
their TLSA records whenever the certiﬁcates are re-issued.
Therefore, a domain name owner should avoid setting their
TLSA records with the DANE-EE or DANE-TA usage when they
serve a certiﬁcate issued by a CA.
We ﬁrst examine how the Certificate Usage ﬁeld is
set in TLSA records by calculating the distribution of the
Certificate Usages of the TLSA records from our latest
snapshot. Unsurprisingly, we observe that the vast majority
of TLSA records (94.29%) use DANE-EE or DANE-TA. We then
conﬁgure OpenSSL [61] to trust the set of root CA certiﬁ-
8_25._tcp.antispam.mailplatform.eu,
alt.mailplatform.eu,
_25._tcp.mx.mailplatform.eu
_25._tcp.mx-alt.mailplatform.eu,
_25._tcp.antispam-
and
9The lifetime of the certiﬁcates issued by LetsEncrypt is 3 months [52].
USENIX Association
29th USENIX Security Symposium    621
 0 0.5 1 1.5 2 2.5 307/2508/0808/2209/0509/1910/0310/1710/31% of domains unable tosupport DANE correctly.com.org.net.nl.secates in the Ubuntu 18.04 LTS root store [24]; the validation
would fail if the certiﬁcates for the TLSA records are custom
certiﬁcates. Surprisingly, we ﬁnd that on average 90.58%
and 90.37% of TLSA records with DANE-EE and DANE-TA
are still valid, which means that the certiﬁcates are valid in
terms of PKIX, not custom certiﬁcates. Consequently, these
records could have used PKIX-EE or PKIX-TA Certificate
Usages, thus having the additional beneﬁt of certiﬁcate val-
idation through two independent mechanisms (DANE and
PKIX). We believe operators do this because they are wor-
ried that sending SMTP servers would reject their custom
certiﬁcates. However, as we will see in the next section, all
of the popular email service providers (i.e., sending SMTP
servers) that we test do not validate the certiﬁcates of the
receiving SMTP servers when they cannot ﬁnd any available
TLSA records.
Key Rollover
Just like other PKIs, DANE also provides
a method for a TLS server to change its public and private
key pairs. This process is called key rollover, and the best
current practice for executing such a rollover is speciﬁed in
an RFC [28].
However, unlike other PKIs, DANE requires more care-
ful consideration when performing key rollovers because of
old DNS records cached on resolvers. Recall that all DNS
responses (including TLSA records) each contain a TTL ﬁeld
indicating how long a given record may be cached. Thus, if
an SMTP server simply switches to a new certiﬁcate and pub-
lishes its corresponding TLSA record immediately, the cached
old TLSA records can result in a mismatch to the new cer-
tiﬁcate, causing a validation failure in some SMTP clients.
Thus, before rolling over to a new certiﬁcate, the administra-
tor needs to publish a new TLSA record in advance (at least
two TTLs of the old TLSA records), while keeping the old one
to let the DNS resolvers of SMTP clients fetch the new and
old TLSA records together.
We examine how frequently SMTP servers roll their keys,
and when they do, if they do this correctly. We only consider
changes where the actual public key in the certiﬁcate and TLSA
record changes. This is relevant because, as discussed earlier,
TLSA records have a Matching Type option that speciﬁes
how certiﬁcates and TLSA records should be matched. If the
Matching Type indicates that matches should be performed
based on the public key only, the certiﬁcate can be renewed
while retaining the same key (which extends the validity of
the certiﬁcate without an actual key rollover).
We ﬁrst ﬁlter certiﬁcates and TLSA records that we can
monitor for the entire measurement period, which leaves us
10,382 certiﬁcates (and their corresponding TLSA records).
Among the certiﬁcates, we ﬁnd that 7,334 (70.6%) certiﬁcates
have never changed their public keys.
We then see whether the other 3,048 certiﬁcates have
changed their keys correctly. To analyze the rollover behav-
iors more accurately, we remove the TLSA records from our
considerations when (1) their TTLs are shorter than our scan
resolution (i.e., 1 hour), (2) their corresponding certiﬁcates
have never been valid10, and (3) we could not capture their
corresponding certiﬁcates when the rollover happened due
to server or measurement errors. After ﬁltering, this leaves
1,460 (47.9%) TLSA records and their certiﬁcates. We make
the following observations from our analysis for this dataset:
First, we observe that only 124 domains (8.5%) domains
have maintained two or more types of TLSA records with
mixed usages such as maintaining DANE-EE and DANE-TA
together; this allows administrators to change the leaf certiﬁ-
cate and its TLSA records with DANE-EE usage immediately
as long as it is signed by the certiﬁcate that the TLSA records
with DANE-TA usage specify. Due to this advantage, we ﬁnd
that 109 (87.9%) of them successfully roll their keys without
any validation failures. Second, we ﬁnd that 1,335 domains
(91.4%) have a single TLSA record usage; in this case, the
administrators need to make sure that they pre-publish the
new TLSA records well in advance of a key rollover. How-
ever, we observe that the vast majority of them (1,257 or
94.2%) experience at least one validation failure during their
rollovers. From further investigation, we observe that 939
of them (74.7%) introduced new certiﬁcates and the corre-
sponding TLSA records at the same time without considering
the TTL of the TLSA records or only introduced new TLSA
records after changing certiﬁcates.
These results highlight the challenges for correctly updat-
ing the keys in two different places in DANE. Considering
that authoritative DNS servers and SMTP servers provide
two disjoint functions, administrators need to add a new TLSA
record on the DNS server in advance, and need to install the
new certiﬁcate in their SMTP server manually after waiting
at least two TTLs.
6 Client-side DANE Support
Even if domains properly manage their TLSA records with
DNSSEC and provide valid certiﬁcates that comply with the
certiﬁcate-related data in TLSA records, an SMTP client can-
not be protected unless it looks up and veriﬁes TLSA records
correctly. We now examine how DANE is supported in the
real world by examining (1) popular email service providers
and (2) popular Mail Transfer Agent (MTA) and DNS soft-
ware.
6.1 Popular Email Service Providers
We ﬁrst examine how popular email service providers have
deployed DANE to authenticate destination mail servers and
encrypt email transport. In order to obtain a list of popu-
lar email providers, we use the approach from a previous
study [36]; we refer to Adobe’s leaked user email database
10In this case, we cannot determine whether they conduct correct
rollovers.
622    29th USENIX Security Symposium
USENIX Association
We then proceed as follows as illustrated in Figure 9.
1. For each email service provider (e.g., gmail.com), we
ﬁrst set up an account as an email sender (e.g.,
PI:EMAIL).
of
the
15
of
an
testbed
email, we
subdomains
2. For each transmission
pick
one
(e.g.,
dnssec-invalid-rrsig.foo.com) to which an email is
sent by an email service provider (PI:EMAIL).
3. The email service provider ﬁrst looks up an MX record of
the testbed subdomain by sending a DNS request to its
DNS resolver, which ultimately forwards to our authorita-
tive DNS server. Thus, we can learn the IP address of the
resolver on which the email service provider relies.
4. If the incoming DNS request from the resolver does not
set the DO bit, it indicates that the resolver does not support
DNSSEC.
5. As we wish to see whether DANE is enabled in the email
service provider (and its DNS resolver), we check if the
DNS resolver also makes a DNS request for TLSA records.
6. We then check if the email service provider (as an SMTP
client) successfully (1) initiates an SMTP connection to
our destination email server, and (2) sends the STARTTLS
command. If so, our DNS server provides a valid or in-
valid certiﬁcate (depending on the requested subdomain
name). In case of an invalid certiﬁcate, we observe if the
email service provider still continues to establish the TLS
connection.
7. Finally, we check if the email has been successfully deliv-
ered to our email server. If our email server fails to receive
the email sent to a misconﬁgured test subdomain, it means
that the email service provider (and its DNS resolver) has
correctly validated the misconﬁgured subdomain, and de-
cided not to send the email.
Experiment Conﬁgurations
At ﬁrst glance, measuring
whether an email service provider (i.e., SMTP client) cor-
rectly supports DANE seems trivial. We can conﬁgure our
DNS server to support DNSSEC and to serve TLSA records.
Also, the destination email server (i.e., SMTP server) is con-
ﬁgured to support STARTTLS with a certiﬁcate for each sub-
domain name; note that some certiﬁcates are inconsistent
with the Certificate Association Data values in their
corresponding TLSA records depending on the misconﬁgura-
tion settings. Then, the SMTP client will send an email to the
SMTP server; we will check whether the email is successfully
received. This may be sufﬁcient for studying email service
providers at a coarse granularity. However we still would
not understand which protocols are (not) supported, or which
mechanisms are (in)correctly implemented. To understand
the ﬁne-grained behavior of every email service provider, we
at least 5 times over a month to make sure they perform consistently.
Figure 9: Timeline for measurement of an email provider’s DANE
support: we sign up for an account and send an email to our testbed
server x∼y; the email provider looks up our domain’s MX record
and TLSA record (if it supports DANE) via its DNS resolver or
by itself z; our authoritative DNS server checks if (a) the email
provider has tried to look up the TLSA record and (b) set the DO bit in
the header {∼|; the email provider initiates an SMTP connection
and sends the STARTTLS command (if it supports STARTTLS).
Once the connection is made, the email is transferred }; our testbed
SMTP server checks if the email has been successfully delivered ~.
from 2013 [43] to rank the email domains based on popularity
and choose the top 25 providers. We also add recent popular
email service providers: protonmail.com, tutanota.com,
zoho.in, fastmail.com, and runbox.com. In total, we have
29 popular email service providers that cover 83 million email
addresses (54%) in the Adobe database. The list of the email
service providers is shown in Table 3. In the following, we
describe the details of our measurement methodology.
Experiment Setup The goal of the experiments is to inves-
tigate how popular email service providers, as SMTP clients,
properly support DANE. To do so, we ﬁrst purchase a second-
level domain name (e.g., foo.com) as an SMTP server in our
testbed, which is conﬁgured to fully support DNSSEC by up-
loading DS records to its top-level domain, the .com zone. We
use BIND [2] to run our authoritative DNS server, which has
DNS/DNSSEC records for 15 different subdomains. Also, we
use Postﬁx [65] as our SMTP server. We conﬁgure the SMTP
server to support STARTTLS and enable the Server Name In-
dication (SNI) [14] extension to serve different certiﬁcates for
individual subdomain names. Note that the SMTP clients (i.e.,
29 email service providers) already support these functions.
We test 15 subdomains mapped to different MX records; 14
subdomains are conﬁgured to test a different combination of
DNSSEC, STARTTLS, and DANE misconﬁgurations, while
one subdomain is correctly conﬁgured.11
11To avoid any potential caching issues at intermediate resolvers, we set
the TTL values of MX and TLSA records to one second; however, if some
email service providers would happen to send DNS queries to the exact same
resolver (e.g., one of the multiple upstream resolvers behind Google DNS),
it could ignore our TTL value, which would interfere with our experiment
results. To minimize this potential issue, we tested all email service providers
USENIX Association
29th USENIX Security Symposium    623
have to test each protocol separately by incorrectly conﬁgur-
ing only one of the DANE-related protocols while keeping
the others correctly conﬁgured. To this end, we conﬁgure our
test subdomains and their email servers as follows:
• DNSSEC: The DNS resolver of an email service provider
must support DNSSEC to check the integrity and authen-
ticity of TLSA records. In order to examine whether the
DNS resolver validates DNS responses correctly using
DNSSEC, we ﬁrst introduce four different misconﬁgured
subdomains whose MX records have missing, incorrect, or
expired RRSIGs, or missing DNSKEYs. Then the email ser-
vice provider sends an email to each of the four subdomains.
We ﬁnally check whether the email has been successfully
received.
Typically, SMTP clients (i.e., email service providers) that
require DNS lookups outsource DNSSEC validation to
their DNS resolvers; DNSSEC-supporting resolvers fetch
and validate DNS responses on behalf of their clients. If
a DNS response is invalid, the DNS resolver returns a
SERVFAIL response to the SMTP client. Otherwise, it for-
wards the DNS response to the SMTP client and sets the
Authenticated Data (AD) bit in the response.
In some cases, the DNS resolver that an SMTP client uses
resides outside its own administrative domain (e.g., it uses
a public DNS resolver like Google Public DNS [31]). We
examine whether the DNS resolver is managed by a third
party such as a public DNS resolver using a WHOIS lookup
(e.g., its AS number). The reason we do this is that a man-
in-the-middle attacker may interfere in the DNS lookup
process towards a resolver outside of the SMTP client’s
administrative domain. For this reason, the DANE stan-
dard strongly recommends against the use of external DNS
resolvers ( [38], section 8.3).
• STARTTLS: The SMTP client must send the STARTTLS
command to the destination email server (i.e., SMTP
server) to fetch and validate the SMTP server’s certiﬁcate.
Thus, we make the SMTP client authenticate the SMTP
server (before sending an email) and check if it sends the
STARTTLS command after negotiating an SMTP connec-
tion with the SMTP server. Our SMTP server presents an
invalid certiﬁcate, and we will check whether the SMTP
client validates it. To this end, the DNS server does not
provide the corresponding TLSA records. The SMTP server
intentionally serves a PKIX-invalid certiﬁcate such as an
expired or self-signed one, or a certiﬁcate whose Common
Name is not consistent with the one in the MX record. Upon
receipt of the certiﬁcate, the SMTP client either (i) detects
the invalid certiﬁcate (and the SMTP connection is termi-
nated), or (ii) accepts the invalid certiﬁcate without any
authentication (thus the SMTP connection is established).
Since the STARTTLS RFC [37] does not specify what a
client should do for an invalid certiﬁcate, it is totally up
to the implementation of the SMTP client. We then check
whether the email has been successfully received, which
means the SMTP client fails to validate certiﬁcates.
• DANE: Finally, we investigate whether email service
providers have deployed DANE validation and whether
they do so correctly. To this end, we introduce four incor-
rectly conﬁgured subdomains; the TLSA records of the four
subdomains each have a wrong (1) Certificate Usage,
(2) Selector, (3) Matching Type, or (4) Certificate
Association Data that does not match the presented cer-
tiﬁcate.12 Before the SMTP client sends the email, we also
check (1) if its DNS resolver also has resolved a TLSA
record from our authoritative DNS server, (2) if it initiates
an SMTP connection with the STARTTLS command, (3) if
it terminates connection after the SMTP server presents a
misconﬁgured certiﬁcate, and (4) if it performs the valida-
tion of TLSA records, and (5) if it detects the Certificate
Association Data in the TLSA record(s) is inconsistent
with the SMTP server’s certiﬁcate.
Experiment results From the experiments, we observe (1)
how the email service providers deploy DNSSEC, START-
TLS, and DANE, and (2) if the corresponding protocols are
correctly implemented.
gmail.com,
and
gmail inbox,
First, we observe that 4 out of 29 email providers
and
(excite.com,
outlook.com) use DNS resolvers that do not support
DNSSEC explicitly by sending DNS requests without setting
the DO bit. Interestingly, we found that google.com and
gmail inbox have tried to fetch MTA-STS records [53];