### Problem Description
You are attempting to create an Ansible playbook to bootstrap your servers. By default, on Linode, you can only log in as the root user with a password. Your playbook logs in as root, creates a non-root user with an SSH key, and disables root and password-based SSH. However, this approach prevents you from running the playbook again since root login is disabled. You want the playbook to be idempotent and not require adding and removing hosts after bootstrapping.

### Solution
To address this issue, you can use a two-step approach. First, check if the non-root user (e.g., `ansible`) exists and can log in. If not, log in as root, create the non-root user, and set up the necessary configurations. On subsequent runs, the playbook will use the non-root user to log in and perform further tasks.

Here's an example of how you can achieve this:

```yaml
---
- hosts: all
  remote_user: root
  gather_facts: no
  tasks:
    - name: Check if ansible user can log in
      command: ssh -q -o BatchMode=yes -o ConnectTimeout=3 ansible@{{ inventory_hostname }} "echo OK"
      delegate_to: 127.0.0.1
      changed_when: false
      failed_when: false
      register: check_ansible_user

    - block:
      - name: Create Ansible user
        user:
          name: ansible
          comment: "Ansible user"
          password: $6$u3GdHI6FzXL01U9q$LENkJYHcA/NbnXAoJ1jzj.n3a7X6W35rj2TU1kSx4cDtgOEV9S6UboZ4BQ414UDjVvpaQhTt8sXVtkPvOuNt.0
          shell: /bin/bash

      - name: Add authorized key for ansible user
        authorized_key:
          user: ansible
          key: "{{ lookup('file', '~/.ssh/id_rsa.pub') }}"
          exclusive: yes

      - name: Allow sudo for ansible user
        copy:
          content: "ansible ALL=(ALL) NOPASSWD:ALL"
          dest: /etc/sudoers.d/ansible
          mode: 0600

      - name: Disable root login via SSH
        lineinfile:
          path: /etc/ssh/sshd_config
          regexp: '^PermitRootLogin'
          line: 'PermitRootLogin no'
          state: present

      - name: Disable password authentication via SSH
        lineinfile:
          path: /etc/ssh/sshd_config
          regexp: '^PasswordAuthentication'
          line: 'PasswordAuthentication no'
          state: present

      - name: Restart SSH service to apply changes
        service:
          name: ssh
          state: reloaded

      when: check_ansible_user.rc != 0

- hosts: all
  remote_user: ansible
  become: yes
  gather_facts: yes
  roles:
    - # Add your roles here
```

### Explanation
1. **Check if ansible user can log in**:
   - The first task attempts to log in as the `ansible` user. If it fails, the `check_ansible_user` variable will have a non-zero return code.
   
2. **Create and configure ansible user**:
   - If the `ansible` user cannot log in, the block of tasks will be executed. This block:
     - Creates the `ansible` user.
     - Adds the SSH public key to the `authorized_keys` file.
     - Configures the `sudoers` file to allow the `ansible` user to use `sudo` without a password.
     - Disables root login and password authentication in the SSH configuration.
     - Restarts the SSH service to apply the changes.

3. **Subsequent runs**:
   - Once the `ansible` user is set up, the playbook can run using the `ansible` user with `become: yes` to perform further tasks.

This approach ensures that the playbook is idempotent and can be run multiple times without issues.