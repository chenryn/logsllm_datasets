QQ
Pinyin
Vee
Guobi
Octopus
iFlytek
Slideit
Jinshou
TouchPal
Baidu∗
Average
13.3
8.2
12
11.8
5.9
7.4
11.4
4.6
13.2
3.1
7.8
3.3
8.4
14.1
11.1
11.8
12
10.3
9.5
11
9.7
15.2
6.5
13.3
10.9
11.3
22.8
22.6
24.3
20.8
0.022
25.5
28.9
13.9
13.5
28
22.1
9
22.5
91
275
31
122
61
61
245
92
152
91
183
61
140
30
40
60
10
20
10
30
10
20
60
30
30
28.3
30
40
30
10
20
10
20
10
30
50
30
40
26.7
Table 1: Time overhead for ﬁnding a quiescent point,
doing checkpoint (C) and rollback (R).
repackaged malicious IME app (described in §2.3), to
evaluate its effectiveness. According to the accessibil-
ity of these IME apps, we conducted three sets of ex-
periments to determine effectiveness: black-box testing,
gray-box testing, and white-box testing.
Baidu
Sogou
QQ
Octopus
TouchPal
Baidu∗
17
44
37
32
70
30
6
30
20
16
28
18
Table 2: #packages observed for the testing apps.
Figure 5: Hexdump of the traced Touchpal package. The
leaked SSN is highlighted.
5.2.1 Black-box Testing
5.2.2 Gray-box Testing
Since most of the IME apps use proprietary unknown
protocols with unknown encryptions, we cannot directly
trace the network packets to conﬁrm our effectiveness.
Therefore, we take a black-box approach to approximat-
ing our result. That is, instead of inspecting the packet
contents, we inspect the packet differences sent by the
IME-apps with I-BOX and without I-BOX, within an
identical experiment setup and time window.
In particular, we ran all these apps using a two-minute
time window, and we typed around 30 non-Latin words
with “PI:EMAIL” as the sensitive word and then ob-
served the packet differences using the Wireshark tool.
Usually, these IME apps will send some packages out
when a user types something that triggers the cloud input
function. Interestingly, we found 6 out of the 11 tested
apps have a different number of packages, as shown in
Table 2. With I-BOX being enabled, there are less pack-
ages to be sent out compared to normal ones. This is
because I-BOX controls the network of the target IME
app when it detects sensitive input data and prevents the
target IME app from leaking the data out.
While such side-channel based black-box testing can-
not fully conﬁrm that we have prevented all leaks, we
believe it is highly likely that I-BOX has stopped them,
even for the other 5 apps that we did not observe pack-
age differences for. (It is highly likely that these IME
apps have buffered the input with the intent to send the
data out later. However, our oblivious sandboxing mech-
anism will clear the buffered sensitive data).
Among these 11 IME apps, we are able to observe the
packet payload of TouchPal (as in discussed in §2.3) be-
cause it uses a plain-text protocol. Therefore, we con-
ducted gray-box testing to conﬁrm I-BOX indeed miti-
gated the privacy leakage. In this experiment, we open a
client “SMS” app to send a short message to one friend
with a social security number (SSN), which is private and
sensitive by default. The text to send is a mixture of both
Latin and non-Latin languages, as well as the number.
Cloud input functionality will be triggered in this case.
Interestingly, without I-BOX’s protection, we found
that Touchpal uploaded not only the keycodes the user
typed as arguments of cloud input, but also the text mes-
sage before the current input cursor that includes the
sensitive social security number to the cloud through an
HTTP POST method. We intercepted this packet using a
man-in-the-middle attack. Part of the packet is displayed
in Figure 5. However, with I-BOX’s protection, we found
that I-BOX successfully detected the critical number and
shutdown its network to stop the leakage of data, and we
did not observe any network trace.
We also studied the privacy warnings generated by An-
droid on which data an IME may collect. Figure 6 shows
that Android generates privacy warnings for two popular
IME apps, Sogou and TouchPal, indicating that they may
collect users’ passwords, credit card number, etc. This
further conﬁrms our conclusion that they collect users’
privacy data.
686  24th USENIX Security Symposium 
USENIX Association
Apps
SMS (phone number)
SMS (message)
Instagram (account)
Instagram (password)
Facebook (account)
Facebook (password)
Alipay
Gmail
Google Play
browser
Without I-BOX
6204562244
Let’s meet tomorrow noon at room 302
PI:EMAIL
fakepassword
PI:EMAIL
dontbelieveit
PI:EMAIL
PI:EMAIL
Ingress
How much is this PS3?
With I-BOX
62045
Let’s meet tomorrow noon at room 302
thisisf
thisisf
nomo
tosom
Ingress
How much is this PS3?
Table 3: Evaluation result w/ repackaged Baidu IME using different client apps.
sensitive phrase in our security policy, the server side can
only receive the parts of the typed characters. For exam-
ple, when a user tries to type her Facebook account thi-
PI:EMAIL, the server side can only receive a
thisisf 4. While partial sensitive input is
part of it, i.e.
still being leaked, we believe it is still hard for attackers
to guess the original message.
5.3 Users Experience
One principal goal of I-BOX is to limit the negative inﬂu-
ence on an end user’s experience as little as possible. To
evaluate this, we tested latency by determining how an
end user would feel when typing characters on devices
protected by I-BOX. For this, we invited a dozen stu-
dents (6 undergraduate and 6 master students) in our Lab
to install I-BOX on their phones, and asked them to use
our system and provide us with feedback. By default,
I-BOX uses the context-based policy and derives all sen-
sitive data from the contacts and cookies. Two of them
also tried to input their girl-friend’s names and birth dates
into I-BOX.
To our pleasure, none of the users complained of any
latency imposed by our system. As shown in Table 4,
there is only 0.4 milliseconds (ms) overhead per charac-
ter imposed by our policy checking. While network shut-
down takes about 180 ms, it is not executed per word and
is instead triggered only when certain sensitive words are
going to be formed. Therefore, the additional overhead
added by I-BOX cannot be detected by end users. This
is because the typing speed for a normal user is 625ms
per character, and the world fast record is 160 ms per
character, as shown in Table 4.
One complaint we received so far is that the users now
need to manually type their account instead of using the
automation features provided by the IME apps. We be-
lieve this is worthwhile for better privacy protection. An-
other complaint is that they need to specify their addi-
tional secrets manually; this will motivate us to design
better UI interface in our future work.
4Note that we regard the sequence after @ as one character because
an attacker can guess the rest by the ﬁrst character most of the time.
(a) Sogou IME App (in Chinese)
(b) TouchPal IME App (in English)
Figure 6: Privacy Warning by Android for two popular
IME apps. The left is shown in Chinese and the right is
shown in English; the essential meanings are the same.
5.2.3 White-box Testing
As discussed in §2.3, we repackaged a very popular
Baidu IME app to log all of the user input data and send
them out to a malicious server we controlled. Hence,
this repackaged IME app is essentially a keylogger. We
were able to perform white-box testing by inspecting the
packet payloads and conﬁrming them with the source
code of our malicious payload. We installed this IME
app on our test phone and then used this phone to en-
ter some user-deﬁned private sensitive data with differ-
ent client apps ranging from SMS, Facebook, and Gmail,
etc. Table 3 shows the data we collected at the server side
with and without I-BOX’s protection.
From this table we can clearly observe that without I-
BOX, the malicious IME app will steal all the data that
a user enters. Consequently, all sensitive data has been
leaked out; with I-BOX, it automatically blocks the net-
work connection so that the server cannot receive any
complete sensitive information. For instance, for pass-
words, the malicious server cannot receive anything as
shown in the Instagram and Facebook case. As I-BOX
shuts down the malicious IME app’s network when it
ﬁnds character sequences that have matched part of the
USENIX Association  
24th USENIX Security Symposium  687
Policy Checking
Network Shutdown
Checkpoint/Restore
Guinness World Records of fastest texter
normal user speed
0.4ms/char
180ms
103ms
160ms/char
625ms/char
Table 4: Statistics regarding the usage latency of I-BOX.
6 DISCUSSIONS AND LIMITATIONS
While I-BOX has made a ﬁrst step to mitigate keystroke
leakage against untrusted IME apps, there are still a num-
ber of limitations in its design and implementation.
Side-channel attacks It has been viable to use side
channels to infer some keystroke information [9, 4].
I-
BOX currently cannot prevent such side channel attacks.
However, such threats are usually less severe than those
of malicious IME apps, which can accurately observe all
user input. We leave it as our future work to address
issues related to the side-channel leakages.
Colluding malware As I-BOX currently only runs an
IME app inside in a sandbox transactionally, it is still
possible that an IME app could collude with another mal-
ware to leak information (i.e., the colluding attack [8]).
For example, an IME app could ﬁrst save the user input
in a local ﬁle, and inform a colluding malware to read
the ﬁle when the transaction has not been rolled back and
then divulge the input. This essentially violates the poli-
cies of I-BOX. However, it is challenging for sandboxing
to reliably prevent this, as studied by TxBox [25].
Security of I-BOX Any new security tools may bring
new security implications as they usually touch security-
sensitive data and I-BOX is of no exception. As I-BOX
can essentially touch all users’ sensitive data, it is essen-
tially a key logger as well. Yet, I-BOX is much simpler
than close-sourced proprietary IME apps (1,700 LOCs
vs. hundreds of thousands LOCs). Regarding whether to
trust I-BOX or other IME apps, third-party agents need to
only audit the code of I-BOX instead of using gray-box
based approaches to auditing the behavior of dozens of
third-party IME apps. Meanwhile, I-BOX is completely
a local service and will not send any private data out of
the phone.
Permission Attacks As I-BOX’s security is based on
Android permission systems, it cannot defend against at-
tacks against the permissions like component hijacking
attacks and confused deputy attacks [23]. We consider
this out of the scope of this paper; actually there have
been a number of prior systems that statically and dy-