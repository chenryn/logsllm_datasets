            message = 'Returned by WinHttpDetectAutoProxyConfigUrl if WinHTTP was unable to discover the URL of the Proxy Auto-Configuration (PAC) file.'
        else:
            title = 'UNKNOWN'
            message = 'unknown'
        msg_max_len = 70
        msg_list = [message[i:i+msg_max_len] for i in range(0, len(message), msg_max_len)]
        print ' ' * alignment + '    => %s' % title
        for msg in msg_list:
            print ' ' * alignment + '       %s' % msg
    def GetCurrentProxies():
        pProxyConfig = WINHTTP_CURRENT_USER_IE_PROXY_CONFIG()
        result = ctypes.windll.winhttp.WinHttpGetIEProxyConfigForCurrentUser(ctypes.byref(pProxyConfig))
        if result == False:
            ShowLastError('WinHttpGetIEProxyConfigForCurrentUser')
            return False, None
        return True, pProxyConfig
    def GetProxyInfoList(pProxyConfig, target_url):
        print 'n[*] Checking proxy configuration alternatives...'
        proxy_list = []
        hSession = ctypes.windll.winhttp.WinHttpOpen(WINHTTP_USER_AGENT,  WINHTTP_ACCESS_TYPE_NO_PROXY, WINHTTP_NO_PROXY_NAME, WINHTTP_NO_PROXY_BYPASS, 0)
        if hSession is None:
            ShowLastError('WinHttpOpen')
            sys.exit()
        WINHTTP_AUTOPROXY_AUTO_DETECT = 0x00000001
        WINHTTP_AUTO_DETECT_TYPE_DHCP = 0x00000001
        WINHTTP_AUTO_DETECT_TYPE_DNS_A = 0x00000002
        WINHTTP_AUTOPROXY_CONFIG_URL = 0x00000002
        if pProxyConfig.fAutoDetect:
            print 'n  (1) Automatically detect settings (enabled)'
            print '      [*] Trying to get the proxy using the conventional method...'
            pAutoProxyOptions = WINHTTP_AUTOPROXY_OPTIONS()
            pProxyInfo = WINHTTP_PROXY_INFO()
            pAutoProxyOptions.dwFlags = WINHTTP_AUTOPROXY_AUTO_DETECT
            pAutoProxyOptions.dwAutoDetectFlags = WINHTTP_AUTO_DETECT_TYPE_DHCP | WINHTTP_AUTO_DETECT_TYPE_DNS_A
            pAutoProxyOptions.lpszAutoConfigUrl = 0
            lpcwszUrl = ctypes.wintypes.LPCWSTR(target_url)
            result = ctypes.windll.winhttp.WinHttpGetProxyForUrl(hSession, lpcwszUrl, ctypes.byref(pAutoProxyOptions), ctypes.byref(pProxyInfo))
            if result == False:
                ShowLastError('WinHttpGetProxyForUrl', 6)
                print 'n      [*] Trying to get the proxy using the AutoConfigURL...'
                dwAutoDetectFlags = WINHTTP_AUTO_DETECT_TYPE_DHCP | WINHTTP_AUTO_DETECT_TYPE_DNS_A
                ppwszAutoConfigUrl = ctypes.wintypes.LPWSTR()
                result = ctypes.windll.winhttp.WinHttpDetectAutoProxyConfigUrl(dwAutoDetectFlags, ctypes.byref(ppwszAutoConfigUrl))
                if result == False:
                    ShowLastError('WinHttpDetectAutoProxyConfigUrl', 10)
                else:
                    print '      [+] Trying to get the proxy from the obtained URL (%s)' % ppwszAutoConfigUrl.value
                    pAutoProxyOptions.dwFlags = WINHTTP_AUTOPROXY_CONFIG_URL
                    pAutoProxyOptions.dwAutoDetectFlags = 0
                    pAutoProxyOptions.fAutoLogonIfChallenged = True
                    pAutoProxyOptions.lpszAutoConfigUrl = ppwszAutoConfigUrl
                    result = ctypes.windll.winhttp.WinHttpGetProxyForUrl(hSession, lpcwszUrl, ctypes.byref(pAutoProxyOptions), ctypes.byref(pProxyInfo))
                    if result:
                        print '      [+] Proxy: %s' % (pProxyInfo.lpszProxy)
                        proxy_list.append(pProxyInfo)
                    else:
                        ShowLastError('WinHttpGetProxyForUrl', 10)
            else:
                print '      [+] Proxy: %s' % (pProxyInfo.lpszProxy)
                proxy_list.append(pProxyInfo)
        if pProxyConfig.lpszAutoConfigUrl:
            print 'n  (2) Use automatic configuration script (%s)' % pProxyConfig.lpszAutoConfigUrl
            pAutoProxyOptions = WINHTTP_AUTOPROXY_OPTIONS()
            pProxyInfo = WINHTTP_PROXY_INFO()
            pAutoProxyOptions.dwFlags = WINHTTP_AUTOPROXY_CONFIG_URL
            pAutoProxyOptions.dwAutoDetectFlags = 0
            pAutoProxyOptions.fAutoLogonIfChallenged = True
            pAutoProxyOptions.lpszAutoConfigUrl = pProxyConfig.lpszAutoConfigUrl
            lpcwszUrl = ctypes.wintypes.LPCWSTR(target_url)
            result = ctypes.windll.winhttp.WinHttpGetProxyForUrl(hSession, lpcwszUrl, ctypes.byref(pAutoProxyOptions), ctypes.byref(pProxyInfo))
            if result == False:
                ShowLastError('WinHttpGetProxyForUrl', 6)
            else:
                print '      [+] Proxy: %s' % (pProxyInfo.lpszProxy)
                proxy_list.append(pProxyInfo)
        if pProxyConfig.lpszProxy:
            print 'n  (3) Use a proxy server for your LAN'
            pProxyInfo = WINHTTP_PROXY_INFO()
            WINHTTP_ACCESS_TYPE_NAMED_PROXY = 3
            pProxyInfo.dwAccessType = WINHTTP_ACCESS_TYPE_NAMED_PROXY
            pProxyInfo.lpszProxy = pProxyConfig.lpszProxy
            pProxyInfo.lpszProxyBypass = pProxyConfig.lpszProxyBypass
            print '      [+] Proxy: %s' % pProxyConfig.lpszProxy
            print '      [+] Proxy Bypass: %s' % pProxyConfig.lpszProxyBypass
            proxy_list.append(pProxyInfo)
        ctypes.windll.winhttp.WinHttpCloseHandle(hSession)
        return proxy_list
    def CheckProxyStatus(proxyInfo, target_server, target_port):
        hSession = ctypes.windll.winhttp.WinHttpOpen(WINHTTP_USER_AGENT,  WINHTTP_ACCESS_TYPE_DEFAULT_PROXY, WINHTTP_NO_PROXY_NAME, WINHTTP_NO_PROXY_BYPASS, 0)
        if hSession is None:
            ShowLastError('WinHttpOpen')
            return
        server_name = ctypes.c_wchar_p(target_server)
        INTERNET_DEFAULT_HTTP_PORT = target_port
        hInternet = ctypes.windll.winhttp.WinHttpConnect(hSession, server_name, INTERNET_DEFAULT_HTTP_PORT, 0)
        if hInternet is None:
            ShowLastError('WinHttpConnect', 8)
            return False
        WINHTTP_FLAG_BYPASS_PROXY_CACHE = 0x00000100
        WINHTTP_FLAG_SECURE = 0x00800000
        dwFlags = WINHTTP_FLAG_BYPASS_PROXY_CACHE
        pwszVerb = ctypes.c_wchar_p('GET')
        pwszObjectName = ctypes.c_wchar_p('')
        hRequest = ctypes.windll.winhttp.WinHttpOpenRequest(hInternet, pwszVerb, pwszObjectName, 0, 0, 0, dwFlags)
        if hRequest is None:
            ShowLastError('WinHttpOpenRequest', 8)
            return False
        WINHTTP_OPTION_PROXY = 38
        result = ctypes.windll.winhttp.WinHttpSetOption(hRequest, WINHTTP_OPTION_PROXY, ctypes.byref(proxyInfo), ctypes.sizeof(proxyInfo))
        if result == False:
            ShowLastError('WinHttpSetOption', 8)
            return False
        WINHTTP_NO_ADDITIONAL_HEADERS = 0
        WINHTTP_NO_REQUEST_DATA = 0
        result = ctypes.windll.winhttp.WinHttpSendRequest(hRequest, WINHTTP_NO_ADDITIONAL_HEADERS, 0, WINHTTP_NO_REQUEST_DATA, 0, 0, 0)
        if result == False:
            ShowLastError('WinHttpSendRequest', 8)
            return False
        else:
            WINHTTP_QUERY_STATUS_CODE = 19
            WINHTTP_QUERY_STATUS_TEXT = 20
            WINHTTP_QUERY_RAW_HEADERS_CRLF = 22
            WINHTTP_HEADER_NAME_BY_INDEX = 0