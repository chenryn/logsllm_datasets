long musthave; // _cpu_capability bits we must have
long canthave; // _cpu_capability bits we cannot have
} commpage_descriptor;
Implementations of the comm area routines are in the osfmk/ppc/commpage/ directory. Let us look
at the example of gettimeofday(), which is both a system call and a comm area routine. It is
substantially more expensive to retrieve the current time using the system call. Besides a regular
system call stub for gettimeofday(), the C library contains the following entry point for calling the
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh16A1.htm 20.08.2007
Chapter 6. The xnu Kernel Page 73 of 137
comm area version of gettimeofday().
.globl __commpage_gettimeofday
.text
.align 2
__commpage_gettimeofday:
ba __COMM_PAGE_GETTIMEOFDAY
Note that _COMM_PAGE_GETTIMEOFDAY is a leaf procedure that must be jumped to, instead of being
called as a returning function.
Note that comm area contents are not guaranteed to be available on all machines. Moreover, in the
particular case of gettimeofday(), the time values are updated asynchronously by the kernel and
read atomically from user space, leading to occasional failures in reading. The C library falls back to
the system call version in the case of failure.
// //sys/gettimeofday.c
int
gettimeofday(struct timeval *tp, struct timezone *tzp)
{
...
#if defined(__ppc__) || defined(__ppc64__)
{
...
// first try commpage
if (__commpage_gettimeofday(tp)) {
// if it fails, try the system call
if (__ppc_gettimeofday(tp,tzp)) {
return (-1);
}
}
}
#else
if (syscall(SYS_gettimeofday, tp, tzp) 
#include 
#include 
#define PRIVATE
#define KERNEL_PRIVATE
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh16A1.htm 20.08.2007
Chapter 6. The xnu Kernel Page 74 of 137
#include 
#include 
#define WSPACE_FMT_SZ "24"
#define WSPACE_FMT "%-" WSPACE_FMT_SZ "s = "
#define CP_CAST_TO_U_INT32(x) (u_int32_t)(*(u_int32_t *)(x))
#define ADDR2DESC(x) (commpage_descriptor *)&(CP_CAST_TO_U_INT32(x))
#define CP_PRINT_U_INT8_BOOL(label, item) \
printf(WSPACE_FMT "%s\n", label, \
((u_int8_t)(*(u_int8_t *)(item))) ? "yes" : "no")
#define CP_PRINT_U_INT16(label, item) \
printf(WSPACE_FMT "%hd\n", label, (u_int16_t)(*(u_int16_t *)(item)))
#define CP_PRINT_U_INT32(label, item) \
printf(WSPACE_FMT "%u\n", label, (u_int32_t)(*(u_int32_t *)(item)))
#define CP_PRINT_U_INT64(label, item) \
printf(WSPACE_FMT "%#llx\n", label, (u_int64_t)(*(u_int64_t *)(item)))
#define CP_PRINT_D_FLOAT(label, item) \
printf(WSPACE_FMT "%lf\n", label, (double)(*(double *)(item)))
const char *
cpuCapStrings[] = {
#if defined (__ppc__)
"kHasAltivec", // code_offset);
printf(" code_length = %hd\n", d->code_length);
printf(" commpage_address = %hx\n", d->commpage_address);
printf(" special = %#hx\n", d->special);
#else /* __i386__ */
printf(" code_address = %p\n", d->code_address);
printf(" code_length = %ld\n", d->code_length);
printf(" commpage_address = %#lx\n", d->commpage_address);
#endif
printf(" musthave = %#lx\n", d->musthave);
printf(" canthave = %#lx\n", d->canthave);
}
int
main(void)
{
u_int32_t u;
printf(WSPACE_FMT "%#08x\n", "base address", _COMM_PAGE_BASE_ADDRESS);
printf(WSPACE_FMT "%s\n", "signature", (char *)_COMM_PAGE_BASE_ADDRESS);
CP_PRINT_U_INT16("version", _COMM_PAGE_VERSION);
u = CP_CAST_TO_U_INT32(_COMM_PAGE_CPU_CAPABILITIES);
printf(WSPACE_FMT "%u\n", "number of processors",
(u & kNumCPUs) >> kNumCPUsShift);
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh16A1.htm 20.08.2007
Chapter 6. The xnu Kernel Page 76 of 137
print_cpu_capabilities(u);
CP_PRINT_U_INT16("cache line size", _COMM_PAGE_CACHE_LINESIZE);
#if defined (__ppc__)
CP_PRINT_U_INT8_BOOL("AltiVec available?", _COMM_PAGE_ALTIVEC);
CP_PRINT_U_INT8_BOOL("64-bit processor?", _COMM_PAGE_64_BIT);
#endif
CP_PRINT_D_FLOAT("two52 (2^52)", _COMM_PAGE_2_TO_52);
CP_PRINT_D_FLOAT("ten6 (10^6)", _COMM_PAGE_10_TO_6);
CP_PRINT_U_INT64("timebase", _COMM_PAGE_TIMEBASE);
CP_PRINT_U_INT32("timestamp (s)", _COMM_PAGE_TIMESTAMP);
CP_PRINT_U_INT32("timestamp (us)", _COMM_PAGE_TIMESTAMP + 0x04);
CP_PRINT_U_INT64("seconds per tick", _COMM_PAGE_SEC_PER_TICK);
printf("\n");
printf(WSPACE_FMT "%s", "descriptors", "\n");
// example descriptor
print_commpage_descriptor(" mach_absolute_time()",
_COMM_PAGE_ABSOLUTE_TIME);
exit(0);
}
$ gcc -Wall -I /path/to/xnu/osfmk/ -o commpage32 commpage32.c
$ ./commpage32
base address = 0xffff8000
signature = commpage 32-bit
version = 2
number of processors = 2
cpu capabilities (bits) = 00111000000000100000011100010011
+ kHasAltivec
+ k64Bit
+ kCache128
+ kDataStreamsAvailable
+ kDcbtStreamsRecommended
+ kDcbtStreamsAvailable
+ kFastThreadLocalStorage
+ kHasGraphicsOps
+ kHasStfiwx
+ kHasFsqrt
cache line size = 128
AltiVec available? = yes
64-bit processor? = yes
two52 (2^52) = 4503599627370496.000000
ten6 (10^6) = 1000000.000000
timebase = 0x18f0d27c48c
timestamp (s) = 1104103731
timestamp (us) = 876851
seconds per tick = 0x3e601b8f3f3f8d9b
descriptors =
mach_absolute_time() @ ffff8200
code_offset = 31884
code_length = 17126
commpage_address = 7883
special = 0x22
musthave = 0x4e800020
canthave = 0
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh16A1.htm 20.08.2007
Chapter 6. The xnu Kernel Page 77 of 137
6.8. Kernel Support for Debugging, Diagnostics, and Tracing
In this section, we will look at various facilities in the Mac OS X kernel for both kernel-level and
application-level debugging, diagnostics, and tracing. Note that we will not discuss how to actually
use the kernel debuggers herewe visit that topic in Chapter 10, in the context of creating kernel
extensions.
6.8.1. GDB (Network-Based or FireWire-Based Debugging)
The most convenient way to perform kernel-level debugging on Mac OS X is through the GNU
debugger, GDB, which supports either a network-based or FireWire-based kernel debugging
configuration, both of which require two machines.
The standard Mac OS X kernel includes support for two-machine network-based debugging using
GDB.
In the network-based configuration, GDB running on the debugging machine communicates over
Ethernet with a stub in the target machine's kernel. This remote debugger protocol is called the Kernel
Debugging Protocol (KDP). It uses a variant of TFTP over UDP as the core transfer protocol. The
default debugger-side UDP port number is 41139. The following are examples of requests in the KDP
protocol:
Connection-oriented requests (KDP_CONNECT, KDP_DISCONNECT)
Requests for obtaining client information (KDP_HOSTINFO, KDP_VERSION, KDP_MAXBYTES)
Requests for obtaining executable image information (KDP_LOAD, KDP_IMAGEPATH)
Requests for accessing memory (KDP_READMEM, KDP_WRITEMEM)
Requests for accessing registers (KDP_READREGS, KDP_WRITEREGS)
Requests for manipulating breakpoints (KDP_BREAKPOINT_SET, KDP_BREAKPOINT_REMOVE)
Each KDP requestand the corresponding replyhas its own packet format. Note that the target-side in-
kernel KDP implementation does not use the kernel's networking stack but has its own minimal
UDP/IP implementation.
Two fundamental functions used by the KDP implementation are for sending and receiving protocol
packets. A network driver that supports kernel debugging must provide polled-mode implementations
of these two functions: sendPacket(), the transmit handler, and receivePacket(), the receive
handler. These functions are used only when the kernel debugger is active.
Since a network driver must explicitly support KDP, remote debugging is possible only when using
network interfaces driven by such drivers. In particular, the AirPort driver does not support KDP.
Hence, remote debugging cannot be done over a wireless network.
In the FireWire debugging configuration, KDP is used over a FireWire cable courtesy of a kernel
extension (AppleFireWireKDP.kext) on the target machine and a translator program
(FireWireKDPProxy) on the debugger machine. The translator routes data between the FireWire
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh16A1.htm 20.08.2007
Chapter 6. The xnu Kernel Page 78 of 137
connection and UDP port 41139 on the debugger systemthat is, it acts as a local proxy for the target
machine. GDB still performs network-based debugging, except that it communicates with localhost
instead of directly communicating with the shim on the target machine.
6.8.2. KDB (Serial-Line-Based Debugging)
Although GDB is typically sufficient as a kernel debugger, the Mac OS X kernel also supports a
built-in kernel debugger called KDB, which is more suitableand in some cases may be the only
optionfor debugging low-level kernel components. Since remote debugging with GDB uses network
or FireWire hardware, it cannot be used for kernel debugging before the required hardware is
operational. For example, debugging the built-in Ethernet hardware used by GDB or low-level
hardware interrupt handlers requires the use of the built-in debugger.
KDB's nature and functionality are roughly similar to that of the kdb debugger in BSD variants.
KDB also requires two machines for debugging, although the entire debugger is built into the kernel.
You interact with KDB over a serial line, which means that both the target machine and the
debugging machine must have serial ports. Whereas the debugging machine can have any type of
serial port, including those provided by USB-based or PCI-based serial port adapters, the target
machine must have a built-in hardware serial porttypically on the main logic board. Xserve is an
example of a system model that has such a real serial port.
Recall the discussion of kprintf() initialization from Chapter 5. Serial output from kprintf() is
disabled unless DB_KPRT is set in the debug boot argument. When debug output to a serial port is
enabled, kprintf() requires a serial device that can be directly addressed, since scc_putc()
performs polled I/Oit directly reads and writes serial chip registers. This allows debugging to work
even with interrupts disabled. Figure 629 shows an excerpt from the initialization of the kprintf()
function.
Figure 629. Initialization of the kprintf() function
// pexpert/ppc/pe_kprintf.c
void
PE_init_kprintf(boolean_t vm_initialized)
{