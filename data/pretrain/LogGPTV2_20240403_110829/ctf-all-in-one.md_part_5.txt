/proc/meminfo
系统中关于当前内存的利用状况等的信息：
45
1.3 Linux 基础
$ cat /proc/meminfo
MemTotal: 12226252 kB
MemFree: 4909444 kB
MemAvailable: 8776048 kB
Buffers: 288236 kB
Cached: 3953616 kB
...
/proc/mounts
每个进程自身挂载名称空间中的所有挂载点列表文件的符号链接：
$ cat /proc/mounts
proc /proc proc rw,nosuid,nodev,noexec,relatime 0 0
sys /sys sysfs rw,nosuid,nodev,noexec,relatime 0 0
dev /dev devtmpfs rw,nosuid,relatime,size=6106264k,nr_inodes=152
6566,mode=755 0 0
...
/proc/modules
当前装入内核的所有模块名称列表，可以由 lsmod 命令使用。其中第一列表示模块
名，第二列表示此模块占用内存空间大小，第三列表示此模块有多少实例被装入，
第四列表示此模块依赖于其它哪些模块，第五列表示此模块的装载状态：Live（已
经装入）、Loading（正在装入）和 Unloading（正在卸载），第六列表示此模块在
内核内存（kernel memory）中的偏移量：
$ cat /proc/modules
fuse 118784 3 - Live 0xffffffffc0d9b000
ccm 20480 3 - Live 0xffffffffc0d95000
rfcomm 86016 4 - Live 0xffffffffc0d7f000
bnep 24576 2 - Live 0xffffffffc0d78000
...
/proc/slabinfo
46
1.3 Linux 基础
保存着监视系统中所有活动的 slab 缓存的信息：
$ sudo cat /proc/slabinfo
slabinfo - version: 2.1
# name      : tunables   
: slabdata   
fuse_request 0 20 400 20 2 : tunables 0
0 0 : slabdata 1 1 0
fuse_inode 1 39 832 39 8 : tunables 0
0 0 : slabdata 1 1 0
drm_i915_gem_request 765 1036 576 28 4 : tunables
0 0 0 : slabdata 37 37 0
...
/proc/[pid]
在 /proc 文件系统下，还有一些以数字命名的目录，这些数字是进程的 PID 号，而
这些目录是进程目录。目录下的所有文件如下，然后会介绍几个比较重要的：
$ cat - &
[1] 1060
$ ls /proc/1060/
attr comm fd maps ns
personality smaps syscall
autogroup coredump_filter fdinfo mem numa_maps
projid_map smaps_rollup task
auxv cpuset gid_map mountinfo oom_adj
root stack timers
cgroup cwd io mounts oom_score
sched stat timerslack_ns
clear_refs environ limits mountstats oom_score_ad
j schedstat statm uid_map
cmdline exe map_files net pagemap
setgroups status wchan
/proc/[pid]/cmdline
47
1.3 Linux 基础
启动当前进程的完整命令：
$ cat /proc/1060/cmdline
cat-
/proc/[pid]/exe
指向启动当前进程的可执行文件的符号链接：
$ file /proc/1060/exe
/proc/1060/exe: symbolic link to /usr/bin/cat
/proc/[pid]/root
当前进程运行根目录的符号链接：
$ file /proc/1060/root
/proc/1060/root: symbolic link to /
/proc/[pid]/mem
当前进程所占用的内存空间，由open、read和lseek等系统调用使用，不能被用户
读取。但可通过下面的 /proc/[pid]/maps 查看。
/proc/[pid]/maps
这个文件大概是最常用的，用于显示进程的内存区域映射信息：
48
1.3 Linux 基础
$ cat /proc/1060/maps
56271b3a5000-56271b3ad000 r-xp 00000000 08:01 24904069
/usr/bin/cat
56271b5ac000-56271b5ad000 r--p 00007000 08:01 24904069
/usr/bin/cat
56271b5ad000-56271b5ae000 rw-p 00008000 08:01 24904069
/usr/bin/cat
56271b864000-56271b885000 rw-p 00000000 00:00 0
[heap]
7fefb66cd000-7fefb6a1e000 r--p 00000000 08:01 24912207
/usr/lib/locale/locale-archive
7fefb6a1e000-7fefb6bd1000 r-xp 00000000 08:01 24905238
/usr/lib/libc-2.27.so
7fefb6bd1000-7fefb6dd0000 ---p 001b3000 08:01 24905238
/usr/lib/libc-2.27.so
7fefb6dd0000-7fefb6dd4000 r--p 001b2000 08:01 24905238
/usr/lib/libc-2.27.so
7fefb6dd4000-7fefb6dd6000 rw-p 001b6000 08:01 24905238
/usr/lib/libc-2.27.so
7fefb6dd6000-7fefb6dda000 rw-p 00000000 00:00 0
7fefb6dda000-7fefb6dff000 r-xp 00000000 08:01 24905239
/usr/lib/ld-2.27.so
7fefb6fbd000-7fefb6fbf000 rw-p 00000000 00:00 0
7fefb6fdc000-7fefb6ffe000 rw-p 00000000 00:00 0
7fefb6ffe000-7fefb6fff000 r--p 00024000 08:01 24905239
/usr/lib/ld-2.27.so
7fefb6fff000-7fefb7000000 rw-p 00025000 08:01 24905239
/usr/lib/ld-2.27.so
7fefb7000000-7fefb7001000 rw-p 00000000 00:00 0
7ffde5659000-7ffde567a000 rw-p 00000000 00:00 0
[stack]
7ffde5748000-7ffde574b000 r--p 00000000 00:00 0
[vvar]
7ffde574b000-7ffde574d000 r-xp 00000000 00:00 0
[vdso]
ffffffffff600000-ffffffffff601000 r-xp 00000000 00:00 0
[vsyscall]
49
1.3 Linux 基础
/proc/[pid]/stack
这个文件表示当前进程的内核调用栈信息，只有在内核编译启用
CONFIG_STACKTRACE 选项，才会生成该文件：
$ sudo cat /proc/1060/stack
[] do_signal_stop+0xae/0x1f0
[] get_signal+0x191/0x580
[] do_signal+0x36/0x610
[] exit_to_usermode_loop+0x69/0xa0
[] do_syscall_64+0xf1/0x100
[] entry_SYSCALL_64_after_hwframe+0x3d/0xa2
[] 0xffffffffffffffff
/proc/[pid]/auxv
该文件包含了传递给进程的解释器信息，即 auxv(AUXiliary Vector)，每一项都是由
一个 unsigned long 长度的 ID 加上一个 unsigned long 长度的值构成：
50
1.3 Linux 基础
$ xxd -e -g8 /proc/1060/auxv
00000000: 0000000000000021 00007ffde574b000 !.........t.....
00000010: 0000000000000010 00000000bfebfbff ................
00000020: 0000000000000006 0000000000001000 ................
00000030: 0000000000000011 0000000000000064 ........d.......
00000040: 0000000000000003 000056271b3a5040 ........@P:.'V..
00000050: 0000000000000004 0000000000000038 ........8.......
00000060: 0000000000000005 0000000000000009 ................
00000070: 0000000000000007 00007fefb6dda000 ................
00000080: 0000000000000008 0000000000000000 ................
00000090: 0000000000000009 000056271b3a7260 ........`r:.'V..
000000a0: 000000000000000b 00000000000003e8 ................
000000b0: 000000000000000c 00000000000003e8 ................
000000c0: 000000000000000d 00000000000003e8 ................
000000d0: 000000000000000e 00000000000003e8 ................
000000e0: 0000000000000017 0000000000000000 ................
000000f0: 0000000000000019 00007ffde5678349 ........I.g.....
00000100: 000000000000001a 0000000000000000 ................
00000110: 000000000000001f 00007ffde5679fef ..........g.....
00000120: 000000000000000f 00007ffde5678359 ........Y.g.....
00000130: 0000000000000000 0000000000000000 ................
每个值具体是做什么的，可以用下面的办法显示出来，对比看一看，更详细的可以
查看 /usr/include/elf.h 和 man ld.so ：
51
1.3 Linux 基础
$ LD_SHOW_AUXV=1 cat -
AT_SYSINFO_EHDR: 0x7ffd16be5000
AT_HWCAP: bfebfbff
AT_PAGESZ: 4096
AT_CLKTCK: 100
AT_PHDR: 0x55eb4c59a040
AT_PHENT: 56
AT_PHNUM: 9
AT_BASE: 0x7f61506e8000
AT_FLAGS: 0x0
AT_ENTRY: 0x55eb4c59c260
AT_UID: 1000
AT_EUID: 1000
AT_GID: 1000
AT_EGID: 1000
AT_SECURE: 0
AT_RANDOM: 0x7ffd16bd0ce9
AT_HWCAP2: 0x0
AT_EXECFN: /bin/cat
AT_PLATFORM: x86_64
值得一提的是， AT_SYSINFO_EHDR 所对应的值是一个叫做的 VDSO(Virtual
Dynamic Shared Object) 的地址。在 ret2vdso 漏洞利用方法中会用到（参考章节
6.1.6）。
/proc/[pid]/environ
该文件包含了进程的环境变量：
$ strings /proc/1060/environ
GS_LIB=/home/firmy/.fonts
KDE_FULL_SESSION=true
VIRTUALENVWRAPPER_WORKON_CD=1
VIRTUALENVWRAPPER_HOOK_DIR=/home/firmy/.virtualenvs
LANG=zh_CN.UTF-8
...
52
1.3 Linux 基础
/proc/[pid]/fd
该文件包含了进程打开文件的情况：
$ ls -al /proc/1060/fd
total 0
dr-x------ 2 firmy firmy 0 6月 7 23:37 .
dr-xr-xr-x 9 firmy firmy 0 6月 7 23:37 ..
lrwx------ 1 firmy firmy 64 6月 7 23:44 0 -> /dev/pts/3
lrwx------ 1 firmy firmy 64 6月 7 23:44 1 -> /dev/pts/3
lrwx------ 1 firmy firmy 64 6月 7 23:44 2 -> /dev/pts/3
/proc/[pid]/status
该文件包含了进程的状态信息：
$ cat /proc/1060/status
Name: cat
Umask: 0022
State: T (stopped)
Tgid: 1060
Ngid: 0
Pid: 1060
PPid: 1035
TracerPid: 0
Uid: 1000 1000 1000 1000
Gid: 1000 1000 1000 1000
FDSize: 256
Groups: 3 7 10 56 90 91 93 95 96 98 1000
...
/proc/[pid]/task
一个目录，包含当前进程的每一个线程的相关信息，每个线程的信息分别放在一个
由线程号（tid）命名的目录中：
53
1.3 Linux 基础
$ ls /proc/1060/task/
1060
$ ls /proc/1060/task/1060/
attr clear_refs cwd fdinfo maps net oo
m_score projid_map setgroups stat uid_map
auxv cmdline environ gid_map mem ns oo
m_score_adj root smaps statm wchan
cgroup comm exe io mountinfo numa_maps pa
gemap sched smaps_rollup status
children cpuset fd limits mounts oom_adj pe
rsonality schedstat stack syscall
/proc/[pid]/syscall
该文件包含了进程正在执行的系统调用：
$ sudo cat /proc/1060/syscall
0 0x0 0x7fefb6fdd000 0x20000 0x22 0xffffffff 0x0 0x7ffde5677d48
0x7fefb6b07901
第一个值是系统调用号，后面跟着是六个参数，最后两个值分别是堆栈指针和指令
计数器的值。
参考资料
Linux Filesystem Hierarchy
54
1.4 Web 安全基础
1.4 Web 安全基础
1.4.1 HTML 基础
1.4.2 HTTP 协议基础
1.4.3 JavaScript 基础
1.4.4 常见 Web 服务器基础
1.4.5 OWASP Top Ten Project 漏洞基础
1.4.6 PHP 源码审计基础
55
1.4.1 HTML 基础
1.4.1 HTML 基础
什么是 HTML
HTML 中的标签与元素
HTML 编码
HTML5 新特性
什么是 HTML
HTML 是用来描述网页的一种语言。
HTML 指的是超文本标记语言 (Hyper Text Markup Language)
HTML 不是一种编程语言，而是一种标记语言 (Markup language)
标记语言是一套标记标签 (Markup tag)
HTML 使用标记标签来描述网页
总的来说，HTML 本身不具有编程逻辑，它是一种将格式与内容分离编排的语言。
用户在浏览器端解析的网页大都是由 HTML 语言组成。
由于是通过浏览器动态解析，因此可以使用普通文本编辑器来编写 HTML。
HTML 中的标签与元素
标签和元素共同构成了 HTML 多样的格式和丰富的功能。
HTML 元素以开始标签起始，以结束标签终止。元素处于开始标签与结束标签之
间，标签之间可以嵌套，一个典型的 HTML 文档如下：
56
1.4.1 HTML 基础
Hello World