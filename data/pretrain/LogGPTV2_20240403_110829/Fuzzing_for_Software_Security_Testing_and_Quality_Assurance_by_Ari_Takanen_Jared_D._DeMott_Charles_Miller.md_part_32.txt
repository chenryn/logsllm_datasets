variants that use AFL fuzzing engine to fuzz programs written in other languages,
like Python, Go, and Rust, and even for black-box binaries with QEMU mode.
7.4.2 Code Coverage Guided Fuzzing: libFuzzer
libFuzzer is an in-process, coverage-guided, evolutionary fuzzing engine. In contrast
to AFL, libFuzzer does not fork a new process for each test case; instead libFuzzer
feeds test cases to the target library through a fuzz target function.
An example fuzz target function:
// fuzz_target.cc
extern “C” int LLVMFuzzerTestOneInput(const uint8_t *Data, size_t
Size) {
DoSomethingInterestingWithMyAPI(Data, Size);
return 0; // Non-zero return values are reserved for
future use.
}
9 http://lcamtuf.coredump.cx/afl/#bugs.
6760 Book.indb 216 12/22/17 10:50 AM
7.4 Code Coverage in Fuzzing 217
libFuzzer executes the target function with fuzzed data and data size as an argu-
ment, tracks which code paths are reached, and mutates the input data to maximize
the code coverage. libFuzzer collects the code coverage information using Clang
compiler SanitizerCoverage, and it is designed to be used together with different
sanitizers, which were presented in Chapter 6.
Let’s consider the same SAGE example as previously with AFL. One way to
write it out with libFuzzer fuzz target function would be:
#include 
#include 
#include 
#include 
int foo(char a,char b,char c,char d){
int cnt=0;
if(a == ‘b’)
cnt++;
if(b == ‘a’)
cnt++;
if(c == ‘d’)
cnt++;
if(d == ‘!’)
cnt++;
if(cnt>3)
abort(); //error
return 0;
}
// fuzz_target.cc
extern “C” int LLVMFuzzerTestOneInput(const uint8_t *data, size_t
size) {
if( size = b)
{
(2) if (b <= c)
{
(3) if (c == d)
{
/target
10 http://llvm.org/docs/LibFuzzer.html.
11 “We” for all of Sections 7.5 and 7.6 indicate the research that Mr. DeMott did at Michigan State
University under the direction of Dr. Enbody and Dr. Punch.
6760 Book.indb 219 12/22/17 10:50 AM
220 Advanced Fuzzing
Suppose the initial inputs are a = 10, b = 20, c = 30, d = 40. Since (a) is not
greater than or equal to (b) a decisive or critical branch is taken, meaning there is
no longer a chance to reach the target. Thus, the algorithm will stop and calculate
the fitness. The data is two branches away so the approach level equals 2. The
absolute value of c – d = 10, so a normalized (10) is added to calculate the fitness.
In this case, the fitness = 2 + norm(10).
This works pretty well for some code. But imagine if we’re testing the follow-
ing code:
(s) void flag_example(int a, int b)
{
(1) int flag = 0;
(2) if(a == 0)
(3) flag = 1;
(4) if(b != 0)
(5) flag = 0;
(6) if(flag)
(7) //target
(e) }
What kind of fitness reading can the ET algorithm get from the flag variable?
None. This is because it is not a value under direct control. Thus, the fitness land-
scape has become flat and the search degenerates to a random search.
Consider the following snippet of C code:
(s) double function_under_test (double x)
{
(1) if (inverse(x) == 0)
(2) //target
(e) }
double inverse(double d)
{
(3) if(d == 0)
(4) return 0;
else
(5) return 1/d;
}
Here the fitness landscape is worse than flat, it’s actually deceptive. For high-input
values given to inverse(), lower and lower numbers are returned. The algorithm
believes it is getting closer to zero when in fact it is not.
6760 Book.indb 220 12/22/17 10:50 AM
7.6 Evolutionary Fuzzing: EFS 221
In the simplest case, breeding could occur via single point crossover. Suppose
the algorithm is searching on dword values (an integer on most modern systems).
0x0003 and 0xc0c0 are to mate from the previous generation. The mating algorithm
could simply act as follows:
1. Convert to binary: a=00000011 and b=11001100.
2. Choose a cross or pivot point at random: 0 | 0000011 and 1 | 1001100.
3. a′=10000011 and b′=01001100.
Mutation might also be employed and in the simplest case could just flip a bit
on a random dword in a random location. Such things are done on a predetermined
frequency, and with each generation the subjects under test should become more fit.
7.6 Evolutionary Fuzzing: EFS
This slamming around nature of genetic algorithms to find more fit children is not
unlike the random mutations that are often employed in fuzzing. Also, the notion
of preserving building blocks is key to understanding genetic algorithms. Bits of
significant data need to be present but reordered to find the optimal solution. Often
standards such as network protocols require certain key strings be present, but unex-
pected combinations with attack heuristics might cause the data parsing functions
to die. It seems natural to build on the above ideas to create an EFS, which is avail-
able for download at www.vdalabs.com. There are two key differences between ET
and EFS. ET requires source code and builds a suite of test data that is then used
later for the actual testing. EFS does not need source code, and the testing is done
in real-time as the test cases evolve.
7.6.1 EFS Overview
Evolutionary Fuzzing System or EFS (Figure 7.9) will learn the target protocol by
evolving sessions: a sequence of input and output that makes up a conversation
with the target. To keep track of how well we are doing, we use code coverage as a
session metric (fitness). Sessions with greater fitness breed to produce new sessions.
Over time, each generation will cover more and more of the code in the target. In
particular, since EFS covers code that can be externally exercised, it covers code
on the network attack surface. EFS could be adapted to fuzz almost any type of
interface (attack surface). To aid in the discovery of the language of the target, a
seed file is one of the parameters given to the GPF portion of EFS. The seed file
contains binary data or ASCII strings that we expect to see in this class of protocol.
For example, if we’re testing SMTP some strings we’d expect to find in the seed file
would be: “helo,” “mail to:,” “mail from:,” “data,” “\r\n.r\n,” and so forth. EFS
could find the strings required to speak the SMTP language, but for performance
reasons, initialling some sessions with known requirements (such as a valid user-
name and password, for example) will be beneficial.
EFS uses fuzzing heuristics in mutation to keep the fuzzer from learning the pro-
tocol completely correct. Remember, good fuzzing is not too close to the specification
6760 Book.indb 221 12/22/17 10:50 AM
222 Advanced Fuzzing
Figure 7.9 The Evolutionary Fuzzing System (EFS).
but not too far away, either. Fuzzing heuristics include things like bit-flipping,
long string insertion, and format string creation. Probably even more important
is the implicit fuzzing that a GA performs. Many permutations of valid command
orderings will be tried and retried with varying data. The key to fuzzing is the
successful delivery, and subsequent consumption by the target, of semi-valid ses-
sions of data. Sessions that are entirely correct will find no bugs. Sessions that are
entirely bogus will be rejected by the target. Testers might call this activity good
test case development.
While the evolutionary tool is learning the unfamiliar network protocol, it may
crash the program. That is, as we go through the many iterations of trying to learn
each layer of a given protocol, we will be implicitly fuzzing. If crashes occur, we
make note of them and continue trying to learn the protocol. Those crashes indicate
places of interest in the target code for fixing or exploiting, depending on which
hat is on. The probability of finding bugs, time to convergence, and total diversity
is still under research at this time.
A possible interesting side effect of automatic protocol discovery is the iteration
of paths through a given protocol. Consider, for example, an old VNC authentication
bug. The option to use no authentication was a valid server setting, but it should
never have been possible to exercise from the client side unless specifically set on the
server side. However, this bug allowed a VNC client to choose no authentication
even when the server was configured to force client authentication. This allowed a
VNC client to control any VNC vulnerable server without valid credentials.
This notion indicates that it might be possible to use EFS results, even if no
robustness issues are discovered, to uncover possible security or unintended func-
tionality errors. Data path analysis of the matured sessions would be required at
the end of a run.
6760 Book.indb 222 12/22/17 10:50 AM
7.6 Evolutionary Fuzzing: EFS 223
7.6.2 GpF + paiMei + Jpgraph = EFS
EFS was build upon GPF because the primary author of this research is also the
author of that fuzzer and consequently controls access to the source code. GPF
was designed to fuzz arbitrary protocols given a capture of real network traffic. In
this case, no network sniff is required, as EFS will learn the protocol dynamically.
PaiMei was chosen because if its ability to stalk a process. The process of stalk-
ing involves
• Preanalyzing an executable to find functions and basic blocks;
• Attaching to that executable as it runs and setting breakpoints;
• Checking off those breakpoints as they are hit.
GPF and PaiMei had to be substantially modified to allow the realization of
EFS. PHP code, using the Jpgraph library, was written to access the database to
build and report graphical results.
7.6.3 EFS Data Structures
A session is one full transaction with the target. A session is made up of legs (reads
or writes). Each leg is made up of tokens. A token is a piece of data. Each token
has a type (ASCII, BINARY, LEN, etc.) and some data (“jared,” \xfe340078, etc.).
Sessions are organized into pools of sessions (see Figure 7.10). This organization is