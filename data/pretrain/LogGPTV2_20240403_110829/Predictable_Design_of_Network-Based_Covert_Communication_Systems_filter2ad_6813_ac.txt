states around a ring, and any one input bit results in a tran-
sition of the code to another ring. Toroidal structures can
be formed by linking the rings in such a way that the one-
paths wrap to complete the surface of the structure. The
total number of states of such a code is restricted to be an
exact multiple of r.
The code depicted in Figure 4 is the ﬁrst of a family of
codes constructed as toroidal structures and is referred to
as a Toroid of Squares code; the name emphasizes its ring
shape and size, as well as the overall code structure. Note
that the code is a trellis code, and not a convolutional code.
Also note that standard code size notation (n, k, m) is con-
tinued for convenience, even though a trellis code need not
necessarily use all 2m states. Let the ring (square) in the
upper left corner be denoted as R0, the one below it R1,
the ring to its right R2, and so on. By construction, ev-
ery zero-path ring forms a path-to-self of exactly 4 transi-
tions. Table 1 enumerates the one-paths originating from
each ring R0 state. Every one-path also forms a path-to-self
of exactly 4 transitions. Note the diversity of rings traversed
for each one-path. It can be shown that from any state the
minimum path-to-self, equal-alternate-path, and unequal-
alternate-path is no less than 4 transitions. Therefore, this
code is not vulnerable to an undetectable error mode as a
result of any combination of 3 or less symbol insertions.
A family of toroidal codes can be constructed by varying
the size (shape) of the rings and total state space. Intuitively
the error-correcting capability of the codes increases with
increasing ring and state sizes. Several codes of varying
sizes have been developed by the authors. Two additional
Figure 3. Representation of a Known Good
(4,1,3) Code - Finite State Machine
tinguishable “extra symbols” are added to the de-
code sequence. The code in Figure 3 is very prone
to memory-loss errors as seen by the self-transitions
(path-to-self of length 1) in states S0 and S7.
b ) Equal-alternate-path errors occur when symbol in-
sertions introduce an alternate but equal length path
causing an indistinguishable alternate decode se-
quence. Equal-alternate-path errors cause a ﬁnite
number of message bit errors, but do not cause a loss
of synchronization within the decoded message as
there are no extra symbols added to the decode se-
quence.
c ) Unequal-alternate-path errors occur when symbol
insertions introduce an alternate but unequal length
path causing an indistinguishable alternate decode
sequence. Unequal-alternate-path errors do cause a
loss of synchronization within the decoded message
as there are either extra or fewer symbols added to
the decode sequence.
This categorization of undetectable error modes is a key
consideration of code construction and theoretical reliabil-
ity prediction. A family of trellis codes is presented next
that are capable of handling the three symbol insertion er-
ror modes above. For brevity, the full development of these
codes and the derivation of the reliability expression will
not be explored here. However, evidence of the capabilities
316
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:11:17 UTC from IEEE Xplore.  Restrictions apply. 
 1/10011/11111/1110 1/0001 1/0111 1/10001/00001/01100/11110/00000/1001 0/01100/01110/1000 0/1110 0/0001S0 S1 S2 S3 S4 S5 S6 S7   S0 S3 S2 S1 S4 S7 S6 S5 S8S11S10S9S12S15S14S13S16S19S18S17S20S23S22S21S24S27S26S25S28S31S30S29-1 column +1 column R0 R1 R2 R3 R4 R5 R6 R7 Start
S0
S1
S2
S3
One-Path
Ring Traversal
S0S31S22S25S0 R0R7R5R6R0
S1S8S7S30S1
R0R2R1R7R0
S2S5S12S11S2 R0R1R3R2R0
S3S26S29S4S3 R0R6R7R1R0
Length
4
4
4
4
Table 1. Enumerated Ring0 One-Paths of the
Toroid of Squares Code
and
pvi = 1/(1 + (NS ∗ SN R)/2k).
(7)
Further, under the assumption that all sequences of more
than I incorrect valid symbols received before I or less sig-
nals will cause an undetectable error event, the probability
of an undetectable error event can be computed as follows:
2I+1(cid:88)
(cid:2)2I+1
(cid:3) pj
j
p(U) =
vi p2I+1−j
s
.
(8)
codes are presented in Appendix A.
j=I+1
3.3. Reliability
The capability of a code is generally deﬁned as its ability
to detect and correct for errors [27, 17]. This capability of
the code, along with an analysis of the channel, can be com-
bined to provide an estimate of the reliability of the code,
generally expressed as a bit error rate (BER) [29]. Note that
code reliability is a function of the noisiness of the chan-
nel and it provides a bound on the BER, below which no
decoder can achieve guaranteed error free decoding.
In the previous subsection a family of trellis codes were
introduced as capable of handling increasing numbers of
symbol insertions. The regularized construction of the
codes affords that a general expression for reliability is at-
tainable. Speciﬁcally each code is designed to be capable of
detecting and correcting errors resulting from I or less con-
secutive insertions; beyond I consecutive insertions, unde-
tectable errors may arise. A key factor in determining the
BER of the code is therefore the probability that an unde-
tectable error event will occur. Intuitively the probability of
such events is driven by the “size” of the code, and the SNR
of the channel.
Assume that at any arbitrary time at the receiver, the cur-
rent state of the decoder is known. The next symbol re-
ceived can then be characterized as either valid or invalid.
Valid refers to a received symbol that leads from the cur-
rent state to a valid next state; invalid refers to a received
symbol that does not lead to a valid next state. The valid re-
ceived symbols can be further subdivided into the one that
leads to the correct next state and those that lead to a valid
but incorrect next state. The valid symbols can also be sub-
divided into those that originated as signals and those that
originated as noise. Mapping the selected exploit symbols
onto the code there are 2n, or NS, total symbols, and leav-
ing any state there are 2k valid symbols. Let ps and pvi
denote the probability that a received valid symbol is either
a signal or noise, respectively. Each probability can be ex-
pressed in terms of the channel SNR:
ps = 1/(1 + 2k/(NS ∗ SN R)),
(6)
The expression in Equation 8 is independent of code con-
struction beyond the size and its symbol insertion capabil-
ity rating, I; in fact, it assumes that the code is capable
of handling up to exactly I symbols insertions for every
path from every state. Therefore a means is desired where
an estimate of reliability can be provided that accounts for
the uniqueness of each speciﬁc code. Considering that all
memory-loss errors result in an undetectable error, and un-
der the simplifying assumption that all equal- and unequal-
alternate-paths lead to undetectable errors, a new estimate
can be provided for the overall probability of undetectable
errors:
2I+1(cid:88)
(cid:2)2I+1
(cid:3) pj
j
p∗(U) = ρvulnerability
vip2I+1−j
s
,
(9)
j=I+1
where ρvulnerability represents the fraction of paths of
length I + 1 that make the code vulnerable to undetectable
error modes.
In arriving at a conservative estimate of the bit error rate
three further assumptions are applied. The ﬁrst assumption
is that, on average, undetectable errors will be considered to
occur at uniformly distributed locations in the received mes-
sage. The second assumption is that all undetectable errors
lead to loss of synchronization beyond the point in the mes-
sage of the error. This assumption allows for an estimate to
be determined without enumerating all possible combina-
tions of error modes when multiple undetectable errors do
occur. The third assumption recognizes the fact that when
an undetectable error does occur and the decoding is out of
synchronization or otherwise faulty, there remains a random
chance that each bit is still decoded correctly. Under these
assumptions, the following estimate is provided for the bit
error rate of the designed codes:
L(cid:88)
i=1
BER =
1
2kL
iL
i + 1
(cid:2)L
i
(cid:3) p∗(U)i(1 − p∗(U))L−i.
(10)
To better understand the equation, each major term is
revisited:
317
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:11:17 UTC from IEEE Xplore.  Restrictions apply. 
i) the inner (cid:2)L
(cid:3) p∗(U)i(1 − p∗(U))L−i term repre-
i
sents the likelihood of having exactly i undetectable
events times the number of ways in which this exact
number could occur in a message of size L;
ii) the (iL/(i + 1)) term estimates the number of bits
in the message which are subject to loss of synchro-
nization under the assumption that the i error events
are uniformly distributed throughout the message;
iii) 1/L normalizes to yield bit error rates; and
iv) 1/2k accounts for the fact that even under the as-
sumption of lost synchronization, the decoder still
has this random chance of getting the bit correct.
3.4 Representative Symbol Insertion Er-
ror Correcting Codes with Results
The theoretically predicted and experimental BERs for
a sample of the developed codes is presented next. The
ﬁrst code illustrated in Figure 5 is referred to as a Toroid
of Hexagons code. This binary (input) code consists of 10
hexagons for a total of 60 states and 120 output symbols.
Each hexagon (ring) deﬁnes the zero-paths, and thus the
minimum length zero-path is 6. Again the one-paths pro-
vide the transitions from hexagon to hexagon, with these
traversals designed so as to yield long paths-to-self as well
as long equal- and unequal-alternate paths, again of length
6 or longer. The predicted and empirical reliability of this
code is provided in Figure 6.
Figure 6. Theoretical and Empirical Reliability
- Toroid of Hexagons
symbols. As the ring size and the total state size increases so
too do the path lengths, yielding codes with ever-increasing
symbol insertion error correction capabilities. This is evi-
denced in the reliability results presented in Figure 8.
Figure 7. Square Toroid of Octagons / (8,1,7)
4. A System Design with Experimental Results
This section will describe a system design and an ex-
periment that illustrates the general steps to the design of a
covert communication system and validates the theoretical
results. In summary, the steps of the design process are: se-
lection of the exploit ﬁeld, selection of an appropriate set
of exploit symbols from within the exploit ﬁeld, characteri-
zation of the exploit, characterization of the channel, selec-
tion of an appropriate code, and selection of an appropriate
Figure 5. Toroid of Hexagons / (7,1,6)
The next code presented in Figure 7 is the Square Toroid
of Octagons code, a binary code consisting of a square grid
of 16 octagons with a total of 128 states and 256 output
318
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 03:11:17 UTC from IEEE Xplore.  Restrictions apply. 
 -1 column +1 column +2 rows -2 rows -2 rows *Hexagon rings all rotate clockwise *     *Octagon rings all rotate clockwise Version 1: 0 column offset  Version 2: -2 column offset  * Version 1: 0 column offset  Version 2: +2 column offset  Figure 8. Theoretical and Empirical Reliability
- Square Toroid of Octagons
Figure 10. Predicted System Results as a
Function of SNR
will use as many of the 260 exploit symbols as possible. A
(8, 1, 7) code is the most obvious choice, since the maxi-
mum number of output symbols is given by 28, or 256. For
the experiment, the Square Toroid of Octagons from Ap-
pendix A is a good choice as it uses the full 256 exploit
symbols and is capable of handling a high number of in-
sertions, namely 7. The total number of exploit symbols,
Ns, is known and the proportion of naturally occurring ex-
ploit symbols, νs, is computed as the number of exploit
symbols times the average probability. Speciﬁcally, νs =
0.0839. The last system design parameter to be selected is
the message length. A good heuristic for choosing the mes-