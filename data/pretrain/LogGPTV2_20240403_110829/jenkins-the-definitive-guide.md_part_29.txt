the properties from the parent job automatically.
Any inherited property can be overridden, as demonstrated in google-guice-inheritance-2.0-maven job
where Maven 2 is used instead of Maven 3. If you want to “cancel” an inherited property, you will need
to override it with an empty value.
Jobs inheritance is a very powerful concept that allows jobs to form hierarchical groups of any kind and
for any purpose. You can group your CI, nightly or release jobs this way, centralizing shared execution
triggers, Maven goals or mail recipients in parent jobs. This approach borrowed from an OOP world
solves the problem of maintaining jobs sharing a number of identical properties.
10.5.3. Plugin Support
In addition to configuring a job and reusing its definitions, you can apply special support for a number
of Jenkins plugins. Right now, a simplified usage of Parameterized Trigger and Artifactory plugins is
provided, with support for other popular plugins planned for future versions.
278
Below is an example of invoking jobs with the Parameterized Trigger plugin. Using this option assumes
you have this plugin installed already:
google-guice-inheritance-trunk
...
google-guice-inheritance-3.0-rc3,
google-guice-inheritance-2.0-maven
google-guice-inheritance-3.0-rc3
...
google-guice-inheritance-2.0-maven
...
The  element lets you invoke other jobs each time the current job finishes successfully. You
can create a pipeline of jobs this way, making sure each job in a pipeline invokes the following one. Note
that if there are more than one Jenkins executors available at the moment of invocation, the specified
jobs will start running in parallel. For serial execution you’ll need to connect each upstream job to a
downstream one with .
By default invocation happens only when the current job is stable. This can be modified, as shown in
the following examples:
jobA, jobB, jobC
true
jobA, jobB, jobC
true
jobA, jobB, jobC
false
false
true
The first invocation in the example above always invokes the downstream jobs. It can be used for a
pipeline of jobs that should always be executed even if some of them or their tests fail.
279
The second invocation in the example above invokes downstream jobs even if an upstream job is
unstable: the invocation happens regardless of test results. It can be used for a pipeline of jobs that are
less sensitive to tests and their failures.
The third invocation in the example above invokes downstream jobs only when an upstream job fails
but not when it is stable or unstable. You can find this configuration useful when a failing job needs to
perform additional actions beyond traditional email notifications.
Artifactory5 is a general purpose binaries repository that can be used as a Maven repository manager. The
Jenkins Artifactory plugin6, shown in Figure 10.29, “Artifactory Jenkins plugin configuration”, provides
a number of benefits for Jenkins build jobs. We have already reviewed some of them in Section 5.9.4,
“Deploying to an Enterprise Repository Manager”, including an ability to deploy artifacts upon job
completion or to send builds environment info together with artifacts for their better traceability.
Figure 10.29. Artifactory Jenkins plugin configuration
5 http://jfrog.org
6 http://wiki.jenkins-ci.org/display/JENKINS/Artifactory+Plugin
280
You can also use the Artifactory Jenkins plugin in conjunction with the Maven Jenkins Plugin to deploy
artifacts to Artifactory, as shown in the following example:
...
http://artifactory-server/
true
true
true
Default deployment credentials are specified when Jenkins is configured in the Manage
Jenkins#Configure System screen. They can be also specified for each Jenkins job. The default Maven
repositories are libs-releases-local and libs-snapshots-local. You can find more details in
the plugin’s documentation at http://wiki.jenkins-ci.org/display/JENKINS/Artifactory+Plugin.
10.5.4. Freestyle Jobs
In addition to Maven jobs, the Maven Jenkins Plugin allows you to configure Jenkins freestyle jobs.
An example is shown here:
free-style
free
git
git://github.com/evgeny-goldin/maven-plugins-test.git
apache-maven-3
-Xmx128m -XX:MaxPermSize=128m -ea
plugins-version = 0.2.2
pwd; ls -al; du -hs .
Freestyle jobs let you execute a shell or batch command, run Maven or Ant, and invoke other jobs. They
provide a convenient run-time environment for system scripts or any other kind of activity not readily
available with Jenkins or one of its plugins. Using this approach, you can generate Freestyle build job
configuration files in a similar way to the approach we have seen for Maven build jobs, which can help
make your build environment more consistent and maintainable.
10.6. Coordinating Your Builds
Triggering downstream build jobs is easy enough. However, when setting up larger and more
complicated build job setups, you sometimes would like builds to be able to run concurrently, or possibly
281
wait for certain build jobs to finish before proceeding. In this section, we will look at techniques and
plugins that can help you do this.
10.6.1. Parallel Builds in Jenkins
Jenkins has built-in support for parallel builds—when a build job starts, Jenkins will assign it to the
first available build node, so you can potentially have as many parallel builds running as you have build
nodes available.
If you need to run slight variations of the same build job in parallel, multiconfiguration build jobs (see
Section 10.4, “Multiconfiguration Build Jobs”) are an excellent option. This can come in handy as a way
of accelerating your build process. A typical application of multiconfiguration build jobs in this context
is to run integration tests in parallel. One strategy is to set up an integration test build job that can be run
in different ways to execute different subsets of the integration tests. You could define separate Maven
profiles, for example, or configure your build to use a command-line parameter to decide which tests
to run. Once you have set up your build script in this way, it is easy to configure a multiconfiguration
build job to run the subsets of your integration tests in parallel.
You can also get Jenkins to trigger several downstream builds in parallel, simply by listing them all in
the “Build other projects” field (see Figure 10.30, “Triggering several other builds after a build job”).
The subsequent build jobs will be executed in parallel as much as possible. However, as we will see
further on, this may not always be exactly what you need.
Figure 10.30. Triggering several other builds after a build job
10.6.2. Dependency Graphs
Before we investigate the finer points of parallel builds, it is useful to be able to visualize the relationships
between your build jobs. The Dependency Graph View plugin analyzes your build jobs and displays
a graph describing the upstream and downstream connections between your jobs. This plugin uses
graphviz7, which you will need to install on your server if you don’t already have it.
This plugin adds a Dependency Graph icon in the main menu, which displays a graph showing the
relationships between all the build jobs in your project (at the dashboard level), or all of the build jobs
related to the current build job (when you are inside a particular project [see Figure 10.31, “A build
7 http://www.graphviz.org
282
job dependency graph”]). What’s more, if you click on a build job in the graph, Jenkins will take you
directly to the project page of that build job.
Figure 10.31. A build job dependency graph
10.6.3. Joins
When setting up more complicated build pipelines, you frequently come across situations where a
build job cannot proceed until a number of other build jobs have been completed, but that these
upstream build jobs do not need to be executed sequentially. For example, in Figure 10.31, “A build job
dependency graph”, imagine that the phoenix-deploy-to-uat build job actually requires three jobs
to succeed before it can be executed: phoenix-compatibility-tests, phoenix-load-tests, and
phoenix-performance-tests.
We can set this up by using the Joins plugin, which you will need to install in the usual way via the
Update center. Once installed, you configure a join in the build job that initiates the join process (in our
example, this would be phoenix-web-tests). In our example, we need to modify the phoenix-web-
tests build job so that it triggers the phoenix-compatibility-tests, phoenix-load-tests,
and phoenix-performance-tests first, and then, if these three succeed, the phoenix-deploy-
to-uat build job.
We do this by simply configuring the Join Trigger field with the name of the phoenix-deploy-to-uat
build job (see Figure 10.32, “Configuring a join in the phoenix-web-tests build job”). The “Build other
projects” field is not modified, and still lists the build jobs to be triggered immediately after the current
one. The Join Trigger field contains the build jobs to be built once all of the immediate downstream
build jobs have finished.
283
Figure 10.32. Configuring a join in the phoenix-web-tests build job
As a result, you no longer need the original build trigger for the final build job, as it is now redundant.
This new flow shows up nicely in the dependency graphs as illustrated in Figure 10.33, “A more
complicated build job dependency graph”.
Figure 10.33. A more complicated build job dependency graph
10.6.4. Locks and Latches
In other situations, you might be able to run a series of builds in parallel to some degree, but certain build
jobs cannot be run in parallel because they access concurrent resources. Of course, well-designed build
284
jobs should strive to be as independent as possible, but sometimes this can be difficult. For example,
different build jobs may need to access the same test database or files on the hard disk, and doing so
simultaneously could potentially compromise the results of the tests. Or a performance build job may
need exclusive access to the test server, in order to have consistent results each time.
The Locks and Latches plugin lets you get around this problem to some extent. This plugin lets you set
up “locks” for certain resources, in a similar way to locks in multithreaded programming. Suppose, for
example, in the build jobs depicted in Figure 10.33, “A more complicated build job dependency graph”,
that the load tests and the performance tests run against a dedicated server, but only one build job can
run against this server at any one time. Imagine furthermore that the performance tests for other projects
also run against this server.
To avoid contention over the performance server, you could use the Locks and Latches plugin to set up
a “lock” reserving access to this server to a single build job at a time. First, in the System Configuration
page, you need to add a new lock in the Locks section (see Figure 10.34, “Adding a new lock”). This
lock will then be available to all build jobs on the server.
Figure 10.34. Adding a new lock
Next, you need to set up each build job that will be using the contended resource. In the Build
Environment section, you will find a Locks field. Tick the checkbox and select the lock you just created
(see Figure 10.35, “Configuring a build job to use a lock”). Once you do this for each of the build jobs
that need to access the resource in question, only one of these build jobs will ever be able to run at a
given time.
Figure 10.35. Configuring a build job to use a lock
10.7. Build Pipelines and Promotions
Continuous Integration is not just about automatically building and testing software, but can also help in
the broader context of the software product development and release life cycle. In many organizations,
285
the life of a particular version of an application or product starts out in development. When it is deemed
ready, it is passed on to a QA team for testing. If they consider the version acceptable, they pass it on to
selected users for more testing in a User Acceptance Testing (UAT) environment. And if the users are
happy, it is shipped out into production. Of course, there are almost as many variations on this as there
are software development teams, but one common principle is that specific versions of your software
are selected, according to certain quality-related criteria, to be “promoted” to the next stage of the life
cycle. This is known as build promotion, and the broader process is known as a build pipeline. In this
section, we will look at how you can implement build pipelines using Jenkins.
10.7.1. Managing Maven Releases with the M2Release Plugin
An important part of any build pipeline is a well-defined release strategy. This involves, among other
things, deciding how and when to cut a new release, and how to identify it with a unique label or version
number. If you are working with Maven projects, using the Maven Release plugin to handle version
numbers comes as a highly recommended practice.
Maven projects use well-defined and well-structured version numbers. A typical version number is made
up of three digits (e.g., “1.0.1”). Developers work on SNAPSHOT versions (e.g.,“1.0.1-SNAPSHOT”),
which, as the name would indicate, are not designed to be definitive. The definitive releases (e.g.,
“1.0.1”) are built once and deployed to the local enterprise repository (or the central Maven repository
for open source libraries), where they can be used in turn by other projects. The version numbers used
in Maven artifacts are a critical part of Maven’s dependency management system, and it is strongly
advised to stick to the Maven conventions.
The Maven Release plugin helps automates the process of updating Maven version numbers in your
projects. In a nutshell, it verifies, builds and tests your application, bumps up the version numbers,
updates your version control system with the appropriate tags, and deploys the released versions of your
artifacts to your Maven repository. This is a tedious task to do by hand, so the Maven Release plugin
is an excellent way to automate things.
However the Maven Release plugin can be fickle, too. Uncommitted or modified local files can cause the
process to fail, for example. The process is also time-consuming and CPU intensive, especially for large
projects: it builds the application and runs the entire set of unit and integration tests several times, checks
out a fresh copy of the source code from the repository, and uploads many artifacts to the Enterprise
repository. Indeed, this is not the sort of thing you want running on a developer machine.
So it makes good sense to run this process on your build server.
One way to do this is to set up a special manual build job to invoke the Maven Release plugin. However,
the M2Release plugin proposes a simpler approach. Using this plugin, you can add the ability to
build a Maven release version in an existing build job. This way you can avoid duplicating build jobs
unnecessarily, making build job maintenance easier.
Once you have installed this plugin, you can define any build job to also propose a manual Maven
Release step. You do this by ticking the “Maven release build” checkbox in the Build Environment
286
section (see Figure 10.36, “Configuring a Maven release using the M2Release plugin”). Here, you define
the goals you want to execute to trigger the build (typically release:prepare release:perform).
Figure 10.36. Configuring a Maven release using the M2Release plugin
Once you have set this up, you can trigger a Maven release manually using a new menu option called
“Perform Maven Release” (see Figure 10.37, “The Perform Maven Release menu option”).
Figure 10.37. The Perform Maven Release menu option
This will kick off a special build job using the goals you provided in the plugin configuration (see
Figure 10.38, “Performing a Maven release in Jenkins”). Jenkins gives you the option to either use the
default version numbers provided by Maven (for example, version 1.0.1-SNAPSHOT will be released
as version 1.0.1, and the development version number bumped up to 1.0.2-SNAPSHOT), or to provide
287
your own custom numbers. If you want to release a major version, for example, you might choose to
manually specify 1.1.0 as the release version number and 1.1.1-SNAPSHOT as the next development
version number.
If you have a multimodule Maven project, you can choose to provide a single version number
configuration for all modules, or provide a different version number update for each module. Note that
it is generally not recommended practice to provide different version numbers for different modules in
a multimodule project.
Figure 10.38. Performing a Maven release in Jenkins
Depending on your SCM configuration, you may also need to provide a valid SCM username and
password to allow Maven to create tags in your source code repository.
The professional edition of the Nexus Enterprise Repository provides a feature called Staging
Repositories, which is a way of deploying artifacts to a special staging area for further tests before
releasing them officially. If you are using this feature, you need to fine-tune your build server
configuration for best results.
Nexus Professional works by creating a new staging area for each unique IP Address, deploy users
and HTTP User agent. A given Jenkins build machine will always have the same IP address and user.