类型转换器派生自System.ComponentModel名称空间中的基类
TypeCon-verter。需要转换的类的类型用TypeConverter特性定义了类型转换器。WPF使
用许多类型转换器把XML特性转换为特定的类型。ColorConverter、
FontFamilyConverter、PathFigureCollectionConverter、ThicknessConverter以及
GeometryConverter是大量类型转换器中的几个。
29.2.5 把属性用作元素
总是可以使用元素语法给属性提供值。Button类的Background属性可以用子元素
Button. Background设置。下面的代码用特性定义了Button，效果是相同的：
      Click Me!
使用元素代替特性，可以把比较复杂的画笔应用于Background属性（如
LinearGradientBrush），如下面的示例所示（代码文件
XAMLSyntax/MainWindow.xaml）。
      Click Me!
  注意： 当设置示例中的内容时，Content特性和Button.Content元素都不用于
编写内容；相反，内容会直接写入为Button元素的子元素值。这是因为在Button类的基
类ContentControl中，ContentProperty特性通过[ContentProperty（"Content"）]应用。这
个特性把Content属性标记为ContentProperty。这样，XAML元素的直接子元素就应用于
Content属性。
29.2.6 使用集合和XAML
在包含Person元素的ListBox中，已经使用过XAML中的集合。在ListBox中，列表项
直接定义为子元素。另外，LinearGradientBrush包含了一个GradientStop元素的集合。这是
可行的，因为基类ItemsControl把ContentProperty特性设置为该类的Items属性，
GradientBrush基类把ContentProperty特性设置为GradientStops。
下面的长版本代码在定义背景时直接设置了GradientStops属性，并把
GradientStopCollection元素设置为它的子元素：
      Click Me!
在WPF中，要定义数组，可以使用x:Array扩展。x:Array扩展有一个Type属性，可以
用于指定数组元素的类型。
29.3 依赖属性
XAML使用依赖属性完成数据绑定、动画、属性变更通知、样式化等。依赖属性存在
的原因是什么？假设创建一个类，它有100个int型的属性，这个类在一个表单上实例化了
100次。需要多少内存？因为int的大小是4个字节，所以结果是4×100×100 = 40 000字节。
刚才看到的是一个XAML元素的属性？由于继承层次结构非常大，一个XAML元素就定义
了数以百计的属性。属性类型不是简单的int，而是更复杂的类型。这样的属性会消耗大
量的内存。然而，通常只改变其中一些属性的值，大部分的属性保持对所有实例都相同的
默认值。这个难题可以用依赖属性解决。使用依赖属性，对象内存不是分配给每个属性和
实例。依赖属性系统管理一个包含所有属性的字典，只有值发生了改变才分配内存。否
则，默认值就在所有实例之间共享。
依赖项属性也内置了对变更通知的支持。对于普通属性，需要为变更通知实现
InotifyProperty-Changed接口。其方式参见第31章。这种变更机制是通过依赖属性内置
的。对于数据绑定，绑定到.NET属性源上的UI元素的属性必须是依赖属性。现在，详细
讨论依赖属性。
从外部来看，依赖属性像是正常的.NET属性。但是，正常的.NET属性通常还定义了
由该属性的get和set访问器访问的数据成员。
    private int _value;
    public int Value
    {
      get
      {
        return _value;
      }
      set
      {
        _value = value;
      }
    }
依赖属性不是这样。依赖属性通常也有get和set访问器。它们与普通属性是相同的。
但在get和set访问器的实现代码中，调用了GetValue（）和SetValue（）方法。
GetValue（）和SetValue（）方法是基类DependencyObject的成员，依赖对象需要使用这
个类——它们必须在DependencyObject的派生类中实现。在WPF中，基类在
System.Windows名称空间中定义。在UWP中，基类在Windows.UI.Xaml名称空间中定义。
有了依赖属性，数据成员就放在由基类管理的内部集合中，仅在值发生变化时分配数
据。对于没有变化的值，数据可以在不同的实例或基类之间共享。GetValue（）和
SetValue（）方法需要一个DependencyProperty参数。这个参数由类的一个静态成员定
义，该静态成员与属性同名，并在该属性名的后面追加Property术语。对于Value属性，静
态成员的名称是ValueProperty。DependencyProperty. 
Register（）是一个辅助方法，可在
依赖属性系统中注册属性。在下面的代码片段中，使用Register（）方法和4个参数定义了
属性名、属性的类型和拥有者（即MyDependencyObject类）的类型，使用
PropertyMetadata指定了默认值（代码文件
DependencyObject[WPF|UWP]/MyDependencyObject.cs）。
    public class MyDependencyObject: DependencyObject
    {
      public int Value
      {
        get { return (int)GetValue(ValueProperty); }
        set { SetValue(ValueProperty, value); }
      }
      public static readonly DependencyProperty ValueProperty =
        DependencyProperty.Register("Value", typeof(int),
            typeof(MyDependencyObject), new PropertyMetadata(0));
    }
29.3.1 创建依赖属性
下面的示例定义的不是一个依赖属性，而是3个依赖属性。MyDependencyObject类定
义了依赖属性Value、Minimum和Maximum。所有这些属性都是用
DependencyProperty.Register（）方法注册的依赖属性。GetValue（）和SetValue（）方法
是基类DependencyObject的成员。对于Minimum和Maximum属性，定义了默认值，用
DependencyProperty.Register（）方法设置该默认值时，可以把第4个参数设置为
PropertyMetadata。使用带一个参数PropertyMetadata的构造函数，把Minimum属性设置为
0，把Maximum属性设置为100（代码文件
DependencyObject[WPF|UWP]/MyDependencyObject.cs）。
    public class MyDependencyObject: DependencyObject
    {
      public int Value
      {
        get { return (int)GetValue(ValueProperty); }
        set { SetValue(ValueProperty, value); }
      }
      public static readonly DependencyProperty ValueProperty =
        DependencyProperty.Register(nameof(Value), typeof(int),
            typeof(MyDependencyObject));
      public int Minimum
      {
        get { return (int)GetValue(MinimumProperty); }
        set { SetValue(MinimumProperty, value); }
      }
      public static readonly DependencyProperty MinimumProperty =
        DependencyProperty.Register(nameof(Minimum), typeof(int),
            typeof(MyDependencyObject), new PropertyMetadata(0));
      public int Maximum
      {
        get { return (int)GetValue(MaximumProperty); }
        set { SetValue(MaximumProperty, value); }
      }
      public static readonly DependencyProperty MaximumProperty =
        DependencyProperty.Register(nameof(Maximum), typeof(int),
          typeof(MyDependencyObject), new PropertyMetadata(100));
    }
 注意： 
在get和set属性访问器的实现代码中，只能调用GetValue（）和
SetValue（）方法。使用依赖属性，可以通过GetValue（）和SetValue（）方法从外部
访问属性的值，WPF也是这样做的；因此，强类型化的属性访问器可能根本就不会被
调用，包含它们仅为了方便在自定义代码中使用正常的属性语法。
29.3.2 值变更回调和事件
为了获得值变更的信息，依赖属性还支持值变更回调。在属性值发生变化时调用的
Dependency-Property.Register（）方法中，可以添加一个DependencyPropertyChanged事件
处理程序。在示例代码中，把OnValueChanged（）处理程序方法赋予PropertyMetadata对
象的PropertyChangedCallback属性。在OnValueChanged（）方法中，可以用
DependencyPropertyChangedEventArgs（）参数访问属性的新旧值（代码文件
DependencyObject[WPF|UWP]/ MyDependencyObject.cs）。
    public class MyDependencyObject: DependencyObject
    {
      public int Value
      {
        get { return (int)GetValue(ValueProperty); }
        set { SetValue(ValueProperty, value); }
      }
      public static readonly DependencyProperty ValueProperty =
        DependencyProperty.Register(nameof(Value), typeof(int),
          typeof(MyDependencyObject),
          new PropertyMetadata(0, OnValueChanged, CoerceValue));
      // etc.
      private static void OnValueChanged(DependencyObject obj,
                                  DependencyPropertyChangedEventArgs e)
      {
        int oldValue = (int)e.OldValue;
        int newValue = (int)e.NewValue;
        // etc.
      }
    }
29.3.3 强制值回调和WPF
利用WPF，依赖属性支持强制检查。通过强制检查，可以检查属性的值是否有效，
例如该值是否在某个有效范围之内。因此，本例包含了Minimum和Maximum属性。现在
Value属性的注册变更为把事件处理程序方法CoerceValue（）传递给PropertyMetadata对象
的构造函数，再把PropertyMetadata对象传递为DependencyProperty.Register（）方法的一
个参数。现在，在SetValue（）方法的实现代码中，对属性值的每次变更都调用
CoerceValue（）方法。在CoerceValue（）方法中，检查set值是否在指定的最大值和最小
值之间；如果不在，就设置该值（代码文件
DependencyObjectWPF/MyDependencyObject.cs）。
    using System;
    using System.Windows;
    namespace DependencyObjectWPF
    {
      public class MyDependencyObject: DependencyObject
      {
        public int Value
        {
        get { return (int)GetValue(ValueProperty); }
        set { SetValue(ValueProperty, value); }
        }
        public static readonly DependencyProperty ValueProperty =
          DependencyProperty.Register(nameof(Value), typeof(int),
            typeof(MyDependencyObject),
            new PropertyMetadata(0, OnValueChanged, CoerceValue));
        private static object CoerceValue(DependencyObject d, object baseValue)
        {
        int newValue = (int)baseValue;
        MyDependencyObject control = (MyDependencyObject)d;
        newValue = Math.Max(control.Minimum, Math.Min(control.Maximum, newValue))
;
        return newValue;
        }
        // etc.
        public int Minimum
        {
        get { return (int)GetValue(MinimumProperty); }
        set { SetValue(MinimumProperty, value); }
        }
        public static readonly DependencyProperty MinimumProperty =
          DependencyProperty.Register(nameof(Minimum), typeof(int),
            typeof(MyDependencyObject), new PropertyMetadata(0));
        public int Maximum
        {
        get { return (int)GetValue(MaximumProperty); }
        set { SetValue(MaximumProperty, value); }
        }
        public static readonly DependencyProperty MaximumProperty =
          DependencyProperty.Register(nameof(Maximum), typeof(int),
            typeof(MyDependencyObject), new PropertyMetadata(100));
      }
    }
29.4 路由事件
第9章介绍了.NET事件模型。在基于XAML的应用程序中，路由事件扩展了事件模
型。元素包含元素，组成一个层次结构。在路由事件中，事件通过元素的层次结构路由。
如果路由事件在控件中触发，例如按钮，那么可以用按钮处理事件，但它向上路由到所有
父控件，在那里，也可以处理它。这也称为冒泡——事件沿着控件的层次结构冒泡。把事
件的Handled属性设置为true，可以阻止事件路由到父控件。
29.4.1 用于Windows应用程序的路由事件
本节提供了一个用于UWP Windows应用程序的示例。这个应用程序定义的用户界面
包含一个复选框，如果选中它，就停止路由；一个按钮控件，其Tapped事件设置为
OnTappedButton处理程序方法；一个网格，其Tapped事件设置为OnTappedGrid处理程序。
Tapped事件是UWP Windows应用程序的一个路由事件。这个事件可以用鼠标、触摸屏幕
和笔设备触发（代码文件RoutedEventsUWP/MainPage.xaml）：
        Stop Routing
        Clean Status
      Tap me! 
OnTappedXX处理程序方法把状态信息写入一个TextBlock，来显示处理程序方法和事
件初始源的控件（代码文件RoutedEventsUWP / MainPage.xaml.cs）：
    private void OnTappedButton(object sender, TappedRoutedEventArgs e)
    {
      ShowStatus(nameof(OnTappedButton), e);
      e.Handled = CheckStopRouting.IsChecked == true;
    }
    private void OnTappedGrid(object sender, TappedRoutedEventArgs e)
    {
      ShowStatus(nameof(OnTappedGrid), e);
      e.Handled = CheckStopRouting.IsChecked == true;
    }
    private void ShowStatus(string status, RoutedEventArgs e)
    {
      textStatus.Text += $"{status} {e.OriginalSource.GetType().Name}";
      textStatus.Text += "\r\n";
    }
    private void OnCleanStatus(object sender, RoutedEventArgs e)
    {
      textStatus.Text = string.Empty;
    }
运行应用程序，在网格内单击按钮的外部，就会看到处理的OnTappedGrid事件，并
把Grid控件作为触发事件的源：
    OnTappedGrid Grid