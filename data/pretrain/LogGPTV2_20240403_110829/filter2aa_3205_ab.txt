### UPnProxyPot: A Comprehensive Overview

#### Key Features
- **UPnP Emulation**: Sufficient for reaching the injection phase.
- **On-the-fly Proxy Capabilities**: Allows dynamic proxy configuration.
- **Man-in-the-Middle (MITM) Content Inspection and Logging**: Enables content inspection and logging.
- **TLS Stripping**: Facilitates the removal of TLS encryption.
- **Fingerprint Evasion**: Easy to modify for evasion without code changes.
- **Session-based PCAP Capabilities**: Captures and logs entire sessions.
- **Programming Languages**: Written in Golang and Bash.

#### SSDP Emulation
- **SSDP Response**: Lifted directly from the most abused device in research.
- **Configuration Storage**: Stored in a flat file on disk, allowing updates without code modifications.
- **Flexibility**: Any SSDP banner or location can be used, with the requirement to update the UPnP listen socket accordingly.

#### UPnP Emulation
- **UPnP Responses**: Based on the most abused device from research.
- **HTML and XML Storage**: All HTML and XML files are stored in flat files, enabling updates without code changes.
- **Basic File Serving and NAT Interaction Handling**: Manages basic file serving and NAT interactions.
- **SOAP Parsing and Handling**: Uses regular expressions to parse and handle attacker-supplied SOAP data.
- **Error Payloads**: Responds with error payloads if criteria are not met.
- **Response Formatting**: Utilizes standard printf formatting (%s, %d, etc.) to include attacker-supplied data.

#### On-the-fly Proxying
- **Proxy Configuration**: Attackers submit proxy configurations via SOAP.
- **Session Management**: Creates a "session" to scrape and log plaintexts in both directions.
- **TLS MITM**: If the proxied endpoint is TCP/443, it performs a TLS man-in-the-middle attack.

#### TLS Stripping
- **Verification**: Attackers perform some verification.
- **Initial Deployments**: Saw connections but often failed before data transfer.
- **Certificate Fingerprinting**: Attackers fingerprint certificates, initially via subject lines.
- **Automated Cloning**: Scrapes the domain from the ClientHello and fetches the target's certificate information using SNI.
- **Subject Mirroring**: Copies the subject field (e.g., O=Oh Noes LLC; CN=www.domain.lol) and mirrors it in self-signed certificates.
- **Issues**: Encountered a critical issue one day before the Defcon deadline, which remains unresolved.

#### Automated PCAP'ing
- **Technology**: Uses gopacket for on-the-fly PCAP creation with BPF.
- **Session Capture**: Collects PCAPs as attackers interact with proxied injections.
- **Log Analysis**: Facilitates easy session review in packet analysis tools.
- **Disk Space Warning**: High disk usage due to PCAP storage.

#### Deployment and Data Collection
- **1.5 Years in the Wild**:
  - **Nodes**: 14 nodes across a single VPS provider.
  - **Geographic Distribution**: From Dallas to London to Tokyo.
  - **Data Volume**: Over 300GB of PCAPs and logs, hundreds of millions of captured proxy sessions, and billions of log lines.
- **2 Months in the Wild**:
  - **Nodes**: 4 nodes in the US, UK, India, and Japan.
  - **Data Volume**: Over 39GB of PCAPs and logs, 230k+ captured proxy sessions, and 22+ million log lines.
- **Data Loss**:
  - **Impact**: Significant data loss, but trends in new data reflect previous observations.
  - **Partial Recovery**: Some interesting data was saved in notes and smaller carve-outs.

#### Injection Testing Observations
- **Injection Process**:
  - **Testing**: Actors first insert a test proxy instance.
  - **Confirmation**: After verifying functionality, they inject a real proxy.
  - **Utilization and Deletion**: They use the proxy and then attempt to delete it.
- **Example Logs**:
  - **SSDP In**: M-SEARCH request for UPnP root devices.
  - **UPnP In**: GET request for gatedesc.xml and POST requests for AddPortMapping and DeletePortMapping.
  - **HTTP Traffic**: Example of HTTP traffic, including a redirect from Yahoo.
  - **Top Destinations**: Most common destinations include IP & plug, Akamai, Yahoo, and Google.

#### Conclusion
- **Key Takeaways**: The project provides detailed insights into UPnP abuse and injection techniques.
- **Future Work**: Continued monitoring and improvements to address issues and enhance functionality.