➐        EAX = 0;            //signifies success  
     }  
     return 0;  //don’t pause at the breakpoint  
  }
如前所述，这个函数在每次调用 NtQueryInformationProcess
 时执行。这时，栈指针指向该函数的返回地址，这个地址位于传递给 NtQueryInformationProcess
 的5 个参数的顶部。该断点函数首先检查 ProcessInformationClass
 的返回值，以确定调用方是否正请求 ProcessDebugPort
 信息（➊）。如果调用方正请求 ProcessDebugPort
 ，则该函数继续执行，获取返回值指针（➋），检查它是否为非零（➌），最后保存一个零返回值（➍），从而达到隐藏调试器的目的。为了跳过该函数的剩余部分，随后会通过读取保存的返回地址（➎）来修改EIP，然后调整ESP 以模拟stdcall
 返回（➏）。NtQueryInformationProcess
 返回一个NTSTATUS 码，它在返回前于➐处设置为0（成功）。
Falliere的文章中提到的另一个函数是 NtSetInformationThread
 ，你也可以在ntdll.dll中找到这个函数。该函数的原型如下所示：
NTSTATUS NtSetInformationThread(  
   IN HANDLE  ThreadHandle,  
   IN THREADINFOCLASS  ThreadInformationClass,  
   IN PVOID  ThreadInformation,  
   IN ULONG  ThreadInformationLength  
);
有一种反调试技巧，它将ThreadHideFromDebugger
 值传递到ThreadInformationClass
 参数中，它会使线程脱离调试器。要避开这种技巧，我们需要使用和前一个例子一样的基本设置。最后的设置代码如下所示：
func = LocByName("ntdll_NtSetInformationThread");  
AddBpt(func);                  //break at function entry  
SetBptCnd(func, "bpt_NtSetInformationThread()");
相关的断点函数如下所示：
  #define ThreadHideFromDebugger 0x11  
  static bpt_NtSetInformationThread() {  
➊     if (Dword(ESP + 8) == ThreadHideFromDebugger) {//test ThreadInformationClass  
➋        EAX = 0;        //STATUS_SUCCESS  
➌        EIP = Dword(ESP); //just return  
➍        ESP = ESP + 20;   //simulate stdcall  
     }  
     return 0;  
  }
我们测试ThreadInformationClass
 参数的值（➊ ），并避开函数正文（如果用户已经指定ThreadHideFromDebugger
 ）。通过设置我们期望的返回值（➋ ），并从栈中读取保存的返回值来修改指令指针（➌），从而避开函数体。我们通过对 ESP 进行20 字节的调整（➍）来模拟stdcall
 返回。
我们最后讨论的函数为kernel32.dll 中的OutputDebugStringA
 ，Falliere在他的文章中介绍了如何在反调试技巧中应用这个函数。该函数的原型如下所示：
void WINAPI OutputDebugStringA(  
   __in_opt  LPCTSTR lpOutputString  
);
在这个例子中，WINAPI
 是_stdcall
 的同义词，用于指定OutputDebugStringA
 使用的调用约定。严格来讲，这个函数并没有返回值，因为它的原型指定的是void
 返回类型。但是，据Falliere的文章讲述，如果没有调试器依附于正被调用的进程，这个函数返回 1 ；如果在调试器正依附于被调用的进程时，该函数被调用，则它“返回”作为参数传递的字符串的地址。正常情况下，如果_stdcall
 函数确实返回一个值，那它应该返回 EAX寄存器中的值。由于在OutputDe- bugStringA
 返回时，EAX必须保存某个值，因此，我们可以认为这个值就是该函数的返回值。但是，由于正式的返回类型为 void
 ，因此没有文档资料或保证书指出这时 EAX到底保存的是什么值。这个特殊的反调试技巧只是依赖于观察到的函数行为。为阻止观察到的返回值发生变化，我们可以设法确保在OutputDebugStringA
 返回时，EAX包含值1 。下面的 IDC 代码用于实施这个技巧：
    func = LocByName("kernel32_OutputDebugStringA");  
    AddBpt(func);  
    //fix the return value as expected in non-debugged processes  
    //also adjust EIP and ESP  
➊  SetBptCnd(func, "!((EAX = 1) && (EIP = Dword(ESP)) && (ESP = ESP + 8))");
这个例子使用和前一个例子相同的技巧自动定位OutputDebugStringA
 函数的结束部分。但是，与前一个例子不同，到达断点后你需要做的工作在一个IDC 表达式（➊ ）中指定就可以了（不需要专门的函数）。在这个例子中，断点表达式修改（注意，这里是赋值而不是比较）EAX寄存器，以确保它在函数返回时包含值1 ，并且也能调整EIP 和ESP 以避开该函数。我们取消了断点条件，以在所有情况下均跳过断点，因为布尔“与”表达式的结果应始终为非零值。
本书的网站包含一个脚本（HideDebugger.idc），它将我们在这一节介绍的所有要素组合到一个有用的工具中，用于启动调试会话，并同时采取措施来阻止反调试。欲了解更多有关隐藏调试器的信息，请参阅 Ilfak 的博客，其中介绍了几种隐藏技巧6
 。
6. 参见 http://www.hexblog.com/2005/11/simple_trick_to_hide_ida_debug.html
 、http://www.hexblog.com/2005/11/stealth_plugin_1.html
 和http://www.hexblog.com/2005/11/the_ultimate_stealth_method_1.html
 。
25.4 IDAStealth
虽然前一节讨论的 HideDebugger 脚本有助于说明调试器的基本编程功能及“钩住”库函数的一些基础知识，但鉴于现有反调试技巧的庞大数量以及这些技巧的复杂程度，我们需要更加强大的防反调试功能，而这种功能却是简单的脚本所无法提供的。幸好IDAStealth 插件可满足我们对于强大的调试器隐藏功能的需求。IDAStealth 由Jan Newger 编写，是 Hex-Rays 2009年度插件编写竞赛的冠军插件。该插件以 C++ 编写，并提供源代码和二进制两个版本。
表25-1 IDAStealth 插件
名称
IDAStealth
作者
Jan Newger
发布
C++源代码与二进制版本
价格
免费
描述
Windows调试器隐藏插件
信息
http://www.newgre.net/idastealth/
IDAStealth 的二进制组件由一个插件与一个帮助程序库组成，这两个插件都必须安装到/plugins 目录中。激活后，IDAStealth 将显示如图25-6 所示的配置对话框。
图25-6 IDAStealth 配置对话框
你可以使用几个包含大量选项的选项卡来确定采用哪些防反调试技巧。激活后，IDAStealth将开始规避几乎每一种已知的调试器检测技巧，包括那些在 Falliere的文章中讨论的技巧以及由之前开发的 HideDebugger.idc脚本解决的技巧。
25.5 处理异常
有时候，程序希望自行处理它们在执行过程中生成的任何异常。如第 21 章所述，模糊程序常常有意生成异常，以此作为一种反控制流和反调试技巧。但异常通常表示存在问题，而调试器的目的则是帮助你解决这些问题。因此，调试器往往希望处理在程序运行过程中发生的所有异常，以帮助你找到 bug。
如果程序希望自行处理异常，我们需要阻止调试器拦截这些异常，或者在异常被拦截时，我们至少需要采取办法，让调试器将异常转交给我们控制的进程。好在 IDA 的调试器能够传递各个异常，或者自动传递指定类型的所有异常。
自动异常处理通过 Debugger ▶Debugger Options命令配置，其对话框如图 25-7 所示。
图25-7 “调试器设置”对话框
我们可以配置几个事件自动中止调试器，并可以将大量事件自动记录到 IDA 的消息窗口中，除此以外，“调试器设置”对话框可用于配置调试器的异常处理行为。Edit exceptions按钮打开如图25-8 所示的异常配置对话框。
图25-8  异常配置对话框
对于调试器已知的每一种异常类型，这个对话框列出了一个特定于操作系统的异常代码、异常的名称、调试器是否中止进程（Stop/No
 ），以及调试器是否会处理异常，或自动将异常传递给应用程序处理（Debugger/Application
 ）。 /cfg/exceptions.cfg 文件中包含一个主要异常列表以及处理每个异常的默认设置。此外，这个配置文件中还包含一些消息，如果调试器正在执行进程时发生给定类型的异常，这些消息将显示出来。你可以使用一个文本编辑器编辑exceptions.cfg 文件，更改调试器的默认异常处理行为。在 exceptions.cfg 中，值 stop
 和nostop
 用于指出：当一个给定异常发生时，调试器是否应将进程挂起。
你还可以通过异常配置对话框编辑各个异常，逐个会话地（也就是说，在打开特定数据库的同时）配置异常处理。要修改调试器对于一个给定异常类型的行为，在“异常配置”对话框中右击需要修改的异常，并选择 Edit ，得到的“异常处理”对话框如图 25-9 所示。
图25-9 “异常处理”对话框
其中的两个选项对应于 exceptions.cfg 文件中的两个可配置选项，你可以为任何异常配置这些选项。通过第一个选项，你可以指定，当指定类型的异常发生时，调试器是否应中止进程，或者执行是否继续。需要注意的是，如果让调试器处理异常，允许进程继续执行会导致无限的异常生成循环。
通过第二个配置选项可以决定，是否应将一个给定类型的异常传递给被调试的应用程序，以便该应用程序有机会使用它自己的异常处理程序处理这个异常。如果一个应用程序的正常运行需要这类异常处理程序被执行，你应该选择将相关类型的异常传递给该应用程序处理。在分析模糊代码，如第 21 章介绍的tElock 实用工具（它注册有它自己的异常处理程序）生成的模糊代码时，你可能需要这样做。
除非你已配置 IDA 继续执行并向应用程序传递特定的异常类型，否则 IDA 将暂停执行，并在发生异常时向你报告异常。如果你选择继续执行程序，IDA 将显示如图 25-10 所示的Exception Handling（异常处理）对话框。
图25-10 Exception Handling对话框
这时，你可以选择更改 IDA 处理给定异常类型的方式（Change exception definition）、向应用程序传递异常（Ye s），或允许 IDA 忽略异常（No）。如果向应用程序传递异常，应用程序将使用任何已配置的异常处理程序来处理异常。如果选择“No”，IDA 将尝试继续执行，但如果你没有更正负责引发异常的条件，这样做可能会导致故障。
如果你正在遍历代码，并且IDA 确定你即将执行的指令会生成异常，这时会出现一种特殊情况，就像是将设置跟踪标记的int 3
 、icebp
 或popf
 一样。此时 IDA 会显示如图 25-11所示的对话框。
图25-11 异常确认对话框
多数情况下，Run 选项都是最适当的选项，如果没有依附调试器，这时应用程序会看到它所期待的行为（见图 25-11 所示的对话框）。通过此对话框，你确认某个异常即将生成。如果你选择Run，你会立即收到发生异常的通知；当你继续执行时，你将会看到图 25-10 中的Exception Handling 对话框，以确定应如何处理异常。
要确定应用程序如何处理异常，我们需要了解如何跟踪异常处理程序，这又需要我们知道如何定位异常处理程序。在一篇名为“Tracing exception handler”1
 的博客文章中，Ilfak 讨论了如何跟踪Windows SEH处理程序。其基本的概念是搜索应用程序的已安装异常处理程序列表，定位其中有用的异常处理程序。对于 Windows SEH异常，有一个指向该列表顶部的指针，它是线程环境块（TEB ）中的第一个双字。异常处理程序列表是一个标准的链表数据结构，其中包含一个指向链中下一个异常处理程序的指针，以及一个指向处理生成的异常的函数的指针。异常在列表中由一个处理程序往下传递给另一个处理程序，直到选中一个处理程序来处理异常，并通知操作系统进程将继续正常执行。如果没有选中已安装的异常处理程序来处理当前的异常，则操作系统会终止进程，或者当进程被调试时，操作系统会通知调试器，被调试的进程中发生了一个异常。
1. 参见http://www.hexblog.com/2005/12/tracing_exception_handlers.html
 。
在IDA 调试器中，TEB 被映射到一个名为TIB [NNNNNNNN]
 的IDA 数据库段中，这里的
NNNNNNNN
 是线程标识号的 8 位十六进制表示形式。这段中的第一个双字如下所示：
    TIB[000009E0]:7FFDF000 TIB_000009E0_ segment byte public 'DATA' use32  
    TIB[000009E0]:7FFDF000 assume cs:TIB_000009E0_  
    TIB[000009E0]:7FFDF000 ;org 7FFDF000h  
➊  TIB[000009E0]:7FFDF000 dd offset dword_22FFE0
前3 行显示该段的摘要信息，而第四行（➊）包含该段的第一个双字，它指出：第一个异常处理程序记录可以在地址 22FFE0h``（offset dword_22FFE0）
 处找到。如果 IDA 没有为这个特殊的线程安装异常处理程序，则 TEB 中的第一个双字将包含值 0FFFFFFFFh
 ，表示已经到达异常处理程序链的结尾部分。在这个例子中，分析地址 22FFE0h
 处的两个双字，得到以下结果：
Stack[000009E0]:0022FFE0 ➊dword_22FFE0 dd 0FFFFFFFFh ;DATA XREF:TIB[000009E0]:7FFDF000↓o
Stack[000009E0]:0022FFE4             ➋ dd offset loc_7C839AA8
第一个双字（➊）包含值 0FFFFFFFFh
 ，表示这是链中的最后一个异常处理程序记录。第二个双字（➋）包含地址 7C839AA8h（offset loc_7C839AA8）
 ，表示应调用 loc_7C839AA8
 处的函数来处理进程执行过程中发生的任何异常。如果要跟踪这个进程如何处理异常，首先可以在地址7C839AA8h
 处设置一个断点。
由于搜索SEH 链是一个相对简单的任务，调试器可以执行一个有用的功能：在一个窗口中显示为当前线程安装的 SEH 处理程序链。通过这样一个窗口，你可以轻易导航到每一个 SEH 处理程序，这时你可以决定是否在处理程序中插入一个断点。不过，这是 OllyDbg的另一个功能，而IDA 的调试器并没有这个功能。为了弥补这个缺点，我们开发了一个 SEH 链插件，如果从调试器中调用，这个插件可以在一个窗口中显示为当前线程安装的异常处理程序列表。图 25-12 是这个窗口的一个示例。
图25-12 SEH 链窗口
这个插件利用 SDK 的choose2
 函数显示一个非模式对话框，列出当前的异常处理程序链。对于每一个已安装的异常处理程序，对话框显示异常处理程序记录的地址（双字列表记录）及对应的异常处理程序的地址。双击一个异常处理程序，活动反汇编窗口（IDA View-EIP 或IDA View-ESP）将跳转到该 SEH 异常处理函数的地址。这个插件的唯一目的在于简化定位异常处理程序的过程。读者可以在本书的网站上找到 SEH 链插件的源代码。
有关异常处理过程的另一个问题在于异常处理程序如何将控制权转交（如果它选择这样做）给其中发生异常的应用程序。如果操作系统调用一个异常处理函数，它将允许该函数访问CPU 寄存器在发生异常时设置的所有内容。在处理异常的过程中，该函数可能会修改一个或几个CPU 寄存器值，然后将控制权转交给应用程序。这样做是为了让异常处理程序有机会修复进程的状态，从而使进程继续正常执行。如果异常处理程序决定让该进程继续执行，它将使用异常处理程序所做的修改向操作系统发出通知，并还原该进程的寄存器值。如第21 章所述，一些反逆向工程实用工具通过在异常处理阶段修改指令指针的保存值，利用异常处理程序更改进程的执行流。这时如果操作系统将控制权转交给该进程，这个进程将在修改后的指令指针指定的地址处恢复执行。
在有关跟踪异常的博客文章中，Ilfak 讨论了一个事实，即 Windows SEH异常处理程序通过ntdll.dll函数NtContinue