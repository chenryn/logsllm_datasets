  29m       29m         1       {deployment-controller }                Normal      ScalingReplicaSet   Scaled up replica set nginx-deployment-3066724191 to 1
  29m       29m         1       {deployment-controller }                Normal      ScalingReplicaSet   Scaled down replica set nginx-deployment-1564180365 to 2
  2m        2m          1       {deployment-controller }                Normal      ScalingReplicaSet   Scaled down replica set nginx-deployment-3066724191 to 0
  2m        2m          1       {deployment-controller }                Normal      DeploymentRollback  Rolled back deployment "nginx-deployment" to revision 2
  29m       2m          2       {deployment-controller }                Normal      ScalingReplicaSet   Scaled up replica set nginx-deployment-1564180365 to 3
```
## 伸缩Deployment
可使用如下命令伸缩Deployment：
```
$ kubectl scale deployment nginx-deployment --replicas=10
deployment "nginx-deployment" scaled
```
假设您的群集启用了 [horizontal pod autoscaling](https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale-walkthrough/) 功能，您可以为Deployment设置一个autoscaler，并根据现有Pod的CPU利用率，选择要运行的Pod的最小和最大个数。
```
$ kubectl autoscale deployment nginx-deployment --min=10 --max=15 --cpu-percent=80
deployment "nginx-deployment" autoscaled
```
### Proportional scaling（比例缩放）
RollingUpdate Deployment支持同时运行一个应用程序的多个版本。当您或autoscaler伸缩一个正处于升级中（正在进行或暂停）的RollingUpdate Deployment时，Deployment Controller就会平衡现有的、正在活动的ReplicaSet（ReplicaSet with Pod）中新增的副本，以减轻风险。 这称为*比例缩放* 。
例如，您正在运行一个具有10个副本的Deployment，[maxSurge](https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#max-surge)=3， [maxUnavailable](https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#max-unavailable)=2。
```
$ kubectl get deploy
NAME                 DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE
nginx-deployment     10        10        10           10          50s
```
你更新到一个新的镜像，该镜像在集群内部无法找到。
```
$ kubectl set image deploy/nginx-deployment nginx=nginx:sometag
deployment "nginx-deployment" image updated
```
镜像使用ReplicaSet nginx-deployment-1989198191开始升级，但是由于上面设置了maxUnavailable=2，升级将被阻塞。
```
$ kubectl get rs
NAME                          DESIRED   CURRENT   READY     AGE
nginx-deployment-1989198191   5         5         0         9s
nginx-deployment-618515232    8         8         8         1m
```
然后，发起一个新的Deployment扩容请求。autoscaler将Deployment副本增加到15个。Deployment Controller需要决定在哪里添加这个5个新副本。如果我们不使用比例缩放，那么5个副本都将会被添加到新的ReplicaSet中。使用比例缩放，则新添加的副本将传播到所有ReplicaSet中。较大比例会被加入到有更多的副本的ReplicaSet，较低比例会被加入到较少的副本的ReplicaSet。剩余部分将添加到具有最多副本的ReplicaSet中。具有零个副本的ReplicaSet不会被扩容。
在上面的示例中，3个副本将被添加到旧ReplicaSet中，2个副本将添加到新ReplicaSet中。升级进程最终会将所有副本移动到新的ReplicaSet中，假设新副本变为健康状态。
```
$ kubectl get deploy
NAME                 DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE
nginx-deployment     15        18        7            8           7m
$ kubectl get rs
NAME                          DESIRED   CURRENT   READY     AGE
nginx-deployment-1989198191   7         7         0         7m
nginx-deployment-618515232    11        11        11        7m
```
## 暂停与恢复Deployment
在触发一个或多个更新之前，您可以暂停Deployment，然后恢复。这将允许您在暂停和恢复之间应用多个补丁，而不会触发不必要的升级。
例如，使用刚刚创建的Deployment：
```
$ kubectl get deploy
NAME      DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE
nginx     3         3         3            3           1m
$ kubectl get rs
NAME               DESIRED   CURRENT   READY     AGE
nginx-2142116321   3         3         3         1m
```
通过运行以下命令暂停：
```
$ kubectl rollout pause deployment/nginx-deployment
deployment "nginx-deployment" paused
```
然后升级Deployment的镜像：
```
$ kubectl set image deploy/nginx-deployment nginx=nginx:1.9.1
deployment "nginx-deployment" image updated
```
请注意，并不会产生新的ReplicaSet：
```
$ kubectl rollout history deploy/nginx-deployment
deployments "nginx"
REVISION  CHANGE-CAUSE
1   
$ kubectl get rs
NAME               DESIRED   CURRENT   READY     AGE
nginx-2142116321   3         3         3         2m
```
您可以根据需要进行多次更新，例如，更新将要使用的资源：
```
$ kubectl set resources deployment nginx-deployment -c=nginx --limits=cpu=200m,memory=512Mi
deployment "nginx-deployment" resource requirements updated
```
在暂停之前，Deployment的初始状态将继续执行其功能；只要Deployment暂停，Deployment的更新将不会有任何影响。
最终，恢复Deployment并观察一个新的ReplicaSet提供了所有新的更新：
```
$ kubectl rollout resume deploy/nginx-deployment
deployment "nginx" resumed
$ kubectl get rs -w
NAME               DESIRED   CURRENT   READY     AGE
nginx-2142116321   2         2         2         2m
nginx-3926361531   2         2         0         6s
nginx-3926361531   2         2         1         18s
nginx-2142116321   1         2         2         2m
nginx-2142116321   1         2         2         2m
nginx-3926361531   3         2         1         18s
nginx-3926361531   3         2         1         18s
nginx-2142116321   1         1         1         2m
nginx-3926361531   3         3         1         18s
nginx-3926361531   3         3         2         19s
nginx-2142116321   0         1         1         2m
nginx-2142116321   0         1         1         2m
nginx-2142116321   0         0         0         2m
nginx-3926361531   3         3         3         20s
^C
$ kubectl get rs
NAME               DESIRED   CURRENT   READY     AGE
nginx-2142116321   0         0         0         2m
nginx-3926361531   3         3         3         28s
```
**注意：**恢复暂停的Deployment之前，您无法回滚。
## Deployment状态
Deployment在其生命周期中有各种状态。在升级新ReplicaSet时是 [progressing](https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#progressing-deployment) ，也可以是 [complete](https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#complete-deployment) 或 [fail to progress](https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#failed-deployment) 状态。
### Progressing Deployment（进行中的Deployment）
当执行以下任务之一时，Kubernetes将Deployment标记为*progressing* ：
- Deployment创建一个新ReplicaSet。
- 该Deployment正在扩容其最新ReplicaSet。
- Deployment正在缩容其旧版ReplicaSet。
- 新Pod已准备就绪或可用（Ready状态至少持续了 [MinReadySeconds](https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#min-ready-seconds) 时间）。
您可使用`kubectl rollout status` 监视部署的进度。
### Complete Deployment（完成的Deployment）
Deployment具有以下特点时候，Kubernetes将Deployment标记为*complete* ：
- 与Deployment相关联的所有副本都已被更新为您所指定的最新版本，也就是说您所请求的任何更新都已完成。
- 与Deployment相关联的所有副本都可用。
- Deployment的旧副本都不运行。
可使用`kubectl rollout status` 来检查Deployment是否已经完成。如果升级成功，则`kubectl rollout status` 将会返回一个为零的退出代码。
```
$ kubectl rollout status deploy/nginx-deployment
Waiting for rollout to finish: 2 of 3 updated replicas are available...
deployment "nginx" successfully rolled out
$ echo $?
0
```
### Failed Deployment（失败的Deployment）
您的Deployment在尝试部署最新ReplicaSet的过程中可能会阻塞，永远也无法完成。这可能是由于以下一些因素造成的：
- 配额不足
- 就绪探针探测失败
- 镜像拉取错误
- 权限不足
- 范围限制
- 应用程序运行时配置错误
您可以检测到这种情况的一种方法，是在Deployment spec中指定一个期限参数：（ [`spec.progressDeadlineSeconds`](https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#progress-deadline-seconds) ）。 `spec.progressDeadlineSeconds` 表示Deployment Controller等待多少秒后认为Deployment进程已停止。
以下`kubectl` 命令使用`progressDeadlineSeconds` 设置spec，使Controller在10分钟后缺少Deployment进度：
```
$ kubectl patch deployment/nginx-deployment -p '{"spec":{"progressDeadlineSeconds":600}}'
"nginx-deployment" patched
```
一旦超过截止时间，Deployment Controller就会将一个DeploymentCondition添加到Deployment的`status.conditions` ，DeploymentCondition包含以下属性：
- Type=Progressing
- Status=False
- Reason=ProgressDeadlineExceeded
有关状态条件的更多信息，请参阅 [Kubernetes API conventions](https://git.k8s.io/community/contributors/devel/api-conventions.md#typical-status-properties) 。
**注意：**除报告`Reason=ProgressDeadlineExceeded` 以外，Kubernetes不会对停滞的Deployment采取任何行动。 更高级别的协调者，可利用它并采取相应的行动，例如，将Deployment恢复到之前的版本。
**注意：**如果暂停Deployment，Kubernetes不会根据您指定的截止时间检查进度。 您可以在升级过程中安全地暂停Deployment，然后再恢复，这样不会触发超过截止时间的条件。
您的Deployments可能会遇到短暂的错误，这可能是由于您设置的超时时间偏低，或者可能是由于可被视为“短暂”的其他类型的错误。例如，配额不足。 如果您describe Deployment，将可看到以下部分的内容：