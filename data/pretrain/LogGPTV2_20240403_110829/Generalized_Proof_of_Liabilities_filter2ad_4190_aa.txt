title:Generalized Proof of Liabilities
author:Yan Ji and
Konstantinos Chalkias
Generalized Proof of Liabilities
Konstantinos Chalkias
Novi / Facebook
PI:EMAIL
Yan Ji
Cornell Tech & IC3
PI:EMAIL
ABSTRACT
Proof of liabilities (PoL) allows a prover to prove his/her liabilities
to a group of verifiers. This is a cryptographic primitive once used
only for proving financial solvency but is also applicable to domains
outside finance, including transparent and private donations, new
algorithms for disapproval voting and publicly verifiable official
reports such as COVID-19 daily cases. These applications share
a common nature in incentives: it’s not in the prover’s interest
to increase his/her total liabilities. We generalize PoL for these
applications by attempting for the first time to standardize the goals
it should achieve from security, privacy and efficiency perspectives.
We also propose DAPOL+, a concrete PoL scheme extending the
state-of-the-art DAPOL protocol but providing provable security
and privacy, with benchmark results demonstrating its practicality.
In addition, we explore techniques to provide additional features
that might be desired in different applications of PoL and measure
the asymptotic probability of failure.
CCS CONCEPTS
• Security and privacy → Privacy-preserving protocols.
KEYWORDS
distributed audit; blockchains; range proofs; sparse Merkle trees; 
solvency; tax reporting; disapproval voting; fundraising; COVID-19
reporting; credit score
ACM Reference Format:
Yan Ji and Konstantinos Chalkias. 2021. Generalized Proof of Liabilities. In 
Proceedings of the 2021 ACM SIGSAC Conference on Computer and Commu-
nications Security (CCS ’21), November 15–19, 2021, Virtual Event, Republic of 
Korea. ACM, New York, NY, USA, 22 pages. https://doi.org/10.1145/3460120. 
3484802
INTRODUCTION
1 
Companies that accept monetary deposits from consumers, such
as banks and blockchain custodial wallets, are periodically being
audited for accounting and oftentimes financial solvency purposes.
A company being solvent means that it has enough assets to pay its
customers. In other words, the amount of total assets owned by the
company is no less than its total liabilities (customers’ deposits).
Insolvency occurs not only when a company makes bad invest-
ments but also due to panic, i.e., lack of trust from its customers that 
it’s running in a healthy and solvent state. Furthermore, the panic
can spread to other companies to which the insolvent company
This work is licensed under a Creative Commons Attribution International 4.0 
License.
CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea
© 2021 Copyright held by the owner/author(s).
ACM ISBN 978-1-4503-8454-4/21/11.
https://doi.org/10.1145/3460120.3484802
owes money, and lead to a domino effect, i.e., an insolvency of one
company can lead to a “cascade” of insolvencies [61].
Without proper regulation and protection, customers are not
able to get deposits back in full when the bank becomes insolvent.
Americans lost $140 billion due to bank failures in the Great De-
pression by the time the Federal Deposit Insurance Corporation
(FDIC) [44] was created. Similar tragedies of bankruptcy and money
loss occur in the cryptocurrency world as well, even with newly
emerging technologies. A number of exchanges, a type of custodial
cryptocurrency wallets taking users’ deposits and trading on their
behalf, have lost their deposits and declared bankruptcy. At the
collapse of Mt. Gox, one of the oldest exchanges in Bitcoin’s history,
over $450M in customer assets were lost [52].
Traditionally, to secure customer’s deposits, a third party au-
ditor undertakes the role of verifying solvency by crosschecking
transaction records in the company books. However, this is not suf-
ficient to guarantee that the reported amount of total liabilities of a
company is correct. First of all, the records can be manipulated and
the auditor can hardly find out unless he confirms with the corre-
sponding customer. Even if he does so, a misbehaving company can
omit some accounts and report smaller liabilities. In addition, the
auditor can learn sensitive information during the auditing, includ-
ing the company’s individual liabilities (each user’s balance) and
possibly transaction histories. More importantly, customers can-
not tell whether an auditor is colluding with the company [42, 72].
Therefore, to preserve stability and public confidence in financial
systems, we need a transparent and reliable audit of solvency.
Decentralized solutions [8, 13, 19, 20, 25, 73] that require cus-
tomers to jointly participate on the auditing process have been
recently proposed as an alternative or complementary method to
conventional auditing. Decentralized auditing places less trust on
auditors and is more promising because customers can make sure
their own balances are not omitted, which cannot be achieved by
centralized auditing solely. There is a rising demand in standardiz-
ing proof of solvency in the digital assets industry [20, 56].
Proof of liabilities (PoL) [73] is a cryptographic primitive to solve
one half of solvency auditing, the other half being proof of reserves.
The goal of PoL is to prove the size of funds a bank owes to its
customers. Most of existing schemes follow the same principle: a
prover aggregates all of the user balances using some accumulator
and consumers can verify balance inclusion in the reported total
amount. This process is probabilistic and the more the users that
verify inclusions, the better the guarantee of a non-cheating prover.
We provide a formal analysis of failure probability of PoLs.
While PoL seemed limited to custodial services, DAPOL [20]
made the first attempt to apply it to a wide range of applications
where an entity (prover) needs to transparently publish an absolute
value that represents its total obligations against a set of users and
allow users to individually verify the inclusion of the prover’s liabil-
ities to them. For example, a charity can use PoL to prove the total
amount of funds raised to donors for transparency. Non-financial
Session 12D: Decentralized Cryptographic Protocols CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea3465use cases include anything related to obligations or negative re-
views, including reporting COVID cases and complaining about
harmful speech. We revise the applications mentioned in DAPOL
and provide a complete list in appendix A. These applications, in-
cluding PoL for solvency, share a common nature in participants:
there is no incentive for the prover to exaggerate (over-report) the
total liabilities; there is an incentive for individuals to make sure
their values are included in the reported total liabilities. The con-
cepts of “liability” and “incentives” are crucial in the formalization
of PoL constructions because they relax the security requirements,
i.e., there’s no need to prevent the prover from arbitrarily adding
dummy values for “fake” users without being detected.
Existing PoL works [13, 19, 20, 25, 73] target the same security
goal, i.e., the prover cannot cheat without detection, but privacy
against customers to different extents varies between the two ex-
tremes of leaking everything such as individual liabilities and num-
ber of customers and leaking no side information at all. DAPOL
aims to provide the latter extreme for the solvency case but lacks
formal PoL definitions and security proofs for the scheme. We for-
malize PoL and propose DAPOL+, a concrete design of PoL extend-
ing DAPOL. DAPOL+ provides provable security and privacy, and
indicates that a PoL leaking no side information at all is possible.
Apart from the basic security and privacy, different applications
might desire different additional features. E.g., in applications ac-
cepting updates in individual liabilities such as negative reviews
and solvency, a prover may need to preserve privacy for two se-
quential PoLs before and after the updates. Additionally, the prover
knowing which user verified inclusions for the previous PoLs may
be able to predict which are less likely to perform verifications thus
there is a lower risk to omit the liabilities to these users. Therefore,
another desired property is to hide the identities of users that query
for proofs. We study these additional features and explore solutions.
Our major contributions are as follows:
• We formalize PoL as a general cryptographic primitive for
applications not limited to financial uses, and make the first
attempt to standardize the goals for PoL from three aspects:
security, privacy and efficiency;
• We propose DAPOL+, the first PoL scheme with provable
security and strong privacy, and demonstrate its practicality
by benchmarking a proof-of-concept (PoC) implementation;
• We categorized additional features desirable in different ap-
plications and propose solutions and accumulator variants;
• We analyze failure probability, i.e., the probability that a
malicious prover evades detection when a subset of users
verify proofs, aiming to provide insights on the effectiveness
of distributed verification.
Paper Organization. We compare existing schemes from aspects
of security, privacy and efficiency in section 2. We formalize secu-
rity and privacy for PoL in section 3. In section 4, we introduce
DAPOL+, discuss accumulator variants and explore additional fea-
tures optional in various applications. In section 5, we analyze fail-
ure probability. We benchmark a PoC implementation of DAPOL+
to demonstrate practicality in section 6 and conclude in section 7.
2 RELATED WORK
There have been a few PoL schemes proposed in the literature [13,
19, 20, 25, 73]. They follow the same basic idea: the prover commits
to the total liabilities and each individual user checks if the prover’s
liabilities to him/her is properly included. In this section, we review
these protocols and compare the following aspects of them:
• Security. In a PoL protocol, the prover should not be able to
cheat (claiming a smaller value than the fact) about the total
liabilities without being detected by any verifier.
• Privacy. Different applications require different extents of pri-
vacy for PoL protocols. In the fundraising case, for example,
donors might wish to keep the amounts of their donations be-
tween the charity organization and themselves, and conceal
from a third party. We call this privacy of individual liabil-
ities. In the proof of solvency case, in contrast, this might
not be sufficient. The total liabilities of a bank/company and
the number of its users could be sensitive information about
its business, so a good PoL should preserve the privacy of
them. Privacy guarantees that no adversary can learn any
information they shouldn’t throughout the execution of the
protocol. We give a formal definition of privacy in section 3.5.
For demonstration, we examine the privacy of total liabilities,
the number of users and individual liabilities in this section.
• Efficiency. The efficiency of a PoL protocol include that of the
proof generation time, verification time, individual proof size
and the commitment size on the public bulletin board (PBB).
The first three are straightforward as it is always desired to
minimize the computation and bandwidth complexities for
protocol participants. A PBB is a piece of universally accessi-
ble and append-only memory allowing everyone to have the
same view of the contents [41]. A PBB is necessary in a PoL
protocol to prevent the prover from committing different
total liabilities to users and cheating without being detected.
Although PBB has been a standard assumption in cryptogra-
phy for tens of years, implementing a PBB is not cost free.
Today, blockchains are widely considered to be a practical im-
plementation of a PBB [33], but writing data on a blockchain
could be expensive. E.g., on Ethereum, a blockchain with the
second largest crypto market cap [24], writing 1KiB costed
approximately $140 [26, 74] on May 5, 2021. This is imprac-
tical for an entity with 1M users to prove liabilities. The
expensive cost stems from the strong guarantees we assume
for a PBB, as implicated by the CAP theorem [36, 48] and
the Blockchain Trilemma [67]. Therefore, a practical PoL
scheme should minimize the data written on a PBB.
indicates
We summarize the comparisons in table 1. Note that
the property is not guaranteed,
indicates the design only provides a partial solution.
indicates it is guaranteed, and
Maxwell-Todd. Maxwell and Todd [73] proposed a summation
Merkle tree construction to prove total liabilities. Merkle trees are
a data structure enabling a set owner to prove element membership
in the set efficiently. In their design, each customer is mapped to a
leaf node in the tree. Each node in the Merkle tree not only has a
field of hash ℎ, but also a value 𝑐. The 𝑐 field in a leaf node indicates
the prover’s liabilities to the user, denoted by 𝑙, and that in an
internal node is the sum of the values in its two child nodes 𝑙𝑐ℎ
Session 12D: Decentralized Cryptographic Protocols CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea3466Table 1: Comparison between existing schemes for PoLiab.
Efficiency
Scheme
Maxwell-Todd [73]
Maxwell+ [43]
Maxwell++ [19]
Camacho [13]
Provisions [25]
DAPOL [20]
DAPOL+