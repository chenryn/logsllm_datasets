incremented concurrently. Unfortunately for the attacker, when
decoys are refreshed, their counters reset to zero and become
lower than the victim’s count. At the next event, different
decoys will have to be higher or equal to the victim count
for the victim to survives again. Generally, to survive n TRR
events, a victim needs a total of n× V decoys. Note that each
time an aggressor row is activated, it influences up to B victim
rows. That is, for a single aggressor row activation, B decoys
are hammered and their counters increase by one.
Problem formalization. This condition creates an optimization
problem: before a TRR event, part of the activations should
be used to hammer the victim and the remaining to hammer
the decoy rows. However, if too many activations target the
victim, the decoys cannot protect it from being refreshed. On
the opposite, if just a few activations hammer the victim, it
will reach a lower hammer count than possible since the extra
activations used for the decoys are “wasted” (i.e., not used
against the victim). Hence, the number of decoys and their
hammer count should be minimized. We formalize this problem
as follows: Considering all activations in an attack (Lattk),
then Lattk− k activations must be used to build and maintain
a set of decoys. The remaining k activations can be used for
hammering the victim row and thus should be maximized. We
solve this problem by answering the following questions:
1) What is the optimal hammer
ratio between the different rows?
2) How many times should the rows
[optimal distribution]
[optimal intensity]
[optimal duration]
be hammered in each step?
3) How many TRR events should
the attack last?
Answering these questions will lead us to the FEINTING attack.
We start by obtaining FEINTING for DDR4 devices before
adapting it
to handle RFM on DDR5. In § VI, we will
adapt FEINTING to securely design PROTRR, and we will
discuss how FEINTING can be further refined to handle protocol
optimizations such as REF and RFM postponing, and certain
1FEINTING refers to maneuvers that distract or mislead the opponent.
Fig. 3: Overview of FEINTING variations. The final attack is a combination
of the listed refinements, depending on the DDR technology.
DRAM architectural optimizations such as subarray parallelism
(Appendix A, Appendix B, and Appendix C). Figure 3 provides
a summary of these different FEINTING variations.
B. FEINTING on DDR4
the victim row can be seen as the last decoy that is refreshed.
We consider an attack that lasts n TRR events (intervals).
In the last TRR event, the victim can be refreshed (as the
attack ends), so no further decoy is needed. Thus the minimum
been refreshed yet before the activation α. We define ˜di as the
i-th decoy, and αi as the moment it is refreshed.
Theorem 1 (Optimal distribution and intensity). For a generic
number of rows hammered in the attack is DT =(n−1)×V+1,
i.e.(n− 1)× V decoy rows plus the victim row. Generalizing,
We refer by D(α) to the number of decoy rows that have not
TRR event i∈(cid:74)1, n(cid:75) happening after activation αi, with D(αi)
decoys ( ˜d1... ˜dDT−(i−1)×V ), an attackA can only be optimal if
all decoys’ hammer count (d1(αi)...dDT−(i−1)×V(αi)) is the
same.▸ Intuition. To maximize k (the activations that hammer
the victim), we must minimize the total activations used to
hammer decoys during the attack. Decoys should not be
hammered more than the victim because this is unnecessary
for the victim to survive. Likewise, a decoy that is ham-
mered insufficient times is useless for the victim’s survival.
Practically, this translates to steps in which all the decoys
and the victim increase their hammer counts together and
in unison, as shown in Figure 4.
with a hammer count higher than the victim ˜x. We consider
any TRR event i, after an activation αi, in which a decoy ˜di
is refreshed. We define ∆ as the difference of hammer counts
▸ Proof. First, we prove that no decoy should be refreshed
between decoy and victim: di(αi)= y+∆ for x(αi)= y. Given
Definition 4, the victim already survives if di(αi)= x(αi).
them equally over all remaining D(αi) rows. In other words,
the victim can survive with a count of x(αi) = y+ ∆
D(αi),
This means that ∆ hammerings are wasted by not spreading
which creates a better attack.
Similarly, we now prove that it is not optimal to have decoys
hammered less than the one refreshed at the TRR event. We
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:57:04 UTC from IEEE Xplore.  Restrictions apply. 
739
Activations are tracked with ProTRR+ FEINTING-GHOSTCounters are refreshed periodically + FEINTING-SPLITSection VAppendicesSection VIRFMs are postponed+ FEINTING-POSTPONING RFMRefreshes are postponed+ FEINTING-POSTPONING REFSSubarrays parallelism+ FEINTING-SUBARRAYS• DDR4: FEINTING Basic support• DDR5: FEINTING-LITE/MEDIUM, FEINTINGFeinting   reﬁnements 1 nr_intervals = 8192
2 A_T = nr_intervals*166 // T=166
3 nr_decoys = nr_intervals*V
4 aggressors = GetDifferentRows(nr_decoys/B)
5 for ACT = 1 ; ACT ≤ A_T ; ACT++ do
ACTIVATE GetLeastActivated(aggressors)
if ACT%T is 0 then // TRR event
6
7
8
// remove the TRRed aggressors
RemoveHighest(aggressors, V/B)
Algorithm 1: The pseudocode for FEINTING on DDR4.
Fig. 5: Different durations of FEINTING. Example for DDR4,{V ; B}= 2.
Fig. 4: FEINTING strategy. As the attack progresses, decoys get refreshed. In
the last round, only the target victim (DN ) is left to be refreshed and all the
activations are used against that victim, hammering it T times.
consider any TRR event i (after activation αi) in which a decoy
˜di is refreshed. In this case, ∆ is the difference of hammer
counts between a lower decoy ( ˜dl) and ˜di, with di(αi)= y+ ∆
for dl(αi)= y. Decoy ˜di is refreshed with an excess of hammer
counts: ˜x would have already survived with di(αi)= xi(αi)=
y+ ∆′, where ∆′= ∆×(D(αi)−1)
. The extra hammers (∆− ∆′)
D(αi)
are wasted, as they could have been used to hammer decoy
dl, which has to be hammered to make the victim survive
in a future interval. Concluding, the optimal distribution and
intensity minimizes the difference between all decoys and the
victim by hammering them in steps and in each step, in unison.
Theorem 2 (Optimal duration). Given n TRR events happening
in a tREFW, an attackA is optimal if, givenA, DT =(n−
1)× V + 1 and Lattk= LtREF W .
▸ Intuition. The last intervals of two attacks of different
interval, there were V + 1 rows alive (the decoys and the
lengths are equivalent. In the last interval, in both cases,
only one row survives (the victim), while in the previous
victim), and so on. In other words, the longer attack extends
the shorter attack by more intervals. An attacker can use
these extra intervals to hammer the victim and the necessary
decoys. As a result, using a fewer number of intervals only
leads to a lower Hammer max.
refreshed after the last interval. Thus, according to Theorem
▸ Proof. Independently from the attack duration, the victim is
1 attacks of lengths n1 and n2 (with n1 V , it is
(1)
for j intervals added, the victim row is increased by ∆ϵtot(j)=
DT−ϕ×V , where DT = D
T + j× V . Thus, the optimal
∑ϕ=j−1
(1)
B×T
ϕ=0
tREFW (i.e., LtREF W ), from which follows Lattk= LtREF W .
DT =(n− 1)× V + 1 decoys. Note that for simplicity, we
consider that the available B× T hammering in each interval
reality, when D(α) 1).
that generates RFM commands every RAAIMT activations (i.e.,
TRR events on DDR5. We calculate the minimum number
of possible TRR events generated on a DDR5 device during a
tREFW. This leads to the minimum number of decoys needed
to perform FEINTING. Per DDR5 standard [30], a register in
the device indicates whether every REF or every second REF,
a TRR happens (i.e., d= 1 or 2). For simplicity, we denote by
REFT RR the REFs that do TRRs. Depending on d there are
8192 or 4096 REFT RRs in a tREFW. These are the minimum
numbers of TRR events that happen in a tREFW, without
including RFMs. With FEINTING-Lite, we show how an attacker
can perform FEINTING without ever inducing an RFM.
FEINTING-Lite. In DDR5, tREFW is 32 ms by default, which
leads to TREF = 83 (d= 1). Instead, the maximum value of
TRF M is 80. For FEINTING-Lite and the other variants to be
introduced later, we always consider an optimized memory
controller that does not send an RFM if the next command is
a REFT RR. For this reason, TRF M activations can always
be sent between two REFT RR without causing an RFM: as
the RAA counter becomes RAAMMT, it is immediately set to
zero with a REFT RR. The FEINTING attack is reproducible
without variations by skipping TREF− TRF M activations every
REFT RR (Figure 7-a): we refer to such attack as FEINTING-
Lite. Because we have already proven FEINTING to be optimal,
this is the optimal attack if no RFM command is triggered.
FEINTING-Medium. If multiple blocks of TRF M activations
can fit between two REFT RR, it is straightforward to prove
that FEINTING-Lite can be improved by using the com-
plete TREF−(TREF mod TRF M) activations between two
REFT RR. TREF can be segmented into blocks of TRF M
activations as shown in Figure 7-b. These additional blocks
increase the number of intervals used for the attack in a tREFW.
In the case of FEINTING-Lite, exactly 8192 (or 4096) intervals
are used for the attack, each of TRF M activations. In FEINTING-
Medium, each additional block performs TRF M activations
and requires V (additional) decoys: exactly as if FEINTING-Lite
Fig. 8: Different FEINTING strategies for DDR5. Example for{V ; B}= 2.
lasted longer. Because of Theorem 2, this strategy improves
the attack. In FEINTING-Medium, between two REFT RR, the
remaining (TREF mod TRF M ) extra activations are skipped.
FEINTING-Medium is the optimal attack if the remaining extra
activations are not used. In the last step, we analyze if it can
ever be beneficial for the attacker to use these extra activations.
FEINTING. Starting from FEINTING-Medium, we evaluate if the
attack can be improved by causing some extra RFMs using
the remaining extra activations (TREF mod TRF M ) between
two REFT RR. There is a cost attached when using these extra
activations: every extra RFM triggered increases the number of
decoys needed by V . The attacker needs to use activations to
hammer these additional decoys. Unfortunately, these additional
decoys are less impactful than the others since they add fewer
activations to the attack. This leads to the following question:
Considering ”FEINTING-Medium”, when is it optimal for an
attacker to use the extra activations that cause RFM?
Theorem 3 (Optimal number of extra RFMs). If using extra
activations ceases to be beneficial for an attacker, then it can
never become beneficial again in the same attack.
Corollary. If using extra activations at the beginning of the
attack is not useful, then it will never be.
▸ Intuition. Extra activations will trigger more TRR events,
requiring more decoys to be hammered during the attack. As
time passes, these decoys must be hammered (Theorem 1)
until they are finally refreshed by the extra RFM. This can
be seen as an expense for the attacker. From an attacker’s
point of view, it is less expensive to trigger the extra RFM
earlier, so that the accumulated cost of hammering these
decoys is lower.
fits between two REFT RR. We consider two cases that are
▸ Proof. For simplicity, let us assume that only one full TRF M
identical up to REFT RR interval i− 1 with victim count
x(αi−1)= y. Case (1): the attacker uses ϵ= TREF− TRF M
in the next interval i+ 1, these ϵ activations become useful
extra activations in the interval i. Case (2): the attacker skips
interval i as using extra activations is not useful, and then,
and are used for the attack. We now prove that case (2) is