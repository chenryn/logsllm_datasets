          -->
          link.login.url
          /secure/Dashboard.jspa?os_destination=${originalurl}
          http://mycompany.com/SSOLogin?target=${originalurl}-->
          logout.url
          /secure/Logout!default.jspa
          http://mycompany.com/SSOLogout-->
          original.url.key
          os_security_originalurl
          login.cookie.key
          seraph.os.cookie
          cookie.encoding
          xYz
        -->
            authentication.type
            os_authType
      -->
            config.file
            /seraph-paths.xml
            action.extension
            jspa
         -->
**通过过滤器（Filters）**
与Seraph相关的，有两个Filter（`com.atlassian.seraph.filter.LoginFilter`，`com.atlassian.seraph.filter.SecurityFilter`），和一个Servlet（`com.atlassian.seraph.logout.LogoutServlet`）是必需放在`WEB-INF/web.xml`中的。
        login
        com.atlassian.seraph.filter.LoginFilter
        security
        com.atlassian.seraph.filter.SecurityFilter
        login
        /*
        security
        /*
        logout
        com.atlassian.seraph.logout.LogoutServlet
        logout
        /logout
###  Jira的认证（authentication）方式
The Jira Server platform, Jira Software Server, and Jira Service Desk Server
REST APIs有以下几种认证方式：
**OAuth**
使用Jira产生的Token来进行认证，虽然实现不太方便，但是比较安全。  
具体参考：
**HTTP Basic认证**
其实就是在HTTP请求头中加上一个HTTP请求头，这种方式没那么安全，但是在脚本中或者命令行掉REST接口比较好用。  
具体参考：  
比如CURL就可以这样用：
    curl -u username:password -X GET -H "Content-Type: application/json" http://localhost:8080/rest/api/2/issue/createmeta
curl会自动帮你把提供的用户名密码计算加到Header中。
或者你也可以自己计算好之后，把它作为一个HTTP头来请求。
其实就是把`username:password`进行base64编码，然后加到`Authorization: Basic {base64}`即可。
对应到代码中是：
atlassian-jira-software-7.13.0-standalone/atlassian-jira/WEB-INF/lib/atlassian-seraph-3.0.3.jar!/com/atlassian/seraph/filter/HttpAuthFilter.class
继承自PasswordBasedLoginFilter
即先解码base64，然后传入username和password，返回一个UserPasswordPair对象。
    new UserPasswordPair(creds.getUsername(), creds.getPassword(), false);
**验证码(CAPTCHA)**
多次连续登陆失败之后，就会出现验证码。
**基于Cookie的认证**
就是用Cookie来进行认证。对应到代码中是：
atlassian-jira-software-7.13.0-standalone/atlassian-jira/WEB-INF/lib/atlassian-seraph-3.0.3.jar!/com/atlassian/seraph/filter/LoginFilter.class
继承自PasswordBasedLoginFilter
###  表单token的处理（防CSRF）
想要对某个Action进行 xsrf token验证，需要进行以下步骤：
1、首先定位到某个Action具体执行的方法，一般默认是doExecute()
2、在这个方法前加上注解：`[@com](https://github.com/com
"@com").atlassian.jira.security.xsrf.RequiresXsrfCheck`
如果在自动化脚本中，可以使用以下HTTP头来绕过反CSRF校验机制：
    X-Atlassian-Token: no-check
在Jira的java代码中生成token的方法为：
    import com.atlassian.jira.security.xsrf.XsrfTokenGenerator;
    XsrfTokenGenerator xsrfTokenGenerator = ComponentManager.getComponentInstanceOfType(XsrfTokenGenerator.class);
    String token = xsrfTokenGenerator.generateToken(request);
## Jira历史漏洞
###  [CVE-2019-8442]敏感信息泄露漏洞
问题在于`CachingResourceDownloadRewriteRule`:
官方issues：
官方描述：
> The CachingResourceDownloadRewriteRule class in Jira before version 7.13.4,