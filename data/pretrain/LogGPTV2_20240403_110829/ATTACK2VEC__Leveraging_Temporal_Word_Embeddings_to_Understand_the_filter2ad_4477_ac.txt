uation. We then proceed to show that ATTACK2VEC is effec-
tive in answering these three research questions, and discuss
the performance of our approach, showing that ATTACK2VEC
is able to process a day of data within minutes. Finally, we
present further evaluation of ATTACK2VEC, showing an end-
to-end case on how our system can be used to assess the
evolution in the use of a speciﬁc vulnerability in the wild.
5.1 Evaluation Metric
We use cosine similarity as the distance metric to quantify the
temporal embedding changes at time t in the latent space. That
is, for any two embeddings (i.e., η(t)
e j ), the similarity
is measured as
ei and η(t)
similarity(η(t)
ei ,η(t)
e j ) =
T
η(t)
η(t)
e j
ei
ei (cid:107)2(cid:107)η(t)
(cid:107)η(t)
e j (cid:107)2
.
(4)
Note that in this paper the cosine similarity is used in positive
space, where the outcome is bounded in [0, 1]. That is, two
vectors with the same orientation have a cosine similarity of
1 (most similar), two vectors oriented at 90◦ relative to each
other have a similarity of 0 (not similar).
event embedding e(t)
i
Following Eq 4, we denote the neighborhood of a security
i ), and accordingly deﬁned as
(similarity(e(t)
i
i ) = argsort
as N(e(t)
N(e(t)
(5)
,e(t)
j )).
e(t)
j
N(e(t)
i ) enables us to use temporal embeddings to discover
and analyze how different security events are used together
with ei. We use Nk(e(t)
i ) to denote the top k closest neighbors
of ei. As we show in Section 5.4, this can be used to identify
security events that are frequently used together as part of a
multi-step attack.
We also use a weighted drift metric to measure a security
event relative changes. This metric is deﬁned in Eq 6 as
(cid:32) (cid:107)η(t−1)
ei (cid:107)
,η(t)
∑e∈E(cid:107)η(t−1)
e (cid:107)
,η(t)
ei
e
(cid:33)
.
weighted_dri f t(ei) = argsortt
(6)
Eq 6 normalizes a security event’s embedding change by
the sum of all security event changes within that observation
period. This metric enables us to measure how a security
event changes comparing to the other security events within a
given observation point.
910    28th USENIX Security Symposium
USENIX Association
e6e27…e11e15e20e11s1e41e41s4s2e4……TemporalEventEmbeddinge6e11e20…timemachinesηηη(0)(0)(0)TrendIdentiﬁcation ChangeDetectionEvolutionEvaluationTemporal embeddingsDetection and trackingData Collection and preprocessingS7t6e8S1t7e11S4t1e0Data processinge6e11e20…ηηη(t)(t)(t)………change and global changes:
• criterion a. The cosine similarity of the event embed-
dings must be stable when an event usage does not
change between subsequent time slices.
• criterion b. The cosine similarity of these embeddings
should change swiftly if these events are used in different
attacks or emerge as a new attack vector.
It is important to note that while these criteria are helpful
in demonstrating the power of word embeddings extracted by
ATTACK2VEC, they are self-referential and not in themselves
sufﬁcient to validate the effectiveness of our approach.
Single event change detection. To evaluate whether our two
criteria hold for our dataset, we use three CVEs, “Apache
Struts Showcase App CVE-2017-9791” (Figure 5a), “php-
MyAdmin RFI CVE-2018-12613” (Figure 5b), and “Apache
Struts RCE CVE-2018-11776” (Figure 5c). These CVEs were
disclosed between 2017 and 2018. Regarding the aforemen-
tioned two evaluation criteria, these vulnerabilities were not
disclosed in 2016, and therefore they did not have a matching
signature in the IPS from which we collected our data. Thus,
they form a good baseline for temporal ﬁdelity evaluation. We
therefore expect the following properties to hold:
ei ,η(z)
response to a. Before a vulnerability was disclosed, its cor-
responding signature does not exist hence its non-
existent context should stay the same until timestamp
t. That is, if the vulnerability’s disclosure date is t,
ei ), where z ∈ (0,t], should be stable.
similarity(η(0)
response to b. After the disclosure date, the cosine similar-
ity values of its embeddings should change swiftly. The
justiﬁcation is obvious. If attackers start exploiting a vul-
nerability, its corresponding security event moves away
from its non-existent context and such drift leads to em-
bedding changes.
ei ,η(t)
For each CVE, we calculate the cosine similarity between
each event’s current representation (i.e.,
at timestamp
t) and its original representation (i.e.,
at timestamp 0,
on December 1 2016) over our observation period (i.e.,
similarity(η(0)
ei ), where t = 1...T . See Eq 4). The results
are shown in Figure 5. As we can observe, the temporal
embeddings of CVE-2017-9791, CVE-2018-12613 and CVE-
2018-11776 are stable across time and their cosine similarity
values are above 0.9 before their respective disclosure dates
(see criterion a). The way to interpret criterion a is that be-
fore a vulnerability is disclosed, its corresponding signature
does not exist, and therefore its context is non-existing. As
such, this context should remain constant until the vulner-
ability starts being exploited in the wild. Figure 5a shows
that the cosine similarity between the embeddings of CVE-
2017-9791 calculated daily and the original one recorded on
(a) CVE-2017-9791 disclosure date: July 10 2017
(b) CVE-2018-12613 disclosure date: June 21 2018
(c) CVE-2018-11776 disclosure date: August 22 2018
Figure 5: Temporal embedding results of “Apache Struts
Showcase App CVE-2017-9791” (5a), “phpMyAdmin RFI
CVE-2018-12613” (5b), and “Apache Struts RCE CVE-2018-
11776” (5c). The cosine similarities of the CVE embeddings
are stable before they are publicly disclosed, and decline
swiftly after the disclosure.
5.2 Change Detection
One of the key practical questions when evaluating the tem-
poral security event embeddings built by ATTACK2VEC is
determining the ﬁdelity of the embedding results over time.
In this paper, ﬁdelity refers to the condition that the same se-
curity event should be placed in the same latent space. That is,
if the frequency and the contexts of a security event between
subsequent time slices don’t change, its latent embedding
should stay the same. This consistency allows the change
to be reliably detected. This requirement lays the founda-
tion to quantitatively study their changes. The concept of
ﬁdelity is different from the stability term used in previous
research approaches in which stability was used to evaluate
how classiﬁers perform after certain period of time. Bearing
this difference in mind, we use the following two criteria to
evaluate the ﬁdelity of temporal embeddings and show how
ATTACK2VEC can faithfully capture both single event usage
USENIX Association
28th USENIX Security Symposium    911
July 10 2017June 21 2018August 22 2018day 0 is stable and above 0.95 before July 10 2017, which is
when the vulnerability was disclosed. Note that the similarity
is not strictly 1.0 because of marginal deviation incurred by
joint optimization across time slices (see Eq 3). Neverthe-
less, the high similarity before the disclosure date shows that
ATTACK2VEC obtains correct temporal embeddings. After
their public disclosure of each CVE, on the other hand, we
expect the context in which each vulnerability is exploited to
quickly change. This can be measured by ATTACK2VEC with
the fact that the cosine similarity values of CVE-2017-9791,
CVE-2018-12613, and CVE-2018-11776 decline quickly and
move away from the original non-existing context built for
those CVEs (see criterion b). This phenomenon exempli-
ﬁes that the temporal embeddings capture the changes in the
context in which a security event is used.
It is also worth noting that the temporal embeddings of
CVE-2018-11776 show an immediate change after disclo-
sure, while those of CVE-2018-12613 are slightly delayed
for a couple of weeks (i.e., CVE-2018-12613 was ofﬁcially
published on June 21 2018 and the embedding starts to drift
on July 12 2018). This phenomenon, i.e., the gap between
public disclosure dates and real world exploits was well dis-
cussed in Sabottke et al. [39], and ATTACK2VEC allows to
easily observe it.
ei ,η(t−1)
ei
The temporal embeddings generated by ATTACK2VEC not
only allow us to identify when a vulnerability starts being
exploited in the wild, but also how these event embeddings
change after the disclosure date. To monitor and evaluate
these changes, instead of comparing the context of a secu-
rity event with the one extracted from the ﬁrst day of ob-
servation, we compare the cosine similarity of the contexts
extracted on subsequent time slices – between each event’s
current representation (i.e., at timestamp t) and its previous
representation (i.e., at timestamp t − 1). In short, we calcu-
late similarity(η(t)
) (see Eq 4), which enables us to
capture how the context of each event evolves between two
subsequent observations. If the use of an event remains stable,
the cosine similarity between η(t)
will remain high.
If, on the other hand, the event experiences a sudden change
in the way it is used in the wild, then its context will also sig-
niﬁcantly change and the cosine similarity with the previous
observation will suddenly decrease, allowing an analyst to
identify the point in time in which this change happened. To
demonstrate this, we reuse the security event “Apache Struts
Showcase App CVE-2017-9791” from earlier in this section.
We calculate the cosine similarity between subsequent snap-
shots, where t0 starts from July 10 2017 (the public disclosure
date). This evolution is depicted in Figure 6.
ei and η(t−1)
ei
We can observe the following:  The cosine similarity
values decline for the ﬁrst three weeks. This phenomenon im-
plies that CVE-2017-9791 started being exploited in different
attacks after its disclosure date, with attackers trying different
strategies to reliably exploit this vulnerability.  the cosine
similarity increases between the 3rd week and the 10th week.
This phenomenon implies that CVE-2017-9791 became being
exploited in less diversiﬁed attacks, indicating that attackers
were converging towards a stable way to exploit the CVE.  
The cosine similarity stabilizes after the 10th week, which
means that CVE-2017-9791 started being exploited in a sta-
ble context. This could indicate that attackers weaponized the
CVE into a reliable attack, and possibly developed methods
to exploit it at scale (e.g., by including it in an exploit kit).
Later in the timeline, we can see other changes in the way in
which attacks are exploited, but after each sudden change we
observe a stabilization in how the CVE is exploited, indicat-
ing that attackers keep the same modus operandi over long
periods of time.
A possible concern is that the changes in context identiﬁed
by ATTACK2VEC might be due to noise and not representa-
tive of actual changes in the modus operandi of attackers. To
demonstrate that this is not the case, we use the event co-
occurrence matrix PMIt (c, S) as deﬁned in Section 4. This
matrix captures the co-occurrence of any two events within
the context window. For each observation time t, we select
the top events that co-occurred with CVE-2017-9791 to better
understand the phenomenon. If the changes in the use of a
CVE identiﬁed by ATTACK2VEC are meaningful, we expect
the co-occurrence matrix on that day to suddenly change, but
to later stabilize and remain similar over time. For the ﬁrst
three weeks after disclosure in Figure 6 (), CVE-2017-9791
was used in conjunction with known attack vectors such as
Apache Struts RCE CVE-2013-2251, HTTP Apache Tomcat
UTF-8 dir traversal CVE-2008-2938, and malicious OGNL
expression upload. By the third week, while some attack
vectors were still associated with CVE-2017-9791, the vul-
nerability gradually started being used together with more
recent server attack vectors (e.g., Apache Struts RCE CVE-
2016-3087) and application vulnerabilities (e.g., WebNMS
RCE CVE-2016-6603 and Web CMS Think PHP RCE). After
, CVE-2017-9791 started being used consistently with the
aforementioned attack vectors and with several additional at-
tack vectors (e.g., Apache Struts dynamic method invocation
RCE CVE-2016-3081, Drupal PHP RCE, and generic PHP
REC) Once CVE-2017-9791 reached  , its usage patterns
became reasonably stable. Note that small ﬂuctuations still
happen when new Apache Struts related vectors were dis-
closed and exploited (e.g., . Apache Struts CVE-2017-9805
(week 11), CVE-2017-12611 (week 15) and CVE-2017-12617
(week 21), and temporary withdrawn of CVE-2017-12617
(around week 45) in the attacks. These changes are reliably
detected by ATTACK2VEC.
In summary, our method is able to capture changes in the
security event embeddings with high ﬁdelity.
Global change detection. Recall that temporal event embed-