On UNIX and Linux, the setmqenv command must be sourced so the current environment can be
modified.
• On Windows:
C:\> \setmqenv.cmd -s
...
C:\>
3.Verify that the environment is suitable for the appropriate IBM MQ installation by using the dspmq
command with the -o installation option.
• On UNIX and Linux:
% dspmq -o installation
...
%
• On Windows:
C:\> dspmq -o installation
...
C:\>
4.If necessary, run the setmqenv command again, with adjusted parameters, to initialize the
environment for a more appropriate installation of IBM MQ.
For example:
• On UNIX and Linux:
% dspmqver | grep Version
Version: 8.0.0.15
% dspmq -o Inst | sed -e "s/ //g"
QMNAME(V8QM1) INSTNAME(Installation1) INSTPATH(/opt/mqm) INSTVER(8.0.0.15)
QMNAME(SPIDEY) INSTNAME(Installation4) INSTPATH(/opt/MQ91CD) INSTVER(9.1.5.0)
QMNAME(BOB) INSTNAME(Installation3) INSTPATH(/opt/MQ92) INSTVER(9.2.2.0)
% . setmqenv -n Installation3
% dspmqver | grep Version
Version: 9.2.2.0
Note: The setmqenv command must still must be sourced so the current environment can be
modified.
• On Windows:
C:\> dspmqver | findstr Version
Version: 9.1.0.5
C:\> dspmq -o inst | sed -e "s/ //g"
QMNAME(A) INSTNAME(Installation2) INSTPATH(C:\IBM\MQ91LTS) INSTVER(9.1.0.5)
QMNAME(B) INSTNAME(MQ91CD) INSTPATH(C:\IBM\MQ91CD) INSTVER(9.2.2.0)
QMNAME(C) INSTNAME(MQ92) INSTPATH(C:\IBM\MQ92) INSTVER(9.2.2.0)
C:\> setmqenv -n MQ92
C:\> dspmqver | findstr Version
Version: 9.2.2.0
IBM MQ troubleshooting and support 71
Troubleshooting distributed publish/subscribe problems
Use the advice given in the subtopics to help you to detect and deal with problems when you use publish/
subscribe clusters or hierarchies.
Before you begin
If your problems relate to clustering in general, rather than to publish/subscribe messaging using
clusters, see “Troubleshooting queue manager cluster problems” on page 194.
There are also some helpful troubleshooting tips in Design considerations for retained publications in
publish/subscribe clusters.
Related concepts
Distributed publish/subscribe system queue errors
Related tasks
Configuring a publish/subscribe cluster
Designing publish/subscribe clusters
Routing for publish/subscribe clusters: Notes on behavior
Use the advice given here to help you to detect and deal with routing problems when you are using
clustered publish/subscribe messaging.
For information about status checking and troubleshooting for any queue manager cluster, see
“Troubleshooting queue manager cluster problems” on page 194.
• All clustered definitions of the same named topic object in a cluster must have the same CLROUTE
setting. You can check the CLROUTE setting for all topics on all hosts in the cluster using the following
MQSC command:
display tcluster(*) clroute
• The CLROUTE property has no effect unless the topic object specifies a value for the CLUSTER property.
• Check that you have spelled the cluster name correctly on your topic. You can define a cluster object
such as a topic before defining the cluster. Therefore, when you define a cluster topic, no validation is
done on the cluster name because it might not yet exist. Consequently, the product does not alert you to
misspelt cluster names.
• When you set the CLROUTE property, if the queue manager knows of a clustered definition of the same
object from another queue manager that has a different CLROUTE setting, the system generates an
MQRCCF_CLUSTER_TOPIC_CONFLICT exception. However, through near simultaneous object definition
on different queue managers, or erratic connectivity with full repositories, differing definitions might
be created. In this situation the full repository queue managers arbitrate, accepting one definition and
reporting an error for the other one. To get more information about the conflict, use the following MQSC
command to check the cluster state of all topics on all queue managers in the cluster:
display tcluster(*) clstate
A state of invalid, or pending (if this does not soon turn to active), indicates a problem. If an invalid
topic definition is detected, identify the incorrect topic definition and remove it from the cluster. The
full repositories have information about which definition was accepted and which was rejected, and the
queue managers that created the conflict have some indication of the nature of the problem. See also
CLSTATE in DISPLAY TOPIC.
• Setting the CLROUTE parameter at a point in the topic tree causes the entire branch beneath it to route
topics in that way. You cannot change the routing behavior of a sub-branch of this branch. For this
reason, defining a topic object for a lower or higher node in the topic tree with a different CLROUTE
setting is rejected with an MQRCCF_CLUSTER_TOPIC_CONFLICT exception.
• You can use the following MQSC command to check the topic status of all the topics in the topic tree:
72 Troubleshooting and Support for IBM MQ
display tpstatus('#')
If you have a large number of branches in the topic tree, the previous command might display status
for an inconveniently large number of topics. If that is the case, you can instead display a manageably
small branch of the tree, or an individual topic in the tree. The information displayed includes the topic
string, cluster name and cluster route setting. It also includes the publisher count and subscription
count (number of publishers and subscribers), to help you judge whether the number of users of this
topic is as you expect.
• Changing the cluster routing of a topic in a cluster is a significant change to the publish/subscribe
topology. After a topic object has been clustered (through setting the CLUSTER property) you cannot
change the value of the CLROUTE property. The object must be un-clustered (CLUSTER set to ' ')
before you can change the value. Un-clustering a topic converts the topic definition to a local topic,
which results in a period during which publications are not delivered to subscriptions on remote
queue managers; this should be considered when performing this change. See The effect of defining
a non-cluster topic with the same name as a cluster topic from another queue manager. If you
try to change the value of the CLROUTE property while it is clustered, the system generates an
MQRCCF_CLROUTE_NOT_ALTERABLE exception.
• For topic host routing, you can explore alternative routes through the cluster by adding and removing
the same cluster topic definition on a range of cluster queue managers. To stop a given queue
manager from acting as a topic host for your cluster topic, either delete the topic object, or use the
PUB(DISABLED) setting to quiesce message traffic for this topic, as discussed in Special handling
for the PUB parameter. Do not un-cluster the topic by setting the CLUSTER property to ' ', because
removing the cluster name converts the topic definition to a local topic, and prevents the clustering
behavior of the topic when used from this queue manager. See The effect of defining a non-cluster topic
with the same name as a cluster topic from another queue manager.
• You cannot change the cluster of a sub-branch of the topic tree when the branch has already been
clustered to a different cluster and CLROUTE is set to TOPICHOST. If such a definition is detected
at define time, the system generates an MQRCCF_CLUSTER_TOPIC_CONFLICT exception. Similarly,
inserting a newly clustered topic definition at a higher node for a different cluster generates an
exception. Because of the clustering timing issues previously described, if such an inconsistency is
later detected, the queue manager issues errors to the queue manager log.
Related tasks
Configuring a publish/subscribe cluster
Designing publish/subscribe clusters
Checking proxy subscription locations
A proxy subscription enables a publication to flow to a subscriber on a remote queue manager. If your
subscribers are not getting messages that are published elsewhere in the queue manager network, check
that your proxy subscriptions are where you expect them to be.
Missing proxy subscriptions can show that your application is not subscribing on the correct topic object
or topic string, or that there is a problem with the topic definition, or that a channel is not running or is not
configured correctly.
To show proxy subscriptions, use the following MQSC command:
display sub(*) subtype(proxy)
Proxy subscriptions are used in all distributed publish/subscribe topologies (hierarchies and clusters).
For a topic host routed cluster topic, a proxy subscription exists on each topic hosts for that topic.
For a direct routed cluster topic, the proxy subscription exists on every queue manager in the cluster.
Proxy subscriptions can also be made to exist on every queue manager in the network by setting the
proxysub(force) attribute on a topic.
See also Subscription performance in publish/subscribe networks.
IBM MQ troubleshooting and support 73
Resynchronization of proxy subscriptions
Under normal circumstances, queue managers automatically ensure that the proxy subscriptions in the
system correctly reflect the subscriptions on each queue manager in the network. Should the need arise,
you can manually resynchronize a queue manager's local subscriptions with the proxy subscriptions that
it propagated across the network using the REFRESH QMGR TYPE(PROXYSUB) command. However, you
should do so only in exceptional circumstances.
When to manually resynchronize proxy subscriptions
When a queue manager is receiving subscriptions that it should not be sent, or not receiving subscriptions
that it should receive, you should consider manually resynchronizing the proxy subscriptions. However,
resynchronization temporarily creates a sudden additional proxy subscription load on the network,
originating from the queue manager where the command is issued. For this reason, do not manually
resynchronize unless IBM MQ service, IBM MQ documentation, or error logging instructs you to do so.
You do not need to manually resynchronize proxy subscriptions if automatic revalidation by the queue
manager is about to occur. Typically, a queue manager revalidates proxy subscriptions with affected
directly-connected queue managers at the following times:
• When forming a hierarchical connection
• When modifying the PUBSCOPE or SUBSCOPE or CLUSTER attributes on a topic object
• When restarting the queue manager
Sometimes a configuration error results in missing or extraneous proxy subscriptions:
• Missing proxy subscriptions can be caused if the closest matching topic definition is specified with
Subscription scope set to Queue Manager or with an empty or incorrect cluster name. Note
that Publication scope does not prevent the sending of proxy subscriptions, but does prevent
publications from being delivered to them.
• Extraneous proxy subscriptions can be caused if the closest matching topic definition is specified with
Proxy subscription behavior set to Force.
When configuration errors cause these problems, manual resynchronization does not resolve them. In
these cases, amend the configuration.
The following list describes the exceptional situations in which you should manually resynchronize proxy
subscriptions:
• After issuing a REFRESH CLUSTER command on a queue manager in a publish/subscribe cluster.
• When messages in the queue manager error log tell you to run the REFRESH QMGR TYPE(REPOS)
command.
• When a queue manager cannot correctly propagate its proxy subscriptions, perhaps because a channel
has stopped and all messages cannot be queued for transmission, or because operator error has caused
messages to be incorrectly deleted from the SYSTEM.CLUSTER.TRANSMIT.QUEUE queue.
• When messages are incorrectly deleted from other system queues.
• When a DELETE SUB command is issued in error on a proxy subscription.
• As part of disaster recovery.
How to manually resynchronize proxy subscriptions
First rectify the original problem (for example by restarting the channel), then issue the following
command on the queue manager:
REFRESH QMGR TYPE(PROXYSUB)
When you issue this command, the queue manager sends, to each of its directly-connected queue
managers, a list of its own topic strings for which proxy subscriptions should exist. The directly-
74 Troubleshooting and Support for IBM MQ
connected queue managers then update their held proxy subscriptions to match the list. Next, the
directly-connected queue managers send back to the originating queue manager a list of their own topic
strings for which proxy subscriptions should exist, and the originating queue manager updates its held
proxy subscriptions accordingly.
Important usage notes:
• Publications missed due to proxy subscriptions not being in place are not recovered for the affected
subscriptions.
• Resynchronization requires the queue manager to start channels to other queue managers. If you are
using direct routing in a cluster, or you are using topic host routing and this command is issued on a
topic host queue manager, the queue manager will start channels to all other queue managers in the
cluster, even those that have not performed publish/subscribe work. Therefore the queue manager that
you are refreshing must have enough capability to cope with communicating with every other queue
manager in the cluster.
• If this command is issued on z/OS when the CHINIT is not running, the command is
queued up and processed when the CHINIT starts.
Related concepts
REFRESH CLUSTER considerations for publish/subscribe clusters
Related tasks
Checking that async commands for distributed networks have finished
Loop detection in a distributed publish/subscribe network
In a distributed publish/subscribe network, it is important that publications and proxy subscriptions
cannot loop, because this would result in a flooded network with connected subscribers receiving
multiple copies of the same original publication.
The proxy subscription aggregation system described in Proxy subscriptions in a publish/subscribe
network does not prevent the formation of a loop, although it will prevent the perpetual looping
of proxy subscriptions. Because the propagation of publications is determined by the existence of
proxy subscriptions, they can enter a perpetual loop. IBM MQ uses the following technique to prevent
publications from perpetually looping:
As publications move around a publish/subscribe topology each queue manager adds a unique fingerprint
to the message header. Whenever a publish/subscribe queue manager receives a publication from
another publish/subscribe queue manager, the fingerprints held in the message header are checked.
If its own fingerprint is already present, the publication has fully circulated around a loop, so the queue
manager discards the message, and adds an entry to the error log.
Note: Within a loop, publications are propagated in both directions around the loop, and each queue
manager within the loop receives both publications before the originating queue manager discards the
looped publications. This results in subscribing applications receiving duplicate copies of publications
until the loop is broken.
Loop detection fingerprint format
The loop detection fingerprints are inserted into an RFH2 header or flow as part of the IBM MQ 8.0
protocol. An RFH2 programmer needs to understand the header and pass on the fingerprint information
intact. earlier versions of IBM Integration Bus use RFH1 headers which do not contain the fingerprint
information.
uuid1
uuid2
uuid3
. . .
IBM MQ troubleshooting and support 75
 is the name of the folder that holds the list of routing fingerprints containing the unique user
identifier (uuid) of each queue manager that has been visited.
Every time that a message is published by a queue manager, it adds its uuid into the  folder
using the  (routing fingerprint) tag. Whenever a publication is received, IBM MQ uses the message
properties API to iterate through the  tags to see if that particular uuid value is present. Because of
the way that the WebSphere Platform Messaging component of IBM MQ attaches to IBM Integration Bus
through a channel and RFH2 subscription when using the queued publish/subscribe interface, IBM MQ
also creates a fingerprint when it receives a publication by that route.
The goal is to not deliver any RFH2 to an application if it is not expecting any, simply because we have
added in our fingerprint information.
Whenever an RFH2 is converted into message properties, it will also be necessary to convert the
 folder; this removes the fingerprint information from the RFH2 that is passed on or delivered
to applications that have used the IBM WebSphere MQ 7.0, or later, API.
JMS applications do not see the fingerprint information, because the JMS interface does not extract that
information from the RFH2, and therefore does not hand it on to its applications.
The Rfp message properties are created with propDesc.CopyOptions = MQCOPY_FORWARD and
MQCOPY_PUBLISH. This has implications for applications receiving and then republishing the same
message. It means that such an application can continue the chain of routing fingerprints by using
PutMsgOpts.Action = MQACTP_FORWARD, but must be coded appropriately to remove its own
fingerprint from the chain. By default the application uses PutMsgOpts.Action = MQACTP_NEW and
starts a new chain.
Troubleshooting distributed queue management problems
Troubleshooting information to help you solve problems relating to distributed queue management
(DQM).
About this task
Some of the problems that are described are platform and installation specific. Where this is the case, it is
made clear in the text.
IBM MQ provides a utility to assist with problem determination named amqldmpa. During the course of
problem determination, your IBM service representative might ask you to provide output from the utility.
IBM Support will provide you with the parameters you require to collect the appropriate diagnostic
information, and information on how you send the data you record to IBM.
Attention: You should not rely on the format of the output from this utility, as the format is subject
to change without notice.
Problem determination for the following scenarios is discussed:
• “Using Ping to test communications” on page 79
• “Considerations for retrying a link” on page 85
• “Troubleshooting a problem where a channel refuses to run” on page 81
• “Resolving problems where a channel stops running” on page 86
• “Monitoring messages with dspmqrte” on page 79
• “Disaster recovery” on page 87
Related tasks
“Making initial checks” on page 6
There are some initial checks that you can make that may provide answers to common problems that you
might have.
“Collecting information for channel problems” on page 317
76 Troubleshooting and Support for IBM MQ
If you need assistance from IBM Support to resolve a problem when an IBM MQ channel is reporting a
problem or failing to run on Multiplatforms, you first need to collect troubleshooting information to send
to IBM Support to help find a solution.
Configuring distributed queuing
Related reference
Messages and reason codes
Communications protocol return codes for z/OS
Where to find information to help with troubleshooting
Depending on the type of problem you are experiencing, there are a number of possible sources of
information that you can use to help you with troubleshooting.
Command validation problems
Commands and panel data must be free from errors before they are accepted for processing. Any errors
that are found by the validation checks are immediately notified to the user by error messages.
A number of validation checks are made when creating, altering, and deleting channels and, where