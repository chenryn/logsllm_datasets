# Title: On the Routing-Aware Peering against Network-Eclipse Attacks in Bitcoin

## Authors:
- Muoi Tran, National University of Singapore
- Akshaye Shenoi, National University of Singapore
- Min Suk Kang, KAIST

## Abstract
Safeguarding blockchain peer-to-peer (P2P) networks is increasingly critical due to recent network attacks. While Bitcoin has successfully managed traditional Sybil and eclipse attacks, a recent Erebus attack [57] demonstrates that effectively eclipsing a Bitcoin node is possible when combined with a network-Sybil capability, allowing a malicious transit network to create millions of Sybil identities. Given the immediate availability and stealthiness of the Erebus attack, Bitcoin Core has implemented several simple protocol changes to mitigate it. Our large-scale evaluations of these quick patches and three carefully-designed protocol tweaks confirm that no simple solution can effectively handle the attack.

This paper focuses on a more fundamental solution called routing-aware peering (RAP), which has proven effective in detecting and circumventing similar network adversaries in other P2P networks. However, we show that preventing Erebus attacks with RAP is only wishful thinking. We discover that Erebus adversaries can exploit a small portion of route inference errors in any RAP implementation, providing an asymmetric advantage to the network adversaries and rendering all RAP approaches ineffective.

To address this, we propose an integrated defense framework that combines available simple protocol tweaks and RAP implementations. We demonstrate that a highly customizable defense profile is required for individual Bitcoin nodes because RAP's efficacy depends significantly on the node's location in the Internet topology. We present an algorithm that outputs a custom optimal defense profile, preventing most Erebus attacks from the top-100 large transit networks.

## 1. Introduction
Many blockchains operate on permissionless decentralized peer-to-peer (P2P) networks. Their openness and decentralization have been key to the success of cryptocurrencies and smart contracts. However, this comes at a cost, as they are potentially vulnerable to Sybil [15] and eclipse [51] attacks. Bitcoin [40], one of the most popular blockchain systems, has effectively addressed Sybil and eclipse attacks. First, a Sybil attacker in Bitcoin can create many peer identities using different IP/port combinations on a single machine. The Bitcoin P2P protocol groups all Sybil identities from a single IP address, limiting their impact. Second, eclipse attacks target specific nodes and manipulate their peering algorithms to isolate them from the rest of the network. The current Bitcoin client software is robust against known eclipse attacks after patching vulnerabilities in its peering algorithm [25, 26].

However, the recent Erebus attack [57] shows that Bitcoin remains vulnerable to persistent eclipse attacks with network-Sybil capabilities, where a malicious autonomous system (AS) creates large numbers of peer identities via IP spoofing. Bitcoin's permissionless nature allows sizable network adversaries (e.g., the top-100 largest ASes [9]) to easily create and use massive Sybil identities, ultimately controlling all of a target node’s connections. Bitcoin Core has implemented quick patches to mitigate this attack [41, 52], but our evaluations (see Section 3) confirm that these simple protocol fixes only marginally increase the Erebus attack execution time.

A more desirable long-term approach to the Erebus attack is to remove the network adversary's capability of utilizing large numbers of Sybil identities. One suggestion is a routing-aware peering (RAP) approach, which has proven effective in detecting and circumventing similar network adversaries in Tor P2P networks [1, 45, 53]. RAP enables individual Bitcoin nodes to identify Sybil peer identities by analyzing routes to potential peers. Early discussions on RAP in Bitcoin have been initiated, but no concrete implementation is available, possibly due to higher implementation complexity than quick patches.

This paper argues that preventing Erebus attacks with RAP is, unfortunately, wishful thinking. Unlike in similar Tor P2P networks, RAP implementations in Bitcoin fail to prevent network adversaries and only slightly increase the attack execution time. We find that the critical weakness of all possible RAP approaches in Bitcoin is their infrequent yet inevitable route inference errors, which can be exploited by adversaries to gain an asymmetric advantage over a target Bitcoin node and successfully eclipse it in most cases.

After learning that no single countermeasure in the P2P layer can effectively mitigate the Erebus attack, we aim to design a defense system that integrates all available countermeasures to provide a practical solution against the attacks. Integrating simple patches and RAP implementations is not straightforward, as simply implementing more countermeasures does not guarantee better defense performance, and there is no one-size-fits-all RAP operation. To address this, we present a new customizable defense framework for Bitcoin node operators, allowing them to make informed decisions regarding Erebus mitigation based on their nodes' locations on the Internet topology. We also present an efficient algorithm that outputs RAP's optimal operating point along with the simple countermeasures, preventing up to 98% of Erebus attacks from the top-100 large transit networks.

Our contributions are summarized as follows:
- We evaluate six simple protocol/parameter tweaks against the recently proposed Erebus attack [57] using a publicly available evaluation framework (§3). None of them successfully mitigate the Erebus attack.
- We evaluate the routing-aware peering (RAP) approach and show that, contrary to expectations, no practical RAP implementations for Bitcoin can prevent the Erebus attacks. They only slightly increase the attack execution time (§4 and §5). Our new finding is that a minimal route inference error rate can give an asymmetric advantage to the Erebus network adversaries.
- We propose an integrated defense framework by combining available simple protocol patches and RAP implementations (§6) to protect Bitcoin nodes against the majority of Erebus attacks. Our framework allows highly customizable defense profiles for Bitcoin nodes in diverse network environments, balancing the desired level of robustness against the Erebus attack and the costs of RAP operation.

## 2. Threat Model
In this paper, we consider the same attack goals and capabilities as the original Erebus attack [57]. As background, we briefly introduce the Bitcoin peer-to-peer network (§2.1) and then describe the Erebus attack model (§2.2).

### 2.1. Background on the Bitcoin P2P Protocol
Bitcoin [40] relies on a P2P network of individual nodes to maintain a replicated distributed ledger, the blockchain, which stores the historical ownership information of all funds in the system. Transactions are grouped into blocks, and the blockchain is periodically extended with a new block via a mining process. All transaction and block information is propagated by the P2.P network until all nodes are synchronized. Since Bitcoin is permissionless, nodes can freely join and leave the system, and a node can notify its existence to the network by self-advertising its peer identity (e.g., IP address) to some peers, who then propagate the address information to all other nodes. Bitcoin aims to form a random P2P network, where each node establishes ten outgoing connections selected from its local database storing other peers' identities [13]. Nodes with public IPs also accept up to 115 incoming connections and are considered reachable.

For a better understanding of how peer information (i.e., IP addresses) is maintained and used in Bitcoin, we zoom into the internal workings of a single Bitcoin node and show the life cycle of an IP address in Figure 1. The internal peer database of a node consists of two tables: the new table stores newly-propagated IPs, and the tried table stores IPs that have been connected to. Both tables manage IPs in groups (e.g., /16 prefix for IPv4), and each group can occupy only a small portion of the tables. There are five steps in the life cycle of an IP address:
1. In Step ➀, the IP address propagated by other peers is initially inserted into the new table.
2. If the new IP is inserted into an already occupied slot and the existing IP is “terrible” (e.g., older than 30 days), the existing one is evicted from the table; see Step ➁.
3. Every two minutes, one randomly-chosen IP address from the new table is tested by a short-lived connection (i.e., feeler connection) and is promoted to the tried table if it is reachable; see Step ➂.
4. Step ➃ describes the demotion of an IP address from the tried table to the new table if another IP is inserted into its slot and it is tested to be unreachable.
5. In Step ➄, when there are not yet ten outgoing connections, a reachable IP is selected at random from either the new or tried table (which table is chosen is also randomized) to establish a connection. If this new outgoing peer is selected from the new table, it is also promoted to the tried table as in Step ➂.

### 2.2. The Erebus Attack
The Erebus attack was recently presented as a stealthy partitioning attack against the Bitcoin P2P network [57]. At a high level, the Erebus attacker follows common P2P eclipse attack recipes, gradually inserting adversary-controlled identities into the peer database of a targeted Bitcoin node until all connections selected by the victim are made to those peers, isolating the victim from the rest of the network. The main difference of the Erebus attack compared to typical eclipse attacks is that a network adversary creates millions or more network-Sybil peer identities by spoofing IP addresses of any ASes behind her network with respect to the victim node’s location. Figure 2 illustrates an example of the Erebus attack, where the adversary "AS666 Evil Telecom" injects selected IP addresses (e.g., B and C) into the victim’s internal database in the form of peer advertisements and waits for the victim to connect to B and C. When all connections are made to Sybil IPs, the attack is considered successful. Note that the adversary AS must be on the paths from the victim to Sybil nodes to spoof their IP addresses but not necessarily on the reverse-direction paths.

We consider a network adversary (e.g., Tier-1 or large Tier-2 ASes) that has full control of any messages going through her own network. The attacker can send low-rate source-IP-spoofed packets. The attack goal is to occupy all the peer connections of a targeted node and thus isolate (or eclipse) the targeted Bitcoin node from the rest of the Bitcoin P2P network.

**Assumptions for victim nodes:**
- **Identified by public IPs:** We consider Bitcoin full nodes with public IP addresses. There are about 8,000 such public nodes as of February 2021 [59]. SPV client nodes, VPN-connected nodes, or Bitcoin nodes connected via Tor are out of scope.
- **IPv4 only:** The vast majority (e.g., 85%) of Bitcoin nodes run with IPv4 [59], and we assume a victim node has a single IPv4 address. We limit ourselves to the IPv4 space, considering that an IPv4 Bitcoin node can only connect directly to other IPv4 nodes [24].
- **No central regulating authority:** Network attacks at the P2P layer are often prevented with trusted central regulating authorities. However, relying on such a centralized party is less ideal in cryptocurrencies, as it may violate the permissionless blockchain principle. Thus, we only consider solutions without any central authorities.
- **No moving target defense:** Targeted network attacks are sometimes mitigated when a victim host frequently changes its network identity. However, frequent IP changes in Bitcoin can seriously damage the peers’ network connectivity and negatively affect block and transaction propagation [29].
- **No cross-layer solutions:** The Erebus attack work [57] suggests a 'smart peer eviction policy' that requires interactions between the consensus layer and the P2P network layer. Despite its potential, such a cross-layer solution would complicate the implementation and open up new vulnerabilities. Thus, we strictly limit ourselves to P2P network-layer only solutions.

## 3. Limitations of Simple Countermeasures
Considering the immediate availability and stealthiness of the Erebus attack, the Bitcoin Core team announced two simple patches shortly after the publication of the Erebus attack [41, 52]. However, no systematic, large-scale evaluations have been conducted on such simple countermeasures. As a first step towards Erebus mitigation, we implement and evaluate several simple countermeasures (including the two adopted quick patches) to the Erebus attack. A countermeasure is considered simple if the required change to the Bitcoin codebase is only a few lines of source code or a single parameter change.

### 3.1. Bitcoin Protocol Tweaks
We present several protocol tweaks along with their descriptions, objectives, caveats, and deployment status in Table 1.

**Previously-proposed simple countermeasures:**
- The original Erebus paper [57] suggests four changes to the Bitcoin protocol: ASN-based grouping, more outgoing connections, table size reduction, and smart peer eviction policy. We implement and test the first three countermeasures.
- **ASN-based grouping (T1):** Supported in Bitcoin Core as an experimental feature [13, 41].
- **More outgoing connections (T3):** Since Bitcoin 0.19.0, two more outgoing connections are added for propagating only block data. Adding even more connections is worth considering if the additional connections are block-relay-only or if bandwidth-saving developments (e.g., Erlay [42]) are integrated.
- **Table size reduction:** This tweak has not been developed, perhaps because it contradicts the protocol tweak made after the Eclipse attack [27], where both new and tried tables were increased by four times.

**Additional simple countermeasures:**
- An important observation from the "life cycle" of Bitcoin peer IP addresses (see Section 2.1) is that when the Erebus attack occurs, the attack exploits the IP management and selection process. We propose three additional tweaks derived from this observation:
  - **Tweak 1 (T1):** Increase the number of outgoing connections.
  - **Tweak 2 (T2):** Implement anchor connections to preserve legitimate connections during reboots.
  - **Tweak 3 (T3):** Reduce the size of the new and tried tables to limit the number of Sybil identities.

### 3.2. Empirical Evaluation
We empirically evaluate the Erebus attacks against the proposed tweaks and confirm that tweaking the Bitcoin protocol is insufficient to address the attacks. The results show that while these tweaks can marginally increase the attack execution time, they do not provide a comprehensive solution.

## 4. Routing-Aware Peering (RAP)
Routing-aware peering (RAP) is a promising approach that has proven effective in detecting and circumventing similar network adversaries in other P2P networks. RAP empowers individual Bitcoin nodes to identify Sybil peer identities by analyzing the routes to potential peers. However, we show that preventing Erebus attacks with RAP is only wishful thinking. RAP implementations in Bitcoin fail to prevent network adversaries and only slightly increase the attack execution time. The critical weakness of all possible RAP approaches in Bitcoin is their infrequent yet inevitable route inference errors, which can be exploited by adversaries to gain an asymmetric advantage over a target Bitcoin node and successfully eclipse it in most cases.

## 5. Integrated Defense Framework
Given that no single countermeasure in the P2P layer can effectively mitigate the Erebus attack, we propose an integrated defense framework that combines available simple protocol tweaks and RAP implementations. This framework allows highly customizable defense profiles for Bitcoin nodes in diverse network environments, balancing the desired level of robustness against the Erebus attack and the costs of RAP operation. We present an efficient algorithm that outputs RAP's optimal operating point along with the simple countermeasures, preventing up to 98% of Erebus attacks from the top-100 large transit networks.

## Conclusion
In conclusion, this paper evaluates the limitations of simple protocol tweaks and the RAP approach in mitigating the Erebus attack. We propose an integrated defense framework that combines these approaches to provide a practical and customizable solution for Bitcoin nodes. Our findings highlight the need for a multi-faceted approach to address the complex and evolving threats in blockchain P2P networks.