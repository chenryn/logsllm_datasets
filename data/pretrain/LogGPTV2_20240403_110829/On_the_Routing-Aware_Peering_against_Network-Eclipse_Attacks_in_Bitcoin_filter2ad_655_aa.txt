title:On the Routing-Aware Peering against Network-Eclipse Attacks in Bitcoin
author:Muoi Tran and
Akshaye Shenoi and
Min Suk Kang
On the Routing-Aware Peering against 
Network-Eclipse Attacks in Bitcoin
Muoi Tran and Akshaye Shenoi, National University of Singapore; 
Min Suk Kang, KAIST
https://www.usenix.org/conference/usenixsecurity21/presentation/tran
This paper is included in the Proceedings of the 30th USENIX Security Symposium.August 11–13, 2021978-1-939133-24-3Open access to the Proceedings of the 30th USENIX Security Symposium is sponsored by USENIX.On the Routing-Aware Peering against Network-Eclipse Attacks in Bitcoin
Muoi Tran
Akshaye Shenoi
Min Suk Kang∗
National University of Singapore
National University of Singapore
KAIST
Abstract
Safeguarding blockchain peer-to-peer (P2P) networks is
more critical than ever in light of recent network attacks. Bit-
coin has been successfully handling traditional Sybil and
eclipse attacks; however, a recent Erebus attack [57] shows
that effectively eclipsing a Bitcoin node is possible when the
attack is combined with a network-Sybil capability; i.e., a
malicious transit network can create millions or more Sybil
identities. Given the immediate availability and stealthiness
of the Erebus attack, Bitcoin Core has quickly implemented
a few simple protocol/parameter changes to mitigate it. Our
large-scale evaluations of these quick patches and three simi-
lar carefully-designed protocol tweaks conﬁrm that, unfortu-
nately, no simple solution can effectively handle the attack.
This paper focuses on a more fundamental solution called
routing-aware peering (or RAP), a proven silver bullet in
detecting and circumventing similar network adversaries in
other P2P networks. However, we show that, contrary to our
expectation, preventing the Erebus attacks with RAP is only
wishful thinking. We discover that Erebus adversaries can
exploit a tiny portion of route inference errors in any RAP
implementations, which gives an asymmetric advantage to the
network adversaries and renders all RAP approaches ineffec-
tive. To that end, we propose an integrated defense framework
that composes the available simple protocol tweaks and RAP
implementation. In particular, we show that a highly cus-
tomizable defense proﬁle is required for individual Bitcoin
nodes because RAP’s efﬁcacy depends signiﬁcantly on where
a Bitcoin node is located on the Internet topology. We present
an algorithm that outputs a custom optimal defense proﬁle
that prevents most of Erebus attacks from the top-100 large
transit networks.
1 Introduction
Many blockchains run on permissionless decentralized peer-
to-peer (P2P) networks. Their openness and decentralization
∗Corresponding author.
have been the keys to the success of cryptocurrencies and
smart contracts; however, this comes with a price — they are
potentially vulnerable to Sybil [15] and eclipse [51] attacks.
Bitcoin [40], one of the most popular blockchain systems, has
been effectively addressing Sybil and eclipse attacks. First, a
Sybil attacker in Bitcoin can create many peer identities with
different IP/port combinations using a single peer machine.
In this way, the attacker can act like multiple peers in the
system. However, the spawned Sybil identities do not cause
much harm because the Bitcoin P2P protocol groups all the
Sybil identities from a single IP address and contains them.
Second, eclipse attacks target a speciﬁc node and manipulate
the target’s peering algorithm to isolate it from the rest of the
network. The current Bitcoin client software is robust to the
known attack [27] after patching a few vulnerabilities in its
peering algorithm [25, 26].
However, a more recent attack, dubbed Erebus [57], shows
that Bitcoin is still vulnerable to a persistent eclipse at-
tack with the network-Sybil capability; i.e., a malicious au-
tonomous system (AS) creating large numbers of peer identi-
ties via IP spooﬁng. Bitcoin’s permissionless nature allows
any sizable network adversaries (e.g., the top-100 largest
ASes [9]) to easily create and use massive Sybil identities and
ultimately control all of a target node’s connections. Bitcoin
Core has implemented a few quick patches to mitigate this
attack [41, 52] with the caveat that none of them are com-
plete solutions yet [21]. Our evaluations (see Section 3) con-
ﬁrm that these simple protocol ﬁxes (and some other simple
protocol tweaks) only marginally increase the Erebus attack
execution time.
A more desirable long-term approach to the Erebus attack
is to remove the network adversary’s capability of utilizing
large numbers of Sybil identities. One recurring suggestion
for this is what we call a routing-aware peering (or RAP)
approach. This option is a proven silver bullet in detecting
and circumventing similar network adversaries in Tor P2P
networks [1, 45, 53]. RAP empowers individual Bitcoin nodes
to identify Sybil peer identities by analyzing the routes to-
wards all potential peers. Some early discussions on RAP
USENIX Association
30th USENIX Security Symposium    1253
approaches in Bitcoin have been initiated, but no concrete
implementation is available, possibly due to higher implemen-
tation complexity than quick patches.
This paper argues that preventing Erebus attacks with RAP
is, unfortunately, wishful thinking. Unlike RAP in similar
Tor P2P networks, RAP implementations in Bitcoin fail to
prevent network adversaries and only increase the attack ex-
ecution time slightly. We ﬁnd that the critical weakness of
all possible RAP approaches in Bitcoin is their infrequent yet
inevitable route inference errors; e.g., less than 6% of miss
rate. In a permissionless Bitcoin P2P network (unlike the
semi-permissionless Tor network), such a low route inference
error rate in RAP can be translated into tens or even hundreds
of thousands of Sybil identities, which is still enough for a
successful Erebus attack. By exploiting these rare inference
errors in RAP, adversaries obtain an asymmetric advantage
over a target Bitcoin node and successfully eclipse it in most
cases.
After learning that no single countermeasure in the P2P
layer can effectively mitigate the Erebus attack, we alterna-
tively aim to design a defense system that integrates all these
available countermeasures to provide a workable, practical so-
lution against the attacks. Integrating the simple patches and
RAP implementations may ﬁrst seem obvious. However, it is
not straightforward for two reasons: (1) simply implementing
more of the available countermeasures in a Bitcoin node may
not necessarily guarantee better defense performance as the
security against the Erebus attack is non-monotonic; and (2)
there exists no one-size-ﬁts-all RAP operation in practice be-
cause its performance and cost vary drastically depending on
where on the Internet topology a Bitcoin node is located. To
that end, we present a new customizable defense framework
for Bitcoin node operators to make an informed decision re-
garding the Erebus mitigation, particularly depending on their
nodes’ locations on the Internet topology. We also present
an efﬁcient algorithm that outputs RAP’s optimal operating
point along with the simple countermeasures, which prevents
up to 98% of Erebus attacks from the top-100 large transit
networks.
We summarize our contributions as follows:
• We evaluate a set of six (three old and three new) simple
protocol/parameter tweaks against a recently proposed Ere-
bus attack [57] using (and improving) a publicly available
evaluation framework (§3). We conclude that none of them
successfully mitigate the Erebus attack, unfortunately.
• We then evaluate a highly promising defense approach
called routing-aware peering (RAP) and show that, con-
trary to our expectation, no practical RAP implementations
for Bitcoin can prevent the Erebus attacks. They can only
slightly increase the attack execution time (§4 and §5). Our
new ﬁnding is that a minimal route inference error rate
(which is shown to cause no signiﬁcant impact to the previ-
ous defenses in similar P2P attacks) can give an asymmetric
peer IP address
IP grouping 
(e.g., /16 prefix)
1
insert
new
3
promote
tried
4
demote
Bitcoin client
2
evict
5
select
50%
50%
…
"
!
"#
Outgoing connections
Figure 1: An illustration of the life cycle of peer IP addresses
in Bitcoin. IPs are stored in two-tier tables where reliably
reachable IPs are selected to be outgoing peers, and “terrible”
(e.g., older than 30 days) IPs are eventually evicted.
advantage to the Erebus network adversaries.
• We propose an integrated defense framework by composing
the available simple protocol patches and the RAP imple-
mentations (§6) to protect Bitcoin nodes against the ma-
jority of the Erebus attacks. Our framework allows highly
customizable defense proﬁles for Bitcoin nodes in diverse
network environments that balance the desired level of ro-
bustness against the Erebus attack and the costs of RAP
operation.
2 Threat Model
In this paper, we consider the same attack goals and capabili-
ties of the original Erebus attack [57]. As a background, we
brieﬂy introduce the Bitcoin peer-to-peer network (§2.1), and
then we describe the Erebus attack model (§2.2).
2.1 Background on the Bitcoin P2P Protocol
Bitcoin [40] relies on a P2P network of individual nodes
to maintain a replicated distributed ledger, the blockchain,
which stores the historical ownership information of all funds
in the system. A fund can be transferred from one user to
another in a transaction. Valid transactions are grouped into
a block, and the blockchain is periodically extended with a
new block via a mining process. All transaction and block
information is propagated by the P2P network until all nodes
in the system are synchronized with the same state. Since
Bitcoin is permissionless (i.e., nodes can freely join and leave
the system), it allows a node to notify its existence to the
network via self-advertising its peer identity (e.g., IP address)
to some peers, who then propagate the address information to
all other nodes. Bitcoin aims to form a random P2P network,
where each node establishes ten outgoing connections that
are carefully selected from its local database that stores other
peers’ identities [13]. Nodes with public IPs also accept up to
115 incoming connections and are considered reachable.
For an easier understanding of how the peer information
(i.e., IP addresses) is maintained and used in Bitcoin, let us
1254    30th USENIX Security Symposium
USENIX Association
zoom into the internal workings of a single Bitcoin node and
show the life cycle of an IP address, i.e., all possible steps that
it would experience within the internal data structure of the
node in Figure 1. The internal peer database of a node consists
of two tables: the new table stores newly-propagated IPs, and
the tried table stores the IPs that have been connected to.
Both tables manage IPs in groups (e.g., /16 preﬁx for IPv4)
where each group can occupy only a small portion of the
tables; see previous work [27, 57] for the detailed description
of IP allocation. There are ﬁve steps in the life cycle of an IP
address:
• In Step ➀, the IP address propagated by other peers is
initially inserted into the new table.
• If the new IP is inserted into an already occupied slot and
the existing IP is “terrible” (e.g., older than 30 days), the
existing one is evicted from the table; see Step ➁. We
observe that most IPs in the new table tend to become
unreachable in the long run.
• Every two minutes, one randomly-chosen IP address from
the new table is tested by a short-lived connection (i.e.,
feeler connection) and is promoted to the tried table if it
is reachable; see Step ➂. From our observation, most IPs
in the tried table tend to be reachable even after a few
weeks later.
• Step ➃ describes the demotion of an IP address from the
tried table to the new table if another IP is inserted into
its slot and it is tested to be unreachable.
• In Step ➄, when there are not yet ten outgoing connections,
a reachable IP is selected at random from either new or
tried table (which table is chosen is also randomized) to
establish a connection. If this new outgoing peer is selected
from the new table, it is also promoted to the tried table
as in Step ➂.
2.2 The Erebus Attack
The Erebus attack was recently presented as a stealthy parti-
tioning attack against Bitcoin P2P network [57]. At a high
level, the Erebus attacker follows the common attack recipes
of P2P eclipse attacks, such as [27]; that is, to gradually in-
sert adversary-controlled identities into the peer database of
a targeted Bitcoin node until all connections selected by the
victim are made to those peers (i.e., the victim is isolated
from the rest of the network). The main difference of the
Erebus attack compared to typical eclipse attacks is that a net-
work adversary creates millions or more network-Sybil peer
identities by spooﬁng IP addresses of any ASes behind her
network with respect to the victim node’s location. Figure 2
illustrates an example of the Erebus attack in which the ad-
versary “AS666 Evil Telecom”1 injects selected IP addresses
(e.g., B and C) into the victim’s internal database in the form
1The AS number 666 is used as a symbol of the devil’s number. It is not
meant to indicate a real AS with AS number 666.
A
B
C
Autonomous 
System (AS)
AS666 
Evil Telecom
inject B, C
victim
Bitcoin node
C
peer
database
A B
Figure 2: An illustration of the Erebus attack [57]. “AS666
Evil Telecom” inserts some Sybil IPs (e.g., B and C) into
the peer database of the victim Bitcoin node so that peer
connections towards these Sybil IPs can be made later at the
victim’s discretion. At some point in time, AS666 eventually
hijacks all peer connections of the victim node.
of peer advertisements and waits for the victim to connect to
B and C. When all connections are made to Sybil IPs, the
attack is considered as successful. Note that the adversary
AS must be on the paths from the victim to Sybil nodes (e.g.,
B, C) to spoof their IP addresses but not necessarily on the
reverse-direction paths.
We consider a network adversary (e.g., Tier-1 or large
Tier-2 ASes) that has the full control of any messages go-
ing through her own network. The attacker can also send only
low-rate (e.g., once every few seconds) source-IP-spoofed
packets. The attack goal is to occupy all the peer connections
of a targeted node and thus isolate (or eclipse) the targeted
Bitcoin node from the rest of the Bitcoin P2P network.
Assumptions for victim nodes. We make the same as-
sumptions made in the original Erebus attack work [57] for
the victim Bitcoin nodes.
• Identiﬁed by public IPs. We consider Bitcoin full nodes
with public IP addresses. There are about 8,000 such pub-
lic nodes as of February 2021 [59]. Note that SPV client
nodes [40], VPN-connected nodes, or Bitcoin nodes con-
nected via Tor are out of scope as the original Erebus attack
work also does not target them [57].
• IPv4 only. The vast majority (e.g., 85%) of Bitcoin nodes
run with IPv4 [59], and we also assume that a victim node
has a single IPv4 address. We limit ourselves to the IPv4
space in this paper, considering that an IPv4 Bitcoin node
can only connect directly to other IPv4 nodes [24].
• No central regulating authority. Network attacks at the
P2P layer are often prevented with some trusted central
regulating authorities; e.g., a repository of white-listed (or
black-listed) peers or connecting through relay nodes [3,18,
USENIX Association
30th USENIX Security Symposium    1255
20]. However, relying on such a centralized party is a less
ideal approach, particularly in cryptocurrencies, as it may
violate the permissionless blockchain principle. Thus, in
this paper, we only consider solutions without any central
authorities.
• No moving target defense. Targeted network attacks are
sometimes effectively mitigated when a victim host fre-
quently changes its network identity [2, 30, 31]. However,
we argue that moving target defenses should only be the
last resort for Erebus mitigation. When a moving target
defense is deployed in a permissionless decentralized P2P
network, a peer node needs to rebuild its P2P connectiv-
ity at every IP change. However, frequent IP changes in
Bitcoin are known to seriously damage the peers’ network
connectivity and negatively affect the block and transaction
propagation [29].
• No cross-layer solutions. The Erebus attack work [57]
suggests one potential countermeasure called ‘smart peer
eviction policy’ that requires some interactions between
the consensus layer and the P2P network layer. Despite its
potentials, such a cross-layer solution would unavoidably
complicate the implementation and, worse, may open up
new vulnerabilities. Thus, in this paper, we strictly limit
ourselves to the P2P network-layer only solutions.
3 Limitations of Simple Countermeasures
Considering its immediate availability and the stealthiness
property of the Erebus attack, the Bitcoin Core team has an-
nounced two simple patches not long after the publication
of the Erebus attack [41, 52]. However, no systematic, large-
scale evaluations have been conducted on such simple coun-
termeasures. As a ﬁrst step towards the Erebus mitigation,
we implement and evaluate several simple countermeasures
(including the two already adopted quick patches) to the Ere-
bus attack. We consider a countermeasure is simple when the
required change to the Bitcoin codebase is only a few lines of
source code or even a single parameter change.
We ﬁrst review three proposed tweaks from existing work
and present three additional tweaks derived from our IP “life
cycle” in Bitcoin P2P (§3.1). We then empirically evaluate
the Erebus attacks against them and conﬁrm that tweaking the
Bitcoin protocol is insufﬁcient to address the attacks (§3.2).
3.1 Bitcoin Protocol Tweaks
We present several protocol tweaks along with their descrip-
tions, objectives, caveats, and deployment status in Table 1.
Previously-proposed simple countermeasures. The origi-
nal Erebus paper [57] suggests four changes to the Bitcoin
protocol, i.e., ASN-based grouping, more outgoing connec-
tions, table size reduction, and smart peer eviction policy, and
we implement and test the ﬁrst three countermeasures. As of
this writing, the ASN-based grouping (T1) is supported in Bit-
coin Core as an experimental feature [13, 41]. Since Bitcoin
0.19.0, two more outgoing connections are added for propa-
gating only the block data, which happens infrequently (e.g.,
few MBs every ten minutes) and unlikely creates the trafﬁc
burden to the network. If the additional connections are block-
relay-only or the on-going developments of bandwidth-saving
for Bitcoin transactions (e.g., Erlay [42]) are integrated into
Bitcoin, adding even more connections (T3) is worth consid-
ering. The table size reduction tweak has not been developed,
perhaps because it contradicts the protocol tweak made after
the Eclipse attack [27] where both new and tried tables are
increased by four times.
The Eclipse paper [27] makes several suggestions to Bit-
coin and most of them have been deployed over the years,
except the anchor connection tweak (T2) that resurfaces af-
ter the Erebus attack is presented [52]. Currently, Bitcoin
preserves two block-relay-only connections (i.e., anchors)
when rebooting to prevent eclipse attackers from terminating
existing (likely legitimate) connections [13].
Additional simple countermeasures. An important observa-
tion from the “life cycle” of Bitcoin peer IP addresses (see
Section 2.1) is that when the Erebus attack occurs, the at-