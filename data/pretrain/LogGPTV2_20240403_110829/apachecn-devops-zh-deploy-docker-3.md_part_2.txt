 apt-get autoclean              # Remove any packages that are no longer needed on the system
```
与以前的映像不同，在这里，我们安装`openssl`包，因为我们将需要它来创建 NGINX 加密的密码进行身份验证，但是`clean`和`autoclean`行在这里，以确保我们删除系统上的任何缓存`apt`包并删除孤立的包，给我们一个更小的映像，这是我们应该始终努力的事情。就像以前一样，我们很早就以类似的方式组合了所有的行，因此前一层和当前层之间的文件系统差异将只是所需的更改，而不是其他，这使得它成为一个非常紧凑的更改。在编写自己的映像时，如果你发现自己需要更多的脂肪修剪，可以删除更多的东西(例如删除文档文件、`/var`目录、不必要的可选包等)，但这两个应该是在大多数情况下使用的，因为它们操作简单，并且在基于 Debian 的系统上运行良好。
# 证明
如果没有适当的身份验证，我们的服务器对任何访问它的人都是开放的，因此我们添加了一个用户名/密码组合来充当我们服务的看门人:
```
ARG PASSWORD=test
...
RUN printf "user:$(openssl passwd -1 $PASSWORD)\n" >> $SRV_PATH/.htpasswd
```
`ARG`充当`ENV`指令的构建时替代品，并允许将密码作为构建参数传递给`--build-arg `。如果构建没有提供一个，它应该默认为等号后面的参数，在这种情况下这是一个非常不安全的`test`。我们将在`Dockerfile`中使用这个稍微低一点的变量来为我们的用户创建带有特定密码的`.htpasswd`文件。
第二行使用我们之前安装的`openssl`来获取这个构建参数，并以 NGINX 和大多数其他网络服务器都能理解的格式创建带有加密凭证的`.htpasswd`文件(`:`)。
Warning! Keep in mind that the  `-1` algorithm is less secure than the **Salted SHA** (SSHA) method of creating `.htpasswd` passwords, but to create them in this way would have involved more complicated commands that would have distracted from our main purpose here, but you can visit [https://nginx.org/en/docs/http/ngx_http_auth_basic_module.html#auth_basic_user_file](https://nginx.org/en/docs/http/ngx_http_auth_basic_module.html#auth_basic_user_file) for more details. Also be aware that you should never use online password generators as they can (and often do) steal your entered information.
如果您以前没有使用过 Bash 子 shell，则`$(openssl ...)`在一个单独的 shell 中运行，并且在计算其余部分之前，输出被替换为字符串变量，因此`>>`追加操作将只看到`username:`之后的加密密码，而与`openssl`无关。从这些事情中应该可以看出，如果我们不提供任何构建参数，容器将只有一个用户名`user`，密码设置为`test`。
Warning! This type of credential passing to the image is used here as an example and is very nonsecure since anyone can run `docker history` and see what this variable was set to or start the image and echo the `PASSWORD` variable. In general, preferred ways of passing this type of sensitive data are through environment variables when you launch the container, mounting the credentials file as a volume onto the container, using `docker secret`, or an external credentials sharing service. We may cover some of these in later chapters, but for now, you should just keep in mind not to use this particular way of passing credentials in production due to security concerns.
随着`web_server`部分完成，我们可以进入下一部分:数据库。
# 数据库
虽然 SQL 数据库在分割和集群能力方面取得了长足的进步，并且通常提供了良好的性能，但是许多集群友好的解决方案都是基于 NoSQL 的，并且在大多数情况下使用键/值存储；此外，与生态系统中根深蒂固的 SQL 玩家相比，他们的地位逐年上升。为了以最快的速度和最少的工作量获得成功，我们将在这里选择 MongoDB，这对于开始工作来说是轻而易举的事情，并且因为它是 NoSQL，我们也不需要设置任何类型的模式，大大减少了我们对复杂配置的需求！
Warning! The default setup for MongoDB is very easy to do, but it does not enable any security by default, so anyone with network access to that container can read and write data to any database. In a private cloud, this might be somewhat acceptable, but in any other situation, it is not something that should be done, so keep in mind that if you plan on deploying MongoDB and make sure it is set up at least with some sort of isolation and/or authentication.
我们这里的整个数据库设置将非常简单，如果我们不需要通过包更新来强化它，我们甚至不会有一个定制的:
```
FROM mongo:3
# Make sure we are fully up to date
RUN apt-get update -q && \
 apt-get dist-upgrade -y && \
 apt-get clean && \
 apt-get autoclean
```
当我们运行它时，我们唯一应该考虑的是确保来自容器(`/var/lib/mongodb`)的数据库存储卷从主机装载到容器中，以便在容器停止时我们保留它，但是一旦我们开始启动容器组，我们就可以担心这一点。
# 应用服务器
对于这个组件，我们将选择一个框架，它包含启动和运行服务所需的最少量的样板文件，大多数人今天会说它是带有 Express 的 Node.js。由于 Node.js 是基于 JavaScript 的，而 JavaScript 最初是基于类似 Java 的语法，大多数从事 HTML 工作的人应该能够弄清楚应用代码在做什么，但是在我们到达那里之前，我们需要定义我们的 Node 包和我们的依赖项，所以在与`web_server`相同的级别上创建一个新的`application_server`目录，并将以下内容添加到名为`package.json`的文件中:
```
{
  "name": "application-server",
  "version": "0.0.1",
  "scripts": {
    "start": "node index.js"
  },
  "dependencies": {
    "express": "^4.15.4"
  }
}
```
这里没有什么真正神奇的东西；我们只是使用一个 Node 包定义文件来声明我们需要 Express 作为依赖项，并且我们的`npm start`命令应该运行`node index.js`。
让我们现在也制作我们的 Dockerfile:
```
FROM node:8
# Make sure we are fully up to date
RUN apt-get update -q && \
 apt-get dist-upgrade -y && \
 apt-get clean && \
 apt-get autoclean
# Container port that should get exposed
EXPOSE 8000
# Setup any variables we need
ENV SRV_PATH /usr/local/share/word_test
# Make our directory
RUN mkdir -p $SRV_PATH && \
 chown node:node $SRV_PATH
WORKDIR $SRV_PATH
USER node
COPY . $SRV_PATH/
RUN npm install
CMD ["npm", "start"]
```
其中许多东西在这里应该非常熟悉，尤其是熟悉 Node 的人。我们从`node:8`映像开始，添加我们的应用代码，安装我们在`package.json`(带有`npm install`)中定义的依赖项，然后最终确保应用在从`docker` CLI 运行时启动。
这里的顺序对于避免缓存损坏和确保适当的权限非常重要。我们将我们预计不会有太大变化的事物(`USER`、`WORKDIR`、`EXPOSE`、`mkdir`和`chown`)放在`COPY`之上，因为它们相对于应用代码来说变化的可能性要小得多，并且因为它们大多是可互换的，所以我们按照我们认为未来最不可能变化的升序排列它们，以防止重建图层和浪费计算能力。
Here is also a Node.js-specific image optimization trick: since `npm install` is usually the most time and CPU intensive part of dealing with code changes to a Node application, you can even further optimize this Dockerfile by copying only `package.json`, running `npm install`, and then copying the rest of the files to the container. Creating the container in this manner will only do the pricey `npm install` if `package.json` changes and will generally improve build times by a large margin, but this was excluded from this example in order to not derail our main conversation with framework-specific optimizations.
到目前为止，我们还没有真正定义任何应用代码，所以让我们看看它是什么样子。首先，我们需要一个 HTML 视图作为我们的登录页面，我们可以使用`pug`(以前也称为`jade`)模板快速地将一个视图组合在一起。创建一个`views/`文件夹，并将其放入位于该文件夹中名为`index.pug`的文件中:
```
html
  head
    title Docker words
  body
    h1 Saved Words
    form(method='POST' action='/new')
        input.form-control(type='text', placeholder='New word' name='word')
        button(type='submit') Save
    ul
        for word in words
            li= word
```
除了它是一个简单的 HTML 页面，我们会在这个页面上显示渲染过程中传递到它的`words`数组中的所有项目，如果放入一个新的单词，就会有一个表单作为`POST`请求提交给`/new`端点。
# 主要应用逻辑
没有简单的方法，但是我们的主要应用逻辑文件`index.js`不会像其他配置文件那样简单:
```
'use strict'
// Load our dependencies
const bodyParser = require('body-parser')
const express = require('express');
const mongo = require('mongodb')
// Setup database and server constants
const DB_NAME = 'word_database';
const DB_HOST = process.env.DB_HOST || 'localhost:27017';
const COLLECTION_NAME = 'words';
const SERVER_PORT = 8000;
// Create our app, database clients, and the word list array
const app = express();
const client = mongo.MongoClient();
const dbUri = `mongodb://${DB_HOST}/${DB_NAME}`;
const words = [];
// Setup our templating engine and form data parser
app.set('view engine', 'pug')
app.use(bodyParser.urlencoded({ extended: false }))
// Load all words that are in the database
function loadWordsFromDatabase() {
    return client.connect(dbUri).then((db) => {
        return db.collection(COLLECTION_NAME).find({}).toArray();
    })
    .then((docs) => {
        words.push.apply(words, docs.map(doc => doc.word));
        return words;
    });
}
// Our main landing page handler
app.get('/', (req, res) => {
    res.render('index', { words: words });
});
// Handler for POSTing a new word
app.post('/new', (req, res) => {
    const word = req.body.word;
    console.info(`Got word: ${word}`);
    if (word) {
        client.connect(dbUri).then((db) => {
            db.collection(COLLECTION_NAME).insertOne({ word }, () => {
                db.close();
                words.push(word);
            });
        });
    }
    res.redirect('/');
});
// Start everything by loading words and then starting the server 
loadWordsFromDatabase().then((words) => {
    console.info(`Data loaded from database (${words.length} words)`);
    app.listen(SERVER_PORT, () => {
        console.info("Server started on port %d...", SERVER_PORT);
    });
});
```
这个文件一开始可能看起来让人望而生畏，但这可能是您可以从头开始制作的最小的 API 服务，它也是功能齐全的。