## PostgreSQL 锁等待跟踪   
### 作者                                                                                         
digoal                                                                                         
### 日期                                                                                         
2016-03-18                                                                                      
### 标签                                                                                         
PostgreSQL , trace , lock , 跟踪 , 锁等待   
----                                                                                         
## 背景                             
PostgreSQL 在打印LONG SQL时，锁等待的时间也会算在内，并且目前在日志中没有将锁等待的时间单独打印出来。  
```  
shared_preload_libraries='auto_explain'  
auto_explain.log_min_duration='1s'  
auto_explain.log_analyze=true  
auto_explain.log_buffers=true  
auto_explain.log_timing=true  
auto_explain.log_triggers=true  
auto_explain.log_verbose=true  
auto_explain.log_nested_statements=true  
pg_ctl restart -m fast  
```  
例子:  
session A:  
```  
postgres=# create table test2(id int, info text);  
CREATE TABLE  
postgres=# insert into test2 values (1,'test');  
INSERT 0 1  
postgres=# begin;  
BEGIN  
postgres=# update test2 set info='a' where id=1;  
UPDATE 1  
```  
session B:  
```  
postgres=# update test2 set info='b' ;  
wait  
```  
session A:  
```  
postgres=# end;  
COMMIT  
```  
session B:  
```  
UPDATE 1  
```  
查看日志如下：  
```  
2016-03-15 15:44:23.618 CST,"postgres","postgres",106815,"[local]",56e7bc6c.1a13f,3,"UPDATE",2016-03-15 15:40:28 CST,3/12,574614687,LOG,00000,"duration: 32038.420 ms  plan:  
Query Text: update test2 set info='b' ;  
Update on test2  (cost=0.00..22.70 rows=1270 width=10) (actual time=32038.418..32038.418 rows=0 loops=1)  
  Buffers: shared hit=5  
  ->  Seq Scan on test2  (cost=0.00..22.70 rows=1270 width=10) (actual time=0.014..0.015 rows=1 loops=1)  
        Buffers: shared hit=1",,,,,,,,"explain_ExecutorEnd, auto_explain.c:333","psql"  
2016-03-15 15:44:23.618 CST,"postgres","postgres",106815,"[local]",56e7bc6c.1a13f,4,"UPDATE",2016-03-15 15:40:28 CST,3/0,0,LOG,00000,"duration: 32039.289 ms  statement: update test2 set info='b' ;",,,,,,,,"exec_simple_query, postgres.c:1181","psql"  
```  
等待时间也被计算在内了。  
如果要分析锁等待的话，最好加上如下参数：  
```  
log_lock_waits = on  
deadlock_timeout = 1s  
```  
那么在日志中，可以看到会话等待锁的时间超过deadlock_timeout时，会打印一条日志，告诉你在等待那个PID，等待什么锁：  
```  
2016-03-15 16:30:57.129 CST,"postgres","postgres",10220,"[local]",56e7c3df.27ec,32,"UPDATE waiting",2016-03-15 16:12:15 CST,3/17,574614691,LOG,00000,"process 10220 still waiting for ShareLock on transaction 574614690 after 1000.036 ms","Process holding the lock: 9725. Wait queue: 10220.",,,,"while updating tuple (0,5) in relation ""test2""","update test2 set info='b' ;",,"ProcSleep, proc.c:1323","psql"  
```  
在获取到锁之后，又会打印一条日志：  
```  
2016-03-15 16:32:36.323 CST,"postgres","postgres",10220,"[local]",56e7c3df.27ec,33,"UPDATE waiting",2016-03-15 16:12:15 CST,3/17,574614691,LOG,00000,"process 10220 acquired ShareLock on transaction 574614690 after 100194.020 ms",,,,,"while updating tuple (0,5) in relation ""test2""","update test2 set info='b' ;",,"ProcSleep, proc.c:1327","psql"  
```  
分析以上两条日志，和long sql的日志关联起来，就可以知道LONG SQL的锁等待花了多少时间。  
如果要跟踪更详细的锁信息，需要修改一下头文件，重新编译：  
```  
vi src/include/pg_config_manual.h  
#define LOCK_DEBUG  
make clean  
make distclean  
configure again  
make -j 32  
make install -j 32  
vi $PGDATA/postgresql.conf  
trace_locks = true  
```  
```  
pg_ctl restart -m fast  
```  
以上CASE，可以跟踪到如下锁信息：  
```  
2016-03-15 16:12:08.389 CST,,,9725,"",56e7c3d8.25fd,1,"",2016-03-15 16:12:08 CST,,0,LOG,00000,"connection received: host=[local]",,,,,,,,"BackendInitialize, postmaster.c:4081",""  
2016-03-15 16:12:08.390 CST,"postgres","postgres",9725,"[local]",56e7c3d8.25fd,2,"authentication",2016-03-15 16:12:08 CST,2/11,0,LOG,00000,"connection authorized: user=postgres database=postgres",,,,,,,,"PerformAuthentication, postinit.c:259",""  
2016-03-15 16:12:08.391 CST,"postgres","postgres",9725,"[local]",56e7c3d8.25fd,3,"startup",2016-03-15 16:12:08 CST,2/0,0,LOG,00000,"LockReleaseAll: lockmethod=1",,,,,,,,"LockReleaseAll, lock.c:1951","psql"  
2016-03-15 16:12:08.391 CST,"postgres","postgres",9725,"[local]",56e7c3d8.25fd,4,"startup",2016-03-15 16:12:08 CST,2/0,0,LOG,00000,"LockReleaseAll done",,,,,,,,"LockReleaseAll, lock.c:2198","psql"  
2016-03-15 16:12:13.968 CST,"postgres","postgres",9725,"[local]",56e7c3d8.25fd,5,"UPDATE",2016-03-15 16:12:08 CST,2/12,0,LOG,00000,"LockAcquire: lock [13241,53029] RowExclusiveLock",,,,,,"update test2 set info='a' where id=1;",8,"LockAcquireExtended, lock.c:724","psql"  
2016-03-15 16:12:13.969 CST,"postgres","postgres",9725,"[local]",56e7c3d8.25fd,6,"UPDATE",2016-03-15 16:12:08 CST,2/12,0,LOG,00000,"LockAcquire: lock [13241,53029] RowExclusiveLock",,,,,,"update test2 set info='a' where id=1;",,"LockAcquireExtended, lock.c:724","psql"  