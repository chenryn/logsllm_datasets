type bailout struct{}
defer func() {
switch p := recover(); p {
case nil: // no panic
case bailout{}: // "expected" panic
err = fmt.Errorf("multiple title elements")
default:
panic(p) // unexpected panic; carry on panicking
}
}()
// Bail out of recursion if we find more than one nonempty title.
forEachNode(doc, func(n *html.Node) {
if n.Type == html.ElementNode && n.Data == "title" &&
n.FirstChild != nil {
if title != "" {
panic(bailout{}) // multiple titleelements
}
title = n.FirstChild.Data
}
}, nil)
if title == "" {
return "", fmt.Errorf("no title element")
}
return title, nil
}
在上例中，deferred函数调用recover，并检查panic value。当panic value是bailout{}类型时，
deferred函数生成一个error返回给调用者。当panic value是其他non-nil值时，表示发生了未知
的panic异常，deferred函数将调用panic函数并将当前的panic value作为参数传入；此时，等
同于recover没有做任何操作。（请注意：在例子中，对可预期的错误采用了panic，这违反了
之前的建议，我们在此只是想向读者演示这种机制。）
有些情况下，我们无法恢复。某些致命错误会导致Go在运行时终止程序，如内存不足。
Recover捕获异常 206
gopl
练习5.19： 使用panic和recover编写一个不包含return语句但能返回一个非零值的函数。
Recover捕获异常 207
gopl
第六章 方法
从90年代早期开始，面向对象编程(OOP)就成为了称霸工程界和教育界的编程范式，所以之
后几乎所有大规模被应用的语言都包含了对OOP的支持，go语言也不例外。
尽管没有被大众所接受的明确的OOP的定义，从我们的理解来讲，一个对象其实也就是一个
简单的值或者一个变量，在这个对象中会包含一些方法，而一个方法则是一个一个和特殊类
型关联的函数。一个面向对象的程序会用方法来表达其属性和对应的操作，这样使用这个对
象的用户就不需要直接去操作对象，而是借助方法来做这些事情。
在早些的章节中，我们已经使用了标准库提供的一些方法，比如time.Duration这个类型的
Seconds方法：
const day = 24 * time.Hour
fmt.Println(day.Seconds()) // "86400"
并且在2.5节中，我们定义了一个自己的方法，Celsius类型的String方法:
func (c Celsius) String() string { return fmt.Sprintf("%g°C", c) }
在本章中，OOP编程的第一方面，我们会向你展示如何有效地定义和使用方法。我们会覆盖
到OOP编程的两个关键点，封装和组合。
方法 208
gopl
6.1. 方法声明
在函数声明时，在其名字之前放上一个变量，即是一个方法。这个附加的参数会将该函数附
加到这种类型上，即相当于为这种类型定义了一个独占的方法。
下面来写我们第一个方法的例子，这个例子在package geometry下：
gopl.io/ch6/geometry
package geometry
import "math"
type Point struct{ X, Y float64 }
// traditional function
func Distance(p, q Point) float64 {
return math.Hypot(q.X-p.X, q.Y-p.Y)
}
// same thing, but as a method of the Point type
func (p Point) Distance(q Point) float64 {
return math.Hypot(q.X-p.X, q.Y-p.Y)
}
上面的代码里那个附加的参数p，叫做方法的接收器(receiver)，早期的面向对象语言留下的遗
产将调用一个方法称为“向一个对象发送消息”。
在Go语言中，我们并不会像其它语言那样用this或者self作为接收器；我们可以任意的选择接
收器的名字。由于接收器的名字经常会被使用到，所以保持其在方法间传递时的一致性和简
短性是不错的主意。这里的建议是可以使用其类型的第一个字母，比如这里使用了Point的首
字母p。
在方法调用过程中，接收器参数一般会在方法名之前出现。这和方法声明是一样的，都是接
收器参数在方法名字之前。下面是例子：
p := Point{1, 2}
q := Point{4, 6}
fmt.Println(Distance(p, q)) // "5", function call
fmt.Println(p.Distance(q)) // "5", method call
可以看到，上面的两个函数调用都是Distance，但是却没有发生冲突。第一个Distance的调用
实际上用的是包级别的函数geometry.Distance，而第二个则是使用刚刚声明的Point，调用的
是Point类下声明的Point.Distance方法。
方法声明 209
gopl
这种p.Distance的表达式叫做选择器，因为他会选择合适的对应p这个对象的Distance方法来
执行。选择器也会被用来选择一个struct类型的字段，比如p.X。由于方法和字段都是在同一
命名空间，所以如果我们在这里声明一个X方法的话，编译器会报错，因为在调用p.X时会有
歧义(译注：这里确实挺奇怪的)。
因为每种类型都有其方法的命名空间，我们在用Distance这个名字的时候，不同的Distance调
用指向了不同类型里的Distance方法。让我们来定义一个Path类型，这个Path代表一个线段
的集合，并且也给这个Path定义一个叫Distance的方法。
// A Path is a journey connecting the points with straight lines.
type Path []Point
// Distance returns the distance traveled along the path.
func (path Path) Distance() float64 {
sum := 0.0
for i := range path {
if i > 0 {
sum += path[i-1].Distance(path[i])
}
}
return sum
}
Path是一个命名的slice类型，而不是Point那样的struct类型，然而我们依然可以为它定义方
法。在能够给任意类型定义方法这一点上，Go和很多其它的面向对象的语言不太一样。因此
在Go语言里，我们为一些简单的数值、字符串、slice、map来定义一些附加行为很方便。我
们可以给同一个包内的任意命名类型定义方法，只要这个命名类型的底层类型(译注：这个例
子里，底层类型是指[]Point这个slice，Path就是命名类型)不是指针或者interface。
两个Distance方法有不同的类型。他们两个方法之间没有任何关系，尽管Path的Distance方法
会在内部调用Point.Distance方法来计算每个连接邻接点的线段的长度。
让我们来调用一个新方法，计算三角形的周长：
perim := Path{
{1, 1},
{5, 1},
{5, 4},
{1, 1},
}
fmt.Println(perim.Distance()) // "12"
在上面两个对Distance名字的方法的调用中，编译器会根据方法的名字以及接收器来决定具体
调用的是哪一个函数。第一个例子中path[i-1]数组中的类型是Point，因此Point.Distance这个
方法被调用；在第二个例子中perim的类型是Path，因此Distance调用的是Path.Distance。
方法声明 210
gopl
对于一个给定的类型，其内部的方法都必须有唯一的方法名，但是不同的类型却可以有同样
的方法名，比如我们这里Point和Path就都有Distance这个名字的方法；所以我们没有必要非
在方法名之前加类型名来消除歧义，比如PathDistance。这里我们已经看到了方法比之函数
的一些好处：方法名可以简短。当我们在包外调用的时候这种好处就会被放大，因为我们可
以使用这个短名字，而可以省略掉包的名字，下面是例子：
import "gopl.io/ch6/geometry"
perim := geometry.Path{{1, 1}, {5, 1}, {5, 4}, {1, 1}}
fmt.Println(geometry.PathDistance(perim)) // "12", standalone function
fmt.Println(perim.Distance()) // "12", method of geometry.Path
译注： 如果我们要用方法去计算perim的distance，还需要去写全geometry的包名，和其函数
名，但是因为Path这个变量定义了一个可以直接用的Distance方法，所以我们可以直接写
perim.Distance()。相当于可以少打很多字，作者应该是这个意思。因为在Go里包外调用函数
需要带上包名，还是挺麻烦的。
方法声明 211
gopl
6.2. 基于指针对象的方法
当调用一个函数时，会对其每一个参数值进行拷贝，如果一个函数需要更新一个变量，或者
函数的其中一个参数实在太大我们希望能够避免进行这种默认的拷贝，这种情况下我们就需
要用到指针了。对应到我们这里用来更新接收器的对象的方法，当这个接受者变量本身比较
大时，我们就可以用其指针而不是对象来声明方法，如下：
func (p *Point) ScaleBy(factor float64) {
p.X *= factor
p.Y *= factor
}
这个方法的名字是 。这里的括号是必须的；没有括号的话这个表达式可能
(*Point).ScaleBy
会被理解为 。
*(Point.ScaleBy)
在现实的程序里，一般会约定如果Point这个类有一个指针作为接收器的方法，那么所有Point
的方法都必须有一个指针接收器，即使是那些并不需要这个指针接收器的函数。我们在这里
打破了这个约定只是为了展示一下两种方法的异同而已。
只有类型(Point)和指向他们的指针 ，才是可能会出现在接收器声明里的两种接收
(*Point)
器。此外，为了避免歧义，在声明方法时，如果一个类型名本身是一个指针的话，是不允许
其出现在接收器中的，比如下面这个例子：
type P *int
func (P) f() { /* ... */ } // compile error: invalid receiver type
想要调用指针类型方法 ，只要提供一个Point类型的指针即可，像下面这
(*Point).ScaleBy
样。
r := &Point{1, 2}
r.ScaleBy(2)
fmt.Println(*r) // "{2, 4}"
或者这样：
p := Point{1, 2}
pptr := &p
pptr.ScaleBy(2)
fmt.Println(p) // "{2, 4}"
或者这样:
基于指针对象的方法 212
gopl
p := Point{1, 2}
(&p).ScaleBy(2)
fmt.Println(p) // "{2, 4}"
不过后面两种方法有些笨拙。幸运的是，go语言本身在这种地方会帮到我们。如果接收器p是
一个Point类型的变量，并且其方法需要一个Point指针作为接收器，我们可以用下面这种简短
的写法：
p.ScaleBy(2)
编译器会隐式地帮我们用&p去调用ScaleBy这个方法。这种简写方法只适用于“变量”，包括
struct里的字段比如p.X，以及array和slice内的元素比如perim[0]。我们不能通过一个无法取到
地址的接收器来调用指针方法，比如临时变量的内存地址就无法获取得到：
Point{1, 2}.ScaleBy(2) // compile error: can't take address of Point literal
但是我们可以用一个 这样的接收器来调用Point的方法，因为我们可以通过地址来找到
*Point
这个变量，只要用解引用符号 来取到该变量即可。编译器在这里也会给我们隐式地插
*
入 这个操作符，所以下面这两种写法等价的：
*
pptr.Distance(q)
(*pptr).Distance(q)
这里的几个例子可能让你有些困惑，所以我们总结一下：在每一个合法的方法调用表达式
中，也就是下面三种情况里的任意一种情况都是可以的：
不论是接收器的实际参数和其接收器的形式参数相同，比如两者都是类型T或者都是类
型 ：
*T
Point{1, 2}.Distance(q) // Point
pptr.ScaleBy(2) // *Point
或者接收器实参是类型T，但接收器形参是类型 ，这种情况下编译器会隐式地为我们取变
*T
量的地址：
p.ScaleBy(2) // implicit (&p)
或者接收器实参是类型 ，形参是类型T。编译器会隐式地为我们解引用，取到指针指向的
*T
实际变量：
基于指针对象的方法 213
gopl
pptr.Distance(q) // implicit (*pptr)
如果命名类型T(译注：用type xxx定义的类型)的所有方法都是用T类型自己来做接收器(而不
是 )，那么拷贝这种类型的实例就是安全的；调用他的任何一个方法也就会产生一个值的
*T
拷贝。比如time.Duration的这个类型，在调用其方法时就会被全部拷贝一份，包括在作为参
数传入函数的时候。但是如果一个方法使用指针作为接收器，你需要避免对其进行拷贝，因
为这样可能会破坏掉该类型内部的不变性。比如你对bytes.Buffer对象进行了拷贝，那么可能
会引起原始对象和拷贝对象只是别名而已，但实际上其指向的对象是一致的。紧接着对拷贝
后的变量进行修改可能会有让你意外的结果。
译注： 作者这里说的比较绕，其实有两点：
1. 不管你的method的receiver是指针类型还是非指针类型，都是可以通过指针/非指针类型
进行调用的，编译器会帮你做类型转换。
2. 在声明一个method的receiver该是指针还是非指针类型时，你需要考虑两方面的内部，第
一方面是这个对象本身是不是特别大，如果声明为非指针变量时，调用会产生一次拷
贝；第二方面是如果你用指针类型作为receiver，那么你一定要注意，这种指针类型指向
的始终是一块内存地址，就算你对其进行了拷贝。熟悉C或者C艹的人这里应该很快能明
白。
6.2.1. Nil也是一个合法的接收器类型
就像一些函数允许nil指针作为参数一样，方法理论上也可以用nil指针作为其接收器，尤其当
nil对于对象来说是合法的零值时，比如map或者slice。在下面的简单int链表的例子里，nil代
表的是空链表：
// An IntList is a linked list of integers.
// A nil *IntList represents the empty list.
type IntList struct {
Value int