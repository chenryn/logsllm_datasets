for su(cid:28)ciently large κ ∈ N. For a hash function H ← Hκ a Merkle
hash tree [38] is a data structure that allows to commit to (cid:96) = 2d
messages by a single hash value h such that revealing any message
requires only to reveal O(d) hash values.
A Merkle hash tree is represented by a binary tree of depth
d where the (cid:96) messages m1, . . . , m(cid:96) are assigned to the leaves
of the tree; the values assigned to the internal nodes are com-
puted using the underlying hash function H that is applied on
the values assigned to the children, whereas the value h that com-
mits to m1, . . . , m(cid:96) is assigned to the root of the tree. To open
the commitment to a message mi, one reveals mi together with
all the values assigned to nodes on the path from the root to mi,
and the values assigned to the siblings of these nodes. We denote
the algorithm of committing to (cid:96) messages m1, . . . , m(cid:96) by h :=
CommitM(m1, . . . , m(cid:96)) and the opening of mi by (mi , path(i)) :=
OpenM(h, i). Verifying the opening of mi is carried out by essen-
tially recomputing the entire path bottom-up and comparing the
(cid:27)nal outcome (i.e., the root) to the value given at the commitment
phase.
The binding property of a Merkle hash tree is due to collision-
resistance. Intuitively, this says that it is infeasible to e(cid:28)ciently (cid:27)nd
a pair (x, x(cid:48)) so that H(x) = H(x(cid:48)), where H ← Hκ for su(cid:28)ciently
large κ. In fact, one can show that collision-resistance of {Hκ}κ∈N
carries over to the Merkle hashing. Formally, we say that a family of
hash functions {Hκ}κ is collision-resistant if for any PPT adversary
A the following experiment outputs 1 with probability negl(κ): (i)
A hash function H is sampled from Hκ; (ii) The adversary A is
given H and outputs x, x(cid:48); (iii) The experiment outputs 1 if and
only if x (cid:44) x(cid:48) and H(x) = H(x(cid:48)).
In the random oracle model, Merkle tree can be computed by
replacing the function H with a random oracle ρ where statistical
binding follows due to the hardness of (cid:27)nding a collision in this
model. We denote this algorithm by CommitRO
M
2.2 Zero-Knowledge Arguments
We denote by (cid:104)A(w), B(z)(cid:105)(x) the random variable representing
the (local) output of machine B when interacting with machine A
on common input x, when the random-input to each machine is
uniformly and independently chosen, and A (resp., B) has auxiliary
input w (resp., z).
.
Definition 2.1 (Interactive argument system). A pair of PPT
interactive machines (cid:104)P,V(cid:105) is called an interactive proof system
for a language L if there exists a negligible function negl such that
the following two conditions hold:
(1) Completeness: For every x ∈ L there exists a string w such
that for every z ∈ {0, 1}∗,
Pr[(cid:104)P(w),V(z)(cid:105)(x) = 1] ≥ 1 − negl(|x|).
Definition 2.2 (Zero-knowledge). Let (cid:104)P,V(cid:105) be an interactive
proof system for some language L. We say that (cid:104)P,V(cid:105) is compu-
tational zero-knowledge with respect to an auxiliary input if for
every PPT interactive machine V∗ there exists a PPT algorithm S,
running in time polynomial in the length of its (cid:27)rst input, such that
c≈ {(cid:104)S(cid:105)(x, z)}x ∈L,z∈{0,1}∗
{(cid:104)P(w),V∗(z)(cid:105)(x)}x ∈L,w ∈Rx ,z∈{0,1}∗
(when the distinguishing gap is considered as a function of |x|). Specif-
ically, the left term denote the output of V∗ after it interacts with P
on common input x whereas, the right term denote the output of S
on x.
Our zero-knowledge protocols in fact satisfy the additional proof
of knowledge property, which is important for some applications.
See full version for more details.
2.3 Interactive PCPs
An interactive PCP [35] (IPCP) is a combination of a traditional PCP
with an interactive proof. An IPCP is a special case of interactive
oracle proofs (IOP) [9] (also known as probabilistically checkable
interactive proofs [41]). We will be interested in zero-knowledge
interactive PCPs [25] in which the veri(cid:27)er reads a small number of
(2) Soundness: For every x (cid:60) L, every interactive PPT machine
P∗, and every w, z ∈ {0, 1}∗
Pr[(cid:104)P∗(w),V(z)(cid:105)(x) = 1] ≤ negl(|x|).
Session J1:  OutsourcingCCS’17, October 30-November 3, 2017, Dallas, TX, USA2089bits from the PCP and exchanges a small number of bits with the
prover P. We formalize this notion below.
Definition 2.3 (Interactive PCP). Let R(x, w) be an NP rela-
tion corresponding to an NP language L. An interactive PCP (IPCP)
system for R with parameters (q, l, ) is a pair of PPT interactive
machines (cid:104)P,V(cid:105) with the following properties.
(1) Syntax: On common input x and prover input w, the prover
P computes in time poly(|x|) a bit string π (referred to as
the PCP). The prover P and veri(cid:27)er V then interact, where
the veri(cid:27)er has oracle access to π.
(2) Completeness: If (x, w) ∈ R then
Pr[(P(x, w),Vπ(x)) = 1] = 1.
(3) Soundness: For every x (cid:60) L, every (unbounded) interactive
machine P∗ and every ˜π ∈ {0, 1}∗,
Pr[(P∗
,V ˜π(x)) = 1] ≤ (|x|).
(4) Complexity: In the interaction (P(x, w),Vπ(x)) at most
l(|x|) bits are communicated and V reads at most q(|x|) bits
of π.
A public-coin IPCP is one where every message sent by the veri(cid:27)er
simply consists of fresh random bits.
The notion of IPCP can be extended to additionally guarantee
zero-knowledge. Our zero-knowledge variants of IPCP will achieve
perfect zero-knowledge against honest veri(cid:27)ers. We present the
de(cid:27)nition of zero-knowledge IPCP next.
Definition 2.4 (Zero-knowledge IPCP). Let (cid:104)P,V(cid:105) be an in-
teractive PCP for R. We say that (cid:104)P,V(cid:105) is an (honest veri(cid:27)er, perfect)
zero-knowledge IPCP (or ZKIPCP for short) if there exists an expected
polynomial time algorithm S, such that for any (x, w) ∈ R, the out-
put of S(x) is distributed identically to the view of V in the interaction
(P(x, w),Vπ(x)).
3 FROM MPC TO ZKIPCP
3.1 Our MPC Model
As mentioned in the introduction, the e(cid:28)ciency of our constructions
can be distilled to identifying the right MPC model and designing
an e(cid:28)cient protocol in this model. In this regards we deviate from
the original work of [29] which provided a general transformation
from any honest majority MPC protocol that can compute arbitrary
functionalities. In particular, our model is more in line with the
watchlist mechanism (a-la [32]). We begin with the description of
the MPC model and the protocol speci(cid:27)cations that we will need
to design our zero-knowledge protocol. In Section 4, we use such
MPC protocols based on the works [14, 16, 32, 33].
In our model, we consider a sender client S, n servers P1, . . . , Pn
and a receiver client R. The sender has input x and a witness w with
respect to some NP relation R. The receiver and the servers do not
receive any input, where the servers obtain random shares from the
sender and evaluate the computed circuit. Upon receiving (x, w)
from the sender, the functionality computes R(x, w) and forwards
the result to the receiver R. We consider the speci(cid:27)c network where
we restrict the communication to a single message between S and
the servers at the beginning of the protocol and a single message
from the servers to the receiver R at the end of the protocol. The
only way the servers may communicate with each other is via a
broadcast. In our actual MPC protocol, the servers will never utilize
such a broadcast. Nevertheless, our transformation from MPC to ZK
can be easily extended to allow for the servers to invoke a broadcast.
For simplicity, in our actual transformation, we will restrict the
servers to not communicate with each other at all.
We consider the security of protocols in both the honest-but-
curious (passive) and the malicious (active) models. In the former
model, one may break the security requirements into the following
correctness and privacy requirements.
Definition 3.1 (Correctness). We say that Π realizes a deter-
ministic n + 1-party functionality (x, r1, . . . , rn) with perfect (resp.,
statistical) correctness if for all inputs (x, r1, . . . , rn), the probability
that the output of some player is di(cid:29)erent from the output of f is 0
(resp., negligible in κ), where the probability is over the independent
choices of the random inputs r1, . . . , rn.
Definition 3.2 (tp-Privacy). Let 1 ≤ tp < n. We say that Π
realizes f with perfect tp-privacy if there is a PPT simulator S such
that for any inputs (x, r1, . . . , rn) and every set of corrupted players
T ⊂ [n], where |T | ≤ tp, the joint view ViewT (x, r1, . . . , rn) of
players in T is distributed identically to S(T , x, {ri}i∈T , fT (x, r1,
. . . , rn)).
With respect to our MPC model de(cid:27)ned above, we consider
privacy in the presence of a static passive adversary that corrupts
the receiver R and at most tp servers.
In the malicious model, in which corrupted players may behave
arbitrarily, security cannot be generally broken into correctness
and privacy as above. However, for our purposes we only need the
protocols to satisfy a weaker notion of security in the malicious
model that is implied by the standard general de(cid:27)nition. Speci(cid:27)cally,
it su(cid:28)ces that Π be tp-private as above, and moreover it should
satisfy the following notion of correctness in the malicious model.
Definition 3.3 (Statistical tr -Robustness). We say that Π
realizes f with statistical tr -robustness if it is perfectly correct in the
presence of a honest-but-curious adversary as in De(cid:27)nition 3.1, and
furthermore for any (unbounded) active adversary that adaptively
corrupts a setT of at most tr players, and for any inputs (x, r1, . . . , rn),
the following robustness property holds. If there is no (r1, . . . , rn) such
that f (x, r1, . . . , rn) = 1, then the probability that R outputs 1 in an
execution of Π in which the inputs of the honest players are consistent
with (x, r1, . . . , rn) is negligible in κ where κ is a statistical parameter
that the protocol Π receives as input.
Our main theorems about our two-party ZK protocol are proven
in the presence of a static active adversary, that corrupts the prover
at the onset of the execution. Nevertheless, our proof relies on
the security of the underlying MPC protocol (utilized in the MPC-
in-the-head paradigm) being robust against an active adversary
that adaptively corrupts a subset of the servers in the underlying
MPC protocol. Concretely, with respect to our MPC model de(cid:27)ned
above, we consider robustness in the presence of an adaptive active
adversary that corrupts the sender S and at most tr servers.
Finally, when used in the MPC-in-the-head paradigm, we need
the notion of consistent views between servers and the receiver
that we de(cid:27)ne below.
Session J1:  OutsourcingCCS’17, October 30-November 3, 2017, Dallas, TX, USA2090Definition 3.4 (Consistent views). We say that a pair of views
Vi , Vj are consistent (with respect to the protocol Π and some public
input x) if the outgoing messages implicit in Vi are identical to the
incoming messages reported in Vj and vice versa.
3.2 ZKIPCP for NP - The General Case
Next, we provide our compilation from an MPC protocol satisfying
the requirements speci(cid:27)ed in Section 3.1 to an interactive PCP. We
note that while the transformation presented in this section works
for any MPC in the model as described in the previous section, we
will simplify our MPC model as follows:
Two-phase: The protocol we consider will proceed in two phases:
In Phase 1, the servers receive inputs from the sender and
only perform local computation. After Phase 1, the servers
obtain a public random string r of length l sampled via
a coin-(cid:30)ipping oracle and broadcast to all servers. The
servers use this in Phase 2 for their local computation at
the end of which each server sends a single output message
to the receiver R.
No broadcast: The servers never communicate with each other.
Each server simply receives inputs from the sender at the
beginning of Phase 1, then receives a public random string
in Phase 2, and (cid:27)nally delivers a message to R.
Formally, let L be an NP-language with NP relation R. Let x an
NP statement that is the common input and let w be the private
input of the prover. Our construction ΠZKIPCP proceeds as follows:
Let Π be any MPC protocol in our model. We will now design a
ZKIPCP protocol ΠZKIPCP that meets De(cid:27)nition 2.3.
Protocol ΠZKIPCP.
• Input: The prover P and the veri(cid:27)er V share a common in-
put statement x and a circuit description C that realizes R. P
additionally has input w such that R(x, w) = 1.
• Oracle π: The prover runs the MPC protocol Π “in-its-head” as
follows. It picks a random input rS and invokes S on (x, w; rS)
and a random input ri for every server Pi. The prover computes
the views of the servers up to the end of Phase 1 in Π, denoted by
(V1, . . . , Vn), and sets the oracle as the n symbols (V1, . . . , Vn).
(1) V picks a random challenge r of length l and sends it to
(2) Upon receiving the challenge r, prover P sends the view V
of R.2
(3) V computes the output of R from the view and checks if
R does not abort. It then picks a random subset Q of [n] of
size tp uniformly at random (with repetitions) from [n], and
queries the oracle on Q.
(4) V obtains from the oracle the views of the servers in Q.
(5) V aborts if the views of the servers are inconsistent with
• The interactive protocol.
the view of R. Otherwise, it accepts and halts.
We are now ready to prove the following theorem.
Theorem 3.5. Let f be the following functionality for a sender S
and n servers P1, . . . , Pn and receiver R. Given a public statement x
2As the prover possesses all information about the servers, and the veri(cid:27)er always
receives the broadcast message from each server, these broadcast messages can be
sent directly from the prover to the veri(cid:27)er.
the sender.
n
(cid:17)tp
(cid:16)1 − tr
and an additional input w received from S, the functionality delivers
R(x, w) to R. Suppose that Π is a two-phase protocol in the MPC model
speci(cid:27)ed in Section 3.1 that realizes f with statistical tr -robustness (in
the malicious model) and perfect tp-privacy (in the honest-but-curious
model), where tr < (cid:100) n2 (cid:101) − 1. Then protocol ΠZKIPCP described above is
+ δ(κ)
a ZKIPCP for NP relation R, with soundness error
where δ(κ) is the robustness error of Π.
Proof: Our proof follows by establishing completeness, soundness
and zero-knowledge as required in De(cid:27)nitions 2.3-2.4.
Completeness: Completeness follows directly from the correct-
ness of the underlying MPC protocol.
Soundness: Consider a statement x (cid:60) LR. We will show that
no prover P∗ can convince V beyond a negligible probability to
accept a false statement. We will argue soundness by following an
approach similar to [29] where we (cid:27)rst identify an inconsistency
graph and then invoke the properties of the underlying MPC. More
precisely, we consider an inconsistency graph G based on the n
views V1, . . . , Vn and the view of the receiver R which contains the
messages from servers P1, . . . , Pn to R. Here, the servers and the
receiver correspond to nodes in G and inconsistency between every
pair of nodes is de(cid:27)ned as in De(cid:27)nition 3.4. Then there are two