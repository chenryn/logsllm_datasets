Redteaming：主流杀软对抗之路
ABOUT ME
●安全研究员
●红队攻防，杀软规避研究及武器化它们。
木星安全实验室
●实验室负责人
●CompTIA Security+
  CISP-PTS
  CISAW
  CISP
  CDPSE
红队作战概览图
研究背景
●红队攻防的必要因素
●杀软检测手段的不断升级
目录
静态免杀
动态免杀
自我保护
Bypass之静态免杀
Shellcode加密
IAT导入地址表
混淆编译
Shellcode加密
Shellcode：16进制的机器码。
例如：
杀软查杀cobaltstrike, metasploit等知名远控
通常是通过shellcode特征匹配来进行查杀。
内存加载mimikatz，通常也会将mimikatz转为
shellcode。
Shellcode加密
栅栏密码加密
IAT导入地址表
在PE结构中，存在一个IAT导入表，导入表中声明了这
个PE文件会使用哪些API函数。
● 定义MyAlloc函数指针
● 定义MyProtect函数指针
IAT导入地址表
动态调用
IAT导入地址表
未处理
处理后
混淆编译
ADVobfuscator
https://github.com/andrivet/ADVobfuscator
ADVobfuscator在编译时使用C语言生成混淆代码，它引入了某种形式的机制
以生成多态代码，例如字符串文字的加密和使用有限状态机的调用混淆。
混淆编译
ADVobfuscator效果对比1
混淆编译
ADVobfuscator效果对比2
最终效果
Bypass之行为免杀
Api执行链
延时
系统调用
API执行链
VirtualAllocEx
WriteProcessMemory
URLDownloadToFile
ShellExecute
文件下载
申请内存并写入
● 启发式扫描是通过分析指令出现的顺序，或          
   组合情况来决定文件是否恶意。
API执行链
Api间穿插其他干扰性操作
延时
模拟运算
使用素数计算模拟延时
行为免杀测试
●遍历ntdll.dll的导出函数找到操作码。
●使用我们的系统调用函数。
系统调用
AV/EDR hook
AV / EDR解决方案通常会钩挂用户级Windows API
以便确定所执行的代码是否为恶意代码
系统调用
Windows OS体系结构
系统调用
HellsGate：读取在主机上的ntdll.dll，动态找到系统调用，然后从自己的自定义实现中调用syscall。
● 原：从内存读取ntdll.dll，用于查找和映射系统调用。
● 现：从磁盘读取ntdll.dll，用于查找和映射系统调用。
系统调用
HellsGate
●创建具有相同结构的系统调用函数。
●寻找syscall操作码并将我们的自定义函数指向它们。
http://undocumented.ntinternals.net
https://github.com/jthuraisamy/SysWhispers
系统调用
HellsGate
●遍历ntdll.dll的导出函数找到操作码。
●使用我们的系统调用函数。
行为免杀测试
●遍历ntdll.dll的导出函数找到操作码。
●使用我们的系统调用函数。
自我保护
自我保护
DACL：任意访问控制列表
DACL:定义用户，或用户所属的组访问该对象的权限，
对象可以是文件，进程，事件或具有安全描述符的任
何其他内容。
自我保护
● 通过设置DACL标志位，创建一个用户权限无法
   结束的进程。
自我保护
AdjustTokenPrivileges此函数启用或禁用指定访问令牌中的特权。几乎所有需要令
牌操作的特权操作都使用此API函数。
RtlSetDaclSecurityDescriptor函数设置绝对格式安全描述符的DACL信息，或者如果
安全描述符中已经存在DACL，则将其取代。
自我保护
TerminateProcess：终止指定进程及其所有的线程
https://github.com/EgeBalci/Hook_API
●使用hook_api内联汇编挂钩Windows API函数TerminateProcess
自我保护
CreateremoteThread进程注入
将shellcode注入到可能会带来麻烦的进程中，在目标进程中HOOK关键API。
自我保护测试
●遍历ntdll.dll的导出函数找到操作码。
●使用我们的系统调用函数。