Evil eBPF
Practical Abuses of an In-Kernel Bytecode Runtime
Jeff Dileo
DEF CON 27
call_usermodehelper("/bin/sh",(char*[]){"/bin/sh","-c","whoami",NULL},NULL,5)
• @chaosdatumz
• Agent of chaos
• Unix aficionado
• Principal Consultant / Research Director @ NCC Group
• I like to do terrible things to/with/in:
• programs
• languages
• runtimes
• memory
• kernels
• packets
• bytes
• ...
Outline
• Introduction to eBPF
• On Using eBPF for Malign Purposes
• Tooling Up to Build a Birdfeeder (of Dooooom!)
• The IPC You Don’t See
• Reliable Corruption
• On Fighting Wizards and Dragons
• Q&A
eBPF — Background
• “extended” BPF
• What is “BPF”?
BPF
• Berkeley Packet Filter
• Limited instruction set for a bytecode virtual machine
• Originally created to implement FAST programmatic network filtering in kernel
• has a few (2) 32-bit registers (and a hidden frame pointer)
• load/store, conditional jump (forward), add/sub/mul/div/mod, neg/and/or/xor, bitshift
BPF
• tcpdump -i any -n 'tcp[tcpflags] & (tcp-syn|tcp-ack) != 0'
(000) ldh
[14]
(001) jeq
#0x800
jt 2
jf 10
(002) ldb
[25]
(003) jeq
#0x6
jt 4
jf 10
(004) ldh
[22]
(005) jset
#0x1fff
jt 10
jf 6
(006) ldxb
4*([16]&0xf)
(007) ldb
[x + 29]
(008) jset
#0x12
jt 9
jf 10
(009) ret
#262144
(010) ret
#0
eBPF
• “extended” Berkeley Packet Filter
• “designed to be JITed with one to one mapping”
• “originally designed with the possible goal in mind to write programs in ‘restricted C’”
• socket filters, packet processing, tracing, internal backend for “classic” BPF, and more...
• Many different APIs exposed through the bpf(2) syscall
• The main ones are for loading/interacting with eBPF programs and ”maps”
• Programs can be one of several types
• Maps are in-kernel structures shared between kernel space eBPF code and userspace program code
eBPF — High Level Overview
• eBPF’s virtual ISA is featureful enough to support C
• The kernel places restrictions on eBPF programs to prevent it from breaking the kernel
• eBPF programs are created through the bpf(2) syscall
• Pass in an array of eBPF instructions and an eBPF program type
• The type dictates the set of out-of-sandbox APIs the eBPF code can call
• eBPF maps are also created through the bpf(2) syscall
• Generally loaded first so that loaded eBPF programs can reference them by their FD
• eBPF program FDs are then attached to kernel structures using type specific kernel APIs
• The programs are then invoked to process type- and attachment-specific events
eBPF — Things to Keep in Mind
• The interesting eBPF features require CAP_SYS_ADMIN
• Without that, the only program types that can be loaded are BPF_PROG_TYPE_SOCKET_FILTER
and BPF_PROG_TYPE_CGROUP_SKB
• And the latter requires CAP_NET_ADMIN to attach
• The BPF helper functions do all of the heavy lifting and interesting work
• If you want to read/write data outside of the eBPF non-Turing-tarpit, you need them
• eBPF’s validator (“verifier”) can be very pedantic about what eBPF programs can and can’t do
• This talk will not be covering the validator in depth
• For information on living with it, see our 35C3 talk
Why eBPF?
• eBPF offers a lot of new features to play around with
• Originally created for (performant) packet processing, now applied to everything in the kernel
• While the interesting capabilities require high privileges, eBPF only has two modes
• Unprivileged (basic socket filters, not very useful on their own)
• ALL THE PRIVILEGES (everything else)
• Everything that uses eBPF for wholesome endeavors runs fully privileged
• And are hard to sandbox
Why (Evil) eBPF?
• eBPF offers a lot of new features to play around with
• Originally created for (performant) packet processing, now applied to everything in the kernel
• While the interesting capabilities require high privileges, eBPF only has two modes
• Unprivileged (basic socket filters, not very useful on their own)
• ALL THE PRIVILEGES (everything else)
• Everything that uses eBPF for wholesome endeavors runs fully privileged
• And are hard to sandbox
Why (Evil) eBPF?
• eBPF offers a lot of new features to play around with
• Originally created for (performant) packet processing, now applied to everything in the kernel
• While the interesting capabilities require high privileges, eBPF only has two modes
• Unprivileged (basic socket filters, not very useful on their own)
• ALL THE PRIVILEGES (everything else)
• Everything that uses eBPF for wholesome endeavors runs fully privileged
• And are hard to sandbox
So, what is this talk about?
SHENANIGANS
An Evil Agenda
• A Treatise on Evil eBPF Tooling
• Abusing eBPF for IPC
• Unprivileged API abuses
• Privileged API shenanigans
• “Post-exploitation” with eBPF
• Privileged API shenanigans
On Developing eBPF-Based Things
• Several hurdles with developing eBPF-based programs
• Compiling eBPF code into something loadable by the kernel
• Interacting with the kernel and userspace from eBPF code
• Interacting with the eBPF code from userspace
• Lack of portability/deployability due to runtime dependencies (headers, shared libs, etc.)
• In the typical Linux fashion, there are are many choices
• And most are painful or have complicated tradeoffs
Choosing Your Level of eBPF Abstraction
There are three main choices for eBPF development toolchains:
• Raw eBPF instructions written by hand using a C macro DSL
• Often used for very simple examples
• Direct use of LLVM/Clang to compile C files into eBPF ELF files
• Linux kernel build infrastructure (pulls in headers, but slow build times)
• e.g. samples/bpf/ and tools/bpf/
• Out-of-tree development (need to manage headers, but fast build times)
• High-level APIs that compile and load strings of a custom DSL C dialect
• iovisor/bcc (Python)
• iovisor/gobpf
There are several (overlapping) ways to invoke eBPF APIs:
• Raw syscalls (libcs do not ship syscall wrappers for eBPF)
• libbpf (provides syscall wrappers and more)
• bpf_load.c (actual deep magic!)
Choosing Your Level of eBPFAbstraction — Raw eBPF
• Like raw water, will give you cholera
• Very portable (not potable), but basically useless for anything worth writing
struct bpf_insn prog[] = {
BPF_LD_MAP_FD(BPF_REG_2, map_fd),
BPF_MOV64_IMM(BPF_REG_3, 3),
BPF_RAW_INSN(BPF_JMP | BPF_CALL, 0, 0, 0, BPF_FUNC_tail_call),
BPF_MOV64_IMM(BPF_REG_0, -1),
BPF_EXIT_INSN(),
};
size_t insns_cnt = sizeof(prog) / sizeof(struct bpf_insn);
char bpf_log_buf[2048];
int prog_fd = bpf_load_program(BPF_PROG_TYPE_SOCKET_FILTER,
prog, insns_cnt, "GPL", 0, bpf_log_buf, 2048
);
Choosing Your Level of eBPFAbstraction — Direct LLVM/Clang
• Clean water, but with a few hurdles:
• Correctly exposing the right kernel headers
• I like the (xdp-project/xdp-tutorial) toolchain (mimics in-tree dev, hackable build system)
• Preprocessing/instrumentation (e.g. auto-wiring of maps into eBPF instructions and userland)
• Both libbpf and bpf_load.c do this to different degrees
int filter(struct __sk_buff *skb) {
payload_t p;
switch (filter_type) {
case (RAW_SOCKET_FILTER):
p = parse_packet_from_to(skb, ETHERNET_LAYER, APPLICATION_LAYER); break;
...
uint32_t index = 0;
size_t* v = bpf_map_lookup_elem(&my_map, &index);
...
size_t l = p.len; char* c = (char*)&v[4];
#pragma unroll
for (size_t i=0; i  0) {
bpf_skb_load_bytes(skb, p.offset + i, &c[i], 1); l--;
}
}
Choosing Your Level of eBPFAbstraction — High-LevelAPIs
• Branwdo, the thirst mutilator; it’s got what eBPF programs crave
• Make certain (specialization aligned) tasks much easier
• Add a lot of magic that can make it hard to reason about how code actually runs
• And can make it hard to directly interface with lower-level/unsupported APIs when needed
• Requires non-trivial toolchain to exist on the system running the code
from bcc import BPF
program = """
#include 
// for struct pt_regs
#include  // for mode_t
int kprobe__sys_openat(struct pt_regs *ctx,
int dirfd, char __user* pathname, int flags, mode_t mode) {
bpf_trace_printk("sys_openat called.\\n");
return 0;
}
"""
b = BPF(text=program)
b.trace_print()
Choosing Your Level of eBPFAbstraction — Evil Edition
• In general, it’s probably best to go with the direct LLVM/Clang approach
• We need maximum portability with limited support from our operating environment
• Ideally, we would statically link everything into a single binary without runtime dependencies
• So we can drop a binary that ”just works”
• This is easy to implement with simple modifications to the xdp-project/xdp-tutorial Makefiles
• BCC/gobpf cannot reasonably do this
• Additionally, while BCC is quick to pick up, dealing with its abstractions takes its toll over time
• But it’s still very useful for kernel tracing
Evil IPC
eBPF Map Primer
• Generally, eBPF maps are used to interface eBPF programs with userland processes
eBPF Map Primer
• Generally, eBPF maps are used to interface eBPF programs with userland processes
• But eBPF maps do not actually need to be attached to an eBPF program
• Userland processes can use them as a way to store data off-process
eBPF Map Primer
• Generally, eBPF maps are used to interface eBPF programs with userland processes
• But eBPF maps do not actually need to be attached to an eBPF program
• Userland processes can use them as a way to store data off-process
• Additionally, eBPF maps are interacted with through their FDs
eBPF Map Primer
• Generally, eBPF maps are used to interface eBPF programs with userland processes
• But eBPF maps do not actually need to be attached to an eBPF program
• Userland processes can use them as a way to store data off-process
• Additionally, eBPF maps are interacted with through their FDs
• As a result they can be passed between processes using system APIs that transfer FDs
Map Transit
IPC via passing eBPF maps between processes and reading/writing them to send messages
1. In a userspace C program, create a BPF_MAP_TYPE_ARRAY map
int fd = bpf_create_map_node(
BPF_MAP_TYPE_ARRAY, "mymap", sizeof(uint32_t), 256, 2, 0, 0
);
2. Use Unix domain sockets, or a similar API, to pass the map FD to a cooperating process
3. Assign index 0 for messages sent by the map creator process
4. Assign index 1 for messages sent by the cooperating process
Map Transit (2)
5. To send messages, use bpf_map_update_elem
char buf[256] = "hello world";
uint32_t key = 0;
bpf_map_update_elem(fd, &key, buf, BPF_ANY);
6. To receive messages, use bpf_map_lookup_elem
char buf[256];
uint32_t key = 0;
while (bpf_map_lookup_elem(fd, &key, &buf)) {
sleep(1);
}
Map Transit — Warning!
• All facets of eBPF maps are managed by the kernel