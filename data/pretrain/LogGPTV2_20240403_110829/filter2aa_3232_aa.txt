# Evil eBPF: Practical Abuses of an In-Kernel Bytecode Runtime
## Jeff Dileo
### DEF CON 27

**Command Example:**
```c
call_usermodehelper("/bin/sh", (char*[]){"/bin/sh", "-c", "whoami", NULL}, NULL, 5);
```

**About the Speaker:**
- **@chaosdatumz**
- Agent of chaos
- Unix aficionado
- Principal Consultant / Research Director at NCC Group
- Specializes in:
  - Programs
  - Languages
  - Runtimes
  - Memory
  - Kernels
  - Packets
  - Bytes
  - ...

## Outline
1. Introduction to eBPF
2. Using eBPF for Malign Purposes
3. Tooling Up to Build a Birdfeeder (of Dooooom!)
4. The IPC You Don’t See
5. Reliable Corruption
6. Fighting Wizards and Dragons
7. Q&A

## eBPF — Background
- **eBPF**: Extended Berkeley Packet Filter
- **BPF**: Berkeley Packet Filter
  - Limited instruction set for a bytecode virtual machine
  - Originally created for fast programmatic network filtering in the kernel
  - Features:
    - A few 32-bit registers (and a hidden frame pointer)
    - Instructions: load/store, conditional jump, arithmetic, bitwise operations, bitshift

**Example BPF Program:**
```c
tcpdump -i any -n 'tcp[tcpflags] & (tcp-syn|tcp-ack) != 0'
(000) ldh [14]
(001) jeq #0x800 jt 2 jf 10
(002) ldb [25]
(003) jeq #0x6 jt 4 jf 10
(004) ldh [22]
(005) jset #0x1fff jt 10 jf 6
(006) ldxb 4*([16]&0xf)
(007) ldb [x + 29]
(008) jset #0x12 jt 9 jf 10
(009) ret #262144
(010) ret #0
```

**eBPF:**
- Extended Berkeley Packet Filter
- Designed for Just-In-Time (JIT) compilation with one-to-one mapping
- Initially designed for writing programs in "restricted C"
- Applications: socket filters, packet processing, tracing, and more
- Exposed through the `bpf(2)` syscall
- Main APIs: loading/interacting with eBPF programs and maps
- Maps: in-kernel structures shared between kernel space and user space

## eBPF — High Level Overview
- Virtual Instruction Set Architecture (ISA) supports C
- Kernel restrictions prevent eBPF from breaking the kernel
- eBPF programs are created via the `bpf(2)` syscall
- Pass in an array of eBPF instructions and a program type
- Program types dictate the available out-of-sandbox APIs
- eBPF maps are also created via the `bpf(2)` syscall
- Maps are loaded first so that eBPF programs can reference them by file descriptor (FD)
- Program FDs are attached to kernel structures using type-specific APIs
- Programs are invoked to process specific events

## eBPF — Things to Keep in Mind
- Interesting eBPF features require `CAP_SYS_ADMIN`
- Without `CAP_SYS_ADMIN`, only `BPF_PROG_TYPE_SOCKET_FILTER` and `BPF_PROG_TYPE_CGROUP_SKB` can be loaded
- `BPF_PROG_TYPE_CGROUP_SKB` requires `CAP_NET_ADMIN` to attach
- BPF helper functions handle most of the heavy lifting
- eBPF's validator ("verifier") is strict about what programs can do
- This talk will not cover the validator in depth; see the 35C3 talk for more information

## Why eBPF?
- Offers many new features for experimentation
- Originally for performant packet processing, now used for various kernel tasks
- Two modes:
  - Unprivileged (basic socket filters, limited utility)
  - Privileged (full capabilities, hard to sandbox)

## Why (Evil) eBPF?
- New features for exploitation
- Created for packet processing, now applied to everything in the kernel
- Two modes:
  - Unprivileged (basic socket filters, limited utility)
  - Privileged (full capabilities, hard to sandbox)

## Talk Overview
- **SHENANIGANS**
- **An Evil Agenda:**
  - A Treatise on Evil eBPF Tooling
  - Abusing eBPF for IPC
  - Unprivileged API abuses
  - Privileged API shenanigans
  - Post-exploitation with eBPF

## Developing eBPF-Based Programs
- Hurdles:
  - Compiling eBPF code into a loadable format
  - Interacting with the kernel and user space
  - Lack of portability due to runtime dependencies
- Options:
  - Raw eBPF instructions
  - Direct use of LLVM/Clang
  - High-level APIs (e.g., iovisor/bcc, iovisor/gobpf)
- Invoking eBPF APIs:
  - Raw syscalls
  - libbpf
  - bpf_load.c

## Choosing Your Level of eBPF Abstraction
- **Raw eBPF:**
  - Very portable but difficult to write
  - Example:
    ```c
    struct bpf_insn prog[] = {
        BPF_LD_MAP_FD(BPF_REG_2, map_fd),
        BPF_MOV64_IMM(BPF_REG_3, 3),
        BPF_RAW_INSN(BPF_JMP | BPF_CALL, 0, 0, 0, BPF_FUNC_tail_call),
        BPF_MOV64_IMM(BPF_REG_0, -1),
        BPF_EXIT_INSN(),
    };
    size_t insns_cnt = sizeof(prog) / sizeof(struct bpf_insn);
    char bpf_log_buf[2048];
    int prog_fd = bpf_load_program(BPF_PROG_TYPE_SOCKET_FILTER,
                                   prog, insns_cnt, "GPL", 0, bpf_log_buf, 2048);
    ```

- **Direct LLVM/Clang:**
  - Clean water, but with some hurdles
  - Example:
    ```c
    int filter(struct __sk_buff *skb) {
        payload_t p;
        switch (filter_type) {
            case (RAW_SOCKET_FILTER):
                p = parse_packet_from_to(skb, ETHERNET_LAYER, APPLICATION_LAYER); break;
        }
        uint32_t index = 0;
        size_t* v = bpf_map_lookup_elem(&my_map, &index);
        size_t l = p.len; char* c = (char*)&v[4];
        #pragma unroll
        for (size_t i=0; i < l; i++) {
            if (l > 0) {
                bpf_skb_load_bytes(skb, p.offset + i, &c[i], 1); l--;
            }
        }
    }
    ```

- **High-Level APIs:**
  - Easier for specialized tasks but less transparent
  - Example (Python with BCC):
    ```python
    from bcc import BPF

    program = """
    #include <linux/ptrace.h>
    #include <sys/types.h>

    int kprobe__sys_openat(struct pt_regs *ctx, int dirfd, char __user* pathname, int flags, mode_t mode) {
        bpf_trace_printk("sys_openat called.\\n");
        return 0;
    }
    """

    b = BPF(text=program)
    b.trace_print()
    ```

- **Evil Edition:**
  - Direct LLVM/Clang approach recommended
  - Maximum portability with minimal runtime dependencies
  - Statically link everything into a single binary
  - Use xdp-project/xdp-tutorial Makefiles for implementation
  - BCC/gobpf cannot achieve this level of portability
  - BCC is useful for kernel tracing but has abstraction overhead

## Evil IPC
- **eBPF Map Primer:**
  - Used to interface eBPF programs with userland processes
  - Can be used by userland processes to store data off-process
  - Interacted with through their file descriptors (FDs)
  - FDs can be passed between processes using system APIs

- **Map Transit:**
  - Create a `BPF_MAP_TYPE_ARRAY` map in a userspace C program
    ```c
    int fd = bpf_create_map_node(BPF_MAP_TYPE_ARRAY, "mymap", sizeof(uint32_t), 256, 2, 0, 0);
    ```
  - Pass the map FD to a cooperating process using Unix domain sockets
  - Assign indices for message sending and receiving
  - Send messages using `bpf_map_update_elem`
    ```c
    char buf[256] = "hello world";
    uint32_t key = 0;
    bpf_map_update_elem(fd, &key, buf, BPF_ANY);
    ```
  - Receive messages using `bpf_map_lookup_elem`
    ```c
    char buf[256];
    uint32_t key = 0;
    while (bpf_map_lookup_elem(fd, &key, &buf)) {
        sleep(1);
    }
    ```

- **Warning:**
  - All aspects of eBPF maps are managed by the kernel