i }i∈N:
P
P
i .Pi(p, lsid
1. ∀ i ≥ 1, νp, lsid
2. ∀ i ≥ 1, νp, lsid
3. s is disjoint of the support of O.
Q
i .Qi(p, lsid
i ) is Or-simulatable.
i ) is Or-simulatable.
Q
P
4. P0(p, lsid
0 ) ∼=Or,O Q0(p, lsid
Q
0 )
then,
||iPi(p, lsid
P
i ) ∼=O ||iQi(p, lsid
Q
i )
To prove this result, we use the explicit advantages that can be derived from our com-
position Theorems, which increases polynomially with respect to the number of sessions, and
apply a classical hybrid argument to conclude.
In our applications (Section 6), the main idea is to ﬁrst use Theorem 5 to reduce the
multi-session security of a key exchange or a communication channel to a single session, and
then use Theorems 2 and 4 to combine the multiple key exchanges and the multiple channels.
Remark, that in practice, to express the security properties of the protocols, we need to
allow the protocols to use a predicate T (x) whose interpretation may depend on the list of
honest randomness sampled by each party of the protocol. For instance, this predicate may
be used to check whether a value received by a party corresponds to a randomness sent by
another party, and we would have T (x) := x ∈ s. The two previous Theorems are in fact also
valid in such cases, and we will use such notations in the application to key exchanges, but
we delay to Section 12 the formalization of such predicates.
5 Unbounded Sequential Replication
We replicate a sequential composition where at each occurrence, a value produced by the
protocol is transmitted to the next occurrence. This corresponds to the security of a protocol
looping on itself, as it is the case for some key renewal protocols.
Such protocols depend on an original key, and are thus parameterized process of the form
P (x). As they renew the key stored in the variable x, they rebind x to some new value and
thus contain a construct of the form let x = _ in .
33
Proposition 18. Let O be an oracle, two parameterized processes P (x), Q(x), a set of names
n = Ng(P, Q) and fresh names k0, l. We assume that Nl(P, Q) is disjoint of the support of O.
If:
• νn.in(cP , x); P (x)(cid:107)in(cQ, x); Q(x) is O-simulatable, and
• P (k0); out(cP , x)(cid:107)Q(k0); out(cQ, x) ∼=O P (k0); out(cP , l)(cid:107)Q(k0); out(cQ, l)
then, for any N,
P (k0); P (x);N ; out(cP , x)(cid:107)Q(k0); Q(x);N ; out(cQ, x)
∼=O P (k0); P (x);N ; out(cP , l)(cid:107)Q(k0); Q(x);N ; out(cQ, l)
The main idea behind the proof is to perform as many function applications (Theorem 4)
as needed, one for each replication of the protocol. Remark that compared to the previous
replication, where we considered multiple sessions of the protocol and thus a notion of local
session identiﬁer was required, here we consider a single session looping on itself, and we do
not need those identiﬁers.
Part II
Applications to Key Exchange
6 Application to Key Exchanges
Although our framework is not speciﬁcally tailored to key exchanges or any speciﬁc property,
we choose to focus here on this application. We outline how our theorems may be used to
prove the security of a protocol using a key derived by a key exchange in a compositional way.
(Let us recall that the key exchange and the protocol using the derived key may share long
term secrets).
6.1 Our Model of Key Exchange
In order to obtain injective agreement, key exchanges usually use fresh randomness for each
session as local session identiﬁers. For instance in the case of a Diﬃe-Hellman key exchange,
the group shares may be seen as local session identiﬁers.
As in Example 4.4, KE is a key exchange with possible continuations. In addition, we
consider multiple copies of KE, indexed by i, and local session identiﬁers lsid for each copy:
KEi[_
1, _
2] := I(lsidI
i , idI ); _
1(cid:107)R(lsidR
i , idR); _
2
Here, id captures the identities of the parties and lsid captures the randomness that will be
used by I and R to derive their respective local session identiﬁers. In the key exchange, I
binds xI to the key that it computes, xI
to the value of lsid received from the other party
and xI
id
to the received identity. Symmetrically, R binds the variables xR, xR
lsid
and xR
id
lsid
.
If we denote by P I
i (xR) the continuation (e.g., a record protocol based on the
i (xR)] is the composition of a session of the key exchange
derived secret key), KEi[P I
with the protocol where the values of xI, xR (computed keys) are passed respectively to
i (xI ), P R
i (xI )(cid:107)P R
34
i (xI ) or P R
P I
the composed protocol is expressed as follows:
i (xR). With Q an idealized version of P (however it is deﬁned), the security of
(cid:107)iKEi[P I
i (xI ), P R
i (xR)] ∼= (cid:107)iKEi[QI
i (xI ), QR
i (xR)]
Intuitively, from the adversary point of view, P is equivalent to its idealized version, even if
the key is derived from the key exchange as opposed to magically shared.
Equivalently, the security of the composed protocol can be proved if we have that the
advantage against the following indistinguishability is polynomial in N (and of course negli-
gible).
(cid:107)i≤N KEi[P I
i (xI ), P R
i (xR)] ∼= (cid:107)i≤N KEi[QI
i (xI ), QR
i (xR)]
A Corollary formalizing the following discussion can be found in Appendix F.1.
6.2 Proofs of Composed Key Exchange Security
Following the same applications of Theorems 2 and 4 as in Example 4.4, we decompose the
proof of the previous indistinguishability goals into the following goals:
1. ﬁnd an oracle OP,Q to simulate multiple sessions of P or Q,
2. design an oracle Oke to simulate multiple sessions of KE
3. complete a security proof under Oke for multiple sessions of the protocol using fresh
keys,
4. complete a security proof under OP,Q for multiple sessions of the key exchange.
We further reduce the security of the protocol to smaller proofs of single sessions of the
various components of the protocols under well chosen oracles. The following paragraphs
successively investigate how to simplify the goals (1),(2),(3),(4) above. For simplicity, we only
consider here the case of two ﬁxed honest identities.
In the following, we provide the conditions S-1,S-2,P-1,P-2,P-3,P-4,K-1,K-2,K-3 that must
be satisﬁed, so that we can prove
(cid:107)iKEi[P I
i (xI ), P R
i (xR)] ∼= (cid:107)iKEi[QI
i (xI ), QR
i (xR)]
using our framework and the decomposition of Example 4.4. Corollary 2, that formalizes the
following discussion and generalizes it to non ﬁxed identities, can be found in Appendix F.1.
We denote p = {idI , idR} and assume that they are the only shared names between KE, P
and Q and are the only names shared by two distinct copies Pi, Pj (resp. Qi, Qj). We also
denote by s = {lsidI
i }i∈N the set of all copies of the local session identiﬁers.
i , lsidR
Protocol simulatability For the simulation of the protocol, there must exists an oracle
OP,Q such that
S-1 νp.in(cI , xI ).P I
i (xI )(cid:107)in(cR, xR).P R
i (xR) is OP,Q-simulatable
Indeed, if this condition is fulﬁlled (and a similar one replacing P with Q), then, thanks
to Theorem 1, νp.(cid:107)i(in(cI , xI ).P I
i (xR)) is OP,Q-simulatable (and similarly
i (xI )(cid:107)in(cR, xR).P R
for Q). This meets the condition (2) of Theorem 4.
35
Key exchange simulatability For the simulation of the key exchange context, we need N
(with N polynomial in the security parameter) copies of KE and, in each of them, the initiator
(resp. the responder) may communicate with N possible responders (resp.
initiators). We
therefore use Theorem 2 with a context C with 2N 2 holes. C is the parallel composition of
N contexts and, as above, we use Theorem 1 to get the condition (1) of Theorem 2. Let KE(cid:48)
be4
i
xI
lsid = lsidR
xR
lsid = lsidI
j then out(cI ,(cid:104)i, j(cid:105)) else ⊥,
j then out(cR,(cid:104)i, j(cid:105)) else ⊥]
KEi[
if
if
1≤j≤N
1≤j≤N
C is then (cid:107)i≤N KE(cid:48)
and C can be inferred by replacing each out((cid:104)i, j(cid:105)) with a hole. We
output (cid:104)i, j(cid:105) so that we know that the full scheduling is simulatable. Then, the condition to
be met by the key exchange is that
i
S-2 νp.KE(cid:48)
i
is Oke-simulatable
We then get, thanks to Theorem 1 the condition (1) of Theorem 2.
Security of the protocol Our goal is (cid:107)iPi(ki) ∼=Oke (cid:107)iQi(ki). Based on Theorem 5, we
only need an oracle Or so that:
P-1) ∀ i ≥ 1, νp, ki.P0(ki) is Or-simulatable,
P-2) ∀ i ≥ 1, νp, ki.Q0(ki) is Or-simulatable,
P-3) s is disjoint of the support of Oke,
P-4) P0(k0) ∼=Or,Oke Q0(k0).
We use the fresh names ki to model fresh magically shared keys, and use them as local sids
for Theorem 5. The intuition is similar to the notion of Single session game of [18], where the
considered protocols are such that we can derive the security of multiple sessions from one
session. For instance, if the key is used to establish a secure channel, revealing the other keys
does not break the security of one session, but allows to simulate the other sessions.
Security of the key exchange The security of the key exchange is more complicated to
deﬁne, in the sense that it cannot simply be written with a classical replication. The partnering
of sessions is not performed beforehand, so we must consider all possibilities. We may express
the security of a key exchange by testing the real-or-random for each possible session key.
We denote ki,j the fresh name corresponding to the ideal key that will be produced by the
i-th copy of the initiator believing to be partnered with the j-th copy of the responder. The
security of the key exchange is captured through the following indistinguishability:
(cid:107)i≤N KEi[out(xI ), out(xR)] ∼=OP,Q
(cid:107)i≤N KEi[
if
if
1≤j≤N
1≤j≤N
lsid = lsidR
xI
(xR
lsid = lsidI
j then out(ki,j) else ⊥,
j ) then out(kj,i) else ⊥]
where the advantage of the attacker is polynomial in N. Remark that we sometimes omit
channels, when they only need to be distinct.
4we denote
if
1≤j≤N
ci then ai else a(cid:48)
:= if c1 then a1 else if c2 ··· then an else a(cid:48)
36
Using a classical cryptographic hybrid argument (detailed in Proposition 39), we reduce
the security of multiple sessions to the security of one session in parallel of multiple corrupted
sessions; the security of each step of the hybrid game is derived from Equation (1) using
Theorem 4. It is expressed, with stateX
(cid:107)i≤N KEi[out((cid:104)stateI
lsid(cid:105), as
i = (cid:104)xX , lsidX
i , xX
i (cid:105))] ∼=OP,Q
i (cid:105)), out((cid:104)stateR
(cid:107)i≤N−1KEi[out((cid:104)stateI
(cid:107) KEN [ if xI
lsid = lsidR
else if xI
else out((cid:104)stateI
if xR
else if xR
else out((cid:104)stateR
i (cid:105)), out((cid:104)stateR
i (cid:105))]
N then out((cid:104)k, lsidI
lsid /∈ {lsidR
i (cid:105)),
N then out((cid:104)k, lsidR
lsid /∈ {lsidI
i (cid:105))]
lsid = lsidI
N , xR
i }1≤i≤N−1 then ⊥,
N , xI
i }1≤i≤N−1 then ⊥,
lsid(cid:105))
lsid(cid:105))
(1)
The previous equivalence expresses that when we look at N sessions that all output their
full state upon completion, the particular matching of the parties in KEN has a key that is
real or random if they are indeed partnered together, and if they are not partnered together,
they must be talking to another agent from the other KEi. We may see the other sessions as
corrupted sessions, as they leak their states upon completion.
We further reduce the problem to proving the security of a single session even when there
is an oracle simulating corrupted sessions. To this end, we need to reveal the dishonest local
session’s identiﬁers to the attacker, but also to allow him to perform the required cryptographic
operations, e.g. signatures using the identities.
We deﬁne, for X ∈ {I, R}, sX as the set of copies of the local session identiﬁers of I or
R, except a distinguished one (indexed 0 below) and s = sI ∪ sR. To obtain the security of
multiple sessions of the key exchange, we use Proposition 17.5. To this end, we would need to
design an oracle Or, such that the following assumptions are satisﬁed, where OP,Q corresponds
to O of Proposition 17:
K-1) ∀1 ≤ i ≤ N, νlsidI
i , idR.
KEi[out(xI ), out(xR)](cid:107)out((cid:104)lsidR
i , idI , lsidR
i (cid:105)) is Or simulatable.
K-2) KE0[ out((cid:104)xI , lsidI
out((cid:104)xR, lsidR
lsid(cid:105)),
lsid(cid:105))]
0, xI
0 , xR
i , lsidI
∼=Or,OP,Q KE0[
0 then out((cid:104)k, lsidI
0, xI
lsid(cid:105))
lsid = lsidR
if xI
else if xI
else out((cid:104)xI , lsidI
if xR
else if xR
else out((cid:104)xR, lsidR
lsid /∈ sR then ⊥
0, xI
lsid /∈ sI then ⊥
0 , xR
lsid = lsidI
lsid(cid:105)),
lsid(cid:105))]
0 then out((cid:104)k, lsidR
0 , xR
lsid(cid:105))
K-3) s is disjoint of the support of OP,Q.
Intuitively, if the initiator believes to be talking to the honest responder, then it outputs
the ideal key, and if it is not talking to any simulated corrupted party, it raises a bad event.
Note that while the structure of the proof does not fundamentally change from other
proofs of key exchanges, e.g. [18], each step of the proof becomes straightforward thanks to
our composition results. Our proofs are also more ﬂexible, as shown by the extension to key
exchanges with key conﬁrmation in Section 8.
5We also use Theorem 1 to get the simulatability of N sessions in parallel from the simulatability of each
session.