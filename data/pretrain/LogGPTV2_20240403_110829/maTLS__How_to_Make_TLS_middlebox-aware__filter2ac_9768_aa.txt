title:maTLS: How to Make TLS middlebox-aware?
author:Hyunwoo Lee and
Zach Smith and
Junghwan Lim and
Gyeongjae Choi and
Selin Chun and
Taejoong Chung and
Ted Taekyoung Kwon
maTLS: How to Make TLS middlebox-aware?
Hyunwoo Lee†, Zach Smith§, Junghwan Lim†, Gyeongjae Choi†,
Selin Chun†, Taejoong Chung‡, Ted “Taekyoung” Kwon†
†Seoul National University, §University of Luxembourg, ‡Rochester Institute of Technology
†{bir1218,twoexponents,ryanking13,littlechun4,tkkwon}@snu.ac.kr, §PI:EMAIL, ‡PI:EMAIL
Abstract—Middleboxes are widely deployed in order to en-
hance security and performance in networking. As communi-
cation over TLS becomes increasingly common, however, the
end-to-end channel model of TLS undermines the efﬁcacy of
middleboxes. Existing solutions, such as ‘SplitTLS’, which in-
tercepts TLS sessions, often introduce signiﬁcant security risks
by installing a custom root certiﬁcate or sharing a private
key. Many studies have conﬁrmed security vulnerabilities when
combining TLS with middleboxes, which include certiﬁcate
validation failures, use of obsolete ciphersuites, and unwanted
content modiﬁcation. To address the above issues, we introduce
a middlebox-aware TLS protocol, dubbed maTLS, which allows
middleboxes to participate in the TLS session in a visible and
auditable fashion. Every participating middlebox now splits a
session into two segments with their own security parameters
in collaboration with the two endpoints. The maTLS protocol is
designed to authenticate the middleboxes to verify the security
parameters of segments, and to audit the middleboxes’ write
operations. Thus, security of the session is ensured. We prove
the security model of maTLS by using Tamarin, a state-of-the-
art security veriﬁcation tool. We also carry out testbed-based
experiments to show that maTLS achieves the above security
goals with marginal overhead.
I.
INTRODUCTION
Middleboxes have been widely used for various in-network
functionalities and have become indispensable. They are usu-
ally deployed by network operators, administrators, or users
for various beneﬁts in terms of performance (e.g., proxies,
DNS interception boxes, transcoders), security enhancement
(e.g., ﬁrewalls, anti-virus software), or content ﬁltering (e.g.,
parental controls). Such deployments have become easier and
more ﬂexible with the advent of cloud computing repre-
sented by ‘everything-as-a-service,’ including outsourced mid-
dleboxes as a service in the cloud [40].
However, the practice of using middleboxes is not compat-
ible with Transport Layer Security (TLS) [9], [12] — the de-
facto standard for securing end-to-end connections. Since TLS
is initially designed to provide end-to-end authentication and
conﬁdential communication, middleboxes are not supposed to
read or modify any TLS trafﬁc. Meanwhile, as HTTPS (HTTP
over TLS) [37] becomes increasingly common (more than 50%
of total HTTP trafﬁc is now encrypted by TLS [14], [28]),
middleboxes are at risk of becoming useless unless a solution
Network and Distributed Systems Security (NDSS) Symposium 2019
24-27 February 2019, San Diego, CA, USA
ISBN 1-891562-55-X
https://dx.doi.org/10.14722/ndss.2019.23547
www.ndss-symposium.org
is found. To address this issue, several approaches have been
made to retain the function of middleboxes over HTTPS.
A well-known method is SplitTLS [19], in which a TLS
session between two endpoints is split into two separate seg-
ments1 so that a middlebox can decrypt, encrypt, and forward
the trafﬁc as a man-in-the-middle. While SplitTLS allows us to
use middleboxes with TLS, it poses security and privacy risks
on both the client and server sides. On the one hand, users are
often required to install custom root certiﬁcates, which allows a
middlebox to impersonate any server in order to read and mod-
ify all the HTTPS trafﬁc. On the other hand, HTTPS websites
often share their private keys with some middlebox service
providers (e.g., content delivery networks (CDNs)), so that
middleboxes can provide their content to clients with better
performance. These imply that a compromised middlebox may
be used to perform critical attacks, either by abusing custom
root certiﬁcates to impersonate someone else or by using a
shared private key to impersonate a particular server.
Such vulnerabilities of middleboxes have been reported in
several studies [8], [11], [46], [34], [44]; for instance, some
middleboxes accept nearly all certiﬁcates in spite of certiﬁcate
validation failures, which gives a chance for another compro-
mised/malicious middlebox to meddle in the TLS session [8],
[11], [46]. Similarly, a middlebox that splits a TLS session
may support only weak ciphersuites, which are vulnerable to
known attacks such as the Logjam attack [1] or the FREAK
attack [3]. Even worse, it has been reported that middleboxes
are being used to inject malicious code [44], [34], [5]; for
example, Giorgos et al.
[44] found that 5.15% of proxies
inject malicious or unwanted content into web pages.
Nevertheless, as middleboxes provide crucial beneﬁts to
users, content providers, and network operators,
there has
been a long thread of studies aiming to accommodate for
middleboxes in secure networking between two endpoints [41],
[20], [35], [16], [22], [31], [30]. These studies can be largely
classiﬁed into three main categories: encryption-based, trusted
execution environment (TEE)-based, and TLS extension-based.
First, BlindBox [41] and Embark [20] proposed to use special
encryption schemes such as order-preserving encryption to al-
low middleboxes to perform their functionality over encrypted
packets. Second, SafeBricks [35] and SGX-Box [16] leveraged
TEEs such as Intel SGX to make middleboxes trustworthy.
Third, several studies sought to extend the TLS protocol [30],
[22], [31], [23], [29] in order to let middleboxes intervene
1In this paper, an end-to-end channel between a client and a server is called
a TLS (or maTLS) session, while a channel between two points at which TLS
messages are encrypted and decrypted with the same key, respectively, is called
a TLS (or maTLS) segment.
during the TLS handshake and perform their functionalities
within the session.
However, these approaches pose several technical chal-
lenges and limitations. The encryption-based approaches de-
pend greatly on their encryption mechanisms; as a result,
their functionalities are limited to pattern-matching or range-
ﬁltering. The proposals leveraging TEEs are only applicable
to the middleboxes with speciﬁc hardware that provides se-
cure enclaves. What is worse, neither of them are backward-
compatible (i.e., current middleboxes have to be replaced to
adopt such approaches). The TLS extension approaches are
most feasible in the sense that TLS software can be extended
to support the backward compatibility. However, these ap-
proaches leave three issues that have not been comprehensively
solved.
First, the proposal of using explicit proxies in IETF [22]
introduces a proxy certiﬁcate to indicate that the certiﬁcate
holder is a middlebox. However, the client can only authen-
ticate the next middlebox, not the server or other middle-
boxes intervening in the session. Thus, there is still a risk
of an unknown middlebox meddling in the session. Second,
mcTLS [30], TLMSP2, and TLS Keyshare extension3 [31]
use the same symmetric key (and hence the same ciphersuite)
across all the split TLS segments between the two endpoints.
As a result, middleboxes that do not support
the speciﬁc
ciphersuite chosen will not be able to process the TLS traf-
ﬁc. Furthermore, the middleboxes share the same keystream,
which may undermine conﬁdentiality [23]. Third, none of these
proposals except TLMSP allow the client to know who has sent
TLS trafﬁc as well as who has modiﬁed it. In mcTLS [30],
for example, the client cannot check who is responsible for
the original message (e.g., a cache or an endpoint) if there is
a middlebox that have modiﬁed the message during transit.
In this paper, we propose an extension to TLS, which en-
sures middleboxes are visible and auditable. The starting point
is to enable a client to authenticate all the middleboxes. We ﬁrst
deﬁne middlebox certiﬁcates, which are signed by certiﬁcate
authorities (CAs), and used to encrypt the channel for each
TLS segment (e.g., between a client and a middlebox, between
middleboxes, and between a middlebox and a server). The use
of middlebox certiﬁcates eliminates the insecure practice of
users installing custom root certiﬁcates or servers sharing their
private keys with third parties (like CDNs). We also intro-
duce them with middlebox transparency log servers to make
middleboxes auditable. Along with auditable middleboxes, we
design the middlebox-aware TLS (maTLS) protocol, a TLS
extension auditing the security behaviors of middleboxes. The
maTLS protocol is designed to satisfy the following security
goals (to be detailed later): server authentication, middlebox
authentication, segment secrecy, individual secrecy, data source
authentication, modiﬁcation accountability, and path integrity.
To satisfy these goals, a client authenticates all participants
2Transport Layer Middlebox Security Protocol
(https://portal.etsi.org/
webapp/WorkProgram/Report WorkItem.asp?WKI ID=52930). The protocol
is being discussed in ETSI, and the draft of the protocol speciﬁcation is
currently unavailable. We refer to the document in the web archive:
https://docplayer.net/88122390-Announcement-of-middlebox-security-
protocol-msp-draft-parts.html
3Note that this is different from the keyshare extension used to negotiate
a Difﬁe-Hellman shared key in TLS 1.3.
of its maTLS session. That is, the client veriﬁes the certiﬁcates
of all the participating middleboxes to prevent any arbitrary
middleboxes from intervening in the session, which we will
refer to as explicit authentication. Moreover, the two endpoints
conﬁrm the negotiated security association of every segment
to ensure its conﬁdentiality and integrity, which is called
security parameter veriﬁcation. Note that a security association
consists of a TLS version, a ciphersuite, and a conﬁrmation of
encryption key establishment. Lastly, maTLS performs valid
modiﬁcation checks, which allows the endpoints of an maTLS
session to verify whether the received messages have been
modiﬁed only by authorized middleboxes. This way, maTLS
provides auditability of all participants in the session.
We also evaluate the security and performance of maTLS.
We formally prove the security of maTLS with Tamarin [24], a
state-of-the-art symbolic veriﬁcation tool. We also implement
maTLS by leveraging OpenSSL to compare its performance
against prior proposals.
the background of middleboxes and detail
The remainder of the paper is organized as follows. First,
we present
the
problems with SplitTLS, while clarifying the security-related
deﬁnitions and concepts (§II). Next, we explain our trust and
threat model (§III). Then, we describe how to make middle-
boxes auditable (§IV), and design the maTLS protocol (§V).
We verify our security model (§VI), evaluate the performance
overhead of maTLS (§VII), and discuss further issues (§VIII).
Finally, we summarize the related work (§IX) and present our
concluding remarks (§X).
II. BACKGROUND
A. Transport Layer Security
The TLS protocol [9], [12], coupled with a Public Key
Infrastructure (PKI),
is designed to authenticate endpoints,
establishing a secure communication channel between them.
The security goals of TLS are authentication, conﬁdentiality,
and integrity: authentication is conﬁrmation of the identity of
the other party, by validating a certiﬁcate chain and verifying
a proof-of-possession of the corresponding private key. In
practice, the server is always authenticated from its certiﬁcate,
while authenticating the client is optional. Conﬁdentiality is a
guarantee that the data sent over the channel is secret to all
but the endpoints. Integrity ensures that any third parties do
not modify data on the network.
These security goals are achieved by two components
of the TLS protocol suite, called the handshake and record
protocols. The main purpose of the TLS handshake protocol
is to establish a master secret, which will be used for an
authenticated encryption and decryption of the data between
two endpoints.
B. X.509 Certiﬁcates
A digital certiﬁcate is an attestation that binds a subject
(e.g., a domain name) to its public key. This binding is
guaranteed by a Certiﬁcate Authority (CA) with its signature
in the certiﬁcate. The CA also possesses its certiﬁcate issued
by another CA. This results in a chain of certiﬁcates termi-
nated with a self-signed certiﬁcate called a root certiﬁcate. A
certiﬁcate receiver validates the certiﬁcate if the receiver trusts
2
the root certiﬁcate in the chain and all the signatures in the
certiﬁcates can be veriﬁed using the public key of the next
certiﬁcate in the chain (up to the root certiﬁcate).
CAs also indicate that a domain owner satisﬁes speciﬁc
suggested requirements. For example, a domain validation
(DV) certiﬁcate is issued when a domain owner has success-
fully proved its ownership of the domain. To provide stronger
assurance to clients that a certiﬁcate has been adequately
issued, CAs can require domain owners to follow a set of
stricter criteria in order to obtain extended validation (EV)
certiﬁcates.
On the Internet, X.509 [18] is the most widely used format
for certiﬁcates, which typically include ﬁelds such as the
subject, its public key, a serial number, and the certiﬁcate’s
validity period. The current version of X.509, version 3,
supports extensions that CAs can add for a variety of purposes;
for example, the Server Alternative Name (SAN) ﬁeld [7] is
used to allow alternative names of the certiﬁcate holder.
C. Certiﬁcate Transparency
The PKI trust model has a severe drawback in reality: any
CA can issue a certiﬁcate for any domain, potentially exposing
users to high risk. There have been security incidents in which
commercial CAs were compromised and issued fraudulent cer-
tiﬁcates, allowing attackers to impersonate the actual certiﬁcate
owner or perform man-in-the-middle attacks [6], [47].
To mitigate the risks from CA compromises, Google intro-
duced the Certiﬁcate Transparency (CT) system [21], which
aims to provide accountability to a PKI. This is achieved by
archiving every certiﬁcate into multiple append-only public
log servers so that any entity can monitor and audit a CAs’
operations. Upon submission of a certiﬁcate chain, the log
servers return a signed proof called a signed certiﬁcate times-
tamp (SCT), which can be veriﬁed using the public keys of
the log servers. An SCT can be delivered from web servers
to the browsers separately or embedded in the web server’s
certiﬁcate, via a TLS extension or through OCSP. For example,
a browser might display a lower security indicator if the
server’s certiﬁcate is not logged on the CT servers. CT logging
became mandatory in Chrome for all certiﬁcates issued after
April 2018 [33]. A third party (e.g., a CA) can keep track of
CT log servers to see if there is any mis-issuance of certiﬁcates,
thus providing auditability of certiﬁcates and accountability of
CAs’ certiﬁcate issuance. For example, TLSMate’s CertSpot-
ter [42] and Facebook’s CT Monitor [13] monitor each log
server and alert a domain owner if a new certiﬁcate that binds
to her domain name has been issued.
D. Middleboxes in SplitTLS
In this paper, we consider middleboxes which inspect ap-