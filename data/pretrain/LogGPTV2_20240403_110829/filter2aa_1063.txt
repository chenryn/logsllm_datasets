HUNT
@jhaddix
@swagnetow
@FatihEgbatan
@digitalwoot
@_Sha128
@bugcrowd
Data Driven Web Hacking & Manual Testing
Contribs
Motley crew at @bugcrowd
➔ SecOps & Security Engineering groups
➔ Bughunters, Pentesters, Code Analysis, ++
➔ Burp Suite fans
The Problem(z)
1. Increasingly large and 
complicated Web Applications. 
Need manual testing
2. Applications Assessment 
Training lacks “tribal 
knowledge” of vulnerability 
location
3. No in-tool workflow for web 
hacking methodologies
Current Solutions
1. Badass hacker who can eyeball and effectively find 
security bugs
a.
May or may not have a methodology
b.
Definitely has accrued “tribal knowledge” 
c.
Bughunts and/or does consultant work
2. Dynamic Scanner
a.
Limited test cases (fuzzing)
b.
Cost prohibitive
c.
Limited in detection cases (dynamic pages, errors, etc)
d.
Complex sites are hard (auth)
HUNT
Manual testing 
references in 
Burp
Methodology
in Burp
Tribal knowledge
passive alerts
HUNT Burp Suite Extension
Tool Flow
IScannerCheck & 
IScanIssue
Scanner Burp 
Implementation 
(Python)
Burp Tab “Hunt - 
Scanner”
def doPassiveScan(self, request_response):
        raw_request = request_response.getRequest()
        raw_response = request_response.getResponse()
        request = self.helpers.analyzeRequest(raw_request)
        response = self.helpers.analyzeResponse(raw_response)
        parameters = request.getParameters()
        url = self.helpers.analyzeRequest(request_response).getUrl()
        vuln_parameters = self.issues.check_parameters(self.helpers, 
parameters)
        is_not_empty = len(vuln_parameters) > 0
        if is_not_empty:
            self.issues.create_scanner_issues(self.view, self.callbacks, 
self.helpers, vuln_parameters, request_response)
        # Do not show any Bugcrowd found issues in the Scanner window
        return []
IExtensionStateListener, 
IContextMenuFactory, 
ITab
Methodology Burp 
Implementation 
(Python)
Burp Tab “HUNT - 
Methodology”
def createMenuItems(self, invocation):
        # Do not create a menu item unless getting a context menu from the proxy history or 
scanner results
        is_proxy_history = invocation.getInvocationContext() == 
invocation.CONTEXT_PROXY_HISTORY
        is_scanner_results = invocation.getInvocationContext() == 
invocation.CONTEXT_SCANNER_RESULTS
        is_correct_context = is_proxy_history or is_scanner_results
        if not is_correct_context:
            return
        request_response = invocation.getSelectedMessages()[0]
        functionality = self.checklist["Functionality"]
        # Create the menu item for the Burp context menu
        bugcatcher_menu = JMenu("Send to HUNT - Methodology")
        for functionality_name in functionality:
            vulns = functionality[functionality_name]["vulns"]
            menu_vuln = JMenu(functionality_name)
            # Create a menu item and an action listener per vulnerability
            # class on each functionality
            for vuln_name in vulns:
                item_vuln = JMenuItem(vuln_name)
                menu_action_listener = MenuActionListener(self.view, self.callbacks, 
request_response, functionality_name, vuln_name)
                item_vuln.addActionListener(menu_action_listener)
                menu_vuln.add(item_vuln)
            bugcatcher_menu.add(menu_vuln)
        burp_menu = []
        burp_menu.append(bugcatcher_menu)
        return burp_menu
Tribal Knowledge
& Bug Location
Coming up with vuln location (data)
➔
Bugcrowd data contains over 600+ bounties and disclosure 
programs:
◆
Programs x 2 web targets per bounty (average) 
●
Ie. targets: www.defcon.org, forums.defcon.org, media.defcon.org
◆
15 (average) parameters per application
➔ 600 x 2 x 15 = ~18,000 parameters seen
Coming up with vuln location (data) pt. 2
➔ ~18,000 parameters:
◆
Reduce to params with vulns on them
◆
Reduce to only Critical (P1’s) and High (P2’s) Severity bugs/vulns
◆
Sort by recurring instances
◆
Include top 5-10 reoccurring instances per vuln/bug category
◆
Review top 100 for possible permutations manually and/or with 
regex
◆
Manually add ancillary data (pentest/other data)
Bug Location by 
bug/vuln class
Here be dragons
SQL Injection
{regex + perm} id
{regex} select
{regex} report
{regex} role
{regex} update
{regex} query
{regex + perm} user
{regex + perm} name
{regex} sort
{regex} where
{regex + perm} search
{regex} params
{regex} process
{regex + perm} row
{regex + perm} view
{regex} table
{regex + perm} from
{regex + perm} sel
{regex} results
{regex} sleep
{regex} fetch
{regex + perm} order
{regex} keyword
{regex} count
{regex + perm} column
{regex} input
{regex + perm} key
{regex + perm} code
{regex + perm} field
{regex} delete
{type} Custom headers
{regex} string
{regex} number
{regex + perm} filter
{type} JSON and XML services
File Includes / Dir Traversal
{regex + perm} file
{regex} location
{regex} locale
{regex + perm} path
{regex} display
{regex} load
{regex + perm} read
{regex} retrieve
{regex + perm} folder
{regex} style
{regex + perm} doc
{regex} document
{regex} root
{regex} pdf
{regex} pg
{regex} include
{regex} list
{regex} view
{regex} img
{regex} image
OS Command Injection
{regex} daemon
{regex + perm} upload
{regex + perm} dir
{regex} execute
{regex + perm} download
{regex + perm} log
{type} .cgi
{regex} ip
{regex} cli
Server Side Request Forgery
Many on the File Includes / Dir Traversal table
{regex + perm} dest
{regex} redirect
{regex + perm} uri
{regex} path
{regex} continue
{regex + perm} url
{regex} window
{regex} next
{regex} data
{regex} reference
{regex + perm} site
{regex} html
{regex + perm} val
{regex} validate
{regex} domain
{regex} callback
{regex} return
{regex + perm} page
{regex} feed
{regex} host
{regex} port
Insecure Direct Object Reference
{regex + perm} id
{regex + perm} user
{regex + perm} account
{regex + perm} number
{regex + perm} order
{regex + perm} no
{regex + perm} doc
{regex + perm} key
{regex + perm} email
{regex + perm} group
{regex + perm} profile
{regex + perm} edit
REST numeric paths
Server Side Template Injection
{regex + perm} template
content
preview
redirect
id
view
activity
name
GUI
 Methodology
&
Tester
Helpers
Advisory
Alerts
Right Click -> Send-To Methodology Section
Description
Multiple Request/Response Tracking
Resources
Notes
Save/Load JSON File
DEMO
Extensibility
"Remote File Inclusion": {
      "check_location": {
        "request": true, 
        "response": false
      }, 
      "detail": "There is probably a Remote File Inclusion on the 
$param$ parameter", 
      "enabled": true, 
      "level": "Information", 
      "name": "Possible Remote File Inclusion", 
      "params": [
        "file", 
        "document", 
        "folder", 
        "root", 
        "path", 
        "pg", 
        "style", 
        "pdf", 
        "template", 
        "php_path", 
        "doc"
      ]
    }
Creating new issue 
checks are as simple 
as adding to the JSON 
file.
Custom Alerts
CVE
Custom Methodologies
➔
Web Application Hacker’s Handbook
➔
PCI (future)
➔
HIPAA (future)
➔
CREST (future)
➔
OWASP (future)
➔
PTES (future)
The Future
➔
More built-in methodologies
➔
Port to ZAP?
➔
More scanner checks/vulnerability classes
➔
More resources
➔
Perfect GUI lol
Thanks!
Questions?
{link}
@jhaddix
@swagnetow
@FatihEgbatan
@digitalwoot
@_Sha128
@bugcrowd