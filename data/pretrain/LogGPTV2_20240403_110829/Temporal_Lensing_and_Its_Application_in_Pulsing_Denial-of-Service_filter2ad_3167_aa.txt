title:Temporal Lensing and Its Application in Pulsing Denial-of-Service
Attacks
author:Ryan Rasti and
Mukul Murthy and
Nicholas Weaver and
Vern Paxson
2015 IEEE Symposium on Security and Privacy
Temporal Lensing and its Application in
Pulsing Denial-of-Service Attacks
Ryan Rasti∗†(cid:5), Mukul Murthy∗, Nicholas Weaver∗†, Vern Paxson∗†
∗UC Berkeley, †ICSI, (cid:5)VMware
Abstract—We introduce temporal
lensing: a technique that
concentrates a relatively low-bandwidth ﬂood into a short, high-
bandwidth pulse. By leveraging existing DNS infrastructure,
we experimentally explore lensing and the properties of the
pulses it creates. We also empirically show how attackers can
use lensing alone to achieve peak bandwidths more than an
order of magnitude greater than their upload bandwidth. While
formidable by itself in a pulsing DoS attack, attackers can also
combine lensing with ampliﬁcation to potentially produce pulses
with peak bandwidths orders of magnitude larger than their own.
I. INTRODUCTION
When conducting network-layer denial-of-service (DoS)
ﬂooding, attackers can either send trafﬁc directly towards
their victim, or bounce it off intermediary reﬂectors by spoof-
ing the victim’s address or otherwise sending the reﬂectors
queries that will induce them to send follow-on trafﬁc to the
victim [16]. If an attacking system can send at a rate of
ψ bytes/sec, then for direct attacks clearly the peak load it
can impose on the victim is also ψ. In the second case, the
reﬂectors might provide a factor k of ampliﬁcation, depending
on the relationship between the queries sent to the reﬂectors
and the replies these result in the reﬂectors transmitting to the
victim.
In the reﬂected case, it might thus appear self-evident that
the peak load an attacking system can impose on the victim
cannot exceed k · ψ. Surprisingly, this turns out not to be
the case. In this paper we introduce temporal lensing, which
(a) exploits existing infrastructure (reﬂectors) in the novel way
of concentrating a ﬂood in time rather than simply mirroring
it, and (b) can from these pulses produce a debilitating degra-
dation of throughput for the victim’s operational TCP trafﬁc,
such as explored in prior work on “shrew” and “pulsing”
attacks [11], [14].
Previous work on pulsing attacks has left a signiﬁcant
opportunity for improvement: a majority of the attacker’s
bandwidth lies unused in between pulses. Therein lies the
question of how to send packets during these idle times but
have these packets still arrive at the victim all in a single
burst. Doing so should allow an attacker to do signiﬁcantly
better than either brute-force ﬂooding or pulsing attacks could
do alone.
We draw an analogy to the military tactic “Time on Target”
[10] for coordinating artillery ﬁre. Using synchronized clocks
and estimates of projectile ﬂight times, a coordinated artillery
battery can ﬁre from different locations but have all their
shells hit the target simultaneously. This technique played a
(a) At t = 0 ms, the attacker sends one packet towards
reﬂector 1
(b) At t = 70 ms, the ﬁrst packet is about 60% along its
path to the victim and the attacker sends another packet
to reﬂector 2
(c) At t = 110 ms, both packets arrive at the victim
Figure 1: Attack illustration. Paths through reﬂectors 1 and 2
have attack path latencies of 110 and 40 milliseconds re-
spectively. The attacker sends at a rate of 1 packet-per-70-
ms, but concentrates the ﬂow such that two packets arrive
simultaneously at the victim. For an instant, the attacker has
signiﬁcantly increased the effective attack bandwidth at the
victim.
key role in the efﬁcacy of American artillery strikes during
World War II [20].
In a more sophisticated variant, “Multiple Rounds Simulta-
neous Impact” [12], a single ordnance makes multiple rounds
rendezvous at the target by varying the angle of ﬁre, charge,
and thus ﬂight time. By varying projectile paths, the artillery
can make more shots arrive at the victim in one period of time
© 2015, Ryan Rasti. Under license to IEEE.
DOI 10.1109/SP.2015.19
187
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:05:02 UTC from IEEE Xplore.  Restrictions apply. 
than it can send in that same amount of time.
To accomplish a similar feat, we leverage the wide range of
paths and latencies on the Internet. If an attacking system can
schedule its sending in such a way that it ﬁrst sends packets
that will take longer to arrive, and later sends those that take
less time to arrive, the packets can all rendezvous at the victim
within a small window of time; the attack compresses the
original transmission into a sharp pulse of trafﬁc that can
completely ﬁll the buffer at the victim and induce packet
loss and thus congestion response. By repeating such pulses
periodically, the attacker can realize reduction of quality [7]
such as that resulting from a shrew attack [11].
Clearly, if the attacker sends directly to the victim, each
packet will take roughly the same amount of time to reach
the victim, since in general they will travel along the same
(or at least similar) paths. Reﬂectors introduce the ability to
obtain variable attack path latencies: the time from attacker
through reﬂector to victim. Each reﬂector the attacker employs
potentially introduces a new path for attack trafﬁc and thus
a different attack path latency. Figure 1 illustrates a simple
example.
We term this technique temporal lensing, or simply lensing,
as reﬂectors can temporally concentrate packets much like a
lens focuses light. When describing how the attack works,
we use the term concentration rather than ampliﬁcation, as
the former more directly matches the underlying dynamics,
and the latter already has common usage in describing an
orthogonal attack (which a lensing attack could also include).
After reviewing related work, we develop the attack in three
main parts: determining attack path latencies through resolvers
to the victim (§ III); building a sending schedule to create max-
imal lensing from these latencies (§ IV); and characterizing
the efﬁcacy of the attack (§ V). We experimentally assess an
implementation of lensing (§ VI), and then address extensions
(§ VII) and assess potential defenses (§ VIII).
II. RELATED WORK
Kuzmanovic and Knightly [11] ﬁrst described the concept
of bursty, low average bandwidth pulses as “shrew” attacks.
The attack aims to send enough packets in a short duration
to cause a TCP retransmit timeout (RTO) in clients, and then
induces additional RTOs with each subsequent, periodic pulse.
They noted that due to their low average bandwidth, such
attacks should prove harder to detect than traditional ﬂooding.
Their evaluation demonstrated that such attacks can effectively
reduce throughput by an order of magnitude or more, and two
potential defenses—use of RED to identify shrew pulses, and
randomization of RTOs to avoid synchronization with subse-
quent pulses—require either a lengthy measurement period or
loss of throughput in the absence of attack.
Zhang, Mao, and Wang explore shrew attacks with a focus
on disrupting BGP [24]. They also discuss using multiple
attackers to initiate a shrew attack, similar to lensing. How-
ever, attackers initiate lensing from a single host and use
reﬂectors—entities not under the attacker’s direct control—as
the attack vector. In addition, lensing enables full utilization
of an attacker’s uplink bandwidth, while simply distributing
a shrew attack still leaves the attacker machines idle most of
the time.
Luo and Chang [14] generalized the idea of shrew attacks to
disruption of TCP congestion control. Speciﬁcally, they also
considered the AIMD congestion control response, showing
that even without retransmission timeouts, such attacks can
also severely degrade TCP ﬂows. Guirguis et al. [7] further
generalized low average bandwidth attacks as a type of RoQ
(reduction of quality) attack, noting that pulsing exploits
transients in a system (e.g., congestion response) instead of
steady state capacity (e.g., victim’s bandwidth).
Kang, Lee, and Gligor
While pulsing DoS boasts impressive theoretical and exper-
imental efﬁcacy, it appears to have seen little use in practice;
perhaps attackers ﬁnd little need to render their attacks more
difﬁcult to detect. If so, then they are better off with direct
ﬂooding: since senders are limited to their uplink bandwidth
in creating pulses, simple pulsing cannot perform better than
direct ﬂooding in terms of damage inﬂicted. However, the
idle time between pulses indicates room for improvement. In
particular, our development of lensing aims to improve ﬂood-
ing efﬁcacy rather than stealth, which may lead to attackers
becoming more inclined to use it.
[9]
introduce another variant
on stealthy, low-bandwidth DoS, called “Crossﬁre” attacks.
Crossﬁre attacks use a set of attackers (presumably bots in
a botnet) to ﬂood at low bandwidths and has these ﬂows
converge at a few critical links to cut off the victim from
the Internet. The result is a stealthy attack in which any given
bot sends at a low-average rate, but the ﬂows overﬂow a few
critical links in a way not obvious to the victim or routers.
Lensing shares this idea of concentration, but instead can be
used to concentrate packets from a single ﬂow temporally to
create pulses as in a pulsing DoS attack on TCP congestion
control. Further, as noted above, its primary goal is to buy
more DoS efﬁcacy for an attacker, rather than stealth. The-
oretically, however, the two attacks could be combined (i.e.,
using lensing to better degrade the throughput on the target
links).
Paxson [16] describes the role of reﬂectors in DoS attacks
as amplifying the ﬂooded trafﬁc and helping attackers evade
detection. He also notes the natural use of open DNS resolvers
as reﬂectors. Our attack prototype takes advantage of this
last fact and the abundance of such resolvers (estimated to
be in the tens of millions [18]). However, we use reﬂectors
in a new way, instead employing them to concentrate the
arrival of packets at the victim, much like a lens focuses light.
Thus, lensing works in a fashion complementary to traditional
ampliﬁcation attacks; it is not itself a way to amplify trafﬁc
volume.
Our approach requires the ability to calculate latencies
between each reﬂector and the victim, an instance of the
general problem of measuring latencies between arbitrary
Internet end hosts, which has received signiﬁcant study [4],
[6], [15], [19], [21]. For our purposes, we leverage Gummadi
et al.’s King [8], which offers the impressive advantage that
188
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:05:02 UTC from IEEE Xplore.  Restrictions apply. 
record). Doing so prevents the resolver from iterating through
the DNS hierarchy for subsequent queries. Second, to obtain
accurate measurements, the attacker must issue queries for
different subdomains of the victim’s domain (foo.bar in
the example), lest the attacker’s queries hit the resolver’s cache
and short-circuit the follow-on query (i.e., query for a different
A record). By sending queries for distinct subdomains, each
will result in sending the entire chain of packets 1–4 shown
in Figure 2.
they serve very well
Lensing does not fundamentally require the use of recursive
DNS resolvers as reﬂectors, but
in
this role. By their recursive nature, they perform reﬂection
naturally, and because of their direct co-location with the
reﬂector, using them for measurement provides accurate attack
path latency estimates, particularly so if we target the victim’s
DNS server with the attack.1 Given an estimate of the attack
path RTT, we then halve it to obtain the attack path latency.
Halving the RTT might not in fact give an accurate estimate,
due to the prevalence of asymmetric routing in the Internet.
However, our positive experimental results on lensing in § VI
experimentally validate this approximation.2
Short-term variation. A basic question for the accuracy of
a lensing attack concerns the stability of attack path latency
measurements over short periods of time. In particular, it may
take a few minutes just to measure latencies to all of the
reﬂectors. To investigate how attack path latencies vary over
such time periods, we used a random sample of 44 resolvers
from a public list [1] of a few thousand to measure the path
latency through each every two minutes.3 Figure 3 provides
some examples of what path latency variation can look like
over time. We show three cases, deemed (from the attacker’s
perspective) “good” latency variation, “bad” variation, and
seemingly-good-but-not. In particular, the resolver in the third
graph might at ﬁrst appear good because it exhibits few
timeouts and a fairly consistent latency over short periods of
time. Over longer time periods, however, it appears to undergo
repeated routing changes that abruptly alter the attack path
latency. Using such a reﬂector could lead to packets sent it
missing the pulsing window.
We can robustly characterize a given reﬂector’s latency
variation using the interquartile range (IQR) of the distribution
of its measurements, i.e., the difference between its 75th and
25th percentiles. We ﬁnd that misleading resolvers are fairly
rare. For example, the one in the third plot had an IQR of
122 ms, while more generally we ﬁnd that nearly half our
resolvers had an IQR of under 12 ms.
In summary, for some resolvers, the attacker must either
perform latency measurements immediately before launching
1The reader may correctly note that pulsing DoS attacks (which attack TCP
congestion control) will likely have little impact on a UDP-based service such
as DNS. We defer discussion of estimating attack path latencies to TCP-based
hosts to § VII-A.
approximation (i.e., Latency = 1
§ VII-A).
2It turns out that a constant error term (constant over all paths) in the
2 · RTT + ) will still enable pulsing (see
3Here and throughout the remainder of the paper, our measurements always
included warming DNS caches as necessary.
Figure 2: The operation of King (reprinted with permission),
with the relevant actors for lensing added in red.
it can approximate the latency between arbitrary Internet
hosts without requiring any additional infrastructure beyond
what DNS already provides. King works by ﬁnding DNS
servers close to the target hosts and estimating distances using
recursive DNS queries. King suits our task particularly well
because it has the greatest accuracy when either (or both) hosts
are DNS servers. As a recursive protocol, DNS naturally lends
itself to use in reﬂection.
Schomp et al. [18] estimate the number of open DNS
resolvers in the tens of millions, with many running on (often
outdated) commodity hardware. They note that many such
resolvers are ephemeral, persisting at a given address on the
order of days to weeks. In addition, they describe how many
resolvers do not iterate the DNS hierarchy themselves, but
instead forward the task to auxiliary resolvers. TurboKing
[13] incorporates the possibility of such forwarders to improve
its accuracy. As explained below, because when using open
resolvers for lensing attacks the attack follows the same path as
that used for determining latencies, such DNS nuances should