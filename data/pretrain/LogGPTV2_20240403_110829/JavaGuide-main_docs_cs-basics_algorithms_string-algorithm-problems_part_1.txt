---
title: 几道常见的字符串算法题
category: 计算机基础
tag:
  - 算法
---
> 作者：wwwxmu
>
> 原文地址:
## 1. KMP 算法
谈到字符串问题，不得不提的就是 KMP 算法，它是用来解决字符串查找的问题，可以在一个字符串（S）中查找一个子串（W）出现的位置。KMP 算法把字符匹配的时间复杂度缩小到 O(m+n) ,而空间复杂度也只有 O(m)。因为“暴力搜索”的方法会反复回溯主串，导致效率低下，而 KMP 算法可以利用已经部分匹配这个有效信息，保持主串上的指针不回溯，通过修改子串的指针，让模式串尽量地移动到有效的位置。
具体算法细节请参考：
- [从头到尾彻底理解 KMP:](https://blog.csdn.net/v_july_v/article/details/7041827)
- [如何更好的理解和掌握 KMP 算法?](https://www.zhihu.com/question/21923021)
- [KMP 算法详细解析](https://blog.sengxian.com/algorithms/kmp)
- [图解 KMP 算法](http://blog.jobbole.com/76611/)
- [汪都能听懂的 KMP 字符串匹配算法【双语字幕】](https://www.bilibili.com/video/av3246487/?from=search&seid=17173603269940723925)
- [KMP 字符串匹配算法 1](https://www.bilibili.com/video/av11866460?from=search&seid=12730654434238709250)
**除此之外，再来了解一下 BM 算法！**
> BM 算法也是一种精确字符串匹配算法，它采用从右向左比较的方法，同时应用到了两种启发式规则，即坏字符规则 和好后缀规则 ，来决定向右跳跃的距离。基本思路就是从右往左进行字符匹配，遇到不匹配的字符后从坏字符表和好后缀表找一个最大的右移值，将模式串右移继续匹配。
> 《字符串匹配的 KMP 算法》:
## 2. 替换空格
> 剑指 offer：请实现一个函数，将一个字符串中的每个空格替换成“%20”。例如，当字符串为 We Are Happy.则经过替换之后的字符串为 We%20Are%20Happy。
这里我提供了两种方法：① 常规方法；② 利用 API 解决。
```java
//https://www.weiweiblog.cn/replacespace/
public class Solution {
  /**
   * 第一种方法：常规方法。利用String.charAt(i)以及String.valueOf(char).equals(" "
   * )遍历字符串并判断元素是否为空格。是则替换为"%20",否则不替换
   */
  public static String replaceSpace(StringBuffer str) {
    int length = str.length();
    // System.out.println("length=" + length);
    StringBuffer result = new StringBuffer();
    for (int i = 0; i  Leetcode: 编写一个函数来查找字符串数组中的最长公共前缀。如果不存在公共前缀，返回空字符串 ""。
示例 1:
```plain
输入: ["flower","flow","flight"]
输出: "fl"
```
示例 2:
```plain
输入: ["dog","racecar","car"]
输出: ""
解释: 输入不存在公共前缀。
```
思路很简单！先利用 Arrays.sort(strs)为数组排序，再将数组第一个元素和最后一个元素的字符从前往后对比即可！
```java
public class Main {
 public static String replaceSpace(String[] strs) {
  // 如果检查值不合法及就返回空串
  if (!checkStrs(strs)) {
   return "";
  }
  // 数组长度
  int len = strs.length;
  // 用于保存结果
  StringBuilder res = new StringBuilder();
  // 给字符串数组的元素按照升序排序(包含数字的话，数字会排在前面)
  Arrays.sort(strs);
  int m = strs[0].length();
  int n = strs[len - 1].length();
  int num = Math.min(m, n);
  for (int i = 0; i  LeetCode: 给定一个包含大写字母和小写字母的字符串，找到通过这些字母构造成的最长的回文串。在构造过程中，请注意区分大小写。比如`"Aa"`不能当做一个回文字符串。注
> 意:假设字符串的长度不会超过 1010。
>
> 回文串：“回文串”是一个正读和反读都一样的字符串，比如“level”或者“noon”等等就是回文串。——百度百科 地址：
示例 1:
```plain
输入:
"abccccdd"
输出:
7
解释:
我们可以构造的最长的回文串是"dccaccd", 它的长度是 7。
```
我们上面已经知道了什么是回文串？现在我们考虑一下可以构成回文串的两种情况：
- 字符出现次数为双数的组合
- **字符出现次数为偶数的组合+单个字符中出现次数最多且为奇数次的字符** （参见 **[issue665](https://github.com/Snailclimb/JavaGuide/issues/665)** ）
统计字符出现的次数即可，双数才能构成回文。因为允许中间一个数单独出现，比如“abcba”，所以如果最后有字母落单，总长度可以加 1。首先将字符串转变为字符数组。然后遍历该数组，判断对应字符是否在 hashset 中，如果不在就加进去，如果在就让 count++，然后移除该字符！这样就能找到出现次数为双数的字符个数。
```java
//https://leetcode-cn.com/problems/longest-palindrome/description/
class Solution {
  public  int longestPalindrome(String s) {
    if (s.length() == 0)
      return 0;
    // 用于存放字符
    HashSet hashset = new HashSet();
    char[] chars = s.toCharArray();
    int count = 0;
    for (int i = 0; i  LeetCode: 给定一个字符串，验证它是否是回文串，只考虑字母和数字字符，可以忽略字母的大小写。 说明：本题中，我们将空字符串定义为有效的回文串。
示例 1:
```plain
输入: "A man, a plan, a canal: Panama"
输出: true
```
示例 2:
```plain
输入: "race a car"
输出: false
```
```java
//https://leetcode-cn.com/problems/valid-palindrome/description/
class Solution {
  public  boolean isPalindrome(String s) {
    if (s.length() == 0)
      return true;
    int l = 0, r = s.length() - 1;
    while (l < r) {