# JSONPath in PostgreSQL: Examples and Roadmap

## Authors
- Nikita Glukhov
- Oleg Bartunov

## Affiliation
Postgres Professional

## Presentation at SQL/JSON â€” 2020

### NoSQL Features in Postgres (Overview)
- **Complete SQL/JSON Support** (2016)
  - Functions & operators
  - Indexing
- **JSONPath** (2019)
- **JSONB** (2014)
  - Binary storage
  - Nesting objects & arrays
  - Indexing
- **JSON** (2012)
  - Textual storage
  - JSON verification
- **HSTORE** (2003)
  - Perl-like hash storage
  - No nesting, no arrays
  - Indexing

### Current State of JSON in PostgreSQL
PostgreSQL supports two JSON data types:
- **JSONB**: Binary storage, efficient for indexing and querying.
- **JSON**: Textual storage, useful for storing unaltered JSON.

#### Example: JSON vs. JSONB
```sql
SELECT j::json AS json, j::jsonb AS jsonb 
FROM (SELECT '{"cc":0, "aa": 2, "aa":1,"b":1}' AS j) AS foo;
```
- **JSON**: Stores the text as-is, including duplicates and whitespace.
- **JSONB**: Binary format, removes duplicates (last key wins), sorts keys, and provides rich functions and operators.

### Advantages of JSONB
- **No Parsing Required**: Direct binary access.
- **Index Support**: Efficient querying.
- **Rich Functionality**: Extensive set of functions and "arrow" operators.
- **Performance**: High performance due to indexing.
- **JsQuery Extension**: A JSON query language with GIN indexing support.

### Limitations
- **Black Box for SQL**: JSON[B] can be opaque to SQL, requiring complex queries.

#### Example: Recursive Query
```sql
WITH RECURSIVE t(id, value) AS (
  SELECT * FROM js_test
  UNION ALL
  SELECT t.id,
         COALESCE(kv.value, e.value) AS value
  FROM t
  LEFT JOIN LATERAL jsonb_each(
    CASE WHEN jsonb_typeof(t.value) = 'object' THEN t.value ELSE NULL END
  ) kv ON true
  LEFT JOIN LATERAL jsonb_array_elements(
    CASE WHEN jsonb_typeof(t.value) = 'array' THEN t.value ELSE NULL END
  ) e ON true
  WHERE kv.value IS NOT NULL OR e.value IS NOT NULL
)
SELECT * FROM t;
```

### Postgres Evolution: Embracing Relational and NoSQL Features
- **Attracting NoSQL Users**: With features like JSONB and JsQuery.
- **SQL Standard Adoption**: JSON is now part of the SQL standard (SQL-2016).

### SQL/JSON in PostgreSQL
- **Data Model**: JSONB is a practical subset of the SQL/JSON data model.
- **JSON Path Language**: Describes paths within JSON data for use in SQL/JSON functions.
- **Functions**: Construction and query functions, with support for JSONPath.
- **Indexes**: Utilizes existing indexes and adds JSONPath support.

### JSON Path Language
- **Expression Syntax**: Optional path mode (`strict` or `lax`), followed by a path or expression.
- **Operators**: JSON accessors, filters, and item methods.

#### JSON Path Examples
1. **Basic Elements**
   - `$`: The whole JSON document.
   - `$.floor`: Accesses the `floor` field.
   - `$.floor[*]`: Wildcard array accessor.

2. **Complex Paths**
   - `$.floor[*] ? (@.level > 1 && @.area > 40).no`
   - `-$.a[*]`: Unary expression.
   - `$.a + 3`: Binary expression.
   - `2 * $.a - (3 / $.b + $x.y)`: Complex expression with variables.

3. **Item Methods**
   - `($.a + 1).abs() * 2).ceiling()`

### JSON Path Filters
- **Similar to SQL `WHERE` Clause**: Removes items that do not satisfy a predicate.
- **Filter Modes**:
  - **Lax Mode**: Ignores structural errors, unwraps arrays.
  - **Strict Mode**: Requires exact structure, returns errors for mismatches.

#### Example: Filter Usage
```sql
SELECT * FROM js_test
WHERE value @@ '$.floor[*].apt[*] ? (@.area > 40 && @.area < 100)';
```

### JSON Path Implementation in Postgres
- **Binary Representation**: Parsed SQL/JSON path expressions are stored as `jsonpath` data type.
- **Boolean Operators**: `exists` and `match` for efficient querying.
- **Type-Based Implementation**: Easier integration and more concise expressions.

### JSONPath Functions
- **`jsonb_path_exists()`**: Tests if a JSON path expression returns any items.
- **`jsonb_path_match()`**: Matches a JSON path expression against a JSONB value.

This comprehensive overview and example-driven approach should help you understand and utilize JSONPath effectively in PostgreSQL.