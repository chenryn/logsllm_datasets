title:Low-fat pointers: compact encoding and efficient gate-level implementation
of fat pointers for spatial safety and capability-based security
author:Albert Kwon and
Udit Dhawan and
Jonathan M. Smith and
Thomas F. Knight Jr. and
Andr&apos;e DeHon
Low-Fat Pointers: Compact Encoding and Efﬁcient
Gate-Level Implementation of Fat Pointers
for Spatial Safety and Capability-based Security
Albert Kwon
PI:EMAIL
Department of ESE
200 S. 33rd Street
Philadelphia, PA 19104
United States
Udit Dhawan
PI:EMAIL
Department of ESE
200 S. 33rd Street
Philadelphia, PA 19104
United States
Jonathan M. Smith
PI:EMAIL
Department of CIS
3330 Walnut Street
Philadelphia, PA 19104
United States
Thomas F. Knight, Jr.
PI:EMAIL
Gingko Bioworks
27 Drydock Ave.
Boston, MA 02210
United States
André DeHon
PI:EMAIL
Department of ESE
200 S. 33rd Street
Philadelphia, PA 19104
United States
ABSTRACT
Referencing outside the bounds of an array or buﬀer is a
common source of bugs and security vulnerabilities in to-
day’s software. We can enforce spatial safety and eliminate
these violations by inseparably associating bounds with ev-
ery pointer (fat pointer) and checking these bounds on ev-
ery memory access. By further adding hardware-managed
tags to the pointer, we make them unforgeable. This, in
turn, allows the pointers to be used as capabilities to fa-
cilitate ﬁne-grained access control and fast security domain
crossing. Dedicated checking hardware runs in parallel with
the processor’s normal datapath so that the checks do not
slow down processor operation (0% runtime overhead). To
achieve the safety of fat pointers without increasing program
state, we compactly encode approximate base and bound
pointers along with exact address pointers for a 46b address
space into one 64-bit word with a worst-case memory over-
head of 3%. We develop gate-level implementations of the
logic for updating and validating these compact fat point-
ers and show that the hardware requirements are low and
the critical paths for common operations are smaller than
processor ALU operations. Speciﬁcally, we show that the
fat-pointer check and update operations can run in a 4 ns
clock cycle on a Virtex 6 (40nm) implementation while only
using 1100 6-LUTs or about the area of a double-precision,
ﬂoating-point adder.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full citation
on the ﬁrst page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
CCS’13, November 4–8, 2013, Berlin, Germany.
Copyright is held by the owner/author(s). Publication rights licensed to ACM.
ACM 978-1-4503-2477-9/13/11 ...$15.00.
http://dx.doi.org/10.1145/2508859.2516713.
Categories and Subject Descriptors
B.8.0 [Hardware]: Performance and Reliability—General ;
C.1.3 [Computer System Organization]: Processor Ar-
chitectures—Capability Architectures
Keywords
Processor; security; spatial conﬁnement; fat pointer; capa-
bilities; memory safety
1.
INTRODUCTION
Computer systems security is a major and increasing con-
cern, not least because of the increasing dependence on such
systems for activities in daily life, such as communication,
shopping and banking. Today’s computers reﬂect biases in
system design and organization that are often decades out
of date—based on silicon budgets where orders of magni-
tude fewer transistors were available than today, and based
on threat models where very few machines were networked
and the data they held was of limited value. For example,
today’s systems only provide coarse-grained separation be-
tween processes using virtual memory contexts. Switching
between virtual memory contexts is expensive, encouraging
the use of coarse-grained contexts with no internal separa-
tion of privileges within the contexts. A virtual memory
context typically holds a very large number of objects with
no boundary to separate the access of one object from an-
other, either intentionally or accidentally. The lack of ﬁne-
grained controls on object access enables unintended use or
modiﬁcation of data, such as buﬀer overﬂows. Despite long
familiarity with their existence and exploitation [3], buﬀer
overﬂow attacks remain a persistent source of security holes.
Leaving the burden of spatial safety enforcement to indi-
vidual programmers no longer appears to be a viable approach
to software security. If even a single programmer leaves a
potential spatial safety violation in a program, that is an
open attack vector for the program.
721The alternative is to design our systems to automatically
prevent spatial safety errors, protecting against silent cor-
ruption of the system or violations of program semantics.
This can be done at the language level with bounds checked
arrays (e.g. Java), at the compiler or runtime level by main-
taining object base and bounds information, or at the hard-
ware level. Many recent systems explore the use of fat point-
ers that extend the pointer representation with base and
bounds information so that the runtime or hardware can pre-
vent spatial safety violations (Sec. 2.1). Software level solu-
tions typically come with high runtime overheads (50–120%)
or weak protection guarantees limiting ubiquitous adoption.
Object capability systems [14, 17, 45, 34, 28, 40] are at-
tractive for both their potential to enable programmer con-
trol of access rights and their support for least privilege. Us-
ing hardware supported tags [36, 18, 34, 23, 20] (Sec. 3.1),
we can make fat pointers unforgeable so that they can serve
as a basis for the descriptors used in hardware-based capa-
bility systems.
In this paper we assume that the safety beneﬁts of fat
pointers [27, 33, 31] and the security beneﬁts of capabilities
[29, 42] are well established from prior work, but that their
costs have typically been considered too high for ubiquitous
use in the past [19, 10]. To that end, we address how they
might be eﬃciently implemented in hardware. Speciﬁcally,
we explore (1) compact representations for fat pointers that
limit their impact on memory footprint (3% worst case), (2)
parallel hardware support for bounds checking that guar-
antees there is no runtime overhead for checking, and (3)
hardware enforcement and management that allow the fat
pointers to serve as object capabilities. That is, we spend
hardware to eliminate the overheads of spatial safety check-
ing. We evaluate the area and delay complexity of the hard-
ware fat-pointer operations using an FPGA implementation.
Our novel contributions include:
• Design and evaluation of a new, compact fat-pointer
encoding and implementation (BIMA) that has signif-
icantly lower gate depth (small cycle time) operations
than previous work (e.g. [7]) while simultaneously re-
taining: (1) compact representation in memory, (2)
low memory loss due to fragmentation (= ptr.base) && (ptr.A <= ptr.bound))
perform load or store
else
jump to error handler
The Secure Virtual Architecture (SVA) [11] lists fat point-
ers as a potential future direction for further performance
improvement of OS kernel safety enforcement. Many schemes
have introduced the pointers in the compiler when running
on conventional hardware. These incur signiﬁcant runtime
and space overheads. Examples include: PAriCheck (9.5%
average memory overhead and 49% runtime overhead on
SPEC2000) [50], Baggy Bounds (worst-case 100% memory
overhead; 15% average memory overhead and 60% runtime
overhead on SPEC2000) [2], SoftBound (worst-case 200%
memory overhead; 64% average memory overhead and 67%
runtime overhead on SPEC and Olden benchmarks) [31],
and CRED (26–130% runtime overhead) [39]. Other soft-
ware schemes sacriﬁce guaranteed protection against all out-
of-bound references in order to improve performance, such
as Lightweight Bounds Checks (8.5% average memory over-
head and 23% runtime overhead on SPEC2000) [21]. Fur-
thermore, since these schemes depend on software mainte-
nance and checking of guards, they are not suitable for use
as capabilities since they only assist with voluntary conﬁne-
ment rather than providing mandatory access conﬁnement.
HardBound is a hardware approach that attempts to main-
tain data structure layout compatibility by placing the bound
information in a shadow space and reduces runtime over-
head to 10–20% [15] but has a worst-case memory overhead
of 200%. Moreover, the hardbound design is described only
down to the micro-architectural level, providing no quan-
tiﬁcation of added gate count or necessary gate delay. In-
tel has recently announced a hardware-assisted approach for
runtime memory bounds management [1] that appears very
similar to HardBound.
Apart from the explicit fat-pointer approach for memory
safety, some tagging mechanisms have been proposed that
use metadata to perform spatial checks [12, 9]. The most
lightweight version of these, uses a few extra bits per word
to limit accidental spatial violations but not guarantee pro-
tection, while the more complete require over 100% area
overhead and can have over 100% runtime overhead.
In contrast, our scheme has a worst-case 3% memory loss
due to fragmentation (Sec. 4.5) and no runtime overhead
(Sec. 5) while providing spatial safety semantics similar to
HardBound and hardware enforcement that makes it suit-
able for supporting capabilities. Furthermore, we provide a
gate-level design that allows us to quantify gate count and
gate delays.
While most of the prior work was performed on x86 archi-
tectures, we will be using a RISC architecture as our base-
line. As a crude estimate of the work performed by the fat-
pointer checking with dedicated hardware, we identify the
instruction sequences required to provide the same protec-
tion as our fat-pointer scheme in Tab. 1 and use instruction
trace simulations for the SPEC2006 benchmarks (App. A) to
calculate the impact on dynamic instruction count (Fig. 1).
This is an overestimate in that a good compiler will opti-
mize away some of these checks as redundant (e.g.
[32]).
Nonetheless, this illustrates the work performed by our fat-
722t
n
u
o
C
n
o
i
t
c
u
r
t
s
n
i
I
c
m
a
n
y
D
4
3
2
1
0
D
T
D
F
s
m
e
G
r
a
t
s
a
2
p
z
b
i
s
e
v
a
w
b
M
D
A
s
u
t
c
a
c
c
c
g
I
I
l
a
e
d
x
i
l
u
c
a
c
l
s
s
e
m
a
g
m
b
l
k
m
b
o
g
s
c
a
m
o
r
g
f
e