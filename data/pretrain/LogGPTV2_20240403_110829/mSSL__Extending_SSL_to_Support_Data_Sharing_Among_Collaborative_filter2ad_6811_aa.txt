title:mSSL: Extending SSL to Support Data Sharing Among Collaborative
Clients
author:Jun Li and
Xun Kang
mSSL: Extending SSL to Support Data Sharing Among Collaborative Clients
Jun Li and Xun Kang
University of Oregon
Department of Computer and Information Science
{lijun, kangxun}@cs.uoregon.edu
Abstract
Client-server applications often do not scale well when a
large number of clients access a single server. To solve this,
a new trend is to allow a client to download data from other
peer clients, in addition to from the server directly. This
paradigm, which we call the hybrid peer-to-peer paradigm,
is friendly to the server’s scalability, but also faces new se-
curity challenges. For example, how can the server authen-
ticate its clients and support data conﬁdentiality? How can
a client trust the data downloaded from other clients? What
if a client refuses to acknowledge the service it received or
overstates the service it offered?
In this paper, we present a protocol, called mSSL, that
provides a set of security functions to enable secure sharing
of the data of a server among its clients.
In addition to
access control and conﬁdentiality support, mSSL provides
an original design on supporting data integrity and proof of
service in this new context. Our evaluation further shows
that mSSL has a reasonable overhead.
1
Introduction
While conventionally a client needs to directly request
data from a server, a new trend is to allow multiple clients,
such as thousands of clients of a web server, to share data
among themselves in a peer-to-peer fashion [3, 21, 8, 20].
This creates a hybrid peer-to-peer paradigm that involves
both client-server and peer-to-peer communications.
If a
client has downloaded some blocks of data from a server,
other clients can obtain those blocks from this client, rather
than the original server. This mechanism can potentially
prevent a server from being overloaded when serving a large
number of clients, and enable even an under-provisioned
site to provide a scalable data service.
Accompanying this trend, however, are new security
challenges that conventional client-server approaches such
as SSL [17] cannot easily address. Especially, how can a
server allow peer-to-peer data sharing without weakening
client authentication and access control? When a client re-
trieves data, whether from a server or its peer clients, can the
integrity of the data always be guaranteed? How can data
conﬁdentiality be supported? And, if a client provides data
to another client, can the former provide a non-repudiable
proof of its data provision service? Such questions can be
easily raised if the hybrid peer-to-peer paradigm is used
to distribute software packages, sell large multimedia ﬁles,
share critical information among participants, or other ap-
plications that face various security issues.
Corresponding to the conventional SSL service that
protects client-server connections, we propose to build a
mSSL service that protects both client-server and client-
client communications in the hybrid peer-to-peer paradigm.
mSSL provides a set of functions that enable secure sharing
of a server’s data among its clients and support applications
that sit on top of mSSL. Both conventional security issues
such as client authentication, data integrity, and data conﬁ-
dentiality and new security issues such as proof of service
will all be addressed in this new context. Our solutions to
data integrity and proof of service are especially new.
One important goal of mSSL is that, while allowing
clients to share data traditionally downloaded directly from
a server, the security should not be weakened compared to
the traditional client-server model, or only weakened to a
minimal degree if at all. Unlike a client-server environ-
ment, a server does not directly control all the data ﬂow.
A client may have to decide whether to provide data to an-
other client, or may need to verify the data received from
another. Also unlike a pure peer-to-peer environment, secu-
rity solutions for the hybrid peer-to-peer paradigm can take
advantage of the existence of a server, enabling a potential
integrated “centralized plus distributed” approach.
We have also evaluated the performance of mSSL. The
security functionalities provided by mSSL may be used in
different combinations for different applications, and the
success of mSSL will depend on its efﬁcacy under all those
combinations. Of particular concern is the overhead in-
troduced by mSSL and how much an application could be
slowed down by mSSL.
Proceedings of the 21st Annual Computer Security Applications Conference (ACSAC 2005) 
1063-9527/05 $20.00 © 2005 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:14:11 UTC from IEEE Xplore.  Restrictions apply. 
The rest of this paper is organized as follows. We illus-
trate the design of mSSL in Sections 2, 3 and 4, focusing
on the major security functionalities mSSL provides. We
then discuss several key issues in Section 5. In Section 6
we evaluate the performance of mSSL. Section 7 describes
the related work. We conclude the paper in Section 8.
2 Design
The goal of mSSL is to provide a light-weight, scalable,
robust, and ﬂexible security protocol to provide a suite of
security functionalities for applications running using the
hybrid peer-to-peer paradigm. mSSL can also be used as
a library of function calls or regarded as a middleware ser-
vice. These security functionalities include:
(1) client au-
thentication to ensure that only authenticated clients can ob-
tain a server’s data, whether or not directly from the server,
(2) data integrity to protect the integrity of the data whether
the data is received directly from the server or indirectly
from other clients, (3) data conﬁdentiality to encrypt data
for conﬁdentiality, and (4) proof of service to allow a client
to prove to the server that it has provided speciﬁc data-
sharing service to other clients.
mSSL supports two different access modes for a client to
obtain its server’s data: direct access and indirect access. In
both modes, the client will ﬁrst create an SSL secure chan-
nel between itself and the server and then authenticate itself
(for instance using its account name and password or us-
ing an identity certiﬁcate). If in the direct access mode, the
client will then directly receive a copy of the requested data
from the server; but if in the indirect access mode, the client
will obtain necessary information from the server and then
turn to other peer clients to receive the data. mSSL in direct
access mode is essentially the same as SSL, and it is mSSL
in indirect access mode that we will focus on.
In the following, we call a client who provides data to
others a provider. A client who receives data from provider
clients is called a recipient. We also interchangeably use the
terms data, data object, and ﬁle.
In the rest of this section, we describe the straightforward
design in mSSL for client authentication and conﬁdentiality.
Then in Sections 3 and 4, we illustrate our design for data
integrity and proof of service, the two security functionali-
ties that highlight our contributions for security in this hy-
brid peer-to-peer paradigm.
2.1 Client Authentication
mSSL implements a ticket-based solution to ensure that
only authenticated clients may access a data object, no mat-
ter where the data object is located. In both direct and indi-
rect modes, a client must ﬁrst contact its server and authen-
ticate itself through a SSL channel. Once the server decides
that the client is allowed to obtain the data (such as after a
client paid for purchasing an audio ﬁle), the server will then
either directly transfer the data to the client, or provide a
ticket for the client to contact other peer clients.
The ticket proves that the server authorizes this particular
client to download data from other clients, who can verify
the ticket and authenticate the client in question before pro-
viding data to this client. The ticket typically includes the
id of the client requesting a data object, the id of the data
object, the time that the ticket is issued, the validity period
of the ticket, and a sequence number. The server also uses
its private key to sign the ticket so that any provider that
knows the server’s public key can verify the ticket.
2.2 Conﬁdentiality
In order to ensure that only authenticated clients can ac-
cess data, conﬁdentiality is necessary. mSSL adopts an
object-key-based approach. Every data object can be as-
sociated with an object key for encrypting or decrypting the
data object. An object key can have a life time and be re-
placed when it expires. Essentially an object-oriented ap-
proach, this scheme is able to enforce a ﬁne-grained access
control at the data object level. A server can encrypt any
data object just once in advance for all potential clients, in-
stead of once per client.
When a client c requests a data object O in its encrypted
form ko{O} from a server S, S can issue O’s object key
ko to c immediately after authenticating c’s request (or after
c ﬁnishes downloading ko{O}). After c receives ko{O}
from either c’s peers or S, c can use ko to decrypt ko{O}.
Note that the distribution of ko is protected by kc, a secret
key established between c and S over their SSL channel.
Figure 1 shows this procedure in indirect access mode.
1
2
Establish SSL channel
(k
)
c  established
Request data object O 
with confidentiality
S
3 Ticket T 
4
k
c
}k{
o
c
p
Ticket T 
O}{ko
Figure 1. Conﬁdentiality through mSSL (indi-
rect access mode)
Proceedings of the 21st Annual Computer Security Applications Conference (ACSAC 2005) 
1063-9527/05 $20.00 © 2005 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:14:11 UTC from IEEE Xplore.  Restrictions apply. 
3 Integrity
3.2 The Merkle Hash Tree of a Data Object
We now discuss how mSSL allows a client to verify the
integrity of its server’s data, whether the data is directly re-
ceived from the server or indirectly from some providers.
A simple solution is to ask the server to sign the whole
data object. Unfortunately, if the signature validation fails,
the whole data object must be retransmitted. When the data
object is large, this can be a serious problem. Instead, mSSL
allows the client to verify the integrity at the block level,
assuming every data object can be divided into blocks. A
client does not have to wait until it receives all the blocks of
a data object before verifying the integrity. If it detects an
invalid block, it can request a retransmission of that single
block immediately.
In the following, after presenting two straightforward but
ﬂawed approaches, we show how Merkle hash tree can be
used in a new way to provide mSSL’s block-based integrity
solution.
3.1 Straightforward Approaches
Drawbacks
and Their
One approach is to bundle a signature with every block
of an object. A server signs every block by encrypting a
strong one-way hash of the block. To determine the in-
tegrity of a newly received block, a client checks whether
decrypting the block signature would lead to the correct
hash of the block. However, encryption and decryption per
block will lead to a high computational overhead.
Another approach is to build a signed superblock for a
data object.
It contains the hash value of every block of
the object and a signature of the whole superblock. The
superblock will be transmitted ﬁrst before transmitting data
blocks. After a client receives an authentic superblock of a
data object, it then uses the hash values from the superblock
to verify the integrity of each block that it later receives.
However, a superblock can be very large, leading to a
high startup latency. For a data object with 2m blocks,
assuming every block’s hash value is 16 bytes (all mod-
ern hash algorithms produce hash values of 16 bytes and
higher) and the superblock’s signature is also 16 bytes, its
superblock will be (16 ∗ 2m + 16) bytes. A 1GB ﬁle with
1KB block size will have a superblock with (16M + 16)
bytes. As the size of a data object increases, the size of
its superblock increases linearly. A large superblock can
cause a signiﬁcant delay before a client receives the very
ﬁrst block, which would not be acceptable to applications
in which users prefer prompt response, such as multimedia
streaming. Moreover, if the superblock itself is corrupted,
the retransmission can also be costly. Note that although in-
creasing the block size can reduce the size of a superblock,
the retransmission cost of individual blocks will increase.
We assume a data object O is divided into 2m blocks,
and its binary Merkle hash tree is M (O). The height of
M (O) is then m + 1, with the root at level 0 and leaf nodes
at level m. Figure 2 shows an example tree.
H 18
(signed)
H
14
H
58
H
12
H
34
H
56
H
78
H 1
b
1
H
2
b
2
H
3
b
3
H
4
b
4
H
5
b
5
H
6
b
6
H
7
b
7
H
8
b
8
Figure 2. Merkle hash tree of a data object
with 8 blocks. The authentication path of
block b1 is .
We ﬁrst introduce notations for representing a node or its
value on M (O):
l:
l
i:
H
H
m
i .
l
1)
A node at level l.
The node at level l that is the ith node counting
from left. (Note the ﬁrst node is H
Hi:
The ith leaf node counting from the left, i.e. H
Hab: The node which is the root of the subtree con-
taining leaf nodes Ha through Hb (inclusive).
We can calculate M (O) from the bottom up using a one-
way hash function f as follows: (1) Leaf nodes. For every
block bi (i = 1, ..., 2m), Hi = f (bi). (2) Non-leaf nodes.
l
l
2i, the value of
2i−1 and H
For every two sibling nodes H
2i). (If a node H
l
l
l
2i−1 has
their parent H
2i−1, H
l
2i−1.) Applying the parent
is H
no sibling, its parent H
calculation process recursively, we will obtain the value of
every non-leaf node, including H 0, the value of the root
node. (3) root. H 0 is signed by the server, but note that all
other hash values are not signed.
is f (H
l−1
i
l−1
i
3.3 Conventional Integrity Veriﬁcation Based on
The Merkle Hash Tree of a Data Object
To verify the integrity of every block of the data ob-
ject O, a client will ﬁrst request the signed value of tree
M (O)’s root, H 0. Once it receives a block b, the client
will also request to receive b’s authentication path A(b) =
m−1, ..., H 1(cid:3). A(b) contains exactly one particu-
(cid:2)H
i−1 is
lar hash value from every level of M (O), where H
, H
m
Proceedings of the 21st Annual Computer Security Applications Conference (ACSAC 2005) 
1063-9527/05 $20.00 © 2005 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:14:11 UTC from IEEE Xplore.  Restrictions apply. 
i’s parent. H
i−1 is also called H
i’s uncle.
the sibling of H
With A(b), the procedure in Section 3.2 can be used to cal-
culate H 0. If block b is modiﬁed (or any values on A(b) is
modiﬁed), the calculated H 0 will not equal the signed root
H 0, leading to the detection of an integrity violation. The