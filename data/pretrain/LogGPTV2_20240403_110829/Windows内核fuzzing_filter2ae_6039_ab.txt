## Windows Subsystem for Linux (WSL) 介绍

Windows Subsystem for Linux (WSL) 是微软为开发人员设计的一个兼容层，允许他们在 Windows 操作系统上运行原生的 Linux 二进制文件。第一个版本（WSLv1）于2016年发布，包含两个关键驱动程序：lxcore 和 lxss。WSLv1 使用一种称为 pico process 的轻量级进程来托管 Linux 二进制文件，并通过专用驱动程序（pico provider）处理来自这些进程的系统调用。

### 选择 WSL 的原因

由于 WSL 在架构上类似于 Linux 内核，因此可以重用大多数现有的 Linux 语法以及与 Linux 环境兼容的工具，如 syz-executor 和 syz-fuzzer。我们希望通过 WSL 来查找特权提升（PE）漏洞，但默认情况下 WSL v1 并不提供这种功能，且难以从沙箱环境中利用。尽管如此，我们认为在 Windows 上以最少的改动实现 Syzkaller 的使用体验是可行的。

## 移植过程

首先，我们在 Microsoft Store 中安装了一个 Linux 发行版（例如 Ubuntu），并通过 `apt install openssh-server` 命令添加了 SSH 服务器并配置了 SSH 密钥。接下来，我们需要添加覆盖率跟踪支持。然而，由于 Windows 内核是闭源的，不像 Linux 那样有 KCOV 这样的编译时插桩工具，我们考虑了几种替代方案：

- 使用 QEMU 或 BOCHS 等模拟器并添加覆盖率检测。
- 使用类似 pe-afl 中的静态二进制插桩。
- 使用具有覆盖率采样的 hypervisor 虚拟机管理程序，如 apple-pie。
- 利用 Intel-PT 提供的硬件覆盖率支持。

最终，我们选择了 Intel-PT，因为它能够提供运行时编译二进制文件的跟踪，并且速度较快，可以提供完整的覆盖率信息。为了从运行目标操作系统的虚拟机内部使用 Intel-PT，我们对 KVM 进行了一些修改，主要采用了 kAFL kvm 补丁来支持 Intel-PT 的覆盖率。此外，我们还通过 hypercalls 创建了一个类似 KCOV 的接口，以便当 executor 尝试启动、停止或收集覆盖率时，可以通过发出 hypercalls 来进行控制。

### 崩溃检测机制

为了有效地检测崩溃，我们引入了一种可预见的错误机制，使 Syzkaller 可以捕获到崩溃事件。Syzkaller 的崩溃检测机制依赖于读取 VM 控制台输出，并使用预定义的正则表达式来识别内核错误和警告等。为了检测蓝屏死机（BSOD），我们采用了 kAFL 的技术，通过对 BugCheck 和 BugCheckEx 函数打补丁，使其在崩溃时发出 hypercall 并向 QEMU 输出控制台写入一条唯一的消息。同时，在 syz-manager 中添加了一个正则表达式用于检测 QEMU 输出控制台中的崩溃消息。为进一步提高内核错误的检测精度，我们还启用了 Driver Verifier 的特殊池模式来检查内存损坏问题。

### 符号化与调试

为了更高效地分析崩溃，我们尝试了多种符号化方法：
1. **初始尝试**：直接从堆栈中提取相对地址并打印至 QEMU 控制台，但这不够精确。
2. **使用 Wine 和 kd**：在主机上安装 Wine 后运行 kd 生成调用堆栈，但耗时过长。
3. **远程调试**：将 KD 设置在一台远程 Windows 机器上，并通过 UDP 隧道连接所有通信。虽然效果良好，但在扩展到多台机器时遇到了连接稳定性问题。
4. **自定义符号化器**：受 Bochspwn for Windows 的启发，我们实现了自己的符号化器，该符号化器能够从 guest 获取堆栈、寄存器和驱动程序地址，并将其发送到远程 Windows 机器进行处理后返回调用堆栈。

### 覆盖率稳定性

另一个挑战是确保覆盖率数据的稳定性。Syzkaller 使用多个线程来查找数据竞争，但由于每个进程仅有一个缓冲区，导致多次运行同一程序会产生不同的覆盖率结果。为解决此问题，我们决定模仿 KCOV 的实现方式，即为每个线程单独跟踪覆盖率。为此，我们需要：
- 在 KVM 中跟踪线程交换以切换覆盖率缓冲区。
- 扩展 KCOV hypercall API 以支持线程句柄感知。

通过监控 swapgs 指令触发的上下文切换事件，我们找到了一个合适的 hook 点来实现这一功能。最后，我们还需要禁用一些不必要的服务和自动加载的程序，以优化 guest 机器的性能，并防止 Windows 更新或 Defender 干扰 fuzzing 测试。

综上所述，通过上述措施，我们成功地在 WSL 环境下构建了一个高效且稳定的模糊测试框架，能够在 Windows 平台上发现潜在的安全漏洞。