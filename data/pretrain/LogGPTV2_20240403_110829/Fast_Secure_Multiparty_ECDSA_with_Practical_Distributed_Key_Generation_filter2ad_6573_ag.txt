additional zero-knowledge proofs to prevent malicious parties from cheating. In particular, one of
the main problems that we face in this protocol is that we wish to multiply inside Zq, but are using
Paillier with message space ZN . This opens the door to multiple attacks, that we discuss below.
Each party Pi works as follows:
1. Setup (run during key generation): Party Pi generates a Paillier public/private key pair [31],
denoted (pki, ski), and sends pki to all parties. We denote the Paillier encryption of x using
randomness r and public-key pk by Encpk(x; r). We stress that each party generates its own
Paillier key locally, and no distributed generation is needed. In addition, each party generates a
non-interactive proof that pki was generated correctly (more exactly, that gcd(N, φ(N ) = 1 and
so the scheme is indeed additively homomorphic); see Section 6.2.3.
In addition, each party sets parameters s = t = 128 and (cid:96) = 80 (the parameters t, (cid:96) are utilized
in the zero-knowledge proofs in Sections 6.2.6 and 6.2.7), whereas s is used to ensure that δj→i
sent in Step 2 is large enough to hide Pj’s private input.
such that(cid:80)n
i=1 zi = ((cid:80)n
i=1 xi) · ((cid:80)n
2. Multiplication: each party Pi holds inputs xi, yi and the aim is for the parties to obtain z1, . . . , zn
i=1 yi) mod q. The protocol is as follows:
(a) Step 1 (message 1): Pi computes ci = Encpki(xi), where pki is its own public-key.
In
addition, for every j, party Pi prepares a non-interactive zero-knowledge range proof π1
i→j
using Nj proving that xi ∈ Zq (with soundness as long as xi ∈ (−2t+(cid:96) · q, 2t+(cid:96) · q) for
25
t, (cid:96) security parameters as deﬁned in Section 6.2.6 (the proof requires a modulus from the
veriﬁer, and thus is diﬀerent for each Pj). For every j ∈ [n]\{i}, Pi sends (ci, π1
i→j) to Pj.
(b) Step 2 (message 2): For every j ∈ [n]\{i}, party Pi receives cj = Encpkj (xj) and πj→i from
Pj. Party Pi veriﬁes the proof πj→i and then uses the homomorphic operations—where
(cid:12),⊕ are homomorphic multiplication and addition, respectively—to generate
ci→j = (cj ⊕ 2t+(cid:96) · q) (cid:12) yi ⊕ δi→j = Encpkj (xj · yi + 2t+(cid:96) · q · yj + δi→j)
for a randomly chosen δi→j ∈ Z
q2·2t+(cid:96)+s. In addition, Pi generates a non-interactive zero-
i→j of the pair of values (yj, δj→i) such that ci→j = ((cj ⊕
knowledge proof of knowledge π2
2t+(cid:96) · q) (cid:12) yj) ⊕ δj→i with yj ∈ Zq and δj→i ∈ Z
q2·2t+(cid:96)+s (with soundness as long as yj ∈
(−2t+(cid:96) · q, 2t+(cid:96) · q) and δj→i ∈ (−q2 · 22t+2(cid:96)+s, q2 · 22t+2(cid:96)+s)). See Section 6.2.7 for the proof
speciﬁcation. Pi sends (ci→j, π2
i→j) to Pj.
(c) Step 3 (output): Pi receives all cj→i = Encpki(xi · yj + 2t+(cid:96) · q · yj + δj→i) and π2
j→i values
from Pj for every j ∈ [n]\{i}. Then, for each cj→i, Pi veriﬁes the proof π2
j→i, decrypts cj→i
and adds (xi + 2t+(cid:96) · q)· 2t+(cid:96) · q +2t+(cid:96) · q2 · 2t+(cid:96)+s mod N . Finally, Pi sums the results, adds
xi · yi and subtracts all its δi→j values, and reduces the result modulo q. The result is Pi’s
output zi.
Before proceeding, we explain some of the ideas behind the above protocol. First, we explain
why Pi and Pj add the 2t+(cid:96) · q values. Note that the soundness of the zero-knowledge proof
provided by Pi only guarantees that xi ∈ (−2t+(cid:96) · q, 2t+(cid:96) · q). Thus, Pj ﬁrst adds 2t+(cid:96) · q to the
ciphertext ci before proceeding, ensuring that it encrypts a value that is greater than 0 (and less
than 2· 2t+(cid:96) · q). Likewise, the proof provided by Pj only guarantees that b ∈ (−2t+(cid:96) · q, 2t+(cid:96) · q) and
∆ ∈ (−2t+(cid:96) · q2 · 2t+(cid:96)+s, 2t+(cid:96) · q2 · 2t+(cid:96)+s). Thus, Pi adds (xi + 2t+(cid:96) · q) · 2t+(cid:96) · q mod N , converting
the multiplication by b to a multiplication by b + 2t+(cid:96) · q, ensuring that even if −2t+(cid:96) · q  q2 · 2497 there is no reduction modulo N in the computation. This implies that for q < 775
(which includes all typically used curves), it suﬃces to use N of length 2048 (which is the minimum
reasonable size for Paillier in any case).
On the necessity of the zero-knowledge proofs. We ﬁrst prove why it is necessary to have
the parties prove that the values they used in the homomorphic encryption are within certain
ranges. Consider a corrupted party Pi who sends an encryption ci = Encpki(µ · qν + xi) for some
µ, ν ∈ N with the property that if yj is small then (µ · qν + xi) · yj < Ni and if yj is large then
(µ · qν + xi) · yj ≥ Ni. In the former case, the protocol will proceed with everything correct (since
µ · qν · yj + xi · yj = xi · yj mod q), whereas in the latter case the overall protocol will fail (since
[µ · qν · yj mod Ni] + xi · yj (cid:54)= xi · yj mod q). This will reveal one bit of information about yj that
should not be revealed, and enables an adversary to carry out a binary search on private values.
In a similar way, a corrupted Pj can also use yj + µ · qν and achieve the same eﬀect. In order to
prevent this attack, we have both parties prove that their values are in range in zero-knowledge.
Since N is much larger than q, we are able to use range proofs that have a lot of slack regarding
soundness. This is important since tight range proofs are much more expensive.
In addition, recall that Pj proves that it computed cj→i by multiplying by some b and adding ∆
(within range). This part of the proof is needed due to the following. Assume that the encryption
scheme used (Paillier) is actually fully homomorphic and not just additively homomorphic. Then, Pj
could generate the ciphertext cj→i by computing a circuit that says: if the value encrypted modulo
q is less than q/2 then output the correct value; else output an incorrect value. This would leak
information about Pi’s private value, as discussed above. Thus, in order to prove security without
the zero-knowledge proof, one would need to assume that Paillier is not fully homomorphic, which
would be a non-standard assumption on Paillier. We stress that it may be possible to prove the
ECDSA protocol secure under a game-based deﬁnition without making this assumption (although
we do not know if this is the case). Nevertheless, our aim is to achieve simulation-based security
which seems to require this stronger property.
In our use of multiplication in our ECDSA protocol, the parties need
Multiple multiplications.
to carry out two multiplications, where one of the values is the same. Let xi be the input of Pi and
let yj, y(cid:48)
j be the inputs of Pj. Then, Pi sends a single ﬁrst message, and Pj computes its second
message once with yj and δj→i and a second time with y(cid:48)
j→i. Thus, the
second multiplication requires only a single round of communication, and only a single ciphertext.
Note that this second multiplication can also be run later and does not need to be run at the same
time as the ﬁrst.
j and a diﬀerent random δ(cid:48)
Complexity. We count the computation and communication complexity of this protocol. In the
setup (key generation) phase, each party runs Paillier key generation, computes 11n exponentiations
in ZN (11 to generate the proof and 11(n − 1) to verify the other proofs) and sends 12 elements
of ZN (for the zero-knowledge proof); see Section 6.2.3. (There is an additional cost of checking
divisibility of N as described in [21].) Thus, the overall cost is computing approximately 11n
27
exponentiations in ZN and sending 11 elements of ZN to each party. Then, for multiplication, each
party works independently with each other party to pairwise multiply their shares. The cost of this
is carrying out one Paillier encryption and decryption (when playing Pi), homomorphic operations
on Paillier which are not signiﬁcant (when playing Pj), and proving and verifying both proofs of
Sections 6.2.6 and 6.2.7. Counting the cost of one Paillier encryption to be approximately two
Pedersen commitments, we have that each of these proofs costs approximately 3 Paillier encryption
by the prover and veriﬁer each, and the transmission of approximately 6 elements of ZN . Thus,
the overall cost is computing approximately 14n Paillier encryptions, and each party sending each
other party approximately 16 elements of ZN (12 for the proofs, plus two Paillier ciphertext which
are equivalent to two elements of ZN each). For N of length 2048, this comes to approximately
4KiB for multiplication and 2.75KiB for setup (key generation).
As discussed above, in our ECDSA protocol we carry out two multiplication with the same
value from Pi. In this second multiplication, no ciphertexts or proofs need to be sent or veriﬁed
for Step 1. Thus, the cost of the second multiplication is exactly half the above, and so computing
approximately 7n Paillier encryptions and each party sending each other party approximately 8
elements of ZN .
Bandwidth versus computation. The Paillier-based solution presented here has much lower
bandwidth than the OT-based solution of Section 6.1. As such, it is better suited for scenarios
where some of the participants are more limited (e.g., may be mobile phones). However, in a setting
where all parties are in the same region and have fast connections, the OT-based approach may be
preferable.
6.2.2 Security
We now show that this protocol satisﬁes our deﬁnition of private multiplication in Section 2.3.
First, observe that the ﬁrst privacy property easily follows from the fact that each party Pj sees only
encryptions of the other Pi’s inputs under Pi’s public key (which are therefore indistinguishable),
and decrypted values xi · yj + δj→i (plus other terms divisible by q) which statistically hides the
value, since δj→i is random in Z
q2·2t+(cid:96)+s and this is 2s times larger than the values encrypted.
(See more details regarding this in the explanation about why δj→i is chosen in Z
q2·2t+(cid:96)+s following
the protocol description in Section 6.2.1.) Formally, privacy can be shown by the fact that for
every two sets of honest parties’ inputs {xj, yj}j∈J and {x(cid:48)
j}j∈J , the Paillier ciphertexts are
indistinguishable (via reduction to the semantic security of the encryption), and the distribution
over xi · yj + 2t+(cid:96) · q · yj + δj→i is statistically close to the distribution over xi · y(cid:48)
j + δj→i.
For input indistinguishability, observe that once again, for every two sets of inputs {x(cid:96), y(cid:96)}(cid:96)∈[n]
and {x(cid:48)
(cid:96)}(cid:96)∈[n], the Paillier encryptions of the honest parties’ inputs are indistinguishable, and
the xi · yj + 2t+(cid:96) · q · yj + δj→i and x(cid:48)
j→i are statistically close. Now, since
the sum [c mod q] is the same in both cases, this means that there exist δj→i, δ(cid:48)
j→i such that
j→i for all i, j ∈ [n] (with i (cid:54)= j).
zi,j = xi · yj + 2t+(cid:96) · q · yj + δj→i and zi,j = x(cid:48)
j + δ(cid:48)
Thus indistinguishability holds, even given all output shares c1, . . . , cn. We stress that the above
holds only if there is no reduction modulo Nj of any value; this is crucial since otherwise the fact
that the two sets of inputs deﬁne the same output modulo q does not imply that they deﬁne the
same output in the Paillier decryptions. In order to see that no reduction modulo N takes place at
any point, recall that the zero-knowledge proofs guarantee that all values provided by parties are
j + δ(cid:48)
j + 2t+(cid:96) · q · y(cid:48)
j + 2t+(cid:96) · q · y(cid:48)
j, y(cid:48)
(cid:96), y(cid:48)
i · y(cid:48)
j + 2t+(cid:96) · q · y(cid:48)
i · y(cid:48)
28
in the deﬁned ranges and that the parties add appropriate values (2t+(cid:96) · q · yj and so on) to make
sure that any negative values used are converted to positive values that are equivalent modulo q.
See more discussion on this after the protocol description in Section 6.2.1.
6.2.3 The Zero-Knowledge Proof of Correct Paillier Generation
We use the new proof of [21] in order to certify that the Paillier key was created correctly. Observe
that their proof certiﬁes that RSA is a permutation by proving that gcd(N, φ(N )) = 1 and xe mod
N is a 1–1 permutation over ZN . We actually don’t need this second part of the statement. However,
they only prove a promise problem so that the proof is only guaranteed to fail if xe mod N is not
a 1–1 permutation over ZN . For our application, we need soundness to hold if gcd(N, φ(N )) (cid:54)= 1.
Fortunately, we can easily adapt this by take e = N and then it suﬃces to take m1 = m2, meaning
that we just need to show that m2 random values have N th roots. (This also means that we only
need to compute the σj values taking e = N ; see Step 3 of the basic protocol in [21]). Concretely,
we used the parameters α = 6370 and m2 = 11, meaning that the cost of the protocol is 11 modular
exponentiations, and the bandwidth is 11 elements of ZN .
6.2.4 Zero-Knowledge Equality of Paillier Encryption and Pedersen Commitment
In existing eﬃcient range proofs, soundness requires that the prover use a commitment to the value
over a group of unknown order (this essentially forces the prover to work over the integers and
not modulo the order of the group). Since we wish to have the prover prove that a value in a
Paillier encryption is within a range, we ﬁrst need the prover to commit to the same value in a
Pedersen commitment (modulo a modulus for which it does not know the factorization) and prove
that it committed to the same value. Then, the range proof can be carried out on the Pedersen
commitment. In this section, we present a zero-knowledge proof that the same value was used in