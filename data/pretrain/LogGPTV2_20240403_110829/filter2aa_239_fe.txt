ViewModels项目，它会调用服务，但不依赖服务——服务只实现了协定。
图31-8
应用程序的用户界面有两个视图：一个视图显示图书列表，一个视图显示图书的详细
信息。从列表中选择一本书，就会显示细节。也可以添加和编辑图书。
31.5 模型
下面先使用Models库定义Book类型。这个类型在UI中显示和编辑。为了支持数据绑
定，需要在用户界面中更新的属性值需要实现变更通知。BookId属性只是显示，而不改
变，所以变更通知不需要使用这个属性。SetProperty方法由基类BindableBase定义（代码
文件Models/Book.cs）：
    public class Book: BindableBase
    {
      public int BookId { get; set; }
      private string _title;
      public string Title
      {
        get { return _title; }
        set { SetProperty(ref _title, value); }
      }
      private string _publisher;
      public string Publisher
      {
        get { return _publisher; }
        set { SetProperty(ref _publisher, value); }
      }
      public override string ToString() => Title;
    }
31.5.1 实现变更通知
XAML元素的对象源需要依赖属性或INotifyPropertyChanged，才允许更改通知与数据
绑定。有了模型类型，才能实现INotifyPropertyChanged。为了让一个实现可用于不同的项
目，实现代码在类BindableBase的Framework库项目内完成。INotifyPropertyChanged接口
定义了PropertyChange事件。为了触发更改通知，SetProperty方法实现为一个泛型函数，
以支持任何属性类型。在触发通知之前，检查新值是否与当前值不同（代码文件
Framework / BindableBase.cs）：
    public abstract class BindableBase: INotifyPropertyChanged
    {
      public event PropertyChangedEventHandler PropertyChanged;
      protected virtual void OnPropertyChanged(
        [CallerMemberName] string propertyName = null)
      {
        PropertyChanged? .Invoke(this, new PropertyChangedEventArgs(propertyName)
);
      }
      protected virtual bool SetProperty(ref T item, T value,
        [CallerMemberName] string propertyName = null)
      {
        if (EqualityComparer.Default.Equals(item, value)) return false;
        item = value;
        OnPropertyChanged(propertyName);
        return true;
      }
    }
  注意： 依赖属性参见第29章。
31.5.2 使用Repository模式
接下来，需要一种方法来检索、更新和删除Book对象。使用ADO.NET 
Entity
Framework可以在数据库中读写图书。虽然Entity Framework 7可以在通用Windows平台上
访问，但通常这是一个后台任务，因此本章未涉及。为了使后端可以在客户端应用程序中
访问，在服务器端选择ASP.NET Web API技术。这些主题参见第38章和第42章。在客户
端应用程序中，最好能独立于数据存储。为此，定义Repository设计模式。Repository模式
是模型和数据访问层之间的中介，它可以作为对象的内存集合。它抽象出了数据访问层，
使单元测试更方便。
通用接口IQueryRepository定义的方法通过ID获取一项，或获取一个条目列表（代码
文件Contracts / IQueryRepository.cs）：
    public interface IQueryRepository
      where T: class
    {
      Task GetItemAsync(TKey id);
      Task> GetItemsAsync();
    }
通用接口IUpdateRepository定义方法来添加、更新和删除条目（代码文件Contracts
/IUpdateRepository.cs）：
    public interface IUpdateRepository
      where T: class
    {
      Task AddAsync(T item);
      Task UpdateAsync(T item);
      Task DeleteAsync(TKey id);
    }
IBooksRepository接口为泛型类型T定义Book类型，使前两个泛型接口更具体（代码
文件Contracts / IBooksRepository.cs）:
    public interface IBooksRepository: IQueryRepository,
        IUpdateRepository
    {
    }
使用这些接口，可以改变存储库。创建一个示例库BooksSampleRepository，它实现接
口IBooksRepository的成员，包含一个图书的初始列表（代码文件
Repositories/BooksSampleRepository.cs）：
    public class BooksSampleRepository: IBooksRepository
    {
      private List _books;
      public BooksRepository()
      {
        InitSampleBooks();
      }
      private void InitSampleBooks()
      {
        _books = new List()
        {
  new Book
  {
    BookId = 1,
    Title = "Professional C# 6 and .NET Core 1.0",
    Publisher = "Wrox Press"
  },
  new Book
  {
    BookId = 2,
    Title = "Professional C# 5.0 and .NET 4.5.1",
    Publisher = "Wrox Press"
  },
  new Book
  {
    BookId = 3,
    Title = "Enterprise Services with the .NET Framework",
    Publisher = "AWL"
  }
        };
      }
      public Task DeleteAsync(int id)
      {
        Book bookToDelete = _books.Find(b => b.BookId == id);
        if (bookToDelete ! = null)
        {
  return Task.FromResult(_books.Remove(bookToDelete));
        }
        return Task.FromResult(false);
      }
      public Task GetItemAsync(int id)
      {
        return Task.FromResult(_books.Find(b => b.BookId == id));
      }
      public Task> GetItemsAsync() =>
        Task.FromResult>(_books);
      public Task UpdateAsync(Book item)
      {
        Book bookToUpdate = _books.Find(b => b.BookId == item.BookId);
        int ix = _books.IndexOf(bookToUpdate);
        _books[ix] = item;
        return Task.FromResult(_books[ix]);
      }
      public Task AddAsync(Book item)
      {
        item.BookId = _books.Select(b => b.BookId).Max() + 1;
        _books.Add(item);
        return Task.FromResult(item);
      }
    }
  注意： 存储库定义了异步方法，但这里不需要它们，因为书的检索和更新只
在内存中进行。方法定义为异步，是因为用于访问ASP.NET 
Web 
API或Entity
Framework实体框架的存储库在本质上是异步的。
31.6 视图模型
下面创建包含视图模型的库。每个视图都有一个视图模型。在样例应用程序中，
BooksView与BooksViewModel相关，BookView与BookViewModel相关。视图和视图模型
之间是一对一映射。实际上，视图和视图模型之间还有多对一映射，因为视图存在于不同
的技术中——WPF和UWP。视图模型必须对视图一无所知，但视图要了解视图模型。视
图模型用移动库实现，这样就可以把它用于WPF和UWP。
移动库ViewModels引用了Contracts、Models和Framework库，这些都是移动库。
视图模型包含的属性用于要显示的条目和要执行的命令。BooksViewModel类定义了
属性Books（用于显示图书列表）和SelectedBook（当前选择的书）。BooksViewModel还
定义了命令GetBooksCommand和AddBookCommand（代码文件ViewModels 
/
BooksViewModel.cs）：
    public class BooksViewModel: ViewModelBase
    {
      private IBooksService _booksService;
      public BooksViewModel(IBooksService booksService)
      {
        // etc.
      }
      private Book _selectedBook;
      public Book SelectedBook
      {
        get { return _selectedBook; }
        set
        {
        if (SetProperty(ref _selectedBook, value))
        {
          // etc.
        }
        }
      }
      public IEnumerable Books => _booksService.Books;
      public ICommand GetBooksCommand { get; }
      public async void OnGetBooks()
      {
        // etc.
      }
      private bool _canGetBooks = true;
      public bool CanGetBooks() => _canGetBooks;
      private void OnAddBook()
      {
        // etc.
      }
      public ICommand AddBookCommand { get; }
    }
BookViewModel类定义了属性Book，来显示所选的书和命令SaveBookCommand（代
码文件ViewModels / BookViewModel .cs）：
      public class BookViewModel: ViewModelBase
      {
        private IBooksService _booksService;
        public BookViewModel(IBooksService booksService)
        {
          // etc.
        }
        public ICommand SaveBookCommand { get; }
        private void LoadBook(object sender, BookInfoEvent bookInfo)
        {
          if (bookInfo.BookId == 0)
          {
          Book = new Book();
          }
          else
          {
          Book = _booksService.GetBook(bookInfo.BookId);
          }
        }
        private Book _book;
        public Book Book
        {
          get { return _book; }
          set { SetProperty(ref _book, value); }
        }
        private async void OnSaveBook()
        {
          Book book = await _booksService.AddOrUpdateBookAsync(Book);
          Book = book;
        }
      }
视图模型的属性需要UI更新的更改通知。接口INotifyPropertyChanged通过基类
BindableBase实现。视图模型类派生自ViewModelBase类，来获取这个实现。可以使用
ViewModelBase类来支持视图模型的附加功能，如提供进度信息和输入验证信息（代码文
件Frameworks/ ViewModelBase.cs）：
    public abstract class ViewModelBase: BindableBase
    {
    }
31.6.1 命令
视图模型提供了实现ICommand接口的命令。命令允许通过数据绑定分离视图和命令
处理程序方法。命令还提供启用或禁用命令的功能。ICommand接口定义了方法Execute和
CanExecute，以及CanExecuteChanged事件。
要将命令映射到方法，在Framework程序集中定义了DelegateCommand类。
DelegateCommand定义了两个构造函数，其中一个委托可以传递应通过命令调用的方
法，另一个委托定义了命令是否可用（代码文件Framework / DelegateCommand.cs）：
      public class DelegateCommand: ICommand
      {
        private Action _execute;
        private Func _canExecute;
        public DelegateCommand(Action execute, Func canExecute)
        {
          if (execute == null)
          throw new ArgumentNullException("execute");
          _execute = execute;
          _canExecute = canExecute;
        }
        public DelegateCommand(Action execute)
        : this(execute, null)
        { }
        public event EventHandler CanExecuteChanged;
        public bool CanExecute(object parameter) => _canExecute? .Invoke() ? ? tr
ue;
        public void Execute(object parameter)
        {
          _execute();
        }
        public void RaiseCanExecuteChanged()
        {
          CanExecuteChanged? .Invoke(this, EventArgs.Empty);
        }
      }
BooksViewModel的构造函数创建新的DelegateCommand对象，在执行命令时，指定
方法OnGetBooks和OnAddBook。CanGetBooks方法返回true或false，这取决于
GetBooksCommand是否可用（代码文件ViewModels/ BooksViewModel.cs）：
    public BooksViewModel(IBooksService booksService)
    {
      // etc.
      GetBooksCommand = new DelegateCommand(OnGetBooks, CanGetBooks);
      AddBookCommand = new DelegateCommand(OnAddBook);
    }
分配给GetBooksCommand的CanGetBooks方法返回_canGetBooks的值，其初始值是
true：
    private bool _canGetBooks = true;
    public bool CanGetBooks() => _canGetBooks;
GetBooksCommand的处理程序（OnGetBooks方法）使用books服务加载所有的书，改
变GetBooksCommand的可用性：
    public async void OnGetBooks()
    {