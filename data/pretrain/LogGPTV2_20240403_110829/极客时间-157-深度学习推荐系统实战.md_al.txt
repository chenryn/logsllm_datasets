# 07｜Embedding进阶：如何利用图结构数据生成Graph Embedding？你好，我是王喆。上一节课，我们一起学习了 Embedding技术。我们知道，只要是能够被序列数据表示的物品，都可以通过 Item2vec方法训练出Embedding。但是，互联网的数据可不仅仅是序列数据那么简单，越来越多的数据被我们以图的形式展现出来。这个时候，基于序列数据的Embedding方法就显得"不够用"了。但在推荐系统中放弃图结构数据是非常可惜的，因为图数据中包含了大量非常有价值的结构信息。那我们怎么样才能够基于图结构数据生成 Embedding呢？这节课，我们就重点来讲讲基于图结构的 Embedding 方法，它也被称为Graph Embedding。互联网中有哪些图结构数据？可能有的同学还不太清楚图结构中到底包含了哪些重要信息，为什么我们希望好好利用它们，并以它们为基础生成Embedding？下面，我就先带你认识一下互联网中那些非常典型的图结构数据（如图1）。 ![](Images/4dff6e48c01bbc70fda54c720b038832.png)savepage-src="https://static001.geekbang.org/resource/image/62/96/628efd60b73f81f022260caabb965896.jpeg"}图1 互联网图结构数据事实上，图结构数据在互联网中几乎无处不在，最典型的就是我们每天都在使用的**社交网络**（如图1-a）。从社交网络中，我们可以发现意见领袖，可以发现社区，再根据这些"社交"特性进行社交化的推荐，如果我们可以对社交网络中的节点进行Embedding编码，社交化推荐的过程将会非常方便。**知识图谱**也是近来非常火热的研究和应用方向。像图 1-b中描述的那样，知识图谱中包含了不同类型的知识主体（如人物、地点等），附着在知识主体上的属性（如人物描述，物品特点），以及主体和主体之间、主体和属性之间的关系。如果我们能够对知识图谱中的主体进行Embedding化，就可以发现主体之间的潜在关系，这对于基于内容和知识的推荐系统是非常有帮助的。还有一类非常重要的图数据就是**行为关系类图数据**。这类数据几乎存在于所有互联网应用中，它事实上是由用户和物品组成的"二部图"（也称二分图，如图1c）。用户和物品之间的相互行为生成了行为关系图。借助这样的关系图，我们自然能够利用Embedding技术发掘出物品和物品之间、用户和用户之间，以及用户和物品之间的关系，从而应用于推荐系统的进一步推荐。毫无疑问，图数据是具备巨大价值的，如果能将图中的节点 Embedding化，对于推荐系统来说将是非常有价值的特征。那下面，我们就进入正题，一起来学习基于图数据的Graph Embedding 方法。基于随机游走的 Graph Embedding 方法，Deep Walk我们先来学习一种在业界影响力比较大，应用也很广泛的 Graph Embedding方法，Deep Walk，它是 2014年由美国石溪大学的研究者提出的。它的主要思想是在由物品组成的图结构上进行随机游走，产生大量物品序列，然后将这些物品序列作为训练样本输入Word2vec 进行训练，最终得到物品的 Embedding。因此，DeepWalk可以被看作连接序列 Embedding 和 Graph Embedding 的一种过渡方法。下图 2展示了 DeepWalk方法的执行过程。![](Images/7635a50cbc8662d4591fa6f0f09e57f8.png)savepage-src="https://static001.geekbang.org/resource/image/b7/57/b77d009796547818d58443258a1db857.jpeg"}图2 DeepWalk方法的过程接下来，我就参照图 2 中 4 个示意图，来为你详细讲解一下 DeepWalk的算法流程。首先，我们基于原始的用户行为序列（图2(a)），比如用户的购买物品序列、观看视频序列等等，来构建物品关系图（图2(b)）。从中，我们可以看出，因为用户 U1 先后购买了物品 A 和物品B，所以产生了一条由 A 到 B的有向边。如果后续产生了多条相同的有向边，则有向边的权重被加强。在将所有用户行为序列都转换成物品相关图中的边之后，全局的物品相关图就建立起来了。然后，我们采用随机游走的方式随机选择起始点，重新产生物品序列（图2©）。其中，随机游走采样的次数、长度等都属于超参数，需要我们根据具体应用进行调整。最后，我们将这些随机游走生成的物品序列输入图 2(d) 的 Word2vec模型，生成最终的物品 Embedding向量。 在上述 DeepWalk的算法流程中，唯一需要形式化定义的就是随机游走的跳转概率，也就是到达节点vi] slate-object="inline"后，下一步遍历 vi] slate-object="inline"的邻接点 vj 的概率。如果物品关系图是有向有权图，那么从节点vi] slate-object="inline"跳转到节点 vj] slate-object="inline"的概率定义如下： {simplebar="init"} {.simplebar-wrapper style="margin: 0px;"} simplebar-height-auto-observer-wrapper simplebar-height-auto-observer simplebar-mask {.simplebar-offset style="right: 0px; bottom: 0px;"} {.simplebar-content-wrapper style="height: auto; overflow: scroll hidden;"} {.simplebar-content style="padding: 0px;"} {slate-type="block-katex" ]{.strutstyle="height:1.036108em;vertical-align:-0.286108em;"}[P]{.mord.mathdefault style="margin-right:0.13889em;"}[]{.mspacestyle="margin-right:0.16666666666666666em;"}[[(]{.mopen .delimcenterstyle="top:0em;"}[[v]{.mord .mathdefaultstyle="margin-right:0.03588em;"}[[[]{.pstrutstyle="height:2.7em;"}j]{.mord .mathdefault .mtightstyle="margin-right:0.05724em;"}]{.mord .mtight}]{.sizing .reset-size6.size3.mtight}]{style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"}]{.vliststyle="height:0.311664em;"}[​]{.vlist-s}]{.vlist-r}[[]{.vliststyle="height:0.286108em;"}]{.vlist-r}]{.vlist-t.vlist-t2}]{.msupsub}]{.mord}[]{.mspacestyle="margin-right:0.2777777777777778em;"}[∣]{.mrel}[]{.mspacestyle="margin-right:0.2777777777777778em;"}[[v]{.mord .mathdefaultstyle="margin-right:0.03588em;"}[[[]{.pstrutstyle="height:2.7em;"}i]{.mord .mathdefault .mtight}]{.mord.mtight}]{.sizing .reset-size6 .size3.mtight}]{style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"}]{.vliststyle="height:0.31166399999999994em;"}[​]{.vlist-s}]{.vlist-r}[[]{.vliststyle="height:0.15em;"}]{.vlist-r}]{.vlist-t.vlist-t2}]{.msupsub}]{.mord}[)]{.mclose .delimcenterstyle="top:0em;"}]{.minner}[]{.mspacestyle="margin-right:0.2777777777777778em;"}[=]{.mrel}[]{.mspacestyle="margin-right:0.2777777777777778em;"}]{.base}[[]{.strutstyle="height:1.80002em;vertical-align:-0.65002em;"}{]{.delimsizing.size2}]{.mopen .delimcenter style="top:0em;"}]{.arraycolsepstyle="width:0.5em;"}[[[]{.pstrut style="height:3em;"}[[[]{.mopen.nulldelimiter}[[[]{.pstrut style="height:3em;"}[[[[∑]{.mop.op-symbol .small-op .mtightstyle="position:relative;top:-0.0000050000000000050004em;"}[[[]{.pstrutstyle="height:2.7em;"}j]{.mord .mathdefault .mtightstyle="margin-right:0.05724em;"}[∈]{.mrel .mtight}[[N]{.mord.mathdefault .mtight style="margin-right:0.10903em;"}[[[]{.pstrutstyle="height:2.58333em;"}[[+]{.mord .mtight}]{.mord.mtight}]{style="top:-2.3448em;margin-left:-0.10903em;margin-right:0.1em;"}]{.vliststyle="height:0.3448em;"}[​]{.vlist-s}]{.vlist-r}[[]{.vliststyle="height:0.32186000000000003em;"}]{.vlist-r}]{.vlist-t.vlist-t2}]{.msupsub}]{.mord .mtight}(]{.mtight}]{.mopen .sizing.reset-size1 .size3 .mtight .delimcenterstyle="top:0.07142857142857142em;"}[[V]{.mord .mathdefault .mtightstyle="margin-right:0.22222em;"}[[[]{.pstrutstyle="height:2.65952em;"}[[i]{.mord .mathdefault .mtight}]{.mord.mtight}]{style="top:-2.3448em;margin-left:-0.22222em;margin-right:0.1em;"}]{.vliststyle="height:0.3448em;"}[​]{.vlist-s}]{.vlist-r}[[]{.vliststyle="height:0.31472em;"}]{.vlist-r}]{.vlist-t.vlist-t2}]{.msupsub}]{.mord .mtight}[[)]{.mtight}]{.mclose .sizing.reset-size1 .size3 .mtight .delimcenterstyle="top:0.07142857142857142em;"}]{.minner .mtight}]{.mord.mtight}]{.sizing .reset-size3 .size1.mtight}]{style="top:-2.3458204081632656em;margin-left:0em;margin-right:0.07142857142857144em;"}]{.vliststyle="height:0.3448em;"}[​]{.vlist-s}]{.vlist-r}[[]{.vliststyle="height:0.6551999999999999em;"}]{.vlist-r}]{.vlist-t.vlist-t2}]{.msupsub}]{.mop .mtight}]{.mord .mtight}]{.sizing.reset-size6 .size3.mtight}]{style="top:-2.6550000000000002em;"}[[]{.pstrutstyle="height:3em;"}[]{.frac-linestyle="border-bottom-width:0.04em;"}]{style="top:-3.23em;"}[[]{.pstrutstyle="height:3em;"}[M]{.mord .mathdefault .mtightstyle="margin-right:0.10903em;"}[[[]{.pstrutstyle="height:2.5em;"}i]{.mord .mathdefault .mtight}[j]{.mord.mathdefault .mtight style="margin-right:0.05724em;"}]{.mord.mtight}]{.sizing .reset-size3 .size1.mtight}]{style="top:-2.357em;margin-left:-0.10903em;margin-right:0.07142857142857144em;"}]{.vliststyle="height:0.3280857142857143em;"}[​]{.vlist-s}]{.vlist-r}[[]{.vliststyle="height:0.2818857142857143em;"}]{.vlist-r}]{.vlist-t.vlist-t2}]{.msupsub}]{.mord .mtight}]{.mord .mtight}]{.sizing.reset-size6 .size3 .mtight}]{style="top:-3.50732em;"}]{.vliststyle="height:0.985651em;"}[​]{.vlist-s}]{.vlist-r}[[]{.vliststyle="height:0.8036399999999999em;"}]{.vlist-r}]{.vlist-t.vlist-t2}]{.mfrac}[]{.mclose.nulldelimiter}]{.mord}[,]{.mpunct}[]{.mspacestyle="margin-right:0.16666666666666666em;"}[[m]{.mord.mathdefault}[[[]{.pstrut style="height:2.7em;"}[[[i]{.mord.mathdefault .mtight}[j]{.mord .mathdefault .mtightstyle="margin-right:0.05724em;"}]{.mord .mtight}]{.sizing .reset-size6.size3.mtight}]{style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"}]{.vliststyle="height:0.311664em;"}[​]{.vlist-s}]{.vlist-r}[[]{.vliststyle="height:0.286108em;"}]{.vlist-r}]{.vlist-t.vlist-t2}]{.msupsub}]{.mord}]{.mord}]{style="top:-3.1589944999999995em;"}]{.vliststyle="height:1.1446455em;"}[​]{.vlist-s}]{.vlist-r}[[]{.vliststyle="height:0.6446455em;"}]{.vlist-r}]{.vlist-t.vlist-t2}]{.col-align-l}[]{.arraycolsepstyle="width:0.5em;"}[]{.arraycolsepstyle="width:0.5em;"}[[[]{.pstrut style="height:3em;"}[[[v]{.mord.mathdefault style="margin-right:0.03588em;"}[[[]{.pstrutstyle="height:2.7em;"}j]{.mord .mathdefault .mtightstyle="margin-right:0.05724em;"}]{.mord .mtight}]{.sizing .reset-size6.size3.mtight}]{style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"}]{.vliststyle="height:0.311664em;"}[​]{.vlist-s}]{.vlist-r}[[]{.vliststyle="height:0.286108em;"}]{.vlist-r}]{.vlist-t.vlist-t2}]{.msupsub}]{.mord}[]{.mspacestyle="margin-right:0.2777777777777778em;"}[∈]{.mrel}[]{.mspacestyle="margin-right:0.2777777777777778em;"}[[N]{.mord .mathdefaultstyle="margin-right:0.10903em;"}[[[]{.pstrutstyle="height:2.7em;"}+]{.mord .mtight}]{.mord .mtight}]{.sizing.reset-size6 .size3.mtight}]{style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"}]{.vliststyle="height:0.25833100000000003em;"}[​]{.vlist-s}]{.vlist-r}[[]{.vliststyle="height:0.208331em;"}]{.vlist-r}]{.vlist-t.vlist-t2}]{.msupsub}]{.mord}[]{.mspacestyle="margin-right:0.16666666666666666em;"}[[(]{.mopen .delimcenterstyle="top:0em;"}[[v]{.mord .mathdefaultstyle="margin-right:0.03588em;"}[[[]{.pstrutstyle="height:2.7em;"}i]{.mord .mathdefault .mtight}]{.mord.mtight}]{.sizing .reset-size6 .size3.mtight}]{style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"}]{.vliststyle="height:0.31166399999999994em;"}[​]{.vlist-s}]{.vlist-r}[[]{.vliststyle="height:0.15em;"}]{.vlist-r}]{.vlist-t.vlist-t2}]{.msupsub}]{.mord}[)]{.mclose .delimcenterstyle="top:0em;"}]{.minner}[]{.mspacestyle="margin-right:0.16666666666666666em;"}[ ]{.mspace}[0]{.mord}[,]{.mpunct}]{.mord}]{style="top:-3.1589944999999995em;"}]{.vliststyle="height:1.1446455em;"}[​]{.vlist-s}]{.vlist-r}[[]{.vliststyle="height:0.6446455em;"}]{.vlist-r}]{.vlist-t.vlist-t2}]{.col-align-l}[]{.arraycolsepstyle="width:0.5em;"}[]{.arraycolsepstyle="width:0.5em;"}[[[]{.pstrut style="height:3em;"}[[[e]{.mord.mathrm}]{.mord}[\_]{.mord style="margin-right:0.02778em;"}[[i]{.mord.mathdefault}[j]{.mord .mathdefaultstyle="margin-right:0.05724em;"}]{.mord}[]{.mspacestyle="margin-right:0.2777777777777778em;"}∈]{.mrel}]{.mord}[[[[[[]{.pstrutstyle="height:3em;"}[[]{.strutstyle="height:1em;vertical-align:-0.25em;"}/]{.mord}[]{.mspacestyle="margin-right:0.05555555555555555em;"}]{.mord}]{.inner}[]{.fix}]{.llap}]{style="top:-3em;"}]{.vliststyle="height:0.75em;"}[​]{.vlist-s}]{.vlist-r}[[]{.vliststyle="height:0.25em;"}]{.vlist-r}]{.vlist-t.vlist-t2}]{.mord}]{.mrel}[]{.mspacestyle="margin-right:0.2777777777777778em;"}[ε]{.mord.mathdefault}]{.mord}]{style="top:-3.1589944999999995em;"}]{.vliststyle="height:1.1446455em;"}[​]{.vlist-s}]{.vlist-r}[[]{.vliststyle="height:0.6446455em;"}]{.vlist-r}]{.vlist-t.vlist-t2}]{.col-align-c}[]{.arraycolsepstyle="width:0.5em;"}]{.mtable}]{.mord}[]{.mclose.nulldelimiter}]{.minner}]{.base}]{.katex-htmlaria-hidden="true"}]{.katex}]{.katex-display} {.simplebar-placeholder style="width: 432px; height: 71px;"} {.simplebar-track .simplebar-horizontal style="visibility: visible;"} {.simplebar-scrollbar style="width: 339px; transform: translate3d(0px, 0px, 0px); display: block;"} {.simplebar-track .simplebar-vertical style="visibility: hidden;"} {.simplebar-scrollbar style="height: 0px; display: none;"}其中，N+(vi] slate-object="inline") 是节点 vi] slate-object="inline"所有的出边集合，Mij] slate-object="inline"是节点 vi] slate-object="inline"到节点 vj] slate-object="inline"边的权重，即 DeepWalk的跳转概率就是跳转边的权重占所有相关出边权重之和的比例。如果物品相关图是无向无权重图，那么跳转概率将是(式 1) 的一个特例，即权重 Mij] slate-object="inline"将为常数 1，且N+(vi] slate-object="inline") 应是节点 vi] slate-object="inline"所有"边"的集合，而不是所有"出边"的集合。再通过随机游走得到新的物品序列，我们就可以通过经典的 word2vec的方式生成物品 Embedding 了。当然，关于 word2vec的细节你可以回顾上一节课的内容，这里就不再赘述了。在同质性和结构性间权衡的方法，Node2vec2016 年，斯坦福大学的研究人员在 DeepWalk 的基础上更进一步，他们提出了Node2vec 模型。Node2vec 通过调整随机游走跳转概率的方法，让 GraphEmbedding 的结果在网络的**同质性**（Homophily）和**结构性**（Structural Equivalence）中进行权衡。进一步可以把不同的Embedding输入推荐模型，让推荐系统学习到不同的网络结构特点。我这里所说的网络的**"同质性"指的是距离相近节点的 Embedding应该尽量近似**，如图 3 所示，节点 u 与其相连的节点 s1、s2、s3、s4 的Embedding表达应该是接近的，这就是网络"同质性"的体现。在电商网站中，同质性的物品很可能是同品类、同属性，或者经常被一同购买的物品。而**"结构性"指的是结构上相似的节点的 Embedding应该尽量接近**，比如图 3 中节点 u 和节点 s6都是各自局域网络的中心节点，它们在结构上相似，所以它们的 Embedding表达也应该近似，这就是"结构性"的体现。在电商网站中，结构性相似的物品一般是各品类的爆款、最佳凑单商品等拥有类似趋势或者结构性属性的物品。![](Images/d5a0237eee4f23fe2a54e140756b6a8a.png)savepage-src="https://static001.geekbang.org/resource/image/79/75/79cdbcbf1bf132e0e576ffd1a19a7c75.jpeg"}图3 网络的BFS和 DFS示意图理解了这些基本概念之后，那么问题来了，Graph Embedding的结果究竟是怎么表达结构性和同质性的呢？首先，为了使 Graph Embedding的结果能够表达网络的"**结构性**"，在随机游走的过程中，我们需要让游走的过程更倾向于 **BFS（BreadthFirst Search，宽度优先搜索）**，因为 BFS会更多地在当前节点的邻域中进行游走遍历，相当于对当前节点周边的网络结构进行一次"微观扫描"。当前节点是"局部中心节点"，还是"边缘节点"，亦或是"连接性节点"，其生成的序列包含的节点数量和顺序必然是不同的，从而让最终的Embedding抓取到更多结构性信息。而为了表达"**同质性**"，随机游走要更倾向于 **DFS（DepthFirst Search，深度优先搜索）**才行，因为 DFS更有可能通过多次跳转，游走到远方的节点上。但无论怎样，DFS的游走更大概率会在一个大的集团内部进行，这就使得一个集团或者社区内部节点的Embedding更为相似，从而更多地表达网络的"同质性"。那在 Node2vec 算法中，究竟是怎样控制 BFS 和 DFS的倾向性的呢？其实，它主要是通过节点间的跳转概率来控制跳转的倾向性。图 4 所示为Node2vec 算法从节点 t 跳转到节点 v 后，再从节点 v跳转到周围各点的跳转概率。这里，你要注意这几个节点的特点。比如，节点 t是随机游走上一步访问的节点，节点 v 是当前访问的节点，节点x1] slate-object="inline"、x2] slate-object="inline"、x3] slate-object="inline"是与 v 相连的非 t 节点，但节点x1] slate-object="inline"还与节点 t相连，这些不同的特点决定了随机游走时下一次跳转的概率。![](Images/0c60123abe06504f95aca8d4821cb135.png)savepage-src="https://static001.geekbang.org/resource/image/a1/f2/a125915fde54dde31c6c2b69446c8ff2.jpeg"}图4 Node2vec的跳转概率这些概率我们还可以用具体的公式来表示，从当前节点 v 跳转到下一个节点 x的概率  [[[]{.strutstyle="height:0.58056em;vertical-align:-0.15em;"}[[π]{.mord .mathdefaultstyle="margin-right:0.03588em;"}[[[]{.pstrutstyle="height:2.7em;"}v]{.mord .mathdefault .mtightstyle="margin-right:0.03588em;"}[x]{.mord .mathdefault .mtight}]{.mord.mtight}]{.sizing .reset-size6 .size3.mtight}]{style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"}]{.vliststyle="height:0.151392em;"}[​]{.vlist-s}]{.vlist-r}[[]{.vliststyle="height:0.15em;"}]{.vlist-r}]{.vlist-t.vlist-t2}]{.msupsub}]{.mord}[]{.mspacestyle="margin-right:0.2777777777777778em;"}[=]{.mrel}[]{.mspacestyle="margin-right:0.2777777777777778em;"}]{.base}[[]{.strutstyle="height:1.036108em;vertical-align:-0.286108em;"}[[α]{.mord.mathdefault style="margin-right:0.0037em;"}[[[]{.pstrutstyle="height:2.7em;"}p]{.mord .mathdefault .mtight}[q]{.mord.mathdefault .mtight style="margin-right:0.03588em;"}]{.mord.mtight}]{.sizing .reset-size6 .size3.mtight}]{style="top:-2.5500000000000003em;margin-left:-0.0037em;margin-right:0.05em;"}]{.vliststyle="height:0.15139200000000003em;"}[​]{.vlist-s}]{.vlist-r}[[]{.vliststyle="height:0.286108em;"}]{.vlist-r}]{.vlist-t.vlist-t2}]{.msupsub}]{.mord}[(]{.mopen}[t]{.mord.mathdefault}[,]{.mpunct}[]{.mspacestyle="margin-right:0.16666666666666666em;"}[x]{.mord.mathdefault}[)]{.mclose}[]{.mspacestyle="margin-right:0.2222222222222222em;"}[⋅]{.mbin}[]{.mspacestyle="margin-right:0.2222222222222222em;"}]{.base}[[]{.strutstyle="height:0.58056em;vertical-align:-0.15em;"}[[ω]{.mord .mathdefaultstyle="margin-right:0.03588em;"}[[[]{.pstrutstyle="height:2.7em;"}v]{.mord .mathdefault .mtightstyle="margin-right:0.03588em;"}[x]{.mord .mathdefault .mtight}]{.mord.mtight}]{.sizing .reset-size6 .size3.mtight}]{style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"}]{.vliststyle="height:0.151392em;"}[​]{.vlist-s}]{.vlist-r}[[]{.vliststyle="height:0.15em;"}]{.vlist-r}]{.vlist-t.vlist-t2}]{.msupsub}]{.mord}]{.base}]{.katex-htmlaria-hidden="true"}]{.katexslate-string="true"}]}]{slate-type="inline-katex" ，其中 wvx 是边 vx的原始权重，]{.strutstyle="height:1.036108em;vertical-align:-0.286108em;"}[[α]{.mord.mathdefault style="margin-right:0.0037em;"}[[[]{.pstrutstyle="height:2.7em;"}p]{.mord .mathdefault .mtight}[q]{.mord.mathdefault .mtight style="margin-right:0.03588em;"}]{.mord.mtight}]{.sizing .reset-size6 .size3.mtight}]{style="top:-2.5500000000000003em;margin-left:-0.0037em;margin-right:0.05em;"}]{.vliststyle="height:0.15139200000000003em;"}[​]{.vlist-s}]{.vlist-r}[[]{.vliststyle="height:0.286108em;"}]{.vlist-r}]{.vlist-t.vlist-t2}]{.msupsub}]{.mord}[(]{.mopen}[t]{.mord.mathdefault}[,]{.mpunct}[]{.mspacestyle="margin-right:0.16666666666666666em;"}[x]{.mord.mathdefault}[)]{.mclose}]{.base}]{.katex-htmlaria-hidden="true"}]{.katexslate-string="true"}]}]{slate-type="inline-katex" 是 Node2vec定义的一个跳转权重。到底是倾向于 DFS 还是BFS，主要就与这个跳转权重的定义有关了。这里我们先了解一下它的精确定义，我再作进一步的解释： {simplebar="init"} {.simplebar-wrapper style="margin: 0px;"} simplebar-height-auto-observer-wrapper simplebar-height-auto-observer simplebar-mask {.simplebar-offset style="right: 0px; bottom: 0px;"} {.simplebar-content-wrapper style="height: auto; overflow: hidden;"} {.simplebar-content style="padding: 0px;"} {slate-type="block-katex" ]{.strutstyle="height:3.8524320000000007em;vertical-align:-1.6762160000000006em;"}[[α]{.mord.mathdefault style="margin-right:0.0037em;"}[[[]{.pstrutstyle="height:2.7em;"}p]{.mord .mathdefault .mtight}[q]{.mord.mathdefault .mtight style="margin-right:0.03588em;"}[(]{.mopen.mtight}[t]{.mord .mathdefault .mtight}[,]{.mpunct .mtight}[x]{.mord.mathdefault .mtight}[)]{.mclose .mtight}[=]{.mrel .mtight}]{.mord.mtight}]{.sizing .reset-size6 .size3.mtight}]{style="top:-2.5198em;margin-left:-0.0037em;margin-right:0.05em;"}]{.vliststyle="height:0.34480000000000005em;"}[​]{.vlist-s}]{.vlist-r}[[]{.vliststyle="height:0.3551999999999999em;"}]{.vlist-r}]{.vlist-t.vlist-t2}]{.msupsub}]{.mord}[]{.mspacestyle="margin-right:0.16666666666666666em;"}[[[[[]{.pstrutstyle="height:3.15em;"}[⎩]{.delimsizinginner.delim-size4}]{style="top:-2.49999em;"}[[]{.pstrutstyle="height:3.15em;"}[⎨]{.delimsizinginner.delim-size4}]{style="top:-3.15001em;"}[[]{.pstrutstyle="height:3.15em;"}[⎧]{.delimsizinginner.delim-size4}]{style="top:-4.30002em;"}]{.vliststyle="height:2.05002em;"}[​]{.vlist-s}]{.vlist-r}[[]{.vliststyle="height:1.55002em;"}]{.vlist-r}]{.vlist-t .vlist-t2}]{.delimsizing.mult}]{.mopen}]{.arraycolsep style="width:0.5em;"}[[[[[[]{.pstrutstyle="height:3em;"}]{.mopen .nulldelimiter}[[[[[[]{.pstrutstyle="height:3em;"}p]{.mord .mathdefault .mtight}]{.mord.mtight}]{.sizing .reset-size6 .size3.mtight}]{style="top:-2.6550000000000002em;"}[[]{.pstrutstyle="height:3em;"}[]{.frac-linestyle="border-bottom-width:0.04em;"}]{style="top:-3.23em;"}[[]{.pstrutstyle="height:3em;"}1]{.mord .mtight}]{.mord .mtight}]{.sizing.reset-size6 .size3 .mtight}]{style="top:-3.394em;"}]{.vliststyle="height:0.845108em;"}[​]{.vlist-s}]{.vlist-r}[[]{.vliststyle="height:0.481108em;"}]{.vlist-r}]{.vlist-t.vlist-t2}]{.mfrac}[]{.mclose.nulldelimiter}]{.mord}]{.mord}]{style="top:-4.331108em;"}[[]{.pstrutstyle="height:3em;"}[[ ]{.mspace}[1]{.mord}]{.mord}]{style="top:-3.0099999999999993em;"}[[]{.pstrutstyle="height:3em;"}]{.mopen .nulldelimiter}[[[[[[]{.pstrutstyle="height:3em;"}q]{.mord .mathdefault .mtightstyle="margin-right:0.03588em;"}]{.mord .mtight}]{.sizing .reset-size6.size3 .mtight}]{style="top:-2.6550000000000002em;"}[[]{.pstrutstyle="height:3em;"}[]{.frac-linestyle="border-bottom-width:0.04em;"}]{style="top:-3.23em;"}[[]{.pstrutstyle="height:3em;"}1]{.mord .mtight}]{.mord .mtight}]{.sizing.reset-size6 .size3 .mtight}]{style="top:-3.394em;"}]{.vliststyle="height:0.845108em;"}[​]{.vlist-s}]{.vlist-r}[[]{.vliststyle="height:0.481108em;"}]{.vlist-r}]{.vlist-t.vlist-t2}]{.mfrac}[]{.mclose.nulldelimiter}]{.mord}]{.mord}]{style="top:-1.8048919999999993em;"}]{.vliststyle="height:2.176216em;"}[​]{.vlist-s}]{.vlist-r}[[]{.vliststyle="height:1.6762160000000006em;"}]{.vlist-r}]{.vlist-t.vlist-t2}]{.col-align-l}[]{.arraycolsepstyle="width:0.5em;"}[]{.arraycolsepstyle="width:0.5em;"}[[[]{.pstrutstyle="height:3em;"} ]{.mord}[如果]{.mord.cjk_fallback}[ ]{.mord}]{.mord .text}[[d]{.mord.mathdefault}[[[]{.pstrut style="height:2.7em;"}[[[t]{.mord.mathdefault .mtight}[x]{.mord .mathdefault .mtight}]{.mord.mtight}]{.sizing .reset-size6 .size3.mtight}]{style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"}]{.vliststyle="height:0.2805559999999999em;"}[​]{.vlist-s}]{.vlist-r}[[]{.vliststyle="height:0.15em;"}]{.vlist-r}]{.vlist-t.vlist-t2}]{.msupsub}]{.mord}[]{.mspacestyle="margin-right:0.2777777777777778em;"}[=]{.mrel}[]{.mspacestyle="margin-right:0.2777777777777778em;"}[0]{.mord}]{.mord}]{style="top:-4.331108em;"}[[]{.pstrutstyle="height:3em;"} ]{.mord}[如果]{.mord.cjk_fallback}[ ]{.mord}]{.mord .text}[[d]{.mord.mathdefault}[[[]{.pstrut style="height:2.7em;"}[[[t]{.mord.mathdefault .mtight}[x]{.mord .mathdefault .mtight}]{.mord.mtight}]{.sizing .reset-size6 .size3.mtight}]{style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"}]{.vliststyle="height:0.2805559999999999em;"}[​]{.vlist-s}]{.vlist-r}[[]{.vliststyle="height:0.15em;"}]{.vlist-r}]{.vlist-t.vlist-t2}]{.msupsub}]{.mord}[]{.mspacestyle="margin-right:0.2777777777777778em;"}[=]{.mrel}[]{.mspacestyle="margin-right:0.2777777777777778em;"}[1]{.mord}]{.mord}]{style="top:-3.0099999999999993em;"}[[]{.pstrutstyle="height:3em;"} ]{.mord}[如果]{.mord.cjk_fallback}[ ]{.mord}]{.mord .text}[[d]{.mord.mathdefault}[[[]{.pstrut style="height:2.7em;"}[[[t]{.mord.mathdefault .mtight}[x]{.mord .mathdefault .mtight}]{.mord.mtight}]{.sizing .reset-size6 .size3.mtight}]{style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"}]{.vliststyle="height:0.2805559999999999em;"}[​]{.vlist-s}]{.vlist-r}[[]{.vliststyle="height:0.15em;"}]{.vlist-r}]{.vlist-t.vlist-t2}]{.msupsub}]{.mord}[]{.mspacestyle="margin-right:0.2777777777777778em;"}[=]{.mrel}[]{.mspacestyle="margin-right:0.2777777777777778em;"}[2]{.mord}]{.mord}]{style="top:-1.8048919999999993em;"}]{.vliststyle="height:2.176216em;"}[​]{.vlist-s}]{.vlist-r}[[]{.vliststyle="height:1.6762160000000006em;"}]{.vlist-r}]{.vlist-t.vlist-t2}]{.col-align-l}[]{.arraycolsepstyle="width:0.5em;"}]{.mtable}]{.mord}[]{.mclose.nulldelimiter}]{.minner}]{.base}]{.katex-htmlaria-hidden="true"}]{.katex}]{.katex-display} {.simplebar-placeholder style="width: 432px; height: 113px;"} {.simplebar-track .simplebar-horizontal style="visibility: hidden;"} {.simplebar-scrollbar style="width: 0px; display: none; transform: translate3d(0px, 0px, 0px);"} {.simplebar-track .simplebar-vertical style="visibility: hidden;"} {.simplebar-scrollbar style="height: 0px; display: none;"}]{.strutstyle="height:1.036108em;vertical-align:-0.286108em;"}[[α]{.mord.mathdefault style="margin-right:0.0037em;"}[[[]{.pstrutstyle="height:2.7em;"}p]{.mord .mathdefault .mtight}[q]{.mord.mathdefault .mtight style="margin-right:0.03588em;"}]{.mord.mtight}]{.sizing .reset-size6 .size3.mtight}]{style="top:-2.5500000000000003em;margin-left:-0.0037em;margin-right:0.05em;"}]{.vliststyle="height:0.15139200000000003em;"}[​]{.vlist-s}]{.vlist-r}[[]{.vliststyle="height:0.286108em;"}]{.vlist-r}]{.vlist-t.vlist-t2}]{.msupsub}]{.mord}[(]{.mopen}[t]{.mord.mathdefault}[,]{.mpunct}[]{.mspacestyle="margin-right:0.16666666666666666em;"}[x]{.mord.mathdefault}[)]{.mclose}]{.base}]{.katex-htmlaria-hidden="true"}]{.katexslate-string="true"}]}]{slate-type="inline-katex" 里的dtx] slate-object="inline"是指节点 t 到节点 x 的距离，比如节点x1] slate-object="inline"其实是与节点 t 直接相连的，所以这个距离dtx] slate-object="inline"就是 1，节点 t 到节点 t 自己的距离dtt] slate-object="inline"就是 0，而 x2] slate-object="inline"、x3] slate-object="inline"这些不与 t相连的节点，dtx] slate-object="inline"就是 2。此外， [[[]{.strutstyle="height:1.036108em;vertical-align:-0.286108em;"}[[α]{.mord.mathdefault style="margin-right:0.0037em;"}[[[]{.pstrutstyle="height:2.7em;"}p]{.mord .mathdefault .mtight}[q]{.mord.mathdefault .mtight style="margin-right:0.03588em;"}]{.mord.mtight}]{.sizing .reset-size6 .size3.mtight}]{style="top:-2.5500000000000003em;margin-left:-0.0037em;margin-right:0.05em;"}]{.vliststyle="height:0.15139200000000003em;"}[​]{.vlist-s}]{.vlist-r}[[]{.vliststyle="height:0.286108em;"}]{.vlist-r}]{.vlist-t.vlist-t2}]{.msupsub}]{.mord}[(]{.mopen}[t]{.mord.mathdefault}[,]{.mpunct}[]{.mspacestyle="margin-right:0.16666666666666666em;"}[x]{.mord.mathdefault}[)]{.mclose}]{.base}]{.katex-htmlaria-hidden="true"}]{.katexslate-string="true"}]}]{slate-type="inline-katex" 中的参数 p 和 q共同控制着随机游走的倾向性。参数 p 被称为返回参数（return parameter），p越小，随机游走回节点 t 的可能性越大，Node2vec就更注重表达网络的结构性。参数 q 被称为进出参数（in-out parameter），q越小，随机游走到远方节点的可能性越大，Node2vec更注重表达网络的同质性。反之，当前节点更可能在附近节点游走。你可以自己尝试给p 和 q 设置不同大小的值，算一算从 v 跳转到t、x1] slate-object="inline"、x2] slate-object="inline"和 x3] slate-object="inline"的跳转概率。这样一来，应该就不难理解我刚才所说的随机游走倾向性的问题啦。Node2vec这种灵活表达同质性和结构性的特点也得到了实验的证实，我们可以通过调整 p和 q 参数让它产生不同的 Embedding 结果。图 5 上就是 Node2vec更注重同质性的体现，从中我们可以看到，距离相近的节点颜色更为接近，图 5下则是更注重结构性的体现，其中结构特点相近的节点的颜色更为接近。![](Images/1e53320327bd21fc30168106cf3829f0.png)savepage-src="https://static001.geekbang.org/resource/image/09/e1/0973343a1c409b74808eca0b0a35b2e1.jpeg"}图5 Node2vec实验结果毫无疑问，Node2vec所体现的网络的同质性和结构性，在推荐系统中都是非常重要的特征表达。由于Node2vec 的这种灵活性，以及发掘不同图特征的能力，我们甚至可以把不同Node2vec 生成的偏向"结构性"的 Embedding 结果，以及偏向"同质性"的Embedding结果共同输入后续深度学习网络，以保留物品的不同图特征信息。Embedding 是如何应用在推荐系统的特征工程中的？到这里，我们已经学习了好几种主流的 Embedding 方法，包括序列数据的Embedding 方法，Word2vec 和 Item2vec，以及图数据的 Embedding 方法，DeepWalk 和 Node2vec。那你有没有想过，我为什么要在特征工程这一模块里介绍Embedding 呢？Embedding又是是怎么应用到推荐系统中的呢？这里，我就来做一个统一的解答。第一个问题不难回答，由于 Embedding 的产出就是一个数值型特征向量，所以Embedding 技术本身就可以视作特征处理方式的一种。只不过与简单的 One-hot编码等方式不同，Embedding是一种更高阶的特征处理方法，它具备了把序列结构、网络结构、甚至其他特征融合到一个特征向量中的能力。而第二个问题的答案有三个。Embedding在推荐系统中的应用方式大致有三种，分别是"直接应用"、"预训练应用"和"End2End应用"。 其中，"**直接应用**"最简单，就是在我们得到 Embedding 向量之后，直接利用Embedding 向量的相似性实现某些推荐系统的功能。典型的功能有，利用物品Embedding 间的相似性实现相似物品推荐，利用物品 Embedding 和用户Embedding 的相似性实现"猜你喜欢"等经典推荐功能，还可以利用物品 Embedding实现推荐系统中的召回层等。当然，如果你还不熟悉这些应用细节，也完全不用担心，我们在之后的课程中都会讲到。"**预训练应用**"指的是在我们预先训练好物品和用户的 Embedding之后，不直接应用，而是把这些 Embedding向量作为特征向量的一部分，跟其余的特征向量拼接起来，作为推荐模型的输入参与训练。这样做能够更好的把其他特征引入进来，让推荐模型作出更为全面且准确的预测。第三种应用叫做"**End2End 应用**"。看上去这是个新的名词，它的全称叫做"end to endtraining"，也就是端到端训练。不过，它其实并不神秘，指的是我们不预先训练Embedding，而是把 Embedding的训练与深度学习推荐模型结合起来，采用统一的、端到端的方式一起训练，直接得到包含Embedding 层的推荐模型。这种方式非常流行，比如图 6 就展示了三个包含Embedding 层的经典模型，分别是微软的 Deep Crossing，UCL 提出的 FNN 和Google 的Wide&Deep。它们的实现细节我们也会在后续课程里面介绍，你这里只需要了解这个概念就可以了。![](Images/064303d79951f41accec5cd24ba1833d.png)savepage-src="https://static001.geekbang.org/resource/image/c2/e5/c2e46b2b5305fb08ec220a1f4c647de5.jpg"}图6 带有Embedding层的深度学习模型小结这节课我们一起学习了 Graph Embedding 的两种主要方法，分别是 Deep Walk和 Node2vec，并且我们还总结了 Embedding技术在深度学习推荐系统中的应用方法。学习 Deep Walk方法关键在于理解它的算法流程，首先，我们基于原始的用户行为序列来构建物品关系图，然后采用随机游走的方式随机选择起始点，重新产生物品序列，最后将这些随机游走生成的物品序列输入Word2vec 模型，生成最终的物品 Embedding向量。 而 Node2vec 相比于 DeepWalk，增加了随机游走过程中跳转概率的倾向性。如果倾向于宽度优先搜索，则Embedding结果更加体现"结构性"。如果倾向于深度优先搜索，则更加体现"同质性"。最后，我们介绍了 Embedding技术在深度学习推荐系统中的三种应用方法，"直接应用""预训练"和"End2End训练"。这些方法各有特点，它们都是业界主流的应用方法，随着课程的不断深入，我会带你一步一步揭开它们的面纱。老规矩，在课程的最后，我还是用表格的方式总结了这次课的关键知识点，你可以利用它来复习巩固。![](Images/4c0558cf64641445b8f419f3d62483e6.png)savepage-src="https://static001.geekbang.org/resource/image/b8/84/b816fce9f563704c3971cf6c8993fa84.jpeg"}至此，我们就完成了所有 Embedding理论部分的学习。下节课，我们再一起进入 Embedding 和 Graph Embedding的实践部分，利用 Sparrow Recsys 的数据，使用 Spark 实现 Embedding的训练，希望你到时能跟我一起动起手来！课后思考对于 Embedding 预训练和 Embedding End2End训练两种应用方法，你能说出它们之间的优劣点吗？你能尝试对比一下 Embedding 预训练和 Embedding End2End训练这两种应用方法，说出它们之间的优缺点吗？欢迎在留言区分享你的思考和答案，如果这节 Graph Embedding的课程让你有所收获，那不妨也把这节课分享给你的朋友们，我们下节课见！