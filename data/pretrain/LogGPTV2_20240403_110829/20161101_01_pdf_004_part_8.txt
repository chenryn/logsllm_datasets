 tps = 123176.163882 (including connections establishing)
 tps = 123233.120481 (excluding connections establishing)
 statement latencies in milliseconds:
 0.128769 select 1;
连接池
 理由二, 当客户端非常多时, 大多数连接可能空闲, 但是长时间占据一个连接, 可能导致连接数超出数据库最大连接数配置, 正常发起的请求
无法获得连接.
 理由三, 连接池可以挡掉一些非法请求, 例如非法的访问非业务数据库的请求.
 理由四, 连接池位于数据库和应用程序之间, 比较容易实现负载均衡的功能, 对应用程序透明.
连接池
 pgbouncer连接池介绍
 源码地址
 http://git.postgresql.org/gitweb/?p=pgbouncer.git;a=summary
 pgbouncer是一个比较小巧的PostgreSQL连接池插件, 采用线程模式, 每个连接仅需2K内存, 非常适合短连接的场景.
 pgbouncer支持三种连接复用模式:
 会话模式, 当客户端与pgbouncer会话断开时, 服务端的连接才可以被复用.
 事务模式, 当客户端与事务提交后, 服务端的连接才可以被复用.
 语句模式, 当客户端语句执行完后, 服务端的连接才可以被复用.
 使用注意 :
 对于使用了绑定变量的客户端, 请使用会话模式, 因为会话中需要保存并复用named prepared statement的信息.
APP DB1
POOL1 = user1+Aliasdbname1
POOLn = user1+Aliasdbnamen pgbouncer
…
POOLxn = userx+Aliasdbnamen
.
.
DBn
连接池
 安装pgbouncer
 需求
 GNU Make 3.81+
 libevent 2.x
 http://monkey.org/~provos/libevent/
 可选
 异步DNS请求库, c-areq
 安装libevent 2.x
 wget https://github.com/downloads/libevent/libevent/libevent-2.0.21-stable.tar.gz
 tar -zxvf libevent-2.0.21-stable.tar.gz
 cd libevent-2.0.21-stable
 ./configure && make && make install
 echo "/usr/local/lib" >> /etc/ld.so.conf
连接池
 配置lib库路径
 [root@db-172-16-3-150 libevent-2.0.21-stable]# ldconfig
 [root@db-172-16-3-150 libevent-2.0.21-stable]# ldconfig -p|grep libevent
 libevent_pthreads-2.0.so.5 (libc6,x86-64) => /usr/local/lib/libevent_pthreads-2.0.so.5
 libevent_openssl-2.0.so.5 (libc6,x86-64) => /usr/local/lib/libevent_openssl-2.0.so.5
 libevent_extra-2.0.so.5 (libc6,x86-64) => /usr/local/lib/libevent_extra-2.0.so.5
 libevent_extra-1.4.so.2 (libc6,x86-64) => /usr/lib64/libevent_extra-1.4.so.2
 libevent_core-2.0.so.5 (libc6,x86-64) => /usr/local/lib/libevent_core-2.0.so.5
 libevent_core-1.4.so.2 (libc6,x86-64) => /usr/lib64/libevent_core-1.4.so.2
 libevent-2.0.so.5 (libc6,x86-64) => /usr/local/lib/libevent-2.0.so.5
 libevent-1.4.so.2 (libc6,x86-64) => /usr/lib64/libevent-1.4.so.2
连接池
 安装异步DNS请求LIB库
 wget http://c-ares.haxx.se/download/c-ares-1.10.0.tar.gz
 tar -zxvf c-ares-1.10.0.tar.gz
 cd c-ares-1.10.0
 ./configure && gmake && gmake install
 [root@db-172-16-3-150 c-ares-1.10.0]# ldconfig
 [root@db-172-16-3-150 c-ares-1.10.0]# ldconfig -p|grep ares
 libcares.so.2 (libc6,x86-64) => /usr/local/lib/libcares.so.2
 libcares.so.2 (libc6,x86-64) => /usr/lib64/libcares.so.2
 libcares.so (libc6,x86-64) => /usr/local/lib/libcares.so
连接池
 安装pgbouncer
 git clone git://git.postgresql.org/git/pgbouncer.git
 cd pgbouncer
 git submodule init
 git submodule update
 ./autogen.sh
 ./configure --prefix=/opt/pgbouncer --with-libevent=/usr/local/lib --with-cares=/usr/local/lib
 make
 make install
 命令行参数
 [root@db-172-16-3-150 opt]# /opt/pgbouncer/bin/pgbouncer --help
 Usage: pgbouncer [OPTION]... config.ini
 -d, --daemon Run in background (as a daemon)
 -R, --restart Do a online restart
 -q, --quiet Run quietly
 -v, --verbose Increase verbosity
 -u, --user= Assume identity of 
 -V, --version Show version
 -h, --help Show this help screen and exit
连接池
 配置pgbouncer
 1. 主配置文件
 mkdir -p /opt/pgbouncer/etc
 cd /opt/pgbouncer/etc/
 vi config.ini
 [databases]
 aliasdb1 = host=172.16.3.150 port=1921 dbname=digoal client_encoding=sql_ascii datestyle=ISO pool_size=20
 [pgbouncer]
 pool_mode = transaction
 listen_port = 6543
 listen_addr = 0.0.0.0
 auth_type = md5
 auth_file = /opt/pgbouncer/etc/users.txt
 logfile = /opt/pgbouncer/etc/pgbouncer.log
 未完
连接池
 pidfile = /opt/pgbouncer/etc/pgbouncer.pid
 unix_socket_dir = /opt/pgbouncer/etc
 admin_users = pgadmin
 stats_users = pgmon
 server_reset_query = DISCARD ALL
 server_check_query = select 1
 server_check_delay = 30
 max_client_conn = 50000
 default_pool_size = 20
 reserve_pool_size = 5
 dns_max_ttl = 15
连接池
 2. 用户密码配置文件
 cd /opt/pgbouncer/etc/
 vi users.txt
 "postgres" "md53175bce1d3201d16594cebf9d7eb3f9d"
 "pgadmin" "md55bde83786c10fc0f383464f6e56a6d6e"
 "pgmon" "123abc"
 MD5密码封装规则md5(密码+用户名), 与PostgreSQL中存储的md5一致.
 例如pgadmin的密码123abc, 封装成md5为: md55bde83786c10fc0f383464f6e56a6d6e
 digoal=# select md5('123abcpgadmin');
 md5
 ----------------------------------
 5bde83786c10fc0f383464f6e56a6d6e
 (1 row)
连接池
 digoal=# alter role postgres encrypted password 'hello';
 ALTER ROLE
 digoal=# select md5('hellopostgres');
 md5
 ----------------------------------
 0cfe8da07c510ab414c7da9b1acc8fbd
 (1 row)
 digoal=# select passwd from pg_shadow where usename='postgres';
 passwd
 -------------------------------------
 md50cfe8da07c510ab414c7da9b1acc8fbd
 (1 row)
连接池
 3. 启动
 chown -R pg93:pg93 /opt/pgbouncer
 /opt/pgbouncer/bin/pgbouncer -d -u pg93 /opt/pgbouncer/etc/config.ini
 4. 日志
 2013-12-10 17:22:15.570 20185 LOG listening on 0.0.0.0:6543
 2013-12-10 17:22:15.570 20185 LOG listening on unix:/tmp/.s.PGSQL.6543
 2013-12-10 17:22:15.570 20185 LOG process up: pgbouncer 1.6dev, libevent 2.0.21-stable (epoll), adns: c-ares 1.10.0
连接池
 pgbouncer命令行管理
 pg93@db-172-16-3-150-> psql -h 127.0.0.1 -p 6543 -U pgadmin pgbouncer
 Password for user pgadmin:
 这里输入pgadmin用户的密码.
 psql (9.3.1, server 1.6dev/bouncer)
 Type "help" for help.
 pgbouncer=# show help;
 NOTICE: Console usage
 DETAIL:
 SHOW HELP|CONFIG|DATABASES|POOLS|CLIENTS|SERVERS|VERSION
 SHOW STATS|FDS|SOCKETS|ACTIVE_SOCKETS|LISTS|MEM
 SHOW DNS_HOSTS|DNS_ZONES
 SET key = arg
 未完
连接池
 RELOAD
 PAUSE []
 RESUME []
 DISABLE 
 ENABLE 
 KILL 
 SUSPEND
 SHUTDOWN
 SHOW
 pgbouncer=# show config; -- 列出当前所有的配置
 ...
 其他
连接池
 短连接的测试结果
 pg93@db-172-16-3-150-> pgbench -M extended -n -r -f ./test.sql -h /tmp -p 6543 -U postgres -c 16 -j 4 -C -T 30 aliasdb1
 transaction type: Custom query
 scaling factor: 1
 query mode: extended
 number of clients: 16
 number of threads: 4
 duration: 30 s
 number of transactions actually processed: 213378
 tps = 7110.818977 (including connections establishing)
 tps = 181282.711671 (excluding connections establishing)
 statement latencies in milliseconds:
 1.698879 select 1;
连接池
 pgbouncer各参数介绍
 查看doc/config.txt
数据库高速缓存
 本地高速缓存pgfincore
 OS Cache
 http://git.postgresql.org/gitweb/?p=pgfincore.git;a=summary
 利用posix_fadvise修改文件的advice值. (参见 pgfincore.c posix_fadvise(fd, 0, 0, adviceFlag);)
 man posix_fadvise
 异地高速缓存pgmemcache
 memcached
 除了pgmemcache以外, pgredis也是类似的项目, 只不过是redis的一些封装好的API.
 参考: https://github.com/siavashg/pgredis
本地高速缓存pgfincore
 安装
 tar -zxvf pgfincore-b371336.tar.gz
 mv pgfincore-b371336 postgresql-9.3.1/contrib/
 cd postgresql-9.3.1/contrib/pgfincore-b371336/
 export PATH=/home/pg93/pgsql/bin:$PATH
 which pg_config
 /home/pg93/pgsql/bin/pg_config
 gmake clean
 gmake
 gmake install
 [root@db-172-16-3-150 pgfincore-b371336]# su - pg93
 pg93@db-172-16-3-150-> psql
 Type "help" for help.
 digoal=# create extension pgfincore;
 CREATE EXTENSION
本地高速缓存pgfincore
 测试
 digoal=# create table user_info(id int primary key, info text, crt_time timestamp);
 CREATE TABLE
 digoal=# insert into user_info select generate_series(1,5000000), md5(random()::text), clock_timestamp();
 改参数, 便于观察本地OS缓存, 重启数据库.
 shared_buffers = 32MB
 echo 3 > /proc/sys/vm/drop_caches
 pgbench测试脚本
 vi test.sql
 \setrandom id 1 5000000
 select * from user_info where id=:id;
本地高速缓存pgfincore
 加载本地缓存前的测试结果
 pg93@db-172-16-3-150-> pgbench -M prepared -n -r -f ./test.sql -c 16 -j 4 -T 10 digoal
 transaction type: Custom query
 scaling factor: 1
 query mode: prepared
 number of clients: 16
 number of threads: 4
 duration: 10 s
 number of transactions actually processed: 27743