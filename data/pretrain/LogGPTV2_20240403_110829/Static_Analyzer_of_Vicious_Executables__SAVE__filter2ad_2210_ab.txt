measurement 
Similarity 
report 
Figure  6: 
executables (SAVE) 
  Static  analyzer 
for  vicious 
First, the PE code is (optionally) decompressed and 
passed  through  a  PE  file  parser,  producing  the 
intermediate 
representation  which  consists  of  a 
Windows  API  calling  sequence.  We  map  each 
Windows API to a global 32-bit integer id number. The 
16  most  significant  bits  of  the  integer  represent  a 
particular Win32  module (dynamically  linked library), 
and  the  last  16  bits  represent  a  particular  API  in  this 
module.  The  API  calling  sequence  consists  of  a 
sequence of these global id numbers that represent the 
static  calling  sequence  of  the  corresponding  API 
Proceedings of the 20th Annual Computer Security Applications Conference (ACSAC’04) 
1063-9527/04 $ 20.00 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 11:39:06 UTC from IEEE Xplore.  Restrictions apply. 
functions.  This  sequence  is  compared  to  a  known 
malware  sequence  or  signature  (from  the  signature 
database) and is passed through the similarity measure 
module to generate the similarity report. The detection 
decision is made based on this similarity report. 
text  parser 
The  PE  binary  parser  transforms  the  PE  binary  file 
into  API  calling  sequence.  It  uses  two  components, 
W32Dasm  Version  8.9  and  a 
for 
disassembled  code.  W32Dasm  by  URSoftWare  Co.  is 
a commercial disassembler, which disassembles the PE 
code  and  outputs  assembly  instructions,  imported 
modules,  imported  APIs,  and  recourse  information. 
The text parser parses the output from W32Dasm to a 
static  API  calling  sequence,  which  becomes  our 
signature. 
4.1 Similarity measures  
A  signature  is  an  API  sequence  of  a  known  virus  that 
has  been  previously  identified.  Let’s  denote  it  Vs
(vector of signature). The API sequence of a suspicious 
PE  binary  file  is  denoted  Vu  (vector  of  unknown).  To 
identify whether the new executable with signature Vu
is an obfuscated version of the virus represented by Vs,
we measure the similarity between Vs and Vu.
4.1.1  Euclidian  distance.  One  of  the  most  common 
measures is the Euclidean distance measure:  
VsD
(
,
Vu
)
Vs
min(|
(cid:170)
= (cid:166)=
(cid:171)
(cid:172)
1
i
||,
Vu
|)
v
(
s
i
−
2)
v
u
i
1
2
(cid:186)
(cid:187)
(cid:188)
However,  Euclidean  distance  may  not  be  a  good 
similarity  measure  in  some  situations.  For  example, 
consider  the  three  vectors  below.    Most  people  would 
perceive  V1  and  V2  as  having  a  high  similarity  while 
V3 is quite different from the other two. 
V1 = (1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9) 
V2 = (9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1) 
V3 = (5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5) 
If the Euclidean distance is used, the distance between 
V1 and V2 is greater than that between V2 and V3.
D(V1, V2) = 27.72 
D(V1, V3) = 13.86 
Use of sequence alignment will help solve this problem 
[12].
4.1.2  Sequence  alignment.  Consider  the  following 
two sequences: “WANDER” and “WADERS”, the best 
alignment should be  
WANDER-
WA-DERS
algorithm 
alignment 
The  optimal 
can  be 
conceptualized  by  considering  a  matrix  with  the  first 
sequence placed horizontally at the top and the second 
sequence placed vertically on the side. Each position in 
the  matrix  corresponds  to  a  position  in  the  first  and 
second  sequence.  Any  alignment  of  the  sequences 
corresponds to a path through grid.  
W 
X
R 
E 
W
A
D 
E 
R 
S 
Figure 7. Optimal alignment algorithm 
A 
X
N 
D 
X
X
X
computing 
a  method  of 
Using  paths  in  the  grid  to  represent  alignments 
provides 
the  best 
alignments. The  score  of  the  best  path  up  to  that 
position  can  be  placed  in  each  cell. Beginning  at  the 
top left cell, the scores are calculated as the sum of the 
score  for  the  element  pair  determined  by  the  score  of 
the  row  and  column  heading (0  for  mismatches  and  1 
for  matches)  and  the  highest  score  in  the  grid  above 
and to the left of the cell. 
(1) 
Figure  8  shows  the  alignment  algorithm  step  by 
step. Let’s take a deeper look at the shadowed 4 and 3 
squares.  4  is  generated  as  a  max  score  in  left  above 
matrix plus the score for matching, that is 3 plus 1. 3 is 
calculated  as  a  max  score  in  left  above  matrix  plus 
score for mismatching, that is 3 plus 0.  
After applying the above algorithm, the two original 
sequences become “WANDER-” and “WA-DERS”. In 
our  case,  API  sequences  Vs  and  Vu  are  inserted  with 
some  zeros  to  generate  Vs’  and  Vu’,  which  have 
optimal alignment. 
The algorithm has a complexity of 
lO ×
(
are the length of sequence Vs and Vu.
s
s l
l ,
u
l
u
)
, where 
Proceedings of the 20th Annual Computer Security Applications Conference (ACSAC’04) 
1063-9527/04 $ 20.00 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 11:39:06 UTC from IEEE Xplore.  Restrictions apply. 
  W  A  N  D  E  R 
  W A N D E R
  W A N  D  E  R 
W  1  0  0  0  0  0 
W  1 0 0 0 0 0
W 1 0 0  0  0  0 
A             
A  0 2 1 1 1 1
A 0 2 1  1  1  1 
D             
D             
D 0 1 2  3  2  2 
E             
E             
R             
R             
S             
S             
E
R
S
  W  A  N  D  E  R 
  W A N D E R
W 1 0 0 0  0  0 
A 0 2 1 1  1  1 
D 0 1 2 3  2  2 
E  0  1  2  2  4  3 
R             
S             
W 1 0 0 0 0 0
A 0 2 1 1 1 1
D 0 1 2 3 2 2
E 0 1 2 2 4 3
R  0 1 2 2 3 5
S             
  W A N  D  E  R 
W 1 0 0  0  0  0 
A 0 2 1  1  1  1 
D 0 1 2  3 2  2 
E 0 1 2  2  4 3
R 0 1 2  2  3  5
S 0 
1 2  2  3  4 
Figure 8. Conceptualization of optimal alignment algorithm 
1
4.1.3  Similarity  functions.  We  apply  the  traditional 
similarity  functions  on  Vs’  and  Vu’.  Cosine  measure, 
extended Jaccard measure, and the Pearson correlation 
measure  are  popular  measures  of  similarity  for 
sequences.  The  cosine  measure  is  given  below  and 
captures a scale-invariant understanding of similarity. 
(
C
)
S
′
,
uVsV
(
=′
)
′
T
′
uVsV
′
⋅
uV
sV
2
′
2
(cid:170)= (cid:166)
(cid:171)
(cid:172)
i
p
v
i
1
p
(cid:186)
(cid:187)
(cid:188)
V
p
The extended Jaccard measure [13] is computed as  
(
J
)
S
′
,
uVsV
(
=′
)
sV
+′
2
2
′
T
uVsV
′
′−′
2
T
uVsV
uV
′
2
which  measures  the  ratio  of  the  number  of  shared 
attributes  of    Vs’  and  Vu’  to  the  number  possessed  by 
Vs’ or Vu’.
Pearson’s  correlation  measure  is  defined  below  and 
measures  the  strength  and  direction  of  the  linear 
relationship between Vs’ and Vu’.
(
P
)
S
′
,
uVsV
(
=′
)
1
2
(cid:167)
(cid:168)
(cid:168)(cid:168)
(cid:169)
′−′
sVsV
(
′−′
sVsV
T
()
−′
−′
uVuV
′
uVuV
.
2
′
)
2
+
(cid:183)
(cid:184)
1
(cid:184)(cid:184)
(cid:185)
The reason to utilize three different measures is that 
none of them is capable of giving the best results for all 
sequences  measure.  The  following  Table  1  illustrates 
three  examples  to  demonstrate  how  these  measures 
mutually  correct  each  other.  ((cid:57)  indicates  the  best 
output, (cid:56) indicates the false output, and ? indicates the 
acceptable but not the best output ). 
The first example shows a shortened version of the 
most common case in our experiments.  A  tiny change 
in  the  API  sequence  indicates  that  two  files  perform 
very  similar  functions,  that  is  to  say  the  suspicious 
executable is an obfuscated virus. The effective output 
in  this  case  is  1.0.  The  cosine  measure  gives  the  best 
output.  The  second  and  third  examples  show  two 
exceptions  that  can  not  be  measured  correctly  by  the 
cosine  measure.  The  second  shows  two  different 
sequences,  whose  effective  output  is  0.0.  Jaccard 
measure  outputs  the  best  result.  In  the  third  example 
Pearson measure gives the expected result. 
Proceedings of the 20th Annual Computer Security Applications Conference (ACSAC’04) 
1063-9527/04 $ 20.00 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 11:39:06 UTC from IEEE Xplore.  Restrictions apply. 
In the current version of SAVE, we calculate the mean 
(
S C
()
(
of
′
,
′
)
uVsV
value 
S J
()
measure  between  a  virus  signature  and  a  suspicious 
binary 
value 
m
.  For  a  particular 
this  mean 
uVsV
denote 
S P
and
′
)
′
,
()
,
uVsV
(
(
,  which  stands  for  the  similarity 
file, 
′
uVsV
,
let’s 
′
)
as
S
()
i
′
,
′
)
between  virus  signature  i  and  suspicious  binary  file. 
Our  similarity  report  is  generated  by  calculating  the 
S
  value  for  each  virus  signature  in  the 
uVsV
′
)
()
′
,
m
(
i
signature database. The index of the largest entry in the 
similarity  report  indicates  the  most  possible  virus  the 
i
.  By  comparing  this  largest  value  with  a 
suspicious file is (a variant of). Let’s denote the index 
as  max
threshold,  we  make  a  decision  whether  the  binary  file 
is piece of malware and what it is. In our experiments, 
the threshold 0.9 seemed to work quite well. 
The following Table 2 shows the preliminary results 
of  our  recent  investigation  of  the  MyDoom  worm  and 
several  other  recent  worms  and  viruses,  using  eight 
different (commercial) scanners and proxy services. ((cid:57)
indicates detection, (cid:56) indicates failure to detect, and ? 
indicates  only  an  “alert”;  all  scanners  used  are  most 
current 
version).
updated 
and 
Table 1: Mutual correction between measures 
′
)
S P
0.8631 
S C
0.9316 
S J
0.8160 
uVsV
uVsV
′
)