title:Accurate Malware Detection by Extreme Abstraction
author:Fady Copty and
Matan Danos and
Orit Edelstein and
Cindy Eisner and
Dov Murik and
Benjamin Zeltser
Accurate Malware Detection by Extreme Abstraction
Orit Edelstein
Matan Danos
Fady Copty
IBM Research - Haifa
Haifa, Israel
PI:EMAIL
Dov Murik
IBM Research - Haifa
Haifa, Israel
PI:EMAIL
IBM Research - Haifa
Haifa, Israel
PI:EMAIL
Cindy Eisner
IBM Research - Haifa
Haifa, Israel
PI:EMAIL
IBM Research - Haifa
Haifa, Israel
PI:EMAIL
Benjamin Zeltser
IBM Research - Haifa
Haifa, Israel
PI:EMAIL
ABSTRACT
Modern malware applies a rich arsenal of evasion techniques to
render dynamic analysis ineective. In turn, dynamic analysis tools
take great pains to hide themselves from malware; typically this
entails trying to be as faithful as possible to the behavior of a
real run. We present a novel approach to malware analysis that
turns this idea on its head, using an extreme abstraction of the
operating system that intentionally strays from real behavior. The
key insight is that the presence of malicious behavior is sucient
evidence of malicious intent, even if the path taken is not one that
could occur during a real run of the sample. By exploring multiple
paths in a system that only approximates the behavior of a real
system, we can discover behavior that would often be hard to elicit
otherwise. We aggregate features from multiple paths and use a
funnel-like conguration of machine learning classiers to achieve
high accuracy without incurring too much of a performance penalty.
We describe our system, TAMALES (The Abstract Malware Analysis
LEarning System), in detail and present machine learning results
using a 330K sample set showing an FPR (False Positive Rate) of
0.10% with a TPR (True Positive Rate) of 99.11%, demonstrating that
extreme abstraction can be extraordinarily eective in providing
data that allows a classier to accurately detect malware.
CCS CONCEPTS
• Security and privacy → Malware and its mitigation;
KEYWORDS
Malware, Analysis, Detection, Classication
ACM Reference Format:
Fady Copty, Matan Danos, Orit Edelstein, Cindy Eisner, Dov Murik, and Ben-
jamin Zeltser. 2018. Accurate Malware Detection by Extreme Abstraction.
In 2018 Annual Computer Security Applications Conference (ACSAC ’18), De-
cember 3–7, 2018, San Juan, PR, USA. ACM, New York, NY, USA, 11 pages.
https://doi.org/10.1145/3274694.3274700
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for prot or commercial advantage and that copies bear this notice and the full citation
on the rst page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior specic permission
and/or a fee. Request permissions from permissions@acm.org.
ACSAC ’18, December 3–7, 2018, San Juan, PR, USA
© 2018 Copyright held by the owner/author(s). Publication rights licensed to the
Association for Computing Machinery.
ACM ISBN 978-1-4503-6569-7/18/12...$15.00
https://doi.org/10.1145/3274694.3274700
1 INTRODUCTION
Malicious software, or malware, is software used to steal money or
credentials, to conduct industrial or political espionage, to bring
about physical or economic harm, or to perform other malicious
actions not authorized by the owner of the hardware on which it
runs. Detection of malware is important in order to protect users
from malicious actors, while at the same time not raising too many
false alarms that intrude on productive work or play. A malware
detection system attempts to classify unknown software into the
categories of malicious or benign, with a high degree of accuracy.
Such a task is far from trivial, and has become more dicult in
recent years with the emergence of malware-as-a-service providers,
who give even beginners access to sophisticated obfuscation and
dissemination techniques.
Much of the diculty of malware analysis stems from tech-
niques used to make life dicult for humans and tools that try to
understand a malware sample. Obfuscation techniques, for example
self-modifying code, severely limit the eectiveness of static anal-
ysis [19]. As an example, a GozNym sample1 creates a suspended
remote process, writes a trivial innite loop at its entry point and
calls NtResumeThread to start it running. Later, the main process
calls NtSuspendThread to suspend the remote process, and then
calls NtWriteVirtualMemory to overwrite seven bytes with a jump
to address 0x47e0000, an address that previously pointed to dead
code and so would be missed by many static tools. The seven bytes
of code before and after overwriting the innite loop are shown in
Figure 1.
While such tricks do not in general confuse a dynamic tool,
there are many techniques that can cause problems for dynamic
analysis. For example, a sample might try to detect that it is run-
ning under a debugger or being monitored in some way, and if
so, change its behavior from malicious to benign. Some examples
are a Themida packed sample2 that calls RegQueryValueEx look-
ing for the value of DriverDesc, because the value returned can
indicate that the sample is running under a VMWare virtual ma-
chine, and another sample3 that looks for Kaspersky products by
calling RegOpenKey with key HKEY_LOCAL_MACHINE and subkey
SOFTWARE\KasperskyLab.
1MD5: 8ac9360cd72e709a9a096a5971d370
2MD5: 97a2b7ad321c0157294dc54baa362581
3MD5: a7acd31081aae40a21ee2e12aae3372f
101
ACSAC ’18, December 3–7, 2018, San Juan, PR, USA
F. Copty et al.
0x100178c: eb fe
0x100178e: fe
0x100178f: ff ff
0x1001791: 6a 5c
jmp 0x100178c
--
--
push 0x5c
(a) A trivial innite loop
0x100178c: b8 00 00 7e 04
0x1001791: ff e0
mov eax, 0x47e0000
jmp eax
(b) Loop after being overwritten
Figure 1: Obfuscation by overwriting seven bytes
0x4017c0:
0x4017c3:
0x4017c5:
0x4017c7:
0x4017c8:
0x4017ce:
mov esi, dword ptr [ebp-0x26]
mov esi, dword ptr [esi]
xor esi, edi
inc edi
cmp esi, 0x90909090
jne 0x4017c0
Figure 2: A long delay loop
Another way to hinder dynamic analysis is to execute the ma-
licious payload only after a relatively long delay, in the reason-
able hope that analysis is run with a timeout. An example4 is the
loop shown in Figure 2. The code reads the same value repeatedly
into register esi (note that there are no writes to memory in the
loop), xor’s the result with register edi, and waits until the result is
0x90909090 before exiting the loop. Upon entering the loop for the
rst time, the value of edi is 0, and the value it needs to exit the
loop is 0x18c = 33554316. So this loop performs 33554316 ⇥ 6 ⇡
200M superuous operations before continuing on to its malicious
payload, which is achieved by injecting a thread into explorer.exe
using NtQueueApcThread. While this delay is negligible in a real
run, it is enough to cause a timeout in many tools, which typically
run signicantly slower than a real processor.
Other examples include performing malicious behavior only if
the date is in a particular range, so that it might initially be labeled
benign and can proliferate freely, or only if mouse movement or
keyboard activity is detected, indicating that the system probably
has a real live user, and thus is not an automated system for mal-
ware detection. We use the term anti-research to describe these
techniques, and we use the term anti-anti-research to describe ways
in which we deal with them.
In this paper we describe TAMALES (The Abstract Malware Anal-
ysis LEarning System), a malware detection tool based on dynamic
analysis. Dynamic malware analysis is traditionally performed by
running a sample on a host system, suitably instrumented to detect
interesting behaviors, and suitably isolated so as to prevent infec-
tion of the user’s environment. Such systems typically try to be as
faithful to a real system as possible [16] in the belief that doing so is
necessary to elicit malicious behavior from sophisticated malware.
TAMALES takes the opposite approach, intentionally using an ex-
tremely loose approximation to a real system. By exploring multiple
4MD5: 3c86d72b6a2b2594a8b063a8f4957da9
102
paths in the loose approximation, we end up with a set of behaviors
that feed a machine learning classier, resulting in a solution that
turns out to be quite eective in detecting malware. The key insight
is that the presence of malicious behavior is sucient evidence of
malicious intent, even if, due to our approximation, the path we
took to the malicious behavior might not be one that could actually
occur during a run of the sample.
Our contributions are:
• We show that extreme abstraction can be an eective tech-
nique for malware analysis.
• We describe in detail the architecture of TAMALES, a mal-
ware detection tool in which the analysis component and the
classier are equally important partners in an end-to-end
solution.
• We explain the manner in which TAMALES aggregates data
from multiple paths through a sample into a single feature
vector representing the sample.
• We introduce a funnel-based approach to malware classica-
tion in which easily classied samples are classied quickly,
and a decreasing set of samples undergo increasingly inten-
sive analyses.
• We present machine learning results for a 330K sample set
(training set size 230K, test set size 100K) showing an FPR
(False Positive Rate) of 0.10% with a TPR (True Positive Rate)
of 99.11% and we provide experimental evidence showing
that we are learning more than just packed/unpacked or
obfuscated/unobfuscated code, and that extreme abstraction
can be useful for family classication as well.
2 AN EXTREMELY ABSTRACT OS
An approximation of a system S is a system S0 that behaves simi-
larly to but not exactly the same as S. An over-approximation of
S is a system So that has more behaviors than S, while an under-
approximation is a system Su that has less behaviors. Approxi-
mations are a useful tool in verication, for example hunting for
vulnerabilities, because proving that an over-approximation So of
S has no bad behaviors implies that S has none as well. Conversely,
a bad behavior in an under-approximation Su of S is proof that it
exists in S as well.
TAMALES uses an extremely abstract operating system the be-
havior of which is very far from that of a real system, yet which
turns out to be quite eective in identifying behaviors that allow a
machine learning classier to distinguish malicious samples from
benign ones. The key insight is that in contrast to verication, in
which we are interested only in behaviors that teach us something
about the exact behavior of the original system S, in malware analy-
sis it is also interesting to see malicious behaviors of the abstraction
S0 that do not exist in S. For example, consider the tiny system
shown in Figure 3. A reported vulnerability of tiny system S show-
ing the behavior a ! x ! c ! z would not be accepted as a real
vulnerability, since this behavior does not exist in tiny system S (the
real system does not have a path from x ! c nor one from c ! z).
However, if tiny system S is suspected malware and z is malicious
behavior (say, encrypt all les and put up a ransom note), then the
discovery of behavior z itself is a sucient indication of malicious
intent, whether or not the path to it is real. TAMALES exploits this
Accurate Malware Detection by Extreme Abstraction
ACSAC ’18, December 3–7, 2018, San Juan, PR, USA
Figure 3: A tiny system S
Figure 4: An extremely abstract operating system
asymmetry between bug hunting in intentionally benign code and
behavioral analysis of suspected malicious code by using an S0 that
is neither an under- nor an over-approximation.
The dynamic analysis component of TAMALES is shown graph-
ically in Figure 4. It consists of an x86 emulator, an extremely
abstract operating system representing Windows, and support for
exploration of multiple paths through the system. The x86 emula-
tor is fairly standard, although it is dedicated to malware analysis
in the sense that a small number of instructions are modeled ab-
stractly. For example, the instruction rdtsc returns the processor’s