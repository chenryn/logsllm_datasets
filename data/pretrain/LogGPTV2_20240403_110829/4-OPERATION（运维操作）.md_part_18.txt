local ip = 201.1.2.10 //VPN服务器的IP地址
.. ..
\[root@client \~\]# vim /etc/ppp/options.xl2tpd //认证配置
require-mschap-v2 #去掉注释，强制要求认证
#crtscts //注释或删除该行,不注释启动报错
#lock //注释或删除该行,不住事启动将报错
root@client \~\]# vim /etc/ppp/chap-secrets //修改密码文件
jacob \* 123456 \* //账户名称 服务器标记 密码 客户端IP
### 3）启动服务
\[root@client \~\]# systemctl start xl2tpd
\[root@client \~\]# netstat -ntulp \|grep xl2tpd
udp 0 0 0.0.0.0:1701 0.0.0.0:\* 3580/xl2tpd
### 4）设置路由转发，防火墙
\[root@client \~\]# echo \"1\" \> /proc/sys/net/ipv4/ip_forward
\[root@client \~\]# firewall-cmd \--set-default-zone=trusted
### 5）翻墙设置（非必需操作）
\[root@client \~\]# iptables -t nat -A POSTROUTING -s 192.168.3.0/24 -j
SNAT \--to-source 201.1.2.10
## 步骤二：客户端设置
启动一台Windows虚拟机，将虚拟机网卡桥接到public2，配置IP地址为201.1.2.20。
### 1) 新建网络连接（参考案例2的客户端设置），
输入VPN服务器账户与密码（参考案例2）。
设置VPN连接的属性，预共享密钥是IPSec配置文件中填写的randpass，具体操作如图-7所示。
![image007](media/image42.png){width="6.10625in" height="3.11875in"}
###  设置Windows注册表
（不修改注册表，连接VPN默认会报789错误），具体操作如下：
-   单击\"开始\"，单击\"运行\"，键入\"regedit\"，然后单击\"确定\"
-   找到下面的注册表子项，然后单击它(win8以及以上版本不需要修改,BUG被修复)：
-   HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Services\\Rasman\\Parameters
-   在\"编辑\"菜单上，单击\"新建\"-\>\"DWORD值\"
-   在\"名称\"框中，键入\"ProhibitIpSec\",注意大小写ProhibitIpSec中的IpSec不是L
-   在\"数值数据\"框中，键入\"1\"，然后单击\"确定\"
![](media/image43.png){width="5.402083333333334in"
height="3.5229166666666667in"}
-   退出注册表编辑器，然后重新启动计算机
-   连接VPN并测试网络连通性（参考案例2）。
# 4 案例4：NTP时间同步
4.1 问题
本案例要求搭建一个NTP服务器，为整个网络环境中的所有主机提供时间校准服务，具体要求如下：
部署一台NTP时间服务器
设置时间服务器上层与0.centos.pool.ntp.org同步
设置本地服务器层级数量为10
允许192.168.4.0/24网络的主机同步时间
客户端验证时间是否同步
4.2 方案
准备实验所需的虚拟机环境，实验环境所需要的主机及对应的IP设置列表如表-4所示，正确配置IP地址、主机名称，并且为每台主机配置YUM源。
![table004](media/image44.png){width="2.5027777777777778in"
height="1.238888888888889in"}
![image008](media/image45.png){width="2.890277777777778in"
height="1.9166666666666667in"}
Network Time
Protocol（网络时间协议）采用的是分层设计，如图-9所示，Stratum层的总数限制在15以内（包括15）。
原子时间:国家服务器的
![image009](media/image46.png){width="3.11875in" height="2.7875in"}
## 步骤一：部署NTP服务
### 1）安装软件包
\[root@proxy \~\]# yum -y install chrony
\[root@proxy \~\]# rpm -qc chrony //查看配置文件列表
/etc/chrony.conf
/etc/chrony.keys
.. ..
### 2) 修改配置文件
\[root@proxy \~\]# cat /etc/chrony.conf
.. ..
server 0.centos.pool.ntp.org iburst //server用户客户端指向上层NTP服务器
allow 192.168.4.0/24 //允许那个IP或网络访问NTP
#deny 192.168.4.1 //拒绝那个IP或网络访问NTP
local stratum 10 //设置NTP服务器的层数量
.. ..
### 3) 启动NTP服务
\[root@proxy \~\]# systemctl restart chronyd
\[root@proxy \~\]# systemctl enable chronyd
### 4) 设置防火墙
\[root@proxy \~\]# firewall-cmd \--set-default-zone=trusted
## 步骤二：配置客户端
### 1）安装软件包
\[root@client \~\]# yum -y install chrony
### 2) 修改配置文件
\[root@client \~\]# vim /etc/chrony.conf
server 192.168.4.5 iburst //设置与哪台服务器同步数据
//iburst参数设置重启服务后尽快同步时间
### 3) 将客户端时间修改为错误的时间
\[root@client \~\]# date -s \"hour:minute\" //调整时间（小时：分钟）
\[root@client \~\]# date //查看修改后的时间
### 4) 重启chrony与服务器同步时间
\[root@client \~\]# systemctl restart chronyd
### 5) 确认时间是否已经同步
\[root@client \~\]# date //多执行几次查看结果
# 5 案例5：pssh远程套件工具
先得有ssh,,pssh用Python写的
5.1 问题
本案例要求使用pssh套件工具并发远程其他主机，具体要求如下：
-   使用密码批量、多并发远程其他主机
-   使用密钥批量、多并发远程其他主机
-   批量、多并发拷贝数据到其他主机
-   批量、多并发从其他主机下载数据到本机
-   批量、多并发杀死其他主机的进程
5.2 方案
准备实验所需的虚拟机环境，实验环境所需要的主机及对应的IP设置列表如表-5所示，正确配置IP地址、主机名称，并且为每台主机配置YUM源。
![table005](media/image47.png){width="4.750694444444444in"
height="1.4069444444444446in"}
安装pssh后会提供如下命令：
/usr/bin/pnuke
/usr/bin/prsync
/usr/bin/pscp.pssh
/usr/bin/pslurp
/usr/bin/pssh
## 步骤一：准备工作
### 1）安装软件包
\[root@proxy \~\]# rpm -ivh pssh-2.3.1-5.el7.noarch.rpm
### 2) 修改/etc/hosts本地解析文件
\[root@proxy \~\]# vim /etc/hosts
... ...
192.168.2.100 host1
192.168.2.200 host2
192.168.4.10 host3
... ...
### 3) 创建主机列表文件
\[root@proxy \~\]# vim /root/host.txt //每行一个用户名、IP或域名
... ...
root@host1
host2
host3
... ...
## 步骤二：使用密码批量、多并发远程其他主机
### 1）语法格式
\[root@proxy \~\]# man pssh //通过man帮助查看工具选项的作用
pssh提供并发远程连接功能
-A 使用密码远程其他主机（默认使用密钥）
-i 将输出显示在屏幕
-H 设置需要连接的主机
-h 设置主机列表文件
-p 设置并发数量
-t 设置超时时间
-o dir 设置标准输出信息保存的目录
-e dir 设置错误输出信息保存的目录
-x 传递参数给ssh
### 2) 使用密码远程多台主机执行命令，屏幕显示标准和错误输出信息
\[root@proxy \~\]# pssh -i -A -H \'host1 host2 host3\' -x \'-o
StrictHostKeyChecking=no\' echo hello
Warning: do not enter your password if anyone else has superuser
privileges or access to your account.
Password:
\[1\] 14:18:09 \[SUCCESS\] host3
hello
Stderr: Warning: Permanently added \'host3,192.168.4.10\' (ECDSA) to the
list of known hosts.
\[2\] 14:18:09 \[SUCCESS\] host2
hello
Stderr: Warning: Permanently added \'host2,192.168.2.200\' (ECDSA) to
the list of known hosts.
\[3\] 14:18:09 \[SUCCESS\] host1
hello
Stderr: Warning: Permanently added \'host1,192.168.2.100\' (ECDSA) to
the list of known hosts.
### 3) 使用密码远程多台主机执行命令不显示标准和错误输出信息，通过读取host.txt读取主机信息(第一次远程连接必须先执行上一步)
\[root@proxy \~\]# pssh -A -h host.txt echo hello
Warning: do not enter your password if anyone else has superuser
privileges or access to your account.
Password:
\[1\] 14:18:21 \[SUCCESS\] host2
\[2\] 14:18:21 \[SUCCESS\] root@host1
\[3\] 14:18:21 \[SUCCESS\] host3
## 步骤三：使用密钥批量、多并发远程其他主机
### 1）生成密钥并发送密钥到其他主机(无密码验证远程)
\[root@proxy \~\]# ssh-keygen -N \' \' -f /root/.ssh/id_rsa
//非交互生成密钥文件
-N 设置密码 -f 指定秘钥路径
Generating public/private rsa key pair.
Your identification has been saved in /root/.ssh/id_rsa.
Your public key has been saved in /root/.ssh/id_rsa.pub.
The key fingerprint is:
SHA256:Shxehw6Cn0oxlXbSB9FgxX8vtkABb1fzm3oRkcrdeLw root@proxy
The key\'s randomart image is:
+\-\--\[RSA 2048\]\-\-\--+
\| .o=Bo. o..\|
\| o+.o +o. . +.\|
\| +..oo.o.+.o o+o\|
\| + = = oo..o..B\|
\| . o + S. . . =.\|
\| . . . . . o oE.\|
\| . . o + . \|
\| . . \|
\| \|
+\-\-\--\[SHA256\]\-\-\-\--+
\[root@proxy \~\]# ssh-copy-id host1 #发送秘钥至host1
/usr/bin/ssh-copy-id: INFO: Source of key(s) to be installed:
\"/root/.ssh/id_rsa.pub\"
/usr/bin/ssh-copy-id: INFO: attempting to log in with the new key(s), to
filter out any that are already installed
/usr/bin/ssh-copy-id: INFO: 1 key(s) remain to be installed \-- if you
are prompted now it is to install the new keys
root@host1\'s password: #输入root 密码
Number of key(s) added: 1
Now try logging into the machine, with: \"ssh \'host1\'\"
and check to make sure that only the key(s) you wanted were added.
\[root@proxy \~\]# ssh-copy-id host2
\[root@proxy \~\]# ssh-copy-id host3
### 2) 使用密钥远程其他主机
\[root@proxy \~\]# pssh -h host.txt echo hello
### 3) 使用密钥远程其他主机，将标准输出信息写入到/tmp目录
\[root@proxy \~\]# pssh -h host.txt -o /tmp/ echo hello
## 步骤四：批量、多并发拷贝数据到其他主机
### 1）语法格式
\[root@proxy \~\]# man pscp.pssh //通过man帮助查看工具选项的作用
pscp.pssh提供并发拷贝文件功能
-r 递归拷贝目录
其他选项基本与pssh一致
### 2)将本地的/etc/hosts拷贝到远程主机的/tmp目录下
\[root@proxy \~\]# pscp.pssh -h host.txt /etc/hosts / tmp
### 3)递归将本地的/etc目录拷贝到远程主机的/tmp目录下
\[root@proxy \~\]# pscp.pssh -r -h host.txt /etc /tmp
## 步骤五：批量、多并发从其他主机下载数据到本机
### 1）语法格式
\[root@proxy \~\]# man pslurp //通过man帮助查看工具选项的作用
pslurp提供远程下载功能
选项与pscp.pssh基本一致
### 2)将远程主机的/etc/passwd，拷贝到当前目录下，存放在对应IP下的pass文件中
\[root@proxy \~\]# pslurp -h host.txt /etc/passwd /pass
注意：最后的pass是文件名
### 3)将远程主机的/etc/passwd目录，拷贝到media下，存放在对应IP下的pass文件
\[root@proxy \~\]# pslurp -h host.txt -L /media /etc/passwd /pas
## 步骤六：批量、多并发杀死其他主机的进程
### 1）语法格式
\[root@proxy \~\]# man pnuke //通过man帮助查看工具选项的作用
pnuke提供远程杀死进程的功能
选项与pssh基本一致
### 2)将远程主机上的sleep进程杀死
\[root@proxy \~\]# pnuke -h host.txt sleep
### 3)将远程主机上的test相关脚本都杀死（如：test1,testtt,test2等等）
\[root@proxy \~\]# pnuke -h host.txt test
### 4)将远程主机上的test.sh脚本杀死
\[root@proxy \~\]# pnuke -h host.txt test.sh