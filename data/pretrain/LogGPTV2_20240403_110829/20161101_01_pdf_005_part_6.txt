 LOCKTAG_VIRTUALTRANSACTION, /* virtual transaction (ditto) */
 /* ID info for a virtual transaction is its VirtualTransactionId */
 LOCKTAG_OBJECT, /* non-relation database object */
 /* ID info for an object is DB OID + CLASS OID + OBJECT OID + SUBID */
 /*
 * Note: object ID has same representation as in pg_depend and
 * pg_description, but notice that we are constraining SUBID to 16 bits.
 * Also, we use DB OID = 0 for shared objects such as tablespaces.
 */
 LOCKTAG_USERLOCK, /* reserved for old contrib/userlock code */
 LOCKTAG_ADVISORY /* advisory user locks */
 } LockTagType;
PostgreSQL锁的介绍
 锁模式1(标准锁和用户锁方法支持的模式都在这里)
 /*
 * These are the valid values of type LOCKMODE for all the standard lock
 * methods (both DEFAULT and USER).
 */
 #define NoLock 0 /* NoLock is not a lock mode, but a flag value meaning "don't get a lock" */
 #define AccessShareLock 1 /* SELECT */
 #define RowShareLock 2 /* SELECT FOR UPDATE/FOR SHARE */
 #define RowExclusiveLock 3 /* INSERT, UPDATE, DELETE */
 #define ShareUpdateExclusiveLock 4 /* VACUUM (non-FULL),ANALYZE, CREATE
 * INDEX CONCURRENTLY */
 #define ShareLock 5 /* CREATE INDEX (WITHOUT CONCURRENTLY) */
 #define ShareRowExclusiveLock 6 /* like EXCLUSIVE MODE, but allows ROW
 * SHARE */
 #define ExclusiveLock 7 /* blocks ROW SHARE/SELECT...FOR
 * UPDATE */
 #define AccessExclusiveLock 8 /* ALTER TABLE, DROP TABLE, VACUUM
 * FULL, and unqualified LOCK TABLE */
PostgreSQL锁的介绍
 锁模式冲突表
PostgreSQL锁的介绍
 行锁模式
 src/include/access/heapam.h
 /*
 * Possible lock modes for a tuple.
 */
 typedef enum LockTupleMode
 {
 /* SELECT FOR KEY SHARE */
 LockTupleKeyShare,
 /* SELECT FOR SHARE */
 LockTupleShare,
 /* SELECT FOR NO KEY UPDATE, and UPDATEs that don't modify key columns */
 LockTupleNoKeyExclusive,
 /* SELECT FOR UPDATE, UPDATEs that modify key columns, and DELETE */
 LockTupleExclusive
 } LockTupleMode;
PostgreSQL锁的介绍
 行锁模式冲突表
 src/backend/access/heap/README.tuplock
 KEY UPDATE UPDATE SHARE KEY SHARE
 KEY UPDATE conflict conflict conflict conflict
 UPDATE conflict conflict conflict
 SHARE conflict conflict
 KEY SHARE conflict
 例子
 http://blog.163.com/digoal@126/blog/static/16387704020130305109687/
PostgreSQL锁的介绍
 串行锁模式
 SIReadLock
 src/backend/storage/lmgr/README-SSI
 http://www.postgresql.org/docs/9.3/static/transaction-iso.html#XACT-SERIALIZABLE
PostgreSQL锁的介绍
 PostgreSQL获取锁的方法
 /*
 * These macros define how we map logical IDs of lockable objects into
 * the physical fields of LOCKTAG. Use these to set up LOCKTAG values,
 * rather than accessing the fields directly. Note multiple eval of target!
 */
 #define SET_LOCKTAG_RELATION(locktag,dboid,reloid) \
 ((locktag).locktag_field1 = (dboid), \
 (locktag).locktag_field2 = (reloid), \
 (locktag).locktag_field3 = 0, \
 (locktag).locktag_field4 = 0, \
 (locktag).locktag_type = LOCKTAG_RELATION, \
 (locktag).locktag_lockmethodid = DEFAULT_LOCKMETHOD)
PostgreSQL锁的介绍
 #define SET_LOCKTAG_RELATION_EXTEND(locktag,dboid,reloid) \
 ((locktag).locktag_field1 = (dboid), \
 (locktag).locktag_field2 = (reloid), \
 (locktag).locktag_field3 = 0, \
 (locktag).locktag_field4 = 0, \
 (locktag).locktag_type = LOCKTAG_RELATION_EXTEND, \
 (locktag).locktag_lockmethodid = DEFAULT_LOCKMETHOD)
 #define SET_LOCKTAG_PAGE(locktag,dboid,reloid,blocknum) \
 ((locktag).locktag_field1 = (dboid), \
 (locktag).locktag_field2 = (reloid), \
 (locktag).locktag_field3 = (blocknum), \
 (locktag).locktag_field4 = 0, \
 (locktag).locktag_type = LOCKTAG_PAGE, \
 (locktag).locktag_lockmethodid = DEFAULT_LOCKMETHOD)
PostgreSQL锁的介绍
 #define SET_LOCKTAG_TUPLE(locktag,dboid,reloid,blocknum,offnum) \
 ((locktag).locktag_field1 = (dboid), \
 (locktag).locktag_field2 = (reloid), \
 (locktag).locktag_field3 = (blocknum), \
 (locktag).locktag_field4 = (offnum), \
 (locktag).locktag_type = LOCKTAG_TUPLE, \
 (locktag).locktag_lockmethodid = DEFAULT_LOCKMETHOD)
 #define SET_LOCKTAG_TRANSACTION(locktag,xid) \
 ((locktag).locktag_field1 = (xid), \
 (locktag).locktag_field2 = 0, \
 (locktag).locktag_field3 = 0, \
 (locktag).locktag_field4 = 0, \
 (locktag).locktag_type = LOCKTAG_TRANSACTION, \
 (locktag).locktag_lockmethodid = DEFAULT_LOCKMETHOD)
PostgreSQL锁的介绍
 #define SET_LOCKTAG_VIRTUALTRANSACTION(locktag,vxid) \
 ((locktag).locktag_field1 = (vxid).backendId, \
 (locktag).locktag_field2 = (vxid).localTransactionId, \
 (locktag).locktag_field3 = 0, \
 (locktag).locktag_field4 = 0, \
 (locktag).locktag_type = LOCKTAG_VIRTUALTRANSACTION, \
 (locktag).locktag_lockmethodid = DEFAULT_LOCKMETHOD)
 #define SET_LOCKTAG_OBJECT(locktag,dboid,classoid,objoid,objsubid) \
 ((locktag).locktag_field1 = (dboid), \
 (locktag).locktag_field2 = (classoid), \
 (locktag).locktag_field3 = (objoid), \
 (locktag).locktag_field4 = (objsubid), \
 (locktag).locktag_type = LOCKTAG_OBJECT, \
 (locktag).locktag_lockmethodid = DEFAULT_LOCKMETHOD)
PostgreSQL锁的介绍
 #define SET_LOCKTAG_ADVISORY(locktag,id1,id2,id3,id4) \
 ((locktag).locktag_field1 = (id1), \
 (locktag).locktag_field2 = (id2), \
 (locktag).locktag_field3 = (id3), \
 (locktag).locktag_field4 = (id4), \
 (locktag).locktag_type = LOCKTAG_ADVISORY, \
 (locktag).locktag_lockmethodid = USER_LOCKMETHOD)
PostgreSQL advisory锁介绍
 repeatable read及以上级别长事务带来的问题举例
 会话A :
 digoal=# begin isolation level repeatable read;
 BEGIN
 digoal=# select 1;
 ?column?
 ----------
 1
 (1 row)
 假设这是个长事务.
PostgreSQL advisory锁介绍
 会话B :
 digoal=# delete from iso_test;
 DELETE 10000
 digoal=# vacuum verbose iso_test ;
 INFO: vacuuming "postgres.iso_test"
 INFO: "iso_test": found 0 removable, 10000 nonremovable row versions in 55 out of 55 pages
 DETAIL: 10000 dead row versions cannot be removed yet.
 There were 0 unused item pointers.
 0 pages are entirely empty.
 CPU 0.00s/0.00u sec elapsed 0.00 sec.
 INFO: vacuuming "pg_toast.pg_toast_93022"
 INFO: index "pg_toast_93022_index" now contains 0 row versions in 1 pages
PostgreSQL advisory锁介绍
 DETAIL: 0 index row versions were removed.
 0 index pages have been deleted, 0 are currently reusable.
 CPU 0.00s/0.00u sec elapsed 0.00 sec.
 INFO: "pg_toast_93022": found 0 removable, 0 nonremovable row versions in 0 out of 0 pages
 DETAIL: 0 dead row versions cannot be removed yet.
 There were 0 unused item pointers.
 0 pages are entirely empty.
 CPU 0.00s/0.00u sec elapsed 0.00 sec.
 VACUUM
 会话A结束后, 这部分数据才可以被回收掉
 End;
 digoal=# vacuum verbose iso_test ;
 INFO: vacuuming "postgres.iso_test"
 INFO: "iso_test": removed 10000 row versions in 55 pages
 INFO: "iso_test": found 10000 removable, 0 nonremovable row versions in 55 out of 55 pages
PostgreSQL advisory锁介绍
 DETAIL: 0 dead row versions cannot be removed yet.
 There were 0 unused item pointers.
 0 pages are entirely empty.
 CPU 0.00s/0.00u sec elapsed 0.00 sec.
 INFO: "iso_test": truncated 55 to 0 pages
 DETAIL: CPU 0.00s/0.00u sec elapsed 0.00 sec.
 INFO: vacuuming "pg_toast.pg_toast_93022"
 INFO: index "pg_toast_93022_index" now contains 0 row versions in 1 pages
 DETAIL: 0 index row versions were removed.
 0 index pages have been deleted, 0 are currently reusable.
 CPU 0.00s/0.00u sec elapsed 0.00 sec.
 INFO: "pg_toast_93022": found 0 removable, 0 nonremovable row versions in 0 out of 0 pages
 DETAIL: 0 dead row versions cannot be removed yet.
 There were 0 unused item pointers.
 0 pages are entirely empty.
 CPU 0.00s/0.00u sec elapsed 0.00 sec.
 VACUUM
PostgreSQL advisory锁介绍
 advisory会话锁解决的问题
 http://blog.163.com/digoal@126/blog/static/163877040201172492217830/
 http://blog.163.com/digoal@126/blog/static/1638770402013518111043463/
 advisory lock的应用场景举例(应用控制的锁)：
 比如数据库里面存储了文件和ID的对应关系，应用程序需要长时间得获得一个锁，然后对文件进行修改，再释放锁。
 测试数据:
 digoal=> create table tbl_file_info (id int primary key,file_path text);
 NOTICE: CREATE TABLE / PRIMARY KEY will create implicit index "tbl_file_info_pkey" for table "tbl_file_info"
 CREATE TABLE
 digoal=> insert into tbl_file_info values (1,'/home/postgres/advisory_lock_1.txt');
 INSERT 0 1
 digoal=> insert into tbl_file_info values (2,'/home/postgres/advisory_lock_2.txt');
 INSERT 0 1
 digoal=> insert into tbl_file_info values (3,'/home/postgres/advisory_lock_3.txt');
 INSERT 0 1
PostgreSQL advisory锁介绍
 SESSION A:
 digoal=> select pg_advisory_lock(id),file_path from tbl_file_info where id=1;
 pg_advisory_lock | file_path
 ------------------+------------------------------------
 | /home/postgres/advisory_lock_1.txt
 (1 row)
 应用程序对/home/postgres/advisory_lock_1.txt文件进行编辑之后，再释放这个advisory锁。
 SESSION B:
 当SESSIONA在编辑/home/postgres/advisory_lock_1.txt这个文件的时候，无法获得这个锁，所以可以确保不会同时编辑这个文件。
PostgreSQL deadlock检测和规避
 SESSION A:
 Lock tuple 1;
 SESSION B:
 Lock tuple 2;
 SESSION A:
 Lock tuple 1 waiting;