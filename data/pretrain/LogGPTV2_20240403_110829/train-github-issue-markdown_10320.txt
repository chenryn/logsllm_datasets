I would like to extend the `jax.checkpoint` aprroach to implement binomial
checkpointing for computing the `vjp` of a time stepping loop the performs
computation in step():
      def timestep(A,N):
        for i in range(N):
          A = step(A,i)
The`remat` approach, as I understand it, generates a version of a function
that stores inputs of the function and none of the linearization points. For
the `vjp` calculation, it reruns the function calculation thereby regenerating
the intermediate linearization points.
If I use `remat` for `step(A,i), then for each `i`, the arguments to
`step(A,i)`will be stored. This is not what I want, because in my test
case,`A` is very large.
An alternate scheme such as binomial checkpointing can use some criterion to
decide for which `i` to store the inputs instead of storing each them for each
`i`. This allows for different tradeoffs between storage and recomputation. To
implement such a checkpointing scheme, the following actions will need to be
performed:
  1. Store argument of step(A,i)
  2. Restore arguments of step(Ai,)
  3. Run step(i) without storing/restoring arguments based on step(A,i-1)â€™s completion.
  4. Compute jvp for step(i) assuming that output of jvp(A,i+1) and is available
Does this seem feasible to implement on top of the existing remat approach?  
Are there any suggestions on how to go about it?