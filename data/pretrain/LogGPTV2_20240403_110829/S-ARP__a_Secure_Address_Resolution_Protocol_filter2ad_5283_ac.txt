possible to estimate the impact of (S-)ARP in the execu-
tion time of ICMP. We identiﬁed the performance of the the
baseline case when the system ran the original ARP. The av-
erage delay of the ﬁrst echo reply, i.e., the one that requires
Ethernet address resolution, is 0.705 msec, with and aver-
age standard deviation equal to 0.049. All the experiments
were performed with “cold” caches, i.e., after ﬂushing their
content.
Two sets of experiments were performed. In the ﬁrst sce-
nario the two host have never communicated before, there-
fore they do not have each other’s public keys and request
them to the AKD. Such a scenario is burdened with the
highest overhead, but it occurs only the ﬁrst time a new
MAC address is needed, since keys are stored in cache af-
ter the ﬁrst request. All subsequent requests will ﬁnd the
keys in cache, thus speeding up the execution. This is the
second scenario considered, and it characterizes the aver-
age operating case of S-ARP. Measurements in this case in-
clude only the time required by signature veriﬁcations and
creation.
5.2.1. Cold Key Caches When two hosts exchang-
ing ICMP echo request/reply do not have each other’s key
in their local cache, they have to request them to the AKD.
In this case the authentication process requires 4 signa-
ture veriﬁcations and as many signature generations, which
are irrelevant compared to the former if the exponential fac-
tors have been computed separately during an idle period,
as shown in Table 1.
Table 2 summarizes the results for
the measured
roundtrip delays of ICMP echo requests for 512 bits and
1024 bits keys for 20 repetitions as yielded by the ping
command5 Although in both case the time is non negli-
gible, we should remember that it occurs only the very
ﬁrst time, so it does not hurt performance in the aver-
age case. As the table shows, the roundtrip delay increases
more than linearly as the key size increases, thus the im-
portance to choose an appropriate size for the keys. For
the sake of comparison, the table also reports the re-
sults of the same test performed with the classic ARP
protocol. As expected, the cost of security is paid in per-
formance degradation. However, such a cost is acceptable
when the frequency of ARP trafﬁc is taken into considera-
tion.
key len.
512
1024
classic ARP
min max mean
17.86
17.7
48.0
48.49
0.70
0.6
18.1
48.8
0.8
st. dev.
0.12
0.22
0.05
Table 2. Roundtrip delay in µsec for ICMP
echo request messages with cold key caches
for different key lengths (in bit).
5.2.2. Cached Keys In this case there are two fewer ver-
iﬁcation operations, i.e., those on the AKD messages, so
we expect it to be less time consuming. The public key of
the two hosts are already in the respective key caches. This
is the most common scenario. Two hosts have exchanged
their keys in a previous communication, so when they com-
municate again they only need to verify each other’s signa-
tures on the S-ARP replies. The AKD is not contacted in
this case.
Table 3 summarizes the results for
the measured
roundtrip delays of ICMP echo requests for 512 bits and
1024 bits keys for 20 repetitions as yielded by the ping
command. As the table shows, the time is almost half the
time measured with cold caches, thus showing an accept-
able overhead.
5 Caches are ﬂushed after each execution of the ping command, in or-
der to make sure they are cold on both machines.
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:37:36 UTC from IEEE Xplore.  Restrictions apply. 
key len.
512 bit
1024 bit
classic ARP
min max mean
8.96
8.8
24.00
23.6
0.4
0.46
9.3
24.4
0.5
std. dev.
0.13
0.20
0.05
Table 3. Roundtrip delay in µsec for ICMP
echo request messages with cached keys for
different key lengths.
6. Related Work
6.1. Defenses Against ARP Poisoning
A possible defence against ARP poisoning is using static
entries in the ARP cache. Static entries cannot be updated
by ARP replies and can be changed only manually by the
system administrator. Such an approach however is not vi-
able for networks with hundreds of hosts because those en-
tries must be inserted manually on each host. Automating
such a solution via a network script is not recommendable
since it relies on higher levels of the ISO/OSI stack. Rely-
ing on higher levels when the data link layer has not been
secured yet may be dangerous because the protocol used to
exchange the list can be hijacked using ARP poisoning be-
fore the list is distributed. Even worse, some operating sys-
tem (such as Windows) may accept dynamic updates even
if an entry is set as static, thus making static Ethernet rout-
ing useless [19].
“Port security” is another mechanism for tackling the
problem. It is a feature present in many modern switches
that allows the switch to recognize only one MAC address
on a physical port. This is often suggested as an effective
protection against ARP poisoning, but it is not. If the at-
tacker does not spoof its own MAC address, it can poison
the two victims’ cache without letting the switch interfere
with the poisoning process.
Besides static cache entries and port security, the only
other defense that will not modify ARP behaviour is de-
tection. IDS and personal ﬁrewalls usually notice the ARP
switch and warn the user that the entry in the cache is
changed. As it often happens in the computer security do-
main, the decision is left to the user and his/her awareness.
Given the particularly sophisticated level of operation in
this case, we doubt the average user will take the proper ac-
tions.
Some kernel patches exist that try to defend against ARP
poisoning. “Anticap” [2] does not update the ARP cache
when an ARP reply carries a different MAC address for a
given IP from then one already in cache and will issue a ker-
nel alert that someone is trying to poison the ARP cache.
Such a solution is against ARP deﬁnition itself, since it
drops legal gratuitous ARP. “Antidote” [16] is more sophis-
ticated. When a new ARP replies announcing a change in a
 pair is received, it tries to discover if the pre-
vious MAC address is still alive. If the previous MAC ad-
dress replies to the request, the update is rejected and the
new MAC address is added to a list of “banned” addresses.
In [17] a solution that implements two distinct queues, for
requested addresses and received replies, is proposed. The
system discards a reply if the corresponding request was
never sent, i.e., is not in the queue, and in the received queue
an IP address associated with a different Ethernet address is
already present.
All these solutions have the same problem. If the ma-
licious ARP reply is sent before the real one is put in the
cache, for a real request, the victim caches the wrong re-
ply and discards the real one. A race condition exists be-
tween the attacker and the victim. When the ﬁrst ARP re-
quest is broadcast, both the victim and the attacker receive
the message. The ﬁrst one who replies will take over the
other forever. Furthermore, the attacker could also spoof
an ICMP echo request message and immediately send af-
ter it a false ARP reply. When the victim receives the ICMP
echo request, it performs an ARP request, but the false re-
ply is already in its queue of received packet, so it accepts it
a the valid one. If Antidote is installed, a host can spoof the
sender MAC address and force a host to ban another host.
Solutions such as a centralized ARP cache or a DHCP
server broadcasting ARP information, as they are deployed
in IP over ATM networks [8], have not been considered as
the attacker could spoof the source of the broadcast and poi-
son the whole LAN. A digitally signed or MAC-ed broad-
cast packet would not be vulnerable to spooﬁng, yet broad-
casting ARP tables could generate large trafﬁc on the LAN.
Since an entry for each host needs to be broadcast, on large
networks this will generate considerable trafﬁc and every
host would have to store the entire ARP table even if it
might not be needed at the moment. The main problem with
centralized ARP cache is that if a host goes down, the cen-
tral server will not notice the event. Thus, when a host that
wishes to communicate with the one currently down asks
for ARP information to the central server, it will receive the
information even if the host is down. At this point an at-
tacker could impersonate the ofﬂine host using its MAC ad-
dress and receive all the packets sent to it.
6.2. Secure Link Layer
The only kernel patch which assures mutual authentica-
tion between the requester and the replier even on the ﬁrst
message is Secure Link Layer [6]. SLL provides authenti-
cated and encrypted communication between any two hosts
on the same LAN. SLL requires a Certiﬁcation Authority
(CA) to generate SLL certiﬁcates for all legitimate hosts on
the network.
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:37:36 UTC from IEEE Xplore.  Restrictions apply. 
[2] M.
Barnaba.
anticap.
http://cvs.antifork.org/cvsweb.cgi/anticap, 2003.
[3] B. Fleck. Wireless access points and arp poisoning.
http://www.cigitallabs.com/resources/papers/download/arp
poison.pdf.
[4] A. O.
and
Freier,
P. C. Kocher.
The
v3.0.
protocol
http://wp.netscape.com/eng/ssl3/draft302.txt, 1996.
P. Karlton,
socket
secure
layer
[5] A. Householder and B. King. Securing an internet name
[6] F.
server. http://www.cert.org/archive/pdf/dns.pdf, 2002.
layer.
http://www.cs.wustl.edu/∼fhunleth/projects/projects.html.
[7] S. Kent and R. Atkinson. Security architecture for the Inter-
Hunleth.
Secure
link
net Protocol. RFC 2401, 1998.
[8] M. Laubach. Classical IP and ARP over ATM. RFC 1577,
1994.
[9] NIST. Digital signature standard (dss). Technical Report
FIPS PUB 186, National Institute of Standards and Technol-
ogy, http://www.itl.nist.gov/ﬁpspubs/ﬁp186.htm, 1994.
[10] A.
Ornaghi.
S-arp:
a
secure
arp.
http://security.dico.unimi.it/en/doctools/tools.html, 2003.
[11] A. Ornaghi and M. Valleri. A multipurpose sniffer for
switched LANs. http://ettercap.sf.net.
[12] D. C. Plummer. An ethernet address resolution protocol.
[13] D. Song.
RFC 826, 1982.
http://www.monkey.org/∼dugsong/dsniff.
A suite for man in the middle attacks.
[14] W. Stallings. Criptography and Network Security. Prentice
Hall, ISBN 0-13-869017-0, 1998.
[15] R. W. Stevens. TCP/IP Illustrated, vol 1. Addison Wesley,
ISBN 0-201-63346-9, 2001.
[16] I. Teterin. Antidote. http://online.securityfocus.com/archive/
1/299929.
[17] M. V. Tripunitara and P. Dutta. A middleware approach to
asynchronous and backward compatible detection and pre-
vention of arp cache poisoning. In Proc. 15th Annual Com-
puter Security Application Conference (ACSAC), pages 303–
309, 1999.
[18] R. Wagner. Address resolution protocol spooﬁng and man-
in-the-middle attacks. http://rr.sans.org/threats/address.php,
2001.
[19] S. Whalen.
An
introduction
to
arp
spooﬁng.
http://packetstormsecurity.nl/papers/protocols/
intro to arp spooﬁng.pdf, 2001.
[20] T. Ylonen. Ssh: Secure login connections over the internet.
In Proc. of the Sixth Usenix Unix Security Symposium, pages
37–42, 1996.
SLL handles authentication and session key exchange
before any messages are transferred from one host to an-
other. Elliptic curve cryptography algorithms are used for
both operations. SLL deﬁnes three authentication messages
that hosts send each other to perform mutual authentication
and session key exchange. After authentication, the pay-
load data ﬁeld of all Ethernet frames sent between two hosts
is encrypted with Rijndael using a 128-bit key and 128-bit
long blocks.
Such a mechanism is too complex for our intent. Mu-
tual authentication between two hosts is sufﬁcient for avoid-
ing ARP poisoning. Encrypting ARP replies does not yield
any additional security since the association between IP and
MAC addresses should be public. Furthermore, SLL also
maintains all the cryptographic keys in kernel-space. Note
that the amount of memory required could be considerable
in case of class B networks. Since it is not recommended to
use kernel memory with information that could be as well
managed in user space, such as keys, a “light” version of
SSL with no payload encryption would still have a consid-
erable performance impact. Therefore we decide to design
a new protocol that could be implemented in user-space.
7. Conclusions and Future Work
The paper presents a feasible solution to the problem of
ARP poisoning attacks. The cause of ARP poisoning is the
lack of message authentication, so that any host in the LAN
is able to spoof messages pretending to be someone else.
We propose an authentication scheme for ARP replies us-
ing public key cryptography, which extends ARP to S-ARP.
Adding strong authentication to ARP messages resolves the
problem, thus denying any attempt of ARP poisoning.
Future work includes porting S-ARP to other platforms
so as to allow interoperability. Better kernel integration will
be implemented since the upcoming Linux kernel (2.6.0)
will be fully preemptible. Once the implementation of cryp-
tographic routine will be moved to kernel space, even S-
ARP request will be signed and the receiver will cache the
information on the request, thus speeding up the whole au-
thentication process.
When ﬁrewall and gateway appliances will be equipped
with cryptographic co-processors, the implementation of S-
ARP on embedded systems could be considered. Another
issue concerns the elimination of the single point of fail-
ure represented by the AKD.
References
[1] AtStake.com.
Ethernet
frame
leakage.
http://www.atstake.com/research/advisories/2003/a010603-
1.txt, 2003.
information
Etherleak:
padding
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:37:36 UTC from IEEE Xplore.  Restrictions apply.