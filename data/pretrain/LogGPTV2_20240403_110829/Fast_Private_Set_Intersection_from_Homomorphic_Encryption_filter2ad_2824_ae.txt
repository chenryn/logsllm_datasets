16.3
10.3
9.1
15.3
9.9
9.4
7.8
5.1
4.7
3.6
3.4
5.4
2.4
2.2
3.0
300.4
186.7
169.4
161.5
101.0
88.1
149.9
98.0
92.6
77.0
49.3
45.0
35.5
33.0
52.9
22.9
20.7
28.6
Table 4: Communication cost in MB for our protocol; λ = 40, σ = 32, h = 3. 10Gbps network assumes
0.2ms RTT, and the others use 80ms RTT. R → S and S → R denote the communications from receiver to
sender, and from sender to receiver.
evaluate performance for the set sizes Ny ∈ {5535, 11041}, Nx ∈ {216, 220, 224} to maximize the utilization
of ciphertext batching, described in Section 4.1. The sizes for Ny were determined in Section 4.2 to be the
largest that can guarantee a statistical security level of λ ≥ 40. If a direct comparison to the running times
reported in [PSZ16] is desired, the reader can feel free to round down our set sizes Ny to match the sizes
therein.
When comparing the two protocols, we ﬁnd that our communication cost scales much better when the
sender’s set size is greater than 216. For instance, when considering strings of 32 bits, with Ny ≤ 5535 and
Nx = 220, our protocol sends 5.6MB, while the same Nx, Ny parameters applied to [PSZ16] result in 30.4MB
of communication—a 5.4× improvement. Increasing Nx even further to Nx = 224, our protocol requires
just 11.0MB of communication, whereas [PSZ16] requires over 480MB—a 43.7× improvement. Moreover,
continuing to increase the sender’s set size results in an even greater communication beneﬁt.
When computing the intersection of sets of size Ny ≤ 5535 and Nx = 220 in a single-threaded LAN
setting, our protocol requires 8.6 seconds. Evaluating the protocol of [PSZ16] using the same parameters
results in an execution time of 3.1 seconds. While [PSZ16] is faster than our protocol in this particular
setting, it also requires 5.4× more communication, and distributes the computational cost equally between
the parties. That is, each party performs O(Nx + Ny) operations. In contrast, our protocol places very few
requirements on the computational power of the receiver.
Since our protocol achieves a lower communication than [PSZ16] in the asymmetric set sizes setting,
we obtain much better performance as we decrease the network bandwidth. To clearly demonstrate this,
we consider several other network environments that model the WAN setting. In particular, we restrict
the parties to a 100Mbps, 10Mbps, and 1Mbps networks with a 80ms round trip time. In these settings,
our protocol outperforms [PSZ16] with few exceptions. Namely, the single-threaded 100Mbps setting, with
Nx = 224, Ny ≤ 5535, our protocol requires 107.2 seconds, whereas [PSZ16] requires 87.9 seconds. However,
our protocol receives a much greater speedup in the multi-threaded setting, reducing our running time to
36.7 seconds when the sender uses 4 threads. On the other hand, [PSZ16] requires 65.5 seconds for the
same set sizes and with both parties using 4 threads—a nearly 1.8× slowdown compared to our protocol.
As we further decrease the bandwidth, the diﬀerence becomes much more signiﬁcant. In the 1Mbps single-
threaded setting, with Nx = 224, Ny ≤ 5535, our protocol requires 211.1 seconds compared to [PSZ16]
requiring 4080.6 seconds—a 19.3× improvement in running time. When utilizing 4 threads, our running
time decreases to 132.7 seconds, while [PSZ16] requires 4064.3 seconds—a 30.6× improvement.
Parameters Protocol
Comm.
Total time (seconds)
Nx
Ny
224
220
216
Us
11041
[PSZ16]
5535
[KKRT16]
Us
[PSZ16]
[KKRT16]
Us
11041
[PSZ16]
5535
[KKRT16]
Us
[PSZ16]
[KKRT16]
Us
11041
[PSZ16]
5535
[KKRT16]
Us
[PSZ16]
[KKRT16]
20.1, †12.5, ‡11.0 105.2 34.8 107.2 36.7 †120.3 †45.8
449.2 427.3
87.9 65.5
10 Gbps
T = 1
4
100 Mbps
4
1
10 Mbps
1 Mbps
1
4
1
14.0 6.9
7.0 5.6
115.4 40.3 117.8 42.7
88.0 66.4
134.4 59.3
449.5 427.5
40.5 23.3
70.8 — 188.7 — 1269.1 — 12156.7
4
†290.8 †215.1
4084.8 4067.2
—
†211.1 ‡132.7
4080.6 4064.3
40.1 23.1
—
70.4 — 188.3 — 1263.5 — 12153.2
98.3
12.8 5.7
105.4
263.7 262.1
3.3 2.1
—
4.5 — 11.6 — 79.4 — 688.1
48.3
8.6 3.3
53.6
260.0 259.6
3.1 2.0
4.4 — 11.5 — 79.3 — 686.0
—
3.4 †2.1
3.0 †1.7
35.0
36.0
22.1
21.6
0.7 0.6
1.5 1.4
—
48.2
0.4 — 1.4 —
1.8 0.9
2.0 1.2
22.5
21.7
21.3
19.8
0.7 0.6
1.4 1.3
0.4 — 1.2 —
46.7
—
6.4 †5.3
3.3
3.1
5.6 —
3.9
3.1
2.9
2.8
5.4 —
13.3
8.0
29.0 27.9
22.2 15.1
29.8 28.3
9.2 3.9
6.8 5.0
Size (MB)
23.2, †21.1
480.9
975.0
480.4
962.1
11.5
30.9
58.5
5.6
30.4
57.3
2.6
4.5
2.6
2.1
3.7
4.1, †4.4
Table 5: Total communication cost in MB and running time in seconds comparing our protocol to [PSZ16]
and to [KKRT16], with T ∈ {1, 4} threads; λ = 40, σ = 32, h = 3. 10Gbps network assumes 0.2ms RTT,
and others use 80ms RTT. Only single-threaded results are shown for [KKRT16] due to limitations of their
implementation. The communication cost for [KKRT16] is based on the equation provided in their paper;
empirical communication was observed to be ∼ 1.5 times larger.
We also consider the running time of our protocol when more than 4 threads are used by the sender. When
allowing 16 threads in the LAN setting, our running time decreases to 16.9 seconds for Nx = 224, Ny ≤ 5535.
[PSZ16] on the other hand experiences less speedup over 4 threads, requiring just over 20 seconds for Nx = 224
when performed with 16 threads. This demonstrates that our protocol can outperform [PSZ16] even in the
LAN setting, when at least 16 threads are used by the sender.
An important property of our protocol is the relatively small amount of work required by the receiver. In
many applications the computations power of the receiver is signiﬁcantly less than the sender. This is most
notable in the contact discovery application where the receiver is likely a cellphone while the sender can be
run at a large datacenter where computational power is inexpensive. For instance, Table 3 with parameters
SEAL8192-1, α = 64, (cid:96) = 3 shows that for a intersection between 5535 and 224 items, the receiver need only
perform 1.7 seconds of computation while the server with 16 threads required 18 seconds with a total of
11MB of communication, less than half the size of the average 2012 iOS application download size [Res12]
and a tenth of the average 2015 daily US smartphone mobile data usage [Eri16]. In contrast, [PSZ16] requires
480MB of communication—a 44× increase–and the computational load of the receiver is signiﬁcantly higher
requiring 50 million hash table queries and several thousand oblivious transfers.
6.3 Comparison to Kolesnikov et al. [KKRT16]
We also compare our protocol to that of Kolesnikov et al. [KKRT16], which optimizes the use of oblivious
transfer. While their results do improve the running time for symmetric sets of large items, we found that
when applied to our setting their improvement provides little beneﬁt, and is outweighed by other optimiza-
tions employed by [PSZ16]. In particular, [PSZ16] considers a diﬀerent oblivious transfer optimization which
is more eﬃcient on short strings, and also optimizes cuckoo hashing for the setting of asymmetric set sizes.
These design decisions result in [KKRT16] requiring 2× more communication than [PSZ16], and 87× more
than our protocol, when intersecting 5535 and 224 size sets with parameters SEAL8192-1, α = 64, (cid:96) = 3. When
benchmarking [KKRT16], we found that the communication is actually ∼ 1.5 larger than their theoretical
limit. The theoretical communication complexity of [KKRT16] is