this approach may miss a large amount of valuable information.
For the example in Section 3, the content mentions no name of any
system call. But the three keywords (“MSG MORE”, “loopback”,
“UDP”) in the content can actually help readers to recall the sys-
tem call sendto and the system call socket due to the correlation
4In the rare case that the semantics of the (cid:128)elds is given in natural language (e.g.,
“length” for “len”), we can still capture them from their comments in the structure,
which are o(cid:137)en there (e.g., structure sk bu(cid:130) has a comment “@len: length of actual
data”).
Session J2:  Fun with FuzzingCCS’17, October 30-November 3, 2017, Dallas, TX, USA2143Figure 3: Example of collecting system call information from Linux Programmer Manual.
between them. To build such correlation, our idea is to customize
NLP for recovering syscall-related information. Particularly, we
built a knowledge base (the relations among system calls and their
parameters) for correlating the keywords in CVE or git log descrip-
tions to domain-speci(cid:128)c concepts (e.g., linking MSG MORE to the
flags parameter of the sendto system call). Below we elaborate
the details of our approach.
SemFuzz (cid:128)rst correlates a system call with its return type and
the types of parameters. If the type is an enumeration, the values
of parameter should also be included. Such correlation can be auto-
matically achieved by parsing Linux Programmer Manual (LPM)
[16] which contains the prototype of every Linux system call 5. A
prototype is a declaration of a function that speci(cid:128)es the function’s
name, number of parameters, data types of parameters, and return
type. (cid:140)e format of a declaration is (cid:128)xed, and it always appears in
the SYNOPSIS (cid:128)eld in LPM. For parameters of the enumeration type,
all possible enumeration values are presented in the DESCRIPTION
(cid:128)eld in LPM. What SemFuzz needs to do is to parse all the doc-
uments of LPM, extracting the prototype of system calls and the
enumeration values of parameters. An example is shown in the
le(cid:137) part of Figure 3, which is a manual page for the system call
sendto. From the (cid:128)gure, we can see that the system call sendto
has six parameters, as shown in the SYNOPSIS (cid:128)eld. (cid:140)e parameter
flags is an enumeration with values show in the DESCRIPTION
(cid:128)eld (e.g., MSG MORE). Each value of the enumeration is connected
to sendto. Also the parameter dest addr is a pointer to sockaddr.
(cid:140)e structure sockaddr and its (cid:128)elds (which are extracted from the
code) are related to sendto.
Besides correlating a system call with its prototype and possi-
ble enumeration values, SemFuzz also checks the SEE ALSO (cid:128)eld
5One may think about ge(cid:138)ing system call prototype from the header (cid:128)les. However,
header (cid:128)les do not have information about system call dependencies and the values of
parameters and their relations. For example, MSG MORE can only be used in sendto
a(cid:137)er calling socket (to establish connection). Such information cannot be found from
header (cid:128)les.
in LPM, which usually contains other information (e.g., the pro-
tocol that a system call may use). For example, in Figure 3, the
SEE ALSO (cid:128)eld of the sendto system call includes other LPM pages
such as tcp, udp and ip. (cid:140)ese pages describe the related val-
ues of system calls’ parameters. Generally, two (cid:128)elds need to be
taken care. (cid:140)e (cid:128)rst one is the SYNOPSIS (cid:128)eld, which gives typical
sample code of system calls with speci(cid:128)c values of its parame-
ters. SemFuzz connects the page’s name (e.g., ip and udp) with the
contents in SYNOPSIS. In the example of udp (see bo(cid:138)om-right of
Figure 3), SemFuzz correlates the keyword udp with the system
call “socket(AF INET, SOCK DGRAM, 0)”. (cid:140)e second (cid:128)eld is the
DESCRIPTION (cid:128)eld in the page. Sometimes, it gives special values
of critical structures. For example, in the ip page (see top-right of
Figure 3), SemFuzz recognizes INADDR LOOPBACK is a special value
of the ip address, which can be used to (cid:128)ll the dest addr parameter
of the sendto system call. A(cid:137)er analyzing all the pages in this way,
SemFuzz is able to retrieve a system call and its parameters when its
keyword is identi(cid:128)ed in the leaves of the parse tree with POS label
NN (i.e., noun). Recall that UDP is used in the CVE description (see
Figure 2), SemFuzz can generate the system call with its parameters
as follows: “socket(AF INET, SOCK DGRAM, 0)”.
SemFuzz also correlates a system call with other system calls. As
we know, the parameters of a system call A may be the return value
of another system call B. As a result, only a(cid:137)er B is executed, A can
run with the output of B. SemFuzz bridges the correlations between
two system calls when the parameter name of a system call equals
the name of another system call’s return variable. In this way, when
a system call is identi(cid:128)ed from the description of CVE or git log,
any correlated system calls could also be included. Note that this
operation may map one keyword to several system calls. Once this
situation happens, SemFuzz selects the system call that can cover
the most keywords. For example, the (cid:128)rst parameter of the system
call sendto is sockfd, which equals the name of the return variable
of the system call socket and the system call accept. Compared
Session J2:  Fun with FuzzingCCS’17, October 30-November 3, 2017, Dallas, TX, USA2144the abnormal events of the kernel, which is essential for feeding
back to SemFuzz as the further guidance of the input mutation.
Similar to the (cid:128)rst task, SemFuzz works both inside and outside the
virtual machine. (a) To monitor the executed functions, an in-box
observer of SemFuzz leverages system support called KCOV (kernel
code coverage) [3], which is designed to track the executed code in
Linux kernel. (b) Tracking the critical variables in kernel is much
more complicated than expected. One idea is to add instrumenta-
tion code around the variable in the source code. When the code
runs, it gives the value of the variable. However, this approach is
not (cid:131)exible since the kernel has to be recompiled each time when
SemFuzz needs to observe a di(cid:130)erent variable. One may also think
of dynamic instrumentation which, in runtime, locates the target
variable and instruments code around it. However, such variable
may not be locatable since it would get optimized out when the ker-
nel is compiled. To solve this problem, our basic idea is to observe
the parameters of a kernel function instead of the critical variables.
Compared with a variable inside a kernel function, function pa-
rameters will not be optimized out. In detail, we statically perform
backward intra-procedure data-(cid:131)ow and control-(cid:131)ow analysis on
the critical variables, trying to (cid:128)nd the parameters that the critical
variables depend on. For example, in Figure 2, the variable skb.len
is the critical variable retrieved from CVE, which data depends on
the function parameter skb. So SemFuzz dynamically instruments
the parameter skb in the function ip cmsg recv checksum. When
the function is invoked, the value of the parameter can be obtained.
(c) To capture an abnormal event (e.g., memory corruption) of the
kernel, SemFuzz lets the out-box observer watch the kernel outside
the virtual machine. Once an abnormal event happens, SemFuzz
will be alerted.
In our implementation, we built SemFuzz based on the state-of-
the-art Linux system call fuzzer, called Syzkaller [4]. Regarding
the in-box observer, Syzkaller can directly call the API of KCOV and
gets the execution status of the kernel. Besides this, Syzkaller can
perform the fuzzing by randomly adding, removing or changing a
system call together with its parameter(s) in the sequence. We im-
plemented the seed input generation and the strategy of mutating
the seed input according to the non-code text in CVE and Linux
git log (see Section 5.2, 5.3 and 5.4), which greatly improves the
performance of fuzzing for over 1.6 times (see Section 6.3). As for
out-box observer, Syzkaller monitors whether the kernel crashes
or hangs, and also checks the output of the internal kernel error
detectors (e.g., KASAN for detecting memory errors and UBSAN for
detecting unde(cid:128)ned behaviors such as integer over(cid:131)ow). SemFuzz
retrieves the report of Syzkaller to check whether the behavior spec-
i(cid:128)ed by the target vulnerability type occurs (e.g., KASAN generates
a bug report “KASAN: Double free or freeing an invalid pointer”,
indicating the double free vulnerability is triggered).
5.2 Generating Seed Input
Before starting the fuzzing process, an initial seed input should be
generated. A good seed input can move the execution of the target
kernel closer to the vulnerable function, improving the performance
of the later mutation process. Di(cid:130)erent from randomly generating
a seed input by traditional fuzzing approaches, SemFuzz leverages
“system calls” retrieved from CVE and git log. Although such system
Figure 4: Setting up testing environment.
with accept, socket can cover more keywords (e.g., udp). In that
case, when sendto is retrieved, socket should also be extracted.
Using this approach, SemFuzz automatically analyzes 1082 LPM
pages, and correlates 373 system calls with more than 2000 key-
words, which is (cid:128)ve more times than only using system call names
as the keywords. From our evaluation of 112 CVEs, SemFuzz can
successfully retrieve the system calls for 96 (86%) of them for further
fuzzing.
5 SEMANTICS-GUIDED FUZZING
SemFuzz extracts necessary information, or guidances, from non-
code text in CVE and Linux git log, to guide the fuzzing process.
Particularly, the retrieved “a(cid:130)ected version” helps SemFuzz to set
up the right testing environment. (cid:140)en SemFuzz generates the (cid:128)rst
input (i.e., the seed input) using the retrieved “system calls”. In
the fuzzing process, SemFuzz performs a coarse mutation on the
inputs to (cid:128)nd a system call sequence that can move the execution
towards the “vulnerable functions”. A(cid:137)er that, SemFuzz continues
to perform a (cid:128)ne-grained mutation on the system call sequence by
monitoring the “critical variables”, until the target vulnerability is
found to be triggered, according to the signs of the a(cid:138)ack result
speci(cid:128)ed by the “vulnerability type”.
5.1 Setting up the Testing Environment
(cid:140)e tasks of se(cid:138)ing up the testing environment include: running
the vulnerable Linux kernel version and observing the execution
status of the Linux kernel. (cid:140)e (cid:128)rst task is to load a vulnerable
Linux kernel and make a sequence of system calls. As we know,
a kernel cannot load itself, so we build a Linux kernel inside a
virtual machine and let SemFuzz load it from outside (i.e., on the
host machine), as shown in Figure 4. In particular, we pre-build
103 Linux kernel versions to avoid the redundant building for time
saving. When the “a(cid:130)ected version” is retrieved from the CVE
description, the out-box loader of SemFuzz loads the corresponding
version. (cid:140)en the in-box feeder of SemFuzz feeds the target kernel
with a sequence of system calls. Such feeding can be achieved by
a user-level application installed in the Linux operating system
(inside the virtual machine). What the application does is to invoke
system calls according to the given system call sequence.
(cid:140)e second task is to observe the execution status of the kernel,
including the executed functions, values of critical variables and
Session J2:  Fun with FuzzingCCS’17, October 30-November 3, 2017, Dallas, TX, USA2145measure the distance between the vulnerable functions and the
execution trace of the fuzzing instance. (cid:140)e input corresponding
to the shortest distance is chosen as a new seed input for another
round of fuzzing until any vulnerable function is reached.
Formally speaking, let VU L be the set of vulnerable functions.
Given a vulnerable function f ∈ VU L, we construct its reverse call
graph by performing backward reachability analysis on f . Partic-
ularly, we modify GCC to collect call information during kernel
compilation. We consider function pointers but ignore callbacks 6.
(cid:140)e caller is linked to all candidate callees having the same pro-
totype speci(cid:128)ed by the function pointer under a path-insensitive
and context-insensitive pointer analysis. In the generated graph,
each node represents a function that can reach f , and each edge
connecting two nodes n1 and n2 means that n2 is directly called by
n1. We de(cid:128)ne the distance of two nodes dist(n1, n2) as the number
of the nodes in the shortest path between n1 and n2. A special
situation is that, when n1 == n2, the dist equals to 1. Let RCG(f )
be the set of functions in the reverse call graph of f , KCOV(s) be
the set of functions that are executed in a fuzzing instance using
the input s. For ∀❕ ∈ KCOV(s), we de(cid:128)ne its priority prio to f as:
(cid:40)1/dist (❕, f ) ,
priof (❕) =
0,
(cid:140)en, the priority of the system call sequence s is de(cid:128)ned as:
prio (s) = maxf ∈V U L
i f ❕ ∈ RCG (f )
otherwise
(cid:8)priof (❕) | ❕ ∈ KCOV (s)(cid:9)
In this way, the priority of a candidate system call sequence is
represented in the range [0, 1], where 0 means the system call
sequence is not likely to reach the vulnerable functions, while 1
means the system call sequence reaches to the vulnerable functions.
For the case of CVE-2017-6347, the vulnerable function is ip cmsg
recv checksum, whose reverse call graph is shown in Figure 5.
Consider two system call sequences s1 and s2. (cid:140)e former one s1 can
reach the function udp recvmsg, whose distance to the vulnerable
function is 3, hence prio(s1) = 1/3. (cid:140)e la(cid:138)er one s2 can reach the
function inet recv error, whose distance to the vulnerable function
is 4, hence prio(s2) = 1/4. By comparing prio(s1) and prio(s2), we
prefer to choose s1 instead of s2 as the candidate input for further
mutation.
5.4 Fine-grained Mutation
A(cid:137)er (cid:128)nding an input I that lets the kernel run the vulnerable
function, SemFuzz continues to mutate the input with the feedback
from monitoring the “critical variables”. Basically, SemFuzz does
not add new system calls or delete any existing system calls in
I. What SemFuzz does is to mutate the values of the system call
parameters, and to repeat existing system calls, which is then called
(cid:128)ne-grained mutation. Regarding observing the “critical variables”,
recall that the in-box observer cannot directly monitor the changes
of critical variables (Section 5.1). So SemFuzz only observes the
function parameters that the critical variables depend on, to check
whether the values are impacted when a given input is executed.
Similar to the coarse-level mutation, SemFuzz needs to determine
whether an input is “be(cid:138)er” than others. If so, the input will be
6(cid:140)is may cause some links between function calls missing.
Figure 5: Reverse call graph of ip cmsg recv checksum. For
brevity, we only present the important functions in the
graph.
calls are highly related to the vulnerability, they are insu(cid:129)cient for
building the whole input to trigger the vulnerability by themselves.
(cid:140)us, other necessary information should also be included to build
a suitable seed input. For example, using the description of CVE-
2017-6347, SemFuzz generates the system calls socket and sendto.
However, between executing socket and sendto, the system call
bind must be executed to assign a local socket address to the socket.
Particularly, the seed input is built through the following two steps.
Firstly, all the retrieved system calls (along with the retrieved values
of parameters) are put together as an incomplete seed input. If
the parameter is a structure, we (cid:128)ll each (cid:128)eld in the structure.
For enumeration (cid:128)elds, we (cid:128)ll them with the related enumeration
values learned from LPM. For other (cid:128)elds, we populated them with
random values compatible with their types. Secondly, SemFuzz
correlates other system calls with the retrieved ones, and puts them
into the seed input. As mentioned in Section 4, SemFuzz correlates
two system calls if one’s parameters are returned from another one.