# "Wee" Challenges

Several challenges were associated with a single website that provides a "paperbots" service. Here are the key points and explanations related to these challenges:

- **Continuous Learning in Coding:**
  - Good coders should aim to learn at least one new programming language every year.
  - Information Security (InfoSec) professionals often need to learn a new language for each new problem they encounter, though this may vary depending on individual experience and needs.

- **Introduction to Wee:**
  - If you haven't taken on a new challenge in 2018, you're in for a treat.
  - The new and upcoming `Wee` programming language, available from [paperbots.io](https://paperbots.io/), was used for these challenges. Special thanks to Mario Zechner ([@badlogicgames](https://github.com/badlogic)) for his contributions.

- **Projects in Wee:**
  - Some impressive projects have been created using Wee, such as:
    - [Project 1](https://paperbots.io/project.html?id=URJgCh)
    - [Project 2](https://paperbots.io/project.html?id=kpyyrl)
    - [Project 3](https://paperbots.io/project.html?id=F53thj)

- **Server Porting and Enhancements:**
  - Given our familiarity with Java, we ported the server (originally in `Server.java` and `Paperbots.java`) to Python. This work is ongoing, and we continue to add new features.
  - You can access the open-sourced Python server at `/pyserver/server.py`.

- **Repository and Unchanged Code:**
  - Any code unrelated to the new server remains unchanged from commit `dd059961cbc2b551f81afce6a6177fcf61133292` in the [badlogic/paperbots GitHub repository](https://github.com/badlogic/paperbots).
  - A mirrored version of the repository up to this commit is available [here](https://github.com/domenukk/paperbots/).

- **New Features and Security:**
  - We have added new features to the server, including server-side Wee evaluation.
  - To ensure that Wee becomes the language of the future, we have implemented several powerful runtime functions.
  - Additionally, we have included assertion functions in the server-side Wee to guarantee that our virtual machine (VM) is 100% safe and secure. These security measures are integrated into the system, so you do not need to worry about them.

This optimized text provides a clear and professional overview of the "Wee" challenges, the introduction to the Wee language, and the enhancements made to the server.