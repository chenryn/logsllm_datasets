            }
            *off = _off;
            return skb;
        }
        return NULL;
    }
## 4\. IP(网络层)
###  4.1 ip_cmsg_send
  * 将cmsg中的控制信息, 保存至ipc(可以根据控制信息, 自定义socket和ip层面配置)
    int ip_cmsg_send(struct sock *sk, struct msghdr *msg, struct ipcm_cookie *ipc,
             bool allow_ipv6)
    {
        int err, val;
        struct cmsghdr *cmsg;
        struct net *net = sock_net(sk);
        for_each_cmsghdr(cmsg, msg) {
            if (!CMSG_OK(msg, cmsg))
                return -EINVAL;
            if (cmsg->cmsg_level == SOL_SOCKET) {
                // 修改socket层面的配置
                err = __sock_cmsg_send(sk, msg, cmsg, &ipc->sockc);
                if (err)
                    return err;
                continue;
            }
            if (cmsg->cmsg_level != SOL_IP)
                continue;
            switch (cmsg->cmsg_type) {
            case IP_RETOPTS:
            // 获得ip选项
                err = cmsg->cmsg_len - sizeof(struct cmsghdr);
                /* Our caller is responsible for freeing ipc->opt */
                err = ip_options_get(net, &ipc->opt, CMSG_DATA(cmsg),
                             err cmsg_len != CMSG_LEN(sizeof(struct in_pktinfo)))
                    return -EINVAL;
                info = (struct in_pktinfo *)CMSG_DATA(cmsg);
                if (info->ipi_ifindex)
                    ipc->oif = info->ipi_ifindex;
                ipc->addr = info->ipi_spec_dst.s_addr;
                break;
            }
            case IP_TTL:
            // 自定义TTL
                if (cmsg->cmsg_len != CMSG_LEN(sizeof(int)))
                    return -EINVAL;
                val = *(int *)CMSG_DATA(cmsg);
                if (val  255)
                    return -EINVAL;
                ipc->ttl = val;
                break;
            case IP_TOS:
            // 自定义TOS
                if (cmsg->cmsg_len == CMSG_LEN(sizeof(int)))
                    val = *(int *)CMSG_DATA(cmsg);
                else if (cmsg->cmsg_len == CMSG_LEN(sizeof(u8)))
                    val = *(u8 *)CMSG_DATA(cmsg);
                else
                    return -EINVAL;
                if (val  255)
                    return -EINVAL;
                ipc->tos = val;
                ipc->priority = rt_tos2priority(ipc->tos);
                break;
            default:
                return -EINVAL;
            }
        }
        return 0;
    }
###  4.2 ip_make_skb
    truct sk_buff *ip_make_skb(struct sock *sk,
                    struct flowi4 *fl4,
                    int getfrag(void *from, char *to, int offset,
                        int len, int odd, struct sk_buff *skb),
                    void *from, int length, int transhdrlen,
                    struct ipcm_cookie *ipc, struct rtable **rtp,
                    struct inet_cork *cork, unsigned int flags)
    {
        /*
        struct sk_buff_head {
            /* These two members must be first. */
            struct sk_buff    *next;
            struct sk_buff    *prev;
            __u32        qlen;
            spinlock_t    lock;
        };    
        */
        struct sk_buff_head queue;
        int err;
        // 路径探测数据包不传输数据, 直接返回
        if (flags & MSG_PROBE)
            return NULL;
        // 创建空闲队列
        __skb_queue_head_init(&queue);
        // 伪造cork
        cork->flags = 0;
        cork->addr = 0;
        cork->opt = NULL;
        // 初始化cork, 见4.2.1
        err = ip_setup_cork(sk, cork, ipc, rtp);
        if (err)
            return ERR_PTR(err);
        // 使用队列保存skb, skb组织待传输数据, 详细见4.3.1
        err = __ip_append_data(sk, fl4, &queue, cork,
                       &current->task_frag, getfrag,
                       from, length, transhdrlen, flags);
        if (err) {
            __ip_flush_pending_frames(sk, &queue, cork);
            return ERR_PTR(err);
        }
        // 取出队列中的skb, 设置ip选项, 并链接, 返回一个skb, 详细见4.2.2
        return __ip_make_skb(sk, fl4, &queue, cork);
    }
###  4.2.1 ip_setup_cork
    static int ip_setup_cork(struct sock *sk, struct inet_cork *cork,
                 struct ipcm_cookie *ipc, struct rtable **rtp)
    {
        struct ip_options_rcu *opt;
        struct rtable *rt;
        rt = *rtp;
        if (unlikely(!rt))
            return -EFAULT;
        /*
         * setup for corking.
         */
        opt = ipc->opt;
        if (opt) {
            if (!cork->opt) {
                // 为cork->opt分配空间, 最大容纳sizeof(struct ip_options) + 40 bytes
                cork->opt = kmalloc(sizeof(struct ip_options) + 40,
                            sk->sk_allocation);
                if (unlikely(!cork->opt))
                    return -ENOBUFS;
            }
            // 缓存opt至cork->opt
            memcpy(cork->opt, &opt->opt, sizeof(struct ip_options) + opt->opt.optlen);
            cork->flags |= IPCORK_OPT;
            cork->addr = ipc->addr;
        }
        // 设置报文分段长度, 开启pmtu探测时调用dst->ops->mtu(dst)获得mtu, 否则从网络设备获得mtu
        cork->fragsize = ip_sk_use_pmtu(sk) ?
                 dst_mtu(&rt->dst) : READ_ONCE(rt->dst.dev->mtu);
        // mtu >= IPV4_MIN_MTU
        if (!inetdev_valid_mtu(cork->fragsize))
            return -ENETUNREACH;
        cork->gso_size = ipc->gso_size;
        // 设置路由
        cork->dst = &rt->dst;
        /* We stole this route, caller should not release it. */
        *rtp = NULL;
        // 基础配置, cork最终会拿到所有ip配置
        // cork->length表示skb已包含数据
        cork->length = 0;
        cork->ttl = ipc->ttl;
        cork->tos = ipc->tos;
        cork->mark = ipc->sockc.mark;
        cork->priority = ipc->priority;
        cork->transmit_time = ipc->sockc.transmit_time;
        cork->tx_flags = 0;
        sock_tx_timestamp(sk, ipc->sockc.tsflags, &cork->tx_flags);
        return 0;
    }
###  4.2.2 __ip_make_skb
    struct sk_buff *__ip_make_skb(struct sock *sk,
                      struct flowi4 *fl4,
                      struct sk_buff_head *queue,
                      struct inet_cork *cork)
    {
        struct sk_buff *skb, *tmp_skb;
        struct sk_buff **tail_skb;
        struct inet_sock *inet = inet_sk(sk);
        struct net *net = sock_net(sk);
        struct ip_options *opt = NULL;
        struct rtable *rt = (struct rtable *)cork->dst;
        struct iphdr *iph;
        __be16 df = 0;
        __u8 ttl;
        // 取出第一个skb
        skb = __skb_dequeue(queue);
        if (!skb)
            goto out;
        // 定位skb非线性区域
        tail_skb = &(skb_shinfo(skb)->frag_list);
        /* move skb->data to ip header from ext header */
        // 更新skb->data指向ip头
        if (skb->data frag_list作为指针将所有skb链接起来, 同时由链表头skb统计数据长度信息
        while ((tmp_skb = __skb_dequeue(queue)) != NULL) {
            __skb_pull(tmp_skb, skb_network_header_len(skb));
            *tail_skb = tmp_skb;
            tail_skb = &(tmp_skb->next);
            skb->len += tmp_skb->len;
            skb->data_len += tmp_skb->len;
            skb->truesize += tmp_skb->truesize;
            tmp_skb->destructor = NULL;
            tmp_skb->sk = NULL;
        }
        /* Unless user demanded real pmtu discovery (IP_PMTUDISC_DO), we allow
         * to fragment the frame generated here. No matter, what transforms
         * how transforms change size of the packet, it will come out.
         */
        // 设置是否开启动态mtu探测
        skb->ignore_df = ip_sk_ignore_df(sk);
        /* DF bit is set when we want to see DF on outgoing frames.
         * If ignore_df is set too, we still allow to fragment this frame
         * locally. */
        if (inet->pmtudisc == IP_PMTUDISC_DO ||
            inet->pmtudisc == IP_PMTUDISC_PROBE ||
            (skb->len dst) &&
             ip_dont_fragment(sk, &rt->dst)))
            df = htons(IP_DF);
        if (cork->flags & IPCORK_OPT)
            opt = cork->opt;
        if (cork->ttl != 0)
            ttl = cork->ttl;
        else if (rt->rt_type == RTN_MULTICAST)
            ttl = inet->mc_ttl;
        else
            ttl = ip_select_ttl(inet, &rt->dst);
        // 填充skb线性区域的ip头信息
        iph = ip_hdr(skb);
        iph->version = 4;
        iph->ihl = 5;
        iph->tos = (cork->tos != -1) ? cork->tos : inet->tos;
        iph->frag_off = df;
        iph->ttl = ttl;
        iph->protocol = sk->sk_protocol;
        ip_copy_addrs(iph, fl4);
        ip_select_ident(net, skb, sk);
        if (opt) {
            iph->ihl += opt->optlen>>2;
            ip_options_build(skb, opt, cork->addr, rt, 0);
        }
        skb->priority = (cork->tos != -1) ? cork->priority: sk->sk_priority;
        skb->mark = cork->mark;
        skb->tstamp = cork->transmit_time;
        /*
         * Steal rt from cork.dst to avoid a pair of atomic_inc/atomic_dec
         * on dst refcount
         */
        cork->dst = NULL;
        skb_dst_set(skb, &rt->dst);
        if (iph->protocol == IPPROTO_ICMP)
            icmp_out_count(net, ((struct icmphdr *)
                skb_transport_header(skb))->type);
        ip_cork_release(cork);
    out:
        return skb;
    }
###  4.3 ip_append_data
    int ip_append_data(struct sock *sk, struct flowi4 *fl4,
               int getfrag(void *from, char *to, int offset, int len,
                       int odd, struct sk_buff *skb),
               void *from, int length, int transhdrlen,
               struct ipcm_cookie *ipc, struct rtable **rtp,
               unsigned int flags)
    {
        struct inet_sock *inet = inet_sk(sk);
        int err;
        // 忽略探测包
        if (flags&MSG_PROBE)
            return 0;
        // 队列为空时, 初始化cork
        if (skb_queue_empty(&sk->sk_write_queue)) {
            err = ip_setup_cork(sk, &inet->cork.base, ipc, rtp);
            if (err)
                return err;
        } else {
            transhdrlen = 0;
        }
        return __ip_append_data(sk, fl4, &sk->sk_write_queue, &inet->cork.base,
                    sk_page_frag(sk), getfrag,
                    from, length, transhdrlen, flags);
    }
###  4.3.1 __ip_append_data
    static int __ip_append_data(struct sock *sk,
                    struct flowi4 *fl4,
                    struct sk_buff_head *queue,
                    struct inet_cork *cork,
                    struct page_frag *pfrag,
                    int getfrag(void *from, char *to, int offset,
                        int len, int odd, struct sk_buff *skb),
                    void *from, int length, int transhdrlen,
                    unsigned int flags)
    {
        struct inet_sock *inet = inet_sk(sk);
        struct ubuf_info *uarg = NULL;
        struct sk_buff *skb;
        struct ip_options *opt = cork->opt;
        int hh_len;
        int exthdrlen;
        int mtu;
        int copy;
        int err;
        int offset = 0;
        unsigned int maxfraglen, fragheaderlen, maxnonfragsize;
        int csummode = CHECKSUM_NONE;
        struct rtable *rt = (struct rtable *)cork->dst;
        unsigned int wmem_alloc_delta = 0;
        bool paged, extra_uref = false;
        u32 tskey = 0;
        // 取出队列尾部的skb(这个skb有可能存在部分空闲缓冲区, 可以继续保存数据)