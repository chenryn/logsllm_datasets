### Execution and Memory Management
The system executes instructions directly from program memory, without the use of a Memory Management Unit (MMU) to support virtual memory. Our implementation is based on the MSP430 microcontroller, chosen for its well-maintained, open-source hardware design available through Open Cores [19]. Although our specific implementation focuses on the MSP430, the machine model and methodology developed in this paper are applicable to other low-end microcontrollers (MCUs) in the same class, such as the Atmel AVR ATmega.

RAT A's main implementation is integrated with VRASED, a verified hybrid Remote Attestation (RA) architecture [10], which enables us to demonstrate security. Despite our specific implementation choices, we believe that RAT A concepts are also applicable to other RA architectures. To support this, Appendix D describes an implementation of RAT A atop SANCUS [20], another hardware-based RA architecture targeting low-end devices. For an overview of various RA architectures, see Section 9.

### Detection, Prevention, and Memory Immutability
As a detection-oriented security service, RA does not prevent future binary modifications. Therefore, the term Time-Of-Check-To-Time-Of-Use (TOCTOU) should be considered retrospectively. The techniques presented in this paper allow the Verifier (Vrf) to understand "since when" the Prover (Prv) memory has remained the same as reported in the current RA result.

While malware infections can be prevented by making all executable memory read-only (e.g., storing code in ROM), this approach would sacrifice reconfigurability, making legitimate software updates impossible and effectively turning the MCU into an Application-Specific Integrated Circuit (ASIC). Reconfigurability is one of the most important features of MCUs, perhaps even their primary purpose.

A less drastic approach is to prevent program memory modifications at runtime. However, this approach is vulnerable to physical attacks where an adversary can re-program Prv directly. More importantly, it makes remote updates impossible, requiring physical access whenever the device software needs to be updated. Since these devices are often remote or physically inaccessible (e.g., inside a vehicle), low-end MCUs (including the MSP430 and ATMega) typically do not prevent modifications to program memory. Our detection-based approach allows changes to binaries and reports them to Vrf, even if they occur between consecutive RA instances. Since Vrf is informed about all binary changes on Prv, it can distinguish illegal modifications from expected ones.

### Background and Definitions
#### Device Model and MCU Assumptions
We now outline the assumptions relevant to RAT A, reflecting the behavior of the class of low-end embedded systems discussed in Section 2 and aligning with previous work on securing low-end MCUs [1, 6, 7, 10, 21]. We assume that the MCU hardware correctly implements its specifications as follows:

- **A1 – Program Counter (PC):** The PC always contains the address of the instruction being executed in a given CPU cycle.
- **A2 – Memory Address:** Whenever memory is read or written, a data-address signal (Daddr) contains the address of the corresponding memory location. For a read access, a data read-enable bit (Ren) must be set, and for a write access, a data write-enable bit (Wen) must be set.
- **A3 – Direct Memory Access (DMA):** When the DMA controller accesses the main system memory, a DMA-address signal (DMAaddr) reflects the address of the memory location being accessed, and the DMA-enable bit (DMAen) is set. DMA cannot access memory without setting DMAen.
- **A4 – MCU Reset:** At the end of a successful reset routine, all registers (including PC) are set to zero before resuming normal software execution flow. Resets are handled by the MCU in hardware, and the reset handling routine cannot be modified. When a reset occurs, the corresponding reset signal is set, and the same signal is also set during the initial MCU initialization.
- **A5 – No Data Execution:** Instructions must reside in program memory (PMEM) to execute. They are not loaded into data memory (DMEM) for execution. Data execution is impossible in most low-end devices, including the OpenMSP430 used in our prototype. In Harvard-based low-end devices (e.g., AVR ATmega), there is no hardware support to fetch/execute instructions from DMEM. In other low-end devices that do not prevent data execution by default, this is typically enforced by the underlying hybrid RA architecture. Therefore, even if malware resides in DMEM, it must be copied to PMEM before executing.

### Adversarial Model
We consider a strong adversary (Adv) who controls the entire software state of Prv, including both code and data. Adv can modify any writable memory and read any memory (including secrets) that is not explicitly protected by trusted hardware. Additionally, Adv has full access to all DMA controllers, if present. While Adv may physically re-program Prv software through a wired connection to flash, invasive/tampering hardware attacks are out of scope. We assume that Adv cannot: (1) alter hardware components, (2) modify code in ROM, (3) induce hardware faults, or (4) retrieve Prv secrets via physical side-channels. Protection against physical hardware attacks is orthogonal to our goals and can be achieved via tamper-resistance techniques [25].

### Linear Temporal Logic (LTL)
Computer-aided formal verification typically involves three basic steps: (1) describing the system of interest (e.g., hardware, software, communication protocol) using a formal model, such as a Finite State Machine (FSM), (2) formally specifying properties that the model should satisfy, and (3) checking the system model against these properties to ensure they are met. This can be achieved via either Theorem Proving or Model Checking. In this work, we use Model Checking to verify the implementation of system modules.

In one instantiation of model checking, properties are specified as formulae using Linear Temporal Logic (LTL), and system models are represented as FSMs. A system is represented by a triple (S, S0, T), where S is a finite set of states, S0 ⊆ S is the set of possible initial states, and T ⊆ S × S is the transition relation set, describing the states that can be reached in a single step from each state. LTL allows the representation of expected system behavior over time.

In addition to propositional connectives (conjunction (∧), disjunction (∨), negation (¬), and implication (→)), LTL includes temporal connectives, enabling sequential reasoning. The following temporal connectives are of interest in this paper:
- **Xϕ – neXt ϕ:** Holds if ϕ is true at the next system state.
- **Fϕ – Future ϕ:** Holds if there exists a future state where ϕ is true.
- **Gϕ – Globally ϕ:** Holds if for all future states, ϕ is true.
- **ϕ U ψ – ϕ Until ψ:** Holds if there is a future state where ψ is true and ϕ holds for all states prior to that.
- **ϕ W ψ – ϕ Weak until ψ:** Holds if, assuming a future state where ψ holds, ϕ holds for all states prior to that. If ψ never becomes true, ϕ must hold forever. Formally, ϕWψ ≡ (ϕUψ) ∨ G(ϕ).

### RA TOCTOU
This section defines the notion of TOCTOU-Security for RA. We start by formalizing this notion using a security game. Next, we consider the practicality of this problem and overview existing mechanisms, arguing that they do not achieve TOCTOU-Security (neither according to the definition nor in practice) and incur relatively high overhead.

#### Notation
Table 1 summarizes the notation, which is mostly consistent with that in VRASED [10], with a few additional elements to denote RAT A-specific memory regions and signals. To simplify notation, when the value of a given signal (e.g., Daddr) is within a certain range (e.g., AR = [ARmin, ARmax]), we write Daddr ∈ AR. In conformance with the axioms discussed in Section 3.1, we use Mod_Mem(x) to denote a modification to memory address x. Given our machine model, the following logical equivalence holds: