# Episode 3: Challenge 3
## Description
> This corgi made a mess, clean it up.
> 
> Hint: Maybe support can help debug the subscriber problem? 
An APK file and a QR code were attached.
## Solution
Let's start from the QR code:
```console
┌──(user@kali)-[/media/…/h4ck1ng.google/EP003/Challenge_03/a]
└─$ zbarimg QR-Code.png
QR-Code:https://corgis-web.h4ck.ctfcompetition.com/aHR0cHM6Ly9jb3JnaXMtd2ViLmg0Y2suY3RmY29tcGV0aXRpb24uY29tL2NvcmdpP0RPQ0lEPWZsYWcmX21hYz1kZWQwOWZmMTUyOGYyOTgwMGIxZTczM2U2MjA4ZWEzNjI2NjZiOWVlYjVmNDBjMjY0ZmM1ZmIxOWRhYTM2OTM5
scanned 1 barcode symbols from 1 images in 0.07 seconds
```
We get a URL containing some base64 string, and visiting it doesn't really give anything ("You found a Corgi Code™️! Use the app to discover the cute corgi living at this link!").
Let's decode the base64 string:
```console
┌──(user@kali)-[/media/…/h4ck1ng.google/EP003/Challenge_03/a]
└─$ echo aHR0cHM6Ly9jb3JnaXMtd2ViLmg0Y2suY3RmY29tcGV0aXRpb24uY29tL2NvcmdpP0RPQ0lEPWZsYWcmX21hYz1kZWQwOWZmMTUyOGYyOTgwMGIxZTczM2U2MjA4ZWEzNjI2NjZiOWVlYjVmNDBjMjY0ZmM1ZmIxOWRhYTM2OTM5 | base64 -d
https://corgis-web.h4ck.ctfcompetition.com/corgi?DOCID=flag&_mac=ded09ff1528f29800b1e733e6208ea362666b9eeb5f40c264fc5fb19daa36939
```
It's another URL. We try to access it and get blocked:
```console
┌──(user@kali)-[/media/…/h4ck1ng.google/EP003/Challenge_03/a]
└─$ curl "https://corgis-web.h4ck.ctfcompetition.com/corgi?DOCID=flag&_mac=ded09ff1528f29800b1e733e6208ea362666b9eeb5f40c264fc5fb19daa36939"
401 Unauthorized
Unauthorized
The server could not verify that you are authorized to access the URL requested. You either supplied the wrong credentials (e.g. a bad password), or your browser doesn&#x27;t understand how to supply the credentials required.
```
So, on the the APK. We can disassemble it with `jadx` (or browse it with `jadx-gui`):
```console
┌──(user@kali)-[/media/…/h4ck1ng.google/EP003/Challenge_03/a]
└─$ /home/user/utils/reversing/jadx/bin/jadx -d output challenge.apk
INFO  - loading ...
INFO  - processing ...
ERROR - finished with errors, count: 23
```
Browsing around, we find the interesting stuff under `sources\google\h4ck1ng\secretcorgis`:
```console
┌──(user@kali)-[/media/…/h4ck1ng.google/EP003/Challenge_03/a]
└─$ ls output/sources/google/h4ck1ng/secretcorgis
 BuildConfig.java                                          'MainActivityKt$ShowSecret$2.java'
'ByteArraysKt$toHexString$1.java'                          'MainActivityKt$ShowSecret$openLink$1.java'
 ByteArraysKt.java                                          MainActivityKt.java
'ComposableSingletons$MainActivityKt$lambda1$1.java'       'MainActivityViewModel$qrCodeDelay$1.java'
'ComposableSingletons$MainActivityKt$lambda2$1.java'       'MainActivityViewModel$requestCorgi$1.java'
'ComposableSingletons$MainActivityKt$lambda3$1.java'       'MainActivityViewModel$scanQrCode$1$corgiCode$1.java'
'ComposableSingletons$MainActivityKt.java'                 'MainActivityViewModel$scanQrCode$1.java'
 CorgiNetwork.java                                          MainActivityViewModel.java
'CorgiRequest$nonce$2.java'                                 NetworkInitializer.java
'CorgiRequest$signature$2.java'                            'NetworkKt$makeSecretRequest$2.java'
 CorgiRequest.java                                          NetworkKt.java
'MainActivity$onCreate$1.java'                              NetworkState.java
'MainActivity$special$$inlined$viewModels$default$1.java'   OpenLinkContract.java
'MainActivity$special$$inlined$viewModels$default$2.java'   QrCodesKt.java
'MainActivity$special$$inlined$viewModels$default$3.java'   R.java
 MainActivity.java                                          SecureCorgi.java
'MainActivityKt$DefaultPreview$1.java'                      SubscriptionInitializer.java
'MainActivityKt$MainScreen$1$1$1.java'                      Subscription.java
'MainActivityKt$MainScreen$1.java'                          SubscriptionKt.java
'MainActivityKt$MainScreen$2.java'                          ui
'MainActivityKt$ShowQrCodeWait$2.java'                      UiState.java
'MainActivityKt$ShowSecret$1$3.java'
```
We have a QR code, so let's see what happens in `QrCodesKt.java`:
```java
public final class QrCodesKt {
    private static final String CORGI_ID_PARAM_NAME = "DOCID";
    public static final CorgiRequest readCorgiCode(String corgiCode) {
        String str;
        boolean isSubscribed;
        Intrinsics.checkNotNullParameter(corgiCode, "corgiCode");
        Uri parse = Uri.parse(corgiCode);
        if (Intrinsics.areEqual(parse.getScheme(), "https") || Intrinsics.areEqual(parse.getScheme(), "http")) {
            String authority = parse.getAuthority();
            boolean z = true;
            boolean z2 = false;
            if (authority == null || !StringsKt.contains$default((CharSequence) authority, (CharSequence) BuildConfig.CORGI_AUTHORITY, false, 2, (Object) null)) {
                z = false;
            }
            if (!z) {
                return null;
            }
            String path = parse.getPath();
            if (path != null) {
                z2 = StringsKt.startsWith$default(path, "/debug/", false, 2, (Object) null);
            }
            try {
                byte[] decoded = Base64.decode(parse.getLastPathSegment(), 8);
                Intrinsics.checkNotNullExpressionValue(decoded, "decoded");
                Charset UTF_8 = StandardCharsets.UTF_8;
                Intrinsics.checkNotNullExpressionValue(UTF_8, "UTF_8");
                str = new String(decoded, UTF_8);
            } catch (Exception unused) {
                str = null;
            }
            Uri corgiDataUri = Uri.parse(str);
            Intrinsics.checkNotNullExpressionValue(corgiDataUri, "corgiDataUri");
            if (!verifyLink(corgiDataUri)) {
                return null;
            }
            String str2 = corgiDataUri.getScheme() + "://" + corgiDataUri.getAuthority() + corgiDataUri.getPath();
            Intrinsics.checkNotNullExpressionValue(str2, "StringBuilder().append(c…path)\n        .toString()");
            String queryParameter = corgiDataUri.getQueryParameter(CORGI_ID_PARAM_NAME);
            if (queryParameter == null) {
                return null;
            }
            if (z2) {
                isSubscribed = Intrinsics.areEqual(parse.getFragment(), "force_subscribed");
            } else {
                isSubscribed = SubscriptionKt.isSubscribed();
            }
            return new CorgiRequest(str2, queryParameter, isSubscribed);
        }
        return null;
    }
    public static final boolean verifyLink(Uri uri) {
        Intrinsics.checkNotNullParameter(uri, "uri");
        LinkedHashMap linkedHashMap = new LinkedHashMap();
        Set queryParameterNames = uri.getQueryParameterNames();
        Intrinsics.checkNotNullExpressionValue(queryParameterNames, "uri.queryParameterNames");
        Set set = queryParameterNames;
        ArrayList arrayList = new ArrayList(CollectionsKt.collectionSizeOrDefault(set, 10));
        for (String str : set) {
            arrayList.add(URLDecoder.decode(str, StandardCharsets.UTF_8.name()));
        }
        ArrayList arrayList2 = new ArrayList();
        for (Object obj : arrayList) {
            String name = (String) obj;
            Intrinsics.checkNotNullExpressionValue(name, "name");
            if (!StringsKt.startsWith$default(name, "_", false, 2, (Object) null)) {
                arrayList2.add(obj);
            }
        }
        for (String name2 : CollectionsKt.sorted(arrayList2)) {
            LinkedHashMap linkedHashMap2 = linkedHashMap;
            Intrinsics.checkNotNullExpressionValue(name2, "name");
            String queryParameter = uri.getQueryParameter(name2);
            if (queryParameter == null) {
                queryParameter = "";
            }
            linkedHashMap2.put(name2, queryParameter);
        }
        String queryParameter2 = uri.getQueryParameter("_mac");
        LinkedHashMap linkedHashMap3 = linkedHashMap;
        String generateSignature = generateSignature(linkedHashMap3);
        if (!Intrinsics.areEqual(queryParameter2, generateSignature)) {
            Log.e("mac", "HMAC doesn't match: " + ((Object) queryParameter2) + " != " + generateSignature);
        }
        return Intrinsics.areEqual(uri.getQueryParameter("_mac"), generateSignature(linkedHashMap3));
    }
    public static final String generateSignature(Map values) {
        Intrinsics.checkNotNullParameter(values, "values");
        ArrayList arrayList = new ArrayList();
        for (String str : CollectionsKt.sorted(values.keySet())) {
            StringBuilder sb = new StringBuilder();
            Locale GERMAN = Locale.GERMAN;
            Intrinsics.checkNotNullExpressionValue(GERMAN, "GERMAN");
            String upperCase = str.toUpperCase(GERMAN);
            Intrinsics.checkNotNullExpressionValue(upperCase, "this as java.lang.String).toUpperCase(locale)");
            arrayList.add(sb.append(upperCase).append('=').append((Object) values.get(str)).toString());
        }
        return NetworkKt.sign(CollectionsKt.joinToString$default(arrayList, ",", null, null, 0, null, null, 62, null));
    }
}
```
We can see that `readCorgiCode()`:
 * Receives the URL that we saw in the QR code
 * Has some debug logic triggered by having `/debug/` in the path to force the app to treat the user as a subscriber
 * Decodes the base64 string in order to get the 2nd level URL 
    * This URL must pass verification via `verifyLink`
    * This URL must include a `DOCID` parameter
Moving on to `verifyLink`, we see that it computes the expected signature ("HMAC") over the URL and compares it to the `_mac` received via a URL parameter. In the QR code we got, we had a `DOCID` of `flag` and an HMAC to match it, but maybe something was wrong with the calculation? We should dig deeper and try to understand how to calculate the HMAC. The code calls `NetworkKt.sign`, so let's check that class:
```java
public final class NetworkKt {
    private static final String DOC_ID_HEADER = "X-Document-ID";
    private static final String HMAC_SIG_HEADER = "X-Auth-MAC";
    private static final String NONCE_HEADER = "X-Request-Nonce";
    private static final String SUBSCRIBER_HEADER = "X-User-Subscribed";
    private static final String TAG = "Network";
    private static final String TIMESTAMP_HEADER = "X-Timestamp";
    public static final Object makeSecretRequest(CorgiRequest corgiRequest, Continuation continuation) {
        Log.d(TAG, Intrinsics.stringPlus("Making request for ", corgiRequest));
        OkHttpClient okHttpClient = new OkHttpClient();
        Request.Builder url = new Request.Builder().url(corgiRequest.getCorgiServer());
        url.addHeader(DOC_ID_HEADER, corgiRequest.getCorgiId());
        url.addHeader(NONCE_HEADER, corgiRequest.getNonce());
        url.addHeader(TIMESTAMP_HEADER, corgiRequest.getTimestamp());
        url.addHeader(HMAC_SIG_HEADER, corgiRequest.getSignature());
        if (corgiRequest.isSubscriber()) {
            url.addHeader(SUBSCRIBER_HEADER, "true");
        }
        return BuildersKt.withContext(Dispatchers.getIO(), new NetworkKt$makeSecretRequest$2(okHttpClient, url.build(), null), continuation);
    }
    /* JADX INFO: Access modifiers changed from: private */
    public static final Object makeRequest(OkHttpClient okHttpClient, Request request, Continuation continuation) {