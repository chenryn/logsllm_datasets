Semi-honest, honest majority
Modulo prime / Galois field Modulo power of two
[KOS16]
[KPR18]∗ (2)
[KOS16]- [KPR18]- (2)
[LN17] (3) [CGH+18] (2)
[AFL+16] [CDM00]
[DEF+19]
[EKO+20] (4) [ADEN19]
[KOS16]-
[DEK20]
[AFL+16]
Binary sharing
[DEF+19]∗ [FKOS15]
Garbling
[LPSY15]
[FKOS15]-
[FLNW17] [LN17]
[LPSY15] [ZRE15]
[LPSY15]
[AFL+16] [CCD88]
[LPSY15]
covertly secure protocols in Table 4. Optionally, the TopGear zero-
knowledge proof [BCS19] can be used instead of the original vari-
ants. This reduces the memory usage and the time needed for
smaller computations.
MP-SPDZ also retains the offline phase of earlier variants of
the SPDZ protocol, with malicious [DPSZ12] and covert security
[DKL+13]. Since they are superseded by HighGear, they are not
integrated with the online phase and therefore do not appear in
Table 4, however.
Binary secret sharing. MP-SPDZ supports two ways of comput-
ing binary circuits with secret sharing, dishonest majority, and
malicious security. The first is adapted from SPDZ2k with k = 1.
However, this variant suffers from the fact that communication is
quadratic in the security parameters. Even though that also holds
for SPDZ2k but has less of impact if k is larger than the security
parameter as is the case for SPDZ2k because the communication of
protocols based on oblivious transfer is in O(k2).
The second variant is based on a multi-party generalization of
TinyOT by Frederiksen et al. [FKOS15] and has communication
linear in the security parameter.
BMR. Beaver et al. [BMR90] have presented a way to construct
garbled circuits from any multi-party computation scheme inher-
iting the security properties. Their approach was later refined by
Lindell et al. [LPSY15] by using SPDZ as the underlying protocol.
MP-SPDZ implements BMR using SPDZ/MASCOT as well as pro-
tocols in other security models. This functionality was never part
of SPDZ-2 but has been partially published before the first version
of MP-SPDZ because it was used by Keller and Yanai to implement
oblivious RAM [KY18].
Yao’s Garbled Circuits. Bellare et al. [BHKR13] have presented a
variant of Yao’s garbled circuits that works particularly well with
AES-NI, the native implementation of AES on modern processors.
An implementation was added after the last version of SPDZ-2, and
it was recently extended to include the half-gate technique [ZRE15].
Semi-honest security. It is relatively straight-forward to convert
a protocol with malicious security to one with semi-honest secu-
rity by removing all aspects that solely contribute to malicious
security. All protocols in the line of SPDZ and TinyOT feature
two main elements for this: an information-theoretic tag (called
“MAC” in most of the literature) and a procedure called sacrificing
that checks the correctness of correlated randomness using more
correlated randomness. The latter has to be discarded thereafter
because the procedure reveals correlation between the two parts,
hence the name sacrificing. Stripping both leaves a protocol that
comes close to canonical semi-honest protocol using the underlying
techniques (oblivious transfer or homomorphic encryption). The
main difference is that in the semi-honest setting one could use
OT or HE directly with secret data instead of produced correlated
randomness. Given the cost of OT or HE, the overhead is relatively
small compared to the additional cost of Beaver’s multiplication,
however. Furthermore, using correlated randomness with homo-
morphic encryption can easily work with the SIMD structure of
LWE-based schemes, that is the fact that such schemes only can
encrypt thousands of field elements at once for reasonable secu-
rity parameters. This enables using a single encryption even for
computing sequential multiplications.
As a result, MP-SPDZ implements an OT-based protocol in all
computation domains as well protocols for fields both with semi-
homomorphic and somewhat homomorphic encryption.
3.2 Honest Majority
The honest-majority setting allows computing securely entirely us-
ing secret sharing, without oblivious transfer or homomorphic
encryption. MP-SPDZ uses two secret sharing schemes to this
end, replicated secret sharing [BL90] and Shamir’s secret sharing
[Sha79]. Both are multiplicative, that is, it is possible to locally
compute a sharing of the multiplication of two sharings without
communication, albeit resulting in a different secret sharing scheme.
A resharing protocol involving communication can then convert
back to the original sharing scheme, thus facilitating further multi-
plication.
The resharing protocol is linear in that resharing of a sum is
equivalent to the sum of resharings, which enables the parties to
compute an inner product at the communication cost of a single
multiplication. The framework reflects this by providing a particular
interface for inner products as seen later.
Semi-honest computation based on replicated secret sharing. Araki
et al. [AFL+16] have observed that resharing can be done by every
party sending exactly one element of the computation domain by
using pseudo-random zero sharing [CDI05]. The latter refers to
the generation of a fresh random sharing of zero without com-
munication using pseudo-random number generation with a set
of keys shared between every pair of parties. A similar technique
MP-SPDZ: A Versatile Framework for Multi-Party Computation
facilitates reducing the communication for private inputs as noted
by Eerikson et al. [EKO+20].
Semi-honest computation based on Shamir’s secret sharing. This
goes back to Ben-Or et al. [BGW88] for computation modulo a
prime and Chaum et al. [CCD88] for computation in extension
fields of characteristic two (and thus binary circuits). MP-SPDZ
implements resharing as described by Cramer et al. [CDM00].
3.3 Malicious computation
Lindell and Nof [LN17] have adapted the SPDZ sacrifice to the
setting of multiplicative secret sharing modulo a prime (including
replicated and Shamir’s secret sharing), and Araki et al. [FLNW17]
have done so for TinyOT. Both works are based on the observation
that the optimistic triple production using homomorphic encryption
or oblivious transfer can be replaced by producing a triple using
multiplicative secret sharing instead. A pair of such triples can
then be checked as in the dishonest-majority setting, resulting in
the ratio of triples needed to be produced per triple available for
the online phase. This is two for large fields (SPDZ) and three for
bit-based protocols (TinyOT).
For computation modulo a power of two, Eerikson et al. [EKO+20]
have presented several variants, one more akin to TinyOT, an-
other inspired by the SPDZ2k sacrifice, a third based on a general
compiler [DOS18], and a fourth called post-sacrifice. The last was
introduced by Lindell and Nof [LN17] for computation modulo
a prime, and it works by executing any multiplication with only
semi-honest security but storing the inputs and output for a later
check with a random triple similar to a SPDZ sacrifice. This deviates
from Beaver’s technique and demonstrates that MP-SPDZ is not
restricted to it.
Another way of checking correctness with honest-majority com-
putation is by means of an information-theoretic tag as in SPDZ.
However, using multiplicative secret sharing schemes instead of
additive secret sharing allows for protocols that compute multiplica-
tions optimistically and check them later. MP-SPDZ implements the
protocols proposed by Chida et al. [CGH+18] both with Shamir and
replicated secret sharing modulo a prime and the protocol proposed
by Abspoel et al. [ADEN19] for replicated secret sharing modulo a
power of two. The latter is implemented with a minor modification
by Dalskov et al. [DEK20] that allows continuous computation.
Honest supermajority. It is known that the setting of strictly
less than one third of parties being corrupted allows for stronger
security such as guaranteed output delivery. This requires at least
four parties for one corruption. With replicated secret sharing, every
party needs to store three ring elements. The protocol by Dalskov
et al. [DEK20] uses this setting with computation modulo a power
of two to implement non-linear functionality such as truncation
and comparison efficiently.
3.4 Higher-Level Protocols
All protocols described above are generally concerned with an
implementation of an arithmetic black-box, that is private input,
addition, multiplication, and public output. However, many compu-
tations such as comparison require further correlated randomness,
most notably secret random bits in the larger domains. A simple
way of obtaining such bits is to have sufficiently many parties
(depending on the security model) input a random bit and then
computing the XOR of all of them. However, this does not scale
optimally with the number of parties because computing XOR in
a larger domain reduces to a multiplication: a ⊕ b = a + b − 2ab.
Furthermore, for malicious security, it has to be checked whether
the output actually is a bit.
For computation modulo a prime, Damgård et al. [DKL+13] have
shown that a secret random bit can be produced at the cost of only
one multiplication and one opening by using the fact that the square
of a random number does not reveal which of two possible square
roots it corresponds to (if not zero). Damgård et al. [DEF+19] later
extended this to computation modulo a power of two.
Arithmetic-binary conversion. MP-SPDZ implements several ways
of converting between arithmetic (modulo a larger number) and
binary (modulo two) computation. The general way uses correlated
randomness in the two domains, so-called doubly-authenticated
bits (daBits) introduced by Rotaru and Wood [RW19], and extended
daBits introduced by Escudero et al. [EGK+20]. In some settings
with a low number of parties and computation modulo a power
of two, there is also the possibility of a more direct conversion
[ABF+18, MR18, DSZ15, DEK20]. These protocols either provide
only semi-honest security or require an honest supermajority.
3.5 Benchmarks
In order to compare protocols for arithmetic circuits, we have bench-
marked the computation of one epoch of logistic regression for 1280
examples of 10 features and batch size 128. The resulting circuit
features more than one million multiplications in more than 1000
rounds. Tables 5 and 6 show our results for one and two corrupted
players, respectively, on co-located AWS c5.9xlarge instances.
Note that we compute the sigmoid function accurately unlike for
example ABY3 [MR18].
For protocols computing binary circuits, we have implemented
the computation of an inner product of vectors input by two differ-
ent parties with 32-bit numbers. Tables 7 and 8 show our results
for one and two corrupted players, respectively, on co-located AWS
c5.9xlarge instances. Note that [CCD88] stands for computing a
binary circuit by embedding bits in into fields of characteristic two
to satisfy the conditions of Shamir’s secret sharing. Furthermore,
the protocol after [LPSY15] names the underlying protocol for the
BMR construction.
4 INTERNAL INTERFACES
In multi-party computation based on secret sharing it is essential
that parallel communication is bundled up to some extent. This
raises the question of how to translate that requirement into an
interface that is as easy to use as possible. Consider the following
simple operator overloading:
a = b * c
e = d * f
The two multiplications can be run in parallel. However, the com-
munication implied by the first line has to be deferred at least until
the execution of the second line, which means that that a cannot
represent an actual share but a deferred value instead, which in
Table 5: Time and communication for logistic regression with various protocols tolerating one corrupted party.
Marcel Keller
Security
Parties Modulo
Semi-honest
Covert
Malicious
Malicious
3
2
2
4
3
2
264
128-bit prime
128-bit prime
264
128-bit prime
128-bit prime
128-bit prime
128-bit prime
264
264
264
128-bit prime
128-bit prime
128-bit prime
128-bit prime
264
128-bit prime
Protocol
[AFL+16]
[AFL+16]
[CDM00]
[DEF+19]-
[KOS16]-
[KPR18]- (semi HE)
[KPR18]- (somewhat HE)
[KPR18]∗ (semi HE)
[KPR18]∗ (somewhat HE)
[DEK20]
[EKO+20] (post-sacrifice)
[ADEN19]
[LN17] (replicated)
[CGH+18] (replicated)
[LN17] (Shamir)
[CGH+18] (Shamir)
[DEF+19]
[KOS16]
Time (s) Comm. (MB)
62
245
490
8,173
41,424
2,367
2,593
15,578
27,130
78
249
274
566
658
1,888
2,317
109,189
225,670
0.62
4.41
5.31
27.52
267.24
134.44
539.50
1173.91
3708.61
1.14
11.09
5.30
11.09
18.78
18.25
206.02
973.17
2336.57
Table 6: Time and communication for logistic regression with various protocols tolerating two corrupted parties.
Security
Parties Modulo
Semi-honest
Covert
Malicious
5
3
3
5
3
128-bit prime
264
128-bit prime
128-bit prime
128-bit prime
128-bit prime
128-bit prime
264
128-bit prime
Protocol
[CDM00]
[DEF+19]-
[KOS16]-
[KPR18]- (semi HE)
[KPR18]- (somewhat HE)
[KPR18]∗ (semi HE)
[KPR18]∗ (somewhat HE)