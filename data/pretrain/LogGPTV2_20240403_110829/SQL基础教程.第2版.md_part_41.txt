INSERT INTO Product (product_id, product_name, product_type, sale_price, 
purchase_price, regist_date)
VALUES (NULL, '刀子', NULL, 300, NULL, '2009-11-02');
附录 练习题答案 313 ●
product_id（商品编号）、product_name（商品名称）、product_type（商
品种类）3列在表定义时都被赋予了NOT NULL约束A。因此，向product_id（商
品编号）以及product_type（商品种类）中插入NULL的INSERT语句是无法执
行的。
并且，INSERT语句中只对product_name（商品名称）、sale_price（销
售单价）、regist_date（登记日期）3列进行了赋值，所以剩余的列都会被自动插
入NULL，于是就发生了错误。
注A
其实product_id（商品编号）是被赋予了主键约束，但其中默认包含了NOT NULL约束。
5.3
SELECT product_id,
product_name,
product_type,
sale_price,
(SELECT AVG(sale_price) FROM Product) AS sale_price_all
FROM Product;
» >>解答
使用标量子查询来计算销售单价的平均值。由于平均销售单价是2097.5这样一
个单值，可以确定为标量值，因此可以书写在SELECT子句之中。
但是有没有读者会想到如下SELECT语句呢？
SELECT product_id,
product_name,
product_type,
sale_price,
AVG(sale_price) AS sale_price_all
FROM Product;
上述SELECT语句会发生错误B。原因在于AVG是一个聚合函数。正如3-2节说
明的那样，使用聚合函数时对书写在SELECT子句中的要素有很多限制。使用了这种
错误方法的读者请重新阅读一下3-2节中“常见错误①——在SELECT子句中书写了
多余的列”部分的内容。
注B
虽然在MySQL中该SELECT语句不会发生错误，但毕竟这只是基于MySQL特定需求的结果，无法在其他的DBMS中使用，并
且得到的结果也完全不同。
● 314 附录 练习题答案
5.4
-- 创建视图的语句
CREATE VIEW AvgPriceByType AS
SELECT product_id,
product_name,
product_type,
sale_price,
(SELECT AVG(sale_price)
FROM Product P2
WHERE P1.product_type = P2.product_type
GROUP BY P2.product_type) AS avg_sale_price
FROM Product P1;
-- 删除视图的语句
DROP VIEW AvgPriceByType;
» >>解答
在视图中包含的列中，除了avg_sale_price之外的4列（product_id、
product_name、product_type、sale_price）在 Product 表中都存在，
因此可以直接读取。但是，最后的avg_sale_price（平均销售单价）则必须使
用关联子查询进行结算。使用标量子查询和关联子查询也可以创建出上述视图。
6.1 ①的答案
product_name | purchase_price
--------------+----------------
打孔器 | 320
擦菜板 | 790
» >>解答
对于①的结果应该没有什么疑问。因为要选取的是进货单价（purchase_
price）为500日元、2800日元、5000日元之外的商品（product_name），所以
会得到320日元的打孔器和790日元的擦菜板两条记录。此外，不仅是IN，通常的
谓词都无法与NULL进行比较，因此进货单价（purchase_price）为NULL的叉
子和圆珠笔都没有出现在结果之中。
②的答案：无法取出任何记录
product_name | purchase_price
--------------+----------------
附录 练习题答案 315 ●
» >>解答
②的结果有必要说明一下。②的SQL仅仅是在①的NOT IN的参数中增加了
NULL。并且①的结果中已经排除了进货单价（purchase_price）为NULL的记录，
因此大家可能会觉得②的结果也是如此。但让人吃惊的是②的SQL却无法选取出
任何记录。不仅仅是进货单价为NULL的记录，连从①中选取出的打孔器和擦菜板
也不见了。
其实这是SQL中最危险的陷阱。NOT IN的参数中包含NULL时结果通常会为空，
也就是无法选取出任何记录。
为什么会得到这样的结果呢？其中的理由十分复杂，属于中级学习的范畴，因此
本书中不会详细介绍A。这里希望大家了解的是NOT IN的参数中不能包含NULL。
不仅仅是指定NULL的情况，使用子查询作为NOT IN的参数时，该子查询的返回值
也不能是NULL。请大家一定要遵守这一规定。
注A
想要了解为什么NOT IN会得到这样结果的读者，可以参考拙著《达人に学ぶ SQL彻底指南书》（翔泳社）中1-3节的内容。
6.2
SELECT SUM(CASE WHEN sale_price = 3001
THEN 1 ELSE 0 END) AS high_price
FROM Product;
» >>解答
大家发现了吗？这与我们在6-3节中的“CASE表达式的书写位置”中学过的使
用CASE表达式进行行列变换是相似的问题。如果能够使用CASE表达式创建出3个
分类条件的话，之后就可以将其与聚合函数进行组合了。只有计算中间额度商品B的
条件中的BETWEEN需要注意一下。
注B
此处的“中间额度”是笔者创造出来的词语，大家应该能理解其中的含义。
7.1 如下所示，会将Product表中的8行记录原封不动地选取出来。
● 316 附录 练习题答案
执行结果
product_id | product_name | product_type | sale_price | purchase_price | regist_date
----------+------------+------------+-----------+--------------+-----------
0001 | T恤衫 | 衣服 | 1000 | 500 | 2009-09-20
0002 | 打孔器 | 办公用品 | 500 | 320 | 2009-09-11
0003 | 运动T恤 | 衣服 | 4000 | 2800 |
0004 | 菜刀 | 厨房用具 | 3000 | 2800 | 2009-09-20
0005 | 高压锅 | 厨房用具 | 6800 | 5000 | 2009-01-15
0006 | 叉子 | 厨房用具 | 500 | | 2009-09-20
0007 | 擦菜板 | 厨房用具 | 880 | 790 | 2008-04-28
0008 | 圆珠笔 | 办公用品 | 100 | | 2009-11-11
» >>解答
可能有些读者会对此感到惊讶：“同时使用UNION和INTERSECT时，不是
INTERSECT会优先执行吗？”当然，从执行顺序上来说确实是从INTERSECT开始的，
但是在此之前，由于对同一张表使用了UNION或者INTERSECT，因此结果并不会
发生改变。也就是说，由于UNION或者INTERSECT未使用ALL，会排除掉重复的
记录，因此对同一张表来说，无论执行多少次操作，原表也不会发生改变。
7.2 SELECT语句如下所示。
SELECT COALESCE(SP.shop_id, '不确定') AS shop_id,
COALESCE(SP.shop_name, '不确定') AS shop_name,
P.product_id,
P.product_name,
P.sale_price
FROM ShopProduct SP RIGHT OUTER JOIN Product P
ON SP.product_id = P.product_id
ORDER BY shop_id;
» >>解答
大家想起这个名字有点奇怪的COALESCE函数了吗？该函数可以将NULL变换
为其他的值。虽然名字有些古怪，但使用却很频繁。特别是在希望改变外部连接结果
中的NULL时，该函数是唯一的选择，因此希望大家能够牢记。
8.1 结果如下。
product_id | product_name | sale_price | current_max_price
-----------+--------------+------------+-------------------
0001 | T恤衫 | 1000 | 1000 ←(1000)的最大值
0002 | 打孔器 | 500 | 1000 ←(1000, 500)的最大值
0003 | 运动T恤 | 4000 | 4000 ←(1000, 500, 4000)的最大值
0004 | 菜刀 | 3000 | 4000 ←(1000, 500, 4000, 3000)的最大值
附录 练习题答案 317 ●
0005 | 高压锅 | 6800 | 6800
0006 | 叉子 | 500 | 6800
0007 | 擦菜板 | 880 | 6800
0008 | 圆珠笔 | 100 | 6800
» >>解答
本题中SELECT语句的含义是“按照商品编号（product_id）的升序进行排序，
计算出截至当前行的最高销售单价”。因此，在显示出最高销售单价的同时，窗口函
数的返回结果也会变化。这恰好和奥运会等竞技体育的最高记录不断变化相似。随着
商品编号越来越大，计算最大值的对象范围也不断扩大。就像随着时代变迁，运动员
数量也会逐渐增加，要选出“历代第一”也会越来越难。
8.2 ①和②两种方法都可以实现。
①regist_date为NULL时，显示“1年1月1日”
SELECT regist_date, product_name, sale_price,
SUM (sale_price) OVER (ORDER BY COALESCE(regist_date, CAST('0001-01- 
01' AS DATE))) AS current_sum_price
FROM Product;
②regist_date为NULL时，将该记录放在最前显示
SELECT regist_date, product_name, sale_price,
SUM (sale_price) OVER (ORDER BY regist_date NULLS FIRST) AS current 
_sum_price
FROM Product;
两组答案的结果都如下所示。
r egist_date | product_name | sale_price |c urrent_sum_price
------------+--------------+------------+------------------
| 运动T恤 | 4000 | 4000 ← N ULL的记录会
2 008-04-28 | 擦菜板 | 880 | 4880 显示在最前面
2 009-01-15 | 高压锅 | 6800 | 11680
2 009-09-11 | 打孔器 | 500 | 12180
2 009-09-20 | T恤衫 | 1000 | 16680
2 009-09-20 | 菜刀 | 3000 | 16680
2 009-09-20 | 叉子 | 500 | 16680
2 009-11-11 | 圆珠笔 | 100 | 16780
» >>解答
首先来看一下①，这种方法比较简单。使用COALESCE函数可以将NULL转换
为“ 1年1月1日（公历）”。这样得到的结果就比其他任何日期都早了（即使同为“1
● 318 附录 练习题答案
年1月1日”也没有关系）。这种“欺骗”DBMS的方法恐怕很多读者都想到了吧。这
也是在所有DBMS中通用的方法。
接下来我们再来看一下②，其中包含了本书并未介绍的使用NULLS FIRST选项
的方法。通过在ORDER BY子句中指定该选项，可以显式地给DBMS下达指令，在排
序时将NULL放在最前面。目前该方法也是在支持窗口函数的DBMS中通用的方法。
本书之所以并未提及上述功能，是因为该功能并不是标准SQL支持的功能，而
是依存于DBMS的实现。关于NULL的顺序，标准SQL中只规定要“排列在开头或
者末尾”，至于到底是开头还是末尾，以及显式地指定的方法，都依存于DBMS的实现。
因此，大家需要注意，这些功能随时都有可能因为某个DBMS的需求改变而无
法继续使用。
9.1
import java.sql.*;
public class DBIns{
public static void main(String[] args) throws Exception {
/* 1) PostgreSQL的连接信息 */
Connection con;
Statement st;
String url = "jdbc:postgresql://localhost:5432/shop";
String user = "postgres";
String password = "test";
/* 2) 定义JDBC驱动 */
Class.forName("org.postgresql.Driver");
/* 3) 连接PostgreSQL */
con = DriverManager.getConnection(url, user, password);
st = con.createStatement();
/* 4) 执行INSERT语句并显示结果 */
int inscnt=0;
inscnt = st.executeUpdate("INSERT INTO Product VALUES ('0001', 
'T恤衫', '衣服', 1000, 500, '2009-09-20')");
System.out.println(inscnt + "行已经插入");
inscnt = st.executeUpdate("INSERT INTO Product VALUES ('0002', 
'打孔器', '办公用品', 500, 320, '2009-09-11')");
System.out.println(inscnt + "行已经插入");
inscnt = st.executeUpdate("INSERT INTO Product VALUES ('0003', 
'运动T恤', '衣服', 4000, 2800, NULL)");
System.out.println(inscnt + "行已经插入");
附录 练习题答案 319 ●
inscnt = st.executeUpdate("INSERT INTO Product VALUES ('0004', 
'菜刀', '厨房用具', 3000, 2800, '2009-09-20')");
System.out.println(inscnt + "行已经插入");
inscnt = st.executeUpdate("INSERT INTO Product VALUES ('0005', 
'高压锅', '厨房用具', 6800, 5000, '2009-01-15')");
System.out.println(inscnt + "行已经插入");
inscnt = st.executeUpdate("INSERT INTO Product VALUES ('0006', 
'叉子', '厨房用具', 500, NULL, '2009-09-20')");
System.out.println(inscnt + "行已经插入");
inscnt = st.executeUpdate("INSERT INTO Product VALUES ('0007', 
'擦菜板', '厨房用具', 880, 790, '2009-04-28')");
System.out.println(inscnt + "行已经插入");
inscnt = st.executeUpdate("INSERT INTO Product VALUES ('0008', 
'圆珠笔', '办公用品', 100, NULL, '2009-11-11')");
System.out.println(inscnt + "行已经插入");
/*5) 断开与PostgreSQL的连接 */
con.close();
}
}
表示下一行接续本行，只是由于版面所限而换行。
编译
C：\PostgreSQL\java\jdk\bin\javac DBIns.java
执行
C：\PostgreSQL\java\jdk\bin\java –cp C:\PostgreSQL\jdbc\*;. DBIns
» >>解答
执行成功后，会在命令提示符窗口显示如下8行信息。
执行结果
1行已经插入
1行已经插入
1行已经插入
1行已经插入
1行已经插入
1行已经插入
1行已经插入
1行已经插入
可以通过执行SELECT语句来确认数据是否已经插入Product表中。
另外，在命令行窗口显示信息的语句[System.out.println(inscnt +
"行已经插入");]即使不写也不会影响插入功能的实现，写出来是为了在发生错误时
方便调查。
● 320 附录 练习题答案
9.2
import java.sql.*;
public class DBUpd{
public static void main(String[] args) throws Exception {
/* 1) PostgreSQL的连接信息 */
Connection con;
Statement st;
String url = "jdbc:postgresql://localhost:5432/shop";
String user = "postgres";
String password = "test";
/* 2) 定义JDBC驱动 */
Class.forName("org.postgresql.Driver");
/* 3) 连接PostgreSQL */
con = DriverManager.getConnection(url, user, password);
st = con.createStatement();
/* 4) 执行UPDATE语句 */
int inscnt=0;
inscnt = st.executeUpdate("UPDATE Product SET product_name = 'Y恤衫' 
WHERE product_id = '0001'");
System.out.println(inscnt + "行已经更新");
/*5) 断开与PostgreSQL的连接 */
con.close();
}
}
表示下一行接续本行，只是由于版面所限而换行。
编译
C：\PostgreSQL\java\jdk\bin\javac DBUpd.java
执行
C：\PostgreSQL\java\jdk\bin\java –cp C:\PostgreSQL\jdbc\*;. DBUpd
» >>解答
执行成功后，会在命令提示符窗口显示如下1行信息。
执行结果
1行已经更新
执行UPDATE语句时，和执行INSERT一样，使用的是executeUpdate方法。后
面的部分就是把UPDATE语句作为参数来执行。