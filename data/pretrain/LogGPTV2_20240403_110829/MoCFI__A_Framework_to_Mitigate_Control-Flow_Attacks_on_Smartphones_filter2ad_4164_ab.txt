arbitrary program behavior by only combining small code
pieces from different parts of linked libraries.
Recent news underline that control-ﬂow attacks are a se-
vere problem on smartphones. In particular, control-ﬂow at-
tacks can be utilized to steal the user’s SMS database [26],
to open a remote reverse shell [27], or to launch a jail-
break [13]. Unfortunately, there is no general countermea-
sure to defeat such attacks on smartphones.
3.2. Control-Flow Integrity (CFI) on x86
A general approach to defeat control-ﬂow attacks is the
enforcement of control-ﬂow integrity (CFI) [1]. Basically,
CFI guarantees that a program always follows a valid exe-
cution path in the CFG, where the CFG is created ahead of
time by means of static analysis. This is achieved by check-
ing branch instructions of the BBLs: such instructions are
overwritten with a new block of instructions that validates
if the branch instruction targets a valid execution path in the
CFG. For instance, in Figure 1, CFI would check if the exit
instruction of BBL3 targets BBL5. In particular, the CFI
prototype implementation presented by Abadi et al. [1] in-
serts unique labels just above each entry instruction. Hence,
the CFI validation routine only has to check whether the
branch address targets an instruction that is preceded by a
valid label. However, the adoption and adaption of CFI (as
presented in [1]) to smartphone platforms involves several
difﬁculties and challenges.
3.3. Technical Challenges on Smartphone Platforms
No Dedicated Return Instruction. As mentionend in
Section 2.1, ARM does not provide dedicated return in-
structions. Instead, any branch instruction can be used as
a return. Moreover, returns may have side-effects, meaning
that the return does not only enforce the return to the caller,
but also loads several registers within a single instruction.
Hence, in contrast to Intel x86, a CFI solution for ARM has
to handle all different kinds of returns, and has to ensure
that all side effects of the return are properly handled.
Multiple Instruction Sets. CFI on ARM is further com-
plicated by the presence of two instruction sets (ARM and
THUMB), which can even be interleaved. Hence, it is nec-
essary to distinguish between both cases during the analysis
and enforcement phase, and to ensure the correct switching
between the two instruction sets at runtime.
Direct Access to the Program Counter. Another differ-
ence is that the ARM program counter pc is a general-
purpose register which can be directly accessed by a number
of instructions, e.g., arithmetic instructions are allowed to
load the result of an arithmetic operation directly into pc.
Furthermore, a load instruction may use the current value
of pc as base address to load a pointer into another register.
This complicates a CFI solution on ARM, since we have
to consider and correctly handle all possible control-ﬂow
changes, and also preserve the accurate execution of load
instruction that use pc as base register.
The technical challenges are due to the architectural dif-
ferences between ARM (RISC design) and Intel x86 (CISC
design), and because of the speciﬁcs of smartphone operat-
ing systems. These highly inﬂuence and often complicate a
CFI solution as we argue in the following.
Application Signing and Encryption. Smartphone oper-
ating systems typically feature application encryption and
signing. Since the traditional CFI approach [1] performs
changes on the stored binary, the signature of the applica-
tion cannot be veriﬁed anymore.
entry INS, INS, … exit BBL 1 entry INS, INS, … exit BBL 3 entry INS, INS, … exit BBL 2 entry INS, INS, … exit BBL 4 Shellcode New Code Instruction Sequences Functions Existing Code entry INS, INS, … exit BBL 5 2a 2b Return-oriented Programming or return-into-libc attack Code injection attack Adversary 1 Exploits vulnerability Figure 2. Control-ﬂow integrity for smartphone applications
Closed-Source OS. Several smartphone OSes (such as
iOS) are closed-source. Hence, we cannot change the actual
OS to deploy CFI on smartphones. Moreover, end-users and
even App Store maintainers (e.g., Apple’s App Store) have
no access to the application source code. Hence, a compiler-
based CFI solution is not practicable from the end-user’s
perspective.
4. Design of our CFI Framework
Our general architecture is shown in Figure 2. From a
high-level point of view, our system is separated in two dif-
ferent phases: static analysis and runtime enforcement. The
static tools perform the initial analysis of the compiled ap-
plication binary ﬁle. In the preprocessing phase, we ﬁrst
decrypt and disassemble the binary (step 1). Afterwards,
we thoroughly analyze the application binary and its struc-
ture (step 2): In particular, we generate the control-ﬂow
graph (CFG) of the application and employ a branch de-
tector to identify all branches contained in the binary and
extract all information that is necessary to enforce CFI at
runtime. Note that these steps have to be performed only
once after compilation and can be integrated as an addi-
tional step in the deployment phase of a typical smartphone
application. Finally, we monitor the application at runtime
by applying our MoCFI shared library that rewrites the bi-
nary at load-time (step 3) and enforces control-ﬂow restric-
tions while the application executes (step 4).
Although the depicted design applies in general to all
CFI solutions, our design requires a number of changes,
mainly due to (i) the architectural differences between ARM
and Intel x86, (ii) the missing binary rewriter and automatic
graph generation for ARM, and (iii) the speciﬁcs of smart-
phone operating systems. In the following we describe each
involved system component and our approach in more de-
tail.
Preprocessor. The ﬁrst step of our static analysis phase is
performed within the preprocessor component, which has
mainly two tasks: (1) decrypting, and (2) disassembling the
target application binary. In particular, we faced the chal-
lenge that smartphone applications are often encrypted by
default (e.g., iOS applications). We thus obtain the unen-
crypted code of a binary through process dumping [19].
For disassembling the application binary we deploy stan-
dard disassembler tools that support the ARM architecture.
Binary Analysis. The original CFI work for Intel x86 [1]
employs the binary instrumentation framework Vulcan [18]
to automatically derive the CFG and to statically rewrite an
application binary. However, such a framework does not ex-
ist for ARM. Hence, we developed own techniques to accu-
rately generate the CFG. After our preprocessor decrypted
and disassembled the application binary, we identify all
relevant branches contained in the binary. By relevant
branches, we refer to branch instructions that an adversary
may exploit for a control-ﬂow attack. These mainly com-
prise indirect branches, such as indirect jumps and calls,
and function returns. Moreover, we include direct function
calls to correctly validate function returns, i.e., to be able
to check if a function return targets the original caller. We
do not instrument direct jump instructions for obvious rea-
sons: the target address for these are ﬁxed (hard-coded), and
hence cannot be manipulated by an adversary. Finally, we
store meta information for each indirect branch and func-
tion call (e.g., instruction address, length, type, etc.) in a
separate patchﬁle.
Based on the result of the branch detector, we generate
the CFG by static tools that we developed ourselves.
In
particular, our static tools calculate possible target addresses
for each indirect branch. Finally, a binary representation of
the CFG is stored in a separate ﬁle (denoted as Control-
Flow Graph), which is linked to the smartphone application
at runtime.
Unprotected and encrypted iOS Binary Preprocessor Decryption Disassembling Unprotected plain   iOS Binary Binary Analysis Control-Flow Graph MoCFI CFI-Protected Application ins 1 jump MoCFI 1 2 3 4 Patchfile Load-Time Module Runtime Module Binary Rewriting CFI Enforcement Static Analysis Runtime Enforcement Unprotected and encrypted Application Unprotected plain   Application Patchfile Control-Flow Graph 10011… 01100… ins 1 jump A Branch Detector CFG Generator MoCFI Load-Time Module: Binary Rewriting. The
binary rewriting engine is responsible for binding addi-
tional code to the binary that checks if the application fol-
lows a valid path of the CFG. Typically, one replaces all
branch instructions in the binary with a number of new in-
structions that enforce the control-ﬂow checks [1]. How-
ever, replacing one instruction with multiple instructions
requires memory adjustments, because all instructions be-
hind the new instructions are moved downwards. The
Intel x86 approach uses the Vulcan binary instrumenta-
tion framework [18] which automatically accomplishes this
task. However, memory adjustment without a full binary
rewriting framework requires high implementation efforts.
Due to the limited possibilities to change smartphone
binaries (due to code signing) and the missing full bi-
nary rewriter, we opted for the following rewriting ap-
proach (which has been originally proposed by Winwood
et al. [44]). At load-time we replace all relevant branches
(based on the extracted rewriting) with a single instruction:
the so-called dispatcher instruction. The dispatcher instruc-
tion redirects the control-ﬂow to a code section where the
CFI checks reside, namely to the runtime module of our
MoCFI shared library.
This approach also raises several problems: First, accu-
rate branch instructions have to be implemented that are
able to jump to the correct CFI check. Second, the CFI
checks require information from where the dispatch origi-
nated. As we will demonstrate in the rest of the paper, our
solution efﬁciently tackles the above mentioned problems.
MoCFI Runtime Module: Control-Flow Integrity En-
forcement. The key insight of CFI is the realization of
control-ﬂow validation routines. These routines have to val-
idate the target of every branch to prevent the application
from targeting a BBL beyond the scope of the CFG and
the current execution path. Obviously, each branch target
requires a different type of validation. While the target ad-
dress of an indirect jump or call can be validated against a
list of valid targets, the validation of function returns re-
quires special handling because return addresses are dy-
namic and cannot be predicted ahead of time. To address
this issue, MoCFI reuses the concept of shadow stacks that
hold valid copies of return addresses [12], while the return
addresses are pushed onto the shadow stacks when a func-
tion call occurs.
5. Implementation Details
Our prototype implementation targets iOS 4.3.1, and we
successfully applied to 4.3.2 as well. We developed the
static analysis tools (842 lines of code) with the IDC script-
ing language featured by the well-known disassembler IDA
Pro 6.0. Moreover, we used Xcode 4 to develop the MoCFI
library (1,430 lines of code). Our prototype implementa-
tion currently protects the application’s main code, but no
dynamic libraries that are loaded into the process. Hence,
an adversary may launch a control-ﬂow attack by exploit-
ing a shared library. We leave support for shared libraries
open to future work. However, it is straightforward to ex-
tend MoCFI accordingly, there are no new conceptional ob-
stacles to overcome. We now describe how we generate the
CFG and the patchﬁle of an iOS binary, and in particular
present implementation details of our MoCFI library.
5.1. Static Analysis
Since iOS restricts access to source code, we apply our
static analysis techniques directly on iOS binaries to gener-
ate the CFG and to identify all branches in the binary. We
need the former one to validate if a branch follows a valid
execution path, while the latter one is used to guarantee ac-
curate binary rewriting. To perform this task, we use the
IDA Pro v6.0 Disassembler that enables us to accurately
disassemble ARM and THUMB code. Speciﬁcally, we im-
plemented IDA scripts to automate the analysis and extract
the necessary information from a given binary.
Patchﬁle Generation. As shown in Figure 2 in Section 4,
step 2 involves the generation of rewriting information for
each individual binary. This information is required by the
load-time module of MoCFI to replace each branch instruc-
tion with a new instruction that redirects execution to the
accurate CFI validation routine. In order to identify all rel-
evant branch instructions, we evaluate each instruction be-
longing to the text segment and check if the instruction is
relevant in the context of CFI. Afterwards, we perform a
ﬁne-grained instruction analysis and store the derived meta
information (e.g.
instruction address, mode, length, type,
etc.) in the patchﬁle. By bundling the patchﬁle with the
application, we can protect its integrity, as all application
bundle contents are code-signed.
Generation of the Control-Flow Graph.
In order to gen-
erate the CFG, we utilize IDA Pro to divide the binary into
basic blocks (BBLs, see Section 3) and gather all assembly
instructions that divert the control-ﬂow. These instructions
can be divided in two categories: (1) instructions that con-
tain their possible control-ﬂow destination as an immedi-
ate value, (2) instructions that continue control-ﬂow based
on the value of a register. While the ﬁrst type is trivial
in a W ⊕ X environment (i.e., the destination cannot be
changed), the latter case can only be checked during run-
time. Hence, as an optimization step and as argued in Sec-
tion 4, we remove type (1) branches from the CFG. Type (2)
branches are more challenging as the value they depend on
needs to be calculated during static analysis. If this is not
possible, heuristics have to be applied at runtime to narrow
the possible control-ﬂow destinations. Therefore, it is im-
possible to construct the CFG in all cases. Note that this is
a general shortcoming of all CFG generation methods and
not speciﬁc to our approach.
PiOS [19] and former reverse-engineering work on iOS [17,
32] to generate CFG information for objc_msgSend
calls.
5.2. Control-Flow Integrity Checking with MoCFI
Indirect Branches and Heuristics.
To calculate the target address of an indirect branch (e.g.,
LDR pc,[r2,r3,LSL #2]), the registers have to be
tracked backwards and all of their possible values must be
calculated. In the above example, the target (pc) is calcu-
lated as pc ← r2 + r3 · 4. If r2 and r3 can be tracked,
the correct value can be extracted.
0x1000: MOV
0x1004: ADD.W
0x1008: MOV
r2, 0x2000
r2, r2, r3, LSL#2
pc, r2
0x2000: B.W
0x2004: B.W
0x2008: B.W
0x3000
0x3100
0x3200
Listing 1. Indirect Jump with jump table
Listing 1 is a common compiler-generated pattern to op-
timize switch-statements. Depending on r3, the possi-
ble control-ﬂow targets (pc) are 0x3000, 0x3100, and
0x3200 and our analysis can recover these possibilities.
In case an indirect branch cannot be resolved (e.g. hand-
written assembler code), it is possible to apply a heuristic in
order to constrain the control-ﬂow. A general constraint on
ARM is that the target address must be a multiple of the in-
struction length. For indirect calls this constraint can be nar-
rowed down to the beginning of functions. Even though it
is still possible to call arbitrary functions, the target control-
ﬂow cannot land inside a function body.
Indirect jumps (BX) can be constrained to only take place
inside one function body, i.e., not crossing function bound-
aries. Despite there is no technical need for this restriction,
the C, C++ and Objective-C languages restrict control-
ﬂow to the scope of one function, with the exception of
function calls. Hence, we can assume that the scope of in-
direct jumps is limited by the boundary of a function body.
Objective-C Peculiarities. Traditional CFG generation
techniques also need to be extended for iOS applications
due to a peculiarity of Objective-C. Internally, any method
call of an Objective-C object is resolved to a call to the