# 二、使用 Python 创建 REST 服务
按照上一章中的例子，我们将设计为整体的系统分成了更小的服务。在本章中，我们将详细分析我们在上一章中提到的一个微服务(思想后端)。
我们将讨论如何使用 Python 将这个微服务开发为应用。该微服务将准备好通过标准的 web RESTful 界面与其他微服务进行交互，使其成为我们全球微服务架构系统的基础。
我们将讨论不同的元素，如应用编程接口设计、支持它的数据库模式，以及如何实现和如何实现微服务。最后，我们将看到如何测试应用，以确保它正常工作。
本章将涵盖以下主题:
*   后端微服务的思想分析
*   设计 RESTful 应用编程接口
*   定义数据库模式
*   实现服务
*   测试代码
到本章结束时，您将知道如何成功开发微服务应用，包括从设计到测试的不同阶段。
# 技术要求
思想后端的例子可以在这里找到。安装和运行说明可在其`README.md`文件中找到。
# 后端微服务的思想分析
让我们记住上一章中创建的微服务图:
![](img/f0b5a8c0-862d-494e-bfb4-4077bf0f8dd6.png)
该图显示了我们的示例系统的不同元素:两个后端、用户和想法以及 HTML 前端。
**思想后端**将负责存储新的思想，检索现有的思想，并搜索数据库。
# 了解安全层
由于思想后端将在外部可用，我们需要实现一个安全层。这意味着我们需要识别产生动作的用户并验证它们的有效性。对于这个服务示例，我们将从登录的用户创建一个新的想法，并且我们将检索我的想法，由当前登录的用户创建的想法。
Note the fact that the user is logged also validates the fact that the user exists.
这个安全层将是一个标题的形状。这个头将包含由用户后端签名的信息，验证其来源。它将采取**JSON Web Token**(**JWT**)[https://jwt.io/introduction/](https://jwt.io/introduction/)的形式，这是用于此目的的标准。
The JWT itself is encrypted, but the information contained here is mostly only relevant for checking the user that was logged.
A JWT is not the only possibility for the token, and there are other alternatives such as storing the equivalent data in a session cookie or in more secure environments using similar modules such as PASETO ([https://github.com/paragonie/paseto](https://github.com/paragonie/paseto)). Be sure that you review the security implications of your system, which are beyond the scope of this book.
这个方法应该由**用户后端**团队来处理，打包好让其他微服务可以使用。在本章中，我们将在这个微服务中包含代码，但是我们将在后面看到如何创建它，以便它与用户后端相关。
如果请求没有有效的头，应用编程接口将返回 401 未授权状态代码。
Note that not all API endpoints require authentication. In particular, `search` does not need to be logged.
了解了认证系统将如何工作，我们就可以开始设计 API 接口了。
# 设计 RESTful 应用编程接口
我们将遵循我们的应用编程接口的 RESTful 设计原则。这意味着我们将使用表示资源的构造 URIs，然后使用 HTTP 方法对这些资源执行操作。
In this example, we will only use the `GET` (to retrieve), `POST` (to create), and `DELETE` (to delete) methods as the thoughts are not editable. Remember that `PUT` (to overwrite completely) and `PATCH` (to perform a partial update) are also available.
RESTful APIs 的主要属性之一是请求需要是无状态的，这意味着每个请求都是完全独立的，可以由任何服务器提供服务。所有需要的数据应该在客户端(它将把它附加到请求中发送)或者在数据库中(这样服务器将完全检索它)。在处理 Docker 容器时，该属性是一个硬性要求，因为它们可以在没有警告的情况下被销毁和重新创建。
While it is common to have resources that map directly to rows in a database, this is not necessary. The resources can be a composition of different tables, part of them, or even represent something different altogether, such as an aggregation of data, whether certain conditions are met, or a forecast based on analysis on the current data.
Analyze the needs of the service and don't feel constrained by your existing database design. Migrating a microservice is a good opportunity to revisit the old design decisions and to try to improve the general system. Also, remember the Twelve-Factor App principles ([https://12factor.net/](https://12factor.net/)) for improving the design.
在开始应用编程接口设计之前，有一个关于 REST 的简短提醒总是好的，所以你可以查看[https://restfulapi.net/](https://restfulapi.net/)来回顾一下。
# 指定应用编程接口端点
我们的应用编程接口如下:
|  | **终点** | **需要认证** | **返回** |
| `GET` | `/api/me/thoughts/` | 是 | 用户想法列表 |
| `POST` | `/api/me/thoughts/` | 是 | 新创造的思想 |
| `GET` | `/api/thoughts/` | 不 | 所有想法列表 |
| `GET` | `/api/thoughts/X/` | 不 | ID 为`X`的思想 |
| `GET` | `/api/thoughts/?search=X` | 不 | 搜索所有包含`X`的思想 |
| `DELETE` | `/admin/thoughts/X/` | 不 | 删除 ID 为`X`的思想 |
注意 API 有两个元素:
*   一个公共 API，从`/api`开始:
    *   一个经过认证的公共 API，从`/api/me`开始。用户需要通过认证才能执行这些操作。未经验证的请求将返回 401 未授权状态代码。
    *   一个未经认证的公共 API，从`/api`开始。任何用户，即使没有经过认证，也可以执行这些操作。
*   管理应用编程接口(从`/admin`开始)。这个不会公开曝光。它免除了认证，并允许您执行非客户设计的操作。用前缀清楚地标记有助于审核操作，并清楚地表明它们不应该在您的数据中心之外可用。
一个想法的格式如下:
```
thought
{
    id integer
    username string
    text string
    timestamp string($date-time)
}
```
要创建一个，只需要发送文本。时间戳自动设置，ID 自动创建，用户名由认证数据检测。
As this is an example, this API is designed to be minimal. In particular, more administrator endpoints could be created to effectively impersonate a user and allow administrator actions. The `DELETE` action was the first action included as a way of cleaning tests.
最后一个细节:关于是否最好用最后一刀结束 URI 资源，存在一些争论。然而，当使用 Flask 时，用斜线定义它们将返回一个重定向状态代码`308 PERMANENT_REDIRECT`，用于没有正确结束的请求。无论如何，尽量保持一致，避免混淆。
# 定义数据库模式
数据库模式很简单，并且继承自整体。我们只关心思想，存储在`thought_model`表中，所以数据库结构如下:
| **场** | **类型** | **评论** |
| `id` | `INTEGER NOT NULL` | 主关键字 |
| `username` | `VARCHAR(50)` |  |
| `text` | `VARCHAR(250)` |  |
| `timestamp` | `DATETIME` | 创建时间 |
The thought_model table
该表在`thoughts_backend/models.py`文件中用代码表示，用以下代码以 SQLAlchemy 格式描述:
```
class ThoughtModel(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(50))
    text = db.Column(db.String(250))
    timestamp = db.Column(db.DateTime, server_default=func.now())
```
SQLAlchemy 能够为测试目的或开发模式创建表。对于本章，我们将数据库定义为 SQLite，它将数据存储在`db.sqlite3`文件中。
# 使用 SQLAlchemy
SQLAlchemy([https://www.sqlalchemy.org/](https://www.sqlalchemy.org/))是一个功能强大的 Python 模块，用于处理 SQL 数据库。使用高级语言(如 Python)处理数据库有两种方法。一种是保留低级方法，执行原始 SQL 语句，检索数据库中的数据。另一种是使用一个**对象关系映射器** ( **ORM** )来抽象数据库，并使用该接口，而不涉及它是如何实现的细节。
第一种方法在 Python 数据库 API 规范(PEP 249—[https://www.python.org/dev/peps/pep-0249/](https://www.python.org/dev/peps/pep-0249/))中得到了很好的体现，所有主要的数据库都遵循这种方法，比如 PostgreSQL 的`psycopg2`([http://initd.org/psycopg/](http://initd.org/psycopg/))。这主要是创建 SQL 字符串命令，执行它们，然后解析结果。这允许我们定制每个查询，但是对于重复的常见操作来说，效率并不高。PonyORM([https://ponyorm.org/](https://ponyorm.org/))是另一个例子，它没有那么低级，但仍然旨在复制 SQL 语法和结构。
对于第二种方法，最著名的例子可能是 Django ORM([https://docs.djangoproject.com/en/2.2/topics/db/](https://docs.djangoproject.com/en/2.2/topics/db/))。它使用定义的模型 python 对象来抽象数据库访问。对于常见的操作，它工作得非常好，但是它的模型假设数据库的定义是在我们的 Python 代码中完成的，映射遗留数据库可能会非常痛苦。ORM 创建的一些复杂的 SQL 操作可能会花费大量时间，而定制的查询可以节省大量时间。它也很容易执行缓慢的查询，甚至没有意识到，只是因为该工具从最终结果中抽象出了我们这么多。
SQLAlchemy([https://www.sqlalchemy.org/](https://www.sqlalchemy.org/))相当灵活，可以在光谱的两端工作。它不像 Django ORM 那样简单易用，但是它允许我们将现有的数据库映射到一个 ORM 中。这就是为什么我们将在我们的示例中使用它:它可以采用一个现有的、复杂的遗留数据库并对其进行映射，允许您以您想要的方式轻松执行简单的操作和复杂的操作。
Keep in mind that the operations we are going to be using in this book are quite simple and SQLAlchemy won't shine particularly in those tasks. But it's an invaluable tool if you're planning a complex migration from an old monolith that accesses the database through manually written SQL statements, to a newly created microservice. If you are already dealing with a complicated database, spending some time learning how to use SQLAlchemy will be invaluable. A well-tailored SQLAlchemy definition can perform some abstract tasks very efficiently, but it requires good knowledge of the tool.
Flask-SQLAlchemy([https://flask-sqlalchemy.palletsprojects.com/en/2.x/](https://flask-sqlalchemy.palletsprojects.com/en/2.x/))的文档是一个很好的开始，因为它总结了主要的操作，并且主要的 SQLAlchemy 文档一开始可能会让人不知所措。
定义模型后，可以使用模型中的`query`属性进行查询，并进行相应的过滤:
```
# Retrieve a single thought by its primary key
thought = ThoughtModel.query.get(thought_id)
# Retrieve all thoughts filtered by a username
thoughts = ThoughtModel.query.filter_by(username=username)
.order_by('id').all()
```
存储和删除行需要使用会话，然后提交它:
```
# Create a new thought
new_thought = ThoughtModel(username=username, text=text, timestamp=datetime.utcnow())
db.session.add(new_thought)
db.session.commit()
# Retrieve and delete a thought
thought = ThoughtModel.query.get(thought_id)
db.session.delete(thought)
db.session.commit()
```
查看如何配置数据库访问，查看`thoughts_backend/db.py`文件。
# 实现服务
为了实现这个微服务，我们将使用 Flask-RESTPlus([https://flask-restplus.readthedocs.io/en/stable/](https://flask-restplus.readthedocs.io/en/stable/))。这是一个长颈瓶([https://palletsprojects.com/p/flask/](https://palletsprojects.com/p/flask/))延伸。Flask 是一个众所周知的用于网络应用的 Python 微框架，它特别擅长实现微服务，因为它体积小，易于使用，并且与网络应用方面的常用技术栈兼容，因为它使用了**网络服务器网关接口** ( **WSGI** )协议。
# 介绍烧瓶-RESTPlus
Flask 能够实现 RESTful 接口，但是 Flask-RESTPlus 增加了一些非常有趣的功能，允许良好的开发实践和开发速度:
*   它定义了名称空间，这是创建前缀和构建代码的方式。这有助于长期维护，并在创建新端点时有助于设计。
If you have more than 10 endpoints in a single namespace, it may be a good time to consider dividing it. Use one namespace per file, and allow the size of the file to hint when it's a good idea to try to make a division.
*   它有一个解析输入参数的完整解决方案。这意味着我们有一种简单的方法来处理需要几个参数并验证它们的端点。使用*请求解析*([https://flask-restplus . readd docs . io/en/stable/Parsing . html](https://flask-restplus.readthedocs.io/en/stable/parsing.html))模块类似于使用 Python 标准库中包含的`argparse`命令行模块([https://docs.python.org/3/library/argparse.html](https://docs.python.org/3/library/argparse.html))。它允许在请求正文、标题、查询字符串甚至 cookies 中定义参数。
*   同样，它有一个用于结果对象的序列化框架。Flask-RESTful 称之为**响应编组**([https://flask-restplus . read the docs . io/en/stable/编组. html](https://flask-restplus.readthedocs.io/en/stable/marshalling.html) )。这有助于定义可重用的对象，澄清接口并简化开发。如果启用，它还允许返回部分对象的字段掩码。
*   它有完整的斯瓦格应用编程接口文档支持。斯瓦格([https://swagger.io/](https://swagger.io/))是一个开源项目，按照标准的 OpenAPI 规范，帮助 RESTful API web 服务的设计、实现、文档化和测试。Flask-RESTPlus 自动生成斯瓦格规范和自我记录页面:
![](img/c4c54c31-5d8e-4b11-b13b-9e3d21a30b6c.png)
The main Swagger documentation page for the Thoughts Backend API, generated automatically
Flask 的其他优秀元素源自这样一个事实，即它是一个受欢迎的项目，并且有许多受支持的工具:
*   我们将使用 SQLAlchemy 的连接器，Flask-SQLAlchemy([https://flask-sqlalchemy.palletsprojects.com/en/2.x/](https://flask-sqlalchemy.palletsprojects.com/en/2.x/))。它的文档涵盖了大多数常见的情况，而 SQLAlchemy 的文档更详细，可能有点让人难以招架。
*   为了运行测试，`pytest-flask`模块([https://pytest-flask.readthedocs.io/en/latest/](https://pytest-flask.readthedocs.io/en/latest/))创建了一些夹具，准备与 Flask 应用一起工作。我们将在*测试代码*部分对此进行更多讨论。
# 处理资源
典型的 RESTful 应用具有以下一般结构:
1.  一个网址定义的**资源**。该资源允许通过 HTTP 方法(`GET`、`POST`等)执行一个或多个操作。
2.  当每个动作被调用时，框架路由请求，直到定义的代码执行该动作。
3.  如果有任何输入参数，首先需要对它们进行验证。
4.  执行操作并获得结果值。此操作通常涉及对数据库的一个或多个调用，这将以模型的形式完成。
5.  准备结果值，并以客户端可以理解的方式进行编码，通常是在 JSON 中。
6.  用适当的状态代码将编码值返回给客户端。
这些动作大部分是由框架完成的。一些配置工作需要完成，但这是我们的网络框架，在这个例子中是 Flask-RESTPlus，最有帮助的地方。特别是除了*第四步*以外的一切都会大大简化。
让我们看一个简单的代码示例(在 GitHub 中提供)来描述它:
```
api_namespace = Namespace('api', description='API operations')
@api_namespace.route('/thoughts//')
class ThoughtsRetrieve(Resource):
    @api_namespace.doc('retrieve_thought')
    @api_namespace.marshal_with(thought_model)
    def get(self, thought_id):
        '''
        Retrieve a thought
        '''
        thought = ThoughtModel.query.get(thought_id)
        if not thought:
            # The thought is not present
            return '', http.client.NOT_FOUND
        return thought
```
这实现了`GET /api/thoughts/X/`动作，通过 ID 检索单个思想。
让我们分析每一个元素。注意这些行是按主题分组的:
1.  首先，我们通过资源的网址来定义资源。注意`api_namespace`为 URL 设置`api`前缀，这验证了参数`X`是一个整数:
```
api_namespace = Namespace('api', description='API operations')
@api_namespace.route('/thoughts//')
class ThoughtsRetrieve(Resource):
    ...
```
2.  类允许您对同一资源执行多个操作。在这种情况下，我们只做一个:`GET`动作。
3.  请注意，编码在 URL 中的`thought_id`参数作为参数传递给方法:
```
class ThoughtsRetrieve(Resource):
    def get(self, thought_id):
        ...
```
4.  我们现在可以执行该操作，即在数据库中搜索以检索单个对象。调用`ThoughModel`搜索指定的思想。如果找到，则返回一个`http.client.OK (200)`状态代码。如果没有找到，将返回一个空结果和一个`http.client.NOT_FOUND 404`状态代码:
```
def get(self, thought_id):
    thought = ThoughtModel.query.get(thought_id)
    if not thought:
        # The thought is not present
        return '', http.client.NOT_FOUND
    return thought
```