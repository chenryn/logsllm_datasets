# 十一、云上的 Docker
在本章中，我们将介绍以下食谱:
*   自动装卸系统的 Docker
*   为 AWS 在 Docker 上部署 WordPress
*   蓝色 Docker
*   部署 Joomla！蓝色 Docker
# 介绍
前面几章我们讲了很多如何在单个主机上使用 Docker，在[第 8 章](08.html)、 *Docker 编排和托管平台*、*T5】中我们甚至讲了如何使用编排在多个主机上使用。如今最流行的使用 Docker 的方式之一是在云中。有许多流行的云平台可用，在每个平台上设置和运行 Docker 有点不同。为了简化这个过程，Docker 推出了两款新产品:AWS 的 Docker 和 Azure 的 Docker。*
这些产品的目标是尽可能轻松地引导您的 Docker 环境。每种产品都使用云平台的本地工具来建立 Docker Swarm 集群。您应该能够在几分钟内从无到有到完全集群。一旦集群启动并运行，它就类似于任何其他 Swarm 集群，您可以使用我们之前学习过的相同 Docker 工具来管理它。
在本章中，我们将学习如何为 AWS 设置 Docker 和为 Azure 设置 Docker，并为两者部署一个应用。
# 自动装卸系统的 Docker
**亚马逊网络服务** ( **AWS** )是目前最大、最受欢迎的云平台。AWS 提供了几种在云上运行 Docker 工作负载的不同方式。您可以使用弹性豆茎、**弹性容器服务** ( **ECS** )或【Kubernetes 弹性容器服务 ( **EKS** )。这些产品中的每一个都有不同的功能，允许您做不同的事情。这些产品都不是 Docker 原生产品，需要您学习一套新的工具和库才能启动和运行 Docker 应用。
AWS 的 Docker 使用与这些产品相同的云原生工具，但提供了更多的 Docker 原生体验。一旦为 AWS 设置了 Docker，您就可以使用您已经知道的相同的 Docker 工具和 API 来将您的 Docker 工作负载部署到 AWS。
# 准备好
在我们为 AWS 安装 Docker 之前，您需要确保满足所有先决条件:
*   您将需要一个活动的 AWS 帐户，可以登录控制台，也可以使用应用编程接口键进行命令行界面/应用编程接口调用。
*   您的帐户需要是管理员帐户，或者是具有正确 IAM 权限的帐户。
For a full list of permissions, look at the documentation at: [https://docs.docker.com/docker-for-aws/iam-permissions/](https://docs.docker.com/docker-for-aws/iam-permissions/).
*   SSH 密钥需要创建并添加到您的 AWS 帐户中。
See the following Amazon documentation for more information: [https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html).
# 怎么做...
AWS 的 Docker 使用云信息来构建和配置您的 Swarm 集群。部署云信息栈有两种方法:您可以通过 AWS 网络控制台或 AWS 命令行界面来完成。使用 web 控制台将更容易启动和运行，因为您只需要填写一个 web 表单。如果您不熟悉云信息，我推荐这种方法。这就是我将在这里向你们展示的。
我们将部署最新可用的稳定版本，让 AWS 的 Docker 为我们构建一个新的**虚拟私有云** ( **VPC** )。还有另一个选项，我们可以将它安装在现有的 VPC 上，但这不在本食谱的范围内。
1.  登录到 AWS 控制台并转到云信息部分。然后，单击创建新栈按钮:
![](img/1413fcb8-22f5-4b3c-8c54-fd13182e4ea0.png)
2.  在选择模板下，选择指定亚马逊 S3 模板网址单选按钮，输入以下网址，然后单击下一步:[https://editions-us-east-1 . S3 . amazonaws . com/AWS/stable/docker . tmpl](https://editions-us-east-1.s3.amazonaws.com/aws/stable/Docker.tmpl):
![](img/99fb4928-e367-404a-8f0b-a67e93932db6.png)
3.填写表单，如下图所示:
![](img/a007d755-5e70-4bdf-afa7-92cb5c2fe3da.png)
其余的可以更改，或者保留为默认值。
4.  点击下一步按钮。
5.  如果您愿意，可以添加任何可选标签，否则，请随意保持一切原样并点击“下一步”按钮:
![](img/16f6fb88-95ce-4aa0-9dfd-e5432503776f.png)
6.  单击我承认 AWS 云信息可能会创建 IAM 资源复选框，然后单击创建按钮:
![](img/51caa079-bf81-464a-b770-659853eecbbb.png)
7.  创建栈需要几分钟时间，完成后，您应该转到“输出”选项卡并单击“管理器”旁边的链接:
![](img/39cb970c-ec87-4394-b482-ec91b2d19759.png)
8.  Pick one of the Public IP addresses for one of the managers:
    ![](img/3e851ade-c17b-4143-a677-ae8f0c2d240e.png)
SSH 进入其中一个管理器节点，如下所示:
```
$ ssh PI:EMAIL
$ docker node ls
```
![](img/c9f78303-58ef-45a1-8c09-1118ce09473e.png)
When you SSH into the swarm manager, you are not actually logging in to the EC2 host directly – you are logging in to a special SSH container that is running on that host.
AWS 的 Docker 现在可以使用了。
# 它是如何工作的...
CloudFormation 将采用我们在表单中提供的信息，它将构建一个新的**虚拟私有云**(**【VPC】**)、子网、互联网网关、路由表、安全组、**弹性负载平衡器**(**【ELB】**)以及两个 EC2 自动伸缩组(ASG)——一个针对经理，一个针对工人。管理器 ASG 中的管理器节点将创建新的 EC2 实例，并在其上安装 Docker。然后，经理实例将创建一个新的 Docker Swarm，并结合在一起形成经理法定人数。
一旦管理器节点启动并运行，工人 ASG 将启动带有 Docker 的工人 EC2 实例，他们也将加入同一个 Swarm 并开始接受任务。所有这些步骤完成后，蜂群就可以行动了。
# 还有更多
让 AWS 的 Docker 启动并运行只是成功的一半。现在它正在运行，您将需要部署一个应用，我们将在下一个食谱中向您展示。与此同时，以下是一些您应该知道如何做的常见任务:
*   **扩展更多工作人员**:如果您想更改您的 Swarm 集群中的工作人员数量，您可以通过更新 CloudFormation 栈来实现。
转到云信息管理页面，单击要更新的栈旁边的复选框。然后，单击顶部的操作按钮，并选择更新栈:
![](img/894e24ac-61f0-40ab-9b21-77b2743fcae0.png)
选择使用当前模板，然后单击下一步:
![](img/4d2cbb6c-2b20-420d-abb5-c110a117d918.png)
填写您之前指定的相同参数，但这次，将您的员工人数更改为新人数，然后单击下一步:
![](img/a7289cd9-0c40-416e-bd59-d2882cc445ba.png)
在最后一页，它会让你预览你的改变。如果它们看起来不错，请选中复选框，然后点按“更新”按钮:
![](img/ab5afbc3-0a43-48ad-baf2-8feaf4993eed.png)
CloudFormation 随后将更新工作者 ASG 设置，并适当地调整工作者节点的数量。要确认节点已启动并成功加入群，您可以登录到管理器节点并运行以下命令:
```
$ docker node ls
```
**删除栈** : 转到云信息管理页面，点击要删除的栈旁边的复选框。然后，单击顶部的操作按钮，并选择删除栈:
![](img/898ab926-ce63-4dbd-b222-7279aee5cc37.png)
CloudFormation 将移除栈中的所有项目，包括您在 Swarm 上运行的任何服务。
# 请参见
*   自动气象站文件记录员:[https://docs.docker.com/docker-for-aws/](https://docs.docker.com/docker-for-aws/)
*   如何升级 AWS 的 Docker:[https://docs.docker.com/docker-for-aws/upgrade/](https://docs.docker.com/docker-for-aws/upgrade/)
*   使用持久数据存储:[https://docs . docker . com/docker-for-AWS/持久数据卷/](https://docs.docker.com/docker-for-aws/persistent-data-volumes/)
# 为 AWS 在 Docker 上部署 WordPress
现在我们已经为 AWS 安装设置了一个活动的 Docker，让我们部署一个应用来看看它是如何工作的。在这个食谱中，我们将安装 WordPress 在 AWS 的 Docker 之上。
# 准备好
在我们继续之前，您需要确保满足所有先决条件:
1.  您将需要从之前的配方中启动并运行您的 AWS 栈 Docker。
2.  SSH 进入其中一个管理器节点。如何做到这一点的说明也可以在之前的食谱中找到。
# 怎么做...
一旦我们登录到其中一个管理器节点，我们需要做的第一件事就是为我们的数据库密码创建一些群组秘密:
```
$ echo "myDbP@SSwods" | docker secret create root_db_password -
$ echo "myWpressPw" | docker secret create wp_db_password -
```
![](img/7a7cbb36-fae3-4251-8be6-b64008c9d076.png)
我们还需要创建一个覆盖网络，以便我们的服务可以相互交流:
```
$ docker network create -d overlay wp
```
![](img/35ce4c11-987c-4c54-b8b5-e11a716a6b93.png)
让我们创建 WordPress 将要使用的 MariaDB 数据库服务；我们将使用之前创建的秘密和网络。然后，我们将检查服务的状态，以确保它正确启动:
```
$ docker service create \
 --name mariadb \
 --replicas 1 \
 --constraint=node.role==manager \
 --network wp \
 --secret source=root_db_password,target=root_db_password \
 --secret source=wp_db_password,target=wp_db_password \
 -e MYSQL_ROOT_PASSWORD_FILE=/run/secrets/root_db_password \
 -e MYSQL_PASSWORD_FILE=/run/secrets/wp_db_password \
 -e MYSQL_USER=wp \
 -e MYSQL_DATABASE=wp \
 mariadb:10.3
$ docker service ps mariadb
```
![](img/fd6b16f8-356f-4468-addb-f355a0e249d3.png)
现在我们有了数据库，让我们创建我们的 WordPress 服务；我们将使用与`mariadb`服务相同的秘密和网络，但这次我们将创建三个副本。然后，我们将检查服务的状态，以确保它正确启动:
```
$ docker service create \
 --name wp \
 --constraint=node.role==worker \
 --replicas 3 \
 --network wp \
 --publish 80:80 \
 --secret source=wp_db_password,target=wp_db_password,mode=0400 \
 -e WORDPRESS_DB_USER=wp \
 -e WORDPRESS_DB_PASSWORD_FILE=/run/secrets/wp_db_password \
 -e WORDPRESS_DB_HOST=mariadb \
 -e WORDPRESS_DB_NAME=wp \
 wordpress:4.9
$ docker service ps wp
```
![](img/ba5f9810-e3db-44ab-abe2-beaafd415c8c.png)
现在我们已经启动并运行了 WordPress 服务，让我们检查一下是否可以从浏览器连接到它。
为了找到正确的网址，我们将再次返回到 CloudFormation Outputs 选项卡，但这次我们将查看 DefaultDNSTarget，复制该值，并将其输入到我们的浏览器中:
![](img/7d5fbc03-4658-4417-aab3-dde4b261ee08.png)
成功！如您所见，该服务已启动并运行:
![](img/b39fc101-40fa-4ee3-90ad-db505ef4bfca.png)
If you are not going to be completing the setup wizard right away, please remove or stop the service, or else someone else could come by and do it for you, and take over your WordPress install.