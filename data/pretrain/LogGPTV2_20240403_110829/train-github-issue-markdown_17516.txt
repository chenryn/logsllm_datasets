I'm hoping to utilize the storageState functionality discussed here:
https://playwright.dev/docs/auth#session-storage
I want to log in once, store the state in a json file, and then use it for all
subsequent tests in a spec.
The problem is that the login credentials json / state info is only valid in
our application for a few hours. It will then fail to login in when I try to
use it.
As a result, I cannot just store it in a hard coded manner indefinitely. I
need an initial test to log in, save the storageState to JSON, and then for my
tests to use it.
The page linked above refers to this flow but provides no working example:
    Logging in via the UI and then reusing authentication state can be combined to implement login once and run multiple scenarios. The lifecycle looks like:
    Run tests (for example, with npm run test).
    Login via UI and retrieve authentication state.
    In Jest, this can be executed in globalSetup.
    In each test, load authentication state in beforeEach or beforeAll step.
    This approach will also work in CI environments, since it does not rely on any external state.
Could some example code be added? How do you implement it so an initial log in
test will always run first, store the data, and then let all tests use it?