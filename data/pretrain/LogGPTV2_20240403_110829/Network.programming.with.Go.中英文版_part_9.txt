if err != nil {
if err == io.EOF {
break
}
return nil, err
}
}
return result.Bytes(), nil
}
and the corrsponding server is
对应的服务器
/* JSON EchoServer
*/
package main
import (
"fmt"
"net"
"os"
"encoding/json"
)
type Person struct {
Name Name
Email []Email
}
type Name struct {
Family string
Personal string
}
type Email struct {
Kind string
Address string
}
func (p Person) String() string {
s := p.Name.Personal + " " + p.Name.Family
for _, v := range p.Email {
s += "\n" + v.Kind + ": " + v.Address
}
return s
}
func main() {
service := "0.0.0.0:1200"
tcpAddr, err := net.ResolveTCPAddr("tcp", service)
checkError(err)
listener, err := net.ListenTCP("tcp", tcpAddr)
checkError(err)
for {
conn, err := listener.Accept()
if err != nil {
continue
}
encoder := json.NewEncoder(conn)
decoder := json.NewDecoder(conn)
for n := 0; n < 10; n++ {
var person Person
decoder.Decode(&person)
fmt.Println(person.String())
encoder.Encode(person)
}
conn.Close() // we're finished
}
}
func checkError(err error) {
if err != nil {
fmt.Println("Fatal error ", err.Error())
os.Exit(1)
}
}
4.6 The gob package gob 包
Gob is a serialisation technique specific to Go. It is designed to encode Go data
types specifically and does not at present have support for or by any other languages.
It supports all Go data types except for channels, functions and interfaces. It
supports integers of all types and sizes, strings and booleans, structs, arrays and
slices. At present it has some problems with circular structures such as rings, but
that will improve over time.
gob 是Go 中特有的序列化技术。它只能编码Go 的数据类型，目前它不支持其他语言，反之亦然。它
支持除interface，function，channel外的所有的Go 数据类型。它支持任何类型和任何大小的
整数，还有字符串和布尔值，结构，数组与切片。目前它在处理ring 等环型数据结构方面还存在一
些问题，但假以时日，将会得到改善。
Gob encodes type information into its serialised forms. This is far more extensive
than the type information in say an X.509 serialisation, but far more efficient than
the type information contained in an XML document. Type information is only included
once for each piece of data, but includes, for example, the names of struct fields.
Go 将类型信息编码到序列化后的表单中，在扩展性方面这远比对应的 X.509 序列化方法要好。而同
时与将类型信息包含在表单中的XML 文档相比，则更加高效。对于每个数据，类型信息只包含一次。
当然，包含的是字段名称这样的信息。
This inclusion of type information makes Gob marshalling and unmarshalling fairly
robust to changes or differences between the marshaller and unmarshaller. For example,
a struct
包含类型信息使得Gob 在编、解组操作上，当marshaler 与unmarshaler不同或者有变化时，具
有相当高的健壮性。例如，如下这个结构:
struct T {
a int
b int
}
can be marshalled and then unmarshalled into a different struct
可以被编组并随需解组到不同的结构中.
struct T {
b int
a int
}
where the order of fields has changed. It can also cope with missing fields (the
values are ignored) or extra fields (the fields are left unchanged). It can cope
with pointer types, so that the above struct could be unmarshalled into
此处变更了字段的顺序.它也可以处理缺少字段（值将被忽略）或多出字段（此字段原样保持）的情
况。它也可以处理指针类型，因此上边的结构可以被解组到下面的结构中.
struct T {
*a int
**b int
}
To some extent it can cope with type coercions so that an int field can be broadened
into an int64, but not with incompatable types such as int and uint.
在一定程度上，它也可以强制执行类型转换，比如int字段被扩展成为int64。而对于不兼容类型，比
如int与uint,就无能为力了.
To use Gob to marshall a data value, you first need to create an Encoder. This takes
a Writer as parameter and marshalling will be done to this write stream. The encoder has
a method Encode which marshalls the value to the stream. This method can be called multiple
times on multiple pieces of data. Type information for each data type is only written once,
though.
为了使用gob编组一个数据值，首先你得创建Encoder。它使用Writer作为参数，编组操作会将最终结果写
入此流中。encoder有个Encode方法，它执行将值编组成流的操作。此方法可以在多份数据上被调用多次。
但是对于每一种数据类型，类型信息却只会被写入一次。
You use a Decoder to unmarshall the serialised data stream. This takes a Reader and each
read returns an unmarshalled data value.
你将使用Decoder来执行解组序列化后的数据流的操作。它持有一个Reader参数，每次读取都将返回一个
解组后的数据值。
A program to store gob serialised data into a file is
将gob序列化后的数据存入文件的示例程序如下：
/* SaveGob
*/
package main
import (
"fmt"
"os"
"encoding/gob"
)
type Person struct {
Name Name
Email []Email
}
type Name struct {
Family string
Personal string
}
type Email struct {
Kind string
Address string
}
func main() {
person := Person{
Name: Name{Family: "Newmarch", Personal: "Jan"},
Email: []Email{Email{Kind: "home", Address: "PI:EMAIL"},
Email{Kind: "work", Address: "PI:EMAIL"}}}
saveGob("person.gob", person)
}
func saveGob(fileName string, key interface{}) {
outFile, err := os.Create(fileName)
checkError(err)
encoder := gob.NewEncoder(outFile)
err = encoder.Encode(key)
checkError(err)
outFile.Close()
}
func checkError(err error) {
if err != nil {
fmt.Println("Fatal error ", err.Error())
os.Exit(1)
}
}
and to load it back into memory is
将之重新加载回内存的操作如下：
/* LoadGob
*/
package main
import (
"fmt"
"os"
"encoding/gob"
)
type Person struct {
Name Name
Email []Email
}
type Name struct {
Family string
Personal string
}
type Email struct {
Kind string
Address string
}
func (p Person) String() string {
s := p.Name.Personal + " " + p.Name.Family
for _, v := range p.Email {
s += "\n" + v.Kind + ": " + v.Address
}
return s
}
func main() {
var person Person
loadGob("person.gob", &person)
fmt.Println("Person", person.String())
}
func loadGob(fileName string, key interface{}) {
inFile, err := os.Open(fileName)
checkError(err)
decoder := gob.NewDecoder(inFile)
err = decoder.Decode(key)
checkError(err)
inFile.Close()
}
func checkError(err error) {
if err != nil {
fmt.Println("Fatal error ", err.Error())
os.Exit(1)
}
}
A client and server
一个客户端与服务器的例子
A client to send a person's data and read it back ten times is
一个将person数据收发10次的客户端
/* Gob EchoClient
*/
package main
import (
"fmt"
"net"
"os"
"encoding/gob"
"bytes"
"io"
)
type Person struct {
Name Name
Email []Email
}
type Name struct {
Family string
Personal string
}
type Email struct {
Kind string
Address string
}
func (p Person) String() string {
s := p.Name.Personal + " " + p.Name.Family
for _, v := range p.Email {
s += "\n" + v.Kind + ": " + v.Address
}
return s
}
func main() {
person := Person{
Name: Name{Family: "Newmarch", Personal: "Jan"},
Email: []Email{Email{Kind: "home", Address: "PI:EMAIL"},
Email{Kind: "work", Address: "PI:EMAIL"}}}
if len(os.Args) != 2 {
fmt.Println("Usage: ", os.Args[0], "host:port")
os.Exit(1)
}
service := os.Args[1]
conn, err := net.Dial("tcp", service)
checkError(err)
encoder := gob.NewEncoder(conn)
decoder := gob.NewDecoder(conn)
for n := 0; n < 10; n++ {
encoder.Encode(person)
var newPerson Person
decoder.Decode(&newPerson)
fmt.Println(newPerson.String())
}
os.Exit(0)
}
func checkError(err error) {
if err != nil {
fmt.Println("Fatal error ", err.Error())
os.Exit(1)
}
}
func readFully(conn net.Conn) ([]byte, error) {
defer conn.Close()
result := bytes.NewBuffer(nil)
var buf [512]byte
for {
n, err := conn.Read(buf[0:])
result.Write(buf[0:n])
if err != nil {
if err == io.EOF {
break
}
return nil, err
}
}
return result.Bytes(), nil
}
and the corrsponding server is
对应的服务器：
/* Gob EchoServer
*/
package main
import (
"fmt"
"net"
"os"
"encoding/gob"
)
type Person struct {
Name Name
Email []Email
}
type Name struct {
Family string
Personal string
}
type Email struct {
Kind string
Address string
}
func (p Person) String() string {
s := p.Name.Personal + " " + p.Name.Family
for _, v := range p.Email {
s += "\n" + v.Kind + ": " + v.Address
}
return s
}
func main() {
service := "0.0.0.0:1200"
tcpAddr, err := net.ResolveTCPAddr("tcp", service)
checkError(err)