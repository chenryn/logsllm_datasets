4:  increase c-rnd to an arbitrary 
value v from proposer 
5: for all p E Na do send (p, (PHASE I A, c-rnd» 
unique value 
6: Task 2 (acceptor) 
7: upon receiving (PHASE I A, c-rnd) from coordinator 
8:  if c-rnd > rnd then 
9:  let rnd be c-rnd 
10:  send (coordinator, 
(PHASE I B, rnd, v-rnd, v-val) 
II: Task 3 (coordinator) 
Consensus 
and atomic broadcast 
are two distributed 
at the core of state-machine 
are related: 
replica­
atomic broadcast 
can be 
of consensus 
executions 
[5]. 
is defined by the primitives 
propose( v) and de­
using a sequence 
agreement 
problems 
tion. The problems 
implemented 
Consensus 
cide(v), 
is defined by the primitives 
where m is a message. 
broadcast(m) 
and deliver(m), 
where v is an arbitrary 
value; atomic broadcast 
12: upon receiving (PHASE I B, rnd, v-rnd, v-val) from Qa 
by all 
that (i) if 
deliver 
in different 
m, then all 
Consensus 
that (i) if a process 
guarantees 
proposed 
and (iii) if one (or more) correct 
v; (ii) no two processes 
decide dif­
process 
pro­
decides 
v then 
Atomic broadcast 
m, then all correct 
some value is decided 
guarantees 
m; 
processes 
processes. 
some process 
ferent values; 
poses a value then eventually 
correct 
a process 
(ii) no two processes 
orders; 
correct 
deliver 
and (iii) if a correct 
processes 
delivers 
m. 
deliver 
broadcasts 
any two messages 
process 
Paxos is a fault-tolerant 
3. Paxos 
Na denotes 
Nl the 
and Qa a majority quorum of acceptors 
that is, a subset of Na of size ,(INa I + 1)/2l 
and learners. 
multiple 
acceptors 
value. Hereafter, 
set of learners, 
quorum), 
three roles: proposers, 
can execute 
for state-machine 
a value is decided 
replication 
in a single instance 
intended 
next how 
of consensus. 
propose a value, 
learn the decided 
choose a value, and learners 
roles simultaneously. 
Paxos distinguishes 
the set of acceptors, 
[19]. We describe 
any of these roles, 
and 
Proposers 
consensus 
algorithm 
A process 
(m­
The execution 
of one consensus 
sequence 
of rounds, identified 
instance 
proceeds 
by a round number, a posi-
in a 
acceptors, 
such that c-rnd =  rnd 
13: let k be the largest v-rnd value received 
14: let V be the set of (v-rnd, v-val) received with v-rnd =  k 
15: if k =  0 then let c-val be v 
16: else let c-val be the only v-val in V 
17: for all p E Na do send (p, (PHASE 2A, c-rnd, c-val)) 
18: Task 4 (acceptor) 
19: upon receiving (PHASE 2A, c-rnd, c-val) from coordinator 
20: if c-rnd 2: rnd then 
21:  let v-rnd be c-rnd 
22:  let v-val be c-val 
23:  send (coordinator, 
(PHASE 2B, v-rnd, v-val» 
24: Task 5 (coordinator) 
25: upon receiving (PHASE 2B, v-rnd, v-val) from Qa 
27:  for all p E Nl do send (p, (DECISION, 
26:  if for all received messages: v-rnd =  c-rnd then 
v-val) 
I provides 
Algorithm 
an overview 
of Paxos. The algo­
rithm has two phases. To execute Phase I, the coordina­
tor picks a round number c-rnd greater 
than c-rnd. The acceptor 
has picked so far, and sends it to the acceptors 
Upon receiving 
whether the round proposed 
than any round it has received 
"promises" 
smaller 
nator with the highest-numbered 
not to accept any future message with a round 
then replies 
to the coordi­
round in which it has cast 
such a message (Task 2), an acceptor 
by the coordinator 
than any value it 
(Task I). 
is greater 
so far; if so, the acceptor 
checks 
978-1-4244-7501-8/101$26.00 
©2010 IEEE 
529 
DSN 2010: Marandi et al. 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 13:56:19 UTC from IEEE Xplore.  Restrictions apply. 
2010 IEEE/IFIP 
International 
Conference 
on Dependable 
Systems & Networks (DSN) 
4.1. Normal operation 
a vote, if any, and the value it voted for. Notice that the 
coordinator 
does not send any proposal 
in Phase 1. 
a reply 
starts 
If an acceptor 
The coordinator 
has voted for a value in a pre­
cast a vote in a previous 
has cast a vote in a previous 
checks whether some acceptor 
Phase 2 after receiving 
a value in 
has 
will propose this value; 
round, 
round. This mechanism 
that only one value can be chosen in an instance 
from an m-quorum (Task 3). Before proposing 
Phase 2, the coordinator 
already 
guarantees 
of consensus. 
vious round, then the coordinator 
otherwise, 
if no acceptor 
then the coordinator 
the proposer. 
one acceptor 
case, the coordinator 
the highest-numbered 
ceptors 
round. 
can propose the value received 
from 
In some cases it may happen that more than 
have cast a vote in a previous 
round. In this 
picks the value that was voted for in 
round. From the algorithm, 
two ac­
values in the same 
will vote for a value c-val with correspond­
ing round c-rnd in Phase 2 if the acceptor 
v-rnd and 
v-val to the values sent by the coordinator. 
any Phase 1 message for a higher round (Task 4). Voting 
for a value means setting 
cannot cast votes for different 
the acceptor's 
has not received 
If the acceptor 
An acceptor 
variables 
Algorithm 
2 presents 
Ring Paxos; statements 
in gray are 
in two phases. 
the same for Paxos and Ring Paxos. As in Pax os, the exe­
Moreover, 
cution is divided 
to ensure that only one value can be decided 
of consensus 
I: Algorithm 2: Ring Paxos 
2: Task J (coordinator) 
is the same as in Paxos. 
the mechanism 
in an instance 
3: upon receiving 
4:  increase c-Tnd to an arbitrary 
5: let c-ring be an overlay ring with processes 
in Qa 
value t' from proposer 
unique value 
6: for all p E Qa do send (p, (PHASE I A, c-md, c-ring» 
7: Task 2 (acceptor) 
8: upon receiving (PHASE I A,c-rnd,c-ring) 
9:  if c-md > nul then 
II:  let ring be c-ring 
10:  let T'nd be c-md 
from coordinator 
12:  send (coordinator. 
(PHASE lB. Tnd, v-rnd, u-ual» 
13: Task3(coordinator) 
14: upon receiving (PHASE I B, md, v-md, v-val) from Qa 
votes for the value received, 
When the coordinator 
receives 
(Task 5), it knows that a value has been decided 
the decision 
to the learners. 
it  replies 
replies 
to the coordinator. 
from an m-quorum 
and sends 
15: let k be the largest v-rlld value received 
16: let \T be the set of (v-md,v-val) 
17: if k  0 then let c-ual be t' 
18: else let c-val be the only v-val in F 
received with u-Tnd k 
such that rnd =  c-rnd 
19: let c-vid be a unique identifier 
20: ip-multicast 
for c-val 
(QaUNl, (PHASE 2A, c-md, c-val, c-vid» 
(PHASE 2A, c-md, c-val, c-vid) 
In order to know whether their values have been decided, 
also learners. 
value after a certain 
was lost), 
are typically 
proposers 
learn its proposed 
message to the coordinator 
again. As long as a nonfaulty 
lected, 
and at least one nonfaulty 
stance will eventually 
there is a majority 
quorum of nonfaulty 
proposer, 
decide on a value. 
does not 
If a proposer 
time (e.g., because 
its 
it proposes 
the value 
every consensus 
coordinator 
is eventually 
in­
se­
acceptors, 
Algorithm 
1 can be optimized 
in a number of ways [19]. 
Phase 1 before a value is re­
In doing so, once the coordinator 
can execute 
a value from a proposer, 
The coordinator 
ceived from a proposer. 
receives 
in four communication 
if acceptors 
ers, the number of communication 
further 
reduced to three (see Figure 3(a)). 
send Phase 2B messages 
steps, 
4. Ring Paxos 
consensus 
can be reached 
as opposed to six. Moreover, 
directly 
to the learn­
steps for a decision 
is 
21: Task 4 (acceptor) 
23: if c-md > md then 
22: upon ip-delivering 
24:  let v-Tnd he c-nld 
25:  let v-val be c-l1al 
26:  let v-vid be c-vid 
27:  if first (ring ) then 
32:  if not last(ring) 
29: Task 5 (coordinator 
send (successor, 
28: 
33: 
34:  else 
35: 
(PHASE 2B, c-md, c-vid» 
and acceptors) 
30: upon receiving (PHASE 2B,c-md,c-vid) 
31: if v-vid =  c-vid then 
from predecessor 
send (successor, 
then 
(PHASE 2B, c-md, c-vid» 
ip-multicast 
(Qa U Nl, (DECISION, 
c-vid» 
Ring Paxos is a variation 
of Paxos, optimized 
for clus­
Ring Paxos assum­
4.1 we explain 
In Section 
tered systems. 
ing a fixed coordinator, 
losses. 
Section 
of correctness 
In Section 
4.3 we describe 
no process 
4.2 we revisit 
sketch is presented 
crashes, 
and no message 
these assumptions, 
A proof 
and in 
a number of optimizations. 
in the Appendix. 
Differently 
than Paxos, Ring Paxos disposes 
a majority 
directed 
ring (see Fig­
also plays the role of acceptor 
in a logical 
The coordinator 
quorum of acceptors 
ure 3(b)(c)). 
in Ring Paxos, and it is the last process 
ing acceptors 
messages 
tion among acceptors. 
(Task 1), it proposes 
posed ring is stored by the coordinator 
at the coordinator 
When the coordinator 
Phase 1 
the ring to be used in Phase 2. The pro­
starts 
in a ring reduces the number of incoming 
the communica­
and balances 
c-ring. 
in the ring. Plac­
in variable 
978-1-4244-7501-8/101$26.00 
©2010 IEEE 
530 
DSN 2010: Marandi et al. 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 13:56:19 UTC from IEEE Xplore.  Restrictions apply. 
2010 IEEE/IFIP 
International 
Conference 
on Dependable 
Systems & Networks (DSN) 
Proposer ---,------------------ 
Proposers 
----..l---.,........------oz---....,.... 
n 
Coordinator 
Acceptor 
Acceptor 1 
Acceptor 2 
(uptOn-1) 
Learners 
(a) 
Phase 2A 
(b) 
(c) 
Learners 
Figure 3. Optimized Paxos (a) and Ring Paxos (b,c) 
implicitly 
the acceptors 
ac­
ring (Task 2). 
in 
also creates 
a unique iden­
Ring Paxos executes 
tion 2.1) it is possible 
that multiple 
As Paxos, Ring Paxos guarantees 
ple coordinators 
guarantee 
liveness. 
coordinator 
is selected. 
execute at the same time, but it may not 
After GST, eventually 
a single correct 
coordinators 
safety even when multi­
co-exist. 
By replying 
knowledge 
to the coordinator, 
that they abide by the proposed 
In addition 
to checking 
what value can be proposed 
Phase 2 (Task 3), the coordinator 
tifIer for the value to be proposed. 
sensus on value ids [10, 20]; proposed 
nated to the m-quorum and to the learners 
sages using ip-multicast. 
message (Task 4), an acceptor 
proposed 
ables, as in Paxos, and its v-vid variable. 
its v-rnd and v-val vari­
v-vid 
in Phase 2A mes­
Upon ip-delivering 
a Phase 2A 
value. If so, it updates 
checks that it 
can vote for the 
values are dissemi­
con­
of the proposed 
Variable 
value; it is 
with null. The first acceptor 
the unique identifier 
contains 
initialized 
a Phase 2B message to its successor 
learners 
it since it has not been accepted 
yet. 
also ip-deliver 
the proposed 
in the ring sends 
in the ring. Although 
value, they do not learn 
The next acceptor 
in the ring to receive 
a Phase 2B mes­
v-vid variable 
the value 
identifier 
calculated 
the acceptor's 
by the coordinator 
sage (Task 5) checks whether it has ip-delivered 
in a Phase 2A message. 
proposed 
This 
is done by comparing 
to the 
by the coordinator. 
value's 
If the con­
dition holds, then there are two possibilities: 
either the ac­
ceptor is not the last process 
in the ring (i.e., it is not the 
in which case it sends a Phase 2B message to 
coordinator), 
and then it 
in the ring, or it is the coordinator 
its successor 
of 
ip-multicasts 
a decision 
the chosen 
it 
can learn the value received 
in the Phase 2A message. 
4.2. Handling abnormal cases 
value. Once a learner 
message including 
ip-delivers 
previously 
the identifier 
this message, 
from the coordinator 
A failed coordinator 
is detected 
by the other processes, 
which select a new coordinator.  Before 
GST (see Sec-
Lost messages 
are retransmitted. 
If the coordinator 
does 
a response 
the failure 
them, possibly 
the coordinator 
not receive 
sages, it re-sends 
ber. Eventually 
will suspect 
an acceptor 
lays out a new ring, excluding 
to its Phase lA and Phase 2A mes­
with a bigger round num­
a response 
will receive 
or 
To recover 
from 
Phase I and 
the coordinator 
the failed 
ring, v-rnd, v-val, and v-vid) despite 
re-executes 
acceptor. 
to a Phase lA or to a Phase 2A 
rnd, 
it must not forget its state (i.e., variables 
When an acceptor 
of an acceptor. 
message, 
failure, 
replies 
two ways to ensure this. First, 
ceptors 
to never fail. Second, 
their state on stable storage 
and 2A messages. 
by requiring 
by requiring 
before replying 
There are 
failures. 
a majority 
of ac­
acceptors 
to Phases lA 
to keep 
Message losses may cause learners 
and not the notification 
to receive 
that it was accepted, 
only the 
without the value, or none of them. 
lost messages 
by inquiring 
other pro­
can recover 
Ring Paxos assigns 
in the ring, which the learner 
each learner 
can ask for lost mes­
to a preferencial 
value proposed 
only the notification 
Learners 
cesses. 
acceptor 
sages. 
4.3. Optimizations 
We introduce 
a few optimizations 
of which have been described 
when a new coordinator 
number of consensus 
a batch of proposed 
instances 
values, 
is elected, 
previously 
in Ring Paxos, most 
Phase I for a 
[19]; Phase 2 is executed 
for 
it executes 
in the literature: 
and not for a single value (e.g., 
978-1-4244-7501-8/10/$26.00 
©2010 IEEE 
531 
DSN 2010: Marandi et al. 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 13:56:19 UTC from IEEE Xplore.  Restrictions apply. 
2010 IEEEIIFIP 
International 
Conference 
on Dependable 
Systems & Networks (DSN) 
one consensus 
[16]); 
vious one has finished [19]. 
instance 
can be started 
before the pre­
Placing 
an m-quorum in the ring reduces 
steps to reach a decision. 
the number of 
The remaining 
by broadcasting 
process then replies 
quence number for m. As argued in Section 
multiple 
message loss, which hurts performance. 
to broadcast 
processes 
at the same time leads to 
a unique global se­
1, allowing 
communication 
acceptors 
are spares, 
fails.! Finally, 
dinator 
efficiently 
such that 
i + 1. 
i is ip-multicast 
consensus 
instance 