:::
图2-15 javah命令参数说明
[注意：]{.yanse}如果包含native方法的类，引用其他地方的类，那么进入bin\\classes\\目录下会出现问题提示找不到指定的类，这时候需要切换到源码目录src下运行即可。
[第三步：]{.yanse}使用VC6.0生成.dll文件。
首先创建一个dll工程，如图2-16～图2-18所示。
在.cpp文件中输入如下代码：
::: bodypic-c
![](OEBPS/Images/015-3-i.jpg){.calibre51}
:::
::: bodypic-c
![](OEBPS/Images/016-i.jpg){.calibre52}
:::
::: bodypic-c
![](OEBPS/Images/2a16-i.jpg){.calibre53}
:::
图2-16 VC6.0生成.dll文件
::: bodypic-c
![](OEBPS/Images/2a17-i.jpg){.calibre54}
:::
图2-17 VC6.0生成.dll文件
::: bodypic-c
![](OEBPS/Images/2a18-i.jpg){.calibre55}
:::
图2-18 VC6.0生成.dll文件
这个方法的声明可以在上面生成的com_jni_demo_JNIDemo.h头文件中找到，这个就是Java工程中的sayHello方法的实现：
::: bodypic-c
![](OEBPS/Images/016-2-i.jpg){.calibre56}
:::
这里编译会出现以下几个问题：
1）会提示找不到相应的头文件，如图2-19所示。这时需要将jni.h、jni_md.h文件拷贝到工程目录中，这两个文件的具体位置参见图2-20。
Java安装目录中的include文件夹下，jni_md.h文件在win32文件夹中，找到这两个文件后，将其拷贝到C++的工程目录中。
::: bodypic-c
![](OEBPS/Images/2a19-i.jpg){.calibre57}
:::
图2-19 编译之后的头文件
::: bodypic-c
![](OEBPS/Images/2a20-i.jpg){.calibre58}
:::
图2-20 jni.h文件
2）当拷贝到这两个文件之后，编译还是提示找不到这两个文件：主要原因是#include\是从系统目录中查找jni.h头文件的，而这里只把jni.h拷贝到工程目录中，所以需要在com_jni_demo_JNIDemo.h头文件中将#include\改成#include\"jni.h\"。同理，在jni.h文件中将#include\改成#include\"jni_md.h\"。
3）同时还有一个错误提示：e：\\c++\\jnidemo\\jnidemo.cpp（9）：fatal
error C1010：unexpected end of file while looking for precompiled header
directive，这是指预编译头文件读写错误，这时候还要在VC中进行设置：项目→设置→C/C++。在分类中选择预编译的头文件，选择不使用预补偿页眉，如图2-21所示。
这样，编译成功，生成JNIDemo.dll文件在C++工程中的Debug目录中。
[注意：]{.yanse}因为之前开发都是使用VC工具，所以这里使用了VC
6.0来进行C++代码的编写和运行，其实可以直接使用Eclipse或在Android
Studio中也可以进行编写，这样会更方便。
[第四步：]{.yanse}将JNIDemo.dll文件添加到环境变量中，如图2-22所示。
[注意：]{.yanse}在用户变量中的path设置，用分号隔开："；E：\\C++\\Debug"，这样就将.dll文件添加到环境变量中了。
[第五步：]{.yanse}在Eclipse中调用sayHello方法，输出"Hello
World"。代码如下：
::: bodypic-c
![](OEBPS/Images/017-i.jpg){.calibre59}
:::
::: bodypic-c
![](OEBPS/Images/018-i.jpg){.calibre60}
:::
::: bodypic-c
![](OEBPS/Images/2a21-i.jpg){.calibre61}
:::
图2-21 预编译头文件
::: bodypic-c
![](OEBPS/Images/2a22-i.jpg){.calibre62}
:::
图2-22 将JNIDemo.dll文件添加到环境变量中
System.loadLibrary方法是加载JNIDemo.dll文件的，一定要注意不要有.dll后缀名，只需要文件名即可。
注意，运行的时候会报错，如图2-23所示。
::: bodypic-c
![](OEBPS/Images/2a23-i.jpg){.calibre63}
:::
图2-23 运行错误
这个提示是没有找到JNIDemo.dll文件，这时需要关闭Eclipse，然后再打开，运行就没有错了。原因是Eclipse每次打开的时候都会去读取环境变量的配置，刚才配置的path没有立即生效，所以要关闭Eclipse，然后重新打开一次即可。
[注意：]{.yanse}这里因为使用了VC编辑器进行native代码的编写，所以需要配置dll文件操作，但是现在更多的是习惯直接在Eclipse/Android
Studio中配置C++环境直接编写了，这样更方便。
[]{#013.xhtml}
#### 2.3 JNIEnv类型和jobject类型 {.bodycontent-title2}
上一节介绍的是一个简单的应用，说明JNI是怎么工作的，这一节介绍本地方法sayHello的参数及其使用。
首先来看一下C++中的sayHello方法的实现：
::: bodypic-c
![](OEBPS/Images/018-2-i.jpg){.calibre64}
:::
::: bodypic-c
![](OEBPS/Images/019-i.jpg){.calibre65}
:::
##### 2.3.1 JNIEnv类型 {.bodycontent-title3}
JNIEnv类型实际上代表了Java环境，通过JNIEnv\*指针就可以对Java端的代码进行操作。例如，创建Java类中的对象，调用Java对象的方法，获取Java对象中的属性等。
JNIEnv类中有很多函数可以用，如下所示：
·NewObject：创建Java类中的对象。
·NewString：创建Java类中的String对象。
·New\Array：创建类型为Type的数组对象。
·Get\Field：获取类型为Type的字段。
·Set\Field：设置类型为Type的字段的值。
·GetStatic\Field：获取类型为Type的static的字段。
·SetStatic\Field：设置类型为Type的static的字段的值。
·Call\Method：调用返回类型为Type的方法。
·CallStatic\Method：调用返回值类型为Type的static方法。
更多的函数使用可以查看jni.h文件中的函数名称。
##### 2.3.2 jobject参数obj {.bodycontent-title3}
如果native方法不是static，obj就代表native方法的类实例。
如果native方法是static，obj就代表native方法的类的class对象实例（static方法不需要类实例的，所以就代表这个类的class对象）。
##### 2.3.3 Java类型和native中的类型映射关系 {.bodycontent-title3}
Java和C++中的基本类型的映射关系参见表2-1。
表2-1 Java和C++中的基本类型的映射关系
::: bodypic-c
![](OEBPS/Images/2b1-i.jpg){.calibre66}
:::
具体的说明可以查看jni.h文件。
##### 2.3.4 jclass类型 {.bodycontent-title3}
为了能够在C/C++中使用Java类，jni.h头文件中专门定义了jclass类型来表示Java中的Class类。
JNIEnv类中有如下几个简单的函数可以取得jclass：
·jclass FindClass（const
char\*clsName）：通过类的名称（类的全名，这时候包名不是用点号而是用/来区分的）来获取jclass。如：jclass
str=env-\>FindClass（\"java/lang/String\"）；获取Java中的String对象的class对象。
·jclass GetObjectClass（jobject
obj）：通过对象实例来获取jclass，相当于Java中的getClass方法。
·jclass GetSuperClass（jclass
obj）：通过jclass可以获取其父类的jclass对象。
##### 2.3.5 native中访问Java层代码 {.bodycontent-title3}
在C/C++本地代码中访问Java端的代码，一个常见的应用就是获取类的属性和调用类的方法，为了在C/C++中表示属性和方法，JNI在jni.h头文件中定义了jfieldId、jmethodID类型来分别代表Java端的属性和方法。在访问或者设置Java属性的时候，首先就要先在本地代码取得代表该Java属性的jfieldID，然后才能在本地代码中进行Java属性操作，同样，需要调用Java端的方法时，也是需要取得代表该方法的jmethodID才能进行Java方法调用。
使用JNIEnv的如下方法：
·GetFieldID/GetMethodID
·GetStaticFieldID/GetStaticMethodID
来取得相应的jfieldID和jmethodID。
下面来具体看一下这几个方法。
GetFieldID方法如下：
::: bodypic-c
![](OEBPS/Images/020-i.jpg){.calibre67}
:::
方法的参数说明：
·clazz：这个方法依赖的类对象的class对象。
·name：这个字段的名称。
·sign：这个字段的签名（每个变量，每个方法都是有签名的）。
怎么查看类中的字段和方法的签名呢？使用javap命令，如下所示。
::: bodypic-c
![](OEBPS/Images/020-2-i.jpg){.calibre68}
:::
GetMethodID也能够取得构造函数的jmethodID，创建一个Java对象时可以调用指定的构造方法，后续将向大家介绍，如：
::: bodypic-c
![](OEBPS/Images/021-i.jpg){.calibre69}
:::
签名的格式见表2-2。
表2-2 签名的格式
::: bodypic-c
![](OEBPS/Images/2b2-i.jpg){.calibre70}
:::
下面来看一例子：
::: bodypic-c
![](OEBPS/Images/021-3-i.jpg){.calibre71}
:::
上面的native代码中，首先取得property字段，因为property字段是int类型的，所以在签名中传入"I"，取得方法function的ID时：
::: bodypic-c
![](OEBPS/Images/021-4-i.jpg){.calibre49}
:::
签名为（Iljava/util/Date；\[I）I。
关于GetStaticFieldID/GetStaticMethodID这两个方法的用法大同小异，区别在于这两个方法是获取静态字段和方法的ID。
[]{#014.xhtml}
#### 2.4 JNIEnv类型中方法的使用 {.bodycontent-title2}
前面说到JNIEnv类型，下面通过例子来看一下这些方法的使用。第一个例子是在Java代码中定义一个属性，然后再从C++代码中将其设置成另外的值，并且输出来。
##### 2.4.1 native中获取方法的Id {.bodycontent-title3}
先来看一下Java代码：
::: bodypic-c
![](OEBPS/Images/022-i.jpg){.calibre72}
:::
再来看一下C++代码：
::: bodypic-c
![](OEBPS/Images/022-2-i.jpg){.calibre73}
:::
编译成功后，在Eclipse运行后的结果如图2-24所示。
::: bodypic-c
![](OEBPS/Images/2a24-i.jpg){.calibre74}
:::
图2-24 运行成功效果图\
第一个0是在C++代码中的cout\Method和CallStatic\Method，还有CallNonvirtual\Method函数，需要通过GetMethodID取得相应方法的jmethodID来传入到上述函数的参数中。
调用示例方法的三种形式如下：
::: bodypic-c
![](OEBPS/Images/022-3-i.jpg){.calibre75}
:::