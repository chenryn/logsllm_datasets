系统应按照长度、格式、逻辑以及特殊字符4个维度对每一个输入的查询字符串参数进行安全校
验，然后再将其传递给敏感的API。
不受信任的HTTP请求头
对每一个请求数据中的http数据都要控制进行严格的校验，禁止从用户提交的HTTP请求头中获取参数后
不校验直接使用。
脆弱代码：
Cookie[] cookies = request.getCookies(); 
for (int i =0; i 0 ) 
{ 
outputStream.write( bytes, 0, len ); 
} 
} 
} 
使用以下请求可以下载服务器硬盘上的文件
http://localhost:8080/downloadServlet?url=file:///c:\1.txt 
解决方案：
不直接接受用户提交的URL目标。
验证URL的域名是否为白名单的一部分。
所有对外的url请求原则上应使用白名单限制。
正则表达式DOS（ReDOS）
正则表达式（Regex）经常遭受拒绝服务（DOS）攻击（称为ReDOS），根据特定的正则表达式定
义，当分析某些字符串时，正则表达式引擎可能会花费大量时间甚至导致宕机。
脆弱代码：
符号 | 符号 [] 符号 + 三者联合使用可能受到 ReDOS 攻击： 
表达式：  (\d+|[1A])+z 
需求: 会匹配任意数字或任意（1或A）字符串加上字符z 
匹配字符串: 111111111 (10 chars) 
计算步骤数: 46342 
如果两个重复运算符过近，那么有可能收到攻击。请看以下例子： 
例子1： 
表达式：  .*\d+\.jpg 
需求: 会匹配任意字符加上数字加上.jpg 
匹配字符串: 1111111111111111111111111 (25 chars) 
计算步骤数: 9187 
例子2： 
表达式：  .*\d+.*a 
需求: 会匹配任意字符串加上数字加上任意字符串加上a字符 
匹配字符串: 1111111111111111111111111 (25 chars) 
计算步骤数: 77600 
最典型的例子，重复运算符嵌套： 
表达式： ^(a+)+$ 处理 aaaaaaaaaaaaaaaaX 将使正则表达式引擎分析65536个不同的匹配路径。 
解决方案：
对正则表达式处理的内容应进行长度限制
消除正则表达式的歧义，避免重复运算符嵌套。例如表达式 ^(a+)+$ 应替换成 ^a+$ 
XML外部实体（XXE）攻击
当XML解析器在处理从不受信任的来源接收到的XML时支持XML实体，可能会发生XML外部实体
（XXE）攻击。
脆弱代码：
public void parseXML(InputStream input) throws XMLStreamException { 
XMLInputFactory factory = XMLInputFactory.newFactory(); 
XMLStreamReader reader = factory.createXMLStreamReader(input); 
[...] 
} 
解决方案：
DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); 
dbf.setExpandEntityReferences(false); 
DocumentBuilder db = dbf.newDocumentBuilder(); 
Document document = db.parse(); 
Model model = (Model) u.unmarshal(document);  
为了避免 XXE 外部实体文件注入，应为 XML 代理、解析器或读取器设置下面的属性：
factory.setFeature("http://xml.org/sax/features/external-general-entities", false); 
factory.setFeature("http://xml.org/sax/features/external-parameter-entities", false); 
如果不需要 inline DOCTYPE 声明，应使用以下属性将其完全禁用：
factory.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true); 
要保护 TransformerFactory，应设置下列属性：
TransformerFactory transFact = TransformerFactory.newInstance(); 
transFact.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, ""); 
Transformer trans = transFact.newTransformer(xsltSource); 
trans.transform(xmlSource, result); 
或者，也可以使用安全配置的 XMLReader 来设置转换源：
XMLReader reader = XMLReaderFactory.createXMLReader(); 
reader.setFeature("http://xml.org/sax/features/external-general-entities", false); 
reader.setFeature("http://xml.org/sax/features/external-parameter-entities", false); 
Source xmlSource = new SAXSource(reader, new InputSource(new FileInputStream(xmlFile))); 
Source xsltSource = new SAXSource(reader, new InputSource(new FileInputStream(xsltFile))); 
Result result = new StreamResult(System.out); 
TransformerFactory transFact = TransformerFactory.newInstance(); 
Transformer trans = transFact.newTransformer(xsltSource); 
trans.transform(xmlSource, result); 
XStream安全编码规范
XStream 是一款常用的xml文件处理组件，在编码过程中应使用 XStream 组件的setupDefaultSecurity
安全模式限制输入的数据，使用的 XStream 版本应不低于1.4.17。
// 安全编码示例 
XStream xStream = newXStream(); 
// 必须开启安全模式，安全模式采用白名单限制输入的数据类型 
XStream.setupDefaultSecurity(xStream); 
// 在白名单内添加一些基本数据类型 
xstream.addPermission(NullPermission.NULL); 
xstream.addPermission(PrimitiveTypePermission.PRIMITIVES); 
xstream.allowTypeHierarchy(Collection.class); 
// 在白名单内添加一个包下所有的子类 
xstream.allowTypesByWildcard(new String[] { 
Blog.class.getPackage().getName()+".*" 
}); 
官方参考
http://x-stream.github.io/security.html#framework
http://x-stream.github.io/security.html#example
XPath注入
XPath注入风险类似于SQL注入，如果XPath查询包含不受信任的用户输入，则可能会暴露完整的数据
源。这可能使攻击者可以访问未经授权的数据或恶意修改目标XML。
下面以登录验证中的模块为例，说明 XPath注入攻击的实现原理。
在应用程序的登录验证程序中，一般有用户名（username）和密码（password） 两个参数，程序
会通过用户所提交输入的用户名和密码来执行授权操作。
若验证数据存放在XML文件中，其原理是通过查找user表中的用户名 （username）和密码
（password）的结果进行授权访问。
例存在user.xml文件如下：
Ben 
Elmore 
abc 
test123 
Shlomy 
Gantz 
xyz 
123test 
则在XPath中其典型的查询语句如下：
//users/user[loginID/text()='xyz'and password/text()='123test'] 
正常用户传入 login 和 password，例如 loginID = 'xyz' 和 password = '123test'，则该查询语句将返回
true。但如果恶意用户传入类似 ' or 1=1 or ''=' 的值，那么该查询语句也会得到 true 返回值，因为
XPath 查询语句最终会变成如下代码：
//users/user[loginID/text()=''or 1=1 or ''='' and password/text()='' or 1=1 or ''=''] 
脆弱代码：
public int risk(HttpServletRequest request,  
Document doc, XPath xpath ,org.apache.log4jLogger logger) { 
int len = 0; 
String path = request.getParameter("path"); 