title:Your Cache Has Fallen: Cache-Poisoned Denial-of-Service Attack
author:Hoai Viet Nguyen and
Luigi Lo Iacono and
Hannes Federrath
Your Cache Has Fallen: Cache-Poisoned Denial-of-Service Attack
Hoai Viet Nguyen, Luigi Lo Iacono
Data & Application Security Group
Cologne University of Applied Sciences, Germany
{viet.nguyen,luigi.lo_iacono}@th-koeln.de
Hannes Federrath
Security in Distributed Systems Group
University of Hamburg, Germany
PI:EMAIL
ABSTRACT
Web caching enables the reuse of HTTP responses with the aim
to reduce the number of requests that reach the origin server, the
volume of network traffic resulting from resource requests, and
the user-perceived latency of resource access. For these reasons,
a cache is a key component in modern distributed systems as it
enables applications to scale at large. In addition to optimizing
performance metrics, caches promote additional protection against
Denial of Service (DoS) attacks.
In this paper we introduce and analyze a new class of web cache
poisoning attacks. By provoking an error on the origin server that
is not detected by the intermediate caching system, the cache gets
poisoned with the server-generated error page and instrumented
to serve this useless content instead of the intended one, rendering
the victim service unavailable. In an extensive study of fifteen web
caching solutions we analyzed the negative impact of the Cache-
Poisoned DoS (CPDoS) attack—as we coined it. We show the practi-
cal relevance by identifying one proxy cache product and five CDN
services that are vulnerable to CPDoS. Amongst them are prominent
solutions that in turn cache high-value websites. The consequences
are severe as one simple request is sufficient to paralyze a victim
website within a large geographical region. The awareness of the
newly introduced CPDoS attack is highly valuable for researchers
for obtaining a comprehensive understanding of causes and coun-
termeasures as well as practitioners for implementing robust and
secure distributed systems.
CCS CONCEPTS
• Security and privacy → Network security; Denial-of-service
attacks; Web application security.
KEYWORDS
HTTP; Web Caching; Cache Poisoning; Denial of Service
ACM Reference Format:
Hoai Viet Nguyen, Luigi Lo Iacono and Hannes Federrath. 2019. Your Cache
Has Fallen: Cache-Poisoned Denial-of-Service Attack. In 2019 ACM SIGSAC
Conference on Computer and Communications Security (CCS ’19), November
11–15, 2019, London, United Kingdom. ACM, New York, NY, USA, 16 pages.
https://doi.org/10.1145/3319535.3354215
CCS ’19, November 11–15, 2019, London, United Kingdom
© 2019 Association for Computing Machinery.
This is the author’s version of the work. It is posted here for your personal use. Not for
redistribution. The definitive Version of Record was published in 2019 ACM SIGSAC
Conference on Computer and Communications Security (CCS ’19), November 11–15, 2019,
London, United Kingdom, https://doi.org/10.1145/3319535.3354215.
1
1 INTRODUCTION
Contemporary distributed software systems require to scale at large
in order to efficiently handle the sheer magnitude of requests stem-
ming, e.g., from human users all over the globe or sensors scattered
around in an environment. A common architectural approach to
cope with this requirement is to design the system in layers com-
posed of distinct intermediaries. Application-level messages travel
through such intermediate systems on their path between a client
and a server. Common intermediaries include caches, firewalls, load
balancers, document routers and filters.
The caching of frequently used resources reduces network traffic
and optimizes application performance and is one major pillar of
success of the web. Caches store recyclable responses with the aim
to reuse them for recurring client requests. The origin server usually
rules whether a resource is cacheable and under which conditions
it can be provided by a caching intermediate. Cached resources
are unambiguously identified by the cache key that consists most
commonly of the HTTP method and the URL, both contained in the
request. In case a fresh copy of a requested resource is contained in
an intermediate cache, the client receives the cached copy directly
from the cache. By this, web caching systems can contribute to
an increased availability as they can serve client requests even
when the origin server is offline. Moreover, distributed caching
systems such as Content Distribution Networks (CDNs) can provide
additional safeguards against Distributed DoS (DDoS) attacks.
A general problem in layered systems is the different interpre-
tation when operating on the same message in sequence. As we
will discuss in detail in Section 3, this is the root cause for attacks
belonging to the family of "semantic gap" attacks [18]. These at-
tacks exploit the difference in interpreting an object by two or more
entities. In the context of this paper the problem arises when an
attacker can generate an HTTP request for a cacheable resource
where the request contains inaccurate fields that are ignored by
the caching system but raise an error while processed by the origin
server. In such a setting, the intermediate cache will receive an error
page from the origin server instead of the requested resource. In
other words, the cache can get poisoned with the server-generated
error page and instrumented to serve this useless content instead
of the intended one, rendering the victim service unavailable. This
is why we denoted this novel class of attacks "Cache-Poisoned
Denial-of-Service (CPDoS)".
We conduct an in-depth study to understand how inconsistent
interpretation of HTTP requests in caching systems and origin
servers can manifest in CPDoS. We analyze the caching behavior
of error pages of fifteen web caching solutions and contrast them
to the HTTP specifications [13]. We identify one proxy cache prod-
uct and five CDN services that are vulnerable to CPDoS. We find
that such semantic inconsistency can lead to severe security con-
sequences as one simple request is sufficient to paralyze a victim
website within a large geographical region requiring only very
basic attacker capabilities. Finally, we show that the CPDoS attack
raises the paradox situation in which caching services proclaim an
increased availability and proper defense against DoS attacks while
they can be exploited to affect both qualities.
Overall, we make three main contributions:
(1) We present a class of new attacks, "Cache-Poisoned Denial-
of-Service (CPDoS)", that threaten the availability of the web.
We systematically study the cases in which error pages are
generated by origin servers and then stored and distributed
by caching systems. We introduce three concrete attack vari-
ations that are caused by the inconsistent treatment of the
X-HTTP-Method-Override header, header size limits and
the parsing of meta characters.
(2) We empirically study the behavior of fifteen available web
caching solutions in their handling of HTTP requests con-
taining inaccurate fields and caching of resulting error pages.
We find one proxy cache product and five CDN services that
are vulnerable to CPDoS. We have disclosed our findings
to the affected solution vendors and have reported them to
CERT/CC.
(3) We discuss possible CPDoS countermeasures ranging from
cache-ignoring instant protections to cache-adhering safe-
guards.
2 FOUNDATIONS
The web is considered as the world’s largest distributed system.
With the continuous growing amount of data traveling around the
web, caching systems become an important pillar for the scalability
of the web [3]. Web caching systems can occur in various in-path
locations between client and origin server (see Figure 1). Another
distinction point is the classification in private and shared caches.
Private caches are only allowed to store and reuse content for
one particular user. Client-internal caches of web browsers are
one typical example of private cache as they store responses for a
dedicated user only. On the other hand, client-side and server-side
caches—also known as proxy caches—as well as CDNs deployed in
the backbone of the web belong to the family of shared caches, since
they provide content for multiple clients. Some web applications
may also include a server-internal cache. These caching systems
usually support both access policies, i.e., they are able to serve
cached resources to multiple users or to one client exclusively.
The cache policy is governed by the content provider by specify-
ing caching declarations defined in RFC 7234 [11]. The web caching
standard defines a set of control directives for instructing caches
how to store and reuse recyclable responses. The max-age and s-
maxage attributes in the Cache-Control response header define,
e.g., the maximum duration in seconds that the targeted content
is allowed to reside in a cache. The keyword max-age is applicable
to private and shared caches whereas s-maxage only applies to
shared web caching systems. Content providers can also use the
Expires header with an absolute date to define a freshness life-
time. As with max-age, the Expires is adoptable for private and
shared caches. A stored response in a cache is considered as fresh,
if it does not exceed the freshness lifetime specified by max-age,
s-maxage and the Expires header. If a content provider wishes
2
Figure 1: Different types of web caching systems classified
by location and resource access policy [31]
to permit a certain content to be saved by private caches only, it
adds the private directive to the Cache-Control header. Content
providers which do not want that a certain response is stored and
reused by any cache have to include the keyword no-store in the
Cache-Control header. The control directives must-revalidate,
proxy-revalidate and no-cache in the Cache-Control header
instruct how to verify the freshness of a response, in case a con-
tent is expired or no freshness lifetime information is available. All
mentioned control directives enable a content provider to define
caching policies in an explicit manner.
If no explicit caching directive is present in a response, a web
caching system may store and reuse responses implicitly when cer-
tain conditions are met. One requirement which permits caches to
store content implicitly is a response to a GET request. Responses to
unsafe methods including POST, DELETE and PUT are not allowed
to be cached. Moreover, responses to GET method must contain
defined status codes including, e.g., 200 Ok, 204 No Content and
301 Moved Permanently. Here, caches are allowed to derive a
freshness lifetime by using heuristics. Many web applications in-
struct web caching systems to define an implicit freshness lifetime
for images, scripts and stylesheets as these file types are consid-
ered as static content. Static content refers to data which does not
change frequently. Therefore, storing and reusing such resources is
considered as best practice for optimizing the performance.
In some cases, it is also very useful for content providers to
cache certain error messages. For instance, the status code 404
Not Found, which indicates that the origin server does not have
a suitable representation for the requested resource, is permitted
to be cached implicitly. The 405 Method Not Allowed declaring
the request action is not supported for the targeted resource can be
cached implicitly as well.
3 SECURITY THREATS IN WEB CACHING
SYSTEMS
Using web caching systems provides many advantages in terms of
optimizing communication and application performance. However,
much work has shown that web caches can also be exploited to
affect the privacy and reliability of applications. Web cache poi-
soning attacks, e.g., are a serious threat that has been emerging
Web-ClientCacheWeb-ServerCacheClient-internalCache(e.g web brower cache)Client-sideCache(e.g. forward proxy cache)Server-sideCache(e.g. reverse proxy cache)Server-internalCache(e.g. WP Super Cache, EHCACHE )Backbone Cache(e.g. CDN)sharedprivateprivate/sharedover the past years. Amongst them is the request smuggling [24]
attack which occurs when the web caching system and the origin
server do not strictly conform to the policies specified by RFC 7234.
In this particular attack, the attacker can send a request with two
Content-Length headers to impair a shared cache. Even though
the presence of two Content-Length headers is forbidden as per
RFC 7234, some HTTP engines in caches and origin servers still
parse the request. Due to the duplicate headers, the malformed
request is able to confuse the origin server and the cache so that a
harmful crafted response can be injected to the web caching system.
This malicious response is then reused for recurring requests.
The host of troubles [7] attack is another vulnerability targeting
shared caches. As with the previous attack, it exploits a violation
of the web caching standard that gets interpreted differently by
the involved system layers. Here, the attacker constructs a request
with two Host headers. These duplicate headers induce a similar
misbehavior in the cache and origin server as the request smuggling
attack. Likewise, a malicious response is injected to poison the
cache.
Another attack that targets to poison web caches is the response
splitting [23] attack. Unlike the two aforementioned vulnerabilities,
where a flaw in the shared cache itself is one reason why the attack
is successful, the response splitting attack exploits a parsing issue
in the origin server only. Here, an attacker utilizes the fact that
the HTTP engine of the origin server does not escape or block line
breaks when replaying a request header value in the corresponding
response header. A malicious client can exploit this by dividing
the response in two responses. The aim of this attack is to poison
the intermediate cache with the malicious content contained in the
second response.
James Kettle [22] presented a set of cache poisoning attacks
which result from a misbehavior in web application frameworks
and content management systems respectively. With the intro-
duced techniques, James Kettle was able to compromise shared web
caching systems of well-known companies.
All introduced attacks aim at poisoning shared caches with ma-
licious content that gets served by the victim caches for recurring
requests of benign clients. Private caches such as the web browser
cache are not affected by the mentioned attacks. However, browser
caches are not immune to this class of attacks. Jia et al. [19] present
browser cache poisoning (BCP) attacks. In their study they find
that many desktop web browsers are susceptible to BCP attacks.
The web cache deception [15] attack targets to poison a shared
cache with sensitive content. Here, the attacker exploits a RFC 7234
violation of a shared cache which still stores responses even though
it is prohibited. In combination with an issue in the request rout-
ing of the origin server, the author was able to retrieve account
information of third parties out of the cache.
Triukose et al. [39] showed another attack vector that utilizes
web caching systems to paralyze a web application. Unlike the
presented threats, this attack does not intend to poison a cache with
harmful content or to steal sensitive data. The goal of Triukose et al.
was to provoke a DoS attack with the aid of a mounted CDN. The
authors utilized the infrastructure of a CDN, which comprises of
many collaborating edge cache servers. With the use of a random
string appended to the URL query, Triukose et al. were able to
bypass any edge cache servers so that the CDN forwards every
3
request to the origin server. To create a DoS attack, the authors
send multiple requests with different random query strings to all
edge cache servers within the CDN. As the edge cache servers
forward all of these requests to the origin server, the huge amount
of requests reaching the origin server generates a high workload
with the consequence that the web application cannot process any
further legitimate request.
The root cause of almost all of the presented attacks lies in the
different interpretation of HTTP messages by two or more distinct
message processing entities, which is known as the semantic gap
[18]. Vulnerabilities stemming from the semantic gap are mani-
fold [7, 23, 37]. In relation to web caches the request smuggling,
host of troubles and response splitting attacks exploit this gap be-
tween a cache and an origin server. Here, a discrepancy in parsing
duplicate headers or line breaks leads to cache poisoning.
In the next section we introduce a new class of attacks against
web caches, the Cache-Poisoned Denial-of-Service (CPDoS) attack.
It exploits the semantic gap between a shared cache and a origin
server for poisoning the cache with error pages. As a consequence,
the cache distributes error pages instead of the legitimate content
after being poisoned. Users perceive this as unavailable resources
or services. In contrast to the DDoS attack introduced by Triukose
et al., CPDoS require only very basic attack skills and resources.
4 POISONING WEB CACHES WITH ERROR
PAGES
The general attack idea is to exploit the semantic gap in two distinct
HTTP engines—one contained in a shared cache and the other in an
origin server. More specifically, the baseline of the newly introduced
variant of web cache poisoning takes advantage of the circumstance
that the deployed caching system is more lax or focused in process-
ing requests than the origin server (see Figure 2). An attacker can
make use of this discrepancy by including a customized malicious
header or multiple harmful headers in the request. Such headers
are usually forwarded without any changes to the origin server. As
a consequence, the attacker crafted request runs through the cache
without any issue, while the server-side processing results in an
error. Henceforth, the server’s response is a respective error, which
will be stored and reused by the cache for recurring requests. Each
benign client making a subsequent GET request to the infected URL
will receive a stored error message instead of the genuine resource
form the cache.
It is worth noting that one simple request is sufficient to replace
the genuine content in the cache by an error page. This means that
such a request remains below the detection threshold of web appli-
cation firewalls (WAFs) and DDoS protection means in particular,
as they scan for large amounts of irregular network traffic.
The consequences for the web application depend on the content
being illegitimately replaced with error pages. It will always affect
the service’s availability—either parts of it or entirely. The most
harmless CPDoS renders images or style resources unavailable. This
influences the visual appearance of parts of the application. In terms
of functionality it is still working, however. More serious attacks
targeting the start page or vital script resources can render the
entire web application inaccessible instead. Moreover, CPDoS can
be exploited to block, e.g., patches or firmware updates distributed
these observations, we investigated further in order to discover
vulnerable constellations. We were able to identify three concrete
instantiations of the general CPDoS attack that we present in the
following subsections.
4.1 HTTP Method Override (HMO) Attack
The HTTP standard [13] defines a set of request methods for the
client to indicate the desired action to be performed for a given
resource. GET, POST, DELETE, PUT and PATCH are arguably the
most used HTTP methods in web applications and REST-based
web services [36] in particular. Some intermediate systems such as
proxies, load balancer, caches or firewalls, however, only support
GET and POST. This means DELETE, PUT and PATCH requests
are simply blocked. To circumvent this restriction many REST-
based APIs or web frameworks provide auxiliary headers such as X-
HTTP-Method-Override, X-HTTP-Method or X-Method-Override
for passing through an unrecognized HTTP method. These headers
will usually be forwarded by any intermediate systems. Once the
request reaches the server, a method override header instructs the
web application to replace the method in the request line with the
one in the method overriding header value.
These method override headers are very useful in scenarios when
intermediate systems block distinct HTTP methods. However, if a
web application supports such a header and also uses a shared web
caching system, a malicious client can exploit this semantic gap for
performing a CPDoS attack. In a typical HTTP Method Override
(HMO) attack flow, a malicious client crafts a GET request including
an HTTP method overriding header as shown in Figure 3.
Figure 3: Flow and example construction of the HTTP
Method Override (HMO) attack
A CDN or reverse proxy cache interprets the request in Figure 3
as a benign GET request targeting http://example.org/index.html.
Hence, it forwards the request with the X-HTTP-Method-Override
header to the origin server. The endpoint, however, interprets this
request as a POST request, since the X-HTTP-Method-Override
header instructs the server to replace the HTTP method in the
request line with the one contained in the header. Accordingly,
the web application returns a response based on POST. Let’s as-
sume that the target web application does not implement any POST
4
Figure 2: General construction of the Cache-Poisoned
Denial-of-Service (CPDoS) attack
via caches, preventing vulnerabilities in devices and software from
being fixed. Attackers can also disable important security alerts or
messages on mission-critical websites such as online banking or
official governmental websites. Imagine, e.g., a situation in which
a CPDoS attack prevents alerts about phishing emails or natural
catastrophes from being displayed to the respective user.
When considering the low efforts for attackers, the high proba-
bility of success, the low chance of being detected and the relatively
high consequences of a DoS then the introduced CPDoS attack poses
a high risk. Hence, it is worthwhile investigating under which con-
ditions CPDoS attacks can occur in the wild. For this reasons we
first compiled a complete overview on cacheable error codes as
specified in relevant RFCs [16], [25], [32], [9], [8], [34], [13], [11],
[4] and [5] (see Table 1). Moreover, we analyzed whether popu-
lar proxy caches as well as CDNs do store and reuse error codes
returned from the origin server. This exploratory study has been
conducted with the approach of Nguyen et al. [30, 31]. They pro-
vide a freely available cache testing tool for analyzing web browser
caches, proxy caches and CDNs in a systematically manner. The
cache testing tool also offers a test suite containing 397 test cases
that can be customized by a test case specification language. We
extended the suite by adding new tests for evaluating the caching
of responses containing error status codes. In our study we concen-
trated on the five well-known proxies caches Apache HTTP Server
(Apache HTTPD) v2.4.18, Nginx v1.10.3, Varnish v6.0.1, Apache
Traffic Server (Apache TS) v8.0.2 and Squid v3.5.12 as well as the
CDNs Akamai, CloudFront, Cloudflare, Stackpath, Azure, CDN77,
CDNSun, Fastly, KeyCDN and G-Core Labs.
Even though the cacheability of error codes are well-defined by
the series of RFC specifications given above, our analysis reveals
that some web caching systems violates some of these policies.
For instance, CloudFront and Cloudflare do store and reuse error
messages such as 400 Bad Request, 403 Forbidden and 500
Internal Server Error although being not permitted. The vi-
olation of web caching policies is a severe issue and needs to be
taken into account by content providers and web caching system
vendors. Recent publications have revealed that non-adherence
may otherwise lead to caching vulnerabilities [7, 15, 24]. Following
AttackerGET /index.html HTTP/1.1Host: example.orgX-Malicious-Header: Some valueGET /index.html HTTP/1.1Host: example.orgX-Malicious-Header: Some valueHTTP/1.1 400 Bad RequestContent-Length: 10Content-Type: text/plainSome errorHTTP/1.1 400 Bad RequestContent-Length: 10Content-Type: text/plainSome errorShared CacheOriginServerGET /index.html HTTP/1.1Host: example.orgHTTP/1.1 400 Bad RequestContent-Length: 10Content-Type: text/plainSome error32146BenignClient5AttackerGET /index.html HTTP/1.1Host: example.orgX-HTTP-Method-Override: POSTGET /index.html HTTP/1.1Host: example.orgX-HTTP-Method-Override: POSTHTTP/1.1 404 Not FoundContent-Length: 29Content-Type: text/plainPOST on /index.html not foundHTTP/1.1 404 Not FoundContent-Length: 29Content-Type: text/plainPOST on /index.html not foundShared CacheOriginServerGET /index.html HTTP/1.1Host: example.orgHTTP/1.1 404 Not FoundContent-Length: 29Content-Type: text/plainPOST on /index.html not found321456BenignClientLegend: ✓ cacheable status code according to HTTP Standard,(cid:32) stored by web caching system,(cid:35) not stored by web caching system,
D
P
T
T
H
e
h
c
a
p
A
S
T
e
h
c
a
p
A
x
n
i
g
N
d
i
u
q
S
h
s
i
n
r
a
V
i
a
m
a
k
A
e
r
u
z
A
7
7
N
D
C
n
u
S
N
D
C
storing not cacheable status code
e
r
a
fl
d
u
o
l
C