ways retrieve a consistent copy of their desired record.
Query privacy: The database servers and bank learn no non-
trivial information about the records accessed by a user.
User anonymity: The database servers and the bank learn only
that ‘some user with sufﬁcient funds and privileges retrieved
some record’; i.e., they learn no other information about a
user’s identity (including whether or not this user has previ-
ously queried the database), the price he pays for a record, or
the past or present balance encoded in his wallet.
Database privacy: Dishonest users cannot learn any extra infor-
mation about database records that they do not purchase.
Practicality.
Computational cost: Any increase in the computational cost of
the underlying PIR scheme should be small and scale sublin-
early in n and at most linearly in r.
Query size: The size of users’ queries should increase by no more
than a small multiplicative factor as compared to the underly-
ing PIR scheme. Furthermore, the size of the query response
should increase by no more than a small additive constant.
Round complexity: The protocols should add at most one addi-
tional round of interaction to the PIR protocol, per query.
2.2 Threat model
We consider a threat model in which users of the system are po-
tentially malicious, while database servers and CPs (as well as the
bank) are honest-but-curious (i.e., semi-honest); however, Gold-
berg’s PIR scheme — and by extension, our own proposed scheme
— is robust against some threshold of malicious database servers
as well. Users of our system have obvious incentives for being ma-
licious; for example, they may wish to learn about records that they
cannot afford (or for which they simply do not want to pay), or to
retrieve records for which they do not have authorization. More-
over, in e-commerce situations, unscrupulous competitors may try
to subvert the bookkeeping and replication functionality by acting
as users and submitting specially crafted, malformed queries. The
system must provide the database servers with strong security guar-
antees against all such attacks.
Honest-but-curious database servers may collude among them-
selves (and the bank) to try to reveal the identity of a user, the price
tier or balance encoded in his wallet, or the content of his queries.
The system should be secure against attacks on user anonymity re-
gardless of who may be colluding with whom, and should be secure
against attacks on query privacy provided an honest majority exists
among the database servers.1 Malicious database servers may also
try to compromise the integrity of the system by refusing to re-
spond to user queries or by returning incorrect results in an effort
to prevent a user from obtaining his desired record or a valid re-
ceipt. The system should be robust to some number of malicious
database servers and should allow affected users to learn the iden-
tity of whichever servers misbehave. We do not consider the case
of an actively malicious bank, but we do note that a fair exchange
protocol such as the one proposed by Camenisch et al. [18] can also
mitigate threats associated with a malicious bank.
We argue that our assumption of semi-honest database servers
is realistic for many practical e-commerce scenarios, particularly
in the multiple-payee variant of our protocol where the CPs them-
selves may host some or all of the database servers. In this setting,
several distinct and possibly competing CPs cooperate to provide
a value-added service to their customers (i.e., a privacy-preserving
way to purchase their digital goods). On the one hand, the CPs have
a vested interest in cooperating, since providing this service to their
customers would otherwise be infeasible. On the other hand, com-
peting CPs have an incentive not to divulge additional information
about customer spending to one another, lest this information help
the other CPs gain a competitive advantage over them.
2.3 A hypothetical use case
As a hypothetical use case to motivate our protocols, we consider
an online seller of e-books akin to Amazon’s Kindle Store. One
can easily envision similar use cases for other online retailers (e.g.,
Google’s Android Market); we consider an e-book store because
the size of these increasingly popular digital goods makes them
ideal candidates for distribution using PIR. In light of the Amazon’s
2010 lawsuit against the state of North Carolina seeking to prevent
the disclosure of customer purchase records [44], we also feel it
is especially ﬁtting to demonstrate how our platform could replace
Amazon’s current e-book sales model to provide a more privacy-
friendly experience for customers, and to mitigate the risk of such
egregious attacks on privacy in the future.
Suppose a number of independent publishers wish to team up to
form a privacy-preserving alternative to the Kindle Store, wherein
users can purchase electronic copies of these publishers’ books
without revealing their identities or facilitating the construction of
privacy-invasive dossiers detailing their purchasing habits.2
Each publisher hosts a database server containing a replica of the
entire e-book catalogue and users purchase e-books from this data-
1Of course, if sufﬁciently many database servers collude to reveal
the content of a user’s query, they may learn some information
about that user’s identity; for example, by noting if the user re-
trieves a record that is only available to certain tiers of users, or by
making inferences based on external knowledge. We cannot pro-
tect against such attacks, so in these cases we aim only to minimize
the information made available to the adversary.
2If the publishers desire an Amazon-style recommendation system,
existing approaches to privacy-preserving targeted advertising [34,
38, 56] may apply; however, we leave further investigation of this
idea for future work.
679base using PSPIR. Periodically, (for example, weekly) the publish-
ers cooperate to learn to what portion of the proﬁts each is entitled.
They also use this opportunity to determine the top-K best sellers,
which they subsequently replicate to a smaller database to facili-
tate faster purchases of these books. Much like Amazon does with
the Kindle Store [26], the publishers can sell the same e-book to
users that are registered in different geographical locations for dif-
ferent prices, thus enabling them to recoup costs associated with,
e.g., service fees incurred by offering customers free 3G service to
purchase their books from a mobile device.
3. BUILDING BLOCKS
This section introduces our notation and the cryptographic prim-
itives that we use in our construction.
For notational convenience, we use δij to denote the well-known
Kronecker delta function; that is, δij = 1 if i = j, and δij =
0 otherwise. We also deﬁne the complementary Kronecker delta
function, ¯δij = (1− δij). We use Zm to denote the ring of integers
modulo m (or the ﬁnite ﬁeld of order m when m is prime); we will
represent elements of Zm by elements of {0, . . . , m − 1}. Zm[x]
denotes the ring of polynomials with coefﬁcients in Zm, and (Zm)r
the set of length-r vectors over Zm (and similarly for (Zm[x])r).
We write a ∈R Zm to mean that a is selected uniformly at random
from {0, . . . , m − 1}. The notation a(cid:107)b denotes concatenation (as
strings) of values a and b. κ ∈ N is a parameter used to tune the
soundness versus performance of certain zero-knowledge proofs.
Let G1, G2 and GT be cyclic groups of prime order q (which
we shall express multiplicatively). We assume throughout the exis-
tence of a bilinear pairing function e : G1 × G2 → GT ; we also
assume that g, h ∈ G1, ˆg ∈ G2 and gT, hT ∈ GT are known gen-
erators of their respective groups, where gT = e(g, ˆg) and hT =
e(h, ˆg). The crucial property of e is that of bilinearity: e(ga, ˆgb) =
e(g, ˆg)ab for all a, b ∈ Zq. If G1 = G2, the pairing is called sym-
metric; otherwise it is asymmetric. Elements of G1 in asymmetric
pairings are shorter than in symmetric pairings. The pairing e we
assume in this work is asymmetric.
3.1 Shamir secret sharing
We make extensive use of Shamir’s polynomial secret sharing
scheme [54] to share ﬁeld elements among the servers. An element
a ∈ Zq is shared by choosing a polynomial fa(x) = atxt + ··· +
a1x + a ∈ Zq[x] with each non-constant coefﬁcient ai ∈R Zq
and the constant term equal to the shared value; server j’s share
of a is then fa(j) ∈ Zq. Any subset of at least t + 1 servers can
cooperate to reconstruct a using Lagrange interpolation [45, Ch.
12]; however, t or fewer colluding servers cannot deduce any non-
trivial information about a. Such a scheme is called a (t + 1, (cid:96))-
threshold secret sharing scheme, since a threshold of at least t + 1
out of (cid:96) servers must cooperate to recover the secret value. In gen-
eral, any choice of 0 < t < (cid:96) will sufﬁce, however our top-K
replication protocol requires that t ≤ (cid:98)((cid:96) − 1) /2(cid:99). We recom-
mend t = (cid:98)((cid:96) − 1) /2(cid:99), which ensures that the protocols are se-
cure whenever an honest majority exists among the servers. We
write [a]q to denote a Shamir secret sharing of a ∈ Zq among the (cid:96)
servers; that is, [a]q = (cid:104)fa(1), . . . , fa((cid:96))(cid:105) where the jth component
of this vector is known only to server j.
Computing with Shamir secret shares.
Suppose [a]q and [b]q are two shared secrets and c ∈ Zq is a pub-
lic scalar. We write [a]q ⊕ [b]q, [a]q (cid:9) [b]q and [a]q (cid:12) [b]q to denote
the component-wise sum, difference and product, respectively, of
[a]q and [b]q (and similarly for [a]q ⊕ c, [a]q (cid:9) c and [a]q (cid:12) c).
Observe that [a]q ⊕ [b]q = [a + b]q and [a]q (cid:9) [b]q = [a − b]q (and
similarly for [a]q ⊕ c and [a]q (cid:9) c), and that c (cid:12) [a]q = [c · a]q.
Moreover, the product [a]q(cid:12)[b]q yields a (2t+1, (cid:96))-threshold shar-
ing of a · b; thus, when t ≤ (cid:98)((cid:96) − 1) /2(cid:99) as we require above, the
servers can still interpolate to recover this product.
It is possible to construct algorithms for more complex opera-
tions using the above facts; e.g., distributed pseudorandom num-
ber generation [4], testing equality [25], or evaluating order pred-
icates [46]. Indeed, we implicitly use these more complex opera-
tions for top-K replication, but do not discuss them in depth. The
interested reader can consult Nishide and Ohta’s paper [46] for fur-
ther details on how to implement them.
3.2 Goldberg’s PIR scheme
√
(cid:96) scheme for 0 < t < k ≤ (cid:96) and v < k − (cid:98)√
Goldberg’s PIR scheme [33] is a multi-server information-theo-
retic scheme with good support for query robustness against col-
luding servers. It provides a t-private v-Byzantine-robust k-out-of-
kt(cid:99) protection.
In other words, users submit their queries to at least k out of the (cid:96)
servers, and the system can tolerate up to v servers being Byzan-
tine (i.e., responding incorrectly) without inhibiting the ability of
users to retrieve the correct record, and t servers colluding without
compromising users’ query privacy. The scheme also optionally
supports τ-independence [30], a property that prevents the database
servers from learning the contents of the database with information-
theoretic protection against coalitions of up to τ servers.
The scheme structures the n-bit database X as an r × s ma-
trix D over Zq, where r is the number of records, b is the size
of each record (in bits), w = (cid:98)lg q(cid:99) is the word size, and s =
b/w is the number of words per record. For minimal communi-
wn. The user’s query is a standard basis vector
cation, b =
(cid:126)1β ∈ (Zq)r, which has all elements 0 except for index β where it
is 1. The scheme uses Shamir secret sharing to split (cid:126)1β into k parts
(cid:126)ρ1, . . . , (cid:126)ρk, which the user sends to the respective PIR servers.
A user queries for the record at index β by choosing a vector of
r polynomials, (cid:126)f = (cid:104)f1, . . . , fr(cid:105), each of degree (at most) t, with
uniformly random coefﬁcients from Zq for the non-constant terms.
The constant term of fi is δiβ. In addition, the user chooses k dis-
tinct server indices I1, . . . , Ik and forms k vectors of Zq elements
by evaluating (cid:126)f component-wise at the k respective indices; that
is (cid:126)ρj = (cid:104)f1(Ij), . . . , fr(Ij)(cid:105). The user forwards (cid:126)ρj to server Ij,
while each server Ij computes an s-element vector Rj = (cid:126)ρj · D
and returns it back to the user. Finally, the user computes the record
at index β from the Rj by using Lagrange interpolation (and also
Guruswami-Sudan list decoding [35] if some servers are Byzantine
or malicious).
3.3 Threshold BLS signatures
The BLS signature scheme [8] is a ‘short’ signature scheme that
uses a pairing function for signature veriﬁcation. The signer’s pri-
vate signing key is a random integer x ∈ Zq, and the correspond-
ing public veriﬁcation key is (ˆg, ˆgx) (recall that ˆg is a generator
of G2). Given the signing key x and a message m, the signature
is computed via σ = hx where h = hash(m) is a cryptographic
hash of m; the veriﬁcation equation is e(σ, ˆg) ?= e(h, ˆgx). We
use the (k, (cid:96))-threshold variant (and also the (k, k)-threshold vari-
ant) of BLS signatures; in both cases, the signing keys are evalua-
tions of a polynomial of degree k − 1 and the master secret is the
constant term of this polynomial. The user recombines signature
shares via Lagrange interpolation in the exponent. Note that by
publishing the individual ‘veriﬁcation key shares’ of each signer,
threshold BLS signatures provide some level of robustness against
Byzantine signers since each signature share can also be veriﬁed
independently by using the signer’s public veriﬁcation key share.
6803.4 Polynomial commitments
Polynomial commitments [40] allow a prover to form constant-
sized commitments to polynomials in such a way that a veriﬁer can
later use these commitments to conﬁrm evaluations of the commit-
ted polynomials without revealing any additional information about
them. We use the PolyCommitDL construction of Kate et al. [40],
which provides unconditional hiding if the commitment is opened
to at most t−1 evaluations (for a degree-t polynomial) and compu-
tational hiding under the discrete log (DL) assumption if the poly-
nomial is opened at a tth point (t + 1 or more openings is sufﬁcient
to interpolate and thus recover the committed polynomial), as well
as their PolyCommitPed construction, which offers unconditional
hiding even when t evaluations are revealed. Their constructions
are based on the polynomial remainder theorem: if f is a polyno-
mial, then the remainder obtained by dividing f (x) by x− r equals
f (r); in other words, x − r divides f (x) − f (r). We describe how
PolyCommitDL works, and refer the reader to [40] for details on
the similar PolyCommitPed construction. A commitment to the
polynomial f (x) = atxt + ··· + a1x + a0 in PolyCommitDL
has the form Cf = (gαt
)at ··· (gα)a1 ga0 = gf (α), where α is se-
cret, g ∈ G1 is a generator, and all bases (as well as ˆg and ˆgα) are
part of the commitment scheme’s public key. If PolyCommitPed
commitments are used, then the public key includes the additional
, . . . , hα, h, where h ∈ G1 is a generator whose discrete
values hαt
logarithm with respect to g is unknown. To open an evaluation of
f at x = r, the prover invokes CreateWitness (f, r), which
outputs a polynomial commitment w to the quotient obtained upon
division of f (x)−f (r) by x−r; the commitment w is called a wit-
ness. The veriﬁer can conﬁrm the claimed evaluation by checking if
Ver (Cf , r, f (r), w) =
is
true. Note that in [40], polynomial commitments are constructed
over a symmetric pairing, whereas in this work we construct our
polynomial commitments over an asymmetric pairing, since we
wish to reuse this pairing for short threshold BLS signatures.