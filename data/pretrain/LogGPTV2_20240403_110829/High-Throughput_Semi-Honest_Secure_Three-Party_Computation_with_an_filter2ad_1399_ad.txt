with the correlated randomness that P3 receives (which is
generated using a pseudorandom function with a key not
known to P1) this value is random. However, c1 is ﬁxed
(since it equals r1). Stated diﬀerently, given that r1 is ﬁxed,
there are exactly two possible values for (z1, c1) based on
z1 = 0 or z1 = 1. In contrast, a random secret sharing has
four possible values for (z1, c1), with all four combinations
of z1, c1 ∈ {0, 1}. Thus, it is not true that the multiplication
protocol generates a new random sharing of the product.
In order to solve this problem, we take a diﬀerent ap-
proach. We allow the corrupted party to completely de-
termine its share (zi, ci). The functionality Fmult then de-
termines the other parties’ shares based on (zi, ci) and the
product vavb. Interestingly, in this secret sharing method,
a single share together with the secret fully determines all
other shares. This is because each ci = zi−1 − vavb. Thus,
(zi, ci) and vavb determines zi−1 = ci + vavb, which in turn
determines zi+1 since z1 + z2 + z3 = 0. Finally, all z values
together with vavb determine all c values. Formally:
FUNCTIONALITY 3.3
(Fmult – multiplication).
1. Fmult receives ((xj , aj ), (yj , bj )) from each Pj and re-
ceives a pair (zi, ci) ∈ Z2n × Z2n from the adversary
controlling Pi.
2. Fmult computes va = x1 − a2 and vb = y1 − b2 and
3. Fmult sets zi−1 = ci + vc and zi+1 = −zi − zi−1, and
4. Fmult sends each Pj the pair (zj , cj ) (for j ∈ {1, 2, 3}).
vc = vavb.
sets ci−1 = zi+1 − vc and ci+1 = zi − vc.
We denote the protocol for securely computing f that is
deﬁned in Section 2.3 by Protocol 2.3. We now prove the
security of Protocol 2.3 according to Deﬁnition 3.2.
Theorem 3.4. Let f : ((Z2n )∗)3 → ((Z2n )∗)3 be a 3-ary
functionality. Then, Protocol 2.3 computes f with perfect
security in the Fmult-hybrid model, in the presence of one
semi-honest corrupted party.
Proof Sketch:
Since the circuit C computes functional-
ity f the ﬁrst (correctness) requirement of Deﬁnition 3.2 is
immediately fulﬁlled. We now proceed to the second (pri-
vacy) requirement of the deﬁnition. Intuitively, the protocol
is private since the corrupted party receives nothing in the
execution beyond shares on the input wires which are uni-
formly distributed and the shares on the output wires. In
particular, addition gates consist of local computation only,
and multiplication gates are computed using the Fmult func-
tionality. However, in Fmult, the adversary deﬁnes the cor-
rupted party’s share (zi, ci) as it likes and receives nothing
back (formally, it receives back (zi, ci) but this is already
known). Thus, this can reveal nothing whatsoever about
the actual values on the wires in the computation. Finally,
for each output wires in which Pi receives output, given its
share (zi, ci) on the output wire and given the real output
value v, the simulator can generate the exact shares that Pi
would receive from the other parties. This is due to the fact
mentioned above that a single share plus the actual secret
fully determines the other two shares (and can be computed
eﬃciently in the same way as the functionality). It follows
that we can construct a simulator that simply deﬁnes the
view of the corrupted party to be shares of arbitrary values
for the input wires, and provide the shares received on the
output wires (after running the adversary and receiving the
shares it chooses for its output wires). By Lemma 2.1, the
simulator-generated view of the corrupted party is identi-
cally distributed to that of a real execution.
3.3 Computing Fmult in the Fcr-Hybrid Model
In this section, we prove that the multiplication protocol
described in Section 2.3 computes the Fmult functionality
with perfect security in the presence of one semi-honest cor-
rupted party. Recall that we use correlated randomness in
the form of random α1, α2, α3 such that α1 + α2 + α3 = 0.
Background – correlated randomness. First, we for-
mally deﬁne the ideal functionality Fcr. A naive deﬁnition
would be to have the ideal functionality choose α1, α2, α3
and send αi to Pi for i ∈ {1, 2, 3}. However, securely realiz-
ing such a functionality would require interaction (as in the
information-theoretic method ﬁrst described in Section 2.2).
In order to model our computational method described in
Section 2.2 (which is the same as used for the ring case) we
need to take into account that the corrupted party’s value is
generated in a very speciﬁc way using a pseudorandom func-
tion. In order for the Fmult protocol to be secure, all that is
needed is that the corrupted party knows nothing about the
honest party’s values (beyond the given constraint that all
values sum to zero). In particular, there is no requirement
regarding how the corrupted party’s value is generated. Re-
call that in our protocol each party holds two keys which are
used to locally compute the correlated randomness. In or-
der for the view of the corrupted party to be like in the real
protocol, we deﬁne the functionality Fcr so that it gener-
ates the corrupted party’s value in this exact same way (i.e.,
Fk(id) − Fk(cid:48) (id) for keys k, k(cid:48); see Section 2.3). As we have
mentioned, the honest parties’ values are chosen randomly,
under the constraint that all values sum to zero.
The functionality is described formally in Functionality 3.5.
The functionality chooses two keys k, k(cid:48) for a pseudorandom
function F and sends them to the corrupted party. We de-
note by κ the computational security parameter, and thus
the length of the keys k, k(cid:48).
FUNCTIONALITY 3.5
(Fcr – corr. randomness).
Let F : {0, 1}∗ ×{0, 1}∗ → Z2n be a keyed function. Upon
invocation, Fcr chooses a pair of keys k, k(cid:48) ∈ {0, 1}κ and
sends them to the adversary controlling party Pi. Then:
• Upon receiving input id from all parties, functionality
Fcr computes αi = Fk(id)−Fk(cid:48) (id) and chooses random
values αi−1, αi+1 ∈ Z2n under the constraint that α1 +
α2 + α3 = 0 mod 2n. Fcr sends αj to Pj for every j.
811The multiplication protocol. A formal description of
the protocol that securely computes the multiplication func-
tionality Fmult in the Fcr-hybrid model appears in Proto-
col 3.6.
(Computing Fmult).
PROTOCOL 3.6
• Inputs: Each party Pj (with j ∈ {1, 2, 3}) holds two
(cid:1)-
pairs of values (xj , aj ) , (yj , bj ) which are valid (cid:0)3
sharings of the values that are on the input wires.
• Auxiliary input: The parties hold the same unique
identiﬁer id (in the protocol using Fmult this identiﬁer
can be the index of the multiplication gate being com-
puted).
2
• The protocol:
1. Correlated randomness: Each party Pj (with
j ∈ {1, 2, 3}) sends id to Fcr and receives back αj
from Fcr.
2. Local computation: Each party Pj locally com-
putes: rj =
aj bj−xj yj +αj
.
3
3. Communication: Party Pj sends rj to party
Pj+1 (recall that Pj+1 = P1 when j = 3).
• Output: Each Pj outputs (zj , cj ) where zj = rj−1− rj
and cj = −2rj−1 − rj ; recall rj−1 = r3 when j = 1.
We now prove that the protocol is secure in the presence
of one static semi-honest corrupted party.
Theorem 3.7. Protocol 3.6 computes Fmult with perfect
security in the Fcr-hybrid model in the presence of one semi-
honest corrupted party.
Proof. In the protocol, the corrupted party receives a
single message. This message is an element from Z2n which
is uniformly distributed over Z2n , due to the fact that each
party masks its message using a random value received from
the Fcr functionality.
Intuitively, the protocol is secure
because all the corrupted party sees is a random element.
(Note that the corrupted party also receives output from
Fcr but this is fully determined to be αi = Fk(id)−Fk(cid:48) (id).)
We now prove this claim formally.
The Fmult functionality as we have deﬁned it is determin-
istic, and we therefore prove security via the simpler Deﬁ-
nition 3.2. In order to show correctness, we need to show
that the actual values (z1, c1), (z2, c2), (z3, c3) output by all
three parties from Protocol 3.6 are exactly the same values
as those computed by Fmult. In order to see that this holds,
recall that in Section 2.3 we showed that
z1 + z2 + z3 = 0 and ∀j ∈ {1, 2, 3} cj = zj−1 − vavb. (4)
We claim that given a ﬁxed (zi, ci) and vavb, Eq. (4) im-
plies that all values zi−1, ci−1, zi+1, ci+1 are fully determined.
Speciﬁcally, let (zi, ci) be ﬁxed and let vavb be the output
value. Since for all j ∈ {1, 2, 3} we have cj = zj−1 − vavb,
this implies that zi−1 = ci + vavb is determined, which in
turn determines zi+1 = −zi − zi−1. Finally, this determines
ci+1 = zi − vavb and ci−1 = zi+1 − vavb. This is exactly the
way that Fmult computes the output values, and thus these
are identical in the protocol and in the functionality output.
We now prove privacy by deﬁning the simulator. The sim-
ulator S receives the input and output of the corrupted party
Pi from Fmult as well as the auxiliary input id and (k, k(cid:48)),
and needs to compute the messages Pi sees during the execu-
tion. The input of the corrupted party Pi consists of two pair
3
where αi = Fk(id) − Fk(cid:48) (id) as
of shares (xi, ai), (yi, bi) and it has no output. Intuitively, S
chooses a random element ri−1 ∈ Z2n and uses it to deﬁne
the pair (zi, ci) that it sends to the trusted party comput-
ing Fmult. Formally, the simulator receives (((xi, ai), (yi, bi))
and works as follows:
1. S chooses a random ri−1 ∈ Z2n .
2. S sets ri = aibi−xiyi+αi
would be computed by Fcr in the protocol.
3. S sets zi = ri−1 = ri and ci = −2ri−1 − ri.
4. S sends (zi, ci) to Fmult.
5. S adds αi and ri−1 to the view of the corrupted party.
The values αi and ri are computed by S exactly as by
Pi in a real execution. The only diﬀerence is how ri−1 is
computed; Pi receives ri−1 = ai−1bi−1−xi−1yi−1+αi−1
from
Pi−1 in a real execution, whereas S chooses ri−1 ∈ Z2n uni-
formly at random in the simulation. The distribution over
these two values is identical by the fact that Fcr chooses
αi−1, αi+1. Speciﬁcaly, Fcr chooses these at random under
the constraint that α1 + α2 + α3 = 0. However, this is equiv-
alent to choosing αi−1 ∈ Z2n uniformly at random and then
setting αi+1 = −αi − αi−1. Now, since αi−1 is uniformly
random, this implies that ri−1 is uniformly random (since
it is independent of all other values used in the generation
of ri−1). Thus, the distribution over the real ri−1 received
by Pi in the protocol execution and over the simulated ri−1
generated by S is identical. This completes the proof.
3.4 Computing Fcr in the Plain Model
In this section, we prove that our protocol privately com-
putes the Fcr functionality in the presence of one semi-
honest corrupted party. We have already presented the Fcr
functionality in Functionality 3.5. The protocol for comput-
ing it appears in Protocol 3.8.
3
PROTOCOL 3.8
(Computing Fcr).
• Auxiliary input: Each party holds a security pa-
rameter κ, a description of a pseudorandom function
F : {0, 1}κ × {0, 1}κ → Z2n .
• Setup (executed once):
1. Each party Pj chooses randomly kj ∈ {0, 1}κ.
2. Each party Pj sends kj to party Pj+1.
• Generating randomness: Upon input id, each party
Pj computes αj = Fkj (id)− Fkj−1 (id) and outputs it.
Theorem 3.9. If Fk() is a pseudorandom function, then
Protocol 3.8 computes Fcr with computational security in the
plain model, in the presence of 1 semi-honest corrupted party.
Proof Sketch: Since the functionality is probabilistic,
we need to use Deﬁnition 3.1. Unlike the previous security
proofs we have seen, the security of this protocol is compu-
tational and it relies on the assumption that Fk is a pseu-
dorandom function. Thus, we will show that the ability to
distinguish between the outputs in the real and ideal execu-
tions can be used to distinguish between the pseudorandom
function and a truly random function, in contradiction to
the assumption.
Let Pi be the corrupted party. We deﬁne the simulator
S who simulates Pi’s view. S is invoked on the security
parameter 1κ and works as follows:
8121. S receives k, k(cid:48) from Fcr when it is ﬁrst invoked (see
Functionality 3.5).
2. S sets the random tape of Pi (used by Pi to sample ki)
to be the key k received from Fcr.
3. S simulates the setup phase by writing the key k(cid:48) as the
key ki−1 received by Pi from Pi−1.
4. From this point on, every time that Pi receives id for
input, S sends it to the trusted party computing Fcr.
(Pi receives back αi but this equals Fk(id) − Fk(cid:48) (id) =
Fki (id)−Fki−1 (id) and is known to Pi. Also, this value is
computed locally by Pi in the protocol and not received.
Thus, S does not include it in Pi’s view.)
It is easy to see that the view generated by the simulator
which consists of the Pi’s random tape and the incoming
message ki−1 is distributed identically to its view in a real
execution. However, this is not suﬃcient, as we need to
prove indistinguishability of the joint distribution of both
the corrupted party’s view and the honest parties’ outputs.
Observe that in the real protocol execution, the honest par-
ties’ outputs are generated using the pseudorandom func-
tion, whereas in the ideal world they are chosen randomly
by Fcr.
Intuitively, the proof follows from the fact that both Pi−1
and Pi+1 generate their values using the pseudorandom func-
tion F with key ki+1 that is independent of ki and ki−1.
Thus, replacing Fki+1 with a truly random function f re-
sults in Pi−1 and Pi+1 generating values αi−1 and αi+1 that
are random under the constraint that α1 + α2 + α3 = 0.
(Speciﬁcally, Pi−1 generates αi−1 = Fki−1 (id) − f (id) and