        chain        blockChain
        gasPrice     *big.Int             //Lowest GasPrice limit
        /*
            other parameters
        */
    }
It has found that there is a minimum requirement for gasPrice When generating
a txt instance. Specifically in this function will refuse to receive this
transaction.
    // validateTx checks whether a transaction is valid according to the consensus
    // rules and adheres to some heuristic limits of the local node (price and size).
    func (pool *TxPool) validateTx(tx *types.Transaction, local bool) error {
        // Verification of gasPrice
        if !local && pool.gasPrice.Cmp(tx.GasPrice()) > 0 {
            return ErrUnderpriced
        }
        /*
           ...
        */
        return nil
    }
##### ii.Removing Transactions Below the Threshold
Code path: ./go-ethereum/core/tx_list.go And it will delete the transaction
below the threshold in the processing txs, but the local transaction will not
be deleted.
    // Cap finds all the transactions below the given price threshold, drops them
    // from the priced list and returs them for further removal from the entire pool.
    func (l *txPricedList) Cap(threshold *big.Int, local *accountSet) types.Transactions {
        drop := make(types.Transactions, 0, 128) // Remote underpriced transactions to drop
        save := make(types.Transactions, 0, 64)  // Local underpriced transactions to keep
        for len(*l.items) > 0 {
            // Discard stale transactions if found during cleanup
            tx := heap.Pop(l.items).(*types.Transaction)
            if _, ok := (*l.all)[tx.Hash()]; !ok {
                // Update the states counter if one has been found deleted.
                l.stales--                continue
            }
            // Stop the discards if we've reached the threshold
            if tx.GasPrice().Cmp(threshold) >= 0 {
                // Exit if the price is above the threshold.
                save = append(save, tx)
                break
            }
            // Non stale transaction found, discard unless local
            if local.containsTx(tx) {  //The local transactions will not be deleted.
                save = append(save, tx)
            } else {
                drop = append(drop, tx)
            }
        }
        for _, tx := range save {
            heap.Push(l.items, tx)
        }
        return drop
    }
The above section is a node within the blockchain network and there are
partial filtering or rule restrictions when attempting to receive or join a
transaction with 0 gasPrice. But we can still legally add the 0 gasPrice
transactions to the block by modifying the source code, and perform the nonce
subsequent calculation. Next, we continue to analyze the source code to
investigate whether the block obtained by this method can be accepted by other
nodes and reach a consensus.
##### iii.Consensus checking
Code path: ./go-ethereum/consensus/consensus.go This is the consensus
algorithm engine interface provided in the geth.
    type Engine interface {
        // signature
        Author(header *types.Header) (common.Address, error)
        /*
           Verify the header, seal, processing difficulty and other functions
           ...
        */
        // Pre-processing block header information, modification difficulty, etc.
        Prepare(chain ChainReader, header *types.Header) error
        // Blocks rewards, etc. And something after mining out the block.
        Finalize(chain ChainReader, header *types.Header, state *state.StateDB, txs []*types.Transaction,
            uncles []*types.Header, receipts []*types.Receipt) (*types.Block, error)
        // Calculate nonce, exit if a higher chain is received.
        Seal(chain ChainReader, block *types.Block, stop 
  5. 
  6. 
* * *