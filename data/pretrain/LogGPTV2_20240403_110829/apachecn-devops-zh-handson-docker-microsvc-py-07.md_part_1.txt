# 七、配置和保护生产系统
生产(来自生产环境)是描述主系统的通用名称，主系统是为真实客户工作的系统。这是公司可用的主要环境。也可以叫做**l**T2【5】T3。这个系统需要在互联网上公开才能发挥作用，这也使得安全性和可靠性成为重中之重。在本章中，我们将看到如何为生产部署 Kubernetes 集群。
我们将看到如何使用第三方产品**亚马逊网络服务** ( **AWS** )来设置一个，并将介绍为什么创建自己的是个坏主意。我们将在这个新的部署中部署我们的系统，并将检查如何设置负载平衡器，以有序的方式将流量从旧的整体移动到新的系统。
我们还将看到如何自动扩展 Kubernetes 集群内部的豆荚和节点，以根据需要调整资源。
本章将涵盖以下主题:
*   在野外使用 Kubernetes
*   设置 Docker 注册表
*   创建集群
*   使用 HTTPS 和顶级域名保护外部访问
*   准备好迁移到微服务
*   自动缩放集群
*   顺利部署新的 Docker 映像
我们还将介绍一些良好的实践，以确保我们的部署尽可能平稳可靠地部署。到本章结束时，您将在一个公共可用的 Kubernetes 集群中部署该系统。
# 技术要求
在示例中，我们将使用 AWS 作为我们的云供应商。我们需要安装一些实用程序来从命令行进行交互。查看本文档中如何安装 AWS 命令行界面实用程序([https://aws.amazon.com/cli/](https://aws.amazon.com/cli/))。该实用程序允许从命令行执行 AWS 任务。
要操作 Kubernetes 集群，我们将使用`eksctl`。有关安装说明，请查看本文档([https://eksctl.io/introduction/installation/](https://eksctl.io/introduction/installation/))。
您还需要安装`aws-iam-authenticator`。你可以在这里查看安装说明。
本章代码可在 GitHub 上的以下链接找到:[https://GitHub . com/PacktPublishing/动手 Docker-for-micro service-with-Python/tree/master/chapter 07](https://github.com/PacktPublishing/Hands-On-Docker-for-Microservices-with-Python/tree/master/Chapter07)。
确保您的计算机上安装了`ab` (Apache Bench)。它与 Apache 捆绑在一起，默认情况下安装在 macOS 和一些 Linux 发行版中。可以查看这篇文章:[https://www.petefreitag.com/item/689.cfm](https://www.petefreitag.com/item/689.cfm)。
# 在野外使用 Kubernetes
当部署要用作生产的集群时，最好的建议是使用商业服务。所有主要的云提供商(AWS EKS、**Google Kubernetes Engine**(**GKE**)和**Azure Kubernetes Service**(**AKS**)都允许您创建托管的 Kubernetes 集群，这意味着唯一需要的参数是选择物理节点的数量和类型，然后通过`kubectl`进行访问。
We will use AWS for the examples in this book, but take a look at the documentation of other providers in case they work better for your use case.
Kubernetes 是一个抽象层，所以这种操作方式非常方便。定价类似于为原始实例支付充当节点服务器的费用，并且不需要安装和管理 Kubernetes 控制平面，因此实例充当 Kubernetes 节点。
It's worth saying it again: unless you have a very good reason, *do not deploy your own Kubernetes cluster*; instead, use a cloud provider offering. It will be easier and will save you from a lot of maintenance costs. Configuring a Kubernetes node in a way that's performant and implements good practices to avoid security problems is not trivial. 
如果您有自己的内部数据中心，创建自己的 Kubernetes 集群可能是不可避免的，但在任何其他情况下，直接使用由已知云提供商管理的数据中心都更有意义。可能您当前的提供商已经为托管 Kubernetes 提供了服务！
# 创建 IAM 用户
AWS 使用不同的用户来授予他们几个角色。它们携带不同的权限，使用户能够执行操作。该系统在 AWS 术语中被称为**身份和访问管理** ( **IAM** )。
Creating a proper IAM user could be quite complicated, depending on your settings and how AWS is used in your organization. Check the documentation ([https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_create.html](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_create.html)) and find the people responsible for dealing with AWS in your organization and check with them to see what the required steps are.
让我们看看创建 IAM 用户的步骤:
1.  如果没有适当的权限，我们需要创建一个 AWS 用户。确保它能够通过激活编程访问来访问应用编程接口，如下图所示:
![](img/cedad3a8-ea90-4541-9f22-c5605c90b77e.png)
这将显示其访问密钥、密钥和密码。一定要安全存放。
2.  要通过命令行访问，您需要使用 AWS 命令行界面。使用 AWS 命令行界面和访问信息，将您的命令行配置为使用`aws`:
```
$ aws configure
AWS Access Key ID [None]: 
AWS Secret Access Key [None]: 
Default region name [us-west-2]: 
Default output format [None]:
```
您应该能够使用以下命令获取标识来检查配置是否成功:
```
$ aws sts get-caller-identity
{
 "UserId": "",
 "Account": "",
 "Arn": "arn:aws:iam::XXXXXXXXXXXX:user/jaime"
}
```
现在，您可以访问命令行 AWS 操作。
Keep in mind that the IAM user can create more keys if necessary, revoke the existing ones, and so on. This normally is handled by an admin user in charge of AWS security. You can read more in the Amazon documentation ([https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_access-keys.html#Using_CreateAccessKey_API](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_access-keys.html#Using_CreateAccessKey_API)). Key rotation is a good idea to ensure that old keys are deprecated. You can do it through the `aws` client interface.
我们将使用网络控制台进行一些操作，但其他操作需要使用`aws`。
# 设置 Docker 注册表
我们需要能够到达存储要部署的映像的 Docker 注册表。确保 Docker 注册表可访问的最简单方法是在同一服务中使用 Docker 注册表。
You can still use the Docker Hub registry, but using a registry in the same cloud provider is typically easier as it's better integrated. It will also help in terms of authentication.
我们需要配置一个**弹性容器注册表** ( **ECR** ，使用以下步骤:
1.  登录 AWS 控制台并搜索 Kubernetes 或 ECR:
![](img/29d9a38c-01d7-4df5-b22d-f0df643270b2.png)
2.  创建一个名为`frontend`的新注册表。它将创建一个完整的网址，您需要复制它:
![](img/17c47ce3-fa05-48a7-aa03-48efcdc28818.png)
3.  我们需要让我们的本地`docker`登录注册表。注意`aws ecr get-login`会返回一个`docker`命令让你登录，复制粘贴:
```
$ aws ecr get-login --no-include-email
$ docker login -u AWS -p 
Login Succeeded
```
4.  现在，我们可以用完整的注册表名标记要推送的映像，并推送它:
```
$ docker tag thoughts_frontend 033870383707.dkr.ecr.us-west-2.amazonaws.com/frontend
$ docker push 033870383707.dkr.ecr.us-west-2.amazonaws.com/frontend
The push refers to repository [033870383707.dkr.ecr.us-west-2.amazonaws.com/frontend]
...
latest: digest: sha256:21d5f25d59c235fe09633ba764a0a40c87bb2d8d47c7c095d254e20f7b437026 size: 2404
```
5.  形象被推了！您可以通过在浏览器中打开 AWS 控制台进行检查:
![](img/bed774ba-ff0f-45bc-aefa-38ed3337de56.png)
6.  我们需要重复这个过程，以推动用户后端和思想后端。
We use the setting of two containers for the deployment of the Users Backend and Thoughts Backend, which includes one for the service and another for a volatile database. This is done for demonstration purposes, but won't be the configuration for a production system, as the data will need to be persistent.
At the end of the chapter, there's a question about how to deal with this situation. Be sure to check it! 
将添加所有不同的注册表。您可以在浏览器 AWS 控制台中检查它们:
![](img/cb2a0221-97f4-427d-beab-1bcc17c237e1.png)
我们的管道将需要调整以推进到这个存储库。
A good practice in deployment is to make a specific step called **promotion**, where the images ready to use in production are copied to an specific registry, lowering the chance that a bad image gets deployed by mistake in production.
This process may be done several times to promote the images in different environments. For example, deploy a version in an staging environment. Run some tests, and if they are correct, promote the version, copying it into the production registry and labelling it as good to deploy on the production environment.
This process can be done with different registries in different providers.
我们需要在部署中使用完整网址的名称。
# 创建集群
为了使我们的代码在云中可用并可公开访问，我们需要建立一个工作的生产集群，这需要两个步骤:
1.  在 AWS 云中创建 EKS 集群(这使您能够运行在该云集群中运行的`kubectl`命令)。
2.  部署您的服务，使用一组`.yaml`文件，正如我们在前面章节中看到的。这些文件只需要很少的改动就能适应云环境。
让我们检查第一步。
# 创建 Kubernetes 集群
创建集群的最佳方式是使用`eksctl`实用程序。这为我们实现了大部分工作的自动化，并允许我们在必要时进行扩展。
Be aware that EKS is available only in some regions, not all. Check the AWS regional table ([https://aws.amazon.com/about-aws/global-infrastructure/regional-product-services/](https://aws.amazon.com/about-aws/global-infrastructure/regional-product-services/)) to see the available zones. We will use the Oregon (`us-west-2`) region.
要创建 Kubernetes 集群，让我们执行以下步骤:
1.  首先，检查`eksctl`是否安装正确:
```
$ eksctl get clusters
No clusters found
```
2.  创建新集群。大约需要 10 分钟:
```
$ eksctl create cluster -n Example
[i] using region us-west-2
[i] setting availability zones to [us-west-2d us-west-2b us-west-2c]
...
[✔]  EKS cluster "Example" in "us-west-2" region is ready
```
3.  这将创建集群。检查 AWS 网络界面将显示新配置的元素。
The  `--arg-access` option needs to be added for a cluster capable of autoscaling. This will be described in more detail in the *Autoscaling the cluster* section.
4.  `eksctl create`命令还添加了一个新的上下文，其中包含关于远程 Kubernetes 集群的信息，并激活它，因此`kubectl`现在将指向这个新集群。
Note that `kubectl` has the concept of contexts as different clusters it can connect. You can see all the available contexts running `kubectl config get-contexts` and `kubectl config use-context ` to change them. Check the Kubernetes documentation ([https://kubernetes.io/docs/tasks/access-application-cluster/configure-access-multiple-clusters/](https://kubernetes.io/docs/tasks/access-application-cluster/configure-access-multiple-clusters/)) on how to create new contexts manually.
5.  该命令为`kubectl`设置适当的上下文来运行命令。默认情况下，它会生成一个包含两个节点的集群:
```
$ kubectl get nodes
NAME                    STATUS ROLES AGE VERSION
ip-X.us-west-2.internal Ready  11m v1.13.7-eks-c57ff8
ip-Y.us-west-2.internal Ready  11m v1.13.7-eks-c57ff8
```
6.  我们可以扩展节点的数量。减少资源的使用，节约资金。我们需要检索控制节点数量的节点组的名称，然后将其缩小:
```
$ eksctl get nodegroups --cluster Example
CLUSTER NODEGROUP CREATED MIN SIZE MAX SIZE DESIRED CAPACITY INSTANCE TYPE IMAGE ID
Example ng-fa5e0fc5 2019-07-16T13:39:07Z 2 2 0 m5.large ami-03a55127c613349a7
$ eksctl scale nodegroup --cluster Example --name ng-fa5e0fc5 -N 1
[i] scaling nodegroup stack "eksctl-Example-nodegroup-ng-fa5e0fc5" in cluster eksctl-Example-cluster
[i] scaling nodegroup, desired capacity from to 1, min size from 2 to 1
```
7.  可以通过`kubectl`联系集群，正常进行操作:
```
$ kubectl get svc
NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE
kubernetes ClusterIP 10.100.0.1  443/TCP 7m31s
```
集群已经建立，我们可以从命令行运行命令。
Creating an EKS cluster can be tweaked in a lot of ways, but AWS can be temperamental in terms of access, users, and permissions. For example, the cluster likes to have a CloudFormation rule to handle the cluster, and all the elements should be created with the same IAM user. Check with anyone that works with the infrastructure definition in your organization to check what's the proper configuration. Don't be afraid of running tests, a cluster can be quickly removed through the `eksctl` configuration or the AWS console.
此外，`eksctl`尽可能创建节点位于不同可用性区域(同一地理区域内的 AWS 隔离位置)的集群，这将由于 AWS 数据中心的问题导致整个集群宕机的风险降至最低。