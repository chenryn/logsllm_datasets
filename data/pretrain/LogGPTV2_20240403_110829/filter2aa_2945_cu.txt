### Optimized Text

#### Adding and Configuring the `Images` Folder
1. **Create a New Folder:**
   - Click on "New Folder."
   - Rename the new folder to `Images`.

2. **Add an Existing Item:**
   - Right-click the `Images` folder.
   - Point to "Add" and then click "Existing Item."
   - In the "Add Existing Item - Customers" dialog box, navigate to the `\Microsoft Press\VCSBS\Chapter 25\Resources` folder in your `Documents` folder.
   - Select `wood.jpg` and click "Add."

   The `wood.jpg` file will be added to the `Images` folder in the `Customers` project. This file contains an image of a tasteful wooden background that you will use for the `Customers` form.

#### Modifying the `AppStyles.xaml` File
3. **Add XAML Markup for `ImageBrush` Resource:**
   - In the Code and Text Editor window displaying the `AppStyles.xaml` file, add the following XAML markup:
     ```xml
     <ImageBrush x:Key="WoodBrush" ImageSource="ms-appx:///Images/wood.jpg"/>
     ```
   - This markup creates an `ImageBrush` resource called `WoodBrush` based on the `wood.jpg` file. You can use this image brush to set the background of a control, which will display the image from the `wood.jpg` file.

4. **Add Style for `Grid` Control:**
   - Underneath the `ImageBrush` resource, add the following style to the `AppStyles.xaml` file:
     ```xml
     <Style x:Key="GridStyle" TargetType="Grid">
         <Setter Property="Background" Value="{StaticResource WoodBrush}"/>
     </Style>
     ```
   - This markup defines a style named `GridStyle` for the `Grid` control. The `Background` property is set to the `WoodBrush` `ImageBrush` resource using the `StaticResource` keyword.

#### Updating the Global Resource Dictionary
5. **Update the `App.xaml` File:**
   - In Solution Explorer, double-click `App.xaml` to open it in the Code and Text Editor window.
   - Add a reference to the `AppStyles.xaml` file by adding the following code to the `App.xaml` file:
     ```xml
     <Application.Resources>
         <ResourceDictionary>
             <ResourceDictionary.MergedDictionaries>
                 <ResourceDictionary Source="ms-appx:///AppStyles.xaml"/>
             </ResourceDictionary.MergedDictionaries>
         </ResourceDictionary>
     </Application.Resources>
     ```
   - This adds the resources defined in the `AppStyles.xaml` file to the global resource dictionary, making them available throughout the app.

#### Applying the Style to the `MainPage.xaml` File
6. **Switch to the `MainPage.xaml` File:**
   - Open the `MainPage.xaml` file.
   - Find the outermost `Grid` control and replace its `Background` property with a `Style` property that references the `GridStyle` style:
     ```xml
     <Grid Style="{StaticResource GridStyle}">
         <!-- Other XAML content -->
     </Grid>
     ```

7. **Rebuild the Solution:**
   - On the Build menu, click "Rebuild Solution."
   - The background of the `Grid` control in the Design View window should now display the wooden panel.

#### Additional Notes
- **Responsive Design:**
  - Ensure that any background image applied to a page or control maintains its aesthetics across different device form factors and orientations. An image that looks good on a 30-inch monitor might appear distorted on a Windows phone. Consider providing alternative backgrounds for different views and orientations, and use the Visual State Manager to switch between them as the visual state changes.

#### Creating and Applying More Styles
8. **Add `FontStyle` to `AppStyles.xaml`:**
   - Return to `AppStyles.xaml` and add the following style:
     ```xml
     <Style x:Key="FontStyle" TargetType="TextBlock">
         <Setter Property="FontFamily" Value="Segoe Print"/>
     </Style>
     ```
   - This style applies to `TextBlock` elements and changes the font to Segoe Print, which resembles a handwriting style.

9. **Add `HeaderStyle` to `AppStyles.xaml`:**
   - Add the following composite style to `AppStyles.xaml`:
     ```xml
     <Style x:Key="HeaderStyle" TargetType="TextBlock" BasedOn="{StaticResource FontStyle}">
         <Setter Property="HorizontalAlignment" Value="Center"/>
         <Setter Property="TextWrapping" Value="Wrap"/>
         <Setter Property="VerticalAlignment" Value="Top"/>
         <Setter Property="Foreground" Value="White"/>
     </Style>
     ```
   - This style sets the `HorizontalAlignment`, `TextWrapping`, `VerticalAlignment`, and `Foreground` properties of a `TextBlock` and references the `FontStyle` style.

10. **Add `TabularHeaderStyle` and `ColumnarHeaderStyle` to `AppStyles.xaml`:**
    - Add the following styles to `AppStyles.xaml`:
      ```xml
      <Style x:Key="TabularHeaderStyle" TargetType="TextBlock" BasedOn="{StaticResource HeaderStyle}">
          <Setter Property="FontSize" Value="30"/>
      </Style>
      <Style x:Key="ColumnarHeaderStyle" TargetType="TextBlock" BasedOn="{StaticResource HeaderStyle}">
          <Setter Property="FontSize" Value="25"/>
      </Style>
      ```
    - These styles extend the `HeaderStyle` and set different font sizes for the tabular and columnar layouts.

11. **Apply the `TabularHeaderStyle` to the `Adventure Works Customers` Label:**
    - In `MainPage.xaml`, find the `TextBlock` control for the `Adventure Works Customers` label in the `customersTabularView` `Grid` control and modify its properties to reference the `TabularHeaderStyle`:
      ```xml
      <TextBlock Style="{StaticResource TabularHeaderStyle}" Text="Adventure Works Customers"/>
      ```

12. **Apply the `ColumnarHeaderStyle` to the `Customers` Label:**
    - Find the `TextBlock` control for the `Customers` label in the `customersColumnarView` `Grid` control and modify its properties to reference the `ColumnarHeaderStyle`:
      ```xml
      <TextBlock Style="{StaticResource ColumnarHeaderStyle}" Text="Customers"/>
      ```

13. **Add a Transformation to the `HeaderStyle`:**
    - Modify the `HeaderStyle` in `AppStyles.xaml` to include a rotation transformation:
      ```xml
      <Style x:Key="HeaderStyle" TargetType="TextBlock" BasedOn="{StaticResource FontStyle}">
          <Setter Property="HorizontalAlignment" Value="Center"/>
          <Setter Property="TextWrapping" Value="Wrap"/>
          <Setter Property="VerticalAlignment" Value="Top"/>
          <Setter Property="Foreground" Value="White"/>
          <Setter Property="RenderTransform">
              <Setter.Value>
                  <CompositeTransform Rotation="-5"/>
              </Setter.Value>
          </Setter>
      </Style>
      ```
    - This rotates the text displayed in the header by 5 degrees.

14. **Add a `LabelStyle` to `AppStyles.xaml`:**
    - Add the following style to `AppStyles.xaml`:
      ```xml
      <Style x:Key="LabelStyle" TargetType="TextBlock" BasedOn="{StaticResource FontStyle}">
          <Setter Property="FontSize" Value="30"/>
          <Setter Property="Foreground" Value="White"/>
      </Style>
      ```
    - This style applies to `TextBlock` elements used as labels and sets the font size and color.

15. **Apply the `LabelStyle` to the Labels in `MainPage.xaml`:**
    - In `MainPage.xaml`, modify the `TextBlock` controls for each of the labels in the `customersTabularView` and `customersColumnarView` `Grid` controls to reference the `LabelStyle`:
      ```xml
      <TextBlock Style="{StaticResource LabelStyle}" Text="Label 1"/>
      <TextBlock Style="{StaticResource LabelStyle}" Text="Label 2"/>
      <!-- Repeat for other labels -->
      ```

16. **Run the Application:**
    - On the Debug menu, click "Start Debugging" to build and run the app.
    - Use the Simulator if you are running on a display with a resolution less than 1366 Ã— 768.
    - The `Customers` form should appear styled as it does in the Design View window in Visual Studio.

17. **Test Responsiveness:**
    - Resize the window to make it narrower and verify that the styling has been applied to the controls in the `customersColumnarView` grid.
    - Stop debugging when done.

### Summary
In this chapter, you learned how to use the `Grid` control to implement a user interface that scales to different device form factors and orientations. You also learned how to use the Visual State Manager to adapt the layout of controls when the user changes the size of the window. Additionally, you learned how to create and apply custom styles to controls, making your code more maintainable and the XAML markup cleaner.

By using styles, you can easily implement various effects and make your code more maintainable. For example, changing the font used by labels and headings requires only a single change to the `FontStyle` style. Using Microsoft Blend for Visual Studio 2017, you can define complex styles and integrate them into your app, further enhancing the user experience.

### Quick Reference
- **Create a new UWP app:**
  - Use one of the UWP templates in Visual Studio 2017, such as the Blank App template.
- **Implement a scalable user interface:**
  - Use a `Grid` control and divide it into rows and columns, placing controls in these rows and columns.
- **Implement a responsive user interface:**
  - Create different layouts for each view and use the Visual State Manager to select the appropriate layout.
- **Create custom styles:**
  - Add a resource dictionary to the app and define styles using the `<Style>` element.
- **Apply a custom style to a control:**
  - Set the `Style` property of the control and reference the style by name.

### Next Steps
- Continue to Chapter 26 to learn how to add functionality to the app, enabling users to display and update data.
- If you want to exit Visual Studio 2017, go to the File menu, click "Exit," and save the project if prompted.