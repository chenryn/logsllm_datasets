and then click New Folder. Change the name of the new folder to
Images.
4. Right-click the Images folder, point to Add, and then click Existing
Item.
5. In the Add Existing Item - Customers dialog box, browse to the
\Microsoft Press\VCSBS\ Chapter 25\Resources folder in your
Documents folder, click wood.jpg, and then click Add.
The wood.jpg file is added to the Images folder in the Customers
project. This file contains an image of a tasteful wooden background
that you will use for the Customers form.
6. In the Code and Text Editor window displaying the AppStyles.xaml file,
add the following XAML markup shown in bold:
Click here to view code image
This markup creates an ImageBrush resource called WoodBrush that is
based on the wood.jpg file. You can use this image brush to set the
background of a control, and it will display the image in the wood.jpg
file.
7. Underneath the ImageBrush resource, add the following style shown in
bold to the AppStyles.xaml file:
Download from finelybook PI:EMAIL
937
Click here to view code image
This markup shows how to define a style. A Style element should have a
name (a key that enables it to be referenced elsewhere in the app), and it
should specify the type of control to which the style can be applied. You
are going to use this style with the Grid control.
The body of a style consists of one or more Setter elements. In this
example, the Background property is set to the WoodBrush ImageBrush
resource. The syntax is a little curious, though. In a value, you can either
reference one of the appropriate system-defined values for the property
(such as “Red” if you want to set the background to a solid red color) or
specify a resource that you have defined elsewhere. To reference a
resource defined elsewhere, you use the StaticResource keyword and
then place the entire expression in curly braces.
8. Before you can use this style, you must update the global resource
dictionary for the app in the App.xaml file by adding a reference to the
AppStyles.xaml file. In Solution Explorer, double-click App.xaml to
display it in the Code and Text Editor window. The App.xaml file looks
like this:
Click here to view code image
Currently, the App.xaml file defines only the app object and brings a
few namespaces into scope; the global resource dictionary is empty.
Download from finelybook PI:EMAIL
938
9. Add to the App.xaml file the code shown here in bold:
Click here to view code image
This markup adds the resources defined in the AppStyles.xaml file to the
list of resources available in the global resource dictionary. These
resources are now available for use throughout the app.
10. Switch to the MainPage.xaml file displaying the UI for the Customers
form. In the XAML pane, find the outermost Grid control:
Click here to view code image
In the XAML markup for this control, replace the Background property
with a Style property that references the GridStyle style, as shown in
bold in the following code:
Click here to view code image
11. On the Build menu, click Rebuild Solution.
The background of the Grid control in the Design View window should
switch and display a wooden panel, like this:
Download from finelybook PI:EMAIL
939
Note Ideally, you should ensure that any background image that
you apply to a page or control maintains its aesthetics as the device
form factor and orientation change. An image that looks cool on a
30-inch monitor might appear distorted and squashed on a
Windows phone. It might be necessary to provide alternative
backgrounds for different views and orientations and use the
Visual State Manager to modify the Background property of a
control to switch between them as the visual state changes.
12. Return to AppStyles.xaml in the Code and Text Editor window and add
the following FontStyle style after the GridStyle style:
Click here to view code image
Download from finelybook PI:EMAIL
940
This style applies to TextBlock elements and changes the font to Segoe
Print. This font resembles a handwriting style.
At this stage, it would be possible to reference the FontStyle style in
every TextBlock control that required this font, but this approach would
not provide any advantage over simply setting the FontFamily directly
in the markup for each control. The real power of styles occurs when
you combine multiple properties, as you will see in the next few steps.
13. Add the HeaderStyle style shown here to the AppStyles.xaml file:
Click here to view code image
This is a composite style that sets the HorizontalAlignment,
TextWrapping, VerticalAlignment, and Foreground properties of a
TextBlock. Additionally, the HeaderStyle style references the FontStyle
style by using the BasedOn property. The BasedOn property provides a
simple form of inheritance for styles.
You will use this style to format the labels that appear at the top of the
customersTabularView and customersColumnarView controls.
However, these headings have different font sizes (the heading for the
tabular layout is bigger than that of the columnar layout), so you will
create two more styles that extend the HeaderStyle style.
14. Add the following styles to the AppStyles.xaml file:
Click here to view code image
Download from finelybook PI:EMAIL
941
Note that the font sizes for these styles are slightly smaller than the font
sizes currently used by the headings in the Grid controls. This is because
the Segoe Print font is bigger than the default font.
15. Switch back to the MainPage.xaml file and find the XAML markup for
the TextBlock control for the Adventure Works Customers label in the
customersTabularView Grid control:
Click here to view code image
16. Change the properties of this control to reference the
TabularHeaderStyle style, as shown in bold in the following code:
Click here to view code image
The heading displayed in the Design View window should change color,
size, and font and look like this:
17. Find the XAML markup for the TextBlock control for the Customers
label in the customersColumnarView Grid control:
Click here to view code image
Download from finelybook PI:EMAIL
942
Modify the markup of this control to reference the
ColumnarHeaderStyle style, as shown here in bold:
Click here to view code image
Be aware that you won’t see this change in the Design View window
because the customersColumnarView Grid control is collapsed by
default. However, you will see the effects of this change when you run
the app later in this exercise.
18. Return to the AppStyles.xaml file in the Code and Text Editor window.
Modify the HeaderStyle style with the additional property Setter
elements shown in bold in the following example:
Click here to view code image
These elements rotate the text displayed in the header about its midpoint
by an angle of 5 degrees by using a transformation.
Note This example shows a simple transformation. Using the
RenderTransform property, you can perform a variety of other
Download from finelybook PI:EMAIL
943
transformations to an item, and you can combine multiple
transformations. For example, you can translate (move) an item on
the x- and y-axes, skew the item (make it lean), and scale an
element.
You should also notice that the value of the RenderTransform
property is itself another property/value pair (the property is
Rotation, and the value is –5). In cases such as this, you specify the
value by using the  tag.
19. Switch to the MainPage.xaml file. In the Design View window, the title
should now be displayed at a jaunty angle (you might need to rebuild the
application first before the updated style is applied):
20. In the AppStyles.xaml file, add the following style:
Click here to view code image
You will apply this style to the TextBlock elements that provide the
labels for the various TextBox and ComboBox controls that the user
employs to enter customer information. The style references the same
font style as the headings but sets the other properties to values more
appropriate for the labels.
21. Go back to the MainPage.xaml file. In the XAML pane, modify the
Download from finelybook PI:EMAIL
944
markup for the TextBlock controls for each of the labels in the
customersTabularView and customersColumnarView Grid controls.
Remove the HorizontalAlignment, TextWrapping, VerticalAlignment,
and FontSize properties, and reference the LabelStyle style, as shown
here in bold:
Click here to view code image
    ...
        ...
        ...
        ...
        ...
    ...
        ...
        ...
        ...
        ...
The labels on the form should change to the Segoe Print font and be
displayed in white, in a font size of 30 points:
22. On the Debug menu, click Start Debugging to build and run the app.
Download from finelybook PI:EMAIL
946
Note Use the Simulator if you are running on a display with a
resolution less than  1366 × 768.
The Customers form should appear and be styled in the same way that it
appears in the Design View window in Visual Studio. Notice that if you
enter any text into the various fields on the form, they use the default
font and styling for the TextBox controls.
Note Although the Segoe Print font is good for labels and titles, it
is not recommended as a font for data-entry fields because some of
the characters can be difficult to distinguish from one another. For
example, the lowercase letter l is very similar to the digit 1, and the
uppercase letter O is almost indistinguishable from the digit 0. For
this reason, it makes sense to stick with the default font for the
TextBox controls.
23. Resize the window to make it narrower and verify that the styling has
been applied to the controls in the customersColumnarView grid. The
form should look like this:
Download from finelybook PI:EMAIL
947
24. Return to Visual Studio and stop debugging.
You can see that by using styles, you can easily implement a number of
really cool effects. Also, careful use of styles makes your code much more
maintainable than it would be if you set properties on individual controls. For
example, if you want to switch the font used by the labels and headings in the
Customers app, you need to make only a single change to the FontStyle style.
In general, you should use styles wherever possible; besides assisting
maintainability, the use of styles helps to keep the XAML markup for your
forms clean and uncluttered, and the XAML for a form needs to specify only
the controls and layout rather than how the controls should appear on the
form. You can also use Microsoft Blend for Visual Studio 2017 to define
complex styles that you can integrate into an app. Professional graphics
Download from finelybook PI:EMAIL
948
artists can use Blend to develop custom styles and provide these styles in the
form of XAML markup to developers building apps. All the developer has to
do is add the appropriate Style tags to the user interface elements to reference
the corresponding styles.
Summary
In this chapter, you learned how to use the Grid control to implement a user
interface that can scale to different device form factors and orientations. You
also learned how to use the Visual State Manager to adapt the layout of
controls when the user changes the size of the window displaying the app.
Finally, you learned how to create custom styles and apply them to the
controls on a form. Now that you have defined the user interface, the next
challenge is to add functionality to the app, enabling the user to display and
update data, which is what you will do in the final chapters.
If you want to continue to the next chapter, keep Visual Studio 2017
running and turn to Chapter 26.
If you want to exit Visual Studio 2017 now, on the File menu, click
Exit. If you see a Save dialog box, click Yes and save the project.
Quick reference
To
Do this
Create a new UWP
app
Use one of the UWP templates in Visual Studio
2017, such as the Blank App template.
Implement a user
interface that scales to
different device form
factors and
orientations
Use a Grid control. Divide the Grid control into
rows and columns, and place controls in these rows
and columns rather than specifying an absolute
location relative to the edges of the Grid.
Implement a user
interface that can
adapt to different
display widths
Create different layouts for each view that display
the controls in an appropriate manner. Use the
Visual State Manager to select the layout to display
when the visual state changes.
Download from finelybook PI:EMAIL
949
Create custom styles
Add a resource dictionary to the app. Define styles
in this dictionary by using the  element,
and specify the properties that each style changes.
For example:
Click here to view code image
Apply a custom style
to a control
Set the Style property of the control and reference
the style by name. For example:
Click here to view code image
Download from finelybook PI:EMAIL
950
CHAPTER 26
Displaying and searching for data in
a Universal Windows Platform app
After completing the chapter, you will be able to:
Explain how to use the Model–View–ViewModel pattern to implement
the logic for a Universal Windows Platform app.
Use data binding to display and modify data in a view.
Create a ViewModel with which a view can interact with a model.
Integrate a Universal Windows Platform app with Cortana to provide
voice-activated search capabilities.
Chapter 25, “Implementing the user interface for a Universal Windows