s
U
0
0.8
−25
0.6
−50
500
0.4
250
0
0.2
−250
0.0
−500
0
0.0
LW
HW
10
0.2
20
0.4
30
0.6
40
0.8
50
1.0
Switching Point
Figure 12: Shiraz improves throughput across system scale
with heavyweight application checkpoint duration (δ) of
0.25 hours.
14 hours of individual performance improvement on aver-
age, leading to an overall average improvement of 28 hours.
Therefore, Shiraz improves both system throughput and in-
dividual performance (latency).
(2) Shiraz’s overall improvement in useful work increases
as the δ-factor increases. This is expected since a high δ-
factor provides more potential for Shiraz to eliminate lost
work. Interestingly, the overall improvement in useful work
increases as the MTBF decreases. For example, the overall
improvement in useful work increases from 19 hours to 33
hours as the system changes from petascale to exascale when
the δ-factor is ﬁxed at 100. Essentially, Shiraz minimizes the
lost work due to failures and this opportunity is higher with
a low MTBF. This demonstrates that Shiraz will continue to
be effective on future systems.
(3) Shiraz’s optimal switching point also increases as the
checkpointing overhead ratio between the heavy-weight and
light-weight application (δ-factor) increases. For example,
Fig. 11 shows that the switching point increases from 6 to 83
when δ-factor increases from 5 to 1000. This is because the
light-weight application is able to perform more checkpoints
in the same time period.
Shiraz’s optimal switching point also increases with
MTBF for a ﬁxed δ-factor factor. For example, Fig. 11 shows
that that the switching point increases from 6 to 12 when sys-
tem changes from exascale to petascale. This is because be-
tween two failure points, the hazard rate drops less quickly
with a higher MTBF and hence, it is beneﬁcial to run the
light-weight application for a longer time.
Finally, we note that Shiraz delivers improvement in
overall useful work as the checkpointing overhead of the
heavy-weight application varies. We reduce the checkpoint-
ing overhead of the heavy-weight application from 0.5 hours
to 0.25 hours. Fig. 12 shows that the total throughput im-
provement is 21.8 hours with 5 hours MTBF system and 12.9
hours with 20 hours MTBF system.
Interestingly, our analysis reveals that the optimal switch-
ing point is not necessarily half of the MTBF value. As an
example, the optimal switch point is 6 when the δ-factor is
5× and the MTBF is 5 hours (Fig. 11). This implies that the
switch happens at 6.6 hours, which is higher than the MTBF.
Similarly, for the 20 hours MTBF case, the switching hap-
pens after 25.2 hours. As discussed in Section 3, since the
light-weight application observes effectively higher MTBF,
it needs to run for a longer duration in the beginning to gain
improvement in the overall useful work. A na¨ıve strategy to
switch applications at half of the MTBF or slightly a higher
value will lead to a signiﬁcant decrease in the overall useful
work. This demonstrates the need and efﬁcacy of Shiraz.
Analysis of impact of Shiraz+ on checkpointing over-
head: Next, we evaluate and analyze the effect of Shiraz+
on the overall checkpointing overhead and throughput. Re-
call that Shiraz+ increases the checkpointing interval of the
heavy-weight application (Section 3). Thus, it is intuitive
that it will reduce the checkpointing overhead. However, this
may also result in a loss of throughput, since the heavy-
weight application is no longer operating at its OCI.
Fig. 13 shows that when Shiraz+ is applied on top of
Shiraz, it signiﬁcantly reduces the overall checkpointing
overhead across different scenarios. Note that Shiraz+ op-
90
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:30:14 UTC from IEEE Xplore.  Restrictions apply. 
)
%
(
n
o
i
t
a
o
s
i
l
r
e
v
o
t
n
e
m
e
v
o
r
p
m
I
1.0
1.0
80
0.8
60
0.6
0.8
40
0.4
20
0.2
0.6
0
0.0
0.0
1.0
80
0.4
0.8
60
0.6
40
0.2
0.4
20
0.2
0
0.0
0.0
2
0.0
0.0
)
%
(
n
o
i
t
a
o
s
i
l
r
e
v
o
t
n
e
m
e
v
o
r
p
m
I
1.0
1.0
80
0.8
60
0.6
0.8
40
0.4
20
0.2
0.6
0
0.0
0.0
1.0
80
0.4
0.8
60
0.6
40
0.2
0.4
20
0.2
0
0.0
0.0
2
0.0
0.0
MTBF: 5 hours; δ−factor: 5
Useful Work
Ckpt Ovhd
MTBF: 5 hours; δ−factor: 25
Useful Work
Ckpt Ovhd
0.2
0.4
MTBF: 20 hours; δ−factor: 5
Useful Work
Ckpt Ovhd
0.6
0.8
1.0
0.2
0.4
MTBF: 20 hours; δ−factor: 25
0.8
0.6
1.0
Ckpt Ovhd
Useful Work
3
0.2
0.2
4
0.4
0.4
3
OCI-stretch factor
2
0.6
0.6
0.8
0.8
4
1.0
1.0
3
0.2
0.2
4
0.4
0.4
3
OCI-stretch factor
2
0.6
0.6
0.8
0.8
4
1.0
1.0
)
%
(
n
o
i
t
a
o
s
i
l
r
e
v
o
t
n
e
m
e
v
o
r
p
m
I
Ckpt Ovhd
Useful Work
MTBF: 5 hours; δ−factor: 100
1.0
1.0
80
0.8
60
0.6
0.8
40
0.4
20
0.2
0.6
0
0.0
0.0
1.0 MTBF: 20 hours; δ−factor: 100
80
0.4
0.8
60
0.6
40
0.2
0.4
20
0.2
0
0.0
0.0
2
0.0
0.0
Useful Work
Ckpt Ovhd
2
0.6
0.6
3
0.2
0.2
0.2
0.6
0.8
0.8
0.4
0.8
4
4
0.4
0.4
3
OCI-stretch factor
)
%
(
n
o
i
t
a
o
s
i
l
r
e
v
o
t
n
e
m
e
v
o
r
p
m
I
1.0
1.0
1.0
Ckpt Ovhd
Useful Work
1.0 MTBF: 5 hours; δ−factor: 1000
1.0
80
0.8
60
0.6
0.8
40
0.4
20
0.2
0.6
0
0.0
0.0
1.0 MTBF: 20 hours; δ−factor: 1000
80
0.4
0.8
60
0.6
40
0.2
0.4
20
0.2
0
0.0
0.0
2
0.0
0.0
Useful Work
Ckpt Ovhd
2
0.6
0.6
3
0.2
0.2
0.2
0.6
0.8
0.8
0.4
0.8
4
4
0.4
0.4
3
OCI-stretch factor
1.0
1.0
1.0
Figure 13: Impact of Shiraz+ on checkpointing overhead and useful work: checkpointing interval is increased by different
factors (2× - 4×) under varying system scale and checkpoint overhead ratios. The checkpoint duration of the heavy weight
application is set to be 30 minutes. The baseline refers to switching between applications at every failure.
erates at the optimal switching point determined by Shiraz.
From Fig. 13, we make several observations. First, as the
checkpointing interval is stretched from 2× to 4× for the
heavy-weight application, the checkpointing overhead re-
duces drastically. This observation is true across changes in
different parameters: system MTBF, application checkpoint-
ing overhead, and δ-factor. The average reduction in check-
pointing overhead is approximately 40%. When the OCI-
stretch factor is 4×, the checkpointing overhead reduces by
more than 60% in many cases.
Second, interestingly, while the checkpointing overhead
drops signiﬁcantly, the corresponding performance degra-
dation is minimal. In fact, using a 2× OCI-stretch always
keeps a part of the performance improvement obtained by
Shiraz; in some cases, the throughput improvement remains
up to 5.6% (with no performance degradation for any appli-
cation). Even with 3× and 4× OCI-stretch factors, the maxi-
mum performance degradation across petascale and exascale
systems is less than 1.4% and 4.8%, respectively. The under-
lying insight is that Shiraz schedules the heavy-weight ap-
plication in a lower failure rate region (i.e., effective higher
MTBF) and hence, the effective OCI also increases. We note
that Shiraz+ also has the opportunity to eat off the perfor-
mance improvement provided by Shiraz and hence, sees no
performance degradation in the 2× OCI-stretch case.
In this work, we do not explicitly determine the optimal
OCI-stretch factor for different situations, since application
programmers and system resource managers are likely to in-
crease the checkpointing interval by an integer factor. Due to
practical constraints, many applications do not adopt tech-
niques that alter the checkpointing interval dynamically. In
other words, Shiraz+ has chosen to value practical feasibility
over theoretical optimum point — which will be an interest-
ing avenue for future work.
Shiraz in multi-application environment and energy sav-
ings: Shiraz can determine the optimal switching point be-
tween two given applications and improve the overall sys-
tem throughput. The next question is: can Shiraz scale and
be effective in the presence of multiple applications? Fortu-
nately, it turns out that Shiraz can be naturally scaled to the
multiple applications scenario. It can be achieved in multi-
ple possible ways. One easy way to achieve this is to make
91
1.0
80
60
0.8
40
20
0.6
0
32
0.4
24
16
0.2
8
)
s
r
u
o
h
(
k
r
o
W
l
u
f
e
s
U
MTBF: 5 hours
)
%
(
Useful Work
Ckpt Ovhd