##  python3.9 
$ python3.9 -m pip install requests
2.9 往 Python Shell 中传入参数
往一个 Python 脚本传入参数，是一件非常简单的事情。
比如这样：
$ python demo.py arg1 arg2
我在验证一些简单的 Python 代码时，喜欢使用 Python Shell 。
那有没有办法在使用 Python Shell 时，向上面传递参数一样，传入参数呢？
经过我的摸索，终于找到了方法，具体方法如下：
2.10 让脚本报错后立即进入调试模式
当你在使用 python xxx.py 这样的方法，执行 Python 脚本时，若因为代码 bug 导致异常未捕
获，那整个程序便会终止退出。
这个时候，我们通常会去排查是什么原因导致的程序崩溃。
大家都知道，排查问题的思路，第一步肯定是去查看日志，若这个 bug 隐藏的比较深，只有在特
定场景下才会现身，那么还需要开发者，复现这个 bug，方能优化代码。
复现有时候很难，有时候虽然简单，但是要伪造各种数据，相当麻烦。
如果有一种方法能在程序崩溃后，立马进入调试模式该有多好啊？
明哥都这么问了，那肯定是带着解决方案来的。
只要你在执行脚本行，加上 -i 参数，即可在脚本执行完毕后进入 Python Shell 模式，方便你进行
调试。
具体演示如下：
需要注意的是：脚本执行完毕，有两种情况：
1. 正常退出
2. 异常退出
这两种都会进入 Python Shell，如果脚本并无异常，最终也会进入 Python Shell 模式，需要你手动
退出
如果希望脚本正确完成时自动推出，可以在脚本最后加上一行 __import__("os")._exit(0)
2.11 极简模式执行 Python Shell
在终端输入 Python 就会进入 Python Shell 。
方便是挺方便，就是有点说不出的难受，谁能告诉我，为什么要多出这么大一段无关的内容。
这有点像，你上爱某艺看视频吧，都要先看个 90 秒的广告。
如果你和我一样不喜欢这种 ‘牛皮癣’，那么可以加个 -q 参数，静默进入 Python Shell，就像下
面这样子，开启了极简模式，舒服多了。
2.12 在执行任意代码前自动念一段平安经
最近的"平安经"可谓是引起了不小的风波啊。
作为一个正儿八经的程序员，最害怕的就是自己的代码上线出现各种各样的 BUG。
为此明哥就研究了一下，如何在你执行任意 Python 代码前，让 Python 解释器自动念上一段平安
经，保佑代码不出 BUG 。
没想到还真被我研究出来了
做好心理准备了嘛？
我要开始作妖了，噢不，是开始念经了。
感谢佛祖保佑，Everything is ok，No bugs in the code.
你一定很想知道这是如何的吧？
如果你对 Linux 比较熟悉，就会知道，当你在使用 SSH 远程登陆 Linux 服务器的时候？会读取
.bash_profile 文件加载一些环境变量。
.bash_profile 你可以视其为一个 shell 脚本，可以在这里写一些 shell 代码达到你的定制化需
求。
而在 Python 中，也有类似 .bash_profile 的文件，这个文件一般情况下是不存在的。
我们需要新建一个用户环境目录，这个目录比较长，不需要你死记硬背，使用 site 模块的方法就可
以获取，然后使用 mkdir -p 命令创建它。
在这个目录下，新建一个 usercustomize.py 文件，注意名字必须是这个，换成其他的可就识别不
到啦。
这个 usercustomize.py 的内容如下（明哥注：佛祖只保佑几个 Python 的主要应用方向，毕竟咱
是 Python 攻城狮嘛...）
这个文件我放在了我的 github 上，你可以点此前往获取。
一切都完成后，无论你是使用 python xxx.py 执行脚本
还是使用 python 进入 Python Shell ，都会先念一下平安经保平安。
2.13 启动 Python Shell 前自动执行某脚本
前一节我们介绍了一种，只要运行解释器就会自动触发执行 Python 脚本的方法。
除此之外，可还有其他方法呢？
当然是有，只不过相对来说，会麻烦一点了。
先来看一下效果，在 ~/Library/Python/3.9/lib/python/site-packages 目录下并没有
usercustomize.py 文件，但是在执行 python 进入 Python Shell 模式后，还是会打印平安经。
这是如何做到的呢？
很简单，只要做两件事
第一件事，在任意你喜欢的目录下，新建 一个Python 脚本，名字也随意，比如我叫 startup.py
，内容还是和上面一样
第二件事，设置一个环境变量 PYTHONSTARTUP，指向你的脚本路径
$ export PYTHONSTARTUP=/Users/MING/startup.py
这样就可以了。
但是这种方法只适用于 Python Shell ，只不适合 Python 执行脚本的方法。
如果要在脚本中实现这种效果，我目前想到最粗糙我笨拙的方法了 -- 
2.14 把模块当做脚本来执行 7 种方法及原理
1. 用法举例
前面的文章里其实分享过不少类似的用法。比如：
1、 快速搭建一个 HTTP 服务
## python2
$ python -m SimpleHTTPServer 8888
## python3
$ python3 -m http.server 8888
2、快速构建 HTML 帮助文档
$ python -m pydoc -p 5200
3、快速进入 pdb 调试模式
$ python -m pdb demo.py
4、最优雅且正确的包安装方法
$ python3 -m pip install requests
5、快速美化 JSON 字符串
$ echo '{"name": "MING"}' | python -m json.tool
6、快速打印包的搜索路径
$ python -m site
7、用于快速计算程序执行时长
$ python3 -m timeit '"-".join(map(str, range(100)))'
2. 原理剖析
上面的诸多命令，都有一个特点，在命令中都含有 -m 参数选项，而参数的值，
SimpleHTTPServer， http.server， pydoc，pdb，pip， json.tool，site ，timeit这些都是模块或者
包。
通常来说模块或者包，都是用做工具包由其他模块导入使用，而很少直接使用命令来执行（脚本除
外）。
Python 给我们提供了一种方法，可以让我们将模块里的部分功能抽取出来，直接用于命令行式的
调用。效果就是前面你所看到的。
那这是如何实现的呢？
最好的学习方式，莫过于模仿，直接以 pip 和 json 模块为学习对象，看看目录结构和代码都有什
么特点。
先看一下 pip 的源码目录，发现在其下有一个 __main__.py 的文件，难道这是 -m 的入口？
再看一下 json.tool 的源码文件，json 库下面却没有 __main__.py 的文件。
这就很奇怪了。
不对，再回过头看，我们调用的不是 json 库，而是 json 库下的 tool 模块。
查看 tool 模块的源代码，有一个名为 main 的函数
但它这不是关键，main 函数是在模块中直接被调用的。
只有当 __name__ 为 __main___ 时，main 函数才会被调用
if __name__ == '__main__':
main()
当模块被导入时， __name__ 的值为模块名，
而当模块被直接执行， __name__ 的值就变成了 __main__ 。
这下思路清晰了。
想要使用 -m 的方式执行模块，有两种方式：
第一种：以 -m  的方式执行，只要在 package 下写一个 __main__.py 的文件即可。
第二种：以 -m  的方式执行，只要在 module 的代码中，定义一个 main 函
数，然后在最外层写入下面这段固定的代码
if __name__ == '__main__':
main()
上面我将 -m 的使用情况分为两种，但是实际上，只有一种，对于第一种，你完全可以将
-m  理解为 -m  的简写形式。
3. 实践一下
先把当前路径设置追加到 PATH 的环境变量中
$ export PATH=${PATH}:`pwd`
先来验证一下第一种方法。
然后在当前目录下新建一个 demo 文件夹，并且在 demo 目录下新建一个 __main__.py 的文件，
随便打印点东西
## __main__.py
print("hello, world")
然后直接执行如下命令，立马就能看到效果。
$ python3 -m demo
hello,world
执行过程如下：
再来验证一下使用第二种方法。
在 demo 目录下再新建一个 foobar.py 文件
## foobar.py
def main():
print("hello, world")
if __name__ == "__main__":
main()
最后执行一下如下命令，输出与预期相符
$ python3 -m demo.foobar
hello, foobar
4. -m 存在的意义
-m 实现的效果，无异于直接执行一个 Python 模块/脚本。
那么问题就来了，那我直接执行不就行啦，何必多此一举再加个 -m 呢？
这个问题很有意思，值得一提。
当我们使用一个模块的时候，往往只需要记住模块名，然后使用 import 去导入它就行了。
之所以能这么便利，这得益于 Python 完善的导入机制，你完全不需要知道这个模块文件存在哪个
目录下，它的绝对路径是什么？因为 Python 的包导入机制会帮你做这些事情。
换句话说，如果你不使用 -m 的方式，当你要使用 python -m json.tool ，你就得这样子写
$ echo '{"name": "MING"}' | python /usr/lib64/python2.7/json/tool.py
{
"name": "MING"
}
如此一对比，哪个更方便？你心里应该有数了。
2.15 命令行式打开 idle 编辑脚本
在你安装 Python 解释器的时候，会有一个选项，让你选择是否安装 idle，这是一个极简的 Python
编辑器，对于有点 python 编码的经验的同学，一般都已经安装了更加专业的代码编辑器，比如
pycharm，vscode 等，所以一般是不会去勾选它的。
但是对于第一次接触 Python 编程的初学者来说，在自己的电脑上，大概率是没有安装代码编辑器
的，这时候有一个现成的编辑器，可以尽快的将 hello world 跑起来，是一件非常重要的事情，因
此初学者一般会被建议安装 idle，这也是为什么 idle 是大多数人的第一个 Python 代码编辑器。
在你安装了 idle 后，如果你使用 Windows 电脑，点击 py 文件会有使用 idle 打开的选项，非常方
便你直接编辑 py 文件。
但如若你在 mac 电脑上，你的右键，是没有这个选项的，那如何使用 idle 打开编辑呢？
可以在终端上使用如下这条命令即可调用 idle 打开指定文件
python3 -m idlelib unshelve.py
使用的效果如下
如果你不加文件的路径，默认会打开 idle 的 shell 模式
2.16 快速计算字符串 base64编码
对字符串编码和解码
!
对一个字符串进行 base64 编码 和 解码（加上 -d 参数即可）
$ echo "hello, world" | python3 -m base64
aGVsbG8sIHdvcmxkCg==
$ echo "aGVsbG8sIHdvcmxkCg==" | python3 -m base64 -d
hello, world
效果如下
对文件进行编码和解码
在命令后面直接加文件的路径
## 
$ python3 -m base64 demo.py
ZGVmIG1haW4oKToKICAgcHJpbnQoJ0hlbGxvIFdvcmxk8J+RjCcpCiAgIAppZiBfX25hbWVfXz09
J19fbWFpbl9fJzoKICAgbWFpbigpCg==
## 
$ echo "ZGVmIG1haW4oKToKICAgcHJpbnQoJ0hlbGxvIFdvcmxk8J+RjCcpCiAgIAppZiBfX25hbWVfXz09
J19fbWFpbl9fJzoKICAgbWFpbigpCg==" | python3 -m base64 -d
def main():
print('Hello World ')
if __name__=='__main__':
main()
效果如下
如果你的文件是 py 脚本的话，可以直接执行它
2.17 快速找到指定文件的mime类型
识别 html 文件
## 
$ python -m mimetypes https://docs.python.org/3/library/mimetypes.html
type: text/html encoding: None
## 
$ python -m mimetypes index.html
type: text/html encoding: None
识别图片格式
$ python -m mimetypes https://www.google.com/images/branding/googlelogo/2x/googlelog
o_color_272x92dp.png
type: image/png encoding: None
识别 Python 脚本
$ python -m mimetypes sample.py
type: text/x-python encoding: None # python
识别压缩文件
$ python -m mimetypes sample.py.gz
type: text/x-python encoding: gzip # pythongzip
2.18 快速查看 Python 的环境信息
所有与 Python 相关的信息与配置，你都可以使用下面这条命令将其全部打印出来
$ python -m sysconfig
信息包括：
你当前的操作系统平台
Python 的具体版本
包的搜索路径
以及各种环境变量
2.19 快速解压和压缩文件
tar 格式压缩包
创建一个 tar 压缩包
##  demo  demo.tar
$ python3 -m tarfile -c demo.tar demo
解压 tar 压缩包
##  demo.tar  demo_new 
$ python3 -m tarfile -e demo.tar demo_new
gzip 格式压缩包
创建一个 gzip 格式的压缩包（gzip 的输入，只能是一个文件，而不能是一个目录）
$ ls -l | grep message
-rw-r--r--@ 1 MING staff 97985 4 22 08:30 message
##  message.html  message.gz
$ python3 -m gzip message
$ ls -l | grep message
-rw-r--r--@ 1 MING staff 97985 4 22 08:30 message
-rw-r--r-- 1 MING staff 24908 5 4 12:49 message.gz
解压一个 gzip 格式的压缩包
$ rm -rf message
$ ls -l | grep message
-rw-r--r-- 1 MING staff 87 5 4 12:51 message.gz
##  message.gz
$ python3 -m gzip -d message.gz
$ ls -l | grep message
-rw-r--r-- 1 MING staff 62 5 4 12:52 message
-rw-r--r-- 1 MING staff 87 5 4 12:51 message.gz
zip 格式压缩包
创建一个 zip 格式的压缩包
$ ls -l | grep demo
drwxr-xr-x 3 MING staff 96 5 4 12:44 demo
##  demo  demo.zip
$ python3 -m zipfile -c demo.zip demo
$ ls -l | grep demo
drwxr-xr-x 3 MING staff 96 5 4 12:44 demo
-rw-r--r-- 1 MING staff 74890 5 4 12:55 demo.zip
解压一个 zip 格式的压缩包
$ rm -rf demo
$ ls -l | grep demo
-rw-r--r-- 1 MING staff 74890 5 4 12:55 demo.zip
$ python3 -m zipfile -e demo.zip demo
$ ls -l | grep demo
drwxr-xr-x 3 MING staff 96 5 4 12:57 demo
-rw-r--r-- 1 MING staff 74890 5 4 12:55 demo.zip
2.20 快速编辑 Python 脚本
pyc是一种二进制文件，是由py文件经过编译后，生成的文件，是一种byte code，py文件变成pyc文
件后，加载的速度会有所提高。因此在一些场景下，可以预先编译成 pyc 文件，来提高加载速度。
编译的命令非常的简单，示例如下
$ tree demo
demo
"## main.py
$ python3 -O -m compileall demo
Listing 'demo'...
Compiling 'demo/main.py'...
$ tree demo
demo
$## __pycache__
% "## main.cpython-39.opt-1.pyc
"## main.py
2.21 使用自带的 telnet 端口检测工具
若你想检测指定的机器上有没有开放某端口，但本机并没有安装 telnet 工具，不如尝试一下
python 自带的 telnetlib 库，亦可实现你的需求。
检查 192.168.56.200 上的 22 端口有没有开放。
$ python3 -m telnetlib -d 192.168.56.200 22
Telnet(192.168.56.200,22): recv b'SSH-2.0-OpenSSH_7.4\r\n'
SSH-2.0-OpenSSH_7.4
Telnet(192.168.56.200,22): send b'\n'
Telnet(192.168.56.200,22): recv b'Protocol mismatch.\n'
Protocol mismatch.
Telnet(192.168.56.200,22): recv b''
*** Connection closed by remote host ***
2.22 快速将项目打包成应用程序
假设我当前有一个 demo 项目，目录结构树及相关文件的的代码如下
现在我使用如下命令，将该项目进行打包，其中 demo 是项目的文件夹名， main:main 中的第一
个 main 指的 main.py ，而第二个 main 指的是 main 函数
$ python3 -m zipapp demo -m "main:main"