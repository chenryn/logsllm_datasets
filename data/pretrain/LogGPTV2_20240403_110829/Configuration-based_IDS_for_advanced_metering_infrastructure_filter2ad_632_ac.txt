H : Q → Σ≤N , which represents the history of previously
visited, at most N , states. However, if the history is ﬁxed to
N , i.e., Σ=N , the LMC will be called (N +1)th order markov
chain since it includes the current state too. Therefore, each
state qi will be associated with a string si such that si =
H(qi)L(qi).
455Algorithm 1: Learn Markov Model
Data: Sequence S
Result: Finite state machine based on 4-th order Markov
Model
Initialize empty Graph;
S = {σi|∀σi ∈ Σ} ;
∀σi Pr(σi) > 0 ;
while S 6= φ do
Slide window by one σ at instance i ;
Pick si ∈ S ;
if si ∈ Graph then
Make directed edge from si−1 to si ;
end
else
Create node si in Graph ;
Make directed edge from si−1 to si ;
end
end
Since the AMI system under consideration is a real-time
system and can not be restarted with diﬀerent initial states,
we argue that the model learning technique should be able to
start observing data from the system at any given time and
can work with a single long sequence of observations. Sup-
pose we have sequence S = σ1, σ2, . . . , σn, σi ∈ Q, where σ
represents a state as shown in Equation 4. Since our statis-
tical analysis showed that conditional entropy is negligible
at 4-th order, therefore, we use 4-th order markov chain. A
ﬁnite state machine having directed graph can be learned
from the given sequence S. Each state in the graph at time
i will be represented by a tuple of 4 i.e., hσi−3, σi−2, . . . , σii,
where σi is the L(qi) and the rest are H(qi). Therefore, it
can be realized as si in the ﬁnite state machine.
Algorithm 1 explains the learning of a markov model from
the given sequence of log entries.
It initializes an empty
graph and then starts observing the sequence S. It utilizes
a sliding window approach where window slides at instance i
by one entry i.e., σ. However, the size of window to observe
si ∈ S is kept to 4 which is the order of model. If si already
exists in graph then a directed edge from si−1 to si is cre-
ated, if the directed edge does not exist already. However,
if si does not exist in graph, then a node is also created for
si. This process keeps repeating until S is empty. Once the
state machine is created, it is easy to calculate the transi-
tion probability matrix for that. For each state si in graph,
P∀σi∈Σ τ (si, σi) = 1.
Since a log entry σ is a conjunction of diﬀerent variables,
total possible combinations can exceed and may require a
lot of processing power. However, it can be calculated for
each network under consideration. In our case study, 10 bits
were assigned to sid and did, 8 bits for sz and 3 bits for type
ty of communication. Therefore, the possible number of σ
are 210 × 210 × 28 × 23 which is a relatively large number.
Since the model treats each smart collector’s log separately,
either source or destination of each log entry will be ﬁxed
to the id of that particular smart collector. Moreover, a
smart collector can only be connected to its neighboring
nodes/meters.
In our case study, the smart collector was
connected to 8 other devices. Therefore, the number of σ
reduces to 1 × 8 × 28 × 23, which is relatively smaller. Since
4-th order markov model is being used, possible combina-
tions of four σ can yield to a lot of states. To this end, the
proposed algorithm only takes the combinations which are
observed in the sequence S and only keeps the edges which
are observed since all the combinations are not possible due
to conﬁguration, thus reducing the size of transition proba-
bility matrix.
6. PROPERTIES SPECIFICATION FOR
MODEL CHECKING
Since the proposed model is based on markov chain and
exhibits a temporal dependence, we deﬁne properties in Lin-
ear time Temporal Logic (LTL) [2]. Unlike traditional model
checking, stochastic model checking allows you to check that
with what probability the property is satisﬁed by the model.
These probabilities can be thresholded in order to accommo-
date the unseen behavior up to a certain extent. LTL over
the alphabets Σ is deﬁned by the syntax:
ϕ ::= true | σ | ϕ1 ∧ ϕ2 | ¬ϕ | (cid:13) ϕ | ϕ1 ∪ ϕ2
(σ ∈ Σ)
The derived additional operators ✷ (always) and ⋄ (eventu-
ally) are also used in the LTL.
Let ϕ be the LTL formula over Σ. An LTL formula can
be satisﬁed for a sequence of alphabets s which is a state
deﬁnition in our case having s = σ1, σ2, . . . , σn where σi ∈ Σ.
Therefore, the probabilistic LTL can be deﬁned as:
φ ::= P⊲⊳p(ϕ),
⊲⊳ ∈ {≥, >, ≤, <, =};
p ∈ [0, 1]; ϕ ∈ LTL
Since the system under consideration is an online system and
can not be restarted with a speciﬁc initial state, we use the
stationary distributions for satisﬁability. LTL properties can
be veriﬁed with the markov chain model built in the earlier
section. For example, if a conﬁguration parameter deﬁnes
the sampling rate and report size, a property can be written
that whenever a report request is received the reply should
have this particular size. Temporally it can be stated that
given the system is in ‘request’ state, the next expected state
is ‘reply with size h’. In the PRISM model checker tool [20],
the ‘next’ state operator is deﬁned using ‘X’. For the given
state, you can ‘ﬁlter’ the state space to ‘current’ state only.
We wrote a small parser which reads the conﬁguration and
generates the properties in LTL format for the tool.
The properties can be derived from the conﬁgurations
and the security control guidelines such as NISTIR 7628 by
NIST. Since the conﬁgurations shown are related to read-
ing report, below we show some examples of the properties
derived from the conﬁguration. Let γ be the number of me-
ters associated with a smart collector. One basic example is
that whenever a report reading request is generated, a meter
should respond with a report. It can be formulated as:
φ ::= P≥d1 (rrepi|rreqi), 1 ≤ i ≤ γ
(5)
where rreqi and rrepi represents the reading request and
reading report, respectively, for meter i. However, d1 is
used as a probability threshold that this property should
be satisﬁed with the probability greater than or equal to
d1. The property deﬁned here is in conditional probability
syntax, however, it can be represented in LTL as:
P≥d1 (✷(rreqi → (cid:13)rrepi))
(6)
This is a strict property since it says that the next state has
to be the rrepi. However, a relaxed property can be deﬁned
as:
P≥d1 (✷(rreqi → ⋄rrepi))
(7)
456which says that eventually rrepi will be seen once rreqi is
observed. However, we use the strict property (Equation 6)
in our experiments. Similarly, it can also be deﬁned that
the report generated should have a size with in the limits
deﬁned since sampling rate is ﬁxed. It can be formulated as:
φ ::= P≥d2 (rszi|rrepi), 1 ≤ i ≤ γ
(8)
where rszi denotes the report size for meter i. However,
rszi ∈ szi which is a valid report size set for meter i. More-
over, Equation 5 and 8 can be combined to show the tem-
poral behavior i.e., whenever a reading request is generated,
it is followed by the reading reply which has a valid size.
Moreover, a meter should not send the reading report
It can be
twice in the next T1 consecutive time periods.
formulated as:
φ ::= P≤d3 (rrepi|rrepi), 1 ≤ i ≤ γ
(9)
where d3 is thresholded with ≤ that the probability of see-
ing such a behavior should be less than d3. Suppose t1 is
a counter which observe values in the range {1, 2, . . . , T1}.
Equation 9 can be represented in LTL as:
P≤d3 (✷ rrepi → (¬rrepi ∪ t1 ≥ T1))
(10)
To avoid ﬂooding the smart collector with reports from
multiple meters at the same time, the associated meters
were conﬁgured to have diﬀerent reporting intervals. There-
fore, smart collector will not receive consecutive reports from
multiple meters in consecutive T2 time periods. It can be
formulated as:
φ ::= P≤d4 (rrepj|rrepi),
i 6= j, 1 ≤ (i, j) ≤ γ
(11)
this prevents the multiple meters from sending the reports
after each other for consecutive T2 time periods. It can be
represented in LTL as:
P≤d4 (✷ rrepi → ¬rrepj ∪ t2 ≥ T2), ∀γ
j=1
(12)
Moreover, the thresholds dx are learnt from the model built
using the benign logs collected under normal condition i.e.,
without any attack. However, they can also be manually
conﬁgured based on the requirements of the network un-
der consideration. We show the examples of reading re-
ports property speciﬁcation, however, other types of conﬁg-
urations are also speciﬁed the same way using LTL. These
properties are dependent on the conﬁguration of the network
under consideration.
7. EXPERIMENTATION & EVALUATION
Before discussing the experimentation and evaluation, we
ﬁrst discuss the attack model.
7.1 Attack Model
Since we work with the logs collected at a smart collector,
attacks which do not involve any communication with the
smart collector or do not create a log entry would not be de-
tected. This has been highlighted in the limitations of our
work. However, aﬀect of such attacks would be limited to a
particular area. In short, our focus is on the large scale at-
tacks which include compromising a large number of meters
to cause a major blackout in the area. These attacks are, but
not limited to, spooﬁng, denial of service, distributed denial
of service, scanning, penetration, evasion, mimicry etc. For
example, a denial of service attack on the smart collectors
or its associated meters will cause the service disruption in
the area. Similarly, distributed denial of service attack on
the large number of meters or smart collectors can cause a
major blackout in the wider area. Since the infrastructure
exhibits a deterministic behavior and is homogenous in na-
ture; spooﬁng, mimicry and evasion techniques can inject
similar traﬃc without being detected thus resulting in the
destabilization of the infrastructure. Mimicry attacks can
compromise a number of meters and operate as they are le-
gitimate thus bypassing detection. This work is not focused
on the energy theft by individual users.
Intrusion detec-
tors specially designed for detecting individual user’s energy
theft have been proposed recently [15, 16].
Traditional attacks like denial of service will be detected
by the property 10 since it will create multiple entries in a
time windows shorter than T 1. Similarly, distributed denial
of service will cause the property 12 to be invalid since it
will cause multiple sources to create log entries in a time
window shorter than T 2. If a penetration attack is launched
against the AMI, it will be detected depending on the at-
tack graph. If the penetration is supposed to go through the
smart collector or it tampers with the meter (by changing
the conﬁguration), it will be detected since the meter will
not behave according to the a-priori known conﬁgurations.
Similarly, malware which tampers with the meter conﬁgu-
ration will be detected as well.
Data injection attacks which only tamper with the usage
information will not be detected. Same holds true for the
mimicry attacks and evasion techniques. To countermeasure
this, we propose a simple randomization module which in-
troduces a notion of randomness in the meter behavior while
staying deterministic for the smart collector. It is discussed
in the subsequent section.
To evaluate the proposed scheme, we generate attacks in
a controlled environment in the smart grid testbed. We use
diﬀerent attack scenarios which include not only diﬀerent
attack types but also diﬀerent attack locations. Since the
home area network has access to the smart meter, we con-
sider two scenarios for this location i.e., 1) try to compromise
the meter and tamper with its conﬁguration, 2) using the
smart meter as entry point to an AMI, we launch scanning,
DoS, evasion, mimicry and data injection traﬃc. For scan-
ning and DoS, we generate low rate attacks i.e., 0.1pkts/sec
to 1pkts/sec. Both the above mentioned scenarios were
implemented for these attacks. For evasion, mimicry and
spooﬁng, we placed a switch in between the meters and col-
lector; and attached an attack machine to it. We wrote a
simple program which uses the same conﬁguration as that
of a meter and generate similar reading reports in the same
format. In order to be evasive, less than 5% of the total gen-
erated traﬃc by the machine was injected traﬃc and 95%
was the mimic traﬃc. For mimicry and spooﬁng attacks, all
the traﬃc was mimic traﬃc without any injected traﬃc. In-
jected traﬃc includes malicious commands like random ﬁle
uploads, requesting reports at irregular intervals (request-
ing report itself is not an attack), administrative commands
without proper authorization and failed authorization at-
tempts. These logs were collected from the smart collectors
and were labeled as malicious. Malicious logs were mixed
into the real-world logs collected at an AMI of the utility
provider for the purpose of the accuracy evaluation. It was
made sure that the volume of malicious logs do not exceed
10% in the mixed log (benign and malicious).
4577.2 Robustness against Evasion and Mimicry
Attacks
Since evasion and mimicry attacks leverage the known be-
havior of the network, they tend to stay below the radar to
go undetected. To this end, we propose a simple yet eﬀec-
tive module for the smart meters. Due to the homogenous
and deterministic nature of the network, it is not diﬃcult for
an attacker to learn the behavior. Therefore, we randomize
one of the conﬁguration parameter which makes it diﬃcult
for the attacker to guess. However, other parameters can be
randomized too using the same semantics. We randomize
the reporting interval parameter in the conﬁguration. Let
inti denote the set containing all the possible valid conﬁgu-
ration values for the report interval for meter i, where intt
i is
the randomly selected conﬁguration value at time t for the
meter i. To introduce a certain level of randomization, a me-
ter should have enough possible valid conﬁguration values to
pick from. It can be formulated as:
|inti| ≥ θ
(13)
The greater the θ, the higher the randomization. To select
a value randomly from the given set, we use a simple hash
function since it is eﬀective and computationally inexpensive
too.
int(t + 1) = H(ki, t, intt
i)mod l + 1
(14)
where ki denotes the pre-shared key between the meter i and
the smart collector, t represents the time and l is the size of
possible values that is used to keep the value in the given
range. The hash function takes the key and the previously
selected reporting interval to introduce unpredictability for
the attacker and predictability for the smart collector. Re-
porting interval will be chosen every time before sending the
report. Smart collector will do the same computation in or-
der to verify if the report was expected at the given time or
not. Calculated time interval will be used in property 10 to
identify any non-compliance behavior. In our experiment,
we implemented this simple module on the NMS machine
which was capable of remotely conﬁguring the meters. The
module was written in C language using the NMS API to
conﬁgure the time interval for each report. Similarly, for
model checking the module calculates the time interval and
provides it to the property for the respective log entry vali-
dation.
Robustness of the presented approach against evasion de-
pends on two factors: (1) the probability threshold used in
the veriﬁcation properties, and (2) the conﬁguration param-
eter randomization. Since the reporting interval is veriﬁed
by a property which is thresholded, in case of a low thresh-
old evasion is possible to a certain extent because signiﬁ-
cant deviation can be allowed. For example, if the property
threshold is 0.9, it means that 90% of the reports should
be in the correct time and 10% can be deviated to accom-
modate any unexpected network behavior as learnt from the
log training. Thus, attackers can leverage this 10% to launch
mimicry and evasion attacks. If we assume that the key is
not known to attackers, but other conﬁguration parameters
can be known, an attacker has to accurately guess the re-
porting time from a range of values such that success ratio
will be above the property threshold in order to evade detec-
tion. However, this accuracy (evasion) is highly dependent
on the parameter randomization range. For example, if the
range deﬁned as 10 minutes in discrete intervals of one sec-
0.9
0.8
0.7
0.6
0.5
0.4
0.3
0.2
0.1
y
t
i
l
i
b
a
b
o
r
P
meter1
meter2
meter3
0.8
0.7
0.6
0.5
0.4
0.3
0.2
0.1
y
t
i
l
i
b
a
b
o
r
P
meter−1
meter−2
meter−3
0
26
27
28
Size
29
30
0
40
50
60
States
70
80
(a) Response for Reading
Request
(b) Response
Management Request
for Load
Figure 5: Response Probabilities when a request was
generated for Reading and Load Management
ond each, then the probability that the attacker can guess
the correct time interval (attack probability) is as low as
0.0017. In order to evade the detection, the attack probabil-
ity must be greater than or equal to the property threshold.
However, this case is extremely unlikely unless randomiza-
tion range is poorly selected and/or the property threshold
has been immaturely determined based on improper training