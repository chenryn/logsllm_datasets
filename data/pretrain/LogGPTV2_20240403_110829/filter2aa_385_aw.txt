}
]);
Listing7-1:InsertingtransactionsintoaMongoDBcollection(/ch-7/db/seed-
mongo.js)
That’sit!You’venowcreatedyourMongoDBdatabase
instanceandseededitwithatransactionscollectionthatcontains
threefakedocumentsforquerying.You’llgettothequerying
partinabit,butfirst,youshouldknowhowtoinstallandseed
traditionalSQLdatabases.
InstallingandSeedingPostgreSQLandMySQL
Databases
Databases
PostgreSQL(alsocalledPostgres)andMySQLareprobably
thetwomostcommon,well-known,enterprise-quality,open
sourcerelationaldatabasemanagementsystems,andofficial
Dockerimagesexistforboth.Becauseoftheirsimilarityand
thegeneraloverlapintheirinstallationsteps,webatched
togetherinstallationinstructionsforbothhere.
First,muchinthesamewayasfortheMongoDBexample
intheprevioussection,downloadandruntheappropriate
Dockerimage:
$dockerrun--namesome-mysql-p3306:3306-e
MYSQL_ROOT_PASSWORD=password-dmysql
$dockerrun--namesome-postgres-p5432:5432-e
POSTGRES_PASSWORD=password-dpostgres
Afteryourcontainersarebuilt,confirmtheyarerunning,
andiftheyaren’t,youcanstartthemviathedockerstartname
command.
Next,youcanconnecttothecontainersfromthe
appropriateclient—again,usingtheDockerimagetoprevent
installinganyadditionalfilesonthehost—andproceedto
createandseedthedatabase.InListing7-2,youcanseethe
MySQLlogic.
$dockerrun-it--linksome-mysql:mysql--rmmysqlsh-c\
'execmysql-h"$MYSQL_PORT_3306_TCP_ADDR"-
P"$MYSQL_PORT_3306_TCP_PORT"\
-uroot-p"$MYSQL_ENV_MYSQL_ROOT_PASSWORD"'
mysql>createdatabasestore;
mysql>usestore;
mysql>createtabletransactions(ccnumvarchar(32),datedate,amount
float(7,2),
->cvvchar(4),expdate);
Listing7-2:CreatingandinitializingaMySQLdatabase
Thelisting,liketheonethatfollows,startsadisposable
Dockershellthatexecutestheappropriatedatabaseclient
binary.Itcreatesandconnectstothedatabasenamedstoreand
thencreatesatablenamedtransactions.Thetwolistingsare
identical,withtheexceptionthattheyaretailoredtodifferent
databasesystems.
InListing7-3,youcanseethePostgreslogic,whichdiffers
slightlyinsyntaxfromMySQL.
$dockerrun-it--rm--linksome-postgres:postgrespostgrespsql-hpostgres-
Upostgres
postgres=#createdatabasestore;
postgres=#\connectstore
store=#createtabletransactions(ccnumvarchar(32),datedate,amount
money,cvv
char(4),expdate);
Listing7-3:CreatingandinitializingaPostgresdatabase
InbothMySQLandPostgres,thesyntaxisidenticalfor
insertingyourtransactions.Forexample,inListing7-4,you
canseehowtoinsertthreedocumentsintoaMySQLtransactions
collection.
mysql>insertintotransactions(ccnum,date,amount,cvv,exp)values
->('4444333322221111','2019-01-05',100.12,'1234','2020-09-01');
mysql>insertintotransactions(ccnum,date,amount,cvv,exp)values
->('4444123456789012','2019-01-07',2400.18,'5544','2021-02-01');
mysql>insertintotransactions(ccnum,date,amount,cvv,exp)values
->('4465122334455667','2019-01-29',1450.87,'9876','2019-06-01');
Listing7-4:InsertingtransactionsintoMySQLdatabases(/ch-7/db/seed-pg-
mysql.sql)
TryinsertingthesamethreedocumentsintoyourPostgres
database.
InstallingandSeedingMicrosoftSQLServer
Databases
In2016,Microsoftbeganmakingmajormovestoopen-source
someofitscoretechnologies.Oneofthosetechnologieswas
MicrosoftSQL(MSSQL)Server.Itfeelspertinenttohighlight
thisinformationwhiledemonstratingwhat,forsolong,wasn’t
possible—thatis,installingMSSQLServeronaLinux
operatingsystem.Betteryet,there’saDockerimageforit,
whichyoucaninstallwiththefollowingcommand:
$dockerrun--namesome-mssql-p1433:1433-e'ACCEPT_EULA=Y'\
-e'SA_PASSWORD=Password1!'-dmicrosoft/mssql-server-linux
Thatcommandissimilartotheothersyouraninthe
previoustwosections,butperthedocumentation,the
SA_PASSWORDvalueneedstobecomplex—acombinationof
uppercaseletters,lowercaseletters,numbers,andspecial
characters—oryouwon’tbeabletoauthenticatetoit.Since
thisisjustatestinstance,theprecedingvalueistrivialbut
minimallymeetsthoserequirements—justasweseeon
enterprisenetworksallthetime!
Withtheimageinstalled,startthecontainer,createthe
schema,andseedthedatabase,asinListing7-5.
$dockerexec-itsome-mssql/opt/mssql-tools/bin/sqlcmd-Slocalhost\
-Usa-P'Password1!'
>createdatabasestore;
>go
>usestore;
>createtabletransactions(ccnumvarchar(32),datedate,amount
decimal(7,2),
>cvvchar(4),expdate);
>go
>insertintotransactions(ccnum,date,amount,cvv,exp)values
>('4444333322221111','2019-01-05',100.12,'1234','2020-09-01');
>insertintotransactions(ccnum,date,amount,cvv,exp)values
>('4444123456789012','2019-01-07',2400.18,'5544','2021-02-01');
>insertintotransactions(ccnum,date,amount,cvv,exp)values
>('4465122334455667','2019-01-29',1450.87,'9876','2020-06-01');
>go
Listing7-5:CreatingandseedinganMSSQLdatabase
Thepreviouslistingreplicatesthelogicwedemonstrated
forMySQLandPostgresearlier.ItusesDockertoconnectto
theservice,createsandconnectstothestoredatabase,and
createsandseedsatransactionstable.We’representingit
separatelyfromtheotherSQLdatabasesbecauseithassome
MSSQL-specificsyntax.
CONNECTINGANDQUERYING
DATABASESINGO
Nowthatyouhaveavarietyoftestdatabasestoworkwith,
youcanbuildthelogictoconnecttoandquerythosedatabases
fromaGoclient.We’vedividedthisdiscussionintotwo
topics—oneforMongoDBandonefortraditionalSQL
databases.
QueryingMongoDB
DespitehavinganexcellentstandardSQLpackage,Go
doesn’tmaintainasimilarpackageforinteractingwith
NoSQLdatabases.Insteadyou’llneedtorelyonthird-party
packagestofacilitatethisinteraction.Ratherthaninspectthe
implementationofeachthird-partypackage,we’llfocus
purelyonMongoDB.We’llusethemgo(pronouncemango)
DBdriverforthis.
Startbyinstallingthemgodriverwiththefollowing
command:
$gogetgopkg.in/mgo.v2
Youcannowestablishconnectivityandqueryyourstore
collection(theequivalentofatable),whichrequiresevenless
codethantheSQLsamplecodewe’llcreatelater(seeListing
7-6).
packagemain
import(
"fmt"
"log"
mgo"gopkg.in/mgo.v2"
)
typeTransactionstruct{❶
CCNumstring`bson:"ccnum"`
Datestring`bson:"date"`
Amountfloat32`bson:"amount"`
Cvvstring`bson:"cvv"`
Expirationstring`bson:"exp"`
}
funcmain(){
session,err:=mgo.Dial("127.0.0.1")❷
iferr!=nil{
log.Panicln(err)
}
defersession.Close()
results:=make([]Transaction,0)
iferr:=session.DB("store").C("transactions").Find(nil).All(&results)❸;err!=
nil{
log.Panicln(err)
}
for_,txn:=rangeresults{❹
fmt.Println(txn.CCNum,txn.Date,txn.Amount,txn.Cvv,txn.Expiration)
}
}
Listing7-6:ConnectingtoandqueryingaMongoDBdatabase(/ch-7/db/mongo-
connect/main.go)
First,youdefineatype,Transaction,whichwillrepresenta
singledocumentfromyourstorecollection❶.Theinternal
mechanismfordatarepresentationinMongoDBisbinary
JSON.Forthisreason,usetaggingtodefineanymarshaling
directives.Inthiscase,you’reusingtaggingtoexplicitly
definetheelementnamestobeusedinthebinaryJSONdata.
Inyourmain()function❷,callmgo.Dial()tocreateasession
byestablishingaconnectiontoyourdatabase,testingtomake
surenoerrorsoccurred,anddeferringacalltoclosethe
session.Youthenusethesessionvariabletoquerythestore
database❸,retrievingalltherecordsfromthetransactions
collection.YoustoretheresultsinaTransactionslice,named
results.Underthecovers,yourstructuretagsareusedto
unmarshalthebinaryJSONtoyourdefinedtype.Finally,loop
overyourresultsetandprintthemtothescreen❹.Inboth
thiscaseandtheSQLsampleinthenextsection,youroutput
shouldlooksimilartothefollowing:
$gorunmain.go
44443333222211112019-01-05100.12123409/2020
44441234567890122019-01-072400.18554402/2021
44651223344556672019-01-291450.87987606/2020
QueryingSQLDatabases
QueryingSQLDatabases
Gocontainsastandardpackage,calleddatabase/sql,thatdefines
aninterfaceforinteractingwithSQLandSQL-likedatabases.
Thebaseimplementationautomaticallyincludesfunctionality
suchasconnectionpoolingandtransactionsupport.Database
driversadheringtothisinterfaceautomaticallyinheritthese
capabilitiesandareessentiallyinterchangeable,astheAPI
remainsconsistentbetweendrivers.Thefunctioncallsand
implementationinyourcodeareidenticalwhetheryou’re
usingPostgres,MSSQL,MySQL,orsomeotherdriver.This
makesitconvenienttoswitchbackenddatabaseswithminimal
codechangeontheclient.Ofcourse,thedriverscan
implementdatabase-specificcapabilitiesandusedifferent
SQLsyntax,butthefunctioncallsarenearlyidentical.
Forthisreason,we’llshowyouhowtoconnecttojustone
SQLdatabase—MySQL—andleavetheotherSQLdatabases
asanexerciseforyou.Youstartbyinstallingthedriverwith
thefollowingcommand:
$gogetgithub.com/go-sql-driver/mysql
Then,youcancreateabasicclientthatconnectstothe
databaseandretrievestheinformationfromyourtransactions
table—usingthescriptinListing7-7.
packagemain
import(
"database/sql"❶
"fmt"
"log"
"github.com/go-sql-driver/mysql"❷
)
funcmain(){
db,err:=sql.Open("mysql","root:password@tcp(127.0.0.1:3306)/store")❸
iferr!=nil{
log.Panicln(err)
}
deferdb.Close()
var(
ccnum,date,cvv,expstring
amountfloat32
)
rows,err:=db.Query("SELECTccnum,date,amount,cvv,expFROM
transactions")❹
iferr!=nil{
log.Panicln(err)
}
deferrows.Close()
forrows.Next(){
err:=rows.Scan(&ccnum,&date,&amount,&cvv,&exp)❺
iferr!=nil{
log.Panicln(err)
}
fmt.Println(ccnum,date,amount,cvv,exp)
}
ifrows.Err()!=nil{
log.Panicln(err)
}
}
Listing7-7:ConnectingtoandqueryingaMySQLdatabase(/ch-7/db/mysql-
connect/main.go)
ThecodebeginsbyimportingGo’sdatabase/sqlpackage❶.
ThisallowsyoutoutilizeGo’sawesomestandardSQLlibrary
interfacetointeractwiththedatabase.Youalsoimportyour
MySQLdatabasedriver❷.Theleadingunderscoreindicates
thatit’simportedanonymously,whichmeansitsexported
typesaren’tincluded,butthedriverregistersitselfwiththesql
packagesothattheMySQLdriveritselfhandlesthefunction
calls.
Next,youcallsql.Open()toestablishaconnectiontoour
database❸.Thefirstparameterspecifieswhichdrivershould
beused—inthiscase,thedriverismysql—andthesecond
parameterspecifiesyourconnectionstring.Youthenquery
yourdatabase,passinganSQLstatementtoselectallrows
fromyourtransactionstable❹,andthenloopovertherows,
subsequentlyreadingthedataintoyourvariablesandprinting
thevalues❺.
That’sallyouneedtodotoqueryaMySQLdatabase.
Usingadifferentbackenddatabaserequiresonlythefollowing
minorchangestothecode:
1. Importthecorrectdatabasedriver.
2. Changetheparameterspassedtosql.Open().
3. TweaktheSQLsyntaxtotheflavorrequiredbyyourbackenddatabase.
Amongtheseveraldatabasedriversavailable,manyare
pureGo,whileahandfulofothersusecgoforsomeunderlying
interaction.Checkoutthelistofavailabledriversat
https://github.com/golang/go/wiki/SQLDrivers/.
BUILDINGADATABASEMINER
Inthissection,youwillcreateatoolthatinspectsthedatabase
schema(forexample,columnnames)todeterminewhetherthe
datawithinisworthpilfering.Forinstance,sayyouwantto
findpasswords,hashes,socialsecuritynumbers,andcredit
cardnumbers.Ratherthanbuildingonemonolithicutilitythat
minesvariousbackenddatabases,you’llcreateseparate
utilities—oneforeachdatabase—andimplementadefined
interfacetoensureconsistencybetweentheimplementations.
Thisflexibilitymaybesomewhatoverkillforthisexample,
butitgivesyoutheopportunitytocreatereusableandportable
code.
Theinterfaceshouldbeminimal,consistingofafewbasic
typesandfunctions,anditshouldrequiretheimplementation
ofasinglemethodtoretrievedatabaseschema.Listing7-8,
calleddbminer.go,definesthedatabaseminer’sinterface.
packagedbminer
import(
"fmt"
"regexp"
)
❶typeDatabaseMinerinterface{
GetSchema()(*Schema,error)
}
❷typeSchemastruct{
Databases[]Database
}
typeDatabasestruct{
Namestring
Tables[]Table
}
typeTablestruct{
Namestring
Columns[]string
}
❸funcSearch(mDatabaseMiner)error{
❹s,err:=m.GetSchema()
iferr!=nil{
returnerr
}
re:=getRegex()
❺for_,database:=ranges.Databases{
for_,table:=rangedatabase.Tables{
for_,field:=rangetable.Columns{
for_,r:=rangere{
ifr.MatchString(field){
fmt.Println(database)
fmt.Printf("[+]HIT:%s\n",field)
}
}
}
}
}
returnnil
}
❻funcgetRegex()[]*regexp.Regexp{
return[]*regexp.Regexp{
regexp.MustCompile(`(?i)social`),
regexp.MustCompile(`(?i)ssn`),
regexp.MustCompile(`(?i)pass(word)?`),
regexp.MustCompile(`(?i)hash`),
regexp.MustCompile(`(?i)ccnum`),
regexp.MustCompile(`(?i)card`),
regexp.MustCompile(`(?i)security`),
regexp.MustCompile(`(?i)key`),
}
}
/*Extranneouscodeomittedforbrevity*/
Listing7-8:Databaseminerimplementation(/ch-7/db/dbminer/dbminer.go)
Thecodebeginsbydefininganinterfacenamed
DatabaseMiner❶.Asinglemethod,calledGetSchema(),isrequired
foranytypesthatimplementtheinterface.Becauseeach
backenddatabasemayhavespecificlogictoretrievethe
databaseschema,theexpectationisthateachspecificutility
canimplementthelogicinawaythat’suniquetothebackend
databaseanddriverinuse.
Next,youdefineaSchematype,whichiscomposedofafew
subtypesalsodefinedhere❷.You’llusetheSchematypeto
logicallyrepresentthedatabaseschema—thatis,databases,
tables,andcolumns.Youmighthavenoticedthatyour
GetSchema()function,withintheinterfacedefinition,expects
implementationstoreturna*Schema.
Now,youdefineasinglefunction,calledSearch(),which
containsthebulkofthelogic.TheSearch()functionexpectsa
DatabaseMinerinstancetobepassedtoitduringthefunctioncall,
andstorestheminervalueinavariablenamedm❸.The
functionstartsbycallingm.GetSchema()toretrievetheschema
❹.Thefunctionthenloopsthroughtheentireschema,
searchingagainstalistofregularexpression(regex)valuesfor
columnnamesthatmatch❺.Ifitfindsamatch,thedatabase
schemaandmatchingfieldareprintedtothescreen.
Lastly,defineafunctionnamedgetRegex()❻.Thisfunction
compilesregexstringsbyusingGo’sregexppackageand
returnsasliceofthesevalues.Theregexlistconsistsofcase-
insensitivestringsthatmatchagainstcommonorinteresting
fieldnamessuchasccnum,ssn,andpassword.
Withyourdatabaseminer’sinterfaceinhand,youcan
createutility-specificimplementations.Let’sstartwiththe
MongoDBdatabaseminer.