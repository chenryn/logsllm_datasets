→ Rt, as N tends to inﬁnity,
Nj
Z t
where Rt is:
Rt =
E“`1 − B ? a(s)´S−1”
a(s)ds
0
with random variable S having distribution ν.
PROOF. See appendix of [6].
In the limit, the uploads to remote nodes is R∞. R∞ depends on
(i) the rate of queries over time, (ii) the distribution of host online
time, and (iii) the distribution of subnet sizes ν. A small value of
R∞ implies that the number of inter-subnet uploads is small, hence,
the beneﬁt of using P2P with locality is large.
Suppose now that the per-host query rate a(t) is non-increasing
with t (see also Corollary 1). A lower bound for Rt is given by:
Rt ≥ E“
(1 − ρ)(S−1)”
A(t), for ρ ≤ 1,
(3)
where recall that ρ may be interpreted as number of polls in an
interval of length equal to the average host online duration (see
Corollary 1). The lower bound implies that R∞ is larger than
E`(1 − ρ)S−1´ (since A(∞) = 1). This lower bound is tight
in our data set, and, we believe, that is a good estimate of R∞.
We now revisit the simulation results presented in Fig. 15, which
were computed assuming that users stay online for 1min. We are
interested in relating the user online times with R∞ and, as a result,
with the reduction in inter-subnet trafﬁc by uploading preferential
to nodes in the same subnet. Recall that the parameter ρ depends on
the mean user online time b, since ρ = ba∗. We use Eq. 3 and the
observed distribution of subset sizes (this is the distribution ν from
which we pick the values S; the distribution is drawn in Fig. 16)
to evaluate R∞. Observe that R∞ is decreasing with ρ, the mean
number of polls during a typical online interval. Fig. 17 plots the
value of R∞ as a function of ρ. Observe that R∞ decreases fast as
we increase ρ. The average polling frequency in the Windows Up-
date system is a∗ = 1/20hr. For that polling frequency, we have
(a)
(b)
(c)
(d)
Figure 15: Impact of peer-to-peer with locality. Simulation results are shown with crosses and analytical results with solid lines. (a) number
of downloads per subnet; (b) same but normalized with number of IPs in a subnet; (c) fraction of uploads per subnet normalized to subnet
size; (d) upload to download ratio per subnet. The host online time is ﬁxed to 1 min.
Table 4: Host online times to achieve a certain reduction in the
number of remote uploads with P2P with locality. The hosts poll
with a rate of 1 every 20 hours.
1/10
14 sec
2.15 sec
1/10,000
72 min
4 hours
1/1,000
10 min
24 min
Subnet type vs R∞
/16
AS
1/100
72 sec
72 sec
computed the required mean host online time to achieve some spe-
ciﬁc numbers of remote uploads (small R∞); the results are given
in Table 4. Host online times as low as few minutes can reduce
the number of remote uploads by more than an order of magnitude.
In particular, if hosts stay online for 1min, then ρ = 1/1200. Ex-
perimentally we ﬁnd that R∞ ≈ 0.015 (see Fig. 15(c)) for large
enough subnets. This is an important result, since it implies that
with locality the required upload trafﬁc for large subnets decreases
to 1.5% of the trafﬁc without locality (e.g. random matching); an
improvement of almost two orders of magnitude!
We have shown that locality reduces both the remote downloads
(Theorems 1 and Corollary 1) and the remote uploads (Theorems 2
and Eq. 3). However, how does locality affect the balance of per-
subnet uploads and downloads? Are there subnets that upload to
other subnets signiﬁcantly more than what they receive? To an-
swer those questions we study the ratio of the remote uploads to
the remote downloads; the result is shown in Fig. 15(d). We ob-
serve that large subnets, with more than 5K users in Fig. 15(d), up-
load to other subnets more than what they download; large subnets
contribute resources. We use our results of Theorem 1 and The-
orem 2 to numerically compute the expected per-subnet upload to
download ratio. The results in Fig. 15(d) demonstrate conformance
of the analytical result (solid line) with the experimental ﬁndings.
Ideally, the ratio of uploads to downloads for all subnets should
be close to 1. However, from Fig. 15(d) we observe that, even
though the upload trafﬁc reduces, the ratio of uploads to downloads
is greater than 1 for subnets larger than (1/ρ) log(1/R∞) ≈ 5040
(as observed experimentally). This implies that with locality large
subnets contribute more resources than what they receive. It re-
mains an interesting issue to design P2P matching algorithms with
low inter-subnet trafﬁc and balanced uploads to downloads for all
subsets, even for the very large ones.
A ﬁnal remark is due concerning the nature of the results pre-
sented in Theorem 2 and Eq. 3. Both of them are asymptotic and
should hold for large host populations. Indeed, our data set con-
tains measurements for a large population (around 300M users),
and, as a result, our empirical ﬁndings agree well with our anal-
Figure 17: The estimate of upload reduction factor for peer-to-peer
with local subnet preference for AS and /16 subnets, versus the
product of the mean host online time and the characterization of
host request arrival rate a∗ = supt>0 A(t)/t. The result is an
exact lower bound under assumption that host query arrival rate is
non-increasing with time.
ysis. (Note that the results in Theorem 1 and Corollary 1 are for
arbitrarily given subnet sizes Nj.)
6. RELATED WORK
The problem of keeping a large number of machines updated with
the latest software, ﬁxes and software upgrades has been of great
interest to many professionals especially in large IT departments.
Previous work focused primarily on designing middleware and con-
ﬁguring systems to enable remote software installations and up-
grades [5, 10, 18, 21–23]. Even though the networking issues in-
volved in updating many machines in parallel have not been explic-
itly addressed in those papers and, to the best of our knowledge, in
previous work, Shaddock et al. notices the problem that may arise
by many machines simultaneously connecting to the software dis-
tribution center and attempting to download large ﬁles over a shared
network [10]; they propose the use of a ticket system to distribute
the load.
In terms of commercial interest there are many and diverse prod-
ucts that propose and/or use automatic updates [13, 15, 20, 25, 27].
We expect that in the future the number of products that use auto-
matic updates will increase signiﬁcantly.
From a networking point of view, the problem of distributing
software updates is a content distribution problem. Content distri-
bution, which has been studied for more than a decade, proposed
various technologies, such as multicasting, caching, CDNs [1], peer-
to-peer networks [4, 8], that can be used for the distribution of up-
dates. Indeed the current Windows Update system uses an exten-
sive and geographically distributed content distribution network.
However, software updates have distinct characteristics that distin-
guish them from traditional content distribution problems; exploit-
ing those characteristics may lead to more efﬁcient distribution. As
an example, since the downloading of software updates is typically
a background activity, user downloads can be scheduled appropri-
ately with the goal of balancing the network load.
The design of an update distribution system that exploits similar-
ities between users depends on understanding typical machine con-
ﬁgurations and the software update process, in particular how and
when the conﬁguration of a machine changes. [12, 26] performed
extensive studies for understanding the state of typical machines
with the goal of understanding typical misconﬁguration problems
and increasing the reliability of end systems. [3] reports statistics
on machine availability and load characteristics. The ﬁndings of
[3, 12, 26] can be used to understand the state of a typical machine
and are complementary to our work. Even though our analysis pro-
vides statistics at a coarser granularity, we study much larger and
diverse population.
Previous work has presented extensive studies of very popular
Internet applications, such as Web servers and video streaming ser-
vices [3, 19, 24]. The problem of propagating updates to a large
number of non-homogeneous users using broadcast channels has
also been studied in [14]. To the best of our knowledge, our study
is the ﬁrst large scale study of a live patching system.
7. CONCLUSIONS
In this paper, we characterize a large commercial update service
with the aim to draw general guidelines on how to best design and
architect a fast and effective planet-scale patch dissemination sys-
tem. Automatic software updating is one of the most prominent
architectural issues in today’s Internet since fast and effective up-
date distribution to millions of machines is increasingly popular as
a method for keeping machines up-to-date with the latest software
features and bug ﬁxes. In particular, rapid distribution of security
patches is vital for protecting against security attacks and malware.
Unlike traditional content distribution systems, such as the Web,
patch distribution systems use a near-push functionality, have pub-
lication times that depend on development cycles or malware ap-
pearances, use differential update mechanisms, have distinct trafﬁc
patterns, and require minimum delivery times.
Based on a combination of empirical observations and analytical
results, we identify interesting properties of today’s update trafﬁc
and user behavior. We provide evidence that patches can be clus-
tered into a small set of functional components, thus, reducing the
complexity of any patch delivery system. We estimate the percent-
age of always on-line users and the characteristics of the user ar-
rival pattern, and, using those estimates, study the performance of
an (ideal) patching solution. We consider two standard content dis-
tribution architectures, caching and peer-to-peer, and evaluate their
applicability to patch dissemination. We demonstrate that P2P has a
great potential for providing fast and effective patch delivery. This
is an interesting observation since current P2P systems work best
when many users download few large ﬁles, rather than many small
ﬁles as it is the case with patching systems.
Using extensive measurement data from multiple vantage points,
we characterize the behavior of current patching systems and gain
insights that may help design more efﬁcient distribution mecha-
nisms. We believe that the workloads used in this study represent
typical behavior of live patching systems. Most of our ﬁndings
capture general properties induced by either user behavior, archi-
tectural characteristics of today’s Internet, or properties of current
software engineering systems and development cycles, and thus ap-
ply to the general problem of Internet-wide dissemination of soft-
ware updates.
Acknowledgments
We would like to thank the MS Software Distribution, Windows
Update and MSCOMS teams for their tremendous support and help
during the data collection process and for providing us with in-
valuable information. In particular, we would like to express our
deepest gratitude to Ryan Auld, Jeff Davis, Josh Dunn, Taqi Jaffri,
Deighton Maragh, Tom McGuire, Kurt Parent, Mark Roellich, Rob
Satterwhite, Manoj Shende, and Mike Sligger.
8. REFERENCES
[1] Akamai home page. .
[2] BBC iMP. http://www.bbc.co.uk/imp/.
[3] W. Bolosky, J. Douceur, D. Ely, and M. Theimer. Feasibility of a serverless
distributed ﬁle system deployed on an existing set of desktop pcs. In ACM
SigMetrics, 2000.
[4] B. Cohen. Bittorrent. .
[5] J. Dunagan, R. Roussev, B. Daniels, A. Johnson, C. Verbowski, and Y.-M.
Wang. Towards a self-managing software patching process using black-box
persistent-state manifests. In IEEE Intl. Conf. on Autonomic Computing, 2004.
[6] C. Gkantsidis, T. Karagiannis, P. Rodriguez, and M. Vojnovi´c. Planet scale
software updates. Technical Report MSR-TR-2006-85, Microsoft Research,
2006.
[7] C. Gkantsidis, J. Miller, and P. Rodriguez. Anatomy of a p2p content
distribution system with network coding. In 5th Int. Work. on P2P System
(IPTPS), 2006.
[8] Gnutella. .
[9] S. Guha and P. Francis. Characterization and measurement of tcp traversal
through nats and ﬁrewalls. In ACM IMC, 2005.
[10] C. Hemmerich. Automatic request-based software distribution. In USENIX 14th
System Administration Conf. (LISA), 2000.
[11] T. Karagiannis, P. Rodriguez, and K. Papagiannaki. Should internet service
providers fear peer-assisted content distribution? In ACM/USENIX IMC, 2005.
[12] E. Kiciman and C. Verbowski. Analyzing persistent state interactions to
improve state management. 2005.
[13] Mac OS X: Updating your software. http:
//docs.info.apple.com/article.html?artnum=106704, 2005.
[14] S. Mahajan, M. Donahoo, S. Navathe, M. Ammar, and S. Malik. Grouping
techniques for update propagation in intermittently-connected databases. In
IEEE Conf. on Data Engineering, 1998.
[15] Microsoft update faq. http://update.microsoft.com/
microsoftupdate/v6/default.aspx?ln=en-us.
[16] Using binary delta compression (bdc) technology to update windows operating
systems. Microsoft online White Paper.
[17] A. Muthitacharoen, B. Chen, and D. Mazieres. A low-bandwidth network ﬁle
system. In SOSP, 2001.
[18] P. Osel and W. Gnsheimer. OpenDist - incremental software distribution. In
USENIX 9th System Administration Conf. (LISA), 1995.
[19] V. Padmanabhan and L. Qiu. The content and access dynamics of a busy web
site: Findings and implications. In ACM SigComm), 2000.
[20] Red Hat Network. http://www.redhat.com/en_us/USA/rhn/, 2005.
[21] D. Ressman and J. Valdes. Use of Cfengine for automated, multiplatform
software and patch distribution. In USENIX 14th System Administration Conf.
(LISA), 2000.
[22] M. Shaddock, M. Mitchell, and H. Harrison. How to upgrade 1500 workstations
on saturday, and still have time to mow the yard on sunday. In USENIX 9th
System Administration Conf. (LISA), 1995.
[23] L. Sobr and P. Tuma. SOFAnet: Middleware for software distribution over
Internet. In IEEE Symp. on Applications and the Internet (SAINT’05), 2005.
[24] K. Sripanidkulchai, A. Ganjam, B. Maggs, and H. Zhang. The feasibility of
supporting large-scale live streaming applications with dynamic application
end-points. In ACM SigComm, 2004.
[25] Symantec corp. http://www.symantec.com/.
[26] H. Wang, J. Platt, Y. Chen, R. Zhang, and Y.-M. Wang. Automatic
misconﬁguration troubleshooting with peerpressure. In USENIX OSDI, 2004.
[27] ZDNet updates.com. http://updates.zdnet.com.