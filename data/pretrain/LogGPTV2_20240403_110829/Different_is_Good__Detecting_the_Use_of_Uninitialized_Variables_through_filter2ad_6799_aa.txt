title:Different is Good: Detecting the Use of Uninitialized Variables through
Differential Replay
author:Mengchen Cao and
Xiantong Hou and
Tao Wang and
Hunter Qu and
Yajin Zhou and
Xiaolong Bai and
Fuwei Wang
Different is Good: Detecting the Use of Uninitialized Variables
through Differential Replay
Mengchen Cao∗
PI:EMAIL
Orion Security Lab, Alibaba Group
Hunter Qu
PI:EMAIL
Orion Security Lab, Alibaba Group
Xiantong Hou∗
xiantong.houxianto@alibaba-
inc.com
Orion Security Lab, Alibaba Group
Yajin Zhou†
PI:EMAIL
School of Cyber Science and
Technology, Zhejiang University
Tao Wang∗
PI:EMAIL
Orion Security Lab, Alibaba Group
Xiaolong Bai
PI:EMAIL
Orion Security Lab, Alibaba Group
Fuwei Wang
PI:EMAIL
Orion Security Lab, Alibaba Group
ABSTRACT
The use of uninitialized variables is a common issue. It could cause
kernel information leak, which defeats the widely deployed security
defense, i.e., kernel address space layout randomization (KASLR).
Though a recent system called Bochspwn Reloaded reported multi-
ple memory leaks in Windows kernels, how to effectively detect
this issue is still largely behind.
In this paper, we propose a new technique, i.e., differential re-
play, that could effectively detect the use of uninitialized variables.
Specifically, it records and replays a program’s execution in multi-
ple instances. One instance is with the vanilla memory, the other
one changes (or poisons) values of variables allocated from the
stack and the heap. Then it compares program states to find ref-
erences to uninitialized variables. The idea is that if a variable is
properly initialized, it will overwrite the poisoned value and pro-
gram states in two running instances should be the same. After
detecting the differences, our system leverages the symbolic taint
analysis to further identify the location where the variable was
allocated. This helps us to identify the root cause and facilitate the
development of real exploits. We have implemented a prototype
called TimePlayer. After applying it to both Windows 7 and Win-
dows 10 kernels (x86/x64), it successfully identified 34 new issues
and another 85 ones that had been patched (some of them were
publicly unknown.) Among 34 new issues, 17 of them have been
confirmed as zero-day vulnerabilities by Microsoft.
∗Authors contributed equally to this research.
†Corresponding author.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
CCS ’19, November 11–15, 2019, London, United Kingdom
© 2019 Association for Computing Machinery.
ACM ISBN 978-1-4503-6747-9/19/11...$15.00
https://doi.org/10.1145/3319535.3345654
ACM Reference Format:
Mengchen Cao, Xiantong Hou, Tao Wang, Hunter Qu, Yajin Zhou, Xiao-
long Bai, and Fuwei Wang. 2019. Different is Good: Detecting the Use of
Uninitialized Variables through Differential Replay. In 2019 ACM SIGSAC
Conference on Computer and Communications Security (CCS ’19), November
11–15, 2019, London, United Kingdom. ACM, New York, NY, USA, 15 pages.
https://doi.org/10.1145/3319535.3345654
1 INTRODUCTION
In modern operating systems such as Windows and Linux, values of
variables are usually undetermined until being explicitly initialized.
These uninitialized variables could compromise the security of
a system, especially when they are crossing different privilege
domains. For instance, if a variable holds the address of a kernel
object and flows into user space, the kernel address will leak to
the (untrusted) user program. This defeats the widely deployed
kernel address space layout randomization (KASLR) mechanism. A
real-world example is a kernel exploit found in July 2015 [1], which
takes advantage of a kernel data leak from the heap (CVE-2015-2433)
to get the randomized base address of the win32k.sys driver, and
then uses it to exploit another vulnerability to escalate its privilege.
Previous research has shown that the use of uninitialized data [28,
34, 40, 48, 62] is among the most severe vulnerabilities in C and C++
language, and it accounts for more than 1/3 (147) of all memory
disclosure CVEs (388) from 2000 to 2015 [33]. What’s worse, a
recent research has demonstrated the way to automatically perform
privilege escalation attack, by exploiting uninitialized variables [35].
Unfortunately, the detection of such an issue is not easy, since it
generally does not cause a crash or other perceivable effects. One
possible way is using dynamic taint analysis to track the flow of
variables inside the system. Specifically, it sets the newly allocated
memory regions from the stack and the heap as taint sources,
and propagates taint tags. Tags will be removed if tainted mem-
ory regions are being written with new values (being initialized).
If a tainted memory region is referred by the program, a use of
uninitialized variables is detected.
Session 8D: Language SecurityCCS ’19, November 11–15, 2019, London, United Kingdom1883Though the proposed method can work, it has a serious limi-
tation in practice. Specifically, leveraging the dynamic taint anal-
ysis in a full system software stack, including the kernel, system
components and user programs, will inevitably introduce a high
performance overhead. As such, Bochspwn Reloaded 1 [28], the
state-of-the-art tool that focuses on kernel memory disclosure bugs,
only propagates taint tags for specific instructions to reduce perfor-
mance overhead. However, it introduces false negatives. As stated
in the paper, “this means that every time data in memory is copied
indirectly through a register, the taint information is discarded in
the process, potentially yielding undesired false-negatives."
Our approach In this paper, we propose a method with two key
techniques to detect kernel information leak due to the use of unini-
tialized variables. Specifically, we leverage the first key technique,
i.e., differential replay, to quickly spot the use of uninitialized vari-
ables, without performing time-consuming full system dynamic
taint analysis. Then we use the second key technique, i.e., symbolic
taint analysis, to determine locations where uninitialized variables
were allocated.
First of all, our system adopts differential replay to record the ex-
ecution of kernels and user programs. Then we replay two different
instances, with vanilla and poisoned values of the stack and heap
memory, respectively. We compare differences of program states,
e.g., addresses and contents of memory operation instructions. As
poisoned variables will be overwritten during initialization, the two
instances should be exactly the same if newly allocated variables
have been properly initialized. In other words, the difference in
program states could indicate the occurrence of an uninitialized
variable is being used.
After that, our system will conduct a symbolic taint analysis to
determine the exact location where the variable was allocated. To
this end, our system performs offline taint analysis on the recorded
execution trace. It sets the new variable as the taint source, and
allocates a symbolic value for the variable. Then it propagates
the symbolic taint tag and generates symbolic expressions along
the trace. This process stops until reaching the instruction that
uses the uninitialized variable. Finally, we obtain the complete
symbolic expression of the variable. By using such an expression,
an analyst is able to determine the location whether the variable
was allocated. To speed up this process, symbolic expressions are
packed if necessary.
Note that a recent system kMVX [70] uses the concept of multi-
variant execution (MVE) to detect the kernel information leaks
in Linux. The idea of MVE is similar with differential replay by
executing multiple instances. However, it requires the kernel source
code, and thus cannot be applied to closed-source Windows kernels.
On the contrast, TimePlayer is a non-intrusive system that can
work towards closed-source systems. Its effectiveness has been
demonstrated by detecting new vulnerabilities in both Windows 7
and Windows 10 kernels.
Prototype and evaluation We have implemented a prototype
system called TimePlayer. The differential replay is implemented
based on the PANDA system [18], and the symbolic taint analysis
1In this paper, if not otherwise specified, we use the name Bochspwn to denote the
latest version of the tool, i.e., Bochspwn Reloaded that focuses on the kernel memory
disclosure detection.
leverages the SimuVEX [59] library. In order to evaluate its effec-
tiveness, we applied it to both Windows 7 and Windows 10 kernels
in a period of seven months. It successfully detected 34 issues of
information leak from kernel space to user space. Among them, 17
have been confirmed by the Microsoft Security Response Center
with CVE numbers. For the remaining 17 ones, at the time of writ-
ing this paper (August 2019), we are still collaborating with them
to assess potential security consequences.
To further evaluate the capability of our system to detect known
vulnerabilities, we used public test cases (exploits) released by
Google Project Zero in our system. The result is encouraging. We
have detected 85 vulnerabilities in Windows 7 and Windows 10.
Among them, 55 are publicly known vulnerabilities with CVE num-
bers. However, there exist 30 ones that do not have CVE numbers.
Our manual analysis confirmed that they are indeed kernel infor-
mation leaks.
To evaluate the efficiency of differential replay used by TimePlayer,
we implemented a reference system that purely leverages the taint
analysis to track uninitialized variables. We ran the same test cases
and logged the time when the kernel information leak is detected.
The result shows that our system can detect 34 new issues in around
47 hours, while the reference system can only detect 7 of them in
around 66 hours. This demonstrated the efficiency of TimePlayer
to detect new vulnerabilities.
In summary, this paper makes the following contributions.
• We propose a technique called differential replay, which can
quickly detect the use of uninitialized variables in Windows
kernels without the need of the source code.
• We propose symbolic taint analysis to locate the sources of unini-
tialized variables, and present two optimizations to speed up this
process.
• We have implemented a prototype and applied it to both Win-
dows 7 and Windows 10 in a time period of seven months. It
reported 34 new issues, and 17 of them have been confirmed as
zero-day vulnerabilities by Microsoft.
To engage the community, we have released the test cases, recorded
program traces, differences of program states during the replay that
leads to the discovery of new vulnerabilities in the following link:
https://github.com/AlibabaOrionSecurityLab/TimePlayer.
The rest of this paper is structured as follows: we introduce the
background and a motivating example in Section 2, and illustrate
the overall design of our system in Section 3. We illustrate the two
key techniques of our system in Section 4 and Section 5, respectively.
We then present the evaluation result in Section 6 and discuss the
potential limitation of our work in Section 7. At last, we describe
the related work in Section 8 and conclude our work in Section 9.
2 BACKGROUND AND A MOTIVATING
EXAMPLE
2.1 Background
Deterministic record and replay of PANDA PANDA is an
open source dynamic analysis platform with many unique features,
which make it a powerful platform for analyzing complicated soft-
ware. Our system leverages the record and replay feature offered by
Session 8D: Language SecurityCCS ’19, November 11–15, 2019, London, United Kingdom1884Figure 1: The overview of deterministic record and replay
of PANDA. IN: input from port; INT: hardware interrupts;
DMA: DMA events.
PANDA to record the execution first, and then replay the program
with poisoned memory values of the kernel stack and heap.
In order to detect uninitialized variables by comparing differ-
ences of two replay instances, the record and replay should be deter-
ministic. PANDA solves this challenges in the following way [18].
When starting recording, it first takes a snapshot of machine states,
including registers and memory values. Then it records three kinds
of non-deterministic events, including input events (through the
IN instruction), hardware interrupts, and DMA events. When any
event happens, it logs the trace point information, which consists of
the program counter (PC value), the instruction count since record
began, and the ECX counter value used in the x86 loop instruction.
The information is sufficient to distinguish one trace point from
another [19].
During the replay, PANDA first restores system states based
on the saved snapshot. Then it executes the program and feeds
non-deterministic events into the system, when the current trace
point is identical to the logged one. By doing so, it ensures that
non-deterministic events are generated in a same (virtual) timeline
as in the recording process. Figure 1 shows the overview of this
process. Note that, the multi-threading will not cause any issue,
since the execution trace of the multi-threaded program will be
deterministically replayed.
It is worth mentioning that, during the replay, there is no device
emulation code executed, and the replay cannot go live to accept
new inputs. The purpose of PANDA is to analyze the recorded trace.
This design choice makes the implementation of record and replay
really simple and clean.
Taint analysis Taint analysis [46, 57] is a data flow analysis
technique with wide usage. The basic idea is that it marks certain
types of data as the taint sources, assigns taint tags to them and
then propagates the tags when the program executes. When the
program reaches certain locations, namely taint sinks, rules could
be enforced by checking the tags. Our system uses the symbolic
taint analysis to identify the location where the uninitialized data
was allocated.
Figure 2: The code snippet of a kernel information leak
(CVE-2018-8408).
2.2 A Motivating Example
Before presenting the detailed system design and implementation,
we first use a new kernel information leak vulnerability (CVE-2018-
8408) detected by our system to show limitations of existing tools,
which motivate our work. Figure 2 shows the code snippet of this
vulnerability that leaks the kernel data from the stack.
A kernel information leak vulnerability This vulnerability
exists in both Windows 7 and Windows 10 kernels. The system
call NtDeviceIoControlFile can be used to set the UDP socket
with a flag FIONBIO for the non-blocking I/O mode. This routine
is invoked by the user-mode function WSARecvFrom. If this func-
tion is invoked without any incoming UDP data, a special status
value 0xc00000a3 (STATUS_DEVICE_NOT_READY) will be assigned to
the variable IoStatusBlock.Status. Four uninitialized bytes on
the kernel stack will be leaked to a user-space variable named
IoStatusBlock.Information, in the condition that the function
FltpFastIoDeviceControl returns a nonzero value.
Why it cannot be detected by Bochspwn Bochspwn [28] is
the state-of-the-art tool to detect kernel memory disclosure bugs.
The core idea is using the double-tainting technique to trace the
data flow of the uninitialized variable.
However, the tool cannot detect this vulnerability due to the
limitation of its taint analysis capability. For instance, to reduce
performance overhead, the tool only propagates the taint tag for the
instructions of memory to memory operations. In other words, the
tag will be lost when the tainted data flows into a register (which is
indeed the case of this vulnerability.) Also, as stated by the author,
its bug detection module is activated only if certain conditions are
satisfied, i.e., when the esi is in kernel-mode and edi is in user-
mode. However, in this case, the uninitialized kernel stack memory
is first passed to the ecx register and then leaked to user space
memory (Line 3 in Figure 2). This will cause the tool to generate a
wrong taint state, and miss this vulnerability.
Why our system can detect this vulnerability Our system ap-
plies the differential replay technique to quickly spot the occurrence
of the use of uninitialized data, without the need to dynamically
//nt!IopXxxControlFile(Entry: nt!NtDeviceIoControlFile):/* Code 01:IO_STATUS_BLOCK localIoStatus;//And other stack vars*/// a new kernel stack is allocated(and uninitialized)01: 0x83c6f838 sub esp, eax…/* Code 02-03:if (fastIoDispatch->FastIoDeviceControl(&localIoStatus){*IoStatusBlock= localIoStatus; //Last 4 bytes leaked}*/// move value from the kernel stack into ecx02: 0x83e244fe movecx, dwordptr[ebp-0x70]// move from ecxto a user space memory (eax+ 4) 03: 0x83e24501 movdwordptr[eax+ 4], ecxSession 8D: Language SecurityCCS ’19, November 11–15, 2019, London, United Kingdom1885tag  denotes part of the kernel
stack (from bit 256 to 287, 4 bytes in total) has been leaked.
Takeaway Instead of using the traditional dynamic taint tracking
technique, TimePlayer leverages the differential replay to detect
the use of the uninitialized data, which could be missed by other
tools. Moreover, the symbolic taint analysis further helps us find
the location where the uninitialized data was allocated, and the
exact portion of the memory region that has been leaked with a
bit-level granularity.
3 SYSTEM OVERVIEW
Detecting the use of uninitialized variables is not as easy as one may
think. A variable could be allocated from multiple locations (stack
and heap), and frequently used that may cross different privilege
domains. If we leverage the dynamic taint analysis to track the vari-
able in the whole system, including the kernel and user programs,
it may introduce a high performance overhead, which makes the
system impractical. Hence, it is a common practice to only partially
track the instructions, which introduces false negatives [28].
Our system proposed a new technique called differential replay to
quickly detect such an issue. Figure 4 shows the overall architecture
of our system. Specifically, we use a full system emulator to record
the execution of the operating system kernel and user programs
(❶). Then we replay the execution, but with poisoned values for
variables allocated from the stack and the heap (❷). If variables are
properly initialized before being used, then two replay instances
should have the same program states, since the initialization will
overwrite the poisoned value. However, if the variables are used
without being initialized, it will cause differences of program states.
Thus our system can detect the use of uninitialized variables by
detecting the differences during replay (❸), without performing the
time-consuming whole system taint tracking.
After that, we further leverage the symbolic taint tracking to
help us identify sources of uninitialized variables (❹). Our system
performs a forward symbolic taint tracking along the program
execution trace (❺). By doing so, we can identify the exact location
where the variable was allocated (❻), and the uninitialized memory
region that has been leaked.
In the following two sections, we will illustrate the two key
techniques, i.e., differential replay and symbolic taint tracking, of
our system.
4 KEY TECHNIQUE I: DIFFERENTIAL REPLAY
Differential replay involves several steps, i.e., recording the exe-
cution to save the program’s state, poisoning memory, replaying
programs and comparing the differences. In the following, we will
illustrate these steps one by one.
4.1 Recording Program Execution
The main purpose of recording program execution is to save the
state for replaying. Though there are many frameworks, e.g., PIN [36],
Valgrind [45], that could be used, our system uses PANDA, a full-
system emulation and analysis tool based upon Qemu [7], due to
the following reasons.
First, PANDA is a non-intrusive framework that does not change
the program’s state, e.g., the memory layout, when recording the
Figure 3: The observed different memory states of two re-
play instances, one is the normal replay instance, and the
other one is the replay instance with the poisoned stack