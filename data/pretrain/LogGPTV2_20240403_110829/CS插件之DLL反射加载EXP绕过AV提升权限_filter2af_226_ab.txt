这两个执行文件默认会加载的系统模块，从而使用他们的导出函数。
    #ifdef WIN_X64
        uiBaseAddress = __readgsqword( 0x60 );
    #else
    #ifdef WIN_X86
        uiBaseAddress = __readfsdword( 0x30 );
    #endif
> 原理可以查阅:  
>
> [获取kernel32.dll基址](https://blog.csdn.net/bcbobo21cn/article/details/50450490)  
>  [PEB枚举进程所有模块](https://www.bbsmax.com/A/qVdeqAZ1dP/)
>
> 这里为了帮助萌新理解，可以简单理解为一种介质，来获取到模块的地址，当然你也可以自己调试一个正常的进程，去查看PEB与进程模块地址的关系来验证下面的说法。
>  
>  
>     !peb
>     dt _PEB @$peb  
>     dt 0x00007ff8`b52653c0 _PEB_LDR_DATA
>     dt 0x00007ff8`b52653c0+0x10 _LIST_ENTRY
>     dt 0x00000000`007924a0 _LDR_DATA_TABLE_ENTRY
>
>
> 
x64系统寄存器位置gs:[0x60]存放的是PEB结构的地址放入`uiBaseAddress`  
0x0c偏移处即Ldr是一个指向PEB_LDR_DATA结构的指针，代码选择了内存顺序加载`InMemoryOrderModuleList`，它是一个双链表结构，成环形，链表指向的数据结构便是module加载的信息，其中包括DllBase、BaseDllName等信息，
> [PEB_LDR_DATA structure (winternl.h)](https://docs.microsoft.com/en-> us/windows/win32/api/winternl/ns-winternl-peb_ldr_data)
遍历进程模块，进行hash比较，然后下面一大段代码，while一层用于全部遍历，主要找到两个关键module，`KERNEL32DLL`(里面继续循环3次，找到关键函数`LoadLibraryA`,`GetProcAddress`,`VirtualAlloc`)和`NTDLL`(循环一次，找到`NtFlushInstructionCache`),代码实现较为简单直接粗暴，作者的注释很赞。
    // compare the hash with that of kernel32.dll
            if( (DWORD)uiValueC == KERNEL32DLL_HASH )
            {
                // get this modules base address
                uiBaseAddress = (ULONG_PTR)((PLDR_DATA_TABLE_ENTRY)uiValueA)->DllBase;
                // get the VA of the modules NT Header
                uiExportDir = uiBaseAddress + ((PIMAGE_DOS_HEADER)uiBaseAddress)->e_lfanew;
                // uiNameArray = the address of the modules export directory entry
                uiNameArray = (ULONG_PTR)&((PIMAGE_NT_HEADERS)uiExportDir)->OptionalHeader.DataDirectory[ IMAGE_DIRECTORY_ENTRY_EXPORT ];
                // get the VA of the export directory
                uiExportDir = ( uiBaseAddress + ((PIMAGE_DATA_DIRECTORY)uiNameArray)->VirtualAddress );
                // get the VA for the array of name pointers
                uiNameArray = ( uiBaseAddress + ((PIMAGE_EXPORT_DIRECTORY )uiExportDir)->AddressOfNames );
                // get the VA for the array of name ordinals
                uiNameOrdinals = ( uiBaseAddress + ((PIMAGE_EXPORT_DIRECTORY )uiExportDir)->AddressOfNameOrdinals );
                usCounter = 3;
                // loop while we still have imports to find
                while( usCounter > 0 )
                {
                    // compute the hash values for this function name
                    dwHashValue = hash( (char *)( uiBaseAddress + DEREF_32( uiNameArray ) )  );
                    // if we have found a function we want we get its virtual address
                    if( dwHashValue == LOADLIBRARYA_HASH || dwHashValue == GETPROCADDRESS_HASH || dwHashValue == VIRTUALALLOC_HASH )
                    {
                        // get the VA for the array of addresses
                        uiAddressArray = ( uiBaseAddress + ((PIMAGE_EXPORT_DIRECTORY )uiExportDir)->AddressOfFunctions );
                        // use this functions name ordinal as an index into the array of name pointers
                        uiAddressArray += ( DEREF_16( uiNameOrdinals ) * sizeof(DWORD) );
                        // store this functions VA
                        if( dwHashValue == LOADLIBRARYA_HASH )
                            pLoadLibraryA = (LOADLIBRARYA)( uiBaseAddress + DEREF_32( uiAddressArray ) );
                        else if( dwHashValue == GETPROCADDRESS_HASH )
                            pGetProcAddress = (GETPROCADDRESS)( uiBaseAddress + DEREF_32( uiAddressArray ) );
                        else if( dwHashValue == VIRTUALALLOC_HASH )
                            pVirtualAlloc = (VIRTUALALLOC)( uiBaseAddress + DEREF_32( uiAddressArray ) );
                        // decrement our counter
                        usCounter--;
                    }
                    // get the next exported function name
                    uiNameArray += sizeof(DWORD);
                    // get the next exported function name ordinal
                    uiNameOrdinals += sizeof(WORD);
                }
            }
            else if( (DWORD)uiValueC == NTDLLDLL_HASH )
            {
                // get this modules base address
                uiBaseAddress = (ULONG_PTR)((PLDR_DATA_TABLE_ENTRY)uiValueA)->DllBase;
                // get the VA of the modules NT Header
                uiExportDir = uiBaseAddress + ((PIMAGE_DOS_HEADER)uiBaseAddress)->e_lfanew;
                // uiNameArray = the address of the modules export directory entry
                uiNameArray = (ULONG_PTR)&((PIMAGE_NT_HEADERS)uiExportDir)->OptionalHeader.DataDirectory[ IMAGE_DIRECTORY_ENTRY_EXPORT ];
                // get the VA of the export directory
                uiExportDir = ( uiBaseAddress + ((PIMAGE_DATA_DIRECTORY)uiNameArray)->VirtualAddress );
                // get the VA for the array of name pointers
                uiNameArray = ( uiBaseAddress + ((PIMAGE_EXPORT_DIRECTORY )uiExportDir)->AddressOfNames );
                // get the VA for the array of name ordinals
                uiNameOrdinals = ( uiBaseAddress + ((PIMAGE_EXPORT_DIRECTORY )uiExportDir)->AddressOfNameOrdinals );
                usCounter = 1;
                // loop while we still have imports to find
                while( usCounter > 0 )
                {
                    // compute the hash values for this function name
                    dwHashValue = hash( (char *)( uiBaseAddress + DEREF_32( uiNameArray ) )  );
                    // if we have found a function we want we get its virtual address
                    if( dwHashValue == NTFLUSHINSTRUCTIONCACHE_HASH )
                    {
                        // get the VA for the array of addresses
                        uiAddressArray = ( uiBaseAddress + ((PIMAGE_EXPORT_DIRECTORY )uiExportDir)->AddressOfFunctions );
                        // use this functions name ordinal as an index into the array of name pointers
                        uiAddressArray += ( DEREF_16( uiNameOrdinals ) * sizeof(DWORD) );
                        // store this functions VA
                        if( dwHashValue == NTFLUSHINSTRUCTIONCACHE_HASH )
                            pNtFlushInstructionCache = (NTFLUSHINSTRUCTIONCACHE)( uiBaseAddress + DEREF_32( uiAddressArray ) );
                        // decrement our counter
                        usCounter--;
                    }
                    // get the next exported function name
                    uiNameArray += sizeof(DWORD);
                    // get the next exported function name ordinal
                    uiNameOrdinals += sizeof(WORD);
                }
            }
            // we stop searching when we have found everything we need.
            if( pLoadLibraryA && pGetProcAddress && pVirtualAlloc && pNtFlushInstructionCache )
                break;
            // get the next entry
            uiValueA = DEREF( uiValueA );
        }
目的是最终获取到下面4个函数，用于在内存展开DLL和刷新指令。
    pLoadLibraryA && pGetProcAddress && pVirtualAlloc && pNtFlushInstructionCache
接下来重新分配一个新的空间，大小为PE中设置的内存展开大小,直接复制PE头到新空间。
    // STEP 2: load our image into a new permanent location in memory...
        // get the VA of the NT Header for the PE to be loaded
        uiHeaderValue = uiLibraryAddress + ((PIMAGE_DOS_HEADER)uiLibraryAddress)->e_lfanew;
        // allocate all the memory for the DLL to be loaded into. we can load at any address because we will  
        // relocate the image. Also zeros all memory and marks it as READ, WRITE and EXECUTE to avoid any problems.
        // 重新分配内存镜像大小的空间
        uiBaseAddress = (ULONG_PTR)pVirtualAlloc( NULL, ((PIMAGE_NT_HEADERS)uiHeaderValue)->OptionalHeader.SizeOfImage, MEM_RESERVE|MEM_COMMIT, PAGE_EXECUTE_READWRITE );
        // PE头部大小 
        uiValueA = ((PIMAGE_NT_HEADERS)uiHeaderValue)->OptionalHeader.SizeOfHeaders;
        // 未展开的DLL文件地址
        uiValueB = uiLibraryAddress;
        // 需要存放展开的DLL内存镜像地址
        uiValueC = uiBaseAddress;
        while( uiValueA-- )
            // 直接复制PE头到需要展开DLL的内存空间
            *(BYTE *)uiValueC++ = *(BYTE *)uiValueB++;
复制所有区段
    // STEP 3: load in all of our sections...
        // uiValueA = the VA of the first section
        // section区域在OptionHeader之后
        uiValueA = ( (ULONG_PTR)&((PIMAGE_NT_HEADERS)uiHeaderValue)->OptionalHeader + ((PIMAGE_NT_HEADERS)uiHeaderValue)->FileHeader.SizeOfOptionalHeader );
        // itterate through all sections, loading them into memory.
        // 获取区段数目
        uiValueE = ((PIMAGE_NT_HEADERS)uiHeaderValue)->FileHeader.NumberOfSections;
        while( uiValueE-- )
        {
            // uiValueB is the VA for this section
            uiValueB = ( uiBaseAddress + ((PIMAGE_SECTION_HEADER)uiValueA)->VirtualAddress );
            // uiValueC if the VA for this sections data
            uiValueC = ( uiLibraryAddress + ((PIMAGE_SECTION_HEADER)uiValueA)->PointerToRawData );
            // copy the section over
            uiValueD = ((PIMAGE_SECTION_HEADER)uiValueA)->SizeOfRawData;
            while( uiValueD-- )
                *(BYTE *)uiValueB++ = *(BYTE *)uiValueC++;
            // get the VA of the next section
            uiValueA += sizeof( IMAGE_SECTION_HEADER );
        }
解析导入表,根据PE中IAT和INT来完成地址修正。
    // itterate through all imports
        while( ((PIMAGE_IMPORT_DESCRIPTOR)uiValueC)->Name )
        {
            // use LoadLibraryA to load the imported module into memory
            // 利用LoadLibrary API加载进内存 返回到地址
            uiLibraryAddress = (ULONG_PTR)pLoadLibraryA( (LPCSTR)( uiBaseAddress + ((PIMAGE_IMPORT_DESCRIPTOR)uiValueC)->Name ) );
            // uiValueD = VA of the OriginalFirstThunk
            //INT导入表地址
            uiValueD = ( uiBaseAddress + ((PIMAGE_IMPORT_DESCRIPTOR)uiValueC)->OriginalFirstThunk );
            // uiValueA = VA of the IAT (via first thunk not origionalfirstthunk)
            // IAT导入表地址
            uiValueA = ( uiBaseAddress + ((PIMAGE_IMPORT_DESCRIPTOR)uiValueC)->FirstThunk );
            // itterate through all imported functions, importing by ordinal if no name present
            while( DEREF(uiValueA) )
            {
                // sanity check uiValueD as some compilers only import by FirstThunk
                // 根据INT序号进行导入
                if( uiValueD && ((PIMAGE_THUNK_DATA)uiValueD)->u1.Ordinal & IMAGE_ORDINAL_FLAG )
                {
                    // get the VA of the modules NT Header
                    uiExportDir = uiLibraryAddress + ((PIMAGE_DOS_HEADER)uiLibraryAddress)->e_lfanew;
                    // uiNameArray = the address of the modules export directory entry
                    uiNameArray = (ULONG_PTR)&((PIMAGE_NT_HEADERS)uiExportDir)->OptionalHeader.DataDirectory[ IMAGE_DIRECTORY_ENTRY_EXPORT ];
                    // get the VA of the export directory
                    uiExportDir = ( uiLibraryAddress + ((PIMAGE_DATA_DIRECTORY)uiNameArray)->VirtualAddress );
                    // get the VA for the array of addresses
                    uiAddressArray = ( uiLibraryAddress + ((PIMAGE_EXPORT_DIRECTORY )uiExportDir)->AddressOfFunctions );
                    // use the import ordinal (- export ordinal base) as an index into the array of addresses
                    uiAddressArray += ( ( IMAGE_ORDINAL( ((PIMAGE_THUNK_DATA)uiValueD)->u1.Ordinal ) - ((PIMAGE_EXPORT_DIRECTORY )uiExportDir)->Base ) * sizeof(DWORD) );
                    // patch in the address for this imported function
                    // 填写IAT地址
                    DEREF(uiValueA) = ( uiLibraryAddress + DEREF_32(uiAddressArray) );
                }
                else
                {
                    // 根据名称导入
                    // get the VA of this functions import by name struct
                    uiValueB = ( uiBaseAddress + DEREF(uiValueA) );
                    // use GetProcAddress and patch in the address for this imported function
                    // 通过pGetProcAddress 修正IAT
                    DEREF(uiValueA) = (ULONG_PTR)pGetProcAddress( (HMODULE)uiLibraryAddress, (LPCSTR)((PIMAGE_IMPORT_BY_NAME)uiValueB)->Name );
                }
                // get the next imported function
                uiValueA += sizeof( ULONG_PTR );
                if( uiValueD )