fuzzing—although we all agree that they should. For many companies, fuzzing is
something that is looked at after all other testing needs have been fulfilled. What
should we do to motivate them to embrace fuzzing as part of their software devel-
opment process? One driving force in changing the testing priorities can be created
by using fuzzing tools in the enterprise environment.
The first action that enterprises could take is to require fuzzing in their procure-
ment practices and kick out the vendors who do not use fuzzing in R&D. Several
financial organizations and telecommunication service providers are already requir-
ing some proof of negative testing or fuzzing from their vendors. All end customers
of communication software have to stress the importance of security to the software
developers and to the device manufacturers.
The second step would be to outsource fuzz testing. Fuzzing should be an inte-
gral part of penetration testing services offered by both test automation companies
and security consultancies. But unfortunately only very few security experts today
truly understand fuzzing, and very few quality assurance people understand the
importance of negative testing.
The third and final step would be to make fuzzing tools more usable for enter-
prise users. Fuzzers should be easy to use by people who are not expert hackers. We
also need to educate the end users to the available measures to assess the security
of their critical system by themselves.
The people opposing the use of fuzzers in the enterprise environment use several
statements to discourage their use. For example, these misconceptions can include
the following statements.
• “You cannot fuzz in a live environment.” This is not true. Attackers will fuzz
the systems already, and proactive usage of fuzzing tools by system admin-
istrators can prepare an enterprise to withstand or at least understand the
risks of such attacks. Even in an enterprise environment, it is still possible to
fuzz selected systems and to mitigate its impact on business-critical services.
• “Manufacturers can find all flaws with fuzzing.” This is also not true, because
the complexity of a total integrated system is always more than the sum of
the complexity of each item used. Manufacturers can never test all configu-
rations, nor can they integrate the systems with all possible other systems,
required middleware, and proprietary data. The actual environment will
always affect test results.
• “Not our responsibility.” Many enterprises think vendors should be the only
ones testing their products and systems, not the end users or solution integra-
tors. This is definitely not true! Not using negative testing practices at every
possible phase when deploying critical systems can be considered negligency.
Although some more responsible vendors test their products nowadays with
6760 Book.indb 34 12/22/17 10:50 AM
1.4 Book Goals and Layout 35
stringent fuzz tests, this is hardly the case for all vendors in the world. Even
though we all know vendors should do most of the testing, sadly there is still
much to improve when it comes to vendors’ attitudes toward preventing quality
problems. Since we know that not all vendors will be doing the testing, it is up
to the integrators and users to at least do a smoke test for the final systems.
If all fails, the systems and software should be sent back to the vendor, with
a recommendation to invest in fuzzing and secure development processes.
Despite what has been stated above, you do need to be extremely careful when
fuzzing a live system, as the testing process could crash your systems or corrupt
data. If you can afford it, build a mirror setup of your critical services for testing
purposes. Analyze your services from the attackers’ perspective via a thorough
analysis of the available attack vectors and by identifying the used protocols. You
can test your perimeter defenses separately or together with the service they are
trying to protect. You will be surprised at how many of your security solutions
actually contain security-related flaws. After testing the perimeter, go on to test
the reliability of your critical hosts and services without the protecting perimeter
defenses. If all appears to be fine in the test environment, then cross your fingers
and shoot the live system. But be prepared for crashes. Even if crashes occur, it is
better you cause them to occur, rather than a malicious attacker. You will probably
notice that a live system with live data will be more vulnerable to attacks than a
white-room test system with default configurations.
1.4 Book Goals and Layout
This book is about fuzzing in all forms. Today all fuzzing-related terms—such as
fuzzing, robustness testing, or negative black-box testing—have fused together in
such a way that when someone says he or she has created a new RPC fuzzer, DNS
robustness test suite, or a framework for creating negative tests against various file
formats, we do not know the exact methods that may be in use. Is it random or
systematic testing? Is it aimed at finding exploitable vulnerabilities or does it focus
on safety-related robustness flaws? Can it be used as part of software development,
or only against deployed systems? Our goal is to shed light on these mysteries.
Throughout the book, these terms may be used synonymously, and if a particular
connotation is implied, such will be indicated.
The purpose of this chapter was to give you an overview of fuzzing. In Chapter
2 we will look at fuzzing from the software vulnerability analysis (VA) perspective,
and later in Chapter 3 we will look at the same issues from the quality assurance
(QA) perspective. Chapter 4 will consider the business metrics related to fuzzing,
both from cost and effectiveness perspectives. Chapter 5 will attempt to describe
how various fuzzers can be categorized, with Chapter 6 identifying how the fuzz-
test generators can be augmented with different monitoring and instrumentation
techniques. Chapter 7 will provide an overview of current research, potentially
providing an indication where future fuzzers are going. Chapter 8 will provide an
independent fuzzer comparison, and Chapter 9 will present some sample use cases
of where fuzzing can and is being used today.
6760 Book.indb 35 12/22/17 10:50 AM
6760 Book.indb 36 12/22/17 10:50 AM
C h a p t e r 2
Software Vulnerability Analysis
Although fuzzing can be used for other purposes, it is mainly a method for analyz-
ing software for vulnerabilities. Therefore, it is useful to start our book by looking
at the traditional methods used in software vulnerability analysis, or VA for short.
Software vulnerability analysis is the art and science of discovering security
problems or other weaknesses in software or systems. By security we mean anything
that might allow an intentional or unintentional breach of confidentiality, integrity,
or availability. The acronym CIA is commonly used for these basic principles or
security goals, and simply serves as a baseline for security requirements. A breach of
confidentiality can happen through any access to confidential data. Breach of integ-
rity, on the other hand, can mean modification of data even without its disclosure.
Availability problems are often realized in crashes of the server or client software,
or degradation of the service. Fuzzing can discover all these, although availability
problems are easiest to detect. When the vulnerability is a buffer overflow or any
other flaw that will enable execution of code in the target system, the result is often
a total compromise, resulting in loss of all these three security goals.
The actual bugs behind security vulnerabilities fall into more granular bins of
bug types. For example, a bug could involve misusing software, such as making free
calls when you should not be able to do so. In short, vulnerabilities are the result
of three kinds of flaws:
• Implementation errors (e.g., overflows);
• Design flaws (e.g., weak authentication), missing authorization checks;
• Configuration errors or other system or network infrastructure errors.
It is worth noting that not all bugs or coding flaws result in a vulnerability; they
could be purely functional, such as a malfunctioning GUI or a miscalculation in a
spreadsheet application. For those bugs that do result in a vulnerability, a proof-of-
concept (POC) demonstration or a full-blown exploit can be used to prove that the
particular bug leads to a vulnerability and that that vulnerability can be exploited
in some manner. Development teams experienced with security flaws will gener-
ally fix bugs without requiring a proof-of-concept exploit.1 Again, an exploit is a
means by which CIA is broken, often by demonstrating that it is possible to gain
unauthorized access to a host or network. Another example of a POC would be the
1 Note: Correctly labeling bugs as security problems is useful for system administration teams in their
efforts to prioritize or schedule the required patching cycles.
37
6760 Book.indb 37 12/22/17 10:50 AM
38 Software Vulnerability Analysis
denial of service (DoS) attack, whereby a computer resource is rendered unavailable
(or less available) to its intended users.
In this chapter we will discuss categories of bugs from a security perspective. We
will describe many different kinds of software bugs and how they can be exploited.
We will also explain how security vulnerabilities can be searched out in software,
and what defenses are available.
2.1 purpose of Vulnerability Analysis
The purpose of vulnerability analysis is to find weaknesses, bugs, or flaws in a system
(breach of CIA). The term vulnerability analysis is often used to indicate network
auditing, such as a consultative professional penetration testing team might do.
That is, they might analyze a network for unpatched workstations, misconfigured
firewalls, improper logging, poor physical security, etc. This may also be called a
tiger team or red/blue team testing.2 However, throughout this book vulnerability
analysis will generally indicate the review of an application’s security stance from
all possible perspectives.
2.1.1 Security and Vulnerability Scanners
Since the term vulnerability analysis can indicate red teaming or penetration testing
as described above, it is good to understand the tools that could be used for such
endeavors. These tools are typically called vulnerability scanners;3 sometimes they
are referred to as security scanners. These tools are different than fuzzing tools.
Scanning tools are similar in functionality to signature-based virus scanning tools.
2.1.1.1 Nonexploitation Vulnerability Scanners
These tools have a preprogrammed set of application specific tests that they run.
For example, a tool like Nessus will
1. Port scan hosts in a configurable IP address range, using functionality similar
to a port scanning tool like nmap.
2. Based on that scan, the tool will make a guess about the operating system
(OS) and the applications running on the various open ports.
3. Based on these facts, it may run application specific tests targeted to the
identified service.
For example, suppose Nessus (shown in Figure 2.1) determines a host is running a
specific version of the Linux operating system based on the fingerprinting data of
the TCP/IP stack, and a port scan detects that TCP port 21 (FTP) is open and that
the server on that port acts like an old version of wu-ftpd. Based on this data, if it
2 Red team and blue team testing are commonly used in the military. In vulnerability analysis, using
the term blue team indicates more access to the target system, such as source code, etc.
3 A good list of vulnerability scanners can be found at http://sectools.org/vuln-scanners.html
6760 Book.indb 38 12/22/17 10:50 AM
2.1 Purpose of Vulnerability Analysis 39
Figure 2.1 A Nessus scan of an older fedora Linux computer.
has knowledge of known software flaws for that version of wu-ftpd, it may report
that a bug may exist.
Some people prefer this type of safe reporting based on passive probing, because
no hostile tests were actually sent to the target system, nor were any actual exploits
run to detect the potential vulnerability. Of course, if the results of the test are
simply based on banner grabbing, this could easily be a false positive. The simple
technique of banner grabbing performs a network read of data sent by a server or
client. For example, in the FTP server case:
1. This can be manually done via a tool like netcat.4 Run a command such as
this: “nc  ” to the target host.
2. The FTP server should send back its banner, something like this: “220
(vsFTPd 2.0.4).” This is shown in Figure 2.2.
Note that, unlike fuzzing, this type of scanning will not uncover unknown
vulnerabilities in systems. It only reports on vulnerabilities it is configured to know
about, those that are included in its database.
2.1.1.2 Exploitation Scanners/Frameworks
The main problem with banner grabbing is that these ASCII text banners returned
by the server software can be easily modified by a network administrator to fool
such scanning attempts. Hackers might even be tricked into sending exploits at a
4 The original version of netcat was released by Hobbit in 1995. Today various versions are available for
different Unix flavors. One variant, the GNU Netcat is available here: http://netcat.sourceforge.net/.
6760 Book.indb 39 12/22/17 10:50 AM
40 Software Vulnerability Analysis
Figure 2.2 Example of banner grabbing via the command line IP utility netcat.
patched target. System administrators may use this to try to identify network intrud-
ers or compromised hosts, and researchers may use this to find out about the latest
attacks in use by people with malicious intent.
At any rate, some penetration tests may have the elevated requirement to prove
that such hosts are in fact vulnerable by running actual exploits. If such is the case, a
tool like Core Impact, Metasploit, or Canvas can be used. These attack frameworks
come loaded with live attacks, varying shellcodes (bits of code that run inside the
vulnerable process to help exploit a host), debugging, and stealth.
Figure 2.3 shows the Metasploit framework in action. A Windows 2000 server
gets PWNED (hacker verbiage for compromised) by a VNC vulnerability.
Another important factor with these products is the ability to pivot, which
means that after exploiting a vulnerability on one host, it is able to then use that
host as a new launch point. This is a very realistic method for penetration testers,
as most attackers use one vulnerable host as a stepping-stone to further penetrate
a network or to gather more information.
2.2 people Conducting Vulnerability Analysis
Various people and organizations around the world audit software. They may do
this for quality assurance reasons, as third-party auditors, or as hackers looking
to find bugs for fun or for profit. Many terms exist for individuals who search for
vulnerabilities in software:
• Security researcher;
• Vulnerability researcher;
• Bug hunter;
• Penetration tester;
• Hacker;
• Cracker;
• Tester;
• Security assurance engineer.
Some might use the terms synonymously, but typically there are differences.
For example, researchers are typically given more time per project than penetration
testers. Occasionally, researchers are self-employed or freelance. Penetration testers
were traditionally known for their expertise in Web auditing, but today are known
6760 Book.indb 40 12/22/17 10:50 AM
2.2 People Conducting Vulnerability Analysis 41
Figure 2.3 VNC injection example via Metasploit.
for being very broadly trained in security. In some areas, the term penetration tester
is reserved for formally trained professionals. Hackers could be employed or not, and
may or may not perform legal duties. Governments often employ the most skilled
of these categories to perform both offensive and defensive information missions.
Finally, testers work for companies attempting to produce high-quality software.
Rigorously testing proprietary software before it hits the streets will save companies
money and allow it to be deployed in critical situations. Skilled workers in all of
these categories can expect to draw above average salaries as such skills take years
of work experience and education to hone.
Although the mission of these groups varies greatly, the tools, techniques, and
technology are quite similar. Software companies may even try to recruit former
security researchers or hackers in an attempt to better secure their own products
before general release.
Most of the people who work with vulnerability analysis have a computer sci-
ence education and a passion for computer security. But for the most skilled hackers,
the following skills are fundamental requirements to being successful in the field:
• Knowledge of operating system internals;
• C/C++ programming;
• Scripting with languages such as Perl/Python;
• IP networking;
• Reverse engineering;
• Knowledge of assembly language of the target architecture;
• Systems administration.
6760 Book.indb 41 12/22/17 10:50 AM
42 Software Vulnerability Analysis
If you wish to write your own low-level protocol fuzzers, then the same set of
requirements probably would apply to your job position. If, on the other hand, you
would only use existing tools, the requirements would be less stringent.
Below are some job descriptions of people who use the skills described in this
book to make a living.
2.2.1 hackers
True hacking is a tough way to make a living these days, especially via legal means.
First, you need to find unique bugs in interesting products. Only a few years ago,
critical security bugs were easy to find even in big name products, but not so any
more. It is still possible, however. Today, there are more and more people looking,
and even most software developers have acquired tools that will help them in pro-
actively preventing such vulnerabilities in their products before hackers will get a
chance to find them.
When a hacker finally finds an interesting bug, he or she needs to sell it.5 Various
security companies6 will purchase verified bugs, and they will pay a premium for
big name bugs. Most of these companies will then report the problem to the vendor,
potentially selling it to them. Some of them also have an interest in knowing security
problems before anyone else knows them, as their main business can be in building
and selling vulnerability scanners or other security products. It is also possible to
try to auction the found vulnerabilities to the highest bidder at dedicated auction
sites. This might be more unethical, because you will lose control of where the data
ends up, and how it will be used. Yet another choice is to sell bugs to various gov-
ernment defense agencies.7 Options and opinions will differ on this touchy subject.
It is also possible to earn money by illegal hacking activities. Cybercrime pos-
sibilities are as endless as the imagination. We obviously do not recommend that
route because
• It is immoral.
• The police will eventually always catch you.
2.2.2 Vulnerability Analysts or Security researchers
Vulnerability analyst and security researcher are fairly generic terms. These research-
ers generally either work for a consulting company and find bugs in customers’ prod-
ucts for them or do this for fun on their own time. Researchers who hunt bugs on
their own time, often look for vulnerabilities in software from vendors that have a
bug bounty program.8 Bug bounty programs are public programs, often organized
by the software vendor, that offer reward for responsible disclosure of bugs.
There is no formal certification or single training required for such a position
although such individuals usually have boat loads of experience and education. A