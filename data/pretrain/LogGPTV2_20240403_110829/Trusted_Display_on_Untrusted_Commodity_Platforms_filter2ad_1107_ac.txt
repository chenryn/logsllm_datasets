In addition, the invariant that GPU commands cannot
violate (1) any GPU conﬁguration register invariants,
and (2) GPU page table invariants must also be en-
forced.
Soundness.
In order to show these invariants are sound,
we need to show that if they hold, malicious access to and
conﬁguration of the above sensitive GPU objects is pre-
vented. To show this, we note that an adversary can per-
form only four types of attacks that represent combinations
of two basic methods (i.e., unauthorized access to trusted-
display content and alteration of its conﬁgurations) exercised
either directly or indirectly. To prevent direct manipulation
of trusted-display content, GPU mediation policy ensures
no untrusted access to the trusted display’s frame buﬀers is
possible. And to prevent indirect manipulation of trusted-
display content, GPU mediation policy ensures that no un-
trusted write to other sensitive GPU memory is possible.
The protection of the trusted-display conﬁguration pro-
tection is similar. To prevent direct tampering of output,
untrusted re-conﬁguration of trusted display is disallowed.
Indirect re-conﬁguration is prevented by requiring the same
access invariants as those for indirect access to the display
content. Finally, additional invariants are required to ensure
that GPU address space separation is maintained in order
to avoid complex GPU instructions veriﬁcation.
3.4.3 Access Emulation
The GSK maintains full object-code compatibility with
commodity platforms by retaining the common access meth-
ods (e.g., memory-mapped and port I/O) of commodity
GPUs and by emulating the expected returns when un-
trusted commodity OS/Apps perform security-sensitive ob-
ject operations. We use the security model to identify the
minimal set of object accesses and functions that require em-
ulation; viz., Section 4.5. This enables us to minimize the
GSK code base; viz., Table 2 in Section 4.4, which shows
that only a small number of mediated GPU objects requires
function emulation. For example, direct access to security-
insensitive objects and security-sensitive access to objects
used only by commodity OS/Apps (i.e., outside trusted dis-
play) do not need emulation. In contrast, full GPU virtu-
alization has to emulate accesses to all GPU objects of the
VMs scheduled to access the GPU. In particular, it has to
emulate a wide variety of accesses to all GPU conﬁguration
registers7 and thus requires a large trusted code base.
When object-access emulation is required by the security
model, the GSK returns the expected access results as de-
ﬁned in the GPU speciﬁcations without actually accessing
the real GPU objects. It does this by “shadowing” the real
objects; viz., Section 4.5. For example, to locate OS’s frame
buﬀer, GSK emulates accesses to frame buﬀer base by ac-
cessing this register’s shadow. Furthermore, for sensitive-
object accesses that violate security invariants, the GSK
simply drops write accesses and returns dummy values for
read accesses8.
3.5 Veriﬁable code base
The GSK code base is both small and simple, and hence
veriﬁable, for the following three reasons. First, as shown in
Section 5.1, the number of security-sensitive GPU objects is
very small. Most of the GPU objects are security-insensitive,
and can be direct accessed without kernel mediation.
Second, the GSK outsources most GPU functions (in-
cluding all GPU functions used by commodity software and
GPU objects provisioning for trusted display) to untrusted
OS/Apps because it can verify all untrusted-code results
very eﬃciently. The veriﬁcation is driven by the policy
invariants. Furthermore, only a small number of sensitive
GPU objects require function emulation and this takes only
a small amount of code, as shown in Section 5.1. Thus, im-
plementing the GPU functions themselves (e.g., the large
and complex native GPU drivers) within the GSK becomes
unnecessary. The GSK also exports GPU driver code to Se-
cApps using standard techniques [56]; i.e., the traditional
GPU software stack already deprivileges frame buﬀer ren-
dering functions and management logic and exports them
to user libraries. The GSK uses a similar approach, except
that it requires SecApps to provide their own display con-
tents. (Recall that SecApps cannot directly access any GPU
objects.)
Third, GSK perserves existing assurance of the underly-
ing trusted code bases. This is because GSK relies on exist-
ing security primitives and services already provided by the
underlying trusted code bases; e.g., CPU physical memory
access control [25, 9], and Direct Memory Access control [8,
24].
7Failure to emulate all accesses causes incompatibility
with commodity OS/Apps; e.g., Tian et al. [46] virtualize
GEN6 PCODE MAILBOX register without emulating its
functions, which causes GPU initialization errors in VMs.
8To date, we have not found any malware-free commodity
OS/Apps code that would be denied accesses to security-
sensitive objects.
994GPU objects by untrusted OS/Apps. It implements tradi-
tional hypercalls to receive TDK-initiated communications,
and fast communication channels to notify the TDK of ac-
cess requests received from untrusted OS/Apps. The hyper-
calls enable the TDK to deﬁne the security-sensitive GPU
objects so that the TD add-on knows what access requests
from untrusted OS/Apps to trap. Once an access is tapped,
the TD add-on uses its CPU instruction emulator to iden-
tify the object-access requested, access mode, and access
parameters; e.g. the new value to be written. This informa-
tion is sent to the TDK for the mediation and emulation of
the requested access to the object, via a fast communication
channel.
The TD add-on is implemented using the TrustVisor [35]
extension to XMHF, which isolates SecApps and enables
them to request on-demand isolated I/O operations [56].
4.2 Screen Overlay
The screen overlay component of TDK displays SecApps’
output over that of untrusted commodity software. The
screen overlay provides interfaces to SecApps and performs
frame buﬀer merging in response to SecApps’ requests. Frame
buﬀer merging can be done either purely by software (i.e.,
by “software overlay”) or by hardware acceleration (i.e., by
“hardware overlay”).
In software overlays, TDK shadows
the screen frame buﬀer when TDK is initialized. During
the trusted-display session, the TDK merges the SecApps’
display contents with the untrusted frame buﬀer using their
geometry information, and outputs the resulting image to
the shadow frame buﬀer. Then, the TDK programs the
display engine to present the shadow frame buﬀer on the
display. In comparison, hardware overlays are supported by
some modern GPUs that layer one frame buﬀer over others.
This improves the SecApps’ CPU performance by eliminat-
ing frame-buﬀer merging by the CPU.
Frame buﬀer merging does not necessarily ensure that
the SecApps display content is layered over all untrusted
OS/Apps content. The hardware cursor can still be shown
over the merged image, and hence TDK must ensure that
the hardware cursor operation is trustworthy. To do this,
the TDK provides and protects its cursor image and the
corresponding GPU conﬁgurations9. Similarly, the TDK
emulates all hardware overlay not used by SecApps. Thus,
SecApps can display over all untrusted contents.
SecApps also provide their display geometries to the TDK
to prevent SecApp-output overlaps. Furthermore, the TDK
provides a V-sync interrupt to SecApps to prevent image
tearing. To enhance human perception of trusted screen
areas, a SecApp always starts its display at the center of
the screen. The current trusted-display implementation sup-
ports hardware overlays only, and allows a single SecApp to
execute at a time though a multi-window version implemen-
tation does not pose any additional security problems.
4.3 Access Mediation Mechanism
In general, the access mediation mechanism of TDK inter-
poses between commodity software and GPU by intercept-
ing Memory-Mapped I/O (MMIO) and Port I/O (PIO), in a
similar manner to that of previous systems [46, 45]. The ac-
cess mediation mechanism also performs two tasks, namely
9The cursor location needs protected only if the mouse de-
vice is a trusted-path device. This issue is orthogonal to the
design of the trusted-display service.
Figure 4: Architecture of the trusted display service.
The grey area denotes the trusted base of SecApps.
4. DESIGN AND IMPLEMENTATION
We design the GSK as an add-on security architecture [19]
based on two components: a Trusted Display Kernel (TDK)
and a trusted display (TD) add-on to the underlying micro-
hypervisor (mHV). This section ﬁrst describes the system
architecture, and then presents its detailed design for the
trusted display.
4.1 Architecture Overview
As illustrated in Figure 4, mHV runs underneath all the
other software components, protects itself, and hosts a TD
add-on component. The TD add-on extends mHV and takes
advantage of the mHV primitives to isolate its execution in
a similar manner as that used in past work [35, 56]. The
TD add-on notiﬁes Trusted Display Kernel (TDK) about
untrusted OS/Apps’ requests to access sensitive GPU ob-
jects, since the TDK is the only software component in the
trusted-display service that is allowed to access these ob-
jects directly. The TDK runs at the OS privilege level and
provides trusted-display services to user-level SecApps that
generate sensitive display content via CPU rendering. The
TDK also mediates accesses to sensitive GPU objects by
native drivers of untrusted OS/Apps and emulates these ac-
cesses whenever necessary.
TDK. The TDK includes three components. The ﬁrst
is the screen overlay component, which displays SecApps
output over that of untrusted OS/Apps (Section 4.2).
The second component mediates access to all GPU sensi-
tive objects that reveal or modify SecApps’s overlayed dis-
play (Sections 4.3 and 4.4). The access mediation mecha-
nism uses the CPU’s protection rings to prevent direct Se-
cApps access to GPU objects and uses the privileged mHV
interfaces to program TD add-on to intercept sensitive ac-
cesses to GPU objects by untrusted OS/Apps.
The third component emulates access to security-sensitive
objects to assure object-code compatibility with untrusted
OS/Apps. shadowing sensitive GPU objects (Section 4.5).
To emulate untrusted accesses, this component either con-
ﬁgures CPU/GPU to operate on the shadow GPU objects
or simulates object accesses.
TD add-on. The trusted display (TD) add-on supports
the TDK in the mediation of security-sensitive accesses to
Micro-Hypervisor App 1 SecApp 2  Commodity OS (unmodified) Privileged Interface Hardware Software   SecApp 1 Apps Apps Legend: Sensitive Access Insensitive Access Unprivileged Interface GPU Sensitive Objects Insensitive Objects Trusted Display Kernel Access Mediation Access Emulation TD add-on Screen  Overlay CPU Inst. Emulator Fast Comm.  Trapper 995GPU address space separation, and GPU command protec-
tion, as described in Section 3.4.1.
GPU Address Space Separation. GPU address space
separation mediates instructions accesses by limiting their
scope to GPU local page tables. Nevertheless, GGTT may
also contain mappings to security-insensitive objects to be
used by GPU instructions. To satisfy these requirements,
the TDK shadows GGTT to separate GPU address space as
follows:
(1) TDK shadows GGTT in a GPU local page table (GGTT’),
and updates GGTT’ whenever GGTT is modiﬁed.
(2) TDK veriﬁes the access invariants for GGTT’.
(3) TDK forces GPU instructions execution to use GGTT’
for all GPU engines except the display engine, which
uses GGTT.
Note that in Step 3, the TDK forces GPU instructions to
use GGTT’ instead of GGTT in two steps. First, the TDK
wraps related GPU commands into a batch buﬀer. Second,
it sets the batch buﬀer to use GGTT’. As a result, GPU
instructions preserve both their original functionality and
security of the trusted display.
Forcing GPU instructions to use a new GPU local page
table poses some implementation challenges. For example,
it is possible that no spare slot exists to load GGTT’. Our
solution is to randomly kick out a GPU local page table,
switch to GGTT’ to execute the GPU instructions, and then
switch back the original GPU local page table after the GPU
instruction execution ﬁnishes. In principle, it is also possi-
ble that a single GPU command group uses all GPU page
tables. Although we have never encountered this situation
in normal GPU driver operation [2, 6, 4], our TDK splits
the command group into smaller pieces and reuses the solu-
tion to the ﬁrst challenge described above. The TDK also
pauses the veriﬁcation of new GPU command submission in
this case and resumes when this command group is executed.
GPU Command Protection. The TDK also protects
GPU command buﬀers from malicious GPU instructions. As
GPU page tables support read-write access control in many
modern GPUs (e.g. Nvidia GPUs [4], AMD GPUs [6] and
recent Intel GPUs [23, 2]), the TDK can protect GPU com-
mand buﬀers by mapping their read-only accesses to GPU
local page tables. However, some Intel GPUs provide dif-
ferent hardware protection mechanisms. For example, GPU
privilege protection disallows execution of security sensitive
GPU commands from the batch buﬀers provided by applica-
tions. Using this feature, the TDK can enforce the security
invariants for GPU commands by de-privileging these com-
mands from the batch-buﬀer accesses mapped in GPU local
page tables.
4.4 Access Mediation Policy
The access mediation policy of the TDK enforces the secu-
rity invariants for sensitive GPU objects references; viz., Sec-
tion 3.4.2. The TDK identiﬁes a GPU object by its address
and veriﬁes the validity of the object access by enforcing
the corresponding invariants. The TDK enhances the per-
formance of GPU command mediation without sacriﬁcing
trusted-display security [46]. In particular, the TDK mon-
itors speciﬁc GPU conﬁguration registers and performs the
Table 2: Trusted Display Kernel Minimization. Leg-
end: Bold letters denote object categories that con-
tribute a signiﬁcant number of GPU objects. (*) de-
notes categories where objects need mediation. The
underline denotes mediated objects that do not re-
quire function emulation.
Examples
Shadow
Mediation Func.
Virt. TDK Emu.
Yes Yes Yes
Framebuﬀer
Other VM’s
GPU Data Yes No No
Performance
No
Yes No
GPU Memory
Buﬀer Base
Category
Display
Engine Data
Processing
Engine Data
Data of
Other Engines
Conﬁg
Registers
Used By TD
GPU
Data
GPU
Conﬁgu-
ration
Other Access
Sensitive
GPU
Page
Tables
GPU
Comm-
ands
Others
Global
Page Table