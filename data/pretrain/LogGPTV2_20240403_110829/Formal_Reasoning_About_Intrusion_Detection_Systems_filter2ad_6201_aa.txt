title:Formal Reasoning About Intrusion Detection Systems
author:Tao Song and
Calvin Ko and
Jim Alves-Foss and
Cui Zhang and
Karl N. Levitt
Formal Reasoning
About Intrusion Detection Systems
Tao Song1, Calvin Ko2, Jim Alves-Foss3, Cui Zhang4, and Karl Levitt1
1 Computer Security Laboratory, University of California, Davis
{tsong,knlevitt}@ucdavis.edu
2 NAI Labs, Network Associates Inc., Santa Clara, CA
3 Center for secure and dependable system, University of Idaho
calvin PI:EMAIL
4 Computer Science Department, California State University, Sacramento
PI:EMAIL
PI:EMAIL
Abstract. We present a formal framework for the analysis of intrusion
detection systems (IDS) that employ declarative rules for attack recog-
nition, e.g. speciﬁcation-based intrusion detection. Our approach allows
reasoning about the eﬀectiveness of an IDS. A formal framework is built
with the theorem prover ACL2 to analyze and improve detection rules
of IDSs. SHIM (System Health and Intrusion Monitoring) is used as an
exemplary speciﬁcation-based IDS to validate our approach. We have
formalized all speciﬁcations of a host-based IDS in SHIM which together
with a trusted ﬁle policy enabled us to reason about the soundness and
completeness of the speciﬁcations by proving that the speciﬁcations sat-
isfy the policy under various assumptions. These assumptions are prop-
erties of the system that are not checked by the IDS. Analysis of these
assumptions shows the beneﬁcial role of SHIM in improving the security
of the system. The formal framework and analysis methodology will pro-
vide a scientiﬁc basis for one to argue that an IDS can detect known and
unknown attacks by arguing that the IDS detects all attacks that would
violate a policy.
Keywords: Intrusion detection, veriﬁcation, formal method, security
policy
1 Introduction
Intrusion detection is an eﬀective technology to supplement traditional security
mechanisms, such as access control, to improve the security of computer systems.
To date, over 100 commercial and research products have been developed and
deployed on operational computer systems and networks. While IDS can improve
the security of a system, it is diﬃcult to evaluate and predict the eﬀectiveness
of an IDS with respect to the primary objective users have for the deployment
of such a system: the ability to detect large classes of attacks (including variants
of known attacks and unknown attacks) with a low false alarm rate. In addition,
E. Jonsson et al. (Eds.): RAID 2004, LNCS 3224, pp. 278–295, 2004.
c(cid:1) Springer-Verlag Berlin Heidelberg 2004
Formal Reasoning About Intrusion Detection Systems
279
it is diﬃcult to assess, in a scientiﬁc manner, the security posture of a system
with an IDS deployed. So far, experimental evaluation and testing have been the
only approaches that have been attempted. There is a critical need to establish
a scientiﬁc foundation for evaluating and analyzing the eﬀectiveness of IDSs.
This paper presents an approach to formal analysis of IDSs. Our approach
is primarily applicable to IDSs that employ declarative rules for intrusion detec-
tion, including signature-based detection and speciﬁcation-based detection [16]
[18] [3] [8] [4] [5] [22]. The former matches the current system or network activ-
ities against a set of predeﬁned attack signatures that represent known attacks
and potential intrusive activities. The latter recognizes attacks as activities of
critical objects that violate their speciﬁcations. Testing is currently being used to
evaluate the eﬀectiveness of the rules. Nevertheless, testing is usually performed
according to the tester’s understanding of known attacks. It is diﬃcult to verify
the eﬀectiveness of an IDS in detecting unknown attacks.
Our approach is inspired by the signiﬁcant body of formal methods research
in designing and building trusted computer systems. Brieﬂy, the process of de-
signing and building a trusted system involves the development of a security
model, which consists of a speciﬁcation of a security policy (the security re-
quirements or what is meant by security) and an abstract behavioral model of
the system. Usually, the security policy can be stated as a mapping from sys-
tem states to authorized (secure) and unauthorized (insecure) states [14]or as a
property (often stated as an invariant) of the system (e.g., noninterference). The
model is an abstraction of the actual system that provides a high level descrip-
tion of the major entities of the system and operations on those entities. There
may be layers of abstractions within the model, each a reﬁnement of the higher
level abstraction. Given the security policy and model, one should be able to
prove that the model satisﬁes the security policy, assuming some restrictions on
the state transition functions (e.g., the classical Bell and LaPadula model).
Our framework consists of an abstract behavioral model, speciﬁcations of
high-level security properties, and speciﬁcations of intrusion-detection rules. The
abstract behavioral model captures the real behavior of the targeted system. In
addition to common abstractions such as access control lists, processes, and
ﬁles, the abstract behavioral model will capture the auditing capabilities of the
targeted system(i.e., given an operation, it will be decided whether or not an
audit event will be generated and what information about the operation will be
visible). The speciﬁcations of intrusion-detection rules describe formally when
the rules will produce IDS alarms given the sequence of audit events generated.
Intrusion detection rules can be viewed as constraints on the audit trace of the
system (e.g., the sequence of observable state changes).
We employ the formal framework to analyze the properties of SHIM, a
speciﬁcation-based IDS that focuses on the behaviors of privileged programs.
In SHIM, speciﬁcations are developed to constrain the behaviors of privileged
programs to the least privilege that is necessary for the functionality of the
program.
ACL2 [15] is employed to describe an abstract system model that can be
used as the basis for diﬀerent IDSs. A hierarchical model is built to generalize
280
Tao Song et al.
the veriﬁcation of speciﬁcations. As an example, we formalize speciﬁcations of
SHIM and a security policy (e.g, a trusted ﬁle access policy). And we prove that
these speciﬁcations can satisfy the policy with various assumptions. Again, the
assumptions represent activities that the SHIM IDS does not monitor, although
it could if the IDS designer believes an attacker could cause the assumptions to
be violated.
The rest of the paper is structured as follows: Section 2 introduces and ana-
lyzes intrusion detection rules, primarily used in a speciﬁcation-based IDS such
as SHIM. Section 3 describes a hierarchical framework of veriﬁcation. Section
4 shows an example of our veriﬁcation approach. We formalize speciﬁcations
of SHIM and prove that these speciﬁcations together with assumptions satisfy
trusted ﬁle access policies. In Section 5 we discuss our results and the limitations
of the veriﬁcation method we developed. We conclude and provide recommen-
dations for future work in Section 6.
2 Analysis of Intrusion-Detection Rules
Development of correct intrusion-detection rules is a very diﬃcult and error-
prone task: it involves extensive knowledge engineering on attacks and most
components of the system; it requires a deep and correct understanding of most
of the components in a system and how they work together; it requires the rule
developers to be cautious and careful to avoid mistakes and gaps in coverage.
Often, crafting of intrusion-detection rules is performed by human security ex-
perts based on their knowledge and insights on attacks and security aspects of a
system. Therefore, it is very diﬃcult to assess whether a given set of intrusion-
detection rules is correct (they detect the attacks). Furthermore, the complexity
and subtlety of systems and attacks make it a challenging task to judge whether
changes to the rules actually improve or degrade their eﬃcacy with respect to
their ability to detect new attacks.
We discuss the subtleties involved in writing valid behavior speciﬁcations for a
program. Traditionally, in speciﬁcation-based IDSs, a valid behavior speciﬁcation
for a program declares what operations and system calls are allowed for the
program. Whether an operation is allowed or not depends on the attributes of
the process and the object reference, and attributes of the system calls. In SHIM,
a speciﬁcation for a program is a list of rules describing all the operations valid
for the program. For example, the following rule in the line printer daemon (lpd)
speciﬁcation allows the program to open any ﬁle in the /var/spool/hp directory
to read and write.
(open, $f lag == O RDW R&&InDir($F.path, “/var/spool/hp”))
The expression formally describes a set of valid operations: any open() system
call with the ﬂag argument equal to O RDWR (open the ﬁle for read and write)
with an absolute path name subordinate to the /var/spool/hp directory.
One way to develop a speciﬁcation for a program is to ﬁrst identify what
operations and accesses the program needs to support its functionality. Based on
Formal Reasoning About Intrusion Detection Systems
281
an examination of the code or its behaviors, one writes rules in the speciﬁcation
to cover the valid operations of the program. The “draft” speciﬁcation will be
tested against the actual execution of the program. Often, the draft speciﬁcation,
when used to monitor the program execution, will produce false positives (i.e.,
valid operations performed by the program reported as erroneous because they
are not included in the speciﬁcation). Then, one augments the speciﬁcation to
include rules to cover these operations. In general, one needs to be very careful
in writing the speciﬁcation for a program to avoid errors.
For example, given the above rule, if /var/spool/hp somehow is writable by
attackers, they can create a link from /var/spool/hp/ﬁle to the /etc/passwd ﬁle.
A speciﬁcation-based IDS with this rule in the speciﬁcation of lpd will permit
this operation and the attack will go undetected. Therefore, we augment the rule
to check the number of links to the ﬁle and to generate a warning if the number
of links to the ﬁle is greater than one,thus preventing this attack from using hard
links. This also works for soft links in our system because the audit record for an
open() operation will provide the absolute pathname of the ﬁle being opened, if
the path is a symbolic link. Based on our experience, writing speciﬁcations for
a program is subtle and tricky, thus demanding an approach to rule validation.
Little research has been done on analyzing intrusion-detection rules. Diﬀerent
approaches have been taken to specify and analyze the intrusion signatures and
detection rules [12] [19] [17], primarily for signature-based IDSs. A declarative
language, MuSigs, is proposed in [12] to describe the known attacks. Temporal
logic formulas with variables are used to express speciﬁcations of attack scenarios
[19]. Pouzol and Ducasse formally speciﬁed attack signatures and proved the
soundness and completeness of their detection rules. In addition, data mining
techniques and other AI techniques such as neutral network are used to reﬁne
and improve intrusion signatures [6] [13] [21].
Our approach is diﬀerent from these approaches in various ways. First of
all, we developed a framework to evaluate detection rules of diﬀerent IDSs. We
formalized security-relevant entities of an UNIX-like system as well as access
logs. Detection rules including intrusion signatures and speciﬁcations can be
formalized and reasoned about in the framework.
Second, we proposed a method to verify security properties of IDSs together
with assumptions, with respect to security policies. Security polices are always
satisﬁed with suﬃciently strong assumptions. So the key is to identify assump-
tions that are strong enough but not too strong. An attack can violate a security
policy by breaking its assumptions. So it is possible to verify the improvement
of security by proving the weakening of assumptions. For example, assuming a
policy P is satisﬁed with assumption A and with the deployment of the mecha-
nism m , and P is satisﬁed with assumption B where A implies B, then we can
say m improves the security because attacks violating assumption B will also
violate A, but attacks that violate assumption A may not violate B .
As our preliminary results, we have veriﬁed a signiﬁcant property of speciﬁ-
cation-based IDSs: the capability to detect unknown attacks. In our veriﬁcation,
the speciﬁcations of SHIM satisfy a passwd ﬁle access policy with assumptions.
282
Tao Song et al.
This means any attacks, including known attacks and unknown attacks, that
violate the policy can be detected by SHIM.
3 Framework
We present a framework for analyzing detection rules in IDSs. Our goal is to
answer the question of whether a given set of intrusion detection rules can satisfy
the security requirements of the system. Security polices and properties of attacks
are used to describe the security requirements of the system. The satisfaction of
the security requirements determines whether violations of security policies or
instances of attacks can be detected by the detection rules.
3.1 Hierarchical Framework of Veriﬁcation
Figure 1 depicts the veriﬁcation model, which consists of an abstract system
model, an auditing model, detection rules, assumptions, and security require-
ments. The basis of the model is the abstract system model (S) in which security-