输入后继续执行
然后又到了一处int3，并发现这里的数据0xA8在调试器处理函数中需要让Eip + 9，我们计算后重新修改EIP
###  加密函数
发现直接跳到下面的函数执行，我们查看伪代码发现伪代码非常的难看，没有识别出各个变量的信息
这里就要用到另一个技巧了，我们需要修补一下这里开头存栈的信息（实际上开头的信息是有的，但是被垃圾代码干扰了）
用Keypatch添加信息
    push ebp
    mov ebp,esp
虽然因为空间的原因覆盖了一行汇编代码，但是无所谓，我们这样修改只是为了伪代码能够识别出变量
接下来的伪代码就有变量信息了，接着我们修改一些能够直接看出来的变量类型，就可以得到一份比较舒服的伪代码了
我们接下来逐个分析
####  第一部分
把Str的信息都赋值给input，其中Str就是我们输入的flag信息，然后通过循环把input的内容都转换为int数据储存给input_Int，大家可以眼熟一下这个模块，所干的事情就是把字符四字节的储存。
####  第二部分
把之前处理的input_int传入到这个函数中进行加密，并且把加密后的结果又转回字符形式
这里就是另一个坑点了，可以发现这个函数中存在一个int3断点，而其对应的内容是0xB2，按照之前所说的调试处理的逻辑，我们要替换ESP中的内容，并且让EIP
+ 1，查看汇编不难发现，他替换的内容就正好是传入push的一个值 **8E32CDAAh** 并且把他替换成 **0x73FF8CA6**
，这里我刚开始因为没有注意，死活解不出来。
这里因为 **inc ebp** 的原因导致IDA伪代码识别错误，而这行汇编是并不会执行的，所以我们把他nop掉之后再看伪代码。
我们这里要替换的就是 **8E32CDAAh** ，否则加密后的结果和实际运行的不一致
####  第三部分
通过gen函数生成一些int的内容，具体啥过程并不重要，因为这些字符的内容都是固定的，并且把结果都放在 **gen_data** 中，然后又放到
**gen_data_char** 中
####  第四部分
最后加密一次后，与内部储存字符串比对，如果一致就输出 **right**.
这里不知道为啥，明明只要比对32字节，数组却开到了36字节，并且计算过程也是循环了五次。
**_byteswap_ulong** 函数实际上就是把char的内容转换成int，感觉挺无语了，前面刚刚转成char，现在又要转回int。
接下来通过一个for循环来对内容加密32次，加密之后又储存回去，这里 **gen_data** 的数据都是固定的，所以我们可以直接当做常数来计算
**通过分析，发现这个循环的内容是可以完全逆向的，我们只需要循环32次来反向推，就可以得到原文的内容**
总感觉有点奇怪，感觉有点像是某种加密算法，但是我也没看出来，就只能硬推了。
而且感觉他这个几个char和int的变换，总觉得是为了套函数模块来写的。
###  解密程序
    #include 
    #include 
    #include 
    #include "defs.h"
    unsigned char data[32] =
    {
        0xED, 0xE9, 0x8B, 0x3B, 0xD2, 0x85, 0xE7, 0xEB,
        0x51, 0x16, 0x50, 0x7A, 0xB1, 0xDC, 0x5D, 0x09,
        0x45, 0xAE, 0xB9, 0x15, 0x4D, 0x8D, 0xFF, 0x50,
        0xDE, 0xE0, 0xBC, 0x8B, 0x9B, 0xBC, 0xFE, 0xE1
    };
    int __cdecl encode_run(unsigned int* a1)
    {
        int i; // [esp+D1h] [ebp-13h]
        unsigned int v3; // [esp+DCh] [ebp-8h]
        v3 = 0x8E32CDAA;
        for (i = 0; i = 0; i--)
        {
            v3 += 0x50FFE544;
            a1[i] ^= v3;
        }
        return 0;
    }
    int decode_run3(unsigned int* Str, unsigned int cnt)
    {
        for (int i = 0; i > 5)) ^ (t + a) ^ (0x87EC6B60 + 16 * a);
                a -= (0xAC1DDCA8 + (b >> 5)) ^ (t + b) ^ (0x82ABA3FE + 16 * b);
                t -= 0x9E3779B9;
            }
            Str[i * 2] = a;
            Str[i * 2 + 1] = b;
        }
        return 0;
    }
    int __cdecl encode_run3(unsigned __int8* Str, unsigned int cnt)
    {
        size_t k; // [esp+D0h] [ebp-8Ch]
        unsigned int v5; // [esp+DCh] [ebp-80h]
        unsigned int v6; // [esp+E8h] [ebp-74h]
        unsigned int v7; // [esp+F4h] [ebp-68h]
        unsigned int v8; // [esp+100h] [ebp-5Ch]
        unsigned int j; // [esp+124h] [ebp-38h]
        unsigned int i; // [esp+130h] [ebp-2Ch]
        int v11; // [esp+13Ch] [ebp-20h]
        unsigned int v12; // [esp+148h] [ebp-14h]
        unsigned int v13; // [esp+154h] [ebp-8h]
        for (i = 0; i > 5)) ^ (v11 + v12) ^ (0x82ABA3FE + 16 * v12);
                v12 += (0xA2394568 + (v13 >> 5)) ^ (v11 + v13) ^ (0x87EC6B60 + 16 * v13);
            }
            Str[8 * i] = HIBYTE(v13);
            Str[8 * i + 1] = BYTE2(v13);
            Str[8 * i + 2] = BYTE1(v13);
            Str[8 * i + 3] = v13;
            Str[8 * i + 4] = HIBYTE(v12);
            Str[8 * i + 5] = BYTE2(v12);
            Str[8 * i + 6] = BYTE1(v12);
            Str[8 * i + 7] = v12;
        }
        return 0;
    }
    void encode_all(char* a)
    {
        unsigned char s[36] = { 0 };
        unsigned int data[8] = { 0 }, t1[8] = { 0 };
        for (int i = 0; i > 24;
            s[4 * i + 1] = (data[i] & 0xFF0000) >> 16;
            s[4 * i + 2] = (data[i] & 0xFF00) >> 8;
            s[4 * i + 3] = (data[i]);
        }
        encode_run3(s, 4);
        for (int i = 0; i > (24 - 8 * i);
        for (int i = 0; i < 4; i++) data ^= a2[4 - i - 1] << (24 - 8 * i);
        return data;
    }
    int main()
    {
        //char s[33] = {0};
        //scanf("%s", s);
        //encode_all(s);
        unsigned int d[8];
        for (int i = 0; i < 8; i++)  d[i] = rev(((unsigned int*)data)[i]);
        decode_run3(d, 4);
        decode_run(d);
        for (int i = 0; i < 8; i++) d[i] = rev(d[i]);
        for (int i = 0; i < 32; i++)
            printf("%c", ((char*)d)[i]);
        return 0;
    }