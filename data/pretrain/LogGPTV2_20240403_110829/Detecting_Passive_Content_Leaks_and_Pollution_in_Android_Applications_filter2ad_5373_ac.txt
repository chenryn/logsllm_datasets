### Table 1: Overall Detection Results in Our Dataset

In some cases, our system requires manual confirmation to verify the results. Fortunately, the generated execution paths greatly facilitate this process. Our experience shows that a single co-author was able to classify all 1,456 vulnerable apps in less than three days. It is important to note that manual efforts are primarily needed to classify the types of private information that might be leaked or polluted. The selection and confirmation of vulnerable apps remain largely an automated process. Additionally, intermediate results, such as function call graphs and control flow graphs (CFGs), can significantly reduce the classification overhead.

## 5. Evaluation

To assess the threat level posed by these two vulnerabilities, we collected 62,519 free apps from various Android markets in February 2012. Of these, 35,047 were downloaded from Google Play, and the remaining 27,472 were fetched from ten other popular third-party markets. As described in Section 3, our system first identifies apps with exported content provider interfaces as candidates. In our dataset, our system reported 3,018 (or 4.8%) candidate apps (Table 1). This reduction from the initial 62,519 apps to 3,018 candidate apps helps exclude unrelated ones for processing. We also found that among the 62,519 apps, 4,994 have content providers, but only 1,976 (39.6%) explicitly protect them either by not exporting them or by declaring dangerous permissions. This indicates that many developers leave interfaces open by default, often without realizing it.

For each candidate app, our system analyzes whether it is indeed vulnerable. In total, our system detected 1,279 and 871 apps that suffer from passive content leak and content pollution vulnerabilities, respectively. Among these, 435 and 398 apps were downloaded from Google Play. As mentioned earlier, some of these apps are popular, with more than 10 million installs from the official Google Play market.

### Manual Analysis of Unconfirmed Apps

Some apps were not automatically confirmed by our system. Upon manual analysis, we discovered the following reasons:

1. **Internal Logic Dependency**: In some apps, the return value of start functions such as `ContentProvider.query()` depends on the internal logic of the app. If certain internal logic is not satisfied, the start function will return an unexpected value, leading our system to mark it as not vulnerable. For example, the `ContentProvider.query()` function of MiTalk Messenger (version: 2.1.365/365) checks for a registered user account. If no account is registered, it returns null. We manually added these apps back to the list of vulnerable apps.

2. **Access Policy Enforcement**: Some apps enforce an access policy in the start functions and deny requests from our test app. However, due to improper enforcement, the access policy may be bypassed. For instance, QQ Browser (version: 3.0/35) checks the package name of the calling app in its `ContentProvider.query()` function. If the package name is in a predefined list, it honors the request. After analyzing the app and changing the package name of our test app, we could successfully retrieve data.

3. **Signature Checks**: Other apps check the signatures of calling apps. In this case, they are not vulnerable because the signature used to sign the app is unique and not leaked to others.

4. **Development Issues**: Some apps are not properly developed and throw exceptions when running. For example, the authority attribute specified in the manifest file may differ from the one used in `URIMatcher`, causing the Android runtime to fail to find the corresponding content provider.

5. **Non-Serializable Objects**: Some apps use specific Android classes that cannot be returned to another process (or app). For example, some apps return a `CursorWrapper` to the `ContentProvider.query()` function, which cannot be passed to another app, resulting in an `UnsupportedOperationException` at runtime.

### Reporting Vulnerabilities

After identifying these vulnerable apps, starting from February 2012, we spent considerable time reporting them to the corresponding developers. Some developers fixed the vulnerabilities and released patched versions quickly. For example, the developers of Maxthon Mobile Web Browser responded within less than one day and released a patched version in two weeks. The developers of Match.com - #1 Dating Site acknowledged our reports and kept us updated about their progress. Some developers did not respond but fixed the bugs silently, while others ignored our reports entirely.

### 5.1 Passive Content Leaks

In our dataset, we detected 1,279 apps that are vulnerable to passive content leaks. We organized these into several main categories, summarized in Table 2. The table shows the number of vulnerable apps in each category and provides detailed information about representative apps available on Google Play.

| Category | # of Apps | App Name | Package Name | Version | # of Installs |
|----------|-----------|----------|--------------|---------|---------------|
| SMS messages | 268 | Message GOWidget | com.gau.go.launcherex.gowidget.smswidget | 2.3/17 | 1,000,000 - 5,000,000 |
| Contacts | 128 | Shady SMS 3.0 PAYG | com.project.memoryerrorthreepayg | 2.06/226 | 500,000 - 1,000,000 |
| Private information in IM apps | 121 | 360 Kouxin | com.qihoo360.kouxin | 2.1.0c/67 | 100,000 - 500,000 |
| User credentials | 80 | GO FBWidget | com.gau.go.launcherex.gowidget.fbwidget | 2.0.76/2000076 | 50,000 - 100,000 |
| Browser history or bookmarks | 70 | Dolphin Browser HD | mobi.mgeek.TunnyBrowser | 7.3.0/116 | 10,000,000 - 50,000,000 |
| Call logs | 61 | Mobile Security Personal Ed. | com.trendmicro.tmmspersonal | 2.1/31 | 50,000 - 100,000 |
| Private information in social network apps | 27 | Sina Weibo | com.sina.weibo | 2.1/14 | 1,000,000 - 5,000,000 |

Note: In this paper, we use `versionName` and `versionCode` in the manifest file to uniquely specify an app. For example, the `versionName` and `versionCode` of MiTalk Messenger are 2.1.365 and 365, respectively.