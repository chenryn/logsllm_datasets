fluffy.Name = 'Fluffy'
class Cat: declares the start of a class.
1. [Property(Name)] declares a property around _name. You named the property "Name".
_name as string declares a field of Cat that is a string called _name.
2.
1.
2. fluffy = Cat() declares an instance of Cat.
fluffy.Name = 'Fluffy' accesses the property Name of Cat and sets its value to 'Fluffy'. This will cause Name to 
set _name to 'Fluffy'.
3.
Fields are not set directly because of security.
Part 08 - Classes
http://boo.codehaus.org/Part+08+-+Classes?print=1
2 of 4
5/27/2008 9:27 PM
Recommendation
Name all your properties using PascalCase, just like classes.
Name all your fields using _underscoredCamelCase, which is similar to PascalCase, only it is prefixed with an 
underscore and the first letter is lowercase.
There are two other types of properties, a getter and a setter. Technically, a regular property is just the combination 
of the two.
getter/setter example
class Cat:
    [Getter(Name)]
    _name = 'Meowster'
    [Setter(FavoriteFood)]
    _favoriteFood as string
fluffy = Cat()
print fluffy.Name
fluffy.FavoriteFood = 'Broccoli'
Output
Meowster
If you were to try to assign a value to fluffy.Name or retrieve a value from fluffy.FavoriteFood, an error would have 
occurred, because the code just does not exist for you to do that.
Using the attributes Property, Getter, and Setter are very handy, but it's actually Boo's shortened version of what is 
really happening. Here's an example of the full code.
explicit property example
class Cat:
    Name as string:
        get:
            return _name
        set:
            _name = value
    _name as string
fluffy = Cat()
fluffy.Name = 'Fluffy'
Because fields are visible inside their own class, you can see that Name is just a wrapper around _name. Using this 
expanded syntax is handy if you want to do extra verification or not have it wrap exactly around its field, maybe by 
trimming whitespace or something like that first.
value is a special keyword for the setter statement, that contains the value to be assigned.
Property Pre-condition
It is also possible to define a precondition that must be met before setting a value directly through the Property 
shorthand.
Part 08 - Classes
http://boo.codehaus.org/Part+08+-+Classes?print=1
3 of 4
5/27/2008 9:27 PM
property example
class Cat:
    [Property(Name, Name is not null)]
    _name as string
fluffy = Cat()
fluffy.Name = null # will raise an ArgumentException
Class Modifiers
Modifier 
Description 
public
Creates a normal, public class, fully accessible to all other types. 
protected
Creates a class that is only accessible by its containing class (the class this was declared in) and any 
inheriting classes. 
internal
A class only accessible by the assembly it was declared in. 
protected 
internal
Combination of protected and internal. 
private
Creates a class that is only accessible by its containing class (the class this was declared in.) 
abstract
Creates a class that cannot be instanced. This is designed to be a base class for others. 
final
Creates a class that cannot be inherited from. 
Recommendation
Never use the public Class Modifier. It is assumed to be public if you specify no modifier.
class modifier example
abstract class Cat:
    [Property(Name)]
    _name as string
The abstract keyword is the Class Modifier.
Inheritance
Definition: Inheritance
A way to form new classes (instances of which will be objects) using pre-defined objects or classes where new 
ones simply take over old ones's implemetions and characterstics. It is intended to help reuse of existing code 
with little or no modification.
Inheritance is very simple in Boo.
inheritance example
class Cat(Feline):
    [Property(Name)]
    _name as string
class Feline:
    [Property(Weight)]
    _weight as single //In Kilograms
This causes Cat to inherit from Feline. This gives the members Weight and _weight to Cat, even though they were not 
declared in Cat itself.
You can also have more than one class inherit from the same class, which promotes code reuse.
More about inheritance is covered in Part 10 - Polymorphism, or Inherited Methods
Part 08 - Classes
http://boo.codehaus.org/Part+08+-+Classes?print=1
4 of 4
5/27/2008 9:27 PM
Classes can inherit from one or zero other classes and any number of interfaces.
To inherit from more than one interface, you would use the notation class Child(IBaseOne, IBaseTwo, IBaseThree):
Interfaces
Definition: Interface
An interface defines a list of methods that enables a class to implement the interface itself.
Interfaces allow you to set up an API (Application Programming Interface) for classes to base themselves off of.
No implementation of code is put inside interfaces, that is up to the classes.
Interfaces can inherit from any number of other interfaces. They cannot inherit from any classes.
interface example
interface IFeline:
    def Roar()
    Name:
        get
        set
This defines IFeline having one method, Roar, and one property, Name. Properties must be explicitly declared in 
interfaces. Methods are explained in Part 09 - Methods.
Recommendation
Name your interfaces using PascalCase prefixed with the letter I, such as IFeline.
Difference between Value and Reference Types
There are two types in the Boo/.NET world: Value and Reference types. All classes form Reference types. Numbers and
such as was discussed in Part 02 - Variables#List of Value Types are value types.
Definition: null
A keyword used to specify an undefined value for reference variables.
Value types can never be set to null, they will always have a default value. Numbers default value will generally be 0.
Exercises
1. Create a class that inherits from more than one interface.
See what happens if you try to inherit from more than one class.
2.
Go on to Part 09 - Methods
Part 09 - Methods
http://boo.codehaus.org/Part+09+-+Methods?print=1
1 of 3
5/27/2008 9:30 PM
Part 09 - Methods
Part 09 - Methods
Definition: Method
A function exclusively associated with a class
Defining a Method
Methods must be defined in classes. They are declared just like functions are.
arguments example
class Cat:
    def Roar():
        pring "Meow!"
cat = Cat()
cat.Roar()
Output
Meow!
An object of Cat must be instanced, then its methods can be called.
Recommendation
Names of methods should always be verbs.
They should also be declared in PascalCase.
Class Constructor and Destructor
Constructors and Destructors are special methods that are called on when a class is being instanced or destroyed, 
respectively.
Both are optional.
arguments example
class Cat:
    def constructor():
        _name = 'Whiskers'
    def destructor():
        print "${_name} is no more... RIP"
    [Getter(Name)]
    _name as string
cat = Cat()
print cat.Name
Output
Whiskers
Whiskers is no more... RIP
If a constructor has arguments, then they must be supplied when instancing. Destructors cannot have arguments.
arguments example
class Cat:
Part 09 - Methods
http://boo.codehaus.org/Part+09+-+Methods?print=1
2 of 3
5/27/2008 9:30 PM
    def constructor(name as string):
        _name = name
    [Getter(Name)]
    _name as string
cat = Cat("Buttons")
print cat.Name
Output
Buttons
Be Careful
Do not depend on the destructor to always be called.
Method Modifiers
Modifier 
Description 
abstract
an abstract method has no implementation, which requires that an inheriting class implements it. 
static
a static method is common to the entire class, which means that it can be called without ownership of a 
single instance of the class
virtual
See Part 10 - Polymorphism, or Inherited Methods
override
See Part 10 - Polymorphism, or Inherited Methods
All these modifiers also apply to properties (If they are explicitly declared).
static can also apply to fields.
static example
class Animal:
    def constructor():
        _currentId += 1
        _id = currentId
    [Getter(Id)]
    _id as int
    static _currentId = 0
This will cause the Id to increase whenever an Animal is instanced, giving each Animal their own, unique Id.
All the methods defined in an interface are automatically declared abstract.
Abstract methods in a class must have a blank code block in its declaration.
abstract example
class Feline:
    abstract def Eat():
        pass
interface IFeline:
    def Eat()
Both declare roughly the same thing.
Member Visibility
Visibility Level 
Description 
public
Member is fully accessible to all types. 
protected
Member is only visible to this class and inheriting classes. 
Part 09 - Methods
http://boo.codehaus.org/Part+09+-+Methods?print=1
3 of 3
5/27/2008 9:30 PM
private
Member is only visible to this class. 
Important Information
All fields are by default protected. All methods, properties, and events are by default public.
Recommendation
Fields are typically either protected or private. Usually instead of making a public field, you might make a public
property that wraps access to the field instead. This allows subclasses to possibly override behavior.
Methods can have any visibility.
Properties can have any visibility, and typically have both a getter and a setter, or only a getter. Instead of a set
only property, consider using a method instead (like "SetSomeValue(val as int)").
Recommendation
It is recommended you prefix field names with an underscore if it is a private field.
Declaring Properties in the Constructor
One very nice feature that boo offers is being able to declare the values of properties while they are being instanced.
abstract example
class Box:
    def constructor():
        pass
    [Property(Value)]
    _value as object
box = Box(Value: 42)
print box.Value
Output
42
The constructor didn't take any arguments, yet the Value: 42 bit declared Value to be 42, all in a tighly compact, but 
highly readable space.
Exercises
Create two classes, Predator and Prey. To the Predator class, add an Eat method that eats the Prey. Do not let 
the Prey be eaten twice.
1.
Go on to Part 10 - Polymorphism, or Inherited Methods
Part 10 - Polymorphism, or Inherited Methods
http://boo.codehaus.org/Part+10+-+Polymorphism,+or+Inherited+Meth...
1 of 3
5/27/2008 9:31 PM
Part 10 - Polymorphism, or Inherited Methods
Part 10 - Polymorphism, or Inherited Methods
Definition: Polymorphism
The ability for a new object to implement the base functionality of a parent object in a new way.
Two keywords are used to make Polymorphism happen: virtual and override.
You need to describe a method as virtual if you want the ability to override its capabilities.
Polymorphism with Rectangle and Square
class Rectangle:
    def constructor(width as single, height as single):
        _width = width
        _height = height
    virtual def GetArea():
        return _width * _height
    _width as single
    _height as single
class Square(Rectangle):
    def constructor(width as single):
        _width = width
    override def GetArea():
        return _width * _width
r = Rectangle(4.0, 6.0)
s = Square(5.0)
print r.GetArea()
print s.GetArea()
print cast(Rectangle, s).GetArea()
Output
24.0
25.0
25.0
Even when casted to a Rectangle, s's .GetArea() functioned like if it were a Square.
An easier example to see is this:
Simplified Polymorphism Example
class Base:
    virtual def Execute():
        print 'From Base'
class Derived(Thing):
    override def Execute():
        print 'From Derived'
b = Base()
d = Derived()
print b.Execute()
print d.Execute()
print cast(Base, d).Execute()
Part 10 - Polymorphism, or Inherited Methods
http://boo.codehaus.org/Part+10+-+Polymorphism,+or+Inherited+Meth...
2 of 3
5/27/2008 9:31 PM
Output
From Base
From Derived
From Derived
If I were to leave out the virtual and {{override} keywords,
Output w/o virtual
From Base
From Derived
From Base
This happens because unless the base method is virtual or abstract, the derived method cannot be declared as 
override.
Recommendation
Although you do not have to explicitly declare a method as override when inheriting from a virtual method, you 
should anyway, in case the signatures of the virtual and overriding methods do not match.
In order to override, the base function must be declared as virtual or abstract, have the same return type, and accept 
the same arguments.
Polymorphism is very handy when dealing with multiple types derived from the same base.
Another Polymorphism Example
interface IAnimal:
    def MakeNoise()
class Dog(IAnimal):
    def MakeNoise():
        print 'Woof'
class Cat(IAnimal):
    def MakeNoise():
        print 'Meow'
class Hippo(IAnimal):
    def MakeNoise():
        print '*Noise of a Hippo*'
list = []
list.Add(Dog())
list.Add(Cat())
list.Add(Hippo())
for animal as IAnimal in list:
    list.MakeNoise()
Output w/o virtual
Woof
Meow
*Noise of a Hippo*
Very handy.
Exercises
1. Figure out an exercise
Part 10 - Polymorphism, or Inherited Methods
http://boo.codehaus.org/Part+10+-+Polymorphism,+or+Inherited+Meth...
3 of 3
5/27/2008 9:31 PM
Go on to Part 11 - Structs
Part 11 - Structs
http://boo.codehaus.org/Part+11+-+Structs?print=1
1 of 1
5/27/2008 9:31 PM
Part 11 - Structs
Part 11 - Structs
Definition: Struct
Short for structure, a term meaning a data group made of related variables.
The main difference between structs are different than classes is that it is a value type instead of a reference type.
This means that whenever you return this value, or set one equal to another, it is actually copying the data not a 
reference to the data. This is handy, becaues if it is declared without a value, it will default to something besides null. 
It also cannot be compared to null. This eliminates alot of error checking associated with reference types.
Structs also cannot inherit from classes, nor can classes inherit from structs. Structs can however, inherit from 
interfaces.
Unlike some other languages, structs can have methods.
Declaring a Struct
Declaring a struct is very similar to declaring a {{class}, except that the name is changed.
declaring a struct
struct Coordinate:
    def constructor(x as int, y as int):
        _x = x
        _y = y
    _x as int
    _y as int
c as Coordinate
print c.x, c.y
c = Coordinate(3, 5)
print c,x, c.y
Output
0 0
3 5
Here you can see that the struct was instanced without being called, showing the how a struct is a value.
Exercises
Figure out a good exercise for this section.
1.
Go on to Part 12 - Namespaces
Part 12 - Namespaces
http://boo.codehaus.org/Part+12+-+Namespaces?print=1
1 of 2
5/27/2008 9:32 PM
Part 12 - Namespaces
Part 12 - Namespaces