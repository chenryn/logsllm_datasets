本文翻译自：
* * *
LockCrypt，也叫EncryptServer2018，是2017年中发现的勒索软件家族，至今仍然活跃。网络上没有公开的LockCrypt的解密方法。恶意软件的变种已经使用了更强的加密方法，本文对旧版恶意软件的解密进行分析。
# 初始分析
研究人员发现恶意软件作者用一些看起来弱加密的定制加密方法来加密文件，这让研究人员很惊讶，在2018年居然遇到了勒索软件使用定制的加密模型，如果使用Windows
API来加密数据的方式，那么以现在的硬件进行解密可能需要几十亿年。
对加密函数的分解与下面的python代码是等价的：
    def grouper(iterable, n, fillvalue=None):
        """returns a generator which iterates iterable in groups of size n.
        in case the last group is incomplete, it is padded with fillvalue"""
        args = [iter(iterable)] * n
        return itertools.izip_longest(fillvalue=fillvalue, *args)
    def rol(val, n, width):
        """equivalent to the x86 rol opcode"""
        return (val > (width-n))
    def encrypt(key, plain):
        size = len(plain)-2
        enc = io.BytesIO(plain)
        # phase 1
        key_cyclic = grouper(itertools.cycle(key), 4)
        for _ in xrange(0, size&(~0x3), 2): # align the size of the data to a multiple of 4 bytes
            # get the next key dword
            k = "".join(key_cyclic.next())
            k = struct.unpack("I", e)
            # put the data dword back
            enc.seek(-4, os.SEEK_CUR)
            enc.write(e)
        return enc.getvalue()
    def encrypt_file(key, file):
        # len(key) == 25000
        # leave the first 4 bytes as-is
        file.seek(4, os.SEEK_SET)
        # encrypt the rest of the first 1MB of the file
        plain_data = file.read(0x100000 - 4)
        enc_data = encrypt(key, plain_data)
        file.seek(4, os.SEEK_SET)
        file.write(enc_data)
        # leave the rest of the file as is
下面的结论是等价的：
  1. phase 1定义的转化是一个长度为12500字节的循环；
  2. phase 2定义的转化是一个长度为25000字节的循环；
  3. 除了边缘情况，每个明文位要与3个密钥位进行XOR运算；
  4. 如果在phase 2对位移操作undo（撤销），phase 1和2都可以描述为用长度为25000字节的循环密钥进行的流加密。
最后2个结论可以通过下面的转化图进行说明，⊕表示进行XOR操作。  
在转化之前，4:8字节的位是这样的：
Phase 1的第2轮循环之后：
Phase 1的第3轮循环之后：
Phase 1的第4轮循环之后（与整个phase 1的循环相同）：
Phase 2的第2轮循环进行ROL（循环左移）操作之后：
Phase 2的第2轮循环进行XOR操作之后：
字节的顺序交换完成，这也就是这些字节的加密过程。
# 恢复stream key
如果从上图中拿到加密后的4:8字节，对交换顺序进行逆操作，ROR（循环左移）5位，就得到：
上面的操作是将加密进行标准化，变成一个典型的流加密。如果再对这些字节用已知的明文字节进行XOR运算，就得到结论4中提到的密钥位的功能：
该流被称之为stream
key（流密钥），而流中的每一位都是对原始密钥的位进行了三次XOR运算。因为是一个长为25000字节的循环，因此要恢复并解密加密的文件，需要25000字节的明文和加密字节。
下面的python函数可以用给定的明文和加密的数据对恢复stream
key。索引参数指定了给定字符串（减去4，因为前4个字节是不加密的）中的25000已知明文字节的索引，比如只会用到明文字符串的字节idx+4:idx+4+25000。
    key_len = 25000
    def ror(val, n, width):
        return ((val & ((1> n) | \
               (val = 4 + idx + key_len 
        plain = io.BytesIO(plain)
        enc = io.BytesIO(enc)
        assert plain.read(4) == enc.read(4)
        plain.seek(idx & (~3), os.SEEK_CUR)
        enc.seek(idx & (~3), os.SEEK_CUR)
        stream_key = io.BytesIO()
        for i in xrange(0, key_len + (idx % 4), 4):
            # read the next plain dword
            p = plain.read(4)
            p = struct.unpack("I", e)[0]
                # ROR back 5 bits
            e = ror(e, 5, 32)
            # XOR the plain and normalized encrypted dwords
            k = p^e
            k = struct.pack("I", e)[0]
                # ROR back 5 bits
            e = ror(e, 5, 32)
            # XOR the normalized encrypted dword with the stream key dword to recover
            # the plain dword
            p = e^sk
            p = struct.pack("=2的stream key
  * 为了解密前2个字节，必须使用idx=0的stream key
如果原始文件的长度!= 2 (mod 4)，那么在encrypt()函数中明文的长度len(plain) != 0 (mod 4)，因此在phase
1的最后一个循环中只对文件结尾的1-2个字节进行解密。这些字节的明文位只与1 key位进行XOR运算，因为还不能解密。
如果已知文件的长度n>=m，就可以解密长为m的文件。
可以得出结论，为了能够解密任意长度的文件和文件名，需要恢复原始的解密密钥，而不仅仅是前面提到的stream key。
# 恢复original key
分析表明上面的线性方程组将stream key和original key联系在一起。如果尝试将分析公式化，下面的python函数可以给出original
key位标记，然后位标记与stream key位进行XOR运算：
    key_bitlen = 25000*8
    def k_for_i(i):
        i_dword = i >> 5 # the index of the dword for bit i
        i_offset = i % 32 # the index of bit i in its dword
        i = i + key_bitlen
        k = []
        k.append((i_dword = 0]
`stream_key[i] == reduce(xor, (key[k] for k in
k_for_i(i)))`有了这个函数，就可以生成一个200000×200000稀疏矩阵，描述original key和stream key之间的转化：
    def gen_equations(idx):
        A_i_j_s = []
        for i in xrange(idx > i) & 1 for i in xrange(32)]
        return bits
    def bits2str(bits):
        s = []
        for dword_bits in grouper(bits, 32):
            dword = 0
            for i, bit in enumerate(dword_bits):
                dword = dword | (bit = 2的stream key。
    * 如果有大量已知的明文文件，研究任意建议使用idx = 25000。
  4. 安装SageMath；
  5. 打开SageMath Jupyter Notebook，复制并执行上面的代码段来恢复原始的加密密钥；
    * 从实验的结果看，这一步需要花费20分钟到几个小时
  6. 使用decryptor.py脚本来解密加密的文件；
脚本下载地址为Unit 42的GitHub：