a user might be rate-limited if the client is perceived to be
performing excessive requests), so we must be cognizant of
this possibility when designing tests for speciﬁc sites.
7.2 Dealing with More Complex Websites
Every website is different, so Newton of course is not guar-
anteed to work ﬂawlessly on every site. In this section, we
mention certain instances where Newton did not work as
expected. First, Newton decides whether a combination of
auth-cookies results in a successful authentication based on
whether the username is visible on the site. In some cases,
however, we observed that if certain auth-cookies are miss-
ing, a web service may take more time to load (e.g., Paypal
attempts to reset missing auth-cookies) or wait for a user to
conﬁrm his or her identity (e.g., Netﬂix asks for additional
input). In these cases, Newton may erroneously conclude that
the client failed to authenticate; in these cases, Newton may
erroneously conclude that a certain cookie combination is an
auth-cookie combination.
As we discussed in Section 4.2, because Newton considers
the entire search space of cookie combinations, the tool has
no false negatives. Yet, due to the absence of usernames on
some pages during a test sequence, Newton might have false
positives (i.e., cases where a set of cookies are not in fact
auth-cookies). In some other cases (e.g., Stackoverﬂow), the
page does not ever show a username, even if the user is logged
in. Some of these cases can be solved with heuristics, such
as waiting longer for the page to load or looking for certain
features of the page other than the username—in some cases,
however, manual auditing may be necessary.
Second, some sites such as Bank of America have a very
large number of auth-cookies. Newton identiﬁed 28 of the
auth-cookies on Bank of America but was not able to identify
the complete set of auth-cookies in a reasonable amount of
time. Even though, for this particular site, Newton could not
completely enumerate all auth-cookies, Newton determined
that the SMSESSION is necessary for authentication. In this
case, SMSESSION has both the secure and HttpOnly at-
tributes, so we were able to determine that Bank of America’s
auth-cookies were secure.
Finally, some sites have more complicated authentication
mechanisms that can frustrate Newton’s heuristics. For ex-
ample, Newton assumes that all of a user’s authentication
tokens are client-side auth-cookies, but, in rare cases (e.g.,
Grubhub), some sites maintain the user’s login status on the
server. In these cases, when the user logs out, the login state
is maintained on the server side. Even though all cookies are
still present, the user will be logged out, but Newton would
mistakenly conclude that the user remains logged in. More
complicated sites may also have multiple auth-cookie com-
binations, each of which determines different levels of site
access. These more situations are corner cases today, but if
these approaches become more common, future research may
need to expand on Newton’s techniques.
8 Related Work
At that time, only single authentication cookies were used;
although many of the recommendations from that work are
now commonplace, the rise of complex web applications
and authentication mechanisms begs for a re-appraisal of
client authentication. The Open Web Application Security
Project (OWASP) has set security guidelines that recognize
the importance of this problem and also acknowledge that
simply setting secure and HttpOnly ﬂags on cookies is
not a viable means of securing auth-cookies for many web
applications [25]. Other projects have explored both the
security and privacy risks of exposed auth-cookies [7, 26, 30].
Existing browser-based security extensions attempt to pro-
tect a user’s auth-cookies by setting the HttpOnly and
secure ﬂags and preventing these cookies from being acci-
dentally passed to other domains [6,8,10,22,28]. All of these
extensions rely on accurate mechanisms for computing the
auth-cookies for a site; Newton can provide this capability.
Various other systems (e.g., SessionShield [22], ZAN [28])
have attempted to identify the cookies that serve as session
identiﬁers, but, in contrast to Newton, none of these systems
can identify auth-cookies. HTTPSEverywhere is a Chrome
extension that forces trafﬁc over HTTPS whenever possi-
ble [11], which may not always protect auth-cookies and may
also hamper performance.
Concurrent work from Calzavara et al. has developed a
supervised learning algorithm that attempts to identify auth-
cookies for different sites [8]. The approach uses an approach
similar to that which we describe in Section 4.2 to compute
auth-cookies for user accounts in a controlled lab setting;
using these sets of auth-cookies, the algorithm attempts to
learn various features of auth-cookies to enable automatic
detection of auth-cookies on other sites. The work differs
from ours in several important ways.
First, the approach does not scale to general users and
websites, because training the algorithm requires usernames
and passwords, and because the algorithm can only estimate
the auth-cookies of unknown websites. Unlike Newton, it
cannot predict the exact auth-cookie combination for a pre-
viously unknown site when running on a user’s machine. In
contrast, Newton detects different auth-cookie combinations
for different services in the same domain. Newton also com-
putes auth-cookies “in the ﬁeld” on arbitrary websites, rather
than in the lab on much more limited set of sites. Second,
Newton’s performance optimizations allow it to run in the
user’s browser at runtime as a Chrome browser extension and
compute auth-cookies for previously unseen websites, which
allows it to gather more data from more users. Newton is
thus both more scalable, more accurate, and more robust to
changes in auth-cookie features that may occur over time.
Web applications can be sandboxed to prevent third-party
Javascript libraries from leaking users’ information [16, 29];
these systems solve a more general problem and require
changes to underlying Javascript engines. Other approaches
to add cryptographic properties to cookies [9, 13, 20] comple-
ment our recommendations.
Nearly 13 years ago, Fu et al. examined the use of cookies
for client authentication on the web and uncovered various
vulnerabilities; since this time, of course, the web has become
increasingly complex [13].
9 Conclusion
The increasingly complicated nature of cookie-based au-
thentication mechanisms on modern websites exposes clients
to a new set of vulnerabilities. Websites have become so com-
plex that it may be difﬁcult for a user, website administrator,
or web application programmer to determine which cookies
are responsible for authenticating a client to different parts of
a website, let alone whether a website’s auth-cookie mecha-
nisms are vulnerable to attack. Website designers and web
application programmers need better tools to evaluate site
security, as well as recommendations for best practices for se-
curing these cookies. Towards these goals, we have developed
a general algorithm to discover all auth-cookie combinations
that will permit a user to access a site for any service on
a particular website, including sub-services that are offered
from the same website or domain (e.g., Amazon Web Services
vs. Amazon Shopping, Google Mail vs. YouTube). We have
implemented this algorithm as a Chrome browser extension,
Newton, which can discover auth-cookie combinations for a
website without any prior knowledge about the website or the
user. Our analysis of 45 popular websites revealed security
vulnerabilities in auth-cookie combinations on 29 sites that
could be exploited by relatively weak attackers. We used the
case studies of vulnerabilities that we present to offer speciﬁc
recommendations that could signiﬁcantly improve website
security with relatively little additional effort.
We are planning a public release of Newton; crowdsourc-
ing data about auth-cookie mechanisms can ultimately help
both users and web developers quickly identify and eradicate
vulnerabilities in auth-cookies. We believe that Newton will
be particularly useful to users who access the network via
untrusted access points (e.g., in hotels, coffee shops, and other
public places). In these scenarios, Newton might ultimately
take a more proactive role in protecting auth-cookies by ensur-
ing that sensitive auth-cookies are not unnecessarily passed
in the clear and possibly even proactively setting secure
ﬂags on sensitive cookies in the auth-cookie combinations.
Newton could also be useful for helping users recover from
attacks such as the recent Heartbleed attack [14], which al-
lowed an attacker to steal auth-cookies even if the client sent
them via HTTPS. As web authentication continues to become
more complex, tools like Newton will increasingly valuable
to users, web programmers, and website administrators.
14
References
[1] Advisory: Weak RNG in PHP session ID generation
leads to session hijacking.
http://seclists.org/
fulldisclosure/2010/Mar/519. (Cited on page 12.)
[2] Unsafe cookies leave WordPress accounts open to hijacking,
2-factor bypass. Ars Technica. http://goo.gl/B1qLF7,
May 2014. (Cited on page 1.)
[3] D. Atkins and R. Austein. Threat Analysis of the Domain
Name System (DNS). Internet Engineering Task Force, Aug.
2004. RFC 3833. (Cited on page 4.)
[4] A. Barth. HTTP State Management Mechanism.
Engineering Task Force, Apr. 2011. RFC 6265.
page 5.)
Internet
(Cited on
[5] A. Barth. The Web Origin Concept. Internet Engineering Task
Force, Dec. 2011. RFC 6454. (Cited on page 3.)
[6] M. Bugliesi, S. Calzavara, R. Focardi, and W. Khan. Automatic
and robust client-side protection for cookie-based sessions. In
International Symposium on Engineering Secure Software and
Systems. ESSoS’14, 2014. (Cited on page 14.)
[7] E. Butler. A Firefox extension that demonstrates HTTP session
hijacking attacks. http://codebutler.github.io/
firesheep/, 2010. (Cited on page 14.)
[8] S. Calzavara, G. Tolomei, M. Bugliesi, and S. Orlando. Quite
a mess in my cookie jar!: Leveraging machine learning to
protect web authentication. In Proceedings of the 23rd Inter-
national Conference on World Wide Web, WWW ’14, pages
189–200, Republic and Canton of Geneva, Switzerland, 2014.
International World Wide Web Conferences Steering Commit-
tee. (Cited on page 14.)
[9] I. Dacosta, S. Chakradeo, M. Ahamad, and P. Traynor. One-
time cookies: Preventing session hijacking attacks with state-
less authentication tokens. volume 12, pages 1:1–1:24, New
York, NY, USA, July 2012. ACM. (Cited on page 14.)
[10] P. De Ryck, N. Nikiforakis, L. Desmet, F. Piessens, and
W. Joosen. Serene: Self-reliant client-side protection against
session ﬁxation. In Proceedings of the 12th IFIP WG 6.1 In-
ternational Conference on Distributed Applications and Inter-
operable Systems, DAIS’12, pages 59–72, Berlin, Heidelberg,
2012. Springer-Verlag. (Cited on page 14.)
[11] HTTPS Everywhere.
https-everywhere.
(Cited on page 14.)
https://www.eff.org/
Electronic Frontier Foundation.
[12] R. Fielding, J. Gettys, J. Mogul, H. Frystyk, L. Masinter,
P. Leach, and T. Berners-Lee. Hyptertext Transfer Protocol –
HTTP/1.1. Internet Engineering Task Force, June 1999. RFC
2616. (Cited on page 13.)
[13] K. Fu, E. Sit, K. Smith, and N. Feamster. Dos and don’ts
of client authentication on the Web. In Proc. 10th USENIX
Security Symposium, Washington, DC, Aug. 2001. (Cited on
pages 1, 10 and 14.)
[14] Hijacking user sessions with the Heartbleed vulnerabil-
ity. https://www.mattslifebytes.com/?p=533.
(Cited on page 14.)
[15] J. Hodges, C. Jackson, and A. Barth. HTTP Strict Transport
Security (HSTS). Internet Engineering Task Force, Nov. 2012.
RFC 6797. (Cited on page 5.)
[16] L. Ingram and M. Walﬁsh. Treehouse: Javascript sandboxes
to help web developers help themselves. In USENIX Annual
Technical Conference. USENIX ATC 2012, 2012. (Cited on
page 14.)
[17] Internet
Explorer Web
Roadmap.
httpstricttransportsecurityhsts.
on page 5.)
Platform
and
http://status.modern.ie/
(Cited
Status
[18] ISP
Advertisement
Injection.
http://
zmhenkel.blogspot.com/2013/03/
isp-advertisement-injection-cma.html.
(Cited on page 4.)
[19] C. Jackson and A. Barth. Forcehttps: Protecting high-security
web sites from network attacks. In Proceedings of the 17th
International Conference on World Wide Web, WWW ’08,
pages 525–534, New York, NY, USA, 2008. ACM.
(Cited on
page 4.)
[20] A. Liu, J. Kovacs, C.-T. Huang, and M. Gouda. A secure
cookie protocol. In Proceedings of the 14th IEEE Interna-
tional Conference on Computer Communicati ons and Net-
works. ICCCN-05, 2005. (Cited on page 14.)
[21] N. Nikiforakis, L. Invernizzi, A. Kapravelos, S. Van Acker,
W. Joosen, C. Kruegel, F. Piessens, and G. Vigna. You are
what you include: Large-scale evaluation of remote javascript
inclusions. In Proceedings of the 2012 ACM Conference on
Computer and Communications Security, CCS ’12, pages 736–
747, New York, NY, USA, 2012. ACM. (Cited on page 4.)
[22] N. Nikiforakis, W. Meert, Y. Younan, M. Johns, and W. Joosen.
Sessionshield: Lightweight protection against session hijack-
ing. In Proceedings of the Third International Conference on
Engineering Secure Software and Systems, ESSoS’11, pages
87–100, Berlin, Heidelberg, 2011. Springer-Verlag.
(Cited on
page 14.)
[23] OWASP. OWASP Top 10 Application Security Risks -
2010. https://www.owasp.org/index.php/Top_
10_2010-Main, 2010. (Cited on page 4.)
[24] OWASP: Double Submit Cookies.
http://goo.gl/
qmW7o5. (Cited on page 4.)
[25] Testing
for
cookies
attributes.
https://www.
owasp.org/index.php/Testing_for_cookies_
attributes_(OWASP-SM-002). (Cited on page 14.)
[26] F. Roesner, T. Kohno, and D. Wetherall. Detecting and defend-
ing against third-party tracking on the web. In 9th USENIX
Symposium on Networked Systems Design and Implementation.
NSDI 2012, 2012. (Cited on page 14.)
[27] SSL Pulse:
Survey
of
the Most Popular Web Sites.
of
trustworthyinternet.org/ssl-pulse/.
on page 5.)
the SSL Implementation
https://www.
(Cited
[28] S. Tang, N. Dautenhahn, and S. T. King. Fortifying web-based
applications automatically. In Proceedings of the 18th ACM
Conference on Computer and Communications Security, CCS
’11, pages 615–626, New York, NY, USA, 2011. ACM. (Cited
on page 14.)
15
[29] J. Terrace, S. R. Beard, and N. P. K. Katta. Javascript in
javascript (js.js): Sandboxing third-party scripts. In Proceed-
ings of USENIX Conference on Web Application Development.
WebApps ’12, 2012. (Cited on page 14.)
[30] R. J. Walls, S. S. Clark, and B. N. Levine. Functional privacy
or why cookies are better with milk. In Proceedings of the
7th USENIX Workshop on Hot Topics in Security, HotSec ’12,
Bellevue, WA, Aug. 2012. (Cited on page 14.)
16