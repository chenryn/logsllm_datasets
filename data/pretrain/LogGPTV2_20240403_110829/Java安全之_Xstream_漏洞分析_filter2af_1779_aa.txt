# Java安全之 Xstream 漏洞分析
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 0x00 前言
好久没写漏洞分析文章了，最近感觉在审代码的时候，XStream 组件出现的频率比较高，借此来学习一波XStream的漏洞分析。
## 0x01 XStream 历史漏洞
下面罗列一下XStream历史漏洞
XStream 远程代码执行漏洞 | CVE-2013-7285 | XStream 
      xxx
      22
####  反序列化
      XStream xStream = new XStream();
        String xml =
                    "\n" +
                    "  xxx\n" +
                    "  22\n" +
                    "";
            Person person1 = (Person)xStream.fromXML(xml);
            System.out.println(person1);
结果
    Person{name='xxx', age=22}
###  EventHandler类
分析前先来看到`EventHandler`类，EventHandler类是实现了`InvocationHandler`的一个类，设计本意是为交互工具提供beans，建立从用户界面到应用程序逻辑的连接。其中会查看调用的方法是否为`hashCode`、`equals`、`toString`，如果不为这三个方法则往下走，而我们的需要利用的部分在下面。`EventHandler.invoke()`—>`EventHandler.invokeInternal()`—>`MethodUtil.invoke()`任意反射调用。
###  组成部分
####  XStream 总体由五部分组成
**XStream** 作为客户端对外提供XML解析与转换的相关方法。
  1. **AbstractDriver** 为XStream提供流解析器和编写器的创建。目前支持XML（DOM，PULL）、JSON解析器。解析器 **HierarchicalStreamReader** ，编写器 **HierarchicalStreamWriter** （PS： **XStream** 默认使用了 **XppDriver** )。
  2. **MarshallingStrategy** 编组和解组策略的核心接口，两个方法：  
marshal：编组对象图  
unmarshal:解组对象图  
 **TreeUnmarshaller**
树解组程序，调用mapper和Converter把XML转化成java对象，里面的start方法开始解组，`convertAnother`方法把class转化成java对象。  
 **TreeMarshaller**
树编组程序，调用mapper和Converter把java对象转化成XML，里面的start方法开始编组，`convertAnother`方法把java对象转化成XML。  
它的抽象子类`AbstractTreeMarshallingStrategy`有抽象两个方法  
`createUnmarshallingContext`  
`createMarshallingContext`  
用来根据不同的场景创建不同的`TreeUnmarshaller`子类和`TreeMarshaller`子类，使用了 **策略模式**
，如`ReferenceByXPathMarshallingStrategy`创建`ReferenceByXPathUnmarshaller`，`ReferenceByIdMarshallingStrategy`创建`ReferenceByIdUnmarshaller`（PS：
**XStream** 默认使用`ReferenceByXPathMarshallingStrategy`
  3. **Mapper** 映射器，XML的`elementName`通过mapper获取对应类、成员、属性的class对象。支持解组和编组，所以方法是成对存在real 和serialized，他的子类`MapperWrapper`作为装饰者，包装了不同类型映射的映射器，如`AnnotationMapper`，`ImplicitCollectionMapper`，`ClassAliasingMapper`。
  4. **ConverterLookup** 通过Mapper获取的Class对象后，接着调用`lookupConverterForType`获取对应Class的转换器，将其转化成对应实例对象。`DefaultConverterLookup`是该接口的实现类，同时实现了`ConverterRegistry`的接口，所有`DefaultConverterLookup`具备查找converter功能和注册converter功能。所有注册的转换器按一定优先级组成由 **TreeSet** 保存的有序集合(PS: **XStream** 默认使用了 **DefaultConverterLookup** )。
####  Mapper解析
根据`elementName`查找对应的Class，首先调用`realClass`方法，然后`realClass`方法会在所有包装层中一层层往下找，并还原`elementName`的信息，比如在`ClassAliasingMapper`根据`component`别名得出`Component`类，最后在`DefaultMapper`中调用`realClass`创建出Class。  
`CachingMapper`—>`SecurityMapper`—>`ArrayMapper`—>`ClassAliasingMapper`—>`PackageAliasingMapper`—>`DynamicProxyMapper`—->`DefaultMapper`
[XStream 源码解析](https://www.jianshu.com/p/387c568faf62)
## 0x03 漏洞分析
###  CVE-2013-7285
####  影响范围
1.4.x\n" +
                            "    foo\n" +
                            "    \n" +
                            "        java.lang.Comparable\n" +
                            "        \n" +
                            "            \n" +
                            "                \n" +
                            "                    cmd\n" +
                            "                    /C\n" +
                            "                    calc\n" +
                            "                \n" +
                            "            \n" +
                            "            start\n" +
                            "        \n" +
                            "    \n" +
                            "";
           xStream.fromXML(xml);
        }
一路跟踪下来代码走到`com.thoughtworks.xstream.core.TreeUnmarshaller#start`
    public Object start(final DataHolder dataHolder) {
            this.dataHolder = dataHolder;
            //通过mapper获取对应节点的Class对象
            final Class type = HierarchicalStreams.readClassType(reader, mapper);
            //Converter根据Class的类型转化成java对象
            final Object result = convertAnother(null, type);
            for (final Runnable runnable : validationList) {
                runnable.run();
            }
            return result;
        }
调用`HierarchicalStreams.readClassType`方法，从序列化的数据中获取一个真实的class对象。
    public static Class readClassType(final HierarchicalStreamReader reader, final Mapper mapper) {
            if (classAttribute == null) {
            // 通过节点名获取Mapper中对应的Class
            Class type = mapper.realClass(reader.getNodeName());
            return type;
        }
方法内部调用`readClassAttribute`。来看到方法
    public static String readClassAttribute(HierarchicalStreamReader reader, Mapper mapper) {
        String attributeName = mapper.aliasForSystemAttribute("resolves-to");
        String classAttribute = attributeName == null ? null : reader.getAttribute(attributeName);
        if (classAttribute == null) {
            attributeName = mapper.aliasForSystemAttribute("class");
            if (attributeName != null) {
                classAttribute = reader.getAttribute(attributeName);
            }
        }
        return classAttribute;
    }
其中调用获取调用`aliasForSystemAttribute`方法获取别名。
获取`resolves-to`和`class`判断解析的xml属性值中有没有这两字段。
这里返回为空，继续来看到`com.thoughtworks.xstream.core.util.HierarchicalStreams#readClassType`
为空的话，则走到这里
    type = mapper.realClass(reader.getNodeName());
获取当前节点的名称，并进行返回对应的class对象。
跟踪`mapper.realClass`方法。`com.thoughtworks.xstream.mapper.CachingMapper#realClass`
     public Class realClass(String elementName) {
            Object cached = this.realClassCache.get(elementName);
            if (cached != null) {
                if (cached instanceof Class) {
                    return (Class)cached;
                } else {
                    throw (CannotResolveClassException)cached;
                }
            } else {
                try {
                    Class result = super.realClass(elementName);
                    this.realClassCache.put(elementName, result);
                    return result;
                } catch (CannotResolveClassException var4) {
                    this.realClassCache.put(elementName, var4);
                    throw var4;
                }
            }
        }
找到别名应的类，存储到realClassCache中，并且进行返回。
执行完成回到`com.thoughtworks.xstream.core.TreeUnmarshaller#start`中
跟进代码
    Object result = this.convertAnother((Object)null, type);
来到这里
    public Object convertAnother(final Object parent, Class type, Converter converter) {
            //根据mapper获取type实现类
            type = mapper.defaultImplementationOf(type);
            if (converter == null) {
                //根据type找到对应的converter
                converter = converterLookup.lookupConverterForType(type);
            } else {
                if (!converter.canConvert(type)) {
                    final ConversionException e = new ConversionException("Explicitly selected converter cannot handle type");
                    e.add("item-type", type.getName());
                    e.add("converter-type", converter.getClass().getName());
                    throw e;
                }
            }
             // 进行把type转化成对应的object
            return convert(parent, type, converter);
        }
`this.mapper.defaultImplementationOf`方法会在mapper对象中去寻找接口的实现类
下面调用`this.converterLookup.lookupConverterForType(type);`方法寻找对应类型的转换器。
     public Converter lookupConverterForType(final Class type) {
            //先查询缓存的类型对应的转换器集合
            final Converter cachedConverter = type != null ? typeToConverterMap.get(type.getName()) : null;
            if (cachedConverter != null) {
                //返回找到的缓存转换器
                return cachedConverter;
            }
            final Map errors = new LinkedHashMap<>();
            //遍历转换器集合
            for (final Converter converter : converters) {
                try {
                    //判断是不是符合的转换器
                    if (converter.canConvert(type)) {
                        if (type != null) {
                            //缓存类型对应的转换器
                            typeToConverterMap.put(type.getName(), converter);
                        }
                        //返回找到的转换器
                        return converter;
                    }
                } catch (final RuntimeException | LinkageError e) {
                    errors.put(converter.getClass().getName(), e.getMessage());