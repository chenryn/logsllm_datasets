### 2015-8 汪涛

**汪涛**
- **职位**: BaiduX-Team 成员
- **ID**: neobyte
- **经验**: 多年安全评估经验，涉及领域广泛，包括Web安全、Java安全、Android安全和前端安全等。

## Intent注入漏洞分析

### Intent注入的概念
- **定义**: Android提供的一种在Java环境下实现进程间通信（IPC）的机制。Intent是一种IPC消息对象，用于请求应用程序组件执行特定操作。
- **特性**:
  - 发送和接收组件可能运行在同一应用程序或不同应用程序（进程）中。
  - 请求的操作可以是启动一个Activity、Service或处理Broadcast。
  - Intent通常包含Action（动作）或Component（目标组件名），系统据此决定接收Intent的目标组件。
  - Intent还可能包含额外的数据（Extras, Data），供目标组件处理。

### Intent结构
```
Action
Component
Extras
Data
...
Intent
```

### 安全风险
- **本地攻击界面**: 应用程序公开组件在处理外部Intent数据时可能存在安全漏洞。
- **示例**:
  - WebView JsInterface
  - SQL Injection
  - Path Traversal
  - 权限泄漏（如网络权限、读写短信权限）

### 数据验证
- **参考链接**: [OASAM-DV-007: Intent注入](http://oasam.org/en/oasam/oasam-dv-data-validation/oasam-dv-007-intent-injection)
- **描述**: 如果用户的输入以动态方式加载到Intent数据中，恶意用户可能操纵这些数据来执行代码。特别是通过以下Intent方法：`addCategory()`, `setAction()`, `setClass()`, `setClassName()`, `setComponent()`, `setData()` 和 `setDataAndType()`。

### 本地Intent注入的风险
- **风险**:
  - 本地权限提升
  - 访问私有组件
- **场景**:
  - 某应用程序存在本地Intent注入漏洞，注入的Intent可以攻击其敏感的私有组件。
  - 具有System权限的应用程序如果存在Intent注入漏洞，可以绕过IPC权限，启动一些敏感的组件，例如`launchAnyWhere`, `BroadcastAnyWhere`。

### 远程Intent注入的风险
- **风险**:
  - 等同于有限的远程命令执行
  - 本地暴露组件的漏洞可以从远程攻击
- **场景**:
  - 来自网页中的JavaScript可以发起intent，拨打电话。
  - 来自通信网络中的短信可以发起intent。

### Intent转换与复制
- **构造Intent的元素来自外部**:
  - Action注入
  - Component注入
  - Data注入
  - 泄漏PendingIntent可能导致其他进程修改Intent并以应用程序的身份发出。
  - `Intent.parseUri` 可解析String为Intent，如果未进行校验，可能被攻击者篡改Intent。
  - 完整接收Intent后转发
  - Intent代理
  - `getParcelable()`
  - `new Intent(intent)`

### 示例漏洞
- **AccountManager缺陷**:
  - 最早由申迪分析，恶意应用程序可以发出任意intent来启动activity，绕过IPC权限限制。
  - [参考链接](http://blogs.360.cn/360mobile/2014/08/19/launchanywhere-google-bug-7699048/)
  - 本质上是一个Intent注入。

### Bytecode分析
- **工具**: 一个开源的Java bytecode缺陷分析工具。
- **步骤**:
  - 分析一个目录下的所有class文件。
  - 编译安卓4.4.4版本，得到所有中间过程的class文件（无需使用dex2jar），共约3万个class。
  - 扫描所有Bytecode指令，如果是`checkcast`，进一步检查是否是cast为Intent类型。
  - 对Android 4.4全系统扫描后发现106例Intent的`checkcast`，根据是否在同方法中发送了该Intent调整优先级，结果第一个就是launchAnywhere漏洞，另外还发现一个0day...

### ChooserActivity漏洞
- **漏洞**: ChooserActivity存在Intent注入漏洞，恶意无权限APP可以以System权限启动任意Activity（类似launchAnywhere）。
- **组件**: `com.android.internal.app.ChooserActivity` (4.4.4版截图)
- **启动流程**:
  - 启动该Activity会从输入Intent中读取`EXTRA_INTENT`与`EXTRA_INITIAL_INTENTS`，分别是Intent以及Intent数组，然后传递给`super.onCreate`。
  - `super`类为`com.android.internal.app.ResolverActivity`，将启动用户选择的Intent。
  - 2012年（4.1）的一个补丁中增加了对是否有权限启动`EXTRA_INTENT`的检查，但依然遗漏了对`EXTRA_INITIAL_INTENTS`的检查，所以可以利用`EXTRA_INITIAL_INTENTS`来launchAnywhere。
- **参考链接**: [Google源码](https://android.googlesource.com/platform/frameworks/base/+/5320eb8938098c9824093f7f842a0a97bbc190a4%5E%21/#F4)

### 补丁
- **报告时间**: 2014-09-15
- **补丁**: `com.android.internal.app.ResolverActivity`，`startActivityAsCaller`
- **修复内容**: 修复问题 #14617210: 应用程序可以无需用户交互即可访问任何ContentProvider。
- **参考链接**:
  - [补丁链接](https://android.googlesource.com/platform/frameworks/base/+/028ceeb472801bcfa5844fc89ed0da8463098824)
  - [其他相关链接](https://android.googlesource.com/platform/frameworks/base/+/android-5.1.1_r8/packages/Shell/src/com/android/shell/BugreportWarningActivity.java)
  - [Camera2应用](https://android.googlesource.com/platform/packages/apps/Camera2/+/android-5.1.1_r8/src/com/android/camera/ProxyLauncher.java)
  - [Settings应用](https://android.googlesource.com/platform/packages/apps/Settings/+/android-5.1.1_r8/src/com/android/settings/users/AppRestrictionsFragment.java)
  - [Browser应用](https://android.googlesource.com/platform/packages/apps/Browser/+/android-5.1.1_r8/src/com/android/browser/widget/BookmarkWidgetProxy.java)

### 总结
- **Intent注入**:
  - `parseUri`注入
  - `PendingIntent`误用
  - `Action/Component/Data`注入
  - Intent转换与复制

希望以上优化后的文本更加清晰、连贯和专业。如果有更多需要改进的地方，请随时告知。