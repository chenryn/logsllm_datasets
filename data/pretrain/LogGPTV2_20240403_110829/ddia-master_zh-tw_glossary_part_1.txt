# 术语表
> 请注意，本术语表中的定义简短而简单，旨在传达核心思想，而不是术语的完整细微之处。有关更多详细资讯，请参阅正文中的参考资料。
* **非同步（asynchronous）**
  不等待某些事情完成（例如，将资料传送到网路中的另一个节点），并且不会假设要花多长时间。请参阅“[同步复制与非同步复制](ch5.md#同步复制与非同步复制)”、“[同步网路与非同步网路](ch8.md#同步网路与非同步网路)”以及“[系统模型与现实](ch8.md#系统模型与现实)”。
* **原子（atomic）**
   在并发操作的上下文中：描述一个在单个时间点看起来生效的操作，所以另一个并发程序永远不会遇到处于“半完成”状态的操作。另见隔离。
   在事务的上下文中：将一些写入操作分为一组，这组写入要么全部提交成功，要么遇到错误时全部回滚。请参阅“[原子性](ch7.md#原子性)”和“[原子提交与两阶段提交](ch9.md#原子提交与两阶段提交)”。
* **背压（backpressure）**
  接收方接收资料速度较慢时，强制降低传送方的资料传送速度。也称为流量控制。请参阅“[讯息传递系统](ch11.md#讯息传递系统)”。
* **批处理（batch process）**
  一种计算，它将一些固定的（通常是大的）资料集作为输入，并将其他一些资料作为输出，而不修改输入。见[第十章](ch10.md)。
* **边界（bounded）**
  有一些已知的上限或大小。例如，网路延迟情况（请参阅“[超时与无穷的延迟](ch8.md#超时与无穷的延迟)”）和资料集（请参阅[第十一章](ch11.md)的介绍）。
* **拜占庭故障（Byzantine fault）**
  表现异常的节点，这种异常可能以任意方式出现，例如向其他节点发送矛盾或恶意讯息。请参阅“[拜占庭故障](ch8.md#拜占庭故障)”。
* **快取（cache）**
  一种元件，透过储存最近使用过的资料，加快未来对相同资料的读取速度。快取中通常存放部分资料：因此，如果快取中缺少某些资料，则必须从某些底层较慢的资料储存系统中，获取完整的资料副本。
* **CAP定理（CAP theorem）**
  一个被广泛误解的理论结果，在实践中是没有用的。请参阅“[CAP定理](ch9.md#CAP定理)”。
* **因果关系（causality）**
  事件之间的依赖关系，当一件事发生在另一件事情之前。例如，后面的事件是对早期事件的回应，或者依赖于更早的事件，或者应该根据先前的事件来理解。请参阅“[“此前发生”的关系和并发](ch5.md#“此前发生”的关系和并发)”和“[顺序与因果关系](ch9.md#顺序与因果关系)”。
* **共识（consensus）**
  分散式计算的一个基本问题，就是让几个节点同意某些事情（例如，哪个节点应该是资料库丛集的领导者）。问题比乍看起来要困难得多。请参阅“[容错共识](ch9.md#容错共识)”。
* **资料仓库（data warehouse）**
  一个数据库，其中来自几个不同的OLTP系统的资料已经被合并和准备用于分析目的。请参阅“[资料仓库](ch3.md#资料仓库)”。
* **宣告式（declarative）**
  描述某些东西应有的属性，但不知道如何实现它的确切步骤。在查询的上下文中，查询最佳化器采用宣告性查询并决定如何最好地执行它。请参阅“[资料查询语言](ch2.md#资料查询语言)”。
* **非规范化（denormalize）**
  为了加速读取，在标准资料集中引入一些冗余或重复资料，通常采用快取或索引的形式。非规范化的值是一种预先计算的查询结果，像物化检视。请参阅“[单物件和多物件操作](ch7.md#单物件和多物件操作)”和“[从同一事件日志中派生多个检视](ch11.md#从同一事件日志中派生多个检视)”。
* **衍生资料（derived data）**
  一种资料集，根据其他资料透过可重复执行的流程建立。必要时，你可以执行该流程再次建立衍生资料。衍生资料通常用于提高特定资料的读取速度。常见的衍生资料有索引、快取和物化检视。请参阅[第三部分](part-iii.md)的介绍。
* **确定性（deterministic）**
  描述一个函式，如果给它相同的输入，则总是产生相同的输出。这意味著它不能依赖于随机数字、时间、网路通讯或其他不可预测的事情。
* **分散式（distributed）**
  在由网路连线的多个节点上执行。对于部分节点故障，具有容错性：系统的一部分发生故障时，其他部分仍可以正常工作，通常情况下，软体无需了解故障相关的确切情况。请参阅“[故障与部分失效](ch8.md#故障与部分失效)”。
* **持久（durable）**
  以某种方式储存资料，即使发生各种故障，也不会丢失资料。请参阅“[永续性](ch7.md#永续性)”。
* **ETL（Extract-Transform-Load）**
  提取-转换-载入（Extract-Transform-Load）。从源资料库中提取资料，将其转换为更适合分析查询的形式，并将其载入到资料仓库或批处理系统中的过程。请参阅“[资料仓库](ch3.md#资料仓库)”。
* **故障切换（failover）**
  在具有单一领导者的系统中，故障切换是将领导角色从一个节点转移到另一个节点的过程。请参阅“[处理节点宕机](ch5.md#处理节点宕机)”。
* **容错（fault-tolerant）**
  如果出现问题（例如，机器崩溃或网路连线失败），可以自动恢复。请参阅“[可靠性](ch1.md#可靠性)”。
* **流量控制（flow control）**
  见背压（backpressure）。
* **追随者（follower）**
  一种资料副本，仅处理领导者或主库发出的资料变更，不直接接受来自客户端的任何写入。也称为备库、从库、只读副本或热备份。请参阅“[领导者与追随者](ch5.md#领导者与追随者)”。
* **全文检索（full-text search）**
  透过任意关键字来搜寻文字，通常具有附加特征，例如匹配类似的拼写词或同义词。全文索引是一种支援这种查询的次级索引。请参阅“[全文搜寻和模糊索引](ch3.md#全文搜寻和模糊索引)”。
* **图（graph）**
  一种资料结构，由顶点（可以指向的东西，也称为节点或实体）和边（从一个顶点到另一个顶点的连线，也称为关系或弧）组成。请参阅“[图资料模型](ch2.md#图资料模型)”。
* **杂凑（hash）**
  将输入转换为看起来像随机数值的函式。相同的输入会转换为相同的数值，不同的输入一般会转换为不同的数值，也可能转换为相同数值（也被称为冲突）。请参阅“[根据键的杂凑分割槽](ch6.md#根据键的杂凑分割槽)”。
* **幂等（idempotent）**
  用于描述一种操作可以安全地重试执行，即执行多次的效果和执行一次的效果相同。请参阅“[幂等性](ch11.md#幂等性)”。
* **索引（index）**
  一种资料结构。透过索引，你可以根据特定栏位的值，在所有资料记录中进行高效检索。请参阅“[驱动资料库的资料结构](ch3.md#驱动资料库的资料结构)”。
* **隔离性（isolation）**
  在事务上下文中，用于描述并发执行事务的互相干扰程度。序列执行具有最强的隔离性，不过其它程度的隔离也通常被使用。请参阅“[隔离性](ch7.md#隔离性)”。
* **连线（join）**
  汇集有共同点的记录。在一个记录与另一个记录有关（外来键，文件参考，图中的边）的情况下最常用，查询需要获取参考所指向的记录。请参阅“[多对一和多对多的关系](ch2.md#多对一和多对多的关系)”和“[Reduce侧连线与分组](ch10.md#Reduce侧连线与分组)”。
* **领导者（leader）**
  当资料或服务被复制到多个节点时，领导者是被指定为可以接受资料变更的副本。领导者可以透过某些协议选举产生，也可以由管理员手动选择。领导者也被称为主库。请参阅“[领导者与追随者](ch5.md#领导者与追随者)”。