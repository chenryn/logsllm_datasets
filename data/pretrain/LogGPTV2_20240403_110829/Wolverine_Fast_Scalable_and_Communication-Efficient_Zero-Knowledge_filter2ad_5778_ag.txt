### DECO and Wolverine: Enhancing Zero-Knowledge Proofs for Data Provenance and Beyond

**DECO [62]** is a system that enables third-party verification of data provenance for TLS connections, allowing clients to prove that specific data originated from a particular website. The authors confirmed that interactive zero-knowledge (ZK) proofs can be used in their system. One application of DECO is proving the existence of price discrimination by demonstrating, in zero knowledge, that a client received a price exceeding a certain threshold. This proof involves a boolean circuit with approximately 163,000 AND gates.

In the original implementation [62], a ZK proof for this statement was generated using libSNARK, resulting in a short proof but with high computational overhead. When deployed over a 10 Mbps network, **Wolverine** reduces the execution time of the ZK-proof component by 45 times, leading to a 9 times overall improvement in the DECO protocol.

### Blind Certificate Authority (CA) and ZK Proofs

A blind CA can issue a valid certificate binding a party to a public key without learning the party's identity. A recent proposal for a blind CA [56] required a ZK proof corresponding to a boolean circuit with roughly 2.5 million AND gates. The existing implementation used an MPC-in-the-head approach, which took over 70 seconds to execute over a 10 Mbps network. By integrating **Wolverine**, the communication complexity is improved by 30 times, and the execution time is reduced by 20 times compared to the original protocol [56].

### Zero-Knowledge Proofs for Arithmetic Circuits

**Wolverine** was also evaluated for arithmetic circuits over \( \mathbb{F}_p \) with \( p = 2^{61} - 1 \). In this setting, the correctness of multiplication gates is verified using the first optimization described in Section III-B, and the first approach discussed in Section II-A is used for batched opening of authenticated values.

#### Performance
Similar to the boolean case, the performance of **Wolverine** was studied as a function of the witness length and circuit size, with results reported in Figure 11. Given the higher communication complexity for arithmetic circuits (each field element is 61 bits long), performance was benchmarked in higher-bandwidth networks. **Wolverine** can execute proofs at a rate of about 1 million multiplication gates per second in a 500 Mbps network and approximately 200,000 multiplication gates per second in a 50 Mbps network.

We are not aware of any memory-efficient ZK protocol that natively works with arithmetic circuits. Converting an arithmetic circuit to a boolean circuit generally imposes significant overhead.

### Example Applications

#### Example 1: Matrix Multiplication
We applied **Wolverine** to prove knowledge of two \( n \times n \) matrices whose product is a publicly known matrix. This problem, while meaningless, has been used as a benchmark in prior work [10], [55], [58], [63]. We experimented with \( n \) ranging from 64 to 768 (with the witness ranging from 8,192 to over 1 million field elements), using a matrix-multiplication circuit corresponding to the naive \( O(n^3) \)-time algorithm. The time and memory usage of **Wolverine** are shown in Figure 12. The memory usage grows slowly as \( n \) increases, never exceeding 350 MB.

As shown in Table I, our protocol is 2 times faster than Spartan but 5 times slower than Virgo. Importantly, the prover memory of **Wolverine** is only 3% of that used by Virgo and 0.5% of that needed by Spartan.

#### Example 2: Solutions to Lattice Problems
Various prior works have explored ZK proofs for the Short Integer Solution (SIS) problem. Here, we have public \( A \in \mathbb{Z}_q^{n \times m} \) and \( t \in \mathbb{Z}_q^n \), and the prover's goal is to convince the verifier that it knows a short \( s \) such that \( As = t \mod q \). We evaluate **Wolverine** based on different notions of shortness for \( s \).

Baum and Nof [4] recently showed a ZK proof for SIS where \( s \in \{0, 1\}^m \) is a binary vector. We compare **Wolverine** to their protocol in Table VII. In our experiments, we use \( q \approx 2^{61} \), \( n = 1024 \), and \( m = 4096 \) to align with the parameters used by Baum and Nof. These parameters are also sufficient for the somewhat homomorphic encryption scheme used for the SPDZ setup phase [19]. As shown in Table VII, our protocol is over 16 times more efficient than the protocol of Baum and Nof, even when run over a much slower network.

In Table VIII, we compare **Wolverine** with other ZK proofs for SIS [11], [12], [30] that apply when \( s \in \{-1, 0, 1\}^m \). Here we fix \( q \approx 2^{32} \), \( n = 2048 \), and \( m = 1024 \) to align with prior work. **Wolverine** uses only 60% of the communication compared to the best prior work. (We are unable to compare the running time, as it was not reported by prior work.)

### Acknowledgements
This material is based upon work supported in part by DARPA under Contract No. HR001120C0087. The views, opinions, and/or findings expressed are those of the author(s) and should not be interpreted as representing the official views or policies of the Department of Defense or the U.S. Government. Work of Kang Yang is supported by the National Natural Science Foundation of China (Grant No. 61932019). Distribution Statement “A” (Approved for Public Release, Distribution Unlimited).

### References
[References listed here, formatted consistently]

---

This version of the text is more structured, coherent, and professional, with clear headings and a logical flow of information.