number  of  orders  with  the  same  prices:  each  time,  all  he 
needs to do is to place a new order by RT1.a (Figure 9), 
set the browser cookie ORDER_ID to be the ID of the order, 
then  call  Jeff’s  IPN  handler  with  argumentsC*  in 
RT2’.a, and then call Jeff’s finishOrder by RT3.a. 
In  this  exploit  (Figure  9),  the  attacker  plays  all  three 
roles:  the  shopper  (RT1.a  and  RT2.a),  the  merchant 
(RT2.a.a  for  acquiring  argumentsC*)  and  the  CaaS 
(RT2’.a  for  replaying  the  signed  IPN  message).    Of 
particular interest here is RT2’.a in which the attacker also 
changes  his  browser  cookie,  therefore  it  is  a  hybrid  of  a 
CaaS  behavior  and  a  browser  behavior.  This  demonstrates 
how  deeply  the  attacker  can  be  involved  in  a  CaaS-based 
checkout process and how complicated an exploit can be.    
3)  Integration of Google Checkout – adding items into the 
cart after the checkout button is clicked 
Interspire’s  integration  of  Google  Checkout  contains 
about 4000 lines of code, the most complicated one among 
the four CaaS-integrations of the application we studied. Its 
simplified program logic is shown in Figure 10.  Interspire 
utilizes  several  APIs  to  add/remove  items  in  the  shopping 
cart,  which  are  aggregately  denoted  by  updateCart 
(invoked by RT1.a in the figure) here for the simplicity of 
presentation.    The  checkout  process  (RT2.a  to  RT3.b  in 
Figure  10)  is  triggered  when  the  shopper  clicks  on  the 
“Google Checkout” button. RT3.a.a is an IPN call made 
by the CaaS. 
Flaw  and  exploit.  A  prominent  feature  of  this  checkout 
workflow is that no order is generated before the payment is 
made: the shopper is supposed to pay for the content of his 
shopping cart first; only when the merchant is informed by 
the  CaaS  via  IPN  (RT3.a.a)  will  the  merchant’s  handler 
handleIPN create an order of the transaction according to 
what  is  inside  the  cart  and  set  its  status  to  “PAID”,  as 
illustrated  in  the  figure.  The  problem  here  is  that  this 
procedure is not atomic: after receiving RT2.b, the shopper 
does not send RT3.a immediately. Instead, he can still call 
updateCart  to  change  or  add  new  items  into  his  cart. 
Then, when RT3.a is sent, the current cart in the shopper’s 
session  is  more  expensive  than  the  cart  field  in  RT3.a. 
On the other hand, handleIPN loads the cart directly from 
the  shopper’s  session,  rather  than  from  the  CaaS,  to  build 
the  order.   This  causes  an  inconsistency  between  what  the 
CaaS sees in the cart at the pay time and what the merchant 
has at the checkout-completion time, so the shopper can pay 
for a cheap item, but check out many expensive items. 
(A)
RT1.a: TStore.com/updateCart 
TStore.com (T)
RT1.b
RT2.a: TStore.com/checkout 
RT2.b: redir to (CaaS.com/pay?sessionID&cart…)T*
RT3.a.a: (TStore.com/handleIPNT?
identity C& statusC&sessionIDT&…)
RT3.a.b:  OK
RT3.a: (CaaS.com/pay?sessionID&cart…)T*
RT3.b: status=PAID 
(C)
TStore.com/handleIPN:     
1:      if (GetMsgField(“status”) ≠ PAID) exit;   /*payment status*/
2:      cart = LoadShoppingCart(GetMessageField(“sessionID”)); 
3:      order = CreateOrder(cart); 
4:      order.status=PAID;   
Figure 10: Interspire's integration of Google Checkout 
4)  Integration of Amazon Simple Pay – avoiding payment  
We discovered a bug that allows the attacker to fool the 
merchant into believing that a message sent by the attacker 
was  generated  by  Amazon,  and  thus  completely  avoid 
payment. The details of the bug are described in [37]. 
C.  Amazon  Payments  SDK  flaw  –  interdependency  of 
certificate authenticity and message authenticity 
All the security flaws presented in the prior sections are 
directly related to merchant applications.  The problem with 
CaaS providers is less clear, though they do need to better 
explain  their  operations  and  security  assurance  to  avoid 
confusion on the merchant side. This, however, by no means 
suggests that the code of the CaaS is immune to this set of 
logic  flaws:  we  did  not  perform  an  in-depth  analysis  on  it 
just because the majority of it is not accessible to the public.  
From  the  small  amount  of  the  code  the  CaaS  releases,  we 
already discovered a serious flaw, as elaborated below.   
Flaw  and  exploit.  For  all  the  messages  bearing  Amazon’s 
signatures, 
the  Software  Development  Kit  (SDK)  of 
Amazon  Payments  offers  a  signature  verification  API 
validateSignatureV2.  This  function,  together  with 
the  rest  of  the  SDK,  is  designed  to  be  incorporated  into 
merchant  software.  To  verify  signatures,  the  API  needs  to 
contact an Amazon certificate server to download Amazon’s 
public key certificate. In our research, we found that a flaw 
472
C* 
in  the  function  enables  the  attacker  to  provide  his  own 
certificate  to  the  merchant  and  thus  to  circumvent  the 
verification.  This  vulnerability  widely  exists  in  various 
including  Amazon  Flexible 
Amazon  Payments  SDKs, 
Payment  Service,  Amazon  Simple  Pay  Standard,  Amazon 
Simple Pay Subscriptions, Amazon Simple Pay Marketplace 
and  Signature  Version  1  to  2  Migration.  Most  of  them 
support five languages – C#, Java, PHP, Perl, and Ruby. It 
has been confirmed that they are all vulnerable.  
referenced  by  certificateURL, 
Specifically,  all  URLs  signed  by  Amazon  Payments, 
such  as  an  IPN  message  and  the  URL  in  a  redirection 
response, have the following format: 
(https://merchant/someAPI?arg1&arg2&...&argN&certificateURL=
https://fps.amazonaws.com/certs/090909/PKICert.pem)
The  certificateURL  field,  which  we  omitted  in  the 
previous  sections  for  simplicity  of  presentation,  points  to 
Amazon’s  certificate  server  for  a  certificate  issued  by 
VeriSign to Amazon. The entire URL is signed by Amazon 
(denoted  as  C*),  including  certificateURL.  Thus, 
suppose  the  signature  C*  can  be  verified  using  the 
certificate 
is 
reasonable in practice to say that if the message is signed by 
Amazon,  then  the  certificate  is  an  Amazon  certificate,  and 
vice  versa.  It  seems  to  us  that  such  an  interdependency  of 
certificate authenticity and message authenticity might have 
caused  developers  of  validateSignatureV2  to  only 
verify  the  signature  using  the  certificate  referenced  by 
certificateURL, without verifying the certificate itself.  
To exploit this vulnerability, the attacker must act as a 
fake CaaS and  use a server  to store his own certificate. In 
our  exploit,  we  used  OpenSSL  to  generate  a  X.509 
certificate,  hosted  it  at  https://cert.foo.com,  which  is  a 
server  under  our  control.  Thus  we  can  sign  any  URL  as 
follows:  
it 
(https://merchant/someAPI?arg1&arg2&...&argN& 
certificateURL =https://cert.foo.com/PKICert.pem)
A* 
This signed URL, either used as a redirection URL or as an 
IPN, survives all checks in validateSignatureV2, and 
therefore allows the shopper to completely bypass Amazon 
Payments,  to  directly  check  out  items  from  the  merchant 
without pay. We have confirmed the feasibility of the attack 
on  NopCommerce.  In  the  next  section,  we  report  our 
communication  with  the  development  team  of  Amazon 
Payments on this flaw and their fix. 
D.  Popular stores running closed-source software  
The source-code-based analysis on NopCommerce and 
Interspire,  two  of  the  most  popular  merchant  applications, 
demonstrate  that  logic  flaws  in  CaaS-based  checkouts  are 
indeed credible threats. Less clear here, however, is whether 
the  unavaibility  of  merchant’s  source  code  can  effectively 
conceal this type of logic flaws. To this end, we conducted 
black-box exploit analyses on two big stores, Buy.com and 
JR.com,  based  on  general  knowledge  obtained  earlier  but 
without merchants’ source code:  
473
• 
Buy.com flaw – shopping for free after paying for 
one item. Buy.com is a leading online retailer with over 12 
million  customers  in  seven  countries.  It  sells  millions  of 
products in various categories, including computers, cellular 
phones, software, books, movies, music, sporting goods, etc.  
It integrates PayPal Express as one of its checkout methods. 
Before  the  exploit  analysis,  we  made  a  test  purchase  to 
capture the messages sent and received by the browser, and 
found that they are similar to those produced by Interspire’s 
integration  (Figure  7),  though  we  could  not  observe  the 
communication  between  PayPal  and  Buy.com,  and  the 
program logic on the merchant side.  
Using  our  experience  with  Interspire’s  integration  of 
PayPal Express (Section III.B.1), we evaluated the security 
protection  of  Buy.com  through  attempts  such  as  changing 
the  gross  amount  of  an  order,  examining  the  way  that 
signatures  are  used,  etc.  Despite 
initial  failures,  we 
discovered an effective exploit on Buy.com. As described in 
Section  III.B.1,  PayPal  Express  uses  a  token  to  uniquely 
identify a payment. We found that once the payment of one 
order  is  done,  the  shopper  can  substitute  the  token  of  this 
order for that of a different order (RT3.a in Figure 7).  This 
allows  the  shopper  to  skip  the  payment  step  (RT2.a),  but 
still convince Buy.com of the success of the payment for the 
second order.  
Without  access  to  the  messages  between  Buy.com  and 
PayPal (RT3.a.a  and  RT3.a.b in  Figure  7)  and  the 
merchant-side code, we cannot conclusively determine what 
goes  wrong  with  this  checkout  integration.    Nevertheless, 
our study does confirm the pervasiveness of the logic flaws 
within  checkout  systems,  which  affect  the  coordination 
between 
the  possibility  of 
identifying and exploiting them even in the absence of the 
code of those systems. 
integrated  services,  and 
JR.com flaw – attacker website selling items from 
JR.com  at  arbitrary  prices.  JR.com  is  the  online  store  of 
J&R, a well-known electronics retailer located in downtown 
New  York  City.    The  website  accepts  payments  from 
Amazon’s  buyer  accounts.  Through  studying  the  HTTP 
traffic  of 
the  browser  and  developer  documentations 
provided by Amazon, we found that the payment method is 
Checkout-By-Amazon [31], which we did not investigate in 
our previous analyses of NopCommerce and Interspire.  
A  convenient  way  to  integrate  Checkout-By-Amazon  is 
using  the  Seller  Central  form  below,  a  toolkit  provided  by 
Amazon that automatically generates the HTML code for an 
Amazon-Checkout button for the item to sell.  
  Describe your item
Item Name 
Seller SKU Price (in US$) 
Note: Fields with an 
Item Description Item Weight
are required.
• 
*
*
*
To  generate  the  HTML  code,  the  seller  first  fills  in 
information  such  as  the  item’s  name,  price,  and  the  seller 
SKU, etc. When the form is submitted, these fields, as well 
as  a  hidden  field  containing  the  seller’s  merchantID,  are 
used  by  Amazon  to  produce  the  checkout  button,  whose 
HTML code is signed by Amazon and can be cut-and-pasted 
onto the merchant web page selling the item. 
Our  analysis  shows  that  again,  the  merchant  and  the 
CaaS fail to coordinate their security checks, which subjects 
this  integration  to  the  shopper’s  exploit.    On  one  hand, 
Amazon does not fully prevent one merchant from creating 
a  payment  button  for  another  merchant’s  item:  the  only 
information to tell the merchants apart is merchantID, which 
is public information and specified in a hidden field in the 
browser.  On the other hand, like Interspire’s integration of 
Google Checkout, JR.com does not create an order to bind 
an item to the price the shopper is  willing to pay until the 
last step of the transaction, when the payment is complete, 
nor  does  it  double-check  the  price  at  the  payment-
completion time. This allows the following attack: 
Consider the attacker Mark who wants to buy an item I 
from  JR.com  at  a  price  X.   From  the  browser  traffic 
corresponding to the Amazon-Checkout button for the item 
on  JR.com,  Mark  can  acquire  the  value  of  each  field, 
including  the  hidden  field  merchantID.  Then,  he  enters 
these  values  into  the  Seller  Central  form  but  changes  the 
price to X’.  To make the button point to JR.com, Mark also 
modifies  the  content  of  the  hidden  field,  replacing  his  ID 
with  that  of  JR.com.   After  that,  he  submits  the  form  to 
acquire  a  signed  checkout  button  from  Amazon,  which 
binds the price X’ to JR.com’s item I. Once Mark clicks on 
it,  Amazon  asks  him  to  pay  X’  to  JR.com,  then  uses  a 
redirection  to  notify  JR.com  of  the  completion  of  the 
payment, which is accepted by the store.  
IV.  EXPLOIT ANALYSES ON LIVE STORES 
to  understand  whether 
In this section, we report our experiments on real-world 
web stores using CaaS services. The purpose of this study is 
twofold.  First,  we  want 
the 
vulnerabilities  we  discovered  in  merchant  software  can 
indeed  be  used  against  real  online  businesses,  thereby 
posing a credible and imminent security threat; second, we 
hope  to  understand  a  number  of  aspects  related  to  the 
exploits  in  real-world  settings,  such  as  how  detectable  the 
exploits are by regular auditing processes of the stores, how 
anonymous  the  attacks  can  be,  and  how  various  parties 
would  respond  to  our  bug  reporting.  To  this  end,  we 
executed a series of exploit analyses within the ethical and 
legal boundary, as elaborated below.   
Responsible experiment design.  We carefully designed our 
evaluation strategy in order to carry out our experiments in a 
responsible  manner. The entire study  was conducted under 
the guidance of a lawyer at Indiana University. We strictly 
followed the principles below when performing exploits on 
real-world online stores:  (1) we performed no intrusion of 
either  merchant  websites or CaaS services; (2)  we ensured 
that  no financial damage  was inflicted upon the  merchants 
involved,  by  canceling  orders  when  possible,  returning 
items,  paying  for  unpaid  balances,  or  placing  orders  in  a 
special  way  (e.g.,  making  two  separate  orders,  one  with  a 
lower  price  and  the  other  with  a  higher  price);  (3)  we 
communicated our findings to the affected organizations and 
did what we could to help them improve their systems.  Our 
responsible  research  effort  was  appreciated  by 
these 
organizations. 
A.  Experiments on live online stores 
for 
is  a  debugging  proxy 
Here  we  report  our  experiments  conducted  in  various 
settings, ranging from open-source software on our server to 
closed-source  systems  on  commercial  websites,  which 
demonstrates the credibility and pervasiveness of the threat.  
Merchants on our server. We downloaded the latest version 