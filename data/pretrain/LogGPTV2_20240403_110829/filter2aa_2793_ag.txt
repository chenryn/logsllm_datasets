gef➤
disassemble main
0x080483fd : push
ebp
# 将栈底 ebp 压栈 (esp -= 4)
0x080483fe : mov
ebp,esp
# 更新 ebp 为当前栈顶 esp
0x08048400 : push
0x58
# 将 arg8 压栈 (esp -= 4)
0x08048402 : push
0x4d
# 将 arg7 压栈 (esp -= 4)
0x08048404 : push
0x42
# 将 arg6 压栈 (esp -= 4)
0x08048406 : push
0x37
# 将 arg5 压栈 (esp -= 4)
0x08048408 :push
0x2c
# 将 arg4 压栈 (esp -= 4)
0x0804840a :push
0x21
# 将 arg3 压栈 (esp -= 4)
0x0804840c :push
0x16
# 将 arg2 压栈 (esp -= 4)
0x0804840e :push
0xb
# 将 arg1 压栈 (esp -= 4)
0x08048410 : call
0x80483db 
# 调用 func (push 0x08048415)
0x08048415 :add
esp,0x20
# 恢复栈顶 esp
0x08048418 :leave
# (mov esp, ebp; pop ebp)
0x08048419 :ret
# 函数返回 (pop eip)
gef➤
disassemble func
0x080483db : push
ebp
# 将栈底 ebp 压栈 (esp -= 4)
0x080483dc : mov
ebp,esp
# 更新 ebp 为当前栈顶 esp
0x080483de : sub
esp,0x10
# 为局部变量开辟栈空间
0x080483e1 : mov
eax,DWORD PTR [ebp+0x8]
# 取出 arg1
0x080483e4 : add
eax,0x1
# 计算 loc1
0x080483e7 :mov
DWORD PTR [ebp-0x8],eax
# loc1 放入栈
0x080483ea :mov
eax,DWORD PTR [ebp+0x24]
# 取出 arg8
0x080483ed :add
eax,0x8
# 计算 loc8
0x080483f0 :mov
DWORD PTR [ebp-0x4],eax
# loc8 放入栈
0x080483f3 :mov
edx,DWORD PTR [ebp-0x8]
0x080483f6 :mov
eax,DWORD PTR [ebp-0x4]
0x080483f9 :add
eax,edx
# 计算返回值
0x080483fb :leave
# (mov esp, ebp; pop ebp)
0x080483fc :ret
# 函数返回 (pop eip)
第 10 章
栈溢出与 ROP ┃ XLII
首先，被调用函数 func()的 8 个参数从后向前依次入栈，当执行 call 指令时，下一条指令的地址
0x08048415 作为返回地址入栈。然后程序跳转到 func()，在函数开头，将调用函数的 ebp 压栈保存
并更新为当前的栈顶地址 esp，作为新的栈基址，而 esp 则下移为局部变量开辟空间。函数返回时则
相反，通过 leave 指令将 esp 恢复为当前的 ebp，并从栈中将调用者的 ebp 弹出，最后 ret 指令弹出返
回地址作为 eip，程序回到 main()函数中，最后抬高 esp 清理被调用者的参数，一次函数调用的过程
就结束了。
gef➤
disassemble main
0x000000000040050a :
push
rbp
# 将栈底 rbp 压栈 (rsp -= 8)
0x000000000040050b :
mov
rbp,rsp
# 更新 rbp 为当前栈顶 rsp
0x000000000040050e :
push
0x58
# 将 arg8 压栈 (rsp -= 8)
0x0000000000400510 :
push
0x4d
# 将 arg7 压栈 (rsp -= 8)
0x0000000000400512 :
mov
r9d,0x42
# 将 arg6 赋值给 r9
0x0000000000400518 : mov
r8d,0x37
# 将 arg5 赋值给 r8
0x000000000040051e : mov
ecx,0x2c
# 将 arg4 赋值给 rcx
0x0000000000400523 : mov
edx,0x21
# 将 arg3 赋值给 rdx
0x0000000000400528 : mov
esi,0x16
# 将 arg2 赋值给 rsi
0x000000000040052d : mov
edi,0xb
# 将 arg1 赋值给 rdi
0x0000000000400532 : call 0x4004d6 
# 调用 func (push 0x400537)
0x0000000000400537 : add
rsp,0x10
# 恢复栈顶 rsp
0x000000000040053b : leave
# (mov rsp, rbp; pop rbp)
0x000000000040053c : ret
# 函数返回 (pop rip)
gef➤
disassemble func
0x00000000004004d6 :
push
rbp
# 将栈底 rbp 压栈 (rsp -= 8)
0x00000000004004d7 :
mov
rbp,rsp
# 更新 rbp 为当前栈顶 rsp
0x00000000004004da :
mov
DWORD PTR [rbp-0x14],edi
0x00000000004004dd :
mov
DWORD PTR [rbp-0x18],esi
0x00000000004004e0 : mov
DWORD PTR [rbp-0x1c],edx
0x00000000004004e3 : mov
DWORD PTR [rbp-0x20],ecx
0x00000000004004e6 : mov
DWORD PTR [rbp-0x24],r8d
0x00000000004004ea : mov
DWORD PTR [rbp-0x28],r9d
0x00000000004004ee : mov
eax,DWORD PTR [rbp-0x14]
0x00000000004004f1 : add
eax,0x1
0x00000000004004f4 : mov
DWORD PTR [rbp-0x8],eax
0x00000000004004f7 : mov
eax,DWORD PTR [rbp+0x18]
0x00000000004004fa : add
eax,0x8
0x00000000004004fd : mov
DWORD PTR [rbp-0x4],eax
0x0000000000400500 : mov
edx,DWORD PTR [rbp-0x8]
0x0000000000400503 : mov
eax,DWORD PTR [rbp-0x4]
0x0000000000400506 : add
eax,edx
# 计算返回值
0x0000000000400508 : pop
rbp
# 恢复 rbp (rsp += 8)
0x0000000000400509 : ret
# 函数返回 (pop rip)
对于 x86-64 的程序，前 6 个参数分别通过 rdi、rsi、rdx、rcx、r8 和 r9 进行传递，剩余参数才像
x86 一样从后向前依次压栈。除此之外，我们还发现 func()没有下移 rsp 开辟栈空间的操作，导致 rbp
和 rsp 的值是相同的，其实这是一项编译优化：根据 AMD64 ABI 文档的描述，rsp 以下 128 字节的
区域被称为 red zone，这是一块被保留的内存，不会被信号或者中断所修改。于是，func()作为叶子
第 10 章
栈溢出与 ROP ┃ XLIII
函数就可以在不调整栈指针的情况下，使用这块内存保存临时数据。
在更极端的优化下，rbp 作为栈基址其实也是可以省略的，编译器完全可以使用 rsp 来代替，从
而减少指令数量。GCC 编译时添加参数“-fomit-frame-pointer”即可。
10.1.2
危险函数
大多数缓冲区溢出问题都是错误地使用了一些危险函数所导致的。第一类危险函数是 scanf、gets
等输入读取函数。下面的语句将用户输入读到 buf 中。其中，第一条 scanf 的格式字符串"%s"并未限
制读取长度，明显存在栈溢出的风险；第二条 scanf 使用"%ns"的形式限制了长度为 10，看似没有问
题，但由于 scanf()函数会在字符串末尾自动添加一个“\0”，如果输入刚好 10 个字符，那么“\0”
就会溢出。所以最安全的做法应该是第三条 scanf，既考虑了缓冲区大小，又考虑了函数特性。
char buf[10];
scanf("%s", buf);
scanf("%10s", buf);
scanf("%9s", buf);
第二类危险函数是 strcpy、strcat、sprintf 等字符串拷贝函数。考虑下面的语句，read()函数读取
用户输入到 srcbuf，这里很好地限制了长度。接下来 strcpy()把 srcbuf 拷贝到 destbuf，此时由于 destbuf
的最大长度只有 10，小于 srcbuf 的最大长度 20，显然是有可能造成溢出的。对于这种情况，建议使
用对应的安全函数 strncpy、strncat、snprintf 等来代替，这些函数都有一个 size 参数用于限制长度。
int len;
char srcbuf[20];
char destbuf[10];
len = read(0, srcbuf, 19);
src[len] = 0;
strcpy(destbuf, srcbuf);
10.1.3
ret2libc
本节我们先讲解 shellcode 注入和 re2libc 两种比较简单的利用方式。
我们知道，栈溢出的主要目的就是覆写函数的返回地址，从而劫持控制流，在没有 NX 保护机
制的时候，在栈溢出的同时就可以将 shellcode 注入栈上并执行，如图 10-2 所示。padding1 使用任意
数据即可，比如“AAAA...”，一直覆盖到调用者的 ebp。然后在返回地址处填充上 shellcode 的地址，
当函数返回时，就会跳到 shellcode 的位置。padding2 也可以使用任意数据，但如果开启了 ASLR，
使 shellcode 的地址不太确定，那么就可以使用 NOP sled（“\x90\x90...”）作为一段滑板指令，当程
序跳到这段指令时就会一直滑到 shellcode 执行。
第 10 章
栈溢出与 ROP ┃ XLIV
图 10-2
ret2shellcode 示例
开 启 NX 后 ， 栈 上 的 shellcode 不 可 执 行 ， 这 时 就 需 要 使 用 ret2libc 来 调 用 libc.so 中 的
system("/bin/sh")，如图 10-3 所示。这一次返回地址被覆盖上 system()函数的地址，padding2 为其添
加一个伪造的返回地址，长度为 4 字节。紧接着放上"bin/sh"字符串的地址，作为 system()函数的参
数。如果开启了 ASLR，那么 system()和"/bin/sh"的地址就变成随机的，此时需要先做内存泄露，再
填充真实地址。
图 10-3
ret2libc 示例
这两种技术的示例请见 4.3 节，开启 ASLR 的例子参见 4.4 节。
10.2
返回导向编程
10.2.1
ROP 简介
最开始，要利用栈溢出只需将返回地址覆盖为 jmp esp 指令的地址，并在后面添加 shellcode 就
可以执行。后来引入了 NX 缓解机制，数据所在的内存页被标记为不可执行，此时再执行 shellcode
第 10 章
栈溢出与 ROP ┃ XLV
就会抛出异常。既然注入新代码不可行，那么就复用程序中已有的代码。libc.so 几乎在每个程序执
行时都会加载，攻击者就开始考虑利用 libc 中的函数，这种技术就是 ret2libc，我们在上一节已经讲
过。但是这种技术也有缺陷，首先，虽然攻击者可以一个接一个地调用 libc 中的函数，但这个执行
流仍然是线性的，而不像代码注入那样任意执行，其次，攻击者只能使用程序 text 段和 libc 中已有
的函数，通过移除这些特定的函数就可以限制此类攻击。
论文 The Geometry of Innocent Flesh on the Bone: Return-into-libc without Function Calls (on the
x86)提出了一种新的攻击技术——返回导向编程（Return-Oriented Programming, ROP），无须调用任
何函数即可执行任意代码。
使用 ROP 攻击，首先需要扫描文件，提取出可用的 gadget 片段（通常以 ret 指令结尾），然后
将这些 gadget 根据所需要的功能进行组合，达到攻击者的目的。举个小例子，exit(0)的 shellcode 由
下面 4 条连续的指令组成。
; exit(0) shellcode
xor eax, eax
xor ebx, ebx
inc eax
int 0x80
如果要将它改写成 ROP 链，则需要分别找到包含这些指令的 gadget，由于它们在地址上不一定
是连续的，所以需要通过 ret 指令进行连接，依次执行。
; exit(0) ROP chain
xor eax, eax
; gadget 1
ret
xor ebx, ebx
; gadget 2
ret
inc eax