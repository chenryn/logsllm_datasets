# Information-Flow Analysis of Android Applications in DroidSafe

**Authors:**
- Michael I. Gordon
- Deokhwan Kim
- Jeff H. Perkins
- Limei Gilham
- Nguyen Nguyen
- Martin C. Rinard

**Affiliations:**
- **Massachusetts Institute of Technology (MIT)**
  - Michael I. Gordon, Deokhwan Kim, Jeff H. Perkins, Martin C. Rinard
- **Kestrel Institute**
  - Limei Gilham
- **UWIN Software, LLC**
  - Nguyen Nguyen

**Contact Information:**
- MIT: PI:EMAIL, PI:EMAIL, PI:EMAIL, PI:EMAIL
- Kestrel Institute: PI:EMAIL
- UWIN Software, LLC: PI:EMAIL

## Abstract
We present DroidSafe, a static information-flow analysis tool designed to identify potential leaks of sensitive information in Android applications. DroidSafe combines a comprehensive and accurate model of the Android runtime with static analysis techniques that enable scalability. This combination is achieved through accurate analysis stubs, which facilitate the effective analysis of code with semantics outside the scope of Java, and a suite of analyses that can statically resolve communication targets identified by dynamically constructed values such as strings and class designators.

Our experimental results demonstrate that:
1. DroidSafe achieves unprecedented precision and accuracy in Android information-flow analysis, as measured on a standard set of benchmark applications.
2. DroidSafe detects all malicious information-flow leaks inserted into 24 real-world Android applications by three independent, hostile Red-Team organizations. In contrast, the previous state-of-the-art analysis detects less than 10% of these malicious flows.

## 1. Introduction
Sensitive information leaks in Android applications, often caused by malicious or misused code (e.g., advertising libraries), represent a significant security threat to the Android ecosystem [1, 2]. The current Android security model, which relies on users granting applications access to sensitive information, has been insufficient in preventing information leaks [1]. Many applications require legitimate access to sensitive data but only for specific purposes, such as sending location information to authorized mapping servers.

To address this problem, researchers have developed various systems to analyze information flows in Android applications. Dynamic analysis frameworks execute instrumented versions of Android applications to observe behaviors [4–6], but they can miss information flows not exercised during testing and may be detected and circumvented by malicious applications [4]. Additionally, dynamic analysis is vulnerable to denial-of-service attacks if malware is activated during execution.

Static analysis frameworks aim to discover all potential sensitive flows before application execution [7–13]. However, scaling to large applications and maintaining precision are significant challenges. A particular issue in developing static analyses for Android is the size, richness, and complexity of the Android API and runtime, which typically comprises millions of lines of code in multiple languages. Accurate and precise models are crucial for detecting malicious flows, and any inaccuracies can provide opportunities for attackers to insert undetected malicious flows or generate false positives.

DroidSafe addresses these challenges by providing an accurate and precise information-flow analysis for large, real-world Android applications. We evaluate DroidSafe on 24 complete real-world Android applications augmented with malicious information-flow leaks by three hostile Red-Team organizations. DroidSafe accurately detects all 69 malicious flows while reporting a manageable number of total flows. In contrast, the state-of-the-art system, FlowDroid [8] + IccTA [14], detects only 6 of the 69 malicious flows and reports a larger number of false positives.

Additionally, we evaluate DroidSafe on DROIDBENCH, a suite of 94 Android information-flow benchmarks, achieving the highest accuracy (94.3%) and precision (87.6%) to date. DroidSafe fails to report only implicit flows in DROIDBENCH. We also evaluate DroidSafe on a suite of 40 Android explicit information-flow benchmarks, where it achieves 100% accuracy and precision compared to FlowDroid + IccTA’s 34.9% accuracy and 79.0% precision.

## 2. The Android Model and Analysis Co-design
The extensive and complex interactions between the Android execution environment and applications necessitate a comprehensive and accurate model for information-flow analysis. We started with the Android Open Source Project (AOSP) [15], which provides a Java implementation of much of the Android environment. However, the size and complexity of the Android environment required us to develop the model and analysis together as an integrated whole.

### 2.1 Accurate Analysis Stubs
While AOSP provides an accurate and precise model for much of Android, it lacks critical parts of the Android runtime. We developed a technique called "accurate analysis stubs" to effectively analyze code whose full semantics lie outside the scope of AOSP. Each stub is written in Java and incompletely models the runtime behavior of the modeled code, but it is complete for the abstractions used in the analysis (points-to and information-flow). Examples of added semantics include native methods, event callback initiation, component lifecycle events, and hidden state maintained by the Android runtime.

Accurate analysis stubs simplify the development of the analysis by eliminating the need for method summaries in different specification languages, hard-coded policies, or multi-language code analysis. They also support the use of sophisticated language features such as inheritance, polymorphism, exceptions, and threads, promoting effective engineering of stubs that accurately model key aspects of the Android environment.

### 2.2 Scalable, Precise Points-To Analysis
Both our Android model and applications heavily use sophisticated language features that complicate static program analyses. DroidSafe deploys a modern global object-sensitive points-to analysis specifically designed to handle such features [18]. To enhance scalability, DroidSafe identifies and eliminates object sensitivity for classes not relevant to information flow, enabling a context depth greater than previous work [18, 19].

### 2.3 Flow-Insensitive Analyses
DroidSafe employs a flow-insensitive information-flow analysis, which accurately considers all possible runtime event orderings triggered by asynchronous callbacks. This approach enables the analysis to scale to an accurate and precise Android model, tracking information flows through the Android environment. Flow-sensitive analyses, in contrast, struggle with scalability and often rely on imprecise conservative flow summaries or blanket policies for Android API methods [8, 9, 11].

### 2.4 Static Communication Target Resolution
Information flows in Android apps involve inter-component and inter-application communication, with targets identified by dynamically constructed values (e.g., strings, URIs, class designators) packaged in Intent objects. DroidSafe combines accurate analysis stubs, an internal representation of IntentFilter registrations, and a novel points-to analysis to precisely track strings and resolve communication targets. This enables DroidSafe to accurately analyze calls involving Activity, Service, BroadcastReceiver, and ContentProvider components, incorporating both manifest-defined and programmatically defined IntentFilter registrations.

These techniques enable DroidSafe to provide unparalleled accuracy and precision in analyzing critical Android communication mechanisms, outperforming existing tools in both accuracy and precision.

## 3. Conclusion
DroidSafe represents a significant advancement in static information-flow analysis for Android applications, providing unprecedented accuracy and precision. By combining a comprehensive and accurate model of the Android runtime with advanced static analysis techniques, DroidSafe can detect all malicious information-flow leaks in real-world applications, making it a valuable tool for enhancing the security of the Android ecosystem.