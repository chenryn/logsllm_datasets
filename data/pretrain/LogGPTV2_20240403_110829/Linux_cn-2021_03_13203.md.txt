---
author: Seth Kenlon
category: 软件开发
comments_data: []
count:
  commentnum: 0
  favtimes: 0
  likes: 0
  sharetimes: 0
  viewnum: 6702
date: '2021-03-14 21:06:00'
editorchoice: false
excerpt: 使用 GNU 调试器来解决你的代码问题。
fromurl: https://opensource.com/article/21/3/debug-code-gdb
id: 13203
islctt: true
largepic: /data/attachment/album/202103/14/210547k3q5lek8j9qspkks.jpg
permalink: /article-13203-1.html
pic: /data/attachment/album/202103/14/210547k3q5lek8j9qspkks.jpg.thumb.jpg
related: []
reviewer: wxy
selector: lujun9972
summary: 使用 GNU 调试器来解决你的代码问题。
tags:
- 调试
- GDB
thumb: false
title: 学习使用 GDB 调试代码
titlepic: true
translator: wxy
updated: '2021-03-14 21:06:00'
---
> 
> 使用 GNU 调试器来解决你的代码问题。
> 
> 
> 
![](/data/attachment/album/202103/14/210547k3q5lek8j9qspkks.jpg "magnifying glass on computer screen, finding a bug in the code")
GNU 调试器常以它的命令 `gdb` 称呼它，它是一个交互式的控制台，可以帮助你浏览源代码、分析执行的内容，其本质上是对错误的应用程序中出现的问题进行逆向工程。
故障排除的麻烦在于它很复杂。[GNU 调试器](https://www.gnu.org/software/gdb/) 并不是一个特别复杂的应用程序，但如果你不知道从哪里开始，甚至不知道何时和为何你可能需要求助于 GDB 来进行故障排除，那么它可能会让人不知所措。如果你一直使用 `print`、`echo` 或 [printf 语句](https://opensource.com/article/20/8/printf)来调试你的代码，当你开始思考是不是还有更强大的东西时，那么本教程就是为你准备的。
### 有错误的代码
要开始使用 GDB，你需要一些代码。这里有一个用 C++ 写的示例应用程序（如果你一般不使用 C++ 编写程序也没关系，在所有语言中原理都是一样的），其来源于 [猜谜游戏系列](/article-12985-1.html) 中的一个例子。
```
#include 
#include  //srand
#include   //printf
using namespace std;
int main () {
srand (time(NULL));
int alpha = rand() % 8;
cout  0
Hardware watchpoint 5: beta > 0
(gdb) continue
Continuing.
Breakpoint 3, main () at debug.cpp:11
11      cout  0
Old value = false
New value = true
main () at debug.cpp:14
14      printf("alpha is set to is %s\n", alpha);
(gdb)
```
你可以用 `next` 手动步进完成代码的执行，或者你可以用断点、观察点和捕捉点来控制代码的执行。
### 用 GDB 分析数据
你可以以不同格式查看数据。例如，以八进制值查看 `beta` 的值：
```
(gdb) print /o beta
$4 = 02
```
要查看其在内存中的地址：
```
(gdb) print /o &beta
$5 = 0x2
```
你也可以看到一个变量的数据类型：
```
(gdb) whatis beta
type = int
```
### 用 GDB 解决错误
这种自省不仅能让你更好地了解什么代码正在执行，还能让你了解它是如何执行的。在这个例子中，对变量运行的 `whatis` 命令给了你一个线索，即你的 `alpha` 和 `beta` 变量是整数，这可能会唤起你对 `printf` 语法的记忆，使你意识到在你的 `printf` 语句中，你必须使用 `%d` 来代替 `%s`。做了这个改变，就可以让应用程序按预期运行，没有更明显的错误存在。
当代码编译后发现有 bug 存在时，特别令人沮丧，但最棘手的 bug 就是这样，如果它们很容易被发现，那它们就不是 bug 了。使用 GDB 是猎取并消除它们的一种方法。
### 下载我们的速查表
生活的真相就是这样，即使是最基本的编程，代码也会有 bug。并不是所有的错误都会导致应用程序无法运行（甚至无法编译），也不是所有的错误都是由错误的代码引起的。有时，bug 是基于一个特别有创意的用户所做的意外的选择组合而间歇性发生的。有时，程序员从他们自己的代码中使用的库中继承了 bug。无论原因是什么，bug 基本上无处不在，程序员的工作就是发现并消除它们。
GNU 调试器是一个寻找 bug 的有用工具。你可以用它做的事情比我在本文中演示的要多得多。你可以通过 GNU Info 阅读器来了解它的许多功能：
```
$ info gdb
```
无论你是刚开始学习 GDB 还是专业人员的，提醒一下你有哪些命令是可用的，以及这些命令的语法是什么，都是很有帮助的。
* [下载 GDB 速查表](https://opensource.com/downloads/gnu-debugger-cheat-sheet)
---
via: 
作者：[Seth Kenlon](https://opensource.com/users/seth) 选题：[lujun9972](https://github.com/lujun9972) 译者：[wxy](https://github.com/wxy) 校对：[wxy](https://github.com/wxy)
本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创编译，[Linux中国](https://linux.cn/) 荣誉推出