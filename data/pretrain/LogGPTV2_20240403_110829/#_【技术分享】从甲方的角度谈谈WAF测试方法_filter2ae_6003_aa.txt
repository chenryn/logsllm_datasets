# 【技术分享】从甲方角度探讨WAF测试方法
本文是翻译文章，原文来源：安全客。译文仅供参考，具体内容表达及含义以原文为准。
作者：[lewisec_com](http://bobao.360.cn/member/contribute?uid=2778418248)  
稿费：300RMB（欢迎投稿！）  
投稿方式：发送邮件至linwei#360.cn，或登录网页版在线投稿

## 0X01 测试思路
### 环境搭建
- **服务器**：使用DVWA（Damn Vulnerable Web Application）搭建一个包含多种漏洞的网站，并开启访问日志以便后续分析。具体搭建过程不再赘述。
- **WAF**：采用反向代理部署方式，将DVWA服务器通过反向代理映射出虚拟服务IP（VS IP）。测试过程中，所有payload均发送至VS IP，经WAF处理后传递给DVWA服务器。
- **测试方法**：客户端构造payload并提交给VS IP，然后在服务器端查看访问日志。如果payload被有效识别并过滤，则访问日志中不应出现相关记录。

## 0X02 OWASP TOP10 常规防御
### SQL注入（SQLi）
- **GET型注入**：例如，`http://10.44.100.18/dvwa/vulnerabilities/sqli/?id=22&Submit=Submit` 中的参数 `id` 可以进行注入，构造相应的payload即可。
- **POST型注入**：可以通过Burp Suite抓包DVWA登录过程，进而构造POST型注入。

### 跨站脚本攻击（XSS）
- DVWA中同时存在反射型XSS和存储型XSS，构造相应payload即可。

### 其他常见攻击类型
- 包括跨站请求伪造（CSRF）、命令注入、暴力破解、文件上传等，DVWA都提供了相应的测试环境，此处不再详述。
- 目前版本的DVWA未涵盖的一些攻击类型如服务器端请求伪造（SSRF）、反序列化攻击、Struts漏洞以及心脏出血等，需要单独考虑。

## 0X03 绕过技术的防御
除了对最常见的攻击手法进行防御外，WAF还应具备识别变形payload的能力。目前国内外商业WAF产品可以识别99%以上的常规攻击手段，主要区别在于对各类编码后的变形payload的分析能力。

### 防御策略
#### 思路一
- WAF捕获HTTP数据包后，执行多重解码操作，将每次解码结果提取正则表达式并与特征库匹配。不同厂商支持的解码层数有所不同，例如F5 ASM最多支持5层解码，并允许用户手动设定层数；其他厂商虽不支持自定义解码层数，但同样具备一定的解码能力。

#### 思路二
- 鉴于正则匹配容易产生误报和漏报问题，部分厂商转向语义分析方法。长亭科技的SqlChop即为一例，更多详情请参阅 [SQLChop – 一个新型 SQL 注入检测引擎](https://blog.chaitin.com/sqlchop-the-sqli-detection-engine/)。

### 测试建议
- 在实际测试过程中，需手动对payload进行编码变形，包括但不限于以下几种：
  - **SQLi变形**
    - URL编码
    - Unicode编码
    - 关键字大小写替换
    - 关键字转十六进制
    - 使用反引号包裹关键字
    - 利用注释符（如`/#! #/` 或 `/##/`）截断关键字
    - 利用`%00`截断
    - 修改HTTP头部字段，如将`x-originating-IP`或`X-remote-addr`设为`127.0.0.1`
    - 使用SQLMap的各种tamper脚本进行尝试
  - **XSS变形**
    - XSS变形种类繁多，WAF漏报现象尤为严重。常见的变形示例有：`confirm(0); /XSS`等。
  - **文件包含绕过**
    - 利用`data:text/plain;base64,`进行编码，例如：`data:text/plain;base64,ZGF0YTp0ZXh0L3BsYWluLDw/cGhwIHN5c3RlbSgnY2F0IC92YXIvd3d3L0ZpbGVJbmNsdWRlLnBocCcpPz4=`
  - **文件上传绕过**
    - 文件名变形，如：`123.php.123`、`123.asp;.gif`、`as.php%00.gif`
    - 在文件开头添加特定字符，如：`GIF89a`

以上仅为部分测试建议，具体实施时还需根据实际情况灵活调整。