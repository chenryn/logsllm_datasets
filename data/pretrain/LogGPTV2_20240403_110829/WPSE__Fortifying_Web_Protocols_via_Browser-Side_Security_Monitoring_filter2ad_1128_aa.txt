title:WPSE: Fortifying Web Protocols via Browser-Side Security Monitoring
author:Stefano Calzavara and
Riccardo Focardi and
Matteo Maffei and
Clara Schneidewind and
Marco Squarcina and
Mauro Tempesta
WPSE: Fortifying Web Protocols via  
Browser-Side Security Monitoring
Stefano Calzavara and Riccardo Focardi, Università Ca’ Foscari Venezia;  
Matteo Maffei and Clara Schneidewind, TU Wien; Marco Squarcina  
and Mauro Tempesta, Università Ca’ Foscari Venezia
https://www.usenix.org/conference/usenixsecurity18/presentation/calzavara
This paper is included in the Proceedings of the 
27th USENIX Security Symposium.
August 15–17, 2018 • Baltimore, MD, USA
978-1-939133-04-5
Open access to the Proceedings of the 27th USENIX Security Symposium is sponsored by USENIX.WPSE: Fortifying Web Protocols via Browser-Side Security Monitoring
Stefano Calzavara
Universit`a Ca’ Foscari Venezia
PI:EMAIL
Matteo Maffei
TU Wien
PI:EMAIL
Riccardo Focardi
Universit`a Ca’ Foscari Venezia
PI:EMAIL
Clara Schneidewind
TU Wien
PI:EMAIL
Marco Squarcina
Mauro Tempesta
Universit`a Ca’ Foscari Venezia
Universit`a Ca’ Foscari Venezia
PI:EMAIL
PI:EMAIL
Abstract
We present WPSE, a browser-side security monitor for
web protocols designed to ensure compliance with the
intended protocol ﬂow, as well as conﬁdentiality and in-
tegrity properties of messages. We formally prove that
WPSE is expressive enough to protect web applications
from a wide range of protocol implementation bugs and
web attacks. We discuss concrete examples of attacks
which can be prevented by WPSE on OAuth 2.0 and
SAML 2.0, including a novel attack on the Google imple-
mentation of SAML 2.0 which we discovered by formal-
izing the protocol speciﬁcation in WPSE. Moreover, we
use WPSE to carry out an extensive experimental evalua-
tion of OAuth 2.0 in the wild. Out of 90 tested websites,
we identify security ﬂaws in 55 websites (61.1%), in-
cluding new critical vulnerabilities introduced by track-
ing libraries such as Facebook Pixel, all of which ﬁxable
by WPSE. Finally, we show that WPSE works ﬂawlessly
on 83 websites (92.2%), with the 7 compatibility issues
being caused by custom implementations deviating from
the OAuth 2.0 speciﬁcation, one of which introducing a
critical vulnerability.
1
Introduction
Web protocols are security protocols deployed on top
of HTTP and HTTPS, most notably to implement au-
thentication and authorization at remote servers. Popular
examples of web protocols include OAuth 2.0, OpenID
Connect, SAML 2.0 and Shibboleth, which are routinely
used by millions of users to access security-sensitive
functionalities on their personal accounts.
Unfortunately, designing and implementing web pro-
tocols is a particular error-prone task even for security
experts, as witnessed by the large number of vulnerabili-
ties reported in the literature [43, 6, 5, 50, 28, 27, 48, 46].
The main reason for this is that web protocols involve
communication with a web browser, which does not
strictly follow the protocol speciﬁcation, but reacts asyn-
chronously to any input it receives, producing messages
which may have an import on protocol security. Reac-
tiveness is dangerous because the browser is agnostic to
the web protocol semantics: it does not know when the
protocol starts, nor when it ends, and is unaware of the
order in which messages should be processed, as well as
of the conﬁdentiality and integrity guarantees desired for
a protocol run. For example, in the context of OAuth 2.0,
Bansal et al. [6] discussed token redirection attacks en-
abled by the presence of open redirectors, while Fett et
al. [19] presented state leak attacks enabled by the com-
munication of the Referer header; these attacks are not
apparent from the protocol speciﬁcation alone, but come
from the subtleties of the browser behaviour.
Major service providers try to aid software developers
to correctly integrate web protocols in their websites by
means of JavaScript APIs; however, web developers are
not forced to use them, can still use them incorrectly [47],
and the APIs themselves do not necessarily implement
the best security practices [43]. This unfortunate situa-
tion led to the proliferation of attacks against web proto-
cols even at popular services.
In this paper, we propose a fundamental paradigm shift
to strengthen the security guarantees of web protocols.
The key idea we put forward is to extend browsers with a
security monitor which is able to enforce the compliance
of browser behaviours with respect to the web protocol
speciﬁcation. This approach brings two main beneﬁts:
are
1. web applications
automatically protected
against a large class of bugs and vulnerabilities on
the browser-side, since the browser is aware of the
intended protocol ﬂow and any deviation from it is
detected at runtime;
2. protocol speciﬁcations can be written and veriﬁed
once, possibly as a community effort, and then uni-
formly enforced at a number of different websites
by the browser.
USENIX Association
27th USENIX Security Symposium    1493
Remarkably, though changing the behaviour of web
browsers is always delicate for backward compatibility,
the security monitor we propose is carefully designed
to interact gracefully with existing websites, so that the
website functionality is preserved unless it critically de-
viates from the intended protocol speciﬁcation. More-
over, a large set of the monitor functionalities can be im-
plemented as a browser extension, thereby offering im-
mediate protection to Internet users and promising a sig-
niﬁcant practical impact.
1.1 Contributions
In this paper, we make the following contributions:
1. we identify three fundamental browser-side security
properties for web protocols, that is, the conﬁden-
tiality and integrity of message components, as well
as the compliance with the intended protocol ﬂow.
We discuss concrete examples of their import for
the popular authorization protocol OAuth 2.0;
2. we semantically characterize these properties and
formally prove that their enforcement sufﬁces to
protect the web application from a wide range of
protocol implementation bugs and attacks on the ap-
plication code running in the browser;
3. we propose the Web Protocol Security Enforcer,
or WPSE for short, a browser-side security moni-
tor designed to enforce the aforementioned security
properties, which we implement as a publicly avail-
able Google Chrome extension;
4. we experimentally assess the effectiveness of
WPSE by testing it against 90 popular websites
making use of OAuth 2.0 to implement single sign-
on at major identity providers. In our analysis, we
identiﬁed security ﬂaws in 55 websites (61.1%), in-
cluding new critical vulnerabilities caused by track-
ing libraries such as Facebook Pixel, all of which
ﬁxable by WPSE. We show that WPSE works ﬂaw-
lessly on 83 websites (92.2%), with the 7 compati-
bility issues being caused by custom implementa-
tions deviating from the OAuth 2.0 speciﬁcation,
one of which introducing a critical vulnerability;
5. to show the generality of our approach, we also
considered SAML 2.0, a popular web authoriza-
tion protocol: while formalizing its speciﬁcation,
we found a new attack on the Google implemen-
tation of SAML 2.0 that has been awarded a bug
bounty according to the Google Vulnerability Re-
ward Program.1
1 https://www.google.com/about/appsecurity/reward-
program/
2 Security Challenges in Web Protocols
The design of web protocols comes with various security
challenges which can often be attributed to the presence
of the web browser that acts as a non-standard protocol
participant.
In the following, we discuss three crucial
challenges, using the OAuth 2.0 authorization protocol
as illustrative example.
2.1 Background on OAuth 2.0
OAuth 2.0 [25] is a web protocol that enables resource
owners to grant controlled access to resources hosted at
remote servers. Typically, OAuth 2.0 is also used for au-
thenticating the resource owner to third parties by giving
them access to the resource owner’s identity stored at an
identity provider. This functionality is known as Single
Sign-On (SSO). Using standard terminology, we refer to
the third-party application as relying party (RP) and to
the website storing the resources, including the identity,
as identity provider (IdP).2
The OAuth 2.0 speciﬁcation deﬁnes four different pro-
tocol ﬂows, also known as grant types or modes. We
focus on the authorization code mode and the implicit
mode since they are the most commonly used by web-
sites.
The authorization code mode is intended for a RP
whose main functionality is carried out at the server side.
The high-level protocol ﬂow is depicted in Figure 1. For
the sake of readability, we introduce a simpliﬁed version
of the protocol abstracting from some implementation
details that are presented in Section 4.1. The protocol
works as follows:
1(cid:13) the user U sends a request to RP for accessing a
remote resource. The request speciﬁes the IdP that
holds the resource.
In the case of SSO, this step
determines which IdP should be used;
2(cid:13) RP redirects U to the login endpoint of IdP. This
request contains the RP’s identity at IdP, the URI
that IdP should redirect to after successful login and
an optional state parameter for CSRF protection that
should be bound to U’s state;
3(cid:13) IdP answers to the authorization request with a lo-
gin form and the user provides her credentials;
4(cid:13) IdP redirects U to the URI of RP speciﬁed at step
2(cid:13), including the previously received state parame-
ter and an authorization code;
2 The OAuth 2.0 speciﬁcation distinguishes between resource
servers and authorization servers instead of considering one identity
provider that stores the user’s identity as well as its resources [25], but
it is common practice to unify resource and authorization servers as one
party [19, 43, 27].
1494    27th USENIX Security Symposium
USENIX Association
U
1○ IdP
RP
IdP
2○ RP ID, redirect URI, state
3○ Login form
User credentials
4○ authorization code, state
RP(redirect URI)
5○ authorization code, RP ID, redirect URI
6○ access token
7○ access token
8○ resource
Figure 1: OAuth 2.0 (authorization code mode).
5(cid:13) RP makes a request to IdP with the authorization
code, including its identity, the redirect URI and op-
tionally a shared secret with the IdP;
6(cid:13) IdP answers with an access token to RP;
7(cid:13) RP makes a request for the user’s resource to IdP,
including the access token;
8(cid:13) IdP answers RP with the user’s resource at IdP.
The implicit mode differs from the authorization code
mode in steps 4(cid:13)- 6(cid:13). Instead of granting an authorization
code to RP, the IdP provides an access token in the frag-
ment identiﬁer of the redirect URI. A piece of JavaScript
code embedded in the page located at the redirect URI
extracts the access token and communicates it to the RP.
2.2 Challenge #1: Protocol Flow
Protocols are speciﬁed in terms of a number of sequen-
tial message exchanges which honest participants are ex-
pected to follow, but the browser is not forced to comply
with the intended protocol ﬂow.
Example in OAuth 2.0. The use of the state param-
eter is recommended to prevent attacks leveraging this
idiosyncrasy. When OAuth is used to implement SSO
and RP does not provide the state parameter in its autho-
rization request to IdP at step 2(cid:13), it is possible to force
the honest user’s browser to authenticate as the attacker.
This attack is known as session swapping [43].
We give a short overview on this attack against the
authorization code mode. A web attacker A initiates SSO
at RP with an identity provider IdP, performs steps 1(cid:13)-
3(cid:13) of the protocol and learns a valid authorization code
for her session. Next, A creates a page on her website
that, when visited, automatically triggers a request to the
redirect URI of RP and includes the authorization code.
When a honest user visits this page, the login procedure
is completed at RP and an attacker session is established
in the user’s browser.
2.3 Challenge #2: Secrecy of Messages
The security of protocols typically relies on the conﬁ-
dentiality of cryptographic keys and credentials, but the
browser is not aware of which data must be kept secret
for protocol security.
Example in OAuth 2.0. The secrecy of the authoriza-
tion credentials (namely authorization codes and access
tokens) is crucial for meeting the protocol security re-
quirements, since their knowledge allows an attacker to
access the user’s resources. The secrecy of the state pa-
rameter is also important to ensure session integrity.
An example of an unintended secrets leakage is the
state leak attack described in [19]. If the page loaded at
the redirect URI in step 4(cid:13) loads a resource from a ma-
licious server, the state parameter and the authorization
code (that are part of the URL) are leaked in the Referer
header of the outgoing request. The learned authoriza-
tion code can potentially be used to obtain a valid access
token for U at IdP, while the leaked state parameter en-
ables the session swapping attack discussed previously.
2.4 Challenge #3: Integrity of Messages
Protocol participants are typically expected to perform
a number of runtime checks to prove the integrity of
the messages they receive and ensure the integrity of
the messages they send, but the browser cannot perform
USENIX Association
27th USENIX Security Symposium    1495
these checks unless they are explicitly carried out in a
JavaScript implementation of the web protocol.
Example in OAuth 2.0. An attack that exploits this
weakness is the na¨ıve RP session integrity attack pre-
sented in [19]. Suppose that RP supports SSO with vari-
ous identity providers and uses different redirect URIs to
distinguish between them. In this case, an attacker con-
trolling a malicious identity provider AIdP can confuse
the RP about which provider is being used and force the
user’s browser to login as the attacker.
To this end, the attacker starts a SSO login at RP with
an honest identity provider HIdP to obtain a valid au-
thorization code for her account. If a honest user starts
a login procedure at RP with AIdP, in step 4(cid:13) AIdP is
expected to redirect the user to AIdP’s redirect URI at
RP. If AIdP redirects to the redirect URI of HIdP with
the authorization code from the attacker session, then RP
mistakenly assumes that the user intended to login with
HIdP. Therefore, RP completes the login with HIdP us-
ing the attacker’s account.
3 WPSE: Design and Implementation
The Web Protocol Security Enforcer (WPSE) is the ﬁrst
browser-side security monitor addressing the peculiar
challenges of web protocols. The current prototype is
implemented as an extension for Google Chrome, which
we make available online.3
3.1 Key Ideas of WPSE
We illustrate WPSE on the authorization code mode of
OAuth 2.0, where Google is used as identity provider and
the state parameter is not used (since it is not mandatory
at Google). For simplicity, here we show only the most
common scenario where the user has an ongoing session
with the identity provider and the authorization to access
the user’s resources on the provider has been previously
granted to the relying party.
3.1.1 Protocol Flow
WPSE describes web protocols in terms of the HTTP(S)
exchanges observed by the web browser, following the
so-called browser relayed messages methodology ﬁrst
introduced by Wang et al. [46]. The speciﬁcation of the
protocol ﬂow deﬁnes the syntactic structure and the ex-
pected (sequential) order of the HTTP(S) messages, sup-
porting the choice of different execution branches when
a particular protocol message is sent or received by the
browser. The protocol speciﬁcation is given in XML (cf.
Appendix A), but for the sake of readability, we use in
this paper an equivalent representation in terms of ﬁnite
3 https://sites.google.com/site/wpseproject/
state automata, like the one depicted in Figure 2. Intu-
itively, each state of the automaton represents one stage
of the protocol execution in the browser. By sending an
HTTP(S) request or receiving an HTTP(S) response as
dictated by the protocol, the automaton steps to the next
state until it reaches a ﬁnal state denoting the end of the
protocol run. Afterwards, the automaton moves back to
the initial state and a new protocol run can start.
The edges of the automaton are labeled with message