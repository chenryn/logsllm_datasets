# WPSE: Fortifying Web Protocols via Browser-Side Security Monitoring

## Authors
- Stefano Calzavara, Università Ca’ Foscari Venezia
- Riccardo Focardi, Università Ca’ Foscari Venezia
- Matteo Maffei, TU Wien
- Clara Schneidewind, TU Wien
- Marco Squarcina, Università Ca’ Foscari Venezia
- Mauro Tempesta, Università Ca’ Foscari Venezia

## Publication Details
- **Title**: WPSE: Fortifying Web Protocols via Browser-Side Security Monitoring
- **Conference**: 27th USENIX Security Symposium
- **Date**: August 15–17, 2018
- **Location**: Baltimore, MD, USA
- **Proceedings ISBN**: 978-1-939133-04-5
- **URL**: [https://www.usenix.org/conference/usenixsecurity18/presentation/calzavara](https://www.usenix.org/conference/usenixsecurity18/presentation/calzavara)

## Abstract
We introduce WPSE, a browser-side security monitor for web protocols designed to ensure compliance with the intended protocol flow, as well as the confidentiality and integrity of messages. We formally prove that WPSE is expressive enough to protect web applications from a wide range of protocol implementation bugs and web attacks. We discuss concrete examples of attacks that can be prevented by WPSE on OAuth 2.0 and SAML 2.0, including a novel attack on the Google implementation of SAML 2.0 discovered through formalizing the protocol specification in WPSE. Additionally, we use WPSE to conduct an extensive experimental evaluation of OAuth 2.0 in real-world scenarios. Out of 90 tested websites, we identify security flaws in 55 (61.1%), including new critical vulnerabilities introduced by tracking libraries such as Facebook Pixel, all of which can be fixed by WPSE. Finally, we demonstrate that WPSE operates seamlessly on 83 websites (92.2%), with the 7 compatibility issues being caused by custom implementations deviating from the OAuth 2.0 specification, one of which introduces a critical vulnerability.

## 1. Introduction
Web protocols, such as OAuth 2.0, OpenID Connect, SAML 2.0, and Shibboleth, are security protocols deployed over HTTP and HTTPS to implement authentication and authorization at remote servers. These protocols are widely used by millions of users to access security-sensitive functionalities on their personal accounts.

Designing and implementing web protocols is error-prone, even for security experts, as evidenced by the numerous vulnerabilities reported in the literature. The primary reason for this is the involvement of web browsers, which do not strictly follow protocol specifications but react asynchronously to any input, potentially producing messages that impact protocol security. Reactiveness is dangerous because the browser is agnostic to the protocol semantics: it does not know when the protocol starts or ends, and is unaware of the order in which messages should be processed, as well as the confidentiality and integrity guarantees required for a protocol run. For example, in OAuth 2.0, Bansal et al. [6] discussed token redirection attacks enabled by open redirectors, while Fett et al. [19] presented state leak attacks due to the communication of the Referer header. These attacks are not apparent from the protocol specification alone but arise from the subtleties of browser behavior.

Major service providers offer JavaScript APIs to help software developers correctly integrate web protocols into their websites. However, developers are not required to use these APIs, may use them incorrectly, and the APIs themselves may not implement the best security practices. This situation has led to the proliferation of attacks against web protocols, even at popular services.

In this paper, we propose a fundamental paradigm shift to strengthen the security guarantees of web protocols. Our key idea is to extend browsers with a security monitor that enforces compliance with the web protocol specification. This approach offers two main benefits:
1. Web applications are automatically protected against a large class of bugs and vulnerabilities on the browser side, as the browser is aware of the intended protocol flow and detects any deviations at runtime.
2. Protocol specifications can be written and verified once, possibly as a community effort, and then uniformly enforced across multiple websites by the browser.

Notably, although changing web browser behavior is delicate due to backward compatibility concerns, our proposed security monitor is designed to interact gracefully with existing websites, preserving functionality unless it critically deviates from the intended protocol specification. A large set of the monitor's functionalities can be implemented as a browser extension, providing immediate protection to Internet users and promising significant practical impact.

### 1.1 Contributions
In this paper, we make the following contributions:
1. We identify three fundamental browser-side security properties for web protocols: confidentiality and integrity of message components, and compliance with the intended protocol flow. We discuss concrete examples of their importance for the popular authorization protocol OAuth 2.0.
2. We semantically characterize these properties and formally prove that their enforcement suffices to protect web applications from a wide range of protocol implementation bugs and attacks on the application code running in the browser.
3. We propose the Web Protocol Security Enforcer (WPSE), a browser-side security monitor designed to enforce the aforementioned security properties. We implement WPSE as a publicly available Google Chrome extension.
4. We experimentally assess the effectiveness of WPSE by testing it against 90 popular websites using OAuth 2.0 for single sign-on at major identity providers. In our analysis, we identified security flaws in 55 websites (61.1%), including new critical vulnerabilities caused by tracking libraries such as Facebook Pixel, all of which can be fixed by WPSE. We show that WPSE works flawlessly on 83 websites (92.2%), with the 7 compatibility issues being caused by custom implementations deviating from the OAuth 2.0 specification, one of which introduces a critical vulnerability.
5. To demonstrate the generality of our approach, we also consider SAML 2.0, a popular web authorization protocol. While formalizing its specification, we discovered a new attack on the Google implementation of SAML 2.0, which was awarded a bug bounty under the Google Vulnerability Reward Program. [1]

[1] [https://www.google.com/about/appsecurity/reward-program/](https://www.google.com/about/appsecurity/reward-program/)

## 2. Security Challenges in Web Protocols
The design of web protocols comes with various security challenges, often attributed to the presence of the web browser, which acts as a non-standard protocol participant. We discuss three crucial challenges using the OAuth 2.0 authorization protocol as an illustrative example.

### 2.1 Background on OAuth 2.0
OAuth 2.0 [25] is a web protocol that enables resource owners to grant controlled access to resources hosted on remote servers. It is also used for authenticating the resource owner to third parties by giving them access to the resource owner’s identity stored at an identity provider (IdP). This functionality is known as Single Sign-On (SSO). Using standard terminology, we refer to the third-party application as the relying party (RP) and the website storing the resources, including the identity, as the IdP.

The OAuth 2.0 specification defines four different protocol flows, also known as grant types or modes. We focus on the authorization code mode and the implicit mode, as they are the most commonly used by websites.

#### 2.1.1 Authorization Code Mode
The authorization code mode is intended for an RP whose main functionality is carried out on the server side. The high-level protocol flow is depicted in Figure 1. For readability, we present a simplified version of the protocol, abstracting from some implementation details:

1. The user U sends a request to the RP for accessing a remote resource, specifying the IdP that holds the resource.
2. The RP redirects U to the login endpoint of the IdP, including the RP’s identity at the IdP, the URI to which the IdP should redirect after a successful login, and an optional state parameter for CSRF protection.
3. The IdP responds with a login form, and the user provides their credentials.
4. The IdP redirects U to the URI of the RP specified in step 2, including the previously received state parameter and an authorization code.
5. The RP makes a request to the IdP with the authorization code, including its identity, the redirect URI, and optionally a shared secret with the IdP.
6. The IdP responds with an access token to the RP.
7. The RP makes a request for the user’s resource to the IdP, including the access token.
8. The IdP responds to the RP with the user’s resource.

#### 2.1.2 Implicit Mode
The implicit mode differs from the authorization code mode in steps 4-6. Instead of granting an authorization code to the RP, the IdP provides an access token in the fragment identifier of the redirect URI. A piece of JavaScript code embedded in the page located at the redirect URI extracts the access token and communicates it to the RP.

### 2.2 Challenge #1: Protocol Flow
Protocols are specified in terms of sequential message exchanges that honest participants are expected to follow, but the browser is not forced to comply with the intended protocol flow.

#### Example in OAuth 2.0
The use of the state parameter is recommended to prevent attacks leveraging this idiosyncrasy. If the RP does not provide the state parameter in its authorization request to the IdP, it is possible to force the honest user’s browser to authenticate as the attacker. This attack is known as session swapping [43].

Here is a brief overview of this attack against the authorization code mode. An attacker A initiates SSO at the RP with an identity provider IdP, performs steps 1-3 of the protocol, and learns a valid authorization code for her session. Next, A creates a page on her website that, when visited, automatically triggers a request to the redirect URI of the RP and includes the authorization code. When a honest user visits this page, the login procedure is completed at the RP, and an attacker session is established in the user’s browser.

### 2.3 Challenge #2: Secrecy of Messages
The security of protocols typically relies on the confidentiality of cryptographic keys and credentials, but the browser is not aware of which data must be kept secret for protocol security.

#### Example in OAuth 2.0
The secrecy of the authorization credentials (authorization codes and access tokens) is crucial for meeting the protocol security requirements, as their knowledge allows an attacker to access the user’s resources. The secrecy of the state parameter is also important to ensure session integrity.

An example of unintended secrets leakage is the state leak attack described in [19]. If the page loaded at the redirect URI in step 4 loads a resource from a malicious server, the state parameter and the authorization code (part of the URL) are leaked in the Referer header of the outgoing request. The learned authorization code can potentially be used to obtain a valid access token for the user at the IdP, while the leaked state parameter enables the session swapping attack discussed previously.

### 2.4 Challenge #3: Integrity of Messages
Protocol participants are typically expected to perform runtime checks to ensure the integrity of the messages they receive and send, but the browser cannot perform these checks unless they are explicitly carried out in a JavaScript implementation of the web protocol.

#### Example in OAuth 2.0
An attack that exploits this weakness is the naive RP session integrity attack presented in [19]. Suppose the RP supports SSO with various identity providers and uses different redirect URIs to distinguish between them. An attacker controlling a malicious identity provider (AIdP) can confuse the RP about which provider is being used and force the user’s browser to log in as the attacker.

To achieve this, the attacker starts an SSO login at the RP with an honest identity provider (HIdP) to obtain a valid authorization code for her account. If a honest user starts a login procedure at the RP with AIdP, in step 4, AIdP is expected to redirect the user to AIdP’s redirect URI at the RP. If AIdP redirects to the redirect URI of HIdP with the authorization code from the attacker’s session, the RP mistakenly assumes that the user intended to log in with HIdP. Therefore, the RP completes the login with HIdP using the attacker’s account.

## 3. WPSE: Design and Implementation
The Web Protocol Security Enforcer (WPSE) is the first browser-side security monitor addressing the unique challenges of web protocols. The current prototype is implemented as a Google Chrome extension, which we make available online. [3]

[3] [https://sites.google.com/site/wpseproject/](https://sites.google.com/site/wpseproject/)

### 3.1 Key Ideas of WPSE
We illustrate WPSE using the authorization code mode of OAuth 2.0, where Google is used as the identity provider and the state parameter is not used (since it is not mandatory at Google). For simplicity, we show only the most common scenario where the user has an ongoing session with the identity provider and the authorization to access the user’s resources on the provider has been previously granted to the relying party.

#### 3.1.1 Protocol Flow
WPSE describes web protocols in terms of the HTTP(S) exchanges observed by the web browser, following the browser-relayed messages methodology first introduced by Wang et al. [46]. The specification of the protocol flow defines the syntactic structure and the expected (sequential) order of the HTTP(S) messages, supporting the choice of different execution branches when a particular protocol message is sent or received by the browser. The protocol specification is given in XML (see Appendix A), but for readability, we use an equivalent representation in terms of finite state automata, as shown in Figure 2. Each state of the automaton represents one stage of the protocol execution in the browser. By sending an HTTP(S) request or receiving an HTTP(S) response as dictated by the protocol, the automaton transitions to the next state until it reaches a final state denoting the end of the protocol run. Afterwards, the automaton returns to the initial state, and a new protocol run can start.

The edges of the automaton are labeled with messages, and the states represent the stages of the protocol.