function getCsvColumn(csv, index){
var regex = /(, 1\r?\n|^)([^,\r\n]+1°(?: [^"]|**)*")?/g,
result = [],
columnIndex = 0,
match;
while (natch = regex.exec(csv)) {
// Check the value of backreference 1. If it’s a conna,
// increnent columnIndex. Otherwise, reset it to zero.
if (match[1] - ",") {
+xapuunto
} else {
columnIndex = 0;
1f (columnIndex == index){
1
// Add the field (backref 2) at the end of the result array
result ,push(match[2]);
// If there is an empty match, prevent some brousers fron getting
// stuck in an infinite loop
1f (match.index == regex.lastIndex) 
regex.lastIndex++;
return result;
9.12 Extract CSV Fields from a Specific Column I 567
---
## Page 584
Discussion
Since the regular expressions here are repurposed from Recipe 9.11, we won’t repeat
the detailed explanation of how they work. However, this recipe includes new
JavaScript example code that uses the regex to extract fields at a specific index from
each record in the CSV subject string.
In the provided code, the getCsvColusn() function works by iterating over the subject
string one match at a time. After each match, backreference 1 is examined to check
whether it contains a comma. If so, you’ve matched something other than the first field
in a row, so the colunnIndex variable is incremented to keep track of which column
you’re at. If backreference 1 is anything other than a comma (i.e., an empty string or a
line break), you've matched the first field in a new row and colusnIndex is reset to zero.
The next step in the code is to check whether the columnIndex counter has reached the
index you’re looking to extract. Every time it does, the value of backreference 2 (ev-
erything after the leading delimiter) is pushed to the result array. After you’ve iterated
Buuuoo Keae ue suman uosung (uunoasa8 su us ioafqns aujua aq 1aao
values for the entire specified column (in this example, the third column). The list of
matches is then dumped into the second text box on the page, with each value separated
by a line feed character (n).
A simple improvement would be to let the user specify which column index should be
extracted, via a prompt or additional text field. The getCsvColumn() function we’ve been
discussing is already written with this feature in mind, and lets you specify the desired
column as an integer (counting from zero) via its second parameter (index).
Variations
Although using code to iterate over a string one CSV field at a time allows for extra
flexibility, if you're using a text editor to get the job done, you may be limited to just
search-and-replace. In this situation, you can achieve a similar result by matching each
complete record and replacing it with the value of the field at the column index you’re
searching for (using a backreference). The following regexes illustrate this technique
for particular column indexes, replacing each record with the field in a specific column.
With all of these regexes, if any record does not contain at least as many fields as the
column index you're searching for, that record will not be matched and will be left in
place.
Match a CSV record and capture the field in column 1 to backreference 1
((（1[]=)|+[u\x\]= for column 5, and so on. If you're working with column 3, you can
simply remove the f1) if you prefer, since it has no effect here.
Replacement string
The same replacement string (backreference 1) is used with all of these regexes. Re-
placing each match with backreference 1 should leave you with just the fields you're
searching for.
$1
Replatement text flavors: .NET, Java, JavaScript, Perl, PHP
Replacement text flavors: Python, Ruby
SeeAlso
Recipe 9.11 shows how to use the regex in this recipe to change the delimiters in a CSV
file from commas to tabs.
Techniques used in the regular expressions and replacement text in this recipe are
discussed in Chapter 2. Recipe 2.2 explains how to match nonprinting characters.
Recipe 2.3 explains character classes. Recipe 2.5 explains anchors. Recipe 2.8 explains
altermation.
.Recipe 2.9explains grouping.
Recipe  2.12 explains repetition.
Recipe 2.21 explains how to insert text matched by capturing groups into the replace-
ment text.
9.13MatchINlSectionHeaders
Problem
You want to match all section headers in an INI file
9.13 Match INI Section Headers | 569
---
## Page 586
Solution
INI section headers appear at the beginning of a line, and are designated by placing a
name within square brackets (e.g., [Section1]). Those rules are simple to translate into
a regex:
\[[\]rn]+]
Regexoptions: ~ and S match at line breaks
Regexflavers: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
Discussion
There aren’t many parts to this regex, so it’s easy to break down:
•The leading  matches the position at the beginning of a line, since the *^ and $
match at line breaks" option is enabled.
•\[ matches a literal [ character. It’s escaped with a backslash to prevent [ from
starting a character class.
 °[ 1daoxa asseep Xue souoe eq ssep aoeneq paneaau  st  followed by the ..) for named capture (see named
~ operator, 139
(?.) for positive lookahead (see lokaheads)
capturing groups)
# character
(?>..) for atomic groups (see atomic groups)
 Bundess)
for comments, 94, 95
(?i) mode modifier, 29, 30, 36, 65, 128
$ token, 276, 279
(?m) mode modifier, 5, 40, 44, 46
as anchor, 4144, 363, 366, 377, 381, 498
(n) mode modifer, 130
for multiple lines, 43, 363
(?P=name) for named backreferences, 71
in JavaScript, 286
(?s) mode modifier, 5, 40
in Perl, 286
(?x) mode modifier, 95
in Ruby, 43, 44, 366
* quantifier, 77, 247, 339, 414, 443, 516, 565
vs. Z token, 247, 285, 286
6 'aynuenb +,
$& variable, 99, 147, 150, 202, 374
“? quantifier, 77, 368, 554, 559561
S′ token, 103, 211
+ quantifier, 247, 276, 341, 360, 370, 573
$10 and higher groups, 100101
and backtracking, 420
$_token, 103, 138, 187, 190, 217, 218
greedy vs. lazy use, 307
$ (dollar backtick) token, 103, 211
in lookbehind, 404
$~ variable, 150, 153, 155, 161, 163, 203
making possessive, 522
%+ hash (Perl), 163, 196
6 *sayguenb ++
%r prefix (Ruby), 116
+？ quantifier, 307
(7) for mpty ngarivelkahead,91,352
 (dot) metacharacter, 3840, 314, 422
 character, 34, 467
(?!...) for negative lookahead (see lookaheads)
?#...), 95
abuse of, 39
(7&rname) for subroutines, 350
matching any character with, 3840