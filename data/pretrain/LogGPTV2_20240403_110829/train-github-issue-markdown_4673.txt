 **Is your feature request related to a problem? Please describe.**
I'm struggling with a poor performance when certain number of meshes are being
rendered.
Doing some research about the inner working of the threejs pipeline, I found
that in the render process is being performed a filtering with the purpose of
renders only visible objects laying within the camera frustum. But despite to
be nesting the meshes in groups, the process of filtering is performed only in
Mesh, Line or Point objects.
**Describe the solution you'd like**
Could be interesting to implement the possibility of computing bounding boxes
in Groups to avoid to check their children if them are laying outside the
camera frustum.
For example if you have a scene with 100 groups of 10 meshes each, with the
actual way there are performed a 1000 of checks to know what meshes are laying
within the camera frustum. Implementing bounding boxes in groups, only 100
checks would be needed to know what groups are laying within the camera
frustum and then checks the children of groups which tested positive.
The bounding box of the group could be updated by the user or each time a
children is added or removed, performing an union with the children's bounding
box.
And the same could be applied in Raycaster
**Describe alternatives you've considered**
I have structured the scene in chunks, so my idea is to perform a pre filter
before call the render method.
**Additional context**
  * 