```
[WARN] 2.8 - Enable user namespace support
```
默认情况下，不会重新映射用户命名空间。映射它们，虽然可能，但目前可能会导致几个 Docker 特性的问题；有关已知限制的更多详细信息，请参见[https://docs . docker . com/engine/reference/command line/dockerd/](https://docs.docker.com/engine/reference/commandline/dockerd/):
```
[WARN] 2.11 - Ensure that authorization for Docker client commands is enabled
```
Docker 的默认安装允许无限制地访问 Docker 守护程序；您可以通过启用授权插件来限制对经过认证的用户的访问。详见[https://docs . docker . com/engine/extend/plugins _ authorization/](https://docs.docker.com/engine/extend/plugins_authorization/):
```
[WARN] 2.12 - Ensure centralized and remote logging is configured
```
由于我只运行单个主机，所以我没有使用服务(如`rsyslog`)将我的 Docker 主机的日志发送到中央服务器，也没有在我的 Docker 守护程序上配置日志驱动程序；详见[https://docs.docker.com/engine/admin/logging/overview/](https://docs.docker.com/engine/admin/logging/overview/):
```
[WARN] 2.14 - Ensure live restore is Enabled
```
`--live-restore`标志支持 Docker 中无守护程序容器的完全支持；这意味着，守护程序不会在关闭时停止容器，而是继续运行，并在重新启动时正确地重新连接到容器。由于向后兼容性问题，默认情况下不启用它；更多详情请见[https://docs.docker.com/engine/admin/live-restore/](https://docs.docker.com/engine/admin/live-restore/):
```
[WARN] 2.15 - Ensure Userland Proxy is Disabled
```
您的容器可以通过两种方式路由到外部世界:要么使用发夹 NAT，要么使用 userland 代理。对于大多数安装，发夹 NAT 模式是首选模式，因为它利用了 iptables 的优势，并且具有更好的性能。如果这不可用，Docker 将使用 userland 代理。现代操作系统上的大多数 Docker 安装将支持发夹 NAT 有关如何禁用 userland 代理的详细信息，请参见[https://docs . docker . com/engine/user guide/networking/default _ network/binding/](https://docs.docker.com/engine/userguide/networking/default_network/binding/):
```
[WARN] 2.18 - Ensure containers are restricted from acquiring new privileges
```
这将停止容器内的进程，这些进程可能无法通过设置 suid 或 sgid 位获得任何额外的特权；这可以限制任何试图访问特权二进制文件的危险操作的影响。
# 停靠守护程序配置文件
我在这一部分没有`[WARN]`状态，这是意料之中的，因为 Docker 是使用 Docker Machine 部署的。
# 容器映像和构建文件
对于容器映像和构建文件，我有三种`[WARN]`状态；您可能会注意到，多行警告在状态后带有`*`前缀:
```
[WARN] 4.1 - Ensure a user for the container has been created
[WARN]     * Running as root: sshd
[WARN]     * Running as root: priv-nginx
[WARN]     * Running as root: root-nginx
```
我正在运行的容器中的进程都是作为根用户运行的；这是大多数容器的默认操作。更多信息见[https://docs.docker.com/engine/security/security/](https://docs.docker.com/engine/security/security/):
```
[WARN] 4.5 - Ensure Content trust for Docker is Enabled
```
为 Docker 启用内容信任可确保您正在提取的容器映像的来源，因为它们在您推送时经过数字签名；这意味着您总是在运行您想要运行的映像。有关内容信任的更多信息，请参见[https://docs . docker . com/engine/security/trust/content _ trust/](https://docs.docker.com/engine/security/trust/content_trust/):
```
[WARN] 4.6 - Ensure HEALTHCHECK instructions have been added to the container image
[WARN]     * No Healthcheck found: [sshd:latest]
[WARN]     * No Healthcheck found: [nginx:latest]
[WARN]     * No Healthcheck found: [ubuntu:16.04]
```
在建立自己的形象时，有可能建立在一个`HEALTHCHECK`；这确保了当一个容器从您的映像启动时，Docker 会定期检查您的容器的状态，如果需要，它会重新启动或重新启动它。更多详情可在[https://docs . docker . com/engine/reference/builder/# health check](https://docs.docker.com/engine/reference/builder/#healthcheck)上找到。
# 容器运行时
当我们在我们审计的 Docker 主机上启动容器时，我们有点傻，我们知道这里会有很多漏洞，总共有 11 个:
```
[WARN] 5.2 - Ensure SELinux security options are set, if applicable
[WARN]     * No SecurityOptions Found: sshd
[WARN]     * No SecurityOptions Found: root-nginx
```
前面的漏洞是假阳性；我们没有运行 SELinux，因为它是一台 Ubuntu 机器，SELinux 只适用于基于 Red Hat 的机器；相反，`5.1`向我们显示结果，这是一个`[PASS]`，这是我们想要的:
```
[PASS] 5.1  - Ensure AppArmor Profile is Enabled
```
接下来的两个`[WARN]`状态是我们自己创造的，如下所示:
```
[WARN] 5.4 - Ensure privileged containers are not used
[WARN]     * Container running in Privileged mode: priv-nginx
```
以下也是我们自己制作的:
```
[WARN] 5.6 - Ensure ssh is not run within containers
[WARN]     * Container running sshd: sshd
```
这些可以放心地忽略；你必须启动一个运行在`Privileged mode`中的容器，这应该是非常罕见的。只有当您的容器需要与您的 Docker 主机上运行的 Docker 引擎交互时；例如，当你运行一个图形用户界面(比如 Portainer)时，我们在[第 11 章](11.html) *中介绍过，Portainer -一个用于 Docker* 的图形用户界面。
我们还讨论了不应该在容器中运行 SSH 有一些用例，比如在某个网络中运行跳转主机；然而，这些应该是例外。
接下来的两个`[WARN]`状态被标记，因为在 Docker 上，默认情况下，Docker 主机上所有正在运行的容器都平等地共享资源；为容器设置内存和 CPU 优先级限制将确保您想要具有较高优先级的容器不会因较低优先级的容器而缺少资源:
```
[WARN] 5.10 - Ensure memory usage for container is limited
[WARN]      * Container running without memory restrictions: sshd
[WARN]      * Container running without memory restrictions: priv-nginx
[WARN]      * Container running without memory restrictions: root-nginx [WARN] 5.11 - Ensure CPU priority is set appropriately on the container [WARN]      * Container running without CPU restrictions: sshd
[WARN]      * Container running without CPU restrictions: priv-nginx
[WARN]      * Container running without CPU restrictions: root-nginx
```
正如我们在本章前面已经讨论过的，如果可能的话，您应该以只读方式启动容器，并将卷装载到您知道流程需要向其中写入数据的位置:
```
[WARN] 5.12 - Ensure the container's root filesystem is mounted as read only
[WARN]      * Container running with root FS mounted R/W: sshd
[WARN]      * Container running with root FS mounted R/W: priv-nginx
[WARN]      * Container running with root FS mounted R/W: root-nginx
```
引发以下标志的原因是，我们没有告诉 Docker 将我们公开的端口绑定到 Docker 主机上的特定 IP 地址:
```
[WARN] 5.13 - Ensure incoming container traffic is binded to a specific host interface
[WARN] * Port being bound to wildcard IP: 0.0.0.0 in sshd
```
由于我的测试 Docker 主机只有一个网卡，这不是太大的问题；然而，如果我的 Docker 主机有多个接口，那么这个容器将暴露给所有的网络，例如，如果我有一个外部和内部网络，这可能是一个问题。详见[https://docs.docker.com/engine/userguide/networking/](https://docs.docker.com/engine/userguide/networking/):
```
[WARN] 5.14 - Ensure 'on-failure' container restart policy is set to '5'
[WARN]      * MaximumRetryCount is not set to 5: sshd
[WARN]      * MaximumRetryCount is not set to 5: priv-nginx
[WARN]      * MaximumRetryCount is not set to 5: root-nginx
```
虽然我还没有使用`--restart`标志启动我的容器，但是`MaximumRetryCount`没有默认值。这意味着，如果一个容器一次又一次地发生故障，它会很高兴地坐在那里试图重启。这可能会对 Docker 主机产生负面影响；添加一个`5`的`MaximumRetryCount`将意味着容器将尝试重启五次，然后放弃:
```
[WARN] 5.25 - Ensure the container is restricted from acquiring additional privileges
[WARN]      * Privileges not restricted: sshd
[WARN]      * Privileges not restricted: priv-nginx
[WARN]      * Privileges not restricted: root-nginx
```
默认情况下，Docker 不会限制进程或其子进程通过 suid 或 sgid 位获得新权限。要了解如何停止此行为的详细信息，请参见[http://www . project atomic . io/blog/2016/03/no-new-privs-docker/](http://www.projectatomic.io/blog/2016/03/no-new-privs-docker/):
```
[WARN] 5.26 - Ensure container health is checked at runtime
[WARN]      * Health check not set: sshd
[WARN]      * Health check not set: priv-nginx
[WARN]      * Health check not set: root-nginx
```
同样，我们没有使用任何健康检查，这意味着 Docker 不会定期检查您的容器的状态。要查看引入此功能的拉请求的 GitHub 问题，请浏览至[https://github.com/moby/moby/pull/22719/](https://github.com/moby/moby/pull/22719/):
```
[WARN] 5.28 - Ensure PIDs cgroup limit is used
[WARN]      * PIDs limit not set: sshd
[WARN]      * PIDs limit not set: priv-nginx
[WARN]      * PIDs limit not set: root-nginx
```
攻击者可能会在您的容器中用一个命令触发叉式炸弹。这可能会使您的 Docker 主机崩溃，恢复的唯一方法是重新启动主机。您可以使用`--pids-limit`标志来防止这种情况。有关更多信息，请参见 https://github.com/moby/moby/pull/18697/的拉取请求。
# Docker 保安业务
本节包括关于最佳实践的`[INFO]`，如下所示:
```
[INFO] 6.1 - Perform regular security audits of your host system and containers
[INFO] 6.2 - Monitor Docker containers usage, performance and metering
[INFO] 6.3 - Backup container data
[INFO] 6.4 - Avoid image sprawl