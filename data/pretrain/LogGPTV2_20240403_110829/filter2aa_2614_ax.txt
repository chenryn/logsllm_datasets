■ 按钮：是指页面上的操作按钮，比如新增按钮、修改按钮、删除
按钮等。
■ 
链接：页面主体部分显示的除按钮外需要进行访问控制的超链
接。
■ 数据：页面显示的业务数据、资源、文件等。
Web应用程序通过以上元素的不同组合，融合不同的业务流程，完
成所支撑的业务功能，这里离不开授权与访问控制。一个模块，可能员
工A具有操作权限，而员工B不具有操作权限；一个菜单，员工A具有部
分上级菜单的操作权限，而员工B可能具有所有子菜单的权限；一个页
面上的多个按钮，可能员工A具有新增权限，而员工B具有审计和查询
权限；同一个页面上的链接，当员工A和员工B打开时，显示的数据是
完全不一样的，比如员工A显示的是北京地区的数据，而员工B显示的
却是上海地区的数据。这些场景的授权与访问控制过程在RBAC3模型
都有着对应的解决方案。
RBAC3模型的拓展主要是在原RBAC3模型的基础上增加了数据维
度的授权与访问控制，结合这套模型的概念模型，下面来看看它的具体
实现。
在这套模型中，其核心模型仍然不变，如图8-8所示。
●图8-8 RBAC3核心模型
其主要的区别在于权限以下的建模，将所授予的权限按照功能权限
和数据权限进行拆分，如图8-9所示。
●图8-9 RBAC3拓展模型
功能权限主要对应于功能菜单，通过分配功能菜单，再由菜单去
关联其中的按钮和链接；而数据权限是通过数据维度去控制，先分配
数据维度，再关联数据维度所分配的数据范围。在实际业务中，经常会
遇到这样的场景，比如某个银行柜员角色只能看到它所在地区的、部分
渠道的信息，假设地区是北京，渠道是电话客服和在线客服，那么此处
的数据权限包含两个维度，一个是地区，一个是渠道；地区的数据范围
是北京市所有网点，渠道的范围是电话客服和在线客服接入的业务。这
就是数据维度和数据范围对于访问控制的作用。对于非用户参与的API
接口的访问也是如此，通过功能级权限可以限制API的调用和访问，通
过数据级权限控制可以防止过度的接口数据响应。
当然在实际的业务中，数据库建模往往更为复杂。比如通过角色对
象中父子ID的关联，构建上下级角色关系；通过权限组，构建组内多个
权限之间的互斥、依赖、包含等关系；定义按钮实体为枚举类型，减少
冗余的关联关系数据等，这都是要系统设计人员根据实际业务情况去考
量的。
8.2.3 其他授权与访问控制技术
在API安全领域，除了上述介绍的OAuth授权协议和RBAC模型外，
还有一些其他的访问控制技术，下面仅做简要的介绍。
■ 
基于属性的访问控制（Attribute-Based 
Access 
Control，
ABAC）模型，通常与RBAC放在一起讨论，其访问控制思路是基于某
个对象的一组属性值，通过动态计算来进行授权判断，这在API限流、
业务风控等场景中会经常用到，但一般没有RBAC在应用程序中使用得
系统化，大多单点使用。
■ 
基于上下文的访问控制（Context-Based 
Access 
Control，
CBAC）模型，是基于通信上下文的访问控制模型，在硬件防火墙、
WAF产品中使用较多，需要结合数据流来分析其威胁情况，以便做出
正确的处理决策。
■ 基于ACL的访问控制，ACL是访问控制列表，通过检测是否命中
ACL规则来判断是否放行或阻断，也是非常常见的一种访问控制技术，
其典型的应用场景有路由访问策略、IP访问黑白名单、好友黑白名单
等。
8.3 常见的授权与访问控制漏洞
通过OAuth协议和RBAC模型相关知识的介绍，读者对API授权和访
问控制技术实现有了基本的了解，下面将结合一些案例，为读者讲解常
见的API授权与访问控制方面的安全漏洞。
8.3.1 OAuth 2.0协议相关漏洞
作为API技术中使用最为广泛的OAuth协议，因其暴露面大，受到
的攻击也是最多的。业界基于OAuth协议中的各个角色所承担功能的不
同，对攻击类型进行了划分，主要分为以下几种。
■ 针对OAuth客户端的攻击。
■ 针对授权服务器的攻击。
■ 针对受保护资源的攻击。
■ 针对OAuth令牌的攻击。
下面，就以上4种类型的攻击，结合漏洞案例做简要的分析。
1.OAuth客户端漏洞
OAuth客户端就是普通的应用程序，只是作为客户端的形式接入到
OAuth流程中而已。其常见的漏洞除了在身份认证章节提及的回调URL
漏洞、XSS漏洞、点击劫持、客户端认证凭据泄露等漏洞外，还有一类
漏洞需引起重视，即令牌泄露或被盗。
令牌泄露或被盗是表现的结果，而被盗的方式各有不同。常见的有
以下几种。
■ Cookie泄露从而令牌被盗取。
■ 第三方应用劫持从而令牌被盗取。
■ 其他方式导致的令牌泄露。
在因Cookie泄露而导致令牌被盗取的情况中，以因Referer被访问导
致令牌泄露和Cookie存储不安全为主；在第三方应用劫持从而令牌被盗
取中，以攻击OAuth授权流程和回调URL、state参数的CSRF为主，如
CVE-2020-7741漏洞。
HelloJS是标准化的OAuth客户端SDK类库，通过代码封装来简化普
通应用的OAuth授权的使用过程，比如Google+API、Facebook Graph、
Windows Live Connect等。通过HelloJS可以很方便地调用这些RESTful
API。在CVE-2020-7741这个漏洞中，因为跳转URL未做转义或过滤处
理，导致XSS漏洞的产生。其关键代码片段如下：
此段代码中，location.assign函数跳转的URL可以被注入JavaScript脚
本，如URL的值为oauth_redirect=javascript:alert(xss)。而在此漏洞被修
复后，添加的代码主要如下：
通过调用isValidUrl函数，严格对参数格式进行URL校验，有效地
防止了XSS脚本的注入。
2.授权服务器漏洞
熟悉OAuth的读者都知道，OAuth协议的流程需要多方参与，这就
导致其整体的安全需要依赖于各个参与方，而授权服务器作为OAuth协
议中的核心组件之一，它的安全性如果不够，则影响着整个流程的安
全。在针对OAuth协议的攻击中，专门针对授权服务器的攻击也占了不
小的比例。
授权服务器的安全通常包含其运行所依赖的基础设施、主机、网络
通信的安全性，这里主要从OAuth协议的层面去讨论其漏洞，主要有如
下漏洞。
■ 客户端仿冒或欺骗。
■ 会话劫持。
■ 不安全的URL跳转或重定向。
从OAuth的授权流程可以了解到，对于客户端身份的认证主要依赖
于客户端认证凭据，比如AK/SK、客户端签名、使用者的用户名/密码
等；而授权时，主要依赖于授权码作为授权凭证，向授权服务器换取访
问令牌Access Token；或根据身份→角色→权限的访问控制去进行授权
验证。这其中，身份认证是授权的基础，如果客户端身份被仿冒或欺
骗，则授权将会被恶意利用。典型漏洞如客户端API KEY泄露导致的客
户端被仿冒、对客户端ID参数校验机制不全导致身份被仿冒、客户端应
用程序自身被攻击导致的客户端被仿冒等。
会话劫持在针对授权服务器的攻击中比较常见，究其原因主要是与
OAuth的授权流程相关，OAuth的授权依赖于授权码，如果恶意攻击者
诱导用户访问了恶意网站，获取了授权码，即可获取授权的访问令牌
Access Token。同时，为了防止授权码的重复利用，在设计授权码时一
般选择无规律的字符串，且是一次性的；多个客户端之间不会共享或
使用同一个授权码。在标准OAuth授权流程中，通常跟授权码一起传递
的参数是state，虽然这是可选参数，但为了安全，在设计时是需要使用
的。对state参数的使用要遵循state值是一个不易被猜测的随机值，建议
长度至少83位以上，同时在使用时，客户端请求与服务器端响应要遵循
流程设计，做严格的一致性校验。
跳转URL或回调URL是OAuth流程中最容易出现漏洞的地方，也是
被攻击的重点。在OpenID Connect的漏洞中，也谈到了跳转URL的安全
问题。总的来说，跳转URL容易出现以下漏洞。
■ URL被篡改：URL篡改通常发生在客户端，篡改后发送到授权服
务器端，如果服务器端没有将客户端ID与URL进行绑定或一致性校验，
或对URL无校验，则会导致在URL重定向时跳转到篡改后的链接或恶意
站点。比如，正常请求的URL地址为：
如果client.example.com被篡改成evil.com，则会跳转到恶意站点
evil.com。
为了规避此类问题，通常是在客户端应用程序注册时，保存客户
端ID和URL的映射关系，并在授权服务器授权时进行一致性校验。
■ URL校验被绕过：有时，因为研发人员安全意识不足或安全编码
能力不足，即使对跳转的URL进行了校验，仍会因为校验机制存在问
题，导致URL校验绕过，存在不安全的URL跳转或重定向。还是上面的
例子，比如恶意的请求URL地址为：
这种情况下，URL字符串中包含了URL地址client.example.com，但
同时也包含了恶意站点evil.com。如果服务器端没有对跳转的URL做严
格的匹配，而是选择了包含、正则或之类的匹配规则，则会导致URL仍
然能校验通过。
■ URL二次跳转校验绕过：OAuth协议的使用主要是解决第三方应
用的授权问题。在真实的互联网应用中，OAuth平台方往往占有主动权
和审核权，作为开发者的第三方应用开发商，提交信息时常常需要平台
方去审核。有时，平台方的审核流程或审核时间会比较长，无法及时响
应开发者的要求。有一部开发者会在第三方应用注册时，填写一个类似
中间人的跳转页面。它的好处是，可以通过平台方审核，且后期维护
时，不需要重新修改信息再提交平台方审核。这种情况下，如果此跳转
页面被恶意攻击者利用，则可以通过该页面完成二次跳转的功能，达到
授权绕过的目的。
3.受保护资源漏洞
授权目的是保护受保护的资源在未授权的情况下无法被访问到。但
资源能被安全的保护是在资源服务授权机制正确的前提下，如果资源服
务存在缺陷，受保护的资源仍是不安全的。针对受保护的资源，从
OAuth流程去看，通常发生在访问令牌Access Token漏洞上。
针对访问令牌Access Token的漏洞主要分为访问令牌Access Token
泄露、访问令牌Access Token被篡改、访问令牌Access Token被重复利
用等。访问令牌Access Token泄露和其他令牌一样，前面的章节中已反
复提及；而对于访问令牌Access Token被篡改的利用，这与访问令牌的
使用流程相关。熟悉OAuth的读者都知道，访问令牌Access Token在整
个业务流程中相当于虚拟一个认证层，不同的应用之间，依赖访问令牌
Access Token进行授权互信。如果访问令牌Access Token的数据格式被
篡改后（比如其数据格式为可猜测的字符），身份被仿冒，则受保护的