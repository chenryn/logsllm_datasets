 **I'm submitting a bug report**  
**Webpack version:**  
1.13.2
**Please tell us about your environment:**  
Windows 7
**Current behavior:**  
For the following code snippet
            require.ensure(
                ['./module'],
                (syncedRequire) => {
                    doSomething(syncedRequire('./module'));
                },
                'module');
webpack generates this:
    	        __webpack_require__.e/* nsure */(1, function (syncedRequire) {
    	            doSomething(syncedRequire('./module'));
    	        });
This is invalid, because syncedRequire will be the **webpack_require**
function, and that function expects a number instead of a string. For the
string it'll fail.
**Expected/desired behavior:**  
One solution is to remove the callback argument that won't be required anyway,
if you're implementing the following code:
            require.ensure(
                ['./module'],
                () => {
                    doSomething(require('./module'));
                },
                'module');
Webpack generates this:
    	        __webpack_require__.e/* nsure */(1, function () {
    	            doSomething(__webpack_require__(2));
    	        });
You can see, the require('./module') call is now compiled into
**webpack_require** (2) and now everything will work correctly.
Other solution is that the callback will receive a function that can handle
the string as an input parameter. That means:
    	        __webpack_require__.e/* nsure */(1, function (syncedRequire) {
    	            doSomething(syncedRequire('./module'));
    	        });
in this code webpack has to pass a different function than **webpack_require**
into this callback. So the syncedRequire shouldn't be the **webpack_require**
function. Instead of that it has to be capable to handle the string input
parameter.
  * **Browser:** [all]
  * **Language:** [all]
Feel free to close this bug anyway, if it's fixed in webpack version 2, as the
workaround basically just to write require inside the function and not
expecting any parameter in the callback function.
So workaround again:
            require.ensure(
                ['./module'],
                () => {
                    doSomething(require('./module'));
                },
                'module');