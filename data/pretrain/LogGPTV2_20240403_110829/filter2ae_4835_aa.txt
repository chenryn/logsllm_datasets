# wJa
wJa是一款结合DAST、SAST、IAST的综合性应用程序安全分析工具，支持对java
web程序的安全性进行分析，含有反编译，代码审计，调试jar包，代理追踪等用于分析软件安全的功能。
## wJa的工作原理
本片文章将会用几个示例来讲解如何使用wJa进行软件安全性分析
## cheetah脚本语言
为了能够让SAST更加的附有灵活性，wJa引入了cheetah脚本语言来应对复杂的代码场景，cheetah是一门基于java开发的专门针对渗透测试的脚本解析语言，如果想要完全掌握wJa的使用，灵活地进行代码审计，可以通过
## wJa使用
需求环境：JDK 1.8
通过使用`java -jar wJa.jar`启动wJa，启动之后会要求选择指定分析的jar包程序，这里我们选择wJa自带的测试靶场进行分析。
### wJa UI介绍
**菜单栏目**
File:保存当前的cheetah脚本
script:运行/停止当前cheetah脚本
**左边栏目**
Decompile:反编译文件结构
cheetahLangue:cheetah自带的支持库函数信息和当前工作区的cheetah脚本
**中间栏目**
Decompile:jar包中通过class反编译的java代码
CheetahLangue:cheetah脚本代码
DebugJar:jar文件调试
Web:简易浏览器
### wJa反编译的代码比较
可以看到虽然与源代码不是完全相同，但是在语义上时没有区别的，反编译的代码一般来讲是不能直接运行的，但是作为分析是完全足够的。
### wJa调试jar包
在选择wJa的启动之后，wJa将会自动启动jar包，并且注入agent和attach到jar包进程上，所以wJa提供了追踪真实调用链和调试jar包的功能。
转到DebugJar栏目，可以看到如下内容：
右下方是jar包的输出信息，可以看到jar包的操作信息
例如想要调试`org.joychou.controller.SQLI`中的`jdbc_sqli_vul`方法，就需要将`org/joychou/controller/SQLI`和`jdbc_sqli_vul`填入class和method中，点击get
method content按钮，下方就会显示对应的代码信息：
在每一条代码前方都有一个编号，这一个编号实际上对应的是这条语句执行完时的字节码偏移，可以通过这个来给代码下断，例如我想要停在`sql = new
StringBuilder().append("select * from users where username =
'").append(username).append("'").toString();`这条语句（并没有开始执行），那么就需要在ID中输入54，因为运行完54时候就要开始执行这条语句了，这时候我们通过浏览器访问对应的接口页面。
这里需要注意需要开启mysql，SQL注入部分需要数据库支持，建表的sql语句在create_db.sql中。
这时候可以看到调试信息：
第一行信息是当前运行到的字节码偏移，下面就是变量信息，下面就可以单步步过一步步调试。
### Agent方法的IAST跟踪
通过调用：`StartRecordFun`和`StopRecordFun`方法进行起始和结束的跟踪。
    StartRecordFun
    无参数
    返回值:无
    StopRecordFun
    参数1:要查询的起始类名+方法名
    返回值:执行流数组
需要注意的是不能注入所有的类，因为SpringBoot启动类不能注入，注入的话运行速度太慢了，所以需要在`config/agent_exclude.txt`指定不注入的类起始字符，例如：org/springframework
## 案例1：扫描SQL注入
根据三元组原理，首先需要找到入口点，而入口点则是类的方法，可是并不是所有类都是SpringBoot的类，这时候就需要扫描存在指定注解的类，wJa自带了扫描的方法：
    function getSpringAnnotationValue(an){
        anSize = GetArrayNum(an);
        i = 0;
        flag = 0;
        while(i "){trackSQL(className,methods[i],classPath,j);}
                j = ToInt(j+1);
            }
            i = ToInt(i+1);
        }
        return 0;
    }
`SQLTrack`方法通过传入className来进行SQL注入的追踪，遍历所有的类方法调用`trackSQL`函数进行判断是否存在漏洞。
    function trackSQL(className,methodName,url,argIndex){
        array allNode;
        allNode = TrackVarIntoFun(className,methodName,argIndex,"java/sql/Statement","executeQuery",0,1);
        size = GetArrayNum(allNode);
        if(ToInt(size-1) < 0){return 0;}
        i = 0;
        print(methodName.":SQL注入 白盒测试调用链跟踪:");
        cc = 7;
        cs = 1;
        while(i < size){
            sentence = GetJavaSentence(allNode[i]);
            noSan = filter(sentence,GetTrackName(allNode[i]));
            if(noSan == 0){cc = 5;cs = 5;}
            if(i == ToInt((size-1))){
                if(cc != 5){cs = 2;cc = 3;}
            }else{}
            if(noSan == 0){
                printcolor("[-]",6);printcolor("想办法绕过此类：",4);
            }else{
                printcolor("[+]",1);
            }
            printcolor(GetClassName(GetNodeClassName(allNode[i]))."   ",cc);
            printcolor(sentence.StrRN(),cs);
            i = ToInt(i+1);
        }
        if(cc != 5){
            printcolor("白盒测试发现此调用链可能存在漏洞，生成测试链接进行黑盒测试".StrRN(),7);
            an = GetClassMethodAnnotation(className,methodName);
            var argName;
            try{
                arg_an = GetClassMethodArgAnnotation(className,methodName,0);
                argName = getSpringAnnotationValue(arg_an);
            }catch(){
                argName = GetClassMethodArgName(className,methodName,0);
            }
            if(argName != ""){
                api = url.getSpringAnnotationValue(an)."?".argName."=Wker";
                StartRecordFun();
                if(judgeSQLI(api) == 1){
                    printcolor("[+]生成测试链接:".api."   测试存在SQL注入漏洞!".StrRN(),3);
                }else{
                    printcolor("[-]生成测试链接:".api."   测试不存在SQL注入漏洞!请自行测试。".StrRN(),5);
                }
                print("IAST真实调用链:",StopRecordFun(className.".".methodName));
            }else{
                printcolor("测试链接生成失败,error:未找到参数入口!".StrRN(),5);
            }
        }
        return 0;
    }
`TrackVarIntoFun`方法是支持库函数：
    参数1:起始类
    参数2:起始方法
    参数3:起始方法参数下标
    参数4:目标方法的类
    参数5:目标方法
    参数6:目标方法的参数下标
    参数7:0:一直跟踪1:只跟踪到sink
    返回值:执行流node数组
通过传入入口点和污点聚集点来判断是否存在直连，并且返回执行流的所有节点，返回的节点是一个对象，可以通过对应的函数获取相对信息。
node节点可以获得的信息：
  1. 当前node节点的类+方法
  2. 当前追踪的变量
  3. 执行的java代码
如果存在调用的话那么就将调用链进行打印，并且判断路径中是否存在过滤函数。
过滤函数判断使用正则即可，需要传入的是java代码和当前追踪的变量：
    #define filter1=String.valueOf(.*?