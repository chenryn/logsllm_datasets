{"file.macho.go_imports_names_var_entropy": {"dashed_name": "file-macho-go-imports-names-var-entropy", "description": "Variance for Shannon entropy calculation from the list of Go imports.", "flat_name": "file.macho.go_imports_names_var_entropy", "format": "number", "level": "extended", "name": "go_imports_names_var_entropy", "normalize": [], "original_fieldset": "macho", "short": "Variance for Shannon entropy calculation from the list of Go imports.", "type": "long"}}
{"file.macho.go_stripped": {"dashed_name": "file-macho-go-stripped", "description": "Set to true if the file is a Go executable that has had its symbols stripped or obfuscated and false if an unobfuscated Go executable.", "flat_name": "file.macho.go_stripped", "level": "extended", "name": "go_stripped", "normalize": [], "original_fieldset": "macho", "short": "Whether the file is a stripped or obfuscated Go executable.", "type": "boolean"}}
{"file.macho.import_hash": {"dashed_name": "file-macho-import-hash", "description": "A hash of the imports in a Mach-O file. An import hash can be used to fingerprint binaries even after recompilation or other code-level transformations have occurred, which would change more traditional hash values.\nThis is a synonym for symhash.", "example": "d41d8cd98f00b204e9800998ecf8427e", "flat_name": "file.macho.import_hash", "ignore_above": 1024, "level": "extended", "name": "import_hash", "normalize": [], "original_fieldset": "macho", "short": "A hash of the imports in a Mach-O file."}}
{"file.macho.imports": {"dashed_name": "file-macho-imports", "description": "List of imported element names and types.", "flat_name": "file.macho.imports", "level": "extended", "name": "imports", "normalize": ["array"], "original_fieldset": "macho", "short": "List of imported element names and types.", "type": "flattened"}}
{"file.macho.imports_names_entropy": {"dashed_name": "file-macho-imports-names-entropy", "description": "Shannon entropy calculation from the list of imported element names and types.", "flat_name": "file.macho.imports_names_entropy", "format": "number", "level": "extended", "name": "imports_names_entropy", "normalize": [], "original_fieldset": "macho", "short": "Shannon entropy calculation from the list of imported element names and types.", "type": "long"}}
{"file.macho.imports_names_var_entropy": {"dashed_name": "file-macho-imports-names-var-entropy", "description": "Variance for Shannon entropy calculation from the list of imported element names and types.", "flat_name": "file.macho.imports_names_var_entropy", "format": "number", "level": "extended", "name": "imports_names_var_entropy", "normalize": [], "original_fieldset": "macho", "short": "Variance for Shannon entropy calculation from the list of imported element names and types.", "type": "long"}}
{"file.macho.sections": {"dashed_name": "file-macho-sections", "description": "An array containing an object for each section of the Mach-O file.\nThe keys that should be present in these objects are defined by sub-fields underneath `macho.sections.*`.", "flat_name": "file.macho.sections", "level": "extended", "name": "sections", "normalize": ["array"], "original_fieldset": "macho", "short": "Section information of the Mach-O file.", "type": "nested"}}
{"file.macho.sections.entropy": {"dashed_name": "file-macho-sections-entropy", "description": "Shannon entropy calculation from the section.", "flat_name": "file.macho.sections.entropy", "format": "number", "level": "extended", "name": "sections.entropy", "normalize": [], "original_fieldset": "macho", "short": "Shannon entropy calculation from the section.", "type": "long"}}
{"file.macho.sections.name": {"dashed_name": "file-macho-sections-name", "description": "Mach-O Section List name.", "flat_name": "file.macho.sections.name", "ignore_above": 1024, "level": "extended", "name": "sections.name", "normalize": [], "original_fieldset": "macho", "short": "Mach-O Section List name."}}
{"file.macho.sections.physical_size": {"dashed_name": "file-macho-sections-physical-size", "description": "Mach-O Section List physical size.", "flat_name": "file.macho.sections.physical_size", "format": "bytes", "level": "extended", "name": "sections.physical_size", "normalize": [], "original_fieldset": "macho", "short": "Mach-O Section List physical size.", "type": "long"}}
{"file.macho.sections.var_entropy": {"dashed_name": "file-macho-sections-var-entropy", "description": "Variance for Shannon entropy calculation from the section.", "flat_name": "file.macho.sections.var_entropy", "format": "number", "level": "extended", "name": "sections.var_entropy", "normalize": [], "original_fieldset": "macho", "short": "Variance for Shannon entropy calculation from the section.", "type": "long"}}
{"file.macho.sections.virtual_size": {"dashed_name": "file-macho-sections-virtual-size", "description": "Mach-O Section List virtual size. This is always the same as `physical_size`.", "flat_name": "file.macho.sections.virtual_size", "format": "string", "level": "extended", "name": "sections.virtual_size", "normalize": [], "original_fieldset": "macho", "short": "Mach-O Section List virtual size. This is always the same as `physical_size`.", "type": "long"}}
{"file.macho.symhash": {"dashed_name": "file-macho-symhash", "description": "A hash of the imports in a Mach-O file. An import hash can be used to fingerprint binaries even after recompilation or other code-level transformations have occurred, which would change more traditional hash values.\nThis is a Mach-O implementation of the Windows PE imphash", "example": "d3ccf195b62a9279c3c19af1080497ec", "flat_name": "file.macho.symhash", "ignore_above": 1024, "level": "extended", "name": "symhash", "normalize": [], "original_fieldset": "macho", "short": "A hash of the imports in a Mach-O file."}}
{"file.mime_type": {"dashed_name": "file-mime-type", "description": "MIME type should identify the format of the file or stream of bytes using https://www.iana.org/assignments/media-types/media-types.xhtml[IANA official types], where possible. When more than one type is applicable, the most specific type should be used.", "flat_name": "file.mime_type", "ignore_above": 1024, "level": "extended", "name": "mime_type", "normalize": [], "short": "Media type of file, document, or arrangement of bytes."}}
{"file.mode": {"dashed_name": "file-mode", "description": "Mode of the file in octal representation.", "example": "0640", "flat_name": "file.mode", "ignore_above": 1024, "level": "extended", "name": "mode", "normalize": [], "short": "Mode of the file in octal representation."}}
{"file.mtime": {"dashed_name": "file-mtime", "description": "Last time the file content was modified.", "flat_name": "file.mtime", "level": "extended", "name": "mtime", "normalize": [], "short": "Last time the file content was modified.", "type": "date"}}
{"file.name": {"dashed_name": "file-name", "description": "Name of the file including the extension, without the directory.", "example": "example.png", "flat_name": "file.name", "ignore_above": 1024, "level": "extended", "name": "name", "normalize": [], "short": "Name of the file including the extension, without the directory."}}
{"file.owner": {"dashed_name": "file-owner", "description": "File owner's username.", "example": "alice", "flat_name": "file.owner", "ignore_above": 1024, "level": "extended", "name": "owner", "normalize": [], "short": "File owner's username."}}
{"file.path": {"dashed_name": "file-path", "description": "Full path to the file, including the file name. It should include the drive letter, when appropriate.", "example": "/home/alice/example.png", "flat_name": "file.path", "ignore_above": 1024, "level": "extended", "multi_fields": [{"flat_name": "file.path.text", "name": "text", "type": "match_only_text"}], "name": "path", "normalize": [], "short": "Full path to the file, including the file name."}}
{"file.pe.architecture": {"dashed_name": "file-pe-architecture", "description": "CPU architecture target for the file.", "example": "x64", "flat_name": "file.pe.architecture", "ignore_above": 1024, "level": "extended", "name": "architecture", "normalize": [], "original_fieldset": "pe", "short": "CPU architecture target for the file."}}
{"file.pe.company": {"dashed_name": "file-pe-company", "description": "Internal company name of the file, provided at compile-time.", "example": "Microsoft Corporation", "flat_name": "file.pe.company", "ignore_above": 1024, "level": "extended", "name": "company", "normalize": [], "original_fieldset": "pe", "short": "Internal company name of the file, provided at compile-time."}}
{"file.pe.description": {"dashed_name": "file-pe-description", "description": "Internal description of the file, provided at compile-time.", "example": "Paint", "flat_name": "file.pe.description", "ignore_above": 1024, "level": "extended", "name": "description", "normalize": [], "original_fieldset": "pe", "short": "Internal description of the file, provided at compile-time."}}
{"file.pe.file_version": {"dashed_name": "file-pe-file-version", "description": "Internal version of the file, provided at compile-time.", "example": "6.3.9600.17415", "flat_name": "file.pe.file_version", "ignore_above": 1024, "level": "extended", "name": "file_version", "normalize": [], "original_fieldset": "pe", "short": "Process name."}}
{"file.pe.go_import_hash": {"dashed_name": "file-pe-go-import-hash", "description": "A hash of the Go language imports in a PE file excluding standard library imports. An import hash can be used to fingerprint binaries even after recompilation or other code-level transformations have occurred, which would change more traditional hash values.\nThe algorithm used to calculate the Go symbol hash and a reference implementation are available [here](https://github.com/elastic/toutoumomoma).", "example": "10bddcb4cee42080f76c88d9ff964491", "flat_name": "file.pe.go_import_hash", "ignore_above": 1024, "level": "extended", "name": "go_import_hash", "normalize": [], "original_fieldset": "pe", "short": "A hash of the Go language imports in a PE file."}}
{"file.pe.go_imports": {"dashed_name": "file-pe-go-imports", "description": "List of imported Go language element names and types.", "flat_name": "file.pe.go_imports", "level": "extended", "name": "go_imports", "normalize": [], "original_fieldset": "pe", "short": "List of imported Go language element names and types.", "type": "flattened"}}
{"file.pe.go_imports_names_entropy": {"dashed_name": "file-pe-go-imports-names-entropy", "description": "Shannon entropy calculation from the list of Go imports.", "flat_name": "file.pe.go_imports_names_entropy", "format": "number", "level": "extended", "name": "go_imports_names_entropy", "normalize": [], "original_fieldset": "pe", "short": "Shannon entropy calculation from the list of Go imports.", "type": "long"}}
{"file.pe.go_imports_names_var_entropy": {"dashed_name": "file-pe-go-imports-names-var-entropy", "description": "Variance for Shannon entropy calculation from the list of Go imports.", "flat_name": "file.pe.go_imports_names_var_entropy", "format": "number", "level": "extended", "name": "go_imports_names_var_entropy", "normalize": [], "original_fieldset": "pe", "short": "Variance for Shannon entropy calculation from the list of Go imports.", "type": "long"}}
{"file.pe.go_stripped": {"dashed_name": "file-pe-go-stripped", "description": "Set to true if the file is a Go executable that has had its symbols stripped or obfuscated and false if an unobfuscated Go executable.", "flat_name": "file.pe.go_stripped", "level": "extended", "name": "go_stripped", "normalize": [], "original_fieldset": "pe", "short": "Whether the file is a stripped or obfuscated Go executable.", "type": "boolean"}}
{"file.pe.imphash": {"dashed_name": "file-pe-imphash", "description": "A hash of the imports in a PE file. An imphash -- or import hash -- can be used to fingerprint binaries even after recompilation or other code-level transformations have occurred, which would change more traditional hash values.\nLearn more at https://www.fireeye.com/blog/threat-research/2014/01/tracking-malware-import-hashing.html.", "example": "0c6803c4e922103c4dca5963aad36ddf", "flat_name": "file.pe.imphash", "ignore_above": 1024, "level": "extended", "name": "imphash", "normalize": [], "original_fieldset": "pe", "short": "A hash of the imports in a PE file."}}
{"file.pe.import_hash": {"dashed_name": "file-pe-import-hash", "description": "A hash of the imports in a PE file. An import hash can be used to fingerprint binaries even after recompilation or other code-level transformations have occurred, which would change more traditional hash values.\nThis is a synonym for imphash.", "example": "d41d8cd98f00b204e9800998ecf8427e", "flat_name": "file.pe.import_hash", "ignore_above": 1024, "level": "extended", "name": "import_hash", "normalize": [], "original_fieldset": "pe", "short": "A hash of the imports in a PE file."}}
{"file.pe.imports": {"dashed_name": "file-pe-imports", "description": "List of imported element names and types.", "flat_name": "file.pe.imports", "level": "extended", "name": "imports", "normalize": ["array"], "original_fieldset": "pe", "short": "List of imported element names and types.", "type": "flattened"}}
{"file.pe.imports_names_entropy": {"dashed_name": "file-pe-imports-names-entropy", "description": "Shannon entropy calculation from the list of imported element names and types.", "flat_name": "file.pe.imports_names_entropy", "format": "number", "level": "extended", "name": "imports_names_entropy", "normalize": [], "original_fieldset": "pe", "short": "Shannon entropy calculation from the list of imported element names and types.", "type": "long"}}
{"file.pe.imports_names_var_entropy": {"dashed_name": "file-pe-imports-names-var-entropy", "description": "Variance for Shannon entropy calculation from the list of imported element names and types.", "flat_name": "file.pe.imports_names_var_entropy", "format": "number", "level": "extended", "name": "imports_names_var_entropy", "normalize": [], "original_fieldset": "pe", "short": "Variance for Shannon entropy calculation from the list of imported element names and types.", "type": "long"}}
{"file.pe.original_file_name": {"dashed_name": "file-pe-original-file-name", "description": "Internal name of the file, provided at compile-time.", "example": "MSPAINT.EXE", "flat_name": "file.pe.original_file_name", "ignore_above": 1024, "level": "extended", "name": "original_file_name", "normalize": [], "original_fieldset": "pe", "short": "Internal name of the file, provided at compile-time."}}
{"file.pe.pehash": {"dashed_name": "file-pe-pehash", "description": "A hash of the PE header and data from one or more PE sections. An pehash can be used to cluster files by transforming structural information about a file into a hash value.\nLearn more at https://www.usenix.org/legacy/events/leet09/tech/full_papers/wicherski/wicherski_html/index.html.", "example": "73ff189b63cd6be375a7ff25179a38d347651975", "flat_name": "file.pe.pehash", "ignore_above": 1024, "level": "extended", "name": "pehash", "normalize": [], "original_fieldset": "pe", "short": "A hash of the PE header and data from one or more PE sections."}}
{"file.pe.product": {"dashed_name": "file-pe-product", "description": "Internal product name of the file, provided at compile-time.", "example": "Microsoft\u00ae Windows\u00ae Operating System", "flat_name": "file.pe.product", "ignore_above": 1024, "level": "extended", "name": "product", "normalize": [], "original_fieldset": "pe", "short": "Internal product name of the file, provided at compile-time."}}