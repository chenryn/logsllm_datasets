```bash
for i in /etc/rc.*; do
    echo $i
done
```
### C-like for loop
```bash
for ((i = 0 ; i  foo)
set -o noclobber
# Used to exit upon error
# avoiding cascading errors
set -o errexit   
# Unveils hidden failures
set -o pipefail  
# Exposes unset variables
set -o nounset
```
### Glob options
```bash
# Non-matching globs are removed  
# ('*.foo' => '')
shopt -s nullglob   
# Non-matching globs throw errors
shopt -s failglob  
# Case insensitive globs
shopt -s nocaseglob 
# Wildcards match dotfiles 
# ("*.sh" => ".foo.sh")
shopt -s dotglob    
# Allow ** for recursive matches 
# ('lib/**/*.rb' => 'lib/a/b/c.rb')
shopt -s globstar   
```
Bash History {.cols-2}
-------
### Commands
| Command               | Description                               |
|-----------------------|-------------------------------------------|
| `history`             | Show history                              |
| `sudo !!`             | Run the previous command with sudo        |
| `shopt -s histverify` | Don't execute expanded result immediately |
### Expansions
| Expression   | Description                                          |
|--------------|------------------------------------------------------|
| `!$`         | Expand last parameter of most recent command         |
| `!*`         | Expand all parameters of most recent command         |
| `!-n`        | Expand `n`th most recent command                     |
| `!n`         | Expand `n`th command in history                      |
| `!` | Expand most recent invocation of command `` |
### Operations
| Code                 | Description                                                           |
|----------------------|-----------------------------------------------------------------------|
| `!!`                 | Execute last command again                                            |
| `!!:s///`  | Replace first occurrence of `` to `` in most recent command |
| `!!:gs///` | Replace all occurrences of `` to `` in most recent command  |
| `!$:t`               | Expand only basename from last parameter of most recent command       |
| `!$:h`               | Expand only directory from last parameter of most recent command      |
`!!` and `!$` can be replaced with any valid expansion.
### Slices
| Code     | Description                                                                              |
|----------|------------------------------------------------------------------------------------------|
| `!!:n`   | Expand only `n`th token from most recent command (command is `0`; first argument is `1`) |
| `!^`     | Expand first argument from most recent command                                           |
| `!$`     | Expand last token from most recent command                                               |
| `!!:n-m` | Expand range of tokens from most recent command                                          |
| `!!:n-$` | Expand `n`th token to last from most recent command                                      |
`!!` can be replaced with any valid expansion i.e. `!cat`, `!-2`, `!42`, etc.
Miscellaneous 
-------------
### Numeric calculations
```bash
$((a + 200))      # Add 200 to $a
```
```bash
$(($RANDOM%200))  # Random number 0..199
```
### Subshells
```bash
(cd somedir; echo "I'm now in $PWD")
pwd # still in first directory
```
### Inspecting commands
```bash
command -V cd
#=> "cd is a function/alias/whatever"
```
### Redirection {.row-span-2 .col-span-2}
```bash
python hello.py > output.txt   # stdout to (file)
python hello.py >> output.txt  # stdout to (file), append
python hello.py 2> error.log   # stderr to (file)
python hello.py 2>&1           # stderr to stdout
python hello.py 2>/dev/null    # stderr to (null)
python hello.py &>/dev/null    # stdout and stderr to (null)
```
```bash
python hello.py  "Hello Sven, I'm Olga
printf "1 + 1 = %d" 2
#=> "1 + 1 = 2"
printf "Print a float: %f" 2
#=> "Print a float: 2.000000"
```
### Getting options {.col-span-2}
```bash
while [[ "$1" =~ ^- && ! "$1" == "--" ]]; do case $1 in
    -V | --version )
    echo $version
    exit
    ;;
    -s | --string )
    shift; string=$1
    ;;
    -f | --flag )
    flag=1
    ;;
esac; shift; done
if [[ "$1" == '--' ]]; then shift; fi
```
### Check for command's result  {.col-span-2}
```bash
if ping -c 1 google.com; then
    echo "It appears you have a working internet connection"
fi
```
### Special variables  {.row-span-2}
| Expression | Description                  |
|------------|------------------------------|
| `$?`       | Exit status of last task     |
| `$!`       | PID of last background task  |
| `$$`       | PID of shell                 |
| `$0`       | Filename of the shell script |
See [Special parameters](http://wiki.bash-hackers.org/syntax/shellvars#special_parameters_and_shell_variables).
### Grep check  {.col-span-2}
```bash
if grep -q 'foo' ~/.bash_history; then
    echo "You appear to have typed 'foo' in the past"
fi
```
### Backslash escapes {.row-span-2}
- &nbsp; 
- \!
- \"
- \#
- \&
- \'
- \(
- \)
- \,
- \;
- \
- \[
- \|
- \\
- \]
- \^
- \{
- \}
- \`
- \$
- \*
- \?
{.cols-4 .marker-none}
Escape these special characters with `\`
### Heredoc
```sh
cat <<END
hello world
END
```
### Go to previous directory
```bash
pwd # /home/user/foo
cd bar/
pwd # /home/user/foo/bar
cd -
pwd # /home/user/foo
```
### Reading input
```bash
echo -n "Proceed? [y/n]: "
read ans
echo $ans
```
```bash
read -n 1 ans    # Just one character
```
### Conditional execution
```bash
git commit && git push
git commit || echo "Commit failed"
```
### Strict mode
```bash
set -euo pipefail
IFS=$'\n\t'
```
See: [Unofficial bash strict mode](http://redsymbol.net/articles/unofficial-bash-strict-mode/)
### Optional arguments
```bash
args=("$@")
args+=(foo)
args+=(bar)
echo "${args[@]}"
```
Put the arguments into an array and then append
## Also see {.cols-1}
* [Devhints](https://devhints.io/bash) _(devhints.io)_
* [Bash-hackers wiki](http://wiki.bash-hackers.org/) _(bash-hackers.org)_
* [Shell vars](http://wiki.bash-hackers.org/syntax/shellvars) _(bash-hackers.org)_
* [Learn bash in y minutes](https://learnxinyminutes.com/docs/bash/) _(learnxinyminutes.com)_
* [Bash Guide](http://mywiki.wooledge.org/BashGuide) _(mywiki.wooledge.org)_
* [ShellCheck](https://www.shellcheck.net/) _(shellcheck.net)_
* [shell - Standard Shell](https://devmanual.gentoo.org/tools-reference/bash/index.html) _(devmanual.gentoo.org)_