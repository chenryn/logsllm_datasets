C->BA->B->C
产生的数目会与ClientThread的实例数H（3个）相同。
不会产生任何 Log的实例
ThrcadLocal 的 get 方法会在线程调用 println 方法或 close 方法时被调用。
ThreadLocal的 set方泌已在ClientThread 的线程初次调用出 getTSLog方法的时
ClientThread的数日（3个）相等，因此PrintWriter 的实例也是3个，
PrinrWriter 的实例被指定到 TSLog 类的实例字段 writer 中。TSLog 的实例与
field) tsLogCollection |'.
是3次，而是11次×3（线程的个数）=33次。
候被调川出“。因此，被调用的次数会等同于ClientThread 的实例数（3个）。
只产牛1个 ThreadLocal 的实例,其中-一个实例被指定到 Log 的类字段(class
Latensy - C msec.
图A10-6执行范例
一从开始提出结末处理的要求到结束处理开始
（续上图》
---
## Page 459
心会被数个线程连接上。
上。但是，当 watcher 调用 close 方法的时候，target 线程已经结束了，因此不必担
join
join 来监视将 Log 输出到TSLog 的线程的结束。targct 结束后，watcher 的线程会从
问题11-3的解答
补充一点：java.lang.ThreadLocal类的安装
问题11-2的解答
ThreadLocal。例如，让 java.lang.Thrcad 类的内部中保存有 Thread-Specific
synchronizcd 来进行共享互斥，是否用 synchronized 进行共享互斥，要视类库
这样的话，TSLog 的实例好像会被个以.上的线程（target与watcher）给连接
（class library）而定。
ThrcadLocal类是支持多线程的环境（Thrcad Safe）的类，但并不一定要用
执行范例如图A11-1所示。
回来，而在此进行close。
● Exploting ThreadLocal to enhance scalability
也有可能不用 synchronizcd：而安装支持多线程的环境（Thread Safe）的类
Log 类中，在新产生出 TSLog 的实例时，就会启动新的线程。Walcher 会使用
修改过的 ClientThread 类与 Log 类各白是 List All-1与 List Al1-2.
（1）的解答：
（2）的解答：
是支持多线程的环境（Thread Safe）的类，
tsLogCollection 字段虽会被数个线程连接，但是 java.lang.ThreadLocal类
部分。因此，没有必要设为synchronized.
类并没有不能被数个线程连接的字段。也就是说，并没有应该要保护的
无法使用因应支持其他线程的 TSLog的实例。
用、TSLog的实例会被ThrcadLocal类管理，并且当成线程的阁有数据来
这是因为 TSLog 类的 println 方法与close 方法不会被一个以上的线程调
处理这样的话，某个线程使用的TSLog 的实例就会固定了。
因此安全性没行问题。
练习问题的解答
个线程
---
## Page 460
446
"-log.txt");
ThreadLocal();
public class log f
2-414 187
public class ClientThread extends Thread l
List A11-1
/获得线程固有的1:g
public static vcid close() {
public static void println(string s) l
private
private static ISLog getrsLog(l I
/1关闭log
public ClientThread(String name) 1
public vcid run(l
TsLog tsLcg = (rsLogltsLcgCoilection.get();
//如果该线程是第一次调用，就重建注册
getTsloq().ciose();
gerTsLog()-println(s);
if （sog -- rull） {
System.out.printin(getKame() + " EKD");
//Log.closc()
System.out.print.lnigetName() + " BEGIN");
 slper(name);
for {-rt. i - 0; i < 10; i++}
修改后的 Log 类(Logjava)
log.prin-n("i = " + i);
修改后的 ClientThread 类(ClientThread java)
try {
 static 
catch (InterruptedExceptior e)
Thread.seep(l00);
_final
已经不需要Log.close）
ThreadLocal
tsLcgcollection
---
## Page 461
"ENO"};
" BFGIN");
private static void starWatcher(final TSlog tsLog) {
/；启动等待线程结束的线程
startWatcher for Chris END
Chris END
stari.watcher
Alice END
Bobby END
startwatcher
tartwatcher
startwatcher
Chris BEGIN
Bobby BEGIN
Alice BEGIN
watcher.start();
‘/开始监视
finai Thread watcher = new Thread{) ↑
！！进行监视的线程
final Thread target = rhread.currentThreadi);
！！被监视的线程
startwatcher
1
return tslog;
public vcid run() }
tsLogCollection.set(tsLog);
System.oul..println("startWatcher for " + target.getName () +
 Svstem.out.print ir ("startWatcher for " + target.getMame () +
Lsog.close();
try
starwalcher(tsLog);
target.join():
fcr Alice END
for Bcbby END
for Chris BEGIN
or
for 
Bobby BEGIN
Aiice BEGIN
图A1l-1 
执行范例
一Chris 用的 watcher 线程结束
←Alice 用的 watcher 线程结束
←Bobby 用的wat cher 线程结束
chris 用的 watcher 线程开始
一Bobby用
←Alice 用的 watcher 线程开始
的watcher 线程开始
练习问题的解答
---
## Page 462
E
问题12-1的解答
的方法。
以用 getName 方法取得。
问题11-5的解答
程与执行run力法的线程相异”
程不同。
问题 11-4 的解答
第12章
最常使用的是“线程的名称"。线程的名称写在 java.lang.Thread 的实例内，可
这个问题是用来让读者确认自己是否已了解“执行ClientThread的构造器的线
×（3）何次调川 displayString 方法时，都会制作出新的线程。
·线程的优先级（gctPriority）
线程的名称之外，线程的固有数据还包括以下各项。括号中是为取得该项数据
注意：执行题目中的程序，就会建立出 main-log.txl的文件。在文件名称加上
正在执行ClientThread 的 run 方法的线程，是由主线程片动的新线程，与主线
因为在此程序中，正在执行构造器的线程是上线程，
X
订以连接上 Servant 类的线程只有 SchedulerThrcad 类的线程一-个，因此无须
（2）MakerClientThread 类的线程所执行的 makeString 方法，被以 Servant
是否活着（isAlive）
是否为Daemon线程（isDaemon）
断的状况（isInterrupted）
而非被以 Servant 类安装。
MakerClicntThread类的线程所执行的 makeString 方法，被以 Proxy类安装，
类安装。
因此，很有可能"constructor is called"这个字符串并没有被保存下来，
main.
是因为主线程的名称是 main。但是，主线程并没有调用close,
---
## Page 463
操作。提示，java.maih.BigInteger 是 immutable 的类（请参考第2章）。
问题12-2的解答
String x, String y) [
class AddRequest extends MethodRequest
package activeobject;
public interface Activeobject. {
List A12-2
package activeobject;
List A12-1
×（9）MakerClientThread 的线程调用出 makeString时，参数值count 越大则从
O（8）Servant 类的 makeString方法随着所制作的字符毕越长而处理时间就越久
○（7）MakerClientThread 类的线程在调用出 getResultValue 方法时，如果还没
×（6）ActivationQueue类的 takeRequest方法会被数个线程调用：
○（5）ActivationQueue 类的 putRequest 方法会被数个线程调用。
public
private final String x;
 pubiic abstract Result makestring(int count, char fillchar):
时间不受参数的count 的值影响。
符串，而只是制作 MakeStringRequest 类，再置入队列中而己，因此花费的
takeRequest方法只会被 SchedulerThread 类的单线程所调用。
public abstract Result add(String x, String y);
线程所调用。
putRequest 方法会被MakerClientThread 类的线程与DisplayClientThread 类的
public abstract void displaystringistring string);
进行共享互斥
private i
方法问来的时间越久：
制作出字符串的话，线程会wait。
this.x = x;
super(servant,
修改后的 AddRequest 类(AddRequest java)
修改后的 ActiveObject 界面(ActiveObject.java)
AddRequest (Servant
final String y;
future);
servant,
FutureResult
并不会实际上制作字
练习问题的解答
future,
---
## Page 464
Java经线程设计模纸
450
class Servant implements Activeobject ↑
inport java.math.BigInteger;
package activeobject;
List A12-4
string)!;
count,
package activeobject;
List A12-3
public Result add(String x, String y) 1
 public void displaystring (String string) f
public Result makeString(int count, char fillchar)
public Proxy(SchedulerThread scheduler, Servant servant) 
private final Servant servant;
private
public void executei) 1
scheduler.invokeinew
return future;
scheduler.invoke(new AddRequest(servant, future, x, y));
FutureResult future = new FutureResult():
return future;
scheduler.invoke (new MakeStringRequestlservant,
FutureResult future = new FutureResultil;
this.servant = servant;
this.scheduler - scheduler;
 Result result = servant.add(x, y);
fillchar)};
future.setResult{result);
this.y = Yi
修改后的 Servant 类(Servantjava)
 final SchedulerThread scheduler;
修改后的 Proxy 类(Proxyjava)
implements Activeobject f
DisplayStringRequestiservant,
future,
---
## Page 465
解答使用了新的线程，以让调用方（MyFrame）能等待，直到值被设置到Future
（MyFrame 类的 searchWord方法）。
问题12-3
解答 2 中，我们用 MyFrame 类的 display 方法通知查找结果。这里的解答利用
解说以下两个解答。
答1中，会将查找结果的URL以Fumure patem（第9章）返回。但是，这个
public Result add(string x,
public void displayString(String string) f
public Result makeString(int count, char fillchar) 1
return new RealResultiretvalue);
try 
String retvalue = null;
try t
return new RealResult(new String(buffer)l;
for （int i = O; i < count; i++){
char[] buffer = new char[count];
catch (NumberFormatException e)
catch (InterruptedException e) {
retvalue = null; 
BigInteger bigy = new Biglntegeriy);
Thread.sleep(l0);
1(buas + " :butiaseidst)uautxd ano waass
retvalue = bigz.toStringi);
BigInteger bigz = bigx.add(bigy);
BigInteger bigX = new BigInteger(x);
try l
buffer[i]
 Thread.sleep(l00);
= fillchar;
 String y) {
练习问题的解答
---
## Page 466
AA多线程设市模试
452
FutureResult、RealResult 的各类跟范例程序的是·样的。
解答 I：用 Future 模贰返回查我畅 URL
的 TextArea类中显示字符串....（B）。
的服务...（A）。另-个则由 Swing 框架工.作与MyFrame类所构成，让MyFrame
MyFrame 类就变成了对应于 Swing 框架工作的 Proxy参与者了。
Object 模式（第12章）的 Scheduler 参与者与ActivationQueue 参与者的工作这--点。
解答2中出现了两个“主动的对象”。一个在 active object 包中，提供单字查找
import activeobject.Activeobject;
import javax.swing.JPanel;
List A12-6
public class Main {
List A12-5修改后的 Main 界面(Mainjava)
ActiveObjectFactory、 ScbedulerThread、ActivationQueue、 MethodRequest、 Result.
import activeobject.Result;
import activeobject.ActiveobjectFactory;
import
import
import
import
import
import
import
import
import
import
import java.io.loException;
pubiic static void main(String[] args)
 javax.swing.JScrollPane;
javax.swing.JTextArea;
javax.swing.JFrame;
javax.swing-Swingutilities;
java.awt.event.ActionEvent;
java.awt.event.ActionListener;
 new MyFrame(): 
javax.swing.JTextField;
javax.swing.JButton;
javax.swing.JLabel;
java.awt.BorderLayout;
修改后的 MyFrame 类(MyFrame.java)
---
## Page 467
("line,separator") ;
createActiveObject(); 
private void println(String line) f
 private final static String NEwLiNE = System.getProperty
/1查找
//显：
public void actionPerformed(ActionEvent e) {
/！[Search]按钮被按着时
public MyFrame() 
private final Activeobject activeobject = ActiveobjectFactory.
private final JButton button = new JButton("Search");
private
textarea.append(line + NEWLINE);
searchWord(textfield.getText());
setvisible(true);
pack(); 
setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE) ;
getContentPane () .add(center,
getContentPane() .add(north,
// Layout
JScrollpane center = new JScrollPane(textarea);
// Center
button.addActionListener(this);
north.add(button);
north.add(textfield);
north.add(new JLabel("Search:"));