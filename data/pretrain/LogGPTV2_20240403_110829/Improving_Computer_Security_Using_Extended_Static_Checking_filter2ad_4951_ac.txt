Eau Claire treats structure ﬁelds as arrays indexed by the structure variable. In other words,
Eau Claire models s.f as f[s]. This perhaps runs counter to the “conventional wisdom”
that would model s.f as s[f], but doing so would be inconsistent with Eau Claire’s
treatment of pointers.
Eau Claire supports if statements and switch statements.
Eau Claire supports do, while, and for loops, but by default it assumes that the loop
body is executed no more than once. The user can supply a maximum loop depth, and
Eau Claire will unroll loops to the speciﬁed level.
In Eau Claire’s Guarded Command language return, break, and continue state-
ments are modeled by raising and catching exceptions. A variable associated with the
exception keeps track of the exception’s type so that it can be treated appropriately when it
is caught.
Function calls Eau Claire replaces function calls with an assertion that the function’s precondition is met
and an assumption that its postcondition holds. Eau Claire does not associate speciﬁcations
with function pointers. If a function does not have a speciﬁcation, it is assumed to have no
side-effects, and its return value is unknown.
Eau Claire understands variable references only as an indication that a function call argu-
ment is a variable parameter. In other contexts, a reference operation produces an unknown
value. This is not an inherent limitation of the method but simply an implementation short-
cut.
References
Table 3. A list of C language constructs, each with a description of Eau Claire’s interpretation.
Proceedings of the 2002 IEEE Symposium on Security and Privacy (S&P(cid:146)02) 
1081-6011/02 $17.00 ' 2002 IEEE 
spec memcpy(dest, src, n)
f
requires $length(dest) >= n
g
Figure 3. A speciﬁcation for the function
memcpy. The destination must be large
enough to hold the number of bytes to be
copied.
spec R_GenerateBytes(buffer,
bufferLength, randomSource)
f
g
requires $length(buffer) ==
bufferLength
Figure 4. A speciﬁcation for the func-
tion R GenerateBytes. The length of the
buffer must be equal to the bufferLength
parameter.
With a speciﬁcation for memcpy (given in Figure 3)
that requires the destination to be large enough to hold
the number of bytes being copied, Eau Claire ﬂags 3 of
RSAREF2’s 20 calls to memcpy as potential problems.
Two of these calls are the buffer overﬂow vulnerabilities
identiﬁed by Solino and Gerardo. The third occurs in
a function named R GenerateBytes, the purpose of
which is to ﬁll a buffer with randomly generated data.
Eau Claire ﬂags R GenerateBytes because it can-
not guarantee that the function’s buffer length parame-
ter is truly the length of the buffer to be ﬁlled. With a
speciﬁcation (given in Figure 4) making that a require-
ment, Eau Claire no longer ﬂags R GenerateBytes
as the source of a potential error. Eau Claire also veriﬁes
that the ﬁve calls to R GenerateBytes in RSAREF2
meet the speciﬁcation.
In this example Eau Claire’s precision and accuracy
are both excellent. Initially Eau Claire produced no false
negatives and a single false positive. The false posi-
tive could have been identiﬁed as such by inspection,
but with the addition a single speciﬁcation, Eau Claire
was able to eliminate it. In terms of execution time and
memory usage, Eau Claire’s performance was good but
probably too slow for a programmer to run it with every
compile during development. RSAREF2 consists of 79
functions in 13 source ﬁles and 11 header ﬁles. It is 4728
lines long. Running on a 550 MHZ Pentium III worksta-
tion, Eau Claire took 33 seconds to process RSAREF2.
Running on the same computer, gcc took two seconds to
compile RSAREF2. Memory usage for Eau Claire never
exceeded ten megabytes.
3.2 Redhat lpr race condition
The program traditionally used to access to the print
queue in UNIX systems, lpr, has long been a source of
security problems. Because the printer is a hardware re-
source, the programs that control access to it must have
root privileges. Of course, most users of the system need
access to the printer but do not have root privileges. As
is often the case, writing a program that allows only lim-
ited access to root resources has proven problematic.
A security hole in the version of lpr distributed with
Redhat Linux versions 4.1 through 6.1 was the result
of a race condition involving the way ﬁle permissions
were checked [25]. As Figure 5 shows, the program ﬁrst
checked to see if the user had permission to read the ﬁle,
then (acting as root) opened the ﬁle. If the user could
substitute a legitimate ﬁle with a ﬁle they did not have
permission to read (probably by changing a soft link) be-
tween the time that lpr checked the ﬁle permissions and
the time it opened the ﬁle, the user could print ﬁles that
they could not otherwise read.
Redhat applied a common technique for eliminating
a race condition: the revised lpr now takes on the user’s
identity before opening the ﬁle, as shown in Figure 6.
Eau Claire can identify programs where this ﬁx has not
been properly implemented. Figure 7 gives speciﬁca-
tions that allow Eau Claire to report an error if open
could be called without ﬁrst setting the effective user id.
Not surprisingly, Eau Claire reports that the call to
open in Figure 5 is the location of a potential problem.
Of more interest is the fact that Eau Claire reports that
the revised lpr in Figure 6 has the same potential prob-
lem: the program does not check the value returned by
seteuid or setegid, so if either of the calls fail, the
call to open will be carried out in the same insecure
way as it was originally. This ﬂaw in lpr was previously
undescovered. It may seem far-fetched that seteuid
or setegid would fail, but less than a year after the
lpr vulnerability was found, a bug in the Linux kernel
came to light that would allow a user to cause just such
a failure [4].
Proceedings of the 2002 IEEE Symposium on Security and Privacy (S&P(cid:146)02) 
1081-6011/02 $17.00 ' 2002 IEEE 
int fd;
for (int i=1; i < argc; i++)
f
/* first make sure that the user can read the file,
then open it */
if (!access(argv[i], O_RDONLY))
f
fd = open(argv[i], O_RDONLY);
print(fd);
g
g
Figure 5. A pseudocode demonstration of the race condition in Redhat’s lpr. If the user could
switch the ﬁle between the time lpr checked the ﬁle permissions and the time it opened the ﬁle,
the user could print a ﬁle that they could not normally read.
int fd;
for (int i=1; i < argc; i++)
f
int uid = getuid();
int gid = getgid();
int original_euid = geteuid();
int original_egid = getegid();
/* set the effective user id to be that of the current
user before opening the file */
seteuid(uid);
setegid(gid);
fd = open(argv[i], O_RDONLY);
/* reset the effective user id to it’s original value */
seteuid(original_euid);
setegid(original_egid);
print(fd);
g
Figure 6. A pseudocode version of the ﬁx Redhat made to lpr. Now the program takes on the
user’s privileges before opening the ﬁle. The vulnerability is more limited now, but it is still
present because the return value of the seteuid and setegid calls are not checked.
Proceedings of the 2002 IEEE Symposium on Security and Privacy (S&P(cid:146)02) 
1081-6011/02 $17.00 ' 2002 IEEE 
/* specification variables for tracking whether or not the
effective user id and effective group id have been set */
/* spec var $euid_set */
/* spec var $egid_set */
/* seteuid returns 0 after changing the current euid to
the requested value or returns a non-zero error
code if the request cannot be fulfilled. */
/*
spec seteuid(euid)
f
modifies $euid_set
ensures ($final($euid_set) == 1) || ($return != 0)
g
*/
int seteuid(int egid);
/* setegid returns 0 after changing the current egid to
the requested value or returns a non-zero error
code if the request cannot be fulfilled. */
/*
spec setegid(egid)
f
modifies $egid_set
ensures ($final($egid_set) == 1) || ($return != 0)
g
*/
int setegid(int egid);
/*
spec open(filename, flags, ...)
f
requires $euid_set: "euid has not been explicitly set"
g
*/
int open(char* filename, int flags, ...);
Figure 7. Speciﬁcations for checking lpr. Speciﬁcation variables track whether or not the
effective user and group IDs have been set. A race condition may exist if open is called without
ﬁrst changing the effective IDs.
Proceedings of the 2002 IEEE Symposium on Security and Privacy (S&P(cid:146)02) 
1081-6011/02 $17.00 ' 2002 IEEE 
It would be perfectly feasible for Eau Claire to use
speciﬁcation variables to keep track of the current set-
ting of the effective user and group ID values. If it did,
it would have the potential to catch errors that would
cause the ID values to be set incorrectly rather than sim-
ply checking to make sure that seteuid and setegid
are invoked successfully. The actual implementation of
lpr makes this approach less appealling because open
is used to access a number of control ﬁles in addition
to the ﬁle being printed for the user. When lpr opens
the control ﬁles, it needs to have root permissions. That
fact would complicate the speciﬁcation for the open
function; its requires clause would now have to take the
name of the ﬁle being opened into consideration. While
that too is perfectly feasible, it is application speciﬁc,
whereas the speciﬁcations given in Figure 7 could be
part of the standard library speciﬁcations applied to priv-
ileged utility applications.
The original lpr implementation occupies one source
ﬁle and two header ﬁles. It is 878 lines long and consists
of 10 functions. Eau Claire ﬂags three of these functions
because they make calls to open and there are no calls
to seteuid or setegid. Eau Claire ﬂags the same
three functions in the revised version of lpr because the
program disregards the return values from the new calls
to seteuid and setegid.
In order to correct the ﬂaws found by Eau Claire, we
modiﬁed the 12 occurrances of the two statements
seteuid(uid);
setegid(gid);
to be
if (seteuid(uid))
return;
if (setegid(gid))
return;
The ideal ﬁx for these ﬂaws would provide better er-
ror handling, but in this case a return statement is
enough to avoid calling open after an attempt to set an
ID has failed. Eau Claire only ﬂags one call to open
in the modiﬁed program. After adding a speciﬁcation
to the function that requires the IDs be set prior to the
function’s invocation, Eau Claire reports no errors.
In this case too Eau Claire reported no false negatives
and only a single false positive. Once again the false
positive was fairly easy to identify by inspection, but the
addition of a single speciﬁcation was all that Eau Claire
needed in order to eliminate it. Although lpr only took
0.5 seconds to compile using gcc, Eau Claire took 50
seconds to analyze it, with a maximum memory usage
of eight megabytes. The great majority of that time (43
seconds) was spent on a single function: main, which
is 277 lines long. Although enormous functions are not
the epitome of good programming practice, they are not
uncommon, so it is worthwhile to note that Eau Claire is
up to the task.
4 Related Work
Typical methods for ﬁnding software defects are of-
ten ill-suited to the problem of uncovering security vul-
nerabilities. Researchers have responded with security-
speciﬁc techniques for ferreting out security-speciﬁc de-
fects.
4.1 Lexical Analysis
The most common way for a race condition to lead to
a security problem is called a Time Of Check To Time
of Use (TOCCTOU) ﬂaw [2]. In turn, the most common
TOCCTOU ﬂaw is related to ﬁle access: if a privileged
program checks ﬁle access permissions by referencing
a ﬁle’s name and then later references the ﬁle’s name
again in order to operate on it, an attacker has an op-
portunity to change the underlying ﬁlesystem object be-
tween the time of the check and the time of use. The
ﬂaw presented in Section 3.2 is of just this type. Bishop
and Dilger [2] built a lexical analysis tool speciﬁcally
for the purpose of unearthing ﬁle access race conditions.
Viega et al. [29] point out that quite a few common
security problems are easy to identify in source code.
For example, the presence of a call to the C library func-
tion gets almost always indicates a security problem
because it is difﬁcult to prevent buffer overﬂow attacks
with gets. Their source code analysis tool, ITS4, scans
C and C++ programs for vulnerabilities that can be iden-
tiﬁed purely from the lexical structure of the program—
ITS4 does not take into account interaction between pro-
cedures, variable values, or ﬂow of control. Before it
begins examining a program, ITS4 reads in the set of
vulnerabilities it is targeting. The authors have com-
piled a library of vulnerabilities that cover likely buffer
overﬂow candidates, race conditions, and calls to poorly