EORMI   R12, R6, #0xC5 
MCRRCS  p1, 0xF, R1,R3,c2 
指令清单 49.4  ARM 的 Thumb 模式下的随机数噪声 
     LSRS  R3, R6, #0x12 
     LDRH  R1, [R7,#0x2C] 
     SUBS  R0, #0x55 ; 'U' 
     ADR  
R1, loc_3C 
     LDR  
R2, [SP,#0x218] 
     CMP  
R4, #0x86 
     SXTB  R7, R4 
     LDR  
R4, [R1,#0x4C] 
     STR  
R4, [R4,R2] 
     STR  
R0, [R6,#0x20] 
     BGT  
0xFFFFFF72 
     LDRH  R7, [R2,#0x34] 
     LDRSH  R0, [R2,R4] 
     LDRB  R2, [R7,R2] 
     DCB 0x17 
     DCB 0xED 
     STRB  R3, [R1,R1] 
     STR  
R5, [R0,#0x6C] 
     LDMIA  R3, {R0-R5,R7} 
     ASRS  R3, R2, #3 
     LDR  
R4, [SP,#0x2C4] 
     SVC  
0xB5 
     LDR  
R6, [R1,#0x40] 
     LDR  
R5, =0xB2C5CA32 
     STMIA  R6, {R1-R4,R6} 
     LDR  
R1, [R3,#0x3C] 
     STR  
R1, [R5,#0x60] 
     BCC  
0xFFFFFF70 
     LDR  
R4, [SP,#0x1D4] 
     STR  
R5, [R5,#0x40] 
     ORRS  R5, R7 
loc_3C ; DATA XREF: ROM:00000006 
     B    
0xFFFFFF98 
指令清单 49.5  MIPS（小端）下的随机数噪声 
     lw  
$t9, 0xCB3($t5) 
     sb  
$t5, 0x3855($t0) 
     sltiu $a2, $a0, -0x657A 
     ldr  
$t4, -0x4D99($a2) 
     daddi $s0, $s1, 0x50A4 
     lw  
$s7, -0x2353($s4) 
     bgtzl $a1, 0x17C5C 
     .byte 0x17 
     .byte 0xED 
     .byte 0x4B # K 
     .byte 0x54 # T 
     lwc2 
$31, 0x66C5($sp) 
     lwu 
$s1, 0x10D3($a1) 
     ldr 
$t6, -0x204B($zero) 
     lwc1 
$f30, 0x4DBE($s2) 
     daddiu   $t1, $s1, 0x6BD9 
     lwu  
$s5, -0x2C64($v1) 
     cop0  0x13D642D 
     bne  
$gp, $t4, 0xFFFF9EF0 
     lh  
$ra, 0x1819($s1) 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
504 
逆向工程权威指南（下册） 
     sdl  
$fp, -0x6474($t8) 
     jal  
0x78C0050 
     ori  
$v0, $s2, 0xC634 
     blez  $gp, 0xFFFEA9D4 
     swl  
$t8, -0x2CD4($s2) 
     sltiu  $a1, $k0, 0x685 
     sdc1  $f15, 0x5964($at) 
     sw  
$s0, -0x19A6($a1) 
     sltiu  $t6, $a3, -0x66AD 
     lb  
$t7, -0x4F6($t3) 
     sd  
$fp, 0x4B02($a1) 
我们必须注意的一点是：一些编写良好的解压包或者加密程序代码（也包括一些变形代码），从代码来
看也很像是随机数指令序列，然而一旦运行起来则是非常正确的。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第
第 5500 章
章    混
混  淆
淆  技
技  术
术  
代码混淆技术是一种用于阻碍逆向工程分析人员解析程序代码（或功能）的指令处理技术。 
50.1  字符串变换 
我们在第 57 章可看到，在逆向工程的过程中字符串经常起到路标的作用。注意到这个问题的编程人员
就会着手解决这个问题。他们会采用一些变换的手法，让他人不能直接通过 IDA 或者 16 进制编辑器直接
搜索到字符串原文。 
这里我们举一个简单的例子。 
比方说，我们可以这样构造一个字符串： 
mov 
   byte ptr [ebx], 'h' 
mov 
   byte ptr [ebx+1], 'e' 
mov 
   byte ptr [ebx+2], 'l' 
mov 
   byte ptr [ebx+3], 'l' 
mov 
   byte ptr [ebx+4], 'o' 
mov 
   byte ptr [ebx+5], ' ' 
mov 
   byte ptr [ebx+6], 'w' 
mov 
   byte ptr [ebx+7], 'o' 
mov 
   byte ptr [ebx+8], 'r' 
mov 
   byte ptr [ebx+9], 'l' 
mov 
   byte ptr [ebx+10], 'd' 
当然还有更为复杂的构造方法： 
mov 
   ebx, offset username 
cmp 
   byte ptr [ebx], 'j' 
jnz 
   fail 
cmp 
   byte ptr [ebx+1], 'o' 
jnz 
   fail 
cmp 
   byte ptr [ebx+2], 'h' 
jnz 
   fail 
cmp 
   byte ptr [ebx+3], 'n' 
jnz 
   fail 
jz 
   it_is_john 
不管是以上的哪种情况，我们用十六进制的文本编译器都不能直接搜索到字符串原文。 
实际上这两种方法适用于那些无法利用数据段构造数据的情景。因为它们可以在文本段直接构造数据，
所以也常见于各种 PIC 和 shellcode。 
另外，笔者还见过这样使用 sprintf()函数的： 
sprintf(buf, "%s%c%s%c%s", "hel",'l',"o w",'o',"rld"); 
代码看起来很诡异，但是作为一个简单的反编译技巧来说，也不失为一个好办法。 
加密存储字符串是另一种常见的处理方法。只是这样一来，就要在每次使用前对字符串解密。相关的
例子可以参看第 78 章第 2 节。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
506 
逆向工程权威指南（下册） 
50.2  可执行代码 
50.2.1  插入垃圾代码 
在正常执行指令序列中插入一些虽然可被执行但是没有任何作用的指令，本身就是一种代码混淆
技术。 
我们可以看一个简单的例子。 
指令清单 50.1  源代码 
add 
   eax, ebx 
mul 
   ecx 
指令清单 50.2  采用混淆技术后的代码 
xor 
   esi, 011223344h ; garbage 
add 
   esi, eax  
    ; garbage 
add 
   eax, ebx 
mov 
   edx, eax  
    ; garbage 
shl 
   edx, 4   
    ; garbage 
mul 
   ecx 
xor 
   esi, ecx  
    ; garbage 
在程序代码中插入的混淆指令，调用了源程序不会使用的 ESI 和 EDX 寄存器。混淆代码利用了源程
序的中间之后，大幅度地增加了反编译的难度，何乐不为呢？ 
50.2.2  用多个指令组合代替原来的一个指令 
 MOV op1,op2 这条指令，可以使用组合指令代替：PUSH op2, POP op1。 
 JMP label 指令可以用 PUSH label, RET 这个指令对代替。反编译工具 IDA 不能识别出这种 label
标签的调用结构。 
 CALL label 指令则可以用以下三个指令代替：PUSH ｛call 指令后面的那个 label｝、PUSH label
和 RET 指令。 
 PUSH op 可以用以下的指令代替。SUB ESP,4 或 8; MOV [ESP],操作符。 
50.2.3  始终执行或者从来不会执行的代码 
在下面的代码中，假定此处 ESI 的值肯定是 0，那么我们可以在 fake luggage 处插入任意长度和复杂度
的指令，以达到混淆的目的。这种混淆技术称为不透明谓词（opaque predicate）。 
mov 
   esi, 1 
...     ; some code not touching ESI 
dec 
   esi 
...     ; some code not touching ESI 
cmp 
   esi, 0 
jz 
   real_code 
; fake luggage 
real_code: 
我们还可以看看其他的例子（同样，我们假定 ESI 始终会是零）。 
add 
   eax, ebx  
; real code 
mul 
   ecx  
; real code 
add 
   eax, esi  
; opaque predicate. XOR, AND or SHL, etc, can be here instead of ADD. 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 50 章  混 淆 技 术 
507 
50.2.4  把指令序列搞乱 
instruction 1 
instruction 2 
instruction 3 
上面的 3 行正常执行的指令序列可以用如下所示的复杂结构代替： 
begin:  
jmp     ins1_label 
ins2_label:  
instruction 2 
jmp     ins3_label 
ins3_label:  
instruction 3 
jmp     exit: 
ins1_label:  
instruction 1 
jmp     ins2_label 
exit: 
50.2.5  使用间接指针 
dummy_data1  
db     100h dup (0) 
message1   
db     'hello world',0 
dummy_data2  
db     200h dup (0) 
message2   
db     'another message',0 
func   
proc 
... 
mov     eax, offset dummy_data1 ; PE or ELF reloc here 
add     eax, 100h 
push     eax 
call     dump_string 
... 
mov     eax, offset dummy_data2 ; PE or ELF reloc here 
add     eax, 200h 
push     eax 
call     dump_string 
... 
func   
endp 
这个程序执行时，我们只能在 IDA 编译工具中看到 dummy_data1 和 dummy_data2 的 reference(调用信
息)。它不能正常反馈字符串正体 message1 和 message2 的调用信息。 
全局变量或者函数也可以这样混淆。 
50.3  虚拟机以及伪代码 
编程人员可以构建其自身的 PL 或者 ISA 解释器（类似 VB.NET 或者 Java）。这样 的话，反编译者就得
花很多时间来理解这些解释器指令的意义以及细节。当然，他们基本上必须开发一种专用的反汇编或者反
编译工具了。 
50.4  一些其他的事情 
笔者对 Tiny C 编译器做了一些修改，然后用它编译了一个小程序（参见 url: http://go.yurichev.com/17220）。
异步社区会员 dearfuture(15918834820) 专享 尊重版权
508 
逆向工程权威指南（下册） 
请分析该程序的具体功能（参见 G.1.13）。 
50.5  练习题 
50.5.1  练习 1 
这是一个很短的程序，采用打了补丁的 Tiny C 编译器编译。看看它能做什么？ 
答案请参见 G.1.15。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第
第 5511 章
章    CC++++  
51.1  类 
51.1.1  一个简单的例子 
从汇编层面看，C++类（class）的组织方式和结构体数据完全一致。 
我们演示一个含有两个变量、两个结构体以及一个方法的类型数据： 
#include  
class c 
{ 
private: 
     int v1; 
     int v2; 
public: 
     c() // default ctor 
     { 