title:Debin: Predicting Debug Information in Stripped Binaries
author:Jingxuan He and
Pesho Ivanov and
Petar Tsankov and
Veselin Raychev and
Martin T. Vechev
Debin: Predicting Debug Information in Stripped Binaries
Jingxuan He
ETH Zurich, Switzerland
PI:EMAIL
Pesho Ivanov
ETH Zurich, Switzerland
PI:EMAIL
Petar Tsankov
ETH Zurich, Switzerland
PI:EMAIL
Veselin Raychev
DeepCode AG, Switzerland
PI:EMAIL
ABSTRACT
We present a novel approach for predicting debug information
in stripped binaries. Using machine learning, we first train prob-
abilistic models on thousands of non-stripped binaries and then
use these models to predict properties of meaningful elements in
unseen stripped binaries. Our focus is on recovering symbol names,
types and locations, which are critical source-level information
wiped off during compilation and stripping.
Our learning approach is able to distinguish and extract key
elements such as register-allocated and memory-allocated variables
usually not evident in the stripped binary. To predict names and
types of extracted elements, we use scalable structured prediction
algorithms in probabilistic graphical models with an extensive set
of features which capture key characteristics of binary code.
Based on this approach, we implemented an automated tool,
called Debin, which handles ELF binaries on three of the most
popular architectures: x86, x64 and ARM. Given a stripped binary,
Debin outputs a binary augmented with the predicted debug infor-
mation. Our experimental results indicate that Debin is practically
useful: for x64, it predicts symbol names and types with 68.8% pre-
cision and 68.3% recall. We also show that Debin is helpful for
the task of inspecting real-world malware – it revealed suspicious
library usage and behaviors such as DNS resolver reader.
CCS CONCEPTS
• Security and privacy → Systems security; • Software and
its engineering → Software reverse engineering;
KEYWORDS
Binary Code; Security; Debug Information; Machine Learning
ACM Reference Format:
Jingxuan He, Pesho Ivanov, Petar Tsankov, Veselin Raychev, and Martin
Vechev. 2018. Debin: Predicting Debug Information in Stripped Binaries. In
2018 ACM SIGSAC Conference on Computer and Communications Security
(CCS ’18), October 15–19, 2018, Toronto, ON, Canada. ACM, New York, NY,
USA, 14 pages. https://doi.org/10.1145/3243734.3243866
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior specific permission
and/or a fee. Request permissions from permissions@acm.org.
CCS ’18, October 15–19, 2018, Toronto, ON, Canada
© 2018 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ACM ISBN 978-1-4503-5693-0/18/10...$15.00
https://doi.org/10.1145/3243734.3243866
Martin Vechev
ETH Zurich, Switzerland
PI:EMAIL
1 INTRODUCTION
Compilers generate valuable debug information utilized by vari-
ous tools in order to support debugging, inspection and security
analysis of binaries, including decompilation [3, 18, 29] and bug
finding [24, 40]. A stripped binary, however, only contains low-
level information such as instructions and register uses which is
problematic when trying to inspect the behavior of the binary. Un-
fortunately, debug information of commercial off-the-shelf (COTS)
binaries is often stripped for optimization purposes (e.g., size reduc-
tion). More severely, vulnerable and malicious binaries are often
intentionally stripped to resist security analysis.
Current techniques aiming to recover stripped information such
as types (e.g., [38]) or variables (e.g., [23]) are often limited to cus-
tom, manually created rules based on domain specific knowledge
of the toolchain that generated the binary. To avoid reliance on a
potentially brittle set of manually created rules and automate the
process, recent years have witnessed an increased interest in new
methods and tools that leverage machine learning models trained
on large, freely available code repositories (e.g., GitHub). Exam-
ples include programming language translation [32], statistical
program synthesis [42, 43], identifier name prediction for Android
and JavaScript [10, 15, 44, 53], and more recently, function signa-
ture prediction and similarity in binaries [20, 22, 55]. The initial
success of these statistical approaches motivates the following basic
question: can machine learning models trained on large codebases
successfully recover stripped binary debug information?
Difficulties in predicting binary debug information. Creat-
ing machine learning models to recover binary debug information
with sufficient accuracy is more challenging than predicting facts at
the source-level or at the level of a typed intermediate representa-
tion (e.g., as done by [15, 44]). A key reason is that it is hard to find
insightful features and suitable probabilistic models that capture
important behaviors of the stripped binary yet work well across
a range of hardware architectures and compiler options typically
used to generate real-world binaries. Indeed, as debug information
associating high-level information (e.g., program variables) with
low-level elements (e.g., registers) is stripped, it is not immediately
obvious how to recover this structured mapping.
Debin: predicting debug information. We address the chal-
lenge of predicting debug information, focusing on symbol names,
types and locations in stripped binaries. Concretely, we built a
prediction system, called Debin1, which takes as input a stripped
1Debin is publicly available at https://debin.ai.
1
2
3
4
5
6
7
8
int sub_80534BA () {
...
if ( dword_8063320  start :
80483f2: mov
80483f6: mov $0, %eax
80483fb: mov $1, %edx
8048400: add
8048402: add $1, %edx
8048405: cmp
8048407: jne 8048400
8048409: repz ret
 end
%edx , %eax
%ecx , %edx
EDX.3 ECX.1 weight
i
p
a
n
s
b
0.5
0.3
0.1
cond-NE-EDX-ECX
i
i
dep-EDX-EDX
EDX.2 EDX.3 weight
p
i
p
i
0.4
0.3
color name
yellow sum
res
cyan
purple
orange
n
i
type
int
int
unsigned int
unsigned int
[1
[1
[1
[1
EDX.3 EDX.2] weight
i
i
p
i
j
p
]
]
]
0.8
0.6
0.3
(f) Output binary with debug information.
(e) Prediction result of MAP inference.
Figure 2: An overview of the steps for rebuilding debug information of the binary in Figure (a). Figure (f) shows the prediction
results. The bottom table lists predicted names and types. The colors signify the mapping from a variable or a function to its
locations in assembly code.
Lift Assembly into BAP-IR. Debin first lifts the assembly code
to BAP-IR, the intermediate representation of the Binary Analysis
Platform (BAP) [17]. The BAP-IR for our example is shown in Fig-
ure 2(b). BAP-IR captures semantics of instructions in a higher-level
and uniform syntax across different architectures, which provides
crucial insights for later steps. For example, it recovers control flow
instructions as the if statement at line 9 of Figure 2(b). More details
on BAP-IR as used in Debin are described in Section 4.1.
Extract Unknown and Known Elements with Variable Re-
covery Classification. Next, Debin analyzes the obtained BAP-IR,
extracting two sets of program elements. The first set of program el-
ements are unknown elements, marked by red color in Figure 2(c).
Debin needs to predict properties of unknown elements whose in-