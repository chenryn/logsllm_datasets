### 5.7 Cloning a Website

Before sending an exploit to a target, it is beneficial to disguise it. Cobalt Strike’s website cloning tool can assist with this. The tool creates a local copy of a website and adds code to ensure that links and images function as expected.

#### Steps to Clone a Website
1. Navigate to **Attacks -> Web Drive-by -> Clone Site**.
2. Enter the URL of the website you want to clone.

### Embedding an Attack in a Cloned Site

You can embed an attack into a cloned site by specifying the URL of your attack in the **Embed** field. Cobalt Strike will then add this URL to the cloned site using an IFRAME. To select one of the running client-side exploits, click the **...** button.

#### Capturing Keystrokes

Cloned websites can also capture keystrokes. To enable this feature, check the **Log keystrokes on cloned site** box. This will insert a JavaScript key logger into the cloned site.

#### Viewing Logged Keystrokes and Visitors

To view logged keystrokes or see visitors to your cloned site, go to **View -> Web Log**.

### 5.8 Spear Phishing

Now that you have an understanding of client-side attacks, let's discuss how to deliver the attack to the user. The most common method is through spear phishing.

#### Assembling a List of Targets

Before sending a phishing message, you need to assemble a list of targets. Cobalt Strike expects targets to be listed in a text file, with each line containing one target. The target can be an email address, or an email address followed by a tab and a name. If provided, a name helps Cobalt Strike customize each phish.

#### Creating a Phishing Template

Next, you need a phishing template. Templates can be reused between engagements. Cobalt Strike uses saved email messages as templates. It will strip attachments, handle encoding issues, and rewrite each template for each phishing attack.

To create a custom template:
1. Compose a message and send it to yourself.
2. In Gmail, click the down arrow next to **Reply** and select **Show original**.
3. Save this message to a file. You have now created your first Cobalt Strike phishing template.

#### Customizing Templates with Tokens

Cobalt Strike replaces the following tokens in your templates:
- **%To%**: The email address of the recipient.
- **%To_Name%**: The name of the recipient.
- **%URL%**: The contents of the **Embed URL** field in the spear phishing dialog.

#### Sending Phishing Messages

1. Go to **Attacks -> Spear Phish** to start the spear phishing tool.
2. Import your targets by clicking the folder next to the **Targets** field.
3. Choose your template file by clicking the folder next to the **Template** field.
4. Optionally, attach a file. This is a good time to use one of the social engineering packages discussed earlier.
5. You can also ask Cobalt Strike to rewrite all URLs in the template with a URL of your choosing. Paste the URL or press **...** to choose one of the tools hosted by Cobalt Strike, such as cloned websites, the auto-exploit server, or the system profiler.

When you embed a URL, Cobalt Strike will append `?id=%TOKEN%` to it. Each sent message will get its own token, which Cobalt Strike uses to map website visitors to sent emails.

#### Configuring the Mail Server

Set the **Mail Server** to an open relay or the mail exchange record for your target. If necessary, authenticate to a mail server to send your phishing messages. Press **...** next to the **Mail Server** field to configure additional server options, such as a username and password. The **Random Delay** option tells Cobalt Strike to randomly delay each message by a specified number of seconds.

#### Bounce Address

Set the **Bounce To** field to an email address where bounced messages should go. This value does not affect the message your targets see. Press **Preview** to see an assembled message to one of your recipients. If the preview looks good, press **Send** to deliver your attack.

Cobalt Strike sends phishing messages through the team server.

### 6. Payload Artifacts and Anti-virus Evasion

#### 6.1 Philosophy

Strategic Cyber LLC regularly fields questions about evasion. Does Cobalt Strike bypass anti-virus products? Which ones? How often is this checked?

The default artifacts in Cobalt Strike are likely detected by most endpoint security solutions. Evasion is not a primary goal of the default product, but Cobalt Strike offers flexibility. Operators can change the executables, DLLs, applets, and script templates used in workflows. Additionally, you can export Cobalt Strike’s Beacon payload in various formats compatible with third-party evasion tools.

This chapter highlights the features that provide this flexibility.

#### 6.2 The Artifact Kit

Cobalt Strike uses the Artifact Kit to generate executables and DLLs that evade some anti-virus products.

##### The Theory of the Artifact Kit

Traditional anti-virus products use signatures to identify known bad. If shellcode is embedded in an executable, the anti-virus product will recognize it and flag the executable as malicious. To defeat this, attackers often obfuscate the shellcode. However, many anti-virus products simulate execution in a virtual sandbox, checking for known bad in the emulated process space.

The Artifact Kit relies on behaviors that anti-virus sandboxes do not emulate to recover shellcode inside the binary. For example, one technique generates executables and DLLs that serve shellcode to themselves over a named pipe. If the anti-vvisor sandbox does not emulate named pipes, it will not find the shellcode.

##### Where the Artifact Kit Fails

Anti-virus products can defeat specific implementations of the Artifact Kit. If an anti-virus vendor writes signatures for the Artifact Kit technique, the executables and DLLs it creates will be detected. Some anti-virus products also call home to the vendor’s servers for further analysis, treating unknown executables and DLLs as malicious.

In such cases, try to find a known good program (e.g., PowerShell) to get your payload stager into memory.

##### Using the Artifact Kit

1. Download the Artifact Kit from **Help -> Arsenal**.
2. Extract the .tgz file using the `tar` command.
3. Run the `build.sh` script on Kali Linux to build the default techniques.
4. Load the `artifact.cna` script from the desired technique’s folder in Cobalt Strike.

You are encouraged to modify the Artifact Kit to meet your needs. Skilled C programmers can do more, but even non-programmers can work with the kit.

#### 6.3 The Veil Evasion Framework

Veil is a popular framework for generating executables that evade some anti-virus products. You can use Veil to generate executables for Cobalt Strike’s payloads.

1. Go to **Attacks -> Packages -> Payload Generator**.
2. Choose the listener and select Veil as the output type.
3. Generate and save the file.
4. Launch the Veil Evasion Framework, choose a technique, and supply the custom shellcode from the generated file.

#### 6.4 Java Applet Attacks

Strategic Cyber LLC distributes the source code for Cobalt Strike’s Applet Attacks as the Applet Kit. You can download it from **Help -> Arsenal**.

1. Use the included `build.sh` script to build the Applet Kit on Kali Linux.
2. Load the `applet.cna` script to make Cobalt Strike use your Applet Kit.

The Power Applet is an alternative implementation that uses PowerShell to get a payload into memory. This demonstrates the flexibility to recreate standard attacks in different ways.

#### 6.5 The Resource Kit

The Resource Kit allows you to change the HTA, PowerShell, Python, VBA, and VBS script templates used in Cobalt Strike’s workflows.

1. Download the Resource Kit from **Help -> Arsenal**.
2. Read the `README.txt` for documentation.
3. Modify the scripts to evade detection.
4. Load the `resources.cna` script to use your modified templates.

### 7. Post-Exploitation

#### 7.1 The Beacon Console

Right-click on a Beacon session and select **Interact** to open the Beacon console. The console is the main interface for your Beacon session, showing tasks, command output, and other information.

##### Status Bar

The status bar contains information about the current session, such as the target’s NetBIOS name, the username and PID of the current session, and the Beacon’s last check-in time.

##### Commands

Type `help` in the Beacon console to see available commands. Type `help [command]` for detailed help on a specific command.

#### 7.2 The Beacon Menu

Right-click on a Beacon or inside the Beacon console to access the Beacon menu. The menu includes options to manipulate trust material, elevate access, extract information, and interact with the target’s system.

#### 7.3 Asynchronous and Interactive Operations

Beacon is an asynchronous payload. Commands are queued and executed when the Beacon checks in. By default, Beacons check in every 60 seconds, but you can change this with the `sleep` command. For example, `sleep 300 20` sets a sleep time of 300 seconds with a 20% jitter factor.

Use `sleep 0` to enter interactive mode, where commands execute immediately. This is required before tunneling traffic through the Beacon.

#### 7.4 Running Commands

- **shell**: Executes a command via `cmd.exe`.
- **run**: Executes a command without `cmd.exe`.
- **execute**: Runs a program in the background without capturing output.
- **powershell**: Executes a command with PowerShell.
- **powerpick**: Executes PowerShell cmdlets without `powershell.exe`.
- **psinject**: Injects Unmanaged PowerShell into a specific process.
- **powershell-import**: Imports a PowerShell script into Beacon.
- **execute-assembly**: Runs a local .NET executable.
- **cd**: Changes the working directory.
- **pwd**: Shows the current working directory.
- **setenv**: Sets an environment variable.
- **inline-execute**: Executes a Beacon Object File.

#### 7.5 Session Passing

Use the `spawn` command to spawn a session for a listener. By default, sessions are spawned in `rundll32.exe`, but you can use `spawnto` to specify a better program. Use `inject` to inject a session into a specific process.

#### 7.6 Alternate Parent Processes

Use `ppid` to assign an alternate parent process for programs run by your Beacon session. This helps blend your activity with normal actions on the target. Use `runu` to execute a command with another process as the parent, and `spawnu` to spawn a temporary process as a child of a specified process.

#### 7.7 Spoof Process Arguments

Each Beacon has an internal list of commands to spoof arguments for. When a command matches a list, Beacon:
1. Starts the process in a suspended state with fake arguments.
2. Updates the process memory with the real arguments.
3. Resumes the process.

Use `argue` to manage this list. The process match logic is exact, so `net.exe` will not match `net`.

For more information, visit [Cobalt Strike Documentation](https://www.cobaltstrike.com/).