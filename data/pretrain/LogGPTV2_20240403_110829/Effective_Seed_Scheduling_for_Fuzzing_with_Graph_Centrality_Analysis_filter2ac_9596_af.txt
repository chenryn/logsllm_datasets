### Acknowledgements
We would like to express our gratitude to the anonymous reviewers for their constructive and valuable feedback. Abhishek Shah is supported by an NSF Graduate Fellowship. This work is partially funded by NSF grants CNS-18-42456 and CNS-18-01426, a NSF CAREER award, a Google Faculty Fellowship, a J.P. Morgan Faculty Fellowship, and a Capital One Research Grant.

### Table XIV: Edge Coverage of Concolic-Execution-Based Seed Scheduling
Edge coverage of concolic-execution-based seed scheduling on three real-world programs (size, libarchive, and tcpdump) over 24 hours across five runs.

| Scheduling | size | libarchive | tcpdump |
|------------|------|------------|---------|
| K-Scheduler | 3,886 | 3,552 | 2,602 |
| Default    | 3,068 | 3,230 | 2,101 |

- **Arithmetic Mean Coverage Gain**: 35.76%
- **Median Coverage Gain**: 20.31%

### Methodology
Our system consists of three components: a concolic executor, a fuzzer, and a coordinator that schedules seeds for the concolic executor. To demonstrate the utility of K-Scheduler in concolic execution seed scheduling, we disabled QSYM's fuzzer and modified its coordinator's seed scheduling algorithm to use K-Scheduler, while keeping the concolic executor logic unchanged. We evaluated K-Scheduler against the default seed scheduler in QSYM on three real-world programs: size, libarchive, and tcpdump. We did not include SymCC in our evaluation because it uses the same concolic execution scheduler as QSYM [42], making a comparison with one sufficient.

### Results
Over 24 hours, K-Scheduler improved edge coverage by 35.76% in arithmetic mean over the three programs. This demonstrates the potential of K-Scheduler for seed scheduling in non-evolutionary fuzzing settings. However, these results are preliminary and inconclusive, and a more detailed evaluation is left for future work.

**Result 5**: K-Scheduler increases edge coverage by 35.76%, in arithmetic mean over three programs, compared to QSYMâ€™s default seed scheduling strategy.

### Related Work

#### A. Graph Centrality
Centrality is a widely used measure in graph analysis. Various centrality metrics have been proposed, including degree centrality [47], semi-local centrality [14], closeness centrality [45], betweenness centrality [21], eigenvector centrality [51], Katz centrality [30], and PageRank [10]. These metrics have been applied in diverse fields such as social network analysis [27, 11], biology [31], finance [44], and geography [19]. To the best of our knowledge, this is the first application of centrality measures for seed selection in fuzzing.

#### B. Seed Scheduling
Previous research has introduced various techniques to enhance fuzzing, including symbolic execution [12, 24, 25, 49, 61, 40, 17, 50], dynamic taint analysis [54, 15, 23, 22, 43], and machine learning [26, 48, 65]. In this paper, we focus on improving the seed scheduling component of a fuzzer. Seed scheduling involves two main aspects: input prioritization [55, 52, 53] and the corresponding mutation budget (i.e., power schedule) [9, 7].

### References
[References listed as provided, with no changes made.]

### Appendix: Mann-Whitney U Test Results

#### Table XV: Mann-Whitney U Test Results
Mann-Whitney U test results for feature and edge coverage of Libfuzzer-based seed schedulers on 12 FuzzBench programs over 1 hour across 10 runs (corresponding to Table II).

| Programs     | freetype | libxml2 | lcms | harfbuzz | libjpeg | libpng | openssl | openthread | re2 | sqlite | vorbis | zlib |
|--------------|----------|---------|------|----------|---------|--------|---------|-------------|-----|--------|--------|------|
| Entropic     |          |         |      |          |         |        |         |             |     |        |        |      |
| Default      |          |         |      |          |         |        |         |             |     |        |        |      |

(Note: The specific values for the Mann-Whitney U test results are not provided in the original text and should be filled in accordingly.)