ACKNOWLEDGEMENTS
We thank the anonymous reviewers for their constructive
and valuable feedback. Abhishek Shah is supported by an
NSF Graduate Fellowship. This work is sponsored in part by
NSF grants CNS-18-42456, CNS-18-01426; a NSF CAREER
award; a Google Faculty Fellowship; a JP Morgan Faculty
Fellowship; and a Capital One Research Grant.
TABLE XIV: Edge coverage of concolic-execution-based seed
scheduling on 3 real-world programs for 24 hours over 5 runs.
Scheduling
K-Scheduler
Default
libarchive
size
tcpdump
3,886
3,068
3,552
3,230
2,602
2,101
Arithmetic mean coverage gain
Median coverage gain
35.76%
20.31%
of three components, a concolic executor, a fuzzer, and a
coordinator that schedules seeds for the concolic executor.
Since our goal is to show the utility of K-Scheduler for
concolic execution seed scheduling, we disabled QSYM’s
fuzzer and only modiﬁed its coordinator’s seed scheduling
algorithm to use K-Scheduler. We did not modify QSYM’s
concolic executor logic. We evaluate on the 3 programs (size,
libarchive and tcpdump). Note we did not run on
SymCC because SymCC and QSYM have the same concolic
execution scheduler [42], so comparing against one is sufﬁ-
cient. We run K-Scheduler against the default seed sched-
uler in QSYM on the 3 real world programs for 24 hours and
compare the total edge coverage. In arithmetic mean over the
10 runs, Table XIV shows that K-Scheduler improves edge
coverage by 35.76%, in arithmetic mean over the 3 programs.
Hence, this shows the potential promise K-Scheduler for
seed scheduling in non-evolutionary fuzzing settings. How-
ever, we note that our results are preliminary and are incon-
clusive. We leave a detailed evaluation to future work.
Result 5: K-Scheduler increases edge coverage by
35.76%, in arithmetic mean over 3 programs, compared to
QSYM’s default seed scheduling strategy.
VII. RELATED WORK
A. Graph Centrality
Centrality is a commonly used measure in graph analysis.
Researchers have proposed various centrality metrics including
degree centrality [47], semi-local centrality [14], closeness
centrality [45], betweenness centrality [21], eigenvector cen-
trality [51], Katz centrality [30], and PageRank [10]. These
centrality measures has been applied to various ﬁelds such as
social network analysis [27, 11], biology [31], ﬁnance [44]
and geography [19]. To the best of our knowledge, we are the
ﬁrst to use centrality for seed selection in fuzzing.
B. Seed Scheduling
While prior work has proposed a wide range of techniques
to improve fuzzing such as symbolic execution [12, 24, 25,
49, 61, 40, 17, 50], dynamic taint analysis [54, 15, 23, 22, 43]
and machine learning [26, 48, 65], in this paper we focus
on improving the seed scheduling component in a fuzzer. We
describe prior work that has focused on improving fuzzing
through seed scheduling. Seed scheduling consists of two main
components: input prioritization [55, 52, 53] and the input’s
corresponding mutation budget (i.e., power schedule) [9, 7].
Prior seed scheduling work has prioritized seeds based on
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:01:25 UTC from IEEE Xplore.  Restrictions apply. 
132206
REFERENCES
[1] FuzzBench guidelines about setting havoc mode for
https://github.com/google/fuzzbench/
AFL evaluation.
blob/master/fuzzers/aﬂ/fuzzer.py#L113, 2021.
[2] Honggfuzz - A security oriented, feedback-driven, evo-
lutionary, easy-to-use fuzzer with interesting analysis
options. https://github.com/google/honggfuzz, 2021.
[3] libFuzzer – a library for coverage-guided fuzz testing.
https://llvm.org/docs/LibFuzzer.html, 2021.
[4] Networkit: Large-scale Network Analysis.
https://
networkit.github.io/, 2021.
[5] Whole Program LLVM.
whole-program-llvm, 2021.
https://github.com/travitch/
[6] Cornelius Aschermann, Sergej Schumilo, Tim Blazytko,
Robert Gawlik, and Thorsten Holz. Redqueen: Fuzzing
In Symposium on
with input-to-state correspondence.
Network and Distributed System Security (NDSS), 2019.
[7] Marcel B¨ohme, Van-Thuan Pham, and Abhik Roychoud-
hury. Coverage-based greybox fuzzing as markov chain.
In Proceedings of
the ACM SIGSAC Conference on
Computer and Communications Security (CCS), pages
1032–1043. ACM, 2016.
[8] Marcel B¨ohme, Van-Thuan Pham, Manh-Dung Nguyen,
and Abhik Roychoudhury. Directed greybox fuzzing.
CCS ’17, New York, NY, USA, 2017. Association for
Computing Machinery.
[9] Marcel B¨ohme, Valentin J. M. Man`es, and Sang Kil
Cha. Boosting fuzzer efﬁciency: An information theoretic
the 28th ACM Joint
perspective.
Meeting on European Software Engineering Conference
and Symposium on the Foundations of Software Engi-
neering, ESEC/FSE 2020, New York, NY, USA, 2020.
Association for Computing Machinery.
In Proceedings of
[10] S. Brin and L. Page. The anatomy of a large-scale
hypertextual web search engine. In Seventh International
World-Wide Web Conference (WWW 1998), 1998.
[11] Duncan Brown and Nick Hayes.
Inﬂuencer marketing.
Routledge, 2008.
[12] Cristian Cadar, Daniel Dunbar, and Dawson Engler.
Klee: Unassisted and automatic generation of high-
In Pro-
coverage tests for complex systems programs.
ceedings of the 8th USENIX Conference on Operating
Systems Design and Implementation, OSDI’08, USA,
2008. USENIX Association.
[13] Sang Kil Cha, Maverick Woo, and David Brumley.
In 2015 IEEE
Program-adaptive mutational fuzzing.
Symposium on Security and Privacy, pages 725–741,
2015. doi: 10.1109/SP.2015.50.
[14] Duanbing Chen, Linyuan L¨u, Ming-Sheng Shang, Yi-
Identifying inﬂuential
Physica A: Statistical
Cheng Zhang, and Tao Zhou.
nodes in complex networks.
Mechanics and its Applications, 2012.
[15] Peng Chen and Hao Chen. Angora: Efﬁcient fuzzing by
principled search. 2018 IEEE Symposium on Security
and Privacy (S&P), pages 711–725, 2018.
[16] Yaohui Chen, Mansour Ahmadi, Reza Mirza-
zade farkhani, Boyu Wang, and Long Lu. MEUZZ:
Smart seed scheduling for hybrid fuzzing. In Proceedings
of
the 23rd International Symposium on Research in
Attacks, Intrusions and Defenses, RAID’20, October
2020.
[17] Yaohui Chen, Peng Li, Jun Xu, Shengjian Guo, Rundong
Zhou, Yulong Zhang, Tao Wei, and Long Lu. Savior:
Towards bug-driven hybrid testing. In 2020 IEEE Sym-
posium on Security and Privacy (SP), pages 1580–1596,
2020. doi: 10.1109/SP40000.2020.00002.
[18] Nicolas Coppik, Oliver Schwahn, and Neeraj Suri. Mem-
fuzz: Using memory accesses to guide fuzzing. In 12th
IEEE Conference on Software Testing, Validation and
Veriﬁcation, ICST 2019.
[19] Paolo Crucitti, Vito Latora, and Sergio Porta. Centrality
in networks of urban streets. Chaos: an interdisciplinary
journal of nonlinear science, 16(1):015113, 2006.
[20] Andrea Fioraldi, Dominik Maier, Heiko Eißfeldt, and
Marc Heuse. AFL++: Combining incremental steps of
fuzzing research. In 14th USENIX Workshop on Offensive
Technologies (WOOT 20). USENIX Association, August
2020.
[21] Linton Freeman. A set of measures of centrality based
on betweenness. Sociometry, 40:35–41, 03 1977. doi:
10.2307/3033543.
[22] Shuitao Gan, Chao Zhang, Peng Chen, B. Zhao, Xiaojun
Qin, Dong Wu, and Zuoning Chen. Greyone: Data ﬂow
sensitive fuzzing. In USENIX Security Symposium, 2020.
[23] Vijay Ganesh, Tim Leek, and Martin Rinard. Taint-
In 2009 IEEE 31st
based directed whitebox fuzzing.
International Conference on Software Engineering, pages
474–484, 2009. doi: 10.1109/ICSE.2009.5070546.
[24] Patrice Godefroid, Nils Klarlund, and Koushik Sen. Dart:
Directed automated random testing. 2005.
[25] Patrice Godefroid, Michael Y. Levin, and D. Molnar.
Automated whitebox fuzz testing. In NDSS, 2008.
[26] Patrice Godefroid, Hila Peleg, and Rishabh Singh.
Learn&fuzz: Machine learning for input fuzzing. 2017
32nd IEEE/ACM International Conference on Automated
Software Engineering (ASE), pages 50–59, 2017.
[27] Daniel G´omez, Jos´e Rui Figueira, and Augusto Eus´ebio.
Modeling centrality measures in social network analysis
using bi-criteria network ﬂow optimization problems.
European Journal of Operational Research, 226(2):354–
365, 2013.
[28] Adrian Herrera, Hendra Gunadi, Shane Magrath, Michael
Norrish, Mathias Payer, and Antony L. Hosking. Seed
In Proceedings of
selection for successful fuzzing.
the 30th ACM SIGSOFT International Symposium on
Software Testing and Analysis, ISSTA 2021, New York,
NY, USA, 2021. Association for Computing Machinery.
[29] Riko Jacob, Dirk Kosch¨utzki, Katharina Anna Lehmann,
Leon Peeters, and Dagmar Tenfelde-Podehl. Algorithms
for Centrality Indices, pages 62–82. Springer Berlin
Heidelberg, Berlin, Heidelberg, 2005.
[30] Leo Katz. A new status index derived from sociometric
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:01:25 UTC from IEEE Xplore.  Restrictions apply. 
142207
analysis. Psychometrika, 1953.
[31] Dirk Kosch¨utzki and Falk Schreiber. Centrality analysis
methods for biological networks and their application to
gene regulatory networks. Gene regulation and systems
biology, 2:193–201, 05 2008. doi: 10.4137/grsb.s702.
[32] Caroline Lemieux and Koushik Sen. Fairfuzz: Targeting
rare branches to rapidly increase greybox fuzz testing
coverage. In Proceedings of the 33rd IEEE/ACM Interna-
tional Conference on Automated Software Engineering.
Acm, 2018.
[33] Caroline Lemieux, Rohan Padhye, Koushik Sen, and
Dawn Song. Perffuzz: Automatically generating patho-
logical inputs. ISSTA 2018, New York, NY, USA, 2018.
Association for Computing Machinery.
[34] Yuekang Li, Yinxing Xue, Hongxu Chen, Xiuheng Wu,
Cen Zhang, Xiaofei Xie, Haijun Wang, and Yang Liu.
Cerebro: Context-aware adaptive fuzzing for effective
vulnerability detection. In Proceedings of the 2019 27th
ACM Joint Meeting on European Software Engineer-
ing Conference and Symposium on the Foundations of
Software Engineering, ESEC/FSE 2019, New York, NY,
USA, 2019. Association for Computing Machinery.
[35] Chenyang Lyu, Shouling Ji, Chao Zhang, Yuwei Li,
Wei-Han Lee, Yu Song, and Raheem Beyah. MOPT:
In 28th
Optimized mutation scheduling for fuzzers.
USENIX Security Symposium (USENIX Security 19).
USENIX Association, 2019.
[36] Linyuan L¨u, Duanbing Chen, Xiao-Long Ren, Qian-
Ming Zhang, Yi-Cheng Zhang, and Tao Zhou. Vital
nodes identiﬁcation in complex networks. Physics Re-
ports, 650:1–63, 2016.
[37] Valentin J. M. Man`es, Soomin Kim, and Sang Kil Cha.
Ankou: Guiding grey-box fuzzing towards combinatorial
difference. In Proceedings of the ACM/IEEE 42nd Inter-
national Conference on Software Engineering, ICSE ’20,
New York, NY, USA, 2020. Association for Computing
Machinery.
[38] Eisha Nathan and David A. Bader. A dynamic algorithm
In Proceedings
for updating katz centrality in graphs.
of
the 2017 IEEE/ACM International Conference on
Advances in Social Networks Analysis and Mining 2017,
ASONAM ’17, page 149–154, New York, NY, USA,
2017. Association for Computing Machinery.
[39] M. E. J. Newman. Mathematics of Networks. Palgrave
Macmillan UK, London, 2016.
[40] Hui Peng, Yan Shoshitaishvili, and Mathias Payer. T-
fuzz: Fuzzing by program transformation. In 2018 IEEE
Symposium on Security and Privacy (SP), pages 697–
710, 2018. doi: 10.1109/SP.2018.00056.
[41] Theoﬁlos Petsios, Jason Zhao, Angelos D. Keromytis,
and Suman Jana.
SlowFuzz: automated domain-
independent detection of algorithmic complexity vulner-
abilities. In Proceedings of the ACM SIGSAC Conference
on Computer and Communications Security (CCS), 2017.
[42] Sebastian Poeplau and Aur´elien Francillon. Symbolic
In
execution with SymCC: Don’t interpret, compile!
29th USENIX Security Symposium (USENIX Security
20), pages 181–198. USENIX Association, August 2020.
ISBN 978-1-939133-17-5.
[43] Sanjay Rawat, Vivek Jain, Ashish Kumar, Lucian Co-
jocar, Cristiano Giuffrida, and Herbert Bos. VUzzer:
Application-aware evolutionary fuzzing. In Proceedings
of the Network and Distributed Systems Security Confer-
ence (NDSS), 2017.
[44] Eduardo J Ruiz, Vagelis Hristidis, Carlos Castillo, Aris-
tides Gionis, and Alejandro Jaimes. Correlating ﬁnancial
time series with micro-blogging activity. In Proceedings
of the ﬁfth ACM international conference on Web search
and data mining, pages 513–522, 2012.
[45] G. Sabidussi. The centrality index of a graph. Psychome-
trika, 31:581–603, 1966.
[46] Sergej Schumilo, Cornelius Aschermann, Robert Gaw-
lik, Sebastian Schinzel, and Thorsten Holz.
kAFL:
Hardware-Assisted Feedback Fuzzing for OS Kernels. In
USENIX Security Symposium, 2017.
[47] M. E. Shaw. Some effects of unequal distribution of
information upon group performance in various commu-
nication nets. Journal of abnormal psychology, 49 1, Part
1:547–53, 1954.
[48] Dongdong She, Kexin Pei, Dave Epstein, Junfeng Yang,
Baishakhi Ray, , and Suman Jana. NEUZZ: Efﬁcient
Fuzzing with Neural Program Smoothing. In Proceedings
of the 2019 IEEE Symposium on Security and Privacy,
2019.
[49] Yan Shoshitaishvili, Ruoyu Wang, Christopher Salls,
Nick Stephens, Mario Polino, Audrey Dutcher, John
Grosen, Siji Feng, Christophe Hauser, Christopher
Kruegel, and Giovanni Vigna. SoK: (State of) The Art of
War: Offensive Techniques in Binary Analysis. In IEEE
Symposium on Security and Privacy, 2016.
[50] Nick Stephens, John Grosen, Christopher Salls, Andrew
Dutcher, Ruoyu Wang, Jacopo Corbetta, Yan Shoshi-
taishvili, Christopher Kruegel, and Giovanni Vigna.
Driller: Augmenting fuzzing through selective symbolic
execution. In NDSS, volume 16, pages 1–16, 2016.
[51] Karen Stephenson and Marvin Zelen. Rethinking cen-
trality: Methods and examples. Social Networks, 1989.
[52] Jinghan Wang, Yue Duan, Wei Song, Heng Yin, and
Chengyu Song. Be sensitive and collaborative: Analyzing
impact of coverage metrics in greybox fuzzing. In 22nd
International Symposium on Research in Attacks, Intru-
sions and Defenses (RAID 2019), pages 1–15, Chaoyang
District, Beijing, September 2019. USENIX Association.
ISBN 978-1-939133-07-6.
[53] Jinghan Wang, Chengyu Song, and Heng Yin. Rein-
learning-based hierarchical seed scheduling
forcement
for greybox fuzzing. In NDSS, 2021.
[54] T. Wang, T. Wei, G. Gu, and W. Zou. TaintScope:
A checksum-aware directed fuzzing tool for automatic
In Proceedings of the
software vulnerability detection.
IEEE Symposium on Security & Privacy, 2010.
[55] Yanhao Wang, Xiangkun Jia, Yuwei Liu, Kyle Zeng,
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 13:01:25 UTC from IEEE Xplore.  Restrictions apply. 
152208
Tiffany Bao, Dinghao Wu, and Purui Su. Not all coverage
measurements are equal: Fuzzing by coverage accounting
for input prioritization. In NDSS, 2020.
[56] Cheng Wen, Haijun Wang, Yuekang Li, Shengchao
Qin, Yang Liu, Zhiwu Xu, Hongxu Chen, Xiaofei Xie,
Geguang Pu, and Ting Liu. Memlock: memory usage
In ICSE ’20: 42nd International Con-
guided fuzzing.
ference on Software Engineering.
[57] Maverick Woo, Sang Kil Cha, Samantha Gottlieb,
and David Brumley. Scheduling black-box mutational
the 2013 ACM SIGSAC
fuzzing.
Conference on Computer & Communications Security,
CCS ’13, New York, NY, USA, 2013. Association for
Computing Machinery.
In Proceedings of
[58] Mingyuan Wu, Ling Jiang, Jiahong Xiang, Yanwei
Huang, Heming Cui, Lingming Zhang, and Yuqun
Zhang. One fuzzing strategy to rule them all. 2022.
[59] Wen Xu, Sanidhya Kashyap, Changwoo Min, and Taesoo
Kim. Designing new operating primitives to improve
fuzzing performance. In Proceedings of the 2017 ACM
SIGSAC Conference on Computer and Communications
Security, CCS ’17, New York, NY, USA, 2017. Associ-
ation for Computing Machinery.
[60] Tai Yue, Pengfei Wang, Yong Tang, Enze Wang, Bo Yu,
Kai Lu, and Xu Zhou. Ecofuzz: Adaptive energy-saving
greybox fuzzing as a variant of the adversarial multi-
In 29th USENIX Security Symposium
armed bandit.
(USENIX Security 20). USENIX Association, August
2020.
[61] Insu Yun, Sangho Lee, Meng Xu, Yeongjin Jang, and
Taesoo Kim. QSYM: A Practical Concolic Execution
In Proceedings
Engine Tailored for Hybrid Fuzzing.
of
the 27th USENIX Security Symposium (Security),
Baltimore, MD, August 2018.
[62] Michał Zalewski.
American Fuzzy Lop (AFL)
README. http://lcamtuf.coredump.cx/aﬂ/README.txt,
2021.
[63] Lei Zhao, Yue Duan, Heng Yin, and J. Xuan. Send hard-
est problems my way: Probabilistic path prioritization for
hybrid fuzzing. In NDSS, 2019.
[64] Yaowen Zheng, Ali Davanian, Heng Yin, Chengyu
Song, Hongsong Zhu, and Limin Sun. Firm-aﬂ: high-
throughput greybox fuzzing of iot ﬁrmware via aug-
mented process emulation. In 28th {USENIX} Security
Symposium ({USENIX} Security 19), pages 1099–1114,
2019.
[65] Peiyuan Zong, Tao Lv, Dawei Wang, Zizhuang Deng,
Ruigang Liang, and Kai Chen. Fuzzguard: Filtering out
unreachable inputs in directed grey-box fuzzing through
In 29th USENIX Security Symposium
deep learning.
(USENIX Security 20), pages 2255–2269. USENIX As-
sociation, August 2020. ISBN 978-1-939133-17-5.
A. Mann-Whitney U Test Results
APPENDIX
TABLE XV: Mann-Whitney U test results over the feature
and edge coverage of Libfuzzer-based seed schedulers on 12
FuzzBench programs for 1 hour over 10 runs (corresponding
to Table II).
Programs
freetype
libxml2
lcms
harfbuzz
libjpeg
libpng
openssl
openthread
re2
sqlite
vorbis
zlib
Entropic
Default