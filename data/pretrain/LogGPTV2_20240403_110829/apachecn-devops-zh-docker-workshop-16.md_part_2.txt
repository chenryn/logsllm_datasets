    import (
        "net/http"
        "fmt"
        "log"
        "os"
    )
    func main() {
        http.HandleFunc("/", defaultHandler)
        http.HandleFunc("/contact", contactHandler)
        http.HandleFunc("/login", loginHandler)
        port := os.Getenv("PORT")
        if port == "" {
            port = "8080"
        }
        log.Println("Service started on port " + port)
        err := http.ListenAndServe(":"+port, nil)
        if err != nil {
            log.Fatal("ListenAndServe: ", err)
            return
        }
    }
    func defaultHandler(w http.ResponseWriter, r *http.Request) {
        fmt.Fprintf(w, "Home Page")
    }
    func contactHandler(w http.ResponseWriter, r *http.Request) {
        fmt.Fprintf(w, "Contact Us")
    }
    func loginHandler(w http.ResponseWriter, r *http.Request) {
        fmt.Fprintf(w, "Login Page")
    }
    ```
6.  在`activity-04-01`目录下，创建一个名为`Dockerfile`的文件。该文件将是多阶段的`Dockerfile` :
    ```
    touch Dockerfile
    ```
7.  现在，使用您最喜欢的文本编辑器打开【T0:
    ```
    vim Dockerfile
    ```
8.  Add the following content to the `Dockerfile` and save the file:
    ```
    FROM golang:1.14.2-alpine AS builder
    WORKDIR /myapp
    COPY main.go .
    RUN go build -o main .
    FROM alpine:latest AS runtime
    WORKDIR /myapp
    COPY --from=builder /myapp/main .
    ENTRYPOINT ["./main"]
    EXPOSE 8080
    ```
    这个`Dockerfile`有两个阶段，分别叫做`builder`和`runtime`。构建器阶段使用 Golang Docker 映像作为父映像，并负责从 Golang 源文件创建可执行文件。运行时阶段使用`alpine` Docker 映像作为父映像，并执行从`builder`阶段复制的可执行文件。
9.  Now, build the Docker image with the `docker build` command:
    ```
    docker build -t activity-04-01:v1 .
    ```
    您应该会得到以下输出:
    ![Figure 4.14: Building the Docker image ](img/B15021_04_14.jpg)
    图 4.14:构建 Docker 映像
10.  Use the `docker image` ls command to list all the Docker images available on your computer. Verify the size of the image:
    ```
    docker images
    ```
    该命令将返回所有可用 Docker 映像的列表:
    ![Figure 4.15: Listing all Docker images ](img/B15021_04_15.jpg)
    图 4.15:列出所有 Docker 映像
    在前面的输出中，您可以看到名为`activity-04-01`的优化 Docker 映像的大小为 13.1 MB，而构建器阶段使用的父映像(Golang 映像)的大小为 370 MB。
11.  Execute the `docker container run` command to start a new container from the Docker image that you built in the previous step:
    ```
    $ docker container run -p 8080:8080 --name activity-04-01-container activity-04-01:v1
    ```
    您应该会得到类似如下的输出:
    ```
    2020/08/30 05:14:10 Service started on port 8080
    ```
12.  View the application at the following URL in your favorite web browser:
    ```
    http://127.0.0.1:8080/
    ```
    下图显示了我们导航到网址`http://127.0.0.1:8080/`时的主页:
    ![Figure 4.16: Golang application – Home Page  ](img/B15021_04_16.jpg)
    图 4.16: Golang 应用–主页
13.  Now, browse to the following URL on your favorite web browser:
    ```
    http://127.0.0.1:8080/contact
    ```
    下图显示了我们导航到网址`http://127.0.0.1:8080/contact`时的联系人页面:
    ![Figure 4.17: Golang application – Contact Us page  ](img/B15021_04_17.jpg)
    图 4.17: Golang 应用-联系我们页面
14.  Now, enter the following URL in your favorite web browser:
    ```
    http://127.0.0.1:8080/login 
    ```
    下图显示了我们导航到网址`http://127.0.0.1:8080/login`时的登录页面:
    ![Figure 4.18: Golang application – Login Page  ](img/B15021_04_18.jpg)
图 4.18: Golang 应用–登录页面
在本练习中，我们学习了如何部署一个可以根据调用 URL 返回不同响应的 Golang HTTP 服务器。在本活动中，我们使用多阶段 Docker 构建来创建最小大小的 Docker 映像。
# 5。用 Docker 编写编写环境
## 活动 5.01:使用 Docker 编写安装 WordPress
**解决方案**:
可以通过以下步骤创建数据库并安装 WordPress:
1.  创建所需的目录，并使用`cd`命令导航到该目录:
    ```
    mkdir wordpress
    cd wordpress
    ```
2.  创建一个`docker-compose.yaml`文件，内容如下:
    ```
    version: "3"
    services:
      database:
        image: mysql:5.7
        volumes:
          - data:/var/lib/mysql
        restart: always
        environment:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: db
          MYSQL_USER: user
          MYSQL_PASSWORD: password
      wordpress:
        depends_on:
          - database
        image: wordpress:latest
        ports:
          - "8080:80"
        restart: always
        environment:
          WORDPRESS_DB_HOST: database:3306
          WORDPRESS_DB_USER: user
          WORDPRESS_DB_PASSWORD: password
          WORDPRESS_DB_NAME: db
    volumes:
         data: {} 
    ```
3.  Start the application with the `docker-compose up --detach` command:
    ![Figure 5.22: Start of the application ](img/B15021_05_22.jpg)
    图 5.22:应用的启动
4.  Check for the running containers with the `docker-compose ps` command. You should get the following output:
    ![Figure 5.23: WordPress and database containers ](img/B15021_05_23.jpg)
    图 5.23: WordPress 和数据库容器
5.  Open `http://localhost:8080` in your browser to check the WordPress setup screen:
    ![Figure 5.24: WordPress setup screen ](img/B15021_05_24.jpg)
图 5.24: WordPress 设置屏幕
在本练习中，您已经使用 Docker Compose 为实际应用创建了一个部署。该应用由一个数据库容器和一个 WordPress 容器组成。两个容器服务都使用环境变量进行配置，通过 Docker Compose 网络和卷进行连接。
## 活动 5.02:使用 Docker Compose 安装全景徒步应用
**解决方案**:
可以通过以下步骤创建数据库和全景徒步旅行应用:
1.  创建所需的目录，并将其更改为:
    ```
    mkdir pta-compose
    cd pta-compose
    ```
2.  创建一个`docker-compose.yaml`文件，内容如下:
    ```
    version: "3"
    services:
      db:
        image: postgres
        volumes:
          - db_data:/var/lib/postgresql/data/
        environment:
          - POSTGRES_PASSWORD=docker
      web:
        image: packtworkshops/the-docker-workshop:chapter5-pta-web
        volumes:
          - static_data:/service/static
        depends_on:
          - db
      nginx:
        image: packtworkshops/the-docker-workshop:chapter5-pta-nginx
        volumes:
          - static_data:/service/static
        ports:
          - 8000:80
        depends_on:
          - web
    volumes:
      db_data:
      static_data:
    ```
3.  Start the application with the `docker-compose up --detach` command. You should get output similar to the following:
    ![Figure 5.25: Start of the application ](img/B15021_05_25.jpg)
    图 5.25:应用的启动
    注意
    也可以使用`docker-compose up -d`命令启动应用。
4.  Check for the running containers with the `docker-compose ps` command. You should get output similar to the following:
    ![Figure 5.26 Application, database, and nginx containers ](img/B15021_05_26.jpg)
    图 5.26 应用、数据库和 nginx 容器
5.  Open the administration section of the Panoramic Trekking App in the browser with the address of `http://0.0.0.0:8000/admin`:
    ![Figure 5.27: Admin setup logon ](img/B15021_05_27.jpg)
    图 5.27:管理员设置登录
    注意
    也可以运行`firefox http://0.0.0.0:8000/admin`命令，打开全景徒步应用的管理部分。
    使用用户名`admin`和密码`changeme`登录，添加新的照片和国家。将出现以下屏幕:
    ![Figure 5.28: Admin setup view ](img/B15021_05_28.jpg)
    图 5.28:管理设置视图
6.  Open the Panoramic Trekking App at the address `http://0.0.0.0:8000/photo_viewer` in the browser:
    ![Figure 5.29: Application view ](img/B15021_05_29.jpg)
图 5.29:应用视图
在本练习中，您已经使用 Docker Compose 创建了一个三层应用，其中包含 PostgreSQL 数据库、后端和代理服务层。所有服务都使用 Docker Compose 及其网络和存储功能进行配置和连接。
# 6。Docker 网络简介
## 活动 6.01: L 更新 Docker 网络驱动程序
**解决方案**:
以下是根据最佳实践完成本活动的最常见方式:
1.  Use the `docker network create` command to create a network for the NGINX web server. Call it `webservernet` and give it a subnet of `192.168.1.0/24` and a gateway of `192.168.1.1`:
    ```
    $ docker network create webservernet --subnet=192.168.1.0/24 --gateway=192.168.1.1
    ```
    这应该会创建`bridge`网络，`webservernet`。
2.  Use the `docker run` command to create an NGINX web server. Use the `-p` flag to forward port `8080` on the host to port `80` on the container instance:
    ```
    $ docker run -itd -p 8080:80 --name webserver1 --network webservernet nginx:latest
    ```
    这将启动`webservernet`网络中的`webserver1`容器。
3.  Use the `docker run` command to start an Alpine Linux container named `monitor` in `host` networking mode. This way, you will know that the container has access to the host ports of the main system as well as access to the `bridge` network IP address:
    ```
    $ docker run -itd --name monitor --network host alpine:latest
    ```
    这将在`host`网络模式下启动一个 Alpine Linux 容器实例。
4.  Use `docker inspect` to find the IP address of the `webserver1` container:
    ```
    $ docker inspect webserver1
    ```
    容器的详细信息将以 JSON 格式显示；从`IPAddress`参数获取 IP 地址:
    ![Figure 6.27: Inspecting the webserver1 container instance ](img/B15021_06_27.jpg)
    图 6.27:检查 webserver1 容器实例
5.  Access an `sh` shell inside the monitoring container using the `docker exec` command:
    ```
    $ docker exec -it monitor /bin/sh
    ```
    这会让你陷入一个根壳。
6.  Use the `apk install` command to install the `curl` command inside this container:
    ```
    / # apk add curl
    ```
    这将安装`curl`实用程序:
    ```