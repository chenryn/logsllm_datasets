小时、分钟和秒，12小时制：
(1[0-2]10?[1-9]) :{[0-5] ?[0-9]) :([0-5]?[0-9]) $
正则选项：无
正则流派：.NET、Java、JavaScript、PCRE、Perl、Python、Ruby
小时、分钟和秒，24小时制：
(2[0-3]1[01]?[0-9]):([0-5]?[0-9]):([0-5]?[0-9])$
正则选项：无
正则流派：.NET、Java、JavaScript、PCRE、Perl、Python、Ruby
在所有这些正则表达式中的问号都会使前导0成为可选的。把问号都去掉就要求必须
使用前导0。
讨论
相对日期的合法性验证来说，检查时间会比较容易。每小时包含60分钟，而每分钟包
含60秒。这意味着我们并不需要在正则表达式中使用太复杂的多选结构。对于分钟和
秒来说，我们根本不需要使用多选结构。会匹配0～5之间的一个数字，紧
跟着0～9的一个数字。这样就可以正确匹配到0～59的任意数字。在第一个字符类之
后的问号会把它变成可选的。这样，单个0～9之间的数字同样也会被认为是一个合法
的分钟或秒。如果你期望把小于10的分钟和秒写作是00～09，那么就应该把问号去
掉。关于字符类以及问号等量词的更多细节，请参考实例2.3和实例2.12。
对于小时来说，我们还是要使用多选结构（参考实例2.8）。根据第一个数字，第二个
224
第4章
www.TopSage.com
---
## Page 241
数字会允许不同的取值范围。对于12小时制的时钟，如果第一个数字是0，那么第二
个数字充许所有的10个数字，但是如果第一个数字是1，那么第二个数字必须是0、1
或2。在正则表达式中，我们可以把它表示为。如果使用24小时制的时
钟，那么如果第一个数字是0或1，第二个数字允许所有10个数字，但如果第一个数
字是2，那么第二个数字必须位于0～3之间。使用正则表达式，它可以表示为
2[0-3][01]?[0-9]。在这里使用的问号同样支持小于10的小时可以被写作单个数字。把
问号去掉就会要求必须使用两位数字。
我们在匹配小时、分钟和秒的正则组成部分两边都加了括号。这样就可以很容易把冒
号略去，分别获得小时、分钟和秒的取值。实例2.9中讲解了如何使用圆括号创建捕获
分组。实例3.9中讲解了你如何在过程代码中获取捕获分组匹配到的文本。
小时部分两边的括号会把两种不同的小时格式保持在一起。如果你去掉这些括号，那
幺正则表达式就无法正常工作。而把分钟和秒两边的括号去掉则不会产生问题，只是
会造成我们无法单独获取表示它们的数字。
变体
如果想要在更大的文本范围中查找时间，而不是检查一个输人是否是一个日期，那么
你就不能再使用定位符和S>。只是简单地把定位符从正则表达式中删掉也不是正
确的解决方案。举例来说，这样做会允许表示小时和分钟的正则表达式可以匹配到在
9912:1299中的12:12。因此，我们的做法不是把正则匹配定位到目标字符串的开始和
结尾，而是必须规定时间不能作为更长数字序列的一部分。
这可以很容易地使用一对单词分界符来完成。在正则表达式中，数字被当作字符来处
理，它可以作为单词的一部分出现。因此，我们可以把和都替换为。例如：
\b(2[0~3] 1 [01] ?[0-9]) :([0-5]?[0-9])\b
正则选项：无
正则流派：.NET、Java、JavaScript、PCRE、Perl、Python、Ruby
单词边界并不会禁止所有字符；它们只会禁止字母、数字和下划线。上面的正则表达
式会匹配24小时制时钟的小时和分钟，它们依然会匹配目标文本Thetimeis16:08:42
sharp中的16：08。空格并不是单词字符，而1是单词字符，所以单词边界会匹配二
者之间的位置。8是一个单词字符，而冒号不是，所以也会匹配它们两个之间的
位置。
如果你想要同时禁止单词字符和冒号的出现，那么就需要使用环视（参考实例2.16）。
下面的正则表达式不会匹配Thetimeis16:08:42sharp中的任何部分。它只适用于支持
环视的正则流派：
(? [0-9]{4})-(?1[0-2]10 [1-9]) $
正则选项：无
正则流派：.NET、PCRE7、Per15.10、Ruby1.9
正则选项：无
正则流派：PCRE、Python
下面的正则表达式会匹配一个公历日期，例如2008-08-30。连字符是可选的。这个正则
式充许出现YYYY-MMDD和YYYYMM-DD，这两种形式并不遵守ISO8601：
([0-9]{4})-?(1[0-2]10[1- 9])-?(3[0-1110[1-9]1{1-2][0-91) $
正则选项：无
正则流派：.NET、Java、JavaScript、PCRE、Perl、Python、Ruby
(?[0-9]{4})-?(?1[0-2]10[1-9])-?
(?3[0-1]10[1-9]1[1-2][0-9])$
正则选项：无
正则流派：.NET、PCRE7、Per15.10、Ruby1.9
下面的正则表达式会匹配一个公历日期，例如2008-08-30。连字符是可选的。这个正则
式使用了一个条件来排除YYYY-MMDD和YYYYMM-DD。对于第-一个连字符添加了
一个额外的捕获分组：
s（[6-0][-]1[6-]1[-0）(-()）（[6-]1[-0])（-)（{[6-]）
正则选项：无
正则流派：.NET、PCRE、Perl、Python
下面的正则表达式会匹配一个公历日期，例如2008-08-30。连字符是可选的。这个正则
226
戛+L
www.TopSage.com
---
## Page 243
式使用多选结构来排除YYYY-MMDD和YYYYMM-DD。对于月份来说存在两个捕获
分组：
([0- 9]{4}) (?: (1 [0-2]10 [1-9])1-?(1[0-2]10[1- 9])-?) 
(3[0-1]10[1-9]1[1-2][0-9])$
正则选项：无
正则流派：.NET、Java、JavaScript、PCRE、Perl、Python、Ruby
下面的正则表达式会匹配一年中的某一周，例如2008-W35。连字符是可选的：
（[6-]01[6-0][-]1[-0]）M-（{}[6-0])
正则选项：无
正则流派：.NET、Java、JavaScript、PCRE、Perl、Python、Ruby
（[6-]1[6-0][-]1[-]-（(}[60])
正则选项：无
正则流派：.NET、PCRE7、Per15.10、Ruby1.9
下面的正则表达式会匹配一年中用周次来表示的日期，例如2008-W35-6。连字符是可
选的：
({0-9]{4})-?W(5[0-3]1[1-4][0-9]10[1-9])-?([1-7])$
正则选项：无
正则流派：.NET、Java、JavaScript、PCRE、Perl、Python、Ruby
(?[0-9]{4})-?W(?5[0-3]1[1-4][0-9]10[1-9])-?(?[1-7]) $
正则选项：无
正则流派：.NET、PCRE 7、Per15.10、Ruby1.9
下面的正则表达式会匹配用序数表示的日期，例如2008-243。连字符是可选的：
 ([0- 9]{4}) -? (36[0-6]13 [0-5][0-9]1[12][0- 9]{2} 10[1- 9][0- 9] 100[1- 9]) $
正则选项：无
正则流派：.NET、Java、JavaScript、PCRE、Perl、Python、Ruby
^(?[0-9]{4})-?
(?36[0-6]13[0-5][0- 9]1[12][0-9](2} 10 [1-9][0-9]100[1- 9]) $
正则选项：无
正则流派：.NET、PCRE7、Per15.10、Ruby1.9
下面的正则表达式会匹配小时和分钟，例如17:21。冒号是可选的：
(2[0-3]1[01] ?[0-9]):?([0-5]?[0-9]) $
正则选项：无
正则流派：.NET、Java、JavaScript、PCRE、Perl、Python、Ruby
(?2[0-3]1[01]?[0-9]):?(?[0-5]?[0-9]) $
正则选项：无
正则流派：.NET、PCRE7、Per15.10、Ruby1.9
下面的正则表达式会匹配小时、分钟和秒，例如17：21：59。冒号是可选的：
(2[0-3]1[01]?[0-9]) : ?([0-5]?[0-9]) :?([0-5]?[0-9]] $
正则选项：无
正则流派：.NET、Java、JavaScript、PCRE、Perl、Python、Ruby
合法性验证和格式化
227
www.TopSage.com
---
## Page 244
(?2[0-3]1[01]?[0-9]) :?(?[0-5]?[0-9]) :?
(?[0-5]?[0-9])$
正则选项：无
正则流派：.NET、PCRE7、Per15.10、Ruby1.9
下面的正则表达式会匹配时区指示，例如Z、+07或+07:00。冒号和分钟是可选的：
{21[+-](?: 2[0-3]1[01] ?[0-9])(?::?(?: [0-5] ?[0-9])) ?) $
正则选项：无
正则流派：.NET、Java、JavaScript、PCRE、Perl、Python、Ruby
包含时区指示的小时、分钟和秒，例如17:21:59+07:00。所有的冒号都是可选的。在时
区指示中的分钟也是可选的：
([6-01[-01):（[6-0][-01):([6-0][0]1-0])
(21[+-] (?: 2[0-3]1[01] ?[0-9]) (?: : ?(? : [0-5] ?[0-9])) ?) $
正则选项：无
正则流派：.NET、Java、JavaScript、PCRE、Perl、Python、Ruby
(?2[0-3] 1[01] ?[0-9]):?(?[0-5]?[0-9]) :?(?[0-5]?[0-9])+
(?Z1[+-](?:2[0-3]1[01]?[0-9])(?::?(?:[0-5]?[0-9]))?) $
正则选项：无
正则流派：.NET、PCRE7、Per15.10、Ruby1.9
包含可选时区指示的日期，例如2008-08-30或2008-08-30+07:00。连字符是必需的。
这个是XMLSchema中使用的date类型：
(?(?:[1-9][0-9]*) ?[0-9] {4})- (1[0-2] i0[1-9]) -(3[0-1]10[19] 1[1-2] [0-9])
(21[+-](?:2[0-3]1[0-1][0-9]) :[0-5][0-9]) ?$
正则选项：无
正则流派：.NET、Java、JavaScript、PCRE、Perl、Python、Ruby
(?-?(?:[1-9][0-9] *) ?[0-9]{4})-(?1 [0-2}10{1-9])-
（[6-0][-]1[6-]01[-0]）
(?Z1[+-](?:2[0-3]1[0-1][0-9]):[0-5][0-9])?$
正则选项：无
正则流派：.NET、PCRE7、Per15.10、Ruby1.9
包含可选小数部分和时区的时间格式，例如01：45：36或01：45：36.123+07:00。这是XML
Schema中使用的time类型：
（+[6-0])（[6-0]{s-0]):（[6-0][S-0]):([6-0][1-0]1[-0])
（[6-0][-0]:([6-0][-0]1[-0])[-+]1z)
正则选项：无
正则流派：.NET、Java、JavaScript、PCRE、Perl、Python、Ruby
(?2[0-3]1{0-1][0-9]) :(?[0-5]{0-9]) :(?[0-5][0-9])
(?\.[0-9]+)?(?21[+-](?:2[0-3]1(0-1][0-9]):[0-5](0-9])?$
正则选项：无
正则流派：.NET、PCRE7、Per15.10、Ruby1.9
包含可选小数部分和时区的日期和时间格式，例如2008-08-30T01：45:36或2008-08-
228第4章
www.TopSage.com
---
## Page 245
30T01:45:36.123Z。这是XMLSchema中使用的dateTime类型：
(-?(?:[1-9][0-9] *) ?[0-9] {4})-(1[0-2]10[1-9])-(3[0-1]10[1-9] 1[1-2][0-9])
（+[6-0]\)（[6-0][-0]):（[6-0][≤-0]):（[6-0][-0]1[-0])
(21[+-] (? : 2[03]1[0-1] [0- 9]) : [0-5] [0- 9]) ?$
正则选项：无
正则流派：.NET、Java、JavaScript、PCRE、Perl、Python、Ruby
^(?-?(?:[1-9][0-9] *) ?[0-9]{4))-(?1[0-2]10[1-9])-
(?3 [0-1]10[1-9]1{1-2][0-9]) T (?2 [0-3]1[0-1][0-9]) :+
（?[0-5][0-9]):(?[0-5][0-9])(?\.[0-9]+)?
(?Z1[+-](?: 2[0-3]1[0-1][0-9]) :[0-5][0-9]) ?$
正则选项：无
正则流派：.NET、PCRE7、Per15.10、Ruby1.9
讨论
ISO8601定义了各种形式的日期和时间格式。这里所给的正则表达式只覆盖了其中最
常见的形式，但是大多数使用ISO8601的系统也只会使用其中的一个子集。例如，在
XMLSchema的日期和时间中，连字符和冒号是必需的。要把连字符和冒号变为必须的，
只需要简单地去掉它们之后紧跟的问号。要禁止连字符和冒号的话，把它们连同随后
的问号一起去掉。但一定要注意使用<?：group)语法的非捕获分组。如果问号和冒号紧
跟在一个左圆括号之后，那么这三个字符是作为一个非捕获分组的并始。
这里给的正则表达式可以把单独的连字符和冒号变成可选，而这并没有严格遵守ISO
8601的规定。例如，1733：26就不是一个合法的ISO8601时间，但是会被我们给的时
间正则式所接受。要想实现所有的连字符和冒号要么同时出现，要么同时不出现，会
得到一个相当复杂的正则表达式。在日期正则式中，我们采用了这样的规定，但是在
时间中，比如是在XMLSchema中，通常分隔符不是随意可选的，而通常是只能选择
必需，或者禁止使用。