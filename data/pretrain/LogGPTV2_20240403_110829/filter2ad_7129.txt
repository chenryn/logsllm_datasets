# Blockmon: A High-Performance Composable Network Traffic Measurement System

## Authors
Felipe Huici, Andrea Di Pietro, Brian Trammell, José María Gómez Hidalgo, Daniel Martinez Ruiz, Nico d'Heureuse

## Affiliations
- NEC Europe Ltd
- CNIT
- OPTENET
- ETH Zurich

## Abstract
Passive network monitoring and data analysis are essential for the correct operation of networks and the systems that rely on them. However, these tasks have become increasingly challenging due to the continued growth and diversification of the Internet. In this demonstration, we present Blockmon, a novel composable measurement system designed to offer the flexibility needed for a wide range of traffic monitoring and data analysis tasks, while also providing the necessary mechanisms to achieve high performance on modern multi-core hardware. We will use Blockmon’s graphical user interface (GUI) to showcase how to easily create applications and display the exported data. Specifically, we will demonstrate a simple flow meter application and a more complex VoIP anomaly detection application.

## 1. Introduction
Over the past decade, two significant trends have shaped Internet-scale measurement: the continuous growth of the Internet in terms of connected nodes and total data transferred, and the diversification of devices and applications running over the network. These challenges highlight the need for a high-performance, yet easily extensible solution. To address this, we introduce Blockmon, a system designed to support high-performance composable measurement by building fast network measurement applications from small, discrete blocks.

While modular principles in network measurement are not new, Blockmon draws inspiration from the Click modular router [4], which is oriented towards packet-based processing. Other programmable tools like CoMo [3] or PF_RING [2] either lack the flexibility or do not perform as well as Blockmon. Blockmon introduces key innovations, focusing on applying programmable measurement to today’s traffic loads and diversity while maximizing the use of modern, multi-core commodity hardware to ensure high performance. Blockmon is available as open-source software at [http://blockmon.github.com/blockmon](http://blockmon.github.com/blockmon).

## 2. System Description
At a high level, Blockmon provides a set of units called blocks, each performing a specific discrete processing action, such as parsing a DNS response or counting the number of distinct VoIP users on a link. Blocks communicate with each other by passing messages via gates; one block’s output gates are connected to the input gates of other blocks, allowing runtime indirection of messages. A set of interconnected blocks implementing a measurement application is called a composition, as shown in Figure 1.

### Message Handling
The `Message` class provides a basic interface for identifying message types and supporting the import and export of messages to connect compositions across nodes. Messages are immutable to ensure they can be shared without contention among multiple blocks concurrently. Additionally, a tagging mechanism allows blocks to add small bits of data to a message in a thread-safe manner, enabling high-volume message processing without the overhead of allocating new message objects.

### Performance Optimization
The assignment of activities to threads and threads to CPU cores significantly impacts performance. Blockmon schedules work in thread pools, with each block assigned to a pool via the composition, and pools can be pinned to specific cores. This model offers flexibility in terms of which block is executed on which CPU core.

Input gates can be implemented via direct invocation, where messages are passed via method calls, or indirect invocation, where messages are passed via a lock-free rotating queue. Direct invocation causes the downstream block to run within the thread of the upstream block, while indirect invocation separates threads without lock contention. The choice between direct and indirect invocation is another method for tuning performance.

Additional performance improvements include efficient message passing via C++11 shared pointers and object-move semantics, batch allocation of memory for messages, and support for fast capture blocks using novel packet capture engines such as PFQ [5]. These enhancements combine to produce the results in Figure 2, which show Blockmon outperforming other systems in a simple application that keeps per-flow statistics (byte and packet counts).

## 3. Demonstration Description
We will demonstrate two applications built on top of Blockmon:

1. **Simple Monitoring Application**: This application keeps per-flow statistics such as byte and packet counts.
2. **VoIP Anomaly Detection Application**: This more complex application detects anomalies or abuse in VoIP CDR (call data record) traces, focusing on telemarketing activity.

### GUI and Dashboard
The Blockmon GUI consists of two views:
- **Composition View**: Allows users to graphically design a composition and run it in the system. It connects to the Blockmon back-end via a JSON-based protocol, retrieving a list of available blocks and their information. Users can drag and drop blocks onto the main canvas, configure parameters, and connect them. The GUI also allows mapping blocks to thread pools and thread pools to available CPUs (see Figure 3).
- **Dashboard View**: Displays the actual data produced by the running Blockmon compositions. It uses Google Chart Tools [1] and Highcharts JS [2] to provide various display types (e.g., line graphs, bar and pie charts) that are constantly updated according to the output of the compositions.

### Simple Flow Statistics Application
This application serves as a “Hello, World” demonstration of Blockmon and the concept of composable measurement. We will draw its composition in the GUI, start it, and track flows, periodically exporting data in IPFIX [6] format about the N flows with the largest byte and packet counts. We will then set up the dashboard to display a graph showing the moving byte rates of the top N flows.

### VoIP Anomaly Detection Application
This application demonstrates the ease of porting an existing non-trivial application to Blockmon. It detects anomalies such as telemarketers based on CDR traces. We will show how to draw its composition and set up the dashboard in the GUI. The dashboard will display a listing of the most anomalous users, including time-varying anomaly detection scores for the system’s various algorithms. We will also demonstrate how to use the composition view to inspect the value of a block’s variable, such as the rate at which the `CDRSource` block is processing CDRs.

## 4. References
[1] Egi, N., Greenhalgh, A., Handley, M., Hoerdt, M., Huici, F., and Mathy, L. Towards high performance virtual routers on commodity hardware. In Proceedings of ACM CoNEXT 2008 (Madrid, Spain, December 2008).

[2] Fusco, F., and Deri, L. High speed network traffic analysis with commodity multi-core systems. In Proceedings of the 10th annual conference on Internet measurement (2010), IMC ’10, ACM, pp. 218–224.

[3] Iannaccone, G. Fast prototyping of network data mining applications. In Passive and Active Measurement Conference 2006 (Adelaide, Australia, March 2006).

[4] Kohler, E., Morris, R., Chen, B., Jahnotti, J., and Kasshoek, M. F. The click modular router. ACM Transaction on Computer Systems 18, 3 (2000), 263–297.

[5] N. Bonelli, Pietro, A. D., Giordano, S., and Procissi, G. On multi–gigabit packet capturing with multi–core commodity hardware. In Passive and Active Measurement conference (PAM) (2012).

[6] Trammell, B., and Boschi, E. An introduction to IP flow information export. IEEE Communications Magazine 49, 4 (Apr. 2011).

---

**Figures:**
- **Figure 1**: Example composition
- **Figure 2**: Performance comparison between Blockmon and other existing systems
- **Figure 3**: Blockmon GUI showing a composition