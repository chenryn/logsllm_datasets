将数据库恢复配置为hot_standby模式，允许在数据库恢复过程中，连接到数据库。获取需要的信息。  
1、当返回database is in startup mode，表示无法连接数据库时，说明还需要日志文件，数据库才能到一致性点允许连接，此时，除了从前面说的LOG文件中获得需要的文件，实际上进程也会突出对应的内容。  
例如  
```  
digoal   25596 25594  0 19:54 ?        00:00:00 postgres: startup   recovering 000000010000005D000000A7  
digoal    20   0 16.684g   1860   1276 S   0.0  0.0   0:02.59 postgres: startup   waiting for 000000010000005D000000B2    
```  
日志的内容如下  
```  
cp: cannot stat ‘/data01/digoal/waltest/000000010000005D000000A7’: No such file or directory  
cp: cannot stat ‘/data01/digoal/waltest/00000002.history’: No such file or directory  
```  
当我们将需要的归档拷贝到对应目录后，  
```  
digoal@pg11-test-> cp wal/000000010000005D000000A7 waltest/  
```  
当我们将需要的归档拷贝到对应目录后，需要的WAL文件向前推移，日志的内容如下  
```  
cp: cannot stat ‘/data01/digoal/waltest/000000010000005D000000A8’: No such file or directory  
cp: cannot stat ‘/data01/digoal/waltest/00000002.history’: No such file or directory  
```  
2、当可以连接恢复中的数据库后，可以通过一些系统函数，查看到数据库的一些信息  
2\.1、查看当前数据库正在replay 的wal LSN  
```  
postgres=# select pg_last_wal_replay_lsn();  
 pg_last_wal_replay_lsn   
------------------------  
 5D/A7FFFFE0  
(1 row)    
```  
2\.2、查看当前数据库的恢复是否pause，（如果是自动pause的，说明已经到达设置的还原点）  
```  
postgres=# select pg_is_wal_replay_paused();  
 pg_is_wal_replay_paused   
-------------------------  
 f  
(1 row)  
```  
2\.3、查看lsn对应的wal文件，不允许在standby实例中执行，如果能执行的话，可以直接从当前数据库正在replay 的wal LSN得到WAL文件名。  
```  
postgres=# select * from pg_walfile_name('5D/A7FFFFE0');  
ERROR:  55000: recovery is in progress  
HINT:  pg_walfile_name() cannot be executed during recovery.  
LOCATION:  pg_walfile_name, xlogfuncs.c:521  
```  
2\.4、当前数据库的时间线 (history)  
```  
postgres=# select * from pg_control_checkpoint();  
-[ RECORD 1 ]--------+-------------------------  
checkpoint_lsn       | 5D/A7000028  
redo_lsn             | 5D/A7000028  
redo_wal_file        | 000000010000005D000000A7  
timeline_id          | 1  
prev_timeline_id     | 1  
full_page_writes     | t  
next_xid             | 0:1286297007  
next_oid             | 1912406  
next_multixact_id    | 1  
next_multi_offset    | 0  
oldest_xid           | 101420357  
oldest_xid_dbid      | 13285  
oldest_active_xid    | 0  
oldest_multi_xid     | 1  
oldest_multi_dbid    | 1910618  
oldest_commit_ts_xid | 0  
newest_commit_ts_xid | 0  
checkpoint_time      | 2019-03-05 19:44:51+08  
```  
2\.5、控制文件内容  
```  
postgres=# select * from pg_control_system();  
-[ RECORD 1 ]------------+-----------------------  
pg_control_version       | 1100  
catalog_version_no       | 201809051  
system_identifier        | 6636510237226062864  
pg_control_last_modified | 2019-03-05 19:54:56+08  
```  
2\.6、当前实例如果重启，需要的最早的REDO。  
postgres=# select * from pg_control_recovery();  
-[ RECORD 1 ]-----------------+------------  
min_recovery_end_lsn          | 5D/A7FFFFE0  
min_recovery_end_timeline     | 1  
backup_start_lsn              | 0/0  
backup_end_lsn                | 0/0  
end_of_backup_record_required | f  
2\.7、从当前wal目录中，获取到最大的WAL文件名，通常会是当前需要的WAL或者上一个已经REPLAY万的WAL文件。  
```  
postgres=# select * from pg_ls_waldir() order by 1 desc limit 1;  
           name           |   size   |      modification        
--------------------------+----------+------------------------  
 000000010000005D000000A7 | 16777216 | 2019-03-05 19:48:53+08  
(1 row)  
```  
## 时间点恢复，手工拷贝wal文件的流程 - 通常不需要手工拷贝，只要指定restore_command让数据库自己来即可  
配置recovery.conf  
1、配置恢复目标  
2、配置restore_command命令，打印下一个需要的WAL文件以及HISTORY文件，输出到某个文件中。参考方法1。  
3、配置pause  
4、配置打开hot_standby  
5、从restore_command命令输出到某个文件中得到。下一个需要的WAL文件以及HISTORY文件。  
优先拷贝history文件，防止走错时间线。  
如果history文件确实存在并拷贝成功，下一个拷贝的文件是.partial文件，千万不要搞错。  
6、通过pg_is_wal_replay_paused判断是否停止  
```  
postgres=# select pg_is_wal_replay_paused();  
 pg_is_wal_replay_paused   
-------------------------  
 f  
(1 row)  
```  
如果返回T，表示已经到达还原点，不需要在拷贝文件。  
## 参考  
[《PostgreSQL 时间点恢复（PITR）在异步流复制主从模式下，如何避免主备切换后PITR恢复(备库、容灾节点、只读节点)走错时间线(timeline , history , partial , restore_command , recovery.conf)》](../201901/20190120_03.md)    
[《PostgreSQL PITR THREE recovery target MODE: name,xid,time USE CASE - 2》](../201302/20130205_01.md)    
[《PostgreSQL PITR THREE recovery target MODE: name,xid,time USE CASE - 1》](../201302/20130204_01.md)    
[《PostgreSQL recovery target introduce》](../201301/20130130_01.md)    
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")