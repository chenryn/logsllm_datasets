# 微软签名漏洞利用 - 一种虽老但有效的技术

## 前言
本文介绍了一种基于微软签名机制的漏洞利用技术。正规公司开发的PE文件通常会附带数字签名以确保其来源可信。然而，微软的签名机制并未覆盖所有数据结构，因此可以通过修改这些未被签名的数据结构来嵌入恶意代码（如shellcode），而不会影响签名校验的有效性。

这项技术的实际应用价值如何呢？个人认为它更像是锦上添花而非雪中送炭的技术手段。最近，有人将此方法封装成了适用于Cobalt Strike（CS）框架下的.NET和BOF（Beacon Object File）工具。接下来，我们将深入探讨该工具的工作原理及其潜在风险。

## SigFile红队工具分析
### 工作流程概述
1. **Shellcode嵌入**：首先通过SigFile程序将加密后的shellcode插入到一个拥有合法数字签名（例如微软签名）的PE文件中，并上传至目标服务器。
2. **规避静态检测**：由于大多数反病毒软件（AV/EDR）对带有知名厂商签名的文件采取宽松态度，这一步骤成功绕过静态扫描的可能性较高。
3. **内存加载执行**：使用SigLoad读取并解密位于PE文件中的shellcode，在内存中直接执行而不落地磁盘，进一步减少被检测的风险。
4. **远程进程注入**：最后一步是通过标准API调用来实现远程进程注入并运行shellcode。

### 安全评估
- **静态查杀概率**：考虑到该技术已存在多年（至少自2013年起），现代反病毒解决方案可能已经具备了相应的防御措施。根据经验判断，我给这一阶段的安全评分约为7分（满分10分）。
- **动态行为监控**：尽管采用了内存加载方式，但最终仍需依赖于易被监视的系统调用来完成操作，因此整体隐蔽性有限。

## 使用测试
### 实验步骤
1. 利用SigFile生成包含特定shellcode且保持原有数字签名不变的PE文件。
2. 检查目标系统是否启用了针对此类攻击的防护补丁（KB2915720）。
3. 尝试使用Cobalt Strike平台上的SigLoader加载并执行上述准备好的恶意样本。

### 测试结果
- 在未启用相关安全更新的情况下，能够顺利加载并执行shellcode。
- 遇到了一些编码问题导致初次尝试失败，经过调试修正后最终成功实现了预期功能。

## 总结
尽管这种方法提供了一定程度上的隐蔽性和绕过传统防病毒软件的能力，但它并不是万能钥匙。随着网络安全领域的发展，单纯依靠某一点优势难以保证长期有效。此外，后续涉及的操作（如进程注入）仍然面临较高的被拦截风险。总之，虽然这种技术具有一定实用性，但在实际应用时还需结合其他策略共同实施才能达到最佳效果。