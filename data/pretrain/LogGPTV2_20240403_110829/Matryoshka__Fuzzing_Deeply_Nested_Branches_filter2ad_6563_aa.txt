title:Matryoshka: Fuzzing Deeply Nested Branches
author:Peng Chen and
Jianzhong Liu and
Hao Chen
Matryoshka: Fuzzing Deeply Nested Branches
Hao Chen
Peng Chen
Jianzhong Liu
University of California, Davis
PI:EMAIL
ByteDance AI Lab
PI:EMAIL
ShanghaiTech University
PI:EMAIL
ABSTRACT
Greybox fuzzing has made impressive progress in recent years,
evolving from heuristics-based random mutation to solving in-
dividual branch constraints. However, they have difficulty solv-
ing path constraints that involve deeply nested conditional state-
ments, which are common in image and video decoders, network
packet analyzers, and checksum tools. We propose an approach
for addressing this problem. First, we identify all the control flow-
dependent conditional statements of the target conditional state-
ment. Next, we select the taint flow-dependent conditional state-
ments. Finally, we use three strategies to find an input that sat-
isfies all conditional statements simultaneously. We implemented
this approach in a tool called Matryoshka1 and compared its effec-
tiveness on 13 open source programs with other state-of-the-art
fuzzers. Matryoshka achieved significantly higher cumulative line
and branch coverage than AFL, QSYM, and Angora. We manually
classified the crashes found by Matryoshka into 41 unique new
bugs and obtained 12 CVEs. Our evaluation demonstrates the key
technique contributing to Matryoshka’s impressive performance:
among the nesting constraints of a target conditional statement,
Matryoshka collects only those that may cause the target unreach-
able, which greatly simplifies the path constraint that it has to
solve.
CCS CONCEPTS
• Security and privacy → Software security engineering; •
Software and its engineering → Software testing and debug-
ging.
KEYWORDS
fuzzing, optimization, taint analysis, vulnerability detection
ACM Reference Format:
Peng Chen, Jianzhong Liu, and Hao Chen. 2019. Matryoshka: Fuzzing Deeply
Nested Branches. In 2019 ACM SIGSAC Conference on Computer and Com-
munications Security (CCS ’19), November 11–15, 2019, London, United King-
dom. ACM, New York, NY, USA, 15 pages. https://doi.org/10.1145/3319535.
3363225
1Matryoshka dolls are the set of wooden dolls of decreasing size placed one inside
another, which emblematizes the deeply nested conditional statements that our tool
can fuzz.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full cita-
tion on the first page. Copyrights for components of this work owned by others than
the author(s) must be honored. Abstracting with credit is permitted. To copy other-
wise, or republish, to post on servers or to redistribute to lists, requires prior specific
permission and/or a fee. Request permissions from permissions@acm.org.
CCS ’19, November 11–15, 2019, London, United Kingdom
© 2019 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ACM ISBN 978-1-4503-6747-9/19/11…$15.00
https://doi.org/10.1145/3319535.3363225
1 INTRODUCTION
Fuzzing is an automated software testing technique that has suc-
cessfully found many bugs in real-world software. Among various
categories of fuzzing techniques, coverage-based greybox fuzzing
is particularly popular, which prioritizes branch exploration to trig-
ger bugs within hard-to-reach branches efficiently. Compared with
symbolic execution, gray box fuzzing avoids expensive symbolic
constraint solving and therefore can handle large, complex pro-
grams.
AFL [2] is a rudimentary greybox fuzzer. It instruments the pro-
gram to report whether the current input has explored new states
at runtime. If the current input triggers a new program state, then
the fuzzer keeps the current input as a seed for further mutation [35].
However, since AFL mutates the input randomly using only crude
heuristics, it is difficult to achieve high code coverage.
More recent fuzzers use program state to guide input mutation
and showed impressive performance improvements over AFL, e.g.,
Vuzzer [30], Steelix [26], QSYM [41], and Angora [13]. Take An-
gora for example. It uses dynamic taint tracking to determine which
input bytes flow into the conditional statement guarding the tar-
get branch and then mutates only those relevant bytes instead of
the entire input to reduce the search space drastically. Finally, it
searches for a solution to the branch constraint by gradient descent.
However, these fuzzers face difficulties when solving path con-
straints that involve nested conditional statements. A branch con-
straint is the predicate in the conditional statement that guards the
branch. The branch is reachable only if (1) the conditional state-
ment is reachable, and (2) the branch constraint is satisfied. A path
constraint satisfies both these conditions. When a conditional state-
ment s is nested, s is reachable only if some prior conditional state-
ments P on the execution path are reachable. If the branch con-
straints in fsg[P share common input bytes, then while the fuzzer
is mutating the input to satisfy the constraint in s, it may invali-
date the constraints in P, thus making s unreachable. This problem
plagues the aforementioned fuzzers since they fail to track control
flow and taint flow dependencies between conditional statements.
Nested conditional statements are common in encoders and de-
coders for both images and videos, network packet parsers and
checksum verifiers, which have a rich history of vulnerabilities.
Though concolic execution may solve some nested constraints, Yun
et al. showed that concolic execution engines can exhibit over-
constraining issues, which makes it too expensive to solve the con-
straints [41], especially in real-world programs.
Figure 1 shows such an example in the program readpng. The
predicate on Line 6 is nested inside the predicate on Line 4. 2 It is
difficult for the fuzzer to find an input that reaches the false branch
of Line 6 because the input has to satisfy the false branch of Line 4
2Although syntactically both Line 4 and Line 6 are at the same level, Line 6 is nested
inside Line 4 in the control flow graph because the true branch of Line 4 is an imme-
diate return.
1 // pngrutil .c , Line 2406
2 png_crc_read ( png_ptr , buffer , length );
3 buffer [ length ] = 0;
4 if ( png_crc_finish ( png_ptr , 0) != 0)
5
6 if ( buffer [0] != 1 && buffer [0] != 2) {
7
8
9 }
return ;
png_chunk_benign_error ( png_ptr , " invalid unit ");
return ;
Figure 1: An example showing a nested conditional state-
ment on Line 6. It is difficult to find an input that reaches
the false branch of Line 6 due to the check on Line 4.
if (x  1) { .... }
}
}
}
Figure 2: A program demonstrating nested conditional state-
ments. Line 6 depends on Line 2, 3, and 4 by control flow, and
on Line 2 and 3 by taint flow
.
as well. When a fuzzer tries to mutate the predicate on Line 6, it
mutates only the input bytes flowing into buffer[0], but this will
almost surely cause the CRC check in png_crc_finish() to fail,
which will cause Line 4 to take the true branch and return.
To evaluate whether current fuzzers have difficulty in solving
path constraints involving nested conditional statements, we used
Angora as a case study. We ran it on 13 open source programs,
which read structured input and therefore likely have many nested
conditional statements. Table 1 shows that on all the programs, the
majority of unsolved path constraints involve nested conditional
statements. On five of the programs, more than 90% of the unsolved
constraints involve nested conditional statement.3 This suggests
that solving these constraints will improve the fuzzer’s coverage
significantly.
We design and implement an approach that allows the fuzzer to
explore deeply nested conditional statements. The following uses
the program in Figure 2 as an example. Suppose the current input
runs the false branch of Line 6, and the fuzzer wishes to explore
the true branch of Line 6.
(1) Determine control flow dependency among conditional state-
ments. The first task is to identify all the conditional state-
ments before Line 6 on the trace that may make Line 6 un-
reachable. They include Line 2, 3, and 4, because if any of
them takes a different branch, then Line 6 will be unreach-
able. Section 3.3 will describe how we use intraprocedural
and interprocedural post-dominator trees to find those con-
ditional statements.
(2) Determine taint flow dependency among conditional statements.
Among the conditional statements identified in the previous
step, only those on Line 2 and 3 have taint flow dependen-
cies with Line 6. This is because when we mutate y on Line 6,
this may change the branch choice of Line 3 and hence mak-
ing Line 6 unreachable. To avoid this problem, we must keep
the branch choice of Line 3, which may require us to mu-
tate both x and y, but this may change the branch choice of
Line 2. Therefore, Line 2 and 3 have taint flow dependencies
with Line 6. By contrast, the branch choice of Line 4 never
changes as we mutate y to explore the true branch of Line 6,
so it has no taint flow dependencies with Line 6. Section 3.4
will describe how we find those taint flow dependent condi-
tional statements.
(3) Solve constraints. Finally, we need to mutate the input to
satisfy several dependent conditional statements simultane-
ously. In other words, we need to find a new input that
both reaches Line 6 and satisfies its true branch. We propose
three strategies.
(cid:15) The first strategy conservatively assumes that if we mu-
tate any byte flowing into any conditional statements that
Line 6 depends on, then Line 6 will become unreachable.
So this strategy avoids mutating those bytes when fuzzing
Line 6.4 (Section 3.5.1)
(cid:15) The second strategy artificially keeps the branch choices
of all the conditional statements that Line 6 depends on
when mutating the input bytes that flow into Line 6. When
it finds a satisfying input, it verifies whether the program
can reach Line 6 without altering branch choices. If so,
then the fuzzer successfully solves this problem. Other-
wise, the fuzzer will backtrack on the trace to try this
strategy on Line 3 and Line 2. (Section 3.5.2)
(cid:15) The last strategy tries to find a solution that satisfies all
the dependent conditional statements. It defines a joint
constraint that includes the constraint of each dependent
conditional statement. When the fuzzer finds an input
that satisfies the joint constraint, then the input is guar-
anteed to satisfy the constraints in all the dependent con-
ditional statements. (Section 3.5.3)
Our approach assumes no special structure or property about
the program being fuzzed, such as magic bytes or checksum func-
tions. Instead, our general approach to solving nested conditional
statements can handle those special structures naturally.
We implemented our approach in a tool named Matryoshka and
compared its effectiveness on 13 open source programs against
other state-of-the-art fuzzers. Matryoshka found a total of 41 unique
new bugs and obtained 12 CVEs in seven of those programs. Ma-
tryoshka’s impressive performance is due not only to its ability to
solve nested constraints but also to how it constructs these con-
straints. Traditional symbolic execution collects the predicates in
3Some conditional statements depend on other conditional statements by control flow,
but they do not share input bytes.
4This strategy fails to work on this example because the fuzzer is left with no input
byte to mutate.
all the conditional statements on the path. By contrast, Matryoshka
collects the predicates in only those conditional statements that the
target branch depends on by both control flow and taint flow. Our
evaluation shows that the latter accounts for only a small fraction
of all the conditional statements on the path, which greatly simpli-
fies the constraints that Matryoshka has to solve.
2 BACKGROUND
Greybox fuzzing is a popular program testing method that incor-
porates program state monitoring with random input mutation to
great effect. However, current state-of-the-art greybox fuzzers are
unable to reliably and efficiently solve nested conditional state-
ments. Fuzzers using either heuristics (e.g., AFL) or principled mu-
tation methods (e.g., Angora) do not have enough information about
control flow and taint flow dependencies between conditional state-
ments to devise an input that can satisfy all the relevant branch
constraints. Other fuzzers utilizing hybrid concolic execution such
as Driller experience performance hits due to concretizing the en-
tire symbolic constraints of a path [41, 42]. QSYM is a practical
concolic execution fuzzer, but it is tailored to solve only the last
constraint on a path, thus facing the same challenge of solving
nested conditional statements as Angora.
Using Angora as an example, we evaluated the impact of nested
conditional statements on Angora’s performance and analyzed the
constraints in eight programs that Angora failed to solve in Ta-
ble 1, where each constraint corresponds to a unique branch in the
program. The second column shows what percentage of the un-
solved constraints are nested, which depend on other conditional
statements by control flow and taint flow (Section 3.4). The third
column shows what percentage of all the constraints, both solved
and unsolved, are nested. Table 1 shows that the majority of the un-
solved constraints are nested, ranging from 57.95% to nearly 100%.
It also shows that nested constraints account for a substantial por-
tion of all the constraints, ranging from 44.14% to 89.50%. These
results suggest that solving nested constraints could improve the
coverage of greybox fuzzers substantially.
3 DESIGN
3.1 Problem
State-of-the-art coverage-guided fuzzers, e.g., Angora [13], QSYM [41],
VUzzer [30] and REDQUEEN [4], explore new branches by solving
branch constraints, where a branch constraint is the predicate in
the conditional statement that guards the branch. This typically in-
volve the following steps. First, identify the input bytes that affect
each conditional statement using dynamic taint analysis or sim-
ilar techniques. Then, determine how the input bytes should be
mutated, such as calculating the gradient of the predicate and us-
ing gradient descent, matching magic bytes or resorting to using a
symbolic execution solver. Finally, execute the program with the
mutated input and verify if this triggers the other branch in the
conditional statement.
Although this approach is effective in solving many branch con-
straints, it fails when the target conditional statement becomes un-
reachable during input mutation.
Figure 2 shows an example. Let the variables x, y, and z contain
different input bytes. Assume that the current input executes the
Table 1: Percentage of nested constraints encountered by An-
gora
Program
djpeg
file
jhead
mutool
nm
objdump
readelf
readpng
size
tcpdump
tiff2ps
xmlint
xmlwf
Percentage of nested constraints in
all unsolved constraints
all constraints
90.00 %
86.49 %
57.95 %
80.88 %
84.32 %
90.54 %
84.12 %
94.02 %
87.86 %
96.15 %
75.56 %
78.18 %
96.18 %
75.65 %
44.14 %
51.53 %
58.63 %
68.16 %
73.95 %
70.50 %
89.50 %
71.46 %
78.98 %
62.18 %
72.37 %
68.16 %
false branch of Line 6, and the goal is to explore the true branch
of Line 6. Then, the fuzzer determines, by dynamic byte-level taint
analysis, that it needs to change the bytes in y. Consider two dif-
ferent initial values of x and y.
(1) x = 0 and y = 1. If the fuzzer mutates y to 3, then the
program will no longer reach Line 6 because Line 3 will take
a different (false) branch. This renders the fuzzer helpless
when solving the branch predicate, even though a satisfying
assignment y = 2 exists.
(2) x = 1 and y = 1. In this case, no value of y can satisfy the
true branches of Line 2, Line 3, and Line 6 simultaneously,
unless we also mutate x. However, since x does not flow
into the conditional statement on Line 6, the fuzzer does
not know that it should mutate x, so it can never find a sat-
isfying assignment to explore the true branch of Line 6, re-
gardless of the algorithm used to solve the constraint.
This example shows that to execute an unexplored branch, it is
sometimes inadequate to mutate only the input bytes that flow into
the conditional statement because doing so might render this state-
ment unreachable. One could naively mutate all the input bytes,
but that would increase the search space by many magnitudes to
make this approach too expensive to be practical.
3.2 Solution overview
To overcome the problem in Section 3.1, our key insight is that
when we fuzz a conditional statement, we must find an input that
both satisfies the branch constraint and keeps the statement reach-
able. Most fuzzers that explore branches by solving branch con-
straints consider only the satisfiability criterion but fail to consider
the reachability criterion. We propose the following steps to sat-
isfy both criteria while mutating the input. Let s be a conditional
statement on the trace of the program on this input. Our goal is
to mutate the input to let s take a different branch. We call s the
target conditional statement and say that the new input satisfies s.
(1) Determine control flow dependencies among conditional state-
ments. Identify all the conditional statements before s on
the trace that may make s unreachable. For example, if s
is on Line 6 in Figure 2, then if any of the conditional state-
ments on Line 2, 3, and 4 takes a different branch, then Line 6
will be unreachable. We call these the prior conditional state-
ments of s, which s depends by control flow. By contrast,
no matter which branch Line 5 takes, Line 6 will always be
reachable. Section 3.3 will describe this step in detail.
(2) Determine taint flow dependency among conditional statements.
Among the prior conditional statements of s, identify those
whose corresponding input bytes may have to be mutated
to satisfy s. For example, let s be Line 6 in Figure 2. Among
its three prior conditional statements, only those on Line 2
and 3 contain bytes (x and y) that may have to be mutated to
satisfy s. We call these effective prior conditional statements,
which s depends on by taint flow. By contrast, Line 4 con-