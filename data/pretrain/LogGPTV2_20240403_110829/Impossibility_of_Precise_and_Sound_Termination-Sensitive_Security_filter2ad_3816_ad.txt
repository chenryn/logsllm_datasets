(cid:2)
(cid:2)E (cid:2)P ; while e do P, μ, W(cid:3)l
LSEQ1
(cid:2)P1, μ, W(cid:3)l
(cid:2)P1; P2, μ, W(cid:3)l
(cid:2)while e do P, μ, W(cid:3)l
(cid:2) (cid:2)P (cid:2)
(cid:2)E (cid:2)P (cid:2)
1, μ(cid:2), W (cid:2)(cid:3)l
1; P2, μ(cid:2), W (cid:2)(cid:3)l
a
a
LWHILE2
μ(e) = v
(cid:2)while e do P, μ, W(cid:3)l
v (cid:6)= 1
(cid:2)
(cid:2)E (cid:2)skip, μ, W(cid:3)l
l(cid:2) (cid:6)(cid:7) l
LIN1
LIN3
Γ(ch) = l(cid:2)
(cid:2)
(cid:2)E (cid:2)skip, μ[x (cid:4)→ def(ch)], W(cid:3)l
(cid:2)input x from ch, μ, W(cid:3)l
l(cid:2) (cid:2) l
(cid:2)
(cid:2)E (cid:2)skip, μ[x (cid:4)→ v], W [ch (cid:4)→ K](cid:3)l
(cid:2)input x from ch, μ, W(cid:3)l
W (ch) = ch(v).K
Γ(ch) = l(cid:2)
LSEQ2 (cid:2)skip; P2, μ, W(cid:3)l
Γ(ch) = l
ch(v)
(cid:2)
(cid:2)E (cid:2)P2, μ, W(cid:3)l
LIN2
(cid:2)input x from ch, μ, W(cid:3)l
Γ(ch) = l(cid:2)
LIN4
(cid:2)input x from ch, μ, W(cid:3)l
(cid:2)E (cid:2)skip, μ[x (cid:4)→ v], W(cid:3)l
l(cid:2) (cid:2) l
(cid:2)
(cid:2)E (cid:2)input x from ch, μ, W(cid:3)l
W (ch) = []
LOUT1
Γ(ch) = l
μ(e) = v
(cid:2)output e to ch, μ, W(cid:3)l
o = ch(v)
(cid:2)E (cid:2)skip, μ, W(cid:3)l
o
LOUT2
Γ(ch) (cid:6)= l
(cid:2)output e to ch, μ, W(cid:3)l
μ(e) = v
(cid:2)
(cid:2)E (cid:2)skip, μ, W(cid:3)l
Fig. 4: Semantics of local executions
are described in Fig. 4. The semantic rules for assignment, if,
while, sequential and skip commands are similar to the ones
of programs. When the local execution at l generates an output
event to a channel ch at level l, this output event is allowed
(rule LOut1). Otherwise, the output event is suppressed (rule
LOut2).
(cid:2)
(cid:2) where l
When the local execution at l asks for an input event at a
higher level or at an incomparable level (i.e. the input event
(cid:6)(cid:15) l), as described in rule LIn1, the
is on ch at l
execution consumes a default value returned by def(ch), where
def() is a function that maps channels to default values (hence,
the local execution does not depend on conﬁdential data).
When the local execution at l asks for an input event on ch
also at l, the local execution consumes an input event from the
environment (rule LIn2). We consider the last case where the
local execution at l asks for an input event at a lower level,
i.e. the input event is on ch at l
W (ch) is not empty, it consumes an input event from W (ch)
(rule LIn3). Otherwise, it has to wait (rule LIn4).
(cid:2) (cid:3) l. If its local input queue
Semantics of SME: A state of SME lecs is a function
that maps each level l to a local execution at l. A state lecs
is terminated when all of its local executions are terminated.
Given a state (cid:10)P, μ(cid:11) of a program in the language presented in
§III, SME(P, μ) returns lecs s.t. for all l, lecs(l) = (cid:10)P, μ, W(cid:11)l,
where for all ch, W (ch) = [].
SME is equipped with a scheduler responsible for schedul-
ing local executions. The scheduler is modeled by the func-
tion select() 1. Given a non-terminated state lecs of SME,
select(lecs) determines which local execution is executed next.
The semantics of SME is described in Fig. 5, where
lec is the conﬁguration of a local execution. When a local
1We consider only deterministic programs and SME is a program. To guar-
antee that SME is deterministic, we consider only deterministic schedulers.
Therefore, we model schedulers by using a function.
select(lecs) = l
(cid:2)(cid:2) = lecs[l (cid:4)→ lec
lecs
(cid:2)]
lecs(l) = lec
lecs
(cid:2)
i
(cid:2)S lecs
lecs
lec
(cid:2)
i
(cid:2)E lec
(cid:2) = distribute(lecs
(cid:2)(cid:2), ch(v))
i = ch(v)
SME1
lecs(l) = lec
SME2
lec
select(lecs) = l
SME3
(cid:2) = lecs[l (cid:4)→ lec
(cid:2)]
(cid:2)
select(lecs) = l
o
(cid:2)E lec
lecs
(cid:2)
o
(cid:2)S lecs
lecs
lecs(l) = (cid:2)skip, μ, W(cid:3)l
(cid:2)
(cid:2)S lecs
lecs
Fig. 5: Semantics of SME
execution consumes an input event from the environment,
SME distributes the input event to executions at higher levels
by using the distribute() function. For any lecs and ch(v),
distribute(lecs, ch(v)) returns an SME state where for any
level l,
distribute(lecs, ch(v))(l) =
(cid:10)P, μ, W [ch (cid:13)→ W (ch).ch(v)](cid:11)l
⎧⎪⎨
⎪⎩
lecs(l)
if Γ(ch) (cid:3) l,
where lecs(l) = (cid:10)P, μ, W(cid:11)l,
if Γ(ch) (cid:6)(cid:3) l.
When a local execution generates an output event, SME will
also generate this event (rule SME2). When a terminated local
execution is selected to be executed, since the local execution
has terminated, SME just generates a silent output event (rule
SME3). Notice that depending on the deﬁnition of select(),
rule SME3 may not be applied. For example, in the case of a
low-prio scheduler, this rule is not applied.
Lemma VI.1. For any lecs, lecs satisﬁes Deﬁnition III.1.
503
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:28:58 UTC from IEEE Xplore.  Restrictions apply. 
Proof. We prove this lemma by case analysis on the semantic
rules of SME. Important facts used in the proof are that
select(), distribute(), and def() are functions.
(cid:2)
(cid:2)
(cid:2)
lecs
Since
satisﬁes Deﬁnition III.1, we
, O(cid:11) and lecs(I)(cid:2)SME A. Because the seman-
lecs(I)(cid:2)SME (cid:10)I
tics relation for lecs is clear (i.e. (cid:2)S), we write lecs(I) (cid:2)
, O(cid:11) and lecs(I) (cid:2) A instead of lecs(I) (cid:2)SME (cid:10)I
, O(cid:11) and
(cid:10)I
lecs(I)(cid:2)SME A.
can write
Next we investigate SME with different schedulers. First we
look at the low-prio scheduler [1] since it is used in the original
SME paper [1]. We give an example demonstrating that SME
with a low-prio scheduler cannot enforce soundly TSNI when
the lattice is totally ordered. We show that SME with the low-
prio scheduler cannot enforce precisely ITSNI and it offers
ITSNI only when lattice is totally ordered. Therefore, we
consider fair schedulers [15] and we prove that with a fair
scheduler, SME can enforce soundly and precisely ITSNI.
A. Low-prio scheduler
SME with a low-prio scheduler is denoted by SMEL. As
presented in [1], the low-prio scheduler always chooses the
non-terminated local execution at the smallest level to execute
ﬁrst. When the order in the lattice is not total, it will be
converted to a total order and the smallest level is determined
by the total order.
1) Termination-sensitive noninterference:
In [1], the au-
thors proved that SMEL could enforce soundly and precisely
TSNI deﬁned with totally ordered lattice. However, their proof
is not correct since as proven in Theorem V.1, TSNI cannot
be enforced soundly and precisely. Indeed, SMEL does not
enforce soundly TSNI even when the lattice is totally ordered
as illustrated in Example VI.1.
Example VI.1 (SMEL is not TSNI sound). We consider the
totally ordered lattice with two levels: L and H, where L (cid:3) H.
Let us look at the below program where chH is a channel at
level H. This program is not TSNI since the conﬁdential data
from chH inﬂuence the termination behavior of the program.
1: input x from chH
2: while x > 0 do skip
Suppose that the default value for chH is 0. Since the
default value for chH is 0, the local execution at L always
terminates and the local execution at H always consumes an
input value from chH. When the input value from chH is
0, the high execution terminates and hence, the whole SMEL
terminates. When the input value from chH is 1, the high
execution diverges, and hence, the whole SMEL diverges.
Since there is no channel at level L, input streams chH(0)
and chH(1) are equivalent at L. However, SMEL on these
inputs has different termination behaviors. Thus, SMEL does
not enforce soundly TSNI.
In [1], the authors argued informally that we can extend a
ﬁnite lattice to a totally ordered one, and since SMEL with
the scheduler deﬁned based on the totally ordered lattice was
TSNI sound and precise, SMEL was also TSNI sound and
precise for the arbitrary lattice. This argument is not correct
since from Theorem V.1, there is no sound and precise enforce-
ment mechanism for TSNI. The argument is ﬂawed since by
extending a lattice to a totally ordered one, we introduce new
and unwanted ﬂows. For example, by extending the lattice
with four levels L, M1, M2, H, where L (cid:3) Mi (cid:3) H, to
L (cid:3)T M1 (cid:3)T M2 (cid:3)T H, we introduce a new and unwanted
ﬂow: the ﬂow from M1 to M2. In addition, as explained above,
SMEL is not TSNI sound when the lattice is total.
(cid:2) where l and l
2) Indirect termination-sensitive noninterference: For non-
total
lattices, SMEL is not ITSNI since as illustrated in
Example VI.2, the execution at a level l may inﬂuence the
execution at l
Example VI.2 (Non-totally ordered lattice). When the order
(cid:3) in the lattice is not total, SMEL does not offer ITSNI. We
L (cid:3) M1 (cid:3) H and L (cid:3) M2 (cid:3) H. The program below has
consider the lattice with four levels: L, M1, M2, and H, where
(cid:2) are incomparable levels.
two channels: chM1 and chM2 at respectively levels M1 and
M2. The default value for chM1 is 0.
1: input x from chM1
2: while x > 1 do skip
3: input y from chM2
As described above, when the order (cid:3) is not total, a total
order (cid:3)T is constructed and the smallest level is determined
order is L (cid:3)T M1 (cid:3)T M2 (cid:3)T H. W.r.t. this total order,
based on the constructed total order. Suppose that the total
the execution at M2 starts executing only when the execution
at M1 terminates. However, depending on the input event
from chM1, the execution at M1 may diverge and hence, the
execution at M2 may be starved.
Let us look at I1 = I[chM1 (cid:13)→ chM1(2), chM2 (cid:13)→
chM2(1)] and I2 = I[chM1 (cid:13)→ chM1(1), chM2 (cid:13)→ chM2(1)]
for some I. W.r.t. I1, the local execution at M1 loops forever
and no input event from chM2 is consumed. W.r.t. I2, the
local execution at M1 terminates and the execution at M2
can consume chM2(1) (notice that because the default event
for chM1 is chM1(0), the execution at M2 does not go to the
loop). We have that I1|M2
2|M2, where
(cid:2)
lecs(I1)(cid:2) (cid:10)I
2, O2(cid:11), and lecs is the SMEL
(cid:2)
state constructed with the program. In other words, when the
lattice is not total, SMEL does not offer ITSNI.
1, O1(cid:11), lecs(I2)(cid:2) (cid:10)I
= I2|M2 but I
1|M2
(cid:2)
(cid:6)= I
(cid:2)
As illustrated in Example VI.2, SMEL cannot enforce
soundly ITSNI because of the inﬂuence of local executions
at incomparable levels. Therefore hereafter in this sub-section
we consider only lattices with total orders.
W.r.t. the low-prio scheduler, we have the following property
which states that if lecs(l) is selected, it must be not terminated
and all local executions at lower levels must be terminated.
Property VI.1. For any non-terminated lecs,
select(lecs) = l =⇒ ¬terminated(lecs(l)) ∧
(∀l
(cid:2) : l
(cid:2) (cid:3) l =⇒ terminated(lecs(l
(cid:2)))).
When the local execution at l is selected to be executed
next, from Property VI.1, all local executions at lower levels
504
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:28:58 UTC from IEEE Xplore.  Restrictions apply. 
have terminated. Hence, there are no consumed input events
or generated output events on channels at levels smaller than
l. Therefore, we have the following lemma.
Lemma VI.1. Suppose that select(lecs) = l. For all I and
(cid:2)(ch) = O(ch) = [], where
ch s.t. Γ(ch) (cid:3) l, it follows that I
Q(I)(cid:2) (cid:10)I
, O(cid:11).
(cid:2)
Proof. By coinduction and case analysis.
We next prove that if SMEL may still consume or generate
events at l or smaller, on equivalent inputs, the events visible
at l are the same.
Lemma VI.2. Suppose that select(lecs) = l
any I1 and I2 s.t. I1|l = I2|l, it follows that I
O1|l = O2|l, where lecs(I1)(cid:2)(cid:10)I
(cid:2) where l
1|l = I
(cid:2)
1, O1(cid:11) and lecs(I2)(cid:2)(cid:10)I
(cid:2) (cid:15) l. For
2|l and
(cid:2)
2, O2(cid:11).
(cid:2)
(cid:2)
Proof. By coinduction and case analysis.
Theorem VI.1. For any lecs of SMEL, lecs is ITSNI.
Proof. Let lecs be an arbitrary state of SMEL. Let I1 and
I2 be arbitrary inputs s.t. I1|l = I2|l. If terminated(lecs), we
can check that the theorem holds. We consider the case where
¬terminated(lecs). Let l
(cid:2) = select(lecs). We have two sub
(cid:6)(cid:15) l. Since the order is total, l (cid:3)
(cid:2)
cases. In the ﬁrst case, l
(cid:2). From Lemma VI.1, for all ch s.t. Γ(ch) (cid:15) l, we have
l
(cid:2)
(cid:2)
2(ch) = O1(ch) = O2(ch) = []. Therefore,
1(ch) = I
that I
1|l = I
(cid:2) (cid:15) l. From
2|l and O1|l = O2|l. In the second case, l
(cid:2)
(cid:2)
I
1|l = I
(cid:2)