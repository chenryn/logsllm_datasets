大可(Dark) 
iOS软体逆向工程应用 & 手机远程监控技术 
经历 
 PHATE Security- 创办人 
 Zuso Security - 成员 
 Chroot - 成员 
 吉瑞科技 - R&D 
 网骇科技 - R&D 
 某警调单位 - 外聘顾问 
 资策会 - 教育训练讲师 
 中科院 - 教育训练讲师 
内容简介 
 iOS 软体逆向工程应用 
 IAP (In-App-Purchases) 破解技术 
 游戏作弊引擎设计 
 iOS远程控制软体设计 
谨以此纪念Steve Jobs 
iOS 软体逆向工程技巧 
iOS APP简介 
 执行档格式 
 Mach-O 
 组合语言格式 
 ARMv6  
○ Thumb 
 ARMv7  
○ Thumbv2 
工具 
 已JB的iphone 
 GDB 
 动态分析 
 IDA Pro 
 静态分析 
 otool 
 观察mach-o执行档结构 
 class-dump 
 将执行档中的objective C classes输出成.h 
拿IDA Pro开刀前… 
 将加密的code还原  
 otool –l filepath | grep ‘crypt’ (确定加密的位置&大小) 
 使用gdb将程式执行后~把该区域dump出来 
 重新塞入执行档 
     DEMO 
Binary Patching 
 找出要修改的位置 
 利用ARM Assembler组译 
 找出对应OP Code 
 修改 , 并重新签章 
     DEMO 
绕过IAP (In-App-Purchases)检查 
两种绕过IAP介面的通用方式 
 从执行档下手-分析IAP – API 
 -需JB 
 架设假IAP认证伺服器 (MITM SSL Proxy Server) 
 -不需JB 
IAP流程 – 从API角度看 
建立SKPaymentTransaction class 
根据购买状态将SKPaymentTransaction transactionState区分为 
SKPaymentTransactionStatePurchasing 
SKPaymentTransactionStatePurchased  
SKPaymentTransactionStateFailed 
SKPaymentTransactionStateRestored 
购买状态若有变化 , 则会呼叫 
(void)paymentQueue:(SKPaymentQueue *)queue updatedTransactions:(NSArray *)transactions 
Developer可根据transactions的类型来决定内购各种状态变化所要呈现的东西 
Sample: 
- (void)paymentQueue:(SKPaymentQueue *)queue updatedTransactions:(NSArray *)transactions  
{ 
    for (SKPaymentTransaction *transaction in transactions) 
    { 
        switch (transaction.transactionState) 
        { 
            case SKPaymentTransactionStatePurchased: 
                 if([self putStringToItunes:transaction.transactionReceipt]){ 
                     //许多developer会认为程式运作到这 , 就已经购买成功 , 而没再做订单验证 
                 } 
                   break; 
         } 
     } 
} 
Apple IAP收据验证伺服器 
 https://buy.itunes.apple.com/verifyReceipt 
 将订单转json传入伺服器即可验证 
 验证完会收到订单资讯 , status 0代表付款已完成 
 如下 
{"receipt":{"original_purchase_date_pst":"2012-07-12 05:54:35 
America/Los_Angeles", "purchase_date_ms":"1342097675882", 
"original_transaction_id":"170000029449420", 
"original_purchase_date_ms":"1342097675882", 
"app_item_id":"450542233", 
"transaction_id":"170000029449420", "quantity":"1", "bvrs":"1.4", 
"version_external_identifier":"9051236", 
"bid":"com.zeptolab.ctrexperiments", 
"product_id":"com.zeptolab.ctrbonus.superpower1", 
"purchase_date":"2012-07-12 12:54:35 Etc/GMT", 
"purchase_date_pst":"2012-07-12 05:54:35 
America/Los_Angeles", "original_purchase_date":"2012-07-12 
12:54:35 Etc/GMT", "item_id":"534185042"}, "status":0} 
Objective-C分析技巧 
 b [classname method] 
 objc_msgSend 
 objc_msgSend(object_ptr,@selector_name,arg0,arg1) 
 objc_msgSend($r0,$r1,$r2,$r3,…,…) 
 po $r0 
 class-dump –H filepath –o output 
     DEMO 
IAP流程 – 从App AppStore看 
 App向AppStore发送IAP Request 
 里面包含商品资讯 
 AppStore向使用者说明付款项目明细 
 使用者确认购买 , 则从AppStore处理交易 并且回传
订单收据给APP 
 开发者决定要如何处置订单收据 
   switch (transaction.transactionState) 
        { 
            case SKPaymentTransactionStatePurchased: 
                 if([self putStringToItunes:transaction.transactionReceipt]){ 
                     //许多developer会认为程式运作到这 , 就已经购买成功 , 而没再做订单验证 
                 } 
                   break; 
         } 
MITM方式绕过IAP机制 
 当App发出IAP Request时拦截该资讯 , 
并取出部分资讯来构造假收据传回App 
其他方式 
俄罗斯骇客架设DNS Server并把apple server domain name 指向自己ip 
 http://www.in-appstore.com/  
 优点: 
○ 不必担心别人伺服器会留下自己的IP,或其他纪录 
 缺点: 
○ 使用时无法上网 , 因为所有domain name都指向他的ip了 
○ 无法购买一些需要网路连线才可购买的东西 
○ 架构弹性不够大 , 若有除了apple外的额外伺服器验证 , 修改会很麻烦 
     DEMO 
iOS远程控制软体设计 
开发心得 
 unix socket 
 关掉萤幕tcp connection会断掉怎么办? 
 不断发heartbeat包跟server通讯 
 如何常驻在系统? 
 launchctl load /System/Library/LaunchDaemons/xxx.plist 
     DEMO 
游戏作弊引擎设计 
如何读写iOS APP记忆体? 
 task_for_pid 
 vm_read_overwrite 
 vm_write 
 设计MobileSubstrate Plugin 
 就像DLL Injection… 
     DEMO 
参考文献 
http://developer.apple.com/library/ios/#documentation/StoreKit/Refe
rence/SKPaymentTransaction_Class/Reference/Reference.html 
http://www.iphonedevwiki.net/index.php/MobileSubstrate 
http://www.peter-cockerell.net/aalp/html/frames.html 
http://sources.redhat.com/gdb/documentation/ 
iOS.Hackers.Handbook 
Patching_Applications_from_Apple_AppStore_with_additional_prot
ection_by_Reilly 
*感谢皮乐(http://hiraku.tw/)指点repo server架设&打包deb 
    Thank You! 
                   Q&A 
联络方式 
                 PI:EMAIL