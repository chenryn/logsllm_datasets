### 大可 (Dark)
#### iOS 软件逆向工程应用 & 手机远程监控技术

**经历**
- PHATE Security - 创始人
- Zuso Security - 成员
- Chroot - 成员
- 吉瑞科技 - 研发
- 网骇科技 - 研发
- 某警调单位 - 外聘顾问
- 资策会 - 教育训练讲师
- 中科院 - 教育训练讲师

**内容简介**
1. **iOS 软件逆向工程应用**
   - IAP (In-App-Purchases) 破解技术
   - 游戏作弊引擎设计
   - iOS 远程控制软件设计

**纪念 Steve Jobs**

### iOS 软件逆向工程技巧
#### iOS APP简介
- **执行档格式**: Mach-O
- **组合语言格式**:
  - ARMv6
    - Thumb
  - ARMv7
    - Thumbv2

#### 工具
- 已越狱的 iPhone
- GDB: 动态分析
- IDA Pro: 静态分析
- otool: 观察 Mach-O 执行档结构
- class-dump: 将执行档中的 Objective-C 类输出为 .h 文件

#### 使用 IDA Pro 之前
- 将加密代码还原
  - `otool –l filepath | grep ‘crypt’` (确定加密的位置和大小)
  - 使用 GDB 将程序执行后，将该区域 dump 出来
  - 重新塞入执行档
  - **DEMO**

#### 二进制修补 (Binary Patching)
- 找出要修改的位置
- 利用 ARM Assembler 编译
- 找出对应的 OP Code
- 修改并重新签名
  - **DEMO**

### 绕过 IAP (In-App-Purchases) 检查
#### 两种绕过 IAP 接口的通用方式
1. 从执行档下手 - 分析 IAP API
   - 需要越狱
2. 架设假 IAP 认证服务器 (MITM SSL Proxy Server)
   - 不需要越狱

#### IAP 流程 - 从 API 角度看
- 创建 `SKPaymentTransaction` 类
- 根据购买状态将 `SKPaymentTransaction transactionState` 区分为:
  - `SKPaymentTransactionStatePurchasing`
  - `SKPaymentTransactionStatePurchased`
  - `SKPaymentTransactionStateFailed`
  - `SKPaymentTransactionStateRestored`

- 当购买状态发生变化时，会调用:
  ```objc
  - (void)paymentQueue:(SKPaymentQueue *)queue updatedTransactions:(NSArray *)transactions {
      for (SKPaymentTransaction *transaction in transactions) {
          switch (transaction.transactionState) {
              case SKPaymentTransactionStatePurchased:
                  if ([self putStringToItunes:transaction.transactionReceipt]) {
                      // 许多开发者认为到此已经购买成功，而不再进行订单验证
                  }
                  break;
          }
      }
  }
  ```

#### Apple IAP 收据验证服务器
- URL: `https://buy.itunes.apple.com/verifyReceipt`
- 将订单转为 JSON 传入服务器即可验证
- 验证完成后会收到订单信息，`status 0` 代表付款已完成
- 示例:
  ```json
  {
      "receipt": {
          "original_purchase_date_pst": "2012-07-12 05:54:35 America/Los_Angeles",
          "purchase_date_ms": "1342097675882",
          "original_transaction_id": "170000029449420",
          "original_purchase_date_ms": "1342097675882",
          "app_item_id": "450542233",
          "transaction_id": "170000029449420",
          "quantity": "1",
          "bvrs": "1.4",
          "version_external_identifier": "9051236",
          "bid": "com.zeptolab.ctrexperiments",
          "product_id": "com.zeptolab.ctrbonus.superpower1",
          "purchase_date": "2012-07-12 12:54:35 Etc/GMT",
          "purchase_date_pst": "2012-07-12 05:54:35 America/Los_Angeles",
          "original_purchase_date": "2012-07-12 12:54:35 Etc/GMT",
          "item_id": "534185042"
      },
      "status": 0
  }
  ```

### Objective-C 分析技巧
- `b [classname method]`
- `objc_msgSend`
- `objc_msgSend(object_ptr, @selector_name, arg0, arg1)`
- `objc_msgSend($r0, $r1, $r2, $r3, …, …)`
- `po $r0`
- `class-dump –H filepath –o output`
  - **DEMO**

### IAP 流程 - 从 App Store 角度看
1. App 向 App Store 发送 IAP 请求
2. App Store 向用户说明付款项目明细
3. 用户确认购买，App Store 处理交易并回传订单收据给 App
4. 开发者决定如何处理订单收据
  ```objc
  - (void)paymentQueue:(SKPaymentQueue *)queue updatedTransactions:(NSArray *)transactions {
      for (SKPaymentTransaction *transaction in transactions) {
          switch (transaction.transactionState) {
              case SKPaymentTransactionStatePurchased:
                  if ([self putStringToItunes:transaction.transactionReceipt]) {
                      // 许多开发者认为到此已经购买成功，而不再进行订单验证
                  }
                  break;
          }
      }
  }
  ```

### MITM 方式绕过 IAP 机制
- 当 App 发出 IAP 请求时拦截该信息，并取出部分信息构造假收据传回 App
- 其他方式: 俄罗斯黑客架设 DNS 服务器并将苹果服务器域名指向自己的 IP
  - 优点: 不必担心别人的服务器会留下自己的 IP 或其他记录
  - 缺点:
    - 使用时无法上网，因为所有域名都指向他的 IP
    - 无法购买一些需要网络连接才能购买的东西
    - 架构弹性不够大，如果有除了苹果外的额外服务器验证，修改会很麻烦
  - **DEMO**

### iOS 远程控制软件设计
- **开发心得**
  - Unix socket
  - 关闭屏幕后 TCP 连接断开怎么办? 
    - 不断发送心跳包与服务器通讯
  - 如何常驻在系统?
    - `launchctl load /System/Library/LaunchDaemons/xxx.plist`
  - **DEMO**

### 游戏作弊引擎设计
- 如何读写 iOS APP 内存?
  - `task_for_pid`
  - `vm_read_overwrite`
  - `vm_write`
  - 设计 MobileSubstrate 插件
    - 类似于 DLL 注入
  - **DEMO**

### 参考文献
- [Apple Developer Documentation](http://developer.apple.com/library/ios/#documentation/StoreKit/Reference/SKPaymentTransaction_Class/Reference/Reference.html)
- [iPhone Dev Wiki - MobileSubstrate](http://www.iphonedevwiki.net/index.php/MobileSubstrate)
- [Peter Cockerell's AALP HTML](http://www.peter-cockerell.net/aalp/html/frames.html)
- [GDB Documentation](http://sources.redhat.com/gdb/documentation/)
- 《iOS.Hackers.Handbook》
- 《Patching_Applications_from_Apple_AppStore_with_additional_protection_by_Reilly》

*感谢皮乐 (http://hiraku.tw/) 指点 repo 服务器架设 & 打包 deb*

**Q&A**

**联络方式**
- 邮箱: PI:EMAIL