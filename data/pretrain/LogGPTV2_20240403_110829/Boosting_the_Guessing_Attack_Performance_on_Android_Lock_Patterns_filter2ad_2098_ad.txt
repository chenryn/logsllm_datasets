### Suggesting a Grid Location Alteration for Enhanced Security

We propose altering the location of the grid slightly each time a user attempts to unlock a device. An example is shown in Figure 15. If the target device is incorrectly positioned, the pattern area may not align with the smudge attack tool, leading to a mismatch.

**Figure 13:**
- **Blue Line:** The average time taken to draw the real pattern.
- **Red Line:** The average time taken to draw a random pattern.
- **Pattern Length:** Between 4 and 9.

### Effectiveness of the Obscuring Technique

With the obscuring technique in place, the total number of cracked patterns was 124 (34.44%), which is close to the smudge attack success rate (31.94%) for the Facebook scenario. This represents a significant improvement over the original result (without the obscuring technique), where 267 (74.17%) patterns were cracked (p<0.001, Fisher's Exact Test). The average number of guessing attempts required to crack the patterns increased from 3.79 (without the obscuring technique) to 5.24, clearly demonstrating the effectiveness of the obscuring technique.

### Key Advantages and Usability Trade-offs

The primary advantage of the obscuring technique is its backward compatibility, allowing existing patterns to be used without any changes, unlike other smudge attack mitigation schemes (e.g., [17]). The only additional logic introduced is the generation of a random pattern at runtime, requiring users to draw a random pattern after unlocking their device. The usability compromise is the additional time and effort required to draw this random pattern.

**Figure 13:**
- **Blue Line:** Average time to draw the real pattern.
- **Red Line:** Additional time to draw a given random pattern.
- **Time Increase:** On average, it took participants 2-3 times longer to draw a random pattern for each pattern length (4-9).
- **Delay Analysis:**
  - For random patterns with lengths between 4 and 8, the average drawing time was about 3-5 seconds, which is a reasonable delay.
  - For random patterns of length 9, the average drawing time was about 7 seconds, which might be annoying to users. Thus, random patterns of length 9 are not ideal candidates for this mitigation technique.

### Allowing Repeated Points

The performance of smudge attacks heavily depends on the size of the possible pattern space. A larger pattern space makes it more challenging for smudge attacks to make accurate guesses. Android enforces a policy that prohibits points and lines from being used more than once in a pattern. For example, in Figure 14(a), a possible pattern containing points 1, 2, 3, and 6 can be inferred as either "1236" or "6321." Smudge attacks need to try only two possibilities to guess the pattern, which is straightforward. However, if we amend the Android pattern creation policy to allow multiple uses of points and segments in a given pattern, we can increase the workload for smudge attacks.

**Figure 15:**
- **Example:** Mismatched pattern area due to altered grid position.

### Mitigation Techniques

Based on our experience in developing smudge attacks, it will be difficult for the smudge attack tool to extract patterns from smudges if they no longer match the points from a given template such as the original grid. Schneegass et al. [17] proposed a similar mitigation technique using geometric image transformations like grid translation, rotation, or scaling. These techniques can be effective in mitigating template-based smudge attacks but may downgrade the usability of the pattern drawing process, similar to random keyboard arrangements used to defeat keyloggers.

### Discussion

#### Effectiveness of Smudge Attacks

To demonstrate the effectiveness of smudge attacks, we compared their performance against a pure Markov model-based guessing attack (see Section 6.2). For the naive device unlocking scenario, the fully optimized smudge attack (GT-2) significantly outperformed the pure guessing attack, successfully cracking 267 (out of 360) more patterns. The difference in attack success rates was about 60.84% (p<0.001, Fisher's Exact Test). We also showed that the pure Markov model is less effective against patterns longer than length 5, whereas smudge attacks are more capable of cracking longer patterns. Our tool effectively recognized patterns that are hard to see with the naked eye (see Figure 16). Smudge attacks can significantly boost the performance of a probabilistic password model (e.g., the n-gram Markov model) and can be used to develop a fully automated guessing tool. Even with obscuring smudges added under the Facebook scenario, the proposed smudge attack, at 31.94%, still outperformed the pure guessing attack, at 13.33%, in the attack success rate.

**Figure 16:**
- **Examples:** Patterns that cannot be easily recognized by the naked human eye.

#### Limitations of Smudge Attacks

Despite the performance boost, Table 3 shows a clear limitation of smudge attacks: the attack success rate significantly decreased as the tasks became more complex, requiring more actions. The attack success rate (patterns cracked within 20 guessing attempts) started at 74.17% for merely unlocking the device and decreased to 52.50%, 37.22%, and 31.94% as participants were asked to make a call, send text messages, and use the Facebook app, respectively. This reduction in effectiveness is due to the increased volume of obscuring smudges and more relevant smudges being erased.

Our real-world dataset- and implementation-based findings contrast with speculative findings from previous literature, which highlighted the strong effectiveness of smudge attacks based on user feedback. Our results, for the first time, demonstrate how obscurity can affect the performance of smudge attacks based on real data analyses.

Moreover, our results showed that physical characteristics and/or pattern drawing behaviors of individuals could impact smudge attack success rates, creating variances in the results. With the calling task (mean = 52.50%, standard deviation = 11.72%), we observed high variances in the results, even though each participant had to draw different pattern sets. As part of future work, we will study how personalization of smudge attack configurations could affect its performance.

#### Mitigation Through Adding Obscurity

In Section 7, we discussed three possible mitigation techniques for smudge attacks. From these, we implemented and evaluated the obscurity-based mitigation technique, where users are asked to draw a random pattern upon login to deliberately add obscuring smudges. Our experimental results showed that this obscuring technique is highly effective, confirming our observations on the limitations of smudge attacks. The main trade-off in usability is the time taken for a user to draw the second random pattern, which takes about 3-5 seconds on average. We could improve user experience by selectively asking users to enter the second random pattern, e.g., only when a user is in a public place like libraries or cafes. Location technologies like GPS can be used to automatically detect when a user is in a public place and enable this feature. Users do not have to remember anything extra.

### Related Work

This section summarizes recent research findings on attacks performed against popularly used authentication mechanisms on mobile devices, specifically smudge attacks and guessing attacks.

#### Smudge Attacks

Smudge attacks guess a user’s password or pattern using fingerprint traces left on the touchscreen of a target mobile device. Aviv et al. [5] discussed the feasibility of performing smudge attacks to guess Android patterns and experimented with different camera orientations and light positions. Their attack method, however, was not fully automated, and their results were based on participants' self-reports on the perceived difficulty of identifying patterns from smudges visible on a touchscreen.

Several researchers have worked on defense mechanisms for smudge attacks. Zezschwitz et al. [24] proposed three new pattern grid layouts and evaluated their usability and security through a lab experiment. Kwon et al. [12] suggested using a small grid layout with mandated user interactions to remove smudge traces. Schneegass et al. [17] proposed a geometrically transformed graphical password scheme for a similar purpose. Their security evaluation, however, was conducted using 32 synthetically-generated graphical passwords in a lab environment. None of these research groups developed a fully automated tool for performing smudge attacks or guessing attacks against graphical passwords.

#### Guessing Attacks

Guessing attacks are one of the most commonly performed attacks on password-based authentication schemes. The main goal of this attack is to build a comprehensive dictionary for cracking passwords efficiently. Since the distribution of user-chosen passwords (including Android patterns) tends to be heavily skewed toward a small number of popularly used passwords, they are generally vulnerable to guessing attacks. For example, Van Oorschot et al. [16] showed that the actual password space of "Draw-A-Secret" graphical passwords is significantly smaller than the theoretically full password space. For Android patterns, Uellenbeck et al. [21] conducted a survey to collect user patterns and found that their actual pattern space is much smaller than the theoretical space. Andriotis et al. [3] also analyzed the Android pattern security based on user-chosen patterns. They conducted an online survey to collect user patterns, asking participants to create patterns that are easy to remember and secure. Their results showed that user-chosen patterns are biased; for example, memorable pattern shapes such as “ç” or “ç” were popularly used, and users frequently chose the upper-left grid point as the starting point in their patterns. Song et al. [19] collected a small number of real user patterns and constructed an n-gram Markov model with the collected data. Based on the Markov model, they presented a list of the most likely occurring real-world patterns and suggested that this list could be used as a dictionary for guessing patterns. Intuitively, it is believed that the use of password meters [19] and bigger grid layouts [4] could be helpful to improve the security of user-chosen patterns, but existing studies [4,19] demonstrated that their impacts are practically limited. For example, even with the 4×4 grid, 19% of patterns can successfully be cracked, which is comparable to 15% of the attack success rate with the 3×3 grid [4].

Aviv et al. [5] previously claimed that smudge data could be combined with statistical information about human behaviors such as pattern usage distribution to perform an effective attack. This paper finally implements this idea and demonstrates the effectiveness of the combined attack based on a real-world pattern dataset.

### Conclusion

This paper studies the effectiveness of combining guessing attacks with smudge attacks on unlocking Android devices within 20 guessing attempts (the number of consecutive fail attempts allowed on Android). We trained a Markov model-based guessing attack using 219 (70%) of 312 real-world patterns and recruited 12 participants to individually draw 30 patterns, randomly chosen from the remaining 30% of those patterns, on a Samsung Galaxy S4 in a lab environment.

Our results showed that smudge attacks can indeed boost the performance of guessing attacks by providing a way to pre-compute only the possible pattern candidates based on the detected segments. In the case of a naive device unlock scenario, the attack performance significantly improved from 13.33% when the pure guessing attack was performed alone to 74.17% when the smudge attack was performed. Even when obscuring smudges were added under a more complex scenario involving the use of the Facebook app, our smudge attack, at 31.94%, still outperformed the pure guessing attack. However, the limitation of smudge-based attacks was also clear, showing that obscuring smudges can significantly downgrade their performance, and mitigation techniques should be designed to help users add obscurity.

The proposed technique, with some parameter adjustments, could be used to effectively crack other types of authentication mechanisms used on touchscreens (e.g., a PIN or password). As part of future work, we plan to further investigate the performance of the combined attack on PINs, experimenting with 4- and 6-digit PINs.

### Acknowledgement

This work was supported in part by the ITRC (IITP-2016-R0992-16-1006), the MSIP/IITP (R-20160222-002755), and the MISP (R2215-16-1005). Hyoungshick Kim is the corresponding author.

### References

[1] OpenCV. http://docs.opencv.org/, 2015.
[2] ANDRIOTIS, P., TRYFONAS, T., AND OIKONOMOU, G. Complexity metrics and user strength perceptions of the pattern-lock graphical authentication method. In Human Aspects of Information Security, Privacy, and Trust (2014), Springer, pp. 115–126.
[3] ANDRIOTIS, P., TRYFONAS, T., OIKONOMOU, G., AND YILDIZ, C. A pilot study on the security of pattern screen-lock methods and soft side channel attacks. In Proceedings of the 6th ACM conference on Security and Privacy in Wireless and Mobile Networks (2013).
[4] AVIV, A. J., BUDZITOWSKI, D., AND KUBER, R. Is bigger better? comparing user-generated passwords on 3x3 vs. 4x4 grid sizes for Android’s pattern unlock. In Proceedings of the 31st Annual Computer Security Applications Conference (2015).
[5] AVIV, A. J., GIBSON, K., MOSSOP, E., BLAZE, M., AND SMITH, J. M. Smudge Attacks on Smartphone Touch Screens. In Proceedings of the 4th USENIX Conference on Offensive Technologies (2010).
[6] AVIV, A. J., SAPP, B., BLAZE, M., AND SMITH, J. M. Practicality of accelerometer side channels on smartphones. In Proceedings of the 28th Annual Computer Security Applications Conference (2012).
[7] BALLARD, D. H. Generalizing the hough transform to detect arbitrary shapes. Pattern recognition 13, 2 (1981), 111–122.
[8] BBC NEWS. ‘60,000’ devices are left in cabs. Online. Access at: http://news.bbc.co.uk/2/hi/technology/7620569.stm, 2008.
[9] BBC NEWS. FBI-Apple case: Investigators break into dead San Bernardino gunman’s iPhone. Online. Access at: http://www.bbc.com/news/world-us-canada-35914195, 2016.
[10] CANNY, J. A computational approach to edge detection. IEEE Transactions on Pattern Analysis and Machine Intelligence, 6 (1986), 679–698.
[11] GALE, W. A. Good-turing smoothing without tears. Journal of Quantitative Linguistics (1995).
[12] KWON, T., AND NA, S. Tinylock: Affordable defense against smudge attacks on smartphone pattern lock systems. Computers & Security 42 (2014), 137–150.
[13] LEE, J., HARALICK, R., AND SHAPIRO, L. Morphologic edge detection. IEEE Journal of Robotics and Automation 3, 2 (1987), 142–156.
[14] MA, J., YANG, W., LUO, M., AND LI, N. A study of probabilistic password models. In IEEE Symposium on Security and Privacy (2014).
[15] MATAS, J., GALAMBOS, C., AND KITTLER, J. Robust detection of lines using the progressive probabilistic hough transform. Computer Vision and Image Understanding 78, 1 (2000), 119–137.
[16] OORSCHOT, P. C. V., AND THORPE, J. On predictive models and user-drawn graphical passwords. ACM Transactions on Information and System Security 10, 4 (2008), 5:1–5:33.
[17] SCHNEEGASS, S., STEIMLE, F., BULLING, A., ALT, F., AND SCHMIDT, A. Smudgesafe: Geometric image transformations for smudge-resistant user authentication. In Proceedings of the ACM International Joint Conference on Pervasive and Ubiquitous Computing (2014).
[18] SHANNON, C. E. A mathematical theory of communication. ACM SIGMOBILE Mobile Computing and Communications Review 5, 1 (2001), 3–55.
[19] SONG, Y., CHO, G., OH, S., KIM, H., AND HUH, J. H. On the Effectiveness of Pattern Lock Strength Meters: Measuring the Strength of Real World Pattern Locks. In Proceedings of the 33rd Annual ACM Conference on Human Factors in Computing Systems (2015).
[20] TAO, H., AND ADAMS, C. Pass-go: A proposal to improve the usability of graphical passwords. International Journal of Network Security 7, 2 (2008), 273–292.
[21] UELLENBECK, S., DÜRMUTH, M., WOLF, C., AND HOLZ, T. Quantifying the security of graphical passwords: the case of Android unlock patterns. In Proceedings of the 20th ACM conference on Computer and Communications Security (2013).
[22] VAN BRUGGEN, D., LIU, S., KAJZER, M., STRIEGEL, A., CROWELL, C. R., AND D’ARCY, J. Modifying Smartphone User Locking Behavior. In Proceedings of the Ninth Symposium on Usable Privacy and Security (2013).
[23] VON ZEZSCHWITZ, E., DUNPHY, P., AND DE LUCA, A. Patterns in the Wild: A Field Study of the Usability of Pattern and Pin-based Authentication on Mobile Devices. In Proceedings of the 15th International Conference on Human-computer Interaction with Mobile Devices and Services (2013).
[24] VON ZEZSCHWITZ, E., KOSLOW, A., DE LUCA, A., AND HUSSMANN, H. Making graphic-based authentication secure against smudge attacks. In Proceedings of the International Conference on Intelligent User Interfaces (2013).
[25] ZAKARIA, N. H., GRIFFITHS, D., BROSTOFF, S., AND YAN, J. Shoulder Surfing Defence for Recall-based Graphical Passwords. In Proceedings of the Seventh Symposium on Usable Privacy and Security (2011).

### Appendix

#### A. Pattern Lock Authentication in Android

**Figure 17:**
- **Pattern Lock Interface:** A typical interface of pattern lock authentication in Android.

#### B. Android App for Data Collection

To achieve complete ecological validity for real-world patterns, we developed an independent application called Private Notes (see Figure 18), which allows users to encrypt their personal notes and made it available on Google Play (https://play.google.com/store/apps/details?id=com.Seclab.Notes).

**Figure 18:**
- **Pattern Setup:** Interface for setting up a pattern in the Private Notes app.