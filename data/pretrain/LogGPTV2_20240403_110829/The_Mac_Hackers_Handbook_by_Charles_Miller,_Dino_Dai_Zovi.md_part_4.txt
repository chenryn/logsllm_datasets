[num1 add_mult:num2 with_multiplier: 2];
[num1 showint];
}
Building this is as easy as invoking gcc with an additional argument.
$ gcc -g -x objective-c main.m Integer.m Add_Mult.m Display.m -lobjc
Running the program shows that it can indeed add a number multiplied
by two.
$ ./a.out 1 4
9
As a sample of things to come, consider the disassembled version of the
add_mult:with_multiplier: function.
0x1f02 push ebp
0x1f03 mov ebp,esp
0x1f05 push edi
0x1f06 push esi
0x1f07 push ebx
0x1f08 sub esp,0x1c
0x1f0b call 0x1f10
0x1f10 pop ebx
0x1f11 mov edi,DWORD PTR [ebp+0x8]
0x1f14 mov edx,DWORD PTR [ebp+0x8]
0x1f17 lea eax,[ebx+0x1100]
0x1f1d mov eax,DWORD PTR [eax]
0x1f1f mov DWORD PTR [esp+0x4],eax
0x1f23 mov DWORD PTR [esp],edx
0x1f26 call 0x400a 
0x1f2b mov esi,eax
9955336633cc0011..iinndddd 1122 11//2255//0099 44::3399::2288 PPMM
Chapter 1 ■ Mac OS X Architecture 13
0x1f2d mov edx,DWORD PTR [ebp+0x10]
0x1f30 lea eax,[ebx+0x1100]
0x1f36 mov eax,DWORD PTR [eax]
0x1f38 mov DWORD PTR [esp+0x4],eax
0x1f3c mov DWORD PTR [esp],edx
0x1f3f call 0x400a 
0x1f44 imul eax,DWORD PTR [ebp+0x14]
0x1f48 lea edx,[esi+eax]
0x1f4b lea eax,[ebx+0x10f8]
0x1f51 mov eax,DWORD PTR [eax]
0x1f53 mov DWORD PTR [esp+0x8],edx
0x1f57 mov DWORD PTR [esp+0x4],eax
0x1f5b mov DWORD PTR [esp],edi
0x1f5e call 0x400a 
0x1f63 add esp,0x1c
0x1f66 pop ebx
0x1f67 pop esi
0x1f68 pop edi
0x1f69 leave
0x1f6a ret
Looking at this, it is tough to imagine what this function does. While there
is an instruction for the multiplication (imul), there is no addition occurring.
You’ll also see that, typical of an Objective-C binary, almost every function
call is to objc_msgSend, which can make it diffi cult to know what is going on.
There is also the strange call instruction at address 0×1f0b which calls the next
instruction. These problems (along with some solutions) will be addressed in
more detail in Chapter 6, “Reverse Engineering.”
Universal Binaries and the Mach-O File Format
Applications and libraries in Mac OS X use the Mach-O (Mach object) fi le for-
mat and may come ready for different architectures, which are called universal
binaries.
Universal Binaries
For legacy support, many binaries in Leopard are universal binaries. A universal
binary can support multiple architectures in the same fi le. For Mac OS X, this
is usually PowerPC and x86.
$ fi le /bin/ls
/bin/ls: Mach-O universal binary with 2 architectures
/bin/ls (for architecture i386): Mach-O executable i386
/bin/ls (for architecture ppc7400): Mach-O executable ppc
9955336633cc0011..iinndddd 1133 11//2255//0099 44::3399::2288 PPMM
14 Part I ■ Mac OS X Basics
Each universal binary has the code necessary to run on any of the architec-
tures it supports. The same exact ls binary from the code example can run on
a Mac with an x86 processor or a PowerPC processor. The obvious drawback is
fi le size, of course. The gcc compiler in Mac OS X emits Mach-O-format binaries
by default. To build a universal binary, one additional fl ag must be passed to
specify the target architectures desired. In the following example, a universal
binary for the x86 and PowerPC architectures is created.
$ gcc -arch ppc -arch i386 -o test-universal test.c
$ file test-universal
test-universal: Mach-O universal binary with 2 architectures
test-universal (for architecture ppc7400): Mach-O executable ppc
test-universal (for architecture i386): Mach-O executable i386
To see the fi le-size difference, compare this binary to the single-architecture
version:
-rwxr-xr-x 1 user1 user1 12564 May 1 12:55 test
-rwxr-xr-x 1 user1 user1 28948 May 1 12:54 test-universal
Mach-O File Format
This fi le format supports both statically and dynamically linked executables.
The basic structure contains three regions: the header, the load commands, and
the actual data.
The header contains basic information about the fi le, such as magic bytes to
identify it as a Mach-O fi le and information about the target architecture. The
following is the structure from the header, compliments of the /usr/include/
mach-o/loader.h fi le.
struct mach_header{
uint32_t magic;
cpu_type_t cputype;
cpu_subtype_t cpusubtype;
uint32_t filetype;
uint32_t ncmds;
uint32_t sizeofcmds;
uint32_t flags;
};
The magic number identifi es the fi le as Mach-O. The cputype will probably
be either PowerPC or I386. The cpusubtype can specify specifi c models of CPU
on which to run. The fi letype indicates the usage and alignment for the fi le.
9955336633cc0011..iinndddd 1144 11//2255//0099 44::3399::2288 PPMM
Chapter 1 ■ Mac OS X Architecture 15
The ncmds and sizeofcmds have to do with the load commands, which will be
discussed shortly.
Next is the load-commands region. This specifi es the layout of the fi le in
memory. It contains the location of the symbol table, the main thread context
at the beginning of execution, and which shared libraries are required.
The heart of the fi le is the fi nal region, the data, which consists of a number
of segments as laid out in the load-commands region. Each segment can contain
a number of data sections. Each of these sections contains code or data of one
particular type; see Figure 1-2.
Header
Load Commands
Load Commands for Segment 1
Load Commands for Segment 2
Data
Segment 1
Section 1
Section 2
Segment 2
Section 1
Section 2
Figure 1-2: A Mach-O file-format example for a file with two segments, each having
two sections
Example
All of this information about universal binaries and the Mach-O format is best
seen by way of an example. Looking again at the /bin/ls binary, you can see
the universal headers using otool.
$ otool -f
Fat headers
9955336633cc0011..iinndddd 1155 11//2255//0099 44::3399::2288 PPMM
16 Part I ■ Mac OS X Basics
fat_magic 0xcafebabe
nfat_arch 2
architecture 0
cputype 7
cpusubtype 3
capabilities 0x0
offset 4096
size 36464
align 2^12 (4096)
architecture 1
cputype 18
cpusubtype 10
capabilities 0x0
offset 40960
size 32736
align 2^12 (4096)
Looking at /usr/include/mach/machine.h, you can see that the fi rst architec-
ture has cputype 7, which corresponds to CPU_TYPE_X86 and has a cpusubtype
of CPU_SUBTYPE_386. Not surprisingly, the second architecture has values
CPU_TYPE_POWERPC and CPU_SUBTYPE_POWERPC_7400, respectively.
Next we can obtain the Mach header.
$ otool -h /bin/ls
/bin/ls:
Mach header
magic cputype cpusubtype caps filetype ncmds sizeofcmds flags
0xfeedface 7 3 0x00 2 14 1304 0x00000085
In this case, we again see the cputype and cpusubtype. The fi letype is MH_
EXECUTE and there are 14 load commands. The fl ags work out to be MH_
NOUNDEFS | MH_DYLDLINK | MH_TWOLEVEL.
Moving on, we see some of the load commands for this binary.
$ otool -l /bin/ls
/bin/ls:
Load command 0
cmd LC_SEGMENT
cmdsize 56
segname __PAGEZERO
vmaddr 0x00000000
vmsize 0x00001000
fileoff 0
filesize 0
maxprot 0x00000000
initprot 0x00000000
nsects 0
flags 0x0
Load command 1
9955336633cc0011..iinndddd 1166 11//2255//0099 44::3399::2288 PPMM
Chapter 1 ■ Mac OS X Architecture 17
cmd LC_SEGMENT
cmdsize 260
segname __TEXT
vmaddr 0x00001000
vmsize 0x00005000
fileoff 0
filesize 20480
maxprot 0x00000007
initprot 0x00000005
nsects 3
flags 0x0
Section
sectname __text
segname __TEXT
addr 0x000023c4
size 0x000035df
offset 5060
align 2^2 (4)
reloff 0
nreloc 0
flags 0x80000400
reserved1 0
reserved2 0
…
Bundles
In Mac OS X, shared resources are contained in bundles. Many kinds of
bundles contain related fi les, but we’ll focus mostly on application and frame-
work bundles. The types of resources contained within a bundle may consist
of applications, libraries, images, documentation, header fi les, etc. Basically, a
bundle is a directory structure within the fi le system. Interestingly, by default
this directory looks like a single object in Finder.
$ ls -ld iTunes.app
drwxrwxr-x 3 root admin 102 Apr 4 13:15 iTunes.app
This naive view of fi les can be changed within Finder by selecting Show
Package Contents in the Action menu, but you probably use the Terminal appli-
cation rather than Finder, anyway.
Within application bundles, there is usually a single folder called Contents.
We’ll give you a quick tour of the QuickTime Player bundle.
$ ls /Applications/QuickTime\ Player.app/Contents/
CodeResources Info.plist PkgInfo Resources
Frameworks MacOS PlugIns version.plist
9955336633cc0011..iinndddd 1177 11//2255//0099 44::3399::2288 PPMM
18 Part I ■ Mac OS X Basics
The binary itself is within the MacOS directory. If you want to launch the
program through the command line or a script, you will likely have to refer to
the following binary, for example.
$ /Applications/QuickTime\ Player.app/Contents/MacOS/QuickTime\ Player
The Resources directory contains much of the noncode, such as images, mov-
ies, and icons. The Frameworks directory contains the associated framework
bundles, in this case DotMacKit. Finally, there is a number of plist, or property
list, fi les.
Property-list fi les contain confi guration information. A plist fi le may contain
user-specifi c or system-wide information. Plist fi les can be either in binary or
XML format. The XML versions are relatively straightforward to read. The fol-
lowing is the beginning of the Info.plist fi le from QuickTime Player.
CFBundleDevelopmentRegion
English
CFBundleDocumentTypes
CFBundleTypeExtensions
aac
adts
CFBundleTypeMIMETypes
audio/aac
audio/x-aac
CFBundleTypeName
Audio-AAC
CFBundleTypeRole
Viewer
NSDocumentClass
QTPMovieDocument
NSPersistentStoreTypeKey
Binary
9955336633cc0011..iinndddd 1188 11//2255//0099 44::3399::2288 PPMM
Chapter 1 ■ Mac OS X Architecture 19
Many of the keys and their meaning can be found at http://developer
.apple.com/documentation/MacOSX/Conceptual/BPRuntimeConfig/Articles/
PListKeys.html. Here is a quick description of those found in the excerpt:
■ CFBundleDevelopmentRegion: The native region for the bundle
■ C FBundleDocumentTypes: The document types supported by the
bundle
■ C FBundleTypeExtensions: File extension to associate with this docu-
ment type
■ C FBundleTypeMIMETypes: MIME type name to associate with this
document type
■ C FBundleTypeName: An abstract (and unique) way to refer to the docu-
ment type
■ C FBundleTypeRole: The application’s role with respect to this docu-
ment type; possibilities are Editor, Viewer, Shell, or None
■ NSDocumentClass: Legacy key for Cocoa applications
■ NSPersistentStoreTypeKey: The Core Data type
Many of these will be important later, when we’re identifying the attack
surface in Chapter 3, “Attack Surface.” It is possible to convert this XML plist
into a binary plist using plutil, or vice versa.
$ plutil -convert binary1 -o Binary.Info.plist Info.plist
$ plutil -convert xml1 -o XML.Binary.Info.plist Binary.Info.plist
$ file *Info.plist
Binary.Info.plist: Apple binary property list
Info.plist: XML 1.0 document text
XML.Binary.Info.plist: XML 1.0 document text
$ md5sum XML.Binary.Info.plist Info.plist
de13b98c54a93c052050294d9ca9d119 XML.Binary.Info.plist
de13b98c54a93c052050294d9ca9d119 Info.plist
Here we fi rst converted QuickTime Player’s Info.plist to binary format. We then
converted it back into XML format. The fi le command shows the conversion has
occurred and md5sum confi rms that the conversion is precisely reversible.
launchd
Launchd is Apple’s replacement for cron, xinetd, init, and others. It was intro-
duced in Mac OS X v10.4 (Tiger) and performs tasks such as initializing systems,
running startup programs, etc. It allows processes to be started at various times
or when various conditions occur, and ensures that particular processes are
always running. It handles daemons at both the system and user level.