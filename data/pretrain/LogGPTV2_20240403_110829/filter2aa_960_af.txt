nism and access evil.com.
You can use port forwarding to exploit several restrictive network con-
figurations. For example, you could forward traffic through a jump box to 
access a segmented network or access ports bound to restrictive interfaces.
Writing a TCP Scanner
One effective way to conceptualize the interaction of TCP ports is by imple-
menting a port scanner. By writing one, you’ll observe the steps that occur 
in a TCP handshake, along with the effects of encountered state changes, 
which allow you to determine whether a TCP port is available or whether 
it responds with a closed or filtered state. 
24   Chapter 2
Once you’ve written a basic scanner, you’ll write one that’s faster. A 
port scanner may scan several ports by using a single contiguous method; 
however, this can become time-consuming when your goal is to scan all 
65,535 ports. You’ll explore how to use concurrency to make an inefficient 
port scanner more suitable for larger port-scanning tasks. 
You’ll also be able to apply the concurrency patterns that you’ll learn in 
this section in many other scenarios, both in this book and beyond. 
Testing for Port Availability
The first step in creating the port scanner is understanding how to initiate a 
connection from a client to a server. Throughout this example, you’ll be con-
necting to and scanning scanme.nmap.org, a service run by the Nmap project.1 
To do this, you’ll use Go’s net package: net.Dial(network, address string).
The first argument is a string that identifies the kind of connection to 
initiate. This is because Dial isn’t just for TCP; it can be used for creating 
connections that use Unix sockets, UDP, and Layer 4 protocols that exist 
only in your head (the authors have been down this road, and suffice it to 
say, TCP is very good). There are a few strings you can provide, but for the 
sake of brevity, you’ll use the string tcp. 
The second argument tells Dial(network, address string) the host to 
which you wish to connect. Notice it’s a single string, not a string and an int. 
For IPv4/TCP connections, this string will take the form of host:port. For 
example, if you wanted to connect to scanme.nmap.org on TCP port 80, you 
would supply scanme.nmap.org:80.
Now you know how to create a connection, but how will you know 
if the connection is successful? You’ll do this through error checking: 
Dial(network, address string) returns Conn and error, and error will be nil 
if the connection is successful. So, to verify your connection, you just 
check whether error equals nil. 
You now have all the pieces needed to build a single port scanner, albeit 
an impolite one. Listing 2-1 shows how to put it together. (All the code list-
ings at the root location of / exist under the provided github repo https://
github.com/blackhat-go/bhg/.)
package main
import (
    "fmt"
    "net"
)
func main() {
    _, err := net.Dial("tcp", "scanme.nmap.org:80")
1. This is a free service provided by Fyodor, the creator of Nmap, but when you’re scanning, 
be polite. He requests, “Try not to hammer on the server too hard. A few scans in a day is fine, 
but don’t scan 100 times a day.” 
TCP, Scanners, and Proxies   25
     if err == nil {
        fmt.Println("Connection successful")
    }
}
Listing 2-1: A basic port scanner that scans only one port (/ch-2/dial/main.go)
Run this code. You should see Connection successful, provided you have 
access to the great information superhighway.
Performing Nonconcurrent Scanning
Scanning a single port at a time isn’t useful, and it certainly isn’t efficient. 
TCP ports range from 1 to 65535; but for testing, let’s scan ports 1 to 1024. 
To do this, you can use a for loop:
for i:=1; i <= 1024; i++ {
}
Now you have an int, but remember, you need a string as the second 
argument to Dial(network, address string). There are at least two ways to con-
vert the integer into a string. One way is to use the string conversion package, 
strconv. The other way is to use Sprintf(format string, a ...interface{}) from 
the fmt package, which (similar to its C sibling) returns a string generated 
from a format string. 
Create a new file with the code in Listing 2-2 and ensure that both your 
loop and string generation work. Running this code should print 1024 lines, 
but don’t feel obligated to count them.
package main
import (
    "fmt"
)
func main() {
    for i := 1; i <= 1024; i++ {
        address := fmt.Sprintf("scanme.nmap.org:%d", i)
        fmt.Println(address)
    }
}
Listing 2-2: Scanning 1024 ports of scanme.nmap.org (/ch-2/tcp-scanner-slow/main.go)
All that’s left is to plug the address variable from the previous code 
example into Dial(network, address string), and implement the same error 
checking from the previous section to test port availability. You should also 
add some logic to close the connection if it was successful; that way, connec-
tions aren’t left open. FINishing your connections is just polite. To do that, 
you’ll call Close() on Conn. Listing 2-3 shows the completed port scanner.
26   Chapter 2
package main
import (
    "fmt"
    "net"
)
func main() {
    for i := 1; i <= 1024; i++ {
        address := fmt.Sprintf("scanme.nmap.org:%d", i)
        conn, err := net.Dial("tcp", address)
        if err != nil {
            // port is closed or filtered.
            continue
        }
        conn.Close()
        fmt.Printf("%d open\n", i)
    }
}
Listing 2-3: The completed port scanner (/ch-2 /tcp-scanner-slow/main.go)
Compile and execute this code to conduct a light scan against the 
target. You should see a couple of open ports.
Performing Concurrent Scanning
The previous scanner scanned multiple ports in a single go (pun intended). 
But your goal now is to scan multiple ports concurrently, which will make 
your port scanner faster. To do this, you’ll harness the power of goroutines. 
Go will let you create as many goroutines as your system can handle, bound 
only by available memory. 
The “Too Fast” Scanner Version
The most naive way to create a port scanner that runs concurrently is to 
wrap the call to Dial(network, address string) in a goroutine. In the interest 
of learning from natural consequences, create a new file called scan-too-fast.go 
with the code in Listing 2-4 and execute it. 
package main
import (
    "fmt"
    "net"
)
func main() {
    for i := 1; i <= 1024; i++ {
        go func(j int) {
            address := fmt.Sprintf("scanme.nmap.org:%d", j)
            conn, err := net.Dial("tcp", address)
TCP, Scanners, and Proxies   27
            if err != nil {
                return
            }
            conn.Close()
            fmt.Printf("%d open\n", j)
        }(i)
    }
}
Listing 2-4: A scanner that works too fast (/ch-2/tcp-scanner-too-fast/main.go)
Upon running this code, you should observe the program exiting 
almost immediately:
$ time ./tcp-scanner-too-fast
./tcp-scanner-too-fast  0.00s user 0.00s system 90% cpu 0.004 total
The code you just ran launches a single goroutine per connection, and 
the main goroutine doesn’t know to wait for the connection to take place. 
Therefore, the code completes and exits as soon as the for loop finishes 
its iterations, which may be faster than the network exchange of packets 
between your code and the target ports. You may not get accurate results 
for ports whose packets were still in-flight.
There are a few ways to fix this. One is to use WaitGroup from the sync 
package, which is a thread-safe way to control concurrency. WaitGroup is a 
struct type and can be created like so:
var wg sync.WaitGroup
Once you’ve created WaitGroup, you can call a few methods on the struct. 
The first is Add(int), which increases an internal counter by the number pro-
vided. Next, Done() decrements the counter by one. Finally, Wait() blocks the 
execution of the goroutine in which it’s called, and will not allow further exe-
cution until the internal counter reaches zero. You can combine these calls to 
ensure that the main goroutine waits for all connections to finish.
Synchronized Scanning Using WaitGroup
Listing 2-5 shows the same port-scanning program with a different imple-
mentation of the goroutines. 
package main
import (
    "fmt"
    "net"
    "sync"
)
前沿信安资讯阵地  公众号：i nf osrc
28   Chapter 2
func main() {
    u var wg sync.WaitGroup
    for i := 1; i <= 1024; i++ {
        v wg.Add(1)
        go func(j int) {
            w defer wg.Done()
            address := fmt.Sprintf("scanme.nmap.org:%d", j)
            conn, err := net.Dial("tcp", address)
            if err != nil {
                return
            }
            conn.Close()
            fmt.Printf("%d open\n", j)
        }(i)
    }
    x wg.Wait()
}
Listing 2-5: A synchronized scanner that uses WaitGroup (/ch-2/tcp-scanner-wg-too-fast 
/main.go)
This iteration of the code remains largely identical to our initial ver-
sion. However, you’ve added code that explicitly tracks the remaining work. 
In this version of the program, you create sync.WaitGroup u, which acts as a 
synchronized counter. You increment this counter via wg.Add(1) each time 
you create a goroutine to scan a port v, and a deferred call to wg.Done() 
decrements the counter whenever one unit of work has been performed w. 
Your main() function calls wg.Wait(), which blocks until all the work has been 
done and your counter has returned to zero x. 
This version of the program is better, but still incorrect. If you run this 
multiple times against multiple hosts, you might see inconsistent results. 
Scanning an excessive number of hosts or ports simultaneously may cause 
network or system limitations to skew your results. Go ahead and change 
1024 to 65535, and the destination server to your localhost 127.0.0.1 in your 
code. If you want, you can use Wireshark or tcpdump to see how fast those 
connections are opened.
Port Scanning Using a Worker Pool
To avoid inconsistencies, you’ll use a pool of goroutines to manage the 
concurrent work being performed. Using a for loop, you’ll create a cer-
tain number of worker goroutines as a resource pool. Then, in your main() 
“thread,” you’ll use a channel to provide work. 
To start, create a new program that has 100 workers, consumes a 
channel of int, and prints them to the screen. You’ll still use WaitGroup to 
block execution. Create your initial code stub for a main function. Above it, 
write the function shown in Listing 2-6.
前沿信安资讯阵地  公众号：i nf osrc
TCP, Scanners, and Proxies   29
func worker(ports chan int, wg *sync.WaitGroup) {
    for p := range ports {
        fmt.Println(p)
        wg.Done()
    }
}
Listing 2-6: A worker function for processing work
The worker(int, *sync.WaitGroup) function takes two arguments: a 
channel of type int and a pointer to a WaitGroup. The channel will be used 
to receive work, and the WaitGroup will be used to track when a single work 
item has been completed. 
Now, add your main() function shown in Listing 2-7, which will manage 
the workload and provide work to your worker(int, *sync.WaitGroup) function.
package main
import (
    "fmt"
    "sync"
)
func worker(ports chan int, wg *sync.WaitGroup) {
    u for p := range ports {
        fmt.Println(p)
        wg.Done()
    }
}
func main() {
    ports := makev(chan int, 100)
    var wg sync.WaitGroup
    w for i := 0; i < cap(ports); i++ {
        go worker(ports, &wg)
    }
    for i := 1; i <= 1024; i++ {
        wg.Add(1)
        x ports <- i
    }
    wg.Wait()
    y close(ports)
}
Listing 2-7: A basic worker pool (/ch-2/tcp-sync-scanner /main.go)
First, you create a channel by using make() v. A second parameter, an 
int value of 100, is provided to make() here. This allows the channel to be 
buffered, which means you can send it an item without waiting for a receiver 
to read the item. Buffered channels are ideal for maintaining and track-
ing work for multiple producers and consumers. You’ve capped the chan-
nel at 100, meaning it can hold 100 items before the sender will block. 
前沿信安资讯阵地  公众号：i nf osrc
30   Chapter 2
This is a slight performance increase, as it will allow all the workers to 
start immediately.
Next, you use a for loop w to start the desired number of workers—in 
this case, 100. In the worker(int, *sync.WaitGroup) function, you use range u 
to continuously receive from the ports channel, looping until the channel 
is closed. Notice that you aren’t doing any work yet in the worker—that’ll 
come shortly. Iterating over the ports sequentially in the main() function, 
you send a port on the ports channel x to the worker. After all the work 
has been completed, you close the channel y.
Once you build and execute this program, you’ll see your numbers 
printed to the screen. You might notice something interesting here: the 
numbers are printed in no particular order. Welcome to the wonderful 
world of parallelism.
Multichannel Communication
To complete the port scanner, you could plug in your code from earlier in 
the section, and it would work just fine. However, the printed ports would be  
unsorted, because the scanner wouldn’t check them in order. To solve this 
problem, you need to use a separate thread to pass the result of the port scan 
back to your main thread to order the ports before printing. Another benefit  
of this modification is that you can remove the dependency of a WaitGroup 
entirely, as you’ll have another method of tracking completion. For example, 
if you scan 1024 ports, you’re sending on the worker channel 1024 times, 
and you’ll need to send the result of that work back to the main thread 
1024 times. Because the number of work units sent and the number of 
results received are the same, your program can know when to close the 
channels and subsequently shut down the workers. 
This modification is demonstrated in Listing 2-8, which completes the 
port scanner.
package main
import (
    "fmt"
    "net"
    "sort"
)
u func worker(ports, results chan int) {
    for p := range ports {
        address := fmt.Sprintf("scanme.nmap.org:%d", p)
        conn, err := net.Dial("tcp", address)
        if err != nil {
            v results <- 0
            continue
        }
        conn.Close()
        w results <- p
    }
}
前沿信安资讯阵地  公众号：i nf osrc
TCP, Scanners, and Proxies   31
func main() {
    ports := make(chan int, 100)
    x results := make(chan int)
    y var openports []int
    for i := 0; i < cap(ports); i++ {
        go worker(ports, results)
    }
    z go func() {
        for i := 1; i <= 1024; i++ {
            ports <- i
        }