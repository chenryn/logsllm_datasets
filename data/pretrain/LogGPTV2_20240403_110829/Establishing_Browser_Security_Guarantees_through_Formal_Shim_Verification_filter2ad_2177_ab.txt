address bar.
QUARK also uses a separate input process to support
richer inputs, e.g., the mouse. The input process is a
simple Python script which grabs keyboard and mouse
events from the user, encodes them as user input mes-
sages, and forwards them on to the kernel’s stdin. For
keystrokes, the input process simply writes characters in
ASCII format to the kernel’s stdin. We use several “un-
printable” ASCII values (all smaller than 60 and all un-
typeable from the keyboard) to pass special information
from the input process to the kernel. For example, the in-
put process maps keys F1-F12 to such un-printable char-
acters, which allows the kernel to use F11 for “new tab”,
and F1-F10 for selecting tabs 1-10. Mouse clicks are also
sent to the kernel through un-printable ASCII values. Be-
cause the input process only reads from the keyboard and
mouse, and never from the kernel or any other QUARK
components, it cannot be exposed any attacks originating
from the network.
3.2 Example of Message Exchanges
To illustrate how the kernel orchestrates all the com-
ponents in QUARK, we detail the steps from startup
to a tab loading http://www.google.com. The user
opens QUARK by starting the kernel which in turn
starts three processes:
the graph-
the input process,
ical output process, and a tab process.
The ker-
nel establishes a two-way communication channel with
each process it starts. Next, the kernel then sends a
4
(Go "http://www.google.com") message to the tab
indicating it should load the given URL (for now, assume
this is normal behavior for all new tabs).
The tab process comprises our modiﬁed version of
WebKit wrapped by a thin layer of Python to handle
messaging with the kernel. After recieving the Go mes-
sage, the Python wrapper tells WebKit to start process-
ing http://www.google.com. Since the tab process is
running in a sandbox, WebKit cannot directly access the
network. When it attempts to, our Python wrapper in-
tervenes and sends a GetURL request to the kernel. As
long as the request is valid, the kernel responds with a
ResDoc message containing the HTML document the tab
requested.
Once the tab process has received the necessary re-
sources from the kernel and rendered the Web pages, it
sends a Display message to the kernel which contains a
bitmap to display. When the kernel receives a Display
message from the current tab, it forwards the message on
to the graphical output process, which in turn displays
the bitmap on the screen.
When the kernel reads a printable character c from
standard input, it sends a (KeyPress c) message to the
currently selected tab. Upon receiving such a message,
the tab calls the appropriate input handler in WebKit. For
example, if a user types “a” on Google, the “a” character
is read by the kernel, passed to the tab, and then passed
to WebKit, at which point WebKit adds the “a” charac-
ter to Google’s search box. This in turn causes WebKit’s
JavaScript engine to run an event handler that Google has
installed on their search box. The event handler performs
an “instant search”, which initiates further communica-
tion with the QUARK kernel to access additional network
resources, followed by another Display message to re-
paint the screen. Note that to ease veriﬁcation, QUARK
currently handles all requests synchronously.
3.3 Efﬁciency
With a few simple optimizations, we achieve perfor-
mance comparable to WebKit on average (see Section 6
for measurements). Following Chrome, we adopt two
optimizations critical for good graphics performance.
First, QUARK uses shared memory to pass bitmaps from
the tab process through the kernel to the output process,
so that the Display message only passes a shared mem-
ory ID instead of a bitmap. This drastically reduces the
communication cost of sending bitmaps. To prevent a
malicious tab from accessing another tab’s shared mem-
ory, we run each tab as a different user, and set access
controls so that a tab’s shared memory can only be ac-
cessed by the output process. Second, QUARK uses
rectangle-based rendering:
instead of sending a large
bitmap of the entire screen each time the display changes,
the tab process determines which part of the display has
changed, and sends bitmaps only for the rectangular re-
gions that need to be updated. This drastically reduces
the size of the bitmaps being transferred, and the amount
of redrawing on the screen.
For I/O performance, the original Ynot library used
single-character read/write routines, imposing signiﬁcant
overhead. We deﬁned a new I/O library which uses size
n reads/writes. This reduced reading an n byte message
from n I/O calls to just three: reading a 1 byte tag, fol-
lowed by a 4 byte payload size, and then a single read for
the entire payload.
We also optimized socket connections in QUARK. Our
original prototype opened a new TCP connection for each
HTTP GET request, imposing signiﬁcant overhead. Mod-
ern Web servers and browsers use persistent connections
to improve the efﬁciency of page loading and the respon-
siveness of Web 2.0 applications. These connections are
maintained anywhere from a few seconds to several min-
utes, allowing the client and server can exchange mul-
tiple request/responses on a single connection. Services
like Google Chat make use of very long-lived HTTP con-
nections to support responsive interaction with the user.
We support such persistent HTTP connections via
Unix domain sockets which allow processes to send open
ﬁle descriptors over channels using the sendmsg and
recvmsg system calls. When a tab needs to open a
socket, it sends a GetSoc message to the kernel with the
host and port. If the request is valid, the kernel opens
and connects the socket, and then sends an open socket
ﬁle descriptor to the tab. Once the tab gets the socket ﬁle
descriptor, it can read/write on the socket, but it cannot
re-connect the socket to another host/port. In this way,
the kernel controls all socket connections.
Even though we formally verify our browser kernel in
a proof assistant, we were still able to implement and
reason about these low-level optimizations.
3.4 Socket Security Policy
The GetSoc message brings up an interesting security
issue. If the kernel satisﬁed all GetSoc requests, then a
compromised tab could open sockets to any server and
exchange arbitrary amounts of information. The kernel
must prevent this scenario by restricting socket connec-
tions.
To implement this restriction, we introduce the idea
of a domain sufﬁx for a tab which the user enters when
the tab starts. A tab’s domain sufﬁx controls several se-
curity features in QUARK, including which socket con-
nections are allowed and how cookies are handled (see
Section 3.5). In fact, our address bar, located at the very
top of the browser (see Figure 2), displays the domain
sufﬁx, not just the tab’s URL. We therefore refer to it as
5
the “domain bar”.
For simplicity, our current domain sufﬁxes build on
the notion of a public sufﬁx, which is a top-level domain
under which Internet users can directly register names,
for example .com, .co.uk, or .edu – Mozilla main-
tains an exhaustive list of such sufﬁxes [3]. In particu-
lar, we require the domain sufﬁx for a tab to be exactly
one level down from a public sufﬁx, e.g., google.com,
amazon.com, etc. In the current QUARK prototype the
user provides a tab’s domain sufﬁx separately from its
initial URL, but one could easily compute the former
from the later. Note that, once set, a tab’s domain suf-
ﬁx never changes. In particular, any frames a tab loads
do not affect its domain sufﬁx.
We considered using the tab’s origin (which includes
the URL, scheme, and port) to restrict socket creation,
but such a policy is too restrictive for many useful
sites. For example, a single GMail tab uses frames
from domains such as static.google.com and mail.
google.com. However, our actual domain sufﬁx checks
are modularized within QUARK, which will allow us to
experiment with ﬁner grained policies in future work.
To enforce our current socket creation policy, we ﬁrst
deﬁne a subdomain relation ≤ as follows: given domain
d1 and domain sufﬁx d2, we use d1 ≤ d2 to denote that
d1 is a subdomain of d2. For example www.google.com
≤ google.com. If a tab with domain sufﬁx t requests
to open a connection to a host h, then the kernel allows
the connection if h ≤ t. To load URLs that are not a
subdomain of the tab sufﬁx, the tab must send a GetURL
message to the kernel – in response, the kernel does not
open a socket but, if the request is valid, may provide the
content of the URL. Since the kernel does not attach any
cookies to the HTTP request for a GetURL message, a
tab can only access publicly available data using GetURL.
In addition, GetURL requests only provide the response
body, not HTTP headers.
Note that an exploited tab could leak cookies by en-
coding information within the URL parameter of GetURL
requests, but only cookies for that tab’s domain could be
leaked. Because we do not provide any access to HTTP
headers with GetURL, we consider this use of GetURL
to leak cookies analogous to leaking cookie data over
timing channels.
Although we elide details in the current work, we also
slightly enhanced our socket policy to improve perfor-
mance. Sites with large data sets often use content dis-
tribution networks whose domains will not satisfy our
domain sufﬁx checks. For example facebook.com uses
fbcdn.net to load much of its data. Unfortunately, the
simple socket policy described above will force all this
data to be loaded using slow GetURL requests through
the kernel. To address this issue, we associate whitelists
with the most popular sites so that tabs for those do-
mains can open sockets to the associated content distri-
bution network. The tab domain sufﬁx remains a sin-
gle string, e.g. facebook.com, but behind the scenes, it
gets expanded into a list depending on the domain, e.g.,
[facebook.com, fbcdn.net]. When deciding whether
to satisfy a given socket request, QUARK considers this
list as a disjunction of allowed domain sufﬁxes. Cur-
rently, we provide these whitelists manually.
3.5 Cookies and Cookie Policy
QUARK maintains a set of cookie processes to handle
cookie accesses from tabs. This set of cookie processes
will contain a cookie process for domain sufﬁx S if S is
the domain sufﬁx of a running tab. By restricting mes-
sages to and from cookie processes, the QUARK kernel
guarantees that browser components will only be able to
access cookies appropriate for their domain.
The kernel receives cookie store/retrieve requests from
tabs and directs the requests to the appropriate cookie
If a tab with domain sufﬁx t asks to store a
process.
cookie with domain c, then our kernel allows the oper-
ation if c ≤ t, in which case it sends the store request to
the cookie process for domain t. Similarly, if a tab with
domain sufﬁx t wants to retrieve a cookie for domain c,
then our kernel allows the operation if c ≤ t, in which
case it sends the request to the cookie process for domain
t and forwards any response to the requesting tab.
The above policy prevents cross-domain cookie reads
from a compromised tab, and it prevents a compro-
mised cookie process from leaking information about
its cookies to another domain; yet it also allows dif-
ferent tabs with the same domain sufﬁx (but different
URLs) to communicate through cookies (for example,
mail.google.com and calendar.google.com).
3.6 Security Properties of QUARK
We provide intuitive descriptions of the security prop-
erties we proved for QUARK’s kernel; formal deﬁni-
tions appear later in Section 4. A tab in the kernel is a
pair, containing the tab’s domain sufﬁx as a string and
the tab’s communication channel as a ﬁle descriptor. A
cookie process is also a pair, containing the domain sufﬁx
that this cookie process manages and its communication
channel. We deﬁne the state of the kernel as the cur-
rently selected tab, the list of tabs, and the list of cookie
processes. Note that the kernel state only contains strings
and ﬁle descriptors.
We prove the following main theorems in Coq:
1. Response Integrity: The way the kernel responds
to any request only depends on past user “control
keys” (namely keys F1-F12). This ensures that one
6
browser component (e.g., a tab or cookie process)
can never inﬂuence how the kernel responds to an-
other component, and that the kernel never allows
untrusted input (e.g., data from the web) to inﬂu-
ence how the kernel responds to a request.
2. Tab Non-Interference: The kernel’s response to a
tab’s request is the same no matter how other tabs
interact with the kernel. This ensures that the kernel
never provides a direct way for one tab to attack an-
other tab or steal private information from another
tab.
3. No Cross-domain Socket Creation: The kernel
disallows any cross-domain socket creation (as de-
scribed in Section 3.4).
4. Cookie Integrity/Conﬁdentiality: The kernel dis-
allows any cross-domain cookie stores or retrieves
(as described in Section 3.5).
5. Domain Bar Integrity and Correctness: The do-
main bar cannot be compromised by a tab, and is
always equal to the domain sufﬁx of the currently
selected tab.
4 Kernel Implementation in Coq
QUARK’s most distinguishing feature is its kernel, which
is implemented and proved correct in Coq. In this section
we present the implementation of the main kernel loop.
In the next section we explain how we formally veriﬁed
the kernel.
Coq enables users to write programs in a small, simple
functional language and then reason formally about them
using a powerful logic, the Calculus of Constructions.
This language is essentially an effect-free (pure) subset
of popular functional languages like ML or Haskell with
the additional restriction that programs must always ter-
minate. Unfortunately, these limitations make Coq’s de-
fault implementation language ill-suited for writing sys-
tem programs like servers or browsers which must be ef-
fectful to perform I/O and by design may not terminate.
To address the limitations of Coq’s implementation
language, we use Ynot [34]. Ynot is a Coq library
which provides monadic types that allow us to write ef-
fectful, non-terminating programs in Coq while retain-
ing the strong guarantees and reasoning capabilities Coq
normally provides. Equipped with Ynot, we can write
our browser kernel in a fairly straightforward style whose
essence is shown in Figure 3.
Single Step of Kernel. QUARK’s kernel is essentially
a loop that continuously responds to requests from the
user or tabs.
In each iteration, the kernel calls kstep
Definition kstep(ctab, ctabs) :=
chan 
c 
t 
msg 
if(safe_soc(host, domain_suffix(t)) then
send_soc(t, host, port);
return (ctab, tabs)
else
write_msg(t, Error);
return (ctab, tabs)
| ...
end
end
Figure 3: Body for Main Kernel Loop. This Coq code shows how our
QUARK kernel receives and responds to requests from other browser
components. It ﬁrst uses a Unix-style select to choose a ready input
channel, reads a request from that channel, and responds to the message
appropriately. For example, if the user enters “+”, the kernel creates
a new tab and sends it the Render message. In each case, the code
returns the new kernel state resulting from handling this request.
which takes the current kernel state, handles a single re-
quest, and returns the new kernel state as shown in Fig-
ure 3. The kernel state is a tuple of the current tab (ctab),
the list of tabs (tabs), and a few other components which
we omit here (e.g., the list of cookie processes). For
details regarding the loop and kernel initialization code
please see [24].
kstep starts by calling iselect (the “i” stands for
input) which performs a Unix-style select over stdin
and all tab input channels, returning Stdin if stdin is
ready for reading or Tab t if the input channel of tab
t is ready. iselect is implemented in Coq using a
select primitive which is ultimately just a thin wrap-
per over the Unix select system call. The Coq extraction
process, which converts Coq into OCaml for execution,
can be customized to link our Coq code with OCaml im-
plementations of primitives like select. Thus select
is exposed to Coq essentially as a primitive of the ap-
propriate monadic type. We have similar primitives for
reading/writing on channels, and opening sockets.
Request from User.
If stdin is ready for reading,
the kernel reads one character c using the read primi-