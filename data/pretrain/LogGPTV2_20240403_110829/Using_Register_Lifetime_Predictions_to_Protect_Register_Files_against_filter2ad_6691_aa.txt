# Using Register Lifetime Predictions to Protect Register Files Against Soft Errors

**Authors:**
- Pablo Montesinos
- Wei Liu
- Josep Torrellas

**Affiliation:**
- Department of Computer Science, University of Illinois at Urbana-Champaign
- Email: {pmontesi, liuwei, torrellas}@cs.uiuc.edu
- Website: http://iacoma.cs.uiuc.edu

**Abstract:**
To enhance the resilience of register files against soft errors, this paper introduces the ParShield architecture. ParShield is based on two key observations: (i) the data in a register is only useful for a small fraction of its lifetime, and (ii) not all registers are equally vulnerable. ParShield selectively protects registers by generating, storing, and checking Error-Correcting Codes (ECCs) for only the most vulnerable registers while they contain useful data. Additionally, it stores a parity bit for all registers, reusing the ECC circuitry for parity generation and checking. ParShield achieves zero Silent Data Corruption (SDC) AVF and a low average Detected Unrecoverable Error (DUE) AVF of 0.040 and 0.010 for integer and floating-point register files, respectively. It consumes only 81% and 78% of the power of a full ECC design for SPECint and SPECfp applications, respectively. Furthermore, ParShield has no performance impact and minimal area requirements.

## 1. Introduction

With the increasing integration levels, reduced supply voltages, and higher frequencies in modern chips, soft errors have become a significant threat to high-performance processors. These errors can be caused by various events, most notably the impact of high-energy particles [2, 8, 23]. Since soft errors can lead to program-visible errors [20], several architectural designs have been proposed to protect different processor structures, such as caches, memories, and datapaths [6, 13, 16, 21].

One critical structure that needs protection is the register file. It is a substantial component that stores architectural state and is frequently read, which increases the likelihood of propagating faulty data to other parts of the machine. Some commercial processors protect their register files using either parity [3, 9] or error-correcting codes (ECC) [18]. While parity allows for error detection but not correction, full ECC support enables on-the-fly detection and correction, albeit at a cost in power and possibly performance.

A cost-effective protection mechanism for soft errors in register files should have no performance impact, maintain a low Architectural Vulnerability Factor (AVF) [11], consume modest power, and use little area. To design such a mechanism, we make two key observations about the use of registers in general-purpose processors. First, the data stored in a physical register is not always useful; a soft error in a non-useful register will not affect the processor's architectural state. Second, not all registers are equally vulnerable to soft errors. A small set of long-lived registers account for a large fraction of the time that registers need to be protected, while the contribution of most other registers to the vulnerable time is minimal.

Based on these observations, this paper proposes ParShield, a novel architecture that provides cost-effective protection for register files against soft errors. ParShield selectively protects a subset of the registers by generating, storing, and checking ECCs for only the most vulnerable registers while they contain useful data. This approach reduces the AVF of the integer register file by an average of 73% to 0.040 and the AVF of the floating-point register file by an average of 85% to 0.010. ParShield also adds a parity bit for all registers, reusing the ECC circuitry for parity generation and checking. As a result, ParShield has no SDC AVF, a DUE AVF as low as Shield’s, and consumes only 81% and 78% of the power of a full ECC design for SPECint and SPECfp applications, respectively. Moreover, ParShield has no performance impact and minimal area requirements.

The paper is organized as follows: Section 2 describes the motivation for this work; Sections 3 and 4 detail the design and implementation of ParShield; Sections 5 and 6 evaluate ParShield; and Section 7 discusses related work.

## 2. Motivation: Assigning Reliability Resources

### 2.1. Register Lifetime

Modern out-of-order processors use register renaming with a large number of physical registers to support many in-flight instructions [4]. After decoding an instruction with a destination register, the processor allocates a free physical register, creating a new register version. The instruction is then executed, and its result is written to the corresponding physical register. Subsequent instructions that use this value are renamed to read from that physical register. The register version is kept until the instruction that redefines the corresponding logical register retires, which is necessary for handling precise exceptions. Note that a version is written to only once but can be read multiple times.

As shown in Figure 1, the lifetime of a register version spans from allocation to deallocation. We divide this lifetime into three periods: PreWrite (from allocation to write), Useful (from write to last read), and PostLastRead (from last read to deallocation). Only the Useful period needs to be protected.

### 2.2. Register ACE Analysis

Errors are typically classified as undetected (Silent Data Corruption, SDC) or detected (Detected Unrecoverable Errors, DUE) [11]. Errors for which detection and recovery succeed are not considered errors.

The Architectural Vulnerability Factor (AVF) of a structure is the probability that a fault in that structure will result in an error [11]. The SDC AVF and DUE AVF are the probabilities that a fault causes an SDC or DUE error, respectively. If a structure is protected by an error detection mechanism, its SDC AVF is zero. If the structure has error detection and correction capabilities, its DUE AVF is zero. In this work, we assume that the AVF for a register file is the average AVF of all its bits.

Mukherjee et al. [11] introduced the concept of Architecturally Correct Execution (ACE) to compute a structure’s AVF. ACE analysis divides a bit’s lifetime into ACE and un-ACE periods. A bit is in ACE state when a change in its value will produce an error. The AVF for a single bit is the fraction of time it is in ACE state. To calculate the total time a bit is in ACE state, we start by assuming that its entire lifetime is in ACE state and then remove the fraction that can be proven un-ACE. The remaining fraction is an upper bound on the ACE time.

Figures 2(a) and (b) illustrate two register versions and their ACE and un-ACE periods. In both cases, a free physical register R is allocated at time \( t_a \) and deallocated at time \( t_d \). During its PreWrite period, it remains in un-ACE state. At time \( t_w \), R is written to and, if it will be consumed at least once, it switches to ACE state. Figure 2(a) shows a register version that is never read, so it remains in un-ACE state for its entire lifetime. Figure 2(b) shows a register version that is consumed n times, so it enters ACE state at \( t_w \) and remains in it until it is read for the last time at \( t_{r_n} \). A register version is in un-ACE state during its PostLastRead period.

There is one case where a register is read but should still remain in un-ACE state: when the reader instructions are eventually squashed and, therefore, are never committed. For simplicity, we do not consider this case in this work; if a register will be read, it is considered ACE.

### 2.3. Two Key Observations

Our analysis of SPECint and SPECfp 2000 applications for an out-of-order superscalar processor with 128 integer physical registers (Section 5) leads to two key observations:

1. **Combined Useful Time of All Registers is Small:** We observe that the time a register version is in the Useful state is only a small fraction of its lifetime. Figure 3 shows the average integer register's PreWrite, Useful, and PostLastRead times for both SPECint and SPECfp applications. On average, only 22% and 15% of the register lifetime is Useful for SPECint and SPECfp applications, respectively. Therefore, there is no need to provide protection for the entire lifetime of a register version.

2. **Not All Registers Are Equally Vulnerable:** Figure 4 shows the average number of integer physical registers that are in the Useful state at any given time. For SPECint, the average is less than 20 registers out of 128. For SPECfp, it is approximately 17 out of 128.

These observations form the basis for the ParShield architecture, which selectively protects the most vulnerable registers during their Useful periods, thereby providing efficient and effective protection against soft errors.

---

*Note: Figures 1, 2, 3, and 4 are referenced in the text but not included here. Please refer to the original document for the figures.*

---

**Acknowledgments:**
This work was supported in part by the National Science Foundation under grants CHE-0121357 and CCR-0325603; DARPA under grant NBCH30390004; DOE under grant B347886; and gifts from IBM and Intel. Wei Liu is now at Intel Corporation. His email is wei.w.liu@intel.com.