Flow Analysis by Abstract Interpretation. In Static Analysis, María Alpuente and
Germán Vidal (Eds.). Springer Berlin Heidelberg, Berlin, Heidelberg, 347–362.
[56] Flemming Nielson, Hanne R. Nielson, and Chris Hankin. 2010. Principles of
[57] Bryan Parno, Jon Howell, Craig Gentry, and Mariana Raykova. 2013. Pinocchio:
Program Analysis. Springer Publishing Company, Incorporated.
Nearly practical verifiable computation. In S&P 2013. 238–252.
[58] David Pichardie. 2005. Interprétation abstraite en logique intuitionniste : extraction
d’analyseurs Java certifiés. Ph.D. Dissertation. Université Rennes 1. In french.
[59] Polyspace Code Prover. 2014. Static Analysis with Polyspace Products. Mathworks,
June (2014).
[60] Jacob T Schwartz. 1979. Probabilistic algorithms for verification of polynomial
identities. In International Symposium on Symbolic and Algebraic Manipulation.
Springer, 200–215.
[61] Srinath Setty. 2020. Spartan: Efficient and general-purpose zkSNARKs without
trusted setup. In Annual International Cryptology Conference. Springer, 704–737.
[62] Srinath Setty, Sebastian Angel, Trinabh Gupta, and Jonathan Lee. 2018. Proving
the correct execution of concurrent services in zero-knowledge. In 13th {USENIX}
Symposium on Operating Systems Design and Implementation ({OSDI} 18). 339–
356.
[63] Olin Grigsby Shivers. 1991. Control-Flow Analysis of Higher-Order Languages of
Taming Lambda. Ph.D. Dissertation. USA. UMI Order No. GAX91-26964.
[64] Julien Signoles, Pascal Cuoq, Florent Kirchner, Nikolai Kosmatov, Virgile Prevosto,
and Boris Yakobowski. 2012. Frama-c: a Software Analysis Perspective. Formal
Aspects of Computing 27. https://doi.org/10.1007/s00165-014-0326-7
[65] Arnaud Venet and Guillaume Brat. 2004. Precise and Efficient Static Array Bound
Checking for Large Embedded C Programs. SIGPLAN Not. 39, 6 (June 2004),
231–242. https://doi.org/10.1145/996893.996869
[66] Riad S. Wahby, Srinath T. V. Setty, Zuocheng Ren, Andrew J. Blumberg, and
Michael Walfish. 2015. Efficient RAM and control flow in verifiable outsourced
computation. In 22nd Annual Network and Distributed System Security Symposium,
NDSS 2015, San Diego, California, USA, February 8-11, 2015.
[67] Riad S Wahby, Ioanna Tzialla, Abhi Shelat, Justin Thaler, and Michael Walfish.
2018. Doubly-efficient zkSNARKs without trusted setup. In 2018 IEEE Symposium
on Security and Privacy (SP). IEEE, 926–943.
[68] Guannan Wei, Yuxuan Chen, and Tiark Rompf. 2019. Staged Abstract Interpreters.
(2019).
[69] Tiacheng Xie, Jiaheng Zhang, Yupeng Zhang, Charalampos Papamanthou, and
Dawn Song. 2019. Libra: Succinct Zero-Knowledge Proofs with Optimal Prover
Computation. In Advances in Cryptology (CRYPTO).
[70] Jiaheng Zhang, Tiancheng Xie, Yupeng Zhang, and Dawn Song. [n.d.]. Trans-
parent Polynomial Delegation and Its Applications to Zero Knowledge Proof. In
S&P 2020.
[71] Yupeng Zhang, Daniel Genkin, Jonathan Katz, Dimitrios Papadopoulos, and
Charalampos Papamanthou. 2017. vSQL: Verifying arbitrary SQL queries over
dynamic outsourced databases. In Security and Privacy (SP), 2017 IEEE Symposium
on. IEEE, 863–880.
[72] Yupeng Zhang, Daniel Genkin, Jonathan Katz, Dimitrios Papadopoulos, and Char-
alampos Papamanthou. 2017. A Zero-Knowledge Version of vSQL. Cryptology
ePrint.
[73] Yupeng Zhang, Daniel Genkin, Jonathan Katz, Dimitrios Papadopoulos, and
Charalampos Papamanthou. 2018. vRAM: Faster verifiable RAM with program-
independent preprocessing. In Proceeding of IEEE Symposium on Security and
Privacy (S&P).
[74] Richard Zippel. 1979. Probabilistic algorithms for sparse polynomials. In Interna-
tional Symposium on Symbolic and Algebraic Manipulation. Springer, 216–226.
A ZERO-KNOWLEDGE ARGUMENTS
A zero-knowledge argument is a protocol between a computationally-
bounded prover P and a verifier V for an NP relationship R. At
the end of the protocol, P convinces V that she knows a witness
𝑤 such that (𝑥; 𝑤) ∈ R for some input 𝑥. “PPT" standards for prob-
abilistic polynomial time. We use G to represent the algorithm to
generate the public parameters. Formally, a zero-knowledge argu-
ment of knowledge is defined below, where R is known to P and
V.
Definition 1. Let R be an NP relation. A tuple of algorithm
(G, P,V) is a zero-knowledge argument of knowledge for R if the
following holds.
• Completeness. For every pp output by G(1𝜆), (𝑥; 𝑤) ∈ R and
𝜋 ← P(𝑥, 𝑤, pp), Pr[V(𝑥, 𝜋, pp) = 1] = 1
• Knowledge Soundness. For any PPT prover P∗, there exists a
PPT extractor E such that given the access to the entire executing
process and the randomness of P∗, E can extract a witness 𝑤 such
that pp ← G(1𝜆), 𝜋∗ ← P∗(𝑥, pp) and 𝑤 ← EP∗(pp, 𝑥, 𝜋∗):
Pr[(𝑥; 𝑤) ∉ R ∧ V(𝑥, 𝜋∗, pp) = 1] ≤ negl(𝜆).
• Zero-knowledge. There exists a PPT simulator S such that for any
PPT algorithm V∗, (𝑥; 𝑤) ∈ R, pp output by G(1𝜆), it holds that
View(V∗(pp, 𝑥)) ≈ SV∗(𝑥).
We say that (G, P,V) is a succinct argument system if the total
communication between P and V (proof size) is poly(𝜆, |𝑥|, log |𝑤|).
In the definition of zero-knowledge, View(V∗(pp, 𝑥)) denotes
the veiw the verifier sees during the execution of the interactive
process with P while SV∗(𝑥) denotes the view generated by S
given input 𝑥 and transcript of V∗, and ≈ denotes two distribu-
tions perfect indistinguishable. This definition is commonly used in
existing transparent zero-knowledge proof schemes [11, 15, 23, 67].
In addition, in order to build our zero-knowledge abstract in-
terpretation scheme, we need an additional property formalized
as “Commit-and-Prove” in [24]. It allows the prover to commit to
the witness first, and later prove statements about the commit-
ted value. It is naturally supported by most of ZKP systems. We
denote the algorithm as com𝑤 ← Commit(𝑤, pp). It is executed
after G and before P, and V additionally takes com𝑤 as an in-
put. It satisfies the extractability of commitment. Similar to the
extractability in Definition 1, there exists a PPT extractor E, given
any tuple (pp, 𝑥, com∗
𝑤) and the executing process of P∗, it could
always extract a witness 𝑤∗ such that com∗
𝑤 ← Commit(𝑤∗, pp)
except for negligible probability in 𝜆. Formally speaking, com∗
𝑤 =
Commit(EP∗(pp, 𝑥, com∗
Protocol 1 (Zero-Knowledge Abstract Interpretation(zkAI)). Let 𝜆
be the security parameter, F be a prime field, 𝑝 be the secret program, 𝐶 be
the arithmetic circuit in Figure 2. Let P and V be the prover and the verifier
respectively. We use ZKP.G, ZKP.Commit, ZKP.P, ZKP.V to represent the
algorithms of the backend ZKP protocol.
• pp ← zkAI.G(1𝜆): pp = ZKP.G(1𝜆)
• com𝑝←zkAI.Commit(𝑝, pp): com𝑝 = ZKP.Commit(𝑝, pp).
• 𝜋 ← zkAI.P(𝑝, (𝐿′, 𝑓 ′, 𝑔, Alg), pp):
(1) P runs the algorithm Alg with input 𝑝, 𝐿′ and 𝑓 ′ to get 𝑆 =
Alg(𝑝, 𝐿′, 𝑓 ′). Then generates the witness 𝑤 = (𝐶𝐹𝐺,𝑇 𝑟) for the
circuit 𝐶 during the procedure of the abstract interpretation algo-
rithm. 𝐶𝐹𝐺 and 𝑇 𝑟 represents the extended witness in Figure 2. Let
com𝑤 ← ZKP.Commit(𝑤, pp). P sends com𝑤 to V.
(2) After receiving the randomness r′ for checking consistency of the pro-
gram and the control flow graph, P invokes ZKP.P(𝐶, 𝑝, r′, 𝑤, 𝑝𝑝) to
get 𝜋. Sends 𝜋 to V.
• {0, 1} ← zkAI.V(com𝑝, com𝑤, (𝐿′, 𝑓 ′, Alg, 𝑔), 𝜋, pp): V outputs 1 if
ZKP.V(𝐶, com𝑝, r′, 𝜋, com𝑤, 𝑝𝑝) = 1, otherwise it outputs 0.
𝑤), pp).
Session 11B: Zero Knowledge II CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2965B DEFINITIONS OF ZERO-KNOWLEDGE
ABSTRACT INTERPRETATION
Definition 2. We say that a scheme is a zero-knowledge abstract
interpretation if the following holds:
• Completeness. For any program 𝑝 and analysis (val♯, A𝑝,𝑙 , Alg, 𝑔),
pp ← zkAI.G(1𝜆), com𝑝 ← zkAI.Commit(𝑝, pp), (𝑦, 𝜋) ←
zkAI.P(𝑝, (val♯, A𝑝,𝑙 , Alg, 𝑔), pp), it holds that
zkAI.V(com𝑝, (val♯, A𝑝,𝑙 , Alg, 𝑔), 𝑦, 𝜋, pp) = 1
= 1
• Soundness. For any PPT adversary Adv, the following probability
(cid:105)
is negligible in 𝜆:
Pr
pp ← zkAI.G(1𝜆)
(𝑝∗, com𝑝∗, (val♯, A𝑝,𝑙 , Alg, 𝑔), 𝑦, 𝜋∗) ← Adv(1𝜆, pp)
com𝑝∗ = zkAI.Commit(𝑝∗, pp)
zkAI.V(com𝑝∗, (val♯, A𝑝,𝑙 , Alg, 𝑔), 𝑦, 𝜋∗, pp) = 1
𝑔(Alg(𝑝, val♯, A𝑝,𝑙)) ≠ 𝑦
• Zero-Knowledge. For security parameter 𝜆, pp ← zkAI.G(1𝜆),
for a program 𝑝, PPT algorithm Adv, and simulator S = (S1,S2),
consider the following two experiments:
Pr(cid:104)
𝑎 𝑗
to prove that if the prover gives a wrong value pair in the sequence
of memory accesses, then it is impossible for him to give a final 𝑀𝑡
such that 𝑀0 ∪ 𝑊 𝑆 = 𝑀𝑡 ∪ 𝑅𝑆.
Now let us consider the first inconsistent value in the sequence
of memory accesses, happening at step 𝑗, where 1 ≤ 𝑗 ≤ 𝑡 w.l.o.g.
Since the prover faithfully gives the correct value up to step 𝑗 − 1,
we can write 𝑀𝑗−1 = 𝑀0 ∪ 𝑊 𝑆 𝑗−1 \ 𝑅𝑆 𝑗−1, which is the state
of the memory before step 𝑗. If the prover gives the value pair
, 𝑡′
(𝑎 𝑗 , (𝑣′
𝑎 𝑗)) that is inconsistent with the real value (𝑎 𝑗 , (𝑣𝑎 𝑗 , 𝑡𝑎 𝑗)),
𝑎 𝑗
then this means it is not in 𝑀𝑗−1. Moerover, this fake value pair
can not appear in following 𝑊 𝑆 \ 𝑊 𝑆 𝑗−1 because all value pairs in
𝑊 𝑆 \𝑊 𝑆 𝑗−1 has a time step larger than 𝑡′
which is ensured by the
condition 𝑡 ≤ 𝑡𝑠 at each step, and 𝑡𝑠 is increasing by 1. As a result,
it is impossible to find 𝑀𝑡 such that equation 1 holds
𝑀𝑗−1 ∪ (𝑊 𝑆 \ 𝑊 𝑆 𝑗−1) = (𝑅𝑆 \ 𝑅𝑆 𝑗−1) ∪ 𝑀𝑡 ,
(1)
because the fake pair is not in 𝑀𝑗−1 or (𝑊 𝑆 \ 𝑊 𝑆 𝑗−1), but in (𝑅𝑆 \
𝑅𝑆 𝑗−1). Finally, recall that 𝑀𝑗−1 = 𝑀0∪𝑊 𝑆 𝑗−1\𝑅𝑆 𝑗−1. Substituting
it into Equation 1 shows that 𝑀0 ∪𝑊 𝑆 = 𝑅𝑆 ∪ 𝑀𝑡 cannot hold. □
D PROOF OF THEOREM 1
Completeness. As explained in Section 3.2, the circuit in zkAI.P
outputs 1 if 𝑔(Alg(𝑝, 𝐿′, 𝑓 ′)) = 1. Therefore, the correctness of
Protocol 1 follows the zero-knowledge proof protocol by Theorem 2.
Soundness. By the extractability of the commitment in the zero
knowledge proof backend (Definition 1), with overwhelming prob-
ability, there exists a PPT extractor E such that given com𝑤, it ex-
tracts a witness 𝑤∗ such that com𝑤 = ZKP.Commit(𝑤∗, pp). By the
soundness of zkAI in Definition 2, if com𝑝 = zkAI.Commit(𝑝, pp)
and zkAI.V(com𝑝, (𝐿′, 𝑓 ′, Alg, 𝑔), 𝜋, pp) = 1 but 𝑔(Alg(𝐿′, 𝑓 ′)) = 0,
let com𝑤 = ZKP.Commit(𝑤∗, pp2) during the interactive process
in Protocol 1, then there are two cases.
• Case 1: 𝑤∗ = (𝐶𝐹𝐺∗,𝑇𝑟∗, 𝑟) such that 𝐶((com𝑝, 𝐶𝐹𝐺∗,𝑇𝑟∗, r′);
𝑤∗) = 1. Then we know either the control flow graph is not
consistent with the program representation or the iteration check
fails. The probability of both events are negl(𝜆) as claimed by
the soundness of the checks in 3.2. Hence, the probability that P
could generate such 𝑤∗ is also negl(𝜆) by the union bound.
• Case 2: 𝑤∗ = (𝐶𝐹𝐺∗,𝑇𝑟∗, 𝑟) but 𝐶((com𝑝, 𝐶𝐹𝐺∗,𝑇𝑟∗, r′); 𝑤∗) =
0. Then according to the soundness of Aurora, given the commit-
ment com∗
𝑤, the adversary could generate a proof 𝜋𝑤 making
V accept the incorrect witness and output 1 with probability
negl(𝜆).
Combining these two cases, the soundness of the zkAI scheme is
also negl(𝜆).
Zero-knowledge. The zero-knowledge property follows directly
from the commitment scheme and the zero-knowledge backend we
use.
E ADDITIONAL EXPERIMENTAL RESULTS
Circuit size for our zkAI on synthetic programs. The size of
circuits produced by our zero-knowledge abstract interpretation
schemes for various analyses and sizes are shown in Figure 6.
RealAdv,𝑝(pp):
(1) com𝑝 ← zkAI.Commit (𝑝, pp)
(2) (val♯, A𝑝,𝑙 , Alg, 𝑔) ← Adv(com𝑝, pp)
(3) (𝑦, 𝜋) ← zkAI.P(𝑝, (val♯, A𝑝,𝑙 , Alg, 𝑔), pp)
(4) 𝑏 ← Adv(com𝑝, (val♯, A𝑝,𝑙 , Alg, 𝑔), 𝑦, 𝜋, pp)
(5) Output b
IdealAdv,SAdv(pp, ℎ):
(1) com ← S1(1𝜆, pp)
(2) (val♯, A𝑝,𝑙 , Alg, 𝑔) ← Adv(com, pp)
(3) (𝑦, 𝜋) ←SAdv2
(com, (val♯, A𝑝,𝑙 , Alg, 𝑔), pp),
(4) 𝑏 ← Adv(com, (val♯, A𝑝,𝑙 , Alg, 𝑔), 𝑦, 𝜋, pp)
(5) Output b
For any PPT algorithm Adv and all programs 𝑝, there exists simu-
lator S such that the following probability is negl(𝜆):
| Pr[RealAdv,𝑝(pp) = 1] − Pr[IdealAdv,SAdv(pp, ℎ) = 1]|.
C PROOF OF MEMORY CHECKING
Theorem 2. Let 𝑀0 be the initial state of the memory of size 𝑚
known to the verifier. Let (𝑎1, 𝑎2, ..., 𝑎𝑡) be the sequence of addresses to
access. Following the procedure mentioned in Section 3.2 to construct
𝑅𝑆 and 𝑊 𝑆 set, with the additional requirement that 𝑡 ≤ 𝑡𝑠 at each
step ,if the prover manages to give 𝑀𝑡 that has the same size as 𝑀0,
and satisfy 𝑀0 ∪ 𝑊 𝑆 = 𝑀𝑡 ∪ 𝑅𝑆, then all the values in 𝑅𝑆 given by
the prover is consistent with values in the memory computed honestly.
Proof. We use 𝑅𝑆𝑖,𝑊 𝑆𝑖 to denote the first 𝑖 element of 𝑅𝑆 and
𝑊 𝑆 respectively, i.e., the read set and write set after step 𝑖. We use
𝑀𝑖 to denote the content of memory after step 𝑖.
First, observe that if the prover faithfully computes the sets and
the memory up to step 𝑖, then 𝑀𝑖 = 𝑀0 ∪ 𝑊 𝑆𝑖 \ 𝑅𝑆𝑖. We would like
Session 11B: Zero Knowledge II CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2966(a) Tainting Analysis
(b) Interval Analysis
(c) Control Flow Analysis
Figure 6: Circuit size of our zkAI schemes.
2526272829210211212213214Lines216217218219220221222223224225Circuit Size10variables30variables50variables70variables5010030050010002000Lines219220221222223224225Circuit Size30variables,20%inloop30variables,40%inloop50variables,20%inloop50variables,40%inloop50100300500100020004000Lines219220221222223224225Circuit SizeMultiplicity=1Multiplicity=2Multiplicity=4Multiplicity=8Session 11B: Zero Knowledge II CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea2967