# Scalable and Secure Concurrent Evaluation of History-based Access Control Policies

## Authors
Maarten Decat, Bert Lagaisse, Wouter Joosen  
KU Leuven, Belgium  
PI: EMAIL

---

## Abstract
This paper presents a scalable and secure approach to the concurrent evaluation of history-based access control policies. We address the challenges associated with read-write conflicts in distributed systems and propose a domain-specific concurrency control mechanism that ensures both correctness and scalability.

---

## 1. Context
### 1.1 Access Control
Access control is a critical security measure used to enforce rules that govern which subjects (e.g., users) can access which resources (e.g., documents, applications). 

### 1.2 System Architecture
- **Load Balancer**: Distributes incoming requests to multiple application instances.
- **Applications**: Handle user requests and interact with the database.
- **Policy Decision Points (PDPs)**: Evaluate access control policies based on the current state and history of the subject and resource.

---

## 2. Problem
### 2.1 History-Based Policies
Not all access control policies are read-only; some depend on historical data. Examples include:
- "A user cannot watch more than 10 movies per month."
- "An article cannot be shared more than 5 times."
- "If a user has accessed documents from Bank A, they are not allowed to access documents from Bank B." (Dynamic Separation of Duties, Dynamic SoD)

### 2.2 Read-Write Conflicts
Consider the following scenario:
- **Subject1** accesses a document from **Bank A**.
- **Subject1** then attempts to access a document from **Bank B**.

#### Scenario 1: Correct Evaluation
1. **Read Subject1's history** (empty).
2. **Evaluate policy**: Permit.
3. **Append "Bank A" to Subject1's history**.
4. **Return permit**.
5. **Read Subject1's history** (contains "Bank A").
6. **Evaluate policy**: Deny.
7. **Return deny**.

#### Scenario 2: Incorrect Evaluation Due to Concurrency
1. **Read Subject1's history** (empty).
2. **Evaluate policy**: Permit.
3. **Append "Bank A" to Subject1's history**.
4. **Return permit**.
5. **Read Subject1's history** (still empty due to race condition).
6. **Evaluate policy**: Permit.
7. **Append "Bank B" to Subject1's history**.
8. **Return permit**.

This results in a read-write conflict, leading to an incorrect decision.

---

## 3. Goal
To address these concurrency issues, we need a domain-specific form of concurrency control that achieves both serial equivalence and scalability. Traditional approaches, such as using a single master server for transactions (e.g., MySQL) or compare-and-set operations on single database elements (e.g., Cassandra, MongoDB), do not scale well.

---

## 4. Approach
### 4.1 Policy Evaluation as Transactions
One possible approach is to model policy evaluations as transactions on the underlying database. However, this does not scale well due to the limitations of traditional databases.

### 4.2 Domain-Specific Concurrency Control
We propose a domain-specific concurrency control mechanism that:
- Detects and contains read-write conflicts for the same attribute in parallel policy evaluations.
- Ensures both correctness and scalability.

#### Example
When the resource owner is "Bank B", apply the `DenyOverrides` rule if "Bank A" is found in the subject's history. Append "Bank B" to the subject's history if the policy permits.

---

## 5. Possible Tactics
1. **Locks**: Use locks to prevent concurrent access.
2. **(Multi-Version) Time-Stamp Ordering**: Use timestamps to manage concurrent transactions.
3. **Optimistic Concurrency Control**:
   - Check for conflicts before committing.
   - Roll back any updates in case of a conflict.
   - This fits the structure of a policy evaluation, where all attribute updates are performed after all reads.
   - Does not block policy evaluations.
   - Does not rely on database functionality.

---

## 6. Basic Approach
### 6.1 Optimistic Concurrency Control
- **Coordinator**: Manages the overall process.
- **Workers**: Perform the actual policy evaluations.
- **Attribute Database**: Stores the history and other attributes.

#### Workflow
1. Application sends a request to the coordinator.
2. Coordinator assigns the request to a worker.
3. Worker reads the necessary attributes.
4. Worker evaluates the policy.
5. Worker checks for conflicts.
6. If no conflicts, worker commits the update.
7. If conflicts, worker rolls back the update and retries.

---

## 7. Scalable Distributed Coordinator
### 7.1 Observations
- Each policy evaluation reasons about exactly one subject and one resource.
- Distribute these two parts over two collaborating coordinators.

### 7.2 Scalable Concurrency Control
- **Responsible Coordinator**: Based on the hash of the ID of the subject/resource.
- **Application**: Sends requests to the appropriate coordinator.
- **Coordinators**: Manage the workers and ensure correct policy evaluation.
- **Workers**: Perform the actual policy evaluations.
- **Attribute Database**: Stores the history and other attributes.

---

## 8. Performance Evaluation
### 8.1 Prototype and Test Setup
- **Prototype**: STAPL policy language [https://github.com/stapl-dsl/].
- **Framework**: Akka actor framework for concurrency and distributed communication.
- **Test Setup**: Run tests on VMs until statistically relevant. Employ a realistic policy from an e-health case study [https://people.cs.kuleuven.be/∼maarten.decat/acsac2015/].

### 8.2 Results
- **Client**: Sends requests to the system.
- **Coordinator**: Manages the workers.
- **Workers**: Perform policy evaluations.
- **Asymptotic Maximal Latency**: The proposed approach introduces a limited and asymptotically bounded latency overhead.

---

## 9. Conclusions
Our goal was to apply policy-based access control to large-scale distributed systems while addressing concurrency issues for history-based access control policies. Our contribution is a domain-specific scheme for concurrency control that:
- Prevents incorrect decisions.
- Scales to a large number of machines.
- Introduces a limited and asymptotically bounded latency overhead.

---

## References
- [STAPL policy language](https://github.com/stapl-dsl/)
- [E-health case study](https://people.cs.kuleuven.be/∼maarten.decat/acsac2015/)