title:Autonomous traffic engineering with self-configuring topologies
author:Srikanth Sundaresan and
Cristian Lumezanu and
Nick Feamster and
Pierre François
Autonomous Trafﬁc Engineering With
Self-Conﬁguring Topologies
Srikanth Sundaresan, Cristian Lumezanu, Nick Feamster
Pierre François
{srikanth.sundaresan,lume,feamster}@cc.gatech.edu
Georgia Tech
Université catholique de Louvain
PI:EMAIL
ABSTRACT
Network operators use trafﬁc engineering (TE) to control the ﬂow
of trafﬁc across their networks. Existing TE methods require man-
ual conﬁguration of link weights or tunnels, which is difﬁcult to
get right, or prior knowledge of trafﬁc demands and hence may not
be robust to link failures or trafﬁc ﬂuctuations. We present a self-
conﬁguring TE scheme, SculpTE, which automatically adapts the
network-layer topology to changing trafﬁc demands. SculpTE is
responsive, stable, and achieves excellent load balancing.
Categories and Subject Descriptors
C.2.1 [Computer-Communication Networks]: Network Ar-
chitechture and Design—Network Topology; C.2.3 [Computer-
Communication Networks]: Network Operations—Network
Management
General Terms
Algorithms, Design, Management, Reliability
Keywords
Online, Self-conﬁguring, Trafﬁc Engineering, Multi-path routing,
SculpTE
1.
INTRODUCTION
Network operators use trafﬁc engineering (TE) to manage re-
source allocation and balance trafﬁc demand across network links.
One of the biggest challenges that trafﬁc engineering approaches
face is conﬁguring the network topology that establishes the paths
between source and destination. Existing approaches rely on set-
ting link weights ofﬂine based on long term trafﬁc demand esti-
mations [2] (which is difﬁcult to do accurately in practice and may
not be stable), or on establishing tunnels a priori and shifting trafﬁc
between them in response to ﬂuctuations [6] (which incurs manage-
ment and conﬁguration overhead, and risk of conﬁguration errors).
We present SculpTE, the ﬁrst stable trafﬁc engineering approach
that is essentially conﬁguration-free. SculpTE balances trafﬁc load
across the network by continually adjusting link weights online to
expose additional, lightly loaded paths between pairs of endpoints.
The link weights in the network topology are derived by periodi-
cally sampling the loads on those links; thus, the cost of the link
is directly related to the amount of trafﬁc on each link and contin-
ually changes as trafﬁc demands change. We have designed these
link-weight updates to ensure that SculpTE is both responsive and
stable. SculpTE is autonomous, does not require a priori topology
Copyright is held by the author/owner(s).
SIGCOMM’10, August 30–September 3, 2010, New Delhi, India.
ACM 978-1-4503-0201-2/10/08.
S
S
2
3
2
3
1
10
11
5
4
10
11
5
4
2
4
2
D
D
Figure 1: The key idea of SculpTE is to adjust the weight of the
most loaded link (thick line) such that additional, lightly loaded
paths (red lines) are exposed between a source S and a destina-
tion D. Using ECMP routing, SculpTE naturally diverts some
of the trafﬁc onto the new shortest path. Labels represent link
weights, the cost of a path is the sum of the weights of its links.
conﬁguration, and it works well over a wide range of parameter
settings, even when nothing is known about trafﬁc demands.
The cost of adjusting topologies online, however, is that the po-
tential for instability is greater than in existing approaches that
leave the topology ﬁxed and adjust only how trafﬁc is routed over
existing paths. In fact, many schemes that adjust link weights on-
line have encountered stability problems. Nevertheless, adjusting
link weights is simple, intuitive, and imposes minimal overhead, so
it is worth revisiting this approach. SculpTE offers much promise
in this regard: we show that adjusting the topology and letting rout-
ing take care of itself can result in a stable system, even in a system
that uses destination-based, hop-by-hop forwarding.
2. DESIGN
SculpTE continually balances load across the network by adjust-
ing link weights online to gradually move trafﬁc away from the
most loaded link onto alternate, lightly loaded paths. At each it-
eration, SculpTE identiﬁes the most loaded link, l, and updates its
weight with its key metric [5]. The key metric of a link for a pair
of endpoints is the weight that must be added to the link to remove
it from the unique shortest path between the endpoints. We deﬁne
the alternate shortest path for a link l and a pair of endpoints S and
D whose trafﬁc traverses l as the shortest path between S and D
that does not traverse l. Intuitively, the key metric for l with respect
to the SD pair is the difference between the cost of the shortest
417A
C
2
3
10
1
11
(a)
4
2
B
A
D
C
2
3
10
1
11
(b)
4
2
B
A
D
C
2
3
4
2
B
D
10
4
11
(c)
Figure 2: Running SculpTE on a simple topology. (a) We identify the most loaded link l (thick line); AB and BC shortest paths
traverse l; (b) We compute the key metric for all pairs of nodes whose shortest path goes through l: k(A, B, l) = 3, k(C, D, l) = 5;
the AB pair yields the minimum key metric (we show the alternate shortest path for AB); (c) We add the value of the minimum key
metric to the weight of l; now there are two short paths between A and B; half of the trafﬁc between A and B will move away from l,
lowering its utilization. Note that the trafﬁc between C and D does not change; it still traverses l.
path and the cost of the alternate shortest path. Adding the key
metric to the weight of l increases the cost of the shortest path to
the cost of the alternate shortest path. This enables trafﬁc to be dis-
tributed evenly across the equal-cost paths with ECMP. In Figure 1,
we present a simple example illustrating SculpTE’s basic function.
In practice, many pairs of endpoints send trafﬁc through the most
loaded link l. Each pair has a different key metric with respect to l.
In SculpTE, we must be careful to move just enough trafﬁc to alle-
viate the load on l, yet preserve stability. To do so, SculpTE applies
the minimum key metric of all paths traversing l. By increasing the
weight of l with the smallest key metric, only trafﬁc between one
pair of endpoints (the pair that yields the smallest key metric) is
shifted from the most loaded link. Trafﬁc between all other pairs
is unaffected. In Figure 2, we show how SculpTE chooses the key
metric on a simple topology.
Applying the key metric of a link might cause a large amount of
trafﬁc to move away from the most congested link. This has the
potential to to cause oscillations. To mitigate the effect of destabi-
lizing feedback from link utilization, SculpTE sets up k multiple,
independent topologies. Each ﬂow is randomly assigned to one
topology. At each iteration, SculpTE updates a single topology.
This approach enables SculpTE to (1) prevent reaction to instan-
taneous trafﬁc patterns, because each topology is updated every k
iterations, and (2) reduce the amount of feedback, because ﬂows
are divided among k topologies. Prior work by Mitzenmacher [8]
shows that having choice helps in achieving good load balancing:
multiple topologies increase choice in network paths as different
topologies can open up different sets of paths. SculpTE requires
that link load and link weight updates are propagated throughout
the network once every iteration. This introduces some practi-
cal constraints; however, with sub-second IGP weight convergence
now possible, this is not expected to be a major problem.
3. PRELIMINARY EVALUATION
We evaluate SculpTE using simulations on six real ISP topolo-
gies (the Abilene network and ﬁve commercial ISP networks ob-
tained from Rocketfuel [9]). We present results showing the per-
formance of SculpTE compared to standard ofﬂine TE algorithms
such as IGP-WO [3, 4], proposed by Fortz et al., and InvCap [1].
IGP-WO conﬁgures link weights that minimize the maximum uti-
lization given the network graph and an expected trafﬁc matrix.
InvCap sets weights inversely proportional to the link capacity. We
generate 20 different trafﬁc matrices, using gravity and bimodal
models, such that average maximum utilization with optimal rout-
ing is between 0.1 and 0.8. This setup captures a wide variety
of trafﬁc demands and low as well as high-utilization scenarios.
We compute the IGP-WO weights for each trafﬁc matrix using the
SculpTE
IGP-WO
InvCap
1.8
1.7
1.6
1.5
1.4
1.3
1.2
1.1
m
u
m
i
t
p
o
m
o
r
f
l
i
t
u
-
x
a
m
f
o
n
o
i
t
a
v
e
D
i
1.0
AS 3257
AS 1
AS 6461
Abilene
AS 1668
AS 6395
Figure 3: Comparison of various schemes relative to optimal.
Totem toolset [7]. Initial weights are set inversely proportional to
the capacity of the link, and the frequency of updates is 10 sec-
onds. Figure 3 shows the average deviation from the optimum of
SculpTE using three topologies, IGP-WO, and InvCap. The aver-
age maximum utilization of SculpTE is much closer to optimum
than IGP-WO and InvCap for all networks. The variation in per-
formance obtained across different ASes with the ofﬂine schemes
is high, in contrast to SculpTE, which performs uniformly well.
REFERENCES
[1] Cisco. Conﬁguring OSPF.
http://www.cisco.com/en/US/docs/ios/12_0/np1/
configuration/guide/1cospf.html.
[2] B. Fortz, J. Rexford, and M. Thorup. Trafﬁc engineering with
traditional IP routing protocols. IEEE Communications Magazine,
2002.
[3] B. Fortz and M. Thorup. Internet trafﬁc engineering by optimizing
OSPF weights. In Proc. IEEE INFOCOM. Tel-Aviv, Israel, 2000.
[4] B. Fortz and M. Thorup. Optimizing OSPF/IS-IS weights in a
changing world. IEEE JSAC, 20(4):756–767, 2002.
[5] P. François, M. Shand, and O. Bonaventure. Disruption-free topology
reconﬁguration in OSPF networks. In IEEE Infocom, 2007.
[6] S. Kandula, D. Katabi, B. Davie, and A. Charny. Walking the
tightrope: Responsive yet stable trafﬁc engineering. In Proc. ACM
SIGCOMM. Philadelphia, PA, 2005.
[7] G. Leduc, et al. An open source trafﬁc engineering toolbox. Computer
Communications, 29(5):593–610, 2006.
[8] M. Mitzenmacher. The power of two choices in randomized load
balancing. IEEE Transactions on Parallel and Distributed Systems,
12(10):1094–1104, 2001.
[9] N. Spring, R. Mahajan, and D. Wetherall. Measuring ISP topologies
with Rocketfuel. In Proc. ACM SIGCOMM. Pittsburgh, PA, 2002.
418