User: I wrote a time-consuming python program. Basically, the python program spends most of its time in a fortran routine wrapped by f2py and the fortran routine spends most of its time in lapack. However, when I ran this program in my workstation, I found 80% of the cpu time was user time and 20% of cpu time was system time.
In another SO question, I Read:

The difference is whether the time is spent in user space or kernel space. User CPU time is time spent on the processor running your program's code (or code in libraries); system CPU time is the time spent running code in the operating system kernel on behalf of your program.

So if this is true, I assume all the cpu time should be devoted to user time. Does 20% percent system time indicate I need to profile the program?
EDIT:
More information: I cannot reproduce the 20% percent system cpu time. In another run, the time command gives:

real  5m14.804s
user  78m6.233s
sys   4m53.896s
Assistant: Operating systems are constantly switching out what is running at any given moment. Your program will run for a while, but eventually there will be an interrupt, and the system will switch to something else, or it may just decide to run something else for a second or two, then switch back. It is difficult to force an operating system not to do this behavior. That's part of the job of the OS; keeping things moving in all areas.