Object>`对象。该对象不仅涵盖了上述列表中的对象，还存在着很多其他未暴露出的对象。整个`FreeMarkerTemplate`对象共列出了154个对象，大大拓宽了我们的利用思路。
**在FreeMarker引擎里，这些对象被称作为根数据模型（`rootDataModel`)。**
那么可以尝试从这154个对象中找出可利用的点，为此笔者进行了众多尝试，但由于 Liferay
健全的安全机制，全都失败了。下面是一些调试过程中发现在后续利用过程中可能有用的对象：
    "getterUtil" -> {GetterUtil_IW@47242} //存在各种get方法
    "saxReaderUtil" -> {$Proxy411@47240} "com.liferay.portal.xml.SAXReaderImpl@294e3d8d"
        //代理对象，存在read方法，可以传入File、url等参数
    "expandoValueLocalService" -> {$Proxy58@47272} "com.liferay.portlet.expando.service.impl.ExpandoValueLocalServiceImpl@15152694"
        //代理对象，其handler为AopInvocationHandler，存在invoke方法，且方法名和参数名可控。proxy对象可以通过其setTarget方法进行替换。
    "realUser" -> {UserImpl@49915}//敏感信息
    "user" -> {UserImpl@49915}//敏感信息
    "unicodeFormatter" -> {UnicodeFormatter_IW@47290} //编码转换
    "urlCodec" -> {URLCodec_IW@47344} //url编解码
    "jsonFactoryUtil" -> {JSONFactoryImpl@47260} //可以操作各种JSON相关方法
接下来将会通过叙述笔者对各种利用思路的尝试，对 Liferay 中 FreeMarker 模板引擎的安全机制进行深入分析。
### “攻不破”的 Liferay FreeMarker 安全机制
在以往我们一般是通过`Class.getClassloader().loadClass(xxx)`的方式加载任意类，但是在前文提及的`unsafeMethods.properties`中，我们可以看到`java.lang.Class.getClassLoader()`方法是被禁止调用的。
这时候我们只能另辟蹊径， **在 Java
官方文档中可以发现`Class`类有一个`getProtectionDomain`方法，可以返回一个`ProtectionDomain`对象[5]。而这个对象同时也有一个`getClassLoader`方法，并且`ProtectionDomain.getClassLoader`方法并没有被禁止调用。**
获取`CLassLoader`的方式有了，接下来，我们只要能够获得`class`对象，就可以加载任意类。但是当我们试图去获取`class`对象时，会发现这是行不通的，因为这会触发
Liferay 的安全机制。
定位到 GHSL
团队提及的`com.liferay.portal.template.freemarker.internal.RestrictedLiferayObjectWrapper.java`文件，可以发现模板对象会经过`wrap`方法修饰。
通过`wrap(java.lang.Object
obj)`方法，用户可以传入一个`Object`对象，然后返回一个与之对应的`TemplateModel`对象，或者抛出异常。
**模板在语法解析的过程中会调用`TemplateModel`对象的`get`方法，而其中又会调用`BeansWrapper`的`invokeMethod`进行解析，最后会调用外部的`wrap`方法对获取到的对象进行包装。**
此处的`getOuterIdentity`即为`TemplateModel`对象指定的`Wrapper`。除了预定义的一些对象，其余默认使用`RestrictedLiferayObjectWrapper`进行解析。
回到`RestrictedLiferayObjectWrapper`，该包装类主要的继承关系为`RestrictedLiferayObjectWrapper->LiferayObjectWrapper->DefaultObjectWrapper->BeansWrapper`，在`wrap`的执行过程中会逐步调用父类的`wrap`方法，那么先来分析`RestrictedLiferayObjectWrapper`的`wrap`方法。
`wrap`方法中会先通过`getClass()`方法获得`class`对象，然后调用`_checkClassIsRestricted`方法，进行黑名单类的判定。
**此处`_allowedClassNames`、`_restrictedClasses`和`_restrictedMethodNames`是在`com.liferay.portal.template.freemarker.configuration.FreeMarkerEngineConfiguration`中被预先定义的黑白名单，其中`_allowedClassNames`默认为空。**对比一下7.3.0-GA1和7.3.2-GA3内置的黑名单：
  * 7.3.0-GA1
      @Meta.AD(name = "allowed-classes", required = false)
      public String[] allowedClasses();
      @Meta.AD(
         deflt = "com.liferay.portal.json.jabsorb.serializer.LiferayJSONDeserializationWhitelist|java.lang.Class|java.lang.ClassLoader|java.lang.Compiler|java.lang.Package|java.lang.Process|java.lang.Runtime|java.lang.RuntimePermission|java.lang.SecurityManager|java.lang.System|java.lang.Thread|java.lang.ThreadGroup|java.lang.ThreadLocal",
         name = "restricted-classes", required = false
      )
      public String[] restrictedClasses();
      @Meta.AD(
         deflt = "com.liferay.portal.model.impl.CompanyImpl#getKey",
         name = "restricted-methods", required = false
      )
      public String[] restrictedMethods();
      @Meta.AD(
        deflt = "httpUtilUnsafe|objectUtil|serviceLocator|staticFieldGetter|staticUtil|utilLocator",
        name = "restricted-variables", required = false
      )
      public String[] restrictedVariables();
  * 7.3.2-GA3
      @Meta.AD(name = "allowed-classes", required = false)
      public String[] allowedClasses();
      @Meta.AD(
        deflt = "com.ibm.*|com.liferay.portal.json.jabsorb.serializer.LiferayJSONDeserializationWhitelist|com.liferay.portal.spring.context.*|io.undertow.*|java.lang.Class|java.lang.ClassLoader|java.lang.Compiler|java.lang.Package|java.lang.Process|java.lang.Runtime|java.lang.RuntimePermission|java.lang.SecurityManager|java.lang.System|java.lang.Thread|java.lang.ThreadGroup|java.lang.ThreadLocal|org.apache.*|org.glassfish.*|org.jboss.*|org.springframework.*|org.wildfly.*|weblogic.*",
        name = "restricted-classes", required = false
      )
      public String[] restrictedClasses();
      @Meta.AD(
        deflt = "com.liferay.portal.model.impl.CompanyImpl#getKey",
        name = "restricted-methods", required = false
      )
      public String[] restrictedMethods();
      @Meta.AD(
        deflt = "httpUtilUnsafe|objectUtil|serviceLocator|staticFieldGetter|staticUtil|utilLocator",
        name = "restricted-variables", required = false
      )
      public String[] restrictedVariables();
已修复的7.3.2版本增加了许多黑名单类，而这些黑名单类就是绕过沙箱的重点。如何利用这些黑名单中提及的类，进行模板沙箱的绕过，我们放在下篇文章进行阐述，这里暂不讨论。
我们可以发现`java.lang.Class`类已被拉黑，也就是说模板解析的过程中不能出现`Class`对象。但是，针对这种过滤方式，依旧存在绕过的可能性。
GHSL 安全团队在 JinJava 的 SSTI 漏洞通告提及到了一个利用方式：
> JinJava does a great job preventing access to `Class` instances. It will
> prevent any access to a `Class` property or invocation of any methods
> returning a `Class` instance. However, it does not prevent Array or Map
> accesses returning a `Class` instance. Therefore, it should be possible to
> get an instance of `Class` if we find a method returning `Class[]` or
> `Map`.
既然`Class`对象被封禁，那么我们可以考虑通过`Class[]`进行绕过，
**因为黑名单机制是通过`getClass`方法进行判断的，而`[Ljava.lang.Class`并不在黑名单内。**另外，针对`Map`的利用方式主要是通过`get`方法获取到`Class`对象，而不是通过`getClass`方法，主要是用于拓展获得`Class`对象的途径。因为需要自行寻找符合条件的方法，所以这种方式仍然具有一定的局限性，但是相信这个
trick 在某些场景下的利用能够大放光彩。
经过一番搜寻，暂未在代码中寻找到合适的利用类，因此通过`Class`对象获取`ClassLoader`的思路宣告失败。此外，实质上`ClassLoader`也是被加入到黑名单中的。因此就算我们能从模板上下文中直接提取出`ClassLoader`对象，避免直接通过`Class`获取，也无法操控到`ClassLoader`对象。
既然加载任意类的思路已经被 Liferay 的安全机制防住，我们只能换个思路——寻找一些可被利用的恶意类或者危险方法。
**此处主要有两个思路，一个是通过`new`内建函数实例化恶意类，另外一个就是上文提及的`JSONFactoryImpl`对象**。
文章开头提到过三种利用方式，但是由于 Liferay
自定义解析器的存在，均无法再被利用。定位到`com.liferay.portal.template.freemarker.internal.LiferayTemplateClassResolver`这个类，重点关注其`resolve`方法。可以看见，在代码层直接封禁了`Execute`和`ObjectConstructor`的实例化，其次又进行了黑名单类的判定。此处`restrictedClassNames`跟上文所用的黑名单一致。
这时候可能我们会想到，只要另外找一个实现`TemplateModel`
接口并且不在黑名单内的恶意类（比如`JythonRuntime`类）就可以成功绕过黑名单。然而 Liferay
的安全机制并没有这么简单，继续往下看。`resolve`后半部分进行了白名单校验，而这里的`allowedClasseNames`在配置里面默认为空，因此就算绕过了黑名单的限制，没有白名单的庇护也是无济于事。
黑白名单的配合，直接宣告了`new`内建函数利用思路的惨败。不过，在这个过程中，我们还发现了一个有趣的东西。
假设我们拥有控制白名单的权限，但是对于`JythonRuntime`类的利用又有环境的限制，这时候只能寻找其他的利用类。在调试过程中，我们注意到一个类——`com.liferay.portal.template.freemarker.internal.LiferayObjectConstructor`，
**这个类的结构跟`ObjectConstructor`极其相似，也同样拥有`exec`方法，且参数可控**。加入白名单测试弹计算器命指令，可以正常执行。
虽然此处受白名单限制，利用难度较高。但是从另外的角度来看，`LiferayObjectConstructor`可以说是`ObjectConstructor`的复制品，在某些场景下可能会起到关键作用。
回归正题，此时我们只剩下一条思路——`JSONFactoryImpl`对象。不难发现，这个对象拥有着一系列与JSON有关的方法，其中包括`serialize`和`deserialize`方法。
重点关注其`deserialize`方法，因为我们可以控制传入的JSON字符串，从而反序列化出我们需要的对象。此处`_jsonSerializer`为`LiferayJSONSerializer`对象（继承自`JSONSerializer`类）。
跟进`LiferayJSONSerializer`父类的`fromJSON`方法，发现其中又调用了`unmarshall`方法。
在`unmarshall`方法中会调用`getClassFromHint`方法，不过该方法在子类被重写了。
跟进`LiferayJSONSerializer.getClassFromHint`方法，方法中会先进行`javaClass`字段的判断，如果类不在白名单里就移除`serializable`字段里的值，然后放进`map`字段中，最后将类名更改为`java.util.HashMap`。
**如果通过白名单校验，就会通过`contextName`字段的值去指定`ClassLoader`用于加载`javaClass`字段指定的类。**最后在方法末尾会执行`super.getClassFromHint(object)`，回调父类的`getClassFromHint`的方法。
我们回到`unmarshall`方法，可以看到在方法末尾处会再次调用`unmarshall`方法，实质上这是一个递归解析 JSON
字符串的过程。这里有个`getSerializer`方法，主要是针对不同的`class`获取相应的序列器，这里不过多阐述。
因为递归调用的因素，每次都会进行类名的白名单判定。而白名单在`portal-impl.jar`里的`portal.properties`被预先定义：
    //Line 7227
    json.deserialization.whitelist.class.names=\
        com.liferay.portal.kernel.cal.DayAndPosition,\
        com.liferay.portal.kernel.cal.Duration,\
        com.liferay.portal.kernel.cal.TZSRecurrence,\
        com.liferay.portal.kernel.messaging.Message,\
        com.liferay.portal.kernel.model.PortletPreferencesIds,\
        com.liferay.portal.kernel.security.auth.HttpPrincipal,\
        com.liferay.portal.kernel.service.permission.ModelPermissions,\
        com.liferay.portal.kernel.service.ServiceContext,\
        com.liferay.portal.kernel.util.GroupSubscriptionCheckSubscriptionSender,\
        com.liferay.portal.kernel.util.LongWrapper,\
        com.liferay.portal.kernel.util.SubscriptionSender,\
        java.util.GregorianCalendar,\
        java.util.Locale,\
        java.util.TimeZone,\
        sun.util.calendar.ZoneInfo
可以看到，白名单成功限制了用户通过 JSON 反序列化任意类的操作。 **虽然白名单类拥有一个`register`方法，可自定义添加白名单类。**但
Liferay
也早已意识到这一点，为了防止该类被恶意操控，将`com.liferay.portal.json.jabsorb.serializer.LiferayJSONDeserializationWhitelist`添加进黑名单。
至此，利用思路在 Liferay 的安全机制下全部惨败。Liferay
健全的黑白名单机制，从根源上限制了大多数攻击思路的利用，可谓是“攻不破”的铜墙铁壁。但是，在众多安全研究人员的猛烈进攻下，该安全机制暴露出一个弱点。通过这个弱点可一举击破整个安全机制，从内部瓦解整个防线。而关于这个弱点的阐述及其利用，我们下一篇文章见。
## References
[1] Room for Escape: Scribbling Outside the Lines of Template Security
[2] FreeMarker Java Template Engine
[3] FreeMarker unsafeMethods.properties
[4] GHSL-2020-043: Server-side template injection in Liferay - CVE-2020-13445
[5] ProtectionDomain (Java Platform SE 8 )
[6] In-depth Freemarker Template Injection
[7] FreeMarker模板注入实现远程命令执行
* * *