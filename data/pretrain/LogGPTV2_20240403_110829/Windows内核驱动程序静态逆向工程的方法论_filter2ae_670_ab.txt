###  2.4 组合
我知道，上述的过程可能太过复杂。但是，我们可以对其进行简化，并类比于发送网络数据包的过程来对其进行分析。我们可以使用所需的任何细节来构造数据包，然后将其发送到服务器进行处理，使用该数据包执行某些操作。而对于服务器端，要不然会忽略我们的数据包，要不然会返回一些结果。接下来，我们对IOCTL的发送和处理方式进行简化并说明：
1、用户模式应用程序获取符号链接上的句柄。
2、用户模式应用程序使用`DeviceIoControl()`将所需的IOCTL和输入/输出缓冲区发送到符号链接。
3、符号链接指向驱动程序的设备对象，并允许驱动程序接收用户模式应用程序的数据包（IRP）。
4、驱动程序看到该数据包来自DeviceIoControl()，因此将其传递给已定义的内部函数`MyCtlFunction()`。
5、`MyCtlFunction()`将函数代码0x800映射到内部函数`SomeFunction()`。
6、`SomeFunction()`执行。
7、IRP已经完成，其状态以及驱动程序在用户模式应用程序中提供的输出缓冲区中包含的为用户提供的所有内容都将传回给用户。  
注意：在这里我们并不是说IRP已经完成，但需要关注的是，一旦`SomeFunction()`执行，上述时间就可以发生，并且将得到函数返回的状态代码，这表明操作的结束。
## 三、驱动程序反编译
现在，我们已经对需要探寻的关键结构有了一定了解，是时候开始深入研究目标驱动程序了。我们会清晰展现出如何在Ghidra中执行此操作，IDA中的方法与之完全相同。
一旦我们将要定位的驱动程序下载到我们的分析环境中，就应该开始寻找IRP Handler，该处理程序会使我们明确潜在的关键函数。
###  3.1 设置
由于Ghidra中并没有包含太多分析驱动程序所需的符号，所以我们需要找到一种方法，以某种方式将其进行导入。幸运的是，感谢0x6d696368（Mich）此前所做的研究工作，帮助我们简化了这一过程。
Ghidra支持Ghidra数据类型存档（GDT）格式的数据类型，这些数据类型是打包的二进制文件，其中包含从所选标头衍生出的符号，这些符号可能是自定义的，也可能是微软提供的。有关这些文件的文档并不多，并且确实需要进行一些手工修改，但幸运的是，Mich已经完成了这部分工作。
我们在他的GitHub项目中找到了针对Ntddk.h和Wdm.h的预编译GDT，即ntddk_64.gdt。我们需要在运行Ghidra的系统上下载该文件。
要导入并开始使用GDT文件，我们需要打开要分析的驱动程序，单击“Data Type Manager”的下拉箭头，然后选择“Open File
Archive”。
然后，选择先前下载的ntddk_64.gdt文件并打开。
在“Data Type Manager”窗口中，目前有一个新的条目“ntddk_64”。右键单击该条目，然后选择“Apply Function Data
Types”，随后将会更新反编译器，并且可以看到许多函数签名的变化。
###  3.2 查找DriverEntry
现在，我们已经对数据类型进行了排序，接下来需要确定驱动程序对象。这个过程相对简单，因为它是`DriverEntry`的第一个参数。首先，在Ghidra中打开驱动程序，并进行初始的自动分析。在“Symbol
Tree”窗口下，展开“Exports”项目，就可以找到有一个名为entry的函数。
注意：在某些情况下，可能还会有一个`GsDriverEntry`函数，看起来像是对两个未命名函数的调用。这是开发人员使用/GS编译器标志并设置栈Cookie的结果。其中的一个函数是真正的驱动程序入口，因此我们需要检查其中较长的一个函数。
###  3.3 查找IRP Handler
我们需要查找的第一个内容是驱动程序对象的一系列偏移量。这些都与`nt!_DRIVER_OBJECT`结构的属性有关。其中，我们最感兴趣的一个是MajorFunction表（+0x70）。
使用我们新应用的符号，就变得容易很多。因为我们知道，`DriverEntry`的第一个参数是指向驱动程序对象的指针，所以我们可以在反编译器中单击该参数，然后按CTRL+L来调出数据类型选择器，搜索`PDRIVER_OBJECT`，然后单击“OK”，这样将更改参数的类型以对应其真实类型。
注意：我希望将参数名称更改为`DriverObject`，以在执行该函数时为我提供一些帮助。要执行此操作，需要单击参数，然后按“L”，然后输入要使用的名称。
现在，我们就有了适当的类型，是时候开始寻找`MajorFunction`表的偏移量了。有时候，我们可能会在`DriverEntry`函数中看到这个权限，但有时可以看到驱动程序对象作为参数传递给另一个内部函数。
接下来，我们查找`DriverObject`变量的出现。使用鼠标可以轻松完成查找工作，只需要在变量上单击鼠标滚轮，反编译器中就可以突出显示该变量的所有实例。在我们使用的示例中，没有看到对驱动程序对象的偏移量的引用，但发现它被传递到另一个函数。
我们跳到`FUN_00011060`这个函数，然后将第一个参数重新输入到`PDRIVER_OBJECT`中，因为我们知道`DriverEntry`将其作为唯一参数显示。
然后，再次开始从`DriverObject`变量中搜索对偏移量的引用。我们正在寻找的是：
在vanilla
Ghidra中，我们将这些视图视为`DriverObject`的详细偏移量，但由于我们已经应用了NTDDK数据类型，因此现在它变得更为整洁。现在，我们已经找到了标记了`MajorFunction`表的`DriverObject`偏移量，索引的位置是(0,
2, 0xe)？这些偏移量都是在WDM标头（wdm.h）中定义，代表IRP主要函数代码。
在我们的示例中，驱动程序处理3个主要函数代码————`IRP_MJ_CREATE`、`IRP_MJ_CLOSE`和`IRP_MJ_DEVICE_CONTROL`。其中，前两个我们并不关注，但第三个`IRP_MJ_DEVICE_CONTROL`非常关键，因为在该偏移量（0x104bc）处定义的函数使用了`DeviceIoControl`及其包含的I/O控制代码（IOCTL）来处理从用户模式发出的请求。
接下来，让我们深入研究该函数。我们查看`MajorFunction[0xe]`的偏移量，将会看到驱动程序中偏移量为0x104bc的函数。该函数的第二个参数以及所有设备I/O控制IRP
Handler是指向IRP的指针。我们可以再次使用CTLR+L，将第二个参数重新命名为PIRP（或者其他自定义名称）。
IRP结构非常复杂，即使有了我们新的类型定义，也无法弄清楚所有内容。在其中，我们首先要寻找的是IOCTL。这部分在反编译器中将以DWORD来表示，但我们需要知道它们将分配给哪个变量。为了弄明白这一点，我们要依靠我们的老朋友————WinDbg。
我们可以看到，IRP的第一个偏移量是`IRP->Tail + 0x40`。
接下来，我们深入研究一下IRP结构。
我们可以看到Tail是从偏移量+0x78开始，但是0x40字节又是什么呢？借助WinDbg，我们可以看到`CurrentStackLocation`是位于`Irp->Tail`偏移量+0x40的位置，但仅仅显示为一个指针。
微软似乎暗示，这是指向`_IO_STACK_LOCATION`结构的指针。因此，在反编译器中，我们可以将lVar2重命名为CurrentStackLocation。
在这个新变量之后，我们希望找到对偏移量+0x18（即IOCTL）的引用。
如果希望，还可以将该变量重命名为便于识别的名称。
现在，我们已经找到了包含IOCTL的变量，我们看到，它与一系列DWORD进行了比较。
这些比较是驱动程序检查这些IOCTL是否属于其可以处理的范围。在每次比较之后，可能会发生内部函数调用。当特定的IOCTL从用户模式发送到驱动程序时，将会执行这些操作。在上面的示例中，驱动程序收到IOCTL
0x8000204c时，将执行`FUN_0000944c`（某些类型的打印函数）和`FUN_000100d0`。
###  3.4 小结
上面的信息量有点大，但实际上非常简单。我们将其总结为以下的工作流程：
1、跟随`DriverEntry`的第一个参数，即驱动程序对象，直至找到指示`MajorFunction`表的偏移量。
2、在`MajorFunction[0xe]`处查找偏移量，标记DeviceIoControl IRP Handler。
3、跟随这个函数的第二个参数PIRP，直至找到`PIRP->Tail +0x40`，将其标记为CurrentStackLocation。  
4、从`CurrentStackLocation`查找偏移量+0x18，这就是我们想寻找的IOCTL。
在很多情况下，我们会跳过第3步和第4步，并借助反编译器进行一连串的DWORD比较。如果为了方便，我们往往会寻找对`IofCompleteRequest`的调用，然后从调用向上滚动，以查找DWORD比较。
## 四、函数逆向
既然我们已经知道驱动程序收到IOCTL时哪些函数会在内部执行，我们就可以开始逆向这些函数，以找到有趣的功能。由于各个驱动程序之间的差异很大，因此我们的分析中就没有包含这部分内容。
在这里，我的常用思路是，在这些函数中查找有趣的API调用，确定输入所需的内容，然后使用简单的用户模式客户端（根据目标来复制并修改的通用模板）来发送IRP。在分析EDR驱动程序时，我还希望了解它们具体的功能，例如进程对象处理程序回调。在此过程中，我找到了一些不错的驱动程序漏洞，可以激发出我们的一些灵感。
需要注意的一件重要事情，特别是在使用Ghidra时，需要注意这个变量声明：
如果我们在WinDbg中查看此内容，我们可以发现，在这个偏移量的位置是指向`MasterIrp`的指针。
实际上，我们看到的是与`IRP->SystemBuffer`的并集，该变量实际上是`METHOD_BUFFERED`数据结构。这也就是为什么我们经常会看到它作为参数传递给内部函数的原因。在对内部函数进行逆向的过程中，请确保将其视为输入/输出缓冲区。  
祝大家好运，狩猎愉快！