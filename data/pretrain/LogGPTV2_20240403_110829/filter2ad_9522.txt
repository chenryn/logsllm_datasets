**Author: LoRexxar'@Knownsec 404 Team  
Chinese Version:**

On April 11, 2019, the ZDI Blog published an article titled [A SERIES OF UNFORTUNATE IMAGES: DRUPAL 1-CLICK TO RCE EXPLOIT CHAIN DETAILED](https://www.zerodayinitiative.com/blog/2019/4/11/a-series-of-unfortunate-images-drupal-1-click-to-rce-exploit-chain-detailed). The attack method described in this paper is ingenious, as it leverages a chain of three vulnerabilities and several small tricks. In this article, we will delve into the details of this vulnerability.

## Writing an Unsuffixed File

Drupal has a mechanism that retains the original name of uploaded image files. If a file with the same name already exists, Drupal appends `_0`, `_1`, etc., to the filename. To ensure compatibility with various encodings, Drupal processes filenames by converting characters with values less than `0x20` to underscores (`_`).

However, if the filename contains a character in the range `\x80` to `\xff`, PHP will generate a `PREG_BAD_UTF8_ERROR`. When this error occurs, the `preg_replace` function returns `NULL`, and the `$basename` variable is set to `NULL`.

When `$basename` is `NULL`, the contents of the uploaded file are written to a file named `_0` in the corresponding directory. For example, if the attacker uploads a file to:

```
/sites/default/files/pictures/
```

It will be written as:

```
/sites/default/files/pictures/_0
```

If the server allows comment avatar uploads or if the attacker has an account with author permissions, they can upload a maliciously crafted "gif" image and another image with malicious characters. This results in the malicious image content being written to `_0` in the corresponding directory.

However, directly accessing this unsuffixed file may not cause it to be parsed correctly. The reasons for this include:
1. The browser parses the page based on the `content-type` provided by the server, which typically does not set a `content-type` or sets it to `application/octet-stream` for unsuffixed files.
2. The browser makes a simple judgment based on the file's content. If the file starts with specific headers, some browsers may parse it as HTML.
3. Some browsers may set a default `content-type`, but most choose not to parse the file.

To overcome this, a special trick can be used: the `<a>` tag can be set to open the file with a specified type (except in Chrome). When the victim accesses the page, the file is parsed as HTML, and the corresponding code is executed, allowing for arbitrary XSS and providing a JavaScript execution point in a homologous environment.

## Phar Deserialization RCE

At BlackHat 2018, Sam Thomas discussed the [Stream API](https://secure.php.net/manual/zh/internals2.ze1.streams.php) in PHP, which includes the `phar://` stream wrapper. Knownsec 404 Team security researcher Seaii noted that all file functions support stream wrappers. If a controllable file manipulation function can be made to handle a phar file, deserialization can lead to command execution.

In Drupal, there is a file system function that checks if a given path is a directory using `is_dir`. This function can be exploited if the input can be controlled as a phar file. The following payload can be used to generate the necessary files:

```php
_fn_close)) {
    call_user_func($this->_fn_close);
}
}
}
namespace{
    @unlink("phar.phar");
    $phar = new Phar("phar.phar");
    $phar->startBuffering();
    $phar->setStub("GIF89a".""); // Set stub, add GIF file header
    $o = new \GuzzleHttp\Psr7\FnStream();
    $phar->setMetadata($o); // Store custom metadata in manifest
    $phar->addFromString("test.txt", "test"); // Add file to be compressed
    // Signature is automatically calculated
    $phar->stopBuffering();
}
?>
```

After changing the file extension to "png", the image can be sent to the server and set in the `file system`:

```
phar://./sites/default/files/2019-04/drupal.png
```

This triggers the deserialization and command execution.

## Vulnerability Requirements

This vulnerability was fixed in the update to Drupal 8.6.6. The requirements for the vulnerability are as follows:
- Drupal version < 8.6.6
- Error handling that does not continue writing if an error occurs.

### Phar Deserialization SA-CORE-2019-002

## Conclusion

The entire vulnerability is composed of several small, seemingly insignificant vulnerabilities. The deserialization POP chain in Drupal has been known for a long time, and the phar vulnerability has been public for over a year. At the beginning of 2019, Drupal updated to address these issues, and `preg_replace` now reports and throws errors. Combining these three vulnerabilities with the `<a>` tag and `content-type` trick creates a very effective vulnerability chain.

## About Knownsec & 404 Team

Beijing Knownsec Information Technology Co., Ltd. was founded by a group of high-profile international security experts. It has a core security research team of over a hundred top-tier security talents nationwide, providing advanced network security solutions for governments and enterprises.

Knownsec specializes in integrated network attack and defense technologies and product R&D under new circumstances. It offers visualization solutions that meet world-class security technology standards and enhances the security monitoring, alarm, and defense capabilities of customer networks with its industry-leading capabilities in cloud computing and big data processing. The company's technical strength is recognized by the State Ministry of Public Security, the Central Government Procurement Center, the Ministry of Industry and Information Technology (MIIT), China National Vulnerability Database of Information Security (CNNVD), the Central Bank, the Hong Kong Jockey Club, Microsoft, Zhejiang Satellite TV, and other well-known clients.

The 404 Team, the core security team of Knownsec, is dedicated to researching security vulnerabilities and offensive and defensive technologies in Web, IoT, industrial control, and blockchain. The team has submitted vulnerability research to many well-known vendors such as Microsoft, Apple, Adobe, Tencent, Alibaba, and Baidu, and has received high recognition in the industry.

Some of the most well-known initiatives by Knownsec 404 Team include:
- [KCon Hacking Conference](http://kcon.knownsec.com/#/)
- [Seebug Vulnerability Database](https://www.seebug.org/)
- [ZoomEye Cyberspace Search Engine](https://www.zoomeye.org/)