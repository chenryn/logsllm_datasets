### Security Considerations for Adversarially Chosen Public Keys
It is crucial to ensure that the security of our protocol holds even under "adversarially chosen" public keys. This means we must either prove or assume that an adversary cannot generate a public key that would provide them with an unfair advantage in the Multiplicative-to-Additive (MtA) protocol.

### 6.2 Other Multiplicative-to-Additive Share Conversions
Our threshold DSA scheme is compatible with any MtA protocol, which allows two parties to convert their multiplicative shares of a secret into additive shares. One such classic approach is based on oblivious transfer, as proposed by Gilboa [21]. The original protocol in [21] is secure only against semi-honest adversaries, but it can be enhanced to withstand malicious adversaries, as detailed in the literature on SPDZ or recent work on threshold DSA in [12].

### 6.3 Simulation-Based Security
Our proof employs a game-based definition of unforgeability. The primary technical challenge is that the simulator cannot determine whether the current execution is semi-correct. Consequently, the simulator must guess, which precludes achieving the stronger notion of simulation-based security, where each protocol execution can be fully simulated.

In the real world, it is infeasible to decide if an execution is semi-correct. However, the simulator could make this determination if it could "extract" the bad players' inputs to the MtA protocols. This extraction would allow the simulator to verify the consistency of the values \(\delta_i\) and \(\Gamma_i\) sent by the bad players in Phases 3 and 4. If these values are consistent, the execution is semi-correct; otherwise, it is not.

Currently, our simulator can extract \(k_i\) (since it knows the decryption key of the bad players, extracted during the key generation simulation) and \(w_i\) (the share of the secret key, also extracted during key generation). However, it cannot extract \(\gamma_i\) because we do not require players to prove knowledge of it.

To address this, we propose that \(P_i\) and \(P_j\) run MtAwc when interacting on inputs \(k_i\) and \(\gamma_j\), as MtAwc forces the respondent to prove knowledge of its input. This will enable the simulator to extract \(\gamma_i\) for the bad players and determine the type of execution. We note that the maliciously secure OT-based MtA protocol from [12] also supports input extraction, making it suitable for achieving full simulatability in our protocol.

### 6.4 Deterministic Key Generation
Deterministic key generation, introduced in Bitcoin-Improvement-Proposal 32 (BIP32), allows the deterministic generation of multiple keys from a single ECDSA key. Our key sharing scheme is compatible with BIP32 public derivations, and we leave the formal security proof in this setting as future work.

### 7 Implementation, Benchmarks, and Evaluation
We have implemented both the key generation and signature generation phases of our protocol and confirmed their high efficiency and practicality. Our benchmarks, conducted on an Intel quad-core i7-6700 CPU @ 3.40GHz with 64GB of RAM, compare our protocol's performance to those of Gennaro et al. [17] and Boneh et al. [4]. All benchmarks were single-threaded, and we used C for our implementation, while [17] and [4] use Java with native C libraries for heavy arithmetic computations.

#### 7.1 Benchmarking Data Complexity
Compared to [17] and [4], our protocol reduces the amount of data transmitted. For a threshold \(t\) (i.e., \(t + 1\) participants in the signing protocol), the total data \(d\) in bytes sent and received by a given player is:
\[ d_{ours}(t) = 2,328 + t \times 5,024 \text{ Bytes} \]
In contrast, the data sent in [17] is:
\[ d_{Gennaro}(t) = (t + 1) \times 34,578 \text{ Bytes} \]
And in [4]:
\[ d_{Boneh}(t) = (t + 1) \times 38,189 \text{ Bytes} \]
For the 2-of-n case, our protocol requires \(d_{ours}(t = 1) = 3,976 \text{ B}\), whereas [12] requires 86.7 KiB for 2-of-2 signing and 106.7 KiB for 2-of-n signing. Lindellâ€™s scheme [27] requires only 769 B for 2-of-2 but does not support 2-of-n.

#### 7.2 Benchmarking Signature Generation Time
Following the methodology of [4, 17], we benchmark the raw computation time of a single player, excluding network costs. Our protocol significantly outperforms [4, 17] in this metric. The running time of our protocol is:
\[ r_{ours}(t) = 29 + t \times 24 \text{ milliseconds} \]
In comparison, [17] has:
\[ r_{Gennaro}(t) = 142 + t \times 52 \text{ milliseconds} \]
And [4] has:
\[ r_{Boneh}(t) = 397 + t \times 91 \text{ milliseconds} \]

### 8 Conclusion
We have presented a threshold ECDSA protocol that improves upon existing schemes in terms of efficiency and practicality. Despite the availability of [17], no Bitcoin services or user wallets offer threshold-signature security, likely due to the impracticality of their distributed key generation. Our new scheme, with a highly efficient distributed key generation protocol, reduces running time and data transferred, making ECDSA threshold signatures mature enough for adoption.

### 9 Acknowledgements
We thank Harry Kalodner, Yehuda Lindell, Ariel Nof, Ben Riva, and Omer Shlomovits for their valuable feedback and discussions. Rosario Gennaro is supported by NSF Grant 1565403, and Steven Goldfeder is supported by an NSF Graduate Research Fellowship under grant number DGE 1148900 and NSF award CNS-1651938.

### References
[References listed as provided in the original text]

### A. ZK Proofs for the MtA Protocol
This section describes the zero-knowledge (ZK) proofs required in the MtA protocol. The proofs are based on similar ones from [29], but are simpler. The Verifier uses an auxiliary RSA modulus \(\tilde{N}\), which is the product of two safe primes \(\tilde{P} = 2\tilde{p} + 1\) and \(\tilde{Q} = 2\tilde{q} + 1\), with \(\tilde{p}, \tilde{q}\) being primes. The Verifier also uses two values \(h_1, h_2 \in \mathbb{Z}_{\tilde{N}}^*\) according to the commitment scheme in [14]. Security is based on the assumption that the Prover cannot solve the Strong RSA problem over \(\tilde{N}\).

#### A.1 Range Proof
This proof is executed by Alice (the initiator) in both MtA and MtAwc protocols. The input for this proof includes a Paillier public key \(N\), \(\Gamma\), and a value \(c \in \mathbb{Z}_{N^2}\). The Prover knows \(m \in \mathbb{Z}_q\) and \(r \in \mathbb{Z}_N^*\) such that \(c = \Gamma^m r^N \mod N^2\), where \(q\) is the order of the DSA group.

- **Prover:**
  - Selects \(\alpha \in_R \mathbb{Z}_{q^3}\), \(\beta \in_R \mathbb{Z}_N^*\), \(\gamma \in_R \mathbb{Z}_{q^3 \tilde{N}}\), and \(\rho \in_R \mathbb{Z}_{q \tilde{N}}\).
  - Computes \(z = h_1^{\rho} h_2^{\gamma} \mod \tilde{N}\), \(u = \Gamma^\alpha \beta^N \mod N^2\), and \(w = h_1^\alpha h_2^\gamma \mod \tilde{N}\).
  - Sends \(z\), \(u\), and \(w\) to the Verifier.

- **Verifier:**
  - Selects a challenge \(e \in_R \mathbb{Z}_q\) and sends it to the Prover.
  - The Prover computes \(s = r^e \beta \mod N\), \(s_1 = em + \alpha\), and \(s_2 = e\rho + \gamma\) and sends \(s\), \(s_1\), and \(s_2\) to the Verifier.
  - The Verifier checks that \(s_1 \leq q^3\), \(u = \Gamma^{s_1} s^N c^{-e} \mod N^2\), and \(h_1^{s_1} z^{-e} = w \mod \tilde{N}\).