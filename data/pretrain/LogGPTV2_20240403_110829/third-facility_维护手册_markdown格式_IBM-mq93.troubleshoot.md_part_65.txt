MQ Bridge to Salesforce.
3.Optional: You can achieve finer control over the exact trace by creating the IBM MQ classes for JMS
configuration file. For more information, see “Tracing IBM MQ classes for JMS applications” on page
426 and follow the advice that is provided by your IBM service support representative.
Related tasks
Running the IBM MQ Bridge to Salesforce
Monitoring the IBM MQ Bridge to Salesforce
“Collecting troubleshooting information for IBM Support” on page 302
When you open a case with IBM, you can include additional IBM MQ troubleshooting information
(MustGather data) that you have collected to help with investigating the problem. In addition to the
information described in this section, IBM Support might request further information on a case by case
basis.
Related reference
runmqsfb (run IBM MQ Bridge to Salesforce)
Tracing the IBM MQ Console
The trace facilities in the IBM MQ Console are provided to help IBM staff to diagnose customer problems.
Various properties control the behavior of these facilities.
Before you begin
Include the following files and directories when you gather diagnostic information for IBM Service:
• The mqweb.xml file.
• The contents of the directory that contains the mqweb server definition:
– MQ_DATA_PATH/web/installations/installationName
– The directory that was specified when the crtmqweb script ran to create the mqweb
server definition. By default, this directory is /var/mqm/web/installation1.
About this task
The IBM MQ Console consists of:
• JavaScript, which runs inside a browser.
• Back end code, written in Java, which runs inside the mqweb server.
You can trace the JavaScript running inside a browser, as well as the back end code and JavaScript
simultaneously.
The browser trace is output only from the browser that it is enabled in. After you log out of the IBM MQ
Console, trace is automatically disabled.
416 Troubleshooting and Support for IBM MQ
Procedure
• To trace the IBM MQ Console back end code that runs in the mqweb server:
a)
On z/OS, ensure that the WLP_USER_DIR environment variable is set. If necessary, you can set the
variable by entering the following command:
export WLP_USER_DIR=WLP_user_directory
Where WLP_user_directory is the name of the directory that is passed to crtmqweb. For
example, export WLP_USER_DIR=/var/mqm/web/installation1
b)Enter the following command on the command line:
setmqweb properties -k traceSpec -v
"*=info:com.ibm.mq*=all:com.ibm.mq.rest*=all:js.mq*=all"
c)To start tracing in the IBM MQ web server:
a.Start the mqweb server.
b.Bring up a browser, and log into the IBM MQ Console.
c.Modify the URI that is being used to access the IBM MQ Console, so that it includes the string
?trace=true
as shown in the following example:
Original URI: https://localhost:9443/ibmmq/console/#/
New URI: https://localhost:9443/ibmmq/console/?trace=true#/
d)To turn trace off, modify the URI and remove the string:
?trace=true
• To trace the IBM MQ Console JavaScript running inside a browser:
a)
On z/OS, ensure that the WLP_USER_DIR environment variable is set. If necessary, you can set the
variable by entering the following command:
export WLP_USER_DIR=WLP_user_directory
Where WLP_user_directory is the name of the directory that is passed to crtmqweb. For
example, export WLP_USER_DIR=/var/mqm/web/installation1
b)Enter the following command on the command line:
setmqweb properties -k traceSpec -v "*=info:js.mq*=all"
c)To start tracing in the IBM MQ web server:
a.Start the mqweb server.
b.Bring up a browser, and log into the IBM MQ Console.
c.Modify the URI that is being used to access the IBM MQ Console, so that it includes the string
?trace=true
as shown in the following example:
Original URI: https://localhost:9443/ibmmq/console/#/
New URI: https://localhost:9443/ibmmq/console/?trace=true#/
d)To turn trace off, modify the URI and remove the string:
IBM MQ troubleshooting and support 417
?trace=true
• To trace the IBM MQ Console back end code and JavaScript running inside a browser:
a)
On z/OS, ensure that the WLP_USER_DIR environment variable is set. If necessary, you can set the
variable by entering the following command:
export WLP_USER_DIR=WLP_user_directory
Where WLP_user_directory is the name of the directory that is passed to crtmqweb. For
example, export WLP_USER_DIR=/var/mqm/web/installation1
b)Enter the following command on the command line:
setmqweb properties -k traceSpec -v
"*=info:com.ibm.mq*=all:com.ibm.mq.rest*=all:js.mq*=all"
c)To start tracing in the IBM MQ web server:
a.Start the mqweb server.
b.Bring up a browser, and log into the IBM MQ Console.
c.Modify the URI that is being used to access the IBM MQ Console, so that it includes the string
?trace=true
as shown in the following example:
Original URI: https://localhost:9443/ibmmq/console/#/
New URI: https://localhost:9443/ibmmq/console/?trace=true#/
d)To turn trace off, modify the URI and remove the string:
?trace=true
Results
Trace is output to a set of files. The directory where the trace files are created is:
• MQ_DATA_PATH/web/installations/installationName/servers/mqweb/logs
• The subdirectory /servers/mqweb/logs beneath the directory that was specified
when the crtmqweb script ran to create the mqweb server definition. By default, this directory
is /var/mqm/web/installation1.
The active file is called trace.log. Historical trace is kept in files that are called
trace_timestamp.log. The size of these trace files, and the number of historical files that are kept
can be configured by setting the maxTraceFileSize and maxTraceFiles variables. By default, the
maximum trace file size is 20 MB, and the maximum number of trace files is 2. For more information, see
Configuring logging.
Example
An example of the trace information generated by the IBM MQ Console JavaScript code running inside a
browser is shown in the following text:
[18/08/20 14:34:13:880 BST] 00000050 trace-patcher 1 js.mq.mq.lib.service.trace-patcher patchFn
DATA [18/08/20 14:34:10:472 BST] User:[mqadmin] (@static) "Patching -> i.componentDidMount"
[18/08/20 14:34:13:880 BST] 00000050 trace-patcher 1 js.mq.mq.lib.service.trace-patcher patchFn
DATA [18/08/20 14:34:10:472 BST] User:[mqadmin] (@static) "Patching -> i.componentWillUnmount"
[18/08/20 14:34:13:880 BST] 00000050 trace-patcher 1 js.mq.mq.lib.service.trace-patcher patchFn
DATA [18/08/20 14:34:10:472 BST] User:[mqadmin] (@static) "Patching -> i._getTopicsData"
[18/08/20 14:34:13:880 BST] 00000050 trace-patcher 1 js.mq.mq.lib.service.trace-patcher patchFn
DATA [18/08/20 14:34:10:472 BST] User:[mqadmin] (@static) "Patching -> i._showCreateTopic"
418 Troubleshooting and Support for IBM MQ
[18/08/20 14:34:13:880 BST] 00000050 trace-patcher 1 js.mq.mq.lib.service.trace-patcher patchFn
DATA [18/08/20 14:34:10:472 BST] User:[mqadmin] (@static) "Patching -> i._showDeleteTopic"
[18/08/20 14:34:13:881 BST] 00000050 trace-patcher 1 js.mq.mq.lib.service.trace-patcher patchFn
DATA [18/08/20 14:34:10:472 BST] User:[mqadmin] (@static) "Patching -> i._showTopicDetails"
[18/08/20 14:34:13:881 BST] 00000050 trace-patcher 1 js.mq.mq.lib.service.trace-patcher
patchFn DATA [18/08/20 14:34:10:472 BST] User:[mqadmin] (@static) "Patching ->
i._showCreateSubscription"
[18/08/20 14:34:13:881 BST] 00000050 trace-patcher 1 js.mq.mq.lib.service.trace-patcher patchFn
DATA [18/08/20 14:34:10:472 BST] User:[mqadmin] (@static) "Patching -> i.render"
Related concepts
Administration using the IBM MQ Console
Related tasks
“Collecting troubleshooting information for IBM Support” on page 302
When you open a case with IBM, you can include additional IBM MQ troubleshooting information
(MustGather data) that you have collected to help with investigating the problem. In addition to the
information described in this section, IBM Support might request further information on a case by case
basis.
Tracing errors in IBM MQ Internet Pass-Thru
IBM MQ Internet Pass-Thru (MQIPT) provides a detailed execution trace facility, which is controlled by the
Trace property.
About this task
Trace files are written to the mqipt_home\errors directory (where mqipt_home is the MQIPT home
directory, which contains mqipt.conf). Each trace file produced has a name with the following format:
AMQyyyymmddnnnnnnnnn.n.TRC.v
where the suffix v is an integer that denotes the position of the trace file in the rotating set of files. When
the size of the current trace file reaches the maximum trace file size, it is closed and renamed, and a
new trace file is opened. The current trace file has the suffix 0. Older trace files have successively larger
integer suffixes.
Unexpected fatal errors are written as FFST records in an error log file located in the
mqipt_home\errors directory. The FFST files have the following format:
AMQyyyymmddnnnnnnnnn.n.FDC
Procedure
To enable trace, add the Trace configuration property to the appropriate section in the mqipt.conf file.
The Trace property can be either be specified in the [route] section of each route that you want to
trace, or specified in the [global] section. The value of the Trace property in the [global] section
is inherited by all routes that do not specify a Trace property. The amount of
data in network transmissions received and sent by a route that is traced can be configured using the
TraceUserData property.
From IBM MQ 9.3.2, the maximum size of the trace files, and the maximum number of trace
files that are kept, can be configured using the TraceFileSize and TraceFileCount properties in the
[global] section of the mqipt.conf file.
Related tasks
“Troubleshooting IBM MQ Internet Pass-Thru problems” on page 90
There are a number of steps you can follow to help determine the nature of any problems you might
encounter when using IBM MQ Internet Pass-Thru (MQIPT).
“Collecting information for MQIPT problems” on page 339
IBM MQ troubleshooting and support 419
If you need to report a problem with MQIPT to IBM Support, send relevant information that will help to
resolve the problem more quickly.
Tracing errors in mqiptKeyman and mqiptKeycmd
The mqiptKeycmd and mqiptKeyman commands have an execution trace facility which can diagnose
errors in the certificate management tools.
Before you begin
The user running the certificate management tool must have permission to create files in the current
working directory, otherwise the command fails with an error.
Procedure
1.To enable trace for these commands, set the following environment variable before running the
mqiptKeycmd or mqiptKeyman command:
• On AIX and Linux systems:
MQIPT_JVM_OPTIONS="-Dkeyman.debug=true -Dkeyman.logging=true"
export MQIPT_JVM_OPTIONS
• On Windows systems:
set MQIPT_JVM_OPTIONS=-Dkeyman.debug=true -Dkeyman.logging=true
A trace file is created in the current working directory. The trace file name has the following format:
debugTrace.n
where n is an incrementing number starting at 0.
2.After you have finished recording trace logs, unset the environment variable.
Tracing user-defined security exits
To help diagnose problems in a user-defined security exit, you can enable a trace facility, similar to that
used by MQIPT.
Enable tracing by setting the route Trace property to a value in the range 1 - 5. See the entry for Trace in
MQIPT route properties.
There will probably be more than one instance of the security exit running at the same time so individual
entries in the trace file can be identified by using the thread identifier.
The tracing functions are initialized by MQIPT when the security exit is started; all you have to do is
choose what information you want to trace. There are many tracing examples in the sample user exits.
See Security exits.
The minimum requirements for tracing are an entry call, an exit call, and the data that you want to
trace. For example:
/**
* This method is called to initialize the exit (for example, for
* loading validation information) and place itself in a ready
* state to validate connection requests.
*/
public int init(IPTTrace t) {
final String strMethod = "CustomExit.init";
// Trace entry into this method
420 Troubleshooting and Support for IBM MQ
t.entry(strMethod);
// Trace useful information
t.data(strMethod, "Starting exit - MQIPT version " + getVersion());
// Perform initialization and load any data
t.data(strMethod, "Ready for work");
// Trace exit from this method
t.exit(strMethod);
return 0;
}
Tracing IBM MQ .NET applications
There are several different ways to enable trace for IBM MQ .NET applications. You normally need to use
the trace facility only at the request of IBM Support.
About this task
If you are using IBM MQ classes for .NET Framework, you can turn on tracing and configure the trace
settings in the following ways:
• For a full installation of IBM MQ, by using the strmqtrc command to enable trace for IBM MQ
classes for .NET Framework. For more information, see “Tracing IBM MQ classes for .NET Framework
applications using commands” on page 425.
• By using an application configuration file with a name that consists of the name of the executable
program to which the file relates, with the suffix .config. For example, the application configuration
file for text.exe would have the name text.exe.config. For more information, see “Tracing IBM MQ
classes for .NET Framework clients using an application configuration file” on page 423.
• By using the MQDOTNET_TRACE_ON environment variable. For more information, see “Tracing IBM
MQ .NET applications using environment variables” on page 422.
• By using the mqclient.ini file and setting the appropriate properties of the Trace
stanza. You can also enable and disable tracing dynamically with the mqclient.ini file. For more
information, see “Tracing IBM MQ .NET applications with mqclient.ini” on page 422.
Using an application configuration file is not supported for .NET (.NET Standard and .NET 6 libraries). If
you are using IBM MQ classes for .NET Standard (.NET Standard and .NET 6 libraries), you can configure
trace in the following ways:
• By using the MQDOTNET_TRACE_ON environment variable. For more information, see “Tracing IBM
MQ .NET applications using environment variables” on page 422.
• From IBM MQ 9.3.3, by using the mqclient.ini file and setting the appropriate
properties of the Trace stanza. You can also enable and disable tracing dynamically with the
mqclient.ini file. For more information, see “Tracing IBM MQ .NET applications with mqclient.ini”
on page 422.
Note:
For the IBM MQ .NETclient libraries built against .NET Framework, the order of precedence is as follows:
1.App.Config
2.Environment variable
3. mqclient.ini
For the IBM MQ .NET client libraries built against .NET Standard and .NET 6, the order of precedence is as
follows:
1.Environment variable
2. mqclient.ini
IBM MQ troubleshooting and support 421
Related tasks
“Contacting IBM Support” on page 301
If you need help with a problem that you are having with IBM MQ, you can contact IBM Support through
the IBM Support Site. You can also subscribe to notifications about IBM MQ fixes, troubleshooting, and
other news.
“Tracing on Windows” on page 391
On Windows, you can use the strmqtrc and endmqtrc commands to start and end tracing. You can also
use IBM MQ Explorer to start and end tracing.
“Tracing on AIX and Linux” on page 376
On AIX and Linux, you can use the strmqtrc and endmqtrc commands to start and end tracing, and
dspmqtrc to display a trace file. On AIX, you can use AIX system trace in addition to using the strmqtrc
and endmqtrc commands.
“Tracing XMS .NET applications” on page 468
If you are using IBM MQ classes for XMS .NET Framework, you can configure trace from an application
configuration file as well as from the XMS environment variables. If you are using IBM MQ classes for
XMS .NET (.NET Standard and .NET 6 libraries), you must configure trace from the XMS environment
variables. You can select the components that you want to trace. Trace is normally used under the
guidance of IBM Support.
Tracing IBM MQ .NET applications using environment variables
The environment variable MQDOTNET_TRACE_ON is used to enable trace for redistributable clients.
About this task
The MQDOTNET_TRACE_ON environment variable checks whether the IBM MQ trace directory is available
or not. If the trace directory is available, the trace file is generated in the trace directory. However, if IBM
MQ is not installed, the trace file is copied to the current working directory.
Other environment variables including MQERRORPATH, MQLOGLEVEL, MQSERVER, and so on, that are used
for IBM MQ classes for .NET Framework, can be used for IBM MQ classes for .NET Standard and .NET 6
and work in the same way.
Procedure
• To enable tracing, set the environment variable to specify the level of tracing that you want.
Values equal to and less than 0 do not enable trace, and values greater than or equal to 1 enable detail
tracing.
Related concepts
Installing IBM MQ classes for .NET
Tracing IBM MQ .NET applications with mqclient.ini
From IBM MQ 9.3.3, you can use the mqclient.ini file to enable traces for the IBM MQ .NET client
libraries.
About this task
From IBM MQ 9.3.3, the mqclient.ini file includes a Trace stanza. To enable trace, you must set the
appropriate properties of the Trace stanza. If a property is set to an invalid value, then the properties are
ignored.