### IBM MQ Bridge to Salesforce

#### Optional: Fine Control Over Tracing
For finer control over tracing, you can create an IBM MQ classes for JMS configuration file. For more information, refer to "Tracing IBM MQ classes for JMS applications" on page 426 and follow the advice provided by your IBM service support representative.

#### Related Tasks
- **Running the IBM MQ Bridge to Salesforce**
- **Monitoring the IBM MQ Bridge to Salesforce**
- **Collecting Troubleshooting Information for IBM Support** (Page 302)

When opening a case with IBM, include additional IBM MQ troubleshooting information (MustGather data) to help with problem investigation. IBM Support may request further information on a case-by-case basis.

#### Related Reference
- **runmqsfb (Run IBM MQ Bridge to Salesforce)**
- **Tracing the IBM MQ Console**

The trace facilities in the IBM MQ Console are designed to help IBM staff diagnose customer problems. Various properties control the behavior of these facilities.

### Before You Begin
Include the following files and directories when gathering diagnostic information for IBM Service:
- **mqweb.xml file**
- **Contents of the directory containing the mqweb server definition:**
  - `MQ_DATA_PATH/web/installations/installationName`
  - The directory specified when the `crtmqweb` script ran to create the mqweb server definition. By default, this is `/var/mqm/web/installation1`.

### About This Task
The IBM MQ Console consists of:
- **JavaScript**: Runs inside a browser.
- **Back-end code**: Written in Java, runs inside the mqweb server.

You can trace JavaScript running inside a browser, as well as the back-end code and JavaScript simultaneously. Browser trace is output only from the browser where it is enabled. After logging out of the IBM MQ Console, trace is automatically disabled.

### Procedure
#### To Trace the IBM MQ Console Back-End Code Running in the mqweb Server
1. **On z/OS, set the WLP_USER_DIR environment variable:**
   ```sh
   export WLP_USER_DIR=WLP_user_directory
   ```
   Replace `WLP_user_directory` with the directory name passed to `crtmqweb`. For example:
   ```sh
   export WLP_USER_DIR=/var/mqm/web/installation1
   ```

2. **Set the trace specification:**
   ```sh
   setmqweb properties -k traceSpec -v "*=info:com.ibm.mq*=all:com.ibm.mq.rest*=all:js.mq*=all"
   ```

3. **Start tracing in the IBM MQ web server:**
   - Start the mqweb server.
   - Open a browser and log into the IBM MQ Console.
   - Modify the URI to include `?trace=true`:
     - **Original URI**: `https://localhost:9443/ibmmq/console/#/`
     - **New URI**: `https://localhost:9443/ibmmq/console/?trace=true#/`

4. **To turn trace off, modify the URI and remove `?trace=true`:**
   - **Modified URI**: `https://localhost:9443/ibmmq/console/#/`

#### To Trace the IBM MQ Console JavaScript Running Inside a Browser
1. **On z/OS, set the WLP_USER_DIR environment variable:**
   ```sh
   export WLP_USER_DIR=WLP_user_directory
   ```
   Replace `WLP_user_directory` with the directory name passed to `crtmqweb`. For example:
   ```sh
   export WLP_USER_DIR=/var/mqm/web/installation1
   ```

2. **Set the trace specification:**
   ```sh
   setmqweb properties -k traceSpec -v "*=info:js.mq*=all"
   ```

3. **Start tracing in the IBM MQ web server:**
   - Start the mqweb server.
   - Open a browser and log into the IBM MQ Console.
   - Modify the URI to include `?trace=true`:
     - **Original URI**: `https://localhost:9443/ibmmq/console/#/`
     - **New URI**: `https://localhost:9443/ibmmq/console/?trace=true#/`

4. **To turn trace off, modify the URI and remove `?trace=true`:**
   - **Modified URI**: `https://localhost:9443/ibmmq/console/#/`

#### To Trace Both the IBM MQ Console Back-End Code and JavaScript Running Inside a Browser
1. **On z/OS, set the WLP_USER_DIR environment variable:**
   ```sh
   export WLP_USER_DIR=WLP_user_directory
   ```
   Replace `WLP_user_directory` with the directory name passed to `crtmqweb`. For example:
   ```sh
   export WLP_USER_DIR=/var/mqm/web/installation1
   ```

2. **Set the trace specification:**
   ```sh
   setmqweb properties -k traceSpec -v "*=info:com.ibm.mq*=all:com.ibm.mq.rest*=all:js.mq*=all"
   ```

3. **Start tracing in the IBM MQ web server:**
   - Start the mqweb server.
   - Open a browser and log into the IBM MQ Console.
   - Modify the URI to include `?trace=true`:
     - **Original URI**: `https://localhost:9443/ibmmq/console/#/`
     - **New URI**: `https://localhost:9443/ibmmq/console/?trace=true#/`

4. **To turn trace off, modify the URI and remove `?trace=true`:**
   - **Modified URI**: `https://localhost:9443/ibmmq/console/#/`

### Results
Trace is output to a set of files in the following directory:
- `MQ_DATA_PATH/web/installations/installationName/servers/mqweb/logs`
- The subdirectory `/servers/mqweb/logs` beneath the directory specified when the `crtmqweb` script ran to create the mqweb server definition. By default, this is `/var/mqm/web/installation1`.

The active file is named `trace.log`. Historical trace is kept in files named `trace_timestamp.log`. The size and number of historical files can be configured using the `maxTraceFileSize` and `maxTraceFiles` variables. By default, the maximum trace file size is 20 MB, and the maximum number of trace files is 2. For more information, see Configuring Logging.

### Example
An example of the trace information generated by the IBM MQ Console JavaScript code running inside a browser:
```plaintext
[18/08/20 14:34:13:880 BST] 00000050 trace-patcher 1 js.mq.mq.lib.service.trace-patcher patchFn
DATA [18/08/20 14:34:10:472 BST] User:[mqadmin] (@static) "Patching -> i.componentDidMount"
[18/08/20 14:34:13:880 BST] 00000050 trace-patcher 1 js.mq.mq.lib.service.trace-patcher patchFn
DATA [18/08/20 14:34:10:472 BST] User:[mqadmin] (@static) "Patching -> i.componentWillUnmount"
[18/08/20 14:34:13:880 BST] 00000050 trace-patcher 1 js.mq.mq.lib.service.trace-patcher patchFn
DATA [18/08/20 14:34:10:472 BST] User:[mqadmin] (@static) "Patching -> i._getTopicsData"
[18/08/20 14:34:13:880 BST] 00000050 trace-patcher 1 js.mq.mq.lib.service.trace-patcher patchFn
DATA [18/08/20 14:34:10:472 BST] User:[mqadmin] (@static) "Patching -> i._showCreateTopic"
[18/08/20 14:34:13:880 BST] 00000050 trace-patcher 1 js.mq.mq.lib.service.trace-patcher patchFn
DATA [18/08/20 14:34:10:472 BST] User:[mqadmin] (@static) "Patching -> i._showDeleteTopic"
[18/08/20 14:34:13:881 BST] 00000050 trace-patcher 1 js.mq.mq.lib.service.trace-patcher patchFn
DATA [18/08/20 14:34:10:472 BST] User:[mqadmin] (@static) "Patching -> i._showTopicDetails"
[18/08/20 14:34:13:881 BST] 00000050 trace-patcher 1 js.mq.mq.lib.service.trace-patcher
patchFn DATA [18/08/20 14:34:10:472 BST] User:[mqadmin] (@static) "Patching ->
i._showCreateSubscription"
[18/08/20 14:34:13:881 BST] 00000050 trace-patcher 1 js.mq.mq.lib.service.trace-patcher patchFn
DATA [18/08/20 14:34:10:472 BST] User:[mqadmin] (@static) "Patching -> i.render"
```

### Related Concepts
- **Administration Using the IBM MQ Console**
- **Collecting Troubleshooting Information for IBM Support** (Page 302)
- **Tracing Errors in IBM MQ Internet Pass-Thru**
- **Tracing Errors in mqiptKeyman and mqiptKeycmd**
- **Tracing User-Defined Security Exits**
- **Tracing IBM MQ .NET Applications**

### Related Tasks
- **Troubleshooting IBM MQ Internet Pass-Thru Problems** (Page 90)
- **Collecting Information for MQIPT Problems** (Page 339)
- **Contacting IBM Support** (Page 301)
- **Tracing on Windows** (Page 391)
- **Tracing on AIX and Linux** (Page 376)
- **Tracing XMS .NET Applications** (Page 468)
- **Tracing IBM MQ .NET Applications Using Environment Variables**
- **Tracing IBM MQ .NET Applications with mqclient.ini**

### Tracing IBM MQ .NET Applications Using Environment Variables
The `MQDOTNET_TRACE_ON` environment variable is used to enable trace for redistributable clients.

#### Procedure
- **To enable tracing, set the environment variable to specify the level of tracing:**
  - Values equal to or less than 0 do not enable trace.
  - Values greater than or equal to 1 enable detailed tracing.

### Tracing IBM MQ .NET Applications with mqclient.ini
From IBM MQ 9.3.3, you can use the `mqclient.ini` file to enable traces for the IBM MQ .NET client libraries.

#### About This Task
From IBM MQ 9.3.3, the `mqclient.ini` file includes a `Trace` stanza. To enable trace, set the appropriate properties of the `Trace` stanza. If a property is set to an invalid value, the properties are ignored.