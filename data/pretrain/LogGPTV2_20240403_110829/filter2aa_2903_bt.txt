等）除了支持Core Solo和Core Duo处理器所引入的架构性能监视机制
外，还提供了以下性能监视设施。
（1）3个固定功能计数器，名为MSR_PERF_FIXED_CTR0～
MSR_PERF_FIXED_CTR2，地址为0x309～0x30A。这3个计数器分
别用来专门监视以下3个事件：INSTR_RETIRED. ANY、
CPU_CLK_UNHALTED.CORE和CPU_CLK_UNHALTED. REF。启
用这3个计数器不需要设置任何事件选择寄存器
（IA32_PERFEVTSELx），只需要设置一个新引入的
MSR_PERF_FIXED_CTR_CTRL寄存器。
（2）3个全局的计数器控制寄存器，用于简化频繁使用的操作。
MSR_PERF_GLOBAL_CTRL：用于启用或禁止计数器，每个二进
制位（保留位除外）对应一个专用的
（MSR_PERF_FIXED_CTRx）或通用的性能计数器。将某一位设
置为1便启用对应的计数器，清0便停止计数。因此通过这个寄存
器，只要使用一条WRMSR指令便可以控制多个计数器。
MSR_PERF_GLOBAL_STATUS：用于读取计数器的溢出状态，每
个二进制位对应一个计数器或一种状态。通过这个寄存器，只要使
用一条RDMSR指令便可以读到多个计数器及PEBS缓冲区的当前状
态。
MSR_PERF_GLOBAL_OVF_CTRL：用于清除计数器或缓冲区的溢
出标志，位定义与MSR_PERF_GLOBAL_STATUS相对应。
5.5.6 资源
如何利用硬件设施编写性能监控软件这一话题超出了本书讨论的范
围，感兴趣的读者可以参考以下开源项目或工具。
Brinkley Sprunt的Brink and Abyss项目，用于Linux。
Don Heller的Rabbit（A Performance Counters Library）项目
（Linux）。
Mikael Pettersson的perfctr（Linux下的x86性能监视计数器驱动）。
美国田纳西大学ICL实验室的PAPI（Performance Application
Programming Interface）项目（支持Windows和Linux）。
PCL（Performance Counter Library）项目（支持Linux和Solaris等操
作系统）。
英特尔公司的VTune工具（VTune Performance Analyzer）。
在性能优化方面，另一个宝贵的资源就是IA手册中的优化手册，全
称为Intel® 64 and IA-32 Architectures Optimization Reference Manual。感
兴趣的读者可以从英特尔公司的网站下载它的电子版本。
5.6 实时指令追踪
2012年8月，作者有幸参加了英特尔公司内部的DTTC（Design and
Test Technology Conference）大会。即使对于英特尔的员工来说，这也
是个神秘的会议，因为会议上讨论的大多都是关乎公司命运的CPU核心
技术。在那次会议上，我在一个分会场里第一次听到了实时指令追踪
（Real Time Instruction Trace，RTIT）技术，来自以色列的演讲者带着
自豪感介绍这项新的调试技术，几次提到它的先进性，号称具有划时代
意义。
DTTC上的几乎所有内容都是要保密的，尤其是处于研发阶段尚未
发布的技术，所以我虽然很早就知道了RTIT，但是在任何场合也不可
以随便说，即使对公司里的同事。
从2013年下半年开始，支持RTIT技术的SoC产品和工具陆续推出。
2014年7月关于RTIT的专利公布[3]。2015年，支持RTIT的酷睿芯片推
出，支持RTIT的Linux内核驱动发布。至此，RTIT技术彻底揭开神秘的
面纱。
公开后的RTIT技术有个商业化的名字，称为英特尔处理器追踪技
术（Intel® Processor Trace），简称Intel PT。在IA手册中，大多数地方
使用的都是Intel PT，但也有个别地方，比如MSR寄存器名，还保留着
旧名字RTIT。本书将混用这两个名字，视作等价。
5.6.1 工作原理
与之前介绍过的BTS技术相比，RTIT的最大特点是副作用
（overhead）小。在英特尔的官方资料中，称其对性能的影响低于5%。
RTIT是如何降低副作用的呢？最主要的方法是将RTIT逻辑分离出来，
让其成为一个单独的组件，专司其职。在来自RTIT专利[4]的图5-15中，
很容易可以看出这一特征。
图5-15中，左侧是处理器芯片（广义上的CPU），其中的RTIT
LOGIC 109便代表RTIT单元，它左侧的方框代表0～N个逻辑CPU。右侧
的大方框代表内存，内部靠上的方框代表软件（操作系统、应用程序
等），下面的方框代表RTIT数据。
RTIT专利的正文特别说明，RTIT有两种输出模式：一种是图5-15
所示的将监视数据写到内存中的专用区域中，我们不妨将其称为内存模
式；另一种是将监视数据输出到所谓的追踪传输子系统（Trace
Transport Subsystem）——该子系统会根据系统的硬件配置将信息传送
给外部硬件，比如专业的追踪工具。IA手册没有给后一种模式取名字，
在描述RTIT的控制寄存器IA32_RTIT_CTL时，启用后一种模式的位域
称为FabricEn。因此我们就把它称为互联（Fabric）模式。
图5-15 RTIT结构图（来自英特尔公司的RTIT专利）
在使用内存模式时，根据内存区的多少又分两种方式：一种是使用
一块连续的内存区，称为单区域输出（Single-Range Output）；另一种
是输出到多个长度可以不同的内存区中，这些内存区的物理地址以指针
表的形式关联到一起，所以这种方式称为物理地址表（Table of Physical
Addresses）输出，简称ToPA输出。
寄存器IA32_RTIT_OUTPUT_BASE是配置RTIT数据区位置的关键
寄存器，使用单内存区时，它存放的便是RTIT数据区的物理地址。如
果使用ToPA输出，那么它存放的是第一个物理地址表的物理地址。
5.6.2 RTIT数据包
RTIT的追踪数据是以包（packet）的形式来组织和传输的。每个数
据包都有固定的类型和格式，以头信息（header）开始，后面跟随长度
不等的负载（payload）。
目前定义了的包类型有14种，分为如下4类，见表5-1。
表5-1 RTIT的数据包
类
别
包  名
描  述
基
本
信
息
包数据流边界（Packet
Stream Boundary），简称
PSB
以固定间隔（比如每4KB追踪数据）产生，既有心
跳作用，又有分界作用，解码包时总是应该从PSB
包开始
页表信息包（Paging
Information Packet），简
称PIP
报告CR3寄存器变化，追踪工具可以根据这个信息
得到当前进程信息和翻译线性地址
时间戳计数器（Time-
Stamp Counter），简称
TSC
辅助标注时间
处理器核心的总线比率
（Core Bus Ratio），简
称CBR
报告CPU核心的总线时钟比率（bus clock ratio）
溢出（Overflow），简称
OVF
报告内部缓冲区用完，通知有包丢失
控
制
流
程
分支与否（Taken Not-
Taken），简称TNT
报告条件分支指令的执行方向，是做了跳转（称
Taken），还是没有（Not-taken）
目标IP包，简称TIP
报告因为异常、中断或者其他间接分支跳转时的目
标IP（程序指针）
流程更新包（Flow
Update Packets），简称
FUP
对于中断、异常或者其他不能断定分支跳转的来源
IP地址的异步事件，报告源IP地址
执行模式（MODE）包
报告处理器的执行信息，包括执行模式等
软
件
插
入
PTWRITE包，简称PTW
软件通过PTWRITE指令插入的数据
电
源
管
MWAIT包
成功通过MWAIT指令进入深度大于C0的睡眠状态
进入省电状态（Power
State Entry）包，简称
PWRE
进入深度大于C0的睡眠状态
退出省电（Power State
理
Exit）状态包，简称
PWRX
退出深度大于C0的睡眠状态
执行停止（Execution
Stopped）包，简称
EXSTOP
因为进入省电状态等原因而停止执行软件
从表5-1可以看出，RTIT机制给追踪工具提高了非常丰富的信息，
不仅有详细的执行流程，还有关于CPU状态的变化情况。特别值得一提
的是，应用程序还可以利用PTWRITE指令插入一个PTW包——
PTWRITE指令支持一个操作数，可以是应用程序指定的任何内容。利
用这一机制，我们就可以在被调优的软件中插入特殊的代码，向优化工
具输出一个特殊的数据，“打印”一条信息到RTIT数据流中。PTW包的
格式如图5-16所示，第一行是二进制位的位数，下面的每一行代表一个
字节。已经填写了0或者1的位表示那些位是固定的包头信息，字节1的
IP位如果为1，则表示在这个PTW包后面后跟随一个FUP包，后者会包
含程序指针信息。PayloadBytes字段用来表示负载数据的长度，0b00表
示负载数据的长度是4字节，0b01表示8字节。
图5-16 PTW包的格式
不是所有IA CPU都支持RTIT的所有功能，应该使用CPUID指令的
（EAX=14H,ECX=0）分支来检测具体的支持情况。比如在作者写作使
用的i5-7200 CPU上的检测结果为：
Input=0x14:0x0, EAX=0x1, EBX=0xf, ECX=0x7, EDX=0x0
返回结果中的EAX为1代表可以继续通过（EAX=14H,ECX=1）来
继续检测RTIT的能力，EBX中的0xF表示支持CR3过滤（bit 0）、支持
可配置的PSB（Packet Stream Boundary）（bit 1）、支持IP过滤（bit
2）以及支持MTC（Mini time Counter）（bit 3），但是不支持
PTWRITE（bit 4为0）。
5.6.3 Linux支持
Linux的4.1内核最先包含了RTIT驱动，名字叫作Intel(R) Processor
Trace PMU driver for perf，简称perf intel-pt，源程序文件名为
perf_event_intel_pt.c。但是perf的用户态工具是从Linux 4.3开始支持
RTIT的。
根据perf intel-pt的主要开发者Adrian Hunter（英特尔工程师）在
2015年Tracing Summit大会上所做的报告，perf intel-pt有以下几种工作
模式。
全程追踪（full trace）模式：连续追踪，将追踪信息写到磁盘中。
快照（snapshot）模式：使用环形缓冲区记录追踪数据，当配置的
事件发生时便停止追踪。
采样模式：也是使用环形缓冲区记录追踪数据，当采样事件发生
时，提取出采样点前后的追踪信息。
内存转储（core dump）模式：使用rlimit启用，追踪数据写到环形
缓冲区，当发生崩溃时，将追踪数据写到转储文件。
前两种模式当时已经支持，后两种为计划支持。
著名的GDB调试器从7.10版本开始支持RTIT，利用强大的RTIT机
制来实现反向单步（reverse-step）。GDB是通过perf接口和perf intel-pt
驱动通信，因此不需要额外的驱动。在GDB源代码包中，btrace.h和