### Module 1: From High-Level Languages to Running Processes

**Overview:**
- This module explores the journey from high-level programming languages, through assembly, to the running process.
- For more details, refer to: [GitHub Repository](https://github.com/hasherezade/malware_training_vol1)

### WoW64: Running 32-bit Applications on 64-bit Windows

#### Basics of WoW64
- **Backward Compatibility:** WoW64 (Windows-on-Windows 64) allows 32-bit applications to run on 64-bit Windows.
- **Isolation:** 32-bit applications must be isolated from the 64-bit environment.
- **Subsystem:** WoW64 is a special subsystem that provides the necessary 32-bit environment on a 64-bit Windows system.

#### Key Components
- **SysWow64 Directory:** Contains 32-bit equivalents of the DLLs found in the System32 directory.
- **Ntoskrnl.exe:** Only has a 64-bit version on 64-bit systems.
- **Loaded 64-bit DLLs in 32-bit Processes:**
  - **WoW64Cpu.dll:** Emulates 32-bit code on a 64-bit processor.
  - **Wow64.dll:** Provides core emulation infrastructure and thunks to Ntoskrnl.exe entry-point functions.
  - **Wow64Win.dll:** Thunks to Win32k.sys entry-point functions.
  - **Ntdll.dll (64-bit version):** Loaded in every 32-bit process running under WoW64.

#### NTDLL in 32-bit and 64-bit Processes
- Each 32-bit process running under WoW64 has two versions of NTDLL:
  - **32-bit version:** Located in SysWow64.
  - **64-bit version:** Located in System32.

#### Process Structure
- **32-bit Process:**
  - **MyApp.exe (32-bit)**
  - **Kernel32.dll (32-bit)**
  - **Ntdll.dll (32-bit)**
  - **Ntdll.dll (64-bit)**
  - **Wow64Cpu.dll (64-bit)**
  - **Wow64Win.dll (64-bit)**
  - **Wow64.dll (64-bit)**
  - **32-bit TEB and PEB**

- **64-bit Process:**
  - **MyApp.exe (64-bit)**
  - **Kernel32.dll (64-bit)**
  - **NtosKrnl (kernel)**
  - **Syscalls**
  - **Pass-through Emulation**
  - **64-bit TEB and PEB**

#### PE-sieve Example
- **Scan demo_1.exe with PE-sieve:**
  - **64-bit version:** Can access both 32-bit and 64-bit modules.
  - **32-bit version:** Can only access 32-bit modules.

### WoW64 as a Sandbox
- **Comparison to a Sandbox:**
  - **32-bit process** runs within a **64-bit wrapper process**.
  - **Isolation Mechanism:**
    - Different code segment addresses for 32-bit (0x23) and 64-bit (0x33) code execution.
    - **RET (Return):** Uses address and implicit (default) segment.
    - **RETF (Far Return):** Uses address and explicit segment.

### Breaking Isolation: Heaven’s Gate
- **Technique Description:**
  - First described by Roy G Biv.
  - **Changing Segment:** Allows the use of 64-bit registers and 64-bit code.
  - **Additional Steps:**
    - Obtain the handle to the 64-bit version of NTDLL using the 64-bit PEB.
    - Load other 64-bit DLLs to use 64-bit API.

#### Implementation
- **Wow64Ext Library by Rewolf:**
  - [GitHub Repository](https://github.com/rwfpl/rewolf-wow64ext/)
- **Real-Life Example:**
  - A coin miner using Heaven’s Gate.
  - [Malwarebytes Blog Post](https://blog.malwarebytes.com/threat-analysis/2018/01/a-coin-miner-with-a-heavens-gate/)

### Further Readings
- **WOW64 Subsystem Internals and Hooking Techniques:**
  - By Stephen Eckels from FireEye.
  - [FireEye Blog Post](https://www.fireeye.com/blog/threat-research/2020/11/wow64-subsystem-internals-and-hooking-techniques.html)