Module 1
A journey from high level languages, through 
assembly, to the running process
https://github.com/hasherezade/malware_training_vol1
Wow64: 32 bit PE on 64 bit 
Windows
WoW64: basics
• Backward compatibility: running 32 bit applications on 64 bit Windows
• 32 bit application must be isolated from the 64 bit evironment
• WoW64 is a special subsystem that provides the 32 bit environment on Windows 64 bit
WoW64: basics
• SysWow64 contains 32 bit equivalents of the DLLs that can be found in System32:
WoW64: basics
• But Ntoskrnl.exe has only one version – native (64 bit on 64 bit system)
WoW64: basics
• The following 64 bit DLLs are loaded in every 32 bit process runing on Wow64:
• WoW64Cpu.dll – an emulator to run 32 bit code on 64 bit processor
• Wow64.dll – core emulation infrastructure, thunks to Ntoskrnl.exe entry-point functions
• Wow64Win.dll – thunks to Win32k.sys entry-point functions
• Ntdll.dll (64bit version)
WoW64: basics
• Each 32 bit process runing on Wow64 has 2 versions of NTDLL
• 32-bit (from SysWow64) and 64 bit (from System32)
NTDLL.DLL (32 bit version)
NTDLL.DLL (64 bit version)
WoW64: basics
MyApp.exe (32-bit)
Kernel32.dll (32-bit)
Ntdll.dll (32-bit)
Ntdll.dll (64bit)
Wow64Cpu,dll (64-bit)
Wow64Win,dll
(64-bit)
MyApp.exe (64-bit)
Kernel32.dll (64-bit)
NtosKrnl (kernel)
Syscalls
Pass through emulation
32 bit TEB
32 bit PEB
64 bit TEB
64 bit PEB
64 bit TEB
64 bit PEB
Wow64,dll
(64-bit)
Win32k.sys
WoW64: basics
• Try scanning a demo_1.exe with PE-sieve: 64 bit version, and then 32 bit version
• Observe that:
• The 32 bit version can access only the 32 bit modules
• The 64 bit version can access both 32 and 64 bit modules
WoW64
• Wow64 can be compared to a Sandbox
32 bit process 
64 bit wrapper process
64 bit process
WoW64
• How to break this isolation?
32 bit process 
64 bit wrapper process
64 bit process
?
?
How is the isolation made?
• The 32 bit and 64 bit code execution is accessible via different address of the code 
segment
• 32 bit: 0x23
• 64 bit: 0x33
• How to chage the segment?
• Typical return ( RET ): uses address and implicit (default) segment
• Far return ( RETF ): uses address and explicit segment
Heaven’s Gate
• A technique described first by Roy G Biv
Heaven’s Gate
• Changing segment allows to use 64 bit registers and use the 64 bit 
code
• Still, we need more work:
• Get the handle to the 64 bit version of NTDLL
• How? Using the 64 bit PEB!
• Load other 64 bit DLLs with its help, in order to be able to use the 64 bit 
API
Heaven’s Gate in action
• Implemented by Rewolf’s Wow64Ext library
• https://github.com/rwfpl/rewolf-wow64ext/
• Let’s have a look at the real-life example: a miner with a Heaven’s Gate
• https://blog.malwarebytes.com/threat-analysis/2018/01/a-coin-miner-with-a-heavens-gate/
Further readings...
• WOW64 Subsystem Internals and Hooking Techniques – by Stephen Eckels from FireEye:
• https://www.fireeye.com/blog/threat-research/2020/11/wow64-subsystem-internals-and-
hooking-techniques.html