flippedTime
 flippedTime
flippedTime 
、….i-1，只需要分别看这些窗口有没有翻转就
=
=
L
2
1
0
L
1
---
## Page 959
解题思路
A2[i]。
返回 A 的正方形排列的数目。两个排列 A1 和 A2 不同的充要条件是存在某个索引i，使得 A1[i]!=
给定一个非负整数数组A，如果该数组每对相邻元素之和是一个完全平方数，则称这一数组为正方形数
题目大意
Note:
Example 2: 
Example 1: 
if and only if there is some index i such that A1[i] != A2[i] .
Return the number of permutations of A that are squareful. Two permutations A1 and A2 differ
 elements, their sum is a perfect square.
 Given an array A of non-negative integers, the array is squareful if for every pair of adjacent
996. Number of Squareful Arrays
题目
·思路和第 47题完全一致，只不过增加判断相邻两个数字之和为完全平方数的判断，注意在 DFS 的
·这一题是第 47题的加强版。第 47题要求求出一个数组的所有不重复的排列。这一题要求求出一
2. 0 〇&!checksquare(nums[i]+p[len(p)-1]）{//关键的剪枝条件
if i>O && nums[i]== nums[i-1]&&！（*used)[i-1]{// 这里是去重的关键逻辑
if !checksquare(p[i] + p[i+i]] {
(*used)[i] = true 
*res = append(*res, temp)
copy(temp，p)
temp := make([]int, len(p))
continue
 continue
break 
 checksquareful = false 
]int{}，[][]int{}
---
## Page 961
Example 1: 
Return the number of pawns the rook can capture in one move.
rooks cannot move into the same square as other friendly bishops.
board, or captures an opposite colored pawn by moving to the same square it occupies. Also,
west, and south), then moves in that direction until it chooses to stop, reaches the edge of the 
The rook moves as in the rules of Chess: it chooses one of four cardinal directions (north, east,
characters represent white pieces, and lowercase characters represent black pieces. 
bishops, and black pawns. These are given as characters 'R', '','B', and 'p' respectively. Uppercase 
On an 8 x 8 chessboard, there is one white rook. There also may be empty squares, white 
题目
999. Available Captures for Rook
func  checksquare(num int) bool {
return false
tmp := math.Sqrt(float64(num))
return
 return true 
(*used)[i] = false
p = p[:len(p)-1] 
generatePermutation996(nums, index+1, p, res, used)
---
## Page 962
Example 2: 
Output: 3 
2
3
5
9
8
Explanation:
Input:
=
=
e
1]
=
L
InE
P
L
+
6
---
## Page 963
Example 3:
Bishops are blocking the rook to capture any pawn
Explanation:
Output: 0
?
S
9
Input:
8
""p""
"p"
e
[[".",
"p"
"p"
"B"
"
"'B"
IC
n
IG
ILE
IG
P
IC
D
+
"p"
6
---
## Page 964
题目大意
Note:
2
3
S
9
8
2i
The rook can capture the pawns at positions b5, d6 and f5.
Explanation:
=
=
 There is exactly one cell with board[i] [j] ==
board[i][j] is either 'R', C.', 'B', or 'p'
board.length == board[i].length == 8
=
"p"
"p"
U
IG
InE
'R'
e
'n
IG
6
---
## Page 965
代码
解题思路
子数）
你现在可以控制车移动一次，请你统计有多少敌方的卒处于你的捕获范围内（即，可以被一步捕获的棋
一，然后一直向选定的方向移动，直到满足下列四个条件之一：
是白棋，小写字符表示的是黑棋。车按国际象棋中的规则移动。东，西，南，北四个基本方向任选其
的象（Bishop）以及黑色的卒（pawn），
在一个 8×8的棋盘上，有一个白色的车（Rook），
·简单题，按照国际象棋车的移动规则，4个方向分别枚举即可。
func caputure(board [][]byte, x, y int, bx, by int) int {
·按照国际象棋的规则移动车，要求输出只移动一次，有多少个卒在车的捕获范围之内
!='B'{
func numRookcaptures(board [][]byte) int {
package leetcode
 return 0
for x >= 0 & x= 0 & y qe"(oq. + qe +. )qpqee.. (. + qe. +. ).qe.“4
11
func isvalid1003(s string) bool {
package leetcode 
'a'{
for i := O; i  1 && stack[len(stack)-1] == 'b' && stack[len(stack)-2]
} else{ 
else {
} else{
if len(stack) > 0 && stack[len(stack)-1] == 'a' { 
stack = stack[:len(stack)-2]
 stack = append(stack, s[i])
return false
return false
---
## Page 970
代码
按照滑动窗口的思路处理即可，不断的更新和维护最大长度。
解题思路
后，1连续的最长长度。
给出一个数组，数组中元素只包含〇和1。再给一个K，代表能将0变成1的次数。要求出经过变换以
这道题考察的是滑动窗口的问题。
题目大意
Note:
Example 2:
Example 1: 
 Return the length of the longest (contiguous) subarray that contains only 1s.
Given an array A of Os and 1s, we may change up to K values from O to 1.
题目
1004. Max Consecutive Ones Ili
package leetcode
●A[] is 0 or 1 
●
●1 <= A.length <= 20000
Bolded numbers were flipped from 0 to 1. 
[0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1]
Explanation:
Output: 10 
Input: A = [0,0,1,1,0,0,1,1,1,0,1,1,0,0,0,1,1,1,1], K = 3 
Bolded numbers were flipped from 0 to 1.
[1,1,1,0,0,1,1,1,1,1,1] 
Explanation: 
Output: 6 
Input: A = [1,1,1,0,0,0,1,1,1,1,0], K = 2 