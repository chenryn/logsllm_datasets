r)
return (γ, ˆγ)
s, st0
Setup(ξ)
return Π.Setup(ξ)
s,st0
r)(x, ws)
Sourceγ=(ˆγ,st0
local sts, str
if (sts, str) = (⊥, ⊥) then (sts, str) ← (st0
(str, ws) ←← SC.Recv(str, ws)
wc ←← App.Sourceγ (x, ws)
(sts, wc) ←← SC.Send(sts, wc, [..., 1])
return wc
s, st0
r)
s,st0
r)(wc)
Sinkγ=(ˆγ,st0
local sts, str
if (sts, str) = (⊥, ⊥) then (sts, str) ← (st0
(str, wc) ←← SC.Recv(str, wc)
(ws, α) ←← App.Sinkγ (wc)
(sts, ws) ←← SC.Send(sts, ws, [..., 1])
return (ws, α)
s, st0
r)
EmbedMsgBuf(PULL,·)
return Π.Embeduser(K, ˆγ, h, x)
user
(K, γ = (ˆγ,
, ), h, x)
(K, γ = (ˆγ, st0
EmbedMsgBuf(PULL,·)
wire
local sts, str
if (sts, str) = (⊥, ⊥) then (sts, str) ← (st0
(str, ws) ←← SC.Recv(str, wc)
z ←← Π.EmbedMsgBuf(PULL,·)
(sts, w′
c) ←← SC.Send(sts, z)
return w′
(K, ˆγ, h, ws)
wire
c
s, st0
r), h, wc)
s, st0
r)
r), h, wc)
s, st0
Extractwire(K, γ = (ˆγ, st0
local sts, str
if (sts, str) = (⊥, ⊥) then (sts, str) ← (st0
(str, z) ←← SC.Recv(str, wc)
(ws, M ) ← Π.Extractwire(K, ˆγ, h, z)
(sts, w′
return (w′
c) ←← SC.Send(sts, ws)
c, M )
s, st0
r)
Extractuser(K, γ = (ˆγ,
return Π.Extractuser(K, ˆγ, α)
, ), α)
Fig. 5: (Top) Construction of application channel App[SC] from a stream-based channel SC and plaintext application channel App.
(Bottom) Construction of covert channel Π[SC] for App[SC] from covert channel Π for App. The shorthand [..., 1] denotes an arbitrary
vector of flush flags, of the same length as the plaintext input vector, terminated with the value 1.
Remark. Since our execution model
implicitly passes se-
quences of atomic messages from Source to Sink and back,
we’d like a guarantee that the atomicity of each message is not
lost in the fragmentation of the streaming channel. Thus, we
make the simplifying assumption that each message fragment
is unambiguously delimited, such that the original sequence
can be recovered from the flattened output of Recv. In partic-
ular, this means that the correctness guarantee of Definition 2
extends to the original fragmentation of the input messages
as well. Lastly, we note that the inputs generated by the user
are passed directly to the underlying application, so any User
valid for App is also valid for App[SC] (and vice versa).
Given a covert channel Π for application channel App,
we construct a covert channel Π[SC] for application App[SC]
which “wraps” the underlying covert channel in a similar
manner. This construction requires that the initial states for
SC.Send and SC.Recv are available to the covert channel
algorithms through the application context γ, so they can run
their own “local” copy of SC. We note that this technical
detail captures a subtle design requirement—observed in real
systems such as Balboa and Protozoa—for read and write
access to the secure channel used by the application endpoints.
Pseudocode for this construction is provided in Figure 5,
bottom.
Correctness of Π[SC] follows directly from correctness
of Π (Definition 8) and correctness of SC (Definition 2). In
particular, we note that the last flush flag is always set to
1 in each call to SC.Send, so calling SC.Recv immediately
after is guaranteed to recover the exact input to SC.Send.
This pattern occurs in all three places where SC is invoked in
the construction, and by removing these calls we recover the
correctness condition for Π.
For security of this generic construction, we present two
results which apply in certain commonly-observed settings.
B. User-only schemes
Our first
theorem establishes passive security bounds
for Π[SC] which utilize non-trivial user-side embedding al-
gorithms, a class which includes user-only ABCCs such as
FreeWave and DeltaShaper.
Theorem 1. Fix application channel App, App-based covert
channel Π, and environment context ξ. Let SC be a stream-
based channel which is (t, 2q, µ, ϵ)-IND$-CPFA secure, then
construct App[SC] and Π[SC] as in Figure 5. Fix covert
user User1 such that Π is (t, q, µ, σ)-shape-indistinguishable
relative to App, User1, and ξ. Fix overt user User0 which is
(t, q, µ, δ)-similar to User1 relative to App[SC], Π[SC], and
ξ. Then Π[SC] is passively (t, q, µ, δ + 2ϵ + σ)-secure relative
to App[SC], User0, User1, and ξ.
Proof. We begin by unrolling the pcc advantage and defining
it in terms of the given assumptions:
Advpcc
App[SC],(User0,User1),Π[SC],ξ
= ∆(CC1, OC0)
= ∆(CC1, OC1) + ∆(OC1, OC0)
= ∆(CC1, CS1) + ∆(CS1, OS1)
+ ∆(OS1, OC1) + ∆(OC1, OC0)
≤ ∆(CC1, CS1) + ∆(OS1, OC1) + σ + δ.
We handle the two remaining terms through parallel reductions
to the IND$-CPFA security game. First, we consider the
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:36:38 UTC from IEEE Xplore.  Restrictions apply. 
1982
∆(CC1, CS1) distinguishing advantage.
From a fixed adversary A we may construct an adversary
Bc which replicates the ABCC experimental setup, running the
initialization algorithms and then running A with oracle access
to push covert bits as well as query a challenge oracle (refer
to Figure 6, left). The challenge oracle provided by Bc runs
the ABCC algorithms in the same order as the cc oracle,
but without any calls to SC. Instead, it uses queries to Bc’s
challenge oracle to access the secure channel’s Send interface.
Two queries are required to construct the response—one for
the client message wc, and one for the server message ws. The
responses received are then passed back to A as a response to
its query.
We observe that the value of the challenge bit in the
enclosing IND$-CPFA experiment determines the behavior of
Challenge: when b = 1 it produces query responses identical
to the cc oracle, and when b = 0 it produces query responses
identical to the cs oracle. Since Bc uses A’s output as its own
output, we have
Expind-cpfa
= Pr[ CC1(A) ⇒ 1 ] ,
= 1 − Pr[ CS1(A) ⇒ 1 ] .
Expanding the distinguishing advantage term and substituting,
we have
(Bc) ⇒ 1
(Bc) ⇒ 1
Expind-cpfa
(cid:104)
(cid:104)
(cid:105)
(cid:105)
b = 1
b = 0
Pr
Pr
SC
SC
∆(CC1, CS1) = Pr[ CC1(A) ⇒ 1 ] − Pr[ CS1(A) ⇒ 1 ]
= Pr
Expind-cpfa
SC
(Bc) ⇒ 1
(Bc) ⇒ 1
(Bc) ⇒ 1
SC
Expind-cpfa
Expind-cpfa
SC
(cid:104)
(cid:104)
(cid:104)