# Title: DUPLO: Unifying Cut-and-Choose for Garbled Circuits

## Authors:
- Vladimir Kolesnikov
- Jesper Buus Nielsen
- Mike Rosulek
- Ni Trieu
- Roberto Trifiletti

## Publication:
2018 IEEE 31st Computer Security Foundations Symposium

## Symbolic Security of Garbled Circuits

### Authors:
- Baiyu Li
- Daniele Micciancio

### Affiliation:
University of California, San Diego, USA

### Email:
{baiyu, daniele}@cs.ucsd.edu

### Abstract
We present the first computationally sound symbolic analysis of Yao's garbled circuit construction for secure two-party computation. Our contributions include an extension of the symbolic language for cryptographic expressions from previous work on computationally sound symbolic analysis, and a soundness theorem for this extended language. We demonstrate how the extended language can be used to formally specify not only the garbled circuit construction but also the formal (symbolic) simulator required by the definition of security. The correctness of the simulation is proved in a purely syntactical way within the symbolic model of cryptography and then translated into a concrete computational indistinguishability statement via our general computational soundness theorem. Additionally, we implement our symbolic security framework and the garbling scheme in Haskell, and our experiments show that the symbolic analysis performs well and can be completed within several seconds even for large circuits useful in real-world applications.

## I. Introduction

Secure computation protocols [1]–[4], which demonstrate that any function can be securely evaluated by two or more distrustful parties, are a cornerstone of cryptography and one of the most complex security problems ever envisioned and solved by cryptographers. The complexity of designing and analyzing these protocols stems from the need to construct not just a single security application but an entire class of applications, each described by a function specified in a low-level, yet general-purpose, computational model, such as arbitrary Boolean circuits. Thus, protocols for secure computation are not individual security applications but compilers that translate specifications (e.g., circuits to be computed) into secure solutions, often validated with respect to a strong simulation-based definition of security. Much work on the implementation of secure computation (e.g., [5]–[8]) takes the form of compilers and execution engines.

In this paper, we focus on the two-party secure computation problem and Yao's garbled circuits [1], [2], the first and still most popular solution to this problem. Despite its widespread use, the first proof of security for Yao's garbled circuit construction [9] appeared approximately 30 years after the protocol was initially proposed [1], [2].

Following the research initiated by Abadi and Rogaway [10], we explore the possibility of simplifying and formalizing the design and analysis of secure (two-party) computation protocols using a hybrid approach, consisting of the following steps:

1. **Setting up a symbolic execution model**: This provides a simple language to describe and analyze cryptographic computations without the complexities of concrete (complexity-based) computational models.
2. **Proving a general computational soundness result**: This shows that what can be proved symbolically in the abstract model also holds true when the symbolic language is instantiated with computational cryptographic functions satisfying standard notions of security.
3. **Proving the protocol is secure in a purely symbolic/syntactical way**: This is done within the abstract model.
4. **Concluding, via the computational soundness theorem**, that the standard implementation of the protocol (using a concrete, computational instantiation of the cryptographic primitives) satisfies the computational indistinguishability security properties expected by cryptographers and demanded by actual applications.

The viability of this computationally sound symbolic approach has been demonstrated in various papers, including foundational results [10]–[12] and applications to key distribution protocols [13]–[15], access control in XML databases [16], password guessing attacks [17], and more.

### Goal and Contributions

Our goal is to demonstrate the applicability of this methodology to the analysis of secure computation protocols, specifically Yao's protocol for secure two-party computation. Surprisingly, we find that a simple extension of symbolic cryptography languages already considered in the past is sufficient to both model and analyze this type of protocol. While we focus on one of the simplest variants of Yao's protocol, we believe there is a broader lesson: computationally sound symbolic analysis can be a powerful tool for managing the complexity of high-level cryptographic applications.

We believe that these methods are not limited to the mechanical validation of protocols that are too complex to be checked by hand. They can help carry out the security analysis at a sufficiently high level of abstraction, making formal proofs understandable and verifiable by humans. Further extensions of the language and techniques may also offer a basis for studying optimizations and extensions of Yao's basic protocol, and perhaps even the construction of verified optimizing compilers for secure computation that translate between different variants of cryptographic constructions while preserving functionality and security.

#### Technical Overview

- **Symbolic Cryptographic Expressions**: We extend the language and computational soundness results of [10], [12], [18] to include randomly chosen bits and a controlled-swap operation \(\pi[b](e_0, e_1)\) that randomly permutes \(\{e_0, e_1\}\) based on the value of a randomly chosen bit \(b\). This is described in Section II.
- **Yao's Garbling Procedure**: We show how this extended language is sufficient to express Yao's garbling procedure in a purely symbolic way. This requires a method to map arbitrary circuits to symbolic expressions, which in turn requires a good way to handle arbitrary circuits within symbolic computations.
- **Circuit Description Language**: We propose an inductive method and syntax to describe circuits, where larger circuits are built modularly from smaller ones, starting from basic gates like NAND and duplicate gates. This supports the formal definition of circuit mapping functions and associated proofs of security by structural induction. Our circuit description language is inspired by similar ideas used in modern high-level programming languages, such as Hughes' arrows [19], [20].

### Disclaimer
The arrow syntax used in this paper is a good match for the mathematical definition of circuits and is a convenient formalism to specify and analyze circuit-manipulating programs (like compilers for secure computation).

---

This optimized version of the text is more structured, clear, and professional, with improved readability and coherence.