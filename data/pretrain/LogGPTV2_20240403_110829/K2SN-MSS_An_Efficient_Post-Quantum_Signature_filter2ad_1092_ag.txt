)
16
16 ≡ 22
(mod 257) and (ω
To compute vectors yi, j1 of the equation (17), 64 vector multi-
plications are required. However, the particular choice of ω ≡
42 (mod 257), we have ω
This will remove the need for multiplication and simplify the com-
putations of yi, j1s of equation (17) using left shifts by 2 and addition
operations only. Table 2 includes the computations of the yi, j1 and
the expressions that involve only component-wise addition or sub-
traction. In Table 3, we list all the sub-expressions which we have to
compute to obtain the final expressions of Table 2. The expressions
of the Table 3 include component-wise addition or subtraction, left
shifts by 2, 4 and 6 only.
4.4 Optimization of the Step-4 of bNTT2δ and
дNTT2δ for δ = 4
)
32
32 ≡ 24
(mod 257) and (ω
2 ≡
For ω ≡ 42 (mod 257), we have ω
−1 (mod 257). We can simplify the computations of yi, j1s of equa-
tion (17) using left shifts by 4 and addition/subtraction operations
only, without any multiplication. Table 4 includes all the computa-
tions of the yi, j1 and all its the expressions involve only component-
wise addition or subtraction. On the other hand, Table 5 includes
all the sub-expressions which are required to compute the final
expressions of Table 4. Observe that the expressions of the Table 5
only need component-wise addition and subtraction and left shift
by 4.
64
4.5 Parallelizing SWIFFT with parameter δ
2δ −1), xS,i ∈ Z2δ
257,∀i, be
Let (z0, . . . , z15) and xS = (xS,0, . . . , xS,
the input and output of SWIFFT, respectively, and (a0, a1, . . . , a15)
denote the vector of multipliers. The pre-computation for SWIFFT
and дSWIFFT, both, will be for дNTT2δ (ai ) = (Ai,0, Ai,1, . . . , Ai,
64
2δ
The computation of xS is given in the Algorithm 8.
In gSWIFFT-2δ , the input vector zis are in Z64
257, and the computa-
tion is given by Algorithm 9, where the inputs are processed by the
function дNTT2δ while the rest of the computation is the same as
in Algorithm 8. Note that NTT computations and SWIFFT function
K2SN-MSS: An Efficient Post-Quantum Signature (Full Version)
xxx, yyy, zzz
Algorithm 8 SWIFFT-2δ
Input: (z0, . . . , z ˆm−1), zi ∈ Z64
Output: xS = (xS,0, . . . , xS,
64
2 ; (Ai,0, . . . , Ai,
2δ −1) ∈ Z64
257;
), 0 ⩽ i ⩽ ˆm − 1;
64
2δ
i ⩽ ˆm − 1;
2δ −1), ∀0 ⩽
(1) Compute yi = bNTT2δ (zi ) = (yi,0, . . . , yi,
(2) Compute ti, j = yi, j ⊙257Ai,1,∀0 ⩽ i ⩽ ˆm−1,∀0 ⩽ j ⩽ 64
.
2δ
(3) xS,i = xS,i ⊕257 tj,i ,∀0 ⩽ i ⩽ 64
2δ ,∀0 ⩽ j ⩽ ˆm − 1.
64
Algorithm 9 generalized SWIFFT-2δ , in short gSWIFFT-2δ
(cid:18)
Ai,0, . . . , Ai,
64
2δ
(cid:19)
for
(cid:19)
Input: (z0, . . . , z15) where zi ∈ Z64
0 ⩽ i ⩽ 15;
Output: xS =
xS,0, . . . , xS,
(cid:18)
64
2δ −1
2 and
(cid:19) ∈ Z64
(cid:18)
257;
, ∀0 ⩽
(1) Compute yi = дNTT2δ (zi ) =
(2) Compute ti, j = yi, j ⊙257 Ai,1,∀0 ⩽ i ⩽ 15,∀0 ⩽ j ⩽
2δ − 1,∀0 ⩽ j ⩽
(3) Compute xS,i = xS,i ⊕257 tj,i ,∀0 ⩽ i ⩽ 64
yi,0, . . . , yi,
2δ −1
i ⩽ 15.
2δ − 1.
64
15.
64
parallelizations, respectively. SWIFFT-16-avx2 has the highest par-
allelization level to the date which gives the fastest implementation.
We obtained better implementation results for K2SN-MSS using
SWIFFT-16-avx2 than SWIFFT-8-avx2 and so in the following we
give implementation details of SWIFFT-16-avx2 only. We omit the
implementation details of SWIFFT-8-avx2 here due to page limits.
All implemented codes are publicly available at GitHub [23].
The existing benchmark implementation of SWIFFT in [31] cor-
responds to [5, 28]. The implementation uses δ = 3 and parallelizes
the code using sse2 [22] instructions of Intel processors. We refer
to this implementation as SWIFFT-8-sse2.
5 K2SN-MSS SOFTWARE IMPLEMENTATION
In this section, we provide the details of the implementation of the
software K2SN-MSS. Table 6 lists the values of the parameters used
for the software K2SN-MSS and also the functions are used.
The performance of K2SN-MSS is dominated by the computation
of SWIFFT. We describe our SIMD parallelization of this computa-
tion for the following parameters:
ˆn = 64, ˆm = 16, p = 257 and ω = 42 (mod 257),
that were given in [5, 28].
Our reasoning for these choices are below. Lyubashevsky et al.
reduced the SWIFFT function to the subset sum problem and used
k-list attack to compute the preimage of a SWIFFT function [28] in
practice.
This choice of parameters also allows us to compare our im-
plementation of SWIFFT against existing software of SWIFFT [31],
both for correctness and efficiency. Note that in Zp, 42 is a 2ˆn = 128-
th root of unity. Therefore, for NTT, we use ω = 42 (mod 257) and
Symbol
n
m
ˆn
ˆm
p
t
Name
PRF ChaCha20
1CFF: cm
Name
Signature Size
Secret Key Size
Public Key Size
Parameters
Security parameter
Dimension of the ring R of SWIFFT
Number of multipliers of SWIFFT
Prime of SWIFFT
optimized CFF for 256-bit messages
Value Meaning
512
256 Message Space
64
16
257
262
Functions
Description
{0, 1} ˆn ˆm (cid:55)→ {0, 1} ˆn⌈log2 (p )⌉
{0, 1} ˆm ˆn (cid:55)→ {0, 1} ˆm ˆn
{0, 1}m (cid:55)→ {i0, i1, . . . , i t2 −1},
where each 0 ⩽ ij < t and ij1 (cid:44) ij2
for any 0 ⩽ j1 < j2 < t2
Lengths
21331 Bytes
40 Bytes
152 Bytes
Sizes
Hash Function: SWIFFT
Hash Function: дSWIFFT {0, 1} ˆn ˆm⌈log2 (p )⌉ (cid:55)→ {0, 1} ˆn⌈log2 (p )⌉
Table 6: K2SN-MSS parameters, functions and resulting sizes
show that with this choice of ω, multiplications reduce to bit-wise
left-shift operations and results efficient implementation.
(cid:16)262
For ˆm = 16 and ˆn = 64, the input and output of SWIFFT are, 1024
and 576 bits, respectively. Therefore, SWIFFT is a hash function
which compresses 2n bits to n + nϵ with n = 512 and nϵ = 64.
condition t2 <
smallest even positive integer 262 where log2
fore we use t = 262 for our software. We start with by providing
the implementation details using intel avx2 intrinsic.
Our implemented software is for 256-bit messages. Relaxing the
2 by 3, we choose t2 = 131, such that t becomes the
p
(cid:17) ⩾ 256. There-
On the other hand, choice of these parameters for SWIFFT hash
function leads to 512-bit classical (256-bit quantum) security of
K2SN-MSS in multi-function-multi-target model. Therefore, we can
only compare our implemented signature scheme against hash-
based signature schemes which provide same level of security in
the same security model. The most optimized implementation of
XMSS at the same security level is given in [15]. It should be noted
that there is no existing software of XMSSMT and SPHINCS at the
same security level.
131
5.1 SWIFFT-16-avx2
In the implementation of 16-way parallelization, each 256-bit regis-
ter __m256i is partitioned into 16 blocks of 16-bit each. The input
strings are over Z257, where each element is 9-bit. The resulting
vector of 16 Z257-elements is stored in a register. This is called
packing. After completing the computation, the register content is
moved to an array of integers. This is called unpacking.
each inti up to 16-bit. Here, unless otherwise stated, vectors are of
dimension 16. Initially, each of the 16-bit blocks contains an element
of Z257 which is represented by 9-bit. The result of vector addition
and multiplication must be reduced modulo p = 257. The Details
We will denote packed integers as vectors of (int0, int1, . . . , int15),
xxx, yyy, zzz
Sabyasachi Karati and Reihaneh Safavi-Naini
5.5 Modular Vector Multiplication (⊙257)
Each ai and bi is 9-bit long and so ci = ai · bi may need more than
16-bits to represent, and this will result in an overflow. To overcome
this problem, ci is divided into two parts, ci = ci,0 + ci,1 · 216, and
the reduction is computed as:
of the avx2 implementations of modular reduction, and the three
main vector operations addition, subtraction and multiplication are
given in Appendix ?? and the code is publicly available at [23].
5.2 Modular Reduction
We use two types of modular reductions referred to as LazyReduced16
and Reduced16. In LazyReduced16 the output vector can have
components that are negative integers, while the components of
Reduced16 output vector are integers in the range [0, p−1]. LazyReduced16
is a faster operation but the negative output may not be accepted
as the input in the next operation such as shifting and so we use
LazyReduced16 when negative output is acceptable by the next
operation.
(1) LazyReduced16: Let c = (c0, c1, . . . , c15). Each component
ci of c can be written as ci = ci,0 + ci,1 · 28 = (ci,0 − ci,1) +
ci,1 · (28 + 1). Therefore ci = ci,0 − ci,1 (mod p). Note that
the i-th component, depending on the values of ci,0 and
ci,1, can be negative or positive. The _mm256_and_si256
instruction computes the bit-wise AND of two __m256i reg-
isters. Let mask255 be a vector of length 16, and each com-
ponent being 255. Applying _mm256_and_si256 on c and
mask255, results in the vector c0 = (c0,0, c1,0, . . . , c15,0). The
_mm256_srli_epi16 performs right-shift on packed 16-bit
integers of __m256i. We compute c1 = _mm256_srli_epi16(c, 8).
Let c1 = (c0,1, c1,1, . . . , c15,1). We obtain the lazy reduced
vector ˆc as _mm256_sub_epi16(c0, c1), where _mm256_sub_epi16
performs subtraction on packed 16-bit integers of two __m256i
registers.
(2) Reduced16: Let ˆc = {ˆc0, ˆc1, . . . , ˆc15} = LazyReduced16(c).
To determine if the i-th component of the reduced vector ˆc
is negative, we use c′ = _mm256_cmpgt_epi16(ˆc, allone),
where allone is a vector of all −1 component. If ˆci ⩾ 0,
then c′
i = −1, else it is 0. Thus we obtain c∗ with 0 and
-1 components, and 0 components corresponding to nega-
tive components of c′. Let p be a vector of length 16, each
component being p = 257. By applying _mm256_and_si256
on p and c′, we obtain a vector whose i-th component is
p modulo p if ˆci < 0, else 0. To obtain ˆc modulo p, we
use _mm256_add_epi16(p′ and ˆc), to add p′ and ˆc where
_mm256_add_epi16 performs additions on packed 16-bit in-
tegers of the two __m256i registers.
For two vectors a = (a0, a1, . . . , a15) and b = (b0, b1, . . . , b15),
we perform the following vector operations.
5.3 Modular Vector Addition (⊕257)
The addition of the vectors is performed by _mm256_add_epi16
and then performing the modular reduction on the result.
5.4 Modular Vector Subtraction (⊖257)
First add the vector kp (each component kp, for an appropriate
choice of integer k), to the vector a such that all components of the
vector (a + kp) − b are positive. The vector subtraction operation
is done by the instruction _mm256_sub_epi16. Because of adding
kp, the positive components of (a − b) will become large and so we
perform a modular reduction at the end to reduce the components
to 9-bit representation.
ci = ci,0 + ci,1 · 28
(28 + 1) − ci,1 · 28
= ci,0 − ci,1 (28 + 1) + ci,1 = ci,0 + ci,1 (mod 257).
The maximum value of ai and bi is 256. If both ai and bi are 256
then only ci,1 becomes 1 and ci,0 is zero. For all other combinations
of ai and bi, ci,1 is 0.
Let c0 = {c0,0, c1,0, . . . , c15,0} and c1 = {c0,1, c1,1, . . . , c15,1}. We
compute the vector c0 using the instruction _mm256_mullo_epi16,
and c1 using the instruction _mm256_mulhi_epu16 from the a and
b. Then we perform modular reduction Reduced16 on the vector c0.
The final vector is c∗. Adding c∗ and c1 gives the desired reduced
vector.
5.6 Implementation of the function Select16
The Select function takes an input vector of length 16 and out-
puts a vector of length 16 whose each component is the same
as the one of the selected component of the input vector by an
index as described in Section 4.2. This has been implemented us-
ing _mm256_permutevar8x32_epi32 as avx2 does not provide a
permutation operation on 16-bit __m256i register data, and so,
implementations of Select16() and Select8() are different. For
Select16(), we use the set of vectors {s0, s1, . . . , s7} where each
si , i = 0, 1, . . . , 7 is an 8-dimensional vector with each component i
as si = (i, i, . . . , i). Let a = (a2·0, a2·0+1, a2·1, a2·1+1, . . . , a2·7, a2·7+1)
be the input to Select() function. First we select the i-th pair (a2·i , a2·i +1)
of a using the instruction _mm256_permutevar8x32_epi32, and
construct the vector ai as
ai = _mm256_permutevar8x32_epi32(ai , si )
= (a2·i , a2·i +1, . . . , a2·i , a2·i +1).
To select the 2ith component of a, we first compute the vector ai,0 =
(a2·i , 0, . . . , a2·i , 0) using the instruction _mm256_and_si256 on the
vectors ai and the vector (−1, 0, . . . ,−1, 0). Applying _mm256_srli_epi32
on ai,0 for 16-bits, we get a′
i,0 = (0, a2·i , . . . , 0, a2·i ). If we perform
_mm256_or_si256 on ai,0 and a′
i,0, the resulting vector will be the
output of the select function for 2i. Similarly, we perform the select
operation for (2i + 1)th components.
5.7 Further Details
Reduction is a costly operation. In the following, we show how
the number of reductions can be reduced. In bNTT16 computation