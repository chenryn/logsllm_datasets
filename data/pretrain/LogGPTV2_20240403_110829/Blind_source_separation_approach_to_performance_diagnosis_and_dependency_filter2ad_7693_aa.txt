title:Blind source separation approach to performance diagnosis and dependency
discovery
author:Gaurav Chandalia and
Irina Rish
Blind Source Separation Approach to Performance
Diagnosis and Dependency Discovery
Gaurav Chandalia and Irina Rish
IBM T.J. Watson Research
Hawthorne, NY 10532, USA
{gachanda,rish}@us.ibm.com
ABSTRACT
We consider the problem of diagnosing performance problems in
distributed system and networks given end-to-end performance mea-
surements provided by test transactions, or probes. Common tech-
niques for problem diagnosis such as, for example, codebook and
network tomography usually assume a known dependency (e.g.,
routing) matrix that describes how each probe depends on the sys-
tems components. However, collecting full information about rout-
ing and/or probe dependencies on all systems components can be
very costly, if not impossible, in large-scale, dynamic networks
and distributed systems. We propose an approach to problem di-
agnosis and dependency discovery from end-to-end performance
measurements in cases when the dependency/routing information
is unknown or partially known. Our method is based on Blind
Source Separation (BSS) approach that aims at reconstructing un-
observed input signals and the mixing-weights matrix from the ob-
served mixtures of signals. Particularly, we apply sparse non-negative
matrix factorization techniques that appear particularly ﬁtted to the
problem of recovering network bottlenecks and dependency (rout-
ing) matrix, and show promising experimental results on several
realistic network topologies.
Categories and Subject Descriptors: C.4 [Performance of Sys-
tems]: Measurement Techniques
General Terms: Algorithms, experimentation, measurement, per-
formance
Keywords: End-to-end probes, network tomography, blind source
separation, matrix factorization, sparse optimization
1.
INTRODUCTION
Monitoring and diagnosis of distributed computer systems and
networks is an important issue in systems management that be-
comes increasingly challenging with growing size and complex-
ity of such systems. Given the heterogeneous, decentralized and
often noncooperative nature of today’s large-scale networks, it is
impractical to assume that all statistics related to an individual sys-
tem’s components such as link, routers, or application-layer com-
ponents can be indeed collected for monitoring purposes. On the
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
IMC’07, October 24-26, 2007, San Diego, California, USA.
Copyright 2007 ACM 978-1-59593-908-1/07/0010 ...$5.00.
other hand, other type of measurements, such as end-to-end trans-
actions, or probes, are typically cheap and easy to obtain. This
realization gave rise to the ﬁeld of network tomography [13] which
focuses on inference-based approaches to estimate unavailable net-
work characteristics from available measurements.
Most of existing work on network tomography and problem di-
agnosis, such as commonly used codebook-based approaches [5, 9]
assume known dependencies between the observations (e.g., end-
to-end delays, system events) and their unobserved causes (e.g.,
link or node delays, component failures). Such knowledge is repre-
sented by routing matrices in network tomography or dependency
matrices in problem diagnosis, where rows and columns corre-
spond to observations and causes (components) respectively. How-
ever, obtaining dependency information can be too costly or just
infeasible in many situations: network topology and routing infor-
mation may be unavailable due to noncooperative administrative
domains blocking the access to topology discovery tools, compo-
nents that affect probe’s performance may be hard to discover (e.g.,
low-level network elements or high-level application components
such as particular set of database tables crucial for transaction per-
formance), maintaining up-to-date information about dynamically
changing routing (especially in wireless and mobile networks) may
get costly, and constructing dependency matrices for application-
level transactions is typically quite a laborious process requiring
expert knowledge of system components that may affect probe’s
performance. Even in cases when the dependency or routing infor-
mation is available, this knowledge is often only partial, and also
dynamically changing.
Therefore the questions are: how much can we infer from only
end-to-end observations? Can we infer “hidden causes” of perfor-
mance degradations? Can we conclude that there exist, say, three
common components that would explain most of the end-to-end
delays? Can we say whether the performance degradations are due
to a single bottleneck or due to an overall performance degradation
that affected the whole network? And, if we think it is due to a bot-
tleneck or a few of them, can we identify which probes go through
which subset of such bottlenecks?
In this paper, we propose a general framework that attempts to
answer the above questions by performing simultaneous depen-
dency discovery and problem diagnosis. We use the Blind Source
Separation (BSS) approach that aims at reconstructing both unob-
served input signals and the mixing-weights matrix from the com-
bined signals received at a given sequence of time points1. A classi-
1Note that assuming complete absence of information about de-
pendency (routing) information is the opposite extreme of assum-
ing the full knowledge, and in reality we hope to have some partial
information available. However, in this paper, we investigate the
most ”pessimistic” scenario ﬁrst, and leave combination of BSS
cal example of BSS is the “cocktail party" problem where n speak-
ers are present in the room with m microphones and the task is to
reconstruct what each one was saying (n signals) and how close
to the microphones they were located (m × n mixing matrix). In
our application, causes of performance problems such as delays at
individual components (nodes, links) correspond to the unobserved
input signals, while dependency (routing) matrix corresponds to the
mixing-weights matrix, and the end-to-end probes to the observed
output signals.
Herein, we apply BSS approaches based on sparse nonnega-
tive matrix factorization and report encouraging empirical results
in both real and simulated settings.
2. RELATED WORK
Most of recent work on network tomography falls into two cate-
gories: (i) estimating link-level performance such as link delays or
losses based on end-to-end performance measurements [6, 12, 10]
and (ii) estimating origin-destination (OD) trafﬁc ﬂows based on
link-level trafﬁc measurements [7, 16, 15] (see [1] for an overview
and an extended list of references). A typical approach to both
problems is to assume a noisy linear model yt = Axt +  where
yt denotes a vector of observations (e.g., end-to-end delays or link-
level trafﬁc intensities), A denotes a routing matrix, xt is an unob-
served vector (e.g., link delays, or OD ﬂows) and  is noise. In this
paper, we focus on the ﬁrst problem, although our method can be
easily applied to the second problem as well. We also generalize
the problem from the network to application level where yt and
xt represent arbitrary end-to-end transactions and corresponding
delays at system components and A corresponds to a dependency
matrix, where aij = 1 if the probe i “goes through” component
j and 0 otherwise. For example, response time of a web-page re-
quest depends not only on network components such as routers and
links, but also on the web server performance, various applications
invoked on the page, database tables that need to be opened in order
to show the content of the page, etc.
There also exists a body of related work in network tomogra-
phy that focuses on discovering (logical) topology of a network
based only on end-to-end measurements (see [1] for a comprehen-
sive summary; a more recent approach was also presented by [11]).
These approaches attempt to reconstruct the routing tree (typically
assuming multicast, although extensions to unicast probes were
also proposed) by comparing the shared loss or delay statistics
on probe packets transmitted from a root to a set of leaf nodes,
and often can be viewed as hierarchical clustering that uses some
similarity measure to group the nodes into a (logical) routing tree.
Note, however, that topology discovery may be an overkill in case
of bottleneck diagnosis problem, since we only need to know the
set rather than the sequence of components involved in each probe,
i.e. only the dependency matrix. Moreover, those approaches are
also quite speciﬁc to the network topology discovery and cannot
be directly applied to the application-level dependency matrix re-
construction. On the contrary, our approach is more general as it
applies to arbitrary topologies, does not make multicast assump-
tions, and can be used with any type of end-to-end probes from
network to application layer2.
approaches with some partial dependency knowledge as a topic of
future investigation.
2An interesting direction for future work is combining our method
with a recently proposed approach of [8] that recovers topology
given the information of which subsets of components belong to
each path (i.e. dependency matrix in our terminology).
3. OUR APPROACH
Our method uses an analogy to the BSS problem. In the appli-
cation to the systems performance management, we can view the
delay experienced by a transaction at each component as an un-
observed “signal", the unknown dependency (routing) matrix as a
mixing-weights matrix and the observed end-to-end performance
as the output signal (e.g., corresponding to a “microphone" in the
“cocktail party" problem). The BSS problem is solved by matrix
factorization: given the p × T matrix of end-to-end probe obser-
vations Y where p is the number of probes and T is the number
of time points, ﬁnd two matrices A and X that provide the best
possible approximation to Y as a factorization Y = A · X, where
A corresponds to the found p × n dependency matrix (rows corre-
spond to probes, columns correspond to n system components) and
X corresponds to the n × T delay matrix containing reconstructed
delays at each component and at each time point (rows correspond
to system components, columns correspond to the time points).
More speciﬁcally, in order to ﬁnd the matrices A and X we
have to solve a constrained optimization problem that minimizes
the reconstruction error between Y and ˆY where ˆY = A · X.
There are several choices of loss functions to minimize the error,
for example the squared error or the KL-divergence. The optimiza-
tion is constrained since both delays and dependency matrices have
speciﬁc properties. For our application we impose the constraints
of non-negativity since link delays are clearly non-negative and
additive. Matrix factorization with the non-negativity constraint
is called Non-negative matrix factorization (NMF). In addition to
non-negativity, we also require A and X to be sparse. For A, spar-