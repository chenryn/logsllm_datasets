Cunning with CNG: 
Soliciting Secrets from Schannel 
DEF COn 24 
1470502800 
Why do you care? 
 Ability to decrypt Schannel TLS connections that use ephemeral key exchanges 
 Ability to decrypt and extract private certificate and session ticket key directly 
from memory 
 Public Cert/SNI to PID/Logon Session Mapping 
What you get out of this talk 
Agenda 
 A very short SSL/TLS Review 
 A background on Schannel & CNG 
 The Secret Data 
 The Forensic Context 
 Demo >.> 
DisclaimeR 
This is NOT an exploit 
 It’s just the spec :D 
 …and some implementation specific oddities 
Microsoft has done nothing [especially] wrong 
 To the contrary, their documentation was actually pretty great 
Windows doesn’t track sessions for processes that load their own TLS libs 
 I’m looking at you Firefox and Chrome 
Windows doesn’t track sessions for process that don’t use TLS… 
 That’d be you TeamViewer... 
BackgroUnd 
TLS, Schannel, and CNG 
The now 
infamous TLS 
Handshake 
[ Initial Connection ] 
E.G.: TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 
The now 
infamous TLS 
Handshake 
or, Session Resumption 
PeRFect FoRWaRd Secrecy 
What we want to do 
 One time use keys, no sending secrets! 
What TLS actually does 
 Caches values to enable resumption 
  recommends `An upper limit of 24 hours is suggested for session ID lifetimes` 
  When using session ticket extension, sends the encrypted state over the network 
 basically returning to the issue with RSA, but using a more ephemeral key... 
What implementations also do 
 Store symmetric key schedules (so you can find the otherwise random keys...) 
 Cache ephemeral keys and reuse for a while... 
YEAR: 1992 
CLASS:  HUMAN 
ID:  WHITFIELD DIFFIE 
EVENT:  AUTHENTICATION  AND 
   AUTHENTICATED KEY EXCHANGES 
Schannel & CNG 
Secure Channel 
 It’s TLS -> the Secure Channel for Windows! 
 A library that gets loaded into the “key isolation 
process” and the “client” process 
Technically a Security Support Provider (SSP) 
 Spoiler: the Key Isolation process is LSASS 
The CryptoAPI-Next Generation (CNG) 
 Introduced in Vista (yes you read correctly) 
 Provides Common Criteria compliance 
 Used to store secrets and ‘crypt them 
Storage via the Key Storage Providers (KSPs) 
Generic data encryption via DPAPI 
Also brings modern ciphers to Windows (AES for 
example) and ECC 
 Importantly, ncrypt gets called out as the “key 
storage router” and gateway to the CNG Key 
Isolation service 
Schannel Preferred Cipher Suites 
Windows 7 
Windows 10 
Windows Vista 
*ListCipherSuites sample code found here: https://technet.microsoft.com/en-us/library/bb870930.aspx 
CLASS:  RoBOT 
QUERY:  Y U STILL USE 
VISTA, BABY??? 
Microsoft’s TLS/SSL Docs 
 ClientCacheTime: “The first time a client connects to a server through the Schannel SSP, a full TLS/SSL 
handshake is performed.”  
 “When this is complete, the master secret, cipher suite, and certificates are stored in the session cache on 
the respective client and server.”* 
 ServerCacheTime: “…Increasing ServerCacheTime above the default values causes Lsass.exe to consume 
additional memory. Each session cache element typically requires 2 to 4 KB of memory”* 
 MaximumCacheSize: “This entry controls the maximum number of cache elements. […] The default value 
is 20,000 elements.” * 
*TLS/SSL Settings quoted from here: https://technet.microsoft.com/en-us/library/dn786418(v=ws.11).aspx 
Schannel 
by the docs 
Diagram based on: 
 https://technet.microsoft.com/en-us/library/dn786429.aspx 
CNG 
Key Isolation 
by the docs 
Diagram based on: https://msdn.microsoft.com/en-us/library/windows/desktop/bb204778.aspx 
Background Summary 
We’re Looking Here 
For These 
Because of That 
LSASS.exe 
Mission 
We want to be able to see data that has been protected with TLS/SSL and subvert efforts 
at implementing Perfect Forward Secrecy 
We want to gather any contextual information that we can use for forensic purposes, 
regardless of whether or not we can accomplish the above 
We (as an adversary) want to be able to get access to a single process address space and 
be able to dump out things that would enable us to monitor/modify future traffic, or 
possibly impersonate the target 
 We want to do this without touching disk 
SecrEts 
ThE Keys 
Master Secret 
Session Keys 
Ephemeral Private Key* 
Persistent Private Key 
(Signing) 
Session Ticket Key* 
Pre-Master Secret 
+ 
The Keys? What do they get us? 
= 
= 
= 
= 
a single connection 
a single session 
multiple sessions 
multiple sessions + identity 
The Keys? We got ’em…all. 
* 
CSessionCacheServerItem 
+0xF0 
CSslCredential 
+0x48 
CSslServerKey 
+0x08 
NcryptSslKey 
+0x10 
NcryptsslpKey
pair +0x18 
NcryptKey 
+0x10 
KPSPK 
+0xD0 
CSslContext 
CEphemKeyData 
+0x48 
NcryptSslkey 
+0x10 
NcryptSslpEphemKey 
+0x18 
NcryptKey 
+0x10 
KPSPK 
+0x60 
* 
CSessionCacheItem 
+0xF0 
NcryptSslkey 
+0x10 
NcryptsslpMasterKey 
+0x30 
CSslUserContext 
+0x18, +0x20 
NcryptsslpSessionKey 
+0x18 
BcryptKey 
+0x10 
MSSymmetricKey 
+0x18 
msprotectkey 
BcryptKey 
+0x10 
MSSymmetricKey 
+0x18 
EccKey 
+0x18 
NcryptSslKey 
+0x10 
Session Keys 
 Smallest scope / most ephemeral 
 Required for symmetric encrypted comms 
 Not going to be encrypted 
Approach Premise: 
 Start with AES 
 AES keys are relatively small and pseudo-random 
 AES key schedules are larger and deterministic 
 … they are a “schedule” after all. 
 Key schedules usually calculated once and stored* 
 Let’s scan for matching key schedules on both 
hosts 
FindAES from: http://jessekornblum.com/tools/ 
Session Keys 
_SSL_SESSION_KEY 
4 
cbStructLength 
4 
dwMagic [“ssl3”] 
4 
dwProtocolVersion 
4/8 
pvCipherSuiteListEntry 
4 
IsWriteKey 
4/8 
pvBcryptKeyStruct 
_BCRYPT_KEY_HANDLE 
4 
cbStructLength 
4 
dwMagic [“UUUR”] 
4/8 
pvBcryptProvider 
4/8 
pvBcryptSymmKey 
_MS_SYMMETRIC_KEY 
4 
cbStructLength 
4 
dwMagic [“MSSK”] 
4 
dwKeyType 
... 
... 
4 
KeyLength 
? 
SymmetricKey 
? 
SymmKeySchedule 
CSslUserContext 
Look familiar? Bcrypt keys are used a lot: think Mimikatz 
The Ncrypt SSL Provider (ncryptsslp.dll) 
These functions do three things: 
 Check the first dword for a size value 
 Check the second dword for a magic ID 
 Return the passed handle* if all is good 
Ncryptsslp Validation function Symbols 
Ncryptsslp Validation function Symbols 
*Handles are always a pointer here 
The Ncrypt SSL Provider (ncryptsslp.dll) 
SSL Magic 
Size (x86) 
Size (x64) 
Validation Functions 
ssl1 
0xE4 
0x130 
SslpValidateProvHandle 
ssl2 
0x24 
0x30 
SslpValidateHashHandle 
ssl3 
? 
? 
ssl4 
0x18 
0x20 
SslpValidateKeyPairHandle 
ssl5 
0x48 
0x50 
SslpValidateMasterKeyHandle 
ssl6 
0x18 
0x20 
SslpValidateEphemeralHandle 
ssl7 
? 
? 
ssl3 was already discussed, 
appears in the following functions: 
TlsGenerateSessionKeys+0x251 
SPSslDecryptPacket+0x43 
SPSslEncryptPacket+0x43 
SPSslImportKey+0x19a 
SPSslExportKey+0x76 
Ssl2GenerateSessionKeys+0x22c 
Pre-Master Secret (PMS) 
 The ‘ssl7’ struct appears to be used specifically 
for the RSA PMS 
 As advised by the RFC, it gets destroyed quickly, 
once the Master Secret (MS) has been derived 
 Client generates random data, populates the 
ssl7 structure, and encrypts  
 In ECC the PMS is x-coordinate of the shared 
secret derived (which is a point on the curve), so 
this doesn’t /seem/ to get used in that case 
Functions where ssl7 appears: 
ncryptsslp!SPSslGenerateMasterKey+0x75 
ncryptsslp!SPSslGenerateMasterKey+0x5595 
ncryptsslp!SPSslGeneratePreMasterKey+0x15e 
ncryptsslp!TlsDecryptMasterKey+0x6b 
Bottom line:  
It’s vestigial for our purposes - it doesn’t do 
anything another secret can’t 
Master Secret 
 Basically the Holy Grail for a given connection 
 It always exists 
 It’s what gets cached and used to derive 
the session keys 
 Structure for storage is simple - secret is 
unencrypted (as you’d expect) 
 This + Unique ID = decryption, natively in tools 
like wireshark 
          So...how do we get there? 
_SSL_MASTER_SECRET 
4 
cbStructLength 
4 
dwMagic [“ssl5”] 
4 
dwProtocolVersion 
0/4 
dwUnknown1* [alignment?] 
4/8 
pCipherSuiteListEntry 
4 
bIsClientCache 
48 
rgbMasterSecret 
4 
dwUnknown2 [reserved?] 
Master Secret 
_SSL_MASTER_SECRET 
4 
cbStructLength 
4 
dwMagic [“ssl5”] 
4 
dwProtocolVersion 
0/4 
dwUnknown1* [alignment?] 
4/8 
pCipherSuiteListEntry 
4 
bIsClientCache 
48 
rgbMasterSecret 
4 
dwUnknown2 [reserved?] 
Master Secret Mapped to Unique Identifier 
 The Master Key is linked back to a unique ID 
through an “NcryptSslKey” 
 The NcryptSslKey is referenced by an 
“SessionCacheItem” 
 The SessionCacheItem contains either the 
SessionID, or a pointer and length value for a 
SessionTicket 
 Instantiated as either client or server 
item 
At this point, we can find cache items, and extract 
the Master Secret + Unique ID   
                                 … Houston, we has plaintext. 
_SESSION_CACHE_CLIENT_ITEM 
4/8 
pVftable 
… 
… 
@0x10 
pMasterKey 