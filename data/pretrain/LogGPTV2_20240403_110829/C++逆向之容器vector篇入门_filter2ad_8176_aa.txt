# C++逆向之容器vector篇入门
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
前言：说实话，我自己也不会c++的逆向。然后，现在太多的题目是c++的逆向了，一上来就是一堆容器，搞得我不得不去补补c++逆向部分的知识了，我这篇文章以西湖论剑的easyCpp为例，希望能给那些跟我一样是c++逆向的新手的朋友们一点启发。下面我就开始我的抛砖引玉篇幅吧，在这篇文章里，我会以题目中出现的逆向出来的代码以及C++的代码进行对比，让你们更好的知道，c++容器入门篇其实不难，开始正文：
我将先给你们介绍每个容器操作的代码以及ida反汇编出来的代码进行对比
## vector的构造以及析构
    #include 
    #include 
    using namespace std;
    int main()
    {
        //声明一个int型向量
        vector test1;
        getchar();
        //声明一个初始大小为5的int向量
        vector test2(5);
        getchar();
        //声明一个初始大小为10且值都是1的向量
        vector test3(10,1);
        getchar();
        //声明并用num向量初始化test4向量
        int num = 1;
        vector test4(num);
        getchar();
        //用向量vec的第0个到第9个值初始化test3
        vector test5(test3.begin(), test3.end());
        getchar();
        //将arr[1]~arr[4]范围内的元素作为vec的初始值
        int array[5] = {1, 2, 3, 4, 5};
        vector test6(&array[1], &array[4]);
        getchar();
        return 0;
    }
这是C++代码，接下来是ida F5出现的代码
    int __cdecl main(int argc, const char **argv, const char **envp)
    {
      __int64 v3; // rbx
      __int64 v4; // rax
      char v6; // [rsp+0h] [rbp-100h]
      int v7; // [rsp+20h] [rbp-E0h]
      int v8; // [rsp+24h] [rbp-DCh]
      int v9; // [rsp+28h] [rbp-D8h]
      int v10; // [rsp+2Ch] [rbp-D4h]
      int v11; // [rsp+30h] [rbp-D0h]
      char v12; // [rsp+40h] [rbp-C0h]
      char v13; // [rsp+60h] [rbp-A0h]
      char v14; // [rsp+80h] [rbp-80h]
      char v15; // [rsp+A0h] [rbp-60h]
      char v16; // [rsp+C0h] [rbp-40h]
      char v17; // [rsp+E2h] [rbp-1Eh]
      char v18; // [rsp+E3h] [rbp-1Dh]
      int v19; // [rsp+E4h] [rbp-1Ch]
      char v20; // [rsp+E9h] [rbp-17h]
      char v21; // [rsp+EAh] [rbp-16h]
      char v22; // [rsp+EBh] [rbp-15h]
      int v23; // [rsp+ECh] [rbp-14h]
    //创建一个vector
      std::vector>::vector(&v16, argv, envp);
      getchar();
    //创建初始容量大小为5的vector
      std::allocator::allocator(&v17);
      std::vector>::vector(&v15, 5LL, &v17);
      std::allocator::~allocator(&v17);
      getchar();
    //创建初始容量大小为10并且将元素初始化为1的vector
      std::allocator::allocator(&v18);
      v19 = 1;
      std::vector>::vector(&v14, 10LL, &v19, &v18);
      std::allocator::~allocator(&v18);
      getchar();
    //声明并用num向量初始化test4向量
      v23 = 1;
      std::allocator::allocator(&v20);
      std::vector>::vector(&v13, v23, &v20);
      std::allocator::~allocator(&v20);
      getchar();
      std::allocator::allocator(&v21);
      v3 = std::vector>::end(&v14);
      v4 = std::vector>::begin(&v14);
      //这两句在c++中相当于v14.begin()以及v14.end()
      //这句看着很长，其实也就是构造函数，将::提取出来就可以看出std::vector::vector(...)
      std::vector>::vector>>,void>(
        &v12,
        v4,
        v3,
        &v21);
      std::allocator::~allocator(&v21);
      getchar();
      v7 = 1;
      v8 = 2;
      v9 = 3;
      v10 = 4;
      v11 = 5;
      std::allocator::allocator(&v22);
      //将arr[1]~arr[4]范围内的元素作为vec的初始值，v8为数组下标为1的元素，v11为最后一个
      std::vector>::vector(&v6, &v8, &v11, &v22);
      std::allocator::~allocator(&v22);
      getchar();
      std::vector>::~vector(&v6);
      std::vector>::~vector(&v12);
      std::vector>::~vector(&v13);
      std::vector>::~vector(&v14);
      std::vector>::~vector(&v15);
      std::vector>::~vector(&v16);
      return 0;
    }
###  小结：
  * 从代码里可以看出，在ida的识别世界里，他会先创建一个临时变量，然后将他的地址传到vector的构造函数里
  * 而不同的vector构造函数，只是参数不同，第二个为初始容量，第三个为初始数值的地址，第四个为allocator用于分配内存
  * 可以看出构造函数和析构函数是同时存在的
  * 要学会简化所识别出来的C++代码，括号里的模板类可以不仔细看，只需要看他具体是什么函数就行
**重点** ：  
v3 = std::vector>::end(&v14);  
v4 = std::vector>::begin(&v14);  
这两句要会识别，这是常用的，他是取容器的begin和end，相当于C++的v14.begin();v14.end();
## vector的常用操作识别
先进行vector操作知识的复习
vector对象最重要的几种操作
  1. v.push_back(t) 在容器的最后添加一个值为t的数据，容器的size变大。
  2. v.size() 返回容器中数据的个数，size返回相应vector类定义的size_type的值。
  3. v.empty() 判断vector是否为空
  4. v[n] 或 v.at(n) 返回v中位置为n的元素，后者更加安全
  5. v.insert(pointer,number, content) 向v中pointer指向的位置插入number个content的内容。  
还有v. insert(pointer, content)，v.insert(pointer,a[2],a[4])将a[2]到a[4]三个元素插入。
  6. v.pop_back() 删除容器的末元素，并不返回该元素。
  7. v.erase(pointer1,pointer2) 删除pointer1到pointer2中间（包括pointer1所指）的元素。  
vector中删除一个元素后，此位置以后的元素都需要往前移动一个位置，虽然当前迭代器位置没有自动加1，  
但是由于后续元素的顺次前移，也就相当于迭代器的自动指向下一个位置一样。
  8. v1==v2 判断v1与v2是否相等。
  9. ！=、、>= 保持这些操作符惯有含义。
  10. vector::iterator p=v1.begin( ); p初始值指向v1的第一个元素。*p取所指向元素的值。  
对于const vector只能用vector::const_iterator类型的指针访问。
  11. p=v1.end( ); p指向v1的最后一个元素的下一位置。
  12. v.clear() 删除容器中的所有元素。
  13. v.resize(2 _v.size)或v.resize(2_ v.size, 99) 将v的容量翻倍(并把新元素的值初始化为99)
    #include 
    #include 
    using namespace std;
    int main()
    {
        vector test;
        //创建一个vector，并且将5个数值压入容器
        for(int i=0; i test1(5,2);
        if(test1 == test)