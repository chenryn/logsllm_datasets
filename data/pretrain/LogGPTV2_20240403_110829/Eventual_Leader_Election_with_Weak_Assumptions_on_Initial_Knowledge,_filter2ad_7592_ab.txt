before the protocol starts, there is no way for the other
processes to learn its id and suspect it). This observation
makes Ω more attractive than 3S as its implementation can
require weaker assumptions. This paper investigates the
implementation of Ω in asynchronous systems that satisfy
rather weak assumptions on the initial knowledge of each
process, and the behavior of the underlying network. Two
protocols are presented.2.
The ﬁrst protocol assumes the following initial knowl-
edge assumptions:
• (K1) A process knows initially neither n, nor t, nor the
id of the other processes.
It only knows its own id,
and the fact that the ids are totally ordered and no two
processes have the same id.
• (K2) Each process initially knows the lower bound (de-
noted α) on the number of correct processes. This
means that all but α processes can crash in any run
R (α can be seen as the differential value n − t).
This protocol is designed for the runs R where the underly-
ing network satisﬁes the two following behavioral proper-
ties:
• (C1) Each ordered pair of processes that are correct in
R is connected by a directed path made up of correct
processes and fair lossy links.
• (C2) Given a process p correct in R, let reach(p) be
the set of the processes that are correct in R and acces-
sible from p through directed paths made up of correct
processes and eventually timely links.
There is at
least one correct process p such that
|reach(p)| ≥ t − f , where f is the number of actual
crashes during the run R.
The design principles of the protocol based on the
previous assumptions are the following. As t is an upper
bound on the number of process crashes, it is relatively
simple to design a leader protocol for the runs in which
exactly t processes crash as, once t processes have crashed,
the system cannot experience more crashes (it is then
fault-free). The protocol is based on that simple principle:
the more processes have crashed, the simpler it is to elect a
leader, and the process that is eventually elected as the ﬁnal
common leader is the process that is the least suspected
(this “technique” is used in many leader protocols). Inter-
estingly, this protocol tolerates message duplication.
The paper then considers the design of a communication-
efﬁcient protocol when the process’ initial knowledge is re-
stricted to (K1). This protocol works in any run R that sat-
isﬁes the following network behavioral properties:
• (C1’): Each pair of processes that are correct in R is
connected by (typed) fair lossy links (one in each di-
rection).
2The assumptions or properties related to the initial knowledge of each
process are identiﬁed by the letter K, while the ones related to the network
behavior are identiﬁed by the letter C.
Proceedings of the 2006 International Conference on Dependable Systems and Networks (DSN’06) 
0-7695-2607-1/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:12:21 UTC from IEEE Xplore.  Restrictions apply. 
• (C2’): There is a process correct in R whose output
links to every correct process are eventually timely.
This protocol guarantees that after some time, only the
common leader sends messages forever.
It also satisﬁes
the following noteworthy property: be the execution ﬁnite
or inﬁnite, both the size of the local memories and the
size of the messages remain ﬁnite. Differently from the
ﬁrst protocol, this protocol assumes that no link duplicates
messages. Its design combines new ideas with ideas used
in [1, 2, 11].
To our knowledge, [11] is the only paper that has pro-
posed a leader election protocol for processes that only
know their own identity (K1). The ﬁrst leader election pro-
tocol presented in this paper is the ﬁrst that combines this
weak assumption with knowledge of α, allowing weaker
network behavioral properties. The second protocol is the
ﬁrst that achieves communication efﬁciency with assump-
tion (K1).
requirements
((K1,K2,C1,C2) vs
These protocols show interesting tradeoffs between
(K1,C1’,C2’)),
their
and the additional communication-efﬁcient property they
provide or not. A problem that remains open consists
in designing (or showing the impossibility of designing)
a communication-efﬁcient protocol relying on network
assumptions weaker than (K1,C1’,C2’).
Interestingly, it is possible to state a lower bound on what
can be done in an asynchronous system where the initial
knowledge of any process includes neither t nor α. This
lower bound states that, in such systems, there is no leader
protocol in the runs where less than n − 1 links eventu-
ally behave in a timely manner. Due to page limitation, the
reader will ﬁnd the proof of this theorem in [7].
Roadmap The paper is made up of four sections. Section
2 presents the distributed system model. Section 3 presents
the ﬁrst protocol and proves it is correct. Section 4 presents
the communication-efﬁcient protocol. Due to page limita-
tion it has not been possible to include the proofs of these
protocols (although they are very important). The reader
can ﬁnd them in [7].
2 Distributed System Model
2.1 Synchronous Processes with Crash Failures
The system is made up of a ﬁnite set Π of n processes.
Each process pi has an id. The process ids are totally or-
dered (e.g., they are integers), but need not be consecutive.
Sometimes we also use p or q to denote processes.
As indicated in the introduction, initially, a process pi
knows its own id (i) and the fact that no two processes have
the same id. A process can crash (stop executing). Once
crashed, a process remains crashed forever. A process ex-
ecutes correctly until it possibly crashes. A process that
crashes in a run is faulty in that run, otherwise it is correct.
The model parameter t denotes the maximum number of
processes that can crash in a run (1 ≤ t . The function lex min(X) returns the smallest
pair in X according to lexicographical order.
• (C2’): There is a correct process whose output links to
every correct process are eventually timely.
Local variables The local variables shared and managed
by the two tasks are the following ones.
Let us observe that the property (C2) is always satisﬁed in
the runs where f = t (the maximum number of processes
allowed to crash effectively crash). Moreover, (C1’) and
(C2’) are stronger than (C1) and (C2), respectively.
2.3 The Class Ω of Oracles
Ω has been deﬁned informally in the introduction. A
leader oracle is a distributed entity that provides the pro-
cesses with a function leader() that returns a process id each
time it is invoked. A unique correct process is eventually
elected but there is no knowledge of when the leader is
elected. Several leaders can coexist during an arbitrarily
• membersi : set containing all the process ids that pi is
aware of.
• timeri[j]: timer used by pi to check if the link from pj
is timely. The current value of timeouti[j] is used as