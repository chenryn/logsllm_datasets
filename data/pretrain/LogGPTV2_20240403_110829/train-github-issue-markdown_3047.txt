### What problem does this feature solve?
Many data visualization and graphics library do DOM manipulation and most of
them the DOMElement can be extracted.
    const rect = SVG.adopt(this.$refs.rect.elm)
    rect.node // this is the SVGElement and in chrome console will output 
Let's say we want to build an abstraction by design it as a component that can
draw a rectangle and after the drawing is done (by hold&drag mouse button)
that rectangle will be placed in another section. The usage will be like this:
and `` will be like this
After the drawing is done, the rectangle will be moved and fill it with black
(or SVG texture for the more complex case). This can be done by clone the
element in `drawing` slots to `annotation` slot.
    const rect = SVG.adopt(this.$slots.drawing[0].elm)
    rect.on('click', event => doDrawingLogic(event))
    rect.on('drawfinish', event => {
    // the reason to clone and move slot is so any logic in annotation slot can be applied
    // the clone itself is to preserve `` so that it can be referenced again
    /** some logic here */
    })
In that case there is need to make createElement accept DOMElement for
duplicating or maybe also converting Node to VNode.
    newRect = newRect.clone().animate().dmove(100, 100)
    const clone = this.$createElement(newRect.node)
    this.$slots.annotation.push(clone)
> In above example, if createElement act as creating element then there will
> be 2 rectangles lol
### What does the proposed API look like?
Basic usage
    const div = document.getElementById("myDiv")
    this.$createElement(div)
Clone and move from 1 slots to another slot
    const clone = this.$createElement(this.$slots.mySlot[0].elm)
    this.$slots.default.push(clone)