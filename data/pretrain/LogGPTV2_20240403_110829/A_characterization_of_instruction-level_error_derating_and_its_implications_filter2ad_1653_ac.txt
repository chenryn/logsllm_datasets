shifts/extracts/inserts, of inserted sub-words, and of 32-bit
arithmetic (e.g., addl) for this 64-bit machine, as well as
1-4244-2398-9/08/$20.00 ©2008 IEEE
486
DSN 2008: Cook &Zilles
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 13:20:33 UTC from IEEE Xplore.  Restrictions apply. 
International Conference on Dependable Systems &Networks: Anchorage, Alaska, June 24-27 2008
(a) Value Comparison
(b) Subword Operation
(c) Logical Operation
[Oxg10 rlJ
[Ox20 r2J
~;/
bne rl, r2, A,
[}ranch taken]
(d) Overflow I Precision
[OX1~ rlJ
srl rl,
~/'
[OX4 r2 ]
r2 -+ r3,
[OX1 r3 ]
[Oxg10 rlJ
[Ox20 r2J
~;/
~[OX20] = OX10~
Lucky Load
stb rl, O(r2)•
lb r3, O(r2),
•
[OxO r3 ]
(e)
M[Ox20] = M[Ox40] = 0
[ob~1 00000 r2J
[Oxg10 rlJ
~;/
[Ox20 r2J
r2 -+ r3,
[Ox010 r3J
and rl,
(1) Dynamically Dead
[OXB10 rlJ
[Ox20 r2J
~;/
add rl,
r2 -+ r3
r3 not read before written
Figure 4: Examples of the six classes of mechanisms leading to instruction-level error derating. In each of these exam(cid:173)
ples, the shaded bits of the inputs may be flipped without changing the instruction's outcome.
copy sign, cpys, operations which only inspect the sign bit
of one of their floating point register inputs.
The third class, logical operations, derates errors that oc(cid:173)
cur in AND operations when the corresponding bit in the
other operand is 0, as well as OR operations when the cor(cid:173)
responding bit in the other operand is 1. In addition to AND
and OR operations (e.g., and and bis), the mask (e.g.,
mskqh) and extract (e.g., extbl) operations fall into this
category, which represents 24% of the correct values pro(cid:173)
duced by incorrect inputs.
The fourth class, overflow/precision,
is the source of
roughly 5% of correct operations on incorrect values. As
shown in Figure 4(d),
this class accounts for operations
where the faulty bit is shifted off one end of the word, such
that it is not part of the output; in the Alpha architecture
such shifts occur both in isolation (e.g., sll and srl) as
well as those that are part of scaled adds and subtracts (e.g.,
s8addl and s4subq). In addition, we include in this cat(cid:173)
egory the small number of cases when erroneous inputs do
not affect the output because they either overflow the output
register (e.g., if you flip the top bit of one operand in a mul(cid:173)
tiplication, mull, and the other operand's LSB is not set)
or, for floating point operations, there is no impact due to a
lack of precision (e.g., if the LSB of the mantissa of a FP
register is flipped and it is added to a much larger number).
The fifth class, representing less than 4% of instructions
that take erroneous values and produce correct values, is
lucky loads. These instructions take an erroneous base ad(cid:173)
dress register (for example) and result in a load of the cor-
rect value in spite of this incorrect address. As is to be ex(cid:173)
pected, this largely occurs when common values (e.g., zero)
are loaded.
In addition to these instructions that generate correct val(cid:173)
ues, a major source of software error tolerance is dynam(cid:173)
ically dead values [6]. These are values that are com(cid:173)
puted but then not used before another instruction over(cid:173)
writes them. Such values are generally computed for use
by a program path that doesn't end up getting taken; they
result both from the way that the program is written and
from compiler scheduling -
especially by the OSF com(cid:173)
piler - when an instruction is hoisted above a branch. In
the Gee optimized code, about 15% of fault injections that
are derated are the result of dynamically dead code; in the
OSF optimized code this number increases to almost 30%.
4.3. Fault Propagation and Derating Time-scale
Each injection trial result can be classified not only by
whether the trial passed or failed, but also whether the fault
propagated beyond the injected instruction to subsequent in(cid:173)
structions, as shown in Figure 5. As can be seen, even when
faults are masked, it often does not happen immediately.
Over half of the faults that are eventually masked propagate
to at least one other instruction.
When we measure how far faults propagate, we observe
that there are two events that mark the end of a derated
(passing) fault injection's lifetime: 1) the point of the last
use of any erroneous value (either the fault injected value
or a value to which it propagated) and 2) the point at which
1-4244-2398-9/08/$20.00 ©2008 IEEE
487
DSN 2008: Cook &Zilles
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 13:20:33 UTC from IEEE Xplore.  Restrictions apply. 
International Conference on Dependable Systems &Networks: Anchorage, Alaska, June 24-27 2008
100%
90%
80%
70%
Q)
~ 60%
o
U 50%
:£' 40%
15
~ 30%
20%
10%
0% .-...-..........-.......
~'--_._.._....-...
~~..._.._
_...._....
'QiC-~,,<&~ rR~ <f" rfq ~"""q0~~~~~o~0~~~#
'QiC-~,,<&~ rR~ <f" rfq ~"....q0~~~~~o~0~~/
gee -02
fIi'
gee -00
fIi'
~~ ____J_....
_..J_...._.....__
'QiC-~"....,p rR~ <f" rfq i'4b'~0\-i-~~o~l<f I' ~<t,iff
..._~
osf
fIi'
Figure 5: Detailed fault injection classification. Broken down by whether the fault propagated.
(a) erafty (gee -03)
20
8.
~
~
.~
]
80
60
40
20
o '---------L-_---"--_~------l._-----.J
10
o
NumberotAffectedlnstructions
PASS
FAIL
0 ' - - - - - - - ' - - - - - - - - - - ' - - - - - - - - - - - ' - - - - - - - - - - - ' - - - - - - - - - '
o
Number of Dynamic Instructions
last affected PASS
terminates PASS"
last affected FAIL"
terminates FAIL
(b) visual key
p~;~~~a:~~:: Of~
~
,
--==========
average distance (for XO/O of PASSing injections)
from last use to fault masked
~/FAIL
0
1
Number of instructions that use a faulty input
----~ ~
non-zero y-intercept - - - - - - •- -
! _.----------. due to dynamically
dead values
- -
o 1
Number of dynamic instructions proceeding the injected instruction
Figure 6: Cumulative distribution of propagating injections by distance A representative chart from crafty (gcc -03)
and a cartoon explaining how to interpret the chart.
all erroneous values have been expunged from architected
state, i.e., when they have been derated and masked, respec(cid:173)
tively. While these points occur at the same time (because
the last use of an erroneous value overwrites the erroneous
value with a correct value) in 28.3% of derated fault injec(cid:173)
tions, there is a substantial discrepancy between these points
in time in general.
As shown in Figure 6 (additional data in [8]), it is com(cid:173)
mon to find that 90% of last uses occur within 20 instruc(cid:173)
tions of the fault injection, yet the erroneous architectural
register values are not expunged until much later, with 25%
or more persisting for more than 50 dynamic instructions.
This data implies that most of the time a faulty value is
present in the register file,
it is in fact dynamically dead.
As we discuss in Section 5, this can be exploited to reduce
the number of false positives reported by a error detection
mechanism used in dual modular redundancy.
As shown in the inset figure in Figure 6 (additional data
in [8]), most of the passing fault injections affect a relatively
small number of instructions (i.e., over 90% propagate to 4
or less instructions), but these instructions typically span
multiple basic blocks (data not shown). Perhaps it is un(cid:173)
surprising that most of the passing fault injections are both
short lived and have only local impact to the program's data
flow, as we find that over 85% have a linear data-flow graph
(i.e., the data-flow chain that propagates faulty values con(cid:173)
sists entirely of nodes with out-degree of one).
In contrast, for fault injections that fail, there is a single
event that marks the end of the injection trial: when a faulty
value is used and an error occurs. As shown in Figure 6,
this point generally occurs a relatively short time after the
injection, but is generally later than the last use for passing
fault injections. In addition, failing injections tend to affect
a larger number of instructions on average which is likely
1-4244-2398-9/08/$20.00 ©2008 IEEE
488
DSN 2008: Cook &lilies
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 13:20:33 UTC from IEEE Xplore.  Restrictions apply. 
International Conference on Dependable Systems &Networks: Anchorage, Alaska, June 24-27 2008
100
en 90
Co 80
~ 70
:£' 60
C)
.~ 50
en
~ 40
a.
\to- 30o
~ 20
10
Figure 7: Software error derating is a function of the error detection mechanism used. The first bar of each data
series represents the invariant derating rate of both the lock-step (LS) and incremental-periodic error detection schemes. The
remaining bars show not only that the snapshot-periodic scheme has a higher derating rate, but also that it is a function of
time; here, error detection intervals are swept from 1, to 10, 100, and 1000 check-fence instructions. A second experiment
demonstrates that by using static register liveness information, the snapshot-periodic scheme can achieve most of the benefit
of instruction-level derating even when performing error detection every few instructions.
in part why those fault injections fail.
5. Implications for Error Detection
In the introduction, we mentioned a trend in research to(cid:173)
ward processor designs that use robust fault tolerance tech(cid:173)
niques (e.g., dual modular redundancy) to increase perfor(cid:173)
mance and/or reduce power. At present, however, manufac(cid:173)
turers intentionally under-clock and over-provision voltage
in processors to reduce the likelihood of processor faults.
This new research seeks to eliminate the inefficiencies intro(cid:173)
duced by safety margins by running each part at the highest
frequency and lowest voltage it can without frequent faults.
By appropriately setting the clock and voltage, faults will
occasionally occur, but the performance and power cost of
recovering from them (using backward error recovery, for
example) will be outweighed by the benefits achieved from
higher frequency and lower power during the periods of cor(cid:173)
rect execution.
Error derating plays an important role in these architec(cid:173)
tures because faults that are masked before error detection
will not invoke a recovery nor incur the performance and
power costs associated. As a result, when a larger fraction
of faults can be masked, the result is a performance im(cid:173)
provement because clock frequency may be scaled up fur(cid:173)
ther for the same number of recoveries.
It would be easy to assume that all error detection tech(cid:173)
niques that compare architected state would report the same
number of errors, but the data from the previous section sug(cid:173)
gests that this is not the case, for two reasons: first, those
faults that propagate to other instructions have the poten(cid:173)
tial to be masked before being observed, and, second, the
temporal separation between a faulty value's last use and its
subsequent masking creates a time period where it would
be detected as an error but could not affect the program's
outcome (a false positive).
To support these assertions, we evaluate three implemen(cid:173)
tations of error detection techniques for use in dual modu(cid:173)
lar redundant systems -
lock-step, incremental periodic,
and snapshot periodic - which we describe below. Each
of these techniques ensures correct execution by compar(cid:173)
ing the updates to architected state performed by the pair of
processors, relying on mechanisms like ECC to prevent er(cid:173)