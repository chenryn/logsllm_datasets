04620 static void  
04621 sigusr1_handler(SIGNAL_ARGS)  
04622 {  
04623     int         save_errno = errno;  
04624   
04625     PG_SETMASK(&BlockSig);  
04626   
04627     /*  
04628      * RECOVERY_STARTED and BEGIN_HOT_STANDBY signals are ignored in  
04629      * unexpected states. If the startup process quickly starts up, completes  
04630      * recovery, exits, we might process the death of the startup process  
04631      * first. We don't want to go back to recovery in that case.  
04632      */  
04633     if (CheckPostmasterSignal(PMSIGNAL_RECOVERY_STARTED) &&  
04634         pmState == PM_STARTUP && Shutdown == NoShutdown)  
04635     {  
04636         /* WAL redo has started. We're out of reinitialization. */  
04637         FatalError = false;  
04638   
04639         /*  
04640          * Crank up the background tasks.  It doesn't matter if this fails,  
04641          * we'll just try again later.  
04642          */  
04643         Assert(CheckpointerPID == 0);  
04644         CheckpointerPID = StartCheckpointer();  
04645         Assert(BgWriterPID == 0);  
04646         BgWriterPID = StartBackgroundWriter();  
04647   
04648         pmState = PM_RECOVERY;  
04649     }  
04650     if (CheckPostmasterSignal(PMSIGNAL_BEGIN_HOT_STANDBY) &&  
04651         pmState == PM_RECOVERY && Shutdown == NoShutdown)  
04652     {  
04653         /*  
04654          * Likewise, start other special children as needed.  
04655          */  
04656         Assert(PgStatPID == 0);  
04657         PgStatPID = pgstat_start();  
04658   
04659         ereport(LOG,  
04660         (errmsg("database system is ready to accept read only connections")));  
04661   
04662         pmState = PM_HOT_STANDBY;  
04663   
04664         /* Some workers may be scheduled to start now */  
04665         StartOneBackgroundWorker();  
04666     }  
04667   
04668     if (CheckPostmasterSignal(PMSIGNAL_WAKEN_ARCHIVER) &&  
04669         PgArchPID != 0)  
04670     {  
04671         /*  
04672          * Send SIGUSR1 to archiver process, to wake it up and begin archiving  
04673          * next transaction log file.  
04674          */  
04675         signal_child(PgArchPID, SIGUSR1);  
04676     }  
04677   
04678     if (CheckPostmasterSignal(PMSIGNAL_ROTATE_LOGFILE) &&  
04679         SysLoggerPID != 0)  
04680     {  
04681         /* Tell syslogger to rotate logfile */  
04682         signal_child(SysLoggerPID, SIGUSR1);  
04683     }  
04684   
04685     if (CheckPostmasterSignal(PMSIGNAL_START_AUTOVAC_LAUNCHER) &&  
04686         Shutdown == NoShutdown)  
04687     {  
04688         /*  
04689          * Start one iteration of the autovacuum daemon, even if autovacuuming  
04690          * is nominally not enabled.  This is so we can have an active defense  
04691          * against transaction ID wraparound.  We set a flag for the main loop  
04692          * to do it rather than trying to do it here --- this is because the  
04693          * autovac process itself may send the signal, and we want to handle  
04694          * that by launching another iteration as soon as the current one  
04695          * completes.  
04696          */  
04697         start_autovac_launcher = true;  
04698     }  
04699   
04700     if (CheckPostmasterSignal(PMSIGNAL_START_AUTOVAC_WORKER) &&  
04701         Shutdown == NoShutdown)  
04702     {  
04703         /* The autovacuum launcher wants us to start a worker process. */  
04704         StartAutovacuumWorker();  
04705     }  
04706   
04707     if (CheckPostmasterSignal(PMSIGNAL_START_WALRECEIVER) &&  
04708         WalReceiverPID == 0 &&  
04709         (pmState == PM_STARTUP || pmState == PM_RECOVERY ||  
04710          pmState == PM_HOT_STANDBY || pmState == PM_WAIT_READONLY) &&  
04711         Shutdown == NoShutdown)  
04712     {  
04713         /* Startup Process wants us to start the walreceiver process. */  
04714         WalReceiverPID = StartWalReceiver();  
04715     }  
04716   
04717     if (CheckPostmasterSignal(PMSIGNAL_ADVANCE_STATE_MACHINE) &&  
04718         (pmState == PM_WAIT_BACKUP || pmState == PM_WAIT_BACKENDS))  
04719     {  
04720         /* Advance postmaster's state machine */  
04721         PostmasterStateMachine();  
04722     }  
04723   
04724     if (CheckPromoteSignal() && StartupPID != 0 &&  
04725         (pmState == PM_STARTUP || pmState == PM_RECOVERY ||  
04726          pmState == PM_HOT_STANDBY || pmState == PM_WAIT_READONLY))  
04727     {  
04728         /* Tell startup process to finish recovery */  
04729         signal_child(StartupPID, SIGUSR2);  
04730     }  
04731   
04732     PG_SETMASK(&UnBlockSig);  
04733   
04734     errno = save_errno;  
04735 }  
```  
4\. src/backend/access/transam/xlog.c  
```  
09568 /*  
09569  * Check to see if a promote request has arrived. Should be  
09570  * called by postmaster after receiving SIGUSR1.  
09571  */  
09572 bool  
09573 CheckPromoteSignal(void)  
09574 {  
09575     struct stat stat_buf;  
09576   
09577     if (stat(PROMOTE_SIGNAL_FILE, &stat_buf) == 0 ||  
09578         stat(FAST_PROMOTE_SIGNAL_FILE, &stat_buf) == 0)  
09579         return true;  
09580   
09581     return false;  
09582 }  
```  
5\. src/backend/postmaster/startup.c  
```  
00106 /* SIGUSR2: set flag to finish recovery */ 00107 static void 00108 StartupProcTriggerHandler(SIGNAL_ARGS) 00109 { 00110     int         save_errno = errno; 00111  00112     promote_triggered = true; 00113     WakeupRecovery(); 00114  00115     errno = save_errno; 00116 }  
```  
6\. src/backend/access/transam/xlog.c  
```  
00438     /*  
00439      * recoveryWakeupLatch is used to wake up the startup process to continue  
00440      * WAL replay, if it is waiting for WAL to arrive or failover trigger file  
00441      * to appear.  
00442      */  
00443     Latch       recoveryWakeupLatch;  
09584 /*  
09585  * Wake up startup process to replay newly arrived WAL, or to notice that  
09586  * failover has been requested.  
09587  */  
09588 void  
09589 WakeupRecovery(void)  
09590 {  
09591     SetLatch(&XLogCtl->recoveryWakeupLatch);  
09592 }  
```  
7\. src/include/storage/latch.h  
```  
00090 /*  
00091  * Latch structure should be treated as opaque and only accessed through  
00092  * the public functions. It is defined here to allow embedding Latches as  
00093  * part of bigger structs.  
00094  */  
00095 typedef struct  
00096 {  
00097     sig_atomic_t is_set;  
00098     bool        is_shared;  
00099     int         owner_pid;  
00100 #ifdef WIN32  
00101     HANDLE      event;  
00102 #endif  
00103 } Latch;  
```  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")