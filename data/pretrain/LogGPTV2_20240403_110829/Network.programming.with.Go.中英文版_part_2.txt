needs to act as a client to other servers, such as a business logic server getting
information from a database server. And of course, there could be multiple clients
with multiple servers
还有单一客户端，多个服务器的情况：
当一个服务器需要作为其它服务器的客户端时，这种情况就会经常发生，例如当业务逻辑服务器
从数据库服务器获取信息时。当然，还可以有多个客户端，多个服务器的情况。
1.12 Component Distribution 组件分布
A simple but effective way of decomposing many applications is to consider them as
made up of three parts:
分解一些应用的一个简单有效的方式就是把它们看做三部分：
 Presentation component
 Application logic
 Data access
 表现组件
 应用逻辑
 数据访问
The presentation component is responsible for interactions with the user, both
displaying data and gathering input. it may be a modern GUI interface with buttons,
lists, menus, etc, or an older command-line style interface, asking questions and
getting answers. The details are not important at this level.
表现组件负责与用户进行交互，即显示数据和采集输入。它可以是带有按钮、列表和菜单等等的现代
GUI 界面，或较老的命令行式界面，询问问题并获取答案。在这一层上，具体详情并不重要。
The application logic is responsible for intrepreting the users' responses, for
applying business rules, for preparing queries and managing responses from the thir
component.
应用逻辑组件负责解释用户的响应，根据应用业务规则，准备查询并管理来自其组件的响应。
The data access component is responsible for stroing and retrieving data. This will
often be through a database, but not necessarily.
数据访问组件负责存储并检索数据。这一般是通过数据库进行，不过也不一定。
Gartner Classification
Gartner 分类
Based on this threefold decomposition of applicaitons, Gartner considered how the
components might be distributed in a client-server sysem. They came up with five
models:
基于这三部分的应用划分，Gartner公司考虑了这些组件在客户端-服务器系统中如何分布。他们想
出了五种模型：
Example: Distributed Database
示例：分布式数据库
 Gartner classification: 1
 Gartner 第一种分类：
Modern mobile phones make good examples of this: due to limited memory they may store
a small part of a database locally so that they can usuall respond quickly. However,
if data is required that is not held locally, then a request may be made to a remote
database for that additional data.
现代的移动电话就是个很好的例子：由于内存有限，它们只能通过存储一小部分本地数据库，因此它
们通常能快速响应。若请求的数据不在本地，那么可为该附加数据请求远程数据库。
Google maps forms another good example. Al of the maps reside on Google's servers.
When one is requested by a user, the "nearby" maps are also downloaded into a small
database in the browser. When the user moves the map a little bit, the extra bits
required are already in the local store for quick response.
Google 地图的形式是另一个很好的例子。所有的地图都在Google 的服务器上。当用户请求时，“附
近的”地图也会下载为一个浏览器中的小型数据库。当用户移动了一点地图时，额外的一点请求已经
为快速响应在本地存储中了。
Example: Network File Service
示例：网络文件服务
Gartner classification 2 allows remote clients acess to a shared file system
There are many examples of scuh systems: NFS, Microsoft shares, DCE, etc
Gartner 第二种分类允许远程客户端访问已共享的文件系统：
这里有一些这类系统的例子：NFS、Microsoft 共享和 DCE 等等。
Example: Web
示例：Web
An example of Gartner classification 3 is the Web with Java applets. This is a
distributed hypertext system, with many additional mechanisms
Gartner 第三种分类的一个例子就是 Web 上的小型Java 应用。以下为带有一些附加机制的分布式超
文本系统：
Example: Terminal Emulation
示例：终端仿真
An example of Gartner classification 4 is terminal emulation. This allows a remote
system to act as a normal terminal on a local system.
Telnet is the most common example of this.
Gartner 第四种分类就是终端仿真。这允许远程系统在本地系统上作为普通的终端：
Telnet 就是最常见的例子。
Example: Expect
示例：预期（Expect）
Expect is a novel illustration of Gartner classification 5. It acts as a wrapper
around a classical system such as a command-line interface. It builds an X Window
interface around this, so that the user interacts with a GUI, and the GUI in turn
interacts with the command-line interface.
预期（Expect）是Gartner 第五种分类的一种另类的演示。它的行为类似于命令行接口这样的经典
系统。它在此之上建立了X 窗口界面，以此来让用户与GUI 进行交互，然后GUI 转而与命令行界面
进行交互。
Example: X Window System
示例：X 窗口系统
The X Window System itself is an example of Gartner classification 5. An application
makes GUI calls such as DrawLine, but these are not handled directly but instead
passed to an X Window server for rendering. This decouples the application view of
windowing and the display view of windowing.
X 窗口系统本身也是Gartner 第五种分类的一个例子。一个应用进行一次像 DrawLine 这样的 GUI
调用，但它并不直接进行处理，而是传递给 X 窗口服务来渲染。这可以解耦窗口应用视图和窗口显示
视图。
Three Tier Models
三层模型
of course, if you have two tiers, then you can have three, four, or more. Some of
the three tier possibilities are shown in this diagram:
当然，如果你有两层，你也可以有三层、四层甚至多层。下图展示了一些可能的三层模型：
The modern Web is a good example of the rightmost of these. The backend is made up
of a database, often running stored procedures to hold some of the database logic.
The middle tier is an HTTP server such as Apache running PHP scripts (or Ruby on
Rails, or JSP pages, etc). This will manage some of the logic and will have data
such as HTML pages stored locally. The frontend is a browser to display the pages,
under the control of some Javascript. In HTML 5, the frontend may also have a local
database.
现代Web 就是最右边那种模型很好的例子。后端建立为一个数据库，经常运行存储过程来保存一些
数据库逻辑。中间层是一个Apache 这样的运行PHP 脚本（或Ruby on Rails，或JSP 页面等）的
HTTP服务器。这会管理一些逻辑和存储在本地的像HTML页面这样的数据。前端为显示由JavaScript
控制的页面的浏览器。在HTML5 中，前端也可以有一个本地数据库。
Fat vs thin
“胖”与“瘦”
A common labelling of components is "fat" or "thin". Fat components take up lots
of memory and do complex processing. Thin components on the other hand, do little
of either. There don't seem to be any "normal" size components, only fat or thin!
组件一般分为“胖”或“瘦”。“胖”组件占用大量的内存来做复杂的处理；“瘦”组件则恰恰相反，只占
少量内存，做简单处理。似乎没有任何“正常”大小的组件，只有“胖”或“瘦”！
Fatness or thinness is a relative concept. Browsers are often laelled as thin because
"all they do is diplay web pages". Firefox on my Linux box takes nearly 1/2 a gigabyte
of memory, which I don't regard as small at all!
“胖”或“瘦”的概念是相对的。浏览器经常被分为“瘦”组件，因为“它仅仅显示Web 页面”。但我的
Linux 盒子中的Firefox 用了将近1/2GB 的内存，我可一点也不觉得它很小！
1.13 Middleware model 中间件模型
Middleware is teh "glue" connecting components of a distributed system. The
middleware model is
中间件是连接器分布式系统组件的“胶水”层。中间件模型如图所示：
1.14 Middleware 中间件
Components of middleware include
中间件组件包括：
 The network services include things like TCP/IP
 The middleware layer is application-independent s/w using the network services
 Examples of middleware are: DCE, RPC, Corba
 Middleware may only perform one function (such as RPC) or many (such as DCE)
 像TCP/IP 这样的网络服务
 中间件层是应用独立的，使用网络服务的软件
 中间件的例子：DCE、RPC、Corba
 中间件可能只执行一种功能（比如RPC）或多种功能（比如DCE）
Middleware examples
中间件示例
Examples of middleware include
中间件的例子包括：
 Primitive services such as terminal emulators, file transfer, email
 Basic services such as RPC
 Integrated services such as DCE, Network O/S
 Distributed object services such as CORBA, OLE/ActiveX
 Mobile object services such as RMI, Jini
 World Wide Web
 像终端模拟器、文件传输或电子邮件这样的基础服务
 像RPC 这样的基础服务
 像DCE、网络O/S 这样的一体化服务
 像CORBA、OLE/ActiveX 这样的分布式对象服务
 像RMI、Jini 这样的移动对象服务
 万维网
Middleware functions
中间件的功能
The functions of middleware include
中间件的功能包括：
 在不同计算机上初始化过程
 进行会话管理
 允许客户端定位服务器的目录服务
 进行远程数据访问
 允许服务器处理多个客户端的并发控制
 保证安全性和完整性
 监控
 终止本地处理和远程处理
1.15 Continuum of Processing 连续处理
The Gartner model is based on a breakdown of an application into the components of
presentation, application logic and data handling. A finer grained breakdown is
Gartner 模型基于将一个应用分解为表现组件、应用逻辑和数据处理。一个更细粒度的分解方式为：
1.16 Points of Failure 故障点
Distributed applications run in a complex environment. This makes them much more
prone to failure than standalone applications on a single computer. The points of
failure include
分布式应用一般运行在复杂的环境中。这使得它比单一计算机上的独立应用更易发生故障。故障点包
括：
 The client side of the application could crash
 The client system may have h/w problems
 The client's network card could fail
 Network contention could cause timeouts
 There may be network address conflicts
 Network elements such as routers could fail
 Transmission errors may lose messages
 The client and server versions may be incompatable
 The server's network card could fail
 The server system may have h/w problems
 The server s/w may crash
 The server's database may become corrupted
 应用可能会在客户端崩溃
 客户端系统可能发生硬件问题
 客户端的网卡可能发生故障
 网络连接可能超时
 网络地址可能冲突
 像路由器这样的网络基础设备可能发生故障
 传输错误可能会失去消息
 客户端与服务器的版本可能不兼容
 服务器的网卡可能发生故障
 服务器系统可能发生硬件问题
 服务器的软件可能崩溃
 服务器的数据库可能损坏
Applications have to be designed with these possible failures in mind. Any action
performed by one component must be recoverable if failure occurs in some other part
of the system. Techniques such as transactions and continuous error checking need
to be employed to avoid errors.
在设计应用时必须考虑这些可能发生的故障。如果故障发生在系统的其它部分，那么由任何一个组件
执行的操作都必须可恢复。这就需要采用事务和持续错误检测这类的计算来避免错误。
1.17 Acceptance Factors 接受因素
 Reliability
 Performance
 Responsiveness
 Scalability
 Capacity
 Security
 可靠性
 性能
 响应性
 可扩展性
 可容性
 安全性
1.18 Transparency 透明度
The "holy grails" of distributed systems are to provide the following:
分布式系统的“圣杯”就是提供以下几点：
 access transparency
 location transparency
 migration transparency
 replication transparency
 concurrency transparency
 scalability transparency
 performance transparency
 failure transparency
 访问透明度
 位置透明度
 迁移透明度
 赋值透明度
 并发透明度
 扩展透明度
 性能透明度
 故障透明度
1.19 Eight fallacies of distributed computing 分布式计算的
八个误区
Sun Microsystems was a company that performed much of the early work in distributed
systems, and even had a mantra "The network is the computer." Based on their
experience over many years a number of the scientists at Sun came up with the following
list of fallacies commonly assumed:
Sun 微系统公司在分布式系统上做很很多早期的工作，他们甚至有一个口头禅：“网络就是计算机”。
基于他们多年的经验，Sun 的科学家总结了以下常见误区：
1. The network is reliable.
2. Latency is zero.
3. Bandwidth is infinite.
4. The network is secure.
5. Topology doesn't change.
6. There is one administrator.
7. Transport cost is zero.
8. The network is homogeneous.
1. 网络是可靠的。
2. 风险为零。
3. 带宽是无限的。
4. 网络是安全的。
5. 拓扑结构不会改变。
6. 没有管理员。
7. 传输成本为零。
8. 网络是均等的。
Many of these directly impact on network programming. For example, the design of
most remote procedure call systems is based on the premise that the network is
reliable so that a remote procedure call will behave in the same way as a local call.
The fallacies of zero latency and infinite bandwidth also lead to assumptions about
the time duration of an RPC call being the same as a local call, whereas they are
magnitudes of order slower.
这些问题直接影响着网络编程。例如，大部分远程过程调用系统的设计都基于网络是可靠的前提，从
而导致了远程过程调用的行为与本地调用如出一辙。零风险和无限带宽的误区也导致了RPC 调用的
持续时间与本地调用相同的臆断，但实际上它要比本地调用慢很多。
The recognition of these fallacies led Java's RMI (remote method invocation) model
to require every RPC call to potentially throw a RemoteException. This forced
programmers to at least recognise the possibility of network error and to remind
them that they could not expect the same speeds as local calls.
对于这些错误的认识导致了Java 的RMI（远程方法调用）模型要求每一个潜在的RPC 调用都要抛出
一个 RemoteException 异常。这迫使程序员至少认识到了网络错误的可能性，并提醒他们不要期望
这会与本地调用的速度相同。
Copyright Jan Newmarch, PI:EMAIL
版权所有 © Jan Newmarch, PI:EMAIL
If you like this book, please contribute using Flattr
or donate using PayPal
如果你喜欢本书，请通过Flattr
或使用PayPal 捐赠。
Chapter 2 第二章
Overview of the Go language Go 语言概括
2.1 Introduction 介绍
Please go to the main index for the content pages for network computing.
请访问导航页获取Go 网络编程的其他页面
I don't feel like writing a chapter introducing Go right now, as there are other
materials already available. There are several tutorials on the Go web site:
我目前还不想写介绍Go 的章节，因为目前已经有很多这方面的材料存在，在Go 官方网站上有很多
这样的入门:
 Getting started
 A Tutorial for the Go Programming Language
 Effective Go
 安装入门
 Go 程序设计入门
 Go 高级编程
There is an introductory textbook on Go: "Go Programming" by John P. Baugh available
from Amazon
目前有一本介绍Go 的书: "Go Programming" 作者 John P. Baugh Amazon
There is a #golang group on Google+
Google+上有一个讨论组：#golang
Copyright Jan Newmarch, PI:EMAIL
If you like this book, please contribute using Flattr
or donate using PayPal
Chapter 3 第三章
Socket-level Programming 套接字级编程
This chapter looks at the basic techniques for network programming. It deals with
host and service addressing, and then considers TCP and UDP. It shows how to build
both servers and clients using the TCP and UDP Go APIs. It also looks at raw sockets,
in case you need to implement your own protocol above IP.
本章将着眼于网络编程的基础方法，将涉及到主机和服务寻址，也会考虑到TCP 和UDP。同时也将展
示如何使用GO 的 TCP 和UDP 相关的API 来构建服务器和客户端。最后介绍了原生套接字，如果你需
要基于IP 协议实现你自己的协议的话。
3.1 Introduction 介绍
There are many kinds of networks in the world. These range from the very old such
as serial links, through to wide area networks made from copper and fibre, to wireless
networks of various kinds, both for computers and for telecommunications devices
such as phones. These networks obviously differ at the physical link layer, but in
many cases they also differed at higher layers of the OSI stack.
世上存在很多种网络。它们涵盖了从古老如串行链路，到为计算机或手机这样的通讯设备所搭建的铜
缆和光纤的广域网，或各种各样的无线网络。在物理链路层它们区别明显，但很多时候，在更高层次
的OSI 模型它们也存在差异。
Over the years there has been a convergence to the "internet stack" of IP and TCP/UDP.
For example, Bluetooth defines physical layers and protocol layers, but on top of
that is an IP stack so that the same internet programming techniques can be employed
on many Bluetooth devices. Similarly, developing 4G wireless phone technologies such