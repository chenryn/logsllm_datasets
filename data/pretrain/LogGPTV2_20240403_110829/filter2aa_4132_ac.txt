- SQL注入
- XSS
- 文件遍历、文件上传、文件下载
- 垂直越权、水平越权
- 逻辑漏洞
### 挖过什么逻辑漏洞
#### 订单任意金额修改
相同价格增加订单数量，相同订单数量减少产品价格，订单价格设定为负数。
预防思路：
- 订单需要多重效验
- 订单数值较大的时候需要人工审核
#### 验证码回传
漏洞一般发生在账号密码找回、账号注册、支付订单等。验证码发送途径一般为手机短信、邮箱邮件
预防思路：
- response数据内不包含验证码，验证方式主要采取后端验证，但是缺点是服务器的运算压力也会随之增加
- 如果要进行前端验证的话也可以，但是需要进行加密
#### 未进行登陆凭证验证
有些业务的接口，因为缺少了对用户的登陆凭证的效验或者是验证存在缺陷，导致黑客可以未经授权访问这些敏感信息甚至是越权操作。比如后台页面、订单ID枚举、敏感信息可下载、没验证ID或cookie验证导致越权。
预防思路：
- 对敏感数据存在的接口和页面做cookie，ssid，token或者其它验证
#### 接口无限制枚举
- 某电商登陆接口无验证导致撞库
- 某招聘网验证码无限制枚举
- 某快递公司优惠券枚举
- 某电商会员卡卡号枚举
预防思路：
- 在输入接口设置验证，如token，验证码等。如果设定验证码，最好不要单纯的采取一个前端验证，最好选择后端验证。如果设定token，请确保每个token只能采用一次，并且对token设定时间参数。
- 注册界面的接口不要返回太多敏感信息，以防遭到黑客制作枚举字典。
- 验证码不要用短数字，尽量6位以上，最好是以字母加数字进行组合，并且验证码需要设定时间期限。
- 优惠券，VIP卡号请尽量不要存在规律性和简短性，并且优惠券最好是以数字加字母进行组合。
#### cookie设置存在缺陷
- Cookie的效验值过于简单。有些web对于cookie的生成过于单一或者简单，导致黑客可以对cookie的效验值进行一个枚举.
- cookie存在被盗风险，即用户重置密码后使用老cookie依然可以通过验证
- 用户的cookie数据加密应严格使用标准加密算法，并注意密钥管理。不能采取简单的base64等算法
- 越权：平行越权：权限类型不变，权限ID改变；垂直越权：权限ID不变，权限类型改变；交叉越权：即改变ID，也改变权限
预防思路
1. cookie中设定多个验证，比如自如APP的cookie中，需要sign和ssid两个参数配对，才能返回数据。
2. 用户的cookie数据加密应严格使用标准加密算法，并注意密钥管理。
3. 用户的cookie的生成过程中最好带入用户的密码，一旦密码改变，cookie的值也会改变。
4. cookie中设定session参数，以防cookie可以长时间生效。
5. 根据业务不同还有很多方法
### 找回密码功能缺陷
2. 单纯读取内存值作为用户凭证
3. 电商系统加车、下单漏洞
### 你常用的渗透工具有哪些，最常用的是哪个？
#### 扫描:Nessus,AWVS,Nikto
#### SQLmap
> https://blog.csdn.net/ski_12/article/details/58188331
常用参数
```
-u 单个URL -m xx.txt 多个URL
-d "mysql://user:PI:EMAIL:3306/dvwa"  作为服务器客户端，直接连接数据库
--data post/get都适用
-p 指定扫描的参数
-r 读取文件
-f 指纹信息
--tamper 混淆脚本，用于应用层过滤
--cookie --user-agent --host等等http头的修改
--threads 并发线程 默认为1
--dbms MySQL 指定数据库或版本
–level=LEVEL 执行测试的等级（1-5，默认为 1）
–risk=RISK 执行测试的风险（0-3，默认为 1） Risk升高可造成数据被篡改等风险
–current-db / 获取当前数据库名称
–dbs 枚举数据库管理系统数据库
–tables 枚举 DBMS 数据库中的表
–columns 枚举 DBMS 数据库表列
-D DB 要进行枚举的数据库名
-T TBL 要进行枚举的数据库表
-C COL 要进行枚举的数据库列
-U USER 用来进行枚举的数据库用户
```
常用的tamper
> 本地：sqlmap-tamper分类.xlsx
```
base64encode.py #转为b64编码
charencode.py url编码
chardoubleencode.py 双URL编码
unmagicquotes.py 宽字节
randomcomments.py 用/**/分割SQL关键字
space2plus.py space2comment.py space2xxxx.py 替换空格为xx
```
#### Nmap
```
nmap hostname/ip或者多个ip或者子网192.168.123.*
-iL ip.txt 扫描ip.txt的所有ip
-A 包含了-sV，-O，探测操作系统信息和路由跟踪。一般不用，是激烈扫描
-O 探测操作系统信息
-sV 查找主机服务版本号
-sA 探测该主机是否使用了包过滤器或防火墙
-sS 半开扫描，一般不会记入日志，不过需要root权限。
-sT TCP connect()扫描，这种方式会在目标主机的日志中记录大批的链接请求以及错误信息。
-sP ping扫描，加上这个参数会使用ping扫描，只有主机存活，nmap才会继续扫描，一般最好不加，因为有的主机会禁止ping，却实际存在。
-sN TCP空扫描
-F 快速扫描
-Pn 扫描之前不使用ping，适用于防火墙禁止ping，比较有用。
-p 指定端口/端口范围
-oN 将报告写入文件
-v 详细信息
-T 设定速度
```
Nmap还可以用到爆破等一些脚本
```
--script all 使用所有脚本
--script=sql.injection.nse sql注入
--script="smb*"  扫smb系列
```
#### Metasploit
使用内置模块。HR：常用的模块有哪些？
tcp反向链接 msfvenom
#### Hydra
密码爆破工具，FTP，MSSQL，MYSQL，POP3，SSH，rdp，
```bash
hydra IP -l loginname -P pass.txt PROTROCL
hydra 127.0.0.1 -l root -P pass.txt ssh
```
#### kali信息收集工具
- dig
- whois
- host:查询dns服务器
- nslookup
- 域名枚举：fierse -dns
- maltego
- onesixtyone
#### 流量分析WireShark
CTF
### 描述一个你深入研究过的CVE或POC(ms17-010/最新的CVE)
## 数据库注入
> https://www.zhihu.com/question/22953267
### MySQL面试题
#### MySQL存储引擎？
1. InnoDB：主流的存储引擎。支持事务、支持行锁、支持非锁定读、支持外键约束
- 为MySQL提供了具有提交、回滚和崩溃恢复能力的事物安全（ACID兼容）存储引擎。InnoDB锁定在行级并且也在 SELECT语句中提供一个类似Oracle的非锁定读。这些功能增加了多用户部署和性能。在SQL查询中，可以自由地将InnoDB类型的表和其他MySQL的表类型混合起来，甚至在同一个查询中也可以混合
- InnoDB存储引擎为在主内存中缓存数据和索引而维持它自己的缓冲池。InnoDB将它的表和索引在一个逻辑表空间中，表空间可以包含数个文件（或原始磁盘文件）。这与MyISAM表不同，比如在MyISAM表中每个表被存放在分离的文件中。InnoDB表可以是任何尺寸，即使在文 件尺寸被限制为2GB的操作系统上
- InnoDB支持外键完整性约束，存储表中的数据时，每张表的存储都按主键顺序存放，如果没有显示在表定义时指定主键，InnoDB会为每一行生成一个6字节的ROWID，并以此作为主键
2. MyISAM：访问速度快，不支持事务，逐渐被淘汰
3. MEMORY：BTREE索引或者HASH索引。将表中数据放在内存中，并发性能差。`information_schema`用的是该引擎
4. MERGE、Archive等等不常用的
#### 什么是事务？
事务是一组原子性的SQL语句或者说是一个独立的工作单元，如果数据库引擎能够成功对数据库应用这组SQL语句，那么就执行，如果其中有任何一条语句因为崩溃或其它原因无法执行，那么所有的语句都不会执行。也就是说，事务内的语句，要么全部执行成功，要么全部执行失败。
举个银行应用的典型例子：
假设银行的数据库有两张表：支票表和储蓄表，现在某个客户A要从其支票账户转移2000元到其储蓄账户，那么至少需求三个步骤：
a.检查A的支票账户余额高于2000元；
b.从A的支票账户余额中减去2000元；
c.在A的储蓄账户余额中增加2000元。
这三个步骤必须要打包在一个事务中，任何一个步骤失败，则必须要回滚所有的步骤，否则A作为银行的客户就可能要莫名损失2000元，就出问题了。这就是一个典型的事务，这个事务是不可分割的最小工作单元，整个事务中的所有操作要么全部提交成功，要么全部失败回滚，不可能只执行其中一部分，这也是事务的原子性特征。
#### 读锁和写锁
读锁是共享的，即相互不阻塞的，多个客户在同一时刻可以读取同一资源，互不干扰。写锁是排他的，即一个写锁会阻塞其它的写锁和读锁，只有这样，才能确保给定时间内，只有一个用户能执行写入，防止其它用户读取正在写入的同一资源。写锁优先级高于读锁。
#### MySQL的索引
索引是帮助MySQL高效获取数据的数据结构。MYISAM和InnoDB存储引擎只支持BTree索引；MEMORY和HEAP储存引擎可以支持HASH和BTREE索引。
#### ORDER BY在注入的运用
#### GPC是什么？GPC之后怎么绕过？
如果`magic_quotes_gpc=On`，PHP解析器就会自动为post、get、cookie过来的数据增加转义字符“\”，以确保这些数据不会引起程序，特别是数据库语句因为特殊字符（认为是php的字符）引起的污染。
#### Mysql一个@和两个@什么区别
- @为用户变量，使用`SET @var1=1`赋值
- @@ 为系统变量 ，包括全局变量`show global variables \G;`和会话变量`show session variables \G;`
#### 注入/绕过常用的函数
1. 基于布尔SQL盲注