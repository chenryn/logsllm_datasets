Seven	
  Ways	
  to	
Hang	
  Yourself	
  with	
Google	
  Android	
Yekaterina Tsipenyuk O'Neil 
Principal Security Researcher 
Erika Chin 
Ph.D. Student at UC Berkeley 
§  Founding	
  Member	
  of	
  the	
  Security	
  Research	
Group	
  at	
  For@fy	
  (now	
  an	
  HP	
  Company)	
§  Code	
  audits,	
  iden@fying	
  insecure	
  coding	
paFerns,	
  and	
  providing	
  security	
  content	
  for	
For@fy's	
  soHware	
  security	
  products	
§  B.S.	
  and	
  M.S.	
  in	
  CS	
  from	
  UC	
  San	
  Diego	
§  Thesis	
  focused	
  on	
  mobile	
  agent	
  security	
2	
§  Ph.D.	
  student	
  in	
  Computer	
  Science	
  at	
  UC	
Berkeley	
  (Security	
  research	
  group)	
§  B.S.	
  from	
  University	
  of	
  Virginia	
§  Research	
  interest	
  in	
  improving	
  mobile	
  phone	
security	
§  Recently	
  presented	
  at	
  MobiSys	
  2011	
  on	
vulnerabili@es	
  stemming	
  from	
  inter-­‐
applica@on	
  communica@on	
  in	
  Android	
§  Introduc@on	
  to	
  Google	
  Android	
§  Seven	
  Ways	
  to	
  Hang	
  Yourself	
§  Results	
  of	
  Empirical	
  Analysis	
§  Conclusion	
4	
GOOGLE	
  ANDROID	
Introduc)on	
  to	
§  Android	
  architecture	
§  Security	
  model	
§  Applica@on	
  breakdown	
§  Android	
  manifest	
§  Inter-­‐component	
  communica@on	
6	
§  Applica@ons	
§  Applica@on	
  framework	
  (SDK)	
§  Dalvik	
  virtual	
  machine	
– Customized	
  bytecode	
  (.dex	
  ﬁles)	
§  Na@ve	
  libraries	
– Graphics,	
  database	
  management,	
  browser,	
  etc.	
– Accessed	
  through	
  Java	
  interfaces	
§  Linux	
  kernel	
– Device	
  drivers,	
  memory	
  management,	
  etc.	
7	
Lower	
Higher	
§  Applica@ons	
  have	
  unique	
  UIDs	
– Run	
  as	
  separate	
  processes	
  on	
  separate	
  VMs	
– Typically	
  cannot	
  read	
  each	
  other’s	
  data	
  and	
  code	
§  Linux-­‐style	
  ﬁle	
  permissions	
§  Android	
  permissions	
  protect	
– Access	
  to	
  sensi@ve	
  APIs	
– Access	
  to	
  content	
  providers	
– Inter-­‐	
  and	
  intra-­‐applica@on	
  communica@on	
8	
§  Applica@ons	
  are	
  divided	
  into	
  components	
§  4	
  types	
  of	
  components	
– Ac@vi@es	
– Services	
– Broadcast	
  Receivers	
– Content	
  Providers	
Each	
  applica@on	
  contains	
  a	
  manifest	
10	
    ... 
    ... 
§  Uses	
  Intents	
  (messages)	
§  Intents	
  can	
  be	
  sent	
  between	
  components	
– Used	
  for	
  both	
  intra-­‐	
  and	
  inter-­‐applica@on	
communica@on	
– Event	
  no@ﬁca@ons	
  (including	
  system	
  events)	
11	
Sender	
Receiver	
Intent	
§  Exact	
  recipient	
  is	
  speciﬁed	
12	
Yelp	
Map	
App	
Name:	
  MapAc@vity	
To:	
  MapAc@vity	
Only	
  the	
  speciﬁed	
  des@na@on	
  receives	
  this	
  message	
§  LeH	
  up	
  to	
  the	
  plaeorm	
  to	
  decide	
  where	
  it	
should	
  be	
  delivered	
13	
Yelp	
Clock	
App	
Map	
App	
Handles	
  Ac@on:	
  VIEW	
Implicit	
  Intent	
Ac@on:	
  VIEW	
14	
Yelp	
Browser	
App	
Map	
App	
Handles	
  Ac@on:	
  VIEW	
Handles	
  Ac@on:	
  VIEW	
Implicit	
  Intent	
Ac@on:	
  VIEW	
§  Components	
  can	
  be	
  made	
  accessible	
  to	
  other	
applica@ons	
  (exported)	
  or	
  be	
  made	
  private	
§  Components	
  can	
  be	
  protected	
  by	
  permissions	
15	
16	
Displays	
  Picture	
Retrieves	
  Picture	
Requires	
  RETRIEVE	
Permission	
App	
  1	
Has	
  RETRIEVE	
  Permission	
App	
  2	
Takes	
  Picture	
Requires	
  CAMERA	
Permission	
GOOGLE	
  ANDROID	
Seven	
  Ways	
  to	
  Hang	
  Yourself	
  with	
1.  Intent	
  Spooﬁng	
2.  Query	
  String	
  Injec@on	
3.  Unauthorized	
  Intent	
  Receipt	
4.  Persistent	
  Messages:	
  S@cky	
  Broadcasts 	
5.  Insecure	
  Storage	
6.  Insecure	
  Communica@on	
7.  Overprivileged	
  Applica@ons	
§  AFack:	
  Malicious	
  app	
  sends	
  an	
  Intent,	
resul@ng	
  in	
  data	
  injec@on/state	
  change	
§  Arises	
  when	
  components	
  are	
  public	
  and	
  do	
not	
  require	
  senders	
  to	
  have	
  strong	
permissions	
20	
Malicious	
Component	
Results	
  UI	
IMDb	
  App	
Handles	
  Ac@on:	
willUpdateShow?mes,	
show?mesNoLoca?onError	
Ac@on:	
show?mesNoLoca?onError	
Malicious	
Injec)on	
  App	
  Receiving	
  Implicit	
  Intents	
  makes	
  the	
  component	
  public	
21	
Typical	
  case	
AFack	
  case	
  ... 
or	
  ... 
§  Unlike	
  SQL	
  injec@on,	
  SQLite	
  string	
  injec@on	
allows	
  malicious	
  users	
  to	
  view	
  unauthorized	
records,	
  but	
  not	
  to	
  alter	
  the	
  database	
§  Query	
  string	
  injec@on	
  occurs	
  when:	
1.  Data	
  enters	
  a	
  program	
  from	
  an	
  untrusted	
  source	
2.  The	
  data	
  is	
  used	
  to	
  dynamically	
  construct	
  a	
SQLite	
  query	
  string	
c = invoicesDB.query( 
    Uri.parse(invoices),  
    columns,  
    "productCategory = '" +  
        productCategory + "' and  
        customerID = '" + customerID + "'",  
    null,  
    null,  
    null,  
    "'" + sortColumn + "'asc",  
    null 
); 
 select * from invoices 
    where productCategory = 'Fax Machines' and  
    customerID = '12345678' 
    order by 'price' asc 
productCategory	
  =	
  “Fax	
  Machines”	
customerID	
  =	
  “12345678”	
sortColumn	
  =	
  “price”	
Returns	
  invoice	
  records	
  for	
  ONE	
  customer	
 select * from invoices 
    where productCategory = ‘Fax Machines’ or  
    productCategory = "' and customerID =  
       '12345678' order by '" 
    order by 'price' asc 
productCategory	
  =	
  “Fax	
  Machines’	
  or	
  productCategory	
  =	
  \	
  “”	
customerID	
  =	
  “12345678”	
sortColumn	
  =	
  “\”	
  order	
  by	
  ‘price”	
Returns	
  invoice	
  records	
  for	
  ALL	
  customers	
c = invoicesDB.query( 
    Uri.parse(invoices), 
    columns,  
    "productCategory = ? and customerID = ?", 
    {productCategory, customerID},  
    null,  
    null,  
    "'" sortColumn + "'asc", null 
); 
Use	
  parameterized	
  queries!!!	
§  AFack:	
  Malicious	
  app	
  intercepts	
  an	
  Intent	
§  Arises	
  when	
  Intents	
  are	
  implicit	
  (public)	
  and	
do	
  not	
  require	
  receiving	
  components	
  to	
  have	
strong	
  permissions	
§  Can	
  leak	
  sensi@ve	
  program	
  data	
  and/or	
change	
  control	
  ﬂow	
Intent i = new Intent(); 
i.setAction(“my.special.action”); 
[startActivity|sendBroadcast|startService](i); 
29	
Show@me	
Search	
Results	
  UI	
IMDb	
  App	
Handles	
  Ac@ons:	
willUpdateShow?mes,	
show?mesNoLoca?onError	
Implicit	
  Intent	
Ac@on:	
willUpdateShow?mes	
30	
31	
Show@me	
Search	
Results	