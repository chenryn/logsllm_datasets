# Seven Ways to Hang Yourself with Google Android

## Authors
- **Yekaterina Tsipenyuk O'Neil**
  - Principal Security Researcher
  - Founding Member of the Security Research Group at Fortify (now an HP Company)
  - Conducts code audits, identifies insecure coding patterns, and provides security content for Fortify's software security products
  - B.S. and M.S. in Computer Science from UC San Diego
  - Thesis focused on mobile agent security

- **Erika Chin**
  - Ph.D. Student in Computer Science at UC Berkeley (Security research group)
  - B.S. from the University of Virginia
  - Research interests in improving mobile phone security
  - Recently presented at MobiSys 2011 on vulnerabilities stemming from inter-application communication in Android

## Table of Contents
1. Introduction to Google Android
2. Seven Ways to Hang Yourself
3. Results of Empirical Analysis
4. Conclusion

## Introduction to Google Android
### Android Architecture
- **Applications**: User-facing applications.
- **Application Framework (SDK)**: Provides a set of APIs that developers use to build applications.
- **Dalvik Virtual Machine**: Customized bytecode (.dex files).
- **Native Libraries**: Graphics, database management, browser, etc., accessed through Java interfaces.
- **Linux Kernel**: Device drivers, memory management, etc.

### Security Model
- **Unique UIDs**: Each application runs as a separate process on a separate VM.
- **Data Isolation**: Applications typically cannot read each otherâ€™s data and code.
- **File Permissions**: Linux-style file permissions.
- **Android Permissions**: Protect access to sensitive APIs, content providers, and inter- and intra-application communication.

### Application Breakdown
- **Components**:
  - **Activities**: User interface components.
  - **Services**: Long-running background processes.
  - **Broadcast Receivers**: Handle system-wide broadcast announcements.
  - **Content Providers**: Manage access to structured data.

### Android Manifest
- Each application contains a manifest that describes its components and required permissions.

### Inter-Component Communication
- **Intents**: Messages used for both intra- and inter-application communication.
  - **Explicit Intents**: Exact recipient is specified.
  - **Implicit Intents**: Platform decides the destination based on the action.

## Seven Ways to Hang Yourself with Google Android
1. **Intent Spoofing**
   - **Attack**: Malicious app sends an Intent, resulting in data injection or state change.
   - **Vulnerability**: Components are public and do not require strong sender permissions.

2. **Query String Injection**
   - **Unlike SQL Injection**: SQLite string injection allows viewing unauthorized records but not altering the database.
   - **Occurs When**:
     1. Data enters the program from an untrusted source.
     2. The data is used to dynamically construct a SQLite query string.
   - **Mitigation**: Use parameterized queries.

3. **Unauthorized Intent Receipt**
   - **Attack**: Malicious app intercepts an Intent.
   - **Vulnerability**: Implicit (public) Intents do not require receiving components to have strong permissions.
   - **Consequences**: Can leak sensitive program data and/or change control flow.

4. **Persistent Messages: Sticky Broadcasts**
   - **Sticky Broadcasts**: Persist even after the sending application has finished.
   - **Vulnerability**: Can be intercepted and misused by malicious apps.

5. **Insecure Storage**
   - **Vulnerability**: Sensitive data stored without proper encryption or access controls.
   - **Mitigation**: Use secure storage mechanisms and enforce strict file permissions.

6. **Insecure Communication**
   - **Vulnerability**: Data transmitted over insecure channels (e.g., HTTP).
   - **Mitigation**: Use secure communication protocols (e.g., HTTPS).

7. **Overprivileged Applications**
   - **Vulnerability**: Applications request more permissions than necessary.
   - **Mitigation**: Review and minimize the permissions requested by applications.

## Results of Empirical Analysis
- [Insert detailed results of the empirical analysis here, including specific examples and case studies.]

## Conclusion
- [Summarize the key findings and provide recommendations for developers and users to mitigate the identified risks.]

---

This document provides a comprehensive overview of the security risks associated with Android development and offers practical advice for mitigating these risks.