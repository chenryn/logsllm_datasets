groundwork for subsequent exploits. The pioneering work
[19] in this area used model checkers to identify explicit at-
tack sequences. However, this approach suffers from scal-
ability issues because the number of such sequences grows
exponentially with the product of the number of vulnera-
bilities and devices. Later work [15] proposes a new logic
based approach where each node in the graph is a logical
statement and edges are causality relations between network
conﬁgurations and attacker privileges. This results in the at-
tack graph size being polynomial in the size of the network.
We reuse their technique for generating our attack graphs.
We use two algorithms ConstructAttackGraph and Eval-
uateAttackRisk that are executed sequentially for each de-
vice whose security risk is being evaluated. The ﬁrst al-
gorithm constructs a graph depicting all possible ways an
attacker could effect a device’s safety (e.g. compromise of
availability, integrity). The EvaluateAttackRisk algorithm
then uses this output graph as input and calculates the over-
all security risk for the device.
ConstructAttackGraph essentially records a successful
Prolog derivation (an implementation of the backward
chaining algorithm in horn clause logic) as an attack graph
G(cid:48). Similar to [15] the logical attack graph G(cid:48) is a tuple
(Nr, Np, Nd, E(cid:48), τ, γ) where Nr, Np and Nd are three sets
of disjoint nodes in the graph, E(cid:48) ⊂ (Nr × (Np ∪ Nd)) ∪
(Nd × Nr)), τ is a mapping from a node to its label, and
γ ∈ Nd is the attacker goal needed to perform the exploit
rl on device D 4. Nr, Np and Nd are the sets of rule nodes,
primitive fact nodes and derived fact nodes respectively.
Primitive fact nodes Np were described earlier in the con-
struction of G. Nr represent predicate rules that describe
conditions on Np to form derived nodes Nd. The root node
of the attack graph is the goal we are trying to satisfy e.g. ‘is
a device vulnerable to DoS’ while the primitive facts, such
as knowledge about exploits, form the leaves.
4for e.g., codeExecute,DoS to exploit integrity,availability resp.
To ﬁnd the accumulative security risk DM associated
with the root device node we use the following heuristics:
• H1: Security Risk decreases if the ‘length of the paths’ lead-
ing to the victim increases following the analogy that the dif-
ﬁculty accumulated in reaching a target is proportional to the
number of locks to be opened.
• H2: Security Risk increases if the ‘number of paths’ leading
to the target is large. The attacker can use the different paths
simultaneously to break different locks on each path.
We can translate these heuristics into a graph traversal
algorithm (see algorithm 1) that evaluates the security risk.
This algorithm is essentially a variant of the recursive depth-
ﬁrst search algorithm over a directed acyclic graph.
In-
termediate nodes evaluate their security risk by recursively
calling EvaluateAttackRisk on their children and returning
a product of their own risk and that of their children. In-
dividual exploit likelihoods are available from vulnerability
databases such as [18, 21]). We represent the exploitability
as a real-number between 0 and 1 where a higher number
indicates that a device is more vulnerable. An individual
node’s exploitability depends on the set of known individ-
ual vulnerabilities for that node as well as the number of
paths that reach that node. Firstly, a device’s individual
exploitability with n possible individual vulnerabilities is
calculated as 1 − Πn(1 − pn) were pn corresponds to the
exploitability values of individual vulnerabilities. Secondly,
for a vulnerable device with individual expoitability pd and
i possible paths reaching it each with exploitability pi, its
cumulative exploitability is calculated as 1−Πi(1−pd×pi).
This ensures that longer paths will decrease attack risk.
/*initialize Risk=1 for all nodes*/
double procedure EvaluateAttackRisk (V )
if Visited(V ) then
return Risk (V )
end if
markAsVisited(V )
/*A rule node’s individual exploitability: calculated from all vulnerabilities */
if isRuleNode(V ) then
for EACH I ∈ AdjacentPrimitiveNodesSet(V ) do
Risk (V ) ← Risk (V ) × (1 − Exploitability(I ))
end for
Risk (V ) ← (1 − Risk (V ))
end if
/*If a Leaf node then just return your self risk*/
if isLeafNode(V ) then
return Risk (V )
end if
/*If an intermediate node then recursively evaluate risks of children*/
childRsk = 1
for EACH I ∈ ChildSet(V ) do
childRsk ← (1 − EvaluateAttackRisk (I ) × Risk (V )) × childRsk
end for
Risk (V ) ← (1 − childRsk )
return Risk (V )
Algorithm 1: Evaluates the risk associated with an input
attack graph
Security Risk: The algorithms ConstructAttackGraph,
EvaluateAttackRisk together give, for each vulnerable de-
vice D, the tuple (rl, DM ), where rl ∈ RL and (RL,≤)
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 13:14:03 UTC from IEEE Xplore.  Restrictions apply. 
International Conference on Dependable Systems & Networks: Anchorage, Alaska, June 24-27 20081-4244-2398-9/08/$20.00 ©2008 IEEE369DSN 2008: Anwar et al.is the security risk lattice which characterizes the kind of
vulnerability that device D has, and DM ∈ R s.t( 0 ≤
DM ≤ 1) is the severity of the vulnerability (the cumula-
tive exploitability). We use DM to assign a severity label to
the original risk as follows Sev : R → SL where (SL, <)
is the set of labels with a total order5.
Given the risk lattice RL and the severity label SL, we
deﬁne the new extended risk-lattice RE as follows RE ⊂
{(RL × SL)}. The new security lattice is deﬁned by the
partial order operator ≤E such that (given R, R(cid:48) ∈ RL and
S, S(cid:48) ∈ SL and ∀R ∈ RL : min(RL) ≤ R):
(R, S) = (R, S(cid:48)) if (R = min(RL))
(R, S) ≤E (R(cid:48), S) if (R ≤ R(cid:48))
(R, S) ≤E (R, S(cid:48)) if (S < S(cid:48))(and)(R (cid:54)= min(RL))
(R, S) ≤E (R(cid:48), S(cid:48)) if (R ≤ R(cid:48)) and (S < S(cid:48))
The new security-risk for each vulnerability is now given
by (r × Sev(DM )) ∈ RE. For instance, the ﬁnal risk-
lattice for a system with {NoRisk , Availability, Integrity}
as the vulnerabilities and {Low , High} as the severity can
be depicted as follows.
SL
RL
RE
4.2 Workﬂow Model W
We formalize the notion of recovery and operating pro-
cedures in the form of workﬂows. There are many differ-
ent workﬂow description languages and our model of work-
ﬂows is a subset of YAWL’s basic control ﬂow patterns. One
distinction is that we add the notion of “actions” to be per-
formed by a task. Here we have a list of actions that can be
performed, and each of which has a security risk. The next
task that can be ﬁred as well as the actions that are chosen at
any given task can be context-sensitive. The context consists
of the list of (task,action) pairs performed in the workﬂow
so far 6. At any given task, the workﬂow execution makes
a non-deterministic choice between the list of actions avail-
able at that task. Although this can be modelled in terms
of basic workﬂow primitives, our method of allowing non-
deterministic choice at a task allows us to use a “generic”
workﬂow description for various different power-grid en-
vironments. The individual “environment-speciﬁc” choices
that can occur at any given task can be modeled as actions
possible at that task.
Formally, we deﬁne the workﬂow as the tuple, W =
(T, C, F, Aid, RE ,≤, A, R, St, Jt), where each element in
the tuple is deﬁned in Table 1
5For e.g., SL = {High, Low} such that (Low < High)
6We do not show the context in the model to simplify the description.
t
Element
T
C
F ⊆ (T × C ) ∪ (C × T )
Aid
RE
A : T → P(Aid )
R : Aid → RE
St : T → {AND, XOR}
Jt : T → {AND, XOR}
Deﬁnition
set of Tasks
set of Conditions.
transition between Tasks and Conditions.
set of all actions possible.
set of security risks (as deﬁned in Section
4.1) and ≤ is the partial-order over elements
in RE , such that (RE , ≤) is a lattice.
is the set of actions associated with any
given task.
maps a risk with each action.
is the split condition7.
is the join condition.
Table 1. Workﬂow Deﬁnition
The semantics of the workﬂow are deﬁned in terms of a
transition system over workﬂow states. A workﬂow state
for a given workﬂow W is deﬁned by the tuple Ws =
(Tk , Ra, H) where:
• Tk ⊆ {(T × Tks ) ∪ (C)} is the set of tokens present at any
of the tasks or conditions. A token at a task t ∈ T can be in
one of two states T ks = {ENABLED, FINISHED}.
• Ra ∈ RE refers to the accumulated risk over all the
i.e., Ra =
actions performed at all the ﬁnished tasks,
∪a(R(a)),∀a ∈ H.
• H ⊆ {(T × Aid)} stores the set of actions performed
at all the ﬁnished tasks.
The transition relation between two consecutive work-
ﬂow states in the system depends on the workﬂow transition
relation F and the split, join conditions St, Jt. We deﬁne
the state transition relation δ : Ws → Ws over the workﬂow
states Ws corresponding to a workﬂow W as follows:
Join Processing
• δ({Pred(T ) ∪ T k, Ra, H}) = {(T, ENABLED) ∪ T k, Ra, H} if
Jt(T ) = AND, where Pred(t) = {c | (c, t) ∈ F} and F is the ﬂow
relation in workﬂow W. Pred(T ) deﬁnes the set of all predecessor condition
nodes for task T in the workﬂow W.
• δ({Tp ∪ T k, Ra, H}) = {(T, ENABLED) ∪ T k, Ra, H} if
Jt(T ) = XOR, where Tp ∈ Pred(T ) for task T in the workﬂow W.
Task Processing
• δ({(T, ENABLED) ∪ T k, Ra, H}) = {(T, FINISHED) ∪
T k, Ra + R(Ai), (T, Ai) ∪ H} where (Ai) ∈ A(T ) and + is the
least upper bound function for the risk-lattice (RL, ≤) of the workﬂow W.
Split Processing
• δ({(T, FINISHED) ∪ Tk , Ra, H}) = {Succ(T ) ∪ Tk , Ra, H} if
St(T ) = AND, where Succ(t) = {c | (t, c) ∈ F}. Succ(t) deﬁnes
the set of all successor condition nodes for task t in the workﬂow W.
• δ({(T, FINISHED) ∪ T k, Ra, H}) = {Ts ∪ T k, Ra, H} if
St(T ) = XOR, where Ts ∈ Succ(T ) for task T in the workﬂow W.
7Similar to the actions, we support conditional XOR splits, i.e., the next
task to be ﬁred depends on the (task,action) performed at an earlier stage
in the workﬂow. However we do not describe it here to simplify the model
description.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 13:14:03 UTC from IEEE Xplore.  Restrictions apply. 
HighHigh IntegrityHigh AvailabilityLow IntegrityLow AvailabilityNoRiskIntegrityAvailabilityNoRiskLowInternational Conference on Dependable Systems & Networks: Anchorage, Alaska, June 24-27 20081-4244-2398-9/08/$20.00 ©2008 IEEE370DSN 2008: Anwar et al.. We deﬁne a workﬂow-run as the sequence of workﬂow
states w1, w2, w3,··· , wn such that wi+1 = δ(wi). Given a
workﬂow W with the transition relation δ, (Ws, δ) is a tran-
sition system. From this we can derive a Kripke-structure
(Ws, δ, L) by deﬁning a labeling function. This allows us to
perform model-checking on the system. The labeling func-
tion can depend on any of the information present in the
workﬂow-state Ws. In particular, this allows us to reason
about the accumulated risk as well as the tasks and actions
ﬁred in the system.
1
2
3
4
5
6
7
8
5 Tool Chain Implementation
Fig 2 shows a high level architectural diagram of the se-
curity assessment tool-chain detailing how the various com-
ponents sit with respect to each other. We give a detailed
description of each of the various modules in the architec-
ture.
Figure 2. Tool Chain: High-Level Architectural Diagram
5.1 CIM Parsing
The network model N of the SCADA networks is auto-
generated from annotated speciﬁcations written in the stan-
dard descriptive language based on Common Information
Models (CIM) [8] with the help of a parser tool and stored
in a Prolog database. CIM’s comprehensive packages cover
everything from equipment, topology, load data, generation
proﬁles to measurement and scheduling. The CIM RDF
schema is documented as a self-describing XML-based IEC
standard. We create a mapping of the classes in the RDF
model to entities in our security model. The parser identiﬁes
the main entities such as devices, connectivity and services
and populates their attributes by looking at the properties
and associations for each object in the CIM model. Some
attributes such as privileges of users and services on the de-
vices not covered by the basic CIM data model are man-
ually annotated or looked up from a services to privileges
table whenever a services entity is encountered. We used
execCode ( P r i n c i p a l , Victim , P r i v )
:−
, S v s l s t ) ,
,
,
device ( Victim ,
containsVul ( Svslst , remoteExploit , VSrvc ) ,
s e r v i c e ( VSrvc ,
hasaccount ( P r i n c i p a l , Source , P r i n c i p a l P r i v ) ,
i s I n c l u d e d ( Source , AllowedHosts ) ,
existsServiceType ( Source , P r i n c i p a l P r i v , AllowedSvs ) ,
path ( Source , Victim , Path ) .
, Priv , AllowedHosts , AllowedSvs ) ,
Figure 3. A Prolog Rule for an Attack Graph
models of popular exploits such as buffer overﬂows quoted
in attack graph literature and open vulnerability databases
such as CERT for our vulnerabilities. For more information
about the CIM to Prolog parser see [2].
Generic Prolog rules search for facts derived from the
CIMs to determine whether an attack is possible. For in-
stance the prolog rule shown in Figure 3 says that a Prin-
cipal can execute code on a Victim device with a privilege
Priv if a service VSrvc running on that device contains a
remoteExploit vulnerability and it allows connections from
the Source device that the Principal has an account on. Fur-
thermore Source should have a service from the set of al-
lowed AllowedSvs types, there should be a network path
from Source to Victim and Source should be in the ACL of
Victim’s allowed hosts AllowedHosts.
5.2 Representing Recovery Workﬂows
We represent operating procedures of a SCADA power-
grid as “generic” control-ﬂow workﬂows that are not con-
strained by the detailed architecture of a speciﬁc power-grid
implementation. For example, the workﬂow described in
ﬁgure 4 could be applied to activate any transformer.
Figure 4. Generic Workﬂow Example(YAWL Editor)
The transformer workﬂow involves grounding the trans-
former (if it isn’t already grounded) and energizing it af-
terwards. The ﬁrst task of the workﬂow “Is Transformer
Grounded” has a mutually exclusive conditional split to two
other tasks. The transformer chosen for the ﬁrst task (there
can be multiple transformers to choose from) is left unde-
cided. In this paper, we call the possible ways a given task
can be bound to speciﬁc entities as leading to a choice of
“actions”. This list of actions depends on the speciﬁc sub-
station (some substations might have 1 backup transformer