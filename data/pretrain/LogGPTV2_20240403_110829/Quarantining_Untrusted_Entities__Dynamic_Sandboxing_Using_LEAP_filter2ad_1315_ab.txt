all aspects greater than ui. Aspects build upon ideas in
RBAC’96, but allow both location and host to be a factor
in determining the permissions that a user has.
Because these aspects form a partial order, and because,
as we shall see, permissions are based in part on groups and
therefore aspects, this mechanism is ideal for implementing
a sandbox.
2.1.2 Permissions
LEAP permissions are deﬁned on labels. We next describe
the names of unary and binary permissions:
unary permissions Given a label l, the names of the
unary permissions on ﬁles are c(l), r(l), w(l), and x(l).
These permissions are needed to perform the operations cre-
ate, read, write, and execute respectively, on objects with
label l.
There is also permissions to connect(l), bind(l), and
accept(l) where l is the label of a network connection.
binary permissions LEAP’s binary permissions are de-
ﬁned over a pair of labels:
relabel(l, l0) The permission to change an object’s label
from l to l0.
mayF low(l, l0) The permission to write (resp. create) l0
after having read l. For each label li that a process
has read before trying to write (resp. create) l0, it must
have the permission mayF low(li, l0). The mayFlow’s
are necessary, but not sufﬁcient; the process also needs
permission w(l0) (resp. c(l0)).
As we shall see, the relabel permission can be used to
change an object’s label from a “tainted” one to an “un-
tainted” one. Because relabel is a permission, it can be used
to control both whether a given label can be changed and if
so under what circumstances. We note that there is no label
creep, because relabeling is an explicit operation.
The mayFlow permissions allow precise speciﬁcation of
allowed information ﬂows, they differ from lattices in that
they are general enough to specify (1) assured pipelines (2)
downgrades and most essentially (3) the programs which
have the permission (see below).
permission deﬁnition A permission is deﬁned by spec-
ifying the holder of that permission. The holder speciﬁes
which processes can use the permission, by specifying a list
of group, executable label pairs. Hence, the user in conjunc-
tion with the program executing determine the permissions
accorded to the process.
Unary permissions are deﬁned at the time the label is cre-
ated while binary permissions are deﬁned after both speci-
ﬁed labels are created. In either case, once deﬁned, the per-
mission deﬁnition cannot be changed2. Because of this, we
deﬁne permissions as follows for a read (other permissions
are similar):
r(l) = (e0, g0), (e1, g1), . . . , (en, gn)
(1)
where ei is a label and gi a group of aspects. The left hand
side is called the permission name while the right hand side
is called the holder of the permission. Consider a process
p which executes on behalf of aspect ua and whose exe-
cutable ﬁle has label e. Then p is a holder of the above read
permission if for some 0 ≤ i ≤ n, e = ei and ua ∈ gi.
For example, in the below permission deﬁnition, an as-
pect in group anyUser can write object with the label l using
executables labeled lform; but only aspects in group admin
can write it with executables labeled xmlEditor.
w(l) = (lf orm, anyU ser), (xmlEditor, admin)
Information ﬂow requires multiple privileges. For exam-
ple, the permissions
r(l) = (e, anyU ser)
w(l0) = (e, anyU ser)
mayF low(l, l0) = (e, anyU ser)
enable aspects in group anyUser to read l and then write l0.
(If any of the above permission holders were empty, then
information ﬂow form l to l0 could not occur.)
2.1.3 Relinquishing privileges
Finally, we need a mechanism to reduce privileges of a pro-
cess. When entering a sandbox, privileges are reduced so
that the sandboxed processes do not interfere with other
2While the permission deﬁnition cannot be changed, the permission
can be changed by either changing which aspects are members of a group
or by relabeling an object.
processes. This relinquishing of privileges occurs on the
exercise of a speciﬁed privilege priv by a process whose
executable is labeled e. The following reduces the aspect to
the minimum for a user; there are many such minimum as-
pects allowing multiple sandboxes to exist concurrently per
user.
minAspect(priv, e)
The minAspect ensures that multiple sandboxes of the same
user will be isolated from each other.
2.2. Dynamic Sandbox Speciﬁcation
In this section we describe dynamic sandboxing for
email attachments. The description uses:
Shell which is the starting point.
Mail User Agent (MUA) such as Outlook or Thunderbird,
which reads mail from a network server and labels as
MAIL (when storing on the disk).
Viewer A PDF viewer. The sandbox allows it to either read
and write ordinary user ﬁles, or to read and write MAIL
ﬁles only. That is, it prohibits the copying of MAIL
ﬁles to ordinary user ﬁles.
Copy this is the label for the cp program which creates a
copy of a ﬁle.
Scubber such as a virus scanner which renders dangerous
ﬁle contents harmless, thus producing ordinary ﬁles
from mail ﬁles.
Certiﬁer enables ﬁles which are created by trusted remote
sources to be treated as if they were locally created, by
changing their label.
The permissions to implement a dynamic sandbox are
given in Figure 1 for the six types of executables above.
Since any aspect can execute these programs, for simplic-
ity we leave off the groups in holders and list just the exe-
cutable labels in the ﬁgure.
Figure 2 shows the combinations of allowed read and
writes operations that various executable labels could have
given the LEAP speciﬁcation. Note that some executable
labels give rise to different combinations of allowed opera-
tions.
2.2.1 The mail user agent
The Mail User Agent (MUA) needs to fetch and send mail
over a network, store the mail locally and run helper appli-
cations on mail attachments.
To ensure that the mail and its attachments are quaran-
tined, only the MUA can access the networked mail service
(Imap for fetching mail and Smtp for sending mail). The
MUA can write only ﬁles with a MAIL label to denote that
connect(IMAP), r(IMAP), w(IMAP)
connect(SMTP), r(SMTP), w(SMTP)
mayFlow (IMAP, MAIL), mayFlow (SMTP, MAIL)
mayFlow (MAIL, IMAP), mayFlow (MAIL, SMTP)
c(MAIL), w(MAIL)
r(MAIL)
x(VIEWER), x(MUA), x(SCRUBBER), x(CERTIFIER)
r(USERFILES)
c(USERFILES), w(USERFILES)
mayFlow (MAIL, USERFILES)
relabel(MAIL, USERFILES)
minAspect(r(MAIL), VIEWER)
= MUA
= MUA
= MUA
= MUA
= MUA,COPY
= VIEWER, SCRUBBER, CERTIFIER, MUA, COPY
=
= VIEWER, SHELL, COPY
= VIEWER, SCRUBBER, SHELL, COPY
=
SCRUBBER
= CERTIFIER
*
Figure 1. Sample LEAP speciﬁcation for dynamic sandbox
Smtp
Imap
xpdf
xpdf
MUA
Certiﬁer
Scrubber
shell
Mail
UserFile
sandboxed
process
ordinary
process
relabel
operation
Figure 2. Interaction between ﬁlesystem objects and domains. Here ovals represent processes and
rectangles represent ﬁles or network sockets. The direction of the arrow represents information ﬂow
from or to the process.
their (original) source is unknown. This prevents the read-
ing of mail without the resulting ﬁles being marked with the
MAIL label.
To allow the MUA to send and receive mail, it needs
to connect to the IP addresses and port numbers of the
SMTP and IMAP services. Hence, connect privileges are
needed as well as read and write privileges to send and re-
ceive network data. In the network conﬁguration for this ex-
ample (not shown), the correspondence of the labels (SMTP
and IMAP) to the IP address and port are given. (LEAP’s
networking protection associates labels for connect, bind,
and accept system calls. The full mechanism for network-
ing authorization and authentication is described in a paper
under preparation.)
In addition, the MUA may exec helper applications; in
this example there is an unrestricted PDF viewer which be-
comes restricted if it opens the mail.
To provide least privilege, it is desirable to isolate differ-
ent components of the MUA into different processes so that
each component’s privileges are minimized. For example,
address book management can be put in a separate process
which will need to write the address book; the mailer will
then only need to read the address book.
Quarantining foreign objects On execution of a PDF
viewer, the process is not sandboxed. This non-sandboxed
process can read and write USERFILES; if it instead reads a
MAIL ﬁle then two things happen:
1. The mayFlow’s prevent MAIL ﬁles from being copied
to USERFILES,
2. The minAspects reduces the privilege to interact with
non-sandboxed processes (see Section 2.1.3).
Note that the PDF viewer or the MUA takes no action to
create a sandbox, rather it is the consequence of the above
permissions.
Copy The copy is almost identical to the viewer, the only
difference is that the copy can, in addition, create and write
mail ﬁles. However, the copy is not allowed to perform
information ﬂow between different labels (note that it is
not speciﬁed for any mayFlow). Hence, having read MAIL
the copy can at most create new MAIL ﬁles or having read
USERFILES can at most create new USERFILES.
Scrubbers Not all email attachments need to be perma-
nently untrusted. For example, a scrubber, that creates a
safe version of any MAIL ﬁle, may be run to remove dan-
gerous content from a ﬁle. Of course, it is not possible to re-
move all dangerous content from all interpreters and hence
an effective scrubber would be with respect to a single (or
perhaps related set) of interpreters. The scrubber domain
can write ﬁles with the USERFILES label.
Certiﬁers Unlike the scrubber, the certiﬁer can be used
when a MAIL ﬁle is safe for all uses. It is safe if is created
by a trusted system which certiﬁes that it is safe (for exam-
ple, by providing a digitally signed certiﬁcate). The certiﬁer
is only able to change the label and read the ﬁle, it does not
have (and does not need) privileges to modify the ﬁle being
certiﬁed.
2.2.2 Discussion
Two important properties of this mechanism are (1) sand-
boxes are automatically entered without explicit user action
and (2) the taintedness of objects is automatically tracked
using LEAP information ﬂow rules. Thus the burden on
users is reduced while the system is made more secure.
We have shown just one short example of a dynamic
sandbox implemented in LEAP. The LEAP mechanisms are
fairly simple and yet are extremely ﬂexible.
It would be
easy to extend this example to many more helper applica-
tions. It is also easy to extend it in other ways such as:
• a sophisticated user might be trusted to determine
when it was safe to relabel—but the authorization sys-
tem could still track which ﬁles contained mail, thus
relieving the user of that burden.
• a system might have 3 levels, say COREORGANIZA-
TIONALFILES, USERFILES and MAIL, with the re-
quirement that MAIL could never be integrated into the
COREORGANIZATIONALFILES.
As always, authorization is a balancing act between ﬂexi-
bility and security, and LEAP provides sufﬁcient ﬂexibility
to allow the organization to determine this balance.
3. Implementation
LEAP, as described in the previous section, is used to
conﬁgure the authorization system. It has three fundamental
properties which make it attractive for speciﬁcation: it is
succinct, it is composable, and it is (mostly) stateless3.
In contrast, access matrix level representations do not
have any of these three properties and hence their analysis
requires a simulation of state transitions. Moreover, manual
changes to the access matrix are tedious. But access ma-
trix implementations have proven very efﬁcient. We have