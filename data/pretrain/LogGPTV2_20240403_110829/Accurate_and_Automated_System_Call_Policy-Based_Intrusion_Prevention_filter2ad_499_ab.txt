S_getuid
pop(r4)
S_getuid
Exit(f4)
Figure 2. When getuid is called, the pre-
vious VSL is {r1, r2, r3}, the current VSL
is {r1, r2, r4}, and the preﬁx of both VSLs
is {r1, r2}. Therefore, after consuming r3
the algorithm moves the current state from
S setuid to C3’, and then to C4 after con-
suming r4. Finally, it pushes r4 to the stack
andmovesthecurrentstatetoEntry(f4).
Feng et al. proposed a VPStatic model [2], which
exploits the user stack state to identify each system call
C1’
ε
pop(r1)
Exit(main)
S_getuid
ε
C2’
pop(r2)
S_setuid
Exit(f2)
S_setuid
ε
Exit(f1)
(A)
r1
C1
ε
r1
push(r1)
S_setuid
S_setuid
C1’
pop(r1)
S_getuid
ε
Exit(main)
(B)
S_getuid
ε
Exit(f1)
Figure 3. If getuid in (A)is notcalled, the
VPStatic model cannot accept the system call
setuid because the model cannot reach the
S setuid statefromtheEntry(main) state.
Function f1 in(B)iscalledinsidealoop. The
current VPStatic algorithm cannot accept the
callsequence{setuid, getuid, setuid}
since the algorithm only returns back to the
preﬁxofthepreviousandcurrentVSL.
The VPStatic model cannot handle the non-
determinism due to if-then-else statements. For exam-
ple, in Figure 3(A), the system call getuid in f2 is
not always executed because it is embedded inside an
Proceedings of the 2006 International Conference on Dependable Systems and Networks (DSN’06) 
0-7695-2607-1/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:27:46 UTC from IEEE Xplore.  Restrictions apply. 
if-then-else statement. If getuid is not executed, the
VPStatic model generates a false positive alarm when
setuid is executed. At the time setuid is called, the
previous VSL is {} and the current VSL is {r1}. Ac-
cording to the algorithm, the only operations they can
generate to traverse the automaton is
1. Consume r1, move to the state C1
2. Push r1, move to the state Entry(f1)
3. Move to the setuid state whose program counter
the current
matches the program counter of
setuid call
Obviously, after the second operation, the third opera-
tion cannot be accepted by the automaton since C2 is
the only state reachable from the state Entry(f1).
VPStatic also fails to handle the non-determinism
due to functions called within a loop, as shown in Fig-
ure 3(B). Assume the observed system call sequence is
{setuid, getuid, setuid}. VPStatic does not
accept this sequence. At the time the last setuid is
called, the previous VSL is {r1} and the current VSL is
{r1}, and their common preﬁx is {r1}. Since there is
no other call site address after the preﬁx for both VSLs,
the only traversal operation is to move the current state
to the setuid state if its program counter matches the
program counter of the current setuid call. How-
ever, because the S getuid state is not connected to
the S setuid state, the automaton cannot accept the
call sequence {setuid, getuid, setuid}.
main()
{
   mycopy();
   write(1, "hello\n", 6);
   execeve("/bin/ls", NULL);
}
(A)A vulnerable program 
shellcode()
{
    !setup the stack to contain the call site address of write.
    ...
    mov  4, %g1
    ta  8         !call write()
    ...
    !Setup the stack to contain the call site address of execeve.
    ...
    mov 59, %g1
    ta 8          ! call execve(?/bin/sh?, argv, NULL);
    ...           ! attack success
}
(B) Mimicry attack shellcode
Figure 4. Abufferoverﬂowattackhappensin
thefunctionmycopy in(A).After mycopy re-
turns,thecontrolistransferredtothemimicry
attack’s shellcode in (B). The VPStatic model
cannot detect this mimicry attack because the
shellcodesetsuptheuserstackcorrectlybefore
itmakesasystemcall.
Although the VPStatic model uses the user stack
state, it cannot prevent all mimicry attacks. For exam-
ple, a mimicry attacker can set up the user stack in a
way that can fool the VPStatic model checker, then is-
sues a system call by calling a trap instruction, gets the
control back, and repeats the same process. Because
the VPStatic model does not take the return address of
the trap instruction into account, the attacker can grab
the control back after invoking the trap instruction. For
the program in Figure 4(A), assume a buffer overﬂow
attack happens in mycopy. After mycopy returns, the
control is transferred to the shellcode shown in Figure
4(B), which ﬁrst sets up the stack to contain the call
site address of write, and then issues the write sys-
tem call directly using a trap instruction. Because the
attacker properly sets up the user stack, the VPStatic
model checker cannot tell if it is an attack, and after
the ta 8 instruction returns, the control goes back to
the shellcode again. Were the return address of ta 8
also included in VPStatic’s state check, this attack would
have been impossible.
To address the VPStatic model’s limitation in stop-
ping mimicry attacks, PAID uses a combination of all
the return addresses on the user call stack and the trap in-
struction’s return address on the kernel stack as a unique
coordinate for each system call instance in the pro-
gram. In addition, it uses a novel graph traversal algo-
rithm that supports backtracking to accommodate non-
determinism due to if-then-else and loop constructs, and
yet is almost as efﬁcient as DFA traversal algorithm. Fi-
nally, to further reduce the window of vulnerability to
mimicry attacks, PAID performs by far the most com-
prehensive constraint analysis on system call arguments,
which, can construct full or partial constraints on system
call argument values based on inputs from conﬁguration
ﬁles. This ability greatly tightens the possible values
of the arguments of many sensitive system calls used in
network applications, such as open().
3 System Call Model Extraction and Veri-
ﬁcation
3.1 Building Call Site Flow Graph
PAID includes a compiler that automatically derives
from an application’s source code its Call Site Flow
Graph (CSFG), which, as shown in Figure 5, is directly
abstracted from a control ﬂow graph (CFG) except func-
tion and system calls. A CSFG includes call site address
information to facilitate run-time graph traversal algo-
rithm. There are ﬁve different types of CSFG nodes, en-
try node, call node, return node, system call node, and
exit node. Each function has a unique entry node and
exit node, and each function call is represented by a
Proceedings of the 2006 International Conference on Dependable Systems and Networks (DSN’06) 
0-7695-2607-1/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:27:46 UTC from IEEE Xplore.  Restrictions apply. 
call node and a return node. Unlike a DFA or NFA
model, PAID labels each function/system call node and
return node with its return address. For example, the
call node call r3 in Figure 5 is labeled by the return
address r3. The compiler inserts a label immediately
following a call instruction, as demonstrated by r1-r8.
The label name and the function name are recorded in
the corresponding call node and return node so that the
linker can ﬁx up the address at link time. The local
CSFG of each source ﬁle is stored in a .csfg sec-
tion of its corresponding ELF object ﬁle. At link time,
the linker extracts the CSFGs from the object ﬁles, and
builds a global CSFG for the application by linking these
local CSFGs. However, a ﬁnal global CSFG does not
contain any local CSFG that never leads to any system
call. After linking, the linker replaces the call label in a
call node or a return node with its corresponding return
address. Finally, the global CSFG and the local CSFGs
are stored in the .csfg section of the ﬁnal ELF binary.
foo1()
{
  if()
    sys1();
r7:
}
foo2()
{
  sys2();
r8:
}
main local csfg
entry(main)
sys0_r1_t0
sys0_r2_t0
call_r3
r3
ret_r3
call_r4
r4
main()
{
  if()
    sys0();
r1:
  else
    sys0();
r2:
  while()
    foo();
r3:
  foo();
r4:
}
foo()
{
  foo1()
r5:
  foo2();
r6:
}
foo local csfg foo1 local csfg
entry(foo1)
entry(foo)
r5
call_r5
sys1_r7_t1
ret_r5
r5
exit(foo1)
foo2 local csfg
r6
entry(foo2)
r6
sys2_r8_t2
exit(foo2)
call_r6
ret_r6
r3
r4
exit(foo)
ret_r4
exit(main)
Figure 5. A global CSFG of a network ap-
plicationisconstructedbyinterlinkingalllocal
CSFGs,oneforeachfunction.
A system call is normally made through a system call
stub/wrapper function. A call to a system call stub is
directly represented by a system call node labeled with
the call stub’s return address and the return address of
the actual system call trap instruction (int 0x80 of i386),
For example, r1 in the label sys0 r1 t0 is inserted im-
mediately following the call sys0 instruction, and
t0 is the return address of the int 0x80 instruction in
sys0’s call stub. Figure 5 shows a global CSFG, which
consists of four local CSFGs, which are linked by the
edges labeled with r3-r6.
Incorporating return ad-
dresses into a CSFG removes the non-determinism asso-
ciated with functions with multiple call sites. However,
non-determinism due to if-else-then and loop construct
still exist within a local CSFG. For example, foo1 in
Figure 5 does not always make a system call because of
the if statement. We name a call that may not always
lead to a system call a may call. If a function call al-
ways leads to a system call, there is no edge from its
call node to its return node. However, there is always
an edge between the call node and the return node of a
may call, such as call r5 in Figure 5, to inform the
veriﬁer that sometimes it is OK to ignore the may call.
3.2 System Call Argument Analysis
To minimize the vulnerability to mimicry attacks,
PAID computes constraints on the arguments of sensi-
tive system calls, and checks them at run time. For
each system call argument, PAID ﬁrst computes a back-
ward slice, and then performs symbolic constant prop-
agation to reduce it as much as possible. The resulting
slice could fall into one of the following three categories.
First, the resulting slice is a constant. This means that
the value of the system call argument can be determined
statically.
In this case, this system call argument is a
static constant. Second, the resulting slice is not a con-
stant but it depends only on values in input ﬁles, environ-
ment variables, or command line arguments. The value
of this system call argument can be decided after the ini-
tialization phase and never changes afterward. In this
case, this system call argument is a dynamic constant.
Third, the resulting slice depends on inputs coming from
the network at run time or real-time clocks. In this case,
this system call argument is a dynamic variable.
For system call arguments that are static constants,
the PAID compiler computes their values and includes
them with the corresponding system calls. For system
call arguments that are dynamic constants, the PAID
compiler determines the point in the program at which
their value is fully determined, and inserts a notify
call there to inform the run-time veriﬁer of the value.
For static-constant and dynamic-constant arguments, the
run-time veriﬁer should have their values before their
corresponding system calls are invoked. For system call
arguments that are dynamic variables, the PAID com-
piler tries to derive a partial constraint on them.
The PAID compiler ﬁrst applies an intra-procedural
analysis for the whole program. For each system call
argument whose value needs to be tracked but cannot
be determined, PAID then performs an inter-procedural
program slicing operation to extract a backward slice,
which contains all the statements that may affect the sys-
tem call argument’s value, or the part of the original pro-
gram that computes the system call argument. Slicing
needs to take into account both data and control depen-
dencies. The current PAID prototype uses a commer-
cial tool Codesurfer [6] to compute this backward slice.
To reduce the slice computed by Codesurfer, the PAID
compiler applies constant propagation on the slice. The
standard constant propagation algorithm used in com-
piler optimization propagates only values of scalar vari-
ables, and keeps a single value for each of them. The
value of a scalar variable can be either a constant, or
Proceedings of the 2006 International Conference on Dependable Systems and Networks (DSN’06) 
0-7695-2607-1/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:27:46 UTC from IEEE Xplore.  Restrictions apply. 
a variable/expression with unknown values. We extend
this algorithm with a new lattice value - ”dynamic con-
stant” and modify the corresponding meet operators [14]
as shown in Figure 6. This value is introduced to track
those variables whose values become known only after
the program starts.
In addition, we assign the lattice
value ”bottom” to those variables whose values depend
on user inputs at run time.
α1
α2
α3
α4
any       = any
any       = 
α1    α2 = α1 if  α1 = α2
α1    α2 = 