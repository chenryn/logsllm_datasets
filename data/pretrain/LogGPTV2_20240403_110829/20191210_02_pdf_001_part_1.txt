# Hooks in PostgreSQL

## Introduction
This talk will introduce a lesser-known feature of PostgreSQL: its hook system.

### About the Speaker: Guillaume Lelarge
- French translator of the PostgreSQL manual
- Member of the pgAdmin team
- Vice-treasurer of PostgreSQL Europe
- CTO of Dalibo
- Email: [PI:EMAIL]
- Twitter: [@g_lelarge](https://twitter.com/g_lelarge)
- Blog: [http://blog.guillaume.lelarge.info](http://blog.guillaume.lelarge.info)

## PostgreSQL Extensibility
PostgreSQL is renowned for its extensibility, allowing users to add:
- Custom types
- Functions
- Operators
- Languages
- And more

### Extensions in Version 9.1
- Introduced the `EXTENSION` object to manage external modules and plugins.
- Despite this, the hook system remains relatively unknown, even though it was first introduced in version 8.3.

## What are Hooks?
Hooks in PostgreSQL allow developers to interrupt and modify the usual behavior of the database without altering the core code.

### Why Are Hooks Not Well-Known?
- They are relatively recent features.
- The documentation does not extensively cover them.

### Types of Hooks
1. **Planner Hooks**
2. **Executor Hooks**
3. **Security/Permissions Hooks**
4. **PL/pgSQL Hooks**

## Planner Hooks
These hooks allow modifications to the query planning process.

### Example Planner Hooks
- **explain_get_index_name_hook**: Allows plugins to control index names in EXPLAIN plans.
- **ExplainOneQuery_hook**: For detailed query explanations.
- **get_relation_info_hook**: Modifies relation information, including adding fake indexes.
- **join_search_hook**: Overrides the join search order.
- **planner_hook**: Monitors or modifies planner behavior.

## Executor Hooks
Executor hooks provide access to the execution phase of queries.

### Example Executor Hooks
- **ExecutorStart_hook, ExecutorRun_hook, ExecutorFinish_hook, ExecutorEnd_hook**: Used for logging and statistics collection.
- **ProcessUtility_hook**: Used by `pgextwlist` for utility commands.

## Security/Permissions Hooks
These hooks allow for custom security and permission checks.

### Example Security/Permissions Hooks
- **check_password_hook**: Validates passwords against enterprise rules.
- **ClientAuthentication_hook**: Adds additional checks for client authentication.
- **ExecutorCheckPerms_hook, fmgr_hook, needs_fmgr_hook, object_access_hook**: Used by `sepgsql`.

## PL/pgSQL Hooks
PL/pgSQL hooks allow shared libraries to interact with the PL/pgSQL language.

### Example PL/pgSQL Hooks
- **func_setup, func_beg, func_end, stmt_beg, stmt_end**: Used by `pldebugger`, `plprofiler`, and `log_functions`.

## Shared Memory Hook
- **shmem_startup_hook**: Called when PostgreSQL initializes its shared memory segment.

## How Hooks Work Internally
Hooks consist of global function pointers that are initially set to `NULL`. When PostgreSQL needs to use a hook, it checks if the pointer is set and executes the function if it is.

### Setting and Unsetting Function Pointers
- **_PG_init()**: Sets the function pointer at load time.
- **_PG_fini()**: Unsets the function pointer at unload time.

## Example: ClientAuthentication_hook
### Declaration
```c
typedef void (*ClientAuthentication_hook_type) (Port *, int);
ClientAuthentication_hook_type ClientAuthentication_hook = NULL;
```

### Execution
```c
if (ClientAuthentication_hook)
    (*ClientAuthentication_hook) (port, status);
```

### Writing a ClientAuthentication_hook
#### Initialization
```c
static ClientAuthentication_hook_type prev_client_auth_hook = NULL;

void _PG_init(void) {
    prev_client_auth_hook = ClientAuthentication_hook;
    ClientAuthentication_hook = my_client_auth;
}
```

#### Implementation
```c
static void my_client_auth(Port *port, int status) {
    struct stat buf;
    if (prev_client_auth_hook)
        (*prev_client_auth_hook) (port, status);
    if (status != STATUS_OK)
        return;
    if (!stat("/tmp/connection.stopped", &buf))
        ereport(FATAL, (errcode(ERRCODE_INTERNAL_ERROR), errmsg("Connection not authorized!!")));
}
```

## Executor Hooks
### Details
- **ExecutorStart_hook**: Beginning of query plan execution.
- **ExecutorRun_hook**: Processes tuples, may be called multiple times.
- **ExecutorFinish_hook**: After the final `ExecutorRun` call.
- **ExecutorEnd_hook**: End of query plan execution.

### Usage
- **pg_stat_statements**: Collects query statistics.
- **auto_explain**: Logs EXPLAIN plans.
- **pg_log_userqueries**: Logs queries based on GUC settings.
- **query_histogram**: Builds duration histograms.
- **query_recorder**: Logs queries to files.

### Example: ExecutorEnd_hook
#### Initialization
```c
static ExecutorEnd_hook_type prev_ExecutorEnd = NULL;

void _PG_init(void) {
    prev_ExecutorEnd = ExecutorEnd_hook;
    ExecutorEnd_hook = my_ExecutorEnd;
}
```

#### Implementation
```c
static void my_ExecutorEnd(QueryDesc *queryDesc) {
    if (prev_ExecutorEnd)
        (*prev_ExecutorEnd) (queryDesc);
    if (superuser())
        log_query(queryDesc->sourceText);
}
```

By understanding and utilizing these hooks, developers can extend PostgreSQL's functionality in powerful and flexible ways.