Hooks in PostgreSQL
Hooks in PostgreSQL
1
This talk will present a quite unknown feature of
PostgreSQL: its hook system.
Who's Guillaume Lelarge?
French translator of the PostgreSQL manual
●
Member of pgAdmin's team
●
Vice-treasurer of PostgreSQL Europe
●
CTO of Dalibo
●
Mail: PI:EMAIL
●
Twitter: g_lelarge
●
Blog: http://blog.guillaume.lelarge.info
●
2
PostgreSQL
Well known for its extensibility
●
For example, a user can add
●
– Types
– Functions
– Operators
– Languages
– Etc
Extensions in 9.1
●
Less known is the hook system
●
3
PostgreSQL is well known for its extensibility. Many
people know that you can add your own user types,
add functions that handle them, add operators
which use those functions, and lots of other stuff.
Heikki even did an interesting talk at last year's
FOSDEM about user types and how to use them.
Many procedural languages are supported.
Actually, the extensibility is so important to the
PostgreSQL project that one of the most interesting
features of 9.1 is the new EXTENSION object,
which helps the handling of external modules,
plugins, or whatever you want to call that.
With all this going on with the extensibility, it's quite
strange that the hook system is rather unknown,
even if the first hooks were available since the 8.3
release.
Hooks
Interrupt, and modify behaviour
●
Not known because
●
– Not explained in the documentation
– Usually quite recent
Four kinds of hooks
●
– Planner hooks
– Executor hooks
– Security/permissions hooks
– PL/pgsql hooks
4
The aim of hooks is to interrupt and modify the usual
behaviour of PostgreSQL. It allows a developer to
add new features without having to add it to the
core.
It's not well known because it's a rather recent
feature. The first hook appeared in 8.3. Actually, 5
hooks appeared in 8.3, 8 more in 8.4, 2 more in
9.0, and 5 more in 9.1. But the biggest issue is
probably that it's not discussed in the
documentation.
Of course, there are different kinds of hooks, mostly
around the planner, the executor, and
security/permissions.
So let's see these hooks...
Planner hooks
Hook Used in Initial release
explain_get_index_name_hook 8.3
ExplainOneQuery_hook IndexAdvisor 8.3
get_attavgwidth_hook 8.4
get_index_stats_hook 8.4
get_relation_info_hook plantuner 8.3
get_relation_stats_hook 8.4
join_search_hook saio 8.3
planner_hook planinstr 8.3
5
explain_get_index_name_hook, called when explain finds indexes'
names, to allow plugins to get control here so that plans
involving hypothetical indexes can be explained
ExplainOneQuery_hook see
http://archives.postgresql.org/pgsql-patches/2007-05/msg00421.php
get_relation_info_hook, allows modification of expansion of the
information PostgreSQL gets from the catalogs for a particular
relation, including adding fake indexes (
http://www.sai.msu.su/~megera/wiki/plantuner to enable planner
hints which allow enable/disable indexes, fix empty table)
join_search_hook, to let plugins override the join search order
portion of the planner; this is specifically intended to simplify
developing a replacement for GEQO planning, example module
saio (http://pgxn.org/dist/saio/), a join order search plugin using
simulated annealing which provides an experimental planner
module that uses a randomised algorithm to try to find the
optimal join order
planner_hook, runs when the planner begins, so plugins can
monitor or even modify the planner's behavior
(http://pgxn.org/dist/planinstr/) to measure planner running time
Executor hooks
Hook Used in Initial release
ExecutorStart_hook pg_stat_statements 8.4
ExecutorRun_hook pg_stat_statements 8.4
ExecutorFinish_hook pg_stat_statements 8.4
ExecutorEnd_hook pg_stat_statements 8.4
ProcessUtility_hook pgextwlist, 9.0
pg_stat_statements
6
All the Executor hooks and the ProcessUtility hook
help running functions that will use information from
the executor. Mostly used to know which queries
are executed, so that you can compute statistics, or
log them.
pg_stat_statements uses all of them.
The ProcessUtility hook is used by pgextwlist (see
https://github.com/dimitri/pgextwlist for details).
Security/permissions hooks
Hook Used in Initial release
check_password_hook passwordcheck 9.0
ClientAuthentication_hook auth_delay, sepgsql, etc 9.1
ExecutorCheckPerms_hook sepgsql 9.1
fmgr_hook sepgsql 9.1
needs_fmgr_hook sepgsql 9.1
object_access_hook sepgsql 9.1
7
The check_password hook is a way to check
passwords according to enterprise ruleswhen a
user is created and when he changes his
password.
The ClientAuthentication hook makes it possible to
add other checks to allow or deny connections.
The other ones are used by sepgsql.
PL/pgsql hooks
Hook Initial release
func_setup 8.2
func_beg 8.2
func_end 8.2
stmt_beg 8.2
stmt_end 8.2
Used by
● pldebugger,
● plprofiler,
● log_functions.
8
The PL/pgsql language allows a shared library to
hook plugins. AFAIK, its only use is by the
debugger, and the profiler written by EnterpriseDB.
But there's also a new extension called
log_functions which uses them.
And yet another one
Hook Used in Initial release
shmem_startup_hook pg_stat_statements 8.4
9
shmem_startup_hook, called when PostgreSQL
initializes its shared memory segment
How do they work inside PG
Hooks consist of global function pointers
●
Initially set to NULL
●
When PostgreSQL wants to use a hook
●
– It checks the global function pointer
– And executes it if it is set
10
Each hook consists of a global function pointer. It's
initialy set to NULL. When PostgreSQL may have
to execute it, it checks if the global function pointer
is still set to NULL. If it's set to something else, it
executes the function pointer.
How do we set the function pointer?
A hook function is available in a shared library
●
At load time, PostgreSQL calls the _PG_init()
●
function of the shared library
This function needs to set the pointer
●
– And usually saves the previous one!
11
A shared library is a .so or .dll file, installed in the lib
directory of PostgreSQL.
When PostgreSQL has to load a shared library, it first
loads it into memory, and then executes a function
called _PG_init. This function is available in many
shared libraries, so that they can initialize memory
and set up variables. For example, we can use that
function to set the global function pointer with our
own function. It's usually better to save the previous
pointer. We may launch it at the beginning or at the
end of our own function. We may reset it at unload
time.
How do we unset the function
pointer?
At unload time, PostgreSQL calls the _PG_fini()
●
function of the shared library
This function needs to unset the pointer
●
– And usually restores the previous one!
12
We have one function called at load time, we also
have one at unload time.
When PostgreSQL needs to unload a shared library,
it calls the _PG_fini() function of the shared library.
This is the good time to restore the previous value
of the function pointer, or at least to set it to NULL.
Example with
ClientAuthentication_hook
Declaration of the function type
●
– extract from src/include/libpq/auth.h, line 27
/* Hook for plugins to get control in ClientAuthentication() */
typedef void (*ClientAuthentication_hook_type) (Port *, int);
13
This line declares the ClientAuthentication hook type.
Example with
ClientAuthentication_hook
Declare, and set the global function pointer
●
– extract from src/backend/libpq/auth.c, line 215
/*
* This hook allows plugins to get control following client authentication,
* but before the user has been informed about the results. It could be used
* to record login events, insert a delay after failed authentication, etc.
*/
ClientAuthentication_hook_type ClientAuthentication_hook = NULL;
14
This line declares the ClientAuthentication_hook
global function pointer and sets its initial value to
NULL.
Example with
ClientAuthentication_hook
Check, and execute
●
– extract from src/backend/libpq/auth.c, line 580
if (ClientAuthentication_hook)
(*ClientAuthentication_hook) (port, status);
15
These two lines check if the ClientAuthentication
hook has been set up. If it has, the function is
executed.
Writing hooks
Details on some hooks
●
– ClientAuthentication
– Executor_End
– check_password
– func_beg
And various examples
●
16
This part will go into much greater details on some of
the available hooks: ClientAuthentication, the
Executor_End, check_password, and func_beg.
We'll explain how usefull they are, list the already
available extensions using them. We'll also see
how to write a shared library that uses each of
these hooks
ClientAuthentication_hook details
Get control
●
– After client authentication
– But before informing the user
Usefull to
●
– Record login events
– Insert a delay after failed authentication
17
The ClientAuthentication_hook helps a plugin to get
control after the client authentication, but before the
client is informed of the result of the authentication.
Therefore, the plugin can do other stuff, like record
login events (with the result of the authentication),
or insert a delay after a failed authentication to
avoid DOS attacks.
ClientAuthentication_hook use
Modules using this hook
●
– auth_delay
– sepgsql
– connection_limits
(https://github.com/tvondra/connection_limits)
18
Three extensions already use this hook:
auth_delay adds a configurable delay
●
(auth_delay.milliseconds GUC) after a failed
attempt to connect
sepgsql requires specific SELinux context to allow
●
a connection
connection_limits, written by Tomas Vondra, and
●
available on GitHub, gives more control on the
limit of connections than the max_connections
GUC (per user, per database, and per IP)
ClientAuthentication_hook function
Two parameters
●
– f (Port *port, int status)
Port is a complete structure described in
●
include/libpq/libpq-be.h
– remote_host, remote_hostname, remote_port,
database_name, user_name, guc_options,
etc.
Status is a status code
●
– STATUS_ERROR, STATUS_OK
19
The ClientAuthentication_hook function requires two
parameters: a Port structure, and a status code.
The first one gives lots of information on the
connection to the hook function: user name,
database name, GUC options, etc.
The second one is a status code, mostly a boolean
value (OK or error).
Writing a ClientAuthentication_hook
Example: forbid connection if a file is present
●
Needs two functions
●
– One to install the hook
– Another one to check availability of the file, and
allow or deny connection
20
Here is an example of a new extension using the
ClientAuthentication_hook.
Our example will deny connections if a specific file is
present.
We need two functions:
The first one will install the hook (IOW, set the
●
ClientAuthentication_hook global function pointer)
,
The second one will check the availability of the file,
●
and choose to allow or deny connections.
Writing a ClientAuthentication_hook
First, initialize the hook
●
static ClientAuthentication_hook_type prev_client_auth_hook = NULL;
/* Module entry point */
void
_PG_init(void)
{
prev_client_auth_hook = ClientAuthentication_hook;
ClientAuthentication_hook = my_client_auth;
}
21
The initialization of the hook must happen in the
_PG_init function. This function is called when
PostgreSQL loads the shared library.
The first line saves the previous
ClientAuthentication_hook. The second line
changes the hook with our own function.
Writing a ClientAuthentication_hook
Check availability of the file, and allow or deny
●
connection
static void my_client_auth(Port *port, int status)
{
struct stat buf;
if (prev_client_auth_hook)
(*prev_client_auth_hook) (port, status);
if (status != STATUS_OK)
return;
if(!stat("/tmp/connection.stopped", &buf))
ereport(FATAL, (errcode(ERRCODE_INTERNAL_ERROR),
errmsg("Connection not authorized!!")));
}
22
Here is the function that does the actual work.
If a previous hook was set, we first call it.
If the result of its execution is to deny the connection,
there is no need to execute our own code. We
simply return with a “not OK” status.
If the previous hook allows the connection, we then
need to check for the presence of the file (here,
/tmp/connection.stopped). If it cannot find the file,
we use ereport() to deny properly the connection.
Executor hooks details
Start
●
– beginning of execution of a query plan
Run
●
– Accepts direction, and count
– May be called more than once
Finish
●
– After the final ExecutorRun call
End
●
– End of execution of a query plan
23
There are four hooks for the Executor. The
ExecutorStart_hook is executed at the beginning of
the execution of a query plan. The
ExecutorRun_hook may be called more than once,
to process all tuples for a plan. Sometimes, it may
stop before processing all tuples. It accepts
direction (forward, or backward), and tuples count.
The ExecutorFinish_hook is executed after the final
ExecutorRun call, and before the ExecutorEnd.
This last hook function is called at the end of the
execution of the query plan.
Executor hooks use
Usefull to get informations on executed queries
●
Already used by
●
– pg_stat_statements
– auto_explain
– pg_log_userqueries
http://pgxn.org/dist/pg_log_userqueries/
– query_histogram
http://pgxn.org/dist/query_histogram/
– query_recorder
http://pgxn.org/dist/query_recorder/
24
The executor hooks are the most used hooks in
PostgreSQL. There are two contrib modules, and
three extensions available that use these hooks.
pg_stat_statement is a contrib module that grabs
some statistics on the queries executed.
auto_explain uses the hooks to automatically log the
explain plan of each query.
pg_log_userqueries is an extension that logs all
queries according to some new GUC (per
database, user, user attribute).
query_histogram is another extension that builds a
duration histogram of the executed queries.
query_recorder is yet another extension to log
queries in one or more files, according to the
configuration (GUC parameters).
ExecutorEnd_hook function
One parameter
●
– f(QueryDesc *queryDesc)
QueryDesc is a structure described in
●
include/executor/execdesc.h
– CmdType, sourceTexte, Instrumentation, etc
25
This hook takes only one parameter, of type
QueryDesc. This parameter gives a lot of
information on the executed query (like the texte of
the query, the state of the query and the
transaction, lots of instrumentation details).
Writing an ExecutorEnd_hook
Example: log queries executed by superuser
●
only
Needs three functions
●
– One to install the hook
– One to uninstall the hook
– And a last one to do the job :-)
26
For this example, we'll log queries executed only by
superusers.
To do that, we need three functions. One to install the
hook, one to uninstall it (which is optional for us
actually), and a last one to write the log if the user
has the SUPERUSER attribute.
Writing an ExecutorEnd_hook
First, install the hook
●
/* Saved hook values in case of unload */
static ExecutorEnd_hook_type prev_ExecutorEnd = NULL;
void _PG_init(void)
{
prev_ExecutorEnd = ExecutorEnd_hook;
ExecutorEnd_hook = my_ExecutorEnd;
}
27
This function saves the previous hook on
ExecutorEnd_hook, and installs our own function
as the new hook.
Writing an ExecutorEnd_hook
The hook itself:
●
– check if the user has the superuser attribute
– log (or not) the query
– fire the next hook or the default one