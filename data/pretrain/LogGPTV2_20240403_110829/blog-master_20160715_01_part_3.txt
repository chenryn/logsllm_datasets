         18 | (100,1) |      16 | f     | f    | 10 00 00 00 00 00 00 00  
         19 | (872,1) |      16 | f     | f    | 11 00 00 00 00 00 00 00  
         20 | (32,1)  |      16 | f     | f    | 12 00 00 00 00 00 00 00  
         21 | (65,1)  |      16 | f     | f    | 13 00 00 00 00 00 00 00  
         22 | (870,1) |      16 | f     | f    | 14 00 00 00 00 00 00 00  
         23 | (841,1) |      16 | f     | f    | 15 00 00 00 00 00 00 00  
         24 | (850,1) |      16 | f     | f    | 16 00 00 00 00 00 00 00  
         25 | (30,1)  |      16 | f     | f    | 17 00 00 00 00 00 00 00  
         26 | (91,1)  |      16 | f     | f    | 18 00 00 00 00 00 00 00  
         27 | (829,1) |      16 | f     | f    | 19 00 00 00 00 00 00 00  
         28 | (16,1)  |      16 | f     | f    | 1a 00 00 00 00 00 00 00  
         29 | (784,1) |      16 | f     | f    | 1b 00 00 00 00 00 00 00  
         30 | (31,1)  |      16 | f     | f    | 1c 00 00 00 00 00 00 00  
         31 | (88,1)  |      16 | f     | f    | 1d 00 00 00 00 00 00 00  
         32 | (48,1)  |      16 | f     | f    | 1e 00 00 00 00 00 00 00  
         33 | (822,1) |      16 | f     | f    | 1f 00 00 00 00 00 00 00  
         34 | (817,1) |      16 | f     | f    | 20 00 00 00 00 00 00 00  
         35 | (109,1) |      16 | f     | f    | 21 00 00 00 00 00 00 00  
(35 rows)  
postgres=# select * from bt_page_items('test03_pkey',1);  
 itemoffset |    ctid    | itemlen | nulls | vars |          data             
------------+------------+---------+-------+------+-------------------------  
          1 | (57342,14) |      16 | f     | f    | 01 00 00 00 00 00 00 00  
          2 | (71195,14) |      16 | f     | f    | 01 00 00 00 00 00 00 00  
(2 rows)  
postgres=# select * from bt_page_items('test03_pkey',99);  
 itemoffset |    ctid    | itemlen | nulls | vars |          data             
------------+------------+---------+-------+------+-------------------------  
          1 | (66214,10) |      16 | f     | f    | 02 00 00 00 00 00 00 00  
          2 | (71209,3)  |      16 | f     | f    | 02 00 00 00 00 00 00 00  
(2 rows)  
```  
## 相关源码  
src/backend/access/nbtree/nbtpage.c  
```  
/*  
 * Unlink a page in a branch of half-dead pages from its siblings.  
 *  
 * If the leaf page still has a downlink pointing to it, unlinks the highest  
 * parent in the to-be-deleted branch instead of the leaf page.  To get rid  
 * of the whole branch, including the leaf page itself, iterate until the  
 * leaf page is deleted.  
 *  
 * Returns 'false' if the page could not be unlinked (shouldn't happen).  
 * If the (new) right sibling of the page is empty, *rightsib_empty is set  
 * to true.  
 */  
static bool  
_bt_unlink_halfdead_page(Relation rel, Buffer leafbuf, bool *rightsib_empty)  
{  
...  
        /*  
         * Mark the page itself deleted.  It can be recycled when all current  
         * transactions are gone.  Storing GetTopTransactionId() would work, but  
         * we're in VACUUM and would not otherwise have an XID.  Having already  
         * updated links to the target, ReadNewTransactionId() suffices as an  
         * upper bound.  Any scan having retained a now-stale link is advertising  
         * in its PGXACT an xmin less than or equal to the value we read here.  It  
         * will continue to do so, holding back RecentGlobalXmin, for the duration  
         * of that scan.  
         */  
        page = BufferGetPage(buf);  
        opaque = (BTPageOpaque) PageGetSpecialPointer(page);  
        opaque->btpo_flags &= ~BTP_HALF_DEAD;  
        opaque->btpo_flags |= BTP_DELETED;  
        opaque->btpo.xact = ReadNewTransactionId();  
...  
```  
contrib/pageinspect/btreefuncs.c    
```  
                if (P_ISDELETED(opaque))  
                        elog(NOTICE, "page is deleted");  
```  
## 参考  
1\. b-tree原理    
https://yq.aliyun.com/articles/54437    
## 优化手段  
1\. 频繁更新的表，数据库的优化手段    
1\.1 监控长事务，绝对控制长事务    
1\.2 缩小autovacuum naptime (to 1s) ,      
      增加autovacuum work (to 10),       
      设置autovacuum delay=0,       
      增大autovacuum work memory (to 512MB or bigger),       
      将经常变更的表和索引放到好的iops的设备上 。       
      不要小看这几个参数，非常的关键。      
1\.3 如果事务释放并且表上面已经出发了vacuum后，还是要查很多的PAGE，说明index page没有delete和收缩，可能是index page没有达到compact的要求，如果遇到这种情况，需要reindex。    
2\. PostgreSQL 9.6通过快照过旧彻底解决这个长事务引发的坑爹问题。     
9\.6 vacuum的改进如图    
![screenshot](20160715_01_pic_003.png)    
如何判断snapshot too old如图    
![screenshot](20160715_01_pic_004.png)    
https://www.postgresql.org/docs/9.6/static/runtime-config-resource.html#RUNTIME-CONFIG-RESOURCE-ASYNC-BEHAVIOR    
3\. 9.6的垃圾回收机制也还有改进的空间，做到更细粒度的版本控制，改进方法以前分享过，在事务列表中增加记录事务隔离级别，通过隔离级别判断需要保留的版本，而不是简单的通过最老事务来判断需要保留的垃圾版本。    
祝大家玩得开心，欢迎随时来 **阿里云促膝长谈** 业务需求 ，恭候光临。    
阿里云的小伙伴们加油，努力做 **最贴地气的云数据库** 。    
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")