Subject: Seeking Community Feedback on a Cross-Platform Scripting Language for DBAs

Dear Community,

I would greatly appreciate your input on a decision our team is considering. We are a group of software developers, and I am part of a team that includes Oracle and SQL Server Database Administrators (DBAs). Our work involves supporting a cross-platform Java application running on the Oracle Application Server. Our customer base uses Windows, Solaris, and Linux servers, and we maintain both SQL Server and Oracle codebases.

Currently, many of our routine tasks lack sufficient automation. Where automation does exist, it primarily relies on shell scripts, with limited equivalent functionality available on Windows. This situation has led to the need for script redevelopment across multiple platforms, which is both time-consuming and inefficient. To address this, we are looking to adopt a single, cross-platform scripting language to replace the current use of Bash, Cygwin, and Batch files.

Our ideal scripting language should meet the following criteria:

1. **Dynamic**: Not statically typed, like Java or C.
2. **Easily Available**: Readily accessible on Windows, Solaris, Linux, and potentially AIX.
3. **Minimal Setup**: Requires little to no setup, as root access is not always available.
4. **Easy Adoption**: Simple for DBAs, who are not hardcore developers, to learn and use.
5. **Code Readability**: Easy to understand and maintain other people’s code.
6. **Database Friendly**: Works seamlessly with both SQL Server and Oracle.
7. **XML Features**: Includes some features to simplify XML handling.

Given that the JVM is almost always installed on our servers, especially on application servers, and that we have many Java developers in our company, a language that runs on the JVM would be preferable. However, this is not an exclusive requirement, as we are also open to other options. Some of the languages we are considering include Groovy, Scala, Jython, Python, Ruby, and Perl.

While I personally have experience with Java and Groovy, the rest of the team is relatively new to these languages. We are looking for a dynamic, easy-to-learn language that can work effortlessly with both SQL Server and Oracle, includes some XML simplifying features, and is not a barrier for DBAs who are currently very comfortable with Bash.

We would love to hear your opinions and experiences with these languages, particularly in the context of our requirements. Any insights you can provide would be greatly appreciated.

Thank you!

Best regards,
Chris

---

**Community Response:**

Hi Chris,

Based on your requirements, Python stands out as a strong candidate. Here’s why:

- **Dynamic and Easy to Learn**: Python is known for its simplicity and readability, making it easy for non-hardcore developers to pick up.
- **Cross-Platform Availability**: Python is available on all major operating systems, including Windows, Solaris, and Linux.
- **Minimal Setup**: Python can be installed without requiring root access, and there are many tools and libraries that can be easily managed using package managers like `pip`.
- **Database Integration**: Python has excellent support for both SQL Server and Oracle through libraries like `pyodbc` and `cx_Oracle`.
- **XML Handling**: Python includes built-in libraries like `xml.etree.ElementTree` for XML processing, and third-party libraries like `lxml` offer even more powerful features.
- **JVM Compatibility**: While Python itself does not run on the JVM, Jython (a Python implementation for the JVM) is an option if staying on the JVM is a priority.

Python’s syntax and structure are often compared to pseudocode, making it highly readable and maintainable. Additionally, the large and active Python community provides extensive resources and support, which can be invaluable for a team transitioning from Bash.

If you are open to a language that runs on the JVM, Groovy is another good option. It integrates well with Java, has a dynamic nature, and offers good XML handling capabilities. However, Python’s broader adoption and ease of use make it a more accessible choice for your team.

I hope this helps, and I look forward to hearing about your decision!

Best regards,
[Your Name]