title:Preventing Page Faults from Telling Your Secrets
author:Shweta Shinde and
Zheng Leong Chua and
Viswesh Narayanan and
Prateek Saxena
Preventing Page Faults from Telling Your Secrets
Shweta Shinde
Zheng Leong Chua
Viswesh Narayanan
Prateek Saxena
National University of Singapore
{shweta24, chuazl, visweshn, prateeks} @comp.nus.edu.sg
ABSTRACT
New hardware primitives such as Intel SGX secure a user-level pro-
cess in presence of an untrusted or compromised OS. Such “en-
claved execution” systems are vulnerable to several side-channels,
one of which is the page fault channel.
In this paper, we show
that the page fault side-channel has sufﬁcient channel capacity to
extract bits of encryption keys from commodity implementations
of cryptographic routines in OpenSSL and Libgcrypt— leaking
27% on average and up to 100% of the secret bits in many case-
studies. To mitigate this, we propose a software-only defense that
masks page fault patterns by determinising the program’s mem-
ory access behavior. We show that such a technique can be built
into a compiler, and implement it for a subset of C which is sufﬁ-
cient to handle the cryptographic routines we study. This defense
when implemented generically can have signiﬁcant overhead of up
to 4000×, but with help of developer-assisted compiler optimiza-
tions, the overhead reduces to at most 29.22% in our case studies.
Finally, we discuss scope for hardware-assisted defenses, and show
one solution that can reduce overheads to 6.77% with support from
hardware changes.
1.
INTRODUCTION
Operating systems are designed to execute at higher privileges
than applications on commodity systems. Recently, this model of
assuming a trusted OS has come under question, with the rise of
vulnerabilities targeting privileged software [24]. Consequently,
new hardware primitives have emerged to safeguard applications
from untrusted OSes [36,37,47]. One such primitive is Intel SGX’s
enclaved execution which supports secure execution of sensitive
applications on an untrusted OS. The SGX hardware guarantees
that all the application memory is secured and the OS cannot ac-
cess the application content. During execution, applications rely
on the OS for memory management, scheduling and other system
services. Intel SGX holds the promise of affording a private virtual
address space for a trusted process that is immune to active probing
attacks from the hostile OS. However, side-channels such as the
page-fault channel have been recently discovered [51]. Since the
OS manages the virtual-to-physical page translation tables for the
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
ASIA CCS ’16, May 30-June 03, 2016, Xi’an, China
c(cid:13) 2016 ACM. ISBN 978-1-4503-4233-9/16/05. . . $15.00
DOI: http://dx.doi.org/10.1145/2897845.2897885
sensitive application, it can observe all page faults and the faulting
page addresses, which leaks information. These attacks show that
mere memory access control and encryption is not enough to de-
fend against the OS, which motivates a systematic study of defense
solutions to mitigate this channel.
In this paper, we ﬁrst show that the channel capacity of the page-
fault channel is sufﬁcient to extract secret key information in ex-
isting implementations of cryptographic routines (OpenSSL and
Libgcrypt). Cryptographic routines are vital to reducing the TCB
and enclaved applications are expected to critically rely on them
to establish secure channel with the I/O, ﬁlesystem and network
sub-systems [10, 27, 41]. To perform an attack, the adversarial OS
allocates a minimum number of physical pages to the sensitive en-
clave process, such that memory accesses spill out of the allocated
set as much as possible, incurring page faults. We call such attacks
as pigeonhole attacks1 because they force the victim process to spill
outside the allocated physical pages, thereby maximizing the chan-
nel capacity of the observed side-channel. They affect a long line
of systems such as Intel SGX [37], InkTag [28], PodArch [44], and
OverShadow [18] which protect application memory.
The page fault channel is much easier for the OS to exploit as
compared to other side-channels. For example, in case of cache
side-channel, the hardware resources such as size, number of data
entries, eviction algorithm and so on are often ﬁxed. The adver-
sary has a limited control on these factors and the observations are
mainly local to small fragments of program logic. On the contrary,
in case of pigeonhole attacks, adversary is much stronger, adaptive,
and controls the underlying physical resource (the number of physi-
cal pages). Moreover, it can make far more granular clock measure-
ments (both global and local) by invoking and inducing a fault in
the enclave. To defend applications against this unaddressed threat,
we seek a security property that allows an application to execute
on any input data while being agnostic to changes in the number
of pages allocated. The property assures that the OS cannot glean
any sensitive information by observing page faults. We call this
property as page-fault obliviousness (or PF-obliviousness).
In this work, we propose a purely software-based defense against
pigeonhole attacks to achieve PF-obliviousness. We point out that
defenses against time and cache side-channels do not directly pre-
vent pigeonhole attacks, and achieving PF-obliviousness has been
an open problem [51]. Our goal is to guarantee that even if the OS
observes the page faults, it cannot distinguish the enclaved execu-
tion under any values for the secret input variables. Our propose
approach is called deterministic multiplexing, wherein the enclave
application exhibits the same page fault pattern under all values
possible for the secret input variables. Speciﬁcally, we modify the
1These attacks were also referred to as controlled-channel attacks
in previous work.
program to pro-actively access all its input-dependent data and code
pages in the same sequence irrespective of the input. In our empir-
ical case studies, the naive implementation of deterministic multi-
plexing results in an overhead of about 705× on an average and
maximum 4000×! Therefore, we propose several optimizations
techniques which exploit speciﬁc program structure and makes the
overhead statistically insigniﬁcant in 8 cases, while the worst-case
performance is 29.22%. All our defenses are implemented as an
extension to the LLVM compiler, presently handling a subset of
C/C++ sufﬁcient to handle the cryptographic case studies. Finally,
we discuss alternative solutions for efﬁcient defenses, and suggest
a new defense which requires hardware support, but yields an ac-
ceptable worst-case overhead of 6.67% for our case studies.
Contributions. We make the following contributions:
• Pigeonhole attacks on real cryptographic routines. We demon-
strate that the page-fault channel has sufﬁcient capacity to
extract signiﬁcant secret information in widely-used basic
cryptographic implementations (e.g., AES, EdDSA, RSA).
• Defense. We propose PF-obliviousness and design determin-
istic multiplexing approach that eliminates information leak-
age via page fault channel.
• Optimizations & System Evaluation. We apply our defense
to the vulnerable cryptographic utilities from Libgcrypt and
OpenSSL, and devise sound optimizations.
In our experi-
ments, deterministic multiplexing amounts to an average of
705× overhead without optimization, and is reduced to an
acceptable average and worst case overhead of 29.22% after
optimization.
2. PIGEONHOLE ATTACKS
In a non-enclaved environment, the OS is responsible for manag-
ing the process memory. Speciﬁcally, when launching the process,
the OS creates the page tables and populates empty entries for vir-
tual addresses speciﬁed in the application binary. When a process
begins its execution, none of its virtual pages are mapped to the
physical memory. When the process tries to access a virtual ad-
dress, the CPU incurs a page fault. The CPU reports information
such as the faulting address, type of page access, and so on to the
OS on behalf of the faulting process, and the OS swaps in the con-
tent from the disk. Similarly, the OS deletes the virtual-to-physical
mappings when it reclaims the process physical memory as and
when requested or when necessary. Thus, a benign OS makes sure
that the process has sufﬁcient memory for execution, typically, at
least 20 pages in Linux systems [13].
2.1 Benign Enclaved Execution
The aim of enclave-like systems is to safeguard all the sensi-
tive process (called as an enclave) memory during the execution.
These systems use memory encryption [18, 44] and / or memory
access controls [28, 37] to preserve the conﬁdentiality of the sensi-
tive content. The process memory is protected such that the hard-
ware allows access in ring-3 only when a legitimate owner process
requests to access its content [18]. When the OS in ring-0 or any
other process in ring-3 tries to access the memory, the hardware
either encrypts the content on-demand or denies the access. This
guarantees that neither the OS nor other malicious processes can
access the physical memory of an enclave. In enclaved execution,
the OS memory management functions are unchanged. The onus
still lies with the OS to decide which process gets how much phys-
ical memory, and which pages should be loaded at which addresses
to maintain the process-OS semantics. The OS controls the page
table entries and is also notiﬁed on a page fault. This CPU de-
sign allows the OS to transparently do its management while the
Figure 1: Problem Setting. Process executing on untrusted OS.
hardware preserves the conﬁdentiality and integrity of the process
memory content. For example, if there are not many concurrent
processes executing, the OS may scale up the memory allocation to
a process. Later, the OS may decrease the process memory when it
becomes loaded with memory requests from other processes. Fur-
ther, the CPU reports all the interrupts (such as page fault, general
protection fault) directly to the OS. Figure 1 shows the scenario in
enclaved execution, wherein the untrusted OS can use 2 interfaces:
allocate and de-allocate to directly change the page ta-
ble for allocating or deallocating process pages respectively. Many
systems guarantee secure execution of processes in presence of un-
trusted OSes, either at the hardware or software level. Execution of
processes in such isolated environments is referred to as cloaked ex-
ecution [18], enclaved execution [37], shielded execution [10], and
so on depending on the underlying system. For simplicity, we refer
to all of them as enclaved execution in this paper. SGX-speciﬁc
details have been outlined in other works [7, 8].
2.2 Pigeonhole Attack via Page Faults
In enclaved execution, the OS sees all the virtual addresses where
the process faults 2. This forms the primary basis of the page
fault side-channel. Each page fault in the enclaved execution leaks
which speciﬁc page is the process accessing at a speciﬁc point in
execution time. Since the OS knows the internal structure of the
program such as the layout of the binary, mmap-ed pages, stack,
heap, library addresses and so on, the OS can proﬁle the execution
of the program and observe the page fault pattern. In fact it can
invoke and execute the enclave application for a large number of
inputs in ofﬂine mode to record the corresponding page fault pat-
terns. At runtime, the OS can observe the page fault pattern for
the user input and map it to its pre-computed database, thus learn-
ing the sensitive input. The remaining question is, what degree of
control does the OS have on the channel capacity?
An adversarial OS that is actively misusing this side-channel al-
ways aims to maximize the page faults and extract information for
a given input. On the other hand, applications often follow tem-
poral and spatial locality of reference and thus do not incur many
page faults during benign execution. Thus, the information leaked
via the benign page faults from the enclave is not signiﬁcant. How-
ever, note that the adversarial OS controls the process page tables
and decides which virtual pages are to be loaded in the physical
memory at a given point. To perpetrate the pigeonhole attack, the
OS allocates only three pages at most to the program at a particular
moment — the code page, the source address and the destination
address 3. Lets call this as a pigeonhole set. Thus, any subsequent
instructions that access any other page (either code or data) will fall
2In our model, the trusted CPU or hypervisor only reports the base
address of the faulting page while masking the offset within the
page (unlike in InkTag [28]).
3An x86 instruction accesses at most 3 address locations.
     RAM Enclave Data Enclave Process  Untrusted OS Trusted CPU Read Write Allocate  Page Fault Page Tables Enclave Code De-allocate Addr Trans Figure 2: Attack via input dependent data page access in AES.
The data lookup to either P1 or P2 is decided by secret.
Figure 3: Attack via input dependent control page access in
EdDSA. The control to either P1 or P2 is dependent on secret.
out of the pigeonhole set resulting in a page fault 4. The faulting ad-
dress of this instruction reveals what the process is trying to access.
In most applications, a large fraction of memory accesses patterns
are deﬁned by the input. To extract the information about this input,
the OS can pre-empt the process by inducing a page fault on nearly
every instruction. Our analysis shows that empirically, every 10th
code / data access crosses page boundaries on an average in stan-
dard Linux binaries 5. This implies that the OS can single step the
enclaved execution at the granularity of 10 instructions by forcing
a page fault and make observations about the virtual address access
patterns. Thus, by resorting to this extremity the OS achieves the
maximum leakage possible via the page fault channel.
2.3 Attack Examples
A pigeonhole attack can manifest in any application running in
an enclave. In this work, we limit our examples to cryptographic
implementations for two reasons. First, even a minimalistic enclave
will at least execute these routines for network handshake, ses-
sion establishment and so on. For example, SGX applications such
as one-time password generators, secure enterprise rights manage-
ment and secure video conferencing use an enclave for the TLS
connections and other cryptographic functions on sensitive data [27].
Second, the previous work does not study the leakage via page
faults in cryptographic routines since they are assumed to be al-
ready hardened against other side-channel attacks such as timing
and power consumption. On the contrary, we show that cache
hardening and memory encryption is not enough. This is because
caches are accessed by lower address bits while pages are accessed
by higher order bits. Only masking lower order bits does not nec-
essarily mask the page access order. Let us take a look at two rep-
resentative examples to demonstrate real pigeonhole attacks.
Input Dependent Data Page Access. We choose a real example
of AES from the Libgcrypt v1.6.3 compiled with gcc v4.8.2 on
Linux system. In this example, the adversary can learn information
equivalent to 25 bits of entropy about the input secret key. Note that
the best known purely cryptanalytic attack for AES leak informa-
tion equivalent to 2-3 bits about the key [12]. Any leakage beyond
that is a serious amount of leakage. A typical AES encryption rou-
tine involves multiple S-Box lookups. This step is used to map an
4Note that the process does not suffer denial of service, only its
progress is slowed down due to excessive page faults.
5We tested COREUTILS utilities in malicious runs under random
inputs.
input index to a non-linear value, followed by the MixColumn step.
In the Libgcrypt implementation of AES, the lookup tables are de-
signed to contain both S-box values as well as pre-computed val-
ues for MixColumns transform for optimization [2]. There are four
such tables (T able0 to T able3) which are used in table look-ups at
various rounds of encryption process. All the lookup operations in
the ﬁrst round take in a byte of the secret input key, XOR it with
the plain text (which can be set to 0s) and emit a corresponding
value in the table. Each of these tables comprise of 256 entries and
are statically loaded based on the compiler-generated layout.
In
our example, T able1 and T able3 cross page boundaries. Speciﬁ-
cally, indexes below 0x1C are in ﬁrst page (P1) while the indexes
from 0x1C to 0xFF are in second page (P2). Figure 2 shows
the snapshot of the virtual address space of AES, where T able1
is loaded. During an enclaved execution, the process will exhibit