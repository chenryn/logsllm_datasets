Cimy User Extra Fields 2.3.8
Event Registration Pro Calendar
1.0.2
Tumult Hype Animations 1.7.1
File Provider 1.2.3
WooCommerce Custom Proﬁle
Picture 1.0
WP Demo Buddy 1.0.2
LoC
484
10850
15815
9913
80
2847
3565
1099
4340
2757
94659
458
9432
16771
11914
138
983
2196
% of LoC
Analyzed
Paths
Objects
Objects
/ Path
Memory
(MB)
Time
(second)
Detected As
Vulnerable
13.02
0.29
0.60
1.78
35.00
0.98
3.25
9.46
7.70
3.77
0.25
32.53
2.07
0.20
0.19
52.17
2.65
1.32
7
2
65
12
2
8
34
126
1476
1224
16
9216
248832
3
4
33
2
2
158
55
1671
269
35
161
373
1679
13628
16138
236
62600
2780067
79
66
474
45
85
23
28
26
22
18
20
11
13
9
13
15
7
11
26
16
14
23
42.5
4.9
4.7
5.2
5.2
4.7
4.7
5.1
5.2
9.3
6.6
5.6
62.9
4.8
5
5.2
4.8
4.83
0.50
2.60
2.98
1.72
0.31
5.80
0.96
1.23
5.35
2.78
13.72
52.74
0.25
0.236
0.40
0.28
0.277
Yes
Yes
Yes
Yes
Yes
Yes
Yes
Yes
Yes
Yes
Yes
Yes
No
Yes
Yes
Yes
Yes
Yes
n
w
o
n
K
e
l
b
a
r
e
n
u
V
l
s
e
v
i
t
i
s
o
P
e
s
l
a
F
w
e
N
l
n
u
V
TABLE III: Detection Results. UChecker detected 12 out of 13 known vulnerable scripts at the cost of 2 false positives out of 28
benign samples. It detected 3 unreported vulnerable plugins.
detection measures for these 3 plugins are presented in the
bottom 3 rows in Table III.
WooCommerce is a WordPress eCommerce plugin, which
by itself supports third-party plugins to extend its func-
tionality. WooCommerce Custom Profile Picture 1.0 [19]
is one of such plugins to enable users to upload pictures
to their WooCommerce proﬁles. As indicated by its design
objective, WooCommerce Custom Profile Picture should
only accept ﬁles that are images such as .jpg, .gif, and .png.
The locality analysis of UChecker identiﬁes that it is only
necessary to perform symbolic execution for the function
“wc_cus_upload_picture()”. It further successfully identi-
ﬁed these vulnerability and precisely located it in the source
code, which is presented in Listing 6. This plugin directly
uses the original ﬁlename (i.e., $proﬁlepicture[‘name’]) as
the name of the destination ﬁle; and then it copies the
uploaded ﬁle (i.e., $proﬁlepicture[‘tmp_name’]) to the desti-
nation ﬁle. Therefore, any registered user can submit a PHP
script through this uploading interface and execute it.
1 if ( $_FILES [ ’ profile_pic ’]) {
2
$picture_id = wc_cus_upload_picture ( $_FILES [ ’
profile_pic ’]) ;
3 }
4 function wc_cus_upload_picture ( $foto ) {
5
6
7
$profilepicture = $foto ;
$wordpress_upload_dir = wp_upload_dir () ;
$new_file_path = $wordpress_upload_dir [ ’ path ’] . ’/ ’ .
8
9
10
11
12
$profilepicture [ ’ name ’];
// ...
if ( move_uploaded_file ( $profilepicture [ ’ tmp_name ’],
$new_file_path ) ) {
// ...
}
}
Listing 6: Vulnerable Code of WooCommerce 1.0 Custom
Proﬁle Picture
File Provider 1.2.3 [20] is a free WordPress plugin used for
website users to upload, search, and share ﬁles. Uploaded
ﬁles are stored in a local folder and the administrator
has the option to enable end users to access ﬁles in this
folder. The locality analysis of UChecker effectively identiﬁes
the function upload_file() for symbolic execution, which
accounts for a small percentage (i.e., 2.65%) of all code for
File Provider 1.2.3 UChecker has successfully detected
this vulnerability and located it in source code as presented
in Listing 7. Speciﬁcally, $nome_ﬁnal, which is actually the
original ﬁlename “$nome_ﬁnal=$_FILES[‘userFile’][‘name’]”,
is used as the destination ﬁlename without sanity check.
Since this plugin does not validate the type of an uploaded
ﬁle, a user can upload a PHP script and then trigger its
execution by accessing it.
1 function upload_file () {
2
3
$folderId = sanitize_text_field ( $_POST [ ’ folderId ’]) ;
$folderPath = get_file_path ( $folderId ); // User
4
5
6
7
8
declared method : get the upload path
$nome_final = $_FILES [ ’ userFile ’][ ’ name ’];
if (! move_uploaded_file ( $_FILES [ ’ userFile ’][ ’ tmp_name ’
],
$folderPath . ’/ ’ . $nome_final )) {
echo ’...  ’;
} }
Listing 7: Vulnerable Code of File Provider 1.2.3
WP Demo Buddy 1.0.2 [21] is used to create demo in-
stances, whose relevant source code is displayed in Listing 8.
Although it rejects any uploaded ﬁle whose extension is not
“zip”, it deliberately adds “.php” priori to writing this “.zip”
ﬁle into server. Therefore, an attacker can simply upload a
PHP script with “.zip” extension (e.g.„ “exploit.zip”), which
will be eventually written to the server as “exploit.zip.php”.
1 function file_Upload ( $type )
2 {
3
4
5
global $wpdb ;
$upload_dir = get_option ( ’ wp_demo_buddy_upload_dir ’);
$ext = pathinfo ( $_FILES [ $type ][ ’ name ’],
PATHINFO_EXTENSION );
if ( $ext !== ’ zip ’) return ;
$info = pathinfo ( $_FILES [ $type ][ ’ name ’]) ;
$newname = time () . rand () . ’_ ’ . $info [ ’ basename ’] .
’. php ’;
$target = $upload_dir . $newname ;
move_uploaded_file ( $_FILES [ $type ][ ’ tmp_name ’], $target
);
$ret = array ( $newname , $info [ ’ basename ’]) ;
return $ret ;
Listing 8: Vulnerable Code of WP Demo Buddy 1.0.2
6
7
8