Address of the Export Address Table, 
relative to the image base. 
32 
4 
Name Pointer RVA 
Address of the Export Name Pointer Table, 
relative to the image base. The table size is 
given by Number of Name Pointers. 
36 
4 
Ordinal Table RVA 
Address of the Ordinal Table, relative to the 
image base. 
6.3.2. Export Address Table 
The Export Address Table contains the address of exported entry points and exported data and 
absolutes. An ordinal number is used to index the Export Address Table, after subtracting the 
value of the Ordinal Base field to get a true, zero-based index. (Thus, if the Ordinal Base is set to 
1, a common value, an ordinal of 6 is the same as a zero-based index of 5.) 
Each entry in the Export Address Table is a field that uses one of two formats, as shown in the 
following table. If the address specified is not within the export section (as defined by the address 
and length indicated in the Optional Header), the field is an Export RVA: an actual address in code 
or data. Otherwise, the field is a Forwarder RVA, which names a symbol in another DLL. 
Offset 
Size 
Field 
Description 
0 
4 
Export RVA 
Address of the exported symbol when 
loaded into memory, relative to the image 
base. For example, the address of an 
exported function. 
0 
4 
Forwarder RVA 
Pointer to a null-terminated ASCII string in 
the export section, giving the DLL name and 
the name of the export (for example, 
“MYDLL.expfunc”) or the DLL name and an 
export (for example, “MYDLL.#27”). 
A Forwarder RVA exports a definition from some other image, making it appear as if it were being 
exported by the current image. Thus the symbol is simultaneously imported and exported. 
For example, in KERNEL32.DLL in Windows NT, the export named “HeapAlloc” is forwarded to 
the string “NTDLL.RtlAllocateHeap”. This allows applications to use the Windows NT-specific 
module “NTDLL.DLL” without actually containing import references to it. The application’s import 
table references only “KERNEL32.DLL.” Therefore, the application is not specific to Windows NT 
and can run on any Win32 system. 
6.3.3. Export Name Pointer Table 
The Export Name Pointer Table is an array of addresses (RVAs) into the Export Name Table. The 
pointers are 32 bits each and are relative to the Image Base. The pointers are ordered lexically to 
allow binary searches. 
An export name is defined only if the Export Name Pointer Table contains a pointer to it. 
6.3.4. Export Ordinal Table 
The Export Ordinal Table is an array of 16-bit indexes into the Export Address Table. The ordinals 
are biased by the Ordinal Base field of the Export Directory Table. In other words, the Ordinal 
Base must be subtracted from the ordinals to obtain true indexes into the Export Address Table. 
The Export Name Pointer Table and the Export Ordinal Table form two parallel arrays, separated 
to allow natural field alignment. These two tables, in effect, operate as one table, in which the 
Export Name Pointer “column” points to a public (exported) name, and the Export Ordinal 
“column” gives the corresponding ordinal for that public name. A member of the Export Name 
Pointer Table and a member of the Export Ordinal Table are associated by having the same 
position (index) in their respective arrays. 
Thus, when the Export Name Pointer Table is searched and a matching string is found at position 
i, the algorithm for finding the symbol’s address is: 
i = Search_ExportNamePointerTable (ExportName); 
ordinal = ExportOrdinalTable [i]; 
SymbolRVA = ExportAddressTable [ordinal - OrdinalBase]; 
6.3.5. Export Name Table 
The Export Name Table contains the actual string data pointed to by the Export Name Pointer 
Table. The strings in this table are public names that can be used by other images to import the 
symbols; these public export names are not necessarily the same as the (private) symbol names 
that the symbols have in their own image file and source code, although they can be. 
Every exported symbol has an ordinal value, which is just the index into the Export Address Table 
(plus the Ordinal Base value). Use of export names, however, is optional. Some, all, or none of 
the exported symbols can have export names. For those exported symbols that do have export 
names, corresponding entries in the Export Name Pointer Table and Export Ordinal Table work 
together to associate each name with an ordinal. 
The structure of the Export Name Table is a series of ASCII strings, of variable length, each null 
terminated. 
6.4. The .idata Section 
All image files that import symbols, including virtually all .EXE files, have an .idata section. A 
typical file layout for the import information follows: 
Directory Table 
Null Directory Entry 
DLL1 Import Lookup Table 
Null 
DLL2 Import Lookup Table 
Null 
DLL3 Import Lookup Table 
Null 
Hint-Name Table 
Figure 3. Typical Import Section Layout 
6.4.1. Import Directory Table 
The import information begins with the Import Directory Table, which describes the remainder of 
the import information. The Import Directory Table contains address information that is used to 
resolve fix-up references to the entry points within a DLL image. The Import Directory Table 
consists of an array of Import Directory Entries, one entry for each DLL the image references. The 
last directory entry is empty (filled with null values), which indicates the end of the directory table. 
Each Import Directory entry has the following format: 
Offset 
Size 
Field 
Description 
0 
4 
Import Lookup Table 
RVA (Characteristics) 
Relative virtual address of the Import 
Lookup Table; this table contains a name or 
ordinal for each import. (The name 
“Characteristics” is used in WINNT.H but is 
no longer descriptive of this field.) 
4 
4 
Time/Date Stamp 
Set to zero until bound; then this field is set 
to the time/data stamp of the DLL. 
8 
4 
Fowarder Chain 
Index of first forwarder reference. 
12 
4 
Name RVA 
Address of ASCII string containing the DLL 
name. This address is relative to the image 
base. 
16 
4 
Import Address Table 
RVA (Thunk Table) 
Relative virtual address of the Import 
Address Table: this table is identical in 
contents to the Import Lookup Table until 
the image is bound. 
6.4.2. Import Lookup Table 
An Import Lookup Table is an array of 32-bit numbers for PE32, 64-bit for PE32+. Each entry uses 
the bit-field format described below, in which bit 31 (63) is the most significant bit. The collection 
of these entries describes all imports from the image to a given DLL. The last entry is set to zero 
(NULL) to indicate end of the table. 
Bit(s) 
Size 
Bit Field 
Description 
31 / 63 
1 
Ordinal/Name Flag 
If bit is set, import by ordinal. Otherwise, 
import by name. Bit is masked as 
0x80000000 for PE32, 
0x8000000000000000 for PE32+. 
30 – 0 / 62 – 0 
31 / 63 
Ordinal Number 
Ordinal/Name Flag is 1: import by ordinal. 
This field is a 31-bit (63-bit) ordinal 
number. 
30 – 0 / 62 – 0 
31 / 63 
Hint/Name Table RVA 
Ordinal/Name Flag is 0: import by name. 
This field is a 31-bit (63-bit) address of a 
Hint/Name Table entry, relative to image 
base. 
In a PE32 image, the lower 31 bits can be masked as 0x7FFFFFFF. In either case, the resulting 
number is a 32-bit integer or pointer in which the high bit is always zero (zero extension to 32 bits). 
Similarly for a PE32+ image, the lower 63 bits can be masked as 0x7FFFFFFFFFFFFFFF. 
6.4.3. Hint/Name Table 
One Hint/Name Table suffices for the entire import section. Each entry in the Hint/Name Table 
has the following format: 
Offset 
Size 
Field 
Description 
0 
2 
Hint 
Index into the Export Name Pointer Table. A match is 
attempted first with this value. If it fails, a binary search is 
performed on the DLL’s Export Name Pointer Table. 
2 
variable 
Name 
ASCII string containing name to import. This is the string 
that must be matched to the public name in the DLL. This 
string is case sensitive and terminated by a null byte. 
* 
0 or 1 
Pad 
A trailing zero pad byte appears after the trailing null byte, 
if necessary, to align the next entry on an even boundary. 
6.4.4. Import Address Table 
The structure and content of the Import Address Table are identical to that of the Import Lookup 
Table, until the file is bound. During binding, the entries in the Import Address Table are 
overwritten with the 32-bit (or 64-bit for PE32+) addresses of the symbols being imported: these 
addresses are the actual memory addresses of the symbols themselves (although technically, 
they are still called “virtual addresses”). The processing of binding is typically performed by the 
loader. 
6.5. The .pdata Section 
The .pdata section contains an array of function table entries used for exception handling and is 
pointed to by the exception table entry in the image data directory. The entries must be sorted 
according to the function addresses (the first field in each structure) before being emitted into the 
final image. The target platform determines which of the three variations described below is used. 
For 32-bit MIPS and Alpha images the following structure is used: 
Offset 
Size 
Field 
Description 
0 
4 
Begin Address 
Virtual address of the corresponding function. 
4 
4 
End Address 
Virtual address of the end of the function. 
8 
4 
Exception Handler 
Pointer to the exception handler to be 
executed. 
12 
4 
Handler Data 
Pointer to additional information to be passed 
to the handler. 
16 
4 
Prolog End Address 
Virtual address of the end of the function’s 
prolog. 
For the ARM, PowerPC, SH3 and SH4 WindowsCE platforms, this function table entry format is 
used: 
Offset 
Size 
Field 
Description 
0 
4 
Begin Address 
Virtual address of the corresponding 
function. 
4 
8 bits 
Prolog Length 
Number of instructions in the function’s 
prolog. 
4 
22 bits 
Function Length 
Number of instructions in the function. 
4 
1 bit 
32-bit Flag 
Set if the function is comprised of 32-bit 
instructions, cleared for a 16-bit function. 
4 
1 bit 
Exception Flag 
Set if an exception handler exists for the 
function. 
Finally, for ALPHA64 the pdata entry format is as follows: 
Offset 
Size 
Field 
Description 
0 
8 
Begin Address 
Virtual address of the corresponding 
function. 
8 
8 
End Address 
Virtual address of the end of the function. 
16 
8 
Exception Handler 
Pointer to the exception handler to be 
executed. 
24 
8 
Handler Data 
Pointer to additional information to be 
passed to the handler. 
32 
8 
Prolog End Address 
Virtual address of the end of the function’s 
prolog. 
6.6. The .reloc Section (Image Only) 
The Fix-Up Table contains entries for all fixups in the image. The Total Fix-Up Data Size in the 
Optional Header is the number of bytes in the fixup table. The fixup table is broken into blocks of 
fixups. Each block represents the fixups for a 4K page. Each block must start on a 32-bit 
boundary. 
Fixups that are resolved by the linker do not need to be processed by the loader, unless the load 
image can’t be loaded at the Image Base specified in the PE Header. 
6.6.1. Fixup Block 
Each fixup block starts with the following structure: 
Offset 
Size 
Field 
Description 
0 
4 
Page RVA 
The image base plus the page RVA is 
added to each offset to create the virtual 
address of where the fixup needs to be 
applied. 
4 
4 
Block Size 
Total number of bytes in the fixup block, 
including the Page RVA and Block Size 
fields, as well as the Type/Offset fields that 
follow. 
The Block Size field is then followed by any number of Type/Offset entries. Each entry is a word (2 
bytes) and has the following structure: 
Offset 
Size 
Field 
Description 
0 
4 bits 
Type 
Stored in high 4 bits of word. Value 
indicating which type of fixup is to be 
applied. These fixups are described in 
“Fixup Types.” 
0 
12 bits 
Offset 
Stored in remaining 12 bits of word. Offset 
from starting address specified in the Page 
RVA field for the block. This offset specifies 
where the fixup is to be applied. 
To apply a fixup, a delta is calculated as the difference between the preferred base address, and 
the base where the image is actually loaded. If the image is loaded at its preferred base, the delta 
would be zero, and thus the fixups would not have to be applied. 
6.6.2. Fixup Types 
 Constant 
Value 
Description 
IMAGE_REL_BASED_ABSOLUTE 
0 
The fixup is skipped. This type can be used to 
pad a block. 
IMAGE_REL_BASED_HIGH 
1 
The fixup adds the high 16 bits of the delta to 
the 16-bit field at Offset. The 16-bit field 
represents the high value of a 32-bit word. 
IMAGE_REL_BASED_LOW 
2 
The fixup adds the low 16 bits of the delta to 
the 16-bit field at Offset. The 16-bit field 
represents the low half of a 32-bit word.  
IMAGE_REL_BASED_HIGHLOW 
3 
The fixup applies the delta to the 32-bit field at 
Offset. 
IMAGE_REL_BASED_HIGHADJ 
4 
The fixup adds the high 16 bits of the delta to 
the 16-bit field at Offset. The 16-bit field 
represents the high value of a 32-bit word. 
The low 16 bits of the 32-bit value are stored 
in the 16-bit word that follows this base 
relocation. This means that this base 
relocation occupies two slots. 
IMAGE_REL_BASED_MIPS_JMPADDR 
5 
Fixup applies to a MIPS jump instruction. 
IMAGE_REL_BASED_SECTION 
6 
Reserved for future use 
IMAGE_REL_BASED_REL32 
7 
Reserved for future use 
IMAGE_REL_BASED_MIPS_JMPADDR16 
9 
Fixup applies to a MIPS16 jump instruction. 
IMAGE_REL_BASED_DIR64 
10 
This fixup applies the delta to the 64-bit field at 
Offset 
IMAGE_REL_BASED_HIGH3ADJ 
11 
The fixup adds the high 16 bits of the delta to 
the 16-bit field at Offset. The 16-bit field 
represents the high value of a 48-bit word. 
The low 32 bits of the 48-bit value are stored 
in the 32-bit word that follows this base 
relocation. This means that this base 
relocation occupies three slots. 
6.7. The .tls Section 
The .tls section provides direct PE/COFF support for static Thread Local Storage (TLS). TLS is a 
special storage class supported by Windows NT, in which a data object is not an automatic 
(stack) variable, yet it is local to each individual thread that runs the code. Thus, each thread can 
maintain a different value for a variable declared using TLS. 
Note that any amount of TLS data can be supported by using the API calls TlsAlloc, TlsFree, 
TlsSetValue, and TlsGetValue. The PE/COFF implementation is an alternative approach to 
using the API, and it has the advantage of being simpler from the high-level-language 
programmer’s point of view. This implementation enables TLS data to be defined and initialized in 
a manner similar to ordinary static variables in a program. For example, in Microsoft Visual C++, a 
static TLS variable can be defined as follows, without using the Windows API: 
__declspec (thread) int tlsFlag = 1; 
To support this programming construct, the PE/COFF .tls section specifies the following 
information: initialization data, callback routines for per-thread initialization and termination, and 