### Issue Report

#### Preliminary Checks
- I have thoroughly searched the issues in this repository and believe that this is not a duplicate.
- I have reviewed the FAQ of this repository and confirmed that this is not a duplicate.

#### Environment
- **Dubbo Version:** 2.6.6
- **Operating System:** CentOS
- **Java Version:** 1.8

#### Steps to Reproduce
1. The service encountered a situation where the thread pool was fully utilized, and the Dubbo stack trace was logged.
2. All the threads in the pool were found to be in a waiting state.
3. The Dubbo business thread pool was configured with a size of 1000, and the QPS (Queries Per Second) was approximately 1500+.

#### Expected Result
- The thread pool should not be fully utilized, even though the concurrency level is high.

#### Actual Result
- The logged Dubbo thread states indicate that all threads are in a `WAITING` state, which suggests they are idle.
  ```
  "DubboServerHandler-xxx-thread-234" Id=322 WAITING on java.util.concurrent.SynchronousQueue$TransferStack@53452753
  	at sun.misc.Unsafe.park(Native Method)
  	-  waiting on java.util.concurrent.SynchronousQueue$TransferStack@53452753
  	at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175)
  	at java.util.concurrent.SynchronousQueue$TransferStack.awaitFulfill(SynchronousQueue.java:458)
  	at java.util.concurrent.SynchronousQueue$TransferStack.transfer(SynchronousQueue.java:362)
  	at java.util.concurrent.SynchronousQueue.take(SynchronousQueue.java:924)
  	at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1067)
  	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1127)
  	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
  	at java.lang.Thread.run(Thread.java:745)
  ```

#### Questions
- Should I adjust the number of threads in the thread pool?
- Are there any other optimization methods I can consider?

Thank you for your assistance.