       0x55b25db586ce :mov    eax,0x5dc
       0x55b25db586d3 :
        sub    eax,DWORD PTR [rbp-0x13c]//ETH_MTU-hlen
       0x55b25db586d9 :
        sub    eax,DWORD PTR [rbp-0x10c]//-tcp_hlen
    => 0x55b25db586df :
        mov    DWORD PTR [rbp-0x104],eax
    [------------------------------------------------------------------------------]
    Legend: code, data, rodata, value
    0x000055b25db586df2232                    int tcp_chunk_size = ETH_MTU - hlen - tcp_hlen;
随后rtl8139_cplus_transmit_one函数会进入一个for循环处理，这个for循环会计算每一个chunk_size是达到整个tcp_data_len的末尾，如果没有则处理整个chunk_size并发送。
    int tcp_data_len = ip_data_len - tcp_hlen;//tcp_data_len = 0xffff-0x14=0xffeb
    int tcp_chunk_size = ETH_MTU - hlen - tcp_hlen;//chunk_size = 0x5b4
    for (tcp_send_offset = 0; tcp_send_offset = tcp_data_len)//if packet length > tcp data length
                            {
                                is_last_frame = 1;
                                chunk_size = tcp_data_len - tcp_send_offset;
                            }
                            DPRINTF("+++ C+ mode TSO TCP seqno %08xn",
                                be32_to_cpu(p_tcp_hdr->th_seq));
                            /* add 4 TCP pseudoheader fields */
                            /* copy IP source and destination fields */
                            memcpy(data_to_checksum, saved_ip_header + 12, 8);
                            DPRINTF("+++ C+ mode TSO calculating TCP checksum for "
                                "packet with %d bytes datan", tcp_hlen +
                                chunk_size);
                            if (tcp_send_offset)
                            {
                                memcpy((uint8_t*)p_tcp_hdr + tcp_hlen, (uint8_t*)p_tcp_hdr + tcp_hlen + tcp_send_offset, chunk_size);//disclouse key!!!p_tcp_hdr = ip_header   p_tcp_hdr+tcp_hlen = data section
                                //
                            }
                            /* keep PUSH and FIN flags only for the last frame */
                            if (!is_last_frame)
                            {
                                TCP_HEADER_CLEAR_FLAGS(p_tcp_hdr, TCP_FLAG_PUSH|TCP_FLAG_FIN);
                            }
                            /* recalculate TCP checksum */
                            ip_pseudo_header *p_tcpip_hdr = (ip_pseudo_header *)data_to_checksum;
                            p_tcpip_hdr->zeros      = 0;
                            p_tcpip_hdr->ip_proto   = IP_PROTO_TCP;
                            p_tcpip_hdr->ip_payload = cpu_to_be16(tcp_hlen + chunk_size);
                            p_tcp_hdr->th_sum = 0;
                            int tcp_checksum = ip_checksum(data_to_checksum, tcp_hlen + chunk_size + 12);
                            DPRINTF("+++ C+ mode TSO TCP checksum %04xn",
                                tcp_checksum);
                            p_tcp_hdr->th_sum = tcp_checksum;
                            /* restore IP header */
                            memcpy(eth_payload_data, saved_ip_header, hlen);
                            /* set IP data length and recalculate IP checksum */
                            ip->ip_len = cpu_to_be16(hlen + tcp_hlen + chunk_size);
                            /* increment IP id for subsequent frames */
                            ip->ip_id = cpu_to_be16(tcp_send_offset/tcp_chunk_size + be16_to_cpu(ip->ip_id));
                            ip->ip_sum = 0;
                            ip->ip_sum = ip_checksum(eth_payload_data, hlen);
                            DPRINTF("+++ C+ mode TSO IP header len=%d "
                                "checksum=%04xn", hlen, ip->ip_sum);
                            int tso_send_size = ETH_HLEN + hlen + tcp_hlen + chunk_size;
                            DPRINTF("+++ C+ mode TSO transferring packet size "
                                "%dn", tso_send_size);
                            rtl8139_transfer_frame(s, saved_buffer, tso_send_size,
                                0, (uint8_t *) dot1q_buffer);
                            /* add transferred count to TCP sequence number */
                            p_tcp_hdr->th_seq = cpu_to_be32(chunk_size + be32_to_cpu(p_tcp_hdr->th_seq));
                            ++send_count;
                        }
在for循环中，会有一处if语句判断tcp_send_offset是否为0，当tcp_send_offset不为0时，会执行memcpy操作，拷贝目标缓冲区进入待发送的tcp_buffer中，这个memcpy拷贝的就是buffer，而每轮都会拷贝一个chunk_size，之后再加一个chunk_size，这样就会超过原本buffer的大小，而考到缓冲区外的空间，造成内存泄露。首先来看memcpy第一回合。
    gdb-peda$ si
    [----------------------------------registers-----------------------------------]
    RDX: 0x5b4 //size
    RSI: 0x7f49f003adfa --> 0x9000000000000000//src 
    RDI: 0x7f49f003a846 --> 0x0 //dst
    [-------------------------------------code-------------------------------------]
       0x55b25db5880e :add    rcx,rdx
       0x55b25db58811 :mov    rdx,rax
       0x55b25db58814 :mov    rdi,rcx
    => 0x55b25db58817 :call   0x55b25d9361a8//memcpy
    Guessed arguments:
    arg[0]: 0x7f49f003a846 --> 0x0 
    arg[1]: 0x7f49f003adfa --> 0x9000000000000000 
    arg[2]: 0x5b4 
    arg[3]: 0x7f49f003a846 --> 0x0 
    [------------------------------------------------------------------------------]
    Legend: code, data, rodata, value
    Thread 3 "qemu-system-x86" hit Breakpoint 4, 0x000055b25db58817 in rtl8139_cplus_transmit_one (s=0x55b26083d430)
        at /home/sh1/Desktop/qemu/hw/net/rtl8139.c:2267
    2267                            memcpy((uint8_t*)p_tcp_hdr + tcp_hlen, (uint8_t*)p_tcp_hdr + tcp_hlen + tcp_send_offset, chunk_size);
    gdb-peda$ x/50x 0x7f49f003adfa//src
    0x7f49f003adfa:0x90000000000000000x100000007f49e7c7
    0x7f49f003ae0a:0xc0000000000000000x100000007f49e456
    0x7f49f003ae1a:0x80000000000000000x100000007f49ef8b
    gdb-peda$ ni
    [----------------------------------registers-----------------------------------]
    RAX: 0x7f49f003a846 --> 0x9000000000000000 
    [-------------------------------------code-------------------------------------]
       0x55b25db58811 :mov    rdx,rax
       0x55b25db58814 :mov    rdi,rcx
       0x55b25db58817 :call   0x55b25d9361a8
    => 0x55b25db5881c :
        cmp    DWORD PTR [rbp-0x130],0x0
    [------------------------------------------------------------------------------]
    Legend: code, data, rodata, value
    2271                        if (!is_last_frame)
    gdb-peda$ x/50x 0x7f49f003a846//target dst
    0x7f49f003a846:0x90000000000000000x100000007f49e7c7
    0x7f49f003a856:0xc0000000000000000x100000007f49e456
    0x7f49f003a866:0x80000000000000000x100000007f49ef8b
    //memcpy(0x7f49f003a846,0x7f49f003adfa,lenth)
这里注意一下目前我们拷贝的缓冲区起始地址是：0x7f49f003adfa，拷贝到目标缓冲区后，单步跟踪，会发现for循环中会调用rtl8139_tansfer_frame函数将saved_buffer送回缓冲区。而saved_buffer的内容就包含了我们拷贝的内容。
    gdb-peda$ si
    [----------------------------------registers-----------------------------------]
    RAX: 0x55b26083d430 --> 0x55b25f178400 --> 0x55b25f15eda0 --> 0x55b25f15ef20 --> 0x393331386c7472 ('rtl8139')
    RBX: 0x1 
    RCX: 0x0 
    RDX: 0x5ea 
    RSI: 0x7f49f003a810 --> 0x5452563412005452 
    RDI: 0x55b26083d430 --> 0x55b25f178400 --> 0x55b25f15eda0 --> 0x55b25f15ef20 --> 0x393331386c7472 ('rtl8139')
    [-------------------------------------code-------------------------------------]
       0x55b25db58a3a :mov    r8,rcx
       0x55b25db58a3d :mov    ecx,0x0
       0x55b25db58a42 :mov    rdi,rax
    => 0x55b25db58a45 :
        call   0x55b25db5776d 
    Guessed arguments:
    arg[0]: 0x55b26083d430 --> 0x55b25f178400 --> 0x55b25f15eda0 --> 0x55b25f15ef20 --> 0x393331386c7472 ('rtl8139')
    arg[1]: 0x7f49f003a810 --> 0x5452563412005452 
    arg[2]: 0x5ea 
    arg[3]: 0x0 
    arg[4]: 0x0 
    [------------------------------------------------------------------------------]
    Legend: code, data, rodata, value
    0x000055b25db58a452307                        rtl8139_transfer_frame(s, saved_buffer, tso_send_size,
    gdb-peda$ x/50x  0x7f49f003a810//save_buffer
    0x7f49f003a810:0x54525634120054520x0045000856341200
    0x7f49f003a820:0x06400040aededc050xa8c0010108c0b9d3
    0x7f49f003a830:0xfecaefbeadde02010x1050bebafeca72c0
    0x7f49f003a840:0x00000000f015adde0xe7c7900000000000
    0x7f49f003a850:0x0000100000007f490xe456c00000000000