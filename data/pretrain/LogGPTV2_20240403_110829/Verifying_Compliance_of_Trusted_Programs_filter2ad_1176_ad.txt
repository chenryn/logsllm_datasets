### Policy Rules and Information-Flow Graph

The following policy rules define the access permissions for various subjects and objects:

1. **init_t to init_var_run_t:**
   - `create`, `getattr`, `read`, `append`, `write`, `setattr`, `unlink`

2. **init_t to bin_t:**
   - `read`, `getattr`, `lock`, `execute`, `ioctl`
   - `execute no trans`

3. **init_t to etc_t:**
   - `read`, `getattr`, `lock`, `ioctl`

4. **logrotate_t to etc_t:**
   - `read`, `getattr`, `lock`, `ioctl`

5. **logrotate_t to bin_t:**
   - `read`, `getattr`, `lock`, `execute`, `ioctl`
   - `execute no trans`

6. **chfn_t to etc_t:**
   - `create`, `ioctl`, `read`, `getattr`, `write`, `setattr`, `append`, `link`, `unlink`

**Figure 6** illustrates the information-flow graph for these rules, showing that:
- `init_t` can read from and write to `init_var_run_t`.
- `logrotate_t` can read from `etc_t` and `bin_t`.
- `chfn_t` has write access to `etc_t`, which `logrotate_t` can read.

### Tamperproof Compliance Testing

#### Parsing and Analyzing SELinux Policies

We use a C program integrated with Flex and Bison to parse the text version of an SELinux policy (file `policy.conf`). Additionally, we can analyze the binary version of the SELinux system policy.

#### Extending the Information-Flow Graph

To include the logrotate program's information flows, we extend the information-flow graph with vertices (labels) and edges (read and write flows) from the logrotate policy module.

#### Removing Unnecessary Edges

Edges where neither vertex is in the tamperproof goal policy are removed as they do not affect the logrotate program's integrity.

### Evaluating Logrotate

#### Integrity Compliance Checking

Tamperproof compliance is evaluated by checking the system policy for information flow integrity, as defined by the tamperproof goal policy. We identify information flows that violate the Biba integrity requirement, where an information flow from a low integrity label to a high integrity label is detected.

```prolog
NonBibaFlowsSELinux(Policy) = 
    {(t1, t2) : t1, t2 ∈ types(Policy). highintegrity(t1) ∧ lowintegrity(t2) ∧ (read(t1, t2) ∨ write(t2, t1))}
```

We use the XSB Prolog engine to run queries based on the NonBiba Flows rule to detect labels that affect compliance.

#### Results

Table 1 shows the results for compliance checking logrotate against the generated tamperproof goal policy. Only `etc_t` has unauthorized writers. In the SELinux/MLS reference policy, these writers are programs with legitimate reasons to write to files in the `/etc` directory, but none have legitimate reasons to write to logrotate files.

| Package | SELinux Label | Writers | Exceptions |
|---------|---------------|---------|------------|
| cups    | initrc exec t  | 8       | no         |
|         | textrel shlib t| 9       | no         |
|         | lpr exec t     | 8       | no         |
|         | dbusd etc t    | 7       | no         |
|         | var log t      | 8       | no         |
|         | var run t      | 10      | no         |
|         | var spool t    | 8       | no         |
| dmidecode | dmidecode exec t | 7       | no         |
| hald    | hald exec t    | 10      | no         |
| iptables | iptables exec t | 8       | no         |
| kudzu   | kudzu exec t   | 8       | no         |
| locale  | locale t       | 8       | no         |
| NetworkManager | NetworkManager exec t | 7       | no         |
| rpm     | rpm exec t     | 8       | no         |
| sshd    | sshd exec t    | 8       | no         |

### Evaluating Other Trusted Programs

Table 2 summarizes the results from applying the PIDSI approach to eight SELinux trusted programs. The table shows the trusted package, file labels (SELinux types), number of writers per type, and exceptions.

| SELinux Label | Writers | Exception |
|---------------|---------|-----------|
| bin t         | 9       | no        |
| etc t         | 18      | integrity |
| lib t         | 8       | no        |
| man t         | 8       | integrity |
| sbin t        | 8       | no        |
| usr t         | 7       | no        |

### Discussion

Trusted programs may use system files, such as system libraries or the password file, in addition to their own package files. Some trusted programs install their own libraries under the system label `lib_t`, so our analysis includes system libraries. Application integrity depends on the integrity of all files it uses, including system files.

An issue is whether a trusted program may create a file with a system label that it depends on. For example, a trusted program generating the password file, which is used by the system, would have a system label. We did not see this in our trusted programs, but it is possible in practice.

Handling low integrity program objects is another challenge. Low integrity objects should be relative to trusted programs, lower than all trusted programs but higher than system data. Further investigation is required.