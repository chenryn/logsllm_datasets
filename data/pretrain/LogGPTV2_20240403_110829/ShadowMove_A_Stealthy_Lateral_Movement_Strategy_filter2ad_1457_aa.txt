title:ShadowMove: A Stealthy Lateral Movement Strategy
author:Amirreza Niakanlahiji and
Jinpeng Wei and
Md Rabbi Alam and
Qingyang Wang and
Bei-Tseng Chu
ShadowMove: A Stealthy Lateral Movement Strategy
Amirreza Niakanlahiji, University of Illinois Springfield; Jinpeng Wei and 
Md Rabbi Alam, UNC Charlotte; Qingyang Wang, Louisiana State University; 
Bei-Tseng Chu, UNC Charlotte
https://www.usenix.org/conference/usenixsecurity20/presentation/niakanlahiji
This paper is included in the Proceedings of the 29th USENIX Security Symposium.August 12–14, 2020978-1-939133-17-5Open access to the Proceedings of the 29th USENIX Security Symposium is sponsored by USENIX.ShadowMove: A Stealthy Lateral Movement Strategy
Amirreza Niakanlahiji∗
University of Illinois Springﬁeld
PI:EMAIL
Jinpeng Wei
UNC Charlotte
PI:EMAIL
Md Rabbi Alam
UNC Charlotte
PI:EMAIL
Qingyang Wang
Louisiana State University
PI:EMAIL
Bei-Tseng Chu
UNC Charlotte
PI:EMAIL
Abstract
Advanced Persistence Threat (APT) attacks use various
strategies and techniques to move laterally within an enter-
prise environment; however, the existing strategies and tech-
niques have limitations such as requiring elevated permissions,
creating new connections, performing new authentications, or
requiring process injections. Based on these characteristics,
many host and network-based solutions have been proposed
to prevent or detect such lateral movement attempts. In this
paper, we present a novel stealthy lateral movement strategy,
ShadowMove, in which only established connections between
systems in an enterprise network are misused for lateral move-
ments. It has a set of unique features such as requiring no
elevated privilege, no new connection, no extra authentication,
and no process injection, which makes it stealthy against state-
of-the-art detection mechanisms. ShadowMove is enabled by
a novel socket duplication approach that allows a malicious
process to silently abuse TCP connections established by be-
nign processes. We design and implement ShadowMove for
current Windows and Linux operating systems. To validate
the feasibility of ShadowMove, we build several prototypes
that successfully hijack three kinds of enterprise protocols,
FTP, Microsoft SQL, and Window Remote Management, to
perform lateral movement actions such as copying malware to
the next target machine and launching malware on the target
machine. We also conﬁrm that our prototypes cannot be de-
tected by existing host and network-based solutions, such as
ﬁve top-notch anti-virus products (McAfee, Norton, Webroot,
Bitdefender, and Windows Defender), four IDSes (Snort, OS-
SEC, Osquery, and Wazuh), and two Endpoint Detection and
Response systems (CrowdStrike Falcon Prevent and Cisco
AMP).
1 Introduction
Advanced Persistent Threats (APTs) are sophisticated, well-
planned, and multistep cyber attacks against high proﬁle tar-
gets such as government agencies or large enterprises. Such
∗Part of this research was performed while being a Ph.D. student at UNC
Charlotte
attacks are conducted by groups of well-resourced knowledge-
able attackers (such as Lazarus or APT38) and cost companies
and government agencies billions of dollars in ﬁnancial losses
per year [28].
APT attackers commonly use spearphishing or watering
hole attacks to ﬁnd a foothold within target networks. Once
they entered the target networks, they cautiously use the com-
promised systems as stepping stones to reach other systems
until they get access to the critical systems, such as ﬁle server
containing conﬁdential documents, buried deep inside the net-
works; this incremental movement toward the critical systems
is called lateral movement.
Lateral movement can be achieved in a number of ways.
Attackers can exploit vulnerabilities in network services, such
as SMB or RDP, to laterally move across networks. How-
ever, due to advances in defense mechanisms, ﬁnding such
vulnerabilities and successfully exploiting them without be-
ing detected has become increasingly difﬁcult. Alternatively,
attackers can harvest user credentials from compromised sys-
tems and reuse such credentials to perform lateral movement
(e.g., credential dumping [43], pass-the-hash, or pass-the-
ticket [24–26, 37, 38]). However, this approach requires new
network connections to be created and thus can be detected
by network-level defenses if the new connection deviates
from the normal communication pattern among legitimate
systems [34, 35, 51]. Using another approach, adversaries can
employ hijacking attacks that modify a legitimate client in
order to reuse its connection for lateral movement (e.g., by
patching a SSH client to communicate with the SSH server
without knowing the password [19]). However, such attacks
are application- and protocol- speciﬁc and require process
injection; they are hard to implement and prone to detection
as existing host-based defensive solutions (e.g., Windows
Defender ATP [48]) recognize various process injection tech-
niques.
In this paper, we present a novel lateral movement strategy,
called ShadowMove, which enables APT attackers to move
stealthily among the systems in enterprise networks without
being discovered by existing host-level and network-level de-
USENIX Association
29th USENIX Security Symposium    559
fensive mechanisms as demonstrated in Section 5. We assume
that attackers want to avoid exploiting vulnerabilities in re-
mote services during their operation to reduce the chance of
being exposed by intrusion detection systems (IDSes). In this
attack scenario, attackers passively observe communication
dynamics of the compromised systems to gradually construct
their model of normal behaviors in the target network and uti-
lize this model to choose the next victim system. Moreover, to
make the attack even stealthier, attackers restrict themselves
to only reuse established connections. Many application pro-
tocols such as WinRM (Windows Remote Management) and
FTP allow users to perform some operations on the remote
server. Attackers inject their own commands in the command
streams of such protocols to achieve their goal. For exam-
ple, attackers can execute a program remotely by injecting
commands in an established WinRM session (Section 4.4),
or they can inspect the ﬁle system on the remote system by
injecting FTP commands in an established FTP connection
(Section 4.2).
ShadowMove does not use any code in benign client pro-
cesses to inject fabricated commands. Instead, it employs a
novel technique to secretly duplicate sockets owned by le-
gitimate clients and injects commands through such stolen
sockets (Section 3.4). By doing so, no new connection will be
created and no new authentication will be performed as the
injected commands are interpreted in the context of already
established sessions; this means that the attacker does not
need to pass any authentication.
In this work, we show how an attacker can implement such
an attack on a typical enterprise network. To this end, we de-
velop a prototype system that can hijack existing TCP connec-
tions established by an FTP client (Section 4.2), a Microsoft
SQL client (Section 4.3), and a WinRM client (Section 4.4)
running under the same user account as our prototype and
without any elevated privileges. We also present a Prolog-
based planner that an attacker can utilize to systematically
plan for lateral movement by hijacking available connections.
In this way, the attacker can reach the critical systems signiﬁ-
cantly stealthier than existing attack scenarios. We discuss the
technical challenges on how attackers can inject their packets
that conform to the protocol running over an established TCP
connection and be acceptable to the server on the other end
of the connection.
• We present a new class of lateral movements which is com-
pletely undetectable by existing network and host-based
defensive solutions including IDSes, Antivirus, and EDR
(Endpoint Detection and Response) systems.
• We propose a novel socket duplication technique that en-
ables attackers to reuse connections established by other
processes on a compromised system. We, then, develop a
lateral movement framework on top of this technique.
• We demonstrate the feasibility of our idea by building a
prototype system on Windows 10 that successfully hijacks
We summarize our contributions as follows:
Figure 1: ShadowMove Lateral Movement
FTP, TDS (used by Microsoft SQL Server), and WinRM
connections for lateral movements. This Windows proto-
type demonstrates all features of ShadowMove, requiring
no elevated privilege, no new connection, no extra authenti-
cation, and no process injection. We also build a prototype
that successfully hijacks FTP on Ubuntu 18.04 without
requiring elevated privilege, new connections, or extra au-
thentication. However, the design is not as stealthy as its
Windows counterpart because it relies on process injec-
tion and requires stronger assumptions about the attacker
(Section 3.4.3).
• We experimentally conﬁrm that our prototypes can evade
the detection of ﬁve top-notch anti-virus products (McAfee,
Norton, Webroot, Bitdefender, and Windows Defender),
four IDSes (Snort, OSSEC, Osquery, and Wazuh), and
two emerging Endpoint Detection and Response systems:
CrowdStrike Falcon Prevent and Cisco AMP. It is impor-
tant to point out that CrowdStrike Falcon Prevent is known
to detect lateral movements.
The result of our study calls for a revisit of enterprise pro-
tocols in terms of their susceptibility to hijacking attacks.
2 ShadowMove Approach
The basic idea of ShadowMove is to reuse established and
legitimate connections to laterally move within the compro-
mised network. As shown in Figure 1, ShadowMove works in
three main steps: ﬁrst, it silently duplicates a socket used by
a legitimate client application to communicate with a server
application; second, it uses the duplicated socket to inject
packets in the existing TCP session between the client and
the server; third, the server handles the injected packets and
unintentionally saves and/or launches a new instance of Shad-
owMove. As a result of these steps, an attacker stealthily
moves from the client machine to the server machine.
Since ShadowMove restricts itself to reuse established con-
nections to neighboring systems, it can ensure intrusion de-
tection systems that raise alarms for unexpected connections
cannot detect its operation. Moreover, by doing so, the attack
can bypass the authentication phase required for establishing
a new connection. ShadowMove attack is noteworthy from
both a host security perspective and a network security per-
spective: at the host level, ShadowMove abuses resources
owned by a victim process (i.e., established and authenticated
network connections); on the other hand, because what Shad-
560    29th USENIX Security Symposium
USENIX Association
owMove abuses are sockets, its attack actions extend to the
network level, by blending malicious network trafﬁc with
benign network trafﬁc.
2.1 Fundamental Weaknesses Exploited by
ShadowMove
Two fundamental weaknesses in the existing computing
environment enable ShadowMove attacks. The ﬁrst weakness
stems from the two conﬂicting but essential requirements,
namely process isolation and resource sharing, in commodity
operating systems such as GNU Linux and Microsoft Win-
dows. The next weakness arises from the fact that many of the
existing networking protocols lack proper built-in message
origin integrity validation mechanisms, which makes them
susceptible to message injection attacks.
Process isolation and process (resource) sharing are con-
ﬂicting requirements. A process has a virtual address space,
open handles to system objects, and other attributes. All pro-
cesses in an operating system must be protected from each
other’s activities, for reliability and security reasons [52]. The
protection mechanism of a modern OS isolates the access
to different kinds of resources (e.g., CPU, memory, and I/O
devices) among processes. For example, memory isolation
puts each process into its own “address space”. On the other
hand, modern OSes support sharing among processes because
sharing of data/resources can be useful. Take socket sharing
for example, one process ﬁrst creates sockets and establishes
connections, then it hands off those sockets to other processes
that will be in charge of information exchange through those
sockets. However, sharing among processes has risks, so it
has to be carefully controlled. Modern OSes assume that
processes that share resources trust each other by setting up
appropriate security policies to control the access to shared
objects, to ensure the safety of such sharing (e.g., [36]).
Unfortunately, the default access control policy of com-
modity OSes suffers from wrong assumptions about process
trust relationship. For example, the built-in Windows security
policy allows processes by the same user to share their open
handles to resources, and the built-in Linux policy allows a
parent process to access memory of a child process through
ptrace [3]. These default allow policies assume a trust relation-
ship among processes of the same user or between a parent
process and a child process, which is not realistic in today’s
computing environments. As a result, such default allow poli-
cies can be abused by an attacker. In this paper, we present a
concrete example, socket duplication attack, which enables a
malicious process to impersonate a legitimate process in the
interaction with an external entity over the network.
Another underlying problem that enables ShadowMove is
the lack of proper message origin integrity checks in many
application protocols such as FTP and TDS (for MS SQL). As
a result, endpoints cannot verify the origins of the messages
to ensure that the messages are not interleaved by malicious
actors. An attacker who duplicated a socket can interject a
request in between requests of a client and mislead the server
to think the original client sent it, thus processing the request.
We can divide application protocols into three categories
with regard to enforcing message origin integrity:
• No origin integrity enforcement. Such protocols do not
have any built-in mechanisms that enable the server to
check the origin integrity of the received messages, so any
proper message that conforms with the protocol is accepted
by the server. They are susceptible to ShadowMove attacks
and one representative protocol is FTP.
• Inadequate origin integrity enforcement. In these proto-
cols, the server generates a random nonce for the client to
use along with its requests, and the server uses this nonce
to validate the origin of received requests. Unfortunately,
these protocols are not safe against ShadowMove because
the attacker can wait for the client to create new connec-
tions and listen to the response from the server to learn the
nonce. One representative protocol is WinRM.
• Adequate origin integrity enforcement. In these proto-
cols, part of the information needed for validating origin
integrity is generated by the client and not by the server. In
this case, there is no way an attacker can learn that piece
of information by listening to server response. These proto-
cols are immune to ShadowMove and one representative
protocol is SSL.
2.2 Threat Model
We assume that attackers have established a foothold on a
victim system under a normal user’s privilege, and they want
to make a lateral movement towards the critical asset(s). The
attackers have to run malware to achieve this. We assume
that the victim process whose TCP connection is going to be
hijacked is not aware of the malware process.
Demonstration Scenario We use an Employee Self-
service Application of a company as an example. This is
a typical multi-tier enterprise application that can be accessed
from a browser. Below is the description of the components
of such a system:
• Employee desktop computers, which run the web client.
Some employees are IT personnel at the same time, and
they need to occasionally push content to the application
server, so their computers have ﬁle copying tools (such as
FTP) installed.
• Application server, which runs many applications such as
payroll, stock, health insurance, retirement plan, and travel.
• Database server, which stores personnel information such
as DOB, SSN, contact info, and salary, and is accessed by
the application server.
In this example, attackers landed on an employee desktop
(via spearphishing), and this employee happens to be an IT
personnel. The critical assets that the attackers go after is em-
ployee information stored on the database server. Therefore,
attackers need to move from the desktop to the application
USENIX Association
29th USENIX Security Symposium    561
The Connection Detector module (Section 3.1) is respon-
sible for detecting newly-established TCP connections that
can be exploited for lateral movement and requesting the
Socket Duplicator to duplicate the corresponding socket. It
also detects the teardown of TCP connections and notiﬁes the
Network View Manager.
The Socket Duplicator (Section 3.4) duplicates sockets
owned by target processes and passes along such sockets to