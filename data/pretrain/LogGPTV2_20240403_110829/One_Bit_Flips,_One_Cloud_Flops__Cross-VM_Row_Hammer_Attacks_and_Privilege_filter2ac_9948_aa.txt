title:One Bit Flips, One Cloud Flops: Cross-VM Row Hammer Attacks and Privilege
Escalation
author:Yuan Xiao and
Xiaokuan Zhang and
Yinqian Zhang and
Radu Teodorescu
One Bit Flips, One Cloud Flops: Cross-VM Row 
Hammer Attacks and Privilege Escalation
Yuan Xiao, Xiaokuan Zhang, Yinqian Zhang, and Radu Teodorescu,  
The Ohio State University
 https://www.usenix.org/conference/usenixsecurity16/technical-sessions/presentation/xiao
This paper is included in the Proceedings of the 25th USENIX Security SymposiumAugust 10–12, 2016 • Austin, TXISBN 978-1-931971-32-4Open access to the Proceedings of the 25th USENIX Security Symposium is sponsored by USENIX One Bit Flips, One Cloud Flops:
Cross-VM Row Hammer Attacks and Privilege Escalation
Yuan Xiao
Xiaokuan Zhang
Yinqian Zhang
Radu Teodorescu
Department of Computer Science and Engineering
The Ohio State University
{xiao.465, zhang.5840}@buckeyemail.osu.edu, {yinqian, teodores}@cse.ohio-state.edu
Abstract
Row hammer attacks exploit electrical interactions be-
tween neighboring memory cells in high-density dy-
namic random-access memory (DRAM) to induce mem-
ory errors. By rapidly and repeatedly accessing DRAMs
with speciﬁc patterns, an adversary with limited privilege
on the target machine may trigger bit ﬂips in memory re-
gions that he has no permission to access directly. In this
paper, we explore row hammer attacks in cross-VM set-
tings, in which a malicious VM exploits bit ﬂips induced
by row hammer attacks to crack memory isolation en-
forced by virtualization. To do so with high ﬁdelity, we
develop novel techniques to determine the physical ad-
dress mapping in DRAM modules at runtime (to improve
the effectiveness of double-sided row hammer attacks),
methods to exhaustively hammer a large fraction of phys-
ical memory from a guest VM (to collect exploitable
vulnerable bits), and innovative approaches to break
Xen paravirtualized memory isolation (to access arbi-
trary physical memory of the shared machine). Our study
also suggests that the demonstrated row hammer attacks
are applicable in modern public clouds where Xen par-
avirtualization technology is adopted. This shows that
the presented cross-VM row hammer attacks are of prac-
tical importance.
1
Introduction
Security of software systems is built upon correctly im-
plemented and executed hardware-software contracts.
Violation of these contracts may lead to severe security
breaches. For instance, operating system security re-
lies on the assumption that data and code stored in the
memory subsystems cannot be altered without media-
tion by the software running with system privileges (e.g.,
OS kernels, hypervisors, etc.). However, the recently
demonstrated row hammer attacks [23], which are capa-
ble of inducing hardware memory errors without access-
ing the target memory regions, invalidate this assump-
tion, raising broad security concerns.
Row hammer attacks exploit a vulnerability in the de-
sign of dynamic random-access memory (DRAM). Mod-
ern high-capacity DRAM has very high memory cell
density which leads to greater electrical interaction be-
tween neighboring cells. Electrical interference from
neighboring cells can cause accelerated leakage of ca-
pacitor charges and, potentially, data loss. Although
these so-called “disturbance errors” have been known
for years, it has only recently been shown that these er-
rors can be triggered by software. In particular, [23] has
demonstrated that malicious programs may issue spe-
cially crafted memory access patterns, e.g., repeated and
rapid activation of the same DRAM rows, to increase
the chances of causing a disturbance error in neighbor-
ing rows.
Row hammer vulnerabilities have been exploited in
security attacks shortly after its discovery [4, 10, 16, 20].
In particular, Seaborn [4] demonstrated two privilege es-
calation attacks that exploit row hammer vulnerabilities:
One escaped from Google’s NaCl sandbox and the other
gained kernel memory accesses from userspace pro-
grams running on Linux operating systems. Other stud-
ies [10, 16, 20] aim to conduct row hammer attacks from
high-level programming languages, e.g., JavaScript, so
that an adversary can induce memory errors and escalate
privileges remotely, by injecting malicious JavaScript
code into the target’s web trafﬁc (e.g., by hosting ma-
licious websites, cross-site scripting, man-in-the-middle
attacks, etc.).
In contrast to the client-side bit ﬂip exploitations,
server-side row hammer attacks are much less under-
stood. One particularly interesting scenario where
server-side row hammer attacks are of importance is
in multi-tenant infrastructure clouds, where mutually-
distrusting cloud tenants (i.e., users of clouds) may co-
locate their virtual machines (VM) on the same physical
server, therefore sharing hardware resources, including
USENIX Association  
25th USENIX Security Symposium  19
DRAMs. Although server-grade processors and more
expensive DRAMs are believed to be less vulnerable to
row hammer attacks [23], studies have suggested that
even servers equipped with error correcting (ECC) mem-
ory are not immune to such attacks [12, 23].
In this paper, we aim to explore row hammer attacks
in cross-VM settings, and shed some light on the secu-
rity, or lack thereof, in multi-tenant infrastructure clouds.
The goal of this research is not to extensively study how
vulnerable the cloud servers are. Rather, we explore
whether the isolation of cloud software systems—virtual
machines and hypervisors—can be circumvented by row
hammer attacks (and if so, how?), should the underlying
hardware become vulnerable.
Towards this end, we demonstrate cross-VM row ham-
mer attacks with high ﬁdelity and determinism, which
can be achieved in the following pipelined steps.
First, determine physical address mapping in DRAM.
Double-sided row hammer attacks target a speciﬁc mem-
ory row by hammering its two neighboring rows to en-
hance the effectiveness of the attack [4, 23]. Conducting
such attacks, however, requires knowledge of the physi-
cal memory mapping in DRAMs (i.e., bits in physical ad-
dresses that determine memory channels, DIMMs, ranks,
banks, and rows). This enables the identiﬁcation of ad-
dresses in neighboring rows of the same bank. How-
ever such information is not publicly available for In-
tel processors and memory controllers. Moreover, the
same memory controller may map physical addresses to
DRAMs in different ways, depending on how DRAM
modules are conﬁgured.
To address this issue, we developed a novel algo-
rithm to determine the memory mapping at runtime
(Section 3). Each bank in a DRAM chip has a row buffer
that caches the most recently used row in a bank. There-
fore, by alternately accessing two rows in the same bank,
we expect a higher memory access latency due to row
buffer conﬂicts. The increase in access latency serves as
the basis for a timing channel which can be used to de-
termine if two physical memory addresses are mapped to
the same DRAM bank. Building on the timing-channel
primitive, we developed a novel graph-based algorithm
which models each bit in a physical address as a node in
a graph and establishes relationships between nodes us-
ing memory access latency. We show that the algorithm
is capable of accurately detecting the row bits, column
bits and bank bits. We empirically show the algorithm
can accurately identify the DRAM mapping schemes au-
tomatically within one or two minutes on the machines
we tested.
Second, conduct effective double-sided row hammer
attacks. With knowledge of the DRAM address map-
ping, we conduct double-sided row hammer attacks from
Xen guest VMs. We ﬁrst empirically study which row
hammer attack methods (i.e., accessing memory with or
without mfence instructions, see Section 4) are most ef-
fective and lead to most bit ﬂips. Then, in order to guar-
antee that sufﬁcient exploitable bit ﬂips (i.e., located at
speciﬁc memory locations and can be repeatedly induced
in row hammer attacks) are found, we conduct exhaus-
tive row hammer attacks from a guest VM to test all
DRAM rows that are accessible to the VM. Because each
VM is limited to a small portion of the entire physical
memory, we also develop methods to explore more phys-
ical memory than assigned to our VM initially. In addi-
tion, we design a safe mode that makes bit ﬂips induced
by row hammer attacks less likely to crash the system.
Third, crack memory isolation enforced by virtual-
ization. Unlike prior work, which sprays large num-
bers of page tables and conducts random row hammer
attacks hoping that bit ﬂips will occur in a page table
entry (PTE) [4], in our approach (Section 5), we use hy-
percalls to map page directories in the OS kernel of our
own VM to physical pages containing memory cells that
are vulnerable to row hammer attacks. We then conduct
row hammer attacks to deterministically ﬂip the vulner-
able bit at anticipated positions in a page directory en-
try (PDE), making it point to a different page table. In
the context of this paper, we call such attack techniques
page table replacement attacks to indicate that the orig-
inal page table has been replaced with a forged one. We
empirically demonstrate in Section 6 that such attacks al-
low a Xen guest VM to have both read and write access
to any memory pages on the machine. We demonstrate
two examples to illustrate the power of the cross-VM row
hammer attacks: private key exﬁltration from an HTTPS
web server and code injection to bypass password au-
thentication of an OpenSSH server. We emphasize that
with the attack techniques we propose in this paper, the
attacker’s capability is only limited by imagination.
We note our attacks primarily target Xen paravirtual-
ized VMs, which, although are gradually superseded by
hardware-assisted virtualization, are still widely used as
cloud substrates in public cloud like Amazon EC2. This
offers the adversary easy-to-break targets on servers with
vulnerable hardware. Given the existing evidence of suc-
cessful co-location attacks in public clouds [30, 32], we
recommend discontinuing the use of such virtualization
technology in cloud hosting services.
Contributions. This paper makes the following contri-
butions to the ﬁeld:
• A novel graph-based algorithm incorporating timing-
based analysis to automatically reverse engineer the
mapping of the physical addresses in DRAMs.
• A novel page table replacement technique that allows
a malicious guest VM to have read and write accesses
20  25th USENIX Security Symposium 
USENIX Association
2
to arbitrary physical pages on the shared machine.
• Implementation of effective double-sided row ham-
mer attacks from guest VMs, and a systematic evalu-
ation of the proposed techniques.
• Demonstration of two concrete examples to illustrate
the power of the cross-VM attacks: private key ex-
traction from HTTPS servers and code injection into
OpenSSH servers to bypass authentication.
Roadmap. We will ﬁrst summarize related work in
the ﬁeld and introduce background knowledge to set the
stage for our discussion (Section 2). We will then de-
scribe a novel graph-based algorithm for detecting phys-
ical address mapping in DRAMs (Section 3). We then
present a few technical details in our row hammer attack
implementation (Section 4) and a page table replacement
attack that enables arbitrary cross-VM memory accesses
(Section 5). Next, we evaluate the proposed techniques
(Section 6). Finally, we discuss existing countermea-
sures (Section 7) and conclude (Section 8).
2 Background and Related Work
2.1 DRAM Architecture
Modern memory systems are generally organized in mul-
tiple memory channels, each handled by its own dedi-
cated memory controller. A channel is partitioned into
multiple ranks. A rank consists of several DRAM chips
that work together to handle misses or reﬁll requests
from the processor’s last-level cache. Each rank is also
partitioned into multiple banks. Each bank has a row
buffer to store the last accessed row in that bank. All
banks and ranks can generally support independent trans-
actions, allowing parallel accesses to the DRAM chips.
A typical memory system is illustrated in Figure 1.
Figure 1: DRAM architecture.
DRAM chips are large arrays of memory cells with
additional support logic for data access (read/write) and
refresh circuitry used to maintain data integrity. Mem-
ory arrays are organized in rows (wordlines) and columns
(bitlines) of memory cells.
Each memory cell consists of a capacitor that can be
charged and discharged to store a 0 or a 1. An access
transistor in each cell allows reads and writes to its con-
tent. The transistor is controlled through the wordline.
When the wordline is activated, the content of all the ca-
pacitors on that row are discharged to the bitlines. Sense
ampliﬁer circuitry on each bitline ampliﬁes the signal
and stores the result in the row buffer.
Additional circuitry in the memory arrays includes ad-
dress decoding logic to select rows and columns and in-
ternal counters to keep track of refresh cycles. In addition
to the cells dedicated for data storage, DRAM chips of-
ten include additional storage for ECC (error-correction
codes) or parity bits, to enable detection and/or correc-
tion of errors in the data array.
DRAM Refresh. The charge in the DRAM cell capaci-
tor drains over time due to leakage current. To prevent
data loss the content of the cell requires periodic “re-
fresh.” The refresh interval ranges between 32 and 64
milliseconds and is speciﬁed as part of the DDR memory
standard. Refresh operations are issued at rank granular-
ity in recent designs. Before issuing a refresh operation,
the memory controller precharges all banks in the rank. It
then issues a single refresh command to the rank. DRAM
chips maintain a row counter to keep track of the last row
that was refreshed – this row counter is used to determine
the rows that must be refreshed next.
DRAM address mapping. Given a physical memory
address, the location of the data in the DRAM chips
is determined by the DRAM address mapping schemes
used by the memory controllers. This information, while
available for some processors [3], is not revealed by
major chip companies like Intel or ARM. Some pre-
liminary exploration to determine DRAM address map-
ping on older Intel processors has been conducted by
Seaborn [5]. Concurrently to our work, Pessl et al. [29]
proposed methods to reverse-engineer physical address
mapping in DRAM on both Intel and ARM platforms.
Similar to our work, a timing-based approach was used
to determine whether two addresses were mapped to
two different rows of the same DRAM bank. Unlike
our work, brute-force approaches were taken to (1) col-
lect sets of memory addresses that are mapped to the
same banks by randomly selecting addresses from a large