ifap->ifa_data to learn the statistics of the trafﬁc that
goes in or out through this interface. In particular, we collected
the trafﬁc of en0 (WIFI interface) for analysis in Sec. IV.
Other active interfaces include lo0, ipsec0, pdp_ip0, etc.
getifaddrs() is widely used by both app developers and
third-party libraries. In our static analysis, we found 3,955 out
of 7,418 apps include the API in the apps. iOS apps use this
API in many different ways. For example, an app could collect
network-related information and upload it to a remote server
for crash/error reporting purposes. It may also use the MAC/IP
as an identiﬁer of the device.
File Systems: [NSFileManager ﬁleExistsAtPath:]. When an
app has proper permission to access a ﬁle or directory, the API
will return to the caller whether the queried ﬁle or directory
exists. However, when an app does not possess the required
permission,
the return value will always be FALSE. This
sandbox rule protects sensitive ﬁles from being accessed by un-
privileged third-party apps. [NSFileManager ﬁleExistsAtPath:]
is a frequently used Objective-C API, which is referenced by
7,331 of 7,418 apps. For example, to avoid exceptions, an app
may check whether a ﬁle exists before reading from it.
However, we found that this protecting mechanism can
be circumvented using a timing channel. Though the result
will always be FALSE when the caller doesn’t have proper
permission,
the execution time of this API varies vastly.
When the ﬁle or directory actually exists, the function call
will execute much slower than the cases where the ﬁle or
directory doesn’t exist at all. We conjecture this is because
when a ﬁle exists, additional permission checks will incur. This
execution time difference is big enough to be measured using
the API mach_absolute_time(). Therefore, one could
utilize this timing channel to tell whether a ﬁle or directory
exists, regardless of the sandbox isolation. In Section VI, we
1These apps were sampled from 26 categories in Apple’s App Store; they
were updated between Jan. 1, 2016 and Feb. 23, 2017.
3
can be roughly identiﬁed by eyeballing the traces of memory
and network statistics. More speciﬁcally, when an app is
launched, the total number of free physical memory pages (i.e.,
free_count) drops, the page fault count increases dramat-
ically in a short period, and intense inbound and outbound
network activities are observed (see Fig. 1). When the Home
button is pressed, typically some memory (e.g., increased value
of free_count) and network activities can be observed.
These results suggest that it is possible to infer user’s
activities from these global statistic counters. However, unlike
previously demonstrated side-channel attacks that sample data
from procfs per-app statistics, global counters are much
noisier. By eyeballing the traces from data collected from
multiple runs of the same experiments, it seems very chal-
lenging to exploit any of these features alone to successfully
identify the user’s activities related to a speciﬁc app. Indeed,
as we will show in Fig. 3, none of these features can be used
individually to achieve high accuracy in the classiﬁcation of
the mobile user’s activities. As such, a classiﬁer that combines
these features together must be built.
Prior studies that analyze side-channel data traces for in-
ference attacks typically only utilize one data trace to perform
the attacks [32], [36], [41], [48], [50], [53]. In these attacks, a
single side-channel trace is typically sufﬁcient for the intended
attack goals. The challenge we face when conducting side-
channel analysis with multiple side-channel traces (with each
trace being a time series of data points) is to reduce the
dimension of data for classiﬁcation. Towards this end, we
designed a new classiﬁcation framework to perform side-
channel inference attacks with multiple data traces.
A. Attack Methods
We developed a classiﬁcation framework that maps a set
of l time series of n side-channel observations to a “label”, L,
which corresponds to some user’s activity on the device. More
formally,
(cid:9) ⇒ L
(cid:8)X 1
t ,··· , X l
t , X 2
,··· , X i
t
t = (X i
t1
). Our classiﬁcation frame-
where X i
work consists of three major components: SAX, BOP, and
SVM, which will be explained in details below.
, X i
t2
tn
1) SAX: Symbolic Aggregate approXimation (SAX) was
invented by Keogh and Lin in 2002 [54]. It enables us to
encode the time series in an efﬁcient way, without losing
important information. It requires a time series as input, and it
will output a string that represents this time series. The basic
workﬂow of SAX is:
(a) Dimensionality Reduction. To reduce an n-dimensional
time series to an m-dimensional time series, the n data
points are divided into m equal-sized windows, with each
window containing p = n/m data points. The mean value
of the data points within a window is calculated and a
vector of m such values becomes the new representation
of the original time series. This approach is also called
Piecewise Aggregate Approximation (PAA) [14].
(b) Z-normalization. The second step is to convert the PAA
representation into a series of numbers that follows Normal
Gaussian Distribution,
the
mean and standard deviation of the time series Xti be
i.e., N(0,1). Particularly,
let
Fig. 1: Traces of global statistics when three iOS apps,
Amazon, Yelp, and Spotify were launched and suspended in
a sequence.
show that this side channel results in severe privacy leakage
on iOS.
IV. ATTACK 1: CLASSIFYING USER ACTIVITIES
In this section, we show how a malicious iOS app may
exploit these attack vectors to classify the user’s activities on
iOS devices.
VM
NW
faults
Feature
Category
en0 ibytes
en0 obytes
free_count
active_count
zero_ﬁll_count
We exploited 6 features
revealing the global statis-
tics of memory and net-
work resources in the at-
tacks. These features are
listed in Table I. Specif-
ically, we collected data
from 4 features that de-
scribe statistics of virtual
and physical memory us-
age (i.e., category VM), in-
cluding free_count (the number of free physical mem-
ory pages currently available in the operating system),
active_count (the total number of pages currently in
use and pageable), zero_fill_count (the number of
zero-ﬁll pages), and faults (the cumulative number of
page faults). These data were collected by repeatedly call-
ing host_statistics64(). By extracting data from
getifaddrs() in similar manners, we collected data from 2
features describing network usage (i.e., category NW): ibytes
and obytes, which report the cumulative number of bytes
received and sent, respectively, from the Wiﬁ interface en0.
TABLE I: Attack vectors.
Fig. 1 shows the data traces of these 6 features (with each
point showing the difference between two consecutive data
points of the raw data) collected by an iOS app running in
the background, when three apps, Amazon, Yelp, and Spotify,
were launched and then suspended (pressing the Home button)
in a sequence. Each data point in the ﬁgures shows the value
change of the feature compared to the last reading. The APIs
were called periodically at the frequency of 1000 times per
second. We can see from the ﬁgure that the user’s activities
4
AmazonYelp                  Spotifyti
ˆµ and ˆσ, Z-normalization is performed as X(cid:48)
ˆµ)/ˆσ. [20]
= (Xti −
(c) Discretization. Since the time series now follows Nor-
mal Gaussian Distribution, it is easy to determine the
breakpoints that will produce α equal-sized areas in the
Gaussian curve, where α is the number of different sym-
bols used to represent the data, thus a parameter of the
framework. For example, Table II shows the corresponding
breakpoints when α equals to 3, 4, 5. Then, according to
these breakpoints, the time series of real values is further
converted into a time series of symbols. For instance, the
values that are smaller than the smallest breakpoint will
be replaced by symbol a, the values between the smallest
and the second smallest breakpoint will be converted into
b, etc. Fig. 2 shows an example of SAX when n = 50,
p = 5, α = 3. The corresponding SAX string would be
cbbcccbaaa.
After the process of SAX, we will have a string of m
symbols that represents the original
time series. The ﬁnal
length of the SAX string can be adjusted by changing the
window size p. For example, when n = 100 and p = 4, the
ﬁnal string length is 25; when n = 100 and p = 10, the ﬁnal
length is 10.
α
3
4
5
Breakpoints
-0.43, 0.43
-0.67, 0, 0.67
-0.84, -0.25, 0.25, 0.84
TABLE II: Breakpoints.
Fig. 2: SAX example.
2) BOP: Bag-of-Patterns (BOP) representation was pro-
posed by Lin and Li in 2009 [46]. BOP converts an SAX-
produced string into an array of ﬁxed length. To do so, ﬁrst
a dictionary of all w-symbol SAX strings (dubbed words) is
created, where w is a parameter of the algorithm. For example,
for α = 2 and w = 2, the size of the dictionary would be
αw = 4, and the dictionary of words are aa, ab, ba, bb. Then
given the dictionary, BOP counts the frequency of different
words in the original SAX string. To avoid over-counting
trivial matches [46], i.e., similar words that are neighbors in
the original SAX strings, we count only the ﬁrst occurrence
of each word. For example, given α = 2 and w = 2,
for an SAX string aabaabbbbb,
the ﬁnal result would be:
{aa : 2, ab : 2, ba : 1, bb : 1}. Note that bb is counted only
once. The result of this step is called “Bag-of-Patterns” for
this time series. For a collection of time series, we can use the
same dictionary to construct BOP for all of them. Therefore,
the converted BOP array is of the same size.
3) SVM: The Support Vector Machine (SVM) is one of
the most popular classiﬁers. In this paper, we choose LibSVM
[30] as the tool to perform SVM classiﬁcation because of its
popularity and easy-to-use command-line interface.
Because our attacks will utilize multiple side-channel at-
tack vectors, the input of the SVM classiﬁcation will have
multiple BOP sequences. We concatenate these sequences into
one BOP array, which we call the ﬁnal BOP representation,
and then convert it into LibSVM input format. Though the
dimension of the ﬁnal BOP representation may be quite large,
only a small fraction of the data points would have non-zero
values (less than 10%).
Fig. 3: App classiﬁcation result using single features.
4) Our Framework: Our framework assembles the three
parts mentioned above. The overall workﬂow is:
(a) Data Collection. First, we collect multiple traces for each
event that we are interested in. Because the traces are
gathered from more than one features, we will have
multiple (i.e., l) time series for each trace.
(b) Difference Calculation. As we are only interested in the
changes of the time series instead of the absolute value,
for each time series seqk (k = 1, 2,··· , l), we calculate
the difference between every two consecutive data points,
i.e., diffk[i] = seqk[i] − seqk[i − 1].
(c) SAX Transformation. By choosing appropriate α and p, we
convert the l diff sequences into the SAX representation
as mentioned in Sec. IV-A1.
(d) BOP Construction. After a diff sequence is converted into
an SAX string, we can construct the BOP of the sequence
based on the chosen α and w using the method mentioned
in Sec. IV-A2. Because we use the BOP method, there is
no need to align different time series.
(e) SVM Classiﬁcation. The last step is to convert the BOPs
into LibSVM inputs and use LibSVM to perform classiﬁ-
cation. We choose the RBF kernel for SVM and use the
probability model, which will perform cross-validation and
output conﬁdence estimations of classifying a test sample
into a class [12].
An alternative approach to our framework is to employ
Dynamic Time Wrapping (DTW) [25] to measure distances
between samples of multiple classes and use kNN classi-
ﬁers [33] to perform the classiﬁcation based on the calculated
distances. Our SAX+BOP+SVM framework outperforms this
alternative approach because, according to Lin et al. [46], when
DTW is used as distance measures for large datasets, the time
complexity is prohibitive (up to two magnitudes higher time
complexity). We have evaluated and compared the execution
time of these two algorithms in our own experiments. The
results suggest the kNN classiﬁer with DTW is too slow in our
setting. We encourage interested readers to refer to Sec. VII-F.
B. Case Studies
We demonstrate how an iOS app can infer the user’s
activities using the classiﬁcation framework we laid out in
Sec. IV-A in three examples: inferring foreground apps, web-
site ﬁngerprinting, and inferring map searches. These attack
targets are of interest to advertisement providers as they can
help proﬁle mobile users but are not directly attainable, as iOS
disallows third-party apps to learn which app is running in the
5
01020304050−1.5−1.0−0.50.00.51.01.5cbbcccbaaaTop 1Top 2Top 3020406080100Accuracy(%)free_countactive_countzero_fill_countfaultsen0-ibytesen0-obytesAllforeground, which website the user visits, and which location
the user searches, for privacy concerns.
In the attacks that follow, the 6 features in Table I were
sampled periodically at
the frequency of 1000 times per
second. The parameters of the classiﬁcation framework were
selected as p = 5, α = 5, and w = 5. These attacks were
conducted on a jailbroken iPhone 7 that runs iOS 10.1.1. Note
the attacks do not need a jailbroken device to succeed. Using
jailbroken device merely made data collection easy to conduct,
so that we can apply the classiﬁcation framework to analyze
larger datasets. In Sec. VII-D, we will show that the training
and testing of the classiﬁer do not need to be on the same
device—the training can be done on a jailbroken device while
the attack can be conducted on a non-jailbroken one.
1) Foreground Apps: We downloaded 100 popular apps in
April 2017 from the Top charts of free apps in the App Store,
and chose another 20 pre-installed iOS apps for the experiment.
For each of these 120 apps, 10 side-channel
traces were
collected, with each trace consisting of 6 time series formed
by data sampled from the 6 features in Table I. The sampling
frequency was 1000 per second. The monitoring app started
data collection before the target app was launched, but only the
ﬁrst 5000 data points after the app launching were included in
the time series. It is very easy to programmatically identify the
beginning of the app launching procedure as it is quite evident
in the traces (as seen in Fig. 1). The target app was terminated
after each round of the experiment. We automated the above
experiment using Cycript [8] on the jailbroken device. We
collected in total 1200 traces (i.e., 1200 × 6 time series of
side-channel data) for the 120 apps.