Faulted The task terminated because of an exception.
In the next exercise, you will attempt to report the status of each task so
that you can see when they have completed or have been canceled.
Canceling a Parallel For or ForEach loop
The Parallel.For and Parallel.ForEach methods don’t provide you with
direct access to the Task objects that have been created. Indeed, you
don’t even know how many tasks are running—the .NET Framework
uses its own heuristics to work out the optimal number to use based on
the resources available and the current workload of the computer.
If you want to stop the Parallel.For or Parallel.ForEach method
early, you must use a Parallel-LoopState object. The method you
specify as the body of the loop must include an additional
ParallelLoopState parameter. The Parallel class creates a
ParallelLoopState object and passes it as this parameter into the
method. The Parallel class uses this object to hold information about
each method invocation. The method can call the Stop method of this
object to indicate that the Parallel class should not attempt to perform
any iterations beyond those that have already started and finished. The
example that follows shows the Parallel.For method calling the
Download from finelybook PI:EMAIL
808
doLoopWork method for each iteration. The doLoopWork method
examines the iteration variable; if it is greater than 600, the method calls
the Stop method of the ParallelLoopState parameter. This causes the
Parallel.For method to stop running further iterations of the loop.
(Iterations currently running might continue to completion.)
Note Remember that the iterations in a Parallel.For loop are not
run in a specific sequence. Consequently, canceling the loop when
the iteration variable has the value 600 does not guarantee that the
previous 599 iterations have already run. Likewise, some
iterations with values greater than 600 might already have
completed.
Click here to view code image
Parallel.For(0, 1000, doLoopWork);
...
private void doLoopWork(int i, ParallelLoopState p)
{
    ...
    if (i > 600)
    {
        p.Stop();
    }
}
Display the status of each task
1. In Visual Studio, display the MainPage.xaml file in the Design View
window. In the XAML pane, add the following markup to the definition
of the MainPage form before the final  tag, as shown in the
following in bold:
Click here to view code image
Download from finelybook PI:EMAIL
809
This markup adds a TextBlock control named messages to the bottom of
the form.
2. Display the MainPage.xaml.cs file in the Code and Text Editor window
and find the plotButton_Click method.
3. Add the code shown below in bold to this method. These statements
generate a string that contains the status of each task after it has finished
running and then display this string in the messages TextBlock control at
the bottom of the form.
Click here to view code image
private async void plotButton_Click(object sender,
RoutedEventArgs e)
{
    ...
    await first;
    await second;
    duration.Text = $"Duration (ms):
{watch.ElapsedMilliseconds}";
    string message = $"Status of tasks is {first.Status},
{second.Status}";
    messages.Text = message;
    ...
}
4. On the Debug menu, click Start Without Debugging.
5. In the GraphDemo window, click Plot Graph but do not click Cancel.
Verify that the message displayed reports that the status of the tasks is
RanToCompletion (two times).
6. In the GraphDemo window, click Plot Graph again, and then quickly
click Cancel.
Surprisingly, the message that appears still reports the status of each task
as RanToCompletion, even though the graph appears with holes.
This behavior occurs because although you sent a cancellation request to
each task by using the cancellation token, the methods they were
Download from finelybook PI:EMAIL
810
running simply returned. The .NET Framework runtime does not know
whether the tasks were actually canceled or whether they were allowed
to run to completion, and it simply ignored the cancellation requests.
7. Close the GraphDemo application and return to Visual Studio.
So, how do you indicate that a task has been canceled rather than allowed
to run to completion? The answer lies in the CancellationToken object passed
as a parameter to the method that the task is running. The CancellationToken
class provides a method called ThrowIfCancellationRequested. This method
tests the IsCancellationRequested property of a cancellation token; if it is
true, the method throws an OperationCanceledException exception and
aborts the method that the task is running.
The application that started the thread should be prepared to catch and
handle this exception, but this leads to another question. If a task terminates
by throwing an exception, it actually reverts to the Faulted state. This is true
Download from finelybook PI:EMAIL
811
even if the exception is an OperationCanceledException exception. A task
enters the Canceled state only if it is canceled without throwing an exception.
So, how does a task throw an OperationCanceledException without it being
treated as an exception?
This time, the answer lies in the task itself. For a task to recognize that an
OperationCanceledException exception is the result of canceling the task in a
controlled manner and not just an exception caused by other circumstances, it
has to know that the operation has actually been canceled. It can do this only
if it can examine the cancellation token. You passed this token as a parameter
to the method run by the task, but the task does not actually check any of
these parameters. Instead, you specify the cancellation token when you create
and run the task. The code that follows shows an example based on the
GraphDemo application. Notice how the token parameter is passed to the
generateGraphData method (as before) but also as a separate parameter to
the Run method.
Click here to view code image
tokenSource = new CancellationTokenSource();
CancellationToken token = tokenSource.Token;
...
Task first = Task.Run(() => generateGraphData(data, 0, pixelWidth /
4, token), token);
Now, when the method being run by the task throws an
OperationCanceledException exception,  the infrastructure behind the task
examines the CancellationToken. If it indicates that the task has been
canceled, the infrastructure sets the status of the task to Canceled. If you are
using the await operator to wait for the tasks to complete, you also need to be
prepared to catch and handle the OperationCanceledException exception.
This is what you will do in the next exercise.
Acknowledge cancellation, and handle the OperationCanceledException
exception
1. In Visual Studio, return to the Code and Text Editor window displaying
the MainPage.xaml.cs file. In the plotButton_Click method, modify the
statements that create and run the tasks and specify the
CancellationToken object as the second parameter to the Run method
(and also as a parameter to the generateGraphData method), as shown
in bold in the following code:
Download from finelybook PI:EMAIL
812
Click here to view code image
private async void plotButton_Click(object sender,
RoutedEventArgs e)
{
    ...
    tokenSource = new CancellationTokenSource();
    CancellationToken token = tokenSource.Token;
    ...
    Task first = Task.Run(() => generateGraphData(data, 0,
pixelWidth / 4, token), token);
    Task second = Task.Run(() => generateGraphData(data,
pixelWidth / 4,
pixelWidth / 2, token), token);
    ...
}
2. Add a try block around the statements that create and run the tasks, wait
for them to complete, and display the elapsed time. Add a catch block
that handles the OperationCanceledException exception. In this
exception handler, display the reason for the exception reported in the
Message property of the exception object in the duration TextBlock
control. The following code shown in bold highlights the changes you
should make:
Click here to view code image
private async void plotButton_Click(object sender,
RoutedEventArgs e)
{
    ...
    try
    {
        await first;
        await second;
        duration.Text = $"Duration (ms):
{watch.ElapsedMilliseconds}";
    }
    catch (OperationCanceledException oce)
    {
        duration.Text = oce.Message;
    }
    string message = $"Status of tasks is {first.Status,
{second.Status}";
    ...
}
3. In the generateGraphData method, comment out the if statement that
examines the IsCancellationRequested property of the
Download from finelybook PI:EMAIL
813
CancellationToken object and add a statement that calls the
ThrowIfCancellationRequested method, as shown here in bold:
Click here to view code image
private void generateGraphData(byte[] data, int partitionStart,
int partitionEnd, CancellationToken token)
{
   ...
    for (int x = partitionStart; x  delegate, which references a
method that takes an Exception object as its parameter and returns a
Boolean value. When you call Handle , the referenced method runs for
each exception in the collection in the AggregateException object. The
referenced method can examine the exception and take the appropriate
action. If the referenced method handles the exception, it should return
true . If not, it should return false . When the Handle method completes,
any unhandled exceptions are bundled together into a new
AggregateException exception, and this exception is thrown.  A
subsequent outer exception handler can then catch this exception and
process it.
The code fragment that follows shows an example of a method that
can be registered with an AggregateException exception handler. This
method simply displays the message “Division by zero occurred” if it
detects a DivideByZeroException exception, or the message “Array
index out of bounds” if an IndexOutOfRangeException exception
occurs. Any other exceptions are left unhandled.
Click here to view code image
private bool handleException(Exception e)
{
    if (e is DivideByZeroException)
    {
        displayErrorMessage("Division by zero occurred");
        return true;
    }
    if (e is IndexOutOfRangeException)
    {
        displayErrorMessage("Array index out of bounds");
Download from finelybook PI:EMAIL
816
        return true;
    }
    return false;
When you use one of the Task wait methods, you can catch the
AggregateException exception and register the handleException
method, like this:
Click here to view code image
try
{
    Task first = Task.Run(...);
    Task second = Task.Run(...);
    Task.WaitAll(first, second);
}
catch (AggregateException ae)
{
    ae.Handle(handleException);
}
If any of the tasks generate a DivideByZeroException exception or
an IndexOutOfRangeException exception, the handleException method
will display an appropriate message and acknowledge the exception as
handled. Any other exceptions are classified as unhandled and will
propagate out from the AggregateException exception handler in the
customary manner.
There is one additional complication of which you should be aware.
When you cancel a task, you have seen that the CLR throws an
OperationCanceledException exception, and this is the exception that is
reported if you are using the await operator to wait for the task.
However, if you are using one of the Task wait methods, this exception
is transformed into a TaskCanceledException exception, and this is the
type of exception that you should be prepared to handle in the
AggregateException exception handler.
Using continuations with canceled and faulted tasks
If you need to perform additional work when a task is canceled or raises an
unhandled exception, remember that you can use the ContinueWith method
with the appropriate TaskContinuationOptions value. For example, the
Download from finelybook PI:EMAIL
817
following code creates a task that runs the method doWork. If the task is
canceled, the ContinueWith method specifies that another task should be
created and run the method doCancellationWork. This method can perform
some simple logging or tidying up. If the task is not canceled, the
continuation does not run.
Click here to view code image
Task task = new Task(doWork);
task.ContinueWith(doCancellationWork,
TaskContinuationOptions.OnlyOnCanceled);
task.Start();
...
private void doWork()
{
    // The task runs this code when it is started
    ...
}
...
private void doCancellationWork(Task task)
{
    // The task runs this code when doWork completes
    ...
}
Similarly, you can specify the value
TaskContinuationOptions.OnlyOnFaulted to specify a continuation that runs
if the original method run by the task raises an unhandled exception.
Summary
In this chapter, you learned why it is important to write applications that can
scale across multiple processors and processor cores. You saw how to use the
Task class to run operations in parallel and how to synchronize concurrent
operations and wait for them to complete. You learned how to use the
Parallel class to parallelize some common programming constructs, and you
also saw when it is inappropriate to parallelize code. You used tasks and
threads together in a graphical user interface to improve responsiveness and
throughput, and you saw how to cancel tasks in a clean and controlled
manner.
If you want to continue to the next chapter, keep Visual Studio 2017
running and turn to  Chapter 24.
Download from finelybook PI:EMAIL
818
If you want to exit Visual Studio 2017 now, on the File menu, click
Exit. If you see a Save dialog box, click Yes and save the project.
Quick reference
To
Do this
Create a
task and run
it
Use the static Run method of the Task class to create and run
the task in a single step:
Click here to view code image
Task task = Task.Run(() => doWork());
...
private void doWork()
{
    // The task runs this code when it is started
    ...
}
Or, create a new Task object that references a method to run
and call the Start method:
Task task = new Task(doWork);
task.Start();
Wait for a
task to
finish
Call the Wait method of the Task object:
Task task = ...;
...
task.Wait();
Or, use the await operator (only in an async method):
await task;
Wait for
several
tasks to
finish
Call the static WaitAll method of the Task class, and specify
the tasks to wait for:
Click here to view code image
Task task1 = ...;
Task task2 = ...;
Task task3 = ...;
Task task4 = ...;
...
Task.WaitAll(task1, task2, task3, task4);
Download from finelybook PI:EMAIL
819
Specify a
method to
run in a
new task
when a task
has
completed
Call the ContinueWith method of the task and specify the
method as a continuation:
Click here to view code image
Task task = new Task(doWork);
task.ContinueWith(doMoreWork,
    TaskContinuationOptions.NotOnFaulted);
Perform
loop
iterations
and
statement
sequences
by using
parallel
tasks