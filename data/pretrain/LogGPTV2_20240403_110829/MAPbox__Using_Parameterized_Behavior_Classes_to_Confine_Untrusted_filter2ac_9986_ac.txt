return from the kernel to record a returned value
(e.g., fork) or to control access to blocking commu-
nication calls (e.g., accept for which the identity of
the peer is known only when it returns). MAPbox
maintains a handler for every intercepted system-
If no homedir directory exists for the application, a tem-
porary directory is created in /tmp for this execution and
is used as the current working directory. This directory is
deleted after the con(cid:12)ned program terminates.
call (separate handlers are maintained for entry and
exit). When a system-call is intercepted, the corre-
sponding handler is invoked. To deny a system-call,
the handler sets a (cid:12)eld in the structure used to com-
municate between the kernel and MAPbox. A de-
nied system-call returns to the application with an
error code of EINTR. For a description of individual
system-call handlers, please see [].
Handling symbolic links: since Unix (cid:12)le-systems
support symbolic links, simply checking the ar-
guments for (cid:12)le-system-related system-calls is not
su(cid:14)cient to implement (cid:12)le-system-related checks.
For example, /tmp/letter-to-my-mom.txt can be
a symlink to /etc/passwd. To plug this hole,
MAPbox completely resolves each (cid:12)lename (using
the resolvepath() call available in Solaris) before
checking it against the Policy structure.
to
Redirecting requests for sensitive (cid:12)les:
redirect requests for a sensitive (cid:12)le to a benign
dummy (cid:12)le, MAPbox resolves all (cid:12)lenames com-
pletely and compares them with the completely re-
solved name of the sensitive (cid:12)le. If a match is found,
it writes the name of the dummy (cid:12)le as a string on
the stack of the con(cid:12)ned process, and changes the
pointer to the (cid:12)lename argument to the intercepted
system-call to point to this string.
It then allows
the system-call to proceed.
Con(cid:12)ning child processes: MAPbox creates a
separate copy of itself for every child of a con(cid:12)ned
process. To achieve this,
it intercepts the fork
system-call on exit and extracts the process-id of
the newly created process. It then forks itself and
attaches the child MAPbox process to the newly
created application process. Unless speci(cid:12)ed other-
wise, the child of a con(cid:12)ned application is con(cid:12)ned
in the same sandbox as the parent. If, however, a
di(cid:11)erent sandbox is speci(cid:12)ed (using the childbox
command), the instance of MAPbox corresponding
to the child process intercepts the subsequent exec
system-call and reads the appropriate sandbox spec-
i(cid:12)cation (cid:12)le.
Other system-calls: the MAPbox sandbox spec-
i(cid:12)cation language can specify the con(cid:12)nement re-
quirements for most but not all system-calls. For
the remaining system-calls, MAPbox implements an
On Solaris ., this is implemented using pwrite() and
ioctl()s on the /proc (cid:12)le corresponding to the con(cid:12)ned
application.
It does not inter-
application-independent policy.
cept system-calls related to signals, threads and vir-
tual memory. For these resources, it relies on the
security provided by the kernel.
It also does not
intercept system-calls that perform read/write or
send/receive operations { depending on the checks
performed for initializing operations such as open(),
creat(), socket() etc. For others, it takes a con-
servative approach and denies all system-calls that
it does not know to be safe.
(cid:15) it denies calls that can be invoked only with
super-user privileges (e.g., mount, umount,
plock, acct, etc.).
(cid:15) it currently denies calls
to acl() which
gets/sets the access-control list for a (cid:12)le. We
have not yet seen these system-calls in traces.
(cid:15) it denies all calls to door() except those used
to query the host database.
(cid:15) it allows fcntl() calls with F DUPFD,
F DUPFD (which return new (cid:12)le descriptors)
and F GETFD, F SETFD (which read and
write (cid:12)le descriptor (cid:13)ags) commands. It denies
fcntl() calls with other commands.
(cid:15) it allows a small number of ioctl calls on
stdin and stdout. It currently denies all other
ioctl calls. This call performs a variety of con-
trol functions on devices and streams. Properly
handling ioctl requires a good understanding
of the individual devices and their controls.
Con(cid:12)ning X applications: The X protocol has
been designed for use by cooperative clients. Any
client application is able to manipulate or modify
objects created by any other client application run
by the same user. This has been done for two rea-
sons. First, it allows window managers to be written
as ordinary clients and second, it allows clients to
communicate to implement cooperative functional-
ity such as cut-and-paste.
To con(cid:12)ne X applications, we have developed Xbox,
an X protocol (cid:12)lter []. Xbox has been designed to
be used in conjunction of a system-call-level sand-
box such as MAPbox and Janus and is to be in-
terposed between an untrusted application and the
The existing security mechanisms provided by the X
server, i.e., the xhost-based mechanism and the xauthority-
based mechanism cannot distinguish between multiple appli-
cations belonging to the same user.
X server. Before starting an untrusted X applica-
tion, MAPbox sets the DISPLAY environment vari-
able to a socket that Xbox listens on (unix: by
default). It then makes sure that the con(cid:12)ned ap-
plication does not bypass Xbox by denying direct
connections to the X server.
Xbox snoops on all protocol messages and keeps
track of the resources (windows, pixmaps, cur-
sors, fonts, graphic contexts and colormaps) cre-
ated by the con(cid:12)ned application.
Xbox can be
easily extended to handle extensions to the X
protocol.
The current implementation handles
the SHAPE, MIT-SCREEN-SAVER, DOUBLE-BUFFER,
Multi-Buffering, and XTEST extensions. The con-
(cid:12)ned application is allowed to access/manipulate
only the resources that it has created and is al-
lowed to read limited information from the root win-
dow (the operations it allows on the root window
are both necessary and safe). All other requests
regarding speci(cid:12)c resources are denied (e.g., Cre-
ateWindow, ChangeWindowAttributes, GetWin-
dowAttributes, InstallColorMap,ReparentWindow,
ChangeGC, ClearArea, PolyPoint etc).
In ad-
dition,
the con(cid:12)ned application is not allowed
to query parts of the window hierarchy it did
not create and is allowed limited versions of
some operations that change the global state of
the server (GrabKey, GrabButton etc). Other
global operations (such GrabServer, SetScreen-
Saver, ChangeKeyboardMapping etc) are denied.
Finally, the con(cid:12)ned application is not allowed to
communicate with other applications via the X
server.
 Con(cid:12)guration and administration
There are two ways in which MAPbox can be con-
(cid:12)gured. First, by listing the MAP-types allowed
by the user in a .mapcap (cid:12)le; and second, by plac-
ing commands in a site-wide speci(cid:12)cation (cid:12)le which
MAPbox reads when it starts up.
Specifying acceptable MAP-types: the list of
MAP-types acceptable to the user can be speci(cid:12)ed
in a .mapcap (cid:12)le. This (cid:12)le contains a sequence of
entries consisting of (MAP-type, sandbox-(cid:12)le) pairs.
A MAP-type consists of the name of a behavior class
with values for all its parameters. The correspond-
ing sandbox (cid:12)le contains a description of the sand-
box that is to be used for this MAP-type. A parame-
ter can be speci(cid:12)ed using as a symbolic value, a con-
crete value, a regular expression, a numeric range,
or a list. Multiple combinations of parameter val-
ues can be speci(cid:12)ed using separate entries. Param-
eters for some behavior classes (e.g., transformer)
include command-line arguments that will supplied
only when an application runs (for transformer,
the the input and output (cid:12)les). These parameters
are speci(cid:12)ed by the meta-values %a, %a, %a etc.
These correspond to the arguments supplied to the
program { in the same order as they are speci(cid:12)ed.
Several behavior classes have a homedir parameter
which speci(cid:12)es the home directory for the applica-
tion. Typically, this is the directory in which all the
(cid:12)les for the application reside and the application
is allowed to read/write (cid:12)les in this directory and
its descendants. To refer to the directory that the
binary for an application lives in, MAPbox provides
the meta-value %h (h for homedir). The syntax for
.mapcap entries is presented in Figure . A sample
.mapcap (cid:12)le is presented in Figure .
To check if an application is to be allowed to run,
the MAP-type speci(cid:12)ed by the provider is matched
against entries in the .mapcap (cid:12)le. The rules for
matching are:
(cid:15) an empty argument can only be matched by an
empty argument.
(cid:15) meta-values,
like %a, %a and %h, can be
matched only by themselves.
(cid:15) for all other arguments, the value provided by
the application provider should not be more
general than the value in the .mapcap (cid:12)le.
For example, browser(%h,www.aol.com, )
would match the speci(cid:12)cation in the .mapcap
(cid:12)le in Figure  whereas browser(%h,*,*)
would not.
Implementing site-wide policies: as mentioned
in Section , MAPbox reads a common speci(cid:12)cation
(cid:12)le before it reads the speci(cid:12)cation (cid:12)le for a partic-
ular sandbox. In addition to making sandbox speci-
(cid:12)cation (cid:12)les more portable, this feature can also be
Executables in a a software package are often placed in
a \appDir/bin" directory whereas the resource (cid:12)les are usu-
ally placed in a separate subdirectory of \appDir" (e.g. \ap-
pDir/lib"). To handle this common case, MAPbox checks if
the last element in an applicationâ€™s pathname is \bin".
If
so, it removes this element. For example, if the application
lives in \/apphome/bin", this meta-value would expand to
\/apphome".
used to implement site-wide policies. The purpose
of this feature is not to deal with malicious users {
it is easy to bypass this mechanism. Instead it is to
rapidly respond to problems in a cooperative envi-
ronment. Figure  contains a sample of a common
speci(cid:12)cation (cid:12)le.
 Evaluation of MAPbox
We evaluated MAPbox from two di(cid:11)erent perspec-
tives:
its e(cid:11)ectiveness (how well it is able to con-
(cid:12)ne a suite of untrusted applications) and e(cid:14)ciency
(what is the overhead introduced).
. E(cid:11)ectiveness of MAPbox
For these experiments, we used a suite of    appli-
cations: the (cid:12)fty applications used in the applica-
tion characterization study mentioned in Section 
and (cid:12)fty additional applications. Of the additional
applications, twenty were Perl-based CGI scripts
from cgi.resource-index.com, (cid:12)fteen were programs
that we downloaded from di(cid:11)erent repositories and
built locally and (cid:12)fteen were applications from the
Solaris . distribution. We assigned each applica-
tion a MAP-type based on the code (where avail-
able), the associated documentation (manual, man
page, README (cid:12)le) and a trace of the system calls
it makes.
We performed two sets of experiments. The (cid:12)rst set
of experiments were designed to check if the behav-
ior classes identi(cid:12)ed in Section  were too restrictive.
In other words, is MAPbox so restrictive that few
or no applications can be successfully run while con-
(cid:12)ned? The second set of experiments were designed
to check if the behavior classes were too broad. That
is, is MAPbox so lax that mislabeled applications
(i.e., applications that were labeled with a di(cid:11)erent
MAP-type than their own) are able to gain access to
The
CGI
postit,
robpoll,
scripts
picpost,
were
jchat c, kewlcheckers, kewlchess, mazechat, multimail,
netcard ,
SDPGuestbook,
SDPMail, SDPUpload, search, showsell, UltraBoard .,
web store, webadverts, webbbs, webodex, wwwchat . The
downloaded and built programs were gnu-emacs, lcc, javac,
wget, ksh, latex, bibtex, xbiff, xclock, groff, gnuplot,
mpeg play, cjpeg, gzcat, mdsum. The Solaris . applica-
tions were tcsh, comm, detex, deroff, compress, tar, ld,
talk, strings, sort, diff, sp, findperl, mpage and cc.
:= behaviorClass (args) sandbox(cid:12)le
entry
behaviorClass := filter j transformer j ...
args
arg
list
values
value
:= /* empty */ j arg j args arg , arg
:= value j list j %a j %c j /* empty */
:= fvaluesg
:= values , value j value
:= regexp j [ num - num ]
Figure : Syntax for .mapcap entries.
filter()
transformer(%a,%a)
browser(%h,*, )
game(%h)
maintainer(%h)
/fs/play/~user/mapbox/sandboxes/filter.box
/fs/play/~user/mapbox/sandboxes/transformer.box
/fs/play/~user/mapbox/sandboxes/browser.box
/fs/play/~user/mapbox/sandboxes/game.box
/fs/play/~user/mapbox/sandboxes/maintainer.box
Figure : Sample .mapcap (cid:12)le.
resources that the user did not wish to grant? For
the (cid:12)rst set of experiments, we ran each application
within the sandbox associated with its own MAP-
type. For the second set of experiments, we ran each
application within a sandbox that corresponds to a
MAP-type other than its own. For both experiment
sets, we ran these applications with workloads simi-
lar to those used in the classi(cid:12)cation study described
in Section .
.. Is MAPbox too restrictive?
Of the    applications in our evaluation suite, only
nine failed to complete their workload when run
within the sandbox for their own MAP-type. Of
these, six belonged to the original set of   applica-
tions that were used in the classi(cid:12)cation study de-
scribed in Section , the remaining three belonged
to the second set of   applications added for these
experiments.	 Of the   CGI scripts in the suite,
one failed; of the   downloaded programs, (cid:12)ve
failed; of the   Solaris applications three failed. Of
these nine programs, (cid:12)ve (xv, xfig, pageview, lynx
and Netscape) failed because they made unsafe ac-
cesses and the other four failed inspite of making
accesses that we manually veri(cid:12)ed to be safe. Of the
latter, two (gcc and gnu-emacs) failed because they