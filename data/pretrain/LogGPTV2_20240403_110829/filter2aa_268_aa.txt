Comparison between two practical mix designs
Claudia D´ıaz
Len Sassaman
Evelyne Dewitte
Abstract
We evaluate the anonymity provided by two popular email mix im-
plementations, Mixmaster and Reliable, and compare their eﬀectiveness
through the use of simulations which model the algorithms used by these
mixing applications. In order to draw accurate conclusions about the op-
eration of these mixes, we use as our input to these simulations actual
traﬃc data obtained from a public anonymous remailer (mix node). We
determine that assumptions made in previous literature about the distri-
bution of mix input traﬃc are incorrect, and our analysis of the input
traﬃc shows that it follows no known distribution. We establish for the
ﬁrst time that a lower bound exists on the anonymity of Mixmaster, and
discover that under certain circumstances the algorithm used by Reliable
provides no anonymity. We ﬁnd that the upper bound on anonymity pro-
vided by Mixmaster is slightly higher than that provided by Reliable. We
identify ﬂaws in the software code in Reliable that further compromise its
ability to provide anonymity, and review key areas which are necessary
for the security of a mix in addition to a sound algorithm. Our analysis
can be used to evaluate under which circumstances the two mixing al-
gorithms should be utilized to best achieve anonymity and satisfy their
purpose. Our work can also be used as a framework for establishing a
security review process for mix node deployments.
1
Introduction
The Internet was initially perceived as a rather anonymous environment. Nowa-
days, we know that it can be a powerful surveillance tool: anyone willing to listen
to the communication links can spy on Internet users, and search engines and
data mining techniques are becoming increasingly powerful.
Privacy does not only mean conﬁdentiality of the information; it also means
not revealing information about who is communicating with whom. Anonymous
remailers (also called mixes) allow their users to send emails without disclosing
the identity of the recipient to a third party. They also allow the sender of a
message to stay anonymous to the recipient.
The objective of this work is to have quantitative results on the anonymity
actually provided by two mix software implementations in wide deployment, in
order to test the actual anonymity provided to the users of the remailer service,
and to compare the two diﬀerent designs. We evaluate anonymity in a single-
node context. In order to assess the anonymity provided by the entire remailer
1
network, additional considerations are necessary. As individual nodes are the
basic component to the network of mixes, we aim to provide information to be
considered when choosing this component. We have used as input real-life data
gathered from a popular remailer, and simulated the behaviour of the mix.
2
Mixes
Mixes are the essential building block to provide anonymous email services. A
mix is a router that hides the relationship between incoming and outgoing mes-
sages. The mix changes the appearance and the ﬂow of the messages. In order
to change the appearance of the messages the mix uses some techniques, such
as padding and encryption, thus providing bitwise unlinkability between inputs
and outputs. Techniques like reordering and delaying messages, and generating
dummy traﬃc are used to modify the ﬂow of messages. This modiﬁcation of
the traﬃc ﬂow is needed to prevent timing attacks that could disclose the rela-
tionship between an input and an output messages by looking at the time the
message arrived to and left from the mix.
The idea of mixes was introduced by Chaum [Cha81]. This ﬁrst design was
a threshold mix, a mix that collects a certain number of messages and then
ﬂushes them. Since then, variants on this ﬁrst design have been proposed in the
literature. In this paper, we focus on two practical mix designs that have been
implemented and are part of the Mixmaster remailer network[Cot95], which has
been providing anonymous email services since 1995.
The ﬁrst design is called “Mixmaster” (as the remailer network) because
it is descended from the original software program designed by Cottrell [Cot,
MCPS03].
The second design, called “Reliable”, uses a diﬀerent reordering
strategy. [RPr99] The details of the two remailers are explained in the following
sections. We compare version 3.0 of the Mixmaster software and version 1.0.5
of Reliable.
2.1
Mixmaster
Mixmaster1 is a pool mix. Pool mixes process the messages in batches. They
collect messages for some time, place them in the pool (memory of the mix), and
select some of them for ﬂushing in random order when the ﬂushing condition is
fulﬁlled. Mixmaster is a timed mix which has a timeout of 15 minutes. During
this period of time, it collects messages that are placed in the pool of the mix.
When the timeout expires, the mix takes a number of messages from the pool
that are forwarded to their next destination, which may be another mix or a
ﬁnal recipient. The algorithm that determines the number s of messages that
1Mixmaster version 3.0, as well as Reliable, also optionally support the older “Cypherpunk”
remailer message format. For the purposes of this paper, we are assuming that the remailers
are being operated without this support. As anonymity sets for the two protocols generally do
not overlap, this does not impact our results. The Cypherpunk remailer protocol is known to
contain numerous ﬂaws, and should not be used if strong anonymity is required[Cot, DDM03].
2
0
50
100
150
200
0
0.1
0.2
0.3
0.4
0.5
0.6
0.7
0.8
0.9
1
P(n) function for Mixmaster in the GMM
n
P(n)
Figure 1: Mixmaster in the GMM
are sent in a round (one cycle of the mix) is a function of the number n of
messages in the pool:
if (n<45) s=0;
else if (0.35*n < 45) s=n-45;
else s=0.65*n;
Mixmaster is represented in the generalised mix model proposed by D´ıaz and
Serjantov [DS03b] as shown in ﬁgure 1. In this model, the mix is represented at
the time of ﬂushing. The function P(n) represents the probability of a message
of being ﬂushed by the mix, as a function of the number n of messages in the
pool. Note that P(n) = s/n.
2.2
Reliable
Reliable is based on the Stop-and-Go (SG Mix) mix proposed by Kesdogan et
al. in [KEB98]. In SG mixes (also called continuous mixes), the users generate
a random delay from an exponential distribution. The mix holds the message
for the speciﬁed delay and then forwards it. The messages are reordered by the
randomness of the delay distribution. This mix sends messages continuously:
every time a message has been kept for the delay time it is sent by the mix.
Reliable interoperates with Mixmaster on the protocol level by using the
Mixmaster message format for packet transfer. Reliable uses a variant of the
S-G Mix design. In Reliable, the delay may be chosen by the user from an
exponential distribution of mean one hour. If the user does not provide any delay
to the mix, then the mix itself picks a delay from a uniform distribution, being
the maximum and minimum of the uniform one and four hours, respectively.
Note that these parameters of the delay distributions are conﬁgurable, and
therefore many remailer operators may set them lower in order to provide a
faster service.
2.3
Dummy traﬃc
A dummy message is a fake message introduced in the mix network in order to
make it more diﬃcult for an attacker to deploy attacks that can compromise
3
the anonymity of a message. The dummy message is normally produced by the
mixes, and they select as destination another mix instead of a real recipient.
Dummies are indistinguishable from real messages as they travel in the mix
network. As they are introduced to prevent traﬃc analysis, the dummy policy
should maximize the number of possible destinations for the messages ﬂushed
by the mix. Dummy traﬃc has an impact when analyzing the mix network as a
whole. We have made measurements that show that the impact of dummies on
the anonymity provided by a single mix is very small. In order to make the fair
comparison of Mixmaster and Reliable easier, we have not taken into account
the dummy policies of these two mixes in the results presented in this paper.
Dummy policy of Mixmaster
Every time a message is received by Mixmas-
ter, an algorithm runs to generate d1 dummies that are inserted in the pool of
the mix. The number d1 of dummies generated follow a geometrical distribution
whose parameter has the default value of 1/10. Moreover, every time Mixmaster
ﬂushes messages, it generated a number d2 of dummies that are sent along with
the messages. The number d2 of dummies follows a geometrical distribution
whose parameter has the default value 1/30.
Dummy policy of Reliable
Reliable’s default dummy policy consists in
generation 25 dummies every 6 hours. The time these dummies are kept in the
mix is generated from a uniform distribution whose minimum value is 0 and
maximum is 6 hours.
3
Anonymity metrics
In this section we introduce the anonymity metrics for mixes. We remark on
the particularities of some mix designs (binomial mixes and threshold mixes).
Also, we present the attack model which we have considered.
Anonymity was deﬁned by Pﬁtzmann and K¨ohntopp [PK00] as “the state of
being not identiﬁable within a set of subjects, the anonymity set”.
The use of the information theoretical concept of entropy as a metric for
anonymity was simultaneously proposed by Serjantov and Danezis in [SD02]
and by D´ıaz et al. in [DSCP02]. The diﬀerence between the two models for
measuring anonymity is that in [DSCP02] the entropy is normalized with respect
to the number of users. In this paper we will use the non-normalized ﬂavour of
the metric.
The anonymity provided by a mix can be computed for the incoming or for
the outgoing messages. We call this sender anonymity and recipient anonymity.
Sender anonymity.
In order to compute the sender anonymity, we want to
know the eﬀective size of the anonymity set of senders for a message output by
the mix. Therefore, we compute the entropy of the probability distribution that
relates an outgoing message of the mix (the one for which we want to know the
anonymity set size) with all the possible inputs.
4
Recipient anonymity.
If we want to compute the eﬀective recipient anonymity
set size of an incoming message that goes through the mix, we have to compute
the entropy of the probability distribution that relates the chosen input with all
possible outputs.
Note that in these two cases, the metric computes the anonymity of a partic-
ular input or output message, it does not give a general value for a mix design
and it is dependent on the traﬃc pattern. The advantage of this property is
that mixes may oﬀer information about the current anonymity they are provid-
ing. The disadvantage is that it becomes very diﬃcult to compare theoretically
diﬀerent mix designs. Nevertheless, it is possible to measure on real systems
(or simulations) the anonymity obtained for a large number of messages and
provide comparative statistics, as we do in this paper.
In order to measure Mixmaster’s sender and recipient anonymity, we have
applied the formulas provided by D´ıaz and Preneel in [DP04]. The anonymity of
Reliable has been measured using the formulas presented in Appendix A. Note
that we could not apply the method used by Kesdogan [KEB98] because we
did not make any assumption on the distribution of the mix’s incoming traﬃc
(Kesdogan assumes incoming Poisson traﬃc).
3.1
Attack model
The anonymity metric computes the uncertainty about the sender or the re-
cipient of a message, given that some information is available. In our case, we
assume that the mix is observed by a passive attacker, who can see the incoming
and outgoing messages of the mix. The attacker knows all internal parameters of
the mix so he can eﬀectively compute the anonymity set size for every incoming
and outgoing message.
4
Simulators
We have implemented Java simulators for Reliable and Mixmaster. We have
fed the simulated mixes with real input, obtained by logging a timestamp every
time a message arrived to a working Mixmaster node (note that the information
we logged does not threaten the anonymity of the users of the mix). We have
used four months of incoming traﬃc (July-November 2003) in order to obtain
the results presented in Section 5.
In order to make a fair comparison, we have set the mean of the exponential
delay of Reliable (default 1 hour) to be the same as provided by Mixmaster for
the given four months of input (43 minutes). We have assumed users choose
their delays from an exponential distribution. The mix-chosen uniform delay
option has not been taken into account, due to the unfeasibility of implementing
algorithms that compute the anonymity for such a delay distribution without
making assumptions on the traﬃc pattern, as explained in Appendix A. More-
over, the choice of a uniform delay for the messages is completely non-standard.
5
The simulators log the delay and the anonymity for every message. Mixes
are empty at the beginning of the simulation. The ﬁrst message that is taken
into account for the results is the one that arrives when the ﬁrst input has been
ﬂushed with 99% probability. All messages ﬂushed after the last arrival to the
mix are also discarded for the results. This is done in order to eliminate the
transitory initial and ﬁnal phases.
5
Results
In this section we present and analyze the results we have obtained with the
simulations.
5.1
Analysis of the input traﬃc
It is a common assumption in the literature that the arrivals to a mix node
follow a Poisson process. We have analyzed the input traﬃc, and found that it
does not follow a Poisson distribution, nor any other known distribution.
A Poisson process is modeled by a single parameter λ representing the ex-
pected amount of arrivals per (ﬁxed) time interval. If the arrivals to a mix
are assumed to follow a Poisson process with an average of λ arrivals per time
interval ∆t and we denote the number of arrivals in such a time interval by X,
then X is Poisson distributed with parameter λ: X ∼ Poiss(λ). Important to
note is that λ is time-independent.
In our statistical analysis we ﬁrst assumed that the process of arrivals is a
Poisson process and we estimated the parameter λ. The latter was done by
taking the maximum likelihood estimate given the number of arrivals per time
interval ∆t = 15 minutes (N = 11800). We also constructed a 95% conﬁdence
interval for this estimate. Then we performed a goodness-of-ﬁt test: can we
reject the hypothesis
H0 : the number of arrivals per time interval ∼ Poiss(¯λ) ,
where ¯λ varies over the constructed conﬁdence interval. The goodness-of-ﬁt test
we used is the well-known Chi-square test. Using a signiﬁcance level of 0.01,
the null hypothesis gets rejected!
In the right part of ﬁgure 2 we show the number of messages arrived to
the mix per hour. The left part (below) of ﬁgure 2 shows the evolution of the
arrivals per day. We can observe that the traﬃc arrived to the mix during the
ﬁrst month is much heavier than in the following three months. This shows that
the input traﬃc pattern that gets to a mix node is highly impredictable.
Figure 3 shows the frequency in hours and in days of receiving a certain
number of arrivals. We can see that in most of the hours the mix receives less
than 20 messages.
6
0
50
100
150
200
0
0.1
0.2
0.3
0.4
0.5
0.6
0.7
0.8
0.9
1
P(n) function for Mixmaster in the GMM
n
P(n)
0
500
1000
1500
2000
2500
3000
0
200
400
600
800
1000
1200
1400
1600
1800
hours
Number of arrivals
0
20
40
60
80
100
120
140
0
2000
4000
6000
8000
10000
12000
14000
16000
18000
days
Number of arrivals
Figure 2: Incoming traﬃc patters