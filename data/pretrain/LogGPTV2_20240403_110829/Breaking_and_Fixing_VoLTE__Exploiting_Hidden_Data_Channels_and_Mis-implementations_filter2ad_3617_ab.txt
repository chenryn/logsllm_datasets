Call Signaling. Figure 3 illustrates the call setup procedure be-
tween two UEs, UE-A and UE-B. This can be considered as a more
detailed version of Figure 2 from 4 to 7 , corresponding to the VoIP
protocol. To initiate a VoLTE call to UE-B, UE-A ﬁrst generates
INVITE
100 TRYING
INVITE
180 RINGING
200 OK
183 SESSION PROGRESS
PRACK
200 OK
ACK
Media session
BYE
ACK
Figure 3: VoLTE signaling (SIP) ﬂow of Call setup and tear down
an INVITE message and sends it to a SIP server 2. The INVITE
message contains a description of the caller’s phone number, IP
address, and media characteristics: a port number, encoding scheme,
and QoS parameters for media communication. Upon receiving the
INVITE message, the SIP server responds to UE-A with a TRYING
(100) message, and then it relays INVITE to UE-B after checking
if the message is valid. Upon receiving the INVITE message, UE-
B responds with RINGING (180) and SESSION PROGRESS
(183) to indicate its call session is being processed. In response
to the SESSION PROGRESS message, UE-A sends a progress ack
(PRACK) message.
If the user accepts the call at UE-B, it sends an OK (200) mes-
sage containing information similar to the INVITE message. When
the SIP server receives OK (200), it routes this message to UE-A
and starts charging the calling session. As soon as UE-A receives OK
(200), an end-to-end media session for voice data is established
between UE-A and UE-B. This media session contains a dedicated
bearer for both UE-A and UE-B, and a media proxy in the IMS
network. Typically, this media session is implemented using RTP
(Real Time Protocol) on top of UDP. When either of the UEs wants
to terminate the call, it sends a BYE message to the SIP server. Upon
receiving such a message, the SIP server stops charging the call
session and routes BYE to the other UE, and terminates the media
proxy.
Call Management in the UE. After a call session is established,
UEs transfer voice data to each other through the established media
channel. The smartphones we used for our experiment have two pro-
cessors: an application processor (AP) for running the smartphone
operating system (e.g. Android) and user applications; and a commu-
nication processor (CP) for handling radio access and radio-related
signaling.
Call signaling is handled by a SIP client running in the AP. This
SIP client binds its socket on a speciﬁc port (default: 5060) to com-
municate with SIP servers. Meanwhile, the CP has a digital signal
processing (DSP) module that handles radio communication with
2In this paper, for simplicity, we use the SIP server to represent all
Call Session Control Function (CSCF) servers in the IMS network.
330Table 1: Characteristics of VoLTE services on tested carriers
Network protocol
Transport protocol for SIP
Encryption algorithm for IPSec
Capability of changing SIP source port
Existence of a media proxy
Capability of sending random data through media session
Capability of changing QoS parameter speciﬁed in INVITE
Free use of audio data
US-1
US-2
IPv6
IPv6 + IPSec
TCP & UDP TCP & UDP
KR-1
IPv4
UDP
KR-2
IPv4
UDP
KR-3
IPv6
UDP
-





AES





-





-





-





base stations as well as audio data from a speaker and a microphone.
Upon receiving voice trafﬁc from a radio channel, the CP processes
the voice packets and forwards only audio data to the AP, which
lessens the computational burden of the AP.
3 Empirical Analysis of VoLTE Services
In this section, we describe our empirical security analysis on the
current implementation of VoLTE services by commercial, deployed
mobile cellular network operators. We examined ﬁve major carriers 3
in the United States and Korea, the two countries with the highest
LTE penetration ratio for VoLTE service [20].
For our security analysis, we do not assume a privileged adversary
that has physical access to a core network. Instead, we consider
an adversary who is legitimately subscribed to an LTE network.
Therefore, the adversary considers the actual implementation of
cellular networks as a blackbox. This implies that the adversary
can only access the public information and infer implementation by
analyzing the behaviors of the VoLTE service. Also, the adversary is
allowed to have full permission of her mobile devices to have access
to raw sockets or the device interface in the Android kernel. In short,
the adversary may have root access to the phone.
In the rest of this section, we ﬁrst describe an interesting account-
ing policy that we discovered from the VoLTE carriers: discrepancy
of the accounting policy and its cost model. After understanding
the accounting policy, we explain a hidden, free data channel that
we found in the current VoLTE protocol, and how to exploit the
discrepancy. We then describe several security problems that we
found in the commodity VoLTE services.
3.1 Accounting of VoLTE Calls
While VoLTE is implemented on the packet-switching network (i.e.
it runs on IP), it applies a legacy time-based charging policy as in 3G
networks. Traditionally, a voice call delivered through the circuit-
switching network is charged according to the duration of time it
occupies the channel (e.g. $15 for 225 minutes). In contrast, data
connection through a packet-switching network is charged based
on byte-usage (e.g. $15 for 1GB). As VoLTE utilizes only a packet-
switching network, it consumes the same byte-usage as for the data
connection. Despite this, it is quite odd that the majority of carriers
still charge the voice service by time duration. This discrepancy
could complicate accounting procedures, since different IP addresses
are used for both data and voice, and their accounting units are
different. Furthermore, many operators recently provide unlimited
3We intentionally anonymized the names of carriers to protect them
until all operators ﬁx the problems we identiﬁed.
calls among VoLTE users as a default pricing plan, which could be
used as a free data channel, if exploited.
3.2 Analyzing Hidden Data Channel
With the problems outlined above as motivation, we conducted a
thorough empirical analysis of current VoLTE services. To determine
how accounting on VoLTE could be bypassed, we ﬁrst analyzed the
3GPP speciﬁcations for the VoLTE protocol. We then examined the
implementation of target carriers (ﬁve carriers) by examining actual
trafﬁc between a UE and the cellular core in order to check if there
exists any exploitable vulnerability.
3.2.1 Potential Free Data Channels
As mentioned above, the accounting for VoLTE call starts when a
SIP server receives OK (200) from UE-B, the receiver. Thus, if
UE-B does not send OK (200) to the SIP server, then the call may
not be charged.
An adversary may also consider either sending data by encapsu-
lating it into SIP messages (e.g. messages before OK (200) such
as INVITE) or directly sending OK (200) to UE-A, the sender,
bypassing the SIP server. Since each UE already has an IP address
for its default VoLTE bearer, UE-A can send SIP messages directly
to the other UE using this address if it’s not blocked by the carrier’s
implementation.
Furthermore, according to the 3GPP speciﬁcation [3], the QoS
parameter for voice trafﬁc is speciﬁed in the INVITE message.
Thus, if an adversary could manipulate this parameter, she would be
able to increase the bandwidth for sending a large amount of data.
Note that the above potentially free data channels could be easily
blocked or detected by SIP network ﬂow analysis. However, what if
an adversary embeds the data in the media session? Detecting this
requires signiﬁcant implementation effort, as the carrier needs to
check if the data in the media session are voice or not.
In summary, an adversary may try to 1) squeeze data into SIP
packets, 2) send data directly to the receiver, or 3) send data over
the media session.
3.2.2 Empirical Analysis
With the knowledge of the signaling protocol of VoLTE, we analyzed
the actual call ﬂow in the top ﬁve carriers. The characteristics of the
service of each carrier are summarized in Table 1. Note that each
carrier supports different smartphones for VoLTE and still only a
limited number of models support VoLTE. For the analysis, we used
the following four models: Samsung Galaxy S5, S4, and LG G3. In
each experiment, we used at least two different models among them.
Transport protocol. To send/receive SIP messages, Korean opera-
tors use UDP only, whereas U.S. operators use both UDP and TCP.
331We discovered that the U.S. operators send response messages such
as ACK or PRACK using UDP, while TCP is used for all other SIP
messages. One of the U.S. operators protects SIP messages using
IPsec with AES encryption. Fortunately, we were able to change
the encryption algorithm of IPsec from AES to Null by modifying
conﬁguration ﬁle for SIP in the UE side. It should also be noted that
we were able to analyze call ﬂows in plaintext. Furthermore, we
identiﬁed that an IPsec daemon running on the phone automatically
wraps packets with a speciﬁc SIP port into the IPsec tunnel. By
utilizing this daemon, we were able to send SIP messages to a SIP
server.
Changing a SIP source port. Since the native SIP client in UE-A
is already listening on a pre-deﬁned port, other custom applications
cannot bind to this port. Therefore, we checked if SIP servers accept
other source ports, and found that all operators except one U.S.
operator allow that. This could be problematic if a malicious app
initiates VoLTE sessions. (See §5.1 for more details.)
Media proxy. We also checked whether a proxy for relaying media
data exists. The results of our analysis indicated that two of the
operators do not utilize a media proxy, resulting in UEs being able
to directly transfer media data. In this case, when a UE sends an
INVITE message to a SIP server, the UE receives a response mes-
sage with the other UE’s IP address. Therefore, a UE can collect
another UE’s IP address by randomly sending INVITE messages to
the SIP server. Furthermore, if a media proxy exists, it could be used
to detect malicious behaviors over the media session by inspecting
packets.
Sending data through a media session. When a call is established,
a dedicated bearer is also created for the media session. Voice pack-
ets are then sent directly through this bearer from CP in UE-A.
However, we were able to send packets through this bearer in AP
with the IP address and port number speciﬁed in SIP messages for
all operators. In other words, the Android device does not have
proper access control for using the dedicated bearer for the media
session. Furthermore, transmitted data over the media session were
not charged since operators provide unlimited calls for VoLTE users.
Manipulating QoS negotiation. We investigated whether we could
manipulate QoS parameters speciﬁed in INVITE to acquire higher
bandwidth. However, we discovered that even if we changed the
QoS parameters in INVITE, the actual QoS level of the dedicated
bearer remained unchanged. In other words, for all the operators,
SIP servers do not consider the QoS parameters in INVITE (See
§4.2.1 for details.)
Summary. As we discussed, there may exist multiple hidden data
channels in VoLTE. In §4, we show how we exploit these channels
and which operators are open to these channels.
3.3
Throughout the analysis of VoLTE call ﬂow, we discovered several
security problems associated with both the UEs and the operators.
Permission model mismatch. This is an interesting issue we dis-
covered. In general, mobile devices have separate permissions to
regulate the behavior of an application for security reasons. For
example, in an Android device, an application should have the per-
mission, android.permission.CALL_PHONE, to call other people.
However, we discovered that this permission could be violated due
to the implementation of the VoLTE interface. To verify this, we
developed an Android application that has only one permission,
android.permission.INTERNET, which enables the application to
send data to the Internet. With this permission, the application can
send SIP messages to the SIP server to call other people. This shows
that the current Android permission model cannot distinguish SIP
messages from data communication. We also found that when the
Implementation Problems of VoLTE
LTE network
IMS
P-GW
AP
CP
1
2
AP
CP
Default bearer
Dedicated bearer
Figure 4: Flow of (1) SIP tunneling and (2) RTP tunneling
AP
CP
Internet
AP
CP
LTE network
IMS
P-GW
1
2
Default bearer
Figure 5: Flow of direct communication channel
call is initiated by the application, the calling state is not displayed
on the phone. Therefore, a user would not be able to recognize that
her phone is now calling.
Direct communication. When UE-A makes a call, it sends an IN-
VITE to a SIP server. The SIP server then manages the call session
between the UEs. In cellular networks, direct phone-to-phone data
communication is blocked using NAT (Network Address Transla-