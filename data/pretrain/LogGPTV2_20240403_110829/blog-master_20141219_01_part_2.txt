该扩展会创建一些复合类型和函数  
```  
digoal=# \dT  
        List of data types  
 Schema |    Name    | Description   
--------+------------+-------------  
 public | breakpoint |   
 public | frame      |   
 public | proxyinfo  |   
 public | targetinfo |   
 public | var        |   
(5 rows)  
digoal=# \df  
                                                          List of functions  
 Schema |            Name             | Result data type |                       Argument data types                        |  Type   
--------+-----------------------------+------------------+------------------------------------------------------------------+-------  
 public | pldbg_abort_target          | SETOF boolean    | session integer                                                  | normal  
 public | pldbg_attach_to_port        | integer          | portnumber integer                                               | normal  
 public | pldbg_continue              | breakpoint       | session integer                                                  | normal  
 public | pldbg_create_listener       | integer          |                                                                  | normal  
 public | pldbg_deposit_value         | boolean          | session integer, varname text, linenumber integer, value text    | normal  
 public | pldbg_drop_breakpoint       | boolean          | session integer, func oid, linenumber integer                    | normal  
 public | pldbg_get_breakpoints       | SETOF breakpoint | session integer                                                  | normal  
 public | pldbg_get_proxy_info        | proxyinfo        |                                                                  | normal  
 public | pldbg_get_source            | text             | session integer, func oid                                        | normal  
 public | pldbg_get_stack             | SETOF frame      | session integer                                                  | normal  
 public | pldbg_get_target_info       | targetinfo       | signature text, targettype "char"                                | normal  
 public | pldbg_get_variables         | SETOF var        | session integer                                                  | normal  
 public | pldbg_oid_debug             | integer          | functionoid oid                                                  | normal  
 public | pldbg_select_frame          | breakpoint       | session integer, frame integer                                   | normal  
 public | pldbg_set_breakpoint        | boolean          | session integer, func oid, linenumber integer                    | normal  
 public | pldbg_set_global_breakpoint | boolean          | session integer, func oid, linenumber integer, targetpid integer | normal  
 public | pldbg_step_into             | breakpoint       | session integer                                                  | normal  
 public | pldbg_step_over             | breakpoint       | session integer                                                  | normal  
 public | pldbg_wait_for_breakpoint   | breakpoint       | session integer                                                  | normal  
 public | pldbg_wait_for_target       | integer          | session integer                                                  | normal  
 public | plpgsql_oid_debug           | integer          | functionoid oid                                                  | normal  
(21 rows)  
digoal=# \d breakpoint  
Composite type "public.breakpoint"  
   Column   |  Type   | Modifiers   
------------+---------+-----------  
 func       | oid     |   
 linenumber | integer |   
 targetname | text    |   
```  
创建测试数据表, 函数, 创建在tbs1和tbs2.  
```  
digoal=# \c digoal digoal  
You are now connected to database "digoal" as user "digoal".  
digoal=> create table userinfo (id int primary key, info text, crt_time timestamp);  
CREATE TABLE  
digoal=> \d userinfo  
              Table "digoal.userinfo"  
  Column  |            Type             | Modifiers   
----------+-----------------------------+-----------  
 id       | integer                     | not null  
 info     | text                        |   
 crt_time | timestamp without time zone |   
Indexes:  
    "userinfo_pkey" PRIMARY KEY, btree (id)  
digoal=> alter index userinfo_pkey set tablespace tbs2;  
ALTER INDEX  
digoal=> create or replace function f_digoal(i_id int) returns void as $$  
declare  
begin  
  update userinfo set info=$_$Hello,I'm digoal.$_$||md5(random()::text), crt_time=now() where id=i_id;  
  if not found then  
    insert into userinfo(id,info,crt_time) values(i_id, $_$Hello,I'm digoal.$_$||md5(random()::text), now());  
  end if;   
  return;  
exception when others then  
  return;  
end;  
$$ language plpgsql strict volatile;  
CREATE FUNCTION  
digoal=> select f_digoal(1);  
 f_digoal   
----------  
(1 row)  
digoal=> select * from userinfo ;  
 id |                       info                        |          crt_time            
----+---------------------------------------------------+----------------------------  
  1 | Hello,I'm digoal.607acd6f0bfe3c48eecde00f1b98ad85 | 2014-12-19 18:48:03.398352  
(1 row)  
digoal=> select f_digoal(1);  
 f_digoal   
----------  
(1 row)  
digoal=> select * from userinfo ;  
 id |                       info                        |          crt_time            
----+---------------------------------------------------+----------------------------  
  1 | Hello,I'm digoal.debe361485303d3bac72ea3d9a95aa42 | 2014-12-19 18:48:47.255641  
(1 row)  
```  
生成测试数据  
```  
digoal=> insert into userinfo select generate_series(2,10000000),'test',clock_timestamp();  
INSERT 0 9999999  
```  
安装PostgreSQL 9.4, 注意编译参数一致性, 以及内部和外部扩展模块(内部模块gmake world gmake install-world会全部安装).  
```  
[root@localhost soft_bak]# wget https://ftp.postgresql.org/pub/source/v9.4.0/postgresql-9.4.0.tar.bz2  
[root@localhost soft_bak]# tar -jxvf postgresql-9.4.0.tar.bz2  
[root@localhost soft_bak]# cd postgresql-9.4.0  
[root@localhost postgresql-9.4.0]# ./configure --prefix=/opt/pgsql9.4.0 --with-pgport=1921 --with-perl --with-tcl --with-python --with-openssl --with-pam --without-ldap --with-libxml --with-libxslt --enable-thread-safety --with-blocksize=32 --with-wal-blocksize=32 && gmake world && gmake install-world  
```  
检查安装包含upgrade和upgrade库.  
```  
[root@localhost ~]# cd /opt/pgsql9.4.0/lib/  
[root@localhost lib]# ll|grep upgr  
-rwxr-xr-x 1 root root   14352 Dec 19 19:12 pg_upgrade_support.so  
[root@localhost lib]# ll /opt/pgsql9.4.0/bin/pg_upgrade   
-rwxr-xr-x 1 root root 116368 Dec 19 19:12 /opt/pgsql9.4.0/bin/pg_upgrade  
```  
安装pldebug模块, 这个模块可以和9.4兼容.  
```  
[root@localhost postgresql-9.4.0]# cd ..  
[root@localhost soft_bak]# tar -zxvf pldebugger-85d7b3b.tar.gz  
[root@localhost soft_bak]# mv pldebugger-85d7b3b postgresql-9.4.0/contrib/  
[root@localhost soft_bak]# cd postgresql-9.4.0/contrib/pldebugger-85d7b3b/  
[root@localhost pldebugger-85d7b3b]# export PATH=/opt/pgsql9.4.0/bin:$PATH  
[root@localhost pldebugger-85d7b3b]# which pg_config  
/opt/pgsql9.4.0/bin/pg_config  
[root@localhost pldebugger-85d7b3b]# gmake clean  
[root@localhost pldebugger-85d7b3b]# gmake  
[root@localhost pldebugger-85d7b3b]# gmake install  
```  
如果我们要使用硬链接$PGDATA来加快升级速度的话, 那么新的集群$PGDATA要和老集群的$PGDATA在一个文件系统下.  
所以我们使用 /pgdata01/pg_root_9.4 :   
```  
[root@localhost lib]# mkdir /pgdata01/pg_root_9.4  
[root@localhost lib]# chown -R postgres:postgres /pgdata01/pg_root_9.4  
[root@localhost lib]# chmod 700 /pgdata01/pg_root_9.4  
```  
初始化XLOG目录和arch目录(如果使用了定制的pg_log, 则还需初始化pg_log目录, 本例使用的是$PGDATA/pg_log, 所以无需创建pg_log)  
```  
[root@localhost lib]# mkdir /pgdata02/pg_xlog_9.4  
[root@localhost lib]# chown -R postgres:postgres /pgdata02/pg_xlog_9.4  
[root@localhost lib]# chmod 700 /pgdata02/pg_xlog_9.4  
[root@localhost lib]# mkdir /pgdata03/pg_arch_9.4  
[root@localhost lib]# chown -R postgres:postgres /pgdata03/pg_arch_9.4  
[root@localhost lib]# chmod 700 /pgdata03/pg_arch_9.4  
```  
初始化9.4数据库, 注意除xlog,pgdata以为其他初始化参数和9.3一致(超级用户名也要一致) :   
```  
[root@localhost lib]# su - postgres  
Last login: Fri Dec 19 19:23:00 CST 2014 on pts/3  
postgres@localhost-> /opt/pgsql9.4.0/bin/initdb -D /pgdata01/pg_root_9.4 -X /pgdata02/pg_xlog_9.4 -E UTF8 --locale=C -U postgres -W  
```  
配置9.4集群  
将pg_hba.conf改为和老实例的9.3一致.  
另外, 因为升级需要多次连接新老集群数据库实例, 所以修改为使用本地trust认证.  
```  
postgres@localhost-> vi /pgdata01/pg_root/pg_hba.conf  
postgres@localhost-> vi /pgdata01/pg_root_9.4/pg_hba.conf  
```  
包含以下即可  
```  
# "local" is for Unix domain socket connections only  
local   all             all                                     trust  
# IPv4 local connections:  
host    all             all             127.0.0.1/32            trust  
```  
修改9.4实例的postgresql.conf, 注意使用不同的监听端口. (PostgreSQL 9.4新增了很多功能和参数, 本例一并提供了 )  
```  
listen_addresses = '0.0.0.0'            # what IP address(es) to listen on;  
port = 1922                             # (change requires restart)  
max_connections = 100                   # (change requires restart)  
unix_socket_directories = '.'   # comma-separated list of directories  
unix_socket_permissions = 0700          # begin with 0 to use octal notation  
tcp_keepalives_idle = 60                # TCP_KEEPIDLE, in seconds;  
tcp_keepalives_interval = 10            # TCP_KEEPINTVL, in seconds;  
tcp_keepalives_count = 10               # TCP_KEEPCNT;  
shared_buffers = 512MB                  # min 128kB  
huge_pages = try                        # on, off, or try  
maintenance_work_mem = 512MB            # min 1MB  
autovacuum_work_mem = -1                # min 1MB, or -1 to use maintenance_work_mem  
dynamic_shared_memory_type = posix      # the default is the first option  
vacuum_cost_delay = 10                  # 0-100 milliseconds  
vacuum_cost_limit = 10000               # 1-10000 credits  
bgwriter_delay = 10ms                   # 10-10000ms between rounds  
wal_level = logical                     # minimal, archive, hot_standby, or logical  
synchronous_commit = off                # synchronization level;  
wal_buffers = 16384kB                   # min 32kB, -1 sets based on shared_buffers  
wal_writer_delay = 10ms         # 1-10000 milliseconds  
checkpoint_segments = 32                # in logfile segments, min 1, 16MB each  
archive_mode = on               # allows archiving to be done  
archive_command = 'DIR="/pgdata03/pg_arch_9.4/`date +%F`";test -d $DIR || mkdir -p $DIR; cp %p $DIR/%f'         # command to use to archive a logfile segment  
archive_timeout = 600           # force a logfile segment switch after this  
log_destination = 'csvlog'              # Valid values are combinations of  
logging_collector = on          # Enable capturing of stderr and csvlog  
log_directory = 'pg_log'                # directory where log files are written,  
log_filename = 'postgresql-%Y-%m-%d_%H%M%S.log' # log file name pattern,  
log_file_mode = 0600                    # creation mode for log files,  
log_truncate_on_rotation = on           # If on, an existing log file with the  
log_checkpoints = on  
log_connections = on  
log_disconnections = on  
log_error_verbosity = verbose           # terse, default, or verbose messages  
log_lock_waits = on                     # log lock waits >= deadlock_timeout  
log_statement = 'ddl'                   # none, ddl, mod, all  
log_timezone = 'PRC'  
autovacuum = on                 # Enable autovacuum subprocess?  'on'  
log_autovacuum_min_duration = 0 # -1 disables, 0 logs all actions and  
datestyle = 'iso, mdy'  
timezone = 'PRC'  
lc_messages = 'C'                       # locale for system error message  
lc_monetary = 'C'                       # locale for monetary formatting  
lc_numeric = 'C'                        # locale for number formatting  
lc_time = 'C'                           # locale for time formatting  
default_text_search_config = 'pg_catalog.english'  
```  
停库  
```  
postgres@localhost-> /opt/pgsql9.3.5/bin/pg_ctl stop -m fast -D /pgdata01/pg_root  
postgres@localhost-> /opt/pgsql9.4.0/bin/pg_ctl stop -m fast -D /pgdata01/pg_root_9.4  
```  
创建9.3数据库的文件系统快照  
```  
[root@localhost ~]# df -h  
zp1/pg_root                 30G   19M   30G   1% /pgdata01  
zp1/pg_xlog                 31G  428M   30G   2% /pgdata02  
zp1/pg_arch                 31G  636M   30G   3% /pgdata03  
zp1/tbs1                    31G  170M   30G   1% /pgdata04  
zp1/tbs2                    31G   97M   30G   1% /pgdata05  
[root@localhost ~]# zfs snapshot zp1/pg_root@pg9.3.5  
[root@localhost ~]# zfs snapshot zp1/pg_xlog@pg9.3.5  
[root@localhost ~]# zfs snapshot zp1/pg_arch@pg9.3.5  
[root@localhost ~]# zfs snapshot zp1/tbs1@pg9.3.5  
[root@localhost ~]# zfs snapshot zp1/tbs2@pg9.3.5  
[root@localhost ~]# zfs list -t snapshot  
NAME                  USED  AVAIL  REFER  MOUNTPOINT  
zp1/pg_arch@pg9.3.5      0      -   635M  -  
zp1/pg_root@pg9.3.5      0      -  18.4M  -  
zp1/pg_xlog@pg9.3.5      0      -   428M  -  
zp1/tbs1@pg9.3.5         0      -   169M  -  
zp1/tbs2@pg9.3.5         0      -  96.2M  -  
```  
使用9.4的pg_upgrade检测兼容性  
```  
su - postgres  
postgres@localhost-> cd  
postgres@localhost-> mkdir upgrade_log  
postgres@localhost-> cd upgrade_log/  
postgres@localhost-> /opt/pgsql9.4.0/bin/pg_upgrade -b /opt/pgsql9.3.5/bin -B /opt/pgsql9.4.0/bin -d /pgdata01/pg_root -D /pgdata01/pg_root_9.4 -p 1921 -P 1922 -U postgres -j 8 -k -c  
Performing Consistency Checks  
-----------------------------  
Checking cluster versions                                   ok  
Checking database user is a superuser                       ok  
Checking for prepared transactions                          ok  
Checking for reg* system OID user data types                ok  
Checking for contrib/isn with bigint-passing mismatch       ok  
Checking for invalid "line" user columns                    ok  
Checking for presence of required libraries                 ok  
Checking database user is a superuser                       ok  
Checking for prepared transactions                          ok  
*Clusters are compatible*  
```  
验证兼容性正常, 可以正式升级了.   
```  
postgres@localhost-> /opt/pgsql9.4.0/bin/pg_upgrade -b /opt/pgsql9.3.5/bin -B /opt/pgsql9.4.0/bin -d /pgdata01/pg_root -D /pgdata01/pg_root_9.4 -p 1921 -P 1922 -U postgres -j 8 -k -r -v  
```  
最后输出如下 :   
```  
Upgrade Complete  
----------------  
Optimizer statistics are not transferred by pg_upgrade so,  
once you start the new server, consider running:  
    analyze_new_cluster.sh  
Running this script will delete the old cluster's data files:  
    delete_old_cluster.sh  
```  
给了2个脚本, 用于收集统计信息和删除老集群.  
```  
postgres@localhost-> ll  
total 20K  
-rwx------ 1 postgres postgres 785 Dec 19 19:50 analyze_new_cluster.sh  
-rwx------ 1 postgres postgres 114 Dec 19 19:50 delete_old_cluster.sh  
-rw------- 1 postgres postgres 326 Dec 19 19:51 pg_upgrade_internal.log  
-rw------- 1 postgres postgres 179 Dec 19 19:51 pg_upgrade_server.log  
-rw------- 1 postgres postgres 179 Dec 19 19:51 pg_upgrade_utility.log  
```  
接下来要做的是启动新的数据库集群.  
```  
postgres@localhost-> /opt/pgsql9.4.0/bin/pg_ctl start -D /pgdata01/pg_root_9.4  
```  
执行统计信息收集脚本, 因为使用pg_upgrade升级的话, 统计信息不会迁移过来. 所以需要手工统计一下.  
脚本内容如下  
```  
postgres@localhost-> cat analyze_new_cluster.sh   
#!/bin/sh  
echo 'This script will generate minimal optimizer statistics rapidly'  
echo 'so your system is usable, and then gather statistics twice more'  
echo 'with increasing accuracy.  When it is done, your system will'  
echo 'have the default level of optimizer statistics.'  
echo  
echo 'If you have used ALTER TABLE to modify the statistics target for'  
echo 'any tables, you might want to remove them and restore them after'  
echo 'running this script because they will delay fast statistics generation.'  