);
让我们回顾一下 LowLevelKeyBoardProc  所需的内容。该函数的参数是一个整数，告诉 Windows 如何解释该消
息。这些参数中的两个是：
wParam，它是消息的标识符
lParam，它是指向 KBDLLHOOKSTRUCT  结构体的指针
wParam  的值在功能页面中指定。还有一个页面描述了 KBDLLHOOKSTRUCT  的成员。 lParam  的 KBDLLHOOKSTRUCT
的值称为 vkCode  或 Virtual-Key Code （ http://bit.ly/2EMAGpw ）。这是按下的键的代码，而不是实际的字
母，因为字母可能会根据键盘的语言而有所不同。 vkCode  需要稍后转换为相应的字母。现在不要着急把参数传递给
我们的键盘回调函数，因为它们将在激活 hook 时由操作系统传递。
最后，挂钩键盘的初始架构代码如下所示：https://github.com/cheetz/ceylogger/blob/master/skeleton
在查看框架代码时，需要注意的一些事项是，在回调函数中包含 pragma comment （预处理指令），消息循环和返回
CallNextHookEx  行。 pragma comment  是用于链接 User32 DLL 的编译器指令。 此 DLL 包含将要进行的大多数函
数调用，因此需要进行链接。它也可以与编译器选项相关联。接下来，如果正在使用 LowLevelKeyboardProc  函
数，则必须使用消息循环。 MSDN 声明，“此钩子在安装它的线程的上下文中调用。 通过向安装了钩子的线程发送消
息来进行调用。因此，安装钩子的线程必须有一个消息循环。“[ http://bit.ly/2HomCYQ ]
返回 CallNextHookEx  是因为 MSDN 声明 “ 调用 CallNextHookEx  函数链接到下一个钩子过程是可选的，但强烈
建议调用，否则已安装钩子的其他应用程序将不会收到钩子通知，因此可能会出现错误行为。所以你应该调用
CallNextHookEx ，除非你一定要阻止其他应用程序看到通知。“[ http://bit.ly/2H0n68h ]
接下来，我们继续构建从文件句柄开始的回调函数的功能。在示例代码中，它将在 Windows 系统的 Temp 目录
（C:\Windows\Temp）中创建名为 “log.txt” 的文件。 该文件配置了 append  参数，因为键盘记录器需要不断地将击
键输出到文件。如果此临时文件夹中没有该文件，则会创建一个同名文件（log.txt）。
回到 KBDLLHOOKSTRUCT 结构体，代码声明了一个 KBDLLHOOKSTRUCT  指针，然后将其分配给 lParam 。这将允许访
问每个按键的 lParam  内的参数。 然后代码检查 wParam  是否返回 WM_KEYDOWN ，这将检查按键是否被按下。这样
做是因为钩子会在按下和释放按键时触发。如果代码没有检查 WM_KEYDOWN ，程序将每次写入两次击键。
检查按键被按下后，需要有一个 switch 语句，用于检查 lParam  的 vkCode （虚拟键代码）是否有特殊键。某些
键需要以不同的方式写入文件，例如返回键（Esc），控制键（Ctrl），移位（shﬁt），空格（Space）和制表键
（Tab）。对于默认情况，代码需要将按键的 vkCode  转换为实际的字母。 执行此转换的简单方法是使用 ToAscii
函数。 ToAscii  函数将包含 vkCode ，一个 ScanCode ，一个指向键盘状态数组的指针，一个指向将接收该字母的
缓冲区的指针，以及一个 uFlags  的 int  值。 vkCode  和 ScanCode  来自按键结构体，键盘状态是先前声明的字节
数组，用于保存输出的缓冲区， uFlags  参数将设置为0。
检查是否释放了某些键是非常必要的，例如 shift  键。这可以通过编写另一个 if 语句  来检查 WM_KEYUP ，然后
使用 switch语句  来检查所需的键来完成。 最后，需要关闭该文件并返回 CallNextHookEx 。回调函数如下所示：
https://github.com/cheetz/ceylogger/blob/master/callback
此时，键盘记录器功能完全正常，但依旧有一些问题。第一个是运行程序会产生一个命令提示符的窗口，这使得程序
运行非常明显，并且窗口没有任何提示输出是非常可疑的。 另一个问题是将文件放在运行该键盘记录器的同一台计
算机上并不是很好。
LRESULT CALLBACK LowLevelKeyboardProc(
 _In_ int   nCode,
 _In_ WPARAM wParam,
 _In_ LPARAM lParam
);
通过使用 Windows 特定的 WinMain  函数入口替换标准 C 语言的 Main  函数入口，可以相对容易地修复有命令提示
符窗口的问题。根据我的理解，之所以有效是因为 WinMain  是 Windows 上图形程序的入口。尽管操作系统期望你
为程序创建窗口，但我们可以命令它不要创建任何窗口，因为我们有这个控件。最终，该程序只是在后台生成一个进
程而不创建任何窗口。
该程序的网络编程是简单粗暴的。首先通过声明 WSAData （ http://bit.ly/2HAiVN7 ），启动 winsock  ，清除提示
结构体以及填写相关需求来初始化 Windows socket  函数。就我们的示例来说，代码将使用 AF_UNSPEC  用于
IPV4  和 SOC_STREAM  用于 TCP 连接，并使用 getaddrinfo  函数使用先前的需求填充 c2 结构体。在满足所有必需
参数后，可以创建 socket 。最后，通过 socket_connect  函数连接到 socket 。
连接之后， socket_sendfile  函数将完成大部分工作。它使用 Windows 的 CreateFile  函数打开日志文件的句
柄，然后使用 GetFileSizeEx  函数获取文件大小。获得文件大小后，代码将分配该大小的缓冲区，加上一个用于填
充的缓冲区，然后将该文件读入该缓冲区。 最后，我们通过 socket  发送缓冲区的内容。
对于服务器端，可以在 C2 服务器的3490 端口上的启动 socat 侦听器，命令启动：
 socat：socat - TCP4-LISTEN:3490,fork 
一旦启动监听器并且键盘记录器正在运行，你应该看到来自受害者主机的所有命令每 10 分钟被推送到你的 C2 服务
器。 可以在此处找到键盘记录器的初始完整版本1：
https://github.com/cheetz/ceylogger/tree/master/version1 。
在编译 version_1.c 之前，请确保将 getaddrinfo 修改为当前的 C2 的IP 地址。编译代码：
cl version_1.c io.c  
应该提到的最后一个函数是 thread_func  函数。 thread_func  调用函数 get_time  来获取当前系统的分钟。然后
检查该值是否可被 5 整除，因为该工具每隔 5 分钟发送一次键盘记录文件。如果它可以被 5 整除，它会设置
socket  并尝试连接到 C2 服务器。如果连接成功，它将发送文件并运行清理本地文件。然后循环休眠 59 秒。需要
睡眠功能的原因是因为这一切都在一个固定的循环中运行，这意味着该函数将在几秒钟内获取时间，初始化连接，完
成连接和发送文件。如果没有 59 秒的休眠时间，该程序最终可能会在 1 分钟的时间间隔内发送文件几十次。休眠功
能允许循环等待足够长的时间以便切换到下一分钟，因此每 5 分钟仅发送一次文件。
混淆
有数百种不同的方法来执行混淆。虽然本章不能全部一一讲述，但我想为你提供一些基本的技巧和思路来解决绕过杀
毒软件的问题。
你可能已经知道，杀毒软件会查找特定的字符串。可用于绕过杀毒软件的最简单方法之一是创建一个简单的旋转密码
并移动字符串的字符。在下面的代码中，有一个解密函数，可以将所有字符串移动 6 个字符（ROT6）。这会导致杀
毒软件可能无法检测到特征码。在程序开始时，代码将调用解密函数来获取字符串数组并将它们返回到本来的形式。
解密函数如下所示：
int decrypt(const char* string, char result[]) 
   {  
        int key = 6; 
        int len = strlen(string);  
        for(int n = 0; n < len;  n++) 
        {  
            int symbol = string[n]; 
            int e_symbol = symbol - key;  
            result[n] = e_symbol;  
        } 
       result[len] = ‘\0’; 
       return 0; 
   } 
你可以在此处的程序版本2中看到此示例：https://github.com/cheetz/ceylogger/tree/master/version2 。
另一种可以用来逃避杀毒软件的方法是使用函数指针调用 User32.dll 中的函数，而不是直接调用函数。为此，首先
编写一个函数定义，然后使用 Windows 系统的 GetProcAddress  函数找到要调用的函数的地址，最后将函数定义
指针指定给从 GetProcAddress  接收的地址。可以在此处找到如何使用函数指针调用 SetWindowsHookEx  函数的
示例：https://github.com/cheetz/ceylogger/blob/master/version3/version_3.c#L197-L241 。
该程序的第 3 版本将前一个示例中的字符串加密与使用指针调用函数的方法相结合。有趣的是，如果你将已编译的二
进制文件提交到 VirusTotal（病毒检测网站），你将不再在导入部分中看到 User32.dll。在下面的图片中，左侧图像
是版本1的检测结果，右侧图像是带有调用指针的版本3的检测结果 。
你可以在以下网址找到版本3的完整源代码：https://github.com/cheetz/ceylogger/tree/master/version3 。
为了了解你是否已成功避开杀毒软件，最佳选择是始终针对实时杀毒软件系统进行测试。在真实世界的入侵活动中，
我不建议使用 VirusTotal 网站，因为你的病毒样本可能会发送给不同的杀毒软件厂商。然而，它非常适合测试或者学
习。对于我们的 payload，以下是 VirusTotal 比较：
对于版本1，32位，21/66（21家检测出），触发杀毒软件：
https://www.virustotal.com/#/ﬁle/4f7e3e32f50171fa527cd1e53d33cc08ab85e7a945cf0c0fcc978ea62a44a
62d/detection
http://bit.ly/2IXfuQh
对于版本3，32位，14/69（14家检测出），触发杀毒软件：
https://www.virustotal.com/#/ﬁle/8032c4fe2a59571daa83b6e2db09ﬀ2eba66fd299633b173b6e372fe762
255b7/detection
http://bit.ly/2IYyM7F
最后，如果我们将版本3编译为 64 位的 payload，我们得到 1/69（仅仅一家检测出）！：
https://www.virustotal.com/#/ﬁle/e13d0e84fa8320e310537c7fdc4619170bfdb20214baaee13daad90a175
c13c0/detection
http://bit.ly/2JNcBmc
译者注：根据上面的链接，译者点进去看了每一个数据，但是发现数据都有所更新，所以把上面的内容修改为
和链接到的内容一致的最新数据。但是下面的图片是书上的原图，所以是老的过期的数据。下面的图片是说，
将版本3编译为 64 位的 payload，得到 0/66（无一家一家检测出）的结果，但是现在已经是 1/69，也就是 69
个杀软种有一个可以检测出病毒。
实验：
下一步我们还可以做什么呢？有无限种可能！可以做一些小的优化比如对 log.txt 内容进行模糊/加密，或者在程序启
动后启动加密套接字，然后将获得击键权限直接写入该套接字。在接收方，服务器将重建数据流并将其写入文件。
这将阻止日志数据以纯文本形式显示，就像当前一样，并且还可以防止在硬盘中留下更多的文件痕迹。
如果你想做一些大的改进，那么你可以将可执行文件转换为 DLL，然后将 DLL 注入正在运行的进程。这样可以防止
进程信息显示在任务管理器中。虽然有一些程序可以显示系统中所有当前加载的 DLL，但注入 DLL 会更加隐蔽。此
外，有些程序可以反射性地从内存加载 DLL 而根本不在磁盘中留下痕迹（无文件），从而进一步降低了被取证的风
险。
本书定制的挂钩病毒（Dropper）
Dropper（挂钩病毒）是红队工具包的重要组成部分，允许你在不把程序放在受害者计算机磁盘上的情况下运行你植
入的程序。不将你的植入程序保存在磁盘上会降低它们被发现的风险，从而可以供你多次使用开展工作。在本章中，
我们将介绍本书定制开发的一个 dropper，它可以导入 shellcode 或仅驻留在内存中的 DLL 。
在设计 dropper 和相应的服务器时，你需要记住一些事项。dropper 的目的是成为你的武器库中的一件用完就销毁
的武器，这意味着你必须假设以当前形式使用它将触发进一步活动中的检测。
为了使后续的入侵活动更容易，你需要开发一个可以重复使用的标准服务器。在该示例中，你将看到一个基本的网络
实现，它允许为不同的消息注册新的处理程序（handler）。虽然此示例仅包含 LOAD_BLOB  消息类型的处理程序，
但你可以轻松添加新处理程序以扩展功能。这样就可以搭建良好的底层架构，因为你的所有通信都已标准化。
编写 dropper 或其他任何你希望快速找到并进行对其逆向的东西的时候，有个很重要步骤就是要清理你的文本字符
串。当你第一次构建软件时，或许你运气好、调试消息显示成功，这使你无需手动单步执行调试器以查看为什么会出
现问题。但是，如果特定的文本字符串在最终版本中被意外地遗留下来，将使病毒分析师很容易就可以逆向你的恶意
软件。很多时候，反病毒会针对一个独一无二的特定字符串或一个常量值签名。在示例中，我使用 InfoLog()  和
ErrorLog() ，它们的预处理器将在发布版本上编译。使用那些宏，通过检查是否定义了_DEBUG，将指示是否包含
相关调用。
本书定制 Dropper 代码：https://github.com/cheetz/thpDropper.git
Shellcode 与 DLL
在以下示例中，你可以让 dropper 加载完整的 DLL 或 shellcode。通常对于很多公共植入文件，你可以生成一个完