title:A content propagation metric for efficient content distribution
author:Ryan S. Peterson and
Bernard Wong and
Emin G&quot;un Sirer
A Content Propagation Metric for
Efﬁcient Content Distribution
Ryan S. Peterson
Cornell University &
United Networks, L.L.C.
Bernard Wong
Cornell University &
Emin Gün Sirer
Cornell University &
United Networks, L.L.C.
United Networks, L.L.C.
Dept. of Computer Science
Dept. of Computer Science
Dept. of Computer Science
Ithaca, NY
PI:EMAIL
Ithaca, NY
PI:EMAIL
Ithaca, NY
PI:EMAIL
ABSTRACT
Efﬁcient content distribution in large networks comprising data-
centers, end hosts, and distributed in-network caches is a difﬁ-
cult problem. Existing systems rely on mechanisms and metrics
that fail to effectively utilize all available sources of bandwidth in
the network. This paper presents a novel metric, called the Con-
tent Propagation Metric (CPM), for quantitatively evaluating the
marginal beneﬁt of available bandwidth to competing consumers,
enabling efﬁcient utilization of the bandwidth resource. The metric
is simple to implement, imposes only a modest overhead, and can
be retroﬁtted easily into existing content distribution systems. We
have designed and implemented a high-performance content distri-
bution system, called V-Formation, based on the CPM. The CPM
guides V-Formation toward a global allocation of bandwidth that
maximizes the aggregate download bandwidth of consumers. Re-
sults from a PlanetLab deployment and extensive simulations show
that V-Formation achieves high aggregate bandwidth and that the
CPM enables hosts to converge quickly on a stable allocation of
resources in a wide range of deployment scenarios.
Categories and Subject Descriptors
C.2.4 [Computer-Communication Networks]: Distributed Sys-
tems
General Terms
Design, Performance
Keywords
Content distribution, Hybrid, Peer-to-peer
1.
INTRODUCTION
Multimedia content distribution is a critical problem that accounts
for a majority of all Internet trafﬁc [3]. Delivering content at large
scale with low cost requires taking advantage of all resources avail-
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
SIGCOMM’11, August 15–19, 2011, Toronto, Ontario, Canada.
Copyright 2011 ACM 978-1-4503-0797-0/11/08 ...$10.00.
able. Yet existing approaches to content distribution have architec-
tural and protocol limitations that fail to utilize available resources
effectively.
Content distribution systems have three sources of bandwidth:
content distributors’ origin servers, in-network cache servers, and
clients. Content distribution systems based on a client-server ar-
chitecture, such as YouTube, place the entire resource burden on
the ﬁrst two sources of bandwidth, and thus necessitate a large
initial investment and incur high running costs [16]. In contrast,
peer-to-peer protocols, such as BitTorrent [1] and others [7, 31, 35],
rely primarily on bandwidth contributed by clients. While these
protocols permit the utilization of bandwidth from origin servers
and in-network caches [4, 5], they lack mechanisms for managing
such bandwidth to achieve commercial objectives and service level
guarantees a content distributor might seek. Finally, a new class
of emerging content distribution systems based on a hybrid, peer-
assisted architecture [32] manage the bandwidth from a single cen-
tralized server using a global optimization. Yet the optimization
mechanism in such systems does not support in-network caches or
distributed datacenters that house only a partial subset of the man-
aged content. As a result, hybrid systems cannot provide perfor-
mance guarantees for a deployment that comprises origin servers
in datacenters, cache servers, and clients.
Achieving a performance objective of any kind requires a metric
that can measure the performance of the system and thus help ad-
just its behavior to progress toward the performance goal. But the
design of a suitable metric is non-trivial. For instance, BitTorrent
hosts use a ranking derived from continuous block auctions [19] to
determine which peers to unchoke in order to maximize their re-
ciprocal bandwidth. This ranking is of limited use in other systems
because it is intertwined with the BitTorrent block transfer mech-
anisms, is vulnerable to attack [21, 27], and can lead to undesir-
able global behaviors such as swarm starvation [32]. An ideal met-
ric would be effective at achieving globally-desirable performance
objectives, easy to implement, able to handle network churn, and
backwards compatible with existing systems.
This paper presents a unifying metric, called the Content Propa-
gation Metric (CPM), that enables a content distribution system to
efﬁciently manage the resources of origin servers, in-network cache
servers, and clients. The key insight behind this metric is to cap-
ture how quickly a host’s uploaded content propagates transitively
throughout a set of peers downloading that content (a swarm). To
this end, the CPM is calculated by computing the average size
of recent block propagation trees rooted at a particular host for a
given swarm. The CPM handles changing swarm dynamics, such
as changes in swarm size, changes in link capacities, churn, block
availability, and content uploads from other hosts, which can all
326affect the rate of content propagation. The CPM offers a consis-
tent way for hosts to measure their marginal utility to a particu-
lar swarm, and to make informed decisions with their bandwidth
among swarms competing for content.1
This paper makes three contributions. First, it introduces and
deﬁnes the content propagation metric, discusses how it can be re-
alized in practice, and examines its effectiveness in dynamic set-
tings. Second, it outlines the design and implementation of a con-
tent distribution system, called V-Formation, that uses the CPM to
guide hosts toward an efﬁcient allocation of bandwidth that maxi-
mizes global aggregate bandwidth. The CPM enables V-Formation
to converge on an efﬁcient system-wide allocation of bandwidth in
a broad range of deployment scenarios that include origin servers,
cache servers, and clients in multiple swarms. Finally, it evaluates
the performance impact of using the CPM to existing content distri-
bution systems through a deployment and simulations. PlanetLab
experiments show that V-Formation can improve aggregate band-
width by approximately 60% and 30% over BitTorrent and Ant-
farm, respectively.
The rest of this paper is structured as follows. Section 2 gives
background on allocating bandwidth in the presence of multiple
swarms. Section 3 states the general content distribution problem
that this paper addresses, incorporating in-network caches. Sec-
tion 4 describes the CPM in detail and the core approach for al-
locating bandwidth based on measurements from individual hosts.
Section 5 describes our implementation of V-Formation, which we
use to evaluate the CPM in Section 6. Section 7 places our ap-
proach to content distribution in the context of related work, and
Section 8 concludes.
2. BACKGROUND
Existing swarming protocols, such as BitTorrent (Figure 1), use
mechanisms that allocate bandwidth efﬁciently within a single swarm,
but their policies do not make efﬁcient use of bandwidth from mul-
tiple origin servers and in-network cache servers.
To address content distribution in deployments where multiple
swarms compete for bandwidth from a server, Antfarm [32] intro-
duced a peer-assisted protocol that offers coordination among peers
using a logically centralized coordinator. Antfarm uses active mea-
surements to compute the optimal allocation of bandwidth from
a single origin server, called the seeder (Figure 2). Every swarm
exhibits a response to bandwidth that it receives from peers: every-
thing else remaining constant, increasing the bandwidth that a peer
contributes to a swarm increases the aggregate bandwidth within
the swarm. Antfarm represents this relationship with a response
curve, which captures a swarm’s aggregate bandwidth as a function
of the seeder’s bandwidth allocated to that swarm. The seeder can
use response curves collected for every swarm to determine which
swarms beneﬁt most from its bandwidth: the steeper the slope of
a response curve, the more aggregate bandwidth the corresponding
swarm achieves from additional seeder bandwidth.
Response curves are costly to obtain in practice, which renders
them impractical for highly dynamic swarms. Measuring a single
data point in a response curve requires a seeder to operate at a par-
ticular bandwidth for sufﬁciently long that the swarm’s aggregate
bandwidth stabilizes. While it is clearly unnecessary to measure a
swarm’s entire response curve in order to derive meaningful infor-
mation, a response curve must contain sufﬁcient data near the point
of operation to obtain the curve’s slope and calculate the expected
beneﬁt of an increase in seeder bandwidth. Furthermore, the opti-
1The word “metric” is used in the networking, not mathematical,
context. http://en.wikipedia.org/wiki/Metrics_(networking).
peer
swarm
Figure 1: BitTorrent architecture. BitTorrent swarms are logi-
cally isolated; peers make bandwidth allocation decisions indepen-
dently for each swarm.
seeder
peer
swarm
Figure 2: Antfarm architecture. Antfarm introduces a logically
centralized coordinator to optimize bandwidth from a single ori-
gin server across multiple swarms, but neglects other inter-swarm
bandwidth in its allocations.
mal point of operation can change rapidly as swarm memberships,
network conditions, and block availability change.
Response curves provide an efﬁcient allocation of bandwidth
from a single seeder, but deployments where peers belong to mul-
tiple swarms add a level of complexity that response curves do not
address. In a measurement study of over 6000 torrents and 960,000
users, we found that more than 20% of users simultaneously par-
ticipated in more than one monitored torrent. Such peers are faced
with choosing which swarms should receive their bandwidth, and
their decisions can have dramatic effects on the performance of the
system.
We discuss two approaches for adapting response curves to al-
locate bandwidth from multiple hosts, both of which result in sub-
optimal performance. In the ﬁrst approach, the coordinator mea-
sures a set of response curves for each peer that belongs to multiple
swarms, where each curve represents a swarm’s response to band-
width from a particular peer. Obtaining accurate measurements
is difﬁcult because peers’ response curves are dependent on each
other. The problem is exacerbated by the large time interval that
a peer must wait for the swarm to stabilize at an aggregate band-
width before taking a measurement; another peer’s shift in point of
operation during the time interval will perturb the measured value.
In an alternative approach, the coordinator instead maintains a
single response curve per swarm, which captures the swarms’ re-
sponses to bandwidth, independent of which particular hosts supply
the bandwidth. The coordinator performs Antfarm’s optimization
on the response curves to calculate the optimal amount of band-
width that each swarm should receive. Then, the coordinator as-
signs hosts to upload to particular swarms in order to realize the
optimal bandwidth allocation based on the computed target swarm
bandwidths and swarm memberships and upload capacities of in-
dividual peers. There are two problems with this approach. First,
the assignment problem of assigning peers to swarms is difﬁcult
to solve at large scales, and greedy algorithms for assigning peer
bandwidth to swarms can result in poor use of peers’ resources.
Second, using a single response curve for each swarm neglects vari-
327ations among peers, such as which blocks they possess and network
conditions to members of each of their swarms.
Overall, response curves offer an intuitive model for swarms
that enables a logically centralized seeder to allocate bandwidth
optimally among competing swarms. However, real-world issues
render them less useful for highly dynamic swarms, and infeasi-
ble when swarms compete for bandwidth from multiple hosts dis-
tributed throughout the network or peers that belong to multiple
swarms.
3. PROBLEM STATEMENT
swarm
cache server
peer
To formalize bandwidth allocation among multiple swarms, we
introduce the general multi-swarm content distribution problem.
This deﬁnes a global performance goal over a class of realistic con-
tent distribution scenarios comprising origin servers, in-network
caches, and end hosts organized into swarms (Figure 3).
Formally, given a set of peers P , a set of swarms S, and a set
of memberships M ⊆ P × S, the general multi-swarm content
distribution problem is to determine the upload bandwidth Up,s that
peer p should allocate to swarm s for all (p, s) ∈ M in order to
maximize global aggregate bandwidth Pp∈P Dp, where Dp is the
download bandwidth of peer p.
This general formalization removes restrictions on the location
of content and membership of peers in swarms. The CPM ad-
dresses the general multi-swarm content distribution problem by
guiding hosts to an efﬁcient allocation of bandwidth in these de-
ployment scenarios.
4. APPROACH
The Content Propagation Metric provides an accurate measure of
hosts’ contributions, offering a practical approach for addressing
the general multi-swarm content distribution problem. This sec-
tion describes the CPM in detail. It then explores how peers use
measured CPM values to compute an efﬁcient allocation of band-
width. The section concludes with discussions of how the CPM
remains effective in the presence of highly dynamic swarms. We
leave implementation details, including how to obtain and process
CPM measurements, to Section 5.
4.1 Block Propagation Bandwidth
Peers that simply aim to saturate their upstream bandwidth with-
out regard to the selection of the download recipients are not nec-
essarily acting in the best interest of the global ecosystem. A recip-
ient that fails to forward blocks to other peers provides little beneﬁt
to the swarm. The propagation of a block is hindered if a peer
that receives it is unwilling to contribute its upstream bandwidth,
or if the receiving peer’s neighbors already possess the block. It is
more beneﬁcial to upload blocks to peers that are willing to con-
tribute their bandwidth but lack desirable blocks that enable them
to saturate their own upload capacities. As a result, blocks of equal
rarity can have vastly different values to a swarm depending on
which particular peers have those blocks and what other blocks
those peers possess.
Block propagation bandwidth is a metric that captures these com-
plex multi-peer interactions by encompassing the global demand
for blocks, block availability, network conditions and topologies,
and peer behavior. Block propagation bandwidth is deﬁned for a
particular block transfer between two peers, called a tracked trans-
fer. Informally, the metric is the system-wide bandwidth during a
speciﬁed time interval resulting from block transfers that occurred
as a direct consequence of the tracked transfer. This metric provides
Figure 3: General multi-swarm content distribution. Peers,
which includes all hosts that upload or download content, belong
to arbitrary sets of potentially overlapping swarms.
b
p
r
T t0,t
p,r,b
t0
time
t
Figure 4: Propagation of a block. The dashed box indicates the
propagation tree that results from peer p’s tracked transfer of block
b to peer r. The block propagates exponentially during the mea-
surement time interval τ = t − t0, resulting in propagation band-
width vt0,t
p,r,b = 14 · 256 KBytes/30 s ≈ 120 KBytes/s, assuming
256-KByte blocks and τ = 30 seconds.
an estimate of the beneﬁt that results from a single block transfer
from one peer to another.
Formally, for the upload of block b from peer p to peer r, where
the transfer completes at time t0, we deﬁne a block propagation
tree T t0,t
p,r,b rooted at r with a directed edge from p1 to p2 if r is an
ancestor of p1, and p1 ﬁnishes uploading b to p2 at time t′ such that
t0 < t′ ≤ t. Thus, T t0,t
p,r,b is essentially an implicit multicast tree
rooted at peer r for block b during the time interval τ = t − t0. The
block propagation bandwidth, then, is
vt0,t
p,r,b = (cid:12)(cid:12)T t0,t
p,r,b(cid:12)(cid:12) · size(b)/(t − t0),
the download bandwidth enabled by p’s tracked transfer to r over
the time interval τ . Figure 4 shows an example propagation of
a block and the resulting propagation tree. Assuming 256-KByte