User: I have a Django application which I need to deploy in a WSGI container. I can either chose an event driven app server like TwistedWeb or a process driven server like uWSGI. I completely understand the difference between an event driven and a process driven server and I know Django framework is blocking in nature.
I came across TwistedWeb which lets us run a WSGI application in a simple fashion.
My questions are as follows:
1) Would I gain anything by running Twisted instead of uWSGI as Django is blocking in nature. Is TwistedWeb different from the standard twisted library ? I know people run Twisted with Django when they need support for async as well, for ex chat along with normal functionality and they still want to have just one app. I have no such use case and for me its just a website.
2) Would the performance be worse on TwistedWeb as its just a single process and my request would block as Django is synchronous in nature ? Or TwistedWeb runs something like uWSGI which launches multiple processes before hand and distributes requests in a roundrobin fashion among those ? If yes then is TwistedWeb any better than uWSGI ?
3) Is there any other protocol other than WSGI which can integrate Twisted with Django and still give me async behavior (trying my luck here :) )
Assistant: Nope, unless you heavily modify django db adapters and some core component you will not get any advantage. There are some tool for simplyfing the job, but you will be on the bleeding edge trying to adapt something built with the blocking paradigm since the beginning, to something completely different.
On the other side, performance should not be worst, as 99.9% of the time your app itself is the bottleneck, not your WSGI infrastructure.
Regarding async django, lot of people had luck with gevent, but you need to carefully analyze your app to be sure all of the components are gevent-friendly (and this could not be an easy task, expecially for db adapters).
Remember, even if your app is 99.9999999% non-blocking, you are still blocking.