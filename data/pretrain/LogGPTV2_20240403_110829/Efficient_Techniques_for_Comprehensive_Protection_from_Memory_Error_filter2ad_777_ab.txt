other types of variables. Buffer-type variables include
all arrays and structures containing arrays. In addition,
they include any variable whose address is taken, since
it may be used in pointer arithmetic, which can in turn
lead to out-of-bounds access.
All buffer-type variables are allocated separately
from other variables. Inaccessible memory pages (nei-
ther readable nor writable) are introduced before and af-
ter the memory region containing buffer variables, so
that any buffer overﬂows from these variables cannot
corrupt non-buffer variables. The order of buffer-type
variables is randomized as mentioned above. In addi-
tion, inaccessible pages are also introduced periodically
within this region to limit the scope of buffer-to-buffer
overﬂows.
Finally, all of the v ptr variables are write-
protected. Note that the locations of these variables are
predictable, but this cannot be used as a basis for attacks
due to write-protection.
2.2 Code Transformations
As with static data, one way to randomize code loca-
tion is to generate PIC code, and map this at a randomly
chosen location at runtime. But this approach has sev-
eral drawbacks as mentioned before, so our approach in-
volves randomizing at a much ﬁner granularity. Specif-
ically, our randomization technique works at the granu-
larity of functions. To achieve this, a function pointer
f ptr is associated with each function f. It is initialized
with the value of f. All references to f are replaced by
(*f ptr).
The above transformation avoids calls using abso-
lute addresses, thereby laying the foundation for relocat-
ing function bodies in the binary. But this is not enough:
there may still be jumps to absolute addresses in the
code. With C-compilers, such absolute jumps are intro-
duced while translating switch statements. In particular,
there may be a jump to location jumpTable[i], where
i is the value of the switch expression, and jumpTable
is a constant table constructed by the compiler. The ith
element of this table contains the address of the corre-
sponding case of the switch statement. To avoid abso-
lute address dependency introduced in this translation,
we transform a switch into a combination of if-then-else
and goto statements. Efﬁcient lookup of case values can
be implemented using binary search, which will have
O(log N) time complexity. However, in our current im-
plementation we use sequential search. In theory, this
transformation can lead to decreased performance, but
we have not seen any signiﬁcant effect due to this change
in most programs.
On a binary, the following actions are performed
to do the actual randomization. The entire code from
the executable is read. In addition, the location of func-
tions referenced by each f ptr variable is read from the
executable. Next, these functions are reordered in a ran-
258
14th USENIX Security Symposium
USENIX Association
dom manner, using a procedure similar to that used for
randomizing the order of static variables. Random gaps
and inaccessible pages are inserted periodically during
this process in order to introduce further uncertainty in
code locations, and to provide additional protection. The
transformation ensures that these gaps do not increase
the overall space usage for the executable by more than a
speciﬁed parameter (which has the value of 100% in our
current implementation). This limit can be exceeded if
the original code size is smaller than a threshold (32K).
the initializations of
f ptr variables are changed so as to reﬂect the new lo-
cation of each function. The transformed binary can then
be written back to the disk. Alternatively, the transfor-
mation could be done at load-time, but we have not im-
plemented this option so far.
After relocating functions,
It is well known that binary analysis and transfor-
mation are very hard problems. To ease this problem,
our transformation embeds “marker” elements, such as
an array of integers with predeﬁned values, to surround
the function pointer table. These markers allow us to
quickly identify the table and perform the above trans-
formation, without having to rely on binary disassembly.
As a ﬁnal step, the function pointer table needs to
be write-protected.
2.3 Stack Transformations
To change the base address of the stack, our transforma-
tion adds initialization code that subtracts a large random
number (of the order of 108) from the stack pointer. In
addition, all of the environment variables and command
line arguments are copied over, and the original contents
erased to avoid leaving any data that may be useful to
attackers (such as ﬁle names) at predictable locations.
Finally, the contents of the stack above the current stack
pointer value are write-protected. (An alternative to this
approach is to directly modify the base address of the
stack, but this would require changes to the OS kernel,
which we want to avoid. For instance, on Linux, this
requires changes to execve implementation.)
The above transformation changes the absolute lo-
cations of stack-resident objects, but has no effect on rel-
ative distances between objects. One possible approach
to randomize relative distances is to introduce an addi-
tional level of indirection, as was done for static vari-
ables. However, this approach will introduce high over-
heads for each function call. Therefore we apply this
approach only for buffer-type local variables.
(Recall
that buffer-type variables also include those whose ad-
dress is explicitly or implicitly used in the program.)
Speciﬁcally, for each buffer-type variable, we introduce
a pointer variable to point to it, and then allocate the
buffer itself on a second stack called the shadow stack.
Consider a local variable declaration char buf[100]
within a function, func. This variable can be replaced
by a pointer with the following deﬁnition:
char (*buf ptr)[100]
On entry of func, memory for buf is allocated using:
buf ptr = shadow alloc(sizeof(char [100]))
Allocations of multiple buffers are performed in a ran-
dom order similar to static variables. Also, the allocator
function allocates extra memory of a random size (cur-
rently limited to a maximum of 30%) between buffers,
thereby creating random gaps between adjacent buffers.
Finally, all occurrences of buf in the body of func are
replaced with (*buf ptr).
Our transformation does not change the way other
types of local variables are allocated, so they get allo-
cated in the same order. However, since the addresses of
these variables never get taken, they cannot be involved
in attacks that exploit knowledge of relative distances
between variables. In particular, stack-smashing attacks
become impossible, as the return address is on the regu-
lar stack, whereas the buffer overﬂows can only corrupt
the shadow stack. In addition, attacks using absolute ad-
dresses of stack variables do not work, as the absolute
addresses are randomized by the (random) change to the
base address of the stack.
Note that function parameters may be buffer-type
variables. To eliminate the risk of overﬂowing them,
we copy all buffer-type parameters into local variables,
and use only the local variables from there on. Buffer
type parameters are never accessed in code, so there is
no possibility of memory errors involving them.
(An
alternative to this approach is to ensure that no buffer-
type variables are passed by value. But this requires the
caller and callee code to be transformed simultaneously,
thereby potentially breaking separate compilation.)
As a ﬁnal form of stack randomization, we intro-
duce random gaps between stack frames. This makes
it difﬁcult to correlate the locations of local variables
across function invocations, thereby randomizing the ef-
fect of uninitialized pointer access and other temporal
errors. Before each function call, code is added to decre-
ments stack pointer by a small random value. After the
function call, this padding is removed. The padding size
is a random number generated at runtime, so it will vary
for each function invocation.
2.4 Heap Transformations
To modify the base address of the heap, code is added
to make a request for a large data block before the ﬁrst
heap allocation request is made. The details of this step
will vary with the underlying malloc implementation,
and are described later on.
To randomize the relative distance between heap
objects, calls to malloc() are intercepted by a wrap-
USENIX Association
14th USENIX Security Symposium
259
per function, and the size of the request increased by a
random amount, currently between 0% and 30%.
Additional randomizations are possible as well. For
instance, we can intercept calls to free, so that some of
the freed memory is not passed on to malloc, but simply
result in putting the the buffer in a temporary buffer. The
implementation of the malloc wrapper can be modiﬁed
to perform allocations from this buffer, instead of pass-
ing on the request to malloc. Since heap objects tend to
exhibit a signiﬁcant degree of randomness naturally, we
have not experimented with this transformation.
2.5 DLL Transformations
Ideally, DLLs should be handled in the same way as
executable code: the order of functions should be ran-
domized, and the order of static variables within the
libraries should be randomized. However, DLLs are
shared across multiple programs. Randomization at the
granularity of functions, if performed at load time on
DLLs, will create copies of these DLLs, and thus rule
out sharing. To enable sharing, randomization can be
performed on the disk image of the library rather than
at load time. Such randomization has to be performed
periodically, e.g., at every restart of the system.
A second potential issue with DLLs is that their
source code may not be available. In this case, the base
address of the DLL can be randomized in a manner sim-
ilar to [24, 4]. However, this approach does not pro-
vide sufﬁcient range of randomization on 32-bit archi-
tectures. In particular, with a page size of 4096 (= 212)
bytes on Linux, uncertainty in the base address of a li-
brary cannot be much larger than 216, which makes them
susceptible to brute-force attacks [27]. We address this
problem by a link-time transformation to prepend each
DLL with junk code of random size between 0 and page
size. The size of this junk code must be a multiple of 4,
so this approach increases the space of randomization to
216 ∗ 212/4 = 226.
2.6 Other Randomizations
In a dynamically
Randomization of PLT and GOT.
linked ELF executable, calls to shared library functions
are resolved at runtime by the dynamic linker. The GOT
(global offset table) and PLT (procedure linkage table)
play crucial roles in resolution of library functions. The
GOT stores the addresses of external functions, and is
part of the data segment. The PLT, which is part of the
code segment, contains entries that call addresses stored
in the GOT.
From the point of view of an attacker looking to
access system functions such as execve, the PLT and
GOT provide “one-stop shopping,” by conveniently col-
lecting together the memory locations of all system
functions in one place. For this reason, they have be-
come a common target for attacks. For instance,
• if an attacker knows the absolute location of the PLT,
then she can determine the location within the PLT
that corresponds to the external function execve, and
use this address to overwrite a return address in a
stack-smashing attack. Note that this attack works
even if the locations of all functions in the executable
and libraries have been randomized
• if an attacker knows the absolute location of the GOT,
she can calculate the location corresponding to a
commonly used function such as the read system
call, and overwrite it with a pointer to attack code
injected by her. This would result in the execution of
attack code when the program performs a read.
It is therefore necessary to randomize the locations of
the PLT and GOT, as well as the relative order of en-
tries in these tables. However, since the GOT and PLT
are generated at link-time, we cannot control them using
source code transformation. One approach for protect-
ing the GOT is to use the eager linking option, and then
write-protect it at the beginning of the main program.
An alternative approach that uses lazy linking (which is
the default on Linux) is presented in [31].
The main complication in relocating the PLT is to
ensure that any references in the program code to PLT
entries be relocated. Normally, this can be very difﬁcult,
because there is no way to determine through a static
analysis of a binary whether a constant value appearing
in the code refers to a function, or is simply an integer
constant. However, our transformation has already ad-
dressed this problem: every call to an entry e in the PLT
will actually be made using a function pointer e ptr in
the transformed code. As a result, we treat each entry
in the PLT as if it is a function, and relocate it freely, as
long as the e ptr is correctly updated.
Randomization of read-only data. The read-only data
section of a program’s executable consists of constant
variables and arrays whose contents are guaranteed not
to change when the program is being run. Attacks
which corrupt data cannot harm read-only data. How-
ever, if their location is predictable, then they may be
used in some attacks that need meaningful argument val-
ues, e.g., a typical return-to-libc attack will modify a re-
turn address on the stack to point to execve, and put
pointer arguments to execve on the stack. For this at-
tack to succeed, an attacker has to know the absolute
location of a string constant such as /bin/bash which
may exist in the read-only section.
Note that our approach already makes return-to-libc
attacks very difﬁcult. Nevertheless, it is possible to make
it even more difﬁcult by randomizing the location of po-
tential arguments in such attacks. This can be done by
introducing variables in the program to hold constant
260
14th USENIX Security Symposium
USENIX Association
values, and then using the variables as arguments in-
stead of the constants directly. When this is done, our
approach will automatically relocate these constants.
3 Implementation
The main component of our implementation is a source
code transformer which uses CIL [22] as the front-end,
and Objective Caml as the implementation language.
CIL translates C code into a high-level intermediate
form which can be transformed and then emitted as C
source code, considerably facilitating the implementa-
tion of our transformation.
Our implementation also includes a small platform-
speciﬁc component that supports transformations in-
volving code and DLLs.
The implementation of these components are de-
scribed in greater detail below. Although the source-
code transformation is fairly easy to port to different
OSes, the description below refers speciﬁcally to our im-
plementation on an x86/Linux system.
Implementation of Static Data Transformations
3.1
Static data can be initialized or uninitialized. In an ELF
executable, the initialized data is stored in the .data
section, and the uninitialized data is stored in the .bss
section. For uninitialized data, there is no physical space
required in the executable. Instead, the executable only
records the total size of the .bss section. At load-time,
the speciﬁed amount of memory is allocated and initial-
ized with zeroes.
In the transformed program, initializations have to
be performed explicitly in the code. First, all newly in-
troduced pointer variables should be initialized to point
to the locations allocated to hold the values of the orig-
inal static variables. Next, these variables need to be
initialized. We illustrate these transformations through
an example:
int a = 1;
char b[100];
extern int c;
void f() {
while (a < 100) b[a] = a++;
}
We transform the above declarations, and also add an
initialization function to allocate memory for the vari-
ables deﬁned in the source ﬁle as shown below:
int *a_ptr;
char (*b_ptr) [100];
extern int *c_ptr;
void __attribute__ ((constructor)) data_init(){
struct {
void *ptr;
unsigned int size;
BOOL is_buffer;
} alloc_info[2];
alloc_info[0].ptr = (void *) &a_ptr;
alloc_info[0].size = sizeof(int);
alloc_info[0].is_buffer = FALSE;
alloc_info[1].ptr = (void *) &b_ptr;
alloc_info[1].size = sizeof(char [100]);
alloc_info[1].is_buffer = TRUE;
static_alloc(alloc_info, 2);
(*a_ptr) = 1;
}
void f() {
while ((*a_ptr) < 100)
(*b_ptr)[(*a_ptr)] = (*a_ptr)++;
}
For the initialization function data init(), we
use constructor attribute so that it is invoked auto-
matically before execution enters main(). Each ele-
ment in the array alloc info stores information about
a single static variable, including the location of its
pointer variable, its size, etc. Memory allocation is done
by the function static alloc, which works as follows.
First, it allocates the required amount of memory by us-
ing a mmap. (Note that mmap allows its caller to specify
the start address and length of a segment, and this ca-
pability is used to randomize the base address of static
variables.) Second, it randomly permutes the order of
static variables speciﬁed in alloc info, and introduces
gaps and protected memory sections in-between some
variables. Finally, it zeroes out the memory allocated to
static variables. After the call to static alloc, code is
added to initialize those static variables that are explic-
itly initialized.