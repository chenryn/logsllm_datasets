, . . . , ϕn
and a set of booleans {β1, . . . , βn−1} s.t.
(cid:86)
(cid:86) (cid:44) (ite β1 ϕ1
ϕ
(cid:86)
(cid:86)
(. . . (ite βn−1 ϕn−1
(cid:86)
ϕn
)))
(cid:86)
(cid:86)
Then ϕ
, . . . , ϕn−1
Let βf alse ⊆ {β1, . . . , βn−1} be the set of boolean variables
that are set to f alse in π while others are left unconstrained;
(cid:86)} be the corresponding set of
(cid:86)
and let ϕ
values.
f alse ⊆ {ϕ1
can take any value in the set {ϕ1
f alse.
More precisely, let Bvi be the set of values (i.e. relational
(cid:86)
(cid:86)
bitvectors) that ϕi
can take any
can take to satisfy π. Then ϕ
value in the set Bv1...n \ Bvf alse to satisfy π.
Theorem 2 (Equivalence Explicit and Haunted RelSE).
Haunted RelSE detects a violation in a program if and only if
Explicit RelSE detects a violation.
(cid:86)}\ϕ
, . . . , ϕn
(cid:86)
(cid:86)
Proof (Sketch). Firstly we show that Theorem 2 holds for
Spectre-PHT and secondly, that it holds for Spectre-STL.
Spectre-PHT. First, let us show that Theorem 2 holds for
detection of Spectre-PHT vulnerabilities (we consider for this
case that symbolic evaluation of loads in Haunted RelSE only
returns the regular symbolic value).
Let H and E be symbolic conﬁgurations, respectively for
Haunted RelSE and Explicit RelSE such that both conﬁgura-
(cid:86)
, and
tions are equivalent. More precisely, their ﬁelds l, δ, ρ, µ
π are equal. Additionally, consider H.(cid:101)π = ∅, and E.(cid:101)δ = ∞.
All the rule preserve the equivalence relation except for the
rules ITE-TRUE and ITE-FALSE.
Consider that these conﬁgurations are about to execute a
conditional statement P [l] = ite c ? ltrue: lf alse. Because
H and E are equivalent, c evaluates to the same symbolic
value (c, δc) in H and E. In the symbolic evaluation, both
rules ITE-TRUE and ITE-FALSE can be applied.
gives the following states:
In Haunted RelSE, evaluation forks into two paths and
• A state Ht
following the true branch s.t. Ht.(cid:101)π =
{(c, δc) :: H.(cid:101)π} and Ht.l = ltrue,
• A state Hf , following the f alse branch s.t. Hf .(cid:101)π =
{(¬c, δc) :: H.(cid:101)π} and Hf .l = lf alse.
In Explicit RelSE, evaluation forks into four paths and
gives the following states:
• Regular true state Et s.t. Et.π(cid:48) = π∧ c and Et.l = ltrue,
• Regular f alse state Ef s.t. Ef .π(cid:48) = π ∧ ¬c and Ef .l =
• Transient true state E(cid:48)
• Transient f alse state E(cid:48)
t.π(cid:48) = π ∧¬c, E(cid:48)
f .π(cid:48) = π∧c, E(cid:48)
t s.t. E(cid:48)
f s.t. E(cid:48)
lf alse,
and E(cid:48)
f .l = lf alse,
t.l = ltrue,
and E(cid:48)
We can prove by induction on the number of steps in
Haunted RelSE, that there is an equivalence between Haunted
RelSE and Explicit RelSE conﬁgurations:
t.(cid:101)δ = δc,
f .(cid:101)δ = δc.
EQt There is a vulnerability in execution following Ht iff
there is a vulnerability in execution following Et or in
execution following E(cid:48)
t.
EQf There is a vulnerability in execution following Hf iff
there is a vulnerability in execution following Ef or in
execution following E(cid:48)
f .
The proof for EQt follows (case EQf is analogous):
First, we consider conﬁgurations following Ht such that the
current depth δ is below the retirement depth the condition
δc. Then, we consider conﬁgurations such that the condition
is retired.
[Case δ = 0; i--)
int64_t i;
if (idx < publicarray_size)
1
2
3
4
5
6
Listing 8: Litmus case_5 where publicarray_size is
set to 16.
temp &= publicarray2[publicarray[i]*512];
}
PHT
UInstr.
Paths
Time (s)
NoSpec
Explicit
Haunted
305
6824
589
17
407
32
1.3
26.5
1.9
0
1
1
Table VI: Comparison of Explicit and Haunted RelSE for
Spectre-PHT on litmus case_5 where UInstr is the number
of unrolled x86 instructions.
RelSE restricted to in-order execution (NoSpec) produces
17 paths: a ﬁrst path exits after the conditional at line 3, and
16 different path come from unrolling the loop 0 to 15 times.
Explicit RelSE forks into four paths after the conditional
branch at line 3, two of them jumping on the loop at line
4. Then, each time the condition of the loop is evaluated,
Explicit RelSE forks again into four paths6. In total, 390
additional transient paths are explored (Table VI). The behavior
of Haunted RelSE, is close to NoSpec: it only forks into two
paths at line 3 and when the condition of the loop is evaluated.
However, while NoSpec stops after 15 iterations of the loop,
Haunted RelSE transiently executes the loop up to 15 times7,
which gives a total of 32 paths.
This example illustrates how Haunted RelSE can prune
redundant paths compared to Explicit RelSE, achieving per-
formance closer to standard (in-order) RelSE. Haunted RelSE
spares 375 paths compared to Explicit RelSE and is almost 14
times faster.
6Depending on the path predicate, either the four paths are satisﬁable or
only two of them are satisﬁable.
7The loop body is 14 instructions long and can therefore be speculatively
executed 15 times in a speculation window of 200 instructions.