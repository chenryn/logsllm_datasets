title:Hybrid-Bridge: Efficiently Bridging the Semantic-Gap in VMI via
Decoupled Execution and Training Memoization
author:Alireza Saberi and
Yangchun Fu and
Zhiqiang Lin
HYBRID-BRIDGE: Efﬁciently Bridging the Semantic Gap in Virtual Machine
Introspection via Decoupled Execution and Training Memoization
Alireza Saberi
The University of Texas at Dallas
PI:EMAIL
Yangchun Fu
Zhiqiang Lin
The University of Texas at Dallas
The University of Texas at Dallas
PI:EMAIL
PI:EMAIL
Abstract—Recent advances show that it is possible to reuse the
legacy binary code to bridge the semantic gap in virtual machine
introspection (VMI). However, existing such VMI solutions often
have high performance overhead (up to hundreds of times slow-
down), which signiﬁcantly hinders their practicality especially for
cloud providers who wish to perform real-time monitoring of the
virtual machine states. As such, this paper presents HYBRID-
BRIDGE, a new system that uses an efﬁcient decoupled execution
and training memoization approach to automatically bridge the
semantic gap. The key idea is to combine the strengths of both
ofﬂine training based approach and online kernel data redirection
based approach, with a novel training data memoization and
fall back mechanism at hypervisor layer that decouples the
expensive Taint Analysis Engine (TAE) from the execution of
hardware-based virtualization and moves the TAE to software-
based virtualization. The experimental results show that HYBRID-
BRIDGE substantially improves the performance overhead of
existing binary code reuse based VMI solutions with at least
one order of magnitude for many of the tested benchmark tools
including ps, netstat, and lsmod.
I.
INTRODUCTION
Virtual machine monitor (i.e., hypervisor) [23] has pro-
vided many new opportunities for guest OS administration
(e.g., consolidation, encapsulation, and migration), better se-
curity and reliability [10]. One popular application is the
virtual machine introspection (VMI) [22] that pulls the guest
OS states and inspects them at hypervisor layer. Because
of such higher trustworthiness and stealthiness compared to
running inspection software inside a guest OS, VMI has
been an appealing alternative for many traditional
in-VM
based security applications, as demonstrated in recent malware
analysis [31], [13], [43], [44], kernel rootkit defense [46], [28],
and memory forensics [20], [16].
However, it is non-trivial to develop introspection software
at hypervisor layer. When developing software inside an OS,
programmers often have rich semantic abstractions such as
system calls or APIs (e.g., getpid) to inspect kernel states.
However,
there are no such abstractions for guest OS at
Permission(cid:1) to(cid:1) freely(cid:1) reproduce(cid:1) all(cid:1) or(cid:1) part(cid:1) of(cid:1) this(cid:1) paper(cid:1) for(cid:1) noncommercial(cid:1)
purposes(cid:1)is(cid:1)granted(cid:1)provided(cid:1)that(cid:1)copies(cid:1)bear(cid:1)this(cid:1)notice(cid:1)and(cid:1)the(cid:1)full(cid:1)citation(cid:1)
on(cid:1)the(cid:1)ﬁrst(cid:1)page.(cid:1)Reproduction(cid:1)for(cid:1)commercial(cid:1)purposes(cid:1)is(cid:1)strictly(cid:1)prohibited(cid:1)
without(cid:1)the(cid:1)prior(cid:1)written(cid:1)consent(cid:1)of(cid:1)the(cid:1)Internet(cid:1)Society,(cid:1)the(cid:1)ﬁrst-named(cid:1)author(cid:1)
(for(cid:1) reproduction(cid:1) of(cid:1) an(cid:1) entire(cid:1) paper(cid:1) only),(cid:1) and(cid:1) the(cid:1) author’s(cid:1) employer(cid:1) if(cid:1) the(cid:1)
paper(cid:1)was(cid:1)prepared(cid:1)within(cid:1)the(cid:1)scope(cid:1)of(cid:1)employment.
NDSS(cid:1)’14,(cid:1)23-26(cid:1)February(cid:1)2014,(cid:1)San(cid:1)Diego,(cid:1)CA,(cid:1)USA
Copyright(cid:1)2014(cid:1)Internet(cid:1)Society,(cid:1)ISBN(cid:1)1-891562-35-5
http://dx.doi.org/(cid:18)(cid:17)(cid:15)(cid:18)(cid:21)(cid:24)(cid:19)(cid:19)(cid:16)(cid:79)(cid:69)(cid:84)(cid:84)(cid:15)(cid:19)(cid:17)(cid:18)(cid:21)(cid:15)(cid:19)(cid:20)(cid:19)(cid:19)(cid:23)
hypervisor layer, but rather the zeros and ones of raw memory
data. Consequently, developers must reconstruct
the guest
OS abstractions from the raw data at hypervisor layer. Such
reconstruction is often called to bridge the semantic gap [10],
which is often challenging and has been the road block for all
of out-of-VM solutions for years.
An intuitive and widely adopted approach to bridging the
semantic gap is to walk through kernel data structures to locate
and interpret the kernel data of interest (e.g., [45], [43], [31],
[5], [9]). However, this approach must rely on the kernel data
structure knowledge, such as the layout of kernel object, and
resolve the points-to relations among data structures [9], [12],
which tends to be very expensive for OS kernels. Moreover,
if there is any kernel update or a need to support different
kernels, this process has to be repeated.
Fortunately, since there already exist many native inspec-
tion programs (e.g., ps, netstat, lsmod) inside an OS,
if we can directly reuse the legacy binary code of these
programs at hypervisor layer, we would not need the above
data structure based approach. Based on this insight, recently
VIRTUOSO [15] and VMST [19] were proposed towards
automatically bridging the semantic gap in VMI by reusing
the legacy binary code.
Speciﬁcally, VIRTUOSO [15] leverages a training-based,
whole system dynamic slicing technique to identify the rel-
evant x86 instructions that query the internal state of a guest
OS (e.g., the relevant instructions involved by ps command).
In the second step, VIRTUOSO extracts the identiﬁed sequence
of these x86 instructions and lifts them up to a micro operation
instruction set [18]. Finally it translates these micro operation
code to Python code to eventually produce the introspection
tool that can be used for VMI. However, VIRTUOSO suffers
nearly 140X slowdown on average compared to native execu-
tion according to our experimental result in §VII.
In contrast, VMST [19] uses an online kernel data redi-
rection approach that redirects kernel data access under the
execution context of system calls of interest (e.g., getpid
system call when retrieving a pid is needed) without any
training to automatically bridge the semantic gap [20]. In
particular, VMST leverages a taint tracking component [41] to
identify the kernel data which should be redirected during an
introspection process. However, this taint tracking component,
implemented on top of a VM emulator QEMU [18], often
contributes at least 10X slowdown without considering the
emulator overhead. If we also consider the emulator overhead,
:
:
1:  c10583e0: push   %ebp
2:  c10583e1: mov
3:  c10583e3: push   %ebx
4:  c10583e4: sub    $0x14,%esp
%esp,%ebp
Data Structure Name
current_task
(Line: 5)
struct
task_struct
Data Structure Offset
[%fs:0xc17f34cc]
(Line: 6)
struct task_struct *group_leader
0x220
// Accessing Global Variable: struct task_strut current_task
5:  c10583e7: mov
%fs:0xc17f34cc,%ebx
c10583ea: R_386_32   current_task
struct
pid_link pids[3]
(Line: 7)
struct pid *pid
0x23c
// Accessing struct task_struct: current_task->group_leader
6:  c10583fe: mov
0x220(%ebx),%eax
// Accessing struct pid: current_task->group_leader->pids[0]->pid
7:  c1058404: mov
0x23c(%eax),%eax
struct pid
8:  c105840a: call   c1065660 
9:  c105840f: add    $0x14,%esp
unsigned int level
struct upid numbers[1]
struct upid
int nr
0x4
0x1c
0x0
Fig. 1: Code Snippet of System Call sys_getpid and the Corresponding Data Structures in Linux Kernel 2.6.32.8.
(a)
(b)
VMST would have up to hundreds of times performance
slowdown.
utilities in FAST-BRIDGE to perform VMI, and SLOW-BRIDGE
will be automatically invoked by the underlying hypervisor.
As a result,
the huge performance overhead of these
existing solutions signiﬁcantly hinders their practicality, es-
pecially for critical users such as cloud providers who wish
to perform real-time monitoring of VM states at large scale.
Therefore, in this paper we present HYBRID-BRIDGE, a hybrid
approach that combines the strengths of both VIRTUOSO
(from the perspective of ofﬂine training) and VMST (from
the perspective of online taint analysis [41] and kernel data
redirection [19]). At a high level, HYBRID-BRIDGE uses an
online memoization [39] approach that caches the trained
meta-data in an online fashion for a hardware-virtualization
based VM (e.g., KVM [33]) to execute the native inspection
command such as ps,lsmod,netstat, and a decoupled
execution approach that decouples the expensive taint analysis
from the execution engine, with an online fall back mechanism
at hypervisor layer to remedy the coverage issue when the
meta-data is incomplete. With such a design, our experimental
results show that HYBRID-BRIDGE achieves one order of
magnitude faster performance than that of similar systems such
as VIRTUOSO and VMST.
More speciﬁcally, HYBRID-BRIDGE decouples the expen-
sive online dynamic taint analysis from hardware-based vir-
tualization through online memoization of the meta-data, and
we call this execution component FAST-BRIDGE. However, we
still need a component to perform the slow taint analysis and
precisely tell those redirectable instructions (which are part
of the meta-data), and this is done by the second component
we call SLOW-BRIDGE. Therefore, HYBRID-BRIDGE is a
combination of SLOW-BRIDGE, which extracts the meta-data
using the online kernel data redirection approach from a soft-
ware virtualization-based VM (e.g., QEMU [18]), and FAST-
BRIDGE, a fast hardware virtualization-based execution engine
via memoization of the trained meta-data from SLOW-BRIDGE.
End users will only need to execute the native inspection
2
HYBRID-BRIDGE does not have the path coverage issues
as VIRTUOSO because it contains a fall back mechanism that
works similarly to the OS page fault handler. That is, whenever
there is a missing meta-data, HYBRID-BRIDGE will suspend
the execution of FAST-BRIDGE and fall back to SLOW-
BRIDGE to identify the missing meta-data for the executing
instructions. After SLOW-BRIDGE identiﬁes the missing meta-
data, it will update and memoize the trained meta-data, and
dynamically patch the kernel instructions in FAST-BRIDGE and
resume its execution. Therefore, HYBRID-BRIDGE executes
the instructions natively in FAST-BRIDGE most of the time.
Only when the trained meta-data is incomplete, it falls back to
the SLOW-BRIDGE. These VM-level fall-back, memoization,
and synchronization can be realized thanks to the powerful
control from hypervisor.
In short, this paper makes the following contributions:
• We present a novel decoupled execution scheme that
decouples an expensive online taint analysis engine
from hardware-based virtualization to achieve efﬁcient
VMI.
• We also propose a novel training memoization that
caches the trained meta-data from software virtual-
ization (e.g., QEMU) to avoid the recomputation of
redirectable instruction identiﬁcation.
All these techniques are transparent to the user level
inspection programs as well as end users. Orchestrated
by hypervisor, these techniques together substantially
improve the performance of the existing VMI solu-
tions by one order of magnitude.
is practical
to have a hybrid
approach to bridging the ideas of two different VMI
•
• We demonstrate it
SLOW-BRIDGE
FAST-BRIDGE
M
V
d
e
t
s
u
r
r
T
Inspection Apps
lsmod
lsmod
psps
……
Memory Snapshot
Memory Snapshot
Trusted OS
Trusted OS
Untrusted OS
Untrusted OS
Taint 
Tracking
Data 
Redirection
R/W
C
O
W
QEMU
QEMU
R/O
33
33
Snapshot
44 Meta-Data
33
33
SLOW-BRIDGE Starts
44
SLOW-BRIDGE Finishes
33
Kernel Inspection Command
FALLBACK
Training
Memoization
Inspection Apps
lsmod
lsmod
psps
……
Memory Snapshot
Memory Snapshot
Trusted OS
Trusted OS
Untrusted OS
Untrusted OS
M
V
d
e
t
s
u
r
r
T
Dynamic
Instruction 
Patching
Data 
Redirection
KVM
KVM
C
O
W
R/O
R/W
11
55 Meta-Data
22
22
55
22
Snapshot
Command Log
FAST-BRIDGE Resumes
Data
Control
HYBRID-BRIDGE
Fig. 2: An overview of HYBRID-BRIDGE.
solutions (VIRTUOSO and VMST),
to improve the
performance of VMST without suffering the path
coverage issues of VIRTUOSO.
The rest of the paper is organized as follows:
in §II,
we give an overview of HYBRID-BRIDGE. Then, we provide
the detailed design of each component of HYBRID-BRIDGE,
namely FAST-BRIDGE, SLOW-BRIDGE, and FALLBACK from
§III to §V. In §VI, we share the implementation details. In §VII,
we present our evaluation result. We discuss the limitation and
future work in §VIII, and review related work in §IX. Finally,
§X concludes.
II. BACKGROUND AND OVERVIEW
to VMST [19],
Observation. Similar
the main goal of
HYBRID-BRIDGE is to enable native inspection utilities (e.g.,
ps, lsmod) to transparently investigate a remote system out-
of-VM. This goal is achieved by forwarding special kernel data
from a remote system (i.e., untrusted VM) to a local system
(i.e., trusted VM).
We use a simple inspection program, GetPid, to illustrate
the basic idea behind HYBRID-BRIDGE. GetPid invokes the
sys_getpid system call
to retrieve a running process’s
ID. Fig. 1 (a) shows a code snippet of sys_getpid of
Linux kernel 2.6.32.8. In particular, sys_getpid kicks
off by accessing current_task, a global pointer which
points to the current running task at line 5, then derefer-
ences the group_leader ﬁeld to access the group leader
task structure at line 6. Next, it dereferences the pointer to
group_leader of task_struct at line 7 to access the
pid ﬁeld. Note that the real PID value is stored in int
nr ﬁeld of struct upid. For the sake of brevity we only
show the partial code and the data structures accessed during
sys_getpid illustrated in Fig.1.
It is important to notice that all of these data structures are
accessed by dereferencing a global variable, current_task,
and traversing the subsequent data structures. This obser-
vation, as ﬁrst discovered by VMST [19], lays one of the
foundations of HYBRID-BRIDGE; namely, by fetching speciﬁc
kernel global variables (e.g. current_task) and all of
their derived data structures from the OS kernel of a remote
VM, a commodity inspection tool can automatically achieve
introspection capabilities. We refer to this technique as data
redirection.
System Overview. At a high level, HYBRID-BRIDGE enables