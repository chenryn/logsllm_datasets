    }
}
private E dequeue() {
    final Object[] items = this.items;
    @SuppressWarnings("unchecked")
    // // 从这里可以看出，takeIndex就是当出队的时候，元素的位置
    E e = (E) items[takeIndex];
    items[takeIndex] = null;
    // 同样，当下一次takeIndex超过数组容量时，就从头开始
    if (++takeIndex == items.length) takeIndex = 0;
    count--;
    if (itrs != null)
        itrs.elementDequeued();
    // 唤醒等待put的线程
    notFull.signal();
    return e;
}
```
- remove
```java
void removeAt(final int removeIndex) {
    final Object[] items = this.items;
    // 删除的位置等于下一次take的位置
    if (removeIndex == takeIndex) {
        // removing front item; just advance
        items[takeIndex] = null;
        // takeIndex往后移动一位
        if (++takeIndex == items.length) takeIndex = 0;
        count--;
        if (itrs != null)
            itrs.elementDequeued();
    } else {
        // 删除的位置非takeIndex
        // 从删除的位置开始遍历
        for (int i = removeIndex, putIndex = this.putIndex;;) {
            int pred = i;
            if (++i == items.length) i = 0;
            // 如果遍历到putIndex的位置，删除这个位置的元素
            if (i == putIndex) {
                items[pred] = null;
                this.putIndex = pred;
                break;
            }
            // 将removeIndex后的元素全部往前移动一位
            items[pred] = items[i];
        }
        count--;
        if (itrs != null)
            itrs.removedAt(removeIndex);
    }
    // 通知等待put的线程
    notFull.signal();
}
```
#### 使用场景
一般用于生产数据固定的场景
### LinkedBlockingQueue 
#### 类结构层次
![202002220959](/assets/202002220959.jfif)
```mermaid
classDiagram
    AbstractQueue (null);
}
// 根据给定集合初始化
public LinkedBlockingQueue(Collection c) {
    // 初始化近乎无限的队列
    this(Integer.MAX_VALUE);
    // put锁
    final ReentrantLock putLock = this.putLock;
    putLock.lock(); // Never contended, but necessary for visibility
    try {
        int n = 0;
        // 通过循环以此对集合内的元素入列
        for (E e : c) {
            if (e == null)
                throw new NullPointerException();
            if (n == capacity)
                throw new IllegalStateException("Queue full");
            enqueue(new Node(e));
            ++n;
        }
        // 维护队列状态信息
        count.set(n);
    } finally {
        putLock.unlock();
    }
}
```
- 阻塞新增
```java
public void put(E e) throws InterruptedException {
    if (e == null) throw new NullPointerException();
    final int c;
    final Node node = new Node(e);
    final ReentrantLock putLock = this.putLock;
    final AtomicInteger count = this.count;
    // 可中断锁
    putLock.lockInterruptibly();
    try {
        // 当前队列满，等待
        while (count.get() == capacity) {
            notFull.await();
        }
        // 等待结束（此时是队列从满变为没满，被唤醒），入队
        enqueue(node);
        // 获得上一刻队列大小
        c = count.getAndIncrement();
        // 如果当前队列大小仍然小于最大容量，唤醒一个put的等待线程
        if (c + 1  1)
            notEmpty.signal();
    } finally {
        takeLock.unlock();
    }
    // 队列还剩一个空位，唤醒一个等待put的线程
    if (c == capacity)
        signalNotFull();
    return x;
}
```
#### 使用场景
适合对生产的数据大小不定（时高时低），数据量较大的场景
### DelayQueue 
DelayQueue 中的元素必须是 Delayed 的子类，Delayed 是表达延迟能力的关键接口，其继承了 Comparable 接口，并定义了还剩多久过期的方法
这个集合支持用来调度定时任务
```java
public interface Delayed extends Comparable {
    long getDelay(TimeUnit unit);
}
```
DelayedQueue 实现延时队列的本质，是在内存中维护一个有序的数据结构，按任务应该被执行的时间来排序，通过一个线程检查头部元素，如果队列头的任务没有到期，就阻塞这个线程，直到任务到期，再唤醒这个线程；如果检查头部的时候任务已经到期，让这个消费线程真的从队列取出该元素，并执行
![leader-follower 的线程模型](/assets/202271314451.webp)
#### 操作
- put
```java
public boolean offer(E e) {
    final ReentrantLock lock = this.lock;
    lock.lock();
    try {
        // 利用优先队列进行排序
        q.offer(e);
        // 如果刚放进去的元素在队头
        if (q.peek() == e) {
            leader = null;
            // 则会唤醒在等待可用元素的线程
            available.signal();
        }
        return true;
    } finally {
        lock.unlock();
    }
}
```
- take
```java
public E take() throws InterruptedException {
    final ReentrantLock lock = this.lock;
    lock.lockInterruptibly();
    try {
        // 自旋
        for (;;) {
            // 获取队头数据
            E first = q.peek();
            // 队头没数据，进行等待
            if (first == null)
                available.await();
            else {
                // 获取队头数据的过期时间
                long delay = first.getDelay(NANOSECONDS);
                // 以及过期了
                if (delay  {
    // e 为空的，会直接返回特殊值，不为空会传递给消费者
    // timed 为 true，说明会有超时时间
    abstract E transfer(E e, boolean timed, long nanos);
}
// 堆栈 后入先出 非公平
// Scherer-Scott 算法
static final class TransferStack extends Transferer {}
// 队列 先入先出 公平
static final class TransferQueue extends Transferer {}
```
- transfer
该方法比较复杂，总而言之，如果传进来的e是null，并且当前有一个put线程阻塞，则会返回这个put的e，并且put线程解除阻塞。否则就一直阻塞到有数据为止
反之，如果传进来的e不是null，并且有一个take线程阻塞，则将e通过节点传给take线程
### TransferQueue
拥有普通阻塞队列的put-poll功能与SynchronousQueue的阻塞数据交换功能
- transfer
### Deque
- 双端队列
这种类型的队列允许从头尾两端都可以取得元素，这样在消费能力不一的多消费者情况，提前完成消费的消费者可以从其他消费者的队列末端窃取一些数据来处理，称之为工作窃取
## 问题
#### 对队列的理解
首先队列本身也是个容器，底层也会有不同的数据结构，列把生产数据的一方和消费数据的一方进行解耦，生产者只管生产，消费者只管消费，队列还可以对消费者和生产者进行管理，当队列满时或者空时，会阻塞住生产者或者消费者
#### 队列和集合的区别
队列（部分例外）和集合都提供了数据存储的功能，底层的储存数据结构是有些相似的
但两者为了完成不同的事情，提供的 API 和其底层的操作实现是不同的， 队列提供了阻塞的功能，解耦了生产者和消费者
####  哪些队列具有阻塞的功能，大概是如何阻塞的
LinkedBlockingQueue 链表阻塞队列和 ArrayBlockingQueue 数组阻塞队列是一类，两个阻塞队列都可以指定容量大小，当队列满时，如果有线程 put 数据，线程会阻塞住，直到有其他线程进行消费数据后，才会唤醒阻塞线程继续 put，当队列空时，如果有线程 take 数据，线程会阻塞到队列不空时，继续 take
SynchronousQueue 同步队列，当线程 put 时，必须有对应线程把数据消费掉，put 线程才能返回，当线程 take 时，需要有对应线程进行 put 数据时，take 才能返回
#### 底层是如何实现阻塞的
利用 Condition 的等待唤醒机制
#### 经常使用队列的 put、take 方法有什么危害，如何避免
两个方法都是无限（永远、没有超时时间的意思）阻塞的方法
使用 offer 和 poll 方法来代替两者，可以设置超时阻塞时间
## 队列在JDK中的其他运用
- 线程池
![202002231353](/assets/202002231353.jfif)
```java
public static ExecutorService newFixedThreadPool(int nThreads) {
    return new ThreadPoolExecutor(nThreads, nThreads,
                                  0L, TimeUnit.MILLISECONDS,
                                  new LinkedBlockingQueue());
}
```
> 参考JAVA编程规范中的不要用Executors创建线程池，而要手动创建
### 锁
同步队列
```mermaid
flowchart TD
    开启锁 --> 尝试去获得锁
    尝试去获得锁{尝试去获得锁} --> |是|得到锁
    尝试去获得锁{尝试去获得锁} --> |否|锁同步队列
    锁同步队列 --> |再次尝试获得锁|尝试去获得锁
    得到锁 --> 执行
    执行 --> 释放锁
    释放锁 --> |通知同步队列中的线程中的\n线程,可以尝试再次去\n获得锁了|锁同步队列
```