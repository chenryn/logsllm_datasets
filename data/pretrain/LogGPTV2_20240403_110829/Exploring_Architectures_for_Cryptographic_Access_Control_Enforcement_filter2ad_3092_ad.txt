value on the maintenance goal. Instead, the requirement eGR3 (limit
CSP-related costs for budget constraints) can be translated as a soft
constraint imposing a penalty (e.g., -5) for architectures with a
negative value on the CSP monetary savings goal. The require-
ment eGR4 (prioritize the scalability of the services) can assign a
weight to the scalability and reliability goals. For instance, the val-
ues can weight twice as much (i.e., ùë§Scalability = 2, ùë§Reliability = 2).
The dashboard solves the constrained weighted sum optimization
problem and shows in real-time, in the last two blue sections, the
three most suitable architectures and the detail on the goals val-
ues, respectively. We see that the most suitable architecture uses
CSP services as much as possible. This reflects the scalability and
reliability priorities. At the same time, this architecture enhances
the easiness in deployment and maintenance of the architecture.
AzureAWS...Step 1: What-if Analysis through web dasbhoardStep 2: Orchestration through CloudifyMOOP	SolverRequirementsarc*FragmentsCloudifyBlueprintBlueprintGeneratorFigure 3: Web Dashboard Optimization Problem for eGovernment Scenario
By tuning (e.g., increasing) the penalty value on the CSP monetary
savings goal, the weighted sum of these three architectures would
decrease and other architectures may become optimal.
eHealth Scenario. We briefly discuss the scenario presented in Sec-
tion 3. Suppose the presence of a clinic treating mental disorders.
The requirement eHR1 (hide metadata to avoid information leak-
ing) adds ‚ü®MS, CSP‚ü© and ‚ü®RM, CSP‚ü© to the ùëÉùëüùëí-ùêπùëñùëôùë°ùëíùëüùë† set. As said
in Section 4.1, metadata could be encrypted and turned into not-
sensitive metadata at the cost of additional overhead on the CAC
scheme. This would allow the MS to stay in CSP domain. The RM,
however, would still need to access plain-text metadata, so the RM
cannot stay in the CSP domain anyway. The priority on the re-
dundancy goal in eHR2 (prioritize redundancy to avoid medical
data loss) translates in a weight applied to the value of that goal.
For instance, the redundancy value can weight twice as much (i.e.,
ùë§Redundancy = 2). Finally, eHR3 (limit the vendor lock-in effect) can
be seen as a hard constraint imposing a non-negative value on the
vendor lock-in goal.
6.2 Architecture Modeling with Cloudify
Once identified the most suitable CAC scheme architecture for
the eGovernment scenario, we need a CSP-independent modelling.
We rely on the TOSCA OASIS standard for a flexible and portable
representation of the architecture. TOSCA is a YAML-based mod-
elling language addressing the lack of a standardized view on cloud
services (e.g., storage, cloud functions). The goal of TOSCA is to
allow one to migrate cloud applications across different CSP with-
out investing high cost and time. For the actual modelling, we
choose Cloudify,9 a TOSCA-based open-source cloud orchestration
framework supporting the major CSPs (e.g., Azure, AWS, Google,
OpenStack). Cloudify allows to graphically model cloud applica-
tions by creating and configuring cloud services like servers and
network appliances. The graphical model is called ‚Äúblueprint‚Äù and
it is composed of nodes representing cloud services (e.g., security
groups, cloud functions) and relationships (e.g., a database hosted
by a server). Given a blueprint, Cloudify automatically deploys and
orchestrates the cloud application. We manually develop the blue-
print templates of the most suitable CAC scheme architecture of
the eGovernment scenario and report it in Appendix B. In detail, we
modelled an AWS relational database service (i.e., MS), a Lambda
cloud function (i.e., RM) and the S3 storage service (i.e., DS). The
proxy is not part of the blueprint since it is expected to be installed
in users‚Äô computers.
6.3 CAC Scheme Implementation
As the last step, we provide a fully working implementation of
the CAC scheme proposed in [10]. We choose this scheme because
it supports the architecture of the eGovernment scenario. As ex-
plained in Section 2.2, the CAC scheme in [10] uses hybrid encryp-
tion. We choose RSA [33] for asymmetric encryption and AES for
symmetric encryption. We implement the proxy as a Java program
to be installed in the computer of each user. The users‚Äô secret key
is generated and stored inside the user‚Äôs proxy. We use AWS Java
library to interface with AWS services and implement the Lambda
cloud function code (i.e., RM). Finally, we test our implementation
with several simulated sequences of operations. This means com-
bining the creation of users and roles, assignment and revoking
of permissions and the creation, update and management of files.
We also implemented a graphical user interface based on web tech-
nologies. We made open-source the implementation of the scheme
along with other resources.10
7 RELATED WORK
Cryptographic Access Control. CAC has been applied in several
scenarios, like local filesystems [13] and the cloud [10]. Goyal et
al. [13] developed a CAC scheme based on ABE. In their scheme,
users can delegate their permissions but not revoke them. This
makes the whole scheme not usable for a dynamic scenario. In [23],
the authors proposed a similar scheme while also avoiding the
disclosure of the AC policy itself, deemed to be sensitive metadata.
Still, run-time modifications of the policy were not addressed. In [2],
the authors considered the revocation of permissions, but they did
not discuss the computational burden that a revocation implies.
Garrison et al. [10] studied the computational usability of a simple
dynamic Role-based CAC scheme. They concluded that, even when
considering a minimally dynamic scenario, the CAC scheme is
9https://cloudify.co/
10see https://sites.google.com/view/asiacss2020cryptoac/
likely to produce significant computational overheads. Besides,
many other security and usability goals are often overlooked when
designing a CAC scheme, like scalability, reliability and monetary
costs. Mainly, this is because a concrete deployment for a given
scenario is seldom considered.
Cryptographic Access Control Architectures. There are few works
[11, 18, 29, 36, 39‚Äì41] that presented an architecture for the CAC
scheme they proposed.
In [36], the authors developed a scheme to allow multiple owners
to give access to their data to multiple users, following a mixed
Attribute-Role based CAC scheme. The architecture is composed
of four modules responsible for users‚Äô authentication, AC policy
management and data encryption. The authors discussed scalabil-
ity and performance in read and write operations. However, the
authors did not evaluate other security and usability goals of the
architecture, nor they discussed the way the four modules should be
deployed by the organization or how they should interact with the
CSP. Also, they did not provide alternative designs for the architec-
ture. The set up of many modules may carry considerable overhead,
making the whole scheme unappealing for small companies.
In [41], the authors employ Role-Based Encryption to crypto-
graphically enforce RBAC policies in the cloud. In their architecture,
a CSP stores encrypted data while sensitive metadata are stored
on-premise. Users communicate only with the CSP. In their architec-
ture, the CSP is supposed to run cryptographic operations on behalf
of the users and to communicate with the on-premise domain to
retrieve the needed metadata. However, the authors did not discuss
the feasibility of this communication, nor they analyzed other goals
of the architecture. The authors developed a concrete implementa-
tion of their CAC scheme just for analyzing the performance of the
read and write operations.
In [40], the authors proposed a CAC scheme emphasizing users‚Äô
privacy by enabling anonymous access to resources stored in the
CSP. The authors implemented a prototype interacting with AWS,
providing an interface so that further CSPs can be supported. How-
ever, security and usability goals were not considered. The archi-
tecture is fixed and cannot be modified to accommodate different
scenarios.
In [39], the authors proposed a CAC scheme and implemented
it in a proof-of-concept prototype, named ‚ÄúFADE‚Äù. The architec-
ture comprehends a quorum of key managers deployed on-premise.
Users interact with a FADE client that can be run in the users‚Äô
devices or on-premise. Multiple CSPs can be supported, and per-
formances and monetary costs were analyzed. However, each file
is associated with a single policy, mining the scalability and main-
tainability of the whole AC scheme. The authors also extended
the scheme with a more traditional ABAC model, but no concrete
design is given for such an extension.
Ghita et al. [11] implemented a cryptographic CAC scheme using
ABE. Even though they developed a working prototype, many
aspects were overlooked. For instance, in their CAC scheme it is
not possible to add roles to the AC policy. This is a tight limitation
on the usability of the scheme. The architecture is fixed and forces
the proxy to run in the on-premise domain.
In [29], the authors propose a CAC scheme similar to the one
presented by Garrison et al. [10]. However, revocation is handled
through onion encryption. Each time a permission is revoked, the
CSP adds an encryption layer with a new symmetric cryptographic
key on each affected file. For reading a file, an authorized user
has to decrypt each encryption layer. The administrator can set a
threshold to the number of encryption layers on files, after which
a de-onioning procedure occurs. The authors implemented their
scheme and demonstrated how they obtain only slightly worse
performances with respect to [10] (i.e., 7.2%) while being able to
immediately block access to files by revoked users. Unfortunately,
they did not discuss the monetary costs that their onion mechanism
yields. Moreover, metadata are necessarily stored in the CSP. Unfor-
tunately, the architecture was never taken into account explicitly.
Again, the implementation had the only purpose of measuring the
computational efficiency of the CAC scheme.
In [18], the authors designed and implemented a CAC scheme
based on non-monotonic ciphertext-policy ABE. An administrator
is responsible for creating cryptographic keys from users‚Äô attributes
and each user has a proxy interacting with the CSP. Unfortunately,
the authors used a programming library that not portable to other
platforms. Most importantly, the CAC scheme does not support the
dynamicity of the policy as it was left as future work.
To summarize, even though approaching the problem from dif-
ferent points of view, the focus of these works is mainly proposing
new CAC schemes with novel high-level features. Because of this,
little space is left for additional analysis on security and usability
goals or alternative architectures responsive to the requirements of
a given scenario.
8 CONCLUSION AND FUTURE DIRECTIONS
In this paper, we proposed a methodology to find the most suit-
able architecture of CAC schemes for the requirements of different
scenarios. First, we identified common elements involved in the
architecture of CAC schemes and provided an architectural model
expressing the set ARC of the possible architectures. Then, we
showed how to evaluate different architectures based on security
and usability goals. To find the optimal architecture, we formalized
a MOOP so to leverage well-known techniques for Pareto optimal-
ity. For concreteness, we gave a proof-of-concept application of
how the architectural model and the MOOP can be used to assist
administrators in the deployment of CAC schemes architectures.
We implemented a web dashboard to solve the specific formaliza-
tion of the optimization problem and perform a ‚ÄúWhat-if‚Äù analysis
on the resulting architecture to carefully assess the trade-offs of
the security and usability goals. We used the TOSCA OASIS stan-
dard and the Cloudify framework to automatize the deployment of
the architecture. Finally, we chose a CAC scheme supporting the
architecture and provide a fully working prototype with AWS.
Future Directions. While being an example and not the focus of
this work, the goals we identified may not be enough to express
the requirements of all scenarios. Therefore, we could investigate
further scenarios like eBusiness, eBanking and FinTech. Another
interesting improvement would be extending our tool to support ad-
ditional blueprints associated with more CAC schemes. A security
evaluation of the 81 architectures could be performed along with
the optimization to explicit security assumptions and requirements.
[20] Rakesh Kumar and Rinkaj Goyal. On cloud security requirements, threats, vul-
nerabilities and countermeasures: A survey. Computer Science Review, 33:1‚Äì48,
August 2019.
[21] Thomas Loruenser, Daniel Slamanig, Thomas Langer, and Henrich C. Pohls.
PRISMACLOUD Tools: A Cryptographic Toolbox for Increasing Security in Cloud
Services. In 2016 11th International Conference on Availability, Reliability and
Security (ARES), pages 733‚Äì741, Salzburg, Austria, August 2016. IEEE.
[22] R.T. Marler and J.S. Arora. Survey of multi-objective optimization methods for
engineering. Structural and Multidisciplinary Optimization, 26(6):369‚Äì395, April
2004.
[23] Sascha Muller and Stefan Katzenbeisser. Hiding the policy in cryptographic
access control. In Security and Trust Management, pages 90‚Äì105, 2012.
[24] Rafail Ostrovsky, Amit Sahai, and Brent Waters. Attribute-based encryption
with non-monotonic access structures. In CCS ‚Äô07 Proceedings of the 14th ACM
conference on Computer and communications security, pages 195‚Äì203, 01 2007.
[25] Praveen Kumar P, Syam Kumar P, and Alphonse P.J.A. Attribute based encryption
in cloud computing: A survey, gap analysis, and future directions. Journal of
Network and Computer Applications, 108:37‚Äì52, April 2018.
[26] David W. Pentico. Assignment problems: A golden anniversary survey. European
Journal of Operational Research, 176(2):774‚Äì793, January 2007.
[27] R. Perlman. File System Design with Assured Delete. In Third IEEE International
Security in Storage Workshop (SISW‚Äô05), pages 83‚Äì88, San Francisco, CA, USA,
2005. IEEE.
[28] Uthpala Premarathne, Alsharif Abuadbba, Abdulatif Alabdulatif, Ibrahim Khalil,
Zahir Tari, Albert Zomaya, and Rajkumar Buyya. Hybrid Cryptographic Access
Control for Cloud-Based EHR Systems. IEEE Cloud Computing, 3(4):58‚Äì64, July
2016.
[29] Saiyu Qi and Yuanqing Zheng. Crypt-DAC: Cryptographically Enforced Dy-
namic Access Control in the Cloud. IEEE Transactions on Dependable and Secure
Computing, pages 1‚Äì1, 2019.
[30] Gururaj Ramachandra, Mohsin Iftikhar, and Farrukh Aslam Khan. A Compre-
hensive Survey on Security in Cloud Computing. Procedia Computer Science,
110:465‚Äì472, 2017.
[31] E. Ramirez, J. Brill, M.K. Ohlhausen, J.D. Wright, and T. McSweeny. Data brokers:
A call for transparency and accountability. In Data brokers: A call for transparency
and accountability, pages 1‚Äì101. CreateSpace Independent Publishing Platform,
January 2014.
[32] Fatemeh Rezaeibagha and Yi Mu. Distributed clinical data sharing via dynamic
access-control policy transformation. International Journal of Medical Informatics,
89:25‚Äì31, May 2016.
[33] R. L. Rivest, A. Shamir, and L. Adleman. A method for obtaining digital signatures
and public-key cryptosystems. Commun. ACM, 21(2):120‚Äì126, February 1978.
[34] Pierangela Samarati and Sabrina de Capitani di Vimercati. Access control: Policies,
models, and mechanisms.
In Riccardo Focardi and Roberto Gorrieri, editors,
Foundations of Security Analysis and Design, volume 2171, pages 137‚Äì196. Springer
Berlin Heidelberg, 2000.
[35] Ravi Sandhu. Access control: principle and practice. Advances in Computers,
46:237 ‚Äì 286, 10 1998.
[36] Hiroyuk Sato and Somchart Fugkeaw. Design and Implementation of Collabora-
tive Ciphertext-Policy Attribute-Role based Encryption for Data Access Control
in Cloud. Journal of Information Security Research, 6(3):71‚Äì84, September 2015.
[37] Adi Shamir. How to share a secret. Communications of the ACM, 22(11):612‚Äì613,
November 1979.
[38] Ashish Singh and Kakali Chatterjee. Cloud security issues and challenges: A
survey. Journal of Network and Computer Applications, 79:88‚Äì115, February 2017.
[39] Yang Tang, Patrick P.C. Lee, John C.S. Lui, and Radia Perlman. Secure Overlay
Cloud Storage with Access Control and Assured Deletion. IEEE Transactions on
Dependable and Secure Computing, 9(6):903‚Äì916, November 2012.
[40] Saman Zarandioon, Danfeng Yao, and Vinod Ganapathy. K2c: Cryptographic
Cloud Storage with Lazy Revocation and Anonymous Access. In Muttukrishnan
Rajarajan, Fred Piper, Haining Wang, and George Kesidis, editors, Security and
Privacy in Communication Networks, volume 96, pages 59‚Äì76. Springer Berlin
Heidelberg, Berlin, Heidelberg, 2012.
[41] Lan Zhou, Vijay Varadharajan, and Michael Hitchens. Achieving Secure Role-
Based Access Control on Encrypted Data in Cloud Storage. IEEE Transactions on
Information Forensics and Security, 8(12):1947‚Äì1960, December 2013.
Acknowledgements. Stefano Berlato, Roberto Carbone and Silvio
Ranise were supported in part by the Integrated Framework for
Predictive and Collaborative Security of Financial Infrastructures
(FINSEC) project that received funding from the European Union‚Äôs
Horizon 2020 Research and Innovation Programme under Grant
agreement no. 786727. Adam J. Lee was supported in part by the
National Science Foundation under awards CNS‚Äì1253204 and CNS‚Äì
1704139.
REFERENCES
[1] Assad Abbas and Samee U. Khan. A Review on the State-of-the-Art Privacy-
Preserving Approaches in the e-Health Clouds. IEEE Journal of Biomedical and
Health Informatics, 18(4):1431‚Äì1441, July 2014.
[2] Mikhail J. Atallah, Marina Blanton, Nelly Fazio, and Keith B. Frikken. Dynamic
and efficient key management for access hierarchies. ACM Trans. Inf. Syst. Secur.,
12(3):18:1‚Äì18:43, January 2009.
[3] John Bethencourt, Amit Sahai, and Brent Waters. Ciphertext-policy attribute-
based encryption. In 2007 IEEE Symposium on Security and Privacy (SP ‚Äô07), 05
2007.
[4] Arnar Birgisson, Joe Gibbs Politz, √ölfar Erlingsson, Ankur Taly, Michael Vrable,
and Mark Lentczner. Macaroons: Cookies with contextual caveats for decentral-
ized authorization in the cloud. In , 01 2014.
[5] Ning Cao, Cong Wang, Ming Li, Kui Ren, and Wenjing Lou. Privacy-Preserving
Multi-Keyword Ranked Search over Encrypted Cloud Data. IEEE Transactions on
Parallel and Distributed Systems, 25(1):222‚Äì233, January 2014.
[6] Marios D. Dikaiakos, Dimitrios Katsaros, Pankaj Mehra, George Pallis, and Athena
Vakali. Cloud Computing: Distributed Internet Computing for IT and Scientific
Research. IEEE Internet Computing, 13(5):10‚Äì13, September 2009.
[7] Josep Domingo-Ferrer, Oriol Farr√†s, Jordi Ribes-Gonz√°lez, and David S√°nchez.
Privacy-preserving cloud computing on sensitive data: A survey of methods,
products and challenges. Computer Communications, 140-141:38‚Äì60, May 2019.
[8] Anna Lisa Ferrara, Georg Fachsbauer, Bin Liu, and Bogdan Warinschi. Policy
Privacy in Cryptographic Access Control. In 2015 IEEE 28th Computer Security
Foundations Symposium, pages 46‚Äì60, Verona, July 2015. IEEE.
[9] Sara Foresti, Sushil Jajodia, Stefano Paraboschi, and Pierangela Samarati. En-
cryption policies for regulating access to outsourced data. ACM Transactions on
Database Systems (TODS), 35:12, 04 2010.
[10] William C. Garrison, Adam Shull, Steven Myers, and Adam J. Lee. On the
Practicality of Cryptographically Enforcing Dynamic Access Control Policies in
the Cloud. In 2016 IEEE Symposium on Security and Privacy (SP), pages 819‚Äì838,
San Jose, CA, May 2016. IEEE.
[11] Valentin Ghita, Sergiu Costea, and Nicolae Tapus.
Implementation of cryp-
tographically enforced rbac. The Scientific Bulletin - University Politehnica of
Bucharest, 79(2):9‚Äì3‚Äì102, 2017.
[12] Vipul Goyal, Abhishek Jain, Omkant Pandey, and Amit Sahai. Bounded ciphertext
policy attribute based encryption. In ICALP ‚Äô08 Proceedings of the 35th inter-
national colloquium on Automata, Languages and Programming, Part II, pages
579‚Äì591, 07 2008.
[13] Vipul Goyal, Omkant Pandey, Amit Sahai, and Brent Waters. Attribute-based
encryption for fine-grained access control of encrypted data. In Proceedings of
the ACM Conference on Computer and Communications Security, pages 89‚Äì98, 01
2006.
[14] Horst W. Hamacher, Christian Roed Pedersen, and Stefan Ruzika. Multiple
objective minimum cost flow problems: A review. European Journal of Operational
Research, 176(3):1404‚Äì1422, February 2007.
[15] Felix Horandner, Stephan Krenn, Andrea Migliavacca, Florian Thiemer, and Bernd
Zwattendorfer. CREDENTIAL: A Framework for Privacy-Preserving Cloud-Based
Data Sharing. In 2016 11th International Conference on Availability, Reliability
and Security (ARES), pages 742‚Äì749, Salzburg, Austria, August 2016. IEEE.
[16] Jeremy Horwitz and Ben Lynn. Toward hierarchical identity-based encryption.
In Advances in Cryptology - EUROCRYPT 2002, International Conference on the
Theory and Applications of Cryptographic Techniques, pages 466‚Äì481, 04 2002.
[17] Yashpalsinh Jadeja and Kirit Modi. Cloud computing - concepts, architecture
and challenges. In 2012 International Conference on Computing, Electronics and
Electrical Technologies (ICCEET), pages 877‚Äì880, Nagercoil, Tamil Nadu, India,
March 2012. IEEE.
[18] Julian Jang-Jaccard. A Practical Client Application Based on Attribute Based
Access Control for Untrusted Cloud Storage. In Computer Science & Information
Technology, pages 01‚Äì15. Academy & Industry Research Collaboration Center
(AIRCC), January 2018.
[19] Md. Tanzim Khorshed, A.B.M. Shawkat Ali, and Saleh A. Wasimi. A survey
on gaps, threat remediation challenges and some thoughts for proactive attack
detection in cloud computing. Future Generation Computer Systems, 28(6):833‚Äì851,
June 2012.
A ARCHITECTURES AND GOALS
We report here the complete list (in two tables, Table 4 and 5) of
all architecture arc ‚àà ARC along with the objective functions
ùëîreliability(ùëéùëüùëê), ..., ùëîCSP Savings(ùëéùëüùëê) on the security and usability
goals.
Table 5: Architectures and Goals (2 of 2)
Client
Domain
On-premise
Cloud
y
c
n
a
d
n
u
d
e
R
y
t
i
l
i
b
a
l
a
c
S
y
t
i
l
i
b
a
i
l
e
R
e
c
n
e
i
l
i
s
e
R
S
o
D
n
i
-
k
c
o
L
r