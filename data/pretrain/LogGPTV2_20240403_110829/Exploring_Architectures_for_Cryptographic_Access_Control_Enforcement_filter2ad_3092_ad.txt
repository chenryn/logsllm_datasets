### Value on the Maintenance Goal

The requirement eGR3, which aims to limit CSP-related costs due to budget constraints, can be translated into a soft constraint. This constraint imposes a penalty (e.g., -5) for architectures that have a negative value on the CSP monetary savings goal. For the requirement eGR4, which prioritizes the scalability of services, a weight can be assigned to the scalability and reliability goals. For instance, these values can be weighted twice as much (i.e., \( w_{\text{Scalability}} = 2 \), \( w_{\text{Reliability}} = 2 \)).

### Dashboard Optimization

The dashboard solves the constrained weighted sum optimization problem and displays, in real-time, the three most suitable architectures and their corresponding goal values in the last two blue sections. The most suitable architecture maximizes the use of CSP services, reflecting the priorities of scalability and reliability. Additionally, this architecture enhances the ease of deployment and maintenance.

### What-if Analysis

By adjusting (e.g., increasing) the penalty value on the CSP monetary savings goal, the weighted sum of the three architectures would decrease, potentially making other architectures optimal.

### eHealth Scenario

In the eHealth scenario, the requirement eHR1 (hide metadata to avoid information leaking) adds \(\langle MS, CSP \rangle\) and \(\langle RM, CSP \rangle\) to the pre-filters set. As mentioned in Section 4.1, metadata can be encrypted and turned into non-sensitive metadata, but this incurs additional overhead on the CAC scheme. This allows the MS to remain in the CSP domain. However, the RM still needs to access plain-text metadata, so it cannot stay in the CSP domain. The priority on the redundancy goal in eHR2 (prioritize redundancy to avoid medical data loss) translates into a weight applied to the value of that goal. For example, the redundancy value can be weighted twice as much (i.e., \( w_{\text{Redundancy}} = 2 \)). Finally, eHR3 (limit the vendor lock-in effect) can be seen as a hard constraint, imposing a non-negative value on the vendor lock-in goal.

### Architecture Modeling with Cloudify

Once the most suitable CAC scheme architecture for the eGovernment scenario is identified, we need a CSP-independent modeling approach. We use the TOSCA OASIS standard for a flexible and portable representation of the architecture. TOSCA, a YAML-based modeling language, addresses the lack of a standardized view on cloud services (e.g., storage, cloud functions). It aims to facilitate the migration of cloud applications across different CSPs without significant cost or time investment.

For the actual modeling, we choose Cloudify, an open-source cloud orchestration framework based on TOSCA. Cloudify supports major CSPs (e.g., Azure, AWS, Google, OpenStack) and allows for the graphical modeling of cloud applications by creating and configuring cloud services like servers and network appliances. The graphical model, called a "blueprint," consists of nodes representing cloud services (e.g., security groups, cloud functions) and relationships (e.g., a database hosted by a server). Given a blueprint, Cloudify automatically deploys and orchestrates the cloud application.

We manually develop the blueprint templates for the most suitable CAC scheme architecture of the eGovernment scenario and provide them in Appendix B. Specifically, we model an AWS relational database service (i.e., MS), a Lambda cloud function (i.e., RM), and the S3 storage service (i.e., DS). The proxy is not part of the blueprint, as it is expected to be installed on users' computers.

### CAC Scheme Implementation

As the final step, we provide a fully working implementation of the CAC scheme proposed in [10], chosen because it supports the eGovernment scenario's architecture. As explained in Section 2.2, the CAC scheme in [10] uses hybrid encryption, with RSA for asymmetric encryption and AES for symmetric encryption. The proxy is implemented as a Java program to be installed on each user's computer, where the user's secret key is generated and stored. We use the AWS Java library to interface with AWS services and implement the Lambda cloud function code (i.e., RM).

We test our implementation with several simulated sequences of operations, including the creation of users and roles, assignment and revocation of permissions, and the creation, update, and management of files. We also developed a graphical user interface based on web technologies. The implementation and related resources are made open-source.

### Related Work

#### Cryptographic Access Control

CAC has been applied in various scenarios, such as local filesystems and the cloud. Goyal et al. [13] developed a CAC scheme based on ABE, allowing users to delegate but not revoke permissions, making it unsuitable for dynamic scenarios. In [23], the authors proposed a similar scheme while avoiding the disclosure of the AC policy, but did not address run-time modifications. In [2], the authors considered permission revocation but did not discuss the computational burden. Garrison et al. [10] studied the computational usability of a simple dynamic Role-based CAC scheme and concluded that even minimal dynamic scenarios produce significant computational overheads. Many other security and usability goals, such as scalability, reliability, and monetary costs, are often overlooked.

#### Cryptographic Access Control Architectures

Several works have presented architectures for their proposed CAC schemes. For example, in [36], the authors developed a scheme for multiple owners to give access to their data to multiple users, following a mixed Attribute-Role based CAC scheme. The architecture includes four modules for user authentication, AC policy management, and data encryption. While they discussed scalability and performance, they did not evaluate other security and usability goals or provide alternative designs. Other works, such as [41] and [40], focused on specific features like role-based encryption and anonymous access, but did not consider broader goals or practical deployment issues.

### Conclusion and Future Directions

In this paper, we proposed a methodology to find the most suitable architecture for CAC schemes in different scenarios. We identified common elements in CAC scheme architectures and provided an architectural model. We then evaluated different architectures based on security and usability goals, formalized a multi-objective optimization problem (MOOP) to leverage Pareto optimality, and implemented a web dashboard for solving the optimization problem and performing "What-if" analysis. We used the TOSCA OASIS standard and Cloudify to automate the deployment and provided a fully working prototype with AWS.

Future directions include investigating further scenarios like eBusiness, eBanking, and FinTech, extending the tool to support additional blueprints, and performing a security evaluation of the 81 architectures along with the optimization.

### References

[References listed here, formatted according to the appropriate academic style.]

### Appendices

#### Architectures and Goals

We provide the complete list of all architectures \( \text{arc} \in \text{ARC} \) along with the objective functions \( g_{\text{reliability}}(\text{arc}), \ldots, g_{\text{CSP Savings}}(\text{arc}) \) on the security and usability goals in Tables 4 and 5.

**Table 5: Architectures and Goals (2 of 2)**

| Client Domain | On-premise | Cloud |
|---------------|------------|-------|
| y             | c          | n     |
| a             | d          | n     |
| u             | d          | e     |
| R             | y          | t     |
| i             | l          | i     |
| b             | a          | l     |
| a             | c          | S     |
| y             | t          | i     |
| l             | i          | b     |
| a             | i          | l     |
| e             | R          | e     |
| c             | n          | e     |
| n             | i          | l     |
| i             | s          | e     |
| R             | S          | o     |
| D             | n          | i     |
| n             | k          | c     |
| c             | o          | L     |
| r             |            |       |

This table provides a detailed breakdown of the architectures and their corresponding goal values.