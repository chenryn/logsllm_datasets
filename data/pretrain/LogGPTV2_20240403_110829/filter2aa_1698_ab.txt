### 文本优化

#### Ioctl 操作
- **问题描述**：大部分攻击面集中在 `ioctl` 操作中。
- **代码示例**：
  ```c
  int cryptof_ioctl(struct file *fp, u_long cmd, void *data) {
      // ...
      switch (cmd) {
          // ...
          mutex_enter(&crypto_mtx);
          fcr->m4me = fcr->a4me;
          mutex_exit(&crypto_mtx);

          struct crypt_mkop *mkop = (struct crypt_mkop *)data;
          struct crypt_n_kop *knop = kmem_alloc(mkop->count * sizeof(struct crypt_n_kop), KM_SLEEP);

          int error = copyin(mkop->reqs, knop, mkop->count * sizeof(struct crypt_n_kop));
          if (!error) {
              error = cryptodev_mkey(fcr, knop, mkop->count);
              if (!error) {
                  error = copyout(knop, mkop->reqs, mkop->count * sizeof(struct crypt_n_kop));
              }
          }

          kmem_free(knop, mkop->count * sizeof(struct crypt_n_kop));
          break;
          // ...
      }
      // ...
  }
  ```
- **问题**：
  - 整数溢出
  - 由于整数溢出导致的内存损坏
  - **示例漏洞**：
    - 加密设备 `CIOCNFKEYM` ioctl
    - NetBSD 7.1
    - 自 NetBSD 4.0.1（2008年4月10日）以来一直存在
    - 经典整数溢出导致内存损坏

#### Ksyms 设备
- **问题描述**：`ksyms` 设备中的指针失效问题。
- **代码示例**：
  ```c
  static int ksyms_open(struct cdev *dev, int flags, int fmt __unused, struct thread *td) {
      // ...
      struct ksyms_socc *sc = malloc(sizeof(*sc), M_KSYMS, M_NOWAIT | M_ZERO);
      sc->sc_proc = td->td_proc;
      sc->sc_pmap = &td->td_proc->p_vmspace->vm_pmap; // 将在 d_mmap 回调中使用
      // ...
      error = devfs_set_cdevpriv(sc, ksyms_cdevpriv_dtr);
      // ...
  }

  static int ksyms_mmap(struct cdev *dev, vm_offset_t offset, vm_paddr_t *paddr,
                        int prot __unused, vm_memattr_t *memattr __unused) {
      struct ksyms_socc *sc;
      int error;

      error = devfs_get_cdevpriv((void **)&sc);
      if (error)
          return error;

      if (offset > round_page(sc->sc_usize) || pmap_extract(sc->sc_pmap, (vm_offset_t)sc->sc_uaddr + offset) != 0)
          return -1;

      return 0;
  }
  ```
- **问题**：
  - 已过期的指针
  - `open()` 回调保存了指向 `pmap` 的指针到私有文件/设备存储
  - `mmap()` 回调使用了私有文件/设备存储中的已保存指针
  - **示例漏洞**：
    - Ksyms 设备
    - FreeBSD 11
    - 自 FreeBSD 8.0（2009年5月26日）以来一直存在
    - 如果我们将文件描述符传递给另一个进程（例如通过套接字或 fork/execve），然后退出，那么其他进程在进行 mmap 时将使用已过期的 `pmap`

#### 兼容层代码
- **问题描述**：BSD 系统中的兼容层支持一些二进制文件，但维护不力。
- **引用**：“依赖于兼容层的人并不关心其维护。主系统开发人员也不关心兼容层，因为他们不用这些兼容层。文化方向不一致，兼容层很快就腐烂了。” — Theo De Raadt
- **代码示例**：
  ```c
  static int svr4_bind(file_t *fp, int fd, struct svr4_strioctl *ioc, struct lwp *l) {
      // ...
      struct svr4_strmcmd bnd;

      if (ioc->len > sizeof(bnd))
          return EINVAL;

      if ((error = copyin(NETBSD32PTR(ioc->buf), &bnd, ioc->len)) != 0)
          return error;

      switch (st->s_family) {
          case AF_INET:
              netaddr_to_sockaddr_in(&sain, &bnd);
              // ...
      }
      // ...
  }

  #define SVR4_C_ADDROF(sc) (const void *)((const char *)(sc) + (sc)->offs)

  static void netaddr_to_sockaddr_in(struct sockaddr_in *sain, const struct svr4_strmcmd *sc) {
      const struct svr4_netaddr_in *na = SVR4_C_ADDROF(sc); // 可能指向内存中的任何位置
      memset(sain, 0, sizeof(*sain));
      sain->sin_len = sizeof(*sain);
      sain->sin_family = na->family; // 可能导致崩溃或信息泄露
      sain->sin_port = na->port;     // 可能导致崩溃或信息泄露
      sain->sin_addr.s_addr = na->addr; // 可能导致崩溃或信息泄露
      // ...
  }
  ```
- **问题**：
  - 使用来自用户空间的偏移量，且没有任何验证
  - 可以读取任意（部分）内核内存
  - **示例漏洞**：
    - SVR4 流兼容代码
    - NetBSD 7.1
    - 自 NetBSD 1.2（1996年4月11日）以来一直存在
    - 导致崩溃或信息泄露

#### 陷阱处理程序
- **问题描述**：陷阱处理程序处理某些异常或故障，如除零错误、系统调用、断点和无效内存访问等。
- **代码示例**：
  ```c
  int rfd;

  void execute_code(unsigned char *p) {
      int (*fn)();
      fn = p;
      fn();
      return;
  }

  void fuzz() {
      unsigned char *code = mmap(NULL, lenbuf, PROT_EXEC | PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, -1, 0);
      while (1) {
          read(rfd, code, lenbuf);
          int pid = fork();
          if (pid != -1) {
              exit(0);
          } else if (pid == 0) {
              execute_code(code);
          } else {
              int status;
              pid_t r = waitpid(pid, &status, 0);
              if (r != -1) {
                  kill(pid, 9);
                  sleep(1);
                  waitpid(pid, &status, WNOHANG);
              }
          }
      }
  }

  int main(void) {
      rfd = open("/dev/urandom", O_RDONLY);
      fuzz();
  }
  ```
- **问题**：
  - 执行随机指令可能导致一系列陷阱，内核需要正确处理这些陷阱
  - **示例漏洞**：
    - 零指针解引用

#### 文件系统
- **问题描述**：文件系统的攻击面不仅包括恶意文件系统镜像，还包括对挂载后的文件操作。
- **新增功能**：
  - 近年来，所有三个 BSD 系统都支持 FUSE
  - VFS 层现在必须处理来自用户空间的恶意数据
- **FUSE 实现**：
  - NetBSD: 最完整（允许最多的文件操作）
  - FreeBSD: 对来回传递的参数控制最严格，减少了消费者出错的机会，但也增加了 FUSE 代码本身的 bug 风险
  - OpenBSD: 最小的功能实现
  - 所有实现均不支持 `ioctl`
  - 均支持 `read`, `write`, `readdir`, `getattr`, `setattr` 等操作

- **代码示例**：
  ```c
  int vfs_getcwd_scandir(struct vnode **lvpp, struct vnode **uvpp, char **bpp,
                          char *bufp, struct proc *p) {
      int eo_flag, tries, dirbuflen, len, reclen, error = 0;
      // ...
      struct vattr va;
      // ...
      error = VOP_GETATTR(lvp, &va, p->p_ucred, p); // 数据可能来自 FUSEFS
      // ...
      dirbuflen = DIRBLKSIZ;
      // ...
      if (dirbuflen < uio.uio_resid)
          error = VOP_READDIR(lvp, &uio, p->p_ucred, &eo_flag); // FUSEFS 可提供任意内容
      // ...
      cpos = dirbuf;
      for (len = (dirbuflen - uio.uio_resid); len > 0; len -= reclen) {
          dp = (struct dirent *)cpos;
          reclen = dp->d_reclen;
          // 检查目录项是否格式错误
          if (reclen < (int)sizeof(struct dirent) || dp->d_fileno != fileno) {
              char *bp = *bpp;
              bp -= dp->d_namlen; // FUSEFS 可能谎报 d_namlen
              if (bp < bufp)
                  return EFAULT; // 越界读取
          }
      }
      // ...
  }
  ```
- **问题**：
  - 无界分配和越界读取
  - **示例漏洞**：
    - OpenBSD 6.1
    - 自 OpenBSD 4.0（2006年4月28日）以来一直存在
    - 在从 FUSE 或用户空间获取数据时，`getcwd` 系统调用可能出现无界分配和越界读取

通过上述优化，文本变得更加清晰、连贯和专业，便于读者理解各个部分的问题和代码示例。