•  …!
•  Ioctl!is!where!most!of!the!aJack!surface!is!!!
int!
cryptof_ioctl(struct!ﬁle!*fp,!u_long!cmd,!void!*data)!
{!
...!
!switch!(cmd)!{!
...!
!
!mutex_enter(&crypto_mtx);!
!
!fcr->m4me!=!fcr->a4me;!
!
!mutex_exit(&crypto_mtx);!
!
!mkop!=!(struct!crypt_mkop!*)data;!
!
!knop!=!kmem_alloc((mkop->count!*!sizeof(struct!crypt_n_kop)),!!
!
!!!!!KM_SLEEP);!
!
!error!=!copyin(mkop->reqs,!knop,!
!
!!!!!(mkop->count!*!sizeof(struct!crypt_n_kop)));!
!
!if!(!error)!{!
!
!
!error!=!cryptodev_mkey(fcr,!knop,!mkop->count);!!
!
!
!if!(!error)!
!
!
!
!error!=!copyout(knop,!mkop->reqs,!
!
!
!
!!!!!(mkop->count!*!sizeof(struct!crypt_n_kop)));!
!
!}!
!
!kmem_free(knop,!(mkop->count!*!sizeof(struct!crypt_n_kop)));!
!
!break;!
...!
}!
Integer!overﬂow!
Memory!corrup4on!
due!to!int!overﬂow!
Sample bug;
•  Crypto!device!CIOCNFKEYM!ioctl!!
•  NetBSD!7.1!!
•  Been!there!since!NetBSD!4.0.1?!Thu$Apr$10$22:48:42$2008$!
•  Classic!integer!overﬂow!à!memory!corrup4on!!
sta4c!int!
ksyms_open(struct!cdev!*dev,!int!ﬂags,!int!fmt!__unused,!struct!thread!*td)!
{!
...!
!struct!ksyms_soÇc!*sc;
!!
...!
!sc!=!(struct!ksyms_soÇc!*)!malloc(sizeof!(*sc),!M_KSYMS,!!
!!!!!M_NOWAIT|M_ZERO);!
...!
!sc->sc_proc!=!td->td_proc;!
!sc->sc_pmap!=!&td->td_proc->p_vmspace->vm_pmap;!ß!will!be!used!in!d_mmap!callback.!!
...!
!error!=!devfs_set_cdevpriv(sc,!ksyms_cdevpriv_dtr);!
…!
}!
sta4c!int!
ksyms_mmap(struct!cdev!*dev,!vm_ooﬀset_t!oﬀset,!vm_paddr_t!*paddr,!
!
!int!prot!__unused,!vm_memaJr_t!*memaJr!__unused)!
{!
!!!!
!struct!ksyms_soÇc!*sc;!
!int!error;!
!
!error!=!devfs_get_cdevpriv((void!**)&sc);!
!if!(error)!
!
!return!(error);!
!
!/*!
!!*!XXX!mmap()!will!actually!map!the!symbol!table!into!the!process!
!!*!address!space!again.!
!!*/!
!if!(oﬀset!>!round_page(sc->sc_usize)!||!!
!!!!!(*paddr!=!pmap_extract(sc->sc_pmap,!!!ß!can!be!expired!pointer!!
!!!!!(vm_oﬀset_t)sc->sc_uaddr!+!oﬀset))!==!0)!!
!
!return!(-1);!
!
!return!(0);!
}!
Sample bug 2;
•  Ksyms!device!!
•  FreeBSD!11!
•  Been!there!since!FreeBSD!8.0!Tue$May$26$21:39:09$2009!
•  Expired!pointer!!
•  open()!callback!saves!pointer!to!pmap!to!private!fd/device!storage!!
•  mmap()!callback!uses!saved!pointer!in!private!fd/device!storage!!
•  So!how!is!this!a!problem!?!!
•  What!if!we!hand!fd!oﬀ!to!another!process!(e.g.!send!over!socket!or!fork/execve)!
•  And!then!we!exit!
•  If!other!process!now!does!mmap,!it!will!be!using!an!expired!pmap!!!!
Compat code ;
AFack surface entrypoint;
•  The!BSDs!have!binary!compa4bility![compat]!support!for!some!binaries:!!
•  Older!versions!of!the!OS!!
•  32bit!versions!of!a!program!(on!a!64bit!version!of!the!OS)!!
•  Other!opera4ng!system!(e.g.!Linux)!!
•  Has!to!emulate!a!bunch!of!stuﬀ!(e.g.!syscalls)!!
“The people who rely on the compat layers don't 
care enough to maintain it. The people who work 
on the mainline system don't care about the compat 
layers because they don't use them. The cultures 
aren't aligned in the same direction. Compat layers 
rot very quickly.” – Theo De Raadt 
sta4c!int!
4_bind(ﬁle_t!*fp,!int!fd,!struct!svr4_strioctl!*ioc,!struct!lwp!*l)!
{!
...!
!struct!svr4_strmcmd!bnd;!
...!
!if!(ioc->len!>!sizeof(bnd))!
!
!return!EINVAL;!
!
!if!((error!=!copyin(NETBSD32PTR(ioc->buf),!&bnd,!ioc->len))!!=!0)!
!
!return!error;!
...!
!switch!(st->s_family)!{!
!case!AF_INET:!
...!
!
!netaddr_to_sockaddr_in(&sain,!&bnd);!
...!
!}!
...!
}!
#deﬁne!SVR4_C_ADDROF(sc)!(const!void!*)!(((const!char!*)!(sc))!+!(sc)->oﬀs)!!
...!
sta4c!void!netaddr_to_sockaddr_in!
!(struct!sockaddr_in!*sain,!const!struct!svr4_strmcmd!*sc)!
{!
!const!struct!svr4_netaddr_in!*na;!
!
!na!=!SVR4_C_ADDROF(sc);!ß!could!point!to!anywhere!in!memory!!
!memset(sain,!0,!sizeof(*sain));!
!sain->sin_len!=!sizeof(*sain);!
!sain->sin_family!=!na->family;!ß!crash!or!info!leak!
!sain->sin_port!=!na->port;!ß!crash!or!info!leak!
!sain->sin_addr.s_addr!=!na->addr;!ß!crash!or!info!leak!
…!
}!
/*!
!*!Pretend!that!we!have!streams...!
!*!Yes,!this!is!gross.!
...!
!*/!
Sample bug;
•  SVR!4!streams!compat!code!
•  NetBSD!7.1!!
•  Been!there!since!NetBSD!1.2!Thu$Apr$11$12:49:13$1996!
•  Uses!oﬀset!that!comes!from!userland!!
•  Without!any!valida4on!!
•  Can!read!arbitrary(-ish)!kernel!memory!!
•  Panic!!
•  Info!leak!
Trap handlers ;
AFack surface entrypoint;
•  Trap!handlers!handle!some!kind!of!excep4on!or!fault!!
•  Div!by!zero!!
•  Syscall!!
•  Breakpoint!
•  Invalid!memory!access!!
•  …!
•  Some!can!be!triggered!by!userland,!and!the!kernel!has!to!handle!them!correctly!!
•  due!to!their!nature,!they!are!ugly!and!highly!architecture!speciﬁc!
Fuzz it! ;
•  what!would!happen!if!you!simply!executed!a!bunch!of!random!bytes!as!
instruc4ons?!!
•  Surely!a!bunch!of!traps!will!get!generated,!and!the!kernel!would!have!to!handle!
them!!
int!rfd;!
!
void!execute_code(unsigned!char!*p)!{!
!!!!int!(*fn)();!
!!!!fn!=!p;!
!!!!fn();!
!!!!return;!
}!
!
void!fuzz()!{!
!!!!unsigned!char!*code!=!mmap(NULL,!lenbuf,!PROT_EXEC!|!PROT_READ!|!PROT_WRITE,!MAP_PRIVATE!|!MAP_ANONYMOUS,!-1,!0);!
!!!!while(1)!{!
!!!
!!read(rfd,!code,!lenbuf);!
!!!
!!int!pid!=!fork();!
!!!
!!if!(pid!==!-1)!{!
!!!
!
!!exit(0);!
!!!
!!}!else!if!(pid!==!0)!{!
!!!
!
!!execute_code(code);!
!!!
!!}!else!{!
!!!
!
!!int!status;!
!!!
!
!!pid_t!r;!
!!!
!
!!r!=!waitpid(pid,!&status,!0);!
!!!
!
!!if!(r!==!-1)!{!
!!!
!
!
!!kill(pid,!9);!
!!!
!
!
!!sleep(1);!
!!!
!
!
!!waitpid(pid,!&status,!WNOHANG);!
!!!
!
!!}!
!!!
!!}!
!
!!!!}!
}!
!
int!main(void)!{!
!!!!rfd!=!open("/dev/urandom",!O_RDONLY);!
!!!!fuzz();!
}!
demo!;
Hit xen trap;
•  NULL!deref!!
File systems ;
AFack surface entrypoint;
•  Filesystem!aJack!surface!seems!easy!enough.!!
•  Malicious!fs!image!that!gets!mounted!!
•  Also!do!ﬁle!opera4ons!on!them!once!mounted!!
•  Is!certainly!aJack!surface!!
•  However,!there!is!more!!
!
•  In!recent!years!all!3!BSDs!support!fuse!!
•  VFS!layer!now!has!to!deal!with!malicious!data!that!comes!from!userland!
•  Before!it!always!came!from!a!trusted!ﬁle!system!driver!
AFack surface entrypoint [fuse];
•  FBSD/OBSD/NBSD!all!have!diﬀerent!fuse!implementa4ons!(no!shared!code!whatsoever)!!
•  NBSD:!most!complete!(allows!for!the!most!ﬁle!opera4ons)!!
•  FBSD:!most!controlled!arguments!passed!back!and!forth!!(getaJr,!readdir)!less!opportunity!for!
consumers!to!make!mistakes,!but!more!parsing/processing!in!fusefs!itself,!more!poten4al!for!bugs!in!
fuse!code!itself!
•  OBSD:!minimal!func4onal!implementa4on!(compared!to!the!previous!two)!!
•  none!implement!ioctl!!
•  all!do:!!
•  read!
•  write!!
•  readdir!!
•  getaJr!
•  setaJr!
•  ...!
int!
vfs_getcwd_scandir(struct!vnode!**lvpp,!struct!vnode!**uvpp,!char!**bpp,!
!!!!char!*bufp,!struct!proc!*p)!
{!
!int!eoﬄag,!tries,!dirbuﬂen,!len,!reclen,!error!=!0;!
...!
!struct!vaJr!va;!
...!
!
!error!=!VOP_GETATTR(lvp,!&va,!p->p_ucred,!p);!ß!data!can!come!from!fusefs!!
...!
!dirbuﬂen!=!DIRBLKSIZ;!
!
!if!(dirbuﬂen!p_ucred,!&eoﬄag);!ß!fusefs!can!provide!arbitrary!content!!
...!
cpos!=!dirbuf;!
...!
for!(len!=!(dirbuﬂen!-!uio.uio_resid);!len!>!0;!
!!!!!len!-=!reclen)!{!
!dp!=!(struct!dirent!*)cpos;!
!reclen!=!dp->d_reclen;!
!
!/*!Check!for!malformed!directory!*/!
!if!(reclen!d_ﬁleno!==!ﬁleno)!{!
!
!char!*bp!=!*bpp;!
!
!bp!-=!dp->d_namlen;!ß!fusefs!can!lie!about!d_namlen!
!
!
!if!(bp!d_name,!dp->d_namlen);!ß!out!of!bound!read.!!
Sample bug;
•  Unbound!malloc!and!out!of!bound!read!(could!panic!or!info!leak)!!
•  OpenBSD!6.1!!
•  Been!there!since!OpenBSD!4.0!Fri$Apr$28$08:34:31$2006$!
•  getcwd!syscall!when!taking!data!from!fuse!/!userland!!