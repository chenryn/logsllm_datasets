as on a secret key k. Subsequently, the client can authenticate by
computing HMAC(k,(t − t0)/I), where t is the time of authentication.
As with HOTP, the TOTP scheme is vulnerable to a server-side
attack.
3 OUR CONSTRUCTION
T/Key combines the ideas used in S/Key and TOTP to achieve the
best properties of both schemes: T/Key stores no secrets on the
server and ensures that passwords are only valid for a short time
interval. The scheme works as follows:
Public Parameters. The scheme’s parameters are the password
length n (in bits), a time slot size I (in seconds), representing the
amount of time each password is valid for, and the maximal sup-
ported authentication period k (measured as the number of slots of
size I). Furthermore, our scheme uses some public cryptographic
hash function H : {0, 1}m → {0, 1}m for an arbitrary m ≥ n + s + c,
where s is the number of bits used for the salt and c is the number
of bits needed to represent the time. Typical values are given in
Table 2.
Table 2: Scheme public parameters and their typical values.
Parameter
n
s
c
m
k
I
Salt length
Description
Value
130 bits One-time password length
80 bits
32 bits Number of bits used for time
256 bits Hash function block size
2 × 106 Chain length
30 sec
Time slot length
Setup. The client chooses and stores a uniformly random secret
key sk ∈ {0, 1}n, as well as a random salt id ∈ {0, 1}s, and notes
the setup time tinit (measured in slots of length I). The public hash
function H together with the initialization time tinit induce the
k independent hash functions h1, . . . , hk : {0, 1}n → {0, 1}n as
follows: for 1 ≤ i ≤ k define
hi(x) = H(cid:0)⟨tinit + k − i⟩c
(cid:13)(cid:13) id(cid:13)(cid:13) x(cid:1)(cid:12)(cid:12)(cid:12)n
where for a numerical value t, ⟨t⟩c denotes the c-bit binary repre-
sentation of t, and for strings x, y ∈ {0, 1}∗, we write x|n and x∥y
to denote the n-bit prefix of x and the concatenation of x and y,
,
?
−
=
2
h
k
◦ ··· ◦
2
h
p
hk
pinit
p1
hk−1
p2
hk−2
· · ·
h2
pk−1
h1
pk
head
tinit
pprev
tprev
I seconds
tmax − 1
tmax
Figure 2: A basic overview of T/Key. A user has submitted the password p at time tmax − 1. Since the previous login occurred
at time tprev = tinit + 2, the server has stored pprev = p2 as the previous password. To authenticate the user, the server computes
hk−2(. . . (h2(p)) . . .) and checks if it is equal to pprev.
respectively. This simple method of obtaining independent hash
functions from a single hash function over a larger domain is called
domain separation, and it is often attributed to Leighton and Mi-
cali [39]. Note that since all inputs to the hash function are of equal
size, this construction is not susceptible to length extension attacks,
and therefore, there is no need to use HMAC.
The client then computes
pinit = hk(hk−1(. . . (h1(sk)) . . .))
and sends it to the server together with id. The server stores pinit
as pprev as well as the time tinit as tprev (we discuss time synchro-
nization issues below).
Authentication. To authenticate at a later time t ∈ (tinit, tmax]
(measured in units of length I where tmax = tinit + k), the client and
server proceed as follows: the client uses sk and t to generate the
one-time password
pt = htmax−t(htmax−t−1(. . . (h1(sk)) . . .)).
Alternatively, when t = tmax, we use pt = sk. To check a password
p, the server uses the stored values, tprev and pprev, and the current
time-based counter value t > tprev. The server computes
′
prev = htmax−tprev(htmax−tprev−1(. . . (htmax−t +1(p)) . . .)).
p
If p′
prev = pprev, then authentication is successful, and the server
updates pprev to p and tprev to t. Otherwise, the server rejects the
password.
Reinitialization. Just as in authentication, initialization requires
communication only from the client device to the server, and the
server does not need to send anything to the client. The only dif-
ference is that during initialization, the client needs to supply the
server with the salt in addition to the initial password. The finite
length of the hash chain requires periodic reinitialization, and the
length of this period trades off with the time step length I and the
4
time it takes to perform the initialization (which is dominated by
the full traversal of the hash chain by the client). For standard use
cases, one can set I = 30 seconds and k = 2 × 106, which results
in a hash chain valid for 2 years and takes less than 15 seconds to
initialize on a modern phone.
Since key rotation is generally recommended for security pur-
poses (NIST, for example, recommends “cryptoperiods” of 1-2 years
for private authentication keys [3]), we don’t view periodic reinitial-
ization as a major limitation of our scheme. While reinitialization
is obviously somewhat cumbersome, there are several properties of
our scheme that mitigate the inconvenience. First, the fact that our
setup is unidirectional makes it very similar to authentication from
the user’s point of view. Second, from a security standpoint, the
setup is not vulnerable to passive eavesdrop attacks, unlike TOTP
schemes that rely on shared secrets.
A scenario where the hash chain expires before the user is able
to reinitialize it with the server can be handled out-of-band in a
manner similar to password recovery or loss of the second-factor.
Alternatively, some implementations could choose to accept the
head of the chain even after its validity period, which would incur
a loss in security proportional to the time elapsed since expiration.
Clock Synchronization. As with current TOTP schemes, authen-
tication requires a synchronized clock between the server and the
client. Time skew, or simply natural delay between the moment of
password generation and the moment of verification, might result
in authentication failure. To prevent this, the server may allow the
provided password to be validated against several previous time
steps (relative to the server’s clock), as was the case in the TOTP
scheme. When this occurs, the previous authentication timestamp
tprev stored on the server should be updated to the timestamp which
resulted in successful verification.
Figure 2 illustrates the design of T/Key.
4 SECURITY
Although our scheme bears a resemblance to both S/Key and TOTP,
it has several essential differences that eliminate security issues
present in those schemes.
First and foremost, T/Key does not require the server to store any
secrets, which mitigates the risk of an attack that compromises the
server’s database, unlike TOTP, which requires the client’s secret
key to be stored by the server.
Second, T/Key’s passwords are time limited, unlike those in
S/Key, which makes phishing attacks more difficult because the
attacker has a limited time window in which to use the stolen pass-
word. However, the fact that T/Key’s passwords are time limited
makes it necessary for the hash chain used by T/Key to be sig-
nificantly longer than those in S/Key, since its length must now
be proportional to the total time of operation rather than to the
supported number of authentications. This modification raises the
issue of the dependence of security on the length of the hash chain.
Hu, Jakobsson and Perrig [31] discuss the susceptibility of iterat-
ing the same hash function to “birthday" attacks and Håstad and
Näslund [28] show that if the same hash function h is used in every
step of the chain, then inverting the k-th iterate is actually k times
easier than inverting a single instance of the hash function. We
reproduce their proof here for completeness and clarity.
We set N = 2n and denote by ℱN the uniform distribution over
the set of all functions from[N] to[N]. For a function h : [N] → [N],
we let h(k) denote h composed with itself k times. For functions
h1, h2, . . . , hk and 1 ≤ i ≤ j ≤ k, we let h[i, j] denote the composi-
tion hj ◦ hj−1 ◦ · · · ◦ hi. When writing Ah, we mean that algorithm
A is given oracle access to all k functions h1, . . . , hk.
Theorem 4.1 ([28]). For every N ∈ N, k ≤ √
N and 2k ≤ T ≤
N/k, there exists an algorithm A that makes at most T oracle queries
(k)(x)(cid:105)
to a random function h : [N] → [N] and
(k)(x))(cid:17)
(cid:18)Tk
Ah(h
= Ω
(cid:19)
= h
(cid:16)
(cid:104)
h
.
N
Pr
h∈ℱN
x ∈[N]
Moreover, every algorithm that makes at most T oracle queries suc-
ceeds with probability at most O(Tk/n).
Proof. We prove the first part of the theorem (the existence
of a “good” algorithm) and refer the reader to [28] for the proof
of the second part. Consider the following algorithm: On input
h(k)(x) = y ∈ [N], the algorithm sets x0 = y and then computes
xj = h(xj−1) until either xj = y, in which case it outputs xj−1, or
until xj = xi for some i < j. In the latter case, it picks a new random
xj from the set of all points it hasn’t seen before and continues. If
the algorithm makes T queries to h without finding a preimage, it
aborts.
To analyze the success probability of this algorithm, consider the
first (T − k) points {xj}T−k
j=1 . If any of these points collides with any
of the values along the hash chain {h(i)(x)}k
i =1, the algorithm will
output a preimage of y after at most k additional queries. Therefore,
the probability of failure is at most the probability of not colliding
with the hash chain during the first T − k queries. But as long
as a collision does not happen, each query reply is independent
of all previous replies and of the values {h(i)(x)}k
i =1. Each query
5
therefore collides with the chain with probability at most k/N , and
overall, the algorithm fails with probability at most (1−k/N)T−k ≤
(1 − k/N)T/2 = 1 − Ω (Tk/N).
□
This loss of a multiplicative factor of k in security is undesirable
as it forces us to increase the security parameters for the hash
function to resist long-running adversaries. A standard solution
is to use a different hash function at every step in the chain. The
question then is the following: if H is the composition of k random
hash functions, namely
H(x) := hk(hk−1(· · · (h2(h1(x))) · · · )) ,
how difficult is it to invert H given H(x) for a random x in the
domain? To the best of our knowledge, this aspect of hash chain
security has not been analyzed previously.
In Section 4.1 we prove a time lower bound for inverting a hash
chain composed of independent hash functions. We show that as
opposed to the case in Theorem 4.1, where the same function is
used throughout the chain, resulting in a loss of security by a factor
of O(k), using independent hash function results in a loss of only a
factor of 2. Thus for most practical applications, a hash chain is as
hard to invert as a single hash function. In Section 8, we prove a
time-space lower bound for inverters that can preprocess the hash
function.
4.1 A lower bound for inverting hash chains
Theorem 4.2 (Security of hash chains against online at-
tacks). Let functions h1, . . . , hk ∈ [N] → [N] be chosen indepen-
dently and uniformly at random. Let A be an algorithm that gets
oracle access to each of the functions {hi}k
i =1 and makes at most T
oracle queries overall. Then,
(cid:16)
A(h[1,k](x0))(cid:17)
= h[1,k](x0)(cid:105) ≤ 2T + 3
.
(cid:104)
Pr
h1, ...,hk ∈ℱN
x0∈[N]
hk
N
Proof. Let W = (w0, w1, . . . , wk) be the sequence of values of
the hash chain, i.e., w0 = x0 and wi = hi(wi−1) for i ∈ [1, k]. Let
A be an adversary that makes at most T oracle queries. Denote by
qj = (ij , xj , yj) the j-th query made by A, where ij is the index of
the oracle queried, xj is the input queried, and yj is the oracle’s
response. We say that a query qj collides with W if yj = wij , namely
the reply to the query is a point on the hash chain. At the cost of
one additional query, we modify A to query hk on its output before
returning it. Thus, we can assume that if A successfully find a
preimage, at least one of its T + 1 queries collides with W .
Let R = {(i, x, y) : hi(x) = y} be the set of all random oracle
queries and their answers. Using the principle of deferred decision,
we can construct the set R incrementally as follows. Initially R = ∅;
subsequently whenever A makes an oracle query of the form (i, x),
if x = wi−1, we respond with y = wi and add (i, wi−1, wi) to R. Else
if (i, x, y) ∈ R, we reply with y. Otherwise, we choose y uniformly
at random from [N], add (i, x, y) to R, and reply with y.
As mentioned above, to invert the hash chain, at least one query
qj ∈ R must collide with W . It follows that
Pr
H,x0
[A loses] = Pr
H,x0
yj (cid:44) wij
T +1
(cid:34)
j=1
T +1
j=1
=
Pr
H,x0
yj (cid:44) wij
(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)j−1
ℓ=1
(cid:35)
.
yℓ (cid:44) wiℓ
To bound each term inside the product, we use the basic fact that
Pr(A|C) = Pr(A|B, C) Pr(B|C) + Pr(A|¬B, C) Pr(¬B|C)
≤ Pr(A|B, C) + Pr(¬B|C)
to obtain
Pr
H,x0
yj = wij
(cid:34)
(cid:34)
(cid:34)
≤ Pr
H,x0
+ Pr
H,x0
yj = wij
xj = wij−1
ℓ=1
yℓ (cid:44) wiℓ
(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)j−1
(cid:35)
(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)xj (cid:44) wij−1 ∧ j−1
(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)j−1
(cid:35)
yℓ (cid:44) wiℓ
ℓ=1
.
ℓ=1
(cid:35)
yℓ (cid:44) wiℓ
Notice that the first of the two events in the last sum can only occur
if xj does not appear in R. Otherwise, yj (cid:44) wij due to the fact that
none of the previous queries collided with W . Therefore, the reply
yj is sampled uniformly at random, and this term is at most 1
N .
To bound the second term, note that each previous reply yℓ,
provided that it does not collide with W , rules out at most one