User: 对于一个未被优化的算法，时间复杂度往往不理想。请描述一下时间复杂度的概念，并介绍一些常见的时间复杂度。
Assistant: 时间复杂度是指算法执行所需的时间与问题规模之间的关系。

常见的时间复杂度从低到高依次为：

- O(1)：常数阶，表示算法执行时间不随问题规模增加而增加，执行时间稳定。
- O(log n)：对数阶，表示算法执行时间随问题规模增加而略微增加，执行时间较为稳定。
- O(n)：线性阶，表示算法执行时间随问题规模线性增加，执行时间有一定增长趋势。
- O(n log n)：基于快速排序、归并排序的算法常见的时间复杂度，表示算法执行时间随问题规模增加而增加，且增长速度略快于线性阶。
- O(n^2)：平方阶，表示算法执行时间随问题规模平方增加，执行时间增长速度较快。
- O(2^n)：指数阶，表示算法执行时间随问题规模指数增加，执行时间增长速度非常快，很容易出现问题。
- O(n!)：阶乘阶，表示算法执行时间随问题规模的阶乘增加，执行时间指数级增长，非常低效。

在实际算法设计中，通常会选择复杂度较低的算法，并通过算法优化和数据结构优化等手段进一步提高效率。