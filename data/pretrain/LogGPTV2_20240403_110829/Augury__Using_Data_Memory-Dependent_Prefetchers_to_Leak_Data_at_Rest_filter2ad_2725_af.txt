Breaking ASLR (that is, discovering the virtual addresses of
code and data pages) is a core step in a larger exploit. We show
how the DMP can be used to check whether arbitrary pointers
are valid mapped virtual memory addresses and thus aid in
breaking ASLR. Using the DMP rather than a cache side-
channel removes the need for knowledge of the cache system,
or creating eviction sets, and is significantly less noisy.
We set up an experiment similar to Algorithm 2, with
the third pointer (p3) replaced with the address we wish
to test validity of. Since the DMP requires 3 accesses (see
Section VI-A) that match the AoP pattern to activate, we
can use the DMP’s confidence threshold as a metric for the
validity of p3. Since the test address may not be readable and
reading it would cause a segfault, ensure that all three training
accesses are only speculative, and eventually squashed. Since
Section VI-A showed that the DMP can be activated in these
conditions, the fourth pointer (p4, the target pointer) will be
prefetched if and only if the p3 (the test address) was valid.
Using our experiment code from Algorithm 2 written in C
(and using mach_absolute_time), we can test a virtual
address for validity on average every 24.91 ms with standard
deviation 0.79 ms. This long duration is due to an unoptimized
implementation that uses cache thrashing rather than targeted
eviction sets. The attacker can repeat this per-pointer validity
test to sweep across the address space, trying each virtual
memory page and determining which are mapped. This will,
at the least, reveal the location and size of memory regions
that are mapped for use by the program.
VIII. MITIGATING THE THREAT OF DMPS
Unfortunately, the AoP DMP is already widely deployed on
at least the A14 and M1 family of processors. This DMP, to our
knowledge, cannot be disabled via software updates. Given
that our experiments show the DMP is not present on Icestorm
cores (See Section V-E), the only dependable mitigation is to
execute sensitive software on the Icestorm cores at a significant
performance cost. For sensitive software running on Firestorm
cores, our remaining option is to modify the software to best-
effort avoid DMP-caused data leakage.
A. Removing secrets
If we assume a sandboxed threat model, our most straight
forward solution is similar to the one adopted by most Spectre
defenses: do not keep secret data in the same virtual address
space as the adversary sandbox or user-space program. This is
only applicable to cases where secret data and attacker code
are co-located, and is not relevant to other situations.
Since Spectre vulnerabilities have put all of a process’
virtual memory space at risk of being leaked, we have seen
widescale deployment of policies like Chrome’s Site Isola-
tion [39]. These policies segment untrusted code (like sand-
boxed JavaScript) from sensitive data (such as the rendering
data from another web origin) by placing them into entirely
separate virtual address spaces. Similarly, KPTI/KAISER [24]
removed virtual address mappings for the kernel from user-
space processes. The net effect of these changes was the
removal of valuable targets from the virtual address space
of highly attacker-influenceable code. Thankfully, these par-
titioning efforts have removed most of the obvious sandbox
or userspace to kernel attack surfaces for the M1 DMP.
B. Preventing M1 DMP interaction
For both the sandbox and latent gadget cases, we can use
any features or implementation quirks that cause the DMP to
ignore values or never activate. We consider this as preventing
the DMP from ever accessing and transmitting a secret bit.
In Section VI-B2 we found that the M1’s DMP is unwilling
to prefetch pointers to specific virtual address regions. As the
DMP will skip pointers that are in this address range even after
it begins fetching nearby pointers, we can put all data in this
region and prevent pointers to it from leaking. We caution that
there is no known explanation for why this region exists, and
leveraging it should not be considered a complete mitigation.
We also found that the DMP requires pointers to be aligned
on 8-byte boundaries. If all pointers in the program are non-
8-byte aligned, the prefetcher cannot to prefetch them.
C. Protecting non-pointer values from the M1 DMP
Both of the above approaches assume that the DMP leaks
only pointer values. We believe that this is not a fundamental
limitation of the M1 DMP, and that by observing changes to
the cache caused by page walks and the TLB an adversary may
be able to receive information about a failed (invalid pointer)
prefetch. If this is the case, we must consider any page walk
that varies based on secret bits to be leaking information [23].
One possible defense would be to only store secret data in the
bottom N-bits of every 64-bit aligned chunk, and ensure that
the top N-bits are never a valid virtual address prefix. Any
attempted prefetch of a 64-bit chunk containing secrets would
then fail before the pagewalk encountered secret related bits.
14
D. General DMP mitigations
The only generalized, but
incomplete, mitigation to all
DMPs is to remove secrets from the virtual address spaces
accessible to adversaries, similar to many Spectre mitigations.
Unfortunately there is no guarantee that all DMP implemen-
tations will happen to reach a subset of the memory reachable
by Spectre. As we outlined in Section IV there are many
possible design possibilities like aliasing or cross-PID training
that would reach beyond what a Spectre attack can.
Orthogonal to removal of secrets, we should also consider
cases where a privileged non-malicious program contains
latent DMP gadgets that must be detected and removed. In
our experiments we repeatedly unintentionally activated the
AoP DMP by storing pointers on the stack. With a DMP
this aggressive, it is possible for a program to be accidentally
leaking secret values without any intervention by an adversary.
IX. CONCLUSIONS
Exotic microarchitectural optimizations that leak data never
accessed by the core have arrived in mainstream processors
and are unlikely to disappear any time soon. The M1 has
been rightfully lauded for performance and efficiency, and
the recent M1 Pro and Max continue to drive excitement for
novel microarchitectural approaches. While exceptional now,
we expect that this AoP DMP is only the first of many DMPs
to be deployed across all architectures and manufacturers.
Here, we’ve demonstrated that, while difficult to wield, the
M1’s DMP is capable of being abused by an adversary. It
can read and transmit some types of memory values outside
of sandboxes or test the validity of pointers controlled by an
attacker. This is despite a single-level pointer-chasing DMP
being nearly the worst-case DMP for an attacker, leaking only
pointers and only under restricted situations. Thankfully, many
particularly worrying scenarios like JavaScript sandboxes al-
ready assume that an adversary can leak any value in the
virtual address space. These systems are unlikely to have
significant security impacts from the M1 DMP. However, given
the ease with which the DMP can be activated, it is likely that
existing programs and kernels contain latent DMP gadgets that
can be leveraged to leak data in their own address spaces.
As with timing attacks, Spectre attacks, and others, we
emphasize the need for compiler and program transformation
tools to adapt to mitigate data at rest leakage. The M1 DMP
is an opportunity to prepare our defensive software techniques
for the next generation of microarchitectural attacks.
X. ACKNOWLEDGMENTS
We thank our anonymous reviewers for their valuable feed-
back to this paper. We thank Andrei Frumusanu for their
exceptionally insightful remark “[...] we might believe they’re
using some sort of pointer-chase prefetching mechanism.”[22].
We thank Dean Tullsen for seeding this idea. This work was
funded partially by NSF grants 1954521 and 1942888, as well
as by an Intel RARE grant.
REFERENCES
[1] Energy Efficiency Guide for Mac Apps: Prioritize Work at
https://developer.apple.com/library/archive/
the Task Level.
documentation/Performance/Conceptual/power efficiency gui
delines osx/PrioritizeWorkAtTheTaskLevel.html.
[2] Intel x86 64 and ia32 developers manual. https://software.intel
.com/en-us/articles/intel-sdm.
[3] Mach absolute timer. https://developer.apple.com/documentatio
n/kernel/1462446-mach absolute time.
[4] Software optimization guide for amd epyc 7003 processors. ht
tps://www.amd.com/system/files/TechDocs/56665.zip.
[5] Spectre attack example. https://github.com/Eugnis/spectre-attac
k.
[6] Spectre V1 defense in GCC. https://lwn.net/Articles/759423/.
[7] Speculative load hardening. https://llvm.org/docs/SpeculativeL
oadHardening.html.
[8] Onur Aciicmez, Jean-Pierre Seifert, and Cetin Kaya Koc. Pre-
dicting secret keys via branch prediction. IACR, 2006.
[9] Sam Ainsworth and Timothy M. Jones. Graph prefetching using
data structure knowledge. ICS, 2016.
[10] Sam Ainsworth and Timothy M. Jones. An event-triggered
programmable prefetcher for irregular workloads. ASPLOS,
2018.
[11] Apple. Apple event - november 10, 2020. https://www.apple.c
om/apple-events/, 2020.
[12] Apple. Optimize for apple silicon with performance and effi-
ciency cores. https://developer.apple.com/news/?id=vk3m204o,
2020.
[13] Daniel
The Poly1305-AES Message-
J. Bernstein.
Authentication Code. FSE, 2005.
[14] Daniel J. Bernstein. Curve25519: New diffie-hellman speed
records. PKC, 2006.
Carruth.
[15] Chandler
Speculative
load
hardening.
https://docs.google.com/document/d/1wwcfv3UV9ZnZVc
GiGuoITT 61e Ko3TmoCS3uXLcJR0/edit#.
[16] Sunjay Cauligi, Gary Soeller, Fraser Brown, Brian Johannes-
meyer, Yunlu Huang, Ranjit Jhala, and Deian Stefan. Fact: A
flexible, constant-time programming language. SecDev, 2017.
[17] Yun Chen, Lingfeng Pei, and Trevor E. Carlson. Leaking control
flow information via the hardware prefetcher. arXiv, 2021.
[18] Robert Cooksey, Stephan Jourdan, and Dirk Grunwald. A
stateless, content-directed data prefetching mechanism. SIGOPS
Oper. Syst. Rev., 2002.
[19] Bart Coppens, Ingrid Verbauwhede, Koen De Bosschere, and
Bjorn De Sutter. Practical mitigations for timing-based side-
channel attacks on modern x86 processors. S&P, 2009.
[20] Patrick Cronin and Chengmo Yang. A fetching tale: Covert
communication with the hardware prefetcher. HOST, 2019.
[21] Babak Falsafi and Thomas F. Wenisch. A primer on hardware
prefetching. Synth. Lect. Comput. Archit., 2014.
[22] Andrei Frumusanu. Apple announces the Apple Silicon M1:
Ditching x86 - What to Expect, Based on A14, Nov 2020.
[23] Ben Gras, Kaveh Razavi, Herbert Bos, and Cristiano Giuffrida.
Translation Leak-aside Buffer: Defeating Cache Side-channel
Protections with TLB Attacks. Sec, 2018.
[24] Daniel Gruss, Moritz Lipp, Michael Schwarz, Richard Fellner,
Cl´ementine Maurice, and Stefan Mangard. Kaslr is dead: Long
live kaslr. ESSOS, 2017.
[25] Daniel Gruss, Cl´ementine Maurice, Anders Fogh, Moritz Lipp,
and Stefan Mangard. Prefetch Side-Channel Attacks: Bypassing
SMAP and Kernel ASLR. CCS, 2016.
[26] hoakley. Cores shouldn’t all be the same: M1 Macs do better,
May 2021.
ecpu, 2021.
[27] Dougall Johnson. Apple CPU. https://github.com/dougallj/appl
[28] Dougall Johnson. Apple M1 Microarchitecture Research. http
s://dougallj.github.io/applecpu/firestorm.html, 2022.
[29] Vladimir Kiriansky, Ilia A. Lebedev, Saman P. Amarasinghe,
Srinivas Devadas, and Joel Emer. Dawg: A defense against
15
cache timing attacks in speculative execution processors. MI-
CRO, 2018.
[30] Paul Kocher, Daniel Genkin, Daniel Gruss, Werner Haas, Mike
Hamburg, Moritz Lipp, Stefan Mangard, Thomas Prescher,
Michael Schwarz, and Yuval Yarom. Spectre attacks: Exploiting
speculative execution. S&P, 2019.
[31] Sangho Lee, Ming-Wei Shih, Prasun Gera, Taesoo Kim, Hye-
soon Kim, and Marcus Peinado. Inferring fine-grained control
flow inside SGX enclaves with branch shadowing. Sec, 2017.
[32] Kevin M. Lepak and Mikko H. Lipasti. On the value locality
of store instructions. ISCA, 2000.
[33] Moritz Lipp, Michael Schwarz, Daniel Gruss, Thomas Prescher,
Werner Haas, Stefan Mangard, Paul Kocher, Daniel Genkin,
Yuval Yarom, and Mike Hamburg. Meltdown: Reading kernel
memory from user space. Sec, 2018.
[34] Hector Martin. M1 dram scaling observed. https://twitter.com/
marcan42/status/1450364369519276032, 2021.
[35] Dag Arne Osvik, Adi Shamir, and Eran Tromer. Cache attacks
and countermeasures: The case of aes. In CT-RSA’06, 2006.
[36] Riccardo Paccagnella, Licheng Luo, and Christopher W.
Fletcher. Lord of the ring(s): Side channel attacks on the CPU
on-chip ring interconnect are practical. Sec, 2021.
[37] Gennady Pekhimenko, Vivek Seshadri, Onur Mutlu, Michael A.
Kozuch, Phillip B. Gibbons, and Todd C. Mowry. Base-delta-
immediate compression: Practical data compression for on-chip
caches. PACT, 2012.
[38] Colin Percival. Cache missing for fun and profit. Proc. of
BSDCan, 2005.
[39] Charles Reis, Alexander Moshchuk, and Nasko Oskov. Site
isolation: Process separation for web sites within the browser.
Sec, 2019.
[40] Amir Roth, Andreas Moshovos, and Gurindar S. Sohi. Depen-
dence based prefetching for linked data structures. SIGOPS
Oper. Syst. Rev., 1998.
[41] Sreenivas Subramoneyand Stanislav Shwartsmanand Anant No-
riand Shankar Balachandranand Elad Shtiegmannand Vineeth
Mekkatand Manjunath Shevgoor and Sourabh Alurkar. System,
method, and apparatus for enhanced pointer identification and
prefetching, August 2021.
[42] Youngjoo Shin, Hyung Chan Kim, Dokeun Kwon, Ji Hoon
Jeong, and Junbeom Hur. Unveiling hardware-based data
prefetcher, a hidden source of information leakage. CCS, 2018.
[43] Andrei Tatar, Dani¨el Trujillo, Cristiano Giuffrida, and Herbert
Bos. TLB;DR: Enhancing TLB-based attacks with TLB desyn-
chronized reverse engineering. Sec, 2022.
[44] Po-An Tsai, Andres Sanchez, Christopher W. Fletcher, and
Daniel Sanchez. Safecracker: Leaking Secrets through Com-
pressed Caches. ASPLOS, 2020.
[45] Jose Rodrigo Sanchez Vicarte, Pradyumna Shome, Nandeeka
Nayak, Caroline Trippel, Adam Morrison, David Kohlbrenner,
and Christopher W. Fletcher. Opening Pandora’s Box: A
Systematic Study of New Ways Microarchitecture Can Leak
Private Data. ISCA, 2021.
[46] Pepe Vila, Boris K¨opf, and Jos´e F. Morales. Theory and practice
of finding eviction sets. S&P, 2019.
[47] Yuanzhong Xu, Weidong Cui, and Marcus Peinado. Controlled-
channel attacks: Deterministic side channels for untrusted op-
erating systems. S&P, 2015.
[48] Yuval Yarom and Katrina Falkner.
Flush+Reload: A high
resolution, low noise, L3 cache side-channel attack. Sec, 2014.
[49] Jiyong Yu, Lucas Hsiung, Mohamad El Hajj, and Christo-
pher W. Fletcher. Data oblivious isa extensions for side channel-
resistant and high performance computing. NDSS, 2019.
[50] Xiangyao Yu, Christopher J. Hughes, Nadathur Satish, and
Srinivas Devadas. Imp: Indirect memory prefetcher. MICRO,
2015.
[51] Xiangyao Yu, Christopher J. Hughes, and Nadathur Rajagopalan
Satish. Hardware prefetcher for indirect access patterns, Febru-
ary 2017.