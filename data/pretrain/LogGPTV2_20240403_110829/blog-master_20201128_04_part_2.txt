```  
demo=# create index flights_bi_bloom on flights_bi  
using bloom(airport_code, airport_utc_offset, flight_no, flight_type, aircraft_code, seat_no, fare_conditions, passenger_id, passenger_name)  
with (length=96, col1=7, col2=7, col3=7, col4=7, col5=7, col6=7, col7=7, col8=7, col9=7);  
CREATE INDEX  
```  
The size of the index is 526 MB, which is somewhat larger than expected. This is because the formula does not take page overhead into account.  
```  
demo=# select pg_size_pretty(pg_total_relation_size('flights_bi_bloom'));  
 pg_size_pretty  
----------------  
 526 MB  
(1 row)  
```  
## Queries  
We can now perform search using various criteria, and the index will support it.  
As we already mentioned, Bloom filter is a probabilistic structure, therefore, the efficiency highly depends on each particular case. For example, let's look at the rows related to two passengers, Miroslav Sidorov:  
```  
demo=# explain(costs off,analyze)  
select * from flights_bi where passenger_name='MIROSLAV SIDOROV';  
                                            QUERY PLAN  
--------------------------------------------------------------------------------------------------  
 Bitmap Heap Scan on flights_bi (actual time=2639.010..3010.692 rows=2 loops=1)  
   Recheck Cond: (passenger_name = 'MIROSLAV SIDOROV'::text)  
   Rows Removed by Index Recheck: 38562  
   Heap Blocks: exact=21726  
   ->  Bitmap Index Scan on flights_bi_bloom (actual time=1065.191..1065.191 rows=38564 loops=1)  
         Index Cond: (passenger_name = 'MIROSLAV SIDOROV'::text)  
 Planning time: 0.109 ms  
 Execution time: 3010.736 ms  
```  
and Marfa Soloveva:  
```  
demo=# explain(costs off,analyze)  
select * from flights_bi where passenger_name='MARFA SOLOVEVA';  
                                            QUERY PLAN  
---------------------------------------------------------------------------------------------------  
 Bitmap Heap Scan on flights_bi (actual time=9980.884..10142.684 rows=2 loops=1)  
   Recheck Cond: (passenger_name = 'MARFA SOLOVEVA'::text)  
   Rows Removed by Index Recheck: 3950168  
   Heap Blocks: exact=45757 lossy=67332  
   ->  Bitmap Index Scan on flights_bi_bloom (actual time=1037.588..1037.588 rows=212972 loops=1)  
         Index Cond: (passenger_name = 'MARFA SOLOVEVA'::text)  
 Planning time: 0.157 ms  
 Execution time: 10142.730 ms  
```  
In one case, the filter allowed only 40 thousand false positives and as much as 4 million of them in the other one ("Rows Removed by Index Recheck"). The execution times of the queries differ accordingly.  
And the following are the results of searching the same rows by the passenger ID rather than name. Miroslav:  
```  
demo=# explain(costs off,analyze)  
demo-# select * from flights_bi where passenger_id='5864 006033';  
                                           QUERY PLAN  
-------------------------------------------------------------------------------------------------  
 Bitmap Heap Scan on flights_bi (actual time=13747.305..16907.387 rows=2 loops=1)  
   Recheck Cond: ((passenger_id)::text = '5864 006033'::text)  
   Rows Removed by Index Recheck: 9620258  
   Heap Blocks: exact=50510 lossy=165722  
   ->  Bitmap Index Scan on flights_bi_bloom (actual time=937.202..937.202 rows=426474 loops=1)  
         Index Cond: ((passenger_id)::text = '5864 006033'::text)  
 Planning time: 0.110 ms  
 Execution time: 16907.423 ms  
```  
And Marfa:  
```  
demo=# explain(costs off,analyze)  
select * from flights_bi where passenger_id='2461 559238';  
                                            QUERY PLAN  
--------------------------------------------------------------------------------------------------  
 Bitmap Heap Scan on flights_bi (actual time=3881.615..3934.481 rows=2 loops=1)  
   Recheck Cond: ((passenger_id)::text = '2461 559238'::text)  
   Rows Removed by Index Recheck: 30669  
   Heap Blocks: exact=27513  
   ->  Bitmap Index Scan on flights_bi_bloom (actual time=1084.391..1084.391 rows=30671 loops=1)  
         Index Cond: ((passenger_id)::text = '2461 559238'::text)  
 Planning time: 0.120 ms  
 Execution time: 3934.517 ms  
```  
The efficiencies differ much again, and this time Marfa was more lucky.  
Note that search by two fields simultaneously will be done much more efficiently since the probability of a false positive p turns into p2:  
```  
demo=# explain(costs off,analyze)  
select * from flights_bi  
where passenger_name='MIROSLAV SIDOROV'  
  and passenger_id='5864 006033';  
                                                     QUERY PLAN  
--------------------------------------------------------------------------------------------------------------------  
 Bitmap Heap Scan on flights_bi (actual time=872.593..877.915 rows=2 loops=1)  
   Recheck Cond: (((passenger_id)::text = '5864 006033'::text)  
               AND (passenger_name = 'MIROSLAV SIDOROV'::text))  
   Rows Removed by Index Recheck: 357  
   Heap Blocks: exact=356  
   ->  Bitmap Index Scan on flights_bi_bloom (actual time=832.041..832.041 rows=359 loops=1)  
         Index Cond: (((passenger_id)::text = '5864 006033'::text)  
                   AND (passenger_name = 'MIROSLAV SIDOROV'::text))  
 Planning time: 0.524 ms  
 Execution time: 877.967 ms  
```  
However, search with Boolean "or" is not supported at all; this is a limitation of a planner rather than of the access method. Of course, an option remains to read the index twice, build two bitmaps, and join them, but this is most likely too costly for this plan to be chosen.  
## Comparison with BRIN and Hash  
Application areas of Bloom and BRIN indexes obviously intersect. These are large tables for which it is desirable to ensure search by different fields, the search accuracy being sacrificed to compactness.  
BRIN indexes are more compact (say, by up to dozens of megabytes in our example) and can support search by range, but have a strong limitation related to physical ordering of the data in a file. Bloom indexes are larger (hundreds of megabytes), but have no limitations except an availability of a suitable hash function.  
Like Bloom indexes, hash indexes support the only operation of equality check. Hash index ensures the search accuracy that is inaccessible for Bloom, but the index size is way larger (in our example, a gigabyte for only one field, and hash index cannot be created on several fields).  
## Properties  
As usual, let's look at the properties of Bloom (queries have already been provided).  
The following are the properties of the access method:  
```  
 amname |     name      | pg_indexam_has_property  
--------+---------------+-------------------------  
 bloom  | can_order     | f  
 bloom  | can_unique    | f  
 bloom  | can_multi_col | t  
 bloom  | can_exclude   | f  
```  
Evidently, the access method enables us to build an index on several columns. It hardly makes sense to create Bloom index on one column.  
The following index-layer properties are available:  
```  
     name      | pg_index_has_property  
---------------+-----------------------  
 clusterable   | f  
 index_scan    | f  
 bitmap_scan   | t  
 backward_scan | f  
```  
The only available scan technique is bitmap scan. Since the index is always scanned entirely, it does not make sense to implement a regular index access that returns rows TID by TID.  
```  
        name        | pg_index_column_has_property   
--------------------+------------------------------  
 asc                | f  
 desc               | f  
 nulls_first        | f  
 nulls_last         | f  
 orderable          | f  
 distance_orderable | f  
 returnable         | f  
 search_array       | f  
 search_nulls       | f  
```  
Only dashes are here; the method cannot even manipulate NULLs.  
## And finally:  
It's not impossible that this series of articles will be continued in future, when new index types of interest appear, but it's time to stop now.  
I'd like to express appreciation to my colleagues from Postgres Professional (some of them are the authors of many access methods discussed) for reading the drafts and providing their comments. And I'm, certainly, grateful to you for your patience and valuable comments. Your attention encouraged me to reach this point. Thank you!  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")