    push  ebx 
    push  esi 
    push  edi 
    mov  
eax, DWORD PTR ___security_cookie 
    xor  
DWORD PTR __$SEHRec$[ebp+16], eax  
; xored pointer to scope table 
    xor  
eax, ebp   
; ebp ^ security_cookie 
    push  eax 
    lea  
eax, DWORD PTR __$SEHRec$[ebp+8]  
; pointer to VC_EXCEPTION_REGISTRATION_RECORD 
    mov  
DWORD PTR fs:0, eax 
    mov  
DWORD PTR __$SEHRec$[ebp], esp 
    mov  
DWORD PTR _p$[ebp], 0 
    mov  
DWORD PTR __$SEHRec$[ebp+20], 0 ; entering outer try block, setting previous try level=0 
    mov  
DWORD PTR __$SEHRec$[ebp+20], 1 ; entering inner try block, setting previous try level=1 
    push  OFFSET $SG85497 ; 'hello!' 
    call  _printf 
    add  
esp, 4 
    push  0 
    push  0 
    push  0 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
692 
逆向工程权威指南（下册） 
    push  1122867 ; 00112233H 
    call  DWORD PTR __imp__RaiseException@16 
    push  OFFSET $SG85499 ; '0x112233 raised. now let''s crash' 
    call  _printf 
    add  
esp, 4 
    mov  
eax, DWORD PTR _p$[ebp] 
    mov  
DWORD PTR [eax], 13 
    mov  
DWORD PTR __$SEHRec$[ebp+20], 0 ; exiting inner try block, set previous try level back to 0 
    jmp  
SHORT $LN2@main 
; inner block filter: 
$LN12@main: 
$LN18@main: 
    mov  
ecx, DWORD PTR __$SEHRec$[ebp+4] 
    mov  
edx, DWORD PTR [ecx] 
    mov  
eax, DWORD PTR [edx] 
    mov  
DWORD PTR $T3[ebp], eax 
    cmp  
DWORD PTR $T3[ebp], -1073741819 ; c0000005H 
    jne  
SHORT $LN5@main 
    mov  
DWORD PTR tv72[ebp], 1 
    jmp  
SHORT $LN6@main 
$LN5@main: 
    mov  
DWORD PTR tv72[ebp], 0 
$LN6@main: 
    mov  
eax, DWORD PTR tv72[ebp] 
$LN14@main: 
$LN16@main: 
    ret  
0 
; inner block handler: 
$LN13@main: 
    mov  
esp, DWORD PTR __$SEHRec$[ebp] 
    push  OFFSET $SG85501 ; 'access violation, can''t recover' 
    call  _printf 
    add  
esp, 4 
    mov  
DWORD PTR __$SEHRec$[ebp+20], 0 ; exiting inner try block, setting previous try level back to 0 
$LN2@main: 
    mov  
DWORD PTR __$SEHRec$[ebp+20], -2 ; exiting both blocks, setting previous try level back to -2 
    jmp  
SHORT $LN7@main 
; outer block filter: 
$LN8@main: 
$LN19@main: 
    mov  
ecx, DWORD PTR __$SEHRec$[ebp+4] 
    mov  
edx, DWORD PTR [ecx] 
    mov  
eax, DWORD PTR [edx] 
    mov  
DWORD PTR $T2[ebp], eax 
    mov  
ecx, DWORD PTR __$SEHRec$[ebp+4] 
    push  ecx 
    mov  
edx, DWORD PTR $T2[ebp] 
    push  edx 
    call  _filter_user_exceptions 
    add  
esp, 8 
$LN10@main: 
$LN17@main: 
    ret  
0 
; outer block handler: 
$LN9@main: 
    mov  
esp, DWORD PTR __$SEHRec$[ebp] 
    push  OFFSET $SG85503 ; 'user exception caught' 
    call  _printf 
    add  
esp, 4 
    mov  
DWORD PTR __$SEHRec$[ebp+20], -2 ; exiting both blocks, setting previous try level back to -2 
$LN7@main: 
    xor  
eax, eax 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 68 章  Windows NT 
693 
    mov  
ecx, DWORD PTR __$SEHRec$[ebp+8] 
    mov  
DWORD PTR fs:0, ecx 
    pop  
ecx 
    pop  
edi 
    pop  
esi 
    pop  
ebx 
    mov  
esp, ebp 
    pop  
ebp 
    ret  
0 
    _main  ENDP 
_code$ = 8 ; size = 4 
_ep$ = 12   ; size = 4 
_filter_user_exceptions PROC 
    push  ebp 
    mov  
ebp, esp 
    mov  
eax, DWORD PTR _code$[ebp] 
    push  eax 
    push  OFFSET $SG85486 ; 'in filter. code=0x%08X' 
    call  _printf 
    add  
esp, 8 
    cmp  
DWORD PTR _code$[ebp], 1122867 ; 00112233H 
    jne  
SHORT $LN2@filter_use 
    push  OFFSET $SG85488 ; 'yes, that is our exception' 
    call  _printf 
    add  
esp, 4 
    mov  
eax, 1 
    jmp  
SHORT $LN3@filter_use 
    jmp  
SHORT $LN3@filter_use 
$LN2@filter_use: 
    push  OFFSET $SG85490 ; 'not our exception' 
    call  _printf 
    add  
esp, 4 
    xor  
eax, eax 
$LN3@filter_use: 
    pop  
ebp 
    ret  
0 
_filter_user_exceptions ENDP 
Cookie Offset 是EBP 的值（栈帧栈底）与栈内EBP⊕security_cookie 之间的差值。Cookie XOR Offset 是EBP⊕
security_cookie 与栈中数值之间的差值。如果上述各值不符合下列条件，那么整个进程将会因为栈损坏而终止运行： 
security_cookie ⊕ (CookieXOROffset +address_of_saved_EBP) == stack[address_of_saved_EBP + CookieOffset] 
如果 Cookie Offset 的值是−2，就表示这个 cookie 并不存在（GScookie 一般如此）。 
笔者编写的 tracer 程序也能进行 Cookies 的合法性检查，有关详情请访问 https://github.com/dennis714/ 
tracer/blob/master/SEH.c。 
在启用“/GS-”选项之后 MSVC 2005 编译器就会分配 SEH3 的函数，但是它依然会分配 SEH4 的 CRT 代码。 
68.3.3  Windows x64 
和大家想象的一样，每个函数都在序言中设置 SEH 栈帧将会降低运行速度。此外，在程序运行过程中
不断调整“previous try level”字段同样会增加时间开销。然而在 x64 程序里，整个情况彻底不同了：所有
try 块的指针、filter 和 handler 函数的指针都单独存储于可执行文件的.pdata 段。操作系统根据.pdata 段获取
异常处理的全部信息。 
我们把上一个章节的两个程序编译为 x64 程序，可以得到： 
指令清单 68.12  MSVC 2012 
$SG86276 DB  
'hello #1!', 0aH, 00H 
$SG86277 DB  
'hello #2!', 0aH, 00H 
$SG86279 DB  
'access violation, can''t recover', 0aH, 00H 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
694 
逆向工程权威指南（下册） 
pdata    SEGMENT 
$pdata$main DD  imagerel $LN9 
        DD   
imagerel $LN9+61 
        DD   
imagerel $unwind$main 
pdata    ENDS 
pdata    SEGMENT 
$pdata$main$filt$0 DD imagerel main$filt$0 
        DD   
imagerel main$filt$0+32 
        DD   
imagerel $unwind$main$filt$0 
pdata    ENDS 
xdata    SEGMENT 
$unwind$main DD  020609H 
        DD    
030023206H 
        DD   
imagerel __C_specific_handler 
        DD   
01H 
        DD   
imagerel $LN9+8 
        DD   
imagerel $LN9+40 
        DD   
imagerel main$filt$0 
        DD   
imagerel $LN9+40 
$unwind$main$filt$0 DD 020601H 
        DD   
050023206H 
xdata    ENDS 
_TEXT    SEGMENT 
main     PROC 
$LN9: 
        push  
rbx 
        sub  
rsp, 32 
        xor  
ebx, ebx 
        lea  
rcx, OFFSET FLAT:$SG86276 ; 'hello #1!' 
        call  
printf 
        mov  
DWORD PTR [rbx], 13 
        lea  
rcx, OFFSET FLAT:$SG86277 ; 'hello #2!' 
        call  
printf 
        jmp  
SHORT $LN8@main 
$LN6@main: 
        lea  
rcx, OFFSET FLAT:$SG86279 ; 'access violation, can''t recover' 
        call  
printf 
        npad  
1 ; align next label 
$LN8@main: 
        xor  
eax, eax 
        add  
rsp, 32 
        pop  
rbx 
        ret  
0 
main     ENDP 
_TEXT    ENDS 
text$x  SEGMENT 
main$filt$0 PROC 
        push  
rbp 
        sub  
rsp, 32 
        mov  
rbp, rdx 
$LN5@main$filt$: 
        mov  
rax, QWORD PTR [rcx] 
        xor  
ecx, ecx 
        cmp  
DWORD PTR [rax], -1073741819; c0000005H 
        sete  
cl 
        mov  
eax, ecx 
$LN7@main$filt$: 
        add  
rsp, 32 
        pop  
rbp 
        ret  
0 
        int  
3 
main$filt$0 ENDP 
text$x ENDS 
异步社区会员 dearfuture(15918834820) 专享 尊重版权