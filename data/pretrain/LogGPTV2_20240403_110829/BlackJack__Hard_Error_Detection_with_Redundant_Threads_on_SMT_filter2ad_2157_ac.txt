queue. Ideally, the constraints assumed by shuffle will be main-
tained at issue. Instruction packets will issue complete and alone,
and each trailing thread instruction will issue to a different back-
end than it used in the leading thread. 
Because we leave the issue queue and issue policy unmodified,
the issue queue may undo our shuffling by breaking up the shuf-
fled packets in the trailing stream and introducing unrelated lead-
and 
ing  and  trailing  instructions  into  the  packets.  Doing  so  would
violate the conditions of safe-shuffle’s second constraint, specified
in Section 4.2.2, that the trailing packet should co-issue as a whole
and  no  other  unrelated  instructions  should  co-issue  with  the
packet, and may result in loss of spatial diversity and reduced cov-
erage. The undoing occurs due to two types of 
lead-
ing-trailing 
interference.
However,  because  trailing  thread  is  fetched  in  leading  thread’s
issue  order,  both  types  of  interference  are  rare.  We  explain  the
details next. 
trailing-trailing 
interference, 
interference 
Leading-trailing interference occurs when leading instructions
co-issue  in  the  same  cycle  with  trailing  instructions.  Leading
instructions issuing with trailing instructions causes trailing pack-
ets to break apart, some parts of the packets issuing with leading
instructions, and some issuing alone (or with other trailing-thread
instructions).  Fortunately,  in  SRT  and  BlackJack,  dependencies
naturally  cause  issue  from  each  thread  to  be  bursty,  either  only
leading instructions or only trailing instructions are issued in most
cycles  though  both  threads  are  present  in  the  issue  queue.  We
quantify this bursty behavior in Section 6. While this bursty issue
behavior makes leading-trailing interference rare, another reason
makes the interference even rarer. The trailing thread is a high-IPC
thread fetched in dependence order with no branch mispredictions
or  cache  misses  (see  Section 3),  while  the  leading-thread  is  a
lower-IPC thread fetched in program order and the issue policy is
oldest-first. Consequently, the trailing instructions issue out of the
issue queue almost as soon as they are inserted, while the leading
instructions take multiple cycles to issue. This difference in occu-
pancy  means  that  a  trailing  instruction  has  a  slim  chance  of
becoming older than any leading instruction in the issue queue. As
such,  the  trailing  instructions  almost  always  have  lower  priority
than  any  leading  instructions  that  are  ready.  Therefore,  trailing
instructions cannot disturb the leading instructions ready to issue. 
The lack of leading-trailing interference results in two distinct
benefits:  (1)  Leading  instructions  rarely  interfere  with  trailing
packets. (2) Conversely, trailing instructions rarely interfere with
leading  instructions.
If  this  converse  were  not  true,  the  leading
thread’s  backend  resource  usage  information  collected  by  safe-
shuffle could be due to the leading thread either issuing in isola-
tion or co-issuing with some trailing instructions. While the first
case causes no problems for safe-shuffle, the second case implies
that the leading packets are narrower than the issue width. Narrow
leading packets force safe-shuffle either to put many NOPS in the
shuffled  packets  to  ensure  spatial  diversity  or  to  use  a  shuffling
algorithm more complicated than our simple, greedy one to try to
combine multiple leading packets into one trailing packet. 
Similar  to  leading-trailing  interference,  trailing-trailing  inter-
ference is also rare. Trailing-trailing interference occurs when one
packet  co-issues  with  instructions  from  another  packet.  It  may
seem that it would be difficult to prevent trailing-trailing interfer-
ence especially if the issue queue is to remain unmodified. How-
ever,  the  fact  that  the  trailing  stream  is  ordered  in  dependence
order reduces trailing-trailing interference. As mentioned before,
this  order  implies  that  trailing  instructions  enter  and  leave  the
issue queue without much delay. This quick departure combined
with the fact that the trailing thread fetches only one packet per
cycle  (Section 4.3.1)  implies  that  most  often  only  one  trailing
packet resides in the issue queue at any given time, giving little
opportunity for the issue queue to introduce trailing-trailing inter-
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 05:37:04 UTC from IEEE Xplore.  Restrictions apply. 
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007ference. 
Nevertheless, the issue queue may occasionally have more than
one co-resident trailing packet due either to long-latency trailing
instructions  backing  up  in  the  issue  queue  or  to  leading-trailing
interference.  In  such  cases,  the  issue  queue  may  wake  up  later
packets in an order different than the trailing dispatch order (which
is the same as the leading issue order). This different order occurs
because the leading issue order is based on the latencies seen by
the leading thread which are different from those seen by the trail-
ing thread. The leading thread sees cache miss latencies which are
hidden completely from the trailing thread due to the slack (see
Section 3). Trailing loads access only the LVQ and not the cache
hierarchy,  and  as  such,  may  complete  earlier  than  the  dispatch
order expects, creating opportunity for instructions in later packets
to be woken up earlier and to be co-issued with earlier packets. 
Both types of interference being rare implies that most often
the  trailing  packets  are  co-issued  as  a  whole  and  not  co-issued
with unrelated leading or trailing instructions. Consequently, the
conditions  of  safe-shuffle’s  second  constraint,  specified 
in
Section 4.2.2,  are  met,  and  spatial  diversity  is  maintained  in  the
common case. 
This  way  of  maintaining  spatial  diversity  without  modifying
the issue queue does come at the price of some performance loss.
Leading-trailing interference is reduced by trailing thread’s issue-
order fetch which does not negatively impact performance. How-
ever, preventing trailing-trailing interference relies on fetching one
packet per cycle which limits trailing thread’s fetch bandwidth and
negatively impacts performance, as discussed in Section 4.3.1. 
4.4 Commit and Correctness Check
After passing through the remainder of the backend pipeline,
trailing thread instructions complete and wait for commit in pro-
gram order. Because register dependencies are preserved, commit
is in program order, and both threads maintain the ordering in the
load/store queue, the result of each trailing instruction and its lead-
ing counterpart will be in agreement when there are no errors.
BlackJack  checks  for  agreement  by  comparing  the  trailing
stores  against  corresponding  leading  stores  waiting  in  the  store
buffer in the same way as SRT (Section 3). However, safe-shuffle
borrows dependence information from the leading thread to pro-
duce  the  trailing  thread.  Therefore,  we  must  perform  additional
checks so that corruption of this information due to a hard error
does not cause identical mistakes in the two threads, allowing the
error to go undetected. We note that this additional check is in the
same vein as SRT’s branch outcomes. SRT passes leading branch
outcomes to the trailing thread which uses the outcomes as predic-
tion and not as result. Trailing branch execution validates the pre-
diction  which  forms  a  separate  check  for  the  correctness  of  the
outcomes. 
The borrowed information includes dependence information in
the  form  of  leading  issue  order  and  leading  rename  maps,  and
leading program order. 
To check the dependence information, we observe that we need
to ensure that the trailing thread maintains the dependencies in the
original  program.  To  implement  this  check,  we  use  a  second
rename table at trailing commit, in a slightly different fashion than
normal which is described below. 
As trailing instructions commit in program order, they use their
logical source registers to look up their physical source registers in
the second table. While normally a new physical register is allo-
cated for the destination operand, the trailing instructions already
have their physical destination register which they use to update
the table as the new mapping for the logical destination register.
We  compare  the  looked-up  physical  source  registers  against  the
physical  source  registers  that  were  provided  by  the  first  trailing
rename and used by the instructions in trailing execution. A dis-
agreement signifies either a leading-thread error that propagated to
the trailing thread through safe-shuffle, or a trailing-thread error
(including  this  dependence  check).  Because  the  second  rename
table is used only by the trailing thread and never by the leading
thread, we maintain spatial diversity.
Because the first trailing rename is done out of program order,
we  do  not  free  physical  registers  as  determined  by  the  first
renamer (Section 4.3.1). Instead, we free the physical register that
the second renamer reports as the previous mapping of the destina-
tion register because the second rename is in program order. Using
the second renamer ensures that freeing reflects program order, not
dependence order.
Finally, the trailing thread does not fetch its own instructions
but  obtains  the  instructions  committed  by  the  leading  thread.
Therefore, program-order errors in the leading thread could cause
incorrect instructions to be fetched, instructions to be dropped or
instructions  to  be  added,  and  the  trailing  thread  will  duplicate
these errors. To check for this kind of error we require an addi-
tional  simple  check  at  commit  that  checks  that  the  program
counters of the committed instructions are correct. If a committed
instruction is a taken branch, the program counter of the next com-
mitted instruction should be the branch target; otherwise the pro-
gram  counter  of  the  next  instruction  should  be  the  program
counter of the previous instruction plus the size of an instruction. 
4.5 Coverage 
While BlackJack ensures spatial diversity in the combinational
logic  present  in  the  frontend  and  backend,  spatial  diversity  in
memory  structures,  specifically  rename  tables,  load/store  queue,
active list, and the issue queue, need some explanation. 
Because  each  SMT  context  has  its  own  rename  tables,  load/
store queue and active list, spatial diversity in these structures is
inherent.  An  error  in  the  leading  thread’s  program  order  (e.g.,
omitted instructions) propagating to the trailing thread despite this
spatial  diversity  is  caught  by  our  program-order  checks  as
described in Section 4.4. Spatial diversity from having per-context
structures  ensures  that  any  remaining  errors  are  caught  by  dis-
agreeing results of the two threads. 
The issue queue may seem to be more of a problem because it
is  shared  by  the  two  threads  and  can  not  be  spatially  diverse.
Because BlackJack ensures spatial diversity in the backend spatial
diversity  ends  up  being  maintained  in  most  of  the  issue  queue
hardware. Each backend way has a broadcast line to broadcast to
its dependents. As such, if the backend way is assured to be spa-
tially diverse so are the broadcast wires. Furthermore, each broad-
cast  wire  connects  to  a  comparator  in  each  entry. Therefore,  by
using a different broadcast wire, a trailing instruction is woken up
by a different comparator than the corresponding leading instruc-
tion. The  remaining  concern  is  the  spatial  diversity  of  the  issue
queue entries themselves. We point out here that the function of
the issue queue is simply to obey dependencies and find a valid
issue order. As such, any issue queue failure that causes an invalid
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 05:37:04 UTC from IEEE Xplore.  Restrictions apply. 
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007issue order (even if it affects the order of both threads in the same
way)  is  detected  by  the  dependence  check  as  described  in
Section 4.4. Consequently, we do not need to ensure spatial diver-
sity in the issue queue entries. 
There  is  a  vulnerability  in  the  issue  queue’s  payload  RAM
which holds instruction payload while the instructions are in the
issue queue. It is possible that an entry in the payload RAM cor-
rupts bits in some deterministic way, and this entry is used by both
copies of an instruction leading to identical incorrect results in the
threads.  There  are  many  ways  to  address  this  vulnerability.  We
could additionally consider payload entry allocation policy in safe-
shuffle, or insert NOPs at trailing dispatch if an allocation attempts
to violate spatial diversity. But because the payload RAM is just a
small RAM, having separate payload RAMs for the two threads is
probably the simplest solution. Two payload RAMs obviously pro-
vide sufficient spatial diversity.
Although safe-shuffle ensures spatial diversity in the backend,
including the register file ports, we do not explicitly cover the pos-
sibility  that  both  copies  of  an  instruction  may  be  allocated  the
same physical register. However, because the two threads maintain
their own register state and compete for free registers, allocation
of identical registers is unlikely and not directly tied to program
patterns and architectural policies and causes only a negligible loss
in coverage.
Finally, there may also be a concern that while BlackJack cov-
ers single hard errors much as SRT covers single soft errors, multi-
ple errors are more likely in the case of hard errors than soft errors.
BlackJack can be effective for multiple uncorrelated errors. It is
true that certain structures may be more prone than others to multi-
ple  correlated  errors,  and  in  a  highly-defective  chip  many  like
structures (e.g., all RAM structures or all CAM structures) may be
defective. However, we do not target this class of defective chips.
Such  chips  will  be  eliminated  early  in  the  testing  process.  Our
technique is a run-time technique that catches hard errors that were
small enough to be missed during test or only became active in the
field. We target chips that seem error-free but silently corrupt data. 
4.6 Complexity
Blackjack exploits pre-existing ordering information from the
leading thread issue order to permit shuffling and reordered fetch.
Because  this  ordering  information  is  available  from  the  leading
thread, it can be used far in advance of trailing thread fetch (within
the leading/trailing slack) thus clearly placing shuffle off the criti-
cal  path  with  little  chance  of  complicating  current  structures  or
degrading cycle time. 
5  Methodology
We modify SimpleScalar 3.2b[4] to simulate SRT and Black-
Jack. We use the parameters listed in Table 1. Note that we use two
integer  multipliers  and  two  integer  dividers  in  both  SRT  and
BlackJack, because without two of each type of resource, spatial
diversity is not possible.
We  evaluate  the  hard  error  instruction  coverage  of  SRT  and
BlackJack. SRT is not a hard-error technique but provides some
hard error coverage due to accidental spatial diversity. We use SRT
as a reference point.
We measure hard error instruction coverage as the fraction of
instruction pairs that execute on spatially diverse hardware multi-
Table 1: Processor Parameters
Out-of-order issue
Active list
Issue queue 
Caches 
4 instructions/cycle
512 entries (64-entry LSQ)
32-entries 
64KB 4-way 2-cycle L1s (2 
ports); 2M 8-way unified L2 
350 cycles
4 int ALUs, 2 int multipliers,
2 FP ALUs, 2 FP multipliers
64 entries
128 entries
96 entries
256 instructions
1024 instructions
Memory 
Int ALUs
FP ALUs
Store Buffer
LVQ
BOQ
Slack
DTQ
plied by the core area used by the pair. Because instruction pairs
can be spatially diverse for part of the execution, and use identical
resources in others, we allow for partial coverage of single instruc-
tions. We make the simplifying assumption that equal chip areas
have equal probability of hard error. We use the HotSpot [15] area
model  to  estimate  the  core  area  that  remains  vulnerable  to  hard
defects under redundant threading. We divide the area into three
classes: issue, frontend and backend. We give SRT the benefit of
assuming full coverage of hard errors in the issue queue although
SRT  can  cover  hard  errors  in  the  issue  queue  only  by  chance.
BlackJack,  on  the  other  hand  provides  coverage  as  described  in
Section 4.4.  Of  the  remainder  of  the  core,  34%  is  accessed  by
instructions in the frontend pipeline stages. The remaining 66% is
accessed in the backend. 
We run 16 SPEC2000 benchmarks, fast-forward to the early-
simpoint specified by [14], and then run 100 million instructions.
6  Results
In this section we present our results for coverage and perfor-
mance  for  SRT  and  BlackJack.  First,  we  discuss  the  hard  error
coverage provided by BlackJack and then move on to discuss the
performance impact. 
6.1 Instruction Coverage
Figure 4a and b show hard error coverage achieved by SRT and
BlackJack. SRT is shown by white bars, and BlackJack by black
bars. Figure 4a shows hard error instruction coverage of the entire
processor,  including  frontend  and  backend.  As  described  in
Section 4.1,  execution  in  which  frontend  ways  is  determined
solely on the instruction’s cache block location and thus SRT has
zero  frontend  spatial  diversity.  Because  BlackJack  deterministi-
cally places instructions so they map to spatially diverse frontends
in the leading thread, BlackJack achieves 100% spatial diversity in
the  frontend.  Figure 4b  shows  instruction  coverage  only  of  the
backends which is dependent on timing and resource availability. 
From Figure 4a, we see that SRT achieves limited spatial diver-
sity and hence provides modest coverage of hard errors. On aver-
age  SRT  provides  34%  coverage  of  hard  errors.  SRT’s  worst
coverage of 25% occurs in sixtrack and its best coverage in vortex
is at 41%. BlackJack on the other hand covers 97% of hard errors
on average, with its lowest of 94% occurring in bzip and its high-
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 05:37:04 UTC from IEEE Xplore.  Restrictions apply. 
37th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN'07)0-7695-2855-4/07 $20.00  © 2007)
%
(
e
g
a
r
e
v
o
C
n
o
i
t
c
u
r
t
s
n
I
100
80
60
SRT
BlackJack
40
20
0
e
k
a
u
q
e
t
r
a
i
m
w
s
d
i
r
g
m
u
l
p
p
a
d
3
a
m
f
c
c
g
a)
100
80
60
40