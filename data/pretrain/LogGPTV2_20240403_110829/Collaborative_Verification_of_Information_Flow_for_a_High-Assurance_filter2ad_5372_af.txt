https://www.appthority.com/news/android-
apps list.
malware-makes-up-this-weeks-dangerous-apps-list,
2013.
[39] SABELFELD, A., AND MYERS, A. C.
Language-based
information-ﬂow security. J. Sel. Areas in Commun. 21, 1 (Sep.
2003), 5–19.
[40] SCHOUWENBERG, R.
Malware in the amazon app
store. https://www.securelist.com/en/blog/208194054/
Malware_in_the_Amazon_App_Store, 2012.
[41] SMITH, S., AND THOBER, M. Refactoring programs to secure
information ﬂows. In PLAS (June 2006), pp. 75–84.
[42] SU, P. Broken Windows theory. http://blogs.msdn.com/b/
philipsu/archive/2006/06/14/631438.aspx, June 2006.
[43] SUN, Q., BANERJEE, A., AND NAUMANN, D. A. Modular and
constraint-based information ﬂow inference for an object-oriented
language. In SAS (2004), pp. 84–99.
[44] TERAUCHI, T., AND AIKEN, A. Secure information ﬂow as a
safety problem. In SAS (Sep. 2005), pp. 352–367.
[45] VIDAS, T., CHRISTIN, N., AND CRANOR, L. Curbing Android
permission creep. In W2SP (May 2011).
[46] VOLPANO, D. M., AND SMITH, G. A type-based approach to
program security. In TAPSOFT ’97 (Apr. 1997), pp. 607–621.
[47] WANG, T., LU, K., LU, L., CHUNG, S., AND LEE, W. Jekyll on
iOS: When benign apps become evil. In USENIX Security (Aug.
2013), pp. 559–572.
[48] XU, R., SAÏDI, H., AND ANDERSON, R. Aurasium: Practical
policy enforcement for Android applications. In USENIX Security
(Aug. 2012).
[49] YAN, L. K., AND YIN, H. DroidScope: Seamlessly reconstruct-
ing the OS and Dalvik semantic views for dynamic Android mal-
ware analysis. In USENIX Security (Aug. 2012).
[50] ZDANCEWIC, S., ZHENG, L., NYSTROM, N., AND MYERS,
A. C. Untrusted hosts and conﬁdentiality: Secure program parti-
tioning. In SOSP (Oct. 2001), pp. 1–14.
[51] ZHENG, L., CHONG, S., MYERS, A. C., AND ZDANCEWIC,
S. Using replication and partitioning to build secure distributed
systems. In IEEE Security and Privacy (May 2003), pp. 236–250.
[52] ZHOU, Y., AND JIANG, X. Dissecting Android malware: Char-
acterization and evolution. In IEEE Security and Privacy (May
2012), pp. 95–109.
[53] ZHOU, Y., WANG, Z., ZHOU, W., AND JIANG, X. Hey, you,
get off of my market: Detecting malicious apps in ofﬁcial and
alternative Android markets. In NDSS (Feb. 2012).
A Appendix
Table 5 lists the malicious applications (Trojans) that were
written by 5 independent corporate Red Teams and were
analyzed using IFC.
15
Table 5: Trojan applications analyzed by IFC.
Description
LOC Malware Description
1 Adventure Game
2 Countdown Timer
3 Note Taker
4 Screen Saver 1
5 SMS Pager
6 System Monitoring 3
7 Battery Indicator
17,896 Overwrites all ﬁles on the SD-card and deletes all SMS
1,065 Drops all incoming SMSes
3,251 Sends audio recordings over the Internet
147 Corrupts the local ﬁle system
1,834 Sends SMS to a remote web server
3,334 Blocks all SMSes
4,214 Reads and sends picture data from the external storage to a web
address
Information Flow Violation
READ_SMS
RECEIVE_SMS
INTERNET
WRITE_EXTERNAL_STORAGE
INTERNET
RECEIVE_SMS
INTERNET
IFC
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
2,087 Sends all SMS messages to a server by adding them to a
hardcoded URL
640 Writes calculations to a ﬁle and then sends the ﬁle to a server
293 Leaks SMS messages, browser history, and ﬁle names to the
SD card log
INTERNET
INTERNET
BROWSER_HISTORY
9,678 Writes SMSes to the log
9,402 Sets the global proxy to 10.1.1.1
2,998 Sends the device ID to server
852 Sends location data to server
2,542 Deletes contact list
11,743 Locks all apps with a random password
1,415 Blocks all outing and incoming calls
1,069 Writes SIM ID to the SDCARD
8 Block SMS
9 Calculator 2
10 SMS Backup
11 SMS Notiﬁcation
12 System Monitoring 1
13 Fortune
14 WiFi Finder
15 Cookbook
16 Password Protects
Apps
17 Phone silencer
18 Replacement
launcher
22 SMS Encryption
23 Bible
24 GPS 1
25 GPS Logger
26 Shares Pictures
27 Cat Pictures
WRITE_LOGS
WRITE_SETTINGS
INTERNET
ACCESS_FINE_LOCATION
WRITE_CONTACTS
MODIFY_PHONE_STATE
RECEIVE_BOOT_COMPLETED
WRITE_EXTERNAL_STORAGE
READ_EXTERNAL_STORAGE→
INTERNET
READ_PHONE_STATE→INTERNET
ACCESS_FINE_LOCATION→
WRITE_EXTERNAL_STORAGE
READ_SMS→SEND_SMS
INTERNET→
WRITE_EXTERNAL_STORAGE
READ_PHONE_STATE→INTERNET
ACCESS_FINE_LOCATION→
INTERNET
READ_EXTERNAL_STORAGE→
INTERNET
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
19 2D Game
33,017 Sends location data from photos on the SD card to a server
20 Displays source code
21 System Monitoring 2
242 Sends the device id to 127.0.0.0
9,530 Writes GPS data to SD Card
27,764 Sends all outgoing SMSes to the intended recipient and to a
number speciﬁed in a trigger SMS
19,775 Downloads a jar-ﬁle and executes it
720 Sends device ID to attacker’s server
6,907 Sends location to attacker’s server
135 Sends location data from photos to attackers server
639 Reads location from pictures and sends it to a malicious server READ_EXTERNAL_STORAGE→
28 SMS Messenger
29 Running Log
(cid:88)The malicous ﬂows or permissions in these apps were found using IFC
1,210 Sends a spoofed SMS message to a contact
1,333 Writes phone number to NFC tag
INTERNET
READ_SMS→WRITE_SMS
READ_PHONE_STATE→NFC
Continued on next page
16
Table 5: Trojan applications analyzed by IFC — continued from previous page.
LOC Malware Description
510 Uses a randomized value as left operand
Information Flow Violation
RANDOM→DISPLAY
RANDOM→VIBRATE
USER_INPUT→FILESYSTEM
263 DoS on storage system
248 Sends user’s location to 10.0.1.8 using ProcessBuilder and ping ACCESS_FINE_LOCATION→
3,503 Vibrates randomly
IFC
(cid:88)
(cid:88)
(cid:88)
(cid:88)
482 Displays a random number instead of result
1,474 Leaks location data to a service via an intent
1,700 A ﬁle containing the user’s phone number is sent to the Internet FILESYSTEM→INTERNET
5,902 Leaks phone number via screenshot to Internet
Description
30 Calculator 1
31 RSS Reader
32 Text to Morse code
33 Shares Location
34 Calculator 4
35 Device Admin 1
36 Device Admin 2
37 DropBox Uploader
38 GPS 3
PROCESS_BUILDER
RANDOM→DISPLAY
(cid:88)
ACCESS_FINE_LOCATION→INTENT (cid:88)
(cid:88)
(cid:88)
(cid:88)
DISPLAY→INTERNET
LOCATION→INTERNET("maps.google-
cc.com")
NFC("*")→INTERNET
LITERAL("0xFFFF")→INTERNET
LITERAL→
WRITE_EXTERNAL_STORAGE("*")
LOCATION→
INTERNET("mapxplore.com")
USER_INPUT →
USE_SIP("PI:EMAIL")
LITERAL
→SEND_SMS("12025551212")
USER_INPUT("EditText.passPhrase")→
EMAIL
USER_INPUT("EditText.message")→
EMAIL
USER_INPUT("EditText.createPassword")
→SHARED_PREFERENCES
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)∗
(cid:88)∗
1,512 Location data is sent to maps.google-com.cc rather than
maps.google.com
39 Geocaching
40 Instant Messenger
41 App Backup
27,892 Sends data from any NFC tag in range to server
1,253 Sends all chats to user 0xFFFF
2,010 Deletes SDCARD
42 Mapping
5,587 Sends location data to malicious server
43 SIP VoIP Phone
1,480 Allows third party to listen to phone calls
44 Word Game
1,191 Sends contact information to hardcoded phone number
45 PGP Encryption 1
9,904 Appends BASE64 encoded passphrase to the version string of
the message
46 PGP Encryption 2
9,945 Appends unencrypted message to the encrypted text
47 Password Saver
508 Saves passwords in plain text in shared preferences
48 Podcast Player
49 Screen Saver 2
50 To Do List
51 Sudoku
52 Expense reports
53 Automatic SMS
replies
54 Screen Saver 3
55 Backup
56 SMS Reminders
57 Game 3
1,711 Battery DoS: continually plays a song that has no sound
419 Battery DoS: Disables Back and Menu Button, replaces home
launcher, and uses 100% of the CPU
5,123 Battery DoS: High refresh rate and display brightness
1,505 Battery DoS: Spawns a thread with an inﬁnite loop
2,293 Performance DoS: does not kill threads
33,296 Performance DoS: Inﬁnitely sends SMSes
457 Performance DoS: throttles the loop-back interface
2,554 Transposes digits in phone number backup
2,917 If a SMS with the text ‘000000000’ is received, all reminders
are deleted
1,211 Loads preferences under another screen and passes touch
events to preferences screen
none
none
none
none
none
none
none
none
none
none
(cid:88)The malicous ﬂows or permissions in these apps were found using IFC
(cid:88)∗These malicious ﬂows will be caught by IFC after future work is complete. See Sect. 3.6
17