digoal=# select * from heap_page_items(get_raw_page('digoal.pg_lock_test',54054));  
 lp | lp_off | lp_flags | lp_len |  t_xmin   | t_xmax | t_field3 |   t_ctid   | t_infomask2 | t_infomask | t_hoff | t_bits | t_oid   
----+--------+----------+--------+-----------+--------+----------+------------+-------------+------------+--------+--------+-------  
  1 |   8152 |        1 |     35 | 171985481 |      0 |        0 | (54054,1)  |           2 |       2306 |     24 |        |        
  2 |   8112 |        1 |     35 | 171985481 |      0 |        0 | (54054,2)  |           2 |       2306 |     24 |        |        
  3 |   8072 |        1 |     35 | 171985481 |      0 |        0 | (54054,3)  |           2 |       2306 |     24 |        |        
  4 |   8032 |        1 |     35 | 171985481 |      0 |        0 | (54054,4)  |           2 |       2306 |     24 |        |        
  5 |   7992 |        1 |     35 | 171985481 |      0 |        0 | (54054,5)  |           2 |       2306 |     24 |        |        
  6 |   7952 |        1 |     35 | 171985481 |      0 |        0 | (54054,6)  |           2 |       2306 |     24 |        |        
  7 |   7912 |        1 |     35 | 171985481 |      0 |        0 | (54054,7)  |           2 |       2306 |     24 |        |        
  8 |   7872 |        1 |     35 | 171985481 |      0 |        0 | (54054,8)  |           2 |       2306 |     24 |        |        
  9 |   7832 |        1 |     35 | 171985481 |      0 |        0 | (54054,9)  |           2 |       2306 |     24 |        |        
 10 |   7792 |        1 |     35 | 171985481 |      0 |        0 | (54054,10) |           2 |       2306 |     24 |        |        
(10 rows)  
Time: 0.589 ms  
digoal=# select * from heap_page_items(get_raw_page('digoal.pg_lock_test',54055));  
ERROR:  block number 54055 is out of range for relation "pg_lock_test"  
Time: 0.463 ms  
```  
块超出,说明54054已经是最大块了, 没有遗漏. 说明select ... for update绝对不可能产生了新的tuple.  
回滚SESSION A后, pgrowlocks就看不到digoal.pg_lock_test的锁信息了.  
```  
digoal=# select * from pgrowlocks('digoal.pg_lock_test');  
 locked_row | lock_type | locker | multi | xids | pids   
------------+-----------+--------+-------+------+------  
(0 rows)  
Time: 1178.131 ms  
```  
再观察ctid(0,2)的tuple head信息.  
```  
digoal=# select * from heap_page_items(get_raw_page('digoal.pg_lock_test',0)) where lp=2;  
 lp | lp_off | lp_flags | lp_len |  t_xmin   |  t_xmax   | t_field3 | t_ctid | t_infomask2 | t_infomask | t_hoff | t_bits | t_oid   
----+--------+----------+--------+-----------+-----------+----------+--------+-------------+------------+--------+--------+-------  
  2 |   8112 |        1 |     35 | 171985481 | 171985490 |        0 | (0,2)  |           2 |       2370 |     24 |        |        
(1 row)  
Time: 0.689 ms  
```  
t_xmax 变成了171985490, t_infomask变更为2370 转成16进制就是942 是以下组合 :   
```  
HEAP_XMIN_COMMITTED  
HEAP_XMAX_INVALID  
HEAP_HASVARWIDTH  
HEAP_XMAX_EXCL_LOCK  
```  
说明这条记录的xmax是无效的(这里的t_xman记录了锁/回滚这条记录的事务ID, 回滚后t_xmax标记为无效, 所以锁也随之失效).  
## 三、 最后要测试update. 这是会产生新的tuple的操作. 这次我们取ID=3的记录.  
SESSION A :   
```  
digoal=> begin;  
BEGIN  
Time: 0.178 ms  
digoal=> select ctid,cmin,cmax,xmin,xmax,* from pg_lock_test where id=3;  
 ctid  | cmin | cmax |   xmin    |   xmax    | id |  info    
-------+------+------+-----------+-----------+----+--------  
 (0,3) |    0 |    0 | 171985481 | 171985483 |  3 | digoal  
(1 row)  
Time: 1242.763 ms  
digoal=> select * from pg_backend_pid();  
 pg_backend_pid   
----------------  
           1934  
(1 row)  
Time: 0.294 ms  
digoal=> update pg_lock_test set info='test' where id=3;  
UPDATE 1  
Time: 1227.698 ms  
-- 这里会话A看到的是自己修改过的但是尚未提交的id=3的记录, 所以xmin=171985491. ctid是在BLOCKs的最末端插入的=(54054,11) .  
digoal=> select ctid,cmin,cmax,xmin,xmax,* from pg_lock_test where id=3;  
    ctid    | cmin | cmax |   xmin    | xmax | id | info   
------------+------+------+-----------+------+----+------  
 (54054,11) |    0 |    0 | 171985491 |    0 |  3 | test  
(1 row)  
Time: 1235.105 ms  
```  
SESSION B :   
```  
digoal=# select * from pgrowlocks('digoal.pg_lock_test');  
 locked_row | lock_type |  locker   | multi |    xids     |  pids    
------------+-----------+-----------+-------+-------------+--------  
 (0,3)      | Exclusive | 171985491 | f     | {171985491} | {1934}  
(1 row)  
Time: 1182.028 ms  
```  
我们看到,   
1\. digoal.pg_lock_test的行锁有1条, 锁这行的事务的事务号为171985491. pid=1934.  
2\. 锁类型为 Exclusive.  
查看这里被锁的行ctid=(0,3)的tuple head信息  
```  
digoal=# select * from heap_page_items(get_raw_page('digoal.pg_lock_test',0)) where lp=3;  
 lp | lp_off | lp_flags | lp_len |  t_xmin   |  t_xmax   | t_field3 |   t_ctid   | t_infomask2 | t_infomask | t_hoff | t_bits | t_oid   
----+--------+----------+--------+-----------+-----------+----------+------------+-------------+------------+--------+--------+-------  
  3 |   8072 |        1 |     35 | 171985481 | 171985491 |        0 | (54054,11) |           2 |        258 |     24 |        |        
(1 row)  
Time: 0.716 ms  
```  
t_infomask=258 转成16进制就是0x0102 包含了如下组合 :   
```  
HEAP_HASVARWIDTH  
HEAP_XMIN_COMMITTED  
```  
注意这里的t_ctid=54054,11 说明这条记录还指向了另一条tuple. 那就是update后新插入的tuple, tuple头信息如下 :   
```  
digoal=# select * from heap_page_items(get_raw_page('digoal.pg_lock_test',54054)) where lp=11;  
 lp | lp_off | lp_flags | lp_len |  t_xmin   | t_xmax | t_field3 |   t_ctid   | t_infomask2 | t_infomask | t_hoff | t_bits | t_oid   
----+--------+----------+--------+-----------+--------+----------+------------+-------------+------------+--------+--------+-------  
 11 |   7752 |        1 |     33 | 171985491 |      0 |        0 | (54054,11) |           2 |      10242 |     24 |        |        
(1 row)  
Time: 0.599 ms  
```  
t_infomask=10242 转成16进制就是0x2802 包含了如下组合 :   
```  
HEAP_UPDATED  
HEAP_XMAX_INVALID  
HEAP_HASVARWIDTH  
```  
说明还未提交.   
回滚SESSION A后, pgrowlocks就看不到digoal.pg_lock_test的锁信息了.  
```  
digoal=# select * from pgrowlocks('digoal.pg_lock_test');  
 locked_row | lock_type | locker | multi | xids | pids   
------------+-----------+--------+-------+------+------  
(0 rows)  
Time: 1178.131 ms  
```  
再观察ctid(0,3)的tuple head信息.  
```  
digoal=# select * from heap_page_items(get_raw_page('digoal.pg_lock_test',0)) where lp=3;  
 lp | lp_off | lp_flags | lp_len |  t_xmin   |  t_xmax   | t_field3 |   t_ctid   | t_infomask2 | t_infomask | t_hoff | t_bits | t_oid   
----+--------+----------+--------+-----------+-----------+----------+------------+-------------+------------+--------+--------+-------  
  3 |   8072 |        1 |     35 | 171985481 | 171985491 |        0 | (54054,11) |           2 |       2306 |     24 |        |        
(1 row)  
Time: 0.711 ms  
```  
t_xmax 变成了171985491, t_infomask变更为2306 转成16进制就是902 是以下组合 :   
```  
HEAP_XMIN_COMMITTED  
HEAP_XMAX_INVALID  
HEAP_HASVARWIDTH  
```  
再观察ctid(54054,11)的tuple head信息.  
```  
digoal=# select * from heap_page_items(get_raw_page('digoal.pg_lock_test',54054)) where lp=11;  
 lp | lp_off | lp_flags | lp_len |  t_xmin   | t_xmax | t_field3 |   t_ctid   | t_infomask2 | t_infomask | t_hoff | t_bits | t_oid   
----+--------+----------+--------+-----------+--------+----------+------------+-------------+------------+--------+--------+-------  
 11 |   7752 |        1 |     33 | 171985491 |      0 |        0 | (54054,11) |           2 |      10754 |     24 |        |        
(1 row)  
Time: 0.624 ms  
```  
t_xmax 变成了171985491, t_infomask变更为10754 转成16进制就是2A02 是以下组合 :   
```  
HEAP_UPDATED  
HEAP_XMIN_INVALID  
HEAP_XMAX_INVALID  
HEAP_HASVARWIDTH  
```  
## 参考  
1\. src/include/access/htup.h  
2\. src/include/utils/tqual.h  
3\. backend/storage/lmgr  
4\. src/include/access/heapam.h  
5\. src/include/storage/lmgr.h  
6\. src/include/storage/lock.h  
7\. src/backend/access/heap/heapam.c  
8\. contrib/pgrowlocks/pgrowlocks.c  
9.\ http://blog.163.com/digoal@126/blog/static/163877040201291575523922/  
10\. src/tools/backend/index.html  
11\. http://momjian.us/main/writings/pgsql/locking.pdf 讲得比较浅, 那几个视图还是比较有用的.  
12\. shared hash lock table :   
```  
max_locks_per_transaction (integer)  
The shared lock table tracks locks on max_locks_per_transaction * (max_connections + max_prepared_transactions) objects (e.g., tables);   
hence, no more than this many distinct objects can be locked at any one time. This parameter controls the average number of object locks allocated for each transaction;   
individual transactions can lock more objects as long as the locks of all transactions fit in the lock table. This is not the number of rows that can be locked; that value is unlimited.   
The default, 64, has historically proven sufficient, but you might need to raise this value if you have clients that touch many different tables in a single transaction.   
This parameter can only be set at server start.  
Increasing this parameter might cause PostgreSQL to request more System V shared memory than your operating system's default configuration allows.   
See Section 17.4.1 for information on how to adjust those parameters, if necessary.  
When running a standby server, you must set this parameter to the same or higher value than on the master server.   
Otherwise, queries will not be allowed in the standby server.  
```  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")