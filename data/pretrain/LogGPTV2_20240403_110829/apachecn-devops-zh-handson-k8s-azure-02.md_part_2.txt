9 app:azure-投票-支持
10 模板:
11 元数据:
12 个标签:
13app:azure-投票支持
14spec:
15 个容器:
16-姓名:azure-投票支持
17 图片:背
18 资源:
19 项请求:
20 个 CPU:100 米
21 英里:128 英里
22 个限制:
23 个 CPU:250 公尺
24 英里:256 英里
25 个端口:
26-容器港口:6379
27 名:里兹
28 ---
29 堆叠版本:v1
30 公里:服务
31 元数据:
32 名称:蔚蓝-投票-支持
33spec:
34 个端口:
35 端口:6379
36 选择器:
37 app:azure-投票支持
38 ---
39 API version:apps/v1
40 公里:部署
41 元数据:
42 名称:蔚蓝-投票-前线
43spec:
44 个副本:1 个
45 选择器:
46 匹配标签:
47 app:azure-投票-前线
48 模板:
49metadata:
50 个标签:
51app:蔚蓝-投票-前线
52spec:
53 个容器:
54-姓名:azure-投票-前线
55 image:Microsoft/azure-投票前沿:v1
56 资源:
57 项请求:
58 个 CPU:100 米
59 英里:128 英里
60 极限:
61 个 CPU:250 公尺
62 英里:256 英里
63 个端口:
64-容器港口:80
65env:
66 范名:里兹
67 价值:“Azure-投票支持”
68 ---
69 API version:v1
70 公里:服务
71 元数据:
72 名称:蔚蓝-投票-前线
73spec:
74 型:负载平衡器
75 个端口:
76 端口:80
77 选择器:
78 app:azure-投票-前线
您可以在 Cloud Shell 代码编辑器中对文件进行更改。如果您已经进行了更改，您可以通过单击...右上角图标，然后点击【保存】将文件保存为*图 2.21* 高亮显示:
![Saving changes in the Cloud Shell code editor](img/B17338_02_21.jpg)
图 2.21:保存 azure-vote.yaml 文件
应该保存该文件。您可以使用以下命令检查这一点:
蓝猫，yaml
#### 注意:
点击*选项卡*按钮，在 Linux 中展开文件名。在前面的场景中，如果在输入 **az** 后点击*标签*，应该会扩展到 **azure-vote.yaml** 。
现在，让我们启动应用:
忽必烈 create-f Azul vote
你应该很快看到如图*图 2.22* 所示的输出，它告诉你已经创建了哪些资源:
![Output of the kubectl create command](img/B17338_02_22.jpg)
图 2.22:kube CTL 创建命令的输出
您已经成功创建了演示应用。在下一节中，您将检查为该应用创建的所有不同的 Kubernetes 对象，并连接到您的应用。
### 探索演示应用
在前一节中，您部署了一个演示应用。在本节中，您将探索 Kubernetes 为此应用创建的不同对象，并连接到它。
您可以通过键入以下命令来检查部署进度:
忽必烈得到 pods
如果您在创建应用后不久键入此内容，您可能已经看到某个 pod 仍在**容器创建**过程中:
![Output of the kubectl get pods command](img/B17338_02_23.jpg)
图 2.23:kube CTL get pods 命令的输出
#### 注意
键入 **kubectl** 会变得乏味。您可以使用**别名**命令让您的生活更轻松。可以使用 **k** 代替 **kubectl** 作为别名，命令如下:**别名 k=kubectl** 。运行完前面的命令后，可以直接使用 **k 获取 pods** 。出于本书的教学目的，我们将继续使用完整的 **kubectl** 命令。
点击*向上箭头*键，按*回车*重复 **kubectl 获取 Pod **命令，直到所有 Pod 的状态为**运行**。设置所有 Pod 需要一些时间，您可以使用以下命令来跟踪它们的状态:
忽必烈得到 pods watch
要停止跟踪 Pod 的状态(当它们都处于运行状态时)，您可以按下 *Ctrl* + *C* 。
为了公开访问您的应用，您还需要一件事。您需要知道负载平衡器的公共 IP，以便可以访问它。如果你还记得从*第 1 章*、*到容器和 Kubernetes* 的介绍，Kubernetes 中的一个服务将创建一个 Azure 负载平衡器。这个负载平衡器将在您的应用中获得一个公共 IP，这样您就可以公开访问它。
键入以下命令获取负载平衡器的公共 IP:
kubectl 获取服务 azure-投票-前台-观察
首先，外部 IP 可能会显示**待定**。等待公共 IP 出现，然后按 *Ctrl* + *C* 退出:
![Watching the service IP change from pending to the actual IP address](img/B17338_02_24.jpg)
图 2.24:观察服务 IP 从挂起到实际 IP 地址的变化
记下外部 IP 地址，并在浏览器中键入。您应该会看到类似于*图 2.25* 的输出:
![Output of the application you just launched as seen in the browser](img/B17338_02_25.jpg)
图 2.25:您刚刚启动的实际应用
点击猫或狗，看着计数上升。
要查看 Kubernetes 中为您的应用创建的所有对象，您可以使用 **kubectl get all** 命令。这将显示类似于*图 2.26* 的输出:
![Viewing all the objects by executing the kubectl get all command](img/B17338_02_26.jpg)
图 2.26:探索为您的应用创建的所有 Kubernetes 对象
如您所见，创建了许多对象:
*   Pod :你会看到两个 Pod ，一个用于后端，一个用于前端。
*   服务:您还将看到两个服务，一个用于类型**集群 IP** 的后端，一个用于类型【负载平衡器】的前端。这些类型的含义将在*第 3 章*、*应用在 AKS 上的部署中探讨。*
*   部署:您还将看到两个部署。
*   复制集:最后你会看到两个复制集。
您也可以从 Azure 门户查看这些对象。例如，要查看这两个部署，您可以单击 AKS 窗格左侧导航菜单中的**工作负载**，您将看到集群中的所有部署，如*图 2.27* 所示。此图显示了集群中的所有部署，包括系统部署。在列表的底部，您可以看到自己的部署。从图中还可以看到，您可以使用顶部菜单浏览其他对象，如 pod 和 ReplicaSets:
![Viewing all the deployments in our cluster using the Azure portal](img/B17338_02_27.jpg)
图 2.27:在 Azure 门户中探索应用的两个部署部分
现在，您已经启动了自己的集群和第一个 Kubernetes 应用。请注意，Kubernetes 负责连接前端和后端、将它们暴露给外部世界以及为服务提供存储等任务。
在进入下一章之前，让我们清理一下您的部署。由于您从一个文件创建了所有内容，您也可以通过将 Kubernetes 指向该文件来删除所有内容。键入**kube CTL delete-f azure-vote . YAML**并观看您的所有对象被删除:
![Deleting all the objects by running the kubectl delete command](img/B17338_02_28.jpg)
图 2.28:清理应用
在本节中，您已经使用 Cloud Shell 连接到了您的 AKS 集群，成功启动并连接到了一个演示应用，探索了使用 Cloud Shell 和 Azure 门户创建的对象，最后清理了创建的资源。
## 总结
完成本章后，您现在将能够访问和导航 Azure 门户，以执行部署 AKS 集群所需的所有功能。我们利用 Azure 上的免费试用来了解 AKS 的来龙去脉。我们还推出了自己的 AKS 集群，如果需要，可以使用 Azure 门户定制配置。
我们也使用了云壳，没有在电脑上安装任何东西。这对于接下来的所有部分都很重要，在这些部分中，您不仅仅要启动简单的应用。最后，我们推出了一项公众可访问的服务。该应用的框架与我们将在后面章节中介绍的复杂应用的框架相同。
在下一章中，我们将深入研究将应用部署到 AKS 上的不同部署选项。