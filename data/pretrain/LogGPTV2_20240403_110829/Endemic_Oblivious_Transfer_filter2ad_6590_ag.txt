67
46
11
6
128
LAN
230
18
203
148
28
24
m
512
1
32
128
512
662
64
573
480
111
105
106
104
155
54
53
101
WAN
179
115
185
135
75
108
301
210
304
240
110
154
581
272
593
550
225
481
Figure 10: Running times in milliseconds of our OT protocols and [CO15, NP01]. ASM indicates
if the implementation was written in assembly (better performance). †We emphasize that both,
[NP01] and [CO15] do not give full simulation based malicious security, but only weaker security
guarantees.
Protocol
Security
Πext-U
[KOS15]
Πext-R
Πext-U
Πext-Rπ
Πext-Uπ
F Su
OT,RO → F U
F S
OT,RO → F S
OT,RO → F R
F Su
OT,RO → F U
F Su
OT ,IC → F R
F Uu
F Uu
OT ,IC → F U
OT
OT
OT
OT
OT
OT
Total
Rounds
4
5
2
4
3
5
276
2
2
2
2
2
n
212
216
220
224
LAN
151
1,612
24,060
84
76
70
22
24
640
610
547
174
101
8,361
8,224
7,429
1,158
720
20
28
14
18
14
6
m
212
345
865
406
407
300
395
216
220
224
WAN
833
1769
700
708
530
645
7,003
7,504
2,488
2,666
2,097
2,128
103,481
85,077
32,315
32,856
25,701
26,256
Figure 11: Running times in milliseconds of our 1-out-of-n OT extension protocols and [KOS15]
as implemented by [Rin]. Base OT running times are not included. RO indicates that a random
oracle is used to has while IC additionally indicates an ideal cipher was used in the Davie-Meyer
compression function, see Section 5.2. Rounds includes the rounds required for base OTs.
25 milliseconds (when using an assembly based implementation). We note that one would rarely
perform a diﬀerent number of OTs than 128 which are used as a seed for OT extension.
In the WAN setting the decreased round complexity and communication of the DH approach
allows it to achieve the smallest running times. To perform 128 OTs the DH protocol requires 130
milliseconds while the Kyber protocol requires 154 milliseconds. However, this increased perfor-
mance comes at the expense of only achieving F E
OT-security.
We also compare against the protocol of [CO15] and [NP01]. In the LAN setting the fast protocol
is that of [CO15] which requires each party to performance an amortized three exponentiation per
OT while our DH protocol requires four. Both require ﬁve in the worst case. However, the [CO15]
approach suﬀers from a technical issue in the proof where the input of the receiver can not be
extracted at the appropriate time. As a result, to compose this protocol with OT extension requires
additional computation and rounds of communication which we do not consider in our comparison,
e.g. see [DKLs18, Appendix A]. In addition, our hash to group implementation which takes up the
majority of the running time diﬀerence is not written in assembly. We suspect the gap between us
and [CO15] narrow signiﬁcantly if ours was fully optimized. We also note that our protocol achieve
full endemic security in just one round or sender chosen message in two rounds.
Regardless, in the WAN setting with 128 OT our protocols achieve the best performance of
110ms (DH) and 154ms (Kyber) compared to 210ms by [CO15]. To achieve simulation bases
security, at least one more round of communication is requires which would bring their time to at
least 260ms, a 2.3× increase compared to our protocol. To perform a single OT, our DDH protocol
requires 145 bytes of communication, our Kyber protocol requires 5,934 bytes, [CO15] requires the
least with 112 bytes and [NP01] requires 165 bytes.
25
We now turn our attention to the OT extension performance result as shown in Figure 11. We
compare our protocols to the fastest implementation [KOS15, Rin]. In particular, we update the
[Rin] implementation of [KOS15] to allow the sender to specify the output messages and include the
index i in the call to the random oracle H, as speciﬁed by [KOS15]. . We implement ﬁve variants
of our proposals where the output strings are sampled by the protocol (or possibly a malicious
party). The 1-out-of-2 Πext-R, Πext-Rπ protocols in the random oracle and ideal cipher model require
2 and 3 rounds of communication, respectively, and achieves F R
OT-security. To reduce the rounds
we apply the Fiat-Shamir transformation [FS87] to the sigma protocol of [KOS15] for Step 4. We
also implement the Πext-U and Πext-Uπ which both achieve F U
OT-security.
In the LAN setting where communication and round complexity has little impact the fastest
protocol is our Πext-Uπ protocol which achieves our strongest security notion. The performance
of this approach derives from the exclusive use of AES in the protocol which has extremely fast
hardware support. For example, Πext-Uπ is 10× faster compared to the Πext-U protocol which
achieves the same F U
OT-security in the random oracle model. The next fastest protocol is Πext-Rπ
which achieves F R
OT-security in the ideal cipher model. This protocol only requires 3 rounds of
communication which allows it to be the most eﬃcient in the WAN setting. However, the improved
round complexity requires hashing the transcript of the protocol which decrease the running time
in the LAN setting compared to Πext-Uπ.
In the random oracle model we implement the Πext-R protocol which only requires 2 rounds of
communication, including the base OTs. In particular, the OT extension sender sends the ﬁrst base
OT message and the receiver sends the second base OT message, the extension matrix U and Fiat-
Shamir proof of consistency. One short coming of this approach is that F R
OT-security is achieved.
However, we argue that this level of security could be suﬃcient for special purpose protocols which
require both high performance and low round complexity. We also implement the Πext-U protocol
which requires two more rounds and does not apply the Fiat-Shamir transformation which allows
improved performance in the LAN setting at the expense of worse performance in the WAN setting.
This protocol is also implemented for 1-out-of-276 OT where the sender computes three of the OT
strings.
For a point of comparison we benchmark the [KOS15] protocol and ﬁnd that our protocols
are between 3 and 8 times more eﬃcient, depending on the network setting. Our performance
improvements stem from the use of of the Ideal Cipher model (AES) and that fact that our protocols
output random strings where as the secure version of [KOS15] requires the sender to send encrypted
strings. This eﬀectively triples the communication overhead and adds an additional round to the
protocol. In particular, all of our extension protocols require an amortized κ bits of communication
per 1-out-of-2 OT while [KOS15] requires 3κ.
Acknowledgements
We thank Jonathan Katz and Mike Rosulek for pointing out ﬂaws with the UC security in the
original paper. In this version, we ﬁxed ﬂaws and removed wrong claims. This mainly aﬀects UC
security of our one-round OT constructions. It is an open question to obtain UC secure one-round
endemic OT from uniform key agreement. For our one-round UC OT from cyclic group based
assumptions, we seem to require signiﬁcantly stronger assumptions than previously claimed.
26
References
[AG]
D. F. Aranha and C. P. L. Gouvˆea. RELIC is an Eﬃcient LIbrary for Cryptography.
https://github.com/relic-toolkit/relic.
[ALSZ15] Gilad Asharov, Yehuda Lindell, Thomas Schneider, and Michael Zohner. More eﬃcient
oblivious transfer extensions with security for malicious adversaries. In Elisabeth Os-
wald and Marc Fischlin, editors, EUROCRYPT 2015, Part I, volume 9056 of LNCS,
pages 673–701. Springer, Heidelberg, April 2015.
[ALSZ17] Gilad Asharov, Yehuda Lindell, Thomas Schneider, and Michael Zohner. More eﬃcient
oblivious transfer extensions. Journal of Cryptology, 30(3):805–858, July 2017.
[BD18]
Zvika Brakerski and Nico D¨ottling. Two-message statistically sender-private OT from
LWE. In Amos Beimel and Stefan Dziembowski, editors, TCC 2018, Part II, volume
11240 of LNCS, pages 370–390. Springer, Heidelberg, November 2018.
[BDD+17] Paulo S. L. M. Barreto, Bernardo David, Rafael Dowsley, Kirill Morozov, and Anderson
C. A. Nascimento. A framework for eﬃcient adaptively secure composable oblivious
transfer in the ROM. Cryptology ePrint Archive, Report 2017/993, 2017. http:
//eprint.iacr.org/2017/993.
[BDK+17] Joppe Bos, L´eo Ducas, Eike Kiltz, Tancr`ede Lepoint, Vadim Lyubashevsky, John M.