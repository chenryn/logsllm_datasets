πG with start node vG,0 and sink vG,m. VG indicates the
nodes in πG (VG ⊆ VD). For a clone product, we deﬁne
C = (c0, ..., cn), πC (with start node vC,0 and sink vC,n),
and VC (VC ⊆ VD) analogously.
The detector performs event collection at some time tD,
triggered by a product reaching its sink. We deﬁne an event
trace GC as a time-sorted combination of the sequences
G and C at the detection time tD. We consider g0 to
be the into-the-chain event for the genuine product; there-
fore, the ﬁrst event of a combination GC is g0. We de-
ﬁne TGC(G, C) = (GC0, ..., GCj) as the set of all possible
combinations of the sequences G and C. The set size |TGC|
is equal to(cid:0)|G|+|C|+1
|C|+1 (cid:1) − 1.1
Each reader may fail with probability pmw in a tag write
operation and with probability pmr in a tag read operation.
The detector receives an event in G or C with probability
by the detector at detection time tD.
Trace evidence. We deﬁne Ppass as the probability that a
pme. Thus we deﬁnedGC as the actual event trace received
tracedGC contains no clone evidence according to the detec-
tor D and given adversary A. E = (ǫ0, ..., ǫi) denotes clone
evidence instances observed under the rule set of Equation 1
based on a tailing operation with tag tail size t (in symbols),
tail symbol size s (in bits), and tail pointer size p = log2(t).
The size m of the tag memory dedicated to the detection
mechanism is equal to t · s + ⌈p⌉ bits. We specify Ppass as:
Ppass =
|E|−1Yi=0
Pǫi =(cid:18)
1
2(t−1)·s+p(cid:19)a0
·
|E|−1Yi=1 (cid:18) 1
2(t−1)·s(cid:19)ai
· bi.
1Combination with repetitions (cid:0)n+k−1
k
(cid:1) for n = |G|+1, k = |C|+1.
−4
10
−6
10
t=2, s=15
t=3, s=10
−8
10
c
c
u
s
P
t=4, s=7
t=7, s=4
t=14, s=2
t=27, s=1
0
10
−4
10
−8
10
c
c
u
s
10
P
−12
−10
10
−12
10
1
2
−16
10
−20
10
−24
10
0
9 10
4
3
8
|C| (# of clone events)
5
6
7
 m=4 bits
 m=8 bits
 m=16 bits
 m=32 bits
 m=64 bits
1
| (# of compromized readers)
3
4
2
|V
A
5
0
10
−1
10
−2
10
c
c
u
s
P
−3
10
−4
10
−5
10
0
)
s
r
e
d
a
e
r
f
o
m=16 bits
m=32 bits
m=64 bits
m=8 bits, A
1
m=4 bits
m=8 bits
#
(
|
i
n
m
A
,
V
|
 ES
 K
h
5
4
3
2
1
1
| (# of compromized readers)
2
3
4
|V
A
5
1
2
4
3
8
|C| (# of clone events)
5
6
7
9 10
(a)
(b)
(c)
(d)
Figure 4. Study of clone events and compromised nodes for 1bit(cid:173)tailing (|G| = 10 events). Graphs
show: (a) Success probability Psucc for adversary A0 as a function of number |C| of clone events for
various values of tail size t and tail symbol size s (m = 32 bits); (b) Psucc for adversaries A0 and A1 as
a function of compromised nodes |VA| for various tag memory sizes m (s = 1 bit, |C| = 5, and |VA| = 0
for A0); (c) Same as graph (b), but for A2; (d) Mean number of readers that A3 must compromise to
suppress evidence fully in a set TGC(G, C), as a function of |C|, for strategies Kh and ES.
Here, Pǫi is the probability that clone evidence ǫi passes
unnoticed (does not appear); ai = 0 when adversary A can-
cels out evidence ǫi (otherwise ai = 1); bi = 0 when the
number n of (clone or genuine) events between evidence
ǫi−1 and ǫi is not a multiple of t (otherwise bi = 1). The
ﬁrst term (i = 0) captures the probability that a clone is in-
jected with correct tail and pointer values (w.r.t. the genuine
product). The second term (i > 0) captures the probability
that consistent genuine and clone tails (and pointers) remain
consistent after n tailing operations on one of the two tails
(i.e., lack of clone evidence persists).
Adversary’s success probability. We deﬁne Psucc as the
probability that a clone injected by adversary A into the
supply chain at node vC,0 ∈ V is not observed by the de-
tector D. This success probability sums over all possible
combinations of the sequences G and C. It is deﬁned as:
Psucc =
|TGC |−1Xi=0
PGC(GCi) · Ppass(dGC i, A),
where PGC(GCi) is the probability associated with combi-
nation GCi under probability distribution PGC .
Adversary. Under the model of Section 2.2, we deﬁne a
hierarchy of adversaries, ordered by increasing capability:
A0: The adversary injects clones into the supply chain at
some selected node vC,0, but does not compromise
readers or inﬂuence product paths.
A1: The adversary injects clones at some selected node
vC,0 and compromises a set of readers VA (chosen ran-
domly) on the clone path πC (VA ⊆ VC ⊂ VD). Since
the adversary has no knowledge of the genuine path
πG, it only prevents compromised readers from scan-
ning clones (i.e., blocks them).
A2: Along with A1’s capabilities, the adversary can eaves-
drop on genuine path πG so as to inject clones with
correct memory content, i.e., Pǫ0 = 1 for all GCi.
A3: The adversary knows relative event timestamps and
also knows genuine paths and forces its clones to fol-
low them. After injecting a clone with correct mem-
ory contents at some selected node vC,0, it can com-
promise any reader in VD to cancel out clone evi-
dence in a sequence GCi. The adversary can abuse
readers to prevent tag scanning (blocking), inject fake
events into local databases (emulation), and modify
tag memory contents (tampering). Readers are se-
lected and misused according to a strategy K detailed
in the next section.
5.2 Security Evaluation
In this section we evaluate the security of tailing in terms
of success probability Psucc for the above-described adver-
saries. We let PGC be uniformly distributed.
Figure 4(a) shows the success probability Psucc for ad-
versary A0 as a function of the number of clone events |C|
and over different combinations of tail size t and symbol
size s (dedicated tag memory size m = 32 bits and number
of genuine events |G| = 10). The best performing combi-
nation of (t, s) is t = 27 symbols and s = 1 bit. Intuitively,
with 1-bit symbols, the adversary has to guess all bits in the
tail but one, resulting in maximal uncertainty. For the rest
of our study, we only consider 1-bit symbols and call this
1bit-tailing.
The impact of the number of nodes |VA| that an ad-
versary compromises and of different memory sizes m is
shown in Figures 4(b) and 4(c) for adversaries A0-A1 and
A2, respectively.
(Here, |G| = 10, |C| = 5; for A0,
|VA| = 0.) For A1 and A2, compromising nodes dramati-
cally raises the adversary’s success probability, even elim-
inating the beneﬁts of a larger tag memory (m > 8 bits).
For A0, though, the larger m, the lower Psucc. By inject-
ing clones with correct memory contents, A2 achieves the
highest Psucc values.
As adversary A3 can compromise readers, it deﬁnes a
lower bound on the number of compromised readers needed
to cancel out clone evidence in a tag trace. In fact, it may:
(i) Block all events between evidence instances ǫi−1 and ǫi
or (ii) between ǫi and ǫi+1, (iii) inject fake events between
events ej and ej+1 that lead to ǫi, or (iv) tamper with the
memory of the tag that generates ej+1. Actions (i) and (ii)
aim to remove events that create inconsistencies, while ac-
tions (iii) and (iv) aim to create consistent event transition.
Different strategies can be deployed to suppress evidence
in a sequence GC; Figure 4(d) shows, for varying numbers
of clone events, the mean minimum number of readers that
adversary A3 has to compromise in order to suppress evi-
dence in every trace GCi. Two choices of strategy K are
depicted. Strategy ES represents the optimal solution (in
terms of sequences of permitted A3 actions) computed by
exhaustive search individually for each trace GCi. Strat-
egy Kh is a heuristic derived from study of ES action se-
quences. Kh suppresses clone evidence ǫi by injecting fake
events between events ej and ej+1; if there is just one event
between ǫi and ǫi+1, Kh instead blocks ej+1. Interestingly,
this simple strategy yields results comparable to the optimal
solution ES. Both strategies highlight the power of A3 to
successfully suppress evidence with relatively few readers,
e.g., 5.5 readers on average for |C| = 10 events.
Table 1 summarizes the percentage of the combinations
in TGC that lead to Ppass = 1 (i.e., that present no clone
evidence) for the four adversary types (|G| = 10 events and
|C| = 5 events; valid for any m). For the weakest adversary,
A0, all combinations in TGC present clone evidence. The
highest Ppass, equal to 2−[(t−1)·s+p], is obtained only for
those |G|+|C| combinations (15 combinations, or 0.19% of
the total) with a single and uninterrupted sequence of clone
events at the end. For A1, A2, and A3, some combinations
have Ppass = 1 (thus their higher Psucc values). For A1, be-
ing able to block |VA| nodes (VA ⊂ VC ) allows full suppres-
sion of clone evidence in(cid:0)|G|+|VA|
|VA| (cid:1)−1 combinations out of
the |TGC| possible ones, corresponding to the alignment of
|VA| clone events with compromised readers. For example,
for |VA| = 3, A1 is able to suppress evidence fully in all of
the 285 combinations (3.6% of the total) that contain only
events (c0), (c0, c1), or (c0, c1, c2). For A2, having A1’s ca-
pabilities plus injecting clones with correct tails allows suc-
Table 1. Percentage of combinations in the
set TGC(G, C) that lead to Ppass = 1 under
adversaries A0 to A3.
|G| = 10 events and
|C| = 5 events.
|VA| (# of compromised readers)
1
-
2
-
3
-
4
-
5
-
0.12% 0.81% 3.6% 12.5% 100%
0
0%
0%
0.19% 0.3% 0.97% 3.7% 12.6% 100%
0.19% 2.2% 14.8% 52% 89.9% 100%
A0
A1
A2
A3
cessful doctoring of a set of(cid:0)|G|+|VA|
|VA| (cid:1)−1+|G|+|C|−|VA|
combinations, corresponding to the union of sets leading to
the highest Ppass for A0 and A1. We note that adversaries
A1 and A2 are most likely to achieve success in cases where
they randomly compromise the leading nodes in the path
πC , i.e., from vC,0 to vC,|VA|−1. In fact, for m ≥ 8 bits,
values in Table 1 correspond to upper bounds on Psucc for
A1 and A2. A3 is more powerful in that it can compromise
readers adaptively; thus it achieves the highest Psucc values,
applicable as upper bounds for all adversary types.
5.3 Robustness Evaluation
In this section we evaluate the robustness of 1bit-tailing
against misevents, misreads, and miswrites.
Misevents cause inconsistencies in (genuine) tag traces,
which then raise false alarms.2 Figure 5(a) (curve em = 0)
shows the ratio of false alarms as a function of the misevent
probability pme for a trace composed of 10 genuine events.
To mitigate the effect of misevents, the set of rules in Equa-
tion 1 can be relaxed to accept a number em of missing
events between two (reported) time-consecutive events. In
this relaxation, a pair of events ei and ei+1 is considered
correct for which: (i) The symbols in the tail T Ti+1 are
the same as those in T Ti, except for the symbols rewritten
between positions T Pi (exclusive) and T Pi+1 (inclusive),
and (ii) the difference between the two tail pointers is at
most em plus one (the one corresponding to the pointer in-
crement). Formally, Equation 1 is then extended to:
T Ti+1[n] = T Ti[n]
∀n\ (T Pi, T Pi+1]
∀n ∈ (T Pi+1, T Pi]
if ∆T P > 0
if ∆T P < 0
∆T P (mod t) ≤ me + 1,
2Misevents may also cause clone misses. We evaluate this effect when
considering misreads.
−11
10
Psucc
−12
10
0
10
−2
10
−4
10
0
10
−2
10
−4
10
 em=0
 em=1
 em=2
 em=3
c
c
u
s
−6
10
P
−8
10
−10
10
−12