](https://images.seebug.org/content/images/2018/09/d8c1c14a-e469-400c-9f53-c16939e01d47.png-w331s)
![
](https://images.seebug.org/content/images/2018/09/d31ed57c-53f0-464c-8bb3-21790bbc2633.png-w331s)
图3-11 Ts_exec函数
Ts_exec函数负责一层数据包封装，此时数据包为：
表3
在Ts_exec函数中调用tcm_exec函数（参见图3-5），此时数据包为：
表4 ![
](https://images.seebug.org/content/images/2018/09/369ea2b3-ee7c-4b2c-95c3-57d166c71aea.png-w331s)
Tcm_exec调用udp_exec函数，最终调用sock.send函数通信。
##### 3.1.3 上传有效载荷
上传有效载荷与上传PresetStatus流程相同，在此不再赘述，有效载荷的数据包结构为：
表5 ![
](https://images.seebug.org/content/images/2018/09/17220173-34e5-4c64-a9c2-4c7913059b90.png-w331s)
#### 3.2 模块分析
“海渊”（TRISIS）构建了精简的TriStation通信框架，框架包含模块TsHi.py、TsBase.py、TsLow.py、TS_cnames.py。除框架外，“海渊”（TRISIS）还包含一个Script_test.py脚本，此脚本使用TriStation通信框架连接到Tricon，并注入载荷。
##### 3.2.1 Script_test.py分析
Script_test.py是使“海渊”（TRISIS）真正实现功能的模块，Script_test.py文件小巧，其通信功能的实现主要依赖TriStation协议支持库。由于TriStation协议目前为止仍是闭源协议，这些支持库极有可能为“海渊”（TRISIS）背后攻击者花费精力逆向得来，如果要对TriStation协议进行深入了解，对涉及的库文件进行分析是很好的选择。
Script_test.py与通信有关代码主要实现了代码上传、寻找仪表系统和利用库函数进行通信的功能（参见图3-12、3-13、3-14）。
 图3-12 代码上传
![
](https://images.seebug.org/content/images/2018/09/b7b659f1-790e-4977-a839-bd6d821575d3.png-w331s)
图3-13 寻找仪表系统
![
](https://images.seebug.org/content/images/2018/09/8613a38e-896e-4aa3-8881-0c65f845da8f.png-w331s)
图3-14 利用库函数进行通信
攻击步骤说明：
Script_test.py脚本首先尝试连接Tricon仪表系统，当不带参数启动时，直接广播搜索可识别TriStation协议的设备——Tricon仪表系统：
 图3-15 广播搜索Tricon仪表系统
一旦寻找到目标，将上传PresetStatus程序确定此目标是否可被利用；确定可被利用后，上传inject.bin和imain.bin两个主要载荷，篡改图表，以达到破坏或监控目的；最后，上传无用代码覆盖载荷消除痕迹。
##### 3.2.2 TsHi.py分析
TsHi.py是框架的高级接口，允许读写函数和程序，以及检索项目信息和与植入有效负载的交互（如下所述），其包括SafeAppendProgramMod函数，该函数可获取程序表，读取程序和函数，并将提供的shellcode附加到现有的控制程序，它还在必要时处理CRC32校验和。
表6
从函数名我们可以轻易猜出每个函数的作用，“海渊”（TRISIS）只使用了其中的SafeAppendProgramMod函数来上传其载荷。
![
](https://images.seebug.org/content/images/2018/09/eeda289d-ea84-47cb-84ff-c7b699b1bab4.png-w331s)
图3-16 SafeAppendProgramMod函数检查目标状态
之后，此函数获取目标系统中已上传的程序列表及函数数量。最后用AppendProgramMin函数上传载荷，并执行。
##### 3.2.3 TsBase.py分析
TsBase.py主要充当高级接口和低级TriStation功能代码之间的转换层，以及用于上载和下载程序或获取控制程序状态和模块版本等功能的数据格式：
表7 ![
](https://images.seebug.org/content/images/2018/09/6a34712a-14a9-4fa5-945c-da6664c50c4c.png-w331s)
##### 3.2.4 TsLow.py分析
TsLow.py可实现将上层制作的TriStation数据包通过UDP发送到Tricon通信模块（TCM）的功能的最底层，还包括通过向1502端口发送UDP“ping”广播消息来自动发现Tricon控制器。
表8 ![
](https://images.seebug.org/content/images/2018/09/7b95ed49-7e2c-4715-9dfd-823b4fc971c8.png-w331s)
##### 3.2.5 TS_cnames.py分析
TS_cnames.py包含TriStation协议功能和响应代码以及关键开关和控制程序状态的命名查找常量。
图3-17 状态码截图（部分）
### 4、分析小结
“海渊”（TRISIS）恶意代码呈现出了一些值得关注的特点，其开发者深入了解相关工控产品的控制协议，除了上载到PLC中的二进制模块外，其他框架和功能代码全部采用脚本编写，非常容易被改造和加工。而其打击点则在作为工业控制系统的生产安全监测单元的SIS上。
作为针对工业系统攻击的恶意代码，“海渊”（TRISIS）很自然的会被与“震网”（Stuxnet）和“乌克兰停电”等攻击关键基础工业设施的事件相比较。
与“震网”庞大的恶意代码工程相比，“海渊”（TRISIS）看起来相对简单。震网攻击对于离心机整体控制机制的介入是极为深入的，这本身也源自铀离心工艺处理的复杂性，基于攻击者所要达成的复杂的攻击目的（铀无法达到武器级要求、大量损毁离心机）、攻击的隐蔽性攻击和攻击需要达成的阶段持续性。震网是一个支撑完整战役过程的恶意代码。相比之下，尽管“海渊”（TRISIS）小巧的令人可怕，但其更像一个灵巧的“战斗部”，其在攻击行动中，可能是与其他的攻击植入手段和恶意代码配合使用的。对“海渊”（TRISIS）的编写者来说，其核心资源和成本消耗，主要是对SIS系统达成深入分析了解。
“海渊”（TRISIS）的攻击方式与乌克兰电网遭遇攻击停电事件的明显差异是“海渊”（TRISIS）攻击的位置更加纵深。乌克兰停电的攻击效果是通过直接在SCADA控制界面上拉闸达成的，粗暴而有效，其并不依赖于深度解析和篡改控制指令。尽管乌克兰停电事件中，攻击者也篡改了远程变电站串口以太网关中的固件，但这一操作目的是为了导致已经被“拉闸”的远程变电站不能被远程合闸恢复。而“海渊”（TRISIS）的打击点，则是为PLC重置新的逻辑，而且其攻击的是安全仪表系统。
从防御工作来看，由于“海渊”（TRISIS）以通过伪装为SIS的日志软件获得被执行的机会，因此重要的防御点即在对软件供应链的管控上。应在采购阶段，严格落实供应链的安全管控，从源头遏制危害。在工业系统的运维中，针对工控系统环境的新设备安装上线、软件的发布升级、运维手段的接入等，都应进行全面的前置检查和移动介质接入管控。
与“震网”、“乌克兰停电”事件类似的是，“海渊”（TRISIS）攻击依然是以获得关键PC节点为攻击入口的，这一特点是具有普遍性的。而一旦关键PC节点沦陷，攻击已经针对生产系统实施了纵深影响，则极难防御。对于工业基础设施来说，做好生产网络和办公网络中的PC端点防御是一个必须做好的基础性工作，对于重要PC节点必须形成严格的依托白名单的主动防御机制。
从现状来看，大部分工业控制系统对效率性能的考虑远多于安全考虑，而安全考量中，更多依然是以传统的应对事故视角，而非应对攻击视角。做好工业系统的安全防御工作，必须按照三同步的原则进行，在系统规划、建设、运维的全周期考虑网络安全问题。这是一个复杂和系统的工作，在可管理网络的基础上，建设可防御的网络，推动从基础结构安全、纵深防御、态势感知与积极防御到威胁情报的整体叠加演进。这个过程需要大量基础扎实的工作和预算投入。对已有系统的安全改造，因为涉及到生产业务的连续性、稳定性，可能牵扯到更多的问题。
关于对工业系统的安全问题和防御，安天在“震网”、“乌克兰停电”等事件的分析中，已经有过很多的探讨，我们会为用户提供更系统的建议和解决方案。
### 附录一：参考资料
[1]Dragos ：TRISIS Malware——Analysis of Safety System Targeted Malware  
[2]Ics-cert :MAR-17-352-01 HatMan—Safety System Targeted Malware (Update A)  
[3]《乌克兰电力系统遭受攻击事件综合分析报告》  
[4]《对Stuxnet蠕虫攻击工业控制系统事件的综合分析报告》  
### 附录二：HASH
![
](https://images.seebug.org/content/images/2018/09/0d46384c-4f54-4034-859a-2f7959f1868c.png-w331s)
* * *