# 从单片中提取高价值成分
Docker 平台为传统应用的现代化提供了一个巨大的机会，允许您从单片中提取功能，并在单独的容器中运行它们。如果您可以在一个特性中隔离逻辑，这也是一个将其迁移到的机会.NET Core，它允许您将其打包成一个小得多的 Docker 映像。
微软的.NET Core 已经看到它采用了越来越多的完整功能.NET 框架，但是移植了遗留系统的一部分.NET 应用.NET Core 仍可能是一项大事业。这是一个值得评估的选项，但它不一定是您现代化方法的一部分。打破整体的价值在于拥有可以独立开发、部署和维护的功能。如果这些组件使用完整的.NET 框架，您仍然可以获得这些好处。
当你更新传统应用时，你的优势是你已经了解了功能集。您可以识别系统中的高价值功能，并从将这些功能提取到它们自己的组件开始。好的候选功能是那些如果频繁变更就能为业务带来价值的功能，因此新的功能请求可以在不修改和测试整个应用的情况下快速构建和部署。
同样好的候选功能是那些如果保持不变就能为信息技术带来价值的功能——具有大量依赖性的复杂组件，业务不会经常改变。将这样的特性提取到单独的组件中意味着您可以将升级部署到主应用中，而不必测试复杂的组件，因为它保持不变。像这样分解一个整体会给你一组组件，每个组件都有自己的交付节奏。
在 NerdDinner，有一些优秀的候选人可以闯出自己的事业。在本章的剩余部分，我将重点介绍其中的一个:主页。主页是为应用的第一页呈现 HTML 的功能。在生产中快速安全地将更改部署到主页的过程将让业务实验有一个新的外观和感觉，评估新版本的影响，并决定是否继续使用它。
当前应用分布在两个容器之间。在本章的这一部分，我将把主页分成它自己的组件，这样整个 NerdDinner 应用将跨三个容器运行:
![](img/d7df03c2-ff8d-42c1-ae41-cda4c2ad0df0.png)
我不会更改应用的路由。用户仍然会首先来到 NerdDinner 应用，应用容器会调用新的主页服务容器来获取要显示的内容。这样我就不需要公开暴露新容器了。变更只有一个技术要求:主应用需要能够与新的主页服务组件进行通信。
您可以自由选择容器中的应用如何通信。Docker 网络为您提供对 TCP/IP 和 UDP 的全面协议支持。您可以使整个过程异步，在另一个容器中运行消息队列，让消息处理程序在其他容器中侦听。但是我将在这一章从更简单的东西开始。
# 在 ASP.NET 核心应用中托管用户界面组件
ASP.NET 核心是一个现代的应用栈，它在一个快速和轻量级的运行时中提供了最好的 ASP.NET MVC 和网络应用编程接口。ASP.NET 核心网站作为控制台应用运行，它们将日志写入控制台输出流，并且它们可以使用环境变量和文件进行配置。建筑让他们成为开箱即用的好 Docker。
将 NerdDinner 主页提取到新服务中的最简单方法是将其写成一个 ASP.NET 核心网站，只有一个页面，并从现有应用中转发新应用的输出。下面的截图显示了我在 Docker 的 ASP.NET 核心剃刀页面中运行的主页的时尚、现代的重新设计:
![](img/76fda9ae-bd4e-4b22-894c-26fef2521d7a.png)
为了将主页应用打包为 Docker 映像，我使用了与主应用和数据库映像相同的多阶段构建方法。在[第 10 章](10.html)、*用 Docker 启动持续部署管道、*中，您将看到如何使用 Docker 启动 CI/CD 构建管道，并将整个自动化部署过程联系在一起。
`dockeronwindows/ch03-nerd-dinner-homepage:2e`映像的 Dockerfile 使用了我在整个 ASP.NET 应用中使用的相同模式。构建器阶段使用 SDK 映像，并将包还原和编译步骤分开:
```
# escape=`
FROM microsoft/dotnet:2.2-sdk-nanoserver-1809 AS builder
WORKDIR C:\src\NerdDinner.Homepage
COPY src\NerdDinner.Homepage\NerdDinner.Homepage.csproj .
RUN dotnet restore
COPY src\NerdDinner.Homepage .
RUN dotnet publish 
```
Dockerfile 的最后阶段为`NERD_DINNER_URL`环境变量提供默认值。应用将其用作主页上链接的目标。Dockerfile 指令的其余部分只是复制到发布的应用中，并设置入口点:
```
FROM microsoft/dotnet:2.2-aspnetcore-runtime-nanoserver-1809
WORKDIR C:\dotnetapp
ENV NERD_DINNER_URL="/home/find"
EXPOSE 80
CMD ["dotnet", "NerdDinner.Homepage.dll"]
COPY --from=builder C:\src\NerdDinner.Homepage\bin\Debug\netcoreapp2.2\publish .
```
我可以在单独的容器中运行主页组件，但它还没有连接到主 NerdDinner 应用。按照我在本章中采用的方法，我需要对原始应用进行代码更改，以便集成新的主页服务。
# 从其他应用容器连接到应用容器
从主应用容器调用新的主页服务与连接到数据库基本相同:我将使用已知的名称运行主页容器，并且我可以使用它的名称和 Docker 的内置服务发现在其他容器中访问该服务。
对主应用中的`HomeController`类的简单更改将从新的主页服务传递响应，而不是从主应用呈现页面:
```
static HomeController()
{
  var homepageUrl = Environment.GetEnvironmentVariable("HOMEPAGE_URL", EnvironmentVariableTarget.Machine);
  if (!string.IsNullOrEmpty(homepageUrl))
  {
    var request = WebRequest.Create(homepageUrl);
    using (var response = request.GetResponse())
    using (var responseStream = new StreamReader(response.GetResponseStream()))
    {
      _NewHomePageHtml = responseStream.ReadToEnd();
    }
  } 
}
public ActionResult Index()
{
  if (!string.IsNullOrEmpty(_NewHomePageHtml))
  {
    return Content(_NewHomePageHtml);
  }
  else
  {
    return Find();
  }
}
```
在新代码中，我从一个环境变量中获得了主页服务的 URL。就像数据库连接一样，我可以在 Dockerfile 中为它设置一个默认值。这在分布式应用中是不好的做法，在分布式应用中，我们不能保证组件在哪里运行，但是在 Dockerized 应用中，我可以安全地做到这一点，因为我将控制容器的名称，所以我可以确保在部署它们时服务名称是正确的。
我已经将这张更新的图片标记为`dockeronwindows/ch03-nerd-dinner-web:2e-v2`。现在要开始整个解决方案，我需要运行三个容器:
```
docker container run -d -p 1433:1433 `
 --name nerd-dinner-db ` 
 -v C:\databases\nd:C:\data `
 dockeronwindows/ch03-nerd-dinner-db:2e
docker container run -d -P `
 --name nerd-dinner-homepage `
 dockeronwindows/ch03-nerd-dinner-homepage:2e
docker container run -d -P dockeronwindows/ch03-nerd-dinner-web:2e-v2
```
当容器运行时，我浏览到 NerdDinner 容器的发布端口，看到新组件的主页:
![](img/f9efcc3f-8948-422d-84bb-56c6411792bb.png)
“查找晚餐”链接将我带回到最初的网络应用，现在我可以遍历主页，只需更换容器就可以发布新的用户界面，而无需发布或测试应用的其余部分。
What happened to the new UI? In this simple example, the integrated home page doesn't have the styling of the new ASP.NET Core version because the main application only reads the HTML for the page, not the CSS files or other assets. A better approach would be to run a reverse proxy in a container and use that as the entry point to other containers, so each container serves all its assets. I'll do that later in the book.
现在，我已经将我的解决方案分成了三个容器，极大地提高了灵活性。在构建时，我可以专注于提供最高价值的特性，而无需花费精力去测试没有变化的组件。在部署时，我可以快速而自信地发布，因为我知道我们推向生产的新映像将完全是经过测试的。然后在运行时，我可以根据组件的需求独立地扩展组件。
我确实有一个新的非功能性要求，即确保所有容器都有预期的名称，以正确的顺序启动，并且在同一个 Docker 网络中，因此解决方案作为一个整体可以正常工作。Docker 对此有支持，它专注于用 Docker Compose 组织分布式系统。我将在[第 6 章](06.html)、*用 Docker Compose 组织分布式解决方案中向您展示这一点。*
# 摘要
在本章中，我们讨论了三个主要主题。首先，我们讨论了容器化的遗产.NET Framework 应用，使他们成为优秀的 Docker 公民，并与平台集成进行配置、日志记录和监控。
然后，我们用 SQL Server Express 和 Dacpac 部署模型介绍了容器化数据库工作负载，构建了一个版本化的 Docker 映像，该映像可以作为新数据库运行容器，也可以升级现有数据库。
最后，我们展示了如何将单片应用的功能提取到单独的容器中，使用 ASP.NET 核心和 Windows Nano Server 打包一个快速、轻量级的服务，供主应用使用。
您已经学习了如何在 Docker Hub 上使用更多来自微软的映像，以及如何使用 Windows Server Core 进行完整备份.NET 应用，数据库的 SQL Server Express，以及.NET 核心映像。
在后面的章节中，我将回到 NerdDinner，并通过将特性提取到专用服务中来继续对其进行现代化。在此之前，在下一章中，我将更仔细地研究如何使用 Docker Hub 和其他注册表来存储映像。