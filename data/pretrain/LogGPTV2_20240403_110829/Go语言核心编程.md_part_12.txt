 实现对Hero 结构体切片的排序: sort.Sort(data Interface)
package main
import(
"fmt"
"sort"
"math/rand"
)
//1.声明Hero 结构体
type Hero struct{
Name string
Ageint
}
//2.声明一个 Hero 结构体切片类型
type HeroSlice[]Hero
//3.实现Interface 接口
func(hs HeroSlice) Len() int{
return len(hs)
}
//Less 方法就是决定你使用什么标准进行排序
//1. 按Hero 的年龄从小到大排序!!
func(hs HeroSlice) Less(i, j int)bool{
return hs[i].Age< hs[j].Age
//修改成对 Name 排序
//return hs[i].Name<hs[j].Name
}
func(hs HeroSlice) Swap(i, j int){
//交换
//temp :=hs[i]
//hs[i] =hs[j]
//hs[j] =temp
//下面的一句话等价于三句话
hs[i],hs[j]= hs[j],hs[i]
}
//1.声明Student 结构体
type Studentstruct{
Name string
Ageint
Scorefloat64
}
//将Student 的切片，安Score 从大到小排序!!
funcmain() {
//先定义一个数组/切片
varintSlice =[]int{0,-1, 10,7,90}
//要求对 intSlice 切片进行排序
//1. 冒泡排序...
//2. 也可以使用系统提供的方法
sort.Ints(intSlice)
fmt.Println(intSlice)
//请大家对结构体切片进行排序
//1. 冒泡排序...
//2. 也可以使用系统提供的方法
//测试看看我们是否可以对结构体切片进行排序
varheroes HeroSlice
fori :=0; i <10; i++ {
hero:=Hero{
Name :fmt.Sprintf("英雄|%d", rand.Intn(100)),
Age: rand.Intn(100),
}
//将 hero append 到 heroes 切片
heroes =append(heroes, hero)
}
//看看排序前的顺序
for_,v:=range heroes {
fmt.Println(v)
}
//调用sort.Sort
sort.Sort(heroes)
fmt.Println("-----------排序后------------")
//看看排序后的顺序
for_,v:=range heroes {
fmt.Println(v)
}
i:=10
j:=20
i,j =j, i
fmt.Println("i=", i, "j=", j)// i=20 j = 10
}
 接口编程的课后练习
//1.声明 Student 结构体
type Studentstruct{
Name string
Ageint
Scorefloat64
}
//将Student 的切片，安Score 从大到小排序!!
11.5.10 实现接口 vs 继承
 大家听到现在,可能会对实现接口和继承比较迷茫了, 这个问题,那么他们究竟有什么区别呢
代码说明:
 对上面代码的小结
1) 当A结构体继承了B结构体，那么A结构就自动的继承了B 结构体的字段和方法，并且可以直
接使用
2) 当A结构体需要扩展功能，同时不希望去破坏继承关系，则可以去实现某个接口即可，因此我
们可以认为：实现接口是对继承机制的补充.
 实现接口可以看作是对 继承的一种补充
 接口和继承解决的解决的问题不同
继承的价值主要在于：解决代码的复用性和可维护性。
接口的价值主要在于：设计，设计好各种规范(方法)，让其它自定义类型去实现这些方法。
 接口比继承更加灵活 Person Student BirdAble LittleMonkey
接口比继承更加灵活，继承是满足 is- a的关系，而接口只需满足 like-a的关系。
 接口在一定程度上实现代码解耦
11.6 面向对象编程-多态
11.6.1 基本介绍
变量(实例)具有多种形态。面向对象的第三大特征，在 Go 语言，多态特征是通过接口实现的。可
以按照统一的接口来调用不同的实现。这时接口变量就呈现不同的形态。
11.6.2 快速入门
在前面的Usb 接口案例，Usbusb ，既可以接收手机变量，又可以接收相机变量，就体现了Usb 接
口 多态特性。[点明]
11.6.3 接口体现多态的两种形式
 多态参数
在前面的Usb 接口案例，Usb usb ，即可以接收手机变量，又可以接收相机变量，就体现了Usb 接
口 多态。
 多态数组
演示一个案例：给Usb 数组中，存放 Phone 结构体 和 Camera结构体变量
案例说明:
package main
import(
"fmt"
)
//声明/定义一个接口
type Usb interface {
//声明了两个没有实现的方法
Start()
Stop()
}
type Phonestruct {
namestring
}
//让Phone 实现 Usb 接口的方法
func(p Phone)Start(){
fmt.Println("手机开始工作。。。")
}
func(p Phone)Stop(){
fmt.Println("手机停止工作。。。")
}
type Camera struct {
namestring
}
//让Camera 实现 Usb接口的方法
func(c Camera) Start() {
fmt.Println("相机开始工作。。。")
}
func(c Camera) Stop(){
fmt.Println("相机停止工作。。。")
}
funcmain() {
//定义一个 Usb 接口数组，可以存放Phone和Camera 的结构体变量
//这里就体现出多态数组
varusbArr [3]Usb
usbArr[0]=Phone{"vivo"}
usbArr[1]=Phone{"小米"}
usbArr[2]=Camera{"尼康"}
fmt.Println(usbArr)
}
11.7 类型断言
11.7.1 由一个具体的需要，引出了类型断言.
11.7.2 基本介绍
类型断言，由于接口是一般类型，不知道具体类型，如果要转成具体类型，就需要使用类型断言，
具体的如下:
 对上面代码的说明:
在进行类型断言时，如果类型不匹配，就会报 panic, 因此进行类型断言时，要确保原来的空接口
指向的就是断言的类型.
 如何在进行断言时，带上检测机制，如果成功就ok,否则也不要报panic
11.7.3 类型断言的最佳实践 1
 在前面的Usb 接口案例做改进：
给Phone结构体增加一个特有的方法 call(), 当Usb 接口接收的是Phone 变量时，还需要调用call
方法, 走代码:
package main
import(
"fmt"
)
//声明/定义一个接口
type Usb interface {
//声明了两个没有实现的方法
Start()
Stop()
}
type Phonestruct {
namestring
}
//让Phone 实现 Usb 接口的方法
func(p Phone)Start(){
fmt.Println("手机开始工作。。。")
}
func(p Phone)Stop(){
fmt.Println("手机停止工作。。。")
}
func(p Phone)Call(){
fmt.Println("手机 在打电话..")
}
type Camera struct {
namestring
}
//让Camera 实现 Usb接口的方法
func(c Camera) Start() {
fmt.Println("相机开始工作。。。")
}
func(c Camera) Stop(){
fmt.Println("相机停止工作。。。")
}
type Computerstruct {
}
func(computer Computer)Working(usb Usb) {
usb.Start()
//如果usb 是指向Phone结构体变量，则还需要调用Call 方法
//类型断言..[注意体会!!!]
ifphone,ok := usb.(Phone);ok {
phone.Call()
}
usb.Stop()
}
funcmain() {
//定义一个 Usb 接口数组，可以存放Phone和Camera 的结构体变量
//这里就体现出多态数组
varusbArr [3]Usb
usbArr[0]=Phone{"vivo"}
usbArr[1]=Phone{"小米"}
usbArr[2]=Camera{"尼康"}
//遍历usbArr
//Phone还有一个特有的方法call()，请遍历Usb数组，如果是Phone变量，
//除了调用 Usb 接口声明的方法外，还需要调用Phone 特有方法 call. =》类型断言
varcomputer Computer
for_,v:= rangeusbArr{
computer.Working(v)
fmt.Println()
}
//fmt.Println(usbArr)
}
11.7.4 类型断言的最佳实践 2
写一函数，循环判断传入参数的类型:
11.7.5 类型断言的最佳实践 3 【学员自己完成】
在前面代码的基础上，增加判断Student类型和 *Student 类型
第 章项目 家庭收支记账软件项目
12 1-
12.1 项目开发流程说明
12.2 项目需求说明
1) 模拟实现基于文本界面的《家庭记账软件》
2) 该软件能够记录家庭的收入、支出，并能够打印收支明细表
12.3 项目的界面
其它的界面，我们就直接参考 项目效果图.txt
12.4 项目代码实现
12.4.1 实现基本功能(先使用面向过程,后面改成面向对象)
 功能1:先完成可以显示主菜单，并且可以退出
思路分析：
更加给出的界面完成，主菜单的显示, 当用户输入4时，就退出该程序
走代码:
 功能2:完成可以显示明细和登记收入的功能
思路分析：
1) 因为需要显示明细，我们定义一个变量 details string 来记录
2) 还需要定义变量来记录余额(balance)、每次收支的金额(money), 每次收支的说明(note)
走代码：
 功能3:完成了登记支出的功能
思路分析：
登记支出的功能和登录收入的功能类似，做些修改即可
走代码：
12.4.2 项目代码实现改进
1) 用户输入 4 退出时，给出提示"你确定要退出吗? y/n"，必须输入正确的 y/n ，否则循环输入指
令，直到输入y 或者 n
2) 当没有任何收支明细时，提示 "当前没有收支明细... 来一笔吧!"
3) 在支出时，判断余额是否够，并给出相应的提示
4) 将面向过程 的代码修改成 面向对象的方法，编写 myFamilyAccount.go ，并使 用
testMyFamilyAccount.go 去完成测试
思路分析：
把记账软件的功能，封装到一个结构体中，然后调用该结构体的方法，来实现记账，显示明细。结
构体的名字 FamilyAccount.
在通过在main方法中，创建一个结构体 FamilyAccount 实例，实现记账即可.
代码实现:
代码不需要重写，只需要重写组织一下.
familyaccount/main/main.go
familyaccount/utils/familyAccount.go
package utils
import(
"fmt"
)
type FamilyAccount struct {
//声明必须的字段.
//声明一个字段，保存接收用户输入的选项
key string
//声明一个字段，控制是否退出for
loopbool
//定义账户的余额 []
balance float64
//每次收支的金额
moneyfloat64
//每次收支的说明
notestring
//定义个字段，记录是否有收支的行为
flag bool
//收支的详情使用字符串来记录
//当有收支时，只需要对 details 进行拼接处理即可
details string
}
//编写要给工厂模式的构造方法，返回一个*FamilyAccount 实例
funcNewFamilyAccount() *FamilyAccount {
return &FamilyAccount{
key : "",
loop: true,
balance : 10000.0,
money:0.0,
note:"",
flag : false,
details : "收支\t 账户金额\t 收支金额\t 说 明",