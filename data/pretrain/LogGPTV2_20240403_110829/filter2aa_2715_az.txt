yum search pattern 
urpmq --fuzzy pkg 
Search by file name 
yum provides file 
urpmf file 
List installed 
packages 
rpm -qa 
rpm -qa 
245 
CONFIGURING 
List repositories 
yum repolist 
urpmq --list-media 
Add repository 
vi /etc/yum.repos.d/ 
urpmi.addmedia 
name path 
Remove repository 
vi /etc/yum.repos.d/ 
urpmi.removemedia 
media 
REFERENCE: 
https://github.com/marsam/cheatsheets/blob/master/package-
management/package-management.rst 
P
P 
PASSWORD CRACKING_Methodology 
RED TEAM 
PASSWORD CRACKING 
ALL 
REQUIRED SOFTWARE 
You will want to install the following software on your Windows or 
*NIX host. This book does not cover how to install said software 
and assumes you were able to follow the included links and 
extensive support websites.  
HASHCAT v5.1 (or newer) 
https://hashcat.net/hashcat/ 
JOHN THE RIPPER (v1.8.0 JUMBO) 
http://www.openwall.com/john/ 
PACK v0.0.4 (Password Analysis & Cracking Toolkit) 
http://thesprawl.org/projects/pack/ 
Hashcat-utils v1.9 
https://github.com/hashcat/hashcat-utils 
Additionally, you will need dictionariesand wordlists. The following 
sources are  recommended: 
WEAKPASS DICTIONARY 
https://weakpass.com/wordlist 
COMMAND STRUCTURE LEGEND 
hashcat = Generic representation of the various Hashcat binary 
names 
john = Generic representation of the John the Ripper binary names 
#type = Hash type; which is an abbreviation in John or a number in 
Hashcat 
hash.txt = File containing target hashes to be cracked 
dict.txt = File containing dictionary/wordlist 
rule.txt = File containing permutation rules to alter dict.txt 
input 
passwords.txt = File containing cracked password results 
246 
outfile.txt = File containing results of some functions output 
Lastly, as a good reference for testing various hash types to place 
into your “hash.txt” file, the below sites contain all the various 
hashing algorithms and example output tailored for each cracking 
tool: 
HASHCAT HASH FORMAT EXAMPLES 
https://hashcat.net/wiki/doku.php?id=example_hashes 
JOHN THE RIPPER HASH FORMAT EXAMPLES 
http://pentestmonkey.net/cheat-sheet/john-the-ripper-hash-formats 
http://openwall.info/wiki/john/sample-hashes 
CORE HASH CRACKING KNOWLEDGE 
ENCODING vs HASHING vs ENCRYPTING 
Encoding = transforms data into a publicly known scheme for 
usability 
Hashing = one-way cryptographic function nearly impossible to 
reverse 
Encrypting = mapping of input data and output data reversible with 
a key 
CPU vs GPU 
CPU = 2-72 cores mainly optimized for sequential serial processing 
GPU = 1000’s of cores with 1000’s of threads for parallel 
processing 
CRACKING TIME = KEYSPACE / HASHRATE 
Keyspace: charset^length (?a?a?a?a = 95^4 = 81,450,625) 
Hashrate: hashing function / hardware power (bcrypt / GTX1080 = 
13094 H/s) 
Cracking Time: 81,450,625 / 13094 H/s = 6,220 seconds 
*Keyspace displayed and Hashrate vary by tool and hardware 
used 
SALT = random data that’s used as additional input to a one-way 
function 
ITERATIONS = the number of times an algorithm is run over a given 
hash 
HASH IDENTIFICATION: there isn’t a foolproof method for identifying 
which hash function was used by simply looking at the hash, but 
there are reliable clues (i.e. $6$ sha512crypt). The best method is 
to know from where the hash was extracted and identify the hash 
function for that software. 
247 
DICTIONARY/WORDLIST ATTACK = straight attack uses a precompiled 
list of words, phrases, and common/unique strings to attempt to 
match a password. 
BRUTE-FORCE ATTACK = attempts every possible combination of a given 
character set, usually up to a certain length. 
RULE ATTACK = generates permutations against a given wordlist by 
modifying, trimming, extending, expanding, combining, or skipping 
words. 
MASK ATTACK = a form of targeted brute-force attack by using 
placeholders for characters in certain positions 
(i.e. ?a?a?a?l?d?d). 
HYBRID ATTACK = combines a Dictionary and Mask Attack by taking 
input from the dictionary and adding mask placeholders (i.e. 
dict.txt ?d?d?d). 
CRACKING RIG = from a basic laptop to a 64 GPU cluster, this is the 
hardware/platform on which you perform your password hash attacks.  
EXPECTED RESULTS 
Know your cracking rig’s capabilities by performing benchmark 
testing. Do not assume you can achieve the same results posted by 
forum members without using the exact same dictionary, attack plan, 
or hardware setup. Cracking success largely depends on your ability 
to use resources efficiently and make calculated trade-offs based 
on the target hash. 
DICTIONARY/WORDLIST vs BRUTE-FORCE vs ANALYSIS 
Dictionaries and brute-force are not the end all be all to crack 
hashes. They are merely the beginning and end of an attack plan. 
True mastery is everything in the middle, where analysis of 
passwords, patterns, behaviors, and policies affords the ability to 
recover that last 20%. Experiment with your attacks and research 
and compile targeted wordlists with your new knowledge. Do not rely 
heavily on dictionaries because they can only help you with what is 
“known” and not the unknown. 
CRACKING METHODOLOGY 
The following is basic cracking methodology broken into steps, but 
the process is subject to change based on current/future target 
information uncovered during the cracking process. 
1-EXTRACT HASHES 
Pull hashes from target, identify hashing function, and properly 
format output for your tool of choice. 
2-FORMAT HASHES 
248 
Format your hashes based on your tool’s preferred method. See tool 
documentation for this guidance. Hashcat, for example, on each line 
takes : OR just the plain . 
3-EVALUATE HASH STRENGTH 
Using the Appendix table “Hash Cracking Speed (Slow-Fast)” assess 
your target hash and its cracking speed. If it is a slow hash, you 
will need to be more selective at what types of dictionaries and 
attacks you perform. If it is a fast hash, you can be more liberal 
with your attack strategy. 
4-CALCULATE CRACKING RIG CAPABILITIES 
With the information from evaluating the hash strength, baseline 
your cracking rig’s capabilities. Perform benchmark testing using 
John The Ripper and/or Hashcat’s built-in benchmark ability on your 
rig. 
john --test 
hashcat -b 
Based on these results you will be able to better assess your 
attack options by knowing your rigs capabilities against a specific 
hash. This will be a more accurate result of a hash’s cracking 
speed based on your rig. It will be useful to save these results 
for future reference.  
5-FORMULATE PLAN 
Based on known or unknown knowledge begin creating an attack plan. 
Included on the next page is a “Basic Cracking Playbook” to get you 
started. 
6-ANALYZE PASSWORDS 
After successfully cracking a sufficient amount of hashes analyze 
the results for any clues or patterns. This analysis may aid in 
your success on any remaining hashes.  
7-CUSTOM ATTACKS 
Based on your password analysis create custom attacks leveraging 
those known clues or patterns. Examples would be custom mask 
attacks or rules to fit target users’ behavior or preferences.  
8-ADVANCED ATTACKS 
Experiment with Princeprocessor, custom Markov-chains, 
maskprocessor, or custom dictionary attacks to shake out those 
remaining stubborn hashes. This is where your expertise and 
creativity really come into play. 
9-REPEAT 
Go back to STEP 4 and continue the process over again, tweaking 
dictionaries, mask, parameters, and methods. You are in the grind 
at this point and need to rely on skill and luck.  
249 
BASIC CRACKING PLAYBOOK 
This is only meant as a basic guide to processing hashes and each 
scenario will obviously be unique based on external circumstances. 
For this attack plan assume the password hashes are raw MD5 and 
some plain text user passwords were captured. If plain text 
passwords were not captured, we would most likely skip to 
DICTIONARY/WORDLIST attacks. Lastly, since MD5 is a “Fast” hash we 
can be more liberal with our attack plan.  
1-CUSTOM WORDLIST 
First compile your known plain text passwords into a custom 
wordlist file. Pass this to your tool of choice as a straight 
dictionary attack.  
hashcat -a 0 -m 0 -w 4 hash.txt custom_list.txt 
2-CUSTOM WORDLIST + RULES 
Run your custom wordlist with permutation rules to crack slight 
variations.  
hashcat -a 0 -m 0 -w 4 hash.txt custom_list.txt -r best64.rule --
loopback 
3-DICTIONARY/WORDLIST 
Perform a broad dictionary attack, looking for common passwords and 
leaked passwords in well-known dictionaries/wordlists. 
hashcat -a 0 -m 0 -w 4 hash.txt dict.txt 
4-DICTIONARY/WORDLIST + RULES 
Add rule permutations to the broad dictionary attack, looking for 
subtle changes to common words/phrases and leaked passwords. 
hashcat -a 0 -m 0 -w 4 hash.txt dict.txt -r best64.rule --loopback 
5-CUSTOM WORDLIST + RULES 
Add any newly discovered passwords to your custom wordlist and run 
an attack again with permutation rules; looking for any other 
subtle variations. 
awk -F “:” ‘{print $2}’ hashcat.potfile >> custom_list.txt 
hashcat -a 0 -m 0 -w 4 hash.txt custom_list.txt -r dive.rule --
loopback 
6-MASK 
Now we will use mask attacks included with Hashcat to search the 
keyspace for common password lengths and patterns, based on the 
RockYou dataset. 
hashcat -a 3 -m 0 -w 4 hash.txt rockyou-1-60.hcmask 
7-HYBRID DICTIONARY + MASK 
250 
Using a dictionary of your choice, conduct hybrid attacks looking 
for larger variations of common words or known passwords by 
appending/prepending masks to those candidates.  
hashcat -a 6 -m 0 -w 4 hash.txt dict.txt rockyou-1-60.hcmask 
hashcat -a 7 -m 0 -w 4 hash.txt rockyou-1-60.hcmask dict.txt 
8-CUSTOM WORDLIST + RULES 
Add any newly discovered passwords back to your custom wordlist and 
run an attack again with permutation rules; looking for any other 
subtle variations. 
awk -F “:” ‘{print $2}’ hashcat.potfile >> custom_list.txt 
hashcat -a 0 -m 0 -w 4 hash.txt custom_list.txt -r dive.rule --
loopback 
9-COMBO 
Using a dictionary of your choice, perform a combo attack by 
individually combining the dictionary’s password candidates 
together to form new candidates. 
hashcat -a 1 -m 0 -w 4 hash.txt dict.txt dict.txt 
10-CUSTOM HYBRID ATTACK 
Add any newly discovered passwords back to your custom wordlist and 
perform a hybrid attack against those new acquired passwords. 
awk -F “:” ‘{print $2}’ hashcat.potfile >> custom_list.txt 
hashcat -a 6 -m 0 -w 4 hash.txt custom_list.txt rockyou-1-60.hcmask 
hashcat -a 7 -m 0 -w 4 hash.txt rockyou-1-60.hcmask custom_list.txt 
11-CUSTOM MASK ATTACK 
By now the easier, weaker passwords may have fallen to cracking, 
but still some remain. Using PACK (on pg.51) create custom mask 
attacks based on your currently cracked passwords. Be sure to sort 
out masks that match the previous rockyou-1-60.hcmask list. 
hashcat -a 3 -m 0 -w 4 hash.txt custom_masks.hcmask 
12-BRUTE-FORCE 
When all else fails begin a standard brute-force attack, being 
selective as to how large a keyspace your rig can adequately brute-
force. Above 8 characters is usually pointless due to hardware 
limitations and password entropy/complexity. 
hashcat -a 3 -m 0 -w 4 hash.txt -i ?a?a?a?a?a?a?a?a 
P
P 
PHYSICAL ENTRY_Keys 
RED TEAM 
PHYSICAL 
N/A 
Common master keys for physical security locks. 
251 
ELEVATOR MASTER KEYS 
KEY 
ELEVATOR 
DESCRIPTION 
FEO-K1 
Universal 
This is the most common and 
universal key for Fire Service 
EPCO1/EN1 Universal 
Common Fire Service key, 
sometimes used on Schindler 
elevators 
Yale 3502 New York 
Fire Service master key for 
every elevator in New York 
Yale 2642 New York 
Old Fire Service master key for 
every elevator in New York 
BGM30 
OTIS 
Opens the panels for OTIS 
elevators 
UTF 
OTIS 
Fire Service master key for 
OTIS elevators 
UTA 
OTIS 
Independent Service, fan, 
light, cabinet for OTIS 
elevators 
UTH 
OTIS 
Floor lockout, inspection, 
access for OTIS elevators 
501CH 
Schindler 
Fire Service master key for 
Schindler elevators 
J200 
Monitor/Janus 
Independent Service, fan, 
light, cabinet for Monitor 
fixtures 
J217 
Monitor/Janus 
Fire Service master key for 
Monitor fixtures 
EX513 
Innovation 
Independent Service, fan, 
light, cabinet for Innovation 
elevators 
EX515 
Innovation 
Fire Service master key for 
Innovation elevators 
KONE3 
KONE 
Fire Service master key for 
KONE elevators 
Available: 
https://www.elevatorkeys.com/ 
https://www.ultimatesecuritydevices.com/ 
https://www.sparrowslockpicks.com/product_p/ekey.htm 
https://ebay.com/ 
COMMON KEYS 
KEY 
DESCRIPTION 
Linear 222343 
Master key for Linear intercom system 
252 
DoorKing 16120 
Master key for DoorKing intercom system 
CH751 
Extremely common cabinet key 
C415A 
Extremely Common cabinet key 
C413A 
Common cabinet key 
C420A 
Common cabinet key 
C642A 
Common cabinet key 
C346A 
Common cabinet key 
C390A 
Common cabinet key 
EK333 
Common server cabinet key 
Ilco CC1 
Common golf cart key 
REFERENCE: 
https://0xsp.com/offensive/red-teaming-toolkit-collection 
https://scund00r.com/all/gear/2019/06/25/red-team-and-physical-entry-
gear.html 
P
P 
PORTS_Top1000 
ALL 
INFORMATIONAL 
ALL 
Top 1000 most common ports/services. 
Port  
Service 
Port 
Service 
7 
tcp echo 
1022 
udp exp2 
7 
udp echo 
1025 
tcp NFS/IIS 
9 
tcp discard 
1025 
udp blackjack 
9 
udp discard 
1026 
tcp LSA/nterm 
13 
tcp daytime 
1026 
udp win-rpc 
17 
udp qotd 
1027 
tcp IIS 
19 
udp chargen 
1028 
udp ms-lsa 
21 
tcp ftp 
1029 
tcp ms-lsa 
22 
tcp ssh 
1029 
udp solid-mux 
23 
tcp telnet 
1030 
udp iad1 
25 
tcp smtp 
1110 
tcp nfsd-status 
26 
tcp rsftp 
1433 
tcp ms-sql-s 
37 
tcp time 
1433 
udp ms-sql-s 
49 
udp tacacs 
1434 
udp ms-sql-m 
53 
tcp dns 
1645 
udp radius 
53 
udp dns 
1646 
udp radacct 
67 
udp dhcps 
1701 
udp L2TP 
68 
udp dhcpc 
1718 
udp h225gatedisc 
69 
udp tftp 
1719 
udp h323gatestat 
79 
tcp finger 
1720 
tcp h323q931 
80 
tcp http 
1723 
tcp pptp 
80 
udp http 
1755 
tcp wms 
81 
tcp hosts2-ns 
1812 
udp radius 
253 
88 
tcp kerberos-sec 
1813 
udp radacct 
88 
udp kerberos-sec 
1900 
tcp upnp 
106 
tcp pop3pw 
1900 
udp upnp 
110 
tcp pop3 
2000 
tcp cisco-sccp 
111 
tcp rpcbind 
2000 
udp cisco-sccp 
111 
udp rpcbind 
2001 
tcp dc 
113 
tcp ident 
2048 
udp dls-monitor 
119 
tcp nntp 
2049 
tcp nfs 
120 
udp cfdptkt 
2049 
udp nfs 
123 
udp ntp 
2121 
tcp ccproxy-ftp 
135 
tcp msrpc 
2222 
udp msantipiracy 
135 
udp msrpc 
2223 
udp rockwell-csp2 
136 
udp profile 
2717 
tcp pn-requester 
137 
udp netbios-ns 
3000 
tcp ppp 
138 
udp netbios-dgm 
3128 
tcp squid-http 
139 
tcp netbios-ssn 
3283 
udp netassistant 
139 
udp netbios-ssn 
3306 
tcp mysql 
143 
tcp imap 
3389 
tcp ms-wbt-server 
144 
tcp news 
3456 
udp IISrpc/vat 
158 
udp pcmail-srv 
3703 
udp adobeserver-3 
161 
udp snmp 
3986 
tcp mapper-ws_ethd 
162 
udp snmptrap 
4444 
udp krb524 
177 
udp xdmcp 
4500 
udp nat-t-ike 
179 
tcp bgp 
4899 
tcp radmin 
199 
tcp smux 
5000 
tcp upnp 
389 
tcp ldap 
5000 
udp upnp 
427 
tcp svrloc 
5009 
tcp airport-admin 
427 
udp svrloc 
5051 
tcp ida-agent 
443 
tcp https 
5060 
tcp sip 
443 
udp https 
5060 
udp sip 
444 
tcp snpp 
5101 
tcp admdog 
445 
tcp microsoft-ds 
5190 
tcp aol 
445 
udp microsoft-ds 
5353 
udp zeroconf 
465 
tcp smtps 
5357 
tcp wsdapi 
497 
udp retrospect 
5432 
tcp postgresql 
500 
udp isakmp 
5631 
tcp pcanywheredata 
513 
tcp login 
5632 
udp pcanywherestat 
514 
tcp shell 
5666 
tcp nrpe 
514 
udp syslog 
5800 
tcp vnc-http 
515 
tcp printer 
5900 
tcp vnc 
515 