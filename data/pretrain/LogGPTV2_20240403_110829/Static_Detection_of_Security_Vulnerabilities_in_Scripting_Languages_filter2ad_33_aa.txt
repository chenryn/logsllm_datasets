title:Static Detection of Security Vulnerabilities in Scripting Languages
author:Yichen Xie and
Alex Aiken
Static Detection of Security Vulnerabilities
in Scripting Languages
Yichen Xie
Alex Aiken
Computer Science Department
Stanford University
Stanford, CA 94305
{yxie,aiken}@cs.stanford.edu
Abstract
We present a static analysis algorithm for detecting secu-
rity vulnerabilities in PHP, a popular server-side script-
ing language for building web applications. Our analysis
employs a novel three-tier architecture to capture infor-
mation at decreasing levels of granularity at the intra-
block, intraprocedural, and interprocedural level. This
architecture enables us to handle dynamic features of
scripting languages that have not been adequately ad-
dressed by previous techniques.
We demonstrate the effectiveness of our approach on
six popular open source PHP code bases, ﬁnding 105 pre-
viously unknown security vulnerabilities, most of which
we believe are remotely exploitable.
1 Introduction
Web-based applications have proliferated rapidly in re-
cent years and have become the de facto standard for de-
livering online services ranging from discussion forums
to security sensitive areas such as banking and retail-
ing. As such, security vulnerabilities in these applica-
tions represent an increasing threat to both the providers
and the users of such services. During the second half of
2004, Symantec cataloged 670 vulnerabilities affecting
web applications, an 81% increase over the same period
in 2003 [17]. This trend is likely to continue for the fore-
seeable future.
According to the same report, these vulnerabilities are
typically caused by programming errors in input valida-
tion and improper handling of submitted requests [17].
Since vulnerabilities are usually deeply embedded in the
program logic, traditional network-level defense (e.g.,
ﬁrewalls) does not offer adequate protection against such
attacks. Testing is also largely ineffective because attack-
ers typically use the least expected input to exploit these
vulnerabilities and compromise the system.
A natural alternative is to ﬁnd these errors using static
analysis. This approach has been explored in Web-
SSARI [7] and by Minamide [10]. WebSSARI has been
used to ﬁnd a number of security vulnerabilities in PHP
scripts, but has a large number of false positives and neg-
atives due to its intraprocedural type-based analysis. Mi-
namide’s system checks syntactic correctness of HTML
output from PHP scripts and does not seem to be effec-
tive for ﬁnding security vulnerabilities. The main mes-
sage of this paper is that analysis of scripting languages
need not be signiﬁcantly more difﬁcult than analysis
of conventional languages. While a scripting language
stresses different aspects of static analysis, an analysis
suitably designed to address the important aspects of
scripting languages can identify many serious vulnera-
bilities in scripts reliably and with a high degree of au-
tomation. Given the importance of scripting in real world
applications, we believe there is an opportunity for static
analysis to have a signiﬁcant impact in this new domain.
In this paper, we apply static analysis to ﬁnding se-
curity vulnerabilities in PHP, a server-side scripting lan-
guage that has become one of the most widely adopted
platforms for developing web applications.1 Our goal is
a bug detection tool that automatically ﬁnds serious vul-
nerabilities with high conﬁdence. This work, however,
does not aim to verify the absence of bugs.
This paper makes the following contributions:
• We present an interprocedural static analysis al-
gorithm for PHP. A language as dynamic as PHP
presents unique challenges for static analysis: lan-
guage constructs (e.g., include) that allow dynamic
inclusion of program code, variables whose types
change during execution, operations with semantics
that depend on the runtime types of the operands
(e.g., 
Const (c) ::= string | int | true | false | null
L-val (lv) ::= x | Arg#i | lv[e]
Expr (e) ::= c | lv | e binop e | unop e | (τ )e
Stmt (S) ::= lv ← e | lv ← f (e1, . . . , en)
| return e | exit | include e
binop ∈ {+, −, concat, ==, ! =, , . . .}
unop ∈ {−, ¬}
Figure 3: Language Deﬁnition
describe how we represent and infer block summaries
(§3.1.7).
3.1.2 Language
Figure 3 gives the deﬁnition of a small imperative lan-
guage that captures a subset of PHP constructs that we
believe is relevant to SQL injection vulnerabilities. Like
PHP, the language is dynamically typed. We model three
basic types of PHP values: strings, booleans and inte-
gers. In addition, we introduce a special > type to de-
scribe objects whose static types are undetermined (e.g.,