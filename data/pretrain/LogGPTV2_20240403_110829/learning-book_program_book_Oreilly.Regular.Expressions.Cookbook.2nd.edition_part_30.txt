will be an empty string. When two regex matches can be found right next to each other
3.19 Split a String I 215
---
## Page 232
in the subject string, with no text beween them, an empty string will be added to the
array. If a match occurs at the end of the subject string, the last element in the array
will be an empty string.
Java
If you have only one string to spli, you can call the split() method directly on your
subject string. Pass the regular expression as the only parameter. This method simply
calls Pattern.compile(*regex) split(subjectString).
If you want to split multiple strings, use the Pattern.conpile() factory to create a
Pattern object. This way, your regular expression needs to be compiled only once.
Then, call the split() method on your Pattern instance, and pass your subject string
as the parameter. There’s no need to create a Matcher object. The Matcher class does
not have a split() method at all.
Pattern, split () takes an optional second parameter, but String - split() does not. You
can use the second parameter to pass the maximum number of split strings you want
to end up with. For example, if you call Pattern.split(subject, 3), you will receive
an array with at most three strings in it. The split() function will try to find rwo regex
matches, and return an array with the text before the first match, the text berween the
rwo matches, and the text after the second match. Any further possible regex matches
within the remainder of the subject string are ignored, and left in the last string in the
array. If there are not enough regex matches to reach your limit, split() will split along
all the available regex matches, and returm an array with fewer strings than you speci-
fied. Pattern.split (subject, 1) does not split the string at all returming an array with
the original string as the only element.
If a match occurs at the start of the subject sring, the fist string in the resulting array
will be an empty string.When two regex matches can be found right next toeach other
in the subject string, with no text between them, an empty string will be added to the
array. If a match occurs at the end of the subject string, the last element in the array
will be an empty string.
Java, however, will eliminate empty strings at the end of the array. If you want the
empty strings to be included, pass a negative number as the second parameter to
Pattern.split(). This tells Java to split the string as many times as possible, and leave
any empty strings at the end of the array. The actual value of the second parameter
makes no difference when it is negative. You cannot tell Java to split a string a certain
number of times and also leave empty strings at the end of the array at the same time.
JavaScript
In JavaScript, call the split() method on the string you want to split. Pass the regular
expression as the only parameter to get an array with the string split as many times as
possible. You can pass an optional second parameter to specify the maximum number
of strings you want to have in the returned array. This should be a positive number. If
216 I Chapter 3: Programming with Regular Expressions
---
## Page 233
t ssed 1o 1a1auered puosas au 1uo no. p1 Aeue K1dtua ue 1a8 noA *ouaz ssed nok
negative number, the string is split as many times as possible. Serting the /g flag for the
regex (Recipe 3.4) makes no difference.
In a standards-compliant browser, the split() method includes the matches of
capturing groups in the returmed array. It even adds undefined for nonparticipating
capturing groups. If you do not want these extra elements in your array, use only
()+r[ds o1 ssed no. suotssaudxa nen8au u (6°7 adoa) sdnou8 Suundeouou
All the majorweb browsers now implement String prototypesplit() correctly. Older
browsers have various issues with capruring groups and adjacent matches. If you want
an implementation of String prototype split() that follows the standard and also
works with all browsers, Steven Levithan has a solution for you at lhzsp://blog-stevenfe
vithan.com/archives/cross-browser-split.
XRegExp
When using XRegExp in JavaScript, call xRegExp·split(subject, regex) instead of
subject split (regex) for standards-compliant results in all browsers.
PHP
Call preg_split() to split a string into an array of srings along the regex matches. Pass
the regular expression as the first parameter and the subject string as the second pa-
rameter. If you omit the second parameter, $_ is used as the subject string.
You can pass an optional third parameter to specify the maximum number of split
strings you want to end up with. For example, if you call preg_split
($regex, $subject, 3), you will receive an array with at most three strings in it. The
preg_split() function willtry to find rwo regex matches, and retum an array with the
text before the first match, the text berween the rwo matches, and the text after the
second match. Any further possible regex matches within the remainder of the subject
string are ignored, and let in the ast string in the array. If there are nt enough rex
matches to reach your limit, preg_split() willsplit along allthe available regex matches
and returm an array with fewer strings than you specified. If you omit the third param-
eter or set it to -1, the sring is split as many times as possible.
If a match occurs at the start of the subject string, the first sring in the resulting array
will be an empty string. When two regex matches can be found right next to each other
in the subject string, with no text between them, an empty string will be added to the
array. If a match occurs at the end of the subject string, the last element in the array
will be an empty string. By default, preg_split() includes those empty strings in the
array it returns. If you don’t want empty strings in the array, pass the constant
PREG_SPLIT_NO_EMPTY as the fourth parameter
---
## Page 234
Perl
Call the split() function to split a string into an array of strings along the regex match
es. Pass a regular expression operator as the first parameter and the subject string as
the second parameter.
You can pass an optional third parameter to specify the maximum number of split
strings you want to end up with. For example, if you call split(/regex/, subject,
3), you will receive an array with at most three strings in it. The split() function will
try to find two regex matches, and return an array with the text before the first match,
the text berween the rwo matches, and the text after the second match. Any further
possible regex matches within the remainder of the subject string are ignored, and left
in the last string in the array. If there are not enough regex matches to reach your limit.
split() will split along all the available regex matches and retum an array with fewer
strings than you specified.
If you omit the third parameter, Per will determine the appropriate limit. If you assign
the result to an array variable, as the solution for this recipe does, the string is split as
many times as possible. If you assign the result to a list of scalar variables, Perl sets the
limit to the number of variables plus one. In other words, Perl will attempt to fill all the
variables, and will discard the unsplit remainder. For example, ($one, $two, $three)
= split(/,/) splits $_ with a limit of 4.
If a match occurs at the start of the subject string, the first string in the resulting array
will be an empty string. When two regex matches can be found right next to each other
in the subject string, with no text between them, an empty string will be added to the
array. If a match occurs at the end of the subject string, the last element in the array
will be an empty string.
Python
The split() function in the re module splits a string using a regular expression. Pass
your regular expression as the first parameter and the subject string as the second pa-
rameter. The global split() function does not accept a parameter with regular expres-
sion options.
The re.split() function calls re.conpile(), and then calls the split() method on the
compiled regular expression object. This method has only one required parameter: the
subject string.
Both forms of split() returm a list with the text berween all the regex matches. Both
take one optional parameter that you can use to limit the number of times the string
aqissod se sau ueu se ds s us a°oaz onas 1o  1uo nof  ds aq pnous
If you pass a positive number, that is the maximum number of regex matches at which
the string will be split. The resulting list will contain one more string than the count
you specified. The last string is the unsplit remainder of the subject string after the last
218 | Chapter 3: Programming with Regular Expressions
---
## Page 235
regex match. If fewer matches can be found than the count you specified, the string is
split at all regex matches without error.
Ruby
Callthe split() method on the subject string and pass your regular expression as the
first parameter to divide the string into an array of strings along the regex matches.
The split() method takes an optional second parameter, which you can use to indicate
the maximum number of split strings you want to end up with. For example, if you call
subject.split (re, 3), you will receive an array with at most three strings in it. The
split() function will try to find two regex matches, and retum an array with the text
before the first match, the text between the rwo matches, and the text after the second
match. Any further possible regex matches within the remainder of the subject string
are ignored, andlt inth last string in the array Ifthere arent nough egexmatches
to reach your limit, split() will split along all the available regex matches, and return
an array with fewer strings than you specified. split(re, 1) does not split the string at
all, returning an array with the original string as the only element.
Ifa match occurs at the start of the subject sring, the fist string in the resuling array
will be an empty string. When two regex matches can be found right next to each other
in the subject string, with no text berween them, an empty string will be added to the
array. If a match occurs at the end of the subject string, the last element in the array
will be an empty string.
Ruby, however, will eliminate empty strings at the end of the array. If you want the
empty strings to be included, pass a negative number as the second parameter to
split() . This tells Ruby to split the string as many times as possible and leave any empry
difference when it is negative. You cannot tell Ruby to split a string a certain number
strings at the end of the array. The actual value of the second parameter makes no
of times and also leave empty strings at the end of the array at the same time.
See Also
Recipe 3.20 shows code that splits a stringinto anarray and also addstheregex matches
to the array.
3.20Split aString,Keeping theRegexMatches
Problem
You want to split a string using a regular expression. After the split, you will have an
array or list of strings with the text berween the regular expression matches, as well as
the regex matches themselves.
3.20 Split a String, Keeping the Regex Matches | 219
---
## Page 236
os[e pue *s8e1 TN.LH aq Suoje 1 u s3e1 IIN.LH 11a Suuus t 1ds o1nuem no asoddns
keep the HTML tags. Splitting I=1ike*boldand#italic*fonts should
result in an array of nine strings: I1ike*, , bold, , *and, , italic, , and
fonts.
Solution
C#
You can use the static call when you process only a small number of strings with the
same regular expression:
((]>)。uxsa[qns)ds*xag = Aexy[ds []8ux5
Construct a Regex object if you want to use the same regular expression with a large
number of strings:
Regex regex0bj = new Regex(“(]*>)");
(8uxsaqns)dsqoxaax = Aex.yds []8ux,5
VB.NET
You can use the static call when you process only a small number of strings with the
same regular expression:
((]>)。“8uxsoa{qns)tdsxa8ag = Aexxytds wgo
Construct a Regex object if you want to use the same regular expression with a large
number of strings:
Dim Regex0bj As New Regex("(]*>)°)
Dim SplitArray = Regex0bj -Split(SubjectString)
Java
List resultlist = nes ArrayList();
(]>)aduuxaed =xa8a uxaed
Matcher regexMatcher = regex,matcher(subjectString);
int lastIndex = 0;
while (regexMatcher.find())(
resultList add(subjectString-substring(lastIndex,
regexMatcher,start());
resultList,add(regexMatcher .group());
lastIndex = regexMatcher end();
resultList,add(subjectString substring(lastIndex));
JavaScript
result = subject.split(/(]*>)/);
220 | Chapter 3: Programming with RegularExpresions
---
## Page 237
XRegExp
result = XRegExp-split(subject, /(]*>)/);
PHP
$result = preg_split(′/(]*>)/', $subject, -1,
PREG_SPLIT_DELIM_CAPTURE) ;
Perl
@result = split(m/(]*>)/, $subject);
Python
If you have only a few strings to split, you can use the global function:
result = re.split("(]*>)", subject))
To use the same regex repeatedly, use a compiled object:
reobj = re.compile("(]*>)°)
qns)sqox =sx
Ruby
list = []
subject.scan(/]>/)(|match|
lastindex = 0;
list , and italicfonts. If your regex has 10 capturing groups and you're us-
regular expression. Simply put, you’ll get an array with: I1ike#, , bo1d, , *and#,
ing .NET 2.0 or later, regex0bj-Split(subject, 4) rerums an array with 34 strings.
NET does not provide an option to exclude the capturing groups from the array. Your
only solution is to replace all named and numbered capruring groups with noncaptur-
‘aanqdestrottdxgesuotadgxasag asn o1 s! LaN' u! stu op o1 Ktas Asea try 'sdnoua Bu!
and replace all named groups with normal groups (i.e., just a pair of parentheses) in
your regular expression.
Java
Java’s Pattern.split() method does not provide the option to add the regex matches
to the resulting array. Instead, we can adapt Recipe 3.12 to add the text berween the
regex matches along with the regex matches themselves to a list. To get the text between
the matches, we use the match details explained in Recipe 3.8.
JavaScript
JavaScript's string.split() function does not provide an option to control whether
regex matches should be added to the array. According to the JavaScript standard, all
capruring groups should have their matches added to the array.
All the major web browsers now implement String.prototype split() correctly. Older
browsers did not always correctly add capturing groups to the returned array. If you
want an implementation of String -prototype.split() that follows the standard and
also works with all browsers, Steven Levithan has a solution for you at Frtp:/bfog.ste
venlevithan.com/archives/cross-browser-split.
XRegExp
When using XRegExp in JavaScript, call xRegExp-split(subject, regex) instead of
subject,split (regex) for standards-compliant results in all browsers.
PHP
Pass PREG_PLIT_ELIM_CAPTURE as the fourh parameter to preg_split() to include the
text matched by capturing groups in the returmed array. You can use the | operator to
combine PREG_SPLIT_DELIM_CAPTURE with PREG_SPLIT_NO_EMPTY.
The capturing groups are not included in the string count that you specify as the third
argument to the preg_split() function. If you set the limit to four with the example
string and regex of this recipe, you'll get an array with seven strings. Those will be the
four strings with the text before, berween, and after the first three regex matches, plus
three strings berween them with the regex matches, as caprured by the only capturing
222 | Chapter 3: Programming with RegularExpression
---
## Page 239
group in the regular expression. Simply put, you'll get an array with: I1ike# , , bold,
, and=, , and italic* fonts.
Perl
Perl’'s split() function includes the text matched by all capturing groups into the array.
If you want to include the overall regex match into the array, place the whole regular
expression inside a capruring group.
The capruring groups are not included in the string count that you can pass to the
split() function. If you call split(/(]*>)/, $subject, 4) with the example string
and regex of this recipe, you*ll get an array with seven strings. Those will be the four
strings with the text before, between, and after the first three regex matches, plus three
strings berween them with the regex matches, as caprured by the only capruring group
in the regular expression. Simply put, you'll get an array with: I =1ike, , bold, ,
and°, , and italic*fonts. If your regex has 10 capturing groups,
split ($regex, $subject, 4) returns an array with 34 strings.
Perl does not provide an option to exclude the capturing groups from the array. Your
only solution is to replace all named and numbered capturing groups with
noncapturing groups.
Python
Python’s split () function includes the text matched by all capturing groups into the
array. If you want to include the overall regex match into the array, place the whole
regular expression inside a capruring group.
The capturing groups do not affect the number of times the string is split. If you call
split(/(]*>)/, $subject, 3) with the example string and regex of this recipe,
you'll get an array with seven strings. The string is split three times, which results in
four pieces of text between the matches, plus three pieces of text matched by the cap-
Po , *sat I, m Aeue ue 1a 1,no *nd Xdus dnou8 Buum
and *, “”, and “italic fonts", lf your regex has 10 capruring groups,
split ($regex, $subject, 3) returns an array with 34 strings.
Python does not provide an option to exclude the capturing groups from the array.
Your only solution is to replace all named and numbered capturing groups with non-
capturing groups.
Ruby