### Problem Description and Definitions

- **Firewall Rule Groups**: A set of \( m \) firewall rule groups \( V = \{V_1, V_2, \ldots, V_m\} \), where each group \( V_i \) has:
  - A rule size \( s_i \)
  - An update cost \( \gamma_i \)
  - A buffer cost \( \beta_i \)
  - \( k_i \) matching traffic flows with flow rates \( \lambda_{i1}, \lambda_{i2}, \ldots, \lambda_{ik_i} \)

- **Processing Capacity**: The total processing capacity is \( c \left( \sum_{i=1}^m s_i \right) \).

- **Overload Condition**: 
  - If the total rule size exceeds 90% of the processing capacity: \( \sum_{i=1}^m s_i > 0.9c \left( \sum_{i=1}^m s_i \right) \).
  - Runtime throughput is denoted by \( \eta \).

- **New Instances**:
  - The number of new instances \( n \) is determined as \( n = \left\lceil \frac{\sum_{i=1}^m s_i}{c^{-1}(\Phi)} \right\rceil \), where \( \Phi \) is the required processing capacity for each new instance.

### Three-Step Heuristic Approach

#### Step 1: Estimate the Minimum Number of New Instances
- **Estimation**:
  - If \( \eta > 0.9c \left( \sum_{i=1}^m s_i \right) \), the amount of traffic to be shunted away from the overloaded virtual firewall is \( \sum_{i=1}^m \sum_{j=1}^{k_i} \lambda_{ij} - \eta \). This traffic will be handled by the new instances, each of which must guarantee a processing capacity of \( \Phi \) as dictated by the SLA.
  - If \( S < c^{-1}(\Phi) \), the number of firewall rules that must be migrated is \( \sum_{i=1}^m s_i - c^{-1}(\Phi) \), which will be split among the new instances, each constrained by an upper bound \( c^{-1}(\Phi) \). The floor operation in the estimate implies that the estimate may be smaller than required.

#### Step 2: Apply ILP to Solve for Firewall Rule Distribution
- **ILP Formulation**:
  - Let \( x = \{x_{11}, \ldots, x_{mn}\} \) be a set of unknown variables, where \( x_{ij} \in \{0, 1\} \) indicates whether firewall rule group \( V_i \) is migrated to new instance \( j \).
  - **Objective Function**:
    \[
    \min \sum_{i=1}^m \sum_{j=1}^n x_{ij} \gamma_i
    \]
  - **Constraints**:
    1. \( x_{ij} \in \{0, 1\} \) for all \( 1 \leq i \leq m \) and \( 1 \leq j \leq n \)
    2. \( \sum_{j=1}^n x_{ij} \leq 1 \) for all \( 1 \leq i \leq m \)
    3. \( \sum_{i=1}^m x_{ij} \beta_i \leq B \) for all \( 1 \leq j \leq n \)
    4. \( \sum_{i=1}^m x_{ij} s_i \leq c^{-1}(\Phi) \) for all \( 1 \leq j \leq n \)
    5. \( \sum_{i=1}^m x_{ij} \left( \sum_{l=1}^{k_i} \lambda_{il} \right) \leq 0.9c \left( \sum_{i=1}^m s_i \right) \) for all \( 1 \leq j \leq n \)
    6. \( \sum_{j=1}^n \sum_{i=1}^m x_{ij} s_i \leq c^{-1}(\Phi) \) (if overload condition (i) occurs)
    7. \( \sum_{j=1}^n \sum_{i=1}^m x_{ij} s_i \leq c^{-1}(\Phi) \) (if overload condition (ii) occurs)

- **Solution Interpretation**:
  - If \( x_{ij} = 1 \), then firewall rule group \( V_i \) is migrated to new instance \( j \).
  - If \( x_{ij} = 0 \) for all \( j \), then firewall rule group \( V_i \) stays on the old virtual firewall.
  - If the ILP formulation has no solution, increase \( n \) by one and repeat Step 2 until a solution is found.

#### Step 3: Increase the Number of New Instances
- If the ILP formulation in Step 2 has no solution, increment \( n \) by one and repeat Step 2 until a feasible solution is found.

### Optimal Scaling-In

- **Underloaded Condition**: A virtual firewall is deemed underloaded if its runtime throughput is 50% smaller than its processing capacity.
- **Merging Underloaded Firewalls**:
  - When more than one virtual firewall is underloaded, VFW Controller merges them using the following ILP formulation to determine the maximum number of virtual firewalls to be killed while meeting the constraints:
    - Each remaining virtual firewall must not be overloaded after the merge.
    - Each remaining virtual firewall must not have its buffer space overflowed.
    - Each remaining virtual firewall must satisfy the SLA.
    - The total update cost in the merge is bounded by a predefined value \( \gamma \).

- **ILP Formulation**:
  - Suppose there are \( n \) underloaded virtual firewalls. Each underloaded virtual firewall \( j \) has:
    - A set of firewall rule groups \( V_j = \{V_j^1, V_j^2, \ldots, V_j^{m_j}\} \) with group \( V_j^i \) having:
      - A rule size \( s_j^i \)
      - An update cost \( \gamma_j^i \)
      - A buffer cost \( \beta_j^i \)
      - \( k_j^i \) matching traffic flows with flow rates \( \lambda_{j1}^i, \lambda_{j2}^i, \ldots, \lambda_{jk_j^i}^i \)
    - A processing capacity of \( c \left( \sum_{i=1}^{m_j} s_j^i \right) \) and a runtime throughput of \( \eta_j \).

  - Let \( x = \{x_{11}, \ldots, x_{nn}\} \) be a set of unknown variables, where \( x_{qj} \in \{0, 1\} \) indicates whether underloaded virtual firewall \( j \) is merged onto \( q \).

  - **Objective Function**:
    \[
    \max \sum_{j=1}^n \sum_{q=1}^n x_{qj}
    \]

  - **Constraints**:
    1. \( x_{qj} \in \{0, 1\} \) for all \( 1 \leq q \leq n \) and \( 1 \leq j \leq n \)
    2. \( x_{qq} = 0 \) for all \( 1 \leq q \leq n \)
    3. \( \sum_{q=1}^n x_{qj} \leq 1 \) for all \( 1 \leq j \leq n \)
    4. \( \sum_{i=1}^{m_j} s_j^i + \sum_{q=1}^n x_{qj} s_q \leq c^{-1}(\Phi) \) for all \( 1 \leq q \leq n \)
    5. \( \sum_{i=1}^{m_j} \sum_{l=1}^{k_j^i} \lambda_{jl}^i + \sum_{q=1}^n x_{qj} \sum_{i=1}^{m_q} \sum_{l=1}^{k_q^i} \lambda_{ql}^i \leq 0.9c \left( \sum_{i=1}^{m_q} s_q^i \right) \) for all \( 1 \leq q \leq n \)
    6. \( \sum_{i=1}^{m_j} \beta_j^i + \sum_{q=1}^n x_{qj} \beta_q \leq B \) for all \( 1 \leq q \leq n \)
    7. \( \sum_{i=1}^{m_j} \gamma_j^i + \sum_{q=1}^n x_{qj} \gamma_q \leq \gamma \)

- **Solution Interpretation**:
  - If \( x_{qj} = 1 \), then virtual firewall \( j \) is merged onto \( q \).
  - If \( \sum_{q=1}^n x_{qj} = 0 \), then virtual firewall \( j \) remains.
  - The maximum number of virtual firewalls to be killed is \( \sum_{j=1}^n \sum_{q=1}^n x_{qj} \).

### Implementation and Evaluation

- **Implementation**:
  - A prototype of VFW Controller has been implemented on top of ClickOS, a Xen-based NFV platform optimized for fast provision of virtualized network functions.
  - ClickOS creates small VMs (each less than 12MB) and boots one instance within 30 milliseconds.
  - Enhanced ClickOS to provide stateful virtual firewalls using Click modular router software, which provides rich networking processing elements.
  - Developed new Click elements for firewall rule management, buffer management, and interfaces for migrating rules and states.
  - Implemented key functions as individual modules, including a Dependency Analysis module based on Header Space Library (Hassel), a Flow Update Analysis module, and a Buffer Cost Analysis module.

- **Evaluation**:
  - The implementation provides useful insights for implementing and controlling other virtualized network functions.
  - To avoid thrashing due to frequent scaling, a threshold of frequency can be set, above which the scaling process is not allowed. The suggested threshold depends on the scaling performance of VFW Controller, which can be measured in practice.