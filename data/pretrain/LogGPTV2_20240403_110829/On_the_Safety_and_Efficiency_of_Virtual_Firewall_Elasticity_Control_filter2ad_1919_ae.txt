•
A set of m ﬁrewall rule groups V = {V1, V2, ..., Vm}
with group Vi having a rule size of si, an update cost
of γi, a buffer cost of βi, and ki matching trafﬁc ﬂows
with the ﬂow rates of λi1, λi2, ..., λiki.
A processing capacity of c((cid:80)m
An overload condition that c((cid:80)m
0.9c((cid:80)m
throughput of η.
i=1 si).
i=1 si), and a runtime
i=1 si) 
•
•
i=1
i=1
i=1
j=1
si)
(cid:98)
(cid:99)
n =
Then, VFW Controller adopts a three-step heuristic ap-
proach to work out the minimum number of new instances to
create and the ﬁrewall rule group distribution.
Step 1: VFW Controller estimates
the minimum
i=1 si)
(cid:80)ki
if S  0.9c((cid:80)m
λij−0.9c((cid:80)m
(cid:98)
In the case when η > 0.9c((cid:80)m
is(cid:80)m
number of ﬁrewall rules that must be migrated is (cid:80)m
(cid:80)m
(cid:80)m
(cid:80)ki
i=1 si), the amount of trafﬁc that
should be shunted away from the overloaded virtual ﬁrewall
j=1 λij − η, which will be undertaken by the new
instances, each of which must guarantee a processing capacity
of Φ as dictated by the SLA. In the case when S < c−1(Φ), the
i=1 si −
c−1(Φ), which will be split among the new instances, each
of which is constrained by an upper bound c−1(Φ). The ﬂoor
operation in the estimate above implies that the estimate may
be smaller than required.
i=1
(cid:99)
Step 2: VFW Controller applies ILP to solve for ﬁre-
wall rule distribution. Let x = {x11, ..., xmn} be a set of
unknown variables, where xij ∈ {0, 1} is an indicator of
migrating ﬁrewall rule group Vi to new instance j. The ILP
formulation to solve x is below:
min (cid:80)m
(cid:80)n
i=1
j=1 xijγi
s.t.
(1)
// Prevent
xij ∈ {0, 1} for 1 ≤ i ≤ m, 1 ≤ j ≤ n
j=1 xij ≤ 1 for all 1 ≤ i ≤ m
i=1 xijβi ≤ B for all 1 ≤ j ≤ n
buffer overﬂow on each new instance.
i=1 xijsi ≤ c−1(Φ) for all 1 ≤ j ≤ n
(2) (cid:80)n
(3) (cid:80)m
(4) (cid:80)m
(5) (cid:80)m
i=1 xij((cid:80)ki
l=1 λil) ≤ 0.9c((cid:80)m
// Each
i=1 sixij) for all 1 ≤
(cid:80)ki
(cid:80)n
j=1 λij −(cid:80)m
(cid:80)ki
((cid:80)m
// Each new instance must not be over-
(cid:80)n
i=1 si −(cid:80)m
0.9c((cid:80)m
l=1 xijλi,l) ≤
// After scale
out, the old ﬁrewall is not overloaded. This constraint
(cid:80)n
((cid:80)m
i=1 si −(cid:80)m
is used when overload condition (i) occurs.
j=1 xijsi) ≤ c−1(Φ)
new instance must satisfy the SLA.
j ≤ n
loaded.
//After
scaling out, the old virtual ﬁrewall must satisfy the
SLA. This constraint is used when overload condition
(ii) occurs.
j=1 xijsi)
(6)
j=1
i=1
i=1
i=1
i=1
or
(6’)
Solving the above ILP formulation, we obtain x. If xij = 1
then ﬁrewall rule group Vi is to be migrated to new instance j.
If xij = 0 for all j, then ﬁrewall rule group Vi stays on the old
10
virtual ﬁrewall. If the above ILP formulation has no solution,
which implies that the estimate of n at Step 1 is smaller than
required, then go to Step 3.
Step 3: Increase n by one and perform Step 2 again until
a solution is found.
C. Optimal Scaling-In
VFW Controller deems a virtual ﬁrewall underloaded,
if its runtime throughput is 50% smaller than its processing
capacity. When more than one virtual ﬁrewall are underloaded,
VFW Controller merges them. VFW Controller ap-
plies the following ILP formulation to determine the maximum
number of virtual ﬁrewalls to be killed while meeting the
following constraints:
Each remaining virtual ﬁrewall must not be overloaded
after the mergence.
Each remaining virtual ﬁrewall must not have its
buffer space overﬂowed.
Each remaining virtual ﬁrewall must satisfy the SLA.
The total update cost in the mergence is bounded by
a predeﬁned value γ.
•
•
•
•
•
Suppose there are n underloaded virtual ﬁrewalls. under-
loaded virtual ﬁrewall j has:
i
rule
ﬁrewall
of mj
2 , ..., V j
groups Vj
A set
{V j
1 , V j
size of sj
and kj
λj
i1, λj
i , an update cost of γj
mj} with group V j
=
having a rule
i , a buffer cost of βj
i ,
i matching trafﬁc ﬂows with the ﬂow rates of
i2, ..., λj
ikj
i
A processing capacity of c((cid:80)mj
throughput of ηj.
i ), and a runtime
Let x = {x11, ..., xnn} be a set of unknown variables, where
xqj ∈ {0, 1} is an indicator of merging underloaded virtual
ﬁrewall j onto q. The ILP formulation to solve x is presented
below:
i=1 sj
•
.
max(cid:80)n
(cid:80)n
j=1
q=1 xqj
s.t.
(1)
(2)
i
i=1
j=1
q ≤ n
i=1 xqjsj
xqj ∈ {0, 1} for all 1 ≤ q ≤ n, 1 ≤ j ≤ n
xqq = 0 for all 1 ≤ q ≤ n
(cid:80)mj
i +(cid:80)n
q=1 xqj ≤ 1 for all 1 ≤ j ≤ n
i ≤ c−1(Φ) for all 1 ≤
i=1 sq
(cid:80)kj
(cid:80)mj
il +(cid:80)n
(cid:80)kq
(cid:80)mj
i +(cid:80)n
0.9c((cid:80)mq
l=1 λj
i ) for all 1 ≤ q ≤ n
(cid:80)mj
(cid:80)mj
(cid:80)n
i ≤ B for all 1 ≤ q ≤ n
i=1 xqjγj
(3) (cid:80)n
(4) (cid:80)mq
(5) (cid:80)mq
(6) (cid:80)n
(7) (cid:80)n
1, then virtual ﬁrewall j is merged onto q. If (cid:80)n
virtual ﬁrewall to be killed is(cid:80)n
Solving the above ILP formulation, we obtain all xqj. If xqj =
q=1 xqj =
0, then virtual ﬁrewall j remains. The maximum number of
i ≤ γ
(cid:80)n
l=1 λq
i=1 sq
ilxqj ≤
i=1 xqjβj
i=1 xqjsj
q=1
j=1
j=1
j=1
j=1
i=1
i
q=1 xqj.
j=1
In reality, there may be cases where conditions of scaling-
out or scaling-in occur frequently thus requiring frequent
scaling-out or scaling-in. To avoid thrashing, a potential solu-
tion is to set a threshold of frequency, above which the scaling
process is not allowed. The suggested threshold depends on
the scaling performance of VFW Controller, which can
be measured in practice.
VIII.
IMPLEMENTATION AND EVALUATION
A. Implementation
We have implemented a prototype of VFW Controller
on top of ClickOS [38]. ClickOS is a Xen-based NFV platform
optimized for fast provision of virtualized network functions
in large scale. ClickOS creates small VMs (each less than
12MB) and boots one instance within 30 milliseconds. We
have enhanced ClickOS to provide stateful virtual ﬁrewalls
using Click modular router software [33]. Click provides
rich networking processing elements, which can be leveraged
to construct a wide range of virtual middleboxes. We have
used three elements, IPﬁlter, IPClassiﬁer and IPFragmenter,
provided by Click to implement ﬁrewall packet processing
function. We have also developed new Click elements for
ﬁrewall rule management, buffer management, and interfaces
for migrating rules and states. In particular, we have developed
a programming interface on top of XL [10] 6, which VFW
Controller uses to exert migration controls on individual
virtual ﬁrewalls. Such a control automation is essential to
fully take advantage of virtual ﬁrewall beneﬁts [6]. Our VFW
implementation provides useful
insights to implement and
control other virtualized network functions as well.
Key functions of VFW Controller have been realized
as individual modules. In particular, we have implemented a
Dependency Analysis module based on Header Space Library
(Hassel) [4], which is a tool for static header space analysis, a
Flow Update Analysis module to ﬁnd the correct ﬂow updates
and calculate update costs, a Buffer Cost Analysis module