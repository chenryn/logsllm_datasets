6
7
p ← p + [s]
v ← v ∪ {s}
if len(p.turns) > t then
if len(p.turns) = t then
return
E ← E ∪ {p}
NP ← NP + 1
if e (cid:7)∈ v and F ilter(s, e, p,SI ) passed then
for e ∈ V such that (s, e) ∈ E do
p.curve ← updateCurvature(s, e, p)
p.turns ← updateT urns(s, e, p)
p.score ← p.score ∗ Score(s, e, p,SI )
GenerateEscapePaths (c, t)
end
p ← p − [s]
v ← v − {s}
8
9
10
11
12
13
14
15
16
17
18
19
20
21
Algorithm 2: Escape Paths Algorithm
Given a spoofed path, the escape paths algorithm (Algo-
rithm 2) generates a set of escape paths with similar distances,
road curvatures and turn angles to the spoofed path. The
algorithm is similar to that of the spoofed paths generator.
The main differences being that
the algorithm uses each
spoofed path SI generated in the previous stage as input, where
SI ∈ S, and outputs a set of escape paths E. Also, the escape
paths generator algorithm uses the turn count in the spoofed
path as a parameter to GenerateEscapePaths (lines 3 –
4) and checks whether the desired turn count has been reached
for the escape path under consideration (lines 10 – 12).
The deviations from the spoofed paths (to avoid INS de-
tection) can be determined by analyzing the noise sensitivity
of the inertial sensors used for tracking. We demonstrate that
commodity accelerometers and gyroscopes present challenges
in accurately calculating the distances, road curvature and
turn angles which can allow an attacker to travel to multiple
destinations without detection. We show that magnetometers
are easily spoofed rendering them incapable of detecting
anomalies in the heading direction of the vehicle. Our analysis
of the accelerometer and gyroscope noise and the potential of
magnetometer spooﬁng are reported in Section IV-A. Unlike
the spoofed paths generator algorithm that ranked paths by
score, the escape paths computed by this algorithm always
have a score of 1. The intuition is that all paths that pass
the algorithm’s ﬁlters are certain to avoid detection by INS
tracking systems.
(cid:2)
(cid:2)
Filtering: In this algorithm, we represent the input spoofed
path by SI = {(dI , ϑI , θI )} where dI and ϑI denote the set
of distances and road curvatures between intersections and θI
denotes the turn angles at the intersections. We ﬁrst present
the idea of ﬁltering using just turn angles θI, and later expand
the discussion to include distances dI and road curvatures ϑI.
Let θI = {θ(χ1), . . . , θ(χK)} be the derived turn angles of
the spoofed path, where K is the number of intersections.
A turning connection χ
= (s, e) in the escape path, where
(s, e) ∈ E, is valid for an intersection k ∈ K when the turn
angle difference is below a set threshold value Tθ, i.e., |θ(χk)−
)| ≤ Tθ. The parameter Tθ depends on the noise sensitivity
θ(χ
of the gyroscope sensor.
The ﬁlter for distances dI is similar to turn angles. Let dI =
{d1, . . . , dK+1} be the derived distances of the spoofed path
traveled between K intersections. For an intersection k ∈ K,
dk represents the path’s distance from the previous intersection
k − 1, i.e., dk = d(k) − d(k − 1) where d(.) denotes the total
distance of the spoofed path at a given intersection. Note that
k = 0 is the source of the path and k = K+1 is the destination
in the escape path is valid for
of the path. A connection χ
intersection k when its path distance from previous intersection
k − 1 is between a range deﬁned by the kth intersection of
the spoofed path, i.e., dk ∗ Td1 ≤ d’(k) − d’(k − 1) ≤ dk ∗
Td2. Here, d’(.) denotes the distance of the escape path at an
intersection. The above parameters Td1 and Td2 depend on the
noise sensitivity of the accelerometer sensor.
(cid:2)
(cid:2)
The ﬁlter for road curvature ϑI is more complex than turn
angles and distances. The reason is that, given an intersection
k ∈ K, the distance dk and turn angle θ(χk) are scalars
while ϑ(sk) is a vector that must be derived from bearings of
the road segment sk between intersections k − 1 and k. Two
different vectors of bearings Bk and B(cid:2)
for road segments sk
, respectively, cannot be compared directly as they may
and s
be of different lengths and in different orientations, e.g., Bk
may be directed north when B(cid:2)
is directed east. Our idea of
calculating the road curvature similarity, denoted by C(sk, s
(cid:2)
),
is to translate these bearings to the same size N using linear
interpolation, convert the interpolated bearings to curvature,
and then compare the curvatures. Let BIk and B(cid:2)
I represent
the interpolated bearings for Bk and B(cid:2)
, respectively. The cur-
vature of a road segment s with M bearings B = [b1, . . . , bM ]
can be derived by subtracting successive bearings for all the
bearings in B, i.e., ϑ(s) = [(b2 − b1), . . . , (bM − bM−1)]. Let
) be the curvatures derived from BIk and B(cid:2)
ϑ(sk) and ϑ(s
I,
respectively. The curvature similarity of the two segments can
then be represented as:
) = {|ck − c
(cid:2)| ∀ck ∈ ϑ(sk),∀c
(cid:2) ∈ ϑ(s
C(sk, s
)}.
(cid:2)
(cid:2)
(cid:2)
(3)
(cid:2)
A connection χ
in the escape path is valid for intersection
k when the maximum curvature similarity value is below a
set threshold value Tϑ, i.e., max(C(sk, s
)) ≤ Tϑ. Like turn
ﬁltering, this parameter Tϑ also depends on the gyroscope
noise sensitivity.
To avoid detection, the above discussed constraints must
hold for all K intersections of the escape path. Therefore, an
(cid:2)
(cid:22)(cid:26)(cid:20)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:50:11 UTC from IEEE Xplore.  Restrictions apply. 
true acceleration experienced by the device on the x, y and z
axis, and nt is an unknown noise quantity caused by several
factors. For example, the sensors have an inherent bias due
to manufacturing defects such as axis misalignment. Another
source of noise is the vibrations caused by the mechanical
structure of the vehicle and the engine. Additional noise is
induced on the sensor due to external environments such as
road conditions and trafﬁc.
We are interested in ﬁnding the range of divergence from
the actual values due to nt, when distance is calculated from
accelerometer data. To obtain this range, we calculate the
distances between intersections using accelerometer data for
each sensor path in the data-set, and compare it to the actual
distances obtained from OpenStreetMap. To reduce the impact
of noise, we perform the calibration and rotation techniques
described in [47] before calculation. We also average multiple
samples together to further reduce the impact from noise.
As distances may signiﬁcantly vary between intersections,
we represent
the distance error as a ratio of the derived
accelerometer distances to the actual distances. More precisely,
if ds is a vector of N derived accelerometer distances and
da is a vector of N actual distances, then errors ea can be
represented as a vector ea = [(ds1 /da1 ), . . . , (dsN /daN )].
Figure 5a shows the distribution of the errors ea. Note that the
desired value for an error should be near 1, however, we see
large variations ranging between 0.1 to 5. This indicates that
the accelerometer sensor is unsuitable for distance calculation
and enables an attacker to travel much larger distances than the
intended path. Recall that the escape paths generator algorithm
uses parameters Td1 and Td2 to ﬁlter connections of the escape
paths based on distances (Section III-C3). These parameters
are chosen from the error distribution ea such that the allowed
range is based on the 75th percentile of the distribution, i.e.,
Td1 = 0.2 and Td2 = 3.3.
2) Gyroscope and Magnetometer Accuracy: The gyroscope
sensor can be used to measure the turn angles and the curvature
of the path. This data can also be represented as the vector
g = [(g1 + n1), . . . , (gT + nT )], where gt is the rate of angular
change experienced by the device on the x, y and z axis, and
nt is an unknown noise quantity. In this case, however, the
impact of nt is not as signiﬁcant as accelerometers and the
measurements are closer to the actual values.
We are interested in ﬁnding the turn angle errors and
the curvature errors calculated from the gyroscope data, in
comparison to the actual values derived from OpenStreetMap.
To calculate the turn errors, we use a similar approach to [47]
in that we deﬁne a turn error as the absolute difference between
the gyroscope derived turn angle and the actual turn angle.
However, we are interested in the overall error distribution for
all the phones instead of individual phones. Figure 5b shows
the distribution of the turn angle errors for all the turns in the
data-set. The distribution reafﬁrms that the gyroscope is much
more accurate than the accelerometer where 75% of the turn
errors are within 5.5
calculating curve similarity C(sk, s
To calculate the curvature errors, recall our technique for
) for two road segments
◦
.
s
t
n
u
o
C
250
200
150
100
50
0
0
5
10
15
Accelerometer Errors (m)
s
t
n
u
o
C
125
100
75
50
25
0
−40 −20
0
20
40
Turn Angle Errors (deg)
(a) Distance errors
(b) Turn angle errors
10000
8000
6000
4000
2000
s
t
n
u
o
C
3000
2000
1000
s
t
n
u
o
C
0
0
10
20
30
40
Curvature Errors (deg)
0
0
50
Bearing Errors (deg)
100
150
(c) Curvature errors
(d) Bearing errors
Fig. 5: Sensor error distributions measured in real experiments.
escape path is considered valid if and only if all the following
conditions are met.
|θ(χk) − θ(χ(cid:2))| ≤ Tθ,
dk ∗ Td1 ≤ d’(k) − d’(k − 1) ≤ dk ∗ Td2,
max(C(sk, s(cid:2))) ≤ Tϑ,
∀ k = 1, . . . , K
∀ k = 1, . . . , K + 1
∀ k = 1, . . . , K + 1
IV. ATTACK IMPACT: IMPLEMENTATION AND EVALUATION
In this section, we present the implementation of our attack
and evaluate its effectiveness in various cities across the globe.
First, we evaluate the accuracy of inertial sensors and derive
realistic noise threshold settings for ESCAPE algorithm. Then,
we describe the details of our experimental setup and the
methodology. Finally, we present the results of our evalua-
tion using two metrics, (i) displacement from the assigned
destination and (ii) coverage area of the escape paths.
A. Accuracy of Inertial Sensors
The sensor data for evaluating the noise sensitivity of
accelerometers and gyroscopes was obtained from an open
dataset [47]. This dataset comprises of accelerometer, gyro-
scope and magnetometer samples recorded from ≈ 140 real
driving experiments in the cities of Boston and Waltham, MA,
USA. The sensor samples were collected on 4 smart phones
(HTC One M7, LG Nexus 5, LG Nexus 5X, and Samsung S6).
The GPS traces for these routes were also recorded for ground
truth comparison. The work focused speciﬁcally on gyroscope
noise during turns. We extend that work to also include noise
sensitivity when distance is calculated from the accelerometer
sensor, as well as when road curvature is calculated from the
gyroscope sensor.
1) Accelerometer Accuracy: The accelerometer sensor can
be used to calculate the distance traveled for a path. This data
can be represented as a vector a = [(a1 + n1), . . . , (aT +
nT )] sampled at discrete time intervals t ∈ T , where at is the
(cid:2)
(cid:22)(cid:26)(cid:21)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:50:11 UTC from IEEE Xplore.  Restrictions apply. 
200
)
g
e
d
(
s
g
n
i
r
a
e
B
0
0
50
100
150
Time (s)
(a) Example Route in Manhattan
(b) Spoofed Bearings
Fig. 7: Example of magnetometer spooﬁng.
the magnetic ﬁeld in a plane. We used the following solenoid
magnetic ﬁeld formula to estimate the intensity: B = kμ0nI
−7 H/m, n is
where k is the relative permeability, μ0 = 4π10
the coil turn density, and I is the electric current. Our coils
turn density n is 155 turns/meter since we used 5 layers of
28 AWG enameled magnet wire. Without a core (k = 1), we
estimated a magnetic ﬁeld of 98uT with a current of 5mA,
which is strong enough to impact the magnetometer. Note that
if the magnetometer is not accessible in other systems, it is
possible to use larger coils or channel the magnetic ﬁeld using
materials with higher relative permeability. While the relative
permeability of air is 1, it is 5, 000 for iron, and 200, 000 for
iron annealed in hydrogen. To control the current in each of
the coils, we used the ESP32 microcontroller (Heltec WiFi Kit
32) with a sufﬁcient number of GPIO/DAC pins to control the
8-channel relay module augmented with variable resistors for
current tuning. The spoofer was written in Python and takes as
input a sequence of bearings and durations. It sets the current
in the coils to trigger turns with a timing that matches the
input durations. Figure 7 shows an example spooﬁng route.
B. Integrated Attack
An integrated GPS/INS/Magnetometer spooﬁng system is
not trivial. It has to address two categories of challenges:
(1) synchronizing all spooﬁng components: GPS spooﬁng
SDR platform, magnetometer spooﬁng coils, and sensing
components real GPS, and INS sensors; and (2) dynamically
generating the GPS spooﬁng RF signals consistent with the
real time vehicle trajectory. Handling the synchronization is a
matter of carefully architecting the system and implementing
the control loop. However, real time spooﬁng of the GPS
and magnetometer to account for trafﬁc conditions such as
trafﬁc lights and ﬂuidity is more challenging. While the
magnetometer is fully under the control of the adversary and