docker container exec -it app01 ping -c 4 app02
```
![](img/5ed6a092-d5db-46d9-bc71-2157d4bb58e1.png)
完美！我们有双向沟通。你还注意到什么了吗？我们有我们的应用容器的名称解析(我们不需要只通过 IP ping)。很不错，对吧？
# 参考
查看这些链接了解更多信息:
*   安装和使用编织网络驱动程序:[https://www.weave.works/docs/net/latest/overview/](https://www.weave.works/docs/net/latest/overview/)
*   Weaveworks 编织 github repo:[https://github.com/weaveworks/weave](https://github.com/weaveworks/weave)
# 创建 Docker 网络
好了，现在您已经对本地和远程网络驱动程序有了很多了解，并且您已经看到了当您安装 Docker 和/或初始化集群模式(或安装远程驱动程序)时，它们中的几个是如何为您创建的。但是，如果您想使用这些驱动程序创建自己的网络，该怎么办？这真的很简单。让我们来看看。`network create`命令的内置帮助如下所示:
```
# Docker network create command syntax
# Usage: docker network create [OPTIONS] NETWORK
```
检查这一点，我们看到这个命令基本上有两个部分需要处理，OPTIONS 后跟 NETWORK 名称，以创建我们希望创建的网络。我们有什么选择？嗯，有很多，但是让我们挑选几个让你快速前进。
可能最重要的选项是`--driver`选项。这就是我们如何告诉 Docker 在创建网络时使用哪个可插拔网络驱动程序。如您所见，驱动程序的选择决定了网络特性。您提供给驱动选项的值将类似于`docker network ls`命令输出的驱动列中显示的值。一些可能的值是桥接、覆盖和 macvlan。请记住，您不能创建额外的主机或空网络，因为它们仅限于每个 Docker 主机一个。到目前为止，这可能是什么样子？下面是一个创建新覆盖网络的示例，主要使用默认选项:
```
# Create a new overlay network, with all default options
docker network create -d overlay defaults-over
```
那很好。您可以运行新服务并将其连接到新网络。但是我们还想在网络中控制什么呢？嗯，IP 空间怎么样？是的，Docker 为我们的网络提供了控制 IP 设置的选项。这是使用`--subnet`、`--gateway`和`--ip-range`可选参数完成的。因此，让我们看一下使用这些选项创建新网络。参见[第 2 章](2.html)、*学习 Docker 命令*，如果您还没有安装 jq，请参见:
```
# Create a new overlay network with specific IP settings
docker network create -d overlay \
--subnet=172.30.0.0/24 \
--ip-range=172.30.0.0/28 \
--gateway=172.30.0.254 \
specifics-over
# Initial validation
docker network inspect specifics-over --format '{{json .IPAM.Config}}' | jq
```
在我的实验室中执行前面的代码如下所示:
![](img/bbd502b4-374d-406d-915c-b2af371914b3.png)
查看此示例，我们看到我们使用子网、IP 范围和网关的特定 IP 参数创建了一个新的覆盖网络。然后，我们验证网络是用请求的选项创建的。接下来，我们使用新网络创建了一项服务。然后，我们找到了属于该服务的一个容器的容器标识，并使用它来检查该容器的网络设置。我们可以看到，容器是使用我们配置网络的 IP 范围中的一个 IP 地址(在本例中为`172.30.0.7`)运行的。看来我们成功了！
如上所述，在创建 Docker 网络时，还有许多其他选项可用，我将把它作为一个练习留给您，用`docker network create --help`命令发现它们，并尝试其中一些来看看它们做什么。
# 参考
您可以在[上找到`network create`命令的文档。](https://docs.docker.com/engine/reference/commandline/network_create/)
# 免费网络功能
有两种网络功能或服务是你可以免费获得的。第一个是服务发现，第二个是负载平衡。当您创建 Docker 服务时，您会自动获得这些功能。我们在本章和 [第 5 章](5.html)*Docker Swarm*中体验了这些特性，但并没有真正提到它们的名字。所以，让我们把他们叫出来。
首先是服务发现。创建服务时，它会获得一个唯一的名称。该名称会在群域名系统中注册。而且，每个服务都使用群域名系统进行名称解析。这里有一个例子给你。我们将利用我们之前在创建 Docker 网络部分创建的`specifics-over`覆盖网络。我们将创建两个连接到该网络的服务(`tester1`和`tester2`，然后我们将连接到`tester1`服务中的一个容器，并通过名称 ping`tester2`服务。看看吧:
```
# Create service tester1
docker service create --detach --replicas 3 --name tester1 \
 --network specifics-over alpine tail -f /dev/null
# Create service tester2
docker service create --detach --replicas 3 --name tester2 \
 --network specifics-over alpine tail -f /dev/null
# From a container in the tester1 service ping the tester2 service by name
docker container exec -it tester1.3.5hj309poppj8jo272ks9n4k6a ping -c 3 tester2
```
以下是执行上述命令时的样子:
![](img/d89ec999-415d-4163-832d-414748894ff4.png)
请注意，我键入了服务名的第一部分(`tester1`)，并通过点击*选项卡*来填充 exec 命令的容器名，从而使用命令行完成。但是，正如您所看到的，我能够从一个`tester1`容器中通过名称引用`tester2`服务。
免费的！
我们获得的第二个免费特性是负载平衡。这个强大的特性非常容易理解。它允许将服务的流量发送到群集中的任何主机，而不管该主机是否运行服务的副本。
想象一下这样一个场景:您有一个六节点集群，而服务只部署了一个副本。您可以通过群中的任何主机向该服务发送流量，并且知道它将到达该服务的一个容器，而不管该容器实际运行在哪个主机上。事实上，您可以使用负载平衡器将流量定向到群集中的所有主机，例如在循环模型中，并且每次流量被发送到负载平衡器时，该流量都会毫无故障地传递到应用容器。
很方便，对吧？再次，免费！
# 参考
想要尝试服务发现吗？然后查看[https://training . play-with-docker . com/swarm-service-discovery/](https://training.play-with-docker.com/swarm-service-discovery/)。
你可以在[https://docs . docker . com/engine/swarm/key-concepts/#负载均衡](https://docs.docker.com/engine/swarm/key-concepts/#load-balancing)上阅读关于 swarm 服务负载均衡的内容。
# 我应该使用哪个 Docker 网络驱动程序？
那个问题的简单答案是适合这份工作的。这意味着没有一个单一的网络驱动程序适合每种情况。如果您在笔记本电脑上工作，在 swarm 不活动的情况下运行，并且您只需要您的容器能够相互通信，那么简单的桥模式驱动程序是理想的。
如果您有多个节点，并且只需要容器到容器的流量，那么使用覆盖驱动程序是正确的。如果您在容器到容器的领域中，这个在 AWS 中很有效。如果您需要容器到虚拟机或容器到物理服务器的通信(并且可以容忍混杂模式)，那么 MACVLAN 驱动程序是您的不二之选。或者，如果您有更复杂的需求，那么许多远程驱动程序中的一个可能正是医生所要求的。
我发现，对于大多数多主机场景，覆盖驱动程序将完成工作，因此我建议您启用集群模式，并在升级到任何其他多主机选项之前尝试覆盖驱动程序。
# 摘要
你现在对 Docker 网络有什么看法？Docker 采用了复杂的技术，联网，并使其易于理解和使用。大多数疯狂、困难的设置工作实际上都是通过一个`swarm init`命令来完成的。让我们回顾一下:您了解了 Docker 创建的网络设计，称为容器网络模型或 CNM。然后，您了解了 libnetwork 项目如何将该模型转变为可插拔架构。之后，您发现 Docker 创建了一组强大的驱动程序来插入 libnetwork 体系结构，从而为您的大多数容器通信需求提供各种网络选项。由于该架构是可插拔的，其他人已经创建了更多的网络驱动程序来解决 Docker 驱动程序无法处理的任何边缘情况。Docker 网络真正有了自己的特色。
希望大家做好更多准备，因为在[第七章](7.html)*Docker 书库*中，我们将深入 Docker 书库。这是你迄今为止所学到的所有信息真正汇集成一首辉煌交响曲的地方。深呼吸，翻开新的一页！