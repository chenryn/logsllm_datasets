title:SIFF: A Stateless Internet Flow Filter to Mitigate DDoS Flooding
Attacks
author:Abraham Yaar and
Adrian Perrig and
Dawn Xiaodong Song
SIFF: A Stateless Internet Flow Filter
to Mitigate DDoS Flooding Attacks∗
Abraham Yaar Adrian Perrig Dawn Song
Carnegie Mellon University
{ayaar, perrig, dawnsong}@cmu.edu
Abstract
One of the fundamental limitations of the Internet is the
inability of a packet ﬂow recipient to halt disruptive ﬂows
before they consume the recipient’s network link resources.
Critical infrastructures and businesses alike are vulnerable
to DoS attacks or ﬂash-crowds that can incapacitate their
networks with trafﬁc ﬂoods. Unfortunately, current mecha-
nisms require per-ﬂow state at routers, ISP collaboration,
or the deployment of an overlay infrastructure to defend
against these events.
In this paper, we present SIFF, a Stateless Internet Flow
Filter, which allows an end-host to selectively stop indi-
vidual ﬂows from reaching its network, without any of the
common assumptions listed above. We divide all network
trafﬁc into two classes, privileged (prioritized packets sub-
ject to recipient control) and unprivileged (legacy trafﬁc).
Privileged channels are established through a capability ex-
change handshake. Capabilities are dynamic and veriﬁed
statelessly by the routers in the network, and can be revoked
by quenching update messages to an offending host. SIFF is
transparent to legacy clients and servers, but only updated
hosts will enjoy the beneﬁts of it.
1 Introduction
Despite a signiﬁcant breadth of research into defenses,
Denial of Service (DoS) attacks remain a signiﬁcant prob-
lem in the Internet today. The DoS phenomenon has
evolved rapidly over the last decade. DoS attacks were
∗
This research was supported in part by the Center for Computer and
Communications Security at Carnegie Mellon under grant DAAD19-02-
1-0389 from the Army Research Ofﬁce, and by gifts from Bosch, Cisco,
Intel, and Matsushita Electric Works Ltd. The views and conclusions con-
tained here are those of the authors and should not be interpreted as neces-
sarily representing the ofﬁcial policies or endorsements, either express or
implied, of ARO, Bosch, Carnegie Mellon University, Cisco, Intel, Mat-
sushita Electric Works Ltd., or the U.S. Government or any of its agencies.
once caused by only a few attackers—often only a single
attacker—sending specially crafted packets designed to ex-
ploit ﬂaws in the victim’s particular TCP/IP implementation
(e.g., the Teardrop or Land Attack), and sometimes using IP
spooﬁng [10] (the forging of the source IP address ﬁeld in
the IP header to something other than the sending host’s IP
address) to hide their identity. DoS attacks are becoming an
increasing risk, as the sophistication of current attack tools
enables relatively inexperienced attackers to perform these
attacks.
As the number of systems connected to the Internet has
increased, the black-hat community has developed tools
(known as root-kits) that take advantage of security ﬂaws
in operating system services to compromise computers. The
black-hat community has also written tools designed to con-
trol and coordinate these exploited machines (often called
zombies) on a large scale [13, 14]. These developments
have given rise to a new type of DoS classiﬁcation: the dis-
tributed DoS attack (DDoS). These attacks tend to be dif-
ferent from simple DoS attacks in that the attacks are com-
posed of compromised hosts that are not easily traceable to
the machine controllers themselves. For this reason, DDoS
attackers are not concerned with spooﬁng as a disguising
tactic; they merely use it to bypass potential IP address ﬁl-
ters or to involve unwitting third parties in the attack as traf-
ﬁc ampliﬁers [34]. Furthermore, because of the sheer num-
ber of hosts involved, (there have been reports of groups
claiming over 140,000 compromised hosts under their con-
trol [11]), the attacks tend to work simply by ﬂooding pack-
ets onto the network, which converge upstream from the
intended victim and disrupt the infrastructure, to prevent or
reduce legitimate access to the victim.
The DDoS ﬂooding problem is particularly difﬁcult to
defend against, because the very architecture that has fu-
eled the Internet’s growth—reliance on intelligent end-hosts
connected by a relatively simple network (the end-to-end
principle)—is used to the attacker’s advantage. In this net-
work architecture, any host in the network can send a packet
Proceedings of the 2004 IEEE Symposium on Security and Privacy (S&P’04)  
1081-6011/04 $ 20.00 © 2004 IEEE 
1
to any destination address (even if the destination does not
want to receive the packet), and the destination has no
way of stopping those packets before they reach it (or its
network). Although many innovative avenues of defense
against DoS and DDoS have been explored in the literature
(we review some of these in the next section), only a few
of the approaches even address the DDoS ﬂooding prob-
lem. In this paper, we explore the design issues involved
in constructing a system from scratch that solves the DDoS
ﬂooding problem by giving a packet receiver control over
which packets the network delivers to it.
1.1 Related Work
Several researchers have studied the frequency and na-
ture of Internet DoS attacks [16, 17, 21, 24, 31].
In this
section, we review related work in the area of Internet DoS
defenses. We distinguish the research into two general ar-
eas: defending against IP source address spooﬁng, and de-
fending against bandwidth ﬂooding attacks.
We ﬁrst discuss research in defenses against source IP
address spooﬁng. Ferguson and Senie propose to deploy
network ingress ﬁltering to limit spooﬁng of the source IP
address [15]. Burch and Cheswick propose to use a lim-
ited form of DoS attack to probe which links are affected
by an attack and can thus trace back to the origin [8]. Park
and Lee propose a distributed packet ﬁltering (DPF) mech-
anism against IP address spooﬁng [32]. DPF relies on BGP
routing information to detect spoofed IP addresses.
Bellovin et al. suggests adding a new type of ICMP mes-
sage for traceback [6], and Mankin et al. present an im-
provement to this scheme [28]. Several researchers propose
to embed traceback information within the IP packet [2, 12,
19, 26, 35, 38, 43]. Most of these schemes use the 16-bit IP
Identiﬁcation ﬁeld to hold traceback information. Routers
along the packet’s path probabilistically mark bits in the
IP Identiﬁcation ﬁeld in different ways. While traceback
schemes could be used to ﬁnd the origins of the attacks,
they often require a large number of packets and cannot be
used to ﬁlter out packets on a per-packet basis.
Snoeren et al. propose a mechanism using router state to
track the path of a single packet [37]. Their approach en-
ables a victim to trace back a single packet by querying the
router state of upstream routers. In earlier work, we pro-
pose the Pi marking scheme to enable the victim to detect
packets with a spoofed source IP address [47]. Pi is not ef-
fective against bandwidth ﬂooding attacks because it relies
on victim ﬁltering of DDoS trafﬁc and bandwidth ﬂooding
typically causes damage (i.e., dropped packets) upstream
from the victim.
The IP traceback and spooﬁng defenses we discussed
so far, defend against DDoS at the victim of the attack.
The research most closely related with our work attempts
to defend against network ﬂooding attacks in the network
itself. Stone proposes the CenterTrack mechanism, which
uses routers capable of input debugging (the ability to de-
termine through which router interface a particular packet
was received) that would be virtually connected through IP
tunnels to all border routers on a network [42]. When a node
in the network comes under attack, the overlay network is
activated, and all border routers channel trafﬁc through the
overlay routers. These routers would use input debugging to
determine from which border router, and hence from which
neighbor network, the DDoS trafﬁc is coming from. How-
ever, this technique requires that the ISP create the overlay
network and perform ﬁltering, and may not be practical for
large attacks.
Generalized network congestion control is related to
DDoS defense. Ioannidis et al. propose Aggregate Conges-
tion Control (ACC)/Pushback, which leverages router sup-
port to rate-limit groups of similar packets responsible for
congestion, and push ﬁlters upstream towards the sources
of those packets to preserve network bandwidth [22, 27].
ACC/Pushback requires non-negligible state at routers and
faces challenges in attack trafﬁc identiﬁcation and ISP inter-
operation. Stoica et al. propose a mechanism for State-
less Fair Queueing (SFQ) in the network core [40]. Their
scheme has edge routers maintain per-ﬂow arrival-rate in-
formation. Edge routers label packets based on their ﬂow’s
rate information, and core network routers use probabilis-
tic dropping based on the packet labels to fairly distribute
bandwidth among ﬂows. SFQ requires that the malicious
ﬂows’ edge routers implement the labeling, so that those
ﬂows can be rate limited in the core.
Researchers recently investigated using overlay net-
works to mitigate the effect of DoS attacks. Keromytis et
al. designed the Secure Overlay Services (SOS) architec-
ture to proactively defend against DoS attacks [25]. SOS
uses an overlay network to authenticate users and installs
ﬁlters at the ISP level. Anderson generalizes the SOS ar-
chitecture by considering different ﬁltering techniques and
overlay routing mechanisms and proposes Mayday [4]. Ad-
kins et al. propose the use of the Internet Indirection In-
frastructure (i3) [39] to enable the victim to stop individual
ﬂows by removing the unique forwarding pointer that each
sender possesses [1]. An advantage of these techniques is
that they do not require changing the current Internet in-
frastructure. However, they assume presence of an overlay
infrastructure, they require per-ﬂow state in the overlay net-
work, and they assume updated client and server software
and protocols.
Mirkovic et al. propose D-Ward, an automated system
that detects ﬂooding attacks on a link and automatically in-
stalls ﬁlters [29]. In their system, the receiver has no control
over these ﬁlters, and so the receiver has no way of stop-
ping a widely distributed ﬂooding attack or choosing ﬂows
Proceedings of the 2004 IEEE Symposium on Security and Privacy (S&P’04)  
1081-6011/04 $ 20.00 © 2004 IEEE 
2
it wants to serve in case of a ﬂash crowd [24]. Jamjoom
and Shin propose persistent dropping for dealing with ﬂash
crowds [23]. Their drop policy preferentially drops TCP
SYN packets in favor of preserving ongoing TCP ﬂows, but
does not deal with DoS attacks that may ﬂood with trafﬁc
other than TCP SYNs.
Our SIFF protocol or a capability-based approach that
uses per-ﬂow state can easily be implemented in a secure
active network environment [3].
Anderson et al. present a capability-based approach,
where a sender ﬁrst needs to obtain a capability from the in-
frastructure to send trafﬁc to a receiver [5]. Their approach
is similar to ours, but requires per-ﬂow state at each router.
Gligor analyzes various mechanisms for ﬁltering exces-
sive connection establishment requests [18]. Assuming that
the network connections are not saturated, he analyzes the
waiting time guarantees that various puzzle and client chal-
lenge techniques provide and comes to the intriguing con-
clusion that puzzles are not useful to provide any guarantees
of waiting time.
In contrast to these previous approaches, the mechanisms
we present in this paper provide the victim of a ﬂooding at-
tack (or a server in the case of ﬂash crowds) to select indi-
vidual trafﬁc ﬂows that it wants to stop, without requiring
per-ﬂow state in the network (in fact, without contacting
any routers or ISPs), while still enabling legacy clients or
servers to communicate with updated servers or clients.
1.2 Organization
The remainder of our paper is composed as follows: in
Section 2 we deﬁne the properties and assumptions that we
make in designing SIFF. In Section 3 we present a detailed
design of the SIFF system and protocols. In Section 4 we
present a model, based on real Internet topologies, to ana-
lyze SIFF’s performance. In Section 5 we discuss several
possible modiﬁcations and extensions to SIFF. Finally, in
Section 6 we conclude the paper.
2 Problem Statement and Assumptions
Several researchers recently report that while the victim
is in the best position to detect ﬂooding DDoS attacks, it
lacks the means to stop malicious ﬂows in the current In-
ternet architecture [1, 5, 18]. Similarly, ﬂash crowds ex-
haust the bandwidth on network links and TCP ﬂows mutu-
ally prevent each other from achieving high bandwidth [24]
(the additive increase when there is no packet loss and
multiplicative decrease when there is packet loss causes
TCP connections to reduce their bandwidth to a very small
amount if packet loss exceeds 5%). Thus, there is the need
for a mechanism that enables the victim of a ﬂooding attack
or the server of a ﬂash crowd to be able to stop individual
ﬂows before they saturate its network, to provide good per-
formance to the remaining ﬂows. In this paper, we present
SIFF, a Stateless Internet Flow Filter that enables an end-
host to stop individual trafﬁc ﬂows from reaching it, with-
out keeping per-ﬂow state in the network. Speciﬁcally, SIFF
provides the following properties:
• Client/Server privileged communication. SIFF al-
lows a client and server to establish a privileged chan-
nel over IP whose packets take precedence over non-
privileged packets.
• Recipient controlled privileged ﬂows. SIFF gives the
receiving host of a privileged communication channel
the ability to tear-down that channel, and thus stop
the ﬂow of packets on the channel from reaching its
network. Packets from that channel will get dropped
by a router close to the sender with, high probability,
and thus these packets will not take up bandwidth re-
sources on a link close to the receiver.
• Limited spooﬁng of source addresses. Equivalent
to ingress ﬁltering—the receiving host of a privileged
communication channel can be sure, with high prob-
ability, that the packets arriving on that channel were
sent by a host on the same network as the host having
the source IP address in the packet.
• No end-host/ISP or inter-ISP cooperation. SIFF
does not require end-host signaling of routers or the
signaling of routers of one ISP by those of another ISP.
• No intra-ISP cooperation. SIFF does not require sig-
naling between a single ISP’s routers beyond that re-
quired for packet routing.
• Small, constant state at routers. Routers implement-
ing SIFF need only keep a constant amount of state per
router interface, independent of the number of privi-
leged channels traversing that router. This is one of
the main features of SIFF, as other mechanisms we are
aware of require per-ﬂow state at routers to achieve the
above properties.
• Small, per-packet processing at routers. A SIFF
router need only execute two equality checks for ev-
ery privileged packet, or a single hash computation
(which can be reduced to a table lookup) for every
unprivileged packet, that it forwards. These compu-
tations are independent of the number of privileged or
unprivileged channels traversing a router. The hashing
and equality checks can be done in parallel with the
routing table lookup, though in practice the equality
checks can serve as a packet ﬁlter to prevent extrane-
ous lookups.
Proceedings of the 2004 IEEE Symposium on Security and Privacy (S&P’04)  