                  ++index;
                }
                while ( index = height || (unsigned __int8)cmd + xpos > width )
      goto LABEL_170;                       // CxxThrowException
    // 20CF501F AcroForm 2019.012.20036 中修复的基本块
    dst_xpos = (unsigned __int8)cmd + xpos;
    if ( ypos >= height || dst_xpos > width || 
         dst_xpos > 4;       // 高 4 位数据
            low_4bits = BYTE1(cmd) & 0xF;       // 低 4 位数据
            // 20CF45F8 变动的基本块之一
            if ( ypos >= height || (unsigned __int8)cmd + xpos > width )
              goto LABEL_170;                   // CxxThrowException
            index = 0;
            if ( (_BYTE)cmd )
            {
              xpos_ = odd_index_;
              do
              {
                byte_slot = xpos_ >> 1;
                odd_index = index & 1;
                line = fn_get_scanline(v1[3], ypos);
                _4bits = high_4bits;            // 偶数索引 -> 高 4 位数据
                if ( odd_index )                // 奇数索引 -> 低 4 位数据
                  _4bits = low_4bits;
                if ( xpos_ & 1 )                // xpos 为奇数, 存入已有字节
                {
                  line[byte_slot] |= _4bits;
                }
                else                            // xpos 为偶数, 存入新的字节
                {
                  line[byte_slot] = 16 * _4bits;
                }
                ++xpos_;
                index = index + 1;
              }
              while ( index = height || BYTE1(cmd) + xpos > width )
                goto LABEL_170;                 // CxxThrowException
              index = 0;
              odd_index = 0;
              if ( BYTE1(cmd) )                 // 未压缩数据
              {
                xpos_ = odd_index_;
                do
                {
                  odd_index_ = index & 1;
                  if ( !(index & 1) )           // 读取 1 字节数据
                  {
                    fn_read_bytes((_DWORD *)v1[2], &value, 1u);
                    low_4bits_ = value & 0xF;   // 低 4 位数据
                    high_4bits_ = value >> 4;   // 高 4 位数据
                  }
                  byte_slot = xpos_ >> 1;
                  line = fn_get_scanline(v1[3], ypos);
                  _4bits = high_4bits_;
                  if ( odd_index_ )
                    _4bits = low_4bits_;
                  if ( xpos_ & 1 )
                  {
                    line[byte_slot] |= _4bits;
                  }
                  else
                  {
                    line[byte_slot] = 16 * _4bits;
                  }
                  ++xpos_;
                  count = BYTE1(cmd);
                  not_ended = odd_index++ + 1 > 4;       // 高 4 位数据
    low_4bits = BYTE1(cmd) & 0xF;       // 低 4 位数据
    // 20CF45F8 变动的基本块之一
    if ( ypos >= height || (unsigned __int8)cmd + xpos > width )
      goto LABEL_170;                   // CxxThrowException
另一处位于处理未压缩数据的过程中：
    // 20CF44EA 变动的基本块之一
    if ( ypos >= height || BYTE1(cmd) + xpos > width )
      goto LABEL_170;                 // CxxThrowException
## 0x05. 漏洞利用
### 5.1 溢出目标
前面提到在解析 RLE 数据时发现了 3 个溢出点，这里选择其中相对容易写利用的溢出点来触发漏洞：位于 RLE8 数据解析过程中的一处整数溢出。
RLE4 数据解析过程中存在的两处溢出点很难实现稳定利用，因为在向扫描线填充像素数据时，偏移值为 `xpos` 的值除以 `2` ，此时偏移值最大可以是
`0xFFFFFFFF / 2 = 0x7FFFFFFF` ，也就意味着仅能向高地址方向实现堆块越界写，而且这个地址上具体是什么数据很难控制。
而 RLE8 数据解析过程中存在的溢出点就相对好控制一些，因为在向扫描线填充像素数据时，偏移值就是 `xpos`
本身，这样就可以向低地址方向实现堆块越界写，而且越界写的范围在一定程度上也是可控的。在下面的代码中，`(unsigned __int8)cmd`
的最大值可以是 `0xFF` ，为了绕过 `if` 语句中的条件检查，`xpos` 的最小值是 `0xFFFFFF01` （在有符号类型下表示为
`-255`）。这也就意味着最大可以向低地址方向越界写 `0xFF` 字节的数据。
    // 20CF440F 变动的基本块之一
    if ( ypos >= height || (unsigned __int8)cmd + xpos > width )
      goto LABEL_170;                       // CxxThrowException
但需要注意的是，用于越界写的数据必须是一样的，即只能是同一个字节。这会给漏洞利用带来一些额外的问题，后续会对此进行详细讨论。
    index = 0;
    do
    {
      line = (_BYTE *)fn_get_scanline(v1[3], ypos);
      line[xpos++] = BYTE1(cmd);
      ++index;
    }
    while ( index < (unsigned __int8)cmd );
### 5.2 SpiderMonkey 基础知识
Adobe Acrobat Reader DC 所使用的 JavaScript 引擎为
[SpiderMonkey](https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey) ，在编写利用代码之前，先简单介绍一下相关的基础知识。
#### 5.2.1 ARRAYBUFFER
对 [ArrayBuffer](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer) 而言，当 `byteLength`
的大小超过 `0x68` 时，其底层数据存储区（ **backing store** ）所在的堆块将通过系统堆申请（`ucrtbase!calloc`）；当
`byteLength` 的大小小于等于 `0x68` 时，堆块从 SpiderMonkey 的私有堆 **tenured heap** 申请。同时，当
**backing store** 独立申请堆块时，需要额外申请 `0x10` 字节的空间用于存储 `ObjectElements` 对象。
    class ObjectElements {
     public:
      uint32_t flags;               // 可以是任意值，通常为 0
      uint32_t initializedLength;   // byteLength
      uint32_t capacity;            // view 对象指针
      uint32_t length;              // 可以是任意值，通常为 0
     // ......
    };
对 `ArrayBuffer` 而言，这里 `ObjectElements` 的各个成员的名字是没有意义的（因为本来是为 `Array`
准备的），这里第二个成员 `initializedLength` 存储 `byteLength` 的值，第三个成员 `capacity` 存储关联的
[DataView](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView) 对象的指针，其他成员可以是任意值。
在 Adobe Acrobat Reader DC 中执行下面的 JavaScript 代码：
    var ab = new ArrayBuffer(0x70);
    var dv = new DataView(ab);
    dv.setUint32(0, 0x41424344, true);
`ArrayBuffer` 对象的 **backing store** 的内存布局如下：
    ;            -, byteLength, viewobj,       -,
    34d54f80  00000000 00000070 2458f608 00000000
    ;         data
    34d54f90  41424344 00000000 00000000 00000000
    34d54fa0  00000000 00000000 00000000 00000000
    34d54fb0  00000000 00000000 00000000 00000000
    34d54fc0  00000000 00000000 00000000 00000000
    34d54fd0  00000000 00000000 00000000 00000000
    34d54fe0  00000000 00000000 00000000 00000000