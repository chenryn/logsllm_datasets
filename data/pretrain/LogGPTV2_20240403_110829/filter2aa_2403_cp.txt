|L0.172| 
  DCB       "%f\n",0 
|L0.176| 
  DCB       "%c, %d\n",0 
指令清单 21.32  Optimizing GCC 4.9 (ARM64) 
f: 
  stp      x29, x30, [sp, -32]! 
  add      x29, sp, 0 
  ldr      w1, [x0] 
  str      x19, [sp,16] 
  cmp      w1, 1000 
  ble      .L2 
  ldr      w1, [x0,4] 
  cmp      w1, 10 
  bls      .L3 
  ldr      s1, [x0,8] 
  mov      x19, x0 
  ldr      s0, .LC1 
  adrp     x0, .LC0 
  ldr      d2, [x19,16] 
  add      x0, x0, :lo12:.LC0 
  fmul     s1, s1, s0 
  ldr d0, .LC2 
  fmul     d0, d2, d0 
  fcvt     d1, s1 
  fadd     d0, d1, d0 
  bl       printf 
  ldrb     w1, [x19,24] 
  adrp     x0, .LC3 
  ldrb     w2, [x19,25] 
  add      x0, x0, :lo12:.LC3 
  ldr      x19, [sp,16] 
  ldp      x29, x30, [sp], 32 
  b        printf 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 21 章  结  构  体 
343 
.L3: 
  ldr      x19, [sp,16] 
  adrp     x0, .LC4 
  ldp      x29, x30, [sp], 32 
  add      x0, x0, :lo12:.LC4 
  b        puts 
.L2: 
  ldr      x19, [sp,16] 
  adrp     x0, .LC5 
  ldp      x29, x30, [sp], 32 
  add      x0, x0, :lo12:.LC5 
  b        puts 
  .size    f, .-f 
.LC1: 
  .word    1138622464 
.LC2: 
  .word 0 
  .word    1079951360 
.LC0: 
  .string  "%f\n" 
.LC3: 
  .string  "%c, %d\n" 
.LC4:  
  .string  "error #2" 
.LC5: 
  .string  "error #1" 
指令清单 21.33  Optimizing GCC 4.4.5 (MIPS) (IDA) 
f: 
var_10  
= -0x10  
var_8   
=-8  
var_4   
=-4 
lui      
$gp, (__gnu_local_gp >> 16) 
addiu    
$sp, -0x20 
la       
$gp, (__gnu_local_gp & 0xFFFF) 
sw       
$ra, 0x20+var_4($sp) 
sw       
$s0, 0x20+var_8($sp) 
sw       
$gp, 0x20+var_10($sp) 
lw       
$v0, 0($a0) 
or       
$at, $zero 
slti     
$v0, 0x3E9 
bnez     
$v0, loc_C8 
move     
$s0, $a0 
lw       
$v0, 4($a0) 
or       
$at, $zero 
sltiu    
$v0, 0xB 
bnez     
$v0, loc_AC 
lui      
$v0, (dword_134 >> 16) 
lwc1     
$f4, $LC1 
lwc1     
$f2, 8($a0) 
lui      
$v0, ($LC2 >> 16) 
lwc1     
$f0, 0x14($a0) 
mul.s    
$f2, $f4, $f2 
lwc1     
$f4, dword_134 
lwc1     
$f1, 0x10($a0) 
lwc1     
$f5, $LC2 
cvt.d.s  
$f2, $f2 
mul.d    
$f0, $f4, $f0 
lw       
$t9, (printf & 0xFFFF)($gp) 
lui      
$a0, ($LC0 >> 16)  # "%f\n" 
add.d    
$f4, $f2, $f0 
mfc1     
$a2, $f5 
mfc1     
$a3, $f4 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
344 
逆向工程权威指南（上册） 
jalr     
$t9 
la       
$a0, ($LC0 & 0xFFFF)  # "%f\n" 
lw       
$gp, 0x20+var_10($sp) 
lbu      
$a2, 0x19($s0) 
lb       
$a1, 0x18($s0) 
lui      
$a0, ($LC3 >> 16)  # "%c, %d\n" 
lw       
$t9, (printf & 0xFFFF)($gp) 
lw       
$ra, 0x20+var_4($sp) 
lw       
$s0, 0x20+var_8($sp) 
la       
$a0, ($LC3 & 0xFFFF)  # "%c, %d\n" 
jr       
$t9 
addiu    
$sp, 0x20 
loc_AC:      
# CODE XREF: f+38 
lui      
$a0, ($LC4 >> 16)  # "error #2" 
lw       
$t9, (puts & 0xFFFF)($gp) 
lw       
$ra, 0x20+var_4($sp) 
lw       
$s0, 0x20+var_8($sp) 
la       
$a0, ($LC4 & 0xFFFF)  # "error #2" 
jr       
$t9 
addiu    
$sp, 0x20 
loc_C8:       
# CODE XREF: f+24 
lui      
$a0, ($LC5 >> 16)  # "error #1" 
lw       
$t9, (puts & 0xFFFF)($gp) 
lw       
$ra, 0x20+var_4($sp) 
lw       
$s0, 0x20+var_8($sp) 
la       
$a0, ($LC5 & 0xFFFF)  # "error #1" 
jr       
$t9 
addiu    
$sp, 0x20 
$LC0:  
.ascii "%f\n" 
$LC3:  
.ascii "%c, %d\n" 
$LC4:  
.ascii "error #2" 
$LC5:  
.ascii "error #1" 
.data # .rodata.cst4 
$LC1:  
.word 0x43DE0000 
.data # .rodata.cst8 
$LC2:  
.word 0x405EC000 
dword_134:  
.word 0 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第
第 2222 章
章    共
共用
用体
体（
（uunniioonn）
）类
类型
型  
22.1 伪随机数生成程序 
我们可以通过不同的方法生成一个介于 0～1 之间的随机浮点数。最简单的做法是：使用Mersenne 
twister（马特赛特旋转演算法）之类的PRNG
①
本例利用了线性同余随机数生成随机数的算法
生成 32 位DWORD值，把这个值转换为单精度float之后再除
以RAND_MAX（本例中是 0xFFFFFFFF）。这样就可以得到介于 0～1 之间的单精度浮点数。 
但是除法的运算速度非常慢。而且从效率的角度考虑，随机函数同样应当尽量少用 FPU 的操作指令。
那么，我们是否可以彻底脱离除法运算实现随机函数呢？ 
单精度浮点数（float）型数据由符号位、有效数字和指数三部分构成。这种数据结构决定，只要随机
填充有效数字位就可以生成随机的单精度数！ 
依据有关规范，随机浮点数的指数部分不可以是 0。那么我们不妨把指数部分直接设置为 01111111（即
十进制的 1），用随机数字填充有效数字部分，再把符号位设置为零（表示正数）。瞧！像模像样！这就可
以生成一个介于 1～2 之间的随机数。再把它减去 1 就可以得到一个标准的随机函数。 
②
① Pseudorandom number generator，伪随机数生成函数。 
② 参考了网络文章 http://xor0110.wordpress.com/2010/09/24/how-to-generate-floating-point-random-numbers-efficiently。 
。它使用UNIX格式的系统时间作为PRNG的随机种子，
继而生成 32 位数字。 
在采用这种算法时，我们可采用共用体类型（union）的数据表示单精度浮点数（float）。这个方法可利用 C/C++
的数据结构，按照一种与读取方式不同的数据类型存储浮点数据的各个组成部分。本例中，我们创建一个 union
型变量，然后把它当作 float 型或 uint32_t 型数据进行读取。换句话说，这是一种 hack，而且还是比较深度的 hack。 
第 20 章的例子介绍过整数型 PRNG 的有关程序。因而本节不再复述其数据格式。 
include  
#include  
#include  
// integer PRNG definitions, data and routines: 
//constants from the Numerical Recipes book 
const uint32_t RNG_a=1664525; 
const uint32_t RNG_c=1013904223; 
uint32_t RNG_state; // global variable 
void my_srand(uint32_t i) 
{ 
         RNG_state=i; 
}; 
uint32_t my_rand() 
{ 
         RNG_state=RNG_state*RNG_a+RNG_c; 
         return RNG_state; 
}; 
// FPU PRNG definitions and routines: 
union uint32_t_float 
{ 
         uint32_t i; 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
346 
逆向工程权威指南（上册） 
         float f;  
}; 
float float_rand() 
{ 
         union uint32_t_float tmp; 
         tmp.i=my_rand() & 0x007fffff | 0x3F800000; 
         return tmp.f-1; 
}; 
// test 
int main()  
{ 
         my_srand(time(NULL)); // PRNG initialization 
         for (int i=0; i<100; i++) 
                  printf ("%f\n", float_rand()); 
         return 0; 
}; 
22.1.1 x86 
使用 MSVC 2010（启用选项/Ox）编译上述程序，可得到如下所示的代码。 
指令清单 22.1  Optimizing MSVC 2010 
$SG4232  DB     '%f', 0aH, 00H 
__real@3ff0000000000000 DQ 03ff0000000000000r ;1 
tv140 = -4                 
_tmp$ = -4                 
?float_rand@@YAMXZ PROC 
         push  
ecx 
         call     ?my_rand@@YAIXZ 
; EAX=pseudorandom value 
         and      eax, 8388607        ; 007fffffH 
         or       eax, 1065353216     ; 3f800000H 
; EAX=pseudorandom value & 0x007fffff | 0x3f800000 
; store it into local stack: 
         mov      DWORD PTR _tmp$[esp+4], eax 
; reload it as float point number: 
         fld      DWORD PTR _tmp$[esp+4] 
; subtract 1.0: 
         fsub     QWORD PTR __real@3ff0000000000000 
; store value we got into local stack and reload it: 
         fstp     DWORD PTR tv130[esp+4] ; \  these instructions are redundant 
         fld      DWORD PTR tv130[esp+4] ; / 
         pop      ecx 
         ret      0 
?float_rand@@YAMXZ ENDP 
_main   PROC 
         push     esi 
         xor      eax, eax 
         call     _time 
         push     eax 
         call     ?my_srand@@YAXI@Z 
         add      esp, 4 
         mov      esi, 100 
$LL3@main: 
         call     ?float_rand@@YAMXZ 