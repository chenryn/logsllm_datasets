Subtract (different-signs addition) 457
34-digit, unaligned, rounded, borrow
Compare 187 1125
34-digit, unaligned, mismatch at end
CompareTotal 238 778
34-digit, unaligned, mismatch at end
Divide 2018 3172
34- by 34-digit (rounded)
FMA (fused multiply-add) 1622 2707
34-digit, subtraction, rounded
LogB (returns a decQuad) 58 299
Negative result
MaxNum/MinNum 241 857
34-digit, unaligned, mismatch at end
Multiply 821 2235
34×34-digit, round needed
Quantize 209 670
34-digit, round all-nines
ScaleB (from decQuads) 263 553
Underflow
To integral value 233 886
34-digit, round all-nines
Notes
The following notes apply to all the tables in this appendix.
1. All timings were made on an IBM X41T Tablet PC (Pentium M, 1.5GHz, 1.5GB RAM) under
Windows XP Tablet Edition with SP2; the modules were compiled using GCC version 3.4.4
with optimization settings -O3 -march=i686.
2. The default tuning parameters were used (DECUSE64=1, DECDPUN=3, etc.); some of these
only affect decNumber.
3. Timings include call/return overhead, and for the decNumber module also include the costs of
converting operand(s) to decNumbers and results back to the appropriate format using the
decimal64 or decimal128 module.
4. “BCD” for decNumber is Packed BCD, using the decPacked module; for decFloats it is 8-bit
BCD.
5. The worst case for each operation is not always obvious from the code and is implementation-
dependent (for example, in the decFloats modules, an unaligned add is sometimes faster than an
aligned add). It is possible that there may be unusual cases which are slower than the decFloats
Version 3.68 Appendix A – Library performance 77
counts listed above, although a wide variety of micro-benchmarks have been tried.
6. A string-to-number conversion can theoretically have an arbitrarily large worst case as the string
could contain any number of leading, trailing, or embedded zeros; the timings above measured
cases where the input string’s coefficient had up to eight more digits than the precision of the
destination format.
78 Appendix A – Library performance Version 3.68
Appendix B – Changes
This appendix documents changes since the first (internal) release of this document (Draft 1.50, 21
Feb 2001).
Changes in Draft 1.60 (9 July 2001)
• The significand of a number has been renamed from integer to coefficient, to remove possible
ambiguities.
• The decNumberRescale function has been redefined to match the base specification. In
particular its rhs now specifies the new exponent directly, rather than as a negated exponent.
• In general, all functions now return a reference to their primary result structure.
• The decPackedToNumber function now handles only “classic” Packed Decimal format (there
must be a sign nibble, which must be the final nibble of the packed bytes). This improved
conversion speed by a factor of two.
• Minor clarifications and editorial changes have been made.
Changes in Draft 1.65 (25 September 2001)
• The rounding modes DEC_ROUND_CEILING and DEC_ROUND_FLOOR have been added.
• Minor clarifications and editorial changes have been made.
Changes in Version 2.00 (4 December 2001)
This is the first public release of this document.
• The decDoubleToSingle function will now round the value of the decDouble number if it has
more than 15 digits.
• The decNumberToInteger, decNumberRemainderNear, and decNumberVersion functions
have been added.
• Relatively minor changes have been made throughout to reflect support for the extended
specification.
Changes in Version 2.11 (25 March 2002)
• The header files have been reorganized in order to move private type names (such as Int and
Flag) out of the external interface header files. In the external interface, integer types now use
Version 3.68 Appendix B – Changes 79
the stdint.h names from C99.
• All but one of the compile-time parameters have been moved to the “internal”
decNumberLocal.h header file, and so are described in a new section (see page 69).
• The decNumberAbs, decNumberMax, and decNumberMin functions have been added.
• Minor clarifications and editorial changes have been made.
Changes in Version 2.12 (23 April 2002)
• The decNumberTrim function has been added.
• The decNumberRescale function has been updated to match changed specifications; it now
sets the exponent as requested even for zero values.
• Minor clarifications and editorial changes have been made.
Changes in Version 2.15 (5 July 2002)
The package has been updated to reflect the changes included in the combined arithmetic
specification. These preserve more digits of the coefficient together with extended zero values if
extended in the context is 1. Notably:
• The decNumberDivide and decNumberPower functions do not remove trailing zeros after the
operation. (The decNumberTrim function can be used to effect this, if required.)
• A non-zero exponent on a zero value is now possible and is preserved in a manner consistent
with other numbers (that is, zero is no longer a special case).
• The decPackedToNumber function has been enhanced to allow zeros with non-zero exponents
to be converted without loss of information.
Changes in Version 2.17 (1 September 2002)
• The decNumberFromString, decSingleFromString, and decDoubleFromString functions
will now round the coefficient of a number to fit, if necessary. They also now accept subnormal
values and preserve the exponent of a 0. If an overflow or underflow occurs, the
DEC_Overflow or DEC_Underflow conditions are raised, respectively.
• The package has been corrected to ensure that subnormal values are no more precise than
permitted by IEEE 854.
• The underflow condition is now raised according to the IEEE 854 untrapped underflow criteria
(instead of according to the IEEE 854 trapped criteria). That is, underflow is now only raised
when a result is both subnormal and inexact.
• The DEC_Subnormal condition has been added so that subnormal results can be detected even
if no Underflow condition is raised.
• Minor clarifications and editorial changes have been made.
80 Appendix B – Changes Version 3.68
Changes in Version 2.28 (1 November 2002)
• The decNumberNormalize function has been added, as an operator. This makes the coefficient
of a number as short as possible while maintaining its numerical value.
• The decNumberSquareRoot function has been added. This returns the exact square root of a
number, rounded to the specified precision and normalized.
• When the extended setting is 1, long operands are used without input rounding, to give a
correctly rounded result (without double rounding). The DEC_Lost_digits flag can therefore
only be set when extended is 0.
• Minor editorial changes have been made.
Changes in Version 3.04 (22 February 2003)
The major change in decNumber version 3 is the replacement of the decSingle and decDouble formats
by the three new formats decimal32, decimal64, and decimal128. These formats are now [June 2008]
included in the IEEE-SA 754 standard.
Related and other enhancements include:
• The exponent minimum field, emin, has been added to the decContext structure. This allows the
unbalanced exponents used in the new formats.
• The exponent clamping flag, clamp, has been added to the decContext structure. This provides
explicit exponent clamping as used in the new formats.
• A new condition flag, DEC_Clamped has been introduced. This reports any situation where the
exponent of a finite result has been limited to fit in the available exponent range.
• The header file bcd2dpd.h has been renamed decDPD.h to better describe its function.
• The DECSUBSET tuning parameter has been added. This controls the inclusion of the code and
flags required for subset arithmetic; when set to 0, the performance of many operations is
improved by 10%–20%.
• Double rounding which was possible with certain subnormal results has been eliminated.
• Minor editorial changes have been made.
Changes in Version 3.09 (23 July 2003)
This version implements some minor changes which track changes agreed by the IEEE 754 revision
committee.
• The decNumberQuantize function has been added. Its function is identical to
decNumberRescale except that the second argument specifies the target exponent “by
example” rather than by value.
• The decNumberQuantize and decNumberRescale functions now report
DEC_Invalid_operation rather than DEC_Overflow if the result cannot fit.
• The decNumberToInteger function has been replaced by the decNumberToIntegralValue
function. This implements the new rules for round-to-integral-value agreed by IEEE 754r.
Notably:
Version 3.68 Appendix B – Changes 81
◦ the exponent is only set to zero if the operand had a negative exponent
◦ the Inexact flag is not set.
• The decNumberSquareRoot function no longer normalizes. Its preferred exponent is
floor(operand.exponent/2).
Changes in Version 3.12 (1 September 2003)
This version adds a new function and slightly reorganizes the decimalnn modules.
• The decNumberSameQuantum function has been added. This tests whether two numbers have
the same exponents.
• The decimal128.h, decimal64.h, and decimal32.h header files now check that (if more
than one is included) they are included in order of reducing size. This makes it harder to use a
decNumber structure which is too small.
• . The shared DPD pack/unpack routines have been moved from
decimal32.c to decimal64.c, because the latter is more likely to be used alone.
Changes in Version 3.16 (2 October 2003)
• NaN values may now use the coefficient to convey diagnostic information, and NaN sign
information is propagated along with that information.
• The decNumberQuantize function now allows both arguments to be infinite, and treats NaNs
in the same way as other functions.
Changes in Version 3.19 (21 November 2003)
• The decNumberIsInfinite, decNumberIsNaN, decNumberIsNegative, and decNumberIsZero
functions have been added to simplify tests on numbers. These functions are currently
implemented as macros.
Changes in Version 3.24 (25 August 2004)
• The decNumberMax and decNumberMin functions have been altered to conform to the
maxnum and minnum functions in IEEE 754. That is, a total ordering is provided for numerical
comparisons, and if one operand is a quiet NaN but the other is a number then the number is
returned.
• The decimal64FromString function (and the same function for the other two formats) now uses
the rounding mode provided in the context structure.
Changes in Version 3.25 (15 June 2005)
• Arguments to functions which are “input only” are now decorated with the const keyword to
make the functions easier and safer to call from a C++ wrapper class.
• The performance of arithmetic when DECDPUN<=3 has been improved substantially;
DECDPUN==3 performance is now similar to DECDPUN==4.
82 Appendix B – Changes Version 3.68
• An error in the decNumberRescale and decNumberQuantize functions has been corrected. This
returned 1.000 instead of NaN for quantize(0.9998, 0.001) under a context with precision=3.
Changes in Version 3.32 (12 December 2005)
• The decNumberExp function has been added. This returns e raised to the power of the
operand.
• The decNumberLn and decNumberLog10 functions have been added. These return the
natural logarithm (logarithm in base e) or the logarithm in the base ten of the operand,
respectively.
• The decNumberPower function has been enhanced by removing restrictions; notably it now
allows raising numbers to non-integer powers.
• The DECENDIAN tuning parameter has been added. This allows the compressed decimal
formats (see page 48) to be stored using platform-dependent ordering for better performance
and compatibility with binary formats. This parameter can be set to 0 to get the same (big-
endian) ordering on all platforms, as in earlier versions of the decNumber package.
• The DECUSE64 tuning parameter (see page 70) has been added. This allows 64-bit integers to
be used to improve the performance of operations when DECDPUN<=4. This parameter can be
set to 0 to ensure only 32-bit integers are used when DECDPUN<=4.
• The compressed decimal formats are widely used with the decNumber package, so the initial
setting of DECDPUN has been changed to 3 (from 4), and DECENDIAN and DECUSE64 are both
set to 1 (to use platform ordering and 64-bit arithmetic). These settings significantly improve
the speed of conversions to and from the compressed formats and the speed of multiplications
and other operations.
• Minor clarifications and editorial changes have been made.
Changes in Version 3.37 (22 November 2006)
• The decNumberCompareTotal (total ordering comparison), decNumberIsQNaN, and
decNumberIsSNaN functions have been added.
Changes in Version 3.40 (18 April 2007)
This is a major upgrade to decNumber to add logical and shifting functions together with
generalizations of most of the new functions required by the IEEE 754 standard.
The changes included in this update are:
• Thirty-four new functions have been added to the decNumber module (all names have the prefix
decNumber): And, CompareSignal, CompareTotalMag, CopyAbs, CopyNegate, CopySign,
Class, ClassToString, FMA, FromInt, FromUInt, GetBCD, Invert, IsCanonical, IsFinite,
IsNormal, IsSpecial, IsSubnormal, LogB, MaxMag, MinMag, NextMinus, NextPlus,
NextToward, Or, Radix, Rotate, ScaleB, SetBCD, Shift, ToIntegralExact, ToInt32, ToUInt32,
Xor.
• Two new functions have been added to each of the three decimalNN modules:
decimalNNIsCanonical, decimalNNCanonical.
Version 3.68 Appendix B – Changes 83
• The DECENDIAN setting (in decNumberLocal.h) has been removed to improve performance;
instead, you must set the DECLITEND parameter (see page 70) to 1 if compiling for a little-
endian target, or to 0 if compiling for a big-endian target. If DECCHECK is set to 1 (highly
recommended while testing), any call to decContextDefault will check that DECLITEND is set
correctly.
• The DECEXTFLAG parameter (see page 70) has been added (in decContext.h). This controls
whether the status flags returned by decNumber are restricted to the five IEEE flags or comprise
an extended set which gives more detail about invalid operations along with some extra flags
(this does not affect performance). The default is the extended set of flags, as in earlier versions
of decNumber.
Changes in Version 3.41 (7 May 2007)
• Minor corrections (notably to the descriptions of the FromString functions) and clarifications
have been made.
Changes in Version 3.50 (4 June 2007)
This is a major upgrade to decNumber which adds three new modules (decSingle, decDouble, and
decQuad) with 175 new functions. These modules provide functions which work directly with the
decimal32, decimal64, and decimal128 formats, to provide high performance when arbitrary-precision
calculations are not needed.
In addition to the new modules, the changes included in this update are:
• Two new examples have been added to the User’s Guide, showing how to use the new modules
either stand-alone or in conjunction with the decNumber module.
• Eleven new functions have been added to the decContext module to match those required by the
IEEE 754 standard.
• Synonyms for DEC_INIT_DECIMAL32, etc., have been provided to match the names of the new
modules, called DEC_INIT_DECSINGLE, etc.
• The decClasses enumeration and strings have been moved from decNumber.h to
decContext.h so that they can be used from all modules.
• The DECVERSION constant has been moved from decNumber.h to decNumberLocal.h so
that it can be used from all modules.
• The decNumberNormalize function has been renamed decNumberReduce for clarity (it is still
available in the code and header file under the old name, for compatibility).
• A new appendix comparing the performance of the decNumber module to the new decDouble
and decQuad modules has been added.
• Numerous clarifications and editorial changes have been made.
Changes in Version 3.53 (7 September 2007)
This release of decNumber is a code maintenance release; the problems corrected are:
• decNumberRemainder: the sign of a zero result was occasionally different from that specified
84 Appendix B – Changes Version 3.68
by IEEE 854
• decNumberSquareRoot: several problems related to subnormal results that were not covered by
Hull’s algorithm and also when the input argument was wider than the requested result width
• decNumber and decFloats: under the DEC_ROUND_05UP rounding mode Infinity was being
returned after overflow instead of the number with the greatest possible magnitude
• decQuadDivide: divisions where both operands had more than 27 digits and the result was
extremely close to one (all but the last few digits the same) could return a value slightly larger
than one instead of just less than one; this also affected the decQuadDivideInteger and
remainder functions (but not decDouble or decNumber divisions or remainder)
• decDoubleFromString and decQuadFromString: the restriction that the input string should not
be followed by unaddressable memory has been removed
• numerous code changes have been made to avoid new warnings in recent releases of GCC.
New testcases have been added for all the above cases.
Changes in Version 3.56 (12 October 2007)
This release of decNumber is a code maintenance release primarily to widen the applicability of the
package. The changes are:
• The modules now conform to the C99 strict aliasing rules (that is, no longer cast char *
pointers to int *, etc., because such casts are forbidden in C99).
• As a consequence of the previous change, the decDouble (etc.) structures have been changed
to unions, allowing access through wider integer types as well as by bytes.