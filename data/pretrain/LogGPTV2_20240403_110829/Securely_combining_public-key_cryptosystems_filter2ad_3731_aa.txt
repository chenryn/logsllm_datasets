title:Securely combining public-key cryptosystems
author:Stuart Haber and
Benny Pinkas
Securely Combining Public-Key Cryptosystems
Stuart Haber
STAR Lab, Intertrust Tech.
821 Alexander Road
Princeton, NJ 08540
Benny Pinkas
STAR Lab, Intertrust Tech.
821 Alexander Road
Princeton, NJ 08540
PI:EMAIL
PI:EMAIL
ABSTRACT
It is a maxim of sound computer-security practice that a
cryptographic key should have only a single use. For ex-
ample, an RSA key pair should be used only for public-key
encryption or only for digital signatures, and not for both.
In this paper we show that in many cases, the simulta-
neous use of related keys for two cryptosystems, e.g. for a
public-key encryption system and for a public-key signature
system, does not compromise their security. We demon-
strate this for a variety of public-key encryption schemes
that are secure against chosen-ciphertext attacks, and for a
variety of digital signature schemes that are secure against
forgery under chosen-message attacks. The precise form of
the statement of security that we are able to prove depends
on the particular cryptographic schemes in question and on
the cryptographic assumptions needed for their proofs of
security; but in every case, our proof of security does not
require any additional cryptographic assumptions.
Among the cryptosystems that we analyze in this man-
ner are the public-key encryption schemes of Cramer and
Shoup, Naor and Yung, and Dolev, Dwork, and Naor, which
are all deﬁned in the standard model, while in the random-
oracle model we analyze plaintext-aware encryption schemes
(as deﬁned by Bellare and Rogaway) and in particular the
OAEP+ cryptosystem. Among public-key signature schemes,
we analyze those of Cramer and Shoup and of Gennaro,
Halevi, and Rabin in the standard model, while in the random-
oracle model we analyze the RSA PSS scheme as well as vari-
ants of the El Gamal and Schnorr schemes. (See references
within.)
1.
INTRODUCTION
It is conventional wisdom that keys used by diﬀerent cryp-
tosystems must be independent. This principle was only en-
couraged by the recognition that the textbook versions of
the early public-key cryptosystems based on number-theory
problems had the property that we now call malleability, re-
lated to their random self-reducibility (as ﬁrst pointed out
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for profit or commercial advantage and that copies
bear this notice and the full citation on the first page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior specific
permission and/or a fee.
CCS’01, November 5-8, 2001, Philadelphia, Pennsylvania, USA.
Copyright 2001 ACM 1-58113-385-5/01/0011 ...$5.00.
for RSA by [9]). From the very beginning, researchers advo-
cated adding redundancy to messages (as Rabin did in one
of the founding papers of our ﬁeld [19]), but a sophisticated
understanding of methods to do this, whose security we can
properly analyze, is much newer.
Most proofs of security of a cryptographic scheme assume
that it uses randomly chosen keys that are not used by any
other application; these proofs say nothing about the com-
bined use of two schemes that are secure when used in iso-
lation. In other words, although two cryptosystems C and
C(cid:1)
might have been proven to be secure by themselves, the
availability of cryptosystem C might reduce the security of
cryptosystem C(cid:1)
if their respective keys are related.
Encryption schemes and signature schemes are commonly
used in combination, most often with each of them using in-
dependent keys. We study the use of encryption and signa-
ture schemes whose keys are not independent of each other.
As we demonstrate below, it turns out that, in many cases,
a signature scheme can be securely used in combination with
an encryption scheme with which it shares a key.
The need to do this occurs in practice. For example, a
large system may be carefully designed so that all crypto-
graphic operations between parties are performed using pub-
lic keys for a digital signature algorithm (and any encryption
is performed using authenticated session keys generated, say,
by using a Diﬃe-Helman key exchange). If a new function
is demanded of the system that entails the use of public-key
encryption, it would be desirable to add this capability to
the system without substantially increasing the attendant
overhead of managing new keys and certiﬁcates. The rele-
vant engineering considerations can range from the hardware
constraints of small devices to the size of key-management
databases (e.g., of revocation lists). Perhaps the most im-
portant motivation in practice may be the desire to minimize
the number of parts of the existing system where changes
must be made in order to add the new encryption function-
ality, since the trouble entailed by each additional change
may be very high.
Our motivation in addressing the security of cryptosys-
tems with related keys is theoretical as well as practical. It
is worthwhile to investigate the validity of the assertions of
engineering folklore, such as the advice always to use in-
dependent keys in diﬀerent cryptosystems. More generally,
one shouldn’t just study systems in isolation but rather in
the context of their actual use, as part of and in conjunction
with other systems.
We emphasize that the designer of a system must be very
careful in using two cryptosystems with related keys. The
215preferred choice should always be to have each cryptosys-
tem use independent keys. Related keys should only be
used when there is a proof, rather than just a heuristic argu-
ment, that the combination is secure. Furthermore, crypto-
graphic security is usually not the only relevant considera-
tion. There are many situations in which the wider context
of their use dictates diﬀerent requirements for public-key en-
cryption algorithms and digital-signature algorithms in the
same system. Even when it makes sense to use the same
algorithmic primitive—RSA, say—both for encryption and
for signatures, the keys may have diﬀerent lifetimes in the
two cases, they may have diﬀerent storage and protection re-
quirements, and they may be subject to diﬀerent revocation
policies and diﬀerent access rights. For example, if the digi-
tal signatures should have the property of non-repudiation,
then every signing key should be discarded after its lifetime
has ended; but decryption keys are often archived for the
purposes of later data recovery.
In this study we address
only the question of cryptographic security.
To stress the danger of using related keys, we note that in
the realm of symmetric-key cryptography researchers have
developed cryptanalytic attacks (starting with Biham’s re-
sult in [4]) against the use of several instances of the same
encryption scheme with related keys.
While we have been able to prove that, for a number of
diﬀerent algorithm choices, public-key cryptosystems with
related keys may be used securely in combination, we have
not obtained a general characterization of when this is pos-
sible. This is the subject of on-going study.
1.1 Our approach
The usual method of proving the security of a cryptosys-
tem involves the description of an adversary with precisely
speciﬁed powers, which is given a precise challenge. For
example, in the case of an encryption scheme, one sort of
adversary is allowed to query a decryption oracle with ci-
phertexts of its choice, and is then given the challenge of dis-
tinguishing between encryptions of two diﬀerent messages.
A typical proof of security shows that the existence of a suc-
cessful adversary with a certain bound on its computational
resources (run-time, number of queries, and so on) contra-
dicts a “cryptographic assumption” about the infeasibility
of a speciﬁc computational problem.
We are studying the combined use of a pair of public-key
cryptosystems C and C(cid:1)
. In general, each of these may either
be a public-key signature scheme or a public-key encryption
scheme. Now suppose that each of C and C(cid:1)
has a proof of
security—with a deﬁnite class of adversaries, under a deﬁ-
nite cryptographic assumption—when it is used in isolation.
We would like to reason about the combined use of the two
systems where their respective keys are not independent.
Our general approach is to consider an adversary A for
cryptosystem C (the attacked cryptosystem), which we en-
dow with the ability to query an oracle for cryptosystem C(cid:1)
(the oracle cryptosystem). If cryptosystem C(cid:1)
is an encryp-
tion scheme we give the adversary access to a decryption
oracle, and if it is a signature scheme we give it access to a
signature-generation oracle. The adversary A can ask this
oracle any legitimate query, including queries based on its
interaction with cryptosystem C.
The desired result is that in this scenario A has no greater
probability of success in attacking system C than it would
if it did not have access to the oracle for system C(cid:1)
. We
The two schemes C and C(cid:1)
prove this property by constructing a simulator that does
not have the private keys of system C, and is able nonethe-
less to answer the adversary’s queries to the C(cid:1)
-oracle in a
manner that is indistinguishable from that of an oracle that
does have full knowledge of the private keys of system C(cid:1)
.
Given such a simulator, the hypothesized security proof
for system C therefore holds as well in the situation where
users combine system C with system C(cid:1)
. If this were not the
case, an adversary that could break the combined system
could be converted into an adversary that breaks C alone.
may be completely indepen-
dent, using independently chosen key pairs, but we are par-
ticularly interested in the case where they are not indepen-
dent: for example, when C is a signature scheme and C(cid:1)
is
an encryption scheme, both of them based on the discrete
log or the Diﬃe-Hellman problem, and a typical combined
use of them involves the choice of a pair of the form (x, gx)
where the exponent x is part of the user’s private key and the
group element gx is part of the public key of both schemes.
The precise relation between the keys in C and the keys in
depends, of course, on the particular schemes C and C(cid:1)
C(cid:1)
.
If C and C(cid:1)
are indeed completely independent then it is
easy to see that the combined use of the two schemes to-
If an adversary A can attack C when it
gether is secure.
, then A has exactly the
is given oracle access to system C(cid:1)
same probability of success in attacking C when it interacts
instead with a simulator that chooses a C(cid:1)
-instance at ran-
dom, independently of the C-instance under attack. The
simulator is able to answer all queries from A because it has
chosen the private key(s) of the particular C(cid:1)
-instance.
The situation is more complex when the two systems have
related keys: a priori there is no reason for complete knowl-
edge of the keys of cryptosystem C(cid:1)
to be available to a
simulator, since these keys are not independent of the keys
of cryptosystem C, which must be kept secret from it. It is
therefore unclear whether one could simulate the answers of
a system-C(cid:1)
oracle to legitimate queries from the adversary.
It is perhaps surprising that in many cases we can simulate
the answers of C(cid:1)
. In some cases this is possible even though
is identical to that of C, and therefore
the private key of C(cid:1)
the simulator has no information about it. In other cases
the simulator has partial knowledge of the private key of C(cid:1)
,
but no information about certain parts of this key.
and C with the
roles reversed—with C(cid:1)
as the attacked cryptosystem, this
time, and C as the oracle cryptosystem—then one may use
C and C(cid:1)
in combination without compromising the security
of either system due to the presence of the other one.
1.2 Results
If we can prove a similar result about C(cid:1)
Most of this work explores scenarios where the cryptosys-
tems are either encryption schemes or signature schemes.
In the case where the oracle cryptosystem is an encryption
scheme, we provide results for the following schemes:
• In the standard model: the Cramer-Shoup [7] and the
Dolev-Dwork-Naor [10] encryption schemes, which are
secure against adaptive chosen-ciphertext attacks; and
the Naor-Yung scheme [17], which is secure against
non-adaptive chosen-ciphertext attacks.
• In the random-oracle model: a proof for the OAEP+ [23]
encryption scheme, which is an example of a plaintext-
216aware cryptosystem ([2]), and a sketch of a proof for
the use of plaintext-aware cryptosystems in general.
scheme, we provide results for the following schemes:
In the case where the oracle cryptosystem is a signature
• In the standard model: the Cramer-Shoup [8] and the
Gennaro-Halevi-Rabin [14] signature schemes, whose
security is based on the strong RSA assumption (the
scheme of [14] also relying on an assumption about the
properties of a hash function).
• In the random-oracle model: El Gamal signatures, if
they use a hash function H which is modeled as a ran-
dom oracle, as suggested in [18]; RSA based signatures
according to the PSS construction of [3]; and Schnorr’s
signature scheme [21].
Remark 1: For each oracle cryptosystem we must deﬁne
the relation that holds between its private keys and those of
the attacked cryptosystem. In all the systems we explore, we
make the natural assumption that some part of the private
key of the oracle system is part of the private key of the at-
tacked cryptosystem, and is therefore completely unknown
to the simulator. If the private key contains additional infor-
mation, we assume it to have the same distribution as it has
when the oracle system is used in isolation. In many cases—
namely, all the results we provide for cryptosystems whose
security is proved in the random-oracle model—our results
hold even if the simulator has no information whatsoever
about the private key of the oracle cryptosystem.
Remark 2: The attacked cryptosystem is not required
to have any speciﬁc type of security (e.g. chosen-ciphertext
security, existential forgery, etc.). We only need to provide
a proof that depends on the properties of the oracle sys-
tem, and this proof ensures that the security of the attacked