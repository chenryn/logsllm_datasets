# 2.4.1.2 Numerical Data Types

## Page 82
**WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020**

### Accessing Strings and Floating-Point Numbers
According to the PHP documentation, the structure for floating-point literals is as follows:

## Page 83
**floating point**
- **LNUM**: `[0-9]+`
- **DNUM**: `([0-9]*[\.]{LNUM}) | ({LNUM}[\.][0-9]*)`
- **EXPONENT_DNUM**: `[+-]?(({LNUM} | {DNUM}) [eE][+-]? {LNUM})`

**WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020**

### Exotic Number Generation
Here are some examples of 'exotic' number generation in PHP:

```php
$x = 'Giuseppe';
echo $x[FALSE];                   // FALSE is 0                 > 'G'
echo $x[TRUE];                    // TRUE is 1                  > 'i'
echo $x[count('hello')+true];     // count(object) is 1         > 'u'
echo $x["7rail"+"3er"-TRUE^0xA];  // PHP ignores trailing data  > 's'
```

## Page 84
**WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020**

### Type Casting in Exotic Number Generation
PHP provides type casting functionalities that can be used for more complex number generation:

```php
$x = 'Giuseppe';
echo $x[(int)"a common string"];    // 0                                   > 'G'
echo $x[(int)!0];                   // True (1)                            > 'i'
echo $x[(int)"2+1"];                // 2                                   > 'u'
echo $x[(float)"3.11"];             // 3                                   > 's'
echo $x[boolval(['.'])+(float)(int)array(0)+floatval('2.1+1.2=3.3')]; 
// True(1)+1+2.1 = 4.2 (float)         > 'e'
```

For more information on type juggling in PHP, refer to:
[PHP Manual: Type Juggling](http://www.php.net/manual/en/language.types.type-juggling.php#language.types.typecasting)

## 2.4.1.3 String Data Types

## Page 86
**WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020**

### String Literals in PHP
In PHP, there are four ways to specify a string literal:
- Single-quoted
- Double-quoted
- Heredoc syntax
- Nowdoc syntax (since PHP 5.3.0)

## Page 87
**WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020**

### Single and Double Quoted Strings
When working with strings, it is common to use single (`'`) and double (`"`) quoted delimiters. The main difference is that variables and escape sequences are not expanded in single-quoted strings, but they are in double-quoted strings.

```php
$expand = 'expand, nay they do';
echo 'Variables do not $expand, \n\t also escapes except \' and \ at the end of the string \\'; // Variables do not $expand, \n\t also escapes except ' and \ at the end of the string \
echo "Variables do not $expand, \n\t also escapes"; // Variables do not expand, nay they do,
```

## Page 88
**WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020**

### Escape Sequences in PHP
The following table lists the escape sequences provided by PHP for special characters. Note that octal and hexadecimal notations can also be used to represent characters.

## Page 89
**WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020**

### Escape Sequences
| SEQUENCE | MEANING |
|----------|---------|
| `\n`     | Linefeed (LF or 0x0A (10) in ASCII) |
| `\r`     | Carriage return (CR or 0x0D (13) in ASCII) |
| `\t`     | Horizontal tab (HT or 0x09 (9) in ASCII) |
| `\v`     | Vertical tab (VT or 0x0B (11) in ASCII) (since PHP 5.2.5) |
| `\f`     | Form feed (FF or 0x0C (12) in ASCII) (since PHP 5.2.5) |
| `\\`     | Backslash |
| `\$`     | Dollar sign |
| `\"`     | Double-quote |
| `\[0-7]{1,3}` | Character in octal notation |
| `\x[0-9A-Fa-f]{1,2}` | Character in hexadecimal notation |

```php
echo "I\x20L\x6fve\40B\145\63r"; // I Love Be3r
```

## Page 91
**WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020**

### Variable Parsing in Strings
In double-quoted strings and Heredoc, the parser tries to form valid variable names using the dollar sign (`$`). You can also enclose the variable name in curly braces to explicitly specify the end of the name.

```php
$s = "\x20";  // Space character
echo "I$sLove Beer";     // There's no $sLove variable     > I Beer 
echo "I{$s}Love Beer";   //                               > I Love Beer 
echo "I${s}Love Beer";   //                               > I Love Beer 
echo "I{${s}}Love Beer"; //                               > I Love Beer 
```

## Page 92
**WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020**

### Advanced Variable Parsing
Arrays, object methods, and class functions with numerical obfuscation are also allowed.

```php
$s = "\x20";  // Space character
$sp = " ";  // Another space character
echo "I{$s[0]}Love{$sp[0]}Beer";                     //> I Love Beer
echo "I{$s[(int)"I love Beer"]}Love{$sp[!true]}Beer";//> I Love Beer
echo ILoveBeer./**/.NULL;                            //> ILoveBeer
echo ILoveBeer.FALSE;                                //> ILoveBeer
echo "I{$s[eval($_GET['s'])]}Love Beer";             // Simple shell!> [SHELL-result]I Love Beer
```

## Page 94
**WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020**

### Heredoc and Nowdoc
PHP offers two additional alternatives for delimiting strings: Heredoc and Nowdoc. These are often preferred by command-line programmers. Heredoc is used for double-quoted strings, while Nowdoc is used for single-quoted strings.

```php
$expand = 'expand, nay they do';
$nd = <<<'NOW'
Variables do not $expand, \n\t also escapes.
This is the Nowdoc syntax. 
Notice the single quotes used to enclose the identifier (NOW)
NOW;

$hd = <<<HERE
Variables do not expand, nay they do,
also escapes.
This is the Heredoc syntax.
Notice there is no quotes around the identifier (HERE)
HERE;
```

## Page 97
**WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020**

### Complex (Curly) Syntax
There are two types of syntaxes that the PHP parser recognizes: simple and complex (curly).

- **Simple Syntax**: e.g., `$love = "Beer"; echo "I ❤ $love";`
- **Complex (Curly) Syntax**: This syntax allows the use of complex expressions by wrapping them in `{` and `}`.

```php
${'Be'.'er'}  = 'Club’;                             // Define $Beer
${'B'.str_repeat('e',2).'r'} = "Club";              // Define $Beer
${'B'.str_repeat('e',2).@false./*.*/'r'} = "Club";  // Define $Beer
```

## Page 101
**WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020**

### Class and Constant Usage
You can also use classes and constants in the curly syntax.

```php
class beers {
    const lovely = 'rootbeer';
}
$rootbeer = 'Club';
echo "I'd like a {${beers::lovely}}!";  //> I'd like a Club!
```

## 2.4.1.4 Array Data Types

## Page 103
**WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020**

### Accessing Individual Array Indices
Arrays are fundamental in PHP, especially when handling user input through superglobals like `$_GET` and `$_POST`.

```php
$a = array('x'=>123, 'xx'=>456); // This could be a $_GET, $_POST, or any other superglobal
echo $a['x'];              // 'normal' usage                              > 123
echo $a[x];                // index without quotes                        > 123
echo $a["\x78"];           // hexadecimal notation                        > 123
echo $a["\170"];           // octal notation                              > 123
echo $a['x'.@false."\x78"];// 'normal' usage with padding and hex.notation> 456
```

## Page 104
**WAPTXv2: Section 01, Module 02 - Caendra Inc. © 2020**

### Using Superglobals for Obfuscation
Superglobals like `$_SERVER` can be very useful for obfuscation and evading security mechanisms such as WAFs. For example, you can manipulate headers like `User-Agent`, `Accept-Language`, and `Accept-Encoding` to generate custom payloads.