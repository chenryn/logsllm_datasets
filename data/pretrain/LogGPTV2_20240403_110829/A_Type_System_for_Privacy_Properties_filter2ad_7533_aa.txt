title:A Type System for Privacy Properties
author:V&apos;eronique Cortier and
Niklas Grimm and
Joseph Lallemand and
Matteo Maffei
A Type System for Privacy Properties
Véronique Cortier
CNRS, LORIA
Nancy, France
PI:EMAIL
Joseph Lallemand
Inria, LORIA
Nancy, France
PI:EMAIL
Niklas Grimm
TU Wien
Vienna, Austria
PI:EMAIL
Matteo Maffei
TU Wien
Vienna, Austria
PI:EMAIL
ABSTRACT
Mature push button tools have emerged for checking trace proper-
ties (e.g. secrecy or authentication) of security protocols. The case
of indistinguishability-based privacy properties (e.g. ballot privacy
or anonymity) is more complex and constitutes an active research
topic with several recent propositions of techniques and tools.
We explore a novel approach based on type systems and provide
a (sound) type system for proving equivalence of protocols, for
a bounded or an unbounded number of sessions. The resulting
prototype implementation has been tested on various protocols
of the literature. It provides a significant speed-up (by orders of
magnitude) compared to tools for a bounded number of sessions
and complements in terms of expressiveness other state-of-the-art
tools, such as ProVerif and Tamarin: e.g., we show that our analysis
technique is the first one to handle a faithful encoding of the Helios
e-voting protocol in the context of an untrusted ballot box.
CCS CONCEPTS
• Security and privacy → Formal security models; Logic and
verification;
KEYWORDS
Protocols; privacy; symbolic models; type systems
1 INTRODUCTION
Formal methods proved to be indispensable tools for the analysis
of advanced cryptographic protocols such as those for key dis-
tribution [55], mobile payments [37], e-voting [11, 36, 44], and
e-health [51]. In the last years, mature push-button analysis tools
have emerged and have been successfully applied to many protocols
from the literature in the context of trace properties such as authen-
tication or confidentiality. These tools employ a variety of analysis
techniques, such as model checking (e.g., Avispa [10] and Scyther
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior specific permission
and/or a fee. Request permissions from permissions@acm.org.
CCS ’17, October 30-November 3, 2017, Dallas, TX, USA
© 2017 Copyright held by the owner/author(s). Publication rights licensed to Associa-
tion for Computing Machinery.
ACM ISBN 978-1-4503-4946-8/17/10...$15.00
https://doi.org/10.1145/3133956.3133998
[42]), Horn clause resolution (e.g., ProVerif [19]), term rewriting
(e.g., Scyther [42] and Tamarin [52]), and type systems [12, 17, 23–
28, 46, 47].
A current and very active topic is the adaptation of these tech-
niques to the more involved case of trace equivalence properties.
These are the natural symbolic counterpart of cryptographic in-
distinguishability properties, and they are at the heart of privacy
properties such as ballot privacy [44], untraceability [7], differential
privacy [45], or anonymity [3, 8]. They are also used to express
stronger forms of confidentiality, such as strong secrecy [40] or
game-based like properties [34].
Related Work. Numerous model checking-based tools have re-
cently been proposed for the case of a bounded number of ses-
sions, i.e., when protocols are executed a bounded number of times.
These tools encompass SPEC [43], APTE [13, 31], Akiss [30], or SAT-
Equiv [35]. These tools vary in the class of cryptographic primitives
and the class of protocols they can consider. However, due to the
complexity of the problem, they all suffer from the state explosion
problem and most of them can typically analyse no more than 3-4
sessions of (relatively small) protocols, with the exception of SAT-
Equiv which can more easily reach about 10 sessions. The only tools
that can verify equivalence properties for an unbounded number
of sessions are ProVerif [21]. Maude-NPA [54], and Tamarin [16].
ProVerif checks a property that is stronger than trace equivalence,
namely diff equivalence, which works well in practice provided
that protocols have a similar structure. However, as for trace prop-
erties, the internal design of ProVerif renders the tool unable to
distinguish between exactly one session and infinitely many: this
over-approximation often yields false attacks, in particular when
the security of a protocol relies on the fact that some action is only
performed once. Maude-NPA also checks diff-equivalence but often
does not terminate. Tamarin can handle an unbounded number of
sessions and is very flexible in terms of supported protocol classes
but it often requires human interactions. Finally, some recent work
has started to leverage type systems to enforce relational prop-
erties for programs, exploring this approach also in the context
of cryptographic protocol implementations [14]: like ProVerif, the
resulting tool is unable to distinguish between exactly one session
and infinitely many, and furthermore it is only semi-automated, in
that it often requires non-trivial lemmas to guide the tool and a
specific programming discipline.
Many recent results have been obtained in the area of relational
verification of programs [6, 15, 18, 29, 48, 50, 56, 57]. While these
Session B4:  Privacy PoliciesCCS’17, October 30-November 3, 2017, Dallas, TX, USA409results do not target cryptographic protocols and, in particular, do
not handle the semantics of cryptographic primitives or an active
adversary interference with the program execution, exploring the
suitability of the underlying ideas in the context of cryptographic
protocols is an interesting subject of future work.
Our contribution. In this paper, we consider a novel type checking-
based approach. Intuitively, a type system over-approximates pro-
tocol behavior. Due to this over-approximation, it is no longer
possible to decide security properties but the types typically convey
sufficient information to prove security. Extending this approach to
equivalence properties is a delicate task. Indeed, two protocols P
and Q are in equivalence if (roughly) any trace of P has an equiva-
lent trace in Q (and conversely). Over-approximating behavior may
not preserve equivalence.
Instead, we develop a somewhat hybrid approach: we design a
type system to over-approximate the set of possible traces and we
collect the set of sent messages into constraints. We then propose a
procedure for proving (static) equivalence of the constraints. These
do not only contain sent messages but also reflect internal checks
made by the protocols, which is crucial to guarantee that whenever
a message is accepted by P, it is also accepted by Q (and conversely).
As a result, we provide a sound type system for proving equiva-
lence of protocols for both a bounded and an unbounded number
of sessions, or a mix of both. This is particularly convenient to
analyse systems where some actions are limited (e.g., no revote, or
limited access to some resource). More specifically, we show that
whenever two protocols P and Q are type-checked to be equivalent,
then they are in trace equivalence, for the standard notion of trace
equivalence [22], against a full Dolev-Yao attacker. In particular,
one advantage of our approach is that it proves security directly
in a security model that is similar to the ones used by the other
popular tools, in contrast to many other security proofs based on
type systems. Our result holds for protocols with all standard primi-
tives (symmetric and asymetric encryption, signatures, pairs, hash),
with atomic long-term keys (no fresh keys) and no private channels.
Similarly to ProVerif, we need the two protocols P and Q to have a
rather similar structure.
We provide a prototype implementation of our type system,
that we evaluate on several protocols of the literature. In the case
of a bounded number of sessions, our tool provides a significant
speed-up (less than one second to analyse a dozen of sessions
while other tools typically do not answer within 12 hours, with a
few exceptions). To be fair, let us emphasize that these tools can
decide equivalence while our tool checks sufficient conditions by
the means of our type system. In the case of an unbounded number
of sessions, the performance of our prototype tool is comparable
to ProVerif. In contrast to ProVerif, our tool can consider a mix of
bounded and unbounded number of sessions. As an application, we
can prove for the first time ballot privacy of the well-known Helios
e-voting protocol [5], without assuming a reliable channel between
honest voters and the ballot box. ProVerif fails in this case as ballot
privacy only holds under the assumption that honest voters vote at
most once, otherwise the protocol is subject to a copy attack [53].
For similar reasons, also Tamarin fails to verify this protocol.
In most of our example, only a few straightforward type annota-
tions were needed, such as indicated which keys are supposed to
be secret or public. The case of the helios protocol is more involved
and requires to describe the form of encrypted ballots that can be
sent by a voter.
Our prototype, the protocol models, as well as a technical report
are available online [38, 39].
2 OVERVIEW OF OUR APPROACH
In this section, we introduce the key ideas underlying our approach
on a simplified version of the Helios voting protocol. Helios [5] is a
verifiable voting protocol that has been used in various elections,
including the election of the rector of the University of Louvain-la-
Neuve. Its behavior is depicted below:
ri
S → Vi :
Vi → S :
S → V1, . . . , Vn : v1, . . . , vn
[{vi}ri,r′
pk(ks)]
ki
i
where {m}r
pk(k) denotes the asymmetric encryption of message m
with the key pk(k) randomized with the nonce r, and [m]k denotes
the signature of m with key k. vi is a value in the set {0, 1}, which
represents the candidate Vi votes for. In the first step, the voter
casts her vote, encrypted with the election’s public key pk(ks) and
then signed. Since generating a good random number is difficult
for the voter’s client (typically a JavaScript run in a browser), a
typical trick is to input some randomness (ri) from the server and
to add it to its own randomness (r′
). In the second step the server
i
outputs the tally (i.e., a randomized permutation of the valid votes
received in the voting phase). Note that the original Helios protocol
does not assume signed ballots. Instead, voters authenticate them-
selves through a login mechanism. For simplicity, we abstract this
authenticated channel by a signature.
A voting protocol provides vote privacy [44] if an attacker is not
able to know which voter voted for which candidate. Intuitively,
this can be modeled as the following trace equivalence property,
which requires the attacker not to be able to distinguish A voting
0 and B voting 1 from A voting 1 and B voting 0. Notice that the
attacker may control an unbounded number of voters:
V oter(ka, 0) | V oter(kb , 1) | CompromisedV oters | S
≈t V oter(ka, 1) | V oter(kb , 0) | CompromisedV oters | S
Despite its simplicity, this protocol has a few interesting features
that make its analysis particularly challenging. First of all, the server
is supposed to discard ciphertext duplicates, otherwise a malicious
eligible voter E could intercept A’s ciphertext, sign it, and send it
to the server [41], as exemplified below:
[{va}ra,r′
pk(ks)]
A → S :
[{va}ra,r′
pk(ks)]
E → S :
[{vb}rb,r′
B → S :
pk(ks)]
S → A, B : va, vb , va
This would make the two tallied results distinguishable, thereby
breaking trace equivalence since va, vb , va ̸≈t vb , va, vb
Even more interestingly, each voter is supposed to be able to
vote only once, otherwise the same attack would apply [53] even if
ka
kb
ke
b
a
a
Session B4:  Privacy PoliciesCCS’17, October 30-November 3, 2017, Dallas, TX, USA410the server discards ciphertext duplicates (as the randomness used
by the voter in the two ballots would be different). This makes the
analysis particularly challenging, and in particular out of scope
of existing cryptographic protocol analyzers like ProVerif, which
abstract away from the number of protocol sessions.
With our type system, we can successfully verify the aforemen-
tioned privacy property using the following types:
a
1
′
b
, r
ra : τ LL,1
, rb : τ LL,1
ra
rb
ka : keyHH({(cid:74)τ LL,1
kb : keyHH({(cid:74)τ LL,1
(cid:32) ((cid:74)τ LL,1
((cid:74)τ LL,1
ks : keyHH
: τ HH,1
r′
}
}
′
a : τ HH,1
r′
, r
(cid:75) ∗ HL ∗ τ HH,1
; τ LL,1
(cid:75) ∗ HL ∗ τ HH,1
; τ LL,1
0
(cid:75) ∗ HL ∗ τ HH,1
; τ LL,1
(cid:75) ∗ HL ∗ τ HH,1
; τ LL,1
)
)
ks
) ∨
)
r′
a
r′
b
0
1
r′
a
r′
b
0
1
b
ks
1
0
(cid:33)
i
We assume standard security labels: HH stands for high confidential-
ity and high integrity, HL for high confidentiality and low integrity,
and LL for low confidentiality and low integrity (for simplicity, we
omit the low confidentiality and high integrity type, since we do
not need it in our examples). The type τ l,1
describes randomness
i
of security label l produced by the randomness generator at po-
sition i in the program, which can be invoked at most once. τ l,∞
is similar, with the difference that the randomness generator can
be invoked an unbounded number of times. These types induce a
partition on random values, in which each set contains at most one
element or an unbounded number of elements, respectively. This
turns out to be useful, as explained below, to type-check protocols,
like Helios, in which the number of times messages of a certain
shape are produced is relevant for the security of the protocol.
The type of ka (resp. kb) says that this key is supposed to en-
crypt 0 and 1 (resp. 1 and 0) on the left- and right-hand side of the
equivalence relation, further describing the type of the randomness.
The type of ks inherits the two payload types, which are combined
in disjunctive form. In fact, public key types implicitly convey an
additional payload type, the one characterizing messages encrypted
by the attacker: these are of low confidentiality and turn out to
be the same on the left- and right-hand side. Key types are crucial
to type-check the server code: we verify the signatures produced