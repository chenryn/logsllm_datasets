First, we have logic which verifies that we are running on DOS 3.3, and exits otherwise:
```assembly
                             BSidesTLV 2019
       1000:059d b8 43 01        MOV        AX,0x143
       1000:05a0 50              PUSH       AX
       1000:05a1 e8 0a 15        CALL       printf                                           undefined printf(char * param_1)
       1000:05a4 59              POP        CX
                             Welcome to the second part of the challenge. Great work so fa
       1000:05a5 b8 54 01        MOV        AX,0x154
       1000:05a8 50              PUSH       AX
       1000:05a9 e8 02 15        CALL       printf                                           undefined printf(char * param_1)
       1000:05ac 59              POP        CX
       1000:05ad e8 3d ff        CALL       Verify_Dos3.3                                    undefined Verify_Dos3.3(void)
```
Then, we have logic that checks something called a "memory signature" and a "file signature", prints them, and exits if the memory signature isn't correct:
```assembly
       1000:05b3 16              PUSH       SS
       1000:05b4 8d 86 72 ff     LEA        AX,[BP + local_90]
       1000:05b8 50              PUSH       AX
       1000:05b9 e8 20 fe        CALL       get_memory_signature                             uint get_memory_signature(undefi
       1000:05bc 59              POP        CX
       1000:05bd 59              POP        CX
       1000:05be 8b f0           MOV        SI,AX
       1000:05c0 e8 9c fe        CALL       get_file_signature                               uint get_file_signature(void)
       1000:05c3 8b f8           MOV        DI,AX
       1000:05c5 57              PUSH       DI
       1000:05c6 56              PUSH       SI
                             Memory Signature: 0x%04X, File Signature: 0x%04X
       1000:05c7 b8 96 01        MOV        AX,0x196
       1000:05ca 50              PUSH       AX
       1000:05cb e8 e0 14        CALL       printf                                           undefined printf(char * param_1)
       1000:05ce 83 c4 06        ADD        SP,0x6
                             Expected memory signature:
       1000:05d1 81 fe f3 7c     CMP        SI,0x7cf3
       1000:05d5 74 0f           JZ         signature_good
                             Signature mismatch, bye
       1000:05d7 b8 c9 01        MOV        AX,0x1c9
       1000:05da 50              PUSH       AX
       1000:05db e8 d0 14        CALL       printf                                           undefined printf(char * param_1)
       1000:05de 59              POP        CX
       1000:05df 33 c0           XOR        AX,AX
       1000:05e1 50              PUSH       AX
       1000:05e2 e8 28 01        CALL       FUN_1000_070d                                    undefined FUN_1000_070d(undefine
       1000:05e5 59              POP        CX
                             Signatures OK.
```
If the signature is Ok, we move on to a loop that decrypts the flag. However, before arriving to it, there's an explicit division by zero at `1000:05ee`. That must be what's crashing our program, we'll handle it in a moment.
```assembly
                             signature_good                                  XREF[1]:     1000:05d5(j)  
       1000:05e6 b8 e3 01        MOV        AX,0x1e3
       1000:05e9 50              PUSH       AX
       1000:05ea e8 c1 14        CALL       printf                                           undefined printf(char * param_1)
       1000:05ed 59              POP        CX
       1000:05ee b8 00 00        MOV        AX,0x0
       1000:05f1 f7 f0           DIV        AX
       1000:05f3 c6 46 fd 00     MOV        byte ptr [BP + i],0x0
       1000:05f7 eb 2e           JMP        flag_decryption_loop_condition
                             flag_decryption_loop                            XREF[1]:     1000:062b(j)  
       1000:05f9 8a 46 fd        MOV        AL,byte ptr [BP + i]
       1000:05fc 98              CBW
       1000:05fd 8d 56 ce        LEA        DX,[BP + local_34]
       1000:0600 03 c2           ADD        AX,DX
       1000:0602 8b d8           MOV        BX,AX
       1000:0604 8a 07           MOV        AL,byte ptr [BX]
       1000:0606 50              PUSH       AX
       1000:0607 8a 46 fd        MOV        AL,byte ptr [BP + i]
       1000:060a 98              CBW
       1000:060b c4 5e f8        LES        BX,[BP + local_a]
       1000:060e 03 d8           ADD        BX,AX
       1000:0610 58              POP        AX
       1000:0611 26 32 07        XOR        AL,byte ptr ES:[BX]
       1000:0614 50              PUSH       AX
       1000:0615 8a 46 fd        MOV        AL,byte ptr [BP + i]
       1000:0618 98              CBW
       1000:0619 8d 96 4c ff     LEA        DX,[BP + flag]
       1000:061d 03 c2           ADD        AX,DX
       1000:061f 8b d8           MOV        BX,AX
       1000:0621 58              POP        AX
       1000:0622 88 07           MOV        byte ptr [BX],AL
       1000:0624 fe 46 fd        INC        byte ptr [BP + i]
                             flag_decryption_loop_condition                  XREF[1]:     1000:05f7(j)  
       1000:0627 80 7e fd 24     CMP        byte ptr [BP + i],'$'
       1000:062b 7c cc           JL         flag_decryption_loop
```
Finally, the flag is printed:
```assembly
       1000:062d c6 86 70        MOV        byte ptr [BP + local_92],0x0
                 ff 00
       1000:0632 8d 86 4c ff     LEA        AX,[BP + flag]
       1000:0636 50              PUSH       AX
                             Congratulations! The flag is: %s
       1000:0637 b8 f5 01        MOV        AX,0x1f5
       1000:063a 50              PUSH       AX
       1000:063b e8 70 14        CALL       printf                                           undefined printf(char * param_1)
```
Back to the division by zero. We can easily override the faulty instructions with NOPs and we should be good to go, right?
![](images/nop.png)
We copy the patched executable to the floppy, run again and get:
![](images/dos_partial.png)
This looks like a partial flag, but there seems to be some corruption. Maybe it's related to the fact that we've unpacked and patched the executable?
Fortunately, we can bypass the faulty division using the [DOSBox debugger](https://www.vogons.org/viewtopic.php?t=3944), which is able to debug DOS programs in the CPU level.
In order to easily locate the program's code segment, we can use the following shortcut:
1. Set a breakpoint on INT 21: `BPINT 21 *`
2. Run the program in the DOS console: `main_fix.exe`
3. We will hit the breakpoint several times. Continue execution until the program starts printing to the screen.
4. The current code segment is probably what we're looking for.
![](images/bpint_21.png)
We can see that CS = 0xD3E.
If we move our code view to `0D3E:05EE` using the `c cs:05EE` command, we'll see our famous division:
```
---(Code Overview   Scroll: up/down     )---
0D3E:05EE  B80000              mov  ax,0000
0D3E:05F1  F7F0                div  ax
0D3E:05F3  C646FD00            mov  byte [bp-03],00        ss:[FEF9]=0212
0D3E:05F7  EB2E                jmp  short 00000627 ($+2e)  (down)
0D3E:05F9  8A46FD              mov  al,[bp-03]             ss:[FEF9]=0212
```
Let's delete our global INT 21 breakpoint:
```
> BPLIST
Breakpoint list:
-------------------------------------------------------------------------
00. BPINT 21
> BPDEL 0
```
And set a breakpoint on `div ax` by using `bp cs:05EE`. We continue execution and shortly after, hit our breakpoint.
Note: The program had logic to disable INT 3 (software breakpoints). However, the DOSBox debugger does not use INT 3 to realize breakpoints, but rather uses something similar to HW breakpoints.
In the register overview, we'll see `EAX=00000000`, we can modify the value to 1 using `sr eax 1`. However, after continuing to execute, even though we've diverted the division by zero, we still get a corrupted flag!
Time to dive in deeper. Where should the flag be coming from?
Let's take another look at the logic that decrypts the flag:
```assembly
                             flag_decryption_loop                            XREF[1]:     1000:062b(j)  