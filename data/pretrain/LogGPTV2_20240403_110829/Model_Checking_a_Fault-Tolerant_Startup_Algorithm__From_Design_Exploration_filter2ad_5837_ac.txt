on entering the listen (or faulty) state, its counter is
reset to 1.
We next describe a class of transitions for a node from
listen to (cold) start state.
[] % Transition 2.1
([] (k: channels):
state = listen AND big_bang AND msg_in[k] = cs_frame
AND (NOT (EXISTS (j:channels): j/=k AND
(msg_in[j] = cs_frame OR msg_in[j] = i_frame) AND
(time_in[k]/=time_in[j] OR msg_in[k]/=msg_in[j])))
--> state’ = start; counter’ = 2;
msg_out’=[[j:channels] quiet];
time_out’=[[j:channels] 0];
big_bang’ = FALSE;)
This guarded command is a short hand for a set of transi-
tions. It represents one transition for each k, with k = 0, 1.
The precondition is satisﬁed, if the node is in listen state,
a big bang has not been received yet by this node, the in-
coming message on channel k is a cs-frame, and there does
not exist a channel different from k (in a dual-channel sys-
tem, there is only one other channel) where a cs-frame or i-
frame is received that has another time in value than that
on channel k. The output and local variables will be set to
the appropriate values. The subtly differentiated cases in the
precondition were helpful in testing different algorithm de-
signs.
3.2. Failure Modeling
Faults vastly increase the statespace that must be ex-
plored in model checking, and they do so in two different
ways. The ﬁrst way is by introducing genuinely different
behaviors; we provide a fault degree “dial” to parameterize
this as described in the following section. The second way
is to introduce “clutter” in the form of states that differ in ir-
relevant ways: for example, a faulty node can end up in one
of many different states, but once the correct components
have excluded this node from further consideration, its state
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 12:29:32 UTC from IEEE Xplore.  Restrictions apply. 
chB
chA
e
m
a
r
f
_
s
c
t
e
i
u
q
)
d
o
o
g
(
e
m
a
r
f
_
i
)
d
o
o
g
(
e
s
i
o
n
e
m
a
r
f
_
s
c
e
m
a
r
f
_
i
)
d
a
b
(
)
d
a
b
(
quiet
cs_frame (good)
i_frame (good)
noise
cs_frame (bad)
i_frame (bad)
1
2
3
4
5
6
2
2
3
4
5
6
3
3
3
4
5
6
4
4
4
4
5
6
5
5
5
5
5
6
6
6
6
6
6
6
Figure 3. Fault degree
has no effect on system behavior. However, a model checker
distinguishes all the different states of the faulty component
and this needlessly complicates its task. A valuable “trick”
in modeling fault-tolerant algorithms is to set the states of
faulty components to ﬁxed values once they can no longer
affect the behavior of the system. We implement this by a
mechanism we call feedback.
3.2.1. Node Failures The model simulates time in dis-
crete slot granularity and a faulty node is simulated as one
that can send arbitrary messages in each slot. We classify
the possible outputs of such a faulty node into the six fault
degrees depicted by the (6 × 6) matrix in Figure 3. For ex-
ample, a fault degree of 1 allows a faulty node only to fail
silent, while fault degree 6 allows a node to send an arbi-
trary combination of cs-frames and i-frames with correct or
incorrect semantics, noise, or nothing on each channel.
Each of these 36 combinations was explicitly described
by guarded commands in the SAL model.
[] state = faulty AND degree >= 2
-->
msg_out’=[[j:channels] IF j = 0
THEN cs_frame ELSE quiet ENDIF];
time_out’ = [[j:channels] IF j = 0
THEN faulty_ID ELSE 0
ENDIF];
state’ = IF lock_in[0] AND lock_in[1] AND feedback
THEN faulty_lock01
ELSIF lock_in[0] AND feedback THEN faulty_lock0
ELSIF lock_in[1] AND feedback THEN faulty_lock1
ELSE state ENDIF;
Here, one guarded command of a faulty node with fault de-
gree 2 or greater is depicted: such a faulty node is allowed
to broadcast a cs-frame on channel 0 and does not send on
the second channel. Furthermore, to reduce the statespace,
we use “feedback”: the lock in[i] input variables are
set by the hub i (corresponding to its lock output vari-
ables) if it discovers that the node is faulty (by judging on
the node’s output behavior). A faulty node will then trans-
mit only quiet on channel i, since the hub will block all
messages of the faulty node anyway. To judge its effect, this
feedback routine can be turned on and off by setting the
feedback parameter to TRUE or FALSE respectively.
trary values, within its fault hypothesis (a faulty hub cannot
create correct messages) in each slot.
[] ([] (i: index):
state=hub_faulty AND msg_in’[i] /= quiet
-->
msg_out’ = [[j:index] IF partitioning[j]
THEN msg_in’[i]
ELSE IF send_noise[j] THEN noise ELSE quiet ENDIF
ENDIF];
time_out’ =[[j:index] time_in’[i]];
interlink_msg_out’ = msg_in’[i];
interlink_time_out’ = time_in’[i]; )
This example of a transition by a faulty hub is activated
if an attached node sends a message other than quiet to
the hub. The faulty hub then is free to select a subset of
nodes to which the message is forwarded. The local vari-
able partitioning, an array of boolean variables, cre-
ates such a partitioning of the nodes. By specifying no ini-
tial value for this variable, the model checker is forced to
test every assignment. The faulty hub is allowed to send ei-
ther noise or quiet to the other nodes, using the simi-
larly uninitialized boolean array send noise. We call this
method implicit failure modeling (in the sense, that it is not
necessary to model transitions for each subset explicitly).
4. Correctness Properties
In the following we describe some correctness proper-
ties of the algorithms and their formulation as “lemmas” in
SAL notation. Here, G denotes the always or (cid:1) modality
of linear temporal logic (LTL), and F denotes the eventu-
ally or ♦ modality. SAL allows a modular model descrip-
tion. To compose the modules, the input and output vari-
ables have to be mapped to global (unique) variables, local
variables may be mapped for better readability of the prop-
erties under test. lstates and hstates correspond to
the state variable in node and hub, respectively.
Lemma 1 Safety: Whenever any two nodes are in the AC-
TIVE state, these nodes will agree on the slot time.
safety: LEMMA system |- G(FORALL (i,j:index):
(lstates[i] = active AND lstates[j] = active) =>
(node_time_out[i] = node_time_out[j]));
Lemma 2 Liveness: All correct nodes will eventually reach
the ACTIVE state.
liveness: LEMMA system |- F((FORALL (i:index):
lstates[i] = active OR faulty_node[i]));
Lemma 3 Timeliness: All correct nodes will reach the AC-
TIVE state within a bounded time (see 5.3).
timeliness: LEMMA system |-
G(startup_time 
(hstates[1]=hub_active OR hstates[1]=hub_tentative ));
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 12:29:32 UTC from IEEE Xplore.  Restrictions apply. 
Within our model-checking study additional lemmas
were examined to gain conﬁdence in our model. Those lem-
mas can be found in the source code of the SAL model.
5. Experimental Results and Discussion
In this section we present results from our experiment
using model checking in development of the new startup al-
gorithm. Our experiments were performed on an Intel(R)
Xeon(TM) with a CPU speed of 2.80GHz and 2GByte
memory. We used the Linux distribution of SAL 2.0 [5].
5.1. Effectiveness of Statespace Reduction
Our decision to use a discrete model for time was crit-
ical to our ability to perform these experiments at all. Al-
though we cannot yet prove the soundness of this abstrac-
tion, we gained conﬁdence in it by selectively removing
mechanisms from the SAL model of the algorithm and ob-
serving that the model checker always detected the expected
system failures.
In exploring algorithmic variations, it was crucial for the
model checker to deliver results within the human attention
span of a few minutes. Our principal “dials” for trading time
required against thoroughness of the exploration performed
by the model checker were the number of nodes considered
(typically from 3 to 6), and the fault degree. The parame-
ter δfault selects the fault modes that a faulty node may ex-
hibit. Figure 4 illustrates the veriﬁcation times in seconds
for three lemmas in a 4-node model with δfault = 1, 3, 5.
The results clearly show the increase in veriﬁcation times
with fault degree. A fault degree of 1 is suitable for quick
investigation in the inner design loop, while degrees 3 and
5 invite a coffee break.
δfault
1
3
5
safety
44.11
166.34
251.12
liveness
196.05
892.15
1324.54
timeliness
77.14
615.03
921.92
Figure 4. Effect of Increasing Fault Degree on
Model-Checking Performance
The feedback mechanism (i.e., forcing failed compo-
nents to a standard state to reduce the statespace) was inef-
fective or counterproductive in practice for medium to large
models, but for very large models it proved essential. For
example, one property was successfully model checked in
a 6-node model in 30,352 seconds (about 8.5 hours) with
feedback on, but had not terminated after 51 hours with
it off. In future research, we intend to investigate in more
detail the inﬂuence of the feedback mechanism on model
checker performance.
5.2. Design Exploration: Big-Bang Mechanism
One area where we performed extensive design explo-
ration was to determine the necessity and effectiveness
of the big-bang mechanism. A crucial requirement of the
startup algorithm is that it should not establish synchronous
operation of a subset of nodes on a faulty hub while the
second, correct, channel is available but unsynchronized. In
such a case it would be possible for the faulty hub to for-
ward messages only to the synchronous subset but not to the
other nodes and hub; other nodes that are not yet synchro-
nized would perform the startup algorithm (since the traf-
ﬁc of the synchronous set is hidden by the faulty hub) and
start up independently of the other, already synchronized,
nodes thereby establishing a classical clique scenario [12],
in which two subsets of nodes are communicating within
each subset but not as one coordinated whole. The big-bang
mechanism (Section 2) is used to prevent such scenarios.
Our model-checking experiments veriﬁed the necessity
of the big-bang mechanism by producing the following
counterexample in its absence for a cluster of 4 nodes:
1. node n2 and n3 start up with one slot difference;
2. after the listen timeouts expire, n2 and n3 send their
cs-frames, resulting in a collision;
3. the correct hub forwards the winning node, say n2, on
its channel to all nodes and the second channel;
4. the faulty hub forwards the winning node on its chan-
nel, n3, only to the correct hub;
5. nodes n1 and n4 receive only one cs-frame (from n2)
and synchronize on it, thus reaching ACTIVE state;
6. the correct hub sees a collision, since the faulty hub
forwards the other cs-frame to it, and thus will not syn-
chronize to the active set of nodes.
The big-bang mechanism discards the ﬁrst cs-frame a node
receives, since this cs-frame could be part of a collision of