 sends to  the nonce , a freshly generated nonce  and
its public key, all of this being encrypted with the public key of .
Otherwise,  sends out a ‚Äúdecoy‚Äù message: =A? FK>.
This message should basically look like ‚Äôs other message from the
point of view of an outsider. This is important since the protocol is
supposed to protect the identity of the participants.
A session of role  played by agent  with  can be modeled by
the plain process   where   =@A? . Note that 
is not given the value  but is directly given the value FK>,
that is the public key corresponding to ‚Äôs private key.
  @AB
AM E 
EB FH    FK> JDA
KJ =A?FH  FK> FK>
AIA KJ IA? FK>
Intuitively, this protocol preserves anonymity if an attacker can-
not distinguish whether  is willing to talk to  (represented by the
process  ) or willing to talk to ﬂ∞ (represented by the process
 ﬂ∞), provided , ﬂ∞ and  are honest participants. For illus-
tration purposes, we also consider the process ﬂ∞  obtained
from   by replacing AIA KJ IA? FK> by
AIA . We will see that the ‚Äúdecoy‚Äù message plays a crucial role
to ensure privacy.
with  is   where    , and
A (concrete) process representing a session in which  plays 
  =N    =N     =N !  ﬂ∞ =N "  
=N #  FK> =N $  ﬂ∞ =N %  FK>
The purpose of  is to disclose the names of the agents and their
public keys in order to make them available to the attacker.
2.2 Semantics
The operational semantics of processes is deÔ¨Åned by the relation
‡¢§‡¢ê for which some rules are described in Figure 1. Of course, we
have also some rules to deal with conditionals, internal communi-
cations, and choice operators. This relation transforms a concrete
process into a concrete process. Note that the output of a term  is
made ‚Äúby reference‚Äù using the next parameter =N ‡¢Ø‡¢Ø. Moreover,
we check the validity of the terms that have to be evaluated during
the execution. Note also that, since we authorize arbitrary terms
for channels, we have to check whether the channel is known by
the attacker or not.
EXAMPLE 2. Continuing Example 1, we have that:
  @AB   
KJ=N =N &
‡¢§‡¢§‡¢§‡¢§‡¢§‡¢§‡¢§‡¢§‡¢§‡¢§‡¢§‡¢§‡¢§‡¢§‡¢§‡¢§‡¢§‡¢ê  
‡¢§‡¢ê E=N =A?=N =N #=N %
‡¢§‡¢§‡¢§‡¢§‡¢§‡¢§‡¢§‡¢§‡¢ê   √û =N &  
where   =A? FK> FK> and for some plain
process .
process  ﬂ∞  yields the process:
Considering the same sequence of reductions starting from the
  √û =N &  =A? FK>
Indeed, in such a situation, the equality test will be false and the
‚Äúdecoy‚Äù message will be sent.
Intuitively, two processes are equivalent if they cannot be distin-
guished by any active attacker. Equivalences can be used to formal-
ize many interesting security properties, in particular privacy-type
properties, such as those studied in [16]. However, proofs are dif-
Ô¨Åcult because of the universal quantiÔ¨Åcation over all contexts. For
this reason, we consider here trace equivalence that intuitively cap-
tures the same notion. First, we introduce a notion of intruder‚Äôs
knowledge that has been extensively studied (see e.g. [1]).
DEFINITION 2. Two concrete frames  and ﬂ∞ are statically
equivalent, written  √ü ﬂ∞, when @  @ﬂ∞ and when:
‡¢´ for any ground recipe  such that F=H= ‡£Æ @, we
have that L=E@ if, and only if, L=E@ﬂ∞;
‡¢´ for any ground recipes  ﬂ∞ such that F=H= ﬂ∞ ‡£Æ
@, and L=E@, L=E@ﬂ∞, we have that ‡¢ë 
ﬂ∞‡¢ë if, and only if, ﬂ∞‡¢ë  ﬂ∞ﬂ∞‡¢ë.
EXAMPLE 3. Consider the two concrete frames introduced in
Example 2:
‡¢´    √û =N &  =A? FK> FK>;
‡¢´ ﬂ∞
   √û =N &  =A? FK>.
Actually, they are in static equivalence. This is a non-trivial equiv-
alence. Intuitively, there is no test that allows one to distinguish
these two frames since the decryption key  is not available and
the message stored in =N & can not be reconstructed ( is not avail-
able to the attacker).
Let  be the alphabet of actions for our semantics. For every
 ‡¢† ‡¢© the relation ‡¢§‡¢ê on concrete processes is deÔ¨Åned in the
usual way. For  ‡¢†  ‡¢® ‡¢©, the relation  on concrete pro-
cesses is deÔ¨Åned by:      if, and only if there
exists  ‡¢† ‡¢© such that   ‡¢§‡¢ê   and  is obtained
by erasing all occurrences of .
Let     be an intermediate process. We deÔ¨Åne the
following set:
JH=?A     ‡¢Ø        for some    
(TRACE EQUIVALENCE ‡£à). Let  and  be
DEFINITION 3
two concrete processes. The processes  and  are trace equiva-
lent, denoted by  ‡£à , if for every   ‡¢† JH=?A there exists
ﬂ∞ ﬂ∞ ‡¢† JH=?A such that   ﬂ∞ and  √ü ﬂ∞ (and conversely).
EXAMPLE 4. Continuing Example 1, we have that:
   ‡£à  
ﬂ∞
 
Again, this is a non-trivial equivalence that illustrates the anonymity
property. However, as noticed in [14], the ‚Äúdecoy‚Äù message plays
an important role. Indeed, considering now the process ﬂ∞ ,
we have that:

ﬂ∞
   ‡¢ß‡£à 
ﬂ∞
ﬂ∞
 
 
This can be easily shown by considering the sequence of actions
  E=N  =A?=N  =N # =N %  KJ=N  =N &. We have
that   ‡¢† JH=?Aﬂ∞   (as in Example 2). How-
ever, this sequence  does not exist for ﬂ∞ ﬂ∞ .
Now, we are able to state our main result:
THEOREM 1. Let  and  be two concrete processes. The
problem whether  and  are trace equivalent is decidable.
3. SYMBOLIC SEMANTICS
In this section, we propose a symbolic semantics for our calculus
following e.g. [8]. By treating inputs symbolically, our symbolic
semantics avoids potentially inÔ¨Ånite branching of execution trees
due to inputs from the environment. Correctness is maintained by
associating with each process a set of constraints on terms. We then
deÔ¨Åne symbolic trace equivalence which is shown to be sound and
complete with respect to concrete trace equivalence.
3.1
Initial constraint systems
An (initial) constraint system represents the possible executions
of a protocol once an interleaving has been Ô¨Åxed.
DEFINITION 4. An initial constraint system is either  or a tu-
ple    where:
1.  is a sequence of the form =N        =N    where
      are terms;
2.  is
a
sequence
of
  ‡¢≥    ‡¢≥  
deducibility
constraints
  where
 
‡¢´       are distinct
‡¢´ for every  ‡£ò  ‡£ò , L=HI  ‡£ÆS
      are terms, and  ‡£ò  ‡£ò    ‡£ò  ‡£ò ;
second-order variables,
 .
3.  is a conjunction of equations and disequations between
terms such that L=HI  ‡£Æ      .
Note that each variable  occurs Ô¨Årst in a deducibility constraint
whose right member is exactly . We also assume that the variables
that occur in  have been introduced in a deducibility constraint.
This allows us to ensure that once the ground recipes associated
to the second order variables are Ô¨Åxed, then the values of the Ô¨Årst-
order variables are uniquely determined.
Note also that all the variables that occur in such a system are
free. The variables  represent the recipes that might be used to
deduce the right-hand side of the deducibility constraint. The in-
dices indicate the support of the variable, i.e. which initial segment
of the frame can be used. Note that  is not a concrete frame: the
terms       are not necessarily ground and may contain some
destructors.
DEFINITION 5. A solution of an initial constraint system  
   consists of a substitution  mapping L=HI  to ground
constructor terms and a substitution  mapping L=HI   to ground
recipes such that:
‡¢´ for every =N    in , we have that L=E@;
‡¢´ for every  
  in , F=H= ‡£Æ =N      =N ,
L=E@, and ‡¢ë  ‡¢ë;
‡¢´ for every equation    in , L=E@, L=E@, and
‡¢ë  ‡¢ë;
‡¢´ for every disequation 
 L=E@, or ‡¢ë ‡¢ß ‡¢ë.
‡¢ß  in ,  L=E@, or
We denote by 5EEJ the set of solutions of . By convention, we
have that 5EEJ  ‡¢ù.
Let  be an initial constraint system and  be a substitution such
that   ‡¢† 5EEJ for some . Note that once  is Ô¨Åxed, the
associated substitution  is uniquely deÔ¨Åned.
EXAMPLE 5. Let      where:
‡¢´    √û =N &  & where & is equal to
=A?FH=@A?  FK> FK>
   %
‡¢´    %
 ; and
‡¢´   FH =@A?   FK>
   %
 is an initial constraint system. We can check that   ‡¢†
5EEJ where:
‡¢´    7‡¢ê =N   7‡¢ê =A?=N  =N # =N %  7‡¢ê =N ;
‡¢´    7‡¢ê =A? FK> FK>.
The structure of an initial constraint system      is
given by   ‡¢Ø  
  ‡¢†  for some , and @. We
are now able to deÔ¨Åne our notion of symbolic equivalence between
sets of initial constraint systems. This notion will be useful later on
to deÔ¨Åne our notion of symbolic trace equivalence (see Section 3.2).
The remaining of this paper is entirely devoted to the problem of
deciding this notion of symbolic equivalence.
DEFINITION 6. Let  and ﬂ∞ be two sets of initial constraint
systems having the same structure. We have that  ‡£àEEJ ﬂ∞ if for
all  ‡¢† , for all   ‡¢† 5EEJ, there exists ﬂ∞ ‡¢† ﬂ∞ and a
substitution ﬂ∞ such that ﬂ∞  ‡¢† 5EEJﬂ∞ and ‡¢ë √ü ﬂ∞ﬂ∞‡¢ë
where     , and ﬂ∞  ﬂ∞ ﬂ∞ ﬂ∞ (and conversely).
3.2 Symbolic calculus
From a concrete process   we compute the set of initial
constraint systems capturing its possible executions, starting from
the symbolic process  ‡¢ù‡¢ù.
DEFINITION 7. A symbolic process is a tuple    :
‡¢´      is an initial constraint system; and
‡¢´  is a multiset of plain processes with BL  ‡£Æ L=HI .
The semantics of symbolic processes is deÔ¨Åned by the relation
‡¢§‡¢§‡¢ê for which some rules are described in Figure 2. This relation
transforms a symbolic process into a symbolic process. The aim of
this symbolic semantics is to avoid the inÔ¨Ånite branching due to the
inputs of the environment. This is achieved by keeping variables
rather than input terms. The constraint system gives a Ô¨Ånite repre-
sentation of the value that these variables are allowed to take. As
in our concrete semantics, we deÔ¨Åne ‡¢§‡¢ê and .
E  √§    
E 
‡¢§‡¢§‡¢§‡¢§‡¢§‡¢ê
 √§   ﬂ∞ 
where ﬂ∞   ‡¢≥ ‡¢Ø‡¢Ø   ‡¢≥ ‡¢Ø‡¢Ø   and   are fresh variables
KJ  √§    
‡¢§‡¢§‡¢§‡¢§‡¢§‡¢§‡¢§‡¢§‡¢§‡¢ê
KJ=N‡¢Ø‡¢Ø
 √§   √û =N ‡¢Ø‡¢Ø   ﬂ∞ 
with ﬂ∞   ‡¢≥ ‡¢Ø‡¢Ø   and  is a fresh variable
(IN)
(OUT)
Figure 2: Symbolic semantics
DEFINITION 8. Let     and     be two
concrete processes. They are in symbolic trace equivalence if for
every sequence JH of symbolic actions, we have:
 ﬂ∞
 ﬂ∞
 ‡¢Ø  ‡¢ù‡¢ù JH ﬂ∞
 ‡¢Ø  ‡¢ù‡¢ù JH ﬂ∞
ﬂ∞
We can show that symbolic trace equivalence exactly captures
 ﬂ∞
 ﬂ∞
 ﬂ∞