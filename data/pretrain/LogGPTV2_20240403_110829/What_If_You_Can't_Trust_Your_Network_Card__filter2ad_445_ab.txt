be measured by the operating system using the TPM to detect unexpected con-
ﬁguration changes. Peripherals’ ﬁrmware should be part of the components that
are measured during the trusted boot pathway. After a (trusted) kernel is booted,
the network driver will force a ﬁrmware reload, using a trusted ﬁle on the system
(integrity checked via TPM calls) and the reset the embedded CPU.
As pointed out by Rutkowska [19], using so-called Dynamic Root of Trusts
can even solve race conditions at boot time. We consider such techniques to
provide an eﬃcient solution to the problem of integrity veriﬁcation of embedded
software at load-time. As a result, we do not study such a problem in this paper.
Operating system’s runtime integrity can be enforced by means of an
IOMMU mechanism. Once the system is booted in a trusted state (thanks to a
TPM and the dynamic root of trusts), an IOMMU protects it from DMA attacks
initiated from the devices by only allowing them access to a speciﬁc (and private)
area of the main memory. Any attempt to access memory outside that area fails
and triggers an alert on the system.
Other types of attacks against the operating system (either direct or through
userland applications) are outside the scope of this paper.
4.2 Model of the network adapter
Figure 1 sketches the typical architecture of a network card. The PHY is re-
sponsible for sending and receiving signals on the wire and performing physical
and logical conversions. The SRAM is the volatile memory area where packets
are temporarily stored before being sent to the operating system by means of
the DMA controller of the card. The management CPU is an on-chip processor
which operates independently of all architectural blocks and is intended to run a
custom ﬁrmware that can be used for custom frame processing. Many diﬀerent
ﬁrmware types exist, e.g., management ﬁrmware (for ASF, IPMI or AMT) or
accelerators like TSO (TCP segmentation Oﬄoading).
Model of the memory layout As NAVIS monitors NIC memory accesses, we
now focus on the memory of the network card.
In theory, the architecture of a network adapter should be quite simple. Like
most embedded systems, NICs are based on a Von Neumann memory archi-
tecture, where executable code and data are located in a single address space.
The software which makes up a ﬁrmware is usually executed as a monolithic
application. As a result, ﬁrmware generally lacks memory protections that are
commonly found on custom systems (such as a memory management unit, ran-
domization or NX features) because they do not require memory protection
between diﬀerent applications or isolation between kernelland and userland.
In fact, one may argue that the integration of additional features in network
adapters (see section 3) should make these protections a requirement. However,
apart from the fact that it would probably degrade the NIC performances, having
Fig. 1: Architecture of network adapter
a more sophisticated adapter in a computer would give rise to other questions
regarding the security model of the overall system.
To sum up, our approach is based on a ﬂat memory model that combines
both code and data, on top of which we enforce access restrictions and control
ﬂow integrity veriﬁcations.
Next, the memory layout model must distinguish precisely those memory
areas that are used to execute code, to read and write data, and specify which
areas are in read-only mode. In the case of the network card, data read and write
operations can be performed by three components of the card : the management
CPU, the DMA controller and the PHY.
The DMA controller and the PHY are used to transfer packets between the
host and the wire, which are stored in a speciﬁc place in the card memory. Some
area is reserved too for storing the structures used to synchronize DMA transfers
between the host and the card (mainly pointers to the packets themselves).
The management CPU uses some memory for the code it executes, for the
read-only data shipped with the ﬁrmware and for the various structures usually
needed (like room for a stack and heap). As it usually needs to process some
packets (e.g management packets for ASF or TCP packets for TSO), it can read
and write on the memory area used for storing packets. The management CPU
also has access to the sending area because it might need to send packets.
Building the reference memory layout One of the obstacles that came up
in building the reference memory layout of the network card used in our exper-
iments is that the purposes of the various memory areas are not public.
Therefore, we have built the reference memory layout of the network card
empirically, by monitoring the NIC activity during typical network sessions :
large HTTP download, SSH sessions and legitimate ASF traﬃc (session open,
a few ”query” commands and session close). The data obtained is a good rep-
resentation of the network controller activity. Details on the memory reference
model acquisition are given in section 5.3.
Figure 3 (p.14) shows the memory map of the card used in our experiments.
Of course, this memory map is highly card-speciﬁc, but our acquisition proce-
dure can applied to other card models, provided that the cards can be tightly
controlled by the host.
4.3 Detection heuristics
Based on the memory model presented previously, NAVIS uses three comple-
mentary detection heuristics to detect network controller ﬁrmware corruptions.
The ﬁrst two aim at enforcing access restrictions on memory areas. The third
one is used to detect potential control ﬂow integrity violations and uses a shadow
return stack.
During the initialization phase, NAVIS records a golden model of the ﬁrmware,
which serves as a reference for the subsequent veriﬁcations. As a reminder, we
assume that the golden model is authentic (see 4.1). NAVIS then acts as a de-
bugger to keep track of the NIC CPU operations and update its internal model of
the NIC status. The following veriﬁcations a performed at each state transition.
Step-by-step instruction address checking: Based on the memory layout
model, NAVIS checks the consistency of the instruction pointer at each execution
step. If the instruction pointer points to a memory area that corresponds to the
heap, the stack or the scratchpad, then a code injection attack followed by a
control ﬂow redirection probably occurred.
Step-by-step instruction comparison: In addition to the previous veriﬁca-
tion, NAVIS also checks that there is a match between the instruction that is
to be run by the CPU and the one that should be run according to the golden
model. A mismatch is indicative of a code injection in the NIC memory, in which
case the NIC is stopped.
Of course, this heuristic is valid only if the code is not self modifying. This
assumption does not seem excessive : despite their increasing complexity, one
does not expect network cards to require the execution of self-modifying code
for their legitimate processing.
This assumption might need to be revisited at some point. Management
ﬁrmware already include software like web and application servers, it might be
possible that in the future java-based applications become available, where code
would be written in memory before beeing executed, and thus there would be
no golden model for that part. Anything using just in time execution would fail
the assumption.
Shadow stack : In order to detect malicious control ﬂow alterations, we main-
tain a simpliﬁed copy of the call stack of the ﬁrmware on the veriﬁer side, called
the shadow stack. The shadow call stack is used to verify that a function call
returns to the callsite most recently used for invoking the function. Of course,
the shadow call stack must be maintained in a protected memory, so that the
attacker cannot modify it. In our case, the shadow call stack is maintained on
the host side, in userland, which is assumed to be trusted.
The shadow stack is updated every time a CALL-like or a RET-like instruction
is executed by the ﬁrmware as follows:
– on a CALL instruction, the return address is pushed on the shadow stack;
– on a RET instruction, the target return address is matched against the one
that was previously saved on the shadow stack; a diﬀerence between the two
addresses is the sign of an anomaly.
The concept of a shadow call stack is not original by itself, but its implemen-
tation turns out to be complex on a concrete network adapter whose ﬁrmware
architecture is not known (see section 5.5 for details). The main challenges ac-
tually reside in the identiﬁcation of CALL and RET instructions and in the
presence of interrupts triggered by components of the NIC. These interrupts are
susceptible to disrupt the control ﬂow of the ﬁrmware which is monitored.
This approach is similar in its principle to the Instruction-Based Memory
Access Control mechanism proposed by Francillon [11], except that we do not
have to implement the monitor inside the ﬁrmware. This is possible because
the former has physical access to the latter, and because we assume that the
network card cannot subvert the operating system. In a way, our settings are
less constraining than his, but they are also the only viable solution considering
that we do not modify the underlying NIC hardware.
Step-by-step instruction address checking may seem superﬂuous, consider-
ing that the attack types it detects are included in those that are detected by
the shadow stack. However, step-by-step instruction address checking may prove
useful in practice when the speciﬁcities of a given network adapter make the im-
plementation of shadow stack protection inaccurate (in particular, dealing with
on-board interrupts is a diﬃcult task, see 5.5). We chose to use all three tech-
niques considering that our implementation of the shadow stack technique might
not be perfect (because of speciﬁcities of the network adapter). The shadow stack
is also the slowest method so it makes sense to enable it only when it is really
needed.
Other heuristics : Another way to detect code injection attacks could consist
in scanning the memory in search of values whose statistical distribution matches
that of executable code in memory areas that are supposed to contain data only
(heap, stack and scratchpad). Such data locations are used to store ethernet
packets and there is no reason why data stored there should meet the statistical
proﬁle of binary instructions.
We mention this type of detection criterion here, but it has not been imple-
mented. Indeed, due to its statistical nature, this approach is more error prone
than the previous ones, and its beneﬁts are uncertain. Also, scanning the whole
packet area every time a packet arrives would be time consuming and would
degrade the performances of NAVIS.
5
Implementation of NAVIS
In the remainder, we consider the case of the Broadcom NetXtreme network
adapter. Those adapters can be found on various type of machines but are gen-
erally integrated on mainboard of desktop and laptops sold by HP and Dell. The
variants used in this study are mobile versions of the 575x series.
5.1 Quick description of the Broadcom NetXtreme network
adapters
Broadcom provides a complete set of speciﬁcations of their network adapters for
open source driver development which we used as a basis for our work.
The network card follows the model shown in Fig. 1. The management
ﬁrmware is run by a MIPS CPU which has access to the various components
and especially the whole memory area.
The memory layout is described in Broadcom documentation though a lot of
space is either undocumented or explicitly marked as unmapped. Depending on
the documentation version, read access to unmapped areas returns all zeros or
unexpected data while write access are dropped internally or have no eﬀect. In
practice, useful data can sometime be found on unmapped areas.
The host communicates with the card through diﬀerent ways. The driver can
conﬁgure it using MMIO address space (including DMA conﬁguration) and then
sends and receives data through DMA reads and writes in a reserved address
space setup initially. The data structures used to communicate with the cards
are called rings since they are circular buﬀers. Several such rings are used for
sending and receiving packets, both in the card memory and in the main host
memory. The rings contain pointers (in a structure called buﬀer descriptor ) to
the packet, and the ring is controlled by a structure named ring control block.
These structures are located in various places in the card memory.
The ﬁrmware uses area allocated from the card memory space. It needs room
for storing the code as well as the various data structures (heap, stack etc.).
5.2 Low level interface to the device
We ﬁrst need to be able to reach the network card (and especially the embedded
CPU and the ﬁrmware) from the operating system to allow NAVIS to perform
various veriﬁcations to ensure ﬁrmware integrity.
Such an interface was implemented to analyse the vulnerability presented
in section 3, as well as to craft an external debugger for the network adapter’s
embedded MIPS CPU that executes the ﬁrmware. The same interface is reused
to analyse the standard behaviour of the ﬁrmware and monitor the CPU activity
in real time from the host and detect strange or unusual behaviours.
From our previous study, we know that many interesting components of
the network card are directly accessible to the host, like registers and internal
memory. Everything is accessible in the MMIO region dedicated to interactions
between the network card and the driver.
Among the registers that are directly accessible from the host:
– the program counter indicates what is the next instruction which will be
fetched and executed by the embedded CPU,
– state registers indicate whether the embedded CPU is stalled or not (and if
so, why),
– control registers allow us to run the embedded CPU of the network adapter
step by step,
– breakpoint registers allow us to selectively enable debug conditions associ-
ated with addresses.
Access to internal memory is achieved by using a memory window (Fig. 2).
This mechanism provides direct access to the ﬁrmware running on the adapter:
reading an address in the card memory means writing the base address to the
relevant register and reading at the correct oﬀset in the MMIO address space.
5.3 Memory proﬁler
Identifying code and data area: The documentation and driver code show
that ﬁrmware ﬁles have three areas (text (code), data, and read-only data), but
the exact mappings into the card memory are not speciﬁed, so we ﬁrst need to
identify them.
Thanks to the low-level interface to the NIC, the following operations of the
embedded CPU are monitored:
– code execution: instructions executed by the CPU,
– CPU write operations: addresses written by the CPU (SB, SH, SW4),
– CPU read operations: addresses read by the CPU (LB/LBU, LH/LHU, LW5),
– other write operations : network packets written to the card memory by
DMA from host and by PHY from the wire.
4 store byte, halfword, word
5 load byte, byte upper, half word, half word upper, word .
Fig. 2: Memory window
By monitoring these events we can map the CPU activity. The mapping
will be highly adapter and ﬁrmware speciﬁc, but the same analysis could be
performed for other combinations.
We made a record of that activity during a somehow standard network ses-
sion: large HTTP download, SSH sessions and legitimate ASF traﬃc (i.e., session
open, a few ”query” commands for the system state and session close). The data
obtained is a good representation of the network controller activity since the host
sends and receives various traﬃc and the network controller receives, processes
and sends ASF packets, performs authentication and session management, and
communicates with the platform for collecting information about the system
state.
5.4 Memory map analysis
According to the memory map (Fig. 3), we know where the CPU reads and
writes data: ﬁrst in the structures used for replying to ASF traﬃc (the ring
control blocks, the transmit ring and the TXMBUF area, where packets are
stored before sending), then in the scratchpad (a generic writeable area, where
received packets are stored for handling), and ﬁnally the CPU stack and heap. We
also know where the CPU executes code (in a space taken from the RXMBUF
and scratchpad area where the ﬁrmware is stored), with a main area and a
secondary area just before the stack.
We also note that there are external writes to the CPU code area and writes
in areas noted as unmapped in the documentation. Other external writes include
Fig. 3: Memory map
network packets from and to the host, located in the RX and TX rings and network
packets to the adapter (ASF traﬃc), stored in the scratchpad.
Finally, it’s important to note that there is no way to enforce rodata and that
there is no segmentation/pagination mechanisms.
5.5 Implementation of the detection heuristics