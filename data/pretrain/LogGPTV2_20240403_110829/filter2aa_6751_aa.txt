# notepad
Web, 250 points
## Description
> This note-taking site seems a bit off.
The application sources were attached:
`app.py`:
```python
from werkzeug.urls import url_fix
from secrets import token_urlsafe
from flask import Flask, request, render_template, redirect, url_for
app = Flask(__name__)
@app.route("/")
def index():
    return render_template("index.html", error=request.args.get("error"))
@app.route("/new", methods=["POST"])
def create():
    content = request.form.get("content", "")
    if "_" in content or "/" in content:
        return redirect(url_for("index", error="bad_content"))
    if len(content) > 512:
        return redirect(url_for("index", error="long_content", len=len(content)))
    name = f"static/{url_fix(content[:128])}-{token_urlsafe(8)}.html"
    with open(name, "w") as f:
        f.write(content)
    return redirect(name)
```
`Dockerfile`:
```
FROM python:3.9.2-slim-buster
RUN pip install flask gunicorn --no-cache-dir
WORKDIR /app
COPY app.py flag.txt ./
COPY templates templates
RUN mkdir /app/static && \
    chmod -R 775 . && \
    chmod 1773 static templates/errors && \
    mv flag.txt flag-$(cat /proc/sys/kernel/random/uuid).txt
CMD ["gunicorn", "-w16", "-t5", "--graceful-timeout", "0", "-unobody", "-gnogroup", "-b0.0.0.0", "app:app"]
```
`templates/index.html`:
```html
{% if error is not none %}
    error: {{ error }}
  {% include "errors/" + error + ".html" ignore missing %}
{% endif %}
make a new note
```
`templates/errors/bad_content.html`:
```html
the note contained invalid characters
```
`templates/errors/long_content.html`:
```html
your note (length {{ request.args.get("len") }}) was larger than the maximum (512)
```
## Solution
We visit the website and get a note-taking application. After posting a note, the note contents get saved to a file on the server and we can visit it and view the note.
For example, if we post `test`, we are redirected to a URL such as `https://notepad.mars.picoctf.net/static/test-gDpEQjbSwSQ.html` which contains our note: `test`. The URL is composed of the first 128 characters of our note, concatenated to a hyphen and then a random string. The file is saved as an HTML file in the `static` folder.
Reviewing the code, we know that we can affect the address to which the note is written to, since we control the content:
```python
f"static/{url_fix(content[:128])}-{token_urlsafe(8)}.html"
```
For example, if we would enter a path that contains a slash into the first 128 characters of the note, we would be able to change the directory to which the file is written to. However, the application checks for this earlier:
```python
    if "_" in content or "/" in content:
        return redirect(url_for("index", error="bad_content"))
```
Notice though that `content[:128]` isn't used as-is for the path - it's first passed to `werkzeug.urls.url_fix`:
```python
def url_fix(s: str, charset: str = "utf-8") -> str:
    r"""Sometimes you get an URL by a user that just isn't a real URL because
    it contains unsafe characters like ' ' and so on. This function can fix
    some of the problems in a similar way browsers handle data entered by the
    user:
    >>> url_fix('http://de.wikipedia.org/wiki/Elf (Begriffskl\xe4rung)')
    'http://de.wikipedia.org/wiki/Elf%20(Begriffskl%C3%A4rung)'
    :param s: the string with the URL to fix.
    :param charset: The target charset for the URL if the url was given
        as a string.
    """
    # First step is to switch to text processing and to convert
    # backslashes (which are invalid in URLs anyways) to slashes.  This is
    # consistent with what Chrome does.
    s = _to_str(s, charset, "replace").replace("\\", "/")
    # For the specific case that we look like a malformed windows URL
    # we want to fix this up manually:
    if s.startswith("file://") and s[7:8].isalpha() and s[8:10] in (":/", "|/"):
        s = f"file:///{s[7:]}"
    url = url_parse(s)
    path = url_quote(url.path, charset, safe="/%+$!*'(),")
    qs = url_quote_plus(url.query, charset, safe=":&%=+$!*'(),")
    anchor = url_quote_plus(url.fragment, charset, safe=":&%=+$!*'(),")
    return url_unparse((url.scheme, url.encode_netloc(), path, qs, anchor))
```
Fortunately for us, the first step of the function is to switch to text processing and to convert backslashes (which are invalid in URLs anyways) to slashes. So, we can use this to bypass the slash check and write to a different directory.
Where should we write to? Well, one interesting place to write a file to is `templates/errors`. We can then use the following logic to include the file we've written to as part of a template, by harnessing:
```html
{% if error is not none %}
    error: {{ error }}
  {% include "errors/" + error + ".html" ignore missing %}