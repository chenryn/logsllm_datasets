was a restartable image that was taken before the guest
kernel mounted the virtual disk. We refer to the phase-
based reboot that is restoring this restartable image as pr-
naive. The other was a restartable image that was taken
when a log-in prompt appeared after the kernel and all the
daemons were ready. We simply refer to the phase-based
reboot that is restoring this restartable image as pr-opt. For
comparison, we also measured the downtime of a normal
boot and a normal reboot on the guest domain (guest boot
and guest reboot). To clarify how effective our optimization
described in Sec. IV-A was, we executed the phase-based
reboot without our snapshot optimization and measured its
downtime (pr without snapshot opt). We started measuring
when each operation was triggered, and stopped when all the
daemons registered in run level 3 were ready on the domain.
We measured the downtime of each reboot-based recovery,
varying the memory size of the guest domain.
We assumed a scenario of recovering from fail-stop
failures, and compared the guest boot to pr-opt, pr-naive,
and pr without snapshot opt. In this scenario, each reboot-
based recovery contains a fsck execution; the Linux kernel
conservatively runs fsck in the boot after the kernel is
shut down without partitions being unmounted. Next, we
assumed a scenario of recovering from gradually corrupting
failures such as memory leaks, and we compared the guest
reboot to pr-opt, pr-naive, and pr without snapshot opt. In
this scenario, none of the reboot-based recoveries need a
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:15:28 UTC from IEEE Xplore.  Restrictions apply. 
175fsck execution because we assume the situation where the
virtual disk is correctly unmounted.
Tables I and II list the average downtime of each reboot-
based recovery. Table I indicates that the downtime of the
phase-based reboot was shorter than that of the guest boot
in many cases. In pr-opt, the downtime was 75.0% to 86.2%
shorter than the guest boot, while the downtime of pr-naive
was 34.3% to 60.6% shorter than that of the guest boot. In
pr without snapshot opt, its downtime is shorter than the
guest boot when the domain memory size was smaller than
2 GB.
Table II lists similar results to Table I, where the downtime
of the phase-based reboot was shorter than that of the guest
reboot in many cases. In pr-opt, the downtime was 86.1%
to 93.6% shorter than the guest reboot. The downtime of
pr-naive was 60.1% to 77.6% shorter than that of the guest
reboot.
To analyze the downtime caused by the phase-based
reboot, we show the breakdown of the downtime of pr
without snapshot opt, pr-naive and pr-opt in Fig. 4. Fig. 4 (a)
and (b) reveal that our snapshot optimization signiﬁcantly
contributed to shortening the downtime of reboot-based
recovery. In pr without snapshot opt, the restore time was
much longer than the other conﬁgurations, pr-naive and pr-
opt. In particular, the restore time was about 37 and 66
seconds when the memory size of the domain was 2 and
4 GB respectively. This is because Xen’s snapshot function
saves and restores all the memory pages assigned to the guest
domain even if the pages are not used by the kernel and user
processes. The restore time in the other conﬁguration was
at most 5.8 seconds.
In addition, our snapshot optimization successfully shrank
the restartable images. For example, when a VM was
assigned 1024 MB of memory,
the optimized snapshot
function saved only 99 MB as a restartable image, but
Xen’s snapshot function saved 1050 MB. As described in
Sec. IV-A, since we can prepare RAM disks or solid-state
drives where these memory checkpoints are placed, we can
shorten the downtime of the phase-based reboot.
The ﬁgure also shows that omitting the kernel and daemon
boot phase is effective to shorten the downtime of reboot-
based recovery (Fig. 4 (b) and (c)). In pr-naive, booting
the kernel and daemons is the main part of its downtime
since the impact of the restore operation and ballooning is
relatively smaller. Phase-based reboot in pr-opt effectively
shortens its downtime by omitting the launch phase. In fact,
the downtime of pr-opt was 61.9% to 67.2% shorter than
that of pr-naive, as exhibited in Table I.
B. Finding Restartable Images
To determine which restartable candidate is a restartable
image under a complicated workload, we check which
restartable candidate can be a restartable image after running
a benchmark that models a real web site. We used RUBiS [6]
AVERAGE DOWNTIME OF GUEST BOOT, PR WITHOUT SNAPSHOT OPT
WITH FSCK, PHASE-BASED REBOOT WITH FSCK
Table I
Memory
size [MB]
64
128
256
512
1024
2048
4096
Guest
boot [sec]
18.96
18.50
18.39
18.45
18.85
19.00
19.29
pr w/o opt.
w/ fsck [sec]
3.23
3.96
5.82
10.29
18.46
38.09
67.05
pr-opt
w/ fsck [sec]
2.62
2.68
2.59
2.77
2.90
3.38
4.83
pr-naive
w/ fsck [sec]
7.47
7.81
7.90
7.69
8.47
9.49
12.67
AVERAGE DOWNTIME OF GUEST REBOOT, PR WITHOUT SNAPSHOT OPT,
PHASE-BASED REBOOT, PR-NAIVE
Table II
Memory
size [MB]
64
128
256
512
1024
2048
4096
Guest
reboot [sec]
29.01
28.58
28.27
28.42
28.83
28.92
29.38
pr w/o opt.
w/o fsck [sec]
2.42
3.18
5.01
9.57
17.65
37.17
66.15
pr-opt w/o
fsck [sec]
1.87
1.93
1.84
2.02
2.15
2.63
4.08
pr-naive w/o
fsck [sec]
6.51
6.87
6.98
6.78
7.57
8.56
11.72
on the Java EE platform, which is a three-tailored auction
site prototype modeled after eBay.com [7]. We prepared
additional physical machines for this experiment. The spec-
iﬁcations of these machines were the same as the machine
described previously. These machines were connected via
Gigabit Ethernet. We ran the RUBiS client emulator on one
machine while Xen 3.4.1 was running on another machine.
The Xen machine was used as a server where three guest
domains were running, a web server domain (FrontVM),
application server domain (AppVM), and database server
domain (DBVM). Apache 2.2.9, Tomcat 5.5.28, and MySQL
5.0.45 were running on FrontVM, AppVM, and DBVM,
respectively. We emulated 500 clients and checked whether
or not all the restartable candidates were restartable images.
Our check was carried out
two ways. One is that we
conducted the phase-based reboot when the emulation had
ﬁnished. The other is that we conducted the phase-based
reboot while the client emulator was running. We assigned
1.7 GB of memory to each guest domain. This memory size
comes from the small VM conﬁguration in Amazon Elastic
Compute Cloud [8].
We prepared restartable candidates in the following way,
which is shown in Figure 5. We took a snapshot before
mounting the virtual disk (Point A), when the kernel boot
was completed (Point B), when all the conﬁgured daemons
were launched (Point C), when a log-in prompt was dis-
played (Point D), and after Apache, Tomcat, and MySQL
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 07:15:28 UTC from IEEE Xplore.  Restrictions apply. 
176]
c
e
s
[
e
m
i
t
n
o
i
t
u
c
e
x
E
 70
 60
 50
 40
 30
 20
 10
 0
update kernel objects
restore
sync
64
128
512
256
Memory size [MB]
1024 2048 4096
]
c
e
s
[
e
m
i
t
n
o
i
t
u
c
e
x
E
 5
 4
 3
 2
 1
 0
update kernel objects
ballooning
restore
sync
64
128
512
256
Memory size [MB]
1024 2048 4092
]
c
e
s
[
e
m
i
t
n
o
i
t
u
c
e
x
E
 14
 12
 10
 8
 6
 4
 2
 0
kernel & daemon boot
restore
sync
64
128
512
256
Memory size [MB]
1024 2048 4096
(a) pr without snapshot opt
(b) pr-opt
(c) pr-naive
Figure 4. Breakdown of pr without snapshot opt, pr-opt, and pr-naive downtime.
: Restartable point
After completing
kernel boot
After log-in prompt
appeared
Before mounting
a virtual disk
Before each daemon
has been launched
After launching Apache,
Tomcat, and MySQL
Start booting
Point A
Point B
Point C
Point D
Point E
time
Figure 5. Restartable points in the second experiment.
were launched on each VM (Point E).
The results are exhibited in Tables III and IV. Table III
indicates which restartable candidate is restartable or not
when the emulation has ﬁnished. In this situation,
the
phase-based reboot does not issue warnings in FrontVM
and AppVM. This means that we can use Point E to
restart the VMs. On the other hand, the phase-based reboot
judges that Point E is not restartable since some ﬁles have
been updated. Speciﬁcally, /var/log/mysqld.log and
/var/lib/mysql/ib_logfile were opened without
O_APPEND and were updated during the RUBiS operation.
/var/log/mysqld.log is used for MySQL to log its
execution state. /var/lib/mysql/ib_logfile is a
log ﬁle where MySQL records transactions states.
Table
candidate
IV indicates which restartable
the same warnings as when we conduct
is
the phase-based
restartable or not when we conduct
running. DBVM
reboot while the client emulator
is
the
is sent
phase-based reboot after
is com-
pleted. The phase-based reboot sometimes judges that
Point E is not restartable in FrontVM and AppVM since
/etc/httpd/logs/error_log has been updated.
When the workload of RUBiS is interrupted, Apache logs the
error condition into /etc/httpd/logs/error_log.
We cannot restart candidates at Point E because this ﬁle
is opened by Apache without O_APPEND.
the client emulator
We found that some logs were updated frequently. For