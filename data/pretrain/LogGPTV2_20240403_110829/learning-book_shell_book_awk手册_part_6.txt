break指令用以强迫中断（跳离）for,while,do-while等循环.
范例：
while(getline 0)
if( $1 == 0 )
break
el se
print $2 / $1
上例中，awk不断地从文件datafile中读取资料，当s1等于o时，就停止该执行循环
·continue指令
循环中的statement进行到一半时，执行continue指令来略过循环中尚未执行的statement
范例：
for(index in X_array)
if( index !~/[09]+/)continue
print "There is a digital index", index
上例中若index不为数字则执行continue，故将略过（不执行）其后的指令
需留心continue与break的差异：执行continue只是掠过其后未执行的statement,但并未
跳离开该循环，
·next指令
执行next指令时，awk将掠过位于该指令（next）之后的所有指令（包括其后的所有Pattem
Actions），接著读取下一笔数据行，继续从第一个Pattern{Actions}执行起
---
## Page 34
范例：
/{\t]*S/(print "This is a blank line! Do nothing here !"
next
$2 ↓= 0 ( print $1, $1/$2 )
上例中，当awk读入的数据行为空白行时（match/^[]*S/），除打印消息外只执行next,故
awk将略过其后的指令，继续读取下一笔资料，从头（第一个Patterm{Actions）执行起
·exit指令
执行exit指令时，awk将立刻跳离（停止执行）该awk程序
>awk中的1/o指令
·printf指令
该指令与C语言中的用法相同，可借由该指令控制资料输出时的格式
语法：
printf("format", item1, item2... )
范例：
id = “BE2647";  ave = 89
printf("ID# : %s Ave Score : %dn", id, ave)
(a)结果印出：
ID# : BE2647Ave Score : 89
(b)fommat部分是由一般的字串(StringConstant)及格式控制字符(Formatcontrol letter,其前会
%%%
式控制字符
（c）打印时，一般字串将被原封不动地打印出来.遇到格式控制字符时，则依序把format后方
之item转换成所指定的格式后进行打印.
(d有关的细节，读者可从介绍C语言的书籍上得到较完整的介绍
(e)print及printf两个指令，其后可使用>或>>将输出到stdout的数据重定向到其它文件，
7.1节中有完整的
·print指令
范例：
id = “BE267"; ave = 89
(a)结果印出：
ID# : BE267 Ave Score :89
(b)print之后可接上字串常数（ConstantString)或变量.它们彼此间可用""隔开
---
## Page 35
附录D内建变量OFS）隔开.OFS之值一般内定为"一个空格"
（d)上式中，字串"AveScore：”与变量ave之间并未以""隔开，awk会将这两者先当成字串
concate在一起（变成"AveScore：89"）后，再予打印
·getline指令
语法
语法
由何处读取数据
数据读入后置于
getline var "data.rpt"指令来输出一行拾头.它使用I/O
Redirection（>）将数据转输出到data.rpt,故此时文件data.rpt是处于Open状态
(b)指令print $1,$2*$3不停的将输出的资料送往pipe(l),awk在程序将结束时才会呼叫
shell使用指令"sort-k1>data.rpt"来处理pipe中的数据；并未立即执行，这点与Unix中
pipe的用法不尽相同.
（c)最后希望于文件data.rpt的末尾处加上一行"There are..".但此时，Shell尚未执行“sort-k
1>data.rpr"故各数据行排序后的ID及Salary等数据尚未写入data.rpt.所以得命令awk提
前先通知Shell执行命令"sort-k1>data.rpt"来处理pipe中的资料.awk中这个动作称为
close pipe.是由执行close（"shell command"）来完成.需留心close(）指令中的shellcommand
需与平后方的shellcommand完全相同（一字不差），较佳的方法是先以该字串定义一个简短
的变量，程序中再以此变量代替该shellcommand
(d)为什么执行close("data.rpt")？因为sort完后的资料也将写到data.rpt,而该文件正为awk
所打开使用（write)中，故awk程式中应先关闭data.rpt.以免造成因二个processes同时打开一
个文件进行输出（write）所产生的错误
---
## Page 36
·system指令
该指令用以执行Shell上的command
范例：
DataFile = "invent,rpt'
system(*rm * DataFile )
说明：
（a)system（字符串"指令接受一个字符串当成Shell的命令.上例中，使用一个字串常数"rm"
连接(concate）一个变量DataFile形成要求Shell执行的命令.Shell实际执行的命令为"rm
invent.rpt".
·""pipe指令
"配合awk输出指令，可把output到stdout的资料继续转送给Shell上的某一命令当成
input的资料.
"配合awkgetline指令，可呼叫Shell执行某一命令，再以awk的getline指令将该命令的
所产生的资料读进awk程序中
范例：
{print $1.$2*$3 |"sort-k 1>result"}
“date"|getline Date_data
读者请参考7.2节，其中有完整的范例说明
>awk释放所占用的记亿体的指令
awk程式中常使用数组（Array）来记忆大量数据，delete指令便是用来释放数组中的元素所占
用的内存空间
范例：
for( any in X_arr )
delete X_arr[any]
读者请留心，delete指令一次只能释放数组中的一个元素，
awk中的数学运算符（ArithmeticOperators）
+(加)，-（减)，*(乘）(除)，%(求余数)，^(指数)与C语言中用法相同
>awk中的赋值运算符（AssignmentOperators）
=, +=, -=, *= , /=, %=, ^=
x+=5的意思为x=x+5,其余类推
---
## Page 37
awk中的条件运算符（ConditionalOperator)
语法：
判断条件？valuel：value2
若判断条件成立(true)则返回valuel,否则返回value2.
awk中的逻辑运算符（LogicalOperators)
&&( and ),II(or), !(not)
Extended RegularExpression中使用“表示or请勿混淆
awk中的关系运算符（RelationalOperators)
>,>=,，>=(一).字串函数
·index（原字串，找寻的子字串）：
若原字串中含有欲找寻的子字串，则返回该子字串在原字串中第一次出现的位置，若未曾出
现该子字串则返回0
例如执行：
$ awk *BEGIN{ print index("8-1294","") )*
结果印出
2
·length（字串）：返回该字串的长度.
例如执行：
(.(r s d ) n, ya s
结果印出
4
·match（原字串，用以找寻比对的正则表达式）：
awk会在原字串中找寻合乎正则表达式的子字串.若合乎条件的子字串有多个，则以原字串
中最左方的子字串为准
awk找到该字串后会依此字串为依据进行下列动作：
设定awk内建变量RSTART,RLENGTH：
RSTART=合条件的子字串在原字串中的位置
■0；若未找到合条件的子字串
RLENGTH=合条件的子字串长度
--1；若未找到合条件的子字串.
返回RSTART之值
例如执行：
awk * BEGIN (
match(“banana", /(an)+/ )
print RSTART, RLENGTH
执行结果输出
2 4
---
## Page 39
·split（原字串，数组名称，分隔字符）：
awk将依所指定的分隔字符（fieldseparator)来分隔原字串成一个个的栏位（field),并以指定的
数组记录各个被分隔的栏位
例如：
ArgLst = “5P12p89"
split( ArgLst, Arr, /[Pp]/)
执行后：Arr[1]=5, Arr[2]=12, Arr[3]=89
·sprintf(格式字符串，项1,项2,…)
该函数的用法与awk或C的输出函数printfO相同.所不同的是sprintf0会将要求印出的结果
当成一个字串返回.一般最常使用sprintf0来改变资料格式.如：x为一数值资料，若欲将其变
成一个含二位小数的资料，可执行如下指令：
x = 28
x = sprintf(*%,2f",x)
执行后x="28.00"
·sub（比对用的正则表达式，将替换的新字串，原字串）
sub（）将原字串中第一个（最左边）合乎所指定的正则表达式的子字串改以新字串取代
第二个参数"将替换的新字串"中可用"&"来代表"合于条件的子字串"
承上例，执行下列指令：
A = *a6b12anan212, 45an6a*
sub(/(an)+[09]*/. “[&]*, A)
print A
结果输出
ab12[anan212] , 45an6a
subO不仅可执行替换（replacement)的功用，当第二个参数为空字串（""）时，subO所执行的是"去
除指定字串"的功用
通过subO与matchO的搭配使用，可逐次取出原字串中合乎指定条件的所有子字串，
例如执行下列程式：
awk
BEGIN{
data = “p12-P34 P56-p61"
while( match( data ,/[09]+/) > 0)(
print substr(data, RSTART, RLENGTH )
sub(/[09]+/ ,"",data)
结果输出：
12
34
56
---
## Page 40
61
sub（）中第三个参数（原字串）若未指定，则其预设值为S0.
可用sub（/[9-0]+/,"digital"）表示sub（/[0-9]+/,digital",$0)
·gsub（比对用的正则表达式，将替换的新字串，原字串）
这个函数与sub0一样，同样是进行字串取代的函数.唯一不同点是
gsub0会取代所有合条件的子字串.
gsub0会返回被取代的子字串个数
请参考subO
·substr（字串，起始位置I，长度1）：
返回从起始位置起，指定长度的子字串.若未指定长度，则返回起始位置到字串末尾的子字串
执行下例
$ awk ‘BEGIN (print substr(“User:Wei-Lin Liu", 6))*
结果印出
WeiLin Liu
>(二).数学函数
·int(x)：返回x的整数部分（去掉小数）.
例如：
int(7.8)将返回7
int(-7.8)将返回-7
·sqrt(x)：返回x的平方根.
例如：
sqrt(9)将返回3
若x为负数，则执行sqrt(x)时将造成RunTimeError[译者注：我这里没有发生错误，返回的
是"nan"]
·exp(x)：将返回e的x次方.
例如：
exp(1)将返回 2.71828
·log(x)：将返回x以e为底的对数值.
例如：
log(exp(1)）将返回1
若x<0，则执行sqrt(x）时将造成RunTimeError.[译者注：我这里也没有发生错误，返回的