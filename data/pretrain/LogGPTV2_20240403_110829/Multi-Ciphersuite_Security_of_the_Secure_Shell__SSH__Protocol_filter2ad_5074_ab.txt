authenticated) signed-Diﬃe–Hellman TLS ciphersuites were secure authenticated and conﬁdential
channel establishment (ACCE) protocols under reasonable assumptions on the cryptographic
building blocks. ACCE essentially combines AKE and authenticated encryption notions to
obtain a single notion in which parties establish a channel that provides conﬁdentiality and
integrity of ciphertexts. Subsequently, ciphersuites based on RSA key transport and static Diﬃe–
Hellman, with mutual and server-only authentication, have been shown ACCE secure by both
Kohlar et al. [24] and Krawczyk et al. [26]. The ACCE notion was extended by Giesen et al. [17]
to cover renegotiation, in which parties can establish a new ciphersuite or change authentication
credentials in an existing connection. Alternative approaches for proving the full security of
TLS include a composability approach [10] and formal veriﬁcation of security properties of an
implementation [8], but ACCE seems the dominant approach at present, and thus our choice for
analyzing SSH.
Multi-protocol security. As noted above, both SSH and TLS support the negotiation of
diﬀerent combinations of cryptographic algorithms—ciphersuites—for both the handshake phase
and the auth-enc channel. SSH’s possible negotiated algorithms are noted in Section 4, and TLS
supports more than 300 diﬀerent combinations of algorithms. A note on terminology: we will
talk about SSH or TLS as a single “protocol” consisting of diﬀerent “ciphersuites”; hence we are
interested in “multi-ciphersuite” security.
The previous works on ACCE security of TLS all focus on ciphersuites running in isolation:
in a cryptographic sense, each ciphersuite is a diﬀerent “protocol”. Most ciphersuites of TLS have
been proven secure, but only in a world where they have no interaction with other ciphersuites.
In practice, servers and clients often share a single long-term key across multiple ciphersuites:
For example, in SSH, the server may have a single 2048-bit RSA signing key that it uses with
4
various key exchange and authenticated encryption mechanisms.
As ﬁrst identiﬁed by Kelsey et al. [23], re-use or sharing of keys across multiple primitives
or protocols can potentially be insecure; this is variously called a chosen protocol attack, cross-
protocol attack, or multi-protocol attack. Very early work on SSL by Wagner and Schneier [35]
identiﬁed a theoretical cross-ciphersuite attack on TLS: in ciphersuites with signed key exchange,
the data structure that is signed (ServerKeyExchange) does not contain an identiﬁer of its
type, so it is theoretically possible that a data structure signed for one key exchange method
could be interpreted as valid in another key exchange method. While Wagner and Schneier were
not able to translate this into a concrete attack, Mavrogiannopoulos et al. [28] were able to
make use of this observation to interpret a set of ECDH parameters as valid DH parameters.
Cross-protocols attacks have been studied in a variety of contexts for protocols in the literature
[2, 34, 14] and in practice [21]; notably, Cremers [14] studied 30 AKE protocols from the literature
and found cross-protocol attacks on 23 of them. In these lines of work, attacks arose from a
common fundamental principle: messages signed or decrypted using long-term keys did not have
suﬃciently diﬀerent structure to prevent misuse in other protocols.
There have been several works considering the joint security of protocols with shared or
re-used keys, sometimes called key agility.3 In their original paper on chosen protocol attacks,
Kelsey et al. [23] state ﬁve design principles that aim to render chosen protocol attacks impossible;
Canetti et al. [13] similarly discuss requirements for security in multi-protocol environments.
Thayer-Fabrega et al. [33] proposed the use of strand spaces, a type of formal logic for protocol
execution, to identify under which conditions a protocol could be composed with other protocols
(re-using the same long-term public key) without compromising security; enhancements to this
approach have followed [18, 5]. Datta et al. [15] and Andova et al. [4] both give an alternative
protocol composition logic. A common characteristic to these approaches is deﬁning some form of
independence of protocols, and then using a composition theorem where protocols that are secure
in isolation and which are independent remain secure when used together, even with re-used
long-term keys. Bhargavan et al. [9] analyze TLS in a multi-ciphersuite setting, constructing a
generic protocol where some—but not all—algorithms can be combined while sharing long-term
keys.
Contributions. Our main contribution is a provable security analysis of the SSH protocol. In
particular, we show the various signed-Diﬃe–Hellman ciphersuites of SSH are ACCE secure in
isolation, under reasonable assumptions on the underlying cryptographic primitive. We also show,
using a newly created framework for analyzing the security of multi-ciphersuite protocols, that
SSH is secure even when these ciphersuites share the same long-term key. Our multi-ciphersuite
ACCE framework can be applied to analyze the security of other ACCE protocols.
1. Provable security of signed-Diﬃe–Hellman SSH ciphersuites in isolation. We provide the
ﬁrst proof that SSH is ACCE-secure. In particular, we show that the signed-Diﬃe–Hellman
ciphersuites in SSH are ACCE-secure, under reasonable assumptions on the cryptographic
primitives used. (Although RSA-key-transport-based ciphersuites have been standardized for
SSH [19], OpenSSH, the most prominent implementation of SSH, does not support them as of
this writing4, so we omit them.) We give results for both server-only and mutually authenticated
variants.
For mutual authentication, we only provide a formal treatment of client authentication using
public keys. While SSH does support client authentication using passwords [37, §8], this is a
non-cryptographic form of password authentication: after establishing a server-to-client auth-enc
channel, the client simply sends her username and password directly over the auth-enc channel.
Thus, having analyzed the server-only variant, there is no value in further analyzing the case of
3Contrast this with the universal composability (UC) framework [11], where secure AKE protocols [12] can be
composed with other protocols but long-term keys are in general not re-used across functionalities.
4http://www.openbsd.org/cgi-bin/cvsweb/src/usr.bin/ssh/kex.h?rev=1.64
5
password authentication. Note as well that SSH allows multiple connections to be multiplexed
in a single encrypted tunnel [38], but from a cryptographic perspective this is all just application
data.
As alluded to earlier, in proving security of a real world protocol such as SSH one encounters
various problems that do not occur with simpler, academic protocols. These problems are
detailed in Section 5.1. We had to solve proof problems with encrypted handshake messages, the
fact that the secret Diﬃe-Hellman key is input to a hash function, and an abbreviated handshake
mode. As the SSH Binary Packet Protocol in counter mode is a buﬀered stateful authenticated
encryption scheme (see Paterson and Watson [31]), we bypass any potential problems with
padding or encryption.
2. Framework for analyzing multi-ciphersuite protocols. We begin by adapting Jager et al.’s
authenticated and conﬁdential channel establishment (ACCE) deﬁnition [20]: we deﬁne a
multi-ciphersuite ACCE protocol: a short negotiation phase is used to agree on one of several
ciphersuites, which is then used in the subsequent handshake phase and auth-enc channel. We
next deﬁne what it means for a multi-ciphersuite ACCE protocol to be secure: it should be hard
to break authentication or channel security in any ciphersuite.
We then develop in Section 6 a generic approach for proving multi-ciphersuite security from
single ciphersuite security. It will not be possible to prove in general that, if individual ciphersuites
are ACCE-secure in isolation, then the collection is multi-ciphersuite-secure even when long-term
keys are re-used across ciphersuites: the aforementioned attack by Mavrogiannopoulos et al. [28]
on the signed-DH and signed-ECDH ciphersuites in TLS serves as a counterexample to such a
theorem, so we need some additional alteration to the standard ACCE deﬁnition.
Moreover, when long-term keys are shared, there are challenges in the standard simulation
approach to proof. For example, consider the case of two diﬀerent ciphersuites that use the same
long-term keys for authentication. A standard simulation approach to proving multi-ciphersuite
security would be to assume one ciphersuite is secure in isolation, then simulate the other
ciphersuite. However, if long-term keys are shared between the two ciphersuites, then it is in
general not possible to simulate the long-term private key operations in the second, simulated
ciphersuite, because those keys are internal to the ﬁrst ciphersuite.
These are the main problems our technical approach must solve. We achieve a composition
theorem as follows:
1. Deﬁne a variant of ACCE in which the adversary has access to an auxiliary oracle that
does operations using the long-term secret key, as long as queries to that oracle do not
violate a certain condition.
2. Suppose for each ciphersuite SPi there exists an auxiliary algorithm Auxi(sk,·) and
condition Φi such that:
(a) SPi is secure even if an adversary makes queries to Auxi(sk,·), provided the queries
do not violate Φi (i.e., in the sense of item 1 above); and
(b) if SPj shares long-term keys with SPi, then SPj can be simulated using Auxi without
violating Φi.
3. Then the collection of ciphersuites is secure, even when long-term keys are re-used across
ciphersuites.
Item 1 can be viewed as “opening up” the ACCE deﬁnition a little bit, providing access to
the secret key to do operations that “don’t aﬀect security”. With carefully chosen auxiliary
algorithms and conditions, items 2(a) and 2(b) work together to bypass the aforementioned
challenge in proving a composition theorem using a simulation argument. Our approach seems
to provide substantial compositional power without making proofs much harder in practice.
Our multi-ciphersuite ACCE approach contrasts with the key agility methodology of Bhar-
gavan et al. [9] for analyzing TLS. As noted above, TLS is not multi-ciphersuite secure in
general due to the cross-ciphersuite attack [28], so Bhargavan et al. develop a more “ﬁne-grained”
approach to key agility in TLS: they explicitly model TLS as a protocol with multiple signature,
6
KEM, and PRF algorithms, and then prove the joint security of key-agile TLS under reasonable
assumptions on the individual building blocks. Our approach is more “coarse-grained”: we
can compose several whole ACCE-secure ciphersuites in a nearly black-box manner, and the
ciphersuites to be composed need not be as “cleanly” related to each other as in Bhargavan et al..
In fact, one could conceivably prove that key re-use in entirely unrelated protocols (e.g., the
same signing key in SSH and (a revised form of) TLS) is secure using our framework.
3. Multi-ciphersuite security of SSH. Our composition framework can be readily applied
to signed-Diﬃe–Hellman ciphersuites in SSH, yielding multi-ciphersuite security even when
long-term signing keys are re-used across ciphersuites. To do so, we describe how to instantiate
the auxiliary oracle Auxi and predicate Φi in a way that maintains security in condition 2(a)
above, yet still allows cross-protocol simulation as per condition 2(b) above. The composition
theorem then immediately yields multi-ciphersuite security.
2 Preliminaries
In this section, we deﬁne notation used in the paper and review the cryptographic assumptions
used in the proofs.
Notation. Diﬀerent typefaces are used to represent diﬀerent types of objects: Algorithms
(also A and B); Queries; Protocols; variables; security-notions; constants; vector notation (cid:126)x is
used for ordered lists. We use ∅ to denote the empty string, and [n] = [1, n] = {1, . . . , n} ⊂ N for
the set of integers between 1 and n. If A is a set, then a $← A denotes that a is drawn uniformly
at random from A. If A is a probabilistic algorithm, then x $← A(y) denotes the output x of A
when run on input y and randomly chosen coins.
2.1 Decisional Diﬃe–Hellman
Let G be a group of prime order q and g be a generator of G. The advantage of an algorithm A
in solving the decisional Diﬃe–Hellman (DDH) problem for (g, q) is Advddh
g,q (A), deﬁned as
(cid:12)(cid:12)(cid:12)Pr
(cid:16)A(g, ga, gb, gab) = 1
(cid:17) − Pr
(cid:16)A(g, ga, gb, gc) = 1
(cid:17)(cid:12)(cid:12)(cid:12)
,
where a, b, c $← Zq.
2.2 Digital signature schemes
A digital signature scheme is a triple SIG = (KeyGen, Sign, Vfy), consisting of the key generation
algorithm KeyGen() $→ (pk, sk), the signing algorithm Sign(sk, m) $→ σ, and the veriﬁcation
algorithm Vfy(pk, σ, m) $→ {1, 0}.
security game that is played between a challenger C and an adversary A.
Strong existential unforgeability under chosen message attacks is formalized in the following
1. The challenger generates a key pair (sk, pk) $← KeyGen() and the public key pk is given
to the adversary.
2. The adversary may adaptively obtain signatures σi on message mi of its choosing.
3. The adversary outputs a message/signature pair (m, σ).
4. The adversary wins if Vfy(pk, m, σ) = 1 and (m, σ) (cid:54)= (mi, σi) for all i.
The advantage of A in breaking the strong existential unforgeability under chosen message attack
of SIG is Advsuf-cma
(A), deﬁned as the probability that A wins in the above experiment.
SIG
7
Encrypt(m0, m1):
1. u ← u + 1
e) $← Enc(k, m0, st0
2. (C(0), st0
e)
e) $← Enc(k, m1, st1
3. (C(1), st1
e)
4. if C(0) = ⊥ or C(1) = ⊥ then
return ⊥
6. C[u] ← C(b)
7. return C(b)
5.
Decrypt(C):
1. v ← v + 1
2. (m, std) ← Dec(k, C, std)
3. if m = ⊥p then return ⊥
4. if b = 0 then return ⊥
5. if v > u or C (cid:54)= C[v] then
phase ← 1
6.
7. if phase = 1 then return m
8. return ⊥
Figure 2: Encrypt and Decrypt oracles in the buﬀered stateful authenticated encryption security
experiment. The values u, v and phase are all initialized to 0 at the beginning of the security
game. The Decrypt query accounts for buﬀering in the third line.
2.3 Buﬀered stateful authenticated encryption
Paterson et al. [31] introduced buﬀered stateful authenticated encryption (BSAE) for ap-
propriately modeling the security of the SSH auth-enc channel. A similar notion (stateful
length-hiding authenticated encryption (sLHAE)) is used to model the auth-enc channel in
TLS [30, 20]. These notions encompass both conﬁdentiality (indistinguishability under chosen
ciphertext attack) and stateful ciphertext integrity. The main diﬀerence of BSAE to previous
deﬁnitions for authenticated encryption schemes is that the decryption oracle buﬀers partial
ciphertexts until a complete ciphertext block is received, before answering a decryption query.
A BSAE scheme is a pair of algorithms StE = (Enc, Dec) described in Figure 2; our
presentation adapts the chosen ciphertext security and integrity notions for buﬀered stateful
authenticated encryption given by Paterson and Watson [31] to the combined setting used in
the ACCE experiment of Jager et al. [20].
• The encryption algorithm Enc(k, C, ste) $→ (m, st(cid:48)
e), takes as input a symmetric secret
key k ∈ {0, 1}κ, a plaintext m ∈ {0, 1}∗, and an encryption state ste, outputs either a
ciphertext c ∈ {0, 1}(cid:96) or an error ⊥, and an updated encryption state st(cid:48)
e.
• The decryption algorithm Dec(k, c, std) → m(cid:48) processes secret key k, ciphertext c, and
decryption state std. It returns the new decryption state std (possibly containing yet
unprocessed ciphertext chunks) and a value m(cid:48) which is either the message encrypted in c,
a pending state symbol ⊥p to signal that it has not received enough ciphertext bytes to
decrypt, or a distinguished error symbol ⊥e indicating that c is not a valid ciphertext.
Security of a BSAE is deﬁned via the following security game played between a challenger C and
adversary A.
1. The challenger picks b $← {0, 1} and k $← {0, 1}κ.
2. The adversary may adaptively query the encryption oracle Encrypt and decryption oracle
3. The adversary outputs a guess b(cid:48) ∈ {0, 1}.
The advantage of A in breaking the BSAE scheme StE is Advbsae
Decrypt which respond as shown in Figure 2.
StE (A) = |Pr(b = b(cid:48)) − 1/2|.
2.4 Pseudo-random functions
Our deﬁnition of a pseudorandom function and a stateful length-hiding authenticated encryption
scheme follows that of [26, full version, p. 43–45].
A pseudorandom function F with key space K and input space {0, 1}∗ is a deterministic
algorithm. On input a key k ∈ K and an input string x ∈ {0, 1}∗, the algorithm outputs a value
F (k, x) ∈ {0, 1}µ.
Security is formulated via the following security game that is played between a challenger C
and a stateful adversary A.
8
1. The challenger samples k $← K uniformly random and b $← {0, 1}.
2. The adversary may adaptively query the challenger; for each query value x, the challenger
replies with F (k, x).
3. The adversary outputs a value y that was not a query to the challenger.
4. If b = 0, the challenger computes z ← F (k, y). If b = 1, the challenger samples z $← {0, 1}µ.
5. The adversary receives z and may continue to adaptively query the challenger on any value
6. The adversary outputs a guess b(cid:48) ∈ {0, 1}.
The advantage of A in breaking the PRF F is Advprf
F (A) = |Pr(b = b(cid:48)) − 1/2|.
y.
2.5 Collision-resistant hash functions
An unkeyed hash function H : {0, 1}∗ → {0, 1}µ is a deterministic algorithm. The advantage of