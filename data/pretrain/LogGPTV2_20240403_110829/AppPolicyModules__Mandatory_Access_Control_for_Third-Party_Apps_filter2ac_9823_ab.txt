tions, that provide root access to the user by default. Here,
the user is aware of the fact that some apps act as root in
the system and have access to everything, however she does
not know how these privileges are used and she has to trust
the app.
On the other hand, a malware could exploit a bug in a sys-
tem component and gain root privileges to freely access the
whole system in order to steal personal information or per-
form fraudulent actions. In this scenario the user is unaware
of the fact that an app acts as root. Over the years An-
droid has been attacked by threatening malware apps such
as DroidDreamLight, which aﬀected 30,000-120,000 users in
May 2011 [3]. Recently the app towelroot has been released
which, exploiting the CVE-2014-3153 bug of Linux kernel,
permits to “root the device” without the need to ﬂash a re-
covery console, and gives root privileges potentially to all
apps. This bug aﬀects all Android versions up to 4.4.4 and
thus represents a signiﬁcant threat in the current DAC-only
protection of private app resources.
Our proposal provides a solution to both scenarios through
the use of appPolicyModules deﬁned by the app and at-
tached to the SELinux system policy.
3.1 Example
Hereinafter, we deﬁne a running example that we use as a
proof of concept of our solution. Dolphin Browser [7] is con-
sidered one of the most successful mobile browsers for An-
droid1 with over 100 million downloads. It uses the Webkit
engine and provides several features such as gesture browsing
and browsing boost. We use it to show how the threat model
deﬁned in the previous section aﬀects the current DAC-only
security isolation of a real app and its private data. In Sec-
tion 5 we use this example to identify the requirements and
then we will illustrate how the use of a dedicated appPol-
icyModule can provide better security for its private data.
The Android permissions requested by the app are:
a n d r o i d . p e r m i s s i o n−group .NETWORK
a n d r o i d . p e r m i s s i o n−group .ACCOUNTS
a n d r o i d . p e r m i s s i o n−group .LOCATION
a n d r o i d . p e r m i s s i o n−group .MICROPHONE
a n d r o i d . p e r m i s s i o n−group .CAMERA
Many browsers include a password manager component
that stores conﬁdential information such as usernames and
passwords. The common strategy used by almost all the mo-
bile browsers we have analyzed is to keep the credentials in
a SQLite database. Following Google’s best practices for de-
veloping secure apps, the password database is saved in the
app data folder, which should be accessible only to the app
itself. Another best practice (not used by Dolphin browser)
to provide additional protection for sensitive data, is to en-
crypt local ﬁles using a key that is not directly accessible
to the application. For example, a key can be placed in a
KeyStore and protected with a user password that is not
stored on the device. While this does not protect data from
a root compromise that can monitor the user inputting the
password, it can provide protection for a lost device without
ﬁle system encryption.
Some of the browsers we have analyzed (e.g., Google Chrome)
store the passwords in plaintext in the database, while others
use some form of encryption (e.g., Dolphin Browser, Fire-
fox). The decision to keep the passwords in plaintext can
appear as a weakness, but even when the information is
stored in an encrypted form, if the data needs to be recov-
ered automatically by the app without the need of addi-
1At the time of writing Chrome is the most used mobile
browser for Android devices; however, due to the fact that
Chrome is included in the Gapps, it does not belong to the
untrusted app domain but to the isolated app domain, thus it
is not considered as a third-party app. The same discussion
and threat model presented for Dolphin Browser is also valid
for Google Chrome for Android. Moreover, all the passwords
that the user saved in the Desktop version of Google Chrome
using the same login details are available in the Android
database.
tional information not stored on the device (e.g., a master
password known only by the user), a malware could use the
same resources used by the legitimate application to retrieve
the information.
There are a number of ways one can obtain the Java code
back from the APK in order to study the app behavior, to
replicate it and to extract the encrypted information. To en-
crypt the passwords, Dolphin Browser used to adopt a static
key, which was obtainable by simply looking at the decom-
piled bytecode. Newer versions of the browser derive the key
from the android id of the device, generated during the ﬁrst
boot, whose use is encouraged by the Android Developers
community to generate device-speciﬁc passwords.
We were able to obtain the decrypted passwords from the
password.db decompiling the app and studying its behavior.
In the same way, a malware that managed to obtain root
privileges can access the database and decrypt all the user
credentials.
4. SELINUX POLICY MODEL
SELinux uses a closed policy model, denying every access
request that is not explicitly permitted. The SELinux policy
is deﬁned using rules, which produce a set of authorizations.
The SELinux model is quite rich and oﬀers a number of fea-
tures that increase its expressive power and ﬂexibility. For
instance, SELinux is able to manage a Multi-Level Security
model, with the representation of sensitivity labels and cate-
gories. These features are used in some systems that rely on
SELinux (e.g., Samsung Knox), but they are not currently
used in AOSP, which is our reference platform. We then pro-
pose a simpler model that allows us to better characterize
our approach.
The model uses names with an “av” preﬁx, like avType in-
stead of “type”, to provide a more precise deﬁnition. In the
remainder of the paper, we will sometimes used the simpler
terms (i.e., type instead of avType) when we see no ambi-
guity in their use. The “av” preﬁx stands for “access vector”
and is used in SELinux to characterize the rules deﬁning the
policy, called AV Rules. The basic elements of this model
are:
avType: represents an identiﬁer that can be used to de-
scribe both the subject and the target of an authoriza-
tion; an avType denotes a security domain or the pro-
ﬁle of a process or resource in the system; the avType
is used to build labels for processes and resources.
avClass: represents the kind of resource (e.g., ﬁle, process)
that will be the target of an authorization; an imple-
mentation of SELinux in a system will have to provide
in its setup a set of avClasses consistent with the va-
riety of resources that the system is able to manage.
avPermission: represents the possible actions a source can
apply on a target of a speciﬁc avClass, speciﬁed in the
setup of SELinux; every avClass cl has its own set
of avPermissions, represented by cl.permissions (e.g.,
ﬁle.permissions = {read, write, execute, . . .}).
In order to give a formal representation of the SELinux
policy, we introduce the concept of avAuthorization.
Definition 1. Given a set T of avTypes, a set C of av-
Classes, and a set P of avPermissions, an avAuthorization
a is a quadruple (cid:104) source, target, class, action (cid:105), where:
source ∈ T represents the process (the security principal of
the authorization);
target ∈ T is associated with the object that is accessed by
the source;
class ∈ C denotes the type of resource that is accessed in
the operation;
action ∈ {P∩class.permissions} is the speciﬁc avPermis-
sion, which has to be compatible with the avClass.
Each avAuthorization describes a speciﬁc request that is per-
mitted in the system.
Example 1. Consider an app whose process is associ-
ated with the avType myapp that wants to read a ﬁle both
in the internal and external sdcard. The required avAutho-
rizations are as follows: (cid:104) myapp, sdcard internal, ﬁle, read
(cid:105), (cid:104) myapp, sdcard external, ﬁle, read (cid:105).
Definition 2. An avAuthzPolicy is a set of avAutho-
rizations.
The avAuthzPolicy is derived from the speciﬁcation of a
collection of avRules. avRules can be positive or negative,
support the use of patterns for the speciﬁcation of sources
and targets, and may use avAttributes.
Definition 3. An avAttribute is an identiﬁer that can
be used in the construction of avRules. It can be used to sup-
port the deﬁnition of collections of avAuthorizations. The
collection of avAttribute identiﬁers in a system must be sep-
arate from the domain of avTypes.
Definition 4. Given a set T of avTypes, a set C of av-
Classes, a set A of avAttributes, and a set P of avPermis-
sions, an avRule is a quintuple (cid:104) ruleType, ruleSource,
ruleTarget, ruleClass, ruleAction (cid:105), where:
ruleType is either allow or neverallow;2
ruleSource is a pattern, structured in two parts: (a) a set
of positive elements pi ∈ T ∪ A, and (b) an optional
set of negative elements ni ∈ T ∪ A;
ruleTarget is a pattern, with the same structure as the
ruleSource;
ruleClass is a set of avClasses, i.e., each ci ∈ C, denoting
the types of resource that are considered by the avRule;
ruleAction is a set of avPermissions, where we assume
that each aj ∈ ∩ici.permissions, i.e., all the elements
have to be compatible with all the avClasses speciﬁed
in the avRule.
Each avRule can be represented in a textual form, list-
ing the ﬁve components following the order above. The tex-
tual notation for patterns keeps all the elements within curly
braces, preceding the set of negative elements with a “-” char-
acter; a colon separates the ruleTarget from the ruleClass.
Example 2. In order to group the common avAuthoriza-
tions granted to myapp it is possible to create the avAt-
tribute sdcard and assign it to the sdcard internal and sd-
card external (through the use of typeattribute, deﬁned be-
low). Then, the avAuthorizations deﬁned in Example 1 can
2SELinux also supports the auditallow and dontaudit rules,
which describe the conﬁguration of the auditing services.
The model we describe can be easily extended to manage
these services.
be derived by the following avRule: (cid:104) allow, myapp, sdcard,
ﬁle, read (cid:105).
The avRules provide a higher-level representation of avAu-
thorizations. Every allow avRule is managed with an expan-
sion of the sets associated with the source, target, class, and
action. In general, a cartesian product is computed of all the
elements in the positive part. The negative portion of each
pattern is used to specify exceptions in the consideration of
the positive portion of the pattern.
Example 3. In order to provide myapp the avAuthoriza-
tions needed to create and write ﬁles and directories labeled
with an avType that has the avAttribute sdcard, deﬁned in
Example 2, with the exception of the avType sdcard internal,
the required avRule is as follows: (cid:104) myapp,
{ sdcard -sdcard internal }, { ﬁle dir }, { create write } (cid:105).
An element that has a strong impact on the derivation of
the low-level avAuthzPolicy is the deﬁnition of the associa-
tion between avTypes and avAttributes.
Definition 5. The typeattribute statement associates an
avType with one or more avAttributes. The syntax of ty-
peattribute appears in Table 1. The interpretation is that
the avType will be associated with all the privileges that have
been granted to the avAttribute.
Definition 6. An avRulePolicy is a set of avRules and
typeattribute statements.
The avAuthzPolicy is obtained by a compilation of the
avRulePolicy. The compilation is executed by the check-
policy tool, with a sequence of three steps: (a) the typeat-
tribute statements are processed, creating new avRules for
every avRule where the avAttribute appears, replacing the
avAttribute with the avTypes; (b) all the allow rules are ex-
panded, producing a set of avAuthorizations; (c) all the nev-
erallow rules are expanded and the policy is checked for the
presence of conﬂicts: if even one avAuthorization produced
by the expansion of neverallow rules matches an avAutho-
rization produced by allow rules, the compilation stops and
an empty policy is produced.
5. REQUIREMENTS
Analyzing the introduction of appPolicyModules in the
management of per-app security, we need to consider the
diﬀerent cases that emerge from the combination of the sys-
tem policy and an appPolicyModule. From the model pre-
sented above, we note that every avAuthorization deﬁned in
an SELinux policy has a source avType and a target avType.
These types may be deﬁned in either the system policy or
the appPolicyModule. We then have four types of avAutho-
rization, depending on the origin of the source and target
domains. Each conﬁguration is associated with a speciﬁc
requirement that must be satisﬁed by appPolicyModules.
Each requirement will be described and formalized using
a simple formalization that expresses each requirement as
a constraint on the relationship between the system avAu-
thzPolicy AV , derived from the system avRulePolicy S, and
the avAuthzPolicy AV (cid:48), obtained after the integration of
an appPolicyModule M with S. We will show in Section
6 that our proposed language and restrictions for the app-
PolicyModules satisfy all the requirements. We assume that
Figure 1: Examples of both compliant and non-
compliant modules to illustrate requirements.
there is an avType that describes the domain of safe-to-use
resources and actions, called untrusted app, which protects
system resources from the abuse of third-party apps (this is
the name actually used in the current SEAndroid policy).
An example referring to the Dolphin Browser app will also
be presented for every requirement, to clarify the impact in
the design of the policy. To denote the type of avAuthoriza-
tion, we use a compact notation where S and A represent
respectively the system and appPolicyModule origin of the
avType, with this structure: source → target.
Req1 (S→S), No impact on the system policy: the
app must not change the system policy and can only impact
on processes and resources associated with the app itself.
An appPolicyModule is intended to extend the system pol-
icy and to be managed by the same software modules that
manage the system policy. Since third-party apps can not be
trusted a priori, it is imperative that the provided appPoli-
cyModule must not be able to have an impact on privileges
where source and target are system types.
More formally, AV must be contained into AV (cid:48) and all the
avAuthorizations appearing in AV (cid:48) − AV have to present as
source or target avTypes deﬁned in M (a set represented by
notation M.newAvTypes).
I.e., AV ⊆ AV (cid:48) ∧ ∀a ∈(AV (cid:48) \ AV ) →
a.source∈ M.newAvTypes ∨ a.target∈ M.newAvTypes
Example 4
(Figure 1, M1). The APM associated with
Dolphin Browser can specify access privileges only on its own
resources, such as its own password database, but must not
be able to specify authorizations on system resources. With-
out this restriction the appPolicyModule could provide un-
strusted app write access to the type platform app data ﬁle
and corrupt the system resources, or enhance the privileges
of system resources that the app can access, creating unpre-
dictable vulnerabilities. Consider the appPolicyModule M1