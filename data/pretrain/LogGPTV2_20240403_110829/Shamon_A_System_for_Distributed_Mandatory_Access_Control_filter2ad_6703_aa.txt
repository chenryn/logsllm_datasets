title:Shamon: A System for Distributed Mandatory Access Control
author:Jonathan M. McCune and
Trent Jaeger and
Stefan Berger and
Ram&apos;on C&apos;aceres and
Reiner Sailer
Shamon: A System for Distributed Mandatory Access Control
Jonathan M. McCune∗
Carnegie Mellon University
PI:EMAIL
Trent Jaeger
Stefan Berger Ram´on C´aceres Reiner Sailer
Pennsylvania State University
PI:EMAIL
IBM T. J. Watson Research Center
{stefanb,caceres,sailer}@us.ibm.com
Abstract
We deﬁne and demonstrate an approach to securing dis-
tributed computation based on a shared reference monitor
(Shamon) that enforces mandatory access control (MAC)
policies across a distributed set of machines. The Shamon
enables local reference monitor guarantees to be attained
for a set of reference monitors on these machines. We im-
plement a prototype system on the Xen hypervisor with
a trusted MAC virtual machine built on Linux 2.6 whose
reference monitor design requires only 13 authorization
checks, only 5 of which apply to normal processing (others
are for policy setup). We show that, through our architec-
ture, distributed computations can be protected and con-
trolled coherently across all the machines involved in the
computation.
1. Introduction
Recent advances are bringing ﬂexible mandatory access
control (MAC) to commercial systems, such as Linux [34]
and FreeBSD [37], but it does not appear to be straight-
forward to extend these systems to a distributed security
architecture. Previous distributed security architectures,
such as those based on Taos [1, 6], Kerberos [21, 27], trust
management [10, 13, 23, 24], and grid computing [14, 38]
have had successes, but are limited by the lack of dis-
tributed trust and by enforcement complexity. They lack
a basis for establishing that all the machines in the dis-
tributed environment have trustworthy enforcement mech-
anisms and are conﬁgured to enforce the proper MAC pol-
icy. These architectures also control resources at a ﬁne
granularity, such as individual ﬁles, which results in com-
plex enforcement mechanisms and MAC policy speciﬁca-
tions. The emerging MAC enforcement mechanisms, such
as SELinux, do not address overall system trust and have
signiﬁcant complexity, so it seems likely that extending
these architectures directly will result in the same prob-
lems. We aim to deﬁne a distributed systems security ar-
chitecture that provides trust in enforcement and limits the
complexity of enforcement.
Figure 1 illustrates our high-level goal. A distributed
application consists of a coalition of virtual machines
∗This work was done during an internship at IBM Research.
(VMs) that execute across a distributed system of physi-
cal machines. Each of the coalition VMs may reside on
a different physical machine, and multiple coalitions may
execute on each physical machine. The physical machines
each have a reference monitor capable of enforcing MAC
policies over its VMs. However, to the individual coali-
tions, the combination of reference monitors forms a co-
herent, uniform unit that protects the coalition from other
coalitions and limits the actions of the coalition VMs. We
call the result of this sharing of reference monitors, whose
mutual trust can be veriﬁed, a Shamon. As VMs are added
or migrate to new machines, the Shamon is veriﬁed to en-
sure its trustworthiness.
In this paper, we introduce a Shamon approach for
MAC enforcement across distributed systems that requires
a very small amount of reference monitoring function on
each machine, thus enabling trust in this function to be ver-
iﬁable over the entire distributed system. MAC enforce-
ment is simpliﬁed by using a small virtual machine mon-
itor (VMM) as the base code and relying on minimal op-
erating system controls. The Xen hypervisor system is our
VMM [5], and we only depend on it for inter-VM controls
which are available through only two Xen mechanisms:
grant tables (shared memory), and event channels (syn-
chronous channels). Xen provides system services (such
as hardware and guest virtual machine controls) through a
single trusted VM that at present runs a complete operating
system (Linux). However, we ﬁnd that MAC enforcement
only requires that the trusted VM control network com-
munication. We use only the SELinux controls for IPsec
and packet processing (seven hooks) to perform MAC en-
forcement in the trusted VM. As a result, the enforcement
of only 13 total authorizations (combined from Xen and
SELinux) are needed from the reference monitors.
Trust in the MAC enforcement capabilities of a remote
system is established using remote attestation [26, 35]. We
use remote attestation to enable each machine to verify
the following properties of the reference monitoring in-
frastructure:
tamperprooﬁng (i.e., code and communica-
tion integrity), mediation (e.g., effective MAC enforce-
ment mechanisms), and the satisfaction of security goals
(e.g., isolation from other workloads) in a distributed en-
vironment. We can extend this trust up to the target VM
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:30:16 UTC from IEEE Xplore.  Restrictions apply. 
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 2006Physical Machine(cid:13)
Physical Machine(cid:13)
Physical Machine(cid:13)
Physical Machine(cid:13)
Coalition(cid:13)
Coalition(cid:13)
Untrusted(cid:13)
Untrusted(cid:13)
network(cid:13)
network(cid:13)
VM(cid:13)
VM(cid:13)VM(cid:13)
VM(cid:13)
VM(cid:13)VM(cid:13)
VM(cid:13)
VM(cid:13)VM(cid:13)
VM(cid:13)
VM(cid:13)VM(cid:13)
VM(cid:13)
VM(cid:13)VM(cid:13)
VM(cid:13)
VM(cid:13)VM(cid:13)
VM(cid:13)
VM(cid:13)VM(cid:13)
VM(cid:13)
VM(cid:13)VM(cid:13)
VM(cid:13)
VM(cid:13)VM(cid:13)
VM(cid:13)
VM(cid:13)VM(cid:13)
VM(cid:13)
VM(cid:13)VM(cid:13)
VM(cid:13)
VM(cid:13)VM(cid:13)
VM(cid:13)VM(cid:13)
VM(cid:13)
VM(cid:13)
VM(cid:13)VM(cid:13)
VM(cid:13)
VM(cid:13)VM(cid:13)
VM(cid:13)
VM(cid:13)VM(cid:13)
Physical Machine(cid:13)
Physical Machine(cid:13)
Physical Machine(cid:13)
Physical Machine(cid:13)
Figure 1. Example of a distributed coalition.
Virtual machine (VM) instances sharing common
Mandatory Access Control (MAC) labels on multi-
ple physical hypervisor systems are all members of
the same coalition.
(i.e., the VM that provides application services) through
attestation as well.
The contributions in this work are:
1. a system built from open-source software components
that enables enforcement of MAC policies across a set
of machines;
2. complete MAC reference monitoring from two soft-
ware layers, (1) the Xen hypervisor that controls
inter-VM resource accesses, and (2) SELinux and
IPsec network controls; and
3. the use of attestation to build trust in the reference
monitoring across all machines in a distributed sys-
tem.
We demonstrate this implementation by applying it to
a BOINC distributed computing application [2]. The
BOINC infrastructure enables distributed computations by
a group of clients coordinated by a server, such as the
SETI@home volunteer distributed computing effort [3].
We run a BOINC server and its clients in VMs. The refer-
ence monitors of each of the machines hosting the BOINC
VMs perform a mutual veriﬁcation of acceptable reference
monitoring software and MAC policy. Then, each of these
reference monitors enforces the isolation of the BOINC
VMs from others and protects other coalitions from the
BOINC VMs. We describe how the Shamon approach en-
ables veriﬁcation of trust and MAC-enforced isolation.
The rest of this paper is organized as follows. Section 2
surveys related work and provides background motivation
for the problem of building a Shamon. Section 3 presents
the architecture of our Shamon, and Section 4 describes
our prototype implementation. Section 5 presents an ex-
perimental evaluation of the security features of our proto-
type implementation, while Section 6 discusses some out-
standing issues and areas for future work. Finally, Sec-
tion 7 offers our conclusions.
2. Background and Related Work
We examine the two main issues in building a secure
distributed system: complexity and trust. Previous systems
meet one or the other of the these requirements, but not
both.
Complexity. We deﬁne MAC enforcement complexity in
terms of the number of unique operations in the system
that require mediation and the number of statements nec-
essary to describe the MAC policy. In most systems, MAC
enforcement is done by an operating system, but the ﬁne
granularity of system objects and the variety of applica-
tions that need to be controlled result in complex MAC en-
forcement. Extending this approach directly to distributed
systems is not practical.
[36], SELinux [34],
Current operating systems capable of enforcing MAC,
such as Trusted Solaris
and
FreeBSD [37], leverage the ﬁnest granularity of control of-
fered by the operating system, where individual labels are
associated with processes (for subjects) and ﬁles (for ob-
jects). While such control enables us to reason about the
security of our systems in the most ﬂexible manner, it does
not appear that such ﬁne-grained control will scale to dis-
tributed systems or that it is necessary for such systems.
First, ﬁne-grained controls require more complex refer-
ence monitor designs, such as the Linux Security Mod-
ules (LSM) framework [39], resulting in both large MAC
policies (e.g., the 30,000 policy statements in an SELinux
strict policy) and the challenge of mapping system objects
to their labels. Second, current Mandatory Access Control
systems use a prohibitively large number of operating sys-
tem hooks (on the order of hundreds). MAC policies for
these systems depend on details of the particular system,
making enforcement across a distributed system difﬁcult.
By comparison, our system leverages virtualization so that
MAC policies can be largely system-independent, result-
ing in signiﬁcantly fewer required mediation points.
Therefore, we propose to move from the ﬁne-grained
controls of operating systems to an architecture that con-
trols communication between applications. The proposed
approach uses a virtual machine architecture to control
communication. While this architecture provides isolation
between applications running in separate virtual machines
(VMs), our approach enables ﬂexible control of communi-
cation at the virtual machine-level, such that any inter-VM
communication can be ﬂexibly allowed or denied. Such
a mechanism enables the composition of VM coalitions
where member VMs communicate within the coalition and
have limited communication with external VMs. We ﬁnd
that enforcement is possible with few enforcement points
(5 hooks for enforcement) where we can specify MAC
policies (e.g., Type Enforcement [11] or Multi-Level Se-
curity (MLS) [7]) at the VM level.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:30:16 UTC from IEEE Xplore.  Restrictions apply. 
Proceedings of the 22nd Annual Computer Security Applications Conference (ACSAC'06)0-7695-2716-7/06 $20.00  © 2006Virtual machines are not a new technology and have
long been used for security, but we make several improve-
ments to current systems. First, compared to VM isolation
technologies [29], we enable not only VM isolation, but
also ﬂexible, but controlled, communication across sys-
tems. Second, compared to VM systems with integrity ver-
iﬁcation for trust (e.g., Terra [15]), we deﬁne a complete
MAC enforcement mechanism and basic MAC policies for
distributed systems. Terra only provides a placeholder for
controlling access. Third, we deﬁne VM access control at
the lowest levels of the system. This contrasts with Net-
Top [25] which uses a virtual machine monitor (VMWare)
and operating system with MAC support (SELinux) to en-
able what were traditionally physically separate computer
terminals on the desks of government employees to be
consolidated onto a single system. The NetTop architec-
ture relies extensively on the security controls of the host
OS, which we have already shown to suffer from exces-
sive complexity. Finally, our approach takes a pragmatic
approach to the security ideals of the VAX VMM [18]
and KVM/370 [32] systems, where we provide high per-
formance and ﬂexible function with similar security con-
trols. While we do not provide covert channel controls, we
can prevent the execution of conﬂicting VMs on the same
physical platform where this is a concern.
Trust establishment. Something that has been lacking in
distributed systems, historically, has been a practical basis
for trust in the distributed enforcement mechanism. For
building a coalition, we must establish trust in the MAC
enforcement of each member of the coalition, and we must
verify that the MAC policy being enforced on each ma-
chine supporting the coalition is consistent with the coali-
tion’s security goals (e.g., secrecy and integrity).
Previous distributed security architectures depend im-
plicitly on a trusted computing base without any practical
basis for this trust. For example, trust management sys-
tems [10, 13, 23, 24] compute authorizations, but we have
no basis to trust that these functions are performed cor-
rectly.
Within a single administrative domain, trust is often as-
sumed because all the systems are under the same admin-
istrative control. However, it is possible that some of the
machines in the domain have been compromised or mis-
conﬁgured. Typically, no effort is made to verify the cor-
rectness of MAC enforcement beyond software updates.
The bootstrapping of trust in a distributed security ar-
chitecture is described for the Taos system [22].
In this
system, a preliminary form of secure boot [4] is proposed
where at each step in the boot sequence the current system
veriﬁes the integrity of the next step prior to starting its
execution. We agree with the requirement of building trust