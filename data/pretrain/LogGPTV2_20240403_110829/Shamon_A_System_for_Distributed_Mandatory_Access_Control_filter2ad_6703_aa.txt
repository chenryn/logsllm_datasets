# Shamon: A System for Distributed Mandatory Access Control

**Authors:**
- Jonathan M. McCune, Carnegie Mellon University
- Trent Jaeger, Pennsylvania State University
- Stefan Berger, IBM T.J. Watson Research Center
- Ramón Cáceres, IBM T.J. Watson Research Center
- Reiner Sailer, IBM T.J. Watson Research Center

## Abstract
We present and demonstrate an approach to securing distributed computations through a shared reference monitor (Shamon) that enforces mandatory access control (MAC) policies across a set of distributed machines. Shamon ensures that local reference monitor guarantees are achieved across multiple reference monitors on these machines. Our prototype system, implemented on the Xen hypervisor, includes a trusted MAC virtual machine (VM) based on Linux 2.6. This design requires only 13 authorization checks, with just 5 applicable to normal processing. We show that our architecture enables coherent protection and control of distributed computations across all involved machines.

## 1. Introduction
Recent advancements have brought flexible mandatory access control (MAC) to commercial systems like Linux and FreeBSD. However, extending these systems to a distributed security architecture is not straightforward. Previous distributed security architectures, such as those based on Taos, Kerberos, trust management, and grid computing, have had some successes but are limited by the lack of distributed trust and enforcement complexity. These architectures often control resources at a fine granularity, leading to complex enforcement mechanisms and MAC policy specifications. Emerging MAC enforcement mechanisms, such as SELinux, do not address overall system trust and are also complex, making direct extension to distributed systems problematic.

Our goal is to define a distributed systems security architecture that provides trust in enforcement and limits the complexity of enforcement. Figure 1 illustrates our high-level objective: a distributed application consisting of a coalition of virtual machines (VMs) executing across a distributed system of physical machines. Each coalition VM may reside on a different physical machine, and multiple coalitions can execute on each physical machine. The physical machines each have a reference monitor capable of enforcing MAC policies over its VMs. To individual coalitions, the combination of reference monitors forms a coherent, uniform unit that protects the coalition from other coalitions and limits the actions of the coalition VMs. We call this shared reference monitor, whose mutual trust can be verified, a Shamon. As VMs are added or migrate to new machines, the Shamon is verified to ensure its trustworthiness.

In this paper, we introduce a Shamon approach for MAC enforcement across distributed systems that requires minimal reference monitoring function on each machine, enabling trust in this function to be verifiable over the entire distributed system. MAC enforcement is simplified by using a small virtual machine monitor (VMM) as the base code and relying on minimal operating system controls. Our VMM is the Xen hypervisor, and we depend on it for inter-VM controls available through grant tables and event channels. Xen provides system services through a single trusted VM that runs a complete operating system (Linux). However, we find that MAC enforcement only requires the trusted VM to control network communication. We use only the SELinux controls for IPsec and packet processing (seven hooks) to perform MAC enforcement in the trusted VM. As a result, only 13 total authorizations (combined from Xen and SELinux) are needed from the reference monitors.

Trust in the MAC enforcement capabilities of a remote system is established using remote attestation. We use remote attestation to enable each machine to verify the tamperproofing, mediation, and satisfaction of security goals in a distributed environment. This trust can be extended up to the target VM (i.e., the VM that provides application services) through attestation as well.

The contributions of this work are:
1. A system built from open-source software components that enables enforcement of MAC policies across a set of machines.
2. Complete MAC reference monitoring from two software layers: the Xen hypervisor that controls inter-VM resource accesses and SELinux and IPsec network controls.
3. The use of attestation to build trust in the reference monitoring across all machines in a distributed system.

We demonstrate this implementation by applying it to a BOINC distributed computing application. The BOINC infrastructure enables distributed computations coordinated by a server, such as the SETI@home volunteer distributed computing effort. We run a BOINC server and its clients in VMs. The reference monitors of each machine hosting the BOINC VMs perform mutual verification of acceptable reference monitoring software and MAC policy. Then, each reference monitor enforces the isolation of the BOINC VMs from others and protects other coalitions from the BOINC VMs. We describe how the Shamon approach enables verification of trust and MAC-enforced isolation.

The rest of this paper is organized as follows. Section 2 surveys related work and provides background motivation for the problem of building a Shamon. Section 3 presents the architecture of our Shamon, and Section 4 describes our prototype implementation. Section 5 presents an experimental evaluation of the security features of our prototype implementation, while Section 6 discusses some outstanding issues and areas for future work. Finally, Section 7 offers our conclusions.

## 2. Background and Related Work
Building a secure distributed system involves addressing two main issues: complexity and trust. Previous systems meet one or the other of these requirements, but not both.

### Complexity
We define MAC enforcement complexity in terms of the number of unique operations in the system that require mediation and the number of statements necessary to describe the MAC policy. In most systems, MAC enforcement is done by an operating system, but the fine granularity of system objects and the variety of applications that need to be controlled result in complex MAC enforcement. Extending this approach directly to distributed systems is not practical.

Current operating systems capable of enforcing MAC, such as Trusted Solaris, SELinux, and FreeBSD, leverage the finest granularity of control offered by the operating system, where individual labels are associated with processes (for subjects) and files (for objects). While such control enables flexible reasoning about system security, it does not scale to distributed systems and is not necessary for them. Fine-grained controls require more complex reference monitor designs, such as the Linux Security Modules (LSM) framework, resulting in large MAC policies (e.g., 30,000 policy statements in an SELinux strict policy) and the challenge of mapping system objects to their labels. Additionally, current MAC systems use a prohibitively large number of operating system hooks (on the order of hundreds), making enforcement across a distributed system difficult.

By comparison, our system leverages virtualization so that MAC policies can be largely system-independent, resulting in significantly fewer required mediation points. Therefore, we propose moving from the fine-grained controls of operating systems to an architecture that controls communication between applications. The proposed approach uses a virtual machine architecture to control communication, providing isolation between applications running in separate VMs and enabling flexible control of communication at the VM level. This mechanism allows the composition of VM coalitions where member VMs communicate within the coalition and have limited communication with external VMs. We find that enforcement is possible with few enforcement points (5 hooks for enforcement) where we can specify MAC policies (e.g., Type Enforcement or Multi-Level Security (MLS)) at the VM level.

### Trust Establishment
Historically, distributed systems have lacked a practical basis for trust in the distributed enforcement mechanism. For building a coalition, we must establish trust in the MAC enforcement of each member of the coalition and verify that the MAC policy being enforced on each machine supporting the coalition is consistent with the coalition's security goals (e.g., secrecy and integrity).

Previous distributed security architectures implicitly depend on a trusted computing base without any practical basis for this trust. For example, trust management systems compute authorizations, but there is no basis to trust that these functions are performed correctly. Within a single administrative domain, trust is often assumed because all systems are under the same administrative control. However, it is possible that some machines in the domain have been compromised or misconfigured, and typically, no effort is made to verify the correctness of MAC enforcement beyond software updates.

The bootstrapping of trust in a distributed security architecture is described for the Taos system, which proposes a preliminary form of secure boot where at each step in the boot sequence, the current system verifies the integrity of the next step prior to starting its execution. We agree with the requirement of building trust in a distributed security architecture.