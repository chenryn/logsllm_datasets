putationally expensive than a scheme based instead on cryp-
tographic hashing. For example, benchmarking tests (e.g.,
see [6, 26]) support the working assumption that crypto-
graphic hash functions are 5,000 to 10,000 times faster than
most public-key signature veriﬁcation algorithms and 500
to 1,000 times faster than RSA signature veriﬁcation with a
simple public exponent (such as 216 + 1).
Our scheme is based on a light-weight cryptographic
hashing strategy, which we call leap-frog linking. The ini-
tial setup for our scheme involves a simple key distribution.
Speciﬁcally, we deﬁne for each router x the set N (x), which
contains the vertices (routers) in G that are neighbors of x
(which does not include the vertex x itself). That is,
N (x) = {y: (x, y) ∈ E and y (cid:2)= x}.
The security of our scheme is derived from a secret key k(x)
that is shared by all the vertices in N (x), but not by x itself.
These keys can be created in a setup phase, when the rout-
ing devices are ﬁrst deployed, or can be maintained by a
network administrator. Note, in addition, that y ∈ N (x) if
and only if y ∈ N (y).
Now, when s wishes to send the message M as a ﬂooding
message to a neighboring router, x, it sends
(s, j + 1, M, h(s||j + 1||M ||k(x)), 0),
where h is a cryptographic hash function that is collision
resistant (e.g., see [28]). Any router x adjacent to s in G can
immediately verify the authenticity of this message (except
for the value of this application of h), for this message is
coming to x along the direct connection from s. But nodes
at distances greater than 1 from s cannot authenticate this
message so easily when it is coming from a router other than
s. Fortunately, the propagation protocol will allow for all of
these routers to authenticate the message from s, under the
assumption that at the malicious routers along routing paths
do not collaborate during the computation.
Let (s, j + 1, M, h1, h2) be the message that is received
by a router x on its link from a router y. If y = s, then x
is directly connected to s, and h2 = 0. But in this case x
can directly authenticate the message, since it came directly
from s. In general, for a router x that just received this mes-
sage from a neighbor y with y (cid:2)= s, we inductively assume
that h2 is the hash value h(s||j + 1||M ||k(y)). Since x is
in N (y), it shares the key k(y) with y’s other neighbors;
hence, x can authenticate the message from y by using h2.
This authentication is sufﬁcient to guarantee correctness,
assuming no more than one router is corrupted at present,
even though x has no way of verifying the value of h1. So
to continue the propagation assuming that ﬂooding should
continue from x, the router x sends out, to the next router
w on the path (in the case of a unicast) or each w that is x’s
neighbor (in the ﬂooding case), the message
(s, j + 1, M, h(M ||j + 1||k(w)), h1).
Note that this message is in the correct format for each such
w, for h1 should be the hash value h(s||j + 1||M ||k(x)),
which w can immediately verify, since it knows k(x). Note
further that, just in the ﬂooding case, the ﬁrst time a router
w receives this message, it can process it, updating the se-
quence number for s and so on. (See Figure 1.)
A
C
B
E
D
`
Figure 1. Illustrating leap-frog packet linking.
We show the hops in the route from A to E us-
ing solid lines. The leap-frog linking in the in-
tegrity validation is shown using dotted lines.
This simple protocol has a number of performance ad-
vantages. First, from a security standpoint, inverting or ﬁnd-
ing collisions for a cryptographic hash function is compu-
tationally difﬁcult. Thus, it is infeasible for a router to fake
a hash authentication value without knowing the shared key
of its neighbors, should it attempt to alter the contents of the
message M .
Another advantage of this protocol is its computational
efﬁciency. The only additional work needed for a router
x to complete its processing for a ﬂooding message is for
Proceedings of the 2005 IEEE Symposium on Security and Privacy (S&P’05) 
1081-6011/05 $ 20.00 IEEE
x to perform one hash computation for each of the edges
of G that are incident on x. That is, x need only perform
degree(x) hash computations, where degree(x) denotes the
degree of x. Likewise, x need only store degree(x) keys in
order to perform this protocol (which is the minimum stor-
age needed just to forward broadcast ﬂooding messages).
Typically, for communication networks, the degree of a
router is kept bounded by a constant. Thus, this work and
storage compares quite favorably in practice to what would
be required to verify a full-blown digital signature from a
message’s source.
The leap-frog routing process can detect a router mal-
function in the ﬂooding algorithm, for any router y that
does not follow the protocol will be discovered by one of
its neighbors x. Assuming that x and y do not collude to
suppress the discovery of y’s mistake in this case, then x
can report to s or even a network administrator that some-
thing is potentially wrong with y. For in this case, y has
clearly not followed the protocol. In addition, note that this
discovery will occur in just one message hop from y.
2.3 Chromatic Leap-Frog Packet Linking
In some contexts it might be too expensive for a router
to perform as many hash computations as it has neighbors
in the case of a broadcast ﬂooding message. Thus, we
might wonder whether it is possible to reduce the number of
hashes that an intermediate router needs to do to one even
for ﬂooding messages. In this subsection we describe how
to achieve such a result, albeit at the expense of increas-
ing the size of the message that is sent (but still keeping the
storage per device to be at most equal to its network degree).
Since our method is based on a coloring of the vertices of G,
we refer to this scheme as the chromatic leap-frog approach.
In this scheme, we change the preprocessing step to that
of computing a small-sized coloring of the vertices in G
so that no two adjacent nodes are assigned the same color.
Algorithms for computing or approximating such colorings
are known for a wide variety of graphs. For example, ev-
ery tree can be colored with two colors. Such colorings
might prove useful in applying our scheme to multicasting
algorithms, since multicasting communications often take
place in trees. In addition, every planar graph can be col-
ored with four colors with some difﬁculty and easily with
ﬁve. Such graphs could arise naturally from distributed
sensor networks. Finally, it is easy to color a graph that
has maximum degree d using at most d + 1 colors by a
straightforward greedy algorithm. This last class of graphs
is perhaps the most important for general networking ap-
plications, as most communications networks bound their
degree by a constant.
Let the set of colors used to color G be simply numbered
from 1 to c and let us denote with Vi the set of vertices in
G that are given color i, for i = 1, 2, . . . , c, with c ≥ 2.
As a preprocessing step, we create a secret key ki for the
color i. We do not share this color with the members of Vi,
however. Instead, we share ki with all the vertices that are
not assigned color i.
When a router s wishes to route or ﬂood a message M
with a new sequence number j + 1, in this new secure
scheme, it creates a full message as
(s, j + 1, M, h1, h2, . . . , hc),
where each hi = h(s||j + 1||M ||ki). There is one problem
for s to build this message, however. It does not know the
value of ki, where i is the color for s. So, it will set that
hash value to 0. Then, s sends this message to each of its
neighbors.
Suppose now that a router x receives a message of the
form
(s, j + 1, M, h1, h2, . . . , hc)
from its neighbor s.
In this case x can verify the au-
thenticity of the message immediately, since it is coming
along the direct link from s. Thus, in this case, x does not
need to perform any hash computations to validate the mes-
sage. Still, there is one hash entry that is missing in this
message (and is currently set to zero): namely, hi = 0,
where i is the color of s. In this case, the router x com-
putes hj = h(s||j + 1||M ||kj), since it must necessarily
share the value of kj, by the deﬁnition of a vertex col-
oring. The router x then sends out the (revised) message
(s, j + 1, M, h1, h2, . . . , hc).
Suppose then that a router x receives a message (s, j +
1, M, h1, h2, . . . , hc) from its neighbor y (cid:2)= s. In this case
we can inductively assume that each of the hi values is de-
ﬁned. Moreover, x can verify this message by testing if
hi = h(s||j + 1||M ||ki), where i is the color for y. If this
test succeeds, then x accepts the message as valid and sends
it on to all of its neighbors except y, to continue the broad-
cast. In this scheme, the message is easily authenticated,
since y could not manufacture the value of hi.
If a router modiﬁes the contents of M , the identity of
s, or the value of j + 1, this alteration will be discovered
in one hop. Nevertheless, we cannot immediately implicate
a router x if its neighbor y discovers an invalid hi value,
where i is the color of x. The reason is that another router,
w, earlier in the ﬂooding could have simply modiﬁed this
hi value, without changing s, j + 1, or M . Such a modiﬁ-
cation will of course be discovered by y, but y cannot know
which previous router performed such a modiﬁcation. Thus,
we can detect modiﬁcations to content in one hop, but we
cannot necessarily detect modiﬁcations to hi values in one
hop. Even so, if there is at most one corrupted router in G,
then we will discover a message modiﬁcation if it occurs.
If the actual identiﬁcation of a corrupted router is important
Proceedings of the 2005 IEEE Symposium on Security and Privacy (S&P’05) 
1081-6011/05 $ 20.00 IEEE
for a particular application, however, then it might be better
to use the non-chromatic leap-frog scheme, since it catches
and identiﬁes a corrupted router in one hop.
needed to construct such a digest, depending on the size of
the message M .
2.4 Dealing with Network Updates
Since networks are rarely static, it is natural to address
the computations that are needed for leap-frog linking to
deal with network updates. Since there is no revocation
mechanism in our scheme, deleting nodes and edges from
the network requires no changes.
Inserting new nodes and edges with respect to the ba-
sic leap-frog linking scheme requires some work, however.
Adding a new node x, with neighbor set N (x), to the net-
work requires that the administrator compute a new key
k(x) and distribute it to all the nodes in N (x). Likewise,
adding a new edge (x, y) to the network requires that the
administrator inform x of k(y) and inform y of k(x). These
communications are assumed to be done out of band (or us-
ing encryption).
Inserting a new node x with respect to chromatic leap-
frog linking is more efﬁcient than in the basic scheme. In
this case, we assign x a color i that is different from all of
x’s neighbors and we communicate to x all the of color keys
except for the key ki.
Adding a new edge (x, y) in the chromatic scheme is
potentially more problematic. If x and y are colored dif-
ferently, then there is nothing to do, with respect to the keys
stored at x and y. The previously-distributed color keys will
still work. But if x and y are currently the same color, then
we need to recolor the graph and distribute new color keys
based on this new coloring.
Thus, the leap-frog schemes are best suited to contexts
where the network topology is fairly static.
Incidentally,
our scheme based on diverse key distributions, which we
describe in Section 3, is more tolerant of arbitrary network
topology changes.
2.5 Evaluation and Analysis
The principle advantage of the leap-frog scheme is that
allows for immediate integrity checking, without waiting
for the future revelation of the pre-image of a one-way
hash function (as in the previous schemes based on hash
chains [13, 35]). Thus, comparing with a previous solution
for immediate integrity checking, we compare our solutions
with the public-key signature scheme of Perlman [24] (see
also [25]). In either case, whether we are using an HMAC
or digital signature to authenticate a message, we are most
likely going to be ﬁrst producing a digest of the message us-
ing a cryptographic hash function. Table 1 shows estimates,
based on the Crypto++ 5.2.1 Benchmarks [6], of the time
Proceedings of the 2005 IEEE Symposium on Security and Privacy (S&P’05) 
1081-6011/05 $ 20.00 IEEE
Alg.
MD5
SHA1
10 B 100 B 1 KB 10 KB 100 KB
.046
.147
460
1,470
46
147
.46
1.47
4.6
14.7
Table 1. Running times, in microseconds, for
computing a digest of a message of various
sizes, based on the Crypto++ 5.2.1 Bench-
marks [6].
Moreover, since the prime alternative to the leap-frog
scheme is full digital signatures, we show in Table 2 the
benchmark times for digital signatures.
Alg.
RSA 1024
RSA 2048
DSA 1024
Sign
4,750
28,130
2,180
Verify
180
450
2,490
Table 2. Digital signature computation and
veriﬁcation times, in microseconds, based on
the Crypto++ 5.2.1 Benchmarks [6], for a di-
gested message.
Efﬁciency.
In the standard leap-frog scheme, a router
needs to perform a number of hash computations equal to
its degree in order to forward a broadcast message to its
neighbors. That is, a router x processing a broadcast per-
forms d cryptographic hashes, where d is the number of x’s
neighbors in the network. Using the heuristic that comput-
ing a cryptographic hash function is 1, 000 times faster than
a digital signature check, we can conclude for the additional
time required for authenticating a digest, that leap-frog in-
tegrity checking is faster than digital signature checking
whenever the degree of routers in the network is less than
1, 000, which should be the case in most instances. Be-
ing more speciﬁc, each of the d hashes must be performed
on a string of roughly 50 bytes. Table 3 shows the esti-
mated time needed to perfom these hashes as a function of
d, the degree of the router. The setup for performing the ba-
sic leap-frog scheme is just a single hash, of course, which
is benchmarked as .23 microseconds for MD5 or .74 mi-
croseconds for SHA1 [6].
The additional time for the routing step in the chro-
matic version of leap-frog integrity checking will always
be faster than digital signature checking, of course, since
each router need perform only one hash computations per
5
1.15
3.7
10
2.3
7.4