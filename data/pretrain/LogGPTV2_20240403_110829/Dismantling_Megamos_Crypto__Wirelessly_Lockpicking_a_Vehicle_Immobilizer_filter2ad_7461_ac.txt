The structure of the secret key of the car suggests that it has an entropy of only 24 bits.
tom encoding scheme for status bits and a Manchester
encoding scheme for transmitting data bits. The Meg-
amos Crypto immobilizer unit signals the transponder to
receive a command by dropping the ﬁeld two consecutive
times in a small time interval. Then it drops the ﬁeld a
few microseconds to modulate a zero and leaves the ﬁeld
on to modulate a one.
This way of modulation introduces the side-effect that
the immobilizer unit and the transponder could get out-
of-sync. When the immobilizer unit sends a bitstring
of contiguous ones, there are no ﬁeld drops for almost
15 milliseconds. The manufacturer realized this was a
problem, but instead of proposing an alternative com-
munication scheme they suggest to choose random num-
bers with more zeros’s than ones and especially avoid se-
quential ones [23]. From a security perspective it sounds
like a bad idea to suggest to system integrators that they
should effectively drop entropy from the used random
numbers.
To get a fair estimate of communication timings we
did some experiments. With our hardware setup we were
able to reach the highest communication speed with the
transponder that is possible according to the datasheet.
It allows us to read out the identiﬁer id in less than 14
milliseconds and successfully authenticate within 34 mil-
liseconds. These timings conﬁrm that an adversary can
wirelessly pickpocket the identiﬁer and all its user mem-
ory in less than a second from a distance of one inch.
Standing close to a victim for only a fraction of a second
enables the adversary to gather the transponder identiﬁer.
When this identiﬁer is emulated to the corresponding
car, it is possible to gather partial authentication traces.
Because the transponder lacks a random generator, this
partial traces can later be used to retrieve the responses
from the transponder which extends them to successful
authentication traces. With a number of successful au-
thentication traces it is possible to recover the secret key
as described in Section 5.
3.3 Reverse-engineering the cipher
Recent articles point out the lack of security [11, 40, 41]
in modern cars. The software in existing cars is designed
with safety in mind, but is still immature in terms of se-
curity. Legacy protocols and technologies are often vul-
nerable to a number of remote and local exploits.
Most car keys need to be preprogrammed, which is
also referred to as pre-coded, before they can be asso-
ciated to a car. During this initialization phase the user
memory blocks are ﬁlled with manufacturer speciﬁc data
to prevent mixing of keys. This step adds no security, it
just restricts the usage of keys that were meant a speciﬁc
car make or model.
There are several car locksmith tools456 in the after
market that can initialize or change such transponder
data. Such tools fully support the modulation/encoding
schemes and communication protocol of
the Meg-
amos Crypto transponder. They implement some pub-
licly available functionality like the read, write and
reset commands. However, they do not implement
the authentication protocol. To perform a successful au-
thentication, knowledge of the Megamos Crypto cipher
is necessary to compute the authentication messages aC
and aT .
More advanced car diagnostic tools like AVDI7 and
Tango Programmer8 offer functionality that goes beyond
“legitimate” usage. These devices are able to dump the
board-computer memory, recover the dealer code, and
add a new blank transponder to the car. For this the tools
do not require a genuine key to be present but they do
need physical access to the can bus.
These diagnostic tools use the Megamos Crypto au-
thentication functionality to speed up the process of
adding new transponders to the car. For this, the tool
needs the Megamos Crypto algorithm to compute valid
4http://www.istanbulanahtar.com
5http://www.advanced-diagnostics.co.uk
6http://www.jmausa.com
7http://www.abritus72.com
8http://www.scorpio-lk.com
6
708  22nd USENIX Security Symposium 
USENIX Association
authentication attempts. We would like to emphasize
that non of these tools is able to recover the secret key
of a transponder or perform any kind of cryptanalysis. In
fact, within the legitimate automotive industry Megamos
Crypto is believed to be unclonable.
The software package that comes with the Tango Pro-
grammer implements all cryptographic operations of the
transponder including the Megamos Crypto cipher. We
have analyzed the software thoroughly and extracted the
algorithm from it.
Since the application implements several counter mea-
sures against reverse-engineering, this task was not triv-
ial at all. It is highly protected with an executable ob-
fuscator that runs a custom virtual machine, as described
in [51], and a number of advanced anti-debugging tricks
to avoid exposure of its inner workings. To perform our
security evaluation of the Megamos Crypto cipher we
bypassed all these measures and reverse engineered the
cipher in a semi-automatic way by observing the mem-
ory state changes and guessing the intermediate crypto-
graphic calculations.
Furthermore, we observed every Megamos Crypto re-
lated function call from the program instructions mem-
ory segment. When the program counter entered a suspi-
cious memory segment, we invoked our clean-up routine
that automatically grouped and dropped all unnecessary
instructions (unconditional re-routings, sequential oper-
ations on the same variables, random non-inﬂuential cal-
culations). After analysing this at run-time, the actual
working of the algorithm was quickly deduced from the
optimized and simpliﬁed persistent instruction set.
3.4 Cipher
This section describes the Megamos Crypto cipher in
detail. The cipher consists of ﬁve main components:
a Galois Linear Feedback Shift Register, a non-linear
Feedback Shift Register, and three 7-bit registers. A
schematic representation of the cipher is depicted in Fig-
ure 7.
Deﬁnition 3.1 (Cipher state). A Megamos Crypto cipher
state s = ⟨g, h, l, m, r⟩ is an element of F57
2 consisting of
the following ﬁve components:
1. the Galois LFSR g = (g0 . . . g22) ∈ F23
2 ;
2. the non-linear FSR h = (h0 . . . h12) ∈ F13
2 ;
3. the ﬁrst output register l = (l0 . . . l6) ∈ F7
2;
4. the second output register m = (m0 . . . m6) ∈ F7
2;
5. the third output register r = (r0 . . . r6) ∈ F7
2.
The following deﬁnitions describe the successor or
feedback functions for each of these components.
Deﬁnition 3.2. The successor function for the Galois lin-
ear feedback shift register G : F23
2 is de-
ﬁned as
2 × F2 × F2 → F23
G(g0 . . . g22, i, j) = ( j⊕g22)g0g1g2(g3⊕g22)(g4⊕i)
(g5⊕g22)(g6⊕g22)g7 . . . g12(g13⊕g22)g14g15
(g16⊕g22)g17 . . . g21
We also overload the function G to multiple-bit input
string G : F23
2 × F2 × Fn+1
2 → F23
2 as
G(g, i, j0 . . . jn) = G(G(g, i, j1 . . . jn), i, j0)
Deﬁnition 3.3. The successor function for the non-linear
feedback shift register H : F13
2 is deﬁned as
2 → F13
H(h0 . . . h12) = ((h1 ∧ h8) ⊕ (h9 ∧ h11) ⊕ h12)h0 . . . h11
Deﬁnition 3.4. The feedback function for the ﬁrst output
register fl : F6
2 → F2 is deﬁned as
fl(x0 . . . x5) =(x0 ∧ x2 ∧ x3) ∨ (x2 ∧ x4 ∧ x5)∨
(x5 ∧ x1 ∧ x3) ∨ (x0 ∧ x1 ∧ x4).
Deﬁnition 3.5. The feedback function for the second out-
put register fm : F6
2 → F2 is deﬁned as
fm(x0 . . . x5) =(x4 ∧ x1 ∧ x2) ∨ (x5 ∧ x1 ∧ x3)∨
(x0 ∧ x2 ∧ x3) ∨ (x4 ∧ x5 ∧ x0).
Deﬁnition 3.6. The feedback function for the third out-
put register fr : F6
2 → F2 is deﬁned as
fr(x0 . . . x5) =(x5 ∧ x0 ∧ x2) ∨ (x5 ∧ x3 ∧ x1)∨
(x2 ∧ x3 ∧ x4) ∨ (x0 ∧ x4 ∧ x1).
With every clock tick the cipher steps to its successor
state and it (potentially) outputs one bit of keystream.
The following precisely deﬁnes the successor state and
the output of the cipher.
Deﬁnition 3.7 (Successor state). Let s = ⟨g, h, l, m, r⟩ be
a cipher state and i ∈ F2 be an input bit. Then, the suc-
cessor cipher state s′ = ⟨g′, h′, l′, m′, r′⟩ is deﬁned as
g′ := G(g, i, l1⊕m6⊕h2⊕h8⊕h12)
h′ := H(h)
l′ := al0 . . . l5
m′ := bm0 . . . m5
r′ := cr0 . . . r5
where
a = fl(g0g4g6g13g18h3) ⊕ g22 ⊕ r2 ⊕ r6
b = fm(g1g5g10g15h0h7) ⊕ l0 ⊕ l3 ⊕ l6
c = fr(g2(g3⊕i)g9g14g16h1) ⊕ m0 ⊕ m3 ⊕ m6
We deﬁne the successor function suc : F57
2 × F2 → F57
2
which takes a state s and an input i ∈ F2 and outputs
the successor state s′. We overload the function suc on
multiple-bit input which takes a state s and an input i ∈
Fn+1
as
2
suc(s, i0 . . . in) = suc(s′, in)
where s′ = suc(s, i0 . . . in−1)
USENIX Association  
22nd USENIX Security Symposium  709
7
g
input
⊕
0 1 2
⊕
3
⊕
4
⊕
5
⊕
6 7 8 9 10 1112
⊕
13 14 15
⊕
16 17 18 1920 21 22
h
⊕
⊕
0 1 2 3 4 5 6 7 8 9 10 1112
⊕
⊕
j = l1 ⊕ m6
fl
g22
⊕
fm
l
⊕
⊕
⊕
m
⊕
⊕
fr
⊕
input
r
⊕
0 1 2 3 4 5 6
0 1 2 3 4 5 6
0 1 2 3 4 5 6
fo
output
Figure 7: Schematic representation of the cipher
Deﬁnition 3.8. The non-linear output ﬁlter function
fo : F20
2 → F2 has been deliberately omitted in this pa-
per.
3.9
(Output). Deﬁne
Deﬁnition
function
output: F57
2 × F2 → F2 which takes as input an in-
ternal state s = ⟨g, h, l, m, r⟩ and an input i ∈ F2 and
returns the bit
the
fo(abcl0l2l3l4l5l6m0m1m3m5r0r1r2r3r4r5r6)
where
a = fl(g0g4g6g13g18h3) ⊕ g22 ⊕ r2 ⊕ r6
b = fm(g1g5g10g15h0h7) ⊕ l0 ⊕ l3 ⊕ l6
c = fr(g2(g3⊕i)g9g14g16h1) ⊕ m0 ⊕ m3 ⊕ m6
We also overload the function output on multiple-bit in-
put which takes a state s and an input i ∈ Fn+1
as
2
output(s, i0 . . . in) = output(s, i0) · output(s′, i1 . . . in)
where s′ = suc(s, i0).
3.5 Cipher initialization
The following sequence of deﬁnitions describe how the
cipher is initialized.
Deﬁnition 3.10. Let init : F23
ﬁned as
2 × Fn+1
2 → Fn+24
2
be de-
init(g, ε) := g
init(g, x0 . . . xn) := init(G(g, 0, xn), x0 . . . xn−1) · g22
Deﬁnition 3.11. Let p ∈ F56
2 , q ∈ F44
2 and t ∈ F43
2 be de-
ﬁned as
p := nC0 . . . nC55 + k40 . . . k95 mod 256
q := (p2 . . . p45) ⊕ (p8 . . . p51) ⊕ (p12 . . . p55)
t := init(q20 . . . q42, q0 . . . q19)
Then, the initial cipher state s0 = ⟨g, h, l, m, r⟩ is deﬁned
as
g := t0 . . .t22
h := 0p0 . . . p11
l := t23 . . . t29
m := t30 . . . t36
r := t37 . . . t42q43
3.6 Authentication protocol
This section describes the authentication protocol be-
tween a Megamos Crypto transponder and the vehicle
immobilizer. This protocol is depicted in Figure 8. An
annotated example trace is shown in Figure 5.
Deﬁnition 3.12. Given a key k = k0 . . . k95 ∈ F96
2 and an
initial state s0 as deﬁned in Deﬁnition 3.11, the internal
state of the cipher at step i is deﬁned as
si := suc(si−1, k40−i)
si+41 := suc(si+40, 0)
∀i ∈ [1 . . . 40]
∀i ∈ N
During authentication, the immobilizer starts by send-
ing an authenticate command to the transponder. This
command includes a 56-bit nonce nC and the 28 bits aC
output by the cipher from state s7. Then, the transponder
responds with the next 20 output bits aT , i.e., produced
from state s35.
710  22nd USENIX Security Symposium 
USENIX Association
8
−−−−−−−−−−−−−−−−−−−−→