ASes and is assumed in that case to observe any trafﬁc entering or
leaving the AS. Another potential adversarial resource is Internet
Exchange Points (IXes or IXPs), which are increasingly common
facilities that allow exchange of trafﬁc between ASes, usually at a
cost savings or performance improvement vs. sending via an up-
stream trafﬁc provider. An IXP is in a position to see all trafﬁc
ﬂowing between its peered ASes. It is typically in a single geo-
graphic location while an AS is often geographically distributed,
1We do, however, show how the choice of application may inﬂu-
ence the user’s susceptibility to trafﬁc correlation attacks.
and thus it would seem only more likely to be under adversary con-
trol than an AS.
Resource Endowment. We give the adversary certain endow-
ments of the resource types. We view adversarial institutions –
such as corporations, intelligence agencies, or countries – as the
endowment of the resources they control. For example, the adver-
sary might control all of the ASes in a given country. If the source
or destination ISP is under adversary control, this puts the ISP AS
in the set of adversary assets. If the ISP controls multiple ASes,
these could all be considered adversary assets depending on details
of how the ISP is under adversary control. Similarly companies
that are not end-user ISPs may control multiple ASes [7]. A single
company could also run multiple IXPs. For example, Equinix has
19 IXPs in 17 metropolitan areas worldwide [17].
The fraction or number of individual relays has always been a
measure of adversary endowment for onion routing systems and is
the basis of the c2/n2 risk of individual path compromise (where
c is the number out of n relays that are compromised) [20, 38].
But the Tor path selection protocol weights relay choice by the
bandwidth relays offer. Bandwidth is thus a more accurate mea-
sure of adversary endowment for Tor [6]. Whether using number
of relays or relay bandwidth, type of relay is also a factor. Of the
approximately 3000 current Tor relays, roughly a third are ﬂagged
to be stable and fast enough to serve as entry guards and roughly
a third are considered exits, where these amounts each include re-
lays that are both exits and guards. For an end-to-end correlating
adversary that controls Tor relays, guards and exits are of primary
importance. Combining these leads to guard and/or exit bandwidth
as a still more accurate measure of adversary endowment. Adding
other routing criteria to Tor could affect the impact of adversar-
ial relay endowment in other ways. For example, in latency-aware
routing [35], an adversary with more compromised exits near popu-
lar destinations or likely destinations of a given target source will be
more effective than one with the same exit endowment distributed
differently.
We will consider adversary goals presently, however, we can
note now that allocation of adversary endowment is important to
adversary success. We will discuss in Section 6.1 advantageous
allocation of adversary relay bandwidth among guards and exits.
This allocation could be by chance or it could be that the adversary
has the capability and knowledge to strategically allocate resources.
Analysis of dynamic and responsive strategic allocation of adver-
sary resources against onion routing communication predates Tor
itself. Such responsive allocation might be in order to compromise
existing circuits [38] or to increase the likelihood that future com-
munication will be compromised [6]. Against Congestion-Aware
Tor [45], an adversary might generally mask congestion at a con-
trolled relay by variable padding of processing time, which would
increase the overall fraction of circuits using adversary relays. But
it is also possible to do more targeted attacks, for example, priori-
tizing service for circuits of detected targeted clients to reduce their
experience of congestion. We leave to future work, however, anal-
ysis in the presence of a dynamic, responsive, strategic adversary.
Adversary Goals. Much prior analysis of onion routing security
has been against an adversary with the primary goal of deanonymiz-
ing (linking source and destination) as many circuits as possible. It
is likely, however, that real adversaries will be more focused. For
example, an adversary may wish to compromise as many circuits
as possible for a given user or a given class of user. Or the adver-
sary may wish to identify as many destinations as possible for a
given user or class of user. (Note that these need not be coexten-
sive goals. For example, the user might make a large majority of
339connections to a few destinations, and the adversary wishes to also
know those destinations the user visits rarely.) Or the adversary
may wish to compromise circuits connecting to a given destination
or set of destinations. An adversary may simply wish to know if
speciﬁc sources and destinations ever connect at all or ever connect
during a critical time period.
4.2 Security Metrics
all
Security metrics in general, and for trafﬁc security in particular,
should be deﬁned with respect to a speciﬁc adversary, should be us-
able for assessing security over human timescales, and should allow
estimation of probability of
reasonably-likely relevant
events [37]. Also, most metrics give information either about the
system itself or summarize usage of the system. Examples of these
are compromised fraction of a network resource, entropy, min-
entropy, or compromised fraction of all circuits using the network.
These are important but not ideal for a user who would like to know,
“If I use the system in the following way, how secure am I?” or
“How much can I do the following while maintaining security at
least to level foo?” With this in mind, we use the following metrics
in our analysis:
1. The probability distribution on number of path compromises
for a given user (in a given period).
2. The probability distribution on time until ﬁrst path compromise.
While there are many other interesting and valuable metrics along
these lines, we believe that these are particularly pertinent to the
typical user of Tor. We evaluate these with respect to the adver-
saries described in Section 4.1.
5. METHODOLOGY
We evaluate the security of the Tor network with respect to the
adversaries and metrics that we have proposed. This requires esti-
mation of the probabilities of security events. To do so, we use the
Monte Carlo method to sample how user trafﬁc ﬂows over the net-
work during various types and amounts of user activity. For each
sample, we use a model of the Tor network, simulate the user be-
havior, and simulate the resulting Tor client software actions. We
evaluate the user anonymity of these samples against relay and net-
work adversaries.
5.1 Path Simulator
To enable our evaluation, we built the TorPS path selection sim-
ulator [42], which uses historical network data to recreate the con-
ditions under which clients operated in the past and then executes
path selection algorithms over those conditions given user actions.
TorPS includes a model of the Tor relays and their past states, a
model of user behavior, and a model of the Tor client2. For each
sample simulation, it takes streams produced by the user model
and network states from the network model and uses them as input
to the client model, which chooses circuits and assign streams to
them.
5.1.1 Tor Network Model
TorPS uses data from Tor Metrics [40] to model the past states of
the Tor network. Tor Metrics provides archives of network consen-
suses and server descriptors, which TorPS uses to determine relay
status over time, including ﬂags, exit policies, hibernation state,
and other parameters. Relays that do not appear in a consensus or
do not have a descriptor are taken to be inactive.
2TorPS is based on the code in Tor version 0.2.3.25.
Rank
1
2
3
65312
65313
65314
Port #
8300
6523
26
993
80
443
19.8
20.1
25.3
89.8
90.1
93.0
Exit BW % Long-Lived
Yes
Yes
No
No
No
No
Table 1: Default-accept ports by exit capacity.
Model
Typical
IRC
BitTorrent
WorstPort
BestPorst
Streams/week
2632
135
6768
2632
2632
IPs
205
1
171
205
205
Ports (#s)
2 (80, 443)
1 (6697)
118
1 (6523)
1 (443)
Table 2: User model stream activity.
5.1.2 User Model
In order to understand the security of real users, we develop ﬁve
models of Tor network use, which each consist of a sequence of Tor
streams and the times at which they occur. Streams here include
DNS resolution requests in addition to TCP connections to speciﬁc
destinations. We construct three of our models by using client ap-
plications on the live Tor network and tracing the behavior of our
local Tor client. Each trace consists of 20 minutes of a prescribed
activity. The ﬁve user models we evaluate are as follows:
Typical.
This model is designed to represent average Tor use. It
uses four traces consisting of (i) Gmail / Google Chat, (ii) Google
Calendar / Docs, (iii) Facebook, and (iv) web search activity. These
traces are played every day during the desired period, with one ses-
sion of (i) at 9 a.m., one session of (ii) at 12 p.m., one session of
(iii) at 3 p.m., and two sequential sessions of (iv) starting at 6 p.m.
IRC.
This model represents the use of Tor for the repeated but
exclusive purpose of IRC chat. It uses the trace of a single IRC
session and plays the trace sequentially from 8 a.m.
to 5 p.m.,
Monday through Friday, a total of 27 times each day.
BitTorrent.
This model represents using BitTorrent over Tor. It
consists of activity during the download of a single ﬁle. The model
replays the trace sequentially from 12 a.m. to 6 a.m. on Saturday
and Sunday, totaling 18 replays each day.
WorstPort.
This model modiﬁes the Typical model by replacing
the port numbers with 6523, which is a port used by the “Gobby”
collaborative real-time editor [1]. As Table 1 shows, 6523 is sup-
ported by the second-least amount of exit capacity, excluding ports
that are rejected in the default Tor exit policy. Port 6523 is inter-
esting because it was recently added to the “long-lived ports” by
request [39], indicating that it is in active use. Connecting to ports
designated by Tor as long-lived requires using Stable exit relays,
which must have a higher minimum uptime.
BestPort.
This model modiﬁes the Typical model by replacing
the port numbers with the HTTPS port 443, which, as shown in Ta-
ble 1, is supported by the largest amount of exit capacity.
Table 2 shows the number of streams, unique IP addresses, and
unique ports that appear in each of the user models. The Typical
model contacted a large number of IP addresses relative to the num-
ber of streams, but many of these were from subnets used by Face-
book or Google. The IRC trace only contacted irc.oftc.net.
The BitTorrent trace used a large number of ports, as the client
chose peer ports randomly.
340While these models are limited and somewhat artiﬁcial, we be-
lieve that they actually allow for good estimates of our metrics for
many users. The most relevant properties of user activities are their
number, duration, and destinations. Our user models explore each
of these parameters over a reasonable range, in particular exploring
very good and very bad ports. Moreover, our use of traces exposes
how some popular applications behave according to these parame-
ters, which provides insight into how whole classes of activity are
likely to act.
5.1.3 Tor Client Model
TorPS faithfully mimics the behavior of Tor client software for
creating exit circuits, taking into account features signiﬁcant to
path selection, such as: bandwidth weighting; relay hibernation;
guard selection and rotation; exit policies; family and /16-subnet
conﬂicts; and DNS resolution. A Tor Metrics consensus and its
corresponding descriptors are used as if they were retrieved by the
client when the consensus was published. In a slight deviation from
Tor’s current operation, we use full server descriptor to evaluate a
relay’s exit policy rather than use the microdescriptor format. In
addition, we do not consider hidden services or bridges, although
our methods could easily be used to evaluate the security of both
systems.
By default, TorPS does not account for any side effects stemming
from underlying network performance. That is, when evaluating
basic Tor path selection it behaves as if each circuit construction
succeeds, each circuit experiences the same performance, and cir-
cuits do not fail while being used. Section 7 discusses an extension
to the basic simulator in which network congestion and delays are
taken into account.
5.1.4 Statistical Inference
We use the empirical distribution function that results from TorPS
simulations to infer the probabilities of security events. Let n be the
number of TorPS samples, and let D(x) be the absolute difference
between the empirical CDF and the true CDF at x. The Dvoretzky–
Kiefer–Wolfowitz
that
Inequality
P r[supx D(x) > ] ≤ 2e−2n2.
gives
With all of our simulations we use either n = 100000 or n =
50000. Thus the probability that the CDF of any of our simula-
tions has error of more than 0.01 at any point is at most 2e−10 ≈
9.1× 10−5. We infer fewer than 50 distributions, and therefore the
probability that any one of them has an error at any point of more
than 0.01 is less than 0.0046 by the union bound.
5.2
Internet Map
[46]