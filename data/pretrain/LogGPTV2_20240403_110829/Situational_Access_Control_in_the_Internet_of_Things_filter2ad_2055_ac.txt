can be similarly extended to issue such statements.
3.3 Using ESOs
Creating policies with situational constraints. Different access-
control systems configure policies differently. For example, in Smart-
Things, the user assigns access rights to individual devices during
app installation (see Section A.3). Nest uses the standard OAuth
2access delegation flow. In the resource layer, policies are typically
determined by a higher-level framework, not by the user.
Some frameworks already support rudimentary situational con-
straints, usually proprietary and with different semantics and con-
figuration procedures, e.g., “modes” in SmartThings (see Section A.3)
and “Home/Away Assist” in Nest (see Section A.2).
Our generic design does not prescribe how to generate poli-
cies with situational constraints, as this varies from framework to
framework. We focus on policy enforcement rather than policy gen-
eration. ESOs can help enforce policies that are already popular but
nevertheless not enforced by the existing platforms. In Section 6.3,
we show how to add a wESO-tracked situational condition to any
policy rule in a Web service.
Installing ESOs. rESOs can be installed into the local or home
network directly by the user, but resources at this layer (and their
permissions) are typically controlled by a higher-level framework
that exposes a UI for setting policies. Installing a wESO is as easy
as signing up for a Web service.
Installation includes configuring the ESO and and setting the e-
policy for accessing the ESO’s interface. Configuration is important
when the ESO is based on the user-specific data and preferences
(for example, home location). To specify and enforce the e-policy,
rESOs can use the access-control facilities of the resource layer,
while wESOs can use OAuth 2-style bearer tokens.3
ESOs are not exempt from their environment’s access-control
policies. Like any other entity in an IoT ecosystem, wESOs and
rESOs may request and use access to protected APIs on the Web,
within the home network, on the user’s phone, etc.
Choosing ESOs. ESOs expose an interface, consisting of дet_id()
and ESO_description(), announcing which situation they track.
This is useful for grouping and choosing from among ESOs that
track the same situation, when their URIs are known.
An ESO cannot respond to these queries before it is installed
and therefore cannot be discovered by potential clients. To address
this challenge, we suggest that the maintainers of ESOs create
ESO providers. Providers expose the identities and descriptions of
not-yet-installed ESOs through a Web interface. The URIs of such
providers can be collected and advertised by clients or other parties.
Concretely, an ESO provider exposes the дet_id() method, which,
like the corresponding method in the ESO interface, returns three
values. The first two are identical to what the ESO’s дet_id() would
return. The third value, ESO_provider_description, is an abstract
description of the ESO without specific configuration values. For
example, a provider that tracks the situation “it is dark outside” may
produce location-specific ESOs. Its description can return “This
ESO indicates if it is dark outside, inferred using date and location.”
For an ESO installed by this provider, the ESO_description can
return, for example, “This ESO returns if it is dark outside in Ebbing,
Missouri, United states, using the current date.”
Accessing ESOs. Once an ESO has been installed, clients must
know its URI. For rESOs, the resource layer broadcasts resource
URIs within the home network. As long as an rESO is set as “dis-
coverable,” its authorized clients can identify and use it.4 wESOs,
however, are on the Web. Their URIs should be the same as their
providers’ URIs (if implemented). Either way, multiple wESO in-
stances for multiple clients can be accessed using a single URI.
Within the clients and the wESO service, different wESOs are iden-
tified and distinguished by the OAuth 2 tokens used to access them.
3OAuth 2 tokens are only valid for a certain duration. To avoid wESO denial of service
when enforcing a situation-dependent policy, client frameworks should only grant
tokens that expire before their own e-policy token for accessing the wESO service.
4Resources have identities coupled with cryptographic keys; resource authorization
can ensure that the rESO being used is the one intended—see Appendix A.1.
In Section 6.3, we describe our prototype implementation of a
Web service that lets situational constraints be added to its policy
rules using wESOs and wESO providers. This includes choosing
wESOs, installing them, and setting up access using OAuth 2.
3.4 Limitations
Network and performance overhead. When making a situation-
dependent access-control decision, the reference monitor must
query an ESO and receive an answer. This can be a problem if
latency is crucial or if the access-control system or the network are
request-saturated. In IoT, however, permission-protected accesses
already take place over a network interface (see Section 3.2) and are
thus not likely to be time-critical. Home devices and networks rarely
operate near their maximal request throughput, and we expect that
the capacity for inter-service HTTP requests will scale to support
a large number of services and interactions.
Reliance on third parties. ESOs are third parties (vs. subjects and
objects) in situational access control. An unresponsive or faulty
ESO affects its clients’ functionality, which is problematic if this
functionality is end-to-end and cannot tolerate faults.
In practice, IoT frameworks already rely on third-party com-
ponents for situation tracking (e.g., smartphone geofencing) and
already deal with inconsistent and sometimes erroneous results
(see Section 2.3). Therefore, ESOs are not making situation tracking
worse and may even improve it.
4 THE IOT STACK
IoT devices are typically accessed via vendor-specific controller
apps (vendor apps) that (1) configure and control devices from a
given vendor and may also (2) control compliant devices from other
vendors. Vendor apps may have both Web- and smartphone-based
interfaces. Apps and devices from different vendors interact via
high-level Web APIs and/or directly over a home network (e.g., an
Amazon Echo Plus device can directly control GE lightbulbs).
We briefly survey the IoT software stack depicted in Figure 4.1,
focusing primarily on the layers where access control is performed.
Layer 1: Connectivity. The connectivity layer is responsible for (1)
device-to-device physical transmission and reception (often requir-
ing a common proprietary chip), and (2) low-level device addressing
and routing using IP addresses, typically using proprietary proto-
cols that minimize energy consumption and improve the efficiency
of the home network, and secure device-to-device communication
facilities (e.g., DTLS sockets). Older protocols include IP over Blue-
tooth and Wi-Fi, newer ones include ZigBee, Z-Wave, and Thread.
Layer 2: Resources. The resource layer is responsible for (1) pro-
visioning IoT devices, in particular assigning unique identities asso-
ciated with cryptographic credentials to devices and their owners,
and (2) exposing device capabilities to (possibly remote) clients and
enforcing permissions when clients access the device.
The client API is relatively low-level, exposing only a few primi-
tive methods for invoking device capabilities such as poll, update,
and subscribe to the events of a device-based resource. This is akin
to a distributed Linux-style file system, where files correspond to
resources. Some functions of this layer are decentralized, e.g., per-
mission checks may be performed on multiple devices, while others
are implemented by centralized daemons, e.g., device provisioning.
Resource layer standardization efforts include the OCF standard,
ZigBee/dotdot, Z-Wave, Apple HomeKit Accessory Protocol (HAP),
Insteon, Echonet, IPSO, and others.
The resource layer does not include apps,5 nor does it manage
app installation, activation, removal, and app-identity assignment.
Layer 3: Vendor apps and services. A vendor app typically imple-
ments some functionality using the devices it can access. It can also
expose a Web-based control interface through a service. A service
runs on a cloud infrastructure and manages user accounts. Services
such as Nest are operated by IoT device vendors and control de-
vices in users’ homes. Other services do not control IoT devices (e.g.
Facebook, Instagram) but can interact with services that do.
Layer 4-a: Web APIs. A service may expose a Web API for query-
ing and controlling user data and devices from the same vendor and
compliant devices from other vendors. Other services can access
this interface with the user’s permission. This layer also defines a
permission model and enforces access control. API methods and
permissions are device-specific and higher-level than resource-layer
primitives, e.g., “turn switch on and off.” See Section A.2 for details.
Layer 4-b: (Vendor-)app frameworks. Some vendors provide
frameworks that expose richer programmable interfaces and APIs
to apps that are specifically designed for the framework. In addition
to the APIs for device and data access, a framework can include
an app programming language, an app market for publishing and
distributing apps, app installation and removal interfaces, and APIs
for common UI operations such as app configuration.
An example of an app framework is Samsung SmartThings,
which runs apps on a dedicated hub device and provides device APIs
with abstractions similar to (but less flexible and more high-level
than) a smartphone app framework. Similarly, Apple’s HomeKit
app framework exposes an API for iOS apps to control HomeKit-
compliant smarthome products. Another example is the framework
for Google Assistant apps, which builds on the device’s voice tran-
scription to offer specialized functionality. For example, the Chef
assistant app interactively helps users choose and follow cooking
recipes. Alexa “skills” are similar.
IFTTT is a dedicated Web service that de-
Layer 5-a: IFTTT.
fines yet another abstraction for device operations and user data:
channels, which comprise triggers and actions. Triggers and actions
are provided by third-party partner services (e.g., Nest and Smart-
Things); a few “native” ones are provided by IFTTT itself. Triggers
and actions defined by a partner service use that service’s Web APIs.
For example, the Instagram trigger “any new photo by you” uses
Instagram’s Web API to find and retrieve user’s images.
Any IFTTT user or partner service can create new interactions
between services by writing “if trigger then action” recipes, e.g.,
“publish all Instagram photos to my Facebook profile” or “shut off
the smart blinds when the sun is setting.”
Layer 5-b and Layer 6 deal with third-party apps and applets.
5Lower-level protocol specifications can refer to the resource layer as “application layer.”
Some prior work [2, 28, 32, 45] incorrectly considers resource-layer implementations
such as IoTivity and AllJoyn (now merged into IoTivity) as app frameworks.
Figure 4.1: The IoT stack. wESOs export Web APIs in the service layer; rESOs are local-network resources.
Despite standardization efforts, in practice inter-vendor integra-
tion is still performed in an ad-hoc fashion. For example, Samsung
SmartThings and Nest do not have an integration interface: Smart-
Things does not use the Nest API, and controlling Nest products
via the SmartThings framework is not officially supported. This
does not have a direct impact on the ESOs because they are not
based on inter-vendor integration.
4.1 Access control in IoT
Four types of interactions in the IoT stack are protected by access
control. We describe them generically and then provide detailed
examples in Appendices A.1 through A.4.
Direct resource access is typically performed by the device’s
“owner” app provided by its vendor. To this end, many devices im-
plement a standardized communication protocol such as ZigBee,
Z-Wave, or the OCF standard. Devices become accessible to ven-
dor apps and other devices by acting as resource-layer servers that
export resources (“endpoints” in Z-Wave, “application objects” in
ZigBee). Resources can be accessed by other servers (typically, other
devices) or by resource-layer clients, such as a hub that controls de-
vices. Clients and servers have identities that can be used to specify
resource permissions on servers. Permissions for this low-level
interface are typically set by the vendor app so that they comply
with its higher-level policies. Resource-layer standards do not sup-
port situational constraints at all. A representative example of a
resource-layer standard is the OCF Standard (see Appendix A.1).
App-service interactions are performed via app-framework
APIs such as Samsung SmartThings that may use a permission
model to constrain API access. We explain SmartThings’ SmartApps
access control in Appendix A.3.
Service-service interactions typically involve accesses via Web
APIs, although vendors can also program their respective devices
to interact directly or via mobile APIs. A representative example is
Nest API (see Appendix A.2).
Channel-recipe interactions are based on the service-service
integrations defined in IFTTT. See Appendix A.4 for details.
As explained in Section 3.2, to serve access-control frameworks
within the home network (e.g., local apps on app frameworks with
direct resource-layer access), rESOs are integrated into the resource
layer. To serve access-control frameworks that run on the Web,
wESOs export Web APIs—see Figure 4.1.
(a) rESOs as OCF resources; IoTivity server enforces situational constraints
(b) wESOs as token-protected Web interfaces; token-protected Web service en-
forces situational constraints
Figure 5.1: Resource layer and Web ESOs integrated into ac-
cess control in IoT.
5 RESOURCE-LAYER ESOS
rESOs can export interfaces through any resource-layer protocol
such as ZigBee, Z-Wave, or the OCF standard. The three standards
have similar abstractions. For Z-Wave, we were unable to locate pub-
lic details about access-control standardization (if any). In ZigBee,
access control is supposedly standardized by a recently advertised
specification, “dotdot”, which is not publicly available. Therefore,
we focus on the OCF standard and its open-source implementation,
IoTivity. IoTivity is supported and maintained by hundreds of IoT
vendors, with major companies such as Microsoft, Samsung, Intel,
Qualcomm, and others leading the implementation.
Our rESOs are resources registered by a server process. Their
query interfaces, with the дet_id() and is_active() methods, are
exported via the permission-protected read operation and can be
accessed only from authorized clients (see Appendix A.1). rESOs
can be installed and configured directly by users, but servers are
typically installed by a higher layer, i.e., a service or app framework.
It can subsequently signal to the SC that the operation has ended
organically and there is no need to query further.
5.1 Situational access control in IoTivity
IoTivity, coded in C and C++, facilitates OCF client and server de-
velopment. For clients, it supports APIs for issuing asynchronous
requests; for servers, it supports an API for resource registration,
allowing the server to associate resource identifiers with request
handlers. IoTivity handles associating requests with registered re-
source methods, as well as access control. Every client and server
must provide a JSON file with configuration resource values.
We changed IoTivity’s implementation of an OCF server to sup-
port ESO-based situational access control as described below.
Server enforcement before change. Incoming requests from the
network are handled asynchronously. First, the communication
middleware pushes them onto a task queue. One or more han-
dler threads sequentially pulls requests from the queue and calls
into the secure resource manager (SRM), which is the IoTivity
reference monitor. The SRM constructs a request context object
to track requests throughout the process of authorization and ex-
ecution. This object contains the authenticated identifier of the
remote requester and network-level identifiers, whether or not the
request was granted, and other metadata (e.g., the accessed method
and URI). It then invokes the CheckPermission(requestContext)
method, which has the following logic. First, it checks if the request
is from the device owner or resource owner for configuration re-
sources, and if so, approves. Then, it iterates over ACEs and tries to
find a match for the object and subject. If the request is approved,
the SRM calls into the resource access handler.
Server enforcement after change. We changed the JSON schema
for /acl configuration, as well the corresponding parsing code,
to add an optional field to every ACE that specifies the situation
identifier. If the ACE contains a situation identifier, the request
context is passed onto the situation client (SC) module that handles