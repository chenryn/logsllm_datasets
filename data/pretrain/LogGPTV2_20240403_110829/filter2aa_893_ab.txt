selected.  This username will subsequently be passed to strAuthCheck, which will ensure 
our validation.  It is also possible to use another row’s data, using single result cycling 
techniques, which will be discussed later. 
© 2002 SPI Dynamics, Inc. All Right Reserved. No reproduction or redistribution without written permission.  
Page 7 
3.2. SELECT 
For other situations, you must reverse-engineer several parts of the vulnerable web 
application's SQL query from the returned error messages.  In order to do this, you must know 
what the error messages that you are presented with mean and how to modify your injection 
string in order to defeat them. 
3.2.1. Direct vs. Quoted 
The first error that you are normally confronted with is the syntax error.  A syntax error 
indicates that the query does not conform to the proper structure of an SQL query.  The first 
thing that you need to figure out is whether injection is possible without escaping quotation. 
In a direct injection, whatever argument you submit will be used in the SQL query 
without any modification.  Try taking the parameter's legitimate value and appending a space 
and the word "OR" to it.  If that generates an error, direct injection is possible.  Direct values 
can be either numeric values used in WHERE statements, like this: 
SQLString = "SELECT FirstName, LastName, Title FROM Employees
WHERE Employee = " & intEmployeeID
Or the argument of an SQL keyword, such as table or column name, like this: 
SQLString = "SELECT FirstName, LastName, Title FROM Employees
ORDER BY " & strColumn
All other instances are quoted injection vulnerabilities.  In a quoted injection, whatever 
argument you submit has a quote prepended and appended to it by the application, like this: 
SQLString = "SELECT FirstName, LastName, Title FROM Employees
WHERE EmployeeID = '" & strCity & "'"
In order to “break out” of the quotes and manipulate the query while maintaining valid 
syntax, your injection string must contain a single quote before you use an SQL keyword, and 
end in a WHERE statement that needs a quote appended to it.  And now to address the problem 
of “cheating”.  Yes, SQL Server will ignore everything after a “;--”, but it's the only server 
that does that.  It's better to learn how to do this the "hard way" so that you'll know how to do 
this if you run into an Oracle, DB/2, MySQL or any other kind of database server. 
© 2002 SPI Dynamics, Inc. All Right Reserved. No reproduction or redistribution without written permission.  
Page 8 
3.2.2. Basic UNION 
Figure 1: Syntax breaking on direct injection 
Figure 2: Syntax breaking on a quoted injection 
© 2002 SPI Dynamics, Inc. All Right Reserved. No reproduction or redistribution without written permission.  
Page 9 
SELECT queries are used to retrieve information from a database.  Most web 
applications that use dynamic content of any kind will build pages using information returned 
from SELECT queries.  Most of the time, the part of the query that you will be able to 
manipulate will be the WHERE clause.  The way to modify a query from within a WHERE clause 
to make it return records other than those intended is to inject a UNION SELECT.  A UNION
SELECT allows multiple SELECT queries to be specified in one statement.  They look 
something like this: 
SELECT CompanyName FROM Shippers WHERE 1 = 1 UNION ALL SELECT
CompanyName FROM Customers WHERE 1 = 1
This will return the recordsets from the first query and the second query together.  The 
ALL is necessary to escape certain kinds of SELECT DISTINCT statements and doesn't 
interfere otherwise, so it’s best to always use it.  It is necessary to make sure that the first 
query, the one that the web application’s developer intended to be executed, returns no records.  
This is not difficult.  Let's say you're working on a script with the following code: 
SQLString = "SELECT FirstName, LastName, Title FROM Employees
WHERE City = '" & strCity & "'"
And use this injection string: 
' UNION ALL SELECT OtherField FROM OtherTable WHERE ''='
This will result in the following query being sent to the database server: 
SELECT FirstName, LastName, Title FROM Employees WHERE City =
'' UNION ALL SELECT OtherField FROM OtherTable WHERE ''=''
Here's what will happen:  the database engine goes through the Employees table, 
looking for a row where City is set to nothing.  Since it will not find a row where City is 
nothing, no records will be returned.  The only records that will be returned will be from the 
injected query.  In some cases, using nothing will not work because there are entries in the 
table where nothing is used, or because specifying nothing makes the web application do 
something else.  All you have to do is specify a value that does not occur in the table.  Just put 
something that looks out of the ordinary as best you can tell by looking at the legitimate values.  
When a number is expected, zero and negative numbers often work well.  For a text argument, 
simply use a string such as "NoSuchRecord", "NotInTable", or the ever-popular 
"sjdhalksjhdlka".  Just as long as it won't return records. 
It would be nice if all of the queries used in web applications were as simple as the ones 
above.  However, this is not the case.  Depending on the function of the intended query as well 
as the habits of the developer, you may have a tough time breaking the syntax error. 
© 2002 SPI Dynamics, Inc. All Right Reserved. No reproduction or redistribution without written permission.  
Page 10 
3.2.3. Query enumeration with syntax errors 
Some database servers return the portion of the query containing the syntax error in 
their error messages.  In these cases you can “bully” fragments of the SQL query from the 
server by deliberately creating syntax errors.  Depending on the way that the query is designed, 
some strings will return useful information and others will not.  Here's my list of suggested 
attack strings: 
'
BadValue'
'BadValue
' OR '
' OR
;
9,9,9
Often several of those strings will return the same or no information, but there are 
instances where only one of them will give you helpful information.  Again, always be 
thorough.  Try all of them. 
3.2.4. Parenthesis 
© 2002 SPI Dynamics, Inc. All Right Reserved. No reproduction or redistribution without written permission.  
Page 11 
Figure 3: Parenthesis breaking on a quoted injection 
If the syntax error contains a parenthesis in the cited string (such as the SQL Server 
message used in the example below) or you get a message that explicitly complains about 
missing parentheses (Oracle does this), add a parenthesis to the bad value part of your injection 
string, and one to the WHERE clause.  In some cases, you may need to use two or more 
parentheses.  Here’s the code used in parenthesis.asp: 
mySQL="SELECT LastName, FirstName, Title, Notes, Extension FROM Employees
WHERE (City = '" & strCity & "')"
So, when you inject the value “') UNION SELECT OtherField FROM OtherTable
WHERE (''='”, the following query will be sent to the server: 
SELECT LastName, FirstName, Title, Notes, Extension FROM
Employees WHERE (City = '') UNION SELECT OtherField From
OtherTable WHERE (''='') 
© 2002 SPI Dynamics, Inc. All Right Reserved. No reproduction or redistribution without written permission.  
Page 12 
3.2.5. LIKE queries 
Figure 4: LIKE breaking on a quoted injection 
Another common debacle is being trapped in a LIKE clause.  Seeing the LIKE 
keyword or percent signs cited in an error message are indications of this situation.  Most 
search functions use SQL queries with LIKE clauses, such as the following: 
© 2002 SPI Dynamics, Inc. All Right Reserved. No reproduction or redistribution without written permission.  
Page 13 
SQLString = "SELECT FirstName, LastName, Title FROM Employees
WHERE LastName LIKE '%" & strLastNameSearch & "%'"
The percent signs are wildcards, so in this case, the WHERE clause would return true in 
any case where strLastNameSearch appears anywhere in LastName.  In order to stop 
the intended query from returning records, your bad value must be something that none of the 
values in the LastName field contain.  The string that the web application appends to the user 
input, usually a percent sign and single quote (and often parenthesis as well), needs to be 
mirrored in the WHERE clause of the injection string.  Also, using nothing as your bad values 
will make the LIKE argument “%%”, resulting in a full wildcard, which returns all records.  The 
second screenshot shows a working injection query for the above code. 
3.2.6. Dead Ends 
There are situations that you may not be able to defeat without an enormous amount of 
effort or even at all.  Occasionally you'll find yourself in a query that you just can't seem to 
break.  No matter what you do, you get error after error after error.  Lots of the time this is 
because you're trapped inside a function that's inside a WHERE clause that's in a subselect 
which is an argument of another function whose output is having string manipulations 
performed on it and then used in a LIKE clause which is in a subselect somewhere else.  Or 
something like that.  Not even SQL Server's “;--” can rescue you in those cases. 
3.2.7. Column number mismatch 
© 2002 SPI Dynamics, Inc. All Right Reserved. No reproduction or redistribution without written permission.  
Page 14 
© 2002 SPI Dynamics, Inc. All Right Reserved. No reproduction or redistribution without written permission.  
Page 15 
© 2002 SPI Dynamics, Inc. All Right Reserved. No reproduction or redistribution without written permission.  
Page 16 
Figure 5:  Column number matching 
If you can get around the syntax error, the hardest part is over.  The next error message 
you get will probably complain about a bad table name.  Choose a valid system table name 
from the appendix that corresponds to the database server that you're up against. 
You will then most likely be confronted with an error message that complains about the 
difference in number of fields in the SELECT and UNION SELECT queries.  You need to find 
© 2002 SPI Dynamics, Inc. All Right Reserved. No reproduction or redistribution without written permission.  
Page 17 
out how many columns are requested in the legitimate query.  Let's say that this is the code in 
the web application that you’re attacking: 
SQLString = SELECT FirstName, LastName, EmployeeID FROM
Employees WHERE City = '" & strCity "'"
The legitimate SELECT and the injected UNION SELECT need to have an equal 
number of columns in their WHERE clauses.  In this case, they both need three.  Not only that, 
but their column types need to match as well.  If FirstName is a string, then the 
corresponding field in your injection string needs to be a string as well.  Some servers, such as 
Oracle, are very strict about this.  Others are more lenient and allow you to use any data type 
that can do implicit conversion to the correct data type.  For example, in SQL Server, putting 
numeric data in a varchar's place is okay, because numbers can be converted to strings 
implicitly.  Putting text in a smallint column, however, is illegal because text cannot be 
converted to an integer.  Because numeric types often convert to strings easily but not vice 
versa, use numeric values by default. 
To determine the number of columns you need to match, keep adding values to the 
UNION SELECT clause until you stop getting a column number mismatch error.  If a data 
type mismatch error is encountered, change the type of data of the column you entered from a 
number to a literal.  Sometimes you will get a conversion error as soon as you submit an 
incorrect data type.  Other times, you will only get the conversion message once you've 
matched the correct number of columns, leaving you to figure out which columns are the ones 
that are causing the error.  When the latter is the case, matching the value types can take a very 
long time, since the number of possible combinations is two raised to number of columns in the 
query.  Oh, did I mention that 40 column SELECTs are not terribly uncommon? 
If all goes well, you should get back a page with the same formatting and structure as a 
legitimate one.  Wherever dynamic content is used you should have the results of your 
injection query. 
© 2002 SPI Dynamics, Inc. All Right Reserved. No reproduction or redistribution without written permission.  
Page 18 
3.2.8. Additional WHERE columns 
Figure 6:  Additional WHERE column breaking 
Sometimes your problem may be additional WHERE conditions that are added to the 
query after your injection string.  Take this line of code for instance: 
SQLString = "SELECT FirstName, LastName, Title FROM Employees
© 2002 SPI Dynamics, Inc. All Right Reserved. No reproduction or redistribution without written permission.  
Page 19 
WHERE City = '" & strCity & "' AND Country = 'USA'"
Trying to deal with this query like a simple direct injection would yield a query like 
this: 
SELECT FirstName, LastName, Title FROM Employees WHERE City =
'NoSuchCity' UNION ALL SELECT OtherField FROM OtherTable WHERE
1=1 AND Country = 'USA'
Which yields an error message such as: 
[Microsoft][ODBC SQL Server Driver][SQL Server]Invalid column
name 'Country'.
The problem here is that your injected query does not have a table in the FROM clause 
that contains a column named 'Country' in it.  There are two ways of solving this problem: 
cheat and use the “;--” terminator if you're using SQL Server, or guess the name of the table 
that the offending column is in and add it to your FROM.  Use the attack queries listed in 
section 3.2.3 to try and get as much of the legitimate query back as possible. 
3.2.9. Table and field name enumeration 
© 2002 SPI Dynamics, Inc. All Right Reserved. No reproduction or redistribution without written permission.  
Page 20 
Figure 7: Table and field name enumeration 
Now that you have injection working, you have to decide what tables and fields you 
want to retrieve information from.  With SQL Server, you can easily get all of the table and 
column names in the database.  With Oracle and Access you may or may not be able to do this, 
depending on the privileges of the account that the web application is accessing the database 
with.  The key is to be able to access the system tables that contain the table and column 
names.  In SQL Server, they are called 'sysobjects' and 'syscolumns', respectively.  
(There is a list of system tables for other database servers at the end of this document. You will 
also need to know relevant column names in those tables).  In these tables there will be listings 