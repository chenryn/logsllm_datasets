title:The Cracked Cookie Jar: HTTP Cookie Hijacking and the Exposure of
Private Information
author:Suphannee Sivakorn and
Iasonas Polakis and
Angelos D. Keromytis
2016 IEEE Symposium on Security and Privacy
2016 IEEE Symposium on Security and Privacy
The Cracked Cookie Jar: HTTP Cookie Hijacking
and the Exposure of Private Information
Suphannee Sivakorn∗, Iasonas Polakis∗ and Angelos D. Keromytis
Department of Computer Science
Columbia University, New York, USA
{suphannee, polakis, angelos}@cs.columbia.edu
∗
Joint primary authors
Abstract—The widespread demand for online privacy, also
fueled by widely-publicized demonstrations of session hijacking
attacks against popular websites, has spearheaded the increasing
deployment of HTTPS. However, many websites still avoid ubiq-
uitous encryption due to performance or compatibility issues. The
prevailing approach in these cases is to force critical functionality
and sensitive data access over encrypted connections, while
allowing more innocuous functionality to be accessed over HTTP.
In practice, this approach is prone to ﬂaws that can expose
sensitive information or functionality to third parties.
In this paper, we conduct an in-depth assessment of a diverse
set of major websites and explore what functionality and infor-
mation is exposed to attackers that have hijacked a user’s HTTP
cookies. We identify a recurring pattern across websites with
partially deployed HTTPS; service personalization inadvertently
results in the exposure of private information. The separation
of functionality across multiple cookies with different scopes
and inter-dependencies further complicates matters, as imprecise
access control renders restricted account functionality accessible
to non-session cookies. Our cookie hijacking study reveals a
number of severe ﬂaws; attackers can obtain the user’s home
and work address and visited websites from Google, Bing and
Baidu expose the user’s complete search history, and Yahoo
allows attackers to extract the contact list and send emails from
the user’s account. Furthermore, e-commerce vendors such as
Amazon and Ebay expose the user’s purchase history (partial
and full respectively), and almost every website exposes the
user’s name and email address. Ad networks like Doubleclick
can also reveal pages the user has visited. To fully evaluate the
practicality and extent of cookie hijacking, we explore multiple
aspects of the online ecosystem, including mobile apps, browser
security mechanisms, extensions and search bars. To estimate
the extent of the threat, we run IRB-approved measurements
on a subset of our university’s public wireless network for
30 days, and detect over 282K accounts exposing the cookies
required for our hijacking attacks. We also explore how users
can protect themselves and ﬁnd that, while mechanisms such as
the EFF’s HTTPS Everywhere extension can reduce the attack
surface, HTTP cookies are still regularly exposed. The privacy
implications of these attacks become even more alarming when
considering how they can be used to deanonymize Tor users. Our
measurements suggest that a signiﬁcant portion of Tor users may
currently be vulnerable to cookie hijacking.
I. INTRODUCTION
With an ever-increasing part of our everyday life revolving
around the Internet and a large amount of personal data
being uploaded to services, ensuring the privacy of our digital
communications has become a critical and pressing matter. In
the past few years, there has been much discussion regarding
the necessity of securing web connections from prying eyes.
The publicity garnered by the Firesheep extension [1], which
demonstrated how easily attackers can hijack a user’s session,
was a catalyst in expediting migration of critical user activity
to mandatory HTTPS connections in major services (e.g.,
transmitting user credentials during the log-in process).
Nonetheless, many major websites continue to serve content
over unencrypted connections, which exposes the users’ HTTP
cookies to attackers monitoring their trafﬁc. Not enforcing
ubiquitous encrypted connections may be attributed to various
reasons, ranging from potential increases to infrastructure costs
and the loss of in-network functionality [2] to maintaining
support for legacy clients. If access control policies correctly
separated privileges of authenticated (e.g., session cookies)
and non-authenticated cookies (e.g., persistent tracking cook-
ies), stolen HTTP cookies would not allow attackers to obtain
any personal user information. However, that is not the case
in practice [3], and things become worse as services continue
to sacriﬁce security over usability. Websites assign privileges
to HTTP cookies to personalize functionality, as it improves
user experience, but avoid requesting re-authentication unless
absolutely necessary, as it impacts user engagement. While
session hijacking has been extensively explored, limited at-
tention has been given to the privacy risks of non-session
cookies being hijacked; Castelluccia et al. [4] demonstrated
how stolen HTTP cookies could allow attackers to reconstruct
a user’s Google search history.
A subset of the problem we explore has been highlighted in
studies that measured the exposure of personal or personally
identiﬁable information (PII) in unencrypted trafﬁc [5]–[8].
However,
those studies are limited by nature and do not
capture the full extent of the privacy threat that users face
due to unencrypted connections. First, modern websites are
highly dynamic and information can be fetched in obfuscated
form and constructed on the client-side at runtime. Second,
websites may only serve private information over encrypted
connections, while ﬂawed access control separation renders
that information accessible to HTTP cookies (we demonstrate
this with Google Maps exposing a user’s address in Google
Search). Third, eavesdropping is limited to the user’s actions
for a speciﬁc time window, and certain pieces of information
require speciﬁc actions to be exposed, which may not occur
during the monitoring period. Fourth, we ﬁnd that stolen HTTP
2375-1207/16 $31.00 © 2016 IEEE
© 2016, Suphannee Sivakorn. Under license to IEEE.
DOI 10.1109/SP.2016.49
DOI 10.1109/SP.2016.49
724
724
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:10:26 UTC from IEEE Xplore.  Restrictions apply. 
cookies can also access account functionality, both explicitly
(e.g., send an email from the user’s account) and implicitly
(e.g., receive personalized query results from a search engine).
In this paper, we explore the extent and severity of the un-
safe practice followed by major services of partially adopting
encrypted connections, and its ramiﬁcations for user privacy.
We demonstrate how HTTP cookie hijacking attacks not only
enable access to private and sensitive user information, but can
also circumvent authentication requirements and gain access
to protected account functionality. To our knowledge, this
is the ﬁrst in-depth study exploring the privacy implications
of partial adoption of HTTPS. We audit 25 major services,
selected from a variety of categories that
include search
engines and e-commerce sites. In each case, we analyze the
use of HTTP cookies, the combination of cookies required to
expose different types of information and functionality, and
search for inconsistencies in how cookies are evaluated. This
allows us to obtain a comprehensive understanding of the
feasibility and impact of this class of attacks in practice. We
uncover ﬂaws in major websites that allow attackers to obtain
a plethora of sensitive user information and also to access
protected account functionality. As a precautionary measure,
we conduct all experiments on our personal or test accounts.
We conduct an IRB-approved measurement study on a sub-
set of our university’s public wireless network, to understand
the browsing behavior of users when connected to unprotected
public networks. On average, we detect more than 8K unique
accounts exposing their cookies for hijacking each day. Our
measurements have the sole purpose of estimating the number
of users that are susceptible to hijacking attacks; we do not
access any user accounts, collect any personal information,
or attempt to deanonymize any users.
Furthermore, we look at multiple practical aspects of cookie
hijacking, and identify how each component of this intricate
ecosystem can impact the attacks. We ﬁnd that partial deploy-
ment of HSTS, a security mechanism which is gaining traction
and supported by modern browsers, does not present an actual
obstacle to cookie hijacking, as unencrypted connections to
certain pages or subdomains of a service still expose the
cookies. Furthermore, client-side mechanisms like the HTTPS
Everywhere extension can reduce the attack surface, but can
not protect users when websites do not support ubiquitous
encryption. We also ﬁnd that both Chrome and Firefox have
a multitude of components that expose users’ cookies. And
while the apps we test are considerably more secure in Android
than in iOS, both platforms have ofﬁcial apps with millions
of users that use unencrypted connections.
Due to the practicality of these attacks and the pervasive-
ness of the vulnerable websites, we investigate how cookie
hijacking can lead to the deanonymization of Tor users. In
our IRB-approved study, we ﬁnd that 75% of the outgoing
connections from a new exit node are over HTTP. Based
on the comparison to the respective measurements from our
university’s wireless network, we believe that a large number
of Tor users may be exposed to HTTP cookie hijacking and
susceptible to deanonymization.
is twofold. First,
Overall, our goal
to alert developers
of the pitfalls of partially enforcing HTTPS while offering
personalized functionality. Second, to inform users about the
protection offered by popular security and privacy-enhancing
systems and the caveats of not knowing the precise extent of
their protection. The main contributions of this paper are:
• We conduct an in-depth study on the impact and gravity
of HTTP cookie hijacking attacks against major services.
Our ﬁndings demonstrate that a wide range of private
information and protected account functionality is acces-
sible. The diversity of these websites suggests that this is
a widespread systemic risk of unencrypted connections,
and not a topical threat against a speciﬁc class of sites.
• Our measurement study demonstrates the extent of the
risk; we monitor part of our university’s public wireless
network over the course of one month, and identify
over 282K user accounts that exposed the HTTP cookies
required for the hijacking attacks.
• Our analysis on the collateral exposure of cookies shows
that browser extensions, search bars, and mobile apps of
major vendors expose millions of users to risk.
• We explore how HSTS can impact HTTP cookie hi-
jacking. We demonstrate that partial deployment renders
the mechanism ineffective, as a single unencrypted con-
nection may be sufﬁcient for an attacker to obtain the
required cookies.
• We describe how major websites can be used as
deanonymization vectors against users that rely on the Tor
bundle for anonymity, and ﬁnd that existing mechanisms
cannot adequately protect users.
• We disclosed our ﬁndings to the services we audited
and the Tor community, in an effort to assist them in
protecting their users from this signiﬁcant privacy threat.
The remainder of this paper is structured as follows: in
Section II we offer background information, and motivation
for our work through a network trafﬁc study. In Section III
we offer details on our analysis of cookie hijacking attacks
against popular services, and explore the collateral exposure
of user cookies by mobile apps and browser components in
Section IV. We explore the deanonymization risk that Tor
users face in Section V, and discuss general countermeasures
against cookie hijacking in Section VI. We address the ethical
aspects of our research in Section VII, discuss related work
in Section VIII, and conclude in Section IX.
II. BACKGROUND, THREAT MODEL, AND MOTIVATION
In this section we provide a short description of the security
mechanisms supported by browsers for protecting users’ com-
munications, an overview of our threat model, and motivation
through a network trafﬁc analysis study.
A. Browser security mechanisms
In recent years, browsers have included support for various
security mechanisms that are designed to protect users from
a range of attacks (e.g., [9], [10]). The one most relevant to
our work is HSTS, as it can prevent HTTP cookie hijacking
725725
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:10:26 UTC from IEEE Xplore.  Restrictions apply. 
Fig. 1. Workﬂow of an HTTP cookie hijacking attack. After the victim’s cookies are exposed on the unencrypted connection 1 and stolen 2 , the attacker
can append the stolen cookies when browsing the target websites
3 and gain access to the victim’s personal information and account functionality 4 .
attacks. However, we also mention certiﬁcate pinning, as
it is employed in Chrome and Firefox through the HSTS
preloading mechanism. We refer the reader to [11] for a more
detailed description of HSTS and certiﬁcate pinning.
HSTS. The HTTP Strict Transport Security mecha-
nism [12] allows websites to instruct browsers to only ini-
tiate communication over HTTPS. This is done through the
Strict-Transport-Security HTTP header. HSTS is
currently supported by all major browsers, and certain mobile
browsers [13]. A noteworthy point of failure is during the
user’s initial request, before the HSTS header is received,
which exposes the user to hijacking if sent over HTTP. As
a precautionary measure, major browsers rely on a “preloaded
list” which proactively instructs them to connect to domains
over HTTPS. This protects users during the initial request to
a website, and websites can request to be included in the list
through an online form1. HSTS preloading is currently sup-
ported by Chrome, Firefox, Safari, and Internet Explorer [14].
Certiﬁcate pinning. Adversaries may create or obtain
fraudulent certiﬁcates that allow them to impersonate websites
as part of man-in-the-middle attacks [15]. To prevent that,
websites can specify a (limited) set of hashes for certiﬁcates in
the website’s X.509 public key certiﬁcate chain. Browsers are
allowed to establish a secure connection to the domain only if
at least one of the predeﬁned pinned keys matches one in the
certiﬁcate chain presented. This was proposed as an extension
to HSTS [16], and is currently supported by (at least) Firefox
and Chrome. The recent HPKP speciﬁcation [17] describes an
HTTP response header ﬁeld for pinning certiﬁcates.
B. Threat model
Depending on the attacker’s ability and resources, a user’s
HTTP cookies can be hijacked through several techniques.
To demonstrate the severity of the threat, we assume the
role of a weak adversary and conduct experiments through
passive eavesdropping. Nonetheless, we also investigate cookie
characteristics that could be exploited by active adversaries for
increasing the scale of the attacks.
1https://hstspreload.appspot.com/
HTTP cookie hijacking. The adversary monitors the trafﬁc
of a public wireless network, e.g., that of a university campus
or coffee shop. Figure 1 presents the workﬂow of a cookie
hijacking attack. The user connects to the wireless network to
browse the web. The browser appends the user’s HTTP cookies
to the requests sent in cleartext over the unencrypted connec-
tion ( 1 ). The trafﬁc is being monitored by the eavesdropper
who extracts the user’s HTTP cookies from the network trace
( 2 ), and connects to the vulnerable services using the stolen
cookies ( 3 ). The services “identify” the user from the cookies
and offer a personalized version of the website, thus, exposing
the user’s personal information and account functionality to the
adversary ( 4 ).
Cookie availability. These attacks require the user to have
previously logged into the service, for the required cookies to
be available. Having closed the browser since the previous log
in does not affect the attacks, as these cookies persist across
browsing sessions.
Active adversary. Attackers can follow more active ap-
proaches, which increase the scale of the attack or remove the
requirement of physical proximity to the victims, i.e., being
within range of the same WiFi access point. This also enables
more invasive attacks. For example, the attacker can inject
content to force the user’s browser to send requests to speciﬁc
vulnerable websites and expose the user’s cookies, even if the
user does not explicitly visit those sites. This could be achieved
by compromising the wireless access point or scanning for
and compromising vulnerable routers [18]. Furthermore, if
the HTTP cookies targeted by the attacker do not have the
HttpOnly ﬂag set [19], they can be obtained through other
means, e.g., XSS attacks [20]. Users of major services can also
be exposed to such attacks from afﬁliated ad networks [21].
State-level adversary. In the past few years there have
been many revelations regarding mass user surveillance by
intelligence agencies (e.g., the NSA [22]). Such entities could
potentially deploy HTTP cookie hijacking attacks for ob-
taining access to users’ personal information. Reports have
disclosed that GCHQ and NSA have been collecting user
cookies at a large scale as part of user-tracking programs [23],
[24]. As we demonstrate in Section III, these collected cookies
726726
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:10:26 UTC from IEEE Xplore.  Restrictions apply. 
STATISTICS OF OUTGOING CONNECTIONS FROM A SUBSET OF OUR
CAMPUS’ PUBLIC WIRELESS NETWORK FOR 30 DAYS.
TABLE I
Protocol
Connections
Requests
Vulnerable
Requests*
HTTP
HTTPS
685,500,365
1,398,044,178
29,908,099
772,562,024
–
–
Exposed
Accounts
282,459
–
*HTTP requests to domains that we have audited and found to be vulnerable.
could be used to amass a large amount of sensitive information
that is exposed by major websites. Furthermore, in Section V
we discuss how Tor users, who are known to be targeted by
intelligence agencies [25], can be deanonymized through the
hijacked HTTP cookies of major services.
C. Motivation - Network Trafﬁc Study
The feasibility of cookie hijacking attacks by eavesdroppers
is dependant on the browsing behavior of users when con-
nected to public wireless networks. If users only visit websites
with ubiquitous encryption or employ VPN tunneling solu-
tions, HTTP cookie hijacking can be prevented. We conduct
an exploratory study of the trafﬁc passing through the public
wireless network of our university’s campus.
IRB. Before conducting any experiments, we submitted a
request to our Institutional Review Board that clearly de-
scribed our research goals, collection methodology, and the
type of data to be collected. Once the request was approved,
we worked closely with the Network Security team of our
university’s IT department for conducting the data collection
and analysis in a secure and privacy-preserving manner.
Data collection. In order to collect the data, we setup a
logging module on a network tap that received trafﬁc from
multiple wireless access points positioned across our campus.
The RSPAN was ﬁltered to only forward outgoing trafﬁc
destined to TCP ports 80 and 443, and had a throughput of 40-
50 Mb/s, covering approximately 15% of the public wireless
outgoing trafﬁc. Our data collection lasted for 30 days. We
used the number of TCP SYN packets to calculate the number
of connections. When the connection is over HTTP or HTTPS,
we capture the destination domain name through the HTTP
host header and the TLS SNI extension respectively. For each
HTTP request we log the destination domain, and the name of
any HTTP cookies appended (e.g., SID). We also calculated a
HMAC of the cookie’s value (the random key was discarded
after data collection). The cookie names allow us to verify
that users are logged in and susceptible to cookie hijacking
for each service, as we have explored the role of each cookie
and also identiﬁed the subset required for the complete attack
(described in Section III).
While we do not log the cookie value for privacy reasons,
the keyed hash value allows us to distinguish the same user
within a service to obtain a more accurate estimation of the
number of exposed accounts. We must note that our approach
has limitations, as the numbers we estimate may be higher
than the actual numbers; a user’s cookie value may have
)
g
o
l
(
s
t
n
u
o
c
c
A