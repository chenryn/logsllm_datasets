mode
The mode= form of the $if directive is used to test whether Readline
is in emacs or vi mode. This may be used in conjunction with the
‘set keymap’ command, for instance, to set bindings in the emacs-
standard and emacs-ctlx keymaps only if Readline is starting out
in emacs mode.
term
The term= form may be used to include terminal-speciﬁc key bind-
ings, perhaps to bind the key sequences output by the terminal’s
function keys. The word on the right side of the ‘=’ is tested against
both the full name of the terminal and the portion of the terminal
name before the ﬁrst ‘-’. This allows sun to match both sun and
sun-cmd, for instance.
application
The application construct is used to include application-speciﬁc set-
tings. Each program using the Readline library sets the application
name, and you can test for a particular value. This could be used to
bind key sequences to functions useful for a speciﬁc program. For
instance, the following command adds a key sequence that quotes
the current or previous word in Bash:
$if Bash
# Quote the current or previous word
"\C-xq": "\eb\"\ef\""
$endif
$endif
This command, as seen in the previous example, terminates an $if command.
$else
Commands in this branch of the $if directive are executed if the test fails.
$include
This directive takes a single ﬁlename as an argument and reads commands
and bindings from that ﬁle. For example, the following directive reads from
‘/etc/inputrc’:
$include /etc/inputrc
1.3.3 Sample Init File
Here is an example of an inputrc ﬁle. This illustrates key binding, variable assignment, and
conditional syntax.
Chapter 1: Command Line Editing
11
# This file controls the behaviour of line input editing for
# programs that use the GNU Readline library.
Existing
# programs include FTP, Bash, and GDB.
#
# You can re-read the inputrc file with C-x C-r.
# Lines beginning with ’#’ are comments.
#
# First, include any systemwide bindings and variable
# assignments from /etc/Inputrc
$include /etc/Inputrc
#
# Set various bindings for emacs mode.
set editing-mode emacs
$if mode=emacs
Meta-Control-h:
backward-kill-word Text after the function name is ignored
#
# Arrow keys in keypad mode
#
#"\M-OD":
backward-char
#"\M-OC":
forward-char
#"\M-OA":
previous-history
#"\M-OB":
next-history
#
# Arrow keys in ANSI mode
#
"\M-[D":
backward-char
"\M-[C":
forward-char
"\M-[A":
previous-history
"\M-[B":
next-history
#
# Arrow keys in 8 bit keypad mode
#
#"\M-\C-OD":
backward-char
#"\M-\C-OC":
forward-char
#"\M-\C-OA":
previous-history
#"\M-\C-OB":
next-history
#
# Arrow keys in 8 bit ANSI mode
#
#"\M-\C-[D":
backward-char
#"\M-\C-[C":
forward-char
Chapter 1: Command Line Editing
12
#"\M-\C-[A":
previous-history
#"\M-\C-[B":
next-history
C-q: quoted-insert
$endif
# An old-style binding.
This happens to be the default.
TAB: complete
# Macros that are convenient for shell interaction
$if Bash
# edit the path
"\C-xp": "PATH=${PATH}\e\C-e\C-a\ef\C-f"
# prepare to type a quoted word --
# insert open and close double quotes
# and move to just after the open quote
"\C-x\"": "\"\"\C-b"
# insert a backslash (testing backslash escapes
# in sequences and macros)
"\C-x\\": "\\"
# Quote the current or previous word
"\C-xq": "\eb\"\ef\""
# Add a binding to refresh the line, which is unbound
"\C-xr": redraw-current-line
# Edit variable on current line.
"\M-\C-v": "\C-a\C-k$\C-y\M-\C-e\C-a\C-y="
$endif
# use a visible bell if one is available
set bell-style visible
# don’t strip characters to 7 bits when reading
set input-meta on
# allow iso-latin1 characters to be inserted rather
# than converted to prefix-meta sequences
set convert-meta off
# display characters with the eighth bit set directly
# rather than as meta-prefixed characters
set output-meta on
# if there are more than 150 possible completions for
# a word, ask the user if he wants to see all of them
set completion-query-items 150
Chapter 1: Command Line Editing
13
# For FTP
$if Ftp
"\C-xg": "get \M-?"
"\C-xt": "put \M-?"
"\M-.": yank-last-arg
$endif
1.4 Bindable Readline Commands
This section describes Readline commands that may be bound to key sequences. Command
names without an accompanying key sequence are unbound by default.
In the following descriptions, point refers to the current cursor position, and mark refers
to a cursor position saved by the set-mark command. The text between the point and
mark is referred to as the region.
1.4.1 Commands For Moving
beginning-of-line (C-a)
Move to the start of the current line.
end-of-line (C-e)
Move to the end of the line.
forward-char (C-f)
Move forward a character.
backward-char (C-b)
Move back a character.
forward-word (M-f)
Move forward to the end of the next word. Words are composed of letters and
digits.
backward-word (M-b)
Move back to the start of the current or previous word. Words are composed
of letters and digits.
clear-screen (C-l)
Clear the screen and redraw the current line, leaving the current line at the top
of the screen.
redraw-current-line ()
Refresh the current line. By default, this is unbound.
1.4.2 Commands For Manipulating The History
accept-line (Newline or Return)
Accept the line regardless of where the cursor is. If this line is non-empty, it
may be added to the history list for future recall with add_history(). If this
line is a modiﬁed history line, the history line is restored to its original state.
previous-history (C-p)
Move ‘back’ through the history list, fetching the previous command.
Chapter 1: Command Line Editing
14
next-history (C-n)
Move ‘forward’ through the history list, fetching the next command.
beginning-of-history (M-)
Move to the end of the input history, i.e., the line currently being entered.
reverse-search-history (C-r)
Search backward starting at the current line and moving ‘up’ through the his-
tory as necessary. This is an incremental search.
forward-search-history (C-s)
Search forward starting at the current line and moving ‘down’ through the the
history as necessary. This is an incremental search.
non-incremental-reverse-search-history (M-p)
Search backward starting at the current line and moving ‘up’ through the his-
tory as necessary using a non-incremental search for a string supplied by the
user.
non-incremental-forward-search-history (M-n)
Search forward starting at the current line and moving ‘down’ through the the
history as necessary using a non-incremental search for a string supplied by the
user.
history-search-forward ()
Search forward through the history for the string of characters between the
start of the current line and the point. This is a non-incremental search. By
default, this command is unbound.
history-search-backward ()
Search backward through the history for the string of characters between the
start of the current line and the point. This is a non-incremental search. By
default, this command is unbound.
yank-nth-arg (M-C-y)
Insert the ﬁrst argument to the previous command (usually the second word
on the previous line) at point. With an argument n, insert the nth word from
the previous command (the words in the previous command begin with word
0). A negative argument inserts the nth word from the end of the previous
command. Once the argument n is computed, the argument is extracted as if
the ‘!n’ history expansion had been speciﬁed.
yank-last-arg (M-. or M-_)
Insert last argument to the previous command (the last word of the previous
history entry). With an argument, behave exactly like yank-nth-arg. Succes-
sive calls to yank-last-arg move back through the history list, inserting the
last argument of each line in turn. The history expansion facilities are used to
extract the last argument, as if the ‘!$’ history expansion had been speciﬁed.
Chapter 1: Command Line Editing
15
1.4.3 Commands For Changing Text
delete-char (C-d)
Delete the character at point. If point is at the beginning of the line, there
are no characters in the line, and the last character typed was not bound to
delete-char, then return eof.
backward-delete-char (Rubout)
Delete the character behind the cursor. A numeric argument means to kill the
characters instead of deleting them.
forward-backward-delete-char ()
Delete the character under the cursor, unless the cursor is at the end of the
line, in which case the character behind the cursor is deleted. By default, this
is not bound to a key.
quoted-insert (C-q or C-v)
Add the next character typed to the line verbatim. This is how to insert key
sequences like C-q, for example.
tab-insert (M-TAB)
Insert a tab character.
self-insert (a, b, A, 1, !, ...)
Insert yourself.
transpose-chars (C-t)
Drag the character before the cursor forward over the character at the cursor,
moving the cursor forward as well. If the insertion point is at the end of the
line, then this transposes the last two characters of the line. Negative arguments
have no eﬀect.
transpose-words (M-t)
Drag the word before point past the word after point, moving point past that
word as well. If the insertion point is at the end of the line, this transposes the
last two words on the line.
upcase-word (M-u)
Uppercase the current (or following) word. With a negative argument, upper-
case the previous word, but do not move the cursor.
downcase-word (M-l)
Lowercase the current (or following) word. With a negative argument, lowercase
the previous word, but do not move the cursor.
capitalize-word (M-c)
Capitalize the current (or following) word. With a negative argument, capitalize
the previous word, but do not move the cursor.