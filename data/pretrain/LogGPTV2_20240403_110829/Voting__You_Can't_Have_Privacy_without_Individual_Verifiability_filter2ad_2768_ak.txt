For any β, assume ValidTally(BBa, sk, U1) holds and ValidTally(BB′
ValidTally(BB′
a ⊎ BBb , sk, U1 ∪ [(id1, credid1), . . . ,(idl , credidl )]) does not hold either, but ValidTally(BB′
smallest k ∈(cid:74)1, l(cid:75) such that ValidTally(BB′
does not, where U′
for some vβ . Thus, provided C correctly guesses β′′ = β and k, C returns (BB′
at most 2l P(cid:104)
holds, and thus ExpValidTally
a ⊎ BBb , sk, U1 ∪ U2) does not. Thus, by assumptions 3 and 2,
a, sk, U1) does. Hence, there exists a
2∪[(idk , credidk )])
by B: bk = Vote(idk , credidk , pk, vβ)
a ⊎[b1, . . . , bk−1], idk , vβ) the conditions on BB in ExpValidTally
= 1. Therefore, ValidTally(BBa, sk, U1) holds and ValidTally(BBa ⊎ BBb , sk, U1 ∪ U2) does not with probability
= 1(cid:105), which is smaller than 2q(λ) P(cid:104)
2 = [(id1, credid1), . . . ,(idk−1, credidk−1)]. bk was produced by the kth call to Op,c
ExpValidTally
a only contains ballots cast for identities in U1 (by definition) and BBb for identities in U2, and U1 ∩ U2 = ∅, if ValidTally(BB′
ExpValidTally
= 1(cid:105) since l ≤ q(λ).
vote(id, v0, v1), C returns (BB′
a⊎[b1, . . . , bk−1], sk, U1∪U′
2) holds and ValidTally(BB′
a⊎[b1, . . . , bk], sk, U1∪U′
Since BB′
a ⊎
vote
C
C
C
BBb , sk, U1 ∪ U2), by assumption 1 we have (regardless of β)
r = Tally(BB, sk, U) = Tally(BB′
a ⊎ BBb , sk, U) = Tally(BB′
a, sk, U) ∗ Tally(BBb , sk, U)
In addition, by assumption 3, Tally(BB′
a, sk, U) = Tally(BB′
a, sk, U1). Hence
Moreover, since BBa\BB′
a contains only ballots for identities not in U1, by assumption 2, Tally(BB′
a, sk, U1) = Tally(BBa, sk, U1), and thus
r = Tally(BB′
a, sk, U1) ∗ Tally(BBb , sk, U).
r = Tally(BBa, sk, U1) ∗ Tally(BBb , sk, U).
B
(λ) = 1 if and only if B4 (called on the result r) returns 1 in this game, which happens
• If β = 0: then Exppriv−careful,0
– either when A (simulated by B) blocks;
– or when r = ⊥, i.e., as already mentioned, if the tally returns ⊥ or the test ∀id. (id,∗) ∈ V0, V1 ⇒ id ∈ H fails in Exppriv−careful, β
;
– or when A does not block, the previous test succeeds, and ∃Vc . r = ρ(Voted) ∗ ρ(Vc).
Assume ValidTally(BBa, sk, U1) ⇒ ValidTally(BB′
a ⊎ BBb , sk, U), which, as we have established, holds except with probability at most
B
2q(λ) P(cid:104)
ExpValidTally
C
= 1(cid:105).
.
B
A
We have already established that the test ∀id. (id,∗) ∈ V0, V1 ⇒ id ∈ H succeeds in Exppriv−careful, β
if and only if it succeeds in
Expverif−careful
Let us first examine the case where A does not block, the tally does not return ⊥, and the test ∀id. (id,∗) ∈ V0, V1 ⇒ id ∈ H
succeeds. Since r (cid:44) ⊥, ValidTally(BBa, sk, U1) holds. Hence, ValidTally(BBa ⊎ BBb , sk, U) also holds, and as explained previously we
thus know that r = Tally(BBa, sk, U1)∗ Tally(BBb , sk, U). Since β = 0, BBb only contains ballots for vneutral, and then by assumption 4,
Tally(BBb , sk, U) = ρ(vneutral)l = ρ(vneutral). Thus r = Tally(BBa, sk, U1).
The condition ∃Vc . r = ρ(Voted) ∗ ρ(Vc) is therefore equivalent to ∃Vc . Tally(BBa, sk, U1) = ρ(Voted) ∗ ρ(Vc). Since, in this case,
– A has been accurately simulated without blocking,
– BBa is the board it returns,
– the test ∀id. (id,∗) ∈ V0, V1 ⇒ id ∈ H succeeds in Expverif−careful
this is exactly the condition under which Expverif−careful
Hence, in that case, Exppriv−careful,0
(λ) = 1 if and only if
– either A (simulated by B) blocks;
– or the test ∀id. (id,∗) ∈ V0, V1 ⇒ id ∈ H fails in Expverif−careful
– or the tally returns ⊥;
– or A does not block, the previous test succeeds, the tally does not return ⊥, and Expverif−careful
Since Expverif−careful
that, unless the implication ValidTally(BBa, sk, U1) ⇒ ValidTally(BB′
Expverif−careful
(λ) also does not return 1 when A blocks, or when the test fails, or when the tally returns ⊥, this implies
(λ) = 1 if and only if
a ⊎ BBb , sk, U) is false, Exppriv−careful,0
A
(λ) does not return 1.
(λ) does not return 1.
(λ) (cid:44) 1. Thus
A
A
A
A
B
B
;
,
A
Exppriv−careful,0
Expverif−careful
A
B
B
• If β = 1: then Exppriv−careful,1
– either when A (simulated by B) blocks;
– or when r = ⊥, i.e., as already mentioned, if the tally returns ⊥ or the test ∀id. (id,∗) ∈ V0, V1 ⇒ id ∈ H fails in Exppriv−careful, β
;
– or when A does not block, the previous test succeeds, the tally returns r (cid:44) ⊥, and ∃Vc . r = ρ(Voted) ∗ ρ(Vc).
Assume ValidTally(BBa, sk, U1) ⇒ ValidTally(BB′
a ⊎ BBb , sk, U), which, as we have established, holds except with probability at most
(λ) = 1 if and only if B4 (called on the result r) returns 1 in this game, which happens
B
C
.
ExpValidTally
(4)
(λ) (cid:44) 1(cid:105)(cid:12)(cid:12)(cid:12) ≤ 2q(λ) P(cid:104)
(λ) = 1(cid:105) − P(cid:104)
= 1(cid:105)
(cid:12)(cid:12)(cid:12)P(cid:104)
2q(λ) P(cid:104)
ExpValidTally
C
= 1(cid:105).
.
B
A
We have already established that the test ∀id. (id,∗) ∈ V0, V1 ⇒ id ∈ H succeeds in Exppriv−careful, β
if and only if it succeeds in
Expverif−careful
Let us first examine the case where A does not block, the tally does not return ⊥, and the test ∀id. (id,∗) ∈ V0, V1 ⇒ id ∈ H
succeeds.
As in the β = 0 case, we thus have r = Tally(BBa, sk, U1) ∗ Tally(BBb , sk, U). Since β = 1, BBb contains ballots for v1, . . . , vl , i.e. for
Voted. Hence, by assumption 4, Tally(BBb , sk, U) = ρ(Voted), and therefore r = Tally(BBa, sk, U1) ∗ ρ(Voted). By definition of Tally,
there exists V such that Tally(BBa, sk, U1) = ρ(V). Hence the condition ∃Vc . r = ρ(Voted) ∗ ρ(Vc) necessarily holds.
In addition we know that the test ∀id. (id,∗) ∈ V0, V1 ⇒ id ∈ H succeeds in Expverif−careful
. Therefore, unless the implication
ValidTally(BBa, sk, U1) ⇒ ValidTally(BB′
– either A (simulated by B) blocks;
– or the test ∀id. (id,∗) ∈ V0, V1 ⇒ id ∈ H fails in Expverif−careful
– or the tally returns ⊥;
a ⊎ BBb , sk, U) is false, Exppriv,1
(λ) = 1 if and only if
B
;
A
A
26
B
P(cid:104)
ExpValidTally
Expverif−careful
Exppriv−careful,1
We thus have, using 4 and 5:
(λ) = 1(cid:105)
– or A does not block, the tally does not return ⊥ and the previous test succeeds;
which means that
(λ) = 1(cid:105) ≤ 2q(λ) P(cid:104)
(cid:16)P(cid:104)
(λ) (cid:44) 1(cid:105)(cid:17)
(λ) = 1(cid:105) − P(cid:104)
(λ) = 1(cid:105) − P(cid:104)
(λ) = 1(cid:105) − P(cid:104)
(λ) = 1(cid:105) − P(cid:104)
Therefore, if A breaks verifiability with careful voters, i.e. if P(cid:104)
1 − P(cid:104)
(cid:16)1 − P(cid:104)
(cid:16)P(cid:104)
(cid:16)P(cid:104)
(cid:16)P(cid:104)
≤ (cid:12)(cid:12)(cid:12)P(cid:104)
Expverif−careful
Exppriv−careful,1
B
Exppriv−careful,0
B
Exppriv−careful,1
Exppriv−careful,1
B
Exppriv−careful,1
Expverif−careful
A
Exppriv−careful,0
Exppriv−careful,0
B
Expverif−careful
= 1(cid:105)
(λ) = 1(cid:105)(cid:17)
(λ) = 1(cid:105) − P(cid:104)
(λ) = 1(cid:105)(cid:17)
(λ) (cid:44) 1(cid:105)(cid:17)
(λ) = 1(cid:105)(cid:17)
(cid:16)1 − P(cid:104)
(λ) = 1(cid:105)(cid:17)
(λ) = 1(cid:105)(cid:12)(cid:12)(cid:12) + 4q(λ) P(cid:104)
= 1(cid:105)
(λ) = 1(cid:105) is not negligible, then B breaks privacy with
Exppriv−careful,1
ExpValidTally
C
Exppriv−careful,0
B
Exppriv−careful,0
(5)
A
A
=
=
+
+
+
B
.
+
B
B
B
C
B
A
careful voters, or C breaks ExpValidTally.
The proof for the case of credential-based protocols is very similar. In that case, we assume that
∀A. P(cid:104)
ExpNMA (λ) = 1(cid:105) is negligible.
vote(id, v0, v1) B makes by calling Oc(id, vβ′′).
Let A = A1, A2, A3 be an adversary that breaks individual verifiability, i.e. wins Expverif−careful. We construct the adversary B, that
plays Exppriv−careful, as in the id-based case. However, contrary to the id-based case, B does not remove any ballots from BBa, and simply
uses BB′
by
calling Oc instead of Ovt
a = BBa. We also construct D, that plays ExpNM, and is similar to C in the id-based case, except that D simulates calls to Op,c
:
vote
• D1 is identical to B1.
• D2 first draws at random a bit β′′, and then simulates B2 up to the point where B2 has finished simulating A2. It simulates each call
to Op,c
• Once D2 has finished simulating B2 up to the point B2 has simulated A2, D obtains a board BBa (which is the same as BBa in
Exppriv−careful, β′′
). Since BBa is obtained by simulating A, which is polynomial, in all executions of D the length of BBa is bounded
by some polynomial p(λ). D then draws at random a ballot in BBa, and returns it.
U2 the same credential with probability at most 2p(λ) P(cid:104)
Therefore, BBa contains no ballot with a credential in U2, except with probability at most 2p(λ) P(cid:104)
to Oc. Otherwise, it would necessarily have been produced by Oc(id, v) for some id, v such that (id, cred) ∈ U2, and the only calls to this
oracle simulate calls made by B to Op,c
on ids in U1 when simulating A, this is contradictory.
Thus, a ballot in BBa with a credential in U2 cannot have been produced by Oc. Hence, provided D picked β′′ = β, and picks the right ballot
vote
in BBa, which happens with probability at least
ExpNMD = 1(cid:105). Indeed, if such a ballot exists, it cannot have been produced by a call
Similarly to the proof for the id-based case, and keeping the same notations, it then follows that BBa contains a ballot with a credential in
when simulating A. Since B only calls Op,c
vote
ExpNMD (λ) = 1(cid:105).
Note that by construction, all ballots in BBb have credentials in U2. Consequently, unless BBa contains a ballot with a credential in U2, by
p(λ), D wins ExpNM.
1
vote
B
assumption 1, we have (regardless of β)
r = Tally(BB, sk, U) = Tally(BBa ⊎ BBb , sk, U) = Tally(BBa, sk, U) ∗ Tally(BBb , sk, U)
which means, by assumption 3, that
The remainder of the proof is the same as before, and establishes that if A breaks verifiability with careful voters, i.e. if P(cid:104)
r = Tally(BBa, sk, U1) ∗ Tally(BBb , sk, U).
is not negligible, then B breaks privacy with careful voters, or D breaks ExpNM, which proves the claim.
(λ) = 1(cid:105)