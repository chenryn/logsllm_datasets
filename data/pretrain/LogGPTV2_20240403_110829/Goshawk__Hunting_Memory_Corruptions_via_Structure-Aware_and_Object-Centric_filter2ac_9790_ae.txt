rally causes false positives and negatives. Since GOSHAWK
leverages an existing code analysis engine as its underlying
infrastructure, its bug detection has both false positives and
false negatives. GOSHAWK focuses on memory corruption
bug detection instead of addressing those well-known pro-
gram analysis deficiencies. We argue that these aspects are
orthogonal to GOSHAWK and we could benefit from their
improvements.
Our experiments show that by only utilizing NLP-assisted
MM function classification, although it could capture most
MM functions, GOSHAWK would incorrectly identify many
non-MM functions and thus incur false positives. When the
follow-up data flow analysis was applied to eliminate non-
MM functions, it unfortunately filtered out a small portion
of real MM functions and caused false negatives. Since most
bug detection systems tend to reduce false positives prior
to false negatives, our design combined the NLP-assisted
classification and data flow analysis based validation to prove
all the identified MM functions are accurate. Also, the result
in Section V-C demonstrates that GOSHAWK has acceptable
false positive and false negative rates.
VII. RELATED WORK
A. Memory Corruption Bug Detection
K-Miner [39] carries a scalable pointer analysis and inter-
procedural analysis to uncover memory corruption bugs. Hua
et al. [40] used machine learning to mitigate the imprecision
of pointer analysis when detecting use-after-free bugs in large
programs. They learned the correlations between program
features and pointer aliases to filter out ambiguous aliases
and then detected use-after-free bugs. CRED [41] is a path-
sensitive and pointer analysis based tool for detecting use-
after-free bugs. It scales down exponential numbers of con-
texts by a spatio-temporal context reduction technique and
achieves low false positive rates with a multi-stage analy-
sis. DCUAF [42] statically detects concurrency use-after-free
bugs in kernel drivers with a set of paired driver interface
functions which can be executed concurrently. However, these
approaches need a set of annotated allocation and deallocation
functions from code base to perform source-to-sink analysis
for detecting memory corruption bugs.
B. MM Function Identification Approaches
Pair-based Mining. Pair-based mining analyzes the relation-
ships among functions and matches these functions in pairs.
WYSIWIB [43] extracts data dependencies among functions
and identifies pairs of MM functions. Similarly, SinkFinder
uses data dependencies to find function pairs. It uses an
analogical reasoning mechanism to infer function pairs similar
to a given seed pair. PairMiner [10] also conducts similarity
comparison by using multiple keywords matching. Giving the
function pairs, it searches for the similar pairs of functions.
Some other approaches pinpoint function pairs relying
on tracking paths of error handling. PF-Miner
[11] and
BP-Miner [44] track both normal execution paths and error
handling paths to recognize function pairs. K-MELD [6] adopts
the frequent pattern of  to identify allocation functions and
the matched deallocation functions from error handling paths.
HERO [7] relies on the pattern of paired function invocation
on normal execution paths and on reversely ordered error
handling paths to mine the paired functions.
Routine-based mining. Routine-base mining identifies func-
tions by abstracting the characteristics of a specific type of
functions. MemBrush executes programs and tracks the custom
memory allocators and deallocators. Based on the execution
flows, it then searches for functions that comply with these
flows in C/C++ binaries. DynPTA [45] relies on analyzing
the patterns of memory-allocation wrapper functions such
as invoking a libc memory-allocation function. Through the
patterns, DynPTA recognizes function wrappers and locates
the returned pointers that are related to memory allocation.
However, DynPTA is unable to deal with memory allocation
functions customized by developers.
Semantic-based mining. Targeting a specific type of func-
tions, semantics-based mining depends on semantic features of
specific functions to infer similar functions. Bai et al. [46] use
keywords to extract potential allocation and deallocation func-
tions by conducting a semantic analysis. Nonetheless, their
approach requires manual efforts to filter out the irrelevant
functions and insert the needed ones. SuSi [4] leverages a
set of human-annotated functions to train a SVM classifier.
The classifier is trained with a large number of human sum-
marized semantics and data flow features. It is then uses to
predict source and sink functions in Android framework. The
effectiveness of the classifier highly relies on the annotated
functions and features; thus such an approach requires a high
human effort. Instead of summarizing semantic features of
a group of specific functions, NLP-EYE[3] infers semantic
meanings of functions by comparing function prototypes with
a set of known functions. Although it could recognize function
semantics by analyzing function prototypes, its result is im-
precise because only few programming language and natural
language are involved.
VIII. CONCLUSION
We introduce MOS, a novel concept to implement structure-
aware and object-centric MM behavior summarization, and
use it to help detect complex memory bugs with character-
istics of nested allocation and unpaired uses of MM func-
tions. Our implemented MOS-enhanced bug detection system
GOSHAWK, combines NLP and data flow analysis to identify
MM functions, and finally finds 92 new bugs in recent versions
of Linux kernel, FreeBSD kernel, OpenSSL, Redis, and three
IoT SDKs via a MOS-enhanced memory object tracking.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:56:43 UTC from IEEE Xplore.  Restrictions apply. 
2108
ACKNOWLEDGMENT
The authors would like to thank the reviewers for their
valuable feedback. We specially thank Bodong Li from HiSil-
icon for helping improve GOSHAWK. This work was par-
tially supported by the National Key Research and Develop-
ment Program of China (No.2020AAA0107803) and SJTU-
HiSilicon Research Grant (YBN2019125153). Yunlong Lyu
was funded by the National Natural Science Foundation of
China (U19B2023). Yunlong Lyu (PI:EMAIL)
and Juanru Li (PI:EMAIL) are corresponding authors.
REFERENCES
[1] Linux Kernel Security Done Right . https://security.googleblog.com/
[2] Lessons
2021/08/linux-kernel-security-done-right.html. Accessed 2021.
from
Google.
at
226371-lessons-from-building-static-analysis-tools-at-google/fulltext.
Accessed 2021.
Tools
https://cacm.acm.org/magazines/2018/4/
Analysis
Building
Static
[3] Jianqiang Wang and Siqi Ma and Yuanyuan Zhang and Juanru Li and
Zheyu Ma and Long Mai and Tiancheng Chen and Dawu Gu, “NLP-
EYE: Detecting Memory Corruptions via Semantic-aware Memory
Operation Function Identification,” in 22nd International Symposium
on Research in Attacks, Intrusions and Defenses (RAID 2019), 2019.
[4] Siegfried Rasthofer and Steven Arzt and Eric Bodden, “A Machine-
learning Approach for Classifying and Categorizing Android
Sources and Sinks,” in Annual Network and Distributed System
Security Symposium (NDSS), 2014.
[5] Bian, Pan and Liang, Bin and Huang, Jianjun and Shi, Wenchang and
Wang, Xidong and Zhang, Jian, “SinkFinder: Harvesting Hundreds
of Unknown Interesting Function Pairs with Just One Seed,” in
Proceedings of the 28th ACM Joint Meeting on European Software
Engineering Conference and Symposium on the Foundations of Software
Engineering, 2020.
[6] Emamdoost, Navid and Wu, Qiushi and Lu Kangjie and McCamant
Stephen, “Detecting Kernel Memory Leaks in Specialized Modules
with Ownership Reasoning,” in Annual Network and Distributed
System Security Symposium (NDSS), 2021.
[7] Qiushi Wu and Aditya Pakki and Navid Emamdoost and Stephen Mc-
Camant and Kangjie Lu, “Understanding and Detecting Disordered
Error Handling with Precise Function Pairing,” in 30th USENIX
Security Symposium (USENIX Security 21), 2021.
[8] Clang Static Analyzer. https://clang-analyzer.llvm.org/. Accessed 2021.
[9] Chen, Xi and Slowinska, Asia and Bos, Herbert, “Who allocated my
memory? Detecting custom memory allocators in C binaries,” in
2013 20th Working Conference on Reverse Engineering (WCRE), 2013.
[10] Liu, Hu-Qiu and Bai, Jia-Ju and Wang, Yu-Ping and Bian, Zhe and
Hu, Shi-Min, “Pairminer: mining for paired functions in Kernel
extensions,” in 2015 IEEE International Symposium on Performance
Analysis of Systems and Software (ISPASS), 2015.
[11] Liu, Huqiu and Wang, Yuping and Jiang, Lingbo and Hu, Shimin, “PF-
Miner: A New Paired Functions Mining Method for Android Kernel
in Error Paths,” in 2014 IEEE 38th Annual Computer Software and
Applications Conference, 2014.
[12] T. Zhang, W. Shen, D. Lee, C. Jung, A. M. Azab, and R. Wang, “PeX: A
permission check analysis framework for linux kernel,” in 28th USENIX
Security Symposium (USENIX Security 19), 2019.
[13] W. Wang, K. Lu, and P.-C. Yew, “Check it again: Detecting lacking-
recheck bugs in os kernels,” in Proceedings of the 2018 ACM SIGSAC
Conference on Computer and Communications Security, 2018.
[14] Kudo, Taku, “Subword Regularization: Improving Neural Net-
work Translation Models with Multiple Subword Candidates,”
in Proceedings of the 56th Annual Meeting of the Association for
Computational Linguistics (Volume 1: Long Papers), 2018.
[15] Sennrich, Rico and Haddow, Barry and Birch, Alexandra, “Neural ma-
chine translation of rare words with subword units,” in Proceedings
of the 54th Annual Meeting of the Association for Computational
Linguistics (Volume 1: Long Papers), 2016.
[16] StackExchange
archive
site.
https://archive.org/download/
stackexchange/stackoverflow.com-Posts.7z. Accessed 2021.
source.html. Accessed 2021.
[23] Range based constraint manager. https://clang.llvm.org/doxygen/
RangeConstraintManager_8cpp_source.html. Accessed 2021.
[24] CodeChecker: A static analysis
infrastructure built on the
LLVM/Clang Static Analyzer toolchain. https://github.com/Ericsson/
codechecker. Accessed 2021.
[25] Cross Translation Unit (CTU) Analysis. https://clang.llvm.org/docs/
analyzer/user-docs/CrossTranslationUnit.html. Accessed 2021.
[26] G. Horváth, P. Szécsi, Z. Gera, D. Krupp, and N. Pataki, “Poster: Imple-
mentation and evaluation of cross translation unit symbolic execution for
c family languages,” in 2018 IEEE/ACM 40th International Conference
on Software Engineering: Companion (ICSE-Companion), 2018.
[27] Clang: a C language family frontend for LLVM. https://clang.llvm.
org/. Accessed 2021.
[17] Bromley, Jane and Guyon, Isabelle and LeCun, Yann and Säckinger,
Eduard and Shah, Roopak, “Signature verification using a "Siamese"
time delay neural network,” in Proceedings of the 6th International
Conference on Neural Information Processing Systems, 1993.
[18] Vaswani, Ashish and Shazeer, Noam and Parmar, Niki and Uszkoreit,
Jakob and Jones, Llion and Gomez, Aidan N and Kaiser, Łukasz and
Polosukhin, Illia, “Attention is all you need,” in Advances in Neural
Information Processing Systems 30, 2017.
[19] Linux memory management APIs. https://www.kernel.org/doc/html/
latest/core-api/mm-api.html. Accessed 2021.
[20] GNU libc. https://www.gnu.org/software/libc/. Accessed 2021.
[21] de Moura, Leonardo and Bjørner, Nikolaj, “Z3: An Efficient SMT
Solver,” in Tools and Algorithms for the Construction and Analysis of
Systems, 2008.
[22] MallocChecker. https://clang.llvm.org/doxygen/MallocChecker_8cpp_
[28] Z. Xu, T. Kremenek, and J. Zhang, “A memory model for static analysis
of c programs,” in Proceedings of the 4th International Conference on
Leveraging Applications of Formal Methods, Verification, and Validation
- Volume Part I, 2010.
[29] Xu, Meng and Qian, Chenxiong and Lu, Kangjie and Backes, Michael
and Kim, Taesoo, “Precise and scalable detection of double-fetch bugs
in OS kernels,” in 2018 IEEE Symposium on Security and Privacy (SP),
2018.
[30] Fraser Brown and Deian Stefan and Dawson Engler, “Sys: A
Static/Symbolic Tool for Finding Good Bugs in Good (Browser)
Code,” in 29th USENIX Security Symposium (USENIX Security 20),
2020.
[31] Shoshitaishvili, Yan and Wang, Ruoyu and Salls, Christopher and
Stephens, Nick and Polino, Mario and Dutcher, Audrey and Grosen,
John and Feng, Siji and Hauser, Christophe and Kruegel, Christopher
and Vigna, Giovanni, “SoK: (State of) The Art of War: Offensive
Techniques in Binary Analysis,” in IEEE Symposium on Security and
Privacy, 2016.
[32] Yun, Insu and Lee, Sangho and Xu, Meng and Jang, Yeongjin and Kim,
Taesoo, “{QSYM}: A practical concolic execution engine tailored for
hybrid fuzzing,” in 27th {USENIX} Security Symposium ({USENIX}
Security 18), 2018.
[33] Chipounov, Vitaly and Kuznetsov, Volodymyr and Candea, George,
implementation, and applications,”
“The S2E platform: Design,
ACM Transactions on Computer Systems (TOCS), 2012.
[34] Poeplau, Sebastian and Francillon, Aurélien, “Symbolic execution with
SymCC: Don’t interpret, compile!” in 29th {USENIX} Security
Symposium ({USENIX} Security 20), 2020.
[35] Cadar, Cristian and Dunbar, Daniel and Engler, Dawson R and others,
“Klee: unassisted and automatic generation of high-coverage tests
for complex systems programs,” in OSDI, 2008.
[36] Kuznetsov, Volodymyr and Kinder, Johannes and Bucur, Stefan and
Candea, George, “Efficient state merging in symbolic execution,” Acm
Sigplan Notices, 2012.
[37] Babic, Domagoj and Hu, Alan J, “Calysto: scalable and precise
extended static checking,” in Proceedings of the 30th international
conference on Software engineering, 2008.
[38] Avgerinos, Thanassis and Rebert, Alexandre and Cha, Sang Kil and
Brumley, David, “Enhancing symbolic execution with veritesting,”
in Proceedings of
the 36th International Conference on Software
Engineering, 2014.
[39] David Gens and Simon Schmitt and Lucas Davi and Ahmad-Reza
Sadeghi, “K-Miner: Uncovering Memory Corruption in Linux,” in
Annual Network and Distributed System Security Symposium, NDSS,
2018.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:56:43 UTC from IEEE Xplore.  Restrictions apply. 
2109
[40] Yan, Hua and Sui, Yulei and Chen, Shiping and Xue, Jingling,
“Machine-Learning-Guided Typestate Analysis for Static Use-After-
Free Detection,” in Proceedings of the 33rd Annual Computer Security
Applications Conference, 2017.
[41] Yan, Hua and Sui, Yulei and Chen, Shiping and Xue, Jingling, “Spatio-
Temporal Context Reduction: A Pointer-Analysis-Based Static Ap-
proach for Detecting Use-after-Free Vulnerabilities,” in Proceedings
of the 40th International Conference on Software Engineering, 2018.
[42] Jia-Ju Bai and Julia Lawall and Qiu-Liang Chen and Shi-Min Hu,
“Effective Static Analysis of Concurrency Use-After-Free Bugs in
Linux Device Drivers,” in 2019 USENIX Annual Technical Conference
(USENIX ATC 19), 2019.
[43] Lawall, Julia L. and Brunel, Julien and Palix, Nicolas and Hansen,
Rene Rydhof and Stuart, Henrik and Muller, Gilles, “WYSIWIB: A
declarative approach to finding API protocols and bugs in Linux
code,” in 2009 IEEE/IFIP International Conference on Dependable
Systems Networks, 2009.
[44] Liu, Hu-Qiu and Bai, Jia-Ju and Wang, Yu-Ping and Hu, Shi-Min, “BP-
Miner: Mining Paired Functions from the Binary Code of Drivers
for Error Handling,” in 2014 21st Asia-Pacific Software Engineering
Conference, 2014.
[45] T. Palit and J. Moon and F. Monrose and M. Polychronakis, “DynPTA:
Combining Static and Dynamic Analysis for Practical Selective Data
Protection,” in 2021 2021 IEEE Symposium on Security and Privacy
(SP), 2021.
[46] Bai, Jia-Ju and Liu, Hu-Qiu and Wang, Yu-Ping and Hu, Shi-Min,
“Runtime Checking for Paired Functions in Device Drivers,”
in Proceedings of the 2014 21st Asia-Pacific Software Engineering
Conference - Volume 01, 2014.
APPENDIX
A. MM Function Classification Model Generating
ULM-based Segmentation. We construct a programming cor-
pus to support function prototype segmentation based on the
occurrence of informal terms. First, we collect 20G questions
(including source code and description of questions) posted
on StackOverflow [16]. By taking these questions as input,
GOSHAWK removes all punctuation and generates meaningful
subwords by utilizing BPE [15] algorithm. BPE algorithm
initializes all
the preprocessed contents as a sequence of
characters and iteratively merges the characters into different
units. By computing the occurrence frequency of each unit,
GOSHAWK regards the unit with the highest frequency as
a subword and adds the subword and its frequency to the
programming corpus.
Based on subwords in the programming corpus, GOSHAWK
segments each function prototype in different ways. To select
the most suitable segmentation, it calculates an occurrence
probability of each possible segmentation form by
subwords(cid:89)
w∈subwords
P (res) =
P (w)
(1)
where P (res) denotes the occurrence probability of each seg-
mentation form and P (w) denotes the occurrence probability
of each subword. Finally, GOSHAWK selects the segmentation
form that has the highest probability.
Reference Set Creation. In order to recognize custom MM
functions, we manually create a reference set for function
comparison. To ensure the variety and representativeness of the
reference set, we extend the function prototype corpus by iter-
atively labeling more MM functions (e.g., from Linux kernel)
and training the Siamese network. Finally, 4,441 functions
(1,807 memory allocation functions and 2,634 memory deal-
location functions) are included in the reference set.
Siamese Network Training. GOSHAWK trains a Siamese
network to convert each subword list into a numeric vector
(containing natural language semantics) and classifies each
function prototype to a reference vector. Given the created
function prototype corpus where each function is classified as
a memory allocation function, a memory deallocation function,
or a non-MM function, GOSHAWK randomly pairs function
i ) with ground truth pairing information yi ∈ {+1,−1},
(fi, f′
where yi = +1 indicates that prototypes of function fi and
i are in the same category, yi = −1 otherwise. We denote
f′
the vector of function prototypes fi and f′
i as ⃗ei and ⃗e′
i,
respectively. The output of the Siamese network for each pair
is the cosine similarity between ⃗ei and ⃗e′
i.
MM Candidate Selection. By using the reference set and the
trained Siamese network, GOSHAWK classifies MM functions
from the tested project. Since we only aim to identify mem-
ory allocation and deallocation functions, we only consider
the vectors of the corresponding MM functions. Specifically,
let ⃗a1, ..., ⃗ana denote the reference vectors of the allocation
functions in the training function set and ⃗d1, ..., ⃗dnd denote the
reference vectors of the deallocation functions in the training
function set. Subscripts na and nd denote the number of allo-
cation and deallocation functions in the training function set,
respectively. To enhance comparison efficiency, we compress
the semantics of the reference vectors into vectors ⃗am and ⃗dm
by averaging the weight of each function as follow:
na(cid:88)
i
nd(cid:88)
i
⃗am =
1
na
⃗ai
||⃗ai|| ,
⃗dm =
1
nd
⃗di
||⃗di||
(2)
Then, for an unlabeled function ft we generate its proto-
type vector ⃗vt by using the trained Siamese network. After
calculating the cosine similarity between ⃗vt, ⃗am and ⃗vt, ⃗dm,
GOSHAWK can distinguish the type of ft
if any of the
two similarity scores is higher than a threshold. And if so,
GOSHAWK assigns ft to its corresponding candidate set.
B. Official MM function set
The
malloc,
kmalloc,
collected
allocation
kmalloc_array,
official memory
vmalloc_no_huge,
functions
are:
krealloc_array,