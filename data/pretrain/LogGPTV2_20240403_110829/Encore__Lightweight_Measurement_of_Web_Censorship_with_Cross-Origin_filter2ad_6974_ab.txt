### Examples of Embeddable Resources

Resources that can be embedded include simple markup for images or other media (e.g., `<img>`), remote scripts (e.g., `<script>`), remote stylesheets (e.g., `<link rel="stylesheet">`), and embedded objects and applets (e.g., `<object>`, `<applet>`). The challenge lies in dealing with browsers' limited APIs for conducting network measurements, especially when accessing these resources requires cross-origin requests.

### Scope and Detection of Web Filtering

Web filtering can vary in granularity, from individual URLs (e.g., a specific news article or blog post) to entire domains. Detecting web filtering is difficult, regardless of the granularity. 

- **Specific Resources**: When specific web resources are filtered, detection becomes more challenging because there are fewer ways to detect it. For example, detecting the filtering of a single URL requires attempting to access that exact URL.
- **Entire Domains**: Detecting the filtering of entire domains is relatively straightforward. We can test for such filtering by checking the accessibility of a small number of resources hosted on that domain.

Resource embedding only works with certain types of resources, which further restricts the web resources we can test and makes it harder to detect very specific instances of filtering.

### Broad Filtering Inference

Inferring broad filtering is also difficult because Encore can only observe the binary accessibility of individual web resources (i.e., whether the resource was reachable). Any conclusions about the scope of web filtering must be inferred from these individual measurements. Section 4.3 provides an initial look at such inferences, and Section 7 presents a filtering detection algorithm.

### Measurement Tasks

Measurement tasks are small, self-contained HTML and JavaScript snippets that attempt to load a web resource from a measurement target. These tasks must meet four requirements:

1. **Cross-Origin Requests**: They must successfully load a cross-origin resource in locations without web filtering. Since default Cross-Origin Resource Sharing (CORS) settings prevent AJAX requests from loading cross-origin resources, we use embedding techniques like `<img>`, `<link>`, and `<script>` tags.
2. **Feedback Mechanism**: They must provide feedback about whether the cross-origin resource was loaded successfully. Mechanisms like the `iframe` tag lack clear ways to detect failed loads and are thus unsuitable.
3. **Security**: Tasks must not compromise the security of the page running the task. This involves both client- and server-side security threats. For example, rendering or evaluating embedded JavaScript can pose risks, so careful sandboxing is necessary.
4. **Performance and Appearance**: Tasks must not significantly affect the perceived performance, appearance, or network usage of the page.

### Example Measurement Task

Here is an example of a simple measurement task that instructs the web client to load an image hosted by a measurement target, `censored.com`:

```html
<img src="http://censored.com/icon.png" onload="reportSuccess()" onerror="reportFailure()">
```

This task meets the four requirements:
1. It uses the `<img>` tag to request an image, which is allowed by browser security policies.
2. It detects successful loading by listening for the `onload` and `onerror` events.
3. It maintains security by not executing any code from the measurement target.
4. It preserves performance and appearance by loading a small icon (typically 16x16 pixels) and hiding it using `display: none`.

### Inferring Web Filtering

A measurement task provides a binary indication of whether a particular resource failed to load, implying filtering of that specific resource. From collections of these measurements, we can draw broader conclusions about the scope of filtering, such as whether an entire domain or a portion of a website is filtered.

### Techniques for Measuring Accessibility

There are several ways to test the accessibility of cross-origin web resources, but none work across all types of filtering, all web browsers, and all target sites. We tailor measurement tasks to each target and client, starting with broad-scale filtering and working toward more specific schemes.

#### Filtering of Entire Domains

To infer that a censor is filtering an entire domain, Encore performs collections of measurement tasks. Instead of checking every URL, we assume that if several auxiliary resources (e.g., images, style sheets) are inaccessible, then the entire domain is likely inaccessible.

- **Images**: Web pages commonly embed images, even across origins. Using the `<img>` tag, we can detect success by the `onload` and `onerror` events.
- **Style Sheets**: Web pages often load style sheets across origins. Using the `<link>` tag, we can detect success by verifying that the specified styles are applied.

#### Filtering of Specific Web Pages

Detecting the filtering of specific web pages is more challenging. There is less flexibility in the set of resources that can be used for measurement tasks. Testing involves fetching and rendering the page and its referenced objects, which can be expensive and open to security vulnerabilities.

- **Inline Frames**: Using the `<iframe>` tag, we infer success by observing the timing of loading and rendering an embedded image. This approach works with pages that embed cacheable objects.
- **Scripts**: Using the `<script>` tag, Chrome invokes an `onload` event if the resource is fetched with an HTTP 200 OK response. This technique is convenient but raises security concerns in other browsers.

### Encore Measurement System

Encore is a distributed platform for measuring web filtering. It selects targets to test, generates measurement tasks, schedules and delivers these tasks to clients, collects the results, and draws conclusions about filtering practices based on the collective outcomes.

Figure 2 illustrates how Encore induces a client to collect measurements of web filtering. The client visits a web site, `http://example.com`, whose webmaster has included Encoreâ€™s measurement script. The script attempts to fetch an image from `censored.com`. If the request fails, the client notifies the collection server.