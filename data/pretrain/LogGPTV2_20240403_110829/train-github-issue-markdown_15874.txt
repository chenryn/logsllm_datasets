 **Symfony version(s) affected** : 4.1.0
**Description**  
I'm using the form component to map request data to a DTO (not an entity), and
I'm doing some validation in the form component. One of the validations I'm
doing is on an email field. I'm using the UniqueEntity constraint to do that.
But in order to keep my domain logic separated from the Validation component,
I'm registering the constraints in the form itself. Apparently the
UniqueEntity constraint does not work in that scenario.
**How to reproduce**  
First, create a dummy User entity, just with email.
Then, create this DTO class outside the entity folder:
     */
    class RegisterNewStoreCommand
    {
        /**
         * @var string
         */
        private $name;
        /**
         * @var string
         */
        private $email;
        /**
         * @var string
         */
        private $plainPassword;
        /**
         * @var string
         */
        private $storeName;
        /**
         * @var string
         */
        private $storeWebsite;
        public function __construct(string $name, string $email, string $plainPassword, string $storeName, string $storeWebsite)
        {
            $this->name = $name;
            $this->email = $email;
            $this->plainPassword = $plainPassword;
            $this->storeName = $storeName;
            $this->storeWebsite = $storeWebsite;
        }
        /**
         * @return string
         */
        public function getName(): string
        {
            return $this->name;
        }
        /**
         * @return string
         */
        public function getEmail(): string
        {
            return $this->email;
        }
        /**
         * @return string
         */
        public function getPlainPassword(): string
        {
            return $this->plainPassword;
        }
        /**
         * @return string
         */
        public function getStoreName(): string
        {
            return $this->storeName;
        }
        /**
         * @return string
         */
        public function getStoreWebsite(): string
        {
            return $this->storeWebsite;
        }
    }
After that, the FormType:
     */
    class RegisterStoreType extends AbstractType
    {
        public function buildForm(FormBuilderInterface $builder, array $options)
        {
            $builder
                ->add('name', TextType::class, [
                    'constraints' => [
                        new NotBlank()
                    ]
                ])
                ->add('email', EmailType::class, [
                    'constraints' => [
                        new NotBlank()
                    ]
                ])
                ->add('plainPassword', RepeatedType::class, [
                    'type' => PasswordType::class,
                    'constraints' => [
                        new NotBlank()
                    ]
                ])
                ->add('storeName', TextType::class, [
                    'constraints' => [
                        new NotBlank()
                    ]
                ])
                ->add('storeWebsite', TextType::class, [
                    'constraints' => [
                        new NotBlank(),
                        new Url()
                    ]
                ])
            ;
        }
        public function configureOptions(OptionsResolver $resolver)
        {
            $resolver->setDefaults([
                'constraints' => [
                    new UniqueEntity(['fields' => ['email'], 'entityClass' => User::class])
                ],
                'data_class' => RegisterNewStoreCommand::class,
                'empty_data' => function(FormInterface $form) {
                    return new RegisterNewStoreCommand(
                        $form->get('name')->getData(),
                        $form->get('email')->getData(),
                        $form->get('plainPassword')->getData(),
                        $form->get('storeName')->getData(),
                        $form->get('storeWebsite')->getData()
                    );
                }
            ]);
        }
    }
**Possible Solution**  
I think that the solution may be to give more consideration to the
'entityClass' setting in the constraint definition. Could be as simple as
doing a `getManagerForClass($constraint->entityClass)` in the validator. I
don't know the side effects of that, but if a user is setting an entity class,
I think that is what should be used to get the manager.
**Additional context**  
I'm doing all this DTO thing because I'm working on a DDD project, and I have
a command bus that will handle the resulting object from the form.