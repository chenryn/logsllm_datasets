---
author: Ricardo Gerardi
category: 技术
comments_data: []
count:
  commentnum: 0
  favtimes: 0
  likes: 0
  sharetimes: 0
  viewnum: 10694
date: '2018-09-25 15:49:44'
editorchoice: false
excerpt: zsh 提供了数之不尽的功能和特性，这里有五个可以让你在命令行效率暴增的方法。
fromurl: https://opensource.com/article/18/9/tips-productivity-zsh
id: 10047
islctt: true
largepic: /data/attachment/album/201809/25/154936kfd8qtouc0nccn8z.jpg
permalink: /article-10047-1.html
pic: /data/attachment/album/201809/25/154936kfd8qtouc0nccn8z.jpg.thumb.jpg
related: []
reviewer: wxy
selector: lujun9972
summary: zsh 提供了数之不尽的功能和特性，这里有五个可以让你在命令行效率暴增的方法。
tags:
- zsh
- 命令行
thumb: false
title: 用 zsh 提高生产力的 5 个技巧
titlepic: true
translator: tnuoccalanosrep
updated: '2018-09-25 15:49:44'
---
> 
> zsh 提供了数之不尽的功能和特性，这里有五个可以让你在命令行效率暴增的方法。
> 
> 
> 
![](/data/attachment/album/201809/25/154936kfd8qtouc0nccn8z.jpg)
Z shell（[zsh](http://www.zsh.org/)）是 Linux 和类 Unix 系统中的一个[命令解析器](https://en.wikipedia.org/wiki/Shell_(computing))。 它跟 sh (Bourne shell) 家族的其它解析器（如 bash 和 ksh）有着相似的特点，但它还提供了大量的高级特性以及强大的命令行编辑功能，如增强版 Tab 补全。
在这里不可能涉及到 zsh 的所有功能，[描述](http://zsh.sourceforge.net/Doc/Release/zsh_toc.html)它的特性需要好几百页。在本文中，我会列出 5 个技巧，让你通过在命令行使用 zsh 来提高你的生产力。
### 1、主题和插件
多年来，开源社区已经为 zsh 开发了数不清的主题和插件。主题是一个预定义提示符的配置，而插件则是一组常用的别名命令和函数，可以让你更方便的使用一种特定的命令或者编程语言。
如果你现在想开始用 zsh 的主题和插件，那么使用一种 zsh 的配置框架是你最快的入门方式。在众多的配置框架中，最受欢迎的则是 [Oh My Zsh](https://ohmyz.sh/)。在默认配置中，它就已经为 zsh 启用了一些合理的配置，同时它也自带上百个主题和插件。
主题会在你的命令行提示符之前添加一些有用的信息，比如你 Git 仓库的状态，或者是当前使用的 Python 虚拟环境，所以它会让你的工作更高效。只需要看到这些信息，你就不用再敲命令去重新获取它们，而且这些提示也相当酷炫。下图就是我选用的主题 [Powerlevel9k](https://github.com/bhilburn/powerlevel9k)：
![zsh Powerlevel9K theme](/data/attachment/album/201809/25/154952x525g5pg5dd5x5s1.png "zsh Powerlevel9K theme")
*zsh 主题 Powerlevel9k*
除了主题，Oh my Zsh 还自带了大量常用的 zsh 插件。比如，通过启用 Git 插件，你可以用一组简便的命令别名操作 Git， 比如
```
$ alias | grep -i git | sort -R | head -10
g=git
ga='git add'
gapa='git add --patch'
gap='git apply'
gdt='git diff-tree --no-commit-id --name-only -r'
gau='git add --update'
gstp='git stash pop'
gbda='git branch --no-color --merged | command grep -vE "^(\*|\s*(master|develop|dev)\s*$)" | command xargs -n 1 git branch -d'
gcs='git commit -S'
glg='git log --stat'
```
zsh 还有许多插件可以用于许多编程语言、打包系统和一些平时在命令行中常用的工具。以下是我 Ferdora 工作站中用到的插件表：
```
git golang fedora docker oc sudo vi-mode virtualenvwrapper
```
### 2、智能的命令别名
命令别名在 zsh 中十分有用。为你常用的命令定义别名可以节省你的打字时间。Oh My Zsh 默认配置了一些常用的命令别名，包括目录导航命令别名，为常用的命令添加额外的选项，比如：
```
ls='ls --color=tty'
grep='grep  --color=auto --exclude-dir={.bzr,CVS,.git,.hg,.svn}'
```
除了命令别名以外， zsh 还自带两种额外常用的别名类型：后缀别名和全局别名。
后缀别名可以让你基于文件后缀，在命令行中利用指定程序打开这个文件。比如，要用 vim 打开 YAML 文件，可以定义以下命令行别名：
```
alias -s {yml,yaml}=vim
```
现在，如果你在命令行中输入任何后缀名为 `yml` 或 `yaml` 文件， zsh 都会用 vim 打开这个文件。
```
$ playbook.yml
# Opens file playbook.yml using vim
```
全局别名可以让你创建一个可在命令行的任何地方展开的别名，而不仅仅是在命令开始的时候。这个在你想替换常用文件名或者管道命令的时候就显得非常有用了。比如：
```
alias -g G='| grep -i'
```
要使用这个别名，只要你在想用管道命令的时候输入 `G` 就好了：
```
$ ls -l G do
drwxr-xr-x.  5 rgerardi rgerardi 4096 Aug  7 14:08 Documents
drwxr-xr-x.  6 rgerardi rgerardi 4096 Aug 24 14:51 Downloads
```
接着，我们就来看看 zsh 是如何导航文件系统的。
### 3、便捷的目录导航
当你使用命令行的时候，在不同的目录之间切换访问是最常见的工作了。 zsh 提供了一些十分有用的目录导航功能来简化这个操作。这些功能已经集成到 Oh My Zsh 中了， 而你可以用以下命令来启用它
```
setopt  autocd autopushd \ pushdignoredups
```
使用了上面的配置后，你就不用输入 `cd` 来切换目录了，只需要输入目录名称，zsh 就会自动切换到这个目录中：
```
$ pwd
/home/rgerardi
$ /tmp
$ pwd
/tmp
```
如果想要回退，只要输入 `-`:
zsh 会记录你访问过的目录，这样下次你就可以快速切换到这些目录中。如果想要看这个目录列表，只要输入 `dirs -v`：
```
$ dirs -v
0       ~
1       /var/log
2       /var/opt
3       /usr/bin
4       /usr/local
5       /usr/lib
6       /tmp
7       ~/Projects/Opensource.com/zsh-5tips
8       ~/Projects
9       ~/Projects/ansible
10      ~/Documents
```
如果想要切换到这个列表中的其中一个目录，只需输入 `~#` （`#` 代表目录在列表中的序号）就可以了。比如
```
$ pwd
/home/rgerardi
$ ~4
$ pwd
/usr/local