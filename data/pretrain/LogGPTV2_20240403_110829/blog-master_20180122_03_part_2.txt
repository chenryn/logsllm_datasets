progress: 2.0 s, 412.2 tps, lat 247.149 ms stddev 591.770  
progress: 3.0 s, 1196.0 tps, lat 53.604 ms stddev 112.786  
progress: 4.0 s, 1198.0 tps, lat 46.672 ms stddev 5.575  
```  
## pg_pathman 的对比性能  
pg_pathman实际上以前已经对比过，性能非常好。  
[《PostgreSQL 10 内置分区 vs pg_pathman perf profiling》](../201710/20171015_01.md)    
同样创建2000个分区，测试简单和不简单的查询。  
```  
postgres=# CREATE EXTENSION pg_pathman;      
CREATE EXTENSION      
postgres=# create table tbl_range(id int not null, info text, crt_time timestamp);      
CREATE TABLE      
postgres=# select create_range_partitions('tbl_range', 'id', 0, 100, 2000);      
 create_range_partitions       
-------------------------      
                    2000      
(1 row)  
postgres=# \d tbl_range  
                        Table "public.tbl_range"  
  Column  |            Type             | Collation | Nullable | Default   
----------+-----------------------------+-----------+----------+---------  
 id       | integer                     |           | not null |   
 info     | text                        |           |          |   
 crt_time | timestamp without time zone |           |          |   
Number of child tables: 2000 (Use \d+ to list them.)  
```  
pg_pathman不依赖传统的constraint_exclusion参数，简单和不简单的SQL，都被过滤了。  
```  
postgres=# set constraint_exclusion =off;  
SET  
postgres=# explain select * from tbl_range where id=1;  
                            QUERY PLAN                               
-------------------------------------------------------------------  
 Append  (cost=0.00..24.12 rows=6 width=44)  
   ->  Seq Scan on tbl_range_1  (cost=0.00..24.12 rows=6 width=44)  
         Filter: (id = 1)  
(3 rows)  
postgres=# explain select * from tbl_range where id=1+1;  
                            QUERY PLAN                               
-------------------------------------------------------------------  
 Append  (cost=0.00..24.12 rows=6 width=44)  
   ->  Seq Scan on tbl_range_1  (cost=0.00..24.12 rows=6 width=44)  
         Filter: (id = 2)  
(3 rows)  
```  
性能测试  
```  
pgbench -M prepared -n -r -P 1 -f ./test.sql -c 56 -j 56 -T 120  
-- 简单SQL  
progress: 3.0 s, 947237.9 tps, lat 0.059 ms stddev 0.010  
progress: 4.0 s, 949539.4 tps, lat 0.059 ms stddev 0.009  
progress: 5.0 s, 948459.0 tps, lat 0.059 ms stddev 0.010  
progress: 6.0 s, 947355.4 tps, lat 0.059 ms stddev 0.010  
progress: 7.0 s, 947789.2 tps, lat 0.059 ms stddev 0.010  
progress: 8.0 s, 949380.5 tps, lat 0.059 ms stddev 0.010  
progress: 9.0 s, 944190.6 tps, lat 0.059 ms stddev 0.023  
progress: 10.0 s, 947677.8 tps, lat 0.059 ms stddev 0.010  
-- 非简单SQL  
progress: 3.0 s, 951051.2 tps, lat 0.059 ms stddev 0.012  
progress: 4.0 s, 960237.6 tps, lat 0.058 ms stddev 0.010  
progress: 5.0 s, 961659.2 tps, lat 0.058 ms stddev 0.009  
progress: 6.0 s, 946538.5 tps, lat 0.059 ms stddev 0.012  
progress: 7.0 s, 956382.1 tps, lat 0.059 ms stddev 0.011  
progress: 8.0 s, 961674.0 tps, lat 0.058 ms stddev 0.009  
progress: 9.0 s, 957060.6 tps, lat 0.059 ms stddev 0.010  
progress: 10.0 s, 950707.1 tps, lat 0.059 ms stddev 0.013  
progress: 11.0 s, 955766.4 tps, lat 0.059 ms stddev 0.010  
```  
pg_pathman对简单和非简单SQL的优化效果一样，都非常的好。  
## 性能对比
分区特性 | TPS
---|---
PPAS native分区 edb_enable_pruning=on 常量条件过滤 | 1031487
PPAS native分区 edb_enable_pruning=on 条件无法过滤 | 1196
PG pg_pathman分区 | 957060
## 小结
对于PPAS用户，建议能常量输入的，就使用常量输入，这样能够用到分区过滤的优化特性。（特别是在分区表非常多的情况下，优化效果非常明显）。   
对于PG用户，使用pg_pathman作为分区组件，在分区很多的情况下，性能比native的分区好很多很多。   
PostgreSQL 社区正在改进这块的代码，PATCH如下(PostgreSQL 11可能会包含这部分优化)：   
https://www.postgresql.org/message-id/flat/PI:EMAIL#PI:EMAIL   
https://commitfest.postgresql.org/17/1272/  
目前分区越多，在高并发访问时可能导致BIND性能问题：   
[《PostgreSQL 查询涉及分区表过多导致的性能问题 - 性能诊断与优化(大量BIND, spin lock, SLEEP进程)》](../201801/20180124_01.md)    
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")