swep
将文件系统放在替换空间（swap）区城里，表示它存在于内存中，直到内存资源被使用
得剩很少时，部分信息才会写入替换空间。
注意：临时性文件的目录是共享的资源，这也让它们成了拒绝服务（denialofservice，DOS）攻
击的目标。让其他工作填满整个文件系统（或替换空间），然后窥伺系统，或以其他用户身
份酬除文件，系统管理因此会监控这些目录的使用空润，然后执行cron作业，请摔目文
件，此外，这些目录通需都会设置粘连位（stickypermission bit），使得只有root与文
件所有者可以断原它们。是否要设置文作权限以展制存储在这样的目录内的文件访间画你
决定。Shell脚本应该都要使用umask命令（见附录B），或是先以touch建立必需的临时
性文件，再执行chomd将之设置为适当权限。
为确保临时性文件会在任务完成时删除，编译语言的程序员可以先开启文件，再下达
unlink（）系统调用。这么微就会马上删除文件，但因为它仍在开启状态，所以仍可继
续访间，直到文件关闭或工作结末为止，只要其中一个先发生即可。打开后解除连接
（unlink-after-open）的技巧一般来说在非UNIX操作系统下是无法运行的，在加载于
UNIX文件系统中目录上的外部文件系统也是这样，且在大多数脚本语言中是无法使用
的。
注意：很多系统上的/tap与/var/tmp都是比较小的文件系统，且通常加载在独立于根（/）分
区之外的个别分区（partition）上，所以当它被填满时，不会妨碍系统日志的记录。特别
的一点是：这也意味着，你不能在这些目录下建立大型的临时性文件，供CD或DVD的文
件系统映像使用。如果/tnp被填满了，你可能无法输辑程序，一直要等到你的系统管理
员解决这个问题为止，除非，你的输译程序允许将临时性文件重定向到其他目录。
www.TopSage.com
---
## Page 301
文件处理
10.3.1$S变量
lopSage.com
共享的目录或同一程序的多个执行实例，都可能造成文件名冲突。在Shell脚本里的传
统微法是使用进程ID（见13.2节），可以在Shell变量SS中取得，构建成临时性文件名
的一部分，要解决完整临时性文件名发生此问题的可能性，可使用环境变量覆盖目录名
称，通常是TMPDIR。另外，你应该使用trap命令，要求在工作完成时删除临时性文
件，请见13.3.2节。因此，常见的Shell脚本起始如下：
umask 077
、删除用户以外其他人的所有访问权
TMPFILE=$(TMPDIR-/tmp)/myprog $$
产生临时性文件名
  -,
完成时删除临时性文件
10.3.2mktemp程序
像/tmp/myprog.SS这样的文件名会有个间题：太好猜了！攻击者只需要在目标程序执
行时列出目录儿次，就可以找出它正在使用的是哪些临时性文件。通过预先建立适当的
指定文件，攻击者可以让你的程序失败或读取伪造的数据，甚至重设文件权限，以便于
他（攻击者）读取文件。
处理此类安全性议题时，文件名必须是不可预知的。BSD与GNU/Linux系统都提供
mktemp命令，供用户建立难以猜测的临时性文件名称。虽然底层的mktenp（）函数库
调用已由POSIX标准化，但mktemp命令却没有。如果你的系统没有mktemp，我们建
议你安装源自OpenBSD的可移植版本（注2）。
mktemp采用含有结尾X字符的文件名模板（可选用的），我们建议至少使用12个X。程
序会用从随机数字与进程ID所产生的文字或数字字符申来取代它们，所建立的文件名不
允许组与其他人访问，然后将文件名打印在标准输出上。
注意：这里是为什么我们建仅你用12个或以上的X字符。客易可猜观的进程ID可能有6、7个，
所以随机的字母数可能只有5个：那么有52（3.8亿）个随机字母字符串。然面，如果只是
10个x（这是mktemp的默认值，请参考手册页）及7个数字的PID，那么只需要猫14000
次。我们拿手边最快的机器，以40行C程序来测试这样的攻击，发现一百万种猜测可在3
秒之内完成。
这里来看看mktemp的使用：
注2:
可在ftp://ftp.mktemp.org/pub/mktemp/取得。
www.TopSage.com
---
## Page 302
290
第10章
$mMPPILE=mktenp/tmp/myprog.xxxxxxxxxxx11exit1建立唯—的时性文件
$ 18 -1 $TXPPIL&
列出脏时性文件
L2sgbqzuryfoadAs/dua/ 0t:co LT re 0 taaap sauo t ---*-A-
进程编号25727可从文件名结尾处看出，但副文件名的剩余部分就无法预测了，当临时
性文件无法建立或没有mktemp可用时，条件式exit命令可确保马上终止程序井带有
错误输出。
最薪版的mktemp允许省略模板：它会使用默认的/tmp/tmp.xxxxxxxxxx。然而，较
旧版本仍是需要模板，所以你的Shell脚本请避免使用这种省略方式。
警告：HP-UX的=ktenp旅本太弱了：它会忽略所有用户所供的模板，然后以用户名称与进程
ID重建一个好猜的临时性文件名。我们强烈建议你在HP-UX安装OpenBSD的版本。
为避免在程序里将目录名称直接编码（hardcode），可使用-t选项：让mktemp使用环
境变量TKPDIR所指定的目录或/tmp。
-d选项要录建立临时性目录：
S SCRArCHDIR=mktemp-d-tmyprog.XOxXXXCXXx11exit 1建立脂时性目录
$ 18 -1Fd $SCRATCHDIR
列出目录本身
drwx------ 2 jones devel 512 Mar 17 07:38 /tnp/myprog.HSteWoBi6373/
由于组与其他人都无法访问该目录，攻击者也无从得知你继续放入的文件名称，不过如
果你的脚本是开放公众读取的，当然还是可能猜出来！由于目录无法列出成列表，所以
没有权限的攻击者就无法确认他的猜测。
10.3.3/dev/random与/dev/urandom特殊文件
有些系统会提供两种随机伪设备：/dev/random与/dev/urandom，现在这些仅在BSD
系统、GNU/Linux、IBMAIX5.2、Mac OSX与Sun Solaris9，搭配两个第三方的实例
与早期Solaris版本的计算机修整程序（注3）上，提供此支持。这些设备的任务，是提
供永不为空的随机字节数据流：这样的数据来源是许多加密程序与安全应用程序所需要
的.虽然已经有很多的简单算法可以产生这种虚拟随机数据流，但其实要产生一个真正
证 3:
可到hrtp://www.cosy.sbg.ac.at/~andi/SUNrand/pkg/random-0.7a.tαr.gz取将。与参考
hntp:/sunrpms.maraadingpirares.org/HowTo.himl, Sun 提供 7 付程/序 (10675[456]-01)
到SUNWski也，让它们在四式的 Solaris 夏电能使用：在hrrp://smnsolve.swn.com/可以
我到它价。
www.TopSage.com
---
## Page 303
文件处理
291
的随机数据其实是很难的事：这部分请参考《CryptographicSecurityArchitecture：
Design and Verification) (注 4)—书。
这两个设备的差别，在/dev/randcm会一直封锁，直到系统所产生的随机数已充分够
用，所以它可以确保高品质的随机数，相对地，/dev/urandom不会死锁，其数据的随
机程度也不高（不过这已经足够通过大部分随机统计测试了）。
由于这些设备是共享资源，攻击者轻易就能加载拒绝服务，通过读取该设备并丢奔数据，
阻断/dev/random，现在比较一下这两个设备，请注意它们两个在count参数下的不
同：
0+1 records in
S tine dd count=1 ibe=1024 if=/dev/random > /dev/mu11
读取1KB的随机码元组
0+1 records out
0.000u 0.020g 0:04.62 0.4
0+0k0+0io86pf+0w
S tine dd count=1024ibe=1024 if=/dev/urandom >/dev/mu11 读取 1NB的随机码元组
1024+0 records in
2048+0 records out
0.000u 0.660s 0:00.66 100.04 . 0+0k 0+0io 86pf+0w
/dev/random被读取的越多，它的响应越慢。我们用这两个设备在几个系统上实验，发
现要自/dev/random提取10MB的数据，竞耗掉一天或一天以上。而/dev/urandom在
我们最快的系统上执行，三秒钟即可产生相同的数据，
这两个伪设备都可以取代mktemp，成为产生难以推测的临时性文件名的替代方案：
（T -peeg 1 .:P-23 1 x-po1mpuzn/p/ e）sqazo/@/gaa 
/tnp/secret : 00000003024d462705664c043c04410e570492e
$echo $TMPFIL&
显示凝机文件名
此处，我们从/dev/urandom读取二进制字节数据流，以od将其转换为十六进制，使
用tr去掉空格，之后在满一行时停止。因为od将每个输出行转换为16个字节，因而
提供了16×8=128个随机位，作为副文件名，或是211（约3.40×10）种可能的副
文件名。如果该文件名建立在仅用户可列出的目录中，则攻击者是无从猜测的。
10.4寻找文件
Shell模式匹配的功能还不足以做到匹配递归整个文件树状结构里的文件，而1s与stat
也没有提供Sbell模式以外其他选定文件的方式，幸好，UNIX还有其他工具，提供比这
些命令更好的功能。
注 4:Peter Gutmann, Springer-Verlag, 2004, ISBN 0-387-95387-6,
www.TopSage.com
---
## Page 304
292
第40章
10.4.1快速寻找文件
com
1ocate首度问世是出现在BerkeleyUNIX，到了GNUfindurils包里（注5）又再重新
实现。1ocate将文件系统里的所有文件名压缩成数据库，以迅速找到匹配类Shell通配
字符模式的文件名，不必实际查找整个庞大的目录结构。这个数据率，通常是在半夜通
过cron，在具有权限的工作中执行updatedb建立。locate对用户来说有其必要性，
它可以回答用户：系统管理者究竞将gcc包放在何处？
$1ocate gee-3.3.tar
/home/gnu/src/gcc/gcc-3.3.tar-1st
寻找gcc-3.3版本
/home/gnu/src/gce/gce-3 .3.tar -gz
缺乏通配字符模式时，1ocate会报告含有将参数作为子字符串的文件：这里找到两个
匹配的文件。
由于locate的输出量可能极多，它通常会通过管道丢给分页程序（pager），如less；
或是查找过滤程序，例如grep处理：
$1ocate gce-3.3 1fgrep.tar.gz
寻找gcc-3.3.不过仅报告供流通用的存档文件
/home/gnu/src/gcc/gcc3 .3.tar-gz
通配字符模式须被保护，以避免Shell展开，这么一来locate才能自己处理它们：
S 1ocate **gce-3.3*.tar*
在1ocate里，使用通配字将匹配，以寻找gcc-3.3
/home/gnu/sxc/gce/gcc-3.3.tar.gz
/home/gnu/src/gcc/gcc-3 .3.1.tar.gz
/home/gnu/src/gcc/gcc-3.3.2.tar.gz
/home/gnu/src/gcc/gcc-3.3.3.tar,gz
 1 
注意：1ocate或许不适用于所有站点，因为它会将被限制访问的目录下的文件名泄露给用户，如
采有这点考虑，只需简单将updatedb的操作交给一般用户权限执行：这么一来，不合法
的用户便无从得知原本就不该让它找到的文件名了，不过比较好的方式是使用securelocate
包：slocate（注6），它也会将文件的保护与所有权存储在数据库里，但只显示用户可以
访问的文件名，
updatedb提供选项，可建立文件系统里选定位置的locate数据库，例如用户的根目
录树状结构，所以locate可用作个人文件的查询。
注5:
取自ftp://ftp.gnu.org/gnu/findutils/,
注 6:
取自ftp://ftp-geekreview.org/slocate/
www.TopSage.com
---
## Page 305
文件处理
293
10.4.2寻找命令存储位置
偶尔你也可能会想知道，调用一个没有路径的命令时，它在文件系统的位置如何。
Bourne-Shell家族里的type命令可以告诉你：
$ type gco
gcc is /usr/1oca1/bin/gcc
9cc 在哪？
type 1s a Shel1 builtin
$ type type
type是什么？
$ type newgce
newgce is an alias for /usr/loca1l/test/bin/gce
newgcc 是什么?
S type wypwd
mypud是什么？
mypwd L6 a function
$ type foobar
这个（不存在的）命令是什么？
foobar not found
请注意，type为内部Shel1命令，所以它认得别名与函数。
我们在例8-1里展示过的pathfind命令，提供的是另一种查找整个目录路径下的方式，
而不只是tYPe查找的PATH列表。
10.4.3find命令
假定你想选择大于某个大小的文件，或是三天前修改过、属于你的文件，或者拥有三个
或三个以上直接链接的文件，就会需要UNIX工具集里最强力的find命令。
find实例提供了60种之多的不同选项，所以我们讨论的只是其中一小部分而已。本段
find板块概括的是几个比较重要的find选项。
如果你需要在整个目录树状结构分支里绕来绕去寻找某个东西，find可以帮你完成此
工作，不过你首先得好好地把整个使用手册读一遍，了解该怎么找。GNU版本的使用手
册极其丰富，我们建议你深入研究。
10.4.3.1使用find命令
find与其他UNIX命令最大的不同处在于：要查找的文件与目录，要放在参数列表的
第一位，且目录几乎是递归地向下深人（寻找）。最终要显示而选定名称的选项或操作
放在命令行的最后。
www.TopSage.com
---
## Page 306
294
第10章
find
语法
find [ files-or-directories ] [ options ]
用途
寻找与指定名称模式匹配于或具有给定属性的文件。
主要选项
注意内文介绍有美部分选项需接上数字mask与n的介绍：
-atime n
选定n天前访问的文件。
-ctime n
选定n天前改过inode的文件，
-fo11ow
接着符号性连接。
-group g
选定继g内的文件（g为用户组ID名称或数字）
-1inks n
选定拥有日个直接链接的文件。
-16
产生类似1s完长形式的列表，而不是只有文件名。
-ntime n
选定目天前修改过的文件。
name'pattern
选定文件名与Shell通配宇将模式匹配的文件（通配字研模式会使用括号
框起来，可避免Shell解释），
-perm mask
选定与指定八进制权限掩码匹配的文件。
-prune
不向下运归到目录树状结构里。
-size n
选择大小为n的文件。