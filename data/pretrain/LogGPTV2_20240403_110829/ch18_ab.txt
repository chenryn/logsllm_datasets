测试你的模型并保存以供将来使用。
在我们决定我们确实使用神经网络或其他机器学习模型后，我们需要获取原始数据，这些数据在大多数时候都是非结构化的。清理和构建数据将是流程的最大部分，而构建模型、测试和预测将是该过程的最后一部分。
请记住，神经网络需要清晰、翔实的数据（主要是大数据）来训练。提供的数据越多，你的模型运行效果越好。另外你需要有一个合适的神经网络类型来解决这个问题。每个问题都有自己的要求。因此，数据定义了处理问题的方式。例如，如果问题是序列生成， 则循环神经网络更合适。但是，如果这是一个与图像相关的问题，你最好使用 卷积神经网络。最后但不容忽视的一点，运行深度神经网络模型可以有大量的硬件要求。神经网络可以追溯到很久以前，但由于计算资源更好、更便宜、功能更强大，它们现在更被人们所接受。如果你想用神经网络解决现实生活中的问题，准备好花钱采购计算能力！最后别忘了，有时甚至可以确定，解决问题的最佳方法就是应用简单的统计信息，甚至应用常见的工程数据结构和算法。所以，不要急于应用机器学习；首先仔细分析问题和数据。
我们可以使用哪些类型的数据？
 有很多数据集，我们可以使用它。有些算是我们在 SRE 视野中常见的内容；其他数据可能更通用，或来自非常罕见的来源。花点时间想想你有什么，你需要组装什么，另外到底有多少数据。不要忘记，你拥有的数据越多，就能获得更好的结果。以下是最常见的来源：
机器数据
包括应用程序创建的日志消息、由基础结构捕获的数据以及工具生成的警报。
流量数据
不同系统之间的网络通信。
代理数据
从探针捕获的数据和来自技术堆栈的采样数据。代码诊断工具通常生成此数据，并常被开发和 QA 团队使用。
合成数据
从综合事务和服务检查。
人类情绪数据
人类通信的编码数据，通常以支持请求单和社交媒体信息的形式进行，可以用来捕捉感知和情绪数据。实用机器学习
在本节中，我们使用一些工具，并深入探讨一些可以应用于 SRE 的实际示例。
神经网络的热门库
 机器学习库的受欢迎程度，如如#recent_github_popularity_metrics_left_par所示，随着时间的变化而演变。
机器学习库的最近 GitHub 流行指标（包含分支）
热门库包括：
TensorFlow
Keras
Caffe
SkLearn
Theano
Torch
在本次调查过程中，我们涵盖了以上所有的库，但在本章中，我主要关注 Keras 和 TensorFlow。  
实用机器学习示例
 好了，现在让我们来看一些基本的针对 SRE 的机器学习案例，这样你就会明白开始是多么容易。
安装 Python、IPython 和 Jupyter 笔记本
    对于本实用指南，需要从python.org安装 Python，然后运行pip命令， 如此处所示（在Python 2.7.9 及更高版本或 3.4 及更高版本上默认已安装 pip）：pip install --upgrade pip
我还建议你在继续测试时使用 IPython 和 Jupyter 笔记本，以便将工作保存在文件中：
pip install jupyter
   jupyter notebook
现在，通过在浏览器页面上打开一个http://localhost:8888链接来启动一个新的笔记本，来检查你的安装，如#creating_a_new_notebook所示。#jupyter_notebook_solving_the_fibonacci_se显示一个 Jupyter 笔记本，用于计算斐波那契序列。
创建新笔记本
解决斐波那契序列的 Jupyter 笔记本
决策树
  为了给出具体的例子，现在让我们看一些演示。第一个使用简单的决策树，根据我们针对当前 CPU、RAM 和过去六小时存储使用百分比情况的示例数据来确定服务器是否正常运行。这些算法始终影响机器学习的一个广泛领域，并用于分类和回归。在这种分析中，我们可以使用决策树直观地 、显式地表示决策和决策。模型在决策时遵循树的分支结构，并经常用于数据挖掘，以实现特定目标。首先，需要从命令行安装 NumPy、SciPy 和 scikit-learn：
pip install numpy scipy scikit-learn graphviz
在笔记本中运行以下 Python 代码，我们将训练决策树：
from sklearn import tree
import graphviz
# training data:
# Status,CPU,RAM,STORAGE
data = [
 ['healthy',45, 32, 65],
 ['unhealthy', 87, 67, 100],
 ['unhealthy', 100, 1, 1],
 ['unhealthy', 76, 70, 90],
 ['unhealthy', 1, 1, 100],
 ['unhealthy', 31, 100, 50],
 ['healthy', 12, 65, 39],['healthy', 12, 65, 39],
 ['healthy', 20, 10, 46],
 ['unhealthy', 100, 50, 50],
 ['healthy', 34, 70, 37],
 ['healthy', 1, 50, 50],
 ['unhealthy', 50, 50, 100],
 ['healthy', 50, 1, 50],
 ['unhealthy', 1, 100, 1],
 ['healthy', 50, 50, 1],
 ['healthy', 53, 53, 80],
]
metrics = [row[1:] for row in data]
states = [row[0] for row in data]states = [row[0] for row in data]
在代码的这一部分中，请注意，我们用sklearn库来导入树模型， 以及通过graphviz库来产生#resulting_decision_treedot_blue_is_falsed中看到的图形。数据变量填充了几个正常运行的服务器的示例。状态名称为 y 轴，指标为 x 轴：
mytree = tree.DecisionTreeClassifier()
mytree = mytree.fit(metrics, states)
填充数据集后，我们使用mytree决策树分类器从 scikit-learn 实例化对象，并使用我们以前的数据训练模型。mytree.fit则来自之前的代码：
# is 10% cpu, 80% RAM, 10% Storage healthy?print("10% CPU, 80% RAM, 10% Storage", (mytree.predict([[10, 80, 10]])))
# is 80% cpu, 10% RAM, 90% Storage healthy?
print("80% CPU, 10% RAM, 90% Storage (high)", mytree.predict([[80, 10, 90]]))
# is 60% cpu, 90% RAM, 10% Storage healthy?
print("60% CPU, 90% RAM (high), 10% Storage", mytree.predict([[60, 90, 10]]))
这将导致以下输出：
10% CPU, 80% RAM, 10% Storage ['healthy']
80% CPU, 10% RAM, 90% Storage (high) ['unhealthy']60% CPU, 90% RAM (high), 10% Storage ['unhealthy']
接下来，我们测试并打印预测结果，如#resulting_decision_treedot_blue_is_falsed所示。请注意，决策树能够找出不正常的，超高 CPU 和 RAM 使用率，达到了我们培训的目的：
# Visualize the decision tree
dot_data = tree.export_graphviz(mytree,
feature_names=['CPU','RAM','Storage'],
class_names=['healthy','unhealthy'],
filled=True, rounded=True,out_file=None)
graphviz.Source(dot_data)
结果决策树：右侧分支为 false，左侧分支更接近 true，直到最后一个分支结果决策树：右侧分支为 false，左侧分支更接近 true，直到最后一个分支
最后，让我们简要分析一下它是如何工作的。#resulting_decision_treedot_blue_is_falsed显示了我们通过培训创建的决策树。待决策的数据会通过一系列布尔决策，这些决策基于已有的用于比较的值。如果任何比较返回 false，则返回 'unhealthy' ，但如果所有检查都返回 true，则我们会得到'healthy' 。
此演示表明，通过使用一组简单的数据和决策树，我们已经可以做很多事了。  
神经网络入门神经网络入门
  Next, let’s explore some more examples, like some simple Python code to train a three-layer neural network from scratch. First, just using NumPy, we can construct a simple neuron using a  “Sigmoid.” This is the activation of a neuron, a function that will map any value to a value between 0 and 1 so that it creates probabilities out of numbers:
import numpy as np