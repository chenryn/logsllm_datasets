 向用户报告的错误被翻译成标准PostgreSQL错误码，可能由MOT特定的消息和描述
组成。
错误提示、错误描述和错误码见下文。该错误码实际上是内部代码，不记录也不返回给
用户。
写入日志文件的错误
所有错误都记录在数据库服务器日志文件中。以下列出了写入数据库服务器日志文件但
未返回给用户的错误。该日志位于data文件夹中，命名为postgresql-DATE-TIME.log。
表 13-1 只写入日志文件的错误
日志消息 内部错误代码
Errorcodedenotingsuccess MOT_NO_ERROR0
Outofmemory MOT_ERROR_OOM1
Invalidconfiguration MOT_ERROR_INVALID_CFG2
Invalidargumentpassedtofunction MOT_ERROR_INVALID_ARG3
Systemcallfailed MOT_ERROR_SYSTEM_FAILURE4
Resourcelimitreached MOT_ERROR_RESOURCE_LIMIT5
南大通用数据技术股份有限公司
484
GBase 8s V8.8开发者手册
Internallogicerror MOT_ERROR_INTERNAL6
Resourceunavailable MOT_ERROR_RESOURCE_UNAVAILABLE7
Uniqueviolation MOT_ERROR_UNIQUE_VIOLATION8
Invalidmemoryallocationsize MOT_ERROR_INVALID_MEMORY_SIZE9
Indexoutofrange MOT_ERROR_INDEX_OUT_OF_RANGE10
Errorcodeunknown MOT_ERROR_INVALID_STATE11
返回给用户的错误
下面列出了写入数据库服务器日志文件并返回给用户的错误。
MOT使用返回码（ReturnCode，RC）返回Postgres标准错误代码至封装。某些RC会
导致向正在与数据库交互的用户生成错误消息。
MOT从内部返回Postgres代码（见下文）到数据库包，数据库封装根据标准的Postgres
行为对其做出反应。
提示信息中的%s、%u、%lu指代相应的错误信息（如查询、表名或其他信息）。
 %s：字符串
 %u：数字
 %lu：数字
表 13-2 返回给用户并记录到日志文件的错误
返回给用户的短/长描述 Postgres代码 内部错误码
Success. ERRCODESUCCESSFUL
RC_OK=0
Denotessuccess COMPLETION
Failure
ERRCODE_FDW_ERROR RC_ERROR=1
Unknownerrorhasoccurred.
Unknownerrorhasoccurred.
ERRCODE_FDW_ERROR RC_ABORT
Denotesabortedoperation.
南大通用数据技术股份有限公司
485
GBase 8s V8.8开发者手册
返回给用户的短/长描述 Postgres代码 内部错误码
Columndefinitionof%sis
notsupported. ERRCODE_INVALID_COL RC_UNSUPPORTED_COL_
Columntype%sisnot UMN_DEFINITION TYPE
supportedyet.
Columndefinitionof%sis
notsupported. ERRCODE_INVALID_COL RC_UNSUPPORTED_COL_
ColumntypeArrayof%sis UMN_DEFINITION TYPE_ARR
notsupportedyet.
Columnsize%dexceedsmax
tuplesize%u. ERRCODE_FEATURE_NOT RC_EXCEEDS_MAX_ROW
Columndefinitionof%sis _SUPPORTED _SIZE
notsupported.
Columnname%sexceeds
maxnamesize%u. ERRCODE_INVALID_COL RC_COL_NAME_EXCEED
Columndefinitionof%sis UMN_DEFINITION S_MAX_SIZE
notsupported.
Columnsize%dexceedsmax
size%u. ERRCODE_INVALID_COL
RC_COL_SIZE_INVLALID
Columndefinitionof%sis UMN_DEFINITION
notsupported.
Cannotcreatetable.
RC_TABLE_EXCEEDSMA
Cannotaddcolumn%s;as ERRCODE_FEATURENOT
X
thenumberofdeclared
SUPPORTED
columnsexceedsthe DECLARED_COLS
maximumdeclaredcolumns.
Cannotcreateindex.
ERRCODE_FDW_KEYSIZE
Totalcolumnsizeisgreater RC_INDEX_EXCEEDS_MA
EXCEEDS_MAX_ALLOWE
thanmaximumindex X_SIZE
D
size%u.
南大通用数据技术股份有限公司
486
GBase 8s V8.8开发者手册
返回给用户的短/长描述 Postgres代码 内部错误码
Cannotcreateindex.
ERRCODE_FDW_TOOMA
Totalnumberofindexesfor
RC_TABLE_EXCEEDS_MA
NY
table%sisgreaterthanthe
X_INDEXES
maximumnumberofindexes INDEXES
allowed%u.
ERRCODE_FDW_TOOMA
Cannotexecutestatement. NY
MaximumnumberofDDLs DDL_CHANGESIN RC_TXN_EXCEEDS_MAX
pertransactionreachedthe _DDLS
TRANSACTIONNOT
maximum%u.
ALLOWED
Uniqueconstraintviolation
Duplicatekeyvalueviolates ERRCODEUNIQUE
RC_UNIQUE_VIOLATION
uniqueconstraint\“%s\“”. VIOLATION
Key%salreadyexists.
ERRCODE_UNDEFINED_T
Table\“%s\”doesnotexist. RC_TABLE_NOT_FOUND
ABLE
ERRCODE_UNDEFINED_T
Index\“%s\”doesnotexist. RC_INDEX_NOT_FOUND
ABLE
Unknownerrorhasoccurred. ERRCODE_FDW_ERROR RC_LOCAL_ROW_FOUND
RC_LOCAL_ROW_NOT_F
Unknownerrorhasoccurred. ERRCODE_FDW_ERROR
OUND
RC_LOCAL_ROW_DELET
Unknownerrorhasoccurred. ERRCODE_FDW_ERROR
ED
Unknownerrorhasoccurred. ERRCODE_FDW_ERROR RC_INSERT_ON_EXIST
RC_INDEX_RETRY_INSER
Unknownerrorhasoccurred. ERRCODE_FDW_ERROR
T
Unknownerrorhasoccurred. ERRCODE_FDW_ERROR RC_INDEX_DELETE
南大通用数据技术股份有限公司
487
GBase 8s V8.8开发者手册
返回给用户的短/长描述 Postgres代码 内部错误码
RC_LOCAL_ROW_NOT_VI
Unknownerrorhasoccurred. ERRCODE_FDW_ERROR
SIBLE
Memoryistemporarily ERRCODE_OUT_OF_LOGI RC_MEMORY_ALLOCATI
unavailable. CAL_MEMORY ON_ERROR
RC_ILLEGAL_ROW_STAT
Unknownerrorhasoccurred. ERRCODE_FDW_ERROR
E
Nullconstraintviolated.
NULLvaluecannotbe
ERRCODE_FDW_ERROR RC_NULL_VIOLATION
insertedintonon-null
column%sattable%s.
Criticalerror.
ERRCODE_FDW_ERROR RC_PANIC
Criticalerror:%s.
Acheckpointisinprogress– ERRCODE_FDW_OPERATI
RC_NA
cannottruncatetable. ON_NOT_SUPPORTED
Unknownerrorhasoccurred. ERRCODE_FDW_ERROR RC_MAX_VALUE
ERRCODE_CONFIG_FILE_
 -
ERROR
ERRCODE_INVALIDTABL
 - E
DEFINITION
ERRCODE_INVALIDTRAN
Memoryengine–Failedto
- SACTION
performcommitprepared.
STATE
ERRCODE_FDW_INVALID
Invalidoption - OPTION
NAME
南大通用数据技术股份有限公司
488
GBase 8s V8.8开发者手册
返回给用户的短/长描述 Postgres代码 内部错误码
ERRCODE_INVALIDPARA
Invalidmemoryallocation
- METER
requestsize.
VALUE
ERRCODE_OUT_OFLOGIC
Memoryistemporarily
- AL
unavailable.
MEMORY
ERRCODE_T_RSERIALIZA
Couldnotserializeaccessdue
- TION
toconcurrentupdate.
FAILURE
Altertableoperationisnot
supportedformemorytable.
CannotcreateMOTtables ERRCODE_FDW_OPERATI
whileincrementalcheckpoint - ONNOT
isenabled. SUPPORTED
Re-indexisnotsupportedfor
memorytables.
Allocationoftablemetadata ERRCODE_OUT_OF_MEM
-
failed. ORY
DatabasewithOID%udoes ERRCODE_UNDEFINED_D
-
notexist. ATABASE
ERRCODE_NUMERIC_VA
Valueexceedsmaximum
- LUEOUT
precision:%d.
OF_RANGE
Youhavereachedamaximum ERRCODE_OUT_OFLOGIC
logicalcapacity%luof - AL
allowed%lu. MEMORY
13.3MOT 的概念
本章介绍GBase8sMOT的设计和工作原理，阐明其高级特性、功能及使用方法，旨在
南大通用数据技术股份有限公司
489
GBase 8s V8.8开发者手册
让读者了解MOT操作上的技术细节、重要特性细节和创新点。本章内容有助于决策MOT
是否适合于特定的应用需求，以及进行最有效的使用和管理。
13.3.1 MOT 纵向扩容架构
纵向扩容即为同一台机器添加额外的核以增加算力。纵向扩容是传统上为单对控制器和
多核的机器增加算力的常见形式。纵向扩容架构受限于控制器的可扩展性。
技术要求
MOT旨在实现以下目标：
 线性扩容：MOT提供事务性存储引擎，利用单个NUMA架构服务器的所有核，以提供
近线性的扩容性能。这意味着MOT的目标是在机器的核数和性能提升倍数之间实现直
接的、近线性的关系。
MOT的近线性扩容效果明显优于所有现有方案，并且尽可能接近于获得最佳效果，因
现有方案皆受限于硬件（如电线）的物理限制和局限性。
 无最大核数限制：MOT对最大核数不做任何限制。这意味着MOT可从单核扩展到高
达1000秒的多核，并且新增的核退化速度最小，即便是在跨NUMA槽位边界的情况下。
 极高的事务性吞吐量：MOT提供了一个事务性存储引擎，与市场上任何其他OLTP供
应商相比，它能够实现极高的事务性吞吐量。
 极低的事务性时延：与市场上任何其他OLTP供应商相比，MOT提供事务性存储引擎，
可以达到极低的事务时延。
 无缝集成和利用产品：MOT事务引擎与GBase8s产品标准无缝集成。通过这种方式，
MOT最大限度地重用了位于其事务性存储引擎顶部的GBase8s层功能。
设计原则
为了实现上述要求（特别是在多核的环境中），我们存储引擎的体系结构实施了以下技
术和策略：
 数据和索引只存在于内存中。
 数据和索引不用物理分区来布局（因为对于某些类型的应用程序，这些分区的性能可能
会降低）。
 事务并发控制基于乐观并发控制（OCC），没有集中的争用点。有关OCC的详细信息，
南大通用数据技术股份有限公司
490
GBase 8s V8.8开发者手册
请参见MOT并发控制机制。
 使用平行重做日志（最后单位为核）来有效避免中央锁定点。
 使用免锁索引。有关免锁索引的详细信息，请参见MOT索引。
 使用NUMA感知内存分配，避免跨槽位访问，特别是会话生命周期对象。有关NUMA
感知的更多信息，请参见NUMA-aware分配和亲和性。
 使用带有预缓存对象池的自定义MOT内存管理分配器，避免昂贵的运行时间分配和额
外的争用点。这种专用的MOT内存分配器按需预先访问操作系统中较大的内存块，然
后按需将内存分配给MOT，使内存分配更加高效。
使用外部数据封装（FDW）进行集成
MOT遵循并利用了GBase8s的标准扩展机制——外部数据封装（FDW），如下图所示。
在PostgreSQL外部数据封装特性的支持下，作为其他数据源的代理的MOT数据库可
以创建外表，如MySQL、Oracle、PostgreSQL等。当对外表执行查询时，FDW将查询外部
数据源并返回结果，就像查询内表一样。
GBase8s依赖PostgreSQL外部数据封装和索引支持，因此SQL完全覆盖，包括存储过
程、用户定义函数、系统函数调用。
图 13-2MOT架构
南大通用数据技术股份有限公司
491
GBase 8s V8.8开发者手册
上图中绿色表示MOT引擎，蓝色表示现有的GBase8s组件。由此可见，FDW在MOT
引擎和GBase8s组件之间进行中介。
与MOT相关的FDW定制
通过FDW集成MOT可以重用最上层的GBase8s功能，从而显著缩短MOT的上市时
间，同时不影响SQL的覆盖范围。
但是，GBase8s中原有的FDW机制并不是为存储引擎扩展而设计的，因此缺少以下基
本功能：
 查询规划阶段待计算的外表的索引感知
 完整的DDL接口
 完整的事务生命周期接口
 检查点接口