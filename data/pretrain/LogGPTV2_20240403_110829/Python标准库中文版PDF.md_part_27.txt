### 13.20.0.1. Example 13-21: 使用 `token` 模块
**文件:** `token-example-1.py`

```python
import token

print("NUMBER", token.NUMBER)
print("PLUS", token.PLUS)  # 更正了这里的 STAR 应为 PLUS
print("STRING", token.STRING)
```

**输出:**
```
NUMBER 2
PLUS 16
STRING 3
```

### 14. 其他模块
#### 14.1. 概览
本章介绍了一些不太常见的模块，其中一些仍然实用，而另一些则已被废弃。

#### 14.2. `pyclbr` 模块
`pyclbr` 模块提供了一个基本的 Python 类解析器。例如，在版本 1.5.2 中，该模块只包含一个 `readmodule` 函数，用于解析给定的模块并返回所有顶层类的列表。

##### 14.2.0.1. Example 14-1: 使用 `pyclbr` 模块
**文件:** `pyclbr-example-1.py`

```python
import pyclbr

mod = pyclbr.readmodule("cgi")
for k, v in mod.items():
    print(k, v)
```

**输出:**
```
MiniFieldStorage 
InterpFormContentDict 
FieldStorage 
SvFormContentDict 
StringIO 
FormContent 
FormContentDict 
```

从 Python 2.0 开始，新增了 `readmodule_ex` 接口，它还可以读取全局函数。如 Example 14-2 所示。

##### 14.2.0.2. Example 14-2: 使用 `pyclbr` 模块读取类和函数
**文件:** `pyclbr-example-3.py`

```python
import pyclbr

# 适用于 Python 2.0 及更高版本
mod = pyclbr.readmodule_ex("cgi")
for k, v in mod.items():
    print(k, v)
```

**输出:**
```
MiniFieldStorage 
parse_header 
test 
print_environ_usage 
parse_multipart 
FormContentDict 
initlog 
parse 
StringIO 
SvFormContentDict 
...
```

通过访问类实例的属性，可以获得关于类的更多信息，如 Example 14-3 所示。

##### 14.2.0.3. Example 14-3: 使用 `pyclbr` 模块
**文件:** `pyclbr-example-2.py`

```python
import pyclbr
import string

mod = pyclbr.readmodule("cgi")

def dump(c):
    # 打印类头
    s = "class " + c.name
    if c.super:
        s += "(" + string.join(map(lambda v: v.name, c.super), ", ") + ")"
    print(s + ":")
    
    # 按行号排序打印方法名
    methods = list(c.methods.items())
    methods.sort(key=lambda a: a[1])
    for method, lineno in methods:
        print(" def " + method)
    print()

for k, v in mod.items():
    dump(v)
```

**输出:**
```
class MiniFieldStorage:
 def __init__
 def __repr__

class InterpFormContentDict(SvFormContentDict):
 def __getitem__
 def values
 def items
 ...
```

#### 14.3. `filecmp` 模块
(新增于 Python 2.0) `filecmp` 模块用于比较文件和目录，如 Example 14-4 所示。

##### 14.3.0.1. Example 14-4: 使用 `filecmp` 模块
**文件:** `filecmp-example-1.py`

```python
import filecmp

if filecmp.cmp("samples/sample.au", "samples/sample.wav"):
    print("files are identical")
else:
    print("files differ!")
```

**输出:**
```
files differ!
```

在 Python 1.5.2 及更早版本中，可以使用 `cmp` 和 `dircmp` 模块代替。

#### 14.4. `cmd` 模块
`cmd` 模块为命令行接口 (CLI) 提供了一个简单的框架。它被用在 `pdb` 模块中，也可以在自己的程序中使用，如 Example 14-5 所示。

##### 14.4.0.1. Example 14-5: 使用 `cmd` 模块
**文件:** `cmd-example-1.py`

```python
import cmd
import sys

class CLI(cmd.Cmd):
    def __init__(self):
        super().__init__()
        self.prompt = '> '
    
    def do_hello(self, arg):
        print(f"hello again {arg} !")
    
    def help_hello(self):
        print("syntax: hello [message] -- prints a hello message")
    
    def do_quit(self, arg):
        sys.exit(1)
    
    def help_quit(self):
        print("syntax: quit -- terminates the application")
    
    do_q = do_quit

# 尝试运行
cli = CLI()
cli.cmdloop()
```

**输出:**
```
> help
Documented commands (type help <topic>):
========================================
hello  quit
Undocumented commands:
======================
help  q
> hello world
hello again world !
> q
```

#### 14.5. `rexec` 模块
注意：从 Python 2.3 版本开始，该模块已被移除。具体原因请参阅：
- [http://www.amk.ca/python/howto/rexec/](http://www.amk.ca/python/howto/rexec/)
- [http://mail.python.org/pipermail/python-dev/2002-December/031160.html](http://mail.python.org/pipermail/python-dev/2002-December/031160.html)

解决方案请参阅：
- [http://mail.python.org/pipermail/python-list/2003-November/234581.htm](http://mail.python.org/pipermail/python-list/2003-November/234581.htm)

`rexec` 模块提供了在限制环境下的 `exec`, `eval` 和 `import` 语句。在这个环境下，所有可能对机器造成威胁的函数都不可用，如 Example 14-6 所示。

##### 14.5.0.1. Example 14-6: 使用 `rexec` 模块
**文件:** `rexec-example-1.py`

```python
import rexec

r = rexec.RExec()
print(r.r_eval("1+2+3"))
print(r.r_eval("__import__('os').remove('file')"))
```

**输出:**
```
6
Traceback (innermost last):
  File "rexec-example-1.py", line 5, in ?
    print r.r_eval("__import__('os').remove('file')")
  File "/usr/local/lib/python1.5/rexec.py", line 257, in r_eval
    return eval(code, m.__dict__)
  File "", line 0, in ?
AttributeError: remove
```

#### 14.6. `Bastion` 模块
注意：从 Python 2.3 版本开始，该模块已被移除。具体原因请参阅：
- [http://www.amk.ca/python/howto/rexec/](http://www.amk.ca/python/howto/rexec/)
- [http://mail.python.org/pipermail/python-dev/2003-January/031848.html](http://mail.python.org/pipermail/python-dev/2003-January/031848.html)

`Bastion` 模块允许你控制给定对象的使用方式，如 Example 14-7 所示。你可以通过它将对象从未限制部分传递到限制部分。默认情况下，所有实例变量都是隐藏的，所有方法以下划线开头。

##### 14.6.0.1. Example 14-7: 使用 `Bastion` 模块
**文件:** `bastion-example-1.py`

```python
import Bastion

class Sample:
    value = 0
    
    def _set(self, value):
        self.value = value
    
    def setvalue(self, value):
        if 10 > value:
            self._set(value)

b = Bastion.Bastion(Sample(), ['setvalue'])
b.setvalue(9)  # 成功
b.setvalue(11)  # 失败
```

#### 14.9. `statvfs` 模块
`statvfs` 模块包含一些与 `os.statvfs`（可选）函数配合使用的常量和函数，该函数会返回文件系统的相关信息，如 Example 14-11 所示。

##### 14.9.0.1. Example 14-11: 使用 `statvfs` 模块
**文件:** `statvfs-example-1.py`

```python
import statvfs
import os

st = os.statvfs(".")
print("preferred block size =>", st[statvfs.F_BSIZE])
print("fundamental block size =>", st[statvfs.F_FRSIZE])
print("total blocks =>", st[statvfs.F_BLOCKS])
print("total free blocks =>", st[statvfs.F_BFREE])
print("available blocks =>", st[statvfs.F_BAVAIL])
print("total file nodes =>", st[statvfs.F_FILES])
print("total free nodes =>", st[statvfs.F_FFREE])
print("available nodes =>", st[statvfs.F_FAVAIL])
print("max file name length =>", st[statvfs.F_NAMEMAX])
```

**输出:**
```
preferred block size => 8192
fundamental block size => 1024
total blocks => 749443
total free blocks => 110442
available blocks => 35497
total file nodes => 92158
total free nodes => 68164
available nodes => 68164
max file name length => 255
```

#### 14.10. `calendar` 模块
`calendar` 模块是 Unix `cal` 命令的 Python 实现。它可以将给定年份/月份的日历输出到标准输出设备上。

- `prmonth(year, month)` 打印给定月份的日历，如 Example 14-12 所示。
- `prcal(year)` 打印给定年份的日历，如 Example 14-13 所示。

##### 14.10.0.1. Example 14-12: 使用 `calendar` 模块
**文件:** `calendar-example-1.py`

```python
import calendar

calendar.prmonth(1999, 12)
```

**输出:**
```
December 1999
Mo Tu We Th Fr Sa Su
1 2 3 4 5
6 7 8 9 10 11 12
13 14 15 16 17 18 19
20 21 22 23 24 25 26
27 28 29 30 31
```

##### 14.10.0.2. Example 14-13: 使用 `calendar` 模块
**文件:** `calendar-example-2.py`

```python
import calendar

calendar.prcal(2000)
```

**输出:**
```
2000
January February March
Mo Tu We Th Fr Sa Su Mo Tu We Th Fr Sa Su Mo Tu We Th Fr Sa Su
1 2 1 2 3 4 5 6 1 2 3
4 5 6 7 8 9 10 7 8 9 10 11 12 13 6 7 8 9 10 11 12
11 12 13 14 15 16 17 14 15 16 17 18 19 20 13 14 15 16 17 18 19
18 19 20 21 22 23 24 21 22 23 24 25 26 27 20 21 22 23 24 25 26
25 26 27 28 29 30 31 28 29 27 28 29 30 31
April May June
Mo Tu We Th Fr Sa Su Mo Tu We Th Fr Sa Su Mo Tu We Th Fr Sa Su
1 2 1 2 3 4 5 6 7 1 2
3 4 5 6 7 8 9 8 9 10 11 12 13 14 5 6 7 8 9 10 11
10 11 12 13 14 15 16 15 16 17 18 19 20 21 12 13 14 15 16 17 18
17 18 19 20 21 22 23 22 23 24 25 26 27 28 19 20 21 22 23 24 25
24 25 26 27 28 29 30 29 30 31 26 27 28 29 30
July August September
Mo Tu We Th Fr Sa Su Mo Tu We Th Fr Sa Su Mo Tu We Th Fr Sa Su
1 2 1 2 3 4 5 6 1
2 3 4 5 6 7 8 9 7 8 9 10 11 12 13 4 5 6 7 8 9 10
10 11 12 13 14 15 16 14 15 16 17 18 19 20 11 12 13 14 15 16 17
17 18 19 20 21 22 23 21 22 23 24 25 26 27 18 19 20 21 22 23 24
24 25 26 27 28 29 30 28 29 30 31 25 26 27 28 29 30
31
October November December
Mo Tu We Th Fr Sa Su Mo Tu We Th Fr Sa Su Mo Tu We Th Fr Sa Su
1 1 2 3 4 5 1
2 3 4 5 6 7 8 6 7 8 9 10 11 12 4 5 6 7 8 9 10
9 10 11 12 13 14 15 13 14 15 16 17 18 19 11 12 13 14 15 16 17
16 17 18 19 20 21 22 20 21 22 23 24 25 26 18 19 20 21 22 23 24
23 24 25 26 27 28 29 27 28 29 30 25 26 27 28 29 30
```