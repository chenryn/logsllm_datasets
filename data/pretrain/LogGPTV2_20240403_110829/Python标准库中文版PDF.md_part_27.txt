13.20.0.1. Example 13-21. 使用 token 模块
File: token-example-1.py
import token
print "NUMBER", token.NUMBER
print "PLUS", token.STAR
print "STRING", token.STRING
NUMBER 2
PLUS 16
STRING 3
14. 其他模块
14.1. 概览
本章描述的是一些并不怎么常见的模块. 一些是很实用的, 另些是已经废弃的
模块.
14.2. pyclbr 模块
pyclbr 模块包含一个基本的 Python 类解析器, 如 Example 14-1 所示.
版本 1.5.2 中, 改模块只包含一个 readmodule 函数, 解析给定模块, 返回一
个模块所有顶层类组成的列表.
14.2.0.1. Example 14-1. 使用 pyclbr 模块
File: pyclbr-example-1.py
import pyclbr
mod = pyclbr.readmodule("cgi")
for k, v in mod.items():
print k, v
MiniFieldStorage 
InterpFormContentDict 
FieldStorage 
SvFormContentDict 
StringIO 
FormContent 
FormContentDict 
2.0 及以后版本中, 添加了另个接口 readmodule_ex , 它还会读取全局函数.
如 Example 14-2 所示.
14.2.0.2. Example 14-2. 使用 pyclbr 模块读取类和函数
File: pyclbr-example-3.py
import pyclbr
# 2.0 and later
mod = pyclbr.readmodule_ex("cgi")
for k, v in mod.items():
print k, v
MiniFieldStorage 
parse_header 
test 
print_environ_usage 
parse_multipart 
FormContentDict 
initlog 
parse 
StringIO 
SvFormContentDict 
...
访问类实例的属性可以获得关于类的更多信息, 如 Example 14-3 所示.
14.2.0.3. Example 14-3. 使用 pyclbr 模块
File: pyclbr-example-2.py
import pyclbr
import string
mod = pyclbr.readmodule("cgi")
def dump(c):
# print class header
s = "class " + c.name
if c.super:
s = s + "(" + string.join(map(lambda v: v.name, c.super), ", ")
+ ")"
print s + ":"
# print method names, sorted by line number
methods = c.methods.items()
methods.sort(lambda a, b: cmp(a[1], b[1]))
for method, lineno in methods:
print " def " + method
print
for k, v in mod.items():
dump(v)
class MiniFieldStorage:
def _ _init_ _
def _ _repr_ _
class InterpFormContentDict(SvFormContentDict):
def _ _getitem_ _
def values
def items
...
14.3. filecmp 模块
( 2.0 新增) filecmp 模块用于比较文件和目录, 如 Example 14-4 所示.
14.3.0.1. Example 14-4. 使用 filecmp 模块
File: filecmp-example-1.py
import filecmp
if filecmp.cmp("samples/sample.au", "samples/sample.wav"):
print "files are identical"
else:
print "files differ!"
# files differ!
1.5.2 以及先前版本中, 你可以使用 cmp 和 dircmp 模块代替.
14.4. cmd 模块
cmd 模块为命令行接口( command-line interfaces , CLI )提供了一个简单的
框架. 它被用在 pdb 模块中, 当然你也可以在自己的程序中使用它, 如
Example 14-5 所示.
你只需要继承 Cmd 类, 定义 do 和 help 方法. 基类会自动地将这些方法转换
为对应命令.
14.4.0.1. Example 14-5. 使用 cmd 模块
File: cmd-example-1.py
import cmd
import string, sys
class CLI(cmd.Cmd):
def _ _init_ _(self):
cmd.Cmd._ _init_ _(self)
self.prompt = '> '
def do_hello(self, arg):
print "hello again", arg, "!"
def help_hello(self):
print "syntax: hello [message]",
print "-- prints a hello message"
def do_quit(self, arg):
sys.exit(1)
def help_quit(self):
print "syntax: quit",
print "-- terminates the application"
# shortcuts
do_q = do_quit
#
# try it out
cli = CLI()
cli.cmdloop()
> help
Documented commands (type help ):
========================================
hello quit
Undocumented commands:
======================
help q
> hello world
hello again world !
> q
14.5. rexec 模块
Feather 注: 版本 2.3 时取消了改模块的支持, 具体原因请参阅 :
http://www.amk.ca/python/howto/rexec/ 和
http://mail.python.org/pipermail/python-dev/2002-December/031160.html
解决方法请参阅:
http://mail.python.org/pipermail/python-list/2003-November/234581.htm
l
rexec 模块提供了在限制环境下的 exec , eval , 以及 import 语句, 如
Example 14-6 所示. 在这个环境下, 所有可能对机器造成威胁的函数都不可
用.
14.5.0.1. Example 14-6. 使用 rexec 模块
File: rexec-example-1.py
import rexec
r = rexec.RExec()
print r.r_eval("1+2+3")
print r.r_eval("_ _import_ _('os').remove('file')")
6
Traceback (innermost last):
File "rexec-example-1.py", line 5, in ?
print r.r_eval("_ _import_ _('os').remove('file')")
File "/usr/local/lib/python1.5/rexec.py", line 257, in r_eval
return eval(code, m._ _dict_ _)
File "", line 0, in ?
AttributeError: remove
14.6. Bastion 模块
Feather 注: 版本 2.3 时取消了改模块的支持, 具体原因请参阅 :
http://www.amk.ca/python/howto/rexec/ 和
http://mail.python.org/pipermail/python-dev/2003-January/031848.html
Bastion 模块, 允许你控制给定对象如何使用, 如 Example 14-7 所示. 你可
以通过它把对象从未限制部分传递到限制部分.
默认情况下, 所有的实例变量都是隐藏的, 所有的方法以下划线开头.
14.6.0.1. Example 14-7. 使用 Bastion 模块
File: bastion-example-1.py
import Bastion
class Sample:
value = 0
def _set(self, value):
self.value = value
def setvalue(self, value):
if 10 ",
# emulate readline completion handler
try:
for index in xrange(sys.maxint):
term = completer.complete(phrase, index)
if term is None:
break
print term,
except:
pass
print
co => continue compile complex coerce completer
sys.p => sys.path sys.platform sys.prefix
is => is isinstance issubclass
14.9. statvfs 模块
statvfs 模块包含一些与 os.statvfs (可选)函数配合使用的常量和函数, 该
函数会返回文件系统的相关信息. 如 Example 14-11 所示.
14.9.0.1. Example 14-11. 使用 statvfs 模块
File: statvfs-example-1.py
import statvfs
import os
st = os.statvfs(".")
print "preferred block size", "=>", st[statvfs.F_BSIZE]
print "fundamental block size", "=>", st[statvfs.F_FRSIZE]
print "total blocks", "=>", st[statvfs.F_BLOCKS]
print "total free blocks", "=>", st[statvfs.F_BFREE]
print "available blocks", "=>", st[statvfs.F_BAVAIL]
print "total file nodes", "=>", st[statvfs.F_FILES]
print "total free nodes", "=>", st[statvfs.F_FFREE]
print "available nodes", "=>", st[statvfs.F_FAVAIL]
print "max file name length", "=>", st[statvfs.F_NAMEMAX]
preferred block size => 8192
fundamental block size => 1024
total blocks => 749443
total free blocks => 110442
available blocks => 35497
total file nodes => 92158
total free nodes => 68164
available nodes => 68164
max file name length => 255
14.10. calendar 模块
calendar 模块是 Unix cal 命令的 Python 实现. 它可以将给定年份/月份的
日历输出到标准输出设备上.
prmonth(year, month) 打印给定月份的日历, 如 Example 14-12 所示.
14.10.0.1. Example 14-12. 使用 calendar 模块
File: calendar-example-1.py
import calendar
calendar.prmonth(1999, 12)
December 1999
Mo Tu We Th Fr Sa Su
1 2 3 4 5
6 7 8 9 10 11 12
13 14 15 16 17 18 19
20 21 22 23 24 25 26
27 28 29 30 31
prcal(year) 打印给定年份的日历, 如 Example 14-13 所示.
14.10.0.2. Example 14-13. 使用 calendar 模块
File: calendar-example-2.py
import calendar
calendar.prcal(2000)
2000
January February March
Mo Tu We Th Fr Sa Su Mo Tu We Th Fr Sa Su Mo Tu We Th Fr Sa
Su
1 2 1 2 3 4 5 6 1 2 3
4 5
3 4 5 6 7 8 9 7 8 9 10 11 12 13 6 7 8 9 10 11
12
10 11 12 13 14 15 16 14 15 16 17 18 19 20 13 14 15 16 17 18
19
17 18 19 20 21 22 23 21 22 23 24 25 26 27 20 21 22 23 24 25
26
24 25 26 27 28 29 30 28 29 27 28 29 30 31
31
April May June
Mo Tu We Th Fr Sa Su Mo Tu We Th Fr Sa Su Mo Tu We Th Fr Sa
Su
1 2 1 2 3 4 5 6 7 1 2
3 4
3 4 5 6 7 8 9 8 9 10 11 12 13 14 5 6 7 8 9 10
11
10 11 12 13 14 15 16 15 16 17 18 19 20 21 12 13 14 15 16 17
18
17 18 19 20 21 22 23 22 23 24 25 26 27 28 19 20 21 22 23 24
25
24 25 26 27 28 29 30 29 30 31 26 27 28 29 30
July August September
Mo Tu We Th Fr Sa Su Mo Tu We Th Fr Sa Su Mo Tu We Th Fr Sa
Su
1 2 1 2 3 4 5 6 1
2 3
3 4 5 6 7 8 9 7 8 9 10 11 12 13 4 5 6 7 8 9
10
10 11 12 13 14 15 16 14 15 16 17 18 19 20 11 12 13 14 15 16
17
17 18 19 20 21 22 23 21 22 23 24 25 26 27 18 19 20 21 22 23
24
24 25 26 27 28 29 30 28 29 30 31 25 26 27 28 29 30
31
October November December
Mo Tu We Th Fr Sa Su Mo Tu We Th Fr Sa Su Mo Tu We Th Fr Sa
Su
1 1 2 3 4 5 1
2 3
2 3 4 5 6 7 8 6 7 8 9 10 11 12 4 5 6 7 8 9
10
9 10 11 12 13 14 15 13 14 15 16 17 18 19 11 12 13 14 15 16
17
16 17 18 19 20 21 22 20 21 22 23 24 25 26 18 19 20 21 22 23
24
23 24 25 26 27 28 29 27 28 29 30 25 26 27 28 29 30