102 
 r.Close() 
103 
 } 
104 } 
一旦程序不再使用资源池，需要调用这个资源池的 Close 方法。代码清单 7-19 中展示了
Close 方法的代码。在第 98 行到第 101 行，这个方法关闭并清空了有缓冲的通道，并将缓冲的
空闲资源关闭。需要注意的是，在同一时刻只能有一个 goroutine 执行这段代码。事实上，当这
段代码被执行时，必须保证其他 goroutine 中没有同时执行 Release 方法。你一会儿就会理解为
什么这很重要。 
在第 85 行到第 86 行，互斥量被加锁，并在函数返回时解锁。在第 89 行，检查 closed 标
志，判断池是不是已经关闭。如果已经关闭，该方法会直接返回，并释放锁。如果这个方法第一
次被调用，就会将这个标志设置为 true，并关闭且清空 resources 通道。
现在我们可以看一下 Release 方法，看看这个方法是如何和 Close 方法配合的，如代码
清单 7-20 所示。 
代码清单 7-20  pool/pool.go：第 58 行到第 80 行
58 // Release 将一个使用后的资源放回池里 
59 func (p *Pool) Release(r io.Closer) { 
60 
 // 保证本操作和 Close 操作的安全 
61 
 p.m.Lock() 
62 
 defer p.m.Unlock() 
63 
64 
 // 如果池已经被关闭，销毁这个资源 
65 
 if p.closed { 
66 
 r.Close() 
67 
 return 
68 
 } 
69 
70 
 select { 
71 
 // 试图将这个资源放入队列 
72 
 case p.resources <- r: 
73 
 log.Println("Release:", "In Queue") 
74 
75 
 // 如果队列已满，则关闭这个资源 
76 
 default: 
77 
 log.Println("Release:", "Closing") 
78 
 r.Close() 
79 
 } 
80 } 
在代码清单 7-20 中可以找到 Release 方法的实现。该方法一开始在第 61 行和第 62 行对互
斥量进行加锁和解锁。这和 Close 方法中的互斥量是同一个互斥量。这样可以阻止这两个方法
在不同 goroutine 里同时运行。使用互斥量有两个目的。第一，可以保护第 65 行中读取 closed
标志的行为，保证同一时刻不会有其他 goroutine 调用 Close 方法写同一个标志。第二，我们不
想往一个已经关闭的通道里发送数据，因为那样会引起崩溃。如果 closed 标志是 true，我们
就知道 resources 通道已经被关闭。
在第 66 行，如果池已经被关闭，会直接调用资源值 r 的 Close 方法。因为这时已经清空并
关闭了池，所以无法将资源重新放回到该资源池里。对 closed 标志的读写必须进行同步，否则
可能误导其他 goroutine，让其认为该资源池依旧是打开的，并试图对通道进行无效的操作。 
现在看过了池的代码，了解了池是如何工作的，让我们看一下 main.go 代码文件里的测试程
序，如代码清单 7-21 所示。 
代码清单 7-21  pool/main/main.go
01 // 这个示例程序展示如何使用 pool 包 
02 // 来共享一组模拟的数据库连接 
03 package main 
04 
05 import ( 
06 
 "log" 
07 
 "io" 
08 
 "math/rand" 
09 
 "sync" 
10 
 "sync/atomic" 
11 
 "time" 
12 
13 
 "github.com/goinaction/code/chapter7/patterns/pool" 
14 ) 
15 
16 const ( 
17 
 maxGoroutines   = 25 // 要使用的 goroutine 的数量 
18 
 pooledResources = 2  // 池中的资源的数量 
19 ) 
20 
21 // dbConnection 模拟要共享的资源 
22 type dbConnection struct { 
23 
 ID int32 
24 } 
25 
26 // Close 实现了 io.Closer 接口，以便 dbConnection 
27 // 可以被池管理。Close 用来完成任意资源的 
28 // 释放管理 
29 func (dbConn *dbConnection) Close() error { 
30 
 log.Println("Close: Connection", dbConn.ID) 
31 
 return nil 
32 } 
33 
34 // idCounter 用来给每个连接分配一个独一无二的 id 
35 var idCounter int32 
36 
37 // createConnection 是一个工厂函数，  
38 // 当需要一个新连接时，资源池会调用这个函数 
39 func createConnection() (io.Closer, error) { 
40 
 id := atomic.AddInt32(&idCounter, 1) 
41 
 log.Println("Create: New Connection", id) 
42 
43 
 return &dbConnection{id}, nil 
44 } 
45 
46 // main 是所有 Go 程序的入口 
47 func main() { 
48 
 var wg sync.WaitGroup 
49 
 wg.Add(maxGoroutines) 
50 
51 
 // 创建用来管理连接的池 
52 
 p, err := pool.New(createConnection, pooledResources) 
53 
 if err != nil { 
54 
 log.Println(err) 
55 
 } 
56 
57 
 // 使用池里的连接来完成查询 
58 
 for query := 0; query < maxGoroutines; query++ { 
59 
 // 每个 goroutine 需要自己复制一份要 
60 
 // 查询值的副本，不然所有的查询会共享 
61 
 // 同一个查询变量 
62 
 go func(q int) { 
63 
 performQueries(q, p) 
64 
    wg.Done() 
65 
 }(query) 
66 
 } 
67 
68 
 // 等待 goroutine 结束 
69 
 wg.Wait() 
70 
71 
 // 关闭池 
72 
 log.Println("Shutdown Program.") 
73 
 p.Close() 
74 } 
75 
76 // performQueries 用来测试连接的资源池 
77 func performQueries(query int, p *pool.Pool) { 
78 
 // 从池里请求一个连接 
79 
 conn, err := p.Acquire() 
80 
 if err != nil { 
81 
 log.Println(err) 
82 
 return 
83 
 } 
84 
85 
 // 将该连接释放回池里 
86 
 defer p.Release(conn) 
87 
88 
 // 用等待来模拟查询响应 
89 
 time.Sleep(time.Duration(rand.Intn(1000)) * time.Millisecond) 
90 
 log.Printf("QID[%d] CID[%d]\n", query, conn.(*dbConnection).ID) 
91 } 
代码清单 7-21 展示的 main.go 中的代码使用 pool 包来管理一组模拟数据库连接的连接
池。代码一开始声明了两个常量 maxGoroutines 和 pooledResource，用来设置 goroutine
的数量以及程序将要使用资源的数量。资源的声明以及 io.Closer 接口的实现如代码清单 7-22
所示。 
代码清单 7-22  pool/main/main.go：第 21 行到第 32 行
21 // dbConnection 模拟要共享的资源 
22 type dbConnection struct { 
23 
 ID int32 
24 } 
25 
26 // Close 实现了 io.Closer 接口，以便 dbConnection 
27 // 可以被池管理。Close 用来完成任意资源的 
28 // 释放管理 
29 func (dbConn *dbConnection) Close() error { 
30 
 log.Println("Close: Connection", dbConn.ID) 
31 
 return nil 
32 } 
代码清单 7-22 展示了 dbConnection 结构的声明以及 io.Closer 接口的实现。
dbConnection 类型模拟了管理数据库连接的结构，当前版本只包含一个字段 ID，用来保存每
个连接的唯一标识。Close 方法只是报告了连接正在被关闭，并显示出要关闭连接的标识。
接下来我们来看一下创建 dbConnection 值的工厂函数，如代码清单 7-23 所示。
代码清单 7-23  pool/main/main.go：第 34 行到第 44 行
34 // idCounter 用来给每个连接分配一个独一无二的 id 
35 var idCounter int32 
36 
37 // createConnection 是一个工厂函数，  
38 // 当需要一个新连接时，资源池会调用这个函数 
39 func createConnection() (io.Closer, error) { 
40 
 id := atomic.AddInt32(&idCounter, 1) 
41 
 log.Println("Create: New Connection", id) 
42 
43 
 return &dbConnection{id}, nil 
44 } 
代码清单 7-23 展示了 createConnection 函数的实现。这个函数给连接生成了一个唯一
标识，显示连接正在被创建，并返回指向带有唯一标识的 dbConnection 类型值的指针。唯一
标识是通过 atomic.AddInt32 函数生成的。这个函数可以安全地增加包级变量 idCounter
的值。现在有了资源以及工厂函数，我们可以配合使用 pool 包了。
接下来让我们看一下 main 函数的代码，如代码清单 7-24 所示。
代码清单 7-24  pool/main/main.go：第 48 行到第 55 行
48 
 var wg sync.WaitGroup 
49 
 wg.Add(maxGoroutines) 
50 
51 
 // 创建用来管理连接的池 
52 
 p, err := pool.New(createConnection, pooledResources) 
53 
 if err != nil { 
54 
 log.Println(err) 
55 
 } 
在第 48 行，main 函数一开始就声明了一个 WaitGroup 值，并将 WaitGroup 的值设置为
要创建的 goroutine 的数量。之后使用 pool 包里的 New 函数创建了一个新的 Pool 类型。工厂
函数和要管理的资源的数量会传入 New 函数。这个函数会返回一个指向 Pool 值的指针，并检
查可能的错误。现在我们有了一个 Pool 类型的资源池实例，就可以创建 goroutine，并使用这个
资源池在 goroutine 之间共享资源，如代码清单 7-25 所示。 
代码清单 7-25  pool/main/main.go：第 57 行到第 66 行
57 
 // 使用池里的连接来完成查询 
58 
 for query := 0; query < maxGoroutines; query++ { 
59 
 // 每个 goroutine 需要自己复制一份要 
60 
 // 查询值的副本，不然所有的查询会共享 
61 
 // 同一个查询变量 
62 