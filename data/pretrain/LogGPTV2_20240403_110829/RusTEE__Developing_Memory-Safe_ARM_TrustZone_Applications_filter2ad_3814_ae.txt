Zone has been exploited to conduct either integrity checking [47]
or run-time rich OS activities monitoring [4, 17]. Besides the REE
side, several previous works [26, 52] also present the analysis and
enhancement on the security of TEE side.
Since TrustZone only provides one TEE to run multiple TAs
simultaneously, how to guarantee the security of the ported TAs
becomes a critical question for ARM manufactures. Previously, mul-
tiple solutions [2, 8, 10, 41] have been proposed to answer this
question. For example, TrustICE [43] executes different TAs sep-
arately in a time-slicing fashion, and the timing-based isolation
Figure 6: Performances of C-based TAs vs. Rust-based TAs
We evaluate each case 10,000 times in total, and we calculate the
cases’ average execution time with the data set that excludes 10%
data outliers (5% largest and 5% smallest data). The comparison of C-
based TA and Rust-based TA is presented in Figure 6. For each case,
we labeled the average execution time above the corresponding
TA’s bar. As the baseline data, the average context switch time
(without conducting any task in TEE) is 676 µs for both C and Rust
case, with a negligible variation. We consider the C-based TA’s
execution time as 100% and then normalizing the Rust-based TA’s
data accordingly. As the figure presents, for the five evaluated cases,
RusTEE only introduces the performance degradation from 0.27%
to 3.08%, and four of the five cases are affected with less than 1%
overhead.
7 DISCUSSION
Verifying Third-party TAs’ Security. Currently, RusTEE is re-
leased as an open-sourced project to benefit any TA developer who
wants to enhance the TA’s security. Meanwhile, we believe that our
mechanism can bring extra benefits for the mobile manufacturers to
quickly review the security of third-party TAs. Before RusTEE, the
manufacture can only verify a TA’s security via manual inspection,
which requires the verifier to understand the complicated logic in-
side TA. In this case, if the SDK is opened to third-party developers,
many human efforts will be introduced to verify the third-party
TAs. Moreover, such manual verification only provides the security
promise based on personal experience, without any formal proof.
After adapting RusTEE into the manufacturer’s SDK, the manufac-
turer will have a straightforward and reliable verification method,
which is checking if the TA’s source code contains any unsafe
segment or calls any untrusted crate. We consider providing the
automatic verification script for checking third-party TAs in future
work.
Binding the Rust and C Worlds. The major limitation of our
mechanism is that we do not provide an automatic solution to
bind the C and Rust worlds. Therefore, our mechanism may re-
quire extra human effort in the future if the dependent libraries
RandomSecure_StorageHotpAesAcipher859095100105110Normalized Execution Time (%)1740µs62931µs1979µs3310µs3978µs1749µs63300µs1985µs3413µs4010µsC TA performanceRust TA performance451RusTEE: Developing Memory-Safe ARM TrustZone Applications
ACSAC ’20, December 07–11, 2020, Online
[12] Common Vulnerabilities and Exposures. 2016. CVE-2016-2431. https://cve.mitre.
org/cgi-bin/cvename.cgi?name=CVE-2016-2431.
[13] Common Vulnerabilities and Exposures. Accessed in June 2020. CVE Search
https://cve.mitre.org/cgi-bin/cvekey.cgi?keyword=
Results for TrustZone.
trustzone.
[14] Victor Costan and Srinivas Devadas. 2016. Intel SGX Explained. IACR Cryptology
prevents one vulnerable TA from accessing other TA’s resources.
Brasser et al. [8] propose the idea to allocate different software-
generated “enclave” for every TA in REE and then utilize the shared
TEE to manage all allocated enclaves. As the shared threat model,
both previous works assume TAs compiled as vulnerable and fo-
cus on preventing the vulnerable TA from attacking other TEE
software. Unlike these related works, RusTEE presents the capa-
bility to compile TAs with the proven memory-safety regulations.
Therefore, our mechanism can promise all TAs are memory-safe
to get executed in the shared TEE without using any sophisticated
isolation mechanisms.
9 CONCLUSION
In this paper, we presented RusTEE, a Rust-based TrustZone appli-
cation SDK, which assists developers to compile the TA with the en-
forced memory-safety features. The TA relies on the language-wise
benefit of Rust to mitigate the previously reported implementation
issues. Furthermore. RusTEE redesigns the system-services APIs
and cross-world communication channel of TA to resolve two archi-
tectural issues of TrustZone-assisted TEE systems. We implement
RusTEE based on the existing C-based SDK OP-TEE, and evaluate
the mechanism on multiple platforms that include both emulators
and development boards. According to our evaluation, RusTEE in-
troduces slight performance overhead while significantly increases
the application’s memory-safety in multiple aspects. Finally, we
open-source the entire RusTEE with various examples.
ACKNOWLEDGMENTS
This work is partially supported by NSF grant CNS-1815650.
REFERENCES
[1] 96 Boards. Accessed in June 2020. HiKey Website. https://www.96boards.org/
product/hikey/.
[2] ARM. Accessed in June 2020. ARM Security Technology: Building a Secure System
using TrustZone® Technology. https://developer.arm.com/ip-products/security-
ip/trustzone.
[3] ARM. Accessed in June 2020.
Juno Arm Development Platform.
https://developer.arm.com/products/system-design/development-boards/juno-
development-board.
[4] Ahmed M Azab, Peng Ning, Jitesh Shah, Quan Chen, Rohan Bhutkar, Guruprasad
Ganesh, Jia Ma, and Wenbo Shen. 2014. Hypervision across worlds: Real-time
kernel protection from the arm trustzone secure world. In Proceedings of the
2014 ACM SIGSAC Conference on Computer and Communications Security. ACM,
90–102.
[5] Abhiram Balasubramanian, Marek S Baranowski, Anton Burtsev, Aurojit Panda,
Zvonimir Rakamarić, and Leonid Ryzhyk. 2017. System programming in Rust:
Beyond safety. In Proceedings of the 16th Workshop on Hot Topics in Operating
Systems. 156–161.
[6] Ariel Ben-Yehuda. 2015. Can mutate in match-arm using a closure. Rust issue
#27282. https://github.com/rust-lang/rust/issues/27282.
[7] Christophe Biocca. 2017. std vec IntoIter as_mut_slice borrows &self, returns
&mut of contents. Rust issue #39465. https://github.com/rust-lang/rust/issues/
39465.
[8] Ferdinand Brasser, David Gens, Patrick Jauernig, Ahmad-Reza Sadeghi, and
Emmanuel Stapf. 2019. SANCTUARY: ARMing TrustZone with User-space
Enclaves.. In NDSS.
[9] David Cerdeira, Nuno Santos, Pedro Fonseca, and Sandro Pinto. 2020. SoK:
Understanding the Prevailing Security Vulnerabilities in TrustZone-assisted TEE
Systems. In Proceedings of the IEEE Symposium on Security and Privacy (S&P), San
Francisco, CA, USA. 18–20.
[10] Yeongpil Cho, Jun-Bum Shin, Donghyun Kwon, MyungJoo Ham, Yuna Kim, and
Yunheung Paek. 2016. Hardware-Assisted On-Demand Hypervisor Activation
for Efficient Security Critical Code Execution on Mobile Devices.. In USENIX
Annual Technical Conference. 565–578.
[11] Common Vulnerabilities and Exposures. 2015. CVE-2015-6639. https://cve.mitre.
org/cgi-bin/cvename.cgi?name=CVE-2015-6639.
[15] Eric Evenchick. 2018. RustZone: Writing Trusted Applications in Rust. https:
ePrint Archive 2016, 086 (2016), 1–118.
//github.com/ericevenchick/rustzone.
form. https://edp.fortanix.com/.
[16] Fortanix. Accessed in June 2020. The Fortanix Rust Enclave Development Plat-
[17] Xinyang Ge, Hayawardh Vijayakumar, and Trent Jaeger. 2014. Sprobes: Enforcing
kernel code integrity on the trustzone architecture. arXiv preprint arXiv:1410.7747
(2014).
[18] GlobalPlatform. 2010. TEE Client API Specification v1.0. https://globalplatform.
org/specs-library/tee-client-api-specification/.
[19] GlobalPlatform. 2019. TEE Internal Core API Specification v1.2.1. https:
//globalplatform.org/specs-library/tee-internal-core-api-specification-v1-2/.
[20] GlobalPlatform. 2019. TEE Management Framework including asn.1 Profile
v1.0.1. https://globalplatform.org/specs-library/tee-management-framework-
including-asn1-profile/.
[21] Gouy, Isaac. Accessed in June 2020. The Computer Language Benchmarks Game.
https://benchmarksgame-team.pages.debian.net/benchmarksgame/.
[22] Joffrey Guilbon. 2018. Attacking the ARM’s TrustZone. https://blog.quarkslab.
com/attacking-the-arms-trustzone.html.
[23] Owen S Hofmann, Sangman Kim, Alan M Dunn, Michael Z Lee, and Emmett
Witchel. 2013. Inktag: Secure applications on an untrusted operating system. In
Proceedings of the eighteenth international conference on Architectural support for
programming languages and operating systems. 265–278.
[24] Zhichao Hua, Jinyu Gu, Yubin Xia, Haibo Chen, Binyu Zang, and Haibing Guan.
2017. vTZ: Virtualizing {ARM} TrustZone. In 26th {USENIX} Security Symposium
({USENIX} Security 17). 541–556.
Intel Software Guard Extensions.
[25] Intel. Accessed in June 2020.
https://software.intel.com/content/www/us/en/develop/topics/software-
guard-extensions.html.
[26] Jin Soo Jang, Sunjune Kong, Minsu Kim, Daegyeong Kim, and Brent Byunghoon
Kang. 2015. SeCReT: Secure Channel between Rich Execution Environment and
Trusted Execution Environment.. In NDSS.
[27] Ralf Jung, Jacques-Henri Jourdan, Robbert Krebbers, and Derek Dreyer. 2017.
RustBelt: Securing the foundations of the Rust programming language. Proceed-
ings of the ACM on Programming Languages 2, POPL (2017), 1–34.
[28] Hojoon Lee, Hyungon Moon, Ingoo Heo, Daehee Jang, Jinsoo Jang, Kihwan Kim,
Yunheung Paek, and Brent Kang. 2017. KI-Mon ARM: A Hardware-assisted Event-
triggered Monitoring Platform for Mutable Kernel Object. IEEE Transactions on
Dependable and Secure Computing (2017).
[29] Amit Levy, Michael P Andersen, Bradford Campbell, David Culler, Prabal Dutta,
Branden Ghena, Philip Levis, and Pat Pannuto. 2015. Ownership is theft: Experi-
ences building an embedded OS in Rust. In Proceedings of the 8th Workshop on
Programming Languages and Operating Systems. 21–26.
[30] Amit Levy, Bradford Campbell, Branden Ghena, Daniel B Giffin, Pat Pannuto, Pra-
bal Dutta, and Philip Levis. 2017. Multiprogramming a 64kb computer safely and
efficiently. In Proceedings of the 26th Symposium on Operating Systems Principles.
234–251.
[31] Amit Levy, Bradford Campbell, Branden Ghena, Pat Pannuto, Prabal Dutta, and
Philip Levis. 2017. The case for writing a kernel in Rust. In Proceedings of the 8th
Asia-Pacific Workshop on Systems. 1–7.
[32] Linaro. Accessed in June 2020. OP-TEE Sample Applications. https://github.
[33] Linaro. Accessed in June 2020. OPTEE Device. https://optee.readthedocs.io/en/
[34] Linaro. Accessed in June 2020. OPTEE Secure OS.
https://github.com/OP-
com/linaro-swg/optee_examples.
latest/building/index.html.
TEE/optee_os.
[35] Nicholas D Matsakis and Felix S Klock II. 2014. The rust language. In ACM
SIGAda Ada Letters, Vol. 34. ACM, 103–104.
[36] Jonathan M McCune, Yanlin Li, Ning Qu, Zongwei Zhou, Anupam Datta, Vir-
gil Gligor, and Adrian Perrig. 2010. TrustVisor: Efficient TCB reduction and
attestation. In Security and Privacy (SP), 2010 IEEE Symposium on. IEEE, 143–158.
[37] et al. M’Raihi. Accessed in June 2020. RFC4226: HOTP: An HMAC-Based One-
Time Password Algorithm. https://tools.ietf.org/html/rfc4226.
[38] George C Necula, Jeremy Condit, Matthew Harren, Scott McPeak, and Westley
Weimer. 2005. CCured: Type-safe retrofitting of legacy software. ACM Transac-
tions on Programming Languages and Systems (TOPLAS) 27, 3 (2005), 477–526.
[39] QEMU. Accessed in June 2020. QEMU Website. https://www.qemu.org/.
[40] Raspberry Pi. Accessed in June 2020. Raspberry Pi Serial Products.
https:
//www.raspberrypi.org/products/.
[41] Nuno Santos, Himanshu Raj, Stefan Saroiu, and Alec Wolman. 2014. Using ARM
TrustZone to build a trusted language runtime for mobile applications. ACM
SIGARCH Computer Architecture News 42, 1 (2014), 67–80.
452ACSAC ’20, December 07–11, 2020, Online
Shengye Wan, Mingshen Sun, Kun Sun, Ning Zhang, and Xu He
[42] Bjarne Stroustrup. Accessed in June 2020. Why doesn’t C++ provide a "finally"
construct? http://www.stroustrup.com/bs_faq2.html.
[43] He Sun, Kun Sun, Yuewu Wang, Jiwu Jing, and Haining Wang. 2015. Trustice:
Hardware-assisted isolated computing environments on mobile devices. In De-
pendable Systems and Networks (DSN), 2015 45th Annual IEEE/IFIP International
Conference on. IEEE, 367–378.
[44] The Rust Programming Language Core Team. Accessed in June 2020. Unsafe
Rust. https://doc.rust-lang.org/book/ch19-01-unsafe-rust.html.
[45] Trustonic. Accessed in June 2020. Application Protection & Security Mobile
in-app protection for critical mobile apps. https://www.trustonic.com/solutions/
trustonic-application-protection-tap/.
[46] Aaron Turon. 2015. Abstraction without overhead: Traits in Rust. https://blog.
rust-lang.org/2015/05/11/traits.html.
[47] Shengye Wan, Jianhua Sun, Kun Sun, Ning Zhang, and Qi Li. 2019. SATIN:
A Secure and Trustworthy Asynchronous Introspection on Multi-Core ARM
Processors. In 2019 49th Annual IEEE/IFIP International Conference on Dependable
Systems and Networks (DSN). IEEE, 289–301.
[48] Huibo Wang, Pei Wang, Yu Ding, Mingshen Sun, Yiming Jing, Ran Duan, Long Li,
Yulong Zhang, Tao Wei, and Zhiqiang Lin. 2019. Towards Memory Safe Enclave
Programming with Rust-SGX. In Proceedings of the 2019 ACM SIGSAC Conference
on Computer and Communications Security. 2333–2350.
[49] Wolfram Research, Inc. Accessed in June 2020. Hundred-Dollar, Hundred-Digit
Challenge Problems. http://mathworld.wolfram.com/Hundred-DollarHundred-
DigitChallengeProblems.html.
[50] Fengwei Zhang and Hongwei Zhang. 2016. Sok: A study of using hardware-
assisted isolated execution environments for security. In Proceedings of the Hard-
ware and Architectural Support for Security and Privacy 2016. ACM, 3.
[51] Ning Zhang, He Sun, Kun Sun, Wenjing Lou, and Y Thomas Hou. 2016. CacheKit:
Evading memory introspection using cache incoherence. In 2016 IEEE European
Symposium on Security and Privacy (EuroS&P). IEEE, 337–352.
[52] Ning Zhang, Kun Sun, Wenjing Lou, and Y Thomas Hou. 2016. Case: Cache-
assisted secure execution on arm processors. In Security and Privacy (SP), 2016
IEEE Symposium on. IEEE, 72–90.
453