对ret2vdso总结了一下，附上了实验数据，ret2vdso更多的出现在32位的程序中。
实验文件都在附件中 。
## 前导知识
### vdso
传统的int 0x80有点慢, Intel和AMD分别实现了sysenter/sysexit和syscall/ sysret, 即所谓的快速系统调用指令,
使用它们更快, 但是也带来了兼容性的问题. 于是Linux实现了vsyscall, 程序统一调用vsyscall, 具体的选择由内核来决定.
而vsyscall的实现就在VDSO中。
> 简单来说，可以把vdso看成一个.so动态库链接文件，但是不同的内核，vdso的内容也是不同的。
### vdso_x64
先看看内置了什么函数：
    ex@Ex:~/test$ objdump -T vdso_x64.so
    vdso_x64.so:     file format elf64-x86-64
    DYNAMIC SYMBOL TABLE:
    0000000000000a30  w   DF .text    0000000000000305  LINUX_2.6   clock_gettime
    0000000000000d40 g    DF .text    00000000000001c1  LINUX_2.6   __vdso_gettimeofday
    0000000000000d40  w   DF .text    00000000000001c1  LINUX_2.6   gettimeofday
    0000000000000f10 g    DF .text    0000000000000015  LINUX_2.6   __vdso_time
    0000000000000f10  w   DF .text    0000000000000015  LINUX_2.6   time
    0000000000000a30 g    DF .text    0000000000000305  LINUX_2.6   __vdso_clock_gettime
    0000000000000000 g    DO *ABS*    0000000000000000  LINUX_2.6   LINUX_2.6
    0000000000000f30 g    DF .text    000000000000002a  LINUX_2.6   __vdso_getcpu
    0000000000000f30  w   DF .text    000000000000002a  LINUX_2.6   getcpu
再看看有什么可用的指令：
    ex@Ex:~/test$ ROPgadget --binary vdso_x64.so
    Gadgets information
    ============================================================
    0x00000000000008b8 : adc byte ptr [r11], r8b ; add dh, byte ptr [rsi + 0x58] ; add cl, byte ptr [rsi + 0xa] ; ret
    0x00000000000008b9 : adc byte ptr [rbx], al ; add dh, byte ptr [rsi + 0x58] ; add cl, byte ptr [rsi + 0xa] ; ret
    0x000000000000098b : add bl, byte ptr [rbp - 0x3d] ; mov rax, rdx ; pop rbp ; ret
    0x0000000000000a23 : add byte ptr [rax], al ; add byte ptr [rax], al ; pop rbp ; ret
    0x0000000000000a25 : add byte ptr [rax], al ; pop rbp ; ret
    0x00000000000008be : add cl, byte ptr [rsi + 0xa] ; ret
    0x00000000000008bb : add dh, byte ptr [rsi + 0x58] ; add cl, byte ptr [rsi + 0xa] ; ret
    0x0000000000000a18 : add eax, 0xffffc66b ; pop rbp ; ret
    0x00000000000008ba : add eax, dword ptr [rdx] ; jbe 0x91d ; add cl, byte ptr [rsi + 0xa] ; ret
    0x0000000000000c23 : add edx, eax ; jmp 0xbb4
    0x0000000000000c22 : add r10, rax ; jmp 0xbb5
    0x0000000000000d78 : and al, 0xf6 ; ret
    0x0000000000000f52 : call 0x3106986a
    0x0000000000000b26 : call 0xffffffffc9ff487c
    0x0000000000000aab : clc ; ret
    0x0000000000000d84 : cld ; ret 0xffff
    0x0000000000000a16 : cmovae eax, dword ptr [rip - 0x3995] ; pop rbp ; ret
    0x0000000000000a15 : cmovae rax, qword ptr [rip - 0x3995] ; pop rbp ; ret
    0x0000000000000988 : cmp edx, eax ; ja 0x993 ; pop rbp ; ret
    0x0000000000000987 : cmp rdx, rax ; ja 0x994 ; pop rbp ; ret
    0x0000000000000986 : dec dword ptr [rax + 0x39] ; ret 0x277
    0x0000000000000c1d : dec dword ptr [rax + 0xf] ; scasd eax, dword ptr [rdi] ; ret 0x149
    0x0000000000000ec5 : dec dword ptr [rcx + 0x16158b16] ; ret 0xffff
    0x0000000000000c1f : imul eax, edx ; add r10, rax ; jmp 0xbb8
    0x0000000000000c1e : imul rax, rdx ; add r10, rax ; jmp 0xbb9
    0x000000000000098a : ja 0x991 ; pop rbp ; ret
    0x00000000000008bc : jbe 0x91b ; add cl, byte ptr [rsi + 0xa] ; ret
    0x0000000000000f1e : je 0xf29 ; mov qword ptr [rdi], rax ; pop rbp ; ret
    0x0000000000000fdf : jmp qword ptr [rdi]
    0x0000000000000aa9 : lea esp, dword ptr [rdx - 8] ; ret
    0x0000000000000aa8 : lea rsp, qword ptr [r10 - 8] ; ret
    0x0000000000000a21 : mov dword ptr [rdi], 0 ; pop rbp ; ret
    0x0000000000000f21 : mov dword ptr [rdi], eax ; pop rbp ; ret
    0x0000000000000f54 : mov dword ptr [rsi], eax ; xor eax, eax ; pop rbp ; ret
    0x000000000000098f : mov eax, edx ; pop rbp ; ret
    0x0000000000000f1c : mov ebp, esp ; je 0xf2b ; mov qword ptr [rdi], rax ; pop rbp ; ret
    0x0000000000000f20 : mov qword ptr [rdi], rax ; pop rbp ; ret
    0x000000000000098e : mov rax, rdx ; pop rbp ; ret
    0x0000000000000f1b : mov rbp, rsp ; je 0xf2c ; mov qword ptr [rdi], rax ; pop rbp ; ret
    0x0000000000000aa3 : pop r13 ; pop r14 ; pop rbp ; lea rsp, qword ptr [r10 - 8] ; ret
    0x0000000000000aa5 : pop r14 ; pop rbp ; lea rsp, qword ptr [r10 - 8] ; ret
    0x00000000000008bd : pop rax ; add cl, byte ptr [rsi + 0xa] ; ret
    0x0000000000000aa7 : pop rbp ; lea rsp, qword ptr [r10 - 8] ; ret
    0x0000000000000aa4 : pop rbp ; pop r14 ; pop rbp ; lea rsp, qword ptr [r10 - 8] ; ret
    0x000000000000098c : pop rbp ; ret
    0x0000000000000aa6 : pop rsi ; pop rbp ; lea rsp, qword ptr [r10 - 8] ; ret
    0x0000000000000f3f : push qword ptr [rdx + rcx - 0x77] ; ret 0xe281
    0x00000000000008c1 : ret
    0x0000000000000c21 : ret 0x149
    0x0000000000000989 : ret 0x277
    0x0000000000000b3c : ret 0x4801
    0x0000000000000e64 : ret 0x53e9
    0x0000000000000c24 : ret 0x8ceb
    0x0000000000000c4e : ret 0xc2e9
    0x0000000000000f43 : ret 0xe281
    0x0000000000000d85 : ret 0xffff
    0x0000000000000a20 : rol bh, 7 ; add byte ptr [rax], al ; add byte ptr [rax], al ; pop rbp ; ret
    0x000000000000090f : ror dword ptr [rdx], 1 ; ret
    0x0000000000000c20 : scasd eax, dword ptr [rdi] ; ret 0x149
    0x0000000000000f51 : shr eax, 0xc ; mov dword ptr [rsi], eax ; xor eax, eax ; pop rbp ; ret
    0x0000000000000a1f : xor eax, eax ; mov dword ptr [rdi], 0 ; pop rbp ; ret
    0x0000000000000f56 : xor eax, eax ; pop rbp ; ret
    Unique gadgets found: 62
    ex@Ex:~/test$
总共62条，总体来说，可以利用的指令还是很少的。
### vdso_x86
但是32位的话，就截然不同了。
    ex@Ex:~/test$ objdump -T vdso_x86.so
    vdso_x86.so:     file format elf32-i386
    DYNAMIC SYMBOL TABLE:
    00001050 g    DF .text    0000000d  LINUX_2.5   __kernel_vsyscall
    00000d50 g    DF .text    000002b2  LINUX_2.6   __vdso_gettimeofday
    00001070 g    DF .text    00000009  LINUX_2.5   __kernel_sigreturn
    00001010 g    DF .text    00000028  LINUX_2.6   __vdso_time
    00000000 g    DO *ABS*    00000000  LINUX_2.5   LINUX_2.5
    00001080 g    DF .text    00000008  LINUX_2.5   __kernel_rt_sigreturn
    00000820 g    DF .text    0000052f  LINUX_2.6   __vdso_clock_gettime
    00000000 g    DO *ABS*    00000000  LINUX_2.6   LINUX_2.6
有现成的`__kernel_rt_sigreturn`调用可以用来`SROP`。
再来看看其指令：
    ex@Ex:~/test$ ROPgadget --binary vdso_x86.so
    Gadgets information
    ============================================================
    0x00000817 : adc al, 0x31 ; rcr byte ptr [ebx + 0x5e], 0x5f ; pop ebp ; ret
    0x000007e4 : adc al, 0x5b ; pop esi ; pop edi ; pop ebp ; ret
    0x00000619 : adc byte ptr [ebp + 0xec54704], al ; or al, 0x41 ; ret 0x80e
    0x00001039 : add al, 0x24 ; ret
    0x0000061b : add al, 0x47 ; lds ecx, ptr [esi] ; or al, 0x41 ; ret 0x80e
    0x0000107f : add byte ptr [eax + 0xad], bh ; int 0x80
    0x0000107d : add byte ptr [eax], al ; add byte ptr [eax + 0xad], bh ; int 0x80
    0x0000107c : add byte ptr [eax], al ; add byte ptr [eax], al ; mov eax, 0xad ; int 0x80
    0x00000e3f : add byte ptr [eax], al ; add esp, 0x5c ; pop ebx ; pop esi ; pop edi ; pop ebp ; ret
    0x00001074 : add byte ptr [eax], al ; int 0x80
    0x0000107e : add byte ptr [eax], al ; mov eax, 0xad ; int 0x80
    0x00000e40 : add byte ptr [ebx + 0x5e5b5cc4], al ; pop edi ; pop ebp ; ret
    0x000010ab : add byte ptr [ebx], al ; add eax, dword ptr [ebx] ; ret
    0x00001032 : add cl, byte ptr [ecx - 0x3ca2a4f6] ; mov eax, dword ptr [esp] ; ret
    0x000010ad : add eax, dword ptr [ebx] ; ret
    0x000007e2 : add esp, 0x14 ; pop ebx ; pop esi ; pop edi ; pop ebp ; ret
    0x00000815 : add esp, 0x14 ; xor eax, eax ; pop ebx ; pop esi ; pop edi ; pop ebp ; ret
    0x00000e41 : add esp, 0x5c ; pop ebx ; pop esi ; pop edi ; pop ebp ; ret
    0x00000967 : add esp, 0x6c ; pop ebx ; pop esi ; pop edi ; pop ebp ; ret
    0x0000087c : add esp, 0x6c ; xor eax, eax ; pop ebx ; pop esi ; pop edi ; pop ebp ; ret
    0x0000103e : and al, 0xc3 ; mov ebx, dword ptr [esp] ; ret
    0x0000103a : and al, 0xc3 ; mov ecx, dword ptr [esp] ; ret
    0x00001042 : and al, 0xc3 ; mov edi, dword ptr [esp] ; ret
    0x00000801 : and byte ptr [edi], cl ; inc ebp ; ret 0x450f
    0x0000073c : call 0x1046
    0x00001141 : call 0x340ff6d2
    0x000007d5 : call dword ptr [ecx]
    0x000007f0 : cli ; pop ebx ; pop esi ; pop edi ; pop ebp ; ret
    0x00001045 : cmp al, 0x24 ; ret
    0x0000071f : cmp esi, eax ; ja 0x71e ; pop esi ; pop edi ; pop ebp ; ret
    0x000007cf : dec dword ptr [ebx - 0x32c37d] ; call dword ptr [ecx]
    0x00001030 : enter 0x274, -0x77 ; or bl, byte ptr [ebx + 0x5d] ; ret
    0x00000974 : fmul qword ptr [ebx - 0x32cb61] ; push esi ; ret
    0x00000722 : hlt ; pop esi ; pop edi ; pop ebp ; ret
    0x00001143 : in eax, 0xf ; xor al, 0x89 ; int 0xf
    0x00001054 : in eax, 0xf ; xor al, 0xcd ; sbb byte ptr [ebp + 0x5a], 0x59 ; ret
    0x00000973 : inc ebp ; fmul qword ptr [ebx - 0x32cb61] ; push esi ; ret
    0x00000803 : inc ebp ; ret 0x450f
    0x00000620 : inc ecx ; ret 0x80e
    0x0000061c : inc edi ; lds ecx, ptr [esi] ; or al, 0x41 ; ret 0x80e
    0x00000969 : insb byte ptr es:[edi], dx ; pop ebx ; pop esi ; pop edi ; pop ebp ; ret
    0x0000087e : insb byte ptr es:[edi], dx ; xor eax, eax ; pop ebx ; pop esi ; pop edi ; pop ebp ; ret
    0x00001057 : int 0x80
    0x00001147 : int 0xf
    0x00001072 : ja 0x1078 ; add byte ptr [eax], al ; int 0x80
    0x00000721 : ja 0x71c ; pop esi ; pop edi ; pop ebp ; ret
    0x000007e0 : jb 0x7f3 ; add esp, 0x14 ; pop ebx ; pop esi ; pop edi ; pop ebp ; ret
    0x00000715 : jbe 0x728 ; mov eax, esi ; mov edx, ecx ; pop esi ; pop edi ; pop ebp ; ret
    0x00001031 : je 0x103b ; mov dword ptr [edx], ecx ; pop ebx ; pop ebp ; ret
    0x0000061d : lds ecx, ptr [esi] ; or al, 0x41 ; ret 0x80e
    0x00000968 : les ebp, ptr [ebx + ebx*2 + 0x5e] ; pop edi ; pop ebp ; ret
    0x0000087d : les ebp, ptr [ecx + esi - 0x40] ; pop ebx ; pop esi ; pop edi ; pop ebp ; ret
    0x00000e42 : les ebx, ptr [ebx + ebx*2 + 0x5e] ; pop edi ; pop ebp ; ret
    0x000007e3 : les edx, ptr [ebx + ebx*2] ; pop esi ; pop edi ; pop ebp ; ret
    0x00000816 : les edx, ptr [ecx + esi] ; rcr byte ptr [ebx + 0x5e], 0x5f ; pop ebp ; ret
    0x0000113f : lfence ; mov ebp, esp ; sysenter
    0x0000113c : mfence ; lfence ; mov ebp, esp ; sysenter
    0x00001033 : mov dword ptr [edx], ecx ; pop ebx ; pop ebp ; ret
    0x00001071 : mov eax, 0x77 ; int 0x80
    0x00001080 : mov eax, 0xad ; int 0x80
    0x00001038 : mov eax, dword ptr [esp] ; ret
    0x0000102f : mov eax, ecx ; je 0x103d ; mov dword ptr [edx], ecx ; pop ebx ; pop ebp ; ret
    0x00000717 : mov eax, esi ; mov edx, ecx ; pop esi ; pop edi ; pop ebp ; ret
    0x000007ed : mov eax, esi ; mov edx, edi ; pop ebx ; pop esi ; pop edi ; pop ebp ; ret
    0x00001053 : mov ebp, esp ; sysenter
    0x00001040 : mov ebx, dword ptr [esp] ; ret
    0x00000965 : mov ebx, edx ; add esp, 0x6c ; pop ebx ; pop esi ; pop edi ; pop ebp ; ret
    0x0000103c : mov ecx, dword ptr [esp] ; ret
    0x00001044 : mov edi, dword ptr [esp] ; ret
    0x00000719 : mov edx, ecx ; pop esi ; pop edi ; pop ebp ; ret
    0x000007ef : mov edx, edi ; pop ebx ; pop esi ; pop edi ; pop ebp ; ret
    0x00000792 : movsd dword ptr es:[edi], dword ptr [esi] ; ret 0xf631
    0x0000104c : nop ; nop ; nop ; nop ; push ecx ; push edx ; push ebp ; mov ebp, esp ; sysenter