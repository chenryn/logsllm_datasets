SyntaxElement has a function pointer mapping. h264ref gets the
structure pointer currSE from that array (line 5), and uses the func-
tion pointer in the pointed structure for an indirect function call
(line 9). The index used to retrieve the structure pointer is constrain-
ing data, without which the analysis has to conservatively take all
1200 elements as the potentially retrieved pointer. When currSE
is dereferenced to get the function pointer, there are up to 1200
candidate locations, leading to the large allowed target number.
Case study 2: cascading access. gobmk has the largest allowed
target number (the maximum 8-byte value), due to the cascading of
constraining data. Specifically, one value derived from constraining
data is used to calculate a second value together with other con-
straining data, in which the counter is multiplied by two maximum
values. Figure 7 shows one example of cascaded access, in which
index1, index2, and index3 are constraining data. Here we use the
concrete value to estimate the maximum constraining data. At line
10, tmp is retrieved from pattern_list with index1, and its counter
will be multiplied by index1. When tmp is saved into the list, each
list element may have counter*index1 sources. Then after another
iteration, each element will have counter*index1*index1 sources.
In this way, the counter value increases quickly. When tmp is used
at line 17, the allowed target number is very large.
Table 4: Real-world exploits prevented by µCFI.
Prog
ffmpeg
php
nginx
sudo
CVE
2016-10191
2016-10190
2015-8617
2013-2028
2012-0809
Type
heap overflow
heap overflow
format string
stack overflow
format string
Exploit
[2]
[6]
[20]
[63]
[22]
Blocked?
✓
✓
✓
✓
✓
µCFI guarantees the UCT property regardless of large tables
and cascading accesses, as it uses constraining data to get a unique
target for each node, avoiding counter increase from the beginning.
100
80
60
40
20
0
)
%
(
e
g
a
t
n
e
c
r
e
p
t
e
k
c
a
P
TNT
TIP
BBID
Return
c-data
bzip2 mcf
milc
namd
gobmk
soplex
hmmer
libquantum
sjeng
h264ref
lbm
astar
sphinx3
nginx
vsftpd
5.2 Preventing attacks
We evaluate the effectiveness of µCFI at preventing real-world ex-
ploits, recently proposed advanced attacks, and synthesized attacks
that bypass known defenses (including PittyPat).
We first collect 5 publicly available exploits against 4 vulnera-
ble programs as listed in Table 4. ffmpeg is a popular multimedia
framework for encoding and decoding videos and audios. It is vul-
nerable to two heap-based buffer overflow bugs, CVE-2016-10190
and CVE-2016-10191, which are exploitable to attackers to con-
struct control-hijacking attacks. php is the interpreter of the PHP
language, while sudo is a utility program on Unix-like systems
for users to run programs with the privilege of other users. Both
of them are vulnerable to format string vulnerabilities, i.e, CVE-
2015-8617 for php and CVE-2012-0809 for sudo. As this type of
vulnerability is highly exploitable, attackers simply launch control-
hijacking attacks by corrupting code pointers. Nginx web server
has a stack-based buffer overflow (CVE-2013-2028). We modify the
exploit from [53] to carefully overwrite return addresses with their
original values, and finally corrupt a sensitive structure pointer on
the stack to launch forward-edge attacks. µCFI successfully detects
all these CFI violations and halts their executions.
We also apply µCFI to protect the program introduced in Pit-
tyPat [21] that is vulnerable to COOP attack [55]. COOP is a
Turing-complete attack method via fake object construction. As it
corrupts forward-edge control-flow transfers to function entries,
COOP poses a big challenge to coarse-grained CFIs. µCFI prevents
COOP attacks by protecting all control data, which allows it to ac-
curately track the function pointers in memory. When the program
is fed a malicious input, µCFI successfully discriminates between
legitimate and counterfeit objects to detect the attack.
At last, we evaluate µCFI on synthesized attacks that can bypass
analysis without constraining data, like in PittyPat. We modify the
source code of sjeng and gobmk to introduce two bugs, and build
attacks to corrupt function pointers retrieved from large arrays. As
we demonstrate in §2.2, existing CFI solutions cannot prevent such
attacks because they overestimate all array elements as allowed
targets. µCFI detects the inconsistency between the real target and
the result of our analysis, and thus blocks both attacks.
5.3 Overhead measurement
Table 3 summarizes the overhead of µCFI in terms of execution
time, peak memory use and compiled code size.
Performance overhead. On average, µCFI introduces 7.88% exe-
cution overhead to evaluated SPEC benchmarks. We break down
Figure 8: Trace reduction. Complete path construction uses TNT and TIP
packets, while µCFI only requires BBID, Return and c-data.
the overhead to two components: that by instrumentation for ef-
ficient tracing and that by synchronization for CFI validation. As
shown in the instru column under Time Overhead in Table 3, code
instrumentation leads to less than 3% overhead, while the +monior
column shows that monitoring further increases overhead by 5.23%.
The overall overhead can be less than the instrumentation over-
head. We believe this is due to non-determinism like caching and
paging. We also calculate the average overhead for SPEC by exclud-
ing benchmarks without any ICT instructions, specifically, milc,
libquantum and lbm. The result shows that µCFI still performs
efficiently, introducing 10.10% overhead.
For real-world applications, µCFI introduces 4.05% overhead to
nginx, and 0.75% overhead to vsftpd for requesting 1K files. We
also measure the request for larger files, and find the overhead is
negligible. Requesting large files invokes more write system call,
and thus triggers more synchronizations between the monitor and
the protected execution. However, as there is no pending CFI checks
between system calls, µCFI immediately resumes the execution. In
fact, such heavy I/O operations amortize the instrumentation in
the main program, and thus lead to less overhead.
µCFI has less overhead than PittyPat (17.9% for SPEC and 11.9%
for nginx) for two reasons. First, enforcing the UCT property makes
our analysis more efficient. For example, for an assignment op-
eration, the analysis copies the target set from the source to the
destination. µCFI only copies one target, whereas PittyPat has to
copy a large set (e.g., 1200 targets in h264ref). Second, our method
of path reconstruction avoids generating and parsing the TNT pack-
ets that predominate PT traces. Figure 8 compares the necessary
packets for complete control-path construction (TNT, TIP) against
our partial path construction (BBID, Return, c-data). The TNT pack-
ets account for over 90% of the whole PT trace in most cases. Our
trace size is negligible in comparison.
µCFI introduces relatively higher overhead to some benchmarks,
like 25% for h264ref and 50% for perlbench. We examine the code
of h264ref and find that it performs a large number of indirect
function calls within a small time window, which creates a burden
on the kernel task processing the PT trace. We can address this
problem by allocating more kernel tasks for PT parsing, or moving
our analysis into the kernel space, like in Griffin [23]. Overhead
on perlbench mainly comes from two aspects: high percentage of
sensitive instructions and frequent forking of child processes. About
20% of perlbench instructions are considered sensitive and half of
basic blocks are instrumented for dumping their BBIDs. Further,
perlbench creates 66 child processes with the heavy fork system
call, which triggers the monitor forks in the same way, thus slowing
down the execution. We can reduce the overhead as follows.
Optimization opportunity. We identify a promising direction to
reduce our overhead with the new hardware feature — the PTWrite
instruction from Intel PT. The PTWrite instruction directly writes
user-provided data as a TIP packet into the PT trace. µCFI can uti-
lize this instruction to log BBID and constraining data. Compared
to our write_data function which contains a bunch of instructions,
PTWrite is more compact and thus more efficient. With this instruc-
tion, we can significantly reduce the performance overhead.
Memory overhead. We measure the memory usage of the pro-
tected program and present the results in the Memory Ovrhd column
of Table 3. At 0.81%, the memory increase for SPEC benchmarks is
negligible. For nginx and vsftpd, µCFI introduces less than 6% over-
head. Considering the large amount of memory on contemporary
devices, such increase is acceptable.
Code overhead. µCFI compiler introduces extra code into the pro-
tected binary, including a fixed-size part and a program-dependent
part. The fixed part contains functions for data collection and trace
reduction, which is the same for any program. We allocate about
4MB for the fixed part to support logging constraining data in
the range of [-1024, 4M-1024]. Considering the large code base in
modern programs (e.g., browsers) and advanced memory sharing
techniques (e.g., memory deduplication [29, 41]), this size over-
head is acceptable. Another part of the overhead comes from the
instrumented calls and return redirection, and is shown in the
vCode Ovrhd column of Table 3. µCFI introduces little code over-
head in this part for most SPEC benchmarks (4.04% on average).
For perlbench, the code size overhead is 32.13%. The reason is that
half of its basic blocks contain sensitive instructions and thus are
instrumented with extra calls to write_data to record their BBID.
6 DISCUSSION & FUTURE WORK
In this section, we discuss several important topics regarding Intel
PT and µCFI. First, we analyze the security guarantee of µCFI and
the attacks it can prevent. Then we compare µCFI with a closely
related work, code-pointer integrity (CPI) [36]. Next we present
the data-loss problem of Intel PT, and discuss the missed SPEC
benchmarks due to data-loss. At last, we list the future work of
handling the less common but challenging ICTs, like exceptions.
6.1 Security promise by µCFI.
As µCFI monitor asynchronously checks the target of each ICT
instruction after its execution, it is possible that the attack has
been launched for a while before we detect it. However, µCFI still
provides a strong security guarantee as follows. First, attackers can-
not make significant damage through security-critical system calls.
µCFI synchronizes the monitor and the protected execution before
the latter enters the high-privileged kernel space through security-
critical system calls. The synchronization temporarily pauses the
protected execution until the monitor finishes all CFI checks. There-
fore, the monitor verifies the targets of all executed ICT instructions,
and detects any individual unexpected behavior.
Second, attackers cannot clean its attack trace to bypass detection.
Intel PT logs each ICT target (including the corrupted one) into the
kernel space immediately after the instruction’s execution. Without
invoking security-critical system calls, attackers cannot touch the
PT trace. But once they invoke such system calls, the monitor
pauses the execution before entering kernel, checks all executed
ICT instructions with the clean PT trace and detects the attack.
At last, attackers cannot overflow PT trace in kernel to bypass
detection. A smart attacker may keep running ICT instructions
in user-space to generate a huge number of PT packets, aiming
to overflow the PT trace. However, this attack does not work on
µCFI. We set a limit of kernel memory used for PT trace. Once
the limit is hit, µCFI suspends the protected execution until the
monitor completes the checking phase and creates new memory
quota. Since the normal execution usually does not trigger the limit,
we treat frequent limit hit as a hint of attack.
5.4 Compatibility with shadow stack
We measure the compatibility of µCFI with integrated parallel
shadow stack (PSS) protection. We compile each program with the
µCFI compiler and PSS and measure the execution correctness and
performance overhead. All test programs including SPEC bench-
marks, nginx, and vsftpd, work well with benign inputs, demon-
strating the strong compatibility of µCFI. The overhead of inte-
grating PSS is shown in the +stack column in Table 3. On average,
PSS introduces a 2.07% overhead to evaluated SPEC benchmarks
and negligible overhead to nginx and vsftpd. Although parallel
shadow stack works well with µCFI, we do not claim any con-
tribution nor provide any guarantee on backward-edge CFI. By
showing the compatibility of µCFI with shadow stacks, we clarify
that any alternative solutions with various security guarantees,
like randomization-based SafeStack [36] and hardware-based Intel
CET technique [33], can be integrated with µCFI to provide UCT
property on both directions.
6.2 Security analysis and CPI
Whether µCFI can prevent a concrete attack depends on the type
of the attack-corrupted data. Specifically, (1) attacks corrupting
code addresses (i.e., return address and function pointer) can be
detected and blocked. (2) Attacks corrupting data with no relation-
ship to control-flow can survive. In the case when the corrupted
data indirectly affects the control-flow, µCFI can detect the attack if
(3) the corrupted data is a pointer that affects the control-flow; (4)
otherwise, µCFI cannot detect it. For example, µCFI cannot detect
non-control-attacks [14, 56] because they fall into either case (2),
such as corrupting the user identity variable; or case (4), such as
corrupting the authenticated flag. For real-world control-hijacking
attacks, like the ones in §5.2, which fall into either case (1) or (3),
µCFI can detect and block them.
µCFI prevents the same set of attacks as code-pointer integrity,
which enforces memory safety on control-data to prevent corrup-
tion in the first place. Both works protect the same set of program
data, i.e., the sensitive pointer in CPI, and the union of the sensitive
instruction and the constraining data in this paper. The main dif-
ference is the mechanism used to realize the protection. CPI uses
in-process isolation to prevent low-privileged code from accessing
sensitive data, and checks access boundary in high-privileged code
to avoid corruptions. Instead, µCFI relies on out-of-process monitor
to remove the low-privileged code from the attack surface, and
further leverages an “infinite” memory model to preclude possible
memory errors in the monitor. Regarding implementations, cur-
rently CPI uses code segment to provide isolation on x86 system,
and relies on information hiding to secure the sensitive data on
x86_64 system. We implement µCFI on x86_64 system with process
isolation and Intel PT, and the idea is also applicable on x86 system.
6.3 Reliability of Intel PT
Intel PT has been explored in several works [21, 23, 28] to improve
control-flow integrity. However, we find that PT packets can be
lost at the hardware level. Specifically, some packets are dropped
from the PT trace, even if the software driver faithfully copies every
bit from the hardware buffer. This problem is more severe if one
program generates a large number of PT packets within a short
time window. As µCFI requires all necessary PT packets shown in
their generation order to reconstruct the control flow, any data-loss
renders our protection fail due to missed operations. Originally,
we find this problem in almost all SPEC benchmarks, in which we
generate traces to include all types of packets.
We inspect this problem and identify that TNT packets, which
usually dominate the PT trace, contribute the most to the data-loss
problem. Therefore, we mitigate this problem with novel encoding
techniques to circumvent TNT packets and some others, as we
discuss in §4. Finally, we did not see any packet loss for evaluated
SPEC programs and real-world applications. However, data-loss
problem still exists for some SPEC programs, especially for C++
ones which keep generating a lot of PT packets, like xalancbmk.
We have to skip these benchmarks in our evaluation.
We report the data-loss problem to the corresponding team in In-
tel. They acknowledge this problem, and express supportive attitude
to use PT for security. We believe our work shows the promising
security benefit from complete PT trace, and will help Intel accu-
rately measure the value of fixing the data-loss problem. Although
Intel does not provide a concrete plan of fix, we do observe that
newer generations of Intel CPUs have fewer lost packets on the
same workload. We will keep eyes on Intel’s progress of solving
this problem, and expect a complete fix in the near future.
6.4 Unsupported benchmarks
We skip several SPEC benchmarks in our evaluation due to the data-
loss problem, including gcc, dealII, povray, omnetpp and xalancbmk.
We will evaluate µCFI on these benchmarks once Intel fixes the
data-loss problem, or releases newer productions with minimal
lost data. Among them, C++ benchmarks usually contain more
sensitive data due to the C++ polymorphism, and are likely to have
higher overhead with µCFI. Polymorphism introduces a pointer of
one function pointer table to each object, which is considered as
sensitive data in µCFI. Therefore, µCFI executes more instructions
in the monitor to capture all valid operations on control-data to