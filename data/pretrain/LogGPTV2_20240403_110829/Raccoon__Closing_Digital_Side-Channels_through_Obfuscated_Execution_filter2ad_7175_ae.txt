Multi-threaded Programs. Raccoon’s data structures
are stored in thread-local storage (TLS), so Rac-
coon can access internal data structures without us-
ing locks. Raccoon initializes these data-structures at
thread entry-points (identiﬁed by pthread create())
and frees them at thread destruction-points (identiﬁed by
pthread exit()). Raccoon prevents race conditions on
the user program’s memory by using locks where neces-
sary. Most importantly, as long as the user program is
race-free, Raccoon maintains the correct data-ﬂow de-
pendences in both single-threaded and multi-threaded
programs, as described in Section 5.1.
Taint Analysis. Raccoon’s taint analysis is sound but
not complete, so it over-approximates the amount of code
that must be obfuscated. For large programs, this over-
approximation is a signiﬁcant source of overhead. Rac-
coon’s taint analysis is ﬂow-insensitive, path-insensitive,
and context-insensitive, and Raccoon uses a rudimen-
tary alias analysis technique that assumes two pointers
alias if they have the same type. We believe that more
precise static analysis techniques can be used to greatly
shrink Raccoon’s taint graph, thus reducing the obfusca-
tion overhead.
Limitations Imposed by Hardware. Various x86 in-
consume different cycles
structions (DIV, SQRT, etc.)
depending on their operand values.
Such operand-
dependent instruction execution latency introduces the
biggest hurdle in ensuring the security of Raccoon-
obfuscated programs. We also believe that the perfor-
mance overhead of obfuscated programs would be sub-
stantially smaller than the current overhead if processors
came equipped with (small) scratchpad memory. Based
on these conjectures, we plan to explore the impact of
modiﬁed hardware designs in the near future.
USENIX Association  
24th USENIX Security Symposium  443
13
)
s
u
(
e
m
T
i
6
0
+
e
1
4
0
+
e
1
2
0
+
e
1
0
0
+
e
1
Recursive ORAM
Non−recursive ORAM
G
G
G
G
0
0
0
0
1
0
0
1
)
s
n
o
i
l
l
i
m
l
(
s
e
c
y
c
U
P
C
Non−recursive ORAM − 64
Non−recursive ORAM − 1
Stream − 64
Stream − 1
G
G
G
G
G
G
1e+01
G
G
G
1
G
G
G
G
G
1e+03
1e+05
1e+07
1e+01
1e+03
1e+05
1e+07
1e+09
ORAM size (KB)
Data size (elements)
(a) Initialization cost of recursive and non-recursive ORAM implemen-
tation (median of 10 measurements for each sample).
(b) Performance comparison of software Path ORAM and streaming
over the entire array.
Figure 10: Software ORAM performance.
8 Conclusions
In this paper, we have introduced the notion of digital
side-channel attacks, and we have presented a system
named Raccoon to defend against such attacks. We have
evaluated Raccoon’s performance against 15 programs
to show that its overhead is signiﬁcantly less than that
of the best prior work and that it has several additional
beneﬁts: it expands the threat model, it removes special-
purpose hardware, it permits the release of the trans-
formed code to the adversary, and it also expands the set
of supported language features. In comparing Raccoon
against GhostRider, we ﬁnd that Raccoon’s overhead is
8.9× lower.
Raccoon’s obfuscation technique can be enhanced in
several ways. First, while the performance overhead
of Raccoon-obfuscated programs is high enough to pre-
clude immediate practical deployment, we believe that
this overhead can be substantially reduced by employing
deterministic or special-purpose hardware. Second, Rac-
coon’s technique of transactional execution and oblivious
memory update can be applied to the operating system
(OS) kernel, thus paving the way for protection against
OS-based digital side-channel attacks. Finally, in addi-
tion to defending against side-channel attacks, we be-
lieve that Raccoon can be strengthened to defend against
covert-channel communication.
Acknowledgments. We thank our shepherd, David
Evans, and the anonymous reviewers for their helpful
feedback. We also thank Casen Hunger and Akanksha
Jain for their help in using machine learning techniques
and microarchitectural simulators. This work was funded
in part by NSF Grants DRL-1441009 and CNS-1314709
and a gift from Qualcomm.
References
[1] ACIIC¸ MEZ, O., KOC¸ , C. K., AND SEIFERT, J.-P. On the power
of simple branch prediction analysis. In Symposium on Informa-
tion, Computer and Communications Security (2007), pp. 312–
320.
[2] ACIICMEZ, O., AND SEIFERT, J.-P. Cheap Hardware Paral-
lelism Implies Cheap Security. In Workshop on Fault Diagnosis
and Tolerance in Cryptography (2007), pp. 80–91.
[3] BAO, F., DENG, R. H., HAN, Y., A.JENG, NARASIMHALU,
A. D., AND NGAIR, T. Breaking public key cryptosystems on
tamper resistant devices in the presence of transient faults.
In
Workshop on Security Protocols (1998), pp. 115–124.
[4] BLUNDELL, C., LEWIS, E. C., AND MARTIN, M. Unrestricted
transactional memory: Supporting I/O and system calls within
transactions. Tech. rep., University of Pennsylvania, 2006.
[5] BRUMLEY, D., AND BONEH, D. Remote timing attacks are prac-
tical. In USENIX Security Symposium (2005).
[6] CARLSTROM, B. D., MCDONALD, A., CHAFI, H., CHUNG, J.,
MINH, C. C., KOZYRAKIS, C., AND OLUKOTUN, K. The Ato-
mos transactional programming language. In Conference on Pro-
gramming Language Design and Implementation (2006), pp. 1–
13.
[7] CHECKOWAY, S., AND SHACHAM, H. Iago Attacks: Why the
System Call API is a Bad Untrusted RPC Interface. In Architec-
444  24th USENIX Security Symposium 
USENIX Association
14
tural Support for Programming Languages and Operating Sys-
tems (2013), pp. 253–264.
[8] CRANE, S., HOMESCU, A., BRUNTHALER, S., LARSEN, P.,
AND FRANZ, M. Thwarting cache side-channel attacks through
dynamic software diversity. In Network and Distributed System
Security Symposium (2015).
[9] FLETCHER, C. W., DIJK, M. V., AND DEVADAS, S. A Secure
Processor Architecture for Encrypted Computation on Untrusted
Programs.
In ACM Workshop on Scalable Trusted Computing
(2012), pp. 3–8.
[10] FLETCHER, C. W., LING, R., XIANGYAO, Y., VAN DIJK, M.,
KHAN, O., AND DEVADAS, S. Suppressing the oblivious RAM
timing channel while making information leakage and program
efﬁciency trade-offs. In International Symposium on High Per-
formance Computer Architecture (2014), pp. 213–224.
[11] GANDOLFI, K., MOURTEL, C., AND OLIVIER, F. Electromag-
netic analysis: Concrete results. In Cryptographic Hardware and
Embedded Systems (2001), pp. 251–261.
[12] ISHII, Y., INABA, M., AND HIRAKI, K. Access map pattern
matching for high performance data cache prefetch. Journal of
Instruction-Level Parallelism (2011), 499–500.
[13] JANA, S., AND SHMATIKOV, V. Memento: Learning secrets
In IEEE Symposium on Security and
from process footprints.
Privacy (2012), pp. 143–157.
[14] KIM, T., PEINADO, M., AND MAINAR-RUIZ, G. STEALTH-
MEM: system-level protection against cache-based side channel
attacks in the cloud. In USENIX Conference on Security Sympo-
sium (2012), pp. 11–11.
[15] KOCHER, P. C. Timing attacks on implementations of Difﬁe-
Hellman, RSA, DSS, and other systems. In Advances in Cryptol-
ogy (1996), pp. 104–113.
[16] KOCHER, P. C., JAFFE, J., AND JUN, B. Differential Power
Analysis. In Advances in Cryptology. Springer Berlin Heidelberg,
1999, pp. 388–397.
[17] KONG, J., ACIICMEZ, O., SEIFERT, J.-P., AND ZHOU, H.
Hardware-software integrated approaches to defend against soft-
ware cache-based side channel attacks.
In High Performance
Computer Architecture (2009).
[18] KUHN, M. G. Cipher Instruction Search Attack on the Bus-
Encryption Security Microcontroller DS5002FP. IEEE Transac-
tions on Computers 47, 10 (1998), 1153–1157.
[19] LAMPSON, B. W. A note on the conﬁnement problem. Commu-
nications of the ACM (1973), 613–615.
[20] LIU, C., HARRIS, A., MAAS, M., HICKS, M., TIWARI, M.,
AND SHI, E. GhostRider: A Hardware-Software System for
Memory Trace Oblivious Computation.
In Architectural Sup-
port for Programming Languages and Operating Systems (2015),
pp. 87–101.
[21] LIU, C., HICKS, M., AND SHI, E. Memory Trace Oblivious Pro-
gram Execution. In Computer Security Foundations Symposium
(2013), pp. 51–65.
[22] MAAS, M., LOVE, E., STEFANOV, E., TIWARI, M., SHI, E.,
ASANOVIC, K., KUBIATOWICZ, J., AND SONG, D. PHAN-
TOM: Practical Oblivious Computation in a Secure Processor. In
Conference on Computer and Communications Security (2013),
pp. 311–324.
[23] MARTIN, R., DEMME, J., AND SETHUMADHAVAN, S. Time-
rethinking timekeeping and performance monitoring
In International
Warp:
mechanisms to mitigate side-channel attacks.
Symposium on Computer Architecture (2012), pp. 118–129.
[24] MCKEEN, F., ALEXANDROVICH, I., BERENZON, A., ROZAS,
C. V., SHAFI, H., SHANBHOGUE, V., AND SAVAGAONKAR,
U. R. Innovative instructions and software models for isolated
execution. In International Workshop on Hardware and Archi-
tectural Support for Security and Privacy (2013).
[25] MOLNAR, D., PIOTROWSKI, M., SCHULTZ, D., AND WAG-
NER, D. The program counter security model: Automatic de-
tection and removal of control-ﬂow side channel attacks. In In-
formation Security and Cryptology (2006), pp. 156–168.
[26] OSVIK, D. A., SHAMIR, A., AND TROMER, E. Cache attacks
In RSA conference on
and countermeasures: the case of AES.
Topics in Cryptology (2006), pp. 1–20.
[27] PERCIVAL, C. Cache missing for fun and proﬁt.
(2005).
In BSDCan
[28] PORTER, D. E., HOFMANN, O. S., ROSSBACH, C. J., BENN,
A., AND WITCHEL, E. Operating system transactions. In Sym-
posium on Operating Systems Principles (2009), pp. 161–176.
[29] RISTENPART, T., TROMER, E., SHACHAM, H., AND SAVAGE,
S. Hey, You, Get Off of My Cloud: Exploring Information Leak-
age in Third-party Compute Clouds. In Computer and Commu-
nications Security (2009), pp. 199–212.
[30] SABELFELD, A., AND MYERS, A. C.
Language-Based
Information-Flow Security. IEEE JSAC (2003), 5–19.
[31] SCHINDLER, W. A timing attack against RSA with the chinese
remainder theorem. In Cryptographic Hardware and Embedded
Systems (2000), pp. 109–124.
[32] SHAMIR, A., AND TROMER, E. Acoustic cryptanalysis. Online
at http://www.wisdom.weizmann.ac.il/∼tromer.
[33] SHI, E., CHAN, T.-H. H., STEFANOV, E., AND LI, M. Obliv-
ious RAM with O((log n)3) Worst-case Cost.
In International
Conference on The Theory and Application of Cryptology and
Information Security (2011), pp. 197–214.
[34] STEFANOV, E., VAN DIJK, M., SHI, E., FLETCHER, C., REN,
L., YU, X., AND DEVADAS, S. Path ORAM: An Extremely
Simple Oblivious RAM Protocol.
In Conference on Computer
and Communications Security (2013), pp. 299–310.
[35] SUH, G. E., FLETCHER, C., CLARKE, D., GASSEND, B., VAN
DIJK, M., AND DEVADAS, S. Author Retrospective AEGIS: Ar-
chitecture for Tamper-evident and Tamper-resistant Processing.
In International Conference on Supercomputing (2014), pp. 68–
70.
[36] THEKKATH, C., LIE, D., MITCHELL, M., LINCOLN, P.,
BONEH, D., MITCHELL, J., AND HOROWITZ, M. Architec-
tural Support for Copy and Tamper Resistant Software. In Inter-
national Conference on Architectural Support for Programming
Languages and Operating Systems (2000), pp. 168–177.
[37] TIWARI, M., HUNGER, C., AND KAZDAGLI, M. Understand-
ing Microarchitectural Channels and Using Them for Defense. In
International Symposium on High Performance Computer Archi-
tecture (2015), pp. 639–650.
[38] VATTIKONDA, B. C., DAS, S., AND SHACHAM, H. Eliminat-
ing Fine Grained Timers in Xen. In Cloud Computing Security
Workshop (2011), pp. 41–46.
[39] WANG, Z., AND LEE, R. B. New Cache Designs for Thwarting
In International
Software Cache-based Side Channel Attacks.
Symposium on Computer Architecture (2007), pp. 494–505.
[40] WANG, Z., AND LEE, R. B. A novel cache architecture with
enhanced performance and security. In IEEE/ACM International
Symposium on Microarchitecture (2008), pp. 83–93.
[41] YEN, S.-M., AND JOYE, M. Checking before output may not be
enough against fault-based cryptanalysis. IEEE Transactions on
Computers (2000), 967–970.
USENIX Association  
24th USENIX Security Symposium  445
15
[42] ZHANG, D., ASKAROV, A., AND MYERS, A. C. Predictive mit-
igation of timing channels in interactive systems. In Conference
on Computer and Communications Security (2011), pp. 563–574.
[43] ZHANG, Y., JUELS, A., OPREA, A., AND REITER, M. K.
HomeAlone: Co-residency Detection in the Cloud via Side-
Channel Analysis. In IEEE Symposium on Security and Privacy
(2011), pp. 313–328.
[44] ZHANG, Y., JUELS, A., REITER, M. K., AND RISTENPART, T.
Cross-VM side channels and their use to extract private keys. In
Conference on Computer and Communications Security (2012),
pp. 305–316.
[45] ZHANG, Y., AND REITER, M. K. Duppel: Retroﬁtting Com-
modity Operating Systems to Mitigate Cache Side Channels in
the Cloud. In Conference on Computer and Communications Se-
curity (2013), pp. 827–838.
[46] ZHUANG, X., ZHANG, T., AND PANDE, S. HIDE: An Infras-
tructure for Efﬁciently Protecting Information Leakage on the
Address Bus.
In Architectural Support for Programming Lan-
guages and Operating Systems (2004), pp. 72–84.
446  24th USENIX Security Symposium 
USENIX Association
16