title:Parallax: Implicit Code Integrity Verification Using Return-Oriented
Programming
author:Dennis Andriesse and
Herbert Bos and
Asia Slowinska
2015 45th Annual IEEE/IFIP International Conference on Dependable Systems and Networks
2015 45th Annual IEEE/IFIP International Conference on Dependable Systems and Networks
Parallax: Implicit Code Integrity Veriﬁcation
Using Return-Oriented Programming
Dennis Andriesse, Herbert Bos and Asia Slowinska
System and Network Security Group
VU University Amsterdam
{da.andriesse,herbertb,asia}@few.vu.nl
Abstract—Parallax is a novel self-contained code integrity
veriﬁcation approach, that protects instructions by overlapping
Return-Oriented Programming (ROP) gadgets with them. Our
technique implicitly veriﬁes integrity by translating selected code
(veriﬁcation code) into ROP code which uses gadgets scattered
over the binary. Tampering with the protected instructions
destroys the gadgets they contain, so that the veriﬁcation code
fails, thereby preventing the adversary from using the modiﬁed
binary. Unlike prior solutions, Parallax does not rely on code
checksumming, so it
is not vulnerable to instruction cache
modiﬁcation attacks which affect checksumming techniques. Fur-
ther, unlike previous algorithms which withstand such attacks,
Parallax does not compute hashes of the execution state, and can
thus protect code with non-deterministic state. Parallax limits
performance overhead to the veriﬁcation code, while the protected
code executes at its normal speed. This allows us to protect
performance-critical code, and conﬁne the slowdown to other
code regions. Our experiments show that Parallax can protect up
to 90% of code bytes, including most control ﬂow instructions,
with a performance overhead of under 4%.
I.
INTRODUCTION
Code integrity veriﬁcation is an anti-tampering primitive
which aims to ensure that code executes as intended on a
hostile host [36], without being modiﬁed by an adversary. Self-
veriﬁcation is a subclass of code veriﬁcation, which provides
integrity checking without requiring specialized hardware, such
as trusted execution modules, and without the use of remote
veriﬁcation servers.
Code protection primitives like integrity veriﬁcation are
widely used in practice to delay reverse engineering attacks,
and to deter non-persistent adversaries. Code protection is
commonly used by malware to prolong its lifespan and
monetization period [7, 29, 30], but it is also used to protect
benign programs against software cracking [6]. Furthermore,
code integrity veriﬁcation in particular can also defend against
certain parasitic malware techniques, which inject inline hooks
or code into processes [37] or executables [34].
Preventing malicious code injection is not only crucial
to the security of end-user computer systems, but also as a
defense against high-proﬁle attacks, the importance of which
is witnessed by recent targeted threats like Stuxnet [17] and
Gauss [21]. Recently, the American Institute of Aeronautics and
Astronautics launched a code protection initiative to prevent
attacks against aviation control systems [3]. The United States
Department of Defense has also expressed interest in code
protection for use in hardened computing centers, as well as
real-time software used in weapon systems which may fall into
enemy hands [35].
Most existing code self-veriﬁcation algorithms work by
computing checksums over protected code regions, and ver-
ifying that these checksums are as expected. Using several
cross-verifying checksummed code regions, such algorithms can
provide fairly strong tamperprooﬁng. Unfortunately, Wurster et
al. have shown that all such algorithms are inherently vulnerable
to automated attacks which exploit the distinct handling of code
and data in modern processors [36]. Wurster et al. implement
a kernel patch which allows attackers to freely tamper with
the code in the processor’s instruction cache, while leaving the
data cache entirely untouched. This completely circumvents
checksumming algorithms, as these treat code as data, thus
fetching it from the data cache instead of the instruction cache.
The foremost algorithm designed to defeat this attack is
oblivious hashing (OH) [13, 20]. Instead of directly checking
code integrity, oblivious hashing intersperses hashing instruc-
tions with the protected code, which build runtime hashes of
the execution state. The integrity is then veriﬁed by checking
that the computed hashes correspond to known correct values.
However, this technique can only verify deterministic execution
state, of which the expected hash is known at compile time.
This means that OH cannot protect code which involves non-
deterministic inputs, such as environment parameters or user
input. Additionally, the hashes used to verify the state are found
using dynamic testing, limiting the protection to code paths
exercised in these tests.
We propose a novel code self-veriﬁcation approach, which
is based on Return-Oriented Programming (ROP). ROP was
originally proposed as an exploitation technique which allows ar-
bitrary code execution in the presence of W⊕X [33]. ROP uses
short return-terminated instruction sequences, called gadgets,
which are chained together by arranging their addresses on the
stack such that each terminating return causes a control transfer
to the next gadget. If a sufﬁcient set of gadgets is available,
ROP is a Turing-complete programming technique which can
implement arbitrary computations on top of a host program.
A Turing-complete gadget set exists in most programs [32].
We refer to an arrangement of gadget addresses into a ROP
program as a ROP chain.
Our code veriﬁcation approach protects code by overlapping
ROP gadgets with it. Then, selected instructions from the
protected program are translated into ROP chains which use
the overlapping gadgets. Since tampering with the gadgets
causes the translated instructions to malfunction, this implicitly
veriﬁes the integrity of the protected code. Thus, we refer to
these translated instructions as veriﬁcation code. Our notion of
veriﬁcation code can be seen as a generalization of code hiding
techniques based on function reuse [23]. We show in Section VI
that the veriﬁcation code is itself also tamper resistant.
978-1-4799-8629-3/15 $31.00 © 2015 IEEE
978-1-4799-8629-3/15 $31.00 © 2015 IEEE
DOI 10.1109/DSN.2015.12
DOI 10.1109/DSN.2015.12
125
125
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:51:18 UTC from IEEE Xplore.  Restrictions apply. 
Our technique has several advantages over prior work.
1) The code veriﬁcation does not use checksumming, and is
thus immune to the attack of Wurster et al.
2) In contrast to oblivious hashing, no prior knowledge of
the runtime state is required. Therefore, our technique
can protect non-deterministic code regions. Furthermore,
we apply this protection statically, so it is oblivious to
dynamic code coverage limitations.
3) The overlapping gadgets do not slow down code they
protect. Instead, performance overhead is conﬁned to
the veriﬁcation code using the gadgets. This makes it
possible to tamperproof performance-critical code while
conﬁning the performance degradation elsewhere. In
contrast, oblivious hashing slows down protected code
by interspersing hashing instructions with it.
4) We show in Section VII that our technique can protect up
to 90% of code bytes at a performance overhead of less
than 4%. As argued in Section VIII, non-deterministic
control ﬂow decisions are among the most likely attack
targets. Thus, our protectability rate exceeds that of
oblivious hashing [13], and we protect crucial instructions
which OH cannot.
5) In contrast to prior work, including oblivious hashing,
our approach lends itself to binary-level implementation,
and does not inherently require source. This enables the
protection of legacy binaries.
Since the veriﬁcation code uses ROP, it requires a set of
gadgets overlapping with the instructions we protect. We both
use gadgets already present in the host binary, and statically
rewrite the binary to craft new ones. Since a Turing-complete
gadget set is already present in most programs [32], the
additional tamperprooﬁng gadgets generally do not increase
the vulnerability of protected programs to ROP attacks.
As a proof of concept, we built a prototype implementation
of our technique for the x86 platform, called Parallax. It uses
binary rewriting to create protective gadgets, and builds on ROP
compiler functionality to generate veriﬁcation code. Our proof
of concept uses source to simplify binary rewriting, and also
offers the option of selecting veriﬁcation code at the source
level. However, this is not a requirement of our technique,
which can be implemented entirely at the binary level.
The rest of this paper is organized as follows. Section II
discusses background and threat assumptions, while Section III
provides an overview of Parallax. In Section IV, we describe
the rules we use to craft protective gadgets. Section V discusses
the implementation of veriﬁcation code, and Section VI dis-
cusses the attack resistance of Parallax. Evaluation results and
limitations of Parallax are discussed in Sections VII and VIII.
We discuss related work and summarize our conclusions in
Sections IX and X.
II. BACKGROUND
This section describes the workings of Return-Oriented
Programming, upon which we base our technique. Furthermore,
we describe the threat model which Parallax assumes.
A. Return-Oriented Programming
ROP was originally proposed in 2007 as an exploitation
technique designed to circumvent memory protection mech-
(cid:9)(cid:74)(cid:81)
(cid:9)(cid:74)(cid:21)
(cid:70)(cid:82)(cid:81)(cid:86)(cid:87)(cid:68)(cid:81)(cid:87)
(cid:9)(cid:74)(cid:20)
(cid:72)(cid:86)(cid:83)
(cid:68)(cid:71)(cid:71)(cid:3)(cid:72)(cid:86)(cid:76)(cid:15)(cid:72)(cid:68)(cid:91)
(cid:85)(cid:72)(cid:87)
(cid:83)(cid:82)(cid:83)(cid:3)(cid:72)(cid:68)(cid:91)
(cid:85)(cid:72)(cid:87)
Fig. 1: An example ROP chain. Gadget g1 loads a constant into eax, which
is then added to esi by g2.
anisms like W⊕X [33]. ROP makes use of short instruction
sequences found in a host program’s memory space, called
gadgets, each of which ends in a return instruction. Each gadget
typically performs a basic operation, such as addition or logical
comparison. Gadgets can be part of the host program’s normal
instructions, but can also be unaligned instruction sequences
embedded in the normal instruction stream. A ROP program
consists of a chain of gadget addresses on the stack, such that
the return instruction terminating each gadget transfers control
to the next gadget in the chain.
Figure 1 illustrates an example ROP chain. Initially, the
stack pointer (esp) points to the address of the ﬁrst gadget g1
in the chain. Upon execution of a return instruction, control is
transferred to this gadget. It performs a pop instruction, which
loads a constant arranged on the stack into the eax register,
and increments esp to point to gadget g2. Then, the ret
instruction of gadget g1 transfers control to gadget g2, which
adds the constant in eax to the esi register. Gadget g2 then
returns to gadget g3, and so on, until all gadgets g1, . . . , gn
have been executed.
B. Threat Model
Parallax assumes the hostile host threat model [36], which is
the standard model for tamperprooﬁng techniques. It assumes
that the tamperproofed application is executed on a system
controlled by a hostile user, which has full control over
the runtime environment, and may arbitrarily modify the
tamperproofed executable itself. This includes alterations made
during runtime debugging, as well as static code patching.
The intent of the hostile user is typically to circumvent
access controls in the protected application, such as anti-
debugging checks or license veriﬁcations. The challenge for
our tamperprooﬁng technique is thus to maximize the effort
required by the hostile user to successfully tamper with the
protected application, without assuming any trusted components
in the runtime environment.
III. OVERVIEW
In this section, we give an overview of how Parallax
implements its protection mechanism. Our technique protects
against both static and dynamic code modiﬁcation. Thus, we
protect against attacks ranging from the circumvention of anti-
debugging checks, to large-scale software cracking. Figure 2
illustrates how Parallax protects a binary.
To protect a binary, we select one or more code fragments
at the source or binary level for use as veriﬁcation code (step 1(cid:3)
in Figure 2). In Section VII-B, we describe our strategy to
do this automatically. Additionally, we determine a list of
126126
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 08:51:18 UTC from IEEE Xplore.  Restrictions apply. 
(cid:18)(cid:6)
(cid:18)(cid:19)
(cid:18)(cid:20)
(cid:18)(cid:21)
(cid:18)(cid:22)
(cid:18)(cid:6)
(cid:18)(cid:19)
(cid:18)(cid:20)
(cid:18)(cid:21)
(cid:18)(cid:22)
(cid:5)(cid:6)
(cid:8)(cid:9)(cid:10)(cid:11)(cid:12)(cid:13)(cid:14)(cid:15)(cid:11)(cid:1)(cid:2)(cid:3)(cid:4)(cid:5)(cid:6)(cid:7)
(cid:16)(cid:12)(cid:17)
(cid:1)(cid:2)(cid:3)(cid:4)(cid:5)(cid:6)(cid:7)
(cid:8)(cid:9)(cid:10)(cid:11)(cid:12)(cid:13)(cid:14)(cid:15)(cid:11)(cid:1)(cid:2)(cid:3)(cid:4)(cid:5)(cid:6)(cid:7)
(cid:16)(cid:12)(cid:17)
(cid:1)(cid:2)(cid:3)(cid:4)(cid:5)(cid:6)(cid:7)
(cid:8)(cid:9)(cid:10)(cid:11)(cid:12)(cid:13)(cid:14)(cid:15)(cid:11)(cid:1)(cid:2)(cid:3)(cid:4)(cid:5)(cid:6)(cid:7)
(cid:16)(cid:12)(cid:17)
(cid:1)(cid:2)(cid:3)(cid:4)(cid:5)(cid:6)(cid:7)
(cid:6)
(cid:1)(cid:2)(cid:3)(cid:2)(cid:4)(cid:5)(cid:6)(cid:5)(cid:7)(cid:2)(cid:6)(cid:8)(cid:2)(cid:9)(cid:10)(cid:11)(cid:10)(cid:4)(cid:12)(cid:5)(cid:10)(cid:13)(cid:14)(cid:6)(cid:11)(cid:15)(cid:14)(cid:4)(cid:5)(cid:10)(cid:13)(cid:14)(cid:6)(cid:16)(cid:11)(cid:17)(cid:18)(cid:19)(cid:6)
(cid:12)(cid:14)(cid:20)(cid:6)(cid:5)(cid:7)(cid:2)(cid:6)(cid:4)(cid:13)(cid:20)(cid:2)(cid:6)(cid:9)(cid:2)(cid:21)(cid:10)(cid:13)(cid:14)(cid:22)(cid:6)(cid:23)(cid:7)(cid:10)(cid:4)(cid:7)(cid:6)(cid:9)(cid:2)(cid:24)(cid:15)(cid:10)(cid:9)(cid:2)(cid:6)
(cid:25)(cid:9)(cid:13)(cid:5)(cid:2)(cid:4)(cid:5)(cid:10)(cid:13)(cid:14)(cid:6)(cid:16)(cid:20)(cid:12)(cid:9)(cid:26)(cid:6)(cid:21)(cid:9)(cid:12)(cid:27)(cid:6)(cid:9)(cid:2)(cid:4)(cid:5)(cid:12)(cid:14)(cid:21)(cid:3)(cid:2)(cid:22)(cid:18)(cid:28)
(cid:19)
(cid:29)(cid:9)(cid:12)(cid:14)(cid:22)(cid:3)(cid:12)(cid:5)(cid:2)(cid:6) (cid:5)(cid:7)(cid:2)(cid:6) (cid:8)(cid:2)(cid:9)(cid:10)(cid:11)(cid:10)(cid:4)(cid:12)(cid:5)(cid:10)(cid:13)(cid:14)(cid:6) (cid:11)(cid:15)(cid:14)(cid:4)(cid:5)(cid:10)(cid:13)(cid:14)(cid:6)
(cid:10)(cid:14)(cid:5)(cid:13)(cid:6)(cid:12)(cid:6)(cid:30)(cid:31)(cid:32)(cid:6)(cid:4)(cid:7)(cid:12)(cid:10)(cid:14)(cid:6)(cid:16)(cid:5)(cid:7)(cid:2)(cid:6)(cid:12)(cid:20)(cid:20)(cid:9)(cid:2)(cid:22)(cid:22)(cid:2)(cid:22)(cid:6)(cid:13)(cid:11)(cid:6)
(cid:5)(cid:7)(cid:2)(cid:6)(cid:21)(cid:12)(cid:20)(cid:21)(cid:2)(cid:5)(cid:22)(cid:6)(cid:12)(cid:9)(cid:2)(cid:6)(cid:14)(cid:13)(cid:5)(cid:6)(cid:27)(cid:2)(cid:5)(cid:6)(cid:26)(cid:14)(cid:13)(cid:23)(cid:14)(cid:18)(cid:28)
(cid:6)(cid:20)
(cid:33)(cid:10)(cid:14)(cid:20)(cid:6)(cid:12)(cid:3)(cid:9)(cid:2)(cid:12)(cid:20)(cid:27)(cid:6)(cid:2)(cid:34)(cid:10)(cid:22)(cid:5)(cid:10)(cid:14)(cid:21)(cid:6)(cid:21)(cid:12)(cid:20)(cid:21)(cid:2)(cid:5)(cid:22)(cid:19)(cid:6)(cid:12)(cid:14)(cid:20)(cid:6)
(cid:10)(cid:14)(cid:22)(cid:2)(cid:9)(cid:5)(cid:6)(cid:14)(cid:2)(cid:23)(cid:6)(cid:13)(cid:14)(cid:2)(cid:22)(cid:6)(cid:5)(cid:7)(cid:12)(cid:5)(cid:6)(cid:13)(cid:8)(cid:2)(cid:9)(cid:3)(cid:12)(cid:25)(cid:6)(cid:23)(cid:10)(cid:5)(cid:7)(cid:6)
(cid:5)(cid:7)(cid:2)(cid:6)(cid:9)(cid:2)(cid:21)(cid:10)(cid:13)(cid:14)(cid:22)(cid:6)(cid:5)(cid:13)(cid:6)(cid:25)(cid:9)(cid:13)(cid:5)(cid:2)(cid:4)(cid:5)(cid:6)(cid:16)(cid:21)(cid:17)(cid:6)(cid:35)(cid:6)(cid:21)(cid:36)(cid:18)(cid:28)
(cid:6)(cid:21)
(cid:30)(cid:2)(cid:4)(cid:13)(cid:37)(cid:25)(cid:10)(cid:3)(cid:2)(cid:6)(cid:5)(cid:7)(cid:2)(cid:6)(cid:30)(cid:31)(cid:32)(cid:6)(cid:4)(cid:7)(cid:12)(cid:10)(cid:14)(cid:6)(cid:5)(cid:13)(cid:6)(cid:15)(cid:22)(cid:2)(cid:6)(cid:5)(cid:7)(cid:2)(cid:6)
(cid:12)(cid:4)(cid:5)(cid:15)(cid:12)(cid:3)(cid:6)(cid:21)(cid:12)(cid:20)(cid:21)(cid:2)(cid:5)(cid:22)(cid:28)(cid:6)(cid:32)(cid:9)(cid:10)(cid:13)(cid:9)(cid:10)(cid:5)(cid:10)(cid:38)(cid:2)(cid:6)(cid:5)(cid:7)(cid:2)(cid:6)(cid:21)(cid:12)(cid:20)(cid:21)(cid:2)(cid:5)(cid:22)(cid:6)
(cid:13)(cid:8)(cid:2)(cid:9)(cid:3)(cid:12)(cid:25)(cid:25)(cid:10)(cid:14)(cid:21)(cid:6)(cid:25)(cid:9)(cid:13)(cid:5)(cid:2)(cid:4)(cid:5)(cid:2)(cid:20)(cid:6)(cid:9)(cid:2)(cid:21)(cid:10)(cid:13)(cid:14)(cid:22)(cid:28)
Fig. 2: A high-level overview of Parallax.
instructions to protect. If source is available, these are selected
at the statement or function level, and then mapped to the
binary level after compilation using debugging symbols. If only
a binary is available, protection is assigned at the instruction
or function level.
Parallax begins by translating the selected veriﬁcation code
into one or more ROP chains (sequences of ROP gadgets) 2(cid:3).