FOSS4G.NA 2016
Raleigh, NC
4th May 2016
Manage LiDAR
data with
PostgreSQL
is it possible?
www.2ndquadrant.com
2ndQuadrant Italia Giuseppe Broccolo – PI:EMAIL
FOSS4G.NA 2016
Raleigh, NC
4th May 2016
IIss tthhee rreellaattiioonnaall aapppprrooaacchh vvaalliidd ffoorr LLiiDDAARR??
• The relational approach to the data:
– data organized in tuples
– tuples are part of tables
– tables are related to each other through constraints (PK, FK, etc.)
• If the number of tuples grows:
– indexes allow to reduce the complexity of a search to ~O(logN)...
– ...but they must be contained in RAM!
– OTHERWISE: the relational approach start to fail...
2ndQuadrant Italia Giuseppe Broccolo – PI:EMAIL
FOSS4G.NA 2016
Raleigh, NC
4th May 2016
PPoossttggrreeSSQQLL && LLiiDDAARR ddaattaa
• PostgreSQL is a relational DBMS with an extension for LiDAR data:
pg_pointcloud
https://github.com/pgpointcloud/pointcloud
• Part of the OpenGeo suite, completely compatible with PostGIS
– two new datatype: pcpoint, pcpatch (compressed set of points)
• N points (with all attributes from the survey) → 1 patch → 1 record
32b 32b 32b 16b
– compatible with PDAL drivers to import data directly from .las
2ndQuadrant Italia Giuseppe Broccolo – PI:EMAIL
FOSS4G.NA 2016
Raleigh, NC
4th May 2016
RReellaattiioonnaall aapppprrooaacchh ttoo LLiiDDAARR ddaattaa wwiitthh PPGG
http://www.slideshare.net/GiuseppeBroccolo/gbroccolo-foss4-geugeodbindex
• GiST indexing in PostGIS
• GiST performances:
– storage: 1TB RAID1, RAM 16GB, 8 CPU @3.3GHz,
PostgreSQL9.3
– index size ~O(table size)
– Index was used:
• up to ~300M points in bbox inclusion searches
• up to ~10M points in kNN searches
LiDAR size: ~O(109÷1011) → few % can be properly indexed!
2ndQuadrant Italia Giuseppe Broccolo – PI:EMAIL
FOSS4G.NA 2016
Raleigh, NC
4th May 2016
AA nneeww iinnddeexx iinn PPGG:: BBlloocckk RRaannggee IINNddeexxiinngg
index node → row
less specific than GiST!
8 k B
8kB
8kB
8kB
Really small!
index node → block
8kB 8kB 8kB
8kB 8kB 8kB
8kB 8kB 8kB
8kB 8kB 8kB
(S. Riggs, A. Herrera)
data must be physically sorted on disk!
2ndQuadrant Italia Giuseppe Broccolo – PI:EMAIL
FOSS4G.NA 2016
Raleigh, NC
4th May 2016
BBRRIINN ssuuppppoorrtt ffoorr PPoossttGGIISS ddaattaattyyppeess
3rd May, PGDay @ FOSS4G.NA
NO kNN SUPPORT!!
8kB
8kB
8kB
8kB
G. Broccolo, J. Rouhaud, R. Dunklau
2ndQuadrant Italia Giuseppe Broccolo – PI:EMAIL
FOSS4G.NA 2016
Raleigh, NC
4th May 2016
TThhee LLiiDDAARR ddaattaasseett:: tthhee aahhnn22 pprroojjeecctt
(thanks to Tom Van Tilburg)
• 3D point cloud, coverage: almost the whole Netherlands
– EPSG: 28992, ~8 points/m2
• 1.6TB, ~250G points in ~560M patches (compression: ~10x)
– PDAL driver – filter.chipper
• available RAM: 16GB
• the point structure:
X Y Z scan LAS time RGB chipper
32b 32b 32b 40b 16b 64b 48b 32b
the “indexed” part (can be converted to PostGIS datatype)
2ndQuadrant Italia Giuseppe Broccolo – PI:EMAIL
FOSS4G.NA 2016
Raleigh, NC
4th May 2016
TTyyppiiccaall sseeaarrcchheess oonn aahhnn22 -- xx33dd__vviieewweerr
• Intersection with a polygon (PostGIS)
– the part that lasts longer – need indexes here!
• Patch “explosion” + NN sorting (pg_PointCloud+PostGIS)
• constrained Delaunay Triangulation (SFCGAL)
2ndQuadrant Italia Giuseppe Broccolo – PI:EMAIL
FOSS4G.NA 2016
Raleigh, NC
4th May 2016
AAllll jjuusstt iinn tthhee DDBB......
WITH patches AS (
SELECT patches FROM ahn2
WHERE patches && ST_GeomFromText(‘POLYGON(...)’)
), points AS (
SELECT ST_Explode(patches) AS points
FROM patches
), sorted_points AS (
SELECT points,
ST_DumpPoints(ST_GeomFromText(‘POLYGON(...)’))).geom AS poly_pt
FROM points ORDER BY points  poly_pt LIMIT 1;
), sel AS (
SELECT points FROM sorted_points
WHERE points && ST_GeomFromText(‘POLYGON(...)’)
)
SELECT ST_Dump(ST_Triangulate2DZ(ST_Collect(points))) FROM sel;
2ndQuadrant Italia Giuseppe Broccolo – PI:EMAIL
FOSS4G.NA 2016
Raleigh, NC
4th May 2016
......aanndd wwiitthh jjuusstt oonnee qquueerryy!!
WITH patches AS (
SELECT patches FROM ahn2
WHERE patches && ST_GeomFromText(‘POLYGON(...)’)
), points AS (
SELECT ST_Explode(patches) AS points
FROM patches
), sorted_points AS (
SELECT points,
ST_DumpPoints(ST_GeomFromText(‘POLYGON(...)’))).geom AS poly_pt
FROM points ORDER BY points  poly_pt LIMIT 1;
), sel AS (
SELECT points FROM sorted_points
WHERE points && ST_GeomFromText(‘POLYGON(...)’)
)
SELECT ST_Dump(ST_Triangulate2DZ(ST_Collect(points))) FROM sel;
2ndQuadrant Italia Giuseppe Broccolo – PI:EMAIL
FOSS4G.NA 2016
Raleigh, NC
4th May 2016
ppaattcchheess &&&& ppoollyyggoonnss -- GGiiSSTT ppeerrffoorrmmaannccee
index building
searches based on GiST
index size
GiST 2 d
polygon
timing
size
GiST 26GB
~O(m) ~40ms
~O(km) ~50s
index not contained in
~O(10km) hours
RAM anymore
(~5G points → ~3%)
2ndQuadrant Italia Giuseppe Broccolo – PI:EMAIL
FOSS4G.NA 2016
Raleigh, NC
4th May 2016
ppaattcchheess &&&& ppoollyyggoonnss -- BBRRIINN ppeerrffoorrmmaannccee
index building index size
BRIN 4 h BRIN 15MB
searches based on BRIN
polygon
timing
size
~O(m) ~150s
2ndQuadrant Italia Giuseppe Broccolo – PI:EMAIL
FOSS4G.NA 2016
Raleigh, NC
4th May 2016
ppaattcchheess &&&& ppoollyyggoonnss -- BBRRIINN ppeerrffoorrmmaannccee
index building index size
BRIN 4 h BRIN 15MB
How data was inserted...
chipper searches based on BRIN
LAS
LAS
LAS chipper polygon
LAS timing
LAS size
LAS
chipper
~O(m) ~150s
PDAL driver
ahn2
(6 parallel processes)
2ndQuadrant Italia Giuseppe Broccolo – PI:EMAIL
FOSS4G.NA 2016
Raleigh, NC
4th May 2016
ppaattcchheess &&&& ppoollyyggoonnss -- BBRRIINN ppeerrffoorrmmaannccee
CREATE INDEX patch_geohash ON ahn2_subset
USING btree (ST_GeoHash(ST_Transform(Geometry(patch), 4326), 20));
CLUSTER ahn2_subset USING patch_geohash;
(http://geohash.org/)
~150s → ~800ms
[radius ~O(m)]
• x20 slower than GiST searches
• x200 faster than Seq searches
– (x1000 faster in ~O(100m) searches)
2ndQuadrant Italia Giuseppe Broccolo – PI:EMAIL
FOSS4G.NA 2016
Raleigh, NC
4th May 2016
iiss tthhee ddrroopp iinn ppeerrffoorrmmaannccee aacccceeppttaabbllee??
BRIN searches = x20 GiST searches
patch explosion
+
= x10÷x100 GiST searches
NN sorting
constrained
= x10÷x100 GiST searches
triangulation
2ndQuadrant Italia Giuseppe Broccolo – PI:EMAIL
FOSS4G.NA 2016
Raleigh, NC
4th May 2016
iiss tthhee ddrroopp iinn ppeerrffoorrmmaannccee aacccceeppttaabbllee??
BRIN searches = x20 GiST searches
patch explosion
+
= x10÷x100 GiST searches
NN sorting
constrained
= x10÷x100 GiST searches
triangulation
2ndQuadrant Italia Giuseppe Broccolo – PI:EMAIL
FOSS4G.NA 2016
Raleigh, NC
4th May 2016
CCoonncclluussiioonnss
Can be the relational approach to LiDAR data valid with
PostgreSQL?
– Yes!
• GiST indexes are fast, but can manage just a real small portion
of the dataset
• BRINs are quite slower, but generally do not represent a real
bottleneck
– Make sure that data has the same sequentiality of .las
2ndQuadrant Italia Giuseppe Broccolo – PI:EMAIL
FOSS4G.NA 2016
Raleigh, NC
4th May 2016
~~$$ wwhhooaammii
GGiiuusseeppppee BBrrooccccoolloo,, PPhhDD
PPoossttggrreeSSQQLL && PPoossttGGIISS ccoonnssuullttaanntt
@giubro gbroccolo7 gbroccolo gemini__81
PI:EMAIL
2ndQuadrant Italia Giuseppe Broccolo – PI:EMAIL
FOSS4G.NA 2016
Raleigh, NC
4th May 2016
Creative Commons license
This work is licensed under a Creative Commons
Attribution-ShareAlike 4.0 International License
http://creativecommons.org/licenses/by-nc-sa/2.5/it/
© 2016 2ndQuadrant Italia – http://www.2ndquadrant.it
2ndQuadrant Italia Giuseppe Broccolo – PI:EMAIL