### FOSS4G.NA 2016
**Raleigh, NC**
**May 4, 2016**

#### Managing LiDAR Data with PostgreSQL: Is It Possible?

**www.2ndquadrant.com**
**Giuseppe Broccolo – 2ndQuadrant Italia**
**Email: [PI:EMAIL]**

---

### Is the Relational Approach Valid for LiDAR Data?

- **Relational Data Organization:**
  - Data is organized into tuples.
  - Tuples are part of tables.
  - Tables are related to each other through constraints (e.g., Primary Key, Foreign Key).

- **Scalability Concerns:**
  - As the number of tuples increases, indexes can reduce search complexity to approximately O(logN).
  - However, these indexes must fit into RAM.
  - If they do not, the relational approach begins to fail.

---

### PostgreSQL and LiDAR Data

- **PostgreSQL** is a relational database management system (DBMS) that includes an extension for LiDAR data: **pg_pointcloud**.
  - **Repository:** [https://github.com/pgpointcloud/pointcloud](https://github.com/pgpointcloud/pointcloud)
  - **Compatibility:** Part of the OpenGeo suite, fully compatible with PostGIS.
  - **Data Types:**
    - `pcpoint`: Represents a single point.
    - `pcpatch`: Compressed set of points.
  - **Structure:**
    - N points (with all survey attributes) → 1 patch → 1 record.
  - **Attributes:**
    - 32b X, 32b Y, 32b Z, 16b scan, 40b LAS, 16b time, 64b RGB, 48b chipper, 32b index.
  - **Importing Data:**
    - Compatible with PDAL drivers for direct import from .las files.

---

### Relational Approach to LiDAR Data with PostgreSQL

- **GiST Indexing in PostGIS:**
  - **Performance:**
    - Storage: 1TB RAID1, 16GB RAM, 8 CPU @ 3.3GHz, PostgreSQL 9.3.
    - Index size is proportional to table size.
    - Index usage:
      - Up to ~300M points for bounding box inclusion searches.
      - Up to ~10M points for k-Nearest Neighbor (kNN) searches.
    - For large LiDAR datasets (~10^9 to 10^11 points), only a small percentage can be effectively indexed.

---

### New Index in PostgreSQL: Block Range Indexing

- **Block Range Indexing (BRIN):**
  - **Index Node Structure:**
    - Less specific than GiST.
    - Each node points to a block, which is much smaller (8kB).
  - **Requirements:**
    - Data must be physically sorted on disk.

---

### BRIN Support for PostGIS Data Types

- **Details:**
  - No k-Nearest Neighbor (kNN) support.
  - Presented at PGDay @ FOSS4G.NA on May 3, 2016.
  - Contributors: G. Broccolo, J. Rouhaud, R. Dunklau.

---

### The LiDAR Dataset: The AHN2 Project

- **Overview:**
  - 3D point cloud covering almost the entire Netherlands.
  - EPSG: 28992, ~8 points/m².
  - Size: 1.6TB, ~250G points in ~560M patches (compression: ~10x).
  - Available RAM: 16GB.
  - Point structure:
    - 32b X, 32b Y, 32b Z, 40b scan, 16b LAS, 64b time, 48b RGB, 32b chipper.
  - Indexed part can be converted to PostGIS data types.

---

### Typical Searches on AHN2-3D Viewer

- **Intersection with a Polygon (PostGIS):**
  - Requires indexing for efficient performance.
- **Patch Explosion and NN Sorting (pg_PointCloud + PostGIS):**
  - Converts patches to individual points and sorts them.
- **Constrained Delaunay Triangulation (SFCGAL):**
  - Generates triangulated surfaces.

---

### All in the Database...

```sql
WITH patches AS (
  SELECT patches FROM ahn2
  WHERE patches && ST_GeomFromText('POLYGON(...)')
),
points AS (
  SELECT ST_Explode(patches) AS points
  FROM patches
),
sorted_points AS (
  SELECT points,
         (ST_DumpPoints(ST_GeomFromText('POLYGON(...)'))).geom AS poly_pt
  FROM points
  ORDER BY points <-> poly_pt
  LIMIT 1
),
sel AS (
  SELECT points FROM sorted_points
  WHERE points && ST_GeomFromText('POLYGON(...)')
)
SELECT ST_Dump(ST_Triangulate2DZ(ST_Collect(points))) FROM sel;
```

---

### ...and with Just One Query!

```sql
WITH patches AS (
  SELECT patches FROM ahn2
  WHERE patches && ST_GeomFromText('POLYGON(...)')
),
points AS (
  SELECT ST_Explode(patches) AS points
  FROM patches
),
sorted_points AS (
  SELECT points,
         (ST_DumpPoints(ST_GeomFromText('POLYGON(...)'))).geom AS poly_pt
  FROM points
  ORDER BY points <-> poly_pt
  LIMIT 1
),
sel AS (
  SELECT points FROM sorted_points
  WHERE points && ST_GeomFromText('POLYGON(...)')
)
SELECT ST_Dump(ST_Triangulate2DZ(ST_Collect(points))) FROM sel;
```

---

### Patches and Polygons: GiST Performance

- **Index Building:**
  - GiST index: 26GB.
- **Searches Based on GiST:**
  - Timing:
    - ~O(m) ~40ms
    - ~O(km) ~50s
    - ~O(10km) hours
  - When the index is not contained in RAM anymore (~5G points, ~3%).

---

### Patches and Polygons: BRIN Performance

- **Index Building:**
  - BRIN index: 15MB.
- **Searches Based on BRIN:**
  - Timing:
    - ~O(m) ~150s

---

### Data Insertion and BRIN Performance

- **How Data Was Inserted:**
  - Using the PDAL driver and the `chipper` filter.
  - Parallel processes: 6.
- **Improvement with Geohash:**
  - Created a geohash index and clustered the data.
  - Result: ~150s → ~800ms for radius ~O(m).
  - Performance:
    - x20 slower than GiST searches.
    - x200 faster than sequential searches.
    - x1000 faster for ~O(100m) searches.

---

### Is the Performance Drop Acceptable?

- **Comparison:**
  - BRIN searches: x20 slower than GiST searches.
  - Patch explosion: x10÷x100 slower than GiST searches.
  - Nearest Neighbor (NN) sorting: x10÷x100 slower than GiST searches.
  - Constrained triangulation: x10÷x100 slower than GiST searches.

---

### Conclusions

- **Is the Relational Approach Valid for LiDAR Data with PostgreSQL?**
  - Yes!
  - **GiST Indexes:**
    - Fast but can manage only a small portion of the dataset.
  - **BRIN Indexes:**
    - Slower but generally do not represent a significant bottleneck.
  - **Recommendation:**
    - Ensure data is sequentially ordered as in .las files.

---

### About the Author

- **Giuseppe Broccolo, Ph.D.**
  - PostgreSQL and PostGIS Consultant
  - @giubro
  - gbroccolo7
  - gbroccolo
  - gemini__81
  - Email: [PI:EMAIL]

---

### License

- This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License.
- [http://creativecommons.org/licenses/by-sa/4.0/](http://creativecommons.org/licenses/by-sa/4.0/)
- © 2016 2ndQuadrant Italia – [http://www.2ndquadrant.it](http://www.2ndquadrant.it)

---

**Contact:**
- **2ndQuadrant Italia**
- **Giuseppe Broccolo – PI:EMAIL**