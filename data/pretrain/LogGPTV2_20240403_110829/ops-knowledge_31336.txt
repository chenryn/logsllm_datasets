### System Overview
- **Operating System**: SME Server 8.1 (based on CentOS 5.10) 64-bit
- **System Python Version**: 2.4.3
- **Alternative Python Installation**: `/usr/local/bin/python2.7` (version 2.7.3, built some time ago)

### Goal
- **Objective**: Build and install Python 2.7.10, mod_wsgi, and Django.
- **First Step**: Replace the existing (older and broken) Python 2.7.3 with Python 2.7.10.

### Issue
- When building Python 2.7.10 as a shared library (`--enable-shared`), the wrong executable is being used, resulting in the older Python 2.7.3 version being detected instead of the newly built Python 2.7.10.

### Steps to Reproduce
1. **Without `--enable-shared`**:
   ```sh
   cd /tmp && rm -vrf Python-2.7.10 && tar -xzvf Python-2.7.10.tgz && cd Python-2.7.10 && ./configure && make && ./python -V
   ```
   - **Output**: `Python 2.7.10` (as expected)

2. **With `--enable-shared`**:
   ```sh
   cd /tmp && rm -vrf Python-2.7.10 && tar -xzvf Python-2.7.10.tgz && cd Python-2.7.10 && ./configure --enable-shared && make && ./python -V
   ```
   - **Output**: `Python 2.7.3` (wrong version)

3. **With `--prefix=/usr/local/`**:
   ```sh
   cd /tmp && rm -vrf Python-2.7.10 && tar -xzvf Python-2.7.10.tgz && cd Python-2.7.10 && ./configure --prefix=/usr/local/ && make && ./python -V
   ```
   - **Output**: `Python 2.7.10`

4. **With `--enable-shared` and `--prefix=/usr/local/`**:
   ```sh
   cd /tmp && rm -vrf Python-2.7.10 && tar -xzvf Python-2.7.10.tgz && cd Python-2.7.10 && ./configure --enable-shared --prefix=/usr/local/ && make && ./python -V
   ```
   - **Output**: `Python 2.7.3` (wrong version)

### Investigation
- The issue seems to be that the `configure` script is finding the old Python 2.7.3 installation when `--enable-shared` is used. This suggests that the build process is somehow picking up the old Python libraries or environment variables.

### Solution
- **Fix**: Use the `LD_RUN_PATH` environment variable to specify the correct library path during the build process.
  ```sh
  LD_RUN_PATH=/usr/local/lib make
  ```

- **Application**: This solution needs to be applied for both building Python 2.7.10 and mod_wsgi.
  - For Python 2.7.10:
    ```sh
    cd /tmp && rm -vrf Python-2.7.10 && tar -xzvf Python-2.7.10.tgz && cd Python-2.7.10 && ./configure --enable-shared --prefix=/usr/local/ && LD_RUN_PATH=/usr/local/lib make && make install
    ```
  - For mod_wsgi:
    ```sh
    # Assuming mod_wsgi is built with the new Python 2.7.10
    LD_RUN_PATH=/usr/local/lib make
    ```

### Verification
- After applying the fix, verify that the correct Python version is being used by mod_wsgi:
  ```sh
  [warn] mod_wsgi: Compiled for Python/2.7.10.
  [warn] mod_wsgi: Runtime using Python/2.7.10.
  ```

### Conclusion
- The issue was resolved by setting the `LD_RUN_PATH` environment variable to ensure that the correct Python libraries are used during the build process. This ensures that the newly built Python 2.7.10 is correctly recognized and used by both the Python executable and mod_wsgi.