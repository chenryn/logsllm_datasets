让我们先来说一说函数响应式编程吧，以及我们在本文后面不再讨论它的原因。
### 函数响应式编程（FRP）
 函数响应式编程   Functional reactive programming ，通常被称作 *FRP*，是最常被误解的。FRP 在二十年前就被 Conal Elliott [精确地定义过了](http://conal.net/papers/icfp97/)了。但是最近这个术语却被错误地 脚注1 用来描述一些像 Elm、Bacon.js 的技术以及其它技术中的响应式插件（RxJava、Rx.NET、 RxJS）。许多的 库   （    libraries    ） 声称他们支持 FRP，事实上他们说的并非*响应式编程*，因此我们不会再进一步讨论它们。
### 响应式编程
 响应式编程   Reactive programming ，不要把它跟*函数响应式编程*混淆了，它是异步编程下的一个子集，也是一种范式，在这种范式下，由新信息的 有效性   （    availability    ） 推动逻辑的前进，而不是让 一条执行线程   （    a thread-of-execution    ） 去推动 控制流   （    control flow    ） 。
它能够把问题分解为多个独立的步骤，这些独立的步骤可以以异步且 非阻塞   （    non-blocking    ） 的方式被执行，最后再组合在一起产生一条 工作流   （    workflow    ） ——它的输入和输出可能是 非绑定的   （    unbounded    ） 。
   “异步地”    （    Asynchronous    ） 被牛津词典定义为“不在同一时刻存在或发生”，在我们的语境下，它意味着一条消息或者一个事件可发生在任何时刻，也有可能是在未来。这在响应式编程中是非常重要的一项技术，因为响应式编程允许[ 非阻塞式   （    non-blocking    ） ]的执行方式——执行线程在竞争一块共享资源时不会因为 阻塞   （    blocking    ） 而陷入等待（为了防止执行线程在当前的工作完成之前执行任何其它操作），而是在共享资源被占用的期间转而去做其它工作。 阿姆达尔定律   （    Amdahl's Law    ）   脚注2 告诉我们，竞争是 可伸缩性   （    scalability    ） 最大的敌人，所以一个响应式系统应当在极少数的情况下才不得不做阻塞工作。
响应式编程一般是 事件驱动   （    event-driven    ） ，相比之下，响应式系统则是 消息驱动   （    message-driven    ） 的——事件驱动与消息驱动之间的差别会在文章后面阐明。
响应式编程库的应用程序接口（API）一般是以下二者之一：
*  基于回调的   （    Callback-based    ） —匿名的 间接作用   （    side-effecting    ） 回调函数被绑定在 事件源   （    event sources    ） 上，当事件被放入 数据流   （    dataflow chain    ） 中时，回调函数被调用。
*  声明式的   （    Declarative    ） ——通过函数的组合，通常是使用一些固定的函数，像 *map*、 *filter*、 *fold* 等等。
大部分的库会混合这两种风格，一般还带有 基于流   （    stream-based    ） 的 操作符   （    operators    ） ，像 windowing、 counts、 triggers。
说响应式编程跟   数据流编程    （    dataflow programming    ） 有关是很合理的，因为它强调的是*数据流*而不是*控制流*。
举几个为这种编程技术提供支持的的编程抽象概念：
* [Futures/Promises](https://en.wikipedia.org/wiki/Futures_and_promises)——一个值的容器，具有 读共享/写独占   （    many-read/single-write    ） 的语义，即使变量尚不可用也能够添加异步的值转换操作。
*  流   （    streams    ）  - [响应式流](http://reactive-streams.org/)——无限制的数据处理流，支持异步，非阻塞式，支持多个源与目的的 反压转换管道   （    back-pressured transformation pipelines    ） 。
* [数据流变量](https://en.wikipedia.org/wiki/Oz_(programming_language)#Dataflow_variables_and_declarative_concurrency)——依赖于输入、 过程   （    procedures    ） 或者其它单元的 单赋值变量   （    single assignment variables    ） （存储单元），它能够自动更新值的改变。其中一个应用例子是表格软件——一个单元的值的改变会像涟漪一样荡开，影响到所有依赖于它的函数，顺流而下地使它们产生新的值。
在 JVM 中，支持响应式编程的流行库有 Akka Streams、Ratpack、Reactor、RxJava 和 Vert.x 等等。这些库实现了响应式编程的规范，成为 JVM 上响应式编程库之间的 互通标准   （    standard for interoperability    ） ，并且根据它自身的叙述是“……一个为如何处理非阻塞式反压异步流提供标准的倡议”。
响应式编程的基本好处是：提高多核和多 CPU 硬件的计算资源利用率；根据阿姆达尔定律以及引申的  Günther 的通用可伸缩性定律   （    Günther’s Universal Scalability Law    ）   脚注3 ，通过减少 序列化点   （    serialization points    ） 来提高性能。
另一个好处是开发者生产效率，传统的编程范式都尽力想提供一个简单直接的可持续的方法来处理异步非阻塞式计算和 I/O。在响应式编程中，因活动(active)组件之间通常不需要明确的协作，从而也就解决了其中大部分的挑战。
响应式编程真正的发光点在于组件的创建跟工作流的组合。为了在异步执行上取得最大的优势，把   反压    （    back-pressure    ） 加进来是很重要，这样能避免过度使用，或者确切地说，避免无限度的消耗资源。
尽管如此，响应式编程在搭建现代软件上仍然非常有用，为了在更高层次上 理解   （    reason about    ） 一个系统，那么必须要使用到另一个工具： 响应式架构   reactive architecture ——设计响应式系统的方法。此外，要记住编程范式有很多，而响应式编程仅仅只是其中一个，所以如同其它工具一样，响应式编程并不是万金油，它不意图适用于任何情况。
### 事件驱动 vs. 消息驱动
如上面提到的，响应式编程——专注于短时间的数据流链条上的计算——因此倾向于*事件驱动*，而响应式系统——关注于通过分布式系统的通信和协作所得到的弹性和韧性——则是[*消息驱动的*](http://www.reactivemanifesto.org/glossary#Message-Driven)  脚注4（或者称之为  消息式   （    messaging    ）  的）。
一个拥有 长期存活的可寻址   （    long-lived addressable    ） 组件的消息驱动系统跟一个事件驱动的数据流驱动模型的不同在于，消息具有固定的导向，而事件则没有。消息会有明确的（一个）去向，而事件则只是一段等着被 观察   （    observe    ） 的信息。另外， 消息式   （    messaging    ） 更适用于异步，因为消息的发送与接收和发送者和接收者是分离的。
响应式宣言中的术语表定义了两者之间[概念上的不同](http://www.reactivemanifesto.org/glossary#Message-Driven)：
> 
> 一条消息就是一则被送往一个明确目的地的数据。一个事件则是达到某个给定状态的组件发出的一个信号。在一个消息驱动系统中，可寻址到的接收者等待消息的到来然后响应它，否则保持休眠状态。在一个事件驱动系统中，通知的监听者被绑定到消息源上，这样当消息被发出时它就会被调用。这意味着一个事件驱动系统专注于可寻址的事件源而消息驱动系统专注于可寻址的接收者。
> 
> 
> 