    v8::HandleScope handle_scope(isolate);
    v8::Local context = v8::Context::New(isolate);
    v8::Context::Scope context_scope(context);
    v8::TryCatch try_catch(isolate);
    v8::Local global = context->Global();
    //上下⽂当中设置version/global/window等信息
    global->Set(context, NewV8Key(isolate, "version"), 
NewV8String(isolate, version)).IsJust();
    global->Set(context, NewV8Key(isolate, "global"), global).IsJust();
    global->Set(context, NewV8Key(isolate, "window"), global).IsJust();
    v8::Local v8_stdout = v8::Object::New(isolate);
    //下⾯都是绑定函数，⽐如将write绑定到函数external_references[0]的指向(这变量是
啥后⾯会说到)，其他类似，另外还有绑定标准输出与标准错误
    v8_stdout
        ->Set(
            context, NewV8Key(isolate, "write"),
            v8::Function::New(context, 
reinterpret_cast
(external_references[0])).ToLocalChecked())
        .IsJust();
    global->Set(context, NewV8Key(isolate, "stdout"), v8_stdout).IsJust();
    global->Set(context, NewV8Key(isolate, "stderr"), v8_stdout).IsJust();
    global
        ->Set(
            context, NewV8Key(isolate, "flex_tokenize"),
            v8::Function::New(context, 
reinterpret_cast
(external_references[1])).ToLocalChecked())
        .IsJust();
    global
        ->Set(
            context, NewV8Key(isolate, "request"),
            v8::Function::New(context, 
reinterpret_cast
(external_references[2])).ToLocalChecked())
        .IsJust();
    global
        ->Set(
            context, NewV8Key(isolate, "request_async"),
            v8::Function::New(context, 
reinterpret_cast
(external_references[3])).ToLocalChecked())
        .IsJust();
    //暂时不知道⼲嘛的，也没有这个js⽂件
另外上⾯提到的 external_references ⾥⾯的回掉函数在native-function.cc当中有定义，这
⾥直接放过来很好理解就不做解释了，稍微占点篇幅了
    if (isolate->ExecScript({reinterpret_cast(gen_builtins), 
gen_builtins_len}, "builtins.js").IsEmpty()) {
      Exception e(isolate, try_catch);
      Platform::logger(e);
      // no need to continue
      return;
    }
    //初始化配置
    if (isolate->ExecScript(config, "config.js").IsEmpty()) {
      Exception e(isolate, try_catch);
      Platform::logger(e);
    }
    //执⾏我们的插件js脚本做参数初始化以及各种检测函数的注册
    for (auto& plugin_src : plugin_list) {
      if (isolate->ExecScript("(function(){\n" + plugin_src.source + "\n})
()", plugin_src.filename, -1).IsEmpty()) {
        Exception e(isolate, try_catch);
        Platform::logger(e);
      }
    }
    creator.SetDefaultContext(context);
  }
  v8::StartupData snapshot = 
creator.CreateBlob(v8::SnapshotCreator::FunctionCodeHandling::kClear);
  this->data = snapshot.data;
  this->raw_size = snapshot.raw_size;
}
#include "bundle.h"
#include "flex/flex.h"
#include "request.h"
namespace openrasp_v8 {
void log_callback(const v8::FunctionCallbackInfo& info) {
  Isolate* isolate = reinterpret_cast(info.GetIsolate());
  for (int i = 0; i (message.length())});
  }
}
void flex_callback(const v8::FunctionCallbackInfo& info) {
  Isolate* isolate = reinterpret_cast(info.GetIsolate());
  auto context = isolate->GetCurrentContext();
  if (info.Length() IsString() || !info[1]->IsString()) {
    return;
  }
  v8::String::Utf8Value str(isolate, info[0]);
  v8::String::Utf8Value lexer_mode(isolate, info[1]);
  char* input = *str;
  int input_len = str.length();
  flex_token_result token_result = flex_lexing(input, input_len, 
*lexer_mode);
  size_t len = std::min(uint32_t(input_len), token_result.result_len);
  auto arr = v8::Array::New(isolate, len);
  for (int i = 0; i Set(context, i, v8::Integer::New(isolate, 
token_result.result[i])).IsJust();
  }
  free(token_result.result);
  info.GetReturnValue().Set(arr);
}
void request_callback(const v8::FunctionCallbackInfo& info) {
  auto isolate = info.GetIsolate();
  v8::TryCatch try_catch(isolate);
  auto context = isolate->GetCurrentContext();
  v8::Local resolver;
  if (!v8::Promise::Resolver::New(context).ToLocal(&resolver)) {
    try_catch.ReThrow();
理解了这⼀段以后接下来再次回到Java端
    return;
  }
  info.GetReturnValue().Set(resolver->GetPromise());
  HTTPRequest req(isolate, info[0]);
  HTTPResponse res = req.GetResponse();
  auto object = res.ToObject(isolate);
  if (res.error) {
    resolver->Reject(context, object).IsJust();
  } else {
    resolver->Resolve(context, object).IsJust();
  }
}
void request_async_callback(const v8::FunctionCallbackInfo& 
info) {
  auto isolate = info.GetIsolate();
  AsyncRequest::GetInstance().Submit(std::make_shared
(isolate, info[0]));
}
intptr_t* Snapshot::external_references = new intptr_t[5]{
    reinterpret_cast(log_callback),
    reinterpret_cast(flex_callback),
    reinterpret_cast(request_callback),
    reinterpret_cast(request_async_callback),
    0,
};
}  // namespace openrasp_v8
这⾥获得 RASP.algorithmConfig 并保存到 ConfigItem.ALGORITHM_CONFIG
到这⾥插件更新部分就结束了
之后调⽤了 InitFileWatcher ,它的作⽤是创建以⽬录为单位的⽂件监听，如果⽂件进⾏增
删改，就执⾏插件更新
Checker的初始化  
接下来就是Checker的初始化
这⾥会遍历
遍历Type这个枚举类型将检测类型以及对应的检测函数添加到 checkers 这个 EnumMap 当中
CustomClassTransformer  
继续回来接下来调⽤ this.initTransformer(inst); ，这⾥实例
化 CustomClassTransformer 这个 Class ⽂件的转换器，
可以看到将⾃⾝作为类转换器进⾏添加
并调⽤ retransform ，这⾥逻辑很简单就不多说，看不懂的可以⾃⾏学习 JavaAgent
因此之后当类加载的时候，会进⼊我们⾃⼰的 Transformer  中，执⾏ transform 函数进
⾏拦截
Hook  
public CustomClassTransformer(Instrumentation inst) {
  this.inst = inst;
  inst.addTransformer(this, true);
  this.addAnnotationHook();
}
public void retransform() {
        new LinkedList();
        Class[] loadedClasses = this.inst.getAllLoadedClasses();
        Class[] arr$ = loadedClasses;
        int len$ = loadedClasses.length;
        for(int i$ = 0; i$ < len$; ++i$) {
            Class clazz = arr$[i$];
            if (this.isClassMatched(clazz.getName().replace(".", "/")) && 
this.inst.isModifiableClass(clazz) && 
!clazz.getName().startsWith("java.lang.invoke.LambdaForm")) {
                try {
                    this.inst.retransformClasses(new Class[]{clazz});
                } catch (Throwable var8) {
                    LogTool.error(ErrorType.HOOK_ERROR, "failed to 
retransform class " + clazz.getName() + ": " + var8.getMessage(), var8);
                }
            }
        }
    }
因此接下来我们着重
看 com.baidu.openrasp.transformer.CustomClassTransformer#transform ⽅法，
它会遍历 hooks ，如果条件符合(isClassMatched返回true)则会在制定的类⽅法当中进⾏hook
⽽这些类来源于哪⾥呢？就是 open.baidu.openrasp.hook ⽂件夹下的类
这⾥呢我们就随便挑⼀个来进⾏解读，那就来⼀
个 com.baidu.openrasp.hook.system.ProcessBuilderHook 命令执⾏的类的吧，可以
看到isClassMatched的规则
看看调⽤到底是如何调⽤的，我们回
到 com.baidu.openrasp.transformer.CustomClassTransformer#transform ，可以
看到最终返回的字节码是受 hook.transformClass 处理的，在这⾥还有个⼩细节是如果
loader 为 null ，则会调⽤ setLoadedByBootstrapLoader 设置其中属性为 true ，我们
也知道什么情况下获取不到类加载器也就是由BootStrap启动器类加载器加载的⼀些类如
File 、 Runtime 等等，在设置为 true 以后在后⾯hook的时候⽣成代码有部分区别，之后
会提到
    public boolean isClassMatched(String className) {
        if (ModuleLoader.isModularityJdk()) {
            return "java/lang/ProcessImpl".equals(className);
        } else if (!OSUtil.isLinux() && !OSUtil.isMacOS()) {
            return OSUtil.isWindows() ? 