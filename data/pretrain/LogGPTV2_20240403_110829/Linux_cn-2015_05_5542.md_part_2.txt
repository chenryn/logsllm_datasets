```
### 测试全局配置
现在“Global”部分就完成了。Monit配置文件看起来像这样：
```
#  Global Section
# status webpage and acl's
set httpd port 1966 and
     SSL ENABLE
     PEMFILE  /var/certs/monit.pem
     allow monituser:romania
     allow localhost
     allow 192.168.0.0/16
     allow myhost.mydomain.ro
# mail-server
set mailserver  smtp.monit.ro port 587
# email-format
set mail-format {
 from: PI:EMAIL
 subject: $SERVICE $EVENT at $DATE on $HOST
 message: Monit $ACTION $SERVICE $EVENT at $DATE on $HOST : $DESCRIPTION.
       Yours sincerely,
          Monit
  }
set alert PI:EMAIL
# delay checks
set daemon 120
   with start delay 240
set logfile syslog facility log_daemon
# idfile and mail queue path
set idfile /var/monit/id
 set eventqueue
     basedir /var/monit
```
现在是时候验证我们的工作了，你可以通过运行如下命令来验证存在的配置文件（/etc/monit.conf）：
```
# monit -t
Control file syntax OK
```
如果monit提示任何错误，请再检查下配置文件。幸运的是，错误/警告信息是可以帮助你发现问题的，比如：
```
monit: Cannot stat the SSL server PEM file '/var/certs/monit.pem' -- No such file or directory
/etc/monit/monitrc:10: Warning: hostname did not resolve 'smtp.monit.ro'
```
一旦你确认配置文件没问题了，可以启动monit守护进程，然后等2到3分钟：
```
# service monit start
```
如果你使用的是systemd，运行：
```
# systemctl start monit
```
现在打开一个浏览器窗口，然后访问`https://:1966`。将``替换成Monit所在机器的机器名或者IP地址。
如果你使用的是自签名的SSL证书，你会在浏览器中看到一个警告信息。继续访问即可。
![](/data/attachment/album/201505/30/225357tnryary3xncuruyx.jpg)
你完成登录后，就会看到这个页面。
![](/data/attachment/album/201505/30/225357g4ln5h6qnwwnm4gg.jpg)
在这个教程的其余部分，我们演示监控一个本地服务器和常见服务的方法。你会在[官方wiki页面](http://mmonit.com/wiki/Monit/ConfigurationExamples)看到很多有用的例子。其中的多数是可以直接复制粘贴的！
### Service Configuration: CPU/Memory Monitoring （服务配置：CPU、内存监控）
我们先来监控本地服务器的CPU、内存占用。复制如下代码段到配置文件中。
```
check system localhost
    if loadavg (1min) > 10 then alert
    if loadavg (5min) > 6 then alert
    if memory usage > 75% then alert
    if cpu usage (user) > 70% then alert
    if cpu usage (system) > 60% then alert
    if cpu usage (wait) > 75% then alert
```
你可以很容易理解上边的配置。最上边的check是指每个监控周期（全局配置里设置的120秒）都对本机进行下面的操作。如果满足了任何条件，monit守护进程就会使用邮件发送一条报警。
如果某个监控项不需要每个周期都检查，可以使用如下格式，它会每240秒检查一次平均负载。
```
if loadavg (1min) > 10 for 2 cycles then alert
```
### Service Configuration: SSH Service Monitoring （服务配置：SSH服务监控）
先检查我们的sshd是否安装在/usr/sbin/sshd：
```
check file sshd_bin with path /usr/sbin/sshd
```
我们还想检查sshd的启动脚本是否存在：
```
check file sshd_init with path /etc/init.d/sshd
```
最后，我们还想检查sshd守护进程是否存活，并且在监听22端口：
```
check process sshd with pidfile /var/run/sshd.pid
   start program  "/etc/init.d/sshd start"
   stop program  "/etc/init.d/sshd stop"
   if failed port 22 protocol ssh then restart
   if 5 restarts within 5 cycles then timeout
```
我们可以这样解释上述配置：我们检查是否存在名为sshd的进程，并且有一个保存其pid的文件存在（/var/run/sshd.pid）。如果任何一个不存在，我们就使用启动脚本重启sshd。我们检查是否有进程在监听22端口，并且使用的是SSH协议。如果没有，我们还是重启sshd。如果在最近的5个监控周期（5x120秒）至少重启5次了，sshd就被认为是不能用的，我们就不再检查了。
![](/data/attachment/album/201505/30/225400u8bg8fo970tooykg.jpg)
### Service Configuration: SMTP Service Monitoring （服务配置：SMTP服务监控）
现在我们来设置一个检查远程SMTP服务器（如192.168.111.102）的监控。假定SMTP服务器运行着SMTP、IMAP、SSH服务。
```
check host MAIL with address 192.168.111.102
   if failed icmp type echo within 10 cycles then alert
   if failed port 25  protocol smtp then alert
             else if recovered then exec "/scripts/mail-script"
   if failed port 22  protocol ssh  then alert
   if failed port 143 protocol imap then alert
```
我们检查远程主机是否响应ICMP协议。如果我们在10个周期内没有收到ICMP回应，就发送一条报警。如果监测到25端口上的SMTP协议是异常的，就发送一条报警。如果在一次监测失败后又监测成功了，就运行一个脚本（/scripts/mail-script）。如果检查22端口上的SSH或者143端口上的IMAP协议不正常，同样发送报警。
### 总结
在这个教程，我演示了如何在本地服务器设置Monit，当然这只是Monit功能的冰山一角。你可以花些时间阅读Monit的man手册（写得很好）。Monit可以为任何Linux系统管理员做很多事情，并且具有非常优美和易于理解的语法。如果你将一个集中式的远程监控系统和Monit一同使用，你会得到一个更可靠的监控系统。你感觉Monit怎么样？
---
via: 
作者：[Iulian Murgulet](http://xmodulo.com/author/iulian) 译者：[goreliu](https://github.com/goreliu) 校对：[wxy](https://github.com/wxy)
本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创翻译，[Linux中国](http://linux.cn/) 荣誉推出