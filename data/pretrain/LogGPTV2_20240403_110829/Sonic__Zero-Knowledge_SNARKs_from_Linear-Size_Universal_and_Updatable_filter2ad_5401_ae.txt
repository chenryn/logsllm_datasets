Xα(X − z)w(X , Xα) + vXα − (X
−d +max)f (X , Xα) = 0
which implies that
(X − z)wx(X) + v − (X
−d +max)fα(X) = 0
and (X − z) divides (X−d +max)fα(X) − v and fα(X) has non-zero
terms between −max and d. Thus fα(X) has no terms with degree
less than −max. Moreover fα(X) has no zero term because this is
not given in the reference string. Thus B aborts in this step only if
f (X , Xα) is as assumed, which means Aalg has not broken bounded
polynomial extractability.
In Step 6, Balg aborts only if Q1(u1X , u2X) = 0. By the Schwartz-
Zippel lemma, the probability of this occurring is bounded by (4d)2
p−1
where d is the total degree of Q (recall we have negative powers).
Following the generic bound for Boneh and Boyen’s SDH assump-
tion [20] we may assume that Advq-DLOG
≥ q2
p−1; i.e., that the
bp,Balg
probability that Balg aborts in this way is negligible.
In Step 7, Q1(u1x, u2x) exactly defines the verifier’s equation, so
if Aalg succeeds then Q1(u1x, u2x) = 0. Thus Q′
1(x) = 0 and x is a
root of Q′
Thus when Aalд succeeds at breaking bounded polynomial ex-
tractability, Balg returns x unless Q1(u1X , u2X) = 0, which happens
with bounded probability. Thus
1(X).
Advextract
bp,Aalg
≤ Advq-DLOG
bp,Balg
as desired.
10
We now consider evaluation binding, where we show that
Advbind
bp,Aalg
≤ Advq-DLOG
bp, Calg
.
1
In fact, Calg does not act directly on the q-DLOG assumption, but
rather on the q-SDH assumption [20], which states that given
(д, дx , . . . , дx q) it is hard to compute (c, д
x−c ) for some value c.
In particular we show that if Aalg can open their commitment at z
to two different evaluations then Calg can compute a tuple of this
form. Following the generic bound for q-SDH [20], this assumption
is implied by q-DLOG so the result holds.
The adversary Calg(д
, дx , . . . , дx q) simulates the evaluation
binding game with Aalg as follows.
(1) Calg behaves just as Balg did in its Steps 1-4 in answering
(2) Calg runs (F , z, v1, v2,W1,W2) r←− Aalg(bp, srs, max).
(3) If v1 (cid:44) v2 Calg returns (z,(W1W −1
2
returns ⊥.
If v1 (cid:44) v2 then
v2−v1 ). Otherwise it
oracle queries.
)
1
1
e(W , hα)e(W
−zдv , hα) = e(W , hα)e(W
′−zдv′
, hα)
and rearrangement yields
′−1
, hα(x−z)) = e(дv′−v , hα).
x−z ) and
1
e(WW
Thus Calg returns (z, д
Advbind
bp,Aalg
as required.
≤ Advq-DLOG
bp, Calg
□
7 SUCCINCT SIGNATURES OF CORRECT
COMPUTATION
In Section 6, we provided our main Sonic construction assuming a
secure polynomial commitment scheme and signature of correct
computation. While we showed a secure polynomial commitment
scheme in Section 6.2, it remains to provide an instantiation of a
secure signature of correct computation (scP, scV) [58]. Recall from
Section 6 that Sonic uses a signature of correct computation to
ensure that an element s is equal to s(z, y) for a known polynomial
d
i, j=−d
s(X , Y) =
si, jX iY j .
We require the soundness notion that no adversary can convince an
scV verifier unless s = s(z, y), and as usual require this property to
hold even against adversaries that can update the SRS. We provide
two competing realisations of signatures of correct computation.
The first one is described in this section and it is calculated by a
prover, and has succinct size and verifier computation. The second
one considers settings in which one can use untrusted helpers to
improve practical efficiency, and we describe it in Section 8.
We use the structure of s(X , Y) in order to prove its correct
calculation using a permutation argument, which itself has a grand-
product argument as an underlying component. We take inspiration
from our main construction and from the permutation and grand-
product arguments described by Bayer and Groth [5] and by Bootle
et al [23]. We restrict ourselves to constraint systems for which
11
s(X , Y) can be expressed as the sum of M polynomials, where the
j-th such polynomial is of the form
n
i =1
Ψj(X , Y) =
ψj,σj,i X iY σj,i
n
for (fixed) polynomial permutation σ j and coefficients ψj,i ∈ F.
By introducing additional multiplication constraints to replace any
linear constraints that do not fit this format, we can coerce any
constraint system in Section 5 into the correct form.
To expand further, our constraint system is determined by vec-
tors uq , vq , wq of size n that are typically sparse. To represent Ψj
in the desired form, we require that each power of Y in s(X , Y)
appears in no more than M occurrences, which means that for all
1 ≤ i ≤ n, only three values of uq , vq , wq can be non-zero. If uq is
too dense (the maximum density is determined by the number of
permutation arguments and there is an efficiency trade off between
proof size and prover computation), we split our original constraint
i =1 aiuq,i − an+1 and
into two or more constraints: we set 0 =n−ℓ
kq = an+1 +
i =n−ℓ+1
aiuq,i + b · vq + c · wq .
In doing so we have extended the length of a by one, and so also
must extend the length of b and c by one to obtain a dummy multi-
plicative constraint. The precise number of additional multiplication
constraints depends on the number of additive constraints (essen-
tially it implies that if there are more than 2n addition constraints in
an arithmetic circuit, then these are no longer free). In practice we
found that the increase in the number of multiplication constraints
for SHA256 circuits is approximately a factor of 3 when M = 3.
Our signature of correct computation uses a polynomial permu-
tation argument, which itself uses a grand-product argument. The
permutation argument allows us to verify that each polynomial
commitment contains Ψj(X , y), and this can then be opened at z to
verify that Ψj(z, y) has been calculated correctly. The purpose of this
argument is to offload the verifier’s computational costs onto the
prover. After using batching techniques described in Appendix C,
we get proof sizes of approximately 1kB.
The permutation verifier does not take in the permutation itself,
but a derived reference string srsΨ that can be deterministically
generated from the global srs and the permutation Ψ using 4 multi-
exponentiations of size n in G1. The cost of generating the derived
reference string is then amortised when the protocol is run over
multiple instances.
7.1 Polynomial Permutation Argument
A polynomial permutation argument is defined by three DPT pro-
tocols
n
• srsΨ ← Derive(bp, srs, Ψ(X , Y)) takes as input a bilin-
ear group, a structured reference string, and a polynomial
Ψ(X , Y) =
ψσi X iY σi . It outputs a derived reference
string srsΨ.
• (ψ , perm) ← permP(srsΨ, y, z, Ψ(X , Y)) takes as input a
derived reference string, two points in the field, and a
polynomial Ψ(X , Y). It outputs ψ = Ψ(z, y) and a proof
perm.
i =1
Ψj at (z, y); i.e., ψj =n
if and only if s =
i =1 ψj,iziyσj,i . Thus the verifier is convinced
j ψj is the correct evaluation of s(X , Y) at z, y. □
7.2 Grand-Product Argument
One of the main components of our polynomial permutation argu-
ment is a grand-product argument. A grand-product argument is
defined by two DPT protocols
i ai =
and two openings such that
• gprod ← gprodP(bp, srs, A, B, a(X), b(X)) takes as input
the bilinear group, the SRS, two polynomial commitments,
• 0/1 ← permV(bp, srs, A, B, gprod) takes as input the bi-
linear group, the SRS, two polynomial commitments, and
a proof. It outputs a bit indicating acceptance (b = 1), or
rejection (b = 0).
i bi.

i ai =
We require that this scheme is knowledge-sound; i.e., an adver-
sary can convince a verifier only if it knows openings to A and
B whose coefficients have the same grand-product; i.e., such that
i bi. Again, we require this to hold even against adver-
saries that can update the SRS. Our grand-product argument is
given in the full version of the paper [56].
Figure 4: Sonic is built using a polynomial commitment scheme
and a signature of correct computation. Here we describe how the
prover can construct the signature of correct computation using
permutation arguments, grand-product arguments, and the polyno-
mial commitment scheme described in Section 6.2.
j=1, y, z
Common input: info = {srsΨj }M
scP(info, {Ψj(X , Y)}M
for 1 ≤ j ≤ M:
j=1):
j =1) (cid:55)→ (s, {ψj , permj}M
(ψj , permj) ← permP(srsΨj , y, z, Ψj(X , Y))
j=1 ψj
s ←M
check s =M
return (s, {ψj , permj}M
j=1)
j=1)) (cid:55)→ 0/1:
scV(info,(s, {ψj , permj}M
for 1 ≤ j ≤ M:
check permV(srsΨj , y, z,(ψj , permj))
return 1 if all checks pass, else return 0
j=1 ψj
Figure 5: A signature of correct computation using a permutation
argument.
• 0/1 ← permV(srsΨ, y, z,(ψ , perm)) takes as input a de-
rived reference string, two points in the field, an evaluation,
and a proof. It outputs a bit indicating acceptance (b = 1),
or rejection (b = 0).
We require that this scheme is sound; i.e., an adversary can convince
a verifier only if ψ = Ψ(z, y). As with our earlier building blocks, we
require this to hold even against adversaries that can update the SRS.
Our polynomial permutation argument is given in Appendix A.
sound when instantiated using a sound permutation argument.
Theorem 7.1. The signature of computation scheme in Figure 5 is
Proof. The polynomial s(X , Y) is given by
j ψj(X , Y). The
soundness of the permutation argument gives us that no adversary
can convince the verifier of Ψj unless ψj is the correct evalutation of
12
8 SIGNATURES OF CORRECT
COMPUTATION WITH EFFICIENT HELPED
VERIFICATION
Recall that Sonic uses a signature of correct computation to ensure
that an element s is equal to s(z, y) for a known polynomial
d
i, j=−d
s(X , Y) =
si, jX iY j .
In Section 7 we described a signature of correct computation that
is calculated directly by a prover, and has succinct size and verifier
computation. Alternatively, in some settings one can use untrusted
helpers to improve practical efficiency, which we describe in this
section. In the helper setting, proof sizes and prover computation
are significantly more efficient.
In the amortised setting, where one is proving the same thing
many times, we can use “helpers” in order to aggregate many signa-
tures of correct computation at the same time. The proofs provided
by the helper are succinct and the helper can be run by anyone (i.e.,
they do not need any secret information from the prover). Verifi-
cation requires a one-off linear-sized polynomial evaluation in the
field and an addition two pairing equations per proof. Compared
to the unhelped costs (which require an additional 4 pairings per
proof) this is more efficient assuming there is a sufficiently large
number of proofs in the batch. As discussed in the introduction,
the natural candidate for this role in the setting of blockchains is a
miner, as they are already investing computational energy into the
system. An efficiency overview is given in Table 3.
The algorithm for our helped signature of correct computation
is given in Figure 7. The helper is denoted by hscP and the verifier
is denoted by hscV. Roughly the idea is as follows. The helper
commits to s(X , yj) for each element yj. The verifier provides a
random challenge u. The helper commits to s(u, X), and then opens
its commitment to s(X , yj) at u and its commitment s(u, X) at yj and
checks the two are equal. The verifier provides a random challenge
Helper
Verifier
Proof size
Helped
Unhelped
-
O(mn log(n)) O(m) + O(n)
O(m)
3m + 3 G1, 2m + 1 F
16m G1, 14m F
Table 3: Computational efficiency and proof size for the sc with re-
spect to the helped verifier. Here n is the number of multiplication
gates and m is the number of proofs for the same constraint system.
Although the unhelped version has better asymptotic efficiency, in
practice the helped verifier is more efficient.
Figure 6: Sonic can be constructed using a signature of correct com-
putation that is calculated by a helper as opposed to directly by the
prover. The helper algorithm is run on a batch of proofs, and pro-
vides the setting in which Sonic obtains the best practical efficiency.
v. The helper opens s(u, X) at v. The verifier computes s(u, v) for
itself and checks that the helper’s opening is correct.
Theorem 8.1. The aggregated signature of correct computation
in Figure 7 is sound when instantiated using a secure polynomial
commitment scheme.
Proof. Bounded polynomial extraction of the underlying poly-
nomial commitment gives us that there exist algebraic extractors
that output degree-d Laurent polynomials s′
j(X) and c′(X) such that
j(x) and C = дαc′(x). First observe that the probability that
αs′
Sj = д
c′(v) = s(u, v) at a randomly chosen v but that c′(X) (cid:44) s(u, X) is