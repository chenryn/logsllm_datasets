There are many ways to implement EAP [16]. These different EAP implementations are known as EAP methods [16]. 
In this section, we review some of the most commonly used EAP methods direct relevant to the material covered in 
this paper. 
II.4.A EAP-MD5 
The EAP-MD5 authentication process begins when the authentication server sends an EAP-Request-Identity to the 
supplicant [16]. The supplicant responds with an EAP-Response-Identity, causing the authentication server to create 
a randomly generated challenge string. The authentication server sends this challenge string to the supplicant as an 
MD5-Challenge-Request [16]. The supplicant then concatenates its username, plaintext password, and the challenge 
string into a single value, and sends the MD5 hash of this value to the authentication server as the MD5-Challenge-
Response. Upon receiving the MD5-Challenge-Response, the authentication server repeats the hashing process 
performed by the supplicant: the authentication server concatenates the username, password, and challenge string 
into a single value which is input into the MD5 hashing function. This second MD5 hash (created by the 
authentication server) is compared against the MD5-Challenge-Response (created by the supplicant). If the two 
hashes are identical, the authentication attempt succeeds. Otherwise, it fails [16]. 
Page 10 of 37 
Figure 2 – the EAP-MD5 authentication process 
This authentication method, when used alone, is not protected by encryption. As described by Josh Wright and Brad 
Antoniewicz in their presentation at Schmoocon 2008, an attacker sniffing traffic between the supplicant and the 
authenticator can capture both the MD5-Challenge-Request and MD5-Challenge-Response [13]. Wright and 
Antoniewicz describe a dictionary attack to calculate the plaintext password, as illustrated in Figure 3 below [13]. 
Page 11 of 37 
Figure 3 – Wright’s and Antoniewicz’s dictionary attack against EAP-MD5, expressed as an algorithmic flowchart 
Further work by Fanbao Liu and Tao Xie of the National University of Defense Technology in Changsha, China reveals  
an even more efficient EAP-MD5 cracking technique that uses a length-recovery attack [19]. 
II.4.B EAP-PEAP / EAP-TTLS 
The authentication process consists of two phases: outer authentication and inner authentication. Outer 
authentication comes first, and begins when the supplicant makes an authentication request to the authentication 
server via the authenticator [21][29][30]. The authenticator then attempts to prove its identity to the supplicant by 
responding with an x.509 certificate. If the supplicant accepts the authentication server’s certificate, outer 
authentication succeeds and a secure tunnel is established between the authentication server and supplicant 
[21][29][30]. We then transition to the inner authentication process through the secure tunnel. The use of a secure 
tunnel to protect the inner authentication process was developed largely in response to the weaknesses that affect 
unprotected EAP methods such as EAP-MD5. 
Page 12 of 37 
Much like EAP itself, there are many different protocols available for use during the inner authentication process 
[21][29][30]. However, MS-CHAPv2 is the most commonly used authentication protocol for this purpose. 
Figure 4 – The EAP-PEAP authentication process 
This system is problematic.  Although mutual authentication can be enforced using inner-authentication mechanisms 
such as MS-CHAPv2, the x.509 certificate is the only means through which the supplicant can verify the identity of 
the authentication server. Absent a guarantee that the supplicant will always reject invalid certificates, the onus is 
placed on the supplicant (and therefore the user, in many cases) to reject invalid certificates received by the 
authentication server [13][20]. 
Remember that EAP is not only used for wired authentication as specified by 802.1x, but for wireless authentication 
in conjunction with WPA2 [21]. It was this inability to validate the identity of the authentication server that lead to 
the classic attack against WPA2-EAP wireless networks presented by Brad Antoniewicz and Joshua Wright at 
Schmoocon in 2008 [13]. When WPA2-EAP is implemented using weak EAP methods such as EAP-PEAP and EAP-
TTLS, an attacker can use a rogue access point attack to force the supplicant to authenticate with a rogue 
authentication server [13][21]. So long as the supplicant accepts the certificate presented by the attacker’s 
authentication server, the supplicant will transmit an EAP challenge and response to the attacker that can be cracked 
to obtain a plaintext username and password [13][21]. 
Further increasing the severity of this issue, MS-CHAPv2 is the strongest Inner Authentication protocol available for 
use with EAP-PEAP and EAP-TTLS. MS-CHAPv2 itself is vulnerable to a cryptographic weakness, first discovered by 
Moxie Marlinspike and David Hulton in 2012, that allows an attacker to reduce the captured MS-CHAPv2 challenge 
and response hashes to a single round of DES encryption, which is a mere 56-bits in length [22][23].  These 56-bits 
are weak enough that they can converted into a password-equivalent NT hash within 24 hours with a 100% success 
rate using FPGA-based hardware [22][23]. 
Page 13 of 37 
Although the feasibility of similar attacks against wired port security have yet to be explored, this paper 
demonstrates that such attacks are pivotal in allowing us to bypass 802.1x-2010.  
II.4.C EAP-TLS 
In 2008, EAP-TLS was introduced by RFC 5216, largely as a mitigation to the aforementioned security issues affecting 
weak EAP methods such as EAP-PEAP and EAP-TTLS [24]. The strength of EAP-TLS lies in its use of mutual certificate-
based authentication during the outer authentication process, preventing attackers from performing the kinds of 
man-in-the-middle attacks that can be used to attack weaker EAP implementations [24]. Unfortunately, the 
inconvenience of installing a client certificate on all supplicant devices reduced the overall adoption rate of this 
technology [25]. 
III. Research Environment and Architecture 
Our lab environment consisted of the following core components: 
§ 
Simulated Network Environment – the test network against which we performed our attacks. 
§ 
Rogue Device A – a rogue device configured to use a bridged-based approach for performing 802.1x 
bypasses. 
§ 
Rogue Device B – a rogue device equipped with remotely controllable mechanical A/B ethernet splitters. 
In the remainder of this paper, we often talk about attacks requiring either a Rogue Device A or Rogue Device B 
configuration. When we say this, we mean that the attack assumes that the rogue device is configured according to 
the following descriptions. 
III.1 Simulated Network Environment 
Our simulated network environment emulates an enterprise internal network protected by 802.1x authentication. 
Figure 5 – the simulated network environment 
Page 14 of 37 
As shown in Figure 5, the simulated network environment uses the following components: 
§ 
Supplicant: a MACsec capable Linux workstation running Fedora 28 equipped with NetworkManager and 
wpa_supplicant, configured to connect and authenticate automatically with the network. 
§ 
Authenticator: a MACsec capable Cisco Catalyst 3560-CX switch configured as follows: 
o 
GigabitEthernet 0/1 interface – provides an upstream link to the network gateway 
o 
GitabitEthernet 0/2 interface – provides administrative access to the switch 
o 
GigabitEthernet 0/3 interface – provides a connection to the external RADIUS server 
o 
GigabitEthernet 0/5 interface – standard 802.1x protected port 
o 
GigabitEthernet 0/6 interface – 802.1x protected port with MACsec 
§ 
Authentication Server (RADIUS) – we used a Raspberry Pi running Freeradius 3.017 as an authentication 
server for use with the switch.  
Figure 6 – objective: introducing a rogue device between the authenticator and supplicant 
The goal of this experiment was to successfully bypass multiple variations of 802.1x by introducing a rogue device to 
the network, either by placing it as a bridge between the supplicant and authenticator (see Figure 6 above) or by 
connecting it directly to the authenticator itself (see Figure 7 below). 
Page 15 of 37 
Figure 7 – objective: introducing a rogue device directly to the authenticator 
To do this, we constructed two rogue devices: one intended for purely bridge-based bypass methods and the other 
for mechanically assisted bypass methods. 
III.2 Rogue Device A: Pure Bridge-based Design 
Rogue Device A followed a pure bridge-based design, as shown in Figure 8 below. More details about the side 
channel and transparent bridge can be found in III.4 Establishing a Side Channel and IV. Improvements to Classical 
Bridge-based 802.1x Bypass. 
Figure 8 – Rogue Device A 
The device consisted of an Intel NUC micro-computer running Fedora 28 and equipped with the following network 
interface cards: 
Page 16 of 37 
§ 
upstream – the upstream interface to connect the rogue device with the authenticator (or switch). We used 
a single Ugreen USB 2.0 to RJ45 Network Adapter for this purpose. 
§ 
PHY – the PHY interface to connect the rogue device with the authenticator (or switch). We used a single 
Ugreen USB 2.0 to RJ45 Network Adapter for this purpose. 
§ 
sidechannel – the sidechannel interface consisted of a single USB LTE modem used to provide a backdoor 
into the device. 
Additionally, the device was equipped with the silentbridge software we wrote as part of this research project. 
III.3 Rogue Device B: Mechanically Assisted Bypass 
Rogue Device B builds off the design of Rogue Device A, keeping all of the key design elements of the first device 
while adding two physical A/B Ethernet splitters to bypass the device entirely. When the splitters are in position A, 
they connect directly to each another using an ethernet patch cable. This causes the device acts as an ethernet 
extender, bypassing the network interfaces of the rogue device entirely. 
Figure 9 – Rogue Device B 
When the splitters are in position B, ethernet traffic passes directly to the upstream and PHY interfaces of the rogue 
device. Specifically, placing both splitters in position B connects the upstream interface to the authenticator, and 
connects the PHY interface to the supplicant. 
Page 17 of 37 
Figure 10 – Rogue Device B 
Both A/B splitters can be operated independently of one another. To implement this functionality, we modified a 
pair of MT-VIKI FBA_MT-RJ45-2M RJ-45 ethernet splitters to each be controlled by a pair of 12mm, 24V solenoids. 
The solenoids were controlled by an Arduino compatible microcontroller connected to the rogue device over serial 
connection. 
We recognize that this may not be the most efficient way of controlling the device, but designing an Ethernet relay 
free of impedance issues was beyond the scope of this research. 
III.4 Establishing a Side Channel 
Establishing a side channel to remotely access the device is required to perform the Rogue Gateway and Bait n Switch 
attacks we describe, and gives us a way of controlling the rogue device even when it is not connected to the target 
network. 
We equipped both rogue devices with Linux-compatible LTE modems configured to obtain an IP address on boot. 
We then configured the devices to allow remote access through the LTE modem using a reverse SSH tunnel to an 
SSH redirector, as shown in Figure 11 below. 
Page 18 of 37 
Figure 11 – Establishing a side channel using a reverse SSH tunnel over LTE 
In this configuration, the rogue device initiates a reverse SSH tunnel from the sidechannel interface to the redirect 
on boot. The redirector then forwards incoming SSH connections through the reverse tunnel to the rogue device. 
We followed the configuration described by Stanislav Sinyagin in his blog posts Call Home SSH Scripts and Improved 
Call Home SSH Scripts [26][27].  
III.5 Putting It All Together 
The full lab setup is shown in the diagrams below. The first configuration uses Rogue Device A and is shown in Figure 
12 below.  
Page 19 of 37 
Figure 12 – the complete lab environment (using Rogue Device A) 
The second configuration uses Rogue Device B and is shown in Figure 13 below. 
Figure 13 – the complete lab environment (using Rogue Device B) 
Page 20 of 37 
IV. Improvements to Classical Bridge-based 802.1x Bypass  
One of the first steps we took in exploring this topic was attempting to recreate the classical bridge-based 802.1x 
developed by Alva Duckwall [4]. As we mentioned in II.2 The Current State of Wired Port Security, this attack uses a 
transparent bridge to silently introduce a rogue device between the authenticator and the supplicant [4]. The ability 
to interact with the network is granted by using iptables to source NAT (SNAT) traffic originating from the device [4]. 
To reduce risk of discovery, iptables is used to prevent the rogue device from using a source port that is already in 
use by the supplicant [4]. Additionally, a hidden SSH service is created on the rogue device by using iptables to 
forward traffic destined for the supplicant’s IP address on a specific port to the rogue device on port 22 [4].  
In this section we’ll discuss the improvements we made to this original attack, all of which were developed during 
the process of recreating it. 
Leveraging Native EAPOL Forwarding 
One of the most immediate drawbacks to the traditional bridge-based approach is that the Linux kernel will not 