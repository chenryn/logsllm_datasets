title:WINNIE : Fuzzing Windows Applications with Harness Synthesis and
Fast Cloning
author:Jinho Jung and
Stephen Tong and
Hong Hu and
Jungwon Lim and
Yonghwi Jin and
Taesoo Kim
WINNIE: Fuzzing Windows Applications with
Harness Synthesis and Fast Cloning
Jinho Jung, Stephen Tong, Hong Hu†, Jungwon Lim, Yonghwi Jin, Taesoo Kim
†Pennsylvania State University
Georgia Institute of Technology
Abstract—Fuzzing is an emerging technique to automatically
validate programs and uncover bugs. It has been widely used
to test many programs and has found thousands of security vul-
nerabilities. However, existing fuzzing efforts are mainly centered
around Unix-like systems, as Windows imposes unique challenges
for fuzzing: a closed-source ecosystem, the heavy use of graphical
interfaces and the lack of fast process cloning machinery.
In this paper, we propose two solutions to address the
challenges Windows fuzzing faces. Our system, WINNIE, first
tries to synthesize a harness for the application, a simple program
that directly invokes target functions, based on sample executions.
It then tests the harness,
instead of the original complicated
program, using an efficient implementation of fork on Windows.
Using these techniques, WINNIE can bypass irrelevant GUI code
to test logic deep within the application. We used WINNIE to fuzz
59 closed-source Windows binaries, and it successfully generated
valid fuzzing harnesses for all of them. In our evaluation, WINNIE
can support 2.2× more programs than existing Windows fuzzers
could, and identified 3.9× more program states and achieved
26.6× faster execution. In total, WINNIE found 61 unique bugs
in 32 Windows binaries.
I.
INTRODUCTION
Fuzzing is an emerging software-testing technique for
automatically validating program functionalities and uncovering
security vulnerabilities [42]. It randomly mutates program
inputs to generate a large corpus and feeds each input to the
program. It monitors the execution for abnormal behaviors,
like crashing, hanging, or failing security checks [56]. Recent
fuzzing efforts have found thousands of vulnerabilities in open-
source projects [12, 28, 52, 62]. There are continuous efforts
to make fuzzing faster [4, 9, 53] and smarter [60, 65, 67].
However, existing fuzzing techniques are mainly applied to
Unix-like OSes, and few of them work as well on Windows
platforms. Unfortunately, Windows applications are not free
from bugs. Recent report shows that in the past 12 years,
70% of all security vulnerabilities on Windows systems are
memory safety issues [43]. In fact, due to the dominance of
Windows operating system, its applications remain the most
lucrative targets for malicious attackers [10, 17, 18, 48]. To
bring popular fuzzing techniques to the Windows platform, we
investigate common applications and state-of-the-art fuzzers,
and identify three challenges of fuzzing applications on
Windows: a predominance of graphical applications, a closed-
source ecosystem (e.g., third-party or legacy libraries), and the
lack of fast cloning machinery like fork on Unix-like OSes.
Network and Distributed Systems Security (NDSS) Symposium 2021
21-25  February  2021, Virtual  
ISBN  1-891562-66-5
https://dx.doi.org/10.14722/ndss.2021.24334
www.ndss-symposium.org
Fig. 1: Architecture of XnView on Windows. The program accepts
the user input via the GUI. The main executable parses the received
path and dynamically loads the library to process the input. A fuzzing
harness bypasses the GUI to reach the functionality we wish to test.
Windows applications heavily rely on GUIs (graphical user
interfaces) to interact with end-users, which poses a major
obstacle to fuzzing. As shown in Figure 1, XnView [64] requires
the user to provide a file through the graphical dialog window.
When the user specifies the file path, the main executable
parses the file, determines which library to delegate to, and
dynamically loads the necessary library to handle the input.
Although some efforts try to automate the user interaction [7],
the execution speed is much slower than ordinary fuzzing.
For example, fuzzing GUI applications with AutoIt yields
only around three executions per second [20], whereas Linux
fuzzing often achieves speeds of more than 1,000 executions
per second. Speed is crucial for effective fuzzing, and this
slow-down renders fuzzing GUI application impractical.
The general way to overcome the troublesome GUI is
to write a simple program, called a harness, to assist with
fuzzing. A harness replaces the GUI with a CLI (command-
line interface), prepares the execution context such as arguments
and memory, and invokes the target functions directly. In this
way, we can test the target program without any user interaction.
For example, with a harness that receives the input path from
the command line and loads the decoder library, we can test
XnView without worrying about the dialog window. Recent
work has even explored generating harnesses automatically for
open-source programs [8, 35].
Nevertheless, Windows fuzzing still relies largely on human
effort to create effective harnesses because most Windows
programs are closed-source, commercial-off-the-shelf (COTS)
software [3, 21, 44, 55, 61]. Existing automatic harness
synthesis methods require to access the source code, and thus
cannot handle closed-source programs easily [8, 35]. Without
the source code, we have little knowledge of the program’s
internals, like the locations of interesting functions and their
prototypes. Since manual analysis is error-prone and unscalable
to a large number of programs, we need a new method to
generate fuzzing harnesses directly from the binary.
ldf_jpm.dllzlib1.dlllibmpg.dllInput parserImage readerXnView.exeMulti-mediaArchiveMovieSoundNetworkPluginImageGUIdialogwindowuserinput pathGUIMain executableLibrariesUser interactionFinally, Windows lacks the fast cloning machinery (e.g.,
fork syscall) that greatly aids fuzzing on Unix-like OSes. Linux
fuzzers like AFL place a fork-server before the target function,
and subsequent executions reuse the pre-initialized state by
forking. The fork-server makes AFL run 1.5×–2× faster on
Linux [70]. fork also improves the stability of testing as each
child process runs in its own address space, containing any
side-effects, like crashes or hangs. However, the Windows
kernel does not expose a clear counterpart for fork, nor any
suitable alternatives. As a result, fuzzers have to re-execute
the program from the beginning for each new input, leading
to a low execution speed. Although we can write a harness
to test the program in a big loop (aka., persistent mode [68]),
testing many inputs in one process harms stability. For example,
each execution may gradually pollute the global program state,
eventually leading to divergence and incorrect behavior.
We propose an end-to-end system, WINNIE, to address
the aforementioned challenges and make fuzzing Windows
programs more practical. WINNIE contains two components:
a harness generator that automatically synthesizes harnesses
from the program binary alone, and an efficient Windows fork-
server. To construct plausible harnesses, our harness generator
combines both dynamic and static analysis. We run the target
program against several inputs, collect execution traces, and
identify interesting functions and libraries that are suitable for
fuzzing. Then, our generator searches the execution traces to
collect all function calls to candidate libraries, and extracts
them to form a harness skeleton. Finally, we try to identify the
relationships between different function calls and arguments
to build a full harness. Meanwhile, to implement an efficient
fork-server for Windows systems, we identified and analyzed
undocumented Windows APIs that effectively support a Copy-
on-Write fork operation similar to the corresponding system
call on Unix systems. We established the requirements to
use these APIs in a stable manner. The availability of fork
eliminates the need for existing, crude fuzzing techniques like
persistent mode. To the best of our knowledge, this is the first
practical counterpart of fork on Windows systems for fuzzing.
We implemented WINNIE in 7.1K lines of code (LoC).
We applied WINNIE on 59 executables,
including Visual
Studio, ACDSee, ultraISO and EndNote. Our harness generator
automatically synthesized candidate harnesses from execution
traces, and 95% of them could be fuzzed directly with only
minor modifications (i.e., ≤ 10 LoC). Our improved fuzzer
also achieved 26.6× faster execution and discovered 3.6×
more basic blocks than WinAFL, the state-of-the-art fuzzer on
Windows. By fuzzing these 59 harnesses, WINNIE successfully
found 61 bugs from 32 binaries. Out of the 59 harnesses,
WinAFL only supported testing 29.
source Windows applications;
In summary, we make the following contributions:
• We identified the major challenges of fuzzing closed-
• We developed WINNIE, which can automatically generate
• We implemented the first efficient Windows fork-server;
• WINNIE successfully generated efficient harnesses for 59
harnesses for Windows binaries to bypass GUI code;
Windows binaries and found 61 bugs in 32 binaries.
To facilitate future research, we have open-sourced WINNIE at
https://github.com/sslab-gatech/winnie.
2
Fig. 2: Fuzzing overview. (1) The fuzzer maintains a queue of inputs.
Each cycle, (2) it picks one input from the queue and (3) modifies it
to generate a new input. (4) It feeds the new input into the fuzzed
program and (5) records the code coverage. (6) If the execution triggers
more coverage, the new input is added back into the queue.
II. BACKGROUND: WHY HARNESS GENERATION?
Fuzzing is a popular automated technique for testing soft-
ware. It generates program inputs in a pseudo-random fashion
and monitors program executions for abnormal behaviors (e.g.,
crashes, hangs or assertion violations). Since it was introduced,
fuzzing has found tens of thousands of bugs [27].
Most popular fuzzers employ greybox, feedback-guided
fuzzing. Under this paradigm, fuzzers treat programs like black
boxes, but also rely on light-weight instrumentation techniques
to collect useful feedback (e.g., code coverage) from each run.
The feedback is used to measure how an input helps explore
the program’s internal states. Thus, a fuzzer can gauge how
effective an input is at eliciting interesting behaviors from
the program. Intuitively, since most bugs lie in the relatively
complicated parts of code, the feedback guides the fuzzer
towards promising parts of the program. This gives greybox
fuzzers a decisive advantage over black-box fuzzers which
blindly generate random inputs without any runtime feedback.
AFL [69], a popular Linux fuzzer, exemplifies greybox
fuzzing in practice. Figure 2 depicts AFL’s fuzzing process.
The testing process is similar to a genetic algorithm. It proceeds
iteratively, mutating and testing new inputs each round. Inputs
which elicit bugs (i.e., crashes or hangs) or new code coverage
from the program are selected for further testing, while other
uninteresting inputs are discarded. Across many cycles, AFL
learns to produce interesting inputs as it expands the code
coverage map. Although simple, this strategy is surprisingly
successful: several recent advanced fuzzers [4, 9, 14] follow the
same high-level process. Overall, AFL-style, greybox fuzzing
has proven extremely successful on Linux systems.
Although most recent research efforts focus on improving
fuzzing Linux applications [4, 9, 14, 22, 39, 50, 69], Windows
programs are also vulnerable to memory safety issues. Past
researchers have uncovered many vulnerabilities by perform-
ing a manual audit [43]. In fact, Windows applications are
especially interesting because they are commonly used on end-
user systems. These systems are prime targets for malicious
attackers [10, 17]. Automatic Windows testing would pave a
way for researchers to look for bugs in many Windows programs
while limiting manual code review. In turn, this would help
secure the Windows ecosystem.
Unfortunately, no fuzzers can test Windows applications as
effectively as AFL can test Linux applications. Table I compares
Linux AFL with popular Windows fuzzers. WinAFL is a fork of
AFL ported for Windows systems [57] and supports feedback-
➀➂➅ ➁➃fuzzercullselectinsertmutate➄coveragemainfuncfuzzed executionentryfork servermainfuncmainfunctargetFuzzer
Feedback
Forkserver
Open-source
Windows
AFL WinAFL HonggFuzz
✔
✔
✔
✗
✔
✗
✔
✔
✗
✗
✔
✔
Peach WINNIE
✗
✗
✗
✔
✔
✔
✔
✔
TABLE I: Comparison between various Windows fuzzers and
Linux AFL. We compare several key features that we believe are
essential to effective fuzzing. WINNIE aims to bring the ease and
efficiency of the Linux fuzzing experience to Windows systems.
driven fuzzing. HonggFuzz supports Windows, but only for
fuzzing binaries in dumb mode, i.e., without any coverage
feedback [25]. Peach is another popular fuzzer with Windows
support but requires users to write specifications based on their
knowledge of the fuzzed program [16]. Overall, although there
are several rudimentary fuzzers for Windows systems, we find
that none offers fast and effortless testing in practice. In this
paper, we aim to address these concerns and make Windows
fuzzing truly practical. To do so, we must first examine what
the major obstacles are.
A. The GUI-Based, Closed-Source Software Ecosystem
Compared to Linux programs, Windows applications have
two distinguishing features: closed-source and GUI-based. First,
many popular Windows applications are commercial products
and thus closed-source, like Microsoft Office, Adobe Reader,
Photoshop, WinRAR, and Visual Studio. As these commercial
applications contain proprietary intellectual property, most
of them are very unlikely to be open-sourced in the future.
Second, Windows software is predominantly GUI-based. Unlike
on Linux which features a rich command-line experience,
essentially all of the aforementioned Windows programs are
GUI applications. Due to the closed nature of the ecosystem,
vendors rarely have an incentive to provide a command-line
interface, as most end-users are most familiar with GUIs. In
other words, the only way to interact with most programs’ core
functionality is through their GUI.
GUI applications pose a serious obstacle to effective fuzzing.
First, GUI applications typically require user interaction to
get inputs, and cannot be tested automatically without human
intervention. Bypassing the GUI is nontrivial: it is slow to
fully automate Windows GUIs with scripting [20]; meanwhile
avoiding the user interface altogether usually requires a deep
understanding of the application’s codebase, as programmers
often intertwine the asynchronous GUI code with the input
processing code [30]. Second, GUI applications are slow to
boot, wasting a lot of time on GUI initialization. Table II
shows the startup times of GUI applications compared to a
fully-CLI counterpart. In our experiments, GUI code often
brought fuzzing speeds down from 10 or more executions per
second to less than one. Naturally, fuzzing a CLI version of the
application is absolutely essential. WinAFL [57] acknowledges
this issue, and recommends users to create fuzzing harnesses.
B. Difficulty in Creating Windows Fuzzing Harnesses
It is a common practice to write fuzzing harnesses to test
large, complicated software [8, 35]. In general, a harness is
a relatively small program that prepares the program state
for testing deeply-embedded behaviors. Unlike the original
117 4075 34.8×(cid:75) Tiled
15 1105 73.6×(cid:75) ezPDF
510 31.8×(cid:75) EndNote
Program Harness GUI Ratio Program Harness GUI Ratio
720 25.7×(cid:75)
HWP-jpeg
184 4397 23.8×(cid:75)
Gomplayer
30 1461 23.8×(cid:75)
ACDSee
TABLE II: Execution times (ms) with and without GUI. GUI code
dominates fuzzing execution time (35× slower on average). Thus,
fuzzing harnesses are crucial to effective Windows application fuzzing.
We measured GUI execution times by hooking GUI initialization code.
28
16
Attributes
Binary
Target OS
Control-flow analysis
Data-flow analysis
Input analysis
Ptr / Struct analysis
Fudge
✗
Linux
✔
✔
Heuristic
Heuristic
FuzzGen
✗
Linux/Android
✔
✔
-
Value-set analysis
Winnie
✔
Windows
✔
✗
Dynamic trace
Heuristic
TABLE III: Comparison of harness generation techniques. Most
importantly, WINNIE supports closed-source applications by ap-
proximating source-level analyses. Fine-grained data-flow tracing is
impractical without source code as it incurs a large overhead.
program, we can flexibly customize the harness to suit our
fuzzing needs, like bypassing setup code or invoking interesting
functions directly. Hence, harnesses are a common tactic for
enhancing fuzzing efficacy in practice. For instance, Google
OSS-Fuzz [29] built a myriad of harnesses on 263 open-source
projects and found over 15,000 bugs [27].
Harnesses are especially useful when testing GUI-based
Windows applications. First, we can program the harness to
accept input from a command-line interface, thus avoiding user
interaction. This effectively creates a dedicated CLI counterpart
for the target program which existing fuzzers can easily handle.
Second, using a harness avoids wasting resources on GUI
initialization, focusing solely on the functionality at the heart
of the program (e.g., file parsing) [3, 44, 55].
Unfortunately, Windows fuzzing faces a dilemma: due
to the nature of the Windows ecosystem, effective fuzzing
harnesses are simultaneously indispensable yet very difficult
to create. In addition, due to the prevalence of closed-source
applications, many existing harness generation solutions are
inadequate [8, 35]. As a result, harness creation often requires
in-depth reverse engineering by an expert, a serious human
effort. In practice, this is a serious hindrance to security
researchers fuzzing Windows applications.
Fudge and FuzzGen. Fudge [8] and FuzzGen [35] aim
to automatically generate harnesses for open-source projects.
Fudge generates harnesses by essentially extracting API call
sequences from existing source code that uses a library.
Meanwhile, FuzzGen relies on static analysis of source code
to infer a library’s API, and uses this information to generate
harnesses. Table III highlights the differences between the
existing solutions and WINNIE. Most crucially, Fudge and
FuzzGen generally target open-source projects belonging to
the Linux ecosystem, but WINNIE aims specifically to fuzz
COTS, Windows software. Although it may seem that Linux
solutions should be portable to Windows systems, the GUI-
based, closed-source Windows software ecosystem brings new,
unique challenges. As a result, these tools cannot be used to
generate harnesses for Windows applications.
3
Fudge, FuzzGen, and WINNIE all employ heuristics to infer
API control-flow and data-flow relationships. However, whereas
Fudge and FuzzGen can rely on the availability of source
code, WINNIE cannot as a large amount of API information is
irrevocably destroyed during the compilation process, especially
under modern optimizing compilers. Thus, although Fudge and
FuzzGen’s analyses are more detailed and fine-grained, they
are crucially limited by their reliance on source code. This is
the fundamental reason why these existing solutions are not
applicable to Windows fuzzing. Hence, a new set of strategies
must be developed to effectively generate fuzzing harnesses in
the absence of source code.
III. CHALLENGES AND SOLUTIONS
WINNIE’s goal is to automate the process of creating
fuzzing harnesses in the absence of source code. From our
experience, even manual harness creation is complicated
and error-prone. Thus, before exploring automatic harness
generation, we will first discuss several common difficulties
researchers encounter when creating harnesses manually.
A. Complexity of Fuzzing Harnesses
Fuzzing harnesses must replicate all behaviors in the original
program needed to reach the code that we want to test. These
behaviors could be complex and thus challenging to capture
in the harness. For instance, a harness may have to initialize
and construct data structures and objects, open file handles,
and provide callback functions. We identified four major steps
to create a high-quality harness: 1 target discovery; 2 call-
sequence recovery; 3 argument recovery; 4 control-flow and
data-flow dependence reconstruction.
is to test
the JPM parser,
To illustrate these steps in action, we look into a typical
fuzzing harness, shown in Figure 3. XnView is an image
organizer, viewer and editor application [64]. Although the
original program supports more than 500 file formats [63],
our goal
implemented in the
library ldf_jpm.dll. Figure 3 shows the corresponding harness.
First, the harness declares callback functions (lines 2-3), and
initializes variables (lines 6 and 9). Second, the harness imitates
the decoding logic of the original program: it opens and
reads the input file (line 10), retrieves properties (lines 14-17),
decodes the image (line 20), and closes it (line 23). Lastly, the
harness declares the required variables (line 9) and uses them
appropriately (lines 15, 17, 20 and 23). Conditional control
flow based on return values is also considered to make the
program exit gracefully upon failures (line 11).
1 Target discovery. The first step of fuzzing is to identify
promising targets that handle user inputs. This process can be
time-consuming as, depending on the program, the input may
be specified in a variety of ways, such as by filename, by file
descriptor, or by file contents (whole or partial). In this example,
the researcher should identify that the API JPM_Document_Start
from ldf_jpm.dll library is responsible for accepting the user
input through a pointer of an opened file descriptor (line 10).
2 Call-sequence recovery. The harness must reproduce the
correct order of all function calls relevant to the target library.
In this example, there are total 10 API calls to be reconstructed
in the full harness. Note that static analysis alone is not enough
1 // 1) Declare structures and callbacks