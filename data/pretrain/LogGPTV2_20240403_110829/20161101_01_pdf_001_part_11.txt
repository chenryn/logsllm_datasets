HOT Update
Heap Page Index Page
PageHead PageHead
LinePoint LinePoint
Free ItemPoint
1 2
Space
Tuple2 HEAP_HOT_TUPLE
Tuple1 t_ctid, HEAP_HOT_UPDATED
HOT Update
Heap Page Index Page
PageHead PageHead
LinePoint LinePoint
LP_REDIRECT Free ItemPoint
1 2
Space
Tuple2 HEAP_HOT_TUPLE
Tuple1 Dead,vacuumed
HOT Update
 利用pageinspect extension 来观察HOT
 postgres=# create extension pageinspect;
 postgres=# create table hot_test (id int primary key,info text);
 postgres=# insert into hot_test values (1,'digoal');
 -- 因为是从0号page开始插入, 这里就省去了查询ctid等过程.直接切入0号page.
 -- 当前的page信息
 postgres=# select * from page_header(get_raw_page('hot_test',0));
 lsn | tli | flags | lower | upper | special | pagesize | version | prune_xid
 2/75B27878 | 1 | 0 | 28 | 8152 | 8192 | 8192 | 4 | 0
 -- 当前的item信息
 postgres=# select * from heap_page_items(get_raw_page('hot_test',0));
 lp | lp_off | lp_flags | lp_len | t_xmin | t_xmax | t_field3 | t_ctid | t_infomask2 | t_infomask |
t_hoff | t_bits | t_oid
 1 | 8152 | 1 | 35 | 1864 | 0 | 0 | (0,1) | 2 | 2050 | 24 | |
HOT Update
 -- 当前索引的page信息
 postgres=# select * from page_header(get_raw_page('hot_test_pkey',0));
 lsn | tli | flags | lower | upper | special | pagesize | version | prune_xid
 2/75B278B0 | 1 | 0 | 48 | 8176 | 8176 | 8192 | 4 | 0
 -- 当前索引的item信息
 postgres=# select * from heap_page_items(get_raw_page('hot_test_pkey',0));
 lp | lp_off | lp_flags | lp_len | t_xmin | t_xmax | t_field3 | t_ctid | t_infomask2 | t_infomask |
t_hoff | t_bits | t_oid
 1 | 12642 | 2 | 2 | | | | | | | | |
 2 | 2 | 0 | 0 | | | | | | | | |
 3 | 1 | 0 | 0 | | | | | | | | |
 4 | 0 | 0 | 0 | | | | | | | | |
 5 | 1 | 0 | 0 | | | | | | | | |
 6 | 0 | 0 | 0 | | | | | | | | |
HOT Update
 -- 更新一次后 itemID中的信息
 postgres=# update hot_test set info='new' where id=1;
 -- item信息 tuple中的信息,对应
第一幅图
 postgres=# select * from heap_page_items(get_raw_page('hot_test',0));
 lp | lp_off | lp_flags | lp_len | t_xmin | t_xmax | t_field3 | t_ctid | t_infomask2 | t_infomask |
t_hoff | t_bits | t_oid
 1 | 8152 | 1 | 35 | 1864 | 1867 | 0 | (0,2) | 16386 | 258 | 24 | |
 2 | 8120 | 1 | 32 | 1867 | 0 | 0 | (0,2) | 32770 | 10242 | 24 | |
 -- 索引的item信息(没有变化)
 postgres=# select * from heap_page_items(get_raw_page('hot_test_pkey',0));
 lp | lp_off | lp_flags | lp_len | t_xmin | t_xmax | t_field3 | t_ctid | t_infomask2 | t_infomask |
t_hoff | t_bits | t_oid
 -- 内容略
HOT Update
itemID中的信息
 -- vacuum 后
对应第二幅图
 postgres=# vacuum hot_test ;
 VACUUM
 postgres=# select * from heap_page_items(get_raw_page('hot_test',0));
 lp | lp_off | lp_flags | lp_len | t_xmin | t_xmax | t_field3 | t_ctid | t_infomask2 | t_infomask |
t_hoff | t_bits | t_oid
 1 | 2 | 2 | 0 | | | | | | | | |
 2 | 8160 | 1 | 32 | 1867 | 0 | 0 | (0,2) | 32770 | 10498 | 24 | |
 -- 多次更新后
 postgres=# update hot_test set info='new' where id=1;
 postgres=# update hot_test set info='new' where id=1;
 postgres=# update hot_test set info='new' where id=1;
 postgres=# update hot_test set info='new' where id=1;
 postgres=# update hot_test set info='new' where id=1;
 postgres=# update hot_test set info='new' where id=1;
HOT Update
 postgres=# select * from heap_page_items(get_raw_page('hot_test',0));
 lp | lp_off | lp_flags | lp_len | t_xmin | t_xmax | t_field3 | t_ctid | t_infomask2 | t_infomask |
t_hoff | t_bits | t_oid
 1 | 2 | 2 | 0 | | | | | | | | |
 2 | 8160 | 1 | 32 | 1867 | 1868 | 0 | (0,3) | 49154 | 9474 | 24 | |
 3 | 8128 | 1 | 32 | 1868 | 1869 | 0 | (0,4) | 49154 | 9474 | 24 | |
 4 | 8096 | 1 | 32 | 1869 | 1870 | 0 | (0,5) | 49154 | 9474 | 24 | |
 5 | 8064 | 1 | 32 | 1870 | 1871 | 0 | (0,6) | 49154 | 9474 | 24 | |
 6 | 8032 | 1 | 32 | 1871 | 1872 | 0 | (0,7) | 49154 | 9474 | 24 | |
 7 | 8000 | 1 | 32 | 1872 | 1873 | 0 | (0,8) | 49154 | 8450 | 24 | |
 8 | 7968 | 1 | 32 | 1873 | 0 | 0 | (0,8) | 32770 | 10242 | 24 | |
注意redirect后,lp_off的值表示第几条itemid, 而不
是offset_bytes.
HOT Update
 -- vacuum后
 postgres=# vacuum hot_test ;
 postgres=# select * from heap_page_items(get_raw_page('hot_test',0));
 lp | lp_off | lp_flags | lp_len | t_xmin | t_xmax | t_field3 | t_ctid | t_infomask2 | t_infomask |
t_hoff | t_bits | t_oid
 1 | 8 | 2 | 0 | | | | | | | | |
 2 | 0 | 0 | 0 | | | | | | | | |
 3 | 0 | 0 | 0 | | | | | | | | |
 4 | 0 | 0 | 0 | | | | | | | | |
 5 | 0 | 0 | 0 | | | | | | | | |
 6 | 0 | 0 | 0 | | | | | | | | |
 7 | 0 | 0 | 0 | | | | | | | | |
 8 | 8160 | 1 | 32 | 1873 | 0 | 0 | (0,8) | 32770 | 10498 | 24 | |
 Use pageinspect EXTENSION view PostgreSQL Page's raw infomation
 http://blog.163.com/digoal@126/blog/static/16387704020114273265960/
Index
 为什么要使用concurrently创建索引?
 如果不使用concurrently, 创建索引时不允许对表进行增删改操作, 只允许查询操作.
 http://blog.163.com/digoal@126/blog/static/163877040201231781923116/
 索引快还是全表扫描快?
 取决于缓存的大小,存储的IOPS能力, 是否使用索引排序以及SQL需要发起的IO次数(索引,
离散IO. 全表扫描, 顺序IO)等.
 我建的索引到底有没有被系统用到, 还是说它就是个费索引
 explain
 pg_statio_all_indexes
 For each index in the current database, the table and index OID, schema, table
and index name, numbers of disk blocks read and buffer hits in that index.
 pg_stat_all_indexes
 For each index in the current database, the table and index OID, schema, table
and index name, number of index scans initiated on that index, number of index
entries returned by index scans, and number of live table rows fetched by simple
index scans using that index.
Full Text Search
 本期培训略
 支持PostgreSQL的全文检索软件如sphinx.
Concurrency Control
EveryOne Must Know
Bussiness Rules &
PostgreSQL
ISOLATION LEVEL
Concurrency Control
 SQL标准定义的隔离级别和读保护对应关系
 注意SQL标准: minimum protections each isolation level must provide
 PostgreSQL实现的隔离级别和读保护对应关系
Isolation Level Dirty Read NonRepeatable Read Phantom Read
Read uncommitted Not possible Possible Possible
Rea d committed Not possible Possible Possible
Rep eatable read Not possible Not possible Not possible
Seri alizable Not possible Not possible Not possible
 Real Serializable 除此以外还实现了并行事务串行化的组合检测.
Concurrency Control
 dirty read
 A transaction reads data written by a concurrent uncommitted transaction.
 nonrepeatable read
 A transaction re-reads data it has previously read and finds that data has been modified by
another transaction (that committed since the initial read).
 即一个事务中分两次执行同样的SQL, 查询某数据时, 前后得到的结果不一致. 也就是说在
这两个SQL之间有另一个事务把该数据修改并提交了.
 phantom read
 A transaction re-executes a query returning a set of rows that satisfy a search condition and
finds that the set of rows satisfying the condition has changed due to another recently-
committed transaction.
 即一个事务中分两次执行了同样的SQL, 查询一个区间的数据, 前后得到的结果不一致. 后
面的SQL可能得到更多的数据, 例如在这两个SQL之间另一个事务插入了一些在这个查询
的区间范围内的数据并提交了.
Concurrency Control
 为什么PostgreSQL实现的隔离级别对读保护超出了SQL标准定义的最小保护
 PostgreSQL并发控制的手段, MVCC
 xmin, xmax, xid
 INSERT, DELETE, UPDATE
 INSERT, xmin = current xid
 DELETE, xmax = current xid
 UPDATE, old tuple xmax = current xid, new tuple xmin = current xid
 因此PostgreSQL很容易通过MVCC来实现不同的隔离级别.
 可以理解为如下, 当然内部实现比这复杂得多
 read committed
 拿系统已分配出去的最后一个事务ID作为比较, 去除未提交的那些事务ID, 能见到所有小于等于
这个事务ID的所有行.
 repeatable read
 记录下事务开始时有哪些未提交的事务，事务中执行的SQL拿事务开始时的事务ID作为比较, 去
除事务开始时未提交的事务, 能见到的记录范围是小于等于这个事务ID的所有行.
Concurrency Control
 txid_current_snapshot()函数
Name Description
Earliest transaction ID (txid) that is still active. All earlier transactions will either be
xmin
committed and visible, or rolled back and dead.
First as-yet-unassigned txid. All txids greater than or equal to this are not yet started as of
xmax
the time of the snapshot, and thus invisible.
Active txids at the time of the snapshot. The list includes only those active txids between
xmin and xmax; there might be active txids higher than xmax. A txid that is xmin  create table tbl_user (id int,firstname varchar(64),lastname
varchar(64),corp varchar(64),age int);
 digoal=> insert into tbl_user values (1,'zhou','digoal','sky-mobi',27);
 digoal=> select ctid,xmin,xmax,cmin,cmax,* from tbl_user;
 ctid | xmin | xmax | cmin | cmax | id | firstname | lastname | corp | age
 (0,1) | 3909 | 0 | 0 | 0 | 1 | zhou | digoal | sky-mobi | 27
 Session B:
 digoal=> select ctid,xmin,xmax,cmin,cmax,* from tbl_user;
 ctid | xmin | xmax | cmin | cmax | id | firstname | lastname | corp | age
 (0,1) | 3909 | 0 | 0 | 0 | 1 | zhou | digoal | sky-mobi | 27
Concurrency Control
 Session A :
 digoal=> begin;
 digoal=> update tbl_user set id=2 where id=1;
 digoal=> select ctid,xmin,xmax,cmin,cmax,* from tbl_user;
 ctid | xmin | xmax | cmin | cmax | id | firstname | lastname | corp | age
 (0,2) | 3910 | 0 | 0 | 0 | 2 | zhou | digoal | sky-mobi | 27
 digoal=> select txid_current_snapshot();
 3910:3914:
 Session B :
 select ctid,xmin,xmax,cmin,cmax,* from tbl_user;
 ctid | xmin | xmax | cmin | cmax | id | firstname | lastname | corp | age
 (0,1) | 3909 | 3910 | 0 | 0 | 1 | zhou | digoal | sky-mobi | 27
 digoal=> select txid_current_snapshot();
 3910:3914:3910
Concurrency Control
 read committed 隔离级别用例
 BEGIN;
 UPDATE accounts SET balance = balance + 100.00 WHERE acctnum = 12345;
 UPDATE accounts SET balance = balance - 100.00 WHERE acctnum = 7534;
 COMMIT;
 read committed隔离级别不适合以下场景
 -- assume website is a two-row table with website.hits equaling 9 and 10
 BEGIN;
 UPDATE website SET hits = hits + 1;
 -- 9改为10, 10改为11, 同时这两行被加锁
 -- run from another session: DELETE FROM website WHERE hits = 10;
 -- 另一个session它不能看到未提交的记录, 它等待的锁是老记录的行锁, hits实际上已经被修改为11, 也
就是当前有两条记录
 -- xmin 有值,xmax 有值, 10 -- xmin 有值,xmax=0, 11 -- 另一个session在等待的是xmin,xmax都有值的那
条老的记录的锁释放.
 COMMIT;
 -- 当事务1提交后, 另一个事务同时获得了这个锁, 但是它所看到的这条记录的hits目前是11. 索引会导
致delete0条记录的情况.
Concurrency Control
 Repeatable Read Isolation Level
 事务开始后同样的SQL不管执行多少次都返回同样的结果.
 但是repeatable read事务不能修改在repeatable read事务执行过程中被其他事务修改并提交
了的记录. 否则会抛出异常.
 ERROR: could not serialize access due to concurrent update
 例如 :
 postgres=# insert into test values (1,'digoal1'),(100,'digoal100');
 commit;
 SESSION A:
 postgres=# begin transaction isolation level repeatable read;
 postgres=# select * from test where id=1;
 id | info
 ----+---------
 1 | digoal1
Concurrency Control
 SESSION B:
 postgres=# begin;
 postgres=# update test set info='new_digoal' where id=1;
 postgres=# commit;
 SESSION A:
 postgres=# select * from test where id=1;
 id | info
 ----+---------
 1 | digoal1
 postgres=# select count(*) from test;
 count
 -------
 2
Concurrency Control
 SESSION B:
 postgres=# begin;
 postgres=# insert into test select generate_series(1000,1100),'digoal';
 INSERT 0 101
 postgres=# end;
 -- 这个在其他数据库(如oracle)中需要serializable read隔离级别才能实现.
 SESSION A:
 postgres=# select count(*) from test;
 count
 -------