neither crashes nor stalls of the RV, unlike prior work that does.
(3) PID-Piper limits the impact of stealthy attacks on the RV
by a factor of 7, compared to the next best technique [13],
and ensures mission success in 100% of cases (prior work
has 0% success rate), and (4) PID-Piper incurs less than 7%
performance overhead, with no increase in mission times.
II. BACKGROUND AND THREAT MODEL
In this section, we ﬁrst discuss the various operations
and modules of RV’s autonomous control logic. Then we
discuss overt and stealthy attacks against RVs, followed by
the limitations of existing techniques. Finally, we present the
differences between FFC and FBC, and the threat model.
A. Robotic Vehicle Control
In this paper, we focus on commodity RVs e.g., delivery
drones, warehouse rovers etc., operating autonomously. An
RV uses many sensors (e.g., GPS, barometer, gyroscope,
Fig. 1: RV’s Autonomous Control Logic
accelerometer, and magnetometer) to capture its current phys-
ical state (e.g., angular and linear position), which are used
to estimate the actuator signals (e.g., motor commands) for
positioning the vehicle in the next state.
RVs use PID control for estimating position (e.g., altitude,
latitude, longitude), and attitude (e.g., yaw, roll, pitch), as
well as correcting position and attitude errors during the
RV mission. Figure 1 (based on ArduPilot [19]) shows an
example of a RV controller. RV controllers consist of two
parts. (i) The position controller takes the target states as
input (i.e., target position, target velocity, position error, and
actual velocity), and calculates the corresponding velocity,
acceleration and ﬁnally, the target angles (i.e., yaw, roll, pitch).
(ii) The attitude controller takes the target attitude as input
(i.e., target angles, target angular velocity, angular error, and
actual angular velocity), and calculates the rotation rates and
the corresponding high level motor commands. In addition
to the inputs shown in the ﬁgure, the RV controller relies
on the P, I, D coefﬁcients that track the control signals and
history of errors between target and actual state. The RV
controller (i.e., PID controller) then performs a series of calcu-
lations (e.g., Target Position→Velocity→Acceleration→Target
Angles. Target Angles→Angular Rotation→rotation rate) to
derive the target angles and motor outputs.
B. Attacks Against RVs and Defense
As RVs rely on sensor measurements for autonomous oper-
ation, attacks on sensors can be debilitating for the RV. Physi-
cal attacks manipulate sensor measurements through physical
means, e.g., gyroscope measurements can be manipulated
through acoustic noise injection [8], and GPS measurements
can be manipulated by transmitting malicious GPS signals [6].
Physical attacks are often launched by injecting false data (a
bias value) to raw sensor measurements [10], [13], [18]. There
are two kinds of physical attacks: (1) Overt, and (2) Stealthy.
Overt attacks inject large bias f into sensor measurements
x : x = x + f to cause an immediate disruption in the RV’s
mission (e.g., drastically deviate a drone from its trajectory
and/or crash it) [8], [9]. Real-time invariant analysis have
been proposed for detecting overt attacks against RVs [10],
[11], [13]. Typically, invariant analysis techniques derive a
model correlating the RV’s sensor inputs with the actuator
outputs. Based on the RV’s current state (e.g., linear and
angular position), the model estimates the system’s real-time
behaviour (i.e., next state). At runtime, if the error between
observed values Vo and model estimated output Vp is > a pre-
deﬁned threshold τ, an alarm is raised. To prevent false alarms
due to transient effects, the comparison is performed in a time
window as shown in the following equation.
Authorized licensed use limited to: Tsinghua University. Downloaded on October 11,2021 at 09:25:09 UTC from IEEE Xplore.  Restrictions apply. 
27
D(t) = true,
if
(cid:2)tj
ti
|Vp − Vo|n > τ .
(1)
D. Feed-Forward vs Feed-Back Control
Unfortunately, attackers can exploit the above attack de-
tection strategy to mount stealthy attacks [18]. Assuming the
attacker is able to determine τ, she can trigger stealthy attacks
in a controlled manner where |Vp − Vo| never exceeds τ.
Because the error remains under the threshold τ at any time,
the attack remains undetected.
In general, the higher the threshold, the greater the disrup-
tion that a stealthy attack can cause. Model based techniques
heavily rely on the model’s accuracy to determine a precise
estimate of the RV’s real-time behaviour. If the model fails to
accurately estimate the RV’s dynamics (e.g., position, attitude),
the system will have to tolerate signiﬁcant errors to avoid
false positives, and hence set a high detection threshold.
Prior work [18] has demonstrated that stealthy attacks on
such models, when performed over a long time, can cause
substantial deviations in the RV’s trajectory.
C. Limitations in Existing Techniques and Motivation
Attack detection techniques for RVs such as Control In-
variants (CI) [10] and Savior [13], enable fail-safe mode
(e.g., landing for drones) once an attack is detected. However,
they cause the mission to be aborted upon detection of an
attack. As RVs are often deployed in critical missions, it is
important to recover from the attacks and complete the mission
successfully. We deﬁne a successful mission as one in which
the RV reaches the planned destination without crashing.
A recent
technique for recovering RVs from attacks is
software sensor based recovery (SRR) technique [10]. SRR
uses system identiﬁcation to construct a model of the RV
that considers controller, actuators and vehicle dynamics. The
system model predicts the RV’s next state given the current
state and target position. The software sensors (i.e., set of pro-
grams that emulate the real sensors such as GPS, gyroscope,
accelerometer) take the system model’s predictions as input,
and derive the measurements similar to the real sensors. A
recovery monitor observes the real sensors and switches to
the software sensors if the difference between the software
sensors and real sensor measurements increases above a pre-
deﬁned threshold, thereby signifying an attack (Equation 1).
However, there are two issues with SRR. First, SRR detects
only abrupt ﬂuctuations in the RV’s trajectory due to overt
attacks, and prevents crashes by transitioning the RV to an
emergency state for a short time. This means that upon an
attack detection, the RV will be placed in a holding state,
and will require manual intervention to successfully complete
the mission. As we show later (Section VI), SRR achieves low
mission success rates in RVs without any manual intervention.
Second, SRR uses a linear state-space model to estimate
the real-time behaviour of RVs. As RVs are non-linear sys-
tems [13], SRR fails to accurately estimate the RV’s dynamics,
as a result of which, it is vulnerable to stealthy attacks. Such
stealthy attacks can result in signiﬁcant deviations of the RV,
and also lead to mission failures (Section II-B).
In non-linear control systems such as RVs, there are two
ways to handle errors due to sensor or environmental noise,
and predict actuator outputs [20]. Feed-Back control (FBC),
or reactive control, measures the error between the target and
actual parameters (Figure 1) and derives appropriate control
inputs to minimize the error. Since all of the noise affecting
an RV is not known apriori (e.g., friction, wind, payload etc.),
FBC measures the error during operation and minimizes its
impact. Therefore, it does not require a precise system model.
Feed-Forward control (FFC), or predictive control, requires
a precise model of the system and the noise affecting it. FFC
uses a noise model to predict the error between the target and
actual parameters, and estimates the system’s response. FFC
directly modiﬁes the control input to account for the error
predicted by the noise model, and prevents the modeled errors
from causing large ﬂuctuations in the actuator output.
Prior techniques that detect attacks against RVs [10], [13],
and the only other recovery technique for RVs, SRR [14],
use an FBC alongside the RV’s PID controller. To the best of
our knowledge, no prior work has evaluated the appropriate
controller design for recovery from attacks in RVs. Therefore,
we evaluate which of the 2 techniques is better for minimizing
the effects of sensor perturbation due to attacks, and recover
the RVs (Section IV). Though it has been observed that an
FFC is better at rejecting sensor noise and correcting it than
an FBC [21], it is not clear how it performs under attacks.
E. Threat Model
We focus on physical attacks that maliciously perturb RV’s
sensor measurements to cause deviations or disruptions in
its mission. These can be either overt or stealthy attacks.
We assume that the attacker has the following capabilities:
(1) Perform sensor spooﬁng attacks on GPS or manipulate
IMU (gyroscope, accelerometer, magnetometer etc.) sensors
of the RV. (2) Snoop on the communication channel between
the RV and the ground control station (GCS), as well as on
sensor measurements, control inputs and outputs of the RV.
The attacker can also arbitrarily manipulate sensor readings to
her desired values, and at any time during the RV’s mission.
However, we exclude attacks that result in persistent drastic
sensor manipulations, as well as attacks that target all the
sensors simultaneously. These attacks have been shown to
be hard to mount
in real world RV mission [8]. Similar
assumptions have been made in prior work [13]. We also
exclude cyber attacks that
target software components or
ﬁrmware, as they can be handled by existing techniques [22].
Further, we assume that the attacker does not have the
following capabilities: (1) write access to the ﬁrmware, (2)
root access to the Operating System (OS). Hence, she cannot
bypass PID-Piper’s checking. Finally, we assume that the
attacker may not poison the training data for the ML models.
III. INITIAL STUDY
Our goal
is to provide recovery for RVs by predicting
the RV’s actuator signals under attacks, and make them
Authorized licensed use limited to: Tsinghua University. Downloaded on October 11,2021 at 09:25:09 UTC from IEEE Xplore.  Restrictions apply. 
28
complete their mission successfully. We present a preliminary
experimental study to understand how attack induced sensor
perturbations cause ﬂuctuations in the PID controller’s outputs.
In the experiment, we performed a mission on a Pixhawk
based drone (Section VI has details), with the following
mission command Arm → Takeoff → Waypoint → Land.
Once the drone attains 5m elevation and cruises towards the
destination, we launched a GPS spooﬁng (overt) attack. The
attack is triggered intermittently for 3-5 seconds throughout
the mission, which lasts for a total of 60 seconds.
(a)
(c)
(b)
(d)
Fig. 2: Parameters of Pixhawk drone under GPS manipulation
attack (a) Position error, (b) Fluctuations in Roll angle, (c) P
coefﬁcient adjustment, (d) Change in rotation rate
High Collinearity in PID parameters Figure 2 shows the
changes in various parameters in the Pixhawk drone under
the attack. Figure 2a shows the position error incurred by the
PID controller due to the attack, while Figure 2b shows the
corresponding output i.e., roll angle estimation. The ﬁgures
show only the straight line part (i.e., the steady state) of the
mission, where the change in roll angle should be near 0 if
there is no position error (i.e., without any attacks), as the
drone is not making any turns. However, as can be seen in
Figure 2a, though the position error pE due to the attack is
small (i.e., between 0 to 0.2 m), the corresponding ﬂuctuations
in the roll angle y are large (i.e., between -10 to 20 degrees),
which deviates the drone signiﬁcantly from its course.
The observations indicate that the PID controller is highly
sensitive to continuous variance inﬂation in sensor measure-
ments. We identiﬁed the reason for this behaviour as high
collinearity in the PID controller’s parameters. The PID
controller performs a series of calculations based on inputs
such as sensor measurements and target state, to derive in-
termediary parameters such as velocity, acceleration, etc., and
estimates the Euler angles (roll, pitch, yaw) (Section II-A).
Collinearity means that one or more of these parameters are
highly correlated with each other, and so a change in any one
parameter leads to changes in all of them [23].
We assess the degree of collinearity between the PID’s pa-
rameters using the Variance Inﬂation Factor (VIF) [23] metric,
which measures variance increase in the output parameter
due to collinear input parameters. VIF(x1) is calculated by
regressing parameter x1 against every other parameter x2..xn.
A VIF value close to 1 indicates low collinearity, while a VIF
value greater than 10 indicates high collinearity [23].
We ﬁnd that position variance, linear and angular position
have the lowest VIF values (ranging from 1 to 1.6), while
velocity, acceleration, angular rotation and angular speed have
the highest VIF values (clustering between 22 to 29). The
parameters with high VIF values experience large ﬂuctuations
due to small variance inﬂation in pE, consequently triggering
a cascading variance inﬂation in the operations of the PID
controller (Section II-A). Therefore, high collinearity in the
PID controller’s parameters triggers large ﬂuctuations in its
outputs due to the attack induced sensor perturbations
Overcompensation Issue in PID The PID controller derives
the actuator output by attempting to reduce the error between
the target state u and the actual state x (Figure 1). For
example, when a drone is cruising in steady state, PID derives
the rotation rate r : r = P ∗ (u − x), and ensures that r
remains constant by adjusting the coefﬁcient P . Figure 2c
shows the P coefﬁcient adjustments under the attack shown
in Figure 2a which induced position error. Before the attack
started (t <10), the PID controller sets the P coefﬁcient to
4 to derive r. As the position error increases starting from
t = 11 due to the attack (Figure 2a), we can see in Figure 2c
that the PID controller persistently adjusts the P coefﬁcient
in order to maintain r at a constant rate. As a result of the
persistent adjustments to the P coefﬁcient, as can be seen in
Figure 2d, the rotation rate increases from 1.6 to 3.2 starting
at t = 11. The increase in rotation rate results in increasing
the thrust, which drifts the drone from its original trajectory.
The PID controller is designed to handle sensor noise and
disturbances such as wind, by adjusting the set of coefﬁcients
(namely P, I, and D), and by modifying the controller’s inputs
to increase/decrease the thrust in order to compensate for the
error. However, the errors between u and x due to sensor noise
are typically transient in nature unlike attacks, which induce
the error systematically. Therefore, systematically induced
sensor perturbations due to attacks cause overcompensation
in the PID controller, resulting in erroneous actuator signals.
IV. DESIGN
In this section, we present
the various design choices
we make to build an attack resilient controller for RVs by
addressing the issues discussed in Section III.
A. Modeling Robotic Vehicles
There are two options for building a resilient controller. The
ﬁrst option is to modify the original PID controller to address
the high collinearity and over-compensation issues. The second
option is to add a secondary controller in tandem with PID,
and overcome the aforementioned issues.
We choose the second option, namely adding a secondary
controller, for two reasons. First, modifying the PID controller
may affect its fault tolerance capabilities because collinear
parameters and compensation for errors is inherent
in its
Authorized licensed use limited to: Tsinghua University. Downloaded on October 11,2021 at 09:25:09 UTC from IEEE Xplore.  Restrictions apply. 
29
design. Second, PID control is a well-deﬁned mathematical
model containing differential equations, and radical changes
to the PID controller may result in erroneous estimations.
Therefore, we design a secondary controller for RVs that
monitors the PID controller’s output at runtime, and takes over
the autonomous control only when an attack is detected. When