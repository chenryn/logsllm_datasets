    invd(0x4433);
    vmcall(0x30133403);
    vmcall(0x3401CC01);
    vmcall(0x36327A09);
    vmcall(0x3300CC00);
    vmcall(0x3015CC04);
    vmcall(0x35289D07);
    vmcall(0x3027CC06);
    vmcall(0x3412CC03);
    vmcall(0x3026CD06);
    vmcall(0x34081F01);
    vmcall(0x3311C302);
    vmcall(0x3625CC05);
    vmcall(0x3930CC07);
    vmcall(0x37249405);
    vmcall(0x34027200);
    vmcall(0x39236B04);
    vmcall(0x34317308);
    vmcall(0x3704CC02);
    invd(0x4434);
    vmcall(0x38531F11);
    vmcall(0x3435CC09);
    vmcall(0x3842CC0A);
    vmcall(0x3538CB0B);
    vmcall(0x3750CC0D);
    vmcall(0x3641710D);
    vmcall(0x3855CC0F);
    vmcall(0x3757CC10);
    vmcall(0x3740000C);
    vmcall(0x3147010F);
    vmcall(0x3146CC0B);
    vmcall(0x3743020E);
    vmcall(0x36360F0A);
    vmcall(0x3152CC0E);
    vmcall(0x34549C12);
    vmcall(0x34511110);
    vmcall(0x3448CC0C);
    vmcall(0x3633CC08);
    invd(0x4437);
    vmcall(0x3080CC17);
    vmcall(0x37742C16);
    vmcall(0x3271CC14);
    vmcall(0x3983CC19);
    vmcall(0x3482BB17);
    vmcall(0x3567BC15);
    vmcall(0x3188041A);
    vmcall(0x3965CC12);
    vmcall(0x32869C19);
    vmcall(0x3785CC1A);
    vmcall(0x3281CC18);
    vmcall(0x3262DC14);
    vmcall(0x3573CC15);
    vmcall(0x37566613);
    vmcall(0x3161CC11);
    vmcall(0x3266CC13);
    vmcall(0x39844818);
    vmcall(0x3777CC16);
    vmcall(0xFFEEDEAD);'''
    lns = a.split("\n")
    def on_invd(fn):
        global op
        if(fn == 0x4433):
            for i in xrange(5):
                t = op[2 * i]
                op[2 * i] = op[2 * i + 1]
                op[2 * i + 1] = t
        elif(fn == 0x4434):
            t = op[0]
            for i in xrange(9):
                op[i] = op[i + 1]
            op[9] = t
        elif(fn == 0x4437):
            t = op[7]
            for k in xrange(3):
                op[k + 7] = op[7 - k - 1]
                if(k == 2):
                    op[7 - k - 1] = op[3]
                else:
                    op[7 - k - 1] = op[k + 7 + 1]
            op[3] = op[1]
            #op[1] = op[2]
            op[1] = t
    def on_vmcall(param):
        fn = (param >> 24) & 0xFF
        opr1 = (param >> 16) & 0xFF
        opr1x = (opr1 & 0xF0) >> 4
        opr1y = opr1 & 0xF
        opr1_ = opr1x * 9 + opr1y
        direction = (param >> 8) & 0xFF == 0xCC
        opr2 = param & 0xFF
        def rv(i):
            if(direction):
                rr = i
            else:
                rr = 27 - i - 1
            return "x[%d]"%rr
        if(fn == op[0]):
            raise(AssertionError)
            opc = "mov"
            arg = rv(opr2)
        elif(fn == op[1]):
            opc = "add"
            opo = "+"
            arg = rv(opr2)
        elif(fn == op[2]):
            opc = "sub"
            opo = "-"
            arg = rv(opr2)
        elif(fn == op[3]):
            opc = "div"
            opo = "/"
            arg = rv(opr2)
        elif(fn == op[4]):
            raise(AssertionError)
            opc = "mul"
            arg = rv(opr2)
        elif(fn == op[5]):
            opc = "xor"
            opo = "^"
            arg = rv(opr2)
        elif(fn == op[6]):
            opc = "xor"
            opo = "^"
            arg = "%s + %s - %s"%(rv(opr2-1),rv(opr2),rv(opr2+1))
        elif(fn == op[7]):
            opc = "xor"
            opo = "^"
            arg = "%s << 4"%(rv(opr2))
        elif(fn == op[8]):
            raise(AssertionError)
            opc = "or "
            arg = rv(opr2)
        elif(fn == op[9]):
            opc = "xor"
            opo = "^"
            arg = "%s ^ %s ^ (%s + %s - %s)"%(rv(opr2 + 1), rv(opr2 - 1), rv(opr2 - 2), rv(opr2), rv(opr2 + 2))
        elif(fn == 0xFF):
            print("check")
            return
        dis = "%s m[%02X], %s"%(opc, opr1, arg)
        #dis = "v[%d][%d] = (v[%d][%d] %s (%s)) & 0xFF"%(opr1x, opr1y, opr1x, opr1y, opo, arg)
        print(dis)
    #cpuid
    op = [0xA3, 0xF9, 0x77, 0xA6, 0xC1, 0xC7, 0x4E, 0xD1, 0x51, 0xFF]
    op2 = [0x90, 0xCD, 0x40, 0x96, 0xF0, 0xFE, 0x78, 0xE3, 0x64, 0xC7]
    op3 = [0x93, 0xC8, 0x45, 0x95, 0xF5, 0xF2, 0x78, 0xE6, 0x69, 0xC6]
    for i in xrange(len(op)):
        op[i] ^= op2[i]
    on_invd(0x4437)
    for i in lns:
        p = i.index("(")
        q = i.index(")", p + 1)
        cmd = i[:p]
        param = int(i[p+1:q],16)
        if(cmd == "rdmsr"):
            pass
        elif(cmd == "invd"):
            on_invd(param)
        elif(cmd == "vmcall"):
            on_vmcall(param)
模拟解密mem
    int mem[81] =
    {
        7, 206, 89, 35, 9, 5, 3, 1, 6,
        2, 6, 5, 125, 86, 240, 40, 4, 89,
        77, 77, 75, 83, 9, 1, 15, 87, 8,
        211, 56, 111, 665, 225, 54, 2, 118, 855,
        106, 170, 884, 420, 93, 86, 87, 7, 127,
        8, 168, 176, 9, 50, 2, 6, 1123, 1129,
        5, 198, 2, 37, 104, 51, 50, 103, 1,
        113, 1, 1287, 99, 8, 6, 163, 1525, 6,
        49, 952, 101, 512, 40, 87, 1, 165, 9
    };
    int main()
    {
        unsigned int v2, v3, v5, v6, i, j, k, l, m, n, ii;
        //first
        v5 = mem[40];
        for (ii = 0; ii < 4; ++ii)
        {
            mem[8 * ii + 40] = mem[8 * ii + 40 - 1];
            for (i = 0; i < 2 * ii + 1; ++i)
                mem[3 - ii + 9 * (ii + 4 - i)] = mem[3 - ii + 9 * (ii + 4 - (i + 1))];
            for (j = 0; j < 2 * ii + 2; ++j)
                mem[j + 9 * (3 - ii) + 3 - ii] = mem[10 * (3 - ii) + j + 1];
            for (k = 0; k < 2 * ii + 2; ++k)
                mem[9 * (k + 3 - ii) + ii + 5] = mem[9 * (3 - ii + k + 1) + ii + 5];
            for (l = 0; l < 2 * ii + 2; ++l)
                mem[9 * (ii + 5) + ii + 5 - l] = mem[9 * (ii + 5) + ii + 5 - (l + 1)];
        }
        mem[72] = v5;
        //174
        v5 = mem[80];
        v6 = mem[8];
        for (i = 8; i; --i)
            mem[10 * i] = mem[9 * (i - 1) + i - 1];
        mem[0] = v5;
        for (j = 1; j < 9; ++j)
            mem[8 * j] = mem[8 * j + 8];
        mem[8 * j] = v6;
        //176
        v2 = mem[76];
        v3 = mem[36];
        for (k = 8; k; --k)
            mem[9 * k + 4] = mem[9 * (k - 1) + 4];
        mem[4] = v2;
        for (l = 0; l < 8; ++l)
            mem[l + 36] = mem[l + 37];
        mem[44] = v3;
        for (i = 0; i < 9; i++)
        {
            printf("[");
            for (j = 0; j < 9 - 1; j++)
            {
                printf("%d, ", mem[i * 9 + j]);
            }
            printf("%d],\n", mem[i * 9 + 8]);
        }
        return 0;
    }
z3一把梭
    from z3 import *
    a = [
        (7, 0xE7), (7, 0xE4), (1, 0x19), (3, 0x50), 
        (7, 0xE4), (1, 0x20), (6, 0xB7), (7, 0xE4), 
        (1, 0x22), (0, 0x28), (0, 0x2A), (2, 0x54), 
        (7, 0xE4), (1, 0x1F), (2, 0x50), (5, 0xF2), 
        (4, 0xCC), (7, 0xE4), (0, 0x28), (6, 0xB3), 
        (5, 0xF8), (7, 0xE4), (0, 0x28), (6, 0xB2), 
        (7, 0xE4), (4, 0xC0), (0, 0x2F), (5, 0xF8), 
        (7, 0xE4), (4, 0xC0), (0, 0x28), (5, 0xF0), 
        (7, 0xE3), (0, 0x2B), (4, 0xC4), (5, 0xF6), 
        (3, 0x4C), (4, 0xC0), (7, 0xE4), (5, 0xF6), 
        (6, 0xB3), (1, 0x19), (7, 0xE3), (5, 0xF7), 
        (1, 0x1F), (7, 0xE4)
    ]
    part1 = ""
    for x, y in a:
        if(x == 0):   y -= 34
        elif(x == 1): y -= 19