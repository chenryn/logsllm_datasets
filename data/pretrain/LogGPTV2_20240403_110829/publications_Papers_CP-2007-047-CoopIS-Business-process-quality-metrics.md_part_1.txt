Business Process Quality Metrics: Log-based
Complexity of Workflow Patterns
Jorge Cardoso
Department of Mathematics and Engineering,
University of Madeira, Funchal, Portugal
PI:EMAIL
Abstract. We believe that analysis tools for BPM should provide other
analytical capabilities besides verification. Namely, they should provide
mechanisms to analyze the complexity of workflows. High complexity in
workflows may result in poor understandability, errors, defects, and exceptions
leading processes to need more time to develop, test, and maintain. Therefore,
excessive complexity should be avoided. The major goal of this paper is to
describe a quality metric to analyze the complexity of workflow patterns from a
log-based perspective.
Keywords: workflow, process log, workflow complexity, business process
quality metrics, business process analysis.
1 Introduction
Workflow verification tools such as Woflan [1] are indispensable for the current
generation of WfMS. Yet, another desirable category of tools that allows building
better workflows are tools that implement workflow quality metrics. In the area of
software engineering, quality metrics have shown their importance for good
programming practices and software designs. Since there are strong similarities
between software programs and business process designs, several researchers have
recognized the potential of quality metrics in business process management [2-5].
In [6], Vanderfeesten et al. suggest that quality metrics to analyze business
processes can be classified into four distinct categories: coupling, cohesion,
complexity, modularity and size. In this paper we focus our attention on developing
quality metrics to evaluate the complexity of workflow models [7].
Workflow complexity should not be confused with algorithmic complexity
measures (e.g. Big-Oh “O”-Notation), whose aim is to compare the performance of
algorithms [7]. Workflow complexity can be defined as the degree to which a
workflow is difficult to analyze, understand or explain. It can be characterized by the
number and intricacy of task interfaces, transitions, conditional and parallel branches,
the existence of loops, roles, task categories, the types of data structures, and other
workflow characteristics.
In this paper, we present a metric to calculate the Log-Based Complexity (LBC) of
workflow patterns [8]. Since our analysis of complexity is based on flow descriptions,
we devise complexity metrics for each workflow pattern. The idea of this metric is to
relate complexity with the number of different log traces that can be generated from
the execution of a workflow. If a workflow always generates the same entries (i.e., the
same task ID) in the process log then its complexity is minimal. On the other hand, if
a workflow can generate n! distinct log entries (where n is the number of tasks of a
workflow) then its complexity is higher.
This paper is structured as follows. The second section presents the related work.
In section 3, a new complexity metric for workflow patterns is presented. We start
giving a brief overview of what workflow patterns are and explain the reasons why
four patterns have not been included in our metric. In section 4, we give a practical
example showing how the metric presented is to be applied to workflows. Finally, the
last section presents our conclusions.
2 Related work
The concept of process metrics has first been introduced in [7] to provide a
quantitative basis for the design, development, validation, and analysis of business
process models. Later the concept has been re-coined to Business Process Quality
Metrics (BPQM).
The first metric presented in literature was the control-flow complexity (CFC)
metric [7]. It was inspired by McCabe’s cyclomatic complexity. The CFC metric was
evaluated according to Weyuker’s properties and an empirical study has been carried
out by means of a controlled experiment [9] to validate it. In [10], Mendling proposes
a density metric inspired by social network analysis in order to quantify the
complexity of an EPC. In [11], the author presents a data flow complexity metric for
process models. Reijers and Vanderfeesten [12] also present a metric that computes
the degree of coupling and cohesion in a BOM (Bill of materials) model by analyzing
data elements. Gruhn and Laue [5] use the notion of cognitive weights as a basic
control structure to measure the difficulty in understanding control structures in
workflows. Finally, in [6], the authors show how the ProM framework implements
some of the quality metrics that have been developed so far.
3 Log-based complexity of workflow patterns
Today, many enterprise information systems store relevant events in a log. The
importance of event logs makes them of value and interest to study and to evaluate the
complexity of the workflows that generates them. The main idea is to compute the
number of distinct logs a specific workflow can generate. The higher the number of
distinct logs that can be generated, the more complex the workflow is.
To have an idea on the distinct process logs that can be generated from the
execution of a workflow, let us consider the following two examples. A sequential
workflow with tasks A, B, C, and D can only generate one type of process log entry.
Fro example, A12-B32-C37-D67. But, if the workflow model defines two sequences:
1) A and B, and 2) C and D, and places these two sequences in parallel then the
number of different process log entries that can be generated is 6. For example, the
entries A23-B34-C45-D56, A23-C45-B34-D56, A23-C45-D56-B34, C45-D-A23-B34,
C45-A23-D56-B34, and C45-A23-B34-D56. Intuitively, the second workflow is more
complex from a process log perspective since it can have more “mutations”. The first
workflow, in our example, is predictable, while the second workflow is unpredictable.
As more distinct process log entries can be generated from a workflow, the more
unpredictable the workflow is considered to be.
3.1 Workflow patterns
Aalst et al. [13] have identified a number of workflow patterns that describe the
behavior of business processes and identify comprehensive workflow functionality.
The advantage of these patterns lies in the ability for an in-depth comparison of a
number of commercially available workflow management systems based on their
capability of executing different workflow structures and their behavior. As we have
discussed previously, the log-based complexity is a particular type of control-flow
complexity which is influenced by elements such as splits, joins, and loops.
Therefore, our first task was to identify the relevant workflow patterns for log-based
complexity analysis. We concluded that all patterns, except four, were relevant for the
metric we proposed to develop. The Implicit Termination, Multiple Instances without
Synchronization, and Cancellation Patterns were not captured by our metric since
they are implemented by a very few number of WfMS, the support can lead to an
unexpected behavior, or they no not affect the log-based complexity of processes.
3.2 Log-based complexity metrics for workflow patterns
Since it is a well known language, we have used BPMN (Business Process Modeling
Notation) to illustrate the log-based complexity of workflow patterns. Of course, we
could have used other languages, such as XPDL (XML Process Definition Language),
or we could have taken a more formal approach using Petri nets. But we consider that
BPMN is a simple and easy language to understand which facilitates readers to
comprehend the number of traces introduced by a workflow pattern. To make this
paper concise, we will only address a sub-set of workflow patterns. These patterns are
representative and explain the rational of our approach to develop the LBC metric.
The simplest element that can generate a log entry is the execution of a task (i.e. an
activity). Figure 1 illustrates the representation of a task in BPMN. Please note that
the dashed line is not part of the BPMN. We use it to specify the scope of the
workflow. In Figure 1, the dashed line specifies that workflow wf is composed of task
A.
wf
A
Fig. 1. A task
Since an activity only generates one entry in the process log, its log-based complexity
is simply 1, i.e.:
LBC (wf)=1
T
Sequence pattern (P1). The sequence pattern is defined as being an ordered series of
tasks, with one task starting after a previous task has completed (Figure 2). Please not
that BPMN graphically define a sub-workflow using a rounded box with the plus sign
(+) inside.
wf
wf1 wf2 wf3 wfn
+ + + +
Fig. 2. The sequence pattern
The behavior of this pattern can be described by the use of a token that travels down a
sequence from sub-workflow wf , to sub-workflow wf ... and finally reaches sub-
1 2
workflow wf . Since the execution of this pattern always generates the same trace in
n
the process log, the log-based complexity of this pattern is simply given by the
following formulae:
n
LBC (wf)=∏LBC (wf )
P1 xi i
i=1
For example, a sequential workflow wf with two sub-workflows wf and wf , where
1 2
wf can generate 4 different traces and wf can generate 3 different traces has a
1 2
complexity of LBC(wf) = 4·3 = 12.
Exclusive Choice and Deferred Choice (P4, P16). The exclusive choice pattern (P4,
XOR-split) is defined as being a location in the workflow where the flow is split into
two or more exclusive alternative paths and, based on a certain condition, one of the
paths is taken (Figure 3). The pattern is exclusive since only one of the alternative
paths is taken. The deferred choice pattern (P16, a XOR-split abstraction) is very
similar to the exclusive choice pattern. In contrast to the exclusive choice pattern, the
deferred choice transition selection is based on external input while the exclusive
choice relies on information being part of the workflow. Once a transition is activated,
the other alternative transitions are deactivated. The moment of choice is delayed until
the processing in one of the alternative transitions has actually started.
wf
p1
condition1
wf1
+
...
Exclusive
choice
w +fn
cond pnitionn
Fig. 3. The exclusive choice pattern
The behavior of these patterns can be described by the use of a token that follows
only one of the outgoing transitions of the exclusive choice pattern. Since only one
path of the n paths present can be followed, the log-based complexity is the sum of
the individual complexity of each workflow wf … wf . Thus, the LBC for these two
1 n
patterns is:
n
LBC (wf)=LBC (wf)=∑p ×LBC (wf )
P4 P16 i xi i
i=1
Since workflows are non-deterministic, LBC and LBC are weighted functions,