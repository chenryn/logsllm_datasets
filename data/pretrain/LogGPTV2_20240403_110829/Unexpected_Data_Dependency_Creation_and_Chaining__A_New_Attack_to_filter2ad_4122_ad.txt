controller framework via reﬂection), SVHunter directly shows the method
itself when representing its usage.
quite beyond the scope of this paper.
As a result, SVHunter chooses to address this difﬁculty in a
semi-automatic manner. To help users craft D2C2 payloads, we
built the Payload Crafting Guide generator. This generator will
construct a payload crafting guide for every generated event
chain graph. With the guide, users will be able to quickly
locate the vulnerable code snippets and understand how data
items are processed along the whole exploit chain. As shown
in Fig. 5, the guide will indicate to users two types of critical
information. (1) The boxes on the left of the ﬁgure display the
code locations where sensitive methods are being abused (in
the format of Class#SensitiveMethod@Line). (2) The boxes
on the right provide a detailed description of every poisoned
data item in each step (Note that the description is extracted
from the data part of the corresponding observation).
We again use the aforementioned example exploit chain
to further illustrate the generated payload crafting guide. As
shown in Fig. 5, node a is converted to the box which is
connected to the “Data Plane” node. This box indicates that
getDevice is the ﬁrst sensitive method to be abused, and
it is located in class DevicesWebResource at line 83.
Similarly, node b is converted to the box which is connected
to the “END” node. The box records the code location of
the second sensitive method (i.e., applyFlowRules) in
the exploit chain. Moreover,
the boxes on the right side
of the ﬁgure illustrate how poisoned data propagates. For
example, a malicious payload in the form of proto msg is
sent from the “malicious device”. By abusing the sensitive
methods in nodes a and b, the payload further propagates to
var#53 and var#24, which are respectively stored in the
root.ﬂows.deviceid date item and the ﬂowRules data item. Note
that both data items are in the category of net state.
VI. EVALUATION
In this section, we present our evaluation results of
SVHunter. Our evaluation is focused on using SVHunter
to construct exploit chains against three open-source SDN
controllers (i.e., ONOS, Floodlight, and Opendaylight). The
three controllers are currently the most widely used controllers
in both academia and industry. In addition, to understand
Authorized licensed use limited to: UNIVERSITY OF CONNECTICUT. Downloaded on August 16,2020 at 09:22:58 UTC from IEEE Xplore.  Restrictions apply. 
1519
whether security-enhanced SDN controllers are immune to
the D2C2 attack or not, we also use SVHunter to exploit SE-
Floodlight, which is a security-enhanced variant of Floodlight.
SVHunter consists of more than 11K LoC (Java+Python)
in total. More speciﬁcally, the Tracer has 3,449 LOC, the
Reasoning Engine has 3,847 LOC, and the Exploit Engine
has 3,854 LOC. We are releasing SVHunter as an open-source
tool at https://github.com/xiaofen9/SVHunter in the hope that
it will be useful for future SDN security research. We run
SVHunter on a machine running Ubuntu 16.04 LTS with a
dual-core 2.4 GHz CPU and 16 GB memory.
Conceptually speaking, we seek to answer the following
evaluation questions:
• Is “Data Dependency Creation and Chaining” a pre-
existing vulnerability in widely-used mainstream SDN
controllers? If so, how serious is the vulnerability?
• Can SVHunter effectively exploit
the “Data Depen-
dency Creation and Chaining” vulnerability and construct
previously-unknown exploit chains in different kinds of
SDN controllers?
• In which ways do the discovered vulnerabilities and
explain chains enlarge the attack surface of SDN?
A. Identifying Poisoning Events
Table IV presents our results of poisoning-event pinpointing
from ONOS v1.13.1, Floodlight v1.2, OpenDaylight v0.4.1,
and SE-Floodlight, respectively. SVHunter detected 74 poison-
ing events among 8,664 tracked information ﬂows in ONOS
using 98 seconds. 38 poisoning events and 19 poisoning events
were identiﬁed in Floodlight and SE-Floodlight respectively.
17 poisoning events among 5,150 tracked information ﬂows
were identiﬁed in OpenDaylight using 46 seconds. Compared
with Floodlight and Opendaylight, we analyzed more ap-
plications (i.e. 164) in ONOS. This is because the ONOS
project maintains both the controller and a large number of
applications while the other two projects mainly maintain the
corresponding controllers. Hence, we analyzed all the ofﬁcial
applications in ONOS while in Floodlight and OpenDaylight
we only analyzed a handful of applications which are nec-
essary for SDN networks to function. For the same reason,
SVHunter identiﬁed more poisoning events in ONOS than in
Floodlight and OpenDaylight.
Regarding the “quality” of the detected poisoning events, on
one hand, we note that it is very difﬁcult if not impossible to
ﬁnd concrete and justiﬁable per-event evaluation criteria. On
the other hand, we note that the quality of the detected events
can actually be indirectly evaluated through the quality of the
D2C2 chains constructed by the Reasoning Engine, which we
will evaluate in the following subsections.
B. Reasoning Results
The effectiveness of SVHunter is affected by two main
factors. (a) Since the Reasoning Engine uses heuristics, the
generated observations are imperfect in some cases. (b) The
Tracer might fail to recognize the semantics of some usages
DETECTION RESULTS OF POISONING EVENTS.
TABLE IV
Controller
Version
LoC
Time
Event Detection Results
#NTC
#TIF
#SMU
#PE
ONOS
1.13.1
673985
Floodlight
OpenDaylight
SE-Floodlight
1.2
0.4.1
Beta7
60090
326479
N/A
98s
19s
46s
21s
164
31
5
N/A
8664
992
5150
1256
536
163
406
108
74
38
17
19
#: the number of
TIF: traced data ﬂows;
PE: poisoned events;
SMU: sensitive method usages;
NTC: tested components.
of sensitive methods (e.g., some poisoning events could have
an unknown calling precondition).
Due to the two factors, it is not guaranteed that every
D2C2 chain generated by the Reasoning Engine is exploitable.
Therefore,
this part of the evaluation will not only focus
on whether SVHunter can generate previously unknown ex-
ploitable D2C2 chains, but also on how likely SVHunter
falsely generates unexploitable D2C2 chains. We denote such
unexploitable D2C2 chains as a false positive. In order to
distinguish exploitable D2C2 chains from unexploitable ones,
we ﬁrst built an SDN testbed with Mininet 2.3 [6], which is
an SDN network emulator. Then, we ran the four controllers
on the testbed and tried to run each of the generated D2C2
chains via modifying the payloads generated by the Exploit
Engine. Note that all the toe-hold poisoning events involved
can be automatically generated by the Exploit Engine.
Table V summarizes our reasoning results. The ﬁrst column
records the number of D2C2 chains generated by SVHunter
(i.e. Constructed Chains). The second column records the
number of chains that are found to be exploitable (i.e. Ex-
ploitable Chains) for each controller. We manually examined
all the exploitable chains generated by SVHunter and found
that some exploitable chains actually exploit the same sensitive
method(s) in the same component (e.g., in Floodlight four
D2C2 chains exploit the same sensitive API), although they
use different parameter values when calling the sensitive
method(s). It is clear that the adversary will pay attention to
this special kind of “distinct but redundant” redundancy. Based
on this ﬁnding, the third column records the number of non-
redundant chains, i.e., the number of exploitable chains after
this special kind of redundancy is removed.
The results show that SVHunter identiﬁed 58 D2C2 chains
in ONOS, and 48 of them are exploitable. In Floodlight, we
found 13 out of 19 identiﬁed D2C2 chains can be exploited. In
OpenDaylight, 2 D2C2 chains are identiﬁed by SVHunter and
both can be exploited. In SE-Floodlight, SVHunter identiﬁed
5 D2C2 chains and 4 of them can be exploited. Since SE-
Floodlight is not open source, we directly used the heuristics
obtained from Floodlight
to test SE-Floodlight (Note that
SE-Floodlight is adapted from Floodlight). After comparison,
we found that the result of SE-Floodlight and the result of
Floodlight are almost the same: only one non-redundant chain
identiﬁed from Floodlight is not detected in SE-Floodlight.
The missing non-redundant chain results from the fact that SE-
Floodlight is based on an older version of Floodlight (v0.87)
Authorized licensed use limited to: UNIVERSITY OF CONNECTICUT. Downloaded on August 16,2020 at 09:22:58 UTC from IEEE Xplore.  Restrictions apply. 
1520
REASONING RESULTS FOR THE FOUR CONTROLLERS.
TABLE V
Controller
Constructed Chains
Exploitable Chains
Non-redundant Chains
ONOS
Floodlight
OpenDaylight
SE-Floodlight
58
19
2
5
48
13
2
4
11
3
2
2
and the sensitive method abused by the missing chain doesn’t
appear in the old version.
In fact, it is not a surprise that SE-Floodlight is vulnerable
to the D2C2 attack: existing security-enhanced controllers
only focus on SDN application resilience and permission
management rather than the abuse of sensitive methods in
the control plane. Moreover, according to the fact that the
detection results from SE-Floodlight and Floodlight are only
slightly different from each other, we can also posit that the
heuristics obtained from the three mainstream controllers are
also applicable to their variants. Since it is a common practice
for industry and academia to develop their own controllers [5],
[4] by adapting one of the three mainstream controllers
(i.e., Floodlight, ONOS, and Opendaylight), SVHunter and
the heuristics used by SVHunter should be very useful for
many if not most vendors and researchers to test their own
controllers before releasing. We also observed that SVHunter
identiﬁed more exploit chains in ONOS than in the other three
controllers. We posit that this is due to two reasons: (i) As
we have discussed in Section VI-A, SVHunter identiﬁed more
poisoning events in ONOS than in others. Because of this, a
larger number of chains are constructed from a larger number
of candidate events. (ii) In ONOS, the identiﬁed A3 event(s) is
able to poison arbitrary data items in the category of net state,
which leads to greater reachability than other events.
Table VI demonstrates the 18 non-redundant D2C2 chains
identiﬁed by SVHunter (Note that all the involved poisoning
events are listed in Table IX in Appendix A). We noticed
that the D2C2 attack substantially increases the reachability
mentioned in Section 1: With the data dependencies created by
the 21 poisoning events, 12 previously unreachable sensitive
methods from 13 control plane components were successfully
abused. We also noticed there are ﬁve identiﬁed chains only
consisting of one poisoning event. However, we posit that
they are still important. Since D2C2 chains aim at increasing
the reachability in the control plane, the signiﬁcance of a
chain should be reﬂected in how previously unreachable meth-
ods/components are reached instead of its length. Although
each of the ﬁve chains only consists of a single event, every
single event in the ﬁve chains successfully manipulates the
parameters of critical sensitive methods. According to the
results above, despite the fact that we cannot guarantee that
the heuristics (e.g., sensitive methods and data collecting
methods) used by SVHunter are complete and exhaustive, we
posit that these heuristics are essential and effective in D2C2
vulnerability analysis. Otherwise, it is unlikely that SVHunter
successfully found 18 previously-unknown D2C2 chains.
Although the results are very encouraging, we also found
that in some special cases SVHunter doesn’t construct 100%
correct D2C2 chain that could be exploited. The false positives
of SVHunter mainly result from certain semantic checks
ignored by SVHunter. For example, when we veriﬁed one
of D2C2 chains identiﬁed from ONOS, we found that one
of the poisoning events located in an IP address converting
component cannot be triggered. This is because the parameter
srcIp of the sensitive method parseInt to be abused
cannot be manipulated since its format is strictly checked.
However, SVHunter still “concludes” that its preceding events
are sufﬁcient for poisoning this parameter.
C. Impact Analysis of Identiﬁed D2C2 Chains
As shown in Table VI, we identiﬁed 18 non-redundant D2C2
chains. To ﬁx these vulnerabilities, we have made responsible
disclosure and notiﬁed the vendors of each vulnerable con-
troller. They reacted immediately and so far 9 of them have
been ﬁxed and assigned a CVE number. In this section, we
conduct an impact analysis on these D2C2 chains according
to the three types of attack effects listed in Table II.
Network Manipulation. We found that 6 D2C2 chains (i.e.,
DC-1, DC-2, DC-3, DC-4, DC-12 and DC-17) can generate
serious network manipulation effects (e.g., arbitrary command
execution or installation of arbitrary ﬂow rules). In ONOS,
we identiﬁed 4 chains. First, DC-1, DC-2, and DC-3 abuse
the sensitive method Runtime.getRuntime().exec()
in different components. The common attack effect of the
three chains is to have the controller execute arbitrary system
commands. Second, DC-4 abuses a sensitive method in north-
bound APIs (i.e., applyFlowRules()) to install speciﬁc
malicious ﬂow rules. In Floodlight, we found that one similar
D2C2 chain (i.e., DC-12) can install malicious ﬂow rules
by abusing sensitive methods in northbound APIs. In SE-
Floodlight, we also identiﬁed DC-17 and DC-18, which is
respectively identical to DC-12 and DC-13 in Floodlight.
Data Leakage. We found that 12 D2C2 chains (i.e., DC-1,
DC-2, DC-3, DC-5, DC-6, DC-7, DC-8, DC-12, DC-13,
DC-15, DC-17 and DC-18) can leak sensitive information
(e.g., network topology, ﬂow rules, and network trafﬁc) from
the control plane. In ONOS, we found 7 D2C2 chains. Since
DC-1, DC-2 and DC-3 are able to execute commands in
the controller, they are able to read network states through
command execution. In addition, we found that DC-5 and
DC-6 can access net state data items by abusing northbound
APIs. Finally, we found that DC-7 and DC-8 can let
information in conﬁguration ﬁles leak out. Their last events
are in the NETCONF application and the Driver service,
respectively. They abuse XML parser methods such as
Javax.xml.parsers.DocumentBuilder.parse().
In Floodlight, DC-12 and DC-13 were found to be able to
abuse the northbound APIs to access net state so as to acquire
sensitive network information such as network topologies and
ﬂow rules. Similarly, we found that in SE-Floodlight DC-17
and DC-18 are generating the same kind of attack effect. In
OpenDaylight, we found that DC-15 can be leveraged by the
Authorized licensed use limited to: UNIVERSITY OF CONNECTICUT. Downloaded on August 16,2020 at 09:22:58 UTC from IEEE Xplore.  Restrictions apply. 
1521
D2C2
CHAINS (NON-REDUNDANT) CONSTRUCTED BY SVHUNTER.
TABLE VI
Controller
Chain#
Target Component
Event Chain
Description
Attack Effects
1
2
3
4
5
6
7
8