• Smaller trusted code: The overall trusted computing base
(TCB) is even smaller than a secure user interface system
on top of a secure operating system kernel (e.g., [5], [6]).
A lot of functionality can be “out-sourced” to the un-
trusted environment, including the initialization of certain
hardware resources. Moreover, in contrast to a security
kernel or hypervisor, our design requires no persistent
code when no sensitive transactions are in progress.
• Higher adoption rate: The chances of adoption are much
higher since our system can be readily deployed with off-
the-shelf operating systems that are used today. Although
modern virtualization technology offers a compelling way
to run a secure hypervisor beneath commodity operating
systems (e.g., [17], [18], [19], [20]), monopolization of
available hardware virtualization support for security ar-
chitectures has been discouraged.
B. Transaction Conﬁrmation with UTP
We describe the interactions and user experience of trans-
action conﬁrmation with UTP. The basic procedure begins
after the user has prepared some kind of transaction (e.g.,
by populating a shopping cart at a web-based retailer) and
is ready to commit (e.g., make a purchase). At this point,
a well-behaved client system will invoke UTP to allow the
user to conﬁrm that transaction, though a malicious client
system may attempt to fool the user.
Once invoked, the UTP code takes control of the keyboard
and display and shows a summary of the transaction that is
about to be committed. During this time the normal (un-
trusted) OS is suspended, and the UTP code executes in the
secure execution mode of the CPU (c.f. step 3 in Figure 1).
Displaying the transaction summary and requesting an active
conﬁrmation from the user is an essential step that reveals
the human user’s intentions. Otherwise, the user may be
tricked into conﬁrming anything. Note that the practical
details of how to summarize the transaction are likely best
implemented on the server side, either per-web server or
as a standard mechanism that
is adopted across several
web-based service providers. It may also be an option to
implement client-side logic on a per-provider basis, if the
user has a ﬁnite set of service providers with which she
engages in sensitive transactions. One can even imagine the
content of the conﬁrmation page being rendered somewhere
in the cloud, with a static image being transmitted to the
UTP environment on the client system.2
Next, the user is prompted to perform the actual con-
ﬁrmation. If no attack is taking place,
then the user is
indeed looking at a legitimate summary of the proposed
transaction, and the UTP code will be the only code that can
receive the user’s forthcoming input. This conﬁrmation is the
user’s opportunity to realize that an attacker has tampered
with her session. The server wants to be sure that the user
actually veriﬁed the summary. From a technical perspective,
the actual conﬁrmation act may be as simple as pressing
“enter” to generate a physical keyboard interrupt, but we also
wish to avoid habituation by users. Interesting designs may
include manually entering the ﬁnal invoice amount; entering
a short, random conﬁrmation code; or typing the word YES
to continue. The precise design is outside the scope of this
paper, but it should be selected in response to an evidence-
based user study to determine which is least intrusive while
providing the desired security properties. We discuss these
issues again in our security analysis (§V-A).
Once the user has viewed the transaction summary and
conﬁrmed her intention to commit
the transaction, UTP
assembles the necessary data to generate the attestation
information and terminates its execution. The CPU exits the
isolated environment and resumes the normal OS. The client
(e.g., the web browser) sends the attestation information via
a secure channel to the remote server. The server accepts
the pending transaction if it is able to verify the attestation.
This indicates that the server is convinced that the legitimate
and expected software ran in an isolated environment on a
device associated with the user’s account, and that the user
successfully conﬁrmed her desire to commit the transaction.
Our design leverages an isolated execution environment.
Some implementations of such an environment necessarily
halt the execution of other code running on the system.
For example, the user’s music will stop playing when the
conﬁrmation dialog is displayed. An important question to
resolve is whether this disruption is good or bad. A “pro” is
that this disruption helps to get the user’s attention and focus
them on the sensitive task. A “con” is that the users may
ﬁnd this requirement annoying, and vendors may object on
the grounds that it will reduce the rate of impulse purchases.
C. CAPTCHA with UTP
CAPTCHA is deﬁned as a Completely Automated Public
Turing test to tell Computers and Humans Apart. Captchas
are commonly manifested online as distorted images, and
users are asked to type in the characters contained in the
2This type of pre-rendered design has been reviewed favorably, e.g., for
electronic voting systems [21].
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:44:30 UTC from IEEE Xplore.  Restrictions apply. 
4images. Unfortunately, captchas are often difﬁcult even for
humans to solve reliably [3]. Moreover, without a secure
execution environment, captchas can readily be inlined into
other types of free content. For example, it has been shown
that there is no shortage of users willing to solve captchas
for otherwise unfettered access to adult content online [22].
Our UTP solution is capable of supporting captchas that
are simultaneously more usable and harder for attackers to
inline. In essence, a UTP-based captcha amounts to asking
the user to verify some transaction detail, e.g., to enter the
ﬁnal amount of a pending purchase.
D. Mutual Authentication Overview
As we have shown, UTP can be used to give a remote
server assurance that a human user has actively entered a
conﬁrmation to a requested action. One of our motivations
is to protect against malicious transactions resulting from
malicious transaction generators. In scenarios where the
transaction is associated with a user account (e.g., online
purchases), malware could steal the user’s account creden-
tials and send them to the attacker. Given that the user
cannot ascertain whether her system is truly in a trustworthy
state, we cannot depend upon the user to employ appropriate
discretion when deciding whether to enter sensitive data such
as passwords or account credentials. Thus, we include in our
architecture that the server is able to authenticate the client
user without solely depending on user-memorized secrets
(e.g., passwords). However, authentication is orthogonal to
our work, and we therefore refer to existing approaches that
can be easily incorporated into our design.
One option for mutual authentication is to use public
key-based credentials. For the purposes of discussion, we
consider strong device authentication based on hardware-
protected keys, e.g., asymmetric non-migratable keys resid-
ing in a Trusted Platform Module (TPM) [16]. Viable alter-
natives may include password-based authentication, where
the password is actually a high-entropy secret managed by
and accessible only to trusted code. The PAKE protocol for
password-assisted key exchange may also be used [23], [24],
[25]. Challenge-response protocols, which verify knowledge
of a shared secret between client and server, are another
option. Finally, wallet-like authentication agents [26], [27],
[28], [29], [30] automatically manage mutual authentication
between the user’s computer and a remote server. The
authentication agent (wallet) is generally executed in an
environment that isolates it from the rest of the software
stack. Hence, an authentication agent could be executed in
the secure execution mode of the CPU in the same way as
the UTP code (see also §VI).
E. Enrollment and Setup
When UTP is used in the context of conﬁrming transac-
tions demanding (mutual) authentication, the credentials for
the authentication (e.g., password, shared secret, or public
key-based credentials) must be established in a setup phase.
The primary obstacle is enrolling the public component of
a hardware-protected keypair from the client system with
the service provider for subsequent use in client device
authentication and attestation. This challenge has two parts.
First,
the hardware-protected key generation and storage
infrastructure employed must be capable of certifying that a
particular keypair was generated internally and will remain
protected. Second, this certiﬁed key must be somehow bound
to the identity of the device’s user, in order to support an
authentication procedure that remains secure even if the user
enters her password into a malicious application.
Certifying Hardware-Protected Keys: Although tech-
nically well-understood, certifying public key-based creden-
tials is challenging because a global public key infrastructure
that can scale to include all client devices does not exist.
Thus, in practice, it is likely that some form of per-service-
provider bootstrapping mechanism will be required. It may
be reasonable for organizations to partner such that
the
bootstrapping mechanism can be out-sourced to a third-
party provider (with parallels to single sign-on solutions,
e.g., SAML [31] or OpenID [32]). In cases where privacy
is required (e.g., unlinkability of online purchases to the
real identity of hardware devices), cryptographic protocols
like Direct Anonymous Attestation (DAA) [33] may be used,
where a signature proves the membership to a certain group,
but does not reveal the identity of that particular member.
Binding Keypairs to Users: To enable the service
provider to associate a certiﬁed keypair with a user, users
must provide certain information about themselves (e.g.,
name, e-mail address, etc.). The initial enrollment can be
performed on a trust-on-ﬁrst-use basis in many use cases.3
To bind a certiﬁed keypair to a particular user, we can use
our protected input mechanism to demonstrate to the service
provider that a human entered the relevant information. For
instance, the UTP-based captcha approach described above
can be used. This solution demonstrates that the platform
from which the human’s information originates is able to
perform operations using the private key corresponding to
the certiﬁed public key.
IV. IMPLEMENTATION
We have implemented an end-to-end system for transac-
tion conﬁrmation using a uni-directional trusted path. Our
setup consists of a modiﬁed open-source online merchant
software package on the server side, and a browser plugin
and conﬁrmation agent on the client side. For the client
side, we have implemented the UTP conﬁrmation agent
based on the Flicker [15] framework, leveraging hardware
support for dynamic root of trust using Intel TXT CPU
3Of course, one person could pose as another if the impostor knows
sufﬁcient information about the individual being impersonated and if the
target individual has never been enrolled before. Note that this risk already
exists today, and solutions that address it are outside the scope of this paper.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:44:30 UTC from IEEE Xplore.  Restrictions apply. 
5Figure 2. Prototype implementation of the UTP transaction conﬁrmation.
extensions [10] and a v1.2 TPM [16]. Figure 2 illustrates
our implementation, which we describe below. Appendix A
gives additional background.
A. Authentication and Enrollment
User and Device Authentication: We implement two-
factor client authentication by authenticating the client de-
vice as well as the client user. Thus, part of the user’s
enrolling with our web shop includes generating and reg-
istering a TPM-based Attestation Identity Keypair (AIK) to
represent the user’s client system to that service provider.4
Hardware support for protecting cryptographic keys, such as
the TPM chip [16], has reached a level of market penetration
where it is a legitimate option on which to build real-world
systems. Hence, device authentication, when implemented
leveraging the TPM, provides excellent protection against a
compromised OS being able to masquerade as a different
physical system.
Enrollment Phase: We use an AIK to represent the
identity of the client’s TPM, and thus platform. In our
implementation, we use a privacy CA to certify our AIK
as having been generated in a real TPM. Speciﬁcally for
our prototype we use privacyca.com, which provides an
interface to obtain a valid AIK certiﬁcate that can be used
by the TPM, given that the TPM manufacturer included an
Endorsement Key Credential (Figure 3). Instead of including
4A unique AIK can easily be used per-merchant, alleviating any risk of
privacy invasion by correlating transactions between different merchants.
a trusted third party as privacy CA, one might achieve
unlinkability, as mentioned before, by using DAA [33], [34].
Figure 3. Device enrollment using a Privacy CA.
B. UTP Sessions
Web server: We made minor changes to the open-
source FreeWebshop.org [35] to support UTP-based trans-
action conﬁrmation. The server has a typical shopping cart
interface where users can add items that they wish to buy,
before proceeding to a check-out process that collects pay-
ment and shipping information. We modiﬁed the summary
page of the ordering process in FreeWebshop.org to appear
without automatically ﬁnalizing the order, and to include
one additional button, which invokes UTP-based veriﬁcation.
When the user clicks this button, a server-side script that
we have implemented to manage the UTP-based veriﬁcation
process is invoked. The script assembles the ﬁnal veriﬁcation
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:44:30 UTC from IEEE Xplore.  Restrictions apply. 
(Firefox)Web BrowserTPMFlickerPAL: UTPWeb ShopServerTPMPrivacy CA(privacyca.com)(Firefox)Web Browser6message to be conﬁrmed by the user and sends it to the
client. This message consists of a simpliﬁed invoice (short
name for each product in the cart, quantities, itemized cost,
and the total cost) and a nonce to ensure the freshness of
the expected attestation covering the UTP-based veriﬁcation
on the client (Figure 4). The script is responsible for the
exchange of the actual attestation messages and all data is
tunneled through the existing https connection.
Our server-side script consists of 132 lines of code.
Further, our veriﬁcation program consists of 356 LoC, which
includes nonce generation and veriﬁcation of the client
TPM’s Quote operation and AIK certiﬁcate.
As soon as a client conﬁrms a speciﬁc transaction and
engages in the veriﬁcation protocol, the server-side script
invokes a local veriﬁcation program, that we have developed,
which generates a nonce for that particular user. The nonce
is used to ensure the freshness of the forthcoming attestation
of the UTP conﬁrmation session on the client. The veriﬁca-
tion program also computes the expected attestation result
with the nonce and the hash of the generated conﬁrmation
message. Those two hashes are later veriﬁed to be included
in the hash chain that comprises the value in the TPM Quote,
which is sent during attestation from the client.
After the conﬁrmation session on the client, an attestation
is sent back to the server, again through the https connection.
When the server-side script receives the data it parses it and
invokes the veriﬁcation program to process the TPM Quote
(AIK-signed PCR aggregates), and makes the decision as to
whether this attestation represents a legitimate conﬁrmation
of the pending transaction. Depending on the result of the
veriﬁcation, the script sends a message to the client browser
(that malware may suppress), stating whether or not the
transaction is conﬁrmed, and either commits or aborts the
transaction in the web shop’s backend.
Confirmation Agent
To confirm the purchase of the following 3 items:
1. Widget
2. Doodad
3. Thingamajig
--------------------------
TOTAL
50 $
10 $
50 $
110 $
Please type this in exactly: 3e
>: 3e
You typed in: 3e
Transaction will be confirmed.
Figure 4. Sample UTP conﬁrmation display.
Client PC: We have developed an extension for the
Firefox web browser, which runs on the untrusted OS on the
client and is capable of sending and receiving data through
the existing https connection. We have also developed a local
Figure 5.
Implemented modules in the prototype.
utility program that is capable of invoking a UTP-speciﬁc,
security-sensitive PAL (Piece of Application Logic) to run