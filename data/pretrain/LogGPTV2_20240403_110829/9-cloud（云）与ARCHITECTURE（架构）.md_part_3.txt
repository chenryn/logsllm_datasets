\[root@room9pc01 qemu\]# virsh dumpxml node1
\[root@room9pc01 qemu\]# virsh dumpxml node1 \> node.xml
//导出虚拟机node1的配置文件为node.xml
\[root@room9pc01 qemu\]# ls
node.xml
virsh命令： virsh edit 虚拟机名
备注：可以修改name，memory，disk、network等字段
\[root@room9pc01 qemu\]# virsh edit node1
\
\node1\ //node1为虚拟机的名称，可以随意修改
\76d5dc2c-5eef-4e30-8b6c-e58851814f84\ //uuid可以去掉
\2048000\ //内存大小可以调整
\2048000\
\
\ //后端盘路径
.. ..
\
\
//mac地址和带有address字样的全部去掉
.. ..
步骤二：重新定义虚拟机
1）重新定义虚拟机
\[root@room9pc01 qemu\]# virsh define node1.xml
2）取消定义的虚拟机
\[root@room9pc01 qemu\]# virsh undefine node1
## 5 案例5：安装虚拟机
5.1 问题
本案例要求可以成功安装一个自定义虚拟机：
配置一个网络yum，并安装一个虚拟机
制作一个虚拟机模板，包括配置yum，网卡等
5.2 步骤
实现此案例需要按照如下步骤进行。
步骤一：配置网络yum源
\[root@room9pc01 \~\]# yum -y install vsftpd
\[root@room9pc01 \~\]# vim /etc/vsftpd/vsftpd.conf
listen=YES
listen_ipv6=NO
\[root@room9pc01 \~\]# systemctl restart vsftpd
\[root@room9pc01 \~\]# mkdir /var/ftp/centos
\[root@room9pc01 \~\]# mount /iso/CentOS-7-x86_64-DVD-1708.iso
/var/ftp/centos/
mount: /dev/loop1 写保护，将以只读方式挂载
\[root@room9pc01 \~\]# vim /etc/yum.repos.d/dvd.repo
\[dvd\]
name=dvd
baseurl=ftp://192.168.1.254/centos
enabled=1
gpgcheck=0
\[root@room9pc01 \~\]# yum clean all
\[root@room9pc01 \~\]# yum repolist
\[root@room9pc01 \~\]# cd /var/lib/libvirt/images/
\[root@room9pc01 images\]# qemu-img create -f qcow2 node.qcow2 16G
Formatting \'node.qcow2\',fmt=qcow2 size=17179869184 encryption=off
cluster_size=65536 lazy_refcounts=off
步骤二：安装一个虚拟机
\[root@room9pc01 images\]# virt-manager //真机操作，启动virt-manager
使用virt-manager软件选择新建虚拟机如图-1所示：
![image001](media/image16.png){width="4.617361111111111in"
height="3.058333333333333in"}
图-1
选择安装方式如图-2所示：
![image002](media/image17.png){width="4.617361111111111in"
height="2.4916666666666667in"}
图-2
选择内存，cpu和自定义存储如图-3所示：
![image003](media/image18.png){width="4.617361111111111in"
height="2.4583333333333335in"}
图-3
选择虚拟机名称和网络如图-4所示：
![image004](media/image19.png){width="3.716666666666667in"
height="3.691666666666667in"}
图-4
选择分区和KDUMP如图-5所示：
![image005](media/image20.png){width="4.617361111111111in"
height="2.025in"}
图-5
选择创建分区如图-6所示：
![image006](media/image21.png){width="4.617361111111111in"
height="2.2333333333333334in"}
图-6
选择standard Partition如图-7所示：
图-7
创建一个根分区如图-8所示：
![image007](media/image22.png){width="4.617361111111111in"
height="2.191666666666667in"}
图-8
步骤三：制作一个虚拟机模板
1）禁用selinux
\[root@localhost \~\]# vim /etc/selinux/config
SELINUX=disabled
2）卸载防火墙与NetworkManager
\[root@localhost \~\]# yum -y remove NetworkManager-\* firewalld-\*
python-firewall
3）配置yum源
\[root@localhost \~\]# vim /etc/yum.repos.d/dvd.repo
\[dvd\]
name=dvd
baseurl=ftp://192.168.1.254/centos
enabled=1
gpgcheck=0
\[root@localhost \~\]# yum clean all
\[root@localhost \~\]# yum repolist
4）导入公钥
注意：把/etc/yum.repos.d/dvd.repo的gpgcheck=0改成gpgcheck=1
\[root@localhost \~\]# lftp 192.168.1.254
lftp 192.168.4.254:\~\> cd centos
lftp 192.168.4.254:/centos\> get RPM-GPG-KEY-CentOs-7
lftp 192.168.4.254:/centos\> exit
\[root@localhost \~\]# rpm \--import RPM-GPG-KEY-CentOs-7
\[root@localhost \~\]# yum -y install net-tools vim-enhanced
bridge-utils psmisc
5）配置网卡
\[root@localhost \~\]# vim /etc/sysconfig/network-scripts/ifcfg-eth0
DEVICE=\"eth0\"
ONBOOT=\"yes\"
IPV6INIT=\"no\"
TYPE=\"Ethernet\"
BOOTPROTO =\"dhcp\"
\[root@localhost \~\]# systemctl restart network
6）禁用空路由
\[root@localhost \~\]# vim /etc/sysconfig/network
NOZEROCONF=\"yes\"
7）添加console配置
\[root@localhost \~\]# vim /etc/default/grub
GRUB_CMDLINE_LINUX=\"biosdevname=0 net.ifnames=0
console=ttyS0,115200n8\"
GRUB_DISABLE_LINUX_UUID=\"true\"
GRUB_ENABLE_LINUX_LABEL=\"true\"
8）重新生成grub.cfg
\[root@localhost \~\]# grub2-mkconfig -o /boot/grub2/grub.cfg
9）安装扩展分区软件
\[root@localhost \~\]# yum install -y cloud-utils-growpart
10）第一次开机自动扩容
\[root@localhost \~\]# /usr/bin/growpart /dev/vda 1
\[root@localhost \~\]# /usr/sbin/xfs_growfs /
11）关闭虚拟机后执行信息清理工作
\[root@room9pc01 \~\]# virt-sysprep -d centos7.0
//真机上面操作，centos7.0为虚拟机名称
6 案例6：离线访问虚拟机问题
本案例要求可以离线访问虚拟机：
利用xml文件生成一个新的虚拟机
利用guestmount实现离线访问虚拟机
6.1 步骤
实现此案例需要按照如下步骤进行。
步骤一：用xml生成一个新的虚拟机
\[root@room9pc01 \~\]# cd /etc/libvirt/qemu/
\[root@room9pc01 qemu\]# cp centos7.0.xml local.xml
\[root@room9pc01 qemu\]# vim local.xml
\
\local\ //修改名字
\2048000\ //修改内存
\2048000\
\...
\ //img文件位置
注意：除这些外还要把mac地址删掉，带address字样的全部删除
\[root@room9pc01 \~\]# cd /var/lib/libvirt/images/
\[root@room9pc01 images\]# qemu-img create --b node.qcow2 --f qcow2
local.img
\[root@room9pc01 images\]# virsh define /etc/libvirt/qemu/local.xml
\[root@room9pc01 images\]# virsh start local
\[root@room9pc01 images\]# virsh console local
步骤二：guestmount实现离线访问
基本用法：guestmount -a 虚拟机磁盘路径 -i /挂载点
-a：指定虚拟磁盘
-i：挂载点
\[root@room9pc01 \~\]# mkdir /mnt/kdisk
\[root@room9pc01 \~\]# guestmount -a node1.qcow2 -i /mnt/kdisk
\[root@room9pc01 \~\]# cd /mnt/kdisk
\[root@room9pc01 kdisk\]# ls
bin home media opt sbin tmp
boot lib misc proc selinux usr
# \-\--CLOUD02\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--
# 云计算简介
![LINUXNSD_V01CLOUDDAY02_005](media/image23.png){width="5.760416666666667in"
height="3.2694444444444444in"}
# 云分类![LINUXNSD_V01CLOUDDAY02_007](media/image24.png){width="5.760416666666667in" height="4.320833333333334in"}![LINUXNSD_V01CLOUDDAY02_006](media/image25.png){width="5.760416666666667in" height="4.320833333333334in"} 
![LINUXNSD_V01CLOUDDAY02_008](media/image26.png){width="5.760416666666667in"
height="4.320833333333334in"}
# Openstack
是
Rackspace（贡献swift）和NASA（贡献nova）共同发起的开源项目，是一系列软件开源项目的组合。基础设施资源管理平台（类似操作系统可以管理硬件池，可以根据需求提供资源）。
![LINUXNSD_V01CLOUDDAY02_010
2](media/image27.png){width="5.760416666666667in"
height="2.720138888888889in"}
IaaS:基础设施服务,提供给消费者的服务是对所有计算机基础设施的利用,包括处理CPU,内存,存储,网络和其他基本的计算资源,用户能够部署和运行任意软件,包括操作系统和应用程序,
通常分为三种用法:公有云,私有云和混合云
华为云就是在openstack的二次开发
阿里云是自己写的闭源
## Openstack主要七大组件
1 Horizon 2 Keystone 3 Neutron 4 Cinder 5 Nova 6 Glance 7 Swift
\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--
OpenStack最新版Grizzly共有7个不同功能套件，分别是
运算套件Nova、
对象储存套件Swift、
区块储存套件Cinder、
网通套件Quantum、
身分识别套件Keystone、
镜像档管理套件Glance
仪表板套件Horizon(控制台)
\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\--
三大核心:网络/计算/存储
### 一 Horizon（控制台），
又名Dashboard
就是web展示界面操作平台，方便用户交互的
Horizon套件提供IT人员一个图形化的网页接口，让IT人员可以综观云端服务目
前的规模与状态，并且，能够统一存取、部署与管理所有云端服务所使用到的资源。
Horizon套件是个可扩展的网页式App。所以，Horizon套件可以整合第3方的服务或是产品，像是计费、监控或是额外的管理工具。 
![LINUXNSD_V01CLOUDDAY02_011](media/image28.png){width="5.760416666666667in"
height="2.0861111111111112in"}
### 二.Nova（计算）
负责创建，调度，销毁云主机
openstack核心组件，核心服务包括：实例生命周期的管理（虚拟机），计算资源的管理，对外提供Restful
API。
Nova组件主要有三个模块构成（nova-api,nova-scheduler,nova-compute）,
nova-api在表示层主要负责处理外部请求，nova-scheduler在逻辑控制层，主要负责选择那个主机创建VM，nova-compute虚拟机创建和资源分配，不提供虚拟化功能，但是支持kvm,LXC,xen等。
三个组件通过rabbit MQ进行消息传递。
![LINUXNSD_V01CLOUDDAY02_015](media/image29.png){width="5.760416666666667in"
height="2.578472222222222in"}
### 三.Neutron（网络）
负责实现SDN
主要功能：为云计算提供虚拟的网络功能，为每个不同的租户建立独立的网路环境。
三种不同的网络模式（Flat模式 Flat DHCP模式，Vlan模式
![LINUXNSD_V01CLOUDDAY02_013](media/image30.png){width="5.760416666666667in"
height="2.5972222222222223in"}
### Swift（对象存储）
目录结构存储数据
openstack核心组件，主要功能：高可用分布式对象存储服务，特点是无限和扩展没有单点故障。
### Cinder（块存储）
提供持久化块存储，即为云主机提供附加云盘
主要功能：管理所有块存储设备，为VM服务。
![LINUXNSD_V01CLOUDDAY02_014](media/image31.png){width="5.760416666666667in"
height="2.3513888888888888in"}
### 六.Glance（镜像）
提供镜像服务，装机使用
主要功能：提供虚拟机镜像的存储，查询和检索功能，为nova进行服务，依赖于存储服务（存储镜像本身）和数据库服务（存储镜像相关的数据）。
![LINUXNSD_V01CLOUDDAY02_016](media/image32.png){width="5.760416666666667in"
height="1.94375in"}
### 七.Keystone（认证）
为访问openstack各组件提供认证和授权功能，认证通过后，提供一个服务列表（存放你有权访问的服务），可以通过该列表访问各个组件
套件作为OpenStack的身分认证系统，具有中央目录，能查看哪位使用者可存取哪些服务，并且，提供了多种验证方式，包括使用者账号密码、Token（令牌）以及类似AWS的登入机制。另外，Keystone可以整合现有的中央控管系统，像是LDAP。
![LINUXNSD_V01CLOUDDAY02_012](media/image33.png){width="5.760416666666667in"
height="2.8625in"}
keystone(身份服务模块)
1）用户身份认证（Idemity）
user：用户（租户下有很多用户，验证方式用户名密码，API keys等）
kenant：租户（可以访问资源的集合）
role：角色 (一组用户可以访问资源的权限)
2）访问请求控制（Token）
Service(nova,glance,swift等服务需要在keystone上注册)
Endpoint(service暴露出来的访问地址)
Token（访问资源的令牌，具有时效性）
3)注册表服务(Catalog)
openstack服务需要注册到keystone注册表中
4)身份验证引擎（Policy）
决定用户有哪些访问控制权限
## Openstack版本与结构图
![LINUXNSD_V01CLOUDDAY02_017](media/image34.png){width="5.760416666666667in"
height="3.942361111111111in"}
![LINUXNSD_V01CLOUDDAY02_018](media/image35.png){width="5.760416666666667in"
height="3.9319444444444445in"}
仪表板套件Horizon，运算套件Nova、镜像档管理套件Glance、对象储存套件Swift、网通套件Quantum、区块储存套件Cinder、身分识别套件Keystone、
# 部署安装环境
虚拟机1: openstack
2cpu 10G内存 50G硬盘
网卡eth0 \--\>vbr eth1 \--\> prvate1
虚拟机2:nova01
2cpu 10G内存 50G硬盘
网卡eth0 \--\>vbr eth1 \--\> prvate1
## 创建img文件
\[root@room9pc01 images\]# pwd #此处的目录有node.qcow2文件
/var/lib/libvirt/images
1044 qemu-img create -f qcow2 -b node.qcow2 openstack.img 50G
1048 qemu-img create -f qcow2 -b node.qcow2 nova01.img 50G
1049 cd /etc/libvirt/qemu/ #这个目录里面有node.xml文件
1051 for i in openstack nova01; do sed \"s/node/\${i}/\" node.xml
\>/etc/libvirt/qemu/\${i}.xml; virsh define /etc/libvirt/qemu/\${i}.xml;
done
## 配置虚拟机1: openstack XML 配置
\[root@room9pc01 qemu\]# virsh edit openstack
\
\openstack\
\a8f54340-bc52-4b4f-b74f-c69d48aa6e70\
\10480000\ #保证总共10G内存以上
\10480000\
\2\
\...
\
\
\