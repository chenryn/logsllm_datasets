---
author: Fsf
category: 软件开发
comments_data:
- date: '2017-09-25 17:02:49'
  message: Good
  postip: 202.104.106.74
  username: 来自广东深圳的 Chrome 61.0|Windows 7 用户
count:
  commentnum: 1
  favtimes: 7
  likes: 0
  sharetimes: 0
  viewnum: 8943
date: '2017-09-24 15:04:31'
editorchoice: true
excerpt: '本文整理自《Debugging with GDB: the GNU Source-Level Debugger for GDB (GDB)》'
fromurl: https://sourceware.org/gdb/current/onlinedocs/gdb/
id: 8900
islctt: true
largepic: /data/attachment/album/201709/24/150421z8qnabqpphbs1a8o.jpg
permalink: /article-8900-1.html
pic: /data/attachment/album/201709/24/150421z8qnabqpphbs1a8o.jpg.thumb.jpg
related: []
reviewer: ''
selector: ''
summary: '本文整理自《Debugging with GDB: the GNU Source-Level Debugger for GDB (GDB)》'
tags:
- gdb
- 调试
thumb: false
title: 常用 GDB 命令中文速览
titlepic: true
translator: robot527
updated: '2017-09-24 15:04:31'
---
![](/data/attachment/album/201709/24/150421z8qnabqpphbs1a8o.jpg)
### 目录
* break -- 在指定的行或函数处设置断点，缩写为 `b`
* info breakpoints -- 打印未删除的所有断点，观察点和捕获点的列表，缩写为 `i b`
* disable -- 禁用断点，缩写为 `dis`
* enable -- 启用断点
* clear -- 清除指定行或函数处的断点
* delete -- 删除断点，缩写为 `d`
* tbreak -- 设置临时断点，参数同 `break`，但在程序第一次停住后会被自动删除
* watch -- 为表达式（或变量）设置观察点，当表达式（或变量）的值有变化时，暂停程序执行
* step -- 单步跟踪，如果有函数调用，会进入该函数，缩写为 `s`
* reverse-step -- 反向单步跟踪，如果有函数调用，会进入该函数
* next -- 单步跟踪，如果有函数调用，不会进入该函数，缩写为 `n`
* reverse-next -- 反向单步跟踪，如果有函数调用，不会进入该函数
* return -- 使选定的栈帧返回到其调用者
* finish -- 执行直到选择的栈帧返回，缩写为 `fin`
* until -- 执行直到达到当前栈帧中当前行后的某一行（用于跳过循环、递归函数调用），缩写为 `u`
* continue -- 恢复程序执行，缩写为 `c`
* print -- 打印表达式 EXP 的值，缩写为 `p`
* x -- 查看内存
* display -- 每次程序停止时打印表达式 EXP 的值（自动显示）
* info display -- 打印早先设置为自动显示的表达式列表
* disable display -- 禁用自动显示
* enable display -- 启用自动显示
* undisplay -- 删除自动显示项
* help -- 打印命令列表（带参数时查找命令的帮助），缩写为 `h`
* attach -- 挂接到已在运行的进程来调试
* run -- 启动被调试的程序，缩写为 `r`
* backtrace -- 查看程序调用栈的信息，缩写为 `bt`
* ptype -- 打印类型 TYPE 的定义
---
### break
使用 `break` 命令（缩写 `b`）来设置断点。
用法：
* `break` 当不带参数时，在所选栈帧中执行的下一条指令处设置断点。
* `break ` 在函数体入口处打断点，在 C++ 中可以使用 `class::function` 或 `function(type, ...)` 格式来指定函数名。
* `break ` 在当前源码文件指定行的开始处打断点。
* `break -N` `break +N` 在当前源码行前面或后面的 `N` 行开始处打断点，`N` 为正整数。
* `break ` 在源码文件 `filename` 的 `linenum` 行处打断点。
* `break ` 在源码文件 `filename` 的 `function` 函数入口处打断点。
* `break ` 在程序指令的地址处打断点。
* `break ... if ` 设置条件断点，`...` 代表上述参数之一（或无参数），`cond` 为条件表达式，仅在 `cond` 值非零时暂停程序执行。
详见[官方文档](https://sourceware.org/gdb/current/onlinedocs/gdb/Set-Breaks.html)。
### info breakpoints
查看断点，观察点和捕获点的列表。
用法：
* `info breakpoints [list...]`
* `info break [list...]`
* `list...` 用来指定若干个断点的编号（可省略），可以是 `2`， `1-3`， `2 5` 等。
### disable
禁用一些断点。参数是用空格分隔的断点编号。要禁用所有断点，不加参数。
禁用的断点不会被忘记，但直到重新启用才有效。
用法：
* `disable [breakpoints] [list...]`
* `breakpoints` 是 `disable` 的子命令（可省略），`list...` 同 `info breakpoints` 中的描述。
详见[官方文档](https://sourceware.org/gdb/current/onlinedocs/gdb/Disabling.html)。
### enable
启用一些断点。给出断点编号（以空格分隔）作为参数。没有参数时，所有断点被启用。
用法：
* `enable [breakpoints] [list...]` 启用指定的断点（或所有定义的断点）。
* `enable [breakpoints] once list...` 临时启用指定的断点。GDB 在停止您的程序后立即禁用这些断点。
* `enable [breakpoints] delete list...` 使指定的断点启用一次，然后删除。一旦您的程序停止，GDB 就会删除这些断点。等效于用 `tbreak` 设置的断点。
`breakpoints` 同 `disable` 中的描述。
详见[官方文档](https://sourceware.org/gdb/current/onlinedocs/gdb/Disabling.html)。
### clear
在指定行或函数处清除断点。参数可以是行号，函数名称或 `*` 跟一个地址。
用法：
* `clear` 当不带参数时，清除所选栈帧在执行的源码行中的所有断点。
* `clear `, `clear ` 删除在命名函数的入口处设置的任何断点。
* `clear `, `clear ` 删除在指定的文件指定的行号的代码中设置的任何断点。
* `clear ` 清除指定程序指令的地址处的断点。
详见[官方文档](https://sourceware.org/gdb/current/onlinedocs/gdb/Delete-Breaks.html)。
### delete
删除一些断点或自动显示表达式。参数是用空格分隔的断点编号。要删除所有断点，不加参数。
用法： `delete [breakpoints] [list...]`
详见[官方文档](https://sourceware.org/gdb/current/onlinedocs/gdb/Delete-Breaks.html)。
### tbreak
设置临时断点。参数形式同 `break` 一样。
除了断点是临时的之外，其他同 `break` 一样，所以在命中时会被删除。
详见[官方文档](https://sourceware.org/gdb/current/onlinedocs/gdb/Set-Breaks.html)。
### watch
为表达式设置观察点。
用法： `watch [-l|-location] ` 每当一个表达式的值改变时，观察点就会暂停程序执行。
如果给出了 `-l` 或者 `-location`，则它会对 `expr` 求值并观察它所指向的内存。例如，`watch *(int *)0x12345678` 将在指定的地址处观察一个 4 字节的区域（假设 int 占用 4 个字节）。
详见[官方文档](https://sourceware.org/gdb/current/onlinedocs/gdb/Set-Watchpoints.html)。
### step
单步执行程序，直到到达不同的源码行。
用法： `step [N]` 参数 `N` 表示执行 N 次（或由于另一个原因直到程序停止）。
警告：如果当控制在没有调试信息的情况下编译的函数中使用 `step` 命令，则执行将继续进行，直到控制到达具有调试信息的函数。 同样，它不会进入没有调试信息编译的函数。
要执行没有调试信息的函数，请使用 `stepi` 命令，详见后文。
详见[官方文档](https://sourceware.org/gdb/current/onlinedocs/gdb/Continuing-and-Stepping.html)。
### reverse-step
反向单步执行程序，直到到达另一个源码行的开头。
用法： `reverse-step [N]` 参数 `N` 表示执行 N 次（或由于另一个原因直到程序停止）。
详见[官方文档](https://sourceware.org/gdb/current/onlinedocs/gdb/Reverse-Execution.html)。
### next
单步执行程序，执行完子程序调用。
用法： `next [N]`
与 `step` 不同，如果当前的源代码行调用子程序，则此命令不会进入子程序，而是将其视为单个源代码行，继续执行。
详见[官方文档](https://sourceware.org/gdb/current/onlinedocs/gdb/Continuing-and-Stepping.html)。
### reverse-next
反向步进程序，执行完子程序调用。
用法： `reverse-next [N]`
如果要执行的源代码行调用子程序，则此命令不会进入子程序，调用被视为一个指令。
参数 `N` 表示执行 N 次（或由于另一个原因直到程序停止）。
详见[官方文档](https://sourceware.org/gdb/current/onlinedocs/gdb/Reverse-Execution.html)。
### return
您可以使用 `return` 命令取消函数调用的执行。如果你给出一个表达式参数，它的值被用作函数的返回值。
用法： `return ` 将 `expression` 的值作为函数的返回值并使函数直接返回。
详见[官方文档](https://sourceware.org/gdb/current/onlinedocs/gdb/Returning.html)。
### finish
执行直到选定的栈帧返回。
用法： `finish` 返回后，返回的值将被打印并放入到值历史记录中。
详见[官方文档](https://sourceware.org/gdb/current/onlinedocs/gdb/Continuing-and-Stepping.html)。
### until