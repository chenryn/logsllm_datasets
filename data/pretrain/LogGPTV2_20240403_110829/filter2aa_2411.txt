# Reverse Engineering by Crayon: Game-Changing Hypervisor and Visualization Analysis

**Presenters:**
- Daniel A. Quist
- Lorie M. Liebrock
- Offensive Computing, LLC
- New Mexico Tech
- Defcon 17, Las Vegas, NV

## Introduction
Reverse engineering (RE) is a challenging and time-consuming process that requires a specialized skill set. Traditional tools, while advanced, often do not provide adequate views, especially for static analysis. Software armoring techniques make the process even more difficult.

## Difficulties of Reverse Engineering
- **Time-Consuming Process:** RE can be extremely time-intensive.
- **Skill Acquisition:** Acquiring the necessary skills is challenging.
- **Inadequate Tools:** Even with advanced tools, the views provided are often insufficient.
- **Static Analysis Focus:** Many tools focus on static analysis, which can be limiting.
- **Software Armoring:** Techniques such as obfuscation, packing, and encryption make RE even more difficult.

## Process for Reverse Engineering
1. **Setup an Isolated Runtime Environment:**
   - Use virtual machines (e.g., VMWare, Xen, KVM) to create a controlled environment.
   - Protect yourself from malicious code.
   - Establish a known-good baseline environment.
   - Enable quick backtracking if something goes wrong.

2. **Execution and Initial Analysis:**
   - Goal: Quickly determine what the program is doing without delving into assembly.
   - Look for:
     - Changes to the file system.
     - Changes in system behavior.
     - Network traffic.
     - Overall performance.
     - Ads or changes in browser settings.

3. **Remove Software Armoring:**
   - Program protections include packers, self-modifying code, and various obfuscation techniques.
   - Tools like OllyBonE, Saffron, Polyunpack, Renovo, Ether, Azure, and others are used to remove these protections.
   - My research uses Ether.

4. **Packing and Encryption:**
   - Self-modifying code with small decoder stubs.
   - Decompression of the main executable.
   - Restoration of imports.
   - Tricks to obscure relocations and use bogus values for unimportant fields.

5. **Software Armoring:**
   - Compressed, obfuscated, and hidden code.
   - Virtual machine detection.
   - Debugger detection.
   - Shifting decode frames.

6. **Troublesome Protections:**
   - **Virtual Machine Detection:** Techniques like Redpill, ocvmdetect, and Paul Ferrieâ€™s paper.
   - **Debugger Detection:** Methods such as `IsDebuggerPresent()` and EFLAGS bitmask.
   - **Timing Attacks:** Analyzing the value of RDTSC before and after execution.

7. **Thwarting Protections:**
   - **Circumvention Methods:**
     1. Know about all the protections beforehand and disable them.
     2. Make yourself invisible.

8. **Virtual Machine Monitoring:**
   - **Soft VM Based Systems:** Tools like Renovo, Polyunpack, and Zynamics Bochs unpacker.
   - **Problems:**
     - Easy detection of virtual machines.
     - Intel CPUs were not traditionally designed for virtualization.
     - Inability to emulate x86 bug-for-bug.

9. **OS Integrated Monitoring:**
   - **Tools:** Saffron, OllyBonE.
   - **Features:**
     - Page-fault handler-based debugger.
     - Abuse of the supervisor bit on memory pages.
     - High-level executions per page.
   - **Problems:**
     - Destabilizes the system.
     - Requires dedicated hardware.
     - Fine-grain monitoring is not possible.

10. **Fully Hardware Virtualizations:**
    - **Ether (A. Dinaburg, P. Royal):**
      - Xen-based hypervisor system.
      - Base functions for monitoring system calls, instruction traces, and memory writes.
      - Interactions done via memory page mapping.
    - **Problems:**
      - Unpacking code primitive.
      - Dumps mangled and not possible to disassemble.
      - Old version of Xen hypervisor.

11. **Disassembly and Code Analysis:**
    - The most nebulous part of the process, heavily reliant on intuition and experience.
    - Example: Reversing the MP3 Cutter and MIRC programs.
    - Looking at assembly is tedious and suffers from "not seeing the forest for the trees" syndrome.
    - Analyst fatigue due to high attention requirements.

12. **Finding Interesting and Relevant Portions of the Executable:**
    - Relies on intuition and experience.
    - Typical starting points:
      - Look for interesting strings.
      - Examine API calls.
      - Analyze interactions with the OS.
    - This process is fundamentally imprecise, tedious, and frustrating for both beginners and experts.

## Contributions
- **Modifications to Ether:**
  - Improve malware unpacking.
  - Enable advanced tracing mechanisms.
  - Automate tedious portions.
- **Visualizing Execution for Reversing and Analysis (VERA):**
  - Speed up disassembly and identification of interesting portions of an executable.
  - Faster identification of the Original Entry Point (OEP).

## Ether System Architecture
- **Extensions to Ether:**
  - Move unpacking code from the hypervisor to userspace.
  - Better user mode analysis.
  - PE Repair system for disassembling executables.
  - Enhanced monitoring system for executables.

## Results
- **Close to Covert Analysis:**
  - Ether is nearly invisible.
  - Still subject to bluepill detections.
  - Fine-grain resolution of program execution.
  - Application memory monitoring and full analysis capabilities.
  - Dumps from Ether can be loaded in IDA Pro without modification.

## Open Problems
- **Unpacking Process:**
  - Produces many candidate dump files.
  - Need to identify the OEP.
  - Import rebuilding remains an issue.
  - Need to perform analysis using the new tracing tool.

## Visualization of Trace Data
- **Goals:**
  - Quickly visually subvert software armoring.
  - Identify modules of the program (initialization, main loops, end of unpacking code).
  - Determine where self-modifying code ends (OEP detection).
  - Discover dynamic runtime program behavior.
  - Integrate with existing tools.

## Visualizing the OEP Problem
- **Visualization:**
  - Each block (vertex) represents a basic block executed in the user mode code.
  - Lines represent transitions.
  - Thicker lines indicate more frequent execution.
  - Colors represent areas of memory execution.

## VERA
- **Visualization of Executables for Reversing and Analysis:**
  - Windows MFC Application.
  - Integrates with IDA Pro.
  - Fast and has a small memory footprint.

## VERA Architecture
- **Visualizing Packers:**
  - Memory regions marked for PE heuristics.

## Demo
- **Netbull Virus (Not Packed):**
  - Zoomed view.
- **UPX, ASPack, FSG, MEW, TeLock:**
  - Visualizations of different packers.

## Future Work
- **General GUI and Bug Fixes:**
  - Integration with IDA Pro.
  - Memory access visualization.
  - System call integration.
  - Function boundaries.
  - Interactivity with the unpacking process.
  - Modify the hypervisor to work with WinDBG, OllyDbg, and IDA Debugger.

## Conclusions
- **Visualizations:**
  - Make it easy to identify the OEP.
  - No need for statistical analysis of data.
  - Program phases are readily identified.
  - Graphs are relatively simple.
  - Preliminary user studies show promise for speeding up reverse engineering.

## Questions?
- These slides are out of date! Find the latest ones at: [http://www.offensivecomputing.net/](http://www.offensivecomputing.net/)