is a non-trivial source of these problems. For example, in
FAUCET-355 [81] ( Figure 5), Guage crashed because of a
misconﬁgured data type between Gauge and InﬂuxDB [82].
Moreover, as highlighted in prior work [83], a majority
of open-source projects utilize outdated dependencies, which
often makes the system vulnerable to attacks. SDNs are
no exception; for example, in CVE-2018-1000615 [84] we
observe that an outdated version of OVSDB [85] lead to
a Denial of Service (DoS) attack on ONOS. In Table II,
we provide a broader analysis of vulnerabilities in ONOS
using dependency-check tool [86] and cross-checking with
NVD [87]. Our analysis shows that ONOS’ vulnerability
increased over time as more dependencies were added with
version updates. These vulnerabilities were ﬁxed by changing
the libraries, which makes them more critical.
Takeaway. A strong implication of this analysis is a need
to design techniques to discover, track, and detect API mis-
matches. While techniques existing for tracking dependen-
Sub-categories of
Conﬁguration Bugs
Controller
Data Plane
Third Party
FAUCET ONOS
CORD
52.9%
11.7%
35.4%
60%
15%
25%
64.2%
14.2%
21.6%
Table III: Sub-Categories for Conﬁguration Bugs.
Authorized licensed use limited to: Tsinghua University. Downloaded on October 11,2021 at 09:22:53 UTC from IEEE Xplore.  Restrictions apply. 
105
Figure 5: Patch for FAUCET- 355 [81], where InﬂuxDB [82] only
supports one integer type, int64. But initially OpenFlow stats were
logged as uint64 which were converted to ﬂoat64 to prevent an
overﬂow.
cies [88], [89], these techniques do not update the code when
dependencies are intentionally updated.
Network Events (19.8%): Despite being designed to han-
dle network events explicitly, the controller contains a non-
trivial number of bugs (19.8%) that are triggered by when
it processes network events. Speciﬁcally, these bugs are tried
while the controller is attempting to process OpenFlow mes-
sages 2. These bugs are often addressed by adding additional
logic or adding exception handling code, indicating that the
existing code is missing crucial logic for handling edge cases.
Takeaways. These observations highlight a need for novel
fault
tolerance techniques that either automatically rewrite
code, or alter properties of the network event such that
different code paths and cases are explored.
Hardware Reboots (8.4%): Hardware often reboots for
a variety of reasons. Unsurprisingly a non-negligible set of
bugs (8.4%) are due to these reboot events. Surprisingly, we
observed that hardware reboot-triggered bugs are related to
reboots of the optical components (e.g., ONU, OLT etc.),
which points to the importance of tracking bindings between
hardware conﬁgurations and their corresponding components
in the abstraction layer (e.g., VOLTHA [90]). For example, in
VOL-549 [91] ( Figure 6), the VOLTHA core thread gets stuck
waiting for the adapter to connect if OLT reboots after initial
activation. This bug was ﬁxed by adding a timeout variable.
Takeaways: Anecdotal evidence suggests that such bugs
exist because testing environments lack representative failures
and equipments [92]. This is a clear sign that emerging
approaches to apply Chaos-Monkey style [93] fuzz testing to
SDNs are needed, and more work should be done to extend
the practicality of such techniques.
Broader Takeaways for Research: A signiﬁcant set of
bugs are due to interactions between the controller and external
services (e.g., conﬁguration ﬁles, network events, or function
calls). These observations suggest that these controllers lack
sufﬁcient code for checking for valid inputs. Additionally,
2In particular, we observe that 44.4% are due to processing link/switch
events (i.e., link-up or link-down), 33.3% due to Packet-In, and 22.3% due to
GetStatistics message (i.e., counter related information).
Figure 6: Patch for VOL-549 [91], where timeout was intro-
duced for the GRPC connection to prevent VOLTHA from
getting stuck when OLT was rebooted.
these bugs demonstrate a tight-coupling between the controller
and the broader environment. As the environment evolves, care
must be taken to ensure that the controller’s codebase evolves
accordingly. We need better tools to track dependencies and
highlighting mismatches. Additionally, the developers of the
SDN controllers need to introduce better error-guarding logic.
Finally, while there is signiﬁcant work [94]–[97] on addressing
system misconﬁguration, there is very little work within the
SDN space.
B. Resolution Time for Triggers
Figure 7 shows the CDF for resolution times for bugs
on the basis of the triggers categorised in Table I. In the
above analysis, we observed that most bugs are triggered by
conﬁguration, but we also found it has the longest tail, which
reveals that they are the most severe bug trigger category that
could take considerable time to be resolved. It is observed
that ONOS has a longer tail as compared to CORD in most of
the trigger categories (Conﬁguration, External call, Network
event) which could be attributed to its more complex structure
(LoC, classes, functionalities). For example, we found a seri-
ous ONOS-5992 [98] which impacted multiple versions before
it could be ﬁxed, and the ﬁx required addressing multiple bugs:
In this bug, killing one ONOS instance resulted in a cluster
failure. On the contrary, we observed that bugs triggered
by reboot have a longer tail for CORD than ONOS: this
was because CORD has specialized code for disaggregated
optical equipment, which involves complex conﬁgurations,
e.g., EPON, GPON [99] and complex logic for tracking the
state of these devices.
VI. ANALYSIS OF SOFTWARE ENGINEERING PRINCIPLES
In this section, we analyze the software engineering prac-
tices of the different controllers. We start with an analysis of
technical debt [100] (§ VI-A) and how it impacts code ﬁxes.
Then we perform a burn analysis (§ VI-B) of FAUCET to
understand how changes to the codebase impact FAUCET’s
bugs and how they are triggered.
Authorized licensed use limited to: Tsinghua University. Downloaded on October 11,2021 at 09:22:53 UTC from IEEE Xplore.  Restrictions apply. 
106
Figure 7: CDF of Resolution Time for Triggers.
A. Smell-Analysis for Code-quality
SDN controllers are subject to a large number of code
changes over time to meet the evolving demands and ﬁx exist-
ing bugs; however, such changes eventually lead to software
technical debt [100] of software degradation. Code-smells is
a popular software engineering technique for analyzing code-
bases to determine and capture a form of software degradation
that is correlated to bugs [101]–[103]. We perform code-smell
analysis on several different release versions of ONOS and
analyze ONOS’ software degradation over time. Additionally,
we use the refactoring techniques [104] within the code-smell
analysis to co-relate and understand the type of bug ﬁxes, i.e.,
No Logic Changes, Add New Logic, Change Existing Logic.
for our code-smell analysis:
Designite utilizes code-quality metrics, and it supports 19
architecture smells along with seven design smells. In Figure
8, we present
results for various ONOS
releases. Next, we describe the smells and focus on those
with the most variation across different versions of ONOS.
We use Designite [105]
the code-smell
Broadly, there are two classes of smells: architecture and de-
sign. Architecture smells capture system-level impact spanning
across multiple components, whereas design smell captures
component level impact. Note: while plot Hub-like Modular-
ization [106] and Missing Hierarchy [107], we do not analyze
them because their numbers are low and they have slight
variation across controller versions.
1) Architecture smell
[108]: We observe that while
the number of commits per release decreased or became
constant (Figure 10), the architecture smells scores (i.e., God
Component, and Unstable dependency smell, in Figure 8)
remain constant. This constant architecture smell score,
despite a decrease in commits, indicates constant technical
debt. We believe this constant debt is potentially due to a
gap between developer practices for developing patches and
refactoring techniques. Next, we elaborate on the speciﬁc
Figure 8: Distrubution of Six Code Smells. A: God Component,
B: Unstable Dependency, C: Insufﬁcient Modularization, D: Hub-
like Modularization, E: Missing Hierarchy, F: Broken Hierarchy in
ONOS Cores Versions.
scores:
God component [109]. The God component captures the
division of functionality across components and indicates
code modularity,
i.e., modularity of controller design. We
observe in Figure 8 that the God component metric is mainly
constant. Although the smell metric indicates the level of
controller modularity is not growing, we observe that the
average number of classes is growing for controllers; this
implies that the controller architecture consists of huge classes
that impact overall modularity. For example, while the metric
remains stable,
the package net.intent.impl had an
increase in the number of classes from 49 to 107 from ONOS
1.12 to 2.3.0. We recommend that developers improve their
codebase by making logical changes by decomposing huge
classes and potentially changing the controller’s Control-Flow
graph.
Unstable dependency smells. This smell uses the State
Dependency Principle (SDP) [110] to capture the stability
of dependencies within the controller codebase. Unlike other
smells, these can be difﬁcult to refactor because modifying
one dependency can lead to cascading changes to other
dependencies. Fortunately, we observe in Figure 8 that the
unstable dependency smells have decreased steadily from
versions 1.12–2.3: this implies that developers can more freely
make changes to dependencies without fear of introducing
bugs.
2) Design smells [111]: As with any software package,
ONOS’s initial code releases consist of burst in commits due
to prototyping new functionality with limited features and
potentially unstable codebase: this is reﬂected in Figure 8
as an initial
spike between versions 1.12–1.14 in the
Authorized licensed use limited to: Tsinghua University. Downloaded on October 11,2021 at 09:22:53 UTC from IEEE Xplore.  Restrictions apply. 
107
Design smells scores (Insufﬁcient modularization, Hub-like
modularization, Missing hierarchy, and Broken Hierarchy).
However, after version 1.14, we observed a steady decrease
in the number of commits and that
the Design smells
remained unchanged or
largely constant. We note that
constant design smells are problematic because design smells
have a causal relationship with architecture smells [112]: in
short, design smells cause architecture smells, and thus to
improving design smells will also improve architecture smells.
Insufﬁcient modularization [106]. This metric captures
the modularization of an individual class (Note: this differs
from the God component, which captures package-level
modularization features). In general, developers can improve
this score by changing existing logic and decomposing large
and complex classes.
Broken Hierarchy [107]. This smell analyzes the rela-
tionships between super-types and sub-types and checks to
ensure that sub-types do implement features of their types.
This smell is generally an indicator of missing logic. For
example, in Figure 9, we present Run class which has the
ElectorOperations super-type, note that the Run class doesn’t
include methods from its supertype ElectionOperation. After
a major upgrade (ONOS-6594 [113] ) which addressed severe
architecture ﬂaws, the Run class (and other related classes)
was changed to be a subtype of AsyncLeaderElector – this
change ﬁxed the smell.
From Figure 8, we observe an initial spike in broken
hierarchy smells (versions 1.12–1.14) demonstrating poor code
modularization, and then we observe a reduction (versions
1.14–2.3) which indicates logic changes (add-logic, change
existing logic) and restructuring of the existing methods. This
conclusion supports the broad set of changes we observe for
many of our bug ﬁxes.
Figure 9: Broken Hierarchy in class run as it doesn’t share
an IS-A Relation with it’s Super-type.
B. Burn Analysis
This section focuses our burn analysis on FAUCET because
of its size (1000’s LOC) and highly modular structure. Both
Figure 10: ONOS Github Analysis for number of Commits in each
Version Upgrade.
properties make FAUCET an ideal candidate for burn analysis.
Unfortunately, due to ONOS and CORD’s complexity and the
interleaving of components within individual source ﬁles, we
are unable to apply burn analysis.
We begin in Figure 11 by characterizing commits and
changes to FAUCET’s based on the functionality’s triggering
events: (1) Conﬁguration (38%), (2) Network Functionality
(35%), (3) External Abstraction (27%).
Unsurprisingly, we observe that most commits focus on
increasing network function, which aligns with an SDN
controller’s central role,
to provide control over the
network. In particular, we observed that most commits are
focused on ﬁxing and adding new network functionalities.
i.e.,
The conﬁguration-related commits are the second major
category of commits. We believe this can be attributed to
complex cross-layer conﬁgurations interactions identiﬁed in
Section V.
Finally, External Libraries’ dynamic nature poses a unique
challenge for developers who need to make continual modi-
ﬁcations to their code to ensure interoperability. To illustrate,
In Table IV, we present a list of external dependencies for
FAUCET and the number of version changes required. We ob-
serve that critical packages, e.g., RYU (network management
framework) and chewie (IEEE 802.1x implementation) are
subject to most changes and have shorter release cycles than
the controller itself. This mismatch implies that the controller
will always use outdated versions to introduce correct and
security problems (as illustrated in Section V). For example,
in FAUCET-2399 [114], an update to chewie prevented the
installation of FAUCET. A move towards ﬂexible versioning
practices [115] with a balance between agility and predictabil-
ity in core packages could reduce these bugs.
Authorized licensed use limited to: Tsinghua University. Downloaded on October 11,2021 at 09:22:53 UTC from IEEE Xplore.  Restrictions apply. 
108
Figure 11: Distribution of Commits in FAUCET Core Across Three
Functional Subsystems of a Controller. A: Conﬁguration, B: Network
Functionality, C: External Abstraction.
Dependency Name
chewie
eventlet
inﬂuxdb
msgpack
networkx
pbr
prometheus client
pyyaml
ryu
beka
pytricia
# version changes
19
5
1
2
1
1
8
6
28
5
1
Description
802.1X standard implementation
networking library
time series database
binary serialization
Network Analysis
management of setuptools packaging
Monitoring system
YAML Parser
component-based SDN
BGP Speaker
IP Address Lookup
Table IV: Burn-down analysis for FAUCET dependency require-
ments.
VII. BROADER IMPLICATIONS
In this section, we take a step back to understand the
broader applicability and implications of our study on network
operators. We focus on providing guidelines for (1) selecting
controllers (§ VII-A), (2) debugging open issues (§ VII-B),
and (3) navigating emerging diagnosis frameworks (§ VII-C).