	} while ((int)buffer[0x270] > 1 ^
				garbled_buf_copy[i + 0x18d] ^
				*(uint32_t *)(&DAT_0041e8c0 + (garbled_buf_copy[i + 1] & 1) * 4);
			i = i + 1;
		}
		while (i > 1 ^
				garbled_buf_copy[i + -0xe3] ^
				*(uint32_t *)(&DAT_0041e8c0 + (garbled_buf_copy[i + 1] & 1) * 4);
			i = i + 1;
		}
		garbled_buf_copy[0x26f] =
			(garbled_buf_copy[0x26f] & 0x80000000 | *garbled_buf_copy & 0x7fffffff) >> 1 ^
			garbled_buf_copy[0x18c] ^ *(uint32_t *)(&DAT_0041e8c0 + (*garbled_buf_copy & 1) * 4);
		garbled_buf_copy[0x270] = 0;
	}
	uVar1 = garbled_buf_copy[garbled_buf_copy[0x270]];
	garbled_buf_copy[0x270] = garbled_buf_copy[0x270] + 1;
	uVar1 = uVar1 >> 0xb ^ uVar1;
	uVar1 = (uVar1 & 0x13a58ad) > 0x12 ^ uVar1;
}
uint32_t buffer[0x271];
uint32_t get_garbled_output(uint32_t initial_value)
{
	uint32_t res;
	garble_buf(buffer, initial_value);
	res = other_garble(buffer);
	return res;
}
const char letters[] = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyz";
#define NELEMENTS(arr) (sizeof(arr) / sizeof(arr[0]))
int main(int argc, _TCHAR* argv[])
{
	DWORD i, j, k, l;
	DWORD num;
	CHAR* pNum = (CHAR*)&num;
	assert(get_garbled_output(0x46303952) == 0x098A04B2);
	if (argc \n"), argv[0]);
		return 1;
	}
	DWORD target;
	target = _ttoi(argv[1]);
	_tprintf(_T("Searching for an initial value which would have produced the following value: %d (0x%x)\n"), target, target);
	DWORD limit = NELEMENTS(letters);
	for (i = 0; i  FindGarbleInitVal.exe 12281342
Searching for an initial value which would have produced the following value: 12281342 (0xbb65fe)
0x61774d56
```
We finally have the key:
```
0x00, 0x13, 0x37, 0x8e, 0xab, 0x66, 0x56, 0x4d, 0x77, 0x61, 0x30, 0x30, 0x30, 0x30
```
Now we can decrypt the file:
```c
#include "stdafx.h"
#include 
#include 
#include 
#include 
#include 
#include 
#pragma comment(lib,"Crypt32.lib")
#define CHUNK_SIZE		(1024)
#define PASSWORD_LENGTH (14)
void PrintError(LPCTSTR error_string, DWORD error_code)
{
	_ftprintf(stderr, TEXT("\nAn error occurred in the program. \n"));
	_ftprintf(stderr, TEXT("%s\n"), error_string);
	_ftprintf(stderr, TEXT("Error number %x.\n"), error_code);
}
int main(int argc, _TCHAR* argv[])
{
	HANDLE hSourceFile		= INVALID_HANDLE_VALUE;
	HCRYPTPROV hProv		= NULL;
	HCRYPTKEY  hKey			= NULL;
	HCRYPTHASH hHash		= NULL;
	BYTE	password[PASSWORD_LENGTH];
	BYTE	read_buffer[CHUNK_SIZE + 1] = { 0 };
	LPTSTR	src_file_path;
	LPTSTR	base64_password;
	DWORD	file_size;
	DWORD	total_bytes_read = 0;
	DWORD	size_to_decrypt = 0;
	DWORD	password_length;
	BOOL	is_final_chunk = 1;
	if (argc   [size_to_decrypt]\n"), argv[0]);
		return 1;
	}
	src_file_path	= argv[1];
	base64_password = argv[2];
	if (argc >= 4)
	{
		size_to_decrypt = _ttoi(argv[3]);
	}
	password_length = sizeof(password);
	if (CryptStringToBinary(base64_password, 0, CRYPT_STRING_BASE64, password, &password_length, NULL, NULL) != TRUE)
	{
		PrintError(TEXT("Invalid password!\n"), GetLastError());
		goto exit;
	}
	hSourceFile = CreateFile(src_file_path, FILE_READ_DATA,	FILE_SHARE_READ, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL);
	if (INVALID_HANDLE_VALUE == hSourceFile)
	{
		PrintError(TEXT("Error opening source file!\n"), GetLastError());
		goto exit;
	}
	file_size = GetFileSize(hSourceFile, NULL);
	if ( (size_to_decrypt  file_size) )
	{
		size_to_decrypt = file_size;
	}
	if (CryptAcquireContext(&hProv, _T("DataSafeCryptContainer"), 0x0, 0x18, 0x50) != TRUE)
	{
		PrintError(TEXT("Error with CryptAcquireContextW!\n"), GetLastError());
		goto exit;
	}
	if (CryptAcquireContext(&hProv, _T("DataSafeCryptContainer"), 0x0, 0x18, 0x48) != TRUE)
	{
		PrintError(TEXT("Error with CryptAcquireContextW!\n"), GetLastError());
		goto exit;
	}
	if (CryptCreateHash(hProv, 0x8003, 0, 0, &hHash) != TRUE)
	{
		PrintError(TEXT("Error with CryptCreateHash!\n"), GetLastError());
		goto exit;
	}
	if (CryptHashData(hHash, (BYTE *)password, 0xe, 0) != TRUE)
	{
		PrintError(TEXT("Error with CryptHashData!\n"), GetLastError());
		goto exit;
	}
	if (CryptDeriveKey(hProv, 0x6610, hHash, 0, &hKey) != TRUE)
	{
		PrintError(TEXT("Error with CryptDeriveKey!\n"), GetLastError());
		goto exit;
	}
	while (total_bytes_read > 0x1f)
    decrement_index = (size >> 0x1f) + size
    size = decrement_index + 1
    decrement_index = encrypted_length + decrement_index * -0x2e3
    return (size, decrement_index)
def main():
    with open(output_filename, "rb") as f, open("phase1.bin", "wb") as o:
        dd_serial = readXorInt(f, MAGIC)
        print ("Disk drive serial: {}".format(hex(dd_serial)))
        o.write(MAGIC.to_bytes(4, byteorder="little"))
        while True:
            res = readXorInt(f, dd_serial)
            if res is None:
                break
            o.write(res.to_bytes(4, byteorder="little"))
    with open("phase1.bin", "rb") as f, open("phase2.bin", "wb") as o:
        encrypted_length = os.fstat(f.fileno()).st_size - 2988
        print ("Length of encrypted message: {}".format(encrypted_length))
        readXorInt(f, 0) # Dummy read, we already have the dd_serial
        padded_md5 = bytearray()
        for i in range(4 * 2):
            dword = readXorInt(f, 0)
            padded_md5 += dword.to_bytes(4, byteorder='little')
        padded_md5 = binascii.hexlify(padded_md5)
        assert (padded_md5[::2] == b"0" * 32)
        md5 = padded_md5[1::2]
        print("MD5: {}".format(md5))
        mac = mac_prefix + find_md5(input_filename, mac_prefix, 3, md5)
        mac_hex = binascii.hexlify(bytes(mac))
        print ("MAC Address: {}".format(mac_hex))
        garbles = []
        ciphertext = bytearray()
        bytes_read = 0
        i = 0
        size, decrement_index = get_size_and_decrement_index(encrypted_length)
        while bytes_read < encrypted_length:
            if i == decrement_index:
                size -= 1
            garbles.append(readXorInt(f, 0))
            ciphertext += f.read(size)
            bytes_read += size
            i += 1
        o.write(ciphertext)
    bios_serial_search = subprocess.check_output([r"FindGarbleInitVal.exe", str(garbles[0])]).decode("ascii")
    print (bios_serial_search)
    bios_serial = int(bios_serial_search.split("\n")[1], 0)
    password = bytes(mac) + bios_serial.to_bytes(4, byteorder='little') + dd_serial.to_bytes(4, byteorder='little')
    print ("Password: {}".format(binascii.hexlify(password)))
    plaintext_chunk = subprocess.check_output([r"CryptDecrypt.exe", 
                                               "phase2.bin", 
                                               base64.b64encode(password).decode("ascii"),
                                               "1024"])
    print ("Output: \n")
    print (plaintext_chunk.decode("ascii"))
if __name__ == "__main__":
    main()
```
The output (we cut the plaintext at 1024 bytes since otherwise we get ~36K of padding):
```
python solve.py
Disk drive serial: 0x30303030
Length of encrypted message: 35936
MD5: b'0949b46b73e3af6f5afc81955367295c'
MAC Address: b'0013378eab66'
Searching for an initial value which would have produced the following value: 12281342 (0xbb65fe)
0x61774d56
Password: b'0013378eab66564d776130303030'
Output:
OUR BIG SECRET IS AT 9f96b2ea3bf3432682eb09b0bd213752.xyz/be76e422d6ae42138d73f664e6bb9054

```
![](images/success3.png)