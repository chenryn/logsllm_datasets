through network sniﬃng, we have the possibility of constructing new rules to
detect more attacks as well as reﬁning existing rules to produce more accurate
results.
32
M. Almgren and U. Lindqvist
4.3 Summary
Basically, our module extracts all transaction information from the Web server
and packs it into a format that the analysis engine can understand. The module
then ships oﬀ the information (through multiple steps due to the aforementioned
implementation issues) to the analysis engine located at a separate host. No
changes to the analysis engine were necessary even for detection of attacks using
the encrypted SSL channel, so the module and the network-based event data
collector could be used interchangeably with the same knowledge base. If we
want to capitalize on the extra information we gain by using the module, we
obviously need to develop new detection rules.
5 Monitor Performance
From a performance standpoint, the application-integrated module does not do
anything computationally intensive. It simply accesses a few variables and for-
mats the information before it is sent on. This should not decrease the server
performance. However, we would like to have a more substantial claim that our
approach is viable. One way would be to let the module include a call to a timing
function (in C) to show how much execution time is spent inside the module. We
decided against this measure, as we are more interested in measuring the user
experience when an entire monitor is running. This means that we conﬁgured
the module to send the data to the eXpert-HTTP analysis engine on another
host, as depicted in Fig. 2.
WebLoad from RadView Software is an advanced Web application testing
and analysis package [10]. Among its many features and options, it allows us to
specify a single URL that will be continuously fetched during a speciﬁed time
interval. WebLoad measures the round-trip time for each transaction, giving a
fair measure of the user experience with the network and the server. We used
the free evaluation version of WebLoad, which has some restrictions compared
to the full-blown commercial version. However, those restrictions (no support for
SSL and a maximum of 12 virtual clients) did not signiﬁcantly limit our ability
to evaluate the performance of our module.
We set up four runs, each lasting 60 minutes and using 10 virtual clients
on a single physical client host. We used two diﬀerent types of URLs, the ﬁrst
returning a Web page consisting of about 50 KB of text and a 12 KB JPEG
image, while the second caused the execution of a CGI program. A summary
of the results is in Table 2. The absolute values may seem somewhat high, but
are due to the relatively low-end server hardware conﬁguration. The relative
diﬀerence between running the monitor or not is so small that it is probably
only caused by the CPU load imposed by the auxiliary communications process
and eFunnel running in parallel with the Web server. In fact, we believe that
the results conﬁrm that a future application-integrated module can have zero
performance impact (with respect to response time) on the Apache application,
as explained below.
In Fig. 1, we show the request cycle for the server. The module performs
logging after the request has been sent back to the client. For this reason, we
Application-Integrated Data Collection for Security Monitoring
33
Table 2. Performance measurements
Round-trip
time
(seconds)
median
average
std. deviation
Page
Page
without with
monitor monitor
1.486
1.499
0.057
1.517
1.521
0.059
Impact
2.1%
1.5%
CGI
CGI
without with
monitor monitor
1.192
1.195
0.034
1.229
1.238
0.048
Impact
3.1%
3.6%
expect that it is possible to postpone the penalty of the module until the next
request. In Fig. 3, we show details of a possible scenario of what could happen
in the server. The server spawns several child processes to handle new requests.
As long as there are enough children, the penalty of the module does not need
to be noticeable, as a child can ﬁnish logging before it receives the next request
to handle. Under heavy load, where a request would have to wait for logging of
the previous request, this would of course be diﬀerent.
Apache/1.3.6 behaves in a diﬀerent way from what is depicted in Fig. 3.
Depending on the content sent back to the client, we observed a diﬀerent behav-
ior. We suspect that this depends on diﬀerent implementations of the so-called
Content-Handlers [12].
request
response
1
2
3
4
logging
by
module
Fig. 3. Details of a possible scenario for Web server request handling. The numbers
denote parallel processes ready to serve a new request
We did not stress test the Web server in the measurements described above,
for two reasons. First, we have measured the whole system and we cannot at-
tribute the diﬀerence in time to any speciﬁc reason. A stress test also aﬀects the
server and the operating system, neither of which is under investigation in this
article. Second, we believe that many commercial server parks are built for peak
needs and are therefore normally underutilized.
34
M. Almgren and U. Lindqvist
6 Related Work
The concept of application-based IDSs is not new, and there are indications
that this would be the next big ﬁeld to explore for commercial IDS vendors.
There are some IDSs that are capable of monitoring ﬁrewalls [6]. In contrast,
we are currently aware of only one single example of a commercial Web server
IDS, AppShield from Sanctum, Inc. [11]. It is a proxy that overlooks the HTML
pages sent out. For example, it scans HTML forms sent from the server, and
makes sure that the information returned is valid (e.g., allows the use of hidden
ﬁelds). Even though it actively monitors the Web server, it is not integrated into
a greater IDS framework.
The closest to our approach is the work done by Burak Dayioglu [5]. His
module simply matches the current request with a list of known vulnerable CGI
programs. As the analysis is performed in line with the data collection, there is
a greater risk of reduced server performance, especially if the list grows large.
7 Improvements
The module prototype described in this paper is the ﬁrst step in the explo-
ration of the possibilities of application-integrated data collection for IDS. By
extending the knowledge base of the IDS to fully utilize the information available
through the module, we hope to improve detection rates and reduce false-alarm
rates. A natural step is also to develop similar data collection modules for other
server applications, such as FTP, e-mail, databases, and Web servers other than
Apache. We already have a working prototype for the iPlanet Web server.
It could also be interesting to have an analysis engine compare the transaction
data from the application-integrated module with data from network sniﬃng.
The subset of data items that is available to both collectors should normally be
identical, except when someone actively tries to fool one of the collectors. This
could potentially enable detection of advanced attacks that try to circumvent
the IDS.
In Section 4, we described the trade-oﬀ between preemptive capabilities (ap-
plication-integrated analysis) and low performance impact (application-integrat-
ed data collection but external analysis). We could have a two-tier architecture
where the application-integrated module performs a quick and simple analysis
before the request is granted by the application and then passes the data on
to an external advanced analysis engine. If the ﬁrst analysis detects an attack
attempt, it could cause the request to be denied. The second analysis could also
pass feedback to the ﬁrst, such as the name of a host that has launched an attack
and should not be serviced again. Instead of outright denying the request, the
application-integrated module could suspend a request it ﬁnds suspicious until
the external analysis engine has reached a conclusion. By tuning the ﬁrst ﬁlter,
we could restrict the performance penalty to a small subset of all requests, but
still be able to thwart attacks.
Application-Integrated Data Collection for Security Monitoring
35
8 Conclusions
We have presented an application-integrated approach to data collection for
intrusion detection. By being very specialized, the module is closely tailored to
be part of the application and have access to more information than external
monitors, thus being able to discover more attacks but also to reduce the number
of false alarms. Because each module is speciﬁc to one application product,
coverage of many products could lead to an increased development cost, but we
showed several reasons why that is not a severe limitation of this approach.
If this approach becomes popular, we expect vendors to provide an API for
similar products in the future to stay competitive. This means very little extra
eﬀort is needed to include this type of monitor in a component-based IDS, such as
EMERALD. We also showed the advantages with our prototype for the Apache
Web server. It gave us access to information internal to the server, which helped
the IDS understand how the server actually parsed the request. The module had
access to the decrypted request, even if it was transported through SSL over the
wire. As we clearly separated the data collection from the analysis engine, the
performance penalty was negligible. The knowledge base could be used with no
change, thus leveraging previous investments.
Acknowledgments. Phillip Porras and Steven Dawson of SRI International
made an early prototype design and implementation of a transaction-data col-
lection module for Apache. Their work served as an example and inspiration
upon which we based the implementation presented in this paper.
References
[1] M. Almgren, H. Debar, and M. Dacier. A lightweight tool for detecting web server
attacks. In Proceedings of the 2000 ISOC Symposium on Network and Distributed
Systems Security, pages 157–170, San Diego, California, Feb. 2–4, 2000.
[2] W. R. Cheswick and S. M. Bellovin. Firewalls and Internet Security: Repelling
the Wily Hacker. Addison-Wesley, 1994.
[3] T. E. Daniels and E. H. Spaﬀord.
Identiﬁcation of host audit data to detect
attacks on low-level IP vulnerabilities. Journal of Computer Security, 7(1):3–35,
1999.
[4] T. E. Daniels and E. H. Spaﬀord. A network audit system for host-based intru-
sion detection (NASHID) in Linux. In Proceedings of the 16th Annual Computer
Security Applications Conference, New Orleans, Louisiana, Dec. 11–15, 2000.
[5] B. Dayioglu, Mar. 2001. http://yunus.hacettepe.edu.tr/˜burak/mod id/.
[6] K. A. Jackson. Intrusion detection system (IDS) product survey. Technical Re-
port LA-UR-99-3883, Los Alamos National Laboratory, Los Alamos, New Mexico,
June 25, 1999. Version 2.1.
[7] The Netcraft Web server survey, Feb. 2001. http://www.netcraft.com/survey/.
[8] P. A. Porras and P. G. Neumann. EMERALD: Event monitoring enabling re-
sponses to anomalous live disturbances.
In Proceedings of the 20th National
Information Systems Security Conference, pages 353–365, Baltimore, Maryland,
Oct. 7–10, 1997. National Institute of Standards and Technology/National Com-
puter Security Center.
36
M. Almgren and U. Lindqvist
[9] T. H. Ptacek and T. N. Newsham. Insertion, evasion, and denial of service: Eluding
network intrusion detection. Technical report, Secure Networks, Inc., Calgary,
Alberta, Canada, Jan. 1998. http://www.clark.net/˜roesch/idspaper.html.
[10] RadView Software, Inc., Mar. 2001. http://www.radview.com/.
[11] Sanctum, Inc., Mar. 2001. http://www.sanctuminc.com/.
[12] L. Stein and D. MacEachern. Writing Apache Modules with Perl and C. O’Reilly
& Associates, 1999.