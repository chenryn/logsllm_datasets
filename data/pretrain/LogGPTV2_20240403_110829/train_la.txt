.in +4n
.ex
vec.sv_mask = sigmask(sigquit) | sigmask(sigabrt);
            /* block sigquit and sigabrt during
               handler execution */
.ee
.in
.pp
the
.br sigblock ()
function adds the signals in
.i mask
to the process's signal mask
(like posix
.ir sigprocmask(sig_block) ),
and returns the process's previous signal mask.
attempts to block
.b sigkill
or
.b sigstop
are silently ignored.
.pp
the
.br sigsetmask ()
function sets the process's signal mask to the value given in
.i mask
(like posix
.ir sigprocmask(sig_setmask) ),
and returns the process's previous signal mask.
.pp
the
.br siggetmask ()
function returns the process's current signal mask.
this call is equivalent to
.ir sigblock(0) .
.sh return value
the
.br sigvec ()
function returns 0 on success; on error, it returns \-1 and sets
.i errno
to indicate the error.
.pp
the
.br sigblock ()
and
.br sigsetmask ()
functions return the previous signal mask.
.pp
the
.br sigmask ()
macro returns the signal mask for
.ir signum .
.sh errors
see the errors under
.br sigaction (2)
and
.br sigprocmask (2).
.sh versions
starting with version 2.21, the gnu c library no longer exports the
.br sigvec ()
function as part of the abi.
(to ensure backward compatibility,
the glibc symbol versioning scheme continues to export the interface
to binaries linked against older versions of the library.)
.sh attributes
for an explanation of the terms used in this section, see
.br attributes (7).
.ad l
.nh
.ts
allbox;
lbx lb lb
l l l.
interface	attribute	value
t{
.br sigvec (),
.br sigmask (),
.br sigblock (),
.br sigsetmask (),
.br siggetmask ()
t}	thread safety	mt-safe
.te
.hy
.ad
.sp 1
.sh conforming to
all of these functions were in
4.3bsd, except
.br siggetmask (),
whose origin is unclear.
these functions are obsolete: do not use them in new programs.
.sh notes
on 4.3bsd, the
.br signal ()
function provided reliable semantics (as when calling
.br sigvec ()
with
.i vec.sv_mask
equal to 0).
on system v,
.br signal ()
provides unreliable semantics.
posix.1 leaves these aspects of
.br signal ()
unspecified.
see
.br signal (2)
for further details.
.pp
in order to wait for a signal,
bsd and system v both provided a function named
.br sigpause (3),
but this function has a different argument on the two systems.
see
.br sigpause (3)
for details.
.sh see also
.br kill (2),
.br pause (2),
.br sigaction (2),
.br signal (2),
.br sigprocmask (2),
.br raise (3),
.br sigpause (3),
.br sigset (3),
.br signal (7)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.\" copyright (c) bruno haible 
.\"
.\" %%%license_start(gplv2+_doc_onepara)
.\" this is free documentation; you can redistribute it and/or
.\" modify it under the terms of the gnu general public license as
.\" published by the free software foundation; either version 2 of
.\" the license, or (at your option) any later version.
.\" %%%license_end
.\"
.\" references consulted:
.\"   gnu glibc-2 source code and manual
.\"   dinkumware c library reference http://www.dinkumware.com/
.\"   opengroup's single unix specification http://www.unix-systems.org/online.html
.\"
.th wcscasecmp 3 2021-03-22 "gnu" "linux programmer's manual"
.sh name
wcscasecmp \- compare two wide-character strings, ignoring case
.sh synopsis
.nf
.b #include 
.pp
.bi "int wcscasecmp(const wchar_t *" s1 ", const wchar_t *" s2 );
.fi
.pp
.rs -4
feature test macro requirements for glibc (see
.br feature_test_macros (7)):
.re
.pp
.br wcscasecmp ():
.nf
    since glibc 2.10:
        _posix_c_source >= 200809l
    before glibc 2.10:
        _gnu_source
.fi
.sh description
the
.br wcscasecmp ()
function is the wide-character equivalent of the
.br strcasecmp (3)
function.
it compares the wide-character string pointed to
by
.i s1
and the wide-character string pointed to by
.ir s2 ,
ignoring
case differences
.rb ( towupper (3),
.br towlower (3)).
.sh return value
the
.br wcscasecmp ()
function returns zero if the wide-character strings at
.i s1
and
.i s2
are equal except for case distinctions.
it returns a
positive integer if
.i s1
is greater than
.ir s2 ,
ignoring case.
it
returns a negative integer if
.i s1
is smaller
than
.ir s2 ,
ignoring case.
.sh versions
the
.br wcscasecmp ()
function is provided in glibc since version 2.1.
.sh attributes
for an explanation of the terms used in this section, see
.br attributes (7).
.ad l
.nh
.ts
allbox;
lbx lb lb
l l l.
interface	attribute	value
t{
.br wcscasecmp ()
t}	thread safety	mt-safe locale
.te
.hy
.ad
.sp 1
.sh conforming to
posix.1-2008.
this function is not specified in posix.1-2001,
and is not widely available on other systems.
.sh notes
the behavior of
.br wcscasecmp ()
depends on the
.b lc_ctype
category of the
current locale.
.sh see also
.br strcasecmp (3),
.br wcscmp (3)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.so man3/rpc.3
.so man3/scandir.3
.so man3/sigsetops.3
.so man3/getfsent.3
.so man3/getenv.3
.so man7/iso_8859-5.7
.\" copyright (c) 2006 red hat, inc. all rights reserved.
.\" author: ulrich drepper 
.\"
.\" %%%license_start(gplv2_misc)
.\" this copyrighted material is made available to anyone wishing to use,
.\" modify, copy, or redistribute it subject to the terms and conditions of the
.\" gnu general public license v.2.
.\"
.\" this program is distributed in the hope that it will be useful, but without
.\" any warranty; without even the implied warranty of merchantability or
.\" fitness for a particular purpose. see the gnu general public license for
.\" more details.
.\"
.\" you should have received a copy of the gnu general public
.\" license along with this manual; if not, see
.\" .
.\" %%%license_end
.\"
.th nss 5 2020-06-09 "linux" "linux programmer's manual"
.sh name
nss \- name service switch configuration file
.sh description
each call to a function which retrieves data from a system database
like the password or group database is handled by the name service
switch implementation in the gnu c library.
the various services
provided are implemented by independent modules, each of which
naturally varies widely from the other.
.pp
the default implementations coming with the gnu c library are by
default conservative and do not use unsafe data.
this might be very costly in some situations, especially when the databases
are large.
some modules allow the system administrator to request
taking shortcuts if these are known to be safe.
it is then the system administrator's responsibility to ensure the assumption
is correct.
.pp
there are other modules where the implementation changed over time.
if an implementation used to sacrifice speed for memory consumption,
it might create problems if the preference is switched.
.pp
the
.i /etc/default/nss
file contains a number of variable assignments.
each variable controls the behavior of one or more
nss modules.
white spaces are ignored.
lines beginning with \(aq#\(aq
are treated as comments.
.pp
the variables currently recognized are:
.tp
\fbnetid_authoritative =\fr \fitrue\fr|\fifalse\fr
if set to true, the nis backend for the
.br initgroups (3)
function will accept the information
from the
.i netid.byname
nis map as authoritative.
this can speed up the function significantly if the
.i group.byname
map is large.
the content of the
.i netid.byname
map is used \fbas is\fr.
the system administrator has to make sure it is correctly generated.
.tp
\fbservices_authoritative =\fr \fitrue\fr|\fifalse\fr
if set to true, the nis backend for the
.br getservbyname (3)
and
.br getservbyname_r (3)
functions will assume that the
.i services.byservicename
nis map exists and is authoritative, particularly
that it contains both keys with /proto and without /proto for both
primary service names and service aliases.
the system administrator has to make sure it is correctly generated.
.tp
\fbsetent_batch_read =\fr \fitrue\fr|\fifalse\fr
if set to true, the nis backend for the
.br setpwent (3)
and
.br setgrent (3)
functions will read the entire database at once and then
hand out the requests one by one from memory with every corresponding
.br getpwent (3)
or
.br getgrent (3)
call respectively.
otherwise, each
.br getpwent (3)
or
.br getgrent (3)
call might result in a network communication with the server to get
the next entry.
.sh files
\fi/etc/default/nss\fr
.sh examples
the default configuration corresponds to the following configuration file:
.pp
.in +4n
.ex
netid_authoritative=false
services_authoritative=false
setent_batch_read=false
.ee
.in
.\" .sh author
.\" ulrich drepper 
.\"
.sh see also
\finsswitch.conf\fr
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.\" copyright 2002 walter harms (PI:EMAIL)
.\"
.\" %%%license_start(gpl_noversion_oneline)
.\" distributed under gpl
.\" %%%license_end
.\"
.\" 2002-07-27 walter harms
.\" this was done with the help of the glibc manual
.\"
.th isgreater 3  2021-03-22 "" "linux programmer's manual"
.sh name
isgreater, isgreaterequal, isless, islessequal, islessgreater,
isunordered \- floating-point relational tests without exception for nan
.sh synopsis
.nf
.b #include 
.pp
.bi "int isgreater(" x ", " y );
.bi "int isgreaterequal(" x ", " y );
.bi "int isless(" x ", " y );
.bi "int islessequal(" x ", " y );
.bi "int islessgreater(" x ", " y );
.bi "int isunordered(" x ", " y );
.fi
.pp
link with \fi\-lm\fp.
.pp
.rs -4
feature test macro requirements for glibc (see
.br feature_test_macros (7)):
.re
.pp
.nf
    all functions described here:
        _isoc99_source || _posix_c_source >= 200112l
.fi
.sh description
the normal relational operations (like
.br \ (y)\fp without an exception
if
.ir x
or
.i y
is nan.
.tp
.br isgreaterequal ()
determines \fi(x)\ >=\ (y)\fp without an exception
if
.ir x
or
.i y
is nan.
.tp
.br isless ()
determines \fi(x)\ \ (y)\fp
without an exception if
.ir x
or
.i y
is nan.
this macro is not equivalent to \fix\ !=\ y\fp because that expression is
true if
.ir x
or
.i y
is nan.
.tp
.br isunordered ()
determines whether its arguments are unordered, that is, whether
at least one of the arguments is a nan.
.sh return value
the macros other than
.br isunordered ()
return the result of the relational comparison;
these macros return 0 if either argument is a nan.
.pp
.br isunordered ()
returns 1 if
.ir x
or
.i y
is nan and 0 otherwise.
.sh errors
no errors occur.
.sh attributes
for an explanation of the terms used in this section, see
.br attributes (7).
.ad l
.nh
.ts
allbox;
lbx lb lb
l l l.
interface	attribute	value
t{
.br isgreater (),
.br isgreaterequal (),
.br isless (),
.br islessequal (),
.br islessgreater (),
.br isunordered ()
t}	thread safety	mt-safe
.te
.hy
.ad
.sp 1
.sh conforming to
posix.1-2001, posix.1-2008, c99.
.sh notes
not all hardware supports these functions,
and where hardware support isn't provided, they will be emulated by macros.
this will result in a performance penalty.
don't use these functions if nan is of no concern for you.
.sh see also
.br fpclassify (3),
.br isnan (3)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.so man3/lrint.3
.\" %%%license_start(public_domain)
.\" this is in the public domain
.\" %%%license_end
.\" various parts:
.\" copyright (c) 2007-9, 2013, 2016 michael kerrisk 
.\"
.th ld.so 8 2021-08-27 "gnu" "linux programmer's manual"
.sh name
ld.so, ld\-linux.so \- dynamic linker/loader