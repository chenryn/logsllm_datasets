Consider this example of a Book library database.    
**Book**    
| isbn *(PK)* | title | description |    
| ------------- | ------------- | ------------- |    
| 9785811243570 | Charlie and the chocolate factory | Willy Wonka’s famous chocolate factory is opening at last! |    
| 9788374950978 | Kafka on the Shore | Kafka on the Shore is a 2002 novel by Japanese author Haruki Murakami. |    
| 9781471331435 | 1984 | 1984 was George Orwell’s chilling prophecy about the dystopian future. |    
**Author**    
| id *(PK)* | name |    
| ------------- | ------------- |    
| 1 | Roald Dahl |    
| 2 | Haruki Murakami |    
| 3 | Philip Gabriel |    
| 4 | George Orwell |    
**BookAuthor**    
| id *(PK)* | book_isbn | author_id |    
| -- | ------------- | ---------- |    
| 1 | 9785811243570 | 1 |    
| 2 | 9788374950978 | 2 |    
| 3 | 9788374950978 | 3 |    
| 4 | 9781471331435 | 4 |    
With PGSync, we can simply define this [JSON](https://jsonapi.org) schema where the **_book_** table is the pivot.    
A **_pivot_** table indicates the root of your document.    
```json    
{    
    "table": "book",    
    "columns": [    
        "isbn",    
        "title",    
        "description"    
    ],    
    "children": [    
        {    
            "table": "author",    
            "columns": [    
                "name"    
            ]    
        }    
    ]    
}    
```    
To get this document structure in [Elasticsearch](https://www.elastic.co/products/elastic-stack)    
```json    
[    
  {    
      "isbn": "9785811243570",    
      "title": "Charlie and the chocolate factory",    
      "description": "Willy Wonka’s famous chocolate factory is opening at last!",    
      "authors": ["Roald Dahl"]    
  },    
  {    
      "isbn": "9788374950978",    
      "title": "Kafka on the Shore",    
      "description": "Kafka on the Shore is a 2002 novel by Japanese author Haruki Murakami",    
      "authors": ["Haruki Murakami", "Philip Gabriel"]    
  },    
  {    
      "isbn": "9781471331435",    
      "title": "1984",    
      "description": "1984 was George Orwell’s chilling prophecy about the dystopian future",    
      "authors": ["George Orwell"]    
  }    
]    
```    
Behind the scenes, PGSync is generating advanced queries for you such as.    
```sql    
SELECT     
       JSON_BUILD_OBJECT(    
          'isbn', book_1.isbn,     
          'title', book_1.title,     
          'description', book_1.description,    
          'authors', anon_1.authors    
       ) AS "JSON_BUILD_OBJECT_1",    
       book_1.id    
FROM book AS book_1    
LEFT OUTER JOIN    
  (SELECT     
          JSON_AGG(anon_2.anon) AS authors,    
          book_author_1.book_isbn AS book_isbn    
   FROM book_author AS book_author_1    
   LEFT OUTER JOIN    
     (SELECT     
             author_1.name AS anon,    
             author_1.id AS id    
      FROM author AS author_1) AS anon_2 ON anon_2.id = book_author_1.author_id    
   GROUP BY book_author_1.book_isbn) AS anon_1 ON anon_1.book_isbn = book_1.isbn    
```    
You can also configure PGSync to rename attributes via the schema config    
e.g    
```json    
  {    
      "isbn": "9781471331435",    
      "this_is_a_custom_title": "1984",    
      "desc": "1984 was George Orwell’s chilling prophecy about the dystopian future",    
      "contributors": ["George Orwell"]    
  }    
```    
PGSync addresses the following challenges:    
- What if we update the author's name in the database?    
- What if we wanted to add another author for an existing book?    
- What if we have lots of documents already with the same author we wanted to change the author name?    
- What if we delete or update an author?    
- What if we truncate an entire table?    
#### Benefits    
- PGSync is a simple to use out of the box solution for Change data capture.    
- PGSync handles data deletions.    
- PGSync requires little development effort. You simply define a schema config describing your data.    
- PGSync generates advanced queries matching your schema directly.    
- PGSync allows you to easily rebuild your indexes in case of a schema change.    
- You can expose only the data you require in Elasticsearch.    
- Supports multiple Postgres schemas for multi-tennant applications.    
#### Contributing    
Contributions are very welcome! Check out the [Contribution](CONTRIBUTING.rst) Guidelines for instructions.    
#### Credits    
- This package was created with [Cookiecutter](https://github.com/audreyr/cookiecutter)    
- Elasticsearch is a trademark of Elasticsearch BV, registered in the U.S. and in other countries.    
#### License    
This code is released under the [GNU Lesser General Public License](https://www.gnu.org/licenses/gpl-3.0.html), version 3.0 (LGPL-3.0).      
Please see [LICENSE](LICENSE) for more details.    
You should have received a copy of the GNU Lesser General Public License along with PGSync.      
If not, see https://www.gnu.org/licenses/.    
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")