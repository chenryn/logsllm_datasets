                "groupType": null,
                "modifiedProperties": [
                    {
                        "displayName": "ConsentContext.IsAdminConsent",
                        "oldValue": null,
                        "newValue": "\"True\""
                    },
```
  c) Use Log Analytics
```
AuditLogs
| where ActivityDisplayName == "Consent to application"
```
For more information, see the [Application Consent Grant Investigation Playbook](incident-response-playbook-app-consent.md).
#### Determine if there was suspicious end-user consent to the application
A user can authorize an application to access some data at the protected resource, while acting as that user. The permissions that allow this type of access are called "delegated permissions" or [user consent](/azure/active-directory/manage-apps/consent-and-permissions-overview#user-consent).
To find apps that are consented by users, use LogAnalytics to search the Audit logs:
```
AuditLogs
| where ActivityDisplayName == "Consent to application" and (parse_json(tostring(parse_json(tostring(TargetResources[0].modifiedProperties))[0].newValue)) <> "True")
```
#### Check Audit logs to find whether the permissions granted are too broad (tenant-wide or admin-consented)
Reviewing the permissions granted to an application or Service Principal can be a time-consuming task. Start with understanding the potentially [risky permissions](incident-response-playbook-app-consent.md#classifying-risky-permissions) in Microsoft Entra ID.
Now, follow the guidance on how to enumerate and review permissions in the [App consent grant investigation](incident-response-playbook-app-consent.md#method-2---using-powershell).
#### Check whether the permissions were granted by user identities that shouldn't have the ability to do this, or whether the actions were performed at strange dates and times
Review using Audit Logs:
```
AuditLogs
| where OperationName == "Consent to application" 
//| where parse_json(tostring(TargetResources[0].modifiedProperties))[4].displayName == "ConsentAction.Permissions"
```
You can also use the Microsoft Entra audit logs, filter by **Consent to application**. In the Audit Log details section, click **Modified Properties**, and then review the **ConsentAction.Permissions**:
:::image type="content" source="./media/compromised-malicious-apps/AuditLogDetails-ConsentPermissions.png" alt-text="Use the Microsoft Entra audit logs":::
## Containment steps
After identifying one or more applications or workload identities as either malicious or compromised, you might not immediately want to roll the credentials for this application, nor you want to immediately delete the application. 
>[!Important]
>Before you perform the following step, your organization must weigh up the security impact and the business impact of disabling an application. If the business impact of disabling an application is too great, then consider preparing and moving to the Recovery stage of this process.
### Disable compromised application
A typical containment strategy involves the disabling of sign-ins to the application identified, to give your incident response team or the affected business unit time to evaluate the impact of deletion or key rolling. If your investigation leads you to believe that administrator account credentials are also compromised, this type of activity should be coordinated with an eviction event to ensure that all routes to accessing the tenant are cut off simultaneously. 
:::image type="content" source="./media/compromised-malicious-apps/DisabledAppExample.png" alt-text="Toggle to disable users to sign-in":::
You can also use the following PowerShell code to disable the sign-in to the app:
```powershell
# The AppId of the app to be disabled
$appId = "{AppId}"
# Check if a service principal already exists for the app
$servicePrincipal = Get-AzureADServicePrincipal -Filter "appId eq '$appId'"
if ($servicePrincipal) {
   # Service principal exists already, disable it
   Set-AzureADServicePrincipal -ObjectId $servicePrincipal.ObjectId -AccountEnabled $false
} else {
   # Service principal does not yet exist, create it and disable it at the same time
   $servicePrincipal = New-AzureADServicePrincipal -AppId $appId -AccountEnabled $false
}
```
## Recovery steps
### Remediate Service Principals
1. List all credentials assigned to the **Risky Service Principal**. The best way to do this is to perform a Microsoft Graph call using GET ~/application/{id} where id passed is the application object ID.
    - Parse the output for credentials. The output may contain passwordCredentials or keyCredentials. Record the keyIds for all. 
      ```
      "keyCredentials": [],
           "parentalControlSettings": {
               "countriesBlockedForMinors": [],
               "legalAgeGroupRule": "Allow"
           },
           "passwordCredentials": [
               {
                   "customKeyIdentifier": null,
                   "displayName": "Test",
                   "endDateTime": "2021-12-16T19:19:36.997Z",
                   "hint": "7~-",
                   "keyId": "9f92041c-46b9-4ebc-95fd-e45745734bef",
                   "secretText": null,
                   "startDateTime": "2021-06-16T18:19:36.997Z"
               }
           ],
      ```
2. Add a new (x509) certificate credential to the application object using the application addKey API.
   ```
   POST ~/applications/{id}/addKey
   ```
3. Immediately remove all old credentials. For each old password credential, remove it by using:
   ```
   POST ~/applications/{id}/removePassword
   ```
   For each old key credential, remove it by using:
   ```
   POST ~/applications/{id}/removeKey
   ```
4. Remediate all Service Principals associated with the application. Follow this step if your tenant hosts/registers a multi-tenant application, and/or registers multiple service principals associated to the application. Perform similar steps to what is previously listed:
- GET ~/servicePrincipals/{id}
- Find passwordCredentials and keyCredentials in the response, record all old keyIds
- Remove all old password and key credentials. Use:
  ```
  POST ~/servicePrincipals/{id}/removePassword and POST ~/servicePrincipals/{id}/removeKey for this, respectively.
  ```
### Remediate affected Service Principal resources
Remediate KeyVault secrets that the Service Principal has access to by rotating them, in the following priority:
- Secrets directly exposed with [GetSecret](/java/api/com.microsoft.azure.keyvault.keyvaultclient.getsecret) calls.
- The rest of the secrets in exposed KeyVaults.
- The rest of the secrets across exposed subscriptions.
For more information, see [Interactively removing and rolling over the certificates and secrets of a Service Principal or Application](https://github.com/microsoft/azureadtoolkit#interactively-removing-and-rolling-over-the-certificates-and-secrets-of-a-service-principal-or-application).
 For Microsoft Entra SecOps guidance on applications, see [Microsoft Entra security operations guide for Applications](/azure/active-directory/fundamentals/security-operations-applications).
In order of priority, this scenario would be:
- Update Graph PowerShell cmdlets (Add/Remove ApplicationKey + ApplicationPassword) doc to include examples for credential roll-over.
- Add custom cmdlets to Microsoft Graph PowerShell that simplifies this scenario.
### Disable or delete malicious applications
An application can either be disabled or deleted. To disable the application, under **Enabled for users to sign in**, move the toggle to **No**.
You can delete the application, either temporarily or permanently, in the Azure portal or through the Microsoft Graph API. When you soft delete, the application can be recovered up to 30 days after deletion.
```
DELETE /applications/{id}
```
To permanently delete the application, use this Microsoft Graph API call:
```
DELETE /directory/deletedItems/{id}
```
If you disable or if you soft delete the application, set up monitoring in Microsoft Entra audit logs to learn if the state changes back to enabled or recovered.
**Logging for enabled:**
- **Service** - Core Directory
- **Activity Type** - Update Service Principal
- **Category** - Application Management
- **Initiated by (actor)** - UPN of actor
- **Targets** - App ID and Display Name
- **Modified Properties** - Property Name = account enabled, new value = true
**Logging for recovered:**
- **Service** - Core Directory
- **Activity Type** - Add Service Principal
- **Category** - Application Management
- **Initiated by (actor)** - UPN of actor
- **Targets** - App ID and Display Name
- **Modified Properties** - Property name = account enabled, new value = true
Note: Microsoft globally disables applications found to be violating its Terms of Service. In those cases, these applications show `DisabledDueToViolationOfServicesAgreement` on the `disabledByMicrosoftStatus` property on the related [application](/graph/api/resources/application) and [service principal](/graph/api/resources/serviceprincipal) resource types in Microsoft Graph. To prevent them from being instantiated in your organization again in the future, you cannot delete these objects.
### Implement Identity Protection for workload identities
Microsoft detects risk on workload identities across sign-in behavior and offline indicators of compromise.
For more information, see [Securing workload identities with Identity Protection](/azure/active-directory/identity-protection/concept-workload-identity-risk).
These alerts appear in the Identity Protection portal and can be exported into SIEM tools through [Diagnostic Settings](/azure/active-directory/identity-protection/howto-export-risk-data) or the [Identity Protection APIs](/graph/api/resources/identityprotection-overview?view=graph-rest-1.0&preserve-view=true).
:::image type="content" source="./media/compromised-malicious-apps/IR_playbook_workload_identity_detections.png" alt-text="Review risks and alerts in the Identity Protection portal":::
### Conditional Access for risky workload identities
Conditional Access allows you to block access for specific accounts that you designate when Identity Protection marks them as “at risk.” Note that the enforcement through Conditional Access is currently limited to single-tenant applications only.
:::image type="content" source="./media/compromised-malicious-apps/RiskbasedCAPolicySample.png" alt-text="Control user access based on conditional access policy":::
For more information, see [Conditional Access for workload identities](/azure/active-directory/conditional-access/workload-identity).
### Implement application risk policies
#### Review user consent settings
Review the user consent settings under **Microsoft Entra ID** > **Enterprise applications** > **Consent and permissions** > **User consent settings**.
:::image type="content" source="./media/compromised-malicious-apps/UserConsentSettings.png" alt-text="Select Allow user consent for apps from the options":::
To review configuration options, see [Configure how users consent to apps](/azure/active-directory/manage-apps/configure-user-consent?tabs=azure-portal).
#### Implement admin consent flow
When an application developer directs users to the admin consent endpoint with the intent to give consent for the entire tenant, it is known as admin consent flow. To ensure the admin consent flow works properly, application developers must list all permissions in the RequiredResourceAccess property in the application manifest.
Most organizations disable the ability for their users to consent to applications. To give users the ability to still request consent for applications and have administrative review capability, it is recommended to implement the admin consent workflow. Follow the [admin consent workflow steps](/azure/active-directory/manage-apps/configure-admin-consent-workflow) to configure it in your tenant.
For high privileged operations such as admin consent, have a privileged access strategy defined in our [guidance](overview.md). 
### Review risk-based step-up consent settings
Risk-based step-up consent helps reduce user exposure to malicious apps. For example, consent requests for newly registered multitenant apps that are not publisher verified and require non-basic permissions are considered risky. If a risky user consent request is detected, the request requires a "step-up" to admin consent instead. This step-up capability is enabled by default, but it results in a behavior change only when user consent is enabled.
Make sure it is enabled in your tenant and review the configuration settings outlined [here](/azure/active-directory/manage-apps/configure-risk-based-step-up-consent).
## References
- [Incident Response Playbooks](incident-response-playbooks.md)
- [App consent grant](incident-response-playbook-app-consent.md)
- [Microsoft Entra ID Protection risks](/azure/active-directory/identity-protection/concept-identity-protection-risks)
- [Microsoft Entra security monitoring guide](/azure/active-directory/fundamentals/security-operations-introduction)
- [Application auditing concepts](/azure/active-directory/fundamentals/security-operations-applications)
- [Configure how users consent to applications](/azure/active-directory/manage-apps/configure-user-consent)
- [Configure the admin consent workflow](/azure/active-directory/manage-apps/configure-admin-consent-workflow)
- [Unusual addition of credentials to an OAuth app](/defender-cloud-apps/investigate-anomaly-alerts#unusual-addition-of-credentials-to-an-oauth-app)
- [Securing workload identities with Identity Protection](/azure/active-directory/identity-protection/concept-workload-identity-risk)
- [Holistic compromised identity signals from Microsoft](https://techcommunity.microsoft.com/t5/microsoft-entra-azure-ad-blog/holistic-compromised-identity-signals-from-microsoft/ba-p/2365683)
## Additional incident response playbooks
Examine guidance for identifying and investigating these additional types of attacks:
- [Phishing](incident-response-playbook-phishing.md)
- [Password spray](incident-response-playbook-password-spray.md)
- [App consent grant](incident-response-playbook-app-consent.md)
- [Microsoft DART ransomware approach and best practices](incident-response-playbook-dart-ransomware-approach.md)
## Incident response resources
- [Overview](incident-response-overview.md) for Microsoft security products and resources for new-to-role and experienced analysts
- [Planning](incident-response-planning.md) for your Security Operations Center (SOC)
- [Microsoft Defender XDR](/microsoft-365/security/defender/incidents-overview) incident response
- [Microsoft Defender for Cloud (Azure)](/azure/defender-for-cloud/managing-and-responding-alerts)
- [Microsoft Sentinel](/azure/sentinel/investigate-cases) incident response