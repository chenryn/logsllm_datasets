上图显示了从SDR收集的RSS样本，采样速率为每秒30^(6)个样本。要求U1键入50次关键字“password”，然后收集与键盘和加密狗之间交换的消息相关的RSS估计值。强调关键字“password”与任何特定的用户密码都不相关。实际上，它代表一个通用的8个字母的关键字，在不失一般性的情况下，可以将其重新转换为用户以任意长的击键顺序键入的任何关键字。
RSS样本显示了一个清晰的模式，由垂直带组成：每个单词一个带，因为U1输入关键字，先击中返回，然后再次开始-总共重复了50个单词“
password”。上图中的红色实线表示用于过滤RSS样本的阈值，即，仅考虑阈值以上的样本用于后续处理。稍后，在筛选出与干扰相关的样本的同时，仅保留来自键盘-加密狗通信的样本，阈值的重要性将变得很清楚。观察到在这种特定情况下（近距离攻击），样本的绝大多数主要集中在[-20，-35]
dBm的范围内，因此，可以采用任何小于-35dBm的阈值这个目的。
在下面，通过双阶段过程提取键间计时器：（i）单词识别；
（ii）击键时间提取。第一阶段利用RSS样本来识别目标用户键入的单词，而第二阶段则着重于提取与先前识别的单词相关的击键时间。
###  A.单词识别
上图的顶部显示了为实验收集的样本，其中所有RSS值均已归一化为相同值，这是与后续分析无关的RSS值。为了提取与每个单词的开头相关的时间，考虑了预定持续时间的滑动窗口，并计算了属于该单词的样本数（从轨迹的开始到结尾滑动时）。滑动窗口的大小很重要，其配置取决于用户和要检测的单词。例如，对于单词“password”，考虑为用户U1，U2和U3分别设置大小为2.4、1.7和2秒的滑动窗口。此外，根据经验，假设滑动步长为窗口大小的1/50。最后在这项工作中，假设滑动窗口的持续时间可以由对手预先设置。实际上，它可以通过查看所收集的样本来适当地校准滑动窗口，并据此进行设置。上图的底部显示了从滑动开始到给定的一定延迟（毫秒）的，属于滑动窗口的样本数量。同时，上图底部的峰值表示新单词的开头。确实，如果滑动窗口的持续时间得到了正确的校准，则当窗口位于单词的开头时，采样数将是最大的。上图顶部的垂直红线显示了相对于RSS采样位置（黑色圆圈）的已识别峰。
###  B.击键时间提取
对于每个已识别的单词（上图中的垂直红线），进行了以下分析。首先关注从一个单词收集的样本，如下图的顶部所示。观察到“password”一词由9组样本组成（8个字母和回车）。每个样本组又可以分为两个子组：第一组大约20个样本，第二组大约5个样本，如下图的底部所示。
假设第一个子组属于键盘发送到加密狗的信息包，而第二个子组属于加密狗发送给键盘的确认消息。直觉是每次击键对应于键盘的一次传输和对应的加密狗的确认消息。在不失一般性的情况下，不考虑与场景1一致的键盘和加密狗之间的任何数据包丢失。窃听设备非常靠近键盘-加密狗通信链接。在本工作的后续部分（针对场景2和3）以及缓解该策略的策略将考虑干扰。为了正确识别按键时间，采用了滑动窗口持续时间为0.024秒，滑动步长为窗口大小的1/50。滑动窗口持续时间考虑了键盘和加密狗之间的通讯往返延迟，并且取决于键盘的品牌/型号，它需要对收集的样本进行预处理。
**误差边界：**
将BrokenStrokes攻击提取的击键时间与标准击键记录器记录的时间进行比较。为此开发了一个简单的Python脚本来记录先前测量期间的击键时间，随后将该时间序列与从BrokenStrokes攻击中收集到的时间序列进行了比较。对三个不同的用户（即U1，U2和U3）进行了先前的分析，如上图所示。上图的底部显示了分位数0.05与在键盘的50次重复过程中收集的击键间时间相关。使用键盘记录程序输入单词“
password”。在先前的分析中没有考虑回车键，而是只考虑了“
password”一词中两次后续击键之间的时间。本文仅考虑了击键间隔时间的分位数0.05，因为它代表了最坏的情况，即击键对的时间差最小为5％。上图的顶部示出了由BrokenStrokes攻击收集的击键间定时与采用按键记录器所收集的击键间定时之间的差（误差）的绝对值（图的底部）。对于每个框，中心标记代表中位数，而框的底部和顶部边缘分别代表25％和75％。观察到，即使在最坏的情况下，与通过按键记录器收集的数据计算出的平均按键间计时时间为200毫秒相比，该错误始终小于20毫秒。综上所述，误差的主位值约为5ms（对于所有用户），是按键记录程序收集的按键间计时的分位数0.05的2％。
**用户独立性：**
单词识别和击键时机提取与用户无关，即SDR执行的处理只会引入一个较小的延迟，不会影响击键间时机的模式。因此，已经提出的通过利用击键间时间来影响用户隐私的技术可以通过使对手远离目标用户而得到显着增强。
###  C.关键字检测
本文提出了一种基于机器学习的解决方案，它可以适应小的按键间敲击时间误差和在窃听阶段所经历的干扰。考虑仅使用一个类的（即单词“password”的50个实例）进行训练的支持向量机（SVM）分类器。通过利用SVM分类器计算的似然比来将关键字“password”与异常值（即其他词）区分开来。关键字检测阶段由BrokenStrokes的ML模块执行，包括以下三个步骤：
**（1）训练：** 本研究训练了一个带有50个关键字“
password”副本的一类SVM模型。采用高斯核函数并标准化了预测变量数据，即通过相应的加权列平均值和标准偏差对每个预测变量进行居中和缩放;最后，将训练数据中离群值的预期比例设置为0.05。
**（2）击键间隔时间划分：** 通过使用步长为一个击键大小的滑动窗口对测试集中的击键间隔进行划分，即，两个相邻窗口重叠在所有元素上，但一个重叠。
**（3）得分指数生成** ：使用训练完成的一类SVM分类器测试所有分区，以获得每个分区（滑动窗口）的相似度（可能性）。
要接受或拒绝某个值作为关键字的开头，需要定义一个决策阈值以及相关的统计指标，即真阳率（TP）和 假阳率（FP）。令{s0,…,sN}为一组相似性得分。
定义决策阈值（∆）作为相似性得分值，以使 **min** i(si)+
∆表示假定关键字包含在句子中的最小值。定义TP的相似度得分，该得分超过∆，同时具有与关键字在当前句子中的实际位置一致的位置。将FP相似度得分定义为超过∆且同时具有与关键字的实际位置不一致的位置（偏移）的相似性得分。
假设一个位置与关键字的实际开头的距离大于两次击键时的位置不一致。在接下来的部分中，考虑∆ =
0（即，不考虑∆的影响）。值得注意的是，上述过程并不需要攻击者知道特定关键字的键入时间，实际上，攻击者可以先获取所有击键，然后再执行攻击。
## 0x05 Scenario 1: Proximity Attack
本节估计在实际情况下BrokenStrokes的性能。要求用户U1重复三个不同的句子30次：（i） _your password is secret_ ；
（ii） _the secret of your password_ ； （iii） _your secret password is mine_
，这些句子的特征是关键字与句子开头的偏移量不同。考虑了方案1（近距离攻击），因此在正常情况下，人们周围走动和干扰的源头（例如，许多WiFi网络和蓝牙设备）将窃听设备放置在非常靠近键盘-加密狗通信链路的位置。考虑到SDR与键盘-软件狗通信链路之间的距离，采用了直接连接到SDR的标准VERT2450全向天线。上图显示了SVM分类器提供的相似度得分与滑动窗口偏移量的函数关系。已根据击键间隔的次数（即7）构成了关键字“
password”，而滑动步数等于一个击键，相似分数在某个偏移处达到峰值意味着后续采样很可能与采样匹配在训练集中，因此，当前的偏移量很可能是关键字的开头。观察到对于所有这三个在句子中，SVM分类器在关键字“
password”开始的偏移处返回更高的相似分数。此外，观察到BrokenStrokescan定位了密码的位置，同时还遇到了一定程度的不确定性，即并非所有主要峰值都准确地位于关键字开始的位置。确实，干扰可能会增加假按键或使现有按键无法检索。总体而言，此现象仅对攻击性能产生轻微影响，并且关键字位置的不确定性通常在实际位置的±1击键范围内。通过重新考虑上图的结果，提取了每个句子的最高分，并将其位置与对应于与关键字“
password”开头的实际位置相对应的位置进行了比较。下图显示了在计算关键字的预期位置时出现次数与错误的关系。观察到大约31％的检测事件没有发生任何错误（90个事件中有27个），此外观察到45％的检测事件仅受一次按键错误的影响，而只有14％的检测事件受到错误的影响。检测事件比实际事件早2次击键。因此，在90％的情况下，BrokenStrokes可以找到关键字“password”，且输入错误少于2次。下图中的红色实线表示最佳拟合分布是正态分布，平均值为-1.06，标准偏差为2.47。
## 0x06 Scenario 2: Keyword Detection From Behind a Wall
方案2在周围人满为患的环境中进行攻击，在一个办公室中设置窃听设备，然后从附近的办公室发起攻击。目标用户知道本次的攻击，并在被要求重复相同句子30次（即
_you can choose a random password_ ）。天线已放置在距目标用户4.5米的位置，而约20厘米的混凝土墙则挡住了视线。
采用了与以前相同的测量设置和分析方法，并在上图中报告了相似度得分与滑动窗口偏移量的关系。在第25次击键时重复了前面的过程，对包含关键字“
password”的30个句子进行了排序。观察到绝大多数相似度峰值集中在24和25号位置，即一次击键的滞后主要是由于在监听阶段丢失了样本。此外，突出显示了远离预期偏移峰的存在，即在19处出现一个峰，在7到13范围内还有一些峰。将这些峰视为FP，即不存在关键字，但是算法仍然估计它的存在可能性。在30个样本中的19个样本中，该算法可以正确识别关键字的位置，而在10个样本中，BrokenStrokes提供的关键字的位置（略有错误）。