\fBlp -i %p-%j -H hold\fR
或者在\fIprinting\fR选项设置为\fBsoftq\fR时,缺省选项是:
\fBqstat -s -j%j -h\fR
在HPUX系统中的例子: \fBlppause command = /usr/bin/lpalt %p-%j -p0\fR
.TP
lpq cache time (G)
此选项控制了\fBlpq\fR信息多长时间被缓冲一次,以防止频繁调用\fBlpq\fR命令.每一次系统使用\fBlpq\fR命令会保留一个单独的缓冲,所以如果不同的用户分别使用了不同的\fBlpq\fR命令的话,他们不可能共享缓冲信息.
缓冲文件被存放在\fI/tmp/lpq.xxxx\fR文件中,其中的xxxx是正在使用的\fBlpq\fR命令哈希表.
这个选项的缺省值是10秒,这就是说以前相同的\fBlpq\fR命令的缓冲内容将在周期为10秒内被使用.如果\fBlpq\fR命令非常慢的话,可以取稍大的值.
把这个值设为0就完全禁止了缓冲技术的使用.
参见 \fIprinting\fR 选项.
缺省设置: \fBlpq cache time = 10\fR
示例: \fBlpq cache time = 30\fR
.TP
lpq command (S)
这个选项指定为了获得\fBlpq\fR风格的打印机状态信息而要在服务器上要执行的命令.
这个命令应该是一个只以打印机名作为选项并可以输出打印机状态信息的程序或脚本.
通常支持九种打印机状态信息:CUPS, BSD,AIX,LPRNG,PLP,SYSV,HPUX,QNX和SOFTQ.而这些正好覆盖了大多数的UNIX系统.你可以用\fIprinting =\fR选项来控制到底要用哪种类型.
有些客户端(特别是Windows for Workgroups)可能不能正确地向打印机发送联接号以获得状态信息.对此,服务器会向客户报告它所联接的首个打印服务.这样的情况只当联接号发送非法时才会发生.
如果使用\fI%p\fR变量的话,系统会在此处放置打印机名.否则在命令后放置打印机名.
注意,当服务器不能获得\fBPATH\fR变量的话,以绝对路径来描述\fIlpq command\fR是个好习惯. 当与CUPS库编译连接时，不需要\fIlpq command\fR，因为smbd将使用库调用来获得打印队列列表。
参见 \fIprinting \fR 选项.
缺省设置: \fB依赖于 \fI printing\fR 的设置情况\fR
示例: \fBlpq command = /usr/bin/lpq -P%p\fR
.TP
lpresume command (S)
此选项指定为了继续连续打印或假脱机一个指定的打印任务时要在服务器上执行的命令.
此命令应该是一个以打印机名和要恢复的打印任务号作为选项的程序或脚本.参见\fIlppause command \fR参数。
如果使用\fI%p\fR变量的话,系统会在此处放置打印机名.用\fI%j\fR来代替打印任务号,当然是用整数形
式罗.
注意,当服务器不能获得PATH变量的话,以绝对路径来描述\fIlpresume command\fR是个好习惯
参见 \fIprinting \fR 选项.
缺省设置: 当前没有缺省设置，除非 \fIprinting\fR 选项是 \fBSYSV\fR, 此时默认是
\fBlp -i %p-%j -H resume\fR
或者如果\fIprinting\fR 选项是 \fBSOFTQ\fR, 那么默认是:
\fBqstat -s -j%j -r\fR
HPUX的示例: \fBlpresume command = /usr/bin/lpalt %p-%j -p2\fR
.TP
lprm command (S)
此选项指定为了要删除一个打印任务而需要在服务器上执行的命令.
此命令应该是一个使用打印机名和打印任务号的程序或脚本,并且执行它们可以删掉打印任务.
如果使用\fI%p\fR变量的话,系统会在此处放置打印机名.用\fI%j\fR来代替打印任务号,当然是也用整数形式罗.
注意,当不能从服务器获得PATH变量的话,以绝对路径来描述\fIlprm command\fR是个好习惯.
参见\fIprinting \fR 选项.
缺省设置: \fB依赖于 \fIprinting \fR 选项设置\fR
示例 1: \fBlprm command = /usr/bin/lprm -P%p %j\fR
示例 2: \fBlprm command = /usr/bin/cancel %p-%j\fR
.TP
machine password timeout (G)
如果samba服务器是Windows NT域成员的话(参见\fIsecurity=domain\fR选项),那么运行中的smbd进程会周期性地试着改变储存在叫做\fIprivate/secrets.tdb\fR的TDB中的MACHINE ACCOUNT PASSWORD.这个参数指定了密码将多久更换一次，以秒为单位。缺省值是一个星期(当然要以秒来表示),这与NT域成员服务器是一样的.
参见 \fBsmbpasswd\fR(8), 和 \fIsecurity = domain\fR 选项.
缺省设置: \fBmachine password timeout = 604800\fR
.TP
magic output (S)
此选项指定了一个用magic脚本输出内容而建立的文件的名称,参见下面对\fImagic script\fR选项的描述.
警告:如果两个客户在同样的目录下用相同的\fImagic script\fR,输出文件内容是无法确定的.
缺省设置: \fBmagic output = .out\fR
示例: \fBmagic output = myfile.txt\fR
.TP
magic script (S)
这个选项用来指定将被服务器执行的文件的名字,这个文件如果已经打开,那么,当这个文件关闭后服务器同样也可以运行.这样就允许了一个UNIX脚本可以传送到samba主机,并为所连接的用户运行.
以这种方式运行的脚本将会在完成以后被删除,只要权限允许的话.
如果脚本产生了输出的话,这些信息就被送到\fImagic  output\fR选项指定的文件中(见以上描述).
注意,一些命令解释器不能解释包含CR/LF而不是CR回车换行符的脚本.magic脚本必须是可以被运行的（\fB就象\fR在本地主机运行一样）,而有些脚本在某些主机上或某些shell下可能会在dos客户端进行过滤处理.
magic脚本仍处于\fB实验\fR阶段,所以\fB不能\fR对此完全依赖.
缺省设置: \fB无。禁止使用magic script.\fR
示例: \fBmagic script = user.csh\fR
.TP
mangle case (S)
参见NAME MANGLING部分.
缺省设置: \fBmangle case = no\fR
.TP
mangled map (S)
这个选项是用来直接映射那些不能在Windows/DOS上描述的unix文件名.不过并不经常出现这样的情况,只有一些特殊的扩展名在DOS和UNIX之间才会不同,例如,HTML文件在UNIX下通常都是\fI.html\fR,而在Windows/DOS下通常却是\fI.htm\fR.
所以如果要将 \fIhtml\fR 映射为 \fIhtm\fR 你应当这样:
\fBmangled map = (*.html *.htm)\fR
有一个非常有用的经验是删掉在CDROM光盘上一些文件名后面讨人厌的\fI;1\fR(只有在一些UNIX可以看到它们).为此可以这样映射：(*;1 *;).
缺省设置: \fI没有 mangled map\fR
示例: \fBmangled map = (*;1 *;)\fR
.TP
mangled names (S)
这个选项控制是否要把UNIX下的非DOS文件名映射为DOS兼容的形式("mangled")并使得它们可以查阅,或者简单地忽略掉这些非DOS文件名.
NAME MANGLING部分有更多关于如何控制这类处理的详细信息.
如果使用了这种映射,那么其算法就象下面这样：
把文件名最后一个点符号前面首五个字母数字字符强制转换成大写,作为要映射名字的首五个字符.
在要映射名字的起始部分加上"~"符号,后面跟两个字符的特殊序列字串,而这个序列字串是由原始的文件名而来（也就是：原文件名去掉最后的文件扩展名）.只有当文件的扩展名含有大写字母或长于三个字符时,文件的最后扩展名才被包含在散列计算中.
注意,如果你不喜欢'~'的话,可以用\fImangling char\fR选项来指定你想要的字符.
最后,扩展名部分的前三个字符会被保留,强制转换到大写并作为映射后名字的扩展名.最后的扩展名就是原始文件名中最后一个'.'右面的那部分.如果文件名中没有'.',那么映射后的文件名也没有扩展名部分(除非用了"hidden files" - 参见后面的介绍).
unix的文件名如果以点开始,那么好比DOS中的隐藏文件.这些文件映射后的文件名就会拿掉点符号并用"___"来作为它的扩展名,而不管原来的扩展名是什么("___"是三个下划线).
大写字母数字字符组成了两位散列值.
如果目录中的文件与要映射的文件名使用了相同的前五位字符,这样的算法会导致名称冲突,不过发生冲突的可能性是1/1300.
名称映射允许当需要保留unix长文件名时在unix目录与Windows/DOS之间拷贝文件.从Windows/DOS中拷过来的unix文件可以更换新的扩展名并保留同样的主文件名.名称映射并不会在转换时更改什么东西.
缺省设置: \fBmangled names = yes\fR
.TP
mangled stack (G)
这个选项控制了映射文件名的数量,以便让Samba服务器\fBsmbd\fR(8)对其进行缓存.
栈里保存了最近映射的基本文件名(扩展名只有在超过3个字符或者包含大写字符时才会保留).
栈值设得稍大一些,对于映射unix的长文件名操作会更顺利一些.但是,它会使目录访问变得更慢；小一些的栈可以保存在服务器的内存中(每个栈元素占256个字节).
并不保证在转换长文件名时绝对正确无误,准备好面对可能出现的惊奇.
缺省设置: \fBmangled stack = 50\fR
示例: \fBmangled stack = 100\fR
.TP
mangle prefix (G)
controls the number of prefix characters from the original name used when generating the mangled names\&. A larger value will give a weaker hash and therefore more name collisions\&. The minimum value is 1 and the maximum value is 6\&.
mangle prefix is effective only when mangling method is hash2\&.
缺省设置: \fBmangle prefix = 1\fR
示例: \fBmangle prefix = 4\fR
.TP
mangling char (S)
这个选项指定在name mangling操作中使用什么样的字符作为\fBmagic\fR字符.缺省是用了'~',不过有些软件可能会在使用上受到某些妨碍.可以设定为你想要的字符.
缺省设置: \fBmangling char = ~\fR
示例: \fBmangling char = ^\fR
.TP
mangling method (G)
controls the algorithm used for the generating the mangled names\&. Can take two different values, "hash" and "hash2"\&. "hash" is the default and is the algorithm that has been used in Samba for many years\&. "hash2" is a newer and considered a better algorithm (generates less collisions) in the names\&. However, many Win32 applications store the mangled names and so changing to the new algorithm must not be done lightly as these applications may break unless reinstalled\&.
缺省设置: \fBmangling method = hash2\fR
示例: \fBmangling method = hash\fR
.TP
map acl inherit (S)
This boolean parameter controls whether \fBsmbd\fR(8) will attempt to map the 'inherit' and 'protected' access control entry flags stored in Windows ACLs into an extended attribute called user\&.SAMBA_PAI\&. This parameter only takes effect if Samba is being run on a platform that supports extended attributes (Linux and IRIX so far) and allows the Windows 2000 ACL editor to correctly use inheritance with the Samba POSIX ACL mapping code\&.
缺省设置: \fBmap acl inherit = no\fR
.TP
map archive (S)
这个选项决定了是否把DOS的归档属性映射为UNIX可执行位.在文件修改后DOS的归档位会被设定到文件上.保持归档位的一个理由是使得Samba或者你的PC在新建任何文件的时候，不会为它们设置UNIX可执行属性。那样对于共享源代码、文档等等非常让人厌烦。
注意这个选项需要在\fIcreate mask\f中没有排除文件属主的执行权限位(也就是说它必须包含100).参见\fIcreate mask\fR选项中的描述.
缺省设置: \fBmap archive = yes\fR
.TP
map hidden (S)
这个选项决定DOS下的隐藏文件是否要映射为UNIX全局可执行位.
注意这个选项需要在\fIcreate mask\fR中没有排除所有用户的执行权限位(也就是说它必须包含001).参见\fIcreate mask\fR选项中的描述.
缺省设置: \fBmap hidden = no\fR
.TP
map system (S)
这个选项决定DOS下的系统文件是否要映射为UNIX组可执行位.
注意这个选项需要在\fIcreate mask\fR中没有排除组用户的执行权限位(也就是说它必须包含010).参见\fIcreate mask\fR选项中的描述.
缺省设置: \fBmap system = no\fR
.TP
map to guest (G)
这个选项只在安全模式不是共享级(\fIsecurity=share\fR)时才有用,也就是选用了用户安全级,服务器安全级或者域安全级(\fBuser\fR, \fBserver\fR, 和\fBdomain\fR).
这时,选项会有三种不同的值,分别通知\fBsmbd\fR(8)在用户以非法身份登录时作何相应处理.
这三种设定是:
\fBNever\fR - 意思是用户登录时用了个非法口令并且被服务器所拒.这是个缺省值.
\fBBad User\fR - 意思是用户登录时用了非法口令并且被服务器所拒,除非用户名不存在,否则也可以以来宾身份登录并映射到对应的\fIguest account\fB账号.
\fBBad Password\fR - 意思是用户登录时即使用了非法口令,但是还会以来宾身份登录并映射到对应的guest账号.可能出现这样的问题,就是用户虽然输错了口令,却非常平静地以\(lq来宾\(rq身份登录到系统上。他们不明白为什么他们不能访问那些他们认为可以访问的资源,因为在登录时没有任何信息提示他们输错了口令。所以应该小心使用它,以避免不必要的麻烦. Helpdesk services will \fBhate\fR you if you set the \fImap to guest\fR parameter this way :-).
注意当使用共享级以外的其它安全模式时,要设定这个选项，以使"Guest"共享资源服务发挥作用.因为在这些安全级模式中,用户请求的共享资源名在服务器成功验证用户登录前\fB不会\fR发送到服务器作处理,所以服务器就在不能处理联接验证结果时为联接提供"Guest"共享.
对于那些以前的版本,这个选项会映射到编译时所用的local.h文件里定义的\fBGUEST_SESSSETUP\fR变量的值.
缺省设置: \fBmap to guest = Never\fR
示例: \fBmap to guest = Bad User\fR
.TP
max connections (S)
最大联接数就是允许同时联接到一个资源服务的最大数量限制.在\fImax connections\fR大于0的情况下,如果联接数超过了最大联接数设定时,超出的联接将被拒绝.如果设为0的话就没有这样的联接限制了.
为了实现这样的功能,系统会使用记录锁定文件.锁定文件存放在\fIlock directory\fR选项指定的目录中.
缺省设置: \fBmax connections = 0\fR
示例: \fBmax connections = 10\fR
.TP
max disk size (G)
控制磁盘使用的上限.如果把它设为100的话,所有的共享资源容量都不会超过100M.
注意这个选项并不是限制管理员往磁盘上存放数据的容量.在上面所说的情况中,管理员仍然可以存放超过100M的数据到磁盘上,但如果客户查询剩余磁盘空间或磁盘总空间的话,所得到的结果就只在这个 \fImax disk size\fR指定的容量范围之内.
使用这个选项主要是为了对一些疯狂使用磁盘空间的软件进行一定的限制,特别是它们可能会使用超过1G上以的磁盘空间.
把这个选项设为0说明没有限制.
缺省设置: \fBmax disk size = 0\fR
示例: \fBmax disk size = 1000\fR
.TP
max log size (G)
这个选项(一个kB为单位的整数)用来指定使用的记录文件最大到多少容量.samba会周期性地检查这个容量,如果超过这个选项值就把老的文件换名成扩展名为\fI.old\fR的文件.
把这个选项设为0说明没有限制.
缺省设置: \fBmax log size = 5000\fR
示例: \fBmax log size = 1000\fR
.TP
max mux (G)
这个选项控制了对用户允许的最大SMB并发操作数.你应该不需要设定这个选项的.
缺省设置: \fBmax mux = 50\fR
.TP
max open files (G)
这个选项限定了在任意时间客户端用一个 \fBsmbd\fR(8)文件服务进程可以打开的最大文件数.缺省的值非常高(10,000),因为对于每个未打开的文件只使用其中的一位.
打开文件极限通常用UNIX每进程最大文件描述符数来限制更好,所以你不需要去碰这个选项的.
缺省设置: \fBmax open files = 10000\fR
.TP
max print jobs (S)
This parameter limits the maximum number of jobs allowable in a Samba printer queue at any given moment\&. If this number is exceeded, \fBsmbd\fR(8) will remote "Out of Space" to the client\&. See all \fItotal print jobs\fR\&.
缺省设置: \fBmax print jobs = 1000\fR
示例: \fBmax print jobs = 5000\fR
.TP
max protocol (G)
此项的值是一个字符串,定义了服务器支持的最高协议等级.
可能的值是:
\fBCORE\fR: 早期版本,不接受用户名.
\fBCOREPLUS\fR: 在CORE的基础上改进了一些性能.