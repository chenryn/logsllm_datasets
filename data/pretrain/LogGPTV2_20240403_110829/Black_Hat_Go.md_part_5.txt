multiple packages. Using github.com/stacktitan as a preface to the
actual package name ldapauth ensures that the package name
remains unique.
Although Go developers traditionally install dependencies
with go get, problems can arise if those dependent packages
receive updates that break backward compatibility. Go has
introduced two separate tools—dep and mod—to lock
dependencies in order to prevent backward compatibility
issues. However, this book almost exclusively uses go get to
pull down dependencies. This will help avoid inconsistencies
with ongoing dependency management tooling and hopefully
make it easier for you to get the examples up and running.
The go fmt Command
The go fmt command automatically formats your source code.
For example, running go fmt /path/to/your/package will style your
code by enforcing the use of proper line breaks, indentation,
and brace alignment.
Adhering to arbitrary styling preferences might seem
strange at first, particularly if they differ from your habits.
However, you should find this consistency refreshing over
time, as your code will look similar to other third-party
packages and feel more organized. Most IDEs contain hooks
that will automatically run go fmt when you save your file, so
you don’t need to explicitly run the command.
The golint and go vet Commands
Whereas go fmt changes the syntactical styling of your code,
golint reports style mistakes such as missing comments,
variable naming that doesn’t follow conventions, useless type
specifications, and more. Notice that golint is a standalone tool,
and not a subcommand of the main go binary. You’ll need to
install it separately by using go get -u golang.org/x/lint/golint.
Similarly, go vet inspects your code and uses heuristics to
identify suspicious constructs, such as calling Printf() with the
incorrect format string types. The go vet command attempts to
identify issues, some of which might be legitimate bugs, that a
compiler might miss.
Go Playground
The Go Playground is an execution environment hosted at
https://play.golang.org/ that provides a web-based frontend for
developers to quickly develop, test, execute, and share
snippets of Go code. The site makes it easy to try out various
Go features without having to install or run Go on your local
system. It’s a great way to test snippets of code before
integrating them within your projects.
It also allows you to simply play with various nuances of
the language in a preconfigured environment. It’s worth noting
that the Go Playground restricts you from calling certain
dangerous functions to prevent you from, for example,
executing operating-system commands or interacting with
third-party websites.
Other Commands and Tools
Although we won’t explicitly discuss other tools and
commands, we encourage you to do your own research. As
you create increasingly complex projects, you’re likely to run
into a desire to, for example, use the go test tool to run unit tests
and benchmarks, cover to check for test coverage, imports to fix
import statements, and more.
UNDERSTANDING GO SYNTAX
An exhaustive review of the entire Go language would take
multiple chapters, if not an entire book. This section gives a
brief overview of Go’s syntax, particularly relative to data
types, control structures, and common patterns. This should
act as a refresher for casual Go coders and an introduction for
those new to the language.
For an in-depth, progressive review of the language, we
recommend that you work through the excellent A Tour of Go
(https://tour.golang.org/) tutorial. It’s a comprehensive, hands-
on discussion of the language broken into bite-sized lessons
that use an embedded playground to enable you to try out each
of the concepts.
The language itself is a much cleaner version of C that
removes a lot of the lower-level nuances, resulting in better
readability and easier adoption.
Data Types
Like most modern programming languages, Go provides a
variety of primitive and complex data types. Primitive types
consist of the basic building blocks (such as strings, numbers,
and booleans) that you’re accustomed to in other languages.
Primitives make up the foundation of all information used
within a program. Complex data types are user-defined
structures composed of a combination of one or more
primitive or other complex types.
Primitive Data Types
The primitive types include bool, string, int, int8, int16, int32, int64,
uint, uint8, uint16, uint32, uint64, uintptr, byte, rune, float32, float64,
complex64, and complex128.
You typically declare a variable’s type when you define it.
If you don’t, the system will automatically infer the variable’s
data type. Consider the following examples:
var x = "Hello World"
z := int(42)
In the first example, you use the keyword var to define a
variable named x and assign to it the value "Hello World". Go
implicitly infers x to be a string, so you don’t have to declare
that type. In the second example, you use the := operator to
define a new variable named z and assign to it an integer value
of 42. There really is no difference between the two operators.
We’ll use both throughout this book, but some people feel that
the := operator is an ugly symbol that reduces readability.
Choose whatever works best for you.
In the preceding example, you explicitly wrap the 42 value
in an int call to force a type on it. You could omit the int call
but would have to accept whatever type the system
automatically uses for that value. In some cases, this won’t be
the type you intended to use. For instance, perhaps you want
42 to be represented as an unsigned integer, rather than an int
type, in which case you’d have to explicitly wrap the value.
Slices and Maps
Go also has more-complex data types, such as slices and maps.
Slices are like arrays that you can dynamically resize and pass
to functions more efficiently. Maps are associative arrays,
unordered lists of key/value pairs that allow you to efficiently
and quickly look up values for a unique key.
There are all sorts of ways to define, initialize, and work
with slices and maps. The following example demonstrates a
common way to define both a slice s and a map m and add
elements to both:
var s = make([]string, 0)
var m = make(map[string]string)
s = append(s, "some string")
m["some key"] = "some value"
This code uses the two built-in functions: make() to initialize
each variable and append() to add a new item to a slice. The last
line adds the key/value pair of some key and some value to the map
m. We recommend that you read the official Go documentation
to explore all the methods for defining and using these data
types.
Pointers, Structs, and Interfaces
A pointer points to a particular area in memory and allows you
to retrieve the value stored there. As you do in C, you use the
& operator to retrieve the address in memory of some variable,
and the * operator to dereference the address. The following
example illustrates this:
❶ var count = int(42)
❷ ptr := &count
❸ fmt.Println(*ptr)
❹ *ptr = 100
❺ fmt.Println(count)
The code defines an integer, count ❶, and then creates a
pointer ❷ by using the & operator. This returns the address of
the count variable. You dereference the variable ❸ while
making a call to fmt.Println() to log the value of count to stdout.
You then use the * operator ❹ to assign a new value to the
memory location pointed to by ptr. Because this is the address
of the count variable, the assignment changes the value of that
variable, which you confirm by printing it to the screen ❺.
You use the struct type to define new data types by
specifying the type’s associated fields and methods. For
example, the following code defines a Person type:
❶ type Person struct {
❷ Name string
❸ Age int
}
❹ func (p *Person) SayHello() {
fmt.Println("Hello,", p.Name❺)
}
func main() {
var guy = new❻(Person)
❼ guy.Name = "Dave"
❽ guy.SayHello()
}
The code uses the type keyword ❶ to define a new struct
containing two fields: a string named Name ❷ and an int named
❸.
Age
You define a method, SayHello(), on the Person type assigned
to variable p ❹. The method prints a greeting message to
stdout by looking at the struct, p ❺, that received the call.
Think of p as a reference to self or this in other languages. You
also define a function, main(), which acts as the program’s entry
point. This function uses the new keyword ❻ to initialize a new
Person. It assigns the name Dave to the person ❼ and then tells
the person to SayHello() ❽.
Structs lack scoping modifiers—such as private, public, or
protected—that are commonly used in other languages to
control access to their members. Instead, Go uses
capitalization to determine scope: types and fields that begin
with a capital letter are exported and accessible outside the
package, whereas those starting with a lowercase letter are
private, accessible only within the package.
You can think of Go’s interface type as a blueprint or a
contract. This blueprint defines an expected set of actions that
any concrete implementation must fulfill in order to be
considered a type of that interface. To define an interface, you
define a set of methods; any data type that contains those
methods with the correct signatures fulfills the contract and is
considered a type of that interface. Let’s take a look at an
example:
❶ type Friend interface {
❷ SayHello()
}
In this sample, you’ve defined an interface called Friend ❶
that requires one method to be implemented: SayHello() ❷. That
means that any type that implements the SayHello() method is a
Friend. Notice that the Friend interface doesn’t actually
implement that function—it just says that if you’re a Friend, you
need to be able to SayHello().
The following function, Greet(), takes a Friend interface as
input and says hello in a Friend-specific way:
func Greet❶ (f Friend❷) {
f.SayHello()
}
You can pass any Friend type to the function. Luckily, the
Person type used in the previous example can SayHello()—it’s a
Friend. Therefore, if a function named Greet() ❶, as shown in the
preceding code, expects a Friend as an input parameter ❷, you
can pass it a Person, like this:
func main() {
var guy = new(Person)
guy.Name = "Dave"
Greet(guy)
}
}
Using interfaces and structs, you can define multiple types
that you can pass to the same Greet() function, so long as these
types implement the Friend interface. Consider this modified
example:
❶ type Dog struct {}
func (d *Dog) SayHello()❷ {
fmt.Println("Woof woof")
}
func main() {
var guy = new(Person)
guy.Name = "Dave"
❸ Greet(guy)
var dog = new(Dog)
❹ Greet(dog)
}
The example shows a new type, Dog ❶, that is able to
SayHello() ❷ and, therefore, is a Friend. You are able to Greet()
both a Person ❸ and a Dog ❹, since both are capable of
SayHello().
We’ll cover interfaces multiple times throughout the book
to help you better understand the concept.
Control Structures
Go contains slightly fewer control structures than other
modern languages. Despite that, you can still accomplish
complex processing, including conditionals and loops, with
Go.
Go’s primary conditional is the if/else structure:
if x == 1 {
fmt.Println("X is equal to 1")
} else {
fmt.Println("X is not equal to 1")
}
Go’s syntax deviates slightly from the syntax of other
languages. For instance, you don’t wrap the conditional check
—in this case, x == 1—in parentheses. You must wrap all code
blocks, even the preceding single-line blocks, in braces. Many
other modern languages make the braces optional for single-
line blocks, but they’re required in Go.
For conditionals involving more than two choices, Go
provides a switch statement. The following is an example:
switch x❶ {
case "foo"❷:
fmt.Println("Found foo")
case "bar"❸:
fmt.Println("Found bar")
default❹:
fmt.Println("Default case")
}
In this example, the switch statement compares the contents
of a variable x ❶ against various values—foo ❷ and bar ❸—
and logs a message to stdout if x matches one of the
conditions. This example includes a default case ❹, which
executes in the event that none of the other conditions match.
Note that, unlike many other modern languages, your cases
don’t have to include break statements. In other languages,
execution often continues through each of the cases until the
code reaches a break statement or the end of the switch. Go will
execute no more than one matching or default case.
Go also contains a special variation on the switch called a
type switch that performs type assertions by using a switch
statement. Type switches are useful for trying to understand
the underlying type of an interface. For example, you might
use a type switch to retrieve the underlying type of an interface
called i:
func foo(i❶ interface{}) {
switch v := i.(type)❷ {
case int:
fmt.Println("I'm an integer!")
case string:
fmt.Println("I'm a string!")
default:
fmt.Println("Unknown type!")
}
}
This example uses special syntax, i.(type) ❷, to retrieve the
type of the i interface variable ❶. You use this value in a switch
statement in which each case matches against a specific type.
In this example, your cases check for int or string primitive
types, but you could very well check for pointers or user-
defined struct types, for instance.
Go’s last flow control structure is the for loop. The for loop
is Go’s exclusive construct for performing iteration or
repeating sections of code. It might seem odd to not have
conventions such as do or while loops at your disposal, but you
can re-create them by using variations of the for loop syntax.
Here’s one variation of a for loop:
for i := 0; i < 10; i++ {
fmt.Println(i)
}
The code loops through numbers 0 to 9, printing each
number to stdout. Notice the semicolons in the first line.
Unlike many other languages, which use semicolons as line
delimiters, Go uses them for various control structures to
perform multiple distinct, but related, subtasks in a single line
of code. The first line uses the semicolons to separate the
initialization logic (i := 0), the conditional expression (i < 10),
and the post statement (i++). This structure should be very,
very familiar to anyone who has coded in any modern
language, as it closely follows the conventions of those
languages.
The following example shows a slight variation of the for
loop that loops over a collection, such as a slice or a map:
❶ nums := []int{2,4,6,8}
for idx❷, val❸ := range❹ nums {
fmt.Println(idx, val)
}
In this example, you initialize a slice of integers named
nums ❶. You then use the keyword range ❹ within the for loop
to iterate over the slice. The range keyword returns two values:
the current index ❷ and a copy of the current value ❸ at that
index. If you don’t intend to use the index, you could replace
idx in the for loop with an underscore to tell Go you won’t need
it.
You can use this exact same looping logic with maps as
well to return each key/value pair.
Concurrency
Much like the control structures already reviewed, Go has a
much simpler concurrency model than other languages. To
execute code concurrently, you can use goroutines, which are
functions or methods that can run simultaneously. These are
often described as lightweight threads because the cost of
creating them is minimal when compared to actual threads.
To create a goroutine, use the go keyword before the call to
a method or function you wish to run concurrently:
❶ func f() {
fmt.Println("f function")
}
func main() {
❷ go f()
time.Sleep(1 * time.Second)
fmt.Println("main function")
}
In this example, you define a function, f() ❶, that you call
in your main() function, the program’s entry point. You preface
the call with the keyword go ❷, meaning that the program will
run function f() concurrently; in other words, the execution of
your main() function will continue without waiting for f() to
complete. You then use a time.Sleep(1 * time.Second) to force the
main() function to pause temporarily so that f() can complete. If
you didn’t pause the main() function, the program would likely
exit prior to the completion of function f(), and you would
never see its results displayed to stdout. Done correctly, you’ll
see messages printed to stdout indicating that you’ve finished
executing both the f() and main() functions.
Go contains a data type called channels that provide a
mechanism through which goroutines can synchronize their
execution and communicate with one another. Let’s look at an
example that uses channels to display the length of different
strings and their sum simultaneously:
❶ func strlen(s string, c chan int) {
❷ c <- len(s)
}
func main() {
❸ c := make(chan int)
❹ go strlen("Salutations", c)
go strlen("World", c)
❺ x, y := <-c, <-c
fmt.Println(x, y, x+y)
}
First, you define and use a variable c of type chan int. You
can define channels of various types, depending on the type of
data you intend to pass via the channel. In this case, you’ll be
passing the lengths of various strings as integer values
between goroutines, so you should use an int channel.
Notice a new operator: <-. This operator indicates whether
the data is flowing to or from a channel. You can think of this
as the equivalent of placing items into a bucket or removing
items from a bucket.
The function you define, strlen() ❶, accepts a word as a
string, as well as a channel that you’ll use for synchronizing
data. The function contains a single statement, c <- len(s) ❷,
which uses the built-in len() function to determine the length of
the string, and then puts the result into the c channel by using
the <- operator.
The main() function pieces everything together. First, you