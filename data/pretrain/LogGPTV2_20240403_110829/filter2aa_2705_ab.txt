B
A XOR B
0
0
0
0
1
1
1
0
1
1
1
0
Obfuscation Techniques
Using Samples 1-3 from the early exercise attempt to obfuscate 
them so that they will run
Sample 3 can be difficult to figure out what is causing the issue
Save your modified versions as a different name. We will reuse the 
unobfuscated samples latter
Close/Open Powershell ISE between samples
52
Obfuscate the Samples
Obfuscation Techniques
◦ Break large sections of code into smaller pieces
◦ Isolate fewer lines to determine what is being flagged
◦ Good place to start is looking for “AMSI”
53
Hints
Obfuscation Techniques
54
The Answers
Obfuscation Techniques
Invoke-Obfuscation
55
Install here
◦https://github.com/danielboha
nnon/Invoke-Obfuscation
◦“Start-up.ps1”
◦“Import-Module ./Invoke-
Obfuscation.psd1”
◦Run “Invoke-Obfuscation”
56
Invoke-Obfuscation
Obfuscation Techniques
Type “Tutorial” for high level 
directions
◦Extremely helpful for 
learning/remembering the basics
57
Invoke-Obfuscation
Obfuscation Techniques
Example code
◦ Use Sample 4
◦ SET SCRIPTBLOCK…
58
Invoke-Obfuscation
Obfuscation Techniques
Token-layer Obfuscation
◦ Token\Variable (extremely useful for 
masking variable names to AMSI)
◦ Token\All (if you are super lazy)
◦ This will get you caught
◦ Typically run whitespace last (2-3 
times)
59
Invoke-Obfuscation
Obfuscation Techniques
Abstract Syntax Tree (AST)
60
What is Abstract Syntax Tree (AST)?
Obfuscation Techniques
Abstract Syntax Tree (AST)
◦ Changes structure of AST
◦ AST contains all parsed content in 
Powershell code without having to 
dive into text parsing (we want to 
hide from this)
61
Invoke-Obfuscation
Obfuscation Techniques
Encoding
◦ Used to further mask the payload 
by converting the format (e.g., Hex, 
Binary, AES, etc)
◦ Beware: running too much encoding 
will break the 8,191 character limit
62
Invoke-Obfuscation
Obfuscation Techniques
String
◦Obfuscate Powershell code as a 
string
◦Breaks up the code with reversing 
techniques and concatenation
63
Invoke-Obfuscation
Obfuscation Techniques
Compress
◦Can be used in conjunction with 
Encoding to reduce the overall 
size of the payload.
64
Invoke-Obfuscation
Obfuscation Techniques
Launcher
◦Not needed since Empire already 
includes a launcher
65
Invoke-Obfuscation
Obfuscation Techniques
Order of operations
◦Mix it up to avoid detection
◦Example:
◦Token\String\1,2
◦Whitespace\1
◦Encoding\1
◦Compress\1
66
Invoke-Obfuscation
Obfuscation Techniques
67
Invoke-Obfuscation in Empire
Obfuscation Techniques
AMSI Bypasses
68
If our payload is already obfuscated enough to evade AMSI why 
bother?
◦ Only the first part of the stager is obfuscated!
69
Why do we need this?
AMSI Bypasses
AMSI bypasses let us 
load whatever future modules we 
may want without issues
◦ Mimikatz, PSInject, Powerup
70
Why do we need this?
AMSI Bypasses
◦ AMSI_RESULT_CLEAN = 0
◦ AMSI_RESULT_NOT_DETECTED = 1
◦ AMSI_RESULT_BLOCKED_BY_ADMIN_START = 16384
◦ AMSI_RESULT_BLOCKED_BY_ADMIN_END = 20479
◦ AMSI_RESULT_DETECTED = 32768
71
AMSI results
AMSI Bypasses
72
Keep It Simple Stupid
AMSI Bypasses
73
Keep It Simple Stupid
AMSI Bypasses
74
Keep It Simple Stupid
AMSI Bypasses
Simplest Bypass that currently works
◦ $Ref=[REF].Assembly.GetType('System.Management.Automation.AmsiUtils');
◦ $Ref.GetField('amsiInitFailed', 'NonPublic, Static').SetValue($NULL, $TRUE);
75
Bypass 1: Reflective Bypass
AMSI Bypasses
Using reflection we are exposing functions from AMSI
We are setting the AmsiInitField to True which source code shows 
causes AMSI to return:
◦ AMSI_SCAN_RESULT_NOT_FOUND
76
What Does it Do?
AMSI Bypasses
AMSI.dll
AMSI is loaded into the Powershell process at start up so it has the 
same permission levels as the process the malware is in
77
Why does this work?
AMSI Bypasses
More complicated bypass, but still allows AMSI to load
78
Bypass 2: Patching AMSI.dll in Memory
AMSI Bypasses
We use C# to export a few functions from kernel32 that allows to 
identify where in memory amsi.dll has been loaded
79
Bypass 2: Patching AMSI.dll in Memory
AMSI Bypasses
We modify the memory permissions to ensure we have access
80
Bypass 2: Patching AMSI.dll in Memory
AMSI Bypasses
Modifies the return function to all always return a value of 
RESULT_NOT_DETECTED
81
Bypass 2: Patching AMSI.dll in Memory
AMSI Bypasses
AMSI.dll is loaded into the same memory space as Powershell. 
This means that we have unrestricted access to the memory space 
that AMSI runs in and can modify it however we please
Tells the function to return a clean result prior to actually scanning
82
Why does this work?
AMSI Bypasses
Ensure that ObfuscateCommand
and AMSI Bypass both display 
values
◦ “set Obfuscate True”
◦ “set ObfuscateCommand Token\String\1,1,2, 
Token\Variable\1, Token\Whitespace\1,1, 
Compress\1”
◦ “set AMSIBypass True”
83
AMSI Bypasses in Empire
AMSI Bypasses
Re-enable Defender and run your Empire launcher
84
Test time!
AMSI Bypasses
Sandbox Detection and 
Evasion
85
◦ A software created environment that isolates 
and limits the rights and accesses of a 
process being executed
◦ An effective way of doing behavioral analysis 
for AV
86
What is a Sandbox?
Sandbox Evasion
87
Who is using Sandboxes?
Sandbox Evasion
As we talked about earlier, obfuscating 
code to break signatures can be 
relatively trivial
◦ AV would need an almost unlimited 
number of signatures
Heavily obfuscated code can make it 
almost impossible for human analysis to 
be effective
Instead evaluate behavior
88
Automated Sandbox Malware analysis
Sandbox Evasion
Sandbox Indicators
89
They use a lot of resources 
which can be expensive
End users don't want to wait to 
receive their messages
Email scanning requires 
thousands of attachments to 
be evaluated constantly
90
Sandbox Limitations
Sandbox Indicators
These limitations provide us with several means to try and detect or 
evade them
◦ Password Protection
◦ Time Delays
◦ Auto open vs close
◦ Check for limited resources (small amount of ram, single core, etc.)
◦ Look for virtualization processes (sandboxie, VMWare tools)
91
Sandbox Limitations
Sandbox Indicators
Embedding Macros
92
93
Back to Empire
Usestager
◦Tailor the stager to what the target is
◦Our focus is Windows using a Macro (will be used later) 
◦“Windows/macro”
Embedding Macros
◦Set stager and listener
◦Copy macro over to Word
94
Creating a Payload
Embedding Macros
95
Turning on Developer Options
Embedding Macros
Open Word Document
Select Developer Options
Click on Macros
96
Embedding the Macro
Embedding Macros
97
Embedding the Macro
Embedding Macros
Drag and drop NewMacros from Modules to current Project
98
Embedding the Macro
Embedding Macros
Evasion Techniques
99
Before we do suspicious things such as…
◦ Starting a new process
◦ Reaching out to the internet
The checks could be suspicious themselves
◦ Sandbox Evasion is becoming more 
prevalent
100
When do we want to do this?
Evasion Techniques
The sandbox doesn't know the 
password and therefore can't open 
the file. No results are found so the 
file is passed on.
The password is usually sent in the 
body of the email with instructions to 
use it.
◦ Lower success rate
101
Password Protection
Evasion Techniques
Email filters have a limited amount of time to scan files so delay 
until it the scan is completed
This is less practical in a macro as it will keep the document open 
until done waiting
102
Time Delay
Evasion Techniques
Using WMI Objects you can enumerate the hardware and system 
configurations
Some malware looks for things like the presence of a fan
◦ Note: WMI objects are very inconsistently implemented by manufacturers. 
103
Checking for Resources
Evasion Techniques
Some Useful WMI Objects
◦ Win32_ComputerSystem
◦ Win32_LogicalDisk
◦ Win32_Fan
◦ Win32_videocontroller
104
Checking for Resources
Evasion Techniques
Most if not all sandboxes result in the addition of management 
processes that we can look for
◦ Win32_Process contains all the processes currently running
Some common processes to look for:
◦ Sbiesvc, SbieCtrl
◦ Vmtools
◦ VBoxService
105
Checking for Processes
Evasion Techniques
Because of the control many developers have on implementing 
WMI objects or naming processes there is no one check that is 
guaranteed to work.
◦ Learn as much as possible about the target environment
◦ Use multiple halting conditions
◦ Check places like attack.mitre.org to look for new techniques if old ones fail
106
There is no one way guaranteed to work
Evasion Techniques
Commonality between sandboxes can 
be used as a fingerprint
◦ Number of CPU cores
◦ RAM
◦ Disk Size
Not common
◦ IP address
◦ Machine and User names
107
Evasion Development
Evasion Techniques
Put it all together
YOUR TURN TO TRY IT ALL
109
1. Build payload in Empire
◦ AMSI Bypass
◦ Obfuscation
2. Embed into Word Doc
◦ Verification
3. Add in Macro Checks to avoid “Sandbox”
4. (Optional) Test on host machine
110
Put it all together
Put it all together
PI:EMAIL
@BCSECURITY1
HTTPS://GITHUB.COM/BC-SECURITY/DEFCON27
111