Client-side API. Clients implement:
VerMemb(V K, di , k, b, π ) → {T , F}. Deterministic algorithm that
verifies proofs returned by ProveMemb(·) against the digest di.
When b = 1, verifies k is in the set via the membership proof π.
When b = 0, verifies k is not in the set via the non-membership
proof π. (We formalize security in Section 3.1.)
VerAppendOnly(V K, di , i, dj , j, πi, j ) → {T , F}. Deterministic algo-
rithm that ensures a set remains append-only. Verifies that πi, j
correctly proves that the set with digest di is a subset of the set
with digest dj. Also, verifies that di and dj are digests of sets at
version i and j respectively, enforcing fork consistency.
Using the API. To use an AAS scheme, first public parameters
need to be computed using a call to Setup(·). If the AAS scheme
is trapdoored, a trusted party or MPC protocol runs Setup(·) and
forgets the trapdoor (see Section 7). Once computed, the parameters
can be reused by different servers for different append-only sets.
Setup(·) also returns a public verification key V K to all clients.
Then, the server broadcasts the initial digest d0 of the empty set
S0 to its many clients. Clients can concurrently start appending
elements using Append(·) calls. If the server is honest, it serial-
izes Append(·) calls. Eventually, the server returns a new digest di
to clients along with an append-only proof π0,i computed using
ProveAppendOnly(·). Some clients might be offline but eventually
they will receive either di or a newer dj , j > i. Importantly, when-
ever clients transition from version i to j, they check an append-only
proof πi, j using VerAppendOnly(V K, di , i, dj , j, πi, j ).
Clients can look up elements in the set. The server proves (non)-
membership of an element using ProveMemb(·). A client verifies
the proof using VerMemb(·) against their digest. As more elements
are added by clients, the server continues to publish a new digest
dj and can prove it is a superset of any previous digest di using
ProveAppendOnly(·).
3.1 AAS Correctness and Security Definitions
We first introduce some helpful notation for our correctness def-
initions. Consider an ordered sequence of n appends (ki )i∈[n].
Let S′, d′ ← Append+ (pp,S, d, (ki )i∈[n]) denote a sequence of
Append(·) calls arbitrarily interleaved with other ProveMemb(·)
and ProveAppendOnly(·) calls such thatS′, d′ ← Append(pp,Sn−1,
dn−1, kn ), Sn−1, dn−1 ← Append(pp,Sn−2, dn−2, kn−1), . . . , S1, d1
← Append(pp,S, d, k1). Finally, let S0 denote an empty AAS with
empty digest d0.
Definition 3.1 (Append-only Authenticated Set). (Setup, Append,
ProveMemb, ProveAppendOnly, VerMemb, VerAppendOnly) is a
secure append-only authenticated set (AAS) if ∃ a negligible func-
tion ε, ∀ security parameters λ, ∀ upper-bounds β = poly(λ) and
∀n ≤ β it satisfies the following properties:
Membership correctness.∀ ordered sequences of appends (ki )i∈[n],
for all elements k, where b = 1 if k ∈ (ki )i∈[n] and b = 0 otherwise,
Pr
(pp, V K ) ← Setup(1λ, β ),
(S, d ) ← Append+ (pp, S0, d0, (ki )i∈[n]),
b = b′ ∧ VerMemb(V K, d, k, b, π ) = T
(b′, π ) ← ProveMemb(pp, S, k ) :
 ≥ 1 − ε (λ)
Observation: Note that this definition compares the returned bit b′
with the “ground truth” in (ki )i∈[n] and thus provides membership
correctness. Also, it handles non-membership correctness since b′
can be zero. Finally, the definition handles all possible orders of
appending elements.
Membership security. ∀ adversaries A running in time poly(λ),
Pr
(pp, V K ) ← Setup(1λ, β ),
(d, k, π, π′) ← A(pp, V K ) :
VerMemb(V K, d, k, 0, π, ) = T ∧
VerMemb(V K, d, k, 1, π′, ) = T
 ≤ ε (λ)
Observation: This definition captures the lack of any “ground truth”
about what was inserted in the set, since there is no trusted source
in our model. Nonetheless, given a fixed digest d, our definition pre-
vents all equivocation attacks about the membership of an element
in the set.
Append-only correctness.∀m < n,∀ sequences of appends (ki )i∈[n]
where n ≥ 2,
(pp, V K ) ← Setup(1λ, β )
(Sm, dm ) ← Append+ (pp, S0, d0, (ki )i∈[m]),
(Sn, dn ) ← Append+ (pp, Sm, dm, (ki )i∈[m+1,n]),
π ← ProveAppendOnly(pp, Sm, Sn ) :
VerAppendOnly(V K, dm, m, dn, n, π ) = T
Pr
 ≥ 1 − ε (λ)
Session 6C: Secure Computing VICCS ’19, November 11–15, 2019, London, United Kingdom1303Append-only security. ∀ adversaries A running in time poly(λ),
(pp, V K ) ← Setup(1λ, β )
(di, dj, i < j, πa, k, π, π′) ← A(pp, V K ) :
VerAppendOnly(V K, di, i, dj, j, πa ) = T ∧
VerMemb(V K, di, k, 1, π ) = T ∧
VerMemb(V K, dj, k, 0, π′) = T
 ≤ ε (λ)
 ≤ ε (λ)
Pr
Observation: This definition ensures that elements can only be added
to an AAS.
Fork consistency. ∀ adversaries A running in time poly(λ),
Pr
(pp, V K ) ← Setup(1λ, β )
(di (cid:44) d′
i , dj , i < j, πi , π′
i ) ← A(pp, V K ) :
VerAppendOnly(V K, di , i, dj , j, πi ) = T ∧
VerAppendOnly(V K, d′
i , i, dj , j, π′
i ) = T
Observation: This is our own version of fork consistency that cap-
tures what is known in the literature about fork consistency [29, 61].
Specifically, it allows a server to fork the set at version i by present-
ing two different digests di and d′
i and prevents the server from
forging append-only proofs that “join” the two forks into some
common digest dj at a later version j.
4 AAS FROM ACCUMULATORS
This section presents our accumulator-based AAS construction. We
focus on bilinear accumulators here and discuss how our construc-
tion would benefit from RSA accumulators in Section 7. We give a
more formal algorithmic description in Appendix B.
As mentioned in Section 1, a bilinear accumulator over n el-
ements is already an AAS, albeit an inefficient one. Specifically,
proving (non)membership in a bilinear accumulator requires an
O (n) time polynomial division. As a consequence, precomputing all
n membership proofs (naively) takes O (n2) time, which is prohibi-
tive for most use cases. Even worse, for non-membership, one must
precompute proofs for all possible missing elements, of which there
are exponentially many (in the security parameter λ). Therefore,
we need new techniques to achieve our desired polylogarithmic
time complexity for computing both types of proofs in our AAS.
A bilinear tree accumulator. Our first technique is to deploy the
bilinear accumulator in a tree structure, as follows. We start with
the elements ei as leaves of a binary tree (see Figure 2b). Specifically,
each leaf will store an accumulator over the singleton set {ei}.
Every internal node in the tree will then store an accumulator
over the union of the sets corresponding to its two children. For
example, the parent node of the two leaves corresponding to {ei}
and {ei +1} stores the accumulator of the set {ei , ei +1}. In this way,
the root is the accumulator over the full set S = {e1, . . . , en} (see
Figure 2). We stress that all these accumulators use the same public
parameters. The time to compute all the accumulators in the tree is
T (n) = 2T (n/2) + O (n log n) = O (n log2 n) where O (n log n) is the
time to multiply the characteristic polynomials of two sets of size n
in the tree. We call the resulting structure a bilinear tree over set S.
Membership proofs in bilinear trees. A membership proof for
element ei will leverage the fact that sets along the path from
ei’s leaf to the root of the bilinear tree are subsets of each other.
The proof will consist of a sequence of subset proofs that validate
this (computed as explained in Section 2.1). Specifically, the proof
contains the accumulators along the path from ei’s leaf to the root,
Figure 2: On the left side, we depict a trie over set S = {a, b, c}.
Each element is mapped to a unique path of length 4 in the
trie. Nodes that are not in the trie but are at its frontier are
depicted in red. On the right side, we depict a bilinear fron-
tier tree (BFT) corresponding to the set S. To prove that an
element is not in S, we prove one of its prefixes is in the BFT.
as well as the accumulators of all sibling nodes along this path
(see Figure 2b). The client verifies all these subset proofs, starting
from the singleton set {ei} in the leaf. This convinces him that
ei is contained in the parent’s accumulated set, which in turn is
contained in its parent’s accumulated set and so on, until the root.
Our bilinear tree approach gives us membership proofs of log-
arithmic size and thus logarithmic verification time. Importantly,
computing a bilinear tree in O (n log2 n) time implicitly computes
all membership proofs “for free”! In contrast, building a standard
billinear accumulator over S would yield constant-size proofs but
in O (n2) time for all n proofs. Unfortunately, our bilinear tree struc-
ture does not (yet) support precomputing non-membership proofs.
We devise new techniques that address this next.
Bilinear prefix trees to the rescue. To efficiently precompute
non-membership proofs, we slightly modify our bilinear tree. In-
stead of storing an element ei ∈ S, the ith leaf will store the set
of prefixes of the binary representation of ei. We assume this rep-
resentation is 2λ bits (or is made so using a CRHF) and can be
mapped to an element in Fp (which is also of size ≈ 2λ bits) and
thus can be accumulated. For example, a leaf that previously stored
element e1 with binary representation 0001, will now store the set
P (e1) = {ε, 0, 00, 000, 0001} (i.e., all the prefixes of the binary repre-
sentation of e1, including the empty string ε). In general, for each
element ei, P (ei ) is the set of all 2λ+1 prefixes of ei. Also, for any set
S = {e1, . . . , en}, we define its prefix set as P (S ) = P (e1)∪· · ·∪P (en ).
For example, let S = {a = 0001, b = 0101, c = 1110}. The root of
S’s bilinear tree will contain an accumulator over P (S ) = P (a) ∪
P (b) ∪ P (c) = {ε, 0, 1, 00, 01, 11, 000, 010, 111, 0001, 0101, 1110}.
We refer to such a bilinear tree as a bilinear prefix tree (BPT)
over S. The time to build a BPT for S is O (λn log2 n) since there
are O (λn) prefixes across all leaves. Note that membership proofs
in a BPT are the same as in bilinear trees, with a minor change.
The internal nodes of the tree still store accumulators over the
union of their children. However, the children now have common
prefixes, which will only appear once in the parent. For example,
two children sets have the empty string ε while their parent set only
has ε once (because of the union). As a result, it is no longer the
case that multiplying the characteristic polynomials of the children
gives us the parent’s polynomial. Therefore, we can no longer rely
on the sibling as subset proofs: we have to explicitly compute subset
proofs for each child w.r.t. its parent. We stress that this does not
affect the asymptotic time complexity of computing the BPT. As
Session 6C: Secure Computing VICCS ’19, November 11–15, 2019, London, United Kingdom1304Figure 3: A forest starting empty and going through a se-
quence of five appends. A forest only has trees of exact size
2j for distinct j’s. A forest of n leaves has at most log n trees.
before, the client starts the proof verification from the leaf, which
now stores a prefix set P (ei ) rather than a singleton set {ei}.
Efficient non-membership proofs. But how does a BPT help
with precomputing non-membership proofs for any element e′ (cid:60) S?
First, note that, because of our use of prefixes, to prove e′ (cid:60) S
it suffices to show that any one prefix ρ of e′ is not contained in
P (S ). Second, note that there might exist other elements e′′ who
share ρ as a prefix. As a result, the non-membership proof for
e′ could be “reused” as a non-membership proof for e′′. This is
best illustrated in Figure 2a using our previous example where
S = {a, b, c}. Consider elements d = 0111 and f = 0110 that are
not in S. To prove non-membership for either element, it suffices to
prove the same statement: 011 (cid:60) P (S ). Thus, if we can identify all
such shared prefixes, we can use them to prove the non-membership
of (exponentially) many elements. (This technique is also used in
Micali et al’s zero-knowledge sets [70].)
To do this, we insert all elements from S in a trie as depicted
in Figure 2a. Next, we keep track of the prefixes at the “frontier”
of the trie depicted in red in Figure 2a. We immediately notice
that to prove non-membership of any element, it suffices to prove
non-membership of one of these frontier prefixes! In other words,
elements that are not in S will have one of these as a prefix. Thus,
we formally define the frontier of S as:
F (S ) = {ρ ∈ {0, 1}≤2λ : ρ (cid:60) P (S ) ∧ parent(ρ) ∈ P (S )},
where parent(ρ) is ρ without its last bit (e.g., parent(011) = 01).
Note that the size of F (S ) is O (λn), proportionate to P (S ).
Most importantly, from the way P (S ) and F (S ) are defined, for
any element e′ it holds that e′ (cid:60) S if, and only if, some prefix of
e′ is in F (S ). Therefore, proving non-membership of e′ boils down
to proving two statements: (i) some prefix of e′ belongs to F (S ),
and (ii) P (S ) ∩ F (S ) = ∅. We stress that the latter is necessary as a
malicious server may try to craft F (S ) in a false way (e.g., by adding
some prefixes both in P (S ) and in F (S )). To prove (i), we build a
bilinear tree over F (S ) which gives us precomputed membership
proofs for all ρ ∈ F (S ). We refer to this tree as the bilinear frontier
tree (BFT) for set S and to the proofs as frontier proofs. To prove
(ii), we compute a disjointness proof between sets P (S ) and F (S ),
as described in Section 2.1 (i.e., between the root accumulators
of the BFT and the BPT of S). The time to build a BFT for S is
O (λn log2 n) since F (S ) has O (λn) elements. The disjointness proof
can be computed in O (λn log2 n) time.
Static AAS construction. Combining all the above techniques, we
obtain a static AAS that does not support updates efficiently (nor
append-only proofs). This construction consists of: (a) a BPT for S,
(b) a BFT for S, and (c) a proof of disjointness between P (S ) and F (S )