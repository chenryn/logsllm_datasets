title:On the Design and Misuse of Microcoded (Embedded) Processors - A
Cautionary Note
author:Nils Albartus and
Clemens Nasenberg and
Florian Stolz and
Marc Fyrbiak and
Christof Paar and
Russell Tessier
On the Design and Misuse of Microcoded 
(Embedded) Processors — A Cautionary Note
Nils Albartus and Clemens Nasenberg, Ruhr University Bochum, Germany; 
Max Planck Institute for Security and Privacy, Germany; Florian Stolz, 
Ruhr University Bochum, Germany; Marc Fyrbiak, Max Planck Institute for 
Security and Privacy, Germany; Christof Paar, Ruhr University Bochum, Germany; 
Max Planck Institute for Security and Privacy, Germany; Russell Tessier, 
University of Massachusetts, Amherst, USA
https://www.usenix.org/conference/usenixsecurity21/presentation/albartus
This paper is included in the Proceedings of the 30th USENIX Security Symposium.August 11–13, 2021978-1-939133-24-3Open access to the Proceedings of the 30th USENIX Security Symposium is sponsored by USENIX.On the Design and Misuse of Microcoded
(Embedded) Processors — A Cautionary Note
Nils Albartus*†, Clemens Nasenberg*†, Florian Stolz*, Marc Fyrbiak†,
Christof Paar*† and Russell Tessier‡
*Ruhr University Bochum, Germany
†Max Planck Institute for Security and Privacy, Germany
‡University of Massachusetts, Amherst, USA
Abstract
Today’s microprocessors often rely on microcode updates to
address issues such as security or functional patches. Unfor-
tunately, microcode update ﬂexibility opens up new attack
vectors through malicious microcode alterations. Such attacks
share many features with hardware Trojans and have similar
devastating consequences for system security. However, due
to microcode’s opaque nature, little is known in the open lit-
erature about the capabilities and limitations of microcode
Trojans.
We introduce the design of a microcoded RISC-V proces-
sor architecture together with a microcode development and
evaluation environment. Even though microcode typically has
almost complete control of the processor hardware, the design
of meaningful microcode Trojans is not straightforward. This
somewhat counter-intuitive insight is due to the lack of infor-
mation at the hardware level about the semantics of executed
software. In three security case studies we demonstrate how
to overcome these issues and give insights on how to design
meaningful microcode Trojans that undermine system secu-
rity. To foster future research and applications, we publicly
release our implementation and evaluation platform1.
1 Introduction
Embedded systems are the technology behind the Internet of
Things (IoT) and many other existing and emerging applica-
tions, ranging from smart appliances and medical implants
to self-driving cars [12]. Since the life-span of embedded
systems commonly stretches over years or even decades, they
must offer ﬂexibility with respect to both function and se-
curity. Even though most of today’s embedded systems pro-
vide a mechanism to update software, some security prob-
lems cannot be handled with software updates alone and
require changes to the underlying hardware [25]. To this
end, hardware updates in the form of new microcode have
been common practice in desktop and server systems for
many years [7, 15, 29]. Microcode [36] can be viewed as an
1https://github.com/emsec/riscv-ucode
interpreter between the software-visible Instruction Set Ar-
chitecture (ISA) and the internal hardware realization of the
Central Processing Unit (CPU). Updated microcode provides
a mechanism for efﬁcient in-ﬁeld hardware changes. The
countermeasures for high-proﬁle micro-architectural attacks,
such as Spectre [20], are impressive examples of the security
beneﬁts offered by microcode [17]. Attack mitigation was
possible via microcode updates for deployed hardware. How-
ever, microcode is not restricted to popular desktop/server
CPUs. Some embedded processors incorporate updatable mi-
crocode, e.g., the Intel Atom processor family. It is reasonable
to assume that embedded microcode architectures will be-
come increasingly common in the future, given the growing
complexity and safety/security requirements of embedded
systems, e.g., cyber-physical systems and the IoT.
Microprocessors, and other integrated circuits, are in al-
most all systems considered trusted, which has the unfor-
tunate consequence that malicious low-level manipulations,
e.g., through hardware Trojans, can lead to devastating secu-
rity failures, cf., e.g., [13]. Hardware Trojans in Application
Speciﬁc Integrated Circuits (ASICs) are static and lack post-
manufacturing versatility, limiting their usefulness (from an
attacker’s perspective) in several ways. First, they cannot be
erased once they are implemented, which imposes strict re-
quirements on their stealthiness since they have to stay unde-
tectable during the entire lifetime of the application. Second,
typically all ASICs of a series are Trojan-equipped, which in-
creases the risk that they will eventually be detected. Third, it
is difﬁcult to distribute the affected ASICs selectively: It can
be attractive for an adversary to distribute weakened hardware
only to a certain user population, e.g., only in government
systems in a speciﬁc country. In contrast to hardware Tro-
jans, microcode Trojans overcome these “drawbacks” (again,
from an adversarial perspective) due to their adaptive nature.
Microcode Trojans combine low-level hardware access with
software-level ﬂexibility, which results in two powerful key
features: (1) they are dynamically programmable, and (2) they
can be dynamically injected and removed via updates. At the
same time, they share the potential to undermine system in-
USENIX Association
30th USENIX Security Symposium    267
tegrity and security in the same devastating way as classical
hardware Trojans, while simultaneously being extremely dif-
ﬁcult to detect by current software defense measures [22].
These features make microcode Trojans attractive for large-
scale adversaries such as nation-state actors.
In general, microcode architecture details are proprietary,
and microcode updates are typically secured using strong
cryptography. Update keys and the microcode implementa-
tion itself are among the most guarded secrets of CPU ven-
dors. However, researchers recently demonstrated that both
microcode cryptographic keys [10] and microcode implemen-
tations details [22] can be disclosed from commercial off-
the-shelf (COTS) CPUs. In particular, the former work [10]
demonstrated the successful extraction of decryption keys
for Intel Atom, Celeron, and Pentium CPUs, so that in case
of physical device access, custom microcode updates can be
issued. The latter work [22] reverse-engineered signiﬁcant
parts of the microcode structure and microcode capabilities of
AMD K8/K10 CPUs. Generally, there is no straightforward
way to analyze microcode nor to identify the potential for
malicious microcode updates.
Goals and Contributions.
In this paper, we focus on the
design and security implications of microcoded CPUs in em-
bedded systems. Our goal is to assess the effectiveness, capa-
bilities, and limitations of malicious microcode with respect
to system security and cryptographic implementations. We
must overcome the major challenge that even though a mi-
crocode Trojan designer has seemingly total control over a
platform, he/she faces the conundrum of having limited in-
formation about the application and/or system-level software
under execution.
Since, to the best of our knowledge, no suitable open-source
implementation of a contemporary microcoded CPU and as-
sociated microcode development tools are available, we de-
veloped a microcoded architecture for the RISC-V ISA for
experimentation and evaluated it on a Field Programmable
Gate Array (FPGA)-based platform. This microcoded proces-
sor implementation is synthesizable, designed in an embedded
system context with additional peripherals, and supports the
entire RISC-V base instruction set (RV32I). It provides a
realistic embedded platform for our microcode Trojan exper-
imentation. Based on this platform, we make the following
contributions:
• Microcode Trojans. We introduce a realistic adversary
model for microcode attacks on modern (embedded) sys-
tems. We demonstrate the workﬂow of a Trojan designer
and show how to overcome the “unlimited capabilities
versus limited information” situation.
• Capabilities and limitations of microcode Trojan ex-
ploits. We describe representative microcode Trojans
that circumvent a secure boot mechanism and two ex-
amples of symmetric crypto subversion through side-
channel analysis and trigger-word based key leakage.
Their threat potential and countermeasures are discussed.
• Real-world relevance. We maintain high practical rel-
evance by injecting Trojans into widely-used software
and ﬁrmware. We manipulate the veriﬁcation check of
the Chrome OS bootloader, insert an exploitable timing
side-channel in popular constant-time AES implemen-
tations such as openSSL, and show how to leak the key
for an architecture-speciﬁc implementation by inserting
targeted faults.
• Microcoded RISC-V evaluation platform. We present
the design and implementation of a microcoded RISC-V
(RV32I) microprocessor implemented on an FPGA eval-
uation system. Our platform supports numerous tasks
tailored to security engineering (e.g., prototyping for ISA
extensions). To foster research and education in hard-
ware security and computer architecture, our evaluation
platform is publicly available.
2 Technical Background
In this section, we provide a systematic overview of the me-
chanics of microcode and its (mis-)uses in security applica-
tions. Moreover, we provide a brief background on (classical)
hardware Trojans to highlight similarities and differences to
malicious microcode.
2.1 Microcode
Microcode Overview Since microcode serves as an ab-
straction layer between static hardware and user-visible
ISA instructions, hardware manufacturers have utilized mi-
crocode in Complex Instruction Set Computer (CISC) pro-
cessors for improved efﬁciency and diagnostics for several
decades [7, 15, 29]. Microcode is generally used in CISC ar-
chitectures (most notably x86) for instructions that can not
easily be directly implemented in hardware based on Reduced
Instruction Set Computer (RISC) paradigms. In particular, a
complex instruction, a.k.a. macroinstruction, is translated into
a sequence of simple microinstructions [36] to perform com-
putation. Although microcode was initially implemented in
a read-only fashion [22, 30], manufacturers introduced an
update mechanism to handle complex design errors for in-
ﬁeld hardware (e.g., Intel Pentium fdiv bug [39]) and install
changes late in the design process. Typically, a microcode
update is uploaded to a CPU during boot processes via moth-
erboard ﬁrmware (e.g., BIOS or UEFI) or the operating sys-
tem. Since an update is stored in low-latency, volatile CPU
RAM, microcode updates are non-persistent. In addition, con-
temporary CISC processors leverage microcode to deploy
security measures (e.g., Intel SGX [8]) or mitigations against
micro-architecture attacks (e.g, Spectre, Meltdown, . . . ) [17].
Microcode Encoding Microprocessors have tight space re-
quirements. Microcode instructions must be stored in an in-
268    30th USENIX Security Symposium
USENIX Association
tegrated ROM, which requires signiﬁcant space on the die
depending on the spaciousness of microcode instructions. In
general, two formats for microcode encoding exist [23]:
• Horizontal microcode is minimally encoded. Each bit
of the microcode instruction steers exactly one control
signal inside the CPU. This approach allows for paral-
lelism as one instruction can perform many tasks at once.
However, this format is verbose and wastes Read-Only
Memory (ROM) space because some signals may be mu-
tually exclusive and will never be activated at the same
time.
• Vertical microcode is maximally encoded and resem-
bles traditional RISC instruction sets. In this format,
multiple control signals are encoded into compressed
bit ﬁelds leading to a more compact microcode. The
designer, therefore, trades ROM space for additional de-
coders which are usually cheaper to implement than
larger ROMs.
Microcode Hooks CPUs manufactured by major vendors
Intel and AMD support a series of match registers which are
used to update faulty microcode instructions. These registers
redirect microcode execution from ROM to update RAM
for speciﬁc ISA opcodes. Details from these microcoded
architectures have been reverse engineered from patents [8,
22] and device delayering [21]. Thus, all ISA instructions can
potentially be hooked.
Microcode Scratch Registers Koppe et al. wrote a speci-
ﬁcation of AMD’s microcode based on their ﬁndings during
reverse engineering [22]. AMD’s microcode has access to
internal registers which are hidden from the software pro-
grammer and the general-purpose registers of the x86 ISA.
Some internal registers have special functions that, for exam-
ple, help to implement branches. Others can be used to store
temporary values, thus we refer to them as scratch registers.
Microcode Security Aspects This paper examines
microcode-based Trojans
that can leak cryptographic
information from the processor. Previous work on microcode
Trojans [22] examined different attack vectors enabled by
malicious microcode updates. The paper mainly focused on
privilege escalation or gaining system control. Previous work
by Koppe et al. [22] only provided necessary primitives for
cryptographic attack vectors on public-key cryptographic
systems, but did not provide details on end-to-end attacks.
Microcode Update Microcode updates can either be ap-
plied by the BIOS or UEFI that is installed on the mother-
board or by the operating system itself. Linux and Windows
both offer functionality to update microcode automatically
during their respective boot processes. To prevent attackers
from issuing malicious microcode updates, Intel implements
an RSA signature scheme that veriﬁes update integrity with
the microcode update being encrypted [7].
2.2 Hardware Trojans
In 2005, the US Department of Defense published a report
about hardware trustworthiness, which sparked extensive re-
search on the offensive and defensive aspects of malicious
hardware manipulations [6, 11, 13, 16, 40]. A hardware Trojan
typically consists of a payload, realizing the malicious func-
tionality, and a trigger, activating the Trojan payload. Trigger
logic implements the activation condition of the Trojan and
usually depends on a set of trigger inputs. Generally, the trig-
ger is designed to avoid detection during testing and is often
only activated on rare conditions [16].
Hardware Trojan research has been mainly focused on in-
jecting Trojans at the hardware description level or in supply-
chain processes [6]. Conﬁrmed real-world hardware Trojans
have not been seen with the exception of Bloomberg’s Big
Hack [28], and even that Trojan allegedly involved PCB-level
modiﬁcations rather than malicious circuit manipulations.
3 Designing Microcode Trojans: Seemingly
Unlimited Capabilities vs. Limited Informa-
tion
In this section, we describe the attack model and discuss the
principal capabilities and limitations of malicious microcode.
3.1 Adversary Model
The high-level goal of the adversary is to undermine system
security (e.g., by extraction of cryptographic keys) with the
help of malicious microcode updates. In particular, malicious
microcode subverts the general trust model assumptions -
namely that the hardware is trustworthy and behaves correctly.
We assume that the adversary has knowledge about the mi-
crocode design and its implementation details, cf. Section 4,
and is capable of deploying microcode updates on a target sys-
tem. Even though microcode updates are (cryptographically)
secured in practice, several works have already demonstrated
how to bypass security measures [10, 22] and deploy custom
microcode updates, with physical access to the device. To
issue microcode updates remotely, the attacker needs access
to the signing keys. Thus, in addition to adversaries who
target aforementioned vulnerable hardware architectures, pos-
sible adversaries include nation-state adversaries, who can
inﬂuence the CPU vendors, or even malicious vendors them-
selves. In this work, we assume that the attacker can issue
arbitrary microcode updates since we are analyzing the im-
pact of malicious microcode and not the security of the update
mechanism.
3.2 Microcode and Software Semantics
As microcode represents an abstraction layer between the
hardware implementation and the software, it possesses some
unique traits that can be leveraged for malicious intent.
Adversarial-controlled microcode enables ﬁne-granular con-
USENIX Association
30th USENIX Security Symposium    269
trol of the CPU data path, including registers and memory.
Once a malicious update is deployed, an adversary can re-
place any of the original ISA instructions with an arbitrary
sequence of microcode instructions. Even though this charac-
teristic appears to enable unlimited capabilities with respect
to the Trojan payload (i.e., the malicious action executed)
due to direct hardware access, critical information about the
high-level software constructs is missing in this context. This
poses a problem for the design of the Trojan trigger. Even
answering seemingly simple questions such as “Is the TLS
protocol currently executed?” — an attractive trigger condi-
tion for a Trojan which is straightforward on the system level
— is non-trivial on the microcode level. These questions are
particularly difﬁcult to answer for an adversary if he can only
observe individual ISA instructions, which is the default case
since microcode by itself is stateless. In order to enable com-
plex Trojan trigger conditions that lead to more stealthy and,
thus, meaningful Trojans, instruction, or (input/output) data
sequences must be evaluated, as discussed in the following
paragraphs.
3.3 Microcode Trojan Design Strategies
Based on the discussion above, it is useful to categorize mali-
cious microcode into two broad classes. We distinguish Trojan
design strategies that use (1) stateless triggers and (2) stateful
triggers.
Stateless Trigger We deﬁne a stateless microcode Trojan
trigger as a mechanism that only checks operands of the indi-
vidual assembly instruction, e.g., for a speciﬁc magic word.
For example, an adversary may modify the ADD instruction
iff one of the operand takes the value 0xf0f0 f0f0 — or any
other 32 bit pattern.