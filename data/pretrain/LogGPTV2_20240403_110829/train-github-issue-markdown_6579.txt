I understand that you are looking to compile all of your TypeScript components into a single JavaScript file. Given that your application will consist of 50-100 components, it is not practical to load each one individually using `System.import()`. Additionally, concatenating the compiled JavaScript files directly would result in duplicate code, and concatenating the TypeScript files would lead to redundant `import` statements.

To achieve your goal, I recommend using a module bundler like **Webpack** or **Rollup**. These tools are specifically designed to handle such scenarios by bundling multiple modules (in your case, TypeScript components) into a single output file, while also resolving and deduplicating imports.

### Steps to Bundle Your TypeScript Components Using Webpack

1. **Install Webpack and Required Loaders:**
   First, you need to install Webpack, along with the necessary loaders for TypeScript. You can do this using npm:

   ```bash
   npm install --save-dev webpack webpack-cli ts-loader typescript
   ```

2. **Configure Webpack:**
   Create a `webpack.config.js` file in your project root directory. Hereâ€™s a basic configuration to get you started:

   ```javascript
   const path = require('path');

   module.exports = {
     entry: './src/index.ts', // Entry point of your application
     output: {
       filename: 'bundle.js', // Output file name
       path: path.resolve(__dirname, 'dist'), // Output directory
     },
     resolve: {
       extensions: ['.ts', '.js'], // Resolve these file extensions
     },
     module: {
       rules: [
         {
           test: /\.ts$/,
           use: 'ts-loader',
           exclude: /node_modules/,
         },
       ],
     },
   };
   ```

3. **Set Up TypeScript Configuration:**
   Ensure you have a `tsconfig.json` file to configure TypeScript. A simple configuration might look like this:

   ```json
   {
     "compilerOptions": {
       "target": "es5",
       "module": "commonjs",
       "strict": true,
       "esModuleInterop": true,
       "outDir": "./dist"
     },
     "include": ["src/**/*"]
   }
   ```

4. **Create an Entry Point:**
   In your `src` directory, create an `index.ts` file that imports all your components. For example:

   ```typescript
   import { Component1 } from './components/Component1';
   import { Component2 } from './components/Component2';
   // Import all other components...

   // Initialize or use your components as needed
   ```

5. **Run Webpack:**
   Finally, run Webpack to bundle your TypeScript components into a single JavaScript file:

   ```bash
   npx webpack
   ```

This process will generate a `bundle.js` file in the `dist` directory, which contains all your TypeScript components compiled and bundled together, with all imports resolved and duplicates removed.

### Alternative: Using Rollup

If you prefer using Rollup, the steps are similar. You would install Rollup and the necessary plugins, configure `rollup.config.js`, and then run Rollup to generate the bundle.

By using a module bundler, you can efficiently manage and bundle your TypeScript components, ensuring that your application loads quickly and efficiently.