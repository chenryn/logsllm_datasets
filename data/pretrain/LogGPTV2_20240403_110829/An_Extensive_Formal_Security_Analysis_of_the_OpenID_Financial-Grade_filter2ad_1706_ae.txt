when just considering an honest ﬂow in which the code leaks
to the attacker, who does not know the PKCE veriﬁer. However,
our attack shows that the protection can be circumvented by
an attacker who pretends to be an honest client.
This attack affects public clients who use the Read-Only
proﬁle of the FAPI. It works as follows (see Figure 6): As
in RFC 7636, two apps are installed on a user’s device, an
honest app and a malicious app. The honest app is a client
of an honest AS with the client identiﬁer hon_client_id and
the redirection URI hon_redir_uri. The malicious app is not
registered at the AS.
The Read-Only ﬂow starts at the malicious app, which
prompts the user to log in. Now, the malicious app prepares an
authorization request containing the client id and a redirect URI
of the honest client (Step 2 ). At this point, the malicious app
also creates a PKCE veriﬁer and includes the corresponding
challenge in the authorization request.
The ﬂow continues until the browser receives the autho-
rization response in Step 5 . As the redirection URIs are
preregistered at the AS, the redirection URI in the authorization
request was chosen from the set of redirect URIs of the honest
app, and therefore, the authorization response is redirected to
the honest client after the browser receives it.
As described in Sections II-B and III-C1, at this point, the
authorization response with the authorization code might leak
to the attacker (Step 6 ). The malicious app is now able to
exchange the code (associated with the honest client) at the
token endpoint in Steps 7 and 8 , as it knows the correct
PKCE veriﬁer and, as the honest app is a public client, without
authenticating to the AS.
To prevent this scenario, an honest AS must ensure that
the PKCE challenge was created by the client with the id
hon_client_id. To achieve this, for public clients in the Read-
Only ﬂow we use the same mechanism that the FAPI uses for
public clients in the Read-Write ﬂow, namely the authorization
request should contain a signed JWT (see also Section II-C,
although JWTs are now used in a different way). This ensures
that the client stated in the request actually made the request,
and hence, no other client should know the PKCE veriﬁer. Note
that by using signed JWTs for public clients the FAPI assumes
that public clients can store some secrets (which might, for
(cid:21)(cid:23)(cid:19)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:46:17 UTC from IEEE Xplore.  Restrictions apply. 
Browser
Attacker (Client)
Authorization Server
1 POST /start
POST /start
2 Response
Response
Redirect to AS
Redirect to AS
(hon_client_id, hon_redirect_uri, pkce_cc)
(hon_client_id, hon_redirect_uri, pkce_cc)
3 GET /authorization_endpoint
GET /authorization_endpoint
(hon_client_id, hon_redirect_uri, pkce_cc)
(hon_client_id, hon_redirect_uri, pkce_cc)
4
honest user authenticates
honest user authenticates
5 Response
Response
Redirect to Client (code, state)
Redirect to Client (code, state)
6 Leakage
Leakage
code, state
code, state
7 POST /token_endpoint
POST /token_endpoint
(code, pkce_cv)
(code, pkce_cv)
8 Response
Response
access token
access token
Authorization Server
Resource Server
9 GET /resource
GET /resource
access token
access token
10
resource
resource
Browser
Attacker (Client)
Resource Server
Figure 6. PKCE Chosen Challenge Attack
example, be protected by user passwords). Our ﬁx is already
included in the model and our analysis (Section V) shows that
it works.
D. Authorization Request Leak Attacks
As explained in Section III-C2, the PKCE challenge is
created such that PKCE is supposed to work even if the
authorization request leaks (see also Section II-B).
However, if a leak of the authorization request occurs not
only the PKCE challenge leaks to the attacker but also the
state value, since both values are contained in the authorization
request. Our attack shows that an attacker who knows the state
value can circumvent the CSRF protection the state value was
supposed to provide. As a result of the attack, the honest user
is logged in under the identity of the attacker and uses the
resources of the attacker, which breaks session integrity. The
details of this attack are presented in Appendix A.
This is a well-known class of attacks for plain OAuth
ﬂows [44], but it is important to highlight that the protections
designed into the FAPI do not sufﬁciently protect most ﬂows
against such attacks, even though PKCE explicitly foresees the
attack vector.
To prevent this attack, one essentially has to prevent CSRF
forgery in this context. However, this is non-trivial because of
the very strong attacker model considered by the OpenID FAPI
Working Group: leaks and misconﬁgurations are assumed to
occur at various places. As further explained in Appendix A,
just assuming that the authorization request does not leak to
the attacker would not ﬁx the problem in general; one at
least would have to assume that the authorization response
does not leak either. Making these assumptions, however,
of course contradicts the OpenID FAPI Working Group’s
intention, namely providing security even in the presence of
very strong attackers.
Fortunately, we can prove that regular FAPI web server
clients which use OAUTB are not vulnerable to this attack
even in the presence of the strong attackers assumed by the
OpenID FAPI Working Group and throughout this paper. More
speciﬁcally, we can prove session integrity of the FAPI for such
clients (and strong attackers), which in particular excludes the
above attack (see Section V). For all other types of clients, our
attack works, and there does not seem to be a ﬁx which would
not massively change the ﬂows, and hence, the standards, as
argued in Appendix A. In this sense, our results for session
integrity appear to be the best we can obtain for the FAPI.
V. FORMAL SECURITY ANALYSIS
In this section, we present our formal analysis of the FAPI.
We start by very brieﬂy recalling the Web Infrastructure Model
(WIM), followed by a sketch of our formal model of the
FAPI, which as already mentioned uses the WIM as its basic
web infrastructure model. We then introduce central security
properties the FAPI is supposed to satisfy, along with our main
theorem stating that these properties are satisﬁed.
Since we cannot present the full formal details here, we
provide some more details in the appendix, with full details
and proofs provided in our technical report [25]. This includes
the precise formalization of clients, authorization servers, and
resource servers, as well as full detailed proofs.
A. The Web Infrastructure Model
The Web Infrastructure Model (WIM) was introduced by
Fett, Küsters, and Schmitz in [22] (therefore also called the
FKS model) and further developed in subsequent work. The
appendix of [45] provides a detailed description of the model; a
comparison with other models and a discussion of its scope and
limitations can be found in [22]–[24]. We here only give a brief
overview of the WIM following the description in [7], with
some more details presented in Appendix B. As explained there,
we slightly extend the WIM, among others to model OAUTB.
We choose the WIM for our work because, as mentioned in
the introduction, the WIM is the most comprehensive model
of the web infrastructure to date.
The WIM is designed independently of a speciﬁc web
application and closely mimics published (de-facto) standards
and speciﬁcations for the web, for example, the HTTP/1.1 and
HTML5 standards and associated (proposed) standards. Among
(cid:21)(cid:23)(cid:20)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:46:17 UTC from IEEE Xplore.  Restrictions apply. 
others, HTTP(S) requests and responses,12 including several
headers, such as cookie, location, referer, authorization, strict
transport security (STS), and origin headers, are modeled. The
model of web browsers captures the concepts of windows,
documents, and iframes, including the complex navigation
rules, as well as modern technologies, such as web storage, web
messaging (via postMessage), and referrer policies. JavaScript
is modeled in an abstract way by so-called scripts which can
be sent around and, among others, can create iframes, access
other windows, and initiate XMLHttpRequests.
The WIM deﬁnes a general communication model, and,
based on it, web systems consisting of web browsers, DNS
servers, and web servers as well as web and network attackers.
The main entities in the model are (atomic) processes, which
are used to model browsers, servers, and attackers. Each
process listens to one or more (IP) addresses. Processes
communicate via events, which consist of a message as well
as a receiver and a sender address. In every step of a run, one
event is chosen non-deterministically from a “pool” of waiting
events and is delivered to one of the processes that listens to the
event’s receiver address. The process can then handle the event
and output new events, which are added to the pool of events,
and so on. The WIM follows the Dolev-Yao approach (see,
e.g., [46]). That is, messages are expressed as formal terms
over a signature Σ which contains constants (for addresses,
strings, nonces) as well as sequence, projection, and function
symbols (e.g., for encryption/decryption and signatures).
A (Dolev-Yao) process consists of a set of addresses the
process listens to, a set of states (terms), an initial state, and
a relation that takes an event and a state as input and (non-
deterministically) returns a new state and a sequence of events.
The relation models a computation step of the process. It is
required that the output can be computed (formally, derived in
the usual Dolev-Yao style) from the input event and the state.
The so-called attacker process records all messages it
receives and outputs all events it can possibly derive from
its recorded messages. Hence, an attacker process carries out
all attacks any Dolev-Yao process could possibly perform.
Attackers can corrupt other parties, browsers, and servers.
A script models JavaScript running in a browser. Scripts
are deﬁned similarly to Dolev-Yao processes, but run in and
interact with the browser. Similar to an attacker process, an
attacker script can (non-deterministically) perform every action
a script can possibly perform within a browser.
A system is a set of processes. A conﬁguration of a system
is a tuple of the form (S,E,N) where S maps every process
of the system to its state, E is the pool of waiting events,
and N is a sequence of unused nonces. In what follows, sp
0
denotes the initial state of process p. Systems induce runs,
i.e., sequences of conﬁgurations, where each conﬁguration
is obtained by delivering one of the waiting events of the
preceding conﬁguration to a process, which then performs a
computation step.
12We note that the WIM models TLS at a high level of abstraction such
that messages are exchanged in a secure way.
A web system formalizes the web infrastructure and web
applications. It contains a system consisting of honest and
attacker processes. Honest processes can be web browsers, web
servers, or DNS servers. Attackers can be either web attackers
(who can listen to and send messages from their own addresses
only) or network attackers (who may listen to and spoof all
addresses and therefore are the most powerful attackers). A
web system further contains a set of scripts (comprising honest
scripts and the attacker script).
In our FAPI model, we need to specify only the behavior
of servers and scripts. These are not deﬁned by the WIM
since they depend on the speciﬁc application, unless they
become corrupted, in which case they behave like attacker
processes and attacker scripts. We assume the presence of a
strong network attacker which also controls all DNS servers
(but we assume a working PKI).
B. Sketch of the Formal FAPI Model
A FAPI web system (with a network attacker), denoted by
FAPI , is a web system (as explained in Section V-A) and can
contain an unbounded ﬁnite number of clients, authorization
servers, resource servers, browsers, and a network attacker.
Note that a network attacker is the most powerful attacker,
which subsumes all other attackers. Except for the attacker, all
processes are initially honest and can become (dynamically)
corrupted by the attacker at any time.
In a FAPI web system, clients, authorization servers, and
resource servers act according to the speciﬁcation of the FAPI
presented in Section III. (As mentioned in Section V-A, the
behavior of browsers is ﬁxed by the standards. Their modeling
is independent of the FAPI and already contained in the
WIM.) Our models for clients and servers follow the latest
recommendations regarding the security of OAuth 2.0 [42] to
mitigate all previously known attacks. The model also contains
the ﬁxes pointed out in Section IV, as otherwise, we would not
be able to prove the desired security properties (see below).
The primary goal of the FAPI is to provide a high degree of
security. Its ﬂows are intended to be secure even if information
leaks to an attacker. As already outlined in Section III-C, we
model this by sending the authorization response (in the case
of an app client), the access token (in the case of a Read-
Write ﬂow), and the authorization request to an arbitrary (non-
deterministically chosen) IP address. Furthermore, in the Read-
Write proﬁle, the token request can be sent to an arbitrary URI.
Importantly, one FAPI web system contains all possible
settings in which the FAPI can run, as depicted in Figure 3, in
particular, we consider all OAuth 2.0 extensions employed in
the FAPI. More precisely, every client in a FAPI web system
runs one of the possible conﬁgurations (i.e., it implements
on one path in Figure 3). Different clients may implement
different conﬁgurations. Every authorization and resource
server in a FAPI web system supports all conﬁgurations at
once. When interacting with a speciﬁc client, a server just
chooses the conﬁguration the client supports. In our model,
the various endpoints (authorization, redirection, token), the
information which client supports which FAPI conﬁguration,
(cid:21)(cid:23)(cid:21)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:46:17 UTC from IEEE Xplore.  Restrictions apply. 
client credentials, etc. are preconﬁgured and contained in the
initial states of the processes. How this information is acquired
is out of the scope of the FAPI.
We emphasize that when proving security properties of the
FAPI, we prove these properties for all FAPI web systems,
where different FAPI web systems can differ in the number of
clients and servers, and their preconﬁgured information.
Furthermore, we note that
there is no notion of time
in the WIM, hence, tokens do not expire. This is a safe
overapproximation as it gives the attacker more power.
To give a feel for our formal FAPI model, an excerpt of the
model is provided in Appendix C.
C. Security Properties and Main Theorem
In the following, we deﬁne the security properties the FAPI
should fulﬁll, namely authorization, authentication, and session