个函数有一个单一的rune类型的参数，然后返回一个布尔值。而像ToUpper和ToLower之类的
转换函数将用于rune字符的大小写转换。所有的这些函数都是遵循Unicode标准定义的字母、
字符串 106
gopl
数字等分类规范。strings包也有类似的函数，它们是ToUpper和ToLower，将原始字符串的每
个字符都做相应的转换，然后返回新的字符串。
下面例子的basename函数灵感于Unix shell的同名工具。在我们实现的版本中，basename(s)
将看起来像是系统路径的前缀删除，同时将看似文件类型的后缀名部分删除：
fmt.Println(basename("a/b/c.go")) // "c"
fmt.Println(basename("c.d.go")) // "c.d"
fmt.Println(basename("abc")) // "abc"
第一个版本并没有使用任何库，全部手工硬编码实现：
gopl.io/ch3/basename1
// basename removes directory components and a .suffix.
// e.g., a => a, a.go => a, a/b/c.go => c, a/b.c.go => b.c
func basename(s string) string {
// Discard last '/' and everything before.
for i := len(s) - 1; i >= 0; i-- {
if s[i] == '/' {
s = s[i+1:]
break
}
}
// Preserve everything before last '.'.
for i := len(s) - 1; i >= 0; i-- {
if s[i] == '.' {
s = s[:i]
break
}
}
return s
}
简化个版本使用了strings.LastIndex库函数：
gopl.io/ch3/basename2
func basename(s string) string {
slash := strings.LastIndex(s, "/") // -1 if "/" not found
s = s[slash+1:]
if dot := strings.LastIndex(s, "."); dot >= 0 {
s = s[:dot]
}
return s
}
字符串 107
gopl
path和path/filepath包提供了关于文件路径名更一般的函数操作。使用斜杠分隔路径可以在任
何操作系统上工作。斜杠本身不应该用于文件名，但是在其他一些领域可能会用于文件名，
例如URL路径组件。相比之下，path/filepath包则使用操作系统本身的路径规则，例如POSIX
系统使用/foo/bar，而Microsoft Windows使用 等。
c:\foo\bar
让我们继续另一个字符串的例子。函数的功能是将一个表示整值的字符串，每隔三个字符插
入一个逗号分隔符，例如“12345”处理后成为“12,345”。这个版本只适用于整数类型；支持浮
点数类型的支持留作练习。
gopl.io/ch3/comma
// comma inserts commas in a non-negative decimal integer string.
func comma(s string) string {
n := len(s)
if n  0 {
buf.WriteString(", ")
}
fmt.Fprintf(&buf, "%d", v)
}
buf.WriteByte(']')
return buf.String()
}
func main() {
fmt.Println(intsToString([]int{1, 2, 3})) // "[1, 2, 3]"
}
当向bytes.Buffer添加任意字符的UTF8编码时，最好使用bytes.Buffer的WriteRune方法，但是
WriteByte方法对于写入类似'['和']'等ASCII字符则会更加有效。
字符串 109
gopl
bytes.Buffer类型有着很多实用的功能，我们在第七章讨论接口时将会涉及到，我们将看看如
何将它用作一个I/O的输入和输出对象，例如当做Fprintf的io.Writer输出对象，或者当作
io.Reader类型的输入源对象。
练习 3.10： 编写一个非递归版本的comma函数，使用bytes.Buffer代替字符串链接操作。
练习 3.11： 完善comma函数，以支持浮点数处理和一个可选的正负号的处理。
练习 3.12： 编写一个函数，判断两个字符串是否是是相互打乱的，也就是说它们有着相同的
字符，但是对应不同的顺序。
3.5.5. 字符串和数字的转换
除了字符串、字符、字节之间的转换，字符串和数值之间的转换也比较常见。由strconv包提
供这类转换功能。
将一个整数转为字符串，一种方法是用fmt.Sprintf返回一个格式化的字符串；另一个方法是用
strconv.Itoa(“整数到ASCII”)：
x := 123
y := fmt.Sprintf("%d", x)
fmt.Println(y, strconv.Itoa(x)) // "123 123"
FormatInt和FormatUint函数可以用不同的进制来格式化数字：
fmt.Println(strconv.FormatInt(int64(x), 2)) // "1111011"
fmt.Printf函数的%b、%d、%o和%x等参数提供功能往往比strconv包的Format函数方便很
多，特别是在需要包含附加额外信息的时候：
s := fmt.Sprintf("x=%b", x) // "x=1111011"
如果要将一个字符串解析为整数，可以使用strconv包的Atoi或ParseInt函数，还有用于解析无
符号整数的ParseUint函数：
x, err := strconv.Atoi("123") // x is an int
y, err := strconv.ParseInt("123", 10, 64) // base 10, up to 64 bits
ParseInt函数的第三个参数是用于指定整型数的大小；例如16表示int16，0则表示int。在任何
情况下，返回的结果y总是int64类型，你可以通过强制类型转换将它转为更小的整数类型。
有时候也会使用fmt.Scanf来解析输入的字符串和数字，特别是当字符串和数字混合在一行的
时候，它可以灵活处理不完整或不规则的输入。
字符串 110
gopl
字符串 111
gopl
3.6. 常量
常量表达式的值在编译期计算，而不是在运行期。每种常量的潜在类型都是基础类型：
boolean、string或数字。
一个常量的声明语句定义了常量的名字，和变量的声明语法类似，常量的值不可修改，这样
可以防止在运行期被意外或恶意的修改。例如，常量比变量更适合用于表达像π之类的数学常
数，因为它们的值不会发生变化：
const pi = 3.14159 // approximately; math.Pi is a better approximation
和变量声明一样，可以批量声明多个常量；这比较适合声明一组相关的常量：
const (
e = 2.71828182845904523536028747135266249775724709369995957496696763
pi = 3.14159265358979323846264338327950288419716939937510582097494459
)
所有常量的运算都可以在编译期完成，这样可以减少运行时的工作，也方便其他编译优化。
当操作数是常量时，一些运行时的错误也可以在编译时被发现，例如整数除零、字符串索引
越界、任何导致无效浮点数的操作等。
常量间的所有算术运算、逻辑运算和比较运算的结果也是常量，对常量的类型转换操作或以
下函数调用都是返回常量结果：len、cap、real、imag、complex和
unsafe.Sizeof（§13.1）。
因为它们的值是在编译期就确定的，因此常量可以是构成类型的一部分，例如用于指定数组
类型的长度：
const IPv4Len = 4
// parseIPv4 parses an IPv4 address (d.d.d.d).
func parseIPv4(s string) IP {
var p [IPv4Len]byte
// ...
}
一个常量的声明也可以包含一个类型和一个值，但是如果没有显式指明类型，那么将从右边
的表达式推断类型。在下面的代码中，time.Duration是一个命名类型，底层类型是int64，
time.Minute是对应类型的常量。下面声明的两个常量都是time.Duration类型，可以通过%T参
数打印类型信息：
常量 112
gopl
const noDelay time.Duration = 0
const timeout = 5 * time.Minute
fmt.Printf("%T %[1]v\n", noDelay) // "time.Duration 0"
fmt.Printf("%T %[1]v\n", timeout) // "time.Duration 5m0s"
fmt.Printf("%T %[1]v\n", time.Minute) // "time.Duration 1m0s"
如果是批量声明的常量，除了第一个外其它的常量右边的初始化表达式都可以省略，如果省
略初始化表达式则表示使用前面常量的初始化表达式写法，对应的常量类型也一样的。例
如：
const (
a = 1
b
c = 2
d
)
fmt.Println(a, b, c, d) // "1 1 2 2"
如果只是简单地复制右边的常量表达式，其实并没有太实用的价值。但是它可以带来其它的
特性，那就是iota常量生成器语法。
3.6.1. iota 常量生成器
常量声明可以使用iota常量生成器初始化，它用于生成一组以相似规则初始化的常量，但是不
用每行都写一遍初始化表达式。在一个const声明语句中，在第一个声明的常量所在的行，
iota将会被置为0，然后在每一个有常量声明的行加一。
下面是来自time包的例子，它首先定义了一个Weekday命名类型，然后为一周的每天定义了
一个常量，从周日0开始。在其它编程语言中，这种类型一般被称为枚举类型。
type Weekday int
const (
Sunday Weekday = iota
Monday
Tuesday
Wednesday
Thursday
Friday
Saturday
)
周日将对应0，周一为1，如此等等。
常量 113
gopl
我们也可以在复杂的常量表达式中使用iota，下面是来自net包的例子，用于给一个无符号整
数的最低5bit的每个bit指定一个名字：
type Flags uint
const (
FlagUp Flags = 1 << iota // is up
FlagBroadcast // supports broadcast access capability
FlagLoopback // is a loopback interface
FlagPointToPoint // belongs to a point-to-point link
FlagMulticast // supports multicast access capability
)
随着iota的递增，每个常量对应表达式1 << iota，是连续的2的幂，分别对应一个bit位置。使
用这些常量可以用于测试、设置或清除对应的bit位的值：
gopl.io/ch3/netflag
func IsUp(v Flags) bool { return v&FlagUp == FlagUp }
func TurnDown(v *Flags) { *v &^= FlagUp }
func SetBroadcast(v *Flags) { *v |= FlagBroadcast }
func IsCast(v Flags) bool { return v&(FlagBroadcast|FlagMulticast) != 0 }
func main() {
var v Flags = FlagMulticast | FlagUp
fmt.Printf("%b %t\n", v, IsUp(v)) // "10001 true"