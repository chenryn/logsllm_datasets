如果你手动调用了 os._exit() ，你注册的函数无法正常执行。
5.12 逗号也有它的独特用法
逗号，虽然是个很不起眼的符号，但在 Python 中也有他的用武之地。
第一个用法
元组的转化
[root@localhost ~]# cat demo.py
def func():
return "ok",
print(func())
[root@localhost ~]# python3 demo.py
('ok',)
第二个用法r
print 的取消换行
[root@localhost ~]# cat demo.py
for i in range(3):
print i
[root@localhost ~]#
[root@localhost ~]# python demo.py
0
1
2
[root@localhost ~]#
[root@localhost ~]# vim demo.py
[root@localhost ~]#
[root@localhost ~]# cat demo.py
for i in range(3):
print i,
[root@localhost ~]#
[root@localhost ~]# python demo.py
0 1 2
[root@localhost ~]#
5.13 如何在运行状态查看源代码？
查看函数的源代码，我们通常会使用 IDE 来完成。
比如在 PyCharm 中，你可以 Ctrl + 鼠标点击 进入函数的源代码。
那如果没有 IDE 呢？
当我们想使用一个函数时，如何知道这个函数需要接收哪些参数呢？
当我们在使用函数时出现问题的时候，如何通过阅读源代码来排查问题所在呢？
这时候，我们可以使用 inspect 来代替 IDE 帮助你完成这些事
## demo.py
import inspect
def add(x, y):
return x + y
print("===================")
print(inspect.getsource(add))
运行结果如下
$ python demo.py
===================
def add(x, y):
return x + y
5.14 单分派泛函数如何写？
泛型，如果你尝过java，应该对他不陌生吧。但你可能不知道在 Python 中（3.4+ ），也可以实现
简单的泛型函数。
在Python中只能实现基于单个（第一个）参数的数据类型来选择具体的实现方式，官方名称 是
single-dispatch 。你或许听不懂，说人话，就是可以实现第一个参数的数据类型不同，其调用的
函数也就不同。
singledispatch 是 PEP443 中引入的，如果你对此有兴趣，PEP443 应该是最好的学习文档：http
s://www.python.org/dev/peps/pep-0443/
它使用方法极其简单，只要被 singledispatch 装饰的函数，就是一个 single-dispatch 的泛函数
（ generic functions ）。
单分派：根据一个参数的类型，以不同方式执行相同的操作的行为。
多分派：可根据多个参数的类型选择专门的函数的行为。
泛函数：多个函数绑在一起组合成一个泛函数。
这边举个简单的例子。
from functools import singledispatch
@singledispatch
def age(obj):
print('')
@age.register(int)
def _(age):
print('{}'.format(age))
@age.register(str)
def _(age):
print('I am {} years old.'.format(age))
age(23) # int
age('twenty three') # str
age(['23']) # list
执行结果
23
I am twenty three years old.
说起泛型，其实在 Python 本身的一些内建函数中并不少见，比如 len() ， iter() ，
copy.copy() ， pprint() 等
你可能会问，它有什么用呢？实际上真没什么用，你不用它或者不认识它也完全不影响你编码。
我这里举个例子，你可以感受一下。
大家都知道，Python 中有许许多的数据类型，比如 str，list， dict， tuple 等，不同数据类型的拼
接方式各不相同，所以我这里我写了一个通用的函数，可以根据对应的数据类型对选择对应的拼接
方式拼接，而且不同数据类型我还应该提示无法拼接。以下是简单的实现。
def check_type(func):
def wrapper(*args):
arg1, arg2 = args[:2]
if type(arg1) != type(arg2):
return '!!'
return func(*args)
return wrapper
@singledispatch
def add(obj, new_obj):
raise TypeError
@add.register(str)
@check_type
def _(obj, new_obj):
obj += new_obj
return obj
@add.register(list)
@check_type
def _(obj, new_obj):
obj.extend(new_obj)
return obj
@add.register(dict)
@check_type
def _(obj, new_obj):
obj.update(new_obj)
return obj
@add.register(tuple)
@check_type
def _(obj, new_obj):
return (*obj, *new_obj)
print(add('hello',', world'))
print(add([1,2,3], [4,5,6]))
print(add({'name': 'wangbm'}, {'age':25}))
print(add(('apple', 'huawei'), ('vivo', 'oppo')))
## list   
print(add([1,2,3], '4,5,6'))
输出结果如下
hello, world
[1, 2, 3, 4, 5, 6]
{'name': 'wangbm', 'age': 25}
('apple', 'huawei', 'vivo', 'oppo')
!!
如果不使用singledispatch 的话，你可能会写出这样的代码。
def check_type(func):
def wrapper(*args):
arg1, arg2 = args[:2]
if type(arg1) != type(arg2):
return '!!'
return func(*args)
return wrapper
@check_type
def add(obj, new_obj):
if isinstance(obj, str) :
obj += new_obj
return obj
if isinstance(obj, list) :
obj.extend(new_obj)
return obj
if isinstance(obj, dict) :
obj.update(new_obj)
return obj
if isinstance(obj, tuple) :
return (*obj, *new_obj)
print(add('hello',', world'))
print(add([1,2,3], [4,5,6]))
print(add({'name': 'wangbm'}, {'age':25}))
print(add(('apple', 'huawei'), ('vivo', 'oppo')))
## list   
print(add([1,2,3], '4,5,6'))
输出如下
hello, world
[1, 2, 3, 4, 5, 6]
{'name': 'wangbm', 'age': 25}
('apple', 'huawei', 'vivo', 'oppo')
!!
5.15 让我爱不释手的用户环境
当你在机器上并没有 root 权限时，如何安装 Python 的第三方包呢？
可以使用 pip install --user pkg 将你的包安装在你的用户环境中，该用户环境与全局环境并不
冲突，并且多用户之间相互隔离，互不影响。
##  requests
[root@localhost ~]$ pip list | grep requests
[root@localhost ~]$ su - wangbm
## 
[wangbm@localhost ~]$ pip list | grep requests
[wangbm@localhost ~]$ pip install --user requests
[wangbm@localhost ~]$ pip list | grep requests
requests (2.22.0)
[wangbm@localhost ~]$
##  Location  requests 
[wangbm@localhost ~]$ pip show requests
---
Metadata-Version: 2.1
Name: requests
Version: 2.22.0
Summary: Python HTTP for Humans.
Home-page: http://python-requests.org
Author: Kenneth Reitz
Author-email: PI:EMAIL
Installer: pip
License: Apache 2.0
Location: /home/wangbm/.local/lib/python2.7/site-packages
[wangbm@localhost ~]$ exit
logout
##  wangbm  root  requests 
[root@localhost ~]$ pip list | grep requests
[root@localhost ~]$
5.16 字符串的分割技巧
当我们对字符串进行分割时，且分割符是 \n ，有可能会出现这样一个窘境：
>>> str = "a\nb\n"
>>> print(str)
a
b
>>> str.split('\n')
['a', 'b', '']
>>>
会在最后一行多出一个元素，为了应对这种情况，你可以会多加一步处理。
但我想说的是，完成没有必要，对于这个场景，你可以使用 splitlines
>>> str.splitlines()
['a', 'b']
5.17 反转字符串/列表最优雅的方式
反转序列并不难，但是如何做到最优雅呢？
先来看看，正常是如何反转的。
最简单的方法是使用列表自带的reverse()方法。
>>> ml = [1,2,3,4,5]
>>> ml.reverse()
>>> ml
[5, 4, 3, 2, 1]
但如果你要处理的是字符串，reverse就无能为力了。你可以尝试将其转化成list，再reverse，然后
再转化成str。转来转去，也太麻烦了吧？需要这么多行代码（后面三行是不能合并成一行的），一
点都不Pythonic。
mstr1 = 'abc'
ml1 = list(mstr1)
ml1.reverse()
mstr2 = str(ml1)
对于字符串还有一种稍微复杂一点的，是自定义递归函数来实现。
def my_reverse(str):
if str == "":
return str
else:
return my_reverse(str[1:]) + str[0]
在这里，介绍一种最优雅的反转方式，使用切片，不管你是字符串，还是列表，简直通杀。
>>> mstr = 'abc'
>>> ml = [1,2,3]
>>> mstr[::-1]
'cba'
>>> ml[::-1]
[3, 2, 1]
5.18 如何将 print 内容输出到文件
Python 3 中的 print 作为一个函数，由于可以接收更多的参数，所以功能变为更加强大。
比如今天要说的使用 print 将你要打印的内容，输出到日志文件中（但是我并不推荐使用它）。
>>> with open('test.log', mode='w') as f:
... print('hello, python', file=f, flush=True)
>>> exit()
$ cat test.log
hello, python
5.19 改变默认递归次数限制
上面才提到递归，大家都知道使用递归是有风险的，递归深度过深容易导致堆栈的溢出。如果你这
字符串太长啦，使用递归方式反转，就会出现问题。
那到底，默认递归次数限制是多少呢？
>>> import sys
>>> sys.getrecursionlimit()
1000
可以查，当然也可以自定义修改次数，退出即失效。
>>> sys.setrecursionlimit(2000)
>>> sys.getrecursionlimit()
2000
5.20 让你晕头转向的 else 用法
if else 用法可以说最基础的语法表达式之一，但是今天不是讲这个的。
if else 早已烂大街，但我相信仍然有很多人都不曾见过 for else 和 try else 的用法。为什么说它曾
让我晕头转向，因为它不像 if else 那么直白，非黑即白，脑子经常要想一下才能才反应过来代码怎
么走。
先来说说，for ... else ...
def check_item(source_list, target):
for item in source_list:
if item == target:
print("Exists!")
break
else:
print("Does not exist")
在往下看之前，你可以思考一下，什么情况下才会走 else。是循环被 break，还是没有break？
给几个例子，你体会一下。
check_item(["apple", "huawei", "oppo"], "oppo")
## Exists!
check_item(["apple", "huawei", "oppo"], "vivo")
## Does not exist
可以看出，没有被 break 的程序才会正常走else流程。
再来看看，try else 用法。
def test_try_else(attr1 = None):
try:
if attr1:
pass
else:
raise
except:
print("Exception occurred...")
else:
print("No Exception occurred...")
同样来几个例子。当不传参数时，就抛出异常。
test_try_else()
## Exception occurred...
test_try_else("ming")
## No Exception occurred...
可以看出，没有 try 里面的代码块没有抛出异常的，会正常走else。
总结一下，for else 和 try else 相同，只要代码正常走下去不被 break，不抛出异常，就可以走
else。
5.21 字典访问不存在的key时不再报错
当一个字典里没有某个 key 时，此时你访问他是会报 KeyError 的。
>>> profile={}
>>> profile["age"]
Traceback (most recent call last):
File "", line 1, in 
KeyError: 'age'
这里有一个小技巧，使用 collections 的 defaultdict 方法，可以帮你处理这个小问题，当你访问一
个不存在的 key 时，会返回默认值。
defaultdict 接收一个工厂方法，工厂方法返回的对象就是字典的默认值。
常用的工厂方法有，我们常见的 int，str，bool 等
>>> a=int()
>>> a
0
>>>
>>> b=str()
>>> b
''
>>>