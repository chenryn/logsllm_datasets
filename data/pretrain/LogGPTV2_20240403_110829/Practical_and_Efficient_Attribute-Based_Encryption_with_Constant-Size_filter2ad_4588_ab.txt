and T okenGen. We say the scheme is correct when the above statement holds.
Privacy For the (cid:12)les, the ciphertexts cphF are semantic security by adopting a
symmetric encryption, such as AES, then the adversary can not get information
from what the (cid:12)le ciphertext revealed with non-negligible probability. For the
keyword, we have:
• Index Privacy: A probabilistic polynomial-time adversary can not get any
useful information from the encrypted keyword cphW without associate
search tokens. That is, the adversary can not determine which of the
ciphertext of the keyword w1 and the ciphertext of the keyword w2 is
about the keyword w he submitted.
• Token Privacy: Given the keyword token, a probabilistic polynomial-time
In other words, the cloud
adversary can not learn the keyword plaint.
server can not learn which keyword the data user queried.
Our scheme implements a secure searchable encryption if it satis(cid:12)es all above
requirements.
7
3.2.3 Threat Model
Under the random oracle model, we prove the index privacy of the EABSE
scheme with selectively chosen-keyword attack game [14] and prove the token
privacy with token privacy game.
• Selectively Chosen-Keyword Attack(SCKA) Game
Setup: At (cid:12)rst, the adversary gives a access policy S to the challenger.
The challenger plays as the system and runs Setup(U, 1λ), then it keeps
the master key mk.
Query Phase1: For the e(cid:14)ciency, the challenger applies for a query list
ql and sets it empty before the Phase1 running. The adversary adaptively
queries the below for polynomial times:
With the KeyGen(Attr, msk, pk) algorithm, the adversary inputs the at-
tributes Attr to challenger and gets associated secret key sk from the
challenger if the attributes can not satisfy access policy S, otherwise the
procedure aborts; according to the T okenGen(pk, sk, w) algorithm, the
adversary can get a search token after inputting sk and keyword w. The
challenger puts w into the querylist ql if the token is legitimate for the
keyword.
Challenge phase: The adversary selects two keywords w0 and w1 ran-
domly which are excluded from the list ql. The challenger (cid:13)ips a coin to
select µ ← {0, 1} and then runs the Enc algorithm. The challenger returns
the ciphertext cph
of the wµ to the adversary.
(cid:3)
Query Phase 2: The adversary can execute the queries as Phase1 did
but the keyword w0 and w1 can not be queried any more.
′
Guess: Finally, adversary gives a guess µ
′
µ
= µ.
We can de(cid:12)ne the advantage of adversary winning the game is |P r[µ
µ] − 1
privacy.
=
|. If the advantage is negligible, our scheme is secure with index
of µ and wins the game if
′
2
• Token Privacy Game
Setup: The challenger plays as the system and runs Setup(U, 1λ), then
it keeps the master key msk.
Query Phase 1: As in SCKA game, the challenger selects the key list
kl which is empty initially. The adversary can execute below process for
polynomial times. The adversary chooses a attribute set Attr as the input
of KeyGen algorithm. The challenger returns KeyGen’s output sk to ad-
versary and add Attr into kl. Then, challenger runs T okenGen algorithm
and returns token to adversary after receiving the sk and keyword w.
Challenge phase: The adversary submits a access policy S with the
restriction that each Attr in kl can not satisfy S. The challenger randomly
chooses a keyword w
from the keyword dictionary and encrypt it with the
(cid:3)
8
(cid:3)
S into cphW
(cid:3)
S. The adversary gets token
. The challenger selects a attribute set Attr
from challenger.
Query Phase 2: As did in Phase 1 except that keyword w
queried.
Guess: The adversary outputs guess keyword w
if w
= w
(cid:3)
.
′
(cid:3)
which satis(cid:12)es
(cid:3)
can not be
′
, and can win the game
3.3 Constructions
In our scheme, we use inverted index structure as introduced above and
implement searchable encryption with AND gate as access control. The scheme
consists of 5 main algorithms. We introduce them in detail as below:
Init We suppose all the attributes are included in set U={attr1, attr2,··· , attrn},
where n is the size of U. For each attribute attri(1 ≤ i ≤ n), there has 2 val-
ues vi and ¬vi.
attri(1 ≤ i ≤ n), the value of attri is vi and the value of attri is ¬vi if attri is
If the attributes set Attr of one data user include attribute
not in Attr. To formalize the description of attributes, we adopt the value of
attribute to represent whether user’s set contains this attribute.
Setup Given a bilinear group e : G × G → GT , p as prime order of G and
GT , and H : {0, 1}(cid:3) → Zp as an one-way hash function, randomly select three
numbers a, b, c ← Zp, a set {r1, r2,··· , r2n} ← Zp and a set {x1, x2,··· , x2n} ←
(cid:0)ri and yi = e(xi, g), where 1 ≤ i ≤ 2n. Then, output the
G. Set ui = g
public key pk = (g, ga, gb, gc, (ui, yi)|1 ≤ i ≤ 2n) and the master key msk =
(a, b, c, (ri, xi)|1 ≤ i ≤ 2n).
∧
Enc Choose random t1, t2 ∈ Zp. Suppose the access policy structure S =
∏
i = vi or ¬vi. Set u
′
′
vi2U v
i = vi, u
i = ui+n otherwise.
Compute ugate = gt2
= gct1,
W = ga(t1+t2)gbH(w)t1, and encrypt (cid:12)les F which associate with the keyword
w with some symmetric encryption algorithm into cphF . Obviously, cphW =
(W
, W, ugate). Then, the whole cph = (cphW, cphF ) as the result of encryption.
i. For each keyword w ∈ W D, then set W
′
i = ui if v
′
i, where v
′
n
i=1 u
′
′
′
∏
(cid:3)
i = vi, y
KeyGen At First, we set v = gac. For each attribute v
(cid:3)
i = yi if v
tribute collection, set y
(cid:3)
(cid:3)
i = xivri if v
compute σ
i = vi, σ
Then, the secret key sk = (yuser =
TokenGen Select s ← Zp. To generate the search token for keyword w,
, tok2 = gcs. Therefore, the search token tok =
compute tok1 = (gagbH(w))
(ys
in data user’s at-
(cid:3)
i = yi+n otherwise. Similarly,
(cid:3)
n
i=1 σ
i
(cid:3)
i = xi+nvri+n otherwise. Set σuser =
(cid:3)
i , ).
user >, tok1, tok2).
user, ) from the challenger.
The adversary inputs the attributes set Attr to challenger. If Attr satis(cid:12)es
the S, then the algorithm terminates. Select κsec as one of master key a. For
each attribute in U according to Attr, computes σi and yi. Set v = f κsec, σuser =
i=1 yi. So A gets associated secret key
n
i=1 σi where σi = xivri , and yuser =
According to the T okenGen(sk, w) algorithm, after choosing a random s←
, tok2 =
s) after inputting sk and keyword w. The challenger
s
Zp, the adversary can get a search token tok = (tok1 = (hf dH(w))
f s, , yuser
∏
′
′
(cid:3)
Query Phase 2: The adversary can execute the queries as Phase1 did but