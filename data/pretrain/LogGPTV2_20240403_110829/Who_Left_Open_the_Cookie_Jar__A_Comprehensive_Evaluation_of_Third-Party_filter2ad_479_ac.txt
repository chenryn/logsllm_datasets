### Analysis of Browser and Extension Security and Privacy Countermeasures

#### 1. Built-in Browser Protections
In all other categories, cookie-bearing requests were made [bug4]. Although some requests, such as those for HTML tags, were blocked, out of the 58 requests sent in regular browsing mode, 6 were not blocked. These 6 bypass techniques spanned different browser mechanisms (CSS, SVG, and video), making it unclear why they were treated differently.

For Firefox, we observed similar results: while many requests were blocked (e.g., 46 out of 51 requests in the HTML category), at least one technique could circumvent the tracking protection in each applicable category [bug5]. By analyzing the Firefox source code, we traced these bypasses back to inconsistencies in the implementation. This is discussed in more detail in Section 6.1.

Safariâ€™s Intelligent Tracking Prevention (ITP) managed to mitigate all third-party cookies to a tracking domain, except for redirects. However, if ITP is disabled even for a short interval, third-party cookies set by tracking domains during this period will still be included in cross-site requests after re-enabling the option. Fortunately, ITP is enabled by default, so future completeness can only be affected through explicit user disabling. As mentioned in Section 3.3.2, third-party cookies will be included if first-party interaction has occurred within the last 24 hours, which can be provoked by redirects or pop-ups to the tracking domain, although pop-ups are blocked by default.

#### 2. Browser Extensions
We evaluated 31 ad-blocking and 15 tracking protection extensions. The results are summarized in Table 2 and Table 3. Due to space constraints, we aggregated extensions with the same category-level results. Note that within a single set, extensions may still exhibit different results within one category. A complete list of the browser extensions considered can be found in Appendix B.

**Common Causes for Bypasses:**
- **PDF-Embedded JavaScript:** None of the Chrome- and Opera-based extensions managed to block cookie-bearing third-party requests initiated by JavaScript code embedded within a PDF. Although the cause is similar to when the browser blocks all third-party cookies, the specific issue differs. Requests from a browser extension are not treated as cross-site requests, and thus cookies are not stripped. Additionally, the WebExtension API does not allow an extension to intercept traffic from another extension [bug6].
- **AppCache API:** Only a few browser extensions correctly block cross-site requests initiated through the AppCache API. The root cause was that the `onBeforeRequest` event listener verified the provided tab identifier, which for AppCache requests was set to -1, a value not expected by the extension [bug8].
- **Service Workers:** Bypasses were also possible due to the same reasons, but Firefox-based extensions managed to block third-party requests. Firefox assigns the tab identifier to the tab on which the service worker was originally registered, allowing normal policies to be applied. In total, 26 browser extension policies could be bypassed with the AppCache technique, and 20 through service workers.
- **HTML Category (Firefox):** Almost every Firefox-based extension could be bypassed in the HTML category, often due to a `<link>` element with `rel="shortcut icon"`. This was caused by an implementation bug in the WebExtension API, where the `onBeforeRequest` event did not trigger for requests originating from this link element [bug7].
- **JavaScript Category:** Most extensions could be bypassed using at least one technique, particularly WebSocket connections. The common mistake was setting the filter value to `[http://*/*, https://*/*]`, which does not include WebSocket protocols [bug8].

#### 3. Same-Site Cookies
Through our tests, we detected incorrect behaviors for Chrome, Opera, and Edge. No bugs were found in Firefox's implementation.

- **Chrome and Opera:** Incorrect behavior was caused by prerendering functionality. Including `<link rel="prerender">` on a web page initiates a request to the referenced web page, including all same-site cookies [bug9]. This bypasses the same-site cookie policy, which should only allow same-site cookies in lax mode.
- **Edge (versions 16 and 17):** Similar incorrect behaviors were detected, caused by different functionalities. `<img>` and `<video>` tags, and the WebSocket API, can send cross-site requests that include all same-site cookies. This should not happen according to the Internet Draft. Additionally, same-site cookies in strict mode were included in requests initiated by various redirects, which is only allowed for lax mode [bug10].

#### 4. Real-World Abuse
Tracking companies and advertisers have been reported to circumvent ad blockers and anti-tracking extensions. For example, Pornhub circumvented all ad-blocking extensions by leveraging WebSockets, and later, WebWorkers. Support for intercepting WebSocket connections was added to the WebExtension API, but not all browser extensions have adopted these defenses.

**Experiment:**
We performed a crawl of the 10,000 most popular websites according to Alexa. For each website, we visited up to 20 pages with a Headless Chrome instance (version 64.0.3282.119, on Ubuntu 16.04) and analyzed all requests initiated by the new bypass techniques. In total, 160,059 web pages were visited, and all third-party requests were analyzed.

We determined whether a cross-site request should be classified as tracking or advertising. Our results show that for every built-in browser protection and every anti-tracking and ad-blocking browser extension, there exists at least one technique that can bypass the imposed policies. Moreover, most instances could be bypassed using different techniques with different causes.