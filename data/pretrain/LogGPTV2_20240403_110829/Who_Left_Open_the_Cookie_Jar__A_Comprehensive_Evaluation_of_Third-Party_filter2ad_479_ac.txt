in all other categories cookie-bearing requests were
made [bug4]. Although it did manage to block certain
requests, e.g. for HTML tags, out of the 58 requests
that were sent in the regular browsing mode, 6 were not
blocked. These 6 bypass techniques spanned different
browser mechanisms (CSS, SVG,  and video),
so it is unclear why these are treated differently.
For Firefox, we observed comparable results: al-
though many requests were blocked (e.g. for the HTML
category, 46 out of 51 requests were blocked), for each
applicable category there was at least one technique that
could circumvent the tracking protection [bug5]. By an-
alyzing the Firefox source code, we traced the cause of
these bypasses back to inconsistencies in the implemen-
tation. We discuss this in more detail in Section 6.1.
In contrast to the former built-in options, Safari’s In-
telligent Tracking Prevention managed to mitigate all
third-party cookies to a tracking domain, apart from redi-
rects. However, we found that future completeness can
be undermined by having this option disabled for even a
short interval. Third-party cookies set in this interval by
tracking domains, which otherwise would have been pre-
vented, will still be included in cross-site requests after
enabling the option again, identical to the results when
the option is disabled. Luckily, this option is enabled
by default, so future completeness can only be affected
through explicit disabling by the user. As we already
158    27th USENIX Security Symposium
USENIX Association
AppCache HTML
Headers
Redirects
PDF JS
JavaScript
SW
Chrome 63
- Block third-party cookies
Opera 51
- Block third-party cookies∗
- Ad Blocker
Firefox 57
- Block third-party cookies
- Tracking Protection
Safari 11
- No Intelligent Tracking Prevention
- Block third-party cookies‡
Edge 40
- Block third-party cookies
Cliqz 1.17∗
- Block third-party cookies
Tor Browser 7
(cid:32)
(cid:71)(cid:35)
(cid:32)
(cid:71)(cid:35)
(cid:32)
(cid:32)
(cid:71)(cid:35)
(cid:32)
(cid:35)†
(cid:32)†
(cid:32)†
(cid:32)
(cid:32)
(cid:71)(cid:35)
(cid:71)(cid:35)
(cid:35)
(cid:32): request with cookies
∗ Secure cookies were omitted in all requests.
† Safari does not permit cross-domain caching over https (only over http).
‡ Safari 10.1.2
(cid:32)
(cid:32)
(cid:32)
(cid:71)(cid:35)
(cid:32)
(cid:32)
(cid:32)
(cid:71)(cid:35)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:71)(cid:35)
(cid:32)
(cid:32)
(cid:32)
(cid:71)(cid:35)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:71)(cid:35)
(cid:32)
(cid:32)
(cid:71)(cid:35)
(cid:71)(cid:35): request without cookies
(cid:32)
(cid:71)(cid:35)
(cid:32)
(cid:71)(cid:35)
(cid:35)
(cid:32)
(cid:71)(cid:35)
(cid:32)
(cid:35)
(cid:35)
(cid:71)(cid:35)
(cid:71)(cid:35)
(cid:71)(cid:35)
(cid:71)(cid:35)
(cid:71)(cid:35)
(cid:71)(cid:35)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:35)
(cid:32)
(cid:71)(cid:35)
(cid:32)
(cid:71)(cid:35)
(cid:32)
(cid:32)
(cid:71)(cid:35)
(cid:32)
(cid:71)(cid:35)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:71)(cid:35)
(cid:71)(cid:35)
(cid:71)(cid:35)
(cid:32)
(cid:71)(cid:35)
(cid:32)
(cid:71)(cid:35)
(cid:32)
(cid:32)
(cid:71)(cid:35)
(cid:32)
N/A
N/A
N/A
N/A
N/A
(cid:71)(cid:35)
(cid:71)(cid:35)
N/A
(cid:35): no request
Table 1: Results from the analysis of browsers and their built-in security and privacy countermeasures.
mentioned in Section 3.3.2, third-party cookies will be
included if ﬁrst-party interaction has been occurred in the
last 24 hours. This can be provoked by redirects or pop-
ups to the tracking domain, although pop-ups are blocked
by default.
4.2 Browser Extensions
In total, we evaluated 31 ad blocking and 15 tracking pro-
tection extensions. The results are summarized in Table 2
and Table 3 respectively. Due to space constraints, we
aggregated extensions in different sets when these shared
the same category-level results. Note that within a single
set, extensions may still exhibit different results within
one category. An overview of all browser extensions that
were considered can be found in Appendix B. Guided by
the resulting data, we found several common causes for
the discovered bypasses.
Considering the results of all Chrome- and Opera-
based extensions, it is clear that none of these managed
to block the cookie-bearing third-party request when the
request is initiated by JavaScript code embedded within
a PDF. Although this result is similar to the results we
observed when the browser was instructed to block all
third-party cookies, the speciﬁc cause slightly differs. As
the requests are sent from within a browser extension,
the browser does not regard it as a cross-site request,
and thus does not strip its cookies in the case when the
“block third-party cookies” setting is enabled. However,
another issue arises when a browser extension wants to
block these requests:
the WebExtension API does not
allow an extension to intercept trafﬁc from another ex-
tension. Consequently, this issue can not be mitigated
by the anti-tracking and ad blocking extension develop-
ers [bug6].
Only few browser extensions correctly block cross-site
requests initiated through the AppCache API. By analyz-
ing the source code of the bypassed extensions, we found
that these shared the same root cause. Although the lis-
tener for the onBeforeRequest event was always able
to intercept the request, the extensions veriﬁed the pro-
vided tab identiﬁer. However, for requests that originated
from AppCache, this identiﬁer was set to -1, a value
that was not expected by the extension, as it may also
be related to inherent browser functionality such as ad-
dress bar autocompletion. As extension developers try to
prevent interfering with regular browsing behavior, most
extensions performed no actions on requests that caused
these unexpected parameters [bug8].
Furthermore, we found that for requests initiated from
service workers bypasses were made possible due to the
same reasons. However, in this case Firefox-based exten-
sions did manage to block the third-party requests. We
found that this is because Firefox assigns the tab iden-
tiﬁer to the tab on which the service worker was orig-
inally registered. As a result, from the perspective of
the browser extension this seemed as a regular request,
thus allowing the normal policies to be applied. In to-
USENIX Association
27th USENIX Security Symposium    159
tal, we found that 26 browser extension policies could be
bypassed with the AppCache technique, and 20 through
service workers.
Contrasting to extensions of other browsers, almost
every Firefox-based extension could be bypassed in
the HTML category.
In most cases, this was caused
by a  element, which rel attribute was set to
"shortcut icon". By further analyzing this case, we
traced back the cause of this issue to an implementa-
tion bug in the WebExtension API. We found that the
onBeforeRequest event did not trigger for requests
originating from this link element [bug7]. Although
abusing this bug may not be straightforward, as it is
only sent when a web page is visited for the ﬁrst time,
it does indicate that browsers exhibit small inconsisten-
cies, which may often lead to unintended behavior.
In the JavaScript category, we found that most exten-
sions could be bypassed with at least one technique: for
the tracking extensions, only a single extension managed
to block requests initiated by JavaScript. Most preva-
lently, a bypass was made possible because of Web-
Socket connections. We found that a common mistake
extension developers made, was in the registration on
the onBeforeRequest event. The bypassed extensions
set the ﬁlter value to [http://*/*, https://*/*],
which would allow intercepting all HTTP requests, but
not WebSockets, which use the ws:// or wss:// proto-
col [bug8]. Hence, to be able to intercept all requests, the
ﬁlter should include these protocols or use .
Of course, the conﬁguration of the manifest ﬁle should
be updated accordingly.
In summary, we found that for every built-in browser
protection as well as for every anti-tracking and ad block-
ing browser extension, there exists at least one technique
that can bypass the imposed policies. Moreover, we
found that most instances could be bypassed by using
different techniques, which have different causes.
4.3 Same-site cookie
Through the tests we performed to evaluate the validity
of same-site cookies, we detected incorrect behaviors for
Chrome, Opera and Edge. No bugs were found for Fire-
fox’ implementation of this policy.
For Chrome and Opera, the incorrect behavior was
caused by the prerendering functionality [46]. By in-
cluding  on a
web page, the visitor’s browser will initiate a request to
the referenced web page. If this web page resides on an-
other domain, the resulting cross-site request will include
all same-site cookies [bug9]. This bypasses the same-site
cookie policy as deﬁned by the Internet Draft; only same-
site cookies in lax mode are allowed to be included.
For Edge (versions 16 and 17, which support same-
site cookies), we detected similar incorrect behaviors, al-
though caused by different functionalities [bug10]. Here,
 and  tags can be leveraged to send
cross-site requests that include all same-site cookies, by
pointing to another domain using the src and data at-
tributes respectively. This also holds for requests that
are sent for opening a cross-site WebSocket connec-
tion through the WebSocket API. No same-site cook-
ies should be included at all in these requests accord-
ing to the Internet Draft. On top of that, we also found
that same-site cookies in strict mode are included in
requests initiated by a variety of redirects, while this
is only allowed for same-site cookies in lax mode.
This was detected for redirects through the 
tag, location.href property and Location response
header.
5 Real-world Abuse
Tracking companies and advertisers have been reported
to circumvent ad blockers and anti-tracking extensions.
For example, due to limitations of the WebExtension
API, Pornhub managed to circumvent all ad blocking ex-
tensions by levering WebSockets [10]. As a response,
several popular ad blocking extensions such as Adblock
Plus and uBlock implemented a mitigation that would
override the WebSocket prototype. Soon after, this mit-
igation was again circumvented by Pornhub, who this
time leveraged WebWorkers.9 Only when support for
intercepting WebSocket connections was added to the
WebExtension API, browser extensions managed to pre-
vent Pornhub’s bypasses. However, as our results show,
not all browser extensions have adopted these defenses.
Motivated by the seemingly strong incentives of certain
trackers to circumvent request and cookie policies im-
posed by browser extensions, we performed an experi-
ment to analyze whether any of the bypass techniques
introduced in this paper are actively being used in the
wild.
5.1 Use of bypass methods
We performed a crawl of the 10,000 most popular web-
sites according to Alexa. For each website, we visited up
to 20 pages with a Headless Chrome instance (version
64.0.3282.119, on Ubuntu 16.04), and analyzed all re-
quests that were initiated by one of the new bypass tech-
niques we reported in Section 4. In total, 160,059 web
pages were visited by our crawler, and on each page we
analyzed all third-party requests.
Next, we determined whether a cross-site request
should be classiﬁed as tracking or advertising. To this
9https://github.com/gorhill/uBlock/issues/1936
160    27th USENIX Security Symposium
USENIX Association
AppCache
HTML
Headers
Redirect
PDF JS
JavaScript
SW
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:35)
(cid:35)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:35)
(cid:35)
(cid:32)
(cid:32)
(cid:32)
(cid:35)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:32)
(cid:35)
(cid:35)