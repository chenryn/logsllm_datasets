# Threshold Ring Signature without Random Oracles

## Authors
- Tsz Hon Yuen, University of Wollongong, Australia
- Joseph K. Liu, Institute for Infocomm Research, Singapore
- Man Ho Allen Au, University of Wollongong, Australia
- Willy Susilo, University of Wollongong, Australia
- Jianying Zhou, Institute for Infocomm Research, Singapore

## Abstract
In this paper, we present the notion and construction of a threshold ring signature scheme that does not rely on random oracles. This is the first such scheme in the literature that has been proven secure in the standard model. Our scheme extends the Shacham-Waters signature from PKC 2007 in a non-trivial way. Specifically, our technique is designed to achieve a threshold ring signature in the standard model while maintaining the same signature size as the Shacham-Waters signature, with only a small increase in computational cost.

## Keywords
- Ring signatures, threshold ring signatures, anonymity, standard model, random oracles

## Disciplines
- Physical Sciences and Mathematics

## Publication Details
Yuen, T., Liu, J. K., Au, M., Susilo, W., & Zhou, J. (2011). Threshold ring signature without random oracles. Proceedings of the 6th ACM Symposium on Information, Computer and Communications Security (pp. 261-267). NY, USA: ACM.

This conference paper is available at Research Online: [https://ro.uow.edu.au/infopapers/1905](https://ro.uow.edu.au/infopapers/1905)

## 1. Introduction

### 1.1 Ring Signatures
A ring signature scheme allows members of a group to sign messages on behalf of the group without revealing their identities, providing signer anonymity. Unlike group signature schemes, which require a group manager to manage and revoke identities, ring signatures can be formed spontaneously by collecting the public keys of group members. Ring signatures have applications in whistleblowing, anonymous membership authentication, and other scenarios where signer anonymity is required.

### 1.2 Previous Work
Many reductionist security proofs for ring signatures have relied on the random oracle model. However, it has been shown that some cryptosystems previously proven secure in the random oracle model are insecure when instantiated with real-world hashing functions. Therefore, designing practical ring signature schemes that are provably secure without random oracles is important. Several ring signature schemes in the standard model have been proposed, but they either have flawed proofs or rely on strong new assumptions.

### 1.3 Threshold Ring Signatures
A (d, n)-threshold ring signature requires at least d signers to jointly generate a signature. The anonymity of signers is preserved both inside and outside the signing group. The participating signers can choose any set of n entities, including themselves, without needing consent from other group members. Previous threshold ring signature schemes have been proven secure only in the random oracle or ideal cipher model.

### 1.4 Contribution
We propose the first threshold ring signature scheme that is provably secure in the standard model. Our scheme extends the Shacham-Waters (SW) signature, but the extension is non-trivial. We use a specially designed technique for non-random oracle security proof, maintaining the same signature size as the SW signature with only a small increase in computational cost.

## 2. Preliminaries

### 2.1 Pairings
We use bilinear groups of composite order. Let \( n \) be a composite number with factorization \( n = pq \). The groups and their properties are as follows:
- \( G \) is a multiplicative cyclic group of order \( n \).
- \( G_p \) and \( G_q \) are subgroups of \( G \) of orders \( p \) and \( q \), respectively.
- \( g \) is a generator of \( G \), and \( h \) is a generator of \( G_q \).
- \( G_T \) is a multiplicative group of order \( n \).
- \( \hat{e} \) is a bilinear map \( \hat{e} : G \times G \rightarrow G_T \) with the following properties:
  - Bilinearity: For all \( u, v \in G \) and \( a, b \in \mathbb{Z} \), \( \hat{e}(u^a, v^b) = \hat{e}(u, v)^{ab} \).
  - Non-degeneracy: \( \langle \hat{e}(g, g) \rangle = G_T \) whenever \( \langle g \rangle = G \).
  - Computability: It is efficient to compute \( \hat{e}(u, v) \).

### 2.2 Mathematical Assumptions
We assume two problems are difficult to solve in the setting described above: the Computational Diffie-Hellman (CDH) problem in \( G_p \) and the Subgroup Decision Problem (SDP).

- **CDH in \( G_p \)**: Given \( (r, r^a, r^b) \) where \( r \in_R G_p \) and \( a, b \in_R \mathbb{Z}_p \), compute and output \( r^{ab} \).
- **SDP**: Given \( w \) selected at random either from \( G \) (with probability 1/2) or from \( G_q \) (with probability 1/2), decide whether \( w \) is in \( G_q \).

## 3. Security Model

### 3.1 Syntax of Threshold Ring Signature
A threshold ring signature (TRS) scheme consists of four algorithms: KeyGen, Setup, Sign, and Verify.

- **KeyGen(λ)**: On input a security parameter \( \lambda \), outputs a private/public key pair \( (sk_i, pk_i) \).
- **Setup(λ)**: On input a security parameter \( \lambda \), outputs the set of security parameters \( param \).
- **Sign(n, d, Y, X, M)**: On input a group size \( n \), threshold \( d \), a set \( Y \) of \( n \) public keys, a set \( X \) of \( d \) private keys, and a message \( M \), produces a signature \( \sigma \).
- **Verify(n, d, Y, M, σ)**: On input a group size \( n \), threshold \( d \), a set \( Y \) of \( n \) public keys, a message-signature pair \( (M, \sigma) \), returns accept or reject.

### 3.2 Notions of Security
Security of TRS schemes includes unforgeability and anonymity.

- **Unforgeability**: A TRS scheme is unforgeable if no PPT adversary can produce a valid signature for a message and group of public keys that were not previously queried.
- **Anonymity**: A TRS scheme is anonymous if no PPT adversary can distinguish the identity of the signer from the group of public keys.

## 4. Proposed Threshold Ring Signature Scheme

### 4.1 Construction
We extend the 1-out-of-n SW ring signature scheme into a d-out-of-n threshold setting.

- **Setup**: The setup algorithm runs the bilinear group generator to obtain \( (N = pq, G, G_T, \hat{e}) \). It also generates generators \( g_1, B_0, u, u_1, \ldots, u_k \in G \), \( h_1 \in G_q \), and \( \alpha \in \mathbb{Z}_N \). Set \( g_2 = g_1^\alpha \) and \( h_2 = h_1^\alpha \). The public parameters are \( (N, G, G_T, \hat{e}, g_1, g_2, B_0, h_1, h_2, u, u_1, \ldots, u_k, H) \), where \( H \) is a collision-resistant hash function.
- **KeyGen**: For user \( i \), he picks a random \( x_i \in \mathbb{Z}_N \). His public key is \( g_1^{x_i} \) and his secret key is \( g_2^{x_i} \).
- **Sign**: Suppose \( Y = \{pk_1, \ldots, pk_n\} \) is the user ring. \( X \) is the set of private keys of \( d \) participating signers. Define \( f_i \) such that \( f_i = 1 \) if \( i \) is a signer and \( f_i = 0 \) if \( i \) is a non-signer. For \( i = 1, \ldots, n \), one of the signers picks \( x_i \in_R \mathbb{Z}_N \) and sets \( \pi_i = (h_1^{x_i}, (g_1^{x_i})^{f_i} B_0^{2f_i-1}) \). The signature \( \sigma \) is then constructed using these values and the message \( M \).

This construction ensures that the signature size remains the same as the Shacham-Waters signature, with only a small increase in computational cost.