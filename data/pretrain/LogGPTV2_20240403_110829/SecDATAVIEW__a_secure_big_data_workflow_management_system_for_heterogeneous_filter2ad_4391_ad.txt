for an individual prescription. In our first experiment, all workflow
tasks are associated with SGX worker nodes with three different set-
tings: (a) SGX inactive without data encryption, (b) SGX inactive with
data encryption, and (c) SGX active with data encryption. In our sec-
ond experiment, all workflow tasks are associated with SEV nodes
with three settings: (a) SEV inactive without data encryption, (b) SEV
inactive with data encryption, (c) SEV active with data encryption.
Figure 4(a) shows that, when the size of the patient records in-
creases, the execution time also increases. This is because when the
size of the patient records increases, the time spent in encrypting
and decrypting the records increases and it takes a longer time for
the training and testing machine learning models in the workflow
to process larger records. Our experimental results show that SGX
and SEV impose 2.62x and 1.29x overhead on the largest dataset
containing 100, 000 patient records, respectively. It is also depicted
that SGX active with data encryption mode has higher execution
time than the SEV active with data encryption. However, while ex-
perimenting outside of SGX and SEV TEEs, the execution time of
SGX inactive with data encryption is lower than SEV inactive with
data encryption. In the hybrid approach that uses two SGX nodes
and two SEV nodes for the largest of datasets, the overhead is 1.20x
as it is depicted in Figure 5. Since Algorithm1 and Algorithm2 from
Diagnosis Recommendation workflow [3] are resource-intensive
tasks and are not highly security-sensitive, we assigned them to
SecDATAVIEW: A Secure Big Data Workflow Management System for Heterogeneous Computing Environments
ACSAC ’19, December 9–13, 2019, San Juan, PR, USA
(a) Diagnosis Recommendation Workflow.
(b) Word Count Workflow.
(c) Distributed K-means Workflow.
Figure 4: Execution time of running different workflows in
different configurations for different input datasets.
two SEV instances whereas the rest of the tasks are assigned to two
SGX enclaves. We have also experimented to obtain the memory
usage for the largest data sets. It is depicted that the SEV instances
are faster than SGX enclaves. Our experimental results also show
that 1GB heap memory and 33MB non-heap memory is consumed
when executing the diagnosis recommendation workflow, as shown
in Table 2. Table 3 depicts the encryption and decryption overhead
in hybrid active settings is 1.04x.
Figure 5: Execution time of running Diagnosis Recommen-
dation, Word Count and Distributed K-means workflows in
Hybrid inactive/active with data encryption mode for the
largest datasets.
Figure 6: The word count (Map-Reduce) workflow.
4.1.2 The Word Count workflow. Figure 6 depicts a Map-Reduce
workflow, a well-known word-count example for the Map-Reduce [16]
operation to measure the execution times and memory overhead
of SecDATAVIEW. To conduct this experiment, we created a work-
flow with 16 tasks including one task for input processing, 3 Split-
ting and 3 Mapping tasks for map operation, 4 Shuffling and 4
Reducing tasks for reduce operation, and one task for the final
output organization. In our experiment, we randomly generated
100, 000 − 1, 000, 000 words containing 2 characters as input. Fig-
ure 4(b) compares the execution time of the word count workflow
with and without SGX/SEV. Each data point in the figure is an
average of 5 workflow iterations. The figure shows that when the
number of words increases from 100, 000 to 1, 000, 000, the exe-
cution time increases linearly. SGX and SEV impose 1.89x and
1.04x overhead for the largest dataset (i.e., the dataset containing
1, 000, 000 words), respectively. This shows that SEV imposes little
overhead on the execution time and SGX imposes higher overhead
than SEV. In our hybrid approach in which workflow tasks are
executed inside both SGX (2 nodes) and SEV (2 nodes) machines
at the same time by randomly distributing the tasks to 4 SGX/SEV
nodes, the performance overhead is 1.33x as depcited in Figure 5.
ACSAC ’19, December 9–13, 2019, San Juan, PR, USA
S. Mofrad et al.
Table 2: Memory usage of experimental workflows.
Workflow
Diagnosis Recommendation 1GB
1GB
Word Count
1GB
Distributed K-means
Max heap Max non-heap Total
33MB
31MB
30MB
1, 057MB
1, 055MB
1, 054MB
Table 3: Encryption decryption performance overhead of
Hybrid active.
Workflow
Diagnosis Recommendation 50, 481ms
99, 59ms
Word Count
26, 551ms
Distributed K-means
48, 132ms
96, 11ms
24, 591ms
1.04X
1.03X
1.07X
Including Excluding Overhead
We have also measured the memory usage of SecDATAVIEW. Our
experimental results show that SecDATAVIEW uses 1GB heap and
31MB non-heap memory, as depicted in Table 2. Table 3 shows the
encryption and decryption imposes 1.03x overhead in hybrid active
settings.
4.1.3 The Distributed K-means workflow. We measured the execu-
tion time and memory usage of SecDATAVIEW using a Distributed
K-means workflow 3, where several clusters and the number of
splits of datasets are designed dynamically. In this experiment, we
randomly generated 100, 000 to 1, 000, 000 points, each of which
has an x and a y coordinate. Figures 4(c) and 5 give the execu-
tion time of SecDATAVIEW, which shows that SGX, SEV, and our
hybrid approach impose 1.69x, 1.29x and 1.43x overhead on the
largest dataset (1, 000, 000 points), respectively. Also, running the
distributed K-means workflow uses 1GB heap and 30MB non-heap
memory, which is represented in Table 2.
4.2 Security Analysis
SecDATAVIEW architecture and TCB: The SecDATAVIEW ar-
chitecture provides the smallest software and hardware TCB for
deploying big data workflow management system in the cloud.
For SGX nodes, the software component of TCB is the LibOS, the
JVM, the Code Provisioner, and the Task Executor. For SEV worker
nodes, the software component of TCB is the guest OS, the JVM,
the Code Provisioner, and the Task Executor. The hardware com-
ponent of the TCB is the CPU package for the SGX workers and is
AMD SoC and AMD secure processor for the SEV worker nodes.
The SecDATAVIEW architecture excludes all the underlying and
high-privileged cloud system software (i.e., hypervisor and cloud
management software), from the TCB. Besides, SecDATAVIEW is
protected against memory corruption vulnerabilities (e.g., buffer
overflow) since memory access is protected by type-safe languages
like Java and JVM.
Workflow code and data confidentiality and integrity: Sec-
DATAVIEW architecture protects the confidentiality and integrity
of the workflow’s code and data at the booting time and runtime
with the help of TEEs. TEEs are attested with the help of hard-
ware attestation method that is provided by TEE hardware vendors
(i.e., Intel Attestation Server and AMD Guest Attestation). Besides
3https://www.flickr.com/photos/waynestateise/47529826741/
TEEs, SecDATAVIEW security protection is guaranteed with dif-
ferent security primitives such as AEAD scheme, one-way hash
functions, SSL/TLS, and SFTP network connectivity. Specifically,
SecDATAVIEW uses authenticated encryption with associated data
(AEAD). The associated data is validated, but not combined in the
ciphertext. However, the Initialization Vector (IV) that is used to
generate the AEAD is implicitly integrated within the ciphertext.
We assume that AEAD is secure [18], implying that without the
secret key, and given the ciphertexts for any elected plaintexts and
associated data, it is computationally infeasible to form another
pair of ciphertext and associated data to decrypt the ciphertext.
WCPAC protocol: SecDATAVIEW uses the WCPAC protocol to 1)
provision and attest worker nodes, 2) provision the code for the Task
Executor and workflows tasks on each participating worker node,
3) establish the secure communication and file transfers between
the master node and worker nodes, and 4) ensure the secure file
transfers among worker nodes. The WCPAC protocol protects the
SecDATAVIEW network connectivity by establishing an SSL socket
connection for messaging and the SFTP for file transferring be-
tween active nodes. WCPAC is protected against eavesdropping,
the man-in-the-middle attack, and the replay attack.
Attacks against network channel: Assume an adversary actively
eavesdrop on the communication among different nodes. The ad-
versary can learn the source, the destination, the number of trans-
mitting packets, the time of message sent, and the total size of
the transferred message. Conversely, the adversary cannot know
the content carried by the packet’s payload due to our multi-layer
protection mechanisms. First, the communication is protected with
the SSL/TLS protection. Even if the adversary breaks the SSL/TLS
cryptography protection, the payload is protected with the AEAD
encryption and the adversary needs to break the second layer of
cryptography protections, which decreases the chance of successful
attack.
The denial of service (DoS) attack: SecDATAVIEW is vulnerable
to the DoS attack, but this attack also presents in SGX and SEV
TEE. For SGX, it is mainly caused by a malicious host that refuses
to launch the enclave. In SEV it could be caused by a malicious hy-
pervisor that refuses to start the SEV-protected VM or by attackers
who modify the SEV-protected memory image due to the lack of
the SEV memory integrity protection, causing the VM to crash or
exhibit unexpected behavior.
The side-channel attack: SecDATAVIEW is vulnerable to the side-
channel attack that is present in every SGX [12, 21, 35, 44, 53, 56,
58, 59] and SEV [43] TEE.
4.3 Comparison with Existing Systems
Table 4 compares SecDATAVIEW against several representative big
data systems including VC3 [9], Opaque [61], and the lightweight
Lua Map-Reduce system [46].
Functionality: SecDATAVIEW has two main advantages com-
pared to the existing systems: 1) it is compatible with many forms
of data structures/formats and is also capable of executing a vari-
ety type of workflows by leveraging a heterogeneous computing
setting (i.e., SGX and SEV). VC3, the lightweight Lua Map-Reduce,
and Opaque are limited to Map-Reduce and SQL query workflows,
respectively. Besides, they only support SGX TEE to protect their
SecDATAVIEW: A Secure Big Data Workflow Management System for Heterogeneous Computing Environments
ACSAC ’19, December 9–13, 2019, San Juan, PR, USA
Table 4: Comparisons with existing TEE-based big data systems.
VC3 [9]
AES-GCM-128
SecDATAVIEW
Feature
AES-GCM-256
Data confidentiality
Authenticated Encryption Authenticated Encryption
Data integrity
Yes
Intel SGX
Yes
AMD SEV
All types of workflow
Data structure compability
No
Job integrity verification
Access pattern leakage protection No
N/A
Access pattern leakage overhead
1.2X-1.43X (hybrid mode)
Job performance overhead
Yes
No
Map-Reduce
Yes
No
N/A
1.04X-1.08X (base-encrypted mode)
Opaque [61]
AES-GCM-128
Authenticated Encryption
Yes
No
SQL query
Yes
Yes
1.6X-46X (oblivious mode)
0.52X-3.3X (encrypted mode)
Lua Map/Reduce [46]
AES-CTR-128
No
Yes
No
Map-Reduce
No
No
N/A
1.3X-2X (encrypted mode)
computation.
Security: SecDATAVIEW and the lightweight Lua Map-Reduce use
the managed code (Java/Lua) that are protected against memory
corruption vulnerabilities (e.g., buffer overflow). VC3 uses C/C++
and offers an execution mode in which the integrity of the enclave
memory region is evaluated. However, when this feature is acti-
vated, the performance overhead is increased up to 1.27x. Among
the compared systems, Opaque and VC3 offer job execution verifi-
cation. In SecDATAVIEW, since the structure of workflows and the
size of input files do not need to follow a pre-defined data structure
(i.e., Map-Reduce or query), having a general verification model to
be applied in many forms of workflow is an open research challenge.
Among the compared systems, only Opaque provides the protection
against access pattern leakage attack. However, it is based on the
oblivious computation, which imposes up to 46x overhead on the
job execution time in Opaque.
Performance: SecDATAVIEW imposes moderate overhead, a range
between 1.20x-1.43x in a hybrid approach. Among compared sys-
tems, VC3 is fastest when it works with its fastest mode and without
enclave memory region checking. However, when VC3 activates
the enclave memory region checking, its performance is competi-
tive with SecDATAVIEW (i.e., VC3 imposes up to 1.27x overhead
and SecDATAVIEW imposes up to 1.43x overhead). Additionally,
SecDATAVIEW (1.43x) outperforms Opaque (3.3x overhead) and
the lightweight Lua Map-Reduce (2x overhead).
5 RELATED WORK
In this section, we survey the state-of-the-art solutions regarding
big data security. Brenner et al. proposed Securekeeper [13] that
uses Intel SGX to protect the confidentiality of ZooKeeper coordina-
tion service. Considering the enclave programming spectrum, the
Securekeeper used the specialized enclave with Java JNI approach