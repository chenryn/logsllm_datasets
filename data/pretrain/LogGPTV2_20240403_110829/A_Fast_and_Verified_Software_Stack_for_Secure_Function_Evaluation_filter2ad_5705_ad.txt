structure in the loops to support a simple semantic preservation
proof. The number of unfolds for each loop is received by the tool
as external advice. For the second transformation we rely on the
pre-existing dead code elimination pass of CompCert to remove the
remaining loops that are kept after the unfolds. Note that dead code
elimination is performed after loop unrolling, function inlining and
constant propagation passes, which ensures that loops with simple
control structure are successfully eliminated as dead-code (provided
that sufficient large unroll estimates are given at the loop unroll
pass; otherwise compilation will fail). To make this transformation
more effective, we had to slightly improve the abstract domain
used in CompCert’s value analysis to improve the accuracy of the
constant-propagation pass.
3.4 Back-End compiler passes
RTL Circuits. The first intermediate language of the back-end is
a variant of RTL that we have called RTLC (RTL Circuits). The
language is itself very similar to RTL, with the exception that the
control-flow is enforced by conditional execution. Specifically, each
conditional test is assigned to a propositional variable. These propo-
sitional variables are then used to build path-condition formulas
that are assigned to each instruction; the execution of each instruc-
tion is conditioned on the validity of a path condition that encodes
the combination of branches that can possibly lead to it. Note that
RTLC retains all the memory accesses from RTL, that is, writes and
reads to and from global variables and stack data.
The semantics of RTLC is sequential (each and every instruction
is evaluated following the order of appearance in the program), but
the execution of an instruction is guarded by the corresponding
INPUTS: a[0..3] b[0..3]
OUTPUTS: result[0..3]
x6 = int32[a]
x7 = int32[b]
test b14 = x6 <s x7
x16 = 1
x16 = 0
int32[result] = x16
| T
| T
| T
| b14
| ¬b14
| T
INPUTS: a[0..3] b[0..3]
OUTPUTS: result[0..3]
0: int32[a]
1: int32[b]
2: w0 <s w1
3: 1
4: 0
5: (w2?w3:w4)
6: int32[result] := w5
|
|
| T
|
|
|
| T
Figure 9: Guarded instructions instead of control-flow (left)
and corresponding SSA conversion (right).
path condition. We have adopted Ordered-Reduced Binary Decision
Trees [23] as canonical representatives of path-conditions, where
nodes are tagged with propositional variables (branching points)
and leaves are Boolean values. Figure 9 (left) shows the test program
after the path-condition computation pass. Path-conditions are the
guards shown at the end of each line (propositional variables are
denoted by their index).
From RTL to RTLC. The translation from RTL to RTLC amounts
essentially to the computation of path-conditions for every instruc-
tion in the program. This computation is part of the RTL structural
validation that occurs as the final pass of the compiler front-end
component. This validation ensures that a Boolean circuit inter-
pretation can be assigned to the RTL program, making it ready to
be processed by the CircGen back-end. This is accomplished by a
traversal of the control-flow graph in topological order that: i. iden-
tifies boundaries of the three segments of the program (sequence of
inputs, body, and sequence of outputs); ii. checks that the body only
includes forward jumps; and iii. checks that it does not execute any
unsupported instruction (function call, volatile memory access, etc.).
Note that check ii. ensures that the control-flow graph is acyclic,
which in particular validates that every loop was discharged by the
redundancy elimination pass.
Path conditions for the instructions of the body are also con-
structed during this traversal by applying the following rules: i. ini-
tially, all instructions have the ⊥ path condition (unreachable in-
struction), except for the first instruction of the body that is assigned
the ⊤ path condition (unconditionally executed); ii. when a non-
branching instruction is visited, its path condition is propagated to
its successor (joining it with any previously computed path condi-
tion for that program point); and iii. when a branching instruction
(condition test) is visited, the corresponding propositional vari-
able (resp. its negation) is added to the path condition which gets
propagated to the then successor (resp. the else successor).
Constant Expansion. The guarded execution model of RTLC is
particularly well-suited to perform an optimization with significant
impact on the size of the resulting circuit for certain classes of C
programs: for some operations it is possible to determine that their
arguments will be constant once the execution path is fixed. For
those operations we expand the associated instruction into multiple
instances with constant arguments, and use the associated path-
conditions to differentiate between the paths. In our implementation
we have instrumented this optimization exclusively for memory
operations; the impact for algorithms that rely on array indexing
Session I4:  Verifying CryptoCCS’17, October 30-November 3, 2017, Dallas, TX, USA19971 : 64-wire INPUT
2 : 0-bit GLOBAL = []
3 : 32-bit GLOBAL = [0,0,0,0]
4 : 32-bit GLOBAL = [0,0,0,0]
5 : 32-bit GLOBAL = [0,0,0,0]
6 : selk(32,32,0)[32] ← [(1,0..31)]
7 : id(32)[32] ← [(6,0..31)]
8 : selk(32,32,0)[32] ← [(1,32..63)]
9 : id(32)[32] ← [(8,0..31)]
10: id(32)[32] ← [(9,0..31)]
11: id(32)[32] ← [(7,0..31)] 12 : slt32[1] ← [(11,0..31);(10,0..31)]
13: const32(0)[32] ← []
14: const32(1)[32] ← []
15: guard(¬12)[1] ← [(12,0)]
16: barrierN(32)[32] ← [(15,0);(13,0..31)]
17: guard(12)[1] ← [(12,0)]
18: barrierN(32)[32] ← [(17,0);(14,0..31)]
19: xorN(32)[32] ← [(16,0..31);(18,0..31)]
20: updk(32,32,0)[32] ← [TT;(19,0..31);(5,0..31)]
OUTPUT = [(20,0..31)]
Figure 10: High-level circuit for the example program.
(e.g., sorting) is dramatic, as we show in the micro-benchmarking
that we present at the end of the section.
Static Single Assignment (SSA). Presenting RTLC programs in
Static Single Assignment form allows for a neat correspondence
between program variables (register variables in RTLC) and their
intended view as wire buses in a Boolean circuit. More importantly,
explicit information on the discrimination conditions for variable
aggregation performed at the control-flow join points (ϕ-nodes) is
easily accessible by looking at path-conditions from the incoming
nodes. Indeed, during the translation into SSA, we add a rich variant
of ϕ-nodes describing not only the variables that are merged in
the node, but also the conditions that discriminate between the
different incoming paths.
At this stage, we also take the opportunity to remove most of
the path-condition guards on instructions, replacing them with an
implicit ⊤ path-condition, but keeping those whose presence is
required by the semantic preservation result (namely, the guards
on tests and memory writes). This simplification is justified by:
i. the fact that SSA-form ensures enabled instructions never destroy
previously computed data; and ii. the fact that ϕ-nodes already
have explicit information on incoming condition guards. Figure 9
(right) illustrates the effect of the SSA pass on the running example.
The SSA property is enforced by the program syntax: registers are
named according to the line at which they are defined (e.g., w2
holds the value resulting from the evaluation of line 2).
High-Level Circuits. We call HLcirc a language describing Boolean
circuits with complex gates. This is the next intermediate language
used by the CircGen back-end. Each of these gates has a specified
number of input and output wires, and behaves in accordance with
a predefined Boolean function evalG : 2in → 2out. Circuits are
specified by a sequence (array) of wire-buses (sets of wires) that are
fed into and collected from these complex gates. Specifically, the
circuit description starts with a (nonempty) set of input wire-buses
that collectively constitute the input wires of the circuit. This is
followed by a topological description of the circuit, describing the
gates and how they connect to each other: each line in the program
specifies a wire-bus matching the out-arity of the gate. Inputs to the
gate are specified by connectors that select which wires from the
incoming bus are plugged to the gate’s input. An obvious topologi-
cal constraint is imposed: the connector for a gate can only refer
to wires appearing earlier in the circuit. Finally, we have a descrip-
tion of the outputs of the circuit (again, described by a connector).
Figure 10 presents a circuit description for the example program.
Handling of RTLC Memory Accesses. The main abstraction gap
between SSA-RTLC and HLcirc is the use of memory. Recall that
RTLC retains memory operations to access/update global variables
and data stored on the stack. Hence, the translation into high-level
circuits must keep track, at each program point, of which wires store
the data for the relevant memory regions. To this end, we treat every
memory region as a pool of wires, initialized in accordance with
the original C program (lines 2-5 in Figure 10, which hold the initial
data of stack, a, b and result respectively). These initial pools are
possibly updated by input declarations (e.g. declaring a as an input
redirects its wires to some of the wires in entry 1 – the input wires of
the circuit). Read and store operations consist in either reading from
or replacing (some of the) wires in the bus. Concretely, we consider
four distinct gates to handle memory read/write operations, all
parameterized by the bit-width of the elements and the memory
region size:
• selk-w-n-k: takes n data wires and outputs the wires for a w-bit
• sel-w-n: takes n data wires and log(n/w ) index wires and outputs
the wires for a w-bit word corresponding to the indexed element.
• updk-w-n-k: takes a condition guard (1 bit), n data wires and w
wires holding the value to store; it outputs the resulting n data
wires (updated at position k).
• upd-w-n: takes a condition guard, n data wires, w value wires,
and log(n/w ) index wires; it outputs the updated n data wires.
word corresponding to the k-th element (k is a constant).
Note that updates are always guarded by a guard condition. In
fact, for memory writes, we retain the guarded sequential execution
semantics of RTLC. By lazily keeping guards at the update gates we
are able to later remove them with very small overhead (due to con-
stant propagation) and hence obtain much better generated circuits
(in terms of gate counts). Moreover, observe the distinction between
arbitrary and constant indexed variants of both operations—while,
in the former, the index is provided as an input to the gate, in the
latter the index is a (constant) parameter. The reason for the distinc-
tion is the huge difference between the gate-complexity of those
variants, since constant-index operations amount essentially to a
simple rewiring, while the arbitrary indices impose heavy decoding
and multiplexing operations. This is indeed the main motivation for
the constant-expansion pass mentioned earlier: memory accesses
constitute the best example where the impact of unfolding constant
alternatives can be significant.
Reg-to-Wire Mapping and ϕ-node Placement. To finalize the
translation from SSA-RTLC to HLcirc it now suffices to associate
to each RTLC variable the correct number of wires and to insert
explicit code to resolve ϕ-nodes. This transformation is justified
via the facts that i. the SSA form ensures no cyclic dependencies in
the wire definitions; and ii. that the explicit guards provided with
ϕ-nodes naturally lead to a w-bit multiplexer (w being the bit-width
of joined variables). This is clearly noted in lines 15–19 of Figure 10.
Session I4:  Verifying CryptoCCS’17, October 30-November 3, 2017, Dallas, TX, USA1998Circuit generation. From a high-level circuit, the CircGen back-
end generates a Boolean circuit by obtaining instantiations of the
high-level complex gates used in the HLcirc language from an ex-
ternal oracle, and expanding the entire circuit into Boolean gates.
This external oracle is part of the trusted base of CircGen. If this
is constructed using formally verified instantiations—for example
one can have a formally verified library of Boolean circuits for all C
native operations— then our semantic preservation theorem states
that the generated circuit is correct with respect to the input C
program. In our implementation, the high-level gate instantiation
oracle produces optimized gates, tailored for multiparty computa-
tion applications similar to those used by CBMC-GC, and which we
assume to be correct down to extensive testing. Formally verifying
the implementations of these gates can be done, e.g., by using the
approach in [58]. We leave this for future work.
Unverified optimizations. During the gate expansion, we have
implemented some straightforward circuit minimization techniques,
such as memoization to reuse previously computed gates and the
removal of entries not contributing to the output. These global opti-
mizations are (for now) unverified, and so we report benchmarking
results both when they are turned on and off. When we refer to
optimized CircGen we mean that these optimizations are turned
on, and so the semantics preservation proof does not cover the
results. When we refer simply to CircGen we mean the semantics-
preserving certified tool that excludes these post-processing opti-
mizations.
3.5 Micro Benchmarks
In this section we give a detailed three-way comparison, in terms
of gate count in the output circuit, of both our optimized (partly
unverified) and verified CircGen and the latest version of CBMC-
GC12 (v0.9.3). The gate counts for various micro-benchmarks are
given in Table 3. An important caveat should be highlighted at this
point. In collecting results for CBMC-GC, we have truncated its
execution time to be comparable (or at least not too much higher
than that of CircGen).13 It is possible that, by allowing the tool to
run for more time, it would have produced better results. Therefore,
our claim here is not that we have a better tool overall, but that
the optimized version of CircGen is a competitive alternative to
CBMC-GC. The exception are applications where the computation
heavily relies on array accesses. As can be seen in the table, the
constant expansion optimization that we introduced for static array
access optimization allows us to obtain very significant reductions
in gate counts, even in the verified version of CircGen, which we
do not believe could be resolved via automatic optimization by
CBMC-GC: this is because these optimizations heavily depend on
the high-level semantics of the program.
We give counts for both the total number of gates and the total
number of non-XOR gates (AND or OR gates). The latter can be sig-
nificantly more costly to evaluate in some protocols than XOR gates,
for which very effective optimizations exist. The chosen bench-
marks include examples provided in the CBMC-GC distribution,
namely those for arithmetic computation of different complexities,
Table 3: CBMC-GC/CircGen/Optim. CircGen: Gate Counts
CBMC-GC
CircGen
CircGen Opt.
Computation
arith100
arith1000
arith2000
arith3000
hamming160
hamming320
hamming800
hamming1600
median11
median21
median31
median41
median51
median61
matrix3x3
matrix5x5
matrix8x8
aes128-opt
aes128-sbox
aes128-tab
sha256
Non XOR
16’143
160’269
319’584
479’463
386
784
1’997
5’494
10’560
40’320
89’280
902’923
3’520’577
7’410’852
32’868
148’650
3’641’472
6’400
504’000
865’152
28’571
Total
46’215
465’470
936’754
1’442’320
1’610
3’260
8’248
22’796
17’850
67’050
147’600
1’100’674
3’871’968
7’994’102
85’986
398’750
7’286’912
30’828
719’050
1’261’780
114’169
Non XOR
16’952
166’080