title:Geo-locating Drivers: A Study of Sensitive Data Leakage in Ride-Hailing
Services
author:Qingchuan Zhao and
Chaoshun Zuo and
Giancarlo Pellegrino and
Zhiqiang Lin
Geo-locating Drivers: A Study of Sensitive Data
Leakage in Ride-Hailing Services
Qingchuan Zhao∗, Chaoshun Zuo∗, Giancarlo Pellegrino†‡, Zhiqiang Lin∗
∗The Ohio State University
†CISPA Helmholtz Center for Information Security
‡Stanford University
{zhao.2708, zuo.118, lin.3021}@osu.edu, gpellegrino@{cispa.saarland, stanford.edu}
Abstract—Increasingly, mobile application-based ride-hailing
services have become a very popular means of transportation.
Due to the handling of business logic, these services also contain
a wealth of privacy-sensitive information such as GPS locations,
car plates, driver licenses, and payment data. Unlike many of
the mobile applications in which there is only one type of users,
ride-hailing services face two types of users: riders and drivers.
While most of the efforts had focused on the rider’s privacy,
unfortunately, we notice little has been done to protect drivers.
To raise the awareness of the privacy issues with drivers, in
this paper we perform the ﬁrst systematic study of the drivers’
sensitive data leakage in ride-hailing services. More speciﬁcally,
we select 20 popular ride-hailing apps including Uber and Lyft
and focus on one particular feature, namely the nearby cars
feature. Surprisingly, our experimental results show that large-
scale data harvesting of drivers is possible for all of the ride-
hailing services we studied. In particular, attackers can determine
with high-precision the driver’s privacy-sensitive information
including mostly visited address (e.g., home) and daily driving be-
haviors. Meanwhile, attackers can also infer sensitive information
about the business operations and performances of ride-hailing
services such as the number of rides, utilization of cars, and
presence on the territory. In addition to presenting the attacks,
we also shed light on the countermeasures the service providers
could take to protect the driver’s sensitive information.
I.
INTRODUCTION
Over the last decade, ride-hailing services such as Uber and
Lyft have become a popular means of ground transportation
for millions of users [34], [33]. A ride-hailing service (RHS) is
a platform serving for dispatching ride requests to subscribed
drivers, where a rider requests a car via a mobile application
(app for short). Riders’ requests are forwarded to the closest
available drivers who can accept or decline the service request
based on the rider’s reputation and position.
To operate, RHSes typically collect a considerable amount
of sensitive information such as GPS position, car plates,
payment data, and other personally identiﬁable information
(PII) of both drivers and riders. The protection of these data is
a growing concern in the community especially after the pub-
Network and Distributed Systems Security (NDSS) Symposium 2019
24-27 February 2019, San Diego, CA, USA
ISBN 1-891562-55-X
https://dx.doi.org/10.14722/ndss.2019.23052
www.ndss-symposium.org
lication of documents describing questionable and unethical
behaviors of RHSes [18], [8].
Moreover, a recent attack presented by Pham et al. [30]
has shown the severity of the risk of massive sensitive data
leakage. This attack could allow shady marketers or angry taxi-
cab drivers to obtain drivers’ PII by leveraging the fact that
the platform shares personal details of the drivers including
driver’s name and picture, car plate, and phone numbers upon
the conﬁrmation of a ride. As a result, attackers could harvest
a signiﬁcant amount of sensitive data by requesting and can-
celing rides continuously. Accordingly, RHSes have adopted
cancellations policy to penalize such behaviors, but recent
reported incidents have shown that current countermeasures
may not be sufﬁcient to deter attackers (e.g., [15], [5]).
Unfortunately, the above example attack only scratches the
tip of the iceberg. In fact, we ﬁnd that the current situation
exposes drivers’ privacy and safety to an unprecedented risk,
which is much more disconcerting, by presenting 3 attacks that
abuse the nearby cars feature of 20 rider apps. In particular,
we show that
large-scale data harvesting from ride-haling
platforms is still possible that allows attackers to determine
a driver’s home addresses and daily behaviors with high
precision. Also, we demonstrate that the harvested data can
be used to identify drivers who operate on multiple platforms
as well as to learn signiﬁcant details about an RHS’s operation
performances. Finally, we show that this is not a problem
isolated to just a few RHSes, e.g., Uber and Lyft, but it is
a systematic problem affecting all platforms we tested.
In this paper, we also report the existing countermeasures
from the tested RHSes. We show that countermeasures such
as rate limiting and short-lived identiﬁers are not sufﬁcient
to address our attacks. We also present new vulnerabilities in
which social security numbers and other conﬁdential infor-
mation are shared with riders exist in some of the RHSes we
tested. We have made responsible disclosures to the vulnerable
RHS providers (received bug bounties from both Uber and
Lyft), and are working with them to patch the vulnerabilities
at the time of this writing.
Finally, to ease the analysis efforts, we have developed a
semi-automated and lightweight web API reverse engineering
tool to extract undocumented web APIs and data dependencies
from a mobile app. These reversed engineered web APIs are
then used to develop the security tests in our analysis.
• Nearby Cars: The forth API is used by the rider app
to obtain information about nearby cars and a quote of
the cost of the ride. Figure 1 shows an example of this
API with the request and response message. The request
message carries the rider’s location and the response mes-
sage contains several nearby cars. Each car has at least an
identiﬁer (id), the position information, which includes
the GPS coordinates and the time stamp indicating when
such position is recorded.
• Ride Request: The last API is used to request a ride
and spawns across the three entities. It is initiated by the
rider when requesting a ride for a speciﬁc destination.
The server will determine the closest drivers to the rider’s
current position and ask them if they would accept the
ride. If so, the server assigns the ﬁrst responded driver to
the rider, and sends to the rider app the details about the
ride.
RHSes may provide additional services and APIs that
are not shown in Figure 1, such as billing information for
customers and APIs to integrate with other third-party services
(e.g., Google Maps).
B. Motivation and Threat Model
Motivation. The motivation of our work is based on a serious
attack against drivers of RHSes. To the best of our knowledge,
one of the ﬁrst few attacks threatening the safety of drivers has
been presented by Pham et al. [30] as a part of a broader study
on privacy threats in RHSes. In this attack, the attacker is a
group of angry taxi-cab drivers who wants to harm RHS drivers
coordinately. To do so, the attacker exploits the behavior of the
Request Ride API that returns drivers’ personal details. Based
on this behavior, the attacker collects drivers’ information by
requesting and canceling rides. While this threat may seem
implausible, a number of news reports is showing that physical
violence is a real threat to RHS drivers (e.g., [39], [10], [21],
[31]). On the other hand, RHS providers have begun to charge
penalties if users canceling rides. This policy increases the cost
for conducting such information collection, and mitigates the
attacks utilizing the Request Ride API.
However, despite the Request Ride API, we ﬁnd that the
Nearby Cars API can also leak drivers’ information both
directly and indirectly. Nevertheless, it remains underestimated
and is rarely noticed by attackers and researchers. There might
be multiple reasons. The ﬁrst reason is probably that, showing
the nearby cars is a common feature of apps in this category,
which brings directly to the users with vivid visual effects and
lets them realize how many available cars around them, in
order to estimate where they would better to move to catch
a car in a shorter time. This feature is provided by almost
every RHS app today, though different app may adopt different
strategy to display the nearby cars (e.g., using different radius).
The second possible reason is that, this API is not designed
to provide drivers’ information directly as what the Request
Ride API does, such as driver’s name, plate number, and
phone number. As a result, when designing RHS apps, the
app developers may intuitively provide this feature by default,
without challenging much about its security.
Therefore, in this paper, we intend to systematically study
the severity of the data leakages originated from this visual
Service Name
#Downloads
Obfuscated?
Uber
Easy
Gett
Lyft
myTaxi
Taxify
BiTaksi
Heetch
Jeeny
Flywheel
GoCatch
miCab
RideAustin
Ztrip
eCab
GroundLink
HelloCabs
Ride LA
Bounce
DC Taxi Rider
100+ millions
10+ millions
10+ millions
10+ millions
5+ millions
5+ millions
1+ millions
1+ millions
500+ thousands
100+ thousands
100+ thousands
100+ thousands
100+ thousands
100+ thousands
50+ thousands
10+ thousands
10+ thousands
10+ thousands
10+ thousands
5+ thousands
✔
✔
✔
✔
✔
✗
✔
✔
✔
✗
✔
✗
✗
✔
✔
✗
✗
✗
✗
✔
Table I: The selected RHSes in our study.
effect, which is brought by the execution of the Nearby Cars
API. To our surprise, we ﬁnd that this feature can actually
cause a lot of damages to both the drivers and the platform
providers as well.
Threat Model. We assume the attacker is either a ride-hailing
service, an individual, or a group of persons. In addition, the
attacker can reverse engineer the rider app of RHSes, create
fake accounts, use GPS spooﬁng to forge user positions, and
control several machines connecting to the Internet.
III. METHODOLOGY AND TOOLS
A key objective of this work is to have a systematic under-
standing of the current circumstances of driver’s security issues
in RHSes by studying the related web APIs they exposed. To
this end, we intend to investigate the deployed countermeasures
or mechanisms that can prevent, increase the cost, or slow
down the acquisition of the GPS positions of drivers, and
meanwhile to understand whether such data leakage is a threat
to drivers’ privacy and RHS business. For this purpose, we
have to apply security tests over web APIs, which requires
proper descriptions of the web API end-points, parameters,
and API call sequences. Unfortunately, the documentation of
web APIs is not always available: out of the 20 mobile apps we
studied, only Lyft provides a description of the Nearby Cars
API2. To solve this problem, we need to design a tool for web
API reverse engineering.
In this section, we ﬁrst describe how we select the RHSes
and their apps in §III-A, then present how we design our web
API reverse engineering tool in §III-B and its implementation
in §III-C.
A. Selection of the RHSes
We conducted our study on a selection of RHSes by
searching for the keyword “ride-hail” on Google Play Store
through a clean Chrome Browser instance and selecting the top
20 suggested apps that can be installed and run on our devices
2See "Availability - ETA and Nearby Drivers" https://developer.lyft.com/
reference
3
Interestingly, according to our preliminary analysis of these
20 apps, we also notice that we can use a lightweight API
level data dependency analysis instead of the heavyweight
instruction level data dependency analysis (i.e., taint analysis)
to solve our problem. In that, the parameters are mostly strings
and we can identify the dependencies by matching their values.
The only limitation for this approach is that we are unable to
identify the dependencies if a string is transformed between the
deﬁnition of the string and the use of the string. Fortunately,
we did not notice such a case in our RHS apps.
Therefore, we eventually design a lightweight, API level,
dynamic data dependency analysis that works in the following
three steps:
self-developed libraries;
Step I: Logging Android and System APIs. First, we
instrument a large number of system APIs of our interest,
which includes (i) all of
the HTTP(S) system libraries
(e.g., HttpClient) and low level (SSL)Socket APIs handling
third-party or
system
APIs that are required by Ride-Hailing services, such as
LocationManager.requestLocationUpdates(),
LocationManager.getLastKnownLocation(),
GPSTracker.getLatitude(),
GPSTracker.get
Longitude(), and System.currentTimeMillis().
During the execution of these APIs, we log the name, the
parameters, and the return values of the system APIs in a log
ﬁle.
(ii)
the
Step II: Resolving the Web APIs. Unlike the system APIs
whose name is documented, we do not have any name of
the web APIs because they are merely HTTP request and
response messages. On the other hand, these messages have
already been logged when the networking system APIs get
executed. Therefore, by inspecting the networking request and
response API execution information in the log ﬁle, we can pair
each request with its corresponding response, and then parse
these pairs according to the HTTP protocol speciﬁcation [1]:
a request message includes 1) a request-line, 2) request header
ﬁelds, 3) an empty line, and 4) an optional message-body;
and a response message contains 1) a status-line, 2) response
header ﬁelds, 3) an empty line, and 4) an optional message-
body.
Speciﬁcally, we parse the request message to obtain the
request URL as well as request parameters and we also parse
the response messages to abstract its content as a set of pairs of
. With respect to the parameters and
response value pairs, we parse them accordingly based on their
speciﬁc encodings (e.g., JSON and XML). Eventually, the web
API is resolved by the request URL, the request parameters,
and the return values (i.e., response message). Then, we replace
the log entires of the original network sending and receiving
APIs with the newly resolved web APIs in the log ﬁle.
Step III: Data Dependency Analysis. Then by analyzing the
log ﬁle in both forward and backward directions, we identify
the APIs of our interest and also dependencies. In particular:
• Forward Data Dependency Analysis. Starting from
the return values of
the hooked system APIs (e.g.,
GPSTracker.getLongitude()), we search where
5
this value is used in the log ﬁle in the forward direction.
The web APIs that use the GPS coordinates in the request
parameters is the candidate of the Nearby Cars API.
Also, interestingly, the GPS coordinates will also be used
in the return values of the Nearby Cars API because
each nearby car also has a location. An example of this
response message is in shown in Figure 2, which is the
JSON formatted item in nearby cars array. Therefore,
to further narrow down the candidate, we also inspect the
response messages. If the GPS coordinates exist in the
response message, we identify this Nearby Cars API.
• Backward Data Dependency Analysis. Having identi-
ﬁed the Nearby Cars API, we then search in a backward
direction to locate where the parameters of this API
are deﬁned. Transitively, we identify the closure that
generates the parameters such as the access_token.
Note that to really identify whether a parameter is token,
we apply the same differential packet analysis [2] to infer
the tokens in the request message. The key observation is