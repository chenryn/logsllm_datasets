A2(f (x(cid:48), y(cid:48))) to obtain a boolean function g; the output
is g(x(cid:48), y(cid:48)).
B. Proof of Security
We assume the DualEx protocol runs in a hybrid world
where the parties are given access to trusted entities com-
puting two functions: oblivious transfer and equality testing.
(These trusted entities operate according to the usual ideal-
world model where there is no additional one-bit leakage.)
We show that the DualEx protocol securely computes f
with one-bit leakage in this hybrid model. It follows from
standard composition theorems [4] that the DualEx protocol
securely computes f with one-bit leakage if the trusted
entities are replaced by secure protocols (achieving the
standard security deﬁnition against malicious adversaries).
Theorem 1. If the garbled-circuit construction is secure
against semi-honest adversaries and H is modeled as a
random oracle, then the DualEx protocol securely computes
f with one-bit leakage in the hybrid world described above.
Proof: Let A denote an adversary attacking the protocol
in a hybrid world where the parties have access to trusted
entities computing oblivious transfer and equality testing.
We assume that A corrupts Bob, though the proof is sym-
metric in the other case. We show that we can construct an
adversary S, running in our ideal world where the parties
have access to a trusted entity computing f, that has the
same effect as A in the hybrid world.
Construct S as follows:
1) S, given inputs y and aux, runs A on the same inputs.
It then simulates the ﬁrst-stage oblivious transfers as
follows: for the ith oblivious transfer, S receives A’s
input bit y(cid:48)
i and returns a random “input-wire label” wi
to A.
n and sends y(cid:48) to the trusted entity
2) S sets y(cid:48) = y(cid:48)
1 ··· y(cid:48)
computing f. It receives in return an output vB.
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:48:10 UTC from IEEE Xplore.  Restrictions apply. 
3) S chooses random output-wire labels
A1 ,··· , wvB(cid:96)
A(cid:96) ) .
def= (wvB1
WvB
A
Then, in the usual way (e.g., [26]), S gives to A a
simulated garbled circuit constructed in such a way
that the output-wire labels learned by A (given the
input-wire labels chosen by S in the ﬁrst step) will
A . Additionally, S chooses random
be precisely WvB
A1 , . . . , w¯vB(cid:96)
w¯vB1
A(cid:96) , deﬁnes
WA =
(cid:18) w0
and gives (cid:18) H(w0
w1
A1
A1
··· w0
··· w1
A(cid:96)
A(cid:96)
(cid:19)
(cid:19)
,
A1)
A1)
H(w1
··· H(w0
··· H(w1
A(cid:96))
A(cid:96))
i , w1
5) Finally, A submits some input wB(cid:107)w(cid:48)
to A. (The notation H(·) just means that S simulates a
random function on the given inputs.) This completes
the simulation of the ﬁrst stage of the protocol.
4) Next, S simulates the second-stage oblivious transfers
by simply recording, for all i, the “input-wire labels”
i ) used by A in the ith oblivious transfer. A
(w0
then sends its second-phase message (which contains
a garbled circuit, input-wire labels corresponding to its
own input, and hashes of the output-wire labels).
B for the equality
test. S then deﬁnes the following boolean function g
(that depends on several values deﬁned above):
a) On input x, y ∈ {0, 1}n, use the bits of x as selec-
tor bits to deﬁne “input-wire labels” wx1
n .
1 , . . . , wxn
Then, run stage 2 of the protocol exactly as an honest
Alice would to obtain vA ∈ {0, 1}(cid:96) and wA. (In
particular,
if some error is detected then random
values are used for vA and wA. These random values
can be chosen by S in advance and “hard coded”
into g.)
A (cid:107)wA is equal to wB(cid:107)w(cid:48)
b) Return 1 if WvA
B; other-
wise, return 0.
S sends g to the trusted party, receives a bit z in return,
and gives z to A.
6) If z = 0 or A aborts, then S sends stop to the trusted
entity. Otherwise, S sends continue. In either case, S
then outputs the entire view of A and halts.
To complete the proof, we need to show that
(cid:8)IDEALf,S(aux)(x, y, n)(cid:9)
(cid:8)REALΠ,A(aux)(x, y, n)(cid:9)
x,y,aux∈{0,1}∗
c≡
x,y,aux∈{0,1}∗
(where, above, the second distribution refers to the execution
of DualEx in the hybrid world where the parties have
access to trusted entities computing oblivious transfer and
equality). This is fairly straightforward since there are only
two differences between the distribution ensembles:
1) In the real world the garbled circuit sent by Alice to A
is constructed correctly based on Alice’s input x, while
in the ideal world the garbled circuit is simulated based
on the input-wire values given to A and the output vB
obtained from the trusted entity computing f.
2) In the real world the output of the honest Alice when
the equality test succeeds is vA, whereas in the ideal
world it is vB (since vB is the value sent to Alice by
the trusted entity computing f).
Computational indistinguishability of the ﬁrst change fol-
lows from standard security proofs for Yao’s garbled-circuit
construction [26]. For the second difference, the probability
(in the ideal world) that
the equality test succeeds and
vB (cid:54)= vA is negligible. The only way this could occur
is if A is able to guess at least one value w¯vBi
Ai ; but, the
only information A has about any such value is H(w¯vBi
Ai ).
Thus, A cannot guess any such value except with negligible
probability.
VI. EVALUATION
A. Implementation
Since there is no need for any party to keep the circuit
locally as is required for cut-and-choose, the execution of
the garbled circuit sub-protocol (Figure 3) can be pipelined
as for ordinary semi-honest secure computing protocols. We
implement this protocol using the framework of Huang et
al. [16]. This framework provides the most efﬁcient known
implementation of semi-honest garbled circuit protocols by
incorporating circuit-level optimizations (including bit width
minimization and extensive use of the free-XOR technique)
and scalability by using a pipelined execution process where
garbled gates are transmitted to the evaluator and evaluated
as they are ready, thereby reducing latency and avoiding the
need for either the generator or evaluator to ever keep the
entire garbled circuit in memory.
In adapting this framework to support dual execution
protocols, we observe that Stage 1 and Stage 2 of the dual
execution protocol are actually two independent executions
of the same semi-honest protocol. Their executions can be
overlapped, with both parties simultaneously running the
execution where they are the generator and the one where
they are the evaluator as two separate threads executing
in parallel. Since the workload for the different roles is
different, this has additional beneﬁts. Because the generator
must perform four encryptions to generate each garbled
table, while the evaluator only has to perform a single
decryption, the workload for the party acting as the generator
is approximately four times that of the evaluator. During
normal pipelined execution, this means the circuit evaluator
is idle most of the time. With simultaneous dual execution,
however, both parties have the same total amount of work
to do, and nearly all the previously idle time can be used
usefully.
B. Experimental Setup
Hardware & Software. The experiments are done on two
standard Dell boxes, each equipped with an Intel R(cid:13) CoreTM 2
Duo E8400 3GHz processor, 8 GB memory. They are
connected with a 100 Mbps LAN. Both boxes are running
Linux 3.0.0-12 (64 bit). The JVM version we used is
280
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:48:10 UTC from IEEE Xplore.  Restrictions apply. 
Sun R(cid:13)JavaTM1.6 SE. Our implementation is available under
an open source license from http://www.MightBeEvil.com.
Security Parameters. We use 80-bit nonces to represent
wire labels. In our implementation of the Naor-Pinkas OT
protocol, we use an order-q cyclic subgroup of Z∗
p where
|p| = 1024 and |q| = 160. For the implementation of OT
extension, we used k = 80 and 80-bit symmetric keys. Our
security parameters conform to the ultra-short security level
recommended by NIST [2].
Applications. We demonstrate the effectiveness of
the
DualEx protocol with several secure two-party computation
applications including private set intersection (PSI), which
enables computing the intersection of two secret sets without
revealing them, secure edit distance (ED), which computes
the edit distance between two secret strings, and private
AES encryption, where the key and message are supplied by
different entities and kept secret throughout the ciphering.
These applications are representative of commonly studied
privacy-preserving applications in the literature and were
selected for easy performance comparison. Our implemen-
tations are based on the framework of Huang et al. [16, 15].
C. Results
Figure 6 summarizes the running time for the three appli-
cations running under different settings. The PSI instance is
computed over two sets each containing 4096 32-bit num-
bers using the Sort-Compare-Shufﬂe with Waksman Network
(SCS-WN) protocol [15]. The edit distance is calculated
from two strings each having 200 8-bit characters. The
AES instance is executed in 128-bit key size mode, with
100 iterations. The measurements are the average time over
20 runs of each protocol with randomly generated private
inputs (of course, in a secure computation protocol, the
running time cannot depend on the actual input values since
all operations must be data-independent). We compare our
results for DualEx protocols with the results for the best
known semi-honest protocols [16, 15], which uses a single
garbled circuit execution using the same framework upon
which our DualEx protocols are built.
The measurements include time spent on direct transfer
of wire labels, the online phase of oblivious transfer, circuit
generation and evaluation, and secure validity test. The time
used to initialize the circuit structure and oblivious transfer
is not included since these are one-time costs that can be
performed off-line.
For symmetric input applications (PSI and ED), we ob-
serve the bandwidth cost of dual execution protocols is
exactly twice of that for semi-honest protocols. The running
time of DualEx protocols running on a dual-core hardware
is only slightly higher than that for the corresponding semi-
honest protocol. All of the work required for the second
execution is essentially done simultaneously with the ﬁrst
execution using the otherwise idle core. The only additional
overhead is the very inexpensive equality test at the end of
the protocol.
On the other hand, for asymmetric input applications like
Figure 6. Time costs comparing to semi-honest protocols.
AES, the dual execution protocol appears to be slower. The
reason is that in the semi-honest settings the party holding
the message is always designated the circuit generator such
that the more expensive oblivious transfers need only to
be used for the encryption key (which is shorter than the
message). In the DualEx protocol every input bit needs to
be obliviously transferred once. Thus, it runs slower than its
semi-honest version deployed in favor of using less OTs.
We do not include the time required to compute the 80
“base” OTs (about 12 seconds) in the timing measurements,
since this is a one-time, ﬁxed cost that can be pre-computed
independent of the actual function to be computed.
Although our implementation is programmed explicitly
in two Java threads, we have also run it using a single
core for fair comparisons. We used the same software and
hardware setup but the processes are conﬁned to be run
on a single core using the taskset utility command.
The corresponding results are shown as the third column
in Figure 6. Note that the added overhead is only 42%–
47% than a semi-honest run even if two semi-honest runs
are included in the dual execution protocol. Recall
that
in the semi-honest garbled circuit protocol, the point-and-
permute [29] technique sets the workload ratio between the
generator and the evaluator to four to one, because the
evaluator needs to decrypt only one of the four entries in
a garbled truth table. Moreover, garbled-row-reduction [34]
optimization brings this ratio down to about 3, since only
3 out of 4 entries in a garbled truth table needs to be
transmitted. Therefore, should the overhead of thread-level
context switch and interferences are ignored, the slowdown
factor of dual execution will be about of 33%. (We assume
the network bandwidth is not the bottleneck, which is true on
a wired LAN.) Our experimental results actually show that
about another 15% of time is lost due to the interferences
between the two threads.
The scale of the circuits used in our experiments above is
already well beyond what has been achieved by state-of-art
maliciously-secure secure two-party computation prototypes.
However, to fully demonstrate the memory efﬁciency of
281
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:48:10 UTC from IEEE Xplore.  Restrictions apply. 
0 10 20 30 40 50 60 70 80 90 PSI (4096) ED (200x200) AES (100) Time (seconds) Semi-honest DualEx (dual-core) DualEx (single-core) map).
The delayed revelation modiﬁcation prevents the semantic
values from being learned at the end of each semi-honest
protocol execution, and supports the two protocol variations
discussed next for revealing the semantic values in a way
that ensures a limited notion of fairness.
A. DualEx-based Equality Test
if it
Our goal is to prevent an adversary from learning the
output
is caught cheating by the equality test. To
achieve this, we introduce a pre-emptive secure equality-test
protocol that is done before output-wire label interpretation.
In addition, compared to the secure equality test used in the
basic DualEx protocol (Section III), the test here has to start
from output-wire labels (as opposed to be able to use the
previously-revealed outputs).
The goal of the pre-emptive equality test
is to com-