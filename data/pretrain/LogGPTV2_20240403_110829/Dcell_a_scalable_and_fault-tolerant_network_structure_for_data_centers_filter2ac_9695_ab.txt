fully connected with every other virtual node to form a
complete graph. Moreover, since each DCell0 has n inter-
DCell0 links, a DCell1 can only have n + 1 DCell0s, as
illustrated in Figure 1.
For a level-2 or higher DCellk, it is constructed in the
If we have
same way to the above DCell1 construction.
built DCellk−1 and each DCellk−1 has tk−1 servers, then
we can create a maximum tk−1 + 1 of DCellk−1s. Again
we treat each DCellk−1 as a virtual node and fully connect
these virtual nodes to form a complete graph. Consequently,
the number of DCellk−1s in a DCellk, denoted by gk, is
tk−1 + 1. The number of servers in a DCellk, denoted by tk,
is tk−1(tk−1 + 1). The number of DCellk−1s in a DCellk,
(i.e., gk), and the total number of servers in a DCellk (i.e.,
tk) are
gk = tk−1 + 1
tk = gk × tk−1
for k > 0. DCell0 is a special case when g0 = 1 and t0 = n,
with n being the number of servers in a DCell0.
3.2 BuildDCells: the Procedure
To facilitate the DCell construction, each server in a DCellk
is assigned a (k + 1)-tuple [ak, ak−1, ··· , a1, a0], where
ai  0)
as the preﬁx to indicate the DCelli this node belongs to.
Each server can be equivalently identiﬁed by a unique ID
uidk, taking a value from [0, tk). The mapping between
(cid:80)k
a unique ID and its (k + 1)-tuple is a bijection. The ID
uidk can be calculated from the (k + 1)-tuple using uidk =
j=1{aj × tj−1}, and the (k + 1)-tuple can also be
a0 +
derived from its unique ID.
A server in DCellk is denoted as [ak, uidk−1], where ak is
the DCellk−1 this server belongs to and uidk−1 is the unique
ID of the server inside this DCellk−1.
The recursive DCell construction procedure BuildDCells
Theorem 2. The bisection width of a DCellk is larger
tk
4 logn tk
than
for k > 0.
The theorem can be proven by showing the bisection of
DCell is larger than
times of the bisection of its em-
bedding directed complete graph. The proof simply follows
the techniques in Section 1.9 of [12].
2tklogntk
1
n
4
5
6
4
5
6
k
2
2
2
3
3
3
tk
420
930
1,806
176,820
865,830
3,263,442
Shortest-path DCellRouting
stdev
mean
1.42
4.87
5.22
1.33
1.25
5.48
2.05
9.96
1.91
10.74
11.31
1.79
stdev mean
1.27
1.23
1.18
1.64
1.59
1.55
5.16
5.50
5.73
11.29
11.98
12.46
4. ROUTING IN A DCELL
Routing in a DCell-based DCN cannot use a global link-
state routing scheme since DCell’s goal is to interconnect up
to millions of servers. The hierarchical OSPF [15] is also
not suitable since it needs a backbone area to interconnect
all the other areas. This creates both bandwidth bottleneck
and single point failure.
In this section, we propose our DCell Fault-tolerant Rout-
ing protocol (DFR), a near-optimal, decentralized routing
solution that eﬀectively exploits the DCell structure and can
eﬀectively handle various failures (due to hardware, soft-
ware, and power problems), which are common in data cen-
ters [3, 8]. We start with a routing scheme without failures
and a broadcast scheme, on which DFR is built.
4.1 Routing without Failure
4.1.1 DCellRouting
DCell uses a simple and eﬃcient single-path routing al-
gorithm for unicast by exploiting the recursive structure of
DCell. The routing algorithm, called DCellRouting, is shown
in Figure 3. The design of DCellRouting follows a divide-
and-conquer approach. Consider two nodes src and dst that
are in the same DCellk but in two diﬀerent DCellk−1s.
When computing the path from src to dst in a DCellk,
we ﬁrst calculate the intermediate link (n1, n2) that inter-
connects the two DCellk−1s. Routing is then divided into
how to ﬁnd the two sub-pathes from src to n1 and from n2
to dst. The ﬁnal path of DCellRouting is the combination
of the two sub-pathes and (n1, n2).
/* src and dst are denoted using the (k + 1)-tuples
src = [sk, sk−1, · · · , sk−m+1, sk−m, · · · , s0]
dst = [dk, dk−1, · · · , dk−m+1, dk−m, · · · , d0]*/
DCellRouting (src, dst)
pref =GetCommPreﬁx(src, dst);
m = len(pref );
if (m == k) /*in the same DCell0*/
return (src, dst);
(n1, n2) = GetLink(pref, sk−m, dk−m);
path1 = DCellRouting(src, n1);
path2 = DCellRouting(n2, dst);
return path1 + (n1, n2) + path2;
Figure 3: Pseudocode for routing in a DCellk when
there is no failure.
In Figure 3, GetCommP ref ix returns the common preﬁx
of src and dst and GetLink calculates the link that intercon-
nects the two sub-DCells. The link can be directly derived
from the indices of the two sub-DCells. Let sk−m and dk−m
(sk−m  n2k
from Theorem 1. One
might conjecture that 2k+1−1 is the exact diameter of DCell.
This, however, is not true. We have two counter-intuitive
facts on DCellRouting and DCell diameter:
• DCellRouting is not a shortest-path routing scheme.
It can be shown by the following example. For a
DCell2 with n = 2 and k = 2, the shortest path be-
tween nodes [0,2,1] and [1,2,1] is ([0,2,1], [6,0,0], [6,0,1],
[1,2,1]) with length 3. The path using DCellRouting
is ([0,2,1], [0,2,0], [1,0,0], [0,0,0], [1,0,0], [1,0,1], [1,2,0],
[1,2,1]) with length 7.
• 2k+1−1 is not a tight bound for the diameter of DCell.
For a DCell with n = 2 and k = 4, the diameter should
be 27 rather than 24+1−1 = 31. However, the diameter
of a DCell is 2k+1 − 1 when k  i > 0 and
(cid:81)k
σk = tk−1.
σ0 = tk −(cid:80)k
Theorem 6 implies that, the number of nodes in Group0 is
i=1 σk. The proof of Theorem 6 also shows how
to compute the set of nodes for each Groupi(0 ≤ i ≤ k).
When src communicates with m other nodes, it can pick
a node from each of Group0, Group1, etc. This way, the
maximum aggregate bandwidth at src is min(m, k +1) when
assuming the bandwidth of each link as one.
When multi-path routing is used, we can show that the
maximum bandwidth between any two nodes in a DCellk
is k + 1.
It also shows that DCell provides high network
capacity though we do not use multi-path routing in this
work.
4.2 Broadcast
A straightforward approach to broadcast is not fault tol-
erant: From src to all the other nodes, the approach con-
structs a spanning tree and then propagates broadcast mes-
sages along the tree. The scheme minimizes the number of
forwarding messages, but is vulnerable to failures. When
one intermediate node fails, the sub-tree under that node
will not receive the broadcast message.
To address the above issue, we introduce DCellBroadcast,
a simple yet robust broadcast scheme. In DCellBroadcast,
a sender delivers the broadcast packet to all its k + 1 neigh-
bors when broadcasting a packet in a DCellk. Upon receiv-
ing a broadcast packet, a receiver ﬁrst checks whether this
packet has been received before. The receiver drops a du-
plicate packet but broadcasts a new packet to its other k
links. DCellBroadcast is fault-tolerant in that a broadcast
packet can reach all the receivers as long as the network is
connected.
In DCellBroadcast, we limit the broadcast scope by en-
coding a scope value k into each broadcast message. The
message is broadcasted only within the DCellk network that
contains the source node. Since the diameter of DCellk is at
most 2k+1 − 1, a broadcast message needs at most 2k+1 − 1
steps to reach all the nodes in DCellk.
4.3 Fault-tolerant Routing
DFR is a distributed, fault-tolerant routing protocol for
DCell networks without global link state.
It uses DCell-
Routing and DCellBroadcast as building blocks. DFR han-
dles three types of failures: server failure, rack failure, and
link failure. Rack failure occurs when all the machines in
a rack fail (e.g., due to switch or power outage). Link fail-
ure is a basic one since all the failures result in link failure.
Hence, link failure handling is a basic part of DFR. DFR
uses three techniques of local reroute, local link-state, and
jump-up to address link failure, server failure, and rack fail-
ure, respectively. We now present the three techniques and
then describe DFR.
4.3.1 Local-reroute and Proxy
As shown in Section 4.1, DCellRouting is simple and its
performance is close to the shortest-path routing. This mo-
tivated us to introduce local-reroute to bypass failed links
in DCellRouting. Eﬀectively, local-reroute makes only local
decisions to reroute packets.
Local-reroute is best illustrated by the following example.
Let nodes src and dst be in the same DCellk. We compute
a path from src to dst using DCellRouting. Now assume
an intermediate link (n1, n2) has failed. Local-reroute is
performed at n1 as follows.
It ﬁrst calculates the level of
(n1, n2), denoted by l. Then n1 and n2 are known to be