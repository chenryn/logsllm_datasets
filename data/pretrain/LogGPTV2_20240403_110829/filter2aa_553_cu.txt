一般而言，time()接受的参数是一个 time_t 类型对象的地址，而时间值
就储存在传入的地址上。当然，也可以传入空指针（0）作为参数，这种情
况下，只能通过返回值机制来提供值。
可以把这个技巧应用于标准的ANSI C函数srand()和rand()中。如果使用
这些函数，要在文件中包含stdlib.c头文件。实际上，既然已经明白了
srand1()和rand1()如何使用内部链接的静态变量，你也可以使用编译器提供
的版本。我们将在下一个示例中这样做。
900
12.3 掷骰子
我们将要模拟一个非常流行的游戏——掷骰子。骰子的形式多种多样，
最普遍的是使用两个6面骰子。在一些冒险游戏中，会使用5种骰子：4面、6
面、8面、12面和20面。聪明的古希腊人证明了只有5种正多面体，它们的所
有面都具有相同的形状和大小。各种不同类型的骰子就是根据这些正多面体
发展而来。也可以做成其他面数的，但是其所有的面不会都相等，因此各个
面朝上的几率就不同。
计算机计算不用考虑几何的限制，所以可以设计任意面数的电子骰子。
我们先从6面开始。
我们想获得1～6的随机数。然而，rand()生成的随机数在0～
RAND_MAX之间。RAND_MAX被定义在stdlib.h中，其值通常是
INT_MAX。因此，需要进行一些调整，方法如下。
1.把随机数求模6，获得的整数在0～5之间。
2.结果加1，新值在1～6之间。
3.为方便以后扩展，把第1步中的数字6替换成骰子面数。
下面的代码实现了这3个步骤：
#include  /* 提供rand()的原型 */
int rollem(int sides)
{
int roll;
roll = rand() % sides + 1;
return roll;
901
}
我们还想用一个函数提示用户选择任意面数的骰子，并返回点数总和。
如程序清单12.11所示。
程序清单12.11 diceroll.c程序
/* diceroll.c -- 掷骰子模拟程序 */
/* 与 mandydice.c 一起编译 */
#include "diceroll.h"
#include 
#include       /* 提供库函数 rand()的原型 */
int roll_count = 0;      /* 外部链接 */
static int rollem(int sides)  /* 该函数属于该文件私有 */
{
int roll;
roll = rand() % sides + 1;
++roll_count;       /* 计算函数调用次数 */
return roll;
}
int roll_n_dice(int dice, int sides)
{
902
int d;
int total = 0;
if (sides 
#include     /* 为库函数 srand() 提供原型 */
#include      /* 为 time() 提供原型      */
#include "diceroll.h"   /* 为roll_n_dice()提供原型，为roll_count变量
提供声明 */
int main(void)
{
int dice, roll;
int sides;
int status;
srand((unsigned int) time(0)); /* 随机种子 */
printf("Enter the number of sides per die, 0 to stop.\n");
while (scanf("%d", &sides) == 1 && sides > 0)
{
printf("How many dice?\n");
if ((status = scanf("%d", &dice)) != 1)
{
905
if (status == EOF)
break;       /* 退出循环 */
else
{
printf("You should have entered an integer.");
printf(" Let's begin again.\n");
while (getchar() != '\n')
continue;   /* 处理错误的输入 */
printf("How many sides? Enter 0 to stop.\n");
continue;       /* 进入循环的下一轮迭代 */
}
}
roll = roll_n_dice(dice, sides);
printf("You have rolled a %d using %d %d-sided dice.\n",
roll, dice, sides);
printf("How many sides? Enter 0 to stop.\n");
}
printf("The rollem() function was called %d times.\n",
roll_count);     /* 使用外部变量 */
906
printf("GOOD FORTUNE TO YOU!\n");
return 0;
}
要与包含程序清单12.11的文件一起编译该文件。可以把程序清单
12.11、12.12和12.13都放在同一文件夹或目录中。运行该程序，下面是一个
输出示例：
Enter the number of sides per die, 0 to stop.
6
How many dice?
2
You have rolled a 12 using 2 6-sided dice.
How many sides? Enter 0 to stop.
6
How many dice?
2
You have rolled a 4 using 2 6-sided dice.
How many sides? Enter 0 to stop.
6
How many dice?
2
907
You have rolled a 5 using 2 6-sided dice.
How many sides? Enter 0 to stop.
0
The rollem() function was called 6 times.
GOOD FORTUNE TO YOU!
因为该程序使用了srand()随机生成随机数种子，所以大多数情况下，即
使输入相同也很难得到相同的输出。注意，manydice.c中的main()访问了定
义在diceroll.c中的roll_count变量。
有3种情况可以导致外层while循环结束：side小于1、输入类型不匹配
（此时scanf()返回0）、遇到文件结尾（返回值是EOF）。为了读取骰子的
点数，该程序处理文件结尾的方式（退出while循环）与处理类型不匹配
（进入循环的下一轮迭代）的情况不同。
可以通过多种方式使用roll_n_dice()。sides等于2时，程序模仿掷硬
币，“正面朝上”为2，“反面朝上”为1（或者反过来表示也行）。很容易修改
该程序单独显示点数的结果，或者构建一个骰子模拟器。如果要掷多次骰子
（如在一些角色扮演类游戏中），可以很容易地修改程序以输出类似的结
果：
Enter the number of sets; enter q to stop.
18
How many sides and how many dice?
6 3
Here are 18 sets of 3 6-sided throws.
908
12 10 6 9 8 14 8 15 9 14 12 17 11 7 10
13 8 14
How many sets? Enter q to stop.
q
rand1()或 rand()（不是 rollem()）还可以用来创建一个猜数字程序，让
计算机选定一个数字，你来猜。读者感兴趣的话可以自己编写这个程序。
909
12.4 分配内存：malloc()和free()
我们前面讨论的存储类别有一个共同之处：在确定用哪种存储类别后，
根据已制定好的内存管理规则，将自动选择其作用域和存储期。然而，还有
更灵活地选择，即用库函数分配和管理内存。
首先，回顾一下内存分配。所有程序都必须预留足够的内存来储存程序
使用的数据。这些内存中有些是自动分配的。例如，以下声明：
float x;
char place[] = "Dancing Oxen Creek";
为一个float类型的值和一个字符串预留了足够的内存，或者可以显式指
定分配一定数量的内存：
int plates[100];
该声明预留了100个内存位置，每个位置都用于储存int类型的值。声明
还为内存提供了一个标识符。因此，可以使用x或place识别数据。回忆一
下，静态数据在程序载入内存时分配，而自动数据在程序执行块时分配，并
在程序离开该块时销毁。
C 能做的不止这些。可以在程序运行时分配更多的内存。主要的工具是
malloc()函数，该函数接受一个参数：所需的内存字节数。malloc()函数会找
到合适的空闲内存块，这样的内存是匿名的。也就是说， 
malloc()分配内
存，但是不会为其赋名。然而，它确实返回动态分配内存块的首字节地址。
因此，可以把该地址赋给一个指针变量，并使用指针访问这块内存。因为
char表示1字节，malloc()的返回类型通常被定义为指向char的指针。然而，
从ANSI C标准开始，C使用一个新的类型：指向void的指针。该类型相当于
一个“通用指针”。malloc()函数可用于返回指向数组的指针、指向结构的指
针等，所以通常该函数的返回值会被强制转换为匹配的类型。在ANSI 
C
中，应该坚持使用强制类型转换，提高代码的可读性。然而，把指向 
void
910
的指针赋给任意类型的指针完全不用考虑类型匹配的问题。如果 malloc()分
配内存失败，将返回空指针。
我们试着用 malloc()创建一个数组。除了用 malloc()在程序运行时请求
一块内存，还需要一个指针记录这块内存的位置。例如，考虑下面的代码：
double * ptd;
ptd = (double *) malloc(30 * sizeof(double));
以上代码为30个double类型的值请求内存空间，并设置ptd指向该位置。
注意，指针ptd被声明为指向一个double类型，而不是指向内含30个double类
型值的块。回忆一下，数组名是该数组首元素的地址。因此，如果让ptd指
向这个块的首元素，便可像使用数组名一样使用它。也就是说，可以使用表
达式ptd[0]访问该块的首元素，ptd[1]访问第2个元素，以此类推。根据前面
所学的知识，可以使用数组名来表示指针，也可以用指针来表示数组。
现在，我们有3种创建数组的方法。
声明数组时，用常量表达式表示数组的维度，用数组名访问数组的元
素。可以用静态内存或自动内存创建这种数组。
声明变长数组（C99新增的特性）时，用变量表达式表示数组的维度，
用数组名访问数组的元素。具有这种特性的数组只能在自动内存中创建。
声明一个指针，调用malloc()，将其返回值赋给指针，使用指针访问数
组的元素。该指针可以是静态的或自动的。
使用第2种和第3种方法可以创建动态数组（dynamic array）。这种数组
和普通数组不同，可以在程序运行时选择数组的大小和分配内存。例如，假
设n是一个整型变量。在C99之前，不能这样做：
double item[n]; /* C99之前：n不允许是变量 */
但是，可以这样做：
911
ptd = (double *) malloc(n * sizeof(double)); /* 可以 */
如你所见，这比变长数组更灵活。
通常，malloc()要与free()配套使用。free()函数的参数是之前malloc()返
回的地址，该函数释放之前malloc()分配的内存。因此，动态分配内存的存
储期从调用malloc()分配内存到调用free()释放内存为止。设想malloc()和
free()管理着一个内存池。每次调用malloc()分配内存给程序使用，每次调用
free()把内存归还内存池中，这样便可重复使用这些内存。free()的参数应该
是一个指针，指向由 malloc()分配的一块内存。不能用 free()释放通过其他
方式（如，声明一个数组）分配的内存。malloc()和free()的原型都在stdlib.h
头文件中。
使用malloc()，程序可以在运行时才确定数组大小。如程序清单12.14所
示，它把内存块的地址赋给指针 
ptd，然后便可以使用数组名的方式使用
ptd。另外，如果内存分配失败，可以调用 