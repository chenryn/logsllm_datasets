intermittent or permanent  fault. Some faults  will cause the 
processor  to  crash  completely,  while  other  could  make  it 
execute code in an erratic way. 
Software-based fault tolerance mechanisms are primarily 
intended for handling device-level faults  which i)  manifest 
as single or multiple bit errors in the processor’s instruction 
set architecture (ISA) registers (or main memory locations), 
and  ii)  do  not  severely  affect  the  processor’s  ability  to 
execute code.  
We have chosen to evaluate our mechanisms using test 
port-based fault injection via a Nexus debug interface on a 
physical computer. This restricts our evaluation to injecting 
bit errors in the ISA-registers and main memory locations.   
So what type of error model should one use in this type 
of evaluations? For real faults we can expect a variation of 
single  and  multiple  bit  errors  to  occur.  Unfortunately,  the 
issue of how to model the occurrence of multiple bit errors 
in ISA-registers and main memory is still an open research 
question.  Hence,  there  is  currently  no  commonly  agreed 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:29:31 UTC from IEEE Xplore.  Restrictions apply. 
305error model for how to inject multiple bit errors in this type 
of fault injection experiments.  
Consequently,  like  in  many  similar  studies,  we  use  the 
single  bit-flip  error  model  to  evaluate  the  effectiveness  of 
our  software-based  fault  tolerance  mechanisms.  While  this 
error model is known not to be fully representative of many 
real  faults,  it  is  recognized  as  a  reasonable  engineering 
approximation suitable for benchmarking (i.e., comparative 
evaluation) of fault tolerance mechanisms.  
The  fault  injection  campaigns  were  executed  using  the 
GOOFI-2  tool  [14],  which  has  been  developed  in  our 
research group. (From now on  we change our terminology 
regarding  the  meaning  of  the  words  fault  and  errors.  Until 
now,  we  have  used  the  word  fault  primarily  to  denote  the 
root cause of a bit-flip. In the remainder of the paper, a fault 
denotes  a  single  bit  flip  injected  in  a  register  or  main 
memory  location.  More  precisely,  we  define  a  fault  as  a 
time–location  pair,  where  the  time  corresponds  to  one 
execution of a given machine instruction (i.e., a point in the 
execution trace), while the location is the position of the bit 
that is being flipped.) 
The  GOOFI-2  tool  includes  a  pre-injection  analysis 
plug-in  [15]  that  we  use  in  our  experiments.  This  plug-in 
excludes all faults that will not be activated by the machine 
program.  It  also  removes redundant  faults,  i.e.,  among  the 
faults that are known to have same impact, only one fault is 
injected. The fault space reduction is between two and five 
orders of magnitude. This allows  us to do exhaustive  fault 
injection  on  the  Fibonacci  application,  and  also  increases 
our chance of detecting rarely activated vulnerabilities with 
the brake-by-wire application.  
However,  the  removal  of  redundant  faults  has  some 
implications if our results are compared with those obtained 
in other studies. When the faults are selected randomly, they 
can  be  injected  in  any  register  or  memory  location  at  any 
time.  In  our  case,  only  registers  or  memory  locations  that 
are  read  by  the  instruction  executed  at  the  selected  time 
point  are  subject  to  fault  injection.  The  program  counter 
(PC-register) is always read when executing an instruction. 
The removal of redundant faults therefore leads to a bias in 
favor of faults injected in the PC-register compared to those 
injected  in  other  registers.  This  causes  our  technique  to 
generate a higher portion of control flow errors compared to 
data  errors,  than  that  obtained  when  using  a  completely 
random fault selection. Also, removing all faults that are not 
activated from the fault space drastically reduces the portion 
of non-effective faults.  
The programs are executed on a single-board computer 
equipped  with  a  MPC565  microcontroller  from  Freescale. 
Faults  are  injected  in  both  registers  and  volatile  memory. 
The registers targeted are the ones that constitute  the  User 
Instruction  Set  Architecture  (UISA).  These  are  general-
purpose  registers,  floating  point  registers,  link  registers, 
condition  register,  integer  exception  registers,  and  counter 
register.  The  faults  injected  in  memory  are  in  the  stack, 
heap, and data segment of the target program. The machine 
code  was  stored  in  non-volatile  memory.  This  part  of  the 
main memory was not subjected to fault injection since our 
fault tolerance mechanisms are not designed to handle such 
faults. 
IV.  FAULT TOLERANCE MECHANISMS  
In  this  section,  we  describe  the  software-based  fault 
tolerance  mechanisms.  As  already  mentioned,  one  is  a 
signature-based control flow checking mechanism that uses 
two signatures to achieve high detection coverage. We call 
this  mechanism  Double  Signature  Control  Flow  Checking, 
or DS-CFC. It is an enhanced version of a single signature 
control  flow  checking  mechanism,  which  we  presented  in 
[11].  
The  second  mechanism  provides  both  error  detection  and 
error masking. It combines triple time redundant execution 
and  majority  voting  with  forward  recovery  to  mask  and 
detect  errors.  We  call 
this  mechanism  Triple  Time 
Redundant execution with Forward Recovery, or TTR-FR. 
In  the  following  subsections,  we  sketch  how  the 
mechanisms  are  implemented  in  AspectC++.  The  exact 
same  algorithms  are  used  when  the  mechanisms  are 
implemented  in  C,  but  they  are  then  incorporated  with  the 
target program code by manual programming. 
A.  Double signature control flow checking (DS-CFC) 
The  DS-CFC  mechanism  utilizes  the  well  known 
principal  of  signature-based  control  flow  checking  [3].  It 
aims  to  detect  illegal  branches,  i.e.,  branches  that  are  not 
defined  in  the  machine  code.  Signature-based  control  flow 
checking  divides  a  program  into  a  number  of  blocks,  and 
inserts  checks  which  verify  that  an  entry  to  a  block  is 
eventually followed by an exit from the same block. A code 
block  can  be  defined  with  different  granularity.  The  DS-
CFC  mechanism  presented  here  uses  function  bodies  as 
blocks.  In  traditional  mechanisms  two  identical  identifiers 
that are unique to each block are placed at the beginning and 
at the end of the block. When the execution enters a block, 
the first identifier is stored, and when it exits the block, the 
stored  identifier  is  compared  with  the  second  identifier.  If 
they do not  match, a control  flow error has been detected. 
The novel part of the DS-CFC mechanism is that it uses two 
sets  of  identifiers  instead  of  one.    Initial  fault  injection 
experiments  with  a  single  signature  mechanism  revealed 
that  it  failed  to  detect  a  number  of  inter-function  control 
flow  errors.  Most  such  errors  are  detected  by  the  DS-CFC 
mechanism due to its use of two signatures. 
Fig.  1  shows  the  implementation  of  the  DS-CFC 
mechanism  using  AspectC++.  The  first  advice  is  executed 
just before each function call and pushes a signature unique 
to that function on a stack. The second advice is executed as 
the first thing of the function and asserts that the  value on 
top  of  the  stack  is  equal  to  the  signature  of  the  executing 
function.  The  third  advice  is  executed  at  the  end  of  each 
function and makes a similar assertion as the second advice.  
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:29:31 UTC from IEEE Xplore.  Restrictions apply. 
306advice FunctionCall() : before() { 
  push((int)JoinPoint::FID); 
} 
advice FunctionExe() : before() { 
  if(viewtos()!=(int)JoinPoint::FID)  
    FT_error_code = 3; 
} 
advice FunctionExe() : after() { 
  if(pop()!=(int)JoinPoint::FID)  
    FT_error_code = 3; 
    push((int)JoinPoint::FID+NR_OF_FUNCTIONS); 
} 
advice FunctionCall() : after() { 
if(pop()!=(int)JoinPoint::FID+NR_OF_FUNCTIONS) 
    FT_error_code = 3; 
}
Figure 1.   DS-CFC implementation 
Additionally it replaces the value on the stack with another 
signature that should also be unique to the same function.  
Finally,  the  last  advice  executes  after  a  function  has 
returned, and asserts that the value on the stack is equal to 
the  second  signature  that  should  have  been  pushed  before 
returning  from  the  function.  Since  our  aspect  weaver  can 
only  generate  one  unique  signature  for  each  function,  we 
add  a  large  constant  that  is  greater  than  the  number  of 
functions  in  the  program  to  the  function  id  in  order  to 
produce  a  second  id.  Apart  from  the  checks  within  the 
advice  code  the  stack  implementation  has  overflow  and 
underflow checks that signal an error in case of such events.  
We have earlier presented a similar signature-based control 
flow checking mechanism that uses a single signature [11]. 
Apart  from  using  two  signatures,  the  implementation 
presented  here  also  differs  in  that  it  uses  two  call  advices 
(the  first  and  last  advices  in  Fig.  1)  whereas  the  older 
mechanism  use  one  advice  declared  as  “around”.  The  two 
implementations  provide  the  same  functionality,  but  the 
AspectC++  weaver  produces  less  overhead  when  two  call 
advices is used instead of a single around advice.  
B.  Triple time-redundant execution with forward recovery 
(TTR-FR) 
In a second set of experiments we evaluated the TTR-FR 
mechanisms.  This  mechanism  executes  the  code  of  the 
target program three times and votes between the results. If 
a run has produced a different output, the two others win the 
vote.  Recovery  is  then  done  by  replacing  the  state  of  the 
losing  run  with  that  of  a  winning  run.  If  all  three  runs 
produce different results, an unrecoverable error is signaled.   
Fig. 2 shows the call advice that is executed each time a 
call is made to the top level function. Note that by top level 
function  we  do  not  refer  to  the  main()  function  of  the 
program,  but  to  the  top  level  function  of  the  function  call 
tree  that  should  be  protected.   The  function  is  called  three 
times   using  the   proceed   statement.   Before  each  call  a  
advice call(topLevelFunction()):around(){
  FT_current_run = 15; 
  tjp->proceed(); 
  JoinPoint::Result result1 = *tjp->result(); 
  FT_current_run = 240;                 
  tjp->proceed(); 
  JoinPoint::Result result2 = *tjp->result();    
  FT_current_run = 3840;                   
  tjp->proceed(); 
  if (result1 == result2) { 
    if(result1 != *tjp->result()) { 
      FT_error_code = 1; 
      ... // Do recovery on third data set 
      *tjp->result() = result2;            
    }                      
  }else { 
    FT_error_code = 1; 
    if(result1 == *tjp->result()) { 
      ... // Do recovery on second data set 
    }else if(result2 == *tjp->result()) {   
      ... // Do recovery on first data set 
    }else{ 
      FT_error_code = 2; 
    }              
 }
Figure 2.   Call advice for the TTR-FR implementation 
variable called FT_current_run is set to a unique value. This 
variable is later used to identify  which data set the current 
run  should  operate  on.  Any  values  can  be  used  for 
identifying the run, but the bit distance between them should 
be  greater  than  the  number  of  bits  anticipated  to  be 
corrupted by a fault. This is an improvement from an earlier 
version of the mechanism presented in [13]. After each run 
the  return  value  of  the  top  level  function  is  copied  to  a 
temporary  variable  before  starting  the  next  run.  After  all 
runs  have  been  executed,  the  results  are  compared  and 
disparities  are  signaled  by  writing  an  error  code  to 
FT_error_code.  If  possible,  the  advice  then  recovers  and 
makes sure that a correct output is returned. 
As mentioned above, each run operates on its own set of 
state  variables.  Hence,  read  and  write  operations  on  these 
have to be surrounded by advices targeting the operation on 
the correct data set.  A global variable is considered to be a 
state variable if it passes data between the call tree of the top 
level  function  and  the  rest  of  the  program,  or  between 
different  iterations  of  the  top  level  function.  Fig.  3  shows 
the  implementation  of  the  set  and  get  advices.  The  set 
advice stores the data in the correct data set when a variable 
is  written, and the  get advice returns data from the correct 
data  set  whenever  a  variable  is  read.  The  extra  data  sets 
have  been  created  by  using  the  slicing  feature  of  the  two 
variants  of  AspectC++  to  append  extra  fields  (value2  and 
value3) to each variable. 
V.  EXPERIMENTAL RESULTS 
This section describes the experimental results obtained 
when running fault injection campaigns on our chosen target 
programs     and     implementations.     Experiments     were 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 18,2021 at 14:29:31 UTC from IEEE Xplore.  Restrictions apply. 
307   
advice set(StateVariables()): around() {
  switch (FT_current_run) {                   
    case 15: 
      tjp->proceed(); 
      break; 
    case 240: 
      ((JoinPoint::Target*)tjp->target())-> 
        value2 = *tjp->source(); 
      break; 
    case 3840: 
      ((JoinPoint::Target*)tjp->target())-> 
        value3 = *tjp->source(); 
      break;      
  }  
} 
advice get(StateVariables()): around() { 
  switch (FT_current_run) {                   
    case 15: 
      tjp->proceed(); 
      break; 
    case 240: 
      *tjp->result() = ((JoinPoint::Target*)  
        tjp->target())->value2; 
      break; 
    case 3840: 
      *tjp->result() = ((JoinPoint::Target*) 
        tjp->target())->value3; 
      break; 
  }      
Figure 3.   Set and get advices for the TTR-FR implementation 
implementation 
executed  for  all  combinations  of  target  programs,  fault 
tolerance  mechanisms, 
languages,  and 
compiler optimization levels as shown in Table II. In all, 29 
different program variants were subjected to fault injection 
by a total of about 550,000 faults. The Fibonacci application 
is  small  enough  that  we  could  do  exhaustive  testing  and 
inject  all  possible  single  bit-flip  faults.  The  brake-by-wire 
application  is  too  large  for  this  to  be  feasible  and  we 
therefore  injected  10,000  faults  per  campaign  for  this 
application.  This  is  enough  to  give  high  confidence  in  the 
results  obtained.  The  95%  confidence  interval  for  the 
aggregated  measures  presented  in  this  section  is  between 
±0.30% and ±0.44%.   
The result of each fault injection experiment is classified 
according to one of the classes shown in Table III.  
TABLE II.  
VARIANTS USED FOR EXPERIMENTS 
Target applications 
Software 
fault tolerance 
implemented 
Implementation 
languages 
Compiler optimizations 
• 
• 
• 
• 
• 
• 
• 
• 
• 
• 
Fibonacci application 
Brake-by-wire application 
No  software  implemented  fault 
tolerance 
TTR-FR 
DS-CFC  
C 
AspectC++Ext 
AspectC++Opt 
Low (–finline) 
High (–O3 –fno-strict-aliasing)  
TABLE III.  
RESULT CLASSES FOR EXPERIMENTS 
No Effect (NE)
Corrected SW 
(CSW) 
Detected SW 
(DSW) 
Detected HW 
(DHW) 
Time out (TO)
Value Failure (VF)
injected  fault  causes  an  error  which 
No  effect  could  be  observed  on  the  program 
output  and  no  error  detection  mechanism  was 
triggered. 
The 
is 
corrected  by  a  software  mechanism.  The  program 
produces correct output. 
The injected fault causes an error which is detected 
by  a  software  mechanism.  No  attempt  to  recover 
has been made. 
The injected fault causes an error which is detected 
by a hardware exception.  
The program failed to produce an output within a 
defined  time  frame  (The  injected  fault  causes  a 