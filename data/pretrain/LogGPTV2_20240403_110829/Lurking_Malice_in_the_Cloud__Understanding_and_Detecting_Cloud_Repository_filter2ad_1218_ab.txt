ﬁed by unique2, user-assigned keys, that are mapped as sub-domains.
For example, the subdomain aws-publicdatasets.s3.amazonaws.com
identiﬁes Amazon S3 as the cloud platform and aws-publicdatasets
as the user’s cloud bucket and repository. Such name assignment
is labeled as s3.amazonaws.com_aws-publicdatasets throughout
this paper. Also, each bucket is protected by an access control list
conﬁgured by the user to authorize requests for her resources.
In recent years, we have seen an increase in popularity of these
services. A key feature of cloud hosting is built-in site publishing
[?], where the web assets in the bucket can be served directly to
users via ﬁle names in a relative path in the bucket (i.e., cloud URL).
For instance, JavaScript ﬁles hosted in the cloud bucket can be
directly run in the browser. Also, the pay-as-you-go hosting is well
received as an economic and ﬂexible computing solution. As an
example, Google Drive today offers a free web hosting service with
15GB of storage, and an additional 100GB for $1.99/month, and
GoDaddy’s web hosting starts at $1/month for 100GB.
Besides such front-end websites, mainstream cloud providers
today (Amazon S3, Microsoft Azure, Google Drive, etc.) all allow
their customers to store different kinds of web content and other re-
sources in their cloud buckets, serving as back-end repositories that
can be easily accessed by front-end applications (like the website)
and shared across different parties. Figure 2 illustrates an example,
in which the resource owner creates a bucket on the cloud hosting
platform and uploads a script there (x); this resource (i.e., the script)
is made public through a cloud URL, which can be embedded into
any website (y); whenever the site is visited (z), requests will be
generated for fetching the script ({) and delivering it to the visitor’s
browser (|). The bucket in the example is typical of a service repos-
itory, whose resources can be fetched and updated through a cloud
URL: for example, the visitor statistics of a website can be collected
through a link (s3.amazonaws.com/trk.cetrk.com/t.js), which down-
loads a tracking script from s3.amazonaws.com_trk.cetrk.com, a
bucket owned by the tracking website Crazy Egg. This is different
from a “self-serving” bucket, whose resources can only be accessed
by the bucket owner’s sites. Note that our study focuses on abuses
of this type of cloud repositories, regardless of the additional func-
tionalities they may have (e.g., CDNs, DDoS protection, etc.), since
these functionalities do not affect the way the repositories are used
by either legitimate or malicious parties.
Adversary model. In our research, we consider the adversary who
tries to use cloud buckets on legitimate cloud platforms as service
repositories for illicit activities. For this purpose, the attacker could
build her own malicious bucket or compromise legitimate ones,
and store various attack vectors there, including Spam, Phishing,
2The terms repositories and buckets are used interchangeably throughout this paper.
…Cloud'hos*ng'pla/orm's3.amazonaws.com'Bucket'trk.cetrk.com)t.js-①'①'③'④'⑤'②'…………Resource'owner'Crazy-Egg-Website'Cloud'URL'1543Table 1: Summary results of the seed dataset.
# of
buckets
Badset
Goodset
100
300
# of
linked
websites
12,468
128,681
# of
average
linked
website
133
864
# of
redirection
paths
468,480
2,659,304
crawling the sites found to contain links to the cloud in the past.
We built the site list with the help of Common Crawl [?], a public
big data project that crawls about 5 billion webpages each month
through a large-scale Hadoop-based crawler and maintains lists
of the crawled websites and their embedded links. Searching the
Common Crawl [?] dataset, collected in February 2015, for the
websites loading content from the 400 clean and malicious buckets
identiﬁed above, we found 141,149 websites, were used by our
crawler.
Topological features. We ﬁrst inspected the topology of the redi-
rection infrastructure associated with a speciﬁc bucket. Such an
infrastructure is a collection of redirection paths, with each node
being a Fully Qualiﬁed Domain Name (FQDN). On each path, the
bucket is either a node when it directly participates in a redirec-
tion (e.g., its cloud URL delivers a redirection script to the visitor’s
browser) or simply a passive repository providing resources like pic-
tures to other domains. Figure 3 illustrates examples of redirection
paths leading to two real-world repositories, one for a legitimate
bucket cloudfront.net_d24n15hnbwhuhn and the other for a Bar
s3.amazonaws.com_cicloudfront.
A key observation from our study is that the redirection infras-
tructure leading to a Bar tends to include the features for protecting
the Bar from being detected by web scanners, presumably due to
the fact that the repository is often considered to be a valuable as-
set for the adversary. Speciﬁcally, we found that typically, there
are a few gatekeeper nodes sitting in front of a Bar, serving as
an intermediary to proxy the attempts to get resources from the
Bar. Examples of the gatekeepers include fp125.mediaoptout.com
and its downstream nodes in Figure 3(b). On the topology of such
an infrastructure, these gatekeepers are the hubs receiving a lot of
resource-access connections from entry sites (the ﬁrst node on a redi-
rection path, see Figure 3). Also interestingly, our research shows
that some gatekeepers can access the Bar through multiple paths.
For example, in Figure 3(b), krd.semantichelper.com can either go
straight to s3.amazonaws.com_cicloudfront or take a detour through
p306.atemada.com. This structure could be caused by the cloaking
of the gatekeeper for hiding the Bar, or constructed to maintain ac-
cess to the repository even when nodes (like 1.semantichelper.com)
are down (detected, cleaned, etc.). Note that such a protection struc-
ture does not exist on the paths to a benign repository (Figure 3(a)):
normally, the resources hosted in a repository (e.g., jQuery) is di-
rectly fetched by the website using it, without going through any
redirection; even in the presence of redirections, there will not be
any gatekeeper, not to mention attempts to cloak or build a backup
path.
To identify this unique “protection” structure, we utilize two
collective features: bucket usage similarity (BUS) that captures the
topology involving hubs (gatekeepers) and connection ratio (CR)
that measures the interactivities across different redirection paths
(which point to the existence of cloaking behavior or the attempts
to maintain back-up paths to the Bar). Speciﬁcally, consider a
redirection graph G = (V, E) (as illustrated in Figure 3), where V
is the set of nodes (the FQDNs involved in a redirection) and E is
a set of edges from one node to the next one on individual paths:
E = {ei,j|node i precedes node j on a path}. The BUS is
measured by 1− i
s , where i is the number of immediate predecessor
nodes to a repository (the domains connecting to the repository)
and s is the total number of entries of the repository’s redirection
graph. To ﬁnd out the CR, we ﬁrst remove the bucket b and all
the edges to which it is attached (if they exist) to get another graph
G(cid:48) = G − Gb, where Gb = ({b}, Eb) and Eb = {eb,j}. Note
that each graph G(cid:48) is associated with one bucket. Then, from G(cid:48),
we ﬁnd out the number of connected components n and calculate
CR = 1 − n|V | (see Figure 3 for an example).
Both collective features were found to be discriminative in our
research. Figure 4(a) and 4(b) compare the cumulative distributions
(CDF) of the ratios between Bad and Good sets. As we can see from
the ﬁgures, Bars tend to have higher ratios than benign ones: the
average BUS is 0.87 for the Bars and 0.79 for the legitimate reposito-
ries and the CR is 0.85 for the bad repositories and 0.67 for the good
one. As mentioned earlier, this is caused by the fact that a small set
of gatekeepers nodes are often placed there for protecting the Bars
while the redirection chains towards the good repositories are much
more direct and independent: different organizations typically do
not go through an intermediary to indirectly access the public repos-
itory like jQuery, and even within the same organization, use of such
a resource is often direct. Although there can be exceptions, our
measurement study shows that in general, the structural differences
between malicious and legitimate repositories are stark.
Also, we found that occasionally, a Bar itself may serve as a
gatekeeper, running scripts to hide more valuable attack assets, such
as the attack server or other malicious landing sites. When this
happens, almost always the Bar leads to a small set of successors
on redirection paths (e.g., attack servers, land sites). This is very
different from the redirection performed by the script from a benign
repository, for example, cloudfront.net_d24n15hnbwhuhn. In such
cases, the targets of redirections are often very diverse. Based on this
observation, we further measure the landing similarity, LS = 1− l
s ,
where l is the number of the unique last nodes on the redirection
paths associated with a repository. Again, as illustrated in Fig-
ure 4(c), our study shows that redirection paths involving Bars share
fewer end nodes than legitimate ones, and therefore, the related
redirection graphs (for Bars) have a higher landing similarity (0.94
vs 0.88).
Content and network features.
In addition to their distinctive
topological features, we found that the nodes on the redirection
paths attached to a Bar often exhibit remarkable homogeneity in
their content and network properties. Particularly, for the websites
directly connecting to the repository, we found that they typically
use a small set of templates (like WordPress) to build up their web
pages, include similar DOM positions for script injection, carrying
similar IP addresses or even having the same content management
system (CMS) vulnerabilities, etc. These properties turn out to be
very diverse among those utilizing a legitimate cloud repository.
For example, all websites linking to a Google Drive Bar have their
malicious cloud URL (for injecting a script) placed at the bottom
of the DOM of each website. In another example, we found that
the front-end sites using a Cloudfront Bar actually all include a
vulnerable JCE Joomla extension.
To better understand the diversity of such websites, we try to
compare them according to a set of content and network properties.
In our research, we utilized the properties extracted by WhatWeb [?],
a popular webpage scanner. WhatWeb is designed to identify the
web technologies deployed, including those related to web content
and communication: e.g., CMS, blogging platforms, statistic/ana-
lytics packages, JavaScript libraries, social media plugins, etc. For
example, from the content
1544Figure 3: Example of the redirection infrastructure leading to the legitimate bucket cloudf ront.net_d24n15hnbwhuhn (a) and the
Bar s3.amazonaws.com_cicloudf ront (b), which are in RED color.
(a) Cumulative distribution of bucket us-
age similarity per cloud bucket.
(b) Cumulative distribution of
nected ratio per cloud bucket.
con-
(c) Cumulative distribution of landing
similarity per cloud bucket.
Figure 4: Bars show smaller topological diversity.
we obtain the property p as a key-value pair p = (k, v) =
(wordpress, opensearch), which indicates the website using word-
press plugin opensearch.
From our seed dataset, the scanner automatically extracted 372
keys of 1,596,379 properties, and then we clustered the keys into 15
classes such as Analytics and tracking, CMS and plugin, Meta-data
information, etc., following the categories used by BuiltWith, a web
technology search engine [?]. Some examples of these properties
are presented in Table 2. In addition to these properties extracted
by WhatWeb, we added the following properties to characterize
cloud URLs, including the position of the URL, the order in which
different buckets appear in the web content and the number of cloud
platforms used in a page.
Based on these properties, again we utilized a topological metric
to measure the overall similarity across sites. Speciﬁcally, the rela-
tions among all the sites (connecting to the same bucket) in the same
category (Analytics and tracking, CMS and plugin, etc.) are mod-
eled as a graph G(cid:48) = (V (cid:48), E(cid:48), P ), where V (cid:48) is the set of the web-
sites, which are characterized by a collection of properties P , and
E(cid:48) is the set of edges: E(cid:48) = {ei,j|website i and j share p ∈ P},
that is, both sites having a common property. Over this graph, the
site similarity is calculated as SiS = 1− n|V (cid:48)| . Here n is the number
of connected components in the graph.
In our research, we computed SiS across all the categories summa-
rized from the seed dataset, and compared those with Bars against
those with the legitimate buckets. Again, the sites using Bars are
found to share many more properties and therefore achieve a much
higher similarity value than those linking to a good bucket. This is
likely caused by mass-production of malicious sites using the same
resources (templates, pictures, etc.) provided by a Bar or utilization
of the same exploit tool stored in a Bar for compromising the sites
with the same vulnerabilities. Therefore, such similarity is inherent
to the attack strategies and can be hard to change.
3.2 BarFinder
Design. The design of BarFinder includes a web crawler, a fea-
ture analyzer, and a detector. The crawler automatically scans the
web for cloud buckets (embedded in web content) and then clus-
ters websites according to the buckets they use. From each cluster,
the analyzer constructs a redirection graph and a content graph as
described earlier (Section 3.1), on which it further calculates the
values for a set of collective features including disconnection ratio
api2.amplitude.comcdn.amplitude.comapi2.amplitude.comcdn.amplitude.comjandhyala.com    akamaihd.net_apispringsmartne-a    fp125.mediaoptout.comkrd.semantichelper.com    p306.atemda.com    1.semantichelper.com    s3.amazonaws.com_cicloudfrontcloudfront.net_d24n15hnbwhuhnapi2.amplitude.comcdn.amplitude.com1545Table 2: Examples of content and network features.
Table 3: F-score of features.
Category
Feature
Example
Content
CMS platform information
and their plugin
Meta-data information
CloudURL information
Advertising
Javascript library
Analytics and tracking
Widget
DocInfo technologies
Network
Identity
Cookie
Server framework version
Custom HTTP header
(wordpress, all in one
SEO pack)
(metagenerator,
drupal7)
(position, bottom)
(adsense,
asynchronous)
(JQuery, 1.9.1)
(Google-Analytics,
UA-2410076-31)
(addthis, welcome
(open graph protocol,
bar)
null)
(IP, 216.58.216.78)
(Cookie,
harbor.session)
(Apache, 2.4.12)
(X-hacker, If
youâ ˘A ´Zre..)
(D), bucket usage similarity (B), landing similarity (L) and a series
of content property/network property similarities (S1 ··· Sn) for n
web-technology categories (e.g., analytics and tracking, CMS and
plugin, meta-data information, etc.). The output of this feature anal-
ysis is then passed to the detector, which maintains a model (trained
on the seed dataset) to determine whether a bucket is malicious,
based on its collective features.
Speciﬁcally, the crawler visits each website, inspecting its con-
tent, triggering events, recording the redirection paths it observes
and parsing URLs encountered using the patterns of known cloud