Note that you’ll only be able to patch applications that have been sideloaded, because those applications do not
require valid signatures. Attempts to patch and then replace Original Equipment Manufacturer (OEM) apps will
fail because modification of assemblies or binaries will invalidate their signatures. Modifying a binary or
assembly, repackaging it into an XAP or APPX file, and then sideloading it is feasible, however.
To gain access to .NET binaries that are installed on your device, you obviously need full filesystem access to the
device, which we discussed how to obtain in Chapter 10.
Each application’s binaries are located at C:\Data\Programs\{GUID}\Install, where {GUID} is the app’s unique
identifier. In Windows Phone 8, assemblies will be DLL files, whereas in Windows 8.1 interesting binaries may
be DLL files and EXE files.
After they’re patched using Reflexil or another tool, you can copy hacked assemblies back onto the device’s
filesystem and despite being modified, they will execute as expected.
To serve as an example, consider an application that stores data that originated from an Internet server speaking
some unknown binary protocol. The data has been parsed and processed into something useful to the app. At
this point, we know from the reversed C# code that the app stores the data in an AES-encrypted form in a file in
its local folder. The key used to encrypt the data was derived from data that was received from the server via this
completely unknown protocol.
To get the plaintext form of the data written to disk, reverse engineering the proprietary protocol that’s being
used and studying how the app is parsing the data received presumably would be necessary in any case. This
annoying and time-consuming obstacle is one most researchers could ideally do without.
In this sort of scenario, your first thought is to simply patch the application so that the parsed and processed
data is never encrypted in the first place, because this will give you what you want: the data in the file in its
plaintext form.
Through initial inspection of the application in .NET reflector, there is an obviously named method that is
disassembled to the following:
public int EncryptAndSaveData(byte[] dataBlob, byte[] key)
{
dataBlob = this.EncryptBlob(dataBlob, key);
this.SaveDataBlob(dataBlob);
return 0;
}
Figure 11.15 shows the output in .NET reflector.
Figure 11.15 EncryptAndSaveData() in .NET reflector
It’s pretty clear what this code does. It appears to call EncryptBlob(), and then save the encrypted data by calling
the SaveDataBlob() method.
It’s quite evident from the recovered code that if the call to EncryptBlob() were simply removed and dataBlob
were just set to a reference of itself, then the interesting plaintext data would be saved to the file instead of
encrypted data, which you want to avoid dealing with.
The next step to take in figuring out how you can indeed remove the call to EncryptBlob() involves taking a look
at the CIL code that Reflexil nicely recovers for you. To do this, go to Tools, and click Reflexil. Figure 11.16
shows the CIL that Reflexil has recovered.
Figure 11.16 Reversed CIL code in .NET reflector and Reflexil
Those familiar with assembly and other intermediate opcode languages (such as for Java) will probably notice
the CIL code’s similarity.
You can fairly easily tell which parts of the disassembly are what you are looking for due to informative method
names. Let’s analyze what’s going on in CIL opcode terms:
On line 02, ldarg.1loads the method argument at index 1 (dataBlob) onto the stack.
On line 03, ldarg.2 loads the method argument at index 2 (key) onto the stack.
On line 04, the EncryptBlob()function is called.
These first three lines are responsible for pushing dataBlob and key to the stack to act as arguments to
EncryptBlob(), which is called on line 04. Note that the arguments are pushed in the logical order: dataBlob
first, and key second—contrary to the way call stacks operate in many native environments.
On line 05, starg.s dataBlob tries to save the reference on top of the stack into dataBlob—that is, a
reference to the encrypted data that is being returned by EncryptBlob().
It may quite correctly occur to you that if the EncryptBlob() call is somehow deleted and a reference to the
original plaintext dataBlob contents is at the top of the stack, the instruction at line 05 will quite nicely set
dataBlob to a reference of its own original contents; that is, dataBlob = dataBlob.
To do that, just get rid of the instruction that pushes key to the stack, and remove the call to EncryptBlob().
That way, the starg.s instruction on line 05 will simply set dataBlob with dataBlob (reference-wise)— that is to
say, ldarg.1 is the only push you’re interested in before the call.
Let’s test out this theory. You don’t even need to insert NOP instructions. Reflexil allows you to simply delete
unwanted instructions from the CIL disassembly. Right-click line 01 and click Delete, and then do the same for
line 03 and line 04. (See Figure 11.17.)
Figure 11.17 Deleting an instruction in Reflexil
After deleting ldarg.0, ldarg.2, and call EncryptBlob(), you’re left with only the instructions you want; that is,
dataBlob = dataBlob; SaveDataBlob(dataBlob);. (See Figure 11.18.)
Figure 11.18 Modified CIL code after deleting instructions
Save the changes you’ve made to the assembly by right-clicking on the left-hand side in the assembly explorer;
in the Reflexil submenu, click Save As, and save the file with a unique filename. Right-click the assembly and
click Close Assembly.
Opening the patched assembly, as shown in Figure 11.19, you can see whether the changes came out as you
wanted them to.
Figure 11.19 New disassembly for SaveAndEncryptData() after patching the method
Success! The patched assembly now clearly bypasses the undesired crypto code path.
In patching exercises where you need to insert new instructions or edit existing instructions, you can access the
Edit and Create New functions by right-clicking Reflexil’s CIL viewer. Each function provides a pull-down menu
of instructions and also allows the user to type in instructions by hand. (See Figure 11.20.)
Figure 11.20 Editing an existing instruction in Reflexil
Patching .NET assemblies by hand can be quite tricky, given that you must consider stack states and other
aspects to avoid crashes.
When methods are more complicated and keeping track of stack states and so on is proving difficult,
alternatives exist to patching solely by hand. In fact, Reflexil has some support for patching assemblies with C#
code. That is, users can write code in C#, and Reflexil will compile it to CIL code to allow app patching.
To access this functionality right-click in Reflexil’s CIL display, and then click Replace All With Code.
At this point, you’ll be greeted by a C# code editor which will allow you to modify the app’s code. After you’re
done, click Compile, and assuming the compile goes well, clicking OK will exit the editor and patch the assembly
with the newly generated CIL code. You can save the hacked assembly as before. (See Figure 11.21.)
Figure 11.21 Patching a method in C#
At this point, in the context of a real app, you would copy the modified assembly onto the device in place of the
original (see Chapter 10) and rerun the app as normal, with its new modifications.
This hopefully serves as an example, and not an unrealistic one in many cases. More complex cases may require
further study on CIL, its instructions, and what kind of operands each instruction expects. Detailed information
on CIL and its opcodes are available online, such as at this resource: http://www.codeproject
.com/Articles/362076/Understanding-Common-Intermediate-Language-CIL.
Summary
This chapter aimed to provide a general introduction to identifying vulnerabilities by code review and manual
testing in Windows Phone apps. When carrying out Windows Phone app reviews, the following will hopefully
serve as a checklist for common vulnerability classes to check for:
Firstly, analyze the application for interesting entry points, including IPC endpoints, network interactions,
and interactions with other devices such as Bluetooth and NFC peers
Check for use of insecure (non-SSL/TLS) communications, and ensure that SSL sessions are properly
protected by the process of certificate trust chain validation
Check for vulnerability to HTML and JavaScript injection in WebBrowser and WebView components
Ensure that JavaScript-C# interactions are safe and that components using data communicated to C# in this
way do not make assumptions about the sanity of the data
Analyze the functionality of IPC-like interfaces—protocol handlers and file handlers—and ensure that their
functionalities are securely implemented and cannot be abused or exploited by other apps or via web pages
Ensure that the app does not have DTD parsing enabled such that the app could be vulnerable to file stealing
and denial-of-service attacks due to entity expansion
If a SQLite or SQLite-derived database is used by the app, is the app vulnerable to SQL injection?
Check that file handling is implemented securely, and that directory traversal attacks are not possible
CHAPTER 12
Identifying Windows Phone Implementation Issues
Having explored identification and vulnerability testing for various application-level weaknesses in Windows
Phone applications in Chapter 11, we’ll now look at common implementation issues that can also be culprits for
presenting security problems in apps.
You can think of implementation issues as being somewhat general issues that developers should be aware of to
build suitably secure apps.
For example, storage of sensitive data may be considered an implementation issue. Failure to store personally
identifiable information (PII) safely (that is, encrypted) could potentially have disastrous consequences for an
individual or an organization if a lost or stolen device came into the wrong hands; hence, implementing such
operations in a secure manner is important.
In this chapter we delve into more generic problems that are common to Windows Phone, rather than attacking
specific pieces of an app’s functionality, as discussed in Chapter 11.
Identifying Insecure Application Settings Storage
Windows Phone provides a standard interface for persisting custom settings and data that the application
developer deems appropriate to save for later use. This class is called IsolatedStorageSettings and can be
viewed as being the Windows Phones’ equivalent of iOS’s NSUserDefaults and Android’s SharedPreferences
interfaces. You can find the MSDN documentation for IsolatedStorageSettings at
http://msdn.microsoft.com/en-
us/library/system.io.isolatedstorage.isolatedstoragesettings(v=vs.95).aspx.
IsolatedStorageSettings provide a convenient way for apps to store data as key-value pairs to a file in their
Local folder. A typical use is to save settings relevant to the app, such as the number of images to display per
page, the user’s login name, page layout options, and other app-related settings. The IsolatedStorageSettings
class essentially behaves as a thin layer wrapper around a dictionary object.
An application’s IsolatedStorageSettings instance is retrieved using the ApplicationSettings property, and if
an instance doesn’t already exist, one is created accordingly.
Objects are stored to IsolatedStorageSettings using either the Add method, or array notation, and objects are
retrieved using TryGetValue() or again, using array notation to dereference a value by its key.
For example, an application may store the hostname of a server it interacts with under a key named
serverAddress, and the user’s username, using code similar to the following,
IsolatedStorageSettings mySettings = IsolatedStorageSettings.
ApplicationSettings;
mySettings.Add("serverAddress", "applicationServer.com"); // using Add() method
mySettings.Add("username", usernameToSave); // using Add() method
mySettings.Save();
or:
IsolatedStorageSettings mySettings =
IsolatedStorageSettings.ApplicationSettings;
mySettings["serverAddress"] = (string)"applicationServer.com";
mySettings["username"] = (string)usernameToSave;
mySettings.Save();
Note that changes to the settings instance are committed by calling the Save() method.
Conversely, the stored server address may then be retrieved from the application’s settings storage, which in
this case is stored under a key called serverAddress, like so,
IsolatedStorageSettings mySettings =
IsolatedStorageSettings.ApplicationSettings;
string serverToConnectTo = (string)mySettings["serverAddress"];
or:
IsolatedStorageSettings mySettings =
IsolatedStorageSettings.ApplicationSettings;
string serverToConnectTo = null;
bool success = mySettings.TryGetValue("serverAddress", out serverToConnectTo);
Objects that are currently stored in the app’s IsolatedStorageSettings dictionary can also be removed using the
Remove() method, in the expected way:
mySettings.Remove("serverAddress");
Note the mention of storing objects to IsolatedStorageSettings, as opposed to storing only strings and other
simple data types. Although many apps use only IsolatedStorageSettings to store useful settings and
configuration values as strings, integers, and Boolean values, IsolatedStorageSettings is capable of storing
more complicated objects. Objects that a developer wants to store must, of course, be serializable.
After settings (or in general, objects) are committed to the app’s IsolatedStorageSettings, the class serializes
key-value pairs to XML representations and saves the results to the filesystem, with any complex objects also
being serialized to XML representations along the way.
For example, in keeping with the hypothetical situation just mentioned, where an app stored a hostname to
IsolatedStorageSettings, the resulting file would include XML resembling the following:
serverAddress
applicationServer.com
Although this is merely an implementation detail, the IsolatedStorageSettings object and the objects it stores
are serialized and conversely deserialized under the hood by the DataContractSerializer class.
Each application’s IsolatedStorageSettings file is stored in its Local directory and is named
__ApplicationSettings. More specifically, an app’s IsolatedStorageSettings file, if it has one, may be found at
C:\Data\Users\DefApps\APPDATA\{GUID}\Local\__ApplicationSettings, where {GUID} is the app’s GUID
identifier.
When carrying out a security review of an application, extracting the __ApplicationSettings file from an app’s
local storage (using your full filesystem access; see Chapter 10) and reviewing its contents for interesting
material is generally worth it, because Windows Phone developers use IsolatedStorageSettings frequently.
The IsolatedStorageSettings API does not encrypt key-value pair data in any way before storing it to the
filesystem, so developers should be aware that any sensitive data stored using this interface is not safe from
attackers who have access to an app’s local storage sandbox. As such, you should consider sensitive data storage
via the IsolatedStorageSettings API to be a bug.
A good example of sensitive data that developers unwittingly store to IsolatedStorageSettings (without
considering the consequences in the event that the device is compromised) are authentication credentials.
Although developers tend to store all manner of settings in their app’s IsolatedStorageSettings file, including
sensitive information such as PII, finding sensitive credentials stored in __ApplicationSettings is also
common.
For example, a developer who is perhaps less security-oriented may opt to store a set of login credentials that
pertain to the user’s account on the app’s backend API. Such code could resemble this:
IsolatedStorageSettings mySettings =
IsolatedStorageSettings.ApplicationSettings;
[ ... ]
mySettings.Add("serverAddress", username);
mySettings.Add("username", username);
mySettings.Add("password", password);
mySettings.Save();
The IsolatedStorageSettings API applies absolutely no encryption to these credentials, so they are prime and
easy targets for theft by an attacker who manages to get access to the __ApplicationSettings file in the app’s
Local folder. Storing credentials and other sensitive settings in plaintext on the filesystem may be considered an
even worse practice on the Windows Phone than on other mobile OSes (that is, Android or iOS), because whole-
device encryption is only available to enterprise-connected users with RequireDeviceEncryption enabled in their
company’s ActiveSync.
Figure 12.1 shows an __ApplicationSettings file being accessed from a Windows Phone device’s filesystem,
with would-be important login credentials residing in the serialized file in plaintext.
Figure 12.1 Accessing an __ApplicationSettings file on a device’s filesystem
During security reviews of Windows Phone apps, you should ensure that apps are not storing credentials and
other pieces of sensitive information unencrypted. It is a fairly common problem, though, given the simplicity of
using the IsolatedStorageSettings API, in much the same way iOS’s NSUserDefaults and Android’s
SharedPreferences is also misused for insecure settings storage.
Identifying Data Leaks
Some applications carry out actions that result in data being stored in ways not directly relevant to their
functionality. For example, an app may use a WebBrowser control, which often leads to visited pages being cached
to disk in the app’s sandboxed filesystem. In addition, visited pages may also store cookies. Both cookies and
web cache can include data that is sensitive in nature, so their storage may understandably be considered
undesirable.
Applications may also store logs at runtime, either for the purpose of error reporting (that is, telemetry to the
vendor), or to aid the vendor during the app’s development process, or both. Some applications are guilty of
logging sensitive or otherwise useful information, sometimes including login credentials.
You can think of these three cases generally as data leaks. Storage of cookies and web cache by WebBrowser and
WebView controls is implicit and not directly intended by the developer. The use of application logging is also not
directly relevant to the operation of an app, but all of these have the potential to result in the disclosure of
sensitive data to attackers.
HTTP(S) Cookie Storage
Because WebBrowser and WebView controls provide a subset of full web browser functionality, it’s unsurprising
that they store cookies much like a full browser does.
The majority of Windows Phone apps we reviewed that feature WebBrowser or WebView controls don’t
automatically attempt to clear stored cookies after use.
Assuming you (or a would-be attacker) has filesystem access to a Windows Phone device, checking whether or
not cookies are cleared is easy to do for any app. A WebBrowser or WebView control will automatically store
cookies to the following location: C:\Data\Users\DefApps\APPDATA\{GUID}\INetCookies, where GUID is the
application’s GUID. The INetCookies directory is hidden by default, so you should type the full path into your
file manager rather than expect INetCookies to show up in its GUI interface.
Figure 12.2 shows the inspection of stored cookies in the INetCookies directory. In applications where
WebBrowser or WebView controls are hosting authenticated sessions, failure to deal with cookie deletion could
represent a fairly serious security issue.
Figure 12.2 Browsing an app’s INetCookies directory on a device
Unless the device in question is enterprise-linked to an ActiveSync instance with RequireDeviceEncryption
enabled, any cookies stored to the INetCookies directory are stored in the clear when the device is at rest.
Chapter 13 provides details on how to clear cookies in both the WebView and WebBrowser controls.
HTTP(S) Caching
When applications use WebBrowser or WebView controls to request remote web pages, it’s not uncommon for the
control to store cached copies of the web content to the app’s sandboxed directory structure.
Some applications use WebView or WebBrowser controls to render important interfaces that offer a great deal of
their functionality—sometimes in an authenticated context. Particularly in these cases, cached web content may
well contain sensitive information that was present in rendered pages, including HTML files, JavaScript files,
and images.
As mentioned, cached content will be stored in plaintext on the filesystem (when the device is at rest) unless the
device is enterprise-linked to an ActiveSync server with the RequireDeviceEncryption setting enabled.
WebView and WebBrowser controls store their cache to the INetCache directory within the app’s filesystem
sandbox. More specifically, replacing GUID with the actual GUID of the application in question, you can find
any cache files stored by the app at C:\Data\Users\DefApps\APPDATA\{GUID}\INetCache. Note that the INetCache
will be a hidden directory, so you’ll have to navigate to the directory by typing its name into your file manager’s
address bar or equivalent.
See Chapter 13 for details on how to prevent caching by WebBrowser and WebView controls, so that sensitive
content that has been rendered is not inadvertently left around in the app’s filesystem sandbox.
Application Logging
Windows Phone 8.x includes the standard logging APIs, such as Debug.WriteLine(), but messages written using