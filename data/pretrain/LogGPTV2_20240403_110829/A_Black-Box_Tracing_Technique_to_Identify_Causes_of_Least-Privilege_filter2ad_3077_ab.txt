2K-3K checks is probably too many to examine by hand,
in practice we expect the tracer to be run in much shorter
intervals — identifying the least-privilege incompatibilities
described in Section 4 required trace lengths of less than
Thread or process
SID to compare
SID-Compare
Identical?
Token
SIDs
User ID: Alice’s SID
Group 1 ID: SID of Users Group
…
Group n ID: SID of Admins Group
Privilege 1: SystemTime (Disabled)
Privileges
…
Security Descriptor
ACE 1: Allow Alice read 
ACE 2: Allow Admins write
…
ACL
Desired Access
ACE n: Allow Users execute
Privilege n: ShutDown (Enabled)
Access-Check
Succeed?
Object (e.g., file, 
registry key, …)
Target Privileges
Target Privilege,
Enable/Disable
Handle Table Entry
Compute granted 
access on success
Granted 
Access
Object 
Pointer
Privilege-Check
Adjust-Privilege
Succeed?
(Privileges held 
and enabled?)
Succeed?
(Privilege 
held?)
Desired Access
Reference-Object
Succeed?
Figure 1. Windows Security Checking Functions
Security checks
Trace 1
Trace 2
Trace 3
1,756,000
1,124,000
913,000
checks
Security
with user token
417,257
315,014
422,783
Failures with Ad-
min privileges
79,317
64,336
94,453
Failures without
Admin privileges
81,597
66,385
97,170
Difference
2,280
2,049
2,717
Table 1. Two-Hour Traces of Security Checks
20 seconds. Manually inspecting the logs also yielded two
other unsurprising observations. First, security checks tend
to occur in bursts right after new processes are started. Sec-
ond, the potential causes of least-privilege incompatibilities
appear to cover the entire range of security checks: access
check failures on semaphores and registry keys, privilege
check failures, and many others.
This noise ﬁltering algorithm depends on the fact that
the underlying Windows security subsystem is stateless be-
cause it re-executes certain calls with modiﬁed arguments.
A natural alternative approach to modifying the security
subsystem would have been to modify the APIs that access
resources, e.g. the ﬁle system or socket APIs. However, the
stateful nature of these interfaces would have made our ap-
proach to noise ﬁltering either difﬁcult or impossible. For
example, re-executing a File-Open call would have required
closing the ﬁle, attempting to reopen it with a different set
of permissions, and doing the appropriate ﬁxup. Appropri-
ately handling calls to arbitrary objects would have been
even more challenging.
Intricacies
of
Access-Check
with MAXI-
MUM ALLOWED. The Access-Check function can
be called either with an explicit list of desired accesses,
such as read and write, or it can be called with a special
argument (MAXIMUM ALLOWED) asking for all al-
lowed accesses. Because Admin privileges grant additional
accesses on most objects, it might seem necessary to log
most calls with MAXIMUM ALLOWED as potential
least-privilege incompatibilities. However,
this would
quickly lead to a large number of false positives:
for
example, when we started the TurboTax application (one of
the examples in our evaluation), Access-Check was called
Start
tracing
Run app with
Admin privileges
Stop
tracing
Start
validation
Run app without
Admin privileges
Stop
validation
Security Check Monitor 
and Noise Filter
Security Check 
Event Logger
Log of
least-privilege 
incompatibilities
Security Check Monitor 
and Noise Filter
(in validation mode)
Figure 2. Workﬂow of Tracing and Validation
303 times with MAXIMUM ALLOWED access, and 189
of these calls return different accesses based on whether a
user has Admin privileges.
Fortunately, all the calls that we observed to Access-
Check with MAXIMUM ALLOWED occurred during ob-
ject handle creation. When object handles are created,
the accesses granted by Access-Check are cached, and
later calls through Reference-Object are compared to these
cached accesses.
This allowed us to avoid the po-
tentially large number of false positives due to MAXI-
MUM ALLOWED by modifying the Reference-Object in-
terface to incorporate our noise ﬁltering algorithm: retry
successful requests to see whether they would have suc-
ceeded without Admin privileges.
Applying the noise ﬁltering algorithm at the Reference-
interface required maintaining a small amount
Object
of additional state for each object handle. When ob-
ject handles are created with Access-Check and MAXI-
MUM ALLOWED, we initialize an additional ﬁeld in the
handle, AssumedGrantedAccess, with the results of Access-
Check and MAXIMUM ALLOWED after removing Ad-
min privileges. When Reference-Object is later called with
an object handle, the desired access is compared to both the
actual granted accesses and AssumedGrantedAccess. The
request is then logged if the desired access is allowed by
the actual granted accesses and not by AssumedGrantedAc-
cess.
3.2 Security Check Event Logger
We implemented the Security Check Event Logger by
modifying ETW (Event Tracing for Windows), a kernel
component that already allows logging events such as reg-
istry accesses, page faults and disk I/O. Each security check
log entry indicates the current process name, the monitored
security checking function, target privileges, the desired ac-
cess and granted access, a stack dump (the return addresses
on the kernel stack), and the object name.
Obtaining the object name of each Access-Check call is
more difﬁcult than obtaining the other information. Access-
Check is performed on a security descriptor and a token.
There is no backward pointer from the security descriptor to
the object, and indeed, a security descriptor can be created
by a programmer without reference to an object, though this
practice is rare. To obtain object names when they exist, the
logger walks back along the kernel stack, traversing frame
pointer frames. The traversal stops at any function frame
that is known to contain object name information, which
is then written to the log. This technique requires a kernel
compiled with frame pointers, which is the case for Win-
dows XP Service Pack 1. We have currently implemented
retrieving object names from ﬁve functions that we know to
be particularly common parents of Access-Check, such as
Create-File. This has been sufﬁcient to give us very good
coverage. It allowed us to debug all the least-privilege in-
compatibilities given in the evaluation section, and it re-
turned object names for 98.3% of the access checks in one
of our 2-hour traces (8490 out of 8639 checks).
3.3 Log Validation
We performed a separate validation step to conﬁrm that
all the least-privilege incompatibilities in the code paths
we managed to exercise were detected by our tracing tech-
nique. We could not directly modify the code for some of
the applications in our evaluation, so instead we modiﬁed
the behavior of our Security Check Monitor and Noise Filter
to change the outcomes of the security checks themselves.
This validation step is the reverse of the tracing step: ap-
plications are run without Admin privileges, and previously
logged checks are made to succeed where they otherwise
would have failed. The application will work without Ad-
min privileges if and only if the logged checks cover all
causes of least-privilege incompatibilities.
Though it might seem possible to mitigate all least-
privilege incompatibilities by using the validation technique
to change the outcome of certain security checks (often ef-
fectively changing ACLs), we have several reasons to urge
caution in this approach. First, some applications legiti-
mately require Admin privileges, and the objects they are
accessing should retain their strict ACLs. A signiﬁcant
complicating factor is that the ACLs may be for kernel ob-
jects whose signiﬁcance is less clear than ﬁles or registry
keys. Secondly, for applications that should not require Ad-
min privileges, developers are free to change application
behavior in many ways. Changing ACLs may require sig-
niﬁcantly more work than the alternative modiﬁcations to
application behavior. Finally, the architecture of the Secu-
rity Check Monitor and Noise Filter component requires a
lookup table to determine whether to change the outcome of
particular security checks. Reconﬁguring ACLs in place has
better scalability and efﬁciency, avoiding both the lookup
step and the need to maintain additional state in the security
subsytem. Indeed, this is exactly how ACL modiﬁcations
are currently handled in the ﬁle system and registry.
4 Evaluation
We evaluated the effectiveness of our tracing technique
on eight least-privilege failure scenarios drawn from real
applications. These applications include small utility pro-
grams, video games, document processing applications, and
software development tools, and span the spectrum of users,
including pre-school children, teenagers, professionals and
home users. The purpose of the evaluation is both to under-
stand the effectiveness of the technique in producing a small
set of security checks responsible for the least-privilege in-
compatibility, and to understand how helpful this would be
to a developer seeking to ﬁx the incompatibility, or a system
administrator seeking to mitigate it.
For our experiments we installed and traced applica-
tions using an account with Admin privileges. We found
that most least-privilege incompatibilities are encountered
quickly:
for interactive applications, we found that we
only needed to trace application startup, while for non-
interactive applications (e.g., scripts), we traced the entire
run of the application. We validated our logs using a sec-
ond account without Admin privileges. We found that the
causes of least-privilege incompatibilities in our evaluation
fall into three categories: overly-restrictive ACL settings,
insufﬁcient granularity of privilege in the application de-
sign, and programmatic enforcement of unnecessary privi-
lege requirements.
4.1 Overly Restrictive ACLs
The three applications in this section required elevated
privileges because they either stored their settings in a more
secure location than necessary, or they did not correctly
conﬁgure ACLs to allow access by the appropriate users.
These problems are all ﬁxable with small code changes, and
it appears to be possible to work around them by manually
reconﬁguring the relevant ACLs.
4.1.1 Bob The Builder Game
“Bob The Builder, Can We Fix It” is a video game designed
for children as young as 3. If a user attempts to start the
game without Admin privileges, an error message appears
stating “Automenu: insufﬁcient privilege”. The tracer in-
tercepted 4002 checks during application startup, of which
899 would have failed if the user had not had Admin privi-
leges. Only 15 checks survived noise ﬁltering. The 5 unique
entries among these 15 checks are shown in Table 2.
Two things point to the ﬁrst entry in the log being the
likely cause of the least-privilege incompatibility. First,
the error message mentions the AutoMenu process. Sec-
ond, HKEY LOCAL MACHINE (HKLM) is a portion of
the Registry used for storing machine-wide settings. We
used our validation technique to conﬁrm this hypothesis.
Although we have not heard from the application develop-
ers directly, anecdotal evidence points to this being a com-
mon mistake leading to least-privilege incompatibility, eas-
ily ﬁxed by using a per-user store. This least-privilege in-
compatibility is also simple to mitigate by modifying ACLs
because no system critical information is stored in the “Bob
the Builder” section of the Registry. We have not yet de-
duced why explorer also generates entries in the log, but as
mentioned previously, our technique sometimes generates
false positives.
4.1.2 RAZZLE
Several Microsoft products use the razzle build environment
conﬁguration tool. Developers must have Admin privileges
to use the current version of this tool. When a user without
Admin privileges runs razzle and then attempts to change to
a source code directory, they receive a “permission denied”