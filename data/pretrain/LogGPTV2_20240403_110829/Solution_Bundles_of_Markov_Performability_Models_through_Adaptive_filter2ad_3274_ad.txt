### V. Case Studies

This section introduces two case studies to illustrate the dependencies discussed in Section II-C and to evaluate the performance of the method presented in Section IV. Despite their apparent simplicity, the models in these case studies include aspects that may lead to variable size and stiffness [4]â€“[6]. Thus, the proposed method is tested under unfavorable conditions.

#### A. Case Study 1: Degradable System

Consider a fault-tolerant degradable system with \( n_r \) components, inspired by the system presented in [28]. The failure time of each component is exponentially distributed with parameter \( \lambda \). The system is equipped with features to detect and recover from failures during normal operation, which are successful with probability \( c_f \) (coverage parameter), leading to a degraded state where the failed component is recovered at a constant rate \( \mu \). If recovery fails (with probability \( 1 - c_f \)), the system enters a temporary non-operational state (labeled 0) where all \( n_r \) components are non-operational, but the system can still provide a basic service. The system can also detect and recover from state 0 with probability \( c_r \) at a constant rate \( \mu_d \). If recovery from state 0 fails (with probability \( 1 - c_r \)), the system permanently fails (state 0f).

The Continuous-Time Markov Chain (CTMC) representing this system is depicted in Figure 3, where each state \( i \geq 0 \) represents the number of currently operational components.

**Parameters:**
- \( \theta_1 := \lambda \)
- \( \theta_2 := c_f \)
- \( \theta_3 := c_r \)
- \( \theta_4 := \mu_d \)

Based on the number of parameters considered, three sub-cases are defined:
- **Case Study 1a:** \( p = 2 \) (parameters \( \theta_1 \) and \( \theta_2 \))
- **Case Study 1b:** \( p = 3 \) (parameters \( \theta_1 \), \( \theta_2 \), and \( \theta_3 \))
- **Case Study 1c:** \( p = 4 \) (all parameters \( \theta_1 \), \( \theta_2 \), \( \theta_3 \), and \( \theta_4 \))

**Measures of Interest:**
1. **Reliability:** Probability that the system is operational at time \( t \) given it is operational at time 0, formally defined as:
   \[
   m(t, \theta) := E[V(t, \theta)]
   \]
   where \( V \) is given in Equation (3) with reward structure:
   \[
   r_s = 
   \begin{cases} 
   1 & \text{if } s \neq 0f \\
   0 & \text{otherwise}
   \end{cases}
   \]

2. **Under Repair:** Percentage of time during which at least one component is operational and at least one component is under repair, evaluated as the mean percentage of sojourn time the model spends in states \( n_r - 1, \ldots, 1 \) in the interval \([0, t]\):
   \[
   m(t, \theta) := \frac{E[Y(t, \theta)]}{t}
   \]
   where \( Y \) is given in Equation (4) with:
   \[
   r_s = 
   \begin{cases} 
   1 & \text{if } s \in \{n_r - 1, \ldots, 1\} \\
   0 & \text{otherwise}
   \end{cases}
   \]

#### B. Case Study 2: System with UPS and Limited Battery Life

Consider a system with an Uninterruptible Power Supply (UPS) and limited battery life. The failure time of the system is exponentially distributed with parameter \( \lambda \). The system has features to detect and recover from power outages, with the battery charge level being a critical factor. The system transitions between states based on the battery charge level and the number of discharge cycles completed.

The Semi-Markov Chain (SMC) for this system is shown in Figure 5, where rounded and non-rounded rectangles represent states with exponential and non-exponential sojourn times, respectively. Each transient state is a tuple containing: the number of battery destructive discharge cycles completed, the state of the power supply (up or down), and the battery charge level (greater than 15% or between 0 and 15%). Absorbing states are labeled with the life cycle number and system failure (F).

To solve the model, it is converted into a CTMC, approximating the [100%, 85%) and (15%, 0%) discharge times with Erlang distributions comprising \( n_{e,1} \) and \( n_{e,2} \) exponential transitions, respectively.

**Measures of Interest:**
1. **Reliability:** Defined as:
   \[
   m(t, \theta) := E[V(t, \theta)]
   \]
   where \( V \) is given in Equation (3) with reward:
   \[
   r_s = 
   \begin{cases} 
   0 & \text{if } s = (i, F), \text{ with } i = 1, \ldots, n_c \\
   1 & \text{otherwise}
   \end{cases}
   \]

2. **Low Charge:** Percentage of time where the UPS works with low battery, formally defined as:
   \[
   m(t, \theta) := \frac{E[Y(t, \theta)]}{t}
   \]
   where \( Y \) is given in Equation (4) with:
   \[
   r_s = 
   \begin{cases} 
   1 & \text{if } s = (i, \text{Down}, 0 < B \leq 15\%), \text{ with } i = 1, \ldots, n_c \\
   0 & \text{otherwise}
   \end{cases}
   \]

### VI. Performance Evaluation

This section compares the performance of the approach presented in Section IV with two alternatives: the Full Tensor and the Generalized Linear Model (GLM). Results of sensitivity analysis applied to selected measures of the two case studies are briefly shown.

#### A. Comparison with the Full Tensor Evaluation Alternative

The comparison with the full tensor \( M \) evaluation when high accuracy of the measures is required focuses on the definition of \( \hat{M} \) as in Equation (8), which is the precursor to obtaining \( \hat{m} \) as in Equation (6).

In all experiments, the mission time is set to 10 years, corresponding to \( t_{\text{max}} = 24 \times 365 \times 10 \) hours. The Adaptive Cross Approximation (ACA) together with parameters tolerance set to \( 10^{-6} \) leads to stiff models [11]. The performance of the approach as the state-space dimension \( N \) increases is not reported, even though it has been verified that, as expected, the speedups reported in Tables I and II remain almost the same at increasing \( N \).

**Summary of Results:**
- Speedups of the proposed approach with respect to the full evaluation of the tensor in both case studies are significant and grow with the number of points \( n_0 \cdot n_1 \cdot n_2 \), maintaining great accuracy.

**Experimental Setup:**
- Computer: 11th Gen Intel(R) Core(TM) i7-1165G7 CPU, 4 units clocked at 2.80GHz, 8 threads, 40GB DDR4 RAM clocked at 3200MHz.
- Operating System: Pop! OS 20.04 LTS.
- Implementation: MATLAB [29], freely available [8].
- Memory consumption: 4 to 6 GB per run.

**Parameters:**
- **Case Study 1a:**
  - \( \mu = \mu_d = 0.5 \)
  - \( c_r = 0.9 \)
  - \( \theta_1 := \lambda \in [10^{-5}] \)
  - \( \theta_2 := c_f \in [0.9, 0.99] \)

- **Case Study 1b:**
  - \( \theta_3 := c_r \in [0.9, 0.99] \)

- **Case Study 1c:**
  - \( \theta_4 := \mu_d \in [0.25, 0.75] \)

**Table I: Wall-Clock Time (in seconds) Required to Compute the Full Tensor and the ACA Approximation, Speedup, and Accuracy**

| Case Study | Measure         | \( M \) (seconds) | \( \hat{M} \) (seconds) | Accuracy     | Speedup |
|------------|-----------------|-------------------|-------------------------|--------------|---------|
| 1a (p=2)   | Under Repair    | \( 2.31 \times 10^2 \) | 0.77                    | \( 1.61 \times 10^{-6} \) | 371     |
|            | Reliability     | \( 2.86 \times 10^2 \) | 0.67                    | \( 3.79 \times 10^{-7} \) | 344     |
| 1b (p=3)   | Reliability     | \( 7.91 \times 10^2 \) | 0.91                    | \( 6.96 \times 10^{-7} \) | 11      |
| 1c (p=4)   | Reliability     | \( 1.76 \times 10^3 \) | 1.39                    | \( 5.80 \times 10^{-7} \) | 15      |

**Table II: Wall-Clock Time (in seconds) Required to Compute the Full Tensor and the ACA Approximation, Speedup, and Accuracy**

| \( N \) | \( n_0 \cdot n_1 \cdot n_2 \) | \( k \) | \( M \) (seconds) | \( \hat{M} \) (seconds) | Accuracy     | Speedup |
|--------|--------------------------------|---------|-------------------|-------------------------|--------------|---------|
| 12     | \( 10^3 \)                     | 30      | \( 1.17 \times 10^2 \) | \( 9.7 \times 10^1 \)   | \( 2.63 \times 10^{-6} \) | 1.2     |
| 12     | \( 8 \times 10^3 \)            | 32      | \( 4.48 \times 10^2 \) | \( 9.5 \times 10^1 \)   | \( 5.08 \times 10^{-7} \) | 4.69    |
| 12     | \( 10^5 \)                     | 34      | \( 9.812 \times 10^3 \) | \( 8.55 \times 10^1 \)  | \( 7.56 \times 10^{-7} \) | 115     |
| 12     | \( 10^6 \)                     | 27      | \( 1.76 \times 10^3 \) | 1.39                    | \( 5.80 \times 10^{-7} \) | 15      |