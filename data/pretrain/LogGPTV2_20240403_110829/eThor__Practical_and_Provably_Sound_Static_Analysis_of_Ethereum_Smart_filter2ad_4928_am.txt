6 rule initOp :=
7
8
9
10
11
12
13
14 test correctValues expect SAT
15
for (! id : int ) in ids () ,
16
17
18
19
20
21
22 test uniqueValues expect UNSAT
23
24
25
26
27
28
29 test irregularHalt expect UNSAT
30
31
32
33
for (! id : int ) in ids () ,
for (! id : int ) in ids () ,
[? stor : array ]
Halt {! id }(? stor , false );
(! b: bool ) in dummyListIfNoPostConditionForId (! id )
(! b: bool ) in emptyListIfNoPostConditionForId (! id )
[? stor : array , ?i: int ]
for (! offset : int , ! value : int ) in postStorageForId (! id ): && abseq ( select ? stor ! offset , @V (! value )) ,
( for (! offset : int , ! value : int ) in postStorageForId (! id ): || ?i = ! offset ) ? ( true ) : ( abseq ( select ? stor ?i , @V (0) )) ,
Halt {! id }(? stor , false );
(! b: bool ) in emptyListIfNoPostConditionForId (! id )
[? stor : array ]
for (! offset : int , ! value : int ) in postStorageForId (! id ): || absneq ( select ? stor ! offset , @V (! value )) ,
Halt {! id }(? stor , false );
Figure 18: Setup for automated testing.
There are two sound approaches for handling the usage of un-
predictable information in jump destination reconstruction: Con-
servatively, a smart contract can be rejected by the analysis and
hence be considered potentially vulnerable in this case (which is
our approach) or the analysis could assume that all JUMPDEST
instructions of the contract are potentially reachable. The tools that
we reviewed, however, did not follow any of these options, but pro-
duced the following results: [7] correctly discovers the basic blocks,
but cannot recover jumps to the targets 20 and 22 ( 4 ). The result
of [48] is even more surprising: the algorithm does not manage to
recover any of the blocks shown in Figure 19, but reports as CFG
of this contract a single block consisting of a modulo instruction
followed by the STOP opcode. Consequently, all analyses that use
either of these CFG reconstruction solutions will consider the reen-
trant call of the example contract to be unreachable and will based
on that label the contract as safe to reentrancy attacks.
D.2 Securify
The Securify tool [48] encodes dependencies inferred from a con-
tract’s control flow graph as logical facts and specifies security
properties in terms of compliance and violation patterns using
these facts. It is claimed that the satisfaction of a compliance pat-
tern is sufficient for proving a security property, while matching
a violation pattern guarantees that a security property is indeed
violated. We will in the following review most of the provided
patterns and give counterexamples, showing that most of these
patterns indeed are not sound. We validated as far as possible
the patterns reported in the paper with the provided online tool
(https://securify.chainsecurity.com)15 . Unfortunately, some of the
15We accessed the website January 19th and validated all properties with Solidity
Compiler version 0.4.25.
Figure 19: Problematic Control Flow Example.
block pushes the current block number and hash to the stack and
jumps back to the second block ( 3 ). Since at this point the input
to the second block are values that are not statically determinable,
it needs to be assumed that the jump condition as well as the jump
offset could have any value. It is hence possible during the real
execution to jump to arbitrary jump destinations from program
counter 10 ( 4 ). This includes the block starting at program counter
20 where the execution of the contract is stopped and most impor-
tantly the block starting at program counter 22 that executes a
reentrant call. Thus, if this jump destination is undiscovered, false
correctness results for reentrancy can be produced in a subsequent
analysis.
30
10	PUSH	02	PUSH	04	PUSH	16	LT7	JUMPDEST8	PUSH	2010	ADD11	JUMPI12	PUSH	114	NUMBER16	BLOCKHASH17	PUSH	719	JUMP20	JUMPDEST21	STOP22	JUMPDEST...	REENTRANT	CALLJump	targetdependson	dynamic	info243eThor: Practical and Provably Sound Static Analysis
of Ethereum Smart Contracts
Accepted for ACM CCS, 2020
patterns introduced in [48] were changed or renamed in the online
tool. We will note this when discussing the corresponding pattern.
Also it should be noted that the online tool only reports security
problems. More precisely, an alarm (red) is produced, if a violation
pattern is matched, a warning (orange) is produced if neither a vio-
lation nor a compliance pattern is matched. The lack of a report for
a certain security property indicates that the property’s compliance
pattern was matched.
Ether Liquidity. The LQ (Ether liquidity) property ensures that a
property cannot lock Ether (for this reason it is called Locked Ether
in the online tool) meaning that for all the contract’s executions
either leave the contract’s balance unaffected or there is a trace that
allows to reduce the contract’s balance.
The property formulates three different compliance patterns. The
first two compliance patterns ensure that all halting instructions are
preceded by a successful conditional check on the value given to the
call being 0. This ensures that only such executions can complete
successfully that have been guaranteed to have gotten no money
transferred. These patterns are probably sufficient to guarantee
that a contract can never receive money and hence for showing the
LQ property. The third compliance pattern checks whether there
is a call that is reachable while at the same time (meaning that
the call and an exception opcode are not reachable from the same
conditional branch) no exception is reachable and this call transfers
non-zero value or a value that is settable by the environment. This
shall ensure that the contract has at least one way of successfully
transferring money.
This compliance pattern is not sufficient for ensuring Ether Liq-
uidity. Despite the problem that the corresponding Ether transfer-
ring call could be restricted to a certain address which can never
initiate such a call (as it belongs to a contract without a function-
ality to call other contracts), the pattern also does not consider
that an exception that reverts the transaction might not only occur
conditionally.
Consider the following contract:
function sendMoney ( address c) {
c. send (2) ;
throw ;
1 contract Bob {
2
3
4
5
6
7
8 }
}
function receive () payable {
}
This contract is labeled not to lock Ether even though it can
receive money (via the receive function) and every Ether transfer
to another contract (via sendMoney) will be reverted. Note that the
absence of Solidity’s payable will be translated to a conditional check
on the call value, and cause a revert once if the value given to the
call is non-zero.
The violation pattern for LQ requires that there is no CALL instruc-
tion that transfers a non-zero amount of Ether and that there is
some halting instruction such that if its reachability is dependent
on a conditional branching, this condition can be determined by the
transaction data, hence can be enabled by the transaction initiator.
This shall ensure that there is at least one execution trace that does
not halt exceptionally and hence reverts the execution effect.
However, the following contract is reported to lock Ether
(matches the violation pattern):
function receive ( uint x) payable {
if (x > 0 || x  0) {
1 contract Bank {
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17 }
This contract implementing a simple bank functionality for two
parties (identified by their addresses a and b) is vulnerable to a reen-
trancy attack even though no writes after the call are performed.
Similar to the initial example in Figure 2, given that a is the address
of a malicious contract, this contract can use the public setBalA func-