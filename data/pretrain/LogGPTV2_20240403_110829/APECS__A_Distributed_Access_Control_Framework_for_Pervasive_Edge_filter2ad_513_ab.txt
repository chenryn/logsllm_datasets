no effort was able to build a holistic mutual access control system
for computation offloading to the edge. We addressed this gap by
building a distributed framework for mutual authentication and
authorization of users and PEC servers. APECS provides a scalable
and efficient access control enforcement in highly dynamic PEC en-
vironments, and enables federation with access control authorities
for quick access revocation without system-wide re-keying.
3 MODELS AND ASSUMPTIONS
3.1 System Model
Our system model comprises the computing environment, service
consumers, and service providers. The computing environment
Figure 1: APECS system model including the parties involved in
secure delivery of edge services.
includes Cloud providers and the PEC ecosystem [23]. The PEC
ecosystem is itself composed of pre-deployed components such as
the multi-access edge computing (MEC) infrastructure [21] and
the users’ devices that are joining the computing resource pool for
executing requested services. In the rest of the paper, we refer to
these users’ devices as PEC servers. A service can either be static,
e.g., static videos or web content, or dynamic, e.g., annotation of
videos or images. Dynamic services may require an input data from
the user (e.g., a user’s image/video for performing annotation) or
other service providers (e.g., the police department requesting the
vehicle-tracking AMBER Alert information from other vehicles).
A service provider owns the requested static/dynamic service.
We assume that the service providers are well-known. A service
consumer is typically a user who requests a service. Given the
fluid and highly dynamic nature of PEC, a user can have multiple
roles at the same or different times, simultaneously acting as a ser-
vice provider and consumer. In APECS, we employ multi-authority
attribute-based encryption (MABE) [3] with service providers des-
ignated as one set of attribute-issuing authorities (AIAs), and base
stations (part of internet service providers) being the second set of
AIAs. Alternatively, MEC servers can act as base stations for the
second AIA category.
System Entities Interactions. As shown in Step (1) of Figure 1,
each service provider initiates its AIA, hosted as a virtual machine
on the Cloud. The AIAs onboard PEC servers and provide them
with attributes and secret keys for their registered services (Step (2)).
Similarly, each base station initiates its AIA to onboard its local PEC
servers (Step (3))2. At this stage, the PEC nodes are fully onboarded
by both AIAs. A user, interested in a service, registers with the
service provider and obtains an authentication/authorization token
(Step (4)). To request a service, the user encrypts her data using the
expected attributes of the service provider and her local base station,
and sends the encrypted data (and her token) into the network via
the base station (Step (5)). The base station relays the user’s request
to the existing PEC servers (Step (6)) for enforcing access control
2An ISP may run a system-wide AIA rather than one per base station; but that is an
implementation decision, which we do not discuss.
Cloud Computing Providers665742Pervasive Edge ComputingAIA Key DistributionResourceConsumerServiceProviders13AIA Key DistributionAIAAIASession 5B: PKI and Access Control CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1407and service execution. The PEC servers return the result of the
service to the base station, which forwards it to the user (Step (7)).
3.2 Security and Computational Assumptions
We assume that all entities are capable of performing symmetric and
asymmetric key cryptography, and have their clocks loosely syn-
chronized. We assume the existence of a trusted public key infras-
tructure (PKI) by which all entities obtain certificates corresponding
to their cryptographic key pairs from well-known authorities (e.g.,
Verisign). For instance, a provider p obtains its certificate Certp
and a user u obtains their certificate Certu. We further assume that
symmetric and asymmetric key operations and cryptosystems are
secure. We assume the cloud providers and base stations are honest
but curious participants in that they do not deviate from the proto-
cols but try to learn information about the system. It is a common
assumption when considering these entities as part of the infrastruc-
ture. We further assume attackers are Probabilistic Polynomial-time
(PPT) adversaries and are computationally bounded.
Our scheme relies on assumptions based on the decisional Diffie
Hellman (DDH) problem, the decisional Bilinear Diffie Hellman
(BDH) problem, the k-decisional Diffie Hellman (k-DDH) problem,
and the external Diffie Hellman (XDH) problem [3]. Please refer to
Appendix 10 for formal definitions of these assumptions.
3.3 Threat Model
We consider the following six threats from the service consumers,
the computing ecosystem (including PEC servers and the cloud
computing providers), and malicious third parties, which may play
the role of an edge server or a service consumer. An outsider may
try to unlawfully use a service (a) without registering and obtaining
a valid token for the service, or (b) by using a forged token (not gen-
erated by the service provider or containing invalid information). A
legitimate user (service consumer) may try to (c) request a service
with an expired token or a token with insufficient authorization
level (similarly reusing a token from one service provider to give
access to services of other providers), or (d) share their token with
an unauthorized user to allow unauthorized service access.
An unauthorized PEC server may try (e) to mount a spoofing
attack by impersonating an authorized server to hijack or obtain a
user’s data. An authorized but malicious PEC server may try to (f)
collude with an unauthorized user to maliciously provide a service.
This includes offering a static service (i.e., content) or the execution
of a dynamic service to an unauthorized user. We do not consider
the situation where a malicious PEC server returns incorrect re-
sults, possibly for avoiding resource intensive computation. For
addressing this, techniques for verifiable computing [32] can be
used in conjunction with APECS.
4 APECS BLOCKS AND OVERVIEW
In this section, we give an overview of APECS and its building
blocks. Table 1 presents the notations used in explaining APECS.
4.1 User Authentication and Authorization
In APECS, a user u ∈ U interested in using a service provider’s
p ∈ P services (e.g., Instagram) has to register herself with p to
obtain a customized and time-bounded token. The token allows
u to authenticate herself to the corresponding PEC server e ∈ E
Notation
P
U
C
E
B
Tpu
I Dx
Cer tx
Lx
Texp
Tc
Mpk
[Ae]
RAC
SKx
V Kx
σx
r evocT able
serverT able
userT able
Table 1: Notations Used
Description
Set of service providers.
Set of clients.
Access Control Cloud.
Set of PEC servers.
Set of base stations.
User u’s token T from service provider p.
Identifier of entity/service x.
Entity x certificate containing verification key V Kx .
Authorization level of entity/data x.
Token’s expiry time.
Current time.
Public key of MABE system for ABE operations.
List of MABE decryption keys possessed by e.
Service provider p’s registration request to C.
Signing key of entity x.
Signature verification key of entity x.
Signature on data x.
List of revoked users’ tokens stored at each e ∈ E.
List of PEC servers maintained by each AIA.
List of users and tokens maintained by each p ∈ P.
providing service for p, when requesting the service, which can be
either static or dynamic. We note that p has to sign all the issued
tokens for integrity verification. Below, we elaborate on the token’s
structure, its components, and the rationale behind its components.
Definition 4.1. Authentication Token
Token Tpu represents the unique JSON Web Token (JWT) that service
provider p generates for user u. The JWT format provides greater
functionality than traditional bearer tokens, such as those used in
OAuth. Tpu is a unique token that includes the service provider’s
unique identifier, IDp, the service identifier, IDs , (or a list of service
identifiers), the user’s certificate, Certu , the user’s authorization level,
Lu , (or a list of authorization levels), and its expiry time, Texp: Tpu :=
⟨IDp ,[IDs], Certu ,[Lu],Texp⟩.
The service provider’s identifier, IDp, in Tpu enables the access
control enforcers, i.e., PEC servers, to fetch p’s certificate for token
signature verification, thus ensuring token’s integrity and prove-
nance. We note that lack of token integrity and provenance verification
is one of the major shortcomings of OAuth, which we address. The
service identifier, IDs, indicates the name of service(s) that u is
authorized to use. By including IDs in Tpu, the PEC servers prevent
u’s unauthorized access to other services p provides that requires
independent membership per service. For each service (static or
dynamic), Lu indicates u’s authorization level, i.e., Bronze, Silver,
or Gold, to be matched against the required authorization level
of the requested service. Token Tpu also includes u’s certificate,
Certu, which enables the PEC servers to verify the authenticity of
u’s signed request, thus preventing unauthorized users from using
a hijacked token. Finally, Tpu includes an expiry time as a system
parameter. At the conclusion of Texp, u can request to renew her
token, which is granted at the service provider’s discretion.
4.2 Asynchronous Server Authentication
APECS is designed for a dynamic edge computing ecosystem where
edge servers can leave and join at will. In such ecosystems, the tra-
ditional authentication mechanisms, in which the user has to first
Session 5B: PKI and Access Control CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1408discover the available PEC servers, create a secure connection, and
authenticate the selected server would not scale. Thus, APECS de-
vises an asynchronous PEC server authentication framework using
the MABE scheme proposed in [3]. In APECS’ asynchronous PEC
server authentication framework, users encrypt their data (needed
for service execution) using the MABE scheme, allowing any PEC
server with the requisite set of attributes obtained from multiple
attribute-issuing authorities to decrypt the data and execute the
requested service without the need for server discovery, secure
channel establishment, or synchronous interactions between the
user and PEC servers. To obtain pertinent credentials (e.g., secret
keys and attributes), PEC servers should be associated with the cor-
responding service providers and a base station. Before presenting
the MABE scheme [3], we note that broadcast encryption (BE) is an-
other relevant technique for asynchronous authentication [16, 17].
Despite its simplicity, BE is not suitable for the PEC ecosystem
since it does not work well for several one-to-one (consumer-edge
server) communications [9], and falls short in performing dynamic
revocation. Furthermore, a federated BE approach does not exist in
the literature.
Definition 4.2. Multi-authority Attribute-Based Encryp-
tion (MABE) [3]
A key policy ABE scheme (KPABE) with n attribute-issuing authori-
ties (AIAs) consists of the following four algorithms. All algorithms
except decryption are randomized.
1) (sysparam, (apk1 , ask1), . . . ,(apkn, askn)) ← ABE.Setup(1λ, n):
This algorithm runs once in the beginning to setup the system param-
eters and the AIAs. It takes in a security parameter, λ, and number of
AIAs n, as input, and outputs the system parameters, sysparam, and
each AIA’s public/private key pairs. The sysparam includes bilinear
group information, and the threshold value dk that denotes the min-
imum number of attributes each user needs to possess from an AIA
k; k ∈ [1 . . . n]. Set public key, Mpk = (sysparam, apk1 . . . apkn).
2) SKk ← ABE.KeyGen(Mpk , askk , id, Ak): This algorithm is run
by AIA k, and takes as input Mpk , k’s secret key, askk , a userid, id,
and a set of attributes, Ak , s.t., |Ak| ≥ dk . It outputs the user’s secret
keys SKk .
3) C ← ABE.Encrypt(Mpk ,(A1, . . . , An), m): This algorithm takes
in Mpk , a subset of at least dk attributes from an AIA k; k ∈ [1 . . . n],
message m, and outputs ciphertext C.
4) {m,⊥} ← ABE.Decrypt(Mpk ,(SK1, . . . , SKn), C): This algorithm
takes in the public key Mpk and a set of secret keys from each AIA
sufficient to decrypt the ciphertext C. If successful it outputs the plain-
text message m, else outputs ⊥. Decryption is successful whenever
the overlap between the set of secret keys and the set of attributes
associated with the ciphertext is above a threshold.
4.3 APECS Overview
APECS consists of seven protocols that describe the interactions
between the cloud provider, C, service providers, P, PEC servers,
E, and users, U. APECS consists of two phases: (i) distributed user
authentication and (ii) asynchronous server authentication and
service execution.
In the first phase, PEC servers authenticate and authorize users’
requests by validating the users’ requests and corresponding tokens.
For token verification, PEC servers use service providers’ identifiers
(included in the tokens) to fetch the corresponding certificates and
validate tokens’ signatures; preventing token forgery. For users’
requests verification, PEC servers use the users’ certificates included
in the corresponding tokens to verify requests’ signatures. Finally,
the PEC servers use the other components of the tokens to authorize
users for requested services. Token-based user authentication and
authorization in APECS enables mobile users to utilize edge services
while moving across base stations without the need for obtaining
new tokens or updating cryptographic materials.
In the second phase, upon successful user authentication, PEC
servers should fulfill service requests on a service provider’s behalf.
In order to protect the user’s privacy, the user encrypts the data
needed for her service execution using the set of attributes (from
both AIAs) pertinent to the requested service. Following the MABE
scheme mentioned in Definition 4.2, PEC servers use their attribute
sets for data decryption. A successful MABE decryption process
proves the authenticity of the PEC server for service execution.
APECS enables efficient revocation of users and PEC servers.
For user revocation, service providers share their user revocation
lists (revoked tokens) with the PEC servers. For PEC server revo-
cation, instead of a system-wide re-keying of un-revoked users,
the provider notifies the base station that is associated with the
PEC server to revoke it. This localizes the PEC server revocation to
the base station, which invariably has a much smaller number of
connected PEC servers.
5 APECS DESIGN
This section includes APECS architectural design and details of
protocols for system setup and registration, users service requests,
PEC servers’ service response (including mutual authentication),
and user and PEC server revocation. We also discuss APECS PKC–an
APECS construct using the traditional public key cryptosystem for
scenarios where users and PEC servers can synchronously interact.
5.1 System Setup and Registration
5.1.1 Bootstrapping of AIAs and Provider Registration (Protocol 1).
In APECS, service providers use the Cloud as a conduit for their
interactions with the PEC ecosystem due to the Cloud’s centrality.