$ unzip DamnVulnerableiOSApp.ipa
$ cd Payload/DamnVulnerableIOSApp.app
$ otool -hv DamnVulnerableIOSApp
DamnVulnerableIOSApp (architecture armv7):
Mach header
magic cputype cpusubtype caps filetype ncmds sizeofcmds flags
MH_MAGIC ARM V7 0x00 EXECUTE 38 4292 NOUNDEFS DYLDLINK TWOLEVEL
WEAK_DEFINES BINDS_TO_WEAK PIE
DamnVulnerableIOSApp (architecture arm64):
Mach header
magic cputype cpusubtype caps filetype ncmds sizeofcmds flags
MH_MAGIC_64 ARM64 ALL 0x00 EXECUTE 38 4856 NOUNDEFS DYLDLINK TWOLEVEL
WEAK_DEFINES BINDS_TO_WEAK PIE
stack canary:
$ otool -Iv DamnVulnerableIOSApp | grep stack
0x0046040c 83177 ___stack_chk_fail
0x0046100c 83521 _sigaltstack
0x004fc010 83178 ___stack_chk_guard
0x004fe5c8 83177 ___stack_chk_fail
0x004fe8c8 83521 _sigaltstack
0x00000001004b3fd8 83077 ___stack_chk_fail
0x00000001004b4890 83414 _sigaltstack
0x0000000100590cf0 83078 ___stack_chk_guard
0x00000001005937f8 83077 ___stack_chk_fail
0x0000000100593dc8 83414 _sigaltstack
Automatic Reference Counting:
$ otool -Iv DamnVulnerableIOSApp | grep release
0x0045b7dc 83156 ___cxa_guard_release
0x0045fd5c 83414 _objc_autorelease
0x0045fd6c 83415 _objc_autoreleasePoolPop
0x0045fd7c 83416 _objc_autoreleasePoolPush
0x0045fd8c 83417 _objc_autoreleaseReturnValue
0x0045ff0c 83441 _objc_release
[SNIP]
With idb
IDB automates the processes of checking for stack canary and PIE support. Select the target binary in the IDB GUI
and click the "Analyze Binaryâ€¦" button.
497
Code Quality and Build Settings for iOS Apps
Dynamic Analysis
Dynamic analysis is not applicable for finding security features offered by the toolchain.
References
Memory management - dynamic analysis examples
https://developer.ibm.com/tutorials/mo-ios-memory/
https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/MemoryMgmt/Articles/MemoryMgm
t.html
https://medium.com/zendesk-engineering/ios-identifying-memory-leaks-using-the-xcode-memory-graph-
debugger-e84f097b9d15
OWASP Mobile Top 10 2016
M7 - Poor Code Quality - https://www.owasp.org/index.php/Mobile_Top_10_2016-M7-Poor_Code_Quality
OWASP MASVS
MSTG-CODE-1: "The app is signed and provisioned with a valid certificate."
MSTG-CODE-2: "The app has been built in release mode, with settings appropriate for a release build (e.g. non-
debuggable)."
MSTG-CODE-3: "Debugging symbols have been removed from native binaries."
MSTG-CODE-4: "Debugging code has been removed, and the app does not log verbose errors or debugging
messages."
MSTG-CODE-5: "All third party components used by the mobile app, such as libraries and frameworks, are
identified, and checked for known vulnerabilities."
MSTG-CODE-6: "The app catches and handles possible exceptions."
MSTG-CODE-8: "In unmanaged code, memory is allocated, freed and used securely."
MSTG-CODE-9: "Free security features offered by the toolchain, such as byte-code minification, stack protection,
PIE support and automatic reference counting, are activated."
498
Code Quality and Build Settings for iOS Apps
CWE
CWE-937 - OWASP Top Ten 2013 Category A9 - Using Components with Known Vulnerabilities
Tools
Carthage - https://github.com/carthage/carthage
CocoaPods - https://CocoaPods.org
OWASP Dependency Checker - https://jeremylong.github.io/DependencyCheck/
Sourceclear - https://sourceclear.com
Class-dump - https://github.com/nygard/class-dump
RetireJS - https://retirejs.github.io/retire.js/
idb - https://github.com/dmayer/idb
Codesign -
https://developer.apple.com/library/archive/documentation/Security/Conceptual/CodeSigningGuide/Procedures/Pr
ocedures.html
499
Tampering and Reverse Engineering on iOS
Tampering and Reverse Engineering on iOS
Reverse Engineering
iOS reverse engineering is a mixed bag. On one hand, apps programmed in Objective-C and Swift can be
disassembled nicely. In Objective-C, object methods are called via dynamic function pointers called "selectors", which
are resolved by name during runtime. The advantage of runtime name resolution is that these names need to stay
intact in the final binary, making the disassembly more readable. Unfortunately, this also means that no direct cross-
references between methods are available in the disassembler and constructing a flow graph is challenging.
In this guide, we'll introduce static and dynamic analysis and instrumentation. Throughout this chapter, we refer to the
OWASP UnCrackable Apps for iOS, so download them from the MSTG repository if you're planning to follow the
examples.
Tooling
Make sure that the following is installed on your system:
Class-dump by Steve Nygard is a command line utility for examining the Objective-C runtime information stored
in Mach-O (Mach object) files. It generates declarations for the classes, categories, and protocols.
Class-dump-z is class-dump re-written from scratch in C++, avoiding the use of dynamic calls. Removing these
unnecessary calls makes class-dump-z nearly 10 times faster than its predecessor.
Class-dump-dyld by Elias Limneos allows symbols to be dumped and retrieved directly from the shared cache,
eliminating the necessity of extracting the files first. It can generate header files from app binaries, libraries,
frameworks, bundles, or the whole dyld_shared_cache. Directories or the entirety of dyld_shared_cache can be
recursively mass-dumped.
MachoOView is a useful visual Mach-O file browser that also allows in-file editing of ARM binaries.
otool is a tool for displaying specific parts of object files or libraries. It works with Mach-O files and universal file
formats.
nm is a tool that displays the name list (symbol table) of the given binary.
Radare2 is a complete framework for reverse engineering and analyzing. It is built with the Capstone
disassembler engine, Keystone assembler, and Unicorn CPU emulation engine. Radare2 supports iOS binaries
and many useful iOS-specific features, such as a native Objective-C parser and an iOS debugger.
Ghidra is a software reverse engineering (SRE) suite of tools developed by NSA's Research Directorate. Please
refer to the installation guide on how to install it and look at the cheat sheet for a first overview of available
commands and shortcuts.
Building a Reverse Engineering Environment for Free
Be sure to follow the instructions from the section "Setting up Xcode and Command Line Tools" of chapter "iOS Basic
Security Testing". This way you'll have properly installed Xcode. We'll be using standard tools that come with macOS
and Xcode in addition to the tools mentioned above. Make sure you have the Xcode command line developer tools
properly installed or install them straight away from your terminal:
$ xcode-select --install
xcrun can be used invoke Xcode developer tools from the command-line, without having them in the path. For
500
Tampering and Reverse Engineering on iOS
example you may want to use it to locate and run swift-demangle or simctl.
swift-demangle is an Xcode tool that demangles Swift symbols. For more information run xcrun swift-demangle -
help once installed.
simctl is an Xcode tool that allows you to interact with iOS simulators via the command line to e.g. manage
simulators, launch apps, take screenshots or collect their logs.
Commercial Tools
Building a reverse engineering environment for free is possible. However, there are some commercial alternatives.
The most commonly used are:
IDA Pro can deal with iOS binaries. It has a built-in iOS debugger. IDA is widely seen as the gold standard for
GUI-based interactive static analysis, but it isn't cheap. For the more budget-minded reverse engineer, Hopper
offers similar static analysis features.
Hopper is a reverse engineering tool for macOS and Linux used to disassemble, decompile and debug 32/64bits
Intel Mac, Linux, Windows and iOS executables.
Disassembling and Decompiling
Because Objective-C and Swift are fundamentally different, the programming language in which the app is written
affects the possibilities for reverse engineering it. For example, Objective-C allows method invocations to be changed
at runtime. This makes hooking into other app functions (a technique heavily used by Cycript and other reverse
engineering tools) easy. This "method swizzling" is not implemented the same way in Swift, and the difference makes
the technique harder to execute with Swift than with Objective-C.
The majority of this chapter applies to applications written in Objective-C or having bridged types, which are types
compatible with both Swift and Objective-C. The Swift compatibility of most tools that work well with Objective-C is
being improved. For example, Frida supports Swift bindings.
Static Analysis
The preferred method of statically analyzing iOS apps involves using the original Xcode project files. Ideally, you will
be able to compile and debug the app to quickly identify any potential issues with the source code.
Black box analysis of iOS apps without access to the original source code requires reverse engineering. For example,
no decompilers are available for iOS apps (although most commercial and open-source disassemblers can provide a
pseudo-source code view of the binary), so a deep inspection requires you to read assembly code.
Basic Information Gathering
You can use class-dump to get information about methods in the application's source code. The example below uses
the Damn Vulnerable iOS App to demonstrate this. Our binary is a so-called fat binary, which means that it can be
executed on 32- and 64-bit platforms:
$ unzip DamnVulnerableiOSApp.ipa
$ cd Payload/DamnVulnerableIOSApp.app
$ otool -hv DamnVulnerableIOSApp
DamnVulnerableIOSApp (architecture armv7):
Mach header
magic cputype cpusubtype caps filetype ncmds sizeofcmds flags
MH_MAGIC ARM V7 0x00 EXECUTE 38 4292 NOUNDEFS DYLDLINK TWOLEVEL WEAK_DEFINES BIND
S_TO_WEAK PIE
501
Tampering and Reverse Engineering on iOS
DamnVulnerableIOSApp (architecture arm64):
Mach header
magic cputype cpusubtype caps filetype ncmds sizeofcmds flags
MH_MAGIC_64 ARM64 ALL 0x00 EXECUTE 38 4856 NOUNDEFS DYLDLINK TWOLEVEL WEAK_DEFINES BIN
DS_TO_WEAK PIE
Note the architectures: armv7 (which is 32-bit) and arm64 . This design of a fat binary allows an application to be
deployed on all devices. To analyze the application with class-dump, we must create a so-called thin binary, which
contains one architecture only:
iOS8-jailbreak:~ root# lipo -thin armv7 DamnVulnerableIOSApp -output DVIA32
And then we can proceed to performing class-dump:
iOS8-jailbreak:~ root# class-dump DVIA32
@interface FlurryUtil : ./DVIA/DVIA/DamnVulnerableIOSApp/DamnVulnerableIOSApp/YapDatabase/Extensions/Views/Inte
rnal/
{
}
+ (BOOL)appIsCracked;
+ (BOOL)deviceIsJailbroken;
Note the plus sign, which means that this is a class method that returns a BOOL type. A minus sign would mean that
this is an instance method. Refer to later sections to understand the practical difference between these.
Alternatively, you can easily decompile the application with Hopper Disassembler. All these steps would be executed
automatically, and you'd be able to see the disassembled binary and class information.
The following command is listing shared libraries:
$ otool -L 
Automated Static Analysis
Several automated tools for analyzing iOS apps are available; most of them are commercial tools. The free and open
source tools MobSF and Needle have some static and dynamic analysis functionality. Additional tools are listed in the
"Static Source Code Analysis" section of the "Testing Tools" appendix.
Don't shy away from using automated scanners for your analysis - they help you pick low-hanging fruit and allow you
to focus on the more interesting aspects of analysis, such as the business logic. Keep in mind that static analyzers
may produce false positives and false negatives; always review the findings carefully.
Dynamic Analysis
Life is easy with a jailbroken device: not only do you gain easy privileged access to the device, the lack of code
signing allows you to use more powerful dynamic analysis techniques. On iOS, most dynamic analysis tools are
based on Cydia Substrate, a framework for developing runtime patches, or Frida, a dynamic introspection tool. For
basic API monitoring, you can get away with not knowing all the details of how Substrate or Frida work - you can
simply use existing API monitoring tools.
Dynamic Analysis on Non-Jailbroken Devices
Automated Repackaging with Objection
502
Tampering and Reverse Engineering on iOS
Objection is a mobile runtime exploration toolkit based on Frida. One of the biggest advantages about Objection is
that it enables testing with non-jailbroken devices. It does this by automating the process of app repackaging with the
FridaGadget.dylib library. A detailed explanation of the repackaging and resigning process can be found in the next
chapter "Manual Repackaging". We won't cover Objection in detail in this guide, as you can find exhaustive
documentation on the official wiki pages.
Manual Repackaging
If you don't have access to a jailbroken device, you can patch and repackage the target app to load a dynamic library
at startup. This way, you can instrument the app and do pretty much everything you need to do for a dynamic analysis
(of course, you can't break out of the sandbox this way, but you won't often need to). However, this technique works
only if the app binary isn't FairPlay-encrypted (i.e., obtained from the App Store).
Thanks to Apple's confusing provisioning and code-signing system, re-signing an app is more challenging than you
would expect. iOS won't run an app unless you get the provisioning profile and code signature header exactly right.
This requires learning many concepts-certificate types, BundleIDs, application IDs, team identifiers, and how Apple's
build tools connect them. Getting the OS to run a binary that hasn't been built via the default method (Xcode) can be a
daunting process.
We'll use optool , Apple's build tools, and some shell commands. Our method is inspired by Vincent Tan's Swizzler
project. The NCC group has described an alternative repackaging method.
To reproduce the steps listed below, download UnCrackable iOS App Level 1 from the OWASP Mobile Testing Guide
repository. Our goal is to make the UnCrackable app load FridaGadget.dylib during startup so we can instrument the
app with Frida.
Please note that the following steps apply to macOS only, as Xcode is only available for macOS.
Getting a Developer Provisioning Profile and Certificate
The provisioning profile is a plist file signed by Apple. It whitelists your code-signing certificate on one or more
devices. In other words, this represents Apple explicitly allowing your app to run for certain reasons, such as
debugging on selected devices (development profile). The provisioning profile also includes the entitlements granted
to your app. The certificate contains the private key you'll use to sign.
Depending on whether you're registered as an iOS developer, you can obtain a certificate and provisioning profile in
one of the following ways:
With an iOS developer account:
If you've developed and deployed iOS apps with Xcode before, you already have your own code-signing certificate
installed. Use the security tool to list your signing identities:
$ security find-identity -v
1) 61FA3547E0AF42A11E233F6A2B255E6B6AF262CE "iPhone Distribution: Vantage Point Security Pte. Ltd."
2) 8004380F331DCA22CC1B47FB1A805890AE41C938 "iPhone Developer: Bernhard MÃ¼ller (RV852WND79)"
Log into the Apple Developer portal to issue a new App ID, then issue and download the profile. An App ID is a two-
part string: a Team ID supplied by Apple and a bundle ID search string that you can set to an arbitrary value, such as
com.example.myapp . Note that you can use a single App ID to re-sign multiple apps. Make sure you create a
development profile and not a distribution profile so that you can debug the app.
In the examples below, I use my signing identity, which is associated with my company's development team. I created
the App ID "sg.vp.repackaged" and the provisioning profile "AwesomeRepackaging" for these examples. I ended up
with the file AwesomeRepackaging.mobileprovision -replace this with your own filename in the shell commands below.
With a Regular iTunes Account:
503
Tampering and Reverse Engineering on iOS
Apple will issue a free development provisioning profile even if you're not a paying developer. You can obtain the
profile via Xcode and your regular Apple account: simply create an empty iOS project and extract
embedded.mobileprovision from the app container, which is in the Xcode subdirectory of your home directory:
~/Library/Developer/Xcode/DerivedData//Build/Products/Debug-iphoneos/.app/ . The NCC
blog post "iOS instrumentation without jailbreak" explains this process in great detail.
Once you've obtained the provisioning profile, you can check its contents with the security tool. You'll find the
entitlements granted to the app in the profile, along with the allowed certificates and devices. You'll need these for
code-signing, so extract them to a separate plist file as shown below. Have a look at the file contents to make sure
everything is as expected.
$ security cms -D -i AwesomeRepackaging.mobileprovision > profile.plist
$ /usr/libexec/PlistBuddy -x -c 'Print :Entitlements' profile.plist > entitlements.plist
$ cat entitlements.plist
application-identifier
LRUD9L355Y.sg.vantagepoint.repackage
com.apple.developer.team-identifier
LRUD9L355Y
get-task-allow
keychain-access-groups
LRUD9L355Y.*
Note the application identifier, which is a combination of the Team ID (LRUD9L355Y) and Bundle ID
(sg.vantagepoint.repackage). This provisioning profile is only valid for the app that has this App ID. The get-task-
allow key is also important: when set to true , other processes, such as the debugging server, are allowed to attach
to the app (consequently, this would be set to false in a distribution profile).
Other Preparations
To make our app load an additional library at startup, we need some way of inserting an additional load command into
the main executable's Mach-O header. Optool can be used to automate this process:
$ git clone https://github.com/alexzielenski/optool.git
$ cd optool/
$ git submodule update --init --recursive
$ xcodebuild
$ ln -s /build/Release/optool /usr/local/bin/optool
We'll also use ios-deploy, a tool that allows iOS apps to be deployed and debugged without Xcode:
$ git clone https://github.com/phonegap/ios-deploy.git