> docker ps --format "{{ .ID }}: {{ .Command }} ({{ .Status }})"
fc0c8acdd438: "uwsgi --http=0.0.0.…" (Up 16 seconds)
> docker ps --format "{{ .ID }} Ports: {{ .Ports }}"
fc0c8acdd438 Ports:
```
您可以看到 pod 的状态是`Running`，并且一个容器已经被部署到在您的本地 Docker Desktop 环境中运行的单节点 Kubernetes 集群中。需要注意的一点是，已经部署的 todobackend 容器没有与外部世界通信的手段，因为没有从 pod 及其关联容器发布的网络端口。
Kubernetes 的一个有趣的方面是，您可以使用 Kubernetes API 与您的豆荚进行交互。为了演示这一点，首先运行`kubectl proxy`命令，该命令设置一个本地 HTTP 代理，该代理通过一个普通的旧 HTTP 接口公开 API:
```
> kubectl proxy
Starting to serve on 127.0.0.1:8001
```
现在，您可以通过网址`http://localhost:8001/api/v1/namespaces/default/pods/todobackend:8000/proxy/`访问吊舱上的容器端口 8000:
![](img/30a20671-faac-4e12-af03-adfd67e9629a.png)
Running the kubectl proxy
如您所见，todobackend 应用正在运行，尽管它缺少静态内容，因为我们还没有生成它。还要注意，页面底部的 todos 链接(`http://localhost:8001/todos`)是无效的，因为 todobackend 应用不知道通过代理访问应用所调用的 API 路径。
Kubernetes 的另一个有趣的特性是能够通过运行`kubectl port-forward`命令将 Kubernetes 客户端的端口公开给应用，该命令在客户端发布一个本地端口，并使用 Kubernetes API 将其连接到指定的 pod:
```
> kubectl proxy
Starting to serve on 127.0.0.1:8001
^C
> kubectl port-forward todobackend 8000:8000
Forwarding from 127.0.0.1:8000 -> 8000
Forwarding from [::1]:8000 -> 8000
Handling connection for 8000
```
如果您现在尝试访问`http://localhost:8000`，您应该会看到 todosbackend 主页，并且页面底部的 todo 链接现在应该可以访问:
![](img/6ccde81a-5c0f-4f36-bdb8-79dfb0de4d8f.png)
Accessing a port forwarded pod
您可以再次看到，我们的应用没有处于完全正常的状态，因为我们还没有配置任何数据库设置。
# 创建部署
虽然我们已经能够发布我们的 todobackend 应用，但是我们用来发布的机制并不适合现实世界的生产使用，只对有限的本地开发场景真正有用。
在现实世界中运行我们的应用的一个关键要求是能够增加或减少应用容器的实例或*副本*的数量。为了实现这一点，Kubernetes 支持一类称为*控制器*的资源，它们负责协调、组织和管理给定 pod 的多个副本。一种流行的控制器类型是*部署*资源，顾名思义，它包括支持创建和更新新版本的 pods，以及滚动升级和支持部署失败时的回滚等功能。
以下示例演示了更新`todobackend`存储库中的`k8s/app/deployment.yaml`文件以定义部署资源:
```
apiVersion: apps/v1
kind: Deployment
metadata:
  name: todobackend
  labels:
    app: todobackend
spec:
  replicas: 2
  selector:
    matchLabels:
      app: todobackend
  template:
    metadata:
      labels:
        app: todobackend
    spec:
      containers:
      - name: todobackend
        image: 385605022855.dkr.ecr.us-east-1.amazonaws.com/docker-in-aws/todobackend
        imagePullPolicy: IfNotPresent
        readinessProbe:
          httpGet:
            port: 8000
        livenessProbe:
          httpGet:
            port: 8000
        command:
        - uwsgi
        - --http=0.0.0.0:8000
        - --module=todobackend.wsgi
        - --master
        - --die-on-term
        - --processes=4
        - --threads=2
        - --check-static=/public
        env:
        - name: DJANGO_SETTINGS_MODULE
          value: todobackend.settings_release
```
我们将之前的 pod 资源更新为现在的部署资源，顶层`spec`属性(即`spec.template`)的`template`属性内联定义了应该部署的 pod。部署和 Kubernetes 的一个关键概念通常是使用基于集合的标签选择器匹配([https://Kubernetes . io/docs/concepts/overview/work-with-objects/labels/# label-selectors](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors))来确定部署适用的资源或 pods。在前面的示例中，部署资源`spec`指定了两个`replicas`，并使用`selectors.matchLabels`将部署匹配到包含标签`app`和值`todobackend`的 pod。这是一个简单而强大的范例，允许您以灵活且松散耦合的方式创建自己的结构和资源之间的关系。请注意，我们还向容器定义中添加了`readinessProbe`和`livenessProbe`属性，它们分别创建了就绪探测和活动探测。就绪探测器定义了 Kubernetes 应该执行的操作，以确定容器是否就绪，而活跃度探测器用于确定容器是否仍然健康。在前面的示例中，就绪探测器使用对端口 8000 的 HTTP GET 请求来确定部署控制器何时应该允许将连接转发到容器，而活跃度探测器用于在容器不再响应活跃度探测器的情况下重新启动容器。请参考[https://kubernetes . io/docs/tasks/configure-pod-container/configure-liveness-ready-probes/](https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/)了解不同类型的探针及其使用方法的更多信息。
要创建新的部署资源，我们可以首先移除现有的 pod，然后使用`kubectl`在`todobackend`存储库中应用`k8s/app/deployment.yaml`文件:
```
> kubectl delete pods/todobackend
pod "todobackend" deleted
> kubectl apply -f k8s/app/deployment.yaml deployment.apps "todobackend" created> kubectl get deployments NAME                    DESIRED  CURRENT  UP-TO-DATE  AVAILABLE  AGE
todobackend             2        2        2           2          12s> kubectl get pods NAME                                     READY  STATUS   RESTARTS  AGE
todobackend-7869d9965f-lh944             1/1    Running  0         17s
todobackend-7869d9965f-v986s             1/1    Running  0         17s
```
创建部署后，您可以看到配置数量的副本以两个单元的形式部署，每个单元都有一个唯一的名称。一旦您配置的就绪探测器成功，每个吊舱的状态将转换为就绪。
# 创建服务
此时，我们已经为应用定义了一个 pod，并使用一个部署资源部署了应用的多个副本，现在我们需要确保外部客户端可以连接到我们的应用。假设我们的应用有多个副本在运行，我们需要一个能够提供稳定的服务端点、跟踪每个副本的位置并在所有副本之间负载平衡传入连接的组件。
*服务*是提供此类功能的 Kubernetes 资源，其中每个服务都被分配了一个虚拟 IP 地址，该地址可用于访问给定的一组 pod，并且基于 iptables 规则，到虚拟 IP 地址的传入连接被负载平衡到每个 pod 副本，iptables 规则通过称为 kube-proxy 的标准 Kubernetes 系统资源进行管理和更新:
![](img/869fe4cb-aa5f-4772-935c-4f14ca899e43.png)
Services and endpoints in Kubernetes
在上图中，一个客户端 pod 正试图使用端口`80` ( `10.1.1.1:80`)上的虚拟 IP 地址`10.1.1.1`与应用 pod 通信。请注意，服务虚拟 IP 地址是在集群中的每个节点上发布的，其中 **kube-proxy** 组件负责更新 iptables 规则，该规则选择客户端连接应该以循环方式路由到的适当端点。因为虚拟 IP 地址发布在集群中的每个节点上，所以任何节点上的任何客户端都可以与服务通信，并且流量以均匀的方式分布在集群中。
现在，您已经对服务的工作原理有了较高的理解，让我们在位于`todobackend`存储库中的`k8s/app/deployment.yaml`文件中定义一个新的服务:
```
apiVersion: v1
kind: Service
metadata:
 name: todobackend
spec:
 selector:
 app: todobackend
 ports:
 - protocol: TCP
 port: 80
    targetPort: 8000
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: todobackend
  labels:
    app: todobackend
...
...
```
请注意，您可以在单个 YAML 文件中定义多个资源，方法是使用`---`分隔符分隔每个资源，并且我们可以创建一个名为 todobackend 的服务，该服务使用标签匹配将服务绑定到标签为`app=todobackend`的任何 pods。在`spec.ports`部分，我们将端口 80 配置为服务的传入或监听端口，这将对每个 pod 上的 8000 个`targetPort`连接进行负载平衡。
有了我们服务的定义，您现在可以使用`kubectl apply`命令部署服务:
```
> kubectl apply -f k8s/app/deployment.yaml
service "todobackend" created
deployment.apps "todobackend" unchanged
> kubectl get svc
NAME                 TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)   AGE
kubernetes           ClusterIP   10.96.0.1               443/TCP   8h
todobackend          ClusterIP   10.103.210.17           80/TCP    10s
> kubectl get endpoints
NAME          ENDPOINTS                       AGE
kubernetes    192.168.65.3:6443               1d
todobackend   10.1.0.27:8000,10.1.0.30:8000   16h
```
您可以使用`kubectl get svc`命令查看当前服务，并注意到每个服务都包括一个唯一的集群 IP 地址，这是集群中其他资源可以用来与服务相关联的 pod 通信的虚拟 IP 地址。`kubectl get endpoints`命令显示了与每个服务相关联的实际端点，您可以看到到`10.103.210.17:80`的`todobackend`服务虚拟 IP 地址的连接将被负载平衡到`10.1.0.27:8000`和`10.1.0.30:8000`。
每个服务也以`..svc.cluster.local`的形式分配一个唯一的 DNS 名称。Kubernetes 中的默认命名空间被称为`default`，因此对于我们的 todobackend 应用，它将被分配一个名称`todobackend.default.svc.cluster.local`，您可以使用`kubectl run`命令验证该名称在集群中是否可达:
```
> kubectl run dig --image=googlecontainer/dnsutils --restart=Never --rm=true --tty --stdin \
 --command -- dig todobackend a +search +noall +answer
; > DiG 9.8.4-rpz2+rl005.12-P1 > todobackend a +search +noall +answer
;; global options: +cmd
todobackend.default.svc.cluster.local. 30 IN A   10.103.210.17
```
在前面的例子中，您可以简单地查询 todo backnd，因为 Kubernetes 将 DNS 搜索域发送到`.svc.cluster.local`(在我们的用例中为`default.svc.cluster.local`)，您可以看到这解析为 todo backnd 服务的集群 IP 地址。
需要注意的是，集群 IP 地址只能在 Kubernetes 集群内访问，如果没有进一步的配置，我们无法从外部访问该服务。
# 公开服务
为了允许外部客户端和系统与 Kubernetes 服务进行通信，您必须向外界公开该服务。在真正的 Kubernetes 风格中，有多种选项可以实现这一点，这些选项由 Kubernetes `ServiceTypes`控制:
*   **节点端口**:该服务类型将每个 Kubernetes 节点上的外部端口映射到为该服务配置的内部集群 IP 和端口。这为您的服务创建了几个外部连接点，这些连接点可能会随着节点的变化而变化，从而很难创建稳定的外部服务端点。
*   **负载平衡器**:代表一个外部专用的第 4 层(TCP 或 UDP)负载平衡器，专门映射到您的服务。实际部署的负载平衡器取决于您的目标平台，例如，使用 AWS，会创建一个经典的弹性负载平衡器。这是一个非常受欢迎的选项，但是一个显著的限制是每个服务创建一个负载平衡器，这意味着如果您有很多服务，这个选项可能会变得非常昂贵。
*   **入口**:这是一个共享的第 7 层(HTTP)负载均衡器资源，其工作方式类似于 AWS 应用负载均衡器，在 AWS 应用负载均衡器中，到单个 HTTP/HTTPS 端点的连接可以基于主机头或 URL 路径模式路由到多个服务。这被认为是基于 HTTP 的服务的最佳选择，因为您可以跨多个服务共享一个负载平衡器。
向外部发布服务的最常见方法是使用负载平衡器方法，如下图所示:
![](img/95505204-2d0d-4d38-9188-5741bbd5bfc6.png)
Load balancing in Kubernetes