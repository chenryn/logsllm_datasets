path[i] = op(path[i], offset)
}
}
方法值和方法表达式 222
gopl
6.5. 示例: Bit数组
Go语言里的集合一般会用map[T]bool这种形式来表示，T代表元素类型。集合用map类型来表
示虽然非常灵活，但我们可以以一种更好的形式来表示它。例如在数据流分析领域，集合元
素通常是一个非负整数，集合会包含很多元素，并且集合会经常进行并集、交集操作，这种
情况下，bit数组会比map表现更加理想。(译注：这里再补充一个例子，比如我们执行一个
http下载任务，把文件按照16kb一块划分为很多块，需要有一个全局变量来标识哪些块下载完
成了，这种时候也需要用到bit数组)
一个bit数组通常会用一个无符号数或者称之为“字”的slice来表示，每一个元素的每一位都表示
集合里的一个值。当集合的第i位被设置时，我们才说这个集合包含元素i。下面的这个程序展
示了一个简单的bit数组类型，并且实现了三个函数来对这个bit数组来进行操作：
gopl.io/ch6/intset
// An IntSet is a set of small non-negative integers.
// Its zero value represents the empty set.
type IntSet struct {
words []uint64
}
// Has reports whether the set contains the non-negative value x.
func (s *IntSet) Has(x int) bool {
word, bit := x/64, uint(x%64)
return word = len(s.words) {
s.words = append(s.words, 0)
}
s.words[word] |= 1  len("{") {
buf.WriteByte(' ')
}
fmt.Fprintf(&buf, "%d", 64*i+j)
}
}
}
buf.WriteByte('}')
return buf.String()
}
这里留意一下String方法，是不是和3.5.4节中的intsToString方法很相似；bytes.Buffer在
String方法里经常这么用。当你为一个复杂的类型定义了一个String方法时，fmt包就会特殊对
待这种类型的值，这样可以让这些类型在打印的时候看起来更加友好，而不是直接打印其原
始的值。fmt会直接调用用户定义的String方法。这种机制依赖于接口和类型断言，在第7章中
我们会详细介绍。
现在我们就可以在实战中直接用上面定义好的IntSet了：
示例: Bit数组 224
gopl
var x, y IntSet
x.Add(1)
x.Add(144)
x.Add(9)
fmt.Println(x.String()) // "{1 9 144}"
y.Add(9)
y.Add(42)
fmt.Println(y.String()) // "{9 42}"
x.UnionWith(&y)
fmt.Println(x.String()) // "{1 9 42 144}"
fmt.Println(x.Has(9), x.Has(123)) // "true false"
这里要注意：我们声明的String和Has两个方法都是以指针类型 来作为接收器的，但
*IntSet
实际上对于这两个类型来说，把接收器声明为指针类型也没什么必要。不过另外两个函数就
不是这样了，因为另外两个函数操作的是s.words对象，如果你不把接收器声明为指针对象，
那么实际操作的是拷贝对象，而不是原来的那个对象。因此，因为我们的String方法定义在
IntSet指针上，所以当我们的变量是IntSet类型而不是IntSet指针时，可能会有下面这样让人意
外的情况：
fmt.Println(&x) // "{1 9 42 144}"
fmt.Println(x.String()) // "{1 9 42 144}"
fmt.Println(x) // "{[4398046511618 0 65536]}"
在第一个Println中，我们打印一个 的指针，这个类型的指针确实有自定义的String方
*IntSet
法。第二Println，我们直接调用了x变量的String()方法；这种情况下编译器会隐式地在x前插
入&操作符，这样相当远我们还是调用的IntSet指针的String方法。在第三个Println中，因为
IntSet类型没有String方法，所以Println方法会直接以原始的方式理解并打印。所以在这种情
况下&符号是不能忘的。在我们这种场景下，你把String方法绑定到IntSet对象上，而不是
IntSet指针上可能会更合适一些，不过这也需要具体问题具体分析。
练习6.1: 为bit数组实现下面这些方法
func (*IntSet) Len() int // return the number of elements
func (*IntSet) Remove(x int) // remove x from the set
func (*IntSet) Clear() // remove all elements from the set
func (*IntSet) Copy() *IntSet // return a copy of the set
练习 6.2： 定义一个变参方法(*IntSet).AddAll(...int)，这个方法可以添加一组IntSet，比如
s.AddAll(1,2,3)。
示例: Bit数组 225
gopl
练习 6.3： (*IntSet).UnionWith会用|操作符计算两个集合的交集，我们再为IntSet实现另外的
几个函数IntersectWith(交集：元素在A集合B集合均出现),DifferenceWith(差集：元素出现在A
集合，未出现在B集合),SymmetricDifference(并差集：元素出现在A但没有出现在B，或者出
现在B没有出现在A)。
*练习6.4: 实现一个Elems方法，返回集合中的所有元素，用于做一些range之类的遍历操作。
练习 6.5： 我们这章定义的IntSet里的每个字都是用的uint64类型，但是64位的数值可能在32
位的平台上不高效。修改程序，使其使用uint类型，这种类型对于32位平台来说更合适。当然
了，这里我们可以不用简单粗暴地除64，可以定义一个常量来决定是用32还是64，这里你可
能会用到平台的自动判断的一个智能表达式：32 > 63)
示例: Bit数组 226
gopl
6.6. 封装
一个对象的变量或者方法如果对调用方是不可见的话，一般就被定义为“封装”。封装有时候也
被叫做信息隐藏，同时也是面向对象编程最关键的一个方面。
Go语言只有一种控制可见性的手段：大写首字母的标识符会从定义它们的包中被导出，小写
字母的则不会。这种限制包内成员的方式同样适用于struct或者一个类型的方法。因而如果我
们想要封装一个对象，我们必须将其定义为一个struct。
这也就是前面的小节中IntSet被定义为struct类型的原因，尽管它只有一个字段：
type IntSet struct {
words []uint64
}
当然，我们也可以把IntSet定义为一个slice类型，尽管这样我们就需要把代码中所有方法里用
到的s.words用 替换掉了：
*s
type IntSet []uint64
尽管这个版本的IntSet在本质上是一样的，他也可以允许其它包中可以直接读取并编辑这个
slice。换句话说，相对 这个表达式会出现在所有的包中，s.words只需要在定义IntSet的包
*s
中出现(译注：所以还是推荐后者吧的意思)。
这种基于名字的手段使得在语言中最小的封装单元是package，而不是像其它语言一样的类
型。一个struct类型的字段对同一个包的所有代码都有可见性，无论你的代码是写在一个函数
还是一个方法里。
封装提供了三方面的优点。首先，因为调用方不能直接修改对象的变量值，其只需要关注少
量的语句并且只要弄懂少量变量的可能的值即可。
第二，隐藏实现的细节，可以防止调用方依赖那些可能变化的具体实现，这样使设计包的程
序员在不破坏对外的api情况下能得到更大的自由。
把bytes.Buffer这个类型作为例子来考虑。这个类型在做短字符串叠加的时候很常用，所以在
设计的时候可以做一些预先的优化，比如提前预留一部分空间，来避免反复的内存分配。又
因为Buffer是一个struct类型，这些额外的空间可以用附加的字节数组来保存，且放在一个小
写字母开头的字段中。这样在外部的调用方只能看到性能的提升，但并不会得到这个附加变
量。Buffer和其增长算法我们列在这里，为了简洁性稍微做了一些精简：
封装 227
gopl
type Buffer struct {
buf []byte
initial [64]byte
/* ... */
}
// Grow expands the buffer's capacity, if necessary,
// to guarantee space for another n bytes. [...]
func (b *Buffer) Grow(n int) {
if b.buf == nil {
b.buf = b.initial[:0] // use preallocated space initially
}
if len(b.buf)+n > cap(b.buf) {
buf := make([]byte, b.Len(), 2*cap(b.buf) + n)
copy(buf, b.buf)
b.buf = buf
}
}
封装的第三个优点也是最重要的优点，是阻止了外部调用方对对象内部的值任意地进行修
改。因为对象内部变量只可以被同一个包内的函数修改，所以包的作者可以让这些函数确保
对象内部的一些值的不变性。比如下面的Counter类型允许调用方来增加counter变量的值，并
且允许将这个值reset为0，但是不允许随便设置这个值(译注：因为压根就访问不到)：
type Counter struct { n int }
func (c *Counter) N() int { return c.n }
func (c *Counter) Increment() { c.n++ }
func (c *Counter) Reset() { c.n = 0 }
只用来访问或修改内部变量的函数被称为setter或者getter，例子如下，比如log包里的Logger
类型对应的一些函数。在命名一个getter方法时，我们通常会省略掉前面的Get前缀。这种简
洁上的偏好也可以推广到各种类型的前缀比如Fetch，Find或者Lookup。
package log
type Logger struct {
flags int
prefix string
// ...
}
func (l *Logger) Flags() int
func (l *Logger) SetFlags(flag int)
func (l *Logger) Prefix() string
func (l *Logger) SetPrefix(prefix string)
封装 228
gopl
Go的编码风格不禁止直接导出字段。当然，一旦进行了导出，就没有办法在保证API兼容的
情况下去除对其的导出，所以在一开始的选择一定要经过深思熟虑并且要考虑到包内部的一
些不变量的保证，未来可能的变化，以及调用方的代码质量是否会因为包的一点修改而变
差。
封装并不总是理想的。 虽然封装在有些情况是必要的，但有时候我们也需要暴露一些内部内
容，比如：time.Duration将其表现暴露为一个int64数字的纳秒，使得我们可以用一般的数值
操作来对时间进行对比，甚至可以定义这种类型的常量：
const day = 24 * time.Hour
fmt.Println(day.Seconds()) // "86400"
另一个例子，将IntSet和本章开头的geometry.Path进行对比。Path被定义为一个slice类型，
这允许其调用slice的字面方法来对其内部的points用range进行迭代遍历；在这一点上，IntSet
是没有办法让你这么做的。
这两种类型决定性的不同：geometry.Path的本质是一个坐标点的序列，不多也不少，我们可
以预见到之后也并不会给他增加额外的字段，所以在geometry包中将Path暴露为一个slice。
相比之下，IntSet仅仅是在这里用了一个[]uint64的slice。这个类型还可以用[]uint类型来表
示，或者我们甚至可以用其它完全不同的占用更小内存空间的东西来表示这个集合，所以我
们可能还会需要额外的字段来在这个类型中记录元素的个数。也正是因为这些原因，我们让
IntSet对调用方不透明。
在这章中，我们学到了如何将方法与命名类型进行组合，并且知道了如何调用这些方法。尽
管方法对于OOP编程来说至关重要，但他们只是OOP编程里的半边天。为了完成OOP，我们
还需要接口。Go里的接口会在下一章中介绍。
封装 229
gopl
第七章 接口
接口类型是对其它类型行为的抽象和概括；因为接口类型不会和特定的实现细节绑定在一
起，通过这种抽象的方式我们可以让我们的函数更加灵活和更具有适应能力。
很多面向对象的语言都有相似的接口概念，但Go语言中接口类型的独特之处在于它是满足隐
式实现的。也就是说，我们没有必要对于给定的具体类型定义所有满足的接口类型；简单地
拥有一些必需的方法就足够了。这种设计可以让你创建一个新的接口类型满足已经存在的具
体类型却不会去改变这些类型的定义；当我们使用的类型来自于不受我们控制的包时这种设
计尤其有用。
在本章，我们会开始看到接口类型和值的一些基本技巧。顺着这种方式我们将学习几个来自
标准库的重要接口。很多Go程序中都尽可能多的去使用标准库中的接口。最后,我们会在
(§7.10)看到类型断言的知识，在(§7.13)看到类型开关的使用并且学到他们是怎样让不同的类
型的概括成为可能。