0831300, CNS-1017265, DGE-1500084, CNS-1563848, SFS-1565523,
CRI-1629851, and CNS-1704701, ONR under grant N00014-15-1-
2162, N00014-16-1-2710, and N00014-17-1-2895, DARPA TC (No.
DARPA FA8650-15-C-7556) and XD3 programs (No. DARPA HR0011-
16-C-0059), and ETRI IITP/KEIT [B0101-17-0644].
REFERENCES
[1] A. Aiken. 2017. Moss: a system for detecting software plagiarism. (2017).
http://theory.stanford.edu/~aiken/moss/
[2] Devdatta Akhawe. 2015. Security bug resolved in the Dropbox SDKs for
Android. (2015). https://blogs.dropbox.com/developers/2015/03/
security-bug-resolved-in-the-dropbox-sdks-for-android/
[3] Antepedia. 2017. Antepedia, Software Artifacts Knowledge Base. (2017).
http://www.antepedia.com
[4] AppBrain. 2016. Android library statistics. (2016).
http://www.appbrain.com/stats/libraries
[5] AppBrain. 2017. Number of Android applications. (2017).
https://www.appbrain.com/stats/free-and-paid-android-applications
[6] Atlassian, Inc. 2016. Code, Manage, Collaborate. (2016). https://bitbucket.org
[7] Michael Backes, Sven Bugiel, and Erik Derr. 2016. Reliable Third-Party Library
Detection in Android and its Security Applications. In Proceedings of the 23rd
ACM Conference on Computer and Communications Security (CCS). Vienna,
Austria.
[8] Brenda S. Baker. 1995. On Finding Duplication and Near-Duplication in Large
Software Systems. In Proceedings of the 2nd Working Conference on Reverse
Engineering (WCRE). Toronto, Ontario, Canada.
[9] Brenda S. Baker. 1997. Parameterized Duplication in Strings: Algorithms and an
Application to Software Maintenance. SIAM J. Comput. 26, 5 (Oct. 1997),
1343–1362.
[10] Brenda S. Baker and Udi Manber. 1998. Deducing Similarities in Java Sources
from Bytecodes. In Proceedings of the 1998 USENIX Annual Technical Conference
(ATC). New Orleans, Louisiana.
[11] Ira D. Baxter, Andrew Yahin, Leonardo Moura, Marcelo Sant’Anna, and Lorraine
Bier. 1998. Clone Detection Using Abstract Syntax Trees. In Proceedings of the
International Conference on Software Maintenance (ICSM). Bethesda, Maryland,
USA.
[12] Eli Bendersky. 2016. Pure-python library for parsing ELF and DWARF. (2016).
https://github.com/eliben/pyelftools
[13] Ravi Bhoraskar, Seungyeop Han, Jinseong Jeon, Tanzirul Azim, Shuo Chen,
Jaeyeon Jung, Suman Nath, Rui Wang, and David Wetherall. 2014. Brahmastra:
Driving Apps to Test the Security of Third-Party Components. In Proceedings of
the 23rd USENIX Security Symposium (Security). San Diego, CA.
[14] Bintray.com. 2016. JCenter is the place to find and share popular Apache Maven
packages. (2016). https://bintray.com/bintray/jcenter
[15] Black Duck Software, Inc. 2016. Black Duck Protex Automate Open Source
Compliance. (2016). https://www.blackducksoftware.com/products/protex
[16] Theodore Book, Adam Pridgen, and Dan S. Wallach. 2013. Longitudinal Analysis
of Android Ad Library Permissions. In Proceedings of the IEEE CS Security and
Privacy Workshops (SPW). San Francisco, CA.
[17] Martial Bourquin, Andy King, and Edward Robbins. 2013. BinSlayer: Accurate
Comparison of Binary Executables. In Proceedings of the 13th ACM SIGPLAN
Program Protection and Reverse Engineering Workshop. Rome, Italy.
[18] CeleryProject. 2016. Celery: Distributed Task Queue. (2016).
http://www.celeryproject.org
[19] Moses S Charikar. 2002. Similarity estimation techniques from rounding
algorithms. In Proceedings of the 34th Annual ACM Symposium on Theory of
Computing (STOC). MontrÃľal, QuÃľbec, Canada.
[20] Brant A Cheikes, David Waltermire, and Karen Scarfone. 2011. Common
platform enumeration: Naming specification version 2.3. NIST Interagency
Report 7695, NIST-IR 7695 (2011).
[21] Eric Chen, Yutong Pei, Shuo Chen, Yuan Tian, Robert Kotcher, and Patrick
Tague. 2014. OAuth Demystified for Mobile Application Developers. In
Proceedings of the 21st ACM Conference on Computer and Communications
Security (CCS). Scottsdale, Arizona.
[22] Kai Chen, Peng Liu, and Yingjun Zhang. 2014. Achieving Accuracy and
Scalability Simultaneously in Detecting Application Clones on Android Markets.
In Proceedings of the 36th International Conference on Software Engineering (ICSE).
Hyderabad, India.
[23] Seokwoo Choi, Heewan Park, Hyun-Il Lim, and Taisook Han. 2007. A Static
Birthmark of Binary Executables Based on API Call Structure. In Proceedings of
the 12th Advances in Computer Science Conference: computer and network security.
Doha, Qatar, 2–16.
[24] Corona Labs. 2016. Cross-Platform Mobile App Development for iOS, Android.
(2016). https://coronalabs.com
[25] Jonathan Crussell, Clint Gibler, and Hao Chen. 2012. Attack of the Clones:
Detecting Cloned Applications on Android Markets. In Proceedings of the 17th
European Symposium on Research in Computer Security (ESORICS). Pisa, Italy.
[26] Jonathan Crussell, Clint Gibler, and Hao Chen. 2015. AnDarwin: Scalable
Detection of Android Application Clones Based on Semantics. IEEE Transactions
on Mobile Computing 14, 10 (2015), 2007–2019.
[27] Stéphane Ducasse, Matthias Rieger, and Serge Demeyer. 1999. A Language
Independent Approach for Detecting Duplicated Code. In Proceedings of the
International Conference on Software Maintenance (ICSM). Oxford, England, UK.
[28] Sebastian Eschweiler, Khaled Yakdan, and Elmar Gerhards-Padilla. 2016.
discovre: Efficient cross-architecture identification of bugs in binary code. In
Proceedings of the 2016 Annual Network and Distributed System Security
Symposium (NDSS). San Diego, CA.
[29] F-Droid Limited and Contributors. 2016. F-Droid. (2016). https://f-droid.org
[30] Qian Feng, Rundong Zhou, Chengcheng Xu, Yao Cheng, Brian Testa, and Heng
Yin. 2016. Scalable Graph-based Bug Search for Firmware Images. In Proceedings
of the 23rd ACM Conference on Computer and Communications Security (CCS).
Vienna, Austria.
[31] FOSSology Workgroup. 2016. Open Source License Compliance by Open Source
Software. (2016). https://www.fossology.org/
[32] Mark Gabel, Junfeng Yang, Yuan Yu, Moises Goldszmidt, and Zhendong Su. 2010.
Scalable and Systematic Detection of Buggy Inconsistencies in Source Code. In
Proceedings of the 20th Annual ACM Conference on Object-Oriented Programming,
Systems, Languages, and Applications (OOPSLA). Reno/Tahoe, Nevada, USA.
[33] Debin Gao, Michael K. Reiter, and Dawn Song. 2008. BinHunt: Automatically
Finding Semantic Differences in Binary Programs. In Proceedings of the 10th
International Conference on Information and Communications Security.
Birmingham, UK.
[34] GitHub, Inc. 2016. How people build software. (2016).
https://github.com/features
[35] Google Inc. 2016. Android Studio, The Official IDE for Android. (2016).
https://developer.android.com/studio/index.html
[36] Michael C Grace, Wu Zhou, Xuxian Jiang, and Ahmad-Reza Sadeghi. 2012.
Unsafe exposure analysis of mobile in-app advertisements. In Proceedings of the
ACM Conference on Security and Privacy in Wireless and Mobile Networks (WiSec).
Budapest, Hungary.
[37] Derrick Grover. 1989. The Protection of Computer Software—its Technology and
Applications. Cambridge University Press, New York, NY, USA. 119–150 pages.
[38] Steve Hanna, Ling Huang, Edward Wu, Saung Li, Charles Chen, and Dawn Song.
2012. Juxtapp: A Scalable System for Detecting Code Reuse Among Android
Applications. In Proceedings of the 9th Conference on Detection of Intrusions and
Malware and Vulnerability Assessment (DIMVA). Heraklion, Crete, Greece.
[39] Armijn Hemel, Karl Trygve Kalleberg, Rob Vermaas, and Eelco Dolstra. 2011.
Finding Software License Violations Through Binary Code Clone Detection. In
Proceedings of the 8th Working Conference on Mining Software Repositories (MSR).
Honolulu, HI.
[40] Adobe Systems Inc. 2016. Build amazing mobile apps powered by open web tech.
(2016). http://phonegap.com
[41] Google Inc. 2016. App Security Improvement Program. (2016).
https://developer.android.com/google/play/asi.html
[42] Google Inc. 2016. How to address MoPub vulnerabilities in your apps. (2016).
https://support.google.com/faqs/answer/6345928
[43] Google Inc. 2016. How to address OpenSSL vulnerabilities in your apps. (2016).
https://support.google.com/faqs/answer/6376725
[44] Google Inc. 2016. How to fix apps containing Libpng Vulnerability. (2016).
https://support.google.com/faqs/answer/7011127
[45] Jiyong Jang, Abeer Agrawal, and David Brumley. 2012. ReDeBug: finding
unpatched code clones in entire os distributions. In Proceedings of the 33rd IEEE
Symposium on Security and Privacy (Oakland). San Francisco, CA.
[46] Jiyong Jang, David Brumley, and Shobha Venkataraman. 2011. BitShred: Feature
Hashing Malware for Scalable Triage and Semantic Analysis. In Proceedings of
the 18th ACM Conference on Computer and Communications Security (CCS).
Chicago, Illinois.
15
Session J3:  Problematic PatchesCCS’17, October 30-November 3, 2017, Dallas, TX, USA2183[47] Lingxiao Jiang, Ghassan Misherghi, Zhendong Su, and Stephane Glondu. 2007.
Deckard: Scalable and accurate tree-based detection of code clones. In
Proceedings of the 29th International Conference on Software Engineering (ICSE).
Minneapolis, MN.
[48] J. Howard Johnson. 1993. Identifying Redundancy in Source Code Using
Fingerprints. In Proceedings of the 1993 Conference of the Centre for Advanced
Studies on Collaborative Research: Software Engineering - Volume 1. Toronto,
Ontario, Canada, 171–183.
[49] Toshihiro Kamiya, Shinji Kusumoto, and Katsuro Inoue. 2002. CCFinder: a
multilinguistic token-based code clone detection system for large scale source
code. IEEE Transactions on Software Engineering 28, 7 (2002).
[50] Dongjin Kim, Seong je Cho, Sangchul Han, Minkyu Park, and Ilsun You. 2014.
Open Source Software Detection using Function-level Static Software Birthmark.
Journal of Internet Services and Information Security (JISIS) 4, 4 (2014), 25–37.
[51] Seulbae Kim, Seunghoon Woo, Heejo Lee, and Hakjoo Oh. 2017. VUDDY: A
Scalable Approach for Vulnerable Code Clone Discovery. In Proceedings of the
38th IEEE Symposium on Security and Privacy (Oakland). San Jose, CA.
[52] Raghavan Komondoor and Susan Horwitz. 2001. Using Slicing to Identify
Duplication in Source Code. In Proceedings of the 8th International Symposium on
Static Analysis. Paris, France.
[53] Mohit Kumar. 2014. Facebook SDK vulnerability puts millions of smartphone
users’ accounts at risk. (2014).
http://thehackernews.com/2014/07/facebook-sdk-vulnerability-puts.html
[54] Eric Lafortune. 2016. ProGuard. (2016). http://proguard.sourceforge.net/
[55] Patrick Lam, Eric Bodden, Ondrej Lhoták, and Laurie Hendren. 2011. The Soot
framework for Java program analysis: a retrospective. In Proceedings of the 2011
Cetus Users and Compiler Infrastructure Workshop. Galveston Island, TX.
[56] Menghao Li, Wei Wang, Pei Wang, Shuai Wang, Dinghao Wu, Jian Liu, Rui Xue,
and Wei Huo. 2017. Libd: Scalable and precise third-party library detection in
Android markets. In Proceedings of the 39th International Conference on Software
Engineering (ICSE). Buenos Aires, Argentina.
[57] Zhenmin Li, Shan Lu, Suvda Myagmar, and Yuanyuan Zhou. 2004. CP-Miner: A
Tool for Finding Copy-paste and Related Bugs in Operating System Code. In
Proceedings of the 6th USENIX Symposium on Operating Systems Design and
Implementation (OSDI). San Francisco, CA.
[58] Jason Long. 2016. cve-search - a tool to perform local searches for known
vulnerabilities. (2016). http://cve-search.github.io/cve-search/
[59] Lannan Luo, Jiang Ming, Dinghao Wu, Peng Liu, and Sencun Zhu. 2014.
Semantics-based obfuscation-resilient binary code similarity comparison with
applications to software plagiarism detection. In Proceedings of the 22nd ACM
SIGSOFT Symposium on the Foundations of Software Engineering (FSE). Hong
Kong.
[60] Lannan Luo, Jiang Ming, Dinghao Wu, Peng Liu, and Sencun Zhu. 2017.
Semantics-based obfuscation-resilient binary code similarity comparison with
applications to software and algorithm plagiarism detection. IEEE Transactions
on Software Engineering PP, 99 (2017).
[61] Ziang Ma, Haoyu Wang, Yao Guo, and Xiangqun Chen. 2016. LibRadar: Fast and
Accurate Detection of Third-party Libraries in Android Apps. In Proceedings of
the 38th International Conference on Software Engineering (ICSE). Austin, TX.
[62] Audris Mockus. 2007. Large-Scale Code Reuse in Open Source Software. In
Proceedings of the First International Workshop on Emerging Trends in FLOSS
Research and Development. Minneapolis, MN.
[63] Patrick Mutchler, Adam Doupe, John Mitchell, and Chris Kruegeland Giovanni
Vigna. 2015. A Large-Scale Study of Mobile Web App Security. In Proceedings of
the Mobile Security Technologies (MoST). San Jose, CA.
[64] MvnRepository. 2016. Maven Repository: Search/Browse/Explore. (2016).
https://mvnrepository.com
[65] Ginger Myles and Christian Collberg. 2004. Detecting software theft via whole
program path birthmarks. In International Conference on Information Security.
Palo Alto, California.
[66] Ginger Myles and Christian Collberg. 2005. K-gram Based Software Birthmarks.
In Proceedings of the 2005 ACM Symposium on Applied Computing (SAC). Santa
Fe, New Mexico.
[67] Annamalai Narayanan, Lihui Chen, and Chee Keong Chan. 2014. Addetect:
Automated detection of android ad libraries using semantic analysis. In
Proceedings of the 9th Intelligent Sensors, Sensor Networks and Information
Processing. Singapore, Singapore.
[68] Matthias Neugschwandtner, Martina Lindorfer, and Christian Platzer. 2013. A
View To A Kill: WebView Exploitation. In Proceedings of the 6th USENIX
Workshop on Large-Scale Exploits and Emergent Threats (LEET). Washington, D.C.
[69] Ryan Paul. 2009. Cisco settles FSF GPL lawsuit, appoints compliance officer.
(2009). http://arstechnica.com/information-technology/2009/05/
cisco-settles-fsf-gpl-lawsuit-appoints-compliance-officer
[70] RedisLabs. 2016. Redis Cluster Specification. (2016).
http://redis.io/topics/cluster-spec
[71] Franziska Roesner and Tadayoshi Kohno. 2013. Securing Embedded User
Interfaces: Android and Beyond. In Proceedings of the 22th USENIX Security
Symposium (Security). Washington, DC.
[72] Inc Rogue Wave Software. 2016. Solve open source issues with full-stack
enterprise support. (2016).
http://www.roguewave.com/products-services/open-source-support
[73] Andreas Sæbjørnsen, Jeremiah Willcock, Thomas Panas, Daniel Quinlan, and
Zhendong Su. 2009. Detecting Code Clones in Binary Executables. In
Proceedings of the International Symposium on Software Testing and Analysis
(ISSTA). Chicago, IL.
[74] David Schuler and Valentin Dallmeier. 2006. Detecting software theft with api
call sequence sets. In Workshop Software Reengineering (WSR 2006). Bad-Honnef,
Germany.
[75] ScrapingHub. 2016. Scrapy, A Fast and Powerful Scraping and Web Crawling
Framework. (2016). https://scrapy.org
[76] Shashi Shekhar, Michael Dietz, and Dan S. Wallach. 2012. AdSplit: Separating
Smartphone Advertising from Applications. In Proceedings of the 21st USENIX
Security Symposium (Security). Bellevue, WA.
[77] Inc Sonatype. 2016. Sonatype Releases. (2016).
https://oss.sonatype.org/content/repositories/releases/
[78] SourceForge.net. 2016. Find, Create, and Publish Open Source software for free.
(2016). https://sourceforge.net
[79] Android Studio. 2016. Shrink Your Code and Resources. (2016).
https://developer.android.com/studio/build/shrink-code.html
[80] Mengtao Sun and Gang Tan. 2014. NativeGuard: Protecting Android
Applications from Third-Party Native Libraries. In Proceedings of the ACM
Conference on Security and Privacy in Wireless and Mobile Networks (WiSec).
Oxford, UK.
[81] Synopsys. 2017. Software Composition Analysis - Protecode. (2017).
https://www.synopsys.com/software-integrity/products/
software-composition-analysis.html
[82] Haruaki Tamada, Masahide Nakamura, and Akito Monden. 2004. Design and
evaluation of birthmarks for detecting theft of Java programs. In Proceedings of
the IASTED IASTED International Conference on Software Engineering. Innsbruck,
Austria.
[83] The Apache Software Foundation. 2016. Apache Maven Project. (2016).
https://maven.apache.org/index.html
[84] ToughDev. 2015. Comparison of popular PDF libraries on iOS and Android.
(2015). http://www.toughdev.com/content/2015/02/
comparison-of-popular-pdf-libraries-on-ios-and-android/
[85] Steven Vaughan. 2015. VMware sued for failure to comply with Linux license.
(2015). http://www.zdnet.com/article/
vmware-sued-for-failure-to-comply-with-linuxs-license
[86] Christopher Vendome. 2015. A Large Scale Study of License Usage on GitHub. In
Proceedings of the 37th International Conference on Software Engineering (ICSE).
Florence, Italy.
[87] Nicolas Viennot, Edward Garcia, and Jason Nieh. 2014. A Measurement Study of
Google Play. In Proceedings of the 2014 ACM SIGMETRICS Conference. Austin, TX.
[88] Haoyu Wang, Yao Guo, Ziang Ma, and Xiangqun Chen. 2015. WuKong: A
Scalable and Accurate Two-Phase Approach to Android App Clone Detection. In
Proceedings of the International Symposium on Software Testing and Analysis
(ISSTA). Baltimore, MA.
[89] Rui Wang, Yuchen Zhou, Shuo Chen, Shaz Qadeer, David Evans, and Yuri
Gurevich. 2013. Explicating SDKs: Uncovering Assumptions Underlying Secure
Authentication and Authorization. In Proceedings of the 22th USENIX Security
Symposium (Security). Washington, DC.
[90] Xinran Wang, Yoon-Chan Jhi, Sencun Zhu, and Peng Liu. 2009. Behavior Based
Software Theft Detection. In Proceedings of the 16th ACM Conference on
Computer and Communications Security (CCS). Chicago, IL.
[91] Xinran Wang, Yoon-Chan Jhi, Sencun Zhu, and Peng Liu. 2009. Detecting
software theft via system call based birthmarks. In Proceedings of the Annual
Computer Security Applications Conference (ACSAC). Honolulu, Hawaii, USA.
[92] Yifei Wang, Srinivas Hariharan, Chenxi Zhao, Jiaming Liu, and Wenliang Du.
2014. Compac: Enforce Component-level Access Control in Android. In
Proceedings of the 4th Annual ACM Conference on Data and Applications Security
and Privacy (CODASPY). San Antonio, TX.
[93] Fangfang Zhang, Heqing Huang, Sencun Zhu, Dinghao Wu, and Peng Liu. 2014.
ViewDroid: Towards Obfuscation-Resilient Mobile Application Repackaging
Detection. In Proceedings of the ACM Conference on Security and Privacy in
Wireless and Mobile Networks (WiSec). Oxford, UK.
[94] Xiao Zhang, Amit Ahlawat, and Wenliang Du. 2013. AFrame: Isolating
Advertisements from Mobile Applications in Android. In Proceedings of the
Annual Computer Security Applications Conference (ACSAC). New Orleans, LA.
[95] Wu Zhou, Yajin Zhou, Michael Grace, Xuxian Jiang, and Shihong Zou. 2013.
Fast, Scalable Detection of âĂĲPiggybackedâĂİ Mobile Applications. In
Proceedings of the 3rd Annual ACM Conference on Data and Applications Security
and Privacy (CODASPY). San Antonio, TX.
16
Session J3:  Problematic PatchesCCS’17, October 30-November 3, 2017, Dallas, TX, USA2184[96] Wu Zhou, Yajin Zhou, Xuxian Jiang, and Peng Ning. 2012. Detecting
Repackaged Smartphone Applications in Third-Party Android Marketplaces. In
Proceedings of the 2nd Annual ACM Conference on Data and Applications Security
and Privacy (CODASPY). San Antonio, TX.
[97] Yuchen Zhou and David Evans. 2014. SSOScan: Automated Testing of Web
Applications for Single Sign-On Vulnerabilities. In Proceedings of the 23rd
USENIX Security Symposium (Security). San Diego, CA.
[98] Zynamics. 2017. zynamics.com - BinDiff. (2017).
https://www.zynamics.com/bindiff.html
17
Session J3:  Problematic PatchesCCS’17, October 30-November 3, 2017, Dallas, TX, USA2185