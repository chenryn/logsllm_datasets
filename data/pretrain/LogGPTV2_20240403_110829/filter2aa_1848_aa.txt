2022*CTF-Web
写在前⾯
XCTF国际赛系列⼀直不错，周末参与了下这次⽐赛，虽然没有Java但总体还是蛮有意思
这⾥没按题⽬顺序写，只是写了在我⼼中从上到下的排序，对有源码的题⽬做了备份
oh-my-lotto
链接: https://pan.baidu.com/s/1G53aYqIIbHGlowdWFhkKqw  提取码: oism
oh-my-lotto
⼼⽬中⽐较有趣的⼀题呗，重⽣之我是赌神
这是⼀个⾮预期，因为后⾯又上了个revenge，简单分析下题⽬，先看看docker内容，可以知
道⼤概的结构
version: "3" 
services:
  lotto:
    build:
      context: lotto/
      dockerfile: Dockerfile
    container_name: "lotto"
之后看看代码，这⾥⾯有三个路由，从短到长
⾸先result路由返回 /app/lotto_result.txt ⽂件内容结果
forecast 路由可以上传⼀个⽂件保存到 /app/guess/forecast.txt
  app:  
    build:
      context: app/
      dockerfile: Dockerfile
    links:
      - lotto
    container_name: "app"
    ports:
      - "8880:8080"
@app.route("/result", methods=['GET'])
def result():
    if os.path.exists("/app/lotto_result.txt"):
        lotto_result = open("/app/lotto_result.txt", 'rb').read().decode()
    else:
        lotto_result = ''
    return render_template('result.html', message=lotto_result)
@app.route("/forecast", methods=['GET', 'POST'])
def forecast():
    message = ''
    if request.method == 'GET':
        return render_template('forecast.html')
    elif request.method == 'POST':
        if 'file' not in request.files:
            message = 'Where is your forecast?'
还有最关键的lotto路由(代码太多就不放完了)，可以
如果预测的值与环境随机⽣成的相等就能获得flag
        file = request.files['file']
        file.save('/app/guess/forecast.txt')
        message = "OK, I get your forecast. Let's Lotto!"
        return render_template('forecast.html', message=message)
os.system('wget --content-disposition -N lotto')
@app.route("/lotto", methods=['GET', 'POST'])
def lotto():
    elif request.method == 'POST':
        //看到flag从环境变量当中取出
        flag = os.getenv('flag')
        lotto_key = request.form.get('lotto_key') or ''
        lotto_value = request.form.get('lotto_value') or ''
        lotto_key = lotto_key.upper()
        if safe_check(lotto_key):
            os.environ[lotto_key] = lotto_value
            try:
                //从内⽹http://lotto当中获得随机值
                os.system('wget --content-disposition -N lotto')
                if os.path.exists("/app/lotto_result.txt"):
                    lotto_result = open("/app/lotto_result.txt", 
'rb').read()
                else:
                    lotto_result = 'result'
                if os.path.exists("/app/guess/forecast.txt"):
其中内⽹的lotto页⾯可以看到就是随机⽣成20个40以内随机数并返回
同时对于我们能控制的环境变量也有过滤 safe_check ，那像p⽜之前提到的直接RCE就不⾏
了
                    forecast = open("/app/guess/forecast.txt", 
'rb').read()
                else:
                    forecast = 'forecast'
                if forecast == lotto_result:
                    return flag
@app.route("/")
def index():
    lotto = []
    for i in range(1, 20):
        n = str(secrets.randbelow(40))
        lotto.append(n)
    r = '\n'.join(lotto)
    response = make_response(r)
    response.headers['Content-Type'] = 'text/plain'
    response.headers['Content-Disposition'] = 'attachment; 
filename=lotto_result.txt'
    return response
if __name__ == "__main__":
    app.run(debug=True, host='0.0.0.0', port=80)
def safe_check(s):
    if 'LD' in s or 'HTTP' in s or 'BASH' in s or 'ENV' in s or 'PROXY' in 
s or 'PS' in s: 
        return False
    return True
既然题⽬要求如果预测成功就返回给我flag，那有啥办法能控制吗，这⾥就⽤到了 PATH
PATH变量 就是⽤于保存可以搜索的⽬录路径，如果待运⾏的程序不在当前⽬录，操作系统便
可以去依次搜索 PATH变量 变量中记录的⽬录，如果在这些⽬录中找到待运⾏的程序，操作系
统便可以直接运⾏，前提是有执⾏权限
那这样就⽐较简单了，如果我们控制环境变量 PATH ，让他找不到 wget ，这样 wget --
content-disposition -N lotto 就会报错导致程序终⽌， /app/lotto_result.txt 当
中的内容就⼀直是第⼀次访问，随机⽣成的那个值了
1. 访问/lotto获得第⼀次的结果
2. 访问result页⾯记录内容下来备⽤
3. 修改环境变量PATH后，发送预测值，再次访问/lotto即可
可以看到确实得到了flag，其中res.txt是第⼀次环境随机⽣成的结果
oh-my-lotto-revenge
做了⼀个修正，就算预测成功也没有结果返回，那就考虑如何rce了
先读⽂档https://www.gnu.org/software/wget/manual/wget.html#:~:text=6.1-,Wgetrc%20Location,-
When%20initializing%2C%20Wget
if forecast == lotto_result:
  return "You are right!But where is flag?"
else:
  message = 'Sorry forecast failed, maybe lucky next time!'
  return render_template('lotto.html', message=message)
发现有⼀个 WGETRC ，如果我们能够控制环境变量就可以操纵wget的参数了，这⾥有很多有意
思的变量
这⾥说两个我解决这个问题⽤到的，⼀个是http_proxy，很明显如果配置了这个，本来是直接
wget访问 http://lotto 的就会先到我们这⾥做⼀个转发，我们就可以当⼀个中间⼈
做个实验，此时再wget以后，成功接收到这个请求
因此我们只需要控制返回内容即可，那既然可以控制内容了，那能否控制⽬录呢，正好有
output_document，相当于 -O 参数
那么我覆盖index.html打SSTI即可
因此得到payload，写⼊内容为