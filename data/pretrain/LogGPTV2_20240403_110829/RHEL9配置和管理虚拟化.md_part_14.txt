# []{#migrating-virtual-machines_configuring-and-managing-virtualization.html#sharing-virtual-machine-disk-images-with-other-hosts_migrating-virtual-machines}将虚拟机磁盘镜像与其他主机共享 {.title}
:::
要在 [支持的 KVM
主机](#migrating-virtual-machines_configuring-and-managing-virtualization.html#supported-hosts-for-virtual-machine-migration_migrating-virtual-machines "虚拟机迁移支持的主机"){.link}
间执行虚拟机实时迁移，需要共享虚拟机存储。本节提供将本地存储的虚拟机镜像与源主机以及使用
NFS 协议的目标主机共享的信息。
::: itemizedlist
**先决条件**
-   旨在迁移的虚拟机被关闭。
-   [**可选：**]{.strong}主机系统可用于托管不是源或目标主机的存储，但源和目标主机都可以通过网络访问它。这是共享存储的最佳解决方案，红帽推荐使用它。
-   请确定 NFS 文件锁定没有被使用，因为在 KVM 中不支持它。
-   在源主机和目标主机上安装并启用 NFS。如果没有：
    ::: orderedlist
    1.  安装 NFS 软件包：
        ``` literallayout
        # dnf install nfs-utils
        ```
    2.  确保防火墙中打开了 NFS 的端口，如 2049。
        ``` literallayout
        # firewall-cmd --permanent --add-service=nfs
        # firewall-cmd --permanent --add-service=mountd
        # firewall-cmd --permanent --add-service=rpc-bind
        # firewall-cmd --permanent --add-port=2049/tcp
        # firewall-cmd --permanent --add-port=2049/udp
        # firewall-cmd --reload
        ```
    3.  启动 NFS 服务。
        ``` literallayout
        # systemctl start nfs-server
        ```
    :::
:::
::: orderedlist
**流程**
1.  连接到提供共享存储的主机。在本例中，是 `cargo-bay`{.literal} 主机：
    ``` literallayout
    # ssh root@cargo-bay
    root@cargo-bay's password:
    Last login: Mon Sep 24 12:05:36 2019
    root~#
    ```
2.  创建存放磁盘镜像的目录，并将与迁移主机共享。
    ``` literallayout
    # mkdir /var/lib/libvirt/shared-images
    ```
3.  将虚拟机的磁盘镜像从源主机复制到新创建的目录。例如，以下命令将
    `wander1`{.literal} 虚拟机的磁盘镜像复制到\'cargo-bay\' 主机上的
    `/var/lib/libvirt/shared-images/`{.literal} 目录中：
    ``` literallayout
    # scp /var/lib/libvirt/images/wanderer1.qcow2 root@cargo-bay:/var/lib/libvirt/shared-images/wanderer1.qcow2
    ```
4.  在您要用于共享存储的主机上，将共享目录添加到
    `/etc/exports`{.literal} 文件中。以下示例将
    `/var/lib/libvirt/shared-images`{.literal} 目录与
    `source-example`{.literal} 和 `dest-example`{.literal} 主机共享：
    ``` literallayout
    /var/lib/libvirt/shared-images source-example(rw,no_root_squash) dest-example(rw,no_root_squash)
    ```
5.  在源和目标主机上，将共享目录挂载到
    `/var/lib/libvirt/images`{.literal} 目录中：
    ``` literallayout
    # mount cargo-bay:/var/lib/libvirt/shared-images /var/lib/libvirt/images
    ```
:::
::: itemizedlist
**验证**
-   要验证进程是否成功，在源主机上启动虚拟机并观察它是否正确引导。
:::
:::
::: section
::: titlepage
# []{#migrating-virtual-machines_configuring-and-managing-virtualization.html#migrating-a-virtual-machine-using-the-cli_migrating-virtual-machines}使用命令行界面迁移虚拟机 {.title}
:::
如果虚拟机所在的当前主机变得不适合或者无法再使用，或者要重新分发托管工作负载，您可以将该虚拟机迁移到另一个
KVM 主机中。本节介绍了各种迁移情境的信息和示例。
::: itemizedlist
**先决条件**
-   源主机和目标主机都使用 KVM 管理程序。
-   源主机和目标主机可以通过网络相互访问。使用 `ping`{.literal}
    程序进行验证。
-   确保目标主机上打开了以下端口：
    ::: itemizedlist
    -   使用 SSH 连接到目标主机需要端口 22。
    -   使用 TLS 连接到目标主机需要端口 16509。
    -   使用 TCP 连接到目标主机需要端口 16514。
    -   QEMU 需要端口 49152-49215 来传输内存和磁盘迁移数据。
    :::
-   要让红帽支持迁移，源主机和目标主机必须使用特定的操作系统和机器类型。要确定这种情况，请参阅
    ["虚拟机迁移支持的主机"一节](#migrating-virtual-machines_configuring-and-managing-virtualization.html#supported-hosts-for-virtual-machine-migration_migrating-virtual-machines "虚拟机迁移支持的主机"){.xref}。
-   将虚拟机的磁盘镜像迁移到源主机和目标主机都可以访问的独立联网位置中。这在离线迁移中是可选的，但在迁移运行的虚拟机时是必需的。
    有关设置这样的共享虚拟机存储的步骤，请参阅
    ["将虚拟机磁盘镜像与其他主机共享"一节](#migrating-virtual-machines_configuring-and-managing-virtualization.html#sharing-virtual-machine-disk-images-with-other-hosts_migrating-virtual-machines "将虚拟机磁盘镜像与其他主机共享"){.xref}。
-   迁移正在运行的虚拟机时，您的网络带宽必须高于虚拟机生成脏内存页的速度。
    要在启动实时迁移前获取虚拟机的脏页面率，请执行以下操作：
    ::: orderedlist
    1.  在一个短的时间段内监控 VM 的脏页面生成速度。
        ``` literallayout
        # virsh domdirtyrate-calc vm-name 30
        ```
    2.  监控完成后，获取其结果：
        ``` literallayout
        # virsh domstats vm-name --dirtyrate
        Domain: 'vm-name'
          dirtyrate.calc_status=2
          dirtyrate.calc_start_time=200942
          dirtyrate.calc_period=30
          dirtyrate.megabytes_per_second=2
        ```
        在本例中，虚拟机每秒生成 2 MB
        脏内存页。如果不暂停虚拟机或降低其工作负载，试图在带有 2 MB/s
        或更少的带宽的网络上进行实时迁移会导致实时迁移不会进行。
        为确保实时迁移成功完成，红帽建议您的网络带宽明显大于虚拟机的脏页面生成率。
    :::
-   当迁移公共网桥中现有虚拟机时，源和目标主机必须位于同一网络中。否则，迁移后
    VM 网络将不会操作。
-   在执行虚拟机迁移时，源主机上的 `virsh`{.literal}
    客户端可以使用多种协议之一连接到目标主机上的 libvirt
    守护进程。以下流程中的示例使用 SSH 连接，但您可以选择不同的连接。
    ::: itemizedlist
    -   如果您希望 libvirt 使用 SSH 连接，请确保启用
        `virtqemud`{.literal} 套接字并在目标主机上运行。
        ``` literallayout
        # systemctl enable --now virtqemud.socket
        ```
    -   如果您希望 libvirt 使用 TLS 连接，请确保启用
        `virtproxyd-tls`{.literal} 套接字并在目标主机上运行。
        ``` literallayout
        # systemctl enable --now virtproxyd-tls.socket
        ```
    -   如果您希望 libvirt 使用 TCP 连接，请确保
        `virtproxyd-tcp`{.literal} 套接字已经启用并在目标主机上运行。
        ``` literallayout
        # systemctl enable --now virtproxyd-tcp.socket
        ```
    :::
:::
::: orderedlist
**步骤**
1.  使用 `virsh migrate`{.literal} 命令以及适合您的迁移要求的选项。
    ::: itemizedlist
    -   下面使用 SSH 隧道将 `wanderer1`{.literal} 虚拟机从本地主机迁移到
        `dest-example`{.literal}
        主机的系统连接。虚拟机将在迁移过程中继续运行。
        ``` literallayout
        # virsh migrate --persistent --live wanderer1 qemu+ssh://dest-example/system
        ```
    -   以下操作可让您手动调整本地主机上运行的 `wanderer2`{.literal}
        虚拟机的配置，然后将虚拟机迁移到 `dest-example`{.literal}
        主机。迁移的虚拟机将自动使用更新的配置。
        ``` literallayout
        # virsh dumpxml --migratable wanderer2 >wanderer2.xml
        # vi wanderer2.xml
        # virsh migrate --live --persistent --xml wanderer2.xml wanderer2 qemu+ssh://dest-example/system
        ```
        当目标主机需要使用不同路径访问共享虚拟机存储或配置特定于目标主机的功能时，这个过程很有用。
    -   以下命令会从 `source-example`{.literal} 主机挂起
        `wander3`{.literal} 虚拟机，将其迁移到 `dest-example`{.literal}
        主机，并指示它使用由 `wander3-alt.xml`{.literal}
        文件提供的经过调整的 XML 配置。迁移完成后，`libvirt`{.literal}
        会在目标主机上恢复虚拟机。
        ``` literallayout
        # virsh migrate wanderer3 qemu+ssh://source-example/system qemu+ssh://dest-example/system --xml wanderer3-alt.xml
        ```
        迁移后，虚拟机在源主机上处于关闭状态，并在关闭后删除迁移的副本。
    -   以下从 `source-example`{.literal} 主机中删除已关闭的
        `wanderer4`{.literal} 虚拟机，并将其配置移到
        `dest-example`{.literal} 主机。
        ``` literallayout
        # virsh migrate --offline --persistent --undefinesource wanderer4 qemu+ssh://source-example/system qemu+ssh://dest-example/system
        ```
        请注意，这种类型的迁移不需要将虚拟机的磁盘镜像移到共享存储中。但是，为了使虚拟机在目标主机上可用，您还需要迁移虚拟机的磁盘镜像。例如：
        ``` literallayout
        # scp root@source-example:/var/lib/libvirt/images/wanderer4.qcow2 root@dest-example:/var/lib/libvirt/images/wanderer4.qcow2
        ```
    :::
2.  等待迁移完成。这个过程可能需要一些时间，具体要看网络带宽、系统负载和虚拟机的大小。如果
    `virsh migrate`{.literal} 没有使用 `--verbose`{.literal} 选项，CLI
    不会显示任何进度指示符，除了错误外。
    当迁移进行时，您可以使用 `virsh domjobinfo`{.literal}
    实用程序来显示迁移统计信息。
:::
::: itemizedlist
**验证**
-   在目标主机上，列出可用虚拟机以验证虚拟机是否已迁移：
    ``` literallayout
    # virsh list
    Id Name                 State
    ----------------------------------
    10 wanderer1              running
    ```
    请注意，如果迁移仍然在运行，这个命令会列出虚拟机状态为
    `paused（暂停）`{.literal}。
:::
::: itemizedlist
**故障排除**
-   在某些情况下，目标主机与迁移虚拟机 XML
    配置的某些值不兼容，比如网络名称或 CPU
    类型。因此，虚拟机将无法在目标主机上引导。要修复这些问题，您可以使用
    `virsh edit`{.literal}
    命令更新有问题的值。在更新值后，您必须重启虚拟机才能应用更改。
-   如果实时迁移需要很长时间才能完成，这可能是因为虚拟机负载很重，且有太多的内存页面改变使得实时迁移不可能实现。要解决这个问题，请挂起虚拟机，将迁移改为非实时迁移。
    ``` literallayout
    # virsh suspend wanderer1
    ```
:::
::: itemizedlist
**其他资源**
-   `virsh migrate --help`{.literal} 命令
-   `virsh`{.literal} man page
:::
:::
::: section
::: titlepage
# []{#migrating-virtual-machines_configuring-and-managing-virtualization.html#proc_live-migrating-a-virtual-machine-using-the-web-console_migrating-virtual-machines}使用 web 控制台实时迁移虚拟机 {.title}
:::
如果要迁移正在执行需要持续运行的任务的虚拟机(VM)，您可以在不关闭的情况下将该虚拟机迁移到另一个
KVM 主机。这也被称为实时迁移。以下说明如何使用 Web 控制台进行此操作。
::: {.warning style="margin-left: 0.5in; margin-right: 0.5in;"}
### 警告 {.title}
如果任务修改内存页面的速度比 KVM 可以传输的速度快（如重度 I/O
负载任务），建议不要实时迁移虚拟机。
:::
::: itemizedlist
**先决条件**
-   Web 控制台 VM 插件
    [已安装在您的系统上](#managing-virtual-machines-in-the-web-console_configuring-and-managing-virtualization.html#setting-up-the-rhel-web-console-to-manage-vms_managing-virtual-machines-in-the-web-console "设置 web 控制台以管理虚拟机"){.link}。
-   源和目标主机正在运行。
-   确保目标主机上打开了以下端口：
    ::: itemizedlist
    -   使用 SSH 连接到目标主机需要端口 22。
    -   使用 TLS 连接到目标主机需要端口 16509。
    -   使用 TCP 连接到目标主机需要端口 16514。
    -   QEMU 需要端口 49152-49215 来传输内存和磁盘迁移数据。
    :::
-   虚拟机的磁盘镜像位于一个[共享存储](#migrating-virtual-machines_configuring-and-managing-virtualization.html#sharing-virtual-machine-disk-images-with-other-hosts_migrating-virtual-machines "将虚拟机磁盘镜像与其他主机共享"){.link}中，该存储可以被源主机以及目标主机访问。
-   迁移正在运行的虚拟机时，您的网络带宽必须高于虚拟机生成脏内存页的速度。