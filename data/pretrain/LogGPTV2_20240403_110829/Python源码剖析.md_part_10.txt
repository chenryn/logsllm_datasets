现在回头来看看刚才提到的不同ryIntBlock对象的objects间的空闲内存的互连问
第2章Python中的整数对象
Pyint FromLong(3)
objects
next
一深度探索动态语言核心技术
图2-7
图2-8不同PylntBlock中的空闲内存的互连
objeets
创建和删除PyintObject对象时缓冲池的变化
next
已使用的内存块
删除3，调用int dealloc
Pylnt_FromLong(2)
Pylnt_FromLong(4)
A
objects
next
intdealloc(3)
objects
next
---
## Page 73
2.2.5
小整数对象被创建，然后就仙福永享，寿与天齐了。
list所维护的内存上的。在Pyhon初始化的时候，PyInt_Init被调用，内存被申请，
整数对象是在什么地方被创建和初始化的呢。完成这一切的神秘的函数正是_PyInt_Init。
图2-9所示），我们看到，它维护的只是PyIntobject的指针，那么这些与天地同寿的小
#endif
#iE NSMALLNEGINTS+NSMALLPOSINTS>O
[intobject.c]
小整数对象池的初始化
从小整数的创建过程中可以看到，这些永生不灭的小整数对象也是生存在由block
retunn l:
for （Ival -NSMALLNEGINTS:ival NSMALLPOSINTS:IvaI++)
PyIntObjeet*v;
现在，
Int ival:
objects
small Ants[ival + NSMALINEGINTS] =V
i（1Eree_list 6s(free_liat=Eill_free_list(））==NULL)
next
v->ob_ival
Pyobject_INIT(,&PyInt_Type);
/内联（inline）ByObject_New的行为
free
，关于Python的整数对象系统，
small_ints
returnO:
ival:
5
(Pyintobject)v->ob_type:
图2-9初始化完成之后的small_ints
4
还剩下最后一个问题了。在sma11_ints中（如
2.2
+
Python源码剖析
PyIntObject 对象的创建和维护
99100
objects
next
深度探索动态语言核心技术
---
## Page 74
Python源码剖析
2.3
44
和free_list的信息，以及小整数缓冲池的信息：
修改Python源码来实现。
战一场。我们希望在运行时观察Python的整数对象系统的变化。
statlcfnt
static
sLatic int
retumn0;
printf("
prlntE(" block_list count :名dvnr,
printE("\n");
printf("
printf("\n);
printf("
for(i
printt("
while(pJ NULL)
HackPylntObject
PyIntBlock
PyIntobject* intobjectPt:
int
现在，让我们荡起双桨，哦，不对，让我们挽起衣袖和裤脚，
第2章
print(*%a\E*.
printf(*dvt",values[i);
refcounts[i]
values[i]]
count
0next;
address @ap\n”,v);
values[10];
Python中的整数对象
int_print(PyIntObject*v,ILn*fR
refcounts[lol;
p=block_liat
=N_INTOBUECTS
intobjectPtr->ob_ival;
=1ntobJectPtr->ob_refcnt;
我们修改了int_print的行为，让它打印出关于blockiist
free_list):
counE)
int flags)
这一点，完全可以通过
---
## Page 75
确实是两个完全没有关系的pyIntobject对象，这点从地址上看得一清二楚。
b的地址也正是创建a后free_list所指的地址。虽然a和b的值都是一样的，但是它们
object对象，它们的值分别是-12345：
那么下一个PyTntObject会在这个地址安身立命。那么好，我们接着再建立了两个pyInt-
整数对象很多都被Python自身使用多次了。
的一块内存，才能观察从-5到4这10个小整数。
PyIntBlock对象的objects内最后一块内存，所以我们需要顺藤摸瓜，
objects，都是从后往前开始填充的，所以在初始化完成后，-5应该在最后一个
现在我们将b删除，结果如图2-12所示：
从图2-11所示的结果中可以看到a的地址正是创建主后free_1ist所指的地址，而
现在的Eree_list指向地址为00C191E4的内存，根据上面对PyIntobject的分析，
首先我们创建一个PyIntobject对象-9999，从图2-10所示的输出信息可以看到，小
需要特别注意的是，在初始化小整数缓冲池时，对于block_1ist及每个PyIntBlock
free list:00C191FC
qop
6666-=b=-12345
>>a=-12345
free_list:00C191E4
block
refont:1
value:
address000C191F0
lock
value-5
freeilist:00C191D8
refcnt
value:-5
freelist:00C191PC
block
addre5s000C191E4
yalue
list
1
-5
ch
count
图2-11
图2-12
图2-10
1
整数对象系统内部状态之三
整数对象系统内部状态之二
整数对象系统内部状态之一
D
ython源码剖析
112
Hack PyintObject
一深度探索动态语言核心技术
一直找到这最后
45
---
## Page 76
Python源码剖析
46
们对PyIntobject的分析相符。
c1和c2实际上都是指向这个对象的。此外，free_list没有发生任何变化。这些都与我
们实际上是同一个对象。同时，我们看到小整数池中一5的引用计数发生了变化，这证明
如图2-13所示：
析是一致的。
可以看到，两次创建的PyIntobject对象c1和c2的地址都是00AB5948，这证明它
最后我们来看一看对小整数对象的监控：
删除b后，
第2章
深度探索动态语言核心技术
Python中的整数对象
blook
address @00AB5948
free_list
address000AB5948
free_list
list
5
count:6
00C191FC
回退到了a创建后
图2-13
小整数对象的内部状态
连续两次创建
ree_list的位置，这一点也跟前面的分
112
PyIntObject对象-5，结果
---
## Page 77
3.1
不同的pystringObject对象，其内部所需的保存字符串内容的内存空间显然是不一样
有可变长度内存的对象，这一点非常容易理解，因为对于表示“H”和“python”的两个
象—字符串对象。
tuple，它们都不支持添加或删除的操作。本章我们将研究Pyhon变长对象中的不可变对
不可变对象所维护的数据在对象创建之后就不能再改变了，比如Pyhon中的string和
list被创建后，可以向其中添加元素或删除元素，这些操作都会改变其维护的数据：
分为可变对象和不可变对象。可变对象维护的数据在对象被创建后还能再变化，比如一个
在此之前，对这个信息，我们一无所知。
举个例子来说，我们只能在创建一个字符串或一个列表时知道它们所维护的数据的长度，
与定长对象不同，对于变长对象而言，对象维护的数据的长度在对象定义时是不知道的。
对象）。在Pyhon中，还大量存在着另一种对象，即具有可变长度数据的对象（变长对象）。
对象可作为dict的键值，但同时也使得一些字符串操作的效率大大降低，比如多个字符
象之后，该对象内部维护的字符串就不能再被改变了。这一点特性使得PyStringobject
一个C中1ong变量的长度：而可变对象维护的数据的长度只能在对象创建时才能确定，
PyStringObject 与 PyString_Type
在Python中，pyStringobject是对字符串对象的实现。PyStringobject是一个拥
前一章描述了“可变对象”和“不可变对象”的区别，在变长对象中，实际上也还可
考虑整数对象pyIntobject，其维护的数据的长度在对象定义时就已经确定了，它是
在对PyIntobject的分析中，我们看到了Python中具有不可变长度数据的对象（定长
Python中的字符串对象
Python源码剖析
一深度探索动态语言核心技术
第
CHAPTER
3
事
而
---
## Page 78
Python源码剖析
48
的算法：
会看到，这个hash值将发挥巨大的作用。在计算一个字符串对象的hash值时，采用如下
算过hash值，那么ob_shash的初始值是一1。以后在剖析Python中aict的时候，我们
每一次都重新计算该字符串对象的hash值。如果一个PyStringobject对象还没有被计
ob_size+1个字节的内存，而且必须满足ob_sval[ob_size】==o。
符o，就认为一个字符串结束了。所以，实际上，ob_sva1指向的是一段长度为
象中间是可能出现字符0的，这一点与C语言中不同，因为在C中，只要遇到了字
但是由于字符串的实际长度是由ob_size维护的，所以PyStringobject表示的字符串对
PyStringobject对象“Python”，obsize的值就是6。
ob_size来维护的，这个机制是Pyhon中所有变长对象的实现机制。比如对于
际字符串，显然，这段内存不会只是一个字节。而这段内存的实际长度（字节），正是由
实际上是作为一个字符指针指向一段内存的，这段内存保存着这个字符串对象所维护的实
小。虽然在PyStringobject的定义中，ob_sval是一个字符的字符数组。但是ob_sval
Pyobject_VAR_HEAD，其中有一个ob_size变量保存着对象中维护的可变长度内存的大
串的连接操作。
static long string_hash(Pystringobject a)
[atringobject.c]
PyStringobject;
[stringobject.h]
PyStringObject中的ob_shash变量之作用是缓存该对象的hash值，这样可以避免
PyStringobject对象的定义如下：
在PyStringobject 的定义中我们看到，在PyStringobject的头部实际上是一个
第3章Python中的字符串对象
x=a->ob_size;
register int len;
同c中的字符串一样，Pystringobject内部维护的字符串在末尾必须以，o结尾，
register
一
register
char ob_sval[1];
en= a->ob_slze;
int ob_sstate:
(a->ob_shash!=-1)
(unsigned char*)a=>obsval;
一深度探索动态语言核心技术
公
long xi
=0）
*D++
---
## Page 79
3.2
即一个字节。对于Python中的任何一种变长对象，tp-比emsize这个域是必须设置的，
预存字符事的hash值和这里的intern机制将Python虚拟机的执行效率提升了20%。
关于eyStringobject的intern机制，在后面会详细介绍。在Python源码中的注释显示，
代码清单3-1
察一下最一般的PyString_EromString（见代码清单3-1）。
个域都被设置了。这表示PyStringobject对数值操作、序列操作和映射操作都支持。
之总大小是多少。
个元素在内存中的长度。这个tp_itemsize和ob_size共同决定了应该额外申请的内存
tp_itemsize指明了由变长对象保存的元素（item）的单位长度，所谓单位长度即是指一
Pyobjeet*PyString_Enomstring(const char *str)
[stringobject.c]
PyTypeobject
[stringobject.c]
创建PyStringObject 对象
PyStringObject对象的ob_sstate变量标记了该对象是否已经过intem机制的处理，
Python提供了两条路径，从C中原生的字符串创建pyStringobject对象。我们先考
可以看到，在pyStringobject 的类型对象中，tp_itemsize被设置为sizeof（char），
&string_as_sequence,
&string_as_number,