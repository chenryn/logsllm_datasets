Aparallelindexscan:
=> EXPLAIN SELECT sum(total_amount)
FROM bookings WHERE book_ref  Gather (cost=19192.59..19192.80 rows=2 width=32)
Workers Planned: 2
−> Partial Aggregate (cost=18192.59..18192.60 rows=1 widt...
−> Parallel Index Scan using bookings_pkey on bookings
(cost=0.43..17642.82 rows=219907 width=6)
Index Cond: (book_ref  EXPLAIN SELECT sum(total_amount)
FROM bookings WHERE total_amount  Gather (cost=23370.38..23370.59 rows=2 width=32)
Workers Planned: 2
−> Partial Aggregate (cost=22370.38..22370.39 rows=1 widt...
−> Parallel Index Only Scan using bookings_total_amoun...
(cost=0.43..21387.27 rows=393244 width=6)
Index Cond: (total_amount  EXPLAIN SELECT sum(total_amount)
FROM bookings WHERE book_date  Gather (cost=21491.99..21492.20 rows=2 width=32)
Workers Planned: 2
−> Partial Aggregate (cost=20491.99..20492.00 rows=1 widt...
−> Parallel Bitmap Heap Scan on bookings
(cost=4891.17..20133.01 rows=143588 width=6)
Recheck Cond: (book_date  Bitmap Index Scan on bookings_book_date_idx
(cost=0.00..4805.01 rows=344611 width=0)
Index Cond: (book_date  EXPLAIN SELECT * FROM aircrafts_data a1
CROSS JOIN aircrafts_data a2
WHERE a2.range > 5000;
QUERY PLAN
−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−
Nested Loop (cost=0.00..2.78 rows=45 width=144)
−> Seq Scan on aircrafts_data a1
outerset
(cost=0.00..1.09 rows=9 width=72)
−> Materialize (cost=0.00..1.14 rows=5 width=72)
−> Seq Scan on aircrafts_data a2
innerset
(cost=0.00..1.11 rows=5 width=72)
Filter: (range > 5000)
(7 rows)
TheNested Loopnodeperformsajoinusingthealgorithmdescribedabove. Ital-
wayshastwochildnodes: theonethatisdisplayedhigherintheplancorresponds
totheoutersetofrows,whiletheloweronerepresentstheinnerset.
1 backend/executor/nodeNestloop.c
399
Chapter21 NestedLoop
Inthisexample,theinnersetisrepresentedbytheMaterializenode.1 Thisnodere-
turnstherowsreceivedfromitschildnode,havingsavedthemforfutureuse(the
4MB rows are accumulated in memory until their total size reaches work_mem; then
Postgre starts spilling them into a temporary file on disk). If accessed again,
thenodereadstheaccumulatedrowswithoutcallingthechildnode.Thus,theex-
ecutorcanavoidscanningthefulltableagainandreadonlythoserowsthatsatisfy
thecondition.
Asimilarplancanalsobebuiltforaquerythatusesaregularequi-join:
=> EXPLAIN SELECT *
FROM tickets t
JOIN ticket_flights tf ON tf.ticket_no = t.ticket_no
WHERE t.ticket_no = '0005432000284';
QUERY PLAN
−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−
Nested Loop (cost=0.99..25.05 rows=3 width=136)
−> Index Scan using tickets_pkey on tickets t
(cost=0.43..8.45 rows=1 width=104)
Index Cond: (ticket_no = '0005432000284'::bpchar)
−> Index Scan using ticket_flights_pkey on ticket_flights tf
(cost=0.56..16.58 rows=3 width=32)
Index Cond: (ticket_no = '0005432000284'::bpchar)
(7 rows)
Having recognized the equality of the two values, the planner replaces the join
conditiontf.ticket_no=t.ticket_nobythetf.ticket_no=constantcondition,virtually
reducinganequi-jointoaCartesianproduct.2
Cardinalityestimation. ThecardinalityofaCartesianproductisestimatedatthe
productofcardinalitiesofthejoineddatasets: 3=1×3.
Costestimation. Thestartupcostofthejoinoperationcombinesthestartupcosts
ofallchildnodes.
1 backend/executor/nodeMaterial.c
2 backend/optimizer/path/equivclass.c
400
21.2 NestedLoopJoins
Thefullcostofthejoinincludesthefollowingcomponents:
• thecostoffetchingalltherowsoftheouterset
• thecostofasingleretrievalofalltherowsoftheinnerset(sincethecardinality
estimationoftheoutersetequalsone)
• thecostofprocessingeachrowtobereturned
Hereisadependencygraphforthecostestimation:
QUERY PLAN
−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−
Nested Loop (cost=0.99..25.05 rows=3 width=136)
−> Index Scan using tickets_pkey on tickets t
(cost=0.43..8.45 rows=1 width=104)
×1
Index Cond: (ticket_no = '0005432000284'::bpchar)
−> Index Scan using ticket_flights_pkey on ticket_flights tf
(cost=0.56..16.58 rows=3 width=32)
Index Cond: (ticket_no = '0005432000284'::bpchar)
(7 rows)
Thecostofthejoiniscalculatedasfollows:
=> SELECT 0.43 + 0.56 AS startup_cost,
round((
8.45 + 16.57 +
3 * current_setting('cpu_tuple_cost')::real
)::numeric, 2) AS total_cost;
startup_cost | total_cost
−−−−−−−−−−−−−−+−−−−−−−−−−−−
0.99 | 25.05
(1 row)
Nowlet’sgetbacktothepreviousexample:
=> EXPLAIN SELECT *
FROM aircrafts_data a1
CROSS JOIN aircrafts_data a2
WHERE a2.range > 5000;
401
Chapter21 NestedLoop
QUERY PLAN
−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−
Nested Loop (cost=0.00..2.78 rows=45 width=144)
−> Seq Scan on aircrafts_data a1
(cost=0.00..1.09 rows=9 width=72)
−> Materialize (cost=0.00..1.14 rows=5 width=72)
−> Seq Scan on aircrafts_data a2
(cost=0.00..1.11 rows=5 width=72)
Filter: (range > 5000)
(7 rows)
The plan now contains the Materialize node; having once accumulated the rows
receivedfromitschildnode,Materializereturnsthemmuchfasterforallthesub-
sequentcalls.
Ingeneral,thetotalcostofajoincomprisesthefollowingexpenses:1
• thecostoffetchingalltherowsoftheouterset
• thecostoftheinitialfetchofalltherowsoftheinnerset(duringwhichma-
terializationisperformed)
• (N−1)-foldcostofrepeatfetchesofrowsoftheinnerset(hereNisthenumber
ofrowsintheouterset)
• thecostofprocessingeachrowtobereturned
Thedependencygraphhereisasfollows:
QUERY PLAN
−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−
Nested Loop (cost=0.00..2.78 rows=45 width=144)
−> Seq Scan on aircrafts_data a1
(cost=0.00..1.09 rows=9 width=72)
−> Materialize ×9
(cost=0.00..1.14 rows=5 width=72)
−> Seq Scan on aircrafts_data a2
(cost=0.00..1.11 rows=5 width=72)
Filter: (range > 5000)
(8 rows)
1 backend/optimizer/path/costsize.c,initial_cost_nestloopandfinal_cost_nestloopfunction
402
21.2 NestedLoopJoins
Inthisexample,materializationreducesthecostofrepeatdatafetches. Thecost
of the first Materialize call is shown in the plan, but all the subsequent calls are
notlisted. Iwillnotprovideanycalculationshere,1butinthisparticularcasethe
estimationis..
Thus,thecostofthejoinperformedinthisexampleiscalculatedasfollows:
=> SELECT 0.00 + 0.00 AS startup_cost,
round((
1.09 + (1.14 + 8 * 0.0125) +
45 * current_setting('cpu_tuple_cost')::real
)::numeric, 2) AS total_cost;