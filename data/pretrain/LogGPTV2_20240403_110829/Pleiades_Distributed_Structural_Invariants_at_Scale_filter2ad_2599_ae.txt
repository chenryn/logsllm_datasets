62
61
58
59
7
6
5
2
67
66
56
57
1
33
31
30
8
11
12
14
15
16
17
18
19
29
28
20
21
41
26
22
24
9
43
46
45
91
43
92
42
93
94
97
31
98
99
33
0
1
2
3
85
84
32
96
68
64
86
34
77
95
88
65
66
69
78
70
71
40
67
53
5
36
79
59
72
4
73
35
37
63
75
76
58
16
38
39
22
17
20
21
23
24
25
26
27
28
29
8
41
9
44
12
80
13
50
18
52
87
19
89
51
49
48
47
30
56
90
7
74
82
83
81
62
54
55
57
61
6
60
10
11
14
15
83
77
25
99
33
44
64
48
69
38
21
23
8
7
51
54
52
35
57
37
14
20
2
6
26
22
13
10
29
31
30
5
59
61
73
11
67
43
42
12
63
62
94
82
60
4
9
81
41
24
3
87
28
19
1
56
50
15
75
68
70
16
72
18
17
92
32
27
0
47
65
80
71
55
78
37
34
40
36
45
46
48
86
50
23
27
25
60
64
49
65
81
32
47
13
80
0
35
3
10
71
4
41
43
78
9
22
51
52
57
58
59
56
61
54
62
26
24
28
1
2
5
11
8
19
29
33
21
20
18
30
31
17
16
6
7
12
15
14
67
66
63
69
70
72
73
88
85
84
83
82
74
79
75
77
76
23
55
25
60
27
64
87
53
86
50
65
32
0
35
3
71
4
49
81
47
13
80
10
78
(a) Half the nodes crash (represented
with a dashed line). The topology is
completely broken.
(b) After 3 rounds, the system’s struc-
ture has been reestablished.
(c) After
reinjecting the crashed
nodes, the original structural invariant
has been lost.
(d) But after just 3 rouds the system
is back to the original target, even
faster than during the initial bootstrap
phase.
Figure 15: Resilience and self-repair after a dramatic crash or a large node injection.
more dynamic systems with TineeLime [9], and TOTA (Tuple
On The Air) [23]. Tuple-spaces are however more a high-level
coordination model than a mean of organizing a large number
of pre-existing entities as we do.
PLEIADES bears
Neighborhood primitives such as Hood [40], Abstract Re-
gions [39], and Logical Neighborhoods [29] are complemen-
tary to tuple-spaces. They provide scoping mechanisms that
limit communication to sets of nodes (regions, or neighbor-
hoods) selected according to a wide range of criteria. They are
largely orthogonal to our approach, and could be exploited for
instance to reﬁne the shape joining mechanism of PLEIADES.
some similarity to Fragmented Ob-
jects [19], [22], in which a component’s state is distributed
(fragmented) among a number of distributed nodes in a manner
that is fully transparent to its users. Fragmentation distributes
a component’s locus of computation, allowing for components
to thus execute concurrently in a fully distributed manner.
By relying on code mobility and state transfer mechanisms,
fragmented objects can allow a component to extend or retract
according to the current system’s needs. However, implemen-
tations of fragmented components proposed so far [19] tend to
be heavy-weight. They also typically rely solely on Remote
Procedure Calls (RPC), an interaction paradigm that is ill-
suited to loosely coupled large-scale systems.
PLEIADES can also be seen as a concrete example of some
of the high-level capabilities sketched out by Blair et al.
for Holons [3], a new paradigm for programming large-scale
distributed systems relying on autonomous self-organization
and opportunistic interactions.
VI. CONCLUSION & FUTURE WORKS
Large-scale distributed systems are becoming omnipresent
while growing in size and complexity. Specifying and im-
plementing such systems in a resilient manner is becoming
increasingly tiresome and cumbersome for developers.
To address this challenge, we have introduced the PLEIADES
framework. PLEIADES follows a programming-by-assembly
design, while exploiting self-organizing overlays. However,
PLEIADES goes a step further by considering elementary
shapes as collective distributed entities and by enabling the
creation of resilient, scalable, and complex distributed struc-
tural invariants through the assembly of these shapes.
552
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:50:29 UTC from IEEE Xplore.  Restrictions apply. 
To reach this aim, the PLEIADES framework combines six
self-organizing protocols that work together to construct and
maintain the structure prescribed in a PLEIADES conﬁguration
ﬁle. The resulting system is able to recover from catastrophic
crash failures—such as the loss of a majority of the system’s
nodes—in only a few rounds while consuming a very limited
bandwidth. PLEIADES further scales logarithmically in the
number of system’s nodes, and close to linearly in the number
of elementary shapes.
We are currently designing a Domain Speciﬁc Language
(DSL) to further increase the ease of programming of complex
reliable large-scale distributed systems, and to strengthen the
programming-by-assembly design of our approach. We are
also integrating our approach on top of Kubernetes to augment
Kubernetes’s basic structural properties.
ACKNOWLEDGMENTS
This work was partially funded by the PAMELA (ANR-16-
CE23-0016) and O’Browser (ANR-16-CE25-0005) projects of
the French Agence Nationale de la Recherche (ANR), and
by the DeSceNt project granted by the Labex CominLabs
excellence laboratory of the French ANR (ANR-10-LABX-
07-01). It has also received funding from CHIST-ERA under
project DIONASYS, from the Swiss National Science Foun-
dation (SNSF) and ANR.
REFERENCES
[1] R. Baraglia, P. Dazzi, M. Mordacchini, and L. Ricci. A peer-to-
peer recommender system for self-emerging user communities based
on gossip overlays. J. of Comp. and System Sciences, 79(2), 2013.
[2] M. Bertier, D. Frey, R. Guerraoui, A.-M. Kermarrec, and V. Leroy. The
gossple anonymous social network. In Middleware, 2010.
[3] G. Blair, Y.-D. Bromberg, G. Coulson, Y. Elkhatib, L. Réveillère, H. B.
Ribeiro, E. Rivière, and F. Taïani. Holons: Towards a systematic
approach to composing systems of systems.
In Int. Workshop on
Adaptive and Reﬂective Middleware, ARM, 2015.
[4] P. Bonnet, J. Gehrke, and P. Seshadri.
Towards sensor database
In MDM ’01: Second International Conference on Mobile
systems.
Data Management, pages 3–14, London, UK, 2001. Springer-Verlag.
[5] S. Bouget, H. Kervadec, A.-M. Kermarrec, and F. Taïani. Polystyrene:
The decentralized data shape that never dies. In 2014 IEEE 34th ICDCS,
pages 288–297. IEEE, 2014.
[6] E. Bruneton, T. Coupaye, M. Leclercq, V. Quéma, and J.-B. Stefani. The
FRACTAL component model and its support in Java. S:P&E, 2006.
[7] B. Burns, B. Grant, D. Oppenheimer, E. Brewer, and J. Wilkes. Borg,
Omega, and Kubernetes. Communications of the ACM, 59(5), 2016.
[8] I. Clarke, O. Sandberg, B. Wiley, and T. W. Hong. Freenet: A distributed
In Designing
anonymous information storage and retrieval system.
Privacy Enhancing Technologies, pages 46–66, 2001.
[9] P. Costa, L. Mottola, A. L. Murphy, and G. P. Picco. Programming wire-
less sensor networks with the TeenyLime middleware. In Middleware,
2007.
[10] H. Deng and J. Xu. CorePeer: A P2P Mechanism for Hybrid CDN-P2P
Architecture, pages 278–286. 2013.
[11] A. Deshpande and S. Madden. Mauvedb: supporting model-based user
views in database systems. In Proceedings of the 2006 ACM SIGMOD
international conference on Management of data. ACM, 2006.
[12] D. Gelernter. Generative communication in linda. ACM Trans. Program.
Lang. Syst., 7(1):80–112, 1985.
[13] L. Glendenning, I. Beschastnikh, A. Krishnamurthy, and T. Anderson.
Scalable consistency in Scatter. Proceedings of the Twenty-Third ACM
Symposium on Operating Systems Principles, pages 15–28, 2011.
[14] R. Gummadi, O. Gnawali, and R. Govindan. Macro-programming
wireless sensor networks using kairos. In International Conference on
Distributed Computing in Sensor Systems (DCOSS), 2005.
[15] B. Hindman, A. Konwinski, M. Zaharia, A. Ghodsi, A. D. Joseph,
R. Katz, S. Shenker, and I. Stoica. Mesos: A Platform for Fine-
grained Resource Sharing in the Data Center. In Proceedings of the 8th
USENIX Conference on Networked Systems Design and Implementation,
NSDI’11. USENIX Association, 2011.
[16] Q. Huang, K. Birman, R. van Renesse, W. Lloyd, S. Kumar, and H. C.
Li. An analysis of facebook photo caching. In SOSP, 2013.
[18] M.
[17] M. Jelasity, A. Montresor, and O. Babaoglu. T-Man: Gossip-based fast
overlay topology construction. Computer Networks, 53(13), Aug. 2009.
Jelasity, S. Voulgaris, R. Guerraoui, A.-M. Kermarrec, and
M. Van Steen. Gossip-based peer sampling. ACM TOCS, 25(3):8, 2007.
[19] R. Kapitza, J. Domaschka, F. J. Hauck, H. P. Reiser, and H. Schmidt.
IEEE
Formi: Integrating adaptive fragmented objects into java rmi.
Distributed Systems Online, 7(10), 2006.
[20] A.-M. Kermarrec, L. Massoulie, and A. Ganesh. Probabilistic reliable
dissemination in large-scale systems. IEEE TPDS, 14(3), 2003.
[21] S. R. Madden, M. J. Franklin, J. M. Hellerstein, and W. Hong. Tinydb:
an acquisitional query processing system for sensor networks. ACM
Trans. Database Syst., 30(1):122–173, 2005.
[22] M. Makpangou, Y. Gourhant, J.-P. Le Narzul, and M. Shapiro. Frag-
mented objects for distributed abstractions. In Readings in Distributed
Computing Systems. July 1994.
[23] M. Mamei and F. Zambonelli. Programming pervasive and mobile
computing applications: the tota approach. ACM TSEM, 2009.
[24] G. Mega, A. Montresor, and G. P. Picco. Efﬁcient dissemination in
decentralized social networks. In P2P, 2011.
[25] D. Merkel. Docker: lightweight linux containers for consistent develop-
ment and deployment. Linux Journal, 2014(239):2, 2014.
[26] MongoDB
Inc.
Sharded Cluster Query Routing.
https://docs.mongodb.com/manual/core/sharded-cluster-query-router/.
MongoDB Manual
/
accessed 11 May 2016,
(version
3.2)
[27] A. Montresor and M. Jelasity. PeerSim: A scalable P2P simulator. In
P2P, 2009.
[28] A. Montresor, M. Jelasity, and O. Babaoglu. Chord on demand. In Proc.
of the IEEE Int. Conf. on Peer-to-Peer Comp (P2P’05). IEEE, 2005.
[29] L. Mottola and G. P. Picco. Programming wireless sensor networks
In InterSense ’06: Proceedings of the
with logical neighborhoods.
ﬁrst international conference on Integrated internet ad hoc and sensor
networks, New York, NY, USA, 2006. ACM.
[30] R. Newton, G. Morrisett, and M. Welsh. The regiment macropro-
gramming system.
In IPSN ’07: Proceedings of the 6th international
conference on Information processing in sensor networks, pages 489–
498, New York, NY, USA, 2007. ACM.
[31] I. Stoica, R. Morris, D. Liben-Nowell, D. R. Karger, M. F. Kaashoek,
F. Dabek, and H. Balakrishnan. Chord: A scalable peer-to-peer lookup
protocol for Internet applications. IEEE/ACM Transactions on Network-
ing, 11(1):17–32, 2003.
[32] F. Taiani, S. Lin, and G. Blair. GossipKit: A Uniﬁed Component
Framework for Gossip. IEEE Trans. on Soft. Eng., 40(2), 2014.
[33] B. Technologies.
Riak KV Usage Reference
/ V3 Multi-
Datacenter Replication Reference: Architecture.
accessed 11
May 2016, http://docs.basho.com/riak/kv/2.1.4/using/reference/v3-multi-
datacenter/architecture/.
[34] J. Thones. Microservices. Software, IEEE, 32(1):116–116, 2015.
[35] A. Verma, L. Pedrosa, M. Korupolu, D. Oppenheimer, E. Tune, and
In
J. Wilkes. Large-scale cluster management at Google with Borg.
EuroSys. ACM, 2015.
[36] S. Voulgaris and M. v. Steen. Epidemic-style management of semantic
overlays for content-based searching. In Euro-Par 2005 Parallel Pro-
cessing. Springer Berlin Heidelberg, 2005.
[37] S. Voulgaris and M. van Steen. Vicinity: A pinch of randomness brings
out the structure. In Middleware 2013, pages 21–40. Springer, 2013.
[38] S. A. Weil, S. A. Brandt, E. L. Miller, and C. Maltzahn. Crush:
Controlled, scalable, decentralized placement of replicated data.
In
Proceedings of the 2006 ACM/IEEE Conference on Supercomputing,
SC ’06, New York, NY, USA, 2006. ACM.
[39] M. Welsh and G. Mainland.
abstract regions.
Systems Design and Implementation (NSDI ’04), pages 29–42, 2004.
Programming sensor networks using
In First USENIX/ACM Symposium on Networked
[40] K. Whitehouse, C. Sharp, E. Brewer, and D. Culler. Hood: a neighbor-
hood abstraction for sensor networks. In MobiSys, 2004.
[41] H. Yin, X. Liu, T. Zhan, V. Sekar, F. Qiu, C. Lin, H. Zhang, and B. Li.
LiveSky: Enhancing CDN with P2P. ACM Trans. on Multimedia Comp.
Comm. & App., 6:16:1–16:19, 2010.
553
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:50:29 UTC from IEEE Xplore.  Restrictions apply.