several authentication services. The default on Windows NT is
NT LAN Manager Security Support Provider (NTLMSSP). Another
is the DCE authentication service, which is based on the Ker-
beros standard.
Impersonation
Impersonation occurs when a server assumes the identity of its
caller. Although this seems a bit odd at first, it considerably sim-
plifies security issues.
238    Chapter 14 •
Distributed COM 
Normally when the server is started, it must log in with a
specific username. There are three possibilities:
1. The user who started the server (launching user). 
2. The user who is currently logged into the desktop. 
3. A specially designated user. 
The default is the launching user. For most servers, this
makes sense. The server assumes all the privileges of its creator,
and thus only has access to what it’s supposed to. For servers
that have multiple connected users, this approach doesn’t work
very well. Each of the users may have different security access
privileges and needs. 
If you specify that the server uses a specific user, this also
can cause problems. You must ensure that the server’s account
has access to everything it needs. More importantly, you must
ensure it does not provide access to things it shouldn’t. 
Impersonation allows the server to temporarily assume the
identity of the calling client. This way, it uses the Security ID of
the client to access the system. Once the client’s operation is
complete, it reverts back to its original account. When the next
client makes a request, it assumes the Security context of that cli-
ent also. Impersonation allows the best of both worlds in terms
of security. 
The benefits for a server are quite clear. The client, how-
ever, must be careful about impersonation. By impersonation,
the server can gain access to resources that it normally couldn’t.
A server can impersonate a more privileged client and perform
operations from which it would normally be blocked. This is a
much more subtle security issue. Most of the time we are con-
cerned about protecting the server from the client. 
Identity
DCOM allows you to designate that a server runs as a specific
user. Often this is an excellent way to control a server’s security
access. By running as a user with specific privileges, you can
control its access. 
Custom Security
239
Additonal Information and Updates: http://www.iftech.com/dcom
Windows NT services default to a special account called
"LocalSystem", which has unlimited privileges on the local
machine but no network access privileges. If the server does not
make use of some form of impersonation, it won’t have access to
network resources.
Custom Security
Regardless of all the levels of DCOM security, you may want to
implement your own. There are numerous ways to implement
custom security. Usually this would involve a username and
password to access the server.
CoInitializeSecurity
The CoInitializeSecurity() function sets the default security values
for a process. It can be used on both the client and server appli-
cation. This function is invoked once per process; you don’t
need to call it for each thread. By process, we mean an applica-
tion program, either a client or COM server. It should be invoked
right after CoInitialize(), and before any interfaces are used.
If you don’t call CoInitializeSecurity(), it will be automati-
cally invoked by COM. It will be called with the defaults set by
DCOMCNFG. The security settings invoked here will override
any defined in the registry AppID key.
This function has quite a few parameters. Some apply to
COM clients, others to servers. Several of these parameters
deserve an entire chapter unto themselves.
HRESULT CoInitializeSecurity( 
PSECURITY_DESCRIPTOR pVoid, 
DWORD cAuthSvc, 
SOLE_AUTHENTICATION_SERVICE * asAuthSvc, 
void * pReserved1, 
DWORD dwAuthnLevel, 
DWORD dwImpLevel, 
RPC_AUTH_IDENTITY_HANDLE pAuthInfo, 
240    Chapter 14 •
Distributed COM 
DWORD dwCapabilities, 
void * pvReserved2);
Security descriptors are only used on Windows NT. A secu-
rity descriptor is a structure that contains the security information
associated with an object. If NULL is specified, no security (ACL)
checking is done.
The next two parameters concern authentication. Authenti-
cation is the service used to determine if incoming COM mes-
sages are from a known source. There are several authentication
packages, including the NT LAN Manager, and Kerberos. These
services are automatically handled by RPCs.
Parameter
Used 
on
Description
pVoid
both
Points to security descriptor. This parameter is 
only used on Windows NT. This descriptor is a 
structure that contains the security information 
associated with an object. If NULL, no security 
(ACL) checking is done.
cAuthSvc
server
Count of entries in asAuthSvc. A value of -1 tells 
COM to choose which authentication services to 
register.
asAuthSvc
server
Array of SOLE_AUTHENTICATION_SERVICE 
structures.
pReserved1
Not used.
dwAuthnLevel
proxies
The default authentication level.
dwImpLevel
proxies
The default impersonation level.
pAuthInfo
Reserved; must be set to NULL 
dwCapabilities both
Additional client and/or server-side capabilities 
pvReserved2
Reserved for future use
Table 14.1
CoInitializeSecurity parameters
CoInitializeSecurity
241
Additonal Information and Updates: http://www.iftech.com/dcom
The default authentication level is specified for the proxy.
The server will reject calls made at a lower authentication level.
There hare several possible values, each providing a more com-
prehensive level of checking. These constants are defined in
. Passing in a value of RPC_C_AUTHN_NONE pro-
vides a decent default.
Impersonation allows one process to assume the identity
and credentials of another. In this case, the impersonation level
determines how much the client trusts the server.
The dwCapabilities flags are used to determine further capa-
bilities 
of 
the 
proxy. 
These 
are 
defined 
in 
the
EOLE_AUTHENTICATION_CAPABILITIES 
enumeration 
in
.
If you are somewhat bewildered by all the parameters on
the CoInitializeSecurity() call, here are some very perfunctory
default values.
hr = CoInitializeSecurity(NULL, -1, NULL, NULL,
RPC_C_AUTHN_LEVEL_NONE, 
RPC_C_IMP_LEVEL_IMPERSONATE,
NULL, 
Impersonation Level
Description
RPC_C_IMP_LEVEL_ANONYMOUS The server object cannot get security 
information about the client.
RPC_C_IMP_LEVEL_IDENTIFY
The server can get security information, 
but cannot impersonate the client.
RPC_C_IMP_LEVEL_IMPERSONATE The server can use the client’s security 
credentials for local operations. Repre-
sents a high level of trust.
RPC_C_IMP_LEVEL_DELEGATE
The server can use the client’s security 
credentials for network operations. This 
level is not supported by many authenti-
cation services.
Table 14.2
Impersonation Levels
242    Chapter 14 •
Distributed COM 
EOAC_NONE, 
NULL);
Basically, these settings leave security pretty wide open. If
you have real security concerns, you are going to have to
research these issues thoroughly and set up acceptable values.
Disconnection
One of the insidious characteristics of networks is that they are
fragile. You can expect your client and server to be disconnected
for any number of reasons. Perhaps the network had an error, or
the server was rebooted, or the client computer crashes. What-
ever the cause, your applications have to clean up the results. 
Another name for this cleanup is "Garbage Collection." COM
implements some simple garbage collection on the COM object
level. A COM server is able to detect when clients have been dis-
connected. 
Normally, a client will disconnect gracefully from its server,
shutting down its connection in an orderly way. You need to be
aware of what happens when it doesn’t. Let’s examine how a cli-
ent and server would handle a disconnection.
For the client program, a disconnection is pretty obvious.
The client will make a COM call, and the call will return with an
error. Chances are that your client will be inclined to crash in
one form or another. Whatever the error, the client will have to
handle shutting itself down. 
Unfortunately, the client won’t see the disconnection until it
tries a COM call. In many applications, the program may run for
some time before it uses COM. One solution to this is to write a
"heartbeat" function that checks the server connection periodi-
cally.
The server has a different problem: it will never know about
the disconnection. Because all COM applications are driven by
the client, the server is always waiting for a request. If the client
is disconnected, it will stop making requests and the server will
remain connected.
Using the Registry for Remote Connections
243
Additonal Information and Updates: http://www.iftech.com/dcom
If you’re ambitious, you can write a server-to-client heart-
beat check with a callback. The server would periodically call
the client’s callback to see if it is alive. Fortunately, in most cases
this isn’t necessary.
COM implements a type of heartbeat called "Delta Pinging."
The "Ping" part of this is obvious. The RPC layer of COM will
send out a ping message from client to server every two minutes.
A ping is just a small packet of information that indicates the cli-
ent is connected. If the server fails to get three consecutive ping
messages, it disconnects the client and cleans up its outstanding
connections. This means it usually takes about seven minutes for
a broken client connection to be cleaned up. This is automatic
behavior, and you don’t have much control over it.
One place for the server to check for a disconnection is in
the COM object’s destructor. When the COM object is discon-
nected, its destructor will eventually be called. You can handle
custom object cleanup in this code.
Because network operations can be expensive, COM tries to
be very efficient about its ping messages. These ping messages
are piggybacked onto existing COM calls if possible. This elimi-
nates unnecessary message traffic for active connections. 
RPCs also combine all pings from a server before sending
them. This means that only one ping message will be sent from
one client to its server, even if the client has multiple COM
objects. These groups of ping messages are called "ping sets."
Using the Registry for Remote Connections
We’ve covered some of the programming differences between
COM and DCOM. There is another way to connect to remote
servers by using registry settings. This is a somewhat crude
method, but it is useful when working on legacy applications.
For most cases adding remote capabilities to the C++ modules
will give more control.
The easiest way to do this is through DCOMCNFG. Select
the properties of your COM object and select the "Location" tab.
244    Chapter 14 •
Distributed COM 
Using this utility, you can specify the name of a remote com-
puter. 
Installing the Server on a Remote Computer
If you want your server to run on the remote computer, you’ll
need to install it. All you have to do is copy the program (EXE)
to the remote computer and register it. Use the -Regserver com-
mand. If you have a proxy/stub DLL, you will also have to regis-
ter that. Use REGSVR32 to register the proxy/stub DLL.
If your server is running Windows 95, be sure DCOM is
installed. On NT DCOM installs as part of the operating system,
but in Windows 95 it is a separate step.
F
I
F
T
E
E
N
15
ATL and Compiler 
Support   
COM itself is simple, but for some reason writing COM applica-
tions always turns out to be harder than you expected. The
demon of that plagues COM is complexity. The only way to tame
this complexity is with good programming tools. If you're work-
ing with COM, you have three choices:
1. Write C++ SDK programs
2. Use MFC and it's OLE infrastructure
3. Use ATL
C++ SDK Programming
You can write perfectly good COM programs with native C++
and a few of the COM SDK routines. There's just one problem: it
takes forever. Most of COM programming is repetitive boilerplate
code. In any case, for anything but client programs, it's going to
be a lot of work. It's a perfect application for a class or template
library. You might as well use MFC or ATL. 
246    Chapter 15 •
ATL and Compiler Support 
MFC COM
MFC offers a viable way to implement COM. Traditionally COM
was a substrate of OLE. OLE brings along with it quite a bit of
baggage. MFC is designed for writing User Interface programs.
MFC offers many powerful features for User Interface programs.
Most people writing C++ programs end up using MFC. Unfortu-
nately, the GUI concentration means that MFC isn't a great fit for
the server side of COM programming.
When you use the MFC wizards built into Visual C++, you
get a great framework on which to base your application. The
wizards hide the big problem with MFC, which is also complex-
ity. If you've every tried to do non-standard things with the MFC
framework, you quickly find yourself in a morass of unfamiliar
and unfriendly code. 
The other problem with MFC is size. It's huge. Including
MFC in a non-User Interface program adds a lot of overhead. Of
course, this isn't always a problem. If your application is already
using MFC, linking in the MFC DLL isn't a burden.
Here is a quick summary of the challenges you'll face with
MFC
• MFC is large and complex.
• MFC does not easily support dual interfaces.
• MFC does not support free threading. Thread safety is a
problem with MFC.
As we saw in Chapter 4, creating a COM client with MFC is
straightforward. For COM servers, ATL is the way to go.
ATL - The Choice for Servers
ATL is currently the best choice for developing COM servers. The
ATL wizards provided with Visual C++ offer an extremely attrac-
tive way to develop server applications. Almost all the server
examples in this book use the ATL wizards. Currently there is no
tool for COM server development that comes close to ATL. 
Basic Templates
247
Additonal Information and Updates: http://www.iftech.com/dcom
In addition, ATL supports all threading models. If you want
the advantages of free threading you'll probably need to use
ATL. Dual Interfaces are another extremely useful feature. With
ATL, creating dual interfaces is very easy - it's just a matter of
clicking a button in the wizard.
Finally, ATL offers a very small memory footprint. Because
ATL is a template library, you aren't linking in a big DLL or
library. The ATL templates work with the compiler to generate
only the code you need.
That doesn't mean you can't use MFC also. On the simplest
level, you can include MFC as a shared DLL, and include the
AFX headers in the ATL server. If you want to develop CWinApp-
based applications it will take some more work. You'll have to
include the standard MFC InitInstance and ExitInstance methods
and integrate them with the standard ATL _Module (CComMod-
ule).
What's the down side? No question about it - lack of docu-
mentation. ATL is a new product, and there's just not that much
information published about it. Fortunately this is rapidly chang-
ing. Every month, more is being written about this excellent
library.
Basic Templates 
If you've worked with templates, ATL will make perfect sense. If
you've used the standard template library (STL), you'll be right at
home. If not, your initial reaction will probably be one of bewil-
derment. For most C++ programmers templates seem somewhat
unnatural,
Templates are a very specialized form of macro with type
checking. The 'C' and C++ macro pre-processor allows you do
some powerful and sophisticated text substitutions. Unfortu-
nately, macros can be quite cryptic, and worse, they introduce
difficult errors into programs. Many of these errors are the result
of data type mismatches. Given these difficulties, many C++ pro-
grammers cringe whenever they see macros in their source code.
248    Chapter 15 •
ATL and Compiler Support 
Templates use the same text-substitution technology as mac-
ros, but add some extra syntax for type checking. Templates
have a more structured environment than traditional pre-proces-
sor macros. This eliminates a lot of, but not all of, the problems.
Templates can still be extremely cryptic, and debugging them
can be difficult.
A Simple Template Example 
Take a standard piece of code that swaps two integer values. It's
a piece of code that we've all written at one time or another:
void swap( int &a, int &b )
{
int itemp = a;
a = b;
b = itemp;
}
Here's the call to swap. 
int a=1;
int b=2;
swap( a, b );
This piece of code works only for integers. If we were to
pass in a double, we'd get a compiler error. You would have to
rewrite the function to take a double & instead of an int &. How
would you write this piece of code generically? One easy
method would be to use  a macro.
#define SWAP( t, a, b )  {\
t temp; \
temp = a; \
a = b; \
b = temp; \
}
Basic Templates
249
Additonal Information and Updates: http://www.iftech.com/dcom
Calling this macro would take three parameters; the first one
would be the data type. 
double d1 = 1.1;
double d2 = 2.2;
SWAP( double, d1, d2 );
Calling this macro would work with either an int or a dou-
ble, depending on what we passed in. Actually, this isn't a bad
way to write this piece of code. Unfortunately, there's not any
type checking going on. That means when you pass in incom-
patible data types, the compiler will give you very misleading
error message, or worse - no error message at all.
Another problem is the ugly syntax. The macro pre-proces-
sor wasn't designed to write functions and programs. The
#define syntax is difficult to write; it's especially unpleasant to
remember all the backslashes. 
Templates offer a more type-safe method of doing the same
thing. Here's how we'd write the swap routine as a template:
template 
void Swap( T & a, T & b )
{
    T temp = a;
    a = b;