title:Experimental Evaluation of Time-redundant Execution for a Brake-by-wire
Application
author:Joakim Aidemark and
Jonny Vinter and
Peter Folkesson and
Johan Karlsson
Experimental Evaluation of Time-redundant Execution 
 for a Brake-by-wire Application 
Joakim Aidemark, Jonny Vinter, Peter Folkesson, and Johan Karlsson 
Department of Computer Engineering 
Chalmers University of Technology 
S-412 96 Göteborg, Sweden 
{aidemark, vinter, peterf, johan}@ce.chalmers.se 
Abstract 
triple 
that  masks  errors  by 
This  paper  presents  an  experimental  evaluation  of  a 
brake-by-wire application that tolerates transient faults by 
temporal  error  masking.  A  specially  designed  real-time 
kernel 
time-redundant 
execution  and  voting  executes  the  application  on  a  fail-
stop computer node. The objective is to reduce the number 
of  node  failures  by  masking  errors  at the computer  node 
level. The real-time kernel always executes the application 
twice to detect errors, and ensures that a fail-stop failure 
occurs  if  there  is  not  enough  CPU-time  available  for  a 
third  execution  and  voting.  Fault  injection  experiments 
show that temporal error masking reduced the number of 
fail-stop  failures  by  42%  compared  to  executing  the 
brake-by-wire task without time redundancy. 
1. Introduction  
Distributed  real-time  systems  are  increasingly  being 
used  to  control  critical  functions  in  automotive  and 
aerospace applications, such as fly-by-wire, brake-by-wire 
and  steer-by-wire  systems.  These  systems  must  be  fault-
tolerant to be safe and reliable. 
Previous  research  has  shown  that  transient  faults  are 
common in digital systems [1]. These faults can be caused 
by power fluctuations, electromagnetic interference or by 
particle  radiation.  Radiation-induced  transient  faults  are 
mainly  a  problem  in  space  and  at high altitude,  however 
they may also occur at ground level [2]. In addition, as the 
computer industry strives to reduce both the geometry and 
the  power 
supply  of  components, 
risk  of 
environmentally induced faults increases. 
the 
A cost-effective technique for handling transient faults 
is to use time-redundancy [3, 4, 5, 6]. The declining prices 
of  high-performance  microprocessors 
and  micro-
controllers  make  time  redundancy  increasingly  attractive 
for achieving fault-tolerance in real-time systems. 
 We have developed a real-time kernel that mask errors 
by  triple  time  redundant  execution  and  majority  voting. 
The  kernel  executes  all  critical  tasks twice  and  compares 
the results to  detect  errors.  A third  execution is  started if 
an  error  is  detected  by  the  comparison  or  a  CPU-
exception.  This  allows  the  kernel  to  mask  errors  by 
conducting  a  majority  vote  on  three  results.  We  call  this 
technique temporal error masking. 
The  real-time  kernel  uses  fixed  priority  scheduling  to 
control temporal error masking. Before starting additional 
executions  when  an  error  is  detected,  the  kernel  checks 
whether  it  is  feasible  to  re-execute  the  task  and  meet  the 
deadline. The output of a task is delivered only when two 
matching results have been produced.  
The  objective  of  temporal  error  masking  is  to  tolerate 
transient  faults  at  the node-level  whenever  possible.    For 
permanent  faults  and  transient  faults  that  cannot  be 
handled at the node level, the node must fulfill fail-stop or 
omission  failure  semantics  [7].  These  properties  are 
achieved  by  combining  hardware  and  software  error 
detection mechanisms with temporal error masking.  
In this paper, we present an experimental evaluation of 
a  brake-by-wire  application  executed  by  the  real-time 
kernel. We consider a distributed control system, where a 
brake-by-wire task for each wheel is executed on two fail-
stop computer nodes operating in active redundancy. Such 
a  system  can  tolerate  single  node  failures  without 
degrading the ability of the system to brake the vehicle. If 
two nodes that control the braking of one wheel both fail, 
then the system can still brake the vehicle using the other 
wheels.  However,  the  efficiency  of  the  brakes  will  be 
substantially  degraded.  Therefore,  it  is  important  to 
minimize the probability of double node failures.  
Such  double  node  failures  can  occur  as  a  result  of  a 
single  external  disturbance  that  cause  transient  faults  in 
more  than  one  node,  or  near-coincident  transient  faults. 
Temporal  error  masking  improves  the  systems  ability  to 
cope with such transient faults without degradation. 
We  conducted  fault  injection  experiments  to  validate 
the  kernel  and  assess  the  effectiveness  of  the  temporal 
error  masking.  Transient  bit-flips  were  injected  into  the 
internal registers  and  flip-flops  of  the  CPU  that  executed 
the  kernel.  We  have  previously  shown  that  such  bit-flips 
Proceedings of the International Conference on Dependable Systems and Networks (DSN’02) 
0-7695-1597-5/02 $17.00 © 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:15:17 UTC from IEEE Xplore.  Restrictions apply. 
in an engine controller may cause permanent failures, such 
as locking the engine at full speed [8]. 
 The  objective  of  the  experiments  was  to  estimate  the 
error coverage with respect to errors that occur during the 
execution of the brake-by-wire application task. No faults 
were  injected  during  execution  of  the  kernel  code,  since 
no  mechanisms  for  detection  and recovery  of  such  faults 
are included in the current version of the kernel. 
The next section presents related work. The principles 
of  temporal  error  masking  are  presented  in  Section  3, 
while  Section  4  presents  the  brake-by-wire  application. 
Section 5 describes the experimental set-up and Section 6 
reports  the  results  of  the  fault  injection  experiments. 
Finally,  the  conclusions  of  this  study  are  given  in  
Section 7. 
2. Related work 
Time  redundancy  is  a  well-known  technique  for 
achieving  fault  tolerance  [3].  A  majority  of  studies  on 
time  redundancy  focuses  on  detecting  errors,  i.e.  to 
execute  an  operation  twice  and  compare  the results.  This 
is done on different levels such as on the instruction level 
[4], procedure level [5] or at the task level [6]. Execution 
of  diverse  software  versions  also  allows  detection  of 
software  errors  [9].  Recent  studies  on  double  execution 
and comparison utilize new technologies in processors to 
reduce the time overhead [10]. 
Although  most  studies  on  time  redundancy  focus  on 
detecting  errors,  some  studies  have  addressed  the  use  of 
triplicated execution and voting to mask errors on a single 
node.  Triplicated  execution  is  evaluated  in  [11],  where 
each  software  module  and  the  voting  mechanisms  are 
executed three times to mask errors. 
Another  approach  using  time  redundancy  is  roll  back 
recovery [12]. In roll back recovery, the error is detected 
by various error detection mechanisms and additional time 
is  used  to  re-execute  the  failed  operation.  Retry  is  the 
simplest  scheme,  where  the  failed  operation  is  just 
repeated. Another scheme is to use checkpointing, i.e. the 
state of the processor is saved at regular intervals or when 
certain data is updated. If an error is detected, the system 
is  restored  to  the  last  checkpoint  and  the  operation  is 
repeated. 
The  temporal  aspect  of  fault  tolerance  is  addressed  in 
fault-tolerant  scheduling.  In  this  scheduling  theory,  time 
for  recovery  is  included  in  the  schedule  while  still 
guaranteeing  that  all  tasks  meet  their  deadlines.  Fixed 
priority  scheduling  is  extended  to  include  time  for  re-
execution  of  failed  tasks  in  [13].  However,  it  is  not 
necessary  to  reserve  time  for  re-executing  all  tasks  in 
advance,  if  one  assumes  that  there  is  an  upper  bound  on 
the number of tasks that can be affected by transient faults 
during  a  specific  time  interval.  Using  several  time 
redundant  copies  of  a  task  and  taking  a  vote  on  their 
output  to  tolerate  transient  faults  in  a  static  scheduling 
system  is  proposed  in  [14].  However,  when  time 
redundancy  is  used  in  a  static  scheduled  system,  extra 
time must be pre-scheduled for re-execution of each task. 
fixed  priority  scheduling 
Our real-time  kernel  takes  advantage  of  the  flexibility 
in 
triplicated 
executions  of  tasks  to  mask  errors.  The  kernel  has  been 
used  for  executing  a  brake-by-wire  application  allowing 
the  temporal  error  masking  technique  to  be  evaluated 
using fault injection. 
to  control 
3. Temporal error masking  
Our  real-time  kernel  allows  each  critical  task  to  be 
executed twice during normal operation. The term copy is 
used to denote a particular instance of the task execution. 
The  results  of  the  two  copies  are  compared  to  detect 
errors. If the results match, a third copy does not have to 
be executed and the time can be used by other tasks. If the 
two  results  do  not  match,  a  third  copy  of  the  task  is 
executed. The results of the three copies are then checked 
by  a  majority  vote.  If  the  majority  voter  detects  two 
matching results, they are accepted as a valid result of the 
task,  otherwise  no  result  is  delivered,  which  leads  to  an 
omission failure. Errors can also be detected by hardware 
and  software  EDMs.  In  this  case,  the  affected  copy  is 
immediately  terminated  and  a  new  copy  is  started,  see 
Figure 1. 
Fault free execution: 
T1 
T2 
Error detected by the 
comparison between 
T1 and T2: 
Fault 
Comparison 
T1 
T2 
T3 
Comparison 
Voting 
Fault 
Error detected by 
HW/SW EDM: 
T1 
T2 
T3 
Error detected 
Comparison 
Figure 1. Error Detection and Recovery 
After  an  error  is  detected,  the  kernel  checks  the 
deadline of the task to determine whether it is possible to 
execute an additional task copy before the deadline. If not, 
no result is delivered and an omission failure occurs. The 
output from the non-faulty node must then be used. If time 
is  available,  a  new  copy  is  started.  The  task  result  is 
delivered  only  when  two  matching  results  have  been 
produced before the deadline. 
We  assume  that  enough  slack  is  available  in  the  task 
schedule to allow at least one task to execute three copies 
without  causing  any  other  task  to  miss  a  deadline. 
However,  if  several  tasks  are  affected  by  near-coincident 
transient  faults,  sufficient  slack  may  not  be  available  to 
allow all of them to execute three copies  without causing 
Proceedings of the International Conference on Dependable Systems and Networks (DSN’02) 
0-7695-1597-5/02 $17.00 © 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:15:17 UTC from IEEE Xplore.  Restrictions apply. 
other tasks to miss their deadlines. 
The  dynamic  behavior  of  the  technique  enlarges  the 
output  jitter.  However,  this  may  be  solved  by  adding  a 
separate  task  responsible  for  delivering  the  results  of  the 
tasks. This extra task executes with an offset in time from 
the periodic task performing the actual computation [15].  
3.1. Policies when recovery is not possible 
Depending  on  the  requirements  of  the  application, 
different policies on how to deal with unrecoverable errors 
may be chosen. For example, a feedback control system is 
able  to  withstand  a  certain  delay  in  the  delivery  of  the 
control  signals  without  losing  the  stability  of  the  system 
[16].  In  addition,  some  systems  may  even  tolerate  value 
failures  due  to  the  inertia  of  the  controlled  object.  In  [8] 
faults  were  injected  in  an  engine  control  algorithm  and 
almost  90%  of  the  value  failures  produced  were  minor 
failures,  i.e.  failures  with  no  noticeable  impact  on  the 
engine. Therefore, if an error cannot be recovered: (a) an 
omission failure may occur, (b) instead of an omission, the 
previous result may be delivered or (c) if a HW exception 
occurs in the first or second execution, it may be assumed 
that the fault affects only that execution.  The result from 
the  non-affected  execution  can  thus  be  delivered.  To 
inform the receiver of the uncertainty of the result, quality 
information  can  be  included  in  the message.  A  first-class 
result is a verified result, i.e. the result has been produced 
twice  and  the  two  results  match,  while  a  second-class 
result  is a result  from an  execution  that  is assumed to  be 
unaffected  by  the  fault.  A  third-class  message  contains  a 
previous result. 
4. Brake-by-wire application 
Brake-by-wire  systems  are  expected 
replace 
hydraulic  brake  systems  in  future  road  vehicles.  In  a 
brake-by-wire  system,  the  driver’s  brake  intention  is 
transmitted electronically from the brake pedal to electro-
hydraulic  or  electro-mechanic  brake  actuators  positioned 
on each wheel. 
to 
WN 
 CN 
WN 
WN 
WN 
system can be implemented according to Figure 2, where 
the  driver’s  brake  intervention  is  sent  to  a  central  node 
(CN). The central node handles the all-embracing control, 
distributing  the  correct  brake  force  to  each  wheel  node 
(WN).  The  individual  wheel  nodes  control  that  the 
requested  brake  force  is  applied  to  the  respective  wheel. 
Note  that  hardware  replicated  wheel  nodes  may  not  be 
required, since it is possible to brake a car using only three 
wheel  nodes.  On  the  other  hand,  if  the  wheel  nodes  are 
integrated in an ESP system, each wheel node is critical. 
A  MATLAB/Simulink  brake-by-wire  model  provided 
by Volvo Technological Development is used as the target 