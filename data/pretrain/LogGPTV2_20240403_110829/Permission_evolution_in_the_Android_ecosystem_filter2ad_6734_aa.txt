title:Permission evolution in the Android ecosystem
author:Xuetao Wei and
Lorenzo Gomez and
Iulian Neamtiu and
Michalis Faloutsos
Permission Evolution in the Android Ecosystem
Xuetao Wei, Lorenzo Gomez, Iulian Neamtiu, Michalis Faloutsos
{xwei, gomezl, neamtiu, michalis}@cs.ucr.edu
Department of Computer Science and Engineering
University of California, Riverside
ABSTRACT
Android uses a system of permissions to control how apps
access sensitive devices and data stores. Unfortunately, we
have little understanding of the evolution of Android permis-
sions since their inception (2008). Is the permission model
allowing the Android platform and apps to become more se-
cure?
In this paper, we present arguably the ﬁrst long-
term study that is centered around both permission evolu-
tion and usage, of the entire Android ecosystem (platform,
third-party apps, and pre-installed apps). First, we study
the Android platform to see how the set of permissions has
evolved; we ﬁnd that this set tends to grow, and the growth
is not aimed towards providing ﬁner-grained permissions but
rather towards oﬀering access to new hardware features; a
particular concern is that the set of Dangerous permissions
is increasing. Second, we study Android third-party and
pre-installed apps to examine whether they follow the prin-
ciple of least privilege. We ﬁnd that this is not the case, as
an increasing percentage of the popular apps we study are
overprivileged. In addition, the apps tend to use more per-
missions over time. Third, we highlight some concerns with
pre-installed apps, e.g., apps that vendors distribute with
the phone; these apps have access to, and use, a larger set of
higher-privileged permissions which pose security and pri-
vacy risks. At the risk of oversimpliﬁcation, we state that
the Android ecosystem is not becoming more secure from
the user’s point of view. Our study derives four recommen-
dations for improving the Android security and suggests the
need to revisit the practices and policies of the ecosystem.
1.
INTRODUCTION
The popularity of the Android platform is driven by feature-
rich devices, as well as the myriad Android apps oﬀered by a
large community of developers. Furthermore, smartphones
have become an integral part of daily lives, with users in-
creasingly relying on smartphones to collect, store, and han-
dle personal data. This data can be highly privacy-sensitive,
hence there are increased concerns about the security of the
Android ecosystem and safety of private user data [11].
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
ACSAC ’12 Dec. 3-7, 2012, Orlando, Florida USA
Copyright 2012 ACM 978-1-4503-1312-4/12/12 ...$15.00.
To ensure security and privacy, Android uses a permission-
based security model to mediate access to sensitive data,
e.g., location, phone call logs, contacts, emails, or photos,
and potentially dangerous device functionalities, e.g., Inter-
net, GPS, and camera. The platform requires each app to
explicitly request permissions up-front for accessing personal
information and phone features. App developers must de-
ﬁne the permissions their app will use in the AndroidMan-
ifest.xml ﬁle bundled with the app, and then, users have
the chance to see and explicitly grant these permissions as
a precondition to installing the app. At runtime, the An-
droid OS allows or denies use of speciﬁc resources based on
the granted permissions (Section 2). In practice, this secu-
rity model could use several improvements, e.g., informing
users of the security implications of running an app, revok-
ing/granting app permissions without reinstalling the app,
or moving towards ﬁner-grained permissions.
In fact, the Android permission model attracts emerging
malware that challenges the system to exploit vulnerabilities
in order to perform privilege escalation attacks—permission
re-delegation attacks [7], confused deputy attacks, and col-
luding attacks [15]. As a result, users can have sensitive
data leaked or subscription fees charged without their con-
sent (e.g., by sending SMS messages to premium numbers
via the SMS related Android permissions, as the well-known
Android malwares Zsone and Geinimi do [18]). While most
of these attacks are ﬁrst initiated when a user downloads a
third-party app to the device, to make matters worse, even
stock Android devices with pre-installed apps are prone to
exposing personal privacy information due to their higher
privilege levels (e.g., the notorious HTCLogger app [5]).
Previous research eﬀorts focus either on single-release per-
mission characterization and eﬀectiveness [6,9,13] or on other
permission-related security issues [7,8,15,17]. Unfortunately,
there have been no studies on how the Android permission
system has evolved over the years, which could uncover im-
portant security artifacts beneﬁcial to improving the security
of the ecosystem. We discuss previous work in Section 7.
In this paper, we study the evolution of the Android ecosys-
tem to understand whether the permission model is allowing
the platform and its apps to become more secure. Following
a systematic approach, we use three diﬀerent types of char-
acterizations (third-party app permissions vs pre-installed
app permissions, and two permission classiﬁcations from
Google). We study multiple Android platform releases over
three years, from Cupcake (April 2009) to Ice Cream Sand-
wich (December 2011). We use a stable dataset of 237
evolving third-party apps covering 1,703 versions (spanning
31
a minimum of three years). Finally, we investigate pre-
installed apps from 69 ﬁrmwares, including 346 pre-installed
apps covering 1,714 versions. To the best of our knowledge,
this is the ﬁrst longitudinal study on Android permissions
and the ﬁrst study that sheds light on the co-evolution of
the whole Android ecosystem: platform, third-party apps,
and pre-installed apps.
Our overall conclusion is that the security and privacy
of the ecosystem (platform and apps) do not improve, at
least from the user’s point of view. For example, the evo-
lution moves more and more toward violating the principle
of least privilege, a fundamental security tenet. Speciﬁcally,
our study of the permission evolution of the Android ecosys-
tem leads to the following observations:
1. The number of permissions deﬁned in Android
platform tends to increase, and the Dangerous-
level set of permissions is the most frequent and
continues to grow. There were 103 Android permis-
sions in the ﬁrst widely-used release (API level 3); the
number of permissions has grown to 165 in the most cur-
rent release (API level 15). Furthermore, the Danger-
ous-level permissions is always the largest group across
all API levels, e.g., 60 out of 165 permissions in API
level 15, and is still growing.
2. Added platform permissions cater to hardware
manufacturers and their apps, rather than third-
party developers. Nearly half (49.1% in API level
15) of all permissions are not accessible to third-party
developers. Furthermore, of all the added permissions
between API levels 3 to 15, most (49 out of 62) are in
privilege levels that are not available to third-party de-
velopers, e.g., Signature and signatureOrSystem levels.
3. Android platform permissions are not becoming
more ﬁne-grained. After carefully examining the An-
droid permissions from API level 3 to 15, we observed
that most permission changes are not geared towards
ﬁne-grained instances of previous permissions. In other
words, the platform does not seem to be moving towards
more ﬁne-grained permissions, which would in general
be a step towards increased privacy or security. Instead,
the permission changes indicate clearly that the Android
platform is striving to give more ﬂexibility and control
to smartphone vendors, e.g., HTC, Motorola, Samsung,
by providing them with permissions of higher privilege.
4. Permission additions dominate the evolution of
third-party apps, of which Dangerous permissions
tend to account for most of the changes. From the
analysis of third-party apps, we found that the number
of occurrences of adding Android permissions is signif-
icantly higher than the number of deleted permissions.
Surprisingly, permission changes are not due to changes
in the platform.
Interestingly, among those additions,
newer versions of apps tend to favor adding Dangerous
permissions most often (66.11% of permission increases
in apps consisted of at least one more Dangerous per-
mission).
5. Macroscopic and microscopic patterns emerge when
studying evolution of permission usage. We found
evidence that Dangerous permission usage sometimes os-
cillate as an application evolves, which might indicate
that developers are unclear about certain permission def-
initions, and their correct usage.
6. An increasing number of apps are violating the
principle of least privilege. The tendency of devel-
opers to request permissions that their apps do not need
causes an app to become overprivileged (as is the case
for 44.8% of apps).
7. The power and privilege of pre-installed apps is
growing. Sixty-six percent of pre-installed apps are
overprivileged. Furthermore, pre-installed apps have more
power to control and customize Android devices through
Android platform-deﬁned and self-deﬁned higher pro-
tection level permissions, e.g., Signature- andSigna-
tureOrSystem-level permissions. Though granting ven-
dors higher privilege is not surprising, end-users (the ac-
tual owners of the device) still have security concerns [5,
11]. We argue that since pre-installed apps have greater
power over the device, the developers of pre-installed
apps must understand and accept their responsibility to
protect the end user.
Implications and Suggestions. Our work leads to the
following recommendations for increasing the security and
privacy of Android users.
1. Securing the ecosystem must start at the An-
droid platform. The trends we reveal in the evolution
of the Android platform conjure up many security and
privacy concerns. The security of the Android ecosystem
could improve dramatically by focusing on improving the
security of the Android platform by: (a) cautiously in-
creasing the set of Dangerous-level permissions, (b) bal-
ancing the security of users and convenience of vendors,
and (c) oﬀering ﬁne-grained permissions to app develop-
ers.
2. App certiﬁcation should enforce checks against
over-privileged requests. The existence of over-privileged
apps, which are increasing in number, is an indication
of, at best, carelessness, and, at worst, greed or malice
of the app developer. Checks should be incoporated to
discourage permission over-privilege.
3. App permission evolution and ﬂuctuation indi-
cate developer confusion in selecting legitimate
Indicated by not only the macro- and
permissions.
micro-evolution patterns of permissions, but also by the
tendency of apps to become overprivileged, the the strug-
gling battle of developers to select a set of legitimate per-
missions for their Android apps is clearly shown in our
work.More emphasis should be put on correct permis-
sion usage to aid developers in selecting the approriate
permissions to use.
4. Pre-installed manufacturer apps need to be sub-
ject to far more scrutiny, as they could be the
weakest link. Pre-installed apps have signiﬁcant power:
(a) they do not require user approval for installation, as
they come with the device, (b) they can usually not be
removed, even if the user tries to, (c) they get access
to higher-privileged permissions, and (d) they are often
overprivileged. Pre-installed apps, with all their power,
could cause signiﬁcant damage to the device and user if
compromised, thus pre-installed developers must be held
to a higher security standard than normal developers.
2. THE ANDROID PLATFORM BASICS
We now proceed to present an overview of the Android
platform, Android permission model and a set of deﬁnitions
for the concepts we use throughout the paper.
32
2.1 Android Platform
Android was launched as an open-source mobile platform
in 2008 and is widely used by smartphone manufacturers,
e.g., HTC, Motorola, Samsung. The software stack con-
sists of a custom Linux system, the Dalvik Virtual Machine
(VM), and apps running on top of the VM. Each app runs
in its own copy of the VM with a diﬀerent user id, hence
apps are protected from each other. A permission model,
explained shortly, protects sensitive resources, e.g., the hard-
ware and stored data. In this model, resources are protected
by permissions, and only apps holding the permission (which
is granted when the app is installed) are given access to the
permission-protected resource.
API Levels. To facilitate app construction, the Android
platform provides a rich framework to app developers. The
framework consists of Android packages and classes, attributes
for declaring and accessing resources, a set of Intents, and a
set of permissions that applications can request. This frame-
work is accessible to apps via the Android application pro-
gramming interface (API). The Android platform has un-
dergone many changes since its inception in 2008, and each
major release forms a new API level. In this paper we stud-
ied all major API levels, from level 3 (April 2009) to level 15
(December 2011); levels 1 and 2 did not see wide adoption.
With each API upgrade, the older replaced parts are depre-
cated instead of being removed, so that existing applications
can still use them [4].
2.2 Android Apps
In addition to the platform, the Android ecosystem con-
tains two main app categories: third-party and pre-installed.
Third-party. apps are available for download from Google
Play (previously known as Android Market [2]) and other
app stores, such as Amazon [11]. These Android apps are
developed by individual third-party developers, which can
include software companies or individuals around the world.
Malicious apps, designed for nefarious purposes, form a spe-
cial class of third-party apps.
Pre-installed. apps come along with the devices from the
vendors. They are developed and loaded in the devices be-
fore the devices ever reach the user in the market. These
apps can be designed and conﬁgured exclusively per device
model depending on the needs of particular manufacturers
and phone service carriers by the vendor developers.
We studied permission evolution and usage in all com-
ponents of the ecosystem: platform, third-party apps and
pre-installed apps.
2.3 Android Permissions
The set of all Android permissions is deﬁned in the An-
droidManifest.xml source ﬁle of the Android platfrom [10].
To access resources from Android devices, each Android app,
third-party and pre-installed alike, requests permissions for
resources by listing the permissions in the app’s Android-
Manifest.xml ﬁle. When the user wants to install an app,
this list of permissions is presented and conﬁrmation is re-
quested; if the user conﬁrms the access, the app will have
the requested permissions at all times (until the app is unin-
stalled). The latest platform release, API Level 15, contains
a list of 165 permissions; examples of permissions are IN-
TERNET which allows the app to use the Internet, ACCESS_
FINE_LOCATION which gives an app access to the GPS loca-
33
API Android
level
platform codename permissions (mm-dd-yy)
SDK
Total
Release
15
14
10
9
8
7
6
5
4
3
4.0.3
4.0.2
4.0.1
2.3.4
2.3.3
2.3.2
2.3.1
2.3
2.2.x
2.1.x
2.0.1
2.0
1.6
1.5
Ice Cream
Sandwich
MR1
Ice Cream
Sandwich
Gingerbread
MR1
Gingerbread
Froyo
Eclair MR1
Eclair 0 1
Eclair
Donut
Cupcake
165
162
137
137
134
122
122
122
106
103
12-16-11
11-28-11
10-19-11
04-28-11
02-09-11
12-06-10
05-20-10
01-12-10
12-03-09
10-26-09
09-15-09
04-30-09
Table 1: Oﬃcial releases of the Android platform;
base and tablet versions are excluded.
tion, and NFC which lets the app use near-ﬁeld communica-
tion. Android deﬁnes two categories of Android permissions:
Protection Level and Functionality Group, described next.
Protection Level. The levels refer to the intended use of a
permission, as well as the consequences of using the permis-
sion.
1. Normal permissions present minimal risk to Android
apps and will be granted automatically by the Android
platform without user’s explicit approval.
2. Dangerous permissions provide access to the user’s per-
sonal sensitive data and various device features. Apps
requesting dangerous permissions can only be installed
if the user approves the permission request. These are
the only permissions displayed to the user upon instal-
lation.
3. Signature permissions signify the highest privilege;
they can only be obtained if the requesting app is
signed with the device manufacturer’s certiﬁcate.
4. signatureOrSystem permissions are only granted to
apps that are in the Android system image or are
signed with the same certiﬁcate in the system image.
Permissions in this category are used for certain spe-
cial situations where multiple vendors have applica-
tions built into a system image and need to share spe-
ciﬁc features explicitly because they are being built
together.
Note that the deﬁnition of protection level clearly constrains
the privilege for each Android permission: third-party apps
can only use Normal and Dangerous permissions. However,
pre-installed apps can use permissions in all four protection
levels. When third-party apps request Signature or Sig-
natureOrSystem permissions, the request is ignored by the
platform.
Functionality categories. Android also deﬁnes a set of
permission categories based on functionality; in total there
are 11 categories, with self-explanatory names: Cost Money,
Message, Personal Info, Location, Network, Accounts, Hard-
ware Controls, Phone Calls, Storage, System Tools and
Development Tools. There is also a Default category that
is used when no category is speciﬁed in the deﬁnition of an
Android permission [3].
3. DATASET DESCRIPTION
In this section, we describe the process we used to collect
the permission datasets from the Android ecosystem.
3.1 Platform Permissions Dataset
Table 1 presents the evolution of the platform permissions:
for each API level (column 1) we show the platform release
number (column 2), the textual codename of the release (col-
umn 3), the number of permissions deﬁned in that release
(column 4), and the release date (last column). Note that
we exclude API levels 1 and 2, as the platform only gained
wide adoption starting with API level 3. Also, we exclude
releases 3.x (named Honeycomb, API levels 11–13); Honey-
comb can be regarded as a separate evolutionary branch as it
was designed for tablets only, not for smartphones, its source
code was not open-source at release, and it was eventually