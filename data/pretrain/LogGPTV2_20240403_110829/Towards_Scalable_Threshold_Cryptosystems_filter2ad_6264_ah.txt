For the root node w = ε, we have rparent(ε) = φ, so B
picks a random rε(τ ) ∈ Fp, and computes the root quotient
aε(τ ) . At the next level,
commitment as gqε(τ ) = (gφ(τ )/grε(τ ))
consider the children nodes u and v of the root ε. For each
child w ∈ {u, v}, B must commit to a quotient qw that satisﬁes
rε(τ ) = qw(τ )aw(τ ) + rw(τ ) for some rw. So B proceeds
similarly: for each child w ∈ {u, v}, he picks a random rw(τ )
aw (τ ) .
and computes a commitment gqw(τ ) = (grε(τ )/grw(τ ))
B will do this recursively until it reaches leaf nodes in the
AMT. For each leaf l, instead of picking rl(τ ) randomly, B
will set it to the yi corresponding to that leaf. This way, B
can simulate quotient commitments {gqw(τ )}w∈path(xi) for all
i ∈ [d] that pass the AMT proof veriﬁcation in Equation (3).
i=1) as input, hoping
that A outputs another point ˆx and its evaluation φ(ˆx).
Since A breaks computational hiding, this happens with non-
negligible probability. (Note that B can check A succeeds by
interpolating gφ(ˆx) “in the exponent”.) When A succeeds, if
ˆx = x0, then a = φ(ˆx), so B breaks discrete log on (g, ga).
Otherwise, B uses the ﬁrst d points (xi, yi = φ(xi))i∈[d] and
this new distinct (ˆx, φ(ˆx)) point to interpolate φ and as a result
obtain a = φ(x0). (Recall that, by Deﬁnition A.5, we have
ˆx (cid:54)= xi,∀i ∈ [d].) As a result, B breaks discrete log on (g, ga).
Evaluation binding proof. Suppose there exists an adversary
A that outputs a commitment c, with two contradicting proofs
π, π(cid:48) attesting that φ(k) is equal to v and v(cid:48), respectively.
We show how to build another adversary B that breaks q-
SBDH. First, B runs A to get (c, π, π(cid:48), φ(k), v, v(cid:48)). Let W =
path(k) denote the nodes along k’s path in the AMT. Let
(πi)i∈W denote the quotient commitments in π. Similarly, let
(π(cid:48)
i)i∈W denote the quotient commitments in π(cid:48). Since both
proofs verify, we have:
Next, B calls A with (pp, c, (xi, yi, πi)d
i∈W
(cid:89)
(cid:89)
(cid:81)
(cid:81)
i∈W
e(c, g) = e(gv, g)
e(c, g) = e(gv(cid:48)
, g)
e(πi, gai(τ ))
e(π(cid:48)
i, gai(τ ))
Dividing the ﬁrst equation by the second, we get:
i∈W e(πi, gai(τ ))
i∈W e(π(cid:48)
i, gai(τ ))
e(πi, gai(τ ))
e(π(cid:48)
i, gai(τ ))
e(gv, g)
e(gv(cid:48)
, g)
1GT = e(gv−v(cid:48)
(cid:89)
1GT =
, g)
⇔
⇔
(cid:89)
i∈W
i∈W
i, gai(τ ))
e(πi/π(cid:48)
gφ(τ ) =
(gyi)LT
i (τ )
e(gv(cid:48)−v, g) =
and τ chosen uniformly at random from Z∗
p, no probabilis-
tic polynomial-time adversary can output (φ(x), gφ(τ )) ∈
Zp[X]×G, such that 2λ > deg φ > (cid:96), except with probability
negligible in λ.
C. AMT Proofs are Computationally Hiding and Binding
Recall from [14] that a polynomial commitment scheme
consists of six algorithms: Setup, Commit, Open, VerifyPoly,
CreateWitness, VerifyEval. We show our modiﬁed KZG
scheme with AMT proofs satisﬁes computational hiding (see
Deﬁnition A.5) under the discrete log (DL) assumption and
evaluation binding (see Deﬁnition A.4) under the (cid:96)-Strong
Bilinear Difﬁe-Hellman ((cid:96)-SBDH) assumption. These proper-
ties were originally deﬁned in [14]. We prove these properties
hold for a more general scheme that builds AMTs for an
arbitrary set X of n points (rather than just for the set of
roots of unity). For this scheme, Setup returns not only (cid:96)-SDH
public parameters, but also the accumulator commitments
necessary to verify AMT proofs. In other words, given an
evaluation point x∗ ∈ X, veriﬁers have access to accumulators
{gaw(τ )}w∈path(x∗) necessary to verify x∗’s AMT proof.
Deﬁnition A.4 (Evaluation binding). ∃ negligible function
negl(·), ∀ security parameters λ, ∀(cid:96) > 0,∀ adversaries A:
Pr
pp ← Setup(1λ, (cid:96)),
(c, x0, φ(x0), π, φ(cid:48)(x0), π(cid:48)) ← A(pp) :
VerifyEval(pp, c, x0, φ(x0), π) = 1 ∧
VerifyEval(pp, c, x0, φ(cid:48)(x0), π(cid:48)) = 1 ∧
φ(x0) (cid:54)= φ(cid:48)(x0)
 = negl(λ)
Deﬁnition A.5 (Computational hiding). Given pp randomly
generated via Setup(1λ, d), c ∈ G, φ ∈R Fp[X] of de-
gree d and (xi, φ(xi), πi)d
i=1 for distinct xi’s such that
VerifyEval(pp, c, xi, φ(xi), πi) = 1,∀i ∈ [d], no adversary A
can output φ(ˆx) for any ˆx where ˆx (cid:54)= xi,∀i ∈ [d], except with
probability negligible in the security parameter λ.
Computational hiding proof. Suppose there exists an adver-
sary A that breaks computational hiding and outputs φ(ˆx) for
an unqueried ˆx (cid:54)= xi,∀i ∈ [d]. Then, we show how to build an
adversary B that takes as input a random discrete log instance
(g, ga) and uses A to break it and output a. (Our proof is
in the same style as Kate et al.’s proof for PolyCommitDL’s
computational hiding [82].)
B runs Setup(1λ, d) which picks τ ∈R Fp and outputs
public parameters pp = PPd(g; τ ). Importantly, since B runs
the setup he will know the trapdoor τ. Then, B picks random
points (xi, yi) ∈ X × Fp,∀i ∈ [0, d] with distinct xi’s,
except he sets y0 = a. (Since B does not know a, he just
sets gy0 = ga.) Note that (xi, yi)d
i=0 determines a degree d
polynomial φ where φ(xi) = yi,∀i ∈ [0, d]. Since B does not
know a (only ga), it will interpolate φ’s commitment gφ(τ )
“in the exponent” as:
(cid:89)
i∈[0,d]
that one of the accumulators (ai(x))i∈W is
Now, recall
the monomial (x − k), and all
the other ai(x)’s contain
(x − k) as a term, which means it can be factored out of
them. Thus, since (x − k) perfectly divides all ai(x)’s, let
ri(x) = ai(x)/(x − k),∀i ∈ W . Importantly, the adversary
B can compute all ri(x)’s in polynomial time, since it can
reconstruct all the accumulator polynomials (ai(x))i∈W . As a
result, B can compute all commitments (gri(τ ))i∈W . Then, B
breaks (cid:96)-SBDH as follows:
e(gv(cid:48)−v, g) =
e(gv(cid:48)−v, g) =
e(gv(cid:48)−v, g) =
e(g, g)
1
τ−k =
i∈W
(cid:89)
(cid:89)
(cid:34)(cid:89)
(cid:34)(cid:89)
i∈W
i∈W
i∈W
e(πi/π(cid:48)
e(πi/π(cid:48)
e(πi/π(cid:48)
i, gri(τ )(τ−k))
i, gri(τ ))(τ−k)
(cid:35)(τ−k)
(cid:35) 1
i, gri(τ ))
v(cid:48)−v
e(πi/π(cid:48)
i, gri(τ ))
D. Polylogarithmic DKG Conﬁgurations
As discussed in §I-A, Canny and Sorkin presented a sparse
matrix DKG with O(m3) time and communication per player,
where m is a group size [47]. Depending on the desired
threshold (t, n) and the number f of malicious nodes tolerated,
the group size m can be as small as Θ(log3(n)). Unfortunately,
for f sufﬁciently close to t, the group size becomes too large,
approaching n/2 (see Table II).
THE GROUP SIZE m AND FOR VARIOUS (t, n) SPARSE MATRIX DKGS
WITH f FAILURES TOLERATED.
TABLE II
ε
0.1
0.15
0.2
0.25
0.3
0.33
0.4
0.05
0.1
0.15
0.2
0.25
0.3
0.33
0.4
Group size m f = (1/2 − ε)n
t = (1/2 + ε)n
n
50,598
14,222
5,691
2,735
1,475
1,057
505
445,909
53,022
14,949
5,977
2,871
1,548
1,107
527
26,214
22,937
19,660
16,384
13,107
11,141
6,553
471,859
419,430
367,001
314,572
262,144
209,715
178,257
104,857
39,321
42,598
45,875
49,152
52,428
54,394
8,982
576,716
629,145
681,574
734,003
786,432
838,860
870,318
943,718
65,536
65,536
65,536
65,536
65,536
65,536
65,536
1,048,576
1,048,576
1,048,576
1,048,576
1,048,576
1,048,576
1,048,576
1,048,576