title:BasicBlocker: ISA Redesign to Make Spectre-Immune CPUs Faster
author:Jan Philipp Thoma and
Jakob Feldtkeller and
Markus Krausz and
Tim G&quot;uneysu and
Daniel J. Bernstein
1
2
0
2
y
a
M
5
]
R
C
.
s
c
[
2
v
9
1
9
5
1
.
7
0
0
2
:
v
i
X
r
a
BasicBlocker: ISA Redesign to Make Spectre-Immune CPUs
Faster
Jan Philipp Thoma
PI:EMAIL
Horst-G√∂rtz Institute
Ruhr-University Bochum
Bochum, Germany
Jakob Feldtkeller
PI:EMAIL
Horst-G√∂rtz Institute
Ruhr-University Bochum
Bochum, Germany
Markus Krausz
PI:EMAIL
Horst-G√∂rtz Institute
Ruhr-University Bochum
Bochum, Germany
Tim G√ºneysu
PI:EMAIL
Horst-G√∂rtz Institute
Ruhr-University Bochum
Bochum, Germany
Daniel J. Bernstein
PI:EMAIL
Horst-G√∂rtz Institute
Ruhr-University Bochum
Bochum, Germany
DFKI GmbH, Cyber-Physical Systems
University of Illinois at Chicago
Bremen, Germany
Chicago, USA
ABSTRACT
Recent research has revealed an ever-growing class of microar-
chitectural attacks that exploit speculative execution, a standard
feature in modern processors. Proposed and deployed countermea-
sures involve a variety of compiler updates, firmware updates, and
hardware updates. None of the deployed countermeasures have
convincing security arguments, and many of them have already
been broken.
The obvious way to simplify the analysis of speculative-execution
attacks is to eliminate speculative execution. This is normally dis-
missed as being unacceptably expensive, but the underlying cost
analyses consider only software written for current instruction-
set architectures, so they do not rule out the possibility of a new
instruction-set architecture providing acceptable performance with-
out speculative execution. A new ISA requires compiler and hard-
ware updates, but these are happening in any case.
This paper introduces BasicBlocker, a generic ISA modification
that works for all common ISAs and that allows non-speculative
CPUs to obtain most of the performance benefit that would have
been provided by speculative execution. To demonstrate the fea-
sibility of BasicBlocker, this paper defines a variant of the RISC-V
ISA called BBRISC-V and provides a thorough evaluation on both a
5-stage in-order soft core and a superscalar out-of-order processor
using an associated compiler and a variety of benchmark programs.
CCS CONCEPTS
‚Ä¢ Security and privacy ‚Üí Side-channel analysis and counter-
measures; ‚Ä¢ Computer systems organization ‚Üí Architectures;
KEYWORDS
Spectre, Hardware, RISC-V
1 INTRODUCTION
The IBM Stretch computer in 1961 automatically speculated that
a conditional branch would not be taken: it began executing in-
structions after the conditional branch, and rolled the instructions
back if it turned out that the conditional branch was taken. More
1
sophisticated branch predictors appeared in several CPUs in the
1980s, and in Intel‚Äôs first Pentium CPU in 1993.
Software analyses in the 1980s such as [16] reported that pro-
grams branched every 4‚Äì6 instructions. Each branch needed 3 extra
cycles on the Pentium, a significant cost on top of 4‚Äì6 instructions,
especially given that the Pentium could often execute 2 instruc-
tions per cycle. However, speculative execution removed this cost
whenever the branch was predicted correctly.
Subsequent Intel CPUs split instructions into more pipeline
stages to support out-of-order execution and to allow higher clock
speeds. The penalty for mispredictions grew past 10 cycles. Mean-
while the average number of instructions per cycle grew past 2, so
the cost of each mispredicted branch was more than 20 instructions.
Intel further improved its branch predictors to reduce the frequency
of mispredictions; see [23].
Today the performance argument for branch prediction is stan-
dard textbook material. Accurate branch predictors are normally
described as ‚Äúcritical‚Äù for performance, ‚Äúessential‚Äù, etc.; see, e.g., [10,
27, 30]. Deployed CPUs vary in pipeline lengths, but speculative
execution is common even on tiny CPUs with just a few pipeline
stages, and is universal on larger CPUs.
This pleasant story of performance improvements was then
rudely interrupted by Spectre [34], which exploited speculative
behavior in various state-of-the-art CPUs to bypass critical secu-
rity mechanisms such as memory protection, stealing confidential
information via hardware-specific footprints left by speculatively
executed instructions. This kicked off an avalanche of emergency
software security patches, firmware updates, CPU modifications,
papers proposing additional countermeasures targeting various
software and hardware components in the execution flow with an
impact on performance, while still papers appear presenting new
attacks. Some countermeasures have been already broken, and it
is difficult to analyze whether the unbroken countermeasures are
secure.
ArXiv Version, 2021, May
J. Thoma, J. Feldtkeller, M. Krausz, T. G√ºneysu, D. J. Bernstein
1.1 Our Contributions
At this point the security auditor asks ‚ÄúCan‚Äôt we just get rid of
speculative execution?‚Äù‚Äîand is immediately told that this would
be a performance disaster. Every control-flow instruction would
cost ùëÉ cycles where ùëÉ is close to the full pipeline length, and would
thus cost the equivalent of ùëÉ √ó ùêº instructions where ùêº is the number
of instructions per cycle. This extra ùëÉ √ó ùêº-instruction cost would be
incurred every 4‚Äì6 instructions. The emergency security patches de-
scribed above also sacrificed performance, but clearly were nowhere
near this bad.
We observe, however, that this performance analysis makes an
implicit assumption regarding the instruction set architecture. We
introduce an ISA feature, BasicBlocker, that undermines this as-
sumption. BasicBlocker is simple and can be efficiently implemented
in hardware. We show how modifications to the compiler utilize the
BasicBlocker design to minimize the performance penalty of remov-
ing not only branch prediction, but also speculative fetching (that
is, instructions are fetched but never executed) from a processor.
The resulting processor design is simpler than current speculative
CPUs which removes one of the most complicated aspects of a CPU
security audit.
To evaluate performance and demonstrate feasibility of Basic-
Blocker, we start with an existing compiler and an existing CPU for
an existing ISA; we modify all of these to support BasicBlocker; and
we compare the performance of the modified CPU to the perfor-
mance of the original CPU. We selected the RISC-V ISA [4] given
its openness. To demonstrate the compatibility to different types of
CPUs, we selected two implementation platforms, one in-order soft
core (a CPU simulated by an FPGA) and a simulated superscalar
out-of-order processor to allow evaluations without manufacturing
a chip. Full details of our BBRISC-V ISA appear later in the paper.
The Spectre authors stated [34] that they ‚Äúbelieve that long-term
solutions will require fundamentally changing instruction set architec-
tures‚Äù. Our performance results rely on a synergy between changes
to the CPU and changes to the compiler, mediated by changes to
the ISA. To improve deployability, we explain how a CPU support-
ing BasicBlocker can also run code compiled for the old ISA. Our
protection against Spectre relies solely on a simple change to the
CPU, namely disabling speculation, so it applies both to old code
and to new code. Recompilation is necessary only for performance
reasons to relieve occasional hot spots, not for security.
Scope of This Work. Beyond branch prediction, CPU designers
have added many forms of speculation in the pursuit of every last
bit of performance, and the only safe assumption is that every
form of speculation threatens security. For example, [35] exploits
the prediction of return addresses and [28] exploits speculative
store-load forwarding.
BasicBlocker addresses specifically the performance loss of dis-
abling control-flow speculation. This includes branch prediction and
return-address speculation. To protect against attacks exploiting
other forms of speculation (e.g., ‚ÄúSpectre-STL‚Äù), we recommend that
the CPU designer disable all forms of speculation, not just control-
flow speculation. This is easy for any form of speculation with
sufficiently small benefits, but otherwise it raises ISA-design chal-
lenges and performance-analysis challenges. Focusing on one form
is essential to make the analysis tractable, and branch prediction in
particular clearly qualifies as an important target.
1.2 The BasicBlocker Concept in a Nutshell
The ùëÉ-cycle branch-misprediction cost mentioned above is the time
from early in the pipeline, when instructions are fetched, to late
in the pipeline, when a branch instruction computes the next pro-
gram counter. If a branch passes through the fetch stage and is
mispredicted, then the misprediction will not be known until ùëÉ
cycles later, when the next program counter is computed. Every
instruction fetched in the meantime needs to be rolled back.
The implicit assumption is that the ISA defines the branch in-
struction to take effect starting immediately with the next instruc-
tion. This assumption was already challenged by ‚Äúbranch delay
slots‚Äù on the first RISC architecture in the 1980s; see generally [18].
A branch delay slot means that a branch takes effect only after
the next instruction. The compiler compensates by moving the
branch up by one instruction, if there is an independent previous
instruction in the basic block, the contiguous sequence of instruc-
tions preceding the branch. A branch delay slot reduces the cost
of a branch misprediction by 1 instruction, and the first RISC CPU
pipeline was short enough that this removed any need for branch
prediction.
A few subsequent CPUs used double branch delay slots, reducing
the branch-misprediction cost by 2 instructions. Obviously one can
define an architecture with ùêæ = ùëÉ √ó ùêº delay slots after each branch.
However, code compiled for that architecture can only run on a
processor with exactly ùêæ delay slots. Since an optimal ùêæ depends
on the CPU, code would have to be compiled for every target CPU
individually.
In a BasicBlocker ISA, there is a ‚Äúbasic block ùëÅ ‚Äù instruction
guaranteeing that the next ùëÅ instructions1 will all be executed
consecutively. These instructions include, optionally, a branch in-
struction, which takes effect after the ùëÅ instructions, no matter
where the branch is located within the ùëÅ instructions. The same
ISA supports all values of ùëÅ simultaneously.
It is the CPU‚Äôs responsibility to disable all speculative behav-
ior, including speculative fetching. With BasicBlocker, most of the
performance lost from disabling control-flow speculation can be
regained. The BasicBlocker ISA lets the compiler declare the basic-
block size and move the branch up as far as possible within the
block. The declaration of the basic-block size lets the CPU fetch all
instructions in the basic block, without speculation. If the branch
instruction is not too close to the end of the block then the CPU can
immediately continue with the next basic block, again without spec-
ulation. The overall performance benefit of this rescheduling for
each basic block matches the benefit of whatever number of delay
slots could be useful for that microarchitecture, without the disad-
vantage of having to be compiled differently for each number of
delay slots. The new instruction further allows for tight integration
of further optimizations such as hardware loop counters.
1It is natural to consider a variant that counts ùëÅ fixed-length words (as an extreme,
ùëÅ bytes) on an architecture with variable-length instructions.
2
BasicBlocker: ISA Redesign to Make Spectre-Immune CPUs Faster
ArXiv Version, 2021, May
2 RELATED WORK
ISA Modifications. There is a long history of security features in
ISAs including extensions to enforce control-flow integrity (CFI) [2,
17], memory protection (e.g. ARM-MTE [1]), or the flushing of
microarchitectural states [56]. Other extensions simplify the se-
cure implementation of complicated and security-critical aspects,
e.g. by adding an instruction for AES computations [26]. All these
ISA extensions introduce new instructions, that can be used by a
programmer or compiler to harden a program against some spe-
cific attacks. Usage of the new features (and hence the protection)
requires some modification of the binary (mostly through recompi-
lation), but unmodified binaries run correctly as well. In all cases
hardware changes are required to support the new instructions.
Some ISAs remove incentives for control-flow speculation, al-
though not motivated by security. Berkley‚Äôs Precision Timed (PRET)
machines [37] target real-time computing applications which re-
quire a minimal worst-case runtime. Hence, control flow specu-
lation is substituted by a round-robin scheduling of instructions
from different thread contexts. With BasicBlocker we focus on
single-threaded applications to still perform well without control-
flow speculation, but thread parallelism is likely to further improve
performance. VLIW architectures [22] introduce instruction level
parallelism by explicitly declaring instructions that can be executed
in parallel at compile time. VLIW further uses compiler heuristics
to make an educated guess about the direction of a branch. If the
branch is resolved in a different direction, the compiler places com-
pensating code at the branch target. This technique relocates the
speculation problem to the compiler level. A major drawback of
VLIW is the strict compiler dependency on the target platform:
many microarchitecture decisions are embedded into the ISA, and
code must be recompiled whenever those decisions change. Ba-
sicBlocker is carefully designed to not re-introduce speculation at
compiler level and the code generated by the compiler does not
depend on the microarchitecture of the target CPU.
Spectre Countermeasures. Transient-execution attacks, including
speculative-execution attacks, gained widespread attention after
the disclosure of Spectre [34] and Meltdown [39]. The attacks in
[11, 14, 34, 35, 39, 40, 46, 50‚Äì52, 55] have shown many ways that
transient execution can undermine memory protection and violate
basic security assurances. See [12, 13, 33, 47] for surveys of attack
vectors and countermeasures. In the following we will focus on
countermeasures against control-flow speculation based attacks.
Typically, such attacks arrange for mispredicted instructions to
access sensitive data. The instructions are eventually rolled back
but still leave footprints in the microarchitectural state.
The countermeasures presented in [49, 62] prevent the attacker
from controlling the branch prediction. Such countermeasures are