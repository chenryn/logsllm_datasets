# Title: IKP: Turning a PKI Around with Decentralized Automated Incentives

## Authors
- Stephanos Matsumoto, Carnegie Mellon University/ETH Zurich
- Raphael M. Reischuk, ETH Zurich

## Abstract
Despite significant efforts to improve the TLS Public Key Infrastructure (PKI), Certificate Authorities (CAs) continue to issue unauthorized certificates, enabling man-in-the-middle (MitM) attacks on HTTPS sites. CAs lack incentives to invest in higher security, and the manual effort required to report rogue certificates deters many from contributing to the security of the TLS PKI. In this paper, we present Instant Karma PKI (IKP), a platform that automates responses to unauthorized certificates and provides incentives for CAs to behave correctly and for others to report potentially unauthorized certificates. Domains in IKP specify criteria for their certificates, and CAs specify reactions such as financial penalties that execute in case of unauthorized certificate issuance. By leveraging smart contracts and blockchain-based consensus, IKP can be decentralized while still providing automated incentives. We describe a theoretical model for payment flows and implement IKP in Ethereum to show that decentralizing and automating PKIs with financial incentives is both economically sound and technically viable.

## 1. Introduction
Transport Layer Security (TLS) secures much of the encrypted client-server communication on the World Wide Web. HTTPS, which runs over TLS, is now estimated to be used in more than half of all page loads in web browsing. The security of the TLS PKI heavily relies on CAs, who certify the authenticity of sites' public keys. Without the correct operation of CAs, encryption provides no benefit, as clients may use a key that does not actually belong to the legitimate server.

Unfortunately, CAs have shown to be prone to compromises and operational errors. These failures have occurred globally, including in the US, France, the Netherlands, Turkey, and China. Even Symantec, which has almost a quarter of the TLS-certificate market share, issued unauthorized certificates for Google and almost 2,500 unauthorized certificates for both real and unregistered domains as part of a test in 2015. Thus, while CAs play a critical role in the security of the TLS ecosystem, they have failed by issuing unauthorized certificates, maliciously issuing certificates to avoid changing browser requirements, or even selling CA authority as a service. Some of these failures have led to MitM attacks, allowing the interception of communication with popular sites such as Google, Microsoft Live, Skype, and Yahoo.

We observe that despite the need for CAs to invest more in security, there are insufficient incentives for them to do so. CAs that issue unauthorized certificates enable MitM attacks between clients and domains, who suffer the consequences of a rogue CA’s misbehavior. These MitM attacks are often only visible to those being attacked, as an adversary could present an unauthorized certificate for a domain only to some clients. Moreover, while CAs may face the consequence of being distrusted by browsers, some CAs are “too big to fail,” meaning their removal would block access to too many HTTPS sites and is thus unlikely. While proposed solutions exist, CAs generally gain little reward for a reputation of security and face few consequences for misbehaving.

We also observe that due to a lack of automation, reporting unauthorized certificates is time and labor-intensive. When a CA issues an unauthorized certificate for a domain, a detector (the entity who discovers the certificate) has several options. First, a detector can contact the misbehaving CA directly, but if the CA is malicious, it may never revoke the certificate, leaving the domain open to potential MitM attacks. Even revocation may not help since some widely-used browsers do not check revocation information at all. The detector could instead contact browser vendors, who can update client browsers to reject the certificate, but such a response is unlikely except for relatively popular sites. A detector could also pursue legal action against the CA, but this process may be long, costly, and ultimately unfruitful, due in part to the fact that CAs are located in approximately 52 countries, each with its own legal system. Thus, due to the unlikely recourse and the effort required, there are insufficient incentives for detectors to report unauthorized certificates.

Therefore, in this paper, we ask two fundamental questions: how can we better incentivize correct CA behavior and the reporting of misbehavior, and how can we automate the processing of an unauthorized certificate report? In particular, how can we formally define what it means for a CA to behave correctly? What incentives can we offer CAs and detectors? What mechanisms are necessary for automating the handling reports of misbehavior, and what benefits does automation provide?

As a first step towards answering these questions, we propose Instant Karma PKI (IKP), an automated platform for defining and reporting CA misbehavior that incentivizes CAs to correctly issue certificates and detectors to quickly report unauthorized certificates. IKP allows domains to specify policies that define CA misbehavior, and CAs to sell insurance against misbehavior. We also propose a formal model for incentive analysis to show that IKP provides incentives for CAs and detectors and punishes misbehaving CAs. We further show that with our incentive structure, even CAs that collude with other domains or detectors cannot profit financially.

More concretely, for the TLS Web PKI, IKP allows participating HTTPS domains to publish domain certificate policies (DCPs), policies that specify criteria that the domains’ TLS certificates must meet. Any violation of these policies constitutes CA misbehavior. IKP allows participating CAs to sell reaction policies (RPs) to domains, which specify financial transactions that execute automatically when an unauthorized certificate is reported. Domains affected by the certificate, the detector, and the CA receive payments via these transactions. The payment amounts are set such that CAs expect to lose money by issuing unauthorized certificates, and detectors expect to gain money by reporting unauthorized certificates. Information about CA misbehavior and RP offerings are public, allowing domains to use this information as an indicator of how likely a CA is to maintain high security and thus protect against unauthorized certificate issuance.

We have implemented a prototype of IKP in Ethereum, a blockchain-based smart contract platform that provides important properties for achieving incentivization and automation. Ether, the cryptocurrency underlying Ethereum, is a natural basis for implementing financial transactions and incentives. The smart contract ecosystem provides a public, automated mechanism for handling detector reports and executing financial transactions, ensuring quick responses to CA misbehavior. Furthermore, Ethereum provides decentralization so that no trusted third party is needed to register DCPs, RPs, and financial assets. While incentivization and automation are possible with a centralized third party, we protect IKP itself against compromise by building it on top of Ethereum.

To provide realistic incentive amounts, we also analyze certificate offers from the most widely-used CAs, quantifying and bounding the risks of CA misbehavior. These insights allow us to predict realistic payment amounts for RPs.

In summary, we make the following contributions:
- We present the design of IKP, including a framework for domain policies and reactions to CA misbehavior.
- We demonstrate through an economic analysis that IKP incentivizes good CA behavior and punishes misbehavior.
- We implement an IKP prototype in Ethereum and discuss the present and future technical feasibility of IKP.
- We analyze real-world data from existing CAs to determine realistic values for RP offerings.

## 2. Problem Definition and Adversary Model
### 2.1. Problem Definition
The goal of this paper is to provide incentives for correct CA behavior (i.e., due diligence when issuing certificates) and automation in processing reports of unauthorized certificates from detectors. To achieve this goal, we must design a system that can:
1. Define CA misbehavior.
2. Evaluate whether a given certificate constitutes misbehavior according to the above definition.
3. Specify reactions and payments that will occur in response to CA misbehavior.
4. Process reports from detectors regarding unauthorized certificates.
5. Execute these reactions and payments automatically after a CA has misbehaved.

Achieving these goals allows us to deter CA misbehavior by choosing payments that provide the appropriate incentives for correct CA behavior and for reporting unauthorized certificates. These incentives also increase the number of entities monitoring CAs and thus the probability that an unauthorized certificate is quickly detected. Automatic execution of reactions and payments ensures "instant karma" in IKP: detectors quickly receive rewards and CAs quickly receive punishment.

### 2.2. Desired Properties
A system achieving the above goals should have at least the following properties:
- **Public auditability:** All information required to detect an unauthorized certificate is publicly accessible.
- **Automation:** Once CA misbehavior has been reported and confirmed, reactions should automatically proceed without requiring additional information or authorization.
- **Incentivization:** Entities that expose CA misbehavior have a positive expected return on investment (ROI).
- **Deterrence:** CAs have a negative expected ROI for issuing an unauthorized certificate for a domain, regardless of the entities they collude with.

As secondary goals, the system should achieve decentralization (i.e., the absence of a central trusted entity in the system) and MitM prevention (i.e., the rejection of all unauthorized certificates by clients).

### 2.3. Adversary Model
Our adversary's goal is to issue a rogue certificate while maintaining a positive expected ROI. The adversary may access the long-term private keys of one or more CAs (and can thus issue arbitrary certificates from these CAs), as well as those of colluding domains. The adversary may take any action within the PKI (e.g., issuing/revoking certificates) or within IKP (e.g., issuing RPs or reporting certificates) to obtain a net positive ROI among all entities it controls. We assume that the adversary cannot break standard cryptographic primitives, such as finding hash collisions or forging digital signatures. The adversary also cannot compromise the private keys of arbitrary domains. In our blockchain-based instantiation, we further assume that the adversary cannot control a majority of hashing power in the blockchain network.

## 3. IKP Overview
### 3.1. Architecture
IKP is an extension of the standard TLS architecture. As in TLS, CAs issue certificates to domains, whose servers carry out TLS handshakes with clients. As shown in Figure 1, IKP introduces two new entities: the IKP authority and detectors.

**IKP Authority:**
- Maintains information on CAs such as identifiers (e.g., DNS names), public keys to authenticate to the IKP authority, and financial account information for receiving payments.
- Stores domain certificate policies (DCPs), which are provided by domains and can be used to computationally determine whether a given certificate is authorized for a domain.
- Stores reaction policies (RPs), which specify automatic reactions that occur if an unauthorized certificate is reported.
- Executes these reactions.
- Maintains a balance called the global fund, which can send and receive payments in IKP.

**Detectors:**
- Responsible for reporting suspicious certificates to the IKP authority.
- Monitor certificates issued by CAs and report any certificates they deem to be unauthorized.
- Any entity, be it a CA, domain, or client, can detect and report CA misbehavior.
- Each detector must have a financial account at which it can receive rewards for successfully reporting an unauthorized certificate.

Entities in the standard TLS architecture have additional responsibilities. CAs who have registered with the IKP authority can issue RPs, acting as a sort of "insurer" against CA misbehavior. Domains register DCPs with the IKP authority, providing a public policy that defines CA misbehavior (i.e., issuing an unauthorized certificate). While Figure 2 shows intuitive examples of a DCP and an RP, the logic of both DCPs and RPs is determined by machine-understandable policies specified by the domain and by the CA, respectively, providing flexibility in addition to automation and financial incentives.

### 3.2. Operation
We now summarize the actions that occur in IKP, some of which are shown in Figure 2.

**CA A:**
- Issues a certificate {a.com, K} for a.com.
- Registers an RP: "If anyone issues an unauthorized cert for a.com, I’ll pay them $X and whoever finds such a cert will get $Y."

**Domain a.com:**
- Registers a DCP: "Only CAs A and B can issue certificates for a.com."

**IKP Authority:**
- Collects registration fees.
- Stores DCPs and RPs.
- Processes detector reports.
- Executes payouts.

**Detector:**
- Reports an unauthorized certificate {a.com, K'} to the IKP authority.

**Figure 2. Sample interactions between entities in IKP.**
- Yellow denotes a CA.
- Purple denotes a domain.

**Table I: Explanation of Fields in a CA Registration**
| Field | Use |
| --- | --- |
| CA name | Identify CA |
| Valid from | Specify start period of information validity |
| Payment account | Receive payments for CA |
| Public keys | List of CA’s public keys |
| Update keys | Authorize updates to this information (default: empty) |
| Update threshold | Threshold of signatures required for updates (default: 1) |

This structured and detailed overview provides a clear and comprehensive understanding of the IKP system, its components, and its operations.