main() /* convert declaration to words */
{
while (gettoken() != EOF) {              /* 1st token on line */ strcpy(datatype, token);              /* is the datatype */ out[0] = '\0';
dcl();              /* parse rest of line */ if (tokentype != '\n')
printf("syntax error\n");
printf("%s: %s %s\n", name, out, datatype);
}
return 0;
}
函数 gettoken 用来跳过空格与制表符，以查找输入中的下一个记号。"记号"(token) 可以是一个名字，一对圆括号，可能包含一个数字的一对方括号，也可以是其它任何单个字 符。
int gettoken(void)              /* return next token */
{
int c, getch(void); void ungetch(int); char *p = token;
while ((c = getch()) == ' ' || c == '\t')
;
if (c == '(') {
if ((c = getch()) == ')') {
strcpy(token, "()"); return tokentype = PARENS;
} else {
ungetch(c);
return tokentype = '(';
}
} else if (c == '[') {
for (*p++ = c; (*p++ = getch()) != ']'; )
;
*p = '\0';
return tokentype = BRACKETS;
} else if (isalpha(c)) {
for (*p++ = c; isalnum(c = getch()); )
*p++ = c;
*p = '\0'; ungetch(c);
return tokentype = NAME;
} else
return tokentype = c;
}
有关函数 getch 和 ungetch 的说明，参见第 4 章。 如果不在乎生成多余的圆括号，另一个方向的转换要容易一些。为了简化程序的输入，
我们将“ x is a function returning a pointer to an array of pointers to functions returning char"(x 是
一个函数，它返回一个指针，该指针指向一个一维数组，该一维数组的元素为指针，这些指 针分别指向多个函数，这些函数的返回值为  char 类型)的描述用下列形式表示:
x () * [] * () char
程序 undcl 将把该形式转换为:
char (*(*x())[])()
由于对输入的语法进行了简化，所以可以重用上面定义的 gettoken 函数。undcl 和 dcl
使用相同的外部变量。
/* undcl:              convert word descriptions to declarations */ main()
{
int type;
char temp[MAXTOKEN];
while (gettoken() != EOF) { strcpy(out, token);
while ((type = gettoken()) != '\n')
if (type == PARENS || type == BRACKETS) strcat(out, token);
else if (type == '*') { sprintf(temp, "(*%s)", out); strcpy(out, temp);
} else if (type == NAME) { sprintf(temp, "%s %s", token, out); strcpy(out, temp);
} else
}
return 0;
}
printf("invalid input at %s\n", token);
练习 5•18             修改 dcl 程序，使它能够处理输入中的错误。
练习 5•19             修改 undcl 程序，使它在把文字描述转换为声明的过程中不会生成多余的 圆括号。
练习 5•20             扩展 dcl 程序的功能，使它能够处理包含其它成分的声明，例如带有函数 参数类型的声明、带有类似于 const 限定符的声明等。
第6章 结构
结构是一个或多个变量的集合，这些变量可能为不同的类型，为了处理的方便而将这些 变量组织在一个名字之下。(某些语言将结构称为"记录"，比如 Pascal 语言。)由于结构将一 组相关的变量看作一个单元而不是各自独立的实体，因此结构有助于组织复杂的数据，特别 是在大型的程序中。
工资记录是用来描述结构的一个传统例子。每个雇员由一组属性描述，如姓名、地址、 社会保险号、工资等。其中的某些属性也可以是结构，例如姓名可以分成几部分，地址甚至 工资也可能出现类似的情况。C 语言中更典型的一个例子来自于图形领域:点由一对坐标定义， 矩形由两个点定义，等等。
ANSI 标准在结构方面最主要的变化是定义了结构的赋值操作——结构可以拷贝、赋值、 传递给函数，函数也可以返回结构类型的返回值。多年以前，这一操作就已经被大多数的编 译器所支持，但是，直到这一标准才对其属性进行了精确定义。在 ANSI 标准中，自动结构和 数组现在也可以进行初始化。
6.1 结构的基本知识
我们首先来建立一些适用于图形领域的结构。点是最基本的对象，假定用 x 与 y 坐标表 示它，且 x、y 的坐标值都为整数(参见图 6•1)
图 6•1
我们可以采用结构存放这两个坐标，其声明如下:
struct point { int x;
int y;
};
关键字 struct 引入结构声明。结构声明由包含在花括号内的一系列声明组成。关键字 struct 后面的名字是可选的，称为结构标记(这里是 point)。结构标记用于为结构命名， 在定义之后，结构标记就代表花括号内的声明，可以用它作为该声明的简写形式。
结构中定义的变量称为成员。结构成员、结构标记和普通变量(即非成员)可以采用相
同的名字，它们之间不会冲突，因为通过上下文分析总可以对它们进行区分。另外，不同结 构中的成员可以使用相同的名字，但是，从编程风格方面来说，通常只有密切相关的对象才 会使用相同的名字。
struct 声明定义了一种数据类型。在标志结构成员表结束的右花括号之后可以跟一个变 量表，这与其它基本类型的变量声明是相同的。例如:
struct { ... } x, y, z;
从语法角度来说，这种方式的声明与声明
int x, y, z;
具有类似的意义。这两个声明都将 x、y 与 z 声明为指定类型的变量，并且为它们分配存储空 间。
如果结构声明的后面不带变量表，则不需要为它分配存储空间，它仅仅描述了一个结构 的模板或轮廓。但是，如果结构声明中带有标记，那么在以后定义结构实例时便可以使用该 标记定义。例如，对于上面给出的结构声明 point，语句
struct point pt;
定义了一个 struct point 类型的变量 pt。结构的初始化可以在定义的后面使用初值表进 行。初值表中同每个成员对应的初值必须是常量表达式，例如:
struct point maxpt = {320, 200};
自动结构也可以通过赋值初始化，还可以通过调用返回相应类型结构的函数进行初始化。 在表达式中，可以通过下列形式引用某个特定结构中的成员:
结构名.成员
其中的结构成员运算符“ ."将结构名与成员名连接起来。例如，可用下列语句打印点 pt 的 坐标:
printf("%d,%d", pt.x, pt.y);
或者通过下列代码计算原点(0, 0)到点 pt 的距离:
double dist, sqrt(double);
dist = sqrt((double)pt.x * pt.x + (double)pt.y * pt.y);
结构可以嵌套。我们可以用对角线上的两个点来定义矩形(参见图    6•2)，相应的结构定 义如下:
图 6•2
struct rect {
struct point pt1; struct point pt2;
};
结构 rect 包含两个 point 类型的成员。如果按照下列方式声明 screen 变量:
struct rect screen;
则可以用语句
screen.pt1.x
引用 screen 的成员 pt1 的 x 坐标。
6.2 结构与函数
结构的合法操作只有几种:作为一个整体复制和赋值，通过&运算符取地址，访问其成员。 其中，复制和赋值包括向函数传递参数以及从函数返回值。结构之间不可以进行比较。可以 用一个常量成员值列表初始化结构，自动结构也可以通过赋值进行初始化。
为了更进一步地理解结构，我们编写几个对点和矩形进行操作的函数。至少可以通过 3 种可能的方法传递结构:一是分别传递各个结构成员，二是传递整个结构，三是传递指向结 构的指针。这 3 种方法各有利弊。
首先来看一下函数 makepoint，它带有两个整型参数，并返回一个 point 类型的结构:
/* makepoint:              make a point from x and y components */ struct point makepoint(int x, int y)
{
struct point temp;
temp.x = x; temp.y = y; return temp;
}
注意，参数名和结构成员同名不会引起冲突。事实上，使用重名可以强调两者之间的关系。 现在可以使用 makepoint 函数动态地初始化任意结构，也可以向函数提供结构类型的参
数。例如:
struct rect screen; struct point middle;
struct point makepoint(int, int);
screen.pt1 = makepoint(0,0); screen.pt2 = makepoint(XMAX, YMAX);
middle = makepoint((screen.pt1.x + screen.pt2.x)/2,
(screen.pt1.y + screen.pt2.y)/2);
接下来需要编写一系列的函数对点执行算术运算。例如:
/* addpoints:              add two points */
struct addpoint(struct point p1, struct point p2)
{
p1.x += p2.x; p1.y += p2.y; return p1;
}
其中，函数的参数和返回值都是结构类型。之所以直接将相加所得的结果赋值给 p1，而没有 使用显式的临时变量存储，是为了强调结构类型的参数和其它类型的参数一样，都是通过值 传递的。
下面来看另外一个例子。函数 prinrect 判断一个点是否在给定的矩形内部。我们采用 这样一个约定:矩形包括其左侧边和底边，但不包括顶边和右侧边。
/* ptinrect:              return 1 if p in r, 0 if not */ int ptinrect(struct point p, struct rect r)
{
return p.x >= r.pt1.x && p.x = r.pt1.y && p.y  (b) ? (a) : (b))
/* canonrect: canonicalize coordinates of rectangle */ struct rect canonrect(struct rect r)
{
struct rect temp;