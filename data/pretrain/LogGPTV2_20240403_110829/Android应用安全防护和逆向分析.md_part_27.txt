![](OEBPS/Images/17a11-i.jpg){.calibre642}
:::
图17-11 激活模块
这时候看到激活成功之后，会提示再次重启设备才能生效。每当有新的模块或者模块代码有更新都需要重启设备模块才生效，如图17-12所示。
这一点还是麻烦的。重启设备之后，再运行模块代码看看效果，如图17-13所示。
从这显示结果看到了，Hook成功了，在没有Hook之前的效果是，如图17-14所示。
::: bodypic-c
![](OEBPS/Images/17a12-i.jpg){.calibre643}
:::
图17-12 提示模块更新
::: bodypic-c
![](OEBPS/Images/17a13-i.jpg){.calibre644}
:::
图17-13 运行结果
::: bodypic-c
![](OEBPS/Images/17a14-i.jpg){.calibre645}
:::
图17-14 没有拦截之前的运行效果
这时候来看一下打印的日志信息，如下所示：
::: bodypic-c
![](OEBPS/Images/265-i.jpg){.calibre646}
:::
百度地图在获取设备的imei和位置信息，当然这是符合正常情况的，从这里可以看到，还可以利用这个技术来观察设备中有哪些应用在获取设备的一些隐私数据。
[提示：]{.yanse}项目下载地址为[https://github.com/fourbrother/xposedhookdemo](https://github.com/fourbrother/xposedhookdemo){.calibre32
.pcalibre}
[]{#105.xhtml}
#### 17.5 本章小结 {.bodycontent-title2}
本章主要介绍Xposed的基本使用规则和方法，XposedInstaller.apk其实是一个模块载体和管理器，如果想实现具体的Hook操作，就必须自己编写模块程序，然后激活加载方可生效。在实际过程中，这个框架是非常有用的，可以通过修改系统的一些信息来帮助测试模拟复杂的测试环境，但是这个框架现在用得最广泛的当属破解操作，比如用这个框架可以进行应用的脱壳，编写游戏的外挂等。
[]{#106.xhtml}
### 第18章 脱壳神器ZjDroid {.bodycontent-title4}
前面一章介绍了Xposed框架工具的基本使用，本章将继续介绍Xposed框架的另外一个功能即脱壳，主要是利用Xposed的脱壳模块工具ZjDroid实现的，因为它是开源的，所以直接分析源码即可，源码的下载地址：[https://github.com/halfkiss/ZjDroid](https://github.com/halfkiss/ZjDroid){.calibre32
.pcalibre}。不过可惜的是现在只公开了Java层的代码，而native层的代码并没有公开，分析源码之后会发现最重要的功能就在native层。
[]{#107.xhtml}
#### 18.1 ZjDroid原理分析 {.bodycontent-title2}
下面就来详细分析一下ZjDroid工具的源码，由Eclipse工程导入，基于之前的Xposed模块编写的经验，找到入口代码，在assets目录下有一个xposed_init文件中就记录了模块的入口类，如图18-1、图18-2所示。
::: bodypic-c
![](OEBPS/Images/18a1-i.jpg){.calibre647}
:::
图18-1 xposed_init文件\
::: bodypic-c
![](OEBPS/Images/18a2-i.jpg){.calibre648}
:::
图18-2 xposed_init入口类
直接进入到这个类即可，代码如下：
::: bodypic-c
![](OEBPS/Images/266-i.jpg){.calibre649}
:::
遵循统一规则，实现了IXposedHookLoadPackage接口，再实现handleLoadPackage回调方法即可，下面继续分析入口方法ModuleContext，代码如下：
::: bodypic-c
![](OEBPS/Images/267-i.jpg){.calibre650}
:::
这里开始拦截Application的onCreate方法，而这个方法一般是每个应用程序的启动方法，在这里做拦截操作也是合情合理的，再看拦截之后做了什么，也就是ApplicationOnCreateHook类的实现，代码如下：
::: bodypic-c
![](OEBPS/Images/267-2-i.jpg){.calibre651}
:::
在这里开始真正的拦截操作，主要是添加了一个广播，每个应用在启动的时候都会去注册这个广播，而如果后续使用该工具发送这样对应Action广播的话，每个应用程序都会收到。所以这里可以看到，核心工作就在这个广播的接收之后做了，接下来继续去看这个广播的定义，代码如下：
::: bodypic-c
![](OEBPS/Images/267-3-i.jpg){.calibre652}
:::
::: bodypic-c
![](OEBPS/Images/268-i.jpg){.calibre653}
:::
果然在这里，可以看到首先会通过发送广播的intent中携带一些数据过来，主要是两个数据：
·进程id：作用主要是为了过滤其他应用，只处理本应用的逻辑，因为这个广播发送之后所有的应用都能接收到，但是脱壳时肯定只是针对于某一个应用，那么只需要在这个应用的广播接收中做处理即可。
·命令字符串：是为了发送广播可以支持多种功能，后面分析也可以看到的确有很多功能。
得到命令之后就开始构造一个执行器类，这里用到了设计模式中的命令模式。下面继续看看有哪几种命令执行器类，代码如下：
::: bodypic-c
![](OEBPS/Images/268-2-i.jpg){.calibre219}
:::
[]{#108.xhtml}
#### 18.2 工具命令分析 {.bodycontent-title2}
下面就来逐一分析这个工具支持哪几种命令。
###### 1.dump_dexinfo {.section-subtitle}
获取应用运行时内存中dex的信息DumpDexInfoCommandHandler，代码如下：
::: bodypic-c
![](OEBPS/Images/269-2-i.jpg){.calibre654}
:::
进入方法详细查看一下：
::: bodypic-c
![](OEBPS/Images/269-3-i.jpg){.calibre655}
:::
可以看到，这里的实现逻辑是，全部通过反射机制获取每个应用的dex文件对应的DexFile类型对象，这里的工作和Android中插件化开发逻辑有点类似，通过应用的默认类加载PathClassLoader类得到DexPathList类，然后再得到具体的DexFile对象即可。
这里要说的就是这个dex文件对应的cookie值，这个值非常重要，是后续命令操作的基本信息，它代表的含义就是底层中每个应用的dex文件对应的唯一id值，系统会维护一个map结构来保存这些数据，然后通过这个cookie值找到对应的dex文件信息。
命令用法：
::: bodypic-c
![](OEBPS/Images/269-4-i.jpg){.calibre330}
:::
这里使用的是命令方式发送一个广播，通过\--ei携带目标进程id是一个int类型，通过\--es携带命令字符串。
###### 2.dump_dexfile {.section-subtitle}
这个命令也是后续脱壳的重要命令，就是dump出应用内存中的dex文件DumpDex-FileCommandHandler，代码如下：
::: bodypic-c
![](OEBPS/Images/270-i.jpg){.calibre656}
:::
这里可以看到dump出应用的内存数据，首先需要传入源应用的dex数据，也就是apk文件，这一般都是存放在/data/app/xxx.apk目录下的，然后构建了一个dump之后的dex文件路径，通过源码查看是在/data/data/xxx/files/dexdump.odex中。接下继续查看dump的核心代码：
::: bodypic-c
![](OEBPS/Images/270-2-i.jpg){.calibre212}
:::
看到这里有一个核心的方法，但是可惜的是这个方法是native的，而这个工具并没有把native层的代码公开，但是通过这里传递的参数可以了解到，底层应该是采用了libdvm.so或者是libart.so库得到具体的函数，然后通过dex对应的cookie值获取信息。
命令用法：
::: bodypic-c
![](OEBPS/Images/270-3-i.jpg){.calibre109}
:::
注意这里的dexpath参数代表需要脱壳的dex文件，也就是应用程序文件。
###### 3.backsmali {.section-subtitle}
这个命令与上面的命令功能差不多，只是这个命令多了一层操作，就是把dex文件转化成smali文件，所以这里不再详细说明了，可以先得到dex文件，然后通过工具得到smali文件。
命令用法：
::: bodypic-c
![](OEBPS/Images/270-4-i.jpg){.calibre110}
:::
注意这里的dexpath参数代表需要脱壳的dex文件，也就是应用程序文件。而最终生成的smali文件是放在/data/data/xxx/smali下面的。
###### 4.dump_mem {.section-subtitle}
这个命令是用来dump出应用程序运行时内存中指定开始位置和长度的内存块数据的DumpMemCommandHandler，代码如下所示：
::: bodypic-c
![](OEBPS/Images/271-i.jpg){.calibre657}
:::
可惜这个方法也是native层的，但是可以知道每个应用运行时的内存地址都在/proc/\[pid\]/maps文件中，如下所示：
::: bodypic-c
![](OEBPS/Images/271-2-i.jpg){.calibre658}
:::
那么查找内存地址，然后使用memcpy进行内存数据拷贝也是非常简单的。
命令用法：
::: bodypic-c
![](OEBPS/Images/271-3-i.jpg){.calibre100}
:::
注意这里的start和length都是十进制的，而不是十六进制的数据格式。
###### 5.dump_heap {.section-subtitle}
这个命令可以dump出虚拟机的堆内存信息，文件可以使用Java
heap工具进行分析，而对于这个命令想一下应该也知道实现逻辑，也是在native层的，而且这个代码逻辑应该和上面的那个命令差不多。
命令用法：
::: bodypic-c
![](OEBPS/Images/271-4-i.jpg){.calibre108}
:::
###### 6.dump_class {.section-subtitle}
这个命令主要用于dump出dex文件中的类信息，因为在DexFile对象中有一个隐藏的方法可以把dex文件中的所有类名获取到getClassNameList，如下代码：
::: bodypic-c
![](OEBPS/Images/271-5-i.jpg){.calibre659}
:::
可以看到这个方法的传入参数为一个dex文件对应的cookie值。
命令用法：
::: bodypic-c
![](OEBPS/Images/272-i.jpg){.calibre461}
:::
这里的dexpath是需要得到所有类信息的dex文件路径，也就是应用的apk文件路径。
###### 7.invoke {.section-subtitle}
这个命令用于运行时动态调用Lua脚本，该功能可以通过Lua脚本动态调用Java代码。使用场景：可以动态调用解密函数，完成解密；可以动态触发特定逻辑。代码就不进行分析了，因为觉得这个命令很少使用。
命令用法：
::: bodypic-c
![](OEBPS/Images/272-2-i.jpg){.calibre435}
:::
这里的filepath是Lua脚本文件的存放路径。
[]{#109.xhtml}
#### 18.3 工具日志信息 {.bodycontent-title2}
ZjDroid工具除了操作命令，还有两个非常重要的打印日志的tag：
·adb logcat-s zjdroid-shell-{package
name}。这个tag可以查看上面每个命令执行的结果，便于查看命令执行的状态。
·adb logcat-s zjdroid-apimonitor-{package
name}。这个tag可以监听对应包名应用调用的API信息，这个作用有点类似于运行时权限请求。可以直接通过Xposed提供的方法对一些敏感API进行拦截，然后添加监控代码即可。
[]{#110.xhtml}
#### 18.4 工具用法总结 {.bodycontent-title2}
完全分析完ZjDroid工具的功能，下面就来总结一下：
1）获取apk当前加载dex文件信息：
::: bodypic-c
![](OEBPS/Images/272-3-i.jpg){.calibre64}
:::
2）获取指定dex文件包含可加载类名：
::: bodypic-c
![](OEBPS/Images/272-4-i.jpg){.calibre522}
:::
3）根据Dalvik相关内存指针动态反编译指定dex，并以文件形式保存：
::: bodypic-c
![](OEBPS/Images/272-5-i.jpg){.calibre102}
:::
4）dump指定dex内存中的数据并保存到文件（数据为odex格式，可在PC上反编译）：
::: bodypic-c
![](OEBPS/Images/273-i.jpg){.calibre110}
:::
5）dump指定内存空间区域数据到文件：
::: bodypic-c
![](OEBPS/Images/273-2-i.jpg){.calibre397}
:::
6）dump Dalvik堆栈信息到文件，文件可以通过Java heap分析工具分析处理：
::: bodypic-c