erwise have been removed by the kernel developers in the
near future. In particular, Redhat mentioned that fixing RSB
underflows will not fully solve the problems pointed out in
our paper.
7 RELATED WORK
In the following, we discuss concepts related to our paper.
First, we provide an overview of the two recent papers on
speculative and out-of-order executions that are both closest
to our work. We will then briefly summarize other similar
work done in that area. Further, we look into microarchitec-
tural attacks in general, discussing some notable examples.
Finally, we also discuss proposed defense techniques and their
efficacy against our proposed attacks.
7.1 Out-of-Order/Speculative Execution
Despite being implemented in CPUs since the early 90s, out-
of-order and speculative executions have only recently caught
the attention of security researchers. The initial discovery
of security issues in both these concepts is attributed to a
Google Project Zero researcher. Horn was the first to disclose
the vulnerability to the vendors [18]. Concurrently, Fogh also
inspected speculative execution and reported his (so far nega-
tive) findings [12]. Another concurrent work from Maisuradze
and Rossow [29] also studied speculative execution, leading
to a discovery of a side channel to derandomize kernel-level
11
ASLR, and reading arbitrary user memory in speculation.
All these discovered issues were then distilled in two major
research papers that nicely summarize the general threats.
On the one hand, Meltdown [26] (a.k.a. Variant 3) abuses
a flaw in Intel’s out-of-order execution engine, allowing ad-
versaries to have access to data for a split-second without
checking the privileges. This race condition in the execution
core allows attackers to disclose arbitrary privileged data
from kernel space. While it is the most severe, Meltdown
is relatively easy to counter with both microcode updates
and/or stronger separation between user and kernel space.
Spectre [22] (a.k.a. Variants 1 and 2), on the other hand,
does not rely on implementation bugs in CPUs, and is there-
fore also significantly harder to tackle. Technically, Spectre
uses a benign CPU feature: speculative execution. The prob-
lem, however, is that the branch predictor is shared between
different processes and even between different privileges run-
ning on the same core. Therefore, in Spectre, adversaries are
able to inject arbitrary branch targets into predictors and,
by doing so, trigger arbitrary speculative code execution in
victim processes (similar to our first attack). Furthermore,
similar to our second attack, Spectre also proposed an in-
browser attack to abuse the branch predictor in the same
process, where mispredicting a branch path can lead to leak-
age of unauthorized data. Spectre is thus closely related to
our approach. The difference is that we achieve similar attack
goals by abusing a completely different prediction mechanism
of the CPU: return stack buffers. While RSBs were already
mentioned as a potential security risk [18, 22], it was so far
unclear whether RSBs indeed pose a threat similarly severe
as BTBs. Our work answers this open question and provides
countermeasures to this problem.
Follow-up works naturally arose out of the general dis-
covery of Meltdown and Spectre. In SgxPectre, for example,
Chen et al. [8] showed that it is possible to use branch target
injection to extract critical information from an SGX enclave.
Similarly, in BranchScope, Evtyushkin et al. [10] studied the
possible abuses of direct branch predictors to leak sensitive
data from different processes, including SGX enclaves.
7.2 Cache-Based Side Channels
Given that accessing main memory in modern CPUs takes
hundreds of cycles, current architectures employ multiple
layers of caches. Each layer has various characteristics and
timing properties, thus providing unique information as side
channels. The key idea of cache side channel attacks is to
distinguish the access times between cache hits and misses,
revealing whether the corresponding data was cached or not.
Cache attacks can be divided into attacks on instruction
and data caches. The attacks on instruction caches aim to
leak information about the execution of the target program.
For example, information from instruction caches can be used
to reconstruct the execution trace of collocated programs [1–
3, 7] or even VMs on the same machine [39].
In contrast, side channels from data caches reveal data
access patterns in the target program, which again can be
12
either a collocated program or a VM, depending on the level
of the attacked cache. Per-core caches (e.g., L1 and L2) can
be used as side channels against programs running on the
same physical core. This has been shown to be useful for
reconstructing cryptographic keys [36]. Conversely, shared
or last-level caches (LLC) can be used to leak information,
e.g., keystrokes or user-typed passwords, from any process
running on the same CPU—notably even across VMs [33].
There are different ways to leak data via caches. Most
notably, Flush+Reload [38] uses clflush to flush the re-
quired cache lines from the last-level cache shared with
the victim. By measuring the same cache line, the attacker
can detect whether the victim has accessed a certain cache
line. Some variations of the Flush+Reload attack include
Evict+Reload [17], which tries to evict the target cache line
by doing memory accesses instead of the clflush instruc-
tion. This is important for cases where clflush cannot be
used, e.g., in JIT code (cf. Section 5), or architectures with-
out an instruction similar to clflush [25]. The inverse of
Flush+Reload is Prime+Probe [31], where the adversary al-
locates (primes) the entire cache with its own data, and then
triggers the execution of the victim. Then, the attacker will
probe the caches to see which cache lines have been evicted
(i.e., which cache lines have been accessed) by the victim.
7.3 Other Microarchitectural Side Channels
Given the complexity and abundance of optimizations, side
channels in microarchitectures is not surprising anymore.
Therefore, there are plenty of different attack techniques pro-
posed by researchers, each of which target microarchitectural
features of modern CPUs. For example, Evtyushkin et al. [9]
use collisions in BTBs to leak information about the kernel
address space, and by doing so derandomize the kernel-level
ASLR (KASLR). Similar to Meltdown, which uses out-of-
order execution to suppress exceptions, Jang et al. [20] use
Intel’s transactional synchronization extensions (TSX). By
accessing kernel pages with TSX, depending on the type of
the generated exception (e.g., a segmentation fault if memory
is unmapped, or a general protection fault if the process does
not have the privileges to access certain memory regions),
the time to roll back the transaction differs. This constitutes
a timing side channel that can be used to bypass KASLR, as
an attacker can probe pages mapped in the kernel.
8 CONCLUSION
In this work, we investigate the security implications of spec-
ulative execution caused by return stack buffers (RSBs),
presenting general principles of RSB-based speculative exe-
cution. We show that RSBs are a powerful tool in the hands
of an adversary, fueled by the simplicity of triggering spec-
ulative execution via RSBs. We demonstrate that return
address speculation can lead to arbitrary speculative code
execution across processes (unless RSBs are flushed upon
context switches). Furthermore, we show that in-process
speculative code execution can be achieved in a sandboxed
process, resulting in arbitrary memory disclosure.
REFERENCES
[1] Onur Aciiçmez. 2007. Yet another microarchitectural attack:
exploiting I-cache. In Proceedings of the 2007 ACM workshop
on Computer security architecture. ACM, 11–18.
[2] Onur Acıiçmez, Billy Bob Brumley, and Philipp Grabher. 2010.
New results on instruction cache attacks. In Conference on Cryp-
tographic Hardware and Embedded Systems (CHES), Vol. 2010.
Springer, 110–124.
[3] Onur Aciiçmez and Werner Schindler. 2008. A vulnerability in
RSA implementations due to instruction cache analysis and its
demonstration on OpenSSL. In CT-RSA, Vol. 8. Springer, 256–
273.
[4] Michalis Athanasakis, Elias Athanasopoulos, Michalis Polychron-
akis, Georgios Portokalidis, and Sotiris Ioannidis. 2015. The Devil
is in the Constants: Bypassing Defenses in Browser JIT Engines.
In Proceedings of the Network and Distributed System Security
(NDSS) Symposium.
[5] Daniel J Bernstein. 2005. Cache-timing attacks on AES. (2005).
[6] Yinzhi Cao, Zhanhao Chen, Song Li, and Shujiang Wu. 2017.
Deterministic Browser. In Proceedings of the 2017 ACM SIGSAC
Conference on Computer and Communications Security. ACM,
163–178.
[7] Caisen Chen, Tao Wang, Yingzhan Kou, Xiaocen Chen, and Xiong
Li. 2013. Improvement of trace-driven I-Cache timing attack on
the RSA algorithm. Journal of Systems and Software 86, 1
(2013), 100–107.
[8] Guoxing Chen, Sanchuan Chen, Yuan Xiao, Yinqian Zhang,
Zhiqiang Lin, and Ten H Lai. 2018. SGXPECTRE Attacks: Leak-
ing Enclave Secrets via Speculative Execution. arXiv preprint
arXiv:1802.09085 (2018).
[9] Dmitry Evtyushkin, Dmitry Ponomarev, and Nael Abu-Ghazaleh.
2016. Jump over ASLR: Attacking branch predictors to by-
pass ASLR. In Microarchitecture (MICRO), 2016 49th Annual
IEEE/ACM International Symposium on. IEEE, 1–13.
[10] Dmitry Evtyushkin, Ryan Riley, Nael CSE Abu-Ghazaleh, Dmitry
Ponomarev, et al. 2018. BranchScope: A New Side-Channel Attack
on Directional Branch Predictor. In Proceedings of the Twenty-
Third International Conference on Architectural Support for
Programming Languages and Operating Systems. ACM, 693–
707.
[11] Agner Fog. 2018. The microarchitecture of Intel, AMD and VIA
CPUs. http://www.agner.org/optimize/microarchitecture.pdf
[14] Ben Gras, Kaveh Razavi, Erik Bosman, Herbert Bos, and Chris-
tiano Giuffrida. 2017. ASLR on the line: Practical cache attacks
on the MMU. NDSS (Feb. 2017) (2017).
[15] Daniel Gruss, Moritz Lipp, Michael Schwarz, Richard Fellner,
Clémentine Maurice, and Stefan Mangard. 2017. Kaslr is dead:
long live kaslr. In International Symposium on Engineering
Secure Software and Systems. Springer, 161–176.
[16] Daniel Gruss, Clémentine Maurice, and Stefan Mangard. 2016.
Rowhammer. js: A remote software-induced fault attack in
javascript. In International Conference on Detection of Intru-
sions and Malware, and Vulnerability Assessment. Springer,
300–321.
[17] Daniel Gruss, Raphael Spreitzer, and Stefan Mangard. 2015.
Cache Template Attacks: Automating Attacks on Inclusive Last-
Level Caches.. In USENIX Security Symposium. 897–912.
channel.
reading-privileged-memory-with-side.html
[18] Jann Horn. 2018. Reading privileged memory with a side-
https://googleprojectzero.blogspot.de/2018/01/
[19] Intel. 2018. Intel Analysis of Speculative Execution Side Chan-
nels. https://newsroom.intel.com/wp-content/uploads/sites/11/
2018/01/Intel-Analysis-of-Speculative-Execution-Side-Channels.
pdf
[20] Yeongjin Jang, Sangho Lee, and Taesoo Kim. 2016. Breaking
kernel address space layout randomization with intel tsx. In Pro-
ceedings of the 2016 ACM SIGSAC Conference on Computer
and Communications Security. ACM, 380–392.
[21] Yoongu Kim, Ross Daly, Jeremie Kim, Chris Fallin, Ji Hye Lee,
Donghyuk Lee, Chris Wilkerson, Konrad Lai, and Onur Mutlu.
2014. Flipping bits in memory without accessing them: An exper-
imental study of DRAM disturbance errors. In ACM SIGARCH
[12] Anders Fogh. 2018. Negative Result: Reading Kernel Mem-
https://cyber.wtf/2017/07/28/
ory From User Mode.
negative-result-reading-kernel-memory-from-user-mode/
[13] Google. 2018. Site Isolation Design Document. https://www.
chromium.org/developers/design-documents/site-isolation
Computer Architecture News, Vol. 42. IEEE Press, 361–372.
[22] Paul Kocher, Daniel Genkin, Daniel Gruss, Werner Haas, Mike
Hamburg, Moritz Lipp, Stefan Mangard, Thomas Prescher,
Michael Schwarz, and Yuval Yarom. 2018. Spectre Attacks:
Exploiting Speculative Execution. ArXiv e-prints (Jan. 2018).
arXiv:1801.01203
[23] David Kohlbrenner and Hovav Shacham. 2016. Trusted Browsers
for Uncertain Times.. In USENIX Security Symposium. 463–480.
[24] VI Levenshtein. 1992. On perfect codes in deletion and insertion
metric. Discrete Mathematics and Applications 2, 3 (1992),
241–258.
[25] Moritz Lipp, Daniel Gruss, Raphael Spreitzer, Clémentine Mau-
rice, and Stefan Mangard. 2016. ARMageddon: Cache Attacks on
Mobile Devices.. In USENIX Security Symposium. 549–564.
[26] Moritz Lipp, Michael Schwarz, Daniel Gruss, Thomas Prescher,
Werner Haas, Stefan Mangard, Paul Kocher, Daniel Genkin, Yuval
Yarom, and Mike Hamburg. 2018. Meltdown. ArXiv e-prints
(Jan. 2018). arXiv:1801.01207
[27] Giorgi Maisuradze, Michael Backes, and Christian Rossow. 2016.
What Cannot Be Read, Cannot Be Leveraged? Revisiting Assump-
tions of JIT-ROP Defenses. In 25th USENIX Security Symposium
(USENIX Security 16). Austin, TX.
[28] Giorgi Maisuradze, Michael Backes, and Christian Rossow. 2017.
Dachshund: Digging for and Securing Against (Non-) Blinded
Constants in JIT Code. In Proceedings of the 15th Conference on
Network and Distributed System Security Symposium (NDSS).
[29] Giorgi Maisuradze and Christian Rossow. 2018. Speculose: An-
alyzing the Security Implications of Speculative Execution in
CPUs. CoRR abs/1801.04084 (2018). arXiv:1801.04084 http:
//arxiv.org/abs/1801.04084
[30] Yossef Oren, Vasileios P Kemerlis, Simha Sethumadhavan, and
Angelos D Keromytis. 2015. The spy in the sandbox: Practical
cache attacks in javascript and their implications. In Proceed-
ings of the 22nd ACM SIGSAC Conference on Computer and
Communications Security. ACM, 1406–1418.
[31] Dag Arne Osvik, Adi Shamir, and Eran Tromer. 2006. Cache
attacks and countermeasures: the case of AES. In Cryptographers’
Track at the RSA Conference. Springer, 1–20.
[32] Colin Percival. 2005. Cache missing for fun and profit.
[33] Thomas Ristenpart, Eran Tromer, Hovav Shacham, and Stefan
Savage. 2009. Hey, you, get off of my cloud: exploring information
leakage in third-party compute clouds. In Proceedings of the 16th
ACM conference on Computer and communications security.
ACM, 199–212.
[34] Michael Schwarz, Clémentine Maurice, Daniel Gruss, and Ste-
fan Mangard. 2017. Fantastic timers and where to find them:
high-resolution microarchitectural attacks in JavaScript. In In-
ternational Conference on Financial Cryptography and Data
Security. Springer, 247–267.
[35] Chengyu Song, Chao Zhang, Tielei Wang, Wenke Lee, and David
Melski. 2015. Exploiting and Protecting Dynamic Code Genera-
tion. In 22nd Annual Network and Distributed System Security
Symposium, NDSS 2015, San Diego, California, USA, February
8-11, 2014.
[36] Eran Tromer, Dag Arne Osvik, and Adi Shamir. 2010. Efficient
cache attacks on AES, and countermeasures. Journal of Cryptol-
ogy 23, 1 (2010), 37–71.
[37] Henry Wong. 2018. Microbenchmarking Return Address
Branch Prediction.
http://blog.stuffedcow.net/2018/04/
ras-microbenchmarks
[38] Yuval Yarom and Katrina Falkner. 2014. FLUSH+RELOAD: A
High Resolution, Low Noise, L3 Cache Side-Channel Attack. In
USENIX Security Symposium. 719–732.
[39] Yinqian Zhang, Ari Juels, Michael K Reiter, and Thomas Ris-
tenpart. 2012. Cross-VM side channels and their use to extract
private keys. In Proceedings of the 2012 ACM conference on
Computer and communications security. ACM, 305–316.
13