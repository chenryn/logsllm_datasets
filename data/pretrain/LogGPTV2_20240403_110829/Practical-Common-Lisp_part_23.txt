(test-+)
11
=
(+12)3)
（+
-1-3)
12 3) 6)
6)
-4)
www.TopSage.com
9.4更好的结果输出
95
---
## Page 113
重新绑定：
check之前将其函数名绑定于其上，那么report-result就可以无需理会check来使用它了。
变调用check的方式，向其传递一个参数使其随后传给report-result。
生成report-result调用的check却并不知道它是从什么函数被调用的，这就意味着还需要改
函数的信息传递给report-result。可以为report-result添加一个形参来传递这一信息，但
如果测试结果可以显示每个测试用例来自什么函数就非常好了。
的情况下，找出失败测试用例的代码并不太困难。但假如有500个测试用例分散在20个函数里，
96
第一步是在最上层声明这个变量。
设计动态变量就是用于解决这类问题的。如果创建一个动态变量使得每个测试函数在调用
有了这些改变，测试函数将仍然可以工作但将产生下面的输出，因为*test-name*从未被
由于打印结果的代码集中在report-result函数里，所以需用一种方式来将当前所在测试
现在结果被正确地打上了标签。
pass ...
CL-USER>
现在需要对report-result稍微改动一下，使其在rORMAT输出中包括*test-name*。
现在假设其中一个测试用例失败了并且需要跟踪该问题。在只有5个测试用例和2个测试函数
(defun test-+ ()
为了正确报告其名字，需要改变两个测试函数。
(w1oy *a4eu-asa insa1 "e :e. `.. [ssed!iva]:" ? aeu1o1)
(defvar *test-name* nil)
pass ...
pass
pass
pass ...
pass
pass.
pass
CL-USER>
(let
第9章实践：建立单元测试框架
(check
(check
···
=
=
((*test-name* 'test-*))
1
NIL:
NIL:
NIL:
NIL:
NIL:
(test-arithmetic)
(test-arithmetic)
(*22)4)
x
x
(+12)3}
-1-3)-4))))
L
+
2)3)
22)4)
=
22)4)
6)
-4}
6)
www.TopSage.com
---
## Page 114
数吗？事实证明，这件事无关紧要一
9.6
然后使用该宏（而不是用一个简单的DEFUN）去定义测试函数，因此可以将其称为deftest。
全部代码都生成出来。换句话说，你需要一个宏。
（或者甚至是工作在不同时期的同一个程序员）会以同样的方式来理解这种抽象。为了得到一个
果。更糟糕的是，因为这种抽象仅存在于程序员的思路之中，所以实际上无法保证不同的程序员
过模式来表现的，因此必然会得到大量的重复代码，它们将带有一切影响程序可维护性的不良后
试函数”，除非按照特定的模式来写代码。
重复使用在两个函数中。你可以在认定所有的重复都有害这一思路的指导下继续消除这些重复。但
次一
9.5
由于所建立的测试函数，所以可能会产生一些问题，test-arithmetic应该是一个测试函
由于试图捕捉的模式是一个DEFUN加上一些样板代码，所以需要写一个宏使其展开成DEFUN。
不幸的是，部分抽象对于构建软件来说是很糟糕的，因为一个半成品的抽象在代码中就是通
这两个函数的定义都以相同的方式开始，原因在于它们都是测试函数。导致重复是因为此时
在修复测试函数的过程中，你又引入了一点儿新的重复。不但每个函数都需要包含其函数名两
使用该宏，你可以像下面这样重写test-+：
(deftest test-+ ()
(defmacro deftest (name parameters &body body)
抽象诞生
pass
pass
pass
CL-USER>
一次作为DEFUN中的名字，另一次是在*test-name*绑定里，而且同样的三行代码模式被
测试层次体系
(check
(defun
{let({*test-name*
，@body}））
TEST-*:
-1-3)-4)))
TEST-+:
(test-arithmetic)
,name
3）
,parameters
=
(*2 2)4)
‘,name})
-1
6)
www.TopSage.com
--如果确实用deftest来定义它，那么它对*test-name*
9.6 测试层次体系
97
---
## Page 115
会正确地输出。例如定义
*test-name*原有的值将被恢复。
个含有追加其新的名字到结尾处的*test-name*的旧内容的列表。
变成
需要将绑定形式
书
*test-name*作一个小改变，就可以用测试用例的“全称”路径来报告结果，就像下面这样：
测试函数含有这个测试用例那么简单了。
文中可以通过而在另一个中失败。如果发生了这种事，你想知道的很可能就不仅仅是哪一个底层
测试套件。现在假设某些底层测试函数会被多个测试套件所调用。测试用例很有可能在一个上下
你将需要其他层面的组织方式。诸如test-arithmetic这样的函数可以将相关的测试函数组成
test-*这些能够直接调用check的测试函数所建立起来的，但在有数千个测试用例的情况下，
98
②你将在第12章里看到，用APPEND在列表结尾处追加元素并不是构造一个列表的最有效方式。但目前这种方法是
①再强调一次，如果测试函数已经被编译了，那么在改变宏以后你将需要重新编译它们。
(let(（*test-name*',name))
。?为了使*test-name*保存一个测试函数名的列表而不只是最近进入的测试函数的名字，你
现在你可以用deftest代替DEFuN来重新定义test-arithmetic。
由于APPEND返回一个由其实参元素所构成的新列表，这个版本将把*test-name*绑定到一
因为已经抽象了定义测试函数的过程，所以就无需修改测试函数的代码从而改变相关的细
如果用deftest来定义诸如test-arithmetic这样的测试套件函数，并且对其中的
随着测试套件的增长，你可以添加新的测试函数层次。只要它们用deftest来定义，结果就
pass
CL-USER>
现在的结果明确地显示了你是怎样到达每一个测试表达式的。
(let（（*test-name*（append *test-name*(list',name))))
paSS...（TEST-ARITHMETICTEST-+):(=(+12)3)
ed
pass
pass
(deftesttest-arithmetic()
有效的，只要测试的层次不是很深就可以了。并且如果这成为问题，所有你需要做的就是改变deftest的定义。
SS
(test-*)))
（test-+)
第9章实践：建立单元测试框架
(TEST-ARITHMETIC
(TEST-ARITHMETIC
(test-arithmetic)
(TEST-ARITHMETIC
(TEST-ARITHMETIC
(TEST-ARITHMETIC
TEST-*):
TEST-+):
TEST-+):
TEST-
TEST-+）:
www.TopSage.com
（=（+12）3）
（=
（*35）15）
（+
（+123）6）
-1-3)
2）
-4)
，“当每一个测试函数返回时，
aoe
---
## Page 116
容易出错的用法。
需要。因此你写了一些真正简单的代码，其中充满了代码重复以及在用你想要的方式报告结果时
返回真。将它们用AND连在一起可以工作并且在句法上很简洁，却无法满足以更好的结果输出的
轻松运行的框架来说，这已经是一个很好的开始了。这里给出完整的代码，全部只有26行：
9.7
将产生这样的结果：
你从定义一个解决问题的简单版本开始——怎样求值一些布尔表达式并找出它们是否全部
你可以继续为这个测试框架添加更多特性。但作为一个以最小成本编写测试并可以在REPL
值得回顾的是，你能走到这一步是因为它显示了Lisp编程的一般方式。
(defun report-result (result form)
(defmacro combine-results (&body forms)
(defmacrocheck(&body forms)
(defmacro deftest (name parameters &body body)
(defvar *test-name* nil)
pass
pass
CL-USER> (test-math)
(deftest test-math 
(test-arithmetic))
result)
"Report the results of a single test case. Called by 'check'.
(with-gensyms (result)
^(combine-results 
 Qther test functions or use '
"Define a test function. Within a test function we can call
总结
(（((': ′ -d)、o 1 u   )'
(defun ,name ,parameters
((((aweu', astt) *aweu-asa+ puadde) *aweu-asa*)) a)
(let ((,result t))
...
,@(loop for f in forms collect ^(unless ,f (setf ,result nil)))
·