# DockerSwarm ca
当您想要查看群的当前证书，或者您需要旋转当前群证书时，使用`swarm ca`命令。要旋转证书，您需要包括`--rotate`参数:
```
# View the current swarm certificate
docker swarm ca
# Rotate the swarm certificate
docker swarm ca --rotate
```
`swarm ca`命令只能在群管理器节点上成功执行。您可能使用轮换群组证书功能的一个原因是，您是从内部根证书颁发机构移动到外部证书颁发机构，或者反之亦然。您可能需要轮换群证书的另一个原因是，万一一个或多个管理器节点受损。在这种情况下，轮换群集证书将阻止所有其他管理人员与轮换证书的管理人员或使用旧证书的其他管理人员进行通信。当您轮换证书时，该命令将保持活动状态，直到更新了所有群节点(包括管理人员和工作人员)为止。下面是一个在非常小的集群上轮换证书的示例:
![](img/2a03929d-d015-43f8-a233-3a03370983b6.png)
由于该命令将保持活动状态，直到所有节点都更新了 TLS 证书和 CA 证书，因此如果群集中有节点处于离线状态，就会出现问题。当这是一个潜在的问题时，您可以包含`--detach`参数，该命令将启动证书轮换并立即将控制权返回给会话。请注意，当您使用`--detach`可选参数时，您将不会获得关于证书轮换的进度、成功或失败的任何状态。您可以使用 node ls 命令查询群集内证书的状态，以检查进度。以下是您可以使用的完整命令:
```
# Query the state of the certificate rotation in a swarm cluster
docker node ls --format '{{.ID}} {{.Hostname}} {{.Status}} {{.TLSStatus}}'
```
`ca rotate`命令将继续尝试完成，无论是在前台，还是在后台，如果分离的话。如果启动轮换时某个节点处于脱机状态，并且它重新联机，则证书轮换将会完成。这里有一个例子`node04`在执行旋转命令时离线，然后过了一会儿，它又回来了；检查状态发现它成功旋转:
![](img/5889e8b1-e526-4871-9c48-c0a45664a4c2.png)
另一个需要记住的要点是，轮换证书会立即使当前的两个加入令牌无效。
# DockerSwarm 体解锁
您可能还记得关于`docker swarm init`命令的讨论，您可以在`init`命令中包含的可选参数之一是`--autolock`。使用此参数将在群集上启用自动锁定功能。这是什么意思？当集群被配置为使用自动锁定时，每当管理器节点的 docker 守护程序脱机，然后重新联机(即重新启动)时，都需要输入解锁密钥来允许该节点重新加入集群。你为什么要使用自动锁定功能来锁定你的蜂群？自动锁定功能有助于保护群的相互 TLS 加密密钥，以及群的 raft 日志使用的加密和解密密钥。这是旨在补充 Docker Secrets 的附加安全功能。当 docker 守护程序在锁定群的管理器节点上重新启动时，您必须输入解锁密钥。以下是使用解锁钥匙的样子:
![](img/cb49b249-6ef8-4013-a8f4-a1aa987b8927.png)
顺便说一下，对于群的其余部分，未解锁的管理器节点将报告为关闭，即使 docker 守护程序正在运行。可以使用`swarm update`命令在现有集群上启用或禁用集群自动锁定功能，我们将很快对此进行介绍。解锁密钥是在群集初始化期间生成的，届时将显示在命令行上。如果您丢失了解锁密钥，您可以使用`swarm unlock-key`命令在解锁的管理器节点上检索它。
# DockerSwarm 解锁钥匙
`swarm unlock-key`命令很像`swarm ca`命令。unlock-key 命令可用于检索当前的群解锁密钥，也可用于将解锁密钥旋转到新的密钥:
```
# Retrieve the current unlock key
docker swarm unlock-key
# Rotate to a new unlock key
docker swarm unlock-key --rotate
```
根据集群的大小，所有管理器节点更新解锁密钥可能需要一段时间。
It is a good idea to keep the current (old) key handy for a while when you rotate the unlock key, on the off-chance that a manager node goes offline before getting the updated key. That way, you can still unlock the node using the old key. Once the node is unlocked and receives the rotated (new) unlock key, the old key can be discarded.
如您所料，`swarm unlock-key`命令仅在启用了自动锁定功能的集群管理器节点上发出时有用。如果您的集群没有启用自动锁定功能，您可以使用`swarm update`命令启用它。
# DockerSwarm 体更新
当您通过`docker swarm init`命令在第一个管理器节点上初始化集群时，会启用或配置几个集群集群功能。在群集初始化后，您可能需要更改启用、禁用或配置的功能。为此，您需要使用`swarm update`命令。例如，您可能希望为集群启用自动锁定功能。或者，您可能希望更改证书的有效期。这些是您可以使用`swarm update`命令执行的更改类型。这样做可能看起来像这样:
```
# Enable autolock on your swarm cluster
docker swarm update --autolock=true
# Adjust certificate expiry to 30 days
docker swarm update --cert-expiry 720h
```
以下是可受`swarm update`命令影响的设置列表:
![](img/4137a701-e2f1-4dd9-886a-7f344bcc1e65.png)
# Docker 蜂拥离开
这个和你想象的差不多。您可以使用`leave`命令从群中移除 Docker 节点。下面是一个需要使用`leave`命令来纠正用户错误的例子:
![](img/4e74723e-4d0d-4f2a-8d68-ca2e556fe0a0.png)
节点 03 旨在成为管理器节点。我不小心添加了作为工作人员的节点。意识到自己的错误，我使用`swarm leave`命令将节点从群中移除，使其回到单实例模式。然后，使用*管理器*加入令牌，我将该节点作为管理器重新添加到群中。唷！危机避免了。
# 参考
查看这些链接了解更多信息:
*   群体模式入门教程:[https://docs.docker.com/engine/swarm/swarm-tutorial/](https://docs.docker.com/engine/swarm/swarm-tutorial/)
*   `docker swarm init`命令维基文档:[https://docs . docker . com/engine/reference/command line/swarm _ init/](https://docs.docker.com/engine/reference/commandline/swarm_init/)
*   `docker swarm ca`命令维基文档:[https://docs . docker . com/engine/reference/command line/swarm _ ca/](https://docs.docker.com/engine/reference/commandline/swarm_ca/)
*   `docker swarm join-token`命令维基文档:[https://docs . docker . com/engine/reference/command line/swarm _ join-token/](https://docs.docker.com/engine/reference/commandline/swarm_join-token/)
*   `docker swarm join`命令维基文档:[https://docs . docker . com/engine/reference/command line/swarm _ join/](https://docs.docker.com/engine/reference/commandline/swarm_join/)
*   `docker swarm unlock`命令维基文档:[https://docs . docker . com/engine/reference/command line/swarm _ unlock/](https://docs.docker.com/engine/reference/commandline/swarm_unlock/)
*   `docker swarm unlock-key`命令维基文档:[https://docs . docker . com/engine/reference/command line/swarm _ unlock-key/](https://docs.docker.com/engine/reference/commandline/swarm_unlock-key/)
*   `docker swarm update`命令维基文档:[https://docs . docker . com/engine/reference/command line/swarm _ update/](https://docs.docker.com/engine/reference/commandline/swarm_update/)
*   `docker swarm leave`命令维基文档:[https://docs . docker . com/engine/reference/command line/swarm _ leave/](https://docs.docker.com/engine/reference/commandline/swarm_leave/)
*   了解更多关于 Docker 的秘密:[https://docs.docker.com/engine/swarm/secrets/](https://docs.docker.com/engine/swarm/secrets/)
# 经理和工人
在前面的章节中，我们已经讨论了一点群管理器，但是让我们仔细看看群管理器是做什么的。群体经理做的正是你所期望的。它们管理和维护集群的状态。他们安排群服务，我们将在本章的*群服务*部分讨论，但是现在，把群服务想象成运行的容器。管理器节点还服务于集群的应用编程接口端点，允许通过 REST 进行编程访问。管理器还将流量导向正在运行的服务，这样就可以通过任何管理器节点访问任何容器，而不必知道哪个节点实际上正在运行容器。作为维护集群状态的一部分，管理器将处理系统中节点的丢失，如果丢失的管理器是领导者，则选举一个新的领导者节点，并且如果容器或节点出现故障，它们将保持期望数量的服务容器运行。
群体中经理数量的最佳实践是三个、五个或七个。您会注意到，所有这些选项都代表奇数个管理器节点。这样，如果领袖节点丢失，raft 共识算法可以更容易地为群体选择新的领袖。您可以用一个管理器节点运行集群集群，这实际上是比有两个管理器节点更好的选择。但是，对于可用性更高的集群，建议您至少有三个管理器节点。对于较大的集群，有五七个经理是好的，但不建议超过七个。一旦在同一个集群中有七个以上的管理器，您实际上会体验到性能下降。
管理器节点的另一个重要考虑因素是它们之间的网络性能。管理者需要低延迟的网络连接来获得最佳性能。例如，如果你在 AWS 中运行你的群，你可能不希望群中的经理分布在不同的区域。如果你这样做，你可能会遇到群体问题。如果您将群内的管理人员放在单个区域内的不同可用性区域中，您应该不会有任何与网络性能相关的问题。
工作节点除了运行容器之外什么也不做。当领导者节点关闭时，他们在选举新领导者方面没有发言权。他们不处理应用编程接口调用。他们不指挥交通。他们除了运行容器什么也不做。事实上，不能有一个只有工作者节点的群。另一方面，您可以有一个只有一个管理器节点的群，在这种情况下，管理器除了管理器职责之外，还将充当工作器并运行容器。
默认情况下，所有管理节点实际上都是工作节点。这意味着他们可以并且将运行容器。如果您想让您的经理不运行工作负载，您需要更改节点的可用性设置。将其更改为排放将会小心地停止管理器节点上标记为排放的任何正在运行的容器，并将在其他(非排放)节点上启动这些容器。在耗尽模式下，不会在节点上启动新的容器工作负载，例如:
```
# Set node03's availability to drain
docker node update --availability drain ubuntu-node03
```
有时，您可能想要或需要更改群中 docker 节点的角色。您可以将工作节点提升为经理状态，也可以将经理节点降级为工作节点状态。以下是这些活动的一些例子:
```
# Promote worker nodes 04 and 05 to manager status
docker node promote ubuntu-node04 ubuntu-node05
# Demote manager nodes 01 and 02 to worker status
docker node demote ubuntu-node01 ubuntu-node02
```
# 参考
查看[节点如何工作的官方文档 https://docs . docker . com/engine/swarm/how-swarm-mode-work/nodes/](https://docs.docker.com/engine/swarm/how-swarm-mode-works/nodes/)。
# 群集服务