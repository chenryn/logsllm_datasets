title:Experimenting with Server-Aided Signatures
author:Xuhua Ding and
Daniele Mazzocchi and
Gene Tsudik
Experimenting with Server-Aided Signatures
Xuhua Ding, Daniele Mazzocchi, Gene Tsudik
Information and Computer Science Department
University of California, Irvine
{xhding,dmazzocc,gts}@ics.uci.edu
Abstract
This paper explores practical and conceptual im-
plications of using Server-Aided Signatures (SAS).
SAS is a signature method that relies on partially-
trusted servers for generating public key signatures
for regular users. Besides its two primary goals of
1) aiding small, resource-limited devices in comput-
ing heavy-weight (normally expensive) digital sig-
natures and 2) fast certiﬁcate revocation, SAS also
oﬀers signature causality and has some interesting
features such as built-in attack detection for users
and DoS resistance for servers.
1 Introduction
Digital signatures represent a basic building
block for many secure applications. Their uses
range from electronic commerce transactions to se-
cure email, secure content (code, video, audio) dis-
tribution and other, more specialized applications
such as document notarization. Traditionally, digi-
tal signatures are based on asymmetric (public key)
cryptographic techniques which, at least in some
settings, makes them computationally expensive.
While digital signatures are rapidly becoming
ubiquitous, one of the major recent trends in com-
puting has been towards so-called “smart” devices,
such as PDAs, cell phones and palmtops. Although
such devices come in many shapes and sizes and are
used for a variety of purposes, they tend to have one
feature in common: limited computational capabil-
ities and equally limited power (as most operate on
batteries). This makes them ill-suited for complex
cryptographic computations such as large number
arithmetic present in virtually all public key con-
structs.
Furthermore, in many envisaged setting, such as
cell telephony and wireless web access, personal de-
vices are in constant contact with a ﬁxed, wired in-
frastructure. Consequently, access to more powerful
(in terms of both CPU speed and not dependent on
batteries) computing platforms is available to end-
users.
At the same time, increased use of digital sig-
natures accentuates the need for eﬀective revoca-
tion methods. Revocation of cryptographic cre-
dentials and certiﬁcates has been an issue for a
long time. However, only now the problem is be-
coming truly visible, e.g., the recent Verisign ﬁasco
where a wrong certiﬁcate was issued (ostensibly to
Microsoft) and its subsequent revocation was both
slow and painful. Furthermore, current CRL-based
revocation methods scale poorly and are not widely
used in practice. For example, many current web
browsers do not bother checking CRLs.
Eﬀective revocation is not only useful but vital in
some organizational settings (e.g., government and
military) where digital signatures are used on im-
portant electronic documents and in accessing crit-
ical resources. Consider a situation when a trusted
user (Alice) does something that warrants immedi-
ate revocation of her security privileges. Alice might
be ﬁred, transferred or she may suspect that her
private key has been compromised. Ideally – imme-
diately following revocation – no one should be able
to perform any cryptographic operations involving
Alice’s certiﬁcate, i.e., sign with her private key.
In addition, when a cryptographic certiﬁcate is
revoked (or simply expires) digital signatures gen-
erated prior to revocation (or expiration) may need
to remain valid. This is diﬃcult to achieve with
current revocation methods since CRLs (and sim-
ilar methods like OCSP [1]) do not provide a se-
cure means of distinguishing between pre- and post-
revocation signature activity. The only way to do
so is by using a secure timestamping service for all
signatures. Although a secure timestamping ser-
vice may provide a secure means of distinguishing
between pre- and post-revocation signature, it has
not been widely adopted due to its prohibitive cost.
Finally, we note that compromise of a private key
can lead to an unlimited number of fraudulent sig-
natures being generated and distributed by the ad-
versary. As often happens in the event of compro-
mise, contact with the revocation authority (CA)
may not be immediate, e.g., in a sporadically con-
nected wireless network. Therefore, it is important
to ﬁnd a way to limit potential damage.
In this paper we present a method, called Server-
Aided Signatures (SAS), that is designed to ad-
dresses the aforementioned issues.
Its goals are
three-fold:
1. Assist small, limited-power devices in comput-
ing digital signatures
2. Provide fast revocation of signing capability
3. Limit damage from potential compromise
The rest of the paper is organized as follows.
Next section provides a brief synopsis of our work
and its contributions. Section 5 describes the SAS
method in greater detail; it is followed by the secu-
rity analysis in Section 6. Denial of service issues are
addressed in Section 7. Then, implementation and
performance measurements are discussed in Section
8. The paper concludes with the summary of bene-
ﬁts and drawbacks of SAS.
2 Synopsis
The signature method (SAS) discussed here is
based largely on a weak non-repudiation technique
due to Asokan et al. [2]. The most notable feature
of the SAS method is its on-line nature. Speciﬁ-
cally, each SAS signature is generated with the aid
of a partially-trusted server called a SEM (short for
SEcurity Mediator). This feature can be viewed as
a mixed blessing. Although it oﬀers a number of
beneﬁts which are summarized below, the require-
ment for on-line help for each signature is clearly a
burden. We discuss the drawbacks, both real and
perceived, in Section 9.
Informally, a SAS signature is computed as fol-
lows (see also Figure 1):
• First, a prospective signer (Alice) contacts her
SEM and provides the data to be signed as well
as a one-time ticket.
• SEM checks Alice’s revocation status and, if
not revoked, computes a half-signature over the
data as well as other parameters (including the
one-time ticket). SEM then returns the results
to Alice.
• Alice veriﬁes SEM’s half-signature and pro-
duces her own half-signature. Put together,
the two respective half-signatures constitute a
regular, full SAS signature. This signature is
accompanied by SEM’s and Alice’s certiﬁcates.
The two half-signatures are inter-dependent and
each is worthless in and of itself. This is despite
the SEM’s half-signature being a traditional digi-
tal signature:
in the context of SAS, a traditional
signature computed by a SEM is not, by itself, a
SAS signature. The half-signature computed by a
user (Alice, in our example) is actually a one-time
signature [3].
Figure 1. SAS architecture
Verifying a SAS signature is easy: veriﬁer (Bob)
obtains the signature and veriﬁes the two halves
along with the two accompanying certiﬁcates.
The main idea is that a SEM, albeit only partially
trusted, is more secure, and much more capable (in
terms of CPU and power consumption) than an av-
erage user.
It can therefore serve a multitude of
users. Also, because of its “superior” status, SEM
is much less likely to be revoked or compromised.
Since a signer (Alice) is assumed to have much less
computing power then a SEM, the latter performs
the bulk of the computation, whereas, Alice does
comparatively little work.
In the event that Al-
ice’s certiﬁcate is revoked, the SEM simply refuses
to perform any further signatures on Alice’s behalf.
(See Figure 1.) Thus, revocation is both implicit
and fast.
The general system model of SAS is a good ﬁt for
many mobile settings. For example, as mentioned
in Section 1, cell phones are only usable when in
touch, via a nearby base station, with a ﬁxed infras-
tructure. Each phone-call requires communication
with the infrastructure. This communication can
be overloaded to piggyback SAS protocol messages.
3 Related Work
The SAS method is based on a weak non-
repudiation technique proposed by Asokan et al. in
[2]. In very general terms, SAS is an instantiation
of a mediated cryptographic service. Recent work
by Boneh et al.
[4] on mediated RSA (mRSA) is
another example of mediated cryptography. mRSA
provides fast revocation of both signing and decryp-
tion capability. However, the computation load on
the client end is increased in mRSA, which is some-
thing that SAS aims to minimize.
In [5] Reiter and McKenzie propose a the same
additive splitting technique to improve the security
for portable devices where the private-key opera-
tions are password-protected. Recently, they also
proposed another scheme for the more challenging
problem of mediated (2-party) DSA signatures [6].
Ganesan[7] also exploited (earlier, in 1996) the same
idea for improving Kerberos security as part of the
Yaksha system.
Another way to look at SAS is as an
[8].
instantiation of “hybrid” multi-signatures
the SAS method can
Viewed more broadly,
be included in the more general
framework of
threshold cryptography[9] and secure multi-party
computation[10].
There is also much related work on the topic
of certiﬁcate revocation; including CRLs, ∆-CRLs,
CRTs, 2-3 lists and skip-lists. This is reviewed in
more detail in Appendix B.
4 Background
In this section we go over some preliminaries nec-
essary for the remainder of the paper.
4.1 Hash Functions
Informally, a one-way function f() is a func-
tion such that, given an input string x it is easy
to compute f(x), whereas, given a randomly chosen
y, it is computationally infeasible to ﬁnd an x such
that f(x) = y. A one-way hash function h() is a
one-way function that operates on arbitrary-length
inputs to produce a ﬁxed length digest. If y = h(x),
y is commonly referred to as the hash of x and x is
referred to as the pre-image of y. A one-way hash
function h() is said to be collision-resistant if it is
computationally hard to ﬁnd any two distinct input
strings x, x0 such that h(x) = h(x0).
Several secure and eﬃcient collision-resistant
one-way hash functions have been proposed, e.g.,
SHA or MD5 [11].
In the rest of the paper, h()
denotes a collision-resistant one-way hash function.
A collision-resistant one-way hash function can
be recursively applied to an input string. The no-
tation hi(x) is the result of applying h()
i times
starting with the input x, that is:
|
hi(x) = h(h(. . . h(h(x)) . . .))
{z
i times
}
Recursive application results in a hash-chain gener-
ated from the original input:
x = h0(x), h1(x), . . . , hn(x)
Hash chains have been widely used since early 1980-
s starting with the well-known Lamport’s method
[12].
4.2 Model and Notation
We distinguish among 3 types of entities:
• Regular Users – entities who generate and ver-
ify SAS signatures.
• Security Mediators (SEMs) – partially-trusted
entities assisting regular users in generating
SAS signatures.
• Certiﬁcation Authorities (CAs) – trusted oﬀ-
line entities that issue certiﬁcates and link the
identities of regular users with SEMs.
SEMs and CAs are veriﬁable third parties from the
users’ point of view.
All participants agree on a collision-resistant one-
way hash function family H and a digital signature
scheme. In SAS, the latter is ﬁxed to be the RSA
scheme [13]. Furthermore, each signer (Alice) se-
lects a “personalized” hash function hA() ∈ H. In
essence, hA() can be thought of as a keyed hash
(e.g., [14]) with a known key set to the identity of
the signer. When applied recursively, we also in-
clude the index of the hash function link in each
computation,
A(x) can be thought of as a
keyed hash where the known key is the concatena-
tion of the signer’s identity (Alice) and the index of
the link, i.
i.e., hi
In order to minimize computation overhead for
regular users, h() must be eﬃcient and the digi-
tal signature scheme must be eﬃcient for veriﬁers.
(This is because, as will be seen below, veriﬁcation
is done by regular users, whereas, signing is done
by much more powerful SEMs.) SHA and MD5 are
reasonable choices for the former, while RSA [13]
satisﬁes the eﬃcient veriﬁcation requirement when
used with a small exponent such as 3, 17 or 65,537.
4.3 Communication Channel
We assume that the communication channel be-
tween each user and a SEM is reliable (but nei-
ther private nor authentic). Reliability of the chan-
nel implies that the underlying communication sys-
tem provides suﬃcient error handling to detect,
with overwhelming probability, all corrupted pack-
ets. One way to achieve this is by having each proto-
col packet accompanied by its hash. Furthermore,
timeouts and retransmissions are likewise handled
by the communication system with the assumption
that a packet eventually gets through.
We note that, even if the user is disconnected
from the network1 after sending a signature request
to its SEM and before receiving a reply, the user
will eventually obtain the correct reply (if the re-
quest ever reached the SEM) whenever the commu-
nication channel is re-established. Speciﬁcally, as
described in the next section, a SEM always replies
with the last signature it computed for a given user.
5 SAS Description
We now turn to the detailed protocol description.
5.1 Setup
To become a SAS signer, Alice ﬁrst generates
a secret quantity SK 0
A randomly chosen from the
range of hA(). Starting with this value, Alice com-
putes a hash-chain:
A , SK n
A, . . . SK n−1
A) = hA(SK j−1
A } where
{ SK 0
A, SK 1
A = hj
A(SK 0
A ) for 1 ≤ j ≤ n
SK j
A, is referred to as Alice’s SAS
The last value, SK n
root key. It subsequently enables Alice to produce
(n − 1) SAS signatures.
Each SEM is assumed to have a secret/public
RSA key-pair (SKsem, P Ksem) of suﬃcient length.
(We use the notation [x]sem to denote SEM’s sig-
nature on string x). Each CA also has its own key-
pair much like any traditional CA. In addition to
its usual role of issuing and revoking certiﬁcates a
CA also maintains a mapping between users and
SEMs that serve them. This relationship is many
to one, i.e., a SEM serves a multitude of users. Ex-
actly how many depends on many factors, such as:
SEM’s hardware platform, average user signature
request frequency, network characteristics, etc. We
expect the number and placement of SEMs in an
organizational network to closely resemble that of
OCSP Validation Agents (VAs) [1].
In order to obtain a SAS certiﬁcate CertA, Al-
ice composes a certiﬁcate request and submits it to
the CA via some (usually oﬀ-line) channel. Alice’s
SAS certiﬁcate has, for the most part, the same for-
mat as any other public key certiﬁcate; it includes
values such as the holder’s distinguished name, or-
ganizational data, expiration/validity dates, serial
number, public token key, and so forth. Addition-
ally, a SAS certiﬁcate contains two other ﬁelds:
1. Maximum number of signatures n that the en-
closed public key can be used to generate, and
2. Certiﬁcate serial number and, either the distin-
guished name or the Internet-style hostname of
the SEM that will serve Alice in the context of
CertA.
Once issued, Alice’s SAS certiﬁcate CertA can be
made publicly available via a directory service such
as LDAP [15].
5.2 SAS Signature Protocol
The protocol proceeds as follows. (In the initial
protocol run the signature counter i = n − 1; it
is decremented after each run. This counter is
maintained by both SEM and Alice.)
[Alice, m, i, SK i
Step 1. Alice starts by sending a request con-
taining:
A] to its assigned SEM. If
Alice does not wish to reveal the message to the