.br eintr .
instead, it will return all of the bytes that have been requested.
.pp
when reading from the
.ir random
source, blocking requests of any size can be interrupted by a signal handler
(the call fails with the error
.br eintr ).
.pp
using
.br getrandom ()
to read small buffers (
.pp
.bi "int addseverity(int " severity ", const char *" s );
.fi
.pp
.rs -4
feature test macro requirements for glibc (see
.br feature_test_macros (7)):
.re
.pp
.br addseverity ():
.nf
    since glibc 2.19:
        _default_source
    glibc 2.19 and earlier:
        _svid_source
.fi
.sh description
this function allows the introduction of new severity classes
which can be addressed by the
.i severity
argument of the
.br fmtmsg (3)
function.
by default, that function knows only how to
print messages for severity 0-4 (with strings (none), halt,
error, warning, info).
this call attaches the given string
.i s
to the given value
.ir severity .
if
.i s
is null, the severity class with the numeric value
.i severity
is removed.
it is not possible to overwrite or remove one of the default
severity classes.
the severity value must be nonnegative.
.sh return value
upon success, the value
.b mm_ok
is returned.
upon error, the return value is
.br mm_notok .
possible errors include: out of memory, attempt to remove a
nonexistent or default severity class.
.sh versions
.br addseverity ()
is provided in glibc since version 2.1.
.sh attributes
for an explanation of the terms used in this section, see
.br attributes (7).
.ad l
.nh
.ts
allbox;
lbx lb lb
l l l.
interface	attribute	value
t{
.br addseverity ()
t}	thread safety	mt-safe
.te
.hy
.ad
.sp 1
.sh conforming to
this function is not specified in the x/open portability guide
although the
.br fmtmsg (3)
function is.
it is available on system v
systems.
.sh notes
new severity classes can also be added by setting the environment variable
.br sev_level .
.sh see also
.br fmtmsg (3)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.\" copyright (c) 1990, 1993
.\"	the regents of the university of california.  all rights reserved.
.\"
.\" %%%license_start(bsd_4_clause_ucb)
.\" redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. all advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	this product includes software developed by the university of
.\"	california, berkeley and its contributors.
.\" 4. neither the name of the university nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" this software is provided by the regents and contributors ``as is'' and
.\" any express or implied warranties, including, but not limited to, the
.\" implied warranties of merchantability and fitness for a particular purpose
.\" are disclaimed.  in no event shall the regents or contributors be liable
.\" for any direct, indirect, incidental, special, exemplary, or consequential
.\" damages (including, but not limited to, procurement of substitute goods
.\" or services; loss of use, data, or profits; or business interruption)
.\" however caused and on any theory of liability, whether in contract, strict
.\" liability, or tort (including negligence or otherwise) arising in any way
.\" out of the use of this software, even if advised of the possibility of
.\" such damage.
.\" %%%license_end
.\"
.\"	@(#)hash.3	8.6 (berkeley) 8/18/94
.\"
.th hash 3 2017-09-15 "" "linux programmer's manual"
.uc 7
.sh name
hash \- hash database access method
.sh synopsis
.nf
.ft b
#include 
#include 
.ft r
.fi
.sh description
.ir "note well" :
this page documents interfaces provided in glibc up until version 2.1.
since version 2.2, glibc no longer provides these interfaces.
probably, you are looking for the apis provided by the
.i libdb
library instead.
.pp
the routine
.br dbopen (3)
is the library interface to database files.
one of the supported file formats is hash files.
the general description of the database access methods is in
.br dbopen (3),
this manual page describes only the hash-specific information.
.pp
the hash data structure is an extensible, dynamic hashing scheme.
.pp
the access-method-specific data structure provided to
.br dbopen (3)
is defined in the
.i 
include file as follows:
.pp
.in +4n
.ex
typedef struct {
    unsigned int       bsize;
    unsigned int       ffactor;
    unsigned int       nelem;
    unsigned int       cachesize;
    uint32_t         (*hash)(const void *, size_t);
    int         lorder;
} hashinfo;
.ee
.in
.pp
the elements of this structure are as follows:
.tp 10
.i bsize
defines the hash table bucket size, and is, by default, 256 bytes.
it may be preferable to increase the page size for disk-resident tables
and tables with large data items.
.tp
.i ffactor
indicates a desired density within the hash table.
it is an approximation of the number of keys allowed to accumulate in any
one bucket, determining when the hash table grows or shrinks.
the default value is 8.
.tp
.i nelem
is an estimate of the final size of the hash table.
if not set or set too low, hash tables will expand gracefully as keys
are entered, although a slight performance degradation may be noticed.
the default value is 1.
.tp
.i cachesize
is the suggested maximum size, in bytes, of the memory cache.
this value is
.ir "only advisory" ,
and the access method will allocate more memory rather than fail.
.tp
.i hash
is a user-defined hash function.
since no hash function performs equally well on all possible data, the
user may find that the built-in hash function does poorly on a particular
data set.
a user-specified hash functions must take two arguments (a pointer to a byte
string and a length) and return a 32-bit quantity to be used as the hash
value.
.tp
.i lorder
is the byte order for integers in the stored database metadata.
the number should represent the order as an integer; for example,
big endian order would be the number 4,321.
if
.i lorder
is 0 (no order is specified), the current host order is used.
if the file already exists, the specified value is ignored and the
value specified when the tree was created is used.
.pp
if the file already exists (and the
.b o_trunc
flag is not specified), the
values specified for
.ir bsize ,
.ir ffactor ,
.ir lorder ,
and
.i nelem
are
ignored and the values specified when the tree was created are used.
.pp
if a hash function is specified,
.i hash_open
attempts to determine if the hash function specified is the same as
the one with which the database was created, and fails if it is not.
.pp
backward-compatible interfaces to the routines described in
.br dbm (3),
and
.br ndbm (3)
are provided, however these interfaces are not compatible with
previous file formats.
.sh errors
the
.i hash
access method routines may fail and set
.i errno
for any of the errors specified for the library routine
.br dbopen (3).
.sh bugs
only big and little endian byte order are supported.
.sh see also
.br btree (3),
.br dbopen (3),
.br mpool (3),
.br recno (3)
.pp
.ir "dynamic hash tables" ,
per-ake larson, communications of the acm, april 1988.
.pp
.ir "a new hash package for unix" ,
margo seltzer, usenix proceedings, winter 1991.
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.\" copyright (c) 2002, 2020 michael kerrisk 
.\"
.\" %%%license_start(verbatim)
.\" permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" since the linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  the author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  the author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%license_end
.\"
.th shm_open 3 2021-03-22 "linux" "linux programmer's manual"
.sh name
shm_open, shm_unlink \- create/open or unlink posix shared memory objects
.sh synopsis
.nf
.b #include 
.br "#include " "        /* for mode constants */"
.br "#include " "           /* for o_* constants */"
.pp
.bi "int shm_open(const char *" name ", int " oflag ", mode_t " mode );
.bi "int shm_unlink(const char *" name );
.fi
.pp
link with \fi\-lrt\fp.
.sh description
.br shm_open ()
creates and opens a new, or opens an existing, posix shared memory object.
a posix shared memory object is in effect a handle which can
be used by unrelated processes to
.br mmap (2)
the same region of shared memory.
the
.br shm_unlink ()
function performs the converse operation,
removing an object previously created by
.br shm_open ().
.pp
the operation of
.br shm_open ()
is analogous to that of
.br open (2).
.i name
specifies the shared memory object to be created or opened.
for portable use,
a shared memory object should be identified by a name of the form
.ir /somename ;
that is, a null-terminated string of up to
.bi name_max
(i.e., 255) characters consisting of an initial slash,
.\" glibc allows the initial slash to be omitted, and makes
.\" multiple initial slashes equivalent to a single slash.
.\" this differs from the implementation of posix message queues.
followed by one or more characters, none of which are slashes.
.\" glibc allows subdirectory components in the name, in which
.\" case the subdirectory must exist under /dev/shm, and allow the
.\" required permissions if a user wants to create a shared memory
.\" object in that subdirectory.
.pp
.i oflag
is a bit mask created by oring together exactly one of
.b o_rdonly
or
.b o_rdwr
and any of the other flags listed here:
.tp
.b o_rdonly
open the object for read access.
a shared memory object opened in this way can be
.br mmap (2)ed
only for read
.rb ( prot_read )
access.
.tp
.b o_rdwr
open the object for read-write access.
.tp
.b o_creat
create the shared memory object if it does not exist.
the user and group ownership of the object are taken
from the corresponding effective ids of the calling process,
.\" in truth it is actually the filesystem ids on linux, but these
.\" are nearly always the same as the effective ids.  (mtk, jul 05)
and the object's
permission bits are set according to the low-order 9 bits of
.ir mode ,
except that those bits set in the process file mode
creation mask (see
.br umask (2))
are cleared for the new object.
a set of macro constants which can be used to define
.i mode
is listed in
.br open (2).
(symbolic definitions of these constants can be obtained by including
.ir  .)
.ip
a new shared memory object initially has zero length\(emthe size of the
object can be set using
.br ftruncate (2).
the newly allocated bytes of a shared memory
object are automatically initialized to 0.
.tp
.b o_excl
if
.b o_creat
was also specified, and a shared memory object with the given
.i name
already exists, return an error.
the check for the existence of the object, and its creation if it
does not exist, are performed atomically.
.tp
.b o_trunc
if the shared memory object already exists, truncate it to zero bytes.
.pp
definitions of these flag values can be obtained by including
.ir  .
.pp
on successful completion
.br shm_open ()
returns a new file descriptor referring to the shared memory object.
this file descriptor is guaranteed to be the lowest-numbered file descriptor
not previously opened within the process.
the
.b fd_cloexec
flag (see
.br fcntl (2))
is set for the file descriptor.
.pp
the file descriptor is normally used in subsequent calls
to
.br ftruncate (2)
(for a newly created object) and
.br mmap (2).
after a call to
.br mmap (2)
the file descriptor may be closed without affecting the memory mapping.
.pp
the operation
of
.br shm_unlink ()
is analogous to
.br unlink (2):
it removes a shared memory object name, and, once all processes
have unmapped the object, deallocates and
destroys the contents of the associated memory region.
after a successful
.br shm_unlink (),
attempts to
.br shm_open ()
an object with the same
.i name
fail (unless
.b o_creat
was specified, in which case a new, distinct object is created).
.sh return value
on success,
.br shm_open ()
returns a file descriptor (a nonnegative integer).
on success,
.br shm_unlink ()
returns 0.
on failure, both functions return \-1 and set
.i errno
to indicate the error.
.sh errors
.tp
.b eacces
permission to
.br shm_unlink ()
the shared memory object was denied.
.tp
.b eacces
permission was denied to
.br shm_open ()
.i name
in the specified
.ir mode ,
or
.b o_trunc
was specified and the caller does not have write permission on the object.
.tp
.b eexist
both
.b o_creat
and
.b o_excl
were specified to
.br shm_open ()
and the shared memory object specified by
.i name
already exists.
.tp
.b einval
the
.i name
argument to
.br shm_open ()
was invalid.
.tp
.b emfile