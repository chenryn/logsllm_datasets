title:MiddlePolice: Toward Enforcing Destination-Defined Policies in the
Middle of the Internet
author:Zhuotao Liu and
Hao Jin and
Yih-Chun Hu and
Michael Bailey
MiddlePolice: Toward Enforcing Destination-Deﬁned
Policies in the Middle of the Internet
Zhuotao Liu∗
Hao Jin†
Yih-Chun Hu∗
Michael Bailey∗
∗ University of Illinois at Urbana-Champaign, † Nanjing University
∗ {zliu48, yihchun, mdbailey}@illinois.edu, † PI:EMAIL
ABSTRACT
Volumetric attacks, which overwhelm the bandwidth of a
destination, are amongst the most common DDoS attacks
today. One practical approach to addressing these attacks is
to redirect all destination traﬃc (e.g., via DNS or BGP) to
a third-party, DDoS-protection-as-a-service provider (e.g.,
CloudFlare) that is well provisioned and equipped with ﬁl-
tering mechanisms to remove attack traﬃc before passing
the remaining benign traﬃc to the destination. An alterna-
tive approach is based on the concept of network capabili-
ties, whereby source sending rates are determined by receiver
consent, in the form of capabilities enforced by the network.
While both third-party scrubbing services and network ca-
pabilities can be eﬀective at reducing unwanted traﬃc at
an overwhelmed destination, DDoS-protection-as-a-service
solutions outsource all of the scheduling decisions (e.g., fair-
ness, priority and attack identiﬁcation) to the provider, while
capability-based solutions require extensive modiﬁcations to
existing infrastructure to operate. In this paper we intro-
duce MiddlePolice, which seeks to marry the deployability of
DDoS-protection-as-a-service solutions with the destination-
based control of network capability systems. We show that
by allowing feedback from the destination to the provider,
MiddlePolice can eﬀectively enforce destination-chosen poli-
cies, while requiring no deployment from unrelated parties.
1.
INTRODUCTION
Attacks against availability, such as distributed denial of
service attacks (DDoS), continue to plague the Internet. The
most common of these attacks, representing roughly 65% of
all DDoS attacks last year [41], are volumetric attacks. In
these attacks, adversaries seek to deny service by exhaust-
ing a victim’s network resources and causing congestion.
Such attacks are diﬃcult for a victim network to mitigate
as the largest of these attacks can exceed the available up-
stream bandwidth by orders of magnitude. For example,
Internet service providers (ISP) reported attacks in excess
of 500 Gbps in 2015 [41].
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full citation
on the ﬁrst page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
CCS’16, October 24 - 28, 2016, Vienna, Austria
c(cid:13) 2016 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ISBN 978-1-4503-4139-4/16/10. . . $15.00
DOI: http://dx.doi.org/10.1145/2976749.2978306
One common solution to this problem is the use of DDoS-
protection-as-a-service providers, such as CloudFlare. These
providers massively over-provision data centers for peak at-
tack traﬃc loads and then share this capacity across many
customers as needed. When under attack, victims use DNS
or BGP to redirect traﬃc to the provider rather than their
own networks. The DDoS-protection-as-a-service provider
applies a variety of techniques to scrub this traﬃc, sepa-
rating malicious from benign, and then re-injects only the
benign traﬃc back into the network to be carried to the vic-
tim. Such methods are appealing, as they require no modi-
ﬁcation to the existing network infrastructure and can scale
to handle very large attacks. However, these cloud-based
systems use proprietary attack detection algorithms and ﬁl-
tering which limit the ability of customers to prioritize traﬃc
kinds or choose preferred scheduling policies. Further, exist-
ing cloud-based systems assume that all traﬃc to the victim
will be routed ﬁrst to their infrastructure, an assumption
that can be violated by a clever attacker [39, 48].
A second approach to solving volumetric DDoS attacks is
network capability-based solutions [9,12,13,35,42,43,51,52].
Such systems require a source to receive explicit permission
before being allowed to contact the destination. Such ca-
pabilities are enforced by the network infrastructure itself
(i.e., routers) and capabilities range from giving the victim
the ability to block traﬃc from arbitrary sources to giving
the victim control over the bandwidth allowed for each ﬂow.
A major advantage, then, of these capability-based systems
is the ability of the victim to control precisely what and how
much traﬃc it wants to receive. However, these capability-
based systems are not without challenges, and most face sig-
niﬁcant deployment hurdles. For instance, approaches such
as TVA [51] and NetFence [35] require secret key manage-
ment and router upgrades across diﬀerent Autonomous Sys-
tems (ASes). Yet other approaches require clients to modify
their network stack to insert customized packet headers, cre-
ating additional deployment hurdles.
In this paper, we present MiddlePolice, which seeks to
combine the deployability of cloud-based solutions with the
destination-based control of capability-based systems. Mid-
dlePolice is built on a set of traﬃc policing units (referred
as mboxes) which rely on a feedback loop of self-generated
capabilities to guide scheduling and ﬁltering. MiddlePolice
also includes a mechanism to ﬁlter nearly all traﬃc that
tries to bypass the mboxes, using only the ACL conﬁgura-
tion already present on commodity routers. We implement
MiddlePolice as a Linux Kernel Module, and evaluate it ex-
tensively over the Internet using cloud infrastructures, on
our private testbed, and via simulations. Our results show
that MiddlePolice can handle large-scale DDoS attacks, and
eﬀectively enforce the destination-chosen policies.
2. PROBLEM FORMULATION
2.1 MiddlePolice’s Desirable Properties
Readily Deployable and Scalable. MiddlePolice is de-
signed to be readily deployable in the Internet and suﬃ-
ciently scalable to handle large scale attacks. To be readily
deployable, a system should only require deployment at the
destination, and possibly at related parties on commercial
terms. The end-to-end principle of the Internet, combined
with large numbers of end points, is what gives rise to its
tremendous utility. Because of the diversity of administra-
tive domains, including end points, edge-ASes, and small
transit ASes, ASes have varying levels of technological so-
phistication and cooperativeness. However, some ASes can
be expected to help with deployment; many ISPs already
provide some sort of DDoS-protection services [2], so we
can expect that such providers would be willing to deploy
a protocol under commercially reasonable terms. We con-
trast this with prior capability-based work, which requires
deployment at a large number of unrelated ASes in the In-
ternet and client network stack modiﬁcation, that violates
the deployability model.
The goal of being deployable and scalable is the major
reason that MiddlePolice is designed to be built into existing
cloud-based DDoS defense systems.
Destination-driven Policies. MiddlePolice is designed to
provide the destination with ﬁne-grained control over the
utilization of their network resources. Throughout the pa-
per, we use “destination” and “victim” interchangeably. Ex-
isting cloud-based systems have not provided such function-
ality. Many previously proposed capability-based systems
are likewise designed to work with a single scheduling pol-
icy. For instance, CRAFT [29] enforces per-ﬂow fairness,
Portcullis [42] and Mirage [38] enforce per-compute fair-
ness, NetFence [35] enforces per-sender fairness, SIBRA [13]
enforces per-steady-bandwidth fairness, and SpeakUp [49]
enforces per-outbound-bandwidth fairness. If any of these
mechanisms is ever deployed, a single policy will be enforced,
forcing the victim to accept the choice made by the defense
approach. However, no single fairness regime can satisfy
all potential victims’ requirements.
Ideally, MiddlePolice
should be able to support victim-chosen policies. In addi-
tion to these fairness metrics, MiddlePolice can implement
ideas such as ARROW’s [43] special pass for critical traﬃc,
and prioritized services for premium clients.
Fixing the Bypass Vulnerability. Existing cloud-based
systems rely on DNS or BGP to redirect the destination’s
traﬃc to their infrastructures. However, this model opens up
the attack of infrastructure bypass. For example, a majority
of cloud-protected web servers are subject to IP address ex-
posure [39,48]. Larger victims that SWIP their IP addresses
may be unable to keep their IP addresses secret from a de-
termined adversary. In such cases, the adversary can bypass
the cloud infrastructures by routing traﬃc directly to the
victims. MiddlePolice includes a readily deployable mecha-
nism to address this vulnerability.
MiddlePolice is designed to augment the existing cloud-
based DDoS prevention systems with destination-selectable
policies. The literature is replete with capability-based sys-
tems that provide a single fairness guarantee with extensive
client modiﬁcation and deployment at non-aﬃliated ASes.
The novelty and challenge of MiddlePolice is therefore ar-
chitecting a system to move deployment to the cloud while
enforcing a wide variety of destination-selectable fairness
metrics. Built atop a novel capability feedback mechanism,
MiddlePolice meets the challenge, thereby protecting against
DDoS more ﬂexibly and deployably.
2.2 Adversary Model and Assumptions
Adversary Model. We consider a strong adversary owning
large botnets that can launch strategic attacks and amplify
its attack [30]. We assume the adversary is not on-path be-
tween any mbox and the victim, since otherwise it could drop
all packets. Selecting routes without on-path adversaries is
an orthogonal problem and is the subject of active research
in next-generation Internet protocols (e.g., SCION [52]).
Well-connected mboxes. MiddlePolice is built on a dis-
tributed and replicable set of mboxes that are well-connected
to the Internet backbone. We assume the Internet backbone
has suﬃcient capacity and path redundancy to absorb large
volumes of traﬃc, and DDoS attacks against the set of all
mboxes can never be successful. This assumption is a stan-
dard assumption for cloud-based systems.
Victim Cooperation. MiddlePolice’s defense requires the
victim’s cooperation. If the victim can hide its IP addresses
from attackers, it simply needs to remove a MiddlePolice-
generated capability carried in each packet and return it
back to the mboxes. The victim needs not to modify its
layer-7 applications as the capability feedback mechanism is
transparent to applications. If attackers can directly send
or point traﬃc (e.g., reﬂection) to the victim, the victim
needs to block the bypassing traﬃc. MiddlePolice includes
a packet ﬁltering mechanism that is immediately deployable
on commodity Internet routers.
Cross-traﬃc Management. We assume that bottlenecks
on the path from an mbox to the victim that is shared
with other destinations are properly managed, such that
cross-traﬃc targeted at another destination cannot cause
unbounded losses of the victim’s traﬃc. Generally, per-
destination-AS traﬃc shaping (e.g., weighted fair share) on
these links will meet this requirement.
3. SYSTEM OVERVIEW
MiddlePolice’s high-level architecture is illustrated in Fig-
ure 1. A MiddlePolice-protected victim redirects its traﬃc
to the mboxes. Each mbox polices traversing traﬃc to en-
force the bandwidth allocation policy chosen by the victim.
The traﬃc policing relies on a feedback loop of MiddlePolice-
generated capabilities to eliminate the deployment require-
ments on downstream paths. When the victim keeps its
IP addresses secret, a single deploying mbox can secure the
entire path from the mbox to the victim.
For victims whose IP addresses are exposed, attackers can
bypass the mboxes and direct attack traﬃc to the victim.
MiddlePolice designs a packet ﬁltering mechanism relying
on the ACL on commodity routers or switches to eliminate
the traﬃc that does not traverse any mbox. As long as each
bottleneck link is protected by an upstream ﬁlter, the bypass
attack can be prevented.
4. DETAILED DESIGN OF mboxes
MiddlePolice’s traﬃc policing algorithm (i) probes the
(and thus WR) is underestimated, the mbox can still fur-
ther deliver packets as long as the downstream path is not
congested.
Fairness Regimes. Each mbox allocates its bandwidth
estimate amongst its senders based on the sharing policies
chosen by the victim. For policies enforcing global fairness
among all senders, all mboxes sharing the same bottleneck
share their local observations.
Information Table
4.1
The basis of MiddlePolice’s traﬃc policing is an informa-
tion table (iTable) maintained by each mbox. Each row of
the iTable corresponds to a single sender. The contents of
the iTable depend on the victim-selected sharing policy; this
section describes iTable elements needed for per-sender fair-
ness, and §4.3.5 extends the iTable to other fairness regimes.
In §6, we describe a mechanism to ﬁlter source spooﬁng at
the mbox, so this section ignores source spooﬁng.
f
64
TA Pid NR ND WR WV
128
32
16
32
32
32
LR
64
Table 1. Fields of an iTable entry and their sizes (bits).
Each sender si has one row in the iTable, identiﬁed by
a unique identiﬁer f . The table contents are illustrated in
Table 1. Other than f , the remaining ﬁelds are updated in
each detection period. The timestamp TA records the cur-
rent detection period. The capability ID Pid is the maximum
number of distinct capabilities generated for si. NR stores
the number of packets received from si. ND indicates the
number of best-eﬀort packets dropped by the mbox. WR de-
termines the maximum number of privileged packets allowed
for si. The veriﬁcation window WV is designed to compute
si’s packet loss rate, whereas LR stores the LLR for si.
4.2 Capability Computation
For si, the mbox generates two types of capabilities: dis-
tinct capabilities and common capabilities. The CHM can
use either capability to authenticate that the packet has tra-
versed the mbox, though only distinct capabilities are used
to infer downstream packet losses.
A distinct capability for si is computed as follows:
C = IPMP || ts || Pid || f || TA ||
MACKs (IPMP || ts || Pid || f || TA),
(1)
where IPMP is the IP address of the mbox issuing C and ts is
the current timestamp (included to mitigate replay attack).
The combination of Pid||f||TA ensures the uniqueness of C.
The MAC is computed based on a secret key Ks shared by
all mboxes. The MAC is 128 bits, so the entire C consumes
∼300 bits. A common capability is deﬁned as follows
Cc = IPMP || ts || MACKs (IPMP || ts).
(2)
The design of capability incorporates a MAC to ensure
that attackers without secure keys cannot generate valid ca-
pabilities, preventing capability abuse.
4.3 Trafﬁc Policing Logic
4.3.1 Populating the iTable
We ﬁrst describe how to populate the iTable. At time
ts, the mbox receives the ﬁrst packet from si. It creates an
entry for si, with f computed based on si’s source address,
and initializes the remaining ﬁelds to zero. It then updates
Figure 1. The architecture of MiddlePolice. The mboxes
police traﬃc to enforce victim-chosen policies. The packet
ﬁltering discards all traﬃc bypassing the mboxes.