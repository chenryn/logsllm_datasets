# 脚本小子修养之开发分布式扫描工具(一)
## 0x0 前言
平时自己都是用单机扫描，然后因为自己毕业设计也是基于分布式的，所以这次打算先从基本的功能-目录扫描开始着手，将分布式技术应用上去。这里简单记录下，像我这种脚本小子，是如何通过一步步学习，开发出自己心仪的工具，成为一名合格的script kid。
## 0x1 巨人的肩膀
作为一个菜到自闭的脚本小子，先学会模仿，首先就需要参考优秀的扫描器设计:
目录扫描:
[dirsearch](https://github.com/maurosoria/dirsearch)
分布式可以参考:
[Watchdog](https://github.com/CTF-MissFeng/Watchdog)
[rengine](https://github.com/yogeshojha/rengine)
[w11scan](https://github.com/w-digital-scanner/w11scan)
## 0x2 分析dirsearch
### 0x2.1 前期准备
通过查看文档介绍，这个工具有几个Features可以关注下的:
  * 多线程的实现
  * 从IP范围枚举目标(CIDR)
  * 处理code!=404的错误页面
  * 强大的Fuzz路径组合功能
  * 支持HTTP and Socks代理
  * 丰富的响应代码检测
  * 丰富的Response过滤规则
  * 安静模式和Debug模式的实现
先正常安装:
    git clone https://github.com/maurosoria/dirsearch.git
    cd dirsearch
然后用VS code来进行调试(第一次用VS Code):
[Python debug configurations in Visual Studio
Code](https://code.visualstudio.com/docs/python/debugging)
VS Code快捷键:
  * F9 标记断点
  * F5 暂停/继续
  * F11单步调试
  * Shift+F11 单步跳出
  * Ctrl+Shift+F5 重启
相关的`launch.json`
    {
        // Use IntelliSense to learn about possible attributes.
        // Hover to view descriptions of existing attributes.
        // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387
        "version": "0.2.0",
        "configurations": [
            {
                "name": "Python: 当前文件",
                "type": "python",
                "request": "launch",
                "stopOnEntry": false,
                "program": "${file}",
                "console": "integratedTerminal",
                "args": [
                    "-u","http://127.0.0.1/",
                    "-e", "php"
                ]
            }
        ]
### 0x2.2 执行流程分析
首先是实例Program对象:
入口做了一下3件事
1.加载配置文件,作者重写OptionParser->ArgumentParser,解析了预定义的参数和默认加载根目录的`default.conf`,采用`configparser`库来解析
这里有个我想要知道的点，就是用ipaddress库的`IPv4Network`函数来解析CIDR格式的地址。
但是缺省的模式，兼容性不是很好，建议使用非严格模式:
    print(IPv4Network(test, strict=False))
这样就能减少一些麻烦。
2.美化输出, CLIOutput
3.实例Controller对象，开始正式启动程序，接收了3个变量-根目录,参数，用于美化输出的对象,
选择跟进`Controller`类,这里有些很好的点可以学习:
这里用的是queue库的Queue(),任务队列，然后可以支持raw解析比如burp请求的file，快速提取http请求需要的各项参数(作者按照http协议进行解析的，写了个实现类`raw.py`)
接下来，这个点不错，就是初始化阶段先检测下，输出结果目录是否可写，实现的话就是调用自己封装好的FileUtils工具类。
dirsearch的目录字典生成单独写了个文件`lib/core/dictionary.py`
dirsearch制作字典这个功能还是很强大的，我们分析看看。
先正常加载`dirsearch/db/dicc.txt`作为字典,接着开始生成目录Fuzz列表
生成的核心的处理函数`self.generate()`:
最终生成的目录列表被放置在`self.entries`列表。
继续回到Controller类:
这里有个很有意思的内存管理tips:`gc.collect`,用于释放刚才`del custom/result`的内存空间
下面我们可以跟进去看下这个Requester是怎么实现区分http和https的：
    parsed = urllib.parse.urlparse(url) # urlparse库解析出协议
    ...
    elif parsed.scheme not in ["https", "http"]: 
    ...
    try:
    self.port = int(parsed.netloc.split(":")[1])
    except IndexError:
    self.port = 443 if self.protocol == "https" else 80 # 解析端口
    except ValueError:
    raise RequestException(
    {"message": "Invalid port number: {0}".format(parsed.netloc.split(":")[1])}
    ) 
    ...
    # Include port in Host header if it's non-standard # 处理https 使用非443端口的情况
    if (self.protocol == "https" and self.port != 443) or (
    self.protocol == "http" and self.port != 80
    ):
    self.headers["Host"] += ":{0}".format(self.port)
    ...
封装好了核心的请求对象`self.requester`,将其还有生成的路径字典、线程、延时传递给`Fuzzer`用来初始化`self.fuzzer`对象。
> 提前封装好请求对象，方便统一设置请求参数和代理，只需要传入代理列表就行了如proxy,proxylist,
>
> Fuzzer里面对线程做了一个最小值的判断，就是线程数目不能大于路径字典的长度，否则取路径字典长度作为线程数。(这个编程可以注意一下，可以避免内存占用太大)
* * *
前面流程主要是做了初始化各个参数和核心对象，下面进入准备流程:
这个start函数，我们逐一分析一下:
line 1:`self.setupScanners`
可以看到主要是构造了一些路径传入Scanner，返回一个对象，我们查看下Scanner使用这些路径做了什么。
这些路径就是:
    url+ basepath + 随机字符串
    url+ basepath + 随机字符串 + .
    url+ basepath + 随机字符串 + 传入的后缀1
    url+ basepath + 随机字符串 + 传入的后缀2
line2:`self.setupThreads()`
可以看到主要的工作函数是`thread_proc`,他通过自写线程安全next函数去取内容，然后丢进scan去请求。
可以看到这里会在scan的时候进行，获取之前随机字符串封装起来Scanner，然后进行相似度的判断，
满足的话，且status_code 不为404的话，就会放进去matchCallbacks，后面就是输出报告了。
### 0x2.3 设计思想分析
浏览整体的项目结构:
>:tree -L 3 -c
    ├── CHANGELOG.md
    ├── CONTRIBUTORS.md
    ├── Dockerfile
    ├── README.md
    ├── db
    │   ├── 400_blacklist.txt
    │   ├── 403_blacklist.txt
    │   ├── 500_blacklist.txt
    │   ├── dicc.txt
    │   └── user-agents.txt
    ├── default.conf
    ├── dirsearch.py
    ├── lib
    │   ├── __init__.py
    │   ├── __pycache__
    │   │   ├── __init__.cpython-37.pyc
    │   │   └── __init__.cpython-39.pyc
    │   ├── connection //具体请求的优化
    │   │   ├── __init__.py
    │   │   ├── __pycache__
    │   │   ├── request_exception.py
    │   │   ├── requester.py
    │   │   └── response.py
    │   ├── controller
    │   │   ├── __init__.py
    │   │   ├── __pycache__
    │   │   ├── banner.txt
    │   │   └── controller.py
    │   ├── core //这个是真正的核心
    │   │   ├── __init__.py
    │   │   ├── __pycache__
    │   │   ├── argument_parser.py
    │   │   ├── dictionary.py
    │   │   ├── fuzzer.py
    │   │   ├── path.py
    │   │   ├── raw.py
    │   │   ├── report_manager.py
    │   │   └── scanner.py
    │   ├── output //输出美化
    │   │   ├── __init__.py
    │   │   ├── __pycache__
    │   │   ├── cli_output.py
    │   │   └── print_output.py
    │   ├── reports //输出不同类型的库
    │   │   ├── __init__.py
    │   │   ├── __pycache__
    │   │   ├── base_report.py
    │   │   ├── csv_report.py
    │   │   ├── json_report.py
    │   │   ├── markdown_report.py
    │   │   ├── plain_text_report.py
    │   │   ├── simple_report.py
    │   │   └── xml_report.py
    │   └── utils //工具类的库
    │       ├── __init__.py
    │       ├── __pycache__
    │       ├── default_config_parser.py
    │       ├── file_utils.py
    │       ├── random_utils.py
    │       └── terminal_size.py
    ├── logs
    │   ├── DO_NOT_DELETE_THIS_FOLDER.txt