ever, MOPT-AFL-tmp and AFL. The results are shown in
Fig. 9, from which we have the following conclusions.
• Both MOPT-AFL-ever and MOPT-AFL-tmp are effec-
tive at ﬁnding unique crashes. On most programs, they take
fewer than 100 hours to ﬁnd more unique crashes than AFL
does in 240 hours.
• We can learn from Fig. 9 (c) and (f) that within a
relatively short time, AFL may discover more crashes than
MOPT-AFL-ever and MOPT-AFL-tmp. The reasons are as
follows. First, mutation-based fuzzing has randomness, and
naturally such randomness may cause performance shaking
within a short time. However, relatively stable performance
will exhibit in a long time-scale as shown in the experiments.
Second, the selection probability distribution of mutation
operators in MOPT-AFL-ever and MOPT-AFL-tmp adopts
random initialization, which may cause fuzzing randomness
in the early fuzzing time. Thus, to reduce the performance
instability of fuzzing, a relatively long time experiment is
necessary, e.g., we run our experiments for 240 hours.
1958    28th USENIX Security Symposium
USENIX Association
Figure 9: The number of unique crashes discovered by MOPT-AFL-ever, MOPT-AFL-tmp and AFL over 240 hours. X-axis:
time (over 240 hours). Y-axis: the number of unique crashes.
5.7 Compatibility Analysis
In addition to AFL, we also generalize our analysis to sev-
eral state-of-the-art mutation-based fuzzers, e.g., AFLFast
[5] and VUzzer [6], and study the compatibility of MOPT.
AFLFast [5] is one of the coverage-based fuzzers. By us-
ing a power schedule to guide the fuzzer towards low fre-
quency paths, AFLFast can detect more unique paths and ex-
plore the vulnerabilities much faster than AFL. To examine
the compatibility of MOPT, we implement MOPT-AFLFast-
tmp and MOPT-AFLFast-ever based on AFLFast.
VUzzer [6] is a fuzzer that focuses on exploring deeper
paths. VUzzer can evaluate a test case with the triggered path
and select the test cases with higher ﬁtness scores to gener-
ate subsequent test cases. The mutation strategy of VUzzer is
different from AFL. In each period, VUzzer generates a ﬁxed
number of mutated test cases, evaluates their ﬁtness and only
keeps POPSIZE test cases with the highest ﬁtness scores to
generate test cases in the next period, where POPSIZE is the
population number of the parent test cases set by users. We
regard the mutation operators as the high-efﬁciency opera-
tors that can generate the test cases with top-(POPSIZE/3)
ﬁtness scores. Then, we combine MOPT with VUzzer and
implement MOPT-VUzzer. Since VUzzer does not have a
deterministic stage like AFL, we do not consider the pace-
maker fuzzing mode here.
Now, we evaluate MOPT-AFLFast-tmp, MOPT-AFLFast-
ever, and MOPT-VUzzer on mp42aac, exiv2, mp3gain,
tiff2bw, pdfimages, sam2p and mpg321. Each experi-
ment is lasted for 240 hours with the same settings as in
Section 5.2. Speciﬁcally, we change the OS as the 32-
bit Ubuntu 14.04 LTS for VUzzer and MOPT-VUzzer be-
cause of VUzzer’s implementation restriction. The results
are shown in Table 6. We have the following conclusions.
• MOPT-AFLFast-tmp and MOPT-AFLFast-ever have
much better performance than AFLFast
in discovering
unique crashes on all the programs. For instance, MOPT-
AFLFast-ever ﬁnds 327 more crashes than AFLFast on
pdfimages. When combining MOPT with VUzzer, MOPT-
VUzzer discovers more unique crashes than VUzzer on
mp42aac, mp3gain, sam2p and mpg321. As a result, MOPT
cannot only be combined with state-of-the-art fuzzers like
AFLFast, but also be compatible with the different fuzzers
like VUzzer to improve the fuzzing performance.
• MOPT-based fuzzers can explore more unique paths
than their counterparts. For instance, MOPT-AFLFast-tmp
discovers 2,156 more paths than AFLFast on mp42aac;
MOPT-AFLFast-ever ﬁnds 14,777 more than AFLFast on
pdfimages. MOPT-VUzzer has a better coverage perfor-
mance than VUzzer on mp3gain. Overall, MOPT can help
the mutation-based fuzzers discover more unique paths.
• MOPT-AFL has an outstanding performance in com-
parison to state-of-the-art fuzzers. MOPT-AFL outperforms
AFLFast with a signiﬁcant advantage on all the programs ex-
cept mp42aac. For instance, MOPT-AFL-tmp and MOPT-
AFL-tmp discover 85 and 43 more unique crashes than
AFLFast on tiff2bw. Furthermore, MOPT-AFL-tmp and
MOPT-AFL-ever ﬁnd dozens of times more unique crashes
than VUzzer on most programs.
5.8 Evaluation on LAVA-M
Recently, the LAVA-M dataset is proposed as one of the
standard benchmarks to examine the performance of fuzzers
[28]. It has 4 target programs, each of which contains the
listed and unlisted bugs. The authors provide the test cases
that can trigger the listed bugs. However, no test cases were
provided for the unlisted bugs, making them more difﬁcult
to be found. For completeness, we test AFL, MOPT-AFL-
ever, AFLFast, MOPT-AFLFast-ever, VUzzer and MOPT-
VUzzer on LAVA-M with the same initial seed set and the
same settings as in Section 5.7, for 5 hours. Furthermore,
we run MOPT-AFL-ever with Angora [9] and QSYM [29]
parallelly to construct MOPT-Angora and MOPT-QSYM,
USENIX Association
28th USENIX Security Symposium    1959
50100150200250(a) mp42aac050100150200MOPT-AFL-ever MOPT-AFL-tmpAFL050100150200250(b) exiv2010203040506070MOPT-AFL-ever 0AFLMOPT-AFL-tmp50100150200250(c) mp3gain050100150200250MOPT-AFL-everMOPT-AFL-tmpAFL050100150200250(d) tiff2bw020406080MOPT-AFL-ever MOPT-AFL-tmpAFL050100150200250(e) pdfimages0100200300400500MOPT-AFL-ever MOPT-AFL-tmpAFL050100150200250(f) sam2p050100150200250300350MOPT-AFL-everMOPT-AFL-tmpAFL0050100150200250(g) avconv012345MOPT-AFL-ever MOPT-AFL-tmpAFL50100150200250(h) w3m0100200300400500MOPT-AFL-ever MOPT-AFL-tmpAFL050100150200250(i) objdump0100200300400500MOPT-AFL-ever MOPT-AFL-tmpAFL050100150200250(j) jhead020406080MOPT-AFL-ever MOPT-AFL-tmpAFL050100150200250(k) mpg321050100150200250MOPT-AFL-ever MOPT-AFL-tmpAFL050100150200250(l) infotocap0100200300400500600700MOPT-AFL-ever 0MOPT-AFL-tmpAFL50100150200250(m) podofopdfinfo020406080100120MOPT-AFL-ever MOPT-AFL-tmpAFL0Table 6: The compatibility of the MOPT scheme.
mp42aac
exiv2
mp3gain
tiff2bw
pdﬁmages
sam2p
mpg321
AFL
MOPT-AFL-tmp
MOPT-AFL-ever
AFLFast
MOPT-AFLFast-tmp
MOPT-AFLFast-ever
VUzzer
MOPT-VUzzer
Unique crashes
Unique paths
Unique crashes
Unique paths
Unique crashes
Unique paths
Unique crashes
Unique paths
Unique crashes
Unique paths
Unique crashes
Unique paths
Unique crashes
Unique paths
Unique crashes
Unique paths
135
815
209
1,660
199
1,730
210
1,233
393
3,389
384
2,951
12
12%
16
12%
2,195
34
54
2,980
66
4,642
0
159
51
2,675
58
2,887
0
9%
0
9%
178
1,430
262
2,211
262
2,206
171
1,383
264
2,017
259
2,102
54,500
50%
56,109
51%
4
4,738
85
7,354
43
7,295
5,114
7,012
18
7,642
0
5
0
0
13%
13%
23
12,915
357
22,661
471
26,669
18
12,022
292
24,164
345
26,799
0
0
25%
25%
36
531
105
1,967
329
3,418
37
603
196
2,587
114
2,623
13
18%
16
18%
10
123
236
1,054
229
1,162
8
122
230
1,208
30
160
3,598
18%
3,615
18%
Table 7: Evaluation on LAVA-M. The incremental number is the number of the discovered unlisted bugs.
Program
base64
md5sum
uniq
who
Listed
bugs
44
57
28
2,136
Unlisted
bugs
4
4
1
381
AFL
Bugs
MOPT-
AFL-ever
Bugs
AFLFast MOPT-AFLFast-
Bugs
ever
Bugs
VUzzer
Bugs
MOPT-
VUzzer
Bugs
AFL-
Angora
Bugs
MOPT-
Angora
Bugs
AFL-
QSYM
Bugs
MOPT-
QSYM
Bugs
4
2
5
1
39
23
27
5
7
1
7
2
36
18
15
6
14
38
22
15
17
41
24
23
44(+2)
57(+4)
26
44(+3)
57(+4)
28(+1)
57(+1)
24
1
44(+4)
57(+1)
18
1,622(+65) 2,069(+145)
312(+46) 774(+70)
run AFL with them parallelly to construct AFL-Angora and
AFL-QSYM, and evaluate them on the LAVA-M dataset un-
der the same experiment settings. The results are shown in
Table 7, from which we have the following conclusions.
• MOPT-based fuzzers signiﬁcantly outperform their
counterparts on LAVA-M. For instance, MOPT-AFL-ever
ﬁnds 35 more listed bugs than AFL on base64. MOPT-
VUzzer ﬁnds more listed bugs than VUzzer on all the four
programs. Both MOPT-Angora and MOPT-QSYM ﬁnd sig-
niﬁcantly more unique bugs on who compared to their coun-
terparts. Thus, MOPT is effective in improving the perfor-
mance of mutation-based fuzzers.
• The fuzzers, which use symbolic execution or simi-
lar techniques, perform signiﬁcantly better than others on
LAVA-M. MOPT again exhibits good compatibility and can
be integrated with general mutation-based fuzzers. For in-
stance, MOPT-Angora ﬁnds signiﬁcantly more unique bugs
than AFL-Angora, and MOPT improves the performance of
AFL-QSYM in 3 cases. From Table 7, in addition to the
compatibility, MOPT can ﬁnd the unique bugs and paths
which the symbolic execution fails to ﬁnd.
6 Further Analysis
6.1 Steadiness Analysis
Following the guidance of [25] and to make our evalua-
tion more comprehensive, we conduct three extra groups of
evaluations in this subsection. In the following, we detail the
seed selection process, the evaluation methodology, and the
analysis of the results.
Evaluation methodology and setup. To provide statisti-
cal evidences of our improvements, we measure the perfor-
mance of MOPT-AFL-ever, AFL, Angora [9] and VUzzer
[6] on ﬁve programs including mp3gain, pdfimages,
objdump, jhead and infotocap (the detail of each program
is shown in Table 2). Each program is tested by each fuzzer
for 24 hours, on a virtual machine conﬁgured with one CPU
core of 2.40Ghz E5-2640 V4, 4.5GB RAM and the OS of
64-bit Ubuntu 16.04 LTS. To eliminate the effect of random-
ness, we run each testing for 30 times.
To investigate the inﬂuence of the initial seed set on the
performance of MOPT, we consider using various initial
seed sets in our experiments such as an empty seed, or the
seeds with different coverage, which are widely used in pre-
vious works [1, 5, 9, 21].
In the ﬁrst group of experiments, each program is fed with
an empty seed, which is a text ﬁle containing a letter ‘a’. In
the second and third groups of experiments, each program is
fed with 20 and 200 well-formed seed inputs, respectively.
In the third group, Angora is skipped since it reports errors
to fuzz pdfimages when given 200 seed PDF ﬁles.
To obtain the seed inputs, we ﬁrst download more than
necessary (e.g., 1,700) input ﬁles with correct formats from