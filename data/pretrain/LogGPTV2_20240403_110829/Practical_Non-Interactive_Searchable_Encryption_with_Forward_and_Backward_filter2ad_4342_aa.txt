title:Practical Non-Interactive Searchable Encryption with Forward and Backward
Privacy
author:Shifeng Sun and
Ron Steinfeld and
Shangqi Lai and
Xingliang Yuan and
Amin Sakzad and
Joseph K. Liu and
Surya Nepal and
Dawu Gu
Practical Non-Interactive Searchable Encryption with
Forward and Backward Privacy
Xingliang Yuan∗, Amin Sakzad∗, Joseph K. Liu∗, Surya Nepal† and Dawu Gu‡
Shi-Feng Sun∗, Ron Steinfeld∗, Shangqi Lai∗,
∗ Monash University, Australia
† Data61, CSIRO, Australia
‡ Shanghai Jiao Tong University, China
Abstract—In Dynamic Symmetric Searchable Encryption
(DSSE), forward privacy ensures that previous search queries
cannot be associated with future updates, while backward privacy
guarantees that subsequent search queries cannot be associated
with deleted documents in the past. In this work, we propose a
generic forward and backward-private DSSE scheme, which is,
to the best of our knowledge, the ﬁrst practical and non-interactive
Type-II backward-private DSSE scheme not relying on trusted
execution environments. To this end, we ﬁrst introduce a new
cryptographic primitive, named Symmetric Revocable Encryption
(SRE), and propose a modular construction from some succinct
cryptographic primitives. Then we present our DSSE scheme
based on the proposed SRE, and instantiate it with lightweight
symmetric primitives. At last, we implement our scheme and
compare it with the most efﬁcient Type-II backward-private
scheme to date (Demertzis et al., NDSS 2020). In a typical network
environment, our result shows that the search in our scheme
outperforms it by 2 − 11× under the same security notion.
I.
INTRODUCTION
Symmetric Searchable Encryption (SSE) enables a client
to encrypt a collection of data and outsource it to an untrusted
server. In general, the data is encrypted in such a way that it
can be efﬁciently searched while not sacriﬁcing data and query
privacy. In contrast to the general-purpose solutions to search
over encrypted data (e.g., ORAM [30] or fully-homomorphic
encryption [28]), SSE achieves a better efﬁciency, at the cost
of allowing for some information leakage captured by a well-
speciﬁed leakage function [21], [13].
The early work on SSE [50], [21], [13], [26] focused on
private search over static data. In order to support updates on
encrypted data, some progress has been made on DSSE [43],
[42], [12], [51], [35], [48]. In this setting, a client should be
able to arbitrarily add documents into or delete them from the
database, and the private search should be still supported, even
after the updates. However, the update operations may reveal
additional information, which for example has been leveraged
by the ﬁle injection attack [57] to breach query privacy.
Most recent work on SSE [7], [9], [46], [15], [52], [4]
concentrated on how to improve the security of DSSE. Specif-
ically, there has been recently a lot of interest in the notions
Network and Distributed Systems Security (NDSS) Symposium 2021
21-25  February  2021, Virtual 
ISBN  1-891562-66-5
https://dx.doi.org/10.14722/ndss.2021.24162
www.ndss-symposium.org
of forward and backward privacy. They were introduced by
Stefanov et al. [51] and later formalized by Bost et al. [7], [9].
Informally, forward privacy ensures that future updates cannot
be associated to previous search queries, which is useful for
mitigating the powerful ﬁle injection attacks and has drawn
extensive attention [7], [9], [46], [25], [3], [38] in recent
years. In contrast, backward privacy guarantees that subsequent
searches cannot be associated to the deleted documents in the
past. Ideally, the leakage of backward-private schemes should
only depend on the documents currently matching the query
(i.e., the matched documents excluding the deleted ones) in the
database, but it is very difﬁcult to achieve without using the
complicated techniques, e.g., ORAM, as it requires to hide both
the number and the pattern of updates. As a consequence, Bost
et al. [9] deﬁned, in terms of how much information leaked
from the additions and deletions, three ﬂavors of backward
privacy for single-keyword search:
Type-I backward privacy: allows schemes to leak the (iden-
tifers of) documents currently matching the queried keyword
w, the timestamps of inserting them into the database, as well
as the total number of updates on w.
Type-II backward privacy: additionally leaks the timestamps
and operation types of all updates on the queried keyword w,
apart from the information revealed in Type-I.
Type-III backward privacy: compared to Type-II, further leaks
which deletion operation cancelled precisely which addition.
The above three types of privacy are ordered from the most
to the least secure; the stronger privacy the schemes achieve,
the less information the updates leak. As with the leakage of
additions that has been successfully leveraged by ﬁle injection
attacks to break query privacy [57], the information revealed
from deletions might also be exploited to launch potential
attacks. Speciﬁcally, Type-III backward privacy leaks which
documents are deleted at what time. It has been demonstrated
that time is crucial information and can be exploited to break
the security of a wide range of systems, e.g., timing analysis on
network trafﬁc [27] and side-channel attacks against hardware
enclaves [18]. In our application, the timestamps of updates
seem unrelated to the content of data, but knowing when a
keyword and/or a document is deleted could create oppor-
tunities for attackers to correlate other information of later
queries or launch statistical inference. Therefore, it is desired
to design SSE schemes with as strong as possible privacy, i.e.,
minimising information leakage of updates.
Recently, a few backward-private SSE schemes [9], [15],
[52], [4] have been proposed per ﬂavor. However, most ex-
isting schemes achieve different tradeoffs between computa-
tion/communication cost and security guarantees. In brief, the
Type-I schemes [9], [15] are based on ORAMs, and Type-II
schemes [9], [15], [22] need high communication cost and mul-
tiple rounds of interactions to perform a search/update query.
This cost incurred by interactions is usually non-negligible
and will lead to a noticeable delay (20 − 30× slower than
the non-interactive scheme as in our evaluation) in the real-
world network environment. In contrast, the schemes [9], [52]
need only one roundtrip for each search and update, but at the
expense of providing only the weakest backward privacy. Very
recently, the hardware-based Type-I scheme, Type-II scheme
and Type-III scheme were proposed in [4], [55], which are all
non-interactive but rely heavily on the power of Intel SGX
[20]. Unfortunately, various security vulnerabilities in SGX
have been revealed, such as [10], [54], [18], and it may still
suffer from potential (side-channel) attacks in future.
Therefore, it is still challenging to design practical, non-
interactive and strong backward-private DSSE schemes with-
out hardware assumptions. In this paper, we make afﬁrmative
progress towards this problem and put forward the ﬁrst generic
DSSE scheme with all above desired features by leveraging a
newly introduced cryptographic primitive. The main contribu-
tions are summarized below.
Our Contributions. We explore the new way of constructing
(forward and) backward-private SSE schemes in this work.
Our basic idea, similar to [9], [52], is to encrypt the document
identiﬁers in such a way that the deleted ones cannot be
decrypted, even if they can be retrieved by the server. To
achieve a higher level of backward privacy, the crucial point
is to make the update operations leak as little information as
possible. Our starting point is to make the server oblivious of
the deletions. To do so, we introduce a new cryptographic
primitive, named Symmetric Revokable Encryption (SRE),
which allows us to accomplish the deletions locally with a low
storage request and captures the essential properties needed for
designing backward-private SSE schemes following the above
idea. In details, our main contributions include:
• We formalize the syntax and security of SRE, which
can be seen as a symmetric predicate encryption
and may be independent of interest. Then we pro-
pose a generic construction of SRE from a multiple
puncturable PRF, a traditional symmetric encryption
scheme and a Bloom ﬁlter. Due to the usage of
Bloom ﬁlter, our construction features a compressed
revocation procedure, which is crucial for our SSE
application. Furthermore, we show it satisﬁes the
proposed security in the standard model.
Based on the proposed SRE scheme and a basic
forward-private SSE scheme, we present a new non-
interactive DSSE scheme, and argue that it is Type-
II backward-private under the security notion of [9].
Also, it inherits the forward privacy of the under-
lying SSE scheme. To the best of our knowledge,
the proposed scheme is the ﬁrst forward and Type-II
backward-private SSE scheme that supports both non-
interactive search and update and depends not on the
random oracles and hardware assumptions.
• We introduce an efﬁcient instantiation, named Aura,
of our DSSE scheme with the GGM tree-based PRF
•
[29], and obtain the ﬁrst practical, scalable and non-
interactive DSSE scheme with both forward and Type-
II backward privacy as well as support for large dele-
tions. A comprehensive comparison of Aura with pre-
vious works is summarised in Table I, where we only
consider the schemes without hardware assumptions.
We implement Aura and perform a comprehensive
evaluation. The results show that Aura outperforms
both the state-of-the-art (non)-interactive forward and
backward-private DSSE schemes (Janus++ [52] and
SDd [22]) in terms of search time, insertion time,
deletion time, and communication cost.
Technical Overview. Following the basic idea of designing
backward-private SSE schemes mentioned before, the main
task is to develop an encryption scheme that can revoke the
decryption capability of the master secret key; given a revoked
secret key on a list of tags (associated with a set of document
identiﬁer/keyword pairs), the server can recover an encrypted
identiﬁer if the associated tag does not belong to the tag
list, otherwise fails. This is achieved by relying heavily on
incremental puncturable encryption in both Janus [9] and
Janus++ [52], where a fresh key component is produced and
outsourced to the server whenever a deletion happens. Thus
too much information about deletions is revealed to the server.
To achieve stronger backward privacy, our essential idea is
to make the deletions (i.e., revocation) oblivious to the server.
We observe that the schemes of [9], [52] could in fact be
run in this way, exactly by locally recording all tags to be
deleted and then revoking them in one shot rather than in an
incremental manner. However, this usually requires to allocate
some storage for recording these tags before generating the
revoked secret key for them. In general, the cost of storage
requested grows linearly with the size of all tags to be deleted.
This is undesirable in SSE scenarios.
What we need in essence is an encryption mechanism that
enables us to revoke the decryption capability of the initial
secret key over a set of tags in one shot and with only a low
request for memory. Informally, it is like a predicate encryption
[44], [45] for predicate P(R, t) = 1 iff t /∈ R, where R is a set
of tags associated with a revoked secret key, t is a tag attached
to a ciphertext, and the decryption succeeds only if P(R, t) =
1. In this sense, it can be seen as the dual of identity-based
revocation system [47]. As far as we know, unfortunately, there
have been no such schemes proposed so far.
In order to design such a practical encryption scheme
that can revoke a list of tags in one shot with only a low
memory request, our main idea is to ﬁrst compress all tags
one-by-one to a short-size data structure, and then conduct
the revocation based on this data structure. Speciﬁcally, in
our construction we employ the Bloom ﬁlter [6], which is a
well-known data structure for compact set presentation, and
perform the revocation by leveraging the multi-puncturable
PRF [36]. For revocation, we generate a punctured secret key
on all indices of the entries (of the Bloom ﬁlter) with value ‘1’,
which are corresponding to the tags to be revoked. With this
key, we can compute the value of the pseudorandom function
on at least one index if the associated tag is not revoked, as
there exists at least one entry with value ‘0’ for an unrevoked
tag (due to the property of the Bloom ﬁlter). Otherwise, no
PRF value can be computed on any of the indices derived
2
TABLE I: Comparison with previous works. N, D, and W denote the total number of keyword/document pairs, total number
of documents, and total number of distinct keywords in the database, respectively. For a keyword w, aw is the total number of
inserted entries matching w, dw denotes the number of deleted entries matching w and d = maxw dw. nw is the size of search
result matching w and nw = aw − dw. ˜O notation hides polylogarithmic factors.
Schemes
#Rounds‡
Computation
Search
Communication
Search
Update
˜O(log2 N )
O(log2 N )
Update
˜O(log3 N )
O(log2 N )
˜O(aw log N + log3 N )
˜O(aw log N + log3 N )
O(nw log2 N )
O(aw + dw)
O(aw + dw)
Moneta [9]
Orion [15]
Fides [9]
Mitra [15]
SDa [22]
SDd [22]
Backward
Privacy
Type-I
Type-I
Type-II
Type-II
Type-II
Type-II
Aura [Sec. IV]
Type-II
Dianadel [9]
Type-III
Janus [9]
Type-III
Horus [15]
Type-III
Janus++ [52]
Type-III