t
c
e
e
D
t
100
90
80
70
60
50
40
30
20
10
0
0
5
10
False Positive Rate (%)
15
20
25
Fig. 5. PayL ROC Curve
tune its models. We emphasize that FLIPS assumes this requirement as part of
its design; we do not ﬁlter based on PayL’s evidence alone.
5.5 Hypothesis 3: Proxy Performance Impact
We discovered the performance impact of our unoptimized, Java-based proxy on
the time it took to service two diﬀerent traﬃc traces. Our results are displayed
in Table 2 and graphically in Figure 6. Note that our experimental setup is not
designed to stress test Apache or the proxy, but rather to elucidate the relative
overhead that the proxy and the ﬁlters add. Baseline performance is roughly 210
requests per second. Adding the proxy degrades this throughput to roughly 170
requests per second. Finally, adding the ﬁlter reduces it to around 160 requests
per second.
Table 2. Performance Impact of FLIPS Proxy Subcomponents. Baseline performance
is compared to adding FLIPS’s HTTP proxy and FLIPS’s HTTP proxy with ﬁltering
and classiﬁcation turned on. Baseline performance is measured by a client script hitting
Apache directly. The addition of the proxy is done by directing the script to contact
the FLIPS HTTP proxy rather than the production server directly. Finally, ﬁltering in
the FLIPS HTTP proxy is turned on.
Component # of Requests Mean Time (s) Std. Dev.
Baseline
Baseline
+Proxy
+Proxy
529
108818
529
108818
+Proxy, +Filter 529
+Proxy, +Filter 108818
2.42
516
2.88
668
3.07
727
0.007
65.7
0.119
9.68
0.128
21.15
FLIPS: Hybrid Adaptive Intrusion Prevention
97
)
s
d
n
o
c
e
s
(
s
t
s
e
u
q
e
r
l
l
a
i
e
c
v
r
e
s
o
t
e
m
i
t
 900
 800
 700
 600
 500
 400
 300
 200
 100
 0
Overhead Added by Proxy Subcomponents
108818 requests
529 requests
group (baseline, +proxy, +proxy+filter)
 3.5
 3
 2.5
 2
 1.5
 1
 0.5
 0
)
s
d
n
o
c
e
s
(
s
t
s
e
u
q
e
r
l
l
a
i
e
c
v
r
e
s
o
t
e
m
i
t
Fig. 6. Performance Impact of FLIPS Proxy Subcomponents. A demonstration of how
the proxy aﬀects baseline performance for two diﬀerent traﬃc traces. Note that the
smaller trace (529 requests) is measured on the vertical axis on the right side of the
graph. This graph shows the increase in average time to service some number of requests
when the proxy is inserted between the client and the HTTP server, and again when
the ﬁltering in the proxy is turned on.
5.6 Hypothesis 4: The End-to-End Test
To demonstrate the operation of the system, we inserted a synthetic code in-
jection vulnerability into Apache. The vulnerability was a simple stack-based
overﬂow of a local ﬁxed size buﬀer. The function was protected with STEM,
and we observed how long it took FLIPS to stop the attack and deploy a ﬁlter
against further instances.
Inserting a vulnerability into Apache proved to be the most challenging part
of this experiment. The platform that FLIPS was deployed on (Fedora Core 3)
employs address space randomization (via the Exec-Shield) utility. We turned
this oﬀ by changing the value in /proc/sys/kernel/exec-shield-randomize to zero.
In addition, we marked the httpd binary as needing an executable stack via the
execstack utility.
To test the end-to-end functionality, we directed two streams of attack in-
stances against Apache through our proxy. We ﬁrst sent a stream of 67 identical
attack instances and then followed this with 22 more attacks that included slight
variations of the original attack. In the ﬁrst attack stream, FLIPS successfully
blocked 61 of the 67 attack instances. It let the ﬁrst six instances through before
STEM had enough time to feedback to FLIPS. It took roughly one second for
FLIPS to start blocking the attacks. After that, each subsequent identical at-
tack instance was blocked by the direct match ﬁlter. The second attack stream
contained 22 variations of the original. The LCS ﬁlter (with a threshold of 60%)
successfully blocked twenty of these. This result provides some evidence that
FLIPS can stop metamorphic attacks. Our results are summarized in Table 3.
98
M.E. Locasto et al.
Table 3. End to end response time of FLIPS ﬁltering. Once FLIPS has had feedback
from STEM, it will block all future identical attack instances. With the LCS ﬁlter
threshold set at 60%, FLIPS was able to ﬁlter 20 of 22 attack variations. Most of the
blocked attacks had an LCS of 80% or more. Obviously, attacks that are extremely
diﬀerent will not be caught by the LCS ﬁlter, but if they cause STEM to signal FLIPS
about them, they will then be blocked on their own merits.
Attack Stream Total # of Requests Time to Block Requests Blocked
Homogeneous Stream 67
22
Mixed Stream
1 sec
n/a
61
20
6 Future Work
There remains a great deal of work in the space of intrusion prevention. We
plan on enhancing our implementation of FLIPS along several axes. First, we
will extend the proxy to handle diﬀerent services and clients. Second, we will
extend our current treatment of HTTP to include the request headers and en-
tity bodies. Doing so can enable us to verify our experimental results against
real Apache vulnerabilities. Third, we plan to augment our set of supervision
elements by adding mechanisms like input taint-tracking that may be less ex-
pensive than ISR. We also intend to explore using iptables and libipq as the
basis of input for a more general architecture. Finally, we are currently research-
ing methods of exchanging signatures that have been generated by FLIPS with
other FLIPS instances to provide inoculation to members of an Application
Community [19].
7 Conclusions
Intrusion detection systems traditionally focus on identifying attempts to breach
computer systems and networks. Since detecting intrusions remains a hard
problem, reacting in an automated and intelligent way to intrusion alerts has
remained largely unaddressed and is often a manual process executed by over-
burdened system administrators.
We presented FLIPS, an intrusion prevention system that employs a combi-
nation of anomaly classiﬁcation and signature matching to block binary code
injection attacks. The feedback for this hybrid detection system is provided by
STEM, an x86 emulator capable of performing instruction set randomization
(ISR). STEM can identify injected code, automatically recover from an attack,
and forward the attack code to the anomaly and signature classiﬁers. We have
shown how FLIPS can detect, halt, repair, and create a signature for a pre-
viously unknown attack. While we demonstrated an implementation of FLIPS
that protects an HTTP server, FLIPS’s mechanisms are broadly applicable to
host-based intrusion prevention.
FLIPS: Hybrid Adaptive Intrusion Prevention
99
References
1. K. Anagnostakis, M. B. Greenwald, S. Ioannidis, A. D. Keromytis, and D. Li.
A Cooperative Immunization System for an Untrusting Internet. In Proceedings
of the 11th IEEE International Conference on Networks (ICON), pages 403–408,
October 2003.
2. K. G. Anagnostakis, S. Sidiroglou, P. Akritidis, K. Xinidis, E. Markatos, and A. D.
Keromytis. Detecting Targeted Attacks Using Shadow Honeypots. In Proceedings
of the 14th USENIX Security Symposium. (to appear)., August 2005.
3. E. G. Barrantes, D. H. Ackley, S. Forrest, T. S. Palmer, D. Stefanovic, and D. D.
Zovi. Randomized Instruction Set Emulation to Distrupt Binary Code Injection
Attacks. In Proceedings of the 10th ACM Conference on Computer and Commu-
nications Security (CCS), October 2003.
4. S. Bhatkar, D. C. DuVarney, and R. Sekar. Address Obfuscation: an Eﬃcient
Approach to Combat a Broad Range of Memory Error Exploits. In Proceedings of
the 12th USENIX Security Symposium, pages 105–120, August 2003.
5. S. Boyd and A. Keromytis. SQLrand: Preventing SQL Injection Attacks. In Applied
Cryptography and Network Security (ACNS), pages 292–302, June 2004.
6. G. Candea and A. Fox. Crash-Only Software. In Proceedings of the 9th Workshop
on Hot Topics in Operating Systems (HOTOS-IX), May 2003.
7. F. Cuppens and A. Miege. Alert Correlation in a Cooperative Intrusion Detection
Framework. In IEEE Security and Privacy, 2002.
8. B. Demsky and M. C. Rinard. Automatic Data Structure Repair for Self-Healing
Systems. In Proceedings of the 1st Workshop on Algorithms and Architectures for
Self-Managing Systems, June 2003.
9. S. Forrest, A. Somayaji, and D. Ackley. Building Diverse Computer Systems. In
Proceedings of the 6th Workshop on Hot Topics in Operating Systems, pages 67–72,
1997.
10. M. Handley, V. Paxson, and C. Kreibich. Network Intrusion Detection: Evasion,
Traﬃc Normalization, and End-to-End Protocol Semantics. In Proceedings of the
USENIX Security Conference, 2001.
11. S. Ioannidis, A. D. Keromytis, S. M. Bellovin, and J. M. Smith. Implementing a
Distributed Firewall. In Proceedings of the 7th ACM International Conference on
Computer and Communications Security (CCS), pages 190–199, November 2000.
12. G. S. Kc, A. D. Keromytis, and V. Prevelakis. Countering Code-Injection Attacks
With Instruction-Set Randomization. In Proceedings of the 10th ACM Conference
on Computer and Communications Security (CCS), October 2003.
13. H.-A. Kim and B. Karp. Autograph: Toward Automated, Distributed Worm Sig-
nature Detection. In Proceedings of the USENIX Security Conference, 2004.
14. S. T. King, Z. M. Mao, D. G. Lucchetti, and P. M. Chen. Enriching Intrusion Alerts
Through Multi-host Causality. In Proceedings of the Symposium on Network and
Distributed Systems Security (NDSS), 2005.
15. V. Kiriansky, D. Bruening, and S. Amarasinghe. Secure Execution Via Program
In Proceedings of the 11th USENIX Security Symposium, August
Shepherding.
2002.
16. A. Kolesnikov and W. Lee. Advanced Polymorphic Worms: Evading IDS by Blend-
ing in with Normal Traﬃc. Technical report, Georgia Tech College of Computing,
2004.
17. C. Krugel, T. Toth, and E. Kirda. Service Speciﬁc Anomaly Detection for Network
Intrusion Detection. In Proceedings of the ACM Symposium on Applied Computing
(SAC), 2002.
100
M.E. Locasto et al.
18. M. E. Locasto, J. J. Parekh, A. D. Keromytis, and S. J. Stolfo. Towards Collabora-
tive Security and P2P Intrusion Detection. In Proceedings of the IEEE Information
Assurance Workshop (IAW), pages 333–339, June 2005.
19. M. E. Locasto, S. Sidiroglou, and A. D. Keromytis. Application Communities:
Using Monoculture for Dependability. In Proceedings of the 1st Workshop on Hot
Topics in System Dependability (HotDep-05), June 2005.
20. J. Newsome and D. Song. Dynamic Taint Analysis for Automatic Detection, Anal-
ysis, and Signature Generation of Exploits on Commodity Software. In The 12th
Annual Network and Distributed System Security Symposium (NDSS), February
2005.
21. R. E. Overill. How Re(Pro)active Should an IDS Be? In Proceedings of the 1st Inter-
national Workshop on Recent Advances in Intrusion Detection (RAID), September
1998.
22. T. Pietraszek. Using Adaptive Alert Classiﬁcation to Reduce False Positives in
Intrusion Detection. In Proceedings of the Symposium on Recent Advances in In-
trusion Detection (RAID), September 2004.
23. J. Pincus and B. Baker. Beyond Stack Smashing: Recent Advances in Exploiting
Buﬀer Overﬂows. IEEE Security & Privacy, 2(4):20–27, July/August 2004.
24. J. C. Rabek, R. I. Khazan, S. M. Lewandowski, and R. K. Cunningham. De-
tection of Injected, Dynamically Generated, and Obfuscated Malicious Code. In
Proceedings of the Workshop on Rapid Malcode (WORM), 2003.
25. J. C. Reynolds, J. Just, L. Clough, and R. Maglich. On-Line Intrusion Detec-
tion and Attack Prevention Using Diversity, Genrate-and-Test, and Generalization.
In Proceedings of the 36th Hawaii International Conference on System Sciences
(HICSS), 2003.