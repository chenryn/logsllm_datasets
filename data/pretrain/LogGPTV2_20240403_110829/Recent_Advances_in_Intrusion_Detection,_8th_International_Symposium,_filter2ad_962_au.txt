# FLIPS: Hybrid Adaptive Intrusion Prevention

## 5.4 PayL ROC Curve
Figure 5 shows the Receiver Operating Characteristic (ROC) curve for PayL, which is used to tune the models in FLIPS. It is important to note that FLIPS incorporates this requirement as part of its design and does not rely solely on PayL's evidence for filtering.

## 5.5 Hypothesis 3: Proxy Performance Impact
We evaluated the performance impact of our unoptimized, Java-based proxy on two different traffic traces. The results are presented in Table 2 and graphically in Figure 6. Our experimental setup was not designed to stress test Apache or the proxy but to highlight the relative overhead added by the proxy and the filters. The baseline performance, measured by a client script directly hitting Apache, was approximately 210 requests per second. Adding the proxy reduced this throughput to about 170 requests per second. Enabling the filter further decreased it to around 160 requests per second.

### Table 2: Performance Impact of FLIPS Proxy Subcomponents
| Component                   | # of Requests | Mean Time (s) | Std. Dev. |
|-----------------------------|---------------|---------------|-----------|
| Baseline                    | 529           | 2.42          | 0.007     |
| Baseline                    | 108818        | 516           | 65.7      |
| +Proxy                      | 529           | 2.88          | 0.119     |
| +Proxy                      | 108818        | 668           | 9.68      |
| +Proxy, +Filter             | 529           | 3.07          | 0.128     |
| +Proxy, +Filter             | 108818        | 727           | 21.15     |

### Figure 6: Performance Impact of FLIPS Proxy Subcomponents
This figure demonstrates how the proxy affects baseline performance for two different traffic traces. The smaller trace (529 requests) is measured on the vertical axis on the right side of the graph. The graph illustrates the increase in average time to service a certain number of requests when the proxy is inserted between the client and the HTTP server, and again when the filtering in the proxy is enabled.

## 5.6 Hypothesis 4: End-to-End Test
To demonstrate the system's operation, we introduced a synthetic code injection vulnerability into Apache. The vulnerability was a simple stack-based overflow of a local fixed-size buffer. The function was protected with STEM, and we observed the time it took for FLIPS to stop the attack and deploy a filter against further instances.

### Experimental Setup
Inserting the vulnerability into Apache was the most challenging part of the experiment. The platform (Fedora Core 3) uses address space randomization via the Exec-Shield utility. We disabled this by setting `/proc/sys/kernel/exec-shield-randomize` to zero. Additionally, we marked the `httpd` binary as needing an executable stack using the `execstack` utility.

### Test Results
We directed two streams of attack instances against Apache through our proxy. The first stream consisted of 67 identical attack instances, and the second stream included 22 variations of the original attack. In the first stream, FLIPS successfully blocked 61 out of 67 attack instances, allowing the first six instances through before STEM provided feedback. It took approximately one second for FLIPS to start blocking the attacks. Each subsequent identical attack instance was then blocked by the direct match filter. In the second stream, the LCS filter (with a threshold of 60%) successfully blocked twenty of the 22 variations, providing evidence that FLIPS can stop metamorphic attacks.

### Table 3: End-to-End Response Time of FLIPS Filtering
| Attack Stream   | Total # of Requests | Time to Block | Requests Blocked |
|-----------------|---------------------|---------------|------------------|
| Homogeneous     | 67                  | 1 sec         | 61               |
| Mixed           | 22                  | n/a           | 20               |

## 6. Future Work
There is significant work remaining in the field of intrusion prevention. We plan to enhance FLIPS along several axes:
1. Extend the proxy to handle different services and clients.
2. Expand our current treatment of HTTP to include request headers and entity bodies, enabling us to verify our experimental results against real Apache vulnerabilities.
3. Augment our set of supervision elements by adding mechanisms like input taint-tracking, which may be less expensive than ISR.
4. Explore using `iptables` and `libipq` as the basis for a more general architecture.
5. Research methods for exchanging signatures generated by FLIPS with other FLIPS instances to provide inoculation to members of an Application Community [19].

## 7. Conclusions
Intrusion detection systems traditionally focus on identifying attempts to breach computer systems and networks. Since detecting intrusions remains a challenging problem, automated and intelligent reactions to intrusion alerts have been largely unaddressed and often require manual intervention by overburdened system administrators.

We presented FLIPS, an intrusion prevention system that combines anomaly classification and signature matching to block binary code injection attacks. Feedback for this hybrid detection system is provided by STEM, an x86 emulator capable of performing instruction set randomization (ISR). STEM can identify injected code, automatically recover from an attack, and forward the attack code to the anomaly and signature classifiers. We demonstrated how FLIPS can detect, halt, repair, and create a signature for a previously unknown attack. While we showcased an implementation of FLIPS protecting an HTTP server, its mechanisms are broadly applicable to host-based intrusion prevention.

## References
[References listed here]

---

This revised text provides a clearer, more professional, and coherent presentation of the information.