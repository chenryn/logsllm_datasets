函数 fsize 打印文件的长度。但是，如果此文件是一个目录，则 fsize 首先调用 dirwalk 函数处理它所包含的所有文件。注意如何使用文件中的标志名 S_IFMT 和 S_IFDIR 来判定文件是不是一个目录。括号是必须的，因为&运算符的优先级低于==运算符 的优先级。
int stat(char *, struct stat *);
void dirwalk(char *, void (*fcn)(char *));
/* fsize:              print the name of file "name" */ void fsize(char *name)
{
struct stat stbuf;
if (stat(name, &stbuf) == •1) {
fprintf(stderr, "fsize: can't access %s\n", name); return;
}
if ((stbuf.st_mode & S_IFMT) == S_IFDIR) dirwalk(name, fsize);
printf("%8ld %s\n", stbuf.st_size, name);
}
函数 dirwalk 是一个通用的函数，它对目录中的每个文件都调用函数 fcn 一次。它首 先打开目录，循环遍历其中的每个文件，并对每个文件调用该函数，然后关闭目录返回。因 为 fsize 函数对每个目录都要调用 dirwalk 函数，所以这两个函数是相互递归调用的。
#define MAX_PATH 1024
/* dirwalk:              apply fcn to all files in dir */ void dirwalk(char *dir, void (*fcn)(char *))
{
char name[MAX_PATH]; Dirent *dp;
DIR *dfd;
if ((dfd = opendir(dir)) == NULL) {
fprintf(stderr, "dirwalk: can't open %s\n", dir); return;
}
while ((dp = readdir(dfd)) != NULL) { if (strcmp(dp•>name, ".") == 0
|| strcmp(dp•>name, ".."))
continue;              /* skip self and parent */
if (strlen(dir)+strlen(dp•>name)+2 > sizeof(name)) fprintf(stderr, "dirwalk: name %s %s too long\n",
dir, dp•>name);
else {
sprintf(name, "%s/%s", dir, dp•>name); (*fcn)(name);
}
}
closedir(dfd);
}
每次调用 readdir 都将返回一个指针，它指向下一个文件的信息。如果目录中已没有待处理 的文件，该函数将返回 NULL。每个目录都包含自身“ ."和父目录“ .."的页目，在处理时 必须跳过它们，否则将会导致无限循环。
到现在这一步为止，代码与目录的格式无关。下一步要做的事情就是在某个具体的系统 上提供一个 opendir、readdir 和 closedir 的最简单版本。以下的函数适用于 Version 7 和 System V UNIX 系统，它们使用了头文件(sys/dir.h>中的目录信息，如下所示:
#ifndef DIRSIZ
#define DIRSIZ              14
#endif
struct direct {              /* directory entry */ ino_t d_ino;                            /* inode number */
char              d_name[DIRSIZ];              /* long name does not have '\0' */
};
某些版本的系统支持更长的文件名和更复杂的目录结构。
类型 ino_t 是使用 typedef 定义的类型，它用于描述 i 结点表的索引。在我们通常使用 的系统中，此类型为 unsigned short，但是这种信息不应在程序中使用。因为不同的系统 中该类型可能不同，所以使用   typedef 定义要好一些。所有的"系统"类型可以在文件
fd = fd; return dp;
}
closedir 函数用于关闭目录文件并释放内存空间:
/* closedir:              close directory opened by opendir */ void closedir(DIR *dp)
{
if (dp) {
close(dp•>fd); free(dp);
}
}
最后，函数 readdir 使用 read 系统调用读取每个目录页。如果某个目录位置当前没有 使用(因为删除了一个文件)，则它的 i 结点编号为 0，并跳过该位置。否则，将 i 结点编号 和目录名放在一个 static 类型的结构中，并给用户返回一个指向此结构的指针。每次调用 readdir 函数将覆盖前一次调用获得的信息。
#include               /* local directory structure */
/* readdir:              read directory entries in sequence */ Dirent *readdir(DIR *dp)
{
struct direct dirbuf;                            /* local directory structure */ static Dirent              d;              /* return: portable structure */
while (read(dp•>fd, (char *) &dirbuf, sizeof(dirbuf))
== sizeof(dirbuf)) {
if (dirbuf.d_ino == 0) /* slot not in use */ continue;
d.ino = dirbuf.d_ino;
strncpy(d.name, dirbuf.d_name, DIRSIZ); d.name[DIRSIZ] = '\0';              /* ensure termination */ return &d;
}
return NULL;
}
尽管 fsize 程序非常特殊，但是它的确说明了一些重要的思想。首先，许多程序并不是 "系统程序"，它们仅仅使用由操作系统维护的信息。对于这样的程序，很重要的一点是，信 息的表示仅出现在标准头文件中，使用它们的程序只需要在文件中包含这些头文件即可，而 不需要包含相应的声明。其次，有可能为与系统相关的对象创建一个与系统无关的接口。标
准库中的函数就是很好的例子。
练习 8•5             修改 fsize 程序，打印 i 结点页中包含的其它信息。
8.7 实例——存储分配程序
我们在第 5 章给出了一个功能有限的面向校的存储分配程序。本节将要编写的版本没有 限制，可以以任意次序调用 malloc 和 free。malloc 在必要时调用操作系统以获取更多的 存储空间。这些程序说明了通过一种与系统无关的方式编写与系统有关的代码时应考虑的问 题，同时也展示了结构、联合和 typedef 的实际应用。
malloc 并不是从一个在编译时就确定的固定大小的数组中分配存储空间，而是在需要时 向操作系统申请空间。因为程序中的某些地方可能不通过 malloc 调用申请空间(也就是说， 通过其它方式申请空间)，所以，malloc 管理的空间不一定是连续的。这样，空闲存储空间 以空闲块链表的方式组织，每个块包含一个长度、一个指向下一块的指针以及一个指向自身 存储空间的指针。这些块按照存储地址的升序组织，最后一块(最高地址)指向第一块(参 见图 8•1)。
图 8•1
当有申请请求时，malloc 将扫描空闲块链表，直到找到一个足够大的块为止。该算法称 为"首次适应"(first     fit);与之相对的算法是"最佳适应"(best     fit)，它寻找满足条件的最小 块。如果该块恰好与请求的大小相符合，则将它从链表中移走并返回给用户。如果该块太大， 则将它分成两部分:大小合适的块返回给用户，剩下的部分留在空闲块链表中。如果找不到 一个足够大的块，则向操作系统申请一个大块并加入到空闲块链表中。
释放过程也是首先搜索空闲块链表，以找到可以插入被释放块的合适位置。如果与被释 放块相邻的任一边是一个空闲块，则将这两个块合成一个更大的块，这样存储空间不会有太 多的碎片。因为空闲块链表是以地址的递增顺序链接在一起的，所以很容易判断相邻的块是 否空闲。
我们在第 5 章中曾提出了这样的问题，即确保由 malloc 函数返回的存储空间满足将要 保存的对象的对齐要求。虽然机器类型各异，但是，每个特定的机器都有一个最受限的类型: 如果最受限的类型可以存储在某个特定的地址中，则其它所有的类型也可以存放在此地址中。 在某些机器中，最受限的类型是 double 类型;而在另外一些机器中，最受限的类型是 int 或 long 类型。
空闲块包含一个指向链表中下一个块的指针、一个块大小的记录和一个指向空闲空间本
身的指针。位于块开始处的控制信息称为"头部"。为了简化块的对齐，所有块的大小都必 须是头部大小的整数倍，且头部已正确地对齐。这是通过一个联合实现的，该联合包含所需 的头部结构以及一个对齐要求最受限的类型的实例，在下面这段程序中，我们假定 long 类型 为最受限的类型:
typedef long Align;              /* for alignment to long boundary */
union header {              /* block header */ struct {
union header *ptr; /* next block if on free list */ unsigned size;              /* size of this block */
} s;
Align x;              /* force alignment of blocks */
};
typedef union header Header;
在该联合中，Align 字段永远不会被使用，它仅仅用于强制每个头部在最坏的情况下满足对 齐要求。
在 malloc 函数中，请求的长度(以字符为单位)将被舍入，以保证它是头部大小的整 数倍。实际分配的块将多包含一个单元，用于头部本身。实际分配的块的大小将被记录在头 部的 size 字段中。malloc 函数返回的指引将指向空闲空间，而不是块的头部。用户可对获 得的存储空间进行任何操作，但是，如果在分配的存储空间之外写入数据，则可能会破坏块 链表。图 8•2 表示由 malloc 返回的块。
图 8•2             malloc 返回的块
其中的 size 字段是必需的，因为由 malloc 函数控制的块不一定是连续的，这样就不 可能通过指针算术运算计算其大小。
变量 base 表示空闲块链表的头部。第一次调用 malloc 函数时，freep 为 NULL，系统 将创建一个退化的空闲块链表，它只包含一个大小为 0 的块，且该块指向它自己。任何情况 下，当请求空闲空间时，都将搜索空闲块链表。搜索从上一次找到空闲块的地方(freep) 开始。该策略可以保证链表是均匀的。如果找到的块太大，则将其尾部返回给用户，这样， 初始块的头部只需要修改 size 字段即可。在任何情况下，返回给用户的指针都指向块内的空 闲存储空间，即比指向头部的指针大一个单元。
static Header base;              /* empty list to get started */ static Header *freep = NULL;              /* start of free list */
/* malloc:              general•purpose storage allocator */ void *malloc(unsigned nbytes)
{
Header *p, *prevp;
Header *moreroce(unsigned); unsigned nunits;
nunits = (nbytes+sizeof(Header)•1)/sizeof(header) + 1; if ((prevp = freep) == NULL) {              /* no free list yet */
base.s.ptr = freeptr = prevptr = &base; base.s.size = 0;
}
for (p = prevp•>s.ptr; ; prevp = p, p = p•>s.ptr) { if (p•>s.size >= nunits) {              /* big enough */
if (p•>s.size == nunits)              /* exactly */ prevp•>s.ptr = p•>s.ptr;
else {              /* allocate tail end */ p•>s.size •= nunits;
p += p•>s.size; p•>s.size = nunits;
}
freep = prevp;
return (void *)(p+1);
}
if (p == freep)              /* wrapped around free list */ if ((p = morecore(nunits)) == NULL)
return NULL;              /* none left */
}
}
函数 morecore 用于向操作系统请求存储空间，其实现细节因系统的不同而不同。因为 向系统请求存储空间是一个开销很大的操作，因此，我们不希望每次调用 malloc 函数时都 执行该操作，基于这个考虑，morecore 函数请求至少 NALLOC 个单元。这个较大的块将根 据需要分成较小的块。在设置完 size 字段之后，morecore 函数调用 free 函数把多余的存 储空间插入到空闲区域中。
UNIX 系统调用 sbrk(n)返回一个指针，该指针指向 n 个字节的存储空间。如果没有空 闲空间，尽管返回 NULL 可能更好一些，但 sbrk 调用返回•1。必须将•1 强制转换为 char * 类型，以便与返回值进行比较。而且，强制类型转换使得该函数不会受不同机器中指针表示 的不同的影响。但是，这里仍然假定，由 sbrk 调用返回的指向不同块的多个指针之间可以进 行有意义的比较。ANSI 标准并没有保证这一点，它只允许指向同一个数组的指针间的比较。 因此，只有在一般指针间的比较操作有意义的机器上，该版本的 malloc 函数才能够移植。
#define NALLOC              1024              /* minimum #units to request */
/* morecore:              ask system for more memory */ static Header *morecore(unsigned nu)
{
char *cp, *sbrk(int); Header *up;
if (nu s.size = nu; free((void *)(up+1)); return freep;
}
我们最后来看一下 free 函数。它从 freep 指向的地址开始，逐个扫描空闲块链表，寻 找可以插入空闲块的地方。该位置可能在两个空闲块之间，也可能在链表的末尾。在任何一 种情况下，如果被释放的块与另一空闲块相邻，则将这两个块合并起来。合并两个块的操作 很简单，只需要设置指针指向正确的位置，并设置正确的块大小就可以了。
/* free:              put block ap in free list */ void free(void *ap)
{