# PivotalR Package Documentation

## Overview
- **Package Name:** PivotalR
- **Date:** October 22, 2016
- **Type:** Package
- **Title:** A Fast, Easy-to-Use Tool for Manipulating Tables in Databases and a Wrapper of MADlib
- **Version:** 0.1.18.2
- **Release Date:** 2016-10-21
- **Authors:**
  - Predictive Analytics Team at Pivotal Inc.
  - Data Science Team at Pivotal Inc.
- **Maintainer:** Rahul Iyer
- **Contact:** Predictive Analytics Team at Pivotal Inc.
- **Dependencies:**
  - R (>= 2.14.0)
  - methods
  - Matrix
- **Suggested Packages:**
  - DBI
  - RPostgreSQL
  - shiny
  - testthat
  - tools
  - rpart
  - randomForest
  - topicmodels
- **Description:**
  PivotalR provides an R interface for the Pivotal Data stack running on PostgreSQL, Greenplum, or Apache HAWQ (incubating) databases with parallel and distributed computation capabilities for big data processing. It offers an R interface to various database operations on tables or views, making it unnecessary for R users to learn SQL. Additionally, it includes a wrapper for Apache MADlib (incubating), an open-source library for parallel and scalable in-database analytics.
- **License:** GPL (>= 2)
- **Lazy Loading:** Yes
- **Lazy Data:** Yes
- **Compilation Needed:** Yes
- **Repository:** CRAN
- **Publication Date:** 2016-10-22 12:17:19

## R Topics Documented
- PivotalR-package
- abalone
- Aggregate functions
- AIC
- Arith-methods
- array.len
- arraydb.to.arrayr
- as.db.data.frame
- as.environment
- as.factor-methods
- by
- cbind2-methods
- clean.madlib.temp
- coef
- Compare-methods
- conn.eql
- conn.id
- content
- crossprod
- db.connect
- db.data.frame
- db.data.frame-class
- db.disconnect
- db.existsObject
- db.list
- db.obj-class
- db.objects
- db.q
- db.Rcrossprod-class
- db.Rquery-class
- db.search.path
- db.table-class
- db.view-class
- delete
- dim-methods
- eql-methods
- Extract database connection info
- Extract-Replace-methods
- Func-methods
- generic.bagging
- generic.cv
- getTree.rf.madlib
- groups
- GUI
- ifelse
- is.db.data.frame
- is.factor-methods
- is.na-method
- key
- Logical-methods
- madlib.arima
- madlib.elnet
- madlib.glm
- madlib.kmeans
- madlib.lda
- madlib.lm
- madlib.randomForest
- madlib.rpart
- madlib.summary
- madlib.svm
- margins
- merge-method
- na.action
- names-methods
- null.data
- perplexity.lda
- plot.dt.madlib
- predict
- predict.arima
- predict.bagging.model
- predict.dt.madlib
- predict.elnet.madlib
- predict.lda
- predict.rf.madlib
- preview
- print
- print-methods
- print.arima.madlib
- print.dt.madlib
- print.elnet.madlib
- print.lm.madlib
- print.none.obj
- print.rf.madlib
- print.summary.madlib
- residuals
- Row_actions
- sample-methods
- scale
- sort
- subset-methods
- summary
- summary.arima.madlib
- summary.elnet.madlib
- summary.lm.madlib
- text.dt.madlib
- TypeCast functions
- unique-methods
- vcov

## PivotalR Package Details
### Description
PivotalR is a package that enables users of R, the most popular open-source statistical programming language, to interact with the Pivotal (Greenplum) Database and Pivotal HD/HAWQ for Big Data analytics. It provides an interface to operations on tables/views in the database, similar to those of `data.frame`, allowing R users to operate on database objects without learning SQL. The latest code, along with a training video and a quick-start guide, are available at [GitHub](https://github.com/pivotalsoftware/PivotalR).

### Features
- **Data Connectivity:** Functions like `db.connect` and `db.disconnect` for managing database connections.
- **Data Exploration:** Functions such as `db.data.frame` and `subset` for exploring and manipulating data.
- **R Language Features:** Support for common R functions like `dim`, `names`, `min`, `max`, `nrow`, `ncol`, and `summary`.
- **Reorganization Functions:** Functions like `merge` and `by` (group-by) for data reorganization.
- **Transformations:** Functions such as `as.factor` and `null replacement` for data transformations.
- **Algorithms:** Wrappers for linear and logistic regression using MADlib.

### Usage
```R
## Get help for the package
help("PivotalR-package")

## Get help for a specific function
help(madlib.lm)

## Create multiple connections to different databases
db.connect(port = 5433) # Connection 1, use default values for parameters
db.connect(dbname = "test", user = "qianh1", password = "", host = "remote.machine.com", madlib = "madlib07", port = 5432) # Connection 2
db.list() # List all connections

## List all tables/views that have "ornst" in the name
db.objects("ornst")

## List all tables/views for a specific connection
db.objects(conn.id = 1)

## Create a table and the R object pointing to the table
delete("abalone", conn.id = cid)
x <- as.db.data.frame(abalone, "abalone")

## OR if the table already exists, create the wrapper directly
x <- db.data.frame("abalone")
dim(x) # Dimension of the data table
names(x) # Column names of the data table
madlib.summary(x) # Summary for each column
lk(x, 20) # Look at a sample of the data
lookat(sort(x, decreasing = FALSE, x$id), 20) # Sample sorted by id column
lookat(sort(x, FALSE, NULL), 20) # Sample ordered randomly

## Linear Regression Example
fit1 <- madlib.lm(rings ~ . - id | sex, data = x)
fit1 # View the result
lookat(mean((x$rings - predict(fit1, x))^2)) # Mean square error

## Plot predicted vs. true values
ap <- x$rings # True values
ap$pred <- predict(fit1, x) # Add a column for predicted values
random.sample <- lk(sort(ap, FALSE, "random"), 1000) # Sort randomly
plot(random.sample) # Plot a random sample

## Fit a single model to all data treating sex as a categorical variable
y <- x # Make a copy
y$sex <- as.factor(y$sex) # Convert to factor
fit2 <- madlib.lm(rings ~ . - id, data = y)
fit2 # View the result
lookat(mean((y$rings - predict(fit2, y))^2)) # Mean square error

## Logistic Regression Example
fit3 <- madlib.glm(rings < 10 ~ . - id | sex, data = x, family = "binomial")
fit3 # View the result
lookat(mean((x$rings < 10) == predict(fit3, x))) # Percentage of correct prediction

## Fit a single model to all data treating sex as a categorical variable
y <- x # Make a copy
y$sex <- as.factor(y$sex) # Convert to factor
fit4 <- madlib.glm(rings < 10 ~ . - id, data = y, family = "binomial")
fit4 # View the result
lookat(mean((y$rings < 10) == predict(fit4, y))) # Percentage of correct prediction

## Group By Example
lk(by(x[,-1], x$sex, mean)) # Mean value of each column except "id"
lookat(by(x[,-1], x$sex, sd)) # Standard deviation of each column except "id"

## Merge Example
key(x) <- "id"
y <- x[1:300, 1:6]
z <- x[201:400, c(1,2,4,5)]
m <- merge(y, z, by = c("id", "sex"))
lookat(m, 20) # Get 100 rows

## Operator Example
y <- x$length + x$height + 2.3
z <- x$length * x$height / 3
lk(y < z, 20) # Compare y and z

## Handling NULL Values
delete("null_data")
x <- as.db.data.frame(null.data, "null_data")
dim(x) # Dimension of the data
names(x) # Column names
fit <- madlib.lm(sf_mrtg_pct_assets ~ ., data = x) # Error due to NULL values
y <- x # Make a copy
for (i in 1:10) y <- y[!is.na(y[i]),] # Remove NULL values
dim(y) # New dimension
fit <- madlib.lm(sf_mrtg_pct_assets ~ ., data = y) # Fit the model
fit # View the result
x[is.na(x)] <- 45 # Replace all NULL values
```

## Abalone Dataset
### Description
The `abalone` dataset is an example data frame used in the user manual for various examples.

### Usage
```R
data(abalone)
```

### Format
- **Id:** Integer, index of each observation
- **Sex:** Nominal, M (male), F (female), and I (infant)
- **Length:** Continuous, mm, longest shell measurement
- **Diameter:** Continuous, mm, perpendicular to length
- **Height:** Continuous, mm, with meat in shell
- **Wholeweight:** Continuous, grams, whole abalone
- **Shuckedweight:** Continuous, grams, weight of meat
- **Visceraweight:** Continuous, grams, gut weight (after bleeding)
- **Shellweight:** Continuous, grams, after being dried
- **Rings:** Continuous, number of rings (to be predicted)

This dataset can be used for both continuous value prediction and classification problems.