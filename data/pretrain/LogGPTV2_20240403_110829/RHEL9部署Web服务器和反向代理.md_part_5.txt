    # mkdir -p /var/www/example.net/
    ```
3.  在两个根目录中设置`httpd_sys_content_t`{.literal}上下文：
    ``` literallayout
    # semanage fcontext -a -t httpd_sys_content_t "/var/www/example.com(/.*)?"
    # restorecon -Rv /var/www/example.com/
    # semanage fcontext -a -t httpd_sys_content_t "/var/www/example.net(/.\*)?"
    # restorecon -Rv /var/www/example.net/
    ```
    这些命令在`/var/www/example.com/`{.literal}和`/var/www/example.net/`{.literal}目录中设置`httpd_sys_content_t`{.literal}上下文。
    请注意，您必须安装
    `policycoreutils-python-utils`{.literal}软件包才能运行`restorecon`{.literal}命令。
4.  为这两个域创建日志目录：
    ``` literallayout
    # mkdir /var/log/nginx/example.com/
    # mkdir /var/log/nginx/example.net/
    ```
5.  重启`nginx`{.literal}服务：
    ``` literallayout
    # systemctl restart nginx
    ```
:::
::: orderedlist
**验证步骤**
1.  在每个虚拟主机的文档 root 中创建不同的示例文件：
    ``` literallayout
    # echo "Content for example.com" > /var/www/example.com/index.html
    # echo "Content for example.net" > /var/www/example.net/index.html
    # echo "Catch All content" > /usr/share/nginx/html/index.html
    ```
2.  使用浏览器并连接到 `http://example.com`{.literal}Web
    服务器显示`/var/www/example.com/index.html`{.literal}文件中的示例内容。
3.  使用浏览器并连接到 `http://example.net`{.literal}Web
    服务器显示`/var/www/example.net/index.html`{.literal}文件中的示例内容。
4.  使用浏览器连接到`http://IP_address_of_the_server`{.literal}。Web
    服务器显示`/usr/share/nginx/html/index.html`{.literal}文件中的示例内容。
:::
:::
::: section
::: titlepage
# []{#setting-up-and-configuring-nginx_deploying-web-servers-and-reverse-proxies.html#adding-tls-encryption-to-an-nginx-web-server_setting-up-and-configuring-nginx}在 NGINX web 服务器中添加 TLS 加密 {.title}
:::
这部分论述了如何在`example.com`{.literal}域的 NGINX web 服务器上启用 TLS
加密。
::: itemizedlist
**先决条件**
-   如 ["安装并准备
    NGINX"一节](#setting-up-and-configuring-nginx_deploying-web-servers-and-reverse-proxies.html#installing-and-preparing-nginx_setting-up-and-configuring-nginx "安装并准备 NGINX"){.xref}
    所述安装 NGINX。
-   私钥存储在 `/etc/pki/tls/private/example.com.key`{.literal} 文件中。
    有关创建私钥和证书签名请求(CSR)的详细信息，以及如何从证书颁发机构(CA)请求证书，请参阅您的
    CA 文档。
-   TLS
    证书存储在`/etc/pki/tls/certs/example.com.crt`{.literal}文件中。如果您使用其他路径，请调整该流程的对应步骤。
-   CA 证书已附加到服务器的 TLS 证书文件中。
-   客户端和网页服务器会将服务器的主机名解析为 web 服务器的 IP 地址。
-   在本地防火墙中打开端口`443`{.literal}。
:::
::: orderedlist
**步骤**
1.  编辑
    `/etc/nginx/nginx.conf`{.literal}文件，并将以下`server`{.literal}块添加到配置中的`http`{.literal}块中：
    ``` literallayout
    server {
        listen              443 ssl;
        server_name         example.com;
        root                /usr/share/nginx/html;
        ssl_certificate     /etc/pki/tls/certs/example.com.crt;
        ssl_certificate_key /etc/pki/tls/private/example.com.key;
    }
    ```
2.  出于安全考虑，配置成只有 `root`{.literal} 用户才可以访问私钥文件：
    ``` literallayout
    # chown root:root /etc/pki/tls/private/example.com.key
    # chmod 600 /etc/pki/tls/private/example.com.key
    ```
    ::: {.warning style="margin-left: 0.5in; margin-right: 0.5in;"}
    ### 警告 {.title}
    如果私钥被设置为可以被未授权的用户访问，则需要撤销证书，然后再创建一个新私钥并请求一个新证书。否则，TLS
    连接就不再安全。
    :::
3.  重启`nginx`{.literal}服务：
    ``` literallayout
    # systemctl restart nginx
    ```
:::
::: itemizedlist
**验证步骤**
-   使用浏览器连接到`https://example.com`{.literal}
:::
::: itemizedlist
**其他资源**
-   [RHEL 9 中 TLS
    的安全注意事项](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/securing_networks/planning-and-implementing-tls_securing-networks#security-considerations-for-tls-in-rhel_planning-and-implementing-tls){.link}
:::
:::
::: section
::: titlepage
# []{#setting-up-and-configuring-nginx_deploying-web-servers-and-reverse-proxies.html#configuring-nginx-as-a-reverse-proxy-for-the-http-traffic_setting-up-and-configuring-nginx}将 NGINX 配置为 HTTP 流量的反向代理 {.title}
:::
您可以将 NGINX web 服务器配置为作为 HTTP
流量的反向代理。例如，您可以使用此功能将请求转发到远程服务器上的特定子目录。从客户端的角度来看，客户端从它所访问的主机加载内容。但是
NGINX 会从远程服务器加载实际内容并将其转发给客户端。
这个流程解释了如何将流向web
服务器上的`/example`{.literal}目录的流量转发到URL`https://example.com`{.literal}。
::: itemizedlist
**先决条件**
-   如 ["安装并准备
    NGINX"一节](#setting-up-and-configuring-nginx_deploying-web-servers-and-reverse-proxies.html#installing-and-preparing-nginx_setting-up-and-configuring-nginx "安装并准备 NGINX"){.xref}
    所述安装 NGINX。
-   可选：在反向代理上启用了 TLS 加密。
:::
::: orderedlist
**步骤**
1.  编辑`/etc/nginx/nginx.conf`{.literal}文件，并将以下设置添加到提供反向代理的`server`{.literal}块中：
    ``` literallayout
    location /example {
        proxy_pass https://example.com;
    }
    ```
    `location`{.literal}块定义了 NGINX
    将`/example`{.literal}目录中的所有请求传给`https://example.com`{.literal}。
2.  将`httpd_can_network_connect`{.literal}SELinux
    布尔值参数设置为`1`{.literal}，以便将 SELinux 设置为允许 NGINX
    转发流量：
    ``` literallayout
    # setsebool -P httpd_can_network_connect 1
    ```
3.  重启`nginx`{.literal}服务：
    ``` literallayout
    # systemctl restart nginx
    ```
:::
::: itemizedlist
**验证步骤**
-   使用浏览器连接到
    `http://host_name/example`{.literal}，就会显示`https://example.com`{.literal}的内容。
:::
:::
::: section
::: titlepage
# []{#setting-up-and-configuring-nginx_deploying-web-servers-and-reverse-proxies.html#configuring-nginx-as-an-http-load-balancer_setting-up-and-configuring-nginx}将 NGINX 配置为 HTTP 负载均衡器 {.title}
:::
您可以使用 NGINX 反向代理功能进行负载均衡流量。这个步骤描述了如何将
NGINX 配置为 HTTP
负载均衡器。它会根据服务器上的活跃连接的数量，将请求发送到不同服务器（发送到活跃连接数量最小的服务器）。如果两个服务器都不可用，这个过程还定义了第三个主机用于回退。
::: itemizedlist
**先决条件**
-   如 ["安装并准备
    NGINX"一节](#setting-up-and-configuring-nginx_deploying-web-servers-and-reverse-proxies.html#installing-and-preparing-nginx_setting-up-and-configuring-nginx "安装并准备 NGINX"){.xref}
    所述安装 NGINX。
:::
::: orderedlist
**步骤**
1.  编辑`/etc/nginx/nginx.conf`{.literal}文件并添加以下设置：
    ``` literallayout
    http {
        upstream backend {
            least_conn;
            server server1.example.com;
            server server2.example.com;
            server server3.example.com backup;
        }
        server {
            location / {
                proxy_pass http://backend;
            }
        }
    }
    ```
    在名为`backend`{.literal}的主机组中的`least_conn`{.literal}指令定义了
    NGINX
    将请求发送到`server1.example.com`{.literal}或`server2.example.com`{.literal}，具体取决于哪个主机具有最少的活动连接数。NGINX
    仅在其他两个主机不可用时使用`server3.example.com`{.literal}作为备份。
    `proxy_pass`{.literal}指令设置为`http://backend`{.literal} 时，NGINX
    充当反向代理，并使用`backend`{.literal}主机组根据该组的设置分发请求。
    您还可以指定其他方法，而不是`least_conn`{.literal}负载均衡方法：
    ::: itemizedlist
    -   不指定方法，使用轮询的方式在服务器间平均分发请求。
    -   `ip_hash`{.literal}根据从 IPv4
        地址的前三个八位字节或客户端的整个 IPv6
        地址计算的哈希值将来自一个客户端地址的请求发送到同一台服务器。
    -   `hash`{.literal}，根据用户定义的密钥（可以是字符串、变量或两者的组合）来确定服务器。用`consistent`{.literal}参数来进行配置，NGINX可根据用户定义的哈希密钥值向所有的服务器分发请求。
    -   `random`{.literal}将请求发送到随机挑选的服务器。
    :::
2.  重启`nginx`{.literal}服务：
    ``` literallayout
    # systemctl restart nginx
    ```
:::
:::
::: section
::: titlepage
# []{#setting-up-and-configuring-nginx_deploying-web-servers-and-reverse-proxies.html#_additional_resources_2}其他资源 {.title}
:::
::: itemizedlist
-   有关官方 NGINX 文档，请参考
    [https://nginx.org/en/docs/](https://nginx.org/en/docs/){.link}。请注意，红帽并不维护这个文档，并且可能无法与您安装的
    NGINX 版本一起使用。
-   [通过 PKCS #11
    配置应用程序以使用加密硬件](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/security_hardening/configuring-applications-to-use-cryptographic-hardware-through-pkcs-11_security-hardening){.link}.
:::
:::
:::
[]{#configuring-the-squid-caching-proxy-server_deploying-web-servers-and-reverse-proxies.html}
::: chapter
::: titlepage
# []{#configuring-the-squid-caching-proxy-server_deploying-web-servers-and-reverse-proxies.html#configuring-the-squid-caching-proxy-server_deploying-web-servers-and-reverse-proxies}第 3 章 配置 Squid 缓存代理服务器 {.title}
:::
Squid 是一个代理服务器，可缓存内容以减少带宽并更快地加载 Web
页面。本章论述了如何将 Squid 设置为 HTTP、HTTPS 和 FTP
协议的代理，以及验证和限制访问。
::: section
::: titlepage
# []{#configuring-the-squid-caching-proxy-server_deploying-web-servers-and-reverse-proxies.html#setting-up-squid-as-a-caching-proxy-without-authentication_configuring-the-squid-caching-proxy-server}将 Squid 设置为没有身份验证的缓存代理 {.title}
:::
这部分论述了 Squid
的基本配置在没有身份验证的情况下作为缓存代理。此流程会根据 IP
范围限制对代理的访问。
::: itemizedlist
**先决条件**
-   该流程假定 `/etc/squid/squid.conf`{.literal} 文件是由
    `squid`{.literal}
    软件包提供的。如果您在之前编辑了这个文件，请删除该文件并重新安装该软件包。
:::
::: orderedlist
**步骤**
1.  安装 `squid`{.literal} 软件包：
    ``` literallayout
    # dnf install squid
    ```
2.  编辑 `/etc/squid/squid.conf`{.literal} 文件：
    ::: orderedlist
    1.  调整 `localnet`{.literal}
        访问控制列表(ACL)，使其与允许使用代理的 IP 范围匹配：
        ``` literallayout
        acl localnet src 192.0.2.0/24
        acl localnet 2001:db8:1::/64
        ```
        默认情况下，`/etc/squid/squid.conf`{.literal} 文件包含
        `http_access allow localnet`{.literal} 规则，允许使用
        `localnet`{.literal} ACL 中指定的所有 IP
        范围内的代理。请注意，您必须在
        `http_access allow localnet`{.literal} 规则之前指定所有
        `localnet`{.literal} ACL。
        ::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
        ### 重要 {.title}
        删除所有与您的环境不匹配的现有的 `acl localnet`{.literal} 条目。
        :::
    2.  以下 ACL 存在于默认配置中，并将 `443`{.literal} 定义为使用 HTTPS
        协议的端口：
        ``` literallayout
        acl SSL_ports port 443
        ```
        如果用户也可以在其它端口上使用 HTTPS 协议，请为每个端口添加