上面的问题就不是问题了。
2.7 ++、--操作符
这绝对是一对让人头疼的兄弟。先来点简单的：
int i = 3；
（++i）+（++i）+（++i）；
表达式的值为多少？15 吗？16 吗？18 吗？其实对于这种情况，Ｃ语言标准并没有作
出规定。有点编译器计算出来为18，因为i 经过3 次自加后变为6，然后3 个6 相加得18；
而有的编译器计算出来为16（比如Visual C++6.0），先计算前两个i 的和，这时候i 自
加两次，2 个i 的和为10，然后再加上第三次自加的i 得16。其实这些没有必要辩论，用
到哪个编译器写句代码测试就行了。但不会计算出15 的结果来的。
++、--作为前缀，我们知道是先自加或自减，然后再做别的运算；但是作为后缀时，
到底什么时候自加、自减？这是很多初学者迷糊的地方。假设i=0，看例子：
A),j =(i++,i++,i++);
B),for（i=0;i0 时，我们希望保证r>=0 且r=0 且b>0 时，保证|r|=0。
后面部分的保证与性质2 或性质3 比较起来，限制性要弱得多。通过上面的解释，你是否
能准确算出2/(-2)和2%(-2)的值呢？
2.9 运算符的优先级
2.9.1 运算符的优先级表
C 语言的符号众多，由这些符号又组合成了各种各样的运算符。既然是运算符就一定有
其特定的优先级，下表就是C 语言运算符的优先级表：
优先级 运算符 名称或含义 使用形式 结合方向 说明
1 [] 数组下标 数组名[常量表达式]
() 圆括号 (表达式)/函数名(形参表)
. 成员选择（对 对象.成员名
左到右
象）
-> 成员选择（指 对象指针->成员名
针）
2 - 负号运算符 -表达式 单目运算符
(类型) 强制类型转换 (数据类型)表达式
右到左
++ 自增运算符 ++变量名/变量名++ 单目运算符
-- 自减运算符 --变量名/变量名-- 单目运算符
- 53 -
* 取值运算符 *指针变量 单目运算符
& 取地址运算符 &变量名 单目运算符
! 逻辑非运算符 !表达式 单目运算符
~ 按位取反运算 ~表达式 单目运算符
符
sizeof 长度运算符 sizeof(表达式)
3 / 除 表达式/表达式 双目运算符
* 乘 表达式*表达式 左到右 双目运算符
% 余数（取模） 整型表达式/整型表达式 双目运算符
4 + 加 表达式+表达式 双目运算符
左到右
- 减 表达式-表达式 双目运算符
5 > 右移 变量>>表达式 双目运算符
6 > 大于 表达式>表达式 双目运算符
>= 大于等于 表达式>=表达式 双目运算符
左到右
>= 右移后赋值 变量>>=表达式
&= 按位与后赋值 变量&=表达式
^= 按位异或后赋 变量^=表达式
值
|= 按位或后赋值 变量|=表达式
15 , 逗号运算符 表达式,表达式,… 从左向右顺序
左到右
运算
注：同一优先级的运算符，运算次序由结合方向所决定。
上表不容易记住。其实也用不着死记，用得多，看得多自然就记得了。也有人说不用记
这些东西，只要记住乘除法的优先级比加减法高就行了，别的地方一律加上括号。这在
你自己写代码的时候，确实可以，但如果是你去阅读和理解别人的代码呢？别人不一定都加
上括号了吧？所以，记住这个表，我个人认为还是很有必要的。
2.9.2 一些容易出错的优先级问题
上表中，优先级同为1 的几种运算符如果同时出现，那怎么确定表达式的优先级呢？这
是很多初学者迷糊的地方。下表就整理了这些容易出错的情况：
这些容易出错的情况，希望读者好好在编译器上调试调试，这样印象会深一些。一定要
多调试，光靠看代码，水平是很难提上来的。调试代码才是最长水平的。
第三章 预处理
往往我说今天上课的内容是预处理时，便有学生质疑：预处理不就是include 和
- 55 -
define么？这也用得着讲啊？。是的，非常值得讨论，即使是include 和define。但是预
处理仅限于此吗？远远不止。先看几个个常识性问题：
A),预处理是C 语言的一部分吗？
B),包含“#”号的都是预处理吗？
C),预处理指令后面都不需要加“；‛号吗？
不要急着回答，先看看ANSI 标准定义的C 语言预处理指令：
表（3.1） 预处理指令
另外ANSI 标准C 还定义了如下几个宏：
_LINE_ 表示正在编译的文件的行号
_FILE_ 表示正在编译的文件的名字
_DATE_ 表示编译时刻的日期字符串，例如： "25 Dec 2007"
_TIME_ 表示编译时刻的时间字符串，例如： "12:30:55"
_STDC_ 判断该文件是不是定义成标准C 程序
如果编译器不是标准的，则可能仅支持以上宏的一部分，或根本不支持。当然编译器也
有可能还提供其它预定义的宏名。注意：宏名的书写由标识符与两边各二条下划线构成。
相信很多初学者，甚至一些有经验的程序员都没有完全掌握这些内容，下面就一一详细
讨论这些预处理指令。
- 56 -
3.1 宏定义
3.1.1 数值宏常量
#define 宏定义是个演技非常高超的替身演员，但也会经常耍大牌的，所以我们用它
要慎之又慎。它可以出现在代码的任何地方，从本行宏定义开始，以后的代码就就都认识这
个宏了；也可以把任何东西定义成宏。因为编译器会在预编译的时候用真身替换替身，而在
我们的代码里面却又用常常用替身来帮忙。看例子：
#define PI 3.141592654
在此后的代码中你尽可以使用PI 来代替3.141592654，而且你最好就这么做。不然的
话，如果我要把PI 的精度再提高一些，你是否愿意一个一个的去修改这串数呢？你能保证
不漏不出错？而使用PI 的话，我们却只需要修改一次。这种情况还不是最要命的，我们再
看一个例子：
#define ERROR_POWEROFF -1
如果你在代码里不用ERROR_POWEROFF 这个宏而用-1，尤其在函数返回错误代码的时
候（往往一个开发一个系统需要定义很多错误代码）。恐怕上帝都无法知道-1 表示的是什