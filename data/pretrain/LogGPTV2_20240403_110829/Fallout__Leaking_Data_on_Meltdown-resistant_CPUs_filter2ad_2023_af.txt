successfully retired but whose data has not yet been written out to
the memory hierarchy. Hence, for our attacks to work, the stores
must still be outstanding in the core’s store buffer, and we are only
able to recover at most the k most recent stores, where k is the
store buffer size (cf. Appendix A for measurement of the store buffer
size).
Concurrent to our work, Intel’s analysis [41] of store buffer
leakage revealed that WTF may furthermore be abused to leak
stale data from older stores, even after the store data has been
committed to memory, and the corresponding store buffer entry
has been freed. This observation has profound consequences for
defenses, as merely draining outstanding stores by serializing the
instruction stream (e.g., using mfence) does not suffice to fully
mitigate store buffer leakage.
In Appendix A, we
Leaking Stores across HyperThreads.
measured the size of the store buffer. We discover that when both
logical CPUs on the same physical core are active, the store buffer
is statically partitioned between the threads. Otherwise, a thread
can use the entire store buffer. Consequently, one hardware thread
will not be able to read writes performed by another thread running
in parallel. However, Intel’s analysis [41] describes that leakage
may still occur when hardware threads go to sleep since stale store
buffer entries from the other thread are reused, or when hardware
threads wake up, and the store buffer is repartitioned again.
For operating systems
Operating System Countermeasures.
that deploy kernel-private page tables with KAISER [25], the Melt-
down countermeasure, every context switch also serializes the
instruction stream when writing to CR3. We noticed that this has
the unintended side-effect of draining outstanding stores from the
store buffer [38], thereby preventing the WTF attack variants pre-
sented in this work. However, we note that this does distinctly not
suffice as a general countermeasure against store buffer leakage
since Intel’s analysis [41] describes that stale values may still be
recovered from the store buffer until explicitly overwritten.
The necessary software countermeasure for CPUs without silicon-
level WTF mitigations is, therefore, to explicitly overwrite the entire
store buffer on every context switch between user and kernel. To
support this functionality, Intel [41] has released a microcode up-
date that modifies the semantics of the legacy VERW instruction to
overwrite (amongst others) the store buffer contents. Operating
system kernels are required to execute a VERW dummy instruction
(or equivalent legacy software code snippet [41]) upon every con-
text switch to eliminate the possibility of reading stale kernel stores
from user space.
Finally, we note that the above VERW countermeasure might not
prevent attacks based on Store-to-Leak. To the best of our knowl-
edge, no countermeasure has been suggested against the Store-to-
Leak attack variants presented in this paper.
Gadget Finding. While Speculative Fetch+Bounce improves the
usability of Spectre V1 gadgets, when attacking the kernel, we did
not find such gadgets in kernel code. We will leave finding ways
for detection gadgets in real-world applications for future work.
10 CONCLUSION
With the WTF shortcut, we demonstrate a novel Meltdown-type
effect exploiting a previously unexplored microarchitectural com-
ponent, namely the store buffer. The attack enables an unprivileged
attacker to leak recently written values from the operating system.
While WTF affects various processor generations, we showed that
also recently introduced hardware mitigations are not sufficient
and further mitigations need to be deployed.
We also show a way to leak the TLB state using the store buffer.
We showed how to break KASLR on fully patched machines in
42 µs, as well as recover address space information from JavaScript.
Next, we found that the Store-to-Leak TLB side channel facilitates
the exploitation of Spectre gadgets. Finally, our work shows that
the hardware fixes for Meltdown in recent CPUs are not sufficient.
ACKNOWLEDGMENTS
We want to thank the reviewers for their feedback, as well as Vedad
Hadžić from Graz University of Technology and Julian Stecklina
from Cyberus Technology for contributing ideas and experiments.
This work has been supported by the Austrian Research Pro-
motion Agency (FFG) via the project ESPRESSO, which is funded
by the Province of Styria and the Business Promotion Agencies
of Styria and Carinthia. It was also supported by the Austrian Re-
search Promotion Agency (FFG) via the K-project DeSSnet, which
is funded in the context of COMET – Competence Centers for Ex-
cellent Technologies by BMVIT, BMWFW, Styria and Carinthia.
It has also received funding from the European Research Coun-
cil (ERC) under the European Union’s Horizon 2020 research and
innovation programme (grant agreement No 681402), by the De-
fense Advanced Research Projects Agency (DARPA) under contract
FA8750-19-C-0531, and by the National Science Foundation under
grant CNS-1814406. Additional funding was provided by a generous
gift from Intel and AMD.
The research presented in this paper was partially supported by
the Research Fund KU Leuven. Jo Van Bulck is supported by a grant
of the Research Foundation – Flanders (FWO).
Any opinions, findings, and conclusions or recommendations ex-
pressed in this paper are those of the authors and do not necessarily
reflect the views of the funding parties.
A MEASURING THE STORE BUFFER SIZE
We now turn our attention to measuring the size of the store buffer.
Intel advertises that Skylake processors have 56 entries in the store
buffer [55]. We could not find any publications specifying the size
of the store buffer in newer processors, but as both Kaby Lake and
Coffee Lake R are not major architectures, we assume that the size
of the store buffers has not changed. As a final experiment in this
section, we now attempt to use the WTF shortcut to confirm this
assumption. To that aim, we perform a sequence of store operations,
each to a different address. We then use a faulty load aiming to
trigger a WTF shortcut and retrieve the value stored in the first
(oldest) store instruction. For each number of stores, we attempt
100 times at each of the 4096 page offsets, to a total of 409 600 per
number of stores. Figure 12 shows the likelihood of triggering the
WTF shortcut as a function of the number of stores for each of the
processor and configurations we tried. We see that we can trigger
the WTF shortcut provided that the sequence has up to 55 stores.
This number matches the known data for Skylake and confirms our
assumption that it has not changed in the newer processors.
The figure further shows that merely enabling hyperthreading
does not change the store buffer capacity available to the process.
However, running code on the second hyperthread of a core halves
the available capacity, even if the code does not perform any store.
This confirms that the store buffers are statically partitioned be-
tween the hyperthreads [42], and also shows that partitioning takes
effect only when both hyperthreads are active.
REFERENCES
[1] 2018. Spectre Variant 4. https://bugs.chromium.org/p/project-zero/issues/detail?
id=1528
[2] 2019. https://bugs.chromium.org/p/chromium/issues/detail?id=821270
[9] Atri Bhattacharyya, Alexandra Sandulescu, Matthias Neugschwandtner, Alessan-
dro Sorniotti, Babak Falsafi, Mathias Payer, and Anil Kurmus. 2019. SMoTher-
Spectre: exploiting speculative execution through port contention. In CCS.
[10] Claudio Canella, Jo Van Bulck, Michael Schwarz, Moritz Lipp, Benjamin von Berg,
Philipp Ortner, Frank Piessens, Dmitry Evtyushkin, and Daniel Gruss. 2019. A
Systematic Evaluation of Transient Execution Attacks and Defenses. In USENIX
Security Symposium.
[11] Guoxing Chen, Sanchuan Chen, Yuan Xiao, Yinqian Zhang, Zhiqiang Lin, and
Ten H Lai. 2019. SgxPectre Attacks: Stealing Intel Secrets from SGX Enclaves via
Speculative Execution. In EuroS&P.
//lwn.net/Articles/738975/
[12] Jonathan Corbet. 2017. KAISER: hiding the kernel from user space.
[13] Jonathan Corbet. 2018. Meltdown strikes back: the L1 terminal fault vulnerability.
https:
https://lwn.net/Articles/762570/
[14] Victor Costan and Srinivas Devadas. 2016. Intel SGX explained. (2016).
[15] Ian Cutress. 2018. Analyzing Core i9-9900K Performance with Spectre and
Meltdown Hardware Mitigations. https://www.anandtech.com/show/13659/
analyzing-core-i9-9900k-performance-with-spectre-and-meltdown-hardware-
mitigations
[16] Ian Cutress. 2018. Spectre and Meltdown in Hardware: Intel Clarifies Whiskey
Lake and Amber Lake. https://www.anandtech.com/show/13301/spectre-and-
meltdown-in-hardware-intel-clarifies-whiskey-lake-and-amber-lake
[17] Vladimir Davydov. 2015. Idle memory tracking. https://lwn.net/Articles/643578/
[18] Agner Fog. 2016. The microarchitecture of Intel, AMD and VIA CPUs: An
optimization guide for assembly programmers and compiler makers.
[19] Daniel Genkin, Luke Valenta, and Yuval Yarom. 2017. May the Fourth Be With You:
A Microarchitectural Side Channel Attack on Several Real-World Applications of
Curve25519. In CCS. 845–858.
[20] Andy Glew, Glenn Hinton, and Haitham Akkary. 1997. Method and appara-
tus for performing page table walks in a microprocessor capable of processing
speculative instructions. US Patent 5,680,565.
[21] Ben Gras, Kaveh Razavi, Herbert Bos, and Cristiano Giuffrida. 2018. Translation
Leak-aside Buffer: Defeating Cache Side-channel Protections with TLB Attacks.
In USENIX Security Symposium.
ASLR on the Line: Practical Cache Attacks on the MMU. In NDSS.
[22] Ben Gras, Kaveh Razavi, Erik Bosman, Herbert Bos, and Cristiano Giuffrida. 2017.
[25] Daniel Gruss, Moritz Lipp, Michael Schwarz, Richard Fellner, Clémentine Maurice,
[23] Brendan Gregg. 2018. KPTI/KAISER Meltdown Initial Performance Regressions.
[24] Daniel Gruss, Erik Kraft, Trishita Tiwari, Michael Schwarz, Ari Trachtenberg,
Jason Hennessey, Alex Ionescu, and Anders Fogh. 2019. Page Cache Attacks. In
CCS.
and Stefan Mangard. 2017. KASLR is Dead: Long Live KASLR. In ESSoS.
[26] Daniel Gruss, Moritz Lipp, Michael Schwarz, Daniel Genkin, Jonas Juffinger, Sioli
O’Connell, Wolfgang Schoechl, and Yuval Yarom. 2018. Another Flip in the Wall
of Rowhammer Defenses. In S&P.
[27] Daniel Gruss, Clémentine Maurice, Anders Fogh, Moritz Lipp, and Stefan Man-
gard. 2016. Prefetch Side-Channel Attacks: Bypassing SMAP and Kernel ASLR.
In CCS.
Flush+Flush: A Fast and Stealthy Cache Attack. In DIMVA.
[29] Daniel Gruss, Raphael Spreitzer, and Stefan Mangard. 2015. Cache Template
Attacks: Automating Attacks on Inclusive Last-Level Caches. In USENIX Security
Symposium.
[30] Le Guan, Jingqiang Lin, Bo Luo, Jiwu Jing, and Jing Wang. 2015. Protecting
private keys against memory disclosure attacks using hardware transactional
memory. In S&P.
Set – Rev 3.01.
[28] Daniel Gruss, Clémentine Maurice, Klaus Wagner, and Stefan Mangard. 2016.
[31] Shay Gueron. 2012. Intel Advanced Encryption Standard (Intel AES) Instructions
[32] Michael Austin Halcrow. 2005. eCryptfs: An Enterprise-class Encrypted Filesys-
[33] Sebastien Hily, Zhongying Zhang, and Per Hammarlund. 2009. Resolving False
tem for Linux. In Linux Symposium.
Dependencies of Speculative Load Instructions. US Patent 7.603,527.
[34] Rodney E Hooker and Colin Eddy. 2013. Store-to-load forwarding based on
load/store address computation source information comparisons. US Patent
8,533,438.
[35] Jann Horn. 2018. speculative execution, variant 4: speculative store bypass.
[36] Ralf Hund, Carsten Willems, and Thorsten Holz. 2013. Practical Timing Side
[n.d.].
Channel Attacks against Kernel Space ASLR. In S&P.
https://www.intel.com/content/www/us/en/architecture-and-technology/
engineering-new-protections-into-hardware.html
Side Channel Mitigation by Product CPU Model.
Intel 64 and IA-32 Architectures Software Developer’s Manual,
[38] Intel. 2016.
Volume 3 (3A, 3B & 3C): System Programming Guide.
[39] Intel. 2018.
Intel Analysis of Speculative Execution Side Chan-
https://software.intel.com/security-software-guidance/api-
nels.
app/sites/default/files/336983-Intel-Analysis-of-Speculative-Execution-
Side-Channels-White-Paper.pdf
[40] Intel. 2018. Speculative Execution Side Channel Mitigations. Revision 3.0.
[37] Intel.
Figure 12: Measuring the size of the store buffer on Kaby
Lake and Coffee Lake machines. In the experiment, we per-
form multiple writes to the store buffer and subsequently
measure the probability of retrieving the value of the first
(oldest) store. The results agree with 56 entries in the store
buffer and with a static partitioning between hyperthreads.
[3] Jeffery M Abramson, Haitham Akkary, Andrew F Glew, Glenn J Hinton, Kris G
Konigsfeld, and Paul D Madland. 2002. Method and apparatus for performing a
store operation. US Patent 6,378,062.
[4] Jeffrey M Abramson, Haitham Akkary, Andrew F Glew, Glenn J Hinton, Kris G
Konigsfeld, Paul D Madland, David B Papworth, and Michael A Fetterman. 1998.
Method and Apparatus for Dispatching and Executing a Load Operation to
Memory. US Patent 5,717,882.
[5] ARM Limited. 2018. Vulnerability of Speculative Processors to Cache Timing
Side-Channel Mechanism.
[6] Naomi Benger, Joop van de Pol, Nigel P Smart, and Yuval Yarom. 2014. Ooh Aah...
[7] Daniel J. Bernstein. 2004. Cache-Timing Attacks on AES.
Just a Little Bit: A small amount of side channel can go a long way. In CHES.
antiforgery/cachetiming-20050414.pdf
http://cr.yp.to/
[8] Daniel J. Bernstein, Joachim Breitner, Daniel Genkin, Leon Groot Bruinderink,
Nadia Heninger, Tanja Lange, Christine van Vredendaal, and Yuval Yarom. 2017.
Sliding Right into Disaster: Left-to-Right Sliding Windows Leak. In CHES. 555–
576.
 0 10 20 30 40 50 60 70 80 90 100 0 5 10 15 20 25 30 35 40 45 50 55 60 65 70Reads of Oldest Write (%)Number Of WritesSL HT oﬀSL HT onSL use HT 0 10 20 30 40 50 60 70 80 90 100 0 5 10 15 20 25 30 35 40 45 50 55 60 65 70Reads of Oldest Write (%)Number Of WritesKL HT oﬀKL HT onKL use HT 0 10 20 30 40 50 60 70 80 90 100 0 5 10 15 20 25 30 35 40 45 50 55 60 65 70Reads of Oldest Write (%)Number Of WritesCL-R HT oﬀCL-R HT onCL-R use HT[41] Intel. 2019. Deep Dive: Intel Analysis of Microarchitectural Data Sam-
https://software.intel.com/security-software-guidance/insights/deep-
pling.
dive-intel-analysis-microarchitectural-data-sampling
[42] Intel. 2019. Intel 64 and IA-32 Architectures Optimization Reference Manual.
[43] Gorka Irazoqui, Mehmet Sinan Inci, Thomas Eisenbarth, and Berk Sunar. 2014.
[46] Vladimir Kiriansky and Carl Waldspurger. 2018. Speculative Buffer Overflows:
[45] Yeongjin Jang, Sangho Lee, and Taesoo Kim. 2016. Breaking Kernel Address
Wait a minute! A fast, Cross-VM attack on AES. In RAID’14.
[44] Saad Islam, Ahmad Moghimi, Ida Bruhns, Moritz Krebbel, Berk Gulmezoglu,
Thomas Eisenbarth, and Berk Sunar. 2019. SPOILER: Speculative Load Hazards
Boost Rowhammer and Cache Attacks. In USENIX Security Symposium.
Space Layout Randomization with Intel TSX. In CCS.
Attacks and Defenses. arXiv:1807.03757 (2018).
[47] Paul Kocher, Jann Horn, Anders Fogh, Daniel Genkin, Daniel Gruss, Werner Haas,
Mike Hamburg, Moritz Lipp, Stefan Mangard, Thomas Prescher, Michael Schwarz,
and Yuval Yarom. 2019. Spectre Attacks: Exploiting Speculative Execution. In
S&P.
[48] Esmaeil Mohammadian Koruyeh, Khaled Khasawneh, Chengyu Song, and Nael
Abu-Ghazaleh. 2018. Spectre Returns! Speculation Attacks using the Return
Stack Buffer. In WOOT.
[49] Moritz Lipp, Daniel Gruss, Michael Schwarz, David Bidner, Clémentine Maurice,
and Stefan Mangard. 2017. Practical Keystroke Timing Attacks in Sandboxed
JavaScript. In ESORICS.
[50] Moritz Lipp, Daniel Gruss, Raphael Spreitzer, Clémentine Maurice, and Stefan
Mangard. 2016. ARMageddon: Cache Attacks on Mobile Devices. In USENIX
Security Symposium.
[51] Moritz Lipp, Michael Schwarz, Daniel Gruss, Thomas Prescher, Werner Haas,
Anders Fogh, Jann Horn, Stefan Mangard, Paul Kocher, Daniel Genkin, Yuval
Yarom, and Mike Hamburg. 2018. Meltdown: Reading Kernel Memory from User
Space. In USENIX Security Symposium.
Level Cache Side-Channel Attacks are Practical. In S&P.
SubscriberLink/741878/eb6c9d3913d7cb2b/
[53] LWN. 2017. The current state of kernel page-table isolation. https://lwn.net/
[52] Fangfei Liu, Yuval Yarom, Qian Ge, Gernot Heiser, and Ruby B. Lee. 2015. Last-
[54] G. Maisuradze and C. Rossow. 2018. ret2spec: Speculative Execution Using Return
Technology Insight:
[55] Julius Mandelblat.
Stack Buffers. In CCS.
Intel’s Next Genera-
tion Microarchitecture Code Name Skylake.
In Intel Developer Forum
(IDF15). https://en.wikichip.org/w/images/8/8f/Technology_Insight_Intel%E2%
80%99s_Next_Generation_Microarchitecture_Code_Name_Skylake.pdf
[56] Clémentine Maurice, Manuel Weber, Michael Schwarz, Lukas Giner, Daniel Gruss,
Carlo Alberto Boano, Stefan Mangard, and Kay Römer. 2017. Hello from the
Other Side: SSH over Robust Cache Covert Channels in the Cloud. In NDSS.
[57] Microsoft. 2019. Lock your Windows 10 PC automatically when you step away
from it. https://support.microsoft.com/en-us/help/4028111/windows-lock-your-
windows-10-pc-automatically-when-you-step-away-from
[58] John Monaco. 2018. SoK: Keylogging Side Channels. In S&P.
[59] NIST. 2001. FIPS 197, Advanced Encryption Standard (AES).
[60] O’Keeffe, Dan and Muthukumaran, Divya and Aublin, Pierre-Louis and Kelbert,
Florian and Priebe, Christian and Lind, Josh and Zhu, Huanzhou and Pietzuch,
Peter. 2018. Spectre attack against SGX enclave.
[61] Yossef Oren, Vasileios P Kemerlis, Simha Sethumadhavan, and Angelos D
Keromytis. 2015. The Spy in the Sandbox: Practical Cache Attacks in JavaScript
[n.d.].
[62] Dag Arne Osvik, Adi Shamir, and Eran Tromer. 2006. Cache Attacks and Coun-
and their Implications. In CCS.
termeasures: the Case of AES. In CT-RSA.
[63] Colin Percival. 2005. Cache missing for fun and profit. In BSDCan.
[64] Peter Pessl, Leon Groot Bruinderink, and Yuval Yarom. 2017. To BLISS-B or not
to be: Attacking strongSwan’s Implementation of Post-Quantum Signatures. In
CCS. 1843–1855.
[65] Peter Pessl, Daniel Gruss, Clémentine Maurice, Michael Schwarz, and Stefan
Mangard. 2016. DRAMA: Exploiting DRAM Addressing for Cross-CPU Attacks.
In USENIX Security Symposium.
[66] Thomas Ristenpart, Eran Tromer, Hovav Shacham, and Stefan Savage. 2009.
Hey, You, Get Off of My Cloud: Exploring Information Leakage in Third-Party
Compute Clouds. In CCS.
[67] Michael Schwarz, Moritz Lipp, Daniel Gruss, Samuel Weiser, Clémentine Maurice,
Raphael Spreitzer, and Stefan Mangard. 2018. KeyDrown: Eliminating Software-
Based Keystroke Timing Side-Channel Attacks. In NDSS.
[68] Michael Schwarz, Moritz Lipp, Daniel Moghimi, Jo Van Bulck, Julian Steck-
lina, Thomas Prescher, and Daniel Gruss. 2019. ZombieLoad: Cross-Privilege-
Boundary Data Sampling. In CCS.
[69] Michael Schwarz, Clémentine Maurice, Daniel Gruss, and Stefan Mangard. 2017.
Fantastic Timers and Where to Find Them: High-Resolution Microarchitectural
Attacks in JavaScript. In FC.
[70] Michael Schwarz, Martin Schwarzl, Moritz Lipp, and Daniel Gruss. 2019. Net-
Spectre: Read Arbitrary Memory over Network. In ESORICS.
[71] Michael Schwarz, Samuel Weiser, Daniel Gruss, Clémentine Maurice, and Stefan
Mangard. 2017. Malware Guard Extension: Using SGX to Conceal Cache Attacks.
In DIMVA.
[72] Julian Stecklina and Thomas Prescher. 2018. LazyFP: Leaking FPU Register State
using Microarchitectural Side-Channels. arXiv preprint arXiv:1806.07480 (2018).
[73] Caroline Trippel, Daniel Lustig, and Margaret Martonosi. 2018. MeltdownPrime
and SpectrePrime: Automatically-Synthesized Attacks Exploiting Invalidation-
Based Coherence Protocols. arXiv:1802.03802 (2018).
[74] Jo Van Bulck, Marina Minkin, Ofir Weisse, Daniel Genkin, Baris Kasikci, Frank
Piessens, Mark Silberstein, Thomas F. Wenisch, Yuval Yarom, and Raoul Strackx.
2018. Foreshadow: Extracting the Keys to the Intel SGX Kingdom with Transient
Out-of-Order Execution. In USENIX Security Symposium.
[75] Jo Van Bulck, Frank Piessens, and Raoul Strackx. 2017. SGX-Step: A practical
attack framework for precise enclave execution control. In Workshop on System
Software for Trusted Execution.
[76] Stephan van Schaik, Alyssa Milburn, Sebastian Österlund, Pietro Frigo, Giorgi
Maisuradze, Kaveh Razavi, Herbert Bos, and Cristiano Giuffrida. 2019. RIDL:
Rogue In-flight Data Load. In S&P.
Eviction Sets. In S&P.
[78] Ofir Weisse, Jo Van Bulck, Marina Minkin, Daniel Genkin, Baris Kasikci, Frank
Piessens, Mark Silberstein, Raoul Strackx, Thomas F Wenisch, and Yuval Yarom.
[n.d.]. Foreshadow-NG: Breaking the Virtual Memory Abstraction with Transient
Out-of-Order Execution. https://foreshadowattack.eu/foreshadow-NG.pdf
[77] Pepe Vila, Boris Köpf, and Jose Morales. 2019. Theory and Practice of Finding
[79] Y. Xu, W. Cui, and M. Peinado. 2015. Controlled-Channel Attacks: Deterministic
[80] Yuval Yarom and Katrina Falkner. 2014. Flush+Reload: a High Resolution, Low
Side Channels for Untrusted Operating Systems. In S&P.
Noise, L3 Cache Side-Channel Attack. In USENIX Security Symposium.
Tenant Side-Channel Attacks in PaaS Clouds. In CCS.
[81] Yinqian Zhang, Ari Juels, Michael K. Reiter, and Thomas Ristenpart. 2014. Cross-