Traceback (most recent call last):
File "C:/test3784.py", line 4, in 
Python编程快速上手——让繁琐工作自动化
print(eggs)
NameError: name 'eggs' is not defined
发生错误是因为，eggs变量只属于spam()调用所创建的局部作用域。在程序执
行从spam返回后，该局部作用域就被销毁了，不再有名为eggs的变量。所以当程
序试图执行print(eggs)，Python就报错，说eggs没有定义。你想想看，这是有意义
的。当程序执行在全局作用域中时，不存在局部作用域，所以不会有任何局部变量。
这就是为什么只有全局变量能用于全局作用域。
3.5.2 局部作用域不能使用其他局部作用域内的变量
一个函数被调用时，就创建了一个新的局部作用域，这包括一个函数被另一个
函数调用时的情况。请看以下代码：
def spam():
 eggs = 99
 bacon()
 print(eggs)
def bacon():
ham = 101
 eggs = 0
 s pam()
在程序开始运行时，spam()函数被调用，创建了一个局部作用域。局部变量
eggs被赋值为99。然后bacon()函数被调用，创建了第二个局部作用域。多个局
部作用域能同时存在。在这个新的局部作用域中，局部变量ham被赋值为101。局
部变量eggs（与spam()的局部作用域中的那个变量不同）也被创建，并赋值为0。
当bacon()返回时，这次调用的局部作用域被销毁。程序执行在spam()函数中继
续，打印出eggs的值。因为spam()调用的局部作用域仍然存在，eggs变量被赋值
为99。这就是程序的打印输出。
要点在于，一个函数中的局部变量完全与其他函数中的局部变量分隔开来。
3.5.3 全局变量可以在局部作用域中读取
请看以下程序：
def spam():
print(eggs)
eggs = 42
spam()
print(eggs)
因为在 spam()函数中，没有变元名为 eggs，也没有代码为 eggs 赋值，所以当
spam()中使用 eggs 时，Python 认为它是对全局变量 eggs 的引用。这就是前面的程
序运行时打印出42的原因。
第3章 函数
3.5.4 名称相同的局部变量和全局变量
要想生活简单，就要避免局部变量与全局变量或其他局部变量同名。但在技术
上，在Python中让局部变量和全局变量同名是完全合法的。为了看看实际发生的情
况，请在文件编辑器中输入以下代码，并保存为sameName.py：
def spam():
 eggs = 'spam local'
print(eggs) # prints 'spam local'
def bacon():
 eggs = 'bacon local'
print(eggs) # prints 'bacon local'
spam()
print(eggs) # prints 'bacon local'
 eggs = 'global'
bacon()
p rint(eggs) # prints 'global'
运行该程序，输出如下：
bacon local
spam local
bacon local
global
在这个程序中，实际上有3个不同的变量，但令人迷惑的是，它们都名为eggs。
这些变量是：
名为eggs的变量，存在于spam()被调用时的局部作用域；
名为eggs的变量，存在于bacon()被调用时的局部作用域；
名为eggs的变量，存在于全局作用域。
因为这3个独立的变量都有相同的名字，追踪某一个时刻使用的是哪个变量，
可能比较麻烦。这就是应该避免在不同作用域内使用相同变量名的原因。
3.6 global 语句
如果需要在一个函数内修改全局变量，就使用global语句。如果在函数的顶部
有global eggs这样的代码，它就告诉Python，“在这个函数中，eggs指的是全局变
量，所以不要用这个名字创建一个局部变量。”例如，在文件编辑器中输入以下代
码，并保存为sameName2.py：
def spam():
 global eggs
 eggs = 'spam'
eggs = 'global'
spam()
p rint(eggs)
Python编程快速上手——让繁琐工作自动化
运行该程序，最后的print()调用将输出：
spam
因为eggs在spam()的顶部被声明为global，所以当eggs被赋值为'spam'时，
赋值发生在全局作用域的spam上。没有创建局部spam变量。
有4条法则，来区分一个变量是处于局部作用域还是全局作用域：
1．如果变量在全局作用域中使用（即在所有函数之外），它就总是全局变量。
2．如果在一个函数中，有针对该变量的global语句，它就是全局变量。
3．否则，如果该变量用于函数中的赋值语句，它就是局部变量。
4．但是，如果该变量没有用在赋值语句中，它就是全局变量。
为了更好地理解这些法则，这里有一个例子程序。在文件编辑器中输入以下代
码，并保存为sameName3.py：
def spam():
 global eggs
eggs = 'spam' # this is the global
def bacon():
 eggs = 'bacon' # this is a local
def ham():
 print(eggs) # this is the global
eggs = 42 # this is the global
spam()
print(eggs)
在 spam()函数中，eggs 是全局 eggs 变量，因为在函数的开始处，有针对 eggs
变量的global语句。在bacon()中，eggs是局部变量，因为在该函数中有针对它的
赋值语句。在 ham()中，eggs 是全局变量，因为在这个函数中，既没有赋值语
句，也没有针对它的global语句。如果运行sameName3.py，输出将是：
spam
在一个函数中，一个变量要么总是全局变量，要么总是局部变量。函数中的代码
没有办法先使用名为eggs的局部变量，稍后又在同一个函数中使用全局eggs变量。
如果想在一个函数中修改全局变量中存储的值，就必须对该变量使用 global
语句。
在一个函数中，如果试图在局部变量赋值之前就使用它，像下面的程序这样，Python
就会报错。为了看到效果，请在文件编辑器中输入以下代码，并保存为sameName4.py：
def spam():
print(eggs) # ERROR!
 eggs = 'spam local'
 eggs = 'global'
s pam()
运行前面的程序，会产生出错信息。
第3章 函数
Traceback (most recent call last):
File "C:/test3784.py", line 6, in 
spam()
File "C:/test3784.py", line 2, in spam
print(eggs) # ERROR!
UnboundLocalError: local variable 'eggs' referenced before assignment
发生这个错误是因为，Python看到spam()函数中有针对eggs的赋值语句，因
此认为eggs变量是局部变量。但是因为print(eggs)的执行在eggs赋值之前，局部变
量eggs并不存在。Python不会退回到使用全局eggs变量。
3.7 异常处理
到目前为止，在Python 程序中遇到错误，或“异常”，意味着整个程序崩溃。
你不希望这发生在真实世界的程序中。相反，你希望程序能检测错误，处理它们，
然后继续运行。
例如，考虑下面的程序，它有一个“除数为零”的错误。打开一个新的文件编
辑器窗口，输入以下代码，并保存为zeroDivide.py：
def spam(divideBy):
return 42 / divideBy
print(spam(2))
print(spam(12))
print(spam(0))
print(spam(1))
我们已经定义了名为 spam 的函数，给了它一个变元，然后打印出该函数带各
种参数的值，看看会发生什么情况。下面是运行前面代码的输出：
21.0
3.5
Traceback (most recent call last):
File "C:/zeroDivide.py", line 6, in 
print(spam(0))
File "C:/zeroDivide.py", line 2, in spam
return 42 / divideBy
ZeroDivisionError: division by zero
当试图用一个数除以零时，就会发生 ZeroDivisionError。根据错误信息中给出
的行号，我们知道spam()中的return语句导致了一个错误。
函数作为“黑盒”
通常，对于一个函数，你要知道的就是它的输入值（变元）和输出值。
你并非总是需要加重自己的负担，弄清楚函数的代码实际是怎样工作的。
如果以这种高层的方式来思考函数，通常大家会说，你将该函数看成是一
个黑盒。
这个思想是现代编程的基础。本书后面的章节将向你展示一些模块，其中
Python编程快速上手——让繁琐工作自动化
的函数是由其他人编写的。尽管你在好奇的时候也可以看一看源代码，但为了
能使用它们，你并不需要知道它们是如何工作的。而且，因为鼓励在编写函数
时不使用全局变量，你通常也不必担心函数的代码会与程序的其他部分发生交
叉影响。
错误可以由try和except语句来处理。那些可能出错的语句被放在try子句中。
如果错误发生，程序执行就转到接下来的except子句开始处。
可以将前面除数为零的代码放在一个 try子句中，让 except 子句包含代码，来
处理该错误发生时应该做的事。
def spam(divideBy):
try:
return 42 / divideBy
except ZeroDivisionError:
print('Error: Invalid argument.')
print(spam(2))
print(spam(12))
print(spam(0))
print(spam(1))
如果在 try子句中的代码导致一个错误，程序执行就立即转到 except 子句的代
码。在运行那些代码之后，执行照常继续。前面程序的输出如下：
21.0
3.5
Error: Invalid argument.
None
42.0
请注意，在函数调用中的 try 语句块中，发生的所有错误都会被捕捉。请考虑
以下程序，它的做法不一样，将spam()调用放在语句块中：
def spam(divideBy):
return 42 / divideBy
try:
print(spam(2))
print(spam(12))
print(spam(0))
print(spam(1))
except ZeroDivisionError:
print('Error: Invalid argument.')
该程序运行时，输出如下：
21.0
3.5
Error: Invalid argument.
print(spam(1))从未被执行是因为，一旦执行跳到except子句的代码，就不会回
第3章 函数
到try子句。它会继续照常向下执行。
3.8 一个小程序：猜数字
到目前为止，前面展示的小例子适合于介绍基本概念。现在让我们看一看，如
何将所学的知识综合起来，编写一个更完整的程序。在本节中，我将展示一个简单
的猜数字游戏。在运行这个程序时，输出看起来像这样：
I am thinking of a number between 1 and 20.
Take a guess.
10
Your guess is too low.
Take a guess.
15
Your guess is too low.