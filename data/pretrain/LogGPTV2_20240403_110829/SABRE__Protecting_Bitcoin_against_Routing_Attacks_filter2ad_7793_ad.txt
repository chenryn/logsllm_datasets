### Segment Requests and Protection Mechanisms

Each of the 23 segment IDs is requested sequentially. For example, the client first requests the segment with ID:1 of the block with hash #5, then the segment with ID:2, and so on. If either the GET SEG or the SEG response is lost, the client will re-request the corresponding segment. To prevent abuse, the switch bans clients that repeatedly request the same block. This is enforced by a heavy-hitter detector called SentLimit, which can operate efficiently with just 80KB of memory.

### Network Architecture Evaluation

In this section, we evaluate SABRE's effectiveness in protecting Bitcoin against routing attacks. Specifically, we address the following questions:
- How effective is SABRE in preventing routing attacks targeting the entire network and individual clients?
- How does SABRE's effectiveness change with the size and connectivity of the SABRE network?
- How does SABRE compare to other relay networks and known countermeasures?

#### Key Findings
- A small deployment of 6 single-connected SABRE nodes can prevent 94% of ASes from isolating more than 10% of Bitcoin clients.
- A larger deployment of 30 relays, each 5-connected, can prevent over 99% of ASes from isolating more than 20% of Bitcoin clients.
- Existing relay networks, such as Falcon [3] and FIBRE [2], offer no protection against routing attacks.
- SABRE provides a security level comparable to hosting all clients in /24 prefixes, an effective but impractical countermeasure.

### Methodology

#### Datasets
Our evaluation combines routing and Bitcoin information. We use the AS-level topology and policies provided by CAIDA [1] and collected in May 2018. The routing tree algorithm [31] computes forwarding paths between ASes, assuming the attacker's advertisements are prioritized in BGP tie-breaking (worst-case for SABRE). Bitcoin client IPs are from [8], and existing relay node IPs are from [2] and [3], both collected in May 2018. We merge these datasets by associating each Bitcoin IP with the AS advertising the most-specific prefix covering it, using routes from RIPE BGP collectors [4].

### SABRE Security Efficiency

**Figure 8:** Less than 2.5% of ASes can disconnect more than 15% of clients (N: number of deployed relays; k: relay-graph connectivity; Tie breaks in favor of the attacker).

To quantify the likelihood of a random adversary disconnecting multiple clients, we measure the fraction of clients an AS can isolate. **Figure 8** shows the protection level of the Bitcoin network based on the size (N) and internal connectivity (k) of the SABRE network. For N = 20 and k = 1, less than 3% of ASes can isolate 15% of Bitcoin clients. In contrast, over 90% of clients can be isolated by any AS in the current network [17].

The trade-off between the number of possible attackers and partition sizes depends on the size and connectivity of SABRE. Increasing the number of deployed nodes reduces the chances of successful traffic diversion. Decreasing intra-connectivity requirements (i.e., lower k) allows for a larger set of relays, enhancing SABRE's effectiveness. For example, a 6-relay SABRE with full-mesh connectivity (5-connected graph) is extremely hard to partition, but it allows more ASes to disconnect a larger part of Bitcoin clients. Conversely, a 1-connected SABRE allows fewer attackers to perform severe attacks, but the network itself is more vulnerable to single link failures.

**SABRE Protects Against Network-Wide Partitions**
To evaluate SABRE's effectiveness against adversaries, we consider the worst-case scenario where tie-breaking systematically picks paths originated by relay ASes (see Appendix B for results).

**SABRE Protects Most Individual Clients**
To assess how effectively SABRE protects individual clients, we measure the likelihood of a random AS-level adversary preventing Bitcoin clients from reaching all relay nodes.

**Figure 9:** 85% of clients are protected against 96% of possible attackers (Tie breaks in favor of the attacker).

**Figure 10:** SABRE is far more secure than deployed relays and very close to the unemployable alternative countermeasure of hosting all clients in /24 (Tie breaks in favor of the attacker).

**Figure 10** shows that 80% of clients are protected from 96% of AS-level adversaries with a SABRE network of only 6 5-connected nodes. There is a trade-off between secure intra-connectivity and client coverage. For example, a 6-node 1-connected SABRE protects 90% of Bitcoin clients from 92.5% of ASes, while a fully connected 6-node SABRE protects from 89.5% of ASes. Increasing connectivity from k = 3 to k = 5 does not significantly decrease the number of protected clients but makes disconnecting the relay network almost impossible.

### SABRE Efficiency Compared to Existing Relay Networks

We compare SABRE to FIBRE [2] and Falcon [3] in terms of their effectiveness against routing attacks. SABRE outperforms both for three key reasons:

1. **Vulnerability to Longer-Prefix Hijacks:** All relay nodes of FIBRE and Falcon are hosted in prefixes shorter than /24, making them vulnerable to hijacking.
2. **Poor Connectivity:** Even if hosted in /24 prefixes, FIBRE and Falcon relays can still be disconnected by same-prefix advertisements.
3. **Poor Coverage:** FIBRE and Falcon provide worse coverage, allowing for more network-wide and targeted attacks.

**Figure 11:** Falcon does not protect many clients as it is centralized to only two ASes. SABRE performs on-par with hosting all clients in /24 while being deployable (Tie breaks in favor of the attacker).

### SABRE Efficiency Compared to Hosting All Clients in /24 Prefixes

We compare SABRE to the most effective countermeasure: hosting all Bitcoin clients in /24 prefixes [17]. While effective, this countermeasure is impractical due to ISP cooperation and increased routing table sizes. SABRE offers comparable protection and is easily deployable.

**Figure 11** compares SABRE to hosting all clients in /24 prefixes, showing similar protection levels with SABRE being slightly better at times. This is because SABRE can place relays in any AS, while the /24 approach is limited to the actual distribution of Bitcoin clients.

### Software/Hardware Co-Design Feasibility

We validated the feasibility of our co-design by testing it in practice using regular and modified Bitcoin clients. Our implementation and testbed include a controller and clients implemented as extensions of the default Bitcoin client version 0.16, with the switch implemented in P4 code. Our prototype runs on Mininet [40] and uses BMV2 [14] to emulate the switch.

**Figure 12:** A block can be successfully transmitted from node A to node C via SABRE after validation by the controller.

**Timing Analysis:**
- Node B gets the block from node A: 269ms
- Node B sends ADV to switch: 14ms
- Node B connects to Controller: 14ms
- Controller updates the switch: 7s
- Controller advertises block to C: 16ms
- Node C gets block in segments: 7.22s

**Memory Requirements:**
- Blacklist: 1 million entries
- PeerList: 100k entries
- Whitelist: 100 entries
- Total memory: <5MB

### Deployability and Incentives

SABRE is both practical and partially deployable. A full deployment requires hosting relays in specific ASes and equipping relay locations with hardware. Partial deployment is less expensive and offers benefits to early adopters, even individuals.