### Touchwin 函数
#### 动手试试：子窗口

1. **初始化代码部分**：
   首先，我们使用一些文字来初始化基本窗口的显示情况。请确保包含必要的头文件并定义常量 `NUM_NAMES`。

   ```c
   #include <unistd.h>
   #include <ncurses.h>

   #define NUM_NAMES 14

   int main() {
       WINDOW *sub_window_ptr;
       int x_loc, y_loc, counter;
       
       // 初始化屏幕
       initscr();

       // 定义名字数组
       char *names[NUM_NAMES] = {"David Hudson", "Aralev Crila", "Jane Jones", 
                                  "Ciara Loughran", "Peter Bradley", "Lancy Innocenzi", 
                                  "Abdul Hussain", "Andre Pawson", "Alex Hopper", 
                                  "Russell Thomas", "Nazir Makandra"};
       
       // 显示名字
       for (y_loc = 0; y_loc < 10; y_loc++) {
           mvprintw(y_loc, 0, "%s", names[y_loc]);
       }
       refresh();
       sleep(1);
   }
   ```

2. **创建一个新的卷屏子窗口**：
   在刷新屏幕之前，必须对父窗口调用 `touchwin` 函数。

   ```c
   // 创建子窗口
   sub_window_ptr = subwin(stdscr, 10, 20, 10, 10);
   touchwin(stdscr);
   scrollok(sub_window_ptr, TRUE);
   refresh();
   sleep(1);
   ```

3. **删除子窗口内容并重新输出文字**：
   文字的卷屏动作通过一个循环完成。

   ```c
   // 清除子窗口内容并重新输出
   werase(sub_window_ptr);
   mvwprintw(sub_window_ptr, 2, 0, "This window will now scroll as names are added");
   wrefresh(sub_window_ptr);
   sleep(1);

   for (counter = 0; counter < NUM_NAMES; counter++) {
       mvwprintw(sub_window_ptr, 2 + counter, 0, "%s", names[counter]);
       wrefresh(sub_window_ptr);
       sleep(1);
   }
   ```

### 使用 Keypad 模式
#### 动手试试：使用 Keypad 模式

1. **初始化程序和 curses 库**：
   设置 Keypad 模式为 `TRUE`。

   ```c
   #include <ncurses.h>

   #define LOCAL_ESCAPE_KEY 27

   int main() {
       int key;

       initscr();
       keypad(stdscr, TRUE);
       cbreak();  // 禁用行缓冲
       noecho();  // 关闭回显功能
       mvprintw(5, 5, "Keypad demonstration. Press 'q' to quit");
       clrtoeol();
       move(7, 5);
       refresh();

       key = getch();
       while (key != ERR && key != 'q') {
           move(7, 5);
           clrtoeol();
           if (key == LOCAL_ESCAPE_KEY) {
               printw("Escape key pressed");
           } else {
               printw("Key: %d", key);
           }
           refresh();
           key = getch();
       }

       endwin();
       return 0;
   }
   ```

### 使用颜色
#### 动手试试：彩色

1. **检查终端是否支持彩色显示**：
   如果支持，开始彩色显示。

   ```c
   #include <ncurses.h>
   #include <stdlib.h>
   #include <stdio.h>

   int main() {
       int i;

       initscr();
       if (!has_colors()) {
           endwin();
           fprintf(stderr, "Error - no color support on this terminal\n");
           exit(1);
       }
       if (start_color() != OK) {
           endwin();
           fprintf(stderr, "Error - could not initialize colors\n");
           exit(2);
       }

       mvprintw(5, 5, "There are %d COLORS and %d COLOR_PAIRS available", COLORS, COLOR_PAIRS);
       refresh();

       // 初始化颜色组合
       init_pair(1, COLOR_RED, COLOR_BLACK);
       init_pair(2, COLOR_GREEN, COLOR_BLACK);
       init_pair(3, COLOR_YELLOW, COLOR_BLUE);
       init_pair(4, COLOR_CYAN, COLOR_WHITE);
       init_pair(5, COLOR_MAGENTA, COLOR_BLUE);
       init_pair(6, COLOR_BLACK, COLOR_WHITE);

       // 显示颜色组合
       for (i = 1; i <= 6; i++) {
           attron(COLOR_PAIR(i));
           mvprintw(10 + i, 5, "Color Pair %d", i);
           attroff(COLOR_PAIR(i));
       }

       refresh();
       getch();
       endwin();
       return 0;
   }
   ```

以上代码已经进行了优化，使其更加清晰、连贯和专业。希望这对你有帮助！