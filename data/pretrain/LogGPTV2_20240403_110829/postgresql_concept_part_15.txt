test=> DELETE FROM rollback_test;
DELETE 1
test=> ROLLBACK WORK;
ROLLBACK
test=> SELECT * FROM rollback_test;
x
---
1
(1 row)
Figure10.5: Transactionrollback
User1 User2 Notes
SELECT(*)FROMtrans_test returns0
INSERTINTOtrans_testVALUES(1) addrowtotrans_test
SELECT(*)FROMtrans_test returns1
SELECT(*)FROMtrans_test returns1
Table10.1: Visibilityofsingle-querytransactions
WORK. Instead, you can close the transaction with ROLLBACK WORK and the transaction will be
discarded. Thedatabaseisleftasthoughthetransactionhadneverbeenexecuted. InFigure10.5,
thecurrenttransactionisrolledback,causingtheDELETEtohavenoeffect. Likewise,ifanyquery
insidea multistatementtransactioncannot be executeddueto an error, theentire transactionis
automaticallyrolledback.
10.3 Visibility of Committed Transactions
Althoughwehavefocusedontheall-or-nothingnatureoftransactions,theyhaveotherimportant
benefits. Only committed transactions are visible to users. Although the current user sees his
changes,otherusersdonotseethemuntilthetransactioniscommitted.
For example, Table 10.1 shows two users issuing queries using the default mode in which
everystatementisin itsown transaction. Table 10.2 showsthe samequerywith user1 usinga
10.4. READCOMMITTEDANDSERIALIZABLEISOLATIONLEVELS 125
User1 User2 Notes
BEGINWORK User1startsatransaction
SELECT(*)FROMtrans_test returns0
INSERTINTOtrans_testVALUES(1) addrowtotrans_test
SELECT(*)FROMtrans_test returns1
SELECT(*)FROMtrans_test returns0
COMMITWORK
SELECT(*)FROMtrans_test returns1
Table10.2: Visibilityofmultiquerytransactions
multiquerytransaction. User1seesthechangesmadebyhistransaction. User2,however,does
notseethechangesuntiluser1commitsthetransaction.
Thisshieldingisanotheradvantageof transactions. Theyinsulateusersfrom seeinguncom-
mittedtransactions,sothatusersneverseeapartiallycommittedviewofthedatabase.
As another example, consider the bank account query where we transferred $100 from one
bank account to another. Suppose we were calculating the total amount of money in all bank
accounts at the same time the $100 was being transferred. If we did not see a consistent view
of thedatabase,we mightsee the $100 removedfrom the account, but not the$100 added. Our
bankaccounttotalwouldthenbewrong. Aconsistentdatabaseviewmeansthateitherweseethe
$100initsoriginalaccountor weseeitinitsnewaccount. Without thisfeature,wewouldhave
toensurethatnoonewasmakingbankaccounttransferswhilewewerecalculatingtheamountof
moneyinallaccounts.
Although this case is a contrived example, real-world database users INSERT, UPDATE, and
DELETEdataallatthesametime,evenasothersSELECTdata. Thisactivityisorchestratedbythe
databasesothateachusercanoperateinasecuremanner,knowingthatotheruserswillnotaffect
theirresultsinanunpredictableway.
10.4 Read Committed and Serializable Isolation Levels
The previous section illustrated that users see only committed transactions. It did not address
what happensif someone commits atransaction whileyou are in your own transaction. In some
cases,youneedtocontrolwhetherothertransactioncommitsareseenbyyourtransaction.
POSTGRESQL’s default isolation level, READCOMMITTED, allows you to see other transaction
commitswhileyourtransactionisopen. Figure 10.6illustratesthiseffect. First,thetransaction
doesaSELECTCOUNT(*). Then,whileyouaresittingatapsqlprompt,someoneINSERTsintothe
table. ThenextSELECTCOUNT(*)showsthenewlyINSERTEDrow. Whenanotherusercommitsa
transaction,itisseenbythecurrenttransaction,evenifitiscommittedafterthecurrenttransaction
started.
126 CHAPTER10. TRANSACTIONSANDLOCKS
test=> BEGIN WORK;
BEGIN
test=> SELECT COUNT(*) FROM trans_test;
count
-------
5
(1 row)
test=> --
test=> -- someone commits INSERT INTO trans_test
test=> --
test=> SELECT COUNT(*) FROM trans_test;
count
-------
6
(1 row)
test=> COMMIT WORK;
COMMIT
Figure10.6: Read-committedisolationlevel
10.4. READCOMMITTEDANDSERIALIZABLEISOLATIONLEVELS 127
test=> BEGIN WORK;
BEGIN
test=> SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
SET VARIABLE
test=> SELECT COUNT(*) FROM trans_test;
count
-------
5
(1 row)
test=> --
test=> -- someone commits INSERT INTO trans_test
test=> --
test=> SELECT COUNT(*) FROM trans_test;
count
-------
5
(1 row)
test=> COMMIT WORK;
COMMIT
Figure10.7: Serializableisolationlevel
You can, however, prevent your transaction from seeing changes made to the database. SET
TRANSACTIONISOLATIONLEVELSERIALIZABLEchangestheisolationlevelofthecurrenttransaction.
SERIALIZABLE isolation prevents the current transaction from seeing commits made by other
transactions. Thus, any commit made after the start of the first query of the transaction is not
visible. Figure10.7showsanexampleofaSERIALIZABLEtransaction.
SERIALIZABLE isolation provides a stable view of the database for SELECT transactions. For
transactions containing UPDATE and DELETE queries, SERIALIZABLE mode is more complicated.
SERIALIZABLE isolation forces the database to execute all transactions as though they were run
serially (one after another), even if they are run concurrently. If two concurrent transactions
attempttoupdatethesamerow,serializabilityisimpossible. Insuchacase,POSTGRESQLforces
onetransactiontorollback.
For SELECT-only transactions, use the SERIALIZABLEisolation level when you do not want to
see other transaction commits during your transaction. For UPDATE and DELETE transactions,
SERIALIZABLEisolationpreventsconcurrentmodificationofthesamedatarow;itshouldtherefore
beusedwithcaution.
128 CHAPTER10. TRANSACTIONSANDLOCKS
Transaction1 Transaction2 Notes
BEGINWORK BEGINWORK startbothtransactions
UPDATErow64 transaction1exclusivelylocksrow64
UPDATErow64 transaction2mustwaittoseeiftransaction1commits
COMMITWORK transaction1commits;transaction2returnsfromUPDATE
COMMITWORK transaction2commits
Table10.3: Waitingforalock
10.5 Locking
Exclusivelocks,alsocalledwritelocks,preventotherusersfrommodifyingaroworanentiretable.
Rows modifiedbyUPDATEandDELETEarethenexclusivelylockedautomaticallyfor theduration
ofthetransaction. Thisapproachpreventsotherusersfromchangingtherowuntilthetransaction
iseithercommittedorrolledback.
Table 10.3 shows two simultaneous UPDATE transactions affecting the same row. The first
transactionmustwaittoseewhetherthesecondtransactioncommitsorrollsback. IfSERIALIZABLE
isolationlevelhadbeenused,transaction2wouldhavebeenrolledbackautomaticallyiftransaction
1committed.
Theonlytimewhenusersmustwaitforotherusersiswhentheyaretryingtomodifythesame
row. Iftheymodifydifferentrows,nowaitingisnecessary. SELECTqueriesneverhavetowait.
The database performs locking automatically. In certain cases, however, locking must be
controlled manually. As an example, Figure 10.8 shows a query that first SELECTs a row, then
performsanUPDATE. TheproblemarisesbecauseanotherusercanmodifytheJamesrowbetween
the SELECT and UPDATE. To prevent this problem, you can use SERIALIZABLE isolation. In this
mode,however,oneoftheUPDATEswouldfail.
AbettersolutionistouseSELECT…FORUPDATEtolocktheselectedrows. Figure10.9shows
thesamequeryusingSELECT…FORUPDATE. AnotherusercannotmodifytheJamesrowbetween
theSELECT…FORUPDATEandUPDATE. Infact,therowremainslockeduntilthetransactionends.
YoucanalsomanuallycontrollockingbyusingtheLOCKcommand. Itallowsspecificationofa
transaction’slocktypeandscope. SeetheLOCKmanualpageformoreinformation.
10.6 Deadlocks
Itispossibletocreateanunrecoverablelockcondition,calledadeadlock. Table10.4illustrateshow
twotransactionsmightbecomedeadlocked. Inthisexample,eachtransactionholdsalockandis
waitingfortheothertransaction’slocktobereleased. POSTGRESQLmustrollbackonetransaction
becauseotherwisethetwotransactionswillwaitforever. Obviously,iftheyhadacquiredlocksin
thesameorder,nodeadlockwouldoccur.
10.6. DEADLOCKS 129
test=> BEGIN WORK;
BEGIN
test=> SELECT *
test-> FROM lock_test
test-> WHERE name = ’James’;
id | name
-----+--------------------------------
521 | James
(1 row)
test=> --
test=> -- the SELECTed row is not locked
test=> --
test=> UPDATE lock_test
test-> SET name = ’Jim’
test-> WHERE name = ’James’;
UPDATE 1
test=> COMMIT WORK;
COMMIT
Figure10.8: SELECTwithnolocking
Transaction1 Transaction2 Notes
BEGINWORK BEGINWORK startbothtransactions
UPDATErow64 UPDATErow83 independentrowswrite-locked
UPDATErow83 holdswaitingfortransaction2toreleasewritelock
UPDATErow64 attempttogetwritelockheldbytransaction1
auto-ROLLBACKWORK deadlockdetected—transaction2isrolledback
COMMITWORK transaction1returnsfromUPDATEandcommits
Table10.4: Deadlock
130 CHAPTER10. TRANSACTIONSANDLOCKS
test=> BEGIN WORK;
BEGIN
test=> SELECT *
test-> FROM lock_test
test-> WHERE name = ’James’
test-> FOR UPDATE;
id | name
-----+--------------------------------
521 | James
(1 row)
test=> --
test=> -- the SELECTed row is locked
test=> --
test=> UPDATE lock_test
test-> SET name = ’Jim’
test-> WHERE name = ’James’;
UPDATE 1
test=> COMMIT WORK;
COMMIT
Figure10.9: SELECT…FORUPDATE
10.7 Summary
Single-userdatabasequeriesareconcernedwith getting thejob done. Multiuserqueriesmust be
designedtogracefullyhandlemultipleusersaccessingthesamedata.
Multiuserinteraction canbe veryconfusing, becausethe databaseisconstantlychanging. In
a multiuserenvironment, improperlyconstructedqueriescanrandomly failwhenusersperform
simultaneousoperations. Queriescannotassumethatrowsfromprevioustransactionsstillexist.
By learning about POSTGRESQL’S multiuser behavior, you are now prepared to create robust
queries. POSTGRESQLhasthefeaturesnecessarytoconstructreliablemultiuserqueries.
Chapter 11
Performance
Inanidealworld,userswouldneverneedtobeconcernedaboutperformance. Thesystemwould
tuneitself. Unfortunately,wedonotliveinanidealworld. Anuntuneddatabasecanbethousands
oftimesslowerthanatunedone, soitpaysto takestepstoimproveperformance. Thischapter
showsyouhowtogettheoptimalperformancefromyourdatabase.
11.1 Indexes
Whenaccessingatable,POSTGRESQLnormallyreadsfrom thebeginningofthetabletotheend,
looking for relevantrows. With anindex,itcanquicklyfindspecificvaluesin theindex,thengo
directlytomatchingrows. Inthisway,indexesallowfastretrievalofspecificrowsfromatable.
For example, consider the query SELECT * FROM customer WHERE col = 43. Without an index,
POSTGRESQLmust scanthe entiretable looking for rowswherecolequals43. With anindexon
col,POSTGRESQLcangodirectlytorowswherecolequals43,bypassingallotherrows.
Foralargetable,itcantakeminutestocheckeveryrow. Usinganindex,findingaspecificrow
takesfractionsofasecond.
Internally,POSTGRESQLstoresdatainoperatingsystemfiles. Eachtablehasitsownfile,and
datarowsarestoredoneafteranotherinthefile. Anindexisaseparatefilethatissortedbyone
ormorecolumns. Itcontainspointersintothetablefile,allowingrapidaccesstospecificvaluesin
thetable.
POSTGRESQL does not create indexes automatically. Instead, users should create them for
columnsfrequentlyusedinWHEREclauses.
Tocreateanindex,usetheCREATEINDEXcommand,asshowninFigure11.1. Inthisexample,
customer_custid_idxisthenameoftheindex,customeristhetablebeingindexed,andcustomer_id
isthecolumnbeingindexed. Althoughyoucanuseanynamefortheindex,itisgoodpracticetouse
thetableandcolumnnamesaspartoftheindexname—forexample,customer_customer_id_idxor
i_customer_custid. Thisindexisusefulonlyforfindingrowsincustomerforspecificcustomer_ids.
131
132 CHAPTER11. PERFORMANCE
test=> CREATE INDEX customer_custid_idx ON customer (customer_id);
CREATE
Figure11.1: Exampleof CREATEINDEX
It cannot help when you are accessing other columns, because indexes are sorted by a specific
column.
Youcancreateasmanyindexesasyouwish. Ofcourse,anindexonaseldom-usedcolumnisa
wasteofdiskspace. Also,performancecansufferiftoomanyindexesexist,becauserowchanges
requireanupdatetoeachindex.
Itispossibletocreateanindexspanningmultiplecolumns. Multicolumnindexesaresortedby
thefirstindexedcolumn. Whenthefirstcolumncontainsseveralequalvalues,sortingcontinues
using the second indexed column. Multicolumn indexes are useful only on columns with many
duplicatevalues.
The command CREATE INDEX customer_age_gender_idx ON customer (age, gender) creates an
indexthatissortedbyageand,whenseveralagerowshavethesamevalue,thensortedongender.
This index can be used by the query SELECT * FROM customer WHERE age = 36 AND gender = ’F’
andthequerySELECT * FROM customer WHERE age = 36.
The index customer_age_gender_idxis useless if you wish to find rows based only on gender,
however. Thegendercomponentoftheindexcanbeusedonlyaftertheagevaluehasbeenspecified.
Thus,thequerySELECT * FROM customer WHERE gender = ’F’cannotusetheindexbecauseitdoes
notplacearestrictiononage,whichisthefirstpartoftheindex.
Indexescanbeusefulforcolumnsinvolvedinjoins,too. Theycanevenbeemployedtospeed
upsomeORDERBYclauses.
To removean index,usetheDROPINDEXcommand. SeetheCREATE_INDEXandDROP_INDEX
manualpagesformoreinformation.
11.2 Unique Indexes
Uniqueindexesresembleordinaryindexes,exceptthattheypreventduplicatevaluesfromoccur-
ring in the table. Figure 11.2 shows the creation of one table and a unique index. The index is
uniquebecauseofthekeywordUNIQUE. Theremainingqueriestrytoinsertaduplicatevalue,but
theuniqueindexpreventsthisanddisplaysanappropriateerrormessage.
Sometimes unique indexesarecreated only to preventduplicatevalues, not for performance
reasons. Multicolumn unique indexes ensure that the combination of indexed columns remains
unique. UniqueindexesdoallowmultipleNULLvalues,however. Uniqueindexesbothspeeddata
accessandpreventduplicates.
11.3. CLUSTER 133
test=> CREATE TABLE duptest (channel INTEGER);
CREATE
test=> CREATE UNIQUE INDEX duptest_channel_idx ON duptest (channel);
CREATE
test=> INSERT INTO duptest VALUES (1);
INSERT 130220 1
test=> INSERT INTO duptest VALUES (1);
ERROR: Cannot insert a duplicate key into unique index duptest_channel_idx
Figure11.2: Exampleofauniqueindex
11.3 CLUSTER
TheCLUSTERcommandreordersthetablefiletomatchtheorderingofanindex. Thisspecialized
command is valuable when performance is critical and the indexed column has many duplicate
values.
Forexample,supposethecolumncustomer.agehasmanyduplicatevalues,andthequerySELECT
* FROM customer WHERE age = 98 is executed. An index on age allows rapid retrieval of the row
locationsfromtheindex. Ifthousandsofmatchingrowsexist,however,theymaybescatteredin
thetablefile,requiringmanydiskaccessestoretrievethem. CLUSTERreordersthetable,placing
duplicatevaluesnexttoeachother. Thisspeedsaccessforlargequeriesaccessingmanyduplicate
values.
CLUSTER even helps with range queries like col >= 3 AND col <= 5. The command places
theserowsnexttoeachotherondisk,speedingindexedlookups.
In addition, CLUSTERcan also speedORDERBY processing. See the CLUSTERmanual pagefor
moreinformation.
11.4 VACUUM
WhenPOSTGRESQLupdatesarow,itkeepstheoriginalcopyoftherowinthetablefileandwrites
a new one. The original row, marked as expired, is used by other transactions still viewing the
databasein its prior state. Deletions aresimilarlymarkedas expired, but not removedfrom the
tablefile.
TheVACUUMcommandremovesexpiredrowsfromthefile. Intheprocess,itmovesrowsfrom
theendofthetableintotheexpiredspots,therebycompactingthetablefile.