## 一、前言
由于前段时间遇到 Android APP 测试的需求增大，之前对于 APP
测试基本是基于常规功能点的测试，没有进行过多深入的学习，于是根据网上师傅们的文章思路学习了一下，简单总结成该文。本文主要介绍 Android APP
测试中四大组件相关测试手段，其余 APP 功能点测试与 WEB 端测试如出一辙。
### Android 四大组件
Android 四大组件分别是 Activity、Content Provider、Broadcast Receiver 以及 Service
组件名称 | 具体用途  
---|---  
Activity | 展示组件，用于向用户直接展示一个界面，而且可以接受用户的输入信息从而进行交互  
Content Provider | 数据共享组件，用于向其他组件乃至其他应用共享数据  
Broadcast Receiver | 通讯组件，用于在不同组件甚至不同应用中传递消息  
Service | 能在后台执行长期运行操作的组件，它没有UI界面，运行在宿主进程的主线程中，因此执行耗时的后台计算任务需要在单独的线程中去完成  
## 二、环境搭建
### drozer 安装
drozer 安装在 Windows 下，安装环境必须为 python 2.7，下载地址
[Github](https://github.com/WithSecureLabs/drozer/releases/tag/2.4.4)、[官网](https://labs.withsecure.com/tools/drozer)
1、安装 drozer 前先安装 python 2.7，安装时选择自动添加环境变量
安装完成，测试是否成功安装
2、安装 dorzer ，下载
[drozer](https://github.com/mwrlabs/drozer/releases/download/2.4.4/drozer-2.4.4.win32.msi)
后点击安装，由于系统没有识别到 Python2.7，所以我们需要指定 python2.7 路径，若系统能识别到，则选择 python2.7 即可
drozer 成功安装后，软件位于 Python 2.7 下的 Scripts 目录下
3、手机安装 `drozer-agent-2.3.4.apk`，[点击下载](https://github.com/mwrlabs/drozer/releases/download/2.3.4/drozer-agent-2.3.4.apk) 安装完成后，测试是否可正常使用。首先进入 dorzer-agent app
点击右下按钮，开启端口转发功能。然后使用`具备数据传输的 USB 线`，手机连接电脑，点击文件传输使电脑可连接至手机
使用 adb 软件进行端口转发，使手机与电脑可进行通信，命令：`adb forward tcp:31415 tcp:31415`
[点击下载adb](https://developer.android.google.cn/studio/releases/platform-tools?hl=zh-cn)
注意：当使用 adb 进行端口转发，若出现报错，`error: no devices/emulators
found`，原因是我们手机没有开启开发者模式，只需打开手机开发者模式,开启 USB 调试功能，根据自身手机品牌自行进行操作，开启后再次再次执行命令
`adb.exe forward tcp:31415 tcp:31415` 即可。
最后进入 Python27\Scripts 目录下执行命令开启 drozer 与手机连接通道 `drozer.bat console
connect`，如果报错 `ImportError: No module named google.protobuf`，则需要安装依赖。
cmd 命令行执行逐一安装即可
    pip2 install protobuf -i https://pypi.tuna.tsinghua.edu.cn/simple
    pip2 install pyopenssl -i https://pypi.tuna.tsinghua.edu.cn/simple
    pip2 install pyyaml -i https://pypi.tuna.tsinghua.edu.cn/simple
    pip2 install twisted -i https://pypi.tuna.tsinghua.edu.cn/simple
    pip2 install service_identity -i https://pypi.tuna.tsinghua.edu.cn/simple
安装依赖后再次执行命令 `drozer.bat console connect`，drozer 成功连接手机，drozer 启动成功
至此 drozer 安装及测试已全部完成。
## 三、四大组件测试
### Activity
由上面我们知道 Activity 为展示组件，用于向用户直接展示一个界面，而且可以接受用户的输入信息从而进行交互。具体漏洞类型及危害如下：
漏洞种类 | 危害  
---|---  
越权绕过 | Activity 用户界面绕过会造成用户信息窃取  
拒绝服务 | 通过 Intent 给 Activity 传输畸形数据使得程序崩溃从而影响用户体验  
Activity 劫持 | 组件导出导致钓鱼欺诈，Activity 界面被劫持产生欺诈等安全事件  
隐式启动 intent 包含敏感数据 | 敏感信息泄露  
#### 越权绕过
在 Android 系统中，Activity 组件默认是不导出的，如果 `AndroidManifest.xml` 中设置了 `exported =
"true"` 这样的关键值或者是添加了`` 这样的属性，那么此时 Activity
组件是导出的，就会引发越权绕过或者是泄露敏感信息等的安全风险。 **（导出:组件可以被外部应用调用;
AndroidManifest.xml:应用清单，每个Android APP必备的文件配置，反编译后可查看其详细配置代码）**
例子:测试样本 sieve.apk，下载地址：
1、手机安装 sieve.apk、drozer-agent.apk，sieve app 界面如下图左，按照上面文章 drozer
安装部分，配置好相关测试环境，手机端点击 drozer 右下角打开代理，利用 adb 进行端口转发，界面如下图右
adb开启端口转发：`adb.exe forward tcp:31415 tcp:31415`
drozer 连接手机：`drozer.bat console connect`
2、尝试利用 drozer 越权绕过 sieve app 登录界面
列出手机程序中所有的 APP 包名
    run app.package.list
如上图出现文字乱码，解决方案如下：
Everything 搜索，找到位于 Python27 目录下的 `package.py`
添加如下代码
    import sys
    reload(sys)
    sys.setdefaultencoding('utf-8')
360、362行添加字母 u
重新启动 drozer，再次执行命令 `run app.package.list` 列出所有手机已安装程序的包名
由于列出的包名众多，无法正确分辨需测试的 APP 包名为哪个，我们转用
[GetAPKInfo](https://codeload.github.com/bihe0832/Android-GetAPKInfo/zip/refs/tags/V2.0.2) 工具来获取 sieve app 包名, `java -jar GetAPKInfo.jar
C:\Users\Boom\Desktop\sieve.apk`
然后 drozer 直接搜索包名信息 com.mwr.example.sieve,该APP具体信息如下
我们直接去查询目标应用的攻击面，通过下图可知 Activity 有3个组件是可以导出的
    run app.package.attacksurface com.mwr.example.sieve
查看具体可导出的 Activity 组件信息
    run app.activity.info -a com.mwr.example.sieve
调用组件，实现登录绕过界面（由于测试样本不支持高版本 Android，所以这里使用 MuMu 模拟器进行测试，实现绕过），其它 Activity
导出组件绕过测试只需更换组件名即可
    run app.activity.start --component com.mwr.example.sieve com.mwr.example.sieve.PWList
#### Activity劫持
例子：劫持测试 APP 下载地址:
1、手机安装点击劫持软件 uihijackv2.0_sign.apk , drozer 开启端口转发，adb 连接 drozer
2、打开被测软件界面，这里被测软件也是使用 drozer，然后 Windows 通过 drozer 命令调用劫持软件
`uihijackv2.0_sign`，`若 uihijackv2.0_sign 界面位于被测软件上，则存在漏洞（如下图）`，若被测页面无变化则不存在漏洞。
    run app.activity.start --component com.test.uihijack com.test.uihijack.MainActivity
#### 拒绝服务攻击
例子：测试 APP 下载地址：
1、利用 drozer 直接查看暴露的组件，然后进行调用，查看是否出现程序崩溃情况。通过
[GetAPKInfo](https://codeload.github.com/bihe0832/Android-GetAPKInfo/zip/refs/tags/V2.0.2) 工具来获取 APP 包名为 `org.owasp.goatdroid.fourgoats`
2、安装 `OWASP GoatDroid- FourGoats Android App.apk` 软件，利用 drozer 查看其暴露组件
    run app.package.attacksurface org.owasp.goatdroid.fourgoats
查看具体暴露组件
    run app.activity.info -a org.owasp.goatdroid.fourgoats
3、调用组件，查看是否导致拒绝服务，若程序出现 `程序崩溃`、`已停止运行`
等程序无法运行或自动退出行为则为攻击成功。查看例子：
### Conten Provider
数据共享组件，用于向其他组件乃至其他应用共享数据，由此可推算，该组件漏洞与数据相关。
漏洞种类 | 危害  
---|---  
信息泄露 | 查看组件数据信息  
SQL注入 | 注入获取相关数据  
目录遍历 | 访问任意可读文件  
#### 信息泄露
1、依然使用 seive.apk 作为测试 app，但需要在第一次安装打开时需要设置账号密码
2、利用 drozer 查看 provider 数据组件具体的攻击面
    run app.provider.info -a com.mwr.example.sieve
3、对 `com.mwr.example.sieve.DBContentProvider` 攻击面进行测试，列出 URI
    run app.provider.finduri com.mwr.example.sieve
4、利用 drozer 扫描模块对列出的 URI 进行扫描，查看可访问的 URI ，三个 URI 可访问
    run scanner.provider.finduris -a com.mwr.example.sieve
5、访问URI，查看具体内容 ，由下图可知，刚才我们所填的数据全部列了出来
    run app.provider.query content://com.mwr.example.sieve.DBContentProvider/Passwords/ --vertical
#### SQL注入