### Proof Completion in Coq

The proof is completed using Coq. Intuitively, transitioning to Coq is necessary when there is a semantic gap—such as in cases involving complex algebraic arguments—between the expressed post-condition (e.g., \( x = y \times x \mod 2p \)) and the assertions that can be proven by the SMT solver. The SMT solver typically encodes details of how modular reduction is carried out within the program (e.g., by first reducing modulo \( 2^{256} \) and then adjusting the result). This approach allows for direct reasoning over assembly code but is labor-intensive and provides weak guarantees, as the qhasm language lacks formal semantics.

### Verification Approaches

Zinzindohoué and co-workers [36] use an approach based on refinement types to verify the functional correctness of a Curve25519 implementation written in a stateful, verification-aware, higher-order functional programming language from the ML family. However, the generated assembly code is inefficient. Bhargavan and co-workers [16, 35] propose a different approach for generating efficient and functionally verified C implementations, but the fastest implementations are obtained using an unverified compiler. Erbsen et al. [22] present another alternative for synthesizing functionally correct and efficient implementations from high-level specifications in Coq. Bernstein and Schwabe [15] develop an automated tool, gfverif, which, starting from a sufficiently-annotated C implementation, generates a set of algebraic equalities that guarantee functional correctness and can be automatically proven using symbolic computation tools. These approaches provide strong guarantees on the source programs, but the assembly code is generated with untrusted tools, which is undesirable for high-assurance software. Additionally, these approaches often require programmers to adopt non-conventional languages, which may be a significant barrier to adoption. None of these works consider side-channel security of the assembly implementations, although side-channel security of C implementations is discussed in [16], highlighting the security gap in modern compilers [21].

### Related Work

Our work is closely related to Vale [17], which uses the Dafny verifier to provide a framework for proving functional correctness and side-channel resistance of high-performance assembly code. The Vale language includes high-level control-flow structures that simplify the writing and verification of cryptographic routines. Unlike Jasmin, the Vale compiler is not verified; all verification is performed on the generated annotated assembly.

Almeida et al. [2, 3] propose a general methodology for obtaining strong guarantees for assembly-level implementations by simultaneously proving three properties: functional equivalence, security, and side-channel resistance. Their approach combines multiple tools, including EasyCrypt for proving security of algorithmic descriptions, Frama-C for proving functional equivalence between algorithmic descriptions and C implementations, CompCert for proving functional equivalence between C implementations and assembly code, and a formally verified type system for constant-time for side-channel security.

Appel [5] leverages the Verified Software Toolchain [6] to prove the functional correctness of an assembly-level SHA256 implementation generated using the CompCert compiler [28]. Beringer and co-workers [10] extend this approach to prove both functional correctness and cryptographic security of an assembly-level HMAC implementation. Ye and co-workers [34] have further extended this to prove the correctness and cryptographic security of the mbedTLS implementation of HMAC-DRGB.

Beyond these works on validating cryptographic implementations, there is a significant body of work on building verified compilers and formal models of assembly languages.

### Side-Channel Resistance

There is extensive work on analyzing the side-channel resistance of cryptographic implementations. Our work is most closely related to static analyses for cryptographic constant-time, including [8, 33], and specifically to the product-based approach of ct-verif [4]. However, ct-verif targets LLVM intermediate representation, leaving open the question of carrying the results of the analysis to assembly code. In contrast, we target code that is significantly closer to assembly and (informally) argue that the Jasmin compiler preserves cryptographic constant-time.

### Conclusion

Jasmin is a framework for building high-speed and high-assurance cryptographic implementations using a programming language that simultaneously guarantees control over the generated assembly and verifiability of the source programs. We justify our design with proofs that the Jasmin compiler preserves behavior, safety, and constant-time security of source programs. The main correctness result—semantics preservation—is formally verified in the Coq proof assistant.

Our main pending task is proving the functional correctness of Jasmin programs. We are completing a foundational infrastructure (formally verified in Coq) for proving the correctness of Jasmin programs and intend to leverage prior work on certified tactics for arithmetic to achieve higher automation. Another task is to build a foundational infrastructure for proving functional equivalence between two Jasmin implementations. We plan to use these tools in combination to prove the functional correctness of our Jasmin implementation of Curve25519. Additionally, we intend to include support for richer instruction sets and different architectures. As a first step, we will add support for vector instructions commonly used in cryptographic implementations.

### Acknowledgments

This work is partially supported by ONR Grants N000141210914 and N000141512750, Google Chrome University, Cátedra PT-FLAD em Smart Cities & Smart Governance, and Project “TEC4Growth - Pervasive Intelligence, Enhancers and Proofs of Concept with Industrial Impact/NORTE-01-0145-FEDER-000020” financed by the North Portugal Regional Operational Programme (NORTE 2020), under the PORTUGAL 2020 Partnership Agreement, and through the European Regional Development Fund (ERDF).

### References

[1] Nadhem J. AlFardan and Kenneth G. Paterson. 2013. Lucky Thirteen: Breaking the TLS and DTLS Record Protocols. In IEEE Symposium on Security and Privacy, SP 2013. IEEE Computer Society, 526–540.

[2] José Bacelar Almeida, Manuel Barbosa, Gilles Barthe, and François Dupressoir. 2013. Certified computer-aided cryptography: efficient provably secure machine code from high-level implementations. In ACM CCS 13, Ahmad-Reza Sadeghi, Virgil D. Gligor, and Moti Yung (Eds.). ACM Press, 1217–1230.

[3] José Bacelar Almeida, Manuel Barbosa, Gilles Barthe, and François Dupressoir. 2016. Verifiable Side-Channel Security of Cryptographic Implementations: Constant-Time MEE-CBC. In FSE 2016 (LNCS), Thomas Peyrin (Ed.), Vol. 9783. Springer, Heidelberg, 163–184. https://doi.org/10.1007/978-3-662-52993-5_9

[4] Jose Carlos Bacelar Almeida, Manuel Barbosa, Gilles Barthe, François Dupressoir, and Michael Emmi. 2016. Verifying Constant-time Implementations. In 25th USENIX Security Symposium (USENIX Security 16). USENIX Association, Austin, TX. https://www.usenix.org/conference/usenixsecurity16/technical-sessions/presentation/almeida

[5] Andrew W. Appel. 2015. Verification of a Cryptographic Primitive: SHA-256. ACM Trans. Program. Lang. Syst. 37, 2 (2015), 7:1–7:31. https://doi.org/10.1145/2701415

[6] Andrew W Appel, Robert Dockins, Aquinas Hobor, Lennart Beringer, Josiah Dodds, Gordon Stewart, Sandrine Blazy, and Xavier Leroy. 2014. Program logics for certified compilers. Cambridge University Press.

[7] Michael Barnett, Bor-Yuh Evan Chang, Robert DeLine, Bart Jacobs, and K. Rustan M. Leino. 2005. Boogie: A Modular Reusable Verifier for Object-Oriented Programs. In Formal Methods for Components and Objects, 4th International Symposium, FMCO 2005, Amsterdam, The Netherlands, November 1-4, 2005, Revised Lectures (Lecture Notes in Computer Science), Frank S. de Boer, Marcello M. Bonsangue, Susanne Graf, and Willem P. de Roever (Eds.), Vol. 4111. Springer, 364–387. https://doi.org/10.1007/11804192_17

[8] Gilles Barthe, Gustavo Betarte, Juan Diego Campo, Carlos Daniel Luna, and David Pichardie. 2014. System-level Non-interference for Constant-time Cryptography. In ACM CCS 14, Gail-Joon Ahn, Moti Yung, and Ninghui Li (Eds.). ACM Press, 1267–1279.

[9] Evmorfia-Iro Bartzia and Pierre-Yves Strub. 2014. A Formal Library for Elliptic Curves in the Coq Proof Assistant. In Interactive Theorem Proving - 5th International Conference, ITP 2014, Held as Part of the Vienna Summer of Logic, VSL 2014, Vienna, Austria, July 14-17, 2014. Proceedings (Lecture Notes in Computer Science), Gerwin Klein and Ruben Gamboa (Eds.), Vol. 8558. Springer, 77–92. https://doi.org/10.1007/978-3-319-08970-6_6

[10] Lennart Beringer, Adam Petcher, Katherine Q. Ye, and Andrew W. Appel. 2015. Verified Correctness and Security of OpenSSL HMAC. In 24th USENIX Security Symposium, USENIX Security 15, Washington, D.C., USA, August 12-14, 2015., Jaeyeon Jung and Thorsten Holz (Eds.). USENIX Association, 207–221. https://www.usenix.org/conference/usenixsecurity15/technical-sessions/presentation/beringer

[11] Dan Bernstein. Writing high-speed software. (????). http://cr.yp.to/qhasm.html

[12] Daniel J. Bernstein. 2005. Cache-timing attacks on AES. (2005). http://cr.yp.to/antiforgery/cachetiming-20050414.pdf.

[13] Daniel J. Bernstein. 2006. Curve25519: New Diffie-Hellman Speed Records. In PKC 2006 (LNCS), Moti Yung, Yevgeniy Dodis, Aggelos Kiayias, and Tal Malkin (Eds.), Vol. 3958. Springer, Heidelberg, 207–228.

[14] Daniel J. Bernstein, Niels Duif, Tanja Lange, Peter Schwabe, and Bo-Yin Yang. 2011. High-Speed High-Security Signatures. In CHES 2011 (LNCS), Bart Preneel and Tsuyoshi Takagi (Eds.), Vol. 6917. Springer, Heidelberg, 124–142.

[15] Dan Berstein and Peter Schwabe. 2015. gfverif: fast and easy verification of finite-field arithmetic. (2015). http://gfverif.cryptojedi.org/

[16] Karthikeyan Bhargavan, Antoine Delignat-Lavaud, Cédric Fournet, Catalin Hritcu, Jonathan Protzenko, Tahina Ramananandro, Aseem Rastogi, Nikhil Swamy, Peng Wang, Santiago Zanella Béguelin, and Jean Karim Zinzindohoué. 2017. Verified Low-Level Programming Embedded in F. CoRR abs/1703.00053 (2017). http://arxiv.org/abs/1703.00053

[17] Barry Bond, Chris Hawblitzel, Manos Kapritsos, K. Rustan M. Leino, Jacob R. Lorch, Bryan Parno, Ashay Rane, Srinath Setty, and Laure Thompson. 2017. Vale: Verifying High-Performance Cryptographic Assembly Code. In 26th USENIX Security Symposium (USENIX Security 17). USENIX Association, Vancouver, BC. https://www.usenix.org/conference/usenixsecurity17/technical-sessions/presentation/bond

[18] Billy Bob Brumley, Manuel Barbosa, Dan Page, and Frederik Vercauteren. 2012. Practical Realisation and Elimination of an ECC-Related Software Bug Attack. In CT-RSA 2012 (LNCS), Orr Dunkelman (Ed.), Vol. 7178. Springer, Heidelberg, 171–186.

[19] Yu-Fang Chen, Chang-Hong Hsu, Hsin-Hung Lin, Peter Schwabe, Ming-Hsien Tsai, Bow-Yaw Wang, Bo-Yin Yang, and Shang-Yi Yang. 2014. Verifying Curve25519 Software. In ACM CCS 14, Gail-Joon Ahn, Moti Yung, and Ninghui Li (Eds.). ACM Press, 299–309.

[20] Leonardo Mendonça de Moura and Nikolaj Bjørner. 2008. Z3: An Efficient SMT Solver. In Tools and Algorithms for the Construction and Analysis of Systems, 14th International Conference, TACAS 2008, Held as Part of the Joint European Conferences on Theory and Practice of Software, ETAPS 2008, Budapest, Hungary, March 29-April 6, 2008. Proceedings (Lecture Notes in Computer Science), C. R. Ramakrishnan and Jakob Rehof (Eds.), Vol. 4963. Springer, 337–340. https://doi.org/10.1007/978-3-540-78800-3_24

[21] Vijay D’Silva, Mathias Payer, and Dawn Xiaodong Song. 2015. The Correctness-Security Gap in Compiler Optimization. In 2015 IEEE Symposium on Security and Privacy Workshops, SPW 2015, San Jose, CA, USA, May 21-22, 2015. IEEE Computer Society, 73–87. https://doi.org/10.1109/SPW.2015.33

[22] Andres Erbsen, Jade Philipoom, Jason Gross, Robert Sloan, and Adam Chlipala. 2017. Systematic Synthesis of Elliptic Curve Cryptography Implementations. (2017). https://people.csail.mit.edu/jgross/personal-website/papers/2017-fiat-crypto-pldi-draft.pdf

[23] Shay Gueron and Vlad Krasnov. 2013. The fragility of AES-GCM authentication algorithm. Cryptology ePrint Archive, Report 2013/157. (2013). http://eprint.iacr.org/2013/157.

[24] Darrel Hankerson, Alfred Menezes, and Scott Vanstone. 2004. Guide to elliptic curve cryptography. (2004).

[25] Jacques-Henri Jourdan, François Pottier, and Xavier Leroy. 2012. Validating LR(1) Parsers. In European Symposium on Programming (ESOP). Springer, 397–416.

[26] Thierry Kaufmann, Hervé Pelletier, Serge Vaudenay, and Karine Villegas. 2016. When Constant-Time Source Yields Variable-Time Binary: Exploiting Curve25519-donna Built with MSVC 2015. In Cryptology and Network Security - 15th International Conference, CANS 2016, Milan, Italy, November 14-16, 2016, Proceedings (Lecture Notes in Computer Science), Sara Foresti and Giuseppe Persiano (Eds.), Vol. 10052. 573–582. https://doi.org/10.1007/978-3-319-48965-0_36

[27] K. Rustan M. Leino. 2010. Dafny: An Automatic Program Verifier for Functional Correctness. In Logic for Programming, Artificial Intelligence, and Reasoning - 16th International Conference, LPAR-16, Dakar, Senegal, April 25-May 1, 2010, Revised Selected Papers (Lecture Notes in Computer Science), Edmund M. Clarke and Andrei Voronkov (Eds.), Vol. 6355. Springer, 348–370. https://doi.org/10.1007/978-3-642-17511-4_20

[28] Xavier Leroy. 2006. Formal certification of a compiler back-end, or: programming a compiler with a proof assistant. In 33rd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, POPL 2006. ACM, 42–54.

[29] George C. Necula. Translation validation for an optimizing compiler. In ACM sigplan notices (2000), Vol. 35. ACM, 83–94.

[30] Aina Niemetz, Mathias Preiner, and Armin Biere. 2014 (published 2015). Boolector 2.0 system description. Journal on Satisfiability, Boolean Modeling and Computation 9 (2014 (published 2015)), 53–58.

[31] Adam Petcher and Greg Morrisett. 2015. The Foundational Cryptography Framework. In Principles of Security and Trust - 4th International Conference, POST 2015, Held as Part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2015, London, UK, April 11-18, 2015, Proceedings (Lecture Notes in Computer Science), Riccardo Focardi and Andrew C. Myers (Eds.), Vol. 9036. Springer, 53–72. https://doi.org/10.1007/978-3-662-46666-7_4

[32] Massimiliano Poletto and Vivek Sarkar. 1999. Linear scan register allocation. 21, 5 (1999), 895–913.

[33] Bruno Rodrigues, Fernando Magno Quintão Pereira, and Diego F. Aranha. 2016. Sparse representation of implicit flows with applications to side-channel detection. In Proceedings of the 25th International Conference on Compiler Construction, CC 2016, Barcelona, Spain, March 12-18, 2016, Ayal Zaks and Manuel V. Hermenegildo (Eds.). ACM, 110–120. https://doi.org/10.1145/2892208.2892230

[34] Katherine Ye, Matthew Green, Naphat Sanguansin, Lennart Beringer, Adam Petcher, and Andrew W. Appel. 2017. Verified correctness and security of mbedTLS HMAC-DRBG. In ACM CCS 2017.

[35] Jean Karim Zinzindohoué, Karthikeyan Bhargavan, Jonathan Protzenko, and Benjamin Beurdouche. 2017. HACL*: A Verified Modern Cryptographic Library. IACR Cryptology ePrint Archive 2017 (2017), 536. http://eprint.iacr.org/2017/536

[36] Jean Karim Zinzindohoué, Evmorfia-Iro Bartzia, and Karthikeyan Bhargavan. 2016. A Verified Extensible Library of Elliptic Curves. In IEEE 29th Computer Security Foundations Symposium, CSF 2016, Lisbon, Portugal, June 27 - July 1, 2016. IEEE Computer Society, 296–309. https://doi.org/10.1109/CSF.2016.28

### Jasmin Syntax Reference

This section presents the concrete syntax of Jasmin source programs using BNF notation. Terminals are typeset in capital letters or literally when no confusion should arise, non-terminals are surrounded by angle brackets. Optional parts are written within square brackets. Repeated parts are suffixed by an asterisk * (not to be confused with the terminal asterisk *).

Some rules (not shown) enable concise expression of common patterns as non-empty sequences of elements (X) separated by commas (⟨tuple1⟩ X), etc.

#### Types
Jasmin types include booleans, mathematical integers, bit-vectors of predetermined sizes, or arrays of such bit-vectors. The sizes of these arrays are given through arbitrary expressions that must reduce to positive integers at compile-time.

```
⟨ptype⟩ ::= T_BOOL | T_INT | ⟨utype⟩ ⟨brackets⟨pexpr⟩⟩
⟨utype⟩ ::= T_U8 | T_U16 | T_U32 | T_U64 | T_U128 | T_U256
```

#### Expressions
Jasmin expressions consist of variables, array accesses, literal constants (booleans or mathematical integers), memory accesses, prefix unary operators, infix binary operators, and function and primitive calls. Operators include usual arithmetic, boolean, and bit-wise operations. Arithmetic operators have signed variants (with an 's' suffix) that interpret their arguments as signed integers.

The prefixed type in memory accesses corresponds to the type of the value to fetch; it defaults to b64. The pointer expression is made of a base (variable) and an offset (expression).

```
⟨pexpr⟩ ::= ⟨ident⟩ | ⟨var⟩ | ⟨prim⟩ | ⟨peop1⟩ ...
```