User: Use Python to write a script to periodically compress and back up the log files on the server, while retaining the backup files of the last 30 days.
Assistant: The following is a basic Python script implementation that can periodically compress and back up log files in a specified directory, and delete backup files older than 30 days. ```python import os import shutil import time # log directory log_dir = '/path/to/log/dir' # backup file storage directory backup_dir = '/path/to/backup/dir' # backup file name prefix backup_prefix = 'log_backup_' # Backup interval, the unit is days backup_interval = 1 # The maximum time to keep backup files, the unit is days backup_max_age = 30 # Format the current date and time def current_datetime(): return time.strftime('%Y-% m-%d_%H-%M-%S') # Backup file name def backup_filename(): return backup_prefix + current_datetime() + '.tar.gz' # Compress files in the specified directory def compress_dir(dirname, archive) : with tarfile.open(archive, 'w:gz') as tar: for root, dirs, files in os.walk(dirname): for file in files: tar.add(os.path.join(root, file) ) # Delete files in the specified directory with the specified prefix and before the specified time def cleanup_dir(dirname, prefix, max_age): for file in os.listdir(dirname): if file.startswith(prefix): file_path = os.path.join( dirname, file) file_age = time.time() - os.path.getmtime(file_path) if file_age > max_age * 86400: os.remove(file_path) # main program while True: backup_path = os.path.join(backup_dir, backup_filename ()) compress_dir(log_dir, backup_path) cleanup_dir(backup_dir, backup_prefix, backup_max_age) time.sleep(backup_interval * 86400) ``` This script uses functions in the Python standard library such as `time`, `os` and `shutil` The specific implementation is as follows: 1. Constants such as `log_dir`, `backup_dir`, `backup_prefix`, `backup_interval` and `backup_max_age` are defined, which respectively represent the directory where the log is located, the directory where the backup file is stored, the prefix of the backup file name, and the backup time interval and maximum retention time. 2. The `current_datetime()` function is defined, which is used to obtain the current date and time, which is convenient for subsequent generation of backup file names. 3. The `backup_filename()` function is defined to generate the backup file name in the format of "log_backup_YYYY-MM-DD_HH-MM-SS.tar.gz". 4. The `compress_dir(dirname, archive)` function is defined, which is used to compress all files in the specified directory into a tar.gz file. 5. The `cleanup_dir(dirname, prefix, max_age)` function is defined, which is used to delete all files under the specified prefix and before the specified time in the specified directory. 6. In the main program, use an infinite loop to periodically perform compaction and cleanup operations. 7. Every time a compression operation is performed, first generate a backup file name, and call the `compress_dir()` function to compress all files in the log directory into a backup file. 8. Call the `cleanup_dir()` function to delete backup files exceeding the maximum retention time in the backup directory each time a cleanup operation is performed. 9. After a pause, continue to cycle through the backup and cleanup operations. Note: This script is only for demonstration, and needs to be adjusted and optimized according to specific needs in actual use. For example: consider concurrency issues, backup data incremental control, and handling exceptions.