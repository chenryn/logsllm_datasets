node in the SEQHASH, an element can be quickly found by its index,
by first identifying the tree holding the element (by enumerating all
trees), in time O(κ logn), and then performing a simple lookup in
the identified tree, in time O(logn).
Fast concatenation. Two SEQHASH’s can be concatenated by
resolving the fate of the unknown nodes that now have known
neighbors. Concatenating two SEQHASH’s over n and m elements
takes time linear in the number of unknown nodes, or O(κ(logn +
logm)). Although an unknown node might result in another node
that must be processed, each such merge can be accounted to one of
the disappearing nodes to get the given runtime bound.
Efficient comparison. SEQHASH’s deterministic structure, in-
dependent of merge order, allows VERSUM to efficiently test the
equality of two SEQHASH’s by comparing their root hashes.
Adversary resilience. SEQHASH provides two critical security
properties. We provide the intuition behind these properties here,
and defer the complete definitions and proofs to Appendix A. First,
SEQHASH is collision-resistant; that is, an adversary cannot con-
struct two sequences whose SEQHASH values (i.e., the root hashes
of the trees in the forest) are identical. This is defined more pre-
cisely in Definition A.1 and proved in Theorem A.2. Second, an
adversary is unable to construct a sequence that makes SEQHASH
inefficient; that is, a sequence for which SEQHASH produces a forest
with more than O(κ logn) trees. This is defined more precisely in
Definition A.3 and proved in Theorem A.6.
5.6 Pseudocode
Pseudocode for SEQHASH’s round function can be found in Fig-
ure 5 and pseudocode for SEQHASH’s concatenation can be found
in Figure 6. The round function implementation keeps track of
6
DoRound(A, volatileL, volatileR):
n := len(A)
nextUnknownL := 0
nextUnknownR := n-1
i := 0
Initialize output arrays unknownL, center, and
unknownR.
if volatileL:
if volatileR:
while A[nextUnknownL] == A[0]:
Add A[nextUnknownL++] to unknownL.
while A[nextUnknownR] == A[n-1]:
Add A[nextUnknownR--] to unknownR.
Merge all groups of adjacent identical nodes and
add them to center.
while not all nodes are in an output:
for each adjacent pair of nodes (a,b) in A
that are not in any output:
if bit(a,i) == 1 && bit(b,i) == 0:
Add merge(a, b) to center.
for each node not in any output
with two merged neighbors:
Add the node to center.
if volatileL && bit(A[nextUnknownL],i) == 0:
Add A[nextUnknownL++] to unknownL.
if volatileR && bit(A[nextUnknownR],i) == 1:
Add A[nextUnknownR--] to unknownR.
i++
return unknownL, center, unknownR
Figure 5: SEQHASH round pseudocode.
the index of the leftmost and rightmost nodes in l and r. If their
respective sides could have neighboring nodes that might merge, in-
dicated using volatileL and volatileR, then the round function
will mark them as unknown. A side can be non-volatile if it borders
to an already-merged set of nodes in an existing SEQHASH.
The concatenation function repeatedly uses the round function
to determine which nodes to merge, taking care to reuse unknown
nodes from the existing SEQHASH’s if it exists, which means that
the side is not volatile. A special case involves the unknown nodes
of the final round; they are stored in the list of unknown nodes on
both sides.
6. VERSUM
The previous sections provide the building blocks to completely
specify VERSUM’s conflict resolution. This section describes VER-
SUM’s conflict resolution protocol and the server API required for
conflict resolution, and states a correctness theorem for VERSUM.
6.1 VerSum’s conflict resolution protocol
If two servers claim two different outcomes for a computation, the
VERSUM client uses the conflict resolution protocol to determine
which server has performed its computation incorrectly, specified in
the DetermineWrong algorithm in Figure 7.
At its core, VERSUM’s conflict resolution protocol is similar to
Quin’s conflict resolution algorithm [7]. When two servers disagree,
their computation histories must diverge at some point. The client
finds this point by performing a binary search over prefix lengths,
asking the servers to return the root hash of the SEQHASH repre-
senting the prefix of that length and seeing if they are equal. At
the end of the binary search, the client will have found the longest
h: 0,
unknownL: empty array of node arrays,
unknownR: empty array of node arrays,
top: empty node array,
Concat(l, r):
center := []
m := SeqHash{
}
while true:
if m.h = l.h && m.h >= r.h && center == []:
break
volatileL := (m.h >= l.h)
volatileR := (m.h >= r.h)
unknownL, center, unknownR =
DoRound(center, volatileL, volatileR)
if volatileL:
m.unknownL[m.h] = unknownL
else: // otherwise, unknownL is empty
m.unknownL[m.h] = l.unknownL[m.h]
if volatileR:
m.unknownR[m.h] = unknownR
m.unknownR[m.h] = r.unknownR[m.h]
else:
m.h += 1
m.top = cat(m.unknownL[m.h-1], m.unknownR[m.h-1])
m.h -= 1
return m
Figure 6: SEQHASH concatenation pseudocode.
prefix length for which the two servers agree and have obtained two
contradicting claims for the next prefix. The client can then ask
either server to prove the correct next prefix using DetermineNext
and determine which server committed to an incorrect prefix.
If two servers claim to have computations of different lengths,
the client performs a binary search up to the length of the smaller
computation plus one, as the servers must disagree before that point.
If the two servers agree up to the point of the shorter prefix, the client
invokes DetermineNext to determine if the shorter was wrongly
truncated or if the longer prefix was wrongly extended.
To support more than 2 servers, VERSUM can use any of the sug-
gested schemes by Canetti et al. [7]. The number of interactions for
m servers of a computation of length n becomes O(mlogn), running
in time O(logmlogn) by arranging the servers in a tournament tree.
6.2 Reliance on SeqHash uniqueness
A malicious server could store a correct computation history in a
badly constructed SEQHASH (by performing merge rounds incor-
rectly). It is crucial that VERSUM treats such a badly constructed
SEQHASH as an incorrect computation: to make progress, VERSUM
must be able to find at least one server that made a mistake at the
end of the binary search. If an invalidly shaped SEQHASH holding
the correct computation would be accepted by the client, then both
servers would be correct, and the binary search would have been
pointless.
7
DetermineWrong(serverA, serverB):
n := min(serverA.getLength(),
serverB.getLength()) + 1
agreed := prefix of length 1 starting
with the desired computation
claimA := serverA.getPrefix(n)
claimB := serverB.getPrefix(n)
// perform a binary search
while len(agreed) + 1 < n:
mid := (len(agreed) + n)) / 2
a := serverA.getPrefix(mid)
b := serverB.getPrefix(mid)
if a == b:
agreed = a
else:
n = mid
claimA = a
claimB = b
serverA.proofDetermineNext(agreed)
next :=
if next == claimA:
return B
if next == claimB:
return A
return both
Figure 7: The algorithm to determine which of two servers has
an incorrect computation history. If at any point during the
conversation one server stops responding, or returns an invalid
response (e.g.
to DetermineNext), that server is considered
wrong.
6.3 Handling uncooperative servers
A malicious server could try to break the conflict resolution proto-
col in several ways: a server could try to make the binary search take
too long, a server could stop responding, or a server could provide
invalid answers to queries. The client handles all these problems
by checking that all answers are correctly formatted with reason-
able size limits. If a server ever gives a badly formatted answer, or
an invalid proof, or fails to reply, the client assumes that server is
wrong.
6.4 Server API
To support VERSUM’s conflict resolution, a VERSUM server
supports several functions:
• getLength(): Return the length of the computation history.
• getPrefix(length): Return a prefix of the computation his-
tory of the requested length, represented as a SEQHASH.
• proofDetermineNext(prefix): Given a prefix of a history
as SEQHASH, run the DetermineNext algorithm on the prefix
and return the next prefix. Since prefix is an ADS, the server
returns a proof of a valid DetermineNext computation.
• proofGetResult(history): Given a complete history as SEQ-
HASH, return the output of the complete computation (as re-
turned by the last step of the history). Since history is an ADS,
the server returns a proof that this is indeed the last element in
history.
All operations besides getPrefix have a straightforward imple-
mentation using the underlying SEQHASH. The proofGetResult
and proofDetermineNext calls depend on SEQHASH’s ability to
perform lookups in O(κ logn).
THEOREM 6.2. After performing an initial suitable computation
of n steps, an honest VERSUM server can respond to any query in
O(κ logn(logn + c)).
PROOF. By SEQHASH’s security proof, all SEQHASH operations
are efficient, even under adversarial input. getLength, getPrefix,
and proofGetResult all have efficient implementations using SEQ-
HASH, running in time O(κ log2 n) or better.
As the computation is suitable, all function calls in the computa-
tion history have a bound number of calls, and so determineNext
runs in time O(cκ logn) to perform c SEQHASH lookups, and then
takes c steps to run the function itself.
Combining both runtimes gives the desired bound.
Building on an efficient and honest server, we can prove VERSUM
correct:
THEOREM 6.3. A single instance of DetermineWrong will de-
clare an honest server wrong with negligible probability.
PROOF. A proof by contradiction. Suppose a VERSUM client
has incorrectly kicked out an honest server.
The honest server cannot have been labeled as an uncooperative
server: it is honest, reachable, and has an efficient implementation
for all API calls.
Instead, the other server must have constructed a DetermineNext
proof of a next computation history different from the honest server’s.
However, the honest server’s claim is, by definition, the result of
an invocation of DetermineNext. This means that somehow, the
other server constructed an invalid DetermineNext proof. This is a
violation of the underlying ADS security property, and can happen
only with negligible probability.
Our final theorem states that VERSUM is both correct and efficient
for a pool of servers:
THEOREM 6.4. A VERSUM client that can reach at least one
honest server out of m servers, will, with high probability, learn
the correct result of a computation in O(mlogn) interactions with
O(mcκ log(n)) local work.
PROOF. By repeatedly refereeing disagreeing servers, a client
will eventually learn the computation’s result with high probability.
Each such interaction requires two getLength calls, O(logn)
getPrefix calls, and a single proofDetermineNext call, for a
total of O(mlogn) interactions.
Verifying the m determineNext proofs will take time O(mcκ logn),
to verify the O(mc) lookups in the computation history, and run m
functions of no more than c steps each.
This correctness statement provides the same security, but not
the same runtime, as Canetti et al.’s RDoC [7], because RDoC does
not assume precomputation. A single invocation of the conflict
resolution protocol in RDoC can take as long as the entire com-
putation, while VERSUM’s conflict resolution protocol takes time
(poly-)logarithmic in the length of the computation.
7. BITCOIN
Our main use-case for VERSUM is processing the Bitcoin block-
chain. This section describes how and why we used VERSUM to
process the Bitcoin blockchain.
7.1 Why use VerSum for Bitcoin?
VERSUM lets lightweight clients securely outsource complex
computations. The main use case for VERSUM in this paper is
to support secure, lightweight Bitcoin clients. Users may need to
perform many kinds of computations over the Bitcoin blockchain,
such as:
8
Figure 8: The partial SEQHASH’s stored in a balanced binary
tree on a VERSUM server to quickly answer getPrefix queries.
Each node stores the concatenation of the SEQHASH’s of its
children so that a server only needs to concatenate O(logn)
SEQHASH’s to respond to any query.
For getPrefix the server must construct a SEQHASH for any
requested length. To do this efficiently, the server stores partially
constructed SEQHASH’s for many different subsequences of the
computation history in a balanced binary tree over the computation
history, as shown in Figure 8. The server constructs this binary
tree when it performs the computation. Each node in the tree stores
the concatenation of the SEQHASH’s of its two children, so that
a SEQHASH covering any prefix can be constructed in O(logn)
SEQHASH concatenations. For performance, getPrefix depends
on SEQHASH’s ability to concatenate two arbitrary SEQHASH’s in
time O(κ(logn + logm)). For a computation history of length n, a
getPrefix call takes O(κ log2 n) time for O(logn) concatenations.
6.5 Security
To formally state VERSUM’s security properties, we have two
theorems guaranteeing VERSUM’s correctness. First, an honest
server will always be able to quickly respond to queries, even in
the case of a computation that contains adversarially constructed
inputs influencing the underlying SEQHASH. This follows from
SEQHASH being adversary-proof. Second, if a VERSUM client can
reach at least one honest server, it will learn the correct result of a
computation with high probability. This follows from the correctness
of Miller et al.’s approach [14].
First, to ensure that a VERSUM server can quickly respond to
all queries, we must make sure the computation is suitable for
VERSUM:
DEFINITION 6.1
(SUITABLE COMPUTATION). A computation
for VERSUM is suitable if it is a purely functional, side-effect-free
computation with short functions. That is, there exists a small con-
stant c such that, already knowing the result of nested functions,
each function can be computed in c steps.