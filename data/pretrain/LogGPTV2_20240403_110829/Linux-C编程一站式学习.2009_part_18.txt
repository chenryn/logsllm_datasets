_tree_maxindex(root->height)）{
/* uninitialised var warning
一般为单行注释，
。内核源代码目录下的1ib/radix-
*slot;
*
*
，和代码之间至少用一>
个
---
## Page 148
这样一个结构体：
5、复杂的结构体定义比函数更需要注释。例如内核源代码目录下的kernel/sched.c文件中定义了
的地方才使用函数内注释。
然的，如果你需要用注释才能解释清楚，
么”（比如函数接口定义）
[CodingStyle]中特别指出，
#ifdef CONFIG_SCHEDSTATS
#endif
#ifdef CONFIG_SMP 
#endif
#ifdef CONFIG_SMP
calculation.
because
 acquire operations must be ordered by ascending &runqueue.
This is the main, per-CPU runqueue data structure.
struct sched_info rq_sched_info;
int cpu;
/* For active balancing 
struct sched_domain *sd;
unsigned
unsigned long nr_uninterruptible;
unsigned long long nr_switches;
unsigned long cpu_load[3];
 unsigned long
struct 
spinlock_t lock;
return 0;
int
int 
int
￥
?
nsigned
 remote CPUs use both these fields when doing load
*
as
This 
 nr_running and cpu_load should be in the same cacheline
 active_
it on another CPU.
push_cpu;
best
over
the
mm struct
*curr,
，函数内的注释要尽可能少用。写注释主要是为了说明你的代码"能做什
expired
load
而不是为了说明“怎样做",
balance;
J nr_running;
*idle;
bal
long
if
*/
*prev_mm;
it got..
timestamp_last_tick;
 那就表示你的代码可读性很差，
*expired, arrays[2];
*/
 migrated
A
the
 counter where only the total sum
task can 
只要代码写得足够清晰，
 afterwards
 the runqueue lock:
 it may decrease
除非是特别需要提醒注意
code)
“怎样做"是一目
8
意
---
## Page 149
中的定义：
1.缩进和空白
9
上一页
 复杂的宏定义和变量声明也需要注释。例如内核源代码目录下的include/linux/jiffies.h文件
extern 
extern u64.
#define 
ACTHZ，
#define TICK_USEC_TO_NSEC(TUSEC) (SH_DIV (TUSEC * USER_HZ * 1000,
ACTHZ and
/* some arch's have a small-data section that can be accessed
/* TICK_USEC_TO_NSEC 
#endif
*
￥
without sampling
 The 64-bit value
but
a value TUSEC for TICK_USEC (can be set bij adjtimex)
unsigned
（(8
unsigned long
unsigned
/* try_to_wake_up() stats 
unsigned long
unsigned
/* schedule()
unsigned
unsigned
/* sys_sched_yield() stats */
_jiffy_data
nsigned
of
*
long
lon
long
lon
 the sequence number
 is not volatile - you MUST NOT read it
J ttwu_local;
ttwu_cnt;
sched
sched_switch;
stats */.
yid_cnt;
yld
yld_
全国嵌入式人才培训基地
act
exp_empty;
empty;
起始页
上一级
 in xtime_lock.
3.标识符命名
149
FI
---
## Page 150
[19] 大小写混合的命名方式是Modern C++风格所提倡的，在C++代码中很普遍，称
3.标识符命名 请点评
2.注释
为CamelCase），大概是因为有高有低像驼峰一样。
标识符命名应遵循以下原则:
4．针对中国程序员的一条特别规定：禁止用汉语拼音做标识符，
3.
2．内核编码风格规定变量、函数和类型采用全小写加下划线的方式命名，
1．标识符命名要清晰明了，
二
一页
全局变量和全局函数的命名一定要详细，不惜多用几个单词多写几个下划线，例如函数
是可以的。
个变量或函数是干什么用的。局部变量和只在一个源文件中调用的内部函数的命名可以简略
用大小写混合的变量命名方式[19],
微软发明了一种变量命名法叫匈牙利命名法（Hungarian notation）
枚举常量）采用全大写加下划线的方式命名，比如上一节举例的函数名radix_tree_insert、
compiler knows the types anyway and can check those, and it only confuses the 
成xmt。我就不多举例了，请读者在看代码时自己注意总结和积累。
出一些缩写惯例,
形成缩写，
页
，较长的单词可以取单词的头几个字母形成缩写。看别人的代码看多了就可以总结
因为它们在整个项目的许多源文件中都会用到，
 可以使用完整的单词和易于理解的缩写。
全国嵌入式人才培训基地
全国嵌入式人才培训基地
，更不要使用匈牙利命名法。
第9章编码风格
3.标识符命名
起始页
一级
词根trans经常缩写成x，例如transmit写
length写成len，window写
，可读性极差。
。短的单词可以通过去元音
 在变量名中用前缀表示
，常量（比如宏定义和
，必须让使用者明确这
一个很有争议
4.函数
150
下一页
下二
---
## Page 151
15
---
## Page 152
每个函数都应该设计得尽可能简单，简单的函数才容易维护。应遵循以下原则：
4.函数请点评
3.标识符命名
5．比较重要的函数定义上侧必须加注释，说明此函数的功能、参数、返回值、错误码等。
4．执行函数就是执行一个动作，
3．函数不要写得太长，
2．函数内部的缩进层次不宜过多，
1．实现一个函数只是为了做好一件事情，
L二
很难维护了，应该考虑分割成多个函数。
另一种度量函数复杂度的办法是看有多少个局部变量，5到10个局部变量已经很多了，再多就
数肯定会超长，而且往往不可重用，维护困难。
复杂度，
简单的，
函数超过两屏就应该考虑分割函数了。
了，应考虑分割成更小的函数（Helper Function）来调用。
只是长度很长，
这种情况很常见，
这是可以的，
，建议在24行的标准终端上不超过两屏，
 这倒没关系。例如函数由-
例如TCP协议的状态机实现。
，函数名通常应包含动词，例
一般以少于4层为宜。如果缩进层次太多就说明设计得太复杂
全国嵌入式人才培训基地
全国嵌入式人才培训基地
第9章编码风格
，不要把函数设计成用途广泛、面面俱到的，这样的函
4.函数
起始页
上一级
太长会造成阅读困难，
其中有非常多
一个函数在概念上是
5. indent工具
如果一
下一页
下一页
---
## Page 153
5. indent工具 请点评
同的项目，但绝不能因为有了indent工具就肆无忌惮，
途决定改变编码风格（这很少见），或者往某个项目中添加的几个代码文件来自另一个编码风格不
如果你采纳本章介绍的内核编码风格，
章介绍的代码风格了：
自动用一个Tab代替。注意indent命令会直接修改原文件，
-kr选项表示K&R风格，
码风格：
indent工具可以把代码格式化成某种风格，
其它编码风格的选项，
添
添加适当
文
件，
当然原有的空行肯定不会被indent删去的。
页
cloth):\n");
白的空行，
int main(void)
#include 
#include
#include 
cat main.c
return 0;
while
srand(time(NULL));
char gesture[3][10] = { "scissor", 
，添加了必要的缩进和空白，
具体请参考Man Page。
(1)
else
else if "
printf("Your gesture: %s\tComputer's gesture: %s\n",
printf
computer = 
("\nInput your gesture (0-scissor 1-stone 2-
printf("You lose!\n");
printf("Draw!\n");
printf("You win!\n");
return
printf(
，基本上-kr-i8这两个参数就够用了。indent工具也有支持
resul
rand()% 3;
全国嵌入式人才培训基地
result, ret;
第9章编码风格
，例如把例9.1“缺少缩进和空白的代码"格式化成内核编
5. indent工具
 computer + 4)
 man 
 有时候indent工具的确非常有用,
&man);
-kr-i8两个选项格式化出来的代码已经很符合
较长的代码行也会自动折行。美中不足的是没
 gesture[computer])
一开始把代码写得乱七八糟，最后再依
，而不是打印到屏幕上或者输出到另一个
"stone", "cloth" };
%3
1:
 则每8个缩进空格
比如某个项目中
153
下二
本
有
---
## Page 154
4.函数
靠indent去清理。
全国嵌入式人才培训基地
起始页
上一级
第10章gdb
---
## Page 155
实例来讲解如何使用gdb调试程序，在每个实例后面总结一部分常用的gdb命令。
致一个错误现象消失了但Bug仍然存在，
种很强大的调试工具gdb，可以完全操控程序的运行，使得程序就像你手里的玩具一样，叫它走就
执行程序并分析打印结果,
程序中除了一目了然的Bug之外都需要一定的调试手段来分析到底错在哪。
4.段错误
3.观察点
2.断点
第 10 章 gdb 请点评
5. indent工具
细
丰富了，
走
动
1.单步执行和跟踪函数调用
目录
考，
手修正Bug了
段只有一种：根据程序执行时的出错现象假设错误原因，然后在代码中适当的位置插入printf，
上二
 根据现象如何假设错误原因，
叫它停就停,
页
 并且随时可以查看程序中所有的内部状态，
，如果结果和预期的不一样，
，如果结果和预期的一样,
以及如何设计新的现象去验证假设，这都需要非常严密的分析和
全国嵌入式人才培训基地
全国嵌入式人才培训基地
甚至是把程序越改越错。
部分I.C语言入门
第10章gdb 
，就根据结果做进一步的假设和分析。本章我们介绍-
起始页
上一级
调试手段就更加丰富了。
就基本上证明了自己假设的错误原因,
，比如各变量的值、传给函数的参数、
 本章通过初学者易犯的几个错误
1.单步执行和跟踪函数调用
但要注意，
，到目前为止我们的调试
即使调试手段
就可以
5
下一页
---
## Page 156
在编译时要加上-g选项，生成的可执行文件才能用gdb进行源码级调试:
不同，
误现象，
到100应该是5050。
第一个结果正确[2Q]，第二个结果显然不正确，在小学我们就听说过高斯小时候的故事，从1加
到100，再把结果保存下来，最后打印的两个结果是：
因，只要前面几章学得扎实就应该能看出来。
如果代码是错的，
看下面的程序:
1.单步执行和跟踪函数调用 点评
上一页
错误的数据会导致错误的结果。在动手调试之前，读者先试试只看代码能不能看出错误原
例 10.1.函数调试实例
，这种情况不应该怀疑代码而应该怀疑数据，
GNU gdb 6.8-debian 
S
result[ij=5105 
result[0]=55
 gcc -g main.c -o main
gdb
main
result[i]);
int main(void)
int add_range(int low, int high)
#include 
那为什么第一次的结果能对呢？然而第一次和第二次运行时相关的数据却有可能
一段代码，
return 0; 
result[0]
int result[100];
return sum;
 第一次运行结果是对的，
 在main函数中首先从1加到10，把结果保存下来，然后从1加
 sum 
1.单步执行和跟踪函数调用
= sum + i;
add
全国嵌入式人才培训基地
第10章gdb
因为第一次和第二次运行的都是同一段代码，
第二次运行却不对，
这是很常见的一类错
---
## Page 157
也可以进一步查看某一类别中有哪些命令，
查看命令的类别：
的第几行,