如果使用 session 跟踪，可以很方便地避免上述情况的发生： 
]+@([-a-z0-9]+\.)+[a-z]{2,}$/i'; 
if (preg_match($email_pattern, $_POST['email'])) 
{ 
$clean['email'] = $_POST['email']; 
$user = $_SESSION['user']; 
《PHP 安全基础详解》        www.528163.cn 提供 
$new_password = md5(uniqid(rand(), TRUE)); 
if ($_SESSION['verified']) 
{ 
/* Update Password */ 
mail($clean['email'], 'Your New Password', $new_password); 
} 
} 
?> 
尽管上例省略了一些细节（如更详细的 email 信息或一个合理的密码），但
它示范了对用户提供的帐户不加以信任，同时更重要的是使用 session 变量为保
存用户是否正确回答了问题($_SESSION['verified'])，以及正确回答问题的用户
($_SESSION['user'])。正是这种不信任的做法是防止你的应用产生漏洞的关键。 
这个实例并不是完全虚构的。它是从 2003 年 5 月发现的 Microsoft Passport
的漏洞中得到的灵感。请访问 http://slashdot.org/article.pl?sid=03/05/08/122208 看
具体实例、讨论及其它信息。 
2.3. 文件上传攻击
文件上传攻击
文件上传攻击
文件上传攻击 
有时在除了标准的表单数据外，你还需要让用户进行文件上传。由于文件在
表单中传送时与其它的表单数据不同，你必须指定一个特别的编码方式
multipart/form-data： 
一个同时有普通表单数据和文件的表单是一个特殊的格式，而指定编码方式
可以使浏览器能按该可格式的要求去处理。 
允许用户进行选择文件并上传的表单元素是很简单的： 
该元素在各种浏览器中的外观表现形式各有不同。传统上，界面上包括一个
标准的文本框及一个浏览按钮，以使用户能直接手工录入文件的路径或通过浏览
选择。在 Safari 浏览器中只有浏览按钮。幸运的是，它们的作用与行为是相同的。 
为了更好地演示文件上传机制，下面是一个允许用户上传附件的例子： 
《PHP 安全基础详解》        www.528163.cn 提供 
Please choose a file to upload: 
隐藏的表单变量 MAX_FILE_SIZE 告诉了浏览器最大允许上传的文件大小。
与很多客户端限制相同，这一限制很容易被攻击者绕开，但它可以为合法用户提
供向导。在服务器上进行该限制才是可靠的。 
PHP 的配置变量中，upload_max_filesize 控制最大允许上传的文件大小。同
时 post_max_size（POST 表单的最大提交数据的大小）也能潜在地进行控制，因
为文件是通过表单数据进行上传的。 
接收程序 upload.php 显示了超级全局数组$_FILES 的内容： 
为了理解上传的过程，我们使用一个名为 author.txt 的文件进行测试，下面
是它的内容： 
Chris Shiflett 
http://shiflett.org/ 
当你上传该文件到 upload.php 程序时，你可以在浏览器中看到类似下面的输
出： 
Array 
( 
[attachment] => Array 
( 
[name] => author.txt 
[type] => text/plain 
[tmp_name] => /tmp/phpShfltt 
[error] => 0 
[size] => 36 
) 
《PHP 安全基础详解》        www.528163.cn 提供 
) 
虽然从上面可以看出 PHP 实际在超级全局数组$_FILES 中提供的内容，但
是它无法给出表单数据的原始信息。作为一个关注安全的开发者，需要识别输入
以知道浏览器实际发送了什么，看一下下面的 HTTP 请求信息是很有必要的： 
POST /upload.php HTTP/1.1 
Host: example.org 
Content-Type: multipart/form-data; boundary=----------12345 
Content-Length: 245 
----------12345 
Content-Disposition: form-data; name="attachment"; filename="author.txt" 
Content-Type: text/plain 
Chris Shiflett 
http://shiflett.org/ 
----------12345 
Content-Disposition: form-data; name="MAX_FILE_SIZE" 
1024 
----------12345-- 
虽然你没有必要理解请求的格式，但是你要能识别出文件及相关的元数据。
用户只提供了名称与类型，因此 tmp_name，error 及 size 都是 PHP 所提供的。 
由于 PHP 在文件系统的临时文件区保存上传的文件（本例中是
/tmp/phpShfltt），所以通常进行的操作是把它移到其它地方进行保存及读取到内
存。如果你不对 tmp_name 作检查以确保它是一个上传的文件（而不是/etc/passwd
之类的东西），存在一个理论上的风险。之所以叫理论上的风险，是因为没有一
种已知的攻击手段允许攻击者去修改 tmp_name 的值。但是，没有攻击手段并不
意味着你不需要做一些简单的安全措施。新的攻击手段每天在出现，而简单的一
个步骤能保护你的系统。 
PHP 提供了两个方便的函数以减轻这些理论上的风险：is_uploaded_file( ) 
and move_uploaded_file( )。如果你需要确保 tmp_name 中的文件是一个上传的文
件，你可以用 is_uploaded_file( )： 
如果你希望只把上传的文件移到一个固定位置，你可以使用
move_uploaded_file( )： 
最后你可以用 filesize( ) 来校验文件的大小： 
这些安全措施的目的是加上一层额外的安全保护层。最佳的方法是永远尽可
能少地去信任。 
2.4. 跨站脚本攻击
跨站脚本攻击
跨站脚本攻击
跨站脚本攻击 
跨站脚本攻击是众所周知的攻击方式之一。所有平台上的 Web 应用都深受
其扰，PHP 应用也不例外。 
所有有输入的应用都面临着风险。Webmail，论坛，留言本，甚至是 Blog。
事实上，大多数 Web 应用提供输入是出于更吸引人气的目的，但同时这也会把
自己置于危险之中。如果输入没有正确地进行过滤和转义，跨站脚本漏洞就产生
了。 
以一个允许在每个页面上录入评论的应用为例，它使用了下面的表单帮助用
户进行提交： 
Name:  
Comment:  
《PHP 安全基础详解》        www.528163.cn 提供 
程序向其他访问该页面的用户显示评论。例如，类似下面的代码段可能被用
来输出一个评论($comment)及与之对应的发表人（$name）： 
$name writes:"; 
echo "$comment"; 
?>  
这个流程对$comment 及$name 的值给予了充分的信任，想象一下它们中的
一个的内容中包含如下代码： 
如果你的用户察看这个评论时，这与你允许别人在你的网站源程序中加入
Javascript 代码无异。你的用户会在不知不觉中把他们的 cookies(浏览网站的人)
发送到 evil.example.org，而接收程序(steal.php)可以通过$_GET['cookies']变量防
问所有的 cookies。 
这是一个常见的错误，主要是由于不好的编程习惯引发的。幸运的是此类错
误很容易避免。由于这种风险只在你输出了被污染数据时发生，所以只要确保做
到如第一章所述的过滤输入及转义输出即可 
最起码你要用 htmlentities( )对任何你要输出到客户端的数据进行转义。该函
数可以把所有的特殊字符转换成 HTML 表示方式。所有会引起浏览器进行特殊
处理的字符在进行了转换后，就能确保显示出来的是原来录入的内容。 
由此，用下面的代码来显示评论是更安全的： 
{$html['name']} writes:"; 
echo "{$html['comment']}"; 
《PHP 安全基础详解》        www.528163.cn 提供 
?>  
2.5. 跨站请求伪造
跨站请求伪造
跨站请求伪造
跨站请求伪造 
跨站请求伪造(CSRF)是一种允许攻击者通过受害者发送任意 HTTP 请求的
一类攻击方法。此处所指的受害者是一个不知情的同谋，所有的伪造请求都由他
发起，而不是攻击者。这样，很你就很难确定哪些请求是属于跨站请求伪造攻击。