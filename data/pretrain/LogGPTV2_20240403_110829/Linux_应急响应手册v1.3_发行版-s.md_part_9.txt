#1/bin/sh
builtin vait *$8*
0x10BASH函数
 bash
在bash 中输入一个命令，如果有多个同名指令，bash需要按照一定规则去取优先级高的一个执行，bosh命令的搜索顺序为：
1、别名，使用alias创建的命令
2、关键字，如if，for
3、函数
4、内置命令：如cd，pwd等
5、外部命令，在PATH路径中寻找
详细可 以参考 https://www.cnblogs.com/zhiminyu/p/14388997.html
系统默认就设置了一些函数，可以通过declare命令来进行查看
declare -f
查看所有函数的具体定义内容
---
## Page 76
内容比较长，肉眼比对比较麻烦，工具化参考小技巧篇章第7节
[ubuntu server 16.04 64位】默认情况
expand_tilde_by_ref ()
if [[ ${1} == \-* ]]; then
if [[ $(=1） */* 1]; then
,{/+}./{+/\/i}s,=IS [As
else
fi;
fi
_get_cword_at_cursor_by_ref ()
local cword vords=():
aono spzon T$.gaxAq sprodmooatquasseax
local i cur index=$CORP_POINT lead=${COMHP_LINE:O:$COMP_POINT);
if [[ $index =gt 0 s& (=n $lead ss =n $(lead//[[=space:]]) ) 1]: then
cur=$COMP_LINE;
for ((i = 0; i $P $.I=s
_git_ps1 ()
local exit=$?;
local pcnode=no;
1ocal detached=no;
1ocal pslpc_start='\uf\h:\v
---
## Page 77
local printf_fornat=′ (ts)';
case *$#” in
2 13)
pemode=yes;
p=lpc_end="$2";
ps1=*$pslpc_start$ps1pc_end*
FF
0|1)
*)
return $exit
F
esac;
local ps1_expanded-yes;
[=z *$2SH_VERSION" ] II [I =o PROMPr_SUBST 1] I| ps1_expanded=no;
[=z *$BASH_vERSIow" ] |] shopt =q promptvars |l ps1_expanded=no;
local repo_info rev_parse_exit_code;
repo_info="$(git rev-parse --git-dir --is-inside-git-dir
inside-work-tree
rev_parse_exit_code="$?";
if [ =z “$repo_info" ]; then
return $exit;
fi;
local short_sha;
if I*$rev_parse_exit_code" ="o* ]; then
short_sha="$(repo_info**
repo_info="$(repo_infot
*}*;
fi;
local inside_worktree="${repo_info#
repo_info="$(repo_infot
*}:
local bare_repo=*${repo_info##*
repo_info="$(repo_infot
*}":
local inside_gitdir=*${repo_info##*
local g=*${repo_infot
if | “true" ="$inside_worktree” ] && [ -n “${GIT_PS1_HIDE_IF_PWD_IGNORED-)" ] && [*s(git
config =-bcol bash.hideIfFwdIgnored)* != "false' ] &s git check-ignore =g -; then
return $exit;
fi;
local r=*';
1ocal b=**;
---
## Page 78
local total=**;
uu [abxam=sq/bs. p=] 
git_eread *$g/rebase=nerge/msgnum′ step;
git_eread *$g/rebase=merge/end* total;
if [ -f “$g/rebase=merge/interactive" ]; then
r="|REBASE=i";
else
r="|REBASE=m";
fi;
else
uau 1Adde=srqa/bs.p=1 
_git_eread *$g/rebase=apply/next" step;
_git_eread *$g/rebase=apply/last" total;
git_eread *$g/rebase=apply/head=name” b;
r="|REBASE";
else
r="| AM" ;
else
r="|AM/REBASE";
fi;
fi;
else
r="|MERGING*;
else
if [ -f “$g/CHERRY_PICK_HEAD" ]; then
r="|CHERRY=PICKING";
else
if [=f *$g/REVERT_HEAD′ ]; then
r="|REVERTING";
else
if [ =f *$g/BIsECT_LOG” ]; then
r="|BISECTING";
fi;
fi;
fi;
fi;
fi;
if [ =n *$b" ]; then
else
if [ =h “$g/HEAD′ ]; then
b="$(git syabolic=ref HEND 2>/dev/null)";
else
local head=**;
if ! git_eread "$g/HEAD" head; then
return $exit;
fi;
---
## Page 79
b="$(head#ref: }";
if I*$head” =“$b" ]; then
detached=yes;
b="s(
case *${GIT_PS1_DESCRIBE_STYLE-}* in
(contains)
git describe ==contains HEAD 
(branch)
git describe ==contains ==all HEAD 1
(describe)
git describe HEAD ::
(* | default)
git describe ==tags ==exact=match HEAD 11
***usroqs$,=q 1(nu// /dev/nu11; then
s="$";
fi;
woq nu/ap/ /dev/null | tr"0n′"\n")";
vhile read =r key value; do
case *$key" in
bash shovupstream)
GIT_PS1_SHOWUPSTREAM="$value";
p=*";
return;
fi
FF
svn-remote.*, ur1)
svn_remote[$( (${#svn_renote[]} + 1))]=*$value”;
svn_url_pattern=*$svn_url_pattern\\|$value*;
upstream=svn+git
esac;
,4ndznos。 >>> auop
for option in ${GIT_PS1_SHOWUPSTREAM):
do
case “$option′ in
git |svn)
upstream="$option"
11
verbose)
verbose=1
legacy)
F
legacy=1
name )
---
## Page 82
esac;
done;
case “$upstream” in
git)
upstream=*e(upstrean)"
F
svn*)
local =a svn_upstream;
svn_upstream=($(git log ==first=parent -1
-grep-"*git=svn=id1 
$(svn_url_pattern*??)\)* 2>/dev/null));
if [[ 0 =ne ${#svn_upstream[@]} 1]; then
svn_upstrean=${svn_upstream[${#svn_upstrean[]} = 2]} ;
svn_upstrean=${svn_upstreamee*};
{[]uu)=dou [eo
for ((n=l; n /dev/null)"; then
local commit behind=0 ahead=0;
for commit in $commits;
do
case “$commit" in
 0; i=- ))
do
if [[ "${coMP_woRDs[i]}* == =* ]]; then
echo *${coMP_WORDS[i]}";
break;
fi;
done
_grub_get_options_from_help ()
1ocal prog;
if [ $# =ge 1 ]; then
prog=*$1*;
else
([olsagon anoo)s,=boxd
fi;
local i Irs=* "
for i in $(Lc_ALL=c $prog --help);
do
case $i in
==*)
（+-F）s.oyoo
ioesa
done
_grub_get_options_from_usage ()
1ocal prog;
if [ $# =ge 1 ]; then
prog=*$1*;
else
---
## Page 85
prog
fi;
local i IFS=*
for i in $(LC_ALL=C $prog
do
case $i in
\[==+\] )
i=${i#[}:
echo ${i$?(=*)])
esac;
done
_grub_list_menuentries ()
1ocal cur="$(CoMP_WORDS[CoMP_CWORD]}*;
local config_file=$ (grub_dir)/grub.cfg;
local IFS='