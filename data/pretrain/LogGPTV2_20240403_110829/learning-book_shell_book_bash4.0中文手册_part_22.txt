它是进行文件名扩展时使用的模式。它作用于通过前面的选项和参数生成的补全列表，并
把每个与过滤模式匹配的条目副除。模式中前导的"！"表示否定：这时会删除与过滤模式不匹配的条
目。
-P前级
在处理完所有其它的选项后，给每个补全的条目加上前级。
-S后级
在处理完所有其它的选项后，给每个补全的条目加上后级。
返回状态是真，除非指定了无效的选项、或者指定了“p"或"-r"之外的选项却没有指定名称参数、或者修
改了名称中没有任何补全方法定义过的一个选项、或者输出时发生错误。
C.compopt
conpopt[o选项][+o选项][名称]
修改每个名称指定的补全选项：如果没有指定名称则修改当前执行的补全的选项。如果也没有指定选项，则
显示每个名称或当前补全所用的选项。选项可能的取值就是上面的内部命令conplete的有效选项。返回状
态是真，除非指定了无效的选项、或者修改了名称中没有任何补全方法定义过的一个选项、或者输出时发生
错误。
p89
目录
BASH 中文文
---
## Page 101
第九章历史的交互使用
第九章历史的交互使用
本章从用户的角度介绍了如何使用GNU的历史库功能。可以把这里的内容作为用户指南。关于如何在
其它程序中使用GNU的历史库功能，请参考《GNUReadline库参考手册》
9.1Bash的历史功能
如果使用了内部命令Bet的“-ohistory”选项（参见586[内部命令set]，p43），shell就会允许访问历史
命令，即以前输入的命令。ShelI变量HISTSIZE控制历史中所保存命令的数目，即只保存最后$HISTSIZE
条（默认是5OO）命令的文本。根据shell变量HISTIGNORE和HISTCONTROL的值，shell会在进行参数和变
量扩展之前及历史扩展之后把每条命令保存在历史中。
Shell在启动时会用HISTFILE变量指定的文件（默认是-/.bash_history）对历史进行初始化。如果有
必要，就截断HISTFILE变量指定的文件，使它包含的行数不超过HISTFILESIZE变量的值。在交互式的
shell 退出运行时，把历史中最后HISTSIZE 行复制到 HISTFILE变量指定的文件中。如果设置了shell 选
项histappend（参见S87[内部命令shopt]，p46），则把这些行附加到历史文件中，否则就覆盖历史文件。如
果重置了HISTFILE，或者历史文件不可写，则不保存历史。保存了历史以后，就把历史文件截断到不超过
$HISTFILESIZE行。如果没有设置HISTFILESIZE则不截断历史文件。
如果设置了HISTTIMEFORMAT，则把与每条历史关联的时间戳信息也一并写入到历史文件中，时间信息
用历史注释字符标志。在读取历史文件时，以历史注释字符和紧跟其后的数字开头的行会被当作下一条命
令的时间截。
可以用内部命令fc来列出、编辑和重新执行部分历史：也可以用内部命令hiBtory显示和修改历史，
或者操纵历史文件。在进行命令行编辑时，每种编辑模式中都有搜索命令（参见&Bhigtory]：p91）来访问
历史。
Shell可以控制在历史文件中保存哪些命令。HISTCONTROL和HISTIGNORE变量只保存输入命令中的一
部分条目。如果设置了shell选项cndhist，shell就会试图在同一条目中保存多行命令的每一行，必要时可
能会加上分号以保证语法的正确性。Shell选项1ithist会使shell用行内的换行符，而不是分号。可以用
ghopt来设置这些选项。参见s4.3.2[内部命令shopt].p45的介绍。
9.2Bash历史内部命令
Bash提供了两个命令来操纵历史和历史文件。
A.fc
fc[-e编辑器][-1nr][第一个][最后一个]
fc=B[模式=替换文本][命令]
原文说是“上一条”：而实际上，时间信息在命令之前，所以应该是“下一条”。
BASH中文文档
064
---
## Page 102
9.2BASH历史内部命令
第九章历史的交互使用
符串（用来指定最近用这些字符开头的命令）或数字（历史中的位置索引：负数表示从当前命令开始索引）
如果没有指定最后一个，它就和第一个相同：如果没有指定第一个，则在编辑时它就是前一个命令，在列表
时就是-16。如果指定了“-1"选项助记司：List，列表，就在标准输出中列出这些命令：“=n"选项助记词：mmber，行
号可以在列出命令时不显示行号：而"r"选项助记司：Borerbe，创序使列表倒序排列。否则2l，启动编辑器并打
开包含这些命令的文件。如果没有指定编辑器就使用变量S{FCEDIT：=S{EDITOR：=Vi}}扩展后的值：也就
是说，如果设置了FCEDIT变量就使用它，或者如果设置了EDITOR变量就使用它，如果都没有设置就用vi.
编辑结束以后则显示并执行编辑过的命令。
在第二种形式中，把每个选中的命令中与模式匹配的文本改成替换文本后执行。
fc命令很有用的别名是r-"fc=B'，这样输入"rcc"就会执行最后一个以cc开头的命令，而输
入r"就会执行最后一个命令，参见56.6[别名]，p62。
B.
history
history [μ]
history -c
history=d偏移量
history[-anru][文件名]
history -pe 参数
如果没有选项，列出历史和行号.前面带有“的行已经被修改过。参数n只列出最后n行。如果设置了
shell变量HISTTIMEFORNAT且不为空，就用它作为8trftine的参数来显示每条历史所关联的时间戳。在
格式化的时间截和历史行之间没有空白。
如果指定了选项，就会有下面的含义：
=C
清除历史。可以把它和其它选项一起使用来完全替换历史，助记词：clar，消录
d偏移量
删除偏移量处的历史行。偏移量应该是列出历史时显示的数值。助记词：Delte，删除
国
把新的历史行（即当前的 Bash会话开始后输入的历史行）附加到历史文件中。功记词：spend，附如
把历史中尚未读取的行附加到当前的历史中。这些行是当前的Bash会话开始后附加到历史文件中去
的。财记司：Sov，新行
-r
读取历史文件，把其内容附加到当前的历史中。助记词：Bas，读取
=V
把当前的历史写入到历史文件中。助记词：Vrita，写入
对参数进行历史扩展并在标准输出上显示其结果，而不是把结果存放在历史中。助记词：ctP-t，输出
把参数作为单个条目附加到历史中。助记词：Single，单个
如果使用了“-w”、“-r"、“=a"、“n”选项中中的任意一个并且给定了文件名，就把文件名当作历史文件。
如果没有给定文件名，则使用“HISTFILE"变量的值。
叫即指定了"-”选项时。
所以如果想把时同载和历史行之间用空白分隔，必须在HISTTIHEFORNAT的后面显式指定这些空白。
+e ee e e e ee o e e e+ + e + ee e e e e e e e e ee e e e ee o e o ee e
p91
目录
BASH 中文文
---
## Page 103
第九章历史的交互使用
9.3历史扩展
$9.3历史扩展
历史库提供了类似于cb中的历史扩展功能。本节介绍操纵历史信息的语法。
历史扩展把历史中的单词引入到输入流中，这样易于重复输入命令、在当前输入行中插入以前命令的参
数、或者快速修改以前命令中的错误。
历史扩展有两个步骤：第一步决定在替换时应该使用历史中的哪一行，第二步选择选定行的部分文本以
包含到当前行中。从历史中选定的行叫做“条目”：该行中要操纵的文本部分叫“单词”，可以使用各种修饰符
来控制选中的单词。与Bash一样，选中的行被拆分成单词：被引用的多个单词当作一个单词。历史扩展由
历史扩展字符（默认是"！"）引入。只有“"和“"可以对历史扩展字符转义。
有些可以用内部命令ehopt（参见&4.3.2[内部命令shopt],p45）设置的shell选项用来调整历史扩展的
行为。如果设置了shell选项histverify，并且使用了Readlline，则历史扩展不会立即传给shell 解释器，
而是把扩展后的命令行重新加载到Readline的编辑缓存中以备进一步修改。如果使用了Readline并且设置
了shell选项histreedit，则历史扩展失败时将重新加载到Readlline的编辑缓存中以备更正。在进行历史
扩展之间，可以用内部命令history的“-p选项来查看历史扩展如何进行。面内部命令history的“=g”选
项可以用来把命令直接加入到历史文件中却并不择午，这样它就可以在以后使用。这如果和Readine一起
使用将会非常有用。
Shell可以通过histchars变量控制历史扩展机制所使用的各种字符（参见s5.2[Bash的变量]，p51），
还可以在写入历史文件时用历史注释字符来标志历史中的时间藏。
89.3.1条目指示符
条目指示符指向历史中的命令行。
回
开始历史替换，除非后面跟着空格、制表符、行结束符、“"、或“"（如果用内部命令shopt打开了
extglob选项）.
!n
选择命令行n。
选择向后第n行命令。
！
选择前一条命令，它和"-1"是等价的。
！字符串
选择最近以字符串开头的命令。
！？字符串[？
选择最近包含字符串开头的命令，如果字符串后面紧跟着换行符就可以省略结尾的"？”。
字符串一字符串二
快速替换。重复最后的命令，并把字符串一替换成字符申二：它和！！：s/字符串
/字符串二是等价的。
！
目前已经输入的整个命令。
9.3.2
单词指示符
单词指示符用来从选定条目中选择指定的单词。条目指示符和单词指示符之间用“："分隔：如果单词指
示符以""”、“$"、“、“-”、“"开头，则可以省略分隔符。单词从行首开始数起，第一单词序号为0.插
入到当前行中时，这些单词用空格分开。例如，
ii
指定前一条命令。如果输入这个指示符则整个重复前一条命令，
！!：$
指定前一条命令的最后一个参数：可以简写为！$。
!fi:2
指定最近以字母fi开头的命令的第二个参数。
BASH 中文文档
目录
p92
---
## Page 104
9.3历史扩展
第九章历史的交互使用
下面是单词指示符：
0
即零，第零个单词。对大多数命令而言，它是指命令名。
第n个单词。
第一个参数（单词）。
最后一个参数。
%
最近“?字符串？"匹配的单词。
单词范围。“0-y”可以简写为"-y”
除了第零个以外的所有单词，和“1-$同义。如果条目中只有一个单词，使用“也不会出错，而是返
回空字符串。
X*
“x-$的简写形式。
x=
和"x*”一样，是“x-$"的简写形式，但是忽略最后一个单词。
如果使用单词指示符时没有用条目指示符，则把前一条命令作为条目
修饰符
在可选的单词指示符后面，可以加上下列一个或多个修饰符，每个修饰符前都有"：”。
h
去掉文件名的尾部，只保留头部。
t
去掉文件名的头部，只保留尾头部。
去掉结尾的扩展名，只保留文件基名。
去掉扩展名以外的所有部分。
P
打印新的命令但不执行。
引用替换后的单词，以备进一步替换。
X
和“a”一样引用替换后的单词，同时还在空格、制表符、换行符的地方把单词分开。
/旧词/新词/
把条目中的第一个旧词替换成新词。在"的地方可以使用任何分隔符。在旧词和新词中
要用到分隔符的地方可以用一个反斜杠对分隔符转义。如果新词中出现“”，就替换成旧词：可以使用
&
重复上次替换。
使替换在整个条目中进行，和"g”一起使用，例如ge/old/nev/，或者和“”一起使用。
G
对条目中的每个单词都执行一次“修饰符。
86d
目录
BASH 中文文
---
## Page 105
第十章BASH的安装
第十章Bash 的安装
本节提供了在Bash支持的不同系统上的基本安装指导。本版本支持GNU操作系统，几乎每个UNIX
版本，以及几个非UNIX系统，例如 BeOS 和Interix。还有针对MS-DOS、OS/2、Windows 等系统的独
立移植版本。
$10.1基本安装
下面介绍Bash的安装步骤。编译Bash最简单的方法是：
①切换到包含源文件的目录并输入./configure以便在系统中配置Bash。如果在老版本的SystemV
上使用csh，则需要输入sh./configure以防止ceh自已去执行配置。配置要花一点时间。运行中
它会输出一些信息告诉用户它正在检查什么功能。
2输入make来编译Bash和bashbug
一个错误报告的脚本。
③可选的，输入maketeste来运行Bash的测试用例.
④输入makte install来安装bash和bashbug.这一步还会安装帮助手册和Info文件[1]。
配置脚本会试图支猜测编译时所需的各个和系统相关的变量值。这些值用来在包的每个目录（即顶级目录、
builting、doc、support，还有lib下面的每个目录，以及其它几个目录）下面生成Makefile文件。它
还会生成一个包含系统相关的定义config.h文件。最后，它会生成一个叫config-Btatus的脚本，以后
可以用它来重新生成当前的配置：还有一个叫config-log的文件来存放编译时的输出（主要用于调度配置
脚本）。有时候config-cache文件包含一些不想要的结果：这时可以删除或修改它。在Bash目录的命令
提示符下，可以输入下面的命令以获得配置脚本所接受的更多选项和参数：
bash$./configure -=help
如果想在编译Bash时做一些额外配置，则需要了解配置脚本是怎么决定是否这样配置的，并把代码不
同部分以及步骤发送到bash-malntalnersgmuorg以便在下次发布时包含这些改动。
configure.in文件是一个叫Autoconf的程序用来生成配置脚本的。如果修改配置，或者使用新版本
的Autoconf重新生成配置，只需要这个文件就行了-这时要确保使用2.50或更高版本的Autoconf。
可以用makeclean在源文件目录删除二进制程序文件和目标文件。如果还要删除配置脚本生成的文
件（以便为不同的电脑编译Bash），则输入make distclean
指可以用nfo命令或者emsos 的[C-h-]命令查看的texinfo文件。
BASH 中文文档
p94
---