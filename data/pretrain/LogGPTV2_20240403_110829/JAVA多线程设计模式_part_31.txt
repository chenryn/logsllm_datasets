Result 
称
uturardult
Puhupel
图12-1范例程序的类图
进行实际处理的类（实现ActiveObject接L.l）
表示实际执行结果的类
Future Pattern 中用来品示执行结果的抽象类
display String方法
MethodRequest 类的子类
makeString方法（建立字符串）所对应的类，
衣示访求的抽象类
MethodRequest对象可依次存放的类
execute MethodRequest 对象的类
ActivcObject 接丨!）的类
产生“主动对象”的类
表示执行结果的抽象类
Active Object—一接受异步消息的主动对象
Deegabes
Rullarult
Creae
Eallcha
说
显示字符串）所对应的类，
 Setg a RgarReault
lag ayet.ringreag
H
string
强
Cals 
续1表
1
12
---
## Page 312
DisplayClientTherad 线程的实例（Chris）。
MakerClientThread 与 DisplayClientTherad 线程。
使用端：Main类
298
‘ActiveObject 对象”。
在此建立了两个MakerClientThread的实例（Alice与Bobby），
astxing 的取群区
因为“实现ActiveObject 接口的类的实例”过于冗长不易阅读，后文就称之为
Main 类（List 12-1）用来操作作测试。Main 类使用 ActiveObjectFacorty 类的
createActiveobject():
public class Main l
import. activeobject.ActiveobjectFactory;
import activeobject.Activeobject;
List 12-1
public static void main(String[l args) {
new DisplayclientThreaa("Chris", activeobject) .start ();
new MakerclientThread("Alice", activeobject).start ();
new MakerClientThread("Bobby", activeobject).start(i;
Activeobject
操作测试用的 Main 类（Main.java）
otreRe
Ak+5115g
SEring
getRaburlu
 activeobject
图12-2范例程序的类图
Lnvoke
shadulareg
string
ActiveobjectFactory.
makestring
1
与一个
*alRedu
---
## Page 313
是拿来执行其他的操作。
9章），实际的返国值要使用 getResultValue 方法获取。
送出“建立字符出”这个异步消息。
个对象的 makeString方法。
使用端：MakerClientThread 类
（建立字符串）的线程。
程序在这里虽然使用 Thread.sleep 方法停住约10毫秒，这个位置在正式使用时，
调用makeString方法以后，会马上回来。这个调用操作等同于对“主动对象“
activeObject字段，存放着 ActiveObject 对象。MakerClientThread类，会调用这
makeString 方法的返回值是 Result类型，但实际上这里使用了Future Pattern( 第
MakerClientThread（List 12-2）类是用来调用“主动对象”的 makeString 方法
System.out.println(Thread.currentThread().getName() + ": value =
public class MakerClientThread extends Tnread {
import activeobject.Result;
import act:veobject.Activeobject;
List12-2
+ valuel;
String value = (String)result.getResultVaiue(l;
Thread.sleep(10);
Result result = activeobject.makestring (i, fillchar):
public void runt) {
pubiic MakerClientThread (String rame, ActiveObject activeObject)
private final char fillchar;
private final Activeobject activeobject;
try 
this.fillchar = rame.charAt(0);
this.activeobject = activeob]ect;
super{name];
catch (InterruptedException e)
MakerClientThread 类 ( MakerClientThread.java)
for
！！有返回值的调用
（int i= C; true; i++} {
Active Object-
一接受异步消息的主动对象
净12
---
## Page 314
也就是“主动对象”的程序部分。
“主动对象”端：ActiveObject接口
是在线程的名称后面加上0、1、2、……·的流水号。
相当上对“上动对象”送出“显示字符中”的异步消息。这里显示的字符串（sting)，
由）。
ActiveObject对象的线程。
使用端：DisplayClientThread 类
以上是使用ActiveObject 对象的使用端。接下来就是ActiveObject 的实现端，
DisplayClientThrcad 类（List 12-3）“j MakerClientThread 类一样，是使用
displayString 没有返同值：所以不需要使用Future Pattern（第9章）。
与MakerClientThread 相同，调用 displayString后会马上退出。这个调用操作，
pub-ic class DisplayClientThread extends Thread f
import acliveobject.Result;
import artiveobjert.Activeobject;
Liat 12.3
private final Act:veCbject activeObject;
prblic void runi) [
public DisplayCliertThread(String nane, ActiveObject activeObject) (
try I
this.activecbject = activeobject;
super(aame);
catch (Iaterrupredexception e) {
for (int i 
DisplayClientThread 类( DisplayClientThread. java)
Thread.sieep(200);
activeobject.displayString(string]:
String string - Thread.currenzThread().getName() +
！；没有返回值的调用
---
## Page 315
概念。但附录E的[POSA2]书中所描述的Active ObjectPattern，并没有这个类。
createActiveObject类方法。这个方法可用来建立ActiveObject 对象。
因为 ActiveObjeci接口是 public 的，所以可从 activeobject 包外看见
“主动对象”端：ActiveObjectFactory类
注1：本书为了使读者较容易理解AcriveObject对象的产生，引[进了ActiveObjectFactory的
ActiveObjectFactory 类（List 12-5）用来构建ActiveObject 对象：这个类具有
public class ActiveobjectFactory ↑
package activeobject;
因为ActiveObjectFactory类是 publie，所以可以从包外看见。
●Proxy 将万法调用转换成MethodRequest 对象的类（实现了ActiveObject接
●Scrvant用来进行实际处理的类（实现了ActiveObjeci接口）；
要建立.ActiveObject对象，必须组合下面4个类的实例：‘1
public interface Activeobject l
package activeobject;
首先是ActiveObjct接口（List 12-4）。这个接口定义了“上动对象"的接口（API)
List12-5
List 12-4
。
SchedulerThread 用来 execute MethodRequest 对象的类：
 public static ActiveQbject createActiveObject() {
 public abstract Result rakeString(irt count, char fillchar);
public abstract veid aisplayscringiString string):
scheduler.start ();
Froxy proxy - new Proxy(scheduler, servant);
ActivatiorQueue queue = new ActivationQueue ();
Servant servant - rew Servanz():
return proxy;
SchedulerThread scheduler = rew SchedulerThread(queue);
ActiveObjectFaclory 类(ActiveObjeciFactory java)
ActiveObject 接口（ ActiveObject.java）
Active Object-
一接受异步消息的主动对象
12
---
## Page 316
附录E[GoFHIYkuki01]）的主要概念。
计中，千万要随时意识到每个方法是由哪个线程调川的。
方法是由 MakerClientThread、DisplayClientThread 等线程执行的。在多线程程序设
所以不需要使用Future Pattern。
DisplayStringRequest 的实例，并传递给 scheduler的invoke方法。因为没有返回值：
方法单纯得多。这是因为 displayString 是没有返回值的方法：displayString 会建立出
动”的操作。因为不进行“执行”，所以线程可以马上从 Proxy 的 makeString 方法
MakeStringRequest 的实例。并将这个实例传给 scheduler的invoke 方法。也就是说
退出。
Proxy 的I作，是将方法调用转换成对象（实例）。
“主动对象”端：Proxy类
302
（invocation）与执行（execution）”。“启动”与“执行”中，Proxy类进行相当于“启
因为 Proxy 类不是 public 的，所以无法从 activeobject 包外直接看到。Proxy实
注2：因为方法调用转换成实例，所以就可以存放在队列里了。这是Command Patem（参考
Proxy类虽然放在activeobject包内，但要注意的是makeString方法、displayString
接着，我们要看的是displayString。与makeString 方法相比较之下，displayString
makeString 的返回值，是FutureReselt 的实例。从类名称就可以看出，这里使
Proxy 类（List 12-6）是 MakerClientThread 与 DisplayClientThread 会调用的类
class Proxy implements Activeobject [
package activeobject;
这里进行的操作有何意义呢？其实这就是曾经以前说过的“分离方法的启动
的实例形式²。
new MakeStringRequest( ... )
这样的方法调用，转换成
activeobject.makeString( .. )
List 12-6
public Proxy(SchedulerThread scheduler, Servart servant) 1
private final Servant servant;
 private final SchedulerThread scheduler:
 this.scheduler = scheduler;
Proxy 类( Proxy.java)
---
## Page 317
者传到 Consumer 参与者手里。
将 MakeStringRequest 的实例!j DisplayStringRequest 的实例安全地从 Producer 参！
与j者，从queue 里 takeRequest 出来执行，使用 Producer-Consumer Pattern，就可以
者，将 request putRequest 到queue 里。而调用execute 方法的线程则是 Consumer 参
Producer-Consumer Pattern嘛”。的确如此。调用 invoke 方法的线程是 Producer 参与
就是MakerClientThread、DisplayClientThread 所对应的线程。
而执行request 的execute 方法的部分，则相当于方法的“执行（execution)”。
invoke方法被调用后，queue里会多出一个请求（request）。
“主动对象”端：SchedulerThread 类
在queue 单放入 request 的部分，相当于“主动对象”的方法的“启动（invocation）”
class SchedulerThread extends Thread {
从本书前面开始顺序渐进看到这里的读者，应该会注意到“啊！这是第5章的
package activeobject;
SchcdulerThread 类中有--个队列（queue），
相对地，（2）的则是SchedulerThread类所对应的线程。
比较细心的读者，应该已经注意到下面两者的线程并不相同：
SchedulerThread类（List I2-7）是 Active Object Pattern 的核心部分。
List 12-7
（1)是调用Proxy类的makeString方法或displayString方法的线程：具体地说，
（2）调用execute方法的线程。
（1）调用invoke方法的线程：
count.,
public void displayString(string string) (
public Result makestring(int count, char fillchar) t
 scheduler.invoke (new DisplaystringRequest(servant, String));
return future:
fillchar}};
 scheduler,invoke (new MakeStringRequest(servant, future.
FutureResult future = rew FutureResulti); 
this.servant = servant;
 SchedulerThread 类( SchedulerThread java)
Active Object—-接受异步消息的主动对象
，用来存储 Proxy 类传来的诸求。当
第12章
-T
---
## Page 318
们可以知l道ActivationQueue是设计成忽略internupt的。
是 Guarded Suspension Pattem。
wait i。这是我们所熟悉的Guarded Suspension Patterm（第3章）。相反地，当队列
大请求数。超过这个数量，还试图对队列加入请求的线程，会在putRequest方法！
列拿出请求。
的 Channel 参与者。putRequest 方法可将请求放进队列，而i takeRequest方法可从队
“主动对象”端：ActivationQueue 类
因为 putRequest、takeRequest 并没有声明 throws IntemuptedException，所以我
在List12-8的实现中，以常数 MAX_METHOD_REQUEST指定可以存放的最
class ActivationQuele f
package activeobject;
List 12-8
public Activationgueue() I
private
private final MethodRequestll requestQueue;
private Static final int MAX_METHOD_REQUEST = l00;
private
public void run()
public void invcke(MethodReqvest request) {
public SchearlerThread(ActivationQueue queue) {
private final ActivationQueue queuer
quele.putRequest (request);
this.requestQueue = new MethodRequest [MAX_METHOD_ REQtEsT];
while (true) f
this.queue -- queue;
ActivationQueue 类 (ActivationQueue java)
request.execute();
MethodRequest request - queue.takeRequest();
int l
int tail:
head:
//下一个takeRequest 的地方
---
## Page 319
要“返回值”时，就不使用这个字段，而存入mull。
例。
MethodRequest 的子类。
“主动对象”端：MethodRequest类
future字段则存放有用来设置“返向值”的FutureRequest 的实例。
MethodRequest 类的 servant 字段，存放有用来进行实际处理的 Servant 的实
具体化的请求则是 MakeStringRequest 类与 DisplayStringRequest 类，这些都是
MethodRequest 类（List 12-9）表示拙象化的请求：
public synchronized MethodRequest takeReguest() {
public synchronized void putReguest (MethodRequest request) 1
return request;
notifyAll(l;
head = (head + l) % requestQueue.iength;
while (count = requestQueue.length) {
this.count = 0;
requestQueue{tais] = request;
this,tail =
this.head - 0;
l catch (InterruptedExceptior e) {
ry {
try f 
 catch (lnterruptedbxcepticn e) {
waitl);
wai();
Active Object--
一接受异步消息的主动对象
当请求不需
第12载
305
---
## Page 320
306
解方法要如何以一个类来表达，
作 setResult，则是请求的“设置返回值”。
makeString 方法的参数。
MakeStringReguest 的实例，是由 Proxy 类的 makeString 方法建立的。
“主动对象”端：MakeStringRequest 类
理的其体属性
现execute 方法”的意图。“实现execute 方法”，就是定义执行这个请求时，应该处
execute 方法会调用 servant 的 makeString 方法_这是请求的“执行”.而对future
●makeString 方法的参数，
MakeStringRequest 里定义有count、fillchar 字段，这些字段刚好对应到
若您已经了解FuturePattem（第9章），应该不难阅读这个类的程序代码。
MakeStringRequest 对应的是ActiveObject 接口的 makeString 方法。实际上.
MakeStringRequest 类（List 12-10）表示“建立字符中"。
abstracl class MethodRequest (
package activeobject;
execute 方法是拙象方法，并没有定义属性。这表示设计者“要求子类务必要实
ciass MakeStrirgRequest extends MethodRequest f
package activeobject;
servant 子段与future 字段．都假定可计.子类使用，所以声明成 protected。
List 12-10
一
+
.ist 12-9
makeString 方法的返问值，对应到将result setResult 到 future 里。
SchedulerThread 的 invoke方法：
makeString 方法的启动，对应到建立 MakeStringRequest 的实例，并调用
public abstract void execute();
protected MethodReguest(Servart servart, FltureRestlt future)
protecled final FutureResult future;
protected firal Servant servant;
this.future = future;
this,servan:
MakeStringRequest 类 ( MakeStringRequest.java)
MethodRequest 类 (MethodRequest.java)
= servant;