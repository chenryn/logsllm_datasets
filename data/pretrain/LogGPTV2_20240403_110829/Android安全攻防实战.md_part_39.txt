## Page 285
第8章原生代码中漏润的利用与分析
[6]k3178nakan@B14ckwid0w:-/Radansa-AndroidPort/radansa-0.3
adbpush Libs/armeabt/radansa-8.3/systen/bin/radamsa
1855KB/s （213212 bytes in 0.112s)
图 8.42
12.在复制了Radamsa 的二进制可执行文件之后，你可以在Android 模拟器上
执行下面这条命令，以对它进行测试。
radamsa --help
该命令会生成如图8.43所示的输出。
 pe
图 8.43
13.你可以给Radamsa输入一些测试数据，以确认一切是否运行良好。比如你
可以用下面这条命令来检测一下各个环节是否都已经就绪了。
eswepex 1 Tten 4qa uo ze9q go set31oq 66. oqpo
运行这条命令会生成类似图8.44所示的输出。
les e99 aottlei of 1
on the ths
图 8.44
这就对了！Radamsa 已经在Android上装好并能运行了。下一节将讨论如何建立
一个简单的fuzzing脚本，去测试dexdump程序，尝试生成一些前溃，希望能从中找
出一些可利用的漏润。
如果你打算做一些fuzzing 测试，你终将需要用一些bash脚本，把Radamsa 引
到正确的目标上，并在每次输入数据引发了我们所关心的行为时，独立地产生报告。
遗的是，Android平台并没有自带那些令bash脚本编程功能强大的实用程序。而且
267
---
## Page 286
Android安全攻防实战
（主要原因是认为：这没必要）它甚至没有自带一个bashshell。
我们可以用 sh shell运行我们的脚本，但bash更强大，更强壮，而且一般来说，
大多数人更习惯编写bash脚本。因此，实验的下一个部分将介绍如何让Busybox运
行在Android平台上。
安装Busybox
为了在Android上能使用Busybox实用程序（一个有用的终端应用包），你需要
做以下步骤。
1. 从 http:/benno.id.au/Android/busybox 上 下载—个 for Android 的 Busybox, 如
图8.45所示。在这里，我们使用wget来完成这一任务。
0]3170nakar/314ckwLd0w:-/BusyBox.
Wpet http1//benno.Ld.au/androLd/busybox.
benr
208,78.101.142
d/busybox
sent.
...2000K
 8.45
2.接下来你需要在你的Android模拟器上准备一个busybox目录—假设已经
准备好了模拟器，并已经运行它了。
在这个例子中，busybox目录被放在/data/文件夹中。不过因为它是可写且可
执行的，所以我们可以使用任何一个具有读、写和执行权限的分区上的文件夹，
如图8.46所示。
llausqpe
oot@android:/#cd/data
root@android:/data #kdir busybox
图 8.46
3.建立了专门的Busybox目录后，你可以用下面这条命令将其推送到模拟器上。
adb push [path to busybox]/data/busybox/
可以以图8.47这张截图中所示的方法，完成任务。
[0]k3170makan@B14ckwidew:~/BusyBox
2241 KB/s (1745016 bytes in 0.760s)
sadbpushbusybox/data/busybox/
图 8.47
268
---
## Page 287
第8章原生代码中漏洞的利用与分析
4.当你把busybox的二进制可执行文件复制到模拟器上之后，在你的模拟器上
执行下面这条命令安装它。
/data/busybox insta11
图8.48是取自一台三星GalaxyS3智能手机的例子。
root@androtd:/data/busybox #chnod744 busybox
root
17450162607-11-13 23:47 busybox
图 8.48
命令执行完，你的busybox文件夹中的内容应该变成如图8.49所示的这样。
root@android:/data/busybox#ls-al
-rwxr--r..
rwxr--r--root
rot
root
17450162007-11-1323:47
1745016 2007-11-13 23:47[
root
root
1745016 2007-11-13 23:47 addgroup
rwxr.
root
rot
-rwxr-.-r..
1745016 2007-11-13 23:47 adjtinex
1745016 2007-11-13 23:47 adduser
root
root
root
root
1745016 2007-11-13 23:47 ar
.rwxr
root
-rwxr
-J--
root
root
--厂-.
root
1745016 2007-11-13 23:47 ash
root
root
1745016 2007-11-13 23:47
-rwxr
1745016 2007-11-13 23:47 basename
awk
rwxr
root
root
root
--广
root
1745016 2007-11-13 23:47
bunzip2
rwxr
1745016 2007-11-13 23:47 bzcat
busybox
--f-.
root
root
root
JXMU
----
root
1745016 2007-11-13 23:47 cal
1745016 2007-11-13 23:47 bzip2
FWx
root
root
CHNE
coot
1745016-2007-11-1323:47-caty
图 8.49
对 dexdump 做 Fuzzing 测试
现在你已经装好并已经运行过测试样例发生器了，Busybox也已安装完毕了，这
时你可以尝试生成一些崩溃了！
在这个例子中，我们会看到如何设置简单的脚本对dexdump（一个剖析Android
DEX的实用程序，并输出其中代码的）做些"dumb”fuzzing测试。
1.在开始前，你需要一个样本DEX文件。你可以用Android SDK写个"hello
world"类型的 app 样本，也可以直接取用之前的实验中创建的 Example.dex
文件。如果你想生成一个文件，请参阅第6章“逆向应用”中“把Java编译
269
---
## Page 288
Android安全攻防实战
成DEX”那个实验。
2.创建一个目录，你的测试用例生成器会把生成的文件放在这个目录里。这是
个位于你的Android模拟器上的文件夹，你的脚本将把生成的文件放在这里，
测试它们，如果其中的一些引发了前溃，就把我们感兴趣的这些用例复制出
来。/data/目录是存放它们的理想场所—尽管模拟出一张SD卡，并把数据
存在这里也是个不错的办法。
3.在你的fuzzing目录中—也就是上一步中创建的目录—创建一个包含有以
下代码的 bash脚本。
#1/bin/bash
TARGET=dexdump
ROOT=$1
ITER=$2
for ((c=0;1;c++))
op
xapzzng61 >/dev/nu11
RET_CODE=$?
test $REr_CoDE -gt 127 66 cp fuzz.dex windexdump_S
done
4.在你的模拟器上执行下面这条命令，这个脚本在bash中运行起来。
/data/busybox/bash; /data/busybox/souroe [fuzz script name] [example . dex]
你的 fuzzing 测试开始了！
工作原理....
在这个实验的“怎么做……”一节的第一部分，我们讨论了一个名为Radamsa
编译原生可执行文件”那个实验中讨论过了。只是在NDK build 脚本对 Radamsa 进
行编译时，因为一个类型定义失败，事情变得有趣起来。这个类型定义是这样的：
typedef unsigned long in_addr_t;
这是因为 NDK build编译脚本使用的 GCC 编译器—即，能编译出支持 ARM
应用程序二进制接口的可执行文件的编译器一无法认出有效的类型定义，从而导致
编译脚本失败的。
270
---
## Page 289
第8章原生代码中漏洞的利用与分析
小贴士
当上面这个类型定义被引用时，它就会导致GCC停止运行，并
报告：它根本不知道什么是in_addr_t。解决这个问题，就要去除
这句typedef的影响，我们先用完整的变量类型unsigned long替换
L
掉所有使用in_addr_t这个别名的地方，然后把这句typedef注释掉。
解决了这个问题之后，就能成功编译Radamsa，并把得到的二进制可执行文件部
署到Android设备中去了。
接下来，我们为目标程序dexdump写了一个临时的fuzzing测试脚本。为了保证
你们完全理解在这个实验中都做了些什么，详述bash脚本做了什么，就显得非常重
要了.
最初的几条指令的作用是：给我们定义几个有用的助记符，我们可以通过它们
把参数传递给脚本。这几条指令一也就是紧跟在/bin/bash后的这几条指令一只
是简单地把一些值赋给几个变量名，
在赋值之后，脚本进入了一个带限定值的for循环，这个限定值限定了for循环
的选代次数—没有它，这个for循环就会不断地循环重复操作下去，除非用户或操
作系统明确把它终止掉。
在这个for循环中，我们可以看到下面这一行。
这行代码所做的就是：得到ROOT变量指向的文件，并把它传递给Radamsa。
然后Radamsa会随机的改变一下这个文件。
在对DEX文件作了出随机转换之后，Radamsa 将输出重定向到一个名为fuzz.dex
的文件中，这是DEX文件样本“fuzz”后的版本。
然后把这个被“fuzz”过的 DEX文件，将被传递给dexdump进行反汇编，相关
代码如下。
$TARGET -d fuzz.dex 2>61 > /dev/nul1
所有的输出都会被重定向到/dev/null上，因为我们根本就对它不感兴趣。这行代
码还会把所有来自STDIN（标准输出文件）的输出，重定向到STDERR（标准错误
输出文件）。这就使程序产生的所有输出—任何会使屏幕看上去杂乱无章的东西一
—都被被重定向到/dev/null 上。
271
---
## Page 290
Android安全攻防实战
下一条指令是这个。
RET_CODE=$?
不论程序（在本例中，它是dexdump）最后执行的是哪条指令，它都会记录下
程序退出码。
脚本这样做是的原因是：它揭示出了关于dexdump是如何退出的信息。如果
dexdump执行后正常，返回代码应该是0。如果有什么造成dexdump异常退出或
停止一比如说，类似于由于导致溢出的输入而引发的缺陷—那退出代码就应该是
一个非零的值。
更为有趣的是，如果故障需要操作系统通过使用进程间信号强制终止dexdump，
返回码将大于127。这些返回码是我们最为关注的，因为它们强烈暗示了因给定的
dexdump输入而暴露出来的缺陷的严重程度。有些错误，比如段违规错，通常是由
于以不正确的方式，使用了无效位置上的内存面引发的，所以总是会生成大于127
的返回码。更多有关退出码，或者更确切地说是退出状态（exit status）如何工作的
详细介绍，可以参阅“拓展阅读”部分的《Shell的工作机制—理解退出码》链接。
继续，接下来的代码应该是这样的。
echo “[$c]($RET_CODE)($WINS)“
test $RET_CODE -gt 127 64 cp fuzz.dex win-dexdump_SITER*_*$c.dex
[ + SNINS 3dxo =SNIM 9
这部分代码的第一条指令通过打印Sc值帮助我们跟踪脚本正在执行第几次选
代，它还会打印出刚才运行的dexdump 的返回码，以及已经发生了多少次值得注意
的进程终止。
打印出刚才提及的“状态指示符”（statusindicator）后，脚本将保存在
RET_CODE变量值中的数值与127进行比较。如果这个值大于127，它就会复制一
份导致了本次错误的样本输入文件，并把WINS变量自增一，以此来表示又发生了
一次值得关注的错误。
拓展阅读
·《Shell 的工作—了解Linux 日志退出码》位于http://www.linuxjoumal
com/article/10844
Radamsa 在 google code 中的生接 http://code.google.com/p/ouspg/wiki/Radamsa。
●Blab 在 google code 中的链接 http://code.google.com/p/ouspg/wiki/Blab。
①即 dexdump的退出代码—译者注。
---
## Page 291
第8章原生代码中漏洞的利用与分析