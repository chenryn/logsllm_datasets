create or replace function embedding(text) returns vector as $$  
  select array_to_vector(replace(replace(x->'output'->'embeddings'->0->>'embedding', '[', '{'), ']', '}')::real[], 1536, true) from embeddings(array[$1]) x;    
$$ language sql strict;  
```   
调用举例    
```    
select * from embeddings(array['风急天高猿啸哀', '渚清沙白鸟飞回', '无边落木萧萧下', '不尽长江滚滚来']);      
```    
```    
embeddings | {"code": "", "usage": {"total_tokens": 26}, "output": {"embeddings": [{"embedding": [1.5536729097366333, -2.237586736679077, 1.5397623777389526, -2.3466579914093018, 3.8610622882843018, -3.7406601905822754, 5.18358850479126, -3.510655403137207, -1.6014689207077026, 1.427549958229065, -0.2841898500919342, 1.5892903804779053, 2.501269578933716, -1.3760199546813965, 1.7949544191360474, 4.667146682739258, 1.3320773839950562, 0.9477484822273254, -0.5237250328063965, 0.39169108867645264, 2.19018292427063, -0.728808581829071, -4.056122303009033, -0.9941840171813965, 0.17097677290439606, 0.9370659589767456, 3.515345573425293, 1.594552993774414, -2.249598503112793, -2.8828775882720947, -0.4107910096645355, 1.3968369960784912, -0.9533745646476746, 0.5825737714767456, -2.484375, -0.8761881589889526, 0.23088650405406952, -0.679530143737793, -0.1066826730966568, 0.5604587197303772, -1.9553602933883667, 2.2253689765930176, -1.8178277015686035, 1.239439606666565, -2.509045362472534, 4.812849998474121, -0.9741482138633728, -1.5405707359313965, 1.9682672023773193, 1.456263542175293, -0.8751180171966553, -0.24127332866191864, -0.06615668535232544, -1.5475884675979614, 2.104649543762207, -0.7037163376808167, -1.1802300214767456, 1.0072576999664307, 1.4229166507720947, 0.2779161334037781, 1.5448310375213623, -1.4548231363296509, 0.3061252236366272, 1.1501736640930176, -1.4284504652023315, -0.03127169981598854,     
...    
, -2.3609619140625, -5.0784735679626465, -0.7559727430343628, -2.1915957927703857, -0.9280264973640442, 0.3727504312992096, 1.1043483018875122, -2.7951748371124268, -0.4858747124671936, -1.2777355909347534, -2.6889126300811768, 1.2386366128921509, 0.8004150390625, 2.154628276824951, -1.7855726480484009, -1.9051687717437744], "text_index": 3}]}, "message": "", "request_id": "8c45f0ab-366b-9941-9358-063e46009929", "status_code": 200}    
```    
获取第一条即"风急天高猿啸哀"的向量:    
```    
select x->'output'->'embeddings'->0->>'embedding' from embeddings(array['风急天高猿啸哀', '渚清沙白鸟飞回', '无边落木萧萧下', '不尽长江滚滚来']) x;    
```    
第二条向量:      
```    
select x->'output'->'embeddings'->1->>'embedding' from embeddings(array['风急天高猿啸哀', '渚清沙白鸟飞回', '无边落木萧萧下', '不尽长江滚滚来']) x;    
```    
现在你在数据库中直接通过SQL就可以获得AI能力.     
更多用法请参考通义千问和通用文本向量模型相应api.    
- https://help.aliyun.com/zh/dashscope/developer-reference/api-details  
- https://help.aliyun.com/zh/dashscope/developer-reference/text-embedding-quick-start  
- https://help.aliyun.com/zh/dashscope/developer-reference/text-embedding-api-details  
3、接下来你可以创建一个向量表, 用来存储私有/新增知识的分段文本和对应的向量.  
```  
create extension vector;  
create table tbl_kn_vec (  
  id serial primary key,  
  vec vector(1536),  -- 向量值   
  content text  -- 文本值   
);  
```  
将私有/新增知识文本和向量值导入tbl_kn_vec, 例如  
```  
insert into tbl_kn_vec (vec, content) select embedding(con) , con   
  from (values ('你知道hwieifeDB数据库是什么吗? hwieifeDB是德哥开发的开源云原生数据库, 2005年开源.') ) as t(con);   
insert into tbl_kn_vec (vec, content) select embedding(con) , con   
  from (values ('德哥的网名叫digoal, 目前在阿里云工作.') ) as t(con);   
insert into tbl_kn_vec (vec, content) select embedding(con) , con   
  from (values ('hwieifeDB是德哥开发的开源云原生数据库, 2005年开源.') ) as t(con);   
```  
创建向量索引  
```  
create index on tbl_kn_vec using hnsw (vec vector_cosine_ops);  
```  
创建一个stable函数, 作为输入变量进行测试时可以用上索引.   
```  
create or replace function stable_embedding(text) returns vector as $$  
  select array_to_vector(replace(replace(x->'output'->'embeddings'->0->>'embedding', '[', '{'), ']', '}')::real[], 1536, true) from embeddings(array[$1]) x;    
$$ language sql stable;  
```  
搜索和问题相似的文本, 通过执行计划, 我们知道这个请求使用了向量索引.   
```  
explain  
select content, vec  stable_embedding('请介绍一下hwieifeDB数据库') as cosine_distance   
  from tbl_kn_vec order by vec  stable_embedding('请介绍一下hwieifeDB数据库') limit 10;  
                                           QUERY PLAN                                             
------------------------------------------------------------------------------------------------  
 Limit  (cost=4.73..7.83 rows=10 width=40)  
   ->  Index Scan using tbl_kn_vec_vec_idx on tbl_kn_vec  (cost=4.73..267.86 rows=850 width=40)  
         Order By: (vec  stable_embedding('请介绍一下hwieifeDB数据库'::text))  
(3 rows)  
```  
搜索和问题相似的文本, cosine_distance值越小, 说明问题和目标文本越相似.    
```  
select content, vec  stable_embedding('请介绍一下hwieifeDB数据库') as cosine_distance   
  from tbl_kn_vec order by vec  stable_embedding('请介绍一下hwieifeDB数据库') limit 10;  
                                                   content                                                    |  cosine_distance    
--------------------------------------------------------------------------------------------------------------+-------------------  
 你知道hwieifeDB数据库是什么吗? hwieifeDB是德哥开发的开源云原生数据库, 2005年开源. | 0.121276195375583  
 hwieifeDB是德哥开发的开源云原生数据库, 2005年开源.                                          | 0.211894512807164  
 德哥的网名叫digoal, 目前在阿里云工作.                                                          | 0.902429549769441  
(3 rows)  
```  
三、多轮对话测试, 这里就可以用上向量数据库了, 当AI无法回答或者回答不准确时, 可以从向量数据库中获取与问题相似的文本, 作为prompt发送给AI大模型.    
1、创建chat函数, 让数据库支持单轮对话和提示对话.      
单轮对话:    
```    
create or replace function chat (sys text, u text) returns text as $$      
#coding:utf-8      
from http import HTTPStatus      
from dashscope import Generation      
messages = [{'role': 'system', 'content': sys}]    
messages.append({'role': 'user', 'content': u})    
gen = Generation()      
response = gen.call(      
    # 或 Generation.Models.qwen_plus,    
    model='qwen-max-longcontext',      
    messages=messages,      
    result_format='message', # set the result is message format.      
)      
if response.status_code == HTTPStatus.OK:         
    return (response)       
else:      
    return('Request id: %s, Status code: %s, error code: %s, error message: %s'%(      
        response.request_id, response.status_code,       
        response.code, response.message      
    ))           
$$ language plpython3u strict;      
```    
多轮提示对话(使用两个长度相等的数组, 作为多轮问题和答案的输入):     
```      
create or replace function chat (sys text, u text, u_hist text[], ass_hist text[]) returns text as $$      
#coding:utf-8      
from http import HTTPStatus      
from dashscope import Generation      
messages = [{'role': 'system', 'content': sys}]    
if (len(u_hist) >=1):    
    for v in range(0,len(u_hist)):    
        messages.extend((    
            {'role': 'user', 'content': u_hist[v]},     
            {'role': 'assistant', 'content': ass_hist[v]}    
        ))    
messages.append({'role': 'user', 'content': u})    
gen = Generation()      
response = gen.call(      
    # 或 model='qwen-max-longcontext',     
    Generation.Models.qwen_plus,    
    messages=messages,      
    result_format='message', # set the result is message format.      
)      
if response.status_code == HTTPStatus.OK:         
    return (response)       
else:      
    return('Request id: %s, Status code: %s, error code: %s, error message: %s'%(      
        response.request_id, response.status_code,       
        response.code, response.message      
    ))           
$$ language plpython3u strict;      
```      
2、测试以上两个调用函数  
第一次调用, 使用单轮对话接口:    
```    
select * from chat ('你是通义千问机器人', '附近有什么好玩的吗');    

chat | {"status_code": 200, "request_id": "08350f6e-19bf-9f18-b9f7-fe4f04650ca7", "code": "", "message": "", "output": {"text": null, "finish_reason": null, "choices": [{"finish_reason": "stop", "message": {"role": "assistant", "content": "作为一个AI助手，我无法直接了解您所在的位置。但您可以尝试使用手机地图或旅游APP查找附近的景点、公园、商场等娱乐场所。您也可以问问当地的居民或朋友，了解他们推荐的好玩的地方。祝您玩得愉快！"}}]}, "usage": {"input_tokens": 18, "output_tokens": 86, "total_tokens": 104}}    
```    
第二次调用, 使用多轮对话接口, 带上之前的问题和回答     
```    
select * from chat (    
  '你是通义千问机器人',     
  '我在杭州市西湖区阿里云云谷园区',    
  array['附近有什么好玩的吗'],     
  array['作为一个AI助手，我无法直接了解您所在的位置。但您可以尝试使用手机地图或旅游APP查找附近的景点、公园、商场等娱乐场所。您也可以问问当地的居民或朋友，了解他们推荐的好玩的地方。祝您玩得愉快！']    
);    

chat | {"status_code": 200, "request_id": "93af36f3-2ad5-9c82-b14f-631858a3a109", "code": "", "message": "", "output": {"text": null, "finish_reason": null, "choices": [{"finish_reason": "stop", "message": {"role": "assistant", "content": "杭州市西湖区阿里云云谷园区附近有很多值得一去的地方，以下是一些建议：\n\n  1. 西湖：杭州的标志性景点，被誉为“人间天堂”，可以欣赏到美丽的湖光山色。\n  2. 西溪湿地：一个大型的湿地公园，有着丰富的自然生态和美丽的景色。\n  3. 西湖文化广场：一个集文化、娱乐、购物于一体的综合性广场，有着丰富的文化活动和商业设施。\n  4. 龙井茶园：位于西湖区，是中国著名的龙井茶产地，可以品尝到正宗的龙井茶。\n  5. 浙江省博物馆：位于西湖区，是一座大型的博物馆，展示了浙江省的历史文化和艺术品。\n\n希望这些建议能帮到您，祝您玩得愉快！"}}]}, "usage": {"input_tokens": 119, "output_tokens": 248, "total_tokens": 367}}    
```    
有了多轮对话函数, 当AI大模型回答不准确或无法回答时, 我们就可以从向量数据库中获取与问题相似的文本, 作为prompt发送给AI大模型.    
3、从向量数据库中获取与问题相似的文本, 作为prompt发送给AI大模型.    
第一次调用, 让大模型回答一个无法回答的问题.   
```  
select * from aigc ('hello', '请介绍一下hwieifeDB数据库');    
postgres=# select * from aigc ('hello', '请介绍一下hwieifeDB数据库');    
-[ RECORD 1 ]-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------  
aigc | {"code": "", "usage": {"input_tokens": 50, "total_tokens": 58, "output_tokens": 8}, "output": {"text": null, "choices": [{"message": {"role": "assistant", "content": "抱歉，我不太知道这是什么。"}, "finish_reason": "stop"}], "finish_reason": null}, "message": "", "request_id": "6d36de4b-c7d0-99b9-9135-82429836b4d3", "status_code": 200}  
```  
第二次调用, 使用多轮对话函数, 先用前面提到的方法, 到向量数据库中搜索“请介绍一下hwieifeDB数据库”的相似文本, 并作为第二轮对话的提升.   
搜索和问题相似的文本, cosine_distance值越小, 说明问题和目标文本越相似.    
```  
select content, vec  stable_embedding('请介绍一下hwieifeDB数据库') as cosine_distance   
  from tbl_kn_vec order by vec  stable_embedding('请介绍一下hwieifeDB数据库') limit 10;  
                                                   content                                                    |  cosine_distance    
--------------------------------------------------------------------------------------------------------------+-------------------  
 你知道hwieifeDB数据库是什么吗? hwieifeDB是德哥开发的开源云原生数据库, 2005年开源. | 0.121276195375583  
 hwieifeDB是德哥开发的开源云原生数据库, 2005年开源.                                          | 0.211894512807164  
 德哥的网名叫digoal, 目前在阿里云工作.                                                          | 0.902429549769441  
(3 rows)  
```  
```  
select * from chat (    
  '你是通义千问机器人',     
  '你知道hwieifeDB数据库是什么吗? hwieifeDB是德哥开发的开源云原生数据库, 2005年开源.',  -- 这句文本内容可以来自向量数据库.    
  array['请介绍一下hwieifeDB数据库'],     
  array['抱歉，我不太知道这是什么。']    
);    
-[ RECORD 1 ]----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------  
chat | {"status_code": 200, "request_id": "26ab1fa9-9b5c-9fb8-8fec-0ac0ce2f9d8a", "code": "", "message": "", "output": {"text": null, "finish_reason": null, "choices": [{"finish_reason": "stop", "message": {"role": "assistant", "content": "很抱歉，我无法找到关于“hwieifeDB”数据库的相关信息，尤其是在您提到的是由“德哥”在2005年开源的情况下。可能是因为这个名字或相关信息存在错误或者这个数据库非常小众，以至于没有广泛被记录和认可。如果有更详细的信息或者正确的数据库名称，我会更乐意为您提供帮助。"}}]}, "usage": {"input_tokens": 44, "output_tokens": 72, "total_tokens": 116}}  
```  
四、知识点  
- 大模型  
- 向量 类型  
- hnsw , ivfflat 向量索引  
- 求2个向量的距离  
- 数据库函数语言  
- jsonb 类型  
- array 类型  
- token   
- prompt   
- 会话token上限: 问题+即将得到的回复 总的token不能超过这个上限  
- 函数稳定性 volatile, stable, immutable
五、思考  
- 1、数据库集成了各种编程语言之后, 优势是什么?  
- 2、大模型和数据结合, 能干什么?  
- 3、数据库中存储了哪些数据? 这些数据代表的业务含义是什么? 这些数据有什么价值?  
- 4、高并发小事务业务场景和低并发大量数据分析计算场景, 这两种场景分别可以用大模型和embedding来干什么?  
- 5、数据库中如何存储向量? 如何加速向量相似搜索?  
- 6、如何建设好向量数据库的内容.  
- 7、PolarDB|PostgreSQL 有哪些向量插件?  
AI技术发展非常快, 更多新的信息请关注[模型服务灵积](https://help.aliyun.com/zh/dashscope/)    
更多PolarDB 应用实践实验请参考: [PolarDB gitee 实验仓库 whudb-course](https://gitee.com/polardb/whudb-course) / [digoal github](https://github.com/digoal/blog/tree/master/202308)    
#### [期望 PostgreSQL|开源PolarDB 增加什么功能?](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
#### [PolarDB 开源数据库](https://openpolardb.com/home "57258f76c37864c6e6d23383d05714ea")
#### [PolarDB 学习图谱](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [PostgreSQL 解决方案集合](../201706/20170601_02.md "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's Github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")