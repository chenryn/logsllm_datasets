### 高速响应图式搜索需求

#### RDS PG
- **ltree 数据类型**：用于处理层次结构数据。
- **多表 JOIN**：支持复杂查询。
- **递归查询 (CTE)**：适用于树形结构和层次数据的查询。
- **数组**：支持键值对数组，如 `key1: {val1, val2, val3, ...}`。
  - **GIN 索引**：用于加速包含、相交等操作。
  - **数组操作**：例如 `= any(array)`。

#### 案例：知识图谱
- **点和边**：使用 JSONB 存储点和边信息。
- **多边合并**：将多个边合并到 JSONB 中。
- **API**：
  - N 度搜索
  - 最短路径
  - 流式返回
- **性能指标**：
  - 支持百亿关系网
  - 三层关系查询响应时间 < 2.5 毫秒

#### 适用场景
- 广度搜索
- 深度搜索（不含权重）
- 好友关系系统
- 好友推荐系统
- 陌生人交友
- 知识图谱

#### 不适用场景
- 风控

### AgensGraph
- **官网**：[http://bitnine.net/agensgraph/](http://bitnine.net/agensgraph/)
- **特点**：
  - 专业图数据库，基于 PostgreSQL
  - 支持 pgrouting 插件
  - [pgrouting 官网](http://pgrouting.org/)

#### 案例与资源
- **图式搜索案例**：
  - [阿里云 RDS PG 内置 plv8 语言](https://github.com/digoal/blog/blob/master/201708/20170801_01.md)
  - [更多示例](https://github.com/digoal/blog/blob/master/201612/20161213_01.md)
- **数组相关**：
  - [示例 1](https://github.com/digoal/blog/blob/master/201801/20180102_04.md)
  - [示例 2](https://github.com/digoal/blog/blob/master/201711/20171107_18.md)
- **ltree 树类型**：
  - [示例 1](https://github.com/digoal/blog/blob/master/201711/20171107_20.md)
  - [示例 2](https://github.com/digoal/blog/blob/master/201105/20110527_01.md)
- **递归查询**：
  - [示例 1](https://github.com/digoal/blog/blob/master/201705/20170519_01.md)
  - [示例 2](https://github.com/digoal/blog/blob/master/201703/20170324_01.md)
  - [更多示例](https://github.com/digoal/blog/blob/master/201612/20161201_01.md)

### 订阅、单元化、容灾、多写
- **线上 RDS PG**
  - **逻辑订阅或物理订阅**：将数据同步到用户端 PostgreSQL。
  - **用户端容灾**：只读模式，支持审计和测试库。
  - **全量订阅**：内置 HA 和容灾机制，数据延迟在毫秒级。
  - **部分订阅**：与大事务相关，支持全网数据或特定 B 端数据。

#### 案例与资源
- **订阅功能 (单元化)**：
  - [示例 1](https://github.com/digoal/blog/blob/master/201702/20170227_01.md)
  - [示例 2](https://github.com/digoal/blog/blob/master/201707/20170711_01.md)
- **跨域、跨库**：
  - **FDW 外部表**：支持读写、JOIN 等操作，支持 PUSHDOWN 算子。
  - **DBLINK**：简化异地数据访问逻辑。
  - **逻辑订阅**：经常访问的数据可订阅到本地。

### 分片 (Sharding)
- **传统企业数据库上云**：突破单库容量限制。
  - **多库组集群**：相互可访问、可写、可同步。
  - **功能点**：FDW (外部表、远程表)、DBLINK、匿名、逻辑订阅。
- **OSS 无限对象存储**：用于冷存储，支持多实例共享访问。

#### 案例与资源
- **PG Sharding**：
  - [示例 1](https://github.com/digoal/blog/blob/master/201808/20180824_02.md)
  - [示例 2](https://github.com/digoal/blog/blob/master/201809/20180905_01.md)
- **FDW**：
  - [总览](https://wiki.postgresql.org/wiki/Fdw)
  - [文件 FDW](https://www.postgresql.org/docs/10/static/file-fdw.html)
  - [PG FDW](https://www.postgresql.org/docs/10/static/postgres-fdw.html)
  - [MySQL FDW](https://github.com/EnterpriseDB/mysql_fdw)
  - [Oracle FDW](https://pgxn.org/dist/oracle_fdw/)
  - [SQL Server FDW](https://pgxn.org/dist/tds_fdw/)
- **DBLINK**：[文档](https://www.postgresql.org/docs/10/static/dblink.html)

### 流式处理与阅后即焚
- **高并发写入**：快速消费处理，处理后的数据被删除。
- **要求**：
  - 高效、可靠、流式、事务
  - 数据快速写入并持久化
  - 快速消费被写入的记录
  - 消费和计算在一个事务中完成

#### 为什么需要流计算
- **实时分析需求**：提高大查询的时效性。
- **过滤有效数据**：实时数据清洗。
- **预警需求**：实时数据预警，如电子围栏、物联网异常指标、监控系统。

#### 流计算与数据库的关系
- **PostgreSQL 方法**：
  - **PipelineDB**：批处理，低延迟，大吞吐（>100万行/s）。
  - **Rule 和 Trigger**：实时处理，小吞吐（单步写 >30万行/s，批量写 >100万行/s）。
  - **Insert on Conflict**：实时处理，小吞吐（单步写 >30万行/s，批量写 >100万行/s）。
  - **阅后即焚**：批处理，低延迟，大吞吐（>100万行/s）。

#### 案例：流式预警
- **传统手段**：异步查询，实效性较差，重复劳动较多。
- **流计算手段**：实时或异步，通过异步消息通道通知应用程序。
- **优化方法**：
  - **Partial Index**：仅对异常数据建索引。
  - **NOTIFY 和 LISTEN**：内置 MQ 功能，定义规则，消除无用功查询。

#### 示例代码
```sql
-- 创建表
CREATE TABLE tbl (sid int, content jsonb);

-- 创建函数
CREATE OR REPLACE FUNCTION monitor(jsonb) RETURNS boolean AS $$
DECLARE
BEGIN
  IF xxx THEN RETURN true; -- 条件1
  ELSIF xxx THEN RETURN true; -- 条件2
  ELSIF ... THEN RETURN true; -- 条件N
  ELSE RETURN false;
END IF;
END;
$$ LANGUAGE plpgsql STRICT;

-- 创建规则
CREATE OR REPLACE RULE r1 AS ON INSERT TO tbl DO ALSO
  SELECT pg_notify('channel_name', (NEW.content)::text) WHERE monitor(NEW.content);

-- 客户端监听
LISTEN 'channel_name';
```

### 流式统计
- **业务举例**：实时报表、实时在线数、实时大屏监控、实时 UV 估算。
- **性能**：分区 + 批量写入，可达 336 万行/s。

#### 案例与资源
- [流式统计示例](https://github.com/digoal/blog/blob/master/201711/20171123_02.md)

### 多维流式计算
- **步骤**：
  1. 定义明细表。
  2. 定义每个维度的目标统计表。
  3. 定义维度表的 `INSERT ON CONFLICT` SQL。
  4. 定义明细表的触发器或规则，顺序调用 `INSERT ON CONFLICT` 写入多个维度表。

#### 示例代码
```sql
-- 创建明细表
CREATE TABLE tbl (c1 int NOT NULL, c2 int NOT NULL, c3 int NOT NULL, c4 int NOT NULL, c5 int NOT NULL);

-- 创建维度统计表
CREATE TABLE cv1_tbl (c1 int PRIMARY KEY, cnt int8 DEFAULT 1);
CREATE TABLE cv2_tbl (c2 int, c3 int, c5 int, sum_v float8 DEFAULT 0, cnt int8 DEFAULT 1, PRIMARY KEY (c2, c3));

-- 定义插入规则
CREATE RULE r1 AS ON INSERT TO tbl DO ALSO
  INSERT INTO cv1_tbl (c1) VALUES (NEW.c1) ON CONFLICT (c1) DO UPDATE SET cnt = cv1_tbl.cnt + 1;

CREATE RULE r2 AS ON INSERT TO tbl DO ALSO
  INSERT INTO cv2_tbl (c2, c3, c5) VALUES (NEW.c2, NEW.c3, NEW.c5) ON CONFLICT (c2, c3) DO UPDATE SET
    cnt = cv2_tbl.cnt + 1,
    sum_v = CASE WHEN cv2_tbl.cnt = 1 THEN cv2_tbl.c5 + excluded.c5 ELSE cv2_tbl.sum_v + excluded.c5 END;
```

### 流式概率计算
- **工具**：
  - **Bloom Filter**：快速判断 `SELECT DISTINCT (...)`。
  - **Count-Min Sketch**：快速统计 `SELECT col, COUNT(*) GROUP BY col`。
  - **Filtered-Space Saving Top-K**：元素桶和频率的概率估计。
  - **HLL (HyperLogLog)**：估算 `COUNT(DISTINCT ...)`.
  - **T-Digest**：百分位统计。

#### 案例与资源
- [流式概率计算示例](http://docs.pipelinedb.com/probabilistic.html)

### 流式实时估算
- **HLL 插件**：
  - 安装插件：`CREATE EXTENSION hll;`
  - 创建表：
    ```sql
    CREATE TABLE tbl (
      grpid int,
      userid int,
      dt date,
      cnt int8 DEFAULT 1,
      hll_userid hll DEFAULT hll_empty(), -- 估算字段
      PRIMARY KEY (grpid, dt)
    );
    ```

#### 案例与资源
- [流式实时估算示例](https://github.com/digoal/blog/blob/master/201711/20171123_02.md)