**作者： 0xcc  
原文链接： **
2019 年的 RealWorldCTF 有一道叫“德州计算器”的题目。选手需要输入特定的 URL scheme 唤起题目的计算器
app，想方设法触发远程代码执行，获取 App 安装目录下的一个文件。
iOS 因为其封闭性，选手调试、主办方运维都很困难，所以此前很少出现在 ctf 竞赛中。DEFCON CTF 27 决赛有一个
TelOoOgram，是运行在 iOS 虚拟机 Corellium 上的，应该是史上第一次在 attack & defense 环节出现
iOS。而这一次我们直接在一台 Xr 物理机上运维，搭载了当时最新的 iOS 12.4.1 系统，来真的！
当时外国微博网友的评论：
> That must be an expensive challenge ??
“好贵的题目”
> I think they're just trying to get their participants to find new Jailbreaks
> so they can sell them to Apple
“我感觉主办方在空手套 0day，好卖给苹果”
哈哈哈……是这样吗？
先来看看题目。
计算器程序是 swift 编写的。比赛给了 x64 模拟器版和 arm64（这是一个小错误，后面文章会解释）的真机版二进制文件。可执行文件没有去除符号，除了
swift 语言生成的 mangled 符号很冗长，阅读起来没有太大问题。
核心代码只有寥寥数行。程序注册了一个 icalc:// 的 URL，启动后读入 URL 的 host 字段，解码后作为数学表达式执行，并打印结果：
    public func evaluate(input: String) -> String {
      let mathExpression = NSExpression(format: input)
      if let value = mathExpression.expressionValue(with:constants, context: nil) {
        return "= " + String(describing: value)
      } else {
        return "(invalid expression)"
      }
    }
看来玄机就在 NSExpression 里。
虽然手机是搭载了当时最新的 A12 芯片真机，这个题目并不需要真的绕过 PAC，也不用担心 iOS 的代码签名策略，同样可以执行任意代码。
因为 Objective-C 里有一个鲜为人知的类似 eval 的功能。
一提到 eval
函数，一些有经验的程序员，特别是有安全背景的，一般都会皱起眉头。这个函数多出现在脚本语言解释器当中，允许将输入的字符串变量当作代码动态执行。
由于 eval 直接执行代码的能力，对输入处理不当的情况下会造成严重的远程代码执行问题；加之 eval
本身接受动态字符串的设计，使得编译期的优化成本被放在运行时，对程序效率有很大影响；最后 eval
执行的代码上下文有可能调用栈不完整，对调试也不够友好。很多人眼中 eval == evil，都尽量避免使用。
笔者是眼花了？Objective-C 作为一门编译型语言，生成的二进制都是本地代码，怎么能提供 eval
的能力？除非借助脚本引擎并暴露原生接口，例如一些基于 JavaScriptCore 的 hybrid app
或者热补丁框架。这些显然都属于第三方代码，不是语言或者 Runtime 自带的功能。
然而 Objective-C 的 Foundation 框架里还真的自带了一个具有原生代码执行能力的解释器。它们甚至在官方文档上有清晰的说明，就是
NSPredicate 和 NSExpression 两个类。它们接受特定语法的表达式，内置了数学运算甚至局部变量的支持，还能调用任意
Objective-C 方法，相当于在语言当中嵌入了另一个脚本语言。
NSPredicate（谓词）对许多 iOS 开发者来说不会陌生。最常见的场景就是用来过滤数组和正则表达式匹配，也可以配合 CoreData 查询数据库。
通常使用 +[NSPredicate predicateWithFormat:] 创建一个实例。此外还有两个方法可以实现参数绑定：
  * \+ predicateWithFormat:argumentArray:
  * \+ predicateWithFormat:arguments:
例如如下代码将在数组 names2 当中找到所有在 names1 当中出现过的元素：
    NSArray *names1 = [NSArray arrayWithObjects:@"Herbie", @"Badger", @"Judge", @"Elvis",nil];
    NSArray *names2 = [NSArray arrayWithObjects:@"Judge", @"Paper Car", @"Badger", @"Finto",nil];
    NSPredicate *predicate = [NSPredicate predicateWithFormat:@"SELF IN %@", names1];
    NSArray *results = [names2 filteredArrayUsingPredicate:predicate];
    NSLog(@"%@", results);
关于 predicate 的语法，可以访问 Apple 的官方开发者文档：
NSExpression 稍微小众一些，但和 NSPredicate 关系密切。每一个 NSPredicate 对象都由至少两个 NSExpression
操作数（左值、右值）组成。
用来初始化谓词的语法和 NSExpression 的语法是同一套。如果阅读 Foundation.framework
的反汇编，就会发现，哪怕是官方的代码，在初始化 NSExpression 的时候都是先创建一个 NSPredicate，然后取其中一个操作数节点返回。
它们都支持复合运算的数学表达式，因此可以直接用来当计算器使用：
    let mathExpression = 
    let mathExpression = NSExpression(format: "4 + 5 - 2**3")
    let mathValue = mathExpression.expressionValueWithObject(
                                           nil, context: nil) as? Int
    // 1NSExpression(format: "4 + 5 - 2**3")let mathValue = mathExpression.expressionValueWithObject(                                       nil, context: nil) as? Int// 1
而在这个例子里，表达式会转化成 NSFunctionExpression 对象，其具有如下属性：
  * operand：NSPredicateUtilities 类
  * selector: +[_NSPredicateUtilities from:substract:] 方法
  * arguments：参数数组，包含嵌套的 NSExpression 表达式对象
也就是说，数学运算在这里翻译成了一个 AST（抽象语法树）结构，叶子节点是各种 NSExpression 的子类，用来表示操作数。二元数学运算映射到了
_NSPredicateUtilities 类的特定方法的调用。具体到某个数字字面量，则会翻译成
NSConstantValueExpression，内部使用 NSNumber 表示具体的值。
在调用 -[NSExpression expressionValueWithObject:context:] 时，Foundation
将这个语法树转换成一系列的 NSInvocation 对象并执行。上面的数学表达式 4 + 5 - 2**3，等价于如下的 Objective-C 代码：
    [_NSPredicateUtilities from:
     [_NSPredicateUtilities add:@4 to:@5]
     subtract:[_NSPredicateUtilities raise:@2 toPower:@3]];
而 _NSPredicateUtilities 这个类，则包含了所有支持的运算符和表达式的实现：
需要注意的是，NSExpression 返回的值并不能保证类型，在特殊情况下甚至无法保证返回的是 NSObject 的子类实例（id）。
那么什么样才叫特殊情况？
这是摘自 NSExpression 文档的一段话：
读者在前文已经注意到了，即使是类似 1+1 这样的数学表达式也会翻译成 NSFunctionExpression，而这个对象里直接保存了
objc_msgSend 的 target、selector 和 arguments 参数。实际上调用任意原生 Objective-C
方法是允许的，诀窍就是使用这个叫 FUNCTION() 的函数，基本等价于 objc_msgSend 或者 performSelector:。
例如：
> FUNCTION(FUNCTION(FUNCTION('A', 'superclass'), 'alloc'),
> 'initWithContentsOfFile:', '/etc/passwd')
这行表达式先用 superclass 获取 NSString 类，然后创建一个新实例并用 - initWithContentsOfFile:
方法填充内容，执行的结果会读取到 /etc/passwd 文件。
更为强大的是，Foundation 内部直接提供了一个 CAST() 操作符用来做数据类型的转换。在其中有一个“后门”，当第二个参数是 Class
时，就会调用 NSClassFromString 通过反射查找对应的类返回。
    id +[_NSPredicateUtilities castObject:toType:]
    (_NSPredicateUtilities_meta *self, SEL a2, id a3, id NSString)
    {
    if ([@"Class" isEqualToString:a4])
     return NSClassFromString(a4);
是不是有 Java 反序列化漏洞的味儿了？
能 NSClassFromString 和 performSelector:，任意代码执行绰绰有余了。
Project Zero 之前做了一个 iMessage 远程 0click 任意代码执行的研究，其中创造了一种在 PAC 环境下仍然可以执行（几乎）任意
Objective-C 和导出符号的办法，称之为 SeLector Oriented Programming。
可以看到 NSExpression 和 SLOP 的效果非常接近。不过这样执行任意代码是有局限性的：
  * NSExpression 没有代码“行”的概念，一次就只有一个表达式
  * 没有控制流。不过表达式支持一些逻辑运算，可以变相实现一些判断
  * 默认情况下没有局部变量。只有在 -[NSExpression expressionValueWithObject:context:] 方法的 context 传入一个 NSMutableDictionary 时，才可以使用 variable assignment 语句。但由于一次只能一行表达式，实际上也不能达到局部变量的效果