(2)
(3)
(4)
1√2
|X , 1⟩ =
1√2
|Y , 1⟩ =
|Z , 1⟩ = |0⟩
A Link Layer Protocol for Quantum Networks
Importantly, for the discussion here is that not all joint states can be factorized into single qubit states |ϕ1⟩A
way. These are called entangled states. For example, consider the state
and |ϕ2⟩B
in this
(9)
which is a superposition of (1) both qubits being in the state |0⟩ and (2) both qubits being in the state |1⟩. This is an entangled
state, i.e., it cannot be factorized into two individual states, giving rise to genuinely quantum correlations between A and B
that have no classical analogue. The state |Φ+⟩ is one of the so called Bell states. These are entangled states, where the other
three are given as
(|0⟩A ⊗ |0⟩B + |1⟩A ⊗ |1⟩B) ,
(cid:12)(cid:12)Φ+(cid:11) =
1√2
|Φ
−⟩ =
(cid:12)(cid:12)Ψ+(cid:11) =
|Ψ
−⟩ =
1√2
1√2
1√2
(|0⟩A ⊗ |0⟩B − |1⟩A ⊗ |1⟩B),
(|0⟩A ⊗ |1⟩B + |1⟩A ⊗ |0⟩B),
(|0⟩A ⊗ |1⟩B − |1⟩A ⊗ |0⟩B).
(10)
(11)
(12)
−⟩ = Z A(cid:12)(cid:12)Φ+(cid:11) ,
|Φ
(cid:12)(cid:12)Ψ+(cid:11) = X A(cid:12)(cid:12)Φ+(cid:11) ,
−⟩ = Z AX A(cid:12)(cid:12)Φ+(cid:11) ,
|Ψ
Measurement outcomes of measuring the two qubits in any of the Bell-states in the bases X, Z and Y are either perfectly
correlated or perfectly anti-correlated. For example, for |Φ+⟩ the measurement outcomes are perfectly correlated in the X
and Z bases but perfectly anti-correlated in the Y basis. On the other hand, for |Ψ−⟩ the measurement outcomes are perfectly
anti-correlated in all three bases.
Relevant to understand the generation of entanglement is that all the Bell-states can be transformed to one another by
only applying local quantum gates to one of the qubits. Two useful gates are the bit flip X |x⟩ = |x + 1 mod 2⟩ and phase flip
Z |x⟩ = (−1)x |x⟩. Applying them on qubit A (at node A only) allows one to transform:
(13)
where we added the index A to emphasize the gates are applied to qubit A. We could also apply such gates to qubit B to have
the same effect.
In the heralded entanglement generation (Section 4.4), we can obtain either failure, or else success. In the case of success, an
additional bit indicates whether we produced the state |Ψ+⟩ or |Ψ−⟩. From equation (13), these two states can be transformed
between each other by simply applying a Z-gate to one of the qubits.
A.3 Fidelity and QBER
In any real implementation of a quantum network, the generated entangled states will always differ from the perfect Bell
states above due to noise in the system. When writing noisy states, it is convenient to express the state as a density matrix.
For a perfectly prepared state |Ψ−⟩, the density matrix is ρ = |Ψ−⟩⟨Ψ−|. This allows one to express noise. For example, the
analogue of applying a classical bit flip error X with some probability perr can be written as
(14)
The fidelity F measures how close a realized state ρ is to an ideal target state |Ψ−⟩. The fidelity of a state ρ with the target
ρnoisy = (1 − perr)ρ + perrX ρX .
state |Ψ−⟩ can be written as
F[Ψ
−] = ⟨Ψ
−| ρ |Ψ
−⟩
(15)
where F = 1 if ρ is identical to the target state. We have 0 ≤ F ≤ 1, where a larger value of F means we are closer to the target
state.
It is important to note that one cannot measure the fidelity of a single instance of a quantum state. However, if we produce the
same state many times in succession, we can estimate its fidelity. One way to do this is to measure the qubit-error-rate (QBER).
Consider |Ψ−⟩ above and recall that measurement outcomes in the X, Z and Y bases are always perfectly anti-correlated in
this case. I.e. we always get different measurement outcome for qubit A and for qubit B. In case the state is noisy, this is no
longer the case. For a fixed basis (say Z) the QBER (here QBERZ ) is the probability of receiving equal3 measurement outcomes,
3QBER for the other Bell states is defined in a similar manner, taking into account that measurement outcomes are always equal in some bases for the other
ideal Bell states.
19
Dahlberg, Skrzypczyk, et al.
when measuring qubit A and qubit B in the Z basis. Similarly, we can define QBERX and QBERY for measurements in the X
and Y bases. One can show that the fidelity and QBER of the Bell state state |Ψ−⟩ are related as
−] = 1 − QBERX + QBERY + QBERZ
F[Ψ
2
.
(16)
A.4 Decoherence
Quantum memories are inherently noisy and the amount of noise a qubit experiences depends on how long it stays in the
memory. How long a qubit state is preserved is usually captured by the two numbers T1 (energy/thermal relaxation time) and
T2 (dephasing time) of the qubit [76], as well as free-induction decay T ∗
2 (see e.g. [60]). Here, we focus on our performance
metric (the fidelity) and illustrate in Figure 9a how it behaves as a function of time, where to highlight the actual effect of
limited memory lifetimes we show the timescales in terms kms in fiber, where c = 206753 km/s is the speed of light in fiber.
Figure 9 shows the fidelity of an entangled state stored in two electron states with a coherence time (T2) of 1.46 s as a function
of the time it takes to communicate over a certain distance.
entangled state(cid:12)(cid:12)Ψ+(cid:11) in the communication (blue,
(a) Reduction in fidelity F when storing a perfect
left triangles) and memory (orange, right trian-
gles) qubit in terms of the number of communica-
tion rounds in the QL2020 scenario (over 25 km).
Noise parameters listed in Table 6 (T1 = 2.68 ms
and T2 = 1.00 ms for communication and T1 = ∞
and T2 = 3.5 ms for memory qubit).
(b) Illustration of an improved communication
qubit by means of dynamical decoupling with
T2 = 1.46 s (T1 = ∞). If such a qubit was used
in an NV platform connected to a network,
the qubit could be kept alive while waiting
for classical control communication over long
distances.
Figure 9
B TESTING
We now explain the test used to gain confidence in transmission quality, specifically to estimate the quality parameter fidelity
F used in the FEU (Section 5.2.3). The following is a standard procedure in quantum information to estimate the fidelity
F = F[|Ψ−⟩] of a state ρ to the entangled target state |Ψ−⟩. We emphasize that it is not possible to measure F from a single
copy of the state ρ. The matrices ρ are a mathematical description of an underlying quantum system, and not a matrix that
one can read or access like classical information.
We first describe the standard procedure in the way that it is normally used. We then outline how this protocol can be
extended to the case of interest here, and why we can draw conclusions even in real world scenarios in which we can experience
arbitrary correlated errors.
Let us first assume a simpler scenario, in which n identical noisy entangled states ρ are produced in succession and we want
to estimate F. We remark that when using imperfect quantum devices it is evidently a highly idealized situation that all states
ρ are exactly identical. We can see from Eq. (16) that we can express F in terms of the quantum bit error rates QBERX , QBERZ ,
and QBERY , which immediately suggests a protocol: specifically, we will estimate the QBERs in bases X, Z and Y to obtain F.
We sketch such a protocol in a specific way to build intuition for the more general procedure below:
20
A Link Layer Protocol for Quantum Networks
• Node A randomly chooses an n element string r = r1, . . . , rn ∈ {X , Z , Y} and sends it to Node B.
• Nodes A and B now perform the following procedure for 1 ≤ j ≤ n rounds:
– Node A produces one entangled pair ρ with Node B.
– Nodes A and B both measures their respective qubits in the basis rj and record outcomes xA
j
• Node B (A) transmits the outcome string x B = x B1 , . . . , x B
n ) to Node A (B).
• Both nodes estimate the error rates
n (xA = xA1 , . . . , xA
respectively.
(Node A) and x B
j
j
QBERZ ≈ #{j | xA
QBERX ≈ #{j | xA
QBERY ≈ #{j | xA
j
j
j , rj = Z}
j , rj = X}
j , rj = Y}
,
,
,
= x B
#{j | rj = Z}
= x B
#{j | rj = X}
= x B
#{j | rj = Y}
(Node B)
(17)
(18)
(19)
(20)
where #{j | condition} is the number of indices 1 ≤ j ≤ n satisfying the stated condition.
Using Eq. (16) then yields an estimate of F.
Before we continue it may be instructive to compare the procedure above to the classical world. Evidently, classically, one
way to gain confidence in a channels ability to transmit classical bits would be rather similar: Instead of preparing states ρ, we
choose n random bits and send them. In the end, we estimate the error rate. Translated to the quantum setting, we would be
preparing random bits |0⟩ and |1⟩ at node A, and sending them to node B which measures them in the Z bases to obtain an
estimate of the bit error rate, similarly to QBERZ . Such an estimate can give us confidence that also future bits are likely to be
transmitted with roughly the same amount of errors as the test bits. This of course does not allow the same level of confidence
as error detection in the quality of transmission. Specifically, a CRC is a check for a specific piece of data (e.g. one frame in 100
Base T), whereas such a test only yields a confidence in transmission quality.
Creating an analogous quantum CRC is theoretically possible by using a quantum error correcting code [76], but technolog-
ically highly challenging and highly infeasible for many years to come. Yet, we remark that also in a future in which such
methods would become feasible we may not want to employ them because the requirements of our use cases are different.
Since many protocols for our use cases are probabilistic, or make many pairs (especially NL and MD use cases), we often do
not require more confidence on the exact quality of a single pair. Indeed, we can pass errors all the way up to the application
level (such as for example in QKD [10]), where errors are then corrected using classical instead of quantum error correction. In
such cases, fluctuations in quality are indeed expected at the application level. Here, using fast and easy to produce test rounds
may remain preferable over more time consuming quantum CRCs.
The protocol above is limited in two ways: (1) all states were assumed to be both identical and independent from each other.
I.e., there are no memory effects in the noise. Such memory effects are non-trivial in the quantum regime since they may
inadvertently create (some amount of) entanglement not only between A and B, but between subsequent pairs produced. (2)
We measured all n rounds, consuming all entangled pairs. Instead, we would like a protocol in which only test rounds are
interspersed, and we can draw an inference about the pairs which we did not measure. Again, the possibility of quantum
correlated noise between subsequent rounds makes this non-trivial.
To achieve this, we use a slight variant of the above as in [79]. Precise statistical statements are relatively straightforward -
but very lengthy - to obtain using the techniques in [79, 95] and are out of scope of this paper. Here, we focus on the practical
protocol and intuition without the need for mathematical tools from quantum information, which is a direct extension of the
one above:
• Nodes A and B randomly pick an N bit string t = t1, . . . , tN where Pr(cid:2)tj = 1(cid:3) = q for some parameter q determining the
• Nodes A and B agree on a sampling window N .
frequency of using test rounds. A and B periodically refresh t as needed.
• Nodes A and B randomly pick an N element basis string r = r1, . . . , rN ∈ {X , Z , Y}. A and B periodically refresh r as
needed.
21
Dahlberg, Skrzypczyk, et al.
• The EGP uses t to determine when to intersperse a test round. When producing the j-th response to the MHP, the EGP
checks whether tj = 1. If so, it uses a standard test response instead to attempt to produce a test pair ρ, and takes as the
measurement basis the next available in the random basis string r.
• A and B record their measurement outcomes.
• A and B estimate QBERX , QBERZ , QBERY over the past N rounds of producing entanglement (tested and untested ’data’
rounds)
The key insight in the analysis of this procedure is that we can (with some amount of confidence depending on N and q) use
the QBER measured on the test rounds to determine the QBER on the untested - i.e. data - rounds [95, Inequality 1.3]. Using
Eq. (16), then again allows one to draw conclusions about the average fidelity of the untested rounds to inform the FEU.
C SIMULATION AND MODELING
We here provide additional simulation results, and further verification against the quantum hardware.
For our simulations we make use of a purpose built discrete event simulator for quantum networks: NetSquid4. By utilizing
the discrete event paradigm NetSquid is capable of efficiently simulating the transmission and decay of quantum information
in combination with the complex and stochastic nature of communication protocols. NetSquid can simulate both arbitrary
quantum operations and Clifford-only gates, the former allowing for a precise simulation of small networks, while the latter
allowing for networks containing thousands of nodes and qubits to be studied. Complete libraries of base classes enable users to
simulate protocols and model physical devices at different levels of abstraction; for instance, (quantum) channels with modular
noise, loss and delay models, or quantum processing devices with configurable gate topologies. NetSquid thus provides an ideal
tool to validate network design choices and verify the performance of quantum network protocols in a physically-realistic
setting.
The core simulation engine used by NetSquid is based on DynAA[41, 42, 99], a computer-aided analysis and design tool for
the development of large, distributed, adaptive, and networked systems. It combines the best of network and system simulation
technologies in a discrete-event modeling framework. DynAA provides a simple, yet powerful language able to describe large
and complex system architectures, and innovative constructs to express adaptation mechanisms of the system, such as dynamic
parameterization, and functional and architectural reconfiguration. A DynAA model can be simulated and/or analyzed to
reveal system wide performance indicators, such as – but not limited to – throughput, power consumption, connectivity,
reliability, and availability.
C.1 Validation of simulation
We compare our simulation model against further data gathered from the NV platform Labscenario. Node A rotates its qubit
over the Z-axis of the Bloch sphere by a fixed angle, followed by measuring its communication qubit in a basis (X , Y or Z)
that the nodes agreed upon beforehand. Node B only performs the measurement on its communication qubit, in the same
pre-agreed basis. Regardless of the signal from the heralding station, both nodes initialize their qubit in |0⟩ before the start of
the next round.
We compute the correlations of the measurement outcomes (mA, mB = ±1)as shown in Figure 10 using
Pr(mA (cid:44) mB) =
1 − ⟨B ⊗ B⟩
2
where ⟨B ⊗ B⟩ is the expectation value of the product of joint measurement outcomes mA · mB with B ∈ {X , Y , Z} the
measurement basis after rotation.
The fidelity with the target state |Ψ±⟩ (where ± denotes the heralding detector) can be expressed as a function of the
correlations as
1
4 [1 ± ⟨X ⊗ X⟩ ± ⟨Y ⊗ Y⟩ − ⟨Z ⊗ Z⟩] .
Assuming independence between the different rounds, propagation of standard deviations can be computed using standard
techniques.
4NetSquid is an acronym for Network Simulator for Quantum Information using Discrete events.
22
A Link Layer Protocol for Quantum Networks
Figure 10: Comparison of simulation results with data from NV hardware from [53] (Lab scenario), showing good
agreement. (a) Probability of success that the two nodes’ measurements in basis X/Y/Z on the state after a one-
sided Z-rotation are unequal, at α = 0.1 and (b) fidelities, both computed from correlations in the measurement
outcomes (see text). (c) Probability that a single generation attempt succeeds, which is computed as 1/ ¯N where ¯N is
the average number of runs up to and including successful heralding of entanglement. Solid line is the theoretical
model from [53]. Error bars indicate 1 standard deviation. The simulation data was extracted by running our
model implemented in NetSquid on the supercomputer Cartesius at SURFsara[2] for 122 hours of wall clock time
using 63 cores. A single data point is the average over at least (a) 100 pairs, (b) 300 pairs and (c) 600 pairs, which took
between 500k (for α = 0.5) and 10.000k (for α = 0.03) entanglement generation attempts, with elapsed simulated
time between 5 and 117 seconds.
C.2 Simulation data
In this section we present further results from the simulations of our proposed link layer protocol. Simulation data will be
made available upon request. In total 1618 simulation runs were performed: 2 × 169 long runs (120 h wall time each) with 169
scenarios and 1280 shorter runs (24 h wall time each) with varying request load and minimal requested fidelity. Out of the 169
scenarios used in the long runs, 2 × 5 × 3 concerned scenarios where the entanglement generation requests where a mix of the
priorities NL, CK and MD. For these mixed scenarios we considered (1) two physical setups, Lab and QL2020, (2) five usage
patterns (described below) and (3) three different schedulers, FCFS, LowerWFQ and HigherWFQ.
We implement different usage patterns of the link layer by, in every MHP cycle, issuing a new CREATE request for a random
number of pairs k (max kmax) with probability f · psucc/(E · k), where psucc is the probability of an attempt being successful, f is
a fraction determining load of our system and E is the expected number of MHP cycles to make one attempt. For Lab(QL2020)
E = 1 (E = 1) for M requests and E ≈ 1.1 (E ≈ 16) for K requests. We consider five different use patterns with f and kmax
defined in table 2.
Usage pattern
Uniform
MoreNL
MoreCK
MoreMD
NoNLMoreCK
NoNLMoreMD
NL
f = 0.99 · 1/3, kmax = 1
f = 0.99 · 4/6, kmax = 3
f = 0.99 · 1/6, kmax = 3
f = 0.99 · 1/6, kmax = 3
f = 0, kmax = 3
f = 0, kmax = 3
Table 2
CK
f = 0.99 · 1/3, kmax = 1
f = 0.99 · 1/6, kmax = 3
f = 0.99 · 4/6, kmax = 3
f = 0.99 · 1/6, kmax = 3
f = 0.99 · 4/5, kmax = 3
f = 0.99 · 1/5, kmax = 3
MD
f = 0.99 · 1/3, kmax = 1
f = 0.99 · 1/6, kmax = 256
f = 0.99 · 1/6, kmax = 256
f = 0.99 · 4/6, kmax = 256
f = 0.99 · 1/5, kmax = 256
f = 0.99 · 4/5, kmax = 256
We make use of the following three scheduling strategies:
23
+(hardware)(hardware)+(simulation)+(simulation)0.30.40.50.60.70.8F0.00.10.20.30.40.50123psuccess(104)SimulationHardware(b)(c)(a)01202403600.00.20.40.60.81.0p(outcomeAoutcomeB)X0120240360Y=0.1ZReadout-basis phase on one side ()• FCFS: First-come-first-serve with a single queue.
• LowerWFQ: NL are always service first (strict priority) and a weighted fair queue (WFQ) is used between CK (weight 2)
and MD (weight 1).
• HigherWFQ: NL are always service first (strict priority) and a weighted fair queue (WFQ) is used between CK (weight
10) and MD (weight 1).
Dahlberg, Skrzypczyk, et al.