➌            if (cmd.itype == NN_leave) {  //intercept the leave instruction  
➍               MakeLine(SCOLOR_ON SCOLOR_INSN "cya" SCOLOR_OFF);  
                   return 2;  
              }  
              else if (cmd.Op2.type != o_void) {  
                 //intercept 2 operand instructions  
                 op_t op1 = cmd.Op1;  
                 op_t op2 = cmd.Op2;  
                 cmd.Op1 = op2;  
                 cmd.Op2 = op1;  
➎                 (*ph.u_out)();  
                 cmd.Op1 = op1;  
                 cmd.Op2 = op2;  
                 return 2;  
              }  
           }  
        }  
        return 0;  
     }  
     plugin_t PLUGIN = {  
       IDP_INTERFACE_VERSION,  
➏     PLUGIN_PROC | PLUGIN_HIDE | PLUGIN_MOD,  // plugin flags  
       init,                 // initialize  
       term,                 // terminate. this pointer may be NULL.  
       run,                  // invoke plugin  
       comment,              // long comment about the plugin  
       help,                 // multiline help about the plugin  
       wanted_name,          // the preferred short name of the plugin  
       wanted_hotkey         // the preferred hotkey to run the plugin
     };
这个插件的 init
 函数确认当前处理器为 x86 处理器（➊ ），然后“钩住”处理器通知（➋）。在hook
 回调函数中，插件处理 custom_out
 通知，以识别 leave
 指令（➌），并生成一个替代的输出行（➍ ）。对于包含两个操作数的指令，hook
 函数会临时保存与当前指令关联的操作数，然后交换它们在指令中的顺序，最后调用 x86 处理器的 u_out
 函数（➎）来处理与打印输出行有关的全部细节。在返回时，当前指令的操作数还原到它们最初的顺序。最后，插件的标志（➏）指出：插件应在处理器加载时加载，不得在 Edit ▶Plugins 菜单中列出，并可以修改数据库。下面的输出说明了该插件所进行的自定义效果：
    .text:00401350            push    ebp  
➐   .text:00401351            mov     400000h, edx  
    .text:00401356            mov     esp, ebp  
➐    .text:00401358            mov     offset unk_402060, eax  
➐    .text:0040135D            sub     0Ch, esp  
    .text:00401360            mov     edx, [esp+8]  
    .text:00401364            mov     eax, [esp+4]  
➐    .text:00401368            mov     offset unk_402060, [esp]  
    .text:0040136F            call    sub_401320  
➑    .text:00401374            cya  
    .text:00401375            retn
可以看到，在这 4 条指令（➐）中，常量作为第一个操作数出现，且 cya 指令替代了leave指令（➑）。
在第21 章中，我们将使用自定义处理器插件帮助分析特定类型的模糊二进制文件。
19.6 处理器模块体系结构
在着手设计处理器模块时，你需要考虑的一件事情是该处理器是否会与某个特定的加载器紧密耦合，或者是否能够与所有加载器解耦。以 x86 处理器模块为例，这个模块不对被反汇编的文件的类型做任何假设。因此，它可以与一系列加载器结合使用，如 PE、ELF 和Mach-O加载器。
同样，如果加载器能够独立于文件所使用的处理器而处理一种文件格式，则说明该加载器能够用于多种用途。例如，无论是包含 x86 代码或是 ARM代码，PE加载器都能正常运行；无论是包含x86、MIPS或SPARC代码，ELF 加载器都能正常运行；无论是包含 PPC 或x86 代码，Mach-O加载器都能正常运行。
实际中的 CPU 适用于创建不依赖于特定的输入文件格式的处理器模块。另一方面，虚拟机语言却造成更大的挑战。虽然有大量加载器（如 ELF 、a.out 和PE加载器）可用于加载在本地硬件上运行的代码，但虚拟机通常同时充当加载器和CPU 。结果，对虚拟机来说，文件格式和基本的字节码密切相关，缺乏其中一方，另一方将不可能存在。在开发 Python 处理器模块的过程中，我们曾多次遇到这种限制。许多时候，如果对正被反汇编的文件的布局缺乏更加深入的了解，我们将很难生成更具可读性的输出。
为了使Python 处理器能够访问它所需要的其他信息，我们可以构建一个 Python 加载器，以特定Python 处理器的方式配置数据库，以便 Python 处理器知道到底在什么地方找到它需要的信息。在这种情况下，加载器需要向处理器传递大量加载器状态数据。其中一种方法是将这些数据存储在数据库网络节点中，随后，处理器模块可以获取这些数据。
另外，也可以构建一个只可以识别.pyc 文件的加载器，然后把所有加载任务交给处理器模块来完成，这样，处理器肯定知道如何定位反汇编.pyc 文件所需的全部信息。
通过允许加载器将所有加载操作“委派”给相关的处理器模块，IDA 帮助我们创建紧密耦合的加载器和处理器模块。SDK 中的Java 加载器和Java 处理器模块就是以这种方式创建的。要想使加载器能够将加载任务委派给处理器模块，加载器必须首先通过返回f_LOADER
 的文件类型（在ida.hpp 中定义）接受一个文件。如果加载器由用户选择，则加载器的load_file
 函数应确保在必要时通过调用 set_processor_type
 （见idp.hpp）指定正确的处理器类型，然后向该处理器发送一条加载器通知消息。为构建一个紧密耦合的 Python 加载器/ 处理器组合，我们应使用下面的load_file
 函数构建加载器：
void idaapi load_file(linput_t *li, ushort neflag, const char *) {  
   if (ph.id != PLFM_PYTHON) {  //shared processor ID  
      set_processor_type("python", SETPROC_ALL|SETPROC_FATAL);  
   }  
   //tell the python processor module to do the loading for us  
   //by sending the processor_t::loader notification message  
   if (ph.notify(processor_t::loader, li, neflag)) {  
      error("Python processor/loader failed");  
   }
}
处理器模块收到 loader
 通知时，它将负责将输入文件映射到数据库中，并确保它能够访问它在ana、emu
 和out
 阶段所需的任何信息。读者可以在本书的配套网站上找到一个以这种方式运行的Python 加载器和处理器组合。
19.7 编写处理器模块
在IDA 5.7中引入的使用 IDA 的脚本语言创建处理器模块的功能在一定程度上简化了处理器模块的创建过程。最起码，它完全取消了模块创建过程的构建阶段。Hex-Rays 的Elias Bachaalany在Hex 博客1
 上的一篇文章中介绍了脚本化处理器模块，而且 IDA 的EFI 字节码处理器模块也通过Python 脚本来实现（参见/procs/ebc.py ）。请注意，虽然 Hex 博客文章提供了有用的背景，但用于编写处理器模块的具体 API 已有所变化。开始编写你自己的处理器模块脚本的最佳方法是，使用 SDK 附带的模板模块（参见/module/script/proctemplate.py）。除其他内容外，这个模板枚举了 Python 处理器模块所需的所有字段。
1. 参见See http://www.hexblog.com
 /?p=116 。
脚本化处理器模块利用了前面讨论的几乎所有元素。了解这些元素将有助于你顺利过渡到脚本化模块。此外，在开发你自己的模块时，你可以用 IDA （截止 IDA 6.1 ）当前附带的 3 个处理器模块作为范例。与 SDK 附带的C++ 示例（涵盖几个文件并要求你正确配置构建环境）相比，这两个模块的结构更易于理解。
从宏观上看，以 Python 实现处理器模块需要完成下面两个任务。
定义子类 idaapi.processor_t
 ，以实现所有所需的处理器模块函数，如emu
 、ana
 、out
 和outop
 。
定义返回处理器类的一个实例的 PROCESSOR_ENTRY
 函数（而非子类的成员）。
下面的代码列出了所需的一些元素：
from idaapi import *  
class demo_processor_t(idaapi.processor_t):  
   # Initialize required processor data fields including id and  
   # assembler and many others. The assembler field is a dictionary  
   # containing keys for all of the fields of an asm_t. A list of  
   # instructions named instruc  is also required. Each item in the list  
   # is a two-element dictionary containing name and  feature  keys.  
   # Also define functions required by processor_t such as those below.  
   def ana(self):  
      # analyzer behavior  
   def emu(self):  
      # emulator behavior  
   def out(self):  
      # outputter behavior  
   def outop(self):  
      # outop behavior  
# define the processor entry point function which instantiates  
# and returns an instance of processor_t  
def PROCESSOR_ENTRY():  
    return demo_processor_t()
与上面的脚本相比，有效的Python 处理器模块包含更多字段和函数，基本上与任何以C++ 实现的处理器模块所需的字段相对应。编写脚本后，将其复制到/procs 目录，即可安装模块。
19.8 小结
处理器模块是 IDA 模块化扩展中最复杂的模块，我们需要一段时间学习，还要花更多时间构建它。但是，如果你处在逆向工程的有利市场，或者希望在逆向工程社区取得领先地位，那么你肯定需要开发一个处理器模块。需要特别强调的是，在开发处理器时，耐心和反复试验是你取得成功的重要因素。如果你能够将你开发的处理器模块应用于你收集到的每一个新的二进制文件，你的努力工作就会获得巨大的回报。
在本章最后，我们结束了关于 IDA 可扩展功能的讨论。在接下来的几章中，我们将讨论IDA在实际应用程序中的许多用法并看一下用户如何使用 IDA 扩展执行各种有趣的分析任务
第五部分 实际应用
本部分内容：
第20章 编译器变体
第21章 模糊代码分析
第22章 漏洞分析
第23章 实用IDA插件
第20章 编译器变体
现在，如果你已经掌握了前面的内容，你就拥有了高效使用 IDA 的基本技巧，更重要的是，能让 IDA 为你工作。作为初学者，下一步该学习如何适应二进制文件（而非IDA ）将扔给你的“忍者星”飞镖了。根据你分析汇编语言的动机，你要么对你分析的代码非常熟悉，要么对它一无所知。如果你碰巧花费了大量时间研究在Linux平台上使用 gcc 编译的代码，那么，你可能非常熟悉它生成的代码的风格。另一方面，如果有人给你一个使用Microsoft Visual C++（VC++）编译的调试版程序，那么，对于你看到的代码，你会感到十分困惑。恶意软件分析人员尤其会遇到各种类型的代码。即使暂时将与模糊相关的主题放在一边，恶意软件分析人员还是很可能会在同一天下午看到使用 Visual Basic、Delphi、Visual C/C++等其他语言创建的代码。
在这一章中，我们将简要讨论 IDA 中各种编译器的不同之处。这样做的目的不是为了研究编译器为何存在差异，而是为了揭示这些差异如何在反汇编代码清单中表现出来，以及如何解析这些差异。此外，用于构建特定软件的编译器及相关选项构成了分析该软件作者的一个数据点。
虽然存在大量使用各种语言的编译器，但是，在本章的示例中，我们主要使用已编译C 代码，因为各种平台的 C 编译器很常见。
20.1 跳转表与分支语句
C 语言的switch
 语句经常成为编译器优化的目标。这类优化的目的是将分支变量与一个有效的case
 标号以最有效的方式进行匹配。通常，实现匹配的方法取决于switch
 语句的case
 标号的形式。如果 case
 标号十分分散，如在下面的例子中：
switch (value) {  
   case 1:  
      //code executed when value == 1  
      break;  
   case 211:  
      //code executed when value == 211  
      break;  