The fanotify  API provides notification and 
interception of filesystem events.  Use cases 
include virus scanning and hierarchical storage 
management.   
memfd_create, man!  man (2) memfd_create
 DESCRIPTION
memfd_create()  creates an anonymous file and 
returns a file descriptor that refers to it.  
The file behaves like a regular file …
… it lives in RAM and has a volatile backing 
storage.
PR_SET_TIMERSLACK
Since Linux 4.6, the "current" timer slack 
value of any  process  can  be  examined  and 
changed via the file /proc/[pid]/timerslack_ns.  
See proc(5).
CONFIG_EFI_VARS
config EFI_VARS
If you say Y here, you are able to get EFI 
(Extensible Firmware Interface) variable 
information via sysfs.  You may read,  write, 
create, and destroy EFI variables through this 
interface.
Surviving MS_MOVE
1. Poll on /proc/self/mounts
2. Sleep while initramfs finishes and init starts
3. Create a new mount namespace
4. Mount proc (it's not in initramfs)
5. Set mount namespace to init's namespace through setns
6. chroot(“/proc/1/root”)
7. chdir(“.”)
8. chroot(“/”)
Boot Flow, Modified
1
exec
Ramdisk land
fork
UEFI
Boot Flow, Modified
1
exec
Ramdisk land
fork
UEFI
open
Boot Flow, Modified
1
1
exec
Ramdisk land
Rootfs land
fork
UEFI
Boot Flow, Modified
1
1
exec
Ramdisk land
Rootfs land
fork
UEFI
Boot Flow, Modified
1
1
exec
Ramdisk land
Rootfs land
fork
STOP
UEFI
Boot Flow, Modified
1
1
exec
Ramdisk land
Rootfs land
fork
ptrace
UEFI
Ptrace
   0x7fa413d56ba2 :
mov    %r13d,%r10d
   0x7fa413d56ba5 :
mov    %eax,%r8d
   0x7fa413d56ba8 :
mov    %r12d,%edx
   0x7fa413d56bab :
mov    %rbp,%rsi
   0x7fa413d56bae :
mov    %ebx,%edi
   0x7fa413d56bb0 :
mov    $0xe8,%eax
   0x7fa413d56bb5 :
syscall 
=> 0x7fa413d56bb7 :
cmp    
$0xfffffffffffff000,%rax
   0x7fa413d56bbd :
ja     0x7fa413d56bf2 
Ptrace
   0x7fa413d56ba2 :
mov    %r13d,%r10d
   0x7fa413d56ba5 :
mov    %eax,%r8d
   0x7fa413d56ba8 :
mov    %r12d,%edx
   0x7fa413d56bab :
mov    %rbp,%rsi
   0x7fa413d56bae :
mov    %ebx,%edi
   0x7fa413d56bb0 :
mov    $0xe8,%eax
=> 0x7fa413d56bb5 :
syscall 
   0x7fa413d56bb7 :
cmp    
$0xfffffffffffff000,%rax
   0x7fa413d56bbd :
ja     0x7fa413d56bf2 
eax: 0x13f (memfd_create)
Ptrace
   0x7fa413d56ba2 :
mov    %r13d,%r10d
   0x7fa413d56ba5 :
mov    %eax,%r8d
   0x7fa413d56ba8 :
mov    %r12d,%edx
   0x7fa413d56bab :
mov    %rbp,%rsi
   0x7fa413d56bae :
mov    %ebx,%edi
   0x7fa413d56bb0 :
mov    $0xe8,%eax
=> 0x7fa413d56bb5 :
syscall 
   0x7fa413d56bb7 :
cmp    
$0xfffffffffffff000,%rax
   0x7fa413d56bbd :
ja     0x7fa413d56bf2 
eax: 0x13f (memfd_create)
.ELF............
Ptrace
   0x7fa413d56ba2 :
mov    %r13d,%r10d
   0x7fa413d56ba5 :
mov    %eax,%r8d
   0x7fa413d56ba8 :
mov    %r12d,%edx
   0x7fa413d56bab :
mov    %rbp,%rsi
   0x7fa413d56bae :
mov    %ebx,%edi
   0x7fa413d56bb0 :
mov    $0xe8,%eax
=> 0x7fa413d56bb5 :
syscall 
   0x7fa413d56bb7 :
cmp    
$0xfffffffffffff000,%rax
   0x7fa413d56bbd :
ja     0x7fa413d56bf2 
eax: 0x9
(mmap)
   0x90
   0x90
   0x90
   0x90
   0x90
.ELF............
Ptrace
   0x7fa413d56ba2 :
mov    %r13d,%r10d
   0x7fa413d56ba5 :
mov    %eax,%r8d
   0x7fa413d56ba8 :
mov    %r12d,%edx
   0x7fa413d56bab :
mov    %rbp,%rsi
   0x7fa413d56bae :
mov    %ebx,%edi
   0x7fa413d56bb0 :
mov    $0xe8,%eax
   0x7fa413d56bb5 :
syscall 
   0x7fa413d56bb7 :
cmp    
$0xfffffffffffff000,%rax
   0x7fa413d56bbd :
ja     0x7fa413d56bf2 
eax: 0x9
(mmap)
=> 0x90
   0x90
   0x90
   0x90
   0x90
.ELF............
ret2libc (dlopen)
Ptrace
   0x7fa413d56ba2 :
mov    %r13d,%r10d
   0x7fa413d56ba5 :
mov    %eax,%r8d
   0x7fa413d56ba8 :
mov    %r12d,%edx
   0x7fa413d56bab :
mov    %rbp,%rsi
   0x7fa413d56bae :
mov    %ebx,%edi
   0x7fa413d56bb0 :
mov    $0xe8,%eax
   0x7fa413d56bb5 :
syscall 
=> 0x7fa413d56bb7 :
cmp    
$0xfffffffffffff000,%rax
   0x7fa413d56bbd :
ja     0x7fa413d56bf2 
eax: 0x9
(mmap)
   0x90
   0x90
   0x90
   0x90
   0x90
.ELF............
ret
Boot Flow, Modified
1
1
exec
Ramdisk land
Rootfs land
fork
CONT
UEFI
Boot Flow, Modified
1
1
exec
Ramdisk land
Rootfs land
fork
UEFI
Linux Demo
1.
See noise in auditd of exploiting enterprise_tool
2.
Install implant into UEFI and ramdisk
3.
Reboot
4.
Set timerslack marker
5.
Exploit enterprise_tool
6.
See no output in log
7.
Show policy in place
8.
Show variable
Linux Demo
What does this all mean?
Net Happiness Increase
You
Analyst
Mitigations and 
Recommendations
Mitigations and Recommendations
Monitor and Audit UEFI variables across your 
organizations fleet
EDR Should detect UEFI APIs
● It is not common for apps to Set/Get Firmware 
Variables
● NV+BS+RT Variables are suspicious if created after 
installation of platform
Mitigations and Recommendations
EDR Tamper Resistance is not effective
● Sinkholing or killing the sensor usually does not give 
alerts
● Vendors need to work on securing their processes
○ Alert on sinkhole
○ Do not allow ptrace
Stop assembling ramdisks on systems!
Closing and the Rest
Future Work
Look into hiding inside of UEFI Configuration Storage
Analyze more EDR products and how they handle UEFI variables
Use these techniques in more Red Team engagements to increase 
defender efficacy
Look at more platforms for their usage of UEFI variables 
●
More places to hide
Closing
Have yourself a uefi.party and plunder 
away your loot! 
Sucker punch that pesky EDR!
GitHub Repo at 
https://github.com/perturbed-platypus 
References
https://redcanary.com/blog/detecting-all-the-things-with-limited-data/
https://countercept.com/blog/av-bypass-techniques-through-an-edr-lens/
https://github.com/rrbranco/BlackHat2017/blob/master/BlackHat2017-BlackBIOS-v0.13-Published.pdf
https://github.com/emptymonkey/ptrace_do
https://github.com/eklitzke/ptrace-call-userspace
https://magisterquis.github.io/2018/03/31/in-memory-only-elf-execution.html
References for MITRE TTPs
Tuned for processes, commands and API Calls
●
cmd.exe /c 
○
https://attack.mitre.org/techniques/T1059/ 
●
powershell.exe 
○
https://attack.mitre.org/techniques/T1086/
●
Registry modifications
○
https://attack.mitre.org/techniques/T1112/
●
Scheduled Tasks
○
https://attack.mitre.org/techniques/T1053/ 
EOF