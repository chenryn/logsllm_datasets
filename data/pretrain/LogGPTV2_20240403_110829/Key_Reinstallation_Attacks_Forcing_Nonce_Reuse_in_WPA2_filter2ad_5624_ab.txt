handshake messages are encrypted by the data-confidentiality pro-
tocol using the current PTK (we rely on this in Section 3.4).
2.4 Confidentiality and Integrity Protocols
The 802.11i amendment defines two data-confidentiality protocols.
The first is called the Temporal Key Integrity Protocol (TKIP). How-
ever, nowadays TKIP is deprecated due to security concerns [74].
The second protocol is commonly called (AES-)CCMP, and is cur-
rently the most widely-used data-confidentiality protocol [69]. In
2012, the 802.11ad amendment added a new data-confidentiality
protocol called the Galios/Counter Mode Protocol (GCMP) [3]. This
Authentication Request
Authentication Response
(Re)Association Request
(Re)Association Response
optional 802.1x authentication
Msg1(r, ANonce)
Msg2(r, SNonce)
Msg3(r+1; GTK)
Msg4(r+1)
Derive PTK
Derive PTK
Install PTK & GTK
Install PTK
encrypted data frames can now be exchanged
Refresh GTK
Encx
ptk{ Group1(r+2; GTK) }
Ency
ptk{ Group2(r+2) }
Install GTK
Install GTK
e
g
a
t
s
n
o
i
t
a
i
c
o
s
s
a
e
k
a
h
s
d
n
a
h
y
a
w
-
4
e
k
a
h
s
d
n
a
h
y
e
k
p
u
o
r
g
Figure 2: Messages exchanged when a supplicant (client) con-
nects with an authenticator (AP), performs the 4-way hand-
shake, and periodically executes the group key handshake.
amendment also adds support for short-range communications in
the 60 GHz band, which requires a fast cipher such as GCM [3].
Right now, 802.11ad is being rolled out under the name Wireless
Gigabit (WiGig), and is expected to be adopted at a high rate over
the next few years [58]. Finally, the 802.11ac amendment further
extends GCMP by adding support for 256-bit keys [2].
When TKIP is used, the Temporal Key (TK) part of the session
key (PTK) is further split into a 128-bit encryption key, and two
64-bit Message Integrity Check (MIC) keys. The first MIC key is
used for AP-to-client communication, while the second key is used
for the reverse direction. RC4 is used for encryption, with a unique
per-packet key that is a mix of the 128-bit encryption key, the sender
MAC address, and an incremental 48-bit nonce. This nonce is incre-
mented after transmitting a frame, used as a replay counter by the
receiver, and initialized to 1 when installing the TK [1, §12.5.2.6].
Message authenticity is provided by the Michael algorithm. Unfor-
tunately, Michael is trivial to invert: given plaintext data and its
MIC value, one can efficiently recover the MIC key [66, 69].
The CCMP protocol is based on the AES cipher operating in
CCM mode (counter mode with CBC-MAC). It is an Authenticated
Encryption with Associated Data (AEAD) algorithm, and secure as
long as no Initialization Vector (IV) is repeated under a particular
Session F3:  Crypto PitfallsCCS’17, October 30-November 3, 2017, Dallas, TX, USA1315CCS’17, October 30–November 3, 2017, Dallas, TX, USA.
Mathy Vanhoef and Frank Piessens
key1. In CCMP, the IV is the concatenation of the sender MAC
address, a 48-bit nonce, and some additional flags derived from
the transmitted frame. The nonce is also used as a replay counter
by the receiver, incremented by one before sending each frame,
and initialized to 0 when installing the TK [1, §12.5.3.4.4]. This
is supposed to assure that IVs do not repeat. Additionally, this
construction allows the TK to be used directly as the key for both
communication directions.
The GCMP protocol is based on AES-GCM, meaning it uses
counter mode for encryption, with the resulting ciphertext being
authenticated using the GHASH function [28]. Similar to CCMP, it
is an AEAD cipher, and secure as long as no IV is repeated under a
particular key. In GCMP, the IV is the concatenation of the sender
MAC address and a 48-bit nonce. The nonce is also used as a replay
counter by the receiver, incremented by one before sending each
frame, and initialized to 0 when installing the TK [1, §12.5.5.4.4].
This normally assures each IV is only used once. As with CCMP,
the TK is used directly as the key for both communication direc-
tions. If a nonce is ever repeated, it is possible to reconstruct the
authentication key used by the GHASH function [43].
To denote that a frame is encrypted and authenticated using a
data-confidentiality protocol, we use the following notation:
Encn
k{·}
Here n denotes the nonce being used (and thus also the replay
counter). The parameter k denotes the key, which is the PTK (ses-
sion key) for unicast traffic. For group-addressed traffic, i.e., broad-
cast and multicast frames, this is the GTK (group key). Finally, the
two notations
Data(payload)
GroupData(payload)
are used to represent an ordinary unicast or group-addressed data
frame, respectively, with the given payload.
2.5 The Group Key Handshake
The authenticator periodically refreshes the group key, and dis-
tributes this new group key to all clients using the group key hand-
shake. This handshake was proven to be secure in [39], and is
illustrated in the last stage of Figure 2. The authenticator initiates
the handshake by sending a group message 1 to all clients. The
supplicant acknowledges the receipt of the new group key by reply-
ing with group message 2. Depending on the implementation, the
authenticator installs the GTK either after sending group message 1,
or after receiving a reply from all connected clients (see Section 4).
Finally, group message 1 also contains the current receive replay
counter of the group key in the RSC field (see Figure 1).
Both messages in the group key handshake are defined using
EAPOL frames, and are represented using Group1 and Group2 in
Figure 2. Note that group message 1 stores the new group key in
the Key Data field, and hence is encrypted using the KEK (recall
Figure 1). Since at this point a PTK is installed, the complete EAPOL
frame is also protected using a data-confidentiality protocol.
Finally, if a client transmits a broadcast or multicast frame, she
first sends it as a unicast frame to the AP. The AP then encrypts
1Note that we deviate from official 802.11 terminology, where what we call the nonce
is called the packet number, and what we call the IV is called the nonce.
Enter 4-way handshake stage
PTK-INIT
PMK = shared master secret
Msg1 Received
PTK-START
Calculate SNonce
TPTK = CalcPTK(PMK, ANonce, SNonce)
Send Msg2(SNonce)
Msg1 Received
Msg1 Received
Msg3 Received && MIC-Verified &&
!ReplayedMsg
PTK-NEGOTIATING
PTK = TPTK
Send Msg4()
unconditional
PTK-DONE
MLME-SETKEYS.request(PTK)
MLME-SETKEYS.request(GTK)
802.1X::portValid = TRUE
Msg3 Received &&
MIC-Verified &&
!ReplayedMsg
Figure 3: Supplicant 4-way handshake state machine as de-
fined in the 802.11 standard [1, Fig. 13-17]. Keys are installed
for usage by calling the MLME-SETKEYS.request primitive.
the frame using the group key, and broadcasts it to all clients. This
assures all clients within the range of the AP receive the frame.
3 ATTACKING THE 4-WAY HANDSHAKE
In this section we show that the state machine behind the 4-way
handshake is vulnerable to a key reinstallation attack. We then
demonstrate how to execute this attack in real-life environments.
3.1 Supplicant State Machine
The 802.11i amendment does not contain a formal state machine de-
scribing how the supplicant must implement the 4-way handshake.
Instead, it only provides pseudo-code that describes how, but not
when, certain handshake messages should be processed [4, §8.5.6].2
Fortunately, 802.11r slightly extends the 4-way handshake, and does
provide a detailed state machine of the supplicant [1, Fig. 13-17].
Figure 2 contains a simplified description of this state machine.
When first connecting to a network and starting the 4-way hand-
shake, the supplicant transitions to the PTK-INIT state (see Figure 3).
Here, it initializes the Pairwise Master Key (PMK). When receiving
message 1, it transitions to the PTK-START stage. This may hap-
pen when connecting to a network for the first time, or when the
session key is being refreshed after a previous (completed) 4-way
handshake. When entering PTK-START, the supplicant generates a
random SNonce, calculates the Temporary PTK (TPTK), and sends
its SNonce to the authenticator using message 2. The authenticator
will reply with message 3, which is accepted by the supplicant if
2Strangely, this pseudo-code is only present in the original 802.11i amendment. Later re-
visions of the 802.11 standard, which are supposed to combine all existing amendments
into one updated document, no longer contain this pseudo-code.
Session F3:  Crypto PitfallsCCS’17, October 30-November 3, 2017, Dallas, TX, USA1316Key Reinstallation Attacks: Forcing Nonce Reuse in WPA2
CCS’17, October 30–November 3, 2017, Dallas, TX, USA.
the MIC and replay counter are valid. If so, it moves to the PTK-
NEGOTIATING state, where it marks the TPTK as valid by assigning
it to the PTK variable, and sends message 4 to the authenticator.
Then it immediately transitions to the PTK-DONE state, where the
PTK and GTK are installed for usage by the data-confidentiality
protocol using the MLME-SETKEYS.request primitive. Finally, it
opens the 802.1x port such that the supplicant can receive and send
normal data frames. Note that the state machine explicitly takes
into account retransmissions of either message 1 or 3, which occur
if the authenticator did not receive message 2 or 4, respectively.
These retransmissions use an incremented EAPOL replay counter.
We confirmed that the state machine in 802.11r matches the orig-
inal state machine, that was “defined” in 802.11i using textual de-
scriptions scattered throughout the amendment. Most importantly,
we verified two properties which we abuse in our key reinstallation
attack. First, 802.11i states that the AP retransmits message 1 or 3 if
it did not receive a reply [4, §8.5.3.5]. Therefore, the client must han-
dle retransmissions of message 1 or 3, matching the state machine
of 802.11r. Additionally, 802.11i states that the client should install
the PTK after processing and replying to message 3 [4, §8.5.3.3].
This again matches the state machine given in 802.11r.
3.2 The Key Reinstallation Attack
Our key reinstallation attack is now easy to spot: because the sup-
plicant still accepts retransmissions of message 3, even when it is
in the PTK-DONE state, we can force a reinstallation of the PTK.
More precisely, we first establish a man-in-the-middle (MitM) posi-
tion between the supplicant and authenticator. We use this MitM
position to trigger retransmissions of message 3 by preventing
message 4 from arriving at the authenticator. As a result, it will
retransmit message 3, which causes the supplicant to reinstall an
already-in-use PTK. In turn, this resets the nonce being used by the
data-confidentiality protocol. Depending on which protocol is used,
this allows an adversary to replay, decrypt, and/or forge packets.
In Section 6.1 we will explore in detail what the practical impacts
of nonce reuse are for each data-confidentiality protocol.
In practice, some complications arise when executing the attack.
First, not all Wi-Fi clients properly implement the state machine. In
particular, Windows and iOS do not accept retransmissions of mes-
sage 3 (see Table 1 column 2). This violates the 802.11 standard. As
a result, these implementations are not vulnerable to our key rein-
stallation attack against the 4-way handshake. Unfortunately, from
a defenders perspective, both iOS and Windows are still vulnera-
ble to our attack against the group key handshake (see Section 4).
Additionally, because both OSes support 802.11r, it is still possible
to indirectly attack them by performing a key reinstallation attack
against the AP during an FT handshake (see Section 5).
A second minor obstacle is that we must obtain a MitM posi-
tion between the client and AP. This is not possible by setting up
a rouge AP with a different MAC address, and then forwarding
packets between the real AP and client. Recall from Section 2.3
that the session key is based on the MAC addresses of the client
and AP, meaning both would derive a different key, causing the
handshake and attack to fail. Instead, we employ a channel-based
MitM attack [70], where the AP is cloned on a different channel