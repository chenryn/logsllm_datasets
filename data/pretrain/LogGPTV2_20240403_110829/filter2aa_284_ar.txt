### Unvalidated Redirects and Forwards

Unencoded (or unencrypted) URLs will be considered valid. 

#### Forwards
The countermeasure for forwards is to either whitelist the range of pages that can be forwarded to (similar to redirects) and enforce authentication on both the forwarded page and the forwarding page. This ensures that even if an attacker manages to force a forward to a page they should not have access to, the authentication check on the forwarded page will deny them access.

#### Note on J2EE
There is a known flaw related to the `sendRedirect` method in J2EE applications. For example:
```java
response.sendRedirect("home.html");
```
This method sends a redirection response to the user, who is then redirected to the desired web component whose URL is passed as an argument to the method. A common misconception is that the execution flow in the Servlet/JSP page stops after calling this method. However, any code present after the `sendRedirect` call will still be executed.

Similarly, the `forward` method of the `RequestDispatcher` class also continues execution after the call. The `<jsp:forward>` tag, however, is an exception; the execution flow stops after the use of this tag.

To ensure proper termination of the code flow after a redirect or forward, use a `return` statement.

#### References
- **OWASP Article on Open Redirects**: [Link](https://www.owasp.org/index.php/Open_redirect)
- **CWE Entry 601 on Open Redirects**: [Link](http://cwe.mitre.org/data/definitions/601.html)
- **WASC Article on URL Redirector Abuse**: [Link](http://projects.webappsec.org/w/page/13246981/URL%20Redi-rector%20Abuse)
- **Google Blog Article on the Dangers of Open Redirects**: [Link](http://googlewebmastercentral.blogspot.com/2009/01/open-redirect-urls-is-your-site-being.html)
- **Preventing Open Redirection Attacks (C#)**: [Link](http://www.asp.net/mvc/tutorials/security/preventing-open-re-direction-attacks)

### Method of Redirection
| Description | Example |
|-------------|---------|
| **Redirect Response** (Note: 301 and 307 responses will also cause a redirect) | `HTTP/1.1 302 Found<br>Location: http://www.attacker.com/page.html` |
| **Meta Tag** | `<meta http-equiv="refresh" content="0; url=http://attacker.com/page.html">` |
| **JavaScript** | `window.location.href = "http://attacker.com/page.html";` |
| **Refresh Header** | `HTTP/1.1 200 OK<br>Refresh=0; url=http://attacker.com/page.html` |

### HTML5
HTML5 was created to replace HTML4, XHTML, and the HTML DOM Level 2. The main purpose of this new standard is to provide dynamic content without the need for extra proprietary client-side plugins. This allows designers and developers to create exceptional sites with a great user experience without requiring additional browser plugins.

#### 17.1 Description
Ideally, users should have the latest web browser installed, but this does not always happen as regularly as security experts advise. Therefore, websites should implement two layers of controls: one layer independent of the browser type and another as an additional control.

#### What to Review: Web Messaging
Web Messaging (also known as Cross-Domain Messaging) provides a safer means of communication between documents from different origins. The communication API is as follows:

- **When posting a message**, explicitly state the expected origin as the second argument to `postMessage` rather than using `*` to prevent sending the message to an unknown origin after a redirect.
- **The receiving page should always**:
  - Check the `origin` attribute of the sender to verify the data is originating from the expected location.
  - Perform input validation on the `data` attribute of the event to ensure it is in the desired format.
- **Do not assume control over the `data` attribute**. A single Cross-Site Scripting (XSS) flaw in the sending page allows an attacker to send messages of any format.
- **Both pages should only interpret the exchanged messages as data**. Never evaluate passed messages as code (e.g., via `eval()`) or insert them into the page's DOM (e.g., via `innerHTML`), as this would create a DOM-based XSS vulnerability.
- **To assign the data value to an element**, use the safer option: `element.textContent = data;` instead of `element.innerHTML = data;`.
- **Check the origin properly** to match the fully qualified domain names (FQDNs) you expect. Note that the following code: `if(message.origin.indexOf(".owasp.org") != -1)` is insecure and will not have the desired behavior as `www.owasp.org.attacker.com` will match.
- **If you need to embed external content/untrusted gadgets and allow user-controlled scripts** (which is highly discouraged), consider using a JavaScript rewriting framework such as Google’s Caja or check the information on sandboxed frames.

#### What to Review: Cross-Origin Resource Sharing (CORS)
CORS is a mechanism that enables a web browser to perform cross-domain requests using the XMLHttpRequest L2 API in a controlled manner. In the past, the XMLHttpRequest L1 API only allowed requests within the same origin due to the same-origin policy.

- **Ensure that URLs responding with `Access-Control-Allow-Origin: *` do not include any sensitive content or information**. Use the `Access-Control-Allow-Origin` header only on selected URLs that need to be accessed cross-domain. Do not use the header for the entire domain.
- **Allow only selected, trusted domains in the `Access-Control-Allow-Origin` header**. Prefer whitelisting domains over blacklisting or allowing any domain (do not use the `*` wildcard or blindly return the `Origin` header content without checks).
- **Keep in mind that CORS does not prevent the requested data from going to an unauthenticated location**. It is still important for the server to perform usual Cross-Site Request Forgery (CSRF) prevention.
- **While the RFC recommends a pre-flight request with the `OPTIONS` verb, current implementations might not perform this request**. Ensure that "ordinary" (`GET` and `POST`) requests perform any necessary access control.
- **Discard requests received over plain HTTP with HTTPS origins** to prevent mixed content bugs.
- **Do not rely solely on the `Origin` header for access control checks**. Browsers always send this header in CORS requests, but it may be spoofed outside the browser. Application-level protocols should be used to protect sensitive data.

#### What to Review: WebSockets
Traditionally, the HTTP protocol only allows one request/response per TCP connection. Asynchronous JavaScript and XML (AJAX) allows clients to send and receive data asynchronously (in the background without a page refresh) to the server, but AJAX requires the client to initiate the requests and wait for server responses (half-duplex). HTML5 WebSockets allow the client/server to create full-duplex (two-way) communication channels, enabling true asynchronous communication. WebSockets conduct their initial "upgrade" handshake over HTTP and then communicate over TCP channels.

- **Drop backward compatibility in implemented client/servers and use only protocol versions above hybi-00**. Popular Hixie-76 version (hybi-00) and older are outdated and insecure.
- **The recommended version supported in the latest versions of all current browsers is rfc6455 (RFC 6455)**, supported by Firefox 11+, Chrome 16+, Safari 6, Opera 12.50, and IE10.
- **While it’s relatively easy to tunnel TCP services through WebSockets (e.g., VNC, FTP), doing so enables access to these tunneled services for in-browser attackers in case of a Cross-Site Scripting (XSS) attack**. These services might also be called directly from a malicious page or program.
- **The protocol doesn’t handle authorization and/or authentication**. Application-level protocols should handle that separately if sensitive data is being transferred.
- **Process the messages received by the WebSocket as data**. Do not try to assign it directly to the DOM or evaluate it as code. If the response is JSON, never use the insecure `eval()` function; use the safe option `JSON.parse()` instead.
- **Endpoints exposed through the `ws://` protocol are easily reversible to plain text**. Only `wss://` (WebSockets over SSL/TLS) should be used for protection against Man-In-The-Middle (MITM) attacks.
- **Spoofing the client is possible outside a browser, so the WebSocket server should be able to handle incorrect/malicious input**. Always validate input coming from the remote site, as it might have been altered.
- **When implementing servers, check the `Origin:` header in the WebSocket handshake**. Although it might be spoofed outside a browser, browsers always add the Origin of the page that initiated the WebSocket connection.
- **As a WebSocket client in a browser is accessible through JavaScript calls, all WebSocket communication can be spoofed or hijacked through Cross-Site Scripting (XSS)**. Always validate data coming through a WebSocket connection.

#### Sample Code
```javascript
interface WebSocket {
  readonly attribute DOMString URL;
  const unsigned short CONNECTING = 0;
  const unsigned short OPEN = 1;
  const unsigned short CLOSED = 2;
  readonly attribute unsigned short readyState;
  readonly attribute unsigned long bufferedAmount;
  attribute Function onopen;
  attribute Function onmessage;
  attribute Function onclose;
  boolean send(in DOMString data);
  void close();
};
WebSocket implements EventTarget;

var myWebSocket = new WebSocket("ws://www.websockets.org");
myWebSocket.onopen = function(evt) { alert("Connection open ..."); };
myWebSocket.onmessage = function(evt) { alert("Received Message: " + evt.data); };
myWebSocket.onclose = function(evt) { alert("Connection closed."); };
```

### What to Review: Server-Sent Events
Server-sent events (SSE) allow the client browser to listen for updates (messages) from the server, removing the need for the client to send polling or other messages to the server. SSE uses the HTTP protocol and is read-only for the client.

- **Validate URLs passed to the `EventSource` constructor**, even though only same-origin URLs are allowed.
- **Process the messages (`event.data`) as data and never evaluate the content as HTML or script code**.
- **Always check the `origin` attribute of the message (`event.origin`) to ensure the message is coming from a trusted domain**. Use a whitelist.

### Same-Origin Policy (SOP)
The Same-Origin Policy (SOP) is a part of the web application security model. SOP covers three main areas of web development: Trust, Authority, and Policy. SOP is based on the combination of three components: Scheme, Hostname, and Port.

#### 18.1 Description
Internet Explorer has two major exceptions to the same-origin policy:
1. **Trust Zones**: If both domains are in a highly trusted zone (e.g., corporate domains), the same-origin limitations are not applied.
2. **Port**: IE does not include the port in the Same-Origin components, so `http://yourcompany.com:81/index.html` and `http://yourcompany.com/index.html` are considered to be from the same origin, and no restrictions are applied.

These exceptions are non-standard and not supported in other browsers but may be helpful when developing an app for Windows RT or IE-based web applications.

#### 18.2 What to Review
- **If the application allows user-supplied data in the URL, ensure the path, query, or fragment ID code data is validated**.
- **Ensure user-supplied scheme name or authority section has good input validation**. This is a major code injection and phishing risk. Only permit prefixes needed by the application. Use whitelisting, not blacklisting.
- **Ensure the authority section contains only alphanumerics, "-", and "." and is followed by "/", "?", or "#"**. This mitigates the risk of an IDN homograph attack.
- **Ensure the programmer is not assuming default behavior because their browser properly escapes a particular character or the browser standard says the character will be escaped properly**. Validate URL-derived values before putting them in a database query or echoing them back to the user.
- **Resources with a MIME type of `image/png` are treated as images, and resources with a MIME type of `text/html` are treated as HTML documents**. Web applications can limit the content's authority by restricting its MIME type. For example, serving user-generated content as `image/png` is less risky than serving it as `text/html`.
- **Privileges on documents and resources should grant or withhold privileges from origins as a whole, rather than discriminating between individual documents within an origin**. Withholding privileges is ineffective because the document without the privilege can usually obtain the privilege anyway, as SOP does not isolate documents within an origin.

### Reviewing Logging Code
Applications log messages of varying intensity and to varying sinks. Many logging APIs allow you to set the granularity of log messages from a state of logging nearly all messages at level `trace` or `debug` to only logging the most important messages at level `critical`. The destination of the log message (sink) is also a consideration, such as a local file, a database log table, or a central logging server.

#### 19.1 Description
Logs can vary by type:
- **Application State or Process Data Logs**: Allow support or development teams to track what the system is doing when a bug occurs.
- **Security Logs**: Log important information that a central security system will have interest in.
- **Business Logs**: Used for business purposes, such as billing.

Application logs are powerful as the application business logic has the most information about the user (e.g., identity, roles, permissions) and the context of the event (target, action, outcomes). This data is often not available to infrastructure devices or closely-related applications. Application logging is an important feature of a production system, especially for support personnel and auditors. However, it is often forgotten and rarely described in sufficient detail in design/requirement documentation. The level and content of security monitoring, alerting, and reporting should be set during the requirements and design stage of projects and should be proportionate to the information security risks.

All types of applications may send event data to remote systems, either directly over a network connection or asynchronously through a daily/weekly/monthly secure copy of the log to a centralized log collection and management system (e.g., SIEM or SEM) or another application elsewhere.

If the information in the log is important and could be used for legal matters, consider how the source (log) can be verified, and how integrity and non-repudiation can be enforced. Log data, temporary debug logs, and backups/copies/extractions must not be destroyed before the required data retention period and must not be kept beyond this time. Legal, regulatory, and contractual obligations may impact these periods.

Server applications commonly write event log data to the file system or a database (SQL or NoSQL). Client devices, such as applications installed on desktops and mobile devices, may use local storage and local databases. Consider how this client logging data is transferred to the server.

#### What to Review
- **When using the file system, it is preferable to use a separate partition** from those used by the operating system, other application files, and user-generated content.
- **For file-based logs, apply strict permissions concerning which users can access the directories and the permissions of files within the directories**.
- **In web applications, the logs should not be exposed in web-accessible locations**. If they are, they should have restricted access and be configured with a plain text MIME type (not HTML).
- **When using a database, it is preferable to utilize a separate database account** that is only used for writing log data and which has very restrictive database, table, function, and command permissions.
- **Consider what types of messages should be logged**:
  - Input validation failures (e.g., protocol violations, unacceptable encodings, invalid parameter names, and values)
  - Output validation failures (e.g., database record set mismatch, invalid data encoding)
  - Authentication successes and failures
  - Authorization (access control) failures
  - Session management failures (e.g., cookie session identification value modification)
  - Connection timings
- **Consider what each log message should contain**:
  - Date and time, in a common format (ensure all nodes of an application are synced, e.g., through NTP)
  - User performing the action
  - Action being performed/attempted
  - Information on the client (e.g., IP address, source port, user-agent)
  - External classifications (e.g., NIST Security Content Automation Protocol (SCAP), Mitre Common Attack Pattern Enumeration and Classification (CAPEC))
  - Perform sanitization on all event data to prevent log injection attacks (e.g., carriage return (CR), line feed (LF), and delimiter characters) and optionally to remove sensitive data
- **If writing to databases, read, understand, and apply the SQL injection cheat sheet**.
- **Ensure logging is implemented and enabled during application security, fuzz, penetration, and performance testing**.
- **Ensure logging cannot be used to deplete system resources** (e.g., filling up disk space or exceeding database transaction log space, leading to denial of service).
- **The logging mechanisms and collected event data must be protected from misuse** such as tampering in transit, and unauthorized access, modification, and deletion once stored.
- **Store or copy log data to read-only media as soon as possible**.
- **Consider what should not be logged**:
  - Session identification values (consider replacing with a hashed value if needed to track session-specific events)
  - Sensitive personal data and some forms of personally identifiable information (PII)
  - Authentication passwords (successful or unsuccessful)
  - Database connection strings
  - Keys
  - Data of a higher security classification than the logging system is allowed to store

#### References
- **NIST SP 800-92 Guide to Computer Security Log Management**: [Link](https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-92.pdf)
- **Mitre Common Event Expression (CEE)**: [Link](https://cee.mitre.org/)
- **PCI DSS v2.0 Requirement 10 and PA-DSS v2.0 Requirement 4**: [Link](https://www.pcisecuritystandards.org/documents/PCI_DSS_v2.pdf)
- **Common Log File System (CLFS), Microsoft**: [Link](https://docs.microsoft.com/en-us/windows/win32/clfs/common-log-file-system-clfs-overview)

### Error Handling
Proper error handling is important in two ways:
1. **It affects the state of the application**. The initial failure to prevent the error may cause the application to traverse into an unexpected state.
2. **It affects the user experience**. Proper error handling ensures that the user is informed of the issue and provided with guidance on how to proceed.