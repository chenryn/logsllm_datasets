|
Chapter 10: System Log Management and Monitoring
In normal use, set these flags in the startup script you installed or created when you
installed Syslog-ng, and use that script not only automatically at startup time, but
also manually if you need to restart or stop Syslog-ng afterwards.
Conﬁguring Syslog-ng
There’s quite a bit more involved in configuring Syslog-ng than with syslog, but
that’s a symptom of its flexibility. Once you understand how syslog-ng.conf works,
writing your own configurations is simple, and adapting sample configurations for
your own purposes is even simpler. Its main drawback is its sketchy documentation;
hopefully, what follows here will mitigate that drawback for you.
By default, Syslog-ng’s configuration file is named syslog-ng.conf and resides in /etc/
syslog-ng/. Let’s dissect a simple example of one in Example 10-12.
As you can see, a syslog-ng.conf file consists of options{}, source{}, destination{},
filter{}, and log{} statements. Each of these statements may contain additional set-
tings, usually delimited by semicolons.
Syntactically, syslog-ng.conf is very similar to C and other structured programming
languages. Statements are terminated by semicolons; whitespace is ignored and may
therefore be used to enhance readability (e.g., by breaking up and indenting lengthy
statements across several lines).
Example 10-12. A simple syslog-ng.conf file
# Simple syslog-ng.conf file.
options {
    use_fqdn(no);
    sync(0);
    };
source s_sys { unix-stream("/dev/log"); internal(); };
source s_net { udp(); };
destination d_security { file("/var/log/security"); };
destination d_messages { file("/var/log/messages"); };
destination d_console { usertty("root"); };
filter f_authpriv { facility(auth, authpriv); };
filter f_messages { level(info .. emerg)
        and not facility(auth, authpriv); };
filter f_emergency { level(emerg); };
log { source(s_sys); filter(f_authpriv); destination(d_security); };
log { source(s_sys); filter(f_messages); destination(d_messages); };
log { source(s_sys); filter(f_emergency); destination(d_console); };
This is the Title of the Book, eMatter Edition
Copyright © 2002 O’Reilly & Associates, Inc. All rights reserved.
Syslog-ng
|
337
After defining global options, message sources, message destinations, and message
filters, combine them to create logging rules.
Global options
Global options are set in syslog-ng.conf’s options{} section. Some options may be
used in the options{} section and in one or more other sections. Predictably, options
set within source{}, destination{}, filter{}, and log{} sections overrule those set in
options{}. Table 10-7 lists some of the most useful of Syslog-ng’s options.
Table 10-7. Syslog-ng options
Option
Description
schain_hostnames( yes | no )
After printing the hostname provided by tcp/udp message’s
sender, show names of all hosts by which a tcp or udp mes-
sage has been handled (default=yes).
sskeep_hostname( yes | no )
Trust hostname provided by tcp/udp message’s sender
(default=no).
ssuse_fqdn( yes | no )
Record full name of tcp/udp message-sender (default=no).
ssuse_dns( yes | no )
Resolve IP address of tcp/udp message-sender
(default=yes).
ssuse_time_recvd( yes | no )
Set message’s timestamp equal to time message was
received, not time contained in message (default=no).
sstime_reopen( NUMBER )
Number of seconds after a tcp connection dies before recon-
necting (default=60).
sstime_reap( NUMBER )
Numberofsecondstowaitbeforeclosinganinactivefile(i.e.,
an open log file to which no messages have been written for
the specified length of time) (default=60).
sslog_fifo_size( NUMBER )a
a These options may also be used in file() declarations within destination{} statements.
Number of messages to queue in memory before processing
if syslog-ng is busy; note that when queue is full, new mes-
sageswillbedropped,butthelargerthefifosize,thegreater
syslog-ng’s RAM footprint (default=100).
sssync( NUMBER )a
Number of lines (messages) written to a log file before file is
synchronized (default=0).
ssowner( string )a
Owner of log files syslog-ng creates (default=root).
ssgroup( string )a
Group for log files syslog-ng creates (default=root).
ssperm( NUMBER )a
File-permissions for log files syslog-ng creates
(default=0600).
sscreate_dirs( yes | no )a
Whether to create directories specified in destination-file
paths if they don’t exist (default=no).
ssdir_owner( string )a
Owner of directories syslog-ng creates (default=root).
ssdir_group( string )a
Group for directories syslog-ng creates (default=root).
ssdir_perm( NUMBER )a
Directory permissions for directories syslog-ng creates
(default=0700).
This is the Title of the Book, eMatter Edition
Copyright © 2002 O’Reilly & Associates, Inc. All rights reserved.
338
|
Chapter 10: System Log Management and Monitoring
Options that deal with hostnames and their resolution (chain_hostnames(), keep_
hostname(), use_fqdn(), and use_dns) deal specifically with the hostnames of remote
log clients and not with hostnames/IPs referenced in the body of the message.
In other words, if syslog-ng.conf on a central log server contains this statement:
options { use_dns(yes); };
and the remote host joe-bob, whose IP address is 10.9.8.7, sends this message:
Sep 13 19:56:56 s_sys@10.9.8.7 sshd[13037]: Accepted publickey for ROOT from
10.9.8.254 port 1355 ssh2
then the log server will log:
Sep 13 19:56:56 s_sys@joebob sshd[13037]: Accepted publickey for ROOT from
10.9.8.254 port 1355 ssh2
As you can see, 10.9.8.7 was resolved to joebob, but 10.9.8.254 wasn’t looked up.
(For now you can disregard the s_sys@ in front of the hostname; I’ll explain that
shortly.) The use_dns(yes) statement applies only to the hostname at the beginning of
the message indicating which host sent it; it doesn’t apply to other IP addresses that
may occur later in the message.
Note also that options related to files and directories may be specified both in the
global options{} statement and as modifiers to file() definitions within destination{}
statements. file() options, when different from their global counterparts, override
them. This allows you to create a “rule of thumb” with specific exceptions.
The chain_hostname() and keep_hostname() options are also worth mentioning. By
default, keep_hostname() is set to no, meaning that syslog-ng will not take the host-
name supplied by a remote log server at face value; syslog-ng will instead resolve the
source IPs of packets from that host to determine for itself what that host’s name is.
This is in contrast to syslog, which takes remote hosts’ names at face value.
chain_hostname() determines whether syslog-ng should list all hosts through which
each message has been relayed. By default, this option is set to yes.
Example 10-13 illustrates the effects of keep_hostname(no) and chain_hostname(yes)
(i.e., syslog-ng’s default behavior). It shows a log message (in this case, a syslog-ng
startup notification) being generated locally and then relayed twice. host1, who gives
its hostname as “linux,” generates the message and then sends it to host2. host2
records both “linux” and “host1,” having double checked that hostname itself via
DNS. Finally, the message is relayed to host3.
Example 10-13. A log message relayed from one host to two others
Original log entry on host1:
Sep 19 22:57:16 s_loc@linux syslog-ng[1656]: syslog-ng version 1.4.13 starting
Entry as sent to and recorded by host2:
Sep 19 22:57:16 s_loc@linux/host1 syslog-ng[1656]: syslog-ng version 1.4.13 starting
This is the Title of the Book, eMatter Edition
Copyright © 2002 O’Reilly & Associates, Inc. All rights reserved.
Syslog-ng
|
339
There are several interesting things to note in this example. First, you can see that in
the second entry (the one logged by host2), Syslog-ng does not clearly indicate that
“linux” is actually host1—it simply adds the “real” hostname after the “fake” one in
the slash-delimited hostname chain.
Second, the timestamp is identical in all three log entries. It’s unlikely that three hosts
would be in sync to the millisecond and be able to relay log messages amongst them-
selves virtually instantaneously. In fact, the timestamp given to the message by the
originating host (host1 here) is preserved on each host to which the message is
relayed, unless a host has its own use_time_recd() option set to “yes” (which causes
syslog-ng to replace message-provided timestamps with the time at which the mes-
sage was received locally).
Finally, Example 10-13 also shows that when host1 created the message, it (actually
its local syslog-ng process) appended s_loc, to the message—this is the label of the
source{} on host1 from which the local syslog-ng process received the message.
Example 10-14 lists host1’s syslog-ng.conf file, the one responsible for the first entry
shown in Example 10-13.
Which brings us to the next topic: Syslog-ng message sources.
Sources
The syslog-ng.conf file listed in Example 10-14 contains one source{} definition,
which itself contains two source “drivers” (message-inputs). syslog-ng.conf may con-
tain many source{} definitions, each of which may, in turn, contain multiple drivers.
In other words, the syntax of source definitions is as follows:
source sourcelabel { driver1( [options] ); driver2( [options] ); etc. };
where sourcelabel is an arbitrary string used to identify this group of inputs, and
where driver1(), driver2(), etc. are one or more source drivers that you wish to treat
as a single group.
Let’s take a closer look at the source definition in Example 10-14:
source s_loc { unix-stream("/dev/log"); internal(); };
This line creates a source called s_loc that refers to messages obtained from /dev/log
(i.e., the local system-log socket) and from the local syslog-ng process.
Same log entry as relayed from host2 to host3:
Sep 19 22:57:16 s_loc@linux/host1/host2 syslog-ng[1656]: syslog-ng version 1.4.13 starting
Example 10-14. host1’s syslog-ng.conf file
options { };
source s_loc { unix-stream("/dev/log"); internal(); };
destination d_host2 { udp("host2" port(514)); };
destination d_local { file("/var/log/messages"); };
log { source(s_loc); source(s_net); destination(d_host2); destination(d_local); };
Example 10-13. A log message relayed from one host to two others (continued)
This is the Title of the Book, eMatter Edition
Copyright © 2002 O’Reilly & Associates, Inc. All rights reserved.
340
|
Chapter 10: System Log Management and Monitoring
Syslog-ng is quite flexible in the variety of source drivers from which it can accept
messages. In addition to Unix sockets (e.g., /dev/log), syslog-ng itself, and UDP
streams from remote hosts, Syslog-ng can accept messages from named pipes, TCP
connections from remote hosts, and special files (e.g., /proc files). Table 10-8 lists
Syslog-ng’s supported source drivers.
As we just saw in Example 10-14, internal() is syslog-ng itself: syslog-ng sends itself
startup messages, errors, and other messages via this source. Therefore, you should
include internal() in at least one source{} definition. file() is used to specify special
files from which syslog-ng should retrieve messages. The special file you’d most likely
want syslog-ng to read messages from is /proc/kmsg.
Note, however, that file() is not intended for use on regular text files. If you wish
syslog-ng to “tail” dynamic log files written by other applications (e.g., httpd), you’ll
need to write a script that pipes the output from a tail -f [filename] command to
logger. (For instructions on using logger, see the section “Testing System Logging
with logger” later in this chapter.)
unix_stream() and unix_dgram() are important drivers: these read messages from
connection-oriented and connectionless Unix sockets, respectively. As noted at the
end of “Compiling and Installing Syslog-ng from Source Code,” Linux kernels Ver-
sions 2.4.1 and higher use Unix datagram sockets; if you specify /dev/log as a unix_
stream() source, kernel messages won’t be captured. Therefore, use unix_dgram()
when defining your local-system log source, e.g.:
source s_loc { unix-dgram("/dev/log"); internal(); };
Table 10-8. Source drivers for Syslog-ng
Source
Description
internal()
Messages from the syslog-ng daemon itself.
file("filename" [options])
Messages read from a special file such as /proc/kmsg.
pipe("filename" )
Messages received from a named pipe.
unix_stream("filename" [options])
Messages received from Unix sockets that can be read from in the
connection-oriented stream mode—e.g., /dev/log under kernels
prior to 2.4; the maximum allowed number of concurrent stream
connections may be specified (default=100).
unix_dgram("filename" [options])
Messages received from Unix sockets that can be read from in the
connectionlessdatagrammode—e.g.klogdmessagesfrom/dev/log
under kernel 2.4.x.
tcp([ip(address)] [port(#)]
[max-connections(#)] )
Messages received from remote hosts via the tcp protocol on the
specified TCP port (default=514) on the specified local network
interface (default=all); the maximum number of concurrent TCP
connections may be specified (default=10).
udp([ip(address)] [port(#)] )
Messages received from remote hosts via the udp protocol on the
specified UDP port (default=514) on the specified local network
interface (default=all).
This is the Title of the Book, eMatter Edition
Copyright © 2002 O’Reilly & Associates, Inc. All rights reserved.
Syslog-ng
|
341
If your kernel is pre-2.4.0, you should instead use unix_stream() for /dev/log.
tcp() and udp() read messages from remote hosts via the connection-oriented TCP
protocol and the connectionless UDP protocol, respectively. In both tcp() and udp(),
a listening address and a port number may be specified. By default, syslog-ng listens
on 0.0.0.0:514—that is, “all interfaces, port 514.” (Specifically, the default for tcp()
is 0.0.0.0:TCP514, and for udp(), that is 0.0.0.0:UDP514.)
Example 10-15 shows source statements for tcp() and udp(), with IP and port
options defined.
In Example 10-15, we’re defining the source s_tcpmessages as all messages received
on TCP port 10514, but only on the local network interface whose IP address is 192.
168.190.190. The source s_udpmessages, however, accepts all UDP messages
received on UDP port 514 on all local network interfaces.
Besides ip() and port(), there’s one more source option I’d like to cover. max_
connections(), which can only be used in tcp() and unix_stream() sources, restricts
the number of simultaneous connections from a given source that syslog-ng will
accept. This is a tradeoff between security and performance: if this number is high,
then few messages will be dropped when the server is under load, but at the expense
of resources. If this number is low, the chance that logging activity will bog down the
server is minimized, but whenever the number of maximum connections is reached,
messages will be dropped until a connection is freed up.
The correct syntax for max-connections() is simple: specify a positive integer between
the parentheses. For example, let’s adapt the tcp() source from Example 10-15 to
accept a maximum of 100 concurrent TCP connections from remote hosts:
source s_tcpmessages { tcp( ip(192.168.190.190) port(10514) max-connections(100) );
};
By default, max-connections() is set to 100 for unix-stream() sources and 10 for tcp()
sources.
By the way, TCP port 514 is the default listening port not only for syslog-ng, but also
for rshd. This isn’t a big deal, for the simple reason that rshd has no business run-
ning on an ostensibly secure Internet-accessible system. If, for example, you wish to
use both syslog-ng and rshd on an intranet server (even then I recommend sshd
instead), then you should specify a different (unused) port for syslog-ng to accept
TCP connections on.
Destinations
syslog-ng can be configured to send messages to the same places syslog can: ASCII
files, named pipes, remote hosts via UDP, and TTYs. In addition, syslog-ng can send
Example 10-15. tcp() and udp() sources
source s_tcpmessages { tcp( ip(192.168.190.190) port(10514) ); };
source s_udpmessages { udp(); };
This is the Title of the Book, eMatter Edition
Copyright © 2002 O’Reilly & Associates, Inc. All rights reserved.
342
|
Chapter 10: System Log Management and Monitoring
messages to Unix sockets, remote hosts via TCP, and to the standard inputs of pro-
grams. Table 10-9 lists the allowed destination types (called “drivers”) in Syslog-ng.
As with ordinary syslog, the most important type of destination is file(). Unlike with
syslog, Syslog-ng supports filename-expansion macros and a number of options that
give one much more granular control over how log files are handled.
When you specify the name of a file for syslog-ng to write messages to, you may use
macros to create all or part of the filename. For example, to tell syslog-ng to write
messages to a file whose name includes the current day, you could define a destina-
tion like this:
destination d_dailylog { file("/var/log/messages.$WEEKDAY"); };
When Syslog-ng writes to this particular destination, it will use the filename /var/log/
messages.Tues, /var/log/messages.Wed, etc., depending on what day it is. See