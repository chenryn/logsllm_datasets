### Chapter 10: System Log Management and Monitoring

#### Configuring Syslog-ng

In normal use, set the necessary flags in the startup script you installed or created when you installed Syslog-ng. Use this script not only at startup but also manually if you need to restart or stop Syslog-ng later.

Configuring Syslog-ng is more involved compared to syslog, but this complexity is a result of its flexibility. Once you understand how `syslog-ng.conf` works, writing your own configurations becomes straightforward, and adapting sample configurations for your specific needs is even simpler. The main drawback is the limited documentation; the following sections aim to address this issue.

By default, the Syslog-ng configuration file is named `syslog-ng.conf` and is located in `/etc/syslog-ng/`. Let's analyze a simple example in Example 10-12.

A `syslog-ng.conf` file consists of `options{}`, `source{}`, `destination{}`, `filter{}`, and `log{}` statements. Each of these statements may contain additional settings, typically delimited by semicolons.

Syntactically, `syslog-ng.conf` is similar to C and other structured programming languages. Statements are terminated with semicolons, and whitespace is ignored, allowing it to be used for readability (e.g., breaking up and indenting lengthy statements across multiple lines).

**Example 10-12: A Simple `syslog-ng.conf` File**

```plaintext
# Simple syslog-ng.conf file.
options {
    use_fqdn(no);
    sync(0);
};

source s_sys { unix-stream("/dev/log"); internal(); };
source s_net { udp(); };

destination d_security { file("/var/log/security"); };
destination d_messages { file("/var/log/messages"); };
destination d_console { usertty("root"); };

filter f_authpriv { facility(auth, authpriv); };
filter f_messages { level(info .. emerg) and not facility(auth, authpriv); };
filter f_emergency { level(emerg); };

log { source(s_sys); filter(f_authpriv); destination(d_security); };
log { source(s_sys); filter(f_messages); destination(d_messages); };
log { source(s_sys); filter(f_emergency); destination(d_console); };
```

After defining global options, message sources, destinations, and filters, combine them to create logging rules.

#### Global Options

Global options are set in the `options{}` section of `syslog-ng.conf`. Some options can be used in both the `options{}` section and in other sections. As expected, options set within `source{}`, `destination{}`, `filter{}`, and `log{}` sections override those set in `options{}`. Table 10-7 lists some of the most useful Syslog-ng options.

**Table 10-7: Syslog-ng Options**

| Option | Description |
|--------|-------------|
| chain_hostnames(yes | no) | After printing the hostname provided by TCP/UDP message’s sender, show names of all hosts by which a TCP or UDP message has been handled (default=yes). |
| keep_hostname(yes | no) | Trust the hostname provided by the TCP/UDP message’s sender (default=no). |
| use_fqdn(yes | no) | Record the full name of the TCP/UDP message-sender (default=no). |
| use_dns(yes | no) | Resolve the IP address of the TCP/UDP message-sender (default=yes). |
| use_time_recvd(yes | no) | Set the message’s timestamp equal to the time the message was received, not the time contained in the message (default=no). |
| time_reopen(NUMBER) | Number of seconds after a TCP connection dies before reconnecting (default=60). |
| time_reap(NUMBER) | Number of seconds to wait before closing an inactive file (i.e., an open log file to which no messages have been written for the specified length of time) (default=60). |
| log_fifo_size(NUMBER) | Number of messages to queue in memory before processing if Syslog-ng is busy; note that when the queue is full, new messages will be dropped, but the larger the FIFO size, the greater Syslog-ng’s RAM footprint (default=100). |
| sync(NUMBER) | Number of lines (messages) written to a log file before the file is synchronized (default=0). |
| owner(string) | Owner of log files Syslog-ng creates (default=root). |
| group(string) | Group for log files Syslog-ng creates (default=root). |
| perm(NUMBER) | File permissions for log files Syslog-ng creates (default=0600). |
| create_dirs(yes | no) | Whether to create directories specified in destination-file paths if they don’t exist (default=no). |
| dir_owner(string) | Owner of directories Syslog-ng creates (default=root). |
| dir_group(string) | Group for directories Syslog-ng creates (default=root). |
| dir_perm(NUMBER) | Directory permissions for directories Syslog-ng creates (default=0700). |

Options related to hostnames and their resolution (chain_hostnames, keep_hostname, use_fqdn, and use_dns) specifically deal with the hostnames of remote log clients, not with hostnames/IPs referenced in the body of the message.

For example, if `syslog-ng.conf` on a central log server contains:

```plaintext
options { use_dns(yes); };
```

and the remote host `joe-bob`, whose IP address is `10.9.8.7`, sends the message:

```plaintext
Sep 13 19:56:56 s_sys@10.9.8.7 sshd[13037]: Accepted publickey for ROOT from 10.9.8.254 port 1355 ssh2
```

the log server will log:

```plaintext
Sep 13 19:56:56 s_sys@joebob sshd[13037]: Accepted publickey for ROOT from 10.9.8.254 port 1355 ssh2
```

As you can see, `10.9.8.7` was resolved to `joebob`, but `10.9.8.254` was not looked up. The `use_dns(yes)` statement applies only to the hostname at the beginning of the message indicating which host sent it; it does not apply to other IP addresses that may occur later in the message.

Options related to files and directories can be specified both in the global `options{}` section and as modifiers to `file()` definitions within `destination{}` sections. When different, `file()` options override their global counterparts, allowing you to create a "rule of thumb" with specific exceptions.

The `chain_hostname` and `keep_hostname` options are also worth mentioning. By default, `keep_hostname` is set to `no`, meaning that Syslog-ng will not take the hostname supplied by a remote log server at face value; instead, it will resolve the source IPs of packets from that host to determine the host’s name. This is in contrast to syslog, which takes remote hosts’ names at face value.

`chain_hostname` determines whether Syslog-ng should list all hosts through which each message has been relayed. By default, this option is set to `yes`.

**Example 10-13: A Log Message Relayed from One Host to Two Others**

Original log entry on `host1`:

```plaintext
Sep 19 22:57:16 s_loc@linux syslog-ng[1656]: syslog-ng version 1.4.13 starting
```

Entry as sent to and recorded by `host2`:

```plaintext
Sep 19 22:57:16 s_loc@linux/host1 syslog-ng[1656]: syslog-ng version 1.4.13 starting
```

Same log entry as relayed from `host2` to `host3`:

```plaintext
Sep 19 22:57:16 s_loc@linux/host1/host2 syslog-ng[1656]: syslog-ng version 1.4.13 starting
```

In this example, several points are noteworthy:
1. In the second entry (logged by `host2`), Syslog-ng does not clearly indicate that `linux` is actually `host1`; it simply adds the "real" hostname after the "fake" one in the slash-delimited hostname chain.
2. The timestamp is identical in all three log entries. It is unlikely that three hosts would be in sync to the millisecond and be able to relay log messages almost instantaneously. The timestamp given to the message by the originating host (`host1`) is preserved on each host to which the message is relayed, unless a host has its `use_time_recvd` option set to `yes` (which causes Syslog-ng to replace message-provided timestamps with the time at which the message was received locally).
3. When `host1` created the message, it (actually its local Syslog-ng process) appended `s_loc` to the message—this is the label of the `source{}` on `host1` from which the local Syslog-ng process received the message.

**Example 10-14: `host1`'s `syslog-ng.conf` File**

```plaintext
options { };

source s_loc { unix-stream("/dev/log"); internal(); };

destination d_host2 { udp("host2" port(514)); };
destination d_local { file("/var/log/messages"); };

log { source(s_loc); source(s_net); destination(d_host2); destination(d_local); };
```

#### Sources

The `syslog-ng.conf` file listed in Example 10-14 contains one `source{}` definition, which itself contains two source "drivers" (message-inputs). `syslog-ng.conf` may contain many `source{}` definitions, each of which may, in turn, contain multiple drivers. The syntax of source definitions is as follows:

```plaintext
source sourcelabel { driver1([options]); driver2([options]); etc. };
```

where `sourcelabel` is an arbitrary string used to identify this group of inputs, and `driver1()`, `driver2()`, etc. are one or more source drivers that you wish to treat as a single group.

Let's examine the source definition in Example 10-14:

```plaintext
source s_loc { unix-stream("/dev/log"); internal(); };
```

This line creates a source called `s_loc` that refers to messages obtained from `/dev/log` (i.e., the local system-log socket) and from the local Syslog-ng process.

Syslog-ng is flexible in the variety of source drivers from which it can accept messages. In addition to Unix sockets (e.g., `/dev/log`), Syslog-ng itself, and UDP streams from remote hosts, Syslog-ng can accept messages from named pipes, TCP connections from remote hosts, and special files (e.g., `/proc` files). Table 10-8 lists Syslog-ng’s supported source drivers.

**Table 10-8: Source Drivers for Syslog-ng**

| Source | Description |
|--------|-------------|
| internal() | Messages from the Syslog-ng daemon itself. |
| file("filename" [options]) | Messages read from a special file such as `/proc/kmsg`. |
| pipe("filename") | Messages received from a named pipe. |
| unix_stream("filename" [options]) | Messages received from Unix sockets that can be read from in the connection-oriented stream mode—e.g., `/dev/log` under kernels prior to 2.4; the maximum allowed number of concurrent stream connections may be specified (default=100). |
| unix_dgram("filename" [options]) | Messages received from Unix sockets that can be read from in the connectionless datagram mode—e.g., klogd messages from `/dev/log` under kernel 2.4.x. |
| tcp([ip(address)] [port(#)] [max-connections(#)]) | Messages received from remote hosts via the TCP protocol on the specified TCP port (default=514) on the specified local network interface (default=all); the maximum number of concurrent TCP connections may be specified (default=10). |
| udp([ip(address)] [port(#)]) | Messages received from remote hosts via the UDP protocol on the specified UDP port (default=514) on the specified local network interface (default=all). |

If your kernel is pre-2.4.0, you should use `unix_stream()` for `/dev/log`. `tcp()` and `udp()` read messages from remote hosts via the connection-oriented TCP protocol and the connectionless UDP protocol, respectively. In both `tcp()` and `udp()`, a listening address and a port number may be specified. By default, Syslog-ng listens on `0.0.0.0:514`—that is, "all interfaces, port 514." (Specifically, the default for `tcp()` is `0.0.0.0:TCP514`, and for `udp()`, it is `0.0.0.0:UDP514`.)

**Example 10-15: `tcp()` and `udp()` Sources**

```plaintext
source s_tcpmessages { tcp(ip(192.168.190.190) port(10514)); };
source s_udpmessages { udp(); };
```

In Example 10-15, we define the source `s_tcpmessages` as all messages received on TCP port `10514`, but only on the local network interface whose IP address is `192.168.190.190`. The source `s_udpmessages`, however, accepts all UDP messages received on UDP port `514` on all local network interfaces.

Besides `ip()` and `port()`, there is one more source option to cover: `max_connections()`, which can only be used in `tcp()` and `unix_stream()` sources. This option restricts the number of simultaneous connections from a given source that Syslog-ng will accept. This is a tradeoff between security and performance: if this number is high, few messages will be dropped when the server is under load, but at the expense of resources. If this number is low, the chance that logging activity will bog down the server is minimized, but whenever the number of maximum connections is reached, messages will be dropped until a connection is freed up.

The correct syntax for `max_connections()` is simple: specify a positive integer between the parentheses. For example, let's adapt the `tcp()` source from Example 10-15 to accept a maximum of 100 concurrent TCP connections from remote hosts:

```plaintext
source s_tcpmessages { tcp(ip(192.168.190.190) port(10514) max-connections(100)); };
```

By default, `max_connections()` is set to 100 for `unix_stream()` sources and 10 for `tcp()` sources.

TCP port `514` is the default listening port not only for Syslog-ng but also for `rshd`. This isn't a big deal because `rshd` should not be running on a secure, Internet-accessible system. If you wish to use both Syslog-ng and `rshd` on an intranet server (even then, I recommend `sshd`), you should specify a different (unused) port for Syslog-ng to accept TCP connections on.

#### Destinations

Syslog-ng can be configured to send messages to the same places as syslog: ASCII files, named pipes, remote hosts via UDP, and TTYs. Additionally, Syslog-ng can send messages to Unix sockets, remote hosts via TCP, and to the standard inputs of programs. Table 10-9 lists the allowed destination types (called "drivers") in Syslog-ng.

**Table 10-9: Destination Drivers for Syslog-ng**

| Destination | Description |
|-------------|-------------|
| file("filename" [options]) | Write messages to a file. Supports filename-expansion macros and various options for granular control over log files. |
| pipe("filename") | Send messages to a named pipe. |
| usertty("username") | Send messages to the TTY of the specified user. |
| udp("hostname" [port(#)]) | Send messages to a remote host via UDP. |
| tcp("hostname" [port(#)]) | Send messages to a remote host via TCP. |
| program("command") | Send messages to the standard input of a program. |
| socket("filename" [options]) | Send messages to a Unix socket. |

When specifying the name of a file for Syslog-ng to write messages to, you can use macros to create all or part of the filename. For example, to tell Syslog-ng to write messages to a file whose name includes the current day, you could define a destination like this:

```plaintext
destination d_dailylog { file("/var/log/messages.$WEEKDAY"); };
```

When Syslog-ng writes to this particular destination, it will use the filename `/var/log/messages.Tues`, `/var/log/messages.Wed`, etc., depending on the day.