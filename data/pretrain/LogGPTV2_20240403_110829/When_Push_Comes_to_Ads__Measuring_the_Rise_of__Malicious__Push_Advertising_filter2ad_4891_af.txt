does not appear to record or analyze information related to SWs and
WPNs. Our work is different, in that we focus specifically on col-
lecting WPN-based ads and measuring the prevalence of malicious
ads within them.
Online Scams and Ad Blockers: A number of approaches [23, 30,
59] have been proposed to study the effectiveness of existing ad
block techniques as well as the various counter-measures used by ad
providers to circumvent ad blockers. Other studies [27, 37, 46] dis-
cuss various online scam techniques and the prevalence of Internet
fraud. Although PushAdMiner does not focus on blocking mali-
cious ads or online scams, we demonstrate that existing ad blocking
techniques are not effective at defending against malicious WPN
ads.
8 DISCUSSION AND LIMITATIONS
Blocking Malicious WPN Ads: In Section 6.4, we showed that
existing popular ad blockers and filtering rules were not effective at
mitigating WPN ads, due to the limited visibility that extensions had
on SW activities. This appears to have been due to Chromium bugs
that have since been fixed (or are in the process of being fixed) [7].
However, even though extensions may now be able to observe and
block SW requests, it is unclear if this will be sufficient to block
WPN ads or if other evasion mechanisms can be implemented by
push ad networks.
A browser extension called AdBlaster [2] specifically claims to
block WPN ads. However, AdBlaster simply disables all push notifi-
cations, including benign non-ad ones, which can obviously disrupt
legitimate uses of WPN messages. Although our PushAdMiner sys-
tem is not currently designed to detect malicious WPN ads in a
fully automated way, we believe that the results from our study
provide useful insights into the malicious use of WPN ads that may
encourage and help the security research community to build better
defenses against the abuse of web push notifications.
Double Permissions: In this study, we observed some websites do
not directly ask for permission to send notifications to the browser.
Rather, they first create a dynamic JavaScript-based prompt that
736
IMC ’20, October 27–29, 2020, Virtual Event, USA
mimics a browser permission request. Popularly referred to as dou-
ble permission, this mechanism is used by some websites to avoid
being permanently blocked from requesting notification permis-
sions in the future (which would happen if the user clicks on the
“Block” button), or to bypass other policy restrictions. We observed
double permission to gain popularity only recently, months after
our initial data collection. To check its effects on our dataset, we
ran an experiment on a random sample of 200 URLs that previously
requested permission directly. We found that only around 1/4th
(49 out of 200 URLs that we manually checked) switched to using
double permission. Furthermore, this does not impact our analysis
on the abuse of WPNs. For instance, PushAdMiner could be instru-
mented to bypass this mechanism by simply granting notification
permission to all visited sites, regardless of whether they request
it or not. Because double permission dialog boxes are typically pro-
grammed to appear only when the website doesn’t already have
notification permission, they could be avoided altogether.
Evading Crawling Detection : Websites may attempt to detect
browser automation to avoid being crawled. To mitigate this issue,
we built our crawlers using Puppeteer. Unlike other tools, Puppeteer
(developed by the Chromium team) leverages DevTools and is less
prone to fingerprinting. During our experiments we also observe
that a few ad networks use cookies or other information to track the
device or web browser across browsing sessions. To mitigate this
and increase our chances of being presented with fresh notification
permission requests from as many sources as possible, we created
a separate Docker container for each URL we visited.
9 CONCLUSION
In this paper, we have studied how web push notifications (WPNs)
are being used to deliver ads, and measured how many of these ads
are used for malicious purposes. To enabled this study, we developed
a system called PushAdMiner, which allowed us to automatically
collect and analyze 21,541 WPN messages across thousands of dif-
ferent websites. Among these, our system identified 572 WPN ad
campaigns, for a total of 5,143 WPN-based ads, of which 51% are
malicious. We also found that traditional ad-blockers and malicious
URL filters are remarkably ineffective against WPN-based malicious
ads, leaving a significant abuse vector unchecked.
ACKNOWLEDGMENTS
We would like to thank the anonymous reviewers for their con-
structive comments and suggestions on how to improve this paper,
and Prof. Paul Barford for serving as our shepherd. This material is
based in part upon work supported by the National Science Foun-
dation (NSF) under grants No. 1916500 and 1909856. Any opinions,
findings, and conclusions or recommendations expressed in this
material are those of the authors and do not necessarily reflect the
views of the NSF.
REFERENCES
[1] 2020. Ad Block Plus. https://adblockplus.org. (Last accessed Sep.17, 2020).
[2] 2020. AdBlaster Adblocker. https://www.adblaster.org/.
[3] 2020.
Bing Ad Content Policies.
https://about.ads.microsoft.com/en-
us/resources/policies/ad-content-policies. (Last accessed Sep.17, 2020).
[4] 2020. Brave Ad Block. https://brave.com. (Last accessed Sep.17, 2020).
[5] 2020. Cost per mille. https://en.wikipedia.org/wiki/Cost_per_mille.
(Last
accessed Sep.17, 2020).
IMC ’20, October 27–29, 2020, Virtual Event, USA
K. Subramani, X. Yuan, O. Setayeshfar, P. Vadrevu, K. Lee and R. Perdisci
[12] 2020. Introduction to Push Notifications. https://developers.google.com/web/
ilt/pwa/introduction-to-push-notifications. (Last accessed Sep.17, 2020).
[13] 2020. Introduction to Service Worker. https://developers.google.com/web/ilt/
pwa/introduction-to-service-worker. (Last accessed Sep.17, 2020).
[14] 2020. Notifications API. https://developer.mozilla.org/en-US/docs/Web/API/
Notifications_API. (Last accessed Sep.17, 2020).
[15] 2020. Public WWW Usage Examples. https://publicwww.com/examples/ads.html.
[16] 2020. Push API. https://developer.mozilla.org/en-US/docs/Web/API/Push_API.
(Last accessed Sep.17, 2020).
(Last accessed Sep.17, 2020).
[6] 2020. Easylist. https://easylist.to/. (Last accessed Sep.17, 2020).
[7] 2020. Extensions visibility into Service Worker. https://groups.google.com/a/
chromium.org/g/chromium-extensions/c/K-XAwApkyN0/m/gX9cA4ZCAgAJ?
pli=1. (Last accessed Sep.17, 2020).
[8] 2020. Gensim Word2Vec Model. https://radimrehurek.com/gensim/models/
word2vec.html.
[9] 2020. Google Ads Policies.
https://support.google.com/adspolicy/answer/
6020954?hl=en. (Last accessed Sep.17, 2020).
[10] 2020. Google Quiet UI for Notifications. https://blog.chromium.org/2020/01/
introducing-quieter-permission-ui-for.html. (Last accessed Sep.17, 2020).
[11] 2020. Google Safe Browsing : Blocklisting Platform. https://safebrowsing.google.
com/.
[19] 2020.
[17] 2020. Richpush Ad Network. https://richpush.co. (Last accessed Sep.17, 2020).
[18] 2020. The State of Push Notification Advertising. https://www.izooto.com/hubfs/
TheStateofPushNotificationAds-iZootoreport.pdf. (Last accessed Sep.17, 2020).
https://developer.mozilla.org/en-
US/docs/Web/HTML/Using_the_application_cache. (Last accessed Sep.17, 2020).
[20] 2020. Using Service Workers. https://developer.mozilla.org/en-US/docs/Web/
API/Service_Worker_API/Using_Service_Workers. (Last accessed Sep.17, 2020).
Using Application Cache.
[21] 2020. Virus Total: Blocklisting Platform. https://www.virustotal.com/.
[22] Paul Barford, Igor Canadi, Darja Krushevskaja, Qiang Ma, and Shan Muthukrish-
nan. 2014. Adscape: Harvesting and analyzing online display ads. In Proceedings
of the 23rd international conference on World wide web. ACM, 597–608.
[23] Muhammad Ahmad Bashir, Sajjad Arshad, Engin Kirda, William Robertson, and
Christo Wilson. 2018. How tracking companies circumvented ad blockers using
websockets. In Proceedings of the Internet Measurement Conference 2018. ACM,
471–477.
[24] Muhammad Ahmad Bashir, Sajjad Arshad, William Robertson, and Christo
Wilson. 2016. Tracing information flows between ad exchanges using retargeted
ads. In 25th {USENIX} Security Symposium ({USENIX} Security 16). 481–496.
[25] Andreas BiÃÿrn-Hansen, Tim A. Majchrzak, and Tor-Morten GrÃÿnli. 2017.
Progressive Web Apps: The Possible Web-native Unifier for Mobile Development.
344–351. https://doi.org/10.5220/0006353703440351
[26] Gong Chen, Wei Meng, and John Copeland. 2019. Revisiting Mobile Advertising
Threats with MAdLife. In The World Wide Web Conference. ACM, 207–217.
[27] Jason W. Clark and Damon McCoy. 2013. There Are No Free iPads: An Analysis
of Survey Scams as a Business. In Presented as part of the 6th USENIX Workshop
on Large-Scale Exploits and Emergent Threats. USENIX, Washington, D.C. https:
//www.usenix.org/conference/leet13/workshop-program/presentation/Clark
[28] Jonathan Crussell, Ryan Stevens, and Hao Chen. 2014. Madfraud: Investigating
ad fraud in android applications. In Proceedings of the 12th annual international
conference on Mobile systems, applications, and services. ACM, 123–134.
[29] Docker. 2019. Docker: Enterprise Container Platform. https://www.docker.com/.
(Last accessed Nov.1, 2019).
[30] Kiran Garimella, Orestis Kostakis, and Michael Mathioudakis. 2017. Ad-blocking:
A Study on Performance, Privacy and Counter-measures. In Proceedings of the
2017 ACM on Web Science Conference (Troy, New York, USA) (WebSci ’17). 259–262.
[31] Gensim. 2019. Documentation on Similarity Computation in Gensim Library.
(Last accessed
https://radimrehurek.com/gensim/similarities/docsim.html
Nov.11, 2019).
[32] Google. 2019.
Puppeteer: Chormium Browser Automation Tool.
http://liwc.wpengine.com/compare-dictionaries/. (Last accessed Nov.11, 2019).
[33] Google. 2019. Set up a JavaScript Firebase Cloud Messaging client app. https:
//firebase.google.com/docs/cloud-messaging/js/client. (Last accessed Nov.1, 2019).
[34] Chin-Tser Huang, Muhammad Nazmus Sakib, Charles Kamhoua, Kevin A Kwiat,
andLaurentNjilla.2018. ABayesianGameTheoreticApproachforInspectingWeb-
based Malvertising. IEEE Transactions on Dependable and Secure Computing (2018).
[35] Umar Iqbal, Peter Snyder, Shitong Zhu, Benjamin Livshits, Zhiyun Qian, and
Zubair Shafiq. 2020. Adgraph: A graph-based approach to ad and tracker blocking.
In Proc. of IEEE Symposium on Security and Privacy.
[36] Jordan Jueckstock and Alexandros Kapravelos. 2019. VisibleV8: In-browser
Monitoring of JavaScript in the Wild. In Proceedings of the Internet Measurement
Conference (Amsterdam, Netherlands) (IMC ’19). 393–405.
[37] Amin Kharraz, William K. Robertson, and Engin Kirda. 2018. Surveylance: Auto-
matically Detecting Online Survey Scams. In 2018 IEEE Symposium on Security and
Privacy, SP 2018, Proceedings, 21-23 May 2018, San Francisco, California, USA. 70–86.
[38] Jiyeon Lee, Hayeon Kim, Junghwan Park, Insik Shin, and Sooel Son. 2018. Pride
and Prejudice in Progressive Web Apps: Abusing Native App-like Features in Web
Applications. In Proceedings of the 2018 ACM SIGSAC Conference on Computer
and Communications Security. ACM, 1731–1746.
[39] Bo Li, Phani Vadrevu, Kyu Hyung Lee, and Roberto Perdisci. 2018.
JSgraph:
Enabling Reconstruction of Web Attacks via Efficient Tracking of Live In-Browser
JavaScript Executions. In 25th Annual Network and Distributed System Security
Symposium, NDSS 2018, San Diego, California, USA, February 18-21, 2018.
[40] Zhou Li, Kehuan Zhang, Yinglian Xie, Fang Yu, and XiaoFeng Wang. 2012.
Knowing your enemy: understanding and detecting malicious web advertising. In
Proceedings of the 2012 ACM conference on Computer and communications security.
ACM, 674–686.
[41] Bin Liu, Suman Nath, Ramesh Govindan, and Jie Liu. 2014. {DECAF}: Detecting
and Characterizing Ad Fraud in Mobile Apps. In 11th {USENIX} Symposium on
Networked Systems Design and Implementation ({NSDI} 14). 57–70.
[42] Tim A. Majchrzak, Andreas Biørn-Hansen, and Tor-Morten Grønli. 2018. Progres-
sive Web Apps: the Definite Approach to Cross-Platform Development?. In HICSS.
[43] Ivano Malavolta, Giuseppe Procaccianti, Paul Noorland, and Petar Vukmirovic.
2017. Assessing the Impact of Service Workers on the Energy Efficiency of
Progressive Web Apps. In Proceedings of the International Conference on Mobile
Software Engineering and Systems, MOBILESoft ’17, Buenos Aires, Argentina, May,
2017. to appear.
[44] Rima Masri and Monther Aldwairi. 2017. Automated malicious advertisement
detection using VirusTotal, URLVoid, and TrendMicro. In 2017 8th International
Conference on Information and Communication Systems (ICICS). IEEE, 336–341.
[45] Joseph Medley. 2019. Web Push Notifications: Timely, Relevant, and Precise.
(Last
https://developers.google.com/web/fundamentals/push-notifications.
accessed Nov.1, 2019).
[46] Najmeh Miramirkhani, Oleksii Starov, and Nick Nikiforakis. 2017. Dial One for
Scam: A Large-Scale Analysis of Technical Support Scams. In 24th Annual Network
and Distributed System Security Symposium, NDSS 2017, San Diego, California,
USA, February 26 - March 1, 2017.
[47] Yao Pan, Jules White, and Yu Sun. 2016. Assessing the threat of web worker
distributed attacks. In 2016 IEEE Conference on Communications and Network
Security (CNS). IEEE, 306–314.
[48] Panagiotis Papadopoulos, Panagiotis Ilia, Michalis Polychronakis, Evangelos P.
Markatos, Sotiris Ioannidis, and Giorgos Vasiliadis. 2019. Master of Web Puppets:
Abusing Web Browsers for Persistent and Stealthy Computation. In 26th Annual
Network and Distributed System Security Symposium, NDSS 2019, San Diego,
California, USA, February 24-27, 2019.
[49] M. Zubair Rafique, Tom van Goethem, Wouter Joosen, Christophe Huygens, and
Nick Nikiforakis. 2016. It’s Free for a Reason: Exploring the Ecosystem of Free
Live Streaming Services. In 23rd Annual Network and Distributed System Security
Symposium, NDSS 2016, San Diego, California, USA, February 21-24, 2016.
[50] Vaibhav Rastogi, Rui Shao, Yan Chen, Xiang Pan, Shihong Zou, and Ryan Riley.
2016. Are these Ads Safe: Detecting Hidden Attacks through the Mobile App-Web
Interfaces.. In NDSS.
[51] Michael Rushanan, David Russell, and Aviel D Rubin. 2016. Malloryworker:
stealthy computation and covert channels using web workers. In International
Workshop on Security and Trust Management. Springer, 196–211.
[52] Scikit-Learn. 2019. Documentation on Silhoutte Score metric to compute distance
https://scikit-learn.org/stable/modules/generated/sklearn.
between clusters.
metrics.silhouette_score.html (Last accessed Nov.11, 2019).
[53] Selenium. 2019.
Selenium: Web Browser Automation Tool.
https:
//www.seleniumhq.org/. (Last accessed Nov.11, 2019).
[54] Grigori Sidorov, Alexander Gelbukh, Helena Gómez-Adorno, and David Pinto.
2014. Soft similarity and soft cosine measure: Similarity of features in vector
space model. Computación y Sistemas 18, 3 (2014), 491–504.
[55] Aditya K Sood and Richard J Enbody. 2011. Malvertising–exploiting web
advertising. Computer Fraud & Security 2011, 4 (2011), 11–16.
[56] Oleksii Starov, Yuchen Zhou, Xiao Zhang, Najmeh Miramirkhani, and Nick
Nikiforakis. 2018. Betrayed by your dashboard: Discovering malicious campaigns
via web analytics. In Proceedings of the 2018 World Wide Web Conference.
International World Wide Web Conferences Steering Committee, 227–236.
[57] LBE Tech. 2019.
Parallel Space - Multiple accounts and Two face.
http://parallel-app.com/. (Last accessed Nov.1, 2019).
[58] Phani Vadrevu and Roberto Perdisci. 2019. What You See is NOT What You Get:
Discovering and Tracking Social Engineering Attack Campaigns. In Proceedings
of the Internet Measurement Conference. ACM, 308–321.
[59] Antoine Vastel, Peter Snyder, and Benjamin Livshits. 2018. Who Filters the
Filters: Understanding the Growth, Usefulness and Efficiency of Crowdsourced
Ad Blocking. CoRR abs/1810.09160 (2018).
[60] Wikipedia. 2019. What is Banner Blindness? https://en.wikipedia.org/wiki/
Banner_blindness. (Last accessed Nov.11, 2019).
[61] Apostolis Zarras, Alexandros Kapravelos, Gianluca Stringhini, Thorsten Holz,
Christopher Kruegel, and Giovanni Vigna. 2014. The dark alleys of madison
avenue: Understanding malicious advertisements. In Proceedings of the 2014
Conference on Internet Measurement Conference. ACM, 373–380.
737