    if (flagb) {
      b = b / 2 + 0x8000000000000000;
    } else {
      b = b / 2;
    }
    if (flaga) {
      a = a / 2 + 0x8000000000000000;
    } else {
      a = a / 2;
    } 
    //printf("%llx %llx\n", a, b);
    a = ~a;
    if (a & 1) b ^= a;
    else b ^= ~a; 
  }
  printf("%llx %llx\n", a, b);
}
from hashlib import sha256
babyprng2
Status: Completed Tags: Crypto
Prng1
notcurves
from pwn import *
import string
def proof_of_work(postfix,res):  
    for a in table:
        for b in table:
            for c in table:
                for d in table:
                    if sha256(a+b+c+d+postfix).hexdigest() == res:
                        return a+b+c+d
table = string.ascii_letters+string.digits
num = 10
code = '\x01\x12\x02\x34'+'\x00'*num
code += '\x01\x11\x12\x02\x35'+'\x00'*num + '\x4E'
codeh = code.encode('hex')
context.log_level = 'debug'
io = remote('34.92.185.118', 10002)
proof = io.recv().strip()
postfix, res = proof.split("==")
res = res.strip()
postfix = postfix.split('+')[1].split(')')[0]
io.sendline(proof_of_work(postfix,res))
io.sendline(codeh)
io.interactive()
from hashlib import sha256
from pwn import *
import string
def proof_of_work(postfix,res):  
    for a in table:
        for b in table:
            for c in table:
                for d in table:
                    if sha256(a+b+c+d+postfix).hexdigest() == res:
                        return a+b+c+d
table = string.ascii_letters + string.digits
code = '\x01\x12\x05\x34\x00\x11'
code += chr(6 + 0x30 + 1)
code += '\x01\x11\x12\x05\x35\x00'
code += chr(6 + 0x30 + 2)
codeh = code.encode('hex')
context.log_level = 'debug'
io = remote('34.92.185.118', 10003)
proof = io.recv().strip()
postfix, res = proof.split("==")
res = res.strip()
postfix = postfix.split('+')[1].split(')')[0]
io.sendline(proof_of_work(postfix, res))
io.sendline(codeh)
io.interactive()
Status: Completed Tags: Crypto
u=v=0
notfeal
Status: Completed Tags: Crypto
FEAL-4 ffhttp://theamazingking.com/crypto-feal.php
//Differential Cryptanalysis of FEAL-4
//Uses a chosen-plaintext attack to fully recover the key
//For use with tutorial at http://theamazingking.com/crypto-feal.php
#define _CRT_SECURE_NO_WARNINGS
#include 
#include 
#include 
#include 
#define MAX_CHOSEN_PAIRS 10000
#define ROTATE_LEFT(x, n) (((x) > (32-(n))))
int winner = 0;
int loser = 0;
unsigned long subkey[6];
unsigned char rotl2(unsigned char a) { return ((a > 6)); }
unsigned long leftHalf(unsigned long long a) { return (a >> 32LL); }
unsigned long rightHalf(unsigned long long a) { return a; }
unsigned char sepByte(unsigned long a, unsigned char index) { return a >> (8 * index); }
unsigned long combineBytes(unsigned char b3, unsigned char b2, unsigned char b1, unsigned char b0)
{
  return b3 > 32LL);
      cipherLeft ^= (cipher1[c] >> 32LL);
      unsigned long cipherRight = cipher0[c] & 0xFFFFFFFFLL;
      cipherRight ^= (cipher1[c] & 0xFFFFFFFFLL);
      unsigned long Y = cipherLeft;
      unsigned long Z = cipherLeft ^ outdiff;
      unsigned long fakeRight = cipher0[c] & 0xFFFFFFFFLL;
      unsigned long fakeLeft = cipher0[c] >> 32LL;
      unsigned long fakeRight2 = cipher1[c] & 0xFFFFFFFFLL;
      unsigned long fakeLeft2 = cipher1[c] >> 32LL;
      unsigned long Y0 = fakeRight;
      unsigned long Y1 = fakeRight2;
      unsigned long fakeInput0 = Y0 ^ fakeK;
      unsigned long fakeInput1 = Y1 ^ fakeK;
      unsigned long fakeOut0 = fBox(fakeInput0);
      unsigned long fakeOut1 = fBox(fakeInput1);
      unsigned long fakeDiff = fakeOut0 ^ fakeOut1;