{+a : if + a ∈ A2 and − a (cid:18)∈ A2} ∪ {−a : if − a ∈
A2 and + a (cid:18)∈ A2}), T2)) ∈ M (max(p)).
• If ((s1, o1, A1), (s1, o1, A2)) ∈ M (p) then
(((s1, o1, A1), T1), ((s1, o1, {−a : if + a,−a ∈ A2} ∪
{+a : if + a ∈ A2 and − a (cid:18)∈ A2} ∪ {−a : if − a ∈
A2 and + a (cid:18)∈ A2}), T2)) ∈ M (min(p)).
This deﬁnition completes our interpretations of policies,
and incorporates some design choices we have made. The
ﬁrst is that our policy algebra is capable of modeling non-
deterministic and inconsistent policies. Consequently, ap-
plying a policy in an authorization state may not lead to
a unique authorization state, and instead give a collection
of authorization states. This is modeled by mapping a pol-
icy P to a subset of S × S, where S is the collection of
states. Secondly, our interpretation of conjunction, disjunc-
tion, composition and iteration are standard, in the sense
that they correspond to interpretations given in program-
ming logics. In addition, we have added some other oper-
ators that are pertinent to modeling operations on security
policies. Since our rather broad formulation provides for
inconsistent, incomplete and non-deterministic policies, we
deﬁne these notions formally.
Definition 5
(Determinism).
Determinism for Subject Object Pairs: We say that a
state (Auth, T ruth) is deterministic for subject object
pair (s, o) if there does not exist B1, B2 ⊆ ˆA satisfying
(s, o, Bi) ∈ Auth and B1 (cid:18)= B2 for i = 1, 2.
Deterministic State: We say that a state (Auth, T ruth)
is deterministic if it is deterministic for every subject
object pair (s, o).
Deterministic Policy: Suppose M is an interpretation. We
say that a policy p is deterministic if for every state s,
) ∈ M (p) and
there is only one state S
S
is a deterministic state.
satisfying (S, S
(cid:3)
(cid:3)
(cid:3)
Definition 6
(Consistency).
Consistent State: We say that a state (Auth, T ruth) is
consistent if for every (s, o, B) ∈ Auth there does not
exist any action term a with both +a,−a ∈ B.
Consistent Policy: We say that a policy p is consistent
satis-
under an interpretation M if for every state S
fying (S, S
) ∈ M (p), S
is a consistent state.
(cid:3)
(cid:3)
(cid:3)
Notice that many conﬂict resolution policies such as de-
nials take precedence policy are consistent policies because
they resolve inconsistencies present in authorization states
prior to their application.
Definition 7
(Completeness).
Complete State: We say that a state (Auth, T ruth) is
complete if for every (s, o, B) ∈ Auth and every ac-
tion term a ∈ A, either +a ∈ B or −a ∈ B.
40Complete Policy: We say that a policy p is complete un-
satisfying
der an interpretation M if for every state S
(S, S
is a complete state.
(cid:3)
(cid:3)
) ∈ M (p) S
(cid:3)
4. ALGEBRAIC IDENTITIES
This section lists some algebraic identities of policy ex-
pressions. As our policy framework is designed to be gen-
eral, their properties are limited in number, and reduce to
verifying simple algebraic properties of relations.
Theorem 1. Following properties hold for all policies:
1. Inclusion of unions:
(a) p ⊆ (p ∪ p).
2. Associativity of unions, intersections and compositions:
(a) (p1 ∪ p2) ∪ p3 = p1 ∪ (p2 ∪ p3).
(b) (p1 ∩ p2) ∩ p3 = p1 ∩ (p2 ∪ p3).
(c) (p1; p2); p3 = p1; (p2; p3).
3. Commutativity of unions and intersections:
(a) p1 ∪ p2 = p2 ∪ p1.
(b) p1 ∩ p2 = p2 ∩ p1.
Composition (i.e. ;) is not commutative, as expected.
4. Distributivity of unions and intersections:
(a) p1 ∪ (p2 ∩ p3) = (p1 ∪ p2) ∩ (p1 ∪ p3).
(b) p1 ∩ (p2 ∪ p3) = (p1 ∩ p2) ∪ (p1 ∩ p3).
(d) ¬(p1; p2) = (p1;¬p2).
9. Properties of Max and Min Operators:
(a) max{p1; p2} = p1; max {p2}.
(b) min{p1; p2} = p1; min {p2}.
10. Properties of the Provisioning Operator:
(a) φ : (ψ : p) = (φ ∧ ψ) : p.
(b) φ : (p1 ∪ p2) = (φ : p1) ∪ (φ : p2).
(c) φ : (p1 ∩ p2) = (φ : p1) ∩ (φ : p2).
(d) φ : (p1; p2) = p1; (φ : p2).
(e) φ : ¬p = ¬(φ : p).
(f ) φ : (cid:9)p = (cid:9)p.
(g) φ : (p1 − p2) = (φ : p1 − φ : p2).
(h) max(φ : p) = φ : (max)φ.
(i) min(φ : p) = φ : (min)φ.
(j) φ : (p | θ) = (φ : p) | θ.
11. Miscellaneous Interactions between Operators:
(a) ¬ (cid:9) p = (cid:9)p = (cid:9)¬p.
(b) max {p1; p2} = p1; max{p2}.
(c) min {p1; p2} = p1; min{p2}.
(d) max {(cid:9)p} = (cid:9) max {p} = (cid:9)p.
(e) min {(cid:9)p} = (cid:9) min {p} = (cid:9)p.
5. Right distributivity of composition over unions and in-
Proof: See Appendix.
tersections:
(a) p1; (p2 ∩ p3) = (p1; p2) ∩ (p1; p3).
(b) p1; (p2 ∪ p3) = (p1; p2) ∪ (p1; p3).
Compositions are not left distributive over unions and
intersection.
6. Properties of the diﬀerence operator:
(a) (p − p) = (cid:9)p.
(b) p1 − (p2 ∪ p3) = (p1 − p2 − p3).
(c) ¬(p1 − p2) = (¬p1) − (¬p2).
(d) (cid:9)(p1 − p2) = (cid:9)p1.
7. Properties of the Null Operator:
(a) Idempotency: (cid:9) (cid:9) p = (cid:9)p.
(b) (cid:9)(p1 ∪ p2) = ((cid:9)p1) ∪ ((cid:9)p2).
(c) (cid:9)(p1 ∩ p2) = ((cid:9)p1) ∩ ((cid:9)p2).
(d) Distributivity over compositions:
(cid:9)(p1; p2) = (p1;(cid:9)p2).
8. Properties of the Negation Operator:
(a) Self Inversion Property of Negation: ¬¬p = p.
(b) ¬(p1 ∪ p2) = (¬p1) ∪ (¬p2).
(c) ¬(p1 ∩ p2) = (¬p1) ∩ (¬p2).
5. DETERMINISM, CONSISTENCY AND
COMPLETENESS
Our framework for policy compositions allow for compos-
ing inconsistent, incomplete or non-deterministic policies.
Deterministic policies play an important role in security
speciﬁcations, and some related frameworks such as [5, 10]
only address deterministic policies in the sense of Deﬁni-
tion 5. Closure properties of deterministic, consistent and
complete policies are given in Theorems 2, 3 and 4, respec-
tively.
Theorem 2
(Properties of Deterministic Policies).
Deterministic policies have the following properties:
1. If p is deterministic then (p ∪ p) = p, and (p ∩ p) = p.
2. For any policy p, (cid:9)p is a deterministic policy.
3. If p1, p2 are deterministic policies, then so are (p1∪p2),
(p1 ∩ p2), (p1; p2), and ¬p1.
Proof: See Appendix.
Consistency means that an access to an object by a sub-
ject will not be both given and denied at the same time (see
Deﬁnition 6). Consistent policies have the following proper-
ties:
Theorem 3
(Properties of Consistent Policies).
Following are true about consistent policies:
411. For any policy p, (cid:9)p, max (p), min (p) are consistent
policies.
2. If p2 is consistent, then so are ¬p2, (p1; p2) and p2−p1.
3. If p1, p2 are consistent policies, then so are (p1 ∩ p2),
(p1 ∩ p2), (p1; p2), and ¬p1.
Proof: Similar to that of Theorem 2.
A complete policy is one in which every request is either
granted or denied, but not both (see Deﬁnition 7). Complete
policies have the following closure properties:
Theorem 4
is a complete policy then so are (p1; p2) and ¬p2.
(Closure of Complete Policies). If p2
Proof: Similar to that of Theorem 2.
Although the proofs of Theorems 2, 3, and 4 are simple,
they can be used to determine if a given policy is determin-
istic, consistent or complete without analyzing their details.
For example, deterministic policies are closed under union,
intersection, sequencing and negation. Similarly consistent
policies are closed under intersection, sequencing and nega-
tion, while complete policies are closed under sequencing
and negation. As stated, closure conditions for determinism
are a superset of those for consistency and which in turn are
a super set of closure conditions for completeness. Accord-
ingly, if some policy is constructed by applying negation,
conjunction and sequencing to a collection of determinis-
tic, consistent and complete components, then the resulting
policy is guaranteed to be consistent and complete, but not
deterministic.
Based on these simple closure conditions given in theo-
rems 2, 3, and 4, we can generate a set of pre-conditions that
would ensure the consistency, determinacy or the complete-
ness of composed policies. To illustrate, suppose we have
a policy expression p given by (p1 ∪ p2); (p3 ∩ p4); (¬(p5 −
p6) ∪ ((cid:9)p7)). Theorem 2 ensures that the determinacy of
p1, . . . , p5 is suﬃcient for determinacy of p. Similarly, Theo-
rem 4 ensures that the completeness of p5 and p6 is suﬃcient
to derive the completeness of p. Similarly, by Theorem 3, the
consistency of p5 is suﬃcient to determine the consistency
of p.
6. EXAMPLES
This section shows how some example policies can be
modeled in our policy algebra. The ﬁrst two examples are
from the Flexible Authorization Framework (FAF) [9, 10],
and the third example models a federated database contract
between two government agencies [4] .
6.1 FAF Example
Described in detail over a number of papers [10, 11, 12],
FAF is a logic based framework in specifying authorizations
in the form of rules. It is based on four categories of policies
that are applied in a sequence. The ﬁrst in the sequence,
referred to as propagation policies, is a ﬁnite set of rules
modeling subject and object hierarchies, such as directory
structures, and the rules describing how accesses propagate
along these hierarchies. Although propagation policies are
ﬂexible and expressive, they may result in inconsistent spec-
iﬁcations (i.e.
imply both negative and positive authoriza-
tions for an access). During the second step of the sequence,
such inconsistencies are removed by applying conﬂict resolu-
tion policies that weed out conﬂicting authorizations. The
third step of the sequence uses decision policies to ensure
the completeness of authorizations, where a decision will be
made to either grant or deny every possible authorization.
The last step of the sequence checks for application speciﬁc
integrity constraints. An example FAF speciﬁcation is as
follows:
in(John, M anager, ASH) ←
in(M ary, M anager, ASH) ←
in(Bob, Sales, ASH) ←
in(Alice, Sales, ASH) ←
in(M anager, Emp, ASH) ←
in(Sales, M anager, ASH) ←
in(BM W, Car, AOH) ←
in(SAAB, Car, AOH) ←
in(x, z, ASH) ← in(x, y, ASH),
in(y, z, ASH)
cando(x, s, +Sell) ← in(x, Car, AOH),
in(s, Emp, ASH)
cando(x, s, +OK) ← in(x, Car, AOH),
in(s, M anager, ASH)
dercando(o, s, a) ← cando(o, s, a)
do(x, s, +a) ← dercando(o, s, +a),
¬done(o, s, a, t), t ≤ now
do(x, s,−a) ← ¬do(o, s, +a)
error ← do(x, s, +Sell),
do(x, s, +OK)
error ← do(x, s, +Sell),
do(x, s
(cid:3)
, +Sell), s (cid:18)= s
(cid:3)
The ﬁrst nine rules consist of information about subject
and object hierarchies, and the next three rules describe
how accesses propagate along these hierarchies. The pred-
icate in(x, y, hierarchy name) is used to specify properties
of subject and object hierarchies. AOH and ASH denote
authorization object and authorization subject hierarchies
respectively. ASH consist of two roles Manager and Sales,
and the role Sales is junior to Manager. John and Mary
are managers, and Bob and Alice work in sales. The object
hierarchy AOH has one class Car with members BMW and
SAAB. The two cando rules specify that all employees are
allowed to sell cars and only managers are allowed to ap-
prove such sales. According to the the dercando rule, an
employee is allowed to perform any action (selling or ap-
proval of a sale) provided that the particular action has not
been performed previously.
Since there is no need for conﬂict resolution in this exam-
ple, the next stage in the sequence is the decision policy and
ensuring the completeness of access control decisions. They
are accomplished by the two rules with do(object, subject,
action) heads. According to the stated rules, all derived
positive permissions are allowed, and all actions for which
positive permissions cannot be derived are denied.
The last step is integrity checking, and is given by rules
with a head consisting of the error literal. As stated, no
42employees is allowed to sell and approve the sale of the same
car, and no car can be sold more than once.
Notice that John, Mary Bob and Alice are permitted to
sell both cars the BMW and the SAAB, and John and Mary
can authorize any of these sales. Accordingly, we model