restrictions imposed by ADsafe. In addition, the vulnera-
bility is also exploitable on present day browsers. In the
accompanying tech report [35], we use the exploit code to
construct a JSLint-satisfactory script element, which when
run in conjunction with the (broken) ADsafe library, is able
to obtain a reference to the document object. The exploit has
been tested on browsers Firefox, Chrome and Safari. Perhaps
surprisingly, there exist examples of API conﬁnement that
are secure under standard JavaScript semantics but not under
SESlight semantics. For example, the following API fails to
conﬁne the function critical under the SESlight semantics and
threat model:
var x = function critical(){};
var api = function(){var a = this;
if(typeof a === ”object”){ delete a.x;};
return x;}
However, this is safe under JavaScript semantics, for re-
stricted untrusted code that only accesses the global variable
api. This is because in the JavaScript semantics, the this value
of the api function would be the global object and therefore
the priv binding would get deleted before the return step.
However under the SESlight semantics, the this value would
be undeﬁned thereby making the function return critical.
Finally, we note that ENCAP has the expected limitations
and imprecision associated with ﬂow insensitive and context
insensitive analysis. For instance, running ENCAP on the
Cajita run-time library of the Google Caja framework [6],
generated a large number of false positives as a function
376
freeze was being called on the return variables of all the
library methods. Due to context insensitivity, the return value
from all calls to freeze propagated to all call sites, thereby
creating too many spurious points-to edges.
VII. RELATED WORK
There is a long history of using static analysis and
language-based techniques to secure extensible software,
including such notable work as Typed Assembly Lan-
guage [31], Proof-Carrying Code and Software-based Fault
Isolation [38]. However, this line of research has focused on
providing strong guarantees about untrusted extensions, and
their access to trusted interfaces to security-relevant services.
Less considered have been the effects of giving an arbi-
trary, untrusted extension unfettered access to such trusted
interfaces. Until recently, most work that considered such
“API security” had centered around cryptographic security
modules, and their interfaces [4]. For those cryptographic
APIs, keys take the role of security-critical objects, and static
analysis has been used to establish whether (or not) those
keys are properly conﬁned within the security module. This
line of work has strong connections to formalisms such as
BAN logic [5], where similar abstract analysis can be used
to reason about all possible interactions in security protocols.
As security-relevant services that expose rich interfaces are
increasingly written in high-level, type-safe languages, such
abstract analysis of the security properties of APIs has
increasingly wider applicability.
For server-side Web software written in languages other
than JavaScript, several efforts have employed static analysis
for security, in particular to identify and prevent Cross-Site
Scripting (CSS) attacks or SQL injection. Examples include
the taint-based CSS analysis in Pixy [16], the SQL injection
analysis by Xie and Aiken [41], both in the context of
PHP. In addition, in the context of Java, Livshits and Lam
implemented a Datalog-based analysis to establish security
properties such as proper sanitization [21]. Compared to
this work, JavaScript raises unique challenges, in particular
due to its highly-dynamic nature. In previous work [23, 25],
Maffeis et al. have analyzed various subsets of JavaScript,
and deﬁned sandboxes based on ﬁltering, rewriting and
wrapping for restricting untrusted code written in them.
In previous work by Maffeis et al. [22], a small-step op-
erational semantics has been presented for JavaScript, based
on the 3rd edition of the ECMA262 standard. As mentioned
earlier, our semantics of SESlight is very similar in structure
to this semantics with the main technical difference being
in the modeling of scope objects. An alternate approach to
deﬁning semantics of Javascript is that of Guha et al. [12],
who describe the semantics by deﬁning a de-sugaring of
the surface language to a core calculus LambdaJS and then
providing execution rules for expressions in LambdaJS.
Recently, ﬂow-insensitive static analysis of JavaScript
code has been considered in the research efforts Staged In-
formation Flow [8] and Gatekeeper [11]. Both efforts make
use of mostly-static techniques, supported by some run-
time checks; in particular, Staged Information Flow leaves
to runtime checks the analysis of all dynamic code and
eval. Gatekeeper has perhaps the most similar goals to our
work: it aims to constrain potentially-obfuscated, malicious
JavaScript widgets that execute within a host Web page, and
invoke the APIs of that Web page. Gatekeeper analysis also
makes use of Datalog, in much the same way as we do in
our work. Gatekeeper, however, does not statically analyze
eval and does not provide a rigorous proof of soundness
for their analysis. As a ﬁnal point of comparison, the VEX
system uses static information-ﬂow analysis to ﬁnd security
vulnerabilities in Web browser extensions. Much like in the
current work, VEX analysis is based on a formal semantics
for a fragment of JavaScript, based on [12, 22]. Despite
several similarities, VEX is fundamentally different from
the current work in both its application domain, and in its
technical details. VEX aims to prevent script injection at-
tacks, and analyzes only certain types of explicit ﬂows from
untrusted sources to executable sinks; in comparison, we
consider the conﬁnement of security-critical objects. VEX
static analysis is path-sensitive, context-sensitive and makes
use of precise summaries. but is fundamentally unsound.
In comparison, our static analysis is simpler, applies to the
core of an important new JavaScript variant, and guarantees
soundness.
VIII. CONCLUSION AND FUTURE WORK
While JavaScript was originally designed for adding small
scripting functions to Web pages,
the Web has become
dramatically more sophisticated over the past 15 years.
As larger and more complex applications have become
commonplace, Web application developers and users have
become increasingly interested in robustness, reliability, and
security of large JavaScript code bases. In this paper, we
therefore study a restricted sublanguage SESlight, based on
recently standardized ES5S, that we believe allows con-
cerned programmers to develop secure applications that pro-
vide restricted access to untrusted code. In effect, we believe
that SESlight provides better support for the principle of least
privilege than previous ad hoc subsets of JavaScript because
a programmer can conﬁne access to selected resources to a
speciﬁc interface (or API).
We demonstrate the way that SESlight supports conﬁne-
ment by developing precise semantics for SESlight, present-
ing an automated tool ENCAP that provably veriﬁes conﬁne-
ment, and using ENCAP to analyze code previously deﬁned
to provide conﬁnement in restricted forms of JavaScript. In
these case studies, we found a previously undetected con-
ﬁnement oversight in the Yahoo! ADsafe library [9], proved
conﬁnement of a repaired version of ADsafe automatically,
and demonstrated conﬁnement for other isolation examples
from the object-capability and security literature. While
SESlight requires programmers of security-critical code to
use a more limited form of JavaScript, we believe the clean
semantic properties of SESlight and the power of ENCAP
and other analysis methods enabled by SESlight provide
ample motivation for concerned programmers to adopt this
language. In fact, the success of our tool on some existing
code suggests that careful programmers may already respect
some of the semantically motivated limitations of SESlight.
While our success with ENCAP demonstrates some of the
advantages of SESlight, additional effort may be needed
to drive interest in SESlight, In addition, further technical
work can provide additional and more powerful analysis
methods for versions of JavaScript that support traditional
programming language properties such as the static contour
model of scope and the ability to rename bound variables
without changing program semantics (both of which fail
for arbitrary JavaScript). For example, additional analysis
methods such as object-sensitive analysis [28] and CFA2
techniques [37] may lead to more powerful tools that will
aid future programmers in developing security-critical code,
and other methods may allow us to provide more useful
diagnostics when conﬁnement cannot be established. We
also believe that further work may allow us to extend the
present tool and proofs to broader classes of untrusted code.
ACKNOWLEDGMENT
We thank the Google Caja team for invaluable comments
and discussions. We are indebted to Shriram Krishnamurthi
and anonymous reviewers for their comments and sugges-
tions. Mitchell and Taly acknowledge the support of the Na-
tional Science Foundation, the Air Force Ofﬁce of Scientiﬁc
Research, the Ofﬁce of Naval Research, and Google, Inc.
REFERENCES
[1] L. O. Andersen. Program Analysis and Specialization for the
C Programming Language. PhD thesis, DIKU, University of
Copenhagen, 1994.
[2] I. Atsushi, B. C. Pierce, and P. Wadler. Featherweight Java: A
minimal core calculus for Java and GJ. In ACM Transactions
on Programming Languages and Systems, pages 132–146,
1999.
[3] M. Berndl, O. Lhot´ak, F. Qian, L. Hendren, and N. Umanee.
Points-to analysis using bdds. In Proc. of PLDI, pages 103
– 114, 2003.
[4] M. Bortolozzo, M. Centenaro, R. Focardi, and G. Steel.
Attacking and ﬁxing PKCS#11 security tokens. In Proc. of
CCS, pages 260–269, 2010.
[5] M. Burrows, M. Abadi, and R. Needham. A logic of
authentication. ACM Trans. Comput. Syst., 8, 1990.
[6] Google Caja Team. Google-Caja: A source-to-source trans-
lator for securing JavaScript-based Web content. http://code.
google.com/p/google-caja/.
377
[7] S. Ceri, G. Gottlob, and L. Tanca. What you always wanted
to know about Datalog (and never dared to ask). IEEE Trans.
on Knowl. and Data Eng., 1:146 – 166, 1989.
[8] R. Chugh, J.A. Meister, R. Jhala, and S. Lerner. Staged
information ﬂow for JavaScript. In Proc. of PLDI, 2009.
[9] D. Crockford. ADsafe: Making JavaScript safe for advertis-
ing. http://www.adsafe.org/, 2008.
[10] ECMA. ECMA-262: ECMAScript Language Speciﬁcation.
Fifth edition, December 2009.
[11] S. Guarnieri and B. V. Livshits. Gatekeeper: Mostly static
enforcement of security and reliability policies for JavaScript
code. In Proc. of USENIX security symposium, pages 50–62,
2009.
[12] A. Guha, C. Saftoiu, and S. Krishnamurthi. The essence of
JavaScript. In Proc. of ECOOP, pages 126–150, 2010.
[13] A. Guha, C. Saftoiu, and S. Krishnamurthi. Typing local
control and state using ﬂow analysis. Accepted at ESOP,
2011.
[14] D. Van Horn and H. G. Mairson. Deciding kCFA is complete
for EXPTIME. In Proc. of ICFP, pages 275–282, 2008.
[15] D. Jang and K. Choe. Points-to analysis for JavaScript. In
Proc. of ACSAC, pages 1930–1937, 2009.
[16] N. Jovanovic, C. Kruegel, and E. Kirda. Pixy: A static
analysis tool for detecting Web application vulnerabilities
(short paper). In Proc. of the 2006 IEEE S&P, pages 258–
263, 2006.
[17] J. H. Morris Jr.
Protection in programming languages.
Commun. ACM, 16:15–21, 1973.
[18] S. Krishnamurthi. Conﬁning the ghost in the machine: Using
types to secure JavaScript sandboxing. In Proc. of APLWACA,
2010.
[25] S. Maffeis and A. Taly. Language-based isolation of untrusted
Javascript. In Proc. of CSF, pages 77–91, 2009.
[26] J. Midtgaard and T. Jensen. A calculational approach to
In Proc. of
control-ﬂow analysis by abstract interpretation.
SAS, pages 347–362, 2008.
[27] M. Might, Y. Smaragdakis, and D. Van Horn. Resolving
and exploiting the k-CFA paradox: Illuminating functional
vs. object-oriented program analysis. In Proc. of PLDI, pages
305–315, 2010.
[28] A. Milanova, A. Rountev, and B. G. Ryder. Parameterized
object sensitivity for points-to analysis for Java. ACM Trans.
Softw. Eng. Methodol., 14(1):1–41, 2005.
[29] M. S. Miller.
Robust Composition: Towards a Uniﬁed
Approach to Access Control and Concurrency Control. PhD
thesis, Johns Hopkins University, 2006.
[30] M. S. Miller, C. Morningstar, and B. Frantz. Capability-based
ﬁnancial instruments. In Proc. of FC, FC ’00, pages 349–378,
2001.
[31] G. Morrisett, D. Walker, K. Crary, and N. Glew.
System F to typed assembly language.
pages 85–97, 1998.
From
In Proc. of POPL,
[32] G. D. Plotkin. A structural approach to operational semantics.
J. Log. Algebr. Program., 60-61:17–139, 2004.
[33] J. A. Rees.
A security kernel based on the lambda-
calculus. Technical report, Massachusetts Institute of Tech-
nology, Cambridge, MA, USA, 1996.
[34] A. Taly,
´U. Erlingsson, J. C. Mitchell, M. S. Miller, and
http:
J. Nagra. An operational semantics for SESlight.
//theory.stanford.edu/∼ataly/Semantics/seslSemantics.txt.
[35] A. Taly,
´U. Erlingsson, J. C. Mitchell, M. S. Miller, and
J. Nagra. Automated analysis of security-critical javascript
Technical Report http://theory.stanford.edu/∼ataly/
apis.
Papers/sp11TechReport.pdf, 2011.
[19] B. W. Lampson. A note on the conﬁnement problem.
Commun. ACM, 16:613–615, 1973.
[36] The Facebook Team. FBJS. http://wiki.developers.facebook.
com/index.php/FBJS.
[20] H. M. Levy.
Capability-Based Computer Systems.
Butterworth-Heinemann, Newton, MA, USA, 1984.
[21] B. V. Livshits and M. S. Lam. Finding security vulnerabilities
in Java applications with static analysis. In Proc. of USENIX
security symposium, pages 1–18, 2005.
[22] S. Maffeis, J. C. Mitchell, and A. Taly. An operational
semantics for JavaScript. In Proc. of APLAS, pages 307–325,
2008.
[23] S. Maffeis, J. C. Mitchell, and A. Taly. Isolating JavaScript
with ﬁlters, rewriting, and wrappers. In Proc. of ESORICS,
pages 505–522, 2009.
[24] S. Maffeis, J. C. Mitchell, and A. Taly. Object capabilities
and isolation of untrusted Web applications. In Proc. of IEEE
S&P, pages 125–140, 2010.
378
[37] D. Vardoulakis and O. Shivers. CFA2: A context-free ap-
In Proc. of ESOP, pages
proach to control-ﬂow analysis.
570–589, 2010.
[38] R. Wahbe, S. Lucco, T. E. Anderson, and S.L. Graham.
In Proc. of SOSP,
Efﬁcient software-based fault isolation.
pages 203–216, 1994.
[39] J. Whaley. BDDBDDB: Bdd based deductive database. http:
//bddbddb.sourceforge.net/, 2004.
[40] J. Whaley and M. S. Lam. Cloning-based context-sensitive
pointer alias analysis using binary decision diagrams. In Proc.
of PLDI, pages 131–144, 2004.
[41] Y. Xie and A. Aiken. Static detection of security vulnera-
bilities in scripting languages. In Proc. of USENIX security
symposium, page 179192, 2006.