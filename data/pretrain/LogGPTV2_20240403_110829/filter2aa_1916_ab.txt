            Object p=personClass.getConstructor().newInstance();
            Object result=ageField.get(p);  //get方法需要传递一个对象作为参数
            System.out.println(result);
            //设置值
            ageField.set(p,100);
            System.out.println(ageField.get(p)); //再次取值变成100
            System.out.println("==============================");
3. 反射创建对象
5. 反射获取成员方法并执行
            Field[] fields1=personClass.getDeclaredFields();  //可以打印全部的成员变
量，不管修饰符
            for (Field field : fields1){
                System.out.println(field);
            }
            Field bgeField=personClass.getDeclaredField("bge");
            bgeField.setAccessible(true);//(暴力反射)直接取值会爆出异常。想要直接取值，
需要忽略权限修饰符的安全检查
            Object bge=bgeField.get(p); //直接取值会爆出异常。想要直接取值，需要忽略权限
修饰符的安全检查
            System.out.println(bge);
            bgeField.set(p,200);
            System.out.println(bgeField.get(p));
        }catch (Exception e){
            System.out.println("========================");
            System.out.println(e);
        }
    }
}
package reflect1;
import java.lang.reflect.Constructor;
public class Demo3 {
    public static void main(String[] args) {
        //获取构造方法
        try{
            Class personClass=Person.class;
            Constructor 
constructor=personClass.getConstructor(String.class,int.class);
            System.out.println(constructor);
            //创建对象
            Object zhangsan=constructor.newInstance("张三",20);
            System.out.println(zhangsan.toString());
            System.out.println("=================");
            Constructor constructor2=personClass.getConstructor();
            Object lisi=constructor2.newInstance();
            ///lisi.setName("李四");
            System.out.println(lisi.toString());
        }catch (Exception e){
            System.out.println(e);
        }
    }
}
package reflect1;
import java.lang.reflect.Method;
public class Demo4 {
    //获取成员方法
    public static void main(String[] args) {
        Class personClasee = Person.class;
        //获取public成员方法
        try {
            Method[] personMethod = personClasee.getMethods();
            for (Method method: personMethod) {
                System.out.println(method);
                /*
                public java.lang.String reflect1.Person.toString()
                public java.lang.String reflect1.Person.getName()
                public void reflect1.Person.setName(java.lang.String)
                public void reflect1.Person.say(java.lang.String)
                public void reflect1.Person.eat()
                public void reflect1.Person.setAge(int)
                public int reflect1.Person.getAge()
                public final void java.lang.Object.wait() throws 
java.lang.InterruptedException
                public final void java.lang.Object.wait(long,int) throws 
java.lang.InterruptedException
                public final native void java.lang.Object.wait(long) throws 
java.lang.InterruptedException
                public boolean java.lang.Object.equals(java.lang.Object)
                public native int java.lang.Object.hashCode()
                public final native java.lang.Class java.lang.Object.getClass()
                public final native void java.lang.Object.notify()
                public final native void java.lang.Object.notifyAll()
                 */
                //获取方法名称
                System.out.println(method.getName());
            }
        }catch (Exception e){
            System.out.println(e);
        }
        System.out.println("=====================================");
        //获取指定方法{
        try {
            Person p=new Person();
            //System.out.println(personClasee.getClass());
            Method methodEat = personClasee.getMethod("eat"); //空参方法1
            methodEat.invoke(p);
            Method methodSay=personClasee.getMethod("say", String.class);
            methodSay.invoke(p,"张三");
        } catch (Exception e) {
            System.out.println(e);
        }
    }
}
序列化与反序列化
关于重写 readObject 方法，以及重写 readObject 方法之后，反序列化的时候是如何调用
readObject 的,可以通过 debug 的方式进行跟踪,最后发现在 ObjectStreamClass.java 中存在一
个反射调用. 
简单的反序列化实例.
Person类：
package serialize;
import java.io.IOException;
import java.io.Serializable;
/*
需要实现serializeable接口
 */
public class Person2 implements Serializable {
    public transient String reflect;
    private String name;
    public String age;
    //private static final long serialVersionUID=-5702540850087186263L; 
//SerialVersionUid 序列化版本号的作用是用来区分我们所编写的类的版本，用于判断反序列化时类的版
本是否一直，如果不一致会出现版本不一致异常。
    private void readObject(java.io.ObjectInputStream in)
            throws IOException, ClassNotFoundException{
        //in.defaultReadObject();
        System.out.println("1111111");
    }
    @Override
    public String toString() {
        return "Person2{" +
                "reflect='" + reflect + '\'' +
                ", name='" + name + '\'' +
                ", age='" + age + '\'' +
                '}';
    }
    public Person2(String reflect, String name, String age) {
        this.reflect = reflect;
        this.name = name;
        this.age = age;
    }
    public String getName() {
        return name;
    }
    public void setName(String name) {
        this.name = name;
    }
    public String getAge() {
        return age;
    }
    public void setAge(String age) {
        this.age = age;
    }
}
ObjectOutput类：
package serialize;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
/*
java的序列化流，ObjectOutputStream（OutputStream out）
1、创建objoutput对象
2、使用writeobj方法将对象写入文件
 */
public class ObjectOutput {
    public static void main(String[] args) throws IOException {
        ObjectOutputStream oos=new ObjectOutputStream(new 
FileOutputStream("src\\result.txt"));
        oos.writeObject(new Person2("test","张三","20"));
        //java.io.NotSerializableException: serialize.Person  Person类为实现序列化
接口
        oos.close();
    }
}
ObjectInput类：
package serialize;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
/*
在序列化当中，因为静态方法是优先于对象加载进入内存的，所以成员变量是不能被序列化的
 */
public class ObjectInput {
    public static void main(String[] args) throws IOException, 
ClassNotFoundException {
反序列的几个关键知识点.
1. 读写顺序一致
2. 实现 Serializable 接口
3. static 和 transient 关键字修饰的属性不被反序列化
4. 内部属性的类型也需要实现 Serializable 接口
5. 具有继承性,父类可以序列化那幺子类同样可以
        ObjectInputStream objInput=new ObjectInputStream(new 
FileInputStream("src\\result.txt"));
        Object obj=objInput.readObject();
        //obj.getName();
        System.out.println(obj);
        Person2 p=(Person2) obj;
        System.out.println(p.toString());
    }
}