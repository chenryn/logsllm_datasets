## Package utl_file
```
This package allows PL/pgSQL prgrams read from and write to any files that are
accessible from server. Every session can open maximaly ten files and max
line size is 32K. This package contains functions:
* utl_file.fclose(file utl_file.file_type)  - close file
* utl_file.fclose_all()  - close all files
* utl_file.fcopy(src_location, src_filename, dest_location, dest_filename[, start_line][, end_line]) - copy text file
* utl_file.fflush(file utl_file.file_type)  - flushes all data from buffers
* utl_file.fgetattr(location, filename) - get file attributes
* utl_file.fopen(location text, filename text, file_mode text [, maxlinesize int] [, encoding name]) utl_file.file_type  - open file
* utl_file.fremove(location, filename) - remove file
* utl_file.frename(location, filename, dest_dir, dest_file[, overwrite]) - rename file
* utl_file.get_line(file utl_file.file_type) text  - read one line from file
* utl_file.get_nextline(file utl_file.file_type) text  - read one line from file or returns NULL
* utl_file.is_open(file utl_file.file_type) bool  - returns true, if file is opened
* utl_file.new_line(file utl_file.file_type [,rows int])  - puts some new line chars to file
* utl_file.put(file utl_file.file_type, buffer text)  - puts buffer to file
* utl_file.put_line(file utl_file.file_type, buffer text)  - puts line to file
* utl_file.putf(file utl_file.file_type, format buffer [,arg1 text][,arg2 text][..][,arg5 text])  - put formated text into file
* utl_file.tmpdir() - get path of temp directory
Because PostgreSQL doesn't support call by reference, some function's are gently different:
fclose and get_line.
----
  declare f utl_file.file_type;
  begin
    f := utl_file.fopen('/tmp', 'sample.txt', 'r');
    >
    loop
      begin
        raise notice '%', utl_file.get_line(f);
      exception
        when no_data_found then
          exit readl;
      end;
    end loop;
    f := fclose(f);
  end; 
----
or second (with PostgreSQL specific function get_nextline)
----
    declare 
      f utl_file.file_type;
      line text;
    begin
      f := utl_file.fopen('/tmp', 'sample.txt', 'r');
      loop
        line := utl_file.get_nextline(f);
        exit when line is NULL;
        raise notice '%', line;
    exception
      when others then
        utl_file.fclose_all();
    end;
----
Before using package you have to set table utl_file.utl_file_dir. This contains
all allowed directories without ending symbol ('/' or '\'). On WinNT platform
you have to put locality parametr with ending symbol '\' everytime.
```
## Package dbms_pipe
```
This package is an emulation of Oracle's package dbms_pipe. It provides 
inter-session comunication. You can send and read any message with or without 
waiting; list active pipes; set a pipe as private or public; and, use 
explicit or implicit pipes. 
The maximum number of pipes is 50.
Shared memory is used to send messages.
An example follows:
----
-- Session A
select dbms_pipe.create_pipe('my_pipe',10,true); -- explicit pipe creating
select dbms_pipe.pack_message('neco je jinak');
select dbms_pipe.pack_message('anything is else');
select dbms_pipe.send_message('my_pipe',20,0); -- change limit and send without waiting
select * from dbms_pipe.db_pipes; -- list of current pipes
-- Session B
select dbms_pipe.receive_message('my_pipe',1); -- wait max 1 sec for message
select dbms_pipe.next_item_type(); -- -> 11, text
select dbms_pipe.unpack_message_text();
select dbms_pipe.next_item_type(); -- -> 11, text
select dbms_pipe.unpack_message_text();
select dbms_pipe.next_item_type(); -- -> 0, no more items
select dbms_pipe.remove_pipe('my_pipe');
----
There are some differences compared to Oracle, however:
* limit for pipes isn't in bytes but in elements in pipe
* you can send message without waiting
* you can send empty messages
* next_item_type knows about TIMESTAMP (type 13)
* PostgreSQL don't know about the RAW type, use bytea instead
```
## Package dbms_alert
```
Another means of inter-process communication.
----
-- Session A
select dbms_alert.register('boo');
select * from dbms_alert.waitany(10);
-- Session B
select dbms_alert.register('boo');
select * from dbms_alert.waitany(10);
-- Session C
select dbms_alert.signal('boo','Nice day');
----
```
## Package PLVdate
```
This module contains some function for working with bussines days from
package PLVdate. Detailed documentation can be found in PLVision library.
This package is multicultural, but default configurations are only for
european countries (see source code).
You should define your own non-business days (max 50 days) and own 
holidays (max 30 days). A holiday is any non-business day, which is same every 
year. For example, Christmas day in Western countries.
```
### Functions
```
* plvdate.add_bizdays(day date, days int) date - Get the date created by adding  business days to a date
* plvdate.nearest_bizday(day date) date - Get the nearest business date to a given date, user defined
* plvdate.next_bizday(day date) date - Get the next business date from a given date, user defined
* plvdate.bizdays_between(day1 date, day2 date) int - Get the number of business days between two dates
* plvdate.prev_bizday(day date) date - Get the previous business date from a given date
* plvdate_isbizday(date) bool - Call this function to determine if a date is a business day
* plvdate.set_nonbizday(dow varchar) - Set day of week as non bussines day
* plvdate.unset_nonbizday(dow varchar) - Unset day of week as non bussines day
* plvdate.set_nonbizday(day date) - Set day as non bussines day
* plvdate.unset_nonbizday(day date) - Unset day as non bussines day
* plvdate.set_nonbizday(day date, repeat bool) - Set day as non bussines day, if 'repeat' is true, then day is nonbiz every year
* plvdate.unset_nonbizday(day date, repeat bool) - Unset day as non bussines day, if 'repeat' is true, then day is nonbiz every year
* plvdate.use_easter() - Easter Sunday and easter monday will be holiday
* plvdate.unuse_easter();
* plvdate.use_easter(useit boolean);
* plvdate.using_easter() bool - If we use easter then returns true
* plvdate.use_great_friday() - Easter Great Friday will be holiday
* plvdate.unuse_easter();
* plvdate.use_easter(useit boolean);
* plvdate.using_easter() bool - If we use easter Great Friday as holiday then returns true
* plvdate.include_start() - Include starting date in bizdays_between calculation
* plvdate.noinclude_start();
* plvdate.include_start(include boolean);
* plvdate.including_start() bool;
* plvdate.default_holidays(varchar) - load default configurations. You can use the following configurations:
  Czech, German, Austria, Poland, Slovakia, Russia, GB and USA at this moment.
* configuration contains only common holidays for all regions. You can add your own regional holiday with plvdate.set_nonbizday(nonbizday, true)
Example:
----
postgres=# select plvdate.default_holidays('czech');
 default_holidays 
 -----------------
(1 row)
postgres=# select to_char(current_date, 'day'),
           plvdate.next_bizday(current_date), 
	   to_char(plvdate.next_bizday(current_date),'day');
  to_char  | next_bizday |  to_char  
 ----------+-------------+-----------
 saturday  | 2006-03-13  | monday   
(1 row)
----
Change for non-European environment:
----
select plvdate.unset_nonbizday('saturday');
select plvdate.unset_nonbizday('sunday');
select plvdate.set_nonbizday('friday');
select plvdate.set_nonbizday('2006-05-19', true);
select plvdate.unuse_easter();
----
```
## Package PLVstr and PLVchr
```
This package contains some useful string and character functions. Each
function supports positive and negative offsets -- i.e., offset from the
end of the string. For example:
----
plvstr.left('abcdef',2) -> ab
plvstr.left('abcdef',-2) -> abcd
plvstr.substr('abcdef',1,1) -> a
plvstr.substr('abcdef',-1,1) -> f
plvstr.substr('abcde',-2,1) -> d
----
List of functions:
* plvstr.normalize(str text) - Normalize string - Replace white chars by space, replace  spaces by space
* plvstr.is_prefix(str text, prefix text, cs bool) - Returns true, if prefix is prefix of str
* plvstr.is_prefix(str text, prefix text)          - Returns true, if prefix is prefix of str
* plvstr.is_prefix(str int, prefix int)            - Returns true, if prefix is prefix of str
* plvstr.is_prefix(str bigint, prefix bigint)      - Returns true, if prefix is prefix of str
* plvstr.substr(str text, start int, len int) - Returns substring started on start_in to end
* plvstr.substr(str text, start int)          - Returns substring started on start_in to end
* plvstr.instr(str text, patt text, start int, nth int) - Search pattern in string
* plvstr.instr(str text, patt text, start int)          - Search pattern in string
* plvstr.instr(str text, patt text)                     - Search pattern in string
* plvstr.lpart(str text, div text, start int, nth int, all_if_notfound bool) - Call this function to return the left part of a string
* plvstr.lpart(str text, div text, start int, nth int) - Call this function to return the left part of a string
* plvstr.lpart(str text, div text, start int)          - Call this function to return the left part of a string
* plvstr.lpart(str text, div text)                     - Call this function to return the left part of a string
* plvstr.rpart(str text, div text, start int, nth int, all_if_notfound bool) - Call this function to return the right part of a string
* plvstr.rpart(str text, div text, start int, nth int) - Call this function to return the right part of a string
* plvstr.rpart(str text, div text, start int)          - Call this function to return the right part of a string
* plvstr.rpart(str text, div text)                     - Call this function to return the right part of a string
* plvstr.lstrip(str text, substr text, num int) - Call this function to remove characters from the beginning 
* plvstr.lstrip(str text, substr text)          - Call this function to remove characters from the beginning 
* plvstr.rstrip(str text, substr text, num int) - Call this function to remove characters from the end
* plvstr.rstrip(str text, substr text)          - Call this function to remove characters from the end
* plvstr.rvrs(str text, start int, _end int) - Reverse string or part of string
* plvstr.rvrs(str text, start int)           - Reverse string or part of string
* plvstr.rvrs(str text)                      - Reverse string or part of string
* plvstr.left(str text, n int)  -  Returns firs num_in charaters. You can use negative num_in
* plvstr.right(str text, n int) - Returns last num_in charaters. You can use negative num_ni
* plvstr.swap(str text, replace text, start int, lengh int) - Replace a substring in a string with a specified string
* plvstr.swap(str text, replace text)                       - Replace a substring in a string with a specified string
* plvstr.betwn(str text, start int, _end int, inclusive bool) - Find the Substring Between Start and End Locations
* plvstr.betwn(str text, start text, _end text, startnth int, endnth int, inclusive bool, gotoend bool) - Find the Substring Between Start and End Locations
* plvstr.betwn(str text, start text, _end text) - Find the Substring Between Start and End Locations
* plvstr.betwn(str text, start text, _end text, startnth int, endnth int) - Find the Substring Between Start and End Locations
* plvchr.nth(str text, n int) - Call this function to return the Nth character in a string
* plvchr.first(str text)      - Call this function to return the first character in a string
* plvchr.last(str text)       - Call this function to return the last character in a string
* plvchr.is_blank(c int)  - Is blank
* plvchr.is_blank(c text) - Is blank
* plvchr.is_digit(c int)  - Is digit 
* plvchr.is_digit(c text) - Is digit 
* plvchr.is_quote(c int)  - Is quote
* plvchr.is_quote(c text) - Is quote
* plvchr.is_other(c int)  - Is other
* plvchr.is_other(c text) - Is other
* plvchr.is_letter(c int) - Is letter
* plvchr.is_letter(c text) - Is letter
* plvchr.char_name(c text) - Returns the name of the character to ascii code as a VARCHAR.
* plvchr.quoted1(str text) - Quoted text between '''
* plvchr.quoted2(str text) - Quoted text between '"'
* plvchr.stripped(str text, char_in text) - Strips a string of all instances of the specified characters
```
## Package PLVsubst
```
The PLVsubst package performs string substitutions based on a substitution keyword. 
* plvsubst.string(template_in text, vals_in text[])                 - Scans a string for all instances of the substitution keyword and replace it with the next value in the substitution values list
* plvsubst.string(template_in text, vals_in text[], subst_in text)
* plvsubst.string(template_in text, vals_in text, delim_in text)
* plvsubst.string(template_in text, vals_in text, delim_in text, subst_in text)
* plvsubst.setsubst(str text) - Set substitution keyword to default '%s'
* plvsubst.subst() - Retrieve substitution keyword 
Examples:
----
select plvsubst.string('My name is %s %s.', ARRAY['Pavel','Stěhule']);
          string           
 --------------------------
 My name is Pavel Stěhule.
(1 row)
select plvsubst.string('My name is %s %s.', 'Pavel,Stěhule');
          string           
 --------------------------
 My name is Pavel Stěhule.
(1 row)
select plvsubst.string('My name is $$ $$.', 'Pavel|Stěhule','|','$$');
          string           
 --------------------------
 My name is Pavel Stěhule.
(1 row)
----