you can use analytics and machine learning to unearth insights into your environment.
 Session management. After users authenticate, you need to manage their sessions. If a user walks away from the
computer, anybody can walk up and assume their identity. To reduce the chances of that happening, you can
require users to lock their computers when stepping away. You can also use session timeouts to automatically lock
computers. You can also use password-protected screen savers that require the user to re-authenticate. You also
need to implement session management for remote sessions. For example, if users connect from their computers
to a remote server over Secure Shell (SSH) or Remote Desktop Protocol (RDP), you can limit the idle time of those
sessions.
 Registration and proofing of identity. With some identity management systems, users must register and provide
proof of their identity. For example, with self-service password reset apps, it is common for users to register and
prove their identity. If they later forget their password and need to reset it, they must authenticate using an
54
alternative method, such as providing the same answers to questions as they provided during registration. Note
that questions are often insecure and should be used only when questions can be customized or when
an environment doesn’t require a high level of security. One technique users can use to enhance question and
answer systems is to use false answers. For example, if the question wants to know your mother’s maiden name,
you enter another name which is incorrect but serves as your answer for authentication. Alternatively, you can
treat the answers as complex passwords. Instead of directly answering the questions, you can use a long string of
alphanumeric characters such as “Vdsfh2873423#@$wer78wreuy23143ya”.
 Federated Identity Management (FIM). Note that this topic does not refer to Microsoft Forefront Identity
Manager, which has the same acronym. Traditionally, you authenticate to your company’s network and gain access
to certain resources. When you use identity federation, two independent organizations share authentication
and/or authorization information with each other. In such a relationship, one company provides the resources
(such as a web portal) and the other company provides the identity and user information. The company providing
the resources trusts the authentication coming from the identity provider. Federated identity systems provide an
enhanced user experience because users don’t need to maintain multiple user accounts across multiple apps.
Federated identity systems use Security Assertion Markup Language (SAML), OAuth, or other methods for
exchanging authentication and authorization information. SAML is the most common method for authentication
in use today. It is mostly limited to use with web browsers, while OAuth isn’t limited to web browsers. Federated
identity management and SSO are closely related. You can’t reasonably provide SSO without a federated identity
management system. Conversely, you use federated identities without SSO, but the user experience will be
degraded because everyone must re-authenticate manually as they access various systems.
 Credentials management systems. A credentials management system centralizes the management of
credentials. Such systems typically extend the functionality of the default features available in a typical directory
service. For example, a credentials management system might automatically manage the passwords for account
passwords, even if those accounts are in a third-party public cloud or in a directory service on premises. Credentials
management systems often enable users to temporarily check out accounts to use for administrative purposes.
For example, a database administrator might use a credentials management system to check out a database admin
account in order to perform some administrative work using that account. When they are finished, they check the
account back in and the system immediately resets the password. All activity is logged and access to the credentials
is limited. Without a credentials management system, you run the risk of having multiple credentials management
approaches in your organization. For example, one team might use an Excel spreadsheet to list accounts and
passwords, while another team might use a third-party password safe application. Having multiple methods and
unmanaged applications increases risks for your organization. Implementing a single credentials management
system typically increases efficiency and security.
5.3 Integrate identity as a third-party service
There are many third-party vendors that offer identity services that complement your existing identity store. For example,
Ping Identity provides an identity platform that you can integrate with your on-premises directory (such as Active Directory)
and your public cloud services (such as Microsoft Azure or Amazon AWS). Third-party identity services can help manage
identities both on premises and in the cloud:
55
 On premises. To work with your existing solutions and help manage identities on premises, identity services often
put servers, appliances or services on your internal network. This ensures a seamless integration and provides
additional features, such as single sign-on. For example, you might integrate your Active Directory domain with a
third-party identity provider and thereby enable certain users to authenticate through the third-party identity
provider for SSO.
 Cloud. Organizations that want to take advantage of software-as-a-service (SaaS) and other cloud-based
applications need to also manage identities in the cloud. Some of them choose identity federation — they federate
their on-premises authentication system directly with the cloud providers. But there is another option: using a
cloud-based identity service, such as Microsoft Azure Active Directory or Amazon AWS Identity and Access
Management. There are some pros with using a cloud-based identity service:
 You can have identity management without managing the associated infrastructure.
 You can quickly start using a cloud-based identity service, typically within just a few minutes.
 Cloud-based identity services are relatively inexpensive.
 Cloud-based identity services offer services worldwide, often in more places and at a bigger scale than
most organizations can.
 The cloud provider often offers features not commonly found in on-premises environments. For
example, a cloud provider can automatically detect suspicious sign-ins attempts, such as those from a
different type of operating system than normal or from a different location than usual, because they have
a large amount of data and can use artificial intelligence to spot suspicious logins.
 For services in the cloud, authentication is local, which often results in better performance than sending
all authentication requests back to an on-premises identity service.
You also need to be aware of the potential downsides:
 You lose control of the identity infrastructure. Because identity is a critical foundational service, some
high-security organizations have policies that require complete control over the entire identity service.
There is a risk in using an identity service in a public cloud, although the public cloud can sometimes be
as secure or more secure than many corporate environments.
 You might not be able to use only the cloud-based identity service. Many companies have legacy apps
and services that require an on-premises identity. Having to manage an on-premises identity
infrastructure and a cloud-based identity system requires more time and effort than just managing an
on-premises environment.
 If you want to use all the features of a cloud identity service, the costs rise. On-premises identity
infrastructures are not expensive compared to many other foundational services such as storage or
networking.
 There might be a large effort required to use a cloud-based identity service. For example, you need to
figure out new operational processes. You need to capture the auditing and log data and often bring it
back to your on-premises environment for analysis. You might have to update, upgrade or deploy new
56
software and services. For example, if you have an existing multi-factor authentication solution, it might
not work seamlessly with your cloud-based identity service.
 Federated. Federation enables your organization to use their existing identities (such as those used to access your
internal corporate systems) to access systems and resources outside of the company network. For example, if you
use a cloud-based HR application on the internet, you can configure federation to enable employees to sign into
the application with their corporate credentials. You can federate with vendors or partners. Federating between
two organizations involves an agreement and software to enable your identities to become portable (and thus
usable based on who you federate with). Federation typically provides the best user experience because users
don’t have to remember additional passwords or manage additional identities.
Other key facts about third-party identity services include:
 Often, you still need an on-premises directory service.
 Many third-party identity services started off as solutions for web-based applications. They have since to cover
other use cases but still can’t be used for many day-to-day authentication scenarios. For example, most of them
can’t authenticate users to their corporate laptops.
 Third-party identity services often offer single sign-on, multi-factor authentication and meta-directory services
(pulling data from multiple directories into a single third-party directory).
 Many of the offerings are cloud-based, with a minimal on-premises footprint.
 Third-party identity services typically support SAML, OpenID Connect, WS-Federation, OAuth and WS-Trust.
5.4 Implement and manage authorization mechanisms
This section focuses on access control methods. To prepare for the exam, you should understand the core methods and
the differences between them.
 Role-based access control (RBAC). RBAC is a common access control method. For example, one role might be a
desktop technician. The role has rights to workstations, the anti-virus software and a software installation shared
folder. For instance, if a new desktop technician starts at your company, you simply add them to the role group
and they immediately have the same access as other desktop technicians. RBAC is a non-discretionary access
control method because there is no discretion — each role has what it has. RBAC is considered an industrystandard good practice and is in widespread use throughout organizations.
 Rule-based access control. Rule-based access control implements access control based on predefined rules. For
example, you might have a rule that permits read access to marketing data for anyone who is in the marketing
department, or a rule that permits only managers to print to a high-security printer. Rule-based access control
systems are often deployed to automate access management. Many rule-based systems can be used to implement
access dynamically. For example, you might have a rule that allows anybody in the New York office to access a file
server in New York. If a user tries to access the file server from another city, they will be denied access, but if they
travel to the New York office, access will be allowed. Rule-based access control methods simplify access control in
some scenarios. For example, imagine a set of rules based on department, title and location. If somebody transfers
57
to a new role or a new office location, their access is updated automatically. In particular, their old access goes
away automatically, addressing a major issue that plagues many organizations.
 Mandatory access control (MAC). MAC is a method to restrict access based on a person’s clearance and the data’s
classification or label. For example, a person with a Top Secret clearance can read a document classified as Top
Secret. The MAC method ensures confidentiality. MAC is not in widespread use but is considered to provide higher
security than DAC because individual users cannot change access.
 Discretionary access control (DAC). When you configure a shared folder on a Windows or Linux server, you use
DAC. You assign somebody specific rights to a volume, a folder or a file. Rights could include read-only, write,
execute, list and more. You have granular control over the rights, including whether the rights are inherited by child
objects (such as a folder inside another folder). DAC is flexible and easy. It is in widespread use. However, anybody
with rights to change permissions can alter the permissions. It is difficult to reconcile all the various permissions
throughout an organization. It can also be hard to determine all the assets that somebody has access to, because
DAC is very decentralized.
 Attribute-based access control (ABAC). Many organizations use attributes to store data about users, such as
their department, cost center, manager, location, employee number and date of hire. These attributes can be used
to automate authorization and to make it more secure. For example, you might configure authorization to allow
only users who have “Paris” as their office location to use the wireless network at your Paris office. Or you might
strengthen security for your HR folder by checking not only that users are members of a specific group, but also
that their department attribute is set to “HR”.
5.5 Manage the identity and access provisioning lifecycle
The identity lifecycle extends from the creation of users, to the provisioning of access, to the management of users, to the
deprovisioning of access or users. While there are several methods to manage this lifecycle, the following ordered steps
provide an overview of the typical implementation process:
1. A new user is hired at a company.
2. The HR department creates a new employee record in the human capital management (HCM) system, which is the
authoritative source for identity information such as legal name, address, title and manager.
3. The HCM syncs with the directory service. As part of the sync, any new users in HCM are provisioned in the directory
service.
4. The IT department populates additional attributes for the user in the directory service. For example, the users’
email address and role might be added.
5. The IT department performs maintenance tasks such as resetting the user’s password and changing the user’s
roles when they move to a new department.
58
6. The employee leaves the company. The HR department flags the user as terminated in the HCM, and the HCM
performs an immediate sync with the directory service. The directory service disables the user account to
temporarily remove access.
7. The IT department, after a specific period (such as 7 days), permanently deletes the user account and all associated
access.
Beyond these steps, there are additional processes involved in managing identity and access:
 User access review. You should perform periodic access reviews in which appropriate personnel attest that each
user has the appropriate rights and permissions. Does the user have only the access they need to perform their
job? Were all permissions granted through the company’s access request process? Is the granting of access
documented and available for review? You should also review the configuration of your identity service to ensure
it adheres to known good practices. You should review the directory service for stale objects (for example, user
accounts for employees who have left the company). The primary goal is to ensure that users have the access
permissions they need and nothing more. If a terminated user still has a valid user account, then you are in violation
of your primary goal.
 System account access review. System accounts are accounts that are not tied one-to-one to humans. They are
often used to run automated processes, jobs, and tasks. System accounts sometimes have elevated access. In fact,
it isn’t uncommon to find system accounts with the highest level of access (root or administrative access). System
accounts require review similar to user accounts. You need to find out if system accounts have the minimum level
of permissions required for what they are used for. And you need to be able to show the details — who provided
the access, the date it was granted, and what the permissions provide access to.