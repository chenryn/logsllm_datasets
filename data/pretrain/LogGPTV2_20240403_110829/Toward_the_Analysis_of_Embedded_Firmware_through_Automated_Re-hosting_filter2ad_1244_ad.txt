State Approximation of the ﬁrmware’s source of input. A
ﬁrmware that is entirely input-driven will have ﬁnite behavior
when the source of input is modeled, but unlike previous ap-
proaches, the ﬁrmware will continue to execute after the input
ends, but with no additional input-triggered behavior. We man-
ually veriﬁed that all of the ﬁrmware samples performed the
same overall behavior as was present during recording. That
is, even when no hardware was present, the ﬁrmware used our
generated models to function similarly to when it was running
on the actual hardware. In the last column, Fuzzing, we feed
automatically generated random data to the three ﬁrmware
examples whose execution is data-dependent, which is equiv-
alent to a naïve fuzzing approach. We accomplished this by
attaching a test harness in place of a serial port controller to
the system, which, instead of supplying modeled data, pro-
vides IO from the host system. This allows new input to be
supplied to the ﬁrmware program for exploring new function-
ality, while letting the rest of the PRETENDER-created models
function normally. As the table shows, PRETENDER success-
fully discovered new blocks, and, subsequently, revealed new
functionality of the ﬁrmware. In all cases, this extra functional-
ity actively interacted with the other peripherals models, such
as timers and system conﬁguration, not just the serial port.
While we discuss details of the hardware peripherals when
commenting on PRETENDER‘s behavior, our system is not
aware of the speciﬁc layout, names, or functionality of any of
the peripherals, aside from the test harness, and basic details
of the standardized interrupt controller coupled to the CPU.
Our evaluation demonstrates that PRETENDER is able
to successfully allow re-hosting, while enabling survivable
execution at the same time. As a result, analysis techniques
such as fuzzing could be parallelized and scaled. Rather than
simple random data, smarter fuzzing techniques [6] could be
used; however, we would like to emphasize that the goal in
this work is not speciﬁcally to ﬁnd new bugs in ﬁrmware via
fuzzing, but to enable dynamic analysis, which is necessary
to achieve this, and other security goals going forward.
In the remainder of this section, we will describe the hard-
ware platform and each example more in-depth, together with
the detailed re-hosting capabilities enabled by PRETENDER.
USENIX Association        22nd International Symposium on Research in Attacks, Intrusions and Defenses 143blink_led. This simple example blinks a Light Emitting
Diode (LED) every 0.5 seconds. While this example may
seem overly trivial, we use it to illustrate the basic level of
complexity inherent in any ﬁrmware compiled with ARM
mbed, and the basic behavior of timers. When booting even
the simplest ﬁrmware, the board performs a number of
initialization tasks, including using the Reset and Clock Con-
trol (RCC) to enable various clock devices, the management
of the on-board ﬂash controller, and the conﬁguration of
GPIO pins. The ﬁrmware performs various self-checks on
these peripherals during boot, and if they fail to report correct
status information, the ﬁrmware will hang in an inﬁnite loop.
While this can also be solved with simple replay, the ability
to execute this ﬁrmware indeﬁnitely can only be achieved
using modeling. Table 3 shows a memory trace acquired by
PRETENDER, and shows interactions with the timer (Table 3a)
and the ﬂash memory controller (Table 3b). PRETENDER
correctly identiﬁed the timer as an Increasing Model, and
our linear regression approach correctly resolved the rate at
which the timer increases. Whenever wait() is called, the
value of the timer is periodically checked and the ﬁrmware
continues execution only when it exceeds an ever increasing
amount. PRETENDER’s model can correctly produce the
required values indeﬁnitely. Furthermore, the various RCC
and other system conﬁguration registers checked by the timer
and GPIO code continue to produce the correct values, as
we correctly deduced their simpliﬁed storage, pattern, and
state-approximated values.
read_hyperterminal. This ﬁrmware receives external input
from a user or other device over a serial port, and turns an
LED on or off (“1” or “0”) based on the input. This example
shows diverging ﬁrmware execution based on different inputs,
as a user can send various possible inputs, in any order.
We stimulated the program by sending random “on” and
“off” commands over the serial port for the duration of the
recording. During our State Approximation-based execution,
we were able to identically reproduce the execution. After
the recorded input ends, the ﬁrmware continued to execute,
waiting for more data from the serial port. To make things
more interesting, we added a special backdoor to the ﬁrmware
code. More precisely, if a “2” is sent, the ﬁrmware will
prompt for a password, a common behavior for a hidden
backdoor functionality. This functionality is also vulnerable
to a buffer overﬂow when reading the password. In order to
explore code-paths of the program not seen during recording,
we use the serial port test harness described above, and
provide random bytes as input. Even though this backdoor
was not exercised during our recording, PRETENDER was
able to successfully rehost the ﬁrmware accurately enough so
that our emulated version can handle this input, including the
various timer and RCC interactions present in this section of
code. When fuzzing the rehosted ﬁrmware, we were also able
to trigger the implanted buffer overﬂow, leading to corruption
of the program counter, and crashing the emulator.
button_interrupt. This example makes use of interrupts that
are triggered by an external event (i.e., a physical button).
When the physical button is pressed, it causes an interrupt to
execute a callback that blinks an LED. During our recording,
we pressed this button at random intervals over a period
of two minutes. Our recording functionality receives the
interrupt events and forwards them to the emulator, which
in turn executed a callback that manipulated the GPIO
peripheral. We located the trigger for the GPIO interrupt
automatically (0x40010408 with value 0x002000). However,
as the timings for the individual button presses were random,
PRETENDER falls back to State Approximation for this
peripheral, still allowing indeﬁnite execution.
i2c_master. This example is modiﬁed from the original
ARM mbed example to support an AM2315 I2C temperature
sensor, and reports both the temperature and humidity in
the room. Unlike the previous examples, this one contains
multiple sources of interrupts; both the primary system timer
(TIM5) and the I2C bus produce interrupts, which causes
a conﬂict during recording. For this reason, we utilize the
iterative modeling approach described in Section 3. On
the ﬁrst execution, we obtain a recording of the timer’s
overﬂow-related interrupts, and convert this into a model.
On the second execution, PRETENDER identiﬁes that we
have an interrupt-enabled model of the timer already, and
uses it instead of the hardware. With this source of interrupts
removed from the hardware, we are able to clearly observe the
I2C bus’s interrupt patterns. This peripheral has multiple bits
that control interrupts, and through observing the peripheral,
we are able to locate the correct bit mask for the conﬁguration
register (0x720), such that these bits being enabled will cause
our timing-based interrupts to occur. While this bus is a
source of external input like our serial port, the input is only
generated in response to an action by the ﬁrmware. Therefore,
when the ﬁrmware writes the conﬁguration and data registers
for the I2C bus with the appropriate values to read from the
temperature sensor, the state of the peripheral will advance
or rewind to the appropriate time that this action occurred
during recording and the events will occur as expected.
Thermostat. In this example, we present a ﬁrmware that
would drive a typical thermostat, indicative of popular smart
thermostats (e.g., Google’s Nest). The ﬁrmware reads the
temperature and humidity from the AM2315 sensor used
above, but now it also accepts commands that poll for the
temperature and humidity. If the temperature is too far
from a preset temperature, it will enable a GPIO to trigger
a hypothetical air conditioning unit. However, in order to
showcase that peripheral models generated with PRETENDER
are not ﬁrmware-speciﬁc and can easily be transferred and
reused, we did not actually leverage a recorded peripheral
trace to build the models for this ﬁrmware.4 Instead, we reuse
4Note that we obtained a recording of the ﬁrmware’s execution
nevertheless to provide coverage information for comparison.
144          22nd International Symposium on Research in Attacks, Intrusions and DefensesUSENIX Associationthe models from the i2c_master example above, together
with our test harness to uncover new functionality offered by
the ﬁrmware. However, when we fuzzed the ﬁrmware using
our test harness, we were able to discover this previously
un-reached functionality, which directly results into an
increased coverage as shown in Table 2.
Rf_door_lock. This ﬁrmware uses a Grove Serial RF Pro
radio module connected to an Universal Asynchronous
Receiver/Transmitter (UART) peripheral, which accepts
multiple commands. Among others, those commands
include “ping” and “unlock,” which accept a password. If the
password is correct, the ﬁrmware activates a GPIO, which
unlocks a hypothetical mechanical lock. The functionality
of this ﬁrmware is indicative of those on popular IoT smart
locks. The radio module operates over a standard serial port.
It can be conﬁgured using various commands, and once
this is complete, it will simply transmit data received on the
conﬁgured channel to nearby radios. Similar to many small
embedded systems, this ﬁrmware provides a binary protocol
we can use to send commands via our hypothetical smart lock
client, including unlock (0xbb) and ping (0xdd). To interact
with this ﬁrmware during recording, we used another radio
device to send random valid and invalid lock codes and pings
to the ﬁrmware. This ﬁrmware has an additional functionality,
implemented as a backdoor that allows any radio user to
overwrite the lock code, by sending command 0xff, followed
by the desired code; this feature is also vulnerable to a buffer
overﬂow. As our radio uses a normal serial port, State Ap-
proximation works as expected here, but we cannot directly
apply our serial port model and feed it with random data to
reach additional block coverage. Instead, we need to correctly
format our inputs according to the format observed by the
radio’s responses during recording; it checks that the radio
responds correctly with “OK” to conﬁguration commands,
and will halt execution if it does not. This would be an
excellent starting point for a mutational fuzzer, but for the
sake of simplicity, we simply “mutate” by appending random
data to the end of the data held in our model, and replaying
it into our serial port. With this rudimentary fuzzer, we were
able to automatically discover the hidden functionality, and
even trigger the bug, causing QEMU to halt the execution.
5 Discussion and Future Work
We have shown that a virtual, interactive, and automatic
re-hosting solution is necessary to tackle the diversity in
IoT and embedded devices, and demonstrated the possibility
of such a system through PRETENDER. However, we fully
acknowledge that the problem of automated re-hosting is still
challenging to be completely solved. This section discusses
the assumptions and prerequisites laid out in Section 3, and
explores a number of the open problems and challenges that
must be overcome in order to apply re-hosting in any context
to production embedded devices.
Beyond ARM and MMIO. Currently, PRETENDER supports
ARM devices, for which an emulator for the instruction set
and any core peripherals (those which control code execution
directly) are available. This is a reasonable requirement, as
newer ARM designs, particularly the Cortex series, have
provided more rigid standards to manufacturers governing
memory layout and core components, such as the interrupt
controller. This still leaves vendors ample room to customize
every aspect of the remaining peripherals, however. While
we focus on the ARM architecture, additional architectures
can be added by providing a basic instruction set emulator,
creating the short interrupt recording stub, and providing
the needed physical memory access to the device to enable
recording. Additionally, other architectures use “port-mapped
IO” (PMIO) to perform their IO operations. While we do not
support this today, PRETENDER could be trivially extended
to record these operations instead. All other features of
PRETENDER are completely device and architecture-agnostic.
Performance. As PRETENDER involves sending peripheral
data and interrupts back and forth between the device and an
emulator, this adds some overhead to the ﬁrmware’s execution.
This is particularly noticeable with interrupts, as they tend to
be performance- and timing-critical, which could cause issues
during recording. This could be overcome through optimiza-
tion of the implementation, or through the use of purpose-built
hardware to interface with the device, as demonstrated in [7].
Obtaining Traces. The principal limitation on the applicabil-
ity of PRETENDER is not the models or modeling techniques,
but in fact the ability to obtain the data to generate them. First,
we must be able to obtain a memory data trace for MMIO. In
our case study, this is provided via the chip’s debug interface,
which simply provides access to read and write to any
memory address or CPU register. Any interface that also pro-
vides this functionality, whether it is an intended debugging
interface or one adversarially obtained through an exploit,
is sufﬁcient, and could be used to also extract interrupt traces
using only this basic requirement. Second, we must be able
to observe enough hardware functionality to generate a useful
model. This means that we require sufﬁcient code coverage
of those code paths that interface with the hardware. We can
explore new program behavior using PRETENDER models,
but will logically encounter incorrect behavior if these new
code paths exercise dramatically different functionality than
what has been recorded. For example, we can re-use our timer
model on a completely new ﬁrmware that also conﬁgures the
timer in the same way (e.g., to count up), but not one with
a different conﬁguration with vastly different behavior. In
our case studies, we utilize human and automated stimulation
to achieve maximal coverage during recording, but of course,
in the general case, this is an open problem.
Additionally, there are a few aspects of many chips that we
simply cannot model correctly with this visibility, particularly
USENIX Association        22nd International Symposium on Research in Attacks, Intrusions and Defenses 145Direct Memory Access (DMA) controllers, whose accesses
to memory are initiated by the hardware itself, and therefore
not visible externally by any conventional means. These are
particularly common in higher-speed peripherals, including
USB, networking, storage buses, and those common to
modern CPUs designed for general-purpose computing. We
are unaware of any CPU that allows introspection into DMA
activity; however, insight into this problem may be gained
by instead observing the ﬁrmware’s code to locate DMA
operations.
External Peripherals. External peripherals remain one of
the most complex parts of re-hosting ﬁrmware. PRETENDER
handles external peripherals, such as the I2C temperature
sensor, and RF hardware examples, but does so by modeling
the on-chip peripheral and its associated external device
as a composite. This makes our models speciﬁc to a given
physical hardware conﬁguration. Ideally, this would not be
the case; for example, a common serial port can be thought of
a simple bi-directional channel over which the CPU and the
external device communicate, and we could develop models
for each external serial-based peripheral using this channel
alone, and reuse these on different host CPUs. However, these
ports and bus controllers have their own internal hardware,
which follows its own state machine, that responds to the
data transferred to and from the peripheral. A particular
complication is that, from the point-of-view of MMIO, it is
impossible to reliably distinguish values read from control
or conﬁguration registers from data coming from outside the
CPU. Separating these two intertwined systems remains an
important, open problem.
Heavily-stateful Peripherals. Not all peripherals, particu-
larly external ones, are well-modeled by a state machine. As
we discussed in Section 3, we make some assumptions to
build a state machine approximation of devices which require
it, but this is by no means guaranteed to be correct. One
notable case where this will fail is external storage devices,
such as SPI-based ﬂash or EEPROM chips. While we could
reconstruct much of the trafﬁc to and from these chips seen
during recording, reading and writing arbitrary data, as could
be possible through a modeled serial port used to provide
arbitrary input, will of course not succeed. Fortunately, this
problem may be dramatically simpliﬁed through high-level
modeling, or through the separation of external peripherals
from their corresponding internal peripherals, as the behavior
of a device as storage may become more apparent.
Adding Abstractions. While a system that is abstraction-less
is the most ideal solution to the re-hosting problem, modeling
using a higher-level abstraction, such as libraries or an
OS, remains an important way to make re-hosting more
robust. Many ﬁrmware images, including the ones used in
this work, were written with such libraries, which perform
most hardware interactions on behalf of the author’s code.
If located, these would also provide a convenient means of
dealing with the above problem of external peripherals and
DMA, as they provide the ﬁrmware author a high-level way of
communicating with peripherals, which can then be exploited
for modeling. However, for ﬁrmware without an operating
system, which is typically distributed as a binary blob, this
reduces to the problem of identifying library functions in
statically-compiled, stripped binary programs, a well-studied
but yet-unsolved problem. Furthermore, any code which
violates the abstraction by controlling hardware directly still
requires the use of a technique like PRETENDER. This is
found even in our simple examples, where all accesses to the
GPIO peripheral were aggressively in-lined by the compiler,
such that no library call or other abstraction remained.
6 Conclusion
In this work, we explored the area of ﬁrmware re-hosting, and
showed that an entirely new class of approaches can enable
scalable, thorough program analysis of ﬁrmware. As a ﬁrst
step toward achieving this goal, we presented PRETENDER,
which generates models of peripherals automatically from
recordings of the original hardware. We demonstrated the
accuracy and interactivity of these models, by evaluating
PRETENDER on multiple ﬁrmware samples across different
hardware platforms. While there are many open problems
remaining before this technique can be generally applicable,
we believe this work shows that automated re-hosting is both
possible and necessary to ensure that increasingly-important
ﬁrmware does not go un-analyzed.
Acknowledgements
Sandia National Laboratories is a multimission laboratory
managed and operated by National Technology & Engineer-
ing Solutions of Sandia, LLC, a wholly owned subsidiary