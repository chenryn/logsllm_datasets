分析“DebugRVA”特征：
    %matplotlib inline
    fig,ax = plt.subplots()
    x = malicious['DebugRVA']
    y = malicious['clean']
    ax.scatter(x,y,color='r',label='Malicious')
    x1 = clean['DebugRVA']
    y1 = clean['clean']
    ax.scatter(x1,y1,color='b',label='Cleanfiles')
    ax.legend(loc="right")
绘制的图表如下;
分析“ExportSize”特征：
    %matplotlib inline
    fig,ax = plt.subplots()
    x = malicious['ExportSize']
    y = malicious['clean']
    ax.scatter(x,y,color='r',label='Malicious')
    x1 = clean['ExportSize']
    y1 = clean['clean']
    ax.scatter(x1,y1,color='b',label='Cleanfiles')
    ax.legend(loc="right")
绘制的图表如下：
我们所绘制的图表越多，我们对数据的理解也越深，对数据的整体分布情况了解也越深。目前我们手上的数据集维度很低，那么问题来了，如果我们的数据集是高维度的，我们该如何处理？有很多技术可以降低数据集的维度，使“重要”特征更为突出。比如PCA和t-SNE算法可以将数据集绘制成三维甚至二维图像。
**五、机器学习在恶意软件检测中的应用**
前面我们已经做了足够多的统计工作，但在机器学习方面我们只做了一部分工作，如收集数据、清理及准备训练数据。在开始机器学习前，我们先要完成以下工作。
1、首先，我们需要将两部分数据集（Dataset）并为一个数据框（DataFrame）。
2、其次，我们需要数据框分为两部分，第一部分用于训练，第二部分用于测试。
3、接下来，我们将使用几个机器学习算法，看一下结果如何。
**（一）数据集准备**
    import pandas as pd
    dataset = pd.read_csv('malware-dataset.csv')
    """
    Add this points dataset holds our data
    Great let's split it into train/test and fix a random seed to keep our predictions constant
    """
    import numpy as np
    from sklearn.model_selection import train_test_split
    from sklearn.metrics import confusion_matrix
    #let's import 4 algorithms we would like to test
    #neural networks
    from sklearn.preprocessing import StandardScaler
    from sklearn.neural_network import MLPClassifier
    #random forests
    from sklearn.ensemble import RandomForestClassifier
    """
    Let's prepare our data
    """
    state = np.random.randint(100)
    X = dataset.drop('clean',axis = 1)
    y = dataset['clean']
    X = np.asarray(X)
    y = np.asarray(y)
    X = X[:,1:]
    X_train,X_test,y_train,y_test = train_test_split(X,y,test_size = 0.1,random_state=0)
现在我们手上有了4个大型矩阵，其中X_train和y_train将用于训练不同的分类器，X_test用于标签预测，y_test用于指标衡量。事实上，我们将比较X_test和y_test的预测值，以便分析算法的具体实现。
**（二）算法选择**
首先来看看“Random Forests”（随机森林）算法，该算法是“决策树”（Decision
Trees）算法的一种集成算法，核心思想是在训练期间内创建大量分类决策树，输出的分类即为样本分类的基础模型。随机森林算法在解决二进制文件分类问题上非常有效。
    #let's start with random forests
    #we initiate the classifier
    clf1 = RandomForestClassifier()
    #training
    clf1.fit(X_train,y_train)
    #prediction labels for X_test
    y_pred=clf1.predict(X_test)
    #metrics evaluation
    """
    tn = True Negative a correct prediction clean predicted as clean
    fp = False Positive a false alarm clean predicted as malicious
    tp = True Positive a correct prediction (malicious)
    fn = False Negative a malicious label predicted as clean
    """
    tn, fp, fn, tp = confusion_matrix(y_test, y_pred).ravel()
    print "TN = ",tn
    print "TP = ",tp
    print "FP = ",fp
    print "FN = ",fn
程序输出为：
    TN = 697
    TP = 745
    FP = 6
    FN = 4
根据处理结果，在没有进行参数微调和修改的情况下，我们只有6个假阳性和4个假阴性误判，这个结果相当不错。我们可以正确判断697个正常文件以及745个恶意软件，从结果上来看，我们的小型反病毒引擎效果还可以。
接下来我们试一下另一个分类器，我们建立一个简单的神经网络，看看它对随机分割的处理效果如何。
根据维基百科的词条解释：
多层感知器（multilayer
perceptron，MLP）是一种前馈人工神经网络模型，它将输入数据集映射为一组适当的输出集。MLP由有向图中的多层节点组成，每层节点都与下一层节点完全相连。除了输入节点之外，每个节点都是具有非线性激活功能的神经元（或处理单元）。MLP使用了反向传播（back
propagation）这种监督学习技术（supervised learning
technique）来训练神经网络。MLP是标准线性感知器的修改版，可以用来区分不能线性分离的那些数据。
从上述定义我们可知，MLP是感知器的一种广义形式，也是深度学习方法的基本模型之一，可以用于处理广度和深度网络。
    #our usual split
    X_train,X_test,y_train,y_test = train_test_split(X,y,test_size = 0.3,random_state=0)
    #This is a special process called feature engineering where we transform our data into the same scale for better predictions
    scaler = StandardScaler()
    scaler.fit(X_train)
    X_train = scaler.transform(X_train)
    X_test = scaler.transform(X_test)
    #Here we build a Multi Layer Perceptron of 12 Layers for 12 Features  you can use more if you want but it will turn into a complex zoo
    mlp = MLPClassifier(hidden_layer_sizes=(12,12,12,12,12,12))
    #Training the MLP on our data
    mlp.fit(X_train,y_train)
    predictions = mlp.predict(X_test)
    #evaluating our classifier
    tn, fp, fn, tp = confusion_matrix(y_test,predictions).ravel()
    print "TN = ",tn
    print "TP = ",tp
    print "FP = ",fp
    print "FN = ",fn
程序输出为：
    TN = 695
    TP = 731
    FP = 8
    FN = 18
看上去强大的神经网络并不能够识别样本数据集中的18个恶意软件（假阴性），这是个很严重的问题，试想一下如果你的杀毒软件将勒索软件误判为正常程序，会对你造成什么影响？但不用过于悲观，因为我们这个神经网络还是非常原始的，实际上我们可以让它更为准确，但这已经超出了本文的讨论范畴。
**六、总结**
本文只是一篇入门文章，我想向读者表达的是，如果我们能够接受99%的识别率，那么恶意软件鉴别并不是一个难以解决的问题。当然，现实生活中，构建和部署机器学习是一件费时费事的工作，需要大量知识和大量数据。本文仅仅是机器学习和人工智能（AI）如何应用于恶意软件识别的一篇简单文章，希望能给读者提供学习知识的乐趣。
**七、参考资料**
1、Andrew NG的机器学习课程。
2、 。你可以使用Python在7周内变成一个深度学习的实践者。
3、Harstie写的《统计学习要素》这本书。偏向于理论但内容非常深刻。
4、
。比较有深度的一份文献资料。