9.18 h
4.16 h
27.61 h
21.54 h
3.29 h
42.81 h
0.06 h
>48.00 h
5.63 h
1.92 h
>48.00 h
>48.00 h
0.03 h
>48.00 h
0.01 h
26.84 h
0.08 h
>48.00 h
0.11 h
3.56 h
>48.00 h
>48.00 h
0.47 h
>48.00 h
0.01 h
39.12 h
1.13 h
0.10 h
41.83 h
Syzkaller
>48.00 h
8.68 h
0.29 h
16.33 h
6.11 h
9.82 h
0.39 h
17.89 h
>48.00 h
0.18 h
>48.00 h
0.17 h
2.03 h
8.87 h
>48.00 h
0.14 h
1.65 h
0.42 h
SemFuzz
3.31 h
8.17 h
0.10 h
11.64 h
12.32 h
4.72 h
6.97 h
31.96 h
29.35 h
9.44 h
0.04 h
5.51 h
16.53 h
38.29 h
23.16 h
17.05 h
10.91 h
7.76 h
such relationship. (cid:140)e results show that 85.59% of the identi(cid:128)ed
vulnerable functions have relation to the vulnerable code. For the
“critical variables”, we evaluated our NLP tool (for extracting the
variables) by manually comparing the descriptions with the vari-
ables identi(cid:128)ed. (cid:140)e results show that the precision is 82.5% and the
recall is 86.84%, which means our NLP-based approach can provide
precise guidance of the critical variables.
To measure the precision and recall of “system calls”, for each
vulnerability, we (cid:128)rst manually analyze its CVE and git log de-
scriptions to extract the necessary system calls (for triggering the
vulnerability) as the ground truth (S1). (cid:140)en we compare whether
the retrieved “system calls” by our NLP tool (S2) consist with S1.
For a system call in S2 but not in S1, we treat it as a false positive. If
a system call is correctly identi(cid:128)ed but with wrong parameter value,
we also treat it as a false positive. On the other hand, if a system call
is in S1 but not in S2, we treat it as a false negative. Also, if a system
call is correctly identi(cid:128)ed but the parameter value speci(cid:128)ed in S1
is not retrieved in S2, we treat it as a false negative. Based on this,
the precision is 84.34% and recall is 95.89%. A(cid:137)er further analyzing
the descriptions, we found that the main reason of false positive is
that the names of some system calls are ambiguous. For example,
CVE-2016-7915 says “by connecting a device”. SemFuzz mistakes
the word “connecting” as a connect system call. However, the
verb “connect” here actually does not indicate the connect system
call since the object of the verb is “a device”, which is irrelevant
with network communication. (cid:140)e main reason of false negative is
the missing of connection between the value of parameter and its
description. For example, CVE-2015-8539 says “via cra(cid:137)ed keyctl
commands that negatively instantiate a key”. From the semantics
of “negatively instantiate a key”, an experienced analyst is able
to infer that the value of the parameter operation in the system
Session J2:  Fun with FuzzingCCS’17, October 30-November 3, 2017, Dallas, TX, USA2148(a) Impact of “vulnerable functions”.
(b) Impact of “critical variables”.
(c) Impact of “system calls”.
Figure 7: Impact of di(cid:130)erent guidances.
call keyctl is KEYCTL NEGATE. SemFuzz does not build the con-
nection between the keyword KEYCTL NEGATE and its description
“negatively instantiate a key”, which could be identi(cid:128)ed once the
description is parsed in the future.
6.3 Performance
We measured the performance of SemFuzz and compared it with
the o(cid:129)cial version of Syzkaller [4], a state-of-art Linux system call
fuzzer. (cid:140)e default con(cid:128)guration of Syzkaller is to randomly select
system calls to test. To be fair, for each vulnerability, we con(cid:128)g-
ure Syzkaller to test the system calls correlated to the vulnerable
subsystem. For example, if the vulnerability is in the networking
subsystem, we enable Syzkaller to test all network-related system
calls.
Table 3 gives the results. For the 18 CVEs, the average time for
SemFuzz to generate a PoC exploit is 13.2 hours. As a compassion,
Syzkaller can only generate exploits for 7 CVEs. Further, we ana-
lyzed the time consumption in each stage in the fuzzing process.
(cid:140)e time for SemFuzz to extract information and prepare for the
(cid:128)rst seed input is less than 0.1 seconds, which is negligible com-
pared to the later fuzzing process. For Syzkaller, it does not need
this step. (cid:140)en we measured the time needed to generate the (cid:128)rst
input that could let the execution reach the vulnerable function. On
average, it takes SemFuzz 1.8 hours in this step. Syzkaller can only
generate such inputs for 14 CVEs within the time limit, and the
average time is 5.2 hours, which is 1.9 times slower than SemFuzz.
(cid:140)e last step is to mutate the input to trigger the vulnerabilities,
which takes SemFuzz 13.2 hours. Still, Syzkaller can only handle 7
vulnerabilities with the average time of 33.9 hours (1.6 times slower
than SemFuzz). From the analysis, we found our coarse-level and
(cid:128)ne-grained mutation strategies are very helpful, mainly due to the
semantic information from CVEs and git logs.
6.4 Findings
We explored to understand the relationship between guidances and
the PoC exploits. To this end, we studied the existence of guidances
and its impact on the automatic PoC exploit generation of SemFuzz.
(cid:140)is understanding helps to release a CVE and git log without
facilitating potential a(cid:138)ackers to automatically generate exploits.
We also found two unknown vulnerabilities in the fuzzing process,
which have already been con(cid:128)rmed by the Linux kernel developer
group.
Guidances and the exploits. For the (cid:128)ve guidances, “a(cid:130)ected
version” and “vulnerability type” can always be found in CVE and
git log. Hence, we focus on the rest three guidances (i.e., the vulner-
able functions, critical variables and system calls). Figure 7 (a)-(c)
shows the impact of each guidance.
Figure 7(a) shows how the “vulnerable functions” a(cid:130)ects the ex-
ploit generation. Interestingly, more vulnerable functions decrease
the possibility to generate a vulnerability. Note that vulnerable
functions are those touched by a patch. However, likely only one
of them is exploitable. In other cases, these functions may need to
be invoked in a certain order to reach the vulnerability. Either way,
the problem here is more complicated (than a single vulnerable
function), making the underlying vulnerability harder to trigger.
For the 18 CVEs from which SemFuzz generates PoC exploits, 13 of
them have only one vulnerable function. (cid:140)e mutation processes
of them are more concentrated.
To summarize, the three guidances (“vulnerable functions”, “crit-
ical variables” and “system calls”) are necessary for generating an
exploit. To release a CVE in a way which is less likely for a(cid:138)ackers
to generate exploits, one idea is to decrease the number of guid-
ances, such as only disclosing the related system calls but not the
speci(cid:128)c values for triggering the vulnerability. Another idea is, on
the contrary, to increase the number of “vulnerable functions” and
“critical variables” by mentioning more related functions and vari-
ables in the description, which can confuse a(cid:138)ackers and further
to impede the automatic exploit generation. Considering CVE is
Figure 7(b) demonstrates how the “critical variables” a(cid:130)ects the
exploit generation. In the (cid:128)ve cases (i.e., CVE-2015-5706, CVE-
2016-0728, CVE-2016-6213, CVE-2016-8646, and CVE-2016-9555),
when the critical variable is missing, the PoC exploits can still be
generated. When there is only one critical variable, the number of
generated PoC exploits is maximized. More critical variables will
decrease the number of PoC exploits, similar to our observations
of “vulnerable functions”.
Figure 7(c) gives the ratio of successful exploits using only system
calls and using both system calls and the values of their parameters.
From the (cid:128)gure, we (cid:128)nd that the success rate is higher by using both
system calls and the values of their parameters than by only using
the system calls alone. We further compare the time to generate
PoC exploits between the two situations, and (cid:128)nd that using system
calls together with values of parameters are faster, mainly due to
that there is no need to mutate the parameters to (cid:128)nd the correct
parameter values.
Session J2:  Fun with FuzzingCCS’17, October 30-November 3, 2017, Dallas, TX, USA21490 x32ul , 0 xfffffffffffffffful , 0 x0ul );
1 syscall ( __NR_mmap , 0 x20000000ul , 0 xf000ul , 0 x3ul ,
2
3 *( uint32_t *) 0 x20000000 = ( uint32_t )0 x6 ;
4 *( uint32_t *) 0 x20000004 = ( uint32_t )0 x4 ;
5 *( uint32_t *) 0 x20000008 = ( uint32_t )0 x54d1 ;
6 *( uint32_t *) 0 x2000000c = ( uint32_t )0 xc93 ;
7 syscall ( __NR_bpf , 0 x0ul , 0 x20000000 , 0 x10ul ,
8
0, 0, 0) ;
0 x32ul , 0 xfffffffffffffffful , 0 x0ul );
(a) (cid:135)e sequence of system calls to trigger CVE-2016-4794.
1 syscall ( __NR_mmap , 0 x20000000ul , 0 x2000ul , 0 x3ul ,
2
3 *( uint32_t *) 0 x20000000 = ( uint32_t )0 x6 );
4 *( uint32_t *) 0 x20000004 = ( uint32_t )0 x4 );
5 *( uint32_t *) 0 x20000008 = ( uint32_t )0 x7 );
6 *( uint32_t *) 0 x2000000c = ( uint32_t )0 x1001000 );
7 *( uint32_t *) 0 x20000010 = ( uint32_t )0 x0 );
8 syscall ( __NR_bpf , 0 x0ul , 0 x20000000ul , 0 x14ul );
(b) (cid:135)e sequence of system calls to trigger the zero-day vulnera-
bility.
Figure 8: (cid:135)e proof-of-concept exploits of CVE-2016-4794
and the zero-day vulnerability.
designed to identify and catalog vulnerabilities in so(cid:137)ware [23],
such mitigation may not a(cid:130)ect the usefulness of CVE descriptions.
Unknown vulnerabilities. SemFuzz found one zero-day vulnera-
bility and one undisclosed vulnerability when fuzzing related ones.
For the zero-day vulnerability, it appears around the known (cid:131)aws.
For the undisclosed vulnerability, we veri(cid:128)ed that they are similar
problems inside equivalent components. We show them in the
case study (Section 6.5). (cid:140)is demonstrates the possibility of using
SemFuzz to help (cid:128)nd similar but unknown vulnerabilities in the
process of fuzzing known vulnerabilities.
6.5 Case Study
We have demonstrated how SemFuzz works using CVE-2017-6347
as an example in previous sections. In this subsection, we will
demonstrate the generation of PoC exploits for a zero-day and an
undisclosed vulnerabilities, and their connections with the known
vulnerabilities.
(cid:135)e zero-day vulnerability. We discovered a zero-day vulner-
ability in the fuzzing process of CVE-2016-4794, a use-a(cid:137)er-free
vulnerability in the Berkeley Packet Filter (bpf) subsystem. From
the CVE description, we can learn that the vulnerability could be
triggered using the mmap and bpf system calls. From the corre-
sponding patch code, we found multiple functions that are patched.
By (cid:128)ltering out those functions not mentioned in CVE or git log, we
got two vulnerable functions: pcpu need to extend and pcpu alloc.
In the fuzzing process, SemFuzz continuously generates system
call sequences that can let the execution run towards pcpu alloc
or pcpu need to extend, and (cid:128)nally trigger the vulnerability. In a
fuzzing instance, we found that a mutated system call sequence
enters the pcpu need to extend function and calls the free percpu
function, which makes CPU stall (in dead lock status). We discov-
ered this new vulnerability in Linux kernel version 4.6. We further
checked other versions of Linux kernel and found this new vul-
nerability still exists in the latest Linux kernel version 4.11. We
reported this vulnerability to the Linux kernel developer group and
they con(cid:128)rmed our (cid:128)nding [7].
Figure 8(a) presents the PoC exploit of CVE-2016-4794 and Fig-
ure 8(b) presents the PoC exploit of the zero-day vulnerability. We
can see that they share the same system call sequence (i.e., mmap
and bpf) with di(cid:130)erent parameter values (e.g., the 2nd parameter
of bpf is (cid:128)lled with di(cid:130)erent values). From this case study, we (cid:128)nd
that new bugs tend to appear around the known (cid:131)aws and can be