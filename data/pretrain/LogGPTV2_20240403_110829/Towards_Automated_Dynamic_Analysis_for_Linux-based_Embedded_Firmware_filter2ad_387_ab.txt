was utilizing the third party jefferson and sasquatch
extraction tools for JFFS2 and SquashFS ﬁlesystems, re-
spectively, which can be difﬁcult to extract. This is because the
userspace extraction utilities provided by ﬁlesystem developers,
jffsdump and unsquashfs, frequently fail to extract real-
world ﬁlesystems of these types.
In part, this is because these user-mode extraction utilities
are rarely updated and can lag behind the in-kernel ﬁlesystem
code in terms of ﬁlesystem support. More importantly, many
device manufacturers have modiﬁed existing compression
algorithms or even implemented new compression algorithms
for these ﬁlesystems, making their variants incompatible with
other implementations.
To resolve this problem, other ﬁrmware extraction utilities
such as bat and firmware-mod-kit rely on a set of
heuristics and precompiled unsquashfs binaries gathered
from the GPL source code releases for various routers. However,
this approach is incomplete and ineffective, as maintainers for
these extraction utilities need to manually compile new binaries
and implement the appropriate heuristics.
2http://refspecs.linuxfoundation.org/FHS_3.0/fhs-3.0.pdf
6
In contrast, we utilize tools that are speciﬁcally written
to extract the contents of these modiﬁed ﬁlesystems from
userspace. sasquatch, which was developed by the author
of binwalk,
is designed to support as many modiﬁed
SquashFS implementations as possible by adapting to changes
in compression algorithms, and recognizing the structure of
SquashFS ﬁlesystems instead of speciﬁc magic strings.
During this process, we identiﬁed a number of bugs and
made improvements to both binwalk and jefferson,
which were submitted to the respective upstream projects. The
majority of our submitted patches have already been merged
into the ofﬁcial release, and some are still pending maintainer
review.
Although these improvements contribute to our success
rates, not all ﬁrmware images can be extracted by our current
implementation. For example, some vendors only distribute
partial ﬁrmware images for their products, preventing us from
reconstructing the root ﬁlesystem. Other vendors distribute
ﬁrmware images with multiple embedded or partial ﬁlesystems,
which require additional logic to reassemble partial ﬁlesystems,
or ﬁlesystems mounted on top of one another. Furthermore,
other vendors distribute encrypted ﬁrmware images, ﬁrmware
images within a binary updater executable, non-Linux-based
ﬁrmware images, or Linux-based ﬁrmware images with un-
recognized ﬁlesystems, all of which we do not support. As a
result, these images are categorized as unknown in Table II.
C. Emulation
1) NVRAM: From a cursory inspection, at least 52.6% of
all extracted ﬁrmware images (4,992 out of 9,486) access a
hardware non-volatile memory (NVRAM) using a shared library
named libnvram.so to persist device-speciﬁc conﬁguration
parameters. For routers and other networking equipment,
this includes settings shown on the web-based conﬁguration
interface, which can include wireless network settings, network
adapter MAC addresses, and access credentials for the web
interface.
and
Since this peripheral
is typically abstracted as a key-
value store, we developed a custom userspace library that
intercepts calls to NVRAM-related functions, such as const
char *nvram_get(const char* key)
int
nvram_set(const char* key, char *val), which
are respectively used to get and set parameters from NVRAM.
By modifying the system environment passed by the kernel
to the init binary to include this library via LD_PRELOAD,
we ensure that all userspace processes inherit
the same
environment, since they are child processes of init. A
temporary mountpoint on the ﬁlesystem is used as the root of
our key-value store, allowing us to reimplement this interface
in userspace without emulating hardware-speciﬁc peripherals.
During testing, a common challenge we encountered was
that our dataset of ﬁrmware images was compiled with different
C toolchains, some of which we do not have access to. As
shown in §V-A, this diversity was problematic for our shared
library, since all dynamically-loaded ELF binaries must specify
the path to the dynamic loader for which they were compiled,
as well as the ﬁlenames of dynamically-loaded dependencies,
which were different depending on the system.
Initially, we attempted to resolve this problem by compiling
our NVRAM implementation statically. However, we soon
discovered that not only did these C runtime libraries use
incompatible implementations of built-in C features such as
thread-local storage, but they were also not built as position-
independent code (PIC) to support static compilation. As a
result, we could neither build our NVRAM library statically
against a single C runtime library, nor could we dynamically
build our shared library speciﬁcally for each ﬁrmware image.
Fortunately, ELF dynamic loaders for Linux systems support
lazy linking, which allows the resolution of external function
symbols to be delayed until usage. Typically, the compiler
implements this by placing stub code within the Procedure
Linkage Table (PLT) that initializes the Global Offset Table
(GOT) entry for a given imported function when the function
is called for the ﬁrst time.
Since the ELF loader uses a global symbol lookup scope
during resolution [12], we were able to compile our NVRAM
library with the -nostdlib compiler ﬂag, delaying resolution
of external symbols until after the calling process had already
loaded the system C runtime library. Effectively, this allowed
our shared library to appear as a static binary while dynamically
utilizing functions made available by the calling process,
including the standard C runtime library.
Another challenge we encountered was the fact that our
NVRAM implementation was not useful without a set of system-
speciﬁc default values. Unfortunately, these values are normally
embedded within the hardware NVRAM peripheral at the
factory, and having a hardware dependency for our system
would preclude our goal of performing a large-scale analysis.
Simply returning NULL or the empty string was also insufﬁcient,
as this would eventually cause the system to crash at startup or
enter an erroneous state, e.g., by calling itoa() or strcpy()
on a NULL pointer, or inserting bad arguments to program
invocations such as ifconfig. Initially, we attempted to
hardcode a set of default NVRAM values into our library, but
we soon discovered that this was infeasible since an average
ﬁrmware image can reference hundreds of NVRAM keys at
startup.
After manually examining ﬁrmware images that failed to
emulate, we realized that most images embedded a set of default
NVRAM values into a few common locations, e.g., within a text
ﬁle named /etc/nvram.default, /etc/nvram.conf,
or /var/etc/nvram.default. Others would export a
symbol router_defaults or Nvrams of type char
*[] within built-in libraries such as libnvram.so or
libshared.so. We were able to access these symbols by
declaring them as weak references and checking if they were
initialized, since we could not utilize libdl.so (not typically
loaded by the calling executable) or leave them as regular
references (external data symbol resolution is not lazy).
Unfortunately, our NVRAM emulation implementation does
not work for all ﬁrmware images. This can be due to a
wide variety of reasons. For example, some images may call
NVRAM-related functions that we do not emulate; others
may expect different semantics from these emulated functions
in terms of parameter passing, return values, or caller/callee
memory allocation; some others may implement NVRAM as a
custom data structure on a MTD partition, which we currently
cannot initialize to a valid state. We believe failures in NVRAM
emulation are likely to be a signiﬁcant contributor to the drop
in emulation progress between columns two and three of Fig. 2.
As an inconvenient truth, improving the emulation success
rates or ﬁxing network conﬁguration detection for ﬁrmware
images from, e.g., Tomato by Shibby, is a manual process. It
requires an analyst to manually examine system logs in order
to identify and classify emulation failures based on root cause,
then make the changes that are necessary to support these
images. Oftentimes, this may be a cyclic process, as there can
be multiple causes of emulation failure.
2) Kernel: As mentioned in §II-B, we do not utilize the
extracted kernel, but instead replace it with our own custom
pre-built kernels for the ARM and MIPS architectures, which
together account for 90.8% of our dataset.
During the kernel compilation process, we implement our
analysis within our custom Linux kernel module that is used to
aid debugging and emulating the original system environment.
By hooking 20 system calls using the kernel dynamic probes
(kprobes) framework, we are able to intercept calls that
alter the execution environment. This includes operations
such as assigning MAC addresses, creating a network bridge,
rebooting the system, and executing a program, all of which are
monitored by our framework to properly conﬁgure the emulated
networking environment. This functionality can also be used to
provide automatic conﬁrmation of vulnerabilities, especially in
conjunction with predeﬁned poison values (e.g., 0xDEADBEEF,
0x41414141) that should never appear in system calls.
Since some ﬁrmware images expect certain ﬁlesystems
to be mounted at boot, e.g., /dev or /proc, we use the
rdinit kernel parameter to run a custom script that initializes
these ﬁlesystems before init is executed. Additionally, we
load the nandsim kernel module at startup, which emulates
the memory technology device (MTD) partitions accessed
via /dev/mtdX that are frequently used on these embedded
devices.
In addition, since our emulation of NVRAM is volatile, we
prohibit the guest from rebooting the system and emulate this
behavior by restarting the init process. This kernel module
also emulates vendor-speciﬁc or device-speciﬁc interfaces, such
as custom device nodes, procfs entries, or non-standard
IOCTL’s by returning success with a generic stub.
For the MIPS architecture, we build separate kernels for
big-endian and little-endian systems, both targeting the MIPS
Malta development platform, which is well-supported by both
QEMU and the Linux kernel. In fact, this platform even supports
MIPS 64-bit code, although we have not implemented support
for it since it comprises less than 0.6% of our dataset. This
kernel is currently at version 2.6.32.68, which is a long-term
support release, and includes our backported commits for full
kprobes support.
For the ARM architecture, we support only little-endian
systems, since big-endian systems comprise less than 1.1% of
our dataset and are unsupported by mainline QEMU3. We target
the ARM Versatile Express development platform, which uses
3https://lists.gnu.org/archive/html/qemu-devel/2014-06/msg03257.html
7
an emulated Cortex-A9 (ARMv7-A) processor. This platform
offers better hardware compatibility than the standard ARM
Versatile Platform Baseboard development board, which uses an
emulated ARM926 (ARMv5) processor that does not support
newer ARM instructions found in some ﬁrmware images.
Unfortunately, this platform supports only up to one emulated
Ethernet device due to the lack of an emulated PCI bus in
QEMU. In the future, we plan to switch to the ARM Virtual
Machine platform, which supports multiple virtualized devices
via VirtIO, but this will require a kernel upgrade from 3.10.92
to 4.1.12, a newer long-term support release that fully supports
VirtIO functionality on ARM.
As the above discussion suggests, adding support for a
new hardware architecture, such as x86, is not an automated
process. In particular, selecting a supported hardware platform
in QEMU can be tricky, as support for either VirtIO or an
emulated PCI bus is typically required to attach more than
one virtual networking interface. At the same time, the chosen
hardware platform in QEMU must be supported by the selected
version of the Linux kernel, which needs to be sufﬁciently
up-to-date for kprobes and VirtIO support. Developing a
compatible conﬁguration for the kernel can also be tricky, as
we need to enable all the features that off-the-shelf ﬁrmware
relies on. Furthermore, we need to rebase our custom kernel
module implementation to the chosen kernel version, which
may require manual compatibility ﬁxes to account for internal
kernel API changes.
3) System Conﬁguration: Since we are mainly interested in
ﬁrmware that implements network functionality, such as routers,
network attached storage, or surveillance equipment, we need to
make device-speciﬁc changes to the emulated hardware. Ideally,
all network devices would automatically conﬁgure themselves
via the DHCP protocol. Unfortunately, certain network devices,
especially routers and some managed switches, are designed
to provide DHCP services to other devices. Additionally, these
devices tend to have different numbers of network interfaces;
for example typical consumer routers have at least four Ethernet
interfaces, in comparison to just one on an IP camera.
Our system initially executes each emulated ﬁrmware
in a “learning” phase for 60 seconds. In this phase, the
emulator is conﬁgured with the default hardware peripherals
for the emulated target platform (MIPS Malta or ARM Virtual
Express), plus up to four emulated network adapters, using
the built-in socket networking backend within QEMU. During
this time, information is gathered about the expected network
conﬁguration. In particular, we keep track of IP addresses that
are assigned to network interfaces, as well as the presence
of IEEE 802.1d bridges used to aggregate multiple network
interfaces. Additionally, we check for tagging and separation
of Ethernet frames using IEEE 802.1Q VLANs, which is used
by some routers to segregate wireless guest networks from the
physical network.
This information is then fed back into our emulation
framework to develop a more accurate QEMU conﬁguration
for this system. We instantiate a network tap (TAP) device on
the host, which is associated with one of the emulated network
interfaces within the ﬁrmware (e.g., eth0) that correspond to
a LAN interface. For ﬁrmware images that use VLANs, we
assign a corresponding VLAN ID to the TAP interface, in order
to communicate successfully with emulated network services.
Next, the TAP interface is conﬁgured with an IP address that
resides in the same subnet as the IP address assigned to the
emulated interface by the ﬁrmware. Finally, we check for
network connectivity by sending ICMP requests and performing
a port scan using the Nmap [3] utility.
4) QEMU: Aside from NVRAM, we expect embedded
systems to rely on other hardware-speciﬁc peripherals such as
watchdog timers or additional ﬂash storage devices. Unfortu-
nately, some device manufacturers do not follow good software
engineering practices and implement such functionality directly
in userspace, instead of using a device driver in kernelspace.
As a result, we cannot simply abstract away these devices
and cleanly emulate this behavior within our custom kernel
module. For example, the alphafs webserver mentioned in
§II-B maps part of physical memory from the /dev/mem
device node directly into its own address space. It expects con-
ﬁguration information for the ﬂash memory chip to be mapped
at 0x1e000000, with the VendorID and ProductID
identiﬁcation parameters matching a chip supported by the
software; otherwise it simply terminates.
To support the 138 affected ﬁrmware images in FIRMA-
DYNE, we modiﬁed the appropriate sixteen bytes in QEMU’s
source code for the emulated platform ﬂash device to respond
with known good values.
D. Automated Analyses
Currently, we have implemented three basic automated
dynamic analysis passes within our system. Each is registered
as a callback within our system, such that when a ﬁrmware
image enters the network inferred state, registered callbacks
are triggered sequentially. These contributed to our detection of
14 previously-unknown vulnerabilities that affect 69 ﬁrmware
images, and 74 known vulnerabilities that affect 887 ﬁrmware
images (see §V).
1) Accessible Webpages: To help detect various information
disclosure, buffer overﬂow, and command injection vulnera-
bilities, we wrote a simple analysis that looks for publicly
accessible webpages from the LAN interface of ﬁrmware
images. A custom-written Python test harness iterates through
each ﬁle within the ﬁrmware image that appears to be served
by a webserver (e.g., located within /www/), veriﬁes that it is
not a static resource (e.g., *.png, *.css, *.js), and attempts to
access it directly over the web interface.
Responses that contained non-2xx HTTP status codes were
ignored, since these were typically inaccessible web pages
(403/404), web pages that required authentication (401), or
invalid responses caused by socket timeouts or incomplete reads.
Successful responses that contained redirects were ﬂagged as
lower conﬁdence results, since we experimentally determined
that a large number of these were used to implement soft-
authentication pages.
Perhaps as a more user-friendly authentication mechanism,
these soft-authentication pages checked whether client requests
were authenticated using a client cookie or server IP address
log instead of the basic or digest authentication mechanisms
8
built-into the HTTP protocol (which would return 401). Thus,
these pages were marked with lower conﬁdence, while all other
web pages were marked with regular conﬁdence. These results
were aggregated across our ﬁrmware dataset to determine which
URLs were most accessible, and then prioritized for further
analysis in order of popularity.
2) SNMP Information: We were curious about the preva-
lence and security of Simple Network Management Protocol
(SNMP) implementations across our dataset, and so we wrote a
basic analysis using our framework to dump all unauthenticated
SNMP information from the “public” and “private” communi-
ties using the snmpwalk tool. Using MIB ﬁles gathered by
the crawler, the results for a subset of these were manually
interpreted to check for the presence of sensitive information.
The corresponding object identiﬁers (OIDs) were recorded, and
a simple proof-of-concept was developed for each, based on
whether information was returned when the OID was queried.
3) Vulnerabilities: Using 60 known exploits, mostly from
the Metasploit Framework, we initially checked all ﬁrmware im-
ages across our dataset for known security vulnerabilities. Each
exploit was executed sequentially, with a remote shell payload
if applicable, then the corresponding exploit log was checked
for success. This provided a lower-bound on the number of
vulnerabilities within our dataset, since an exploit may fail even
if a vulnerability is present. The tested vulnerabilities were
manually selected for relevance to applications and daemons
known to be present on embedded devices, and spanned various
exploit categories such as buffer overﬂow, command injection,
information disclosure, and denial of service.
For the new vulnerabilities that we discovered, we manually
developed proof-of-concepts exploits, which leveraged our
predeﬁned poisoned arguments such as 0xDEADBEEF. Then,
we speciﬁed a veriﬁcation condition for each exploit, which
was typically the presence of the poisoned argument in our in-
strumented kernel log; other examples included a segmentation
fault at 0x41414141 or a WPS PIN in a webpage.
E. Additional Capabilities
We also developed a number of additional capabilities that
assisted the development and debugging of our emulation
framework and exploits. These include dynamic tracing of
code execution, which can be imported into existing reverse
engineering tools, such as IDA Pro. Our custom kernel was
modiﬁed to disable inlining of the context_switch()
function, which allowed the emulator to trace the execution
of given userspace processes. Additionally, at startup we
also launch a special console application on the device node
/dev/ttyS1, which is forwarded by QEMU to a temporary
socket on the host system. This provided us with a convenient
mechanism for modifying the emulated ﬁrmware image at
runtime, especially if no default console is launched.
V. EVALUATION
vulnerabilities within the collected ﬁrmware samples. Using
proof-of-concept exploits that we developed for each of these
vulnerabilities, we use our system to assess their prevalence
and impact on our dataset. Finally, we demonstrate the analysis
ﬂexibility of our system by supplementing it with 60 known
exploits, mostly from the Metasploit Framework [2], and assess
the prevalence and impact of these known exploits on our
dataset.
It is important to note that the distribution of ﬁrmware
images across product lines and device vendors is not uniform,
and thus may skew interpretation of the results. In particular,
although we attempt to scrape metadata about the model number
and version number of each ﬁrmware image, this information
is not always available, nor is it present in a format that can
easily establish a temporal ordering. For example, vendors may
re-release a given product with different hardware, or release
a product with different hardware or ﬁrmware in each region,
preventing direct comparisons between two ﬁrmware images
with the exact same model. As a result, it is difﬁcult to identify
which ﬁrmware images are deprecated, and which ﬁrmware
image(s) is (are) the current version(s).
Furthermore, it is difﬁcult to establish a mapping between
ﬁrmware images and products, since there is not a direct one-
to-one correspondence. For example, some vendors, such as
Mikrotik, distribute a single ﬁrmware image for each hard-
ware architecture whereas other vendors, such as OpenWRT,
distribute a single ﬁrmware image for each hardware chipset.
Additionally, some vendors, such as QNAP and Synology,
develop a master ﬁrmware image that is only lightly customized
for each product in terms of hardware support and product
strings, whereas other vendors, such as OpenWRT, distribute
different binary releases of the same ﬁrmware image using
various encapsulation formats. Given two different ﬁrmware
binaries, this raises the question of how functionally identical
they may be, which we do not address. Nevertheless, we attempt
to provide a lower-bound on the number of affected products,
where possible.
A. Statistics
1) Architectures: For all ﬁrmware images with extracted
root ﬁlesystems, we were able to identify the architecture of
the corresponding ﬁrmware image by examining the format
header of the busybox binary on the system, or alternatively
binaries in /sbin/ if we could not locate busybox.
Table I shows that the majority of our ﬁrmware images are
32-bit MIPS (both big-endian and little-endian), which consti-
tute approximately 79.4%. The next most popular architecture
type is 32-bit little-endian ARM, which constitutes approx-
imately 8.9%. Combined, these two architectures constitute
90.8% of all ﬁrmware images, with the remainder forming
the little-tail of this distribution, suggesting that additional
development effort to support the remaining architectures would
require some other strong justiﬁcations.
In this section, we evaluate our implementation of FIR-
MADYNE. First, we examine the composition of our input
dataset, and analyze its effect on the emulation ﬁdelity at every
stage in the emulation pipeline. Second, we demonstrate how
we leveraged our system to identify 14 previously-unknown
2) Operating Systems: By combining our statistics for root
ﬁlesystem extraction and signature matches for the Linux and
VxWorks kernels, we noticed that the largest proportion of
our ﬁrmware images were UNIX-based at 48%, as shown in
Table II. If the ﬁlesystem of a ﬁrmware image was positively
9
identiﬁed as UNIX-based, but failures were encountered during
the kernel extraction process, then the image was labeled as
UNIX-like. Potential causes for this include path exploration
constraints, unsupported compression algorithms, or even the
lack of a kernel within the ﬁrmware image. Barely 3.5% of
our ﬁrmware images were identiﬁed as VxWorks, showing that
implementing support for these devices is a low priority.
As discussed previously in the last paragraph of §IV-B,
the unknown ﬁrmware images can be attributed to a number
of extraction failures. These include ﬁrmware images that
appeared to be Linux-based, but for which we were unable
to reassemble the entire ﬁlesystem, extracted only a partial
UNIX-like ﬁlesystem, or extracted a ﬁlesystem that did not
meet our threshold to be deemed UNIX-like. Some of these
are known to use ZynOS, a proprietary real-time operating
system developed by ZyXEL Communications. ZynOS uses
the ThreadX kernel and an unknown ﬁlesystem type, for which
we lack a kernel version signature and ﬁlesystem extraction
utility.
Other unknown ﬁrmware images are monolithic ﬁrmware
images that do not utilize a distinct kernel or ﬁlesystem. As a
result, emulating these ﬁrmware images would be extremely
difﬁcult without hardware documentation, as chipset-speciﬁc
code may be distributed throughout the binary. This type of
ﬁrmware image is known to be used by u-blox, which is
included in our dataset.
3) Kernel Modules: Across all of our extracted ﬁrmware
images, we performed a basic categorization of all out-of-
tree kernel modules based on ﬁlename, shown in Table III.
These numbers indicate that 58.8% of these modules implement
various network-related functionality, such as packet ﬁltering
(iptables, xtables, netfilter, ebtables), protocol
implementations (pptp, ppp, adsl), and interface support
(mii, tun, tap). The next largest subset of 12.7% were used
to provide support for various peripherals, including wireless
adapters (wl, ath9k, sierra), platform chipsets (ar7240,
ar7100, bcm963xx), and various other devices (acos_nat,
pl2303). Many of the remaining kernel modules appeared to
be in-tree kernel modules that were compiled as loadable mod-
ules, including generic USB interface implementations (ehci,
uhci, xhci), ﬁlesystems (fat, fuse, ext3), cryptographic
functions (sha512, crypto), and various other miscellaneous
kernel routines (ts_fsm, sch_hfsc). Less than 0.2% of
these kernel modules were identiﬁed as the KCodes NetUSB
kernel module, a proprietary USB over IP kernel module that
is known to contain a remotely-exploitable buffer overﬂow
vulnerability.4
4) Network Services: To assess the prevalence of listening
network services on our ﬁrmware image dataset, we used the
nmap network scanning tool to check the 1,971 images that
respond to ICMP echo requests. We scanned all TCP ports with
known services from the nmap-services ﬁle, as well as the
continuous port range 1–1024, which is the default scanning
behavior of nmap. The top ten results, shown in Table IV,
indicate that out of the 1,971 devices that were network
reachable, 47.3% likely support a web-based conﬁguration
4https://www.sec-consult.com/fxdata/seccons/prod/temedia/advisories_txt/
20150519-0_KCodes_NetUSB_Kernel_Stack_Buffer_Overﬂow_v10.txt
Architecture (Endian)
TILE (LE)
ARC (LE)
Motorola 68k (BE)
x86 (LE)
MIPS 64-bit (BE)
PPC (BE)
ARM (BE)
x86-64 (LE)
Unknown
ARM (LE)
MIPS (BE)
MIPS (LE)
Total
# Image(s)
1
10
10
31
50
84
102
147
439
843
3,137
4,632
9,486
TABLE I: Breakdown of ﬁrmware images by architecture, based
on binary ﬁngerprinting of extracted root ﬁlesystems.
Unidentiﬁed (UNIX-like)
Type
Linux
VxWorks
Unknown
Total
# Images
9,379
2,187
857
10,612
23,035
TABLE II: Breakdown of ﬁrmware images by operating system,
based on kernel ﬁngerprinting and root ﬁlesystem extraction.
Category
NetUSB
Unclassiﬁed
Cryptography
USB
Filesystems
Miscellaneous
Peripheral Drivers
Networking
Total
# Modules
853
1,384
12,603
30,683
43,271
55,344
64,085
296,592
504,815
TABLE III: Breakdown of kernel modules by category, based
on path and ﬁlename.
# Images TCP Port/Service
928
708
536
250
188
187
136
162
63
57
3333/dec-notes
80/http
23/telnet