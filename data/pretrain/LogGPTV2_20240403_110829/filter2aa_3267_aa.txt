# Demystifying Kernel Exploitation by Abusing GDI Objects

**Author:** Saif El-Sherei  
**Date:** 2017-07-18

## Introduction

This paper delves into integer overflows that lead to Kernel Pool memory corruption. We will explore the discovery, triggering, and exploitation of these issues by abusing two GDI objects: the bitmap and palette objects. The concepts presented here are based on my understanding and may not be strictly scientific.

### Standing on the Shoulders of Giants

- **Nicolas Economou and Diego Juarez**: *Abusing GDI for ring 0*: [Link](https://www.coresecurity.com/blog/abusing-gdi-for-ring0-exploit-primitives)
- **360 Vulcan Team**: [Link](https://cansecwest.com/slides/2017/CSW2017_PengQiu-ShefangZhong_win32k_dark_composition.pdf)
- **K33n Team**: [Link](https://www.slideshare.net/PeterHlavaty/windows-kernel-exploitation-this-time-font-hunt-you-down-in-4-bytes)
- **J00ru, Halvar Flake, Tarjei Mandt, Halsten, Alex Ionescu, Nikita Terankov, and many others.**

### The Setup

- **IDA Pro**
- **Zynamics BinDiff**
- **VirtualKD (much love)**
- **WinDbg**
- **GDIObjDump WinDbg Extension**
- **VmWare Workstation**:
  - Windows 8.1 x64
  - Windows 7 SP1 x86

## WinDbg Pool Analysis Tips

- `!poolused`: View the pool usage of a specific Pool tag or type.
- `!poolfind`: Find all locations of allocated objects with the specified Pool tag.
- `!pool`: View the Pool page where the specified address is located.

## Kernel Pool

### Kernel Pool Types

The kernel Pool is a type of Heap memory used by the kernel, with several types:

- **Desktop Heap**: Used for Desktop objects like Windows, Classes, Menus, etc.
  - Allocation Functions: `RtlAllocateHeap()`, `DesktopAlloc()`
  - Free Function: `RtlFreeHeap()`

- **Non-Paged Pool**: Objects allocated here have their virtual addresses mapped to physical pages. Examples include semaphores and Event objects.
- **Paged Session Pool**: This is the focus of this paper. Objects in this pool may not have their virtual addresses mapped to physical memory and can be valid only for the current execution session, such as GDI and some User objects.
  - Allocation: `ExAllocatePoolWithTag()` with the first argument set to `0x21` for Paged Session Pool or `0x29` for Non-Paged Pool.
  - Freeing: `ExFreePoolWithTag()` and `ExFreePool()`

### Kernel Pool Allocations Dynamics

Examining the `Win32AllocPool` function reveals how the kernel allocates objects to the Paged Session Pool (type `0x21`). Kernel Pool memory is divided into `0x1000` byte pages. The first allocation is at the beginning of the page, and subsequent allocations are from the end of the page. In x64 systems, the kernel Pool Header is `0x10` bytes, and in x86 systems, it is `0x8` bytes.

During testing, it was observed that small kernel object allocations use the Look-aside list with a fixed size structure. However, the focus here is on normal kernel Pool allocations.

### Pool Spraying / Feng Shui

Pool spraying or feng shui aims to get the Pool memory into a deterministic state through a series of allocations and deallocations. This creates memory holes of the same size as the vulnerable object, which can be adjacent to objects under our control for later abuse.

If the vulnerable object is not freed within the vulnerable function's execution, the memory holes can be anywhere in the Pool page. If the object is freed at the end of the function, the approach is to allocate the vulnerable object at the end of the Pool page to avoid a BAD POOL HEADER BSOD.

### Forcing Object Allocation at End of Pool Page

Assume the vulnerable object is `0x40` bytes including the Pool header. The first chunk allocated to the page should be `0x1000 - 0x40 = 0xFC0` bytes, including the Pool Header. Next, allocate the remaining `0x40` bytes in the Pool page.

If the overflow requires the abused object to be at a specific offset from the overflowed object, adjust the allocation strategy accordingly.

## Pool Corruption

Pool corruption can occur due to use-after-free, linear Pool overflows, and Pool Out-of-bounds (OOB) writes.

### Unsigned Integer Overflows

Unsigned Integer Overflows result from unchecked calculations using a controlled integer, causing the value to wrap around `MAX_UINT` (0xFFFFFFFF) to a smaller value. This can have diverse effects depending on how the overflowed value is used.

For example, on an x86 system:
```c
0xFFFFFF80 + 0x81 = 00000001
```
On x64 systems, the actual result might be `0x100000001`, but it gets truncated to `0x1`.

In a function that:
1. Accepts an integer as an argument and performs calculations.
2. These calculations result in an integer overflow.
3. The function uses the resulted small integer value for memory allocation.
4. It then uses the original large integer to copy data to the newly allocated buffer (linear overflow) or tries to write to an offset (OOB write).

These are the two types of integer overflows covered in this paper.

### Linear Overflow

Linear overflow occurs when data is copied to an object without bounds checking. This can happen if an overflowed small size is passed to the allocation function, and the memory copying function uses the original large size to copy data.

### Out-Of-Bounds (OOB) Write

In OOB write, the application allocates an object expected to have a fixed or larger size. If the size passed to the allocation function suffers from an integer overflow, the size wraps to a very small value. Later, the application tries to write to an index that is expected to be part of the allocated object, leading to an OOB write.

## Abusing GDI Objects for Ring0 Exploit Primitives

In exploit development, objects corrupted by the first stage of memory corruption can be used to gain a second-stage memory corruption primitive. GDI objects, specifically Bitmap and Palette objects, can be used to achieve such primitives.

### Relative Memory Read/Write

Relative memory read/write allows us to read/write relative to a certain memory address. This is achieved by corrupting the GDI object to increase its size, which is the first step after triggering the bug to gain full arbitrary kernel memory read/write.

### Arbitrary Memory Read/Write

Arbitrary memory read/write occurs when an object has a member that is a pointer to the object's data. If this pointer is corrupted, functions that read/write the object's data will do so to the altered pointer, providing a powerful exploitation primitive.

### SURFOBJ - Bitmaps Objects

Bitmap objects are represented in kernel memory by Pool tags `Gh?5` and `Gla5` and type `_SURFOBJ`. The most interesting members are `sizlBitmap`, which specifies the width and height of the bitmap, and `pvScan0` and `pvBits`, which are pointers to the bitmap data.

This technique will be used to exploit MS16-098, first disclosed by the K33n Team and later detailed by Diego Juarez and Nicolas Economou.

---

This revised version aims to provide a clearer, more professional, and coherent presentation of the research.