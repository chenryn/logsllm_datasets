            web_server_file_action(web1_server_ip,web1_server_port,web1_server_user,web1_server_passwd, 'put')
####  scp命令
    scp -P 30022 -r -q web PI:EMAIL:/var/www/html
    # 按照提示输入密码即可
    scp [可选参数] file_source file_target 
    -P 指定传输到服务器的端口，默认为22
    -r 递归传输整个web文件夹
    -q 不显示传输进度条
###  常用linux命令
    ssh  用户名@IP  
    scp 文件路径  用户名@IP:存放路径    
    tar -zcvf web.tar.gz /var/www/html/  
    w     
    pkill -kill -t      
    ps aux | grep pid或者进程名 
    #查看已建立的网络连接及进程
    netstat -antulp | grep EST
    #查看指定端口被哪个进程占用
    lsof -i:端口号 或者 netstat -tunlp|grep 端口号
    #结束进程命令
    kill PID
    killall   
    kill -   
    #封杀某个IP或者ip段，如：.  
    iptables -I INPUT -s . -j DROP
    iptables -I INPUT -s ./ -j DROP
    #禁止从某个主机ssh远程访问登陆到本机，如123..  
    iptable -t filter -A INPUT -s . -p tcp --dport  -j DROP
    #检测所有的tcp连接数量及状态
    netstat -ant|awk  |grep |sed -e  -e |sort|uniq -c|sort -rn
    #查看页面访问排名前十的IP
    cat /var/log/apache2/access.log | cut -f1 -d   | sort | uniq -c | sort -k  -r | head -  
    #查看页面访问排名前十的URL
    cat /var/log/apache2/access.log | cut -f4 -d   | sort | uniq -c | sort -k  -r | head -    
  * 如果有root权限可以用chattr命令防止系统中某个关键文件被修改chattr +i /etc/resolv.conf如果想进行修改，必须用命令”chattr -i”取消隐藏属性
  * ls -t 按修改时间来看最新被修改的文件
###  流量监控
流量监控也是可以使用aoiawd进行，aoiawd还是在后边，或者用别的脚本记录流量，有的比赛也会定时提供上阶段流量
被上马一定要先备份到本地，再删除、去分析反打别人
####  php流量监控
    '.'访问链接：'.'http://'.$ip.$filename.'?'.$parameter."\r\n";
    // log记录
    $fh = fopen("log.txt", "a");
    fwrite($fh, $logadd);
    fclose($fh);
    ?>
####  weblogger
[一个针对php的web流量抓取、分析的应用。](https://github.com/wupco/weblogger)
使用方法
       cd /var/www/html/ (or other web dir)
       git clone https://github.com/wupco/weblogger.git
       chmod -R 777 weblogger/
       open http://xxxxx/weblogger/install.php in Web browser
       install it
###  wireshark
####  过滤IP地址
> (1) ip.addr == 192.168.1.1 //只显示源/目的IP为192.168.1.1的数据包 (2) not ip.src ==
> 1.1.1.1 //不显示源IP为1.1.1.1的数据包 (3 ip.src == 1.1.1.1 or ip.dst == 1.1.1.2
> //只显示源IP为1.1.1.1或目的IP为1.1.1.2的数据包
####  过滤端口
> (1) tcp.port eq 80 #不管端口是来源还是目的都显示80端口 (2) tcp.port == 80 (3) tcp.port eq
> 2722 (4) tcp.port eq 80 or udp.port eq 80 (5) tcp.dstport == 80
> #只显示tcp协议的目标端口80 (6) tcp.srcport == 80 #只显示tcp协议的来源端口80 (7) udp.port eq
> 15000 (8) tcp.port >= 1 and tcp.port  (1) eth.dst == MAC地址 #过滤目标MAC (2) eth.src eq MAC地址 #过滤来源MAC (3)eth.addr eq
> MAC地址 #过滤来源MAC和目标MAC都等于MAC地址的
####  http请求方式过滤
> (1) http.request.method == “GET” (2) http.request.method == “POST” (3)
> http.host mathes
> “www.baidu.com|[http://baidu.cn](https://link.zhihu.com/?target=http%3A//baidu.cn)“
> #matches可以写多个域名 (4) http.host contains
> “[http://www.baidu.com](https://link.zhihu.com/?target=http%3A//www.baidu.com)“
> #contain只能写一个域名 (5) http contains “GET” 例如： http.request.method ==”GET” &&
> http contains “Host: “ http.request.method == “GET” && http contains “User-> Agent: “ http.request.method ==”POST” && http contains “Host: “
> http.request.method == “POST” && http contains “User-Agent: “ http contains
> “HTTP/1.1 200 OK” && http contains “Content-Type: “ http contains “HTTP/1.0
> 200 OK” && http contains “Content-Type: “
####  TCPdump分析
> tcpdump采用命令行方式，它的命令格式为：tcpdump [-adeflnNOpqStvx0] [-c 数量] [-F 文件名] [-i 网络接口]
> [-r 文件名] [-s snaplen] [-T 类型] [-w 文件名] [表达式]
详细参数：
抓包选项：|作用 —-|— -c：|指定要抓取的包数量。 -i interface：|指定tcpdump需要监听的接口。默认会抓取第一个网络接口
-n|：对地址以数字方式显式，否则显式为主机名，也就是说-n选项不做主机名解析。 -nn：|除了-n的作用外，还把端口显示为数值，否则显示端口服务名。
-P：|指定要抓取的包是流入还是流出的包。可以给定的值为”in”、”out”和”inout”，默认为”inout”。 -s
len：|设置tcpdump的数据包抓取长度为len，如果不设置默认将会是65535字节。对于要抓取的数据包较大时，长度设置不够可能会产生包截断，若出现包截断，输出行中会出现”[proto]”的标志(proto实际会显示为协议名)。但是抓取len越长，包的处理时间越长，并且会减少tcpdump可缓存的数据包的数量，从而会导致数据包的丢失，所以在能抓取我们想要的包的前提下，抓取长度越小越好。
输出选项：| 作用 ———|—- -e：|输出的每行中都将包括数据链路层头部信息，例如源MAC和目标MAC。
-q：|快速打印输出。即打印很少的协议相关信息，从而输出行都比较简短。 -X：|输出包的头部数据，会以16进制和ASCII两种方式同时输出。
-XX：|输出包的头部数据，会以16进制和ASCII两种方式同时输出，更详细。 -v：|当分析和打印的时候，产生详细的输出。 -vv：|产生比-v更详细的输出。 -vvv：|产生比-vv更详细的输出。
其他功能性选项：|作用 —-|—- -D：|列出可用于抓包的接口。将会列出接口的数值编号和接口名，它们都可以用于”-i”后。
-F：|从文件中读取抓包的表达式。若使用该选项，则命令行中给定的其他表达式都将失效。 -w：|将抓包数据输出到文件中而不是标准输出。可以同时配合”-G
time|选项使得输出文件每time秒就自动切换到另一个文件。可通过”-r”选项载入这些文件以进行分析和打印。
-r：|从给定的数据包文件中读取数据。使用”-“表示从标准输入中读取。
####  端口过滤
    抓取所有经过ens33，目的或源端口22的网络数据：
    tcpdump -i ens33 port 22
    指定源端口：tcpdump -i ens33 sec port 22
    指定目的端口: tcpdump -i ens33 dst port 22
####  网络过滤
    tcpdump -i ens33 net 192.168.1.1
    tcpdump -i ens33 src net 192.168.1.1 #源端口
    tcpdump -i ens33 dst net 192.168.1.1 #目的端口
####  协议过滤
    tcpdump -i ens33 arp
    tcpdump -i ens33 ip
    tcpdump -i ens33 tcp
    tcpdump -i ens33 udp
    tcpdump -i ens33 icmp
    tcpdump -w 1.pcap #抓所有包保存到1.pcap中然后使用wireshark分析
###  apache2日志
/var/log/apache2/
/usr/local/apache2/logs
###  awd中linux的命令
    - netstat -anptl 查看开放端口
    - ps aux 以用户为主的格式来查看所有进程
      pa aux | grep tomcat
      ps -A 显示进程信息
      ps -u root 显示root进程用户信息
      ps -ef 显示所有命令，连带命令行
    - kill 终止进程
      kill -9 pid
      //kill -15、kill -9的区别
      执行kill（默认kill -15）命令，执行kill (默认kill-15) 命令，系统会发送一个SIGTERM信号给对应的程序，,大部分程序接收到SIGTERM信号后，会先kill -9命令,系统给对应程序发送的信号是SIGKILL,即exit。exit信号不会被系统阻塞，所以kill -9能顺利杀掉进程
    - vim编辑器
      命令行模式下
      /  查找内容
      ?  查找内容
      n  重复上一条检索命令
      N  命令重复上一条检索命令
## 两个awd神器
###  AoiAWD
aoiawd地址：
下载好，自己去编译或者找编译好的直接用
####  使用
把刚刚那些文件夹中的生成的文件例如xxx.phar等发送到提供给的靶机上去，然后记得赋予权限，ip是自己电脑ip，端口就是默认8023
    # web的流量监控
    chmod +x tapeworm.phar
    # 进程监控
    chmod +x roundworm
    # pwn的监控
    chmod +x guardian.phar
    ./tapeworm.phar -d 目录 -s ip:port
    ./roundworm  -w 目录 -s ip -p port
    ./guardian.phar -i 目录 -s ip:port
    ./tapeworm.phar -d /var/www/html -s ip
    ./roundworm  -w /var/www/html -s ip -p
    ./guardian.phar -i /var/www/html -s ip
本地需要在命令行启动aoiawd
启动方式：
    php aoiawd.phar
web端口1337
token就是命令行启动时access token
成功进入页面
左侧可以看到各个模块，使用方式非常简单
####  指定端口重放
需要将上边的单个ip的注释掉，下边的这个改ip和端口
    // 批量端口
    $ports = [10024, 10021, 10023];
    $host1 = "http://" . '10.241.180.159';
    foreach ($ports as $port) {
        $host = $host1 . ':' . $port;
        echo "Sending to: {$host}\n\n";
        sendPayload($host);
    }
    exit;
###  watchbird
这是个通防waf，支持流量转发和替换flag
地址：
## Fix
一个大佬总结的漏洞快修思路
最后：
保持良好的心态，不到最后一刻都有翻盘的可能
找出漏洞拿到shell，权限维持后，尽量把这个洞给被控机修了，以免被别人拿到shell
不仅要保证自己能拿到shell，还有保证别人拿不到shell
拿shell前先打一波流量，混淆视听
保证自己的网站上没有d盾可以扫出来的后门
提高python脚本编写能力
## 优秀文章
[《CTF线下赛AWD模式下的生存技巧》](https://www.anquanke.com/post/id/84675)
[《论如何在CTF比赛中搅“shi”》](http://www.freebuf.com/articles/web/118149.html)
[《CTF线下防御战 — 让你的靶机变成“铜墙铁壁”》](https://www.anquanke.com/post/id/86984)
[AWD攻防赛webshell批量利用框架](https://github.com/Ares-X/AWD-Predator-Framework)
[针对ctf线下赛流量抓取(php)、真实环境流量抓取分析的工具](https://github.com/wupco/weblogger)
[AWD攻防赛脚本集合](https://github.com/admintony/Prepare-for-AWD)
[CTFDefense](https://github.com/ssooking/CTFDefense)