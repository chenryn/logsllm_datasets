**作者：[@flyyy](https://www.zhihu.com/people/1147d134e271d3e7428150977892bb51)**  
**长亭科技安全研究员，曾获得GeekPwn 2018“最佳技术奖”，入选极棒名人堂。**  
**来源：[长亭技术专栏](https://zhuanlan.zhihu.com/p/58910752?utm_source=wechat_session&utm_medium=social&utm_oi=871377391468019712&s_s_i=lURhfXZlxLFs5Pd5ulTzV3M8Rr8L1bckCaWUaDOX9U0%3D&s_r=1&from=timeline&isappinstalled=0
"长亭技术专栏")**
35C3CTF中niklasb出了一道关于virtualbox逃逸的0day题目，想从这个题目给大家介绍virtualbox的一个新的攻击面（其实类似的攻击面也同样存在于其他虚拟化类软件），这里记录一下和@kelwin一起解题的过程（被dalao带飞真爽）
### **题目描述**
    chromacity 477
    Solves: 2
    Please escape VirtualBox. 3D acceleration is enabled for your convenience.
    No need to analyze the 6.0 patches, they should not contain security fixes.
    Once you're done, submit your exploit at https://vms.35c3ctf.ccc.ac/, but assume that all passwords are different on the remote setup.
    Challenge files. Password for the encrypted VM image is the flag for "sanity check".
    Setup
    UPDATE: You might need to enable nested virtualization.
    Hint: https://github.com/niklasb/3dpwn/ might be useful
    Hint 2: this photo was taken earlier today at C3
    Difficulty estimate: hard
题目描述中可以看出：
  1. 虚拟机配置中显卡开启了3D加速功能
  2. 6.0的patch没用，参考virtualbox 6.0的发布时间推测是出题人来不及用最新版适配环境等等，所以是一道0day题目
题目前前后后给出了四个附件，一个是img文件，一个是通过qemu+kvm虚拟机运行该img的.sh文件，这个虚拟机就是远程运行的host的环境，host当中有一个5.28
release版的virtualbox，也就是我们逃逸的目标。（算上启动host环境中的virtualbox，如果你的主机是windows+vmware
workstation的话。。。满眼都是泪），另外还有两张图片，一张是关于目标virtualbox虚拟机的配置，一张是niklasb和他电脑屏幕的照片。电脑屏幕上显示的是[这个页面](http://link.zhihu.com/?target=https%3A//www.khronos.org/registry/OpenGL-Refpages/gl4/html/glShaderSource.xhtml)，看样子题目应该跟glShaderSource这个opengl的api有关。
同时给出的两个hint，一个是niklasb自己关于3dpwn的github链接，其中有他之前通过攻击virtual box
3D加速模块实现逃逸的源码和相关[分析文章](http://link.zhihu.com/?target=https%3A//phoenhex.re/2018-07-27/better-slow-than-sorry)。另一个就是附件中关于niklasb的照片。
### **题目分析**
通过题目描述我们可以比较确定的是出题人希望我们去找virtualbox
3D加速部分的0day漏洞来实现逃逸，同时通过他给出的github链接中的文章和题目名我们可以很快把目标锁定在3D加速部分的[Chromium](http://link.zhihu.com/?target=http%3A//chromium.sourceforge.net/)代码上（并不是同名的浏览器项目）。
简单来说，virtualbox通过引入OpenGL的共享库来引入3D加速功能，而Chromium负责解析Virtualbox。Chromium定义了一套用来描述OpenGL不同操作的网络协议。但是这个Chromium库最后一次更新源码已经是在十二年前了。同时通过这个库我们大概可以猜到之前hint中那张照片的用意了。如果排除掉去直接挖掘OpenGL的0day的可能性，那Virtualbox代码中关于glShaderSource的部分就只有Chromium中关于这个api的协议解析的部分了。而恰好niklasb的github中的源码和文章都是关于Chromium部分的漏洞及其利用的。
### **源码分析**
Virtualbox的Guest additions类似于VMware workstation中的vmware-tools。不同的地方在于，VMware
workstation通过暴漏固定的端口给guest来实现guest与host的通信，而Guest
additions是通过增加一个自定义的虚拟硬件vboxguest来实现guest与host的交互。而3D加速是作为一个virtualbox自定义的hgcm服务进程存在的。
    gdb-peda$ i thread
      Id   Target Id         Frame 
    * 1    Thread 0x7fe77f6d9780 (LWP 14933) "VirtualBoxVM" 0x00007fe77b0acbf9 in __GI___poll (fds=0x55fe988e82b0, nfds=0x2, timeout=0x63) at ../sysdeps/unix/sysv/linux/poll.c:29
    ......
      15   Thread 0x7fe72f86a700 (LWP 14965) "ShCrOpenGL" 0x00007fe77a4959f3 in futex_wait_cancelable (private=, expected=0x0, futex_word=0x7fe720004068)
    ......
      35   Thread 0x7fe6d0cd6700 (LWP 14985) "nspr-3" 0x00007fe77a4959f3 in futex_wait_cancelable (private=, expected=0x0, futex_word=0x55fe9868ed70)
        at ../sysdeps/unix/sysv/linux/futex-internal.h:88
      36   Thread 0x7fe6b9b61700 (LWP 14986) "SHCLIP" 0x00007fe77b0acbf9 in __GI___poll (fds=0x7fe6b4000b20, nfds=0x2, timeout=0xffffffff) at ../sysdeps/unix/sysv/linux/poll.c:29
    gdb-peda$ thread 15
    [Switching to thread 15 (Thread 0x7fe72f86a700 (LWP 14965))]
    #0  0x00007fe77a4959f3 in futex_wait_cancelable (private=, expected=0x0, futex_word=0x7fe720004068) at ../sysdeps/unix/sysv/linux/futex-internal.h:88
    88  ../sysdeps/unix/sysv/linux/futex-internal.h: No such file or directory.
    gdb-peda$ bt
    #0  0x00007fe77a4959f3 in futex_wait_cancelable (private=, expected=0x0, futex_word=0x7fe720004068) at ../sysdeps/unix/sysv/linux/futex-internal.h:88
    #1  __pthread_cond_wait_common (abstime=0x0, mutex=0x7fe720004070, cond=0x7fe720004040) at pthread_cond_wait.c:502
    #2  __pthread_cond_wait (cond=0x7fe720004040, mutex=0x7fe720004070) at pthread_cond_wait.c:655
    #3  0x00007fe77e0e5cc8 in rtSemEventWait (fAutoResume=0x1, cMillies=0xffffffff, hEventSem=0x7fe720004040)
        at /home/f1yyy/Desktop/VirtualBox-6.0.0/src/VBox/Runtime/r3/linux/../posix/semevent-posix.cpp:369
    #4  RTSemEventWait (hEventSem=0x7fe720004040, cMillies=0xffffffff) at /home/f1yyy/Desktop/VirtualBox-6.0.0/src/VBox/Runtime/r3/linux/../posix/semevent-posix.cpp:482
    #5  0x00007fe75d3b09aa in HGCMThread::MsgGet (this=0x7fe720003f60, ppMsg=0x7fe72f869cf0) at /home/f1yyy/Desktop/VirtualBox-6.0.0/src/VBox/Main/src-client/HGCMThread.cpp:549
    #6  0x00007fe75d3b147f in hgcmMsgGet (pThread=0x7fe720003f60, ppMsg=0x7fe72f869cf0) at /home/f1yyy/Desktop/VirtualBox-6.0.0/src/VBox/Main/src-client/HGCMThread.cpp:734
    #7  0x00007fe75d3b265c in hgcmServiceThread (pThread=0x7fe720003f60, pvUser=0x7fe720003e00) at /home/f1yyy/Desktop/VirtualBox-6.0.0/src/VBox/Main/src-client/HGCM.cpp:608
    #8  0x00007fe75d3af940 in hgcmWorkerThreadFunc (hThreadSelf=0x7fe720004340, pvUser=0x7fe720003f60) at /home/f1yyy/Desktop/VirtualBox-6.0.0/src/VBox/Main/src-client/HGCMThread.cpp:200
    #9  0x00007fe77df95501 in rtThreadMain (pThread=0x7fe720004340, NativeThread=0x7fe72f86a700, pszThreadName=0x7fe720004c20 "ShCrOpenGL")
        at /home/f1yyy/Desktop/VirtualBox-6.0.0/src/VBox/Runtime/common/misc/thread.cpp:719
    #10 0x00007fe77e0df882 in rtThreadNativeMain (pvArgs=0x7fe720004340) at /home/f1yyy/Desktop/VirtualBox-6.0.0/src/VBox/Runtime/r3/posix/thread-posix.cpp:327
    #11 0x00007fe77a48f6db in start_thread (arg=0x7fe72f86a700) at pthread_create.c:463
    #12 0x00007fe77b0b988f in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95
也就是说，当我们想要在guest中想要调用一个OpenGL的某个接口，需要根据我们的请求先进行Chromium的协议封装，再进行hgcm的协议封装。具体关于virtualbox在这两部分的实现细节，请阅读virtualbox相关源码，这里不再详述。
niklasb在其github上已经封装好了调用Chromium代码部分的函数及例子,比如下面这两行代码：
    client = hgcm_connect("VBoxSharedCrOpenGL")
    hgcm_call(client, SHCRGL_GUEST_FN_SET_VERSION, [9, 1])
最终在源码中会触发到src/vbox/hostservices/sharedopengl/crservice/crservice.cpp中的switch下的SHCRGL_GUEST_FN_SET_VERSION部分，其中的vMajor和vMinor会分别为9和1。
再次回到题目上来，题目已经提醒了漏洞存在的位置可能在Chromium中glShaderSource相关的接口位置，通过在源码中的寻找与分析，我们把目标锁定在了crUnpackExtendShaderSource函数中。crUnpackExtendShaderSource代码如下：
    void crUnpackExtendShaderSource(void)
    {
        GLint *length = NULL;
        GLuint shader = READ_DATA(8, GLuint);
        GLsizei count = READ_DATA(12, GLsizei);
        GLint hasNonLocalLen = READ_DATA(16, GLsizei);
        GLint *pLocalLength = DATA_POINTER(20, GLint);
        char **ppStrings = NULL;
        GLsizei i, j, jUpTo;
        int pos, pos_check;
        if (count >= UINT32_MAX / sizeof(char *) / 4)
        {
            crError("crUnpackExtendShaderSource: count %u is out of range", count);
            return;
        }
        pos = 20 + count * sizeof(*pLocalLength);
        if (hasNonLocalLen > 0)
        {
            length = DATA_POINTER(pos, GLint);
            pos += count * sizeof(*length);
        }
        pos_check = pos;
        if (!DATA_POINTER_CHECK(pos_check))
        {
            crError("crUnpackExtendShaderSource: pos %d is out of range", pos_check);
            return;
        }
        for (i = 0; i = INT32_MAX - pLocalLength[i] || !DATA_POINTER_CHECK(pos_check))
            {
                crError("crUnpackExtendShaderSource: pos %d is out of range", pos_check);
                return;
            }
            pos_check += pLocalLength[i];
        }
        ppStrings = crAlloc(count * sizeof(char*));
        if (!ppStrings) return;
        for (i = 0; i  0);
            jUpTo = i == count -1 ? pLocalLength[i] - 1 : pLocalLength[i];
            for (j = 0; j < jUpTo; ++j)
            {
                char *pString = ppStrings[i];
                if (pString[j] == '\0')
                {
                    Assert(j == jUpTo - 1);
                    pString[j] = '\n';
                }
            }
        }
    //    cr_unpackDispatch.ShaderSource(shader, count, ppStrings, length ? length : pLocalLength);
        cr_unpackDispatch.ShaderSource(shader, 1, (const char**)ppStrings, 0);
        crFree(ppStrings);
    }
仔细看会发现在中间一段for循环检查pLocalLength数组的每个元素跟所有元素的和的大小是否越界时，并未检查最后一层循环过后pos_check是否越界，据此我们可以在最后的两层嵌套循环中的内层中实现越界写，而这个越界写也很有趣：
            for (j = 0; j < jUpTo; ++j)
            {
                char *pString = ppStrings[i];
                if (pString[j] == '\0')
                {
                    Assert(j == jUpTo - 1);
                    pString[j] = '\n';
                }
            }
它可以将越界部分所有的'\0'替换为'\n'。通过这个漏洞我们可以越界写一块堆内存，将其后面内存中若干的'\0'替换为'\n'。（注意：Assert在release版中是不存在的！）之后我们会介绍如何通过这个越界写实现任意地址写。
当然只有一个越界写可能利用起来还是十分困难，我们仔细看了看niklasb写的文章，发现在很多类似的unpack函数中均存在类似于CVE-2018-3055的漏洞，比如crUnpackExtendGetUniformLocation：
    void crUnpackExtendGetUniformLocation(void)
    {
        int packet_length = READ_DATA(0, int);
        GLuint program = READ_DATA(8, GLuint);