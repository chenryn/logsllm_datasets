    Reading log entries from /var/log/syslog.
    Updating AppArmor profiles in /etc/apparmor.d.
    ```
    所有配置文件都放在`/etc/apparmor.d/`目录中。如果一切正常，您现在应该会在`/etc/apparmor.d/usr.bin.nmap`文件中看到一个输出类似于以下内容的文件:
    ```
    1 # Last Modified: Mon Nov 18 01:03:31 2019
    2 #include 
    3 
    4 /usr/bin/nmap {
    5   #include 
    6 
    7   /usr/bin/nmap mr,
    8 
    9 }
    ```
18.  使用`apparmor_parser`命令将新文件加载到系统中。使用`-r`选项替换已经存在的配置文件，使用`-W`选项将其写入缓存:
    ```
    apparmor_parser -r -W /etc/apparmor.d/usr.bin.nmap
    ```
19.  Run the `aa-status` command to verify that the profile is now available and to see whether there is a new profile that is specifying `nmap`:
    ```
    aa-status | grep nmap
    ```
    请注意，概要文件与应用`/usr/bin/nmap`同名，这是您在使用我们的容器运行它时需要使用的名称:
    ```
    /usr/bin/nmap
    ```
20.  Now, test your changes. Run the container with the `-u root` user. Also, use the `–-security-opt apparmor=/usr/bin/nmap` option to run the container with the newly created profile:
    ```
    docker run -it -u root --security-opt apparmor=/usr/bin/nmap security-app sh -c 'nmap -sS -p 443 localhost'
    ```
    您还应该看到`Permission denied`的结果，显示我们创建的 AppArmor 配置文件正在限制使用，正如我们所希望的那样:
    ```
    sh: nmap: Permission denied
    ```
在本练习中，我们演示了如何在系统上开始使用 AppArmor，并向您展示了如何创建您的配置文件。在下一节中，我们将继续讨论一个类似的应用，Linux 的*seccomp*。
## 【Linux 容器的 seccomp
`seccomp` for Linux 是从 3.17 版本加入 Linux 内核的，它提供了一种限制 Linux 进程可以发出的系统调用的方法。该功能也可以在我们正在运行的 Docker 映像中使用，以帮助减少运行容器可用的进程，确保如果容器被攻击者访问或感染了恶意代码，攻击者可用的命令和进程将受到限制。
`seccomp`使用配置文件建立可以执行的系统调用白名单，默认配置文件提供可以执行的系统调用的长列表，并且还禁止大约 44 个系统调用在您的 Docker 容器上运行。你很可能一直在使用默认的`seccomp`配置文件，因为你已经完成了这本书的章节。
Docker 将使用主机系统中的`seccomp`配置，可以通过搜索`/boot/config`文件并检查`CONFIG_SECCOMP`选项是否设置为`y`来定位:
```
cat /boot/config-'uname -r' | grep CONFIG_SECCOMP=
```
当运行我们的容器时，如果我们需要运行没有`seccomp`配置文件的容器，我们可以使用`-–security-opt`选项，然后指定`seccomp`配置文件是未确认的。以下示例为此提供了语法:
```
docker run --security-opt seccomp=unconfined 
```
我们还可以创建自定义配置文件。在这些情况下，我们将自定义配置文件位置指定为`seccomp`的值，如下所示:
```
docker run --security-opt seccomp=new_default.json 
```
## 练习 11.06:开始使用 seccomp
在本练习中，您将在当前环境中使用`seccomp`配置文件。您还将创建一个自定义配置文件来阻止 Docker 映像对文件执行更改所有权命令:
1.  Check whether your running Linux system has s`eccomp` enabled. This will then allow you to ensure that it is running for Docker as well:
    ```
    cat /boot/config-'uname -r' | grep CONFIG_SECCOMP=
    ```
    如果在引导配置目录中搜索`CONFIG_SECCOMP`，它应该有一个值`y`:
    ```
    CONFIG_SECCOMP=y
    ```
2.  Use the `docker info` command to ensure that Docker is using a profile:
    ```
    docker info
    ```
    在大多数情况下，您会注意到它正在运行默认配置文件:
    ```
    …
    Security Options:
      seccomp
       Profile: default
    …
    ```
    我们已经减少了`docker info`命令的输出，但是如果你寻找`Security Options`标题，你应该在你的系统上看到`seccomp`。如果您希望关闭此功能，您需要将`CONFIG_SECCOMP`的值更改为`n`。
3.  Run `security-app` to see whether it has also been running with a `seccomp` profile. Also, search for the word `Seccomp` in the `/proc/1/status` file:
    ```
    docker run -it security-app grep Seccomp /proc/1/status
    ```
    `2`值将显示容器一直以`Seccomp`轮廓运行:
    ```
    Seccomp:    2
    ```
4.  There may be some situations where you want to run a container without a `seccomp` profile. You may need to debug a container or the application running on it. To run the container without using any `seccomp` profile, use the `–-security-opt` option of the `docker run` command and specify that `seccomp` will be unconfined. Do this now with your `security-app` container to see the result:
    ```
    docker run -it --security-opt seccomp=unconfined security-app grep Seccomp /proc/1/status
    ```
    `0`值将显示我们已成功关闭`Seccomp`:
    ```
    Seccomp:    0
    ```
5.  创建自定义配置文件也不是很困难，但是可能需要一些额外的故障排除来完全理解语法。首先，测试`security-app`容器，看看我们是否可以在命令行中使用`chown`命令。然后，您的自定义配置文件将停止使用此命令:
    ```
    docker run -it security-app sh
    ```
6.  The current `seccomp` profile running as the default should allow us to run the `chown` command, so while you have access to the running container, test to see whether you can create a new file and change the ownership using the `chown` command. Run the long listing of the directory at the end to verify that the change has taken place:
    ```
    /# touch test.txt
    /# chown 1001 test.txt
    /# ls -l test.txt
    ```
    这些命令应该提供如下输出:
    ```
    -rw-r--r--    1 1001      users        0 Oct 22 02:44 test.txt
    ```
7.  通过修改默认配置文件创建您的自定义配置文件。使用`wget`命令从本书的官方 GitHub 帐户下载自定义配置文件到您的系统中。使用以下命令重命名下载的自定义配置文件`new_default.json` :
    ```
    wget https://raw.githubusercontent.com/docker/docker/v1.12.3/profiles/seccomp/default.json -O new_default.json
    ```
8.  Open the `new_default.json` file with your text editor and, although there will be a large list of configurations, search for the specific configurations that control `chown`. At the time of writing, this was located on *line 59* of the default `seccomp` profile:
    ```
    59                 {  
    60                         "name": "chown",
    61                         "action": "SCMP_ACT_ALLOW",
    62                         "args": []
    63                 },
    ```
    `SCMP_ACT_ALLOW`动作允许运行该命令，但是如果您从`new_default.json`文件中删除*第 59 行*到*第 63 行*，现在应该会阻止我们的配置文件允许运行该命令。删除这些行并保存文件以备我们使用。
9.  如本练习的*第 4 步*一样，使用`–-security-opt`选项，并使用我们编辑的`new_default.json`文件指定现在运行的映像:
    ```
    docker run -it --security-opt seccomp=new_default.json security-app sh
    ```
10.  执行与本练习的*步骤 6* 中相同的测试，如果我们的更改有效，`seccomp`配置文件现在应该会阻止我们运行`chown`命令:
    ```
    /# touch test.txt
    /# chown 1001 test.txt
    chown: test.txt: Operation not permitted
    ```
只需少量的工作，我们就可以创建一个策略来阻止恶意代码或攻击者更改我们容器中文件的所有权。虽然这是一个非常基本的例子，但它让您知道如何开始配置`seccomp`配置文件，以根据您的需求对其进行微调。
## Activi ty 11.01:为全景徒步应用设置 seccomp 配置文件
全景徒步应用进展顺利，但本章已经表明，您需要确保用户可以在容器上进行的操作是有限的。如果有一种方法可以让攻击者访问容器，那么您需要设置一些安全措施来防范可能的攻击者。在本练习中，您将创建一个`seccomp`配置文件，该文件可与应用中的服务一起使用，该文件将阻止用户创建新目录、终止容器上运行的进程，最后，通过运行`uname`命令了解运行容器的更多详细信息。
完成本活动所需的步骤如下:
1.  获取默认`seccomp`配置文件的副本。
2.  在配置文件上找到将禁用`mkdir`、`kill`和`uname`命令的特定控件。
3.  运行全景徒步应用的服务，并确保新的配置文件应用于容器。
4.  Access the container and verify that you are no longer able to perform the `mkdir`, `kill`, and `uname` commands that have been blocked in the `seccomp` profile. For example, if we perform the `mkdir` command on our new image with the new profile added, we should see a similar output to the following:
    ```
    $ mkdir test
    mkdir: can't create directory 'test': Operation not permitted
    ```
    注意
    此活动的解决方案可以通过[这个链接](16.html#_idTextAnchor347)找到。
## Activi ty 11.02:扫描您的全景徒步旅行应用映像以查找漏洞
我们一直在使用其他用户或开发者提供的全景徒步应用的基础映像。在本练习中，您将需要扫描映像中的漏洞，并查看它们是否可以安全使用。
完成本活动所需的步骤如下:
1.  确定用于扫描映像的服务。
2.  将您的映像加载到准备扫描的服务中。
3.  扫描映像，查看映像上是否存在任何漏洞。
4.  Verify whether the image is safe for use. You should be able to perform an evaluation check in Anchore and see a pass status similar to the following output:
    ```
    Image Digest: sha256:57d8817bac132c2fded9127673dd5bc7c3a976546
    36ce35d8f7a05cad37d37b7
    Full Tag: docker.io/dockerrepo/postgres-app:sample_tag
    Status: pass
    Last Eval: 2019-11-23T06:15:32Z
    Policy ID: 2c53a13c-1765-11e8-82ef-23527761d060
    ```
    注意
    此活动的解决方案可以通过[这个链接](16.html#_idTextAnchor348)找到。
# 总结
这一章是关于安全性的，当我们使用 Docker 和我们的容器映像时限制风险，以及我们如何使用 Docker 安全性迈出第一步。我们研究了以根用户身份运行容器进程的潜在风险，并了解了如果攻击者访问正在运行的容器，我们如何进行一些小的更改来防止出现这些问题。然后，我们进一步研究了如何通过对映像使用签名证书，然后对我们的 Docker 映像实现安全扫描来信任我们正在处理的映像。
在本章的最后，我们开始使用安全配置文件。我们使用了两种最常见的安全配置文件——AppArmor 和`seccomp`——在我们的 Docker 映像上实现这两种配置文件，并查看减少对容器的特定访问的结果。下一章将研究在运行和创建 Docker 映像时实现最佳实践。