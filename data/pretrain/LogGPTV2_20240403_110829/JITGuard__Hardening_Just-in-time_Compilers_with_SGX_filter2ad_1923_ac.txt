control flow between the static application code and the JIT code
without disclosing the address of the JIT code through trampolines.
Figure 5 shows our design of JITGuard in more detail:
1 We use SGX to isolate the JIT compiler and its data from the
rest of the application. As a consequence the attacker can no longer
exploit memory-corruption vulnerabilities in the host process to
launch attacks against the JIT compiler, as described in Section 3.
2 We randomize the JIT code and JIT stack memory addresses to
protect against code-injection and code-reuse attacks and prevent
the attacker from locating the JITGuard-Region. Even though our
randomization does not prevent an adversary from injecting code,
e.g., by compiling a specially crafted JavaScript program [6, 36],
the attacker cannot disclose the address of the injected code which
is required to redirect the control flow to the injected code. The
same holds for code-reuse attacks where the attacker requires the
addresses of the gadgets.
3 We leverage segmentation registers to build an indirection
layer to prevent information-disclosure attacks that target the tran-
sition between static and JIT code. This is necessary since the
attacker is able to disclose data at known addresses (see Section 4).
Figure 5: Design of JITGuard
Figure 6: The same region of physical memory is mapped twice in the virtual
memory with different permissions.
Thus, we utilize trampolines which contain jump instructions that
obtain the address of the JIT code using an offset from a segmen-
tation register. The content of the segmentation register itself is
available only through a system call, hence an adversary needs to
launch a successful attack against the JIT compiler to disclose it. The
compiler needs to be able to efficiently update the indirection layer;
however, using read-write-executable permissions would allow an
attacker to simply inject new code into the trampoline mapping. To
allow the former without the latter, we employ a double mapping
of the trampolines (see Figure 6).
Using this technique, the same region in physical memory 4 is
mapped twice in the virtual address space of the process. The first
mapping 5 is executable but not writable. The second mapping 6
is writable but not executable, and its address is protected through
randomization. The compiler uses the second mapping to update
the trampolines (e.g., when a new function is compiled) and the
indirection layer, while the (potentially vulnerable) static code uses
the executable trampoline mapping. Although an adversary has
access to the executable mapping, the address of JIT code cannot be
leaked through the executable trampoline since it is protected using
ApplicationJITGuard-RegionRandomizedSGX EnclaveIndirectionInterpreterJIT CompilerIRBytecodeStatic Code JITStackNativeStackTrampolinesDataCodeProtectionJITCodeTrampolinesDouble Mapping123Legend:Garbage CollectorJITGuardVirtualMemoryPhysicalMemoryRXRW564VulnerablecodeTrusted codeSession K4:  Secure EnclavesCCS’17, October 30-November 3, 2017, Dallas, TX, USA2410the segmentation register. In the following we present a proof-of-
concept implementation of JITGuard based on the JavaScript engine
of Firefox called SpiderMonkey. We will explain in detail how we
tackle the challenge of decomposing the JIT engine, adapting the
JIT compiler to SGX, and preventing the JIT compiler and JIT code
from leaking the location of the JITGuard-Region.
Our modifications consist of 2 673 additional lines of code, com-
pared to 521 000 lines of C/C++ code in the SpiderMonkey source.
6 ISOLATING THE JIT COMPILER WITH SGX
The core component of JITGuard is an SGX enclave which contains
the code and data of the JIT compiler and the randomization se-
crets. We will use enclave to refer to this specific enclave. While
enclaves are well suited for isolating trusted code and data, the
SGX threat model assumes everything outside of the enclave is
untrusted. Therefore, SGX requires a context switch to execute
code outside of the enclave. This is an expensive operation and
makes the straightforward approach of isolating the whole JIT en-
gine (including the generated JIT code) impractical because the JIT
code frequently interacts with static application code. In particular,
we measured up to 600 interactions per millisecond in our tests.
However, our threat model (Section 4) is different to that of SGX:
we assume that the code running outside the enclave (static code
and operating system) is not malicious. This allows us to relax
some of the constraints of regular enclave applications. Instead of
using SGX to isolate the full JIT engine, we use it to isolate the
security-critical components (JIT compiler), and to securely store
the randomization secret. This approach enables us to bootstrap
the JITGuard-Region, whose address is unknown to the attacker.
By emitting the JIT code to the JITGuard-Region it can be executed
securely outside the enclave, and we avoid disclosing the location
of the JITGuard-Region by using trampolines. Thus, the JIT code
can interact with the static application code without requiring SGX
context switches.
In the following, we provide more details on how we initialize
JITGuard and the interaction of the JIT compiler in the enclave
with the rest of the JIT engine.
6.1 Initialization
JITGuard is initialized at the start of the program before the attacker
can interact with the vulnerable application. Hence, we can launch
the initialization phase from the static code part of the application.
The initialization component of JITGuard first allocates two mem-
ory regions, the trampoline and the JITGuard-Region, and then
starts the enclave.
JITGuard chooses the location of the JITGuard-Region perfectly
at random and uses it to store the JIT code, the JIT stack, and the
writable mapping of the trampolines. The protection of the JIT
code and stack is based on the assumption that the location of the
JITGuard-Region remains secret throughout the execution of the
application. JITGuard achieves this by passing the randomization
secret to the enclave and setting all memory that was used during
the initialization phase to zero. Henceforth, all memory accesses to
the JITGuard-Region are mediated through the enclave to prevent
the address from being written to memory which is accessible to
the attacker.
The second memory region is the executable mapping of the
trampolines. This double mapping of the trampolines is necessary
because JITGuard needs to modify the trampolines during run time
and the attacker can infer the address of the executable trampo-
lines based on pointers used by the static code. Without this double
mapping, a less secure solution would be to switch the memory
region between read-writable and read-executable. However, an ad-
versary could still exploit the short time window while the memory
is writable to inject malicious code into the trampoline region [54].
We provide more details on our trampoline mechanism in Section 7.
Finally, JITGuard sets up the JIT compiler enclave providing the
address of the JITGuard-Region as a parameter. As mentioned in
Section 2.2, the JIT engine consists of different components. How-
ever, we encapsulate only the JIT compiler inside an enclave. While
switching between enclave and host execution has some overhead,
we carefully designed JITGuard to achieve practical performance,
by executing the rest of the components of the JIT engine outside
the enclave. In our security analysis (Section 8) we explain how
JITGuard securely interacts with the host process.
6.2 Run Time
JITGuard requires a few modifications to the JIT compiler: (1) to be
compatible to SGX, (2) to prevent disclosure of the location of the
JITGuard-Region, and (3) to emit the JIT code to the randomized
memory region.
6.2.1
SGX Compatibility. To make the JIT compiler compatible
with SGX we created a custom system call wrapper and adjusted
the internal memory allocator. As mentioned in Section 2.1, the
operating system is considered untrusted in the SGX design, which
is why the code inside of an enclave cannot use the system call in-
struction. To issue a system call, the enclave code has to first switch
execution to the host process, and then call a wrapper function
of a system library. The SGX developer framework provides func-
tionality to easily call outside functions from the enclave. Outside
functions can then invoke any system call. However, for system
calls in JITGuard we abstained from using the functions generated
by the SDK for two reasons: first, the context switch function of
the developer framework saves the complete state (i.e., all registers)
to enclave memory and then clears the content of all registers to
prevent information leakage to the host process or the operating
system. This is not necessary in our case because we consider the
attacker can only access application memory; second, by issuing a
system call through a library function, data might be leaked outside
of the enclave which then becomes accessible to the attacker. To
avoid both cases, we implemented our own system call wrapper
which stores the required parameters in the designated registers
inside the enclave, and then exits the enclave to issue the syscall
instruction (without storing and clearing the state or writing any-
thing to the application memory). Further, we adjusted the internal
memory allocator of the JIT compiler to use pre-allocated memory
within the enclave to avoid leaking information to the application
memory.
6.2.2
Leakage-resilience. Another challenge is to prevent the JIT
compiler from leaking the address of the JITGuard-Region. Since
the JIT compiler consists of a huge code base it is hard to verify that
Session K4:  Secure EnclavesCCS’17, October 30-November 3, 2017, Dallas, TX, USA2411no instruction leaks this address. We avoid manual inspection of
the whole source code of the JIT compiler by employing a fail-safe
technique that is based on a fake pointer. In particular, JITGuard
converts the real pointer to the JITGuard-Region into a fake pointer
by adding a random offset during the creation of the enclave. We
then modify each function that requires access to the JITGuard-
Region (e.g., to emit the JIT code or modify the trampoline) to first
convert the fake pointer back to the original pointer. This happens
as late as possible, e.g., in the very C++ statement that writes a jump
target to the JIT-compiled code page. At the same time we verify
that the code which uses the pointer does not leak the pointer to
memory outside of the enclave. This technique is fail safe because
even if a non-verified function within the enclave would leak the
address, it would only leak the fake pointer. However, the fake
pointer is useless to the attacker without the random offset, which
is stored securely inside enclave memory.
6.2.3
JIT Code Generation. The JavaScript interpreter con-
stantly profiles the code while it executes it. Once the profiler
determines it would benefit the performance to compile the inter-
preted code into native code, it calls the JIT compiler. In JITGuard
this requires the interpreter to issue a context switch to the enclave
and to pass the interpreted code as a parameter. The advantage
of this design is that we have a single point of entry for the JIT
compiler. SGX allows the enclave to access the host memory, so
the compiler in the enclave can directly access the data in the host
memory without the need to copy the data first.
In addition to that, the JIT compiler requires a small number of
functions from the host, e.g., such as timing information, for which
we add dedicated enclave exit points to switch execution to the
host process.
6.3 SpiderMonkey
The previously mentioned implementation details are not specific to
SpiderMonkey, but are valid for most JIT compilers. In the following
we discuss some SpiderMonkey-specific aspects we encountered
while implementing JITGuard.
SpiderMonkey features a second JIT compiler, called IonMonkey.
IonMonkey takes the native code of the regular JIT compiler, called
the Baseline compiler, and speculatively optimizes it (e.g., assuming
that the variables will have the same type as previous invocations).
For our proof-of-concept implementation of JITGuard we disabled
IonMonkey. However, from a conceptual point of view, IonMonkey
can be extended in the same way as the Baseline compiler.
Further, SpiderMonkey recently adopted W⊕X for the JIT code
which simplified extending SpiderMonkey with JITGuard. The rea-
son is that JIT compilers which do not employ W⊕X expect to be
able to modify the JIT code at any time, and thus modifications
are spread over multiple functions. In JITGuard the native code
is emitted to the JITGuard-Region, which requires us to adjust all
functions that modify the JIT code. This is limited to a small number
of functions in SpiderMonkey. On the other hand, JIT compilers
that do not support W⊕X can be extended with JITGuard as well,
although we would expect additional engineering effort because of
the more widespread modifications to the JIT code.
Figure 7: JITGuard mediates control-flow transfers from static code to the JIT
code through call trampolines. In this way, function pointers to the random-
ized JIT region are hidden from an adversary.
7 TRANSFERRING CONTROL FLOW
BETWEEN JIT AND STATIC CODE
JITGuard randomizes the memory location of the JIT code, JIT
stack, and the writable trampoline mapping to protect them from an
adversary with access to the host process memory. However, during
run time the JIT code closely interacts with the static code inside
the host process. Indeed, we counted the number of control-flow
switches between the static code and the JIT code and measured up
to 600 times per millisecond in our testing. Since the attacker has
access to the host memory, we must prevent leaking any pointers
from the randomized region into the non-randomized part of the
host memory. This is challenging, because usually JIT and static
code use the same stack during execution.
To cleanly isolate randomized JIT code from static code, we also
switch to a separate stack, which is hidden inside our randomized
region. In this way, the randomized stack can be used safely during
JIT execution and an adversary cannot recover a return pointer to
the JIT code from the native stack. In the following, we describe
how JITGuard securely handles the transition from static code to
JIT code execution, and JIT code to static code execution.
7.1 Static Code calls JIT Code
Static code calls JIT code functions when switching from interpreted
to optimized script code. This is depicted in Figure 7.
In Step 1 the static code initiates the switch to the JIT code
by calling a trampoline. Each trampoline targets a single JIT code
function.
If the pointers to the JIT-compiled functions were written as
constants directly in the trampoline code, an adversary could easily
disclose these pointers and compromise the randomized code region.
To prevent this, we set up a x86 segment at initialization time2 so
that it starts at a random address. Hence, we only need to write an
offset into that segment to the trampoline. In Step 2 the trampoline
fetches the address of the function inside the randomized area
from a jump table in the randomized segment. Each trampoline
consists of a single jump instruction that retrieves the address using
a constant offset in the segment, e.g., jmp *%gs:(0x2a00). The
2While memory segmentation is not enforced in the 64 bit modes of the x86 processor,
segment registers can still be used to hold such base addresses. This is used on some
operating systems, e.g., to implement fast access to per-cpu data [35]. We leverage the
segmentation register gs, which is not used otherwise.
➁JMP *(segReg + offset)Call TrampolineStatic CodeCALL tr_jit_funfun:Direct disclosureoffset :  address of jit_funJump TableJIT Code➀jit_fun:SWAP_STACKASM_INSNative Stackrsp + 0x00 : valuersp + 0x08 : valuersp + 0x10 : valueJIT Stackrsp + 0x00 : valuersp + 0x08 : valuersp + 0x10 : value➂Session K4:  Secure EnclavesCCS’17, October 30-November 3, 2017, Dallas, TX, USA2412it will store the return address to the JIT code in a jump table, that
is protected because it is located inside the randomized segment.
Furthermore, it will switch the stack pointer to the native stack,
save the offset between the two stacks in the randomized segment,
and set the return address on the native stack to point to the return