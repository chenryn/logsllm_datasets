title:Customizing Dependability Attributes for Mobile Service Platforms
author:Jun He and
Matti A. Hiltunen and
Richard D. Schlichting
Customizing Dependability Attributes for Mobile Service Platforms
Jun He
Matti A. Hiltunen
Richard D. Schlichting
Department of Computer Science
University of Arizona
Tucson, AZ 85721, USA
PI:EMAIL
AT&T Labs-Research
180 Park Avenue
Florham Park, NJ 07932, USA
(cid:0)hiltunen, rick(cid:1)@research.att.com
Abstract
Mobile service platforms are used to facilitate access to
enterprise services such as email, product inventory, or de-
sign drawing databases by a wide range of mobile devices
using a variety of access protocols. This paper presents a
Quality of Service (QoS) architecture that allows ﬂexible
combinations of dependability attributes such as reliabil-
ity, timeliness, and security to be enforced on a per ser-
vice request basis. In addition to components that imple-
ment the underlying dependability techniques, the architec-
ture includes policy components that evaluate a request’s
requirements and dynamically determine an appropriate ex-
ecution strategy. The architecture has been integrated into
an experimental version of iMobile, a mobile service plat-
form being developed at AT&T. This paper describes the de-
sign and implementation of the architecture, and gives ini-
tial experimental results for the iMobile prototype.
1. Introduction
Mobile service platforms such as Nokia One [13], IBM
WebSphere Everyplace Access [3], and AT&T iMobile [2]
are designed to facilitate access to back-end enterprise ap-
plications by a wide range of mobile devices using a vari-
ety of access protocols. For example, in the case of iMo-
bile, users can access corporate services such as Microsoft
Exchange email servers or personnel databases using cell
phones, PDAs, or laptops based on protocols as diverse
as SMS, instant messages (IM), and HTTPS. The value of
these platforms is that they act as intermediaries, hiding dif-
ferences between devices and protocols so that services can
be accessed transparently with minimal changes to either
devices or services.
While current mobile service platforms solve many of
the problems related to implementing the basic function-
ality of service requests, they pay less attention to ensur-
ing non-functional or Quality of Service (QoS) attributes.
In this context, QoS refers not just to traditional network-
related metrics such as delay and jitter, but also dependabil-
ity attributes such as reliability, availability, and security.
Even when platforms do address these issues—security is
common, for example—it is usually done in isolation rather
than as part of a single framework that allows different types
and variations of attributes to be treated in a uniﬁed manner.
Having this type of control is especially important in mo-
bile service platforms given the need to support QoS for a
wide range of request types, as well as devices, access pro-
tocols, and services.
This paper presents a QoS architecture that provides the
ﬂexibility needed to to support variable QoS requirements
for mobile service platforms. The architecture is based on
the concept of a QBox, a software component that is added
to proxies in a mobile service platform to enforce QoS.
A QBox is conﬁgured in turn from ﬁne-grain qoslet mod-
ules that implement the actual QoS for service requests,
and a policy engine that evaluates and manages QoS poli-
cies. Each qoslet is designed to implement a single variant
of a given QoS attribute, which allows QBoxes to be con-
ﬁgured to handle a wide variety of requirements and situa-
tions. QBoxes and qoslets are implemented using Cactus, a
system for building highly conﬁgurable protocols and ser-
vices [17]. This ﬂexible QoS architecture has been incor-
porated into an experimental version of iMobile, a mobile
service platform from AT&T Labs–Research that is being
developed as the foundation for potential commercial ser-
vice offerings in this space. The primary goal of this paper
is to describe the overall design and implementation of the
QoS architecture, with a speciﬁc focus on dependability at-
tributes.
2. QoS in Mobile Service Platforms
Mobile service platforms allow a range of mobile de-
vices to access corporate or Internet services. Services are
typically accessed using a request-reply paradigm, where
the user issues a request to a service and receives a response.
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 22,2021 at 04:18:58 UTC from IEEE Xplore.  Restrictions apply. 
Proxy
Front
end
Mobile
device
Mobile
device
Mobile
device
Network
Back
end
Services
Figure 1. Split proxy architecture
Note that the response may consist of a larger number of un-
derlying network messages (e.g., request for a audio ﬁle).
Given the independence of service accesses, the goal of our
architecture is to provide customized QoS for individual re-
quest/response pairs. This differs from many QoS architec-
tures [12] and conﬁgurable protocol frameworks [7, 14],
where the same QoS is provided for all messages in a ﬂow,
session, or connection.
Mobile service platforms. Mobile service platforms are
often based on a proxy (or gateway) architecture to han-
dle the limited resources and capabilities of mobile devices.
The proxy provides an interface for different mobile devices
to access Internet services that are not designed to be ac-
cessed by such limited devices. The proxy typically pro-
vides content transformation to accommodate device lim-
itations, as well as translation between the protocols sup-
ported by the mobile devices and the access protocols sup-
ported by the services.
Proxy functionality is sometimes split into two, or poten-
tially even more, separate components that are placed at dif-
ferent locations in the network (ﬁgure 1). For example, the
iMobile EE (Enterprise Edition) [2] places the wireless ac-
cess protocols (devlets) at the proxy front ends (called gate-
ways in iMobile) and the service access protocols (infolets)
at the proxy back ends (called servers in iMobile). Both the
proxy front and back ends are typically replicated for scal-
ability and fault tolerance. Such a split proxy architecture
makes it possible to place front ends close to the actual mo-
bile users and back ends close to (or even co-located with)
the services. The beneﬁts of such an arrangement include
fast response time if the service contents are cached at the
front end, as well as the ability of the proxy to use special-
ized communication channels between front and back ends
for high priority service requests. This paper focuses on the
split proxy architecture. Note that this paper does not ad-
dress the issues of routing trafﬁc from the client’s mobile
devices to the closest proxy in the wireless network nor is-
sues such as handoff from one proxy to another. We assume
such issues are handled by the networking infrastructure.
Quality of Service. Simply providing access to the ser-
vices may not always be sufﬁcient. In particular, the user or
the service accessed may have requirements on how well,
e.g., how quickly or reliably, the service is provided. Qual-
ity of Service (QoS) is the set of attributes that describe the
qualitative aspects of how well the service is provided rather
than the basic functionality of the service. In this paper, we
consider a range of QoS attributes including performance,
reliability, availability, and security.
The QoS requirements of different service requests to
a mobile service platform can be very different. For ex-
ample, the response time requirements may vary based on
user identity (or user group identity), service accessed, and
the user’s access device/protocol. The security requirements
may also vary based on the user access protocol; for exam-
ple, a user attempting to access a highly conﬁdential service
using an insecure instant messaging (IM) protocol may be
denied even though they generally have the right to access
the service. Reliability requirements may also vary based on
the criticality of the service; for example, the reliability re-
quirements for an entertainment service may not be very
high while the similar requirements for an enterprise ser-
vice may be very high. In general then, given that a mobile
service platform typically provides service to large number
of different users and provides access to a number of differ-
ent services, the platform must be able to implement multi-
ple different combinations of QoS attributes.
Implementing QoS. QoS can be provided using a com-
bination of resource allocation and QoS algorithms. Re-
source allocation is used to reserve sufﬁcient resources
(e.g., network bandwidth, memory, CPU) to ensure that a
service is provided with sufﬁcient QoS, in particular, perfor-
mance and reliability. QoS algorithms are software mech-
anisms such as request prioritization, authentication, ad-
mission control, access control, retransmission, encryption,
compression, and load balancing.
While QoS techniques could be implemented in many
different parts of the system, it is often impossible to mod-
ify either of the endpoints, i.e., the mobile device or the ser-
vice. For example, if the users are using SMS (Short Mes-
sage Service) on their cell phones to access services, it may
be impossible or infeasible to introduce new code on the
cell phones. Similarly, the service may be a legacy service
or provided by a third party, making it impossible to change.
Thus, to support a wide range of devices and services, the
proxy is often the only component that can be modiﬁed to
provide QoS for service requests. Moreover, doing QoS en-
forcement in the proxy also simpliﬁes implementation given
that it is essentially a central point of control. Therefore, in
this paper, we propose to extend the proxies with a QoS ar-
chitecture based on QBoxes (ﬁgure 2). In this ﬁgure, note
that the split proxy now delegates communication between
the front and back end to the QBox, which can create mul-
tiple, potentially independent, communication channels be-
tween the front and back ends. The internal structure of a
QBox is described in detail below.
The quality of the service received by the user depends
Proceedings of the 2004 International Conference on Dependable Systems and Networks (DSN’04) 
0-7695-2052-9/04 $ 20.00 © 2004 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 22,2021 at 04:18:58 UTC from IEEE Xplore.  Restrictions apply. 
Proxy
Front End
QBox
Mobile
device
Mobile
device
Mobile
device
Back End
QBox
Services
Network
Network
Figure 2. QBox in proxy architecture
on all the network links and components on the path from
the mobile device to the target service and back to the de-
vice. Given that the QoS attributes are implemented at the
proxy, it is not possible to ensure all of these attributes end
to end. In particular, any response time and reliability at-
tributes may be violated by a slow or unreliable wireless
link from the mobile device to the proxy front end. Simi-
larly, there is no way to ensure that execution of the service
maintains the required attributes. However, the split proxy
architecture allows the proxy front end to be brought close
to the user and the back end brought close to the service
to minimize the uncontrolled part of the service execution.
Certain issues with the target services can also be masked
by the QoS algorithms at the QBox. For example, by mea-
suring the reliability and response time of the various ser-
vices, QBox execution can be adjusted to achieve the qual-
ity goals. In addition, it may be possible to use multiple
or alternative service providers, to cache replies for perfor-
mance improvements, or to do trafﬁc shaping to ensure that
the load imposed on a service does not exceed its capacity.
Such QoS problems can also be alleviated if SLA (service
level agreements) are secured with the wireless connectivity
and service providers. Note that the QBox approach could
also be used in a single proxy architecture, although not all
of the QoS algorithms are relevant in this case.
QoS architecture. The architecture consists of three types
of components: Policy Determination, Policy Enforcement,
and QoS mechanisms (qoslets). Policy processing (ﬁgure 3)
is done as a two-level process, where Policy Determination
is responsible for determining what is required for a speciﬁc
request and Policy Enforcement is responsible for determin-
ing how this goal can be achieved under the current sys-
tem conditions. Essentially, Policy Enforcement is in charge
of mapping the high-level policy requirements into parame-
ters used by the QoS mechanisms. The parameters are con-
veyed to the qoslets as attributes attached to the request and
reply messages. For example, a retransmission qoslet may
read parameters that specify the number of times a request
should be retransmitted and the timeout period to use be-
tween retransmissions.
Policy Determination receives high-level QoS policy re-
quirements that specify rules such as “service requests from
user A to service S should have response time no larger than
500 ms.” Given this information, Policy Determination then
Service request
QBox
Policy Determination
Service request
with QoS requirements
Policy Enforcement
Service request
with processing directives
Qoslets: QoS mechanisms
QoS policy
specification
System
measurements
Figure 3. QoS architecture
evaluates each service request based on such elements as
the user identity, the service requested, and the user’s mo-
bile device and access protocol, and assigns high-level at-
tributes to the request based on the policy. Typical high-
level attributes might include whether the request is allowed
or not based on security policies; the desired level of relia-
bility, security, and priority; and the required response time.
The policy also speciﬁes what to do when requirements can-
not be satisﬁed, e.g., the response time requirement cannot
be met. For example, the policy might specify that the re-
quest should be dropped, that it be processed with lower
level of security (e.g., no encryption) to reduce processing
time, or that it should be processed even if it will be late.
Policy representation and evaluation are orthogonal to the
overall design of the QoS architecture, and are the subject
of future work.
Once high-level attributes are determined, Policy En-
forcement takes these attributes, information about avail-
able qoslets, and measurements of the current system
state—such as system load, and channel reliability and re-
sponse times—and calculates the lower-level request at-
tributes actually used by the qoslets. For example, based
on the reliability requirement and the current measure-
ments of a channel’s reliability and response time, it could
calculate the attributes for the number of retransmis-
sions and retransmission timeout. Note that the two-level
policy architecture allows the high-level policy to be inde-
pendent of system measurements and how the guarantees
might be implemented.
Figure 4 presents a more detailed picture of the QBox