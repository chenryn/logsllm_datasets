fetch_request (
self,request,uri, handle_response,
method=self.request.method, body=body,
headers=self.request.headers, follow_redirects=False,
allow_nonstandard_methods=True)
except tornado.httpclient.HTrPError as e:
If hasattr (e, *response*) and e.response:
handle_response (e.response)
else:
self,vrite('Inteznal server error:\n* + str(e))
self,finish ()
完整的 demo 代码请参考：https://github.com/netxfly/passive_scan
（4）vpn式的扫描器
与前一种类似，不过该种扫描需要播人一个特定的VPN中，在vpn服务器中会设置一
个透明代理，将80和443端口的数据转发到透明代理中，之后测试者每访问一个URL也
会放到后台去扫描，以下的golang代码就实现了一个透明代理：
package nain
import  (
"flag*
"fmt.*
"github con/netxly/Transparent-Proxy-Scannex/hypecfox/proxy"
"github, com/netxfly/Transparent -Proxy-Scanner/hyperfox/tools/capture*
---
## Page 205
第9章漏洞扫描193
*strings*
// "github ,com/netxfly/Transparent=Proxy-Scan
"github , com/toolkits/slfce"
“1og”
"net/http*
"net/urI*
"tine*
"os"
"upper. io/db*
"upper io/db/mongo*
const version 
*0. 9"
const (
defaultAddress = *0.0 .0.0'
defaultPort
= u.nt (3129)
defaultSSLPort
= uint (3128)
const (
Host
"127.0.0 .1*
Port
"27017"
"xsec"
Passvord
"x@xsec. io*
Databa.se
"passive_scan"
var settings
Addres51
 = mongo, ConnectionURL {
db,Host (Host) , // MongoDB hostname .
Database: Database,
// Database name.
User:
User,
// Optional user nane.
Password: Password,
 // Optional user password.
flagAddress
= flag,String (*1", defaultAddress, *Bind address.*)
flagPort.
- flag.Uint (*p*, defaultPort, “Port to bind to, default is 3129)
flagSSLPort
= flag.Uint (*s*, defaultSSLPort, *Port to bind to (SSL mode),
default 1s 3128.*)
flagSSLCertFile - fag.String ("o", "*, "Path to root CA certificate,")
flagSSLKeyFile = flag.String ("k", **, "Path to root CA key.")
---
## Page 206
194技术篇
sess db.Databa.8e
co1  db.Co1lection
var [
"zip", "rar", "ico",
“gz*, *7z*, "tgz", “bmp”, “pdf*, "avi", “mp3*, "mp4", “htm", "htn1", "shtn1")
// dbsetup sets up the database.
func dbsetup() error (
var err error
// Attemping to establish a connection to the database.
sess, err = db,Open (mongo.Adapter, settings)
fnt.Println (sess)
if err I= nil [
1og.Fatalf (*db,Open [) : lqn", err)
// Pointing to the "http_info* table.
col, err = sess,Collection (*http_info")
return n.1
// filter function
func filter (content_type stxing, rav_url string) bool{
ret := false
if strings,Contains (content_type, "text/plain*) II strings Contains
(content_type, *application/x=gzip")(
url_parsed, _ 1= url Parse (raw_url)
path := url_parsed.Path
t := stxings.Split (path[1:], ",*)
suffix := t[len (t) 1]
if lslice.ContainsString (static_resource, suffix){
ret = true
1
qex uznqex
// Parses flags and initializes Hyperfox tool
func main ()(
---
## Page 207
第9章漏洞扫描195
var err error
var sslEnabled boo1
/ / Parsing command line flags.
flag.Parse ()
// Opening database,
if err = dbsetup (); err != ni1 ↑
Log.Fatalf (*db: lq*, err)
// Renember to close the database session,
defer sess.Close ()
// Is SSL enabled?
if *flagSSLPort > 0 ss *fagSSLCertFile ↓-
ss1Enabled - true
// User requested SSL mode.
if sslEnabled (
if *flagSSLCertFile
flag, Usage ()
1og. Fatal (ErrMissingSSLCert)
if *flagSSLKeyFile ==
lag Usage ()
1og.Fatal (ErrMissingSSLKey)
08.Setenv (proxy.EnvSSLCert, *flagSSLCertFile)
08.Setenv (proxy,EnvSSLKey, *flagSSLKeyFile)
// Creatig proxy.
p:= proxy.NewProxy ()
/ / Attaching logger.
/ / p .AddLogger (logger ,Stdout (1)
// Attaching capture tool.
res := make (chan capture.Response, 256)
p AddBodyWriteCloser (capture ,Nev (res))
---
## Page 208
196技术篇
// Saving captured data with a goroutine
go func() (
for [
select I
ca8e I ;=  1383
() {
if ss1Enabled (
}()oung ob
1u = 12o r((zogssbe, *sspyfe。 *p1 yruadg*g) saxeas*d 1 xxe 1
cerr <- err
}()
err = c=cerr
log.Fatalf (ErrBindFailed.Error (), err)
完整的实现代码请参考GitHub：https://github.com/netxfly/Transparent-Proxy-Scanner
3.全被动扫描
部署方式上类似于IDS，不主动爬URL，而是对B/S&C/S双向交互的数据流进行扫
---
## Page 209
第9章漏洞扫描197
描以期发现漏洞，全被动扫描的特点如下：
1）不需要联网，不会主动爬取URL，不会主动发出任何数据包。
2）更关注漏洞感知，而不是入侵行为。
何时需要被动扫描？在日常的安全管理中，经常有一些业务部门会引发安全管理之痛，
例如：
口业务部门没有经过安全部门的安全扫描和评估就擅自上线，结果上线的服务器或站
点被人侵了。
口业务上线时确实经过安全扫描和评审环节，当时证明是安全的，但在业务运营的过
程中，经过几次更新，把安全漏洞更新到生产环境中了。
口部分业务因人员更换或离职变成了无人管理的业务，也有可能资产不在公司的资产
列表中，因长期无人维护被攻击者钻了空子。
有了被动式扫描器后，可以对这些处于灰色地带的资产进行防护。
9.3如何应对大规模的资产扫描
近年来云计算和大数据很火，不少厂商的安全部门也纷纷引入了大数据及分布式运算，
比如安全日志分析、通过大数据反爬虫、用流量镜像中的URL进行Web扫描、分布式扫描
器等。普通的扫描方式在数方或几十方台服务器的环境下会遇到以下问题：
1）单台或数台扫描器仍不足以覆盖海量IDC，完成全网扫描需要很多资源。
2）大量的并发扫描占用网络带宽，高峰时影响用户体验，执行深度检测可能会使应用
或服务直接岩掉。
3）大量的误报以及中低风险漏润会使人工解读和后续整理难上加难。
因此海量IDC规模下漏洞扫描需要寻求高效的方式，总体思路是减少工作量，有几个
方法：
1）简化漏润评估链，减少需要扫描的任务。
2）减少漏洞扫描的网络开销和被检查者的性能损耗。
3）减少漏润扫描的种类。
---
## Page 210
198技术篇
4）减少手工确认的工作量。
在实践中，需要从以下几方面进行优化：
1）不做全网的漏洞扫描，先做端口扫描，这样做的前提是访问控制和纵深防御做到
位，利用ACL大幅减少攻击面，把需要漏洞扫描的端口减少到22、80、443等，开的端口
少了、全网全协议漏洞扫描就缩减为全网几个关键应用的扫描。
2）做好高危端口监控，防止“计划外”应用的滥用，这样漏洞扫描这件事就瘦身为端