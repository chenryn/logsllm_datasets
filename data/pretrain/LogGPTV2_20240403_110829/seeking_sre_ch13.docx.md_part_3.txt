    团队说："你只应致力于稳定性和可靠性。"在这两个相互竞争的优先事项之间需要取得平衡。我们的结构提供了健康的紧张和共同的责任，以做需要的事情，而不是什么可以定义由一个经理的责任。
在
Facebook，我们有一句谚语："代码赢得争论。"我们应用了类似的模型，在运维负载和新功能之间存在分歧时，让团队承担责任。当这种情况发生时，我们将
SWE 和 PE
的经理和技术主管召集在一起，与各自组织的高级领导讨论他们的观点。这些经理和技术主管提供运营指标，帮助我们了解在系统和服务中哪些不工作，以及团队将优先改进这些指标。讨论还需要讨论基于此优先级可能会延迟哪些功能。这样，所有领导者都了解对业务的潜在影响，并可以做出明智的决策。最终，我和我的
SWE
团队的同行由我们的经理协调，一起构建功能丰富、稳定且可操作的系统。由于我们所有人都在相同的层次上相遇，如果我们不做好我们的工作，我们的绩效就会受到影响。在我看来，这样的搭配给我们带来了两个领域的优势。
分散的嵌入式模型赋予我们更大的能力来影响服务的构建方式。PE 就坐在 SWE
同行的旁边。他们去他们的会议和场外；它们可用于走廊对话和关于体系结构的特别讨论。SWE
和 PE
经理都致力于服务路线图的外观、使服务更可靠以及实现增长所需的功能。它们在功能和稳定性之间妥协。
通过这种嵌入式结构，软件团队也得到了生产工程师的不断警惕，以及指出正在积极发生和需要解决的问题的交互作用。当生产中出现问题时，SWE
和 PE
会挤在一起，肩并肩地解决问题。当软件工程师轮值时，生产工程师和他们坐在一起，软件工程师也可以转身问："嘿，我不知道现在如何在生产中做这个运维。你能和我一起，帮助我，教我如何做到这一点，这样我将来才能更有效吗？"
我确信，这不是唯一有效的方法，并且可能还有其他组织模型可以以同样的方式执行，并且不需要与共存人员具有相同的报告结构。这是我们在Facebook
发现最适合自己的方式。  
大卫：  早些时候你在 PE
组织的故事中提到了轮值，但我想你说过软件工程师在轮值，PE
不在轮值状态。总是这样吗？
**佩德罗：**不，不是总是这样。我经常使用的一句话是："如果你编写代码并释放它到生产环境，*恭喜你*拥有它。"这意味着我们需要让
SWE
负责保持其服务在生产中，并承担主要轮值责任。对于我们不拥有或不直接构建的服务，PE
没有主要的轮值责任。当我们与 SWE
团队嵌入时，我们有一个共享的待命模型，并且共同承担轮值责任。在大多数情况下，它是每周轮换。有一个软件工程师在一周轮值，然后下周有一个
PE
轮值，依此类推。在某些情况下，由于认知差异或基础结构当前难以管理，某些团队会缩短几天的轮值时间。我们只有两种方案，即只有软件工程师或生产工程师可以轮值：
-   没有嵌入式生产工程师的软件工程团队。在这种情况下，他们别无选择，因为他们必须待命的服务。
-   生产工程师在环境中自主地构建一切。
**大卫：**像基础设施，DNS团队，这样的事情？
**佩德罗：**是的，PE
实际上完全拥有几个基础结构，如用于预配服务器或管理生产中的服务器更换的软件。 （FBAR）。[FBAR](https://www.facebook.com/notes/facebook-engineering/making-facebook-self-healing/10150275248698920/)
是一个自动化系统，可处理重复性问题，以便工程师（SWE 和
PE）能够专注于解决和防止更大、更复杂的站点故障。我们还构建了在维护期间自动执行服务迁移的系统，而另一个系统侧重于从头开始构造新的群集。我们拥有并构建了位于第七层的负载均衡器和
Web 服务器之间的第四层的负载均衡器。对于我前面提到的 Faraday
机架，我们构建了[增强式流量控制](http://facebook.github.io/augmented-traffic-control/)【ATC】，允许开发人员在不同的网络条件下测试其移动应用程序，轻松模拟高速的、移动运营商环境的，甚至严重受损的网络环境。
在这最后几个例子（还有其他的例子）中，我们 100%
的时间都在轮值，因为我们是构建这些系统的人。它遵循我前面描述的同一模型，其中构建和将软件部署到生产中的团队拥有它，而构建该软件的团队则有责任在软件故障时修复它。
**大卫：** 鉴于这种结构，你如何管理 PE 组织与其他团队之间的关系？
**佩德罗：**在全公司范围内，我们每六个月发送一次我们称之为脉冲调查。所问的一个问题涉及团队与其合作伙伴团队的协作情况。Facebook
已经构建了许多其他团队使用的常见软件，并且对其运维至关重要。因此，团队需要很好地协作，这包括嵌入在
SWE 团队中的 PE。调查提供综合满意度打分，告诉我们 PE
团队是否认为它与其他团队合作良好。通常来说，现在这个调查是我们可以用来缩小问题范围的具体数据。我们首先问一大堆问题。例如："这种关系是否良好？体育团队是否觉得自己有发言权？PE
是否倾听 SWE 团队减少操作负载和构建工具以解决这些问题的需要吗？PE
感觉自己被平等对待了吗？SPE 了解 PE 应该做什么工作吗？"
如果我们发现这种关系不健康，我们会与 PE 和 SWE
经理和技术人员交谈，以收集更多反馈。如果反馈表明对如何使用 PE
感到困惑，反之亦然，我们会教育每个人，帮助他们了解成功的 PE 和 SWE
团队参与情况，以及成功的健康合作伙伴关系是什么样子。我们还讨论了共享所有权的含义，以及
SWE 需要如何关注其系统的稳定性，以及更多专注于故障解除的 PE
是不可持续的。我们确保 PE 不会成为阻碍者，并阻止 SWE
团队进行创新，例如，他们不断对变革说"不"。人和关系是具有挑战性的，有时价值体系只是不一致，但我们不能忽视这些关系，不能让合作变得苦涩。
最终，如果我们不能就如何合作达成协议，我们需要做出改变。如果关系问题源于
PE，我们会努力消除导致这些问题的个人，与他及其经理讨论我们的协作期望，并在必要时开始重建团队的工作。如果关系问题源于
SWE
不想以我们描述的方式拥有其服务，或不断忽视使系统更稳定所需的工作，我们也会与他们的经理和技术主管交谈。在给了每个人解决问题的时间之后，我们将在未来某个时候重新审视这种情况。如果
SWE 团队对 PE 的期望继续集中在移交运维工作上，那么我们将很乐意将 PE
重新部署到其他 SWE 团队中。毕竟还有很多地方，PE
的技能和倡议能受到重视，能得到平等对待，并能够产生改变。
移除嵌入式 PE
团队是我们作为最后手段和用尽所有方法（仍然不能构造良好合作关系）之后不得已的手段。我只用了很少几次，因为这样做肯定会失去与
SWE
团队的信任，这将使得在未来建立信任更加困难。话虽如此，我宁愿不牺牲试图强推某方案的
PE。在少数情况下，这种情况已经发生，SWE
团队在几个月后又回来了，要求再次尝试合作。现实情况是，一些软件团队没有具有运营思维的人，由于技能差距或不断增加的运维债务，他们很快就会被工作淹没。有时候，用艰苦的方式学习，这是每个人重新开始的最好方法。
**大卫：**让我们继续沿着这条组织结构的道路再走一会儿。每个项目都有 PE
吗？你来的时候做什么？
**佩德罗：**之前你注意到，在一些公司中，SRE
直到达到某种成熟度或运维稳定性才适用。在 Facebook
，我们一直习惯无情地提前考虑。并不是每个 SWE
团队都能与嵌入式生产工程团队合作，这是符合情境的。它与服务本身及其发展阶段、服务与团队的成熟度有关。理想情况下，我们希望进入软件团队的新生阶段，因为他们正在构建一些新的东西，并且可能不知道它将会是什么样的。通过尽早嵌入开发团队，我们可以尽早完成一些运维工作。有时会发生这种情况，有时则不会发生。
有一些软件工程团队最终构建一些服务，在开始时没有生产工程师。这通常是一个不太具有明确定义的用例的新服务。解决问题可能是某人的创新想法，但需要一段时间才能发展。一旦该服务建立起来，他们意识到他们正处于扩展至关重要的阶段，他们来找我寻求帮助。我们保留这些服务和团队的动态列表，并且随着雇佣更多的生产工程师，我们使用该列表确定关键且最需要帮助的团队。