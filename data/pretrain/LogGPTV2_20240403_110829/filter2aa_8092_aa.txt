# Sliding 2
Category: Reversing & Binary Exploitation, 500 points
## Description
> This challenge is so easy my cousin can solve it in a few seconds!
A binary file was attached.
## Solution
Let's run the binary file:
```console
┌──(user@kali)-[/media/sf_CTFs/technion/Sliding_2]
└─$ ./sliding_2
Enter key: test
Invalid Key
```
So we need to provide a key. Let's open the executable with Ghidra and check the decompilation output.
This is the main function:
```c
undefined8 main(void)
{
  uint int_input;
  size_t input_len;
  undefined8 ret;
  long in_FS_OFFSET;
  int i;
  char user_input [312];
  long local_10;
  local_10 = *(long *)(in_FS_OFFSET + 0x28);
  printf("Enter key: ");
  __isoc99_scanf("%300s",user_input);
  input_len = strnlen(user_input,300);
  i = 0;
  do {
    if ((int)input_len <= i) {
      check_input();
      ret = 0;
LAB_5555555559a7:
      if (local_10 != *(long *)(in_FS_OFFSET + 0x28)) {
                    /* WARNING: Subroutine does not return */
        __stack_chk_fail();
      }
      return ret;
    }
    int_input = char_to_int_05(user_input[i]);
    if ((int)int_input < 0) {
      printf("Invalid Key");
      ret = 1;
      goto LAB_5555555559a7;
    }
    handle_input(int_input);
    i = i + 1;
  } while( true );
}
```
We can see that it reads an input of up to 300 characters. For each character, it calls `char_to_int_05`:
```c
int char_to_int_05(char param_1)
{
  int iVar1;
  iVar1 = param_1 + -0x30;
  if ((iVar1 < 0) || (5 < iVar1)) {
    iVar1 = -1;
  }
  return iVar1;
}
```
This function reveals that the expected input is composed of digits 0-5. It simply converts the ASCII digits to integers. After the conversion, each integer is handled using some complex logic:
```c
void handle_input(uint param_1)
{
  undefined uVar1;
  long lVar2;
  uint uVar3;
  long in_FS_OFFSET;
  int local_4c;
  int local_48;
  undefined *local_40;
  undefined *local_38;
  undefined *local_30;
  undefined *local_28;
  undefined *local_20;
  lVar2 = *(long *)(in_FS_OFFSET + 0x28);
  uVar3 = param_1 * 2 & 2;
  if ((int)param_1 < 2) {
    local_38 = &DAT_555555558010;
    local_30 = &DAT_555555558030;
    local_28 = &DAT_555555558020;
    local_20 = &DAT_555555558040;
    if ((param_1 & 1) == 0) {
      local_40 = &DAT_555555558050;
    }
    else {
      local_40 = &DAT_555555558060;
    }
  }
  else {
    if ((int)param_1 < 4) {
      local_38 = &DAT_555555558010;
      local_30 = &DAT_555555558050;
      local_28 = &DAT_555555558020;
      local_20 = &DAT_555555558060;
      if ((param_1 & 1) == 0) {
        local_40 = &DAT_555555558040;
      }
      else {
        local_40 = &DAT_555555558030;
      }
    }
    else {
      local_38 = &DAT_555555558050;
      local_30 = &DAT_555555558030;
      local_28 = &DAT_555555558060;
      local_20 = &DAT_555555558040;
      if ((param_1 & 1) == 0) {
        local_40 = &DAT_555555558020;
      }
      else {
        local_40 = &DAT_555555558010;
      }
    }
  }
  for (local_4c = 0; local_4c < 3; local_4c = local_4c + 1) {
    if ((int)param_1 < 2) {
      uVar1 = local_38[(long)local_4c + (long)(int)uVar3 * 3];
      local_38[(long)local_4c + (long)(int)uVar3 * 3] =
           local_30[(long)local_4c + (long)(int)uVar3 * 3];
      local_30[(long)local_4c + (long)(int)uVar3 * 3] =
           local_28[(long)local_4c + (long)(int)uVar3 * 3];
      local_28[(long)local_4c + (long)(int)uVar3 * 3] =
           local_20[(long)local_4c + (long)(int)uVar3 * 3];
      local_20[(long)local_4c + (long)(int)uVar3 * 3] = uVar1;
    }
    else {
      if ((int)param_1 < 4) {
        uVar1 = local_38[(long)(int)uVar3 + (long)local_4c * 3];
        local_38[(long)(int)uVar3 + (long)local_4c * 3] =
             local_30[(long)(int)uVar3 + (long)local_4c * 3];
        local_30[(long)(int)uVar3 + (long)local_4c * 3] =
             local_28[(long)(int)(2 - uVar3) + (long)(2 - local_4c) * 3];
        local_28[(long)(int)(2 - uVar3) + (long)(2 - local_4c) * 3] =
             local_20[(long)(int)uVar3 + (long)local_4c * 3];
        local_20[(long)(int)uVar3 + (long)local_4c * 3] = uVar1;
      }
      else {
        uVar1 = local_38[(long)local_4c + (long)(int)uVar3 * 3];
        local_38[(long)local_4c + (long)(int)uVar3 * 3] =
             local_30[(long)(int)(2 - uVar3) + (long)local_4c * 3];
        local_30[(long)(int)(2 - uVar3) + (long)local_4c * 3] =
             local_28[(long)(2 - local_4c) + (long)(int)(2 - uVar3) * 3];
        local_28[(long)(2 - local_4c) + (long)(int)(2 - uVar3) * 3] =
             local_20[(long)(int)uVar3 + (long)(2 - local_4c) * 3];
        local_20[(long)(int)uVar3 + (long)(2 - local_4c) * 3] = uVar1;
      }
    }
  }
  for (local_48 = 0; local_48 < 2; local_48 = local_48 + 1) {
    if ((param_1 & 1) == 0) {
      uVar1 = local_40[local_48];
      local_40[local_48] = local_40[(long)(2 - local_48) * 3];
      local_40[(long)(2 - local_48) * 3] = local_40[(long)(2 - local_48) + 6];
      local_40[(long)(2 - local_48) + 6] = local_40[(long)local_48 * 3 + 2];
      local_40[(long)local_48 * 3 + 2] = uVar1;
    }
    else {
      uVar1 = local_40[local_48];
      local_40[local_48] = local_40[(long)local_48 * 3 + 2];
      local_40[(long)local_48 * 3 + 2] = local_40[(long)(2 - local_48) + 6];
      local_40[(long)(2 - local_48) + 6] = local_40[(long)(2 - local_48) * 3];
      local_40[(long)(2 - local_48) * 3] = uVar1;
    }
  }
  if (lVar2 != *(long *)(in_FS_OFFSET + 0x28)) {
                    /* WARNING: Subroutine does not return */
    __stack_chk_fail();
  }
  return;
}
```
Finally, the computed output is verified:
```c
void check_input(void)
{
  int i;
  int j;
  int k;
  i = 0;
  do {
    if (5 < i) {
      printf("Congratulation, The flag is %s","cstechnion{################}");
      return;
    }
    for (j = 0; j < 3; j = j + 1) {
      for (k = 0; k < 3; k = k + 1) {
        if (*(&PTR_DAT_555555558080)[i] != (&PTR_DAT_555555558080)[i][(long)k + (long)j * 3]) {
          printf("Invalid Key");
          return;
        }
      }
    }