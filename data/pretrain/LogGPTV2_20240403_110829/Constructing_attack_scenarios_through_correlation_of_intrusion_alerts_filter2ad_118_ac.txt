h SadmindBOF
hDDOSDaemon
(c) SG = subsequent(hSadmindBOF ; HG)
(d) CG = correlated(hSadmindBOF ; HG)
h SadmindPing
Figure 1: Hyper-alerts correlation graphs
However, on the negative side, our method may correlate
alerts incorrectly when one attack seemingly prepares for
another. In other words, our method has both a higher true
correlation rate and a higher false correlation rate than JIG-
SAW. Nevertheless, Section 4 shows experimentally that our
method has a low false correlation rate.
Our approach has several limitations. First, our method
depends on the underlying IDSs to provide alerts.
If the
IDS misses a critical attack that links two stages of a se-
ries of attacks, the related hyper-alerts may be split into
two separate hyper-alert correlation graphs. In the extreme
case where the underlying IDSs missed all the attacks, our
approach cannot do anything. Second, our approach is not
fully e(cid:11)ective for alerts between which there is no prepare-
for relationship, even if they may be related. Therefore,
our method should be used along with other, complemen-
tary techniques (e.g., the probabilistic alert correlation [18]).
Third, the performance of our approach relies on the quality
of the modeling (i.e., prerequisites and consequences) of at-
tacks. It is di(cid:14)cult to perform meaningful correlation when
the attack modeling is weak or inconsistent.
3.
IMPLEMENTATION
We have implemented an o(cid:11)-line intrusion alert corre-
lator using the method discussed in Section 2. Figure 2
shows the architecture. It consists of a knowledge base, an
alert preprocessor, a correlation engine, a hyper-alert corre-
lation graph generator, and a visualization component. All
these components except for the visualization component
interact with a DBMS, which provides persistent storage
for the intermediate data as well as the correlated alerts.
The program was written in Java, with JDBC to access the
database. To save development e(cid:11)ort, we use the GraphViz
package [2] as the visualization component.
The knowledge base contains the necessary information
about hyper-alert types as well as implication relationships
between predicates.
In our current implementation, the
hyper-alert types and the relationship between predicates
are speci(cid:12)ed in an XML (cid:12)le. When the alert correlator is
initialized,
it reads the XML (cid:12)le, and then converts and
stores the information in the knowledge base.
Our current implementation assumes the alerts reported
by IDSs are stored in the database. Using the information in
the knowledge base, the alert preprocessor generates hyper-
alerts as well as auxiliary data from the original alerts. The
correlation engine then performs the actual correlation task
using the hyper-alerts and the auxiliary data. After alert
correlation, the hyper-alert correlation graph generator ex-
tracts the correlated alerts from the database, and generates
the graph (cid:12)les in the format accepted by GraphViz. As the
(cid:12)nal step of alert correlation, GraphViz is used to visualize
the hyper-alert correlation graphs.
3.1 Preprocessing and Correlation
Preprocessing and correlation of hyper-alerts are the ma-
jor tasks of the alert correlator, which are performed using
the hyper-alert type information stored in the knowledge
base. As discussed earlier, the knowledge base stores two
types of information: the implication relationships between
predicates and the hyper-alert type information. When the
alert correlator reads in the hyper-alert types, it generates
the prerequisite and consequence sets of each hyper-alert
type. In addition, it expands the consequence set of each
hyper-alert type by including all the predicates implied by
the consequence set. We call the result the expanded con-
sequence set of the corresponding hyper-alert type. Given a
hyper-alert instance h of type T , the expanded consequence
set of h is the set of predicates in T ’s expanded consequence
set whose arguments are replaced with the corresponding
attribute values of each tuple in h.
To simplify preprocess and correlation of hyper-alerts, we
make the following assumptions.
Assumption 1. Given a set P = fp1(x11; :::; x1k1 ); :::;
pm(xm1; :::; xmkm )g of predicates, for any set of instantia-
tions of the variables x11; :::; x1k1 ; :::; xm1; :::; xmkm , deriving
all predicates implied by P followed by instantiating all the
variables leads to the same result as instantiating all the
variables and then deriving all the predicates implied by the
instantiated predicates.
Assumption 2. All predicates are uniquely identi(cid:12)ed by
their names, the special characters \(", \)", and \," do not
appear in predicate names and arguments, and the order of
the arguments in each predicate is (cid:12)xed.
The major task for alert correlation is performed in the
preprocessing phase. The alert preprocessor generates hyper-
alerts from the alerts reported by IDSs and instantiates the
250Alert 
Preprocessor
Alerts
Knowledge
Base
Hyper−Alerts
&
Auxiliary Data
Correlation
Engine
Hyper−alert
Correlation Graph
Generator
Visualization
(GraphViz)
Correlated Hyper−Alerts
Database
Management System
Figure 2: The architecture of the intrusion alert correlator
prerequisite and expanded consequence sets of each hyper-
alert. The current implementation generates one hyper-alert
from each alert, though our method allows aggregating mul-
tiple alerts into one hyper-alert (see Section 2).
We encode instantiated predicates as strings, and thus
transform the alert correlation problem to a string matching
problem. Speci(cid:12)cally, each instantiated predicate is encoded
as the predicate name followed by the character \(", followed
by the sequence of arguments separated with the character
\,", and (cid:12)nally followed by the character \)". (Note that the
order of arguments must be preserved during the encoding.)
Under assumption 2, comparing instantiated predicates is
equivalent to comparing the encoded strings.
We store the encoded prerequisite and expanded conse-
quence sets in two tables, PrereqSet and ExpandedConseqSet,
along with the corresponding hyper-alert ID and timestamp,
assuming that each hyper-alert is uniquely identi(cid:12)ed by its
ID. Both tables have attributes HyperAlertID, EncodedPred-
icate, begin time, and end time, with meanings as indicated
by their names. As a result, alert correlation can be per-
formed using the following SQL statement.
SELECT DISTINCT c.HyperAlertID, p.HyperAlertID
FROM PrereqSet p, ExpandedConseqSet c
WHERE p.EncodedPredicate = c.EncodedPredicate
AND c.end time < p.begin time
The correctness of our implementation method is guaran-
teed by the following theorem.
Theorem 1. Under assumptions 1 and 2, our implemen-
tation method discovers all and only hyper-alert pairs such
that the (cid:12)rst one of the pair prepares for the second one.
Proof. Consider a pair of hyper-alerts h1 and h2 such
that h1 prepares for h2. By De(cid:12)nition 4, there exists p 2
P (h2) and C (cid:18) C(h1) such that for all c 2 C, c:end time <
p:begin time and the conjunction of all predicates in C im-
plies p. By assumption 1, p should be in the expanded conse-
quence set of h1 (but associated with a di(cid:11)erent timestamp).
Thus, both P rereqSet and ExpandedConseqSet have a tu-
ple that has the same encoded predicate along with the ap-
propriate hyper-alert ID and timestamp. As a result, the
SQL statement will output that h1 prepares for h2.
Suppose the SQL statement outputs that h1 prepares for
h2. Then there exist a tuple t1 in ExpandedConseqSet and
a tuple t2 in P rereqSet such that t1:end time < t2:begin time
and t1:EncodedP redicate = t2:EncodedP redicate. By as-
sumption 2, t1:EncodedP redicate and t2:EncodedP redicate
must be the same instantiated predicate. Let us refer to
this predicate as p1 when it is in the expanded consequence
set of h1, and as p2 when it is in P (h2). Thus, p1 = p2
and p1:end time < p2:begin time.
If p1 is also in C(h1),
let C = fp1g. Otherwise, let C be the set of predicates in
C(h1) that are instantiated by the same tuple in h1 as p1.
By the way in which an expanded consequence set is con-
structed and assumption 1, p1 is implied by the predicates
in C. This is to say that p2 is implied by C (cid:18) C(h1) such
that for all c 2 C, c:end time < p2:begin time. Thus, h1
prepares for h2 by De(cid:12)nition 4.
4. EXPERIMENTAL RESULTS
To evaluate the e(cid:11)ectiveness of our method in construct-
ing attack scenarios and its ability to di(cid:11)erentiate true and
false alerts, we performed a series of experiments using the
2000 DARPA intrusion detection scenario speci(cid:12)c datasets
(LLDOS 1.0 and LLDOS 2.0.2) [10]. LLDOS 1.0 contains
a series of attacks in which an attacker probes, breaks-in,
installs the components necessary to launch a Distributed
Denial of Service (DDOS) attack, and actually launches a
DDOS attack against an o(cid:11)-site server. LLDOS 2.0.2 in-
cludes a similar sequence of attacks run by an attacker who
is a bit more sophisticated than the (cid:12)rst one.
Each dataset includes the network tra(cid:14)c collected from
both the DMZ and the inside part of the evaluation network.
We have performed four sets of experiments, each with either
the DMZ or the inside network tra(cid:14)c of one dataset.
In
each experiment, we replayed the selected network tra(cid:14)c
in an isolated network monitored by a RealSecure Network
Sensor 6.0 [8]. In all the experiments, the Network Sensor
was con(cid:12)gured to use the Maximum Coverage policy with a
slight change, which forced the Network Sensor to save all
the reported alerts. Our alert correlator was then used to
process the alerts generated by RealSecure.
We mapped each alert type reported by RealSecure to a
hyper-alert type with the same name. The prerequisite and
consequence of each hyper-alert type were speci(cid:12)ed accord-
ing to the descriptions of the attack signatures provided with
the RealSecure Network Sensor 6.0. The hyper-alert types
(as well as the implication relationships between predicates)
can be found in the full version of this paper [12].
4.1 Effectiveness of Alert Correlation
Our (cid:12)rst goal of these experiments is to evaluate the ef-
fectiveness of our method in constructing attack scenarios
from alerts. Before discussing the quantitative measures,
251let us (cid:12)rst look at one of the hyper-alert correlation graphs
generated by the alert correlator.
Figure 3 shows the (only) hyper-alert correlation graph
discovered from the inside network tra(cid:14)c in LLDOS 1.0.
Each node in Figure 3 represents a hyper-alert. The text
inside the node is the name of the hyper-alert type followed
by the hyper-alert ID.
There are 44 hyper-alerts in this graph, including 3 false
alerts, which are shown in gray. The true hyper-alerts can
be divided into (cid:12)ve stages horizontally. The (cid:12)rst stage con-
sists of three Sadmind Ping alerts, which the attacker used
to (cid:12)nd out the vulnerable Sadmind services. The three alerts
are from the source IP address 202.077.162.213, and to the
destination IP addresses 172.016.112.010, 172.016.115.020,
and 172.016.112.050, respectively. The second stage consists
of fourteen Sadmind Amslverify Over(cid:13)ow alerts. According
to the description of the attack scenario, the attacker tried
three di(cid:11)erent stack pointers and two commands in Sad-
mind Amslverify Over(cid:13)ow attacks for each victim host un-
til one attempt succeeded. All the above three hosts were
successfully broken into. The third stage consists of some
Rsh alerts, with which the attacker installed and started the
mstream daemon and master programs. The fourth stage
consists of alerts corresponding to the communications be-
tween the DDOS master and daemon programs. Finally, the
last stage consists of the DDOS attack.
We can see clearly that the hyper-alert correlation graph
reveals the structure as well as the high-level strategy of
the sequence of attacks. The other hyper-alert correlation
graphs and the corresponding analysis can be found in [12].
This hyper-alert correlation graph is still not perfect. The
two Email Almail Over(cid:13)ow hyper-alerts (shown in gray in
Figure 3) are false alerts, and are mis-correlated with the
Rsh alerts, though it is possible that an attacker uses these
attacks to gain access to the victim system and then copy the
DDOS program with Rsh. The FTP Syst hyper-alert is also
a false one; it is correlated with one of the Sadmind Pings,
because an attacker may use FTP Syst to gain the OS infor-
mation and then launch an Sadmind Ping attack. Moreover,
the attacker used a telnet as a part of the sequence of at-
tacks, but this graph does not include the corresponding
hyper-alert.
Another interesting issue is that we correlated alerts that
are not attacks. In both DMZ and inside tra(cid:14)c of LLDOS
2.0.2, we correlated an Email Ehlo with an Email Turn from
135.013.216.191 to 172.016.113.105. Our further analysis
indicated that these were normal and related activities be-
tween email servers.
To better understand the e(cid:11)ectiveness of our method, we
examine the completeness and the soundness of alert correla-
tion. The completeness of alert correlation assesses how well
we can correlate related alerts together, while the soundness
evaluates how correctly the alerts are correlated. We in-
troduce two simple measures, Rc and Rs, to quantitatively
evaluate completeness and soundness, respectively:
and
Rc =
Rs =
#correctly correlated alerts
#related alerts
#correctly correlated alerts
#correlated alerts
;
:
Counting the numbers in Rc and Rs is easy, given the de-
scription of the attacks in the DARPA datasets. However,
RealSecure generated duplicate alerts for several attacks. In
our experiments, we counted the duplicate alerts as di(cid:11)er-
ent ones. False alerts are counted (as incorrectly correlated
alerts) so long as they are correlated. Though non-intrusive
alerts (e.g., the above Email Ehlo and Email Turn) are not
attacks, if they are related activities, we counted them as
correctly correlated ones.
Table 1 shows the results about completeness and sound-
ness of the alert correlation for the two datasets. As shown
by the values of Rs, most of the hyper-alerts are correlated
correctly. The completeness measures (Rc) are satisfactory
for LLDOS 1.0; however, they are only 62.5% and 66.7% for
the DMZ and inside tra(cid:14)c in LLDOS 2.0.2. Our further
analysis reveals that all the hyper-alerts missed are those
triggered by the telnets that the attacker used to access a
victim host. Each telnet triggered three alerts, TelnetEn-
vAll, TelnetXDisplay and TelnetTerminalType. According
to RealSecure’s description, these alerts are about attacks
that are launched using environmental variables (TelnetEn-
vAll) in a telnet session, including XDisplay (TelnetXDis-
play) and TerminalType (TelnetTerminalType). However,
according to the description of the datasets, the attacker
did not launch these attacks, though he did telnet to one
victim host after gaining access to it. Nevertheless, to be
conservative, we consider them as related alerts in our eval-
uation. Considering these facts, we can conclude that our
method is e(cid:11)ective for these datasets.
4.2 Ability to Differentiate Alerts
Our second goal of these experiments is to see how well
alert correlation can be used to di(cid:11)erentiate false alerts and
true alerts. As we conjectured in Section 2, false alerts,
which do not correspond to any real attacks, tend to be
more random than the actual alerts, and are less likely to
be correlated to others.
If this conjecture is true, we can
divert more resources to deal with correlated alerts, and
thus improve the e(cid:11)ectiveness of intrusion response.
To understand this issue, we deliberately drop the uncor-
related alerts and then compare the resulting detection rate
and false alert rate with the original ones of RealSecure.
We counted the number of actual attacks and false alerts
according to the description included in the datasets. The