## Systemtap EXP: PostgreSQL IN-BUILD mark Class 6 - lock  
### 作者               
digoal              
### 日期              
2013-10-17                                                                                                     
### 标签                             
PostgreSQL , systemtap , probe , 探针 , stap , 跟踪数据库锁               
----                 
## 背景             
本文要讲的是PostgreSQL内建的锁类别的探针，以及使用stap跟踪的方法.  
## 正文  
PostgreSQL锁类别探针分为轻量锁, 重量锁, 以及死锁的探针.  
轻量锁探针 :   
```  
        probe lwlock__acquire(LWLockId, LWLockMode); 当得到轻量锁时触发, 变量含义参见本文参考部分6,7,8.   
        probe lwlock__release(LWLockId); 当释放轻量锁时触发.  
        probe lwlock__wait__start(LWLockId, LWLockMode); 当等待轻量锁开始时触发.  
        probe lwlock__wait__done(LWLockId, LWLockMode); 当等待轻量锁结束时触发.  
        probe lwlock__condacquire(LWLockId, LWLockMode); 当得到轻量锁时触发, 注意本探针放在nowait轻量锁请求函数中, 所以不会有等待的过程, 只有获得成功或者失败. 请区别于lwlock__acquire.  
        probe lwlock__condacquire__fail(LWLockId, LWLockMode); 当得到轻量锁失败时触发.  
        probe lwlock__wait__until__free(LWLockId, LWLockMode); 在LWLockAcquireOrWait 函数中, 这个函数用法比较特殊, 当获取锁成功时返回true; 当不能立刻获取到锁时, 等待锁释放, 返回false, 但是不获取锁. 该函数目前仅被WALWriteLock使用.  
        probe lwlock__wait__until__free__fail(LWLockId, LWLockMode); 函数同上, 失败时触发.  
```  
重量锁探针 :   
```  
	probe lock__wait__start(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, LOCKMODE);   
        当重量锁请求等待开始时触发, 前5个变量对应LOCKTAG的前5个field, LOCKMODE可参考本文末尾8.   
	probe lock__wait__done(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, LOCKMODE);  
        等待结束时触发.  
```  
死锁探针 :   
```  
        probe deadlock__found();  
```  
探针的详细介绍 :   
探针|参数|描述  
---|---|---  
lwlock-acquire|	(LWLockId, LWLockMode)|	Probe that fires when an LWLock has been acquired. arg0 is the LWLock's ID. arg1 is the requested lock mode, either exclusive or shared.  
lwlock-release|	(LWLockId)|	Probe that fires when an LWLock has been released (but note that any released waiters have not yet been awakened). arg0 is the LWLock's ID.  
lwlock-wait-start|	(LWLockId, LWLockMode)|	Probe that fires when an LWLock was not immediately available and a server process has begun to wait for the lock to become available. arg0 is the LWLock's ID. arg1 is the requested lock mode, either exclusive or shared.  
lwlock-wait-done|	(LWLockId, LWLockMode)|	Probe that fires when a server process has been released from its wait for an LWLock (it does not actually have the lock yet). arg0 is the LWLock's ID. arg1 is the requested lock mode, either exclusive or shared.  
lwlock-condacquire|	(LWLockId, LWLockMode)|	Probe that fires when an LWLock was successfully acquired when the caller specified no waiting. arg0 is the LWLock's ID. arg1 is the requested lock mode, either exclusive or shared.  
lwlock-condacquire-fail|	(LWLockId, LWLockMode)|	Probe that fires when an LWLock was not successfully acquired when the caller specified no waiting. arg0 is the LWLock's ID. arg1 is the requested lock mode, either exclusive or shared.  
lock-wait-start|	(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, LOCKMODE)|	Probe that fires when a request for a heavyweight lock (lmgr lock) has begun to wait because the lock is not available. arg0 through arg3 are the tag fields identifying the object being locked. arg4 indicates the type of object being locked. arg5 indicates the lock type being requested.  
lock-wait-done|	(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, LOCKMODE)|	Probe that fires when a request for a heavyweight lock (lmgr lock) has finished waiting (i.e., has acquired the lock). The arguments are the same as for lock-wait-start.  
deadlock-found|	()|	Probe that fires when a deadlock is found by the deadlock detector.  
## 举例  
1\. 跟踪轻量锁等待次数.  
```  
stap -e '  
global var1  
probe process("/home/pg93/pgsql9.3.1/bin/postgres").mark("lwlock__wait__done") {  
  var1[$arg1, $arg2]++  
}  
probe timer.s($1) {  
  println("*******************")  
  foreach(v=[x,y] in var1+)   
    printf("lockid:%d, lockmode:%d, wait_count:%d\n", x,y,v)  
  delete var1  
}' 5  
```  
SQL :   
```  
digoal=# \sf f_test(int)  
CREATE OR REPLACE FUNCTION public.f_test(i_id integer)  
 RETURNS void  
 LANGUAGE plpgsql  
 STRICT  
AS $function$  
declare  
begin  
  update test set info=md5(random()::text), crt_time=clock_timestamp() where id=i_id;  
  if not found then  
    insert into test(id,info,crt_time) values(i_id,md5(random()::text),clock_timestamp());  
  end if;  
  return;  
  exception when others then  
    return;  
end;  
$function$  
digoal=# \d test  
                Table "public.test"  
  Column  |            Type             | Modifiers   
----------+-----------------------------+-----------  
 id       | integer                     | not null  
 info     | text                        |   
 crt_time | timestamp without time zone |   
Indexes:  
    "test_pkey" PRIMARY KEY, btree (id)  
```  
stap输出 :   
```  
*******************  
lockid:30604, lockmode:1, wait_count:1  
lockid:6150, lockmode:0, wait_count:1  
lockid:137242, lockmode:1, wait_count:1  
lockid:33180, lockmode:1, wait_count:1  
lockid:37820, lockmode:1, wait_count:1  
lockid:55818, lockmode:1, wait_count:1  
lockid:152122, lockmode:1, wait_count:1  
lockid:3, lockmode:1, wait_count:1  
lockid:18220, lockmode:0, wait_count:1  
lockid:34, lockmode:1, wait_count:1  
lockid:38, lockmode:0, wait_count:1  
lockid:63456, lockmode:1, wait_count:1  
lockid:23704, lockmode:1, wait_count:1  
lockid:52826, lockmode:1, wait_count:1  
lockid:49032, lockmode:1, wait_count:1  
lockid:45, lockmode:1, wait_count:1  
lockid:45348, lockmode:1, wait_count:1  
lockid:2364, lockmode:1, wait_count:1  
lockid:40, lockmode:0, wait_count:1  
lockid:45918, lockmode:1, wait_count:1  
lockid:150650, lockmode:1, wait_count:1  
lockid:56324, lockmode:1, wait_count:1  
lockid:32554, lockmode:1, wait_count:1  
lockid:38, lockmode:1, wait_count:1  
lockid:20636, lockmode:1, wait_count:1  
lockid:6534, lockmode:1, wait_count:1  
lockid:39126, lockmode:1, wait_count:1  
lockid:42, lockmode:0, wait_count:1  
lockid:1640, lockmode:1, wait_count:1  
lockid:46, lockmode:0, wait_count:1  
lockid:39, lockmode:1, wait_count:1  
lockid:53778, lockmode:1, wait_count:1  
lockid:35, lockmode:1, wait_count:1  
lockid:33450, lockmode:1, wait_count:1  
lockid:33, lockmode:1, wait_count:2  
lockid:46, lockmode:1, wait_count:2  
lockid:48, lockmode:0, wait_count:2  
lockid:43, lockmode:0, wait_count:2  
lockid:96, lockmode:1, wait_count:2  
lockid:44, lockmode:1, wait_count:2  
lockid:37, lockmode:1, wait_count:2  
lockid:40, lockmode:1, wait_count:2  
lockid:13932, lockmode:1, wait_count:2  
lockid:48, lockmode:1, wait_count:4  
lockid:8, lockmode:0, wait_count:7  
lockid:13, lockmode:0, wait_count:88  
lockid:60, lockmode:0, wait_count:224  
lockid:54, lockmode:0, wait_count:235  
lockid:58, lockmode:0, wait_count:237  
lockid:49, lockmode:0, wait_count:240  
lockid:56, lockmode:0, wait_count:243  
lockid:57, lockmode:0, wait_count:249  
lockid:64, lockmode:0, wait_count:251  
lockid:63, lockmode:0, wait_count:261  
lockid:55, lockmode:0, wait_count:262  
lockid:59, lockmode:0, wait_count:263  
lockid:53, lockmode:0, wait_count:273  
lockid:52, lockmode:0, wait_count:275  
lockid:51, lockmode:0, wait_count:275  
lockid:62, lockmode:0, wait_count:276  
lockid:61, lockmode:0, wait_count:281  
lockid:50, lockmode:0, wait_count:287  
lockid:12, lockmode:0, wait_count:1514  
lockid:11, lockmode:1, wait_count:3385  
lockid:11, lockmode:0, wait_count:4103  
lockid:3, lockmode:0, wait_count:6376  
lockid:4, lockmode:1, wait_count:6980  
lockid:4, lockmode:0, wait_count:19500  
lockid:7, lockmode:0, wait_count:31472  
... 略  
```  
2\. 跟踪重量锁 :   
stap :   
```  
[root@db-172-16-3-150 postgresql-9.3.1]# stap -v -D MAXSKIPPED=10000000 -e '  
global var1%[120000], var2%[120000]  
probe process("/home/pg93/pgsql9.3.1/bin/postgres").mark("lock__wait__start") {  
  var1[pid()] = gettimeofday_us()  
}  
probe process("/home/pg93/pgsql9.3.1/bin/postgres").mark("lock__wait__done") {  
  p=pid()  
  t=gettimeofday_us()  
  if (p in var1)  
    var2[$arg1, $arg2, $arg3, $arg4, $arg5, $arg6]  cat test.sql  
\setrandom id 1 8  
select f_test(:id);  
pg93@db-172-16-3-150-> pgbench -M prepared -n -r -f ./test.sql -c 64 -j 8 -T 1000  
```  
64个链接, 将id现在在8个以内, 会产生大量的等待.  
```  
digoal=# \sf f_test(int)  
CREATE OR REPLACE FUNCTION public.f_test(i_id integer)  
 RETURNS void  
 LANGUAGE plpgsql  
 STRICT  
AS $function$  
declare  
begin  
  update test set info=md5(random()::text), crt_time=clock_timestamp() where id=i_id;  
  if not found then  
    insert into test(id,info,crt_time) values(i_id,md5(random()::text),clock_timestamp());  
  end if;  
  return;  
  exception when others then  
    return;  
end;  
$function$  
```  
stap输出 :   
最后面3列为一共等待的时间, 一共等待的次数, 以及平均等待时间(ms).  
3表示LOCKTAG_TUPLE, 参考本文末尾的定义  
7表示ExclusiveLock, 参考本文末尾的定义  
16384**24735**77940**116表示 dboid, reloid, blocknum, offnum  
```  
digoal=# select oid from pg_database where datname='digoal';  
  oid    
-------  
 16384  
(1 row)  
digoal=# select oid from pg_class where relname='test';  
  oid    
-------  
 24735  
(1 row)  
digoal=# select max(ctid) from test;  
    max       
------------  
 (80505,78)  
(1 row)  
```  
```  
*******************  
16384**24735**77940**116**3**7**304**38**8  
16384**24735**77921**83**3**7**295**32**9  
16384**24735**77979**32**3**7**271**41**6  
16384**24735**77906**29**3**7**235**37**6  
16384**24735**77921**138**3**7**233**44**5  
*******************  
129233058**0**0**0**4**5**1355**9**150  
129233135**0**0**0**4**5**1197**8**149  
129233044**0**0**0**4**5**749**6**124  
129233289**0**0**0**4**5**747**5**149  
16384**24735**78068**67**3**7**317**14**22  
*******************  
129363231**0**0**0**4**5**921**19**48  
16384**24735**78091**103**3**7**450**47**9  
16384**24735**78199**108**3**7**300**25**12  
16384**24735**78130**37**3**7**264**5**52  
16384**24735**78131**66**3**7**261**56**4  
*******************  
16384**24735**78277**36**3**7**350**38**9  
16384**24735**78290**20**3**7**301**35**8  
16384**24735**78206**114**3**7**268**43**6  
16384**24735**78277**93**3**7**254**30**8  
16384**24735**78290**79**3**7**253**31**8  
*******************  
16384**24735**78613**25**3**7**220**6**36  
16384**24735**78781**19**3**7**206**21**9  
16384**24735**78621**32**3**7**184**22**8  
16384**24735**78613**21**3**7**165**3**55  
16384**24735**78702**78**3**7**159**17**9  
```  
## 参考  
1\. http://www.postgresql.org/docs/9.3/static/dynamic-trace.html  
2\.   
src/backend/storage/lmgr/lwlock.c  
src/backend/storage/lmgr/lock.c  
src/backend/storage/lmgr/deadlock.c  
3\. 探针信息 :   
```  
/* TRACE_POSTGRESQL_LWLOCK_ACQUIRE ( int, int) */  
#if defined STAP_SDT_V1  
#define TRACE_POSTGRESQL_LWLOCK_ACQUIRE_ENABLED() __builtin_expect (lwlock__acquire_semaphore, 0)  
#define postgresql_lwlock__acquire_semaphore lwlock__acquire_semaphore  
#else  
#define TRACE_POSTGRESQL_LWLOCK_ACQUIRE_ENABLED() __builtin_expect (postgresql_lwlock__acquire_semaphore, 0)  
#endif  
__extension__ extern unsigned short postgresql_lwlock__acquire_semaphore __attribute__ ((unused)) __attribute__ ((section (".probes")));  
#define TRACE_POSTGRESQL_LWLOCK_ACQUIRE(arg1,arg2) \  
DTRACE_PROBE2(postgresql,lwlock__acquire,arg1,arg2)  
/* TRACE_POSTGRESQL_LWLOCK_RELEASE ( int) */  
#if defined STAP_SDT_V1  
#define TRACE_POSTGRESQL_LWLOCK_RELEASE_ENABLED() __builtin_expect (lwlock__release_semaphore, 0)  
#define postgresql_lwlock__release_semaphore lwlock__release_semaphore  
#else  
#define TRACE_POSTGRESQL_LWLOCK_RELEASE_ENABLED() __builtin_expect (postgresql_lwlock__release_semaphore, 0)  
#endif  
__extension__ extern unsigned short postgresql_lwlock__release_semaphore __attribute__ ((unused)) __attribute__ ((section (".probes")));  
#define TRACE_POSTGRESQL_LWLOCK_RELEASE(arg1) \  
DTRACE_PROBE1(postgresql,lwlock__release,arg1)  
/* TRACE_POSTGRESQL_LWLOCK_WAIT_START ( int, int) */  