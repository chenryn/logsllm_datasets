    vdso addr: 0xf7f9e000
    vdso addr: 0xf7fa0000
    vdso addr: 0xf7fa0000
    vdso addr: 0xf7fa2000
    vdso addr: 0xf7fa2000
    vdso addr: 0xf7fa6000
    vdso addr: 0xf7faa000
    vdso addr: 0xf7fac000
    vdso addr: 0xf7fac000
    vdso addr: 0xf7faf000
    vdso addr: 0xf7fb1000
    vdso addr: 0xf7fb4000
    vdso addr: 0xf7fb5000
    vdso addr: 0xf7fb6000
    vdso addr: 0xf7fbe000
    vdso addr: 0xf7fc0000
    vdso addr: 0xf7fc4000
    vdso addr: 0xf7fc6000
    vdso addr: 0xf7fc7000
    vdso addr: 0xf7fcb000
    vdso addr: 0xf7fce000
    vdso addr: 0xf7fce000
    vdso addr: 0xf7fce000
    vdso addr: 0xf7fcf000
    vdso addr: 0xf7fd0000
可以看到结果在`0xf7ed0000`-`0xf7fd0000`之间。
然后在旧的内核版本的运行效果如下：
    ex@ubuntu:~/test$ python3 vdso_addr.py 
    vdso addr: 0xf76d9000
    vdso addr: 0xf76dd000
    vdso addr: 0xf76de000
    vdso addr: 0xf76df000
    vdso addr: 0xf76e0000
    vdso addr: 0xf76e2000
    vdso addr: 0xf76e3000
    vdso addr: 0xf76e4000
    vdso addr: 0xf76ee000
    vdso addr: 0xf76ef000
    vdso addr: 0xf76f3000
    vdso addr: 0xf76f5000
    vdso addr: 0xf7702000
    vdso addr: 0xf7703000
    vdso addr: 0xf7707000
    vdso addr: 0xf7709000
    vdso addr: 0xf770a000
    vdso addr: 0xf770d000
    vdso addr: 0xf7710000
    vdso addr: 0xf7714000
    vdso addr: 0xf7716000
    vdso addr: 0xf7717000
    vdso addr: 0xf7718000
    vdso addr: 0xf7718000
    vdso addr: 0xf771a000
    vdso addr: 0xf771a000
    vdso addr: 0xf771b000
    vdso addr: 0xf771e000
    vdso addr: 0xf771f000
    vdso addr: 0xf771f000
    vdso addr: 0xf7720000
    vdso addr: 0xf7721000
    vdso addr: 0xf7721000
    vdso addr: 0xf772b000
    vdso addr: 0xf772c000
    vdso addr: 0xf772d000
    vdso addr: 0xf7733000
    vdso addr: 0xf7734000
    vdso addr: 0xf7735000
    vdso addr: 0xf7736000
    vdso addr: 0xf773b000
    vdso addr: 0xf773b000
    vdso addr: 0xf773b000
    vdso addr: 0xf773e000
    vdso addr: 0xf773e000
    vdso addr: 0xf7745000
    vdso addr: 0xf7745000
    vdso addr: 0xf7746000
    vdso addr: 0xf7746000
    vdso addr: 0xf7747000
    vdso addr: 0xf7749000
    vdso addr: 0xf774b000
    vdso addr: 0xf774d000
    vdso addr: 0xf774d000
    vdso addr: 0xf7758000
    vdso addr: 0xf7759000
    vdso addr: 0xf7761000
    vdso addr: 0xf7762000
    vdso addr: 0xf7764000
    vdso addr: 0xf7765000
    vdso addr: 0xf776d000
    vdso addr: 0xf7770000
    vdso addr: 0xf7774000
    vdso addr: 0xf777b000
    vdso addr: 0xf777c000
    vdso addr: 0xf777e000
    vdso addr: 0xf777f000
    vdso addr: 0xf777f000
    vdso addr: 0xf7780000
    vdso addr: 0xf7783000
    vdso addr: 0xf7784000
    vdso addr: 0xf7787000
    vdso addr: 0xf7789000
    vdso addr: 0xf778b000
    vdso addr: 0xf778e000
    vdso addr: 0xf7797000
    vdso addr: 0xf7798000
    vdso addr: 0xf779a000
    vdso addr: 0xf779b000
    vdso addr: 0xf779d000
    vdso addr: 0xf779f000
    vdso addr: 0xf77a0000
    vdso addr: 0xf77a0000
    vdso addr: 0xf77a3000
    vdso addr: 0xf77a8000
    vdso addr: 0xf77ad000
    vdso addr: 0xf77b5000
    vdso addr: 0xf77b9000
    vdso addr: 0xf77ba000
    vdso addr: 0xf77ba000
    vdso addr: 0xf77bb000
    vdso addr: 0xf77bf000
    vdso addr: 0xf77c2000
    vdso addr: 0xf77c2000
    vdso addr: 0xf77c2000
    vdso addr: 0xf77c3000
    vdso addr: 0xf77c6000
    vdso addr: 0xf77c6000
    vdso addr: 0xf77cc000
    vdso addr: 0xf77ce000
可以看到结果在`0xf76d9000`-`0xf77ce000`之间。
其他情况可以自行测量。
## exploit 思路
  1. 泄露出vdso
  2. 利用vdso进行ROP
## 举例
我用下来这段汇编代码来举例：
### ret2vdso.s
    push ebp
    mov    ebp, esp
    sub    esp, 128
    lea    eax, buf
    push 4096
    push eax
    push 0
    mov    eax, 0
    call    read
    add esp, 12
    mov esi, eax
    push esi
    lea eax, buf
    push eax 
    lea eax, -128[ebp]
    push eax
    call memcpy
    add esp, 12
    lea eax, -128[ebp]
    push esi
    push eax
    push 1
    mov    eax, 0
    call    write
    add esp, 12
    mov    eax, 0
    mov esp, ebp
    pop ebp
    ret
反汇编出来结果如下：
    int __cdecl main(int argc, const char **argv, const char **envp)
    {
      size_t size; // esi
      char addr[128]; // [esp+0h] [ebp-80h]
      size = read(0, buf, 0x1000u);
      memcpy(addr, buf, size);
      write(1, addr, size);
      return 0;
    }
可以看出，我预留了一个明显的栈溢出，但是这个程序是个手写汇编的程序。你没有办法依赖glibc。
    ex@Ex:~/test$ ldd ret2vdso
        not a dynamic executable
而且基本没有可用的ROP指令：
    ex@Ex:~/test$ ROPgadget --binary ret2vdso
    Gadgets information
    ============================================================