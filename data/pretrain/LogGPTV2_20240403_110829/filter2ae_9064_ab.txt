     * main - print locations of various elements
     *
     * Return: EXIT_FAILURE if something failed. Otherwise EXIT_SUCCESS
     */
    int main(int ac, char **av, char **env)
    {
            int a;
            void *p;
            int i;
            printf("Address of a: %p\n", (void *)&a);
            p = malloc(98);
            if (p == NULL)
            {
                    fprintf(stderr, "Can't malloc\n");
                    return (EXIT_FAILURE);
            }
            printf("Allocated space in the heap: %p\n", p);
            printf("Address of function main: %p\n", (void *)main);
            printf("First bytes of the main function:\n\t");
            for (i = 0; i 
    #include 
    #include 
    /**                                                                                                      
     * main - print locations of various elements                                                            
     *                                                                                                       
     * Return: EXIT_FAILURE if something failed. Otherwise EXIT_SUCCESS                                      
     */
    int main(int ac, char **av, char **env)
    {
         int a;
         void *p;
         int i;
         int size;
         printf("Address of a: %p\n", (void *)&a);
         p = malloc(98);
         if (p == NULL)
         {
              fprintf(stderr, "Can't malloc\n");
              return (EXIT_FAILURE);
         }
         printf("Allocated space in the heap: %p\n", p);
         printf("Address of function main: %p\n", (void *)main);
         printf("First bytes of the main function:\n\t");
         for (i = 0; i  %d bytes (0x%x)\n", i, size, size);
         return (EXIT_SUCCESS);
    }
    julien@holberton:~/holberton/w/hackthevm2$ ./5 Hello Betty Holberton!
    Address of a: 0x7ffc77598acc
    Allocated space in the heap: 0x2216010
    Address of function main: 0x40069d
    First bytes of the main function:
        55 48 89 e5 48 83 ec 40 89 7d dc 48 89 75 d0 
    Address of the array of arguments: 0x7ffc77598bc8
    Addresses of the arguments:
        [./5]:0x7ffc7759a374 [Hello]:0x7ffc7759a378 [Betty]:0x7ffc7759a37e [Holberton!]:0x7ffc7759a384 
    Address of the array of environment variables: 0x7ffc77598bf0
    Address of the first environment variables:
        [0x7ffc7759a38f]:"XDG_VTNR=7"
        [0x7ffc7759a39a]:"XDG_SESSION_ID=c2"
        [0x7ffc7759a3ac]:"CLUTTER_IM_MODULE=xim"
    Size of the array env: 62 elements -> 496 bytes (0x1f0)
    julien@holberton:~/holberton/w/hackthevm2$ bc
    bc 1.06.95
    Copyright 1991-1994, 1997, 1998, 2000, 2004, 2006 Free Software Foundation, Inc.
    This is free software with ABSOLUTELY NO WARRANTY.
    For details type `warranty'. 
    obase=16
    ibase=16
    1F0+7FFC77598BF0
    7FFC77598DE0
    quit
    julien@holberton:~/holberton/w/hackthevm2$
->0x7FFC77598DE0！=（但仍小于）0x7ffc7759a374。所以答案是否定的
更新图表：  
## 栈真的向下生长吗？
让我们调用一个函数并证实这点！如果是真的，则调用函数的变量的内存地址将大于被调用函数的变量的内存地址（main-6.c）。
    #include 
    #include 
    #include 
    /**                                                                                                      
     * f - print locations of various elements                                                               
     *                                                                                                       
     * Returns: nothing                                                                                      
     */
    void f(void)
    {
         int a;
         int b;
         int c;
         a = 98;
         b = 1024;
         c = a * b;
         printf("[f] a = %d, b = %d, c = a * b = %d\n", a, b, c);
         printf("[f] Adresses of a: %p, b = %p, c = %p\n", (void *)&a, (void *)&b, (void *)&c);
    }
    /**                                                                                                      
     * main - print locations of various elements                                                            
     *                                                                                                       
     * Return: EXIT_FAILURE if something failed. Otherwise EXIT_SUCCESS                                      
     */
    int main(int ac, char **av, char **env)
    {
         int a;
         void *p;
         int i;
         int size;
         printf("Address of a: %p\n", (void *)&a);
         p = malloc(98);
         if (p == NULL)
         {
              fprintf(stderr, "Can't malloc\n");
              return (EXIT_FAILURE);
         }
         printf("Allocated space in the heap: %p\n", p);
         printf("Address of function main: %p\n", (void *)main);
         printf("First bytes of the main function:\n\t");