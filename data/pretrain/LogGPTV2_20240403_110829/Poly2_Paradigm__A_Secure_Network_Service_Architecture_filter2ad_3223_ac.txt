V M1 = N 1
R−>S + (N 1
R−>U ∗ N 1
L−>S)
where VM1=Vulnerability Metric
applica-
tion, N 1=Number of vulnerabilities in application one,
R=Remotely exploitable, L=Locally exploitable, S=Gives
Superuser privilege, and U=Gives User privilege.
for one
If two applications running on the same server, the cor-
responding metric is given by the equation
V M2 = (N 1
+ (N 1
+ (N 2
+ (N 1
+ (N 2
R−>S + N 2
R−>U ∗ N 1
R−>U ∗ N 2
R−>U ∗ N 2
R−>U ∗ N 1
R−>S)
L−>S)
L−>S)
L−>S)
L−>S)
(1)
which can be reduced to
V M2 = (N 1
+ (N 1
∗
(N 1
R−>S + N 2
R−>U + N 2
L−>S + N 2
R−>S)
R−>U )
L−>S)
If the two applications are running on separate servers
then the combined vulnerability metric for the two servers
is:
V M separate
2
= (N 1
+ (N 1
+ (N 2
R−>S + N 2
R−>U ∗ N 1
R−>U ∗ N 2
R−>S)
L−>S)
L−>S)
(2)
Because the ﬁfth and sixth terms in the RHS of equa-
tion (1) are greater than or equal to zero, the vulnerabil-
ity metric with applications running on separate systems is
less than or equal to the metric with all applications run-
ning on the same system. Equations (1) and (2) are general-
ized to napplications as:
V Mn = Σn
and
R−>U ) ∗ (Σn
R−>S + (Σn
L−>S)
j=1N j
k=1N k
i=1N i
n
n
= Σn
i=1N i
j=1(N j
V M separate
R−>S + Σn
R−>U ∗ N j
Comparing the above two equations, V M separate
L−>S)
is less
than or equal to V Mn, which shows that running applica-
tions on separate servers can reduce the number of attack
paths. Reducing the numbers of attack paths is a clear ben-
eﬁt applications on separate servers instead of aggregating
them on a single server. Although the beneﬁt may seem ob-
vious, arriving at metrics that can mathematically corrobo-
rate the beliefs and conjectures provides needed rigor in the
area of information security.
A second metric is a measure of the Total Lines of Code
(TLOC)—an indicator of program complexity. If one can
empirically infer that every n lines of code has a certain
number of faults on an average, then TLOC can be used as
an approximate indicator of the number of faults in a pro-
gram. Reducing the TLOC of a program will, therefore re-
duce the number of faults present (if new ones are not intro-
duced in the reduction process). Hence, TLOC can be used
as a simple metric to measure the effectiveness of operat-
ing system minimization.
5.2. Attack Scenarios
Vulnerabilities in software components exist and will
continue to exist. Poly2 reduces the number of vulnerabili-
ties exploitable by attackers and isolates those that remain
to minimize damage from a successful attack on the archi-
tecture as a whole. The attack scenarios described below
provide a view of how different features of Poly2 interact in
achieving those goals.
Consider a software component running in the Poly2
framework with a buffer overﬂow vulnerability resulting
in superuser privileges. An exploit for such a vulnerability
usually results in the attacker gaining a root shell providing
a platform for further perpetration. However, Poly2 servers
do not have shells or other common /bin and /sbin util-
ities. This forces the attacker who wishes to use a shell to
“inject” the shell code or binary onto the server—a task
much more difﬁcult in a minimized system without utili-
ties such as linkers, loaders, compilers and ﬁle-transfer pro-
grams. Even if an attacker has the skill and motivation to
successfully exploit such a vulnerability, the amount of ef-
fort involved will provide a larger window of opportunity to
detect and react to such anomalous behavior.
Next, consider a situation where a server has been com-
promised by exploiting a vulnerability in a running applica-
tion, giving the attacker complete control over the compro-
mised server. In this situation, the Poly2 architecture is de-
signed to eliminate the ability of the attacker to penetrate
other servers in the framework. No information can be sent
out on the Administration Network interface because it is
unidirectional in the opposite direction (enforced perhaps
by a separate hardware ﬁrewall or a Data–Diode). Trafﬁc
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:35:14 UTC from IEEE Xplore.  Restrictions apply. 
sent out on the Security Network can only reach the Secu-
rity Server because other servers cannot receive trafﬁc on
this network. The only network interface on other servers
that the attacker can send trafﬁc to is the Application Net-
work interface, and the only remote programs that can be
reached through that network interface are the applications
running on other minimized servers. Therefore, the only
way to penetrate another system is by exploiting vulnera-
bilities in applications running on those systems. Per the se-
curity policy, mechanisms are in place to prevent denial of
service through ﬂooding (e.g. the network infrastructure is
switched rather than broadcast, and the switches won’t route
trafﬁc between internal hosts). Thus, the attacker’s presence
on a compromised internal server gives no more advantage
than being on any other host on the Internet that can access
those applications. In other words, the Poly2 framework iso-
lates attacks and avoids single points of failure.
6. Future Work
The implementation described is the initial work to
achieve the broad goals of Poly2. The prototype is de-
signed to serve as a platform for future research and de-
velopment in areas of intrusion detection, forensics, high
availability computing, and others.
6.1. Intrusion and Misuse Detection
Intrusion and Misuse Detection (ID) is a rapidly devel-
oping ﬁeld because most deployed computer systems are
vulnerable to an ever increasing threat of attack. Among
the factors that make intrusion detection in generalized net-
working environments difﬁcult is the wide range of services
and protocols that must be protected. By forcing the secu-
rity system designer to cover a wider range of resources,
the defensive assets are, in a sense, “stretched thinner” than
they would be in the highly focused Poly2 environment. The
ability to concentrate defenses on the minimized operating
systems and well deﬁned interfaces between Poly2 compo-
nents allows the exploration of intrusion detection systems
that are both efﬁcient in terms of resource usage, and are
more robust since the possible legitimate activities of the
system are well deﬁned, with aberrations or anomalies eas-
ier to detect.
6.2. Computer Forensics
Computer forensics focuses on the aftermath of a com-
puter security incident. The purpose of computer forensics
is the collection, preservation, analysis, and presentation of
computer-related evidence. This evidence is used to deter-
mine exactly what happened and who was responsible in
such a way that the results are useful in a legal proceed-
ing. The Poly2 architecture isolates security incidents with
its modular design, limited functionality, and well-deﬁned
network pathways. Further research in this area will include
studying the data ﬂows within the networks and consolidat-
ing log ﬁles appropriately.
6.3. High Availability
High Availability (HA), deﬁned as systems that are con-
tinuously operational for long periods of time, is becoming
increasingly important as businesses become more depen-
dent on computers for their operation. High availability typ-
ically includes knowledge of all of a system’s failure modes,
including networks and applications. High availability also
requires that the recovery times for all known failures have
a known upper bound. Several approaches exist for high
availability. One option is to use single, fault-tolerant sys-
tems consisting of redundant components such as power
supplies, RAID, environmental monitoring, fans, and net-
work interface cards. Another solution involves the use of
several units of non-redundant hardware arranged in a clus-
ter so that each node in the cluster is able to take over from
any failures of partner nodes. Research involving the com-
bined beneﬁts of these approaches, failure modes, and re-
covery procedures is desirable to maintain high availability
for scientiﬁc and engineering applications.
7. Related Work
Others have conducted research similar to the Poly2 phi-
losophy. The differences and similarities of Poly2 to these
other approaches are discussed below.
1. Composable High-Assurance Trustworthy
Sys-
tems (CHATS): The CHATS project at the SRI Com-
puter Science laboratory [10], among other things,
analyzes general security principles such as trust-
worthiness, assurance, and composability. Many
of the security principles that guide the develop-
ment of Poly2 are similar to this work.
2. Solaris Operating Environment Minimization for Se-
curity: Work at Sun Microsystems [12] describes tech-
niques for minimizing the Solaris operating system to
run a speciﬁc family of applications. The technique in-
volves installing the core O/S, then installing all ap-
propriate patches, removing all unnecessary packages,
and ﬁnally testing the resulting system. Some of the
techniques described are similar to those proposed in
Poly2 for minimizing the operating system to speciﬁ-
cally suit the desired applications. However, minimiza-
tion in Poly2 is at a ﬁner granularity (such as libraries,
library functions, and system calls) than at the level of
packages.
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:35:14 UTC from IEEE Xplore.  Restrictions apply. 
3. Extremely Reliable Operating System (EROS): EROS
[17] is an operating system with a focus on reliabil-
ity and security. The primary goal of the EROS ker-
nel is to strictly enforce system policies, whereas tradi-
tional operating system services, such as memory man-
agement, are left to the user application to implement.
EROS is so radically different from more standard op-
erating systems that porting modern applications such
as Apache to it is extremely difﬁcult. The Poly2 archi-
tecture also focuses on reliability and security, but is
better able to run common applications.
4. Network Appliances: Appliance servers are network-
enabled devices explicitly designed to provide a single
dedicated service such as web caching, email, ﬁrewall,
or a predeﬁned suite of services. These servers are
often nonprogrammable, fully pre-conﬁgured, sealed
systems that run on a variety of functionally optimized
and/or streamlined operating systems and chip archi-
tectures. The application systems in Poly2 address sim-
ilar needs although from a security-focused perspec-
tive.
5. Hardened Operating Systems and Tools: Hardened op-
erating systems such as TrustedBSD [18], Security-
Enhanced Linux [16], Bastille Linux [7], and Immunix
[3] typically add new security mechanisms, replace ex-
isting modules with more secure ones, and/or disable
certain features to make the system more resistant to
attacks. Although Poly2 has similar goals, the means
of attaining them are not through addition of more soft-
ware and disabling of features, but by removing unnec-
essary software and functionality.
8. Conclusion
The underlying design philosophy of Poly2 challenges
some conventional wisdom. The initial implementation fo-
cuses on segregating applications and networks, and mini-
mizing operating systems. Preliminary metrics for quanti-
fying security properties of Poly2 have been identiﬁed, and
areas of future work have been laid out.
Two approaches are common to improving the security
of an existing system. The ﬁrst involves retroﬁtting secu-
rity by patching known vulnerabilities and adding more
controls. The second involves re-designing the entire sys-
tem from scratch, with security built-in. Most current se-
curity mechanisms fall in the ﬁrst category. The few ap-
proaches in the second category are yet to prove their util-
ity in an application-rich environment. Poly2 takes a mid-
dle ground approach to this problem—an ongoing effort
to retroﬁt well-known security design principles into com-
modity systems without sacriﬁcing usability in a network
service environment.
References
[1] Matt Bishop. Computer Security, art and science. Addison
Wesley, San Francisco, CA, 2003.
[2] M. Blaze, W. Difﬁe, R. Rivest, B. Schneier, T. Shimonnora,
E. Thompson, and M. Wiener. Minimal Key Lengths for Sym-
metric Cyphers to provide Adequate Commercial Security,
1996. www.crypto.com/papers/keylength.pdf.
[3] C. Cowan and C. Pu. Immunix: Survivability through spe-
cialization. In Proceedings of the Information Survivability
Workshop, February 1997.
[4] Myong H. Kang and Ira S. Moskowitz. A pump for rapid, re-
liable, secure communication. In Proceedings of ACM Con-
ference on Computer and Communications Security, pages
119–129, 1993.
[5] Paul Karger and Roger Schell. Thirty years later: Lessons
from the multics security evaluation. In Proceedings of the
18th Annual Computer Security Applications Confference,
Las Vegas, Nevada, December 2002.
[6] S. Kent and R. Atkinson. Security Architecture for the Inter-
net Protocol, RFC 2401, 1998. www.ietf.org/rfc/rfc2401.txt.
[7] Bastille Linux. Bastille Linux. www.bastille-linux.org.
[8] Marshall Kirk McKusick, Keith Bostic, Michael J. Karels,
and John S. Quarterman. The Design and Implementation of
the 4.4BSD Operating System. Addison-Wesley Longman,
Inc, Boston, 1996.
[9] MITRE.
Common vulnerabilities
and exposures.
http://cve.mitre.org.
Neumann.
composable
[10] P.G.
for
www.csl.sri.com/users/neumann/chats.html.
Architectural
survivability
and
frameworks
security.
[11] P.G. Neumann. Practical architectures for survivable systems
and networks. Technical Report Phase two, Project 1688,
SRI International, Menlo Park, California, June 2000.
[12] Alex Noordergraaf and Keith Watson. Solaris operating en-
vironment minimization for security: A simple, reproducible
and secure application installation methodology.
In Sun
BluePrints Online, December 1999.
[13] Jerome H. Saltzer and Michael D. Schroeder. The protec-
tion of information in computer systems. Proceedings of the
IEEE, 63(9):1278–1308, September 1975.
[14] SCARABS. 2 Heads Hard Disk Drive. www.scarabs.com.
[15] Gregg Schudel and Bradley J. Wood. Adversary work factor
as a metric for information assurance. In Proceedings of the
New Security Paradigms Workshop, Cork, Ireland, Septem-
ber 2000.
[16] SELinux. Security-Enhanced Linux. www.nsa.gov/selinux.
[17] Jonathan S. Shapiro and Norm Hardy. EROS: A principle-
driven operating system from the ground up. IEEE Software,
pages 26–33, January 2002.
[18] TrustedBSD. TrustedBSD. www.trustedbsd.org.
[19] Paul Williams, Kevin Anchor, John Bebo, Gregg Gunsch,
and Gary Lamont. CDIS: Towards a Computer Immune Sys-
tem for Detecting Network Intrusions.
In Proceedings of
the 4th International Symposium, Recent Advances in Intru-
sion Detection 2001, pages 117–133, Berlin, 2001. Springer-
Verlag.
Proceedings of the 19th Annual Computer Security Applications Conference (ACSAC 2003) 
1063-9527/03 $17.00 © 2003 IEEE
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:35:14 UTC from IEEE Xplore.  Restrictions apply.