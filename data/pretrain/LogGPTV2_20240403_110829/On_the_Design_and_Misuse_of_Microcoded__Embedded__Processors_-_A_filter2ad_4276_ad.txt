xor
xor
...
t0 , t0 , a3
t1 , t1 , a4
t2 , t2 , a5
t3 , t3 , a6
plaintext
trigger
trigger
plaintext loaded
instruction
sequence
correct instruction
sequence
Trojan
payload
Figure 6: High-Level Attack Overview of the AES Fault Trojan: On the left, the general structure of AES is shown. The arrows
match the associated steps of the AES block diagram [26] to the code taken from [33]. On the right, the associated code snippets
are matched to our Trojan stages, responsible for either the trigger or payload.
tion through multiple cycles and between different instruc-
tions. Note that we store the state using internally-available
scratch registers for this purpose. Our Trojan modiﬁes only
two instructions, namely the LW (load word) instruction, for
the magic plaintext trigger and identiﬁcation of the last KeyAd-
dition, and the XOR instruction to subsequently insert the pay-
load.
The state machine keeps track of the current state of our
multi-stage Trojan. The ﬁnite state machine shown in Figure 7,
shows the transitions in one stage, as well as between different
stages, which are explained in the following sections. The
state machine is implemented in microcode with conditional
jumps based on the current state stored in the scratch registers
and different handlers for the associated state operations. The
state is updated in the scratch register afterward, thus allowing
for communication between instructions and over time.
We provide details based on a RISC-V implementation by
Stoffelen et al. [33], but the general operating principle of
our Trojan is independent of the underlying ISA and imple-
mentation, as discussed in Section 7.3. Currently, none of
the major real-world cryptographic software libraries provide
highly optimized RISC-V assembly implementations. Still,
the availability of implementations is only a matter of time
due to the rising popularity of RISC-V.
7.1.1 Trigger Design
To identify a magic plaintext and the instructions responsible
for the last KeyAddition operation, our multi-stage trigger
operates in two stages, as depicted in Figure 6:
1 Magic Plaintext Trigger. To insert faults only for a spe-
ciﬁc plaintext, we ﬁrst have to check for the plaintext
during the load from memory (via the LW instruction).
Therefore, we alter the LW instruction semantics using
an optimized ﬁnite state machine that checks a prede-
ﬁned sequence of four magic 32-bit words, see Figure 7.
The current state is stored in a scratch register. Once the
magic plaintext trigger has been received, we move to
the next stage.
2 Last KeyAddition Operation Trigger. To identify the
execution of the last KeyAddition operation, we check
for the speciﬁc instruction sequence that loads the last
round key using the state machine approach from the
previous step. Since this load is also implemented via
the LW instruction, as seen in the assembly snippet in
Figure 6, we also change LW instruction semantics ac-
cordingly. Note that we only enter this second trigger
stage once the magic plaintext is detected, see Figure 7.
LW Instruction Semantics Since the LW instruction seman-
tics must be armed with both the plaintext trigger 1 and
USENIX Association
30th USENIX Security Symposium    277
EncryptionRound1LastRoundk0klast_roundpayload can be inserted in the correct position. Afterward, the
result of the XOR operation is modiﬁed by setting the second
operand to zero and storing the last round key in the register
ﬁle instead of the actual ciphertext of the encryption.
Since the state machine only transfers the payload state for
a 128-bit plaintext match (and the correct instruction sequence
has been identiﬁed), the probability of accidental fault injec-
tion is negligible. We refer the interested reader to Appendix
B.2, where we detail the exact microcode implementation of
the Trojan.
7.2 Evaluation
We successfully executed our attack on the RISC-V AES
implementation by Stoffelen [33] by maliciously subverting
the microcode as detailed. The microcode leaks the utilized
cryptographic key if and only if a speciﬁc magic plaintext is
presented to the AES code for encryption.
7.3 Discussion
We demonstrated that complex microcode Trojan triggers can
be implemented that span different instructions.
For implementations that incorporate countermeasures
against fault injection attacks, the Trojan may be equipped
with an additional stage that bypasses subsequent error detec-
tion. If scratch registers cannot be utilized (e.g., high scratch
register pressure) to store the global state across different in-
structions, we may simply use reserved RAM addresses that
are typically available in embedded system memory maps.
Crypto Rarely Changes Our Trojan design requires de-
tailed knowledge of the deployed assembly code, i.e., to match
a certain instruction sequence. We now support our claim that
highly optimized assembly implementations in cryptographic
libraries rarely change, enabling the design of such Trojans.
As an example, OpenSSL provides 30 assembly implementa-
tions for a variety of different platforms [1]. We took the x86
implementation of the major crypto library OpenSSL as an
example and analyzed its commit history on GitHub [2].
the instruction sequence trigger 2 , its microcode becomes
signiﬁcantly complex.
The state check in microcode is performed by comparing
constant values for the associated state encoding (e.g., 0x0 for
the initial state, 0x1 for the second state, ...) with the current
state value held in the associated scratch register. Based on
the current state, we go to the associated microinstruction
that handles the execution of the expected behavior of the
state — to be more precise, checking the speciﬁc word or
offset, depending on the stage. We refer the interested reader
to Appendix B.1, where the microcode implementation of the
LW Trojan is detailed.
7.1.2 Payload Design
To inject faults in the XOR operation of the last KeyAddition
operation, we simply set its second operand to zero. Hence,
the last round key is stored in the state registers. This payload
is executed in the last four states as the lowest segment of the
state machine depicted in Figure 7 shows:
3 KeyAddition Payload. To identify if the XOR payload is
to be executed, ﬁrst, the microcode checks if the payload
execution stage has been reached. After passing this
check, the malicious XOR implementation is executed
and leads to a leakage of the ﬁrst operand, which is the
last round key. This happens for each 32-bit part of the
key. The internal stage counter is incremented for each
XOR operation and subsequently returns to the initial
reset state after four executions of 128-bit operations on
the AES state.
magic_word_0
magic_word_1
magic_word_2
reset
state
ptx_0
ptx_1
ptx_2
Magic Plaintext Trigger
magic_word_3
offset = 168
offset = 164
offset = 160
ins
seq_2
ins
seq_1
ins
seq_0
ptx
rec
offset = 170
Instruction Sequence Trigger
xort_0
xort_1
xort_2
trojan
active
XOR Payload
Figure 7: Detailed AES Fault Trojan FSM, depicting the trig-
ger conditions in each stage.
Figure 8: Graph displaying changes to the optimized
OpenSSL x86 AES implementation since 2004
XOR Instruction Semantics We armed the XOR instruction
semantics with both state machine checks and payload. First,
we check whether the Trojan has been activated so that the
As shown in Figure 8, the frequency of relevant assembly
code changes is limited. Code changes are connected to cache
attack mitigations for the peaks at 1 and 2 , as well as
278    30th USENIX Security Symposium
USENIX Association
200420062008201020122014201620182020010002000300040005000RelevantLoCchangesthe addition of new support for architectures (in this case the
Intel Atom) at peak 3 . The instructions that perform the
actual cryptographic calculation stayed mostly untouched. At
the time of writing, the assembly code has not changed for
over eight years. Hence, it is safe to assume that an adversary
can make certain assumptions about the code layout of the
deployed cryptographic library.
System Impact Table 3 shows that even though the Trojan
implementation was optimized by improving state checks and
efﬁciently handling most probable cases (e.g., no part of the
Trojan has been triggered, and the state machine is in the
ﬁrst state most of the time), the overall Trojan overhead is
relatively high (up to 50%). However, the risk of an accidental
Trojan trigger is negligible due to the use of a sophisticated
trigger condition.
Custom Key Extraction Instruction Instead of leaking
the key by manipulating the last key addition, a custom in-
struction can be added to extract the key at a later time. Once
the loading of the key has been identiﬁed 2 , the key can be
stored in microcode scratch registers. At a later time, the at-
tacker can execute his/her custom malicious instruction to ex-
tract the key from the registers. This method would make the
Trojan even more stealthy since no data manipulation takes
place and only performance overhead is added. However, the
attacker needs access to the system, and storing values for
an extended period of time risks the scratch registers being
overwritten.
8 Discussion
In the following, we discuss the implications of microcode
Trojans and provide insights into possible mitigations.
8.1 Generality and Portability
Even though our case studies focus on embedded systems and
the RISC-V ISA, our microcode Trojans are transferable to
other hardware and software platforms since the necessary
building blocks can be found across modern CPUs (cf. Sec-
tion 3.4). For the constant-time case-study, noise caused by
complex system execution can be addressed in several ways:
(1) increase the number of NOP instructions to amplify timing
dependence, or (2) perform a higher number of measurements.
Instruction level parallelism may have a negative impact on
the Trojans that rely on speciﬁc instruction sequences, espe-
cially if the sequences are complex and long. For example,
interrupts and out-of-order execution could disturb the se-
quence and thus prevent Trojan triggering or lead to false
payload execution. This issue should be analyzed in future
research, as microcode Trojans must be speciﬁcally tailored
for a target architecture.
Complex systems will enable the exploration of additional
kinds of microcode Trojan triggers and payloads. For exam-
ple, in pipelined systems, triggering could be enhanced since
multiple instructions are present in the CPU’s data path at
the same time, allowing for more accurate assessments of an
application under execution.
Microcode Trojans will likely require updates when new
versions or general ﬁrmware updates are issued. However,
microcode is typically updated on a regular basis, making it
adjustable, a key strength compared to hardware Trojans.
8.2 Security Implications
Our case studies demonstrate the severe ramiﬁcations for
system security that are introduced by malicious microcode
updates. Even on our resource-limited embedded system, we
demonstrated powerful Trojans that undermine system secu-
rity. The obscure nature of currently deployed microcoded
CPUs hinders proper security analysis by the general public
since implementation and updates are one of the best-kept
secrets by the vendors. We, as users, must trust our hardware
and its integrity blindly. Even though microcode offers several
advantages, the concept of updatable hardware comes with
signiﬁcant security risks that must be further addressed.
8.3 Mitigations
Open (readable) microcode enables system users to apply
traditional measures from malicious software analysis to iden-
tify malicious behavior. However, since microcode is kept
opaque, we, as a research community, must develop mitiga-
tions to detect anomalies and develop defenses even in such a
strong adversary model.
Fingerprinting Legitimate Microcode Behaviour We ob-
served that our Trojans introduce behavioral timing changes,
see Table 3. Hence, a potential mitigation could involve a ven-
dor measuring the correct timing behavior of each instruction
and publicly reporting the values for each microcode update.
This mitigation would enable end-user checking without the
disclosure of detailed information about the microcoded ar-
chitecture from the microprocessor vendor. Generally, the
timing information could form an ofﬁcial ﬁngerprint released
by the vendor for each instruction. The information could be
extended with additional features, such as power behavior and
general input/output behavior. Users could then ﬁngerprint
each instruction and compare measured results to the vendor-
provided ﬁngerprint. However, this approach assumes that the
information provided by the vendor is trustworthy.
Note that this approach might not work for every instruction
type since several instructions have input-dependent execu-
tion time. Furthermore, the analysis may be manipulated if
hardware features enabled by microcode can be leveraged to
detect that such measurement processes are being performed.
Malware Analysis of Microcode
If microcode is readable
from software, it can be evaluated using malware-like analy-
ses. To enable in-depth analyses, vendors must provide details
of the microcode implementation and structure. A microcode-
USENIX Association
30th USENIX Security Symposium    279
Benchmark
crc_32
edn
huffbench
minver
nshneu
statemate
st
ud
wikisort
matmult-int
mont64
nbody
nettle-sha256
nettle-aes
Without Trojan
Cycles
1027194
21140442
13371606
554736
554736
27258
26762280
196194
80726326
9698424
831484
222240058
270012
2157660
Secure Boot Trojan
Cycles
1027194
23295837
13472850
587142
587142
28347
28760991
200154
83308015
9962424
836962
244234943
270078
2157792
Overhead
Cycles
0.00%
1217883
9.25%
21140640
0.75%
13371711
5.52%
562419
5.52%
562419
3.84%
27258
6.95%
26889999
1.98%