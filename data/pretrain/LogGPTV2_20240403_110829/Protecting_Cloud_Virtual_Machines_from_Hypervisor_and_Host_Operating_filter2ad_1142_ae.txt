### HypSec TCB Analysis and Comparison

#### Table 5: HypSec TCB Breakdown
| Component                | LOC   |
|--------------------------|-------|
| Ed25519 Library          | 4,074 |
| AES Library              | 403   |
| CPU Protection           | 1,883 |
| Memory Protection        | 1,727 |
| Secure Boot              | 232   |
| Helper Functions         | 247   |
| **Total HypSec TCB**     | 8,566 |

#### Table 6: TCB Size Comparison with KVM and Xen
| Hypervisor  | TCB (LOC)        |
|-------------|------------------|
| HypSec      | 8,566            |
| KVM         | 1,857,575        |
| Xen         | 71,604           |
| Xen + Dom0  | 2,054,756        |

### TCB Reduction and Security Enhancements

By integrating HypSec into KVM to protect VM CPU and memory from the rest of the KVM codebase, we demonstrate a significant reduction in the TCB. Specifically, the TCB of KVM can be reduced by more than 200 times. For Xen, the TCB includes both the hypervisor code and Dom0, a privileged VM used for I/O support. A compromised Dom0 can access encryption keys, making Xen's TCB, including Dom0, much larger than KVM and hundreds of times larger than HypSec.

If we assume that features like VM dump and migration, which expose VM state, are disabled, Xen's TCB can be reduced to 71K LOC. This is still an order of magnitude larger than HypSec due to Xen's need for bootstrapping, CPU and memory management, and full support for virtualization. 

For an x86 implementation, we estimated HypSec's TCB by applying it to KVM Linux v4.18 with VMX support. The total TCB size is less than 27K LOC. Although this is larger than the ARM implementation, it still represents a substantial reduction compared to KVM's TCB on x86, which is approximately 10M LOC, including x86 device drivers.

### Evaluation of Practical Attacks

We evaluated HypSec's effectiveness against a compromised hostvisor by analyzing Common Vulnerabilities and Exposures (CVEs) related to Linux/KVM. The CVEs considered two scenarios: a malicious VM exploiting KVM functions and an unprivileged host user exploiting Linux/KVM bugs. Among the selected CVEs, 16 are x86-specific, one is ARM-specific, and the rest are architecture-agnostic.

HypSec protects VM data against all analyzed CVEs, while KVM does not. However, HypSec does not guarantee availability and cannot prevent denial-of-service attacks. Future work will focus on protecting against such vulnerabilities.

### Performance and Implementation Complexity

To measure the TCB, we used `cloc` on our corevisor implementation. The total TCB is roughly 8.5K LOC, with 4.5K LOC from the Ed25519 and AES crypto libraries. The remaining 4.1K LOC covers CPU/memory protection and existing KVM lowvisor code. We modified or added 8,695 LOC in the mainline Linux kernel v4.18, with 1.3K LOC in existing files and 7.3K LOC in new HypSec files. Less than 70 LOC were added to QEMU for secure boot and VM migration. These results show that HypSec can be retrofitted into existing hypervisors with minimal effort.

### Related Work

The concept of retrofitting a commodity hypervisor with a smaller core was inspired by KVM/ARM's split-mode virtualization, which introduced a thin software layer for ARM hardware virtualization without reducing the TCB. HypSec builds on this by leveraging ARM hardware to run the corevisor with special privileges, protecting VM data against a compromised hostvisor.

Nested Kernel [25] also retrofits a small TCB into FreeBSD to enforce kernel code integrity. Both HypSec and Nested Kernel aim to strengthen system security with minimal implementation and performance costs. However, Nested Kernel focuses on a different threat model and does not protect against vulnerabilities in existing kernel code.

Bare-metal hypervisors like Xen often claim a smaller TCB, but in practice, the TCB includes Dom0, making it no smaller than hosted hypervisors like KVM. Some work aims to reduce Xen's attack surface by redesigning Dom0, but these approaches do not protect VMs against a compromised Xen or Dom0. We believe Xen can be restructured using HypSec to move critical components and reduce the TCB.