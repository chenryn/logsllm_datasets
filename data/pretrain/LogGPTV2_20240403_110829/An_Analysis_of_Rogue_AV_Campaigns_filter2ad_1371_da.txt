actions? Certainly, such responses may also be issued by an AD mechanism working
independently of the underlying access control system. The usefulness of our approach
is evident from the following scenario. Suppose we model a user request as the usage
of a set of privileges in the system where a privilege is deﬁned as an operation on a
resource. For example, the SQL query ‘SELECT * FROM orders, parts’ is modeled
as using the privileges {select,orders} and {select,parts} in the context of a database
management system (DBMS). After detecting such request as anomalous (using any
anomaly detection algorithm), consider that we want to re-authenticate the user and
drop the request in case the re-authentication procedure fails. Suppose that every time
a similar request is detected to be anomalous, we want the same re-authentication pro-
cedure to be repeated. If our response mechanism does not remember the requests,
then the request will always undergo the detection procedure, detected to be anomalous
and then submitted to the response mechanism to trigger the re-authentication proce-
dure. A more generic and ﬂexible approach for achieving such response semantics is
to attach a suspend state to the privileges associated with the anomalous request. Then
for every subsequent similar request (that uses the same set of privileges as the ear-
lier request that was detected to be anomalous), the semantics of the privilege in the
suspend state automatically triggers the re-authentication sequence of actions for the
request under consideration without the request being subjected to the detection mech-
anism. Moreover, if the system is set-up such that the request is always subjected to
the detection mechanism (in case access control enforcement is performed after the in-
trusion detection task), more advanced response logic can be built based on the fact
that a request is detected to be anomalous whose privileges are already in the suspend
state.
In addition to supporting ﬁne-grained intrusion response, manually moving a priv-
ilege to the suspend state (using administrative commands) provides the basis for an
event based continuous authentication mechanism. Similar arguments can be made for
attaching the taint state to a privilege that triggers auditing of the request in progress.
Since we extend the decision semantics of our access control system using privilege
states, we call it a privilege state based access control (PSAC) system. For the com-
pleteness of the access control decisions, a privilege, assigned to a user or role, in PSAC
can exist in the following ﬁve states: unassign, grant, taint, suspend, and deny. The priv-
ilege states, the state transition semantics and a formal model of PSAC are described in
detail in Section 2. Note that the PSAC model that we present in Section 2 is ﬂexible
enough to allow more than the above mentioned ﬁve states.
We have developed PSAC in the context of a role based access control (RBAC)
system [18]. Extending PSAC with roles presents the main challenge of state conﬂict
resolution, that is, deciding on the ﬁnal state of a privilege when a principal receives the
same privilege in different states from other principals. Moreover, additional complexity
is introduced when the roles are arranged in a hierarchy where the roles higher-up in the
Privilege States Based Access Control for Fine-Grained Intrusion Response
405
hierarchy inherit the privileges of the lower level roles. We present precise semantics in
PSAC to deal with such scenarios.
The main contributions of this paper can be summarized as follows:
1. We present the design details, and a formal model of PSAC in the context of a
DBMS.
2. We extend the PSAC semantics to take into account a role hierarchy.
3. We implement PSAC in the PostgreSQL DBMS [5] and discuss relevant design
issues.
4. We conduct an experimental evaluation of the access control enforcement over-
head introduced by the maintenance of privilege states in PSAC, and show that our
implementation design is very efﬁcient.
The rest of the paper is organized as follows. Section 2 presents the details of PSAC
and its formal model; it also discusses how a role hierarchy is supported. Section 3
presents the details of the system implemented in PostgreSQL, and the experimental
results concerning the overhead introduced by the privilege states on the access control
functions. Section 4 discusses the related work in this area. We conclude the paper in
Section 5.
2 PSAC Design and Formal Model
In this section, we introduce the design and the formal model underlying PSAC. We
assume that the authorization model also supports roles, in that RBAC is widely used by
access control systems of current DBMSs [11,4,7]. In what follows, we ﬁrst introduce
the privilege state semantics and state transitions. We then discuss in detail how those
notions have to be extended when dealing with role hierarchies.
2.1 Privilege States Dominance Relationship
PSAC supports ﬁve different privilege states that are listed in Table 1. For each state,
the table describes the semantics in terms of the result of an access check.
A privilege in the unassign state is equivalent to the privilege not being assigned
to a principal; and a privilege in the grant state is equivalent to the privilege being
Table 1. Privilege States
Access Check Result Semantics
State
unassign The access to the resource is not granted.
grant
taint
The access to the resource is granted.
The access to the resource is granted;
the system audits access to the resource.
suspend The access to the resource is not granted until
deny
further negotiation with the principal is satisﬁed.
The access to the resource is not granted.
406
A. Kamra and E. Bertino
granted to a principal. We include the deny state in our model to support the concept of
negative authorizations in which a privilege is speciﬁcally denied to a principal [9]. The
suspend and the taint states support the ﬁne-grained decision semantics for the result of
an access check.
In most DBMSs, there are two distinct ways according to which a user/role1 can
obtain a privilege p on a database object o:
1. Role-assignment: the user/role is assigned a role that has been assigned p;
2. Discretionary: the user is the owner of o; or the user/role is assigned p by another
user/role that has been assigned p with the GRANT option2.
Because of the multiple ways by which a privilege can be obtained, conﬂicts are natural
in cases where the same privilege, obtained from multiple sources, exists in different
states. Therefore, a conﬂict resolution strategy must be deﬁned to address such cases.
Our strategy is to introduce a privilege states dominance (PSD) relation (see Figure 2).
The PSD relation imposes a total order on the set of privilege states such that any two
states are comparable under the PSD relation. Note the following characteristics of the
semantics of the PSD relation. First, the deny state overrides all the other states to
support the concept of a negative authorization [9]. Second, the suspend, and the taint
states override the grant state as they can be triggered as potential response actions to
an anomalous request. Finally, the unassign state is overridden by all the other states
thereby preserving the traditional semantics of privilege assignment.
The PSD relation is the core mechanism that PSAC provides for resolving conﬂicts.
For example, consider a user u that derives its privileges by being assigned a role r.
Suppose that a privilege p is assigned to r in the grant state. Now suppose we directly
deny p to u. The question is which is the state of privilege p for u, in that u has received
p with two different states. We resolve such conﬂicts in PSAC using the PSD relation.
Because in the PSD relation, the deny state overrides the grant state, p is denied to u.
We formally deﬁne a PSD relation as follows:
Deﬁnition 1. (PSD Relation) Let n be the number of privilege states. Let S =
{s1, s2 . . . sn} be the set of privilege states. The PSD relation is a binary relation (de-
noted by (cid:13)) on S such that for all si, sj, sk ∈ S:
1. si (cid:13) sj means si overrides sj
2. if si (cid:13) sj and sj (cid:13) si, then si = sj (anti-symmetry)
3. if si (cid:13) sj and sj (cid:13) sk, then si (cid:13) sk (transitivity)
4. si (cid:13) sj or sj (cid:13) si (totality)
(cid:5)
2.2 Privilege State Transitions
We now turn our attention to the privilege state transitions in PSAC. Initially, when a
privilege is not assigned to a principal, it is in the unassign state for that principal. Thus,
1 From here on, we use the terms principal and user/role interchangeably.
2 A privilege granted to a principal with the GRANT option allows the principal to grant that
privilege to other principals [2].
Privilege States Based Access Control for Fine-Grained Intrusion Response
407
DENY
SUSPEND
TAINT
GRANT
UNASSIGN
means ‘X’ overrides ‘Y’
X
Y
Fig. 2. Privilege States Dominance Relationship
DENY
SUSPEND
TAINT
GRANT
UNASSIGN
means ‘X’ overrides ‘Y’
X
Y
Fig. 3. Privilege State Transitions
the unassign state is the default (or initial) state of a privilege. The state transitions can
be triggered as internal response actions by an AD system, or as ad-hoc administrative
commands. In what follows, we discuss the various administrative commands available
in PSAC to trigger privilege state transitions.
408
A. Kamra and E. Bertino
The GRANT command is used to assign a privilege to a principal in the grant state
whereas the REVOKE command is used to assign a privilege to a principal in the
unassign state. In this sense, these commands support similar functionality as the SQL-
99 GRANT and REVOKE commands [2]. The DENY command assigns a privilege to
a principal in the deny state. We introduce two new commands in PSAC namely, SUS-
PEND and TAINT, for assigning a privilege to a principal in the suspend and the taint
states, respectively. The privilege state transitions are summarized in Figure 3. Note the
constraint that a privilege assigned to a principal on a DBMS object can only exist in
one state at any given point in time.
2.3 Formal Model
In this section, we formally deﬁne the privilege model for PSAC in the context of a
DBMS. The model is based on the following relations and functions:
Relations
1. U , the set of all users in the DBMS.
2. R, the set of all roles in the DBMS.
3. P R = U ∪ R, the set of principals (users/roles) in the DBMS.
4. OT , the set of all DBMS object types such as server, database, schema, table, and
so forth.
under the PSD relation (Deﬁnition 2.1).
insert, delete, drop, backup, disconnect, and so forth.
5. O, the set of all DBMS objects of all object types.
6. OP, the set of all operations deﬁned on the object types in OT , such as select,
7. S = {deny,suspend,taint,grant,unassign}, a totally ordered set of privilege states
8. P ⊂ OP × OT , a many-to-many relation on operations and object types represent-
ing the set of all privileges. Note that not all operations are deﬁned for all object
types. For example, tuples of the form (select, server) or (drop, server) are not
elements of P .
9. URA ⊆ U × R, a many-to-many user to role assignment relation.
10. PRUPOSA ⊂ P R × U × P × O × S, a principal to user to privilege to object
to state assignment relation. This relation captures the state of the access control
mechanism in terms of the privileges, and their states, that are directly assigned to
users (assignees) by other principals (assigners) on DBMS objects3.
11. PRRPOSA ⊂ P R × R × P × O × S, a principals to role to privilege to object
to state assignment relation. This relation captures the state of the access control
mechanism in terms of the privileges, and their states, that are directly assigned to
roles (assignees) by principals (assigners).
3 In PSAC, a role can also be an assigner of privileges. Consider a situation when a user u gets
a privilege p (with grant option) through assignment of role r. If u grants p to some other user
u(cid:4)
, PSAC records p as being granted to u(cid:4)
by r even though the actual GRANT command was
executed by u.
Privilege States Based Access Control for Fine-Grained Intrusion Response
409
These relations capture the state of the access control system in terms of the privilege
and the role assignments. The functions deﬁned below determine the state of a privilege
assigned to a user/role on a DBMS object.
by the principal pr, on an object o.
.
Functions
1. assigned roles(u) : U → 2R, a function mapping a user u to its assigned roles
such that assigned roles(u) = {r ∈ R | (u, r) ∈ URA}. This function returns the
set of roles that are assigned to a user.
2. priv states(pr , r(cid:4), p, o) : P R × R × P × O → 2S, a function mapping a principal
pr (privilege assigner), a role r(cid:4)
, a privilege p, and an object o to a set of privilege
states such that priv states(pr , r(cid:4), p, o) = {s ∈ S | (pr, r(cid:4), p, o, s) ∈ PRRPOSA}.
This function returns the set of states for a privilege p, that is directly assigned to
the role r(cid:4)
3. priv states(pr , u(cid:4), p, o) : P R × U × P × O → 2S, a function mapping a prin-
cipal pr (privilege assigner), a user u(cid:4)
, a privilege p, and an object o to a set of
privilege states such that priv states(pr , u(cid:4), p, o) = {s ∈ S | (pr , u(cid:4), p, o, s) ∈
PRUPOSA} ∪r∈assigned roles(u(cid:2)) priv states(pr , r , p, o). The set of states re-
turned by this function is the union of the privilege state directly assigned to the
user u(cid:4)
by the principal pr, and the privilege states (also assigned by pr) obtained
through the roles assigned to u(cid:4)
4. priv states(r , p, o) : R × P × O → 2S, a function mapping a role r, a privilege p,
and an object o to a set of privilege states such that priv states(r , p, o) = ∪pr∈P R
priv states(pr , r , p, o). This function returns the set of states for a privilege p, that
is directly assigned to the role r by any principal in the DBMS, on an object o.
, a priv-
ilege p, and an object o to a set of privilege states such that priv states(u(cid:4), p, o)
= ∪pr∈P R priv states(pr , u(cid:4), p, o). This function returns the set of states for a
privilege p, that is directly assigned to the user u(cid:4)
by any principal in the DBMS,
on an object o.
6. PSD state(2 S ) : 2S → S, a function mapping a set of states 2S to a state ∈ S such
that PSD state(2 S ) = s(cid:4) ∈ 2S | ∀s∈2S|s(cid:8)=s(cid:2) s(cid:4) (cid:13) s. This function returns the ﬁnal
state of a privilege using the PSD relation.
5. priv states(u(cid:4), p, o) : U × P × O → 2S, a function mapping a user u(cid:4)
2.4 Role Hierarchy
Traditionally, roles can be arranged in a conceptual hierarchy using the role-to-role
assignment relation. For example, if a role r2 is assigned to a role r1, then r1 becomes
a parent of r2 in the conceptual role hierarchy. Such hierarchy signiﬁes that the role
r1 inherits the privileges of the role r2 and thus, is a more privileged role then r2.
However, in PSAC such privilege inheritance semantics may create a problem because
of a deny/suspend/taint state attached to a privilege. The problem is as follows.
Suppose a privilege p is assigned to the role r2 in the deny state. The role r1 will also
have such privilege in the deny state since it inherits it from the role r2. Thus, denying
410
A. Kamra and E. Bertino
a privilege to a lower level role has the affect of denying that privilege to all roles that
inherit from that role. This defeats the purpose of maintaining a role hierarchy in which
roles higher up the hierarchy are supposed to be more privileged than the descendant
roles. To address this issue, we introduce the concept of privilege orientation. We deﬁne
three privilege orientation modes namely, up, down, and neutral. A privilege assigned
to a role in the up orientation mode means that the privilege is also assigned to its
parent roles. On the other hand, a privilege assigned to a role in the down orientation
mode means that the privilege is also assigned to its children roles; while the neutral
orientation mode implies that the privilege is neither assigned to the parent roles nor to
the children roles. We put the following two constraints on the assignment of orientation
modes on the privileges.
– A privilege assigned to a role in the grant or in the unassign state is always in
the up orientation mode thereby maintaining the traditional privilege inheritance
semantics in a role hierarchy.
– A privilege assigned to a role in the deny, taint, or suspend state may only be in the
down or in the neutral orientation mode. Assigning such privilege states to a role in
the down or neutral mode ensures that the role still remains more privileged than its
children roles. In addition, the neutral mode is particularly useful when a privilege
needs to be assigned to a role without affecting the rest of the role hierarchy (when
responding to an anomaly, for example).
We formalize the privilege model of PSAC in the presence of a role hierarchy as follows:
1. RRA ⊂ R × R, a many-to-many role to role assignment relation. A tuple of the
form (r1, r2) ∈ R × R means that the role r2 is assigned to the role r1. Thus, role
r1 is a parent of role r2 in the conceptual role hierarchy.
4. assigned roles(r(cid:4)) : R → 2R, a function mapping a role r(cid:4)
2. OR = {up, down, neutral}, the set of privilege orientation modes.
3. PRRPOSORA ⊂ P R × R × P × O × S × OR, a principal to role to privilege
to object to state to orientation mode assignment relation. This relation captures the
state of the access control system in terms of the privileges, their states, and their
orientation modes that are directly assigned to roles by principals.
to its assigned roles
such that assigned roles(r(cid:4)) = {r ∈ R | (r(cid:4), r) ∈ RRA} ∪ assigned roles(r).
This function returns the set of the roles that are directly and indirectly (through
the role hierarchy) assigned to a role; in other words, the set of descendant roles of
a role in the role hierarchy.
5. assigned roles(u) : U → 2R, a function mapping a user u to its assigned roles
such that assigned roles(u) = {r ∈ R | (u, r) ∈ URA} ∪ assigned roles(r). This
function returns the set of roles that are directly and indirectly (through the role
hierarchy) assigned to a user.
to a set of roles such
that assigned to roles(r(cid:4)) = {r ∈ R | (r, r(cid:4)) ∈ RRA} ∪ assigned to roles(r).
This function returns the set of roles that a role is directly and indirectly (through
6. assigned to roles(r(cid:4)) : R → 2R, a function mapping a role r(cid:4)
Privilege States Based Access Control for Fine-Grained Intrusion Response
411
r0
r3
r_t
op
r2
2
2
2
r_bot
ttom
r1
r4
Fig. 4. A Sample Role Hierarchy
the role hierarchy) assigned to; in other words, the set of ancestor roles of a role in
the role hierarchy.
We redeﬁne the priv states(pr , r(cid:4), p, o) function in the presence of a role hier-
archy taking into account the privilege orientation constraints as follows:
7. priv states(pr , r(cid:4), p, o) : P R × R × P × O → 2S, a function mapping a
principal pr, a role r(cid:4)
, a privilege s, and an object o to a set of privilege states
such that priv states(pr , r(cid:4), p, o) = {s ∈ S | ∀ or ∈ OR, (pr, r(cid:4), p, o, s, or)
∈ PRRPOSORA } ∪ {s ∈ {grant, unassign} | ∀ r ∈ assigned roles(r(cid:4)),
(pr, r, p, o, s, ‘up(cid:4)) ∈ P RRP OSORA } ∪ {s ∈ {deny, suspend, taint} | ∀ r
∈ assigned to roles(r(cid:4)), (pr, r, p, o, s, ‘down(cid:4)) ∈ P RRP OSORA }. The set of
privilege states returned by this function is the union of the privilege states directly
assigned to the role r(cid:4)
by the principal pr, the privilege states in the grant or the
unassign states (also assigned by pr) obtained through the descendant roles of r(cid:4)
,
and the privilege states in the deny, suspend, and taint states (also assigned by pr)
obtained through the roles that are the ancestor roles of r(cid:4)
, and that are in the down
orientation mode.
We now present a comprehensive example of the above introduced relations and func-
tions in PSAC. Consider a sample role hierarchy in Figure 4. Table 2 shows the state of
a sample P RRP OSORA relation.
Table 2. P RRP OSORA relation
O S
P
PR R
select t1 deny
SU1 r top
SU1 r0
select t1 taint
SU1 r bottom select t1 grant
SU2 r top