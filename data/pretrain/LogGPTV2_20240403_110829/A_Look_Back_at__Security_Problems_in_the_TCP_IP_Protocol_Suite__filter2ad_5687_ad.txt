The Internet Activities Board does not currently recommend the Au-
thentication Server for implementation [14]. However, the decision
was not made because of security problems [80].
Proceedings of the 20th Annual Computer Security Applications Conference (ACSAC’04) 
1063-9527/04 $ 20.00 IEEE 
the Needham-Schroeder algorithm [75, 28, 76]. TCP by it-
self is inadequate.
strongly
The original paper
suggested
that
the authentication server was a bad
idea. Unfortunately,
it has been modern-
ized [98] and is still used today. Fortu-
nately, its primary use is for auditing (es-
pecially of email), rather than authentica-
tion; even so,
the weaknesses outlined
here (as well as in the Security Consid-
erations section of
Indeed,
I personally run a readily-available im-
plementation that
replies to all queries
with the message “ident-is-a-completely-
pointless-protocol-that-offers-no-security-or-
traceability-at-all-so-take-this-and-log-it!”
[98]
remain.
5. Here be Dragons
Some protocols, while not inherently ﬂawed, are never-
theless susceptible to abuse. A wise implementor would do
well to take these problems into account when providing the
service.
5.1. The “Finger” Service
Many systems implement a ﬁnger service [48]. This
server will display useful information about users, such as
their full names, phone numbers, ofﬁce numbers, etc. Un-
fortunately, such data provides useful grist for the mill of
a password cracker [46]. By running such a service, a sys-
tem administrator is giving away this data.
It is debatable whether or not this is an archi-
tectural problem or an implementation prob-
lem. The RFC never says precisely what
information shoudl be returned, though the
samples do show full names and a few phone
numbers. The precise question is generally
moot today for external attacks—ﬁrewalls will
generally block the ﬁnger protocol—but mod-
ern Web servers often release the same sort
of
information. Search engines yield even
more data. Is password-guessing still use-
ful to attackers? Beyond question, yes; I’ve
seen new implementations within the last few
months.
5.2. Electronic Mail
Electronic mail is probably the most valuable service on
the Internet. Nevertheless, it is quite vulnerable to misuse.
As normally implemented [24, 82], the mail server pro-
vides no authentication mechanisms. This leaves the door
wide open to faked messages. RFC 822 does support an En-
crypted header line, but this is not widely used. (However,
see RFC 1040 [60] for a discussion of a proposed new en-
cryption standard for electronic mail.)
Authenticating and encrypting email have be-
come far more important today than in 1989.
There is still no widely-deployed method of
authenticating email; one is likely to be de-
ployed in the near future, though arguably
for the wrong reason. Spammers and “phish-
ers” use fake email addresses; there are a
number of proposals on the table to some-
how authenticate the source of the email.
But they won’t work. The problem is that au-
thentication proves an identity; it says noth-
ing of whether or not that party is autho-
rized to send you email. Most people are will-
ing to accept email from anyone; spammers
can and do claim to be sending email from
sites like asdfghij.com, and they’re right: that
is their email address. What does authentica-
tion prove?
It may slow down the phishers slightly,
but only slightly. True, if email were authenti-
cated they could no longer claim to be Your-
RealBank.com, but
they could claim to
be E-YourRealBank.com, YourRealBank-
Onilne.com, www-YourRealBank.com, etc.
(The very ﬁrst phishing attempt I know of
claimed to be from paypa1.com—and it was.
Of course, lots of people read that as pay-
pal.com.)
Fake email has been used for other sin-
ister purposes, such as stock market fraud:
the perpetrator sent a message to an in-
vestor’s newswire saying that wonderful
things were happening to some com-
pany. Naturally, its stock went up—and he
sold at the peak. Digitally-signed press re-
leases would prevent that sort of thing—if the
recipients checked the signatures, the cer-
tiﬁcates, etc., against some known-good
values.
Encrypting email is also useful in some sit-
uations, and there are a number of choices
available [39, 5]. The practical problem is that
the endpoints aren’t secure.
5.2.1. The Post Ofﬁce Protocol The The Post Ofﬁce Pro-
tocol (POP) [15] allows a remote user to retrieve mail stored
on a central server machine. Authentication is by means of
Proceedings of the 20th Annual Computer Security Applications Conference (ACSAC’04) 
1063-9527/04 $ 20.00 IEEE 
a single command containing both the user name and the
password. However, combining the two on a single com-
mand mandates the use of conventional passwords. And
such passwords are becoming less popular; they are too vul-
nerable to wire-tappers, intentional or accidental disclosure,
etc.
As an alternative, many sites are adopting “one-time
passwords”.8 With one-time passwords, the host and some
device available to the user share a cryptographic key. The
host issues a random challenge; both sides encrypt this num-
ber, and the user transmits it back to the host. Since the chal-
lenge is random, the reply is unique to that session, thereby
defeating eavesdroppers. And since the user does not know
the key—it is irretrievably stored in the device—the pass-
word cannot be given away without depriving the user of
the ability to log in.
The newest version of POP [87] has split the user name
and password into two commands, which is useful. How-
ever, it also deﬁnes an optional mechanism for preauthenti-
cated connections, typically using Berkeley’s mechanisms.
Commendably, the security risks of this variant are men-
tioned explicitly in the document.
POP3 [72] has gained in importance; it’s the
princple mechanism people use to retrieve
email from servers. Simple passwords are
still the most common authentication mech-
anism; while a variant that uses SSL encryp-
tion [85] is available, most people don’t use it.
Another mail retrieval protocol, IMAP4 [23],
has similar security properties: encryption is
available but largely unused.
5.2.2. PCMAIL The PCMAIL protocol [58] uses au-
thentication mechanisms similar to those in POP2. In
one major respect, PCMAIL is more dangerous: it sup-
ports a password-change command. This request requires
that both the old and new passwords be transmitted unen-
crypted.
This protocol is no longer used.
5.3. The Domain Name System
The Domain Name System (DNS) [67, 68] provides for
a distributed database mapping host names to IP addresses.
An intruder who interferes with the proper operation of the
DNS can mount a variety of attacks, including denial of ser-
vice and password collection. There are a number of vulner-
abilities.
In some resolver implementations, it is possible to mount
a sequence number attack against a particular user. When
8 One-time passwords were apparently ﬁrst used for military IFF (Iden-
tiﬁcation Friend or Foe) systems [29].
the target user attempts to connect to a remote machine, an
attacker can generate a domain server response to the tar-
get’s query. This requires knowing both the UDP port used
by the client’s resolver and the DNS sequence number used
for the query. The latter is often quite easy to obtain, though,
since some resolvers always start their sequence numbers
with 0. And the former may be obtainable via netstat or
some analogous host command.
A combined attack on the domain system and the rout-
ing mechanisms can be catastrophic. The intruder can inter-
cept virtually all requests to translate names to IP addresses,
and supply the address of a subverted machine instead; this
would allow the intruder to spy on all trafﬁc, and build a
nice collection of passwords if desired.
For this reason, domain servers are high-value targets; a
sufﬁciently determined attacker might ﬁnd it useful to take
over a server by other means, including subverting the ma-
chine one is on, or even physically interfering with its link
to the Internet. There is no network defense against the for-
mer, which suggests that domain servers should only run on
highly secure machines; the latter issue may be addressed
by using authentication techniques on domain server re-
sponses.
The DNS, even when functioning correctly, can be used
for some types of spying. The normal mode of operation
of the DNS is to make speciﬁc queries, and receive spe-
ciﬁc responses. However, a zone transfer (AXFR) request
exists that can be used to download an entire section of the
database; by applying this recursively, a complete map of
the name space can be produced. Such a database represents
a potential security risk; if, for example, an intruder knows
that a particular brand of host or operating system has a par-
ticular vulnerability, that database can be consulted to ﬁnd
all such targets. Other uses for such a database include espi-
onage; the number and type of machines in a particular or-
ganization, for example, can give away valuable data about
the size of the organization, and hence the resources com-
mitted to a particular project.
Fortunately, the domain system includes an error code
for “refused”; an administrative prohibition against such
zone transfers is explicitly recognized as a legitimate rea-
son for refusal. This code should be employed for zone
transfer requests from any host not known to be a legiti-
mate secondary server. Unfortunately, there is no authen-
tication mechanism provided in the AXFR request; source
address authentication is the best that can be done.
Recently, a compatible authentication extension to the
DNS has been devised at M.I.T. The Hesiod name server
[36] uses Kerberos [99] tickets to authenticate queries and
responses. The additional information section of the query
carries an encrypted ticket, which includes a session key;
this key, known only to Hesiod and the client, is used to
compute a cryptographic checksum of the both the query
Proceedings of the 20th Annual Computer Security Applications Conference (ACSAC’04) 
1063-9527/04 $ 20.00 IEEE 
and the response. These checksums are also sent in the ad-
ditional information ﬁeld.
The DNS remains a crucial weak spot in the
Internet [89]. Other attacks have been found
in the intervening years.
I was told of the ﬁrst shortly after this paper
was published. Though I had railed against
address-based authentication, in fact the r-
utilities do name-based authentication: they
look up the hostname corresponding to the
originator’s IP address, and use it to make
an authentication decision. But given the way
hostname lookups work with the DNS, the
owner of the IP address block involved con-
trols what names are returned. Thus, if I own
192.0.2.0/24, I can create a PTR record for,
say, 192.0.2.1; this record would identify the
host as YourTrustedHost.com. There are no
violations of the DNS or r-utility protocols in-
volved here, nor any tricky address spooﬁng.
Instead, the attacker simply needs to lie.
The lesson is clear: when building security
systems, understand exactly what elements
are being trusted. In this case, not only was
trust residing in the DNS (itself a problem),
trust was residing in a piece of the DNS con-
trolled by the enemy. The ﬁx (against this par-
ticular attack) was simple: use the returned
hostname and look up its IP address, and
verify that it matches the address used in the
connection. Assuming that you control the
relevant portion of the DNS tree, this foils the
attack. Of course, and as noted above, users
are able to extend trust, possibly to a part
of the DNS tree not controlled by someone
trustworthy.
Even without ill-advised trust, you’re rely-
ing on the rest of the DNS. Cache contam-
ination attacks [9] can create false entries.
For that matter, the technical and administra-
tive procedures used to update zones such
as .com can be subverted; that’s happened,
too.
There are defenses against some of the
DNS attacks. Filtering [20] can prevent cer-
tain kinds of cache contamination attacks.
Many popular implementations have been
hardened against sequence number attacks
[102]. A comprehensive discussion of DNS-
related threats can be found in [8].
I was wrong to laud Hesiod as a solu-
tion to DNS security problems. Hesiod pro-
tects the transmission and response;
it
does not protect the data, and the respond-
ing name server might
itself have been
deceived. The right solution is DNSsec
[37], which provides for digitally-signed re-
source records. DNSsec deployment has
been very slow, partially because it was
so hard to get many of
the design de-
tails right; see, for example, [47, 4, 105],
5.4. The File Transfer Protocol
The File Transfer Protocol (FTP) [83] itself is not
the implementa-
ﬂawed. However, a few aspects of
tion merit some care.
5.4.1. FTP Authentication FTP relies on a login and
password combination for authentication. As noted, sim-
ple passwords are increasingly seen as inadequate; more
and more sites are adopting one-time passwords. Noth-
ing in the FTP speciﬁcation precludes such an authentica-
tion method. It is vital, however, that the “331” response to
a USER subcommand be displayed to the user; this mes-
sage would presumably contain the challenge. An FTP im-
plementation that concealed this response could not be used
in this mode; if such implementations are (or become) com-
mon, it may be necessary to use a new reply code to
indicate that the user must see the content of the chal-
lenge.
5.4.2. Anonymous FTP A second problem area is
“anonymous FTP”. While not required by the FTP spec-
iﬁcation, anonymous FTP is a treasured part of the oral
tradition of the Internet. Nevertheless, it should be imple-
mented with care.
One part of the problem is the implementation technique
chosen. Some implementations of FTP require creation of
a partial replica of the directory tree; care must be taken to
ensure that these ﬁles are not subject to compromise. Nor
should they contain any sensitive information, such as en-
crypted passwords.
The second problem is that anonymous FTP is truly
anonymous; there is no record of who has requested what
information. Mail-based servers will provide that data; they
also provide useful techniques for load-limiting,9 back-
ground transfers, etc.
FTP is hard to secure.
It’s reasonably