Using python 3.3 on Mac OS:
    import requests
    requests.post("http://localhost:8080/nonexistent",
                  headers = {'Content-Type': 'text/plain;charset=UTF-8'},
                  data=b'foo')
results in the following request (captured with tcpdump):
    POST /nonexistent HTTP/1.1
    Host: localhost:8080
    Accept-Encoding: identity
    Accept-Encoding: gzip, deflate, compress
    Content-Type: application/x-www-form-urlencoded
    Content-Type: text/plain;charset=UTF-8
    Accept: */*
    Content-Length: 3
    User-Agent: python-requests/1.2.0 CPython/3.3.1 Darwin/12.3.0
    foo
Note that the specified content-type header is present, but another "Content-
Type: application/x-www-form-urlencoded" is added. As far as I can tell, the
extra Content-Type header is added at the end of prepare_body in models.py due
to `'content-type' in self.headers` not recognizing the existing content-type
header in the `self.headers` dict (the key is, at that time, `b'Content-type`,
and it seems it's this str  bytes comparison that fails).
It is possible to work around this by wrapping the bytes in a BytesIO object
(and setting it's len property), but it still seems like a bug?