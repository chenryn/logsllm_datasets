    WHERE name = 'beautiful image';  
```  
只有超级用户有SQL接口(即数据库端大对象导出、导入函数)lo\_export, lo\_import的权限. 因为这两个函数可以读写文件系统. 必须数据库超级用户才能执行. 否则可能被攻击:  
[《[转] 关于入侵PostgreSQL的那些事儿（文件读取写入、命令执行的办法）  -大对象》](../201802/20180201_03.md)    
[《大对象 - 数据库common安全自动渗透测试与防范 - sqlmap》](../201702/20170213_01.md)    
[《大对象攻击 - Hacking PostgreSQL》](../201610/20161018_02.md)    
## 大对象清理  
dead 大对象清理 (未被任何引用的大对象清理)  
方法1、直接调用lo\_unlink  
```  
select lo_unlink(指定large oid);   
```  
方法2、使用vacuumlo  
```  
vacuumlo -n -v postgres  
Connected to database "postgres"  
Test run: no large objects will be removed!  
Checking lo in public.t_lob  
Checking lo in public.t_lob1  
Would remove 0 large objects from database "postgres".  
```  
## 大对象权限  
1、当lo\_compat\_privileges设置为ON时, 任意用户创建的larobject都可以被其他用户访问, 不需要赋予任何权限.    
```  
postgres=> select *,lomowner::regrole from pg_largeobject_metadata;  
   oid   | lomowner |  lomacl  | lomowner   
---------+----------+----------+----------  
 1093397 |       10 |          | postgres  
 1093419 |       10 |          | postgres  
 1093420 |  1093417 | {a=rw/a} | a  
(3 rows)  
postgres=# \c postgres b  
You are now connected to database "postgres" as user "b".  
postgres=> show lo_compat_privileges;  
 lo_compat_privileges   
----------------------  
 on  
(1 row)  
postgres=>  select lo_open(1093420,393216);  
 lo_open   
---------  
       0  
(1 row)  
```  
2、当lo\_compat\_privileges设置为OFF时, 赋予了对应权限的大对象, 才能读写. 否则只有owner或超级用户能读写.  
```  
GRANT { { SELECT | UPDATE } [, ...] | ALL [ PRIVILEGES ] }  
    ON LARGE OBJECT loid [, ...]  
    TO role_specification [, ...] [ WITH GRANT OPTION ]  
```  
lo\_open will fail if SELECT privilege is not available for the large object, or if INV\_WRITE is specified and UPDATE privilege is not available.   
(Prior to PostgreSQL 11, these privilege checks were instead performed at the first actual read or write call using the descriptor.)   
These privilege checks can be disabled with the lo\_compat\_privileges run-time parameter.  
```  
postgres=# \c postgres b  
You are now connected to database "postgres" as user "b".  
postgres=> show lo_compat_privileges;  
 lo_compat_privileges   
----------------------  
 off  
(1 row)  
-- lo_compat_privileges=off, 当large obj无权限, 报错  
postgres=> select lo_open(1093420,393216);  
ERROR:  permission denied for large object 1093420  
-- 赋权  
postgres=> \c postgres a  
You are now connected to database "postgres" as user "a".  
postgres=> grant select , update on LARGE OBJECT 1093420 to b;  
GRANT  
-- 赋权后, 可以读写  
postgres=> \c postgres b  
You are now connected to database "postgres" as user "b".  
postgres=> select lo_open(1093420,393216);  
 lo_open   
---------  
       0  
(1 row)  
```  
## 附  
src/include/libpq/libpq-fs.h  
```  
/*  
 *      Read/write mode flags for inversion (large object) calls  
 */  
#define INV_WRITE               0x00020000  
#define INV_READ                0x00040000  
```  
```  
postgres=> select x'20000'::int;  
  int4    
--------  
 131072  
(1 row)  
postgres=> select x'40000'::int;  
  int4    
--------  
 262144  
(1 row)  
postgres=> select 131072+262144;  
 ?column?   
----------  
   393216  
(1 row)  
```  
## 其他例子  
```  
postgres=> begin;  
BEGIN  
postgres=>  select lo_create(0);  
 lo_create   
-----------  
    982275  
(1 row)  
postgres=> select lo_open(982275,393216);  
 lo_open   
---------  
       0  
(1 row)  
postgres=> select lo_truncate(0, 100000);  
 lo_truncate   
-------------  
           0  
(1 row)  
postgres=> end;  
COMMIT  
postgres=> begin;  
BEGIN  
postgres=> select lo_open(982275,393216);  
 lo_open   
---------  
       0  
(1 row)  
postgres=> select loread(0,100);  
------------------------------------------------  
 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0  
00\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000  
(1 row)  
db1=> begin;  
BEGIN  
db1=> select lo_create(0);  
 lo_create   
-----------  
    982277  
(1 row)  
db1=> select lo_open(982277,393216);  
 lo_open   
---------  
       0  
(1 row)  
If len is greater than the large object's current length, the large object is extended to the specified length with null bytes ('\0'). On success, lo_truncate returns zero.  
When dealing with large objects that might exceed 2GB in size, instead use  
int lo_truncate64(PGcon *conn, int fd, pg_int64 len);  
db1=> select lo_truncate64(0, 1000000000000);  
 lo_truncate64   
---------------  
             0  
(1 row)  
db1=> end;  
COMMIT  
db1=> \l+  
                                                                    List of databases  
   Name    |   Owner    | Encoding | Collate |   Ctype    |     Access privileges     |  Size   | Tablespace |                Description                   
-----------+------------+----------+---------+------------+---------------------------+---------+------------+--------------------------------------------  
 db1       | digoal     | UTF8     | C       | en_US.utf8 |                           | 15 MB   | pg_default |   
```  
The chunks stored for a large object do not have to be contiguous. For example, if an application opens a new large object, seeks to offset 1000000, and writes a few bytes there, this does not result in allocation of 1000000 bytes worth of storage; only of chunks covering the range of data bytes actually written. A read operation will, however, read out zeroes for any unallocated locations preceding the last existing chunk. This corresponds to the common behavior of “sparsely allocated” files in Unix file systems.  
## 参考  
https://www.postgresql.org/docs/current/lo.html  
https://www.postgresql.org/docs/current/largeobjects.html  
[《[转] 关于入侵PostgreSQL的那些事儿（文件读取写入、命令执行的办法）  -大对象》](../201802/20180201_03.md)    
[《大对象 - 数据库common安全自动渗透测试与防范 - sqlmap》](../201702/20170213_01.md)    
[《大对象攻击 - Hacking PostgreSQL》](../201610/20161018_02.md)    
[《PostgreSQL large row|column performance tuning case》](../201301/20130109_01.md)    
[《PostgreSQL psql的元素周期表 - 包括大对象操作》](../201906/20190607_04.md)  
[《在java中正确使用PostgreSQL大对象和字节流(bytea)类型的姿势》](../201606/20160614_01.md)  
[《PostgreSQL 大对象或bytea存取pdf,jpg等文件 - PostgreSQL export regular file like pdf, word, text, doc stored in bytea type》](../201306/20130626_01.md)  
[《大对象 - PostgreSQL 9.3 Add API for 64-bit large object access》](../201305/20130510_02.md)  
[《大对象 - Use PostgreSQL server program import binary data into database bytea type》](../201303/20130306_01.md)  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")