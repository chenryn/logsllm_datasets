### Comparative Evaluation with Ground Truth Dataset

The following table (Table 3) compares the performance of different unpacking tools against a ground truth dataset. The evasion types considered are:
1. Anti-Debugging
2. Anti-VM (Virtual Machine & System Emulator)
3. Anti-DBI (Dynamic Binary Instrumentation)
4. Anti-Hooking

The last two columns represent the performance of CoDisasm, PinDemonium, Arancino, and BinUnpack, respectively.

| Evasion Type | Sample 1 | Sample 2 | Sample 3 | Performance (s) |
|--------------|-----------|-----------|-----------|------------------|
| T            | 71, 101, 0.25 | 68, 91, 0.23 | 83, 126, 0.15 | -                |
| E            | 24, 38, 0.15 | -         | -         | -                |
| T            | 79, 94, 0.15 | 141, 181, 0.13 | T, T, T, 0.25 | -                |
| T            | T, E, E, 0.75 | T, E, E, 0.85 | -         | -                |

### VirusTotal Results and Performance

The packed samples were evaluated using VirusTotal, and the performance (in seconds) of each unpacking tool is shown below:

| Packed   | Performance (s) (CoDisasm, PinDemonium, Arancino, BinUnpack) |
|----------|---------------------------------------------------------------|
| 575      | code is revealed during any given unpacking time window. Our countermeasure is to dump a continuous series of process memory and later reassemble them as a single consistent code image. We enable Themida’s “Encode Macro” option to protect major functions of hupigon.eyf. This means we can only restore one function’s binary code each time. As shown in the last row, BinUnpack is able to extract the original code successfully and greatly increase malware detection rate. However, in practice, such partial code revealing packer is rare because of no source code available, the unreliability, and high runtime overhead [7]. |

### Performance Comparison

We compare BinUnpack's performance with three other generic unpacking tools: CoDisasm [9], PinDemonium [55], and Arancino [76]. All these tools rely on Pin [52] to monitor "written-then-executed" instructions or memory pages. 

- **CoDisasm**: Focuses on binary disassembly.
- **PinDemonium**: Defeats anti-instrumentation evasions.
- **Arancino**: An extension of PinDemonium, capable of defeating anti-DBI-equipped packers.

**Advantages of BinUnpack:**
- Avoids tracing "written-then-executed" layers.
- Resilient to anti-analysis tricks.

In our evaluation, the threshold for runtime execution was set to 1,800 seconds. If an unpacking tool exceeds this threshold, it is marked as "Timeout". If the tool raises exceptions and exits, it is marked as "Exception".

| Tool          | Average Performance (s) | Success Rate |
|---------------|-------------------------|--------------|
| BinUnpack     | 0.20 (0.09 - 0.85)       | 100%         |
| CoDisasm      | -                       | -            |
| PinDemonium   | -                       | -            |
| Arancino      | -                       | -            |

BinUnpack succeeds in all cases, with running times ranging from 0.09 to 0.85 seconds. Other tools fail in many cases, either due to "Timeout" or "Exception".

### Additional Tools and Overhead

For other representative generic unpacking tools, the overhead mentioned in their papers is reported:

- **PolyUnpack [83]**: ~150 seconds on average.
- **OmniUnpack [56]**: 5.3 seconds on 12 packers.
- **Renovo [36]**: At least 8X runtime slowdown on 15 packers.
- **Eureka [86]**: Can unpack more than 90 binaries per hour.

### Top Wanted Malware, Packed Benign Programs, and NSIS Packer

We also evaluate top wanted malware, packed web browsers, and custom packers adopted by ransomware. The top wanted malware samples are from Check Point’s top10 list from May 2017 to March 2018. The results are summarized in Table 4.

| Sample           | #Packers | VirusTotal (Avg.) | #Success | Performance (Avg.) (s) |
|------------------|----------|-------------------|----------|------------------------|
| Top wanted       | -        | -                 | -        | -                      |
| Locky            | 101, 488, 512, 0.21 | 15 | T, E, E, 0.23 | 38 |
| Conficker        | 105, 532, 568, 0.28 | 25 | T, E, E, 0.22 | 47 |
| Zeus             | 92, 410, 451, 0.24 | 18 | T, T, T, 0.19 | 40 |
| Andromeda        | 90, 380, 446, 0.21 | 11 | T, T, T, 0.21 | 35 |
| Necurs           | 76, 364, 395, 0.17 | 13 | E, E, E, 0.25 | 37 |
| GlobeImposter    | 93, 415, 450, 0.20 | 24 | - | 48 |
| Pykspa           | 93, 423, 467, 0.21 | 19 | - | 42 |
| Hancitor         | 79, 358, 394, 0.18 | 22 | - | 46 |
| Nivdort          | 92, 405, 462, 0.20 | 11 | - | 30 |
| WannaCry         | 120, 523, 576, 0.26 | 30 | - | 56 |
| Kelihos          | 91, 401, 452, 0.22 | 12 | - | 32 |
| Jaff             | 92, 422, 473, 0.20 | 19 | - | 43 |
| Cryptowall       | 114, 434, 482, 0.25 | 22 | - | 44 |
| Sality           | 95, 461, 514, 0.21 | 19 | - | 43 |
| Fareit           | 94, 412, 452, 0.20 | 17 | - | 46 |
| Packed browsers  | -        | -                 | -        | -                      |
| IE               | 5, 18, 21, 32 | 3 | E, T, T, 0.29 | 32 |
| Firefox          | 6, 19, 23, 35 | 3 | E, T, T, 0.31 | 35 |
| Chrome           | 7, 21, 24, 36 | 3 | E, E, T, 0.33 | 36 |
| Custom packers   | -        | -                 | -        | -                      |
| CryptoLocker     | 3, 11, 13, 35 | 0 | - | - |
| CTB-Locker       | 3, 10, 13, 45 | 0 | - | - |
| Teerac           | 3, 11, 15, 37 | 0 | - | - |
| Crysis           | 3, 11, 14, 31 | 0 | - | - |
| Cerber           | 3, 10, 13, 33 | 0 | - | - |

### Impact on Benign Program Execution

We also study the overhead introduced by BinUnpack when working with benign programs (no-packer version). The execution time of benign programs with BinUnpack disabled and enabled is compared.

- **Test Set**: Common Windows applications (e.g., tasklist, winrar, WinPcap) and prevalent web browsers (e.g., IE, Firefox, Chrome).
- **Evaluation Method**: For browsers, we cache the top 10 benchmark sites ranked by Alexa. We insert the JavaScript `getTime()` routine at the start and end of the page to compute the load time.

The additional overhead caused by BinUnpack mainly comes from IAT comparison. If the result of IAT comparison is true, BinUnpack will not perform OEP search and process dump. The relative slowdown ranges from 0.01% to 1.48%, with the worst case being Chrome, which heavily uses API calls.

### Conclusion

BinUnpack outperforms other generic unpacking tools in terms of speed and success rate. It is particularly effective in handling complex and sophisticated packers, including those used by top wanted malware and custom packers in ransomware. The overhead introduced by BinUnpack on benign programs is minimal, making it a robust and efficient solution for unpacking and analyzing packed executables.