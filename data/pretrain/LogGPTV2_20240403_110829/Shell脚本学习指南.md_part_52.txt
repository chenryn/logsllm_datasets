表10-1：find的常见权限设置
选项
意义
200-w1ad-
寻找（所有者与组外的）其他人可写入的文件。
-perm -444
寻找任何人都可读取的文件。
-perm -444
寻找任何人都无法读取的文件。
-perm 444
寻找权限为r--r--r--的文件。
-perm +007
寻找其他人可访问的文件。
-perm +007
寻找其他人无法访问的文件。
-size选项必须接上一个数字参数。默认值是以512字节为单位的大小，不过很多find
实例，允许在数字之后加上c表示字符（字节），或k表示kilobyte（KB）。如果数字未
带有正负号，则指的是必须确实匹配于该文件大小。如果为负，则只有小于该数字（绝
www.TopSage.com
---
## Page 311
文件处理
299
对值）的文件大小是匹配的。否则，带有正号，则只有大于该容量的文件才匹配。所以，
find$HOME/.-size+1024k会在你登录目录树下的所有文件中，寻找是否有大于
1MB的，而find，-size0则是寻找当前目录下的所有文件中是空的。
-tyPe选项必须接上一个单词母参数，以标明文件类型。较重要的几个为d的目录、
的一般文件，以及1的符号连接。
-follow选项要求find接上符号连接，你可以用此来找出断掉的连接：
S 1s
显示我们有一个空目录下
5 1n -8 one tvo
为不存在的文件建立软性（符号性）连接
two: broken symbolic link to one
S file tvo
诊断此文件
S find .
寻找所有文件
./tvo
S find . -type 1
只我软性连接
•/to
1
find: cannot fo1low symbolic. link /two: No such file or, directory
S tind.-type 1-fo11ow
寻找软连接，井试图跟随它们
-links选项要求接上个整数。如未指定正负号，它会只选择具有指定数量的直接连
接的文件：如果为贫号，则只寻找连接数小十该数字（绝对值）的文件：如来为正号，
则仅选择连接数大于该数的文件。因此，如果你要寻找具有直接链接的文件，通常是这
样：find.-1inks +1.
-atime（访问时间）、-ctime（inode变更时间）与-mtime（修改时间）选项必须接
上一个以天为单位的整数，未指定正负号，即指确实的几天前：如果为负，则指少于该
天数（绝对值），为正，则为大于该天数。一般惯用法为find.-mtime-7可寻找一
周前修改过的文件。
管告：可借的是，fi=d不允许数目是部分（分数）的，或是单位字尾的：我们常会需要以年、月、
周、时、分或秒为这些选项的单位。GNUfind提供的-amin、-cmin，与-mmin，可
以分钟为单位，但是在原始时间最选择选项上的单位字尾应该是要更一般化的。
有个相关的选项-newerfilename，可以仅选择比指定文件更接近最近时间修改过的
文件。如果你要的单位比这个时间还精细，可以建立一个空文件touch-tdate_time
www.TopSage.com
---
## Page 312
300
第10章
timestampfile，然后以此文件搭配使用-newer选项，如果你要找的是比该文件更旧
的文件，使用否定选项即可：！-newertimestampfile。
find命令的选择器选项也可合并使用：也就是所有的匹配都匹配，才采取操作。你也
可以另外配置-a（AND）选项，而-O（OR）选项也可用于标明在其左右两边的匹配中
至少有一组匹配的情况。下面便是应用这些布尔运算符的两个例子，：
S find . -aize +0 -a -8ize -10
寻找文件大小块小于10（5120半节）：的非空文件
+ + 
S find .aize 0 -o -atime +365
寻找空文件，或过去一年都未读取过的文件
-a与-o运算符，配上组选项\（与\），可用以建立更复杂的布尔选择器，你应该很少
需要用到，而当你使用时，会发现它们已复杂到：一且它们需要被调试时，你得在脚本
中隐藏它们，然后在调试完后再使用该脚本。
10.4.3.2find的简易版脚本
到目前为止，我们已使用find产生匹配特定选择需求的文件列表，还可以设法将它们
送进一个简单的管道，现在，让我们来看看更复杂一点的例子。在3.2.7.1节里，我们介
绍过简单的sed脚本，可将HTML转换为XHTML：
$ cat $80M8/html2xhtml.8ed
显示将HTML转换为XHTNL的sG命令
s///g
8///g,
8111g
s11:g
B1s
6111s
s:1 g
这样的脚本可以将HTML转换为XHTML（HTML的标准化以XML为主的版本）的绝
大部分工作自动化。将sed结合find，辅以简单的循环可以让工作减少为只有下面几
行代码：
cd top level web site directory
vhile read file
寻我所有HTML文件
将文件名读进安量里
do
echo sfi1e
打印处理进度
mv $file $file,save
sed -f sHOME/html2xhtml.sed  $f11e
存储备份副本
开始安更
done
www.TopSage.com
---
## Page 313
文件处理
10.4.3.3find的复杂版脚本
or
Sage.com
本节，我们将更纯熟地应用find，开发一个真正实用的范例（注8）。这个Shell脚本叫
作filesdirectories，它是针对具有大型根目录树状结构的部分本地用户，在夜间通
过crontab系统（见13.6.4节），整理之前修改过的文件，以天数划分成组，建立文件
与目录的多个列表。这样微有助于提醒他们近期微过的事，且提供的是一个更快的方式，
也就是他们只需要查找单一的列表文件，就能在他们的目录结构下找到特定文件，而不
必确实地寻找整个文件系统本身。
filesdirectories必须使用GNU的find以便使用-fprint选项，该选项允许在一
次通过整个目录树下建立多个输出文件，这样的脚本可以较原始UNIXfind的多重调
用版本，高出10倍速（renfoldspeedup）。
这段脚本将由一般安全性功能开始：在#1行内标明-选项，见2.4节：
#1 /bin/sh -
设置IFS变量为换行符号（空格）制表字符（newline-space-tab）：
IFS='
并设置PATH变量，以确保先找GNU的Find：
PATH=/usr/1ocal/bin:/bin:/usr/bin需要GMU find的 -fprint 选项
export PATH
接着，确认参数是否为预期的单一参数，否则，显示简短的错误信息到标准错误输出，
并以非零状态值离开：
if [ $# -ne 1 )
then
echo *Usage: $0 directory* >&2
fi
exit 1
作为最后一项安金性功能，这段脚本引用umask限制仅输出文件的所有者可以访间：
umask 077
确保文件私密性
filesdirectories允许THPDIR环境变量覆盖默认的临时性文件目录：
TMP=$ (TKPDIR:- /tmp)
允许另一个临时性目录
下一步是将THPFILES初始化为一长串收集输出的临时性文件列表：
注8：
感谢University，of Utah 的Pieter J. Bowman 贡缺,
www.TopSage.com
---
## Page 314
302
第10章
TMPPILBS=*
$TMP/DIR&CTORIES,a11,$$ STMP/DIRECTORI8S,al1.$$.tmp
$TMP/DIR&CTORIES.1aSt01.SS STMP/DIRECTORIES.1ast01.SS.tmp
$TKP/DIRBCTORIRS.1ast02.$S $TMP/DIRECTORIES.1a8t02.SS.cnp
$TMP/DIRECTORIBS.1ast07.SS $TMP/DIRECPORIES.1ast07,SS.tmp
$TMP/DIRBCTORIBS.1aet14.$$ $TMP/DIRECTORIES.1ast14.$S.tmp
$TMP/PIL&S .a11.$$ $TMP/PILBS-a11 $S .tmp
$TMP/DIRSCTORIES.1aSt31.SS $TMP/DIR&CTORIES.1a8t31,$$.tmp
$7MP/PIL8S.1ast01.$$ $MP/FILEs.1ast01.$S.tnp
$TMP/PIL&S . 1ast02.$$ $TMP/PILES.1a8t02.$$ .tmp
$TMP/PIL&S . 1ast07.$$ $7MP/FILES.1ast07.$$ . tnp
$TXP/PIL8S.1agt14.$$ $7XP/PILBS.1ast14.$S.tmp
$TMP/PIL8S.1aet31.$$ $2MP/FILBS.last31.$$.tmp
这些输出文件包括了整个树状结构下（*.a11，*）的目录与文件之名称，以及在前一天
（*.last01.*）、前两天（*.last02.·）等那些修改过的名称。
WD变量存健参数目录名称，供精后使用，然后脚本会变更到该目录：
KD=$1
cd SwD II exit 1
在执行find之前变更工作中目录，可解决两个问题：
如果参数非目录，或是但乏必需的权限，那么cd命令会失败，脚本会立即以非
零离开值而终止。
如果参数为符号连接，则cd会按照这个连接找到真正的位置。find如果未给定
额外选项，是不会跟随符号连接的，但是没有方法可以告诉它只为顶层目录这么
微。实际上，我们不要filesdirectories按照目录树里的连接，尽管增加一个
选项以如此做并不难，
trap命令确保临时性文件会在胸本终止时被删除：
trap 'exit 1'
HUP INT PIPE QUIT TERK
 . 
离开状态值会在跨过EXIT捕捉之后仍被保留，见13.3.2。
接下来的部分就是最精彩，也是最困难的工作了，多行find命令。使用-name选项的
行，会匹配来自前次执行的输出文件名称，而-true选项会忽略这些操作，以免这些信
总奔乱输出报告：
find . \
name DIRECrORIEs.al1 -true \
-0 -name FI1&s,al1 -true \
-0 -name FI1&s.1ast[0-9] [09]• -true \
www.TopSage.com
---
## Page 315
文件处理
303
下一行会匹配所有的一般文件，并利用-fprint选项，将它们的名称写到sTMP/
FILES.a11.$$:
-0 -type {
-fprint $TMP/PILES.a11.$$ 
接下来的5行，分别选定31、14、7、2以及1天前修改过的文件（-typef选择器仍
有效），再以-fprint选项将它们的名称写到指定的临时性文件：
-a
-8
-
-mtime -14 -fprint $TMP/7ILRs.1ast14.$s\
=8
=a
mtine -1 -fprint $TMP/FILBs.1ast01.$$ \
测试操作是由最旧到最新依次完成，因为每一组文件，都是前一组的子集合，在每一参
骤逐步减少处理量。因此10天前的文件会通过前两个-mtime湖试，但是会使得接下
来的三个失败，所以，它只会被包括在FILES.last31.S$与FILES.last14.SS文件里。
下一行乃匹配目录，并使用-fprint选项将它们的名称写到$TMP/DIRECTORIES.al1.
'$S
-0 -type d
-fprint $TMP/DIRBCTORIES,a11.$$ \
写到输出文件：
-8
-mtime -31 -fprint $TMP/DIRBCrORIEs,1ast31,$$ \
-a
-a
-a
mtime -1 -fprint $TMP/DIRBCTORIES.1ast01.$$ \
当find命令结束时，它的初步报告可在临时性文件中获得，只不过还没存储。然后脚
本会循环处理这些报告文件，最后结束工作：
for 1 in FILBS,a11 PILES.last31 FILEs.last14 FILBs.last07 \
FILES.1astO2 FILES.1astO1 DIRECTORIES.a11 \
DIRBCTORIES.1ast31 DIRBCTORIES.1ast14 \
do
DTRBCTORIES. 1ast07 DIRBCTORIES.1ast02 DIR8CTORIBS.1ast01
sed会将每个报告行前置的./替换为用户指定的目录名称，所以输出文件会包含完
整-而非相对的路径：
1$S*1$/eKS,=GN$=$[*1=。-,=/@M$=/[·]=s,-pos
sort将sed的结果进行排序，传人临时性文件，并将文件命名为：输人文件名加上.tmp
结尾：
www.TopSage.com
---
## Page 316
304
第10章
IC_ALL=C sort > sTMP/$i.SS.tmp
.com
将LC_ALL设为C可产生传统UNIX排序顺序，也就是我们长期以来惯于使用的，这么
做可避免设置为较现代的locale时可能造成的混淆与非预期情况。因为我们的系统各有
不同的默认locale，所以使用传统顺序，在我们互异的环境下，特别有帮助。
cmp命令为默认检查报告文件是否不同于前次执行的报告文件，如果不同，则换掉旧的：
cmp -s $TMP/$i.$$.tmp $i 11 mv $mMP/$i.$S.tmp Si
否则，留下临时性文件，由trap处理器进行清除操作。
即本的最后一个语句，会完成处理报告文件的循环：
done
执行期间，脚本通过之前设置的EXIT捕提而终止。
完整的filesdirectories脚本见例10-1，其架构清晰，足以让你轻松地略作修改，即
可产生其他报告文件，例如15分钟前、半年前或一年前修改过的文件和目录。改变
-mtime值的正负号，即可取得最近没有修改过的文件的报告，这对于找出过时的文件