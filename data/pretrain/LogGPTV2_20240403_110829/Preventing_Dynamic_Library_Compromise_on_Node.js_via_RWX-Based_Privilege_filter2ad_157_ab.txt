toString method). A W permission on the base pointer allows
discarding the entire object. While a base write may look like it
bypasses all permissions, modules holding pointers to fields of the
original value will not see any changes.
Example: To illustrate the base permission model on the de-
serialization example (§2), consider main’s permissions:
1 main :
2
require : RX
require (" serial " ): I
require (" serial " ). dec : RX
3
4
The set of permissions for serial is:
Session 6B: Web Vulnerabilities CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea18241 serial :
2
eval : RX
require : RX
module : R
module . exports : W
require (" log " ): I
require (" log " ). levels : R
require (" log " ). levels . WARN : R
require (" log " ). info : RX
require (" log " ). LVL : W
3
4
5
6
7
8
9
10
Importing: A simple X permission to the built-in require function
gives libraries too much power. Thus, Mir needs to allow specifying
which imports are permitted from a library.
This is achieved through an additional I permission. This permis-
sion is provided to an AccessPath that explicitly specifies the abso-
lute file-system path of a library.3 Using the absolute file-system
path is a conscious decision: the same library name imported from
different locations of a program may resolve to different libraries
residing in different parts of the file system and possibly corre-
sponding to different versions.
Using a separate permission I provides additional flexibility
by distinguishing from R. Libraries are sometimes imported by a
program only for their side-effects (i.e., not for their interface). In
these cases, their fields should not necessarily be accessible by client
code. Typical examples include singleton configuration objects and
stateful servers.
Wildcards: Mir’s model offers wildcards to allow for all possible
matches of a segment within a path to have a single permission
mode. Wildcards match any string and are semantically similar
to shell expansion (i.e., the * in cat *.txt). The form *.f assigns
a mode to all fields named f reachable from any object, and o.*
assigns a mode to all fields of an object (or path) o. These forms
may also be combined, as in o.*.f.
Wildcards have many practical uses. The primary use case is
when fields or objects are altered through runtime meta-programming.
In such cases, the fields are not necessarily accessible from a sin-
gle static name and might depend on dynamic information. Often,
these fields (not just the paths) are constructed at runtime, i.e., they
are not available for introspection by Mir at library-load time.
Transitive & higher-order permissions: The default-deny se-
mantics of Mir’s permission model involves some nuanced charac-
teristics. First, the absence of any permission to a function translates
to absence of all permissions to all the functions (or, more generally
access paths) that the first function points to. Conversely, holding
a permission to a function or a library does not translate to holding
permissions to all of its access paths—but only the paths to which
that function or library has access to. By providing the ability to
specify multiple layers of permission sets, Mir minimizes transitive
permission leakage across multiple library levels.
The RWX model is first-order, in that it applies directly to access
paths like fs.read and lg.LVL. It does not apply to arguments of
functions, such as the names req and res found in function srv,
nor to module-internal functions, such as route.
3For portability, Mir prefixes records with a __PWD_PREFIX__ variable that can be
instantiated to different values across environments.
However, if a value provided to a function is itself an access path
then its permissions are governed by the caller context. For example,
if the path fs.read was provided as an argument to lg.info, then
read’s permissions would be governed by the context providing it.
More generally, a higher-order value passed to a module, such as a
closure or an object, is governed by the permissions in the lexical
scope of the module that created that value: if a module creating a
closure f has no permission to access fs, then f will not be able to
invoke fs in any context.
These transitivity and first-order properties are also related to
permissions over an object’s prototype chain. Mir’s model—and
associated analysis and enforcement components—is oblivious to
where a property resolves in the prototype chain. For example, the
invocation of a toString method on the return value of a different
library is governed by the permissions of that library (or the library
that created that value) to toString name.
5 PERMISSION INFERENCE
To aid users in expressing permissions, Mir automatically infers
permissions that describe how a library uses its dependencies and
built-in APIs. These permissions are inferred by an analysis that
identifies and resolves accesses of functions and properties provided
by third-party libraries. To be practical and to effectively reduce
the risk of dynamic compromise, the analysis must fulfill three
requirements. First, the analysis should work for arbitrary libraries,
without assuming anything apart from access to the library’s source
code. In particular, the analysis should not rely on the existence
of test suites or client code that uses the library. Second, the in-
ferred permissions should be conservative, in the sense that the
analysis should infer a permission only if there is evidence that the
library indeed needs that permission. Third, the analysis should be
efficient and scale well to complex libraries, as we want to apply
it to real-world libraries. We are not aware of such an analysis in
the literature; hence this section describes a permission analysis
designed to fit these requirements.
With the first requirement in mind, the core of our permission
inference is a static analysis of the library code (§5.1), augmented
with a lightweight dynamic analysis that loads the library but does
not rely on any client code (§5.2). Given the difficulties of stati-
cally analyzing JavaScript [8, 24], our static analysis aims neither at
soundness nor completeness. Instead, it takes a pragmatic approach
designed to work well for programming patterns common in real-
world libraries, but not every conceivable corner-case. With the
second requirement in mind, the static analysis grants a permission
only if the analysis sees a possibly feasible path that uses the per-
mission. Finally, with the third requirement in mind, the core of the
static analysis is intra-procedural, i.e., it reasons about a function
without analyzing all other functions called by it. While in principle,
these decisions could lead to missing permissions, the evaluation
shows this rarely to happen for real-world libraries. Moreover, if
indeed a permission is missing, Mir will produce a runtime error
that a user can address by refining the permissions.
5.1 Static Analysis of Required Permissions
The core of the analysis is an intra-procedural, flow-sensitive, for-
ward data flow analysis. The analysis visits each statement of a
Session 6B: Web Vulnerabilities CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1825Tab. 2: Mir’s analysis updates. Updates performed by the static analysis when visiting specific kinds of statements.
Kind of statement
Assignment lhs = rhs at location l:
For each a ∈ getAPIs(lhs)
For each a ∈ getAPIs(rhs)
Call of function f :
For each a ∈ getAPIs(f )
For each a ∈ getAPIs(r)
Any other statement that contains a reference r:
Updates
Example
Add (a, W) to permission set C
Add (a, R) to permission set C
Add lhs at l (cid:55)→ a to DefToAPI
Add (a, X) to permission set C
Add (a, R) to permission set C
someModule.foo = 5
x = require("someModule")
someModule.foo()
foo(someModule.bar)
module by traversing a control flow graph of each function. During
these visits, it updates two data structures. First, it updates the set
C of (API, permission) pairs that eventually will be reported as the
inferred permission set. The set C grows monotonically during the
entire analysis, and the analysis adds permissions until reaching a
fixed point. Second, the analysis updates a map DefToAPI , which
maps definitions of variables and properties to the fully qualified
API that the variable or property points to after the definition. For
example, when visiting a definition x = require("foo").bar, the
analysis updates DefToAPI by mapping the definition of x to
“foo.bar”. The DefToAPI map is a helper data structure discarded
when the analysis completes analyzing a function.
Transfer Functions: Table 2 summarizes how the transfer func-
tions of the analysis update C and DefToAPI when visiting specific
kinds of statements. The updates to C reflect the way that the ana-
lyzed module uses library-external names. Specifically, whenever a
module reads, writes, or executes an API a, then the analysis adds
to C a permission (a, R), (a, W), or (a, X), respectively. The updates to
DefToAPI propagate the information about which APIs a variable
or property points to. For example, suppose that the analysis knows
that variable a points to a module “foo” just before a statement
b = a.bar; then it will update DefToAPI with the fact that the
definition of b now points to “foo.bar”.
While traversing the control flow graph, the analysis performs
the updates in Table 2 for every statement. On control flow branches,
it propagates the current state along both branches. When the
control flow merges again, then the analysis computes the union of
the C sets and the union of the DefToAPI maps of both incoming
branches. Mir handles loops by unrolling each loop once, which is
sufficient in practice for analyzing uses of third-party code, because
loops typically do not re-assign references to third-party APIs.
Resolving Accesses to APIs: The transfer functions in Table 2 rely
on a helper function getAPIs. Given a reference, e.g., a variable or
property access, this function returns the set of fully qualified APIs
that the reference may point to. For example, after the statement
obj.x = require("foo").bar, getAPIs(obj.x) will return the set
{“f oo.bar′′}. When queried with a variable that does not point
to any API, getAPIs simply returns the empty set. Algorithm 1
presents the getAPIs function in more detail. We distinguish four
cases, based on the kind of reference given to the function. Given
a direct import of a module, getAPIs simply returns the name of
the module. Given a variable, the function queries pre-computed
reaching-definitions information (see below) to obtain possible def-
initions of the variable, and then looks up the APIs these variables
Data: Reference r
Result: Set of APIs that r may point to
if r is an import of module “m” then
end
if r is a variable then
return { “m” }
A ← ∅
defs ← get reaching definitions of r
for each d in defs do
end
return A
A ← A ∪ DefToAPI(d)
end
if r is a property access base .prop then
Abase ← getAPIs(base)
return {a + “.” + prop | a ∈ Abase }
end
return ∅
Algorithm 1: Helper function getAPIs.
point to in DefToAPI . Given a property access, e.g., x.y, the func-
tion recursively calls itself with the reference to the base object,
e.g., x, and then concatenates the returned APIs with the property
name, e.g., “y”. Finally, for any other kind of reference, getAPIs
returns an empty set. The latter includes cases that we cannot han-
dle with an intra-procedural analysis, e.g., return values of function
calls. In practice, these cases are negligible, because real-world code
rarely passes around references to third-party APIs via function
calls. We therefore have chosen an intra-procedural analysis, which
ensures that the static permission set inference scales well to large
code-bases.
To find the APIs a variable may point to, Algorithm 1 gets the
reaching definitions of the variable. This part of the analysis builds
upon a standard intra-procedural may-reach definitions analysis,
which Mir pre-computes for all functions in the module. To handle
nested scopes, e.g., due to nested function definitions, Mir builds a
stack of definition-use maps, where each scope has an associated
set of definition-use pairs. To find the reaching definitions of a
variable, the analysis first queries the inner-most scope, and then
queries the surrounding scopes until the reaching definitions are
found. To handle built-in APIs of JavaScript, e.g., console.log, Mir
creates an artificial outer-most scope that contains the built-in APIs
available in the global scope.
Returning to the running example in Figure 2. For main, the
static analysis results in the following permission set:
′′
, R),(“serial .dec
, R),(“serial .dec
{(“serial
′′
′′
, X)}
Session 6B: Web Vulnerabilities CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1826As illustrated by the example, the inferred permission set allows
the intended behavior of the module, but prevents any other, un-
intended uses of third-party APIs. Our evaluation shows that the
static analysis is effective also for larger, real-world modules (§8.4).
Limitations:
In line with Mir’s design goal of being conservative
in granting permissions, the analysis infers a permission only if
there exists a path that uses the permission. In contrast, the analysis
may miss permissions that a module requires. For example, missed
permissions may results from code that passed a reference to a
module across functions:
1 x = require (" foo " );
2 bar (x );
In this example, the analysis misses any permissions on “foo” that
bar relies on. Tracking object references across function bound-
aries would require an inter-procedural analysis, which is difficult
to scale to a module and its potentially large number of transitive
dependencies [83]. Another example of potentially missed permis-
sions is code that dynamically computes property names:
1 x = require (" foo " );
2 p = " ba " + "r";
3 x[p] = ...;
In this example, the analysis misses the W permission for “foo.bar”.
Tracking such dynamically computed property names is known to
be a hard problem in static analysis of JavaScript [66].
5.2 Dynamic, Import-time Permission Analysis
To augment the number of permissions inferred by static analysis,
Mir adds a short phase of dynamic import-time analysis. This
dynamic analysis is performed by simply importing the analyzed
library, i.e., without invoking its APIs, and records all accesses to
third-party libraries until the analyzed library is fully loaded. The
underlying insight is that many libraries wrap or re-export existing
APIs using dynamic meta-programming, which is not captured
by plain static analysis. The import-time analysis thus collects
additional permissions, which are added to the ones inferred by the
static analysis. The following code snippet demonstrates a simple
but common pattern:
1 for ( let k in require (" fs " )) {
2
3 }
module . exports [k] = fs [k ];
Inferring statically such meta-programming permissions poses a
challenge due to the aforementioned limitations, and thus simply
loading the library enables a more complete view into the library’s
behavior. We evaluate the improvement of import-time analysis on
permission inference (§8.3). Note that import-time analysis does
not depend on the existence of library tests or any consuming code,
as it does not call any library interfaces.
6 QUANTIFYING PRIVILEGE REDUCTION
Any policy—whether created automatically or manually—on exist-
ing programs aims at striking a balance between compatibility and
security: an ideal policy would allow only the necessary accesses
but no more. Unfortunately, statically inferring such an ideal policy
in the context of any language is known to be undecidable. How-
ever, some analyses are better than others, i.e., they infer policies
with fewer accesses, even if they do not infer the ideal policy. To
be able to quantitatively evaluate the security benefits offered by
such analyses, we propose a novel privilege reduction metric.
Privilege Reduction:
Informally, the single-library privilege re-
duction is calculated as the ratio of disallowed permissions over
the full set of permissions available by default within the lexical
scope of the library. The default permission set is calculated by
statically expanding all names available in scope; the disallowed set
of permissions is calculated by subtracting the allowed permissions
from the default permission set. Single-library privilege reductions
across the full dependency tree are then combined into a single
reduction metric for a program and its dependencies. The following
paragraphs explain the details.
Informal Development: Before formalizing privilege reduction,
we use the de-serialization example (Fig. 2) to build an intuition.
We first need to identify two sets of objects: (i) the subject mod-
ules Ms, whose privilege we are interested in quantifying; and (ii)
the target critical resources Mt that can be potentially accessed
by the subject modules. Let’s assume that from the two modules
presented in Fig. 2, we are only interested in quantifying main’s
privilege; thus, Ms = {main}. As implied earlier (§4), the set of
critical resources contains many paths available to main. For sim-
plicity, we now assume it only contains globals, fs, and require;
thus, Mt = {globals, fs, require}. Module main needs an X per-
mission on require to be able to load serial, and an X permission
on serial.dec to be able to call the dec function. With this simple
configuration, Mir disallows all accesses except for P(Ms , Mt) =
{⟨require, X⟩, ⟨serial.dec, X⟩}.
Mir’s goal is to quantify this privilege with respect to the permis-
sions available to a library by default. If main was executed with-
out additional protection, its privilege would be Pbase(Ms , Mt) =
{⟨globals.*, RW X⟩, ⟨fs.read, RW X⟩, ...}.
Formal Development: More formally, by default at runtime any
module has complete privilege on all exports of any other module.
Thus, for any modules m1, m2 the baseline privilege that m1 has
on m2 is:
Pbase(m1, m2) = {⟨a, µ⟩|a ∈ APIm2, µ ∈ Mode}
where µ ∈ Mode is a set of orthogonal permissions on a resource,
which for Mir is P = {R,W , X}. Name a can be any field that lies
arbitrarily deeply within the values exported by another module.
Mir reduces privilege by disallowing all but the white-listed
permissions at module boundaries:
PS(m1, m2) = {⟨a, µ⟩|a ∈ APIm2, S gives m1 µ on a}
To calculate the privilege reduction across a program that contains
several different modules, we lift the privilege definition to a set of
subject and target modules:
P(Ms , Mt) = 
m1∈Ms
m2∈Mt
P(m1, m2)
Session 6B: Web Vulnerabilities CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1827Fig. 4: Mir’s runtime enforcement transformations. Mir’s basic wrapping traverses objects and wraps fields with inline monitors (a, line 4). A
new modified context is created by wrapping all values available in a module’s original context (b). The modified context is bound to the module
by enclosing the module source (c, half-visible code fragment) in a function that redefines all non-local variable names as function-local ones
(c), pointing to values from the modified context (Cf.§7).
We can now define privilege reduction, a metric of the permissions
restricted by a privilege-reducing system S such as Mir:
PR(Ms , Mt) =
|Pbase(Ms , Mt)|
|PS(Ms , Mt)|
A higher reduction factor implies a smaller attack surface since the
subjects are given privilege to a smaller portion of the available
resources. Pbase is an under-approximation of base privileges, as
a source module can, in principle, import and use any other mod-
ule that is installed in the execution environment. Consequently,
the measured privilege reduction is actually a lower bound of the
privilege reduction that Mir achieves in practice.
Transitive Permissions: Fig. 2’s main is not allowed to directly
call eval; however, it can call eval indirectly by executing se-
rial.dec. Accurately quantifying such transitive privilege requires
tracking transitive calls across such boundaries, which requires
heavyweight information flow analysis. Mir’s privilege reduction
quantification does not attempt such an analysis to keep runtime
overheads low. As a result, Mir’s estimate is necessarily conser-
vative, i.e., Mir reports a lower number than the one achieved in
practice.
7 RUNTIME PERMISSION ENFORCEMENT
During program execution, Mir’s runtime component enforces the
chosen permissions—automatically inferred, developer-provided,
or a combination thereof. Mir’s load-time code transformations
operate on the string representation of each module as well as the
context to which it is about to be bound. The context is a mapping
from all free variables in the scope of the library to the values
they point to, and the transformations insert enforcement-specific
wrappers into the module before it is loaded.
Mir’s enforcement component conceptually builds on previous
work [5, 20, 29, 73, 77], employing program transformations to tra-
verse and wrap selected values with interposition proxies. However,
it differs in a few key points because of two characteristics related
to the goals of Mir. The first characteristic is the first-order nature
of Mir’s permission model: Mir checks an X permission for every
srl.dec in Fig. 2.1’s main, but does not enforce permissions over
its arguments—offering a potential for runtime performance gains.
This characteristic motivates the need to wrap all access paths in
the context, but not the values passed as arguments to these paths.
The second characteristic is that the same paths in different libraries
may be governed by different permissions: main may need an X
permission for srl.dec, but a different module might need an R for
srl.enc. This characteristic motivates the need to apply a distinct
set of wrappers per library context.
Mir’s transformations can be grouped into four phases. The first
phase simply modifies require so that calls yield into Mir rather
than the built-in locate-and-load mechanism. For each module,
the second phase creates a fresh copy of the runtime context—i.e.,
all the name-value mappings that are available to the module by
default. The third phase binds the modified context with the module,
using a source-to-source transformation that re-defines names in
the context as library-local ones and assigns to them the modified