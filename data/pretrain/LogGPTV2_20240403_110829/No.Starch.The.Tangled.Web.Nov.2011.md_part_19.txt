type="application/x-shockwave-flash">
If this turn of events seems wrong, that’s because it is. Security researchers
have repeatedly demonstrated that it is quite easy to construct documents that
are, for example, simultaneously a valid image and a valid plug-in-recognized
executable. The well-known “GIFAR” vulnerability, discovered in 2008 by
Billy Rios,2 exploited that very trick: It smuggled a Java applet inside a per-
fectly kosher GIF image. In response, Sun Microsystems reportedly tightened
down the Java JAR file parser to mitigate the risk, but the general threat of
such mistakes is still very real and will likely rear its ugly head once more.
Content Rendering with Browser Plug-ins 129
Interestingly, the decision by some developers to rely on Content-Type and
other signals if the type parameter is unrecognized is almost as bad. This deci-
sion makes it impossible for the well-intentioned fuzzybunnies.com to safely
embed a harmless video from the rogues at bunnyoutlet.com by simply specifying
type="video/x-ms-wmv", because if any of the visitors do not have a plug-in for
that specific media type, bunnyoutlet.com will suddenly have a say in what type
of plug-in should be loaded on the embedding site instead. Some browsers,
such as Internet Explorer, Chrome, or Opera, may also resort to looking for
apparent file extensions present inthe URL, which can lead to an interesting
situation where neither the embedding nor the hosting party has real control
over how a document is displayed—and quite often only the attacker is in
charge.
A much safer design would require the embedder-controlled type param-
eter and the host-controlled Content-Type header to match (at least superfi-
cially). Unfortunately, there is currently no way to make this happen. Several
individual plug-ins try to play nice (for example, following a 2008 overhaul,
Adobe Flash rejects applets served with Content-Disposition: attachment, as does
the built-in PDF reader in Chrome), but these improvements are few and far
between.
Document Rendering Helpers
A significant portion of the plug-in landscape belongs to programs that allow
certain very traditional, “nonweb” document formats to be shown directly in
the browser. Some of these programs are genuinely useful: Windows Media
Player, RealNetworks RealPlayer, and Apple QuickTime have been the back-
bone of online multimedia playback for about a decade, at least until their
displacement by Adobe Flash. The merits of others are more questionable,
however. For example, Adobe Reader and Microsoft Office both install in-
browser document viewers, increasing the user’s attack surface appreciably,
though it is unclear whether these viewers offer a real benefit over opening
the same document in a separate application with one extra click.
Of course, in a perfect world, hosting or embedding a PDF or a Word
document should have no direct consequences for the security of the partici-
pating websites. Yet, predictably, the reality begs to differ. In 2009, a researcher
noted that PDF-based forms that submit to javascript: URLs can apparently lead
to client-side code execution on the embedding site.3 Perhaps even more trou-
bling than this report alone, according to that researcher’s account, Adobe ini-
tially dismissed the report with the following note: “Our position is that, like
an HTML page, a PDF file is active content.”
It is regrettable that the hosting party does not have full control of when
this active content is detected and executed and that otherwise reasonable
webmasters may think of PDFs or Word documents as just a fancy way to pre-
sent text. In reality, despite their harmless appearance, in a bid to look cool,
many such document formats come equipped with their own hyperlinking
capabilities or even scripting languages. For example, JavaScript code can
beembedded in PDF documents, and Visual Basic macros are possible in
130 Chapter 8
Microsoft Office files. When a script-bearing document is displayed on an
HTML page, some form of a programmatic plug-in-to-browser bridge usually
permits a degree of interaction with the embedding site, and the design of
such bridges can vary from vaguely questionable to outright preposterous.
In one 2007 case, Petko D. Petkov noticed that a site that hosts any
PDFdocuments can be attacked simply by providing completely arbitrary
JavaScript code in the fragment identifier. This string will be executed on
thehosting page through the plug-in bridge:4
http://example.com/random_document.pdf#foo=javascript:alert(1)
The two vulnerabilities outlined here are now fixed, but the lesson is
thatspecial care should be exercised when hosting or embedding any user-
supplied documents in sensitive domains. The consequences of doing so are
not well documented and can be difficult to predict.
Plug-in-Based Application Frameworks
The boring job of rendering documents is a well-established role for browser
plug-ins, but several ambitious vendors go well beyond this paradigm. The
aim of some plug-ins is simply to displace HTML and JavaScript by providing
alternative, more featured platforms for building interactive web applications.
That reasoning is not completely without merit: Browsers have long lacked
inperformance, in graphics capabilities, and in multimedia codecs, stifling
some potential uses of the Web. Reliance on plug-ins is a reasonable short-
term way to make a difference. On the flip side, when proprietary, patent-
and copyright-encumbered plug-ins are promoted as the ultimate way to build
an online ecosystem, without any intent to improve the browsers themselves,
the openness of the Web inevitably suffers. Some critics, notably Steve Jobs,
think that creating a tightly controlled ecosystem is exactly what several plug-
in vendors, most notably Adobe, aspire to.5
In response to this perceived threat of a hostile takeover of the Web,
many of the shortcomings that led to the proliferation of alternative applica-
tion frameworks are now being hastily addressed under the vaguely defined
umbrella of HTML5;  tags and WebGL* are the prime examples of this
work. That said, some of the features available in plug-ins will probably not be
captured as a part of any browser standard in the immediate future. For exam-
ple, there is currently no serious plan to add inherently dangerous elevated
privilege programs supported by Java or security-by-obscurity content protec-
tion schemes (euphemistically called Digital Rights Management, or DRM).
Therefore, while the landscape will change dramatically in the coming
years, we can expect that in one form or another, proprietary web applica-
tion frameworks are here to stay.
* WebGL is a fairly recent attempt to bring OpenGL-based 3D graphics to JavaScript applica-
tions. The first specification of the standard appeared in March 2011, and wide browser-level
support is expected to follow.
Content Rendering with Browser Plug-ins 131
Adobe Flash
Adobe Flash is a web application framework introduced in 1996, in the heat
of the First Browser Wars. Before its acquisition by Adobe in 2005, the Flash
platform was known as Macromedia Flash or Shockwave Flash (hence the .swf
file extension used for Flash files), and it is still sometimes referred to as such.
Flash is a fairly down-to-earth platform built on top of a JavaScript-based
language dubbed ActionScript.7 It includes a 2-D vector and bitmap graphics-
rendering engine and built-in support for several image, video, and audio
formats, such as the popular and efficient H.264 codec (which is used for
much of today’s online multimedia).
By most estimates, Flash is installed on around 95 to 99 percent of all
desktop systems.8, 9 This user base is substantially higher than that of any
other media player plug-in. (Support for the Windows Media Player and
QuickTime plug-ins is available on only about 60 percent of PCs, despite
aggressive bundling strategies, while the increasingly unpopular RealPlayer
isstill clinging to 25 percent.) The market position contributes to the prod-
uct’s most significant and unexpected use: the replacement of all multimedia
playback plug-ins previously relied upon for streaming video on the Web.
Although the plug-in is also used for a variety of other jobs (including imple-
menting online games, interactive advertisements, and so on), simple multi-
media constitutes a disproportionately large slice of the pie.
NOTE Confusingly, a separate plug-in called Adobe Shockwave Player (without the word
“Flash”) is also available, which can be used to play back content created with Adobe
Director. This plug-in is sometimes mistakenly installed in place of or alongside Adobe
Flash, contributing to an approximately 20 percent install base,6 but it is almost always
unnecessary. The security properties of this plug-in are not particularly well studied.
Properties of ActionScript
The capabilities of ActionScript in SWF files are generally analogous to those
of JavaScript code embedded on HTML pages with some minor, yet interest-
ing, differences. For example, Flash programs are free to enumerate all fonts
installed on a system and collect other useful system fingerprinting signals
not available to normal scripts. Flash programs can also use full screen ren-
dering, facilitating UI spoofing attacks, and they can request access to input
devices such as a camera or a microphone (this requires the user’s consent).
Flash also tends to ignore browser security and privacy settings and uses its
own configuration for mechanisms such as in-plug-in persistent data storage
(although some improvements in this area were announced in May 2011).
The remaining features are less surprising. We’ll discuss the network
andDOM access permissions of Flash applications in more detail in the next
chapter, but in short, by default, every Flash applet can use the browser HTTP
stack (and any ambient credentials managed therein) to talk back to its orig-
inating server, request a limited range of subresources from other sites, and
navigate the current browser window or open a new one. ActionScript pro-
grams may also negotiate browser-level access to other currently running
132 Chapter 8
Flash applications and, in some cases, access the DOM of the embedding
page. This last functionality is implemented by injecting eval(...)-like state-
ments into the target JavaScript context.
ActionScript offers fertile ground for web application vulnerabilities.
Forexample, the getURL(...) and navigateToURL(...) functions, used to navi-
gate the browser or open new windows, are sometimes invoked with attacker-
controlled inputs. Such a use is dangerous. Even though javascript: URLs do
not have a special meaning to Flash, the function will pass such strings to the
browser, in some cases resulting in script injection on the embedding site.
Until recently, a related problem was present with other URL-handling
APIs, such as loadMovie(...). Even though the function did not rely on the
browser to load the document, it would recognize an internal asfunction:
scheme, which works similarly to eval(...) and could be trivially leveraged to
perform a call to getURL(...):
asfunction:getURL,javascript:alert('Hi mom!')
The issue with loading scripts from untrusted sources, discussed in
Chapter 6, also has an equivalent in the plug-in word. In Flash, it is very unsafe
to invoke certain functions that affect the state of the ActionScript execution
environment (such as the LoadVars.load(...)) with attacker-controlled URLs,
even if the scheme from which the resource is loaded is http: or https:.
Another commonly overlooked attack surface is the internal, simpli-
fied HTML parser offered by the Flash plug-in: Basic HTML markup can be
assigned to properties such as TextField.htmlText and TextArea.htmlText. It is easy
to forget that user-supplied content must be escaped correctly in this setting.
Failure to do so may permit attackers to modify the appearance of the appli-
cation UI or to inject potentially problematic scripting-oriented links.
Yet another class of Flash-related security bugs may arise due to design
orimplementation problems in the plug-in itself. For example, take the
ExternalInterface.call(...) API. It is meant to allow ActionScript to call existing
JavaScript functions on the embedding page and takes two parameters: the
name of the JavaScript function to call and an optional string to be passed to
this routine. While it is understood that the first parameter should not be
attacker controlled, it appears to be safe to put user data in the second one.
In fact, the documentation provides the following code snippet outlining this
specific use case:10
ExternalInterface.call("sendToJavaScript", input.text);
This call will result in the following eval(...) statement being injected on
the embedding page:
try {
__flash__toXML(sendToJavaScript, "value of input.text"));
} catch (e) {
"";
}
Content Rendering with Browser Plug-ins 133
When writing the code behind this call, the authors of the plug-in
remembered to use backslash escaping when outputting the second parame-
ter: hello"world becomes hello\"world. Unfortunately, they overlooked the need
to escape any stray backslash characters, too. Because of this, if the value of
input.text is set to the following string, the embedded script will unexpectedly
execute:
Hello world!\"+alert(1)); } catch(e) {} //
I contacted Adobe about this particular problem in March 2010. Over a
year later, its response was this: “We have not made any change to this behav-
ior for backwards compatibility reasons.”
That seems unfortunate.
Microsoft Silverlight
Microsoft Silverlight is a versatile development platform built on the Windows
Presentation Foundation, a GUI framework that is a part of Microsoft’s .NET
stack. It debuted in 2007 and combines an Extensible Application Markup
Language (XAML)11 (Microsoft’s alternative to Mozilla’s XUL) with code writ-
ten in one of several managed .NET languages,* such as C# or Visual Basic.
Despite substantial design differences and a more ambitious (and con-
fusing) architecture, this plug-in is primarily meant to compete with Adobe
Flash. Many of the features available to Silverlight applications mirror those
implemented in its competitor, including a nearly identical security model
and a similar eval(...)-based bridge to the embedding page. To Microsoft’s
credit, Silverlight does not come with an equivalent of the asfunction: scheme
or with a built-in HTML renderer, however.
Silverlight is marketed by Microsoft fairly aggressively, and it is bundled
with some editions of Internet Explorer. As a result, depending on the source,
it is believed to have about a 60 to 75 percent desktop penetration.12 Despite
its prevalence, Silverlight is used fairly infrequently to develop actual web
applications, perhaps because it usually offers no compelling advantages over
its more established counterpart or because its architecture is seen as more
contrived and platform-specific. (Netflix, a popular video streaming and
rental service, is one of the very few high-profile websites that actually relies
on Silverlight for playback on some devices.)
Sun Java
Java is a programming language coupled with a platform-independent,
managed-code execution platform. Developed in the early to mid-1990s by
James Gosling for Sun Microsystems, Java has a well-established role as a server-
side programming language and a very robust presence in many other niches,
* Managed code is not executed directly by the CPU (which would be inherently unsafe, because
CPUs are not designed to enforce web security rules). Rather, it is compiled to an intermediate
binary form and then interpreted at runtime by a specialized virtual machine. Thisapproach is
faster than interpreting scripts at runtime and permits custom security policy enforcement as
the program is being executed.
134 Chapter 8
including mobile devices. Yet, from the beginning, Sun hoped that Java
would also occupy a prominent place on the browser end.
Java in the browser predated Flash and most similar plug-ins, and the
now-obsolete  tag is a testament to how important and unique and
novel this addition must have seemed back in its day. Yet, despite this head
start, the Java language is nearly extinct as an in-browser development plat-
form, and even in its heyday it never enjoyed real prominence. It retains a
remarkable 80 percent installed base, but this high percentage is attributed
largely to the fact that the Java plug-in is bundled with Java Runtime Environ-
ment (JRE), a more practically useful and commonly preinstalled compo-
nent that is required to run normal, desktop Java applications on the system
without any involvement on the browser end.
The reasons for the failure of Java as a browser technology are difficult
topinpoint. Perhaps it’s due to the plug-in’s poor startup performance, the
clunky UI libraries that made it difficult to develop snappy and user-friendly
web applications, or the history of vicious litigation between Sun and Microsoft
that cast a long shadow over the future of the language on Microsoft’s oper-
ating systems.* Whatever the reasons may be, the high install base of Java
coupled with its marginal use means that the risks it creates far outweigh any
potential benefits to the users. (The plug-in had close to 80 security vulnera-
bilities in 2010,13 and the vendor is commonly criticized for patching such
bugs very slowly.)
Java’s security policies are somewhat similar to those of other plug-ins,
but in some aspects, such as its understanding of the same-origin policy or
itsability to restrict access to the embedding page, it compares unfavorably.
(The next chapter provides an overview of this.) It is also worth noting that
unlike with Flash or Silverlight, certain types of cryptographically signed
applets may request access to potentially dangerous OS features, such as
unconstrained networking or file access, and only a user’s easily coaxed
consent stands in the way.
XML Browser Applications (XBAP)
XML Browser Applications (XBAP)14 is Microsoft’s heavy-handed foray into
the world of web application frameworks, attempted in the years during
which the battle over Java started going sour and before the company
released Silverlight.
XBAP is reminiscent of Silverlight in that it leverages the same Windows
Presentation Foundation and .NET architecture. However, instead of being a
self-contained and snappy browser plug-in, it depends on the large and unwieldy
.NET runtime, in a manner similar to the Java plug-in’s dependence on JRE.
It executes the managed code in a separate process called PresentationHost.exe,
often loading extensive dependencies at initialization time. By Microsoft’s own
admission, the load time of a medium-size previously uncached application
* The legal battles started in 1997, when Microsoft decided to roll out its own (and in some
ways,superior) version of the Java virtual machine. Sun Microsystems sued, hoping to win an
injunction that would force Microsoft to bundle Sun’s version instead. The two companies ini-
tially settled in 2001, but shortly thereafter they headed back to court. In the final settlement in
2004, Sun walked away with $1.6 billion in cash, but Windows users were not getting any Java
runtime at all.
Content Rendering with Browser Plug-ins 135
could easily reach 10 seconds or more. When the technology premiered in
2002, most users were already expecting Internet applications to be far more
responsive than that.
The security model of XBAP applications is poorly documented and has
not been researched to date, perhaps due to XBAP’s negligible real-world
use and obtuse, multilayer architecture. One would reasonably expect that
XBAP’s security properties would parallel the model eventually embraced for
Silverlight, but with broader access to certain .NET libraries and UI widgets.
And, apparently as a result of copying from Sun, XBAP programs can also be
given elevated privileges when loaded from the local filesystem or signed
with a cryptographic certificate.
Microsoft bundled XBAP plug-ins with its .NET framework to the point of
silently installing nonremovable Windows Presentation Foundation plug-ins—
not only in Internet Explorer but also in the competing Firefox and Chrome.
This move stirred some well-deserved controversy, especially once the first
vulnerability reports started pouring in. (Mozilla even temporarily disabled
the plug-in through an automated update to protect its users.) Still, despite