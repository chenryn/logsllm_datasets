uint
address
uint
char[32]
uint
uint
uint
Table 1: Some important ﬁelds of a block header in Ethereum.
“coinbase address” is the address that receives the block re-
ward, while “extra data” allows miners to include any data
(upto 32 byes) to the block header.
efﬁciency. The goal of the veriﬁcation process is to
prevent miners from both submitting invalid shares and
over-claiming the number of shares they have found.
SMARTPOOL pays claimants proportional to the number
of shares claimed, if the veriﬁcation succeeds, and other-
wise nothing. The key guarantee here is that of fairness
— SMARTPOOL does not advantage miners who cheat
by claiming invalid or duplicate shares. The expected
payoff from cheating is the same (or worse) as honestly
reporting shares.
In order to join the pool, miners only need to prepare
a correct block template. SMARTPOOL maintains the
verClaimList array in the contract which records the
contributed shares by different miners to date. To enable
efﬁcient veriﬁcation checks, SMARTPOOL forces miners
to search for blocks with a particular structure and dic-
tates a particular template for claim submissions, which
we discuss in Section 3.3. Unlike P2POOL, SMART-
POOL miners do not have to run an additional consensus
protocol to agree on the list state.
3.3 Claim Submissions
Miners can submit a large batch of shares in a single
claim. To permit this, SMARTPOOL deﬁnes a Claim
structure which consists of a few pieces of data. First,
the miner cryptographically commits to the set of shares
he is claiming. The cryptographic commitment goes via
a speciﬁc data structure we call an augmented Merkle
tree, as discussed in Section 3.5. The Merkle root of this
data structure is a single cryptographic hash representing
all the shares claimed and is included in the Claim as a
ﬁeld called ShareAugMT.
After a miner claims several shares in a batch, SMART-
POOL requires the miner to submit proofs to demon-
strate that the shares included in the claim are valid. For
each claimed share being examined, SMARTPOOL de-
ﬁnes a ShareProof structure to help validate the share.
First, SMARTPOOL requires a Merkle proof, denoted as
1414    26th USENIX Security Symposium
USENIX Association
AugMkProof, to attest that the share has been commit-
ted to ShareAugMT. Furthermore, SMARTPOOL ensures
that if a miner ﬁnds a share that is a valid Ethereum
block, then the corresponding block reward is distributed
among the pool members. In an Ethereum block, there
is a special ﬁeld called “coinbase address” which speci-
ﬁes the address that receives the block reward. A share
in SMARTPOOL is valid only if the miner uses pool’s ad-
dress as the “coinbase address.”
It is straightforward to see how SMARTPOOL’s use of
cryptographic commitments prevents certain timing vul-
nerabilities. SMARTPOOL asks the miners to ﬁx their
coinbase address before starting to ﬁnd shares. Once a
share is found, it is not possible to change or eliminate
the coinbase address. SMARTPOOL also asks miners to
put their beneﬁciary address in the “extra data” ﬁeld, so
SMARTPOOL can extract the address to credit the share
to. Although miners may use different addresses to sub-
mit their claims to the contract, SMARTPOOL credits the
share to only one account by fetching the beneﬁcial ad-
dress from the “extra data” ﬁeld. This prevents miners
from claiming the same share to different Ethereum ad-
dresses (or accounts), forcing a one-to-one mapping be-
tween shares found and addresses credited for them. If
a network attacker steals someone else’s share, it can-
not pay itself since the coinbase transaction has already
committed to a payee.
3.4 Batching & Probabilistic Veriﬁcation
SMARTPOOL processes share claims efﬁciently. Min-
ers can claim multiple shares to SMARTPOOL in a single
submission. Each Claim includes less than one hundred
bytes consisting of a cryptographic commitment for the
shares, in a ﬁeld called ShareAugMT. This cryptographic
commitment forces the miner to commit to a set of shares
before including them in the claim. Ideally, before ac-
cepting any claim of n shares submitted by the miner, we
want to verify that
(i) all shares submitted are valid;
(ii) no share is repeated twice in a claim;
(iii) each share appears in at most one claim.
Probabilistic veriﬁcation. For efﬁciency, SMARTPOOL
uses a simple but powerful observation: if we probabilis-
tically verify the claims of a miner, and pay only if no
cheating is detected, then expected payoffs of cheating
miners are the same or less than those of honest miners.
In effect, this observation reduces the effort of verifying
millions of shares down to verifying one or two!
We provide a way to sample shares to verify, outline
a detailed procedure for checking validity in Section 3.5,
and a full proof in Section 4. Here, we explain this ob-
servation with an example, since it may appear counter-
intuitive at ﬁrst. Let us consider a case where cheating
miner ﬁnds 500 valid shares but claims that he has found
1000 valid shares to SMARTPOOL. If SMARTPOOL were
able to randomly sample one share from the miner’s
committed set, and verify its validity, then the odds of
having detected the cheating is 500/1000 (or 1/2). If the
miner is caught cheating, he is paid nothing; if he gets
lucky without being detected, he gets rewarded for 1000
shares. Note that the expected payoff for such a miner is
still 500, computed as (0.5· 1000 + 0.5· 0) = 500, which
is the same as that of an honest miner that claimed the
right amount of valid shares. The argument extends eas-
ily to varying amounts of cheating; if the cheater wishes
to claim 1,500 shares, he is detected with with probabil-
ity 2/3 and stands to get nothing. The higher his claim
away from the true value of found shares, the lower is the
chance of a successful payout. By sampling k ≥ 1 times,
SMARTPOOL can reduce the probability of a cheater re-
maining undetected exponentially small in k, as we show
in Section 4.
Searching for shares. To enable probabilistic veriﬁ-
cation, SMARTPOOL prescribes a procedure for mining
shares. Each SMARTPOOL miner is expected to search
for shares in a monotonic order, starting from a distinct
value that it commits to. Speciﬁcally, when a miner
claims shares S = {s1,s2, . . . ,sn}, SMARTPOOL extracts
a unique counter from each share, e.g., taking the ﬁrst k
(say 20) bits, and requires that the counters of all si ∈ S
to be strictly increasing. Each time a miner ﬁnds a valid
nonce that yields a valid share, he increases the counter
by at least 1 and searches for the next share. When the
miner claims for the set S, its submitted elements must be
lexicographically ordered by counter values. The miner
commits the latest counter in his Claim to this set S,
which has at most one share for each counter value. This
eliminates any repeats in claimed shares in one claim,
and across claims by one miner.
In SMARTPOOL im-
plementation as an Ethereum contract, as discussed in
Section 3.5, we use the share’s timestamp and the used
nonce to act as the counter value of a share.
SMARTPOOL guarantees that miners produce distinct
shares by providing a unique value in the “extra data”
ﬁeld in each miner’s share template. This ensures that
miners search in distinct sub-spaces of the search space.
Checking Validity of Shares. SMARTPOOL checks
that miners have followed the prescribed mining proce-
dure by randomly sampling a share from each submitted
Claim along with a ShareProof (as described in Sec-
tion 3.3). SMARTPOOL validates the following:
(i) the hash of the share meets the difﬁculty criterion;
(ii) the share is constructed correctly,
i.e., uses the
SMARTPOOL’s address as the beneﬁciary address
of the block reward.
(iii) the share correctly satisﬁes the proof-of-work
USENIX Association
26th USENIX Security Symposium    1415
the use of prede-
(PoW) solution constraints (e.g.
termined 1GB dataset mandated by the Ethereum
PoW scheme)
The checks for (i) and (ii) are straightforward. The
check for (iii) is to guarantee that miners actually have
and use the data cache when they generate the shares.
This 1GB of data cache is introduced in Ethereum to
make its PoW ASIC-resistant. Thus, skipping checking
(iii) would allow rational miners to easily mine a lot of
invalid shares and still get paid from SMARTPOOL. It
is not straightforward to efﬁciently check (iii) inside a
smart contract. Indeed a na¨ıve solution would require a
massive amount of gas and hence invoke enormous trans-
action fees. We discuss implementation tricks on how to
check (iii) in Section 6.1.1.
It remains to discuss (a) how miners cryptographically
commit to a batched set of shares in a claim, (b) how
SMARTPOOL veriﬁes that the committed set has mono-
tonically increasing counters, and (c) how shares are
sampled. For (a) and (b), one can think of using a stan-
dard Merkle tree on all the claimed share set to generate
the cryptographic commitment. However, in a standard
Merkle tree, verifying the inclusion of a share is efﬁcient,
but checking the ordering of the set elements is not efﬁ-
cient. In SMARTPOOL, we devise a new data structure
called augmented Merkle tree to help us verify inclusion
and ordering of shares efﬁciently.
3.5 Detailed Constructions
In this section, we discuss an efﬁcient veriﬁcation
scheme using probabilistic share sampling and a simple
penalty function that penalizes cheaters. The description
here takes an Ethereum pool as a target, but the same
data structure works for other PoW-based cryptocurrency
such as Bitcoin as we discuss in Section 5.
Augmented Merkle tree. Recall that a Merkle tree is
a binary tree in which each node is the hash of the con-
catenation of its children nodes. In general, the leaves
of a Merkle tree will collectively contain some data of
interest, and the root is a single hash value which acts
as a certiﬁcate commitment for the leaf values in the fol-
lowing sense. If one knows only the root of a Merkle
tree and wants to conﬁrm that some data x sits at one of
the leaves, then holder of the original data can provide
a “Merkle path” from the root to the leaf containing x
together with the children of each node traversed in the
Merkle tree. Such a path is difﬁcult to fake because one
needs to know the children’s preimages for each hash in
the path, so with high probability the data holder will
supply a correct path if and only if x actually sits at one
of the leaves.
For the purposes of submitting shares in SMART-
POOL, we not only want to ensure that shares exist in
the batch list but also that there are no repeats and order-
ing of the counters is correct. We therefore introduce an
augmented Merkle tree structure which we use to guard
against duplicates in the leaves.
Deﬁnition 1 (Augmented Merkle tree). Let ctr be
a one-to-one function that maps shares to integers.
An augmented Merkle tree for a set of objects S =
{s1,s2, . . . ,sn} is a tree whose nodes x have the form
(min(x), hash(x), max(x)) where:
(I) min(x) is the minimum of the children’s min (or
ctr(si), if x is a leaf corresponding to the object si),
(II) hash(x) is the cryptographic hash of the concatena-
tion of the children nodes (or hash(si) if x is a leaf
corresponding to the object si), and
(III) max(x) is the maximum of the children’s max (or
ctr(si), if x is a leaf corresponding to the object si).
An augmented Merkle tree is called sorted if all of its
leaves occur in strictly increasing order from left to right
with respect to its counter function.
SMARTPOOL expects claims of submitted shares to be
monotonically ordered by their counters. Thus, one can
think of each share si to have a “timestamp” given by
its ctr(x), since integer-valued counters can be naturally
ordered (ascending or descending). For implementation
in Ethereum, we can use the block timestamp and an the
nonce to serve as the counter. In Appendix 10.2, we dis-
cuss alternative candidates for the ordering function ctr
with backward compatibility to serve Bitcoin mining.
Figure 3 gives an example of an augmented Merkle
tree based on four submitted shares with timestamps as
1,2,3,4 respectively. To prove that the share c has been
committed, a miner has to submit two nodes d and e to
SMARTPOOL. SMARTPOOL can reconstruct other nodes
on the path from c to the root (i.e. b and a sequentially)
and accepts the proof if the computed root is the same
as the committed one. The proof for one share, thus,
in a Merkle tree of height h will contain h hashes. The
algorithm to check the validity of a proof for a valid path
in an augmented Merkle is in Algorithm 1.
Batch submission with augmented Merkle trees. Af-
ter collecting a list of shares, the miner locally constructs
an augmented Merkle tree for all the shares in the list. It
then submits the data of the root node of the tree along
with a number indicating how many shares it ﬁnds to
SMARTPOOL. For example, the miner in Figure 3 sub-
mits the node a as the cryptographic commitment, which
has min and max as 1 and 4 respectively. We use this
committed data to i) verify that the sampled shares are
found before the miner submits the claim; ii) efﬁciently
check whether a share is duplicated in a claim. Verify-
ing i) is straightforward as mentioned before. To ver-
ify ii), we observe that any duplicated shares in a claim
1416    26th USENIX Security Symposium
USENIX Association
else
return false
if isALeaf(x) then
return false
if !(x.min == x.max == x.ctr) or !isValidShare(x) then
end if
left ← x.leftChild
right ← x.rightChild
if !isHashValid(x,x.hash) then
Algorithm 1 Algorithm to verify the validity of one path
in a augmented Merkle tree
1: procedure VALIDATENODEINPATH(x)
2: Check if x is a leaf :
3:
4:
5:
6:
7:
8:
9:
10:
11:
12:
13:
14:
15:
16:
17:
18:
19:
20: Check if x is the root:
if isRoot(x) then
21:
22:
23:
24:
25:
26: end procedure
or !(right.max == x.max)
or !(left.max < right.min)) then
return false
end if
if (!(x.min < x.max) or !(left.min == x.min)
return ValidateNodeInPath(x.parent)
end if
end if
return true
else
end if
a = [1, hash(b, e), 4]
b=[1, hash(c, d), 2]
e=[3, hash(f, g), 4]
d=[2, s2, 2]
g=[4, s4, 4]
c=[1, s1, 1]
Figure 3: A sorted augmented Merkle tree for a list of shares
(s1 to s4) with timestamp values from 1 to 4.
f=[3, s3, 3]
will yield a sorting error in at least one path of the aug-
mented Merkle tree. Thus, by sampling the tree in a con-
stant number of leaves and checking their corresponding
paths, with high probability we will detect a sorting error
in the augmented Merkle tree if there is one.
Prevent over-claiming shares across claims. Our aug-
mented Merkle tree allows us to detect if miners over
claim shares or submit invalid shares in a claim. How-