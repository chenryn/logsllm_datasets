whoami，net user，你这样的行为在端防护软件的眼里根本无所遁形，分分钟痛失一条shell
直接写注册表创建服务
此时未免会有点疑问，我们的服务名字，可执行文件路径信息以及配置信息是存在操作系统的什么未知
呢？ 其实我们的所有服务都是存在注册表中，键值路径为
HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services ,在这个路径下就可以看到我们刚才创
建的服务信息：
那问题又来了，既然我们创建的服务都存储在注册表，那么我们直接创建注册表项是不是也能创建服务
呢？下面就来进行一下实验：
我们直接写如下reg文件给regedit执行，参考：
然后运行 regedit /s filename.reg ,就可以静默的方式添加到注册表，这样也是可以直接在系统中注
册服务的，但是缺点是需要系统重启才能被SCM加载管理。重启后就可以查到此服务了：
我至今还没有找到不用重新启动就让SCM成功加载这个服务的办法，如果大家有的话，希望可以分享出
来一起交流。
但是我们要知道注册表操作其实也是端防护软件的眼中钉，肉中刺，也是被防护的死死的，要想不被端
防护软件发现或者拦截的创建服务，我们最好使用最后一种办法
使用SCM提供的API注册服务
服务的注册
一个服务程序可以使用 CreateServiceA 函数来向SCM数据库中添加服务信息，函数原型如下：
Windows Registry Editor Version 5.00
[HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\SecondService]
"DisplayNmae"="SecondService"
"ErrorControl"=dword:01
"ImagePath"=hex(2):43,00,3a,00,5c,00,55,00,73,00,65,00,72,00,73,00,5c,00,41,00,\
  64,00,6d,00,69,00,6e,00,69,00,73,00,74,00,72,00,61,00,74,00,6f,00,72,00,5c,\
  00,44,00,65,00,73,00,6b,00,74,00,6f,00,70,00,5c,00,43,00,6f,00,6e,00,73,00,\
  6f,00,6c,00,65,00,41,00,70,00,70,00,6c,00,69,00,63,00,61,00,74,00,69,00,6f,\
  00,6e,00,31,00,5c,00,52,00,65,00,6c,00,65,00,61,00,73,00,65,00,5c,00,43,00,\
  6f,00,6e,00,73,00,6f,00,6c,00,65,00,41,00,70,00,70,00,6c,00,69,00,63,00,61,\
  00,74,00,69,00,6f,00,6e,00,31,00,2e,00,65,00,78,00,65,00,00,00
"ObjectName"="LocalSystem"
"Sstart"=dword:03
"Type"=dword:0x10
SC_HANDLE CreateServiceA(
  SC_HANDLE hSCManager,  //SCM数据库的句柄
  LPCSTR    lpServiceName, //服务启动的名字
  LPCSTR    lpDisplayName, //服务显示的名字
  DWORD     dwDesiredAccess,//服务访问权限
  DWORD     dwServiceType, // 服务类型
  DWORD     dwStartType,   // 服务启动方式
  DWORD     dwErrorControl, //指定错误级别
  LPCSTR    lpBinaryPathName, //服务关联的服务程序路径
  LPCSTR    lpLoadOrderGroup, //组名
  LPDWORD   lpdwTagId,       // 组内ID
  LPCSTR    lpDependencies,  // 依赖名称组
  LPCSTR    lpServiceStartName, //账号
  LPCSTR    lpPassword //密码
第一个参数是由OpenSCManager函数得到，该函数原型如下：
此函数返回的句柄需要被 CloseServiceHandle 函数关闭。
服务的启动和控制
得到服务句柄可以使用 CloseServiceHandle 函数将其关闭。
得到服务句柄之后就可以使用 StartService 来启动服务：
服务启动之后，就可以使用 ControlService 函数来控制服务的行为，如暂停，恢复，停止等。
删除服务：
);
SC_HANDLE OpenSCManagerA(
  LPCSTR lpMachineName,
  LPCSTR lpDatabaseName,
  DWORD  dwDesiredAccess //访问权限，参考msdn
);
BOOL CloseServiceHandle(
  SC_HANDLE hSCObject
);
SC_HANDLE OpenServiceA(
  SC_HANDLE hSCManager, //SCM数据库句柄
  LPCSTR    lpServiceName, //要打开的服务名称
  DWORD     dwDesiredAccess //得到服务句柄所具备的权限
);
BOOL StartServiceA(
  SC_HANDLE hService,
  DWORD     dwNumServiceArgs, //lpServiceArgVectors所指向的数组元素个数
  LPCSTR    *lpServiceArgVectors //指向一个字符串数组，传递给服务入口函数的参数
);
BOOL ControlService(
  SC_HANDLE        hService,
  DWORD            dwControl, //控制代码 
  LPSERVICE_STATUS lpServiceStatus 
);
BOOL DeleteService(
  SC_HANDLE hService
);
代码示例
我们其实不需要单独实现一个程序来控制前面写的那个服务，我们只需要将服务注册，控制代码放在一
个文件中，此文件根据不同的参数做不同的事情就可以了。当无参数时就是被SCM调用，此时调用 
StartServiceCtrlDispatcher 开启功能就可以了，具体的代码演示：
//#include "stdafx.h"
#include 
#include 
#pragma warning(disable : 4996)
#include 
#define SERVICE_NAME _T("FirstService")
SERVICE_STATUS g_status;
SERVICE_STATUS_HANDLE g_hServiceStatus;
HANDLE g_hEvent = NULL;
void Init()
{
    g_status.dwServiceType = SERVICE_WIN32_OWN_PROCESS;
    g_status.dwCurrentState = SERVICE_STOPPED;
    // 设置服务可以使用的控制
    // 如果希望服务启动后不能停止，去掉SERVICE_ACCEPT_STOP
    // SERVICE_ACCEPT_PAUSE_CONTINUE是服务可以“暂停/继续”
    g_status.dwControlsAccepted = SERVICE_ACCEPT_STOP | 
SERVICE_ACCEPT_PAUSE_CONTINUE | SERVICE_ACCEPT_SHUTDOWN;
    g_status.dwWin32ExitCode = 0;
    g_status.dwServiceSpecificExitCode = 0;
    g_status.dwCheckPoint = 0;
    g_status.dwWaitHint = 0;
    //创建初始为有信号的手动内核事件。
    g_hEvent = CreateEvent(NULL, TRUE, TRUE, LPCWSTR("Pause"));
}
void SetStatus(long lCurrentStatus)
{
    g_status.dwCurrentState = lCurrentStatus;
    SetServiceStatus(g_hServiceStatus, &g_status);
}
void WINAPI Handler(DWORD dwOpcode)
{
    switch (dwOpcode)
    {
    case SERVICE_CONTROL_STOP:
    {   //收到停止服务命令停止服务
        SetStatus(SERVICE_STOP_PENDING);
        SetStatus(SERVICE_STOPPED);
    }
    break;
    case SERVICE_CONTROL_PAUSE:
    {
        SetStatus(SERVICE_PAUSE_PENDING);
        ResetEvent(g_hEvent); //通知RUN函数开始等待
        SetStatus(SERVICE_PAUSED);
    }
    break;
    case SERVICE_CONTROL_CONTINUE:
    {
        SetStatus(SERVICE_CONTINUE_PENDING);
        SetEvent(g_hEvent);//通知RUN函数继续执行
        SetStatus(SERVICE_RUNNING);
    }
    break;
    case SERVICE_CONTROL_INTERROGATE:
        break;
    case SERVICE_CONTROL_SHUTDOWN:
    {   //关机时停止服务
        SetStatus(SERVICE_STOP_PENDING);
        SetStatus(SERVICE_STOPPED);
    }
    break;
    default:
        break;
    }
}
void Run()
{
    while (1)
    {
        WCHAR tcFile[MAX_PATH] = L"C:\\test.txt";
        //打开已存在的a.txt文件
        HANDLE hFile = CreateFile(tcFile, GENERIC_WRITE | GENERIC_READ, 
FILE_SHARE_READ | FILE_SHARE_WRITE, NULL,
            OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL);
        if (hFile == INVALID_HANDLE_VALUE) {
            //打开失败则创建一个。
            hFile = CreateFile(tcFile, GENERIC_WRITE | GENERIC_READ, 
FILE_SHARE_READ | FILE_SHARE_WRITE, NULL,
                CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, NULL);
            DWORD dwWrite = 0;
            WriteFile(hFile, "Hello", 5, &dwWrite, NULL);
        }
        CloseHandle(hFile);
        Sleep(500);  //暂停500毫秒后继续扫描
                          //如何g_hEvent无信号则暂停执行
        WaitForSingleObject(g_hEvent, INFINITE);
    }
}
void WINAPI ServiceMain(DWORD dwArgc, LPTSTR* lpszArgv)
{
    // 注册控制请求句柄
    g_hServiceStatus = RegisterServiceCtrlHandler(SERVICE_NAME, Handler);
    if (g_hServiceStatus == NULL) return;
    SetStatus(SERVICE_START_PENDING);
    SetStatus(SERVICE_RUNNING);
    // 当 Run 函数返回时，服务已经结束。
    Run();
    g_status.dwWin32ExitCode = S_OK;
    g_status.dwCheckPoint = 0;
    g_status.dwWaitHint = 0;
    g_status.dwCurrentState = SERVICE_START;
    //设置服务状态为停止,从而退出服务.
    SetServiceStatus(g_hServiceStatus, &g_status);
}
BOOL IsInstalled()
{
    BOOL bResult = FALSE;
    //打开服务控制管理器
    SC_HANDLE hSCM = OpenSCManager(NULL, NULL, SC_MANAGER_ALL_ACCESS);
    if (hSCM != NULL)
    {
        //打开服务
        SC_HANDLE hService = OpenService(hSCM, SERVICE_NAME, 
SERVICE_QUERY_CONFIG);
        if (hService != NULL)
        {
            bResult = TRUE;
            CloseServiceHandle(hService);
        }
        CloseServiceHandle(hSCM);
    }
    return bResult;
}
BOOL Install()
{
    if (IsInstalled()) //服务已安装则直接返回真
        return TRUE;
    //打开服务控制管理器
    SC_HANDLE hSCM = OpenSCManager(NULL, NULL, SC_MANAGER_ALL_ACCESS);
    if (hSCM == NULL)
    {
        MessageBoxA(NULL, "Open SCM Manager error!", "failed", MB_OK);
        return FALSE;
    }
    TCHAR szFilePath[MAX_PATH];
    //获取本程序的路径
    DWORD dwLen = GetModuleFileName(NULL, szFilePath, MAX_PATH);
    //判断程序路径是否包含空格,如果包含则给路径加上引号.
    if (_tcschr(szFilePath, ' ') != NULL)
    {
        dwLen += 3;
        TCHAR* lpFilePath = new TCHAR[dwLen];
        if (lpFilePath != NULL)
        {
            _stprintf(lpFilePath, _T("\"%s\""), szFilePath);
            _tcscpy_s(szFilePath, lpFilePath);
            delete[] lpFilePath;
        }
    }
    //创建一个手动启动的服务
    SC_HANDLE hService = CreateService(
        hSCM, SERVICE_NAME, SERVICE_NAME,
        SERVICE_ALL_ACCESS, SERVICE_WIN32_OWN_PROCESS,
        SERVICE_AUTO_START, SERVICE_ERROR_NORMAL,
        szFilePath, NULL, NULL, _T(""), NULL, NULL);
    if (hService == NULL)
    {
        CloseServiceHandle(hSCM);
        return FALSE;
    }
    CloseServiceHandle(hService);
    CloseServiceHandle(hSCM);
    return TRUE;
}
BOOL Uninstall()
{
    if (!IsInstalled()) //如果服务已卸载直接返回真
        return TRUE;
    SC_HANDLE hSCM = OpenSCManager(NULL, NULL, SC_MANAGER_ALL_ACCESS);
    if (hSCM == NULL)
    {
        return FALSE;
    }
    SC_HANDLE hService = OpenService(hSCM, SERVICE_NAME, SERVICE_STOP | DELETE);
    if (hService == NULL)
    {