jmp    short next_character_in_password 
.text:00541223 
.text:00541223 call_rotate2: 
.text:00541223   
test    ebx, ebx 
.text:00541225   
jle    short next_character_in_password 
.text:00541227   
mov    edi, ebx 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 79 章  “QR9”：魔方态加密模型 
771 
.text:00541229 
.text:00541229 loc_541229: 
.text:00541229   
push    esi 
.text:0054122A   
call    rotate2 
.text:0054122F   
add    esp, 4 
.text:00541232   
dec    edi 
.text:00541233   
jnz    short loc_541229 
.text:00541235   
jmp    short next_character_in_password 
.text:00541237 
.text:00541237 call_rotate1: 
.text:00541237   
test    ebx, ebx 
.text:00541239   
jle    short next_character_in_password 
.text:0054123B   
mov    edi, ebx 
.text:0054123D 
.text:0054123D loc_54123D: 
.text:0054123D   
push    esi 
.text:0054123E   
call    rotate1 
.text:00541243   
add    esp, 4 
.text:00541246   
dec    edi 
.text:00541247   
jnz    short loc_54123D 
.text:00541249 
从密码字符串中提取第二个字符： 
.text:00541249 next_character_in_password:    
.text:00541249         
mov    al, [ebp+1] 
密码字符串指针递增： 
.text:0054124C         
inc     ebp 
.text:0054124D         
test     al, al 
.text:0054124F         
jnz     loop_begin 
.text:00541255         
pop     edi 
.text:00541256         
pop     esi 
.text:00541257         
pop     ebx 
.text:00541258 
.text:00541258 exit:   
.text:00541258         
pop      ebp 
.text:00541259         
retn 
.text:00541259 rotate_all_with_password endp 
通过上面的分析，我们可整理出 rotate_all ()的源代码如下： 
void rotate_all (char *pwd, int v) 
{ 
        char *p=pwd; 
        while (*p) 
        { 
                char c=*p; 
                int q; 
                c=tolower (c); 
                if (c>='a' && c24) 
                                q-=24; 
                        int quotient=q/3; 
                        int remainder=q % 3; 
                        switch (remainder) 
                        { 
                        case 0: for (int i=0; i>shift)&1==1) 
                return 1; 
        return 0; 
}; 
回顾 rotate1/2/3 函数，可看到： 
.text:00541070 rotate1          proc near   
.text:00541070 
函数使用局部数据栈给数组分配了 64 个字节： 
.text:00541070 internal_array_64 = byte ptr -40h 
.text:00541070 arg_0                = dword ptr  4 
.text:00541070 
.text:00541070          
       sub      esp, 40h 
.text:00541073          
       push     ebx 
.text:00541074          
       push     ebp 
.text:00541075          
       mov      ebp, [esp+48h+arg_0] 
.text:00541079          
       push     esi 
.text:0054107A          
       push     edi 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
774 
逆向工程权威指南（下册） 
.text:0054107B          
       xor      edi, edi  
;EDI is loop1 counter 
EBX 寄存器是指向内部数组的指针： 
.text:0054107D          
       lea      ebx, [esp+50h+internal_array_64] 
.text:00541081 
函数使用了 2 层循环： 
.text:00541081 first_loop1_begin: 
.text:00541081     xor      esi, esi   
; ESI is loop 2 counter 
.text:00541083 
.text:00541083 first_loop2_begin: 
.text:00541083     push    ebp  
; arg_0 
.text:00541084     push    esi  
; loop 1 counter 
.text:00541085     push    edi  
; loop 2 counter 
.text:00541086     call    get_bit 
.text:0054108B     add     esp, 0Ch 
.text:0054108E     mov     [ebx+esi], al  
; store to internal array 
.text:00541091     inc     esi  
; increment loop 1 counter 
.text:00541092     cmp     esi, 8 
.text:00541095     jl      short first_loop2_begin 
.text:00541097     inc     edi  
; increment loop 2 counter 
; increment internal array pointer by 8 at each loop 1 iteration 
.text:00541098     add     ebx, 8 
.text:0054109B     cmp     edi, 8 
.text:0054109E     jl      short first_loop1_begin 
这两个循环的控制变量，不仅取值范围都在 0～7 之间，而且它们分别充当了 get_bit()函数的第一个、
第二个参数。而 get_bit()函数使用的第三个参数是 rotate1()函数的唯一一个参数。而后，get_bit()函数的返
回值存储在内部数组里。 
函数再次制备了指向内部数组的指针： 
.text:005410A0     lea     ebx, [esp+50h+internal_array_64] 
.text:005410A4     mov     edi, 7  
; EDI is loop1 counter, initial state is 7 
.text:005410A9 
.text:005410A9 second_loop1_begin:   
.text:005410A9     xor     esi, esi  
; ESI is loop2 counter 
.text:005410AB 
.text:005410AB second_loop2_begin:   
.text:005410AB     mov     al, [ebx+esi] 
; value from internal array 
.text:005410AE     push    eax 
.text:005410AF     push    ebp    
; arg_0 
.text:005410B0     push    edi    
; loop1 counter 
.text:005410B1     push    esi    
; loop2 counter 
.text:005410B2     call    set_bit 
.text:005410B7     add     esp, 10h 
.text:005410BA     inc     esi 
; increment loop2 counter 
.text:005410BB     cmp     esi, 8 
.text:005410BE     jl      short second_loop2_begin 
.text:005410C0     dec     edi 
; decrement loop2 counter 
.text:005410C1     add     ebx, 8  
; increment pointer in internal array 
.text:005410C4     cmp     edi, 0FFFFFFFFh 
.text:005410C7     jg      short second_loop1_begin 
.text:005410C9     pop     edi 