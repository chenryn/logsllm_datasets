    .+?b[Dd][Dd][Ee]b.+?
**3.2 Oletools：msodde.py**
[decalage2](https://twitter.com/decalage2)写了一个python工具：[python-oletools](https://github.com/decalage2/oletools)，这个工具非常有趣，目前我还没有用它来测试一下我们构造的攻击载荷。这个工具可以从使用DDE攻击方法的所有已知变种中提取DDE载荷。如果利用这个工具来检测我们构造的QUOTE变种，我们发现它还是可以提取到相关链接，表明文档中仍然包含DDE攻击载荷：
虽然还需要花点精力，我们还是可以解码这些QUOTE字符，将其转换为待执行的字符串。那么，我们如何绕过这个工具？
回到Office Open XML文件格式（我非常喜欢阅读规范文档），我们发现还有另一个元素可以用来引用域代码。目前为止，我们用到过“Complex
Field”类型的fldChar，然而，还有个“Simple
Field”类型的fldSimple可以为我们所用。与fldChar不同的是，fldSimple元素并没有包含子元素，实际上，它会将域代码作为属性加以使用，如w:instr="FIELD
CODE"。
规范文档中提到如下一个例子：
            Rex Jaeschke
稍加修改后，这段示例代码就可以用于DDE攻击方法中，比如，我们可以嵌入载荷数据，如下所示：
            Pew
使用这种方法，我们还是能得到自动执行的DDE载荷，并且也能绕过Oletools工具：
我已经向oletools发起了[Pull请求](https://github.com/decalage2/oletools/pull/205)，希望能检测在fldSimple元素中嵌入的DDE链接。
同样，这种方法在[规避反病毒检测](https://www.virustotal.com/#/file/0f8bc14e32928ec882948977b25483a993fb8b4d9c8bc542aa13ecfbde785837/detection)方面也取得了不俗的效果。
需要注意的是，一旦载荷执行，基于行为检测的反病毒软件应该会检测到恶意行为，因此可以说，这些检测结果表明，我们可以绕过反病毒软件的静态扫描。
**3.3 副作用**
使用fldSimple时会存在一些副作用。如果你决定使用DDEAUTO方法，同时也用到了w:dirty="true"，那么当终端用户想执行DDE应用程序时，他们会看到3个提示对话框（我不明白为什么是3个对话框，而不是2个对话框）。与普通方法相对比，这种情况下用户需要多次点击对话框中的“yes”按钮。
有趣的是，使用fldSimple以及 **c:\windows\system32\cmd.exe /k powershell**
来启动powershell时，powershell会在cmd窗口内部运行，你可以直接进入powershell控制台。这种情况与在已有的cmd实例中运行powershell一致，但与常见的DDE场景不同（普通DDE会同时生成cmd以及powershell）。与此同时，你会得到一个无法加载PSRedline模块的提示信息：“Cannot
load PSReadline module. Console is running without
PSReadline”，如下图所示。感兴趣的读者可以进一步挖掘这个信息。
**3.4 无DDE**
现在最大的挑战来了，在文档中我们有没有可能完全不包含DDE或者DDEAUTO特征？答案是肯定的，并且这一点对社会工程学方法大有好处。MSWord考虑得非常周到，会提示用户禁用受保护的试图（protected
view）以便查看文档内容。
为了完成这个任务，我们可以使用另一个传统（legacy）功能。在历史上，微软曾将Word设计为可以处理与任何文本有关的一站式应用程序，其中就包含创建Web页面功能。Word曾经是编写HTML的一种IDE工具，虽然生成的HTML不是特别优雅，但也能正常工作。当时引入的一个特性就是frames（框架）以及framesets（框架集）。在Word中，我们可以使用frames来将不同的HTML/Text页面加载到frames中，并且HTML会被自动解析，转化为Word格式的内容。在Word
2016或者更早版本的Word中，程序界面中已经不再包含这种功能，然而程序底层依然包含相应的解析例程。这意味着如果我们创建包含嵌入式frames的文档，Word仍然会自动处理这些数据。
想要插入frameset的话，我们需要编辑纯净版的.docx文档。首先，解压缩这个文档，然后打开其中的webSettings.xml文件。接下来我们可以修改并添加新的XML元素frameset：
这段内容应该插入到已有的元素内部，紧靠在元素之前。接下来，我们需要添加rId1关系（Relationship），将我们的文档链接到外部文档。我们需要将名为webSettings.xml.rels的新文件添加到word/_rels/目录中，以完成这个任务。
该文件的内容如下所示：
我们链接的外部文档为包含DDE攻击载荷的.docx文件。这个例子中，我们会从地址为x.x.x.x的HTTP服务器加载simple.docx文件。首先，我们需要保存经过修改并已添加新内容的文件，然后更新整个.docx压缩包。现在，将经过修改的文档发给目标用户，等待用户打开。由于用户下载的文档包含MOTW（mark
of the
web）标记，因此该文档会在受保护视图状态下打开。然而，这种情况下，Word会检测到需要请求外部内容才能正确显示这个文件，因此会向用户提示：“链接的文件及其他功能已被禁用。要恢复此功能，你必须编辑此文件”。需要注意的是，这是来自Word的默认消息，我们没法操控这一点。
一旦用户禁用受保护的试图，Word会下载包含DDE攻击载荷的外部文档。这个文档不包含MOTW标记，会由Word负责解析，最终会触发正常的DDE消息。这种方法非常有用，可以夹带我们的DDE攻击载荷，而不会被反病毒软件扫描到。
**四、应对措施**
最好的应对措施应该是禁用自动更新链接功能，不要完全依赖反病毒软件。Will
Dormannn（[@wdormann](https://twitter.com/wdormann)）提出了一种方法，可以更改已安装的Office应用程序配置，使Office忽略链接并禁用链接的自动更新，详情请参考[此处链接](https://gist.github.com/wdormann/732bb88d9b5dd5a66c9f1e1498f31a1b)。
我非常乐意尝试另一种防御机制，那就是在Windows 10秋季创造者更新中引入的[Windows Defender Exploit
Guard](https://docs.microsoft.com/en-us/windows/threat-protection/windows-defender-exploit-guard/attack-surface-reduction-exploit-guard)功能。这个功能可以阻止Word、Excel、Powerpoint生成子进程。这样不仅能阻止子进程创建，也能阻止DDE攻击以及嵌入式OLE攻击等。需要注意的是，Matt
Nelson（[@enima0x3Attack](https://twitter.com/enigma0x3/)）已经证实，Outlook以及Access都不会添加到ASR（[Attack
Surface
Reduction](https://twitter.com/enigma0x3/status/922167827817287680)）的保护范围中。
前面提到过，我已经发起一个pull请求，希望更新oletools工具。目前，基于DDE或者DDEAUTO关键词的YARA规则大部分应该都能正常工作。如果你还坚持搜索类似powershell之类的关键词，我想你需要与时俱进，改变思维，才能跟上这个时代的节奏。