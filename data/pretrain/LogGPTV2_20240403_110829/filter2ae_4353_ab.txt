                if (log.isDebugEnabled()) {
                    log.debug(Messages.getMessage("RESTORE_DATA_FROM_RESOURCE_URI_INFO", key, dataString));
                }
                int dataStart = matcher.end();
                dataString = key.substring(dataStart);
                byte[] objectArray = null;
                try {
                    byte[] dataArray = dataString.getBytes("ISO-8859-1");
                    objectArray = this.decrypt(dataArray);
                } catch (UnsupportedEncodingException var12) {
                    ;
                }
                if ("B".equals(matcher.group(1))) {
                    data = objectArray;
                } else {
                    try {
                        ObjectInputStream in = new ObjectInputStream(new ByteArrayInputStream(objectArray));
                        data = in.readObject();
                    } catch (StreamCorruptedException var9) {
                        log.error(Messages.getMessage("STREAM_CORRUPTED_ERROR"), var9);
                    } catch (IOException var10) {
                        log.error(Messages.getMessage("DESERIALIZE_DATA_INPUT_ERROR"), var10);
                    } catch (ClassNotFoundException var11) {
                        log.error(Messages.getMessage("DATA_CLASS_NOT_FOUND_ERROR"), var11);
                    }
                }
            }
            return data;
        }
这段代码很简单，就是将传递过来的key进行解密之后的数据传入了readObject方法从而导致RCE。那么问题是这个key是如何输入的呢？这就是涉及到richfaces这个库了。这个库会去处理在URL中以/a4j/开头的路径，当你请求
之后，中间件会将/a4j/xxxx 传递给richfaces这个库去处理后面的数据。具体代码为  
继续构造
    /a4j/g/3_3_3.Finalorg/richfaces/renderkit/html/scripts/skinning.js/DATA/xxxx
这种格式的URL之后richfaces会将/a4j/a/3_3_3.Final先去除，这是个根据版本信息所产生的标识，然后找到org/richfaces/renderkit/html/scripts/skinning.js/此资源之后将后面的参数传入了getResourceDataForKey当中，然后/DATA/之后的数据经过一个decrypt方法之后就进入了readObject方法。其具体调用链如下:  
明白漏洞流程之后就可以直接通过ysoserial来进行RCE了。  
richfaces开发团队在richfaces3.3.4.Final对此漏洞进行了修复，修复方案是在反序列化时检测了类是否在白名单内。白名单文件在org.ajax4jsf.resource.resource-serialization.properties
大概看了一下似乎默认的这些类都无法利用起来。
## CVE-2013-3827
这个path traversal是在Mojarra2.0-2.1.18之间都存在，由于seam Framework 2.3.1
Final中Mojarra版本为2.1.7，所以存在此漏洞。但是seam Framework 2.2.1
Final使用的是Mojarra1.2.12所以不存在此漏洞。在分析漏洞成因之前需要了解一下seam框架的处理流程，通常在web.xml中能看到如下配置
            seam Filter
            org.jboss.seam.servlet.seamFilter
            seam Filter
            /*
            seam Resource Servlet
            org.jboss.seam.servlet.seamResourceServlet
            seam Resource Servlet
            /resource/*
            Faces Servlet
            javax.faces.webapp.FacesServlet
            1
            Faces Servlet
            *.seam
当一个请求为  时，首先要经过 seam
Filter的判断，只有在seam框架内部的filter处理完成之后才会将对应的请求发送给Mojarra处理。下面这张调用栈的图就很好的展示了整个流程  
漏洞的触发点是在Mojarra对资源文件请求的处理过程，其中`com.sun.faces.application.resource.WebappResourceHelper.findResource`是处理资源路径的关键方法，在此方法中完成了路径的拼接。
    if (library != null) {
                basePath = library.getPath() + '/' + resourceName;
            } else {
                if (localePrefix == null) {
                    basePath = getBaseResourcePath() + '/' + resourceName;
                } else {
                    basePath = getBaseResourcePath()
                               + '/'
                               + localePrefix
                               + '/'
                               + resourceName;
                }
            }
我们传递的resourceName通过下面的代码所获取到
    String resourceId = normalizeResourceRequest(context);
            // handleResourceRequest called for a non-resource request,
            // bail out.
            if (resourceId == null) {
                return;
            }
            ExternalContext extContext = context.getExternalContext();
            if (isExcluded(resourceId)) {
                extContext.setResponseStatus(HttpServletResponse.SC_NOT_FOUND);
                return;
            }
            assert (null != resourceId);
            assert (resourceId.startsWith(RESOURCE_IDENTIFIER));
            Resource resource = null;
            String resourceName = null;
            String libraryName = null;
            if (ResourceHandler.RESOURCE_IDENTIFIER.length() 
那么`resourceName`就为`../WEB-INF/web.xml`了。再通过后面`findResource`方法的拼接最后`basepath`的值就为`/resources/../WEB-INF/web.xml`因而成功读取到web.xml里面的数据了。  
除此之外还有另外一种利用方式，其实过程也大同小异。就是利用`libraryName`
来进行跳目录，其赋值方式为`libraryName=context.getExternalContext().getRequestParameterMap().get("ln");`将请求的URL改为
`http://target.com/javax.faces.resource/javax.faces.resource./WEB-INF/web.xml.seam?ln=..` 然后basepath通过`basePath = library.getPath() + '/' +
resourceName;`赋值为`/resources/../WEB-INF/web.xml`也一样读取到了web.xml的内容了。  
其实在第二种利用方式中，程序本身检查通过`libraryNameContainsForbiddenSequence`检测了`libraryName`的值，但是黑名单字符中不包含`..`
官方在后面的修复方案就是将`..`加入黑名单并且同时检查了`resourceName`和`libraryName`是否合法。  
## 参考
[cve-2010-1871-jboss-seam-framework](http://blog.o0o.nu/2010/07/cve-2010-1871-jboss-seam-framework.html)
[HITCON 2016 WEB WRITEUP](http://www.melodia.pw/?p=743)
[My-CTF-Web-Challenges](https://github.com/orangetw/My-CTF-Web-Challenges/)
[web500-hitconctf-2016-and-exploit-cve-2013-2165](http://vnprogramming.com/index.php/2016/10/10/web500-hitconctf-2016-and-exploit-cve-2013-2165/)
[path-traversal-defects-oracles-jsf2-implementation](https://www.synopsys.com/blogs/software-security/path-traversal-defects-oracles-jsf2-implementation/)