}
fmt.Printf("%d:%s\n",i,url)
res,err:=http.Get(url)❸
iferr!=nil{
return
}
buf,err:=ioutil.ReadAll(res.Body)❹
iferr!=nil{
return
}
deferres.Body.Close()
r,err:=zip.NewReader(bytes.NewReader(buf)❺,int64(len(buf)))
iferr!=nil{
return
}
cp,ap,err:=metadata.NewProperties(r)❻
iferr!=nil{
return
}
log.Printf(
"%25s%25s-%s%s\n",
cp.Creator,
cp.LastModifiedBy,
ap.Application,
ap.GetMajorVersion())
}
funcmain(){
iflen(os.Args)!=3{
log.Fatalln("Missingrequiredargument.Usage:main.godomainext")
}
domain:=os.Args[1]
filetype:=os.Args[2]
❼q:=fmt.Sprintf(
"site:%s&&filetype:%s&&instreamset:(urltitle):%s",
domain,
filetype,
filetype)
❽search:=fmt.Sprintf("http://www.bing.com/search?q=%s",
url.QueryEscape(q))
doc,err:=goquery.NewDocument(search)❾
iferr!=nil{
log.Panicln(err)
}
s:="htmlbodydiv#b_contentol#b_resultsli.b_algodiv.b_titleh2"
❿doc.Find(s).Each(handler)
}
Listing3-22:ScrapingBingresultsandparsingdocumentmetadata(/ch-3/bing-
metadata/client/main.go)
Youcreatetwofunctions.Thefirst,handler(),acceptsa
goquery.Selectioninstance❶(inthiscase,itwillbepopulated
withananchorHTMLelement)andfindsandextractsthehref
attribute❷.Thisattributecontainsadirectlinktothe
documentreturnedfromtheBingsearch.UsingthatURL,the
codethenissuesaGETrequesttoretrievethedocument❸.
Assumingnoerrorsoccur,youthenreadtheresponsebody
❹,leveragingittocreateazip.Reader❺.Recallthatthe
functionyoucreatedearlierinyourmetadatapackage,
NewProperties(),expectsazip.Reader.Nowthatyouhavethe
appropriatedatatype,passittothatfunction❻,and
propertiesarepopulatedfromthefileandprintedtoyour
screen.
Themain()functionbootstrapsandcontrolsthewhole
process;youpassitthedomainandfiletypeascommandline
arguments.Thefunctionthenusesthisinputdatatobuildthe
Bingquerywiththeappropriatefilters❼.Thefilterstringis
encodedandusedtobuildthefullBingsearchURL❽.The
searchrequestissentusingthegoquery.NewDocument()function,
whichimplicitlymakesanHTTPGETrequestandreturnsa
goquery-friendlyrepresentationoftheHTMLresponse
document❾.Thisdocumentcanbeinspectedwithgoquery.
Finally,usetheHTMLelementselectorstringyouidentified
withyourbrowserdevelopertoolstofindanditerateover
matchingHTMLelements❿.Foreachmatchingelement,a
callismadetoyourhandler()function.
Asamplerunofthecodeproducesoutputsimilartothe
following:
$gorunmain.gonytimes.comdocx
0:
http://graphics8.nytimes.com/packages/pdf/2012NAIHSAnnualHIVReport041713.docx
2020/12/2111:53:50JonathanV.IraluDanFrosch-MicrosoftMacintosh
Word2010
1:http://www.nytimes.com/packages/pdf/business/Announcement.docx
2020/12/2111:53:51agouseragouser-MicrosoftOfficeOutlook2007
2:http://www.nytimes.com/packages/pdf/business/DOCXIndictment.docx
2020/12/2111:53:51AGOGonder,Nanci-MicrosoftOfficeWord
2007
3:http://www.nytimes.com/packages/pdf/business/BrownIndictment.docx
2020/12/2111:53:51AGOGonder,Nanci-MicrosoftOfficeWord
2007
4:http://graphics8.nytimes.com/packages/pdf/health/Introduction.docx
2020/12/2111:53:51Oberg,AmandaMKarenBarrow-Microsoft
MacintoshWord2010
Youcannowsearchforandextractdocumentmetadatafor
allOpenXMLfileswhiletargetingaspecificdomain.I
encourageyoutoexpandonthisexampletoincludelogicto
navigatemultipageBingsearchresults,toincludeotherfile
typesbeyondOpenXML,andtoenhancethecodeto
concurrentlydownloadtheidentifiedfiles.
SUMMARY
ThischapterintroducedtoyoufundamentalHTTPconceptsin
Go,whichyouusedtocreateusabletoolsthatinteractedwith
remoteAPIs,aswellastoscrapearbitraryHTMLdata.Inthe
nextchapter,you’llcontinuewiththeHTTPthemebylearning
tocreateserversratherthanclients.
4
HTTPSERVERS,ROUTING,AND
MIDDLEWARE
IfyouknowhowtowriteHTTPserversfromscratch,youcan
createcustomizedlogicforsocialengineering,command-and-
control(C2)transports,orAPIsandfrontendsforyourown
tools,amongotherthings.Luckily,Gohasabrilliantstandard
package—net/http—forbuildingHTTPservers;it’sreallyall
youneedtoeffectivelywritenotonlysimpleservers,butalso
complex,full-featuredwebapplications.
Inadditiontothestandardpackage,youcanleveragethird-
partypackagestospeedupdevelopmentandremovesomeof
thetediousprocesses,suchaspatternmatching.These
packageswillassistyouwithrouting,buildingmiddleware,
validatingrequests,andothertasks.
Inthischapter,you’llfirstexploremanyofthetechniques
neededtobuildHTTPserversusingsimpleapplications.Then
you’lldeploythesetechniquestocreatetwosocialengineering
applications—acredential-harvestingserverandakeylogging
server—andmultiplexC2channels.
HTTPSERVERBASICS
Inthissection,you’llexplorethenet/httppackageanduseful
third-partypackagesbybuildingsimpleservers,routers,and
middleware.We’llexpandonthesebasicstocovermore
nefariousexampleslaterinthechapter.
BuildingaSimpleServer
ThecodeinListing4-1startsaserverthathandlesrequeststo
asinglepath.(Allthecodelistingsattherootlocationof/
existundertheprovidedgithubrepo
https://github.com/blackhat-go/bhg/.)Theservershouldlocate
thenameURLparametercontainingauser’snameandrespond
withacustomizedgreeting.
packagemain
import(
"fmt"
"net/http"
)
funchello(whttp.ResponseWriter,r*http.Request){
fmt.Fprintf(w,"Hello%s\n",r.URL.Query().Get("name"))
}
funcmain(){
❶http.HandleFunc("/hello",hello)
❷http.ListenAndServe(":8000",nil)
}
Listing4-1:AHelloWorldserver(/ch-4/hello_world/main.go)
Thissimpleexampleexposesaresourceat/hello.The
resourcegrabstheparameterandechoesitsvaluebacktothe
client.Withinthemain()function,http.HandleFunc()❶takestwo
arguments:astring,whichisaURLpathpatternyou’re
instructingyourservertolookfor,andafunction,whichwill
actuallyhandletherequest.Youcouldprovidethefunction
definitionasananonymousinlinefunction,ifyouwant.Inthis
example,youpassinthefunctionnamedhello()thatyou
definedearlier.
Thehello()functionhandlesrequestsandreturnsahello
messagetotheclient.Ittakestwoargumentsitself.Thefirstis
http.ResponseWriter,whichisusedtowriteresponsestothe
request.Thesecondargumentisapointertohttp.Request,which
willallowyoutoreadinformationfromtheincomingrequest.
Notethatyouaren’tcallingyourhello()functionfrommain().
You’resimplytellingyourHTTPserverthatanyrequestsfor
/helloshouldbehandledbyafunctionnamedhello().
Underthecovers,whatdoeshttp.HandleFunc()actuallydo?
TheGodocumentationwilltellyouthatitplacesthehandler
ontheDefaultServerMux.AServerMuxisshortforaserver
multiplexer,whichisjustafancywaytosaythatthe
underlyingcodecanhandlemultipleHTTPrequestsfor
patternsandfunctions.Itdoesthisusinggoroutines,withone
goroutineperincomingrequest.Importingthenet/httppackage
createsaServerMuxandattachesittothatpackage’snamespace;
thisistheDefaultServerMux.
Thenextlineisacalltohttp.ListenAndServe()❷,whichtakesa
stringandanhttp.Handlerasarguments.ThisstartsanHTTP
serverbyusingthefirstargumentastheaddress.Inthiscase,
that’s:8000,whichmeanstheservershouldlistenonport8000
acrossallinterfaces.Forthesecondargument,thehttp.Handler,
youpassinnil.Asaresult,thepackageusesDefaultServerMuxas
theunderlyinghandler.Soon,you’llbeimplementingyour
ownhttp.Handlerandwillpassthatin,butfornowyou’lljustuse
thedefault.Youcouldalsousehttp.ListenAndServeTLS(),which
willstartaserverusingHTTPSandTLS,asthename
describes,butrequiresadditionalparameters.
Implementingthehttp.Handlerinterfacerequiresasingle
method:ServeHTTP(http.ResponseWriter,*http.Request).Thisisgreat
becauseitsimplifiesthecreationofyourowncustomHTTP
servers.You’llfindnumerousthird-partyimplementationsthat
extendthenet/httpfunctionalitytoaddfeaturessuchas
middleware,authentication,responseencoding,andmore.
Youcantestthisserverbyusingcurl:
$curl-ihttp://localhost:8000/hello?name=alice
HTTP/1.1200OK
Date:Sun,12Jan202001:18:26GMT
Content-Length:12
Content-Type:text/plain;charset=utf-8
Helloalice
Excellent!TheserveryoubuiltreadsthenameURL
parameterandreplieswithagreeting.
BuildingaSimpleRouter
Nextyou’llbuildasimplerouter,showninListing4-2,that
demonstrateshowtodynamicallyhandleinboundrequestsby
inspectingtheURLpath.DependingonwhethertheURL
containsthepath/a,/b,or/c,you’llprinteitherthemessage
Executing/a,Executing/b,orExecuting/c.You’llprinta404NotFound
errorforeverythingelse.
packagemain
import(
"fmt"
"net/http"
)
❶typerouterstruct{
}
❷func(r*router)ServeHTTP(whttp.ResponseWriter,req*http.Request){
❸switchreq.URL.Path{
case"/a":
fmt.Fprint(w,"Executing/a")
case"/b":
fmt.Fprint(w,"Executing/b")
case"/c":
fmt.Fprint(w,"Executing/c")
default:
http.Error(w,"404NotFound",404)
}
}
funcmain(){
varrrouter
❹http.ListenAndServe(":8000",&r)
}
Listing4-2:Asimplerouter(/ch-4/simple_router/main.go)
First,youdefineanewtypenamedrouterwithoutanyfields
❶.You’llusethistoimplementthehttp.Handlerinterface.Todo
this,youmustdefinetheServeHTTP()method❷.Themethod
usesaswitchstatementontherequest’sURLpath❸,executing
differentlogicdependingonthepath.Itusesadefault404Not
Foundresponseaction.Inmain(),youcreateanewrouterandpass
itsrespectivepointertohttp.ListenAndServe()❹.
Let’stakethisforaspinintheoleterminal:
$curlhttp://localhost:8000/a
Executing/a
$curlhttp://localhost:8000/d
404NotFound
Everythingworksasexpected;theprogramreturnsthe
messageExecuting/aforaURLthatcontainsthe/apath,andit
returnsa404responseonapaththatdoesn’texist.Thisisa
trivialexample.Thethird-partyroutersthatyou’llusewill
havemuchmorecomplexlogic,butthisshouldgiveyoua
basicideaofhowtheywork.
BuildingSimpleMiddleware
Nowlet’sbuildmiddleware,whichisasortofwrapperthat
willexecuteonallincomingrequestsregardlessofthe
destinationfunction.IntheexampleinListing4-3,you’ll
createaloggerthatdisplaystherequest’sprocessingstartand
stoptime.
Packagemain
import(
"fmt"
"log"
"net/http"
"time"
)
❶typeloggerstruct{
Innerhttp.Handler
}
❷func(l*logger)ServeHTTP(whttp.ResponseWriter,r*http.Request){
log.Println("start")
❸l.Inner.ServeHTTP(w,r)
log.Println("finish")
}
funchello(whttp.ResponseWriter,r*http.Request){
fmt.Fprint(w,"Hello\n")
}
funcmain(){
❹f:=http.HandlerFunc(hello)
❺l:=logger{Inner:f}
❻http.ListenAndServe(":8000",&l)
}
Listing4-3:Simplemiddleware(/ch-4/simple_middleware/main.go)
Whatyou’reessentiallydoingiscreatinganouterhandler
that,oneveryrequest,logssomeinformationontheserverand
callsyourhello()function.Youwrapthislogginglogicaround
yourfunction.
Aswiththeroutingexample,youdefineanewtypenamed
logger,butthistimeyouhaveafield,Inner,whichisanhttp.Handler
itself❶.InyourServeHTTP()definition❷,youuselog()toprint
thestartandfinishtimesoftherequest,callingtheinner
handler’sServeHTTP()methodinbetween❸.Totheclient,the
requestwillfinishinsidetheinnerhandler.Insidemain(),you
usehttp.HandlerFunc()tocreateanhttp.Handleroutofafunction❹.
Youcreatethelogger,settingInnertoyournewlycreatedhandler
❺.Finally,youstarttheserverbyusingapointertoalogger
instance❻.
Runningthisandissuingarequestoutputstwomessages
containingthestartandfinishtimesoftherequest:
$gobuild-osimple_middleware
$./simple_middleware
2020/01/1606:23:14start
2020/01/1606:23:14finish
Inthefollowingsections,we’lldigdeeperintomiddleware
androutingandusesomeofourfavoritethird-partypackages,
whichletyoucreatemoredynamicroutesandexecute
middlewareinsideachain.We’llalsodiscusssomeusecases
formiddlewarethatmoveintomorecomplexscenarios.
Routingwiththegorilla/muxPackage
AsshowninListing4-2,youcanuseroutingtomatcha
request’spathtoafunction.Butyoucanalsouseittomatch
otherproperties—suchastheHTTPverborhostheader—toa
function.Severalthird-partyroutersareavailableintheGo
ecosystem.Here,we’llintroduceyoutooneofthem:the
gorilla/muxpackage.Butjustaswitheverything,weencourage
youtoexpandyourknowledgebyresearchingadditional
packagesasyouencounterthem.
Thegorilla/muxpackageisamature,third-partyrouting
packagethatallowsyoutoroutebasedonbothsimpleand
complexpatterns.Itincludesregularexpressions,parameter
matching,verbmatching,andsubrouting,amongother
features.
Let’sgooverafewexamplesofhowyoumightusethe
router.Thereisnoneedtorunthese,asyou’llbeusingthem
inarealprogramsoon,butpleasefeelfreetoplayaroundand
experiment.
Beforeyoucanusegorilla/mux,youmustgogetit:
$gogetgithub.com/gorilla/mux
Now,youcanstartrouting.Createyourrouterbyusing
mux.NewRouter():
r:=mux.NewRouter()
Thereturnedtypeimplementshttp.Handlerbuthasahostof
otherassociatedmethodsaswell.Theoneyou’llusemost
oftenisHandleFunc().Forexample,ifyouwantedtodefinea
newroutetohandleGETrequeststothepattern/foo,youcould
usethis:
r.HandleFunc("/foo",func(whttp.ResponseWriter,req*http.Request){
fmt.Fprint(w,"hifoo")
}).Methods("GET")❶
Now,becauseofthecalltoMethods()❶,onlyGETrequests
willmatchthisroute.Allothermethodswillreturna404
response.Youcanchainotherqualifiersontopofthis,suchas
Host(string),whichmatchesaparticularhostheadervalue.For
example,thefollowingwillmatchonlyrequestswhosehost
headerissettowww.foo.com:
r.HandleFunc("/foo",func(whttp.ResponseWriter,req*http.Request){
fmt.Fprint(w,"hifoo")
}).Methods("GET").Host("www.foo.com")
Sometimesit’shelpfultomatchandpassinparameters
withintherequestpath(forexample,whenimplementinga
RESTfulAPI).Thisissimplewithgorilla/mux.Thefollowing
willprintoutanythingfollowing/users/intherequest’spath:
r.HandleFunc("/users/{user}",func(whttp.ResponseWriter,req*http.Request){
user:=mux.Vars(req)["user"]
fmt.Fprintf(w,"hi%s\n",user)
}).Methods("GET")
}).Methods("GET")
Inthepathdefinition,youusebracestodefinearequest
parameter.Thinkofthisasanamedplaceholder.Then,inside
thehandlerfunction,youcallmux.Vars(),passingittherequest
object,whichreturnsamap[string]string—amapofrequest
parameternamestotheirrespectivevalues.Youprovidethe
namedplaceholderuserasthekey.So,arequestto/users/bob
shouldproduceagreetingforBob:
$curlhttp://localhost:8000/users/bob
hibob
Youcantakethisastepfurtherandusearegular
expressiontoqualifythepatternspassed.Forexample,you
canspecifythattheuserparametermustbelowercaseletters:
r.HandleFunc("/users/{user:[a-z]+}",func(whttp.ResponseWriter,req
*http.Request){
user:=mux.Vars(req)["user"]
fmt.Fprintf(w,"hi%s\n",user)
}).Methods("GET")
Anyrequeststhatdon’tmatchthispatternwillnowreturna
404response:
$curl-ihttp://localhost:8000/users/bob1