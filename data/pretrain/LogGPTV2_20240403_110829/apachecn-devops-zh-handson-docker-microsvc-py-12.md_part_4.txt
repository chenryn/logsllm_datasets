虽然主导架构师可以帮助一些协调，但是架构角色应该专注于长期目标，而不是短期发布。允许团队自我协调的一个好工具是在会议中通知其他团队发布。
# 每周发布会中的计划
当发布过程是新的并且从整体迁移仍在进行中时，提供对每个团队正在做的事情的洞察是一个好主意。由每个团队的代表参加的每周发布会可能是一种传播关于其他团队正在发生的事情的知识的极好方式。
发布会的目标应该如下:
*   未来 7 天的计划发布时间和大致时间；例如我们计划在周三发布新版本的用户后端。
*   你应该为任何重要的新特性提供一个提示，尤其是如果其他团队可以使用它的话。例如，如果新版本改进了认证，请确保您将您的团队重定向到新的应用编程接口，以便他们也可以获得这些改进。
*   说明任何拦截器。例如，我们不能发布这个版本，直到思想后端发布他们的带有特性 a 的版本。
*   如果有关键的维护或任何可能影响发布的更改，请升起任何标志。比如周四上午，我们需要做数据库维护，所以请 12 点之前不要发布任何东西。工作完成后，我们将发送电子邮件。
*   回顾前一周发生的发布问题。我们稍后会更详细地讨论这个问题。
这类似于许多敏捷实践中常见的站立会议，比如 SCRUM，但是集中在发布上。为了做到这一点，我们需要提前指定发布的时间。
考虑到微服务发布的异步特性，并且随着持续集成实践的实现和这一过程的加速，将会有大量的例行发布不会提前那么多时间进行规划。这很好，意味着发布过程正在完善。
当涉及到风险较高的发布时，试着提前一点计划，并利用发布会与其他团队进行有效的沟通。会议是保持对话开放的工具。
随着时间的推移，随着持续集成实践变得越来越成熟，发布变得越来越快，每周发布会将慢慢变得越来越不重要，以至于可能不需要再做了——至少不那么定期。这是反思持续改进实践的一部分，也是通过识别发布问题来实现的。
# 反思发行问题
不是每个版本都会非常好。有些会因为工具或基础设施的问题而失败，或者可能是因为过程中有一个容易犯的错误。事实是，有些版本会有问题。不幸的是，避免这些情况是不可能的。
为了随着时间的推移减少和最小化发布问题，每次发现问题时，都需要记录下来，并在每周发布会或同等论坛上提出。
有些问题会很小，只需要一点额外的工作就能成功发布；例如，一个错误的配置避免了新版本在被修复之前被启动，或者一个协调问题，其中一个服务在其依赖之前被部署。
其他问题会更大，甚至可能因为问题导致停机。在这里，回滚将是有用的，这样我们就可以快速返回到一个已知的状态并重新计划。
在任何情况下，它们都应该被适当地记录下来，即使这只是简短的，然后被共享，以便过程可以被细化。分析哪里出了问题是持续改进发布的关键，这样发布会更快、更简单。
对这些问题要开诚布公。如果你想发现每一个问题并快速评估解决方案，创造一种公开讨论和承认问题的文化是很重要的。
Capturing problems is not, and should never be, about assigning blame. It's the organization's responsibility to detect and correct problems.
If this happens, not only will the environment become less attractive to work in, but problems will be hidden by teams so that they don't get blamed.
Unaddressed problems tend to be multiplicative, so reliability will suffer greatly.
能够平静地发布对于快速部署和提高速度至关重要。当我们处理这类问题时，只需要简单的文档，因为它们通常是温和的，在最坏的情况下，会将发布延迟一两天。
对于更大的问题，当外部服务中断时，最好有一个更正式的流程来确保问题得到正确解决。
我们可以改进流程的另一种方法是正确理解实时系统中中断服务的问题的原因。最有效的工具是事后分析。
# 召开验尸会议
不限于发布，有时会有大事件中断服务，需要重大工作才能修复。在这些紧急情况下，首要目标是尽快恢复服务。
服务再次稳定后，为了从这次经历中吸取教训并避免再次发生，参与事件的每个人都应该参加事后分析会议。事后分析会议的目的是从紧急情况下吸取的经验教训中创建一系列后续任务。
要记录这一点，您需要创建一个模板。这将在验尸会议上填写。模板应该捕获以下信息:
*   **检测到什么问题？**如果不明显，包括如何检测到的；例如，网站关闭并返回 500 个错误。这表明误差增加了。
*   **什么时候开始，什么时候结束？**事件的时间线；例如，星期四下午 3 点到 5 点。
*   **谁参与了事件的补救？**要么检测问题，要么修复问题。这有助于我们收集发生的事情的信息。
*   **为什么会失败？**去找根本原因和导致这个的事件链；例如，网站关闭是因为应用无法连接到数据库。由于硬盘已满，数据库没有响应。硬盘已满，因为本地日志填满了磁盘。
*   **怎么固定的？**已采取措施解决事件；例如，超过一周的日志被删除。
*   **该事件应跟进哪些行动？**应补救或修复不同问题的措施。理想情况下，它们应该包括谁将执行该操作；例如，不应该存储本地日志，应该将它们发送到集中式日志。如果可用空间不足 80%，应监控硬盘空间量并发出警报。
其中一些要素可以在紧急情况发生后立即填写，例如谁参与了。然而，最好在事后一至三天安排一次事后会议，让每个人都能消化和处理这些数据。根本原因可能与我们最初的想法不同，花一些时间思考发生了什么有助于我们提出更好的解决方案。
As we discussed in the *Reflecting on release problems* section, be sure to encourage open and candid discussion when you're dealing with service interruption incidents.
Post-mortem meetings are not there to blame anyone, but to improve the service and reduce risks when you're working as a team. 
后续行动应在会议上决定，并据此确定优先次序。
Although detecting the root cause is very important, note that actions should be taken against other causes. Even if the root cause is one, there are also other preventive actions that can minimize the effect it has if it happens again.
事后会议产生的行动通常是高优先级的，应该尽快完成。
# 摘要
在本章中，我们研究了跨团队协作的不同方面，以便我们能够成功地管理运行微服务架构的组织。
我们首先讨论了保持全球视野和零件之间的协调是多么好。我们谈到有一个明确命名的首席架构师来监督系统，并有一个高级视图，允许他们确保团队不会相互冲突。
我们描述了康威定律以及通信结构是如何最终形成软件结构的，因此对软件所做的任何更改都应该以某种方式反映在组织中，反之亦然。然后，我们学习了如何划分责任领域，并提供了一些基于不同组织的可能划分的示例。
接下来，我们介绍了技术债务如何减缓正在进行的开发过程，以及引入一种持续解决技术债务的心态是多么重要，以避免降低内部团队和使用技术债务的客户的体验。
最后，我们解决了发布可能导致的一些问题，包括团队之间的充分协调，特别是在使用 GitOps 的早期阶段，以及在发布失败或服务中断时进行回顾性分析。
# 问题
1.  为什么领先的架构师对微服务架构系统来说很方便？
2.  什么是康威定律？
3.  为什么会引入技术债？
4.  为什么创造一种我们可以持续工作以减少技术债务的文化很重要？
5.  为什么记录发布中的问题并与每个团队分享这些问题很重要？
6.  验尸会议的主要目的是什么？
# 进一步阅读
要了解更多关于架构师角色的信息，请阅读*软件架构师手册*([https://www . packtpub . com/application-development/Software-architects-Handbook](https://www.packtpub.com/application-development/software-architects-handbook))，其中包含了关于软技能和架构演进的章节。你可以在*新工程游戏*([https://www.packtpub.com/data/the-new-engineering-game](https://www.packtpub.com/data/the-new-engineering-game)中阅读更多关于康威定律和构建数字企业的内容。*