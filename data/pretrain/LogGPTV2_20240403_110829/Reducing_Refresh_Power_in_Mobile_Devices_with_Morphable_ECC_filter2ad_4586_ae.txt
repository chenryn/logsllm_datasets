milc
calculix
gcc
cactus
soplex
dealII
bzip2
astar
gob m k
perl
gro m acs
sjeng
h264ref
na m d
h m m er
povray
tonto wrf
ga m ess
Fig. 14. The fraction of execution time for which ECC-Downgrade remains disabled for each benchmark (using SMD with treshold of MPKC=2)
was accessed (and hence went through ECC-Downgrade), then
we can do ECC-Upgrade for only those regions of memory. We
propose Memory Downgrade Tracking (MDT) to make ECC-
Upgrade more efﬁcient. MDT is implemented with a table
where each entry is a single bit and corresponds to a memory
region, as shown in Figure 15.
Region_ID
1
0
1 denotes some lines in region
underwent ECC−Downgrade
0 denotes NO lines in region
underwent ECC−Downgrade
Fig. 15. Memory Downgrade Tracking (Region ID is obtained from top few
MSB bits of line address).
When a line undergoes ECC-Downgrade, the MDT entry
corresponding to this region gets set. When the memory
undergoes ECC-Upgrade, only the lines, for which the cor-
responding memory region is set to 1, goes through ECC-
Upgrade (otherwise the lines continue to retain their ECC-
Upgrade status from the past idle period). The MDT table
is reset after the ECC-Upgrade process ﬁnishes. We evaluate
a default MDT conﬁguration that has 1K entries (128 bytes
storage), so each MDT entry tracks a memory region of 1MB,
given that our memory size is 1GB. Note that 128 byte storage
is not a huge overhead, and hence can be put in the memory
controller, since memory controller is the center of making
ECC-upgrade and ECC-downgrade operations.
In Section IV we provide the memory footprint of all the
benchmarks we use in our study. On average the memory
footprint of all the benchmarks is 128MB, which is 8x smaller
than the 1GB memory system. Although memory access may
not be continuous throughout the physical memory space, the
memory region that a program would use is still much smaller
than the entire memory. Figure 11 compares the memory
capacity tracked by MDT, if it has 1K entries. Note that Y-axis
is in log scale. With MDT, we can reduce the size of memory
that undergoes ECC-Upgrade by almost 8x, reducing the time
to perform ECC-Upgrade from 400ms to 50ms. Moreover, the
energy spent in the encoder is also 8x lower as a result of
reduced number of ECC coding. Thus, a hardware table of
128 bytes is sufﬁcient for MDT.
B. Efﬁciently Handling Periodic Processes in Idle Mode
ECC-Downgrade avoids the long latency overheads of
decode operations for strong ECC. However, it is not necessary
to do ECC-Downgrade for all the applications. For example,
even when the mobile device is idle, it might still perform
periodic activities such as bluethooth check, network inerrupts
etc. Fortunately, such activities are short and have a very small
footprint. Furthermore, a small slowdown may be acceptable
for such non performance oriented workloads. For our pro-
posed MECC implementation though, such events can lead
to frequent transitions of ECC-Upgrade and ECC-Downgrade,
which may ruin the beneﬁts from MECC. For such short, non-
memory intensive applications, we can tune MECC to avoid
ECC-Downgrade. As memory performance is not critical for
such tasks, MECC can still use a refresh rate of 1 second even
in active mode, and keep the entire memory protected with
ECC-6.
We propose to extend MECC to avoid ECC-Downgrade
during active mode, when memory performance is not critical
for overall system performance. We call this Selective Memory
Downgrade (SMD), as ECC-Downgrade decision is dependent
on the memory intensity of the workload. SMD is implemented
by periodically tracking the memory activity of the workload.
When the processor exits from idle state, ECC-downgrade is
disabled, and the refresh interval remains at 1s. Every 64ms
(approximately 100 Million cycles), we track the number of
memory accesses generated by the workload in the previous
time quanta of 64ms. If the memory trafﬁc (measured as Miss
Per Kilo Cycle, or MPKC) is greater than a predeﬁned thresh-
old, ECC-Downgrade gets enabled, and all subsequent accesses
to memory perform ECC-Downgrade. Thus, for memory inten-
sive workloads, SMD will enable ECC-Downgrade (to reduce
memory latency), whereas for not memory intensive workloads
SMD will disable ECC-Downgrade (and save power). The
proposed SMD implementation requires only two registers to
record the number of memory accesses and to track the time
since last check.
364364
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:13:39 UTC from IEEE Xplore.  Restrictions apply. 
To understand the effectiveness of SMD, we examine
the time at which ECC-Downgrade gets enabled during the
program execution. Figure 14 shows the fraction of execution
time for which ECC-Downgrade remains disabled for each
workload, given a threshold of MPKC equal to 2. Note, several
benchmarks, such as, povray, tonto, wrf, gamess, hmmer,
sjeng, and h264ref, do not enable ECC-Downgrade through
the entire duration, thus optimizing for refresh power even
during active mode. The average performance with SMD is
within 2% of a baseline that does not perform error correction.
retention and high retention portions using runtime proﬁling.
It uses low refresh rate for rows with high retention time,
and normal refresh rate for the rows with low retention time.
SECRET uses error correction code to save refresh energy.
Their proposal requires an off-line investigation to identify
memory cells with retention errors given a target error rate,
and corrects the errors when lowering refresh rate. However,
to reduce the refresh rate signiﬁcantly, it requires the use of
strong error correction, and thus always incurs the performance
overhead of strong error correction.
VII. RELATED WORK
Several studies have looked into reducing the refresh
power. We describe the work that is most closely related to
ours, comparing and contrasting when appropriate.
A. Tolerating Refresh Errors in Software
A recent proposal, Flikker [7], describes a hardware-
software co-operative mechanism that trades-off data integrity
for refresh power saving. The memory is divided into critical-
region and non-critical region. The critical region is refreshed
at the normal rate, whereas the non-critical region is refreshed
at much lower rate. The software is modiﬁed to ensure that
data structures that inﬂuence correctness of program output
are kept in critical region and data structures that are resilient
to errors are kept in non-critical region.
There are three key differences between Flikker and
MECC. First, Flikker requires programmer to change the
source code, which may not always be possible, whereas
MECC is purely a hardware based technique that is useful
for existing programs as well. Second, a system with Flikker
is vulnerable to data errors and hence it is useful only for
class of applications that are inherently resilient to data errors,
whereas MECC does not have this restriction. Therefore,
MECC does not compromise program correctness to save
power. Third, Flikker still has a sizable region that is deemed
critical which ends up determining the effective refresh rate
(akin to Amdahl’s law). For example, if one-fourth of memory
is refreshed at a rate of 1 and three-fourth at a rate of 1/16, the
effective rate is still approximately 1/3. Whereas, MECC can
provide an effective refresh rate of 1/16 for entire memory in
idle mode. Thus, MECC is more effective at reducing refresh
power, and it obviates the programmer effort to partition data
into critical and non-critical regions.
B. Retention-Aware DRAM Optimizations
The power overheads associated with DRAM refresh can
be reduced by modulating the refresh rate depending on the
retention time of the memory row. This can avoid the worst-
case refresh rate for all the memory rows (or pages), when
only a very small fraction of memory bits have low retention
time. This is the idea behind three prior proposals: RAPID [13],
RAIDR [14], and SECRET [26].
RAPID is a software technique that allocates memory
pages depending on the retention characteristic of each page.
Pages with low retention are either disabled from OS pool,
or are given low priority of allocation. The refresh rate of
the system is thus determined by the allocated page with the
lowest retention time. RAIDR classiﬁes memory rows into low
All
three proposals rely on the premise that
the re-
tention characteristics of a cell do not change. While this
may be true for most cells, a small fraction of cells are
known to exhibit a phenomenon called Variable Retention
Time (VRT) [11][27][28], whereby a cell with high retention
time can randomly turn into a cell with low retention time.
Therefore, such not retention-aware schemes are vulnerable to
data errors in practice [11]. MECC, on the other hand, does not
rely on explicit retention characteristics of each cell. Instead
it allows for a large number of cells to fail randomly in the
memory space and tolerates such failures with strong ECC
code. Nonetheless, the two concepts of multi-rate refresh and
MECC are orthogonal, and can be combined for more efﬁcient
and effective solutions.
C. Multi-bit ECC for Tolerating Errors
MECC uses strong ECC (ECC-6) to tolerate refresh errors,
and changes the ECC strength depending on the activity rate
of the system. Alternative means of reducing the latency
penalties of multi-bit codes have been proposed. The most
closely related work is Hi-ECC [5]. To reduce cache leakage
power in a storage efﬁcient manner Hi-ECC keeps the strong
ECC code over a granularity of 1KB lines. Thus, it suffers
from the problem of signiﬁcant overfetch, and read-before-
write requirements. Furthermore, some of the techniques used
to optimize Hi-ECC, such as cache line disable, are not easily
applicable to main memories. Disabling an arbitrary cache line
would not alter software correctness; however having “holes”
in memory space necessitates special handling from OS to
ensure correctness.
Yoon et al. [29] proposed Virtual and Flexible ECC, which
allows ﬂexibility in error correction level across memory space.
Rather than using uniform error correction across the entire
memory space, it allows the user to specify stronger levels of
ECC for high-priority applications, and weaker levels of ECC
for low-priority applications. However, unlike MECC, it does
not modulate the error correction level depending on system
activity. Furthermore, Virtualizing the ECC space has the
advantage that one can still use commodity Non-ECC DIMM
to support arbitrary error correction schemes; nevertheless, this
comes at the expense of two memory accesses - one for data
and the other for ECC. Nonetheless, MECC is compatible
with both Virtual and Flexible ECC, as these concepts are
orthogonal.
VIII. SUMMARY
The problem of reducing idle power has become important
for emerging computing platforms such as smartphones, as
it often dictates the usable duration for these “mostly idle
365365
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:13:39 UTC from IEEE Xplore.  Restrictions apply. 
but instantly active” devices. One of the signiﬁcant sources
of energy consumption during idle periods is the refresh
power in memory system. We investigate strong multi-bit error
correction for reducing refresh operations. Unfortunately, the
high latency of multi-bit ECC results in increased memory
access latency and lower performance, making it less appealing
for practical implementations. We exploit the observation that
we can get high performance as well as refresh power savings
by modulating the ECC level depending on the level of activity
in the system. and make the following contributions:
1) We propose Morphable ECC (MECC)
that uses
strong error correction (and slower refresh rate) in
idle mode to save power, and weak ECC (and normal
refresh rate) during active mode to optimize for
performance.
2) We propose Memory Downgrade Tracking (MDT) to
reduce the time taken to convert memory to strong
ECC, and also the energy spent
in ECC coding.
MDT tracks the memory regions that get converted
from strong ECC to weak ECC during active mode,
and converts only these regions to strong ECC when
system enters idle mode.
3) We present an extension of MECC that makes it
possible to reduce refresh power even in active mode,
for applications that are not sensitive to the memory
system performance.
The access latency in common cases for MECC is dictated
mainly by the latency of weak ECC (SECDED for example),
which means the system can employ low-area high-latency
implementations for encoders/decoders for strong ECC. On
average, strong ECC causes a slowdown of 10% (as high as
21%); however, with MECC, the average slowdown is reduced
to 1.2%. MECC reduces refresh power in idle periods by 16X
and reduces idle power by 2X. While we have used ECC-6 as
strong ECC and SECDED for weak ECC in our evaluations,
the MECC scheme is useful for morphing between arbitrary
levels of ECC, which trades off robustness with performance
or power savings.
ACKNOWLEDGEMENTS
This work was supported in part by NSF grant 1319587
and the Center for Future Architecture Research (C-FAR),
one of the six SRC STARnet Centers, sponsored by MARCO
and DARPA. We thank our shepherd Helia Naeimi and the
anonymous reviewers for their valuable feedback.
REFERENCES
[1] A. Carroll and G. Heiser, “An analysis of power con-
sumption in a smartphone,” in the 2010 USENIX annual
technical conference, 2010.
[2] M. Gomony et al., “Dram selection and conﬁguration for
real-time mobile systems,” in DATE-2012.
[3] A. K. Karlson et al., “Working overtime: Patterns of
smartphone and pc usage in the day of an information
worker,” in the International Conference on Pervasive
Computing, 2009.
[4] J. Flinn et al., “Power and energy characterization of the
itsy pocket computer,” HP Labs, Tech. Rep., 2000.
[5] C. Wilkerson et al., “Reducing cache power with low-
cost, multi-bit error-correcting codes,” in ISCA-37, 2010.
[6] Wikipedia: Comparison of smartphones.
[7] S. Liu et al., “Flikker: saving dram refresh-power through
critical data partitioning,” in ASPLOS-6, 2011.
[8] M. Murphy, Beginning Android. Apress, 2009.
[9] Microsoft: Surface pro speciﬁcation. [Online]. Available:
http://www.microsoft.com/Surface
[10] K. Kim and J. Lee, “A new investigation of data retention
time in truly nanoscaled drams,” Electron Device Letters,
2009.
[11] B. L. Jacob, S. W. Ng, and D. T. Wang, Memory Systems:
Cache, DRAM, Disk. Morgan Kaufmann, 2008.
[12] B. Gu et al., “Challenges and future directions of laser
fuse processing in memory repair,” in the International
Conference on Semiconductor Equipment and Materials
International, 2003, pp. 452–456.
[13] R. Venkatesan et al., “Retention-aware placement in dram
(rapid): software methods for quasi-non-volatile dram,” in
HCPA-12, 2006.
[14] J. Liu et al., “Raidr: Retention-aware intelligent dram
refresh,” in ISCA-39, 2012.
[15] U. Kang et al., “Co-Architecting Controllers and DRAM
to Enhance DRAM Process Scaling,” in Memory Forum,
2014.
[16] C. Chen et al., “Error-correcting codes for semiconduc-
tor memory applications: a state-of-the-art review,” IBM
Journal, vol. 28, no. 2, March 1984.
[17] E. Fujiwara and D. K. Pradhan, Error-Control Coding in
Computers Systmes. Prentice-Hall, Inc., 1989.
[18] R. T. Chien, “Cyclic decoding procedures for bose-
chaudhuri-hocquenghem codes,” in IEEE Transactions on
Information Theory, vol. 10, no. 4, Oct 1964.
[19] Rajeev Balasubramonian and others, “Usimm: the utah
simulated memory module,” University of Utah and Intel
Corp, Tech. Rep. UUCS-12-002, Feb. 2012.
[20] (2012) Memory scheduling championship (msc). [On-
line]. Available: http://www.cs.utah.edu/ rajeev/jwac12/
[21] 1Gb-DDR-Mobile-SDRAM-t68: Mobile Low-Power DDR
SDRAM: Rev. G 9/11 EN, Micron Technology Inc., 2010.
Power-Saving
[22] TN-46-12:
Mobile
DRAM
Features/Calculations, Micron Technology Inc, 2009.
[23] TN-46-03: Calculating DDR Memory System Power In-
troduction, Micron Technology Inc., 2010.
[25] Uniﬁed-daemon
[24] mm-qcamera-daemon cpu usage.
[Online]. Available:
https://code.google.com/p/android/issues/detail?id=60058
Avail-
able: http://skp.samsungcsportal.com/integrated/uniﬁed-
daemons
[Online].
(eur).
[26] D.-Y. Shen et al., “Secret: Selective error correction for
refresh energy reduction in drams,” in ICCD-2012.
[27] J. Liu et al., “An experimental study of data retention be-
havior in modern dram devices: Implications for retention
time proﬁling mechanisms,” in ISCA-40, 2013.
[28] S. Khan et al., “The efﬁcacy of error mitigation tech-
niques for dram retention failures: A comparative exper-
imental study,” in The 2014 ACM International Confer-
ence on Measurement and Modeling of Computer Systems
(SIGMETRICS), 2014.
[29] D. H. Yoon and M. Erez, “Virtualized and ﬂexible ecc
for main memory,” in ASPLOS-15, 2010.
366366
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:13:39 UTC from IEEE Xplore.  Restrictions apply.