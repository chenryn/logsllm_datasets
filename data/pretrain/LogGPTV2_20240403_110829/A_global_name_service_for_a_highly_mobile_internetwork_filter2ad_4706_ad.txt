periment in §4.2.1 for load=0.3. The median and 90th per-
centile update latency for Auspice with total write ordering
is 284ms and is comparable to other schemes. A request,
after arriving an active replica, takes four one-way network
delays (two rounds) to be committed by Paxos. The median
update latency is a few hundred milliseconds for all schemes
as it is dominated by update propagation delays.
254
)
s
m
(
t
c
e
n
n
o
c
-
o
t
-
e
m
T
i
 600
 500
 400
 300
 200
 100
 0
Mean
Model-mean
Timeout
(= 157ms    1.5 RTT)
~~
Lookup latency (= 20ms)
msocket connect time
(= 210ms    2 RTT)
~~
6
5
2
/
4
2
0
1
/
1
4
6
/
6
1
/
4 1
/
1
1
1
1
Mobility rates (updates/sec)
 1600
 1200
 800
 400
)
c
e
s
/
B
K
(
t
u
p
h
g
u
o
r
h
T
n
w
o
d
r
e
v
r
e
S
n
w
o
d
t
n
e
i
l
C
 0
 0
 10
p
u
r
e
v
r
e
S
p
u
t
n
e
i
l
C
n
o
i
t
c
e
n
n
o
C
s
e
m
u
s
e
r
re-synchro nizatio n
C o n n ectio n
tim e
Message3 to
5 members
Message2 to
5 members
Message1 to
5 members
Connect to 
5 members
Group creation
 20
 30
Time (sec)
 40
 50
 0
 200  400  600  800  1000
Time (ms)
(a) E2E time-to-connect
(b) Simultaneous mobility
(c) Context-aware delivery
Figure 5: (a) Time-to-connect≈lookup latency for moderate mobility rates (< 1
10s ) as Auspice returns up-to-
date responses w.h.p., but sharply rises thereafter (Eq. 2); (b) Simultaneous mobility recovery in ≈2 RTTs
after both endpoints resurface; (c) Context-aware delivery showing 3 messages geo-cast to 5 members.
The update propagation delay, i.e., the time from when a
client issued a write till the last replica executes the write,
is a key determiner of the time-to-connect. As shown in
§3.3.5, with eventual consistency, update propagation takes
one round, while with total write ordering, update propaga-
tion takes two rounds and 50% more messages.
The measured update propagation delay is consistent with
expectations. With eventual consistency, this delay is 154
ms, while with total write ordering, it is 292ms. Thus. the
cost of the stronger consistency provided by total write or-
dering compared to eventual is that it can increase the time-
to-connect latency by up to 2×. Note that the 2× inﬂation is
a worst-case estimate, i.e., it will impact the time-to-connect
latency only if a read request arrives at a replica while a write
is under propagation to that replica, as we show below.
4.3 End-to-end mobility case studies
Can Auspice serve as the basis of a complete end-to-end
mobility solution? To address this question, we have devel-
oped msocket, a user-level socket library that interoperates
with Auspice, and supports all four types of endpoint mo-
bility. The details of msocket’s design and implementation
is the subject of a separate paper [6]. Here, we use msocket
to show proof-of-concept of some of Auspice’s capabilities.
4.3.1 Time-to-connect to “moving” endpoints
We evaluate the time-to-connect to a moving destination
as a function of the mobility (or update) rate. The end-to-
end time-to-connect here is measured as the latency to look
up an up-to-date address of the destination (or the time-
to-connect as deﬁned in §3.2) plus the time for msocket to
successfully establish a TCP connection between the client
and the mobile destination. This e2e-time-to-connect also
incorporates the impact of timeouts and retried lookups if
the client happens to have obtained a stale value (as in Fig.
1). The experiment is conducted on PlanetLab and consists
of a single msocket client and a single mobile msocket server
that is “moving” by changing its listening port number on a
remote machine, and updating the name record replicated
on three Auspice name servers accordingly. A successful
connection setup delay using msocket is takes 2 RTTs (2 ×
105 ms) [6]. As deﬁned in Eq. 2, the values of the update
propagation latency di and the lookup latency li are 250
ms and 20 ms respectively, and the update rate wi varies
from 1/1024/s to 1/s. The timeout value (T ) in our exper-
iment is dependent on the RTT between the client and the
server. If the client attempts to connect to the server on a
port which the server is not listening on, the server immedi-
ately returns an error response to the client. Speciﬁcally, the
timeout value is either 1 or 2 RTTs with equal probability
depending on whether the connection failed during the ﬁrst
or the second round-trip of msocket’s connection setup. The
client sends lookups at a rate of 10/s (but this rate does not
aﬀect the time-to-connect), and both lookups and updates
inter-arrival times are exponentially distributed.
Figure 5(a) shows the distribution of the time-to-connect
with update propagation delays entailed by eventual consis-
tency. For low-to-moderate mobility rates (< 1
64s ), we ﬁnd
that all time-to-connect values are close to 230 ms, of which
20ms is the lookup latency, and 210ms is msocket’s connec-
tion setup latency. The reason the client is able to obtain
the correct value upon ﬁrst lookup in all cases is that the up-
date propagation latency of 250ms is much smaller than the
average inter-update interval (64s). The update propaga-
tion delay becomes a non-trivial fraction of the inter-update
interval at high mobility rates of ≈1/sec that results in 26%
of lookups returning stale values. The mean e2e-time-to-
connect increases to 302 ms for an update rate of 1/sec,
which suggests that Auspice’s time-to-connect is limited by
network propagation delays in this regime. Nevertheless,
once a connection is successfully established, individual mi-
gration can quickly resynchronize the connection in ≈two
round-trips between the client and the mobile without rely-
ing on Auspice (not shown here).
Figure 5(a) also shows that the time-to-connect as pre-
dicted by our analytical model (Eq. 2) are close to those
observed in the experiment, thereby re-aﬃrming our design.
Simultaneous endpoint mobility
4.3.2
Figure 5(b) shows an experiment involving simultaneous
mobility. The client is an Android phone using msocket via
a WiFi interface to connect to a publicly addressable Plan-
etlab machine at time 0. The server and client shut down
their interfaces respectively around 15 and 20 sec. Subse-
quently, the server restarts its interface and starts listening
on a diﬀerent port and updates Auspice accordingly. After
that, the client restarts its interface and attempts to re-
synchronize the connection. This re-synchronization time is
roughly 300ms as shown and consists of the following de-
lays. The client performs a query to Auspice to resolve the
255
)
s
m
(
y
c
n
e
t
a
l
p
u
k
o
o
L
 240
 210
 180
 150
 120
 90
 60
 30
 0
)
a
c
i
e
c
p
s
u
A
i
l
p
e
r
5
(
)
a
c
i
e
c
p
s
u
A
i
l
p
e
r
0
1
(
)
a
c
i
e
c
p
s
u
A
i
l
p
e
r
5
1
(
S
N
D
a
r
t
l
U
)
a
c
i
l
p
e
r
0
1
(
e
c
p
s
u
A
i
)
a
c
i
l
p
e
r
5
1
(
e
c
p
s
u
A
i
)
a
c
i
l
p
e
r
5
(
e
c
p
s
u
A
i
y
s
a
E
e