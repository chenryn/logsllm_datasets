### 4.2.1 实验结果（负载=0.3）

在总写入排序的情况下，Auspice 的更新延迟中位数和第90百分位数均为284毫秒，与其他方案相当。一个请求到达活跃副本后，需要经过四个单向网络延迟（两轮）才能通过Paxos提交。所有方案的更新延迟中位数为几百毫秒，主要由更新传播延迟决定。

### 图5：端到端连接时间与移动性

- **(a) 端到端连接时间**：在中等移动率（< 1/10秒）下，Auspice 返回最新的响应具有高概率，但之后急剧上升（见公式2）。
- **(b) 同时移动恢复**：两个端点重新出现后，大约在两个往返时间内完成同时移动恢复。
- **(c) 上下文感知传递**：显示了将三条消息地理广播给五个成员的过程。

#### 更新传播延迟

更新传播延迟（即从客户端发出写操作到最后一个副本执行该写操作的时间）是连接时间的关键决定因素。如§3.3.5所示，在最终一致性下，更新传播只需一轮；而在总写入排序下，更新传播需要两轮并增加50%的消息量。

测量结果显示，最终一致性下的更新传播延迟为154毫秒，而总写入排序下的更新传播延迟为292毫秒。因此，总写入排序提供的更强一致性比最终一致性增加了最多两倍的连接时间延迟。需要注意的是，两倍延迟是一个最坏情况估计，仅当读请求到达副本时，写操作正在传播到该副本时才会受到影响。

### 4.3 端到端移动性案例研究

Auspice 是否可以作为完整的端到端移动解决方案的基础？为了回答这个问题，我们开发了一个用户级套接字库 msocket，它与Auspice互操作，并支持四种类型的端点移动。msocket的设计和实现细节将在另一篇论文[6]中详细介绍。这里，我们使用msocket来展示Auspice的一些功能。

#### 4.3.1 连接到“移动”端点的时间

我们评估了连接到移动目的地的时间与移动率（或更新率）的关系。端到端连接时间包括查找目的地最新地址的延迟（或§3.2定义的连接时间）以及msocket成功建立客户端与移动目的地之间的TCP连接所需的时间。此e2e-time-to-connect还考虑了超时和重试查找的影响（如图1所示）。实验在PlanetLab上进行，包括一个msocket客户端和一个通过更改远程机器上的监听端口号“移动”的msocket服务器，并相应地更新三个Auspice名称服务器上的名称记录。使用msocket的成功连接设置延迟为2个RTT（2 × 105毫秒）[6]。根据公式2，更新传播延迟di和查找延迟li分别为250毫秒和20毫秒，更新率wi从1/1024/s变化到1/s。实验中的超时值（T）取决于客户端和服务器之间的RTT。如果客户端尝试连接到服务器未监听的端口，服务器会立即返回错误响应。具体来说，超时值在第一次或第二次往返期间连接失败时分别为1或2个RTT，概率相等。客户端以10/s的速率发送查找请求（但此速率不影响连接时间），查找和更新的到达时间呈指数分布。

图5(a)显示了最终一致性下的更新传播延迟对连接时间的影响。对于低至中等移动率（< 1/64秒），我们发现所有连接时间接近230毫秒，其中20毫秒是查找延迟，210毫秒是msocket的连接设置延迟。客户端在所有情况下都能在第一次查找时获得正确值的原因是，250毫秒的更新传播延迟远小于平均更新间隔（64秒）。在约1/秒的高移动率下，更新传播延迟成为更新间隔的重要部分，导致26%的查找返回陈旧值。在1/秒的更新率下，平均e2e-time-to-connect增加到302毫秒，这表明在这种情况下Auspice的连接时间受网络传播延迟限制。然而，一旦连接成功建立，个体迁移可以在不依赖Auspice的情况下在约两个往返时间内快速重新同步连接（此处未显示）。

图5(a)还显示，我们的分析模型（公式2）预测的连接时间与实验观察结果相近，从而再次验证了我们的设计。

### 4.3.2 同时端点移动

图5(b)显示了一个涉及同时移动的实验。客户端是一台通过WiFi接口使用msocket连接到公开可访问的Planetlab机器的Android手机。服务器和客户端分别在大约15秒和20秒时关闭其接口。随后，服务器重启其接口并开始监听不同的端口，并相应地更新Auspice。之后，客户端重启其接口并尝试重新同步连接。如图所示，重新同步时间约为300毫秒，包括以下延迟：客户端向Auspice查询以解析最新的服务器地址。