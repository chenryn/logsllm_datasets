title:Revealer: Detecting and Exploiting Regular Expression Denial-of-Service
Vulnerabilities
author:Yinxi Liu and
Mingxue Zhang and
Wei Meng
2
6
0
0
0
.
1
2
0
2
.
1
0
0
0
4
P
S
/
9
0
1
1
.
0
1
:
I
O
D
|
E
E
E
I
1
2
0
2
©
0
0
.
1
3
$
/
1
2
/
5
-
4
3
9
8
-
1
8
2
7
-
1
-
8
7
9
|
)
P
S
(
y
c
a
v
i
r
P
d
n
a
y
t
i
r
u
c
e
S
n
o
m
u
i
s
o
p
m
y
S
E
E
E
I
1
2
0
2
2021 IEEE Symposium on Security and Privacy (SP)
REVEALER: Detecting and Exploiting Regular
Expression Denial-of-Service Vulnerabilities
Yinxi Liu, Mingxue Zhang, and Wei Meng
Chinese University of Hong Kong
{yxliu, mxzhang, wei}@cse.cuhk.edu.hk
Abstract—Regular expression Denial-of-Service (ReDoS) is
a class of algorithmic complexity attacks. Attackers can craft
particular strings to trigger the worst-case super-linear matching
time of some vulnerable regular expressions (regex) with extended
features that are commonly supported by popular programming
languages. ReDoS attacks can severely degrade the performance
of web applications, which extensively employ regexes in their
server-side logic. Nevertheless, the characteristics of vulnerable
regexes with extended features remain understudied, making it
difficult to mitigate or even detect such vulnerabilities.
In this paper, we aim to model vulnerable regex patterns
generated by popular regex engines and craft attack strings
accordingly. Our characterization fully supports the analysis of
regexes with any extended feature. We develop REVEALER to
detect vulnerable structures presented in any given regex and
generate attack strings to exploit the corresponding vulnerabili-
ties. REVEALER takes a hybrid approach. It first statically locates
potential vulnerable structures of a regex, then dynamically veri-
fies whether the vulnerabilities can be triggered or not, and finally
crafts attack strings that can lead to recursive backtracking. By
combining both static analysis and dynamic analysis, REVEALER
can accurately and efficiently generate exploits in a limited
amount of time. It can further offer mitigation suggestions based
on the structural information it identifies.
We implemented a prototype of REVEALER for Java. We
evaluated REVEALER over a dataset with 29,088 regexes, and
compared it with three state-of-the-art tools. The evaluation
shows that REVEALER considerably outperformed all the existing
tools—REVEALER can detect all 237 vulnerabilities that can
be detected by any other tool, find 213 new vulnerabilities,
and beat the best tool by 140.64%. We further demonstrate
that REVEALER successfully detected 45 vulnerable regexes in
popular real-world applications. Our evaluation demonstrates
that REVEALER is both effective and efficient in detecting and
exploiting ReDoS vulnerabilities.
I.
INTRODUCTION
Regular expression (regex) is a powerful technique devel-
oped in formal language theory to denote a regular language
[24] that can be used to describe certain patterns. Regexes have
been extensively used in modern software, including databases,
text editors, search engines, etc. Modern regex engines are
augmented with extended features (e.g., conditionals, named
groups, etc. [17]) for advanced pattern matching and processing.
Regular Expression Denial-of-Service (ReDoS) [18, 27]
attacks are a form of algorithmic asymmetric DoS attacks [8]
targeting the CPU resource of a victim server. Since developers
may craft regexes that exhibit super-linear (e.g., exponential)
worst-case matching time, a specially-crafted (short) input can
spend a server as much as several or more seconds on matching
a vulnerable regex. Since it is hard to split the matching process
of a regex into multiple independent steps, a single malicious
request can block or freeze a (main) thread for a long time
[32]. By supplying multiple such attack inputs, an attacker can
significantly lower the availability of the victim server. Since
regexes are supported by most languages and are widely used
in modern applications, especially web/mobile applications that
extensively rely on regexes to process untrusted user inputs,
such attacks can have a huge impact on a vast number of
applications on the Internet.
The theory of detecting ReDoS vulnerabilities in classical
regular expressions based on statically analyzing NFA [38] has
been well established. However, extended regular expressions
can no longer be represented by an NFA. Hence, researchers
have been working on establishing new theories to model
the extended features [4, 9, 22]. Nevertheless, to the best of
our knowledge, no static analyzer is able to fully support all
extended features so far. Further, static analyzers usually report
many false positives. How to well model the ReDoS problem
in extended regular expressions still remains as a challenge.
Researchers also proposed to use dynamic approaches, e.g.,
fuzzing, to generate malicious inputs to detect ReDoS and
other types of algorithmic DoS vulnerabilities [5, 28, 30]. Such
approaches are very effective in finding easy-to-trigger ReDoS
vulnerabilities, and are able to find vulnerable extended regexes,
because they usually do not require knowledge of the regex
structures. However, they are very limited in detecting complex
ones, because it is difficult to generate the correct sequences
of inputs to reach the vulnerable parts of a regex without
understanding its structure and features. Further, they usually
require a high computation cost for searching different inputs.
In this paper, we aim to tackle the challenge of automatically
detecting and exploiting ReDoS vulnerabilities in extended
regexes. We take a hybrid approach combining both static
analysis and dynamic analysis methods.
We first statically model the ReDoS vulnerabilities in an
extended NFA (e-NFA) [30], which is the structure modern
regex engines use to represent an extended regex. Our theory
is inspired by the vulnerable NFA patterns defined in [38]. We
model two types of vulnerable e-NFA patterns in exponential
worst-case time complexity, and one type in polynomial worst-
case time complexity. Such models allow us to statically locate
the potential vulnerable structures in a regex.
Next, we dynamically exploit the potential vulnerability by
generating attack strings. In particular, we focus on generating
the attack core, whose repetitions in the attack string can lead
to catastrophic backtracking [3] when the engine fails to match
© 2021, Yinxi Liu. Under license to IEEE.
DOI 10.1109/SP40001.2021.00062
1468
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:25:45 UTC from IEEE Xplore.  Restrictions apply. 
the attack suffix. Our approach is different from fuzzing as we
do not generate attack strings by mutating input seeds. Instead,
we simulate the matching process of an extended regex on
top of an E-TREE, which is our simplified representation of
an e-NFA. Our match simulator can construct a match string
for one or multiple sub regular expressions. By simulating
the match of multiple subexpressions that are detected from
the vulnerable e-NFA structure, we can effectively generate
the attack core. Similarly, we can also accurately generate the
attack prefix for reaching the vulnerable regex pattern, and the
attack suffix that causes backtracking on match failure.
We develop REVEALER, a system for automatically detect-
ing and exploiting ReDoS vulnerabilities. REVEALER takes a
regex as input, and can produce an attack string that can exploit
the ReDoS vulnerability in the regex, if any. It incorporates a
static analysis for locating the vulnerable subexpressions and a
dynamic analysis for producing the attack strings and validating
the potential vulnerabilities. For each potential vulnerable
regex, it dynamically tests it with the attack string for super-
linear matching steps at runtime. Such dynamic verification
helps it exclude any false positives that may be reported by
the static analysis. Further, it can also report the vulnerable
subexpression in the regex to help the developers identify and fix
the vulnerability. We implemented a prototype of REVEALER
based on the Java 8 regex engine. We will make the source
code of our prototype implementation publicly available.
We systematically evaluated REVEALER with a benchmark
dataset containing 29,088 regexes, and compared it with three
state-of-the-art ReDoS detection tools. REVEALER significantly
outperformed all three tools by detecting 213 previously un-
known ReDoS vulnerabilities, and all 237 known ones detected
by the other tools. It beat the best performing tool by 140.64%
in our evaluation, and took several orders or magnitude less
time on analyzing one regex. We further applied REVEALER
to 178 popular open-source projects on GitHub, and detected
45 new vulnerabilities. We responsibly disclosed our detected
vulnerabilities to the relevant developers. The evaluation results
demonstrate that REVEALER can both effectively and efficiently
detect and exploit ReDoS vulnerabilities.
regular expressions based on extended NFA.
In summary, this paper makes the following contributions:
• We statically modeled ReDoS vulnerabilities for extended
• We developed REVEALER, an effective and efficient
system for automatically detecting and exploiting ReDoS
vulnerabilities by using a hybrid approach.
• Using REVEALER, we detected 213 previously unknown
ReDoS vulnerabilities in a benchmark dataset, and 45
previously unknown ReDoS vulnerabilities in popular real-
world open-source applications.
II. BACKGROUND
We introduce the necessary background related to ReDoS
and its existing mitigation approaches in this section.
A. ReDoS Attacks
Traditionally, regex engines accept only classical regular
expression, which is the expression of a regular language
[24]. From Kleene’s theorem [39], a regular language can be
transferred to an equivalent nondeterministic finite automaton
(NFA). Therefore, we can construct a NFA for each classical
regex. The regex matching algorithm then becomes the process
of verifying whether the NFA accepts a certain input string or
not, whose worst-case complexity is only linear with the input
length because it visits each input symbol once and each visit
takes constant time.
However, modern regex engines add support for extended
features, which require a matching algorithm with super-linear
worst-case complexity. Specifically, in the Chomsky hierarchy,
classical regular expressions are generated by regular grammars,
which belong to context-free grammar. But the expressive power
of many extended features goes beyond context-free grammars
and can only be described by context-sensitive grammars [9].
We use the term extended regular expression to denote the
regular expression containing such features1. For example, the
extended feature “backreferences” can match the same text
previously matched in a capturing group. A regex example using
backreferences is (.+)&\1, which can match “Hello&Hello”
and “World&World” but not “Hello&World”. Regex matching
is NP-hard when regexes are allowed to have backreferences,
as discussed in [16].
Therefore, to fully support these complex extended features,
modern engines first parse the input regular expression into an
NFA like structure (called e-NFA in [30]), and then perform
a backtracking search on top of this structure according to
the input string. Since Shen et al. [30] did not provide a
detailed definition of e-NFA, we will provide one later in
§III-A. In particular, backtracking search is used by modern
regex engines when a regex contains optional quantifiers or
alternation constructs [15]. Such a behavior has been discussed
in [30] and [17].
The search-based algorithm has potential performance
issues. It may lead to catastrophic backtracking since it needs to