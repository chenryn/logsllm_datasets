# 【技术分享】渗透测试技术之另类Windows提权
|
##### 译文声明
本文是翻译文章，文章来源：pentest.blog
原文地址：
译文仅供参考，具体内容表达以及含义原文为准。
****
****
**翻译：**[ **pwn_361**
****](http://bobao.360.cn/member/contribute?uid=2798962642)
**预估稿费：200RMB**
**投稿方式：
发送邮件至[linwei#360.cn](mailto:PI:EMAIL)，或登陆[网页版](http://bobao.360.cn/contribute/index)在线投稿**
**  
**
**前言**
如果你获得了一台机器的低权限Meterpreter会话，并且当你尝试了一些常用方法，仍然提权失败时，是不是就意味着没法提权呢？不必着急，你仍然可以试试很多其它的技术。下面我们就来列举出几种提权方法。
**一、Windows服务路径没加双引号**
通常，如果一个服务的可执行文件的路径没有用双引号封闭，并且包含空格，那么这个服务就是有漏洞的。
如果你想验证这个漏洞，你可以在你的试验环境中增加一个有漏洞的服务，自己测试一下，下面咱们添加名为“Vulnerable
Service”的服务，可执行文件放在“C:Program Files (x86)Program FolderA Subfolder”目录中。
为了识别出没有加双引号的服务，你可以在Windows命令行中运行以下命令：
运行上面的命令后，所有没有加双引号的服务将会被列出来：
如果你从注册表中查看注册的服务，你会看到“ImagePath”的值是：
安全的值应该是：
当Windows尝试启动这个服务时，它会按照下面的顺序寻找可执行文件，并运行第一个找到的：
这个漏洞是由系统中的“CreateProcess”函数引起的，更多信息[请看这里](https://msdn.microsoft.com/en-us/library/windows/desktop/ms682425\(v=vs.85\).aspx)。
如果我们能成功的把恶意EXE程序放在这些路径下，当服务重新启动时，Windows就会以SYSTEM权限运行我们的EXE。当然，我们需要有进入其中一个目录的权限。
为了检查一个目录的权限，我们可以使用Windows内建的一个工具，icals，下面我们用这个工具检查“C:Program Files
(x86)Program Folder”目录的权限。
好幸运呐，你可以看到，“Everyone”用户对这个文件有完全控制权。
“F”代表完全控制。“CI”代表从属容器将继承访问控制项。“OI”代表从属文件将继承访问控制项。
这意味着我们可以随意将文件写入这个文件夹。
从现在开始，你要做什么取决于你的想象力。我比较倾向于生成一个反弹shell载荷，并用SYSTEM权限运行。
这个工作可以使用msfvenom来完成：
然后将生成的载荷放到“C:Program Files (x86)Program Folder”文件夹：
然后，在下一步启动这个服务时，A.exe就会以SYSTEM权限运行，下面我们试着停止，并重启这个服务：
访问被拒绝了，因为我们没有停止或启动服务的权限。不过，这不是一个大问题，我们可以等，直到有人重启机器，或者我们自己用“shutdown”命令重启：
正如你看到的，低权限的会话中断了，说明命令执行了。
我们的机器正在重启，现在，我们的载荷将会以SYSTEM权限运行，我们需要立即在本地建立监听：
现在，我们获得了一个SYSTEM权限的meterpreter shell。
但是，我们新得到的会话很快就中断了，为什么呢？
不必担心，当一个服务在Windows系统中启动后，它必须和服务控制管理器通信。如果没有通信，服务控制管理器会认为出现了错误，并会终止这个进程。
我们所有需要做的就是在终止载荷进程之前，将它迁移到其它进程，你也可以使用自动迁移。
顺便说一句，有一个检查和利用这个漏洞的Metasploit模块：[exploit/windows/local/trusted_service_path](https://www.rapid7.com/db/modules/exploit/windows/local/trusted_service_path)。
在运行这个模块前，需要将它和一个已经存在的meterpreter会话(实际上就是你的低权限会话)关联起来，如下图：
具体过程可以看[这里](http://www.zeroscience.mk/codes/msfsession.txt)。
**二、Windows服务带有易受攻击的权限**
大家知道，Windows服务是以SYSTEM权限运行的。因此，它们的文件夹、文件和注册的键值，必须受到强访问控制保护。在某些情况下，我们能遇到没有受到有效保护的服务。
**不安全的注册表权限**
在Windows中，和Windows服务有关的信息存储在“HKEY_LOCAL_MACHINESYSTEMCurrentControlSetServices”注册表项中，根据我们上面的测试实例，我们可以找到“HKEY_LOCAL_MACHINESYSTEMControlSet001ServicesVulnerable
Service”键值。
当然，我们建的“Vulnerable Service”服务存在漏洞。
但问题是，我们怎样才能从命令行检查这些权限？让我们从头开始演示。
你已经得到了一个低权限的Meterpreter会话，并且你想检查一个服务的权限。
你可以使用[SubInACL](https://www.microsoft.com/en-us/download/details.aspx?id=23510)工具去检查注册表项的权限。你可以从这里下载它，但是你要意识到这个程序是一个msi文件。如果目标机器上的AlwaysInstallElevated策略设置没有启用，那么你没法以低权限安装msi文件，当然，您可能也不想在目标机器上安装新的软件。
我建议你在一个虚拟机中安装这个软件，并在它的安装目录中找到“subinacl.exe”文件。它能顺利工作，并且无需安装msi文件。然后将SubInACL上传到目标机器。
现在SubInACL工具可以用了，下面我们来检查“HKEY_LOCAL_MACHINESYSTEMControlSet001ServicesVulnerable
Service”的权限。
请看第22、23行，“Everyone”在这个注册表项上有完全的控制权。意味着我们可以通过编辑ImagePath的值，更改该服务的可执行文件路径。
这是一个巨大的安全漏洞。
我们生成一个反弹shell载荷，并将它上传到目标机器中，然后把服务的可执行文件路径修改为反弹shell载荷的路径。
首先，生成一个载荷：
上传到目标机器中：
将ImagePath的值改成我们载荷的路径：
在下一次启动该服务时，payload.exe将会以SYSTEM权限运行。但是请记住，我们必须重新启动电脑才能做到这一点。
如上图，我们的目标机正在重启，请将监听进程准备好，我们的载荷将会以SYSTEM权限运行。
但是不是忘了，我们利用服务的方式和前面讲的方式(服务路径没加双引号)原理上实际是一样的,返回的高权限很快会断掉(可以使用自动迁移，如AutoRunScript)。
**不安全的服务权限**
这和前面讲的不安全的注册表权限很相似，只是这次我们没有修改ImagePath的值，我们直接修改了服务的属性。
为了检查哪个服务有易受攻击的权限，我们可以使用[AccessChk](https://technet.microsoft.com/en-us/sysinternals/accesschk.aspx)工具，它来源于[SysInternals
Suite](https://technet.microsoft.com/en-us/sysinternals/bb842062.aspx)工具集。
将AccessChk工具上传到目标机器中：
为了检查易受攻击的服务，我们运行以下命令：
如图，通过上面的命令，所有“testuser”用户可以修改的服务都被列出来了。SERVICE_ALL_ACCESS的意思是我们对“Vulnerable
Service”的属性拥有完全控制权。
让我们看一下“Vulnerable Service”服务的属性：
BINARY_PATH_NAME参数指向了该服务的可执行程序(Executable.exe)路径。如果我们将这个值修改成任何命令，那意味着这个命令在该服务下一次启动时，将会以SYSTEM权限运行。如果我们愿意，我们可以添加一个本地管理员。
首先要做的是添加一个用户：
在修改了binpath的值后，用“sc stop”和“sc start”命令重启服务：
当你尝试启动服务时，它会返回一个错误。这一点我们之前已经讨论过了，在Windows系统中，当一个服务在Windows系统中启动后，它必须和服务控制管理器通信。如果没有通信，服务控制管理器会认为出现了错误，并会终止这个进程。上面的“net