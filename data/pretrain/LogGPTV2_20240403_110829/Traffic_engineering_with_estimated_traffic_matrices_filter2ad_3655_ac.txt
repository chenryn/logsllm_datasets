50
40
30
20
10
0
0
3
6
9
InvCap weights
OSPF/tomogravity
OSPF/true
MPLS/true
15
18
21
24
12
time
(c) The ’x’s show the optimal MPLS routing, the ’+’
signs show the OSPF optimization using the true traf-
ﬁc matrix, and the squares show the result of inverse
capacity OSPF weights. The circles show the result
of the true trafﬁc matrix being applied with weights
from OSPF optimization using the estimated trafﬁc
matrices.
InvCap weights
MPLS/tomogravity
MPLS*/tomogravity
MPLS/true
15
18
21
24
12
time
(d) As before, the ’x’s show the optimal possible rout-
ing, and the squares show the result of inverse capac-
ity OSPF weights. The stars show the result of using
the estimated trafﬁc matrix in MPLS optimization,
and then applying the results to the true trafﬁc matrix.
Note that in one case the result is several times worse
than can be displayed on this graph, and goes off the
scale. Similarly, the ’*’s show the performance of the
modiﬁed MPLS algorithm.
Figure 3: Results for the 1 hour data sets over the 17th of August 2003. Figure (a) shows a comparison of errors in the estimates,
(b)–(d) show the maximum utilizations of the network under various routing optimization. Note that the y-axes for (b)–(d) are all
scaled in the same way so that the MMU of the InvCap weights is 100.
reasonable attempt at optimization given no other network
information.
• MPLS and MPLS
∗
optimization: both optimally minimizing
the max-utilization with respect to the given trafﬁc matrix.
• true trafﬁc matrix: in which we apply the optimization algo-
rithms above to the true trafﬁc matrix elements.
Figure 3 (c) shows the maximum utilizations for each hour of
the day, under various routing schemes. The ’×’ signs show the
optimal possible routing, i.e., the result of applying the MPLS opti-
mizer to the true trafﬁc. The ’+’ signs show the OSPF optimization
using the true trafﬁc matrix, and the squares show the result of in-
verse capacity OSPF weights. The ’o’s show the result of the true
trafﬁc matrix being applied with weights from OSPF optimization
using the estimated trafﬁc matrices using the tomogravity method.
We can see in Figure 3 (c) that the OSPF optimization algorithm
(’+’s) comes very close to the optimal possible solution (’×’s) in
most cases, and is always a signiﬁcant improvement over the de-
fault InvCap weights. Furthermore, weights found from the esti-
mated trafﬁc matrix (’o’s) perform only slightly worse than weights
found from the true trafﬁc matrix. In fact, as seen in Table 1, even
when the OSPF optimizer is applied to the tomogravity estimated
trafﬁc matrix, it gets within 11-12% of the optimum solution. This
is clear evidence that the errors in the tomogravity estimated trafﬁc
matrix are not very important from our particular trafﬁc engineering
perspective, and that SNMP link statistics could be used to estimate
trafﬁc matrices of considerable use.
Another interesting point is that whereas the optimized routings
generally follow the developments in the mean trafﬁc (’+’s) in Fig-
ure 3 (a), the InvCap routing does not. This shows that the trafﬁc
is not just scaled up and down during the day, but that it is also
shifted around in ways that impact InvCap differently, yet which
can be accommodated by the optimizers.
5.4 Further merits
We note that many of the above results sound similar to those
reported in [7, 12], but the major difference is that the weight op-
timization is done based on an estimated trafﬁc matrix while mea-
sured on a true trafﬁc matrix, thus giving us the desired feed-back
on the operational value of the estimated trafﬁc matrix.
Another very important difference to all the previous work on
OSPF optimization is that our results are based on measurements
from a real operational network. The closest to this was the work
from [7] that used a proposed AT&T WorldNet backbone with pro-
jected demands. It is only very recently that good measurements of
trafﬁc matrices have become possible on a sufﬁciently large scale.
A secondary merit of this paper is thus to substantiate previous
weight optimization work the with ﬁrst real data.
6. PRACTICAL CONSIDERATIONS
While the results above show the OSPF optimization to work
well with the tomogravity estimates, there are a number of consid-
erations before any method can be consider to be practical. This
section will address some of these issues.
6.1 Faster OSPF optimization
The OSPF optimization algorithm is quite fast — on the current
network it runs in around 330 seconds (for 5000 iterations in Fig-
ure 3, on a Sun 900 MHz Ultrasparc-III Copper processor). How-
ever, the majority of the beneﬁts of the optimization algorithm used
here come early in the algorithm [7, 12] when applied to real data.
It is worth testing whether this is also the case when we use an esti-
mated trafﬁc matrix. It is indeed the case, as is shown by Figure 4,
which shows the same set of data with the results of the weights
after 5000 iterations and only 1000 iterations. The relative increase
in maximum utilization (due to 5 times fewer iterations) is always
below 5%. In contrast, the time for 1000 iterations is only about
one ﬁfth of that for 5000.
∗
Figure 3 (d) shows the same optimal, and InvCap results, but
compares them to the MPLS and MPLS
optimization using es-
timated data. Note that in one case using the MPLS optimization,
the result is several times worse than can be displayed on this graph.
According to Table 1 it goes off by a factor 400, and a more detailed
investigation revealed that this was due to a loop, as discussed in
§2.1. The MPLS
optimizer avoids this problem, but given the to-
mogravity estimates, it is still twice as far from the true optimum
as the OSPF optimizer. Thus we have a strong counter example to
our simple-minded hypothesis that the optimization that performs
best given the true trafﬁc would also perform best on estimates.
∗
optimization
method
InvCap
OSPF
OSPF
OSPF
OSPF
MPLS
MPLS
MPLS
∗
trafﬁc matrix
N/A
simple gravity Model
general gravity model
tomogravity
true
tomogravity
tomogravity
true
performance (%)
MMU
AMU
79.9
100.0
67.2
57.5
68.1
58.6
57.7
47.1
44.4
54.1
40259.7
1735.5
68.8
53.5
42.5
51.8
Table 1: The AMU and MMU of each method as a percentage
of the MMU for the InvCap weights.
n
o
i
t
a
z
i
l
i
t
i
u
m
u
m
x
a
m
d
e
a
c
s
l
100
90
80
70
60
50
40
30
20
10
0
0
InvCap weights
MPLS/true
5000 iterations
1000 iterations
3
6
9
12
time
15
18
21
24
Figure 4: Results of route optimization as in Figure 3 (c), and
with only 1000 iterations of the OSPF route optimization algo-
rithm.
6.2 Global Optimization
Frequent changes to OSPF link weights are highly undesirable.
Apart from the management complexity this induces on the net-
work, OSPF routing takes at least seconds to re-converge after each
change. While this may seem a short time, on a large network car-
rying 100’s of Terabytes per day, changing the OSPF routing each
hour could easily result in the loss of a 100 GBs of trafﬁc or more
per day.
It is, however, possible to use the optimization method above to
compute an optimum routing for all 24, one hour trafﬁc matrices
for one day. More precisely, in [12] a technique is described that
seeks a single global weight setting that works well for multiple
demand matrices, obtaining a good max-utilization for all of them.
We applied this technique as a black-box. This provides another in-
teresting test of how well the trafﬁc matrix estimates perform. We
compute such a set of weights from the tomogravity estimated traf-
ﬁc matrices for one day, and then determine how well the weights
perform for each hour of the day using the real trafﬁc matrix. Fig-
ure 5 shows these results.
n
o
i
t
a
z
i
l
i
t
i
u
m
u
m
x
a
m
d
e
a
c
s
l
100
90
80
70
60
50
40
30
20
10
0
0
3
6
9
InvCap weights
global OSPF/tomogravity
global OSPF/true
MPLS/true
12
time
15
18
21
24
Figure 5: Global optimization over a 24 hour period. Once
again the crosses represent the optimal solution for each one
hour data set, and the squares represent inverse capacity
weights. The points, and diamonds represent the global op-
timum weights calculated from the set of real and estimated
trafﬁc matrices, respectively, applied to each one hour trafﬁc
matrix.
The ﬁgure also gives the results optimized over the true trafﬁc
matrices for the 24 hours, and the hourly optimum. The results
for the estimated and true trafﬁc matrices are good, even in com-
parison to the hourly optimum. Comparing to the latter is unfair
in this case because it is easier to optimize for a single hour than
over the whole day. We use them instead of the global optimum
MPLS solution because the computational cost for the global opti-
mum MPLS solution was prohibitive (it involves a linear program
with order 30 million variables and 50 million constraints). The
OSPF optimization algorithm, on the other hand, is still quite fast.
It is considerably slower when optimizing over 24 trafﬁc matrices,
taking around 6500 seconds to run 5000 iterations, but this is in fact
better than 24 times the speed of the individual hourly optimization,
which actually reduces the overall computation for the day.
Table 2 summarizes the results, and provides a comparison to
those in the previous section. We can see that the global solution is
very close to the individual solution in performance.
6.3 Predictive Optimization
As noted in §6.2 it is highly desirable to change link weights in-
frequently. In the previous section we showed that we could derive
a set of weights which work well for an entire day’s set of trafﬁc
matrices. The question arises “how often need one change these
weights?” Clearly, the answer is no more than once per day. How-
optimization
method
Global OSPF
Global OSPF
Adaptive MPLS
trafﬁc matrix
tomogravity
true
true
performance (%)
MMU
AMU
48.1
57.7
52.4
45.4
42.5
51.8
Table 2: The AMU and MMU of the global routing optimiza-
tion over one day.
ever, if one wishes to change them even less frequently, we must be
concerned with how well today’s set of weights will perform in the
future, that is, the predictive strength of the optimized weights.
This is a much harder problem than we have considered so far
because any large, operational network changes continuously: new
links are added, and old links re-homed, or retired. Note that in our
data-sets we obtain routing and topology information at 24 hour
intervals, so for the purposes of the previous examples the network
appeared unchanged over the 24 hour period, although in fact it
may have changed. Hence, even for 24 hour global optimization
the estimated weights must be robust against network changes.
Obviously, in a full system for optimizing network routing there
would be careful consideration given to weights for new links, and
some kind of readjustment when the topology of the network is
otherwise changed. However, we shall consider the very simple
case where we assign maximal possible weights to new links (cost
them out), which results in routing only over the previously existing
network. This is obviously sub-optimal, but as we shall show, the
weight optimization algorithm still performs well.
Figure 6 (a) shows the result of applying the weights derived
from global optimization of the estimated trafﬁc matrices from the
1st of July, 2002, to the real trafﬁc on a series of days from the
1st to the 8th of July. We chose this period because there were no
backbone network changes until the 8th, when a large link change
occurred. For comparison Figure 6 (b) shows the result of inverse
capacity weighting using the same scale for the y-axis.
The results show that the method consistently and signiﬁcantly
outperforms inverse capacity weighting, despite using weights op-
timized for a different day. This is despite the changes in the trafﬁc
matrices, which typically exhibit strong weekly variations as well
as daily variations. Most notably, some sudden change in trafﬁc
behavior occurred between midnight and 1am on Saturday the 7th,
causing high maximum utilization under inverse capacity weight-
ing (the ﬁrst cross in Figure 6 (b)). Despite such a sudden change,
the method works very well, reducing the maximum utilization by
nearly 50%.
The results also show that the inverse capacity weighting per-
formance varies considerably during the week. As we know the
network does not change during the period before the 8th, these
changes must be the result of changes in the trafﬁc matrix. For
instance, because of the weekly cycle in the trafﬁc, or potentially
because of changes in the the Border Gateway Protocol (BGP) pol-
icy, which controls routing along a large part of the edge of the