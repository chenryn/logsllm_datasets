的特性类的一个Type对象，在这种情况下，GetCustomAttributes（）方法就返回一个数
组，该数组包含指定类型的所有特性。
注意，所有特性都作为一般的Attribute引用来获取。如果要调用为自定义特性定义的
任何方法或属性，就需要把这些引用显式转换为相关的自定义特性类。调用
Assembly.GetCustomAttributes（）的另一个重载方法，可以获得与给定数据类型相关的自
定义特性的详细信息，这次传递的是一个Type引用，它描述了要获取的任何相关特性的
类型。另一方面，如果要获得与方法、构造函数和字段等相关的特性，就需要调用
GetCustomAttributes（）方法，该方法是MethodInfo、ConstructorInfo和FieldInfo等类的一
个成员。
如果只需要给定类型的一个特性，就可以调用GetCustomAttribute（）方法，它返回
一个Attribute对象。在WhatsNewAttributes示例中使用GetCustomAttribute（）方法，是为
了确定程序集中是否有SupportsWhatsNew特性。为此，调用GetCustomAttributes（）方
法，传递对WhatsNewAttributes程序集的一个引用和SupportWhatsNewAttribute特性的类
型。如果有这个特性，就返回一个Attribute实例。如果在程序集中没有定义任何实例，就
返回null。如果找到两个或多个实例，GetCustomAttribute（）方法就抛出一个
System.Reflection. AmbiguousMatchException异常。该调用如下所示：
    Attribute supportsAttribute =
      Attribute.GetCustomAttributes(assembly1, typeof(SupportsWhatsNewAttribute))
;
16.3.4 完成WhatsNewAttributes示例
现在已经有足够的知识来完成WhatsNewAttributes示例了。为该示例中的最后一个程
序集LookupWhatsNew编写源代码，这部分应用程序是一个控制台应用程序，它需要引用
其他两个程序集WhatsNewAttributes和VectorClass。
LookupWhatsNew项目的示例代码使用了如下依赖项和名称空间：
依赖项：
    NETStandard.Library
    VectorClass
    WhatsNewAttributes
名称空间：
    System
    System.Collections.Generic
    System.Linq
    System.Reflection
    System.Text
    WhatsNewAttributes
    static System.Console
在这个文件的源代码中，首先指定要使用的名称空间System.Text，因为需要再次使
用一个StringBuilder对象。System.Linq用于过滤一些特性（代码文件
LookupWhatsNew/Program.cs）：
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Reflection;
    using System.Text;
    using WhatsNewAttributes;
    using static System.Console;
    namespace LookUpWhatsNew
    {
Program类包含主程序入口点和其他方法。我们定义的所有方法都在这个类中，它还
有两个静态字段：outputText和backDateTo。outputText字段包含在准备阶段创建的文本，
这个文本要写到消息框中，backDateTo字段存储了选择的日期——自从该日期以来进行的
所有修改都要显示出来。一般情况下，需要显示一个对话框，让用户选择这个日期，但我
们不想编写这种代码，以免转移读者的注意力。因此，把backDateTo字段硬编码为日期
2015年2月1日。在下载这段代码时，很容易修改这个日期：
    class Program
    {
      private static readonly StringBuilder outputText = new StringBuilder(1000);
      private static DateTime backDateTo = new DateTime(2015, 2, 1);
      static void Main()
      {
        Assembly theAssembly = Assembly.Load(new AssemblyName("VectorClass"));
        Attribute supportsAttribute = theAssembly.GetCustomAttribute(
          typeof(SupportsWhatsNewAttribute));
        string name = theAssembly.FullName;
        AddToMessage($"Assembly: {name}");
        if (supportsAttribute == null)
        {
          AddToMessage("This assembly does not support WhatsNew attributes");
          return;
        }
        else
        {
           AddToMessage("Defined Types:");
        }
        IEnumerable types = theAssembly.ExportedTypes;
        foreach(Type definedType in types)
        {
           DisplayTypeInfo(definedType);
        }
        WriteLine($"What\`s New since {backDateTo:D}");
        WriteLine(outputText.ToString());
        ReadLine();
      }
      //...
    }
Main（）方法首先加载VectorClass程序集，验证它是否真的用SupportsWhatsNew特性
标记。我们知道，VectorClass程序集应用了SupportsWhatsNew特性，虽然才编译了该程序
集，但进行这种检查还是必要的，因为用户可能希望检查这个程序集。
验证了这个程序集后，使用Assembly.ExportedTypes属性获得一个集合，其中包括在
该程序集中定义的所有类型，然后在这个集合中遍历它们。对每种类型调用一个方法——
DisplayTypeInfo（），它给outputText字段添加相关的文本，包括LastModifiedAttribute类
的任何实例的详细信息。最后，显示带有完整文本的控制台。DisplayTypeInfo（）方法如
下所示：
    private static void DisplayTypeInfo(Type type)
    {
      // make sure we only pick out classes
      if (! type.GetTypeInfo().IsClass))
      {
        return;
      }
      AddToMessage($"\nclass {type.Name}");
      IEnumerable attributes = type.GetTypeInfo()
        .GetCustomAttributes().OfType();
      if (attributes.Count() == 0)
      {
        AddToMessage("No changes to this class\n");
      }
      else
      {
        foreach (LastFieldModifiedAttribute attribute in attributes)
        {
          WriteAttributeInfo(attribute);
        }
      }
      AddToMessage("changes to methods of this class:");
      foreach (MethodInfo method in
        type.GetTypeInfo().DeclaredMembers.OfType())
      {
        IEnumerable attributesToMethods =
          method.GetCustomAttributes().OfType();
        if (attributesToMethods.Count() > 0)
        {
          AddToOutput($"{method.ReturnType} {method.Name}()");
          foreach (Attribute attribute in attributesToMethods)
          {
            WriteAttributeInfo(attribute);
          }
        }
      }
    }
注意，在这个方法中，首先应检查所传递的Type引用是否表示一个类。因为，为了
简化代码，指定LastModified特性只能应用于类或成员方法，如果该引用不是类（它可能
是一个结构、委托或枚举），那么进行任何处理都是浪费时间。
接着使用type.GetTypeInfo（）.GetCustomAttributes（）方法确定这个类是否有相关的
LastModified-Attribute实例。如果有，就使用辅助方法WriteAttributeInfo（）把它们的详细
信息添加到输出文本中。
最后，使用TypeInfo类型的DeclaredMembers属性遍历这种数据类型的所有成员方
法，然后对每个方法进行相同的处理（类似于对类执行的操作）：检查每个方法是否有相
关的LastModifiedAttribute实例，如果有，就用WriteAttributeInfo（）方法显示它们。
下面的代码显示了WriteAttributeInfo（）方法，它负责确定为给定的
LastModifiedAttribute实例显示什么文本，注意因为这个方法的参数是一个Attribute引用，
所以需要先把该引用强制转换为LastModifiedAttribute引用。之后，就可以使用最初为这
个特性定义的属性获取其参数。在把该特性添加到要显示的文本中之前，应检查特性的日
期是否是最近的：
    private static void WriteAttributeInfo(Attribute attribute)
    {
      LastModifiedAttribute lastModifiedAttrib =
        attribute as LastModifiedAttribute;
      if (lastModifiedAttrib == null)
      {
        return;
      }
      // check that date is in range
      DateTime modifiedDate = lastModifiedAttrib.DateModified;
      if (modifiedDate 
注意，在列出VectorClass程序集中定义的类型时，实际上选择了两个类：Vector类和
内嵌的VectorEnumerator类。还要注意，这段代码把backDateTo日期硬编码为2月1日，实
际上选择的是日期为6月6日的特性（添加集合支持的时间），而不是前述日期。
16.4 为反射使用动态语言扩展
前面一直使用反射来读取元数据。还可以使用反射，从编译时还不清楚的类型中动态
创建实例。下一个示例显示了创建Calculator类的一个实例，而编译器在编译时不知道这
种类型。程序集CalculatorLib是动态加载的，没有添加引用。在运行期间，实例化
Calculator对象，调用方法。知道如何使用反射API后，使用C# dynamic关键字可以完成相
同的操作。这个关键字自C# 4版本以来，就成为C#语言的一部分。
16.4.1 创建Calculator库
要加载的库是一个简单的类库（包），包含Calculator类型与Add和Subtract方法的实
现代码。因为方法是很简单的，所以它们使用表达式语法实现（代码文件CalculatorLib 
/
Calculator.cs）:
    namespace CalculatorLib
    {
      public class Calculator
      {
        public double Add(double x, double y) => x + y;
        public double Subtract(double x, double y) => x - y;
      }
    }
编译库后，将DLL复制到文件夹c:/ addins。为了创建Class Library （Package）项目的
输出，在Project Properties的Build选项卡上，选择Produce Outputs on Build选项（见图16-
1）。
图16-1
根据是使用客户端应用程序的.NET Core还是.NET Framework版本，需要将相应的库
复制到c:/addins文件夹。为了在Visual 
Studio中选择要运行应用程序的平台，用Project
Properties选择Debug设置，再选择Platform设置，如图16-2。
图16-2
16.4.2 动态实例化类型
为了使用反射动态创建Calculator实例，应创建一个Console Application（Package），
命名为ClientApp。
常量CalculatorLibPath、CalculatorLibName和CalculatorTypeName定义了库的路径、程
序集的名字和Calculator类型的名称（包括名称空间）。Main方法调用方法ReflectionOld和
ReflectionNew，这两个变体进行反射（代码文件DynamicSamples 
/ 
ClientApp 
/
Program.cs）：
    class Program
    {
      private const string CalculatorLibPath = @"c:/addins/CalculatorLib.dll";
      private const string CalculatorLibName = "CalculatorLib";
      private const string CalculatorTypeName = "CalculatorLib.Calculator";
      static void Main()
      {
        ReflectionOld();
        ReflectionNew();
      }
      //etc.
    }
使用反射调用方法之前，需要实例化Calculator类型。这有不同的方式。使用.NET
Framework，方法GetCalculator会使用方法AssemblyLoadFile动态加载程序集，使用
CreateInstance方法创建Calculator类型的一个实例。使用预处理器指令#if NET46，这部分
代码只对.NET 4.6编译（代码文件DynamicSamples / ClientApp / Program.cs）：
    #if NET46
      private static object GetCalculator()
      {
        Assembly assembly = Assembly.LoadFile(CalculatorLibPath);
        return assembly.CreateInstance(CalculatorTypeName);
      }
    #endif
编译.NET 4.6代码时，上述代码片段使用了NET46符号。这是可能的，因为对于列在
project.json文件中的框架，符号是用相同的名称自动创建的；framework名称只是转换为
大写。还可以在compilationOptions声明中定义自己的符号。在框架声明的
compilationOptions中指定一个define部分，只为特定的框架定义符号。下面的代码片段只
在给.NET Core编译应用程序时，指定符号DOTNETCORE。（代码文件DynamicSamples /
ClientApp / project.json）：
    "frameworks": {
      "net46": {},
      "netstandard1.0": {
        "dependencies": {},
        "buildOptions": {
          "define": [ "DOTNETCORE" ]
        }
      }
    }
.NET Core的实现需要独立于平台，所以不能给.NET Core编译前面的代码。在这里，
需要更多的代码加载程序集。首先，从文件系统中检索IAssemblyLoadContext，加载程序
集。检索出加载上下文后，添加DirectoryLoader（这将在下一步中实现），从文件系统中
加载程序集。设置上下文后，可以使用Load方法加载Assembly，用Activator类的
CreateInstance方法动态实例化类型（代码文件的
DynamicSamples/ClientApp/Program.cs）：
    #if DOTNETCORE
      private static object GetCalculator()
      {
          Assembly assembly =
      Assembly.LoadContext.Default.LoadFromAssemblyPath(CalculatorLib Path);
          Type type = assembly.GetType(CalculatorTypeName);
          return Activator.CreateInstance(type);
        }
类DirectoryLoader和加载的上下文一起使用，实现了接口IAssemblyLoader。这个接口
定义了Load和LoadUnmanagedLibrary方法。因为只有托管的程序集加载到示例应用程序
中，所以只有Load方法需要实现。这个实现代码利用上下文加载程序集文件（代码文件
DynamicSamples /ClientApp/ Program.cs）：
    public class DirectoryLoader : IAssemblyLoader
    {
      private readonly IAssemblyLoadContext _context;
      private readonly string _path;
      public DirectoryLoader(string path, IAssemblyLoadContext context)
      {
        _path = path;
        _context = context;
      }
      public Assembly Load(AssemblyName assemblyName) =>