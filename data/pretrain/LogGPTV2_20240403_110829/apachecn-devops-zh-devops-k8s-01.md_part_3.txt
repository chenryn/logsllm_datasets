尽管持续集成和持续交付自动化流程有助于开发和部署多个微服务，但虚拟机、操作系统、库以及磁盘卷和网络等资源的数量和复杂性无法与单一应用相比。
因此，有一些工具和角色可以支持云上的这些大型自动化环境。
# 自动化和工具
如前所述，自动化是实现快速软件交付的最佳实践，并解决了管理许多微服务的复杂性。然而，自动化工具不是普通的信息技术/基础设施应用，如**活动目录**、**绑定**(域名系统)和**发送邮件** (MTA)。为了实现自动化，有一个工程师既要有编写代码(尤其是脚本语言)的开发人员技能，又要有虚拟机、网络和存储等基础架构操作员技能。
DevOps 是*开发*和*运营*的组合，能够实现自动化流程，如持续集成、基础设施即代码和持续交付。DevOps 使用一些 DevOps 工具来实现这些自动化过程。
# 持续集成工具
VCS 流行的工具之一是 Git([https://git-scm.com](https://git-scm.com))。开发人员使用 Git 一直签入和签出代码。有一些托管 Git 服务:GitHub([https://github.com)](https://github.com))和 Bitbucket([https://bitbucket.org](https://bitbucket.org))。它允许您创建和保存您的 Git 存储库，并与其他用户协作。下面的截图是 GitHub 上的一个拉取请求示例:
![](img/00015.jpeg)
构建服务器有很多变化。Jenkins([https://Jenkins . io](https://jenkins.io))是其中一个成熟的应用，它与 team city([https://www.jetbrains.com/teamcity/)](https://www.jetbrains.com/teamcity/))相同。除了构建服务器，您还拥有托管服务，**软件即服务(SaaS)** 如 Codeship([https://codeship.com)](https://codeship.com))和 Travis CI([https://travis-ci.org)](https://travis-ci.org))。SaaS 有实力与其他 SaaS 工具整合。
构建服务器能够调用外部命令，如单元测试程序；因此，构建服务器是 CI 管道中的一个关键工具。
下面的截图是使用 Codeship 构建的示例；它从 GitHub 中检出代码，并调用 Maven 来构建(`mvn compile`)和单元测试(`mvn test`):
![](img/00016.jpeg)
# 连续交付工具
配置管理中最受欢迎的配置管理工具有 Puppet([https://puppet.com](https://puppet.com))、Chef([https://www . Chef . io](https://www.chef.io))和 ansi ble([https://www.ansible.com](https://www.ansible.com))等。
AWS OpsWorks([https://aws.amazon.com/opsworks/](https://aws.amazon.com/opsworks/))提供托管厨师平台。以下截图是使用 AWS OpsWorks 安装亚马逊 CloudWatch 日志代理的厨师食谱(配置)。当启动 EC2 实例时，它自动安装 CloudWatch 日志代理:
![](img/00017.jpeg)
AWS 云信息([https://aws.amazon.com/cloudformation/)](https://aws.amazon.com/cloudformation/))有助于实现代码形式的基础设施。它支持自动气象站操作的自动化，例如，执行以下功能:
1.  创造一个 VPC。
2.  在 VPC 创建子网。
3.  在 VPC 创建一个互联网网关。
4.  创建路由表，将子网与互联网网关相关联。
5.  创建安全组。
6.  创建虚拟机实例。
7.  将安全组与虚拟机实例相关联。
云信息的配置由 JSON 编写，如下图所示:
![](img/00018.jpeg)
它支持参数化，因此使用具有相同配置的 JSON 文件创建具有不同参数的附加环境(例如，VPC 和 CIDR)非常容易。此外，它支持更新操作。因此，如果需要更改基础架构的一部分，则无需重新创建。CloudFormation 可以识别配置的增量，并只代表您执行必要的基础架构操作。
AWS CodeDeploy([https://aws.amazon.com/codedeploy/)](https://aws.amazon.com/codedeploy/))也是一个有用的自动化工具。但是要专注于软件部署。它允许用户定义。以下是对 YAML 文件的一些操作:
1.  在哪里下载和安装。
2.  如何停止应用？
3.  如何安装应用？
4.  安装后，如何启动和配置应用。
以下截图是 AWS CodeDeploy 配置文件`appspec.yml`的示例:
![](img/00019.jpeg)
# 监控和记录工具
一旦您开始使用云基础架构管理一些微服务，就有一些监控工具可以帮助您管理服务器。
**亚马逊** **CloudWatch** 是 AWS 上内置的监控工具。不需要安装代理；它会自动从 AWS 实例中收集一些指标，并为 DevOps 可视化。它还支持根据您设置的标准设置警报。以下截图是针对 EC2 实例的亚马逊云观察指标:
![](img/00020.jpeg)
亚马逊云观察也支持收集应用日志。它需要在 EC2 实例上安装代理；但是，当您需要开始管理多个微服务实例时，集中式日志管理非常有用。
ELK 是 stack 的流行组合，代表 elastic search([https://www.elastic.co/products/elasticsearch](https://www.elastic.co/products/elasticsearch))、Logstash([https://www.elastic.co/products/logstash](https://www.elastic.co/products/logstash))和 Kibana([https://www.elastic.co/products/kibana](https://www.elastic.co/products/kibana))。Logstash 有助于聚合应用日志并转换为 JSON 格式，然后发送到 Elasticsearch。
Elasticsearch 是一个分布式 JSON 数据库。Kibana 可以可视化存储在 Elasticsearch 上的数据。以下示例是一个 Kibana，它显示了 Nginx 访问日志:
![](img/00021.jpeg)
grafana([https://grafana.com](https://grafana.com))是另一个流行的可视化工具。过去与石墨([)https://graphiteapp.org(](https://graphiteapp.org)))或英夫西数据库([)https://www.influxdata.com(](https://www.influxdata.com)))等时间序列数据库连接。时间序列数据库旨在存储数据，这些数据是平面的、非标准化的数字数据，如 CPU 使用率和网络流量。与关系数据库管理系统不同，时间序列数据库有一些优化，以节省数据空间和更快地查询数字数据历史。大多数 DevOps 监控工具都是在后端使用时间序列数据库。
以下示例是一个 Grafana，显示了**消息队列服务器**的统计信息:
![](img/00022.jpeg)
# 交流工具
一旦您开始使用我们前面看到的几个 DevOps 工具，您需要来回访问几个控制台来检查 CI 和 CD 管道是否正常工作。例如，考虑以下几点:
1.  将源代码合并到 GitHub。
2.  触发詹金斯的新版本。
3.  触发 AWS 代码部署来部署新版本的应用。
这些事件需要按时间顺序进行跟踪，如果出现一些麻烦，DevOps 需要和开发人员、QA 讨论，处理案例。然而，也有一些过度沟通的需求，因为 DevOps 需要一个接一个地捕捉事件，然后解释，可能是通过电子邮件。这是没有效率的，与此同时，这个问题还在继续。
有一些交流工具可以帮助集成这些 DevOps 工具，任何人都可以加入进来观看活动并互相评论。slack([https://slack.com](https://slack.com))和 HipChat([https://www.hipchat.com](https://www.hipchat.com))是最受欢迎的交流工具。
这些工具支持集成到 SaaS 服务，这样 DevOps 就可以在单个聊天室中看到事件。下面的截图是一个与 Jenkins 集成的 Slack 聊天室:
![](img/00023.jpeg)
# 公共云
当与云技术一起使用时，CI 光盘和自动化工作可以轻松实现。尤其是公有云 API 帮助 DevOps 想出了很多 CI 光盘工具。亚马逊网络服务([https://aws.amazon.com)](https://aws.amazon.com))和谷歌云平台([https://cloud.google.com)](https://cloud.google.com))等公有云为 DevOps 提供了一些 API 来控制云基础设施。DevOps 可以缓解容量和资源的限制，只需在需要资源时随用随付。
公有云将以软件开发周期和架构设计同样的方式持续增长；这些都是最好的朋友，也是实现应用/服务成功的重要关键。
以下截图是亚马逊网络服务的网络控制台:
![](img/00024.jpeg)
谷歌云平台也有一个网络控制台，如下所示:
![](img/00025.jpeg)
这两种云服务都有一个免费试用期，DevOps 工程师可以用它来尝试和了解云基础设施的好处。
# 摘要
在这一章中，我们讨论了软件开发方法论、编程演进和 DevOps 工具的历史。这些方法和工具支持更快的软件交付周期。微服务设计也有助于持续的软件更新。然而，微服务使得环境管理变得复杂。
下一章将描述 Docker 容器技术，它有助于构建微服务应用，并以更有效和自动化的方式管理它。