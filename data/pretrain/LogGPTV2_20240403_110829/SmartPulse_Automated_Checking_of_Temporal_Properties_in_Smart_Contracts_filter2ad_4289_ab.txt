by each participant. Since the interface of the contract has
changed, we also need to change the fairness constraint to:
♦start(withdraw, closed ∧ L (cid:54)= winner ∧ L = msg.sender)
This says that a losing bidder L will eventually call
the
withdraw function after the auction has closed. With this
revised implementation and fairness constraint, SMARTPULSE
is now able to verify the correctness of the auction.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:30:07 UTC from IEEE Xplore.  Restrictions apply. 
556
function withdraw() public {
require(closed);
refund = refunds[msg.sender];
refunds[msg.sender] = 0;
msg.sender.transfer(refund);
1
2
3
4
5
6
}
Fig. 3: Replacement of method refund in Figure 2
B. Design Choices behind SMARTPULSE
With this motivating example in mind, we now highlight
important design choices behind our approach.
Spec language. Our speciﬁcation language, SMARTLTL, pro-
vides useful predicates like ﬁnish, send, start, and revert that
allow users to constrain important events occurring during
the life of a smart contract. Without such an interface, a
user would have to manually instrument the program with
auxiliary variables and express the temporal property using
pure LTL. By providing a higher-level speciﬁcation language,
SMARTPULSE raises the level of abstraction and automatically
performs any required program instrumentation.
Attacks. As our example demonstrates, smart contracts can be
vulnerable in subtle ways that only arise when they interact
with a malicious contract through its falback methods. To this
end, SMARTPULSE can be parameterized with an adversary
model that allows users to customize the capabilities of an
attacker. Crucially, for vulnerable contracts, SMARTPULSE can
also generate concrete attacks, including scenarios that require
synthesizing a malicious fallback method.
Reverts. As illustrated in our example, liveness properties can
be violated due to exceptions (i.e., “reverts”). Thus, it is crucial
to develop a technique that can reason about exceptions.
Gas usage. As we also saw in this example, subtle vulnera-
bilities may arise to due to not having enough gas to perform
some computation. Thus, our technique must also reason about
the contract’s gas usage.
III. BACKGROUND
In this section we present some background material
required for understanding the rest of this paper.
A. Ethereum Virtual Machine
The EVM is an environment in which Ethereum accounts
interact with each other. Ethereum offers two types of ac-
counts: external accounts that are owned by people and
contract accounts that store and execute code. Every account
has a balance indicating the amount of Ether (Ethereum’s
crypto-currency) owned by that account. Accounts interact
with each other by issuing transactions, which execute code
or transfer Ether between accounts.
In EVM, computations are performed by miners, who get a
fee (measured in gas) for performing that computation. Thus,
whenever an account issues a transaction, it must provide a
certain amount of gas that can be used to pay these miners.
If the issuing account does not provide sufﬁcient gas, the
transaction is reverted, and no modiﬁcations to the blockchain
are made. Otherwise, the transaction is be successful, and all
modiﬁcations are committed to the blockchain.
B. Solidity Programming Language
Solidity (the most popular programming language for smart
contract development) is a statically-typed, object-oriented
→ contract CName { (f : τ )∗ m +}
Prog P → C+
Con C
Func m → def m(v : τ ) = s
Stmt s → sA | s; s | if v then s else s | while v do s
Atom sA → l ← e | return v | revert | assume v
LHS l
Expr e → l | c | (cid:63) | v.m(v) | v.transfer(v) | v ⊕ v | (cid:11) v
Base τB → int | bool | address
Fig. 4: Core fragment of Solidity, where ⊕ and (cid:11) indicate
binary and unary operators respectively.
Type τ → τB | τB (cid:90)⇒ τ | C
→ v | v.f | v[v]
language with features targeted to the EVM. In this paper, we
model Solidity’s key features using the language presented in
Figure 4. In particular, a Solidity program consists of a set of
contracts, where each contract has a set of ﬁelds (called state
variables) and methods, one of which is a designated fallback
method. Accounts can invoke the contract’s public methods to
initiate a transaction that executes the body of that method.1
In what follows, we brieﬂy explain Solidity features that are
relevant to the rest of this paper.
Types. In addition to int and bool, Solidity provides the
address primitive type for uniquely identifying an Ethereum
account. Every contract name can be used as a type, and
mappings τB(cid:90)⇒ τ are ﬁrst-class citizens.
Revert. The revert construct in Solidity initiates the rollback
of a transaction and undoes all side effects of the current
transaction on the blockchain.2 In the remainder of this paper,
we use the terms “revert” and “exception” interchangeably.
Ether transfer. Solidity provides multiple constructs for trans-
ferring Ether; we model all of these using x.transfer(y), which
sends y amount of Ether from this contract to address x. If
x is the address of a contract C, then C’s fallback method
is executed immediately following the successful transfer of
Ether. Note that fallback methods can execute arbitrary code,
including calling methods of the contract that initiated the
transfer — this is known as reentrancy.
Veriﬁcation constructs. Since we use the same language
presented in Figure 4 for program instrumentation, our core
language contains two constructs that facilitate veriﬁcation.
First, we use the symbol (cid:63) to denote a non-deterministic value.
Second, assume v tells the veriﬁer to assume that boolean
variable v is true. Note that our assume statement is only
for veriﬁcation purposes and is not the same as the require
statement in Solidity, which can be modeled using revert.
External calls. We say that a call is an external call if a
method from a different program is called, or a call is made
to built-in functions like transfer.
EVM-speciﬁc features. Solidity passes an implicit EVM-
speciﬁc parameter called msg that contains information perti-
nent to the call. For example, msg.sender stores the address
of the account that initiated the call.
IV. SPECIFYING PROPERTIES IN SMARTLTL
In this section, we describe the syntax and semantics of our
SMARTLTL speciﬁcation language.
1In this paper, we assume all methods are public.
2Depending on the Solidity version, reverts can be expressed in multiple
ways (e.g., throw, require, etc.). We model all of these using revert.
557
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:30:07 UTC from IEEE Xplore.  Restrictions apply. 
Spec ς → (ϕ, ϕ)
LTL ϕ → φ | ¬ϕ | ϕ ∧ ϕ | ϕ ∨ ϕ | ϕ ⇒ ϕ
ϕ | (cid:3) ϕ | ♦ϕ | ϕ U ϕ
| c
Atom φ → start(f, ψ) | ﬁnish(f, ψ) | revert(f, ψ) | send(ψ)
Pred ψ → t comp t | ¬ψ | ψ ∧ ψ | ψ ∨ ψ
Term t → X | e | t op t
Exp e → v | e.f | f (e) | old(v) | csum(v) | fsum(f, v, ψ)
Fig. 5: Syntax of SMARTLTL.
A. Syntax and Informal Semantics
d
As shown in Figure 5, a SMARTLTL speciﬁcation consists
of a pair of formulas (ϕF, ϕP) where ϕF is a fairness assump-
tion and ϕP is the actual temporal property we want to verify.
As illustrated in Section II, fairness assumptions are useful
for expressing how a rational agent would use the contract
(e.g., a user who wants to withdraw their money would invoke
the withdraw transaction until they receive the fund). Thus,
when checking for the property of interest, we can disregard
executions where the fairness assumptions are violated.
Both fairness assumptions and correctness properties in
SMARTLTL are expressed as LTL-like formulas that contain
boolean connectives and temporal operators such as always
), and until (U). However, unlike
((cid:3)), eventually (♦), next (
standard LTL where the basic building blocks are propositional
variables, the building blocks of SMARTLTL are Solidity-
speciﬁc predicates, which we explain next.
Expressions. SMARTLTL expressions include variables v,
ﬁeld accesses e.f, and function calls f (e) where f is a pure
function. In addition, SMARTLTL provides a construct of the
form old(v), which refers to the value of a program variable at
the beginning of the current transaction. speclang also provides
two aggregation constructs, csum and fsum, that we found to
be very useful for writing speciﬁcations. Given a mapping v,
csum(v) yields the sum of all values stored in v. Similarly,
fsum(f, v, ψ) allows aggregation of function argument values
throughout the execution of the contract. That is, fsum(f, v, ψ)
yields the sum of all values provided as argument v of f over
all successful invocations satisfying constraint ψ. For instance,
fsum(f, x0, x0 > 0) yields the sum of all positive-valued ﬁrst
arguments of f throughout the contract’s execution.
Terms. SMARTLTL terms include expressions e as well as free
(but implicitly-universally quantiﬁed) variables X. Terms can
be composed using standard arithmetic operators op.
Atomic predicates. The basic building blocks of a SMARTLTL
speciﬁcation are atomic predicates φ that refer to Solidity
events. SMARTLTL provides four key predicates:
1) Predicate start(f, ψ) is true if a transaction f is started
in a context that satisﬁes predicate ψ.
2) Predicate ﬁnish(f, ψ) evaluates to true if f has success-
fully ﬁnished executing in a state satisfying ψ. We do not
consider a transaction to be ﬁnished if f reverts.
3) Predicate revert(f, ψ) is true if transaction f is reverted
when started in a context satisfying ψ.
4) Predicate send(ψ) is true if transfer is called in a state
satisfying ψ.
The last predicate send(ψ) is actually just syntactic sugar
for start(transfer, ψ); however, we include it as a separate
(cid:86)
f∈CMethods
Pred(f, ψ).
predicate for convenience.3 Also, for a predicate Pred(f, ψ),
we allow users to write (cid:63) instead of a speciﬁc function f. Here,
the wildcard symbol (cid:63) denotes any function, so Pred((cid:63), ψ) is
equivalent to writing
Informal semantics. To understand SMARTLTL semantics,
we ﬁrst need a notion of “time step”. Since SMARTLTL
predicates talk about starting and ﬁnishing transactions, we
consider the clock to “tick” every time an external function
is called or that function returns/reverts. Thus, the next time
step indicates the next call/return/revert event from an external
function, which includes built-in functions as well as methods
deﬁned by a different contract. Under this notion of “time
step”, SMARTLTL operators have the following semantics:
• The next operator d expresses that a predicate is true in the
next time step.
hold at some point in the future.
ally (i.e., every time an external function is called).
• The always operator (cid:3) captures that a property holds glob-
• The eventually operator ♦ expresses that the property will
• The until operator U expresses that its ﬁrst argument con-
tinues to be true until the second argument becomes true.
Formal semantics. We formalize SMARTLTL semantics in
terms of execution traces. For the purposes of this paper,
an execution trace τ is a sequence of triples of the form
(f, κ, σ) where f is the name of an external
function,
κ ∈ {call(x), return, revert}, and σ is a valuation mapping
SMARTLTL terms to their values. Given a SMARTLTL for-
mula ϕ and a trace τ, we write τ |= ϕ (resp. τ (cid:54)|= ϕ) to denote
that ϕ evaluates to true (resp. false) under trace τ. A complete
formalization of this relation is in Appendix A.
Given a SMARTLTL speciﬁcation ς ≡ (ϕF, ϕP) consisting
of fairness assumptions ϕF and property ϕP, we say that an
execution trace τ satisﬁes ς, denoted τ |= ς, if and only if (a)
either τ (cid:54)|= ϕF, or (b) τ |= ϕP. Then, given a Solidity contract
P and SMARTLTL speciﬁcation ς, we say that P satisﬁes
the speciﬁcation, written P |= ς, if, for all feasible execution
traces τ of P, we have τ |= ς.
Example IV.1. Consider a crowdsale that allows users to
invest in a beneﬁciary by buying tokens. An important cor-
rectness property for such a crowdsale is that the beneﬁciary
will eventually receive all funds that have been invested.
We express this property as (ϕF, ϕP) shown in Figure 6.
The fairness property (ϕF) speciﬁes that
if the crowdsale
closes, the beneﬁciary, b, will eventually try to withdraw the
invested funds. The temporal property (ϕP) speciﬁes that if the
crowdsale eventually closes successfully (i.e., the sum of the
investments is greater than the fundraising goal at closing),
then eventually the beneﬁciary will be sent the total sum of
tokens bought using the buy function, after which no more
ether is sent to the beneﬁciary.
V. SPECIFYING ENVIRONMENT MODELS
In addition to the contract’s source code and a SMARTLTL
speciﬁcation, SMARTPULSE also takes as input an environment
model E = (A,B) where A models the attacker and B speci-
ﬁes assumptions about the Blockchain execution environment.
By default, SMARTPULSE provides a standard Blockchain
3The semantics of send(ψ) is on purpose not ﬁnish(transfer, ψ) because
we can never guarantee that send will successfully ﬁnish, as the receiver’s
fallback method is free to call revert.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:30:07 UTC from IEEE Xplore.  Restrictions apply. 
558
ϕF : (cid:3) (ﬁnish(close) → ♦start(withdraw, msg.sender = b))
ϕP : ♦(ﬁnish(close, csum(investments) ≥ goal)) →
♦(cid:0)send(amount = fsum(buy, msg.value, true) ∧ to = b) ∧ d(cid:3) (¬send(to = b))(cid:1)
Fig. 6: Speciﬁcation for crowdsale contract from Example IV.1
model that need not be modiﬁed by users, as this model
only changes due to modiﬁcations to the EVM or Solidity
compiler. SMARTPULSE also provides three default attacker
models, which can be further customized by users.
Specifying attacker model. Formally, an attacker model is a
triple A = (σ0,F, η) where:
• σ0 speciﬁes the initial Blockchain state as a mapping from
contract instances C to symbolic values describing their
initial state. We assume that the attacker can only invoke
transactions deﬁned by those contract instances in C.
• F ⊆ CMethods(C) is the set of functions that may be
• η ∈ N ∪ {∞} is the maximum number of contract methods
invoked by the attacker (e.g., through fallback methods).
that the attacker can invoke.
While the user is free to explicitly deﬁne her own attacker
model, SMARTPULSE provides three default models that share
the same initial state σ0 but differ in F and η. For all three
default models, the initial state consists of a single instance of
the contract to be analyzed, and the initial state of the contract
is determined by symbolically executing the constructor on
symbolic inputs.4 We now explain how the three default
attacker models differ from each other.
1) No reentrancy. For our most restrictive attacker model,
we have F = ∅ and η = 0. This model corresponds to the
assumption that there is no re-entrancy and can be useful
for analyzing contracts that satisfy the effective external
callback freedom (EECF) assumption [27].
2) Single callback. For this model, we have η = 1 and F =
CMethods(C) where C is the set of contract instances in
σ0. In other words, this model allows an attacker to call
any contract method a single time, which is equivalent to
Zeus’ modeling of fallback functions [17].
3) Powerful adversary. For our least restrictive model, we
have η = ∞ and F = CMethods(C). This allows an
attacker to invoke any of the contract’s public functions
arbitrarily many times.
Blockchain model. In addition to the attacker model, SMART-
PULSE also utilizes a so-called Blockchain model that spec-
iﬁes assumptions about
the contract’s execution environ-
ment. Formally, a Blockchain model is a quadruple B =
(G, gmin, gmax, gtransfer) where:
• G : Stmt → N provides a cost model for the gas usage of
• gmin (resp. gmax) ∈ N is the minimum (resp. maximum) gas
• gtransfer ∈ N is the amount of gas provided to a transfer.
allowance a transaction can be provided.
each statement.
Because the Blockchain model is not contract-speciﬁc, a
single model is sufﬁcient for analyzing any contract using a
speciﬁc Solidity compiler and a speciﬁc EVM version. Thus,
in practice, users do not need to worry about conﬁguring
SMARTPULSE’s Blockchain model.
4If the contract to be analyzed involves auxiliary contracts, then the initial
state includes an instance of the auxiliary contracts as well.
559
Fig. 7: Program instrumentation pipeline
VI. PROGRAM INSTRUMENTATION
To verify a Solidity contract against a SMARTLTL spec-
iﬁcation, our method performs a sequence of three program
transformations, as shown in Figure 7. First, we incorporate the
environment model directly into the program. Next, we per-
form an instrumentation that accurately models the semantics
of revert by introducing so-called history variables. Finally,
we further instrument the program with boolean variables and
convert the original SMARTLTL speciﬁcation to standard LTL.
Next, we explain these transformations in more detail.
A. Modeling Environment
To incorporate the environment model E into a Solidity
program, we need to (1) model the attacker by introducing
non-deterministic fallback methods and explicitly invoking
them; (2) track the contract’s gas usage by introducing a new
variable; (3) generate a harness contract that simulates the
usage of the target contract.
Modeling the attacker. We model the attacker by creating
the transfer stub shown in Figure 8. Here, our stub ﬁrst
checks whether the sender’s balance is sufﬁcient to perform the
transfer (lines 2-3) and reverts if it is not. Otherwise, it adjusts
the sender’s and receiver’s balances accordingly (lines 4-5) and
ﬁnally calls the receiver account’s fallback method (line 6).
The attacker model A = (σ0,F, η) comes into play
when generating an implementation of the receiver’s fallback
method. As shown in Figure 8, our model performs up to η
iterations (line 10), and, in each iteration, it picks a contract
c under analysis and one of the methods m ∈ F that the
attacker is allowed to call under A. Then, it invokes c.m with
arbitrary arguments (line 13) and reverts if any of the method
calls within the fallback are also reverted.5
Modeling gas usage. In practice, important properties (esp.
those involving liveness) may be violated when a contract runs
out of gas. Thus, our instrumentation introduces an auxiliary
variable gas and explicitly tracks gas usage.
Figure 9 presents our instrumentation (for relevant Solidity
statements) using the notation s (cid:32) s(cid:48), which indicates that s(cid:48)
is the instrumented version of s. For an atomic statement sA,
we decrement the gas variable by G(sA), and, if the value of
gas becomes negative, we revert the current transaction.
The next rule in Figure 9 shows how to perform gas instru-
mentation for method calls. Here, we generate two statements,
namely ιpre and ιpost, that precede and succeed the original
5Here, for simplicity, we assume that the return value of a method indicates
whether it was reverted. In reality, our instrumentation uses the history variable
described in Section VI-B to determine whether a method call was reverted.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:30:07 UTC from IEEE Xplore.  Restrictions apply. 
Incorporate env. modelModel revert  seman2csSmartLTL to regular LTLSpecProg PEnv. modelP’ς′ ςif (i > 100) then revert
else return i
contract C {
i : int;
def foo(j : int) = i ← i + j;
}