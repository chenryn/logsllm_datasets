# 2021 祥云杯 Crypto-Write Up
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 前言
芜湖，这次祥云杯又是神仙打架，密码学一共有四道题，个人觉得最后一道题目有意思一些。
## Random_RSA
    from Crypto.Util.number import *
    import gmpy2
    import libnum
    import random
    import binascii
    import os
    flag=r'flag{}'
    p=getPrime(512)
    q=getPrime(512)
    e=0x10001
    n=p*q
    ct=pow(flag,e,n)
    print("n="+ n)
    print("ct="+ ct)
    dp=r''
    seeds = []
    for i in range(0,len(dp)):
        seeds.append(random.randint(0,10000))
    res = [] 
    for i in range(0, len(dp)):
        random.seed(seeds[i])
        rands = []
        for j in range(0,4):
            rands.append(random.randint(0,255))
        res.append(ord(dp[i]) ^ rands[i%4])
        del rands[i%4]
        print(str(rands))
    print(res) 
    print(seeds)
题目不长，也意外的简单，值得一提的是题目介绍： **一把梭，好像不行哦** 。
然而好像就是一把梭的题目吖，没get到出题人的点喔，而且很奇怪的是，题目用的python2的环境，却直接在给flag字符串做整型pow操作，属实奇怪。
回到题目本身，倒也没有什么好说的，给了seeds，我们利用每个seeds生成四个随机数，用第四个随机数异或res的输出，然后ord一下，就能得到dp的一个数字，最后拼起来就能获得dp了。至于已知e,n,dp三个参数解密c获得明文，这里就不再赘述了，
**一把梭** 的事。
    from Crypto.Util.number import *
    import gmpy2
    import random
    import binascii
    import os
    seeds=[...]
    dps=[]
    res = [...]
    for i in range(0, len(res)):
        random.seed(seeds[i])
        rands = []
        for j in range(0,4):
            rands.append(random.randint(0,255))
        dps.append(res[i]^rands[i%4])
    dp = int(''.join(chr(i) for i in dps))
    n=...
    ct=...
    e=0x10001
    def rsa_nedp(n,e,dp):
        for i in range(1,e):
            if (dp*e-1)%i == 0:
                if n%(((dp*e-1)/i)+1)==0:
                    p=((dp*e-1)/i)+1
                    q=n/(((dp*e-1)/i))+1
                    return p,q
    p,q = rsa_nedp(n,e,dp)
    d = inverse(e,p-1)
    print(long_to_bytes(pow(ct,d,p)))
最后这里解密flag直接用p了，（单纯懒，少写一个字符是一个字符了）
## Guess
    from Crypto.Util.number import (
        bytes_to_long,
        getPrime,
        long_to_bytes,
        getRandomNBitInteger,
    )
    import random
    import hashlib
    from math import gcd
    import socketserver
    KEYSIZE = 512
    WELCOME = "welcome to my funny challenge !!! Can you guess right 32 times in a row? "
    String = "ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890abcdefghijklmnopqrstuvwxyz"
    def exgcd(a, b):
        if b == 0:
            return 1, 0, a
        else:
            x, y, q = exgcd(b, a % b)
            x, y = y, (x - (a // b) * y)
            return x, y, q
    def invert(a,p):
        x, y, q = exgcd(a,p)
        if q != 1:
            raise Exception("No solution.")
        else:
            return (x + p) % p
    def lcm(a,b):
        return a*b // gcd(a,b)
    def proof_of_work():
        STR = "".join([String[random.randint(0, len(String) - 1)] for _ in range(16)])
        HASH = hashlib.sha256(STR.encode()).hexdigest()
        return STR[:4], STR[4:], HASH
    def keygen():
        # part 1
        p, q = getPrime(KEYSIZE), getPrime(KEYSIZE)
        n = p * q
        g = n + 1
        LAMBDA = lcm(p - 1, q - 1)
        # part 2
        _key = open("key", "r").read()
        key = []
        for i in _key.split("\n"):
            for j in i[1:-1].split(" "):
                if int(j) not in key:
                    key.append(int(j))
        assert len(key) == 80
        #assert key[0] == 119 and key[1] ==  241 and key[2] ==  718 and key[3] == 647
        return n, g, LAMBDA, key
    def enc(n, g, m):
        while 1:
            r = random.randint(2, n - 1)
            if gcd(r, n) == 1:
                break
        c = (pow(g, m, n ** 2) * pow(r, n, n ** 2)) % (n ** 2)
        return c
    def dec(n, g, LAMBDA, c):
        L1 = (pow(c, LAMBDA, n ** 2) - 1) // n
        L2 = (pow(g, LAMBDA, n ** 2) - 1) // n
        m = (invert(L2, n) * L1) % n
        return m
    class server(socketserver.BaseRequestHandler):
        def _recv(self):
            data = self.request.recv(1024)
            return data.strip()
        def _send(self, msg, newline=True):
            if isinstance(msg, bytes):
                msg += b"\n"
            else:
                msg += "\n"
                msg = msg.encode()
            self.request.sendall(msg)
        def handle(self):
            # print("Service start.")
            # START, END, HASH = proof_of_work()
            # self._send("SHA-256(?+{}) == {}".format(END, HASH))
            # RCV = self._recv().decode()
            # if RCV != START:
            #     return
            # flag = open("flag", "rb").read()
            # self._send(WELCOME)
            # step 1. keygen
            for _ in range(32):
                self._send("round " + str(_+1))
                n, g, LAM, KEY = keygen()
                self._send("Step 1 - KeyGen. This is my public key.")
                self._send("n = " + str(n))
                self._send("g = " + str(g))
                # step 2. Phase 1
                self._send(
                    "Step 2 - Phase 1. Now, you can give me one ciphertexts,I will return the corresponding plaintext."
                )
                self._send("Please give me one decimal ciphertext.")
                cipher = int(self._recv().decode())
                print(cipher)
                plaintext = str(dec(n, g, LAM, cipher))
                self._send("This is the corresponding plaintext.")
                self._send(plaintext)
                # step 3. challenge
                self._send(
                    "Step 3 - Challenge. Now, you must give me two decimal plaintexts(m0,m1), I will encry them and return a ciphertext randomly"
                )
                self._send("Give me m0.")
                plaintext1 = int(self._recv().decode())
                self._send("Give me m1.")
                plaintext2 = int(self._recv().decode())
                if (
                    plaintext1  c0 , m1 -> c1)?"
                )
                Guess = int(self._recv().decode())
                if Guess == I:
                    self._send("Good! You are right")
                else:
                    self._send("Sorry!")
                    return
            self._send(flag)
    class ForkedServer(socketserver.ThreadingMixIn, socketserver.TCPServer):
        pass
    if __name__ == "__main__":
        HOST, PORT = "0.0.0.0", 10001
        server = ForkedServer((HOST, PORT), server)
        server.allow_reuse_address = True
        server.serve_forever()
这道题代码还挺长的，不过并不难看懂。
首先server类上面的是定义的enc和dec，其实就是paillier密码系统，不熟悉的读者可以移步我的这一片[文章](https://www.anquanke.com/post/id/204720)。
然后这道题目不知道是不是非预期了，因为题目给的hint我并没有到。step2的交互我也没有利用。（太奇怪了，预期该是啥样呢）
由于题目用的pailliar密码系统，具有同态（竟然说不上是乘法同态还是加法同态，只能说两个明文之和的密文，是两个明文分别的密文之积）
我们看到step4-5
题目向我们要两个明文plaintext1和plaintext2，然后加密的内容为
    cipher1 = enc(n, g, plaintext1 * plaintext2 * KEY[R])
    cipher2 = enc(n, g, plaintext1 * plaintext2 * KEY[R + 1])
由于plaintext1和plaintext2可控，而两条密文的唯一区别是KEY的内容不一样。然后题目加密后随机返回一条，让我们猜返回的是哪个。
我们可以看到，这加密的明文唯一的区别就是用的是KEY[R]和KEY[R+1]，而R = 2 * random.randint(0, 39)，是一个偶数。
那么这里我们选择“炼丹”：
首先我们可以利用同态获取到实际的KEY：题目在step3发送密文cipher后，在step4会帮我们解密一条数据，但是这条数据不能是服务器加密的那两条密文之一，那么，我们就给他cipher
* enc(5)，这样他就会解密后并返回plaintext1 * plaintext2 * KEY[R] + 5 或者 plaintext1 *
plaintext2 * KEY[R+1] + 5, 我们再处理一下（不处理问题也不大），减掉5，除掉plaintext1 *
plaintext2，就可以获取一个KEY_i 了。
然后我们到step5，我们只知道了一个KEY_i，但是不知道它具体的位置，我们直接发送0，如果返回正确，那么我们知道，这个KEY_i
在偶数位，如果返回错误，服务断掉，那么我们知道，这个KEY_i 在奇数位。那么，由于服务端的KEY序列是固定的，那么我们就开始炼丹咯。
我们构造两个数组，一个存奇数位，一个存偶数位。每次连上去，我们解密得到一个KEY_i，如果这个KEY_i
在我们的数组里，我们就能够直接返回正确答案，如果不在，我们就”炼“，猜对了，放进数组，继续猜，猜错了，放进数组，重新连。（再非不过80次连接）
    from Crypto.Util.number import (
        bytes_to_long,
        getPrime,
        long_to_bytes,
        getRandomNBitInteger,
    )
    import random
    import hashlib
    KEYSIZE = 512
    WELCOME = "welcome to my funny challenge !!! Can you guess right 32 times in a row? "
    String = "ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890abcdefghijklmnopqrstuvwxyz"
    from math import gcd
    def exgcd(a, b):
        if b == 0:
            return 1, 0, a
        else: