are not modiﬁed in the rewriting process anyway. This is
true for the majority of instructions as they do not reference
memory addresses and hence their byte representation is not
aﬀected by the randomization.
ARM and x86 instructions are composed of a mandatory
opcode, potentially followed by other information, most im-
portantly an immediate value such as a memory address.
This eases the processes of disassembly as we can simply
use a look-up table for the opcodes to know whether a par-
ticular instruction uses an immediate value that encodes an
address. If it is not, it is simply treated as a black-box – a
blob of bytes. This feature does not only increase the perfor-
mance3 but due to inspecting only instructions of interest,
it also comes in handy because ’uninteresting’ black-box in-
structions are treated no diﬀerent from data. This is an
advantage compared to classical disassemblers such as IDA
Pro or objdump which need to decide whether some position
is either code or data.
3Our experiments showed that our disassembler is faster by
factor 10 compared to binutil’s disassembler that objdump
internally uses.
305 
P
E
T
S
E
L
P
M
A
X
E
Loading 
Bytecode 
Disassembly 
Reference Graph 
Transformations 
Fixation 
Assembly 
Execution 
836c 
836c 
0a 00 00 02 
beq 837c 
ConditionalBranch 
to 
837c 
837c 
e1 a0 00 03 
mov r0, r3 
e1 a0 00 03 
1. Adjust Code 
1. Adjust Code 
Identify BBLs 
2.
2.
Identify BBLs 
3.
3.
Injection 
Injection 
4. Splitting 
4. Splitting 
5. Permutation 
5. Permutation 
New Address 
a7cd4c 
New Address 
cc94b8 
0a 09 31 d3 
e1 a0 00 03 
Figure 6: Processing Steps of the Rewriter
In contrast to ARM, which features a ﬁxed-length instruc-
tion set, that of x86 is variable. That means, going through
the code to ﬁnd instructions is not a matter of indexing them
by a multiple of 4 – which would be the instruction length
for ARM. Hence, for x86 it is impossible to predict where an
instruction begins without knowing where the preceding one
ended. Again, we use the same look-up process to identify
an opcode and look-up its length. The opcode also includes
information about whether optional immediate values make
the instruction longer. Once the length has been determined,
the way is paved to start over at the next instruction and so
forth.
All instructions that reference data or code are candidates
that potentially need to be rewritten later and act as input
to build the reference graph that provides information as
to which other part of code or data an instruction refers
to. The reference graph is similar to relocation information
in the sense that it is architecture-agnostic and only saves
which part of an instruction encodes an absolute or relative
address. As an optimizing step, all instructions still have the
original bytecode attached, so that they can be written back
to memory and are either left untouched in case of a black-
box instruction or are rewritten with aid of the reference
graph that tells which part of the instruction encodes an
immediate value that needs to be adjusted. Further, x86
and ARM are both generic enough, so that changing address-
dependent information in a bytecode is limited to changing
two’s complement bits in a masked representation of the
bytecode. This enables an eﬃcient rewriting process as all
of the original bytes are copied to their new memory position
and are adjusted with the aid of the reference graph.
Step 3 — Building The Reference Graph.
To resolve code and data references, we build a reference
graph by decoding only those instructions that are known
to potentially refer to addresses. As an example decoding,
we explain this process using the beq instruction in Figure 6.
This instruction’s bytecode is 0a 00 00 02, while 0a repre-
sents the opcode (beq) and 00 00 02 encodes the two’s com-
plement representation of a relative addressing. This two’s
complement representation of the decimal number 2 must
be multiplied by 4 (as ARM instructions can only target
addresses that are aligned by a multiple of 4). The beq in-
struction is stored at address 836c which leads to an absolute
target of 836c +2· 4 = 8374. Moreover, due to the pipelined
architecture of ARM, the program counter PC always points
two pipeline stages (or 8 bytes) ahead, which leads to 837c
as absolute target for the beq instruction. This decoding is
stored as additional FastDecode (see Table 2) information
and is attached to the instruction, so that it can be used to
generate appropriate bytecodes later. Particularly, FastDe-
code information includes whether it is signed or unsigned, a
bit mask, a bit shift and a summand. This coding is generic
enough to enable the rewriter to later write back addresses
to an instruction without understanding the instruction it-
self, and is faster than assembling an instruction.
In this
example, the attached information would store the values
depicted in Table 2 for the beq instruction.
Info
Opcode
Signedness
Bit Mask
Bit Shift
Summand
Value
0a
Signed
0x00ffffff
2 (left)
8
Table 2: FastDecode information codes how to write back a
part of an instruction in an assembler-agnostic way
Using this information, we build the reference graph. The
reference graph (see Figure 7) is built by introducing a layer
of indirection. Each instruction is routed through the layer
of indirection to the instruction it refers to. This is the
most important step as it keeps references to the original
instruction, even through they might be moved in memory.
Figure 7: Building the Reference Graph from Instructions
Step 4 — Code Transformation.
The rewriter supports grouping instructions to Instruc-
tion Sequences that are later used to move code pieces to-
gether in memory. Inserting instructions in the Instruction
Sequence is supported and used as a building block for the
necessary explicit connection of severed code pieces (see chal-
lenge CH1) or for the insertion of nop instructions that do
not change the program behavior.
The actual idea of randomization, or code piece permu-
tation respectively, is implemented as operations that can
be applied to Instruction Sequences or individual instruc-
tions. Prior to these operations, the challenge CH1 of im-
plicit control-ﬂow needs to be tackled. We do this by intro-
ducing explicit branches (e.g., jump 0x1234) at the end of
306a code piece in case the original control-ﬂow exhibited an
implicit fall-through as described in Section 4. Using this
trick, we can then move the code to diﬀerent memory posi-
tions and the reference graph (see Step 3) will later ensure
that this injected jump points corresponding code piece that
is ought to be connected to it. The number of those artiﬁcial
code pieces can be speciﬁed by the security parameter.
Step 5 — Fixation & Assembly.
This step assigns a randomly chosen address to each code
piece. To keep the number of wasted memory pages low,
code pieces are grouped to sections that resemble the size of
a memory page (e.g. 4 kB). Should an instruction or code
piece not ﬁt in (a multiple of) a memory page, it must go
into the next one. The induced overhead of this procedure is
rather low, as the aligned instructions on ARM allow exactly
1024 instructions to take place in a memory page without
the need for padding. For x86, there is no standard instruc-
tion length or alignment, hence how many bytes need to be
padded at the end of a memory page varies depending on
the instruction. Our empirical studies have shown that the
padding in the range of 2 to 4 bytes, albeit the theoretical
maximum of one complete instruction that does not ﬁt is 14
bytes4.
We then assign randomly chosen addresses to the created
sections (being a multiple of a page size in length). The
number of sections, again, depends on the security parame-
ter, as it is not necessary to introduce a higher entropy than
the theoretical limit of either 32 bits of 64 bit address space.
Now every section has an address assigned. We then write
back the instructions to their respective new addresses in
memory while adjusting all code and data references with
aid of the reference graph. This can be eﬃciently done, as
the original bytecode of an instruction is still stored behind
the layer of indirection by the reference graph.
If we en-
counter an instruction that references code or data, a new
bytecode with the adjusted address has to be emitted to
the corresponding new location of that instruction with aid
of the attached FastDecode information. If the instruction
does not need any memory address corrections, the old byte-
code is simply copied without the need to assemble a new
instruction (see Figure 8).
add r3, r3, #1 
Original Memory Image 
Original Memory Image 
cmp r3, #5 
beq 837c 
movw r0, #1 
add r3, r3, #1 
cmp r3, #5 
Emitted Memory (Piece 1) 
Emitted Memory (Piece 1) 
Reference Graph 
Reference Graph 
a7f8 
FastDecode 
FastDecode 
beq 837c 
a7f8 
(Piece 2) ... 
(Piece 2) ... 
Figure 8: Emitting the Final Opcodes to Memory
Finishing.
Once the rewriting process is done and execution could
start, we unload the rewriter by releasing the mapped mem-
ory that librewrite.so occupies. This is easily doable as the
entire code of the rewriter resides in the .init section which
4The longest x86 instruction consumes 15 bytes
is never executed again after it has been ﬁnished. This pro-
cedure is similar to how the Linux kernel frees memory after
the initialization of modules has ﬁnished.
Debugging.
Debugging a software-diversiﬁed process is rather diﬃcult
in comparison to the normal process for two reasons: First,
the debugger expects the instructions in memory to be in
the same order as the program that is stored on disk. How-
ever, XIFER completely permuted the layout and addresses
of the process and thereby renders the debug symbols ob-
solete. Since our randomization also shuﬄes the memory
pages at process load time, this has to be propagated back
to the debugger. In order to solve this problem, debug sym-
bols according to the permutation of our tool are emitted
when requested by the user. We chose to rewrite the de-
bug information of an ELF ﬁle to a diﬀerent ﬁle according
to the randomization. Currently we support the common
DWARF [1] ﬁle format which can be read e.g. by the ’gdb’
debugger. The gdb debugger can then step through the code,
inspect variables etc. as if the program were unmodiﬁed.
The second debugging issue is that two subsequent exe-
cutions of a program result in completely diﬀerent memory
layouts, which makes it harder for humans to understand
memory-related faults in the program in question. Further,
symbolic debuggers usually allow to visually track data struc-
tures based on their addresses. If the addresses would change
between every program run, ﬁnding the new addresses is
labor-intensive. We avoided this issue by adding a debug
ﬂag to librewrite.so that indicates that the same random
seed should be used for every execution of the program, re-
sulting in the same memory layout for each executing with
the debug ﬂag enabled. The consequence is that every run
of a particular program ends up in exactly the same address
space layout of a process with every single instruction be-
ing at the exact same address across multiple runs. For
all intends and purposes, this is against common sense of
randomizing a process in the ﬁrst place but greatly helps
debugging a randomized process because all the variables
reside at the very same address across diﬀerent process runs
or even reboots.
6. EVALUATION
In this section we evaluate the eﬀectiveness of our ran-
domization solution empirically as well as theoretically. In
order to demonstrate the eﬃciency, we used industry stan-
dard performance benchmarks (SPEC CPU2006) as well as
micro benchmarks for the important control ﬂow instruc-
tions.
6.1 Practical Security Evaluation
In order to test the eﬀectiveness, two experiments were per-
formed: (1) Calculating the gadget elimination. A compar-
ison of found gadgets before and after the randomization.
(2) Mitigation of an exploit targeted to a vulnerable pro-
gram.
Gadget Elimination. We used the 12 benchmark pro-
grams from the SPEC CPU2006 suite (see Table 3) to ﬁnd
ROP gadgets using the program ROPgadget [2]. After ran-
domizing the code and writing it to an ELF ﬁle, ROPgadget
was run again to check whether and how many gadgets have
stayed at the original position.
307Benchmark
gadgets
67
400.perlbench
51
401.bzip2
194
403.gcc
45
429.mcf
105
445.gobmk
58
456.hmmer
458.sjeng
57
462.libquantum 45
464.h264ref
79
168
471.omnetpp
91
473.astar
483.xalancbmk
460
ROP
Remaining
gadgets
0
0
0
0
0
0
0
0
0
0
0
0
Table 3: Overview of the SPEC CPU2006 integer benchmark