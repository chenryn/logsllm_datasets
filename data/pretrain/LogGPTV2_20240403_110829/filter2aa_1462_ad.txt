12 http://www.oracle.com/technetwork/java/javase/8u121-relnotes-3315208.html 
  BlackHat Conference July 2017 
HPE Software Security Research Paper 
default. However, the fix is not yet complete and it only affected those JNDI lookups against RMI registries and COS 
naming services, leaving the LDAP vector still functional (both the JNDI reference and deserialization approaches). 
TypeConverters 
During our review of JSON unmarshallers and .NET formatters, we noticed that some of them (for example Json.Net 
and ObjectStateFormatter/LosFormatter) use an additional way for reconstructing objects of Types annotated 
with the [TypeConverter] annotation 13. For example, if we have: 
[TypeConverter(typeof(MyClassConverter))] 
public class MyClass { 
   … 
} 
Unmarshaller will use ConvertFrom() method of MyClassConverter for reconstructing a MyClass instance from 
the string. Such custom type converter can be used for getting arbitrary code execution along with other gadget types 
such as property setters or deserialization callbacks. We found a couple of examples of these type converters that can 
lead to arbitrary code execution. 
// 
Microsoft.VisualStudio.ExtensionManager.XamlSerializationWrapperConv
erter 
public override object ConvertFrom(ITypeDescriptorContext context, 
CultureInfo culture, object value) 
{ 
    string text = value as string; 
    if (text != null) 
    { 
        try 
        { 
            StringReader input = new StringReader(text); 
            object value2; 
            using (XmlTextReader xmlTextReader = new 
XmlTextReader(input)) 
            { 
                value2 = XamlReader.Load(xmlTextReader); 
            } 
   … 
} 
Type converters can be used to transaction from one deserializer/formatter to another. For example, 
EndpointCollectionConverter can bridge to BinaryFormatter: 
// 
Microsoft.VisualStudio.Modeling.Diagrams.EndpointCollectionConverter  
public override object ConvertFrom(ITypeDescriptorContext context, 
CultureInfo culture, object value) 
{ 
    string text = value as string; 
    if (text != null) 
    { 
        text = text.Trim(); 
   ... 
        EdgePointCollection edgePointCollection2 = null; 
13 https://msdn.microsoft.com//library/system.componentmodel.typeconverter(v=vs.110).aspx 
  BlackHat Conference July 2017 
HPE Software Security Research Paper 
        if 
(SerializationUtilities.TryGetValueFromBinaryForm(text, out edgePointCollection2) && edgePointCollection2 != null) 
   ... 
} 
And 
//Microsoft.VisualStudio.Modeling.SerializationUtilities 
public static bool TryGetValueFromBinaryForm(string input, out T 
output) 
{ 
    output = default(T); 
    bool result = false; 
    if (input != null) 
    { 
        try 
        { 
            byte[] array = Convert.FromBase64String(input); 
            if (array.Length == 0) 
            { 
                try 
                { 
                    output = (T)((object)string.Empty); 
                    result = true; 
                    goto IL_AB; 
                } 
                catch (InvalidCastException) 
                { 
                    goto IL_AB; 
                } 
            } 
            MemoryStream memoryStream = new MemoryStream(); 
            memoryStream.Write(array, 0, array.Length); 
            memoryStream.Position = 0L; 
            if (array.Length > 7 && array[3] == 60 && array[4] == 63 
&& array[5] == 120 && array[6] == 109 && array[7] == 108) 
            { 
      … 
            } 
            BinaryFormatter binaryFormatter = new BinaryFormatter(); 
            try 
            { 
                output = 
(T)((object)binaryFormatter.Deserialize(memoryStream)); 
                result = true; 
            } 
       … 
} 
In additional to the mentioned annotated Types, Json.Net has its own TypeConverters that can work with Types 
without this annotation. 
For example EntityKeyMemberConverter will be used for unmarshalling of System.Data.EntityKeyMember 
Type or any derived Type: 
//Newtonsoft.Json.Converters.EntityKeyMemberConverter 
public override bool CanConvert(Type objectType) 
  BlackHat Conference July 2017 
HPE Software Security Research Paper 
{ 
return 
objectType.AssignableToTypeName("System.Data.EntityKeyMember"); 
} 
This converter tries to deserialize “Value” property as Type specified in “Type” property.  
//Newtonsoft.Json.Converters.EntityKeyMemberConverter 
public override object ReadJson(JsonReader reader, Type objectType, 
object existingValue, JsonSerializer serializer) 
{ 
EntityKeyMemberConverter.EnsureReflectionObject(objectType); 
object obj = 
EntityKeyMemberConverter._reflectionObject.Creator(new object[0]); 
EntityKeyMemberConverter.ReadAndAssertProperty(reader, "Key"); 
reader.ReadAndAssert(); 
EntityKeyMemberConverter._reflectionObject.SetValue(obj, 
"Key", reader.Value.ToString()); 
EntityKeyMemberConverter.ReadAndAssertProperty(reader, 
"Type"); 
reader.ReadAndAssert(); 
Type type = Type.GetType(reader.Value.ToString()); 
EntityKeyMemberConverter.ReadAndAssertProperty(reader, 
"Value"); 
reader.ReadAndAssert(); 
EntityKeyMemberConverter._reflectionObject.SetValue(obj, 
"Value", serializer.Deserialize(reader, type)); 
reader.ReadAndAssert(); 
return obj; 
} 
Note that it will work even if TypeNameHandling = None. Therefore, if expected Type has a property that can be 
processed by this Type converter the application will be vulnerable.   
Similar Research 
On May 22, Moritz Bechler published a paper 14 containing a research with similar premises and conclusions. This 
research was done independently and published after our research was accepted for BlackHat and abstract was 
published online. We could not publish our paper before our talks at BlackHat/Defcon per their request. 
The paper focuses exclusively in Java and overlaps with our research on Jackson and JSON-IO library (although we 
found 
different 
vector 
for 
this 
library). 
It 
also 
overlaps 
in 
that 
we 
found 
the 
same 
JdbcRowSetImpl.setAutoCommit() gadget but, in addition, Moritz presents other interesting gadgets in third-
party Java libraries. 
14 https://github.com/mbechler/marshalsec 
  BlackHat Conference July 2017 
HPE Software Security Research Paper 
.NET deserialization attacks 
Attacks on .NET BinaryFormatter serialization are not new. James Forshaw already introduced them at BlackHat 
2012 15 along with NetDataContractSerializer. However, no gadgets leading to arbitrary code execution were 
found at that time. Some years later Alexander Herzog presented a new formatter (LosFormatter) which could also 
be vulnerable to arbitrary code execution 16. Still no gadgets were found to achieve code execution upon 
deserialization of untrusted data using these formatters. The first possibility of a RCE gadget was introduced by Florian 
Gaultier 17 which presented a code execution gadget via a memory corruption. Unfortunately, the gadget was not 
published and memory corruption is not a stable way of getting remote code execution since it depends on several 
factors and mitigations techniques. 
After researching RCE gadgets for Java deserialization, we decided to give .NET a try and look for a RCE gadget that 
could allow exploitation of these 3 vulnerable formatters. We found a type available in the Windows GAC, meaning no 
third-party requirements are required for exploitation, which leaded to arbitrary code execution via arbitrary method 
calls. 
Update: Recently and after this research work was finished, accepted for BlackHat and Defcon and its abstract 
published on the Blackhat site, James Forshaw of the Google Project Zero team, published two gadgets that lead to 
remote code execution and that could be used to attack the 3 known vulnerable formatters 18. 
In this section, we will present other .NET native formatters which may also lead to remote code execution and will 
present the details of the gadgets we found which can be used to attack these formatters. 
Review of known dangerous .NET formatters 
System.Runtime.Serialization.Formatters.Binary.BinaryFormatter 
It is the most powerful native formatter but limited to serialize those types that are annotated with the 
System.SerializableAttribute 
attribute. 
If 
serialized 
types 
implements 
the 
System.Runtime.Serialization.ISerializable 
interface, 
the 
(SerializationInfo 
info, 
StreamingContext context) constructor overload will be invoked during deserialization. In addition, if type 
implements 
the 
System.Runtime.Serialization.IDeserializationCallback 
interface, 
the 
OnDeserialization(Object) method will be called upon deserialization. Also deserializer will call methods 
annotated 
by 
System.Runtime.Serialization.OnDeserializingAttribute19 
or 
System.Runtime.Serialization.OnDeserializedAttribute20. All mentioned callbacks can be used as the 
entrypoint for the deserialization attack. 
It 
is 
possible 
to 
limit 
which 
types 
can 
be 
deserialized 
by 
using 
a 
System.Runtime.Serialization.SerializationBinder which will control the class loading process during 
deserialization. This can be effectively used to prevent deserialization of non-expected types. 
BinaryFormatter is capable of serializing types that were not designed to be serialized such as types with private 
setters, no default constructors, no Serialization attribute, dictionaries, etc. In order to allow the serialization of these 
types an instance of a serialization surrogate (System.Runtime.Serialization.ISerializationSurrogate) 
can be configured in the BinaryFormatter. The surrogate implements a pair of GetObjectData and 
SetObjectData that will be called during serialization and deserialization to customize the data being 
serialized/deserialized. Note that as long as the surrogate type is available in the deserializing CLR, an attacker can 
use it as an additional way to trigger its payload. 
15 https://media.blackhat.com/bh-us-12/Briefings/Forshaw/BH_US_12_Forshaw_Are_You_My_Type_WP.pdf 
16 https://www.slideshare.net/ASF-WS/asfws-2014-slides-why-net-needs-macs-and-other-serialization-talesv20 
17 https://blog.scrt.ch/2016/05/12/net-serialiception/ 
18 https://googleprojectzero.blogspot.com.es/2017/04/exploiting-net-managed-dcom.html 
19 https://msdn.microsoft.com/en-us/library/system.runtime.serialization.ondeserializingattribute(v=vs.110).aspx  
20 https://msdn.microsoft.com/en-us/library/system.runtime.serialization.ondeserializedattribute(v=vs.110).aspx 
  BlackHat Conference July 2017 
HPE Software Security Research Paper 
James Farshow found a SurrogateSelector with a preloaded SerializationSurrogate that was designed to 
serialize non-serializable types 21. This effectively means that attackers can use any type on their gadgets chains and 
they are no longer limited to serializable annotated types. 
System.Runtime.Serialization.NetDataContractSerializer 
Introduced as part of WCF, it extends the System.Runtime.Serialization.XmlObjectSerializer class and 
is capable of serializing any type annotated with serializable attribute as BinaryFormatter does but is not limited 
to those and can also extend regular types that can be serialized by XmlObjectSerializer. From an attacker point 
of view, it offers the same attack surface as BinaryFormatter. 
System.Web.UI.LosFormatter 
This formatter is internally used by Microsoft Web Forms pages to serialize view state. It uses BinaryFormatter 
internally and therefore offers similar attack surface. 
Other .NET formatters that we found to be vulnerable 
During our research, we analyzed the following native formatters: 
System.Runtime.Serialization.Formatters.Soap.SoapFormatter 
This formatter serializes objects to and from SOAP XML format. It is similar to BinaryFormatter in a number of 
ways; they both implement IFormatter interface and serialize only [Serializable] annotated types. They both 
can use surrogates to handle custom serialization and binders to control type loading. Both will invoke similar methods 
upon deserialization which include setters, ISerializable Serialization constructor, OnDeserialized annotated 
methods and IDeserializationCallback's OnDeserialization callback.  
We can conclude that both are as powerful and gadgets for BinaryFormatter will be able to be used for 
SoapFormatter. 
System.Web.Script.Serialization.JavaScriptSerializer 
Already covered in JSON Libraries section. 
System.Web.UI.ObjectStateFormatter 
Used by LosFormatter as a binary formatter for persisting the view state for Web Forms pages. It uses 
BinaryFormatter internally and therefore offers similar attack surface. In addition, it uses TypeConverters so 
there is an additional surface for attacks. 
System.Runtime.Serialization.Json.DataContractJsonSerializer 
Already covered in the Json Libraries section. 
System.Runtime.Serialization.DataContractSerializer 
DataContractSerializer is probably the serializer that better balances serialization capabilities and security. It 
does so by inspecting the object graph of the expected type and limiting deserialization to only those that are in use. 
Since an initial inspection is done before looking at the objects coming through the wire, it won't be able to serialize 
types which contain generic Object members or other dynamic types which are not known during the construction of 
serializer. This limitation makes it suitable to handle untrusted data unless any of the following scenarios apply: 
1 - Using a weak type resolver 
21 https://googleprojectzero.blogspot.com.es/2017/04/exploiting-net-managed-dcom.html 
  BlackHat Conference July 2017 
HPE Software Security Research Paper 
DataContractSerializer can be configured to use a type resolver which will help overcome the original limitation 
of dealing with unknown types at construction time. It does so by annotating which types are serialized and 
remembering them in a shared resource to be used by the deserializer later. A type resolver can be securely 
implemented to only handle the required dynamic types or polymorphic types and not depending on data in the 
serialized XML to reconstruct these types during deserialization. However, it can also be configured to handle any 
types in a similar way to what BinaryFormatter and NetDataContractSerializer do. This behavior is the one 
shown in the DataContractResolver documentation page 22 with a security warning around it. Using a weak 
resolver such as the one showed in this documentation, will allow attackers to instantiate arbitrary types and gain 
remote code execution. 
2 - Using user controlled expected type or member in knownTypes list  
The security of the deserializers relies on the fact that it inspects and trusts the type passed to its constructor. If 
attackers can control the expected type, they will be able to make the deserializer trust any object graph and therefore 
set the grounds to inject their payload and gain remote code execution. A quick look at popular open source code 
repos such as Github showed that is not that strange to find DataContractSerializers constructed with untrusted 
types. 
Type objType = Type.GetType(message.Label.Split('|')[1], true, 
true); 
DataContractSerializer serializer = new 
DataContractSerializer(objType); 
serializer.ReadObject(message.BodyStream); 
Upon deserialization, DataContractSerializer will invoke multiple methods which can be used to initiate an RCE 
gadget chain such as setters and serialization constructors. 
System.Xml.Serialization.XmlSerializer 
It is similar to DataContractJsonSerializer and DataContractSerializer in that it will inspect the expected 
type at construction time and create an ad-hoc serializer that will only know about those types appearing in the object 
graph. It is even more restricted as it will fail to deserialize Types containing interface members or System.Type 
members, for example. In addition, it does not use type resolvers as DataContractSerializer does, so the only 
vulnerable configuration for this deserializer is when attacker can control the expected type in a similar way to what 
we showed for DataContractSerializer. 
From an attacker perspective, overcoming the type limitation can be a problem, but we will show later that this can be 
done with some sharp tricks. As a conclusion, these limitations are not enough to make XmlSerializer secure when 
expected type is user controlled.  
Searching through GitHub shows that this is not a rare configuration. We will show how this is the case for a popular 
CMS in "Example: DotNetNuke Platform (CVE-2017-9822)". 
System.Messaging.XmlMessageFormatter 
It is the default formatter used by MSMQ. It uses XmlSerializer internally and therefore it is vulnerable to same 
attack patterns. 
System.Messaging.BinaryMessageFormatter 
Used by MSMQ as a binary formatter for sending messages to queues. It uses BinaryFormatter internally and 
therefore offers similar attack surface. 
22 https://docs.microsoft.com/en-us/dotnet/api/system.runtime.serialization.datacontractresolver?view=netframework 
  BlackHat Conference July 2017 
HPE Software Security Research Paper 
New RCE gadgets 
System.Management.Automation.PSObject 23  
This Type is deployed on Wondows GAC when Powershell v3.0 or higher is installed which is common since it 
comes pre-installed in modern windows versions. 
The PSObject serialization constructor calls a second layer of deserialization with attacker controlled data (CliXml): 
// System.Management.Automation.PSObject 
private object lockObject = new object(); 
protected PSObject(SerializationInfo info, StreamingContext context) 
{ 
if (info == null) 
{ 
throw PSTraceSource.NewArgumentNullException("info"); 
} 