### Oracle Java SE 8u121 Release Notes
- **Source**: [Oracle Java SE 8u121 Release Notes](http://www.oracle.com/technetwork/java/javase/8u121-relnotes-3315208.html)

### BlackHat Conference July 2017
- **HPE Software Security Research Paper**

#### Incomplete Fix for JNDI Lookups
The fix for JNDI lookups in the recent update is not comprehensive. It only affects JNDI lookups against RMI registries and COS naming services, leaving the LDAP vector still functional. Both the JNDI reference and deserialization approaches remain vulnerable.

#### TypeConverters in JSON Unmarshallers and .NET Formatters
During our review of JSON unmarshallers and .NET formatters, we observed that some, such as Json.NET and ObjectStateFormatter/LosFormatter, use an additional method to reconstruct objects annotated with the `[TypeConverter]` attribute. For example:

```csharp
[TypeConverter(typeof(MyClassConverter))]
public class MyClass { 
   // Class implementation
}
```

In this case, the `Unmarshaller` will use the `ConvertFrom()` method of `MyClassConverter` to reconstruct a `MyClass` instance from a string. Custom type converters can be exploited to execute arbitrary code, often in conjunction with other gadget types like property setters or deserialization callbacks. We identified several examples of these type converters that can lead to arbitrary code execution.

**Example: XamlSerializationWrapperConverter**
```csharp
public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
{
    string text = value as string;
    if (text != null)
    {
        try
        {
            StringReader input = new StringReader(text);
            object value2;
            using (XmlTextReader xmlTextReader = new XmlTextReader(input))
            {
                value2 = XamlReader.Load(xmlTextReader);
            }
            // Further processing
        }
        catch (Exception ex)
        {
            // Handle exception
        }
    }
    return value;
}
```

**Example: EndpointCollectionConverter Bridging to BinaryFormatter**
```csharp
public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
{
    string text = value as string;
    if (text != null)
    {
        text = text.Trim();
        EdgePointCollection edgePointCollection2 = null;
        if (SerializationUtilities.TryGetValueFromBinaryForm(text, out edgePointCollection2) && edgePointCollection2 != null)
        {
            // Further processing
        }
    }
    return value;
}

// SerializationUtilities
public static bool TryGetValueFromBinaryForm(string input, out T output)
{
    output = default(T);
    bool result = false;
    if (input != null)
    {
        try
        {
            byte[] array = Convert.FromBase64String(input);
            if (array.Length == 0)
            {
                try
                {
                    output = (T)((object)string.Empty);
                    result = true;
                }
                catch (InvalidCastException)
                {
                    // Handle exception
                }
            }
            else
            {
                MemoryStream memoryStream = new MemoryStream();
                memoryStream.Write(array, 0, array.Length);
                memoryStream.Position = 0L;
                if (array.Length > 7 && array[3] == 60 && array[4] == 63 && array[5] == 120 && array[6] == 109 && array[7] == 108)
                {
                    // Further processing
                }
                BinaryFormatter binaryFormatter = new BinaryFormatter();
                try
                {
                    output = (T)((object)binaryFormatter.Deserialize(memoryStream));
                    result = true;
                }
                catch (Exception ex)
                {
                    // Handle exception
                }
            }
        }
        catch (Exception ex)
        {
            // Handle exception
        }
    }
    return result;
}
```

Json.NET also has its own TypeConverters that can work with types without the `[TypeConverter]` annotation. For example, `EntityKeyMemberConverter` is used for unmarshalling `System.Data.EntityKeyMember` types or any derived types.

**Example: EntityKeyMemberConverter**
```csharp
public override bool CanConvert(Type objectType)
{
    return objectType.AssignableToTypeName("System.Data.EntityKeyMember");
}

public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
{
    EntityKeyMemberConverter.EnsureReflectionObject(objectType);
    object obj = EntityKeyMemberConverter._reflectionObject.Creator(new object[0]);
    EntityKeyMemberConverter.ReadAndAssertProperty(reader, "Key");
    reader.ReadAndAssert();
    EntityKeyMemberConverter._reflectionObject.SetValue(obj, "Key", reader.Value.ToString());
    EntityKeyMemberConverter.ReadAndAssertProperty(reader, "Type");
    reader.ReadAndAssert();
    Type type = Type.GetType(reader.Value.ToString());
    EntityKeyMemberConverter.ReadAndAssertProperty(reader, "Value");
    reader.ReadAndAssert();
    EntityKeyMemberConverter._reflectionObject.SetValue(obj, "Value", serializer.Deserialize(reader, type));
    reader.ReadAndAssert();
    return obj;
}
```

This converter works even if `TypeNameHandling = None`. If the expected type has a property that can be processed by this type converter, the application may be vulnerable.

### Similar Research
On May 22, Moritz Bechler published a paper containing research with similar premises and conclusions. This research was done independently and published after our research was accepted for BlackHat and the abstract was published online. We could not publish our paper before our talks at BlackHat/Defcon per their request.

The paper focuses exclusively on Java and overlaps with our research on Jackson and the JSON-IO library (although we found different vectors for this library). It also overlaps in that we both found the same `JdbcRowSetImpl.setAutoCommit()` gadget, but Moritz presents additional interesting gadgets in third-party Java libraries.

**Reference**: [Moritz Bechler's Research](https://github.com/mbechler/marshalsec)

### .NET Deserialization Attacks
Attacks on .NET `BinaryFormatter` serialization are not new. James Forshaw introduced them at BlackHat 2012 along with `NetDataContractSerializer`. However, no gadgets leading to arbitrary code execution were found at that time. Alexander Herzog later presented a new formatter, `LosFormatter`, which could also be vulnerable to arbitrary code execution, but no gadgets were found to achieve code execution upon deserialization of untrusted data using these formatters.

Florian Gaultier introduced a code execution gadget via a memory corruption, but it was not published, and memory corruption is not a stable way to achieve remote code execution due to various factors and mitigation techniques.

After researching RCE gadgets for Java deserialization, we decided to explore .NET and found a type available in the Windows GAC, meaning no third-party requirements are needed for exploitation, which led to arbitrary code execution via arbitrary method calls.

**Update**: After our research was finished, accepted for BlackHat and Defcon, and the abstract published on the Blackhat site, James Forshaw of the Google Project Zero team published two gadgets that lead to remote code execution and can be used to attack the three known vulnerable formatters.

### Review of Known Dangerous .NET Formatters

#### System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
- **Description**: The most powerful native formatter, limited to serializing types annotated with `System.SerializableAttribute`.
- **Callbacks**: During deserialization, it can invoke methods annotated with `ISerializable`, `IDeserializationCallback`, `OnDeserializingAttribute`, and `OnDeserializedAttribute`.
- **Security Measures**: A `SerializationBinder` can be used to control the class loading process during deserialization, limiting the types that can be deserialized.
- **Surrogates**: `BinaryFormatter` can serialize types not designed for serialization using a serialization surrogate (`ISerializationSurrogate`).

**Reference**: [James Forshaw's Research](https://media.blackhat.com/bh-us-12/Briefings/Forshaw/BH_US_12_Forshaw_Are_You_My_Type_WP.pdf)

#### System.Runtime.Serialization.NetDataContractSerializer
- **Description**: Extends `XmlObjectSerializer` and can serialize any type annotated with `SerializableAttribute` and regular types that can be serialized by `XmlObjectSerializer`.
- **Attack Surface**: Offers the same attack surface as `BinaryFormatter`.

#### System.Web.UI.LosFormatter
- **Description**: Used by Microsoft Web Forms pages to serialize view state, using `BinaryFormatter` internally.
- **Attack Surface**: Similar to `BinaryFormatter`.

### Other Vulnerable .NET Formatters

#### System.Runtime.Serialization.Formatters.Soap.SoapFormatter
- **Description**: Serializes objects to and from SOAP XML format.
- **Attack Surface**: Similar to `BinaryFormatter` in terms of callbacks and surrogates.

#### System.Web.Script.Serialization.JavaScriptSerializer
- **Description**: Covered in the JSON Libraries section.

#### System.Web.UI.ObjectStateFormatter
- **Description**: Used by `LosFormatter` as a binary formatter for persisting the view state for Web Forms pages, using `BinaryFormatter` internally.
- **Attack Surface**: Similar to `BinaryFormatter` and uses `TypeConverters`.

#### System.Runtime.Serialization.Json.DataContractJsonSerializer
- **Description**: Covered in the JSON Libraries section.

#### System.Runtime.Serialization.DataContractSerializer
- **Description**: Balances serialization capabilities and security by inspecting the object graph of the expected type and limiting deserialization to those in use.
- **Vulnerabilities**:
  - Using a weak type resolver.
  - Using user-controlled expected types or members in the `knownTypes` list.

**Reference**: [DataContractResolver Documentation](https://docs.microsoft.com/en-us/dotnet/api/system.runtime.serialization.datacontractresolver?view=netframework)

#### System.Xml.Serialization.XmlSerializer
- **Description**: Inspects the expected type at construction time and creates an ad-hoc serializer.
- **Vulnerabilities**: Vulnerable when the expected type is user-controlled.

#### System.Messaging.XmlMessageFormatter
- **Description**: Default formatter used by MSMQ, using `XmlSerializer` internally.
- **Attack Surface**: Same as `XmlSerializer`.

#### System.Messaging.BinaryMessageFormatter
- **Description**: Used by MSMQ as a binary formatter for sending messages to queues, using `BinaryFormatter` internally.
- **Attack Surface**: Similar to `BinaryFormatter`.

### New RCE Gadgets

#### System.Management.Automation.PSObject
- **Description**: Deployed in the Windows GAC when PowerShell v3.0 or higher is installed, common in modern Windows versions.
- **Vulnerability**: The `PSObject` serialization constructor calls a second layer of deserialization with attacker-controlled data (CliXml).

**Example: PSObject Serialization Constructor**
```csharp
private object lockObject = new object();

protected PSObject(SerializationInfo info, StreamingContext context)
{
    if (info == null)
    {
        throw PSTraceSource.NewArgumentNullException("info");
    }
    // Further processing
}
```

This type of vulnerability can be exploited to execute arbitrary code.