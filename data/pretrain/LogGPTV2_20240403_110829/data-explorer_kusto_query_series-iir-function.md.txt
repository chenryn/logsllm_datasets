---
title:  series_iir()
description: Learn how to use the series_iir() function to apply an Infinite Impulse Response filter on a series.
ms.reviewer: alexans
ms.topic: reference
ms.date: 01/30/2023
---
# series_iir()
Applies an Infinite Impulse Response filter on a series.  
The function takes an expression containing dynamic numerical array as input, and applies an [Infinite Impulse Response](https://en.wikipedia.org/wiki/Infinite_impulse_response) filter. By specifying the filter coefficients, you can use the function to:
* calculate the cumulative sum of the series
* apply smoothing operations
* apply various [high-pass](https://en.wikipedia.org/wiki/High-pass_filter), [band-pass](https://en.wikipedia.org/wiki/Band-pass_filter), and [low-pass](https://en.wikipedia.org/wiki/Low-pass_filter) filters
The function takes as input the column containing the dynamic array and two static dynamic arrays of the filter's *denominators* and *numerators* coefficients, and applies the filter on the column. It outputs a new dynamic array column, containing the filtered output.  
## Syntax
`series_iir(`*series*`,` *numerators* `,` *denominators*`)`
[!INCLUDE [syntax-conventions-note](../../includes/syntax-conventions-note.md)]
## Parameters
| Name | Type | Required | Description |
|--|--|--|--|
| *series* | `dynamic` |  :heavy_check_mark: | An array of numeric values, typically the resulting output of [make-series](make-series-operator.md) or [make_list](make-list-aggregation-function.md) operators.|
| *numerators* | `dynamic` |  :heavy_check_mark: | An array of numeric values, containing the numerator coefficients of the filter.|
| *denominators* | `dynamic` |  :heavy_check_mark: | An array of numeric values, containing the denominator coefficients of the filter.|
> [!IMPORTANT]
> The first element of `a` (that is, `a[0]`) mustn't be zero, to avoid division by 0. See the [following formula](#the-filters-recursive-formula).
## The filter's recursive formula
* Consider an input array X, and coefficients arrays a and b of lengths n_a and n_b respectively. The transfer function of the filter that will generate the output array Y, is defined by:
Yi = a0-1(b0Xi
 + b1Xi-1 + ... + bnb-1Xi-nb-1
 - a1Yi-1-a2Yi-2 - ... - ana-1Yi-na-1)
## Example
Calculate a cumulative sum. 
Use the iir filter with coefficients *denominators*=[1,-1] and *numerators*=[1]:  
> [!div class="nextstepaction"]
> Run the query
```kusto
let x = range(1.0, 10, 1);
print x=x, y = series_iir(x, dynamic([1]), dynamic([1,-1]))
| mv-expand x, y
```
**Output**
| x | y |
|:--|:--|
|1.0|1.0|
|2.0|3.0|
|3.0|6.0|
|4.0|10.0|
Here's how to wrap it in a function:
> [!div class="nextstepaction"]
> Run the query
```kusto
let vector_sum=(x: dynamic) {
    let y=array_length(x) - 1;
    todouble(series_iir(x, dynamic([1]), dynamic([1, -1]))[y])
};
print d=dynamic([0, 1, 2, 3, 4])
| extend dd=vector_sum(d)
```
**Output**
|d            |dd  |
|-------------|----|
|`[0,1,2,3,4]`|`10`|