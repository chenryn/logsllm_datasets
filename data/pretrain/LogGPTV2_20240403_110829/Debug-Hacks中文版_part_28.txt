PENDING(&t->pending: &t->blocked) 11
set_tsk_thread_flag(t, TIF_SIGPENDING);
 clear_tsk_thread_flag(t, TIF_SIGPENDING);
/*清除TIF_SIGPENDING*/
www.TopSage.com
HACK#36内核停上响应（死循环篇）
1 211
217
---
## Page 230
219
版本。
本hack中，我们来看看内核中的自旋锁死锁时的转储。所用的Linux内核为2.6.9
#37
MAOU
参考文献
能知道应该移植哪个补丁。
可以高效率地添加调试代码。之后要确认git的修改历史，只有弄清楚原因后，才
另外，在实际的分析中，通过分析kermel dump，调查问题发生时内核在做什么，
分析故障之前，划分原因是非常重要的。本hack讲述了几个重点。
总结
理补丁。该清理补丁删除了笔者有疑问的do_coredump(）中调用yield()的代码。
笔者的环境中应用该补丁后，问题就解决了。修改内容为执行coredump_wait（）之前
panic（空指针引用篇）”，搜索Linus Torvals的git 树，发现了下面的补丁。
我们发现，复现程序在新版本内核上不会发生问题。
212|第5章实践内核调试
commit2384f55f8aa520172c995965bd2f8a9740d53095
[PATCH] coredump_wait() cleanup
commitbb6f6dbaa48c53525a7a4f9d4df719c3b0b582af
[PATCH] do_coredump()shouldreset group_stop_count earlier
Linus Torvals的git树
认真询问故障发生时的情况。
http://git.kernel.org/?p=linux/kernel/git/torvalds/linux-2.6.git;a=summary
试验各种各样的条件。
在自己的环境上复现。
本hack介绍单纯的自旋锁死锁时形成的转储的阅读方法。
内核停止响应 (自旋锁篇之一)
www.TopSage.com
类似于“HACK#33kernel
—安部东洋
红网
---
## Page 231
下面的 spinlock_stall.c是个自旋锁死锁的模块。
复现
static int spinlock_stall_ thread2(void *data)
int thread2_flag;
DEFINE_SPINLOCK(lock2);
#include  // for msleep()
#include  
# cat spinlock_stall.c
static int _init spinlock_init(void)
static int spinlock_stall_threadl(void *data)
DEFINE_SPINLOCK(lock1);
kthreadl = kthread_run(spinlock_stall_threadl, NULL, "spinlock1");
spin_lock_init(&lock2);
spin_ lock_init(&lockl);
struct task_struct *kthread2;
struct task_struct *kthreadl;
return 0;
spin_lock(&lockl);
thread2_flag = l;
spin_lock(&lock2);
return 0;
spin_lock(&lock2);
while(1){
spin_lock(&lockl);
msleep(200) ;
if (thread2_flag == l) break; 
www.TopSage.com
HACK#37 内核停止响应（自旋锁篇之一）I 213 
---
## Page 232
221
insmod 之后就会停止响应，然后用 IPMI watchdog 获取转储。
将该模块加载到内核中后，threadl和 thread2 就会产生死锁。make 和 insmod 的执
214 1   第 5 章  实践内核调试
来看看转储的 backtrace。
分析转储
行方法如下所示。make 的-C选项可以指定现在运行中的内核的源代码目录。
crash> bt -ta
# insmod spinlock_stall.ko
# make -C /usr/srclinux M='pwd' modules
Makefile spinlock_stall.c
#ls
obj-m := spinlock_stall.0
# cat Makefile
module_init(spinlock_init);
static void _exit spinlockexit(void) { return; }
PID: 13417 TASK: 1007de867f0
[exception RIP: .text.lock.spinlock+2]
1006ddb9e58] apic_timer_interrupt at fffffff80110bf5
return 0;
kthread2 = kthread run(spinlock_stall_thread2, NULL, "spinlock2");
 ---
1006ddb9fc8] kthread at fffff8014b5fb 
1006ddb9f58] keventd_create_kthread at fffffff8014b6ec
1006ddb9f50] child_rip at fffffff80110f47
1006ddb9f20] kthread at ffffffff8014b6c3
1006ddb9f10] spinlock_stall_threadl at fffffa0lcf02e
 1006ddb9fo0l msleep at fffffff801407f9
www.TopSage.com
CPU: 0 COMMAND: "spinlock1"
---
## Page 233
以下的信息，表明kdump 失败了。使用的操作系统为基于 2.6.18 版内核的发行版。
我们在拿到新硬件之后，进行了连续的 kdump 测试。结果，控制台上偶然会显示
#38
MACX
单错误。
种 bug。大多数情况为对内核做出修改，或是在创建驱动程序、模块等时犯下的简
自旋锁引起的死锁可以从转储中立即被发现，但是现在的Linux内核中几乎没有这
总结
核中显示为“_spin_lock")。
以直观地看出来。存在“.text.lock.spinlock”的话，大多数情况可以判断为在自
自旋锁处于busy wait 状态（不进行任务调度，陷入死循环），这点从backtrace 上可
RIP: 0010:[]
Pid: 1, comm: swapper Not tainted 2.6.18-prep #6
Modules linked in:
CPU 0
ide0 at 0x1f0-0x1f7,0x3f6 on irq 14NMI Watchdog detected LOCKUP on CPU 0
PID: 13418 TASK: 1007dd88030
[exception RIP: .text.lock.spinlock+5]
1006e613e58] call_function_interrupt at fffffff80110b69
 -..
1006e613fc8] kthread at ffffffff8014b5fb
1006e613f58] keventd_create_kthread at fffffff8014b6ec
1006e613f50] child_rip at ffffff80110f47
1006e613f20] kthread at ffffffff8014b6c3
1006e613f10] spinlock_stall_thread2 at fffffa0lcf055
本 hack 以 NMI watchdog timeout 发生时的内核调试方法为例进行说明。
内核停止响应 (自旋锁篇之二)
 START: smp_call_ function_interupt at ffffff011c5f0
www.TopSage.com
[] ,text.lock.spinlock+0x2/0x30
CPU: 1 COMMAND: "spinlock2"
HACK#38 内核停止响应（自旋锁篇之二)1 215 
222
---
## Page 234
223
kdump 的问题，因此无法转储。那么首先从这个信息进行调试吧。NMI watchdog
的过程中发生的。NMI watchdog 虽然能在检测出死锁之后获取转储，但这次是
获取崩溃转储”。该现象是在/proc/sysrq-trigger引发 panic之后，启动 dump kernel
CPU 的信息。关于 NMI watchdog 请参见“HACK#23用 NMIl watchdog 在死机时
从第1行可知NMI watchdog 检测出了死锁。NMI watchdog 显示出死锁情况所在的
216 1
Process 5wapper (pid: 1, threadinfo ffff810008d0000, task fff8100019fd7a0)
CR2: 0002aaaae176000 CR3: 0000000001001000 CR4: 00000000000006e0
RAX:
RSP: 0000:fffffff8040fd00 EFLAGS: 00000086-
[] cache_alloc_refill+ox106/0x186
[] vgacon_cursor+0x/0x1a5
[] apic_timer_interrupt+0x66/0x6c
 [] _do_IRQ+0x47/0x105
Call Trace:
ffffffff8006b3bf 0000000300000000 ffff8100084734co fffffff8040fd70
1000000000000 0000000+++ 000000000000000 000000000000000
Stack: ffffffff80ob5efb 0000000000000086 000000000000000 ffffffff8040fd48
R13:
RDX:f
] printk+0x52/0xbd
[]vprintk+0x29e/0x2ea
]
]
[]
]
]
[](
]
[]
]i
]
]
[]1
S
0010 DS: 0018 ES: 0018 CR0: 000000008005003b
0000000000000000(0000)
000000000000000e R14: ffffffff803af3bc R15: ffffffff8040fd48
0000000000000096 R11: 0
0000000000000000 R08:
ffffffff80407f00 RSI: f
ffff8100014cdf00 RBX:
第5章实践内核调试
] do_softirq+0x2c/0x85
vgacon_cursor+ox0/0x1a5
do_IRQ+0xe7/@xf5 -
note_interrupt+0x13a/0x227
ide_intr+0x1lf/0x1df
call_softirq+0x1c/0x28
__do_softirq+θx53/0xd5
ret_from_intr+ox0/0xa
__do_IRQ+0xc7/0x105
handle_IRQ_event+0x1b/0x58
..wake_up+0x38/0x4f
ret_from_intr+0x0/0xa
) GS:fffff80397000(0000) knlGS:00000000000
www.TopSage.com
0000000000000086 R
00000000000003 R09: 000000000079e321
ffffffff8040fd48 R
ffffffff803af380 RCX: 0000000000000000
R12: 0000000000000000
RDI: ffffffff803af3bc
?
?
?
?
---
## Page 235
能用了。跟平时有什么区别吗？于是注意到另一个启动选项：irqpol，轮询IRQ……
种死锁。如果只是因为连续接收IRQ中断就导致了死锁，那么操作系统就完全不
根据，以前也调用过这个do_IRQ（），可能是在IRQ中断中又发生了IRQ中断。
*desc）的锁desc->lock。估计是这个desc->lock引起了死锁。
do_IRQ(）函数只会获取一个锁，就是每个IRQ号都有的中断描述符（structirq_desc
轮询。详细的内核启动参数请参见内核源代码树中的Documentation/kernel
第1个表示dumpkermel在单处理器（Uniprocessor）上运行，第2个表示启用IRQ
说点题外话，大部分发行版的kdump的dumpkernel的启动参数中都加入了以下
IF标志（中断标志）已被清除，也就是在禁止中断的状态下获取自旋锁。
首先简单地确认一下问题发生时的情况。信息中的①是正在运行的代码，看见
分析信息
“HACK#15 Oops 信息的解读方法”。
显示的信息的阅读方法基本上与Oops信息的相同。关于Oops 信息请参见
似乎有点问题。
锁。这不禁让人怀疑，会是如此简单的问题吗？平时不用kdump时可不会发生这
取得desc->lock，但③并不知道这一点，试图获取同一个desc->lock时发生了死
了死锁。do_IRQ（)这个子程序会根据接收的IRQ中断启动相应的中断处理程序。
我们来看看栈跟踪。③是个do_IRQ（）调用，可知是在IRQ中断处理程序运行中发生
跟踪中包含了全部必要的信息。
而是同一个CPU试图多次获取同一个锁而发生的。也就是说，该信息中显示的栈
parameters.txt。这次第1个参数特别重要，因为死锁并不是多个cPU的竞态条件，
选项。
“.text.lock.spinlock”就知道正在获取自旋锁。接下来看看②的EFLAGS，可知
maxcpus=1irqpoll
?
就是允许中断的状态。
清除了IF标志，因此是禁止中断的状态。如果是00000286，即设置了IF标志，
在x86和x86_64架构中，IF标志是EFLAGS寄存器的第9个比特。00000086中
www.TopSage.com
K
224
---
## Page 236
225
设置了 irqpoll 选项时，行为会稍有变化。
处理了。如果找不到相应的中断处理程序，通常会像刚才那样只显示一条信息，但
请注意③的 note_interrupt()函数。这个函数用于检查接收的 IRQ 中断是否被正确
以irqpoll为重点跟踪源代码
中加上了irqpoll选项。
导致该 IRQ 被禁用。为了避免这个问题，许多发行版都给 dump kermel 的启动参数
这就是找不到 IRQ 中断对应的处理程序时显示的信息。这种现象多次发生，就会
们经常会看到下面这种信息。
是在设备尚未关闭、dump kermel 加载相应的驱动程序之前，设备上发生中断。我
bug 引起的，但是在使用 kdump 的环境中，这种情况经常发生。可能导致 panic 的
有时会发生在 IRQ 中断时找不到相应的中断处理程序的情况。有时是设备的固件
关于irqpoll选项
218 |
irq X: nobody cared (try booting with the "irqpoll" option)
void note_interrupt(unsigned int irq, struct irq_desc *desc,
[kemelirq/spurious.c]
fastcall unsigned int __do_IRQ(unsigned int irq, struct pt_regs *regs)
[kemel/irq/handle.c]
 struct irq desc *desc = irq_desc + irq; 
if (unlikely(irqfixup)){
第 5 章实践内核调试
if (irqfixup == 2 && irq == 0) I action_ret = IRQ_NONE) {
/* Don't punish working computers */
if (!noirqdebug)
spin_lock(&desc->lock) ;-—
*/
*在desc->Lock 已加锁的情况下，do_IRQ()调用了 note_interrupt()
 note_interrupt(irq, desc, action_ret, regs);
irqreturn_t action_ret, struct pt_regs *regs)
www.TopSage.com
---
## Page 237
并不是一个锁。下面来看看 handle_IRQ_event()。
经为 desc->lock 解锁，但这跟的 note_interrupt()调用时加锁的那个 desc->lock
请看开头的死锁信息④，该函数的名字显示在栈跟踪中，这是不正常的。③明明己
请看注释部分，在处理处于 pending 状态的中断时会调用 handle_IRQ_event()函数。
返回1。来看看 misrouted_irq()的内容。
索其他 IRQ 号上注册的处理程序并调用之。如果找到正确的处理程序，该函数就
misrouted_irq()函数为了检查相应的中断处理程序是否注册了错误的IRQ号，会搜
指定 irqpoll 选项后，irqfixup 的值为 2，misrouted_irq()函数就会被调用。
static int misrouted_irq(int irq, struct pt_regs *regs)
[kermelirq/spurious.c]
for (i = 1; i status & IRQ_PENDING) & action) {
if（i ==irq）/*只检查其他IRQ号*/
struct irqaction *action; 
 struct irq desc *desc = irq desc + i;
广
/*调用其他IRQ号上注册的中断处理程序*/
continue;
desc->status &= ~IRQ_PENDING;
working = 1;
*(pending 的中断)进行处理
*对上述处理时发生的 IRQ中断中未处理的部分
if (action_ret == IRQ_NONE)
int ok = misrouted_irq(irq, regs);
spin_lock(&desc->lock);
handle_IRQ_event(i, regs, action);
spin_unlock(&desc->lock);
*1
 desc->irqs_unhandled -= ok;
www.TopSage.com
HACK#38 内核停止响应（白旋锁篇之二) 1 219 
---
## Page 238
227
的一样。