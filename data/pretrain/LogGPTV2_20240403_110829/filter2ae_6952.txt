# Fastjson  " + expectClass.getName());
        }
        return clazz;
当clazz不为空时，expectClassFlag为空不满足条件，返回clazz,至此，第一次的checkAutoType检查完毕。
    ObjectDeserializer deserializer = config.getDeserializer(clazz);
    Class deserClass = deserializer.getClass();
    if (JavaBeanDeserializer.class.isAssignableFrom(deserClass)
            && deserClass != JavaBeanDeserializer.class
            && deserClass != ThrowableDeserializer.class) {
        this.setResolveStatus(NONE);
    } else if (deserializer instanceof MapDeserializer) {
        this.setResolveStatus(NONE);
    }
    Object obj = deserializer.deserialze(this, clazz, fieldName);
    return obj;
将检查完毕的autoCloseable进行反序列化，该类使用的是JavaBeanDeserializer反序列化器，从MapDeserializer中继承
    public  T deserialze(DefaultJSONParser parser, Type type, Object fieldName) {
        return deserialze(parser, type, fieldName, 0);
    }
    public  T deserialze(DefaultJSONParser parser, Type type, Object fieldName, int features) {
        return deserialze(parser, type, fieldName, null, features, null);
    }//进入后代码如下
    if ((typeKey != null && typeKey.equals(key))
            || JSON.DEFAULT_TYPE_KEY == key) {
        lexer.nextTokenWithColon(JSONToken.LITERAL_STRING);
        if (lexer.token() == JSONToken.LITERAL_STRING) {
            String typeName = lexer.stringVal();
            lexer.nextToken(JSONToken.COMMA);
            if (typeName.equals(beanInfo.typeName)|| parser.isEnabled(Feature.IgnoreAutoType)) {
            // beanInfo.typeName是autoCloseable ，但IgnoreAutoType没有开启   
              if (lexer.token() == JSONToken.RBRACE) {
                    lexer.nextToken();
                    break;
                }
                continue;
            }//不满足条件所以这块代码被跳过了
JSON.DEFAULT_TYPE_KEY 为[@type](https://github.com/type "@type") ,并给它赋值传入的key
[@type](https://github.com/type "@type") ,将第二个类也就是这次 的gadget传入
    if (deserializer == null) {
        Class expectClass = TypeUtils.getClass(type);
        userType = config.checkAutoType(typeName, expectClass, lexer.getFeatures());
        deserializer = parser.getConfig().getDeserializer(userType);
    }
期望类在这里发生了变化，expectClass的值变为java.lang.AutoCloseable，typeName为gadget，
    boolean jsonType = false;
            InputStream is = null;
            try {
                String resource = typeName.replace('.', '/') + ".class";
                if (defaultClassLoader != null) {
                    is = defaultClassLoader.getResourceAsStream(resource);
                } else {
                    is = ParserConfig.class.getClassLoader().getResourceAsStream(resource);
                  //开了一个class文件的输入流
                }
                if (is != null) {
                    ClassReader classReader = new ClassReader(is, true);//new reader工具
                    TypeCollector visitor = new TypeCollector("", new Class[0]);
                    classReader.accept(visitor);
                    jsonType = visitor.hasJsonType();
                }
            } catch (Exception e) {
                // skip
            } finally {
                IOUtils.close(is);//关闭流 JarURLConnection$JarURLInputStream
            }
来到JSONType注解，取typename gadget转换变为路径，resource通过将 “.” 替换为”/“得到路径
。其实已经开始读取gadget了，它本意应该是加载AutoCloseable。
    public ClassReader(InputStream is, boolean readAnnotations) throws IOException {
        this.readAnnotations = readAnnotations;
        {
            ByteArrayOutputStream out = new ByteArrayOutputStream();
            byte[] buf = new byte[1024];
            for (; ; ) {
                int len = is.read(buf);
                if (len == -1) {
                    break;
                }
                if (len > 0) {
                    out.write(buf, 0, len);
                }
            }
            is.close();
            this.b = out.toByteArray();
        }
可以看到这里有读取文件的功能。所以之前网传的POC可能是利用这里这个特性(?)留意一下以后研究…
    if (autoTypeSupport || jsonType || expectClassFlag) {
        boolean cacheClass = autoTypeSupport || jsonType;
        clazz = TypeUtils.loadClass(typeName, defaultClassLoader, cacheClass);
      //开始加载gadget
    }
    if (expectClass != null) {
        if (expectClass.isAssignableFrom(clazz)) {//判断里面的类是否为继承类
            TypeUtils.addMapping(typeName, clazz);
            return clazz;
        } else {
            throw new JSONException("type not match. " + typeName + " -> " + expectClass.getName());
        }
    }
isAssignableFrom()这个方法用于判断里面的类是否为继承类，当利用了java.lang.AutoCloseable这个方法去攻击fastjson，那么后续反序列化的链路需要是继承于该类的子类。
TypeUtils.addMapping(typeName, clazz)这一步成功把gadget加入缓存中并返回被赋值gadget的clazz.
checkAutoType正式检查完毕，此时用deserializer =
parser.getConfig().getDeserializer(userType); userType既gadget进行反序列化。
    private void xxTryOnly(boolean isXXXXeconnect, Properties mergedProps) throws 
      XXXException {
        Exception connectionNotEstablishedBecause = null;
        try {
            coreConnect(mergedProps);
            this.connectionId = this.io.getThreadId();
            this.isClosed = false;
进入coreConnect()
在这里进行连接。至此漏洞利用完结。
###  2\. 总结：
在本次反序列化漏洞中，笔者认为关键点在于找到合适并且可利用的常用jar包中的gadget。gadget在被反序列化后即可执行类里的恶意的功能(不仅限于RCE还包括任意文件读取/创建,SSRF等)。也可以使本漏洞得到最大化的利用。
## 三、参考考链接