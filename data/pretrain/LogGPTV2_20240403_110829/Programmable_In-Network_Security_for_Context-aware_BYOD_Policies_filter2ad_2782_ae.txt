### Fewer Range Checks and Their Implications

Range checks (55,000 for one context, 800 for 40 contexts) are less numerous than exact checks, as they are supported by TCAM, which has a smaller capacity compared to SRAM. However, the latency and bandwidth overheads remain similar, as these factors do not depend on the type of checks. Data packets are unaffected by policy complexity, as they simply look up decisions from the connection table.

### Recirculation Traffic Management

Recirculation traffic is managed within a dedicated 200 Gbps switch pipeline, ensuring it does not compete with normal user traffic. Additionally, recirculation only incurs latency on context packets; data packets simply look up previous decisions in a single-stage traversal. Therefore, even when recirculating context packets, Poise processes data packets at baseline latency and full line speed (Figures 11b-11c).

### Per-User Policies in Poise

Poise supports per-user policies by including the user ID as a context. This reduces the total number of contexts from 40 to 39. Assuming each policy has 39 contexts, Poise can check against 21,000 user IDs. If each user can launch 1,000 concurrent connections, Poise would support a maximum of 1,000 users (1,000,000 / 1,000). For perspective, Microsoft's headquarters reports 80,000 employees across 125 buildings [18]. If each building has its own access control switch, each switch would need to support approximately 640 users.

### Client Overhead Evaluation

#### CPU Overhead
We evaluated the client module's CPU overhead using vanilla Android as the baseline system. By tuning the frequency of context packet transmission, we found that in a naive design where PoiseDroid tags every packet with context information, the CPU overhead is 11%. With an optimized design sending one context packet per second, the overhead is reduced to 1.3% (Figure 15a in Appendix A.4).

#### Traffic Overhead
Next, we measured the traffic overhead due to context packets, assuming four context fields (16 bytes). At one context packet per second, the traffic overhead is less than 0.01%, a negligible amount (Figure 15b in Appendix A.4).

#### Battery Overhead
Using PCMark [35], a battery life benchmark tool for smartphones and tablets, we quantified the battery overhead. The overall overhead introduced by PoiseDroid across benchmarked activities is only 1.02%, with the highest overhead (writing) being 2.87% (Table 1 in Appendix A.4).

#### Overall Benchmark
We used CF-Bench, a comprehensive benchmark tool for multicore mobile devices, to measure the overall overheads of PoiseDroid. This tool measures overheads in native code, Java code, and provides an overall benchmark score. PoiseDroid introduces additional overheads of 5%, 4%, and 5% for native, Java, and overall scores, respectively (Figure 16 in Appendix A.4).

### Comparison with OpenFlow-based SDN

Finally, we compare the programmable in-network security paradigm, as embodied in Poise, with the OpenFlow-based SDN security paradigm, focusing on:
1. Speed of security decision changes.
2. Resilience to control plane saturation attacks [82].

One key advantage of Poise over traditional SDN security solutions is the avoidance of software-based packet processing on a remote controller, as Poise uses programmable data planes to directly process context signals in hardware.

#### Setup
We set up a Floodlight v1.2 SDN controller on a separate server and configured other servers to use the controller via OpenFlow as implemented in OpenvSwitch v2.9.2. We implemented our example policies (P1-P7) as software "SDN apps" in the controller. These apps listen for client context updates and push OpenFlow rules to the clients for access control, mirroring state-of-the-art security solutions based on OpenFlow-based SDN [58, 75, 82].

#### Defense Agility
We measured the defense agility by the time δ it takes to change access control decisions after receiving a new context packet. For OpenFlow-based SDN, this includes the round-trip time delay for the context packet to reach the controller and for the controller to push new OpenFlow rules back to the OpenvSwitch. Depending on network load, the agility of the baseline system is δ = 5 ms–2.47 s. In comparison, Poise processes context changes on the fast path, achieving δ < 500 ns in all cases, which is three to seven orders of magnitude faster than the baseline.

#### Control Plane Saturation Attacks
An attacker can generate high loads on the channel between the data plane and the control plane by creating a large number of context changes. This degrades the performance of legitimate users, as PacketIn messages go through the same channel. As shown in Figure 12, the central controller struggles with high context change rates. At an attack strength of 1 million context changes per second, legitimate clients were unable to establish new connections (99%+ connection requests were dropped; the rest experienced a 30x higher latency). Poise, however, processes context changes entirely in the data plane at hardware speeds, maintaining consistent performance for legitimate clients during attacks.

### Related Work

#### SDN/NFV Security
SDN/NFV-based solutions for enterprise security include SANE [46] and Ethane [45]. Recent work includes PSI [98], FortNox [77], PBS [58], PivotWall [75], OFX [84], and CloudWatcher [80]. Existing work has also considered new attack vectors in SDNs, such as control plane saturation attacks [82]. Poise leverages programmable data planes to develop defenses resilient to control plane saturation attacks with higher agility.

#### Context-Aware Security
Security researchers have recognized the need for context-aware security to support fine-grained, dynamic policies. Barth et al. [41] proposed a logic framework for contextual integrity. Recent work includes ContexIoT [60], FlowFence [51], and DeepDroid [91]. Compared to existing work, Poise designs a network primitive for security enforcement and provides an end-to-end framework for specifying, compiling, and enforcing declarative policies.

### Conclusion

Poise is a system that enforces context-aware security using a programmable, efficient, in-network primitive. Administrators can express a rich set of policies in a high-level language, which are compiled into P4 programs running inside modern switches with programmable data planes. Our evaluation shows that Poise has reasonable overheads and is highly agile and resilient to control plane saturation attacks compared to OpenFlow-based defenses.

### Acknowledgments

We thank our shepherd Adwait Nadkarni, the anonymous reviewers, Vladimir Gurevich, Kuo-Feng Hsu, Dingming Wu, and Jiarong Xing for their insightful comments and suggestions. This work was supported in part by a Hong Kong RGC Project (No. PolyU 152279/16E, CityU C1008-16G) and an NSF grant CNS-1801884.