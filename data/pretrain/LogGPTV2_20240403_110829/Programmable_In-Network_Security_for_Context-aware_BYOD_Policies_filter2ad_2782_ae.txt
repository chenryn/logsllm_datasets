fewer range checks (55 k for one context, 0.8 k for 40 contexts) than exact checks, as the former are supported in TCAM, which
is smaller than SRAM; but the latency and bandwidth overheads are similar, as they do not depend on the types of checks. Data
packets are not affected by policy complexity, as they simply look up the decisions from the connection table.
We note that recirculation trafﬁc is contained in a dedicated
200 Gbps switch pipeline—it does not compete with normal
user trafﬁc. Also, recirculation only incurs latency on context
packets, as data packets simply look up previous decisions in
a single stage traversal. Therefore, even when recirculating
context packets, Poise still processes data packets at baseline
latency and full linespeed (Figures 11b-11c).
Discussion: Per-user policies. Poise supports per-user poli-
cies by including the user ID as a context. Therefore, per-user
policies merely reduce the number of total contexts by one,
from 40 to 39. The number of user IDs Poise can check against
is 21k, assuming the policy has 39 contexts. As another di-
mension of constraint, assuming each user may launch 1k con-
current connections, then Poise would support a maximum
of 1M/1k=1k users. To put this into perspective, Microsoft
headquarter reports 80 k employees in 125 buildings [18];
assuming that each building has its own access control switch,
then every switch needs to support 0.64 k users.
8.6 Client overhead
We now evaluate the overhead of the client module, using
vanilla Android without PoiseDroid as the baseline system.
CPU overhead. We tuned the frequency at which the client
module sends context packets, and measured the CPU over-
head for each frequency. In a naïve design where PoiseDroid
tags every packet with context information, the CPU over-
head is as much as 11%. With an optimized design where
the client module sends one context packet per second, the
CPU overhead is drastically reduced to 1.3%. Figure 15a in
Appendix A.4 shows the results.
Trafﬁc overhead. Next, we measured the trafﬁc overhead due
to the context packets. This experiment assumes four context
ﬁelds (16 bytes). We found that, at one context packet per
second, the trafﬁc overhead is less than 0.01%, a negligible
amount. Figure 15b in Appendix A.4 shows the results.
Battery overhead. We used PCMark [35], a battery life
benchmark tool to test smartphones and tablets, to quantify the
amount of battery overhead. Table 1 in Appendix A.4 shows
the results. The overall overhead across benchmarked activi-
ties introduced by PoiseDroid is only 1.02%, and even for the
activities that introduce the highest overhead (i.e., writing),
the overhead is only 2.87%.
Overall benchmark. Next, we used CF-Bench, a comprehen-
sive benchmark tool designed for multicore mobile devices,
to quantify the overall overheads of PoiseDroid. This tool can
further measure the overheads introduced by native code, Java
code, and an overall benchmark score, where higher scores
mean better performance. Figure 16 in Appendix A.4 shows
that PoiseDroid only introduces 5%, 4%, and 5% additional
overhead for the native, Java, and overall scores.
8.7 Poise vs. OpenFlow-based SDN
Last but not least, we compare the paradigm of programmable
in-network security, as embodied in Poise, against
the
paradigm of OpenFlow-based SDN security, in terms of a)
the speed for security decision change, and b) resilience to
control plane saturation attacks [82]. As we motivated before,
one key advantage of Poise over traditional SDN security so-
lutions is the avoidance of software-based packet processing
on a remote controller, because Poise uses programmable data
planes to directly process context signals in hardware.
Setup. We set up a Floodlight v1.2 SDN controller on a sep-
arate server, and conﬁgured other servers to use the controller
via OpenFlow as implemented in OpenvSwitch v2.9.2. We
implemented our example policies (P1-P7) as software “SDN
apps” in the controller. These apps listen for client context
updates, and push OpenFlow rules to the clients for access
control. This closely mirrors the setup in state-of-the-art secu-
rity solutions based on OpenFlow-based SDN [58, 75, 82].
Defense agility. We quantify the defense agility of a secu-
rity system by measuring δ, the time it takes to change its
access control decision after seeing a new context packet. For
OpenFlow-based SDN, this includes the round-trip time delay
606    29th USENIX Security Symposium
USENIX Association
1001k10k100k1M125102040Checks per contextNumber of contextsExactRange 0 1 2 3 4 5 6 7125102040Latency (us)Number of contextsContext packetData packet00.590100125102040Throughput (Gbps)Number of contextsData traffcRecirculationnized the need for context-aware security to support ﬁne-
grained, dynamic policies. Barth et al. [41] propose a logic
framework for contextual integrity. Recent work has devel-
oped various applications leveraging this concept. Contex-
IoT [60] analyzes UI activities, app information, and con-
trol/data ﬂow information, and prompts users for runtime
permissions. FlowFence [51] runs applications in sandboxes
and enforces information ﬂow control across IoT applications.
PBS [58] uses OpenFlow-based SDN for BYOD security. Yu
et al. [99] sketch a vision for using network function virtual-
ization for context-aware IoT security. DeepDroid [91] traces
IPC and system calls to achieve ﬁne-grained security. Com-
pared to existing work, Poise designs a network primitive for
security enforcement, and has an end-to-end framework for
specifying, compiling, and enforcing declarative policies.
Policy languages. Most domain-speciﬁc languages for net-
working [38, 42, 69, 78, 79, 90, 98, 100] are not targeted
at security. Policy languages for network security also exist,
but we are not aware of an existing language that can sup-
port context-aware policies on programmable data planes.
For instance, PSI [98] uses ﬁnite state machines to specify
security policies, but it assumes that the policies are imple-
mented by general-purpose software; PBS [58] assumes a
traditional SDN environment. Poise builds upon an existing
SDN language (NetCore [69]), but adapts it for enforcing
context-aware security on programmable data planes.
Programmable data planes. Poise builds upon the emerging
trend of using data plane programmability [43, 44, 85] for in-
network computation, e.g., load balancing [65], network mon-
itoring [73], key-value cache [62, 66], and coordination [61],
but it focuses on a very different goal: security. The closest to
our work is a recent workshop paper [70], but it neither has a
full system implementation nor evaluation.
10 Conclusion
We have described Poise, a system that can enforce context-
aware security using a programmable, efﬁcient, in-network
primitive. In Poise, administrators can express a rich set of
policies in a high-level language. Our compiler then compiles
the policies down to switch programs written in P4. These
programs run inside modern switches with programmable
data planes, and can enforce security decisions at linespeed.
Our evaluation shows that Poise has reasonable overheads,
and that compared to OpenFlow-based defense, it is highly
agile and resilient to control plane saturation attacks.
Acknowledgments: We thank our shepherd Adwait Nad-
karni, the anonymous reviewers, Vladimir Gurevich, Kuo-
Feng Hsu, Dingming Wu, and Jiarong Xing for their insight-
ful comments and suggestions. This work was supported in
part by a Hong Kong RGC Project (No. PolyU 152279/16E,
CityU C1008-16G) and an NSF grant CNS-1801884.
(a) New connection latency
(b) Successful connections
Figure 12: Poise is resilient to control plane saturation attacks.
Attack strength is measured by the number of context changes
per second that the attacker generates. In the OpenFlow-based
solution, new connections and context changes would gen-
erate PacketIn and FlowMod events between the OpenFlow
switch and the central controller.
for the context packet to reach the controller and for the con-
troller to push new OpenFlow rules back to the OpenvSwitch.
(We did not include the additional latency of OpenvSwitch
because a hardware OpenFlow switch can reduce this signif-
icantly.) We found that, depending on the network load, the
agility of the baseline system is δ =5 ms–2.47 s. In compari-
son, Poise directly processes context changes on the fast path,
achieving δ < 500 ns in all cases, which is three to seven
orders of magnitude faster than the baseline.
Control plane saturation attacks [82]. An attacker can also
create high loads on the channel between the data plane and
the control plane by generating a large number of context
changes. This effectively degrades the performance of legiti-
mate users for establishing new connections, as the PacketIn
messages go through the same channel. As Figure 12 shows,
the central controller struggles to keep up with the amount of
context changes that it needs to process. At an attack strength
of 1M context changes per second, legitimate clients clients
were not able to establish new connections (99%+ connec-
tion requests from legitimate clients were dropped; the rest
experienced a latency 30× higher than normal on average).
Poise, on the other hand, processes context changes entirely
in the data plane at hardware speeds. The performance for
legitimate clients stays almost constant during the attacks.
9 Related Work
SDN/NFV security. SDN/NFV-based solutions for enterprise
security started with SANE [46] and Ethane [45]. Recent
work also includes PSI [98], FortNox [77], PBS [58], Pivot-
Wall [75], OFX [84], and CloudWatcher [80]. Existing work
has also considered new attack vectors in SDNs [59, 82, 83,
96], such as control plane saturation attacks [82]. Poise lever-
ages the recent development of programmable data planes,
and develops defenses that are resilient to control plane satu-
ration attacks with much higher agility.
Context-aware security. Security researchers have recog-
USENIX Association
29th USENIX Security Symposium    607
10010110201K10K100K1MAvg. latency (ms)Attack strengthOpenFlow SDNPoise05010001K10K100K500K1MPercentage (%)Attack strengthOpenFlow SDNPoiseReferences
[1] AndFTP. http://www.lysesoft.com/products/andftp.
[2] Android for Work. https://www.android.com/enterpri
se/employees/.
[30] Veriﬁed Boot: Android Open Source Project. https://sour
ce.android.com/security/verifiedboot/.
[31] VMware Airwatch. https://www.air-watch.com/capa
bilities/enterprise-mobility-management/.
[32] What is BYOD and why is it important? https://goo.gl
[3] Barefoot Toﬁno. https://www.barefootnetworks.com/t
/H71Nji.
echnology/#tofino.
[4] The beneﬁts and risks of BYOD. https://goo.gl/ym9ATg.
[5] Blackberry EMM. https://www.blackberry.com/us/en
[33] IEEE 802.1x remote authentication dial in user service (RA-
DIUS) usage guidelines, RFC 3580. 2003. https://www.rf
c-editor.org/info/rfc3580.
/solutions/enterprise-mobility-management-emm.
[34] dumpsys. https://developer.android.com/studio/c
[6] Bring your own risk with BYOD. https://goo.gl/bn1rN4.
[7] BYOD: A global perspective. https://goo.gl/BTrSm4.
[8] BYOD: Mobile devices threats and vulnerabilities. https:
//goo.gl/phTav6.
[9] Cavium XPliant. https://www.cavium.com/xpliant-e
thernet-switch-product-family.html.
[10] Cisco Port ACLs (PACLs) and VLAN ACLs (VACLs).
https://www.cisco.com/c/en/us/td/docs/switches
/lan/catalyst6500/ios/12-2SX/configuration/gui
de/book/vacl.html.
[11] End node. https://goo.gl/D99C39.
[12] How to solve the end node problem. https://goo.gl/9wW
qJr.
[13] IBM Mobile: BYOD. https://goo.gl/zafGxN.
[14] IBM opens up smartphone, tablet support for its workers.
https://goo.gl/WBn3vP.
[15] IEEE 802.1AE: MAC security. https://1.ieee802.org/
security/802-1ae/.
[16] Intel FlexPipe. https://www.intel.com/content/www/
us/en/products/network-io/ethernet/switches.ht
ml.
[17] Market reports. https://goo.gl/25SX7K.
[18] Microsoft headquarters. https://www.builtinseattle.c
om/2018/11/12/microsoft-redmond-campus-headqua
rters.
[19] P4 language repositories. https://github.com/p4lang.
[20] The Poise code repository. https://github.com/qiaokan
g92/poise.
[21] Protocol numbers. https://www.iana.org/assignments
/protocol-numbers/protocol-numbers.xhtml.
[22] The rise and risk of BYOD. https://www.druva.com/bl
og/the-rise-and-risk-of-byod/.
[23] Samsung BYOD solutions. https://goo.gl/GmZ1io.
[24] Samsung Knox. http://www.samsung.com/global/bus
iness/mobile/solution/security/samsung-knox.
[25] Securing your weakest link: Your mobile devices. https:
//goo.gl/Z769MG.
[26] Security conﬁguration guide: Access control lists, Cisco IOS
XE Release 3S. https://goo.gl/zTJaUL.
[27] Symantec EMM. https://www.symantec.com/content
/dam/symantec/docs/data-sheets/endpoint-protec
tion-mobile-for-emm-en.pdf.
[28] A technical
report on TEE and ARM TrustZone.
https://community.arm.com/developer/ip-produ
cts/processors/b/processors-ip-blog/posts/a-te
chnical-report-on-tee-and-arm-trustzone.
[29] Top 21 companies in the BYOD market. https://goo.gl
/MuRr66.
ommand-line/dumpsys, 2018.
[35] Pcmark for android benchmark. https://play.google.
com/store/apps/details?id=com.futuremark.pcmar
k.android.benchmark, 2018.
[36] P. Aditya, R. Sen, P. Druschel, S. Joon Oh, R. Benenson,
M. Fritz, B. Schiele, B. Bhattacharjee, and T. T. Wu. I-pic:
A platform for privacy-compliant image capture. In Proc.
MobiSys, 2016.
[37] A. Alzubaidi and J. Kalita. Authentication of smartphone
users using behavioral biometrics. IEEE Communications
Surveys& Tutorials,, 18:1998–2026, 2016.
[38] C. J. Anderson, N. Foster, A. Guha, J.-B. Jeannin, D. Kozen,
C. Schlesinger, and D. Walker. NetKAT: Semantic founda-
tions for networks. In Proc. POPL, 2014.
[39] N. Apthorpe, Y. Shvartzshnaider, A. Mathur, D. Reisman, and
N. Feamster. Discovering smart home Internet of Things
privacy norms using contextual integrity. Proc. IMWUT,
2018.
[40] M. Backes, S. Bugiel, S. Gerling, and P. von Styp-Rekowsky.
Android security framework: Extensible multi-layered access
control on android. In Proc. ACSAC, 2014.
[41] A. Barth, A. Datta, J. C. Mitchell, and H. Nissenbaum. Privacy
and contextual integrity: Framework and applications. In Proc.
IEEE S&P, 2006.
[42] R. Beckett, R. Mahajan, T. Millstein, J. Padhye, and D. Walker.
Don’t mind the gap: Bridging network-wide objectives and
device-level conﬁgurations. In Proc. SIGCOMM, 2016.
[43] P. Bosshart, D. Daly, G. Gibb, M. Izzard, N. McKeown, J. Rex-
ford, C. Schlesinger, D. Talayco, A. Vahdat, G. Varghese, and
D. Walker. P4: Programming protocol-independent packet
processors. ACM SIGCOMM CCR, 44(3), 2014.
[44] P. Bosshart, G. Gibb, H.-S. Kim, G. Varghese, N. McKeown,
M. Izzard, F. Mujica, and M. Horowitz. Forwarding meta-
morphosis: Fast programmable match-action processing in
hardware for SDN. In Proc. SIGCOMM, 2013.
[45] M. Casado, M. J. Freedman, J. Pettit, J. Luo, N. McKeown,
and S. Shenker. Ethane: Taking control of the enterprise. In
Proc. SIGCOMM, 2007.
[46] M. Casado, T. Garﬁnkel, A. Akella, M. Freedman, D. Boneh,
N. McKeown, and S. Shenker. SANE: A protection archi-
tecture for enterprise networks. In Proc. USENIX Security,
2006.
[47] D. Dang-Pham and S. Pittayachawan. Comparing intention
to avoid malware across contexts in a BYOD-enabled Aus-
tralian university: A protection motivation theory approach.
Computers & Security, 48:281–297, 2015.
[48] T. Datta, N. Feamster, J. Rexford, and L. Wang. SPINE:
Surveillance protection in the network elements. In Proc.
FOCI, 2019.
608    29th USENIX Security Symposium
USENIX Association
[49] S. Eberz, K. B. Rasmussen, V. Lenders, and I. Martinovic.
Evaluating behavioral biometrics for continuous authentica-
tion: Challenges and metrics. In Proc. AsiaCCS, 2017.
[50] M. Ehatisham-ul-Haqa, M. A. Azama, U. Naeemb, Y. Amina,
and J. Looc. Continuous authentication of smartphone users
based on activity pattern recognition using passive mobile
sensing. Journal of Network and Computer Applications,
109:24–35, 2018.
[51] E. Fernandes, J. Paupore, A. Rahmati, D. Simionato, M. Conti,
and A. Prakash. FlowFence: Practical data protection for
emerging IoT application frameworks.
In Proc. USENIX
Security, 2016.
[52] D. F. Ferraiolo, D. R. Kuhn, and R. Chandramouli. Role-
Based Access Control. Artech House, 2007.
[53] D. F. Ferraiolo, R. Sandhu, S. Gavrila, D. R. Kuhn, and
R. Chandramouli. Proposed NIST standard for role-based
access control. ACM Transactions on Information and System
Security (TISSEC), 4(3):224–274, 2001.
[54] N. Foster, R. Harrison, M. Freedman, C. Monsanto, J. Rexford,
A. Story, and D. Walker. Frenetic: A network programming
language. In Proc. ICFP, 2011.