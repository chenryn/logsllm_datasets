cussedfurtherinsection3.3.3.
Every join involves two components. The component that is scanned first will be referred from
hereon as the ‘‘outer join relation,’’ while the other component is the ‘‘inner join relation.’’ For a query
containing n variables, the plan is constructed in such a way that the n-way composite join appearsat the
top of the tree. (See figure 3.1.) The left subtree is a plan for processing the outer join relation, and the
rightsubtreecorrespondstoaplanforprocessingtheinnerjoin relation. Becausetheoptimizer onlycon-
siders linear joins (see section 3.1), the right subtree is alwaysascannodewhile the left subtreeis aplan
foran(n-1)-wayjoin,orscanifn=2. Thesecharacteristicsapplyrecursivelytotherestofthetree.
10
hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh
Join
Join An
.
.
A(n-1)
.
Join
Join A3
A1 A2
(((A1joinA2)joinA3)join...A(n-1))joinAn
Figure3.1
Plantreeforann-wayjoin
hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh
Toprocesssuchaplan,thequeryprocessorwalksthroughthetreestartingattheroot. Ifthenodeis
a join, depending on the join strategy, calls are made on either the left or right subtrees to retrieve tuples
fromeithertheouterorinnerjoin relations. Ifthenodeisascannode,theappropriaterelation isscanned
using the selected strategy. When scanning a relation, restriction clauses specified on the relation are
examined. Once a single tuple has been found satisfying these qualifications, the tuple is returned to the
nodethat initiated thescan. Ifthehighernodewasajoin nodeandthistuple originated fromtheleftsub-
tree of the join node, then a call is made on the right subtree. Otherwise, this tuple originated from the
right subtree and thus can be joined with the tuple passed back by the left subtree. Provided all
corresponding join clauses are satisfied, a composite tuple is formed. If the join clauses are not satisfied,
calls are made on either the right or left subtrees until a qualifying composite tuple can be constructed.
Once this composite tuple is formed, it is passed upward to the node that called this join node, and the
processisrepeated.
11
Iftuples must besortedorhashedpriorto join processing(seefigure3.2),all tuplesreturnedfroma
lower node must first be stored in a temporary relation. Once the lower node has passed all relevant
tuplesinto thetemporary,thesortorhashisperformed. Fromhere,thetemporaryrelationisscannedlike
any other relation, and its tuples are also pipelined upward. In summary, calls are made on lower nodes
in the tree when tuples are needed at higher nodes to continue processing, and tuples originating from
scannodesat the leaves ofthe plan treearepipelined bottom-up toformcomposite tuples,whichalsoare
pipelinedupward.
Asanalternative topipelining, thequeryexecutorcouldhaveprocessednodestocompletion, stored
the intermediate subresults in temporary relations, andthen passedgroupsoftuplesupwardsratherthana
tuple at a time. This may be advantageous when there are many duplicate tuples in a subresult. The
duplicates could be removed from the temporary, reducing the time requiredto processlater joins. How-
ever, for simplicity, wechoseto focuson apipeline processingscheme fornow. Implementation oftem-
porarieswillbereservedforfutureextensions.
3.3. Generating Possible Plans
TheSYSTEM-Roptimizer decideswhichplansshouldbegeneratedbaseduponthetypesofindices
defined on relations appearing in a query as well operators that also appear in the query. For example,
supposeaB-treeindexisdefinedonarelation,andaquerycontainsthefollowingrestrictionclause:
hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh
Join
Sort .
.
.
Scan
Figure3.2
Sortnodeinaplantree
hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh
12
relation.fieldOPRconstant.
Using Selinger’s notation, clauses of this form will be referred from hereon as ‘‘sargable’’ clauses
[SELI79]. If relation.field within a sargable clause happens to match the key of the B-tree index and the
restriction operator, OPR, is anything but „ , then an index path should be considered because a B-tree
providesefficientaccesswhenusedwiththefollowingoperators:
=,,‡ .
The criteria for decisions like this can easily be incorporated into the SYSTEM-R optimization code
because a conventional database only has a fixed number of operators and access methods; so there are
only a fixed number of possibilities. Clearly the POSTGRESoptimizer cannot usesuchastrategy dueto
POSTGRES’s provision for extendibility. Therefore, we resorted to storing operator and access method
characteristicsindatabasesystemcatalogs,andwecodedtheoptimizer toaccessandusethisinformation
in generating possible plans. The rest of this subsection will discuss in greater detail the steps taken in
creating accessplansinordertofocusonthetypeofinformation theoptimizer andotherrelevantpartsof
thesystemwillneedinmakingdecisions.
3.3.1. TransformingQueries IntoStandardForm
Prior to optimizing a query, the parser must take the user’s ascii request, parse it for valid syntax,
perform semantic checks, and finally generate a tree representing information within the query. To make
optimization simpler and to produce more efficient query plans, the parser must place the qualification
portion of every query in conjunctive normal form. This entails pushing all ‘‘or’’ clauses to the inner-
mostlevelsofaqualification usingthefollowingdistributive rule:
aor(bandc)” (aorb)and(aorc).
Theoptimizeralsorequiresthat‘‘not’s’’bepushedtotheinnermostlevelsusingDeMorgan’slaw:
not(aandb)” not(a)ornot(b)
not(aorb)” not(a)andnot(b)
and if possible, removed from the query. For example, the qualification in figure 3.3 is equivalent to the
13
qualification infigure3.5,whichisinconjunctivenormalformwith‘‘not’s’’removed.
Removing ‘‘not’s’’ from a qualification requires substituting operators with their respective nega-
tions. For example, ‘‘=’’ would be replaced by ‘‘„ ,’’ while ‘‘AREAGT’’ would be replaced by
‘‘AREALE.’’ For the parser to make these substitutions, users must specify an operator’s corresponding
negation, in addition to other information, when defining a new operator. The information is specified as
follows:
defineoperator(opnameis=, ... ,negatoris„ , ... )
andisstoredinanoperatorcatalog,accessiblebytheparser.
There are, however, problems associated with this requirement. First of all, this forces users to
defineoperatorscorrespondingto negators. Inother words,having specified ‘‘AREANEQ’’asanegator,
it is also necessary to define an operator called ‘‘AREANEQ.’’ Although this definition is not difficult,
since a negator is the logical opposite of an already defined operator, users may have no need for the
negator, and therefore would rather not have defined the extraneous operator. Secondly, because every
hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh
not(r.f=1)or(not(r.f2>1orr.f21))and(not(r.f=1)ornot(r.f2,’’ while the commutator of ‘‘AREAEQ’’
15
is also ‘‘AREAEQ.’’ The issues and solution discussed in the previous paragraphs in reference to nega-
tors also apply here, and again, it is to the user’s advantage to specify commutators. The reasoning
behindthiswill bediscussedfurtherinsection3.3.2. Basically, it enablestheoptimizertoconsiderindex
pathsitcouldnothaveconsideredhadavariableappearedontherighthandsideofanoperator.
3.3.2. IndexScans
Once a query tree has been transformed as close as possible to standard form, it is passed to the
optimizer. The first steptheoptimizer takesistofindall feasiblepathsforscanningeachrelation appear-
ing in the query. Relations can always be scanned sequentially; therefore, a sequential scan path is
always considered. Generally when sargable clauses (i.e., clauses of the form relation.field OPR con-
stant)appearwithin queries,indices will restrict the amount ofsearchrequired. Therefore,ifauserhasa
primaryindexorsecondaryindicesdefinedonarelation,allviableindexpathsarealsoconsidered.
Foranindextobeconsidered,itskeysmustmatchvariablesthatappearwithinsargablerestrictions.
The optimizer also needs to insure the usability of the operator within the sargable clause with the index
under consideration. For example, anareaB-tree, whoserecordsaresortedin ‘‘AREALT’’order,canbe
usedwithsargableclausesforwhichOPRis:
AREAEQ,AREAGT,AREAGE,AREALT,orAREALE,
whileastandardB-treecanbeusedwithsargableclausescontaining:
=,>,‡ ,,‡ ,
cc c c c c
cc B-tree c intops c ‡ c c
cc B-tree c areaops c AREAEQ c c
cc B-tree c areaops c AREALT c c
cc B-tree c areaops c AREALE c c
cc c c c c
B-tree areaops AREAGT
cc c c c c
B-tree areaops AREAGE
cc c c c c
icciiiiiihiaishiiiiiiic ihiaisihioipisiiciiiii=iiiiiiciiiiiiiiiiiiiiiiiiiiiiiiic
Table3.1
Indexandoperatorclasses
hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh
17
Currently, only a single clause can be used with an index defined on a single key. For example, if
thefollowingtwoclausesarecontainedinaquery:
r.foo>100andr.foo 100 arelocatedusingtheindex,orall values) andwhichcorrespondsto the high end(e.g.,5
canbeusedwithaB-treeindexdefinedon‘‘field1’’and‘‘field2,’’butthefollowingcannot:
r.field1>1andr.field2<10.
The benefits of this extra information is not significant enough to justify the extra complexity that would
berequiredwhendefining newoperatorsandaccessmethods; therefore,POSTGRESdoesnotimplement
18
thesefeatures.
One optimization that the POSTGRES planner does support is use of multiple indices to process
‘‘or’’clauses. Normally,itwouldnotbepossibletouseanindexscanwiththefollowingclause:
r.field=1orr.field=2
because there are two key values, 1 and 2. However, it is possible to use an index scan keyed on 1 fol-
lowed by another index scan keyed on 2. Since two index scans may be much less expensive than a sin-
glesequentialscan,theoptimizerwillconsiderusingmultiple indexscans.
In addition to restricting the scope of a search, index paths are also considered for another reason.