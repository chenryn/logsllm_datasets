### B. Non-persistent/DKOM Kernel Rootkits

Non-persistent kernel rootkits execute a one-time attack to remove any traces of their presence from the kernel and then attempt to cover up the incident. If such an attack occurs before enabling FACE-CHANGE, the opportunity to capture the attack is lost.

For Direct Kernel Object Manipulation (DKOM) rootkits, which only manipulate kernel data, FACE-CHANGE cannot detect the attack because it only monitors anomalies in kernel code execution. To detect this type of attack, we could integrate existing works [16], [17] into our system to check the integrity of the kernel’s data. This integration is left as future work.

### C. Multiple-vCPU Support for Guest VMs

Our current prototype supports guest VMs with a single vCPU. To support multiple vCPUs per guest VM, FACE-CHANGE will need to identify context switches on every vCPU. Each process has its own page table and is pinned to one CPU during execution. Similarly, each vCPU has its own Extended Page Table (EPT) maintained by the hypervisor. As before, FACE-CHANGE should manipulate each vCPU’s EPT to perform per-vCPU kernel view switching. Extending FACE-CHANGE to support multiple vCPUs per guest VM is part of our future work.

### VI. Related Work

This work was inspired by two broad categories of related research: kernel minimization and sandboxing. In this section, we describe some representative works from each category in detail.

#### A. Kernel Minimization

Early research on kernel minimization was not specifically security-oriented. The primary goal of these works was to reduce the kernel’s in-memory size to adapt to the limited hardware resources of embedded systems. For example, Lee et al. [2] used a call graph approach to eliminate redundant code from the Linux kernel. Chanet et al. [4] applied link-time compaction and specialization techniques to reduce the kernel memory footprint. He et al. [3] reduced the memory footprint by keeping infrequently executed code on disk and loading it on demand.

Recent research has focused on minimizing the OS kernel to reduce the attack surface exposed to applications. Kurmus et al. [1] proposed a kernel reduction approach that automatically generates kernel build configurations based on profiling results of expected workloads. DRIP [18] is an offline approach to purify trojaned kernel drivers via binary rewriting, leveraging a functional test suite to profile a driver and reserve the minimal required set of kernel function invocations.

Compared to previous kernel minimization works, FACE-CHANGE dynamically presents a customized kernel view to each individual application to minimize the kernel’s exposed attack surface. Additionally, our system is more flexible and can adapt to changes in the execution environment and support new applications without rebooting the system.

#### B. Sandboxing

Sandboxing is a general security mechanism that provides a secure execution environment for running untrusted code. One category of sandboxing works constrains the untrusted code’s capabilities via predefined security policies. For example, Janus [19] is a filtering approach to perform system call interposition based on predefined policies. Ostia [20] proposed a delegating architecture to virtualize the system call interface and provide a user-level sandbox to control resource access. Capsicum [21] extends the Unix API to allow an application to perform self-compartmentalization, confining itself in a sandbox that only allows essential capabilities. Seccomp [22] is a sandboxing mechanism implemented in the Linux kernel to constrain the system call interface of processes. SELinux [23] enforces mandatory access-control policies on applications, and AppArmor [24] restricts the capabilities of a program through binding a security profile. TxBox [25] uses system transactions to speculatively execute untrusted applications and recover from harmful effects. Process Firewalls [26] is a kernel-based protection mechanism that avoids resource access attacks by examining the internal state of a process and enforcing invariants on each system call.

Another category of sandboxing approaches enforces access control through recompilation, binary rewriting, and instrumentation. PittSFIeld [27] extends software fault isolation (SFI) to x86, checking unsafe memory writes and constraining jump targets to aligned addresses. Vx32 [29] confines the system calls and data accesses of guest plugins without kernel modification. NaCl [30] leverages SFI to provide a constrained execution environment for the native binary code of browser-based applications. TRuE [31] replaces the standard loader with a security-hardened loader and leverages SFI to run untrusted code. Program shepherding [32] enforces security policies by monitoring control flow transfers during program execution.

In the virtualization/emulation environment, a full system is considered to be confined in a sandbox, with protection provided at the hypervisor level. Secvisor [33] ensures that only approved code can be executed in kernel mode to protect the kernel against code injection attacks. NICKLE [34] enforces that only authorized kernel code can be fetched for execution in kernel space. HookSafe [35] relocates hooks to a page-aligned memory space and regulates accesses to them via page-level protection. HUKO [36] is a hypervisor-based approach to enforce mandatory access control policies on untrusted kernel extensions. Gateway [37] isolates kernel drivers in a different address space from the base kernel and monitors their kernel API invocations.

FACE-CHANGE can also be considered a type of sandboxing approach. Unlike previous works, we sandbox each individual application by constraining its reachability of kernel code. We also enforce our approach at the hypervisor level to be transparent to the guest system.

### V. Discussion

In this section, we discuss the limitations of our current approach and propose potential directions for future work.

#### A. Malicious Attack within the Application-Specific Minimized Kernel Attack Surface

Our approach aims to minimize the kernel attack surface for each specific application. If a malicious attack breaks the boundary of the kernel view generated in the profiling phase, we can detect and report the violations. Compared to system-wide minimization techniques, FACE-CHANGE enforces stricter constraints on kernel code visibility. However, it is still possible that the kernel code used by the malicious attack is within the subset of the application’s kernel view.

### VII. Conclusion

We make a key observation that the kernel code required by applications of different types varies significantly. Thus, generating a single system-wide minimized kernel will enlarge the attack surface for all involved applications. We developed FACE-CHANGE, a virtualization-based system to facilitate dynamic kernel view switching among individual applications executed in a VM. FACE-CHANGE transparently presents a customized kernel view to each application to confine its reachability of kernel code and switch this view upon context switches. In the event that a process breaks its kernel view boundary, FACE-CHANGE is able to recover the missing kernel code and backtrack this anomaly via analysis of the execution history. Our evaluation demonstrates the drastic difference in the size of kernel views of multiple applications, the effectiveness of FACE-CHANGE in revealing the attack patterns of both user and kernel attacks, and the potential of enabling FACE-CHANGE for production VMs.

### Acknowledgment

We would like to thank the anonymous reviewers for their insightful comments. This research has been supported in part by the AFOSR under award FA9550-10-1-0099, DARPA under Contract 12011593, and NSF under award 0855141. Any opinions, findings, and conclusions in this paper are those of the authors only and do not necessarily reflect the views of the sponsors above.