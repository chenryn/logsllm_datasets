告警信息
inotify监控
上报
web 录
文件静态扫描：
收到文件写人
高危函数
修改消息
图8-8webshell检测模块运作流程
文件静态扫描基于黑名单特征字符串，以及几个“高危函数”出现概率的组合，通常
一个业务CGI文件，几乎不可能存在文件读写、命令执行、代码执行、DB操作文件上传几
类函数同时出现的情况。
对于只会使用工具的普通scriptkids来说，静态检测已经够用，但对稍微经验老道些的
攻击者就力不从心了。特别是php webshell，由于php语法变化多端，变形webshell 检测难
度极大。
tiny php shell —ijii webshell : http://h.ackack.net/tiny-php-shell.html
Non alphanumeric webshell 不 含 alpha 字 符的 webshell:http://www.thespanner.co.uk/
2011/09/22/non-alphanumeric-code-in-php/
从代码上看，特征字符串方式的检测真的是绝望了。于是乎也有从统计学角度的检测
方案，同样观察上述代码，不难发现特殊字符的出现比例明显过大，同时根据对自身业务
代码计算信息煸，必定能区别恶意代码。
---
## Page 158
146技术篇
或许上述有些过于学院派，大家未必能有直观的理解。同时根据笔者的实践来看，在
大型互联网企业中，由于各业务部门代码风格多变，特别是汉字在代码中对信息的采集
背定的！
安全圈往往会流传这样的一段话，“三分技术，七分管理”，虽然不能简单苟同，但是
技术结合“管理”手段，确实能带来事半功倍的效果。一个攻击者写入的webshell和业务
CGI文件其实有太多的不同，假设你的企业有严格的发布管理流程、运维治理环境的话，
好坏CGI文件的辨别更是轻而易举。这里列举可使用的维度。
表8-4可用维度
检测点
基于业务特点
正常
异常
文件属主
统一的发布系统
属主为发布系统启动账户
属主为 webserver 进程账户
生成时间
工作时间
工作时间内生成
非工作时间生成
生成时间
同目录文件统一生成
大概率与同目录内其他文件在连续
与同目录其他文件生成时间
时间内生成
相差甚远
inode
同目录文件统一生成
同目录下文件inode连续分布
与同目录其他文件inode相
差甚远
目录
上传目录不保存CGI
CGI文件位于Web用户不可写目录
位于上传文件夹
上面仅列举了常见可利用的业务特点，其实当你分析清楚你业务环节的特点之后，可
以指定出更多的检测维度。
那么到这里，我们的webshell检测流程如图8-9所示。
告警信
inotify监控
息上报
web 目录
异常业务环
收到文件写
境的特征
人修改消息
信息
文件静态扫
比对
捕：高危函数
图8-9webshell检测流程改进
---
## Page 159
第8章入侵感知体系147
2.流量监测
本地静态扫描方法至少需要一部分开发工作量，如果仅有accesslog可以用，或者
能够获取到网络流量的时候，从http请求记录中也可以挖掘可能存在的webshell，以及
webshell攻击行为。
对于一些常见的webshell来说，对于webshell的http请求应该是固定的，包括
“cookie”，post data，功能函数参数等等，如图8-10所示。
×Headers Preview Response Cookies Timing
Cookie: wpsettings-1=hidetb43D1%26editor%3Dtinymce%26n6%3Do%26m5%
9%3Do%26m8%3Do%26imgsize%3Dfu1l1%26m7%3Do%261ibraryContent%30browse
55865892phpspypass=pwd4webshe11]
oowbo2o433344oo*08http%253A%252F%252
Origin: http://
Referer: http:///phpspyphp
Upgrade-Insecure-Requests: 1
User-Agent: Mozilla/5.0 (Macintosh; Intel Mac 0S X 10_11_3) AppleW
hrone/48.o.2564.116 Safari/537.36
 Form Dataview parsed
action=shel l6command=whoami6submit=Execute
[图 8-10webshell 请求特征 (cookie&post data)
这些细节，对于scriptkids来说不会想到甚至没有能力去修改，对于检测常见webshell
非常好用。
那么如果有一定CGI代码开发能力的攻击者呢，从静态代码和http请求特征检测就不
那么好使了。解决这个问题之前，咱们先回顾一下入侵场景。
如图8-11所示，从用户对网站的访问行为以及记录上看和攻击者是有明显区别的，表
8-5逐一列举。
根据上述各维度的对比不难看出黑客对webshellURL访问行为和正常的用户对网站
业务CGI访问的区别非常大。笔者对此类检测方案曾开发了一个webserver日志分析脚本
https://github.com/xti9er/LogForensics/blob/master/LogForensics.pl,利用此日志分析脚本
从大量用户访问中抓取可疑的记录，并根据第一次抓取的特征IP或URL继续跟进，抓出
可能的webshell和攻击请求流量。流量分析挖掘异常攻击请求如下所示：
---
## Page 160
148技术篇
网站用户 A
网站用户B
201.123.214.4
123.87.2.128
.phip
网站用户C
34.12.56.23
B.php
Yeo
Hphp
网站用户H
125.123.56.36
网站用户D
234.127.49.9
网站用户E
32.68.32.8
图8-11正常和异常URL访问行为差异
表8-5观察结果
观察点
业务CGI
webshell
访问来源
多个无关IP来源，日常频繁被访问
日常无人访问过的URL，仅有一个IP（黑客或
肉鸡）或IP段（ADSL用户）访问过仅有的儿次
历史记录
日常时间内频繁被访问
在夜间或极罕见时段出现，无任何网站统一调用
框架代码
User-agent
统一CGI被多种UA和用户类型访问
固定的UA，固定的用户特征
Cookie
有网站统一的用户标示
无网站标示
请求内容
规范的参数
仅有POST 请求，且 post data 被“加密”
搜索引擎记录
有与网站结构相关的链接跳转，经常
无与网站其他页面的跳转链接，未被搜索引擎爬
被搜索引擎爬虫爬取
取索引
---
## Page 161
第8章入侵感知体系149
Pl
1pt23ur13]
mat
logs]cat occess_log.log
sa1/root
ip] 121.34,63.158
014-1017 09:47:38  2014-10-17 09:47:301/yc/cnd,php
2)
2
[2]ur1[3]
],/LogForensics-uebeur httpd =fast f1le sccers_1og=ur1cnd,php
DeD
sd.php
goor
JurlLii3
09:47:40 * 2014-10-17 (9:46:103 /1eft-php
（4
st. _php
1)
/tyt/filen.hp
[2014-10-17 09:44125
ip]121.34.63.158
2
·]Al1Done in 4s.ip[2]url[11]
8.3RASP
随着攻防对抗的升级，防守方发现在已有的日志和数据中，已很难提升分析检测能力。
误报越来越多，事件追溯无足够的细节可用。而反之攻击方则挖掘出越来越多的漏洞，Web
代码越来越多，开发语言的灵活性越来越大，相应的攻击代码也变得‘灵活”而不易检测。
我们需要一种数据和能力实时刻画攻击事件现场，甚至于依据模型直接阻断恶意行为，
于是RASP（RuntimeApplication Self Protect）系统应运imi生。
目前主流的Web开发框架都是基于PHP和Java语言，Web安全的攻防焦点几乎都齐
聚这两种语言环境中，对应的RASP在这两类语言环境中均能大展拳脚
8.3.1PHPRASP
1.技术架构
PHP是解释型语言，将PHP代码解释为opcode 之后再交由Zend引擎执行。图8-12是
---
## Page 162
150技术篇
PHP Zend引擎架构图。
Web服务软件
phpo
数据库
Modules
Zend引擎
浏览器
WEB
FUNCHION MODULESINTERFACE
1
2