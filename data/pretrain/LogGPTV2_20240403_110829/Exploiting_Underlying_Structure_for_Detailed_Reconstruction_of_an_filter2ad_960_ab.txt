# Note that 32-bit integers obviate the need for
# a modulus operation here.
X = X ∗ 214013 + 2531011;
return X; }
srand(get tick count());
for (i=0; i < 20,000; ++i)
srand(seed){ X = seed; }
main(){
1.
2.
3.
4.
5.
6.
7.
8.
9.
10.
11.
dest ip ← rand()[0···15]||rand()[0···15];
dest port ← rand()[0···15];
packetsize ← 768+rand()[0···8];
packetcontents ← top of stack;
sendto();
if(open(physicaldisk, rand()[13···15]))
overwrite block(rand()[0···14]||0x4e20);
goto 1;
else goto 2; }
Figure 2: Pseudocode of the Witty worm
dition to those consumed by each transmitted packet. Ob-
serving such a discontinuity in the sequence of random
numbers in packets from an infectee ﬂags an attempted disk
write and a potential reseeding of the infectee’s PRNG. In
§ 6 we develop a detailed mechanism to detect the value
of the seed at each such reseeding. As the seed at line 1
of Fig. 1 is set to the system time in msec since boot up,
this mechanism allows us to estimate the boot time of in-
dividual infectees just by looking at the sequence of occa-
sional packets received at the telescope. Once we know
the PRNG’s seed, we can precisely determine the random
numbers it generates to synthesize the next 20,000 packets,
and also the three-bit random number it uses next time to
pick a physical disk to open. We can additionally deduce
the success or failure of this open system call by whether
the PRNG state for subsequent packets from the same in-
fectee follow in the same series or not. Thus, this analysis
reveals the number of physical disks on the infectee.
Lastly, knowledge of the seeds also provides access to
the complete list of packets sent by the infectee. This al-
lows us to infer infector-infectee relationships during the
worm’s propagation.
4 Analysis of Witty’s PRNG
The ﬁrst step in our analysis is to examine a disassembly of
the binary code of the Witty worm [9]. Security researchers
typically publish such disassemblies immediately after the
release of a worm in an attempt to understand the worm’s
behavior and devise suitable countermeasures. Figure 2
shows the detailed pseudocode of the Witty worm as de-
rived from one such disassembly [9]. The rand() function
implements the Linear Congruential PRNG as discussed in
§ 2. In the rest of this section, we use the knowledge of the
pseudocode to develop a technique for deducing the state
of the PRNG at an infectee from any single packet sent by
it. We also describe how as a consequence of the speciﬁc
manner in which Witty uses the pseudo-random numbers,
the worm fails to scan the entire IP address space, and also
reveals the identity of Patient Zero.
Breaking the state of the PRNG at the infectee. The
Witty worm constructs “random”destination IP addresses
by concatenating the top 16 bits of two consecutive pseudo
random numbers generated by its PRNG. In our notation,
X[0···15] represents the top 16 bits of the 32 bit number X,
with bit 0 being the most signiﬁcant. The destination port
number is constructed by taking the top 16 bits of the next
(third) random number. The packet size2 itself is chosen
by adding the top 9 bits of a fourth random number to 768.
Thus, each packet sent by the Witty worm contains bits
from four consecutive random numbers, corresponding to
lines 3,4 and 5 in Fig. 2. If all 32 bits of any of these num-
bers were known, it would completely specify the state of
the PRNG. But since only some of the bits from each of
these numbers is known, we need to design a mechanism
to retrieve all 32 bits of one of these numbers from the par-
tial information contained in each packet.
To do so, if the ﬁrst call to rand() returns Xi, then:
dest ip = Xi,[0···15]||Xi+1,[0···15]
dest port = Xi+2,[0···15]
where || is the concatenation operation. Now, we know
that Xi and Xi+1 are related by Eqn 1, and so are Xi+1
and Xi+2. Furthermore, there are only 65,536 (216) possi-
bilities for the lower 16 bits of Xi, and only one of them
is such that when used with Xi,[0···15] (available from the
packet) the next two numbers generated by Eqn 1 have the
same top 16 bits as Xi+1,[0···15] and Xi+2,[0···15], which are
also observed in the received packet. In other words, there
is only one 16-bit number Y that satisﬁes the following two
equations simultaneously:
Xi+1,[0···15] = (Xi,[0···15]||Y ∗ a mod m)[0···15]
Xi+2,[0···15] = ((Xi,[0···15]||Y ∗a mod m)∗a mod m)[0···15]
For each of the 216 possible values of Y , verifying the ﬁrst
equality takes one addition and one multiplication.3 Thus
trying all 216 possibilities is fairly inexpensive. For the
small number of possible values of Y that satisfy the ﬁrst
equation, we try the second equation, and the value Y ∗ that
satisﬁes both the equations gives us the lower sixteen bits of
Xi (i.e., Xi,[16···31] = Y ∗). In our experiments, we found
that on the average about two of the 216 possible values sat-
isfy the ﬁrst equation, but there was always a unique value
of Y ∗ that satisﬁed both the equations.
Why Witty fails to scan the entire address space. The
ﬁrst and somewhat surprising outcome from investigating
how Witty constructs random destination addresses is the
observation that Witty fails to scan the entire IP address
space. This means that, while Witty spread at a very high
354
Internet Measurement Conference 2005 
USENIX Association
speed (infecting 12,000 hosts in 75 minutes), due to a subtle
error in its use of pseudo-random numbers about 10% of
vulnerable hosts were never infected with the worm.
To understand this ﬂaw in full detail, we ﬁrst visit the
motivation for the use of only the top 16 bits of the 32
bit results returned by Witty’s LC PRNG. This was rec-
ommended by Knuth [8], who showed that the high order
bits are “more random” than the lower order bits returned
by the LC PRNG. Indeed, for this very reason, several im-
plementations of the rand() function, including the default
C library of Windows and SunOS, return a 15 bit number,
even though their underlying LC PRNG uses the same pa-
rameters as the Witty worm and produces 32 bit numbers.
However, this advice was taken out of context by the
author of the Witty worm. Knuth’s advice applies when
uniform randomness is the desired property, and is valid
only when a small number of random bits are needed. For
a worm trying to maximize the number of infected hosts,
one reason for using random numbers while selecting des-
tinations is to avoid detection by intrusion detection sys-
tems that readily detect sequential scans. A second reason
is to maintain independence between the portions of the
address-space scanned by individual infectees. Neither of
these reasons actually requires the kind of “good random-
ness”provided by following Knuth’s advice of picking only
the higher order bits.
As discussed in § 2, for speciﬁc values of the parameters
a, b and m, the LC PRNG is a permutation PRNG that gen-
erates a permutation of all integers in the range 0 to m − 1.
By the above deﬁnition, if the Witty worm were to use the
entire 32 bits of a single output of its LC PRNG as a desti-
nation address, it would eventually generate each possible
32-bit number, hence successfully scanning the entire IP
address space. (This would also of course make it trivial
to recover the PRNG state.) However, the worm’s author
chose to use the concatenation of the top 16 bits of two
consecutive random numbers from its PRNG. With this ac-
tion, the guarantee that each possible 32-bit number will
be generated is lost. In other words, there is no certainty
that the set of 32-bit numbers generated in this manner will
include all integers in the set [0, 232 − 1].
We enumerated Witty’s entire “orbit” and found that
there are 431,554,560 32-bit numbers that can never be
generated. This corresponds to 10.05% of the IP address
space that was never scanned by Witty. On further inves-
tigation, we found these unscanned addresses to be fairly
uniformly distributed over the 32-bit address space of IPv4.
Hence, it is reasonable to assume that approximately the
same fraction of the populated IP address space was missed
by Witty.
In other words, even though the portions of
IP address space that are actually used (populated) are
highly clustered, because the addresses that Witty misses
are uniformly distributed over the space of 32-bit integers,
it missed roughly the same fraction of address among the
d
e
t
c
e
f
n
i
%
 100
 90
 80
 70
 60
 50
 40
 30
 20
 10
 0
normal victims
doubly scanned victims
unscanned victims
 0
 500  1000  1500  2000  2500  3000  3500  4000  4500  5000
Time (sec.)
Figure 3: Growth curves for victims whose addresses were
scanned once per orbit, twice per orbit, or not at all.
set of IP addresses in actual use.
Observing that Witty does not visit some addresses at
all, one might ask whether it visits some addresses more
frequently than others. Stated more formally, given that the
period of Witty’s PRNG is 232, it must generate 232 unique
(Xi, Xi+1) pairs, from which it constructs 232 32-bit desti-
nation IP addresses. Since this set of 232 addresses does not
contain the 431,554,560 addresses missed by Witty, it must
contain some repetitions. What is the nature of these rep-
etitions? Interestingly, there are exactly 431,554,560 other
32-bit numbers that occur twice in this set, and no 32-bit
numbers that occur three or more times. This is surprising
because, in general, in lieu of the 431,554,560 missed num-
bers, one would expect some number to be visited twice,
others to be visited thrice and so on. However, the peculiar
structure of the sequence generated by the LC PRNG with
speciﬁc parameter values created the situation that exactly
the same number of other addresses were visited twice and
none were visited more frequently.
During the ﬁrst 75 minutes of the release of the Witty
worm, the CAIDA telescope saw 12,451 unique IP ad-
dresses as infected. Following the above discussion, we
classiﬁed these addresses into three classes. There were
10,638 (85.4%) addresses that were scanned just once in
an orbit, i.e., addresses that experienced a normal scan rate.
Another 1,409 addresses (11.3%) were scanned twice in
an orbit, hence experiencing twice the normal growth rate.
A third class of 404 (3.2%) addresses belonged to the set
of addresses never scanned by the worm. At ﬁrst blush
one might wonder how these latter could possibly appear,
but we can explain their presence as reﬂecting inclusion in
an initial “hit list” (see below), operating in promiscuous
mode, or aliasing due to multi-homing, NAT or DHCP.
Figure 3 compares the growth curves for the three classes
of addresses. Notice how the worm spreads faster among
the population of machines that experience double the nor-
mal scan rate. 1,000 sec from its release, Witty had infected
USENIX Association
Internet Measurement Conference 2005  
355
half of the doubly-scanned addresses that it would infect in
the ﬁrst 75 min. On the other hand, in the normally-scanned
population, it had only managed to infect about a third of
the total victims that it would infect in 75 min. Later in the
hour, the curve for the doubly-scanned addresses is ﬂat-
ter than that for the normally-scanned ones, indicating that
most of the victims in the doubly-scanned population were
already infected at that point.
The curve for infectees whose source address was never
scanned by Witty is particularly interesting. Twelve of the
never-scanned systems appear in the ﬁrst 10 seconds of the
worm’s propagation, very strongly suggesting that they are
part of an initial hit-list. This explains the early jump in
the plot:
it’s not that such machines are overrepresented
in the hit-list, rather they are underrepresented in the total
infected population, making the hit-list propagation more
signiﬁcant for this population.
Another class of never-scanned infectees are those pas-
sively monitoring a network link. Because these operate
in promiscuous mode, their “cross section” for becoming
infected is magniﬁed by the address range routed over the
link. On average, these then will become infected much
more rapidly than normal over even doubly-scanned hosts.
We speculate that these infectees constitute the remainder
of the early rise in the appearance of never-scanned sys-
tems. Later, the growth rate of the never-scanned systems
substantially slows, lagging even the single-scanned ad-
dresses. Likely these remaining systems reﬂect infrequent
aliasing due to multihoming, NAT, or DHCP.
Identifying Patient Zero. Along with “Can all ad-
dresses be reached by scans?”, another question to ask is
“Do all sources indeed travel on the PRNG orbit?” Sur-
prisingly, the answer is No. There is a single Witty source
that consistently fails to follow the orbit. Further inspec-
tion reveals that the source (i) always generates addresses
of the form A.B.A.B rather than A.B.C.D, (ii) does not
randomize the packet size, and (iii) is present near the very
beginning of the trace, but not before the worm itself begins
propagating. That the source fails to follow the orbit clearly
indicates that it is running different code than do all the oth-
ers; that it does not appear prior to the worm’s onset indi-
cates that it is not a background scanner from earlier test-
ing or probing (indeed, it sends valid Witty packets which
could trigger an infection); and that it sends to sources of a
limited form suggests a bug in its structure that went unno-
ticed due to a lack of testing of this particular Witty variant.
We argue that these peculiarities add up to a strong like-
lihood that this unique host reﬂects Patient Zero, the sys-
tem used by the attacker to seed the worm initially. Patient
Zero was not running the complete Witty worm but rather
a (not fully tested) tool used to launch the worm. To our
knowledge, this represents the ﬁrst time that Patient Zero
has been identiﬁed for a major worm outbreak.4 We have
conveyed the host’s IP address (which corresponds to a Eu-
ropean retail ISP) to law enforcement.
If all Patient Zero did was send packets of the form
A.B.A.B as we observed, then the worm would not have
spread, as we detected no infectees with such addresses.
However, as developed both above in discussing Figure 3
and later in § 6, the evidence is compelling that Patient Zero
ﬁrst worked through a “hitlist” of known-vulnerable hosts
before settling into its ineffective scanning pattern.
5 Bandwidth measurements
An important use of network telescopes lies in inferring the
scanning rate of a worm by extrapolating from the observed
packets rates from individual sources. In this section, we
develop a technique based on our analysis of Witty’s PRNG
to estimate the access bandwidth of individual infectees.
We then identify an obvious source of systematic error in
extrapolation based techniques, namely the bottleneck at
the telescope’s inbound link, and suggest a solution to cor-
rect this error.
Estimating Infectee Access Bandwidth. The access
bandwidth of the population of infected machines is an im-
portant variable in the dynamics of the spread of a worm.
Using the ability to deduce the state of the PRNG at an in-
fectee, we can infer this quantity, as follows. The Witty
worm uses the sendto system call, which is a blocking
system call by default in Windows: the call will not return
till the packet has been successfully written to the buffer of
the network interface. Thus, no worm packets are dropped
either in the kernel or in the buffer of the network interface.
But the network interface can clear out its buffer at most
at its transmission speed. Thus, the use of blocking sys-
tem calls indirectly clocks the rate of packet generation of
the Witty worm to match the maximum transmission band-
width of the network interface on the infectee.