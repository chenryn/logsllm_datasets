We now illustrate the optimal attacker strategy with the help
of a benchmark example. We consider a 3-node network as
shown in Figure 3. It consists of 2 generators G1, G2 at bus
1 and 2, respectively, and a load L on bus 3.
The following assumptions enable the computation of opti-
mal attack in closed form. The nominal voltage magnitude is
V nom ‚Äú 230 kV and the upper and lower voltage bounds are
given by V ‚Äú 1.1V nom, V ‚Äú 0.9V nom, respectively. The three
lines are identical, each with impedance z ‚Äú 0.002 ` 0.05j
p1
G1
f12
Œ≤12
u12
u13
u23
Œ≤13
f13
Œ≤23
f23
p2
G2
L
Fig. 3: Three-bus power system.
ud
13
130
130
160
160
ud
23
120
150
150
180
ua
13
100
200
100
200
ua
23
200
100
200
100
f13
100
200
100
200
f23
200
100
200
100
Ucap (in 105$)
80
70
50
40
TABLE I: Optimal attacker strategy for three-bus test case.
in per unit system. Thus, the susceptance of each line is the
inverse of reactance given by Œ≤ ‚Äú 1
0.05. Assume that for the
given instance, the active DLR for each of the three lines is
160 MW. The generation output of the two generators must
satisfy the bounds 0 ƒè p1, p2 ƒè 300 MW. Bus 3 has a constant
power load having demand d ‚Äú 300 MW.
Consider, for simplicity, a linear power Ô¨Çow model (4)-(5),
and the linear cost of generation given by
Cppq ‚Äú b1p1 ` b2p2,
(18)
where we choose b1 ‚Äú 2b2 ‚Äú 2b ƒÖ 0. Simplifying further, we
get, Cppq ‚Äú b1p1 ` b2pd ¬¥ p1q ‚Äú bp1 ` bd.
In the ‚Äúno attack‚Äù case, the optimal generation turns out
to be pp1, p2q ‚Äú p120, 180q. The power Ô¨Çows at this point
are f12 ‚Äú ¬¥20, f13 ‚Äú 140, and f23 ‚Äú 160, respectively. As a
result, the most congested line among all the three lines is line
t2, 3u. This is expected as the G2 has lower cost of production,
so it generates more causing the congestion in line t2, 3u.
Assume for the sake of illustration that only the DLRs of
lines t1, 3u and t2, 3u can be manipulated. The attacker‚Äôs
strategy will be either to maximize the capacity violation
on line t2, 3u (strategy A) or that on line t1, 3u (strategy
B). The attacker‚Äôs optimal strategy is the one which leads
to larger of these two violations. Assuming that the demand
is Ô¨Åxed at 300, under strategy A (resp. strategy B),
the
23 ‚Äú p100, 200q
optimal manipulated DLRs will be ua
(resp. p200, 100q). Table I lists some possible combinations
for the actual DLR values of lines t1, 3u and t2, 3u, and
the corresponding optimal attacker strategies. For example, if
pud
23q ‚Äú p120, 120q, then the optimal attacker strategy is
13, ud
strategy A, i.e. pua
23q ‚Äú p100, 200q, which yields attacker
objective value as Ucap ‚Äú 80.
Now let us use the aforementioned approach to generate
optimal DLR manipulations when the demand and DLRs vary
over time, and OPF calculations account for manipulated line
ratings to generate power Ô¨Çow allocations. For the 3-node
network (Figure 3), consider the demand pattern at node 3
and the representative DLR for two lines t1, 3u and t2, 3u as
13, ua
13, ua
536
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:00:57 UTC from IEEE Xplore.  Restrictions apply. 
(a) Possible DLR and demand pattern over
24 hour horizon.
(b) Time of attack. The actual DLR ratings
ud are shown as lightly dashed lines in the
background for comparison.
Fig. 4: Results for three-node power grid.
(c) Attacker‚Äôs gain and SO‚Äôs cost of generation
as predicted by the bilevel model (14), and as
computed by MATPOWER.
shown in Figure 4a. We instantiate the OPF models at every
15 minutes using this demand pattern. The aggregate demand
curve has two peaks corresponding to the morning and evening
peak periods. We chose the lower and upper bounds for the
DLR values to be 100 and 200 MW. Then we varied DLRs
between these bounds to generate patterns for 24 hour period.
For the sake of illustration, we consider the two DLR curves
to have sinusoidal patterns with certain offset between the
two. The pattern also models the increased capacity due to
favorable conditions (e.g. wind) during certain parts of the
day. For these DLR and demand patterns, we determine how
the attacker strategy and the attacker‚Äôs gain varies over time
with respect to the true DLRs and the demand.
23 can assume the value umax
Figure 4b shows the non-linear power Ô¨Çows along the
DLR lines when the attacker‚Äôs DLR ratings are in effect. We
observe that the non-linear power Ô¨Çows are greater than the
attacker‚Äôs DLR ratings because of the presence of the reactive
power which is not accounted by the linear power Ô¨Çow model
assumed by the attacker in generating the optimal attack.
We also note that if the attacker targets line t2, 3u (strategy
then the optimal attack can reach to maximum DLR
A),
rating, i.e., ua
for certain time
periods. Recall that the bilevel formulation is constrained by
the supply-demand balance in the defender‚Äôs response. This
constraint becomes tight for a range of time-periods during
which the optimal attack ua
13 tracks the power Ô¨Çow f13 on
line t1, 3u. If the true DLRs are such that ud
13, then
the attacker chooses ua
. To ensure that the supply =
23
demand constraint is met ua
23 is just equal to the power Ô¨Çow
required to Ô¨Çow on line t1, 3u. On the other hand if ud
23 ƒÉ ud
13,
then the optimal attacker strategy is to violate the capacity of
line t1, 3u (strategy B).
We evaluated the attacker‚Äôs gain (Ucap) and the defender‚Äôs
cost of generation both estimated by the bilevel formula-
tion (14) and by the nonlinear computations using MAT-
POWER (see Figure 4c). The respective curves closely follow
each other. The actual cost of generation under nonlinear
power Ô¨Çows is slightly larger than the cost of generation
estimated under linear power Ô¨Çows. The same is also true
for the attacker‚Äôs gain Ucap. Comparing the demand and DLR
variations in Figure 4a and the objective functions in Figure 4c,
23
23 ‚Äú umax
23 ƒÖ ud
we can see that the optimal attacker gain is not achieved when
the network experiences heavy demand. Rather, the optimal
gain is achieved when the network is heavily congested, i.e.,
relative to the network‚Äôs capacity, the aggregate demand is
high. This gives an important insight into the optimal time for
the attack. For e.g., during the hot summers and low windy
conditions, the lines have lower capacities than during the
winters. Also, the high temperatures lead to more aggregate
demand during the summers. Hence, the attacker is better off
manipulating the DLRs in high temperature conditions.
B. Scalability of attack
To demonstrate the scalability of our approach, we imple-
mented Algorithm 1 on an 118-node network. We choose the
DLR and demand patterns for the 118-node network similar
to the ones in 3-node network, but in contrast to the linear
generation cost (18), we adopt
the more realistic convex
quadratic cost function (3). In this paper, we have used Gurobi
which is a state-of-the-art optimization toolbox and has built-
in support for solving MILP problems. Figures 5a and 5b
show the corresponding computational results for an 118 node
network. Due to the fact that actual power Ô¨Çows also consist
of reactive power Ô¨Çows in addition to real power Ô¨Çows, there
are higher line losses, resulting in more total power generation
that increases the cost of generation. However, we see that the
actual attacker‚Äôs gain is lower than the estimate obtained by
solving (14) (Figure 4c). This can be explained as follows.
The generators have different quadratic curves for the cost
of generation. As a result for lower network load, one set of
generators may be more contributing to the generation, but
for higher loads, other set of generators may be the more
contributing ones. This results in lower power Ô¨Çows along
the DLR lines during high demand conditions. Hence, in the
case of low aggregate demand, the DLR lines are violated
to a larger extent than in the case of high demand. Another
important observation is that the attacker‚Äôs gain can be high
even if the demand is low, because the actual DLRs may be
even lower.
In the next section, we describe how an attacker can
implement
the optimal attack as computed by the bilevel
formulation (14), as a cyberattack targeting the EMS soft-
537
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:00:57 UTC from IEEE Xplore.  Restrictions apply. 
(a) Time of attack for 118-node power network.
(b) Loss functions for 118-node network.
Fig. 5: Results for 118-node network

 

	
!
#	
#
&
		'
		


#
	



#


	
	

"	
"	
		%
	

#
	

	

 		

 
		




"
	



#
 
	
#

"
		


	



		#






"	


			

	













	#



	
"
Fig. 6: Flowchart for attack implementation.
wares. SpeciÔ¨Åcally, we will show how an EMS software (e.g.,
PowerWorld3) be targeted such that the values of the DLRs
in the memory of the software will change during run-time.
This will cause the ED implementation in the EMS to yield a
false ED solution.
V. IMPLEMENTATIONS
We implemented our proposed attack in real controller
software packages. Figure 6 shows the stages of the imple-
mented attack. Initially, we assume a controller executable Ô¨Åle
(vulnerable point) and sensitive data sources (e.g., inputs such
as DLRs originating from an external source) are given. Next,
through memory taint analysis, we narrow down our search
space to identify the the memory regions where the sensitive
parameters may reside in memory during the controller exe-
cution. Accordingly, all the memory regions affected by the
target input are marked (tainted). The tainted areas are then
searched for the values of interest (e.g., target DLRs), and
candidates are shortlisted. To identify the correct candidate
from the set of candidates, we generate structural memory
pattern signatures around the correct candidates during the
ofÔ¨Çine binary analysis phase. We use our past work [26] to
extract binary-level data type and code, and data pointers and
their interdependencies (discussed below). Given the reverse
engineered logical memory layout, we create structural pat-
3We have taken the necessary responsible disclosure steps and have
informed the vendors about our research Ô¨Åndings. It is noteworthy that we are
not reporting a security software vulnerability in this paper. Instead, assuming
there is a potential exploit, we demonstrate how the adversaries can perform
domain-speciÔ¨Åc data corruption in memory to impact the produced control
actuation commands. The steps are not speciÔ¨Åc to any commercial software
package.
terns of the memory regarding where the target parameters
reside. Those patterns are then used to generate the exploit
binary. During the attack phase the exploit searches the dy-
namic memory address space to locate the target parameters
using the patterns. Finally, it changes the identiÔ¨Åed parameter
values to the optimal attack values, as discussed in Section III.
Every control algorithm implementation by controller soft-
ware executables involve code and data. The code instructions
encode the algorithm logic (e.g., iterative optimization loops),
whereas the data stores the controller parameters such as the
OPF constraints and DLRs. ModiÔ¨Åcation of the code instruc-
tions are often infeasible due to W ‚Äò X protections. However,
the data regions should be (and are set as) writable, because
the EMS operators often update their values dynamically
according to the most recent power system conÔ¨Åguration.
Maintenance of control-sensitive variable values such as
DLRs by the controller software provides an attack surface
to modify them in memory space during the attack. Our
investigations of EMS software binaries showed heavy use of
data structures and class objects to store those values that are
used directly by OPF. During the ofÔ¨Çine phase, we analyzed
the EMS software binary to determine its memory‚Äôs structural
layout. We are interested in structural information such as
the allocated class instances (objects), the class hierarchy, and
the logical interdependencies between the instantiated objects
within the memory, e.g., cross-object code and data pointers.
We are not