polynomials in the security parameter. This implies that:
n · m · X · Y ≪ p.
Our generic single-to-multi input construction is described in Figure 4.1. We present a self-
contained description of the scheme in Figure 4.6.
Selectively-secure, multi-input scheme from single-input scheme
Main construction. We present in Figure 4.1 a private key multi-input FE, MIFE, for
the bounded-norm inner products over Z, starting from any one-SEL-SIM secure, single-input
inner products FE, FE, that additionally satisﬁes the following requirements.
Additional requirements. The construction and the analysis requires that FE := (GSetup′,
Setup′, Enc′, KeyGen′, Dec′) satisﬁes the following structural properties:
• The scheme can be instantiated over G1, where the ciphertext is a vector [c]1 over G1
and the secret key is a vector di over Zp.
• Enc′ is linearly homomorphic. More speciﬁcally, we only that, given gpk′, Enc′(gpk′, ek′, x),
and x′, we can generate a fresh random encryption of x + x′, i.e. Enc′(gpk′, ek′, x + x′).
This property is used in the proof of Lemma 31 and Lemma 32.
4.1 Selectively-Secure, Private-Key MIFE for Inner Products
81
• For correctness, Dec′ should be linear in its input d and [c]1, so that Dec′(gpk′, [d]2, [c]1) =
[Dec′(gpk′, d, c)]T ∈ GT can be computed using a pairing.
of the output as long as the output is in the exponent.
• For an eﬃcient MIFE decryption, Dec′ must work without any restriction on the norm
• Let ( ^GSetup,^Setup,gEnc, ^KeyGen) be the simulator for the one-SEL-SIM security of FE.
We require that ^KeyGen(gmsk,·,·) is linear in its inputs (y, a), so that we can compute
^KeyGen(gmsk, [y]2, [a]2) = [ ^KeyGen(gmsk, y, a)]2. This property is used in the proof of
Lemma 29.
n
):
Setup(1λ, F m,X,Y
gpk′ ← GSetup′(1λ, F m+k,X,Y
For all i ∈ [n]: (cid:0)ek′
i, msk′
pk := gpk′, msk := {msk′
Return (pk, msk, (eki)i∈[n])
IP
i(cid:1) ← Setup′(1λ, gpk′, F m+k,X,Y
i, zi}i∈[n]
IP
), where gpk′ contains PG := (G1, G2, p, P1, P2, e) ← PGGen(1λ)
), zi ←R Zk
p, eki := (ek′
i, zi)
Enc(pk, eki, xi):
Return Enc′(gpk′, ek′
p, z := hz1 + ··· + zn, ri
i, xikzi)
KeyGen(pk, msk, y1k···kyn):
r ←R Zk
For all i ∈ [n]: di ← KeyGen′(gpk′, msk′
i, yikr)
dky1k···kyn :=(cid:0)(y1k···kyn),{[di]2}i∈[n], [r]2, [z]T(cid:1)
Return dky1k···kyn
Dec(cid:0)pk, dky1k···kyn, ct1, . . . , ctn):
Parse dky1k···kyn =(cid:0)(y1k···kyn),{[di]2}i∈[n], [r]2, [z]T(cid:1)
For all i ∈ [n]: [ai]T ← Dec′(gpk′, [di]2, cti)
Return the discrete log of (Pn
i=1[ai]T ) − [z]T
Figure 4.1: Multi-input functional encryption scheme MIFE for the bounded norm inner-product
over Z. FE := (GSetup′, Setup′, Enc′, KeyGen′, Dec′) refers to a single-input inner-product FE.
Correctness. By correctness of FE, we have for all i ∈ [n]: [ai]T = [hxikzi, yikri]T . Thus,
decryption computes:
nXi=1hxikzi, yikri) − hz1 + ··· + zn, ri#T
"(
= [hx1k···kxn, y1k···kyni]T
We knowPihxi, yii ≤ n·m·X·Y , which is bounded by a polynomial in the security parameter.
Thus, decryption can eﬃciently recover the discrete log: Pihxi, yii mod p =Pihxi, yii, where
the equality holds sincePihxi, yii ≤ n · m · X · Y ≪ p.
Remark 8: Optimization
A more eﬃcient version of our scheme would be to take zi ←R Zk
This way, we don’t have to include the value [z]T in the secret keys, since it would
cancel out. We choose to present the ineﬃcient version which includes the value [z]T for
simplicity.
p subject to Pi zi = 0.
82
Chapter 4. Multi-Input Inner-Product Functional Encryption from Pairings
Remark 9: Notations
We use subscripts and superscripts for indexing over multiple copies, and never for in-
dexing over positions or exponentiation. Concretely, the j’th ciphertext query in slot i is
xj
i .
Security. First, we prove the one-SEL-IND-static security of MIFE, in Theorem 9, that
is, in English: the scheme is secure for only one challenge ciphertext per input slot, in the
selective setting, for static corruptions (see Deﬁnition 23). Then, in Theorem 10, we show how
to upgrade the security of the MIFE to many-SEL-IND-static, that is, for many challenge
ciphertexts.
Theorem 9: one-SEL-IND-static security of MIFE
Suppose FE is one-SEL-SIM secure for n instances, and that the Uk(p)-MDDH assumption
holds in G2. Then, MIFE is one-SEL-IND-static secure.
Recall that the Uk(p)-MDDH assumption is the weakest of all Dk(p)-MDDH assumptions,
for any matrix distribution Dk(p), according to Lemma 3. In particular, it is implied by the
well-known k-Lin assumption.
game
cti:
{di}i∈[n] in sky:
z in sky:
justiﬁcation/remark
G0,β Enc′(gpk′, ek′
i, xβ
i kzi)
KeyGen′(gpk′, msk′
i, yikr)
z = hz1 + . . . + zn, ri
G1,β
G2,β
fEnc(fmski) ^KeyGen(fmski, yikr, hxβ
fEnc(fmski) ^KeyGen(fmski, yikr, hxβ
i kzi, yikri)
z = hz1 + . . . + zn, ri
i , yii + ezi ) z =Pi∈CS hzi, ri +Pi∈HSezi
one-SEL-IND-static
security game
one-SEL-SIM
security of FE
Dk-MDDH
Figure 4.2: Sequence of games for the proof of Theorem 9. Here, for any slot i ∈ [n], cti refers to the
challenge ciphertext computed by oracle OEnc(i, (x0
i )), di and z refers to the vectors computed by
the oracle OKeygen(y1k···kyn) as part of dky1k···kyn, and ( ^GSetup,^Setup,gEnc, ^KeyGen) is the simulator
for the one-SEL-SIM security of FE.
i , x1
Proof of Theorem 9. Using Theorem 2, it is suﬃcient to prove one-SEL-IND-zero-static (i.e.
the scheme is secure when no decryption keys are queried), and one-SEL-IND-weak-static
i.e. we assume the adversary requests a challenge ciphertext for all slots i ∈ HS, where
HS := [n] \ CS denotes the set of slots that are not corrupted) to obtain one-SEL-IND-static
security.
The one-SEL-IND-zero-static security of MIFE follows directly from the one-SEL-IND
In what follows, we prove
security of FE (which is implied by its one-SEL-SIM security).
one-SEL-IND-weak-static security of MIFE.
We proceed via a series of games Gi,β for i ∈ {0, . . . , 2}, β ∈ {0, 1}, described in Figure 4.3.
The transitions are summarized in Figure 4.2. Let A be a PPT adversary. For any game G,
we denote by AdvG(A) the probability that the game G outputs 1 when interacting with A.
Note that the set of input slots for which a challenge ciphertext is queried, denoted by I in
Figure 4.3, is such that HS ⊆ I, since we want to prove one-SEL-IND-weak security.
Games G0,β, for β ∈ {0, 1}: are such that Advone-SEL-IND-weak-static
AdvG0,1(A)|, according to Deﬁnition 21.
(λ) = |AdvG0,0(A) −
MIFE,A
4.1 Selectively-Secure, Private-Key MIFE for Inner Products
83
)
For all
:= gpk′.
p, eki := (ek′
i ∈ [n]:
(ek′
i, zi). For all i ∈ I: cti := Enc′(gpk′, ek′
:= ggpk.
(cid:16)eeki,gmski(cid:17) ←
p, eki := (eeki, zi). For all i ∈ CS∩I: cti := Enc′(ggpk,eeki, xβ
i) ←
i kzi).
i ∈ [n]:
i, msk′
i, xβ
i kzi).
For all
p, ∀i ∈ HS :ezi ←R Zp , z := hz1 + ··· + zn, ri, z :=Pi∈CShzi, ri +Pi∈HSezi
i, yikr(cid:1), di ← KeyGen′(cid:16)ggpk,gmski, yikr(cid:17)
n
IP
IP
IP
IP
), pk
), pk
), zi ←R Zk
Games G0,β, G1,β, G2,β , for β ∈ {0, 1}:
i}i∈I⊆[n],b∈{0,1},CS ⊆ [n](cid:1) ← A(1λ, F m,X,Y
(cid:0){xb
gpk′ ← GSetup′(1λ, F m+k,X,Y
Setup′(1λ, gpk′, F m+k,X,Y
(ggpk, td) ← ^GSetup(1λ, F m+k,X,Y
^Setup(1λ,ggpk, F m+k,X,Y
), zi ←R Zk
For all i ∈ HS: cti :=gEnc(td,gmski).
α ← AOKeygen(·) (pk, (cti)i∈I , (eki)i∈CS)
Return α.
OKeygen(y1k···kyn):
r ←R Zk
∀i ∈ [n]: di ← KeyGen′(cid:0)gpk′, msk′
∀i ∈ HS: di ← ^KeyGen(cid:16)td,gmski, yikr,hxβ
∀i ∈ HS : di ← ^KeyGen(cid:16)td,gmski, yikr,hxβ
dky1k···kyn :=(cid:0){[di]2}i∈[n], [r]2, [z]T(cid:1)
Return dky1k···kyn
i kzi, yikri(cid:17)
i , yii +ezi(cid:17)
Figure 4.3: Games for the proof of Theorem 9.
In each procedure, the components inside a solid
(dotted) frame are only present in the games marked by a solid (dotted) frame. Here, CS denotes the
set of corrupted slots, HS := [n] \ CS denotes the set of honest slots, and I ⊆ [n] denotes the set of
input slots for which there is a challenge ciphertext. We have HS ⊆ I.
84
Chapter 4. Multi-Input Inner-Product Functional Encryption from Pairings
Games G1,β, for β ∈ {0, 1}: we replace (GSetup′, Setup′, KeyGen′, Enc′) by the simulator
( ^GSetup,^Setup, ^KeyGen,gEnc), using the one-SEL-SIM security of FE for h instances, where h
denotes the size of HS, where HS is the set of honest input slots, that is, HS := [n] \ CS. We
prove in Lemma 28 that there exists a PPT adversary B1 such that
|AdvG0,β (A) − AdvG1,β (A)| ≤ Advone-SEL-SIM
FE,B1,h
(λ).
Games G2,β, for β ∈ {0, 1}: we replace the values hzi, ri used by the oracle OKeygen to
ezi ←R Zp, for all slots i ∈ HS, using the Uk(p)-MDDH assumption in G2. Namely, we prove
in Lemma 29 that there exists a PPT adversary B2 such that:
|AdvG1,β (A) − AdvG2,β (A)| ≤ AdvUk(p)-mddh
(λ) +
G2,B2
.
Finally, in Lemma 30, we prove that G2,0 and G2,1 are perfectly indistinguishable, using a
statistical argument that crucially relies on the fact that we are in the selective security set-
ting, and using the restrictions on the queries to OKeygen and the challenge {xb
i}i∈I⊆[n],b∈{0,1}
imposed by the security game. We have:
1
p − 1
Putting everything together, we obtain:
AdvG2,0(A) = AdvG2,1(A).
Advone-SEL-IND-weak-static
MIFE,A
(λ) ≤ 2 · Advone-SEL-SIM
FE,B0,h
(λ) + 2 · AdvUk-mddh
G2,B2
(λ) +
where h ≤ n is the number of honest input slots.
Lemma 28: Game G0,β to G1,β
2
p − 1
,
There exists a PPT adversary B1,β such that
AdvG0,β (A) − AdvG1,β (A) ≤ Advone-SEL-SIM
FE,B1,β ,h
(λ),
where h denotes the size of HS, where HS is the set of honest input slots, that is,
HS := [n] \ CS.
Proof of Lemma 28. In the game G1,β, we replace (GSetup′, Setup′, Enc′, KeyGen′) by the simu-
lator ( ^GSetup,^Setup,gEnc, ^KeyGen), whose existence is ensured by the one-SEL-SIM security of
FE (see Deﬁnition 20). A complete description of games G0,β and G1,β is given in Figure 4.3.
The adversary B0,β proceeds as follows.
-Simulation of (pk,{cti}i∈I ,{eki}i∈CS):
Upon receiving the challenge {xb
i}i∈I,b∈{0,1}, and the set of corrupted user CS ⊆ [n] from A,
p for all i ∈ [n], and sends {(xβ
adversary B0,β samples zi ←R Zk
i kzi)}i∈HS to the experiment it
is interacting with, upon which it receives the global public key gpk and ciphertexts {cti}i∈HS.
The global public key gpk is either of the form gpk = gpk′ with gpk′ ← GSetup′(1λ, F m,X,Y
) if
B0,β is interacting with the experiment REALFE(1λ,B0,β,ℓ), and gpk = ggpk with (ggpk, td) ←
^GSetup(1λ, F m,X,Y
) if B0,β is interacting with the experiment IDEALFE(1λ,B0,β,ℓ) (see Deﬁ-
nition 20 for a description of these experiments, with the one-SEL restriction). The ciphertexts
i kzi) or gEnc(td,feki, gmski), depending on which experi-
are of the form cti := Enc′(gpk′, ek′
ment B0,β is interacting with.
). For all CS ∩ I, it
computes cti := Enc′(gpk, eki, xβ
i kzi). It sets pk := gpk, and returns (pk,{cti}i∈I ,{eki}i∈CS) to
A.
For all i ∈ CS, B0,β samples (eki, mski) ← Setup′(1λ, gpk, F m,X,Y
i, xβ
IP
IP
IP
4.1 Selectively-Secure, Private-Key MIFE for Inner Products
85
-Simulation of OKeygen(y1k . . .kyn):
For any query (y1k . . .kyn), B0,β,ℓ picks r ←R Zk
p. Then, for all i ∈ CS, it computes di ←
KeyGen′(gpk, mski, yikr). It can do so since it knows gpk and mski for all i ∈ CS. For all i ∈ HS,
B0,β queries its own decryption key oracle on yikr, to obtain di := KeyGen′(gpk′, msk′
i, yikr) if
it is interacting with the real experiment, or di := ^KeyGen(td, gmski, yikr,hxβ
i kzi, yikri) if it is
interacting with the ideal experiment.
Then, it computes z := hz1 + ··· + zn, ri and returns dky1k···kyn :=(cid:16){[di]2}i∈[n], [r]2, [z]T(cid:17)
to A.
Finally, B0,β forwards A’s output α to its own experiment. It is clear that when B0,β inter-
acts with the experiment REALFE(1λ,B0,β), it simulates the game G0,β, whereas it simulates
the game G,β when it interacts with IDEALFE(1λ,B0,β). Therefore,
Advone-SEL-SIM
FE,B0,β
(λ)
=(cid:12)(cid:12)(cid:12)PrhREALFE(1λ,B0,β) = 1i − PrhIDEALFE(1λ,B0,β) = 1i(cid:12)(cid:12)(cid:12)
= |AdvG0,β (A) − AdvG1,β (A)|
Lemma 29: Game G1,β to G2,β
There exists a PPT adversary B2,β such that:
AdvG1,β (A) − AdvG2,β (A) ≤ AdvUk-mddh
G2,B2,β