是否使用.def
是否拥有存根
是否拥有存根
是否拥有描述
是否拥有存根
是否拥有描述
Borland
是
是
是
是
是
是
微软
否
否
否
是
是
是
GNU
否
否
否
否
是
是
只有拥有有效描述的处理器才会出现在“文件加载”对话框中。换言之，如果没有有效的描述字段，你将不可能选择处理器模块。
与构建加载器模块相比，构建处理器模块过程中的所有这些差异需要我们对表 17-1 中的生成文件进行更多的修改。一个经过修改的用于构建示例Python 处理器的生成文件如代码清单 19-1所示。
代码清单 19-1 构建 Python 处理器模块的生成文件
     #Set this variable to point to your SDK directory
     IDA_SDK=../../
     PLATFORM=$(shell uname | cut -f 1 -d _)
     ifneq "$(PLATFORM)" "MINGW32"
     IDA=$(HOME)/ida
     endif
     #Set this variable to the desired name of your compiled processor
     PROC=python
     #Specify a description string for your processor, this is required
     #The syntax is :
➊    DESCRIPTION=Python Bytecode:python
     ifeq "$(PLATFORM)" "MINGW32"
     PLATFORM_CFLAGS=-D__NT__ -D__IDP__ -DWIN32 -Os -fno-rtti
     PLATFORM_LDFLAGS=-shared -s
     LIBDIR=$(shell find ../../ -type d | grep -E "(lib|lib/)gcc.w32")
     ifeq ($(strip $(LIBDIR)),)
     LIBDIR=../../lib/x86_win_gcc_32
     endif
     IDALIB=$(LIBDIR)/ida.a
     PROC_EXT=.w32
     else ifeq "$(PLATFORM)" "Linux"
     PLATFORM_CFLAGS=-D__LINUX__
     PLATFORM_LDFLAGS=-shared -s
     IDALIB=-lida
     IDADIR=-L$(IDA)
     PROC_EXT=.ilx
     else ifeq "$(PLATFORM)" "Darwin"
     PLATFORM_CFLAGS=-D__MAC__
     PLATFORM_LDFLAGS=-dynamiclib
     IDALIB=-lida
     IDADIR=-L$(IDA)/idaq.app/Contents/MacOs
     PROC_EXT=.imc
     endif
     #Platform specific compiler flags
     CFLAGS=-Wextra $(PLATFORM_CFLAGS)
     #Platform specific ld flags
     LDFLAGS=$(PLATFORM_LDFLAGS) 
     #specify any additional libraries that you may need
     EXTRALIBS=
     # Destination directory for compiled plugins
     OUTDIR=$(IDA_SDK)bin/procs/
     # Postprocessing tool to add processor comment
➋   MKIDP=$(IDA_SDK)bin/fix_proc
     #MKIDP=$(IDA)bin/mkidp
     #list out the object files in your project here
     OBJS=ana.o emu.o ins.o out.o reg.o
     BINARY=$(OUTDIR)$(PROC)$(PROC_EXT)
     all: $(OUTDIR) $(BINARY)
     clean:
         -@rm *.o
         -@rm $(BINARY)
     $(OUTDIR):
         -@mkdir -p $(OUTDIR)
     CC=g++
     INC=-I$(IDA_SDK)include/
     %.o: %.cpp
         $(CC) -c $(CFLAGS) $(INC) $< -o $@
     LD=g++
     ifeq "$(PLATFORM)" "MINGW32"
     #Windows processor's require post processing
     $(BINARY): $(OBJS)
         $(LD) $(LDFLAGS) -o $@ $(OBJS) $(IDALIB) $(EXTRALIBS)
➌       $(MKIDP) $(BINARY) "$(DESCRIPTION)"
     else
     $(BINARY): $(OBJS)
         $(LD) $(LDFLAGS) -o $@ $(OBJS) $(IDALIB) $(EXTRALIBS)
     endif
     #change python below to the name of your processor, make sure to add any
     #additional files that your processor is dependent on
     python.o: python.cpp
     ana.o: ana.cpp
     emu.o: emu.cpp
     ins.o: ins.cpp
     out.o: out.cpp
     reg.o: reg.cpp
除了后缀以及处理器的默认文件位置这些细微的差别外，主要差异包括描述字符串的定义（➊ ）、插入描述字符串的实用工具（➋）的规范以及增加的一个在 Windows 处理器模块中插入描述字符串（➌）的构建步骤。
19.5 定制现有的处理器
可能你正考虑开发处理器模块，但你会注意到，现有的处理器模块几乎能够执行你所需的任何操作。如果你拥有处理器模块的源代码，可以轻松地对其进行修改，以满足自己的需要。另一方面，如果你没有源代码，那么你可能不太幸运。幸好 IDA 提供了一种通过插件定制现有处理器的机制。通过“钩住”处理器通知，插件模块可以拦截对现有处理器的分析器、模拟器和输出器阶段的一次或多次调用。定制一个处理器的潜在应用包括以下几项。
扩展现有处理器的功能，使其能够识别其他指令。
更正现有处理器模块中受到破坏的功能（虽然告诉 Ilfak 你发现了一个缺陷，它会更快得到修复）。
定制现有处理器模块的输出，使其满足你的特殊要求。
下面的通知代码在 processor_t
 中声明，在idp.hpp 中讨论，想要拦截对处理器各个阶段的调用的插件可能会“钩住”这些代码。
custom_ana
 ：作用与u_ana
 相同，但任何新指令必须使用一个等于或大于0x8000 的cmd.itype
 值。
custom_emu
 ：模拟自定义指令类型。如果希望调用处理器现有的模拟器，可以调用(*ph.u_emu)()
custom_out
 ：为自定义指令提供输出，或为现有指令提供自定义输出。如果希望调用处理器的out
 函数，可以调用(*ph.u_out)()
 。
custom_outop
 ：输出一个自定义操作数。如果你希望调用处理器现有的 outop 函数，可以调用(*ph.u_outop)(op)
 。
custom_mnem
 ：为一个自定义指令生成助记符。
下面的代码摘自一个插件，该插件修改 x86 处理器模块的输出，用一个 cya
 指令替换leave
 指令，并交换包含两个操作数的指令中操作数的显示顺序（类似于 AT & T 语法）：
     int idaapi init(void) {  
➊      if (ph.id != PLFM_386) return PLUGIN_SKIP;  
➋      hook_to_notification_point(HT_IDP, hook, NULL);  
        return PLUGIN_KEEP;  
     }  
     int idaapi hook(void *user_data, int notification_code, va_list va) {  
        switch (notification_code) {  
           case processor_t::custom_out: {  