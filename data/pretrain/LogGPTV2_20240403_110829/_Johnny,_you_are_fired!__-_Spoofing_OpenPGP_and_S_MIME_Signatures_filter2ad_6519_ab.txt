--XXX
Content-Type: text/plain
Hello, World! This text is signed.
--XXX
Content-Type: application/pkcs7-signature;
Content-Transfer-Encoding: base64
--XXX--
1
2
3
4
5
6
7
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
(b) A message with a detached signature. The message is in the
ﬁrst MIME part and directly readable by a human. Legacy software
tended to damage line endings or encoding in such emails, which
broke the signature veriﬁcation.
Figure 2: Opaque and detached signatures as used in S/MIME.
Attack Reﬁnement. Although the eContent is not shown in
the email client, it is easily revealed under forensic analysis
that an old email was reused for this attack. Interestingly, the
attack can be reﬁned to remove the original content entirely
without affecting the outcome of the signature veriﬁcation.
Similarly to opaque and detached signatures, where an ab-
sent eContent signals that the content is provided some-
where else, CMS supports so called “signed attributes”,
whose absence or presence signals what was signed.
If a
signedAttrs ﬁeld is present, the signature covers the exact
byte sequence of the signedAttrs ﬁeld and not the content
per se. If naively implemented, this would of course leave the
content unauthenticated. Therefore, the signedAttrs ﬁeld
must contain a hash of the content [7]. If the signedAttrs
ﬁeld is absent, the signature covers the eContent directly.
This indirect signing allows the replacement of the
original content with the exact byte sequence of
the
signedAttrs ﬁeld without affecting the signature veriﬁ-
cation outcome. An email modiﬁed in this way will ap-
pear “empty” or contain seemingly “garbage” (because the
signedAttrs is interpreted as ASCII). In either case, this
can be used to hide where the old signature originated from.
We consider this a noteworthy curiosity.
Multiple Signers (C2) S/MIME and CMS allow multiple
signers in parallel to sign the same content [7]. Obviously,
the outcome of the veriﬁcation may differ for each signer
1014    28th USENIX Security Symposium
USENIX Association
1
2
3
4
5
1
2
3
4
5
6
7
8
and the user interface should make that clear. However, it
is reasonable to show a simpliﬁed version. We consider it a
forgery if an invalid signature is marked as “valid” due to the
presence of an unrelated valid signature.
No Signers (C3) A CMS signature object may contain zero
or more signers. Although RFC 5652 gives limited advice
regarding zero signers, it does not state explicitly what to do
with “signed messages” without a signer.
Trust Issues (C4)
In contrast to OpenPGP, S/MIME is built
upon trust hierarchies. Certiﬁcates are authentic as long as
they can be traced back to a valid root certiﬁcate. In practice,
this means that most S/MIME certiﬁcates (in the Internet
PKI) are indirectly trusted. However, clients must check the
validity of the certiﬁcate chain. We consider it a forgery if a
client accepts invalid certiﬁcates, such as self-signed certiﬁ-
cates or otherwise untrusted or non-conforming certiﬁcates.
4.2 GPG API Attack Class
GnuPG, a stand-alone OpenPGP implementation, provides
a stateful text-based command-line interface with approxi-
mately 380 options and commands. The complexity of the
API and the need for consumers to parse GnuPG’s string
messages provides a rich attack surface.
GnuPG Status Lines GnuPG provides a machine-
readable interface by emitting status lines in a simple text-
based format (see Figure 3), via the --status-fd option.
Each status line starts with [GNUPG:] and one of approxi-
mately 100 possible keywords (such as GOODSIG), followed
by additional text speciﬁc to the keyword.
Although some documentation exists, it does not cover all
possible sequences of status lines and their signiﬁcance for
any given operation. In fact, due to streaming processing,
the complexity of the API reﬂects the overall complexity of
the OpenPGP message format.
In particular, we note the
following risk factors:
• The API contains text under the attacker’s control (e.g.,
the  in GOODSIG), which must be escaped to
prevent injection attacks.
• The number and order of status lines depend on the
OpenPGP packet sequence, which is under the at-
tacker’s control. Applications must handle all combi-
nations correctly that are allowed by GnuPG.
• The API is stateful, i.e., the semantics of a status line
can depend on its position in the sequence. For ex-
ample, the validity indicated by a TRUST_* line applies
only to the signature started by the previous NEWSIG.
$ gpg --status-fd 2 --verify
[GNUPG:] NEWSIG
[GNUPG:] GOODSIG 88B08D5A57B62140 
[GNUPG:] VALIDSIG 3CB0E84416AD52F7E186541888B08D5A57B62140
2018-07-05 1530779689 0 4 0 1 8 00 3
CB0E84416AD52F7E186541888B08D5A57B62140
[GNUPG:] TRUST_FULLY 0 classic
(a) Example output for a single trusted signature (excerpt).
NEWSIG []
GOODSIG  
BADSIG  
VALIDSIG          []
TRUST_NEVER 
TRUST_FULLY [0 []]
PLAINTEXT   
PLAINTEXT_LENGTH 
(b) Important status lines for signature veriﬁcation from GnuPG.
Figure 3: Status lines output by GnuPG as a side-effect of streaming
message processing.
• The use of the API requires a good understanding of
OpenPGP and trust models as implemented in GnuPG.
The GOODSIG, VALIDSIG and TRUST_* lines have very
speciﬁc technical meaning that is not always apparent
from the inconsistent terminology in the interface.
• By default, GnuPG runs in the context of the user’s
home directory, using their conﬁguration ﬁles and
keyrings, which can inﬂuence the output of GnuPG
within, and outside of, the status line API.
We focus our work on injection attacks and applications
parsing the interface. First, we review the source code of
GnuPG to identify places where an attacker could inject un-
trusted data at trusted positions in the API. Then we review
all open source mail clients to identify exploitable mistakes
in the API parser.
In-band Injection Attacks (G1) There are various places
in the GnuPG status line API that contain untrusted data un-
der the attacker’s control. For example, the  in a
GOODSIG status line is an arbitrary string from the public key
that can be crafted by an attacker. A naive idea is to append a
newline character followed by a spoofed status line into the
user ID of a public key. Normally, GnuPG protects against
this naive attack by properly escaping special characters.
In addition to the status line API, we also review the log-
ging messages for injection attacks. This is due to a common
pattern, where applications using GnuPG conﬂate the status
API and the logging messages by specifying the same data
channel stdout for both (using the command line option
--status-fd 2). Best practice requires separate channels
to be used, but technical limitations can make this difﬁcult
for some plugins and cross-platform applications.
USENIX Association
28th USENIX Security Symposium    1015
wrapped within the MIME tree of a multipart message. For
this class of attacks, the attacker is already in possession of at
least one message and a corresponding valid signature from
the entity to be impersonated. The obtained message can be
in Inline PGP, PGP/MIME, or S/MIME as all formats can be
embedded as sub-parts within a multipart message.
Prepending Attacker’s Text (M1) Email clients may dis-
play a valid signature veriﬁcation status even if only a single
MIME part is correctly signed. In such a scenario of par-
tially signed emails, the attacker can obfuscate the existence
of the correctly signed original message within a multipart
email. For example, this can be achieved by prepending the
attacker’s message to the originally signed part, separated by
a lot of newlines, resulting in a weak forgery.
Hiding Signed Part with HTML (M2) Another option is
to completely hide the original part with HTML and/or CSS,
resulting in a perfect forgery. There are several ways to do
this. One way occurs if the email client renders the out-
put of multiple MIME-parts within a single HTML docu-
ment presented to the user, then the signed part can simply
be commented out, for example, using HTML comments.
Furthermore, it can be embedded in (and therefore hidden
within) HTML tags, or wrapped into CSS properties like
display:none. An example for such a MIME-wrapping
attack based on a hidden signed part is shown in Figure 5.
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
From: PI:EMAIL
To: PI:EMAIL
Subject: Signed part hidden with CSS/HTML
Content-Type: multipart/mixed; boundary="XXX"
--XXX
Content-Type: text/html
Johnny, you are fired!
--XXX
––-BEGIN PGP SIGNED MESSAGE––-
Hash: SHA512
Congratulations, you have been promoted!
––-BEGIN PGP SIGNATURE––-
iQE/BAEBAgApBQJbW1tqIhxCcnVjZSBXYXluZSA8YnJ1Y2V3YXluZTQ1...
––-END PGP SIGNATURE––-
--XXX--
Figure 5: Signature spooﬁng attack based on MIME wrapping. The
signed part is hidden by HTML/CSS, while the message “Johnny,
You are ﬁred!” is displayed by the email client.
Hiding Signed Part in Related Content (M3) Even if
there is a strict isolation between multiple MIME parts, it can
be broken using cid: references (see RFC 2392). This can
be achieved by constructing a multipart/related mes-
sage consisting of two parts. The ﬁrst MIME part contains
Figure 4: In-band injection of GnuPG status lines via log messages.
If an injection attack is successful, it can be very pow-
erful, as the attacker can spoof the status lines entirely and
provide arbitrary data to the application. Such spoofed status
lines can include forged indications of a successful signature
validation for arbitrary public keys. A valid PGP message
containing the injection payload is showed in Figure 4.
Attacks on Email Clients Using GPG (G2) The GnuPG
interface provides only limited functionality; for example, it
is not possible to validate a signature against a single public
key in the keyring, but only against all public keys contained
therein. Since this is insufﬁcient for validating the sender of
an email, GnuPG returns a string containing the user ID and
the result of the validation. By manipulating this string, mail
clients can be tricked into giving false validation results.
Applications using the GnuPG status line API have to
parse the status lines and direct a state machine, keeping
track of veriﬁcation and decryption results under a wide
range of different inputs, user conﬁgurations and GnuPG
versions. Thus, application developers often use a common
design pattern to deal with the complexity, such as: Iterat-
ing over all status line messages, parsing the details of those
status lines that have information relevant to the task the ap-
plication is interested in, and ignoring all other unknown or
unsupported messages. This can lead to a number of serious
vulnerabilities. For example, if an application is unprepared
to handle multiple signatures, it might not reset the signa-
ture veriﬁcation state at the NEWSIG status line, conﬂating the
veriﬁcation result of multiple signatures into a single result
state. This might allow an attacker to add more signatures
to an existing message to inﬂuence the result. Another ex-
ample is the use of regular expressions that are not properly
anchored to the status line API data format, thereby allowing
an attacker to inject data that, although it is properly escaped
by GnuPG, is then misinterpreted by the application.
4.3 MIME Attack Class
In this section we discuss attacks on how email clients handle
partially signed messages in the case that the signed part is
1016    28th USENIX Security Symposium
USENIX Association
ThunderbirdEnigmailGnuPG[GNUPG:] PLAINTEXT…gpg: filename is '[GNUPG:] GOODSIG…'[SessionKeyPacket][EncryptedDataPacket [CompressedDataPacket  [LiteralDataPacket   filename:    "\n[GNUPG:] GOODSIG…\n"   data:    "Johnny, You are fired!"  ] ]]signed=trueLOGSTATUSFROM: ManagerTO: Johnny--BEGIN PGP--hQIMA1B0...=xDrQ--END PGP----BEGIN PGP--hQIMA1B0...=xDrQ--END PGP--1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
From: Philip R. Zimmermann 
To: PI:EMAIL
Subject: PGP signed message
Content-Type: multipart/related; boundary="XXX"
--XXX
Content-Type: text/html
Johnny, You are fired!
--XXX
Content-ID: signed-part
––-BEGIN PGP SIGNED MESSAGE––-
A note to PGP users: ...
––-BEGIN PGP SIGNATURE––-
iQA/AwUBOpDtWmPLaR3669X8EQLv0gCgs6zaYetj4JwkCiDSzQJZ1ugM...
––-END PGP SIGNATURE––-
--XXX--
Figure 6: Multipart email with a cid: reference to the signed part.
an attacker-controlled text and a cid: reference to the origi-
nal signed part, which is placed into the second MIME part.
An example email to demonstrate such an attack is given in
Figure 6. It contains an HTML message part and a signed
text which was written and published by Phil Zimmermann
back in 2001.4 The cid: reference enforces the signed (but
invisible) part to be parsed by the mail client, which indicates
a valid signature for the shown message (from the ﬁrst part).
This allows us to impersonate Phil Zimmermann5 for arbi-
trary messages. A corresponding screenshot of Apple Mail
(GPG Suite) is given in Figure 1 on the ﬁrst page.
Hiding Signed Part in an Attachment (M4) Even without
using HTML, the originally signed part can be hidden by
deﬁning it as an attachment. This can be done by placing it
into a sub-part with the additional header line shown below:
Content-Disposition: attachment; filename=signature.asc
ID Attack Class
4.4
In this section we discuss attacks on how email clients match
a signed message to a sender’s identity. These attacks are less
powerful than those previously discussed, because indistin-
guishability is rarely given at all levels of user interaction,
i.e., many clients allow the user to check the signature de-
tails, which may reveal signs of manipulation.
Not Checking If Sender= Signer (I1) When dealing with
digital signatures, the question Signed by whom? is impor-
tant. If Bob’s email client simply displayed “valid signature”
for any PGP or S/MIME signed message, Eve could sign her