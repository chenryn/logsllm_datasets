to an additional entity, a trusted functionality machine F that carries the desired computation
truthfully. Let S (the simulator ) denote the adversary in this idealized execution, and IDEALF ,S,Z
the binary distribution ensemble describing Z’s output after interacting with adversary S and ideal
functionality F.
A protocol Π is said to securely realize a functionality F if for every adversary A in the real
interaction, there is an adversary S in the ideal interaction, such that no environment Z, on any
input, can tell the real interaction apart from the ideal interaction, except with negligible probability
(in the security paramete κ). More precisely, if the two binary distribution ensembles above are
computationally indistinguishable.
In this paper we will consider the secure computation of non-reactive functions (also known as
secure function evaluation—SFE), represented by Boolean circuits (see below), and allowing abort,
as instructed by the adversary. We will denote the ideal computation of 5−ary function f with abort
sfe(P), where P = {P1, P2, P3, P4, P5}. Finally, protocols typically invoke other sub-protocols.
by F f
In this framework the hybrid model is like a real interaction, except that some invocations of the
sub-protocols are replaced by the invocation of an instance of an ideal functionality F; this is
called the “F-hybrid model.” We will perform such replacements, but some times, for the sake of
eﬃciency, we will break away from modular/black-box composition rules, and thus it will be more
convenient for us to express the security of components in a property-based fashion.
Cryptographic building blocks. Our constructions make use of a a pseudorandom function
family, a collision-resistant hash function, and a secure (non-interactive) commitment scheme. Our
protocol also makes use of variant of Oblivious Transfer we introduce in this paper, called Attested
OT, which we describe in Section 3. We present the deﬁnitions and security of the primitives above
in Appendix A.
Distributed circuit garbling schemes.
proach to secure computation [Yao82], and in particular distributed multi-party garbling (cf. [BMR90,
DI05]). First, we present some notation and correctness properties of garbling schemes, following
Bellare et al. [BHR12]. Given the circuit representation of the function to be garbled f , a garbling
scheme G = (Gb, En, De, Ev, f ) consists of the following randomized functions:
In this paper we will follow the circuit-garbling ap-
Garbling function Gb(f, 1κ) outputs three strings (Gf, e, d);
encoding function En(e,·) that maps an initial input x to a garbled input X = En(e, x);
6
evaluation function Ev(Gf,·) that maps every garbled input X to a garbled output Y =
Ev(Gf, X); and
decoding function De(d,·) that maps garbled output Y to a ﬁnal output y = De(d, Y ).
Bellare et al. [BHR12] formulate a series of properties for circuit-garbling schemes. In this paper
we will be speciﬁcally interested in the following:
Deﬁnition 1. We say that G = (Gb, En, De, Ev, f ) is a correct circuit garbling scheme if for all
functions f , and for all inputs x in the domain of f , De(d, Ev(Gf, En(e, x))) = f (x), where (Gf, e, d)
is the output of Gb(f, 1κ).
Several recent works on concretely eﬃcient MPC (e.g., [CKMZ14, BLO16b]) use and instantiate
circuit-garbling schemes that are computed by multiple parties in a distributed manner based
on Oblivious Transfer. The functionality of such distributed garbling schemes is described in
Figure 9 in Appendix C (our speciﬁc distributed garbling function will be described later). Our
construction will be using the semi-honest distributed garbling protocol due to Ben-Efraim et
al. [BLO16b] (which includes the free-XOR optimization) in order to obtain an actively secure
distributed garbling protocol. At a very high level, their protocol allows parties to compute the
distributed garbling function with no communication for all XOR gates and requires every party
to perform (roughly) 2n bit-OTs and 8n string-OTs for every AND gate in the circuit. For more
details, we refer the reader to [BLO16b]; however, the description of our version of the distributed
garbling protocol will not assume prior familiarity with [BLO16b].
3 Attested Oblivious Transfer
While our MPC protocol generalizes to n parties (as described in Section 7), it will be easier to
consider the speciﬁc case of 5-party MPC, where the adversary actively corrupts at most 2 parties at
the beginning of the protocol; our experimental results will also focus on this speciﬁc case. We now
deﬁne two speciﬁc 4−party functionalities – Attested OT (AOT) and Batch Attested OT (B-AOT).
AOT can be viewed as an OT protocol between a sender and a receiver, with the additional help
of two “assistant parties” who will attest to the respective inputs of both parties, while B-AOT,
as its name indicates, is the combined/amortized version of AOTs of multiple instances. These
functionalities will help us instantiate eﬃcient malicious variants of OT in our distributed garbling
process with less interaction and using only symmetric-key primitives. Throughout the following
discussion, we will assume that the public commitment key (obtained by executing ComGen(1κ))
as well as the key for the collision-resistant hash function H (obtained when sampling H from H)
are publicly available to all parties.
3.1 Attested OT
The ideal functionality for Attested OT is presented in Figure 1. P1 is the sender with input
(m0, m1) and P2 is the receiver with a bit value b. P3 and P4 are the attesters: they obtain copies
of both P1 and P2’s inputs and will help P1 and P2 perform the OT functionality. We present an
AOT protocol secure against active corruptions in Figure 2 and prove security of the protocol in
Lemma 2. When only considering a passive adversary, a much simpler information-theoretic AOT
protocol with only one attester suﬃces. We describe this simple protocol in Figure 10 of Appendix
C for completeness. In describing the functionality and protocols, we assume that attesters receive
their copies of inputs from P1 and P2 in each execution. When invoked in our 4-party distributed
garbling, however, the attesters obtain a random seed from P1 and P2 at the beginning of the
7
protocol and then use it to derive inputs to all future invocations without interaction. We prove
that our protocol is secure against malicious adversaries by showing the lemma below (proof in
Appendix B.
F4AOT interacts with parties P1, P2, P3, P4 and the adversary S, with P1 and P2 acting as sender and
receiver, respectively, and P3, P4 as attesters.
Functionality F4AOT(P1, P2,{P3, P4})
On input message (Sender, sid , m0, m1) from P1, where each mi ∈ M, record (m0, m1) and
Ignore further
send (Sender, sid , m0, m1) to P3 and P4 and (Sender, sid ) to the adversary.
(Sender, sid ,·,·) messages.
On input message (Receiver, sid , b) from P2, where b ∈ {0, 1}, record b and send (Receiver, sid , b)
to P3 and P4 and (Receiver, sid ) to the adversary. Ignore further (Receiver, sid ,·) inputs.
On input message (Attester, sid , mj
if
(Sender, sid ,·,·) and (Receiver, sid ,·) have not been recorded, ignore this message; otherwise,
1, bj) and send (Attester, sid ) to the adversary. Ignore further (Attester, sid ,·,·,·)
record (mj
messages.
On input message (Output, sid ) from the adversary, if (m0, m1, b) (cid:54)= (m3
1, b3) or (m0, m1, b) (cid:54)=
0, m3
1, b4), send (Output, sid ,⊥) to P2; else send (Output, sid , mb) to P2.
(m4
On input message (Abort, sid ) from the adversary, send (Output, sid ,⊥) to P2.
1, bj) from Pj, j ∈ {3, 4}, where each mj
i ∈ M,
0, mj
0, m4
0, mj
Figure 1: The 4-party Attested OT ideal functionality F4AOT.
Lemma 2. Assuming (ComGen, Com, Open) is a secure commitment scheme, protocol Π4AOT se-
curely realizes the F4AOT functionality.
3.2 Batch Attested OT
In our distributed garbling protocol, we need to perform a large batch of attested OT protocols
(proportional to number of gates in the circuit). It turns out that we can optimize communication
complexity of the protocol in the batch setting.
In particular, P3 and P4 only need to send a
hash of all commitments they needed to send to P1. Furthermore, only one of them needs to send
decommitments, while the other can just send the hash of all the decommitments concatenated as
that is suﬃcient for checking the equality of the two. In Appendix C, FB-4AOT (Figure 11) describes
the functionality and Πb-4aot (Figure 12) describes the corresponding protocol for this batch setting.
The security of the batch assisted OT protocol (Lemma 3) below follows in a similar manner to
the proof of Lemma 2 and is omitted here.
Lemma 3. Assuming (ComGen, Com, Open) is a secure commitment scheme, and H ← H is a
collision resistant hash function, protocol Πb-4aot securely realizes the FB-4AOT functionality.
3.3 Eﬃciency of Attested OT
Semi-honest case. Note that in the semi-honest case, ﬁrst P1 and P2 send their inputs to P3
and then P3 sends the output to P2. In case of bit OT this requires 4 bits of communication, but in
our four-party garbling where P1 and P2 inputs can derived from a one-time communicated seed,
8
Protocol Π4aot(P1, P2,{P3, P4})
The protocol is carried out among P1, P2, P3, P4, with P1 and P2 acting as sender and receiver,
respectively, and P3, P4 as attestors. Let Commit = (ComGen, Com, Open) be a secure noninteractive
commitment scheme.
Input. P1 holds m0, m1, and P2 holds b.
Computation. Proceed as follows:
1. P1 generates random values r0, r1 ← {0, 1}∗ and computes (Com0, Open0) := Com(m0; r0)
and (Com1, Open1) := Com(m1; r1). P1 sends Com0 and Com1 to P2 and sends r0, m0, r1, m1
to P3 and P4, who store them as r3
1, m4
2. P2 sends b to P3 and P4 who store them as b3 and b4, respectively.
3. P3 and P4 exchange their copies of P1 and P2’s inputs and the random values they receive
1, respectively.
1 and r4
1, m3
0, m4
0, m3
0, r3
0, r4
from P1.
(a) If the values match, then for i ∈ {3, 4}, Pi computes (Comi
using scheme Commit and its random values, and sends (Comi
also sends Openi
b to P2.
(b) If the values do not match, i.e., (m3
0, m3
1, b3, r3
0, r3
0, Openi
0, Comi
0) and (Comi
1, Openi
1)
1) to P2. (Wlog) P3
1), they send a ⊥
0, r4
1) (cid:54)= (m4
0, m4
1, b4, r4
message to P2 (denoting abort).
Output. P2 checks the following and outputs ⊥ if any of items are true: (i) It receives ⊥ from
P3 or P4; (ii) the three commitment pairs it has received from P1, P3, P4 do not match; and (iii)
Open(Com3
b) = ⊥ for b3 = b. Otherwise, P2 outputs m3
b3 = Open(Com3
b, Open3
b, Open3
b).
Figure 2: The actively secure 4-party protocol for Attested OT.
communicating a single bit per OT is suﬃcient. Similarly, the string attessted OT requires κ bits
of communication. Also note that only one round of interaction would be suﬃcient when using
seeds to derive inputs for attesters.
Malicious case. Similarly, in the malicious case, ﬁrst P1 and P2 send their inputs and randomness
for the commitments to P3 and P4. P3 and P4 exchange hashes of these values. But these steps can
be eliminated in our distributed garbling since inputs can be derived from seeds. Finally P1 sends
commitments and P3 sends decommitments, while P3 and P4 also send hashes of commitments which
again is insigniﬁcant in the batch attested OT. So, the overall communication complexity is two
commitments and one decommitment per OT. The computational cost is generating 6 commitments
and roughly 2 hashings per OT. Also note that only one round of interaction is suﬃcient when
using seeds to derive inputs for attesters.
4 Eﬃcient and Actively Secure 5PC
We start by presenting our actively secure distributed garbling protocol, followed by the 5PC (with
abort) protocol. It turns out that the protocol can be signiﬁcantly simpliﬁed in the case of semi-
honest adversaries, which might also be of practical interest. We conclude the section pointing out
those simpliﬁcations.
9
Function f C
4GC(s1, s2, s3, s4)
Inputs. All four parties hold the circuit C, security parameter κ and pseudorandom function family
‘delta’, ‘perm’ and ‘key’ are known public strings. In addition, Pi, i ∈ [4], has private input
F.
random seed si ∈ {0, 1}κ.
Computation. Proceed as follows:
1.
For i ∈ [4] do:
Ri := Fsi(‘delta’), Fsi ∈ F.
For every wire w in C that is not the output of an XOR gate, generate a random per-
w,0 ⊕ Ri.
mutation bit pi
(These wires are set in this way in order to enable the free XOR technique.)
In a topological order, for every output wire w of an XOR gate with input wires u and v,
set pi
w := Fsi(‘perm’||w), and let ki
w,0 := Fsi (‘key’||w||0) and ki
w,1 := ki
w := pi
2.
3.
For every AND gate g ∈ C with input wires u, v and output wire w, every α, β ∈ {0, 1} and
every j ∈ [4], set:
u ⊕ pi
v, ki
w,0 := ki
w,1 := ki
v,0 and ki
w,0 ⊕ Ri.
u,0 ⊕ ki
i=1 pi
w.
For every w in C, set pw :=(cid:76)4
(cid:16) 4(cid:77)
w,0 ⊕(cid:0)Ri · ((pu ⊕ α) · (pv ⊕ β) ⊕ pw)(cid:1)
(g||j) ⊕ Fki
gj
α,β :=
(g||j)
v,β
(cid:17)
Fki
u,α
i=1
⊕ ki
(1)
Outputs.
(Public outputs) Output to all parties g1
α, β ∈ {0, 1}.
(Private outputs) Output s3, s4 to P1 and P2, and s1, s2 to P3 and P4.
α,β|| . . .||g4
α,β, for every AND gate g ∈ C and every
Figure 3: The 4-party distributed garbling function.
4.1 Actively secure distributed garbling scheme
Our garbling scheme secure against actively malicious adversaries builds on the passively secure
distributed garbling protocol of Ben-Efraim et al. [BLO16b] (which includes the free-XOR opti-
mization). At a very high level, we make three modiﬁcations to their protocol: First, in order to
achieve active security, we ensure that each party’s randomness and keys are generated using a
small random seed, and that exactly two other parties learn the seed of each party. This enables
two other parties to “check” every parties’ computation. Second, we replace calls to each batch of
two-party OTs in their protocol with calls to our 4-party Batch Assisted OT functionality FB-4AOT;
this avoids the use of OT protocols altogether, and reduces the number of rounds of interactions to
just one. Third, for each party’s share of the garbled circuit, two other parties compute the same
share and send it to the party missing that share. This ensures that at least one share is honestly
generated and hence bad garbled circuits can be detected. Through these modiﬁcations, we obtain
a more eﬃcient 4-party distributed garbling protocol that will help us get a 5PC protocol secure
against corrupted malicious parties. Our distributed garbling function is deﬁned in Figure 3 (which
is a tailored version of the n−party distributed garbling function from Figure 9). We now describe
our distributed garbling scheme G (cf. Section 2) in more detail below:
10
Protocol Π4gc(C,{P1, P2, P3, P4})
Inputs. All parties hold the circuit C, security parameter κ and pseudorandom function family F.
‘delta’, ‘perm’, ‘key’, ‘bitOT’ and ‘strOT’ are known public strings. In addition, P1 holds seeds
{s1, s3, s4}, P2 holds seeds {s2, s3, s4}, P3 holds seeds {s1, s2, s3} and P4 holds seed {s1, s2, s4},
where all si are random seeds to F. Denote by Si the set of indices of parties with knowledge of si,
i.e., S1 = {1, 3, 4}, S2 = {2, 3, 4}, S3 = {1, 2, 3}, and S4 = {1, 2, 4}.
Keys and permutation bits. For i ∈ [4], for all j ∈ Si, Pj performs the following:
w := Fsi(‘perm’||w), and set ki,j
Ri,j := Fsi(‘delta’). Note, that if parties are honest, then Ri,j = Ri,(cid:96) = Ri for all j, (cid:96) ∈ Si.
For every wire w in C that is not the output of an XOR gate, generate a random permutation
w,0 ⊕ Ri,j. Note, that
bit pi,j