gadgets we need to stop the ROP chain execution. This is
where stop gadgets come in. A stop gadget is anything that
would cause the program to block, like an inﬁnite loop or a
blocking system call (like sleep). To scan for useful gadgets,
one places the address being probed in the return address,
232
pop rdi
ret
Crash
Buffer
AAAAA
return address
0x400000
0xdead
0xdead
0xdead
Buffer
AAAAA
return address
0x400000
(stop)
0x400100
(stop)
0x400100
0xdead
no crash
pop rdi
ret
sleep(10);
Figure 9.
Scanning for gadgets and the use of stop gadgets. To scan for
gadgets one overwrites the return address with a candidate .text address (e.g.,
0x400000). If a gadget is found, it will return, so one must add “stop gadgets”
to the stack to stop the ROP chain execution so that a return does not cause
a crash, making it possible to detect gadgets.
followed by a number of stop gadgets. Note that a pop rdi;
ret gadget would pop the next item from the stack into rdi
so two stop gadgets would be needed in this case. Each time
a useful gadget that does not cause a program crash is found,
the stop gadget will run, blocking the program and leaving the
socket open (instead of causing a crash). One can now scan
the entire .text segment to compile a list of gadgets. The next
section describes how the attacker can identify the instructions
of a gadget—e.g., differentiate between pop rdi; ret and
pop rsi; ret.
Stop gadgets need not necessarily be gadgets that “stop”
the program. They are merely a signaling mechanism. For
example, a stop gadget could be one that forces a particular
write to the network so the attacker can tell whether the stop
gadget executed. Another scenario is one in which a stop
gadget is already present in the stack frame. The stack will
indeed already have multiple return addresses in it, and one
of them may act as a stop gadget. For example a server may
handle requests in a while-true loop, so returning to that loop
may “resume” program execution and another request can be
handled. This can be used to signal whether a program crashed
or is still alive (i.e., the stop gadget ran). The attacker in this
case would populate the stack with the addresses of enough
ret instructions to “eat up” enough stack until the next word
on the stack is a return address of a previous stack frame that
acts as a stop gadget (e.g., returns to the main program loop).
This particular optimization is useful for preventing situations
where worker processes are limited and inﬁnite loop-type stop
gadgets cause all workers to become stuck, making it possible
to continue the attack (as is the case with nginx). Section VIII-J
describes in more detail how one can attack systems with few
worker processes.
C. Identifying gadgets
We now discuss how to classify gadgets. This can be
done by controlling the stack layout and inspecting program
behavior. We deﬁne three values that the attacker can place on
the stack:
Probe
Stop
The address of the gadget being scanned.
The address of a stop gadget that will not crash.
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:56:59 UTC from IEEE Xplore.  Restrictions apply. 
pop rax
ret
no crash
(probe)
0x400000
(probe)
0x400001
(trap)
0x0
(trap)
0x0
(stop)
0x500000
(stop)
0x500000
sleep(10);
Crash
xor rax, rax
ret
GOT
0x7fff400
0x7fff500
0x7fff600
libc
write:
...
strcmp:
sleep:
...
...
.text
PLT
call write
...
...
call write
call write
6 bytes
11 bytes
16 bytes
jmp [write]
push 0
jmp dlresolve
jmp [strcmp]
push 1
jmp dlresolve
jmp [sleep]
push 2
jmp dlresolve
Figure 10.
Scanning for pop gadgets. By changing the stack layout, one
can ﬁngerprint gadgets that pop words from the stack. For example, if a “trap
gadget” is executed rather than popped, the program will crash.
Figure 11.
PLT structure and operation. All external calls in a binary go
through the PLT. The PLT dereferences the GOT (populated by the dynamic
linker) to ﬁnd the ﬁnal address to use in a library.
Trap
The address of non-executable memory that will
cause a crash (e.g., 0x0).
The idea is that by varying the position of the stop and trap on
the stack, one can deduce the instructions being executed by
the gadget, either because the trap or stop will execute, causing
a crash or no crash respectively. Here are some examples and
possible stack layouts:
•
•
•
probe, stop, traps (trap, trap, . . . ). Will ﬁnd gadgets
that do not pop the stack like ret or xor rax,
rax; ret.
probe, trap, stop, traps. Will ﬁnd gadgets that pop
exactly one stack word like pop rax; ret or pop
rdi; ret. Figure 10 shows an illustration of this.
probe, stop, stop, stop, stop, stop, stop, stop, traps.
Will ﬁnd gadgets that pop up to six words (e.g., the
BROP gadget).
The traps at the end of each sequence ensure that if a gadget
skips over the stop gadgets, a crash will occur. In practice only
a few traps (if any) will be necessary because the stack will
likely already contain values (e.g., strings, integers) that will
cause crashes when interpreted as return addresses.
By using the second stack layout one can build a list of
pop x gadgets. One still does not know whether a pop rdi
or pop rsi was found. At this point the attack diverges: one
can either conduct a “ﬁrst principles” attack that identiﬁes pop
gadgets based on system call behavior, or an optimized version
of the attack that relies on the BROP gadget.
The BROP gadget has a very unique signature. It pops six
items from the stack and landing in other parts of it pops fewer
items from the stack so one can verify a candidate by laying out
traps and stop gadgets in different combinations and checking
behavior. A misaligned parse in the middle yields a pop rsp
which will cause a crash and can be used to verify the gadget
and further eliminate false positives. The gadget is 11 bytes
long so one can skip up to 7 bytes when scanning the .text
segment to ﬁnd it more efﬁciently, landing somewhere in the
middle of it. If more than 7 bytes are skipped one risks landing
on pop rsp and thus not ﬁnding a copy of the gadget. After
the BROP gadget is found, the attacker can control the ﬁrst
two arguments (rdi and rsi) to any call.
D. Finding the Procedure Linking Table
To control the third argument (rdx) one needs to ﬁnd a
call to strcmp, which sets rdx to the length of the string
compared. The PLT is a jump table at the beginning of the
executable used for all external calls (e.g., libc). For example,
a call to strcmp will actually be a call to the PLT. The PLT
will then dereference the Global Offset Table (GOT) and jump
to the address stored in it. The GOT will be populated by the
dynamic loader with the addresses of library calls depending
on where in memory the library got loaded. The GOT is
populated lazily, so the ﬁrst time each PLT entry is called, it
will take a slow path via dlresolve to resolve the symbol
location and populate the GOT entry for the next time. The
structure of the PLT is shown in Figure 11. It has a very unique
signature: each entry is 16 bytes apart (16 bytes aligned) and
the slow path for each entry can be run at an offset of 6 bytes.
Most of the PLT entries will not cause a crash regardless of
arguments because they are system calls that return EFAULT
on invalid parameters. One can therefore ﬁnd the PLT with
great conﬁdence if a couple of addresses 16 bytes apart do
not cause a crash, and can verify that the same addresses plus
six do not cause a crash. These addresses are also the ﬁrst to
have valid code as they are early on in the executable’s address
space.
The PLT can therefore be found by scanning from the
program’s origin (0x400000) or backwards from the address
leaked through stack reading if the PIE ﬂag was used. Each
address must be 16 bytes aligned and 16 bytes can be skipped
per probe for efﬁciency. We note that PLTs are often pretty
large (200 entries) so one can skip even more bytes (thus
skipping PLT entries) when looking for it to optimize for
speed, hoping that a function that will not crash will still be
hit.
The stack layout to ﬁnd a PLT entry will be: probe, stop,
trap. The PLT can then be veriﬁed by seeing if neighboring
entries do not crash, and if offsets of six bytes (the PLT
slowpath) still do not cause a crash.
E. Controlling rdx via strcmp
Once the attacker ﬁnds the PLT,
the question is what
function calls do various entries correspond to? One of them
233
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:56:59 UTC from IEEE Xplore.  Restrictions apply. 
will be strcmp, unless the program or one of its libraries does
not use that function in which case the attacker can perform
a “ﬁrst principles” attack described later to ﬁnd pop rdx;
ret. We note that there is nothing particular to strcmp apart
from it being commonly used and it setting rdx to a greater
than zero value. Any other function that does the same will
work.
G. Concluding the attack
At this point the attacker can write the entire .text segment
from memory to the attacker’s socket, disassemble it, and ﬁnd
more gadgets. The attacker can also dump the symbol table
and ﬁnd useful functions in the PLT like dup2 and execve.
Generally speaking the attacker will need to:
The attacker can identify PLT entries by exercising each
entry with different arguments and seeing how the function
performs. The ﬁrst two arguments can be controlled thanks
to the BROP gadget. strcmp for example has the following
behavior and signature, where “bad” is an invalid memory
location (e.g., 0x0) and “readable” is a readable pointer (e.g.,
an address in .text):
strcmp(bad, bad): crash
strcmp(bad, readable): crash
strcmp(readable, bad): crash
strcmp(readable, readable): no crash
•
•
•
•
The attacker ﬁnds strcmp by ﬁnding an entry that re-
sponds to the previously mentioned signature. The PLT can be
scanned in two ways. The attacker will have the address of a
valid PLT entry, found previously. The naive technique is to
probe addresses ± 0x10 bytes. A more effective technique that
avoids running off either end of the PLT is using the PLT’s
slow path. The PLT slow path pushes the PLT entry number on
the stack and then calls dlresolve. This call is present in
each PLT entry at offset 0xb. One can therefore overwrite the
saved return address with the PLT entry found + 0xb, followed
by the entry number one wishes to probe (starting at zero) to
systematically scan all PLT entries from the ﬁrst one.
Once strcmp is found, the attacker can set rdx to a
non-zero value by just supplying a pointer to either a PLT
entry (non-zero code sequence) or the start of the ELF header
(0x400000) which has seven non-zero bytes.
False positives can be found when searching for strcmp.
Interestingly though, in all our tests we found that strncmp
and strcasecmp were found instead, and all had the effect
of setting rdx to a value greater than zero, thereby fulﬁlling
the same purpose.
F. Finding write
The attacker so far can control the ﬁrst three arguments to
any call: the ﬁrst two via the BROP gadget, and the third one
indirectly via strcmp. write can now trivially be found by
scanning each PLT entry and forcing a write to the socket and
checking whether the write occurred. The only complication is
ﬁguring out the ﬁle descriptor number for the socket. There are
two approaches: chaining multiple writes each with different
ﬁle descriptor numbers in a single ROP chain, or opening
multiple connections and using a relatively high ﬁle descriptor
number in hope that it will match one of the connections. We
use both techniques in combination.
Linux restricts processes to a maximum of 1024 simulta-
neously open ﬁle descriptors by default, making the search
space small. Further, POSIX requires that new ﬁle descriptors
use the lowest number available, so in practice searching the
ﬁrst few ﬁle descriptors works well.
234
1)
2)
3)
Redirect the socket to standard input / output. The
attacker can use dup2 or close, followed by either
dup or fcntl(F_DUPFD). These are often in the
PLT.
Find “/bin/sh” in memory. An effective technique is
to ﬁnd a writable memory region like the environ-
ment, environ, from the symbol table, and read
“/bin/sh” from the attacker’s socket to that address.
execve the shell. If execve is not in the PLT, the
attacker will need to transfer more of the binary to
ﬁnd a pop rax; ret and syscall gadget.
Dumping the symbol table is not as straightforward as one
might hope. While the ELF header is loaded in memory, the
section table (at the end of the binary) is not. The section
header contains information about the start of the symbol table.
In order to ﬁnd the symbol table without this information, the
attacker must start dumping the binary from the start until
ASCII strings (function names) are found (which is the dynstr
section). Based on the dynstr section, other adjacent sections
containing symbol table information can be found.
H. Attack summary
The optimized BROP attack is as follows:
1)
2)
3)
4)
5)
6)
Find where the executable is loaded. Either 0x400000
for non-PIE executables (default) or stack read a
saved return address.
Find a stop gadget. This is typically a blocking
system call (like sleep or read) in the PLT. The
attacker ﬁnds the PLT in this step too.
Find the BROP gadget. The attacker can now control
the ﬁrst two arguments to calls.
Find strcmp in the PLT. The attacker can now
control the ﬁrst three arguments to calls.
Find write in the PLT. The attacker can now dump
the entire binary to ﬁnd more gadgets.
Build a shellcode and exploit the server.
The attack requires a single (partial) scan of the executable.
The PLT is the ﬁrst part of an executable and is also the ﬁrst
item the attacker needs to bootstrap (i.e., ﬁnding a stop gadget).
The BROP gadget is found in the .text segment, which lives
just after the PLT, streamlining the attack. After the BROP
gadget, the attack is very efﬁcient because it’s a matter of
scanning the PLT (relatively few entries) for two functions.
The attack complexity is therefore based on the density of
BROP gadgets and how long it takes to ﬁnd the PLT.
I. First principles attack
One may think that eliminating BROP gadgets from exe-
cutables or making the PLT difﬁcult to ﬁnd will stop BROP
attacks. This is not the case and we present a less efﬁcient
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:56:59 UTC from IEEE Xplore.  Restrictions apply. 
version of the attack that relies neither on the BROP gad-
get nor the PLT. The attack ﬁnds all the gadgets listed in
Section VIII-A, namely the register pops and syscall. The
attack outline is:
1)
2)
3)