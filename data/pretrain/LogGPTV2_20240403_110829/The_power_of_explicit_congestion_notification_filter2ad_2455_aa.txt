title:The power of explicit congestion notification
author:Aleksandar Kuzmanovic
The Power of Explicit Congestion Notiﬁcation
Aleksandar Kuzmanovic
Department of Computer Science
Northwestern University
PI:EMAIL
ABSTRACT
Despite the fact that Explicit Congestion Notiﬁcation (ECN) demon-
strated a clear potential to substantially improve network perfor-
mance, recent network measurements reveal an extremely poor us-
age of this option in today’s Internet. In this paper, we analyze the
roots of this phenomenon and develop a set of novel incentives to
encourage network providers, end-hosts, and web servers to apply
ECN.
Initially, we examine a fundamental drawback of the current ECN
speciﬁcation, and demonstrate that the absence of ECN indica-
tions in TCP control packets can dramatically hinder system per-
formance. While security reasons primarily prevent the usage of
ECN bits in TCP SYN packets, we show that applying ECN to TCP
SYN ACK packets can signiﬁcantly improve system performance
without introducing any novel security or stability side-effects. Our
network experiments on a cluster of web servers show a dramatic
performance improvement over the existing ECN speciﬁcation:
throughput increases by more than 40%, while the average web
response-time simultaneously decreases by nearly an order of mag-
nitude.
In light of the above ﬁnding, using large-scale simulations, mod-
eling, and network experiments, we re-investigate the relevance of
ECN, and provide a set of practical recommendations and insights:
(i) ECN systematically improves the performance of all investi-
gated AQM schemes; contrary to common belief, this particularly
holds for RED. (ii) The impact of ECN is highest for web-only
trafﬁc mixes such that even a generic AQM algorithm with ECN
support outperforms all non-ECN-enabled AQM schemes that we
investigated. (iii) Primarily due to moderate queuing levels, the su-
periority of ECN over other AQM mechanisms largely holds for
high-speed backbone routers, even in more general trafﬁc scenar-
ios.
(iv) End-hosts that apply ECN can exercise the above per-
formance beneﬁts instantly, without waiting for the entire Internet
community to support the option.
Categories and Subject Descriptors
C.2.2 [Computer Communication Networks]: Network Proto-
cols
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
SIGCOMM’05, August 22–26, 2005, Philadelphia, Pennsylvania, USA.
Copyright 2005 ACM 1-59593-009-4/05/0008 ...$5.00.
General Terms
Algorithms, Measurement, Performance, Experimentation
Keywords
Explicit congestion notiﬁcation, Congestion control, Active queue
management
1.
INTRODUCTION
For more than a decade, the networking research community
has invested enormous efforts in the development of Active Queue
Management (AQM) algorithms for the Internet, with the goal be-
ing to allow network operators to simultaneously achieve high
throughput and low average delay. The key idea is to detect con-
gestion in its early stages and signal this information to the end-
points, before the router queue overﬂows. In such scenarios, AQM
algorithms are not forced to drop packets in order to implicitly no-
tify endpoints about the congestion; instead, they can mark packets
and send explicit congestion notiﬁcations to the endpoints. Such
explicit indications enable much smoother end-point control [12],
which in turn signiﬁcantly improves system performance [12, 23].
Similar efforts are being undertaken to make both routers and end-
points in the Internet ECN-capable [30, 31].
Despite the above efforts, recent network measurements reveal
an extremely poor usage of ECN. For example, experiments on
over 84,000 web servers in the Internet indicate that in the year
2000, only 1.1% of the servers were ECN-capable [28], while this
fraction increased to only 2.1% in 2004 [27]. More interestingly,
measurements from [27] reveal that in experiments with ECN-
enabled servers, not a single packet was marked by intermediate
routers. This indirectly indicates that the percentage of routers that
apply ECN-enabled AQM is probably even smaller than the above
percentage of ECN-enabled web servers.
The causes of the above phenomenon are diverse. On one hand,
deploying any change in a large scale system such as the Internet is
a non-trivial engineering task. One of the reasons for the small
fraction of ECN-enabled endpoints is the existence of “broken”
ﬁrewalls and load-balancers in the current Internet, which incor-
rectly send a reset in response to a TCP SYN packet that uses ECN
ﬂags in the TCP header. While this problem has been addressed
[14] and the defect has been gradually removed, this initial stress
signiﬁcantly reduced the ECN deployment rate because endpoints
were reluctant to apply it.
On the other hand, the reasons for the small usage of AQM and
ECN in the Internet routers are more serious. Despite numerous
theoretical and empirical indications that AQM can indeed simul-
taneously improve network throughout and bound queuing delay,
questions, doubts, and counter-opinions are still being expressed:
61(i) Why should I drop packets when my buffers are not full [26]?;
(ii) static AQM parameters cannot handle dynamic network traf-
ﬁc [26]; (iii) setting AQM parameters is tedious, particularly for
web trafﬁc [10]; (iv) ECN can improve performance of some AQM
schemes, but not others [23]; etc. Although some of the above
issues are addressed here and elsewhere [15], network providers
apparently are waiting for a more uniform and stronger signal from
the research community before applying any change.
In this paper, we develop a set of novel incentives for network
endpoints, both web-clients and servers, to apply ECN; in addition,
we develop novel incentives for network providers to apply ECN-
enabled AQM schemes. We show that ECN is not an obstacle for
AQM deployment, as suggested in [24]; moreover, the key hypoth-
esis of our work is that ECN should be used as the driving force for
AQM deployment.
In Section 2, we provide the necessary background on ECN.
Next, in Section 3, we point out a fundamental drawback of the
current ECN speciﬁcation which drops TCP control packets in mo-
ments of congestion; we argue that marking TCP SYN ACK pack-
ets at congested routers can signiﬁcantly improve the system per-
formance without inducing any novel security or stability chal-
lenges. Section 4 evaluates the impact of this innovation on the
performance of several AQM schemes in a web-browsing environ-
ment. In Section 5, we develop a simple queuing model to explain
the observed system behavior. Section 6 evaluates ECN’s incre-
mental deployability, while Section 7 presents a set of experiments
conducted on a cluster of web servers. We discuss related work in
Section 8. Finally, in Section 9, we conclude.
2. BACKGROUND
Explicit Congestion Notiﬁcation is inherently coupled with the
idea of Active Queue Management. The primary goal of AQM
algorithms, which we discuss in more detail below, is to allow net-
work operators simultaneously to achieve high throughput and low
average delay by detecting incipient congestion. This is achieved
by sending appropriate indications to the endpoints before the queue
overﬂows. However, the method of informing sources of conges-
tion is not limited to dropping packets, as is the case with non-
AQM-enabled FIFO queues.
Instead, AQM-enabled routers can
mark packets during congestion by setting the ECN bit in the pack-
ets’ header, as originally proposed for the DECbit scheme [32].
The actual number and choice of packets that are marked during
congestion depends on a particular AQM policy. The recommen-
dations for TCP’s response to ECN are initially proposed in [12],
and additionally reﬁned in [30, 31].
2.1 Negotiating ECN capabilities
Before any ECN-enabled data exchange can take place between
two endpoints, they ﬁrst have to successfully negotiate the use of
ECN. ECN negotiation happens during the TCP connection setup
phase. The ECN-related bits are (i) ECN-Capable (ECT) and (ii)
Congestion Experienced (ECN/CE) bits in the IP header, and (iii)
ECN-Echo bit in the TCP header.1 We illustrate the negotiation
procedure in Figure 1 using an HTTP ﬁle download example, which
we extensively exploit later in the paper. The client ﬁrst sets the
ECN-Echo bit in the TCP header of a TCP SYN packet and sends
this packet to the receiver. For a SYN packet, the ECN-Echo bit is
deﬁned not as a return indication of congestion, but instead as an
indication that the sending TCP is ECN-capable [13]. Upon receiv-
1Another TCP header’s ECN-related bit, Congestion Window Re-
duced (CWR), is not essential for our discussion here. See RFC
3168 [31] for more details.
Web(cid:13)
client(cid:13)
Web(cid:13)
server(cid:13)
TCP(cid:13):(cid:13) ECN(cid:13) Echo =1(cid:13)
IP(cid:13):(cid:13)
ECT(cid:13)=0(cid:13)
ECN(cid:13)/(cid:13)CE(cid:13)=0(cid:13)
TCP(cid:13):(cid:13) ECN(cid:13) Echo =0(cid:13)
IP(cid:13):(cid:13)
ECT(cid:13)=1(cid:13)
ECN(cid:13)/(cid:13)CE(cid:13)=0(cid:13)
TCP(cid:13)SYN(cid:13)
SYN(cid:13)ACK(cid:13)
HTTP(cid:13)REQ(cid:13)
TCP(cid:13) DATA(cid:13)
TCP(cid:13):(cid:13) ECN(cid:13) Echo =1(cid:13)
IP(cid:13):(cid:13)
ECT(cid:13)=0(cid:13)
ECN(cid:13)/(cid:13)CE(cid:13)=0(cid:13)
ECN(cid:13)/(cid:13)CE(cid:13)=1(cid:13)
TCP(cid:13):(cid:13) ECN(cid:13) Echo =0(cid:13)
IP(cid:13):(cid:13)
ECT(cid:13)=1(cid:13)
ECN(cid:13)/(cid:13)CE(cid:13)=0(cid:13)
TCP(cid:13):(cid:13)ECN(cid:13) Echo =1(cid:13)
TCP(cid:13)ACK(cid:13)
Figure 1: Negotiating ECN capabilities
ing the TCP SYN packet, the server sets the ECN-Echo bit in the
SYN-ACK packet’s TCP header, and sends this packet back to the
client.
When the client receives the above SYN ACK packet, the ECN
capability is negotiated, and both endpoints start an ECN-capable
transport by setting the ECT ﬁeld in the IP header of data packets.
In our particular scenario, the client sets the ECT bit when it sends
the HTTP request. Likewise, the HTTP server also sets the ECT
bit in the TCP data packet headers, when the requested ﬁle is sent
to the client. In moments of congestion, which we assume hap-
pen in the direction from the server to the client, the ECN-enabled
router marks ECT-enabled packets by setting the ECN/CE bit in
the IP header, as illustrated in the ﬁgure. When such packets reach
the client, the client sets the ECN-Echo bit in the TCP header of
the corresponding ACK packet thus signaling to the server that the
incoming data packet has experienced congestion.
3. ECN+: ADDING ECN TO TCP’S CON-
TROL PACKETS
While the current ECN speciﬁcation enables congested routers to
mark TCP data packets during congestion, this is not the case with
TCP control (TCP SYN and SYN ACK) packets. This is simply
because these packets are used initially to negotiate the use of ECN
options between the two endpoints. Below, we ﬁrst elaborate on the
devastating effects that this can have on system performance, par-
ticularly in AQM-enabled environments dominated by web-trafﬁc.
Then we explore possibilities of using ECN bits in the IP headers
of TCP control packets. We demonstrate that marking (instead of
dropping) TCP SYN ACK packets, while leaving the treatment of
the initial TCP SYN packet unchanged from current practice, can
only improve performance without causing a threat for system se-
curity or stability.
3.1 The Problem of TCP’s “Admission Con-
trol”
Assume the scenario from Figure 1. When the client sends a
TCP SYN packet, it sets a retransmission timeout timer to an ini-
tial value of 3 seconds [29].
If the client receives a SYN ACK
packet before the timer expires, it sends the acknowledgement to
the server, typically piggybacking some data (a HTTP request in
our scenario) with the acknowledgement. However, if the SYN
ACK packet does not return (either because the TCP SYN packet
is lost on the forward path, or the SYN ACK packet is lost on the
reverse path) before the timer expires, the client doubles the retrans-
mission timeout value and re-sends the TCP SYN packet. Once a
SYN ACK packet is received at the client side, the connection is
assumed to be successfully “admitted” into the system.
Consider ﬁrst a non-AQM-based FIFO queue at the router. The
key problem is that a packet loss alone is an extremely unreli-
able indication that the ﬂow should not be “admitted” into the net-
work. TCP ﬂows are greedy and tend to utilize all possible avail-
able bandwidth. Thus, even a small number of “admitted” greedy
TCP ﬂows can create an environment with a high packet loss prob-
ability. Yet, this does not mean that another TCP ﬂow cannot
be admitted into the system. Moreover, TCP’s additive-increase
multiplicative-decrease (AIMD) mechanism enables all ﬂows to
utilize their proportional fair share of bandwidth once they are
present in the system. However, in the absence of any explicit noti-
ﬁcation from the network, a TCP endpoint has no other option but
to wait for the retransmission timer to expire, and to then re-send
the TCP SYN packet.
The above problem is even more serious when the congested
router applies an AQM algorithm, as we demonstrate later in the
paper. This is because AQM schemes employ mechanisms that
drop packets before the queue size reaches the queue limit. While
such mechanisms can have remarkable impact and can signiﬁcantly
improve system throughput by controlling behavior of already ad-
mitted ﬂows [8, 16, 19, 21], they can produce devastating effects
in scenarios where ﬂows dynamically arrive and depart from the
system at a high rate. This happens because the percentage of the
trafﬁc that is made up of SYN ACK packets from the server to
the clients can be quite high. Not surprisingly, it has been experi-
mentally shown that for links carrying only web trafﬁc, AQM (e.g.,
RED) provides no clear advantage over drop-tail FIFO for end-user
response times [10].
Unfortunately, the problem is not mitigated by ECN because
ECN is not used in IP headers of TCP SYN or SYN ACK pack-
ets. Therefore, in moments of congestion, an ECN-enabled router
drops TCP SYN and SYN ACK packets because the ECN option is
not yet negotiated between the endpoints. Surprisingly, we demon-
strate later in the paper that the corresponding performance degra-
dation can be even worse when the AQM scheme is ECN-enabled.
Below, we explore possibilities of applying ECN bits in the IP
headers of TCP control packets.
3.2 Marking TCP Control Packets
The TCP “admission control” problem can potentially be allevi-
ated by allowing endpoints to set the ECT bit in the IP headers of
TCP SYN or SYN ACK packets. That would enable ECN-based
AQM schemes at routers to mark TCP control packets. However,
such an approach raises several concerns that we discuss below.
There are several reasons why the ECT ﬁeld should not be set in
TCP SYN packets. First, as indicated in [13], there are no guaran-
tees that the other endpoint (web server in our scenario) is ECN-
capable, or that it would be able to understand and react if the
ECN/CE bits were set by a congested router. Second, the ECT
ﬁeld in TCP SYN packets may be misused by malicious clients
to improve the well-known TCP SYN attack, where the goal is to
congest the web server’s listen queue by sending a large number of
TCP SYN packets. By setting the ECT bit in TCP SYN packet’s
headers, a malicious client would be able to easily inject a large
number of TCP SYN packets through a potentially congested ECN-
enabled router. Luckily, in typical client-server scenarios (e.g., web
trafﬁc example from Figure 1), congestion is much more likely to
happen in the direction of the server to the clients. Thus, setting
ECT bits in TCP SYN packets is not justiﬁed from the performance
point of view.
There are just as many reasons to set the ECT ﬁelds in SYN
ACK packets. Refer again to Figure 1. First, when the web server
receives a TCP SYN packet with the ECN-Echo bit set, it indicates
that the client is ECN-capable. Hence, if the server is also ECN-
capable, there are no obstacles to immediately applying ECN, and
setting the ECT bit in the SYN ACK packet. Second, setting the
ECT bit in SYN ACK packets does not raise novel security vul-
nerabilities. For example, provoking web servers or hosts to send
SYN ACK packets to third parties in order to perform a ”SYN
ACK ﬂood” attack would be greatly inefﬁcient. This is because
the third parties would immediately drop such packets, since they
would know that they didn’t generate the TCP SYN packets in the
ﬁrst place. Moreover, such attacks would have the same signatures
as the existing TCP SYN attacks. Also, provoking web servers or
hosts to reply with SYN ACK packets in order to congest a certain
link would also be highly inefﬁcient because SYN ACK packets
are small in size. Such attacks would be several orders of magni-
tude weaker than the existing ICMP echo-reply DoS attacks. Fi-
nally, because the congestion is likely to happen in the server-to-
client direction, setting the ECT bit in SYN ACK packets can have
a tremendous impact on performance, as we indeed demonstrate
below.
3.2.1 Reacting to ECN Signals in TCP Control Pack-
ets
The TCP sender should immediately send an HTTP request upon
receiving a SYN ACK packet, despite the state of the ECN/CE bit.
As discussed above, the fundamental reason is that the existence
of a congestion notiﬁcation is not a valid indication that the ﬂow
should not be “admitted” into the system; that is only a necessity
when packet losses are used to convey the network state. Below,
we argue that such behavior does not introduce any threat to system
stability.
There are three reasons why the above behavior will not cause a
congestion collapse. First, if the network is indeed congested, the
ﬁrst data packet will re-experience congestion at the router, which
will set the ECN/CE bit in the ﬁrst TCP DATA packet. This will
force the web client to set the ECN-Echo bit in the corresponding
TCP ACK packet, which will further cause the web server to ini-
tially wait for a timeout of 3 seconds before re-sending the packet,2
and even longer if the congestion persists. Thus, the exponential
backoff mechanism, which is necessary to protect network stabil-
ity, is still in place. Second, AQM algorithms are able to control
extremely large ﬂow aggregates (e.g., [19]). Third, we demonstrate
in Section 7 that even in an extremely heavily congested scenario
caused by short-lived ﬂows, the above approach only improves the
performance without causing any stability side effects.
Finally, to distinguish the existing ECN speciﬁcation from the
addition proposed here, we name the above scheme ECN+. In sum-
mary, while the current ECN speciﬁcation enables routers to mark
data packets, ECN+, when enabled at servers, extends this feature
to TCP SYN ACK packets. We evaluate both schemes below.
2Because this can cause similar performance degradations as when
a SYN ACK packet is lost, RFC 2414 [6] proposes an increase of
the initial window size to 2 packets in order to alleviate the above
problem: if at least one of the packets returns to the sender, the
connection will not suffer the 3 second -long timeout penalty.
4. THE IMPACT OF ECN+ ON AQM PER-
FORMANCE
4.1 AQM Algorithms
While ECN+ is a generic extension to ECN that should improve
the performance of all ECN-enabled AQM schemes, we necessar-
ily limit our performance evaluation to a subset of AQM schemes.
In particular, we evaluate the impact of ECN+ on Random Early