cutables, in which they make system calls to implement cer-
tain functionality, but there is no mapping between Android
permissions and Linux system calls. It is imprecise to iden-
tify app behaviors based on system calls they make. Second,
in our threat model, the malware runs on the same device
as the vulnerable app/system daemon to be exploited, thus
any data leaked from the target app/system daemon can
possibly be a building block for more sophisticated attacks.
However, it unknown to us which end points are potentially
related to data leakage. More importantly, an incomplete
list of end points would result in signi(cid:12)cant false negatives.
Therefore, to evaluate which apps/system daemons are
vulnerable, we choose to conservatively (cid:12)lter out apps and
system daemons that are de(cid:12)nitely not vulnerable (denoted
by Snv) | the others are considered to be potentially vul-
nerable (denoted by Spv) | instead of directly identifying
vulnerable apps. We have Spv = S(cid:0)Snv, where S represents
the whole set of apps/system daemons.
3.1 Our Approach
Due to diﬀerent characteristics of apps and system dae-
mons, we adopt diﬀerent techniques to analyze them. Fig-
ure 1 shows the modules and overall analysis steps of SIn-
spector. Each step rules out a subset of apps/system dae-
mons that are not vulnerable.
3.1.1 App Analysis
Given a set of apps, SInspector (cid:12)rst employs API-based
Filter to (cid:12)lter out those not using Unix domain sockets
or having insuﬃcient permission to use Unix domain sock-
ets. Then, Address Analyzer (cid:12)nds out Unix domain socket
address(es) each app uses, and discards apps whose ad-
dresses are under protection. They are not vulnerable be-
cause proper socket (cid:12)le permissions are able to prevent unau-
thorized accesses to a (cid:12)lesystem-based Unix domain socket
channel. Next, the apps left are further examined by Au-
thentication Detector. It detects and categorizes authenti-
cation mechanisms apps implement. Those adopting strong
checks are considered to be not vulnerable. After that,
Reachability Analyzer checks whether the vulnerable code
that uses Unix domain socket will be executed or not at
runtime. If not, that code is not reachable and will never be
triggered, thus the app is not vulnerable. It ends up with a
relatively small set of apps that are potentially vulnerable.
Manual eﬀorts are (cid:12)nally required to con(cid:12)rm the existence
of vulnerabilities.
API-based Filter. This module (cid:12)lters out apps that
are not in our analysis scope. For each app, it checks (1)
Android permissions the app declares, (2) Java APIs the
app calls, and (3) Linux system calls if the app has native
code. Since using Unix domain sockets requires the IN-
TERNET permission, apps without this permission are surely
not vulnerable, neither are apps that do not invoke related
APIs or system calls. APIs called through Java re(cid:13)ection
are currently not considered, because (1) all socket APIs are
available in Android SDK, unlike some private or hidden
APIs which can only be called via Java re(cid:13)ection; and (2)
Unix domain sockets just require a common, non-dangerous
permission and therefore apps have little intention to hide
the relevant logic.
Address Analyzer. This module identi(cid:12)es socket ad-
dresses each app uses and determines if their corresponding
Unix domain socket channels are protected. Dalvik byte
Figure 1: Overview of our approach to identifying potentially vulnerable apps and system daemons.
code and native code are analyzed by Address Analyzer’s
two submodules, App-layer Analyzer and Native-layer An-
alyzer, respectively.
Being aware of Unix domain socket address(es) an app
connects to and/or listens on has two bene(cid:12)ts. First, we
can leverage addresses to determine if both client logic and
server logic present in the same app. Usually it is much
easier to craft server exploits by replaying client behaviors,
and vice versa. Second, diﬀerent apps may use common
libraries that utilize Unix domain sockets to implement cer-
tain functionality. We can take advantage of addresses to
better group apps according to the libraries they use, be-
cause of the fact that apps using the same library typically
have the same Unix socket address (or address structure).
This is more reliable than identifying libraries merely based
on package names and class names, as package names and
class names could be easily obfuscated by tools like Pro-
Guard [9]. Though code similarity comparison techniques
are also capable of recognizing libraries used across diﬀerent
apps, they are usually heavyweight.
Besides identifying addresses, Address Analyzer also eval-
uates whether the socket channel on an address is secure or
not. As we have mentioned in x2, when using FILESYS-
TEM addresses, Unix domain socket servers are able to re-
strict client accesses by setting proper (cid:12)le permissions for
socket (cid:12)les they listen on. A socket (cid:12)le satisfying the fol-
lowing conditions has proper permissions, and therefore the
app using it is considered not vulnerable. First, it is located
in the app’s private data directory, i.e., /data/data/app.
pkg.name/. By default socket (cid:12)les created under this direc-
tory can only be accessed by the app itself. Second, there
is no other operation altering the socket (cid:12)le’s permissions
to publicly accessible. The app, as the socket (cid:12)le’s owner,
has the privilege to change its permissions to whatever it
wants. All (cid:12)le operations that possibly change the socket
(cid:12)le’s permissions need to be examined.
Authentication Detector. The OS allows both the
client and the server to get their peers’ identity informa-
tion (i.e., peer credentials) once a Unix domain socket con-
nection is established. This module detects and categorizes
authentication checks built on peer credentials. It also con-
sists of two submodules for processing non-native and native
code separately. Peer credentials are only available for Unix
domain sockets. In our threat model, they are absolutely re-
liable because they are guaranteed by the kernel and there-
fore cannot be spoofed or altered by any non-root process
in the user space.
In Java code, apps call Android SDK
API LocalSocket.getPeerCredentails() to get a socket
peer’s credentials, containing three (cid:12)elds: PID, UID, and
GID. While in native code, the system call getsockopt is
used to obtain the same information. Based on UID, GID
and PID, servers and clients can implement various types of
peer authentication mechanisms. Authentication Detector
keeps track of the propagation of peer credentials in code,
detects checks built upon the credentials, and categorizes
them according to the particular credential they depend on.
Peer authentication checks derived from UID and GID are
considered to be strong, as UID and GID are assigned by the
OS and cannot be spoofed. However, authentications based
on PID are relatively weak. Further analysis is unnecessary
for apps employing strong checks.
Reachability Analyzer. The presence of Unix domain
socket APIs in code does not necessarily mean the app ac-
tually uses Unix domain sockets at runtime. It is possible
that the app just imports a library that oﬀers functional-
ity implemented with Unix domain sockets, but that part of
code is never executed. To (cid:12)lter out such apps, Reachability
Analyzer collects all possible entry points of an app, from
which it builds an inter-component control (cid:13)ow graph.
If
Unix domain socket code cannot be reached from either of
the entry points, we believe the code will not be reached at
runtime, thus the app is considered not vulnerable.
System Daemon Analysis
3.1.2
Several obstacles make pure static analysis of system dae-
mons infeasible. First, given a factory image that contains
all system (cid:12)les, it is diﬃcult to extract all required data
from it due to the fact that vendors develop their own (cid:12)le
formats and there is no universal tool to unpack factory im-
ages. Second, diﬀerent from apps, system daemons’ Unix
domain socket channels are usually enforced with speci(cid:12)c
SEAndroid policies made by Google or vendors. In this case,
evaluating the security of a Unix domain socket channel be-
comes more complicated, especially for the FILESYSTEM
namespace, because it is determined by both SEAndroid and
socket (cid:12)le permissions.
However, system daemons are suitable for dynamic anal-
ysis without worrying about potential code coverage is-
sues. They start automatically, serve as Unix domain socket
servers waiting for client connections, and provide no user
interface. It is reasonable to assume that their server log-
ics are always running instead of being started on demand.
Therefore, instead of employing API-based Filter and Ad-
dress Analyzer, SInspector collects runtime information to
(cid:12)nd out system daemons using Unix domain socket with
Socket Usage Collector, then test all socket channels dae-
SystemDaemonAppAppSystemDaemonApp-layerAnalyzerNative-layerAnalyzerConnectionTesterReachabilityAnalyzerApp-layerDetectorNative-layerDetectorManualAnalysisNativecodePotentially vulnerabledaemonsPotentially vulnerableappsSystemDaemonsAPI-basedFilterSocket UsageCollectorAppsAddress AnalyzerAuthenticationDetectorDEXcodemons expose with Connection Tester, to see which ones are
accessible for an unprivileged app. The native layer Authen-
tication Detector is reused for detecting and categorizing
checks inside system daemons.
Socket Usage Collector. It is impossible for us to ex-
ploit vulnerable client logics implemented inside system dae-
mons. One prerequisite of attacking client is being able to
start running before the real server. In our threat model,
however, the third-party app with only INTERNET permission
can never run ahead of a system daemon, which is started by
the init process even before the Android runtime is initial-
ized. Socket Usage Collector gathers runtime information of
each Unix domain socket, including address, the process that
listens on the address, protocol type (DGRAM, STREM, or
SEQAPCKET), and corresponding system daemon.
Connection Tester. According to socket channel infor-
mation collected, Connection Tester attempts to connect to
them one by one, acting like a client running as a third-
party app with INTERNET permission.
If a socket channel
is enforced by either (cid:12)le permissions or SEAndroid policies,
connection will be denied because of insuﬃcient privilege.
A system daemon is not vulnerable if all its socket channels
are well protected.
3.1.3 Manual Analysis
For apps and system daemons that are most likely to be
vulnerable, manual reverse engineering eﬀorts are required
to investigate the existence of vulnerabilities. Various tools
are helpful for statically and dynamically reversing apps,
e.g., JEB [8], the Xposed framework [12], and IDA Pro.
The eﬀort needed for validating vulnerable code is supposed
to be minimal, although writing workable exploits may take
longer. Message formats (or called protocols) apps and sys-
tem daemons use could be quite ad-hoc. Reverse engineering
eﬀorts largely depend on the complexity of implementation.
In order to reduce human eﬀorts, we could integrate proto-
col reversing techniques proposed in prior work [16, 18, 26]
into SInspector in the future.
3.2 Implementation
We implement SInspector based on two cutting-edge tools,
Amandroid [31] and IDA Pro. Both of them oﬀer great
extensibility and are friendly to plugin development. We
take advantage of Amandroid to build inter-procedural con-
trol (cid:13)ow graph (ICFG), inter-procedural data (cid:13)ow graph
(IDFG), and data dependence graph (DDG) from apps’ non-
native part for performing app-layer analysis, and leverage
IDA Pro’s disassembler and control (cid:13)ow analysis to build
data (cid:13)ow analysis on native code, including apps’ ELF li-
braries/executables and system daemons. SInspector only
supports 32-bit ARM binaries for now, considering that the
majority of Android devices are equipped with 32-bit ARM
architecture processors.
Analyzing Apps. API-based Filter extracts Android-
Manifest.xml, decodes it, and looks for the INTERNET per-
mission. App code written in Java is compiled into one
or more DEX (cid:12)les, in which all invoked APIs are visible.
Native binaries are in ELF format.
IDA Pro is able to
identify direct system calls represented as constant relative
addresses embedded in the instructions. However, it does
not resolve indirect call targets that are stored in registers.
More speci(cid:12)cally, binaries can use the SVC instruction to do
system calls, by specifying a system call number in regis-
ter R7 and then executing SVC 0. We extract the mapping
between system call numbers and system call names from
arch/arm/include/asm/unistd.h found in Android kernel
3.14, and identify all indirect system calls by inspecting R7’s
values before each SVC 0 instruction.
The app-layer of Address Analyzer and Authentication
Detector are implemented on top of Amandroid. The server
logic and the client logic are analyzed separately. We (cid:12)rst
locate the method in which Unix domain socket server/-
client is initialized, and create a customized entry point
to it, then invoke Amandroid to build ICFG, IDFG and
DDG from the entry point.
In Java code, Unix domain
socket address is represented by the LocalSocketAddress
class, whose constructors accept an address string as the
(cid:12)rst parameter. We look at construction sites of Local-
SocketAddress objects. In some cases, constant strings are
used. In other cases where an address is built from pack-
age name, random integer, etc., we track its construction of
procedure by querying dependencies on DDG. Such an ex-
ample is shown in Figure 2, in which we need to apply data
(cid:13)ow analysis to extract the address as [\com:qihoo:socket"+
System:currentT imeM illis()%65535]. This allows us to
group apps that share the same socket address or have the
same address construction procedure.
Figure 2: A dynamically constructed socket address case.
The app-layer Authentication Detector (cid:12)nds paths
on ICFG from LocalServerSocket.accept() (for server)
and LocalSocket.connect() (for client) to LocalSocket.
getInputStream() or LocalSocket.getOutputStream(). If
we (cid:12)nd that LocalSocket.getPeerCredentials() is called
along the paths, and there is control dependency be-
tween either getInputStream()/getOutputStream() and
getPeerCredentials(), authentication happens.
In order
to categorize authentication checks, we look at which (cid:12)elds
(UID, GID or PID) are retrieved. We also de(cid:12)ne methods in
Context and PackageManager that take UID, GID, or PID
as sinks, and run taint analysis to track propagation paths.
As mentioned in x3.1, checks relying on UID and GID are
considered strong, while others are weak.
The native-layer Address Analyzer
intra-
procedural control (cid:13)ow graph (CFG) generated by IDA Pro.
Each basic block consists of a series of ARM assembly code
disassembled by IDA Pro’s state-of-the-art disassembling en-
gine. We perform intra-procedural data (cid:13)ow analysis on the
CFG, following the classical static analysis approach [28].
Computing data (cid:13)ow at the assembly level is complicated,
since we have to take into consideration both registers and
the function stack. Unfortunately there does not exist any
robust tools that can perform data (cid:13)ow analysis on ARM
binaries. ARM is a load-store architecture, and no instruc-
tions directly operate on values in memory. This means val-
leverages
public static String getAddr() {  return String.format("com.qihoo.socket%x",     Long.valueOf(System.currentTimeMillis() & 65535));}protected void b(…) {  …  String addr = getAddr();  this.serverSock = new LocalServerSocket(addr);  …}ues must be loaded into registers in order to operate upon
them. Therefore, we need to carefully handle all commonly
used instructions that operate on registers and memory, es-
pecially load and store (pseudo) instructions. We examine
the second argument of system calls bind() and connect(),
which is an address pointing to the sockadd_un structure.
Unix domain socket string is copied to the sun_path (cid:12)eld, 2
byte oﬀ the start of sockadd_un. The (cid:12)rst byte of sun_path
indicates address namespace.
The native-layer Authentication Detector also performs
intra-procedural data (cid:13)ow analysis. getsockopt has (cid:12)ve pa-
rameters in total. Among them, the third one (option name)
and the fourth one (option value pointer) are crucial. When
option name is an integer equal to 17 (macro SO_PEERCRED),
the option value will be populated by peer credentials, a