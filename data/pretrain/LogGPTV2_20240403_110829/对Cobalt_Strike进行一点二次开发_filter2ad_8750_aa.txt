# 对Cobalt Strike进行一点二次开发
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 0x01 watermark去水印
watermark是CS中的水印,这个参数会在`Authorization.java`中进行赋值，从图中也能明显看出主要是对的auth文件的相关解析结果中来判断是否授权
而在生成Stager时会对授权进行判断:
`ListenerConfig.class`中`pad`方法便是基于水印参数添加特征码字符串,这一段水印代码也自然在所有AV的特征库中
因此这里我们只需要将其注释掉，然后操作和没有水印的操作一致即可去watermark水印，即不管何种判断都是最后添加一个空的字符串:
## 0x02 修改checksum8
在生成`HTTP/S
Stager`过程中,主要涉及的就是`GenerateHTTPStager类中的generate方法`,而前文已经提过CS会先参考对应的模板，然后将模板文件中的某部分参数进行修改回填,生成最后的Stager
其中也包括了类似UA头的回填(参考本地的profile文件)以及URI的获取:
至于为什么要通过`getURI`是因为我们知道当使用分段Payload传输时,还需要从远程服务器下载体积较大更复杂的stage，这时就会要访问stage的URL并且通过checksum8进行校验。
###  Stager Url校验算法
当存储着Beacon配置和payload的stage服务器暴露在公网上的时候，是可以通过主动测绘手段发现的。
不幸的是，默认情况下访问该服务是一个伪装的404页面。这也导致了各类扫描器、空间测绘系统、威胁情报平台等并不能基于页面response信息进行有效判断。
随便在fofa上搜索CS服务器就能有一堆默认配置的服务器,这里随机挑选一个:
并且得知该Stage服务器开放在81端口上,使用Nmap的`grab_beacon_config`脚本进行探测,得到对应的URI为:
然后我们便能访问对应的Stage端口的URI来下载得到对应后阶段的Stage文件:
这里我们使用`CobaltStrikeParser`对Stage可以进行一定的解密,从解密的配置中可以看到PublicKey和C2
Server地址,也可以看出来这是一个标准的默认配置profile文件
Stager Url校验算法在公开的NSE脚本中可以找到，关键函数包括：`checksum8、MSFURI、isStager`
先看到对应的HTTPSStager生成部分:
这两个方法都是从`.profile`文件中寻找对应的配置,我们跟进第一个方法:
简单分析一下这个方法,`MSFURI`方法从大小写字母+数字的字符数组中随机指定长度的字符序列并调用checksum8函数计算字符序列的ASCII和与256的模是否等于固定值（32位Stage与64位Stage分别使用92、93作为固定值），如果相等返回字符序列，否则继续直至找到符合条件的字符序列。
其中`isStager`方法在WebServer中进行使用,也正是该类提供了对于Beacon端请求URI的判断和最终提供分阶段Payload供Beacon端下载的作用
这个WebServer继承于NanoHTTPD(微型服务器)，看一下它里面的处理逻辑，它的URI就相当于个参数，参数经过checksum8计算后等于92或者93就会返回信息了，这里其实把92和93改掉也可以，但是这个功能还想正常使用，只能改成小于256的，因为算法最后对256取余，也就是说，爆破256次必然能爆破出来。  
因此我们可以重写`checksum8方法`,取消取余操作并且计算一个随机URI的checksum8的结果然后实现重写:
    public class EchoTest {
        public static long checksum8(String text) {
            if (text.length()  cs 3.x版本的配置信息是通过异或0x69解密出的，4.x版本的配置信息是通过异或0x2e解密出的。
我们的Stager中就包含着`Beacon Config`,如果想从Stager中查看对应的`Beacon
Config`需要Stager需要进行一定的自解密然后通过config部分异或
在这里我们使用如下的脚本先进行自解密:
    import sys,struct
    filename = sys.argv[1]
    data = open(filename, 'rb').read()
    t = bytearray(data[0x45:])
    (a,b) = struct.unpack_from('<II', t)
    key = a
    t2 = t[8:]
    out = ""
    for i in range(len(t2)/4):
        temp = struct.unpack_from('<I', t2[i*4:])[0]
        temp ^= key
        out += struct.pack('<I', temp)
        key ^= temp
    open(filename+'.decoded', 'wb').write(out)
由于已经知道是4的版本,我们直接将decode文件放入winhex中然后与`0x2e`异或:
从3.x到4.x，cs自解密的算法没变，自解密后再解密配置文件的算法只是密钥发生变化，而且是固定的
前文提到Stage中Config配置的生成在`BeaconPayload`中的exportBeaconStage方法中,其调用了`beacon_obfuscate`进行异或混淆
为了避免内存查杀,可以让其直接可以加载为无加密的资源（资源替换sleeve文件夹）去掉解密过程，让其直接读取字节数组后返回。或者替换加密密钥,不使用默认的0x2e或者3中的0x69,这里我们选取后者进行开发
考虑将其替换为`0x1e`
当然到这里更改完并没有解决问题,在CS中生成shellcode时是会有固定的参考模板,同时依赖了模板DLL,在CS
4.x之后资源文件都会加密形式存储在sleeve文件夹中:
因此我们在这里如果想要完全适配还需要将所有模板DLL中的异或密钥进行更改，但是必须要做的就是解密模板DLL,因此这就和认证流程相关，主要看`Authorization类`的构造方法
跟进setup最后到该方法`SleeveSecurity.registerKey`:
使用传入的值计算一个长度为256的摘要，再取0-16作为AES的密钥，取16-32作为HmacSHA256的密钥。这里就结束了，但是既然取了密钥，那么肯定要进行操作，可以在`SleeveSecurity.decrypt`方法中看到
校验HMAC，正确后进行AES解密。在`SleevedResource._readResource`方法中存在`decrypt`调用：
这个方法接受一个字符串作为文件路径，并将路径中的`resources/`替换为`sleeve/`，之后读取文件内容并进行解密。
因此其实最重要的部分就是在
    SleevedResource.Setup(var15);
只有拿到这个Key我们才有办法解密，官方用这个key加密了sleeve下的dll，将key放在了`.auth`文件中，那么key是一个固定值
现在我们在分析一下`.auth`文件,其结构如下:
    0   6位字节，特定的文件头
    1   4位字节，转换为有符号整数后等于29999999
    2   4位字节，转换为有符号整数后不等于0
    3   1位字节，其值大于43小于128
    4   1位字节，其值为16
    5   16位字节，值为key，这里注意4.3版本还包含了之前的key和key长度
    那么4.3版本的.auth文件有效长度应该为83位字节，即4.0版本为32位，之后每一个版本都在前面版本的基础上增加17位。
因此我们能通过一定的转换最终得到每个版本默认的key,最终利用已经前人写好的解密脚本进行解密即可:  
[https://github.com/ca3tie1/CrackSleeve](https://)
注意在此处我进行了一定的替换,否则会解密失败:
    import common.*;
    import dns.SleeveSecurity;
    import java.io.*;
    import java.util.Enumeration;
    import java.util.jar.JarEntry;
    import java.util.jar.JarFile;
    public class CrackSleeve {
        private static byte[] OriginKey40 = {27, -27, -66, 82, -58, 37, 92, 51, 85, -114, -118, 28, -74, 103, -53, 6 };
        private static byte[] OriginKey41 = {-128, -29, 42, 116, 32, 96, -72, -124, 65, -101, -96, -63, 113, -55, -86, 118 };
        private static byte[] OriginKey42 = {-78, 13, 72, 122, -35, -44, 113, 52, 24, -14, -43, -93, -82, 2, -89, -96};
        private static byte[] OriginKey43 = {58, 68, 37, 73, 15, 56, -102, -18, -61, 18, -67, -41, 88, -83, 43, -103};
        private static byte[] CustomizeKey = null;
        private String DecDir = "Resource/Decode/sleeve";
        private String EncDir = "Resource/Encode/sleeve";
        public static void main(String[] args) throws IOException {
            if (args.length == 0 || args[0].equals("-h") || args[0].equals("--help")) {
                System.out.println("UseAge: CrackSleeve OPTION [key]");
                System.out.println("Options:");
                System.out.println("\tdecode\t\tDecode sleeve files");
                System.out.println("\tencode\t\tEncode sleeve files");
                System.out.println("\tkey\t\tCustomize key string for encode sleeve files");
                System.exit(0);
            }
            String option = args[0];