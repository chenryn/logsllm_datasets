(IDSN)
HN
(k,skHN,IDHN,SQNHN)
Session Initialization
(C0,kUE) ← EncapECIES(PKHN ),store kUE
SUCI ← {C0,SEncECIES(kUE,SUPI)}
(SUCI,IDHN)
(SUCI,IDHN,IDSN)
Parse SUCI as {C0,C},kHN ←DecapECIES(skHN ,C0)
Store kHN ,SUPI ← SDecECIES(kHN ,C)
Figure 6: The Initiation Phase of 5G-AKA(cid:48), where the differences with 5G-AKA are marked by underlines.
only process that includes conditional statements in a UE’s
execution of 5G-AKA. In particular, this command involves
two conditional statements sequentially for checking MAC
and SQNHN respectively, as shown in Figure 5. Next, we dive
into both of them and try to ﬁnd out the root cause of those
linkability attacks.
Conditional Statement on Checking MAC. In order to deter-
mine whether this conditional statement hides the root cause,
an acceptable method is to ﬁnd out whether its condition can
lead to distinguishable behaviors with the same attack vector,
which means the condition can only hold for the target UE,
but fail for the others. The only way that the attacker can
make this happen is to use attack vectors which include valid
messages that are generated with a UE’s long term secret key
k. That is to say, it can only trigger distinguishable behaviors
with attack vectors containing replayed messages as it does
not know k. It also allows the linkability between the target
UE and its previously attended sessions, because the attacker
can determine that the UE who passes the check on MAC is
the same one as in the session where the attack vector comes
from, as they have the same k.
In other words, this conditional statement only checks the
authenticity (and integrity) of a received message, but does
not check its freshness, which leaves space for the attacker
to create attack vectors using valid but unfresh messages. In
5G-AKA, the check on freshness is postponed to the second
conditional statement on checking SQNHN, which raises the
Failure Message Linkability Attack [22, 24] and Sequence
Number Inference Attack [26], or even not performed in the
case of SUCI replay, which raises the Encrypted SUPI Replay
Attack [40, 43]. Our observation shows that these seemingly
different linkability attacks are actually raised by the same
root cause, and can be ﬁxed all at once.
A possible ﬁx for this root cause can be enabling fresh-
ness check in addition to the original purpose of this con-
ditional statement, which enables a UE to reject all attack
vectors, and behave as the other UEs even if these vectors in-
clude messages replayed from its previously attended sessions.
However, designing such a ﬁx is not easy, as the commands,
message ﬂows and data formats of 5G-AKA must be retained
due to the requirement of compatibility.
Conditional Statement on Checking SQNHN. When evalu-
ating the second conditional statement, we assume that the
checking of MAC has been able to reject a replayed message.
With such an assumption, the only way that makes different
UEs behave differently is that the target UE is not synchronous
with the HN but the others are. However, this cannot be trig-
gered by an attacker via intervening the sessions with the
same attack vector, as only messages for the current session
can pass the check on MAC, which eliminates the possibility
that a UE executes following an attack vector. Furthermore,
it also seems impossible for the attacker to link a UE who
behaves inconsistently with a re-synchronization message to
its previously attended sessions, as re-synchronization can
take place due to many reasons such as the out-of-order deliv-
ery and re-transmission of messages. It is hard to determine
whether a UE who re-synchronizes with the HN is exactly
the one that has also re-synchronized with the HN in an old
session, or is the one that has responded with a RES in an old
session, as the other UEs can also be.
Through the above analysis, we ﬁnd a root cause that can
explain all known linkability attacks: The UE uses two sepa-
rate conditional statements to check the validity and freshness
of a message respectively. A possible ﬁx is using one condi-
tional statement to check both the validity and freshness, as
shown in our proposed countermeasure.
Countermeasure. To solve the privacy issue of 5G-AKA, we
propose a countermeasure of using a session key to guarantee
the freshness of message and utilizing an one-pass message
to establish a temporary session key, which is inspired by
traditional security protocols [39, 48, 49]. Interestingly, these
ideas coincident with the concealment of SUPI with ECIES
introduced by TS 33.501, which allows the countermeasure
to be designed in a standard-compatible manner.
The core idea is reusing the symmetric key established by
ECIES as a “session key” to encrypt and decrypt the authen-
tication challenge RAND. The decryption is performed by
3604    30th USENIX Security Symposium
USENIX Association
UE
(k,PKHN,SUPI,SQNUE,kUE)
SN
(IDSN,SUCI)
HN
(k,skHN,IDHN,SQNHN,SUPI,kHN)
RAND $← {0, 1}128,XRES ← f2(k,RAND)
AK ← f5(k,RAND),MAC ← f1(k,SQNHN ,RAND)
AUTN ← {AK ⊕ SQNHN ,MAC}
RAND(cid:48) ← ENC(kHN ,RAND)
HXRES ← HSHA256(RAND(cid:48),XRES)
Kseaf ← KeyDerivation(k,RAND,SQNHN ,IDSN )
SQNHN ← SQNHN + 1
†
(RAND(cid:48),AUTN,HXRES,Kseaf )
(RAND(cid:48),AUTN)
RAND ← DEC(kUE,RAND(cid:48))
Take (RAND,AUTN) as the input for AUTHENITCATE
†
Case i : AUTHENTICATE returns ⊥
(MAC_Failure)
Case ii : AUTHENTICATE returns AUTS
(Sync_Failure, AUTS)
(Sync_Failure,
AUTS, RAND(cid:48), SUCI)
RAND ← DEC(kHN ,RAND(cid:48))
Parse AUTS as {SQNUE ⊕ f∗
Check MAC∗ = f∗
†
5 (k,RAND),MAC∗}
1 (k,SQNUE,RAND)
If this check holds, set SQNHN ← SQNUE + 1
Case iii : AUTHENTICATE returns (RES,Kseaf )
(RES)
HRES ← HSHA256(RAND(cid:48),RES), check HRES = HXRES
(SUCI,RES)
Check RES = XRES
If this check holds, return SUPI
Key Conﬁrmation
(SUPI)
Figure 7: The Challenge-Response Phase of 5G-AKA(cid:48), where the implicit key authentication is expressed by a Key Conﬁrmation
round-trip. We use underlines to denote the differences with 5G-AKA, and † to denote that the encryption and decryption use
AES-128 in ECB mode.
USENIX Association
30th USENIX Security Symposium    3605
the UE before taking RAND as the input for AUTHENTICATE,
which avoids modifying this command. This measure does
not require additional round trip as the key has been estab-
lished and used by both the UE and HN in the encryption and
decryption of SUPI, and only requires minimal modiﬁcation
to TS 33.501 [20]. It is also transparent to an SN, since the
encrypted challenge does not need to be decrypted by the SN,
and can be treated as a challenge in 5G-AKA.
This countermeasure enables freshness checks for the con-
ditional statement on checking MAC beside its original usage,
and thus ﬁx the root cause of linkability attacks. If a UE
receives an encrypted (or plaintext) challenge that does not
belong to the current session, where the challenge can be a re-
played one in the cases of Failure Message Linkability Attack
and Sequence Number Inference Attack, or is generated by an
HN who receives a replayed SUCI in the case of Encrypted
SUPI Replay Attack, the decryption algorithm will ﬁnally out-
put a challenge that is different from the original one, which
can not pass the check on MAC. This is due to the fact that
the challenge is not encrypted by the correct key encapsulated
by the UE in SUCI.
5.2 The Construction of 5G-AKA(cid:48)
We present the detail of 5G-AKA(cid:48) by combining the counter-
measure and 5G-AKA as follows:
The Initiation Phase. In this phase, the UE identiﬁes itself to
the HN with SUCI as in Figure 6. Compared with 5G-AKA,
our protocol only introduces limited modiﬁcation which re-
quires both the UE and HN to store the established shared
keys for the challenge-response phase, where each time a
5G-AKA(cid:48) session is initialized, a fresh kUE (i.e., kHN) is gen-
erated and used. It does not require additional cryptographic
operation for both sides, as the key has been established via
K EM ECIES, and is also transparent to all 5G network speci-
ﬁcations, as the message ﬂow does not change.
The Challenge-Response Phase. In this phase, the involved
components authenticate to each other and establish anchor
keys as shown in Figure 7, where the differences with 5G-
AKA are explained as follows.
First, when the HN generates AV, it additionally encrypts
the authentication challenge with the shared key established at
the initiation phase, and only includes the encrypted one in AV.
In particular, the HN encrypts RAND with AES-128 in elec-
tronic codebook (ECB) mode [34] but not the counter (CTR)
mode, since the length of RAND is 128-bit, and 3GPP only
allocates a length of 128 bit for this message (See TS 24.501,
Section 9.11.3.16 [18] and TS 24.008, Section 10.5.3.1 [16]),
which is just coincident with the length of one block of AES-
128. Any block cipher work mode which raises expansion on
ciphertext requires modiﬁcations on the aforementioned speci-
ﬁcations. Moreover, any manipulation of RAND(cid:48), or receiving
a RAND(cid:48) encrypted with an incorrect key, will eventually fail
the checking on MAC, as the UE only decrypts RAND(cid:48) with
kUE and takes the output, which is different from the one
that is used to generate MAC, as RAND. That is to say, even
though we does not employ authenticated encryption, the UE
will reject modiﬁed RAND(cid:48).
Another modiﬁcation on the HN’s side is the way of calcu-
lating HXRES. Particularly, HXRES is computed by RAND(cid:48)
(i.e., the encrypted RAND) rather than RAND, since HXRES
must be computable by an SN who does not know RAND in
order to verify the UE’s response. This change makes our
measure transparent to the SN, as it can just take RAND(cid:48) as
RAND and execute as in 5G-AKA [20].
Then, the UE needs to decrypt the authentication challenge
before it is taken as an input for AUTHENTICATE. If the en-
crypted challenge is manipulated, replayed, or even honestly
generated by the HN following a different SUCI, the SIM
card will reply with ⊥ implying the check on MAC does not
hold, since the key used by UE to decrypt RAND(cid:48) does not
match the key that encrypts it. Obviously, our approach is
compatible with the AUTHENTICATE command as neither its
inputs or outputs, nor its execution process is changed (See
TS 31.102, Section 7.1 [12]).
Finally, the last necessary modiﬁcation is presented when
the HN checks the re-synchronization message (i.e., AUTS)
sent from a UE. This message is generated by the SIM card
using RAND, but the SN only sends RAND(cid:48) when forwarding
this message. Thus, the HN also needs to decrypt RAND(cid:48) to
RAND before it starts to check AUTS.
Compared with 5G-AKA, our countermeasure only adds
the encryption and decryption of RAND with AES-128, which
almost has no impact on efﬁciency. Furthermore, for practi-
cal usage, we suggest vendors and communication providers
to apply technique measures to extend the out-of-order de-
livery of RAND(cid:48), such as the array scheme presented by TS
33.102 [19], so as to ensure the failure rate due to MAC failure
is acceptable.
5.3 Performance Evaluation
We next evaluate the performance of 5G-AKA(cid:48) and compare
it with 5G-AKA. We focus on the additional time cost raised
by 5G-AKA(cid:48), as 5G-AKA(cid:48) reuses the terms of messages of
5G-AKA and would not raise additional bandwidth cost. In
particular, we run the execution processes of UE and HN of
both protocols while considering every possible cases.
We use a workstation to run the process of a HN and a
mobile phone for a UE. To be more speciﬁc, we use a Mac-
Book 2019 workstation to run the process of an HN, and an
iPhone 7 plus to run the process of a UE. The workstation
equips with an Intel Core-i5 CPU which has 4 cores running
at 2.4Ghz each, and runs a macOS Catalina 10.15.3 operating
system. The mobile phone has an Apple A10 CPU which
has 2 cores running at 2.34Ghz each, and runs an iOS 13.3
operating system. Note that we run the experiments with the
Application Processor (AP) of the mobile device but not the
3606    30th USENIX Security Symposium
USENIX Association
5G-AKA
5G-AKA(cid:48)
time+
UE1
13124.73
13128.65
HN1
835.10
835.27
UE2
13158.29
13162.44
HN2
853.44
853.71
UE3
13132.40
13136.25
HN3
847.46
847.64
3.92 (0.03%)
0.17 (0.02%)
4.15 (0.03%)
0.27 (0.03%)
3.85 (0.03%)
0.18 (0.02%)
Table 3: The performance evaluation of 5G-AKA(cid:48). The superscripts 1,2 and 3 mean that the UE and HN run in case i, ii, and iii
shown in Figure 4 and Figure 7. The time+ line shows the additional time costs and their ratios compared with 5G-AKA.
Baseband Processor (BP), which is enough for the purpose
of comparing the relative difference between 5G-AKA and
5G-AKA(cid:48). We use the Crypto++ cryptographic library2 to
implement ECIES with the secp256r1 curve, where we mod-
ify the Encryptor.Encrypt() and Decryptor.Decrypt()
interfaces such that they can support the export and import of
the shared keys derived by ECIES (i.e., kHN and kUE). Further-
more, we use SHA-256 with different preﬁxes as {f}5
i=1, f∗
1
and f∗
5. Our "HN" program is implemented in C++ and com-
plied with clang 11.0.3 with -O2 and -std=c++11 ﬂags. Our
"UE" program is implemented in Objective-C and C++, which
is complied and deployed to the test device with Xcode 11.4.
Both programs implement 5G-AKA and 5G-AKA(cid:48), where
the implementations of 5G-AKA(cid:48) only involve the modiﬁ-
cations of less than 20 Lines of Code (LoC) based on the
implementations of 5G-AKA. Interestingly, the experimental
implementations also imply that the migration from 5G-AKA
to 5G-AKA(cid:48) can be achieved via only modifying a few LoCs
for both endpoints, which makes our proposal easy to be de-