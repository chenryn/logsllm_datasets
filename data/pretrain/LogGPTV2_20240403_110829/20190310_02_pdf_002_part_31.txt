### 3.9.5 Closing a Cursor Variable

To release the result set associated with a cursor variable, use the `CLOSE` statement as described in Section 3.8.4. Unlike static cursors, a cursor variable does not need to be closed before it can be reopened. However, the result set from the previous open operation will be lost.

Here is an example of a procedure that uses a cursor variable and includes the `CLOSE` statement:

```sql
CREATE OR REPLACE PROCEDURE emp_by_dept (
    p_deptno emp.deptno%TYPE
)
IS
    emp_refcur SYS_REFCURSOR;
    v_empno emp.empno%TYPE;
    v_ename emp.ename%TYPE;
BEGIN
    OPEN emp_refcur FOR SELECT empno, ename FROM emp WHERE deptno = p_deptno;
    
    DBMS_OUTPUT.PUT_LINE('EMPNO ENAME');
    DBMS_OUTPUT.PUT_LINE('----- -------');
    
    LOOP
        FETCH emp_refcur INTO v_empno, v_ename;
        EXIT WHEN emp_refcur%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE(v_empno || ' ' || v_ename);
    END LOOP;
    
    CLOSE emp_refcur;
END;
```

**Output when the procedure is executed:**

```plaintext
EXEC emp_by_dept(20);

EMPNO ENAME
----- -------
7369 SMITH
7566 JONES
7788 SCOTT
7876 ADAMS
7902 FORD
```

### 3.9.6 Usage Restrictions

The following are restrictions on the usage of cursor variables:

- **Comparison Operators:** Comparison operators (e.g., `=`, `!=`, `IS NULL`, `IS NOT NULL`) cannot be used to test cursor variables.
- **Null Assignment:** A cursor variable cannot be assigned a `NULL` value.
- **Database Storage:** The value of a cursor variable cannot be stored in a database column.
- **Interchangeability:** Static cursors and cursor variables are not interchangeable. For example, a static cursor cannot be used in an `OPEN FOR` statement.

The table below shows the permitted parameter modes for a cursor variable used as a procedure or function parameter, depending on the operations performed within the procedure or function.

| Operation | IN  | IN OUT | OUT |
|-----------|-----|--------|-----|
| OPEN      | No  | Yes    | No  |
| FETCH     | Yes | Yes    | No  |
| CLOSE     | Yes | Yes    | No  |

For example, if a procedure performs all three operations (`OPEN FOR`, `FETCH`, and `CLOSE`) on a cursor variable declared as the procedure’s formal parameter, then that parameter must be declared with the `IN OUT` mode.

### 3.9.7 Examples

#### 3.9.7.1 Returning a REF CURSOR From a Function

In the following example, the cursor variable is opened with a query that selects employees with a given job. The cursor variable is specified in the function’s `RETURN` statement, making the result set available to the caller of the function.

```sql
CREATE OR REPLACE FUNCTION emp_by_job (p_job VARCHAR2)
RETURN SYS_REFCURSOR
IS
    emp_refcur SYS_REFCURSOR;
BEGIN
    OPEN emp_refcur FOR SELECT empno, ename FROM emp WHERE job = p_job;
    RETURN emp_refcur;
END;
```

This function is invoked in the following anonymous block by assigning the function’s return value to a cursor variable declared in the anonymous block’s declaration section. The result set is fetched using this cursor variable and then closed.

```sql
DECLARE
    v_empno emp.empno%TYPE;
    v_ename emp.ename%TYPE;
    v_job emp.job%TYPE := 'SALESMAN';
    v_emp_refcur SYS_REFCURSOR;
BEGIN
    DBMS_OUTPUT.PUT_LINE('EMPLOYEES WITH JOB ' || v_job);
    DBMS_OUTPUT.PUT_LINE('EMPNO ENAME');
    DBMS_OUTPUT.PUT_LINE('----- -------');
    
    v_emp_refcur := emp_by_job(v_job);
    
    LOOP
        FETCH v_emp_refcur INTO v_empno, v_ename;
        EXIT WHEN v_emp_refcur%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE(v_empno || ' ' || v_ename);
    END LOOP;
    
    CLOSE v_emp_refcur;
END;
```

**Output when the anonymous block is executed:**

```plaintext
EMPLOYEES WITH JOB SALESMAN
EMPNO ENAME
----- -------
7499 ALLEN
7521 WARD
7654 MARTIN
7844 TURNER
```

#### 3.9.7.2 Modularizing Cursor Operations

The following example illustrates how various operations on cursor variables can be modularized into separate programs.

**Procedure to Open a Cursor Variable for All Employees:**

```sql
CREATE OR REPLACE PROCEDURE open_all_emp (
    p_emp_refcur IN OUT SYS_REFCURSOR
)
IS
BEGIN
    OPEN p_emp_refcur FOR SELECT empno, ename FROM emp;
END;
```

**Procedure to Open a Cursor Variable for Employees in a Given Department:**

```sql
CREATE OR REPLACE PROCEDURE open_emp_by_dept (
    p_emp_refcur IN OUT SYS_REFCURSOR,
    p_deptno emp.deptno%TYPE
)
IS
BEGIN
    OPEN p_emp_refcur FOR SELECT empno, ename FROM emp WHERE deptno = p_deptno;
END;
```

**Function to Open a Cursor Variable for Departments:**

```sql
CREATE OR REPLACE FUNCTION open_dept (
    p_dept_refcur IN OUT SYS_REFCURSOR
) RETURN SYS_REFCURSOR
IS
    v_dept_refcur SYS_REFCURSOR;
BEGIN
    v_dept_refcur := p_dept_refcur;
    OPEN v_dept_refcur FOR SELECT deptno, dname FROM dept;
    RETURN v_dept_refcur;
END;
```

**Procedure to Fetch and Display Employee Data:**

```sql
CREATE OR REPLACE PROCEDURE fetch_emp (
    p_emp_refcur IN OUT SYS_REFCURSOR
)
IS
    v_empno emp.empno%TYPE;
    v_ename emp.ename%TYPE;
BEGIN
    DBMS_OUTPUT.PUT_LINE('EMPNO ENAME');
    DBMS_OUTPUT.PUT_LINE('----- -------');
    
    LOOP
        FETCH p_emp_refcur INTO v_empno, v_ename;
        EXIT WHEN p_emp_refcur%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE(v_empno || ' ' || v_ename);
    END LOOP;
END;
```

**Procedure to Fetch and Display Department Data:**

```sql
CREATE OR REPLACE PROCEDURE fetch_dept (
    p_dept_refcur IN SYS_REFCURSOR
)
IS
    v_deptno dept.deptno%TYPE;
    v_dname dept.dname%TYPE;
BEGIN
    DBMS_OUTPUT.PUT_LINE('DEPT DNAME');
    DBMS_OUTPUT.PUT_LINE('---- ---------');
    
    LOOP
        FETCH p_dept_refcur INTO v_deptno, v_dname;
        EXIT WHEN p_dept_refcur%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE(v_deptno || ' ' || v_dname);
    END LOOP;
END;
```

**Procedure to Close a Cursor Variable:**

```sql
CREATE OR REPLACE PROCEDURE close_refcur (
    p_refcur IN OUT SYS_REFCURSOR
)
IS
BEGIN
    CLOSE p_refcur;
END;
```

**Anonymous Block to Execute the Programs:**

```sql
DECLARE
    gen_refcur SYS_REFCURSOR;
BEGIN
    DBMS_OUTPUT.PUT_LINE('ALL EMPLOYEES');
    open_all_emp(gen_refcur);
    fetch_emp(gen_refcur);
    DBMS_OUTPUT.PUT_LINE('****************');
    
    DBMS_OUTPUT.PUT_LINE('EMPLOYEES IN DEPT #10');
    open_emp_by_dept(gen_refcur, 10);
    fetch_emp(gen_refcur);
    DBMS_OUTPUT.PUT_LINE('****************');
    
    DBMS_OUTPUT.PUT_LINE('DEPARTMENTS');
    fetch_dept(open_dept(gen_refcur));
    DBMS_OUTPUT.PUT_LINE('*****************');
    
    close_refcur(gen_refcur);
END;
```

**Output from the anonymous block:**

```plaintext
ALL EMPLOYEES
EMPNO ENAME
----- -------
7369 SMITH
7499 ALLEN
7521 WARD
7566 JONES
7654 MARTIN
7698 BLAKE
7782 CLARK
7788 SCOTT
7839 KING
7844 TURNER
7876 ADAMS
7900 JAMES
7902 FORD
7934 MILLER
****************
EMPLOYEES IN DEPT #10
EMPNO ENAME
----- -------
7782 CLARK
7839 KING
7934 MILLER
****************
DEPARTMENTS
DEPT DNAME
---- ---------
10 ACCOUNTING
20 RESEARCH
30 SALES
40 OPERATIONS
*****************
```

### 3.9.8 Dynamic Queries With REF CURSORs

Advanced Server also supports dynamic queries via the `OPEN FOR USING` statement. A string literal or string variable is supplied in the `OPEN FOR USING` statement to the `SELECT` command.

**Syntax:**

```sql
OPEN name FOR dynamic_string [ USING bind_arg [, bind_arg_2 ] ...];
```

- `name` is the identifier of a previously declared cursor variable.
- `dynamic_string` is a string literal or string variable containing a `SELECT` command (without the terminating semicolon).
- `bind_arg, bind_arg_2...` are bind arguments that pass variables to corresponding placeholders in the `SELECT` command. Placeholders are identifiers prefixed by a colon character.

**Example of a Dynamic Query Using a String Literal:**

```sql
CREATE OR REPLACE PROCEDURE dept_query
IS
    emp_refcur SYS_REFCURSOR;
    v_empno emp.empno%TYPE;
    v_ename emp.ename%TYPE;
BEGIN
    OPEN emp_refcur FOR 'SELECT empno, ename FROM emp WHERE deptno = 30 AND sal >= 1500';
    
    DBMS_OUTPUT.PUT_LINE('EMPNO ENAME');
    DBMS_OUTPUT.PUT_LINE('----- -------');
    
    LOOP
        FETCH emp_refcur INTO v_empno, v_ename;
        EXIT WHEN emp_refcur%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE(v_empno || ' ' || v_ename);
    END LOOP;
    
    CLOSE emp_refcur;
END;
```

**Output when the procedure is executed:**

```plaintext
EXEC dept_query;

EMPNO ENAME
----- -------
7499 ALLEN
7698 BLAKE
7844 TURNER
```

**Example of a Dynamic Query Using Bind Arguments:**

```sql
CREATE OR REPLACE PROCEDURE dept_query (
    p_deptno emp.deptno%TYPE,
    p_sal emp.sal%TYPE
)
IS
    emp_refcur SYS_REFCURSOR;
    v_empno emp.empno%TYPE;
    v_ename emp.ename%TYPE;
BEGIN
    OPEN emp_refcur FOR 'SELECT empno, ename FROM emp WHERE deptno = :dept AND sal >= :sal' USING p_deptno, p_sal;
    
    DBMS_OUTPUT.PUT_LINE('EMPNO ENAME');
    DBMS_OUTPUT.PUT_LINE('----- -------');
    
    LOOP
        FETCH emp_refcur INTO v_empno, v_ename;
        EXIT WHEN emp_refcur%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE(v_empno || ' ' || v_ename);
    END LOOP;
    
    CLOSE emp_refcur;
END;
```

**Output when the procedure is executed:**

```plaintext
EXEC dept_query(30, 1500);

EMPNO ENAME
----- -------
7499 ALLEN
7698 BLAKE
7844 TURNER
```

**Example of a Dynamic Query Using a String Variable:**

```sql
CREATE OR REPLACE PROCEDURE dept_query (
    p_deptno emp.deptno%TYPE,
    p_sal emp.sal%TYPE
)
IS
    emp_refcur SYS_REFCURSOR;
    v_empno emp.empno%TYPE;
    v_ename emp.ename%TYPE;
    p_query_string VARCHAR2(100);
BEGIN
    p_query_string := 'SELECT empno, ename FROM emp WHERE deptno = :dept AND sal >= :sal';
    OPEN emp_refcur FOR p_query_string USING p_deptno, p_sal;
    
    DBMS_OUTPUT.PUT_LINE('EMPNO ENAME');
    DBMS_OUTPUT.PUT_LINE('----- -------');
    
    LOOP
        FETCH emp_refcur INTO v_empno, v_ename;
        EXIT WHEN emp_refcur%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE(v_empno || ' ' || v_ename);
    END LOOP;
    
    CLOSE emp_refcur;
END;
```

**Output when the procedure is executed:**

```plaintext
EXEC dept_query(20, 1500);

EMPNO ENAME
----- -------
7566 JONES
7788 SCOTT
7902 FORD
```

---

**Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved.**

**Database Compatibility for Oracle® Developers Guide**