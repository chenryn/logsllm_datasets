112,570
-
that pretend to provide bank service for users without setting
any bonus—this violates our deﬁnition of honeypot in pro-
viding bonus. Note that interestingly, we also ﬁnd some false
positives in HoneyBadger’s dataset [16]: Speciﬁcally, Honey-
Badger marked 15 contracts as honeypots but indeed users are
capable of gaining proﬁts from them. Our manual veriﬁcation
shows that 13 of them are real lottery and roulette contracts
and two are incorrectly-conﬁgured honeypots in which users
can guess the correct password to win.
5 Results
In this section, we discuss our manually-veriﬁed measure-
ment results as summarized in the true positives part
of Table 2.
In the spirit of open science, we openly
release our full results, i.e., all the adversarial transac-
tions, in this URL (https://drive.google.com/open?
id=1xLssDxYWyKFCwS5HUrQaSex0uwJRSvDi).
In the rest of the section, we ﬁrst present real-world adver-
sarial transactions against vulnerable contracts in Section 5.1
and then real-world defenses in Section 5.2.
5.1 Real-world Adversarial Transactions
In this subsection, we present our estimation of ether or to-
ken losses of adversarial transactions that we ﬁnd in the
Ethereum blockchain. Here is our methodology of estimating
such losses based on different attack categories.
• Reentrancy, integer overﬂow and airdrop hunting: We get
the raw data of ether/token losses by adding up the absolute
proﬁts and subtracting the cost of the attacker for each
transaction.
• Call injection: The call injection attacks we ﬁnd lead to the
ownership change of contracts. Our estimation is to sum
up all the ethers or tokens transferred by attackers after the
ownership changes.
• Honeypot: We sum up all the ethers transferred by victims
to the honeypot across multiple adversarial transactions.
• Call-after-destruct: We sum up all the ethers transferred to
the destructed contracts.
We then estimate the monetary losses based on the his-
torical price of ether on Etherscan [13] and tokens on
CoinGecko [11]. Note that we are only able to collect the
historical price of 13 tokens among all the 259 involved to-
kens: The value of the rest tokens is considered as zero in our
conservative estimation.
Next, we present our loss estimation from two aspects:
well-known incidents that are widely reported in the news and
other less-known incidents.
5.1.1 Well-known Attack Incidents
In this part, we describe three well-known attack incidents
that happen in the history of Ethereum ecosystem and their
corresponding losses in Table 5. We categorize all the losses
into two parts: direct and actual. Direct loss means that the
number of ether loss due to all the adversarial transactions
against the vulnerability; actual loss means the amount after
deducting the ethers that are saved due to certain tactics—
e.g., hard fork and white hat hacking—deployed during the
attack. We will describe more details on white hat hacking in
Section 6 and only describe the numbers here.
• TheDAO. TheDAO, maybe the most famous attack in
Ethereum history, is a reentrancy attack. The total amount
of conﬁrmed adversarial transactions against TheDAO con-
tract is huge, equaling 11.8 million ethers. However, be-
cause the community adopts a hard fork and many white
USENIX Association
29th USENIX Security Symposium    2801
Table 5: Ether and monetary losses of well-known incidents.
Incident
# contract # tx
Loss
Direct (Ether / $)
Actual (Ether / $)
TheDAO
Parity Wallet Hack
SpankChain
1
622
1
1,84811,829,473 / $160,146,744 529,041 / $6,213,195
2,710 204,851 / $40,700,890 154,999 / $31,009,177
8
165 / $37,321
165 / $37,321
* Note that although the actual ether loss of Parity Wallet Hack is less than
the one of TheDAO, the monetary loss is higher due to the difference in
historical ether price.
hat hackers try to save TheDAO, the actual loss is rela-
tively small. Speciﬁcally, we have observed that 7.6 mil-
lion ethers are saved via white hat hacking. The attackers
have transferred 3.6 million ethers to the DarkDAO [1],
but all the ethers are mandatorily transferred to Withdraw-
DAO [2] due to the hard fork [24] in July 2016. The rest
(i.e., 529,041 ethers), excluding these saved by hard fork
and white hat hacking, is considered as the actual loss.
• Parity Wallet Hack. Parity Wallet Hack is a call injection
attack, in which the vulnerability is in the Parity Wallet
library used by many other contracts. We have observed
that 622 contracts using Parity Wallet have been attacked,
leading to a total direct loss of around 200K ethers. Similar
to TheDAO, whitehat hackers have also saved some losses
and the actual loss, according to our analysis, is around
155K ethers.
• SpankChain. SpankChain is another reentrancy attack tar-
geting the SpankChain contract, a popular ERC20 token
with a market capitalization of $6.3 million in August 2019.
The loss is only 165 ethers ($37,321), a relatively small
number compared to prior incidents. The reason is that
SpankChain adopts multiple pluggable modules and the
adversary is only able to compromise one of its many pay-
ment contracts, leading to a 165 ether loss. We did not see
any saving tactics that have been adopted for SpankChain
and therefore the actual and direct losses are the same.
5.1.2 Attacks against Other Vulnerable Contracts
In this part, we describe adversarial transactions that target
other contracts beyond well-known incidents in Table 6. Air-
drop hunting is the largest with $322K monetary loss due to
token loss. The loss of honeypot contracts is relatively small,
which only has $80K. We estimate the loss of integer over-
ﬂow as zero, because we could not ﬁnd any historical price of
tokens involved in adversarial transactions targeting integer
overﬂow. We also break down the losses into ether and token
as shown in Table 6. Integer overﬂow and airdrop hunting
do not cause any ether loss due to the nature of the attack;
on the contrary, both attacks cause a huge amount of token
loss. Reentrancy attacks also cause some token loss, relatively
smaller than integer overﬂow and airdrop hunting. Honeypot
and call-after-destruct have the least ether loss.
Next, we break down adversarial transactions into those
against known and zero-day vulnerabilities separately.
Table 6: A summary of our results in terms of vulnerable
contract (vct), conﬁrmed adversarial transactions (atx) and
total loss. Note that we exclude three most famous incidents
in Table 5 from this table.
Attacks
Known
Zero-day
Total Loss
# contract # atx # contract
# atx
ether / token monetary
call injection
reentrancy
integer overﬂow
airdrop hunting
call-after-destruct
honeypot
-
18
34
-
154
90
-
56
167
-
1,547
148
-
6
16
197
74
51
-
36
113
214
-
100,278
- / -
- / 7.79E+79
- / 3.59E+28
472 / -
427 / -
6,080 / 5.01E+23 $142,945
-
-
$322,010
$100,102
$80,866
Total
344
285
1,904
100,641 6,979 / 7.79E+79 $645,848
* atx: Adversarial Transactions (we mean conﬁrmed atx in this table and
skip “conﬁrmed” due to space limits), “-”: we do not observe any in our
analysis or cannot estimate. We cannot estimate the monetary loss for
integer overﬂow because we cannot ﬁnd any historical prices of tokens
involved in the adversarial transactions.
Vulnerable Contracts Reported by Prior Works We ﬁrst
describe adversarial transactions targeting contracts reported
by prior works. As shown in Table 4 and 6, prior works have
found 112,570 vulnerable contracts and 298 of these contracts
are indeed attacked in real-world, i.e., with 2,061 adversarial
transactions in total. This shows a gap between what has been
attacked and what has been detected by prior work.
Call-after-destruct has the highest number (i.e., 154) of
attacked contracts and a considerable amount (i.e., 90) of
honeypots also attract real-world victims. We did not report
any call injection because all the observed call injections
belong to Parity Wallet Hack; similarly, no prior works have
found any airdrop hunting, thus all are categorized as zero-
day.
Zero-day Vulnerable Contracts We describe several zero-
day vulnerabilities that are not detected or reported by prior
works. Our methodology of verifying zero-day vulnerabilities
is in four steps as follows. First, we adopt the same six datasets
with vulnerable contracts as shown in Table 4 to exclude
known vulnerabilities. For reentrancy, we also check and
exclude the new patterns found by Sereum paper. Second, we
execute existing open-source tools including Mythril, Maian,
Securify and teEther to exclude those that can be detected.
Third, we check the CVE database with keywords Smart
Contract and Ethereum to exclude these that are available
in the database. Lastly, we exclude the vulnerable contracts
that have been publicly reported on their websites if available.
Note that as our obligation of responsible disclosure, we
have reported all the zero-day vulnerabilities to the contract
authors if available online. Speciﬁcally, we search for authors’
contact information via three ways: (i) source code and com-
ments, (ii) contract main page on Etherscan, and (iii) Google
search with the contract address and name. Finally, we have
collected the authors’ contact information of 42 vulnerable
contracts (out of 285 zero-day vulnerable contracts) and com-
municated to them regarding the found vulnerabilities. At
the same time, we have also reported all the reentrancy and
2802    29th USENIX Security Symposium
USENIX Association
integer overﬂow zero-day vulnerabilities to CVE. As CVE
does not maintain a vulnerability category for airdrop hunting,
we have requested to create a new category.
Our results, i.e., the total number of zero-day vulnerable
contracts and corresponding transactions, are shown in the
“zero-day attacks” column of Table 6. As stated, because
no prior works have studied airdrop hunting, almost all the
airdrop hunting vulnerabilities except for one reported in-
cident [7] are categorized as zero-day. We also ﬁnd many
zero-days for well-known vulnerabilities and describe them
below.
• Zero-day Reentrancy. We ﬁnd six zero-day reentrancy at-
tacks. The main reasons are twofold. First, these zero-day
vulnerable contracts adopt function parameters, objects or
even another contract to store contract states rather than
basic data types like integer. Existing works—no matter
static ones like Securify and Mythril or dynamic ones like
Sereum—will miss such state updates due to the inaccuracy
in the dataﬂow analysis. Second, these zero-days are cross-
function reentrancy, which cannot be detected by Oyente
and ZEUS considering only same-function reentrancy.
• Zero-day Integer Overﬂow. We ﬁnd 16 zero-day in-
teger overﬂow vulnerabilities because none of prior
works has studied integer overﬂows in token contracts
with multi-transfer functionality, e.g., batchTransfer and
multiTransfer functions as an extension to ERC20 stan-
dard. Existing works, i.e., Mythril and ZEUS, which claim
to check every arithmetic operation, have coverage prob-
lem. Particularly, Mythril leverages heuristics to locate all
the functions based on known signatures, which do not
contain the aforementioned new multi-transfer functions.
ZEUS does not model the Ethereum state, thus being un-
able to reach these vulnerable functions.
• Zero-day Honeypot. We ﬁnd 51 zero-day honeypots with
proﬁts, i.e., those that are missed by HoneyBadger, the only
honeypot detection work. There are three major reasons.
First, we ﬁnd 42 zero-day honeypots due to incomplete
signatures of HoneyBadger. 38 zero-days are hidden state
update honeypots according to HoneyBadger’s classiﬁca-
tion. In those honeypots, the owner, i.e, the adversary, pays
to change the honeypot password and then withdraws the
paid money, but HoneyBadger’s signature assumes that a
honeypot owner needs to call a password change function
without paying any ethers. The rest four zero-days are hid-
den transfer honeypots according to HoneyBadger. The
misdetection is because those contracts put the logic of
preventing victims from transferring money in an invisible
long line as opposed to transferring the bait out as modeled
by HoneyBadger. Second, we also ﬁnd a new class of hon-
eypots with two contracts, called racing time, which attract
users to save ethers with high interest but only leave a short,
or even no time window to withdraw. Lastly, we also ﬁnd
seven honeypots with patterns known to HoneyBadger but
out of their detection window.
• Zero-day Call-after-destruct. We ﬁnd 74 zero-day call-
after-destruct vulnerabilities: The major reason is that many
contract destructions are initiated by the owners, which are
not modeled by prior works like Maian and teEther. How-
ever, other contracts can still call the destructed contracts
on the chain despite that the owner destructs it. Destructed
contracts can be divided into two categories. First, users
are unaware of the contact destruction and continue to par-
ticipate, thus leading to a loss of money. Second, when a
library contract is destructed, many contracts that rely on
the library may continue to pay for their services.
5.2 Real-world Defenses against Adversarial Transac-
tions and Evasions against Defenses
In this subsection, we present all the defenses found by our
work and their deployments in real-world contracts. Our
dataset comes from 5.8 million open-source contracts from
Etherscan, which can be reduced to 57K unique contracts.
Once we recognize that a defense is deployed by a contract,
we evaluate the effectiveness of the defense in terms of pre-
vented and successful adversarial transactions. Here are the
results. Our analysis ﬁnds six defense classes with attempted
adversarial transactions as shown in Table 7. Without loss
of generality, we also collect defense libraries from popular
secure smart contract library OpenZeppelin [18] and ﬁnd that
all its defenses are already included in our results. Now let us
look at the details of each defense in terms of prevented and
successful adversarial transactions.
• onlyOwner.
onlyOwner is a Solidity modiﬁer that
checks whether a function caller is the contract owner
so as to prevent some over-privileged operations, such as
changeOwner (which literally changes the contract owner)
and mint (which changes the current supply of token).
onlyOwner is a widely-adopted defense used by 2,148,200
contracts, because onlyOwner is a general defense that
prevents any privilege escalation attacks.
In practice, we did not observe any adversarial transactions
that are prevented directly by onlyOwner. The likely rea-
son is that adversaries will not launch an attack given the
existence of onlyOwner. We do observe 2,691 transactions
that evade onlyOwner: All such transactions are exploiting
the Parity Wallet library vulnerability. Particularly, the ad-
versary circumvents the onlyOwner defense by changing
the contract owner using a call injection vulnerability.
• isHuman or isContract. This defense checks the code
size of a contract to decide whether the caller is a human
or a contract, which serves as a bot detection purpose. The
intuition is that the code size of a human is zero and the
one of a contract is not. This defense is deployed by 21,672
contracts: 36 are airdrop token contracts and the rest in-
clude Fomo3D-like [8] ones that reward participants for
guessing a correct secret number and other token contracts
which handle contract and human invocations separately.
USENIX Association
29th USENIX Security Symposium    2803
Defense
onlyOwner
isHuman
isContract
anotherIsHuman
anotherIsContract
msg.sender
state variable owner
extcodesize()
tx.origin
msg.sender
2,148,200
privilege escalation∗
21,672
airdrop hunting
3,416
2,505
952
airdrop hunting