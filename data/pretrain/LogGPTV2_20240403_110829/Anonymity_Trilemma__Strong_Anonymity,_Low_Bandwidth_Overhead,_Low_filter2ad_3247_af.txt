(cid:7)
(cid:6)
(cid:7)
(cid:6)
K
c
K
c
K
c
2
118
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:37:11 UTC from IEEE Xplore.  Restrictions apply. 
IX. RECIPIENT ANONYMITY
We derive impossibility results for recipient anonymity anal-
ogous to our results for sender anonymity via the same strategy
we employed in the previous sections. In this case, since
we are considering recipient anonymity, we assume only one
(cid:2) users in R. Here, the adversary is naturally
sender in S, and N
not informed about the delivery of the challenge message by a
recipient, but of the sending of the challenge message by the
sender. Moreover, instead of ignoring all internally generated
messages in Claim 2 we ignore all
internally terminating
messages. Note that this gives β a slightly different ﬂavor.
Synchronized Users. We slightly tweak the user distribution
to suit
the deﬁnition of recipient anonymity. We assume
(cid:2) rounds, exactly
that all the input messages come within N
one message per round, following a random permutation
that assigns one round to each recipient. In a given round,
the sender sends a message to the assigned recipient. Then,
the protocol decides when to deliver the message to the
recipient, but not delaying more than (cid:4) rounds. Let f RA
β (x) =
. Then we get that no protocol Π
min
∈ M can provide δ-recipient anonymity in the following cases:
(cid:2)
(x+(cid:3))+(x+(cid:3))βN
(cid:3)(cid:3)
(cid:2)
(cid:2)
1,
N
(cid:2)
• Without compromisation: δ  c ≥ (cid:4): 4(cid:4)β  (cid:4) > c: 4((cid:4) − c)β  0, no protocol can achieve strong recipient
anonymity if 2(cid:4)p < 1 − (η), where (η) is a non-negligible
function. For a detailed recipient-anonymity analysis, we refer
the readers to the extended version [33].
X. IMPLICATIONS
To put our result into perspective, we discuss whether our
trilemma excludes strong anonymity for a few AC protocols
119
from the literature. More precisely, this section exemplarily
applies the results from Theorem 2 and Theorem 7,
i.e.,
with synchronized and unsynchronized user distributions and
a global network-level, non-compromising adversary. We use
both results since for some AC protocols (e.g., DC-nets [15])
the synchronized user distribution is more accurate and for
other protocols (e.g., Tor [10]) the unsynchronized user dis-
tribution is more accurate. Our constraints mark an area on
a 2D graph (see Figure 6) with latency overhead (x-axis)
versus bandwidth overhead (y-axis) where strong anonymity is
impossible. As the latency of some AC protocols depends on
system parameters and we want to place the protocols in a 2D
graph, we carefully choose system parameters and make a few
simplifying assumptions, which are subsequently described.
This section is solely intended to put our impossibility result
into perspective. It is not meant and not qualiﬁed to be a
performance and scalability comparison of the discussed AC
protocols. Table I in the appendix summarizes bounds on the
bandwidth β and latency overhead (cid:4) (in the sense of this work).
Technically, this section considers translations of AC pro-
tocols into our protocol model. As these translations do not
provide any additional insights, we do not present the full
translated protocols but only the abstraction steps. We abstract
away the cryptographic instantiation of messages including
the bandwidth overhead they introduce over the plaintext. We
assume an upper bound on the latency of the protocol and
are oblivious to server-side noise (see Claim 2). Moreover,
recall that we are only interested in the question whether our
trilemma excludes strong anonymity for the ten AC protocols
from the literature; hence, we consider the upper bound on the
latency and bandwidth overhead for deterministic latency. For
randomized latency, such as Loopix [24], we list for simplicity
the expected delay as the latency bound.
Low-latency protocols such as Tor [10], Hornet [49], and
Herd [25] are low-latency AC protocols, i.e., they immediately
forward messages. While Tor and Hornet do not produce
asymptotically more than a constant amount of both bandwidth
overhead and latency overhead and thus cannot provide strong
anonymity, Herd produces dummy trafﬁc linearly proportional
to the number of users (bandwidth overhead β ∈ θ(N/N)),
thus the trilemma does not exclude strong anonymity for Herd.
Riposte [50] uses secure multiparty computation and a
variant of PIR to implement an anonymous bulletin board.
Riposte operates in epochs and for each epoch the set of users
is public. Hence, Riposte is expected to be run with long
epochs to maximize the number of users that participate in
an epoch, which leads us to estimating the latency overhead
to be (cid:4) ∈ θ(N ). To counter trafﬁc analysis attacks, Riposte
clients send constant dummy trafﬁc, resulting in a bandwidth
overhead of β ∈ θ(N/N). Thus, the trilemma does not exclude
strong anonymity for Riposte.
Vuvuzela [20] is a mix-net that is tailored towards mes-
sengers. Clients communicate by deposing their encrypted
messages in one of the mix net nodes. To achieve strong
resistance against compromised servers, Vuvuzela takes a path
through all servers, resulting in a latency overhead of (cid:4) ∈ θ(K)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:37:11 UTC from IEEE Xplore.  Restrictions apply. 
Herd
DC-Net
Dissent-AT
DDDiiDDii
ttt AAAAAAt AAAAATTTT
Dicemix Vuvuzela
ll
Riﬄe
VV
2(cid:4)β ≤ 1 −
1
poly(η)
Riposte
β
1
1
log(η)
1√
η
1
poly(η)
Loopix
Hornet
Tor
Threshold Mix
Threshold Mix
sec
1
log(η)
√
η
poly(η)
(cid:4)
Fig. 6. Asymptotic latency overhead ((cid:2)) and bandwidth overhead (β) together
with the “area of impossibility” where 2(cid:2)β ≤ 1− (η). We portray protocols
as dots depending on their choices for (cid:2) and β. Technically, if we use
Theorem 7, we β is replaced by p = β+p(cid:3), where p(cid:3) is the rate at which users
send messages. This graph assumes N is ca. poly(η), the number of nodes
K is ca. log η. The threshold for Threshold Mix T = 1 and for Threshold
Mixsec T = N = poly(η). In the graph, both the axes are approximately
in logarithmic scale. (For a more accurate visual representation we refer the
readers to Appendix C and [51].)
(for K servers). Additionally, Vuvuzela utilizes constant trafﬁc,
leading to a bandwidth overhead of β ∈ θ(N/N), and has the
potential for strong anonymity.
Rifﬂe [21] uses a veriﬁable mix-net. Just as Vuvuzela, Rifﬂe
also chooses paths that traverse all K servers, leading to (cid:4) ∈
θ(K) and if we assume K ∈ θ(log(η)), we get (cid:4) ∈ θ(log(η)).
We assume that the clients send dummy trafﬁc up to a constant
rate (depending on the user’s sending rate p(cid:2)), so we have
β ∈ θ(N/N) and the potential for strong anonymity.
In a threshold mix net, each of the K mix servers waits
until it received up to a threshold T many messages before
relaying the messages to the next mix, resulting in (cid:4) ∈ θ(T ×
K). Threshold mixes [14] do not provide strong anonymity
unless their threshold T is of the order of the number of users
N. As such a large threshold are impractical for a large number
of users, we judge it impossible to achieve strong anonymity
for practical of Threshold mixes.
Loopix [24] is a mix net that combines exponentially dis-
tributed delays at each mix-node and dummy messages from
each user. Ignoring so-called loop messages (meant to counter
active attacks), Loopix naturally enforces our unsynchronised
user distribution: the rate at which Loopix clients send mes-
sages is the sum of a dummy-message rate (β) and a payload
message rate (p(cid:2)
√
), which are system parameters. We assume
√
K
that the path lengths in Loopix’ stratiﬁed topology is
with the number of nodes K ∈ θ(log(η)). If β + p(cid:2) ≥ 1/
η,
and if every hop introduces an expected delay of (cid:4)(cid:2) ≥ √
η√
√
K ,
K × (cid:4)(cid:2), in particular
η × √
the expected latency overhead is (cid:4) =
(cid:4) ∈ θ(
+ β)(cid:4) = 1√
η = 1 and the
trilemma does not exclude strong anonymity for Loopix.
(η)). We get (p(cid:2)
(cid:13)
In AC protocols based on DC-nets [15], [18] each party
broadcasts either a dummy or real message in every round
to every other party. As our bandwidth overhead only counts
dummy-message rates, it does not capture the broadcast, thus
β ∈ θ(N/N). DC-nets use a combination operation (e.g., an
XOR) that causes dummy messages to cancel out. Then, all
parties output the resulting bitstring. If only one real message
is sent,
the bitstring equals this message. As Theorem 7
assumes a synchronized user distribution, in each round only
one party sends a message, thus our model treats (cid:4) as (cid:4) ∈ θ(1).
The Dissent-AT [22] scheme (the AnyTrust-variant of Dis-
sent) improves on the performance of DC-nets by relying
on dedicated servers. Instead of broadcasting to every other
client, clients in Dissent-AT send these messages to at least
one of these dedicated servers. These servers then perform a
DC-net communication round. Abstracting from an initial set-
up phase and only counting the client-messages, Dissent-AT
has β ∈ θ(N/N) for the clients (assuming that each client
communicates to one server), and (cid:4) ∈ θ(1).
Dicemix [16] is a peer-to-peer AC protocol that is based on
the DC-net approach. While Dicemix includes a self-healing
mechanism that leads to 4 + 2f communication rounds for
one message if f peers are malicious, this mechanism does not
kick in if all peers are honest, leading to only 4 communication
rounds, resutling in (cid:4) ∈ θ(1). As every party sends a message
in every round β ∈ θ(N/N).
XI. CONCLUSION AND FUTURE WORK
This paper proves the anonymity trilemma: strong anony-
mity, low bandwidth, low latency—choose two! We derive
necessary constraints for sender anonymity and recipient ano-
nymity, and thereby presents necessary constraints that are
crucial for understanding bi-directional anonymous commu-
nication: sender anonymity for hiding the sender and recipient
anonymity for hiding the recipient of a message.
For future work, we plan to extend the work in four
natural directions: (i) derive tighter bounds by using more
sophisticated attackers, (ii) derive bounds for other anonymity
notions (e.g., unlinkability and relationship anonymity), (iii)
extend the protocol mode with a notion of a throughput
limitation, (iv) relax the requirement that messages are sent
with certainty and allow for unreliable channels. For example,
for the ﬁrst direction, we plan to take the same steps as
outlined in Section II-B, i.e., to formulate an invariant, to
construct a protocol optimal w.r.t. this invariant, and then