time, the trend toward SOAP has nearly died: 73% of the APIs on ProgrammableWeb by 
2011 used REST, while SOAP was far behind with only 27%.29
Figure 1-7. The growth of APIs listed on ProgrammableWeb since 2005
The term API has existed for decades, but only recently has it been caught up in 
the hype and become a popular buzzword. The modern definition of an API mostly 
focused on a hosted, web-centric (over HTTP), public-facing service to expose useful 
business functionalities to the rest of the world. According to the Forbes magazine, an 
API is the primary customer interface for technology-driven products and services and 
a key channel for driving revenue and brand engagements. Salesforce, Amazon, eBay, 
Dropbox, Facebook, Twitter, LinkedIn, Google, Flickr, Yahoo, and most of the key players 
doing business online have an API platform to expose business functionalities.
29 SOAP is Not Dead, http://readwrite.com/2011/05/26/soap-is-not-dead---its-undead
Chapter 1  apIs rule!
20
 API Management
Any HTTP endpoint, with a well-defined interface to accept requests and generate 
responses based on certain business logic, can be treated as a naked API. In other words, 
a naked API is an unmanaged API. An unmanaged API has its own deficiencies, as listed 
here:
• 
There is no way to track properly the business owner of the API or 
track how ownership evolves over time.
• 
API versions are not managed properly. Introduction of a new API 
could possibly break all the existing consumers of the old API.
• 
No restriction on the audience. Anyone can access the API 
anonymously.
• 
No restriction on the number of API calls by time. Anyone can invoke 
the API any number of times, which could possibly cause the server 
hosting the API to starve all its resources.
• 
No tracking information at all. Naked APIs won’t be monitored and 
no stats will be gathered.
• 
Inability to scale properly. Since no stats are gathered based on the 
API usage, it would be hard to scale APIs based on the usage patterns.
• 
No discoverability. APIs are mostly consumed by applications. To 
build applications, application developers need to find APIs that suit 
their requirements.
• 
No proper documentation. Naked APIs will have a proper interface, 
but no proper documentation around that.
• 
No elegant business model. It’s hard to build a comprehensive 
business model around naked APIs, due to all the eight reasons listed 
earlier.
A managed API must address all or most of the preceding concerns. Let’s take an 
example, the Twitter API. It can be used to tweet, get timeline updates, list followers, 
update the profile, and do many other things. None of these operations can be 
Chapter 1  apIs rule!
21
performed anonymously—you need to authenticate first. Let’s take a concrete example 
(you need to have cURL installed to try this, or you can use the Chrome Advanced REST 
client browser plug-in). The following API is supposed to list all the tweets published by 
the authenticated user and his followers. If you just invoke it, it returns an error code, 
specifying that the request isn’t authenticated:
\> curl https://api.twitter.com/1.1/statuses/home_timeline.json
{"errors":[{"message":"Bad Authentication data","code":215}]}
All the Twitter APIs are secured for legitimate access with OAuth 1.0 (which we 
discuss in detail in Appendix B). Even with proper access credentials, you can’t invoke 
the API as you wish. Twitter enforces a rate limit on each API call: within a given time 
window, you can only invoke the Twitter API a fixed number of times. This precaution 
is required for all public-facing APIs to minimize any possible denial of service (DoS) 
attacks. In addition to securing and rate limiting its APIs, Twitter also closely monitors 
them. Twitter API Health30 shows the current status of each API. Twitter manages 
versions via the version number (e.g., 1.1) introduced into the URL itself. Any new 
version of the Twitter API will carry a new version number, hence won’t break any of the 
existing API consumers. Security, rate limiting (throttling), versioning, and monitoring 
are key aspects of a managed business API. It also must have the ability to scale up and 
down for high availability based on the traffic.
Lifecycle management is another key differentiator between a naked API and a 
managed API. A managed API has a lifecycle from its creation to its retirement. A typical 
API lifecycle might flow through Created, Published, Deprecated, and Retired stages, 
as illustrated in Figure 1-8. To complete each lifecycle stage, there can be a checklist 
to be verified. For example, to promote an API from Created to Published, you need 
to make sure the API is secured properly, the documentation is ready, throttling rules 
are enforced, and so on. A naked business API, which only worries about business 
functionalities, can be turned into a managed API by building these quality-of-service 
aspects around it.
30 Twitter Health, https://dev.twitter.com/status
Chapter 1  apIs rule!
22
The API description and discoverability are two key aspects of a managed API. For an 
API, the description has to be extremely useful and meaningful. At the same time, APIs 
need to be published somewhere to be discovered. A comprehensive API management 
platform needs to have at least three main components: a publisher, a store, and a 
gateway (see Figure 1-9). The API store is also known as the developer portal.
The API publisher provides tooling support to create and publish APIs. When an API 
is created, it needs to be associated with API documentation and other related quality- 
of- service controls. Then it’s published into the API store and deployed into the API 
gateway. Application developers can discover APIs from the store. ProgrammableWeb 
(www.programmableweb.com) is a popular API store that has more than 22,000 APIs 
at the time of this writing. You could also argue that ProgrammableWeb is simply 
a directory, rather than a store. A store goes beyond just listing APIs (which is what 
ProgrammableWeb does): it lets API consumers or application developers subscribe to 
APIs, and it manages API subscriptions. Further, an API store supports social features 
like tagging, commenting, and rating APIs. The API gateway is the one which takes all 
the traffic in runtime and acts as the policy enforcement point. The gateway checks all 
the requests that pass through it against authentication, authorization, and throttling 
policies. The statistics needed for monitoring is also gathered at the API gateway level. 
There are many open source and proprietary API management products out there that 
provide support for comprehensive API store, publisher, and gateway components.
Figure 1-8. API lifecycle
Chapter 1  apIs rule!
23
In the SOAP world, there are two major standards for service discovery. Universal 
Description, Discovery, and Integration (UDDI) was popular, but it's extremely bulky 
and didn’t perform to the level it was expected to. UDDI is almost dead today. The 
second standard is WS-Discovery, which provides a much more lightweight approach. 
Most modern APIs are REST-friendly. For RESTful services or APIs, there is no widely 
accepted standard means of discovery at the time of this writing. Most API stores make 
discovery via searching and tagging.
Describing a SOAP-based web service is standardized through the Web Service 
Definition Language (WSDL) specification. WSDL describes what operations are 
exposed through the web service and how to reach them. For RESTful services and 
APIs, there are two popular standards for description: Web Application Description 
Language (WADL) and Swagger. WADL is an XML-based standard to describe RESTful 
or HTTP-based services. Just as in WSDL, WADL describes the API and its expected 
request/response messages. Swagger is a specification and a complete framework 
implementation for describing, producing, consuming, and visualizing RESTful web 
services. With more than 350,000 downloads per month, of Swagger and Swagger-related 
Figure 1-9. API management platform
Chapter 1  apIs rule!
24
tooling, the Swagger specification is promising to be the most widely used format for 
describing APIs.31 Figure 1-10 shows the Swagger definition of the Swagger Petstore API.32
31 Open API Initiative Specification, https://openapis.org/specification
32 Swagger Petstore API, http://petstore.swagger.io/
Figure 1-10. Swagger definition of the Swagger Petstore API
Based on the Swagger 2.0 specification, the OpenAPI Initiative (OAI) has developed 
an OAI specification involving API consumers, developers, providers, and vendors, to 
define a standard, a language-agnostic interface for REST APIs. Google, IBM, PayPal, 
Intuit, SmartBear, Capital One, Restlet, 3scale, and Apigee got involved in creating the 
OpenAPI Initiative under the Linux foundation.
Chapter 1  apIs rule!
25
MANAGED APIS AT NETFLIX
Netflix started its journey as a DVD rental service and then evolved into a video streaming 
platform and published its first apI in 2008. In January 2010, Netflix apI recorded 600 million 
requests (per month), and in January 2011, the number rose up to 20.7 billion, then again 
after a year, in January 2012, Netflix apI was hit with 41.7 billion requests.33 today, at the 
time of this writing, Netflix handles more than one third of the entire Internet traffic in North 
america. It’s a widespread service globally over 190 countries in 5 continents, with more than 
139 million members. Netflix apI is accessed by thousands of supported devices, generating 
billions of apI requests per day.
even though Netflix apI was initially developed as a way for external application developers to 
access Netflix’s catalogue, it soon became a key part in exposing internal functionality to living 
room devices supported by Netflix. the former is the Netflix’s public apI, while the latter is its 
private apI. the public apI, when compared with the private apI, only attracted a small number 
of traffic. at the time Netflix decided to shut down the public apI in November 2011, it only 
attracted 0.3% of the total apI traffic.34
Netflix uses its own apI gateway, Zuul, to manage all its apI traffic.35 Zuul is the front door for all 
the requests from devices and web sites to the back end of the Netflix streaming application. as an 
edge service application, Zuul is built to enable dynamic routing, monitoring, resiliency, and security. 
It also has the ability to route requests to multiple amazon auto scaling Groups as appropriate.36
 The Role of APIs in Microservices
Going back to the good old days, there was an unambiguous definition for API  
vs. service. An API is the interface between two parties or two components.  
These two parties/components can communicate within a single process or  
between different processes. A service is a concrete implementation of an API  
using one of the technologies/standards available. The implementation of an  
33 Growth of Netflix API requests, https://gigaom.com/2012/05/15/
netflix-42-billion-api-requests/
34 Top 10 Lessons Learned from the Netflix API, www.slideshare.net/danieljacobson/
top-10-lessons-learned-from-the-netflix-api-oscon-2014
35 How we use Zuul at Netflix, https://github.com/Netflix/zuul/wiki/
How-We-Use-Zuul-At-Netflix
36 Zuul, https://github.com/Netflix/zuul/wiki
Chapter 1  apIs rule!
26
API that is exposed over SOAP is a SOAP service. Similarly, the implementation of an API 
that is exposed as JSON over HTTP is a RESTful service.
Today, the topic, API vs. service, is debatable, as there are many overlapping areas. 
One popular definition is that an API is external facing, whereas a service is internal 
facing (see Figure 1-11). An enterprise uses an API whenever it wants to expose useful 
business functionality to the outside world through the firewall. This, of course, raises 
another question: why would a company want to expose its precious business assets to 
the outside world through an API? Twitter once again is the best example. It has a web 
site that allows users to log in and tweet from there. At the same time, anything that can 
be done through the web site can also be done via Twitter’s API. As a result, third parties 
develop applications against the Twitter API; there are mobile apps, browser plug-ins, 
and desktop apps. This has drastically reduced traffic to the Twitter web site. Even today, 
the web site doesn’t have a single advertisement (but as sponsored tweets on the usual 
twitter stream). If there was no public API, Twitter could easily have built an advertising 
platform around the web site, just as how Facebook did. However, having a public API 
helped to build a strong ecosystem around Twitter.
Figure 1-11. API vs. service. An API is external facing
Exposing corporate data via an API adds value. It gives access to the data, not just 
for corporate stakeholders but also for a larger audience. Limitless innovative ideas may 
pop up and, in the end, add value to the data. Say we have a pizza dealer with an API that 
returns the number of calories for a given pizza type and the size. You can develop an 
application to find out how many pizzas a person would have to eat per day to reach a 
body mass index (BMI) in the obesity range.
Even though APIs are known to be public, it’s not a strict requirement. Most of the 
APIs started as public APIs and became the public face of the enterprise. At the same 
time, private APIs (not exposed to the public) proliferated within enterprises to share 
Chapter 1  apIs rule!
27
functionalities within it, between different components. In that case, the differentiator 
between an API and a service is not just its audience. In practice, most of the service 
implementations are exposed as APIs. In that case, API defines the contract between the 
service and the outside world (not necessarily public).
Microservices is the most trending buzzword at the time of this writing. Everyone 
talks about microservices, and everyone wants to have microservices implemented. The 
term “microservice” was first discussed at a software architects workshop in Venice, 
in May 2011. It’s being used to explain a common architectural style they’ve been 
witnessing for some time. Later, after a year in May 2012, the same team agreed that 
the “microservice” is the best-suited term to call the previously discussed architectural 
style. At the same time, in March 2012, James Lewis went ahead and presented some of 
the ideas from the initial discussion in Venice at the 33rd Degree conference in Krakow, 
Poland.37
Note the abstract of James lewis’ talk on “Microservices – Java, the unix Way,” 
which happened to be the very first public talk on Microservices, in March 2012: 
“Write programs that do one thing and do it well. Write programs to work together” 
was accepted 40 years ago, yet we have spent the last decade building monolithic 
applications, communicating via bloated middleware and with our fingers crossed 
that Moore’s law keeps helping us out. there is a better way. 
Microservices. In this talk, we will discover a consistent and reinforcing set of tools 
and practices rooted in the unix philosophy of small and simple. tiny applications, 
communicating via the web’s uniform interface with single responsibilities and 
installed as well-behaved operating system services. so, are you sick of wading 
through tens of thousands of lines of code to make a simple one-line change? 
Of all that XMl? Come along and check out what the cool kids are up to (and the 
cooler gray beards).
37 Microservices – Java, the Unix Way, http://2012.33degree.org/talk/show/67
Chapter 1  apIs rule!
28
One can easily argue that a microservice is service-oriented architecture (SOA) done 
right. Most of the concepts we discussed today, related to microservices, are borrowed 
from SOA. SOA talks about an architectural style based on services. According to the 
Open Group definition, a service is a logical representation of a repeatable business 
activity that has a specified outcome and is self-contained, may be composed of other 
services; the implementation acts as a black box to the service consumers.38 SOA brings 
the much-needed agility to business to scale and interoperate. However, over the past, 
SOA became a hugely overloaded term. Some people defined SOA under the context of 
SOAP-based web services, and others used to think SOA is all about an enterprise service 
bus (ESB). This led Netflix to call microservices as fine-grained SOA, at the initial stage.
I don’t really care whether it’s public or private. We used to call the things 
we were building on the cloud “cloud-native” or “fine-grained SOA,” and 
then the ThoughtWorks people came up with the word “microservices.” It’s 
just another name for what we were doing anyways, so we just started call-
ing it microservices, as well.39
—Adrian Cockcroft, former cloud architect at Netflix
NINE CHARACTERISTICS OF A MICROSERVICE
Martin Fowler and James lewis, introducing microservices,40 identify nine characteristics in a 
well-designed microservice, as briefly explained in the following:
Componentization via services: In microservices, the primary way of componentizing will be 
via services. this is a bit different from the traditional componentizing via libraries. a library 
in the Java world is a jar file, and in .Net world, it’s a Dll file. a library can be defined as a 
component isolated to perform some specific task and plugged into the main program via 
in-memory function calls. In microservices world, these libraries mostly act as a proxy to a 
remote service running out of process.
38 Service-Oriented Architecture Defined, www.opengroup.org/soa/source-book/togaf/ 
soadef.htm
39 Talking microservices with the man who made Netflix’s cloud famous, https://medium.
com/s-c-a-l-e/talking-microservices-with-the-man-who-made-netflix-s-cloud-famous-
1032689afed3
40 Microservices, http://martinfowler.com/articles/microservices.html
Chapter 1  apIs rule!
29
Organized around business capabilities: In most of the monolithic applications we see today, 
the layering is based on the technology not around the business capabilities. the user 
interface (uI) design team works on building the user interface for the application. they are the 
experts on htMl, Javascript, ajax, hCI (human-computer interaction), and many more. then 
we have database experts who take care of database schema design and various application 
integration technologies, like JDBC, aDO.Net, and hibernate. then we have server-side logic 
team who write the actual business logic and also are the experts on Java, .Net, and many 
more server-side technologies. With the microservices approach, you build cross-functional, 
multidisciplined teams around business capabilities.
Products not projects: the objectives of a project team are to work according to a project plan, 
meet the set deadlines, and deliver the artifacts at the end of the project. Once the project 
is done, the maintenance team takes care of managing the project from there onward. It 
is estimated that 29% of an It budget is spent on new system development, while 71% is 
spent on maintaining existing systems and adding capacity to those systems.41 to avoid such 
wastage and to improve the efficiency throughout the product lifecycle, amazon introduced the 
concept—you build it, you own it. the team, which builds the product, will own it forever. this 
brought in the product mentality and made the product team responsible for a given business 
functionality. Netflix, one of the very early promoters of microservices, treats each of their apI 
as a product.
Smart endpoints and dumb pipes: each microservice is developed for a well-defined scope. 
Once again, the best example is Netflix.42 Netflix started with a single monolithic web 
application called netflix.war in 2008, and later in 2012, as a solution to address vertical 
scalability concerns, they moved into a microservices-based approach, where they have 
hundreds of fine-grained microservices today. the challenge here is how microservices talk 
to each other. since the scope of each microservice is small (or micro), to accomplish a given 
business requirement, microservices have to talk to each other. each microservice would be 
a smart endpoint, which exactly knows how to process an incoming request and generate the 
response. the communication channels between microservices act as dumb pipes. this is 
similar to the unix pipes and filters architecture. For example, the ps –ax command in unix 
will list out the status of currently running processes. the grep unix command will search 
41 You build it, You run it, www.agilejourneyman.com/2012/05/you-build-it-you-run-it.html
42 Microservice at Netflix, www.youtube.com/watch?v=LEcdWVfbHvc
Chapter 1  apIs rule!
30
any given input files, selecting lines that match one or more patterns. each command is smart 
enough to do their job. We can combine both the commands with a pipe. For example, ps –ax 
| grep 'apache' will only list out the processes that matches the search criteria ‘apache’. 
here the pipe (|) acts as dumb—which basically takes the output from the first command and 
hands it over to the other. this is one of the main characteristics of a microservice design.