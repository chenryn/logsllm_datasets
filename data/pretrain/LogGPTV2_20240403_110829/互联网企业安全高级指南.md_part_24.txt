TEXT_TYPE
List of structures that overflowed
parent
BIGINT_TYPE Process parent's PID
time
BIGINT_TYPE Time of execution in UNIX time
uptime
BIGINT_TYPE Time of execution in system uptime
跟安全相关的项目不止这些，因篇幅关系不过多列举，这些查询项乍一看都很不起眼，
不是直接可以检测安全的选项，大多数都不足以判断有无攻击或者是否被装了rootkit，但
是如果周期性地轮询这些信息，通过消息队列将关键信息发送到云端进行如文件的完整性
对比、进程树模型对比，就能检测是否正在遭受人侵、被提权、被攻击者创建新的进程等
能否实现实时入侵检测的关键在于你采集数据的维度和云端的检测方法。大多数人的思路
可能还停留在Agent直接告警的年代，这可能也是导致OSquery冷门的一个原因。
作为一个2014年开源的项目，它也有一些不足之处，比如支持的版本有限，目前只支
持 Apple OS X Mavericks & Yosemite, Linux CentOS 6.6/7.0 和l Ubuntu LTS (12.04/14.04),
其他版本需要安全团队中有开发人员做兼容性适配
如果要正式在服务器上使用OSquery，它还不是一个成品，因为本身只是一个Agent程
序，不是一个完整的HIDS，从日志聚合开始到云端分析的大数据平台以及管理端都需要自
已去实现，只有实现了这些才算是一整套的平台，光有平台也还不行，还要定义BI的那此
事情，采集哪些，分析什么，对于不够的数据采集点可以自行开发插件。
---
## Page 147
第8章入侵感知体系135
总之，OSqucry适合于有一定IDC规模的企业，安全团队有一定的开发能力，并且对
入侵检测有基于大数据理解的环境。
8.1.4自研LinuxHIDS系统
互联网公司业务的急速扩张，也让各大公司的生产网环境急速膨胀，以至于他们的生
产网安全对抗也变得更加复杂，使得儿乎很难有一个可直接照搬或者购买部署的HIDS产
品能满足需求，主要原因如下：
海量环境
需求&选代
商业产品价格昂贵，不宜海量部署。
口业界产品不适应互联网企业业务变化
带来的安全风险快速变化。
业界常见产品数据处理性能不能满足需求。口外部产品无法快速变更应对新漏洞、
攻击手法。
口核心业务数据需要有可控管理。
口侵入性较强的产品，不易采用外部产
品，外部厂商无法快速响应。
综上原因，往往各大互联网公司都会考虑自研HIDS类系统，并且这类HIDS也未必是
市面上的通用HIDS模式，会根据企业自身的安全风险以及生产网架构适当调整风格，架
构也有各自的独到自处。
1.架构设计
虽然HIDS在一个企业的安全体系中几乎成了一个基础设施般的存在，但在架构设计之
初，第一步是还是需要梳理清楚自已的安全需求，以及怎样适合企业自身运维体系，才能
有更适合自身的架构。
口行业法规需求一行业法规这里指上市公司审计要求，等级保护等。通常要求要求
对系统账户登录有记录，有追溯审计能力。
口基础安全需求一基础安全需求来自于常见人侵场景检测能力要求，一般逐一对应
渗透入侵的各个环节的检测能力。如：端口扫描、SQL注人、命令注人、webshell、
反连木马、噢探、提权、文件纂改等。
口企业自身的特殊安全风险需求一根据分析历史安全事件复盘和基线安全数据，推
导出的企业自身存在的特定安全特点和场景，为解决此类场景专设的能力。
---
## Page 148
136技术篇
口运维体系\网络环境适应一根据前述的风险需求分析选择更适合自身的架构，比
如风险主要来自Web攻击，那么HIDS未必需要做内核模块功能；但如果是云租户
环境则不同，因为云租户受到的攻击各种各样，往往很容易就被攻击拿到root权限，
甚至会有更多的横向渗透过程，那么在内核态是有必要有安全措施的。
HIDS基本是CS架构，与传统安全软件不同的是，现在互联网公司的生产网环境对系
统性能极为敏感，通常对安全系统提出较为苛刻的系统资源消耗指标要求，加之为快速应
对新型风险的检测能力，使得主要的计算分析基本迁移到后端进行，前端仅仅以数据采集
为主。HIDS系统架构如图8-6所示。
Server
Agents
Linux Ager
数据接收
存储查询
管理
控制台
图8-6HIDS系统架构
在超大型网络里，为考虑容灾，以及海量服务器和海量数据的性能压力，整套HIDS系
统还会拆分成多个层级。第一级可按机房或某地区数据中心划分，每个部署单元设立两个
以上接入Server作为容灾备份。在运营过程中，我们会发现大量垃圾数据、脏数据，考虑
到跨区域传输对带宽的影响以及减少后端无意义计算，可以将第一级数据分析&格式化中
心就近部署，仅将过滤之后的高价值数据向后面数据计算存储集群传输。
2.Agent功能模块
Agent分三个部分，安全功能模块、数据传输、管理模块。HIDSAgent架构如图8-7所示。
---
## Page 149
第8章入侵感知体系137
模块1
数据传输
模块2
控制管理
Agent
模块N
图 8-7HIDS Agent 架构
安全功能模块是整个Agent的核心部分。各个功能模块既可以以单独进程也可以以线
程模式存在，建议用独立进程模型，因为避免因单个BUG影响整个Agent系统的稳定性。
这里的各个子模块的功能是对应于不同安全需求的，每个公司根据自身风险推导出的需求
不一定相同，这里列举常见模块。
1）基线安全一—基线数据可以说是一个古老但不能舍弃的标配，采集主机上配置版本
信息。主要针对两类需求：安全视角的软资产管理；0day应急。当新出现一个0day，需要
通过基线数据及时知晓企业自身网络环境里受影响的范围有多大，并能直接导出iplist等信
息，并指导应急响应下一步行动。此模块的采集方式，在Linux系统下以读取解析文本配
置为主，辅以某些二进制文件的ELF格式解析：Windows系统通过读取注册表和组策略信
息可完成采集。
可采集的数据包括但不限于以下信息：
口系统版本，Linux发行版版本和内核版本包括内核热补丁等；Windows则包含补丁
（微软官方补丁公告中注册表项）信息：
口系统账户，Linux可直接取passwd文件或仅解析提取其中部分信息，如账户名、权限、
以及shadow里的密码最后一次修改时间：Windows取账户权限、权限组、最后登录
时间；
口系统关键文件MD5
---
## Page 150
138技术篇
应用服务版本，诸如sshdftpitelnetdRDP版本信息
口第三方应用服务版本，apachenginx\tomcatiISmysqsqlserverioracle版本信息
口第三方服务配置文件，webserver配置文件，web根目录路径，启动账户权限，支
持的methodiCGI第三方模块信息；php配置，版本信息，安全配置项开关情况
如l safe_mode\disable_function?magic_quotes_gpc\safe_mode_exec_dir`safe_mode_
include_dir'allow_url_include 等;
 webapp 版 本, discuz\phpwind\phpbbwordpress\thinkphp\phpcms\dedecmslstruts
xwork等。
2）日志采集一在较早的HIDS设计里日志采集也是标配，甚至是最核心功能。但事实
上日志里的信息量较为有限，大量新的攻击手段，常规日志已不能覆盖其攻击面和攻击向
量。采集的日志内容如下：
口Linux系统日志
Syslog 黑认日志：/var/log/message
系统服务登录记录：/var/log/secure
系统账户登录记录：/var/log/secure
 Windows系统
应用服务日志：application（不少第三方服务日志也会写入这里，如sqlserverSymantec
serv-U 等)
安全日志：security
系统日志：system
 Webserver
所有的 webserver 日志，包括 apachenginx\tomcatiIIS 等
口扩展插件日志
这里指在AGENT发布时没有的功能，暂时用小程序或脚本应急产生的日志，可通
过修改HIDS配置采集解析上报。另一种技巧就是可将临时小程序的日志输出到系
统日志，Linux 的 syslog 或Windows 的 application 日志中。
3）进程信息—相比前面几个，这是几乎所有HIDS都有的标配模块，进程信息数据
在入侵检测方面贡献的价值更大。在Linux系统中，几乎所有的运维操作以及入侵行为都
会体现到执行的命令中。所以进程命令信息无论是作为运维操作审计，还是人侵行为分析
---
## Page 151
第8章入侵感知体系139
都有极大帮助
进程信息获取技术方案选择如下：
口周期性遍历/proc。这是风险最小的方案，部署适配性最强。但缺点明显，实时性无
法得到保障，且性能差；
口用户态HookLibc函数。相比前面一种方案，风险相对高一点，特别在多线程进程
中要注意安全性。但其部署适配性也特别高，同时性能也是各种方案最好的，建议
作为首要选择。虽然libchook方式可能有被绕过的风险，但如果对抗主要集中在
Web入侵场景，基本是无需担心的。
口利用LSM模块接口。如果对抗必须深人系统级攻防，那么通过内核态获取进程数据
就非常必要了。但是为了安全性、适配性考虑，采用LSM（Linux security module）
开发接口就是较佳的选择。Fackbook安全团队开发的OSquery就是使用了LibAudit
获取execve 调用信息。
口内核态syscallHOOK，安全类的开发最惯性的思维就是内核态HOOK，反倒不是什
么新鲜的招式。但是这样的方案未必都适合大范围使用，作为一个可能要大量部署
的安全系统来说，不是一个最佳选择。在Linux环境里各种发行版和内核版本差异
很大，以至于需要维护多个兼容性版本，同时稳定性也难以保证。这类方案通常是
开发一个LKM模块实现。
如果仅仅是记录进程派生事件，通常仅需要少数儿个字段即可。但是建议在设计数据
结构（字段）的时候，先将数据的使用场景想清楚，这样或许你需要的字段信息将会更多，
同时输出的字段既不浪费传输带宽和存储空间，还能最大化的服务于使用场景。表8-1是
建议使用的字段。
表8-1建议使用字段
字段
植述
数据类型
Pid
进程ID
lnr
Path
可执行文件绝对路径
TEXT
mode
可执行文件权限
Int
Cmdine
进程命令行
TEXT
ENV
进程执行环境变量
TEXT
Uid
启动进程的用户 uid
Euid
启动进程的用户 euid
Int
P!O
启动进程的用户 gid
Int
egid
启动进程的用户 cgid
Int
---
## Page 152
140技术篇
（续）
字段
描述
数据类型
sid
进程会话组 ID
Int
ppid
父进程id