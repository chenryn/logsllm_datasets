sent to or sent by another task. This is how the netmsgserver program provides network transparency.
Another example is that of a debugger that can intercept all messages sent through a send right.
Specifically, the debugger extracts a task's send right and inserts a send right for another port that the
debugger owns. The mach_port_extract_right() and mach_port_insert_right() routines are used
for this purpose. Thereafter, the debugger will receive messages sent by the taskit can examine and
forward these messages to the extracted send right.
Figure 923 shows a program that demonstrates the use of mach_port_insert_right(). The program
forks, after which the child task suspends itself. The parent acquires send rights to the host privileged port
and calls mach_port_insert_right() to insert these rights into the child, giving the rights a specific
name that is unused in the child's IPC spacesay, 0x1234. It then resumes the child, which uses the send
rights named by 0x1234 to retrieve the number of processors on the system. Note that the parent process
requires superuser privileges in this case, but the child process, which actually uses the host privileged
port, does not.
Figure 923. Inserting port rights into an IPC space
// interpose.c
#include 
#include 
#include 
#define OUT_ON_MACH_ERROR(msg, retval) \
if (kr != KERN_SUCCESS) { mach_error(msg ":" , kr); goto out; }
void
print_processor_count(host_priv_t host_priv)
{
kern_return_t kr;
natural_t processor_count = 0;
processor_port_array_t processor_list;
kr = host_processors(host_priv, &processor_list, &processor_count);
if (kr == KERN_SUCCESS)
printf("%d processors\n", processor_count);
else
mach_error("host_processors:", kr);
}
void
childproc()
{
printf("child suspending...\n");
(void)task_suspend(mach_task_self());
printf("child attempting to retrieve processor count...\n");
print_processor_count(0x1234);
}
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh46E8.htm 20.08.2007
Chapter 9. Interprocess Communication Page 49 of 153
void
parentproc(pid_t child)
{
kern_return_t kr;
task_t child_task;
host_priv_t host_priv;
// kludge: give child some time to run and suspend itself
sleep(1);
kr = task_for_pid(mach_task_self(), child, &child_task);
OUT_ON_MACH_ERROR("task_for_pid", kr);
kr = host_get_host_priv_port(mach_host_self(), &host_priv);
OUT_ON_MACH_ERROR("host_get_host_priv_port", kr);
kr = mach_port_insert_right(child_task, 0x1234, host_priv,
MACH_MSG_TYPE_MOVE_SEND);
if (kr != KERN_SUCCESS)
mach_error("mach_port_insert_right:", kr);
out:
printf("resuming child...\n");
(void)task_resume(child_task);
}
int
main(void)
{
pid_t pid = fork();
if (pid == 0)
childproc();
else if (pid > 0)
parentproc(pid);
else
return 1;
return 0;
}
$ gcc -Wall -o interpose interpose.c
$ sudo ./interpose
child suspending...
resuming child...
child attempting to retrieve processor count...
2 processors
9.5.5. Transferring Out-of-Line Memory and Port Rights
When transferring large amounts of data, a sender can include the address of a memory region (rather than
the entire data inline) in its address space as part of the message. This is called an out-of-line (OOL)
transfer. On the receive side, the out-of-line region is mapped by the kernel to a hitherto unused portion of
the receiver's address space. In particular, the sender and the receiver share the region thus transferred as
copy-on-write. Moreover, the sender can set the deallocate bit in the out-of-line data's type descriptor to
have the kernel automatically deallocate the region from the sender's address space. In this case, copy-on-
write will not be usedthe kernel will instead move the region.
Figure 924 shows partial source for a simple OOL memory server. When the server receives a message
from a client, it sends a character string as OOL memory back to the client. The program is based on the
simple IPC client-server example from Section 9.5.1, with the following differences.
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh46E8.htm 20.08.2007
Chapter 9. Interprocess Communication Page 50 of 153
The request message from the client has an empty body in this caseit is used only as a trigger.
The response message from the server contains an OOL descriptor for memory. The server
initializes various fields of this descriptor before sending it.
The server must mark the response message as a complex message by setting
MACH_MSGH_BITS_COMPLEX in the msgh_bits field of the outgoing message.
Figure 924. Sending out-of-line memory in an IPC message
// ool_memory_ipc_common.h
#ifndef _OOL_MEMORY_IPC_COMMON_H_
#define _OOL_MEMORY_IPC_COMMON_H_
...
#define SERVICE_NAME "com.osxbook.OOLStringServer"
...
typedef struct {
mach_msg_header_t header;
} msg_format_request_t;
typedef struct {
mach_msg_header_t header;
mach_msg_trailer_t trailer;
} msg_format_request_r_t;
typedef struct {
mach_msg_header_t header;
mach_msg_body_t body; // start of kernel-processed data
mach_msg_ool_descriptor_t data; // end of kernel-processed data
mach_msg_type_number_t count;
} msg_format_response_t;
typedef struct {
mach_msg_header_t header;
mach_msg_body_t body; // start of kernel-processed data
mach_msg_ool_descriptor_t data; // end of kernel-processed data
mach_msg_type_number_t count;
mach_msg_trailer_t trailer;
} msg_format_response_r_t;
#endif // _OOL_MEMORY_IPC_COMMON_H_
// ool_memory_ipc_server.c
...
#include "ool_memory_ipc_common.h"
// string we will send as OOL memory
const char *string = "abcdefghijklmnopqrstuvwxyz";
int
main(int argc, char **argv)
{
...
msg_format_request_r_t recv_msg;
msg_format_response_tsend_msg;
...
for (;;) { // server loop
// receive request
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh46E8.htm 20.08.2007
Chapter 9. Interprocess Communication Page 51 of 153
...
// prepare response
send_hdr = &(send_msg.header);
send_hdr->msgh_bits = MACH_MSGH_BITS_LOCAL(recv_hdr->msgh_bits);
send_hdr->msgh_bits |= MACH_MSGH_BITS_COMPLEX;
send_hdr->msgh_size = sizeof(send_msg);
send_hdr->msgh_local_port = MACH_PORT_NULL;
send_hdr->msgh_remote_port = recv_hdr->msgh_remote_port;
send_hdr->msgh_id = recv_hdr->msgh_id;
send_msg.body.msgh_descriptor_count = 1;
send_msg.data.address = (void *)string;
send_msg.data.size = strlen(string) + 1;
send_msg.data.deallocate = FALSE;
send_msg.data.copy = MACH_MSG_VIRTUAL_COPY;
send_msg.data.type = MACH_MSG_OOL_DESCRIPTOR;
send_msg.count = send_msg.data.size;
// send response
...
}
exit(0);
}
The client code remains almost the same, except that the client uses the updated request and response
message buffer structures. When the client receives the server's response, the address field of the out-of-
line descriptor will contain the address of the string in the client's virtual address space.
We could modify the example in Figure 924 to send port rights instead of out-of-line memory in an IPC
message. The kernel provides both inline and out-of-line descriptors for sending port rights, although a
message carrying a port right is always complex. Figure 925 shows another adaptation of our client-server
example that acquires send rights to the host privileged port and sends them to a client. The client can then
use these rights, which appear in the name field of the received port descriptor, just as if it had acquired
these rights normally (say, by calling host_get_host_priv_port()).
Figure 925. Sending port rights in an IPC message
// ool_port_ipc_common.h
#ifndef _OOL_PORT_IPC_COMMON_H_
#define _OOL_PORT_IPC_COMMON_H_
...
#define SERVICE_NAME "com.osxbook.ProcessorInfoServer"
...
typedef struct {
mach_msg_header_t header;
mach_msg_body_t body; // start of kernel-processed data
mach_msg_port_descriptor_t data; // end of kernel-processed data
} msg_format_response_t;
typedef struct {
mach_msg_header_t header;
mach_msg_body_t body; // start of kernel-processed data
mach_msg_port_descriptor_t data; // end of kernel-processed data
mach_msg_trailer_t trailer;
} msg_format_response_r_t;
#endif // _OOL_PORT_IPC_COMMON_H_
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh46E8.htm 20.08.2007
Chapter 9. Interprocess Communication Page 52 of 153
// ool_port_ipc_server.c
int
main(int argc, char **argv)
{
...
host_priv_t host_priv;
...
// acquire send rights to the host privileged port in host_priv
...
for (;;) { // server loop
// receive request
...
// prepare response
send_hdr = &(send_msg.header);
send_hdr->msgh_bits = MACH_MSGH_BITS_LOCAL(recv_hdr->msgh_bits);
send_hdr->msgh_bits |= MACH_MSGH_BITS_COMPLEX;
send_hdr->msgh_size = sizeof(send_msg);
send_hdr->msgh_local_port = MACH_PORT_NULL;
send_hdr->msgh_remote_port = recv_hdr->msgh_remote_port;
send_hdr->msgh_id = recv_hdr->msgh_id;
send_msg.body.msgh_descriptor_count = 1;
send_msg.data.name = host_priv;
send_msg.data.disposition = MACH_MSG_TYPE_COPY_SEND;
send_msg.data.type = MACH_MSG_PORT_DESCRIPTOR;
// send response
...
}
exit(0);
}
9.6. MIG
Informally speaking, the phrase remote procedure call (RPC) denotes a mechanism that allows programs
to call procedures transparently with respect to the procedures' locations. In other words, using RPC, a
program can call a remote procedure, which may reside within another program or even within a program
on another computer.
The Remote Past of RPC
Jim E. White described an alternative approach to network-based resource sharing in a paper
(RFC 707) in 1975.[10] White's approach was based on having a framework that required a
common command/response discipline that was independent of any specific network
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh46E8.htm 20.08.2007
Chapter 9. Interprocess Communication Page 53 of 153
application. His paper described what was perhaps the first formal RPC mechanism. Instead
of reimplementing the network runtime environment as part of every application, the
programmer could execute a procedure with the specified arguments on a remote machine,
much like a usual (local) procedure call. Numerous RPC systems have been built since
White's paper, such as Xerox Courier (1981), Sun RPC (1985), and OSF Distributed
Computing Environment (DCE, 1991). Examples of relatively recent systems include XML
RPC and Simple Object Access Protocol (SOAP).
[10] "A High-Level Framework for Network-Based Resource Sharing" (RFC 707), by Jim E.
White (The Internet Engineering Task Force, December 1975).
Most RPC systems include tools that ease the programmer's job by taking care of repetitive, tedious, and
mechanical aspects of RPC programming. For example, Sun RPC provides the rpcgen program, which
compiles an RPC specification file to generate C language code that can be linked with other C code
explicitly written by the programmer. The specification filea .x filedefines server procedures, their
arguments, and their results.
Mach Interface Generator (MIG) is a tool[11] that generates RPC code for client-server-style Mach IPC
from specification files. Since typical IPC programs perform similar operations of preparing, sending,
receiving, unpacking, and demultiplexing messages, MIG is able to automatically generate code for these
operations based on programmer-provided specifications of message passing and procedure call
interfaces. Automated code generation also promotes consistency and reduces the likelihood of
programming errors. Besides, if the programmer wishes to change the interface, only the appropriate
specification file needs to be modified.
[11] Another term for tools such as MIG is stub generatorsMIG generates client stubs for
Mach IPC.
A Ma(t)ch Made . . .
MIG originally implemented a subset of a language called Matchmaker, which was also
intended for specifying and automating the generation of IPC interfaces. Matchmaker was
meant to be multilingual: It generated C, Pascal, and Lisp code at different times during its
evolution. In fact, the syntax of MIG declarations still resembles Pascal syntax, although
MIG generates only C code.
Depending on the specific RPC system, tools similar to MIG may or may not hide features of
the underlying IPC layer from the programmerhowever, MIG does not.
9.6.1. MIG Specification Files
A MIG specification file conventionally has the .defs extension. MIG processes a .defs file to generate
the following three files:
A header file for inclusion by client code
A user-interface module to be linked with client codecontains functions for sending request
messages to the server and receiving replies
A server-interface module to be linked with server codecontains functions for receiving requests
from the client, for calling the appropriate server function (programmer-provided) based on the
contents of the request message, and for sending reply messages
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh46E8.htm 20.08.2007
Chapter 9. Interprocess Communication Page 54 of 153
A MIG specification file contains the following types of sections, not all of which are mandatory:
Subsystem identifier
Serverdemux declaration
Type specifications
Import declarations
Operation descriptions
Options declarations
A MIG "subsystem" is a collective name for a client, the server called by the client, and the set of
operations exported by the server. The subsystem keyword names the MIG subsystem specified by the
file. MIG use this identifier as a prefix in the names of the code files it generates.
subsystem system-name message-base-id ;
The subsystem keyword is followed by the ASCII name (e.g., foo) of the subsystem being defined.
message-base-id is the integer base value used as the IPC message identifier (the msgh_id field in the
message header) of the first operation in the specification file. In other words, this value is the base
beginning with which operations are numbered sequentially. message-base-id may be arbitrarily chosen.