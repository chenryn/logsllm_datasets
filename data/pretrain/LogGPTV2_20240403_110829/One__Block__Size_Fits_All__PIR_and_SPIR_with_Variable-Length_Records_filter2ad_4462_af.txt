secret that changes whenever the database changes (for ex-
ample, a digest of the database) and a common ephemeral
state (for example, a digest of the commitment vector for
Case I (bj(cid:54) = b(cid:48)
the present query). Note that, although the user can replay
a query with the same commitment vector, thus causing
the same set of keys to be reused, this is not a threat to
security since the user will also obtain the exact same set
of encrypted records.
Next, the servers iteratively apply a (publicly comput-
able) one-way function h (for example, a cryptographic
hash function) to κ0 and to κ1 to produce two length-s key
streams. The ﬁrst key stream is (cid:126)K0 = (cid:104)h(1)(κ0), . . . , h(s)(κ0)(cid:105)
and the second key stream is (cid:126)K1 = (cid:104)h(s)(κ1), . . . , h(1)(κ1)(cid:105),
where h(1)(x) = h(x) and h(i+1)(x) = h(h(i)(x))) for 1 < i ≤ s.
(Note that the latter key stream has its order reversed.)
Let T be the upper bound on the degree of a polynomial
that can be committed to using the public parameters of
the polynomial commitment scheme. The servers use a
commonly seeded PRG to produce a length-s vector of
degree-T polynomials that passes componentwise through
(cid:126)K0 at x = 0, through (cid:126)K1 at x = 1, through the zero vector
at each of x = 2, . . . ,q− 1, and through uniform random
vectors at x = q, . . . ,T − 1.
Finally, each server evaluates this common polynomial
vector componentwise at its own respective server index
and adds the resultant vector of scalars to its query
response. This encrypts the (potentially Type I) blocks
encoded at x = 0 and x = 1, and randomizes the query
response at x ≥ q.
Note that, given h(c j)(κ0), it is easy to compute the
trailing s − c j + 1 components of (cid:126)K0, but
infeasible to
compute any of the leading c j−1 components (and similar
reasoning holds for the leading components of (cid:126)K1). Thus,
if the user learns h(c j)(κ0) and h(s−c(cid:48)
j+1)(κ1), then she can
decrypt only the parts of the Type I blocks encoded at x = 0
and x = 1 in her query response. The user therefore requests
these two values using Camenisch et al.’s [12] OT protocol,
and attaches a zero-knowledge proof of knowledge of a
signature (σ j) on “ j, (b j,c j), (b(cid:48)
j)[, Pj]” such that this
message is consistent with the above PIR and OT queries.
j): The above technique fails when
b j = b(cid:48)
j < s (that is, when the entire record ﬁts
within a single block but does not ﬁll it through to the
sth ﬁeld element), since in this case the user can also
decrypt part of record j + 1. To solve this, the database
servers (always) append a third length-s key stream (cid:126)K2 to
the end of the database (as an extra, ephemeral (r + 1)th
record generated from the same common inputs as (cid:126)K0 and
(cid:126)K1). The allowable matrix corresponding to a query for
record j then has ebj
+ er+1 in its ﬁrst row and er+1 in
its second row (and the zero vector in rows 3, . . . ,q− 1).
It is straightforward to verify that, given h(c j)(κ0) and
h(s−c(cid:48)
j+1)(κ1) as above, the user can still decrypt only the
portion of row b j that corresponds to record j. Note that
the database servers cannot distinguish between Case I and
Case II queries.
Case II (bj = b(cid:48)
j and c(cid:48)
j,c(cid:48)
Pricing and access control. Adding support for pricing and
access control within this framework is trivial, since the
user already proves knowledge of a signature on a message
that contains both the index of the record she is requesting
and the metadata about this record. It is straightforward to
adapt Henry et al.’s bookkeeping protocols to work with
Protocol 4, although ambiguity may emerge among records
that do not contain any Type II blocks. We leave a more
thorough investigation of how one might eliminate this
ambiguity to future work.
Informal security and cost analysis. User privacy in the
above multi-block SPIR protocol is information-theoretic
against coalitions of up to t −1 database servers and com-
putational against coalitions of up to t database servers.
If the one-way function and the key derivation function
are both computationally secure, then data privacy follows
from data privacy in Camenisch et al.’s OT protocol and
the soundness of the zero-knowledge proof of query well-
formedness, which holds with overwhelming probability
under the (t +q−1)-SDH assumption. The total commu-
√
N} + R) and
nication cost of the protocol is Θ(max{S/q,
the computation cost is Θ(N) ﬁeld operations, plus Θ(R)
full-length exponentiations (in an elliptic curve group) for
the user and Θ(R) short exponentiations (i.e., with ≈ 40-bit
exponents) for each database server.
B. Discussion
We have constructed four new SPIR protocols that
build on our multi-block variant of Goldberg’s IT-PIR to
allow SPIR queries over variable-length database records.
Each protocol offers its own tradeoffs; this section brieﬂy
discusses these tradeoffs and discusses the relative merits
of each protocol for different use cases.
Protocol 1 is the simplest extension of multi-block IT-
PIR to SPIR in that it does not require any zero-knowledge
proofs, and introduces only a slight modiﬁcation to the un-
derlying IT-PIR protocol. Unfortunately, the construction
does not provide a straightforward way to integrate more
sophisticated functionality like pricing and access control.
Henry et al. have argued that the privacy-preserving e-
commerce applications made possible by priced SPIR (in
particular, their multiple-payee PSPIR [28]) may give rise
to compelling arguments for the non-collusion assumption
inherent in IT-PIR-based protocols; unfortunately, without
a way to implement pricing,
their argument does not
apply to Protocol 1. Noticing certain parallels between
our Protocol 1 and Camenisch et al.’s OT protocol —
which does lend itself to integrating pricing or access
control — we devised Protocol 2, which is essentially just
Camenisch et al.’s protocol with the trivial download step
replaced by a multi-block IT-PIR query. This latter change
replaces the initial Θ(N) download step in Camenisch et
al.’s protocol with a much smaller query-time download,
which improves efﬁciency when the user only requires
a relatively small subset of the database, or when the
database contents are not static. In fact, Protocol 2 turns
out to be more efﬁcient than Protocol 1 because the en-
cryption is static; the database servers need not coordinate
efforts nor perform any online cryptographic operations.
Protocol 2 is therefore the most efﬁcient of our SPIR
protocols with respect to computation cost. Protocol 3 is
almost identical to Protocol 2, except it uses Henry et
al.’s SPIR in place to Camenisch et al.’s OT; as such,
Protocol 3 inherits the latter protocol’s rich feature set,
which includes simultaneous support for (tiered) pricing
and access control lists, and novel bookkeeping features
like Top-K replication and multiple payees (see Henry
et al.’s [28] paper for further details on these features).
This extra functionality comes at a cost of some extra
communication and computation for the user to retrieve
her decryption keys; the cost of this step scales with the
number of records in the database. Whereas Protocols 2
and 3 combine multi-block IT-PIR with Camenisch et al.’s
statically encrypted database approach, Protocol 4 adapts
the ephemeral encryption strategy from our Protocol 1
to extend Henry et al.’s SPIR protocol to a variant that
supports multi-block queries and variable-length records.
Protecting the privacy of content providers. Henry et
al.
introduced multiple-payee PSPIR to enable several,
independent content providers to host each other’s data
in a common PSPIR database. In their model, the da-
tabase servers periodically perform a secure multiparty
computation to determine the portion of sales revenues
to which each content provider is entitled. Under such a
model, it seems reasonable to expect that content providers
might want to keep their data private from one another in
addition to from the users. Beimel and Stahl introduced the
notion of τ-independence to address such situations [3]: a
database is τ-independent if it is infeasible for coalitions of
up to τ database servers to deduce nontrivial information
about records that they did not themselves contribute to
the database. (Of course, by temporarily taking on the
role of user,
the coalition can query the database for
other content providers’ records; τ-independence simply
ensures that
the coalition can only obtain their peers’
records through the same “approved” channels as regular
users.) It is easy to conﬁgure Goldberg’s IT-PIR — and
by extension, our multi-block variant thereof — with τ-
independence. (See Goldberg’s paper [25] for details on
this feature, and how τ interacts with the other system
parameters.) Henry et al. incorrectly state that their SPIR
protocol is incompatible with this feature [28], but it is
fortunately easy to verify that this is not the case. There is
no difﬁculty in using the τ-independence from Goldberg’s
IT-PIR in any of our protocols, although in the case of
Protocol 2 it turns out not to be particularly helpful to
Computation time for IT-PIR (over encrypted database) + OT/SPIR (for decryption keys)
IT-PIR
Protocol 2
(PIR+OT)
Protocol 3
(PIR+SPIR)
Server PIR 23 000±400 ms 23 000± 400 ms 23 000±400 ms
159.2± 0.2 ms
Client PIR
2 010±10 ms
Client key retrieval
583±4 ms
Server key retrieval
≈ 25.5 s
Total
159.2± 0.2 ms
37.6± 0.9 ms
51± 2 ms
≈ 23.5 s
—
—
≈ 23 s
159.2± 0.2 ms
Figure 3: A histogram (left) and table (right) illustrating the total (wall-clock) computation time required to query a 16-gigabyte subset of the
Librivox Free Audio Book Collection (https://librivox.org/) using multi-block IT-PIR, Protocol 2 (PIR+OT) and Protocol 3 (PIR+SPIR).
The IT-PIR was instantiated with a word size of w = 8 bits, a block size of s = 15.69 megabytes, (cid:96) = 5 servers, and a privacy threshold of
t = 2 servers (so that user privacy is holds if a majority of database servers are honest); in each query, the user fetched q = 3 blocks. The block
size was chosen to accommodate the largest record in our sample of the Librivox dataset, which was 31.4 megabytes. We performed 100 trials
of each experiment; the table reports the mean ± the standard deviation across all trials. The total communication cost is under 79 megabytes
for each protocol (dominated by each server sending a 15.69 megabyte block to the client) — a factor of approximately 2.5 higher than a
non-private query for the largest audio book in the database.
protect the encrypted records with τ-independence since
the protocol permits arbitrary IT-PIR queries over the
encrypted database. On one hand, if each database server
has all of the decryption keys, then the τ-independence
does not prevent them from retrieving arbitrary records
through unveriﬁed IT-PIR queries. On the other hand, if
not every database server has a copy of the decryption
keys, then the user must query the content provider with
an OT query, which reveals much information about the
particular record she seeks. In the case of Protocol 3,
one can implement τ-independence over the database of
decryption keys rather than over the encrypted records,
and in Protocol 4 simply enabling τ-independence on the
unencrypted database sufﬁces. Therefore, in cases where
several competing content providers wish to host their data
in common database, the ability to enable τ-independence
in Protocols 3 and 4 justiﬁes their slightly higher cost.
C. Performance evaluation
Henry et al. argue that their PSPIR construction may
be efﬁcient enough for practical deployment in certain e-
commerce applications [28]. Our new constructions offer
substantial performance improvements over their protocol
for databases serving multimedia content, which suggests
that our own protocols might also be practical for de-
ployment
in such application domains. To verify that
this is indeed the case, we have developed a fork of
Percy++, an open-source implementation of Goldberg’s
IT-PIR protocol, in which we implement our multi-block
query construction. We also implemented Camenisch et
al.’s OT and leveraged the built-in support for Henry et
al.’s SPIR in the latest release of Percy++ to implement
Protocol 2 and Protocol 3, respectively. We used each
of these three protocols to query for records in a 16-
gigabyte sample of the Librivox Free Audio Book Col-
lection (https://librivox.org/); Figure 3 presents a
summary of our ﬁndings. In our experiments, the client and
all servers ran on a single host with dual Intel Xeon E5420
CPUs (2.5 GHz) and sufﬁcient RAM to hold the entire
database in memory; therefore, the ﬁgures presented in
Figure 3 are for computation only, and do not include
I/O time. All times are wall-clock times and those listed
for the servers were measured on a per-server basis. The
most expensive steps (server PIR and client overhead in
Protocol 3) are highly parallelizable, but our experiments
were all single-threaded.
V. Conclusion
We revisited an observation ﬁrst made by Henry et al.
in the context of their multi-server SPIR protocol; i.e., that
the user in Goldberg’s IT-PIR protocol can retrieve several
blocks with a single query by replacing Shamir secret
sharing with its ramp scheme variant. We pointed out how
to take advantage of this observation to implement multi-
block queries that trade off some Byzantine robustness
for improved throughput without affecting privacy. Our
multi-block IT-PIR queries are information-theoretically
indistinguishable from standard, single-block queries when
the number of colluding database servers does not exceed
the privacy threshold. By taking advantage of the recent
Cohn-Heninger multi-polynomial list decoding algorithm,
we demonstrated that the user can retrieve several blocks
with the same communication and computation cost as
a single-block query and studied the impact of multi-
block queries on Byzantine robustness. We found that our
new approach can signiﬁcantly reduce the constant factor
separating the communication cost of Goldberg’s original
protocol from optimal when the database hosts realistically
sized records.
22.5 23.0 23.5 24.0 24.5 25.0 25.5 IT-PIR Protocol 2 (PIR+OT) Protocol 3 (PIR+SPIR) Computation time (seconds) Server key retrieval Client key retrieval Client PIR Server PIR With our new multi-block IT-PIR protocol as a starting
point, we constructed four new SPIR protocols that each
support variable-length database records. By decoupling
the PIR block size from the lengths of individual database
records, our new protocols can use the communication-
optimal block size without artiﬁcially restricting the con-
tents and layout of the records. Moreover, we pointed
out how straightforward extensions to three of our four
new SPIR constructions make it possible to construct ef-
ﬁcient zero-knowledge proofs about the particular records
a user is requesting in a given query; this makes it easy
to implement pricing and access control structures over
the records using standard techniques from the literature.
The resulting SPIR protocols are therefore well suited
to privacy-preserving e-commerce applications, such as