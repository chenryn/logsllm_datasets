# []{#configuring-network-teaming_configuring-and-managing-networking.html#configuring-network-teaming_configuring-and-managing-networking}第 12 章 配置网络团队（team） {.title}
:::
这部分论述了网络合作的基础知识、绑定和团队之间的区别，以及如何在 Red Hat
Enterprise Linux 上配置网络团队。
您可以在不同类型的设备中创建网络团队，例如：
::: itemizedlist
-   物理和虚拟以太网设备
-   网络绑定
-   网络桥接
-   VLAN 设备
:::
::: section
::: titlepage
# []{#configuring-network-teaming_configuring-and-managing-networking.html#understanding-network-teaming_configuring-network-teaming}了解网络团队 {.title}
:::
网络团队（network
teaming）是一个合并或聚合网络接口的功能，它提供了一个高吞吐量或冗余的逻辑接口。
网络团队使用内核驱动程序来实现对数据包流、用户空间库以及用于其他任务的服务的快速处理。因此，网络团队是一个易扩展的解决方案，来满足负载平衡和冗余的要求。
::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
### 重要 {.title}
某些网络团队的功能，比如故障切换机制，不支持不通过网络交换机的直接电缆连接。详情请查看[是否支持直接连接的绑定？](https://access.redhat.com/solutions/202583){.link}
:::
:::
::: section
::: titlepage
# []{#configuring-network-teaming_configuring-and-managing-networking.html#understanding-the-default-behavior-of-controller-and-port-interfaces_configuring-network-teaming}了解控制器和端口接口的默认行为 {.title}
:::
在使用 `NetworkManager`{.literal}
服务管理网络团队或对其进行故障排出时，请考虑以下默认行为：
::: itemizedlist
-   启动控制器接口不会自动启动端口接口。
-   启动端口接口总会启动控制器接口。
-   停止控制器接口也会停止端口接口。
-   没有端口的控制器可以启动静态 IP 连接。
-   没有端口的控制器在启动 DHCP 连接时会等待端口。
-   当您添加带有载波的端口时，具有 DHCP 连接的控制器会等待端口完成。
-   当您添加不具有载波的端口时，具有 DHCP 连接的控制器继续等待端口。
:::
:::
::: section
::: titlepage
# []{#configuring-network-teaming_configuring-and-managing-networking.html#comparison-of-network-teaming-and-bonding-features_configuring-network-teaming}网络团队和绑定功能的比较 {.title}
:::
了解网络团队和网络绑定支持的功能：
::: informaltable
  功能                                    网络绑定       网络团队
  --------------------------------------- -------------- --------------
  广播 Tx 策略                            是             是
  轮询 Tx 策略                            是             是
  Active-backup Tx 策略                   是             是
  LACP（802.3ad）支持                     是（仅活动）   是
  基于 hash 的 Tx 策略                    是             是
  用户可以设置哈希功能                    否             是
  TX 负载均衡支持（TLB）                  是             是
  LACP 哈希端口选择                       是             是
  LACP 支持的负载均衡                     否             是
  ethtool 链接监控                        是             是
  ARP 链路监控                            是             是
  NS/NA（IPv6）链路监控                   否             是
  端口启动/关闭延时                       是             是
  端口优先级和粘性（\"主要\" 选项增强）   否             是
  独立的每个端口链路监控设置              否             是
  多个链路监控设置                        有限           是
  Lockless Tx/Rx 路径                     否（rwlock）   是（RCU）
  VLAN 支持                               是             是
  用户空间运行时控制                      有限           是
  用户空间中的逻辑                        否             是
  可扩展性                                难             易
  模块化设计                              否             是
  性能开销                                低             非常低
  D-Bus 接口                              否             是
  多设备堆栈                              是             是
  使用 LLDP 时零配置                      否             （在计划中）
  NetworkManager 支持                     是             是
:::
:::
::: section
::: titlepage
# []{#configuring-network-teaming_configuring-and-managing-networking.html#understanding-the-teamd-service-runners-and-link-watchers_configuring-network-teaming}了解 teamd 服务、运行程序和 link-watchers {.title}
:::
team 服务
`teamd`{.literal}用来控制网络团队驱动的一个实例。这个驱动的实例添加硬件设备驱动程序实例组成一个网络接口组。团队（team）驱动为内核提供了一个网络接口，如
`team0`{.literal}。
`teamd`{.literal}
服务为所有团队方法实施通用逻辑。这些功能对不同的负载共享和备份方法（如循环）是唯一的，由称为
`runners`{.literal} 的单独代码单元实施。管理员以 JavaScript Object
Notation（JSON）格式指定运行程序，在创建实例时，JSON 代码编译到
`teamd`{.literal} 实例中。另外，在使用
`NetworkManager`{.literal}时，您可以在 `team.runner`{.literal}
参数中设置运行程序（runner），`NetworkManager`{.literal}
会自动创建对应的 JSON 代码。
可用的运行程序如下：
::: itemizedlist
-   `broadcast`{.literal}：在所有端口上传输数据。
-   `roundrobin`{.literal}：依次传输所有端口上的数据。
-   `activebackup`{.literal}：通过一个端口传输数据，其他端口则作为备份。
-   `loadbalance`{.literal}：通过所有使用活跃 Tx 负载平衡和 Berkeley
    Packet 过滤器（BPF）的 Tx 端口选择器传输数据。
-   `random`{.literal}：在随机选择的端口上传输数据。
-   `lacp`{.literal}：实现 802.3ad 链接聚合控制协议（LACP）。
:::
`teamd`{.literal} 服务使用一个链接监视器来监控下级设备的状态。可用的
link-watchers 如下：
::: itemizedlist
-   `ethtool`{.literal}：`libteam`{.literal} 库使用 `ethtool`{.literal}
    程序来监视链接状态的改变。这是默认的 link-watcher。
-   `arp_ping`{.literal}： `libteam`{.literal} 库使用
    `arp_ping`{.literal}
    工具来监控使用地址解析协议（ARP）远端硬件地址是否存在。
-   `nsna_ping`{.literal}：在 IPv6 连接中，`libteam`{.literal} 库使用
    IPv6 Neighbor Discovery
    协议中的邻居广告和邻居排序特性来监控邻居接口的存在。
:::
每个运行程序都可以使用任何链路监视器，但
`lacp`{.literal}除外。这个运行程序只能使用 `ethtool`{.literal}
链路监视器。
:::
::: section
::: titlepage
# []{#configuring-network-teaming_configuring-and-managing-networking.html#installing-the-teamd-service_configuring-network-teaming}安装 teamd 服务 {.title}
:::
要在 `NetworkManager`{.literal} 中配置网络团队，您需要 `teamd`{.literal}
服务和 `NetworkManager`{.literal} 的团队插件。默认情况下，它们都安装在
Red Hat Enterprise Linux
上。这部分论述了如何在删除所需软件包时安装它们。
::: itemizedlist
**先决条件**
-   为主机分配了活跃的红帽订阅。
:::
::: itemizedlist
**流程**
-   安装 `teamd`{.literal} 和 `NetworkManager-team`{.literal} 软件包：
    ``` literallayout
    # yum install teamd NetworkManager-team
    ```
:::
:::
::: section
::: titlepage
# []{#configuring-network-teaming_configuring-and-managing-networking.html#configuring-a-network-team-using-nmcli-commands_configuring-network-teaming}使用 nmcli 命令配置网络团队 {.title}
:::
本节论述了如何使用 `nmcli`{.literal} 工具配置网络团队。
::: itemizedlist
**先决条件**
-   在服务器中安装两个或者两个以上物理或者虚拟网络设备。
-   要将以太网设备用作团队的端口，必须在服务器中安装物理或者虚拟以太网设备并连接到交换机。
-   要将 bond、bridge 或 VLAN
    设备用作团队的端口，您可以在创建团队时创建这些设备，或者预先创建它们，如下所述：
    ::: itemizedlist
    -   [使用 nmcli
        命令配置网络绑定](#configuring-network-bonding_configuring-and-managing-networking.html#configuring-a-network-bond-using-nmcli-commands_configuring-network-bonding "使用 nmcli 命令配置网络绑定"){.link}
    -   [使用 nmcli
        命令配置网络桥接](#configuring-a-network-bridge_configuring-and-managing-networking.html#configuring-a-network-bridge-using-nmcli-commands_configuring-a-network-bridge "使用 nmcli 命令配置网络桥接"){.link}
    -   [使用 nmcli 命令配置 VLAN
        标记](#configuring-vlan-tagging_configuring-and-managing-networking.html#configuring-vlan-tagging-using-nmcli-commands_configuring-vlan-tagging "使用 nmcli 命令配置 VLAN 标记"){.link}
    :::
:::
::: orderedlist
**流程**
1.  创建团队接口：
    ``` literallayout
    # nmcli connection add type team con-name team0 ifname team0 team.runner activebackup
    ```
    这个命令会创建一个名为 `team0`{.literal} 的网络团队，它使用
    `activebackup`{.literal} 运行程序。
2.  另外，还可设置链接监视器。例如，要在 `team0`{.literal}
    连接配置集中设置 `ethtool`{.literal} 链路监视器：
    ``` literallayout
    # nmcli connection modify team0 team.link-watchers "name=ethtool"
    ```
    链路监视器支持不同的参数。要为链接监视器设置参数，在
    `name`{.literal} 属性中指定它们（以空格分隔）。请注意，name
    属性必须用引号包围起来。例如，使用 `ethtool`{.literal}
    链路监视器，并将其 `delay-up`{.literal} 参数设置为 `2500`{.literal}
    毫秒（2.5 秒）:
    ``` literallayout
    # nmcli connection modify team0 team.link-watchers "name=ethtool delay-up=2500"
    ```
    要设置多个链路监视器，每个都使用特定的参数，不同的连接监视器以逗号分隔。以下示例使用
    `delay-up`{.literal} 参数设置 `ethtool`{.literal} 链接监视器，使用
    `source-host`{.literal} 和 `target-host`{.literal} 参数设置
    `arp_ping`{.literal} 链路监视器：
    ``` literallayout
    # nmcli connection modify team0 team.link-watchers "name=ethtool delay-up=2, name=arp_ping source-host=192.0.2.1 target-host=192.0.2.2"
    ```
3.  显示网络接口，并记录您要添加到团队中的接口名称：
    ``` literallayout
    # nmcli device status
    DEVICE  TYPE      STATE         CONNECTION
    enp7s0  ethernet  disconnected  --
    enp8s0  ethernet  disconnected  --
    bond0   bond      connected  bond0
    bond1   bond      connected  bond1
    ...
    ```
    在本例中：
    ::: itemizedlist
    -   `enp7s0`{.literal} 和 `enp8s0`{.literal}
        没有配置。要将这些设备用作端口，请在下一步中添加连接配置集。请注意，您只能在没有分配给任何连接的团队中使用以太网接口。
    -   `bond0`{.literal} 和 `bond1`{.literal}
        已有连接配置集。要将这些设备用作端口，请在下一步中修改其配置集。
    :::
4.  为团队分配端口接口：
    ::: orderedlist
    1.  如果没有配置您要分配给团队的接口，为其创建新的连接配置集：
        ``` literallayout
        # nmcli connection add type ethernet slave-type team con-name team0-port1 ifname enp7s0 master team0
        # nmcli connection add type ethernet slave-type team con-name team0-port2 ifname enp8s0 master team0
        ```
        .这些命令为 `enp7s0`{.literal} 和
        `enp8s0`{.literal}创建配置集，并将其添加到 `team0`{.literal}
        连接中。
    2.  要为团队分配现有连接配置集，将这些连接的 `master`{.literal}
        参数设置为 `team0`{.literal}：
        ``` literallayout
        # nmcli connection modify bond0 master team0
        # nmcli connection modify bond1 master team0
        ```
        这些命令将名为 `bond0`{.literal} 和 `bond1`{.literal}
        的现有连接配置集分配给 `team0`{.literal} 连接。
    :::
5.  配置团队的 IP
    设置。如果要使用这个团队作为其它设备的端口，请跳过这一步。
    ::: orderedlist
    1.  配置 IPv4 设置。例如：要设置 `team0`{.literal} 连接的静态 IPv4
        地址、网络掩码、默认网关、DNS 服务器和DNS 搜索域，请输入：
        ``` literallayout
        # nmcli connection modify team0 ipv4.addresses '192.0.2.1/24'
        # nmcli connection modify team0 ipv4.gateway '192.0.2.254'
        # nmcli connection modify team0 ipv4.dns '192.0.2.253'
        # nmcli connection modify team0 ipv4.dns-search 'example.com'
        # nmcli connection modify team0 ipv4.method manual
        ```
    2.  配置 IPv6 设置。例如：要设置 `team0`{.literal} 连接的静态 IPv6
        地址、网络掩码、默认网关、DNS 服务器和DNS 搜索域，请输入：
        ``` literallayout
        # nmcli connection modify team0 ipv6.addresses '2001:db8:1::1/64'
        # nmcli connection modify team0 ipv6.gateway '2001:db8:1::fffe'
        # nmcli connection modify team0 ipv6.dns '2001:db8:1::fffd'
        # nmcli connection modify team0 ipv6.dns-search 'example.com'
        # nmcli connection modify team0 ipv6.method manual
        ```
    :::
6.  激活连接：
    ``` literallayout
    # nmcli connection up team0
    ```
:::
::: itemizedlist
**验证步骤**
-   显示团队状态：
    ``` literallayout
    # teamdctl team0 state
    setup:
      runner: activebackup
    ports:
      enp7s0
        link watches:
          link summary: up
          instance[link_watch_0]:
            name: ethtool
            link: up
            down count: 0
      enp8s0
        link watches:
          link summary: up
          instance[link_watch_0]:
            name: ethtool
            link: up
            down count: 0
    runner:
      active port: enp7s0
    ```
    在这个示例中，两个端口都是上线的。
:::
::: itemizedlist
**其它资源**