4We refer readers to [2, 29] for a detailed study of isotropic
position.
Theorem 5.2. [18] If the sensitivity hull K is in C near-
isotropic position, then K-norm mechanism has error
O(C)LB(K) where LB(K) is the lower bound in Theorem
4.3.
From Theorem 5.2, we know that K-norm mechanism
would be the optimal solution if the sensitivity hull K is
in isotropic position, denoted by KI . Although in high-
dimensional space transforming a convex body to its isotrop-
ic position is extremely expensive, it is feasible in two-dimensional
space. To this end, we need the following corollary (which
can be derived from [36, 27]).
Corollary 5.1
(Isotropic Transformation). For any
convex body K in R2, any integer p ≥ 1, there is an abso-
lute constant c such that if l ≥ 4cp2, with probability at least
1 − 2−p, KI = TK is in isotropic position.
(cid:33)− 1
2
(cid:32)
l(cid:88)
i=1
1
l
T =
yiyT
i
(6)
where y1, y2,··· , yl are independent random points uniform-
ly distributed in K.
Therefore, the isotropic transformation of any sensitivity
hull K can be fulﬁlled by sampling, which is a trivial task
in two-dimensional space. For instance, a hit-and-run algo-
rithm [26] only takes O(log3(1/δ)) time where δ is an error
parameter. We skip the sampling details and refer readers
to the survey paper of Santosh Vempala [39] for a complete
study.
Algorithm. As an overview, PIM involves the following
steps:
(1) Compute sensitivity hull K from ∆X;
(2) Transform K to isotropic position KI ;
(3) generating a noise in the space of KI by K-norm mech-
anism;
(4) Transform to the original space.
We ﬁrst describe how to compute sensitivity hull K. Sup-
pose we have a δ-location set ∆X at a timestamp. We
can ﬁrst derive the convex hull of ∆X, denoted by K(cid:48) =
Conv(∆X). For example, in Figure 5a, the convex hull K(cid:48)
is shown by the black lines given δ-location set as “•” and
“(cid:63)” where “(cid:63)” is the true location. Denote v1, v2,··· , vh the
vertices of K(cid:48). Then we use a set ∆V to store vi−vj for any
vi and vj from the vertices of K(cid:48) as the equation below. In
Figure 5b, for instance, the polygon “(cid:52) · · · (cid:52)” denotes vi−v1
for all vi. Then Conv(∆V) will be the sensitivity hull K of
the δ-location set, as shown by the polygon with solid lines
in Figure 5b.
K = Conv(∆V)
∪
v1,v2∈ vertices of K(cid:48)(v1 − v2)
∆V =
Next we transform K to its isotropic position KI . We
sample y1, y2,··· , yl uniformly from K. Then a matrix T
can be derived by Equation (6). To verify if T is stable, we
can derive another T(cid:48). If the Frobenius norm ||T(cid:48) − T||F is
small enough (e.g. < 10−3), then we accept T. Otherwise
we repeat above process with larger l. In the end, KI = TK
is the isotropic position of K, as shown in Figure 5c.
Next a point z(cid:48) can be uniformly sampled from KI . We
generate a random variable r from Gamma distribution Γ(3, −1).
(a)
(b)
(c)
Figure 5: (a) Convex hull of ∆X. (b) Finding the sensitivity hull K. (c) Transform K to isotropic position KI . Sample a point z(cid:48).
Let z(cid:48) = rz(cid:48). Then we transform the point z(cid:48) to the original
space by z(cid:48) = T−1z(cid:48). The released location is z = x∗ + z(cid:48).
Algorithm 2 summarizes the process of PIM. Lines 5∼6
can be iterated until T is stable, whereas the computation-
al complexity is not aﬀected by the iterations because the
number of samples is bounded by a constant (by Corollary
5.1).
Algorithm 2 Planar Isotropic Mechanism
Require: , ∆X, x∗
1: K(cid:48) ← Conv(∆X);
2: ∆V ←−
∪
3: K ← Conv(∆V);
4: Repeat lines 5,6 with larger l if T is not stable:
5:
v1,v2∈ vertices of K(cid:48)(v1 − v2);
(cid:80)l
Sample y1, y2,··· , yl uniformly from K;
T ←(cid:16) 1
(cid:17)− 1
2 ;
(cid:46) convex hull of ∆X
(cid:46) sensitivity hull
l
i
i=1 yiyT
6:
7: KI = TK;
8: Uniformly sample z(cid:48) from KI ;
9: Sample r ∼ Γ(3, −1);
10: return z = x∗ + rT−1z(cid:48);
(cid:46) isotropic transformation
(cid:46) release z
Privacy and Performance Analysis. We now present
the privacy property, complexity, and the error of PIM.
Theorem 5.3. Algorithm 2 is -diﬀerentially private on
δ-location set ∆X.
Theorem 5.4. Algorithm 2 takes O(nlog(h) + h2log(h))
time where n is the size of ∆X and h is number of vertices
on Conv(∆X).
(cid:16) 1

(cid:112)Area(K)
(cid:17)
Theorem 5.5. Algorithm 2 has error O
at most, which means it achieves the lower bound in Theorem
4.3.
5.3 Location Inference
The inference of line 8 in Algorithm 1 is a general state-
ment because inference methods depend on speciﬁc release
algorithms. To implement the inference for PIM, we need to
transform the location si and the released location zt to the
isotropic space of KI . Then in Equation (1), the probability
P r(zt|u∗
t = si) can be computed as follows. This completes
the whole algorithm.
P r(zt|u
∗
t = si) =
(cid:48)
(cid:48)
t = Tz; s
z
i = Tsi
2Area(KI )
2
exp(−||z
t − s
i||KI )
(cid:48)
(cid:48)
6. EXPERIMENTAL EVALUATION
In this section we present experimental evaluation of our
method. All algorithms were implemented in Matlab on a
PC with 2.9 GHz Intel i7 CPU and 8 GB Memory.
Datasets. We used two real-world datasets.
I Geolife data. Geolife data [40] was collected from 182
users in a period of over three years.
It recorded a
wide range of users’ outdoor movements, represented
by a series of tuples containing latitude, longitude and
timestamp. The trajectories were updated in a high
frequency, e.g. every 1 ∼ 60 seconds. We extracted all
the trajectories within the 3rd ring of Beijing to train
the Markov model, with the map partitioned into cells
of 0.34 × 0.34 km2.
II Gowalla data. Gowalla data [7] contains 6, 442, 890
check-in locations of 196, 586 users over the period of
Feb. 2009 to Oct. 2010. We extracted all the check-
ins in Los Angeles to train the Markov model, with the
map partitioned into cells of 0.89 × 0.89 km2. Because
check-ins were logged in a relatively low frequency, e.g.
every 1 ∼ 50 minutes, we can examine the diﬀerence of
the results from Gowalla and Geolife.
Metrics. We used the following metrics in our experiment,
including two internal metrics: size of ∆X, drift ratio, and
two sets of utility metrics: distance, precision and recall. We
skip the runtime report because most locations were released
within 0.3 second by PIM.
I Since our privacy deﬁnition is based on δ-location set
∆X, we evaluated the size of ∆X to understand how
∆X grows or changes.
II The deﬁnition of ∆X and the potential limit of Markov
model may cause the true location to fall outside ∆X
(drift). Thus we measured the drift ratio computed as
the number of timestamps the true location is excluded
in ∆X over total number of timestamps.
III We measured the distance between the released location
and the true location, which can be considered as a
?K0v1v2v3v4v5oK(cid:5)(cid:5)(cid:5)(cid:5)∆∆∆∆oz0KI(a) True trace
(b) Size of ∆X
(a) Size vs. 
(b) Size vs. δ
(c) LM released trace
(d) Drift ratio
(c) Drift Ratio vs. 
(d) Drift Ratio vs. δ
(e) PIM released trace
(f) Distance
Figure 6: Performance over time: (a) The true (original) trace;
(c)(e) Released traces; (b) Size of ∆X over time; (d) Drift ratio
over time; (f) Distance over time.
(e) Distance vs. 
(f) Distance vs. δ
Figure 7: Impact of parameters on GeoLife data with popular
M:
(a)(b) Impact of  and δ on size of ∆X; (c)(d) Impact of 
and δ on drift ratio; (e)(f) Impact of  and δ on distance.
general utility metric independent of speciﬁc location
based applications.
IV We also run k nearest neighbor (kNN) queries using
the released locations and report its precision and re-
call compared to the true kNN set using the original
location. Suppose the true kNN set is R, the returned
k(cid:48)NN set (we set k(cid:48) ≥ k) is R(cid:48), precision is deﬁned as
|R ∩ R(cid:48)|/k(cid:48), and recall is deﬁned as |R ∩ R(cid:48)|/k.
6.1 Performance Over Time
In order to show the performance of a release mechanis-
m as a user moves over time, including how ∆X changes,
how often drift happens and how accurate is the perturbed
location, we ﬁrst run a set of experiments for a single test
trajectory with popular M learned from all users. We select-
ed a random test trajectory from Geolife dataset consisting
of 500 timestamps. We tested both PIM and LM at each
timestamp with  = 1 and δ = 0.01. Each method was run
20 times and the average is reported. Figure 6a shows the
original trajectory in map and state (grid) coordinates; Fig-
ures 6c and 6e show the released (perturbed) locations at
each timestamp. We can see that the released locations of
PIM is closer to the true location, compared with LM.
Size of ∆X. From Figure 6b we see that the size of ∆X
does not increase dramatically, instead it maintains at stable
level after a few timestamps. The reason is that by selecting
the δ-location set the inference mechanism only boost prob-
abilities of locations in ∆X. Then the probabilities of other
locations decay gradually. Thus a stable δ-location set can
be maintained.
Drift Ratio. In Figure 6d, the peak of drift ratio happened
in timestamp 200 ∼ 300. This can be explained by the fact
that the true trajectory has a turning corner as in Figure
6a, and the transition probability of making this right turn
is relatively small in the Markov model.
When a drift happens, we use surrogate for release mech-
anisms. Because the surrogate is the nearest cell to the true
location in ∆X and the release mechanism is based on the
surrogate, the posterior probability of the surrogate will be
boosted. Consequently, in the next timestamp the probabil-
ity that ∆X includes the previous true location rises. This
“lagged catch-up” can be veriﬁed by Figures 6f, 6c and 6e.
Distance. The distance is reported in Figure 6f. We can
see that PIM provided more accurate locations than LM for
two reasons. First, because PIM is optimal, the posterior
probability distribution is more accurate than LM. Second,
with such distribution a better (Bayesian) inference can be
10152025303540455044454647484950100200300400500  map coordinatestate coordinate1002003004005002468101214TimestampSize of ∆X  LMPIM10203040504045505510020030040050000.20.40.60.81TimestampDrift ratio  LMPIM1020304050444546474849505110020030040050002468TimestampDistance (km)  LMPIM0.20.40.60.815678910εSize of ∆X  LMPIM−3−2.5−2−1.5−1102030log10(δ)Size of ∆X  LMPIM0.20.40.60.810.380.40.420.440.460.480.5εDrift Ratio  LMPIM−3−2.5−2−1.5−10.20.40.60.8log10(δ)Drift Ratio  LMPIM0.20.40.60.815101520εDistance (km)  LMPIM−3−2.5−2−1.5−124681012log10(δ)Distance (km)  LMPIM(a) Size vs. 
(b) Size vs. δ
(a) Size vs. 
(b) Size vs. δ
(c) Drift Ratio vs. 
(d) Drift Ratio vs. δ
(c) Drift Ratio vs. 
(d) Drift Ratio vs. 
(e) Distance vs. 
(f) Distance vs. δ
(e) Distance vs. 
(f) Distance vs. δ
Figure 8: Impact of parameters on GeoLife data with personal
M:
(a)(b) Impact of  and δ on size of ∆X; (c)(d) Impact of 
and δ on drift ratio; (e)(f) Impact of  and δ on distance.
Figure 9: Impact of parameters on Gowalla data with popular
M:
(a)(b) Impact of  and δ on size of ∆X; (c)(d) Impact of 
and δ on drift ratio; (e)(f) Impact of  and δ on distance.
obtained, making ∆X more accurate for the coming times-
tamp.
6.2
Impact of Parameters
Since the performance may vary for diﬀerent trajectories,