Note that the LOC and veriﬁcation times in Table 1 do not
include HACL(cid:63) and LowParse.
While the DICE engine implementation was relatively
straightforward to verify, to scale the veriﬁcation to
ASN.1/X.509 library and the L0 implementation, we used
the following proof-engineering mechanisms:
Abstraction via F(cid:63) interfaces. We use F(cid:63)’s interface mech-
anism to abstract away irrelevant deﬁnitions from the SMT
solver’s proof context, thereby reducing the size of the SMT
queries. For example, we declare the type of the deﬁnition
parse_asn1_boolean (Section 5.2) in the ASN.1/X.509 library
in an interface ﬁle as follows:
val parse_asn1_boolean
: parser (datatype_of_asn1_type BOOLEAN) boolean_meta
For the clients, the deﬁnition of parse_asn1_boolean is not
important—it is sufﬁcient that the low-level boolean serializer
implementation provides this spec in its type. Therefore, we
add the implementation of parse_asn1_boolean in the separate
implementation ﬁle. When F(cid:63) veriﬁes its clients, only the
Table 1: LOC and veriﬁcation time for DICE(cid:63)
F(cid:63) LOC C LOC Veriﬁcation Time
DICE Engine
L0
533
24,241
205
5,051
1m10s
11m9s
interface ﬁle is in scope, and hence, the implementation details
are hidden from the client proofs.
Proof decompositon. When verifying a function like l0_core
(Figure 6), F(cid:63) and the Z3 SMT solver need to reason about
multiple proof aspects, including arrays, secret bytes, cryp-
tography, and serialization. When all of these proof obliga-
tions are sent as a single query to the SMT solver, the proofs
sometimes don’t scale. We get around this by decomposing
functions with large proof obligations into auxiliary lemmas
with smaller proof obligation. For example, in the case of
l0_core, we prove the modiﬁes theory related properties in a
separate lemma lemma_l0_core_modiﬁes:
let lemma_l0_core_modiﬁes (pub_t: Type) (sec_t: Type)
(ak_pub:array pub_t 32) (ak_priv:array sec_t 32) (h0 h1:mem)
... (∗ other buffers and intermediate memory states ∗) ...
: Lemma ((∗ mod. spec. between intermediate memory states ∗) ...
∧ modiﬁes [ak_pub; ak_priv; ...] h0 h1) = ()
Separating out proof obligations in this manner signiﬁcantly
decreases the total veriﬁcation time of l0_core.
Using meta-programming to discharge proof obligations.
F(cid:63) also has a meta-programming and tactics framework [39]
using which programmers can write F(cid:63) programs to inspect
and prove properties of other F(cid:63) programs. The metaprograms
are evaluated by the F(cid:63) typechecker at the time of typecheck-
ing. For proofs that involve large computations, we used meta-
programming to carry out those computations and simplify
the proof obligations before they are sent to the SMT solver.
This provided signiﬁcant speedups in some cases.
7 Evaluation
In this section, we evaluate DICE(cid:63) by comparing it against
an unveriﬁed, hand-written DICE implementation in terms
of boot time and binary size. The goal of the evaluation is
to ensure that there are no unforeseen overheads of using
veriﬁed code. We evaluate DICE(cid:63) on the STM32H753ZI mi-
crocontroller unit (MCU) from ST Microelectronics [11]. The
STM32H753ZI micro-controller is based on the ARM Cortex-
M7 family of CPUs. It operates at 480 Mhz; it has high-speed
embedded memories, including 2MB of dual bank ﬂash and
1MB of RAM, and various other interfaces and peripherals.
Section 7.1 describes the bootloader and the platform-
speciﬁc interface of DICE(cid:63) for STM32H753ZI, and Sec-
tion 7.2 compares DICE(cid:63) against an unveriﬁed, hand-written
DICE implementation in terms of binary size and boot time
on STM32H753ZI.
1102    30th USENIX Security Symposium
USENIX Association
7.1 DICE(cid:63) for STM32H753ZI
We implement the bootloader and the platform-speciﬁc inter-
face of DICE(cid:63) for STM32H753ZI using a hardware security
feature called secure access mode. This mode enables the
development of security-critical services such as bootloaders
that execute in isolation just after reset. Speciﬁcally, during
manufacturing, a region in ﬂash memory can be conﬁgured
as a secure area, and can be provisioned with code and data
of a secure service. The hardware guarantees that this area
can only be accessed while the CPU is in secure access mode,
which the CPU enters just after reset. While the CPU is in
secure mode, the CPU ignores all debugging events. Once the
CPU exits this mode (using a special instruction), reads to
this area return zero, writes are ignored, and any attempt to
execute code from this area generate errors. The secure area
is also erase protected; i.e., no erase operations on a sector in
this area are permitted.
We implement the bootloader using secure access mode as
follows. We store the bootloader, DICE-engine image, which
includes unveriﬁed platform-speciﬁc interface, and the public
key used by the DICE engine in a secure area in ﬂash memory.
The bootloader receives control after a reset. It checks if UDS
has already been provisioned at a pre-deﬁned location in the
secure area. If the UDS has not been provisioned, then the
bootloader generates a fresh UDS by sampling a hardware
RNG, and stores the UDS in the secure area.
Next, the bootloader transfers control to the DICE engine.
The DICE engine, as per speciﬁcation, authenticates the L0
image, derives CDI and latches UDS by exiting the secure
access mode. Finally, the control comes back to the bootloader
which then transfers control to L0.
We implement the platform-speciﬁc interface of DICE(cid:63)
(Section 4.1) as follows:
• read_uds is implemented by copying UDS stored at a
pre-deﬁned address in secure area to a buffer in RAM.
• disable_uds is empty because there is no explicit mecha-
nism to disable access to UDS on this MCU. Disabling
access is the responsibility of the bootloader.
• clear_stack is implemented by erasing all registers (ex-
cept the stack pointer), and erasing all regions in SRAM,
which holds the stack.
The bootloader and the platform-speciﬁc interface of
DICE(cid:63) together contain 38 lines of assembly and 815 lines of
C code. This code is part of our TCB.
7.2 Comparison with Unveriﬁed DICE
We compare the boot time and the binary size of DICE(cid:63) with
that of an unveriﬁed, handwritten DICE implementation. The
hand-written implementation uses cryptographic primitives
from mbedTLS [7], a cryptographic library commonly used
Table 2: Boot time (milliseconds) for each layer and the binary
size (KB) of unveriﬁed DICE (Unv. DICE) and DICE(cid:63)
Layer
Boot time (ms)
Size (KB)
DICE engine
L0
Unv. DICE DICE(cid:63)
689
208
786
313
Unv. DICE DICE(cid:63)
68
92
72
92
in embedded systems. The two implementations match in all
respects except elliptic curve p-256 [19] used for ﬁrmware
authentication in DICE and generating certiﬁcates and CSRs
in L0. While the hand-written implementation uses p-256,
DICE(cid:63) uses Ed25519. This is because mbedTLS currently
does not support Ed25519, and HACL(cid:63) does not currently
support a side-channel free implementation of p-256.
Table 2 compares the boot time (measured in milliseconds)
of two DICE layers in these implementations. In both layers,
DICE(cid:63) has better performance compared to the unveriﬁed
implementation. In the DICE engine, the difference in boot
times is due to the difference in the performance of P-256
and Ed25519 based image veriﬁcation. This is consistent
with previously reported performance of these curves [60].
All other operations in the DICE engine have comparable
performance. In L0, the difference in boot time is due to the
X.509 certiﬁcate serialization logic. Unveriﬁed code relies on
X.509 support in mbedTLS, whereas veriﬁed code uses our
X.509 custom library built using LowParse.
Table 2 also shows a comparison of the binary sizes. Binary
size is an important metric, especially in embedded systems
where the amount of ﬂash memory is often limited. Both
implementations have a comparable binary size.
In summary, DICE(cid:63) compares favorably with the unveriﬁed
implementation both on performance and binary size, and,
thus, should form the basis for future DICE implementations.
8 Related Work
This paper presents a veriﬁed implementation of DICE [38,
55], which is an emerging industry standard for measured
boot proposed by TCG. There are also efforts on developing
attestation protocols based on DICE [29, 31] and extending
DICE with new features to support secure ﬁrmware updates
and re-provisioning of DICE-powered devices [62].
Hardware solutions for trusted computing such as
TPM [28], ARM TrustZone [14] and Intel SGX [40] are not
suitable for low-cost devices. Compared to the minimal hard-
ware requirements of the DICE architecture, the hardware-
based solutions designed for isolation and attestation of em-
bedded devices, such as TyTAN [21], TrustLite [34], and San-
cus [45,46], are complex and costly [37]. Software-based solu-
tions for device attestation, such as SWATT [52], Pioneer [51],
and VIPER [36], make impractical assumptions [15].
USENIX Association
30th USENIX Security Symposium    1103
DICE(cid:63) focuses on veriﬁcation of memory-safety, full-
functional correctness, and side-channel resistance for the
DICE measured boot protocol. Cook et al. [23] use the CBMC
model checker [35], extended with device-speciﬁc extensions,
to prove memory-safety of the boot code used in the AWS
data centers. Their boot code is not measured or authenticated
boot, the stages in their code only locate, load, and launch
the next stage. As a result, its guarantees, and the implemen-
tation complexity, are much weaker than DICE. Straznickas
et al. [53], in what seems to be a work-in-progress, use the
Coq theorem prover towards verifying functional-correctness
and termination of a ﬁrst-stage bootloader written in RISC-V
assembly. Muduli et al. [44] use model checking to verify that
(model of) a ﬁrmware loader only loads valid images. They
cast the security property as a hyperproperty [22], modeling
TOCTTOU attacks. Hristozov et al. [29] propose a runtime at-
testation scheme, augmenting DICE, to protect against (unde-
tected) runtime compromise of the ﬁrmware code, an unlikely
scenario with fully veriﬁed and memory-safe DICE(cid:63).
For X.509 certiﬁcate generation, we extended the Low-
Parse framework [49], and provide memory-safe, functionally-
correct, and secure ASN.1/X.509 serializers. Tullsen et
al. [59] present veriﬁed encoders and decoders for a subset
of ASN.1 required for vehicle-to-vehicle (V2V) messaging.
However, they do not verify full-functional correctness, but
only an approximation of it, called self-consistency which
states that (a) a valid message that is encoded and decoded
results in the same message, and (b) the decoder only accepts
valid messages. They carry out the veriﬁcation in the Soft-
ware Analysis Workbench [26] tool. Ye et al. [63] focus on
the Protocol Buffers data format and formally verify proto-
buf serializers and deserializers for functional correctness in
Coq. Their work is based on Narcissus [25] that deﬁnes a
non-deterministic data-format and derives veriﬁed encoders
and decoders using a library of higher-order combinators, like
in LowParse. The distinguishing feature of LowParse and our
work is the security proof and the generation of C code from
a veriﬁed implementation.
9 Conclusion
that
We have presented DICE(cid:63), an implementation of the DICE
measured boot protocol
is provably memory-safe,
functionally-correct, and side-channel resistant. A key com-
ponent of DICE(cid:63) is a secure X.509 library that generates
DICE-compliant certiﬁcates and CSRs. We believe this im-
plementation can form a more secure baseline for future im-
plementations of the DICE architecture, avoiding bug-ﬁnding
and ﬁxing cycles. DICE(cid:63) can be extended to further improve
the security of measured boot e.g. by building veriﬁed imple-
mentations of hardware protection mechanisms underlying
the DICE architecture, and of commonly used components in
L0 ﬁrmware such as attestation and key exchange protocols.
References
[1] CVE-2014-0092.
https://nvd.nist.gov/vuln/
detail/CVE-2014-0092.
[2] CVE-2014-1568.
https://nvd.nist.gov/vuln/
detail/CVE-2014-1568.
[3] CVE-2016-0701.
https://nvd.nist.gov/vuln/
detail/CVE-2016-0701.
[4] CVE-2016-2108.
https://nvd.nist.gov/vuln/
detail/CVE-2016-2108.
[5] CVE-2020-0601.
https://nvd.nist.gov/vuln/
detail/CVE-2020-0701.
[6] CVE-2020-9434.
https://nvd.nist.gov/vuln/
detail/CVE-2020-9434.
[7] MbedTLS. https://tls.mbed.org.
[8] Micron CEC1702. https://www.microchip.com/
wwwproducts/en/CEC1702.
[9] Microsoft Projet Cerberus. https://github.com/
Azure/Project-Cerberus.
[10] NXP LPC5500. https://www.nxp.com/products/
processors-and-microcontrollers/arm-
microcontrollers/general-purpose-mcus/
lpc5500-cortex-m33:LPC5500_SERIES.
[11] STM32H753ZI.
https://www.st.com/en/
microcontrollers-microprocessors/
stm32h743-753.html.
[12] Danel Ahman, Cédric Fournet, Catalin Hritcu, Kenji
Maillard, Aseem Rastogi, and Nikhil Swamy. Recalling
a witness: foundations and applications of monotonic
state. Proc. ACM Program. Lang., 2(POPL), 2018.
[13] William A. Arbaugh, David J. Farber, and Jonathan M.
Smith. A secure and reliable bootstrap architecture. In
IEEE Symposium on Security and Privacy (S&P). IEEE
Computer Society, 1997.
[14] A Arm. Security technology-building a secure system
using trustzone technology. ARM Technical White Paper,