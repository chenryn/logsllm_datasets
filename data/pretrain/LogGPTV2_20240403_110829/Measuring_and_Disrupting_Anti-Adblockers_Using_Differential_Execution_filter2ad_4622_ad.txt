4
return a && this.isBlockDetectedOnClassNames(a) ?
this.states.ABP_DETECTED : this.states.
ABP_NOT_DETECTED
5 }
Fig. 6: Taboola’s anti-adblocking script snippet
Next, we illustrate the anti-adblocking logic for Taboola,
in Figure 6. We can see
another big play in the ﬁeld,
that
the key function is getBlockedState() on line
4. As we can see, multiple strings are passed as ar-
the “banner ad” and “sponsored ad”
guments. Notably,
are two known element
ids that are ﬁltered by Easylist.
isBlockDetectedOnClassNames() will create a DOM
element for each string in the list. These elements serve
1Every extension in Chrome is organized in a folder with a globally unique
extension ID assigned by Google as the folder name
8
as baits. Upon the detection of
isBlockDetectedOnClassNames() returns true.
them being blocked,
1 setTimeout(function() {
2
3
4
c.tj(a);
c.ba = (0 < c.gd).toString();
d.h.log("AdBlock - finish long status check.
adBlock = " + c.ba);
c.af = !0;
d.b.yh("OB-AD-BLOCKER-STAT", c.ba);
c.cd.o("onAdBlockStatusReady", [c.ba])
5
6
7
8 }, e)
Fig. 7: Outbrain’s anti-adblocking script snippet
Finally, Outbrain’s anti-adblocking script is illustrated in
Figure 7. We can see the code is miniﬁed and the key check
here is (0 < c.gd) that checks on variable c.gd which
stores the concatenated and encoded value of all deployed
baits to determine if they are still present. To validate our
analysis we manually remove the ﬁlter rules associated with
DIV ids Ads_4, AD_area, ADBox and AdsRec, and can
indeed successfully ﬂip the relevant adblock status ﬁeld in its
reporting request. Outbrain also chooses to save the status
in browser’s cookie (OB-AD-BLOCKER-STAT).
Unlike the multiple-bait strategies used in PageFair and
Taboola, some scripts use the “pixel” technique [29], which
loads a small, unobtrusive piece of image (i.e., pixel) and then
drops a browser cookie for future inter-domain ad re-targeting.
This ad re-targeting technique allows publishers to ensure that
their ads are served only to people who have previously visited
their site. The pixel often contains ads-related keywords in
its URL path, and therefore can be used as a bait object to
detect adblockers. Most of these scripts also silently report
adblocking statistics by using a query string (e.g., adblock=0/1)
in the HTTP request to load the next pixel. Yandex and
Criteo also leverage the same “pixel” technique. mail.ru,
Outbrain and Cloudflare instead create regular DOM
baits and check their presence to detect adblockers. It
is
noteworthy that Criteo, besides silent adblocker reporting,
also switches ads to acceptable ads [17].
the identiﬁed websites are not
Since many popular third-party anti-adblocking scripts
are obfuscated and challenging to manually analyze, we
randomly sample a few popular websites that use non-
obfuscated anti-adblocking scripts. Our goal is to (1) con-
ﬁrm that
false positives,
and (2) understand their detection approach and reaction to
adblockers. We select
these websites from the Alexa top-
1K list: businessinsider.com, nytimes.com, cnn.com, aol.com,
cnet.com, gmx.net,
sourceforge.net, nba.com,
glassdoor.com, expedia.com, iqiyi.com, thefreedictionary.com,
ria.ru,
intel.com, nﬂ.com,
myanimelist.net, kizlarsoruyor.com. All of these websites de-
tect adblockers and some even have visible reactions that
were not reported in prior work [42]. This demonstrates
the usefulness of differential execution analysis in accurately
pinpointing the adblocker detection logic used on any website.
Next we discuss in detail the the anti-adblocking logic of a few
interesting examples.
jeuxvideo.com, gamespot.com,
reddit.com,
The homepage of businessinsider.com is ﬂagged
by our system to have multiple branch divergences. Surpris-
1 var setAdblockerCookie = function(adblocker) {
2
3
d.setTime(d.getTime() + 60 * 60 * 24 * 30 *
var d = new Date();
1000);
4
document.cookie = "__adblocker=" + (adblocker ?
"true" : "false") + "; expires=" + d.
toUTCString() + "; path=/";
5 }
6 var s = document.createElement("script");
7
8 s.setAttribute("src","//www.npttech.com/advertising.
js");
9 s.setAttribute("onerror","setAdblockerCookie(true);"
);
10 s.setAttribute("onload","setAdblockerCookie(false);"
);
11 document.getElementsByTagName("head")[0].appendChild
(s);
Fig.
www.businessinisder.com
First-party
8:
anti-adblocking
script
in
ingly, we do not see any warning messages and the page
seems to be completely ad-free. Upon a closer look, we
realize that the website has a ﬁrst-party script that silently
detects the presence of adblocking and records the infor-
mation into the cookie. The code snippet
is illustrated in
Figure 8. We note that the website injects a bait script at
www.npttech.com/advertising.js and invokes the
pre-deﬁned callbacks either onload() or onerror(), de-
pending on whether the bait scripts gets blocked by adblockers.
As mentioned earlier, our instrumentation currently does not
support callback-based implicit branching which means this
may be a false negative case. Fortunately, as we can see inside
setAdblockerCookie() (which is the registered call-
back in correspondence with onload() and onerror()),
there is a ternary operator that checks the value of variable
adblocker which allows us to correctly detect the branch
divergence.
1 BlockAdBlock.prototype.on = function(detected, fn) {
return this._var.event[detected === !0 ? "detected
2
" : "notDetected"].push(fn), this._options.
debug === !0 && this._log("on", ’A type of
event "’ + (detected === !0 ? "detected" : "
notDetected") + ’" was added’), this}
Fig. 9: First-party anti-adblocking script in nytimes.com
1 var n=document.getElementById(t);
2 n&&0!=n.innerHTML.length&&0!==n.clientHeight&&0!==n.
clientWidth&&0!==n.offsetWidth?e.application.
fire("adblock:detect",{enabled:!1}):e.
application.fire("adblock:detect",{enabled:!0}),
$(i).empty()}
Fig. 10: Third-party anti-adblocking script in aol.com
nytimes.com has a ﬁrst-party script that logs adblocker
usage (see Figure 9. Similarly, aol.com includes a third-party
script from blogsmithmedia.com that ﬁres an application
event when adblocker is detected (see Figure 10). Finally,
9
1 if (!window.isAdblockerDisabled) {
2
3
define(’expads’, function () {
var displayFallbackImage = function (slotConfig)
4
{
...
Fig. 11: First-party anti-adblocking script in expedia.com
expedia.com has a ﬁrst-party script that attempts to load
a fallback image. Interestingly, we are unable to see any
fallback image (because even the fallback image is blocked
by EasyList) when we manually inspect the page.
VI. TOWARDS IMPROVING AD-BLOCKERS
In addition to leveraging differential execution analysis to
detect anti-adblockers, we are interested in understanding how
this knowledge can help strength adblockers, making them
more resistant against anti-adblockers. As we mentioned earlier
in §II, adblockers are currently struggling to keep up with
anti-adblockers due to the challenges in manually analyzing
the anti-adblocking Javscript (which we ﬁnd to be extremely
diverse and complex).
In this section, we attempt two such directions to help
adblockers, with the help of the comprehensive anti-adblocking
knowledge. We describe our solutions, implementations, and
preliminary results.
A. Avoiding Anti-adblockers with JavaScript Rewriting
The differential execution analysis enables us to understand
which branches are entered because of the presence/absence of
adblockers. This knowledge can also naturally help adblockers
to evade anti-adblockers. The idea is to force the outcome of a
branch statement towards the one corresponding to the absence
of adblockers, effectively avoiding any anti-adblocking logic.
However, forcing the outcome of a branch statement may also
cause unexpected side effects. Fortunately, since the execution
path we are attempting to force already occurs in the negative
trace (without adblocker), it is unlikely the anti-adblocking
code we avoid will cause any breakage. In other words, we
expect to not cause any program inconsistency because the
rest of the functionality on a web page is unlikely to depend
on the missed anti-adblocking code (as the example in Figure 1
illustrated). Note that our Javascript rewrite is targeting speciﬁc
branches, as opposed to systematically exploring all possible
program paths (which is sometimes desired for malware anal-
ysis purposes [38]). Much more care has to be given to ensure
the reliability of such an exhaustive program exploration
(e.g., checkpointing and rollback are commonly required). In
comparison, our solution is much more lightweight and easier
to implement.
There are two options for rewriting a condition in a branch:
(1) we replace the original condition completely with the
desired branch outcome directly; or (2) we keep the original
condition but still force the outcome by appending true or false
at the end. Figure 12 illustrates the differences. Figure 12(a)
shows the original JavaScript code that attempts to detect
adblockers. Figure 12(b) and Figure 12(c) correspond to the
two rewrite choices above respectively (both can force branch
outcome to false successfully). The difference is that
the
ﬁrst option prevents any original code in the condition to be
executed (i.e., hasBlock()), while the second option does
allow the original function to be invoked. For the ﬁrst option
of not allowing the adblocker detection code (hasBlock())
to execute, it can potentially have negative impact on the
remaining code. For instance, a variable may be deﬁned
only inside the function. Without invoking the function, the
subsequent access to the variable may become undeﬁned and
cause site breakage. The second option avoids this issue and
we therefore prefer it.
We can even perform more ﬁne-grained rewrite manage-
ment, i.e., perform the rewrite only when the call stack matches
the ones collected in the trace. For instance, if function A and
B both call C, and a divergence is discovered in C only when
A calls C. Then the rewrite should rewrite the condition only
when A calls C as well. The rewritten code would look like
the following for the same example as in Figure 12:
1 if (hasBlock() && matches(StackTrace.getSync(),
recorded_stacktrace) && false) {
$(’.notification’).show();
2
3 }
This allows condition rewrite to operate with more precision
and is less likely to affect other execution paths that happen to
also depend on the same code block (and may be incorrectly
forced to either true or false all
the time). Unfortunately,
without
instrumenting the JavaScript execution engine, we
cannot get call stack (or stack trace) in JavaScript without
relying on non-standard features [19]. Thus, this approach may
not always work even though most modern browsers such as
Chrome and Firefox have some support for it [21]. Therefore,
we opt not to use it in our current implementation.
When two aligned traces are found to have multiple nested
branch divergences, it is important to decide whether to rewrite
all of the branch outcomes or only a subset of them. Taking
the example in Figure 13, we can force either the return
of isVisible() call or condition of Width == 0 &&
Height == 0 to false. In general, we prefer to rewrite
the condition at the outer level, meaning isVisible(obj)
will be rewritten to isVisible(obj) || true. This is
because rewriting at lower level can potentially cause func-
tionality breakage as low-level functions tend to be reused for
various purposes (potentially beyond adblocker detection).
As mentioned earlier, a typical anti-adblocker requires
conditional statements to test whether the desirable ad-related
elements are still present in page, and trigger anti-adblocking
behaviors accordingly. These elements can either be real ads,
or sometimes baits intentionally placed for adblocker detection
[42]. It is possible that sophisticated anti-adblocking scripts
(such as PageFair) will conduct multiple rounds of such
checks.
A simpliﬁed real example from www.pandajogosgratis.com
is illustrated in Figure 14. We note that the ﬁrst check considers
whether the canRunAds element is blocked or not (‘undeﬁned’
means that
it
continues with a secondary check which looks at the length
of an element. It is not hard to tell that the positive trace
(with adblocker) represented on the control ﬂow graph would
be (1:false) and the negative trace (without adblocker) would
is blocked). If no blocking is detected,
it
10
1 if (hasBlock()) {
2
3 }
$(’.notification’).show();
1 if (false) {
2
3 }
$(’.notification’).show();
1 if (hasBlock() && false) {
2
3 }
$(’.notification’).show();
(a) Original code
(b) Condition rewrite (replacement)
(c) Condition rewrite (append-only)
Fig. 12: Choices of condition rewrite
// pass
} else {
if(isVisible(ad)) {
1 function checkAdVisible() {
2
3
4
5
6
7 }
8 function isVisible(obj) {
9
// penalizing user
}
== 0)? False: True;
10 }
return (obj.offsetWidth == 0 && obj.offsetHeight
Fig. 13: Nested branch divergence example
be (1:true, 2:true). Now when we analyze the two traces
differentially, only the ﬁrst branch divergence can be detected.
Unfortunately it is not enough to force only the ﬁrst branch