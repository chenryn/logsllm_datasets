{"created": "2020-06-29T15:36:41.535Z", "created_by_ref": "", "description": "Adversaries may carry out malicious operations using a virtual instance to avoid detection. A wide variety of virtualization technologies exist that allow for the emulation of a computer or computing environment. By running malicious code inside of a virtual instance, adversaries can hide artifacts associated with their behavior from security tools that are unable to monitor activity inside the virtual instance. Additionally, depending on the virtual networking implementation (ex: bridged adapter), network traffic generated by the virtual instance can be difficult to trace back to the compromised host as the IP address and hostname might not match known values.(Citation: SingHealth Breach Jan 2019)\n\nAdversaries may utilize native support for virtualization (ex: Hyper-V) or drop the necessary files to run a virtual instance (ex: VirtualBox binaries). After running a virtual instance, adversaries may create a shared folder between the guest and host with permissions that enable the virtual instance to interact with the host file system.(Citation: Sophos Ragnar May 2020)", "external_references": [{"external_id": "T1564.006", "source_name": "mitre-attack", "url": "https://attack.mitre.org/techniques/T1564/006"}, {"description": "Committee of Inquiry into the Cyber Attack on SingHealth. (2019, January 10). Public Report of the Committee of Inquiry into the Cyber Attack on Singapore Health Services Private Limited's Patient Database. Retrieved June 29, 2020.", "source_name": "SingHealth Breach Jan 2019", "url": "https://www.mci.gov.sg/-/media/mcicorp/doc/report-of-the-coi-into-the-cyber-attack-on-singhealth-10-jan-2019.ashx"}, {"description": "SophosLabs. (2020, May 21). Ragnar Locker ransomware deploys virtual machine to dodge security. Retrieved June 29, 2020.", "source_name": "Sophos Ragnar May 2020", "url": "https://news.sophos.com/en-us/2020/05/21/ragnar-locker-ransomware-deploys-virtual-machine-to-dodge-security/"}, {"description": "Johann Rehberger. (2020, September 23). Beware of the Shadowbunny - Using virtual machines to persist and evade detections. Retrieved September 22, 2021.", "source_name": "Shadowbunny VM Defense Evasion", "url": "https://embracethered.com/blog/posts/2020/shadowbunny-virtual-machine-red-teaming-technique/"}], "id": "attack-", "kill_chain_phases": [{"kill_chain_name": "mitre-attack", "phase_name": "defense-evasion"}], "modified": "2021-10-14T22:21:59.708Z", "name": "Run Virtual Instance", "object_marking_refs": ["marking-"], "type": "attack-pattern", "x_mitre_contributors": ["Johann Rehberger", "Janantha Marasinghe", "Menachem Shafran, XM Cyber"], "x_mitre_data_sources": ["Image: Image Metadata", "Process: Process Creation", "Command: Command Execution", "Service: Service Creation", "File: File Creation", "Windows Registry: Windows Registry Key Modification"], "x_mitre_detection": "Consider monitoring for files and processes associated with running a virtual instance, such as binary files associated with common virtualization technologies (ex: VirtualBox, VMware, QEMU, Hyper-V). Consider monitoring the size of virtual machines running on the system. Adversaries may create virtual images which are smaller than those of typical virtual machines.(Citation: Shadowbunny VM Defense Evasion) Network adapter information may also be helpful in detecting the use of virtual instances.\n\nConsider monitoring for process command-line arguments that may be atypical for benign use of virtualization software. Usage of virtualization binaries or command-line arguments associated with running a silent installation may be especially suspect (ex. -silent, -ignore-reboot), as well as those associated with running a headless (in the background with no UI) virtual instance (ex. VBoxManage startvm $VM "all\").\n\nMonitor for commands which enable hypervisors such as Hyper-V.  If virtualization software is installed by the adversary, the Registry may provide detection opportunities. Consider monitoring for [Windows Service](https://attack.mitre.org/techniques/T1543/003), with respect to virtualization software. \n\nBenign usage of virtualization technology is common in enterprise environments, data and events should not be viewed in isolation, but as part of a chain of behavior.", "x_mitre_domains": ["enterprise-attack"], "x_mitre_is_subtechnique": true, "x_mitre_modified_by_ref": "", "x_mitre_permissions_required": ["User"], "x_mitre_platforms": ["Linux", "macOS", "Windows"], "x_mitre_version": "1.1"}
{"created": "2017-12-14T16:46:06.044Z", "created_by_ref": "", "description": "The trap command allows programs and shells to specify commands that will be executed upon receiving interrupt signals. A common situation is a script allowing for graceful termination and handling of common  keyboard interrupts like ctrl+c and ctrl+d. Adversaries can use this to register code to be executed when the shell encounters specific interrupts either to gain execution or as a persistence mechanism. Trap commands are of the following format trap 'command list' signals where \"command list\" will be executed when \"signals\" are received.(Citation: Trap Manual)(Citation: Cyberciti Trap Statements)", "external_references": [{"external_id": "T1154", "source_name": "mitre-attack", "url": "https://attack.mitre.org/techniques/T1154"}, {"description": "ss64. (n.d.). trap. Retrieved May 21, 2019.", "source_name": "Trap Manual", "url": "https://ss64.com/bash/trap.html"}, {"description": "Cyberciti. (2016, March 29). Trap statement. Retrieved May 21, 2019.", "source_name": "Cyberciti Trap Statements", "url": "https://bash.cyberciti.biz/guide/Trap_statement"}], "id": "attack-", "kill_chain_phases": [{"kill_chain_name": "mitre-attack", "phase_name": "execution"}, {"kill_chain_name": "mitre-attack", "phase_name": "persistence"}], "modified": "2020-01-24T14:18:13.478Z", "name": "Trap", "object_marking_refs": ["marking-"], "revoked": true, "type": "attack-pattern", "x_mitre_detection": "Trap commands must be registered for the shell or programs, so they appear in files. Monitoring files for suspicious or overly broad trap commands can narrow down suspicious behavior during an investigation. Monitor for suspicious processes executed through trap interrupts.", "x_mitre_domains": ["enterprise-attack"], "x_mitre_is_subtechnique": false, "x_mitre_modified_by_ref": "", "x_mitre_permissions_required": ["User", "Administrator"], "x_mitre_platforms": ["Linux", "macOS"], "x_mitre_version": "1.1"}
{"created": "2018-04-18T17:59:24.739Z", "created_by_ref": "", "description": "Adversaries may attempt to access detailed information about the password policy used within an enterprise network or cloud environment. Password policies are a way to enforce complex passwords that are difficult to guess or crack through [Brute Force](https://attack.mitre.org/techniques/T1110). This information may help the adversary to create a list of common passwords and launch dictionary and/or brute force attacks which adheres to the policy (e.g. if the minimum password length should be 8, then not trying passwords such as 'pass123'; not checking for more than 3-4 passwords per account if the lockout is set to 6 as to not lock out accounts).\n\nPassword policies can be set and discovered on Windows, Linux, and macOS systems via various command shell utilities such as net accounts (/domain), Get-ADDefaultDomainPasswordPolicy, chage -l , cat /etc/pam.d/common-password, and pwpolicy getaccountpolicies (Citation: Superuser Linux Password Policies) (Citation: Jamf User Password Policies). Adversaries may also leverage a [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) on network devices to discover password policy information (e.g. show aaa, show aaa common-criteria policy all).(Citation: US-CERT-TA18-106A)\n\nPassword policies can be discovered in cloud environments using available APIs such as GetAccountPasswordPolicy in AWS (Citation: AWS GetPasswordPolicy).", "external_references": [{"external_id": "T1201", "source_name": "mitre-attack", "url": "https://attack.mitre.org/techniques/T1201"}, {"description": "Amazon Web Services. (n.d.). AWS API GetAccountPasswordPolicy. Retrieved June 8, 2021.", "source_name": "AWS GetPasswordPolicy", "url": "https://docs.aws.amazon.com/IAM/latest/APIReference/API_GetAccountPasswordPolicy.html"}, {"description": "Holland, J. (2016, January 25). User password policies on non AD machines. Retrieved April 5, 2018.", "source_name": "Jamf User Password Policies", "url": "https://www.jamf.com/jamf-nation/discussions/18574/user-password-policies-on-non-ad-machines"}, {"description": "Matutiae, M. (2014, August 6). How to display password policy information for a user (Ubuntu)?. Retrieved April 5, 2018.", "source_name": "Superuser Linux Password Policies", "url": "https://superuser.com/questions/150675/how-to-display-password-policy-information-for-a-user-ubuntu"}, {"description": "US-CERT. (2018, April 20). Alert (TA18-106A) Russian State-Sponsored Cyber Actors Targeting Network Infrastructure Devices. Retrieved October 19, 2020.", "source_name": "US-CERT-TA18-106A", "url": "https://www.us-cert.gov/ncas/alerts/TA18-106A"}], "id": "attack-", "kill_chain_phases": [{"kill_chain_name": "mitre-attack", "phase_name": "discovery"}], "modified": "2022-09-06T22:01:45.067Z", "name": "Password Policy Discovery", "object_marking_refs": ["marking-"], "revoked": false, "type": "attack-pattern", "x_mitre_attack_spec_version": "2.1.0", "x_mitre_contributors": ["Regina Elwell", "Sudhanshu Chauhan, @Sudhanshu_C", "Isif Ibrahima, Mandiant", "Austin Clark, @c2defense"], "x_mitre_data_sources": ["User Account: User Account Metadata", "Process: Process Creation", "Command: Command Execution"], "x_mitre_deprecated": false, "x_mitre_detection": "Monitor logs and processes for tools and command line arguments that may indicate they're being used for password policy discovery. Correlate that activity with other suspicious activity from the originating system to reduce potential false positives from valid user or administrator activity. Adversaries will likely attempt to find the password policy early in an operation and the activity is likely to happen with other Discovery activity.", "x_mitre_domains": ["enterprise-attack"], "x_mitre_is_subtechnique": false, "x_mitre_modified_by_ref": "", "x_mitre_platforms": ["Windows", "Linux", "macOS", "IaaS", "Network"], "x_mitre_version": "1.5"}, {"created": "2020-01-22T21:04:23.285Z", "created_by_ref": "", "description": "Adversaries may establish persistence and/or elevate privileges using system mechanisms that trigger execution based on specific events. Various operating systems have means to monitor and subscribe to events such as logons or other user activity such as running specific applications/binaries. Cloud environments may also support various functions and services that monitor and can be invoked in response to specific cloud events.(Citation: Backdooring an AWS account)(Citation: Varonis Power Automate Data Exfiltration)(Citation: Microsoft DART Case Report 001)\n\nAdversaries may abuse these mechanisms as a means of maintaining persistent access to a victim via repeatedly executing malicious code. After gaining access to a victim system, adversaries may create/modify event triggers to point to malicious content that will be executed whenever the event trigger is invoked.(Citation: FireEye WMI 2015)(Citation: Malware Persistence on OS X)(Citation: amnesia malware)\n\nSince the execution can be proxied by an account with higher permissions, such as SYSTEM or service accounts, an adversary may be able to abuse these triggered execution mechanisms to escalate their privileges. ", "external_references": [{"external_id": "T1546", "source_name": "mitre-attack", "url": "https://attack.mitre.org/techniques/T1546"}, {"description": "Ballenthin, W., et al. (2015). Windows Management Instrumentation (WMI) Offense, Defense, and Forensics. Retrieved March 30, 2016.", "source_name": "FireEye WMI 2015", "url": "https://www.fireeye.com/content/dam/fireeye-www/global/en/current-threats/pdfs/wp-windows-management-instrumentation.pdf"}, {"description": "Berk Veral. (2020, March 9). Real-life cybercrime stories from DART, the Microsoft Detection and Response Team. Retrieved May 27, 2022.", "source_name": "Microsoft DART Case Report 001", "url": "https://www.microsoft.com/security/blog/2020/03/09/real-life-cybercrime-stories-dart-microsoft-detection-and-response-team"}, {"description": "Claud Xiao, Cong Zheng, Yanhui Jia. (2017, April 6). New IoT/Linux Malware Targets DVRs, Forms Botnet. Retrieved February 19, 2018.", "source_name": "amnesia malware", "url": "https://researchcenter.paloaltonetworks.com/2017/04/unit42-new-iotlinux-malware-targets-dvrs-forms-botnet/"}, {"description": "Daniel Grzelak. (2016, July 9). Backdooring an AWS account. Retrieved May 27, 2022.", "source_name": "Backdooring an AWS account", "url": "https://medium.com/daniel-grzelak/backdooring-an-aws-account-da007d36f8f9"}, {"description": "Eric Saraga. (2022, February 2). Using Power Automate for Covert Data Exfiltration in Microsoft 365. Retrieved May 27, 2022.", "source_name": "Varonis Power Automate Data Exfiltration", "url": "https://www.varonis.com/blog/power-automate-data-exfiltration"}, {"description": "Patrick Wardle. (2015). Malware Persistence on OS X Yosemite. Retrieved July 10, 2017.", "source_name": "Malware Persistence on OS X", "url": "https://www.virusbulletin.com/uploads/pdf/conference/vb2014/VB2014-Wardle.pdf"}], "id": "attack-", "kill_chain_phases": [{"kill_chain_name": "mitre-attack", "phase_name": "privilege-escalation"}, {"kill_chain_name": "mitre-attack", "phase_name": "persistence"}], "modified": "2022-10-19T15:44:20.456Z", "name": "Event Triggered Execution", "object_marking_refs": ["marking-"], "revoked": false, "type": "attack-pattern", "x_mitre_attack_spec_version": "2.1.0", "x_mitre_data_sources": ["File: File Metadata", "File: File Modification", "File: File Creation", "Process: Process Creation", "Windows Registry: Windows Registry Key Modification", "WMI: WMI Creation", "Module: Module Load", "Cloud Service: Cloud Service Modification", "Command: Command Execution"], "x_mitre_deprecated": false, "x_mitre_detection": "Monitoring for additions or modifications of mechanisms that could be used to trigger event-based execution, especially the addition of abnormal commands such as execution of unknown programs, opening network sockets, or reaching out across the network. Also look for changes that do not line up with updates, patches, or other planned administrative activity. \n\nThese mechanisms may vary by OS, but are typically stored in central repositories that store configuration information such as the Windows Registry, Common Information Model (CIM), and/or specific named files, the last of which can be hashed and compared to known good values. \n\nMonitor for processes, API/System calls, and other common ways of manipulating these event repositories. \n\nTools such as Sysinternals Autoruns can be used to detect changes to execution triggers that could be attempts at persistence. Also look for abnormal process call trees for execution of other commands that could relate to Discovery actions or other techniques.  \n\nMonitor DLL loads by processes, specifically looking for DLLs that are not recognized or not normally loaded into a process. Look for abnormal process behavior that may be due to a process loading a malicious DLL. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as making network connections for Command and Control, learning details about the environment through Discovery, and conducting Lateral Movement. ", "x_mitre_domains": ["enterprise-attack"], "x_mitre_is_subtechnique": false, "x_mitre_modified_by_ref": "", "x_mitre_platforms": ["Linux", "macOS", "Windows", "SaaS", "IaaS", "Office 365"], "x_mitre_version": "1.2"}, {"created": "2020-01-24T14:13:45.936Z", "created_by_ref": "", "description": "Adversaries may establish persistence through executing malicious commands triggered by a user\u2019s shell. User [Unix Shell](https://attack.mitre.org/techniques/T1059/004)s execute several configuration scripts at different points throughout the session based on events. For example, when a user opens a command-line interface or remotely logs in (such as via SSH) a login shell is initiated. The login shell executes scripts from the system (/etc) and the user\u2019s home directory (~/) to configure the environment. All login shells on a system use /etc/profile when initiated. These configuration scripts run at the permission level of their directory and are often used to set environment variables, create aliases, and customize the user\u2019s environment. When the shell exits or terminates, additional shell scripts are executed to ensure the shell exits appropriately. \n\nAdversaries may attempt to establish persistence by inserting commands into scripts automatically executed by shells. Using bash as an example, the default shell for most GNU/Linux systems, adversaries may add commands that launch malicious binaries into the /etc/profile and /etc/profile.d files.(Citation: intezer-kaiji-malware)(Citation: bencane blog bashrc) These files typically require root permissions to modify and are executed each time any shell on a system launches. For user level permissions, adversaries can insert malicious commands into ~/.bash_profile, ~/.bash_login, or ~/.profile which are sourced when a user opens a command-line interface or connects remotely.(Citation: anomali-rocke-tactics)(Citation: Linux manual bash invocation) Since the system only executes the first existing file in the listed order, adversaries have used ~/.bash_profile to ensure execution. Adversaries have also leveraged the ~/.bashrc file which is additionally executed if the connection is established remotely or an additional interactive shell is opened, such as a new tab in the command-line interface.(Citation: Tsunami)(Citation: anomali-rocke-tactics)(Citation: anomali-linux-rabbit)(Citation: Magento) Some malware targets the termination of a program to trigger execution, adversaries can use the ~/.bash_logout file to execute malicious commands at the end of a session. \n\nFor macOS, the functionality of this technique is similar but may leverage zsh, the default shell for macOS 10.15+. When the Terminal.app is opened, the application launches a zsh login shell and a zsh interactive shell. The login shell configures the system environment using /etc/profile, /etc/zshenv, /etc/zprofile, and /etc/zlogin.(Citation: ScriptingOSX zsh)(Citation: PersistentJXA_leopitt)(Citation: code_persistence_zsh)(Citation: macOS MS office sandbox escape) The login shell then configures the user environment with ~/.zprofile and ~/.zlogin. The interactive shell uses the ~/.zshrc to configure the user environment. Upon exiting, /etc/zlogout and ~/.zlogout are executed. For legacy programs, macOS executes /etc/bashrc on startup.", "external_references": [{"external_id": "T1546.004", "source_name": "mitre-attack", "url": "https://attack.mitre.org/techniques/T1546/004"}, {"description": "Paul Litvak. (2020, May 4). Kaiji: New Chinese Linux malware turning to Golang. Retrieved December 17, 2020.", "source_name": "intezer-kaiji-malware", "url": "https://www.intezer.com/blog/research/kaiji-new-chinese-linux-malware-turning-to-golang/"}, {"description": "Benjamin Cane. (2013, September 16). Understanding a little more about /etc/profile and /etc/bashrc. Retrieved February 25, 2021.", "source_name": "bencane blog bashrc", "url": "https://bencane.com/2013/09/16/understanding-a-little-more-about-etcprofile-and-etcbashrc/"}, {"description": "Anomali Threat Research. (2019, October 15). Illicit Cryptomining Threat Actor Rocke Changes Tactics, Now More Difficult to Detect. Retrieved December 17, 2020.", "source_name": "anomali-rocke-tactics", "url": "https://www.anomali.com/blog/illicit-cryptomining-threat-actor-rocke-changes-tactics-now-more-difficult-to-detect"}, {"description": "ArchWiki. (2021, January 19). Bash. Retrieved February 25, 2021.", "source_name": "Linux manual bash invocation", "url": "https://wiki.archlinux.org/index.php/Bash#Invocation"}, {"description": "Claud Xiao and Cong Zheng. (2017, April 6). New IoT/Linux Malware Targets DVRs, Forms Botnet. Retrieved December 17, 2020.", "source_name": "Tsunami", "url": "https://unit42.paloaltonetworks.com/unit42-new-iotlinux-malware-targets-dvrs-forms-botnet/"}, {"description": "Anomali Threat Research. (2018, December 6). Pulling Linux Rabbit/Rabbot Malware Out of a Hat. Retrieved December 17, 2020.", "source_name": "anomali-linux-rabbit", "url": "https://www.anomali.com/blog/pulling-linux-rabbit-rabbot-malware-out-of-a-hat"}, {"description": "Cesar Anjos. (2018, May 31). Shell Logins as a Magento Reinfection Vector. Retrieved December 17, 2020.", "source_name": "Magento", "url": "https://blog.sucuri.net/2018/05/shell-logins-as-a-magento-reinfection-vector.html"}, {"description": "Armin Briegel. (2019, June 5). Moving to zsh, part 2: Configuration Files. Retrieved February 25, 2021.", "source_name": "ScriptingOSX zsh", "url": "https://scriptingosx.com/2019/06/moving-to-zsh-part-2-configuration-files/"}, {"description": "Leo Pitt. (2020, August 6). Persistent JXA - A poor man's Powershell for macOS. Retrieved January 11, 2021.", "source_name": "PersistentJXA_leopitt", "url": "https://posts.specterops.io/persistent-jxa-66e1c3cd1cf5"}, {"description": "Leo Pitt. (2020, November 11). Github - PersistentJXA/BashProfilePersist.js. Retrieved January 11, 2021.", "source_name": "code_persistence_zsh", "url": "https://github.com/D00MFist/PersistentJXA/blob/master/BashProfilePersist.js"}, {"description": "Cedric Owens. (2021, May 22). macOS MS Office Sandbox Brain Dump. Retrieved August 20, 2021.", "source_name": "macOS MS office sandbox escape", "url": "https://cedowens.medium.com/macos-ms-office-sandbox-brain-dump-4509b5fed49a"}, {"description": "Patrick Wardle. (2019, September 17). Writing a File Monitor with Apple's Endpoint Security Framework. Retrieved December 17, 2020.", "source_name": "ESF_filemonitor", "url": "https://objective-see.com/blog/blog_0x48.html"}], "id": "attack-", "kill_chain_phases": [{"kill_chain_name": "mitre-attack", "phase_name": "privilege-escalation"}, {"kill_chain_name": "mitre-attack", "phase_name": "persistence"}], "modified": "2021-08-20T18:01:52.120Z", "name": "Unix Shell Configuration Modification", "object_marking_refs": ["marking-"], "type": "attack-pattern", "x_mitre_contributors": ["Robert Wilson", "Tony Lambert, Red Canary"], "x_mitre_data_sources": ["File: File Creation", "File: File Modification", "Process: Process Creation", "Command: Command Execution"], "x_mitre_detection": "While users may customize their shell profile files, there are only certain types of commands that typically appear in these files. Monitor for abnormal commands such as execution of unknown programs, opening network sockets, or reaching out across the network when user profiles are loaded during the login process.\n\nMonitor for changes to /etc/profile and /etc/profile.d, these files should only be modified by system administrators. MacOS users can leverage Endpoint Security Framework file events monitoring these specific files.(Citation: ESF_filemonitor) \n\nFor most Linux and macOS systems, a list of file paths for valid shell options available on a system are located in the /etc/shells file.\n", "x_mitre_domains": ["enterprise-attack"], "x_mitre_is_subtechnique": true, "x_mitre_modified_by_ref": "", "x_mitre_permissions_required": ["User", "Administrator"], "x_mitre_platforms": ["Linux", "macOS"], "x_mitre_version": "2.1"}, {"created": "2018-01-16T16:13:52.465Z", "created_by_ref": "", "description": "Adversaries may gather credential material by invoking or forcing a user to automatically provide authentication information through a mechanism in which they can intercept.\n\nThe Server Message Block (SMB) protocol is commonly used in Windows networks for authentication and communication between systems for access to resources and file sharing. When a Windows system attempts to connect to an SMB resource it will automatically attempt to authenticate and send credential information for the current user to the remote system. (Citation: Wikipedia Server Message Block) This behavior is typical in enterprise environments so that users do not need to enter credentials to access network resources.\n\nWeb Distributed Authoring and Versioning (WebDAV) is also typically used by Windows systems as a backup protocol when SMB is blocked or fails. WebDAV is an extension of HTTP and will typically operate over TCP ports 80 and 443. (Citation: Didier Stevens WebDAV Traffic) (Citation: Microsoft Managing WebDAV Security)\n\nAdversaries may take advantage of this behavior to gain access to user account hashes through forced SMB/WebDAV authentication. An adversary can send an attachment to a user through spearphishing that contains a resource link to an external server controlled by the adversary (i.e. [Template Injection](https://attack.mitre.org/techniques/T1221)), or place a specially crafted file on navigation path for privileged accounts (e.g. .SCF file placed on desktop) or on a publicly accessible share to be accessed by victim(s). When the user's system accesses the untrusted resource it will attempt authentication and send information, including the user's hashed credentials, over SMB to the adversary controlled server. (Citation: GitHub Hashjacking) With access to the credential hash, an adversary can perform off-line [Brute Force](https://attack.mitre.org/techniques/T1110) cracking to gain access to plaintext credentials. (Citation: Cylance Redirect to SMB)\n\nThere are several different ways this can occur. (Citation: Osanda Stealing NetNTLM Hashes) Some specifics from in-the-wild use include:\n\n* A spearphishing attachment containing a document with a resource that is automatically loaded when the document is opened (i.e. [Template Injection](https://attack.mitre.org/techniques/T1221)). The document can include, for example, a request similar to file[:]//[remote address]/Normal.dotm to trigger the SMB request. (Citation: US-CERT APT Energy Oct 2017)\n* A modified .LNK or .SCF file with the icon filename pointing to an external reference such as \\\\[remote address]\\pic.png that will force the system to load the resource when the icon is rendered to repeatedly gather credentials. (Citation: US-CERT APT Energy Oct 2017)", "external_references": [{"external_id": "T1187", "source_name": "mitre-attack", "url": "https://attack.mitre.org/techniques/T1187"}, {"description": "Wikipedia. (2017, December 16). Server Message Block. Retrieved December 21, 2017.", "source_name": "Wikipedia Server Message Block", "url": "https://en.wikipedia.org/wiki/Server_Message_Block"}, {"description": "Stevens, D. (2017, November 13). WebDAV Traffic To Malicious Sites. Retrieved December 21, 2017.", "source_name": "Didier Stevens WebDAV Traffic", "url": "https://blog.didierstevens.com/2017/11/13/webdav-traffic-to-malicious-sites/"}, {"description": "Microsoft. (n.d.). Managing WebDAV Security (IIS 6.0). Retrieved December 21, 2017.", "source_name": "Microsoft Managing WebDAV Security", "url": "https://www.microsoft.com/technet/prodtechnol/WindowsServer2003/Library/IIS/4beddb35-0cba-424c-8b9b-a5832ad8e208.mspx"}, {"description": "Dunning, J. (2016, August 1). Hashjacking. Retrieved December 21, 2017.", "source_name": "GitHub Hashjacking", "url": "https://github.com/hob0/hashjacking"}, {"description": "Cylance. (2015, April 13). Redirect to SMB. Retrieved December 21, 2017.", "source_name": "Cylance Redirect to SMB", "url": "https://www.cylance.com/content/dam/cylance/pdfs/white_papers/RedirectToSMB.pdf"}, {"description": "Osanda Malith Jayathissa. (2017, March 24). Places of Interest in Stealing NetNTLM Hashes. Retrieved January 26, 2018.", "source_name": "Osanda Stealing NetNTLM Hashes", "url": "https://osandamalith.com/2017/03/24/places-of-interest-in-stealing-netntlm-hashes/"}, {"description": "US-CERT. (2017, October 20). Alert (TA17-293A): Advanced Persistent Threat Activity Targeting Energy and Other Critical Infrastructure Sectors. Retrieved November 2, 2017.", "source_name": "US-CERT APT Energy Oct 2017", "url": "https://www.us-cert.gov/ncas/alerts/TA17-293A"}], "id": "attack-", "kill_chain_phases": [{"kill_chain_name": "mitre-attack", "phase_name": "credential-access"}], "modified": "2020-06-19T17:16:41.470Z", "name": "Forced Authentication", "object_marking_refs": ["marking-"], "type": "attack-pattern", "x_mitre_contributors": ["Teodor Cimpoesu", "Sudhanshu Chauhan, @Sudhanshu_C"], "x_mitre_data_sources": ["Network Traffic: Network Traffic Content", "File: File Access", "Network Traffic: Network Traffic Flow", "File: File Modification", "File: File Creation"], "x_mitre_detection": "Monitor for SMB traffic on TCP ports 139, 445 and UDP port 137 and WebDAV traffic attempting to exit the network to unknown external systems. If attempts are detected, then investigate endpoint data sources to find the root cause. For internal traffic, monitor the workstation-to-workstation unusual (vs. baseline) SMB traffic. For many networks there should not be any, but it depends on how systems on the network are configured and where resources are located.\n\nMonitor creation and modification of .LNK, .SCF, or any other files on systems and within virtual environments that contain resources that point to external network resources as these could be used to gather credentials when the files are rendered. (Citation: US-CERT APT Energy Oct 2017)", "x_mitre_domains": ["enterprise-attack"], "x_mitre_is_subtechnique": false, "x_mitre_modified_by_ref": "", "x_mitre_permissions_required": ["User"], "x_mitre_platforms": ["Windows"], "x_mitre_version": "1.2"}, {"created": "2020-02-18T18:34:49.414Z", "created_by_ref": "", "description": "Adversaries may use SID-History Injection to escalate privileges and bypass access controls. The Windows security identifier (SID) is a unique value that identifies a user or group account. SIDs are used by Windows security in both security descriptors and access tokens. (Citation: Microsoft SID) An account can hold additional SIDs in the SID-History Active Directory attribute (Citation: Microsoft SID-History Attribute), allowing inter-operable account migration between domains (e.g., all values in SID-History are included in access tokens).\n\nWith Domain Administrator (or equivalent) rights, harvested or well-known SID values (Citation: Microsoft Well Known SIDs Jun 2017) may be inserted into SID-History to enable impersonation of arbitrary users/groups such as Enterprise Administrators. This manipulation may result in elevated access to local resources and/or access to otherwise inaccessible domains via lateral movement techniques such as [Remote Services](https://attack.mitre.org/techniques/T1021), [SMB/Windows Admin Shares](https://attack.mitre.org/techniques/T1021/002), or [Windows Remote Management](https://attack.mitre.org/techniques/T1021/006).", "external_references": [{"external_id": "T1134.005", "source_name": "mitre-attack", "url": "https://attack.mitre.org/techniques/T1134/005"}, {"description": "Microsoft. (n.d.). Security Identifiers. Retrieved November 30, 2017.", "source_name": "Microsoft SID", "url": "https://msdn.microsoft.com/library/windows/desktop/aa379571.aspx"}, {"description": "Microsoft. (n.d.). Active Directory Schema - SID-History attribute. Retrieved November 30, 2017.", "source_name": "Microsoft SID-History Attribute", "url": "https://msdn.microsoft.com/library/ms679833.aspx"}, {"description": "Microsoft. (2017, June 23). Well-known security identifiers in Windows operating systems. Retrieved November 30, 2017.", "source_name": "Microsoft Well Known SIDs Jun 2017", "url": "https://support.microsoft.com/help/243330/well-known-security-identifiers-in-windows-operating-systems"}, {"description": "Microsoft. (n.d.). Active Directory Cmdlets - Get-ADUser. Retrieved November 30, 2017.", "source_name": "Microsoft Get-ADUser", "url": "https://technet.microsoft.com/library/ee617241.aspx"}, {"description": "Metcalf, S. (2015, September 19). Sneaky Active Directory Persistence #14: SID History. Retrieved November 30, 2017.", "source_name": "AdSecurity SID History Sept 2015", "url": "https://adsecurity.org/?p=1772"}, {"description": "Microsoft. (n.d.). Using DsAddSidHistory. Retrieved November 30, 2017.", "source_name": "Microsoft DsAddSidHistory", "url": "https://msdn.microsoft.com/library/ms677982.aspx"}], "id": "attack-", "kill_chain_phases": [{"kill_chain_name": "mitre-attack", "phase_name": "defense-evasion"}, {"kill_chain_name": "mitre-attack", "phase_name": "privilege-escalation"}], "modified": "2021-02-09T15:49:58.414Z", "name": "SID-History Injection", "object_marking_refs": ["marking-"], "type": "attack-pattern", "x_mitre_contributors": ["Alain Homewood, Insomnia Security", "Vincent Le Toux"], "x_mitre_data_sources": ["Process: OS API Execution", "Active Directory: Active Directory Object Modification", "User Account: User Account Metadata"], "x_mitre_detection": "Examine data in user\u2019s SID-History attributes using the PowerShell Get-ADUser cmdlet (Citation: Microsoft Get-ADUser), especially users who have SID-History values from the same domain. (Citation: AdSecurity SID History Sept 2015) Also monitor account management events on Domain Controllers for successful and failed changes to SID-History. (Citation: AdSecurity SID History Sept 2015) (Citation: Microsoft DsAddSidHistory)\n\nMonitor for Windows API calls to the DsAddSidHistory function. (Citation: Microsoft DsAddSidHistory)", "x_mitre_domains": ["enterprise-attack"], "x_mitre_is_subtechnique": true, "x_mitre_modified_by_ref": "", "x_mitre_permissions_required": ["Administrator", "SYSTEM"], "x_mitre_platforms": ["Windows"], "x_mitre_version": "1.0"}
{"created": "2020-10-19T16:08:29.817Z", "created_by_ref": "", "description": "Adversaries may bridge network boundaries by compromising perimeter network devices or internal devices responsible for network segmentation. Breaching these devices may enable an adversary to bypass restrictions on traffic routing that otherwise separate trusted and untrusted networks.\n\nDevices such as routers and firewalls can be used to create boundaries between trusted and untrusted networks.  They achieve this by restricting traffic types to enforce organizational policy in an attempt to reduce the risk inherent in such connections.  Restriction of traffic can be achieved by prohibiting IP addresses, layer 4 protocol ports, or through deep packet inspection to identify applications.  To participate with the rest of the network, these devices can be directly addressable or transparent, but their mode of operation has no bearing on how the adversary can bypass them when compromised.\n\nWhen an adversary takes control of such a boundary device, they can bypass its policy enforcement to pass normally prohibited traffic across the trust boundary between the two separated networks without hinderance.  By achieving sufficient rights on the device, an adversary can reconfigure the device to allow the traffic they want, allowing them to then further achieve goals such as command and control via [Multi-hop Proxy](https://attack.mitre.org/techniques/T1090/003) or exfiltration of data via [Traffic Duplication](https://attack.mitre.org/techniques/T1020/001). Adversaries may also target internal devices responsible for network segmentation and abuse these in conjunction with [Internal Proxy](https://attack.mitre.org/techniques/T1090/001) to achieve the same goals.(Citation: Kaspersky ThreatNeedle Feb 2021)  In the cases where a border device separates two separate organizations, the adversary can also facilitate lateral movement into new victim environments.", "external_references": [{"external_id": "T1599", "source_name": "mitre-attack", "url": "https://attack.mitre.org/techniques/T1599"}, {"description": "Vyacheslav Kopeytsev and Seongsu Park. (2021, February 25). Lazarus targets defense industry with ThreatNeedle. Retrieved October 27, 2021.", "source_name": "Kaspersky ThreatNeedle Feb 2021", "url": "https://securelist.com/lazarus-threatneedle/100803/"}], "id": "attack-", "kill_chain_phases": [{"kill_chain_name": "mitre-attack", "phase_name": "defense-evasion"}], "modified": "2022-05-05T05:05:44.200Z", "name": "Network Boundary Bridging", "object_marking_refs": ["marking-"], "revoked": false, "type": "attack-pattern", "x_mitre_attack_spec_version": "2.1.0", "x_mitre_data_sources": ["Network Traffic: Network Traffic Flow", "Network Traffic: Network Traffic Content"], "x_mitre_defense_bypassed": ["Firewall", "System Access Controls"], "x_mitre_deprecated": false, "x_mitre_detection": "Consider monitoring network traffic on both interfaces of border network devices with out-of-band packet capture or network flow data, using a different device than the one in question.  Look for traffic that should be prohibited by the intended network traffic policy enforcement for the border network device.\n\nMonitor the border network device\u2019s configuration to validate that the policy enforcement sections are what was intended.  Look for rules that are less restrictive, or that allow specific traffic types that were not previously authorized.", "x_mitre_domains": ["enterprise-attack"], "x_mitre_is_subtechnique": false, "x_mitre_modified_by_ref": "", "x_mitre_platforms": ["Network"], "x_mitre_version": "1.1"}
{"created": "2019-03-15T13:59:30.390Z", "created_by_ref": "", "description": "Adversaries may encrypt data on target systems or on large numbers of systems in a network to interrupt availability to system and network resources. They can attempt to render stored data inaccessible by encrypting files or data on local and remote drives and withholding access to a decryption key. This may be done in order to extract monetary compensation from a victim in exchange for decryption or a decryption key (ransomware) or to render data permanently inaccessible in cases where the key is not saved or transmitted.(Citation: US-CERT Ransomware 2016)(Citation: FireEye WannaCry 2017)(Citation: US-CERT NotPetya 2017)(Citation: US-CERT SamSam 2018)\n\nIn the case of ransomware, it is typical that common user files like Office documents, PDFs, images, videos, audio, text, and source code files will be encrypted (and often renamed and/or tagged with specific file markers). Adversaries may need to first employ other behaviors, such as [File and Directory Permissions Modification](https://attack.mitre.org/techniques/T1222) or [System Shutdown/Reboot](https://attack.mitre.org/techniques/T1529), in order to unlock and/or gain access to manipulate these files.(Citation: CarbonBlack Conti July 2020) In some cases, adversaries may encrypt critical system files, disk partitions, and the MBR.(Citation: US-CERT NotPetya 2017) \n\nTo maximize impact on the target organization, malware designed for encrypting data may have worm-like features to propagate across a network by leveraging other attack techniques like [Valid Accounts](https://attack.mitre.org/techniques/T1078), [OS Credential Dumping](https://attack.mitre.org/techniques/T1003), and [SMB/Windows Admin Shares](https://attack.mitre.org/techniques/T1021/002).(Citation: FireEye WannaCry 2017)(Citation: US-CERT NotPetya 2017) Encryption malware may also leverage [Internal Defacement](https://attack.mitre.org/techniques/T1491/001), such as changing victim wallpapers, or otherwise intimidate victims by sending ransom notes or other messages to connected printers (known as \"print bombing\").(Citation: NHS Digital Egregor Nov 2020)\n\nIn cloud environments, storage objects within compromised accounts may also be encrypted.(Citation: Rhino S3 Ransomware Part 1)", "external_references": [{"external_id": "T1486", "source_name": "mitre-attack", "url": "https://attack.mitre.org/techniques/T1486"}, {"description": "Baskin, B. (2020, July 8). TAU Threat Discovery: Conti Ransomware. Retrieved February 17, 2021.", "source_name": "CarbonBlack Conti July 2020", "url": "https://www.carbonblack.com/blog/tau-threat-discovery-conti-ransomware/"}, {"description": "Berry, A., Homan, J., and Eitzman, R. (2017, May 23). WannaCry Malware Profile. Retrieved March 15, 2019.", "source_name": "FireEye WannaCry 2017", "url": "https://www.fireeye.com/blog/threat-research/2017/05/wannacry-malware-profile.html"}, {"description": "Gietzen, S. (n.d.). S3 Ransomware Part 1: Attack Vector. Retrieved April 14, 2021.", "source_name": "Rhino S3 Ransomware Part 1", "url": "https://rhinosecuritylabs.com/aws/s3-ransomware-part-1-attack-vector/"}, {"description": "NHS Digital. (2020, November 26). Egregor Ransomware The RaaS successor to Maze. Retrieved December 29, 2020.", "source_name": "NHS Digital Egregor Nov 2020", "url": "https://digital.nhs.uk/cyber-alerts/2020/cc-3681#summary"}, {"description": "US-CERT. (2016, March 31). Alert (TA16-091A): Ransomware and Recent Variants. Retrieved March 15, 2019.", "source_name": "US-CERT Ransomware 2016", "url": "https://www.us-cert.gov/ncas/alerts/TA16-091A"}, {"description": "US-CERT. (2017, July 1). Alert (TA17-181A): Petya Ransomware. Retrieved March 15, 2019.", "source_name": "US-CERT NotPetya 2017", "url": "https://www.us-cert.gov/ncas/alerts/TA17-181A"}, {"description": "US-CERT. (2018, December 3). Alert (AA18-337A): SamSam Ransomware. Retrieved March 15, 2019.", "source_name": "US-CERT SamSam 2018", "url": "https://www.us-cert.gov/ncas/alerts/AA18-337A"}], "id": "attack-", "kill_chain_phases": [{"kill_chain_name": "mitre-attack", "phase_name": "impact"}], "modified": "2022-06-16T13:07:10.318Z", "name": "Data Encrypted for Impact", "object_marking_refs": ["marking-"], "revoked": false, "type": "attack-pattern", "x_mitre_attack_spec_version": "2.1.0", "x_mitre_contributors": ["Oleg Kolesnikov, Securonix", "Mayuresh Dani, Qualys", "Harshal Tupsamudre, Qualys", "Travis Smith, Qualys", "ExtraHop"], "x_mitre_data_sources": ["File: File Modification", "Network Share: Network Share Access", "Process: Process Creation", "Command: Command Execution", "File: File Creation", "Cloud Storage: Cloud Storage Modification"], "x_mitre_deprecated": false, "x_mitre_detection": "Use process monitoring to monitor the execution and command line parameters of binaries involved in data destruction activity, such as vssadmin, wbadmin, and bcdedit. Monitor for the creation of suspicious files as well as unusual file modification activity. In particular, look for large quantities of file modifications in user directories.\n\nIn some cases, monitoring for unusual kernel driver installation activity can aid in detection.\n\nIn cloud environments, monitor for events that indicate storage objects have been anomalously replaced by copies.", "x_mitre_domains": ["enterprise-attack"], "x_mitre_impact_type": ["Availability"], "x_mitre_is_subtechnique": false, "x_mitre_modified_by_ref": "", "x_mitre_platforms": ["Linux", "macOS", "Windows", "IaaS"], "x_mitre_version": "1.4"}, {"created": "2019-03-29T14:59:50.763Z", "created_by_ref": "", "description": "Adversaries may erase the contents of storage devices on specific systems as well as large numbers of systems in a network to interrupt availability to system and network resources.\n\nAdversaries may partially or completely overwrite the contents of a storage device rendering the data irrecoverable through the storage interface.(Citation: Novetta Blockbuster)(Citation: Novetta Blockbuster Destructive Malware)(Citation: DOJ Lazarus Sony 2018) Instead of wiping specific disk structures or files, adversaries with destructive intent may wipe arbitrary portions of disk content. To wipe disk content, adversaries may acquire direct access to the hard drive in order to overwrite arbitrarily sized portions of disk with random data.(Citation: Novetta Blockbuster Destructive Malware) Adversaries have been observed leveraging third-party drivers like [RawDisk](https://attack.mitre.org/software/S0364) to directly access disk content.(Citation: Novetta Blockbuster)(Citation: Novetta Blockbuster Destructive Malware) This behavior is distinct from [Data Destruction](https://attack.mitre.org/techniques/T1485) because sections of the disk erased instead of individual files.\n\nTo maximize impact on the target organization in operations where network-wide availability interruption is the goal, malware used for wiping disk content may have worm-like features to propagate across a network by leveraging additional techniques like [Valid Accounts](https://attack.mitre.org/techniques/T1078), [OS Credential Dumping](https://attack.mitre.org/techniques/T1003), and [Windows Admin Shares](https://attack.mitre.org/techniques/T1077).(Citation: Novetta Blockbuster Destructive Malware)", "external_references": [{"external_id": "T1488", "source_name": "mitre-attack", "url": "https://attack.mitre.org/techniques/T1488"}, {"description": "Novetta Threat Research Group. (2016, February 24). Operation Blockbuster: Unraveling the Long Thread of the Sony Attack. Retrieved February 25, 2016.", "source_name": "Novetta Blockbuster", "url": "https://www.operationblockbuster.com/wp-content/uploads/2016/02/Operation-Blockbuster-Report.pdf"}, {"description": "Novetta Threat Research Group. (2016, February 24). Operation Blockbuster: Destructive Malware Report. Retrieved March 2, 2016.", "source_name": "Novetta Blockbuster Destructive Malware", "url": "https://operationblockbuster.com/wp-content/uploads/2016/02/Operation-Blockbuster-Destructive-Malware-Report.pdf"}, {"description": "Department of Justice. (2018, September 6). Criminal Complaint - United States of America v. PARK JIN HYOK. Retrieved March 29, 2019.", "source_name": "DOJ Lazarus Sony 2018", "url": "https://www.justice.gov/opa/press-release/file/1092091/download"}], "id": "attack-", "kill_chain_phases": [{"kill_chain_name": "mitre-attack", "phase_name": "impact"}], "modified": "2020-02-20T22:07:27.495Z", "name": "Disk Content Wipe", "object_marking_refs": ["marking-"], "revoked": true, "type": "attack-pattern", "x_mitre_detection": "Look for attempts to read/write to sensitive locations like the partition boot sector or BIOS parameter block/superblock. Monitor for unusual kernel driver installation activity.", "x_mitre_domains": ["enterprise-attack"], "x_mitre_impact_type": ["Availability"], "x_mitre_is_subtechnique": false, "x_mitre_modified_by_ref": "", "x_mitre_permissions_required": ["User", "Administrator", "root", "SYSTEM"], "x_mitre_platforms": ["Linux", "macOS", "Windows"], "x_mitre_version": "1.0"}
{"created": "2020-02-05T14:54:07.588Z", "created_by_ref": "", "description": "Adversaries may undermine security controls that will either warn users of untrusted activity or prevent execution of untrusted programs. Operating systems and security products may contain mechanisms to identify programs or websites as possessing some level of trust. Examples of such features would include a program being allowed to run because it is signed by a valid code signing certificate, a program prompting the user with a warning because it has an attribute set from being downloaded from the Internet, or getting an indication that you are about to connect to an untrusted site.\n\nAdversaries may attempt to subvert these trust mechanisms. The method adversaries use will depend on the specific mechanism they seek to subvert. Adversaries may conduct [File and Directory Permissions Modification](https://attack.mitre.org/techniques/T1222) or [Modify Registry](https://attack.mitre.org/techniques/T1112) in support of subverting these controls.(Citation: SpectorOps Subverting Trust Sept 2017) Adversaries may also create or steal code signing certificates to acquire trust on target systems.(Citation: Securelist Digital Certificates)(Citation: Symantec Digital Certificates) ", "external_references": [{"external_id": "T1553", "source_name": "mitre-attack", "url": "https://attack.mitre.org/techniques/T1553"}, {"description": "Graeber, M. (2017, December 22). Code Signing Certificate Cloning Attacks and Defenses. Retrieved April 3, 2018.", "source_name": "SpectorOps Code Signing Dec 2017", "url": "https://posts.specterops.io/code-signing-certificate-cloning-attacks-and-defenses-6f98657fc6ec"}, {"description": "Graeber, M. (2017, September). Subverting Trust in Windows. Retrieved January 31, 2018.", "source_name": "SpectorOps Subverting Trust Sept 2017", "url": "https://specterops.io/assets/resources/SpecterOps_Subverting_Trust_in_Windows.pdf"}, {"description": "Ladikov, A. (2015, January 29). Why You Shouldn\u2019t Completely Trust Files Signed with Digital Certificates. Retrieved March 31, 2016.", "source_name": "Securelist Digital Certificates", "url": "https://securelist.com/why-you-shouldnt-completely-trust-files-signed-with-digital-certificates/68593/"}, {"description": "Shinotsuka, H. (2013, February 22). How Attackers Steal Private Keys from Digital Certificates. Retrieved March 31, 2016.", "source_name": "Symantec Digital Certificates", "url": "http://www.symantec.com/connect/blogs/how-attackers-steal-private-keys-digital-certificates"}], "id": "attack-", "kill_chain_phases": [{"kill_chain_name": "mitre-attack", "phase_name": "defense-evasion"}], "modified": "2022-05-05T05:04:52.387Z", "name": "Subvert Trust Controls", "object_marking_refs": ["marking-"], "revoked": false, "type": "attack-pattern", "x_mitre_attack_spec_version": "2.1.0", "x_mitre_data_sources": ["Process: Process Creation", "Windows Registry: Windows Registry Key Creation", "Module: Module Load", "File: File Metadata", "File: File Modification", "Windows Registry: Windows Registry Key Modification", "Command: Command Execution"], "x_mitre_defense_bypassed": ["Anti-virus", "Autoruns Analysis", "Digital Certificate Validation", "User Mode Signature Validation", "Windows User Account Control", "Application Control"], "x_mitre_deprecated": false, "x_mitre_detection": "Collect and analyze signing certificate metadata on software that executes within the environment to look for unusual certificate characteristics and outliers. Periodically baseline registered SIPs and trust providers (Registry entries and files on disk), specifically looking for new, modified, or non-Microsoft entries. (Citation: SpectorOps Subverting Trust Sept 2017) A system's root certificates are unlikely to change frequently. Monitor new certificates installed on a system that could be due to malicious activity.(Citation: SpectorOps Code Signing Dec 2017)\n\nAnalyze Autoruns data for oddities and anomalies, specifically malicious files attempting persistent execution by hiding within auto-starting locations. Autoruns will hide entries signed by Microsoft or Windows by default, so ensure \"Hide Microsoft Entries\" and \"Hide Windows Entries\" are both deselected.(Citation: SpectorOps Subverting Trust Sept 2017) \n\nMonitor and investigate attempts to modify extended file attributes with utilities such as xattr. Built-in system utilities may generate high false positive alerts, so compare against baseline knowledge for how systems are typically used and correlate modification events with other indications of malicious activity where possible. ", "x_mitre_domains": ["enterprise-attack"], "x_mitre_is_subtechnique": false, "x_mitre_modified_by_ref": "", "x_mitre_platforms": ["Windows", "macOS", "Linux"], "x_mitre_version": "1.1"}
{"created": "2020-01-30T14:40:20.187Z", "created_by_ref": "", "description": "Adversaries may leverage the AuthorizationExecuteWithPrivileges API to escalate privileges by prompting the user for credentials.(Citation: AppleDocs AuthorizationExecuteWithPrivileges) The purpose of this API is to give application developers an easy way to perform operations with root privileges, such as for application installation or updating. This API does not validate that the program requesting root privileges comes from a reputable source or has been maliciously modified. \n\nAlthough this API is deprecated, it still fully functions in the latest releases of macOS. When calling this API, the user will be prompted to enter their credentials but no checks on the origin or integrity of the program are made. The program calling the API may also load world writable files which can be modified to perform malicious behavior with elevated privileges.\n\nAdversaries may abuse AuthorizationExecuteWithPrivileges to obtain root privileges in order to install malicious software on victims and install persistence mechanisms.(Citation: Death by 1000 installers; it's all broken!)(Citation: Carbon Black Shlayer Feb 2019)(Citation: OSX Coldroot RAT) This technique may be combined with [Masquerading](https://attack.mitre.org/techniques/T1036) to trick the user into granting escalated privileges to malicious code.(Citation: Death by 1000 installers; it's all broken!)(Citation: Carbon Black Shlayer Feb 2019) This technique has also been shown to work by modifying legitimate programs present on the machine that make use of this API.(Citation: Death by 1000 installers; it's all broken!)", "external_references": [{"external_id": "T1548.004", "source_name": "mitre-attack", "url": "https://attack.mitre.org/techniques/T1548/004"}, {"description": "Apple. (n.d.). Apple Developer Documentation - AuthorizationExecuteWithPrivileges. Retrieved August 8, 2019.", "source_name": "AppleDocs AuthorizationExecuteWithPrivileges", "url": "https://developer.apple.com/documentation/security/1540038-authorizationexecutewithprivileg"}, {"description": "Carbon Black Threat Analysis Unit. (2019, February 12). New macOS Malware Variant of Shlayer (OSX) Discovered. Retrieved August 8, 2019.", "source_name": "Carbon Black Shlayer Feb 2019", "url": "https://blogs.vmware.com/security/2020/02/vmware-carbon-black-tau-threat-analysis-shlayer-macos.html"}, {"description": "Patrick Wardle. (2017). Death by 1000 installers; it's all broken!. Retrieved August 8, 2019.", "source_name": "Death by 1000 installers; it's all broken!", "url": "https://speakerdeck.com/patrickwardle/defcon-2017-death-by-1000-installers-its-all-broken?slide=8"}, {"description": "Patrick Wardle. (2018, February 17). Tearing Apart the Undetected (OSX)Coldroot RAT. Retrieved August 8, 2019.", "source_name": "OSX Coldroot RAT", "url": "https://objective-see.com/blog/blog_0x2A.html"}], "id": "attack-", "kill_chain_phases": [{"kill_chain_name": "mitre-attack", "phase_name": "privilege-escalation"}, {"kill_chain_name": "mitre-attack", "phase_name": "defense-evasion"}], "modified": "2022-10-19T16:35:18.492Z", "name": "Elevated Execution with Prompt", "object_marking_refs": ["marking-"], "revoked": false, "type": "attack-pattern", "x_mitre_attack_spec_version": "2.1.0", "x_mitre_contributors": ["Jimmy Astle, @AstleJimmy, Carbon Black", "Erika Noerenberg, @gutterchurl, Carbon Black"], "x_mitre_data_sources": ["Process: OS API Execution", "Process: Process Creation"], "x_mitre_deprecated": false, "x_mitre_detection": "Consider monitoring for /usr/libexec/security_authtrampoline executions which may indicate that AuthorizationExecuteWithPrivileges is being executed. MacOS system logs may also indicate when AuthorizationExecuteWithPrivileges is being called. Monitoring OS API callbacks for the execution can also be a way to detect this behavior but requires specialized security tooling.", "x_mitre_domains": ["enterprise-attack"], "x_mitre_effective_permissions": ["root"], "x_mitre_is_subtechnique": true, "x_mitre_modified_by_ref": "", "x_mitre_permissions_required": ["Administrator", "User"], "x_mitre_platforms": ["macOS"], "x_mitre_version": "1.0"}
{"created": "2020-10-02T16:46:42.537Z", "created_by_ref": "", "description": "Adversaries may gather information about the victim's host firmware that can be used during targeting. Information about host firmware may include a variety of details such as type and versions on specific hosts, which may be used to infer more information about hosts in the environment (ex: configuration, purpose, age/patch level, etc.).\n\nAdversaries may gather this information in various ways, such as direct elicitation via [Phishing for Information](https://attack.mitre.org/techniques/T1598). Information about host firmware may only be exposed to adversaries via online or other accessible data sets (ex: job postings, network maps, assessment reports, resumes, or purchase invoices).(Citation: ArsTechnica Intel) Gathering this information may reveal opportunities for other forms of reconnaissance (ex: [Search Open Websites/Domains](https://attack.mitre.org/techniques/T1593) or [Search Open Technical Databases](https://attack.mitre.org/techniques/T1596)), establishing operational resources (ex: [Develop Capabilities](https://attack.mitre.org/techniques/T1587) or [Obtain Capabilities](https://attack.mitre.org/techniques/T1588)), and/or initial access (ex: [Supply Chain Compromise](https://attack.mitre.org/techniques/T1195) or [Exploit Public-Facing Application](https://attack.mitre.org/techniques/T1190)).", "external_references": [{"external_id": "T1592.003", "source_name": "mitre-attack", "url": "https://attack.mitre.org/techniques/T1592/003"}, {"description": "Goodin, D. & Salter, J. (2020, August 6). More than 20GB of Intel source code and proprietary data dumped online. Retrieved October 20, 2020.", "source_name": "ArsTechnica Intel", "url": "https://arstechnica.com/information-technology/2020/08/intel-is-investigating-the-leak-of-20gb-of-its-source-code-and-private-data/"}], "id": "attack-", "kill_chain_phases": [{"kill_chain_name": "mitre-attack", "phase_name": "reconnaissance"}], "modified": "2021-04-15T03:22:46.759Z", "name": "Firmware", "object_marking_refs": ["marking-"], "type": "attack-pattern", "x_mitre_detection": "Much of this activity may have a very high occurrence and associated false positive rate, as well as potentially taking place outside the visibility of the target organization, making detection difficult for defenders.\n\nDetection efforts may be focused on related stages of the adversary lifecycle, such as during Initial Access.", "x_mitre_domains": ["enterprise-attack"], "x_mitre_is_subtechnique": true, "x_mitre_modified_by_ref": "", "x_mitre_platforms": ["PRE"], "x_mitre_version": "1.0"}
{"created": "2020-03-16T15:33:01.739Z", "created_by_ref": "", "description": "Adversaries may employ a known encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol. Despite the use of a secure algorithm, these implementations may be vulnerable to reverse engineering if secret keys are encoded and/or generated within malware samples/configuration files.", "external_references": [{"external_id": "T1573", "source_name": "mitre-attack", "url": "https://attack.mitre.org/techniques/T1573"}, {"description": "Butler, M. (2013, November). Finding Hidden Threats by Decrypting SSL. Retrieved April 5, 2016.", "source_name": "SANS Decrypting SSL", "url": "http://www.sans.org/reading-room/whitepapers/analyst/finding-hidden-threats-decrypting-ssl-34840"}, {"description": "Dormann, W. (2015, March 13). The Risks of SSL Inspection. Retrieved April 5, 2016.", "source_name": "SEI SSL Inspection Risks", "url": "https://insights.sei.cmu.edu/cert/2015/03/the-risks-of-ssl-inspection.html"}, {"description": "Gardiner, J.,  Cova, M., Nagaraja, S. (2014, February). Command & Control Understanding, Denying and Detecting. Retrieved April 20, 2016.", "source_name": "University of Birmingham C2", "url": "https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf"}], "id": "attack-", "kill_chain_phases": [{"kill_chain_name": "mitre-attack", "phase_name": "command-and-control"}], "modified": "2021-04-20T19:27:46.650Z", "name": "Encrypted Channel", "object_marking_refs": ["marking-"], "type": "attack-pattern", "x_mitre_data_sources": ["Network Traffic: Network Traffic Content"], "x_mitre_detection": "SSL/TLS inspection is one way of detecting command and control traffic within some encrypted communication channels.(Citation: SANS Decrypting SSL) SSL/TLS inspection does come with certain risks that should be considered before implementing to avoid potential security issues such as incomplete certificate validation.(Citation: SEI SSL Inspection Risks)\n\nIn general, analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.(Citation: University of Birmingham C2)", "x_mitre_domains": ["enterprise-attack"], "x_mitre_is_subtechnique": false, "x_mitre_modified_by_ref": "", "x_mitre_platforms": ["Linux", "macOS", "Windows"], "x_mitre_version": "1.0"}
{"created": "2018-01-16T16:13:52.465Z", "created_by_ref": "", "description": "Windows password filters are password policy enforcement mechanisms for both domain and local accounts. Filters are implemented as dynamic link libraries (DLLs) containing a method to validate potential passwords against password policies. Filter DLLs can be positioned on local computers for local accounts and/or domain controllers for domain accounts.\n\nBefore registering new passwords in the Security Accounts Manager (SAM), the Local Security Authority (LSA) requests validation from each registered filter. Any potential changes cannot take effect until every registered filter acknowledges validation.\n\nAdversaries can register malicious password filters to harvest credentials from local computers and/or entire domains. To perform proper validation, filters must receive plain-text credentials from the LSA. A malicious password filter would receive these plain-text credentials every time a password request is made. (Citation: Carnal Ownage Password Filters Sept 2013)", "external_references": [{"external_id": "T1174", "source_name": "mitre-attack", "url": "https://attack.mitre.org/techniques/T1174"}, {"description": "Fuller, R. (2013, September 11). Stealing passwords every time they change. Retrieved November 21, 2017.", "source_name": "Carnal Ownage Password Filters Sept 2013", "url": "http://carnal0wnage.attackresearch.com/2013/09/stealing-passwords-every-time-they.html"}, {"description": "Bialek, J. (2013, September 15). Intercepting Password Changes With Function Hooking. Retrieved November 21, 2017.", "source_name": "Clymb3r Function Hook Passwords Sept 2013", "url": "https://clymb3r.wordpress.com/2013/09/15/intercepting-password-changes-with-function-hooking/"}], "id": "attack-", "kill_chain_phases": [{"kill_chain_name": "mitre-attack", "phase_name": "credential-access"}], "modified": "2020-02-11T19:06:18.818Z", "name": "Password Filter DLL", "object_marking_refs": ["marking-"], "revoked": true, "type": "attack-pattern", "x_mitre_contributors": ["Vincent Le Toux"], "x_mitre_detection": "Monitor for change notifications to and from unfamiliar password filters.\n\nNewly installed password filters will not take effect until after a system reboot.\n\nPassword filters will show up as an autorun and loaded DLL in lsass.exe. (Citation: Clymb3r Function Hook Passwords Sept 2013)", "x_mitre_domains": ["enterprise-attack"], "x_mitre_is_subtechnique": false, "x_mitre_modified_by_ref": "", "x_mitre_permissions_required": ["Administrator", "SYSTEM"], "x_mitre_platforms": ["Windows"], "x_mitre_version": "1.0"}
{"created": "2020-01-24T14:54:42.757Z", "created_by_ref": "", "description": "Adversaries may abuse authentication packages to execute DLLs when the system boots. Windows authentication package DLLs are loaded by the Local Security Authority (LSA) process at system start. They provide support for multiple logon processes and multiple security protocols to the operating system.(Citation: MSDN Authentication Packages)\n\nAdversaries can use the autostart mechanism provided by LSA authentication packages for persistence by placing a reference to a binary in the Windows Registry location HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\ with the key value of \"Authentication Packages\"=&lt;target binary&gt;. The binary will then be executed by the system when the authentication packages are loaded.", "external_references": [{"external_id": "T1547.002", "source_name": "mitre-attack", "url": "https://attack.mitre.org/techniques/T1547/002"}, {"description": "Graeber, M. (2014, October). Analysis of Malicious Security Support Provider DLLs. Retrieved March 1, 2017.", "source_name": "Graeber 2014", "url": "http://docplayer.net/20839173-Analysis-of-malicious-security-support-provider-dlls.html"}, {"description": "Microsoft. (2013, July 31). Configuring Additional LSA Protection. Retrieved June 24, 2015.", "source_name": "Microsoft Configure LSA", "url": "https://technet.microsoft.com/en-us/library/dn408187.aspx"}, {"description": "Microsoft. (n.d.). Authentication Packages. Retrieved March 1, 2017.", "source_name": "MSDN Authentication Packages", "url": "https://msdn.microsoft.com/library/windows/desktop/aa374733.aspx"}], "id": "attack-", "kill_chain_phases": [{"kill_chain_name": "mitre-attack", "phase_name": "persistence"}, {"kill_chain_name": "mitre-attack", "phase_name": "privilege-escalation"}], "modified": "2022-04-20T16:29:36.291Z", "name": "Authentication Package", "object_marking_refs": ["marking-"], "revoked": false, "type": "attack-pattern", "x_mitre_attack_spec_version": "2.1.0", "x_mitre_data_sources": ["Windows Registry: Windows Registry Key Modification", "Module: Module Load", "Command: Command Execution"], "x_mitre_deprecated": false, "x_mitre_detection": "Monitor the Registry for changes to the LSA Registry keys. Monitor the LSA process for DLL loads. Windows 8.1 and Windows Server 2012 R2 may generate events when unsigned DLLs try to load into the LSA by setting the Registry key HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\LSASS.exe with AuditLevel = 8. (Citation: Graeber 2014) (Citation: Microsoft Configure LSA)", "x_mitre_domains": ["enterprise-attack"], "x_mitre_is_subtechnique": true, "x_mitre_modified_by_ref": "", "x_mitre_permissions_required": ["Administrator"], "x_mitre_platforms": ["Windows"], "x_mitre_version": "1.0"}
{"created": "2020-01-23T19:52:17.414Z", "created_by_ref": "", "description": "Adversaries may abuse Regsvr32.exe to proxy execution of malicious code. Regsvr32.exe is a command-line program used to register and unregister object linking and embedding controls, including dynamic link libraries (DLLs), on Windows systems. The Regsvr32.exe binary may also be signed by Microsoft. (Citation: Microsoft Regsvr32)\n\nMalicious usage of Regsvr32.exe may avoid triggering security tools that may not monitor execution of, and modules loaded by, the regsvr32.exe process because of allowlists or false positives from Windows using regsvr32.exe for normal operations. Regsvr32.exe can also be used to specifically bypass application control using functionality to load COM scriptlets to execute DLLs under user permissions. Since Regsvr32.exe is network and proxy aware, the scripts can be loaded by passing a uniform resource locator (URL) to file on an external Web server as an argument during invocation. This method makes no changes to the Registry as the COM object is not actually registered, only executed. (Citation: LOLBAS Regsvr32) This variation of the technique is often referred to as a \"Squiblydoo\" and has been used in campaigns targeting governments. (Citation: Carbon Black Squiblydoo Apr 2016) (Citation: FireEye Regsvr32 Targeting Mongolian Gov)\n\nRegsvr32.exe can also be leveraged to register a COM Object used to establish persistence via [Component Object Model Hijacking](https://attack.mitre.org/techniques/T1546/015). (Citation: Carbon Black Squiblydoo Apr 2016)", "external_references": [{"external_id": "T1218.010", "source_name": "mitre-attack", "url": "https://attack.mitre.org/techniques/T1218/010"}, {"description": "Anubhav, A., Kizhakkinan, D. (2017, February 22). Spear Phishing Techniques Used in Attacks Targeting the Mongolian Government. Retrieved February 24, 2017.", "source_name": "FireEye Regsvr32 Targeting Mongolian Gov", "url": "https://www.fireeye.com/blog/threat-research/2017/02/spear_phishing_techn.html"}, {"description": "LOLBAS. (n.d.). Regsvr32.exe. Retrieved July 31, 2019.", "source_name": "LOLBAS Regsvr32", "url": "https://lolbas-project.github.io/lolbas/Binaries/Regsvr32/"}, {"description": "Microsoft. (2015, August 14). How to use the Regsvr32 tool and troubleshoot Regsvr32 error messages. Retrieved June 22, 2016.", "source_name": "Microsoft Regsvr32", "url": "https://support.microsoft.com/en-us/kb/249873"}, {"description": "Nolen, R. et al.. (2016, April 28). Threat Advisory: \u201cSquiblydoo\u201d Continues Trend of Attackers Using Native OS Tools to \u201cLive off the Land\u201d. Retrieved April 9, 2018.", "source_name": "Carbon Black Squiblydoo Apr 2016", "url": "https://www.carbonblack.com/2016/04/28/threat-advisory-squiblydoo-continues-trend-of-attackers-using-native-os-tools-to-live-off-the-land/"}], "id": "attack-", "kill_chain_phases": [{"kill_chain_name": "mitre-attack", "phase_name": "defense-evasion"}], "modified": "2023-04-21T12:24:56.148Z", "name": "Regsvr32", "object_marking_refs": ["marking-"], "revoked": false, "type": "attack-pattern", "x_mitre_attack_spec_version": "3.1.0", "x_mitre_contributors": ["Casey Smith"], "x_mitre_data_sources": ["Process: Process Creation", "Module: Module Load", "Command: Command Execution", "Network Traffic: Network Connection Creation"], "x_mitre_defense_bypassed": ["Digital Certificate Validation", "Anti-virus", "Application control"], "x_mitre_deprecated": false, "x_mitre_detection": "Use process monitoring to monitor the execution and arguments of regsvr32.exe. Compare recent invocations of regsvr32.exe with prior history of known good arguments and loaded files to determine anomalous and potentially adversarial activity. Command arguments used before and after the regsvr32.exe invocation may also be useful in determining the origin and purpose of the script or DLL being loaded. (Citation: Carbon Black Squiblydoo Apr 2016)", "x_mitre_domains": ["enterprise-attack"], "x_mitre_is_subtechnique": true, "x_mitre_modified_by_ref": "", "x_mitre_platforms": ["Windows"], "x_mitre_version": "2.1"}, {"created": "2017-05-31T21:30:19.338Z", "created_by_ref": "", "description": "An adversary may compress data (e.g., sensitive documents) that is collected prior to exfiltration in order to make it portable and minimize the amount of data sent over the network. The compression is done separately from the exfiltration channel and is performed using a custom program or algorithm, or a more common compression library or utility such as 7zip, RAR, ZIP, or zlib.", "external_references": [{"external_id": "T1002", "source_name": "mitre-attack", "url": "https://attack.mitre.org/techniques/T1002"}, {"description": "Wikipedia. (2016, March 31). List of file signatures. Retrieved April 22, 2016.", "source_name": "Wikipedia File Header Signatures", "url": "https://en.wikipedia.org/wiki/List_of_file_signatures"}], "id": "attack-", "kill_chain_phases": [{"kill_chain_name": "mitre-attack", "phase_name": "exfiltration"}], "modified": "2020-03-30T03:09:45.384Z", "name": "Data Compressed", "object_marking_refs": ["marking-"], "revoked": true, "type": "attack-pattern", "x_mitre_detection": "Compression software and compressed files can be detected in many ways. Common utilities that may be present on the system or brought in by an adversary may be detectable through process monitoring and monitoring for command-line arguments for known compression utilities. This may yield a significant amount of benign events, depending on how systems in the environment are typically used.\n\nIf the communications channel is unencrypted, compressed files can be detected in transit during exfiltration with a network intrusion detection or data loss prevention system analyzing file headers. (Citation: Wikipedia File Header Signatures)", "x_mitre_domains": ["enterprise-attack"], "x_mitre_is_subtechnique": false, "x_mitre_modified_by_ref": "", "x_mitre_platforms": ["Linux", "Windows", "macOS"], "x_mitre_version": "1.0"}