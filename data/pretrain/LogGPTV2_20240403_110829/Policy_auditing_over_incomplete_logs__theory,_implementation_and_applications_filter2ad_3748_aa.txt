title:Policy auditing over incomplete logs: theory, implementation and applications
author:Deepak Garg and
Limin Jia and
Anupam Datta
Policy Auditing over Incomplete Logs:
Theory, Implementation and Applications
Deepak Garg
PI:EMAIL
Limin Jia
PI:EMAIL
Anupam Datta
PI:EMAIL
ABSTRACT
We present the design, implementation and evaluation of an
algorithm that checks audit logs for compliance with privacy
and security policies. The algorithm, which we name reduce,
addresses two fundamental challenges in compliance check-
ing that arise in practice. First, in order to be applicable
to realistic policies, reduce operates on policies expressed in
a ﬁrst-order logic that allows restricted quantiﬁcation over
inﬁnite domains. We build on ideas from logic program-
ming to identify the restricted form of quantiﬁed formulas.
The logic can, in particular, express all 84 disclosure-related
clauses of the HIPAA Privacy Rule, which involve quantiﬁ-
cation over the inﬁnite set of messages containing personal
information. Second, since audit logs are inherently incom-
plete (they may not contain suﬃcient information to deter-
mine whether a policy is violated or not), reduce proceeds
iteratively: in each iteration, it provably checks as much of
the policy as possible over the current log and outputs a
residual policy that can only be checked when the log is ex-
tended with additional information. We prove correctness,
termination, time and space complexity results for reduce.
We implement reduce and optimize the base implementation
using two heuristics for database indexing that are guided
by the syntactic structure of policies. The implementation
is used to check simulated audit logs for compliance with the
HIPAA Privacy Rule. Our experimental results demonstrate
that the algorithm is fast enough to be used in practice.
Categories and Subject Descriptors
F.4.1 [Mathematical Logic and Formal Languages]:
Mathematical Logic—Temporal logic; H.2.1 [Database Man-
agement]: Logical Design; I.2.4 [Artiﬁcial Intelligence]:
Knowledge Representation Formalisms and Methods; K.4.3
[Computers and Society]: Organizational Impacts—Au-
tomation
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
CCS’11, October 17–21, 2011, Chicago, Illinois, USA.
Copyright 2011 ACM 978-1-4503-0948-6/11/10 ...$10.00.
General Terms
Experimentation, Legal Aspects, Security, Theory
Keywords
Audit, Formal logic, Incomplete logs, Privacy policy
1.
INTRODUCTION
Organizations, such as hospitals, banks, and universities,
that collect, use, and share personal information have to en-
sure that they do so in a manner that respects the privacy
of the information’s subjects.
In fact, designing eﬀective
processes to ensure compliance with internal policies and
privacy regulations, such as the Health Insurance Portabil-
ity and Accountability Act (HIPAA) [34] and the Gramm-
Leach-Bliley Act (GLBA) [33], has become one of the great-
est challenges facing organizations today (see, for example, a
survey from Deloitte and the Ponemon Institute [13]). This
paper presents an approach to address this challenge.
We design and implement an algorithm that checks audit
logs for compliance with a rich class of privacy and secu-
rity policies. The algorithm, which we name reduce, ad-
dresses two fundamental challenges in compliance checking
that arise in practice. First, in order to be applicable to
realistic policies, reduce operates on policies expressed in a
ﬁrst-order logic that allows restricted quantiﬁcation over in-
ﬁnite domains. We design this logic by starting from our
prior work on a logic for specifying privacy regulations [15],
and restricting the syntax of quantiﬁers in order to ensure
that reduce terminates. In more detail, we note that many
HIPAA clauses are of the form ∀p1, p2, m.(send(p1, p2, m) ⊃
ϕ) where p1 and p2 are principals and m is a message. This
formula quantiﬁes over the inﬁnite set of messages, so if an
enforcement algorithm were to blindly instantiate the quan-
tiﬁers with all possible values in the domain, it would not
terminate. However, since the number of messages transmit-
ted from a hospital is ﬁnite, the predicate send(p1, p2, m) is
true for only a ﬁnite number of substitutions for the vari-
able m (and similarly for p1 and p2). At a technical level, we
use the idea of mode checking from logic programming [2]
to ensure that the number of relevant substitutions for ev-
ery quantiﬁed variable is always ﬁnite, thus ensuring that
reduce terminates. The resulting logic is more expressive
than prior logics used for compliance-checking,
including
propositional temporal logics [6, 18] and ﬁrst-order metric
temporal logic [9], and, in contrast to these logics, can ex-
press all 84 disclosure-related clauses in the HIPAA Privacy
Rule.
Second, a signiﬁcant challenge in automated compliance
checking is that logs maintained by organizations may be in-
complete, i.e., they may not contain enough information to
decide whether or not the policy has been violated. There
are many diﬀerent sources of incompleteness. Speciﬁcally,
privacy regulations often permit disclosures based on sub-
jective beliefs (e.g., allowing a hospital to share health in-
formation with law enforcement oﬃcers if the hospital be-
lieves that a death could have been the result of a crim-
inal act) and future obligations (e.g., requiring organiza-
tions to notify customers within a prescribed time period
if a data breach has occurred). These two classes of poli-
cies (which abound in privacy regulations) illustrate why we
cannot hope to have an automated enforcement mechanism
that decides whether a disclosure is permitted or not at the
time the disclosure occurs—in other words, why a preventive
enforcement regime is not suﬃcient for enforcement of such
policies. In addition to these inherent forms of incomplete-
ness, sometimes not all relevant information is recorded in a
single log, i.e., logs may be spatially distributed. As an im-
portant contribution, we observe that such incomplete logs
can be abstractly represented as three-valued, partial struc-
tures that map each atomic formula to either true, false,
or unknown [11, 19]. We deﬁne the semantics of our logic
over such structures. We design reduce to work with partial
structures, thus providing a uniform method of compliance
checking that accounts for diﬀerent sources of incomplete-
ness in audit logs. Since logs evolve over time by gathering
more information, reduce proceeds iteratively: In each iter-
ation, it checks as much of the policy as possible over the
current log and outputs a residual policy that can only be
checked when the log is extended with additional informa-
tion.
We formally prove the following properties of reduce, using
reduce(L, ϕ) = ϕ(cid:48) to denote one iteration of reduce: (1) The
residual policy ϕ(cid:48) output by reduce is minimal : it only con-
tains predicates whose truth value is unknown in the current
partial structure L; (2) reduce terminates: as noted earlier,
the ﬁnite substitution property of variables quantiﬁed over
inﬁnite domains is crucial for termination; (3) reduce is cor-
rect: any extension of L satisﬁes the policy ϕ if and only if
it satisﬁes the residual formula ϕ(cid:48); (4) Assuming that ﬁnd-
ing an entry in the audit log takes unit time, reduce runs in
time polynomial in the size of the audit log where the de-
gree of the polynomial is the size of the policy formula (i.e.,
TIME(|L|O(|ϕ|))), and uses space that is polynomial in the
size of the policy formula (i.e., PSPACE(|ϕ|)).
We implement reduce and optimize the base implementa-
tion with heuristics for database indexing that are guided
by the syntactic structure of policies. The implementation
is used to check simulated audit logs for compliance with
the HIPAA Privacy Rule. Our experimental results demon-
strate that the algorithm is practical—the average time for
checking compliance for each disclosure of protected health
information is 0.12 seconds for a log of size 15MB.
In practice, we expect that the reduce algorithm will be an
integral component of an after-the-fact audit tool for policy
violations. The other component of such a tool would be a
front-end that allows an auditor to select a part of the policy
(or the whole of it) and simplify it through the reduce algo-
rithm. The auditor may also provide additional information
about incomplete parts of the audit log and repeat the re-
duction. In ongoing work, we are building such a front-end.
Organization.
Section 2 presents the syntax of the pol-
icy logic, and deﬁnes partial structures and the semantics
of the logic over them. Section 3 presents the reduce al-
gorithm and its properties. Section 4 describes the base
implementation of the algorithm and its optimization. Sec-
tion 5 describes our empirical evaluation of the implementa-
tion. Section 6 provides a detailed comparison with related
work and Section 7 presents conclusions and directions for
future work. The source code of our implementation and
a technical report [17] with proofs of theorems and other
details (TR in the sequel) are available online at the URL
http://www.cs.cmu.edu/~dg/.
2. POLICY LOGIC
We represent policies in a ﬁrst-order logic with restricted
quantiﬁers (also called guarded quantiﬁers in the literature).
Atoms
Formulas
P ::= p(t1, . . . , tn)
ϕ ::= P | (cid:62) | ⊥ | ϕ1 ∧ ϕ2 | ϕ1 ∨ ϕ2 |
∀(cid:126)x.(c ⊃ ϕ) | ∃(cid:126)x.(c ∧ ϕ)
c
Restrictions
::= P | (cid:62) | ⊥ | c1 ∧ c2 | c1 ∨ c2 | ∃x.c
Predicates p represent relations between terms t. Terms
are variables (x, y, . . .), constants, or terms applied to un-
interpreted function symbols. An atom is a predicate ap-
plied to a list of terms. Propositional connectives (cid:62) (true),
⊥ (false), ∧ (conjunction), and ∨ (disjunction) have their
usual meanings. First order quantiﬁers — forall (∀) and ex-
ists (∃) — may range over inﬁnite domains. Anticipating the
requirements of our audit algorithm (Section 3), we restrict
these quantiﬁers to the forms ∀(cid:126)x.(c ⊃ ϕ) and ∃(cid:126)x.(c ∧ ϕ)
by including a formula c called a restriction. By deﬁnition,
∀(cid:126)x.(c ⊃ ϕ) is true iﬀ all instances of variables (cid:126)x that satisfy
c, also satisfy ϕ. Similarly, ∃(cid:126)x.(c ∧ ϕ) holds iﬀ there is an
instance of (cid:126)x that satisﬁes both c and ϕ. To ensure that our
enforcement algorithm terminates, we require that only a
ﬁnite number of substitutions for quantiﬁed variables make
a restriction true. The latter is forced by the limited syntax
of restrictions (note that universal quantiﬁers and implica-
tions are not allowed in restrictions) and other checks that
we describe in Section 3.
For technical reasons, we do not include negation in the
logic. Instead we assume that each predicate p has a dual
p such that p(t1, . . . , tn) is true iﬀ p(t1, . . . , tn) is false and
deﬁne a dual ϕ that behaves exactly as ¬ϕ would. For ex-
ample,
ϕ ∧ ψ
p(t1, . . . , tn) = p(t1, . . . , tn)
∀(cid:126)x.(c ⊃ ϕ) = ∃(cid:126)x.(c ∧ ϕ)
∃(cid:126)x.(c ∧ ϕ) = ∀(cid:126)x.(c ⊃ ϕ)
ϕ ∨ ψ
=
To represent time-dependent (temporal) properties, we as-
sume a domain of integers (both negative and positive in-
tegers), denoted τ , that count time in seconds from a ﬁxed
point of reference and make the time of occurrence of an
event explicit in the predicate that represents the event. For
example, the atom send(p1, p2, m, τ ) means that principal p1
sends to principal p2 the message m at time τ . The relation
τ1 ≤ τ2 represents the total order on integers. All of linear-
time temporal logic (LTL) [24] and its extension TPTL [1]
can be encoded in our logic. For details of the encoding see
our prior work [15].
Example 2.1. Consider the following policy about trans-
mission of health information from one entity (e.g., a hospi-
tal or doctor) to another. This policy is motivated by similar
requirements in HIPAA, but is simpler and serves as a good
illustration.
An entity may send an individual’s protected health
information (phi) to another entity only if the re-
ceiving entity is the individual’s doctor and the
purpose of the transmission is treatment, or the
individual has previously consented to the trans-
mission.
To formalize this policy in our logic, we start by assuming
that all transmissions made by an entity are recorded in a
log. The predicate send(p1, p2, m, τ ) is true if the transmis-
sion of message m from principal p1 to principal p2 at time
τ occurs in this log. Similarly, we assume that transmission
consents given by individuals are also recorded in a database
table. The predicate consents(q, a, τ ), which means that in-
dividual q consents to the action a at time τ , holds if the
corresponding consent exists in this table.
We further assume that each transmitted message m is
tagged by the sender (in a machine-readable format) with
the names of individuals whose information it carries as well
as the attributes of information it carries (attributes include
“address”, “social security number”, “medications”, “medical
history”, etc.). The predicate tagged(m, q, t) means that
message m is tagged as carrying individual q’s attribute t.
Tags may or may not be accurate. Similarly, we assume that