---
## Page 553
w.Remove(e)
return w
return w
func insertInwindow(w *list.List, n int) *list.List {
for e := w.Front();e != nil; e = e.Next(){
if e.value.(int) >= n {
w.InsertBefore(n, e)
return w
w. PushBack (n)
return w
}
func getMedian(w *list.List,k int) float64 {
e := w.Front()
for i:=0;i maxH.LenO+1 {
maxH. Push(minH . Pop () )
}else if minH.Len() = minH.TopO {
minH. Push(nums [1])
}else{
maxH. Push(nums [1])
---
## Page 554
if i >= k {
if nums [1k] >= minH.Top() {
minH.Remove(nums [i-k])
}else{
maxH. Remove(nums [ik])
if minH.Len() > maxH.Len()+1 {
maxH. Push(minH. Pop ())
}else if minH.Len()
 h.data[j] }
// MinHeapR define
type MinHeapR struct {
hp, hpDel MinHeap
}
// Len define
func (h MinHeapR) LenO int { return h.hp.LenO - h.hpDel.Len() }
// Top define
func (h *MinHeapR) Top() int{
for h.hpDe1.Len() > 0 && h.hp.TopO == h.hpDe1.Top() {
heap.Pop (&h.hp)
heap.Pop (&h.hpDe1)
return h.hp.Top()
//Pop define
func (h *MinHeapR) Pop() int{
x := h.TopO
heap. Pop(&h.hp)
return x
// Push define
func (h *MinHeapR) Push(x int) { heap.Push(&h.hp,x) }
// Remove define
func (h *MinHeapR) Remove(x int) { heap.Push(&h.hpDel, x) }
---
## Page 556
// MaxHeapR define
type MaxHeapR struct {
hp, hpDe1 MaxHeap
// Len define
func (h MaxHeapR) LenO int { return h.hp.LenO - h.hpDel.Len() }
// Top define
func (h *MaxHeapR) Top() int{
for h.hpDel.Len() > 0 && h.hp.TopO == h.hpDel.Top() {
heap.Pop (&h.hp)
heap.Pop(&h.hpDe1)
return h.hp.Top()
// Pop define
func (h *MaxHeapR) Pop（) int{
x := h.Top()
heap. Pop(&h.hp)
return x
// Push define
func (h *MaxHeapR) Push(x int) { heap.Push(&h.hp,x) }
// Remove define
func (h *MaxHeapR) Remove(x int) { heap.Push(&h.hpDe1， x) }
483.SmallestGoodBase
题目
For an integer n, we call k>=2 a good base of n, if all dligits of n base k are 1.
Now given a string representing n, you should return the smallest good base of n in string
format.
Example 1:
Input: "13"
:ndno
Explanation: 13 base 3 is 111.
Example 2:
---
## Page 557
Input: "4681"
Output: “8"
Explanation: 4681 base 8 is 11111.
Example 3:
Input:"1000000000000000000"
666666666666666666:1ndno
Explanation: 1000000000000000000 base 999999999999999999 is 11.
Note:
1. The range of n is [3, 10^18].
2. The string representing n is always valid and will not have leading zeros.
题目大意
对于给定的整数n，如果n的k（k>=2）进制数的所有数位全为1，则称k（k>=2）是n的一个好进制。
以字符串的形式给出n，以字符串的形式返回n的最小好进制。
提示：
●n的取值范围是[3,10^18]。
·输入总是有效且没有前导0。
解题思路
·给出一个数n，要求找一个进制k，使得数字n在k进制下每一位都是1。求最小的进制k。
·这一题等价于求最小的正整数k，满足存在一个正整数m使得
TTL
1Km+1
i=0
1-k
·这一题需要确定k和m两个数的值。m和k是有关系的，确定了一个值，另外一个值也确定了。
由
1 km+1
1 -k
=n
可得：
---
## Page 558
m = logk(kn -n +1)— 1 = 1; bit--{
1ow, high := uint64(2), uint64(math.Pow(float64(num) , 1.0/float64(bit)))
forlow >1)
sum := findBase(mid, bit)
if sum a= num {
return strconv.Formatuint(mid, 10)
---
## Page 559
}else if sum > num {
high = mid - 1
}else {
1ow = mid + 1
return strconv.Formatuint(num-1, 10)
//计算k^m+kA（m-1）+...
+k+1
func findBase(mid, bit uint64) uint64 {
sum, base := uint64(1), uint64(1)
for i := uint64(1); i  maxCount{
maxCount = currentCount
return maxCount
491.IncreasingSubsequences
题目
Given an integer array, your task is to find all the different possible increasing subsequences of
the given array, and the length of an increasing subsequence should be at least 2.
Example:
Input: [4, 6, 7, 7]
output: [[4, 6]， [4, 7], [4, 6, 7]， [4, 6, 7, 7]， [6, 7], [6, 7, 7]， [7,7],
[4,7,7]]
Note:
1. The length of the given array will not exceed 15.
2. The range of integer in the given array is [-100,100].
3. The given array may contain duplicates, and two equal integers should also be considered
as a special case of increasing sequence.
题目大意
---
## Page 561
给定一个整型数组，你的任务是找到所有该数组的递增子序列，递增子序列的长度至少是2。
说明：
1.给定数组的长度不会超过15。
2.数组中的整数范围是[-100,100]。
3.给定数组中可能包含重复数字，相等的数字应该被视为递增的一种情况。
解题思路
·给出一个数组，要求找出这个数组中所有长度大于2的非递减子序列。子序列顺序和原数组元素
下标必须是顺序的，不能是逆序的。
·这一题和第78题和第90题是类似的题目。第78题和第90题是求所有子序列，这一题在这两题
的基础上增加了非递减和长度大于2的条件。需要注意的两点是，原数组中元素可能会重复，最
终结果输出的时候需要去重。最终结果输出的去重用map处理，数组中重复元素用DFS遍历搜
索。在每次DFS中，用map记录遍历过的元素，保证本轮DFS中不出现重复的元素，递归到下
一层还可以选择值相同，但是下标不同的另外一个元素。外层循环也要加一个map，这个map
是过滤每组解因为重复元素导致的重复解，经过过滤以后，起点不同了，最终的解也会不同。
·这一题和第78题，第90题类似，可以一起解答和复习。
代码
package leetcode
func findSubsequences(nums []int) [][]int {
C,visited, res := []int{}, map[int]bool{}, [][]int{}
for i := 0; i = 2 {
b := make([]int, len(c))
copy(b, c)
*res = append(*res, b)
visited := map[int]bool{}
for i := current + 1; i 
2*nums [j] -
You need to return the number of important reverse pairs in the given array.
Example1:
Input: [1,3,2,3,1]
Output: 2
Example2:
Input: [2,4,3,5,1]
Output: 3
Note:
1. The length of the given array will not exceed 50, 000
2. All the numbers in the input array are in the range of 32-bit integer.
题目大意
给定一个数组nums，如果i2*nums[j]我们就将（i,j)称作一个重要翻转对。你需要返
回给定数组中的重要翻转对的数量。
注意：
·给定数组的长度不会超过50000。
·输入数组中的所有数字都在32位整数的表示范围内。
解题思路
---
## Page 563
·给出一个数组，要求找出满足条件的所有的“重要的反转对”（j)。重要的反转对的定义是：i2*nums[j]。
·这一题是327题的变种题。首先将数组中所有的元素以及各自的2*nums[i]+1都放在字典中
去重。去重以后再做离散化处理。这一题的测试用例会卡离散化，如果不离散化，Math.Maxlnt32
会导致数字溢出，见测试用例中2147483647，-2147483647这组测试用例。离散后，映射关系保
存在字典中。从左往右遍历数组，先query，再update，这个顺序和第327题是反的。先
query查找[2*nums[i]+1，1en（indexMap）-1]这个区间内满足条件的值，这个区间内的值
都是>2*nums[j]的。这一题移动的是j，j不断的变化，往线段树中不断插入的是i。每轮
循环先query一次前一轮循环中累积插入线段树中的i，这些累积在线段树中的代表的是所有在
j前面的i。query查询的是本轮[2*nums[j]+1，len（indexMap）-1]，如果能找到，即找
到了这样一个j，能满足nums[i]>2*nums[j，把整个数组都扫完，累加的query出来的
count计数就是最终答案。
·类似的题目：第327题，第315题。
·这一题用线段树并不是最优解，用线段树解这一题是为了训练线段树这个数据结构。最优解是解法
二中的 mergesort。
代码
package leetcode
import(
"sort"
'github.com/halfrost/LeetCode-Go/template'
//解法一线段树，时间复杂度o（n1ogn）
func reversePairs(nums []int) int {
if 1en(nums）<2{
return 0
st, numsMap, indexMap, numsArray, res := template.SegmentCountTree{},
make(map[int]int, 0), make(map[int]int, 0),[]int{}, 0