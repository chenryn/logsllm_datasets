terpretation of completeness, as follows. Soundness: data is
accepted only if it is authentic. Completeness: if no adver-
sary is present and no messages are lost, then the data must
be accepted. In particular we allow the case where the adver-
sary is present and the data is authentic, but the protocol re-
jects it. In practical terms this means we inherit the original
CPS algorithm’s vulnerability to denial-of-service, where a
single malicious node can cause the protocol to abort (with-
out a result) by behaving badly. The argument for this is
that in each disrupted round of the protocol, the adversary
nodes must deviate from the protocol in some way (by either
sending the wrong messages or not sending a message when
expected), and if this behavior persists then it is a clear in-
dication of an error condition and an out-of-band remedial
action can be taken. One particular form of DoS that we do
attempt to prevent is long-lived DoS, where misbehavior in
a single round causes the protocol to stop functioning for an
extended number of subsequent rounds. This will be noted
wherever appropriate.
• Fixed known network topology. We assume that the sen-
sor network is mostly static, with a topology that is a-priori
known to the base station, and changes in the network topol-
ogy are sufﬁciently infrequent to be ignored in the estimation
of communication and memory overheads. This appears to
be true of many modern sensor network applications such
as building and home instrumentation and automation. We
assume that only reliable links are included in the network
topology and retransmissions are performed to a sufﬁcient
degree that message loss is a negligible factor.
5. AUTHENTICATED BROADCAST
In this section we show how the HT functionality of the CPS
algorithm can be used to generate an authenticated broadcast prim-
itive. Speciﬁcally, this primitive enables the base station to send an
authenticated broadcast message M such that all nodes can verify
that M truly originated from the base station.
Before describing the details of the algorithm, we ﬁrst describe
the intuition behind the approach. Consider a base station which
shares a unique secret key Ki with each sensor node i. To authen-
ticate message M to node i, the base station can attach a MAC us-
ing the key they share, e.g., MACKi(M||N ) (the nonce / sequence
number N is used to prevent replay of M in the future: we assume
the nodes keep track of which nonces have been used). However,
since each MAC for each sensor node uses a different key, unicast-
ing a different MAC to each node in the network is very inefﬁcient,
incurring O(n) congestion in the worst case (see Figure 5(a)).
Alternatively, we can use a hash tree to “batch” the entire set of
MACs into a single structure. Speciﬁcally, construct a hash tree
whose set of leaves is the set of MACs of M using each of the keys
shared with the nodes in the network, i.e., {MACK1(M||N ), . . . ,
MACKn(M||N )}. Let the root vertex of the hash tree be r. Then,
for each node i, assuming that node i itself has never divulged the
value of MACKi(M||N ) in the past, exhibiting the value r sufﬁces
as proof of the ability to independently compute MACKi(M||N )
since r was computed via a sequence of collision-resistant hash
functions evaluated with MACKi(M||N ) as an input.
In other
words, it is computationally infeasible for an adversary that does
not know Ki or MACKi(M||N ) to produce a new pair M(cid:4), r(cid:4), N(cid:4)
in such a way that MACKi(M(cid:4)||N(cid:4)
) is a leaf vertex in some hash
tree with root r(cid:4)
(the adversary has to break either the collision re-
sistance of the hash function or the unforgeability of the MAC).
Note that in such a construction, each node only needs to verify the
inclusion of its own MAC as a leaf in the hash tree; other MACs
are irrelevant.
Hence, the HT functionality is perfectly suited for efﬁciently
generating and disseminating exactly such a hash tree. The details
(a) Using unicast
(b) Using the HT functionality
Figure 5: Disseminating per node MACs: Naive method and HT method
are shown on Figure 5(b). We assume that the base station is a pri-
ori aware of the speciﬁc method used by HT to construct the hash
tree, i.e. given the list of leaf data values, it is able to replicate the
hash tree constructed by HT . To construct an authentication tag
for a message M, the base station internally replicates the hash-
tree construction of HT using the leaf values {MACK1(M||N ),
. . . , MACKn(M||N )} where Ki is the key shared with node i
and N is a nonce that is never re-used (e.g., a sequence num-
ber). Once the root r of the hash tree is computed, the base sta-
tion can then broadcast the triplet (M, r, N ). To authenticate M,
each node ﬁrst checks that it has never seen N before, then releases
MACKi(M||N ) to the HT functionality. The HT functionality
recomputes the hash tree and releases the relevant veriﬁcation in-
formation to each node i allowing it to verify that MACKi(M||N )
is a leaf of the hash tree with root r. If the node successfully veriﬁes
this then it can accept M as authentic.
The speciﬁcs of the broadcast algorithm as it relates to the CPS
algorithm are evident from the way the CPS algorithm implements
the HT functionality. Speciﬁcally, we assume that the topology
is static and known to the base station: this allows the base sta-
tion to anticipate exactly the hash tree that will be generated. The
base station then simulates (internally) the commitment tree gen-
eration phase (where the leaf vertex associated with each node is
MACKi(M||N )), and derives the root of the commitment tree r,
and broadcasts the triplet (M, r, N ). The nodes each check that the
nonce N has not been previously used, then collaborate to perform
the commitment tree generation phase and the distributed veriﬁca-
tion phase to verify that their respective MACs were included in
the computation of r. Note that there is no need for a root ver-
tex broadcast phase because the root vertex r was already known
from the original broadcast.
If the nodes successfully complete
distributed veriﬁcation, then they accept M as authentic. The ﬁ-
nal acknowledgement phase is optional; its inclusion can help the
base station detect protocol failure due to malicious injection, node
error or message loss, but does not affect correctness. Omitting
this phase does not allow a node to accept an inauthentic triplet
(M(cid:4), r(cid:4), N(cid:4)
). The algorithm is summarized in Algorithm 1.
5.1 Analysis and Reﬁnements
It is computationally infeasible for an adversary to produce a
triplet (M(cid:4), r(cid:4), N(cid:4)
) that correctly veriﬁes for any legitimate node
i in the network. This is because, assuming the adversary does
not know MACKi(M(cid:4)||N(cid:4)
) (since the MAC is hard to forge and
Algorithm 1 Authenticated Broadcast using HT Functionality
Input: Nonce N not previously used; Message M
1. Base station simulates the operation of HT on the leaf vertex
deﬁnitions Li = MACKi(M||N ), computes root vertex r.
2. Base station broadcasts (M, r, N ).
3. Each node i checks that N was not previously seen; if so, stop.
4. Otherwise, release Li = MACKi(M||N ).
5. Nodes collaborate to implement HT functionality, recomput-
ing the hash tree with root r.
6. As per HT functionality, veriﬁcation paths are disseminated
back to the nodes after hash tree is computed.
7. Each node i veriﬁes that Li is a leaf vertex in the hash tree with
root r.
8. If veriﬁcation successful, node i accepts M.
9. (Optional) Base station can request a network-wide ACK by
implementing veriﬁcation conﬁrmation functionality over con-
ﬁrmation messages Ci = MACKi(M||r||N||ACK) where
ACK is a unique identiﬁer indicate broadcast authentication
success.
Ki is unknown to the adversary), the adversary is computationally
unlikely to be able to (a priori) deduce an r(cid:4)
that is the root of a
hash tree containing MACKi(M(cid:4)||N(cid:4)
). On the other hand, once
a triple (M(cid:4), r(cid:4), N(cid:4)
) with a valid nonce N(cid:4)
is received by node i,
the node will release MACKi(M(cid:4)||N(cid:4)
) to allow the rest of the net-
work to perform distributed veriﬁcation. The release of this value
potentially allows an adversary to now compute some new r(cid:4)(cid:4)
such
that (M(cid:4), r(cid:4)(cid:4), N(cid:4)
) will verify correctly and be accepted by node i.
Hence it is important that a nonce must never be re-used for the
same key, e.g., they could be increasing sequence numbers.
Keeping track of which nonces have been used introduces a new
problem. Suppose we use increasing sequence numbers, and nodes
keep track of the largest sequence number they have seen. Hence, a
node will only release its MAC for triples with sequence numbers
larger than the largest one yet seen. This introduces a long-term de-
nial of service attack where the adversary can shut down a node for
an extended period of time with a single spurious triple containing a
huge sequence number. To address this issue, we propose replacing
the sequence number with a hash chain. A hash chain is constructed
by repeatedly evaluating a pre-image resistant hash function h on
some (random) initial value. The ﬁnal result (or “anchor value”) is
preloaded on the nodes and the base station uses the pre-image of
, it veriﬁes that N(cid:4)
the last-used value as the nonce for the next broadcast. For exam-
ple, if the last known value of the hash chain was hm(IV ), then
the next broadcast would use hm−1(IV ) as the nonce. When a
node receives a new nonce N(cid:4)
is a precursor
to the most recently received (and authenticated) nonce N on the
hash chain, i.e., hi(N(cid:4)
) = N for some i bounded by a ﬁxed k
of number of hash applications. This prevents an adversary from
performing sequence number exhaustion denial of service attacks
since it would have to reverse the hash chain computation to get
an acceptable pre-image. The hash computations do presents an
additional minor opportunity for a computational DoS (by ﬂood-
ing a node with multiple messages containing invalid nonces, each
of which must be checked to show it does not belong on the hash
chain); however since hash computations are efﬁcient and the to-
tal hash computations per message is bounded by some parameter
k, such attacks cannot cause persistent outages. New nodes enter-
ing the network can be sent their hash chain anchors via unicast:
this is a one-time operation and does not increase the congestion
complexity of the protocol.
Since the hash chain is generated at the resource-rich base station
(not on the nodes), it can potentially be extremely long. When the
base station wishes to generate a new hash chain, the new anchor
value can be efﬁciently broadcast to the nodes in the network using
the remaining values on the old hash chain. This renewal process
is subject to disruption by adversary nodes in the usual way (e.g.
by releasing spurious leaf values to cause the hash tree authentica-
tion step to fail). Hence, if hash chain renewal is performed too
late (e.g. when the old hash chain only has a few values remain-
ing), then, if the renewal broadcasts are disrupted by the adversary,
legitimate nodes may not receive the new anchors. In this case en-
tire protocol must be reinitialized via an expensive unicast from the
base station to each node. To remedy this, hash chain renewals can
be performed early, when there is a sufﬁcient number of remaining
hash values such that a short period of disruption attacks by an ad-
versary does not result in exhaustion of the values in the old hash
chain. Obviously a continuous DoS by a stubborn adversary in ev-
ery round of broadcasts can still incapacitate the broadcast mech-
anism; as discussed in Section 4 we assume that such persistent
adversarial behavior can be addressed out-of-band.
Like all protocols in this paper, the overhead of this protocol is a
bound of O(log n) congestion on all links in the network. Further-
more, it is the only known broadcast authentication scheme that is
efﬁcient and works using only unique symmetric keys shared be-
tween the base station and the nodes and which does not require
time synchronization.
6. PUBLIC KEY MANAGEMENT
With the authenticated broadcast primitive described in Section 5,
we now have access to the ability to create and disseminate hash
trees with root vertices that are authenticated by the base station.
One application of this is to use a single authenticated value (i.e.,
the root vertex of a hash tree) to attest to the integrity of many
different leaf values. In this section we consider the problem of
authentically binding information to speciﬁc nodes using this struc-
ture. The general formulation of the problem is as follows: suppose
that each node i has a label Li which is known to itself and to the
base station. Our goal is to be able to prove to an arbitrary node j
that the label Li is legitimate, e.g., it was approved by the base sta-
tion and not fabricated by an adversary (which could be controlling
node i itself). The general information-binding problem described
above is analogous to the task of efﬁciently issuing credentials to
large set of principals. Public key management is an important ap-
plication of this functionality.
6.1 The Public Key Management Problem
Public key management is one of the most important applica-
tions of the information-binding functionality. With continued im-
provements in the performance of elliptic curve algorithms, pub-
lic key cryptography hardware and software are becoming increas-
ingly feasible for low cost sensor nodes. However, at the mo-
ment it is still unclear how to manage public keys in a sensor net-
work. There are two major problems with deploying asymmetric
key cryptography related to public key management.
Public key authentication. To prevent node-in-the-middle at-
tacks, sensor nodes should not accept public keys from any other
sensor node except those with which it knows it should associate.
The standard method of implementing this is with a PKI, i.e., all
public keys are certiﬁed (signed) by a central authority (e.g., the
trusted base station). This is subject to a battery-exhaustion denial
of service attack from an outsider who can bombard a legitimate
node with thousands of false public key certiﬁcates. This problem
is particularly serious in sensor networks due to the resource con-
straints of sensor nodes.
Public key revocation. As nodes die or are revoked from the
network, their old public keys must be invalidated. The simplest
approach is a centralized approach: for each public key that a node
receives, the node must communicate with the base station to ver-
ify the current status of the newly received public key. This is
expensive in communication overhead and does not scale to large
networks. The standard distributed method for public key revo-
cation is either for a node to keep extensive certiﬁcate revocation
lists (CRLs), or for authority signatures on public key certiﬁcates
to periodically time out. Neither approach is practical for sensor
networks. CRLs are impractical because sensor nodes cannot spare
the RAM to exhaustively remember the identities of every dead
node. Certiﬁcate timeouts are also impractical since periodically
unicasting a newly signed public key certiﬁcate to every node in
the network is prohibitively expensive.
6.2 Using HT for PK Management
We show that public key dissemination can be performed simi-
larly to the process described in Section 5. The general primitive
is very similar to the process described in Section 5. We use the
HT functionality with leaf vertex values Li = (P Ki, i, T ) where
P Ki is the public key of node i (which is known to both node i
and the base station), and T is a sequence number or timestamp
which guarantees the freshness of the certiﬁcate. Similarly to Sec-
tion 5, we assume that the topology is static and the hash tree for-
mation/dissemination algorithm HT is known to the base station.
Hence, the base station can, internally (i.e., without communicat-
ing with any nodes), construct a hash tree with each of the Li as the
leaves in an identical manner to the HT functionality. The root r
of this hash tree is then disseminated to the network using authen-
ticated broadcast. The method of Section 5 may be used for the
authenticated broadcast. Depending on the freshness method used,
T may also be included in the authenticated broadcast (to invali-
date any old certiﬁcates). To prevent desynchronization, a network-
wide acknowledgement of receipt of this broadcast is performed
using the veriﬁcation conﬁrmation functionality. This ensures that
all nodes receive the most up-to-date root vertex r. Subsequently,
each node releases its Li. Using these as leaf vertices, the HT
functionality generates a hash tree with the same root vertex r as
was broadcast by the base station, and disseminates sufﬁcient in-
formation to each node to allow it to reconstruct the sequence of
hashes leading from Li to r. Once each node has successfully per-
formed veriﬁcation, then it can retain the information it used in
veriﬁcation for use as a proof of validity to any other node in the
Algorithm 2 Public Key Dissemination using HT Functionality
Input: Nonce T not previously used; Public keys P Ki for each