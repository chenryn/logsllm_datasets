udisks2.service
loaded active running Disk Manager
upower,service
loaded active running Daenon for power management
vgauthd.service
 loaded active running VGAuth Service for open-vm=tools
vntoolsd.service
loaded active running Service for virtual machines hosted on VMvare
wpa_supplicant.service
loaded active running WPA Supplicant daenon
LOAD
= Reflects whether the unit definition vas properly loaded.
ACTIvE = The high-level unit activation state, i.e. generalization of SUB.
SUB
= The low-level unit activation state, values depend on unit type.
43 loaded units listed. Pass ==all to see loaded but inactive units, too.
To show all installed unit files use 'systenctl list=unit=files'.
[helper@localhost -]$
查看某个服务的进程情况
systemctl status xxx.service
这里以 ssh 为例
[Ubuntu Server 16.04】默认情况
helperelocalhost:-$ sudo systenctl status sshd.service
ssh.service -OpenBSD Secure Shell server
Active:
Process:
Main PID:
1233 (sshd)
Tasks:
CPU:27ms
3.6M
CGroup:
/system.slice/ssh.service
1233/usr/sbin/sshd-D
Nov 23 21:12:35 1ocalhost systend[1]: Starting OpenBSD Secure Shell server...
Nov
Nov
23 21:12:35 localhost sshd[1233]:
23 21:12:35 localhost sshd[1233]:
Server listening on 0.0.0.0 port 22.
Nov 23 21:13:03 localhost sshd[1818]:
Accepted password for helper
from 172.16.44.1 port 58229 ssh2
helperelocalhost:-$
【Centos7】默认情况
---
## Page 178
Active:
EvEte
Docs:
mon:sshd(8)
octive (n
mon:sshd_config(5)
Meln PID:
CGroup:
2796/usr/sbin/sshd-
11月
11月
Sarver
rt 22.
11月
11月
2321:14:35
5 1ocolhost sshd[2814]:Address 172.16.44.1 mops to localho
11月
23 21:14:37
locelhost
sshd[2814]:
rt58387ssh2
ssh4[4213]
[4213]:
for helper from 172.16.44.1 port 62043 ssh2
back to the oddress...TEMPT!
11月
23 21:44:19
[helperelocolhost-]s
11ngunwos 1- sn*pzisd111
我们可以获取pid以及启动的文件
获取某个服务的配置文件
systemctl cat xxx.service
[Ubuntu Server 16.04】默认情况
helperelocalhost:-S sudo systemctl cat sshd.service
#/lib/systemd/system/ssh.service
[Unit]
Description=OpenBSD Secure Shell server
After=network.target auditd.service
ConditionPathExists=!/etc/ssh/sshd_not_to_be_run
[Service]
EnvironmentFile=-/etc/default/ssh
ExecStartPre=/usr/sbin/sshd -t
ExecStart=/usr/sbin/sshd -D $SSHD_OPTS
ExecReload=/usr/sbin/sshd -t
ExecReload=/bin/kill -HUP SMAINPID
KillMode=process
Restart=on-failure
RestartPreventExitStatus=255
Type=notify
[Install]
WantedBy=multi-user.target
Alias=sshd.service
helperelocalhost:-$
【Centos7】默认情况
---
## Page 179
[helper@localhost~]s sudo systemctl cat sshd.service
#/usr/lib/systemd/system/sshd.service
[Unit]
Description=OpenSSH server daemon
Documentation=man:sshd(8) man:sshd_config(5)
After=network.target sshd-keygen.service
Wants=sshd-keygen.service
[Service]
Type=notify
EnvironmentFile=/etc/sysconfig/sshd
ExecStart=/usr/sbin/sshd -D sOPTIoNS
ExecReload=/bin/kill -HUP SMAINPID
KillMode=process
Restart=on-failure
RestartSec=42s
[Install]
WantedBy=multi-user.target
[helper@localhost~]s
通过服务的配置文件，我们可以找到相关的文件，之后进行判断是否为异常
开机自启的服务可以在启动项处进行查
---
## Page 180
小技巧
0x01查找文件
从环境变量查找文件
● which
只能查找系统命令的具体文件位置
helperghelper:~Swhich pud
/bin/pwd
helperghelper:-s
● whereis
查找的类型不只是系统命令（二进制文件），还有一些其他文件，比如源文件等，在$PATH路径基础上增加了一些系
统目录的查找，查找范围比which稍大，查找速度快
o-b只查找二进制文件
。-B指定寻找二进制文件的路径
。-s只搜索源文件
0-S指定搜索源文件的路径
helperghelper:~swhereis1s
1s:/bin/1s/usr/share/man/manl/1s.1.gz
helper@helper:$whereis -b1s
1s:/bin/1s
helper@helper:s
▪locate
从索引数据库（/var/lib/mlocate/mlocate.db）里查找文件，数据库每天更新，所以可能查到的文件不是最新的，
甚至可能已经被删除了，可以使用updatedb来进行更新数据库
强烈建议在updatedb执行前查找一次，updatedb更新后查找一次
locate默认会把包含所查询的字符的结果都显示出来，比如我们想查询Is，那么类似tools这种结果也会显示出来
helperghelper:~Slocate 1s|head
/bin/false
/bin/1s
/bin/lsblk
/bin/1smod
/bin/ntfs1s
/boot/grub/menu.1st
/boot/grub/menu.1st~
/boot/grub/1386-pc/cb1s.mod
/boot/grub/1386-pc/cmmand.1st
/boot/grub/1386-pc/crypto.1st
helperghelper:s
我觉得locate是一个很好的搜索工具，所以详细说几个参数
。-b只搜索文件名，不搜索文件夹名
o-i忽略大小写
-r 正则匹配
---
## Page 181
incnte
/est/rairstadoa-ce
fter esis 1.
/sr//45142g/g//
●find
find是从文件系统中进行搜索，大而全，但是巨慢，以上命令都查找不到的时候再使用这个命令
find默认文件和目录都会进行搜索，名称要准确，支持正则，可以使用通配符
-type 参数指定
爸目P
f文件
1符号链接
s sOcket
0基础使用find/-nameevil.sh
o忽路大小写find/-iname evil.sh
查找时排除某个/类文件find/-name*evil*！-name*.log
o查找目录find/-type d-name eval
按照权限查找文件-perm
o查找777权限的文件find/-typef-perm777
0
查找SUID文件find/-perm/u=s
查找SGID文件find/-perm/g=s
。查找Sticky文件find/=perm/o=t
基于所有考和组查找文件-user/-group
。查找根目录下属于root的文件或文件夹find/-userroot
o查找ssh组的所有文件find/-groupssh
基于时间进行查找
-mtime 修改时间
o查找最近三天修改过的文件find/-mtime-3
0
查找三天前修改过的文件find/-atime+3
0
查找最近24小时修改过的文件find/=mtime-1
---
## Page 182
atime 访间时间]
。查找3天内访问过的文件find/-atinme-3
。其他类似
ctime属性修改时间还未发现可以修改ctime的常规方法，所以可以作为依据
。寻找最近三天修改过属性的文件find/-ctime-3
daystart按天算，不是按照24小时算，-1表示昨天，而不是从现在往前导24小时
o寻找昨天创建的文件find/-ctime1-daystart
o寻找向前3~5天之间编辑的文件find/-mtime3-ntime-5-daystart
如果你觉得天这个单位太大了，可以使用分钟，分别对应-mmin/-amin/-cmin
查找三分钟前编辑的文件find/-mmin+3
0
查找三分钟内编辑的文件find/-mmin-3
0
查找三分钟前访问的文件find/-mumin+3
查找三分钟内访问的文件find/-mmin-3
01
查找三分钟前修改属性的文件find/-cmin+3
。找三分钟内修改属性的文件find/=cmin-3
按照大小寻找文件-size，参数后单位可以为
ob 512-byte block
o C  bytes
spom a/q-om m o
o k
o M
oG
0
寻找10M的文件find/=size10M
寻找大于10M的文件find/-size+10N
寻找小于10M的文件find/-size-10M
。寻找10M到20M之间的文件find/-size+10MB-20M
参考文章：
https://zhuonlon.zhihu.com/p/35727707
https://cloud.tencent.com/developer/article/1348438
https://www.cnblogs.com/Q--T/p/7864795.html
https://www.linuxprobe.com/find-seorch-file.html
0x02查找文件内容
很多时候，我们无法确定恶意程序的文件名，但是某些配置文件的关键字是不会更改的，所以我们可以利用关键字进行查找
grep [OPTIONS]PATTERN[FILE..-]
首先介绍一下grep的参数
正则表达式相关参数
·-E扩展了正则表达式，支持了以下几种规则
---
## Page 183
+o
。alb
{u}xo
()×o
{u'u}xo
·-F该参数后的正则表达式字符串中所有字符申都没有特殊含义，仅仅是其本身
-P使用perl正则表达式
-e正则表达式中存在--的，默认会被识别为参数，使用-e参数可以将--认定为正则表达式中的字符
-ffile从文件中加载正则
-i忽略大小写
-w只匹配完整的单词，比如administrator 中包含admin，使用-wadmin是不会查询到结果的，只有iam admin！
这种才可以
-x匹配整行
-z 跨行匹配
杂项
·-S禁止输出因文件不存在或文件没有读权限而产生的错误信息
·-V反转结果，不显示制定的正则
·-V版本信息
输出控制
●-m NUM匹配到NUM行后停止
·-b打印匹配的行在文件中的字节偏移量
-n显示匹配的行号
·-H批量匹配时，显示匹配的文件名，默认参数
·-h与H相反，不显示文件名
·-0只输出匹配到的字符
-q不显示任何东西
-a匹配二进制数据
·-1不匹配二进制的内容
-d action 目录操作，读取（read)，递归(recurse)，跳过（skip)
·-D action 设置对设备，FIFO,管道的操作，读取（read)，跳过（skip)
·-r递归，不会搜索符号连接内的内容，所以可以尽量使用-R
-R递归的同时可以设置一些选项，比如排除一些目录等
-L显示未匹配到的文件名
·-只显示匹配到的文件名
·-C打印每一个文件中匹配结果的行数
文本控制
---
## Page 184
·-B显示查找到的行前的N行的内容
·-A显示查找到的行后的N行的内容
·-C显示查找都的行前后各N行的内容
常见使用方法
·查找某个文件中的字符串
helpereubuntu-64bit:~/demo-20210511s grep webshell 1.txt
webshell
helpereubuntu-64bit:~/demo-20210511s
·在某个目录中的文件中搜索某个正则表达式
grep *str"/root/xxx/*
helper@ubuntu-64bit:~/demo-20210511s grep token /home/helper/demo-20210511/+
/hrrn/helpar/deme-282la51i/1.tot:takgn
helper@ubuntu-64bit:~/demo-20218511s
·递归在某个目录下所有文件中进行查找
/xxxx/ox/_x,ux=dx6
helpereubuntu-64bit:~/demo-28218511s grep -m*token/home/helper/demo-28210511/
hame/helper/demg-2021851/dd/e.tat:1:coo\ntakem
hema/helper/dero-28riw511/1.txt:2tokon
helpereubuntu-64bit:~/demo-20210511s
·查找多个字符
0grep'str1\/str2*/root/xxxx/*
/xxxx/0x.3d0
/xxxx/x/=1xs.=dx0
/1.tat:token
/l.tut:webshell
grep:./dd:Isa directory
helper@ubuntu-64bit:~/demo-20210511sgrep-E"tokenlwebshel1"./
grep:./:Isa directory
helper@ubuntu-64bit:~/demo-20210511s grep-E"tokenlwebshell/*
/1.tut:token
/l.tut:webshell
---
## Page 185
·查找同时存在两个字符
+xxxx/.*,60
helper@ubuntu-64bit:~/demo-20210511sgrep-Ew.*1'/home/helper/demo-20210511/*
heme/helper/demo-202i051i/1.txt:webshell
grep:/home/helper/demo-20210511/dd:Isadirectory
helper@ubuntu-64bit:~/demo-20210511s
·只搜索部分文件
0grep‘abe’-r --inelude=*,conf /root/xxxx
0grep‘abe’-r --inelude=**,(conf,config)" /root/xxxx
helper@ubuntu-64bit:~/demo-20210511s grep -Rn token./
1.t:2:tokr
/aa/e.txt:1:aoa\ntaken
helper@ubuntu-64bit:~/demo-20210511s grep --include=e.*-Rn token./*
ddve.txt1:aaaAntoken
helper@ubuntu-64bit:~/demo-20210511s
·排除部分文件
0grep ‘abc’ ==exclude=*,elf /root/xxxx
0grep‘abc′--include=*,conf --exclude=*demo.conf
helpereubuntu-64bit:~/demo-20210511sgrep-Rn token./
1.tot:2:taken
/dd/e.txt:1:aaa\ntaken
helper@ubuntu-64bit:~/demo-20210511sgrep--exclude=e.*
-Rn token./
/l.txt:2:token
helpereubuntu-64bit:~/demo-20210511s
·全盘搜索某个表达式
0grep-Rn -i*str*/
/home/helper/demo-20210511/1.txt:3:webshel1
Binaryfile/home/helper/goby-linux-x64-1.8.239/golib/goby-cmd-linux matches
AC
helper@ubuntu-64bit:~/demo-20210511s
---
## Page 186
0x03确定系统相关信息
查看系统版本信息
cat /etc/issue
●Ubuntu/Debian 系列适用
0cat /etc/lsb=release
01sb_release =a
●Redhat/Centos 系列适用
0cat /etc/redhat=release
查看系统是32位还是64位
x86_64为64位
Inte1 80386、i386、i486、i586、i686 等均为 32 位
getconf LONG_BIT
unane =n
arch
′
hostnamectl
file/sbin/init或者file/lib/systend/systend
·lscpu|grep“Architecture\|架构”
dpkg--print-architecture[适用于Ubuntu类系统]
dpkg-architecture=g DEB_BUILD_ARCH[适用于Ubuntu类系统]
查看内核版本信息
cat /proc/version
uname =a
hostnamectl
0x04系统完整性检查（root权限下执行）
很多时候我们想知道系统是否存在系统命令、软件包等被替换的情况，可以使用下面的方法进行检查
RedHat/Centos
·rpm =Va
Ubuntu/Debian
▪debsums ==al1
0x05系统文件监控工具
●AIDE - Acdvanced Intrusion Detection Environment
● inotify
●tripwire
●Auditd
---
## Page 187
0x06查看glibc版本
●ldd --version
helper@ubuntu-64bit:~sldd--version
ldd (Ubuntu GLIBC2.23-0ubuntu11.3)2.23
Copyright （C) 2016 Free Software Foundation，Inc.
This is free software;see the source for copying conditions.
There is NO
warranty;not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE
Written by Roland McGrath and Ulrich Drepper.
helper@ubuntu-64bit:~$
[helper@centos-7 ~]$ ldd --version
ldd (GNU libc) 2.17
Copyright (C) 2e12 Free Software Foundation,Inc.
This is free software; see the source for copying conditions. There is No
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
Written by Roland McGrath and ulrich Drepper.
[helper@centos-7~]s
0x07文本比对
将要比对文本复制到burpsuite的Compare模块中->粘贴进去->使用words进行比对
---
## Page 188
?
不同的内容会有颜色标识
---
## Page 190
知识点附录
本来没有想单拿出来写，但是越研究越深，所以单拿出来
在Linux中:
·打开terminal，也就是终端程序，之后可以获得一个shell
·通过ssh连接到linux的ssh-server服务器，也可以获得一个shell
通常我们都是通过以上两种方式来获得一个shell，之后运行程序的，此时我需要纠正一个概念，我们通常都说获得一个
shell，本质上来说，我们获取了一个session（会话，以下session都是会话）
helperCbogon:~$
拿两种常见情况进行举例
案例1
我们输入
helper@bogon:~$ping www.baidu.com
PING www.wshifen.com （104.193.88.123) 56(84) bytes of data.
64 bytes from 104.193.88.123:icmp_seq=1 tt1=128 time=406 ms
64 bytes from 104.193.88.123:icmp_seq=2 tt1=128 time=409 ms
64 bytes from 104.193.88.123:icmp_seq=3 ttl=128 time=429 ms
大家都知道，此时我们启动了一个程序ping，并且创建了一个进程，我们再开一个终端ssh连接这个服务器看一下
helper@bogon:S ps-auxgrep ping
helper
17790.00.012888
1812 pts/2
S+00:220:00pingwww.baidu.com
helper
1786
0.00.0 14224 1088pts/1
+S
00:25
0:00 grep --color=auto ping
helpergbogon:~s 
可以看到，我们起了一个PID为1779的进程，进程在不断向我们打印ping的结果，那么本质上来讲是什么样的呢？
我们使用psajfx来看一下
---
## Page 191
668
868
890？
-1 Ss
e
:ea/usr/sbin/sshd-0