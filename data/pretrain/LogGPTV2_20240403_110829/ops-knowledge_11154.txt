User: I checked the activate script and it looks to me all it does is:

set VIRTUAL_ENV env
append $VIRTUAL_ENV/bin in front of PATH

How does virtualenv provide that magical virtual environment by these? What do I miss?
Assistant: First the user creates a new virtualenv with the command virtualenv myenv. This creates a directory called myenv and copies the system python binary to myenv/bin. It also adds other necessary files and directories to myenv, including a setup script in bin/activate and a lib subdirectory for modules and packages.
Then the user sources the activate script with . myenv/bin/activate, which sets the shell’s PATH environment variable to start with myenv/bin.
Now when the user runs python from this shell, it will execute the copy of the binary stored in myenv/bin. Even though the binary is identical to the one in /usr/bin/python, the standard python binary is designed to search for packages and modules in directories that are relative to the binary’s path (this functionality is not related to virtualenv). It looks in ../lib/pythonX.Y where X and Y are the major and minor version numbers of the python binary. So now it is looking in myenv/lib/pythonX.Y.
The myenv/bin directory also contains a script named pip so that when the user installs new packages using pip from the virtualenv, they will be installed in myenv/lib/pythonX.Y