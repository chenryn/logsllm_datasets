Timechart 可以显示更详细的信息，上图实际上是一个矢量图形 SVG 格式，用 SVG viewer 的放大功能，我们可以将该图的细节部分放大，timechart 的设计理念叫做”infinitely zoomable”。放大之后便可以看到一些更详细的信息，类似网上的 google 地图，找到国家之后，可以放大，看城市的分布，再放大，可以看到某个城市的街道分布，还可以放大以便得到更加详细的信息。    
完整的 timechart 图形和颜色解读超出了本文的范围，感兴趣的读者可以到作者 Arjan 的博客上查看。这里仅举一个例子，上图中有一条 bar 对应了 Xorg 进程。多数时候该进程都处于 waiting 状态，只有需要显示什么的时候它才会开始和内核通信，以便进行绘图所需的 IO 操作。    
将 Xorg 条目放大的例子图形如下：    
### 图 2. perf timechart detail    
![pic](20161129_03_pic_002.jpg)      
上图中需要注意的是几条绿色的短线，表示进程通信，即准备绘图。假如通信的两个进程在图中上下相邻，那么绿线可以连接他们。但如果不相邻，则只会显示如上图所示的被截断的绿色短线。    
蓝色部分表示进程忙碌，黄色部分表示该进程的时间片已经用完，但仍处于就绪状态，在等待调度器给予 CPU。    
通过这张图，便可以较直观地看到进程在一段时间内的详细行为。    
## 使用 Script 增强 perf 的功能    
通常，面对看似复杂，实则较有规律的计算机输出，程序员们总是会用脚本来进行处理：比如给定一个文本文件，想从中找出有多少个数字 0125，人们不会打开文件然后用肉眼去一个一个地数，而是用 grep 命令来进行处理。    
perf 的输出虽然是文本格式，但还是不太容易分析和阅读。往往也需要进一步处理，perl 和 python 是目前最强大的两种脚本语言。Tom Zanussi 将 perl 和 python 解析器嵌入到 perf 程序中，从而使得 perf 能够自动执行 perl 或者 python 脚本进一步进行处理，从而为 perf 提供了强大的扩展能力。因为任何人都可以编写新的脚本，对 perf 的原始输出数据进行所需要的进一步处理。这个特性所带来的好处很类似于 plug-in 之于 eclipse。    
下面的命令可以查看系统中已经安装的脚本：    
```  
 # perf trace -l     
    List of available trace scripts:     
      syscall-counts [comm]                system-wide syscall counts     
      syscall-counts-by-pid [comm]         system-wide syscall counts, by pid     
      failed-syscalls-by-pid [comm]        system-wide failed syscalls, by pid     
。。。    
```  
比如 failed-syscalls 脚本，执行的效果如下：    
```  
 # perf trace record failed-syscalls     
    ^C[ perf record: Woken up 11 times to write data ]                             
    [ perf record: Captured and wrote 1.939 MB perf.data (~84709 samples) ]       
 perf trace report failed-syscalls     
    perf trace started with Perl script \     
	 /root/libexec/perf-core/scripts/perl/failed-syscalls.pl     
    failed syscalls, by comm:     
    comm                    # errors     
    --------------------  ----------     
    firefox                     1721     
    claws-mail                   149     
    konsole                       99     
    X                             77     
    emacs                         56     
    [...]     
    failed syscalls, by syscall:     
    syscall                           # errors     
    ------------------------------  ----------     
    sys_read                              2042     
    sys_futex                              130     
    sys_mmap_pgoff                          71     
    sys_access                              33     
    sys_stat64                               5     
    sys_inotify_add_watch                    4     
    [...]    
```  
该报表分别按进程和按系统调用显示失败的次数。非常简单明了，而如果通过普通的 perf record 加 perf report 命令，则需要自己手工或者编写脚本来统计这些数字。    
我想重要的不仅是学习目前已经存在的这些脚本，而是理解如何利用 perf 的脚本功能开发新的功能。但如何写 perf 脚本超出了本文的范围，要想描述清楚估计需要一篇单独的文章。因此不再赘述。    
## 结束语    
从 2.6.31 开始，一晃居然也有几个年头了，期间每一个内核版本都会有新的 perf 特性。因此于我而言，阅读新的 changelog 并在其中发现 perf 的新功能已经成为一项乐趣，类似喜欢陈奕迅的人们期待他创作出新的专辑一般。    
本文写到这里可以暂时告一段落，还有一些命令没有介绍，而且或许就在此时此刻，新的功能已经加入 perf 家族了。所以当您读到这篇文章时，本文恐怕已经开始泛黄，然而我依旧感到高兴，因为我正在经历一个伟大时代，Linux 的黄金时代吧。    
本人水平有限，必然有写的不对的地方，还希望能和大家一起交流。    
## 参考资料    
2\.6\.34 源代码 tools 目录下的文档。    
Lwn 上的文章 Perfcounters added to the mainline以及 Scripting support for perf。    
http://lwn.net/Articles/339361/    
http://lwn.net/Articles/373842/    
Ingo Molnar 写的关于 sched perf的教材。    
http://lwn.net/Articles/353295/    
Arjan van de Ven ’ s 关于 timechart 的 blog。    
http://blog.fenrus.org/?p=5    
IBM Developerworks 网站上的文章 用 OProfile 彻底了解性能。    
http://www.ibm.com/developerworks/cn/linux/l-oprof/index.html    
Intel 公司的 Jeff Andrews 写的 Branch and Loop Reorganization to Prevent Mispredicts。    
http://software.intel.com/en-us/articles/branch-and-loop-reorganization-to-prevent-mispredicts/    
在 developerWorks Linux 专区 寻找为 Linux 开发人员（包括 Linux 新手入门）准备的更多参考资料，查阅我们 最受欢迎的文章和教程。    
http://www.ibm.com/developerworks/cn/linux/    
http://www.ibm.com/developerworks/cn/linux/newto/    
http://www.ibm.com/developerworks/cn/linux/best2009/index.html    
在 developerWorks 上查阅所有 Linux 技巧 和 Linux 教程。    
http://www.ibm.com/developerworks/cn/views/linux/libraryview.jsp?search_by=Linux+%E6%8A%80%E5%B7%A7    
http://www.ibm.com/developerworks/cn/views/linux/libraryview.jsp?type_by=%E6%95%99%E7%A8%8B    
随时关注 developerWorks 技术活动和网络广播。    
http://www.ibm.com/developerworks/cn/offers/techbriefings/    
http://www.ibm.com/developerworks/cn/swi/    
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")