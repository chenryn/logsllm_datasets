Extraction from forensic image. Finally, physical access
to the target’s personal computer could be used to extract
valid authentication cookies from web-browsers. Stored au-
thentication cookies can be automatically found searching a
gathered hard drive image or live analysis techniques such
as Forenscope [6].
3.3 Depth of Information Collection
Starting from a target proﬁle, a number of subsequent ele-
ments become available for crawling such as the user’s friends,
uploaded photos and joined groups. With these elements,
again, a number of subsequent elements can be accessed.
For example, the single-view page of a photo can contain
comments and likes of other users, who do not necessarily
have to be direct friends of the owner of the photo. Addi-
tionally, users can be tagged in photos. These are all starting
points for further crawling. The same applies for groups; A
group gives access to the proﬁles of all group members, pho-
tos with users tagged, who are potentially not members of
the group, and so forth. Consequently, a social snapshot of
a single user does not only obtain the user’s data and data
of her friends, but its depth can reach a high value. Thus,
the depth of the social snapshot is an essential conﬁguration
option which controls the social snapshot’s extent. Figure 2
shows an example of a social snapshot with depth = 2. For a
given user all of her friends are ﬁrst fetched, followed by the
friend’s photos. The single path for photos of the friend’s
user illustrates the magnitude of available paths and thus
data. Deﬁning a speciﬁc social snapshot depth enables us
to limit the amount of fetched data. The amount of data
grows exponentially with social snapshot depth.
It is important to note that the relevance of data is not
the same for diﬀerent elements. For example, tagged users
Social Network Service CloudThird-partyapplicationSocial snapshot clientWeb serverWeb serverSocial data pool5. Crawler data7. social data1. Authentication(credentials / cookie)4. Session secret3. Contact list2. Shared secret6. API requestsautomated web browsersole purpose consists of gathering all possible account data
through the target OSN’s API. The main design goal of our
third-party OSN application is performance, thus multiple
program threads are used to gather information as quickly
as possible. The third-party application can be conﬁgured
to prioritize speciﬁc account data and to download only a
predeﬁned set of account artifacts (social snapshot depth).
Hijack. The hijack module is a network sniﬀer module
that collects valid OSN HTTP authentication cookies from
sources such as LAN or WiFi connections. We built our
hijack module on the basis of Mike Perry’s modiﬁed libpkt
library[23], which works out of the box with LAN, unen-
crypted WiFi, and WEP encrypted WiFi connections. The
hijack module oﬀers a command line interface and is imple-
mented in Python.
Digital image forensics. The digital image forensics mod-
ule matches image ﬁles gathered from online social networks
with their original source. The goal is to ﬁnd the pristine
image of a compressed picture extracted through our social
snapshot application. All images are initially clustered ac-
cording to their color histograms, rescaled and compressed
to the target picture size, and ﬁnally matched with pattern
recognition techniques. As social networks typically remove
meta (EXIF) information of uploaded images this module is
helpful in ﬁnding the source of collected pictures from OSNs
and thus restore information such as the original image cre-
ation time, camera model etc.
Analysis. The analysis module is a parser for the results
gathered with the data collection modules of our applica-
tion. It parses the crawled data as well as the information
collected through the OSN’s API. Furthermore, the analysis
module fetches additional content such as photos that are
openly available by knowing the URI from online social net-
works. Finally, it generates a report on the social snapshot
data. The analysis module can be used to generate exact
timelines of communication, metadata summaries, e.g. of
pictures, a weighted graph from the network of friends, or
their online communication.
4. RESULTS AND EVALUATION
In this section, we describe the evaluation of our social snap-
shot application. Our generic social snapshot approach is
applicable to the majority of today’s social networking ser-
vices. The sole requirement for target social networks is
the availability of a developer API or the adaption of our
automated browser.
For a forensic tool there are some special requirements:
• Ability to reproduce results,
• Create a complete snapshot of the account.
To make digital evidence suﬃciently reliable for court it is
helpful if the process of gathering the evidence can be repro-
duced with identical results. In dynamic Web-based applica-
tions this is not possible because data is continuously added
(eg. posts by friends) or removed (eg. friends-of-friends de-
ciding to unshare data by modifying their privacy settings).
Figure 2: Example for elements fetched with social
snapshot of depth=2
in a photo are most likely in a closer relationship to the
owner of the photo than two users that joined the same
group, just because of similar interests. Therefore, the social
snapshot tool prioritizes element types that suggest higher
data relevance and uses them as a starting point of each
iteration. The prioritization is performed on the basis of
predeﬁned priority ﬂags in the third-party application.
3.4 Modules
Our social snapshot application consists of a number of mod-
ules, which we describe in the following. The core modules
are the automated web browser and our custom third-party
application as outlined in Figure 1.
Social snapshot client. The social snapshot client mod-
ule initializes the data gathering process with a given user’s
credentials or cookies. Once started, the client ﬁrst authen-
ticates itself against the target online social network. In the
following, the client automatically adds our custom third-
party application with the highest possible permissions to
the target’s account. Information that cannot be retrieved
through our third-party application is crawled and parsed
by the client. Once all information has been retrieved, the
client removes the third-party application and logs out of
the given social networking account. The interaction with
the social network as well as web-crawling is performed by
the Selenium framework [22], which we describe in the fol-
lowing. We implemented the social snapshot client in Java
and the module oﬀers a command line interface.
Automated web browser. The browser module is respon-
sible for the basic interaction with the target online social
network. We used the Selenium testing framework [22] to
automate the Mozilla Firefox browser. Selenium comes with
a command line server that receives Selenium commands.
Therefore, we can use the framework to script the behavior
of an average user using her Firefox web-browser to surf a
social networking website. We had to overcome one initial
obstacle though: cookie authentication with Selenium which
was not supported out-of-the-box. We ﬁnally patched the
original Java source code of the command line server to be
able to correctly set HTTP cookies for the cookie authenti-
cation mode.
Third-party social snapshot application. Our OSN so-
cial snapshot application is a third-party application, which
UserFriendsPhotosUsersGroupsPhotos............depth=2It is, however, possible to have two or more independent in-
vestigators make snapshots at a similar time. While not all
artifacts will be identical one can easily compare the sets of
artifacts retrieved by our tool.
It is important that all artifacts used in the case are con-
tained in both sets and that the sets do not contain too many
unique artifacts because this would suggest that the snap-
shots are not reliable. Similar to information retrieval re-
search we can thus adapt the metrics of precision and recall.
n independent investigators gather each a set of artifacts Ai.
|(cid:83)n
(cid:84) Aj|
Recallj = (|(cid:83)n
i=0 Ai)(cid:84) Aj|
|(cid:83)n
i=0 Ai|
Precisionj =
can be combined to the F score.
i=0 Ai
|Aj|
F = 2 ·
|(cid:83)n
|(cid:83)n
i=0 Ai
|Aj|
i=0 Ai
|Aj|
(cid:84) Aj|
(cid:84) Aj|
· (|(cid:83)n
i=0 Ai)(cid:84) Aj|
|(cid:83)n
+ (|(cid:83)n
i=0 Ai)(cid:84) Aj|
i=0 Ai|
|(cid:83)n
i=0 Ai|
. Both
(1)
4.1 Social Snapshots on Facebook
At the time of writing Facebook is the most popular online
social network with a claimed user base of over 600 mil-
lions of users. Furthermore, Facebook supports third-party
applications and user proﬁles contain a plethora of infor-
mation. We thus decided to evaluate our social snapshot
tool on Facebook. Third-party applications on Facebook
have access to account data via the Graph API[10]. Almost
the entire account data of Facebook users and their con-
tacts are made available through their API. Facebook solely
makes sensitive contact information such as phone numbers
and e-mail addresses inaccessible to third-party applications.
Hence our social snapshot client crawls the contact informa-
tion of Facebook proﬁles, while all remaining social data is
fetched through a custom third-party application. In Octo-
ber 2010, Facebook introduced a download option[12] that
enables users to export their account data. Table 1 out-
lines the diﬀerent proﬁle content elements gathered through
our social snapshot application as compared with Facebook’s
download functionality. As shown in Table 1, the down-
load functionality only oﬀers a very limited representation
of a user’s online activity. For example, for a given user’s
friends, only their ambiguous names are made available and
no information on the activity of a given user’s friends is
included.
4.2 Hardware and Software Setup
To test the functionality of our social snapshot application,
we developed a third-party application for Facebook based
on their PHP Graph SDK. One of the main modiﬁcations
we performed on their original library was the support for
multi-threaded API requests. Our third-party social snap-
shot application for Facebook is thus able to handle a num-
ber of predeﬁned API requests simultaneously. The single
requests are hereby pushed on a request queue with a spe-
ciﬁc priority. Hence our third-party application can be con-
ﬁgured to, for example, fetch private messages before user
comments of a Facebook group. The extent/depth of social
snapshots can be further conﬁgured as a parameter for our
third-party application. We deployed it on a Linux server in
our university network.
Element
Download social snapshot
Contact details
News feed
Checkins
Photo Tags
Video Tags
Friends
Likes
Movies
Music
Books
Groups
Proﬁle feed (Wall)
Photo Albums
Video Uploads
Messages
−
−
−
−
−
!Crawler
!Graph API
!Graph API
!Graph API
!Graph API
name onlya !Graph API
name onlya !Graph API
name onlya !Graph API
name onlya !Graph API
name onlya !Graph API
name onlya !Graph API
!Graph API
!Graph API
!Graph API
!Graph API