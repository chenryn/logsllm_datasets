BlockUIContainer类似于InlineUIContainer，其中也可以添加派生自UIElement的元素。
Paragraph和Section是简单的块，其中Paragraph包含内联元素；Section用于组合其他
Block元素。使用Paragraph块可以确定在段落内部或段落之间是否允许添加换页符或换行
符。KeepTogether可用于禁止在段落内部换行，KeepWithNext尝试把一个段落与下一个段
落合并起来。如果段落用换页符或换行符隔开，那么MinWindowLines会定义分隔符之后
的最小行数，MinOrphanLines定义分隔符之前的最小行数。
Paragraph块也允许在段落内部用TextDecoration元素装饰文本。预定义的文本装饰由
TextDecoration:Baseline、Overline、Strikethrough和Underline定义。
下面的XAML代码显示了多个Paragraph元素。一个Paragraph元素包含标题，其后的
另一个Paragraph元素包含属于上述标题的内容。这两个段落通过特性KeepWithNext连接
起来。把KeepTogether设置为True，也确保包含内容的段落不被隔开（代码文件
DocumentsDemos/FlowDocumentsDemo/ParagraphDemo.xaml）。
          Lyrics
          Mary had a little lamb
          Mary had a little lamb, 
          little lamb, little lamb, 
          Mary had a little lamb, 
          whose fleece was white as snow.
          And everywhere that Mary went, 
          Mary went, Mary went, 
          and everywhere that Mary went, 
          the lamb was sure to go.
          Humpty Dumpty
          Humpty dumpty sat on a wall
          Humpty dumpty had a great fall
          All the King's horses
          And all the King's men
          Couldn't put Humpty together again
结果如图35-6所示。
图35-7
图35-6
35.2.5 列表
List类用于创建无序或有序的文本列表。List通过设置MarkerStyle属性，定义了其列
表项的项目符号样式。MarkerStyle的类型是TextMarkerStyle，它可以是数字
（Decimal）、字母（LowerLatin和UpperLatin）、罗马数字（LowerRoman和
UpperRoman）或图片（Disc、Circle、Square、Box）。List只能包含ListItem元素，
ListItem只能包含Block元素。
用XAML定义如下列表，结果如图35-7所示（代码文
件DocumentsDemos/FlowDocumentsDemo/
ListDemo.xaml）。
        Monday
        Tuesday
        Wednesday
35.2.6 表
Table类非常类似于第34章讨论的Grid类，它也定义行和列。下面的例子说明了如何
使用Table创建FlowDocument。现在以编程方式创建表，XAML文件包含
FlowDocumentReader（代码文件DocumentsDemos/TableDemo/MainWindow.xaml）：
表中显示的数据从F1Results属性中返回（代码文件
DocumentsDemos/TableDemo/MainWindow. xaml.cs）：
    private string[][] F1Results =>
      new string[][]
      {
        new string[] { "1.", "Lewis Hamilton", "384" },
        new string[] { "2.", "Nico Rosberg", "317" },
        new string[] { "3.", "David Riccardio", "238" },
        new string[] { "4.", "Valtteri Botas", "186" },
        new string[] { "5.", "Sebastian Vettel", "167"}
      };
要创建表，可以给Columns属性添加TableColumn对象。而利用TableColumn可以指定
宽度和背景。
Table还包含TableRowGroup对象。TableRowGroup有一个Rows属性，可以在Rows属
性中添加TableRow对象。TableRow类定义了一个Cells属性，在Cells属性中可以添加
TableCell对象。TableCell对象可以包含任意Block元素。这里使用了一个Paragraph元素，
其中包含Inline元素Run：
    var doc = new FlowDocument();
    var t1 = new Table();
    t1.Columns.Add(new TableColumn
    {
      Width = new GridLength(50, GridUnitType.Pixel)
    });
    t1.Columns.Add(new TableColumn
    {
      Width = new GridLength(1, GridUnitType.Auto)
    });
    t1.Columns.Add(new TableColumn
    {
      Width = new GridLength(1, GridUnitType.Auto)
    });
    var titleRow = new TableRow { Background = Brushes.LightBlue };
    var titleCell = new TableCell
    {
      ColumnSpan = 3, TextAlignment = TextAlignment.Center
    };
    titleCell.Blocks.Add(
      new Paragraph(new Run("Formula 1 Championship 2014")
      {
        FontSize=24, FontWeight = FontWeights.Bold
      }));
    titleRow.Cells.Add(titleCell);
    var headerRow = new TableRow
    {
      Background = Brushes.LightGoldenrodYellow
    };
    headerRow.Cells.Add(
      new TableCell(new Paragraph(new Run("Pos"))
      {
        FontSize = 14,
        FontWeight=FontWeights.Bold
      }));
      headerRow.Cells.Add(new TableCell(new Paragraph(new Run("Name"))
      {
        FontSize = 14, FontWeight = FontWeights.Bold
      }));
    headerRow.Cells.Add(
      new TableCell(new Paragraph(new Run("Points"))
      {
        FontSize = 14, FontWeight = FontWeights.Bold
      }));
    var rowGroup = new TableRowGroup();
    rowGroup.Rows.Add(titleRow);
    rowGroup.Rows.Add(headerRow);
    List rows = F1Results.Select(row =>
    {
      var tr = new TableRow();
      foreach (var cell in row)
      {
        tr.Cells.Add(new TableCell(new Paragraph(new Run(cell))));
      }
      return tr;
    }).ToList();
    rows.ForEach(r => rowGroup.Rows.Add(r));
    t1.RowGroups.Add(rowGroup);
    doc.Blocks.Add(t1);
    reader.Document = doc;
运行应用程序，会显示一个格式化好的表，如图35-8所示。
图35-8
35.2.7 块的锚定
既然学习了Inline和Block元素，就可以使用AnchoredBlock类型的Inline元素合并它
们。AnchoredBlock是一个抽象基类，它有两个具体的实现方式Figure和Floater。
Floater使用属性HorizontalAlignment和Width同时显示其内容和主要内容。
从上面的例子开始，添加一个包含Floater的新段落。这个Floater采用左对齐方式，宽
度为120。如图35-9所示，下一个段落将环绕它（代码文件
DocumentsDemos/FlowDocumentsDemo/ParagraphKeep-Together.xaml）。
        Mary had a little lamb
          Sarah Josepha Hale
      Mary had a little lamb
图35-9
Figure采用水平和垂直对齐方式，可以锚定到页面、内容、列或段落上。下面代码中
的Figure锚定到页面中心处，但水平和垂直方向有偏移。设置WrapDirection，使左列和右
列环绕着图片，图35-10显示了环绕的结果（代码文件
DocumentsDemos/FlowDocumentsDemo/FigureAlignment.xaml）。
        Lyrics Samples
图35-10
Figure和Floater都用于添加不在主流中的内容，尽管这两个功能看起来类似，但它们
的特征大不相同。表35-1列出了Figure和Floater之间的区别。
表35-1
特征
Floater
Figure
位置
Floater不能定位，在空间可用时
显示它
Figure可以用水平和垂直锚点来
定位，它可以停靠在页面、内
容、列或段落上
宽度
Floater只能放在一列中。如果它
设置的宽度大于列宽，就忽略它
Figure可以跨越多列。Figure的宽
度可以设置为半页或两列
分页
如果Floater高于列高，就分解
Floater，放到下一列或下一页上
如果Figure大于列高，就只显示
列中的部分，其他内容会丢失
35.3 流文档
前面介绍了所有Inline和Block元素，现在我们知道应该把什么内容放在流文档中。
FlowDocument类可以包含Block元素，Block元素可以包含Block或Inline元素，这取决于
Block的类型。
FlowDocument类的一个主要功能是把流分解为多个页面。这是通过FlowDocument实
现的IDocumentPaginatorSource接口实现。
FlowDocument的其他选项包括建立默认字体、前景画笔和背景画笔，以及配置页面
和列的大小。
下面FlowDocument的XAML代码定义了默认字体、字体大小、列宽和列之间的标
尺：
现在需要一种方式来查看文档。以下列表描述了几个查看器：
● 
RichTextBox——一个简单的查看器，还允许编辑（只要IsReadOnly属性没有设置
为true）。RichTextBox不在多列中显示文档，而以滚动模式显示文档。这类似于
Microsoft 
Word中的Web布局。把HorizontalScrollbarVisibility设置为
ScrollbarVisibility.Auto，就可以启用滚动条。
● FlowDocumentScrollViewer——一个读取器，只能读取文档，不能编辑文档，这个
读取器允许放大文档，工具栏中的滑块可以使用IsToolbarEnabled属性，来启用其
缩放功能。CanIncreaseZoom、CanDecreaseZoom、MinZoom和MaxZoom这样的设
置都允许设置缩放功能。
● FlowDocumentPageViewer——给文档分页的查看器。使用这个查看器，不仅可以通
过其工具栏放大文档，还可以在页面之间切换。
● 
FlowDocumentReader——这个查看器合并了FlowDocumentScrollViewer和
FlowDocument-PageViewer的功能，它支持不同的查看模式，这些模式可以在工具
栏中设置，或者使用FlowDocumentReaderViewingMode类型的ViewingMode属性
来设置。这个枚举的值可以是Page、TwoPage和Scroll，也可以根据需要禁用查看
模式。
演示流文档的示例应用程序定义了几个读取器，以便动态选择其中一个读取器。在
Grid元素中包含FlowDocumentReader、RichTextBox、FlowDocumentScrollViewer和
FlowDocumentPageViewer。所有的读取器都把Visibility属性设置为Collapsed，这样在启动
时，就不会显示任何读取器。网格中的第一个子元素是一个组合框，它允许用户选择活动
的读取器。组合框的ItemsSource属性绑定到Readers属性上，来显示读取器列表。选择了
一个读取器后，就调用OnReaderSelectionChanged方法（代码文件
DocumentsDemos/FlowDocumentsDemo/MainWindow.xaml）：