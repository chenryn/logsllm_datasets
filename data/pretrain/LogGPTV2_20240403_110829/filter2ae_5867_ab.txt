        gasPrice     *big.Int             //最低的GasPrice限制
        /*
           其他参数
        */
    }
生成一个tx实例时，发现有对gasPrice的最低要求，具体在这个函数中会拒绝接收此交易。
    // validateTx checks whether a transaction is valid according to the consensus
    // rules and adheres to some heuristic limits of the local node (price and size).
    func (pool *TxPool) validateTx(tx *types.Transaction, local bool) error {
        // 在这里是gasPrice的校验
        if !local && pool.gasPrice.Cmp(tx.GasPrice()) > 0 {
            return ErrUnderpriced
        }
        /*
           ...
        */
        return nil
    }
#### ii. 移除低于阈值的交易
代码路径：./go-ethereum/core/tx_list.go 并且在处理txs中，会将低于阈值的交易删除，但本地的交易不会删除。
    // Cap finds all the transactions below the given price threshold, drops them
    // from the priced list and returs them for further removal from the entire pool.
    func (l *txPricedList) Cap(threshold *big.Int, local *accountSet) types.Transactions {
        drop := make(types.Transactions, 0, 128) // Remote underpriced transactions to drop
        save := make(types.Transactions, 0, 64)  // Local underpriced transactions to keep
        for len(*l.items) > 0 {
            // Discard stale transactions if found during cleanup
            tx := heap.Pop(l.items).(*types.Transaction)
            if _, ok := (*l.all)[tx.Hash()]; !ok {
                // 如果发现一个已经删除的,那么更新states计数器
                l.stales--                continue
            }
            // Stop the discards if we've reached the threshold
            if tx.GasPrice().Cmp(threshold) >= 0 {
                // 如果价格不小于阈值, 那么退出
                save = append(save, tx)
                break
            }
            // Non stale transaction found, discard unless local
            if local.containsTx(tx) {  //本地的交易不会删除
                save = append(save, tx)
            } else {
                drop = append(drop, tx)
            }
        }
        for _, tx := range save {
            heap.Push(l.items, tx)
        }
        return drop
    }
* * *
以上部分为区块链网络内一节点，尝试接收或加入 0 gasPrice 的交易时，会有部分过滤或规则限制。但通过修改源码，我们依然可以做到将 0
gasPrice 的交易合法加入到区块中，并进行之后的nonce计算。下面继续源码分析，考察通过此方式得到的区块，是否可以被其他节点接受，达成共识。
#### iii. 共识校验
代码路径：./go-ethereum/consensus/consensus.go 这是geth中，提供的共识算法engine接口
    type Engine interface {
        // 签名
        Author(header *types.Header) (common.Address, error)
        /*
            验证了header、seal，处理难度等函数
           ...
        */
        // 预处理区块头信息，修改难度等
        Prepare(chain ChainReader, header *types.Header) error
        // 区块奖励等，挖掘出区块后的事情
        Finalize(chain ChainReader, header *types.Header, state *state.StateDB, txs []*types.Transaction,
            uncles []*types.Header, receipts []*types.Receipt) (*types.Block, error)
        // 计算nonce，若收到更高的链，则退出
        Seal(chain ChainReader, block *types.Block, stop   
联系电话：(086) 136 8133 5016(沈经理，工作日:10:00-18:00)
欢迎扫码咨询：
**区块链行业安全解决方案**
黑客通过DDoS攻击、CC攻击、系统漏洞、代码漏洞、业务流程漏洞、API-Key漏洞等进行攻击和入侵，给区块链项目的管理运营团队及用户造成巨大的经济损失。知道创宇十余年安全经验，凭借多重防护+云端大数据技术，为区块链应用提供专属安全解决方案。
欢迎扫码咨询：
### 参考链接
  1. json-rpc接口盗币手法：[金钱难寐，大盗独行——以太坊 JSON-RPC 接口多种盗币手法大揭秘](https://paper.seebug.org/656/#222)
  2. 
  3. [how-to-create-your-own-private-ethereum-blockchain-dad6af82fc9f](https://medium.com/mercuryprotocol/how-to-create-your-own-private-ethereum-blockchain-dad6af82fc9f)
  4. 零手续费交易：
  5. 慢雾命名的“以太坊黑色情人节”，细节：以太坊生态缺陷导致的一起亿级代币盗窃大案：
  6. 揭秘以太坊中潜伏多年的“偷渡”漏洞，全球黑客正在疯狂偷币：
* * *