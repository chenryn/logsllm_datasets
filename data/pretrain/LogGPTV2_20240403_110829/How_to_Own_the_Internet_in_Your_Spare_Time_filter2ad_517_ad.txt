7Of particular interest are ﬂaws which can only be exploited to in-
fect hosts that initiate a connection. Such ﬂaws cannot be effectively
used for fast-spreading worms, but are suitable for contagion worms.
plementation vulnerabilities, (iv) the programs often ex-
ecute on user’s desktops rather than servers, and hence
are more likely to have access to sensitive ﬁles such
as passwords, credit card numbers, address books, and
(v) the use of the P2P network often entails the transfer
of “grey” content (e.g., pornography, pirated music and
videos), arguably making the P2P users less inclined to
draw attention to any unusual behavior of the system that
they perceive.
The ﬁnal, sobering quality of P2P networks for form-
ing contagion worms is their potentially immense size.
We obtained a trace of TCP port 1214 trafﬁc recorded
in November, 2001, at the border of a large university.
Port 1214 is used by the KaZaA [Ka01] and Morpheus
[Mu01] P2P sharing systems (both8 built on the Fast-
Track P2P framework [Fa01]). As of January, 2002,
the KaZaA distributors claim that more than 30,000,000
copies have been downloaded [Ka01]. Since our data
does not allow us to readily distinguish between KaZaA
and Morpheus trafﬁc, for ease of exposition we will sim-
ply refer to all of the trafﬁc as KaZaA.
Our KaZaA trace consists of summaries of TCP con-
nections recorded by a passive network monitor. We
have restricted the data to only those connections for
which successful SYN and FIN handshakes were both
seen (corresponding to connections reliably established
and terminated, and eliminating unsuccessful connec-
tions such as those due to scanning).
The volume of KaZaA trafﬁc at the university is im-
mense:
it comprises 5–10 million established connec-
tions per day. What is particularly striking, however, is
the diversity of the remote hosts with which hosts at the
university participated in KaZaA connections. During
the month of November, 9 million distinct remote IP ad-
dresses engaged in successful KaZaA connections with
university hosts. (There were 5,800 distinct university
KaZaA hosts during this time.)
Distinct addresses do not directly equate to distinct com-
puters. A single address can represent multiple comput-
ers due to the use of NAT, DHCP, or modem dialups ac-
cessed by different users. On the other hand, the same
computer can also show up as different addresses due
to these mechanisms. Thus, we do not have a precise
sense of the number of distinct computers involved in the
November trace, but it appears reasonable to estimate it
as around 9 million.
KaZaA uses a variant of HTTP for framing its applica-
8 In early 2002, Morpheus switched to instead use the Gnutella P2P
framework [Re02].
tion protocol. Given HTTP’s support for variable-sized
headers, it would not be surprising to ﬁnd that a buffer
overﬂow exploit of KaZaA exists. Given such an ex-
ploit, it is apparent that if an attacker started out having
infected all of the university’s KaZaA hosts, then after a
month they would have control of about 9 million hosts,
assuming that the KaZaA clients are sufﬁciently homo-
geneous that a single exploit could infect them all.9
How plausible is it that the attacker could begin with
control over all of the university’s KaZaA hosts? Quite:
while the goal of the contagion worm is to evade detec-
tion, the attacker can likely risk a more blatant attack on
a single university. If they can ﬁnd a university lacking
in diligent security monitoring (surely there must be a
few of these!), they can then compromise a single host
at the university, engage in “noisy” brute-force scanning
of the internal hosts to ﬁnd all of the KaZaA clients, and
infect them. They then switch into contagion spread-
ing.10
While the above argues that the attacker could gain the
9 million hosts within a month, the actual spread is likely
much faster, because once a remote host is infected, it
too contributes to spreading the contagion. Not only
does this accelerate the epidemic, but it also likely turns
it into a pandemic, because the remote hosts can connect
with other remote hosts that wouldn’t happen to visit the
university. Furthermore, depending on the protocol, a
single infected node could pretend to have information it
doesn’t have, in order to appear highly attractive and in-
crease the number of connections received, although that
would somewhat disrupt the normal patterns of commu-
nication.
We would like therefore to better understand the rate at
which a KaZaA contagion worm could spread, and to
what breadth. To estimate this from just the university
trace is difﬁcult, because we don’t know the total size
of the KaZaA population. Doubtless it is larger than
9,000,000—but is it as high as 30,000,000, as indicated
in [Ka01]? How many of those copies were redundant
(same user fetching the software multiple times), or are
no longer in use? On the other hand, could the popula-
tion be higher, due to users getting copies of the clients
from other sources than [Ka01]?
Another problem is that we do not know the degree to
9 It is actually worse than this.
It turns out [Bd02, We02] that
KaZaA already has a remote access backdoor installed! But for the
purposes of our discussion here, we put aside this fact.
10We note that some P2P networks are also amenable to constructing
ﬂash worms, because they include mechanisms by which an attacker
can monitor portions of the global query stream in order to compile a
hit-list of clients.
Figure 9: Complementary distribution of number of distinct
local university hosts to which different remote KaZaA hosts
connected. Both axes are log-scaled; the linear ﬁt shown in the
plot corresponds to a Pareto distribution with shape parameter
α = 2.1.
which the university’s hosts are “typical.” We also lack
any traces of their internal peer-to-peer trafﬁc, which, if
frequent, would have major implications for the rate at
which the worm could infect an entire remote site.
We are pursuing further work in this area. First, we are
attempting with colleagues to develop graph-based mod-
els with which we can then extrapolate properties of the
spread of the contagion based on different sets of as-
sumptions about the hosts in our trace. Second, we have
obtained traces of KaZaA trafﬁc from another university
(in another country), and will be analyzing these to de-
termine the degree of overlap and cross-talk between the
two universities, with which to then better estimate the
total KaZaA population and its communication patterns.
Finally, we are building a simulator for both active and
contagion worms within various peer-to-peer topologies.
As a last comment, we have evidence that the KaZaA
network may behave like a “scale-free” topology in
terms of its interconnection. Figure 9 shows the dis-
tribution of the degree of the remote hosts in the trace,
i.e., the number of distinct local hosts to which each re-
mote host connected during November, 2001. The plot is
shown as a log-log complementary distribution function:
the x-axis shows log10 of the remote host’s degree, and
the y-axis shows log10 of the probability of observing a
remote host with that outdegree or higher. (Due to the
immense size of the dataset, we plot a subset rather than
the entire dataset, randomly sampled with p = 0.01.)
A straight line on such a plot corresponds to a Pareto
distribution. While the majority of the remote hosts con-
Degree of Remote KaZaA HostP[X >= x]1510501000.000010.0010.1nected to only one or two local hosts, for those con-
necting to three or more hosts, the ﬁt to a Pareto dis-
tribution (with shape parameter α = 2.1) is compelling.
That the degree has such a distribution is then strongly
suggestive that the underlying KaZaA network may ex-
hibit a scale-free (or Zipf-like) topology. The propaga-
tion of contagion through such networks has recently
been studied [PV01]. While the discussion in that ar-
ticle is ﬂawed—it confounds the Internet’s underlying
IP topology with email and Web application topology—
the general framework the authors develop gives hope
that we can leverage it to better understand the behav-
ior of a KaZaA contagion worm. That said, we add that
the degree of the local hosts is clearly not Pareto, so the
analysis might not in fact apply.
6 Updates and Control
The last facet of worm design we examine concerns
mechanisms by which the attacker can control and mod-
ify a worm after its dissemination. The ease and re-
siliency with which an attacker can do so has serious
consequences for both how the threat of a deployed
worm can evolve, and the potential difﬁculty in detect-
ing the worm’s presence and operation after the initial
infection.
Some previous worms such as the Goner mail worm
[CE02] contained primitive remote control code, similar
to many common “zombies”, allowing the authors and
others to issue commands to a distributed DOS mod-
ule through an IRC [OR93] channel. (Indeed, the root
backdoor installed by Code Red II also offered a form
of unlimited remote control.) Others worms have at-
tempted to download updates and payloads from web
pages, such as W32/sonic [Sy00]. Both of these mech-
anisms, when employed, were quickly countered by re-
moving the pages and tracking the channels. Similarly,
previously seen DDOS tools such as Stacheldraht [Di99]
have included both encrypted communication and up-
date mechanisms for directly controlling the zombies.
a more
Here we brieﬂy explore
sophisticated
method—direct worm-to-worm communication and
programmable updates—which, while not yet observed
in the wild, is a natural evolution based on the previous
updatable worms and DDOS tools.
6.1 Distributed Control
In a distributed-control worm, each worm has a list of
other known, running copies of the worm and an ability
to create encrypted communication channels to spread
information. Any new command issued to the worms
has a unique identiﬁer and is cryptographically signed
using an author’s key. Once a worm has a copy of the
command, the command is ﬁrst veriﬁed by examining
the cryptographic signature, spread to every other known
instance of the worm, and then executed. This allows
any command to be initially sent to an arbitrary worm
instance, where it is then quickly spread to all running
copies.
The key to such a network is the degree of connectivity
maintained, in order to overcome infected hosts being
removed from the network, and to hasten the spread of
new commands. Although it is clear that a worm could
spread information to its neighbors about other worm in-
stances in order to create a more connected, highly re-
dundant network, it is useful to estimate the initial de-
gree of connectivity without these additional steps.
If each worm node only knows about other nodes it has
probed, infected, or been probed by, the average con-
nectivity is still very high. With 1M hosts, using permu-
tation scanning (with no halting), our simulator shows
that the average degree of nodes in the worm network
is 4 when 95% infection is achieved, and 5.5 when 99%
infection is achieved. Additionally, each permutation-
based rescan will add 2 to the degree of every worm, rep-
resenting the copy discovered by each instance, and the
copy which discovers each instance. Thus, after a couple
of rescans, the connectivity becomes very high without
requiring additional communication between the worm
instances.
Such a network could be used to quickly pass updates to
all running copies, without having a single point of com-
munication like that seen in previous worms, increas-
ing the staying power by preventing the communica-
tion channel from being disrupted or co-opted by others,
while still allowing the author to control their creation in
a difﬁcult-to-track manner.
6.2 Programatic Updates
The commands to a worm can of course be arbitrary
code. Many operating systems already support conve-
nient dynamic code loading, which could be readily em-
ployed by a worm’s author. Another possibility has the
bulk of the worm written in a ﬂexible language com-
bined with a small interpreter. By making the worm’s
commands be general modules, a huge increase in ﬂexi-
bility would be achieved.
Of particular interest are new attack modules and seeds
for new worms. If the author discovers a new security
hole and creates a new attack module, this could be re-
leased into the worm network. Even if only a few thou-
sand copies of the worm remain, this is enough of an
installed base for a hit-list like effect to occur upon in-
troduction of a new attack module, quickly spreading the
worm back through the network.
It is an interesting question whether it is possible for
a worm author to release such a worm with the cryp-
tographic modules correctly implemented. From expe-
rience, if the worm author attempts to build their own
cryptographic implementation,
this could well suffer
from a signiﬁcant weakness that could be exploited for
countering the worm. Yet there are a number of strong
cryptographic applications and libraries that could be
used by a worm author to provide the cryptographic
framework, a good example being OpenSSL [Op01],
which includes an encrypted session layer, symmetric
ciphers, hash functions, and public key ciphers and sig-
natures to provide for code signing.
7 Envisioning a Cyber “Center for Disease
Control”
Given the magnitude of Internet-scale threats as devel-
oped in the previous sections, we believe it is impera-
tive for the Internet in general, and for nations concerned
with cyberwarfare in particular, to attempt to counter the
immense risk. We argue that use of biological metaphors
reﬂected in the terms “worms” and “viruses” remains apt
for envisioning a nation-scale defense: the cyber equiva-
lent of the Centers for Disease Control and Prevention in
the United States [CDC02], whose mission is to monitor
the national and worldwide progression of various forms
of disease, identify incipient threats and new outbreaks,
and actively foster research for combating various dis-
eases and other health threats.
We see an analogous “Cyber-Center for Disease Con-
trol” (CDC) as having six roles:
• Identifying outbreaks.
• Rapidly analyzing pathogens.
• Fighting infections.
• Anticipating new vectors.
• Proactively devising detectors for new vectors.
• Resisting future threats.
In the remainder of this section, we discuss each of these
in turn, with our aim being not to comprehensively ex-
amine each role, but to spur further discussion within the
community.
7.1
Identifying outbreaks
As discussed earlier in this paper, to date Internet-scale
worms have been identiﬁed primarily via informal email
discussion on a few key mailing lists. This process takes
hours at a minimum, too slow for even the “slower” of
the rapidly-propagating worms, much less the very fast
worms developed in Section 4. The use of mailing lists
for identiﬁcation also raises the possibility of an attacker
targeting the mailing lists for denial-of-service in con-
junction with their main attack, which could greatly de-
lay identiﬁcation and a coordinated response. Present
institutions for analyzing malicious code events are not
able to produce a meaningful response before a fast ac-
tive worm reaches saturation.
CDC Task: develop robust communication mechanisms
for gathering and coordinating “ﬁeld information.” Such
mechanisms would likely be (i) decentralized, and (ii)
span multiple communication mechanisms (e.g., Inter-
net, cellular, pager, private line).
For ﬂash worms, and probably Warhol worms, arguably
no human-driven communication will sufﬁce for ade-
quate identiﬁcation of an outbreak before nearly com-
plete infection is achieved.
CDC Task: sponsor research in automated mechanisms
for detecting worms based on their trafﬁc patterns; fos-
ter the deployment of a widespread set of sensors. The
set of sensors must be sufﬁciently diverse or secret such
that an attacker cannot design their worm to avoid them.
This requirement may then call for the development of
sensors that operate within the Internet backbone, as op-
posed to at individual sites, and actuators that can re-
spond to various threats (see below).
Clearly, widespread deployment and use of sensors
raises potentially immense policy issues concerning pri-
vacy and access control. Present institutions lack the au-
thority and mandate to develop and deploy Internet-wide
sensors and actuators.
7.2 Rapidly analyzing pathogens
Once a worm pathogen is identiﬁed, the next step is to
understand (i) how it spreads and (ii) what it does in ad-
dition to spreading.
The ﬁrst of these is likely easier than the second, be-
cause the spreading functionality—or at least a subset
of it—will have manifested itself during the identiﬁca-