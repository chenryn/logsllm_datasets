### 优化后的文本

#### Taint Propagation in Loop Bodies
The input parameters for the GT (Generator Tool) included:
- \( M \): The number of variables, including a source variable `in` and a sink variable `out`.
- \( N \): The number of statements within a loop body.
- \( L \): The number of loop iterations, with \( L > M \).
- \( K \): The number of nested loop layers.

Each statement was a simple assignment, either `x = y` or `x = 0`. The GT first randomly generated schemes of assignment statements within the loop bodies. It then selected schemes where taint propagation from `in` to `out` occurred within the loop bodies. A test case in the form of a Java file was generated based on the selected scheme. The test case first obtained the mobile IMEI and then sent this information via SMS after propagating through nested loops. Since \( L > M \), all cases had loop stable periods. Three groups of test cases were generated, each containing 20 cases with the same parameter settings. The test results are listed in Table III.

FlowDroid failed to track taint during loop stable periods, leading to the complete miss of all leakage paths and the misreporting of 95 paths that did not actually occur. FSAFlow, on the other hand, only misreported three paths and had no false negatives. Exceptions took the form of a loop body: `{ out = in; in = 0; }`. Although `out` was infected in the first iteration, it was cleaned again in the second iteration. Such loop processing is rarely meaningful in practical applications.

#### Evaluation on Real-World Apps
Finally, the tools were evaluated on 150 popular real-world apps from HUAWEI and Google’s app store. These apps were randomly selected from 15 different categories and were verified as benign by VirusTotal, an authoritative malware analysis service. For the paths detected by FlowDroid, FSAFlow, and TaintDroid, manual horizontal comparison and analysis were conducted based on the app functions, self-declarations, and user comments on the app stores. The test results are listed in Table IV.

Thirty-two apps were found to have potential leakage paths. The primary basis for judgment was that these release paths were not declared by the apps and were unrelated to their main functions. For example, the "Currency World" app in the Finance category collects user accounts and writes them to a local file without user consent. The "Fit Fitness" app in the Sports and Health category sends location data to advertising service providers.

All three tools exhibited analysis errors. Regarding false negatives, TaintDroid missed two leakage paths in the "LETV Video" and "Dragonfly FM" apps in the Media and Entertainment category because it did not track interface input information (e.g., passwords), while FSAFlow and FlowDroid reported correctly. However, FSAFlow and FlowDroid failed to report one leakage path where dynamic reflection information was stored in configuration files, such as in the "Car Headlines" app from the Cars category, which TaintDroid correctly identified. As for false positives, all three tools misreported one leakage path involving arrays in the "Baby Read" app from the Kids category due to their coarse tracking granularity for arrays. Additionally, FlowDroid misreported one leak path in the "Touch" app from the Communication category, which would not occur because the APK file contains debugging code that does not execute at runtime. FSAFlow could avoid this misreport through runtime verification.

#### Performance Evaluation
FSAFlow's performance was evaluated by comparing it with some representative optimization techniques in DTA. In the evaluations, implicit flow analysis was enabled in FSAFlow, as the DTA techniques used for comparison did not include this feature. The performance test results are listed in Table V.

| App Name | Category | FlowDroid (ms) | TaintDroid (ms) | FSAFlow (ms) |
|----------|----------|----------------|-----------------|--------------|
| LETV Video | Media & Entertainment | 3003 | 4827 | 2957 |
| Dragonfly FM | Media & Entertainment | 3945 | 5932 | 4313 |
| Car Headlines | Cars | 5443 | 7613 | 5911 |
| ... | ... | ... | ... | ... |

These results demonstrate the comparative performance of the tools across various real-world applications.