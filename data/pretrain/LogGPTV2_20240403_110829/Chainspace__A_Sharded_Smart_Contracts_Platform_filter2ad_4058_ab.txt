using the same active object inputs, at most one of them will
eventually be executed to produce outputs. Other transactions,
called conﬂicting, will be aborted.
Representation of Transactions. A transaction within
Chainspace is represented by sequence of traces of the
executions of the procedures that compose it, and their
interdependencies. These are computed and packaged by end-
user clients, and contain all the information a checker needs to
establish its correctness. A Transaction is a data structure such
that:
type Transaction : Trace list
type Trace : Record {
p : string,
c : id(o),
(cid:126)w, (cid:126)r, (cid:126)x : id(o) list,
lpar, lret : arbitrary data,
dep : Trace list}
3
Fig. 1. Design overview of Chainspace system.
these requirements, Chainspace implements S-BAC—a protocol
that composes existing Byzantine agreement and atomic commit
primitives in a novel way. Consensus on committing (or
aborting) transactions takes place in parallel across different
shards. For transparency and auditability, nodes in each shard
periodically publish a signed hash chain of checkpoints: shards
add a block (Merkle tree) of evidence including transactions
processed in the current epoch, and signed promises from other
nodes, to the hash chain.
Chainspace supports security properties against two distinct
types of adversaries, both polynomial time bounded:
• Honest Shards (HS). The ﬁrst adversary may create
arbitrary contracts, and input arbitrary transactions into
Chainspace, however they are bound to only control
up to f faulty nodes in any shard. As a result, and
to ensure the correctness and liveness properties of
Byzantine consensus, each shard must have a size of
at least 3f + 1 nodes.
Dishonest Shards (DS). The second adversary has,
additionally to HS, managed to gain control of one or
more shards, meaning that they control over f nodes
in those shards. Thus, its correctness or liveness may
not be guaranteed.
•
Faulty nodes in shards may behave arbitrarily, and collude
to violate any of the security, safely or liveness properties of
the system. They may emit incorrect or contradictory messages,
as well as not respond to any or some requests.
Given this threat model, Chainspace supports the following
security properties:
•
•
Transparency. Chainspace ensures that anyone in
possession of the identity of a valid object may
authenticate the full history of transactions and objects
that led to the creation of the object. No transactions
may be inserted, modiﬁed or deleted from that causal
chain or tree. Objects may be used to self-authenticate
its full history—this holds under both the HS and DS
threat models.
Integrity. Subject to the HS threat model, when one
or more transactions are submitted only a set of
userTransactionp:w:r:lpar:x:lret:dep:procedureinputsreferenceslocal parametersoutputslocal returnsdependenciesShardnodenodenodenodenode…objectsstatuso1o2…active…Shardnodenodenodenodenode…objectsstatuso1o2…active…α0, Valid (t), α(cid:48)
α(cid:48), Valid (T (cid:48)), α1 (Sequence)
α0, Valid (T = t :: T (cid:48)), α1
α0, Valid (dep), α(cid:48)
α(cid:48), c.v(p, (cid:126)w, (cid:126)r, lpar, (cid:126)x, lret, dep), (α(cid:48) \ (cid:126)w) ∪ (cid:126)x
∀o ∈ (cid:126)w ∪ (cid:126)x ∪ (cid:126)r.type(o) ∈ types(c)
α0, Valid (t = [c, p, (cid:126)w, (cid:126)r, (cid:126)x, lpar, lret, dep]), (α(cid:48) \ (cid:126)w) ∪ (cid:126)x
(cid:126)w, (cid:126)r ∈ α(cid:48)∧
((cid:126)x (cid:54)= ∅) → ( (cid:126)w (cid:54)= ∅)∧
(Check)
Fig. 2. The sequencing and checking validity rules for transactions.
To generate a set of traces composing the transaction, a user
executes on the client side all the smart contract procedures
required on the input objects, references and local parameters,
and generates the output objects and local returns for every
procedure—potentially also using secret parameters and re-
turns. Thus the actual computation behind the transactions is
performed by the user, and the traces forming the transaction
already contain the output objects and return parameters, and
sufﬁcient information to check their validity through smart
contract checkers. This design pattern is related to traditional
optimistic concurrency control.
Only valid transactions are eventually committed into
the Chainspace system, as speciﬁed by two validity rules
sequencing and checking presented in Figure 2. Transactions
are considered valid within a context of a set of active objects
maintained by Chainspace, denoted with α. Valid transactions
lead to a new context of active objects (eg. α(cid:48)). We denote
this through the triplet (α, Valid(T ), α(cid:48)), which is true if the
execution of transaction T is valid within the context of active
objects α and generates a new context of active objects α(cid:48). The
two rules are as follows:
•
•
(Sequence rule). A ‘Trace list’ (within a ‘Transaction’
or list of dependencies) is valid if each of the traces are
valid in sequence (see Figure 2 rule for sequencing).
Further, the active objects set is updated in sequence
before considering the validity of each trace.
(Check rule). A particular ‘Trace’ is valid, if the
sequence of its dependencies are valid, and then in
the resulting active object context, the checker for it
returns true. A further three side conditions must hold:
(1) inputs and references must be active; (2) if the
trace produces any output objects it must also contain
some input objects; and (3) all objects passed to the
checker must be of types deﬁned by the smart contract
of this checker (see Figure 2 rule for checking).
The ordering of active object sets in the validation rules
result in a depth-ﬁrst validation of all traces, which represents
a depth-ﬁrst execution and data ﬂow dependency between them.
It is also noteworthy that only the active set of objects needs
to be tracked to determine the validity of new transactions,
which is in the order of magnitude of active objects in the
system. The much longer list of inactive objects, which grows
to encompass the full history of every object in the system is not
needed—which we leverage to enable better when validating
transactions. It also results in a smaller amount of working
memory to perform incremental audits.
A valid transaction is executed in a serialized manner, and
committed or aborted atomically. If it is committed, the new set
of active objects replaces the previous set; if not the set of active
objects does not change. Determining whether a transaction
may commit involves ensuring all the input objects are active,
and all are consumed as a result of the transaction executing,
as well as all new objects becoming available for processing
(references however remain active). Chainspace ensures this
through the distributed atomic commit protocol, S-BAC.
Smart contract composition. A contract procedure may call a
transaction of another smart contract, with speciﬁc parameters
and rely upon returned values. This is achieved through passing
the dep variable to a smart contract checker, a validated list of
traces of all the sub-calls performed. The checker can ensure
that the parameters and return values are as expected, and those
dependencies are checked for validity by Chainspace.
Composition of smart contracts is a key feature of a
transparent and auditable computation platform. It allows the
creation of a library of smart contracts that act as utilities for
other higher-level contracts: for example, a simple contract
can implement a cryptographic currency, and other contracts—
for e-commerce for example—can use this currency as part
of their logic. Furthermore, we compose smart contracts, in
order to build some of the functionality of Chainspace itself
as a set of ‘system’ smart contracts, including management of
shards mapping to nodes, key management of shard nodes, and
governance.
Chainspace also supports the atomic batch execution of
multiple procedures for efﬁciency, that are not dependent on
each other.
Reads. Besides executing transactions, Chainspace clients, need
to read the state of objects, if anything, to correctly form
transactions. Reads, by themselves, cannot lead to inconsistent
state being accepted into the system, even if they are used as
inputs or references to transactions. This is a result of the system
checking the validity rules before accepting a transaction, which
will reject any stale state.
Thus, any mechanism may be used to expose the state of
objects to clients, including traditional relational databases, or
‘no-SQL’ alternatives. Additionally, any indexing mechanism
may be used to allow clients to retrieve objects with speciﬁc
characteristics faster. Decentralized, read-only stores have been
extensively studied, so we do not address the question of reads
further in this work.
Privacy by design. Deﬁning smart contract logic as checkers
allows Chainspace to support privacy friendly-contracts by
design. In such contracts some information in objects is not
in the clear, but instead either encrypted using a public key,
4
or committed using a secure commitment scheme as [P+91].
The transaction only contains a valid proof that the logic or
invariants of the smart contract procedure were applied correctly
or hold respectively, and can take the form of a zero-knowledge
proof, or a Succinct Argument of Knowledge (SNARK). Then,
generalizing the approach of [MGGR13], the checker runs the
veriﬁer part of the proof or SNARK that validates the invariants
of the transactions, without revealing the secrets within the
objects to the veriﬁers.
IV. THE CHAINSPACE SYSTEM DESIGN
In Chainspace a network of infrastructure nodes manages
valid objects, and ensure key invariants: namely that only valid
transactions are committed. We discuss the data structures nodes
use collectively and locally to ensure high integrity; and the
distributed protocols they employ to reach consensus on the
accepted transactions.
A. High-Integrity Data Structures
Chainspace employs a number of high-integrity data struc-
tures. They enable those in possession of a valid object or
its identiﬁer to verify all operations that lead to its creation;
they are also used to support non-equivocation—preventing
Chainspace nodes from providing a split view of the state they
hold without detection.
Hash-DAG structure. Objects and transactions naturally form
a directed acyclic graph (DAG): given an initial state of
active objects a number of transactions render their inputs
invalid, and create a new set of outputs as active objects.
These may be represented as a directed graph between objects,
transactions and new objects and so on. Each object may only
be created by a single transaction trace, thus cycles between
future transactions and previous objects never occur. We prove
that output object identiﬁers resulting from valid transactions
are fresh (see Security Theorem 1). Hence, the graph of objects
inputs, transactions and objects outputs form a DAG, that may
be indexed by their identiﬁers.
We leverage this DAG structure, and augment it to provide a
high-integrity data structure. Our principal aim is to ensure that
given an object, and its identiﬁer, it is possible to unambiguously
and unequivocally check all transactions and previous (now
inactive) objects and references that contribute to the existence
of the object. To achieve this we deﬁne as an identiﬁer for all
objects and transactions a cryptographic hash that directly or
indirectly depends on the identiﬁers of all state that contributed
to the creation of the object.
Speciﬁcally, we deﬁne a function id(Trace) as the identiﬁer
of a trace contained in transaction T . The identiﬁer of a trace
is a cryptographic hash function over the name of contract and
the procedure producing the trace; as well as serialization of
the input object identiﬁers, the reference object identiﬁers, and
all local state of the transaction (but not the secret state of
the procedures); the identiﬁers of the trace’s dependencies are
also included. Thus all information contributing to deﬁning
the Trace is included in the identiﬁer, except the output object
identiﬁers.
We also deﬁne the id(o) as the identiﬁer of an object o. We
derive this identiﬁer through the application of a cryptographic
hash function, to the identiﬁer of the trace that created the
object o, as well as a unique name assigned by the procedures
creating the trace, to this output object. (Unique in the context
of the outputs of this procedure call, not globally, such as a
local counter.)
An object identiﬁer id(o) is a high-integrity handle that may
be used to authenticate the full history that led to the existence
of the object o. Due to the collision resistance properties of
secure cryptographic hash functions an adversary is not able
to forge a past set of objects or transactions that leads to an
object with the same identiﬁer. Thus, given id(o) anyone can
verify the authenticity of a trace that led to the existence of o.
A very important property of object identiﬁers is that
future transactions cannot re-create an object that has already
become inactive. Thus checking object validity only requires
maintaining a list of active objects, and not a list of past inactive
objects:
Security Theorem 1. No sequence of valid transactions, by
a polynomial time constrained adversary, may re-create an
object with the same identiﬁer with an object that has already
been active in the system.
Proof: We argue this property by induction on the serialized
application of valid transactions, and for each transaction by structural
induction on the two validity rules. Assuming a history of n − 1
transactions for which this property holds we consider transaction n.
Within transaction n we sequence all traces and their dependencies,
and follow the data ﬂow of the creation of new objects by the ‘check’
rule. For two objects to have the same id(o) there need to be two
invocations of the check rule with the same contract, procedure, inputs
and references. However, this leads to a contradiction: once the ﬁrst
trace is checked and considered valid the active input objects are
removed from the active set, and the second invocation becomes
invalid. Thus, as long as object creation procedures have at least one
input (which is ensured by the side condition) the theorem holds,
unless an adversary can produce a hash collision. The inductive base
case involves assuming that no initial objects start with the same
identiﬁer – which we can ensure axiomatically.
We call this directed acyclic graph with identiﬁers derived
using cryptographic functions a Hash-DAG, and we make
extensive use of the identiﬁers of objects and their properties
in Chainspace.
Node Hash-Chains. Each node in Chainspace, that is entrusted
with preserving integrity, associates with its shard a hash chain.
Periodically, peers within a shard consistently agree to seal a
checkpoint, as a block of transactions into their hash chains.
They each form a Merkle tree containing all transactions that
have been accepted or rejected in sequence by the shard since
the last checkpoint was sealed. Then, they extend their hash
chain by hashing the root of this Merkle tree and a block
sequence number, with the head hash of the chain so far, to
create the new head of the hash chain. Each peer signs the new
head of their chain, and shares it with all other peers in the shard,
and anyone who requests it. For strong auditability additional
information, besides committed or aborted transactions, has to
be included in the Merkle tree: node should log any promise
to either commit or abort a transaction from any other peer in
any shard (the prepared(T,*) statements explained in the next
sections).
All honest nodes within a shard independently create the
5
same chain for a checkpoint, and a signature on it—as long
as the consensus protocols within the shards are correct. We
say that a checkpoint represents the decision of a shard, for a
speciﬁc sequence number, if at least f + 1 signatures of shard
nodes sign it. On the basis of these hash chains we deﬁne a
partial audit and a full audit of the Chainspace system.
In a partial audit a client is provided evidence that a
transaction has been either committed or aborted by a shard.
A client performing the partial audit may request from any
node of the shard evidence for a transaction T. The shard peer
will present a block representing the decision of the shard,
with f + 1 signatures, and a proof of inclusion of a commit or
abort for the transaction, or a signed statement the transaction
is unknown. A partial audit provides evidence to a client of