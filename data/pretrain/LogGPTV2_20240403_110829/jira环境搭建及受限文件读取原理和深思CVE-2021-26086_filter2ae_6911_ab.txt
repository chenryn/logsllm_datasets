                    normalized = "/" + normalized;
                }
                boolean addedTrailingSlash = false;
                if (normalized.endsWith("/.") || normalized.endsWith("/..")) {
                    normalized = normalized + "/";
                    addedTrailingSlash = true;
                }
                while(true) {
                    int index = normalized.indexOf("//");
                    if (index  1 && addedTrailingSlash) {
                                            normalized = normalized.substring(0, normalized.length() - 1);
                                        }
                                        return normalized;
                                    }
                                    if (index == 0) {
                                        return null;
                                    }
                                    int index2 = normalized.lastIndexOf(47, index - 1);
                                    normalized = normalized.substring(0, index2) + normalized.substring(index + 3);
                                }
                            }
                            normalized = normalized.substring(0, index) + normalized.substring(index + 2);
                        }
                    }
                    normalized = normalized.substring(0, index) + normalized.substring(index + 1); //把双斜杠替换为单斜杠
                }
            }
        }
    }
最后经过`normlize`的返回是`/WEB-INF/web.xml`
#### 3、 UrlRewriteFilter
这块主要分为两大部分，一是`org.tuckey.web.filters.urlrewrite.RuleChain#process`，二是`org.tuckey.web.filters.urlrewrite.RuleChain#handleRewrite`。逐个攻破
先是`process`方法：
关键在`org.tuckey.web.filters.urlrewrite.ClassRule#matches(java.lang.String,
javax.servlet.http.HttpServletRequest,
javax.servlet.http.HttpServletResponse)`方法中箭头所指向的反射方法，matchstr默认为matches，然后得到matchesMethod的方法为`public
org.tuckey.web.filters.urlrewrite.extend.RewriteMatch
com.atlassian.jira.plugin.webresource.CachingResourceDownloadRewriteRule.matches(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)`，再将所需的参数传入。
先来来看看匹配的模式
    ^/s/(.*)/_/((?i)(?!WEB-INF)(?!META-INF).*)
前面的`(?i)`表示是一种模式修饰符，i即匹配时不区分大小写。以前只见过放在最后面的。
后面的`(?!)`表示在那串字符串后面的不能是以`web-inf`和`meta-inf`结尾的。
至此，调用的堆栈是：
    matches:53, CachingResourceDownloadRewriteRule (com.atlassian.jira.plugin.webresource)
    invoke:-1, GeneratedMethodAccessor308 (sun.reflect)
    invoke:43, DelegatingMethodAccessorImpl (sun.reflect)
    invoke:498, Method (java.lang.reflect)
    matches:119, ClassRule (org.tuckey.web.filters.urlrewrite)
    matches:101, ClassRule (org.tuckey.web.filters.urlrewrite)
    doRuleProcessing:83, RuleChain (org.tuckey.web.filters.urlrewrite)
    process:137, RuleChain (org.tuckey.web.filters.urlrewrite) //上班部分process的
    doRules:144, RuleChain (org.tuckey.web.filters.urlrewrite)
    processRequest:92, UrlRewriter (org.tuckey.web.filters.urlrewrite)
    doFilter:394, UrlRewriteFilter (org.tuckey.web.filters.urlrewrite)
    internalDoFilter:193, ApplicationFilterChain (org.apache.catalina.core)
    doFilter:166, ApplicationFilterChain (org.apache.catalina.core) [10]
    doFilter:30, CorrelationIdPopulatorFilter (com.atlassian.jira.servermetrics)
    doFilter:32, AbstractHttpFilter (com.atlassian.core.filters)
    internalDoFilter:193, ApplicationFilterChain (org.apache.catalina.core)
    ...(省略)
    doFilterInternal:115, GzipFilter (com.atlassian.gzipfilter)
    doFilter:92, GzipFilter (com.atlassian.gzipfilter)
    internalDoFilter:193, ApplicationFilterChain (org.apache.catalina.core)
    doFilter:166, ApplicationFilterChain (org.apache.catalina.core) [1]
    invoke:199, StandardWrapperValve (org.apache.catalina.core)
    invoke:96, StandardContextValve (org.apache.catalina.core)
    invoke:493, AuthenticatorBase (org.apache.catalina.authenticator)
    invoke:206, StuckThreadDetectionValve (org.apache.catalina.valves)
    invoke:137, StandardHostValve (org.apache.catalina.core)
    invoke:81, ErrorReportValve (org.apache.catalina.valves)
    invoke:87, StandardEngineValve (org.apache.catalina.core)
    invoke:660, AbstractAccessLogValve (org.apache.catalina.valves)
    service:343, CoyoteAdapter (org.apache.catalina.connector)
    service:798, Http11Processor (org.apache.coyote.http11)
    process:66, AbstractProcessorLight (org.apache.coyote)
    process:808, AbstractProtocol$ConnectionHandler (org.apache.coyote)
    doRun:1498, NioEndpoint$SocketProcessor (org.apache.tomcat.util.net)
    run:49, SocketProcessorBase (org.apache.tomcat.util.net)
    runWorker:1149, ThreadPoolExecutor (java.util.concurrent)
    run:624, ThreadPoolExecutor$Worker (java.util.concurrent)
    run:61, TaskThread$WrappingRunnable (org.apache.tomcat.util.threads)
    run:748, Thread (java.lang)
后面有的dontProcessAnyMoreRules把ruleIdxToRun赋值为rule.size()，才后面就会跳出判断，不再进行匹配。
至此，`process`方法结束，接下来是`handleRewrite`，这部分主要是请求转发
简单了解一下请求转发的作用域：
    访问受保护目录下的资源
    requestDispatcher:是服务器的资源封装器，可以封装服务器内部所有资源。
    （包括WEB-INF下资源）
    WEB-INF是受保护目录，不能够通过浏览器直接访问
    可以通过请求转发去访问
可以看到10-11之间的调用堆栈，这里具体是对请求进行了一次转发。
于是接下来对请求直接进行了dofilter的操作，从而没有经过`org.apache.catalina.core.StandardContextValve#invoke`，个人认为请求转发作用域延伸到受保护目录下的资源也是因为如此。
这也导致了第二次访问是由defaultServlet对资源进行的请求，也可以看到这里面filterconfig里面仍然是存在JiraLoginFilter的，因为在web.xml中就已经配置全路径了
#### 4、 JiraLoginFilter放行
看dofilter方法中第一行，这里是函数式接口，能够获取到SessionInvalidator并且存在的话，将这个值符给jiraUserSessionInvalidator这个参数，并执行handleSessionInvalidation方法。这里获取到存在的变量是`jiraUserSessionTracker`，所以后面执行的方法是`com.atlassian.jira.web.session.currentusers.JiraUserSessionInvalidator#handleSessionInvalidation`
此处session是为空的，因为我们还没有登录，执行到finally块，判断完其实这里什么都没做。
接下来走到选择filter过滤器再进行doFilter的方法，因为这俩参数都没传，所以会传seraphHttpAuthFilter参数回去，执行他的dofilter方法。
走到HttpAuthFilter父类的方法
看到status为空，所以两个return的块我们也进不去，所以走到最后一行代码继续放行。不做未认证的跳转也返回值，所以最终会交到DefaultServlet的手上。
#### 局限
传入的解析完之后的参数是/WEB-INF/web.xml，局限也就是在于下面部分，会再次去资源进行一个normalize的处理，导致不能跨越web路径进行一个资源的读取，只能在web的路径之下。
file会将web目录的路径和我们请求的绝对路径进行拼接
之后再进行一次normlize的方法，在后面的getResource方法中和web路径进行拼接的时候，也就达不到跨越web路径的目的。
#### 修复
对正则进行了删改
    Pattern PATHS_DENIED = Pattern.compile("[^a-zA-Z0-9]((?i)(WEB-INF)|(META-INF))[^a-zA-Z0-9]")
也就是 `WEB-INF` 或者 `META-INF` 的前后有特殊字符，则返回 null;
## 三、总结
1、在渗透测试的过程中，有些waf会拦截`;/`等关键词，在中间填充字符串可绕过某些特征。
2、做请求转发的操作时，一定要再对url进行过滤的操作，防止读取到敏感文件（尤其是做动态链接）
文笔很烂，如有错误，请多多指教。