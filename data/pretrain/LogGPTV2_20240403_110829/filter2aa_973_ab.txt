其实就不必要加 ; 了，并且解析完通过 params.get("filename") 获取到参数后还会调⽤
到 org.apache.tomcat.util.http.parser.HttpParser#unquote 那也可以基于此再次
变形
为了直观这⾥就直接明⽂了，是不是也很神奇
        }
        // Trim trailing white spaces
        while ((i2 > i1) && (Character.isWhitespace(chars[i2 - 1]))) {
            i2--;
        }
        // Strip away quotation marks if necessary
        if (quoted
            && ((i2 - i1) >= 2)
            && (chars[i1] == '"')
            && (chars[i2 - 1] == '"')) {
            i1++;
            i2--;
        }
        String result = null;
        if (i2 > i1) {
            result = new String(chars, i1, i2 - i1);
        }
        return result;
    }
扩⼤利⽤⾯
现在只是war包的场景，多多少少影响性被降低，但我们这串代码其实抽象出来就⼀个关键
通过查询官⽅⽂档，可以发现从Servlet3.1开始，tomcat新增了对此的⽀持，也就意味着简单
通过 javax.servlet.http.HttpServletRequest#getParts 即可，简化了我们⽂件上传
的代码负担(如果我是开发⼈员，我肯定⾸选也会使⽤，谁不想当懒狗呢)
更新Spring 2022-06-20
早上起床想着昨晚和陈师的碰撞，起床后又看了下陈师的星球，看到这个不妨再试试Spring是
否也按照了RFC的实现呢（毕竟Spring内置了Tomcat，可能会有类似的呢）
Part warPart = request.getPart("deployWar");
String filename = warPart.getSubmittedFileName();
getSubmittedFileName
String getSubmittedFileName()
Gets the file name specified by the client
Returns:
the submitted file name
Since:
Servlet 3.1
Spring为我们提供了处理⽂件上传MultipartFile的接⼜
public interface MultipartFile extends InputStreamSource {
    String getName(); //获取参数名
    @Nullable
    String getOriginalFilename();//原始的⽂件名
    @Nullable
    String getContentType();//内容类型
    boolean isEmpty();
    long getSize(); //⼤⼩
    byte[] getBytes() throws IOException;// 获取字节数组
    InputStream getInputStream() throws IOException;//以流⽅式进⾏读取
⽽spring处理⽂件上传逻辑的具体关键逻辑
在 org.springframework.web.multipart.support.StandardMultipartHttpServlet
Request#parseRequest ，抄个⽂件上传demo来进⾏测试分析
Spring4
这⾥我测试了 springboot1.5.20.RELEASE 内置 Spring4.3.23 ，具体⼩版本之间是否有
差异这⾥就不再探究
其中关于
org.springframework.web.multipart.support.StandardMultipartHttpServletRe
quest#parseRequest 的调⽤也有些不同
    default Resource getResource() {
        return new MultipartFileResource(this);
    }
    // 将上传的⽂件写⼊⽂件系统
    void transferTo(File var1) throws IOException, IllegalStateException;
  // 写⼊指定path
    default void transferTo(Path dest) throws IOException, 
IllegalStateException {
        FileCopyUtils.copy(this.getInputStream(), 
Files.newOutputStream(dest));
    }
}
    private void parseRequest(HttpServletRequest request) {
        try {
            Collection parts = request.getParts();
            this.multipartParameterNames = new 
LinkedHashSet(parts.size());
            MultiValueMap files = new 
LinkedMultiValueMap(parts.size());
            Iterator var4 = parts.iterator();
            while(var4.hasNext()) {
简单看了下和tomcat之前的分析很像，这⾥Spring4当中同时也是⽀持 filename* 格式的
看看具体逻辑
                Part part = (Part)var4.next();
                String disposition = part.getHeader("content-
disposition");
                String filename = this.extractFilename(disposition);
                if (filename == null) {
                    filename = 
this.extractFilenameWithCharset(disposition);
                }
                if (filename != null) {
                    files.add(part.getName(), new 
StandardMultipartHttpServletRequest.StandardMultipartFile(part, 
filename));
                } else {
                    this.multipartParameterNames.add(part.getName());
                }
            }
            this.setMultipartFiles(files);
        } catch (Throwable var8) {
            throw new MultipartException("Could not parse multipart 
servlet request", var8);
        }
    }
简单测试⼀波，与⼼中结果⼀致
private String extractFilename(String contentDisposition, String key) {
        if (contentDisposition == null) {
            return null;
        } else {
            int startIndex = contentDisposition.indexOf(key);
            if (startIndex == -1) {
                return null;
            } else {
                //截取filename=后⾯的内容
                String filename = contentDisposition.substring(startIndex 
+ key.length());
                int endIndex;
                //如果后⾯开头是“则截取”“之间的内容
                if (filename.startsWith("\"")) {
                    endIndex = filename.indexOf("\"", 1);
                    if (endIndex != -1) {
                        return filename.substring(1, endIndex);
                    }
                } else {
                  //可以看到如果没有“”包裹其实也可以，这和当时陈师分享的其中⼀个
trick是符合的
                    endIndex = filename.indexOf(";");
                    if (endIndex != -1) {
                        return filename.substring(0, endIndex);
                    }
                }
                return filename;
            }
        }
    }
同时由于indexof默认取第⼀位，因此我们还可以加⼀些⼲扰字符尝试突破waf逻辑
如果filename*开头但是spring4当中没有关于url解码的部分
没有这部分会出现什么呢？我们只能⾃⼰发包前解码，这样的话如果出现00字节就会报错，
报错后
看起来是spring框架解析header的原因，但是这⾥报错信息也很有趣将项⽬地址的绝对路径抛
出了，感觉不失为信息收集的⼀种⽅式
Spring5
也是随便来个新的springboot2.6.4的，来看看spring5的，⼩版本间差异不测了，经过测试发现
spring5和spring4之间也是有版本差异处理也有些不同，同样是在 parseRequest
private void parseRequest(HttpServletRequest request) {
        try {
            Collection parts = request.getParts();
            this.multipartParameterNames = new 
LinkedHashSet(parts.size());
            MultiValueMap files = new 
LinkedMultiValueMap(parts.size());
            Iterator var4 = parts.iterator();
            while(var4.hasNext()) {
                Part part = (Part)var4.next();
                String headerValue = part.getHeader("Content-
Disposition");
                ContentDisposition disposition = 
ContentDisposition.parse(headerValue);
                String filename = disposition.getFilename();
                if (filename != null) {
                    if (filename.startsWith("=?") && filename.endsWith("?
=")) {
                        filename = 
StandardMultipartHttpServletRequest.MimeDelegate.decode(filename);
                    }
                    files.add(part.getName(), new 
StandardMultipartHttpServletRequest.StandardMultipartFile(part, 
filename));
                } else {
                    this.multipartParameterNames.add(part.getName());
                }
            }
            this.setMultipartFiles(files);
        } catch (Throwable var9) {
很明显可以看到这⼀⾏ filename.startsWith("=?") && filename.endsWith("?=") ，
可以看出Spring对⽂件名也是⽀持QP编码
在上⾯能看到还调⽤了⼀个解析的⽅法
org.springframework.http.ContentDisposition#parse
，多半就是这⾥了,那么继续深⼊下
可以看到⼀⽅⾯是QP编码，另⼀⽅⾯也是⽀持 filename* ,同样获取值是截取 " 之间的或者
没找到就直接截取 = 后⾯的部分
如果是 filename* 后⾯的处理逻辑就是else分之，可以看出和我们上⾯分析spring4还是有点
区别就是这⾥只⽀持 UTF-8/ISO-8859-1/US_ASCII ，编码受限制
            this.handleParseFailure(var9);
        }
    }
但其实仔细想这个结果是符合RFC⽂档要求的
接着我们继续后⾯会继续执⾏ decodeFilename
int idx1 = value.indexOf(39);
int idx2 = value.indexOf(39, idx1 + 1);
if (idx1 != -1 && idx2 != -1) {
  charset = Charset.forName(value.substring(0, idx1).trim());
  Assert.isTrue(StandardCharsets.UTF_8.equals(charset) || 
StandardCharsets.ISO_8859_1.equals(charset), "Charset should be UTF-8 or 
ISO-8859-1");
  filename = decodeFilename(value.substring(idx2 + 1), charset);
} else {
  filename = decodeFilename(value, StandardCharsets.US_ASCII);
}
代码逻辑很清晰字符串的解码,如果字符串是否在 RFC 5987 ⽂档规定的Header字符就直接调
⽤baos.write写⼊
如果不在要求这⼀位必须是 % 然后16进制解码后两位，其实就是url解码，简单测试即可
参考⽂章
https://www.ch1ng.com/blog/264.html
https://datatracker.ietf.org/doc/html/rfc6266#section-4.3
https://datatracker.ietf.org/doc/html/rfc2231
https://datatracker.ietf.org/doc/html/rfc5987#section-3.2.1
https://y4tacker.github.io/2022/02/25/year/2022/2/Java%E6%96%87%E4%BB%B6%E4%B8%8A%
E4%BC%A0%E5%A4%A7%E6%9D%80%E5%99%A8-%E7%BB%95waf(%E9%92%88%E5%AF
%B9commons-fileupload%E7%BB%84%E4%BB%B6)/
https://docs.oracle.com/javaee/7/api/javax/servlet/http/Part.html#getSubmittedFileName--
 attr-char     = ALPHA / DIGIT
                   / "!" / "#" / "$" / "&" / "+" / "-" / "."
                   / "^" / "_" / "`" / "|" / "~"
                   ; token except ( "*" / "'" / "%" )
http://t.zoukankan.com/summerday152-p-13969452.html#%E4%BA%8C%E3%80%81%E5%A4%8
4%E7%90%86%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6multipartfile%E6%8E%A
5%E5%8F%A3