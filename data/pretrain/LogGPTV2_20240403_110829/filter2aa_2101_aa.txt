# Practical Tips for Playing Hide and Seek with Linux EDRs

## Presentation Overview
**Event:** DEFCON 27  
**Speaker:** @Op_Nomad (Dimitry Snezhkov)  
**Affiliation:** Zombie Ant Farm

---

### Speaker Bio
- **Dimitry Snezhkov**
  - **Role:** Technologist
  - **Team:** Member of the X-Force Red Team
  - **Expertise:**
    - Hacking
    - Tools and Research
    - Offensive Security
  - **Contact:**
    - Twitter: [@Op_Nomad](https://twitter.com/Op_Nomad)
    - GitHub: [github.com/dsnezhkov](https://github.com/dsnezhkov)

---

## Linux Offense: The Context

### Why Linux Matters
- **Cloud Workloads:** 90% of cloud workloads run on Linux.
- **Attack Vectors:** Attacks often bypass office networks and directly target backend systems.
- **ROI:** Attackers focus on high-value targets, such as data and computing resources.
- **Adversarial Efforts:** Targeted and focused efforts to exploit Linux systems.
- **Defense Evolution:** Defensive measures are continually adapting to new attack techniques.

### Emergence of EDR Solutions
- **Endpoint Detection and Response (EDR):** These solutions are now available for Linux environments.
- **Operator Response:** Operators must adapt to these new defensive measures.

---

## Linux EDRs: A Case of Mistaken Identity

### Types of EDR Solutions
- **Pure Play EDR Products**
- **Heuristic Engines in Antivirus Software**
- **Security Automation Toolkits**
- **Deployment and Patch Management Systems**
- **App Whitelisting Solutions**
- **Data Loss Prevention (DLP) Features**
- **Homegrown Monitoring Frameworks**
- **Tool-Assisted Threat Hunting**

### Key Challenges
- **Identity Confusion:** Understanding the true nature and capabilities of different EDR solutions.
- **Operational Complexity:** Navigating the diverse landscape of security tools.

---

## Operator's Dilemma

### Addressing EDR Challenges
- **Initial Foothold Mechanism Viability:** Ensuring that initial access is not immediately detected.
- **Logging and Analysis:** Avoiding detection through logging and delayed analysis.
- **Behavioral Patterns:** Evading heuristics by mimicking normal behavior.
- **Persistence:** Maintaining long-term access without detection.
- **Automation Evasion:** Bypassing automated security responses.
- **Threat Hunting Deflection:** Evading manual and tool-assisted threat hunting.

### Strategic Considerations
- **Quiet Boxes:** Relying on behavioral anomalies for detection.
- **Locked Down Boxes:** Enforcing strict policy-based controls.
- **Peripheral Sensors and Honeypots:** Utilizing additional layers of defense.

---

## Strategic and Tactical Approaches

### Operational Evasion
- **Shutting Down EDRs:** Operationally disabling EDRs.
- **Exploiting EDRs:** Directly exploiting vulnerabilities in EDRs.
- **Blinding EDR Reporting:** Preventing EDRs from reporting and responding effectively.
- **Confusing EDRs:** Misleading EDRs to avoid detection.

### Targeted Behavior Evasion
- **Execution Confusion:** Obfuscating execution patterns.
- **Novel Exploitation Techniques:** Bypassing EDR detection with innovative methods.
- **Deflecting Artifact Discovery:** Evading discovery by manual or tool-assisted threat hunting.

### Strategic Goals and Objectives
- **Choice 1: Drop Ready Offensive Tools**
  - **Risk:** High likelihood of immediate detection.
- **Choice 2: Develop Offensive Tools on Target**
  - **Risk:** Increased footprint and noise.
- **Choice 3: Living Off the Land**
  - **Risk:** May not be feasible in highly supervised environments.

### Building Malware in the Face of EDRs
- **Evade Detection:** Avoiding detection during runtime.
- **Unpredictable Payload Delivery:** Serving payloads in unpredictable ways to counteract the "story" of execution.

---

## Assembled Attack: Blended Approach

### Idea A: Instrumented Malware Cradles
- **Bring in Clean Instrumented Malware Cradles:** Use these to build iterative capabilities.

### Idea B: Decoy Binaries
- **Turn Good Binaries into Decoys:** Use them to mislead EDRs.

---

## Tactical Goals and Objectives

### Stage I: Build Out Offensive Primitives
- **Indiscriminate Preload and Release:** Dynamically preload and release legitimate binaries.
- **Preload Library Chaining:** Split, scatter, and assemble payload features.
- **Delayed Payload Triggers:** Implement delayed triggers and features at runtime.
- **Rapid Payload Delivery Prototypes:** Use instrumented cradles for rapid delivery.

### Stage II: Weaponize and Operationalize
- **Payload Brokers:** Implement "Preload-as-a-service" for inter-process and remote payload loading.
- **Process Mimicry and Decoys:** Create decoy processes and mimic legitimate ones.
- **Library Preloading:** Use novel methods to preload libraries in memory.

---

## Offensive Primitives and Dynamic Link Loading

### Basics of Dynamic Link Loading
- **ELF Executables:** Understand how dynamic linking works.
- **Dependency Resolution:** Ensure dependencies are correctly resolved.

### Dynamic ELF Hooking
- **API Detour:** Redirect known function entry points to execute foreign logic.
- **Challenges:**
  - **Target API Details:** Need to know the specifics of the target API.
  - **Avoid Detection:** Execute without being detected by security tools.
  - **Interoperability:** Ensure the target binary operates smoothly without crashing.
  - **Inspection Tool Availability:** Assume inspection tools are available on the target.

### New Ideas and Viability Check
- **Agnostic API Implementation:** Be less dependent on specific APIs.
- **Compelling Execution:** Force the target to execute malicious code.
- **Decoy Usage:** Use the target as a decoy.
- **Bootstrap Ownership:** If you can start a process, you own its execution resources.

---

## Desired Outcomes and Expanding Evasion Capabilities

### Desired Outcomes
- **ELF ABI Level:** Use .INIT, .FINI, and .PREINIT sections.
- **C Runtime Level:** Modify __libc_start_main.
- **Linker Level:** Use weak references and chaining.
- **Signals and Exceptions:** Use out-of-band signals, fault branching, and exception handlers.

### Expanding Evasion
- **Utilization of Existing Binaries:** Use system binaries as decoys.
- **Dynamic Scripting:** Implement dynamic scripting capabilities.
- **LD_PRELOAD Evasion:** Evade command-line detection with LD_PRELOAD.
- **Self-Preserving Malware:** Develop malware with self-preservation instincts.

### Example: Using Trusted Binaries
- **ld.so and busybox:** Combine trusted binaries to escape process pattern matching.
- **Bouncing Off Trusted Binaries:** Use trusted binaries to break the path of analysis.

---

This structured and detailed approach provides a clear and professional overview of the challenges and strategies involved in evading Linux EDRs.