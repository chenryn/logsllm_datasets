title:Efficient, Constant-Round and Actively Secure MPC: Beyond the Three-Party
Case
author:Nishanth Chandran and
Juan A. Garay and
Payman Mohassel and
Satyanarayana Vusirikala
Eﬃcient, Constant-Round and Actively Secure MPC:
Beyond the Three-Party Case
Nishanth Chandran∗ Juan Garay†‡ Payman Mohassel§‡
Satyanarayana Vusirikala¶
Abstract
While the feasibility of constant-round and actively secure MPC has been known for over
two decades, the last few years have witnessed a ﬂurry of designs and implementations that
make its deployment a palpable reality. To our knowledge, however, existing concretely eﬃcient
MPC constructions are only for up to three parties.
In this paper we design and implement a new actively secure 5PC protocol tolerating two
corruptions that requires 8 rounds of interaction, only uses fast symmetric-key operations, and
incurs 60% less communication than the passively secure state-of-the-art solution from the work
of Ben-Efraim, Lindell, and Omri [CCS 2016]. For example, securely evaluating the AES circuit
when the parties are in diﬀerent regions of the U.S. and Europe only takes 1.8s which is 2.6×
faster than the passively secure 5PC in the same environment.
Instrumental for our eﬃciency gains (less interaction, only symmetric key primitives) is a
new 4-party primitive we call Attested OT, which in addition to Sender and Receiver involves
two additional “assistant parties” who will attest to the respective inputs of both parties, and
which might be of broader applicability in practically relevant MPC scenarios. Finally, we also
show how to generalize our construction to n parties with similar eﬃciency properties where the
n, and propose a combinatorial problem which, if solved optimally,
corruption threshold is t ≈ √
can yield even better corruption thresholds for the same cost.
1
Introduction
Secure multiparty computation (MPC) allows a group of parties with private inputs to compute a
joint function of their inputs correctly, despite the potential misbehavior of some of them, and with-
out revealing any information beyond what can be inferred from the outcome of the computation.
Since the seminal results from the 1980s [Yao82, GMW87, BGW88, CCD88], which demonstrated
the feasibility of general-purpose MPC for computing arbitrary functions, a large body of work
has focused on improving both asymptotic and concrete eﬃciency of these feasibility results, in
particular in the last few years. For constant-round MPC, which is the focus of this work, the
main ingredient of most existing constructions is Yao’s garbled circuit protocol [Yao82] and its
multi-party variant [BMR90]. In the two-party case, Yao’s original passively secure construction
can be eﬃciently transformed into an actively secure one by applying the cut-and-choose paradigm
(e.g., [MF06, LP07]) which has been extensively studied and optimized over the last decade or so
(cf. [Woo07, LPS08, NO09, PSSW09, asS11, LP12, KasS12, HKE13, Lin13, MR13, asS13, LR14,
∗Microsoft Research, India; Email: PI:EMAIL
†Texas A&M University; Email: PI:EMAIL
‡Work done in part while at Yahoo! Research.
§Visa Research; Email: PI:EMAIL
¶University of Texas, Austin; Email: satya.vus@gmail.com. Work done while at Microsoft Research India.
1
Protocol
[IKP10]
[LPSY15]
[BLO16b]
[KRW17]
[HSSV17]
Ours
Comparison of diﬀerent MPC protocols
No. corr.
t < n
3
t < n
t < n
Comm.
O(κn3|C|)
O(κ2n2|C|) PRG+OT
O(κn2|C|)
PRG+OT
O( κn2s|C|
log |C| )
O( κn2s|C|
log |C| )
O(κn2t|C|)
t < n
√
t < n
n
t <
Assumption Adversary
Malicious
PRG
Malicious
Semihonest
PRG+OT
PRG+OT
PRG+OT
Malicious
Malicious
Malicious
Table 1: Comm. complexity of constant-round MPC
HKK+14, LR15]), and even extended to the three-party case tolerating two corruptions [CKMZ14].
This paradigm, however, is a multiplicative factor of s more expensive than the passively secure
variant in both computation and communication, where s denotes a statistical security parameter
typically set to a value between 40 and 128, depending on the intended security level. Recent
work by Mohassel et al. [MRZ15] and Ishai et al. [IKKP15] show that with only one corruption,
actively secure 3PC can be obtained without this multiplicative overhead. In fact, they propose
constructions that are as eﬃcient as the passive Yao’s garbled circuit protocol for two parties.
To our knowledge, prior to this work it was not known whether the same level of eﬃciency could
be obtained beyond the three-party case. Even in the case of ﬁve parties with only two corrup-
tions, the existing constant-round MPC constructions are either only secure against passive adver-
saries [BLO16b], or incur a multiplicative overhead (in the security parameter) in both computation
and communication, as is the case with concurrent and independent works [KRW17, HSSV17]).
1.1 Our contributions
In this work, we design an actively secure 5PC protocol with security against two corruptions that
requires 8 rounds of interactions, only uses fast symmetric-key operations (i.e., no use of Oblivious
Transfer [OT]), and incurs 60% less communication compared to the state-of-the-art solution of
Ben-Efraim et al. [BLO16b], which is only passively secure (against 4 corruptions). Instrumental
in our construction is a new 4-party primitive we call Attested OT (AOT), which in addition to
Sender and Receiver involves two additional “assistant parties” who will attest to the respective
inputs of both parties.
eﬃciency properties where the corruption threshold is t ≈ √
We also show how to generalize our construction to a larger number of parties n with similar
n. In fact, we also formulate a com-
binatorial problem that, if solved optimally, can yield even higher corruption thresholds than we
currently obtain (our current solution requires the use of oblivious transfer for n parties; however a
better assignment can eliminate the need for OT). With t denoting the number of corruptions (as
a function of n), Comm. denoting communication complexity and κ, s denoting the computational
and statistical security parameters, respectively, the communication complexity of our protocol and
its comparison with other recent works on constant-round MPC is provided in Table 1. Note that
the protocol by Ishai et al. [IKP10] is the only prior work with active security and asymptotic
complexity close to ours, but which does not yield a 5PC with two corruptions (since t < n/3), and
its concrete eﬃciency is not well-understood.
We have implemented our actively secure 5PC protocol (with up to two active corruptions;
denoted by 5PC-M for brevity) as well as a simpler passively secure variant (denoted by 5PC-
2
SH), and compare their performance to the state-of-the-art implementation of [BLO16b] when
run with ﬁve parties and passive security (with up to four corruptions). 5PC-SH requires 8×
less communication, while 5PC-M incurs 60% less communication compared to [BLO16b]. For
medium- to high-latency networks (i.e., machines across US and machines in the US and Europe,
respectively), where constant-round protocols are more suitable, 5PC-SH evaluates the AES and
SHA circuits 2.6 − 4.8× faster than [BLO16b], while 5PC-M is a factor of 1.7 − 2.6× faster than
[BLO16b]. As a concrete example, securely evaluating the AES circuit with machines located across
the US and Europe takes 5PC-M 1.88s, while the [BLO16b] protocol runs in 4.86s.
1.2 Technical overview
Our starting point is the actively secure 3PC protocol with abort by Mohassel et al. [MRZ15], whose
idea was to designate one party P3 as the evaluator and the other two parties (P1, P2) as circuit
garblers. Since at most one party is corrupted, one garbler is always honest. Hence, they have
both garblers generate the garbled circuit using a seed that they agree upon and have P3 check
equality of the garbled circuits before proceeding with garbled input generation and evaluation.
This ensures honest garbled circuit generation, and with a little more work to get maliciously
secure garbled input generation, they obtain an actively secure 3PC protocl with essentially no
additional communication cost compared to semihonest 2PC using garbled circuits.
Generalizing this approach to the ﬁve-party case and beyond quickly runs into major technical
challenges. Consider the following na¨ıve generalization, where we designate, say, P5 as the evaluator,
and P1, . . . , P4 as the garblers. We can have the garblers agree upon a seed s, and invidividually
generate the garbled circuit using s and send this to P5. P5 would then check the equality of the
circuits and rejects if they do not match. Now let us assume that P5 somehow receives the garbled
inputs for all parties (we will see that this has its own challenge). This approach fails since if the
two corrupted parties are P5 and one of the garblers, then the two of them combined learn both
the seed (and therefore the garbled circuit secrets) and all other parties garbled inputs which they
can combine to recover everyone’s inputs.
A more promising approach is to have the garblers generate the garbled circuit in a distributed
manner [BMR90, DI05, CKMZ14, BLO16b] so that no single garbler would learn the secrets,
but then the challenge in this distributed setting is to obtain security against malicious garblers.
Unfortunately, the existing solutions do not provide the concrete eﬃciency we are aiming for and
incur a signiﬁcant overhead (at least multiplicative in security parameter) compared to the semi-
honest variant.
4-party malicious circuit garbling. To get around the above technical challenge, we design a
new 4-party distributed garbling scheme with the properties that (i) if only one garbler is corrupted,
then the garbled circuit is correct and its secrets remain hidden from the adversary, and (ii) if two
garblers are corrupted, the garbled circuit remains correct but the adversary learns its secrets. This
is suﬃcient for 5PC, since in the case of two corrupted garblers, the evaluator P5 is guaranteed to
be honest, and hence the only guarantee we need is the correctness of the garbled circuit.
Our starting point is a semi-honest 4-party distributed garbling scheme (4DG) in the same spirit
as [DI05, CKMZ14, BLO16b] that takes place between the four garblers P1, . . . , P4. We assume
that all the randomness needed by Pi is generated using a random seed si. We now distribute these
seeds among the four garblers (P1, . . . , P4) such that the seed generated by Pi is known to two
other parties, and at the same time no single party has knowledge of all four seeds. In particular,
the following assignment works where Si denotes the set of indices of parties with knowledge of
si: S1 = {1, 3, 4}, S2 = {2, 3, 4}, S3 = {1, 2, 3}, and S4 = {1, 2, 4}. The intuition is that all the
3
computation and communication generated based on each si can be perfomed by three parties and
checked against each other for correctness. With at most two corruptions, at least one of the parties
is honest and hence any malicious behavior is caught.
In principle, one can turn this idea into a compiler that transforms the semi-honest 4DG into a
4DG with malicious security tolerating two corruptions as discussed above. However, the resulting
protocol would still not be as eﬃcient as we want it to be. For example, this requires treating the
many two-party OTs performed in the distributed garbling in a non-black-box way and checking
the messages sent/received during the OTs among three designated parties, which is expensive.
Instead, we show how to replace each two-party OT in the semi-honest 4DG with a new protocol
for four parties we call Attested OT (AOT), wherein one party is the sender, another is the receiver,
and two other parties are “attesters” whose role is to check honest behavior by sender and receiver.
We design such a protocol using only symmetric-key operations (i.e., commitments), and show
that in the multiple-instance/batch setting (when many such OTs are performed), the amortized
communication cost is that of sending two commitments and one decommitment. This gives us a
protocol that is based solely on PRGs (in a black-box manner). In addition, we describe a specialized
commitment with better eﬃciency, based on AES and secure in the “ideal cipher model” and also
a batched version of our attested OT protocol (that additionally assumes the existence of collision-
resistant hash functions). We note here, that instead of using attested OTs, one can also replace
the OTs with OT extension protocols ([IKNP03]). However, some advantages of our attested OT
protocol over OT extension are: a) fewer rounds (1 vs 3), b) less communication, and c) weaker
hardness assumption.
As a result of these optimizations, we obtain a maliciously secure 4DG protocol with a very
small overhead compared to the semi-honest approach. The garblers send the garbled circuits to
P5 for evaluation (with parties sending hashed copies of each other’s shares to enable P5 to check
the correctness of the garbled circuit).
Garbled input generation. To enable P5 to learn the garbled inputs, it is possible for us to
have the parties peform the garbled input generation using a maliciously secure 5PC protocol since
the cost is only proportional to the input size. However, doing so will be ineﬃcient and would also
require the use of public-key operations (which we wish to avoid). To obtain more eﬃcient garbled
input generation, we consider two separate cases: One for obtaining the garbled inputs for the
garblers, and another for obtaining the evaluator’s garbled input. In the former, each garbler Pi
can generate the parts of the garbled circuit for which it has the seeds, but needs the other garblers’
help to generate the missing parts. To do this, Pi secret-shares his input bit with the other garblers
(who have the seed that Pi is missing). These garblers will compute the “garbled labels” on these
shares and we show that these shares can be combined in a “homomorphic” manner to obtain Pi’s
input shares. This idea does not quite completely work and runs into subtleties, as a malicious P5
colluding with one of the garblers can learn both labels corresponding to Pi’s inputs. To defeat
this, we have an additional step where the garblers mask their shares with secret-sharings of 0. To
generate P5’s garbled input, we reduce the problem to the previous case, by having P5 secret-share
its input between at least three garblers. This almost works, except that in order to prevent the
garblers from lying about their share of P5’s input, we require the garblers to commit to all the
labels and have them open to the “correct” shares (this technique is similar to that used in [MRZ15]
in the context of 3 parties).
Generalizing to more than ﬁve parties. We now present the high-level idea behind extending
the above techniques to arbitrary n. The idea, as before, is to designate n − 1 parties as garblers
4
and one party as the evaluator. The garblers will be given q seeds to PRFs such that: a) No t− 1 of
the garblers have all seeds; b) every pair of seeds is held by at least one garbler; and c) every seed is
held by at least t + 1 parties. The reason for this assignment is as follows: Requiring that no t − 1
of the garblers have all seeds ensures that when t − 1 garblers and the evaluator are corrupt, the
privacy (and correctness) of the distributed garbled circuit is guaranteed which leads to security
of the nPC. When every pair of seeds is held by at least one garbler, then this garbler can act
as the “attester” in our AOT protocol described earlier, and hence we can replace standard OTs
with AOTs (this is not a strict requirement but yields more eﬃcient protocols). Finally, requiring
that every seed is held by at least t + 1 parties ensures that when t garblers are corrupt, there will
be at least one honest party that computes the “right” message and hence the (honest) evaluator
will never get an incorrect garbled circuit. The last condition is necessary only for actively secure
nPC. Realizing the above requires us to obtain an assignment of q seeds to n − 1 garblers with the
general, with q ≈ n and t ≈ √
above properties, which we call the (n, t, q)-assignment problem. We show how this can be done, in
n. We leave as an interesting open question to solve the assignment
optimally.
1.3 Related work
As discussed above, a large body of work has studied eﬃciency of constand-round MPC based on
the seminal works of [Yao82, BMR90], e.g., [DI05, BDNP08, GMS08, IKP10, BLO16b].
In the
passive case, the ﬁrst implementation of constant-round MPC is due to FairplayMP [BDNP08],
and the state-of-the-art implementation is due to [BLO16b]. In the active case, the most eﬃcient
constructions are due to recent and concurrent work by Hazay et al. and Katz et al. [KRW17,
HSSV17]. As discussed earlier, however, these constructions consider a dishonest majority and as
a result have an additional multiplicative factor of overhead in security parameter compared to our
solution. More eﬃcient constructions for the 3-party case appeared in [CKMZ14, MRZ15, IKKP15].
We compare the asymptotic eﬃciency of our protocol with the works most related to ours (security
with abort – in the case of active security) in Table 1.
In the case of MPC with round complexity proportional to the depth of the circuit, two diﬀer-
ent lines of research have been pursued, which we now brieﬂy overview. In the cryptographic set-
ting, building on the seminal work by Goldreich et al.[GMW87], oﬄine-generated (authenticated)
multiplication triplets are used to perform secure computation in a fast online phase [CHK+12,
DPSZ12, DKL+13, KSS13], with a few recent works particularly focusing on the three-party case
[AFL+16, FLNW16]. In the information-theoretic setting, building on [BGW88, CCD88], MPC is
achieved using secret-sharing techniques, with several recent work focusing on better eﬃciency in
the three-party case [BLW08, LDDAM12, ZSB13, CMF+14]. Finally, our seed sharing techniques
can be seen as being similar in spirit to the notion of replicated secret sharing from [CDI05].
2 Preliminaries
We let κ denote the security parameter, and use x $← S to denote choosing a value uniformly at
random from set S, and || to denote concatenation of two strings. When denoting message spaces,
we abuse notation and use M for unspeciﬁed message spaces that will be clear from the context.
Model and security deﬁnition. We will argue the security of our constructions in the simu-
lation paradigm [GMW87, Can00, Can01]. For simplicty, we will follow Canetti’s formulation for
execution of multi-party cryptographic protocols [Can00], where the execution of a protocol by
5
a set of parties P1, . . . , Pn proceeds in rounds, with inputs provided by an environment program
denoted by Z. Here we provide an abridged formulation of security in such framework. All parties
are modelled as non-uniform interactive Turing machines (ITMs); further, we will be focusing on
the case n = 5, for which we provide concrete performance measures, although our approach works
for general n. An adversary A, who interacts with and acts as instructed by the environment, at
the beginning of the protocol “corrupts” a fraction of the parties (i.e., we consider static security);
in the speciﬁc case n = 5, the adversary corrupts up to two of them. (See Section 7 for the achieved
thresholds for arbitrary values of n.) These corrupted parties are under the control of the adversary,
and can actively and arbitrarily deviate from the protocol speciﬁcation. The environment receives
the complete view of all adversarial parties in the interaction. At the end of the interaction, the
environment outputs a single bit.
We now deﬁne two interactions. In the real interaction, the parties run a protocol Π in the
presence of A and Z, with input z, z ∈ {0, 1}∗. Let REALπ,A,Z denote the binary distribution
ensemble describing Z’s output in this interaction. In the ideal interaction, parties send their inputs