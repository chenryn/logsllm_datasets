3-7, 2014, Revised Selected Papers, N. Christin and R. Safavi-Naini,
Springer Berlin Heidelberg, 2014, pp. 436–454.
Eds.
[Online].
Available: http://dx.doi.org/10.1007/978-3-662-45472-5 28
[29] P. Todd, “Merkle mountain range,” https://github.com/opentimestamps/
opentimestamps-server/blob/master/doc/merkle-mountain-range.md,
2012.
[30] A. Fiat and A. Shamir, “How to prove yourself: Practical solutions to
identiﬁcation and signature problems,” in Conference on the Theory and
Application of Cryptographic Techniques. Springer, 1986, pp. 186–194.
[31] J. Garay, A. Kiayias, and N. Leonardos, “The bitcoin backbone protocol:
Analysis and applications,” in Annual International Conference on the
Theory and Applications of Cryptographic Techniques. Springer, 2015,
pp. 281–310.
[32] E. Heilman, A. Kendler, A. Zohar, and S. Goldberg, “Eclipse attacks on
bitcoin’s peer-to-peer network,” in 24th USENIX Security Symposium
(USENIX Security 15). USENIX Association, 2015, pp. 129–144.
[33] A. Gervais, H. Ritzdorf, G. O. Karame, and S. Capkun, “Tampering with
the delivery of blocks and transactions in bitcoin,” in Proceedings of
the 22Nd ACM SIGSAC Conference on Computer and Communications
Security, ser. CCS ’15. ACM, 2015, pp. 692–705. [Online]. Available:
http://doi.acm.org/10.1145/2810103.2813655
[34] D. Pointcheval and J. Stern, “Security proofs for signature schemes,”
in International Conference on the Theory and Applications of Crypto-
graphic Techniques. Springer, 1996, pp. 387–398.
[35] R. Sharma, “What
is ethereum’s ”difﬁculty bomb”?” https://www.
investopedia.com/news/what-ethereums-difﬁculty-bomb/, August 2018,
(Accessed on 02/05/2019).
[36] R. C. Merkle, “A digital signature based on a conventional encryption
function,” in A Conference on the Theory and Applications of
Cryptographic Techniques on Advances in Cryptology, ser. CRYPTO
Springer-Verlag, 1988, pp. 369–378.
’87.
[Online]. Available:
http://dl.acm.org/citation.cfm?id=646752.704751
[37] D. Catalano and D. Fiore, “Vector commitments and their applications,”
in Public-Key Cryptography – PKC 2013, K. Kurosawa and G. Hanaoka,
Eds. Berlin, Heidelberg: Springer Berlin Heidelberg, 2013, pp. 55–72.
[38] E. K. B. Laurie, A. Langley, “Rfc 6962 - certiﬁcate transparency,” https:
//tools.ietf.org/html/rfc6962#section-2.1, June 2013.
[39] L. Ren, “Analysis of nakamoto consensus,” Cryptology ePrint Archive,
Report 2019/943, 2019, https://eprint.iacr.org/2019/943.
[40] A. Poelstra, “Mimblewimble,” 2016, https://scalingbitcoin.org/papers/
mimblewimble.pdf.
[41] R. R. O’Leary,
“Grin
and
built
being
grin-and-beam-a-tale-of-two-coins-being-built-on-mimblewimble,
December 2018, (Accessed on 02/05/2019).
mimblewimble,”
on
beam: A tale
coins
https://www.coindesk.com/
two
of
[42] A. Zamyatin, N. Stifter, A. Judmayer, P. Schindler, E. Weippl, and
W. J. Knottenbelt, “(short paper) a wild velvet fork appears! inclusive
blockchain protocol changes in practice,” Cryptology ePrint Archive,
Report 2018/087, 2018, https://eprint.iacr.org/2018/087.
[43] S. Bano, A. Sonnino, M. Al-Bassam, S. Azouvi, P. McCorry,
S. Meiklejohn, and G. Danezis, “Consensus in the age of blockchains,”
CoRR, vol. abs/1711.03936, 2017. [Online]. Available: http://arxiv.org/
abs/1711.03936
[44] A. Kiayias, A. Russell, B. David, and R. Oliynykov, “Ouroboros: A
provably secure proof-of-stake blockchain protocol,” in Annual Interna-
tional Cryptology Conference. Springer, 2017, pp. 357–388.
[45] S. Dziembowski, S. Faust, V. Kolmogorov, and K. Pietrzak, “Proofs of
space,” Cryptology ePrint Archive, Report 2013/796, 2013, http://eprint.
iacr.org/.
[46] “Intel sawtooth lake documentation, available at: https://intelledger.
[47] B. Cohen and K. Pietrzak, “Simple proofs of sequential work,” in
Annual International Conference on the Theory and Applications of
Cryptographic Techniques. Springer, 2018, pp. 451–467.
sequential work,” in Proceedings of
[48] M. Mahmoody, T. Moran, and S. Vadhan, “Publicly veriﬁable proofs
the 4th Conference on
of
Innovations in Theoretical Computer Science, ser. ITCS ’13. New
York, NY, USA: ACM, 2013, pp. 373–388.
[Online]. Available:
http://doi.acm.org/10.1145/2422436.2422479
[23] socrates1024, “The high-value-hash highway,” https://bitcointalk.org/
github.io,” March 2017.
//bit.ly/2OOMcXC, July 2018.
index.php?topic=98986.0, 2012.
[24] M. Friedenbach, “Compact spv proofs via block header commitments,”
https://www.mail-archive.com/bitcoin-development@lists.sourceforge.
net/msg04318.html, March 2014.
[25] “Difﬁculty
-
blockchain,”
https://www.blockchain.com/en/charts/
difﬁculty, 2019, (Accessed on 01/17/2019).
[26] L. Bahack, “Theoretical bitcoin attacks with less than half of the
computational power (draft),” arXiv preprint arXiv:1312.7013, 2013.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:03:03 UTC from IEEE Xplore.  Restrictions apply. 
942
APPENDIX A
PRELIMINARIES
A key component of our protocol
is a type of Merkle
hash tree [36] which allows every block to commit to all
previous blocks. Similar to vector commitments [37], Merkle
trees provide position binding, so that a malicious prover
cannot open a commitment to two different values at the same
position of a committed sequence. In FlyClient, we use an
MMR construction which is a Merkle tree with an efﬁcient
append functionality. An MMR further allows a prover to
efﬁciently convince a veriﬁer that two MMRs share the same
subtree We will discuss these properties in Section IV-B.
Before deﬁning the preliminaries, we establish our notation
and terminology used throughout the paper.
Notation and Terminology. We say an event occurs with high
probability if it occurs with probability 1 − O(1/2λ), where
λ is the security parameter. We say a probability is negligible
(or negl) if it is O(1/2λ).
Deﬁnition 8 (Collision resistant hash function). A family of
hash functions Hλ : {0, 1}∗ → {0, 1}λ is collision resistant
if for all efﬁcient adversaries A the probability that x, y ?←
A(1λ) and H(x) = H(y) ∧ x (cid:54)= y is negligible in λ.
A. Basic Merkle Tree Deﬁnition
A Merkle tree is a balanced binary tree where the leaves
hold some value, and each non-leaf node stores a hash of both
of its children. Such a structure allows proving the inclusion
of any value in the tree with only a logarithmic number of
hashes, known as a Merkle proof. In Bitcoin, Merkle trees are
used to aggregate the hashes of transactions in a particular
block so that the root becomes a binding commitment to all
transactions in that block. The root is then stored in the header
of the block. An SPV proof of a transaction is the Merkle proof
that the hash of the transaction is a leaf in the Merkle tree.
Though it is a commonly-used data structure, we restate the
security of a Merkle proof so we can extend the deﬁnition to
MMRs later. We omit the proofs in this section and provide
them in the full version.
Deﬁnition 9 (Merkle Proof). Given a Merkle tree, MT, with
root r, a Merkle proof that x is the k-th node in MT, Πk∈M T ,
are the siblings of each node on the path from x to r. Since
MT is balanced, the proof is of size O(log n).
Theorem 3 (Soundness and Completeness of Merkle Proofs).
Given a Merkle tree, M T built using a collision resistant hash
function (Deﬁnition 8), a PPT adversary cannot produce a
valid proof Πk∈M T , for a k not in M T (soundness) or a
proof Πk∈M T that is not a true path in MT (completeness).
B. Merkle Mountain Ranges
MMRs are a special kind of Merkle tree that enable efﬁcient
appends and proofs that two trees agree on the ﬁrst k leafs.
Todd [29] proposed MMRs as part of a distributed time-
stamping service using Bitcoin. The idea had been proposed
before in the context of certiﬁcate transparency logs [38] to
show that any particular version of an append-only log is a
superset of any previous version.
Fig. 5. Example of updating a MMR tree when new data entries are appended
as new leaves of the tree. The grey nodes are either new nodes or nodes that
are changed due to the new data entry. MMR guarantees that for every update,
only log n nodes are either created or modiﬁed.
MMRs provide an efﬁcient append function which main-
tains a balanced binary tree. Appending a new element to an
MMR with n leaves consists of traversing the right-most path
of the tree and creating or modifying at most O(log(n)) nodes
in the tree. We give an example of updating a MMR tree by
appending new data entries to the leaves in Figure 5. The
append function of MMRs additionally provides the ability to
prove that an MMR is the previous version of another MMR
concisely. That is, given a sequence of n MMRs, each created
by appending an element to the previous MMR, a prover
can provide a proof of size O(log(n)) that any k-th tree is
a previous version of the n-th tree while the only previous
information the veriﬁer has is k, n, and the root of the k-th
and n-th MMRs. We formalize this property in Theorem 5.
Deﬁnition 10 (Merkle Mountain Range). A Merkle Mountain
Range, M, is deﬁned as a tree with n leaves, root r, and the
following properties:
1) M is a binary hash tree.
2) M has depth (cid:100)log2 n(cid:101).
3) If n > 1, let n = 2i + j such that i = (cid:98)log2(n − 1)(cid:99):
• r.left is an MMR with 2i leaves.
• r.right is an MMR with j leaves.
Note: M is a balanced binary hash tree, i.e., M is a Merkle
tree. Therefore, for all nodes k ∈ M, ∃ Πk∈M .
A new leaf node, x,
is added to a MMR M by an
AppendLeaf(M, x) protocol depicted in Figure 5. If M is a
complete binary tree, then the protocol returns a new tree with
M as the left subtree and x as the right subtree. Otherwise,
AppendLeaf will recurse on M’s right subtree. We refer to the
full version for more details on AppendLeaf and a proof of
the following theorem.
Theorem 4. Given a MMR, M, with root r and n leaves,
AppendLeaf(r, x) will return a MMR, M(cid:48), with n + 1 leaves
(the n leaves of M plus x added as the right-most leaf).
We now deﬁne a set of MMRs M = {M1, M2, ..., Mn}
created from some list [x1, x2, ..., xn], where M1 is a single
node with value x1 and ri is the root node of an i leaf MMR,
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:03:03 UTC from IEEE Xplore.  Restrictions apply. 
943
L0L1L1L2L0L1L0L3L2Append	L2Append	L3r0r1r2Mi = AppendLeaf(ri−1, xi). A key feature of the way MMRs
are constructed is that, assuming all xi’s are unique, each Mi
has an unique root (otherwise there would be a hash collision),
and given the Merkle proof Πxk∈Mn that some xk is in Mn
for k ≤ n, a veriﬁer can regenerate rk and therefore verify that
Mk is an ancestor of Mn (i.e., Mn was created from n − k
appends to Mk). We state this in the following theorem.
Theorem 5. For k ≤ n, given Πxk∈Mn, i.e., the Merkle proof
that leaf xk is in Mn, a veriﬁer can regenerate rk, the root
of Mk.
Corollary 3. If x1, ..., xn are the hashes of blocks 1 through n
of chain Cn, rn commits the ﬁrst n blocks to xn, and Πk∈Mn
for any k commits x1, ..., xk as the blocks of the chain Ck,
where chain Ck is a preﬁx of chain Cn.
Corollary 4. If an adversary changes any block i in the chain
in any way, then it’s hash xi will also change, so any MMR
Mk for k ≥ i with root r(cid:48)
i will
have that r(cid:48)
k that contains the new block x(cid:48)
k (cid:54)= rk.
APPENDIX B
PROOFS
A. Proof of Lemma 1
Proof. Note that an upper bound X can be accurately modeled
by a Poisson variable Y [39] with parameter µ · n as it is
the sum of many low probability Bernoulli variables. We now
bound the probability that X ≥ c · n by ﬁnding a bound on
P (Y ≥ c· n). We can bound this probability using a Chernoff
style bound. P (Y ≥ c · L) = P (et·Y ≥ et·c·L) ≤ E[et·Y ]
et·c·L .
The Markov bound holds for all t > 0. Using the fact that
the moment generating function for a Poisson variable Y is
eE[Y ](et−1) we get P (Y ≥ c · L) ≤ eµ·L·(et−1)−c·L·t. This is
µ ) which gives us the bound P (Y ≥
minimal for t = log( c
c · L) ≤ eL(c−µ−c log( c
µ ))
B. Proof of Corollary 1
Proof. Set L and c such that eL(c−µ−c log( c
µ )) = 2−λ. In the
constant difﬁculty backbone setting a chain of length L with
a c fraction of the honest blocks must contain at least c · L
blocks with valid PoW. Lemma 1 implies that the probability
of any adversary producing a fork with c·L valid blocks while
the honest chain adopts L blocks is negligible.
C. Proof of Lemma 2
Proof. Let n denote the length of the chain (not counting block
n + 1 which the veriﬁer has already sampled) and c denote
the fraction of the adversary’s computing power relative to the
honest computing power. At any interval j, the veriﬁer samples
from the interval between block (2j−1)n
and n. Let hj denote
the number of invalid blocks the adversary has inserted in the
j-th interval. The probability the veriﬁer fails to sample an in-
valid block in this interval is Pj =
.
j=0 Pj.
Since Pj ≤ 1, if one Pj is sufﬁciently small, then the total
probability of failure is also sufﬁciently small.
(cid:17)k
(cid:16) n−2j hj
Thus, the probability that the veriﬁer fails is (cid:81)log n
(cid:16) n
(cid:17)k
2j −hj
=
n
2j
2j
n
2j+1
≤ a < (2j+1−1)n
Letting a denote the forking point, there is some integer