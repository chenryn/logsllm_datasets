**/etc/hosts.allow**
/etc/hosts.allow 和 / etc/hosts.deny 两个文件是控制远程访问设置的，通过他可以允许或者拒绝某个 ip 或者 ip 段的客户访问 linux 的某项服务。
host.allow 文件列出了允许连接到一个特定服务的主机
hosts.allow 的优先级高于 hosts.deny
这两个文件只控制对有 hosts_access 功能的服务（如 xinetd 所管理的那些服务、sshd 和某些配置的 sendmail）的访问
```bash
sshd:1.1.1.*:allow
# 允许 1.1.1.* ip 段连接 sshd 服务
all:218.24.129.110
# 表示接受 110 这个 ip 的所有请求！
```
**/etc/hosts.deny**
hosts.deny 文件则负责限制访问
```bash
sshd:all:deny
# 禁止除 /etc/hosts.allow 以外的所有主机进行 ssh 连接
```
注意修改完后：
```
service xinetd restart
```
才能让刚才的更改生效。
**/etc/ld.so.conf**
`/etc/ld.so.conf.d/*` 或 `/etc/ld.so.conf` 和 ldconfig. `/etc/ld.so.conf.d/*` 目录下的文件和 `/etc/ld.so.conf` 记录了动态链接库的路径，系统默认搜索 `/lib` 和 `/usr/lib` ，在其他路径下的库文件就需在这些文件中指定。或者，还有个方法，就是设置 LD_LIBRARY_PATH 环境变量，添加其他路径，多个中间用 ：分隔开。
- **ldconfig**
    ldconfig 是一个用来将 `/etc/ld.so.conf.d/*h` 和 `/etc/ld.so.conf` 中列出的库缓存到 `/etc/ld.so.cache` 文件中以供使用，因此在装完一些库或更新 `/etc/ld.so.conf` 文件时，需运行 `/sbin/ldconfig` 命令一下。
    Linux 系统上有两类根本不同的 Linux 可执行程序。第一类是静态链接的可执行程序。静态可执行程序包含执行所需的所有函数 — 换句话说，它们是“完整的”。因为这一原因，静态可执行程序不依赖任何外部库就可以运行。
    第二类是动态链接的可执行程序。
    我们可以用 `ldd` 命令来确定某一特定可执行程序是否为静态链接的：
    ```
    ldd /sbin/sln
    ```
    通常，动态链接的程序比其静态链接的等价程序小得多。不过，静态链接的程序可以在某些低级维护任务中发挥作用。例如，sln 是修改位于 `/lib` 中的不同库符号链接的极佳工具。但通常你会发现几乎所有 Linux 系统上的可执行程序都是某种动态链接的变体。
    那么，如果动态可执行程序不包含运行所需的所有函数，Linux 的哪部分负责将这些程序和所有必需的共享库一起装入，以使它们能正确执行呢？答案是动态装入器（dynamic loader），它实际上是你在 ln 的 ldd 清单中看到的作为共享库相关性列出的 ld-linux.so.2 库。动态装入器负责装入动态链接的可执行程序运行所需的共享库。现在，让我们迅速查看一下动态装入器如何在系统上找到适当的共享库。
    动态装入器找到共享库要依靠两个文件 — `/etc/ld.so.conf` 和 `/etc/ld.so.cache`。`ld.so.conf` 文件包含一个所有目录（`/lib` 和 `/usr/lib` 除外，它们会自动包含在其中）的清单，动态装入器将在其中查找共享库。
    但是在动态装入器能“看到”这一信息之前，必须将它转换到 `ld.so.cache` 文件中。可以通过运行 `ldconfig` 命令做到这一点：
    ```
    ldconfig
    ```
    当 `ldconfig` 操作结束时，你会有一个最新的 `/etc/ld.so.cache` 文件，它反映你对 `/etc/ld.so.conf` 所做的更改。从这一刻起，动态装入器在寻找共享库时会查看你在 `/etc/ld.so.conf` 中指定的所有新目录。
    1. 往 `/lib` 和 `/usr/lib` 里面加东西，是不用修改 `/etc/ld.so.conf` 的，但是完了之后要调一下 `ldconfig` ，不然这个 library 会找不到
    2. 想往上面两个目录以外加东西的时候，一定要修改 `/etc/ld.so.conf` ，然后再调用 `ldconfig` ，不然也会找不到
    3. 总之，就是不管做了什么关于 library 的变动后，最好都 `ldconfig` 一下，不然会出现一些意想不到的结果。不会花太多的时间，但是会省很多的事。
**/etc/login.defs**
设置用户账户限制的配置文件,对 root 用户无效
```bash
PASS_MAX_DAYS   90      # 用户的密码最长使用天数
PASS_MIN_DAYS   0       # 两次修改密码的最小时间间隔
PASS_MIN_LEN    7       # 密码的最小长度
PASS_WARN_AGE   9       # 密码过期前多少天开始提示
```
```bash
UID_MIN 1000            # 用户 ID 的最小值    这个代表你新建用户的 UID
UID_MAX 60000           # 用户 ID 的最大值
GID_MIN 500             # 组 ID 的最小值
GID_MAX 60000           # 组 ID 的最大值
```
```bash
ENCRYPT_METHOD SHA512   # 用 SHA512 加密密码
```
**/etc/pam.d/**
PAM（Pluggable Authentication Modules）可动态加载验证模块，因为可以按需要动态的对验证的内容进行变更，所以可以大大提高验证的灵活性。
更多内容参考 [PAM模块](./认证.md#PAM模块)
**/etc/pam.d/su**
su 命令配置
**etc/passwd**
`/etc/passwd` 是用户数据库，其中的域给出了用户名、加密口令和用户的其他信息
`/etc/passwd` 文件中的每个用户都有一个对应的记录行，记录着这个用户的一下基本属性。`/etc/passwd` 只有系统管理员才可以修改的，该文件对所有用户可读。
更多内容参考 [认证](./认证.md#用户信息)
**/etc/profile**
当一个用户登录 Linux 系统或使用 su - 命令切换到另一个用户时，也就是 Login shell 启动时，首先要确保执行的启动脚本就是 `/etc/profile` .从 `/etc/profile.d` 目录的配置文件中收集 shell 的设置.如果你有对 `/etc/profile` 有修改的话必须得 source 一下你的修改才会生效，此修改对每个用户都生效.
> 敲黑板:只有 Login shell 启动时才会运行 `/etc/profile` 这个脚本，而 Non-login shell 不会调用这个脚本.
一些重要的变量就是在这个脚本文件中设置的，含义如下:
- PATH: 预设可执行文件或命令的搜索路径.
- USER: 用户登录时使用的用户名.
- LOGNAME: 其值为 $USER.
- HOSTNAME: 所使用的主机名.
- MAIL: 存放用户电子邮件的邮箱(实际上是一个 ASCII 码文件).
- HISTSIZE: 历史记录的行数.
- INPUTRC: 存放的是针对键盘热键的信息(也是一个 ASCII 码文件).
**/etc/securetty**
`/etc/securetty` 文件允许你规定 root 用户可以从那个 TTY 设备登录.
登录程序(通常是 `/bin/login`)需要读取 `/etc/securetty` 文件.
列出来的 tty 设备都是允许登录的，注释掉或是在这个文件中不存在的都是不允许 root 登录的.
- pts 是 pesudo tty slave，是伪终端的 slave 端
- console 好像是指当前的控制台(或者监视器)，比如说你 Ctrl+Alt+x，然后 echo "123" > /dev/console，123 总会显示在你的 monitor 上.
- vc 是 virtual console，也可以理解为虚拟的监视器，当你 Ctrl+Alt+x，就会切换到 vc x，在 /dev 下面没有直接对应的设备文件，不过你如果尝试 echo "123" > /dev/vcs1, 你在 monitor 上也能看到，不过要切换到对应的 vc.
- vt 指的是 virtual terminal，虚拟终端
**/etc/shadow**
`/etc/shadow` 是在安装了影子(shadow)口令软件的系统上的影子口令文件
在linux中，口令文件在 `/etc/passwd` 中，早期的这个文件直接存放加密后的密码，前两位是"盐"值，是一个随机数，后面跟的是加密的密码。为了安全，现在的 linux 都提供了 `/etc/shadow` 这个影子文件，密码放在这个文件里面，并且是只有 root 可读的。
Unix 系统最初是用明文保存密码的，后来由于安全的考虑，采用 crypt() 算法加密密码并存放在 `/etc/passwd` 文件。现在，由 于计算机处理能力的提高，使密码破解变得越来越容易。`/etc/passwd` 文件是所有合法用户都可访问的，大家都可互相看到密码的加密字符串，这给系统 带来很大的安全威胁。现代的 Unix 系统使用影子密码系统，它把密码从 `/etc/passwd` 文件中分离出来，真正的密码保存在 `/etc/shadow` 文件中，shadow 文件只能由超级用户访问。这样入侵者就不能获得加密密码串，用于破 解。使用 shadow 密码文件后，`/etc/passwd` 文件中所有帐户的 password 域的内容为"x"，如果 password 域的内容为"*"，则 该帐号被停用。使用 passwd 这个程序可修改用户的密码。
更多内容参考 [认证](./认证.md#用户信息)
**/etc/sudoers**
/etc/sudoers 文件以及 /etc/sudoers.d/ 目录下的文件主要是用来控制用户的访问权限的
当用户执行 sudo 时，系统会主动寻找 /etc/sudoers 文件，判断该用户是否有执行 sudo 的权限
* 确认用户具有可执行 sudo 的权限后，让用户输入用户自己的密码确认
* 若密码输入成功，则开始执行 sudo 后续的命令
/etc/sudoers 文件设置为允许用户在不输入该用户的密码的情况下使用所有命令
%表示用户组，！表示禁止执行
如设置允许 wheel 用户组中的用户在不输入该用户的密码的情况下使用所有命令
```
%wheel  ALL=(ALL)   NOPASSWD: ALL
```
FOO 组可以从任何主机登陆，并且可以用 sudo -u 用户 不用输入密码执行任何命令，但是不能呢个执行 /usr/sbin 下的命令
```
%FOO    ALL=(ALL)   NOPASSWD: ALL,!/usr/sbin/
```
允许 users 用户组中的用户像 root 用户一样使用 mount、unmount、chrom 命令
```
%users  ALL=/sbin/mount /mnt/cdrom, /sbin/umount /mnt/cdrom
```
允许users用户组中的用户像root用户一样使用shutdown命令
```
%users  localhost=/sbin/shutdown -h now
```
让普通用户 test 具有 / etc/init.d/nagios 脚本重启的权限
```
test    ALL=NOPASSWD:/etc/init.d/nagios restart
```
针对 MySQL 数据库的设置，让 test 组中的 test 用户具备 / etc/init.d/mysqld 的权限
```
groupadd test
useradd -g test -m -d /home/test -s /bin/bash test
passwd test
visudo
test ALL=(ALL)  /etc/init.d/mysqld
```
针对 tomcat 的设置，让 test 组中的 test 用户具备 tomcat 操作的权限
```
groupadd test
useradd -g test -m -d /home/test -s /bin/bash test
passwd test
visudo
test ALL=(ALL) NOPASSWD: /usr/local/tomcat/bin/shutdown.sh,/usr/local/tomcat/bin/startup.sh
```
更多内容参考 [认证](./认证.md#sudo)
**/etc/ntp.conf**
ntp 服务配置
```bash
# 服务器地址