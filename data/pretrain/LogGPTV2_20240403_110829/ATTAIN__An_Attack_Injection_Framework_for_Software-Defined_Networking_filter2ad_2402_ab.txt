represent network links; and edge attributes represent egress and ingress ports.
c1
c2
(c1, s1)
(c1, s2)
(c1, s3)
(c1, s4)
(c2, s3)
(c2, s4)
s1
s2
s3
s4
Fig. 4. Example of control plane connections NC with two controllers,
c1, c2, and four switches, s1, s2, s3, s4. Dashed lines represent connections
between controllers and switches.
× VND. AND is the
that include network links; END
set of edge attributes representing ingress and egress ports for
respective links; undeﬁned ports are represented as NULL.
⊆ VND
Figure 3 shows a representative example of a data plane
graph ND with three hosts and two switches. The egress ports
of hosts h1, h2, and h3 are not deﬁned, so they are labeled
NULL. Hosts h1 and h2 connect to switch s1 on switch s1’s
ports p11 and p12, respectively. Switch s1 connects to switch
s2 on switch s1’s port p13; conversely, switch s2 connects to
switch s1 on switch s2’s port p21. Host h3 connects to switch
s2 on switch s2’s port p22.
5) Control plane: We model the control plane as a re-
lation between controllers and switches, comprising a set
of control plane connections, NC. The relation is many-to-
many: a switch can communicate with multiple controllers for
redundancy or fault tolerance, and a controller can communi-
cate with multiple switches under its administrative domain.
A control plane connection represents a bidirectional TCP
connection between a controller (server) and switch (client).
The set of control plane connections NC is expressed as
NC ⊆ C × S = {(x, y) | x ∈ C, y ∈ S}.
Figure 4 shows a representative example of a set of control
plane connections NC, with a network of two controllers and
four hosts. Controller c1 maintains a control plane connection
to each of the four switches, and controller c2 maintains
control plane connections to switches s3 and s4. Thus, NC =
{(c1, s1), (c1, s2), (c1, s3), (c1, s4), (c2, s3), (c2, s4)}.
B. Threat Model
We assume that an attacker can manipulate control plane
messages to change the network’s behavior and cause unde-
sirable effects. As the OpenFlow protocol standardizes such
behavioral changes, attackers are likely to use control plane
messages as a mechanism for actuating network attacks.
569
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:59:29 UTC from IEEE Xplore.  Restrictions apply. 
We do not describe how an attacker has come to com-
promise system components to perform such attacks;
that
is outside of this paper’s scope.2 Rather, we conservatively
assume that certain components have been compromised and
that the attacker has some capabilities for manipulating the
network’s behavior, as described in detail in Section IV-C.
C. Attacker Capabilities Model
We relate the threat model’s attacker assumptions to the sys-
tem model’s components as attacker capabilities3, which are
enumerated and deﬁned in Table I. The capabilities describe
the extent to which an attacker can understand or modify con-
trol messages in NC based on assumptions about the network’s
vulnerabilities and information security protections (e.g., en-
cryption). We deﬁne the set of all possible attacker capabilities,
Γ, as Γ = {DROPMESSAGE(),. . . , INJECTNEWMESSAGE()}.
Practitioners specify the attacker capabilities for each attack.
Our intent with attacker capabilities is not to propose novel
attacker capabilities in SDN; rather, we use them to enumerate
the control plane actions supported by ATTAIN that a system
tester could use to specify operations within attacks and the
abilities an attacker would need in order to execute them.
We map the attacker capabilities to each of the control plane
: NC → P(Γ), where P(Γ) is
connections, as denoted by ΓNC
the power set of Γ. Each element γNCi
is a set of the attacker
capabilities that represent the attacker’s assumed ability to take
actions against messages in that control plane connection.
We classify attacker capabilities into two classes based on
whether or not control plane connections are secured using
Transport Layer Security (TLS). We assume that use of TLS
provides both conﬁdentiality and integrity assurances.
1) Modeling No TLS: For non-TLS control plane connec-
tions using plain TCP, we assume that the attacker can use all
available capabilities. Formally, ΓN oT LS = Γ.
that
2) Modeling TLS: For TLS control plane connections, we
assume that the attacker has not compromised the system’s
public key infrastructure (PKI);
is, we assume that
the attacker cannot masquerade as another device without
being detected, and that the attacker cannot understand the
control message payloads. However, we assume that
the
attacker can still take actions against intercepted messages
and can read message metadata. Formally, ΓT LS = Γ \
{READMESSAGE(), MODIFYMESSAGE(), FUZZMESSAGE(),
INJECTNEWMESSAGE(), MODIFYMESSAGEMETADATA()}.
As an illustration of how we use attacker capabilities, con-
sider the system in Figure 4 and assume that the system uses
TLS control plane connections. If, for example, an attacker
compromised network connection (c1, s1), but not the PKI,
then γ(c1,s1) = ΓT LS. The attacker would then be able to
execute attacks that require only capabilities in ΓT LS for
messages traversing (c1, s1), but would not be able to execute
2Hizver [12] explores in detail how SDN components can be compromised,
including password brute forcing, remote and local application exploitation,
API exploitation, spooﬁng, trafﬁc snifﬁng, ﬂooding, and side channel attacks.
3An important distinction is that the attacker capabilities apply to control
plane messages, not data plane messages.
attacks requiring the ability to perform READMESSAGE() over
the link. Using attacker capabilities in this way, a system tester
would be able to test an attack under different attacker models.
V. ATTACK LANGUAGE
We now deﬁne the attack language with which one can
express control plane attacks in our framework. We assume
that a runtime attack injector, introduced in Section VI, can
interpose on control plane messages, constrained by the extent
to which that is allowed in the attacker capabilities model.
At a high level, an attack description includes a mechanism
for specifying messages of interest to the attacker, which we
call conditionals, as well as a mechanism for specifying the
actions to take against such messages, which we call actions;
collectively, there is a set of conditionals and actions, which
together we call rules, that deﬁne an attack’s behavior. Further-
more, we note that attacks can be broken into stages, which
we call attack states, and which are collectively modeled as
an attack state graph.
A. Message Properties
as follows.
Every control message contains a set of message properties,
• MESSAGESOURCE: Message’s source address (∈ C ∪ S)
• MESSAGEDESTINATION: Message’s destination address
(∈ C ∪ S)
• MESSAGETIMESTAMP: Message’s arrival time
• MESSAGELENGTH: Message’s payload length
• MESSAGETYPE: One of the OpenFlow message types
• MESSAGEID: Unique message identiﬁer
• MESSAGETYPEOPTIONS: Additional properties depen-
dent upon the message’s type
These properties also relate to the attacker capabilities.
For example, source and destination addresses are con-
sidered metadata; an attacker would need the READMES-
SAGEMETADATA capability to read the property and the
MODIFYMESSAGEMETADATA capability to change the prop-
erty. For brevity, we omit the full list of all possible MES-
SAGETYPEOPTIONS and refer the reader to [4], [8], [11].
B. Conditionals
We use propositional logic over message properties to form
conditional expressions, denoted by λ, that specify whether
attack actions should be taken for a message of interest. Our
language supports the logical connectives AND (∧), OR (∨),
and NOT (¬) along with parentheses to conjoin expressions
and to evaluate order of precedence;
it also supports the
operators logical equality (=) and set membership (IN).
C. Storage
Complex attacks may require storage of previous mes-
sages or of variables. We assume that an attacker can store
elements for later use, and we implement storage through
a set of double-ended queues (“deques”), denoted by Δ =
{δ1, δ2, . . . , δd}. Deques can operate like queues or like stacks;
their operations are described in Section V-D. We use deques
570
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:59:29 UTC from IEEE Xplore.  Restrictions apply. 
TABLE I. Attacker Capabilities Γ against a Control Plane Connection Message
Capability
DROPMESSAGE(msg)
PASSMESSAGE(msg)
DELAYMESSAGE(msg)
DUPLICATEMESSAGE(msg)
READMESSAGEMETADATA(msg)
Deﬁnition
Drop the message to prevent it from being sent or received.
Pass the message by allowing it to be sent or received.
Delay sending or receiving of the message by a certain amount of time.
Duplicate the message by sending a replica.
Read and/or record message metadata, such as Layers 2, 3, and 4 header information and physical
timestamp. Message metadata reading excludes reading or recording of the message’s payload.
MODIFYMESSAGEMETADATA(msg) Modify the message’s metadata, excluding the message’s payload. Metadata modiﬁcation includes
FUZZMESSAGE(msg)
READMESSAGE(msg)
MODIFYMESSAGE(msg)
INJECTNEWMESSAGE(msg)
adding, modifying, or deleting metadata from the message.
Modify the message metadata or payload bits in a random, possibly semantically invalid way.
Read and/or record message payload in a semantically meaningful way that conforms to the
OpenFlow protocol. Message reading excludes messages whose payloads cannot be decrypted.
Modify message payload in a semantically valid way that conforms to the OpenFlow protocol.
Modiﬁcation includes adding, modifying, or deleting data from the message’s payload.
Inject a new, semantically valid message into the control plane connection.
for storage since they can be used ﬂexibly for message replay
or reordering as well as for storing general-purpose variables
(e.g., counters).
of
actions,
an
denoted
actuation
by α
of
set
represents
D. Actions
=
The
ordered
{α1, α2, . . . , αa},
attacker
capabilities or an action related to the attack state or testing
framework. Each action αi is derived from one of the attacker
capabilities γi ∈ Γ (e.g., MODIFYMESSAGE), or is one of
the other actions. The deque operations are as follows:
• PREPEND(δ, value): add value to the front of δ,
• APPEND(δ, value): add value to the end of δ,
• value ← EXAMINEFRONT(δ): read front element of δ,
• value ← EXAMINEEND(δ): read end element of δ,
• value ← SHIFT(δ): remove front element of δ,
• value ← POP(δ): remove end element of δ,
and the other actions are the following:
• GOTOSTATE(σ): transition the attack to attack state σ,
• SLEEP(t): halt attack state execution for t seconds, and
• SYSCMD(host, cmd): remotely execute a system com-
mand cmd on host host.
E. Rules
Each rule combines a conditional expression, the action(s)
that it triggers, and the attacker capabilities required to ex-
is an ordered tuple φi =
ecute the action. Each rule φi
(ni, γi, λi, αi), where ni ∈ NC, γi ∈ ΓNC , λi
is the
conditional expression, and αi is a set of actions. The system-
wide set of rules, Φ, is denoted by Φ = {φ1, φ2, . . . , φp}.
F. Attack States
Attack states are the individual stages of an attack. Each
attack state consists of an unordered subset of the system-
wide rules Φ. In a given state, messages are evaluated and
acted upon with respect to that state’s set of rules. An attack’s
set of attack states Σ is denoted as Σ = {σ1, σ2, . . . , σs}.
We note three special cases of attack states:
1) Start Attack State: An attack must consist of at least
one attack state; that is, |Σ| ≥ 1. A single start attack state,
σstart, denotes the beginning of an attack. The attack injector
initializes the rules it will use from the attack start state.
2) Absorbing States: One or more optional absorbing at-
tack states, σabsorbing, are the states in which no further
transitions to other states exist. In effect, once an attack enters
such a state, the attack’s behavior will continue indeﬁnitely.
3) End Attack States: End attack states are a special case
of the absorbing attack states. Each end attack state consists
of a state with no rules (i.e., σ = ∅), denoted as σend ⊆
σabsorbing. This behavior allows all messages to ﬂow without
any interference from the attack injector and can be used to
represent a “completed” attack.
G. Attack State Graph
We use a graph to represent
the system’s attack states
and the actions that
transition the system between attack
states. We deﬁne the attack state graph for a given attack
as ΣG = (VΣG , EΣG , AΣG
). VΣG is the set of vertices in ΣG
= Σ.
and contains all possible attack states for the attack; VΣG
EΣG is the set of edges that deﬁnes valid transitions between
⊆ Σ×Σ. AΣG is the set of edge-labeled attributes.
states; EΣG
For each edge (σx, σy) ∈ EΣG, there exists an edge-labeled
, that represents the set of actions contained
attribute, aΣGi
within the set of rules of attack state σx that transition the
system to attack state σy.
Practitioners can deﬁne an attack state graph for each given
test scenario. To illustrate how an attack state graph would
be constructed, consider the most trivial “attack,” one that
takes no actions against any messages other than to allow
them to pass—that is, it allows normal control plane operation.
571
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 09:59:29 UTC from IEEE Xplore.  Restrictions apply. 
σ1 : σ1 = ∅
(σstart = σ1; σabsorbing = {σ1}; σend = {σ1})
(a) Attack states Σ = {σ1} for the trivial attack.
σstart
σ1
(b) Attack state graph ΣG representation of the trivial attack.
Fig. 5. Example of a single-state trivial “attack” that models normal control
plane operation. All messages are passed, as the attack contains no rules.
σ1 : σ1 = {φ1}
(σstart = σ1)
φ1 = (n1, γ1, λ1, α1)
n1 = (c1, s1)
γ1 = ΓN oT LS
λ1 = READMESSAGE(msg, MESSAGETYPE = PACKET_IN)
α1 = {α11 , α12
α11 = PASSMESSAGE(msg)
α12 = GOTOSTATE(σ2)
}
σ2 : σ2 = {φ2}
φ2 = (n2, γ2, λ2, α2)
n2 = (c1, s1)
γ2 = ΓN oT LS
λ2 = READMESSAGE(msg, MESSAGETYPE = PACKET_OUT)
α2 = {α21 , α22}
α21 = PASSMESSAGE(msg)
α22 = GOTOSTATE(σ3)
σ3 : σ3 = {φ3}