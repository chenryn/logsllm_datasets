In contrast, Panalyst reduces
or submit nothing at all.
the user’s reliance on the collectors to protect her privacy
and also allows her to submit part of the information she
is comfortable with. Even if such information is insuf-
ﬁcient for reproducing an error, it can make it easier for
other techniques to identify the underlying bug. More-
over, Panalyst server can automatically analyze the error
caused by an unknown bug, whereas existing techniques
depend on human to analyze new bugs.
Proposals have been made to improve privacy protec-
tion during error reporting. Scrash [25] instruments an
application’s source code to record information related
to a crash and generate a “clean” report that does not
contain sensitive information. However, it needs source
code and therefore does not work on commodity ap-
plications without the manufacturer’s support.
In ad-
dition, the technique introduces performance overheads
even when the application works properly, and like other
error reporting techniques, uses a remote expert sys-
tem and therefore does not perform automatic analy-
sis of new errors. Brickell, et al propose a privacy-
preserving diagnostic scheme, which works on binary
executables [24, 36]. The technique aims at searching
a knowledge base framed as a decision tree in a privacy-
preserving manner. It also needs to proﬁle an applica-
tion’s execution. Panalyst differs from these approaches
in that it does not interfere with an application’s normal
run except logging inputs, which is very lightweight, and
is devised for automatically analyzing an unknown bug.
Techniques for automatic analysis of software vulner-
abilities have been intensively studied. Examples include
the approach for generating vulnerability-based signa-
tures [26], Vigilante [30], DACODA [31] and EXE [53].
These approaches assume that an input triggering an er-
ror is already given and therefore privacy is no longer
a concern. Panalyst addresses the important issue on
how to get such an input without infringing too much
on the user’s privacy. This is achieved when Panalyst
server is analyzing the vulnerable program. Our tech-
nique combines dynamic taint analysis with symbolic ex-
ecution, which bears some similarity to a recent proposal
for exploring multiple execution paths [42]. However,
that technique is primarily designed for identifying hid-
den actions of malware, while Panalyst is for analyzing
runtime errors. Therefore, we need to consider the issues
that are not addressed by the prior approach. A promi-
nent example is the techniques we propose to tackle a
tainted pointer, which is essential to reliably reproducing
an error.
Similar to Panalyst, a technique has been proposed re-
cently to symbolically analyze a vulnerable executable
and generate an error report
through solving con-
straints [29]. The technique also applies entropy to
quantify information loss caused by the error report-
ing. Panalyst differs from that approach fundamentally
in that our technique generates a new input remotely
while the prior approach directly works on the causal
input on the client. Performing an intensive analysis
on the client is exactly the thing we want to avoid, be-
cause this increases the client’s burden and thus discour-
ages the user from participating. Although an evalua-
tion of the technique reports a moderate overhead [29], it
does not include computation-intensive operations such
as instruction-level tracing, which can, in some cases,
introduce hundreds of seconds of delay and hundreds of
megabytes of execution traces [23]. This can be barely
304 
17th USENIX Security Symposium 
USENIX Association
acceptable to the user having such resources, and hardly
affordable to those using weak devices such as PocketPC
and PDA. Actually, reproducing an error without direct
access to the causal input is much more difﬁcult than
analyzing the input locally, because it requires a care-
ful coordination between the client and the server to en-
sure a gradual release of the input information without
endangering the user’s privacy and failing the analysis
at the same time. In addition, Panalyst can enforce pri-
vacy policies to individual protocol ﬁelds and therefore
achieves a ﬁner-grained control of information than the
prior approach.
8 Conclusion and Future Work
Remote error analysis is essential to timely discovery of
security critical vulnerabilities in applications and gener-
ation of ﬁxes. Such an analysis works most effectively
when it protects users’ privacy, incurs the least perfor-
mance overheads on the client and provides the server
with sufﬁcient information for an effective study of the
underlying bugs. To this end, we propose Panalyst, a
new techniques for privacy-aware remote error analy-
sis. Whenever a runtime error occurs, the Panalyst client
sends the server an initial error report that includes noth-
ing but the public information about the error. Using
an input built from the report, Panalyst server analyzes
the propagation of tainted data in the vulnerable applica-
tion and symbolically evaluates its execution. During the
analysis, the server queries the client whenever it does
not have sufﬁcient information to determine the execu-
tion path. The client responds to a question only when
the answer does not leak out too much user information.
The answer from the client allows the server to adjust
the content of the input through symbolic execution and
constraint solving. As a result, a new input will be built
which includes the necessary information for reproduc-
ing the error on the client. Our experimental study of
this technique demonstrates that it exposes a very small
amount of user information, introduces negligible over-
heads to the client and enables the server to effectively
analyze an error.
The current design of Panalyst is for analyzing the er-
ror triggered by network inputs alone. Future research
will extend our approach to handle other types of errors.
In addition, we also plan to improve the techniques for
estimating information leaks and reduce the number of
queries the client needs to answer.
9 Acknowledgements
We thank our Shepherd Anil Somayaji and anonymous
reviewers for the comments on the paper. This work was
supported in part by the National Science Foundation the
Cyber Trust program under Grant No. CNS-0716292.
References
[1] Wireshark. http://www.wireshark.org/.
[2] NIST/SEMATECH e-Handbook
of
http://www.itl.nist.gov/div898/handbook/, 2008.
Statistical Methods.
[3] Athttpd Remote GET Request Buffer Overrun Vulnerabil-
http://www.securityfocus.com/bid/8709/
ity.
discuss/, as of 2008.
[4] GNOME bug tracking system. http://bugzilla.gnome.
org/, as of 2008.
[5] LIGHT http server and content management system. http://
lhttpd.sourceforge.net/, as of 2008.
[6] miniLZO, a lightweight subset of the LZO library. http://
www.oberhumer.com/opensource/lzo/#minilzo, as
of 2008.
[7] Newspost, a usenet binary autoposter for unix.
newspost.unixcab.org/, as of 2008.
http://
[8] NullLogic, the Null HTTPD server. http://nullwebmail.
sourceforge.net/httpd/, as of 2008.
[9] Privacy Statement
the Microsoft Error Reporting Ser-
vice. http://oca.microsoft.com/en/dcp20.asp, as
of 2008.
for
[10] Process Tracing Using Ptrace. http://linuxgazette.
net/issue81/sandeep.html, as of 2008.
[11] Reducing Support Costs with Windows Vista.
http:
//technet.microsoft.com/en-us/windowsvista/
aa905076.aspx, as of 2008.
[12] Speed
up Windows Mobile
5
pocket
device
.
http://www.mobiletopsoft.com/board/388/
speed-up-windows-mobile-5-pocket-device.
html, as of 2008.
[13] Speed Up Windows Vista. http://www.extremetech.
com/article2/0,1697,2110598,00.asp, as of 2008.
[14] Sumus Game Server Remote Buffer Overﬂow Vulnerability.
http://www.securityfocus.com/bid/13162, as of
2008.
[15] SUMUS, the mus server. http://sumus.sourceforge.
net/, as of 2008.
[16] Technical Note
TN2123,
CrashReporter.
http:
//developer.apple.com/technotes/tn2004/
tn2123.html, as of 2008.
[17] Tip: Disable Error reporting in Windows Mobile 5 to get
better performance: msg#00043. http://osdir.com/ml/
handhelds.ipaq.ipaqworld/2006-05/msg00043.
html, as of 2008.
[18] U.S. Department of Energy Computer Incident Advisory Ca-
pability. Ofﬁce XP Error Reporting May Send Sensitive Doc-
uments to Microsoft.
http://www.ciac.org/ciac/
bulletins/m-005.shtml, as of 2008.
[19] VMPS, VLAN Management Policy Server. http://vmps.
sourceforge.net/, as of 2008.
[20] Windows Error Reporting. http://msdn2.microsoft.
com/en-us/library/bb513641%28VS.85%29.aspx,
as of 2008.
[21] ABADI, M., BUDIU, M., ERLINGSSON, ´U., AND LIGATTI, J.
In ACM Conference on Computer and
Control-ﬂow integrity.
Communications Security (2005), pp. 340–353.
USENIX Association  
17th USENIX Security Symposium 
305
[22] BERKMAN, J. Project Info for Bug-Buddy. http://www.
advogato.org/proj/bug-buddy/, as of 2008.
[23] BHANSALI, S., CHEN, W.-K., DE JONG, S., EDWARDS, A.,
MURRAY, R., DRINI ´C, M., MIHO ˇCKA, D., AND CHAU, J.
Framework for instruction-level tracing and analysis of program
executions.
In VEE ’06: Proceedings of the 2nd international
conference on Virtual execution environments (2006), pp. 154–
163.
[24] BRICKELL,
J., PORTER, D. E., SHMATIKOV, V., AND
WITCHEL, E. Privacy-preserving remote diagnostics.
In CCS
’07: Proceedings of the 14th ACM conference on Computer and
communications security (2007), pp. 498–507.
[25] BROADWELL, P., HARREN, M., AND SASTRY, N. Scrash: A
system for generating secure crash information. In Proceedings
of the 12th USENIX Security Symposium (Aug. 2003), USENIX,
pp. 273–284.
[26] BRUMLEY, D., NEWSOME, J., SONG, D. X., WANG, H., AND
JHA, S. Towards automatic generation of vulnerability-based sig-
natures. In S&P (2006), pp. 2–16.
[27] BUGTOASTER. Do Something about computer Crashes. http:
//www.bugtoaster.com, 2002.
[28] CASTRO, M., COSTA, M., AND HARRIS, T. Securing software
by enforcing data-ﬂow integrity. In OSDI (2006), pp. 147–160.
[29] CASTRO, M., COSTA, M., AND MARTIN, J.-P. Better bug re-
porting with better privacy. In Proceedings of Thirteenth Inter-
national Conference on Architectural Support for Programming
Languages and Operating Systems (ASPLOS’08) (2008).
[30] COSTA, M., CROWCROFT, J., CASTRO, M., ROWSTRON, A.
I. T., ZHOU, L., ZHANG, L., AND BARHAM, P. T. Vigilante:
end-to-end containment of internet worms.
In Proceedings of
SOSP (2005), pp. 133–147.
[31] CRANDALL, J. R., SU, Z., AND WU, S. F. On deriving un-
known vulnerabilities from zero-day polymorphic and metamor-
phic worm exploits. In CCS ’05: Proceedings of the 12th ACM
conference on Computer and communications security (New
York, NY, USA, 2005), ACM Press, pp. 235–248.
[32] CUI, W., PAXSON, V., WEAVER, N., AND KATZ, R. H.
In
Protocol-independent adaptive replay of application dialog.
NDSS (2006).
[33] DUTERTRE, B., AND MOURA, L. The YICES SMT Solver.
http://yices.csl.sri.com/, as of 2008.
[34] EGELE, M., KRUEGEL, C., KIRDA, E., YIN, H., AND SONG,
D. Dynamic spyware analysis.
In Proceedings of the 2007
USENIX Annual Technical Conference (Usenix’07) (June 2007).
[35] GODEFROID, P., LEVIN, M. Y., AND MOLNAR, D. Automated
whitebox fuzz testing. In NDSS (2008).
[36] HA, J., ROSSBACH, C. J., DAVIS, J. V., ROY, I., RAMADAN,
H. E., PORTER, D. E., CHEN, D. L., AND WITCHEL, E. Im-
proved error reporting for software that uses black-box compo-
nents.
In PLDI ’07: Proceedings of the 2007 ACM SIGPLAN
conference on Programming language design and implementa-
tion (2007), pp. 101–111.
[37] KING, J. C. Symbolic execution and program testing. Commun.
ACM 19, 7 (1976), 385–394.
[38] LI, N., LI, T., AND VENKATASUBRAMANIAN, S. t-closeness:
In ICDE (2007),
Privacy beyond k-anonymity and l-diversity.
IEEE, pp. 106–115.
[39] LIANG, Z., AND SEKAR, R. Fast and automated generation of
attack signatures: a basis for building self-protecting servers. In
CCS ’05: Proceedings of the 12th ACM conference on Computer
and communications security (New York, NY, USA, 2005), ACM
Press, pp. 213–222.
[40] LUK, C.-K., COHN, R., MUTH, R., PATIL, H., KLAUSER, A.,
LOWNEY, G., WALLACE, S., REDDI, V. J., AND HAZELWOOD,
K. Pin: building customized program analysis tools with dy-
namic instrumentation.
In PLDI ’05: Proceedings of the 2005
ACM SIGPLAN conference on Programming language design
and implementation (2005), pp. 190–200.
[41] MACHANAVAJJHALA, A., KIFER, D., GEHRKE, J., AND
VENKITASUBRAMANIAM, M. L-diversity: Privacy beyond k-
anonymity. TKDD 1, 1 (2007).
[42] MOSER, A., KR ¨UGEL, C., AND KIRDA, E. Exploring multiple
In IEEE Symposium on
execution paths for malware analysis.
Security and Privacy (2007), pp. 231–245.
[43] NEWSOME, J., BRUMLEY, D., FRANKLIN, J., AND SONG,
D. X. Replayer: automatic protocol replay by binary analysis.
In ACM Conference on Computer and Communications Security
(2006), pp. 311–321.
[44] NEWSOME, J., AND SONG, D. X. Dynamic taint analysis for au-
tomatic detection, analysis, and signature generation of exploits
on commodity software. In NDSS (2005).
[45] QIN, F., WANG, C., LI, Z., KIM, H.-S., ZHOU, Y., AND WU,
Y. Lift: A low-overhead practical information ﬂow tracking sys-
tem for detecting security attacks. In MICRO (2006), pp. 135–
148.
[46] SAMARATI, P., AND SWEENEY, L. Protecting privacy when dis-
closing information: k-anonymity and its enforcement through
generalization and suppression, 1998. Technical Report SRI-
CSL-98-04.
[47] SHANNON, C., AND MOORE, D. The spread of the witty worm.
IEEE Security & Privacy 2, 4 (July/August 2004), 46–50.
[48] SHANNON, C. E. A mathematical theory of communication. Bell
system technical journal 27 (1948).
[49] SIDIROGLOU, S., AND KEROMYTIS, A. D. Countering network
worms through automatic patch generation. IEEE Security and
Privacy 3, 6 (2005), 41–49.
[50] SINGH, S., ESTAN, C., VARGHESE, G., AND SAVAGE, S. Au-
In Proceedings of OSDI (2004),
tomated worm ﬁngerprinting.
pp. 45–60.
[51] VACHHARAJANI, N., BRIDGES, M. J., CHANG, J., RANGAN,
R., OTTONI, G., BLOME, J. A., REIS, G. A., VACHHARAJANI,
M., AND AUGUST, D. I. RIFLE: An architectural framework for
user-centric information-ﬂow security. In MICRO (2004), IEEE
Computer Society, pp. 243–254.
[52] WANG, X., LI, Z., XU, J., REITER, M. K., KIL, C., AND
CHOI, J. Y. Packet vaccine: black-box exploit detection and sig-
nature generation. In ACM Conference on Computer and Com-
munications Security (2006), pp. 37–46.
[53] YANG, J., SAR, C., TWOHEY, P., CADAR, C., AND ENGLER,
D. Automatically generating malicious disks using symbolic ex-
ecution. In SP ’06: Proceedings of the 2006 IEEE Symposium on
Security and Privacy (2006), pp. 243–257.
306 
17th USENIX Security Symposium 
USENIX Association