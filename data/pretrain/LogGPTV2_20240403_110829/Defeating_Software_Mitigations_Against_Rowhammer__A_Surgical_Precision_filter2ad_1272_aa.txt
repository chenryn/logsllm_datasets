title:Defeating Software Mitigations Against Rowhammer: A Surgical Precision
Hammer
author:Andrei Tatar and
Cristiano Giuffrida and
Herbert Bos and
Kaveh Razavi
Defeating Software Mitigations Against
Rowhammer: A Surgical Precision
Hammer
Andrei Tatar(B), Cristiano Giuﬀrida, Herbert Bos, and Kaveh Razavi
Vrije Universiteit Amsterdam, Amsterdam, The Netherlands
{a.tatar,c.giuffrida,h.j.bos,k.razavi}@vu.nl
Abstract. With software becoming harder to compromise due to mod-
ern defenses, attackers are increasingly looking at exploiting hardware
vulnerabilities such as Rowhammer. In response, the research commu-
nity has developed several software defenses to protect existing hardware
against this threat. In this paper, we show that the assumptions existing
software defenses make about memory addressing are inaccurate. Specif-
ically, we show that physical address space is often not contiguously
mapped to DRAM address space, allowing attackers to trigger Rowham-
mer corruptions despite active software defenses. We develop RAMSES, a
software library modeling end-to-end memory addressing, relying on pub-
lic documentation, where available, and reverse-engineered models oth-
erwise. RAMSES improves existing software-only Rowhammer defenses
and also improves attacks by orders of magnitude, as we show in our eval-
uation. We use RAMSES to build Hammertime, an open-source suite of
tools for studying Rowhammer properties aﬀecting attacks and defenses,
which we release as open-source software.
Keywords: Rowhammer · Hammertime · DRAM geometry
1 Introduction
To increase the capacity of DRAM, manufacturers are packing more transis-
tors into DRAM chips. This has resulted in reduced reliability of DRAM in the
wild [12,16]. A prime example of these reliability problems that plague a large
percentage of currently deployed DRAM is the Rowhammer vulnerability [13].
DRAM consists of stacks of rows which store information and the Rowhammer
vulnerability allows for corruption of data in form of bit ﬂips by repeatedly acti-
vating some of these rows. The past two years have witnessed a proliferation
of increasingly sophisticated Rowhammer attacks to compromise various soft-
ware platforms. Mark Seaborn showed that Rowhammer bit ﬂips can be used
to escalate privileges of a Linux/x86 user process in 2015 [20]. Various academic
research groups then showed that the same defect can also be used to compro-
mise Web browsers [7,9], cloud virtual machines [19,22], and even mobile phones
with a completely diﬀerent architecture [21].
c(cid:2) Springer Nature Switzerland AG 2018
M. Bailey et al. (Eds.): RAID 2018, LNCS 11050, pp. 47–66, 2018.
https://doi.org/10.1007/978-3-030-00470-5_3
48
A. Tatar et al.
Given the possibilities for building such powerful attacks, we urgently need to
protect users against their threat. While hardware-based defenses such as error-
correcting code or target row refresh [11] can potentially protect future hardware,
a large portion of existing hardware remains exposed. To bridge this gap, recent
work [5,8] attempts to provide software-only protection against the Rowhammer
vulnerability. ANVIL [5] provides system-wide protection by detecting which
rows in physical memory are accessed often, and if a certain threshold is reached,
it will “refresh” the adjacent rows by reading from them, similar to target row
refresh [11]. In contrast, instead of providing system-wide protection, CATT [8]
protects the kernel memory from user processes by introducing a guard row
between kernel and user memory. Given that Rowhammer bit ﬂips happen in
DRAM, both these defenses attempt to operate at DRAM level, having to make
judgement calls on where the “next” or “previous” row of a given address is.
Fig. 1. Example of nonlinear physical address to DRAM address mapping.
To remain agnostic to the underlying DRAM hardware, both these defenses
make simplifying assumptions about how DRAM is addressed by modern mem-
ory controllers. Speciﬁcally, they assume that physical memory addresses are
mapped linearly by the memory controller to DRAM rows. We investigate
whether this important assumption is valid using a representative set of DRAM
modules and memory controllers. We discover that memory controllers often
non-trivially map physical address to DRAM addresses and DRAM modules
may internally reorder rows. These ﬁndings highlight the need to diﬀerentiate
between the physical address space, what the CPU uses to address memory, and
DRAM address space, the chip select signals along with bank, row and column
addresses emitted by the memory controller. Subtle diﬀerences in mapping one
address space to the other determine the physical address distance between two
rows co-located in hardware, which in turn determines where a Rowhammer
attack could trigger bit ﬂips. Figure 1 shows an empirical example of how a
naive address mapping makes inaccurate assumptions.
Our conclusion is that to build eﬀective software defenses, we cannot treat
the underlying hardware as a black box. To concretize our ﬁndings, we develop
RAMSES, a software library modeling the address translation and manipulation
Defeating Software Mitigations Against Rowhammer
49
that occurs between the CPU and DRAM ICs. We employ RAMSES to advance
the current state of Rowhammer research in multiple dimensions:
– We show how a memory addressing aware attacker can defeat existing
defenses: we could trigger bit ﬂips on ANVIL [5] which aims to mitigate
Rowhammer altogether, and we could trigger bit ﬂips with enough physi-
cal address distance from their aggressor rows to sidestep the guard area of
CATT [8].
– We show that existing attacks can signiﬁcantly beneﬁt from RAMSES when
looking for exploitable bit ﬂips: we can ﬁnd many more bit ﬂips when com-
pared to publicly available Rowhammer tests or the state of the art [17].
Speciﬁcally, within the same amount of time, we could ﬁnd bit ﬂips on DRAM
modules that state of the art reported to be safe from Rowhammer bit ﬂips.
On other DRAM modules, we could ﬁnd orders of magnitude more bit ﬂips.
These ﬁndings already signiﬁcantly increase the eﬀectiveness and impact of
known attacks.
– We build a DRAM proﬁling tool that records a system’s response to a
Rowhammer attack into a portable format called a ﬂip table. We run this
tool on a representative set of memory modules to collect detailed data about
bit ﬂip location and direction. We build an attack simulator that uses ﬂip
tables to perform fast, software-only feasibility analyses of Rowhammer-based
attacks, and use it to evaluate several published Rowhammer exploits. We
release these tools along with collected ﬂip tables open-source as Hammer-
time.
Outline. We provide a background on DRAM architecture and Rowhammer in
Sect. 2. We then describe the design and implementation of RAMSES based on
these parameters in Sect. 3 and explore applications of RAMSES in Sect. 4. We
present the results of our DRAM proﬁling and evaluate the impact of memory
addressing on existing attacks and defenses in Sect. 5. Finally, we discuss related
work in Sect. 6 and conclude in Sect. 7.
Fig. 2. Functional overview of DRAM addressing
50
A. Tatar et al.
2 Background
We ﬁrst brieﬂy look at how modern DRAM is addressed before discussing the
Rowhammer vulnerability. We then show how recent attacks exploit Rowhammer
to compromise systems without relying on software vulnerabilities.
2.1 DRAM Architecture
Figure 2 shows an overview of the devices and addresses involved in accessing
system RAM. There are four types of addresses used, corresponding to diﬀerent
address spaces:
Virtual Addresses are the way nearly all software running on the CPU
accesses memory. It is often a large, sparsely allocated address space, set up
for each process by the kernel. Physical Addresses are what the CPU uses
to access the “outside” world, including devices such as RAM, ﬁrmware ROM,
Memory-Mapped I/O (MMIO) and others. The address space layout is machine-
speciﬁc, usually set up by system ﬁrmware during early boot. Linear Memory
Addresses are used to index all RAM attached to a controller in a contiguous,
linear fashion. These addresses are internal to the northbridge logic and, due to
the tight coupling between the physical address router and memory controller,
are speciﬁc to hardware implementations. DRAM Addresses are the actual
signals on the memory bus used to access RAM and uniquely identify memory
cells. These signals consist of channel, DIMM, rank and bank select signals, along
with row and column addresses [10]. We take a closer look at the components
translating addresses between these address spaces, as well as some techniques
used in translation.
CPU. The Memory Management Units (MMUs) in modern general-purpose
processors use page tables to translate virtual addresses into physical addresses.
Page tables are architecture-speciﬁc data structures in RAM that specify the
virtual memory map of each process, usually set up and maintained by the
operating system. The MMU “walks” these tables for every virtual memory
address translation requested by the CPU. For better performance, a specialized
cache called a Translation Lookaside Buﬀer (TLB) is often included in the MMU.
Physical Address Router. The CPU uses physical memory addresses to access
more than just RAM. System ROM, non-volatile RAM and PCI device memory
are just a few examples of devices mapped into the system’s physical address
space. Routing physical memory requests to the appropriate device is accom-
plished by the physical address router. From a memory addressing perspective,
the physical address router maps the regions in the physical address space corre-
sponding to RAM into a contiguous, linear memory address space. The speciﬁcs
of how this mapping is achieved will vary not only between architectures, but
also depending on system hardware conﬁguration.
Memory Controller. Memory requests on route to system RAM are serviced
by the memory controller, which is responsible for managing the memory bus. To
Defeating Software Mitigations Against Rowhammer
51
achieve this, the linear memory addresses of incoming requests must be mapped
to a multidimensional address space speciﬁc to the memory conﬁguration in use.
These DRAM address tuples consist of channel, DIMM and rank select signals,
along with bank, row and column addresses. Each memory bank comes equipped
with a row buﬀer, a cache for the bank’s current active row, to which accesses
complete with minimal delay. Consequently, a request to a diﬀerent row within
the same bank—an event known as a bank conﬂict—will incur a signiﬁcant delay
while the old row is closed and the new one opened. A well-performing memory
controller will therefore map linear addresses to DRAM in such a way as to
minimize the occurrence of bank conﬂict delays for common usage patterns. The
speciﬁc DRAM address mappings used by controllers are either documented by
the vendor [2] or reverse-engineered [17].
DIMM Circuitry. The memory controller is not the last step in memory
addressing, as DIMM circuitry itself can change the signals that individual
DRAM ICs receive, including bank and address pins, an example of which is
DDR3 rank mirroring [10]. Other remapping strategies exist, which we will dis-
cuss in Sect. 3.1.
2.2 The Rowhammer Vulnerability
Due to the extreme density of modern DRAM arrays, small manufacturing
imperfections can cause weak electrical coupling between neighboring cells. This,
combined with the minuscule capacitance of such cells, means that every time a
DRAM row is read from a bank, the memory cells in adjacent rows leak a small
amount of charge. If this happens frequently enough between two refresh cycles,
the aﬀected cells can leak enough charge that their stored bit value will “ﬂip”,
a phenomenon known as “disturbance error” or more recently as Rowhammer.
Kim et al. [13] showed that Rowhammer can be triggered on purpose, a pro-
cess known as hammering, by using an FPGA to saturate the memory bus with
requests to a single row. To trigger Rowhammer ﬂips with similar eﬀectiveness
from the CPU (a much stronger threat model), we need to ensure that memory
accesses go to DRAM and reach their designated target row as many times as
possible between two refresh cycles. To achieve these goals, we have to deal with
CPU caches, the row buﬀer and DRAM addressing.
Avoiding caches has been heavily studied before. Attackers can use
cache ﬂushing instructions [19,20,22], uncached (DMA) memory [21], eviction
buﬀers [5,7,9] and non-temporal load/store instructions [18]. Bypassing the row
buﬀer is possible by repeatedly reading from two rows as to cause a bank con-
ﬂict [13]. If these bank-conﬂicting rows happen to be exactly one row apart,
their respective disturbance errors add up in that middle row, greatly increas-
ing the number of observed Rowhammer bit ﬂips. This technique is known as
double-sided Rowhammer [20] as opposed to single-sided Rowhammer where the
bank-conﬂicting row is arbitrarily far away and does not directly participate in
inducing disturbance errors. Lastly, making use of end-to-end DRAM address-
ing to precisely select Rowhammer targets has not been adequately explored
52
A. Tatar et al.
and presents several advantages over the state of the art, as we will discuss in
Sect. 4.1 and evaluate in Sect. 5.
2.3 Rowhammer Attacks
Published Rowhammer exploits [7,9,19–22] go through three phases. They ﬁrst
hammer and scan memory for exploitable bit ﬂips; each memory page stores
many thousands of bits, of which only a few are useful to the attack in any
way if ﬂipped. If a bit ﬂip is found with the right oﬀset and direction (1-to-0 or
0-to-1) to be useful, we call it an exploitable bit ﬂip. In the second phase of the
attack, security-sensitive information has to be precisely placed on the memory
page prone to exploitable Rowhammer ﬂips. This is done by either releasing the
target memory page and then spraying security-sensitive information in memory
for a probabilistic attack [9,20], or by massaging the physical memory to store
security-sensitive information on the vulnerable page for a more targeted and
deterministic attack [19,21]. Once the security-sensitive information is stored on
the vulnerable memory page, in the third step the attacker triggers Rowhammer
again to corrupt the information resulting in a compromise.
Selecting targets for hammering is often done heuristically: attacks assume
physical contiguity and split memory into consecutive blocks associated with
a particular row number. These blocks aim to contain all pages that map to
the same row index, regardless of channel, DIMM, rank or bank and are sized
according to assumptions about memory geometry (e.g. 256KiB for two dual-
ranked DDR3 DIMMs). Once two blocks are selected as targets, hammering
works by exhaustively hammering all page pairs and checking for ﬂipped bits.
Alternatively, a timing side-channel based on DRAM bank conﬂicts can reduce
the number of tried pairs signiﬁcantly.
2.4 Rowhammer Defenses
In response to the proliferation of Rowhammer attacks several software-only
defenses were developed. ANVIL [5] attempts to prevent Rowhammer altogether
by monitoring memory access patterns and forcibly refreshing the rows neigh-
boring a potential Rowhammer target row. To achieve this, it uses a reverse-
engineered mapping scheme and assumes consecutive numbering of rows with
ascending physical addresses.
An alternative approach, CATT [8], attempts to mitigate the security impli-
cations of Rowhammer by preventing bit ﬂips from crossing the kernel-userspace
boundary. To achieve this, it partitions physical memory into userspace and
kernel sections separated by a contiguous guard area, whose size is computed
similarly to the target blocks of attacks we presented earlier. This approach
relies on two assumptions: ﬁrst, that a suﬃciently large physically contiguous
memory block will contain all instances of a particular row index across all chan-
nels, DIMMs, ranks and banks, and second, that such blocks corresponding to
consecutive row indices are laid out consecutively in physical memory.
Defeating Software Mitigations Against Rowhammer
53
3 RAMSES Address Translation Library
3.1 Design
In this section we discuss our approach to the main challenges facing an end-to-
end model of computer memory addressing. First we consider the address spaces
at play and deﬁne relationships between individual addresses. Second we look at
modeling the physical to DRAM address mapping done by memory controllers.
Third we discuss any further DRAM address remappings performed on route
to DRAM ICs. Finally, we consider how to eﬃciently map contiguous physical
memory to the DRAM address space.
Address Spaces. Among the address spaces discussed in Sect. 2.1, virtual,
physical and linear memory addresses can be intuitively deﬁned as subsets of
natural numbers, which have familiar properties. DRAM, however, is addressed
quite diﬀerently. Hardware parallelism is evident from the channel, DIMM, rank
and bank select signals, and once a particular bank is selected, a memory word
is uniquely identiﬁed by a row and column address. To accommodate all these
signals we deﬁne a DRAM address to be a 6-tuple of the form , with the order of the ﬁelds reﬂecting hardware hier-
archy levels. We have no universal way of linearizing parts of a DRAM address
since memory geometry (i.e. DIMMs per channel, ranks per DIMM, etc.) is
highly dependent on what hardware is in use. Moreover, concepts like ordering
and contiguity are not as obvious as for physical addresses and are more limited
in scope.
To deﬁne these concepts, we ﬁrst need a measure of hardware proximity of
two DRAM addresses. We say two addresses are co-located on a particular hier-
archy level if they compare equal on all ﬁelds up to and including that level (e.g.
two addresses are bank co-located if they have identical channel, DIMM, rank
and bank ﬁelds). Ordering is well deﬁned on subsets of co-located addresses, such
as columns in a row or rows in a bank, and carries meaning about the relative
positioning of hardware subassemblies. A more general ordering, such as com-
paring ﬁeld-by-ﬁeld, while possible, carries little meaning beyond convenience
and does not necessarily reﬂect any aspect of reality. Co-location also enables us
to deﬁne a limited form of contiguity at memory cell level: we say two DRAM
addresses are contiguous if they are row co-located and have consecutive column
indexes.
Address Mapping. As we have discussed in Sect. 2.1 translation between phys-
ical and DRAM addresses is performed chieﬂy by the memory controller. The
exact mapping used varies between models, naturally, but individual controllers
often have many conﬁguration options for supporting various memory geome-
tries and standards as well as performance tweaks. As an example, AMD [2]
documents 10 DDR3 addressing modes for bank, row and column addresses,
with multiple other options for controlling channel, DIMM and rank selection as
54
A. Tatar et al.
well as features such as bank swizzle, interleaving and remapping the PCI hole.
It is therefore necessary for an accurate model to account for all (sane) combina-
tions of memory controller options, ideally by implementing the mapping logic
described in documentation. When documentation is unavailable, mappings can
be reverse-engineered and further improved by observing side-channels such as
memory access timings and Rowhammer bit ﬂips.
Remapping. In Sect. 2.1 we presented the fact that DRAM addresses can be
altered by circuitry in between the memory controller and DRAM ICs, as long
as memory access semantics are not violated. We used as an example DDR3
rank address mirroring, where bank bits BA0 and BA1, as well as address bits
A3 and A4, A5 and A6, A7 and A8, are respectively interchanged in order to
make the circuit layout simpler on the “rank 1” side of DIMMs. Rank address
mirroring is part of the DDR3 standard [10] and its presence is usually accounted
for by compliant memory controllers by “pre-mirroring” the aﬀected pins, mak-
ing it transparent to the CPU. However, as we will discuss in Sect. 5, we have