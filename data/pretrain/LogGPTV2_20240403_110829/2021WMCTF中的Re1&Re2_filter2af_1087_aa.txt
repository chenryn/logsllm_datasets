# 2021WMCTF中的Re1&Re2
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
## Re1
首先ida反编译main函数会报错，这个一般是程序中有花指令导致的。
因为main函数比较大，用提示成功字符串定位到最后的汇编代码，向上翻翻便看见出问题的代码。
双击该地址，可以发现ida将这段数据解析成了代码且最上面有一个设置的条件绝对跳转跳过了执行下面的错误带代码，这里可以直接把jnb改成jmp，并把下面垃圾代码nop掉。
继续向上翻又可以看见如下的花指令：不断跳转到下一条指令，统统nop掉即可。
    from ida_bytes import *
    addr = 0x140002DEC
    while addr > 1) ^ 0x8320EDB8;
          else
            v3 >>= 1;
        }
        dword_7FF79BD57A70[i] = v3;
        result = i + 1;
      }
      return result;
    }
然后对前4字节填充的block，用CRC生成的256个4字节数据，经过移位，异或运算生成4个4字节数据后与硬编码的数据比较：
最后使用最开始在block填充的 **0xDEAD** 改变 **vars88，vaes84, vaes80, v58**
后作为密钥对除去WMCTF{}格式外输入的4-20字节进行2个xtea加密。
下面开始解密：
首先用z3将vars88，vaes84, vaes80, v58四个值就求出来：
    from z3 import *
    s = Solver()
    key = [BitVec('x%d'%i, 32) for i in range(4)]
    s.add((key[0]+key[1]) == 0x11AB7A7A)
    s.add(key[1]-key[2] == 0x1CD4F222)
    s.add(key[2]+key[3] == 0xC940F021)
    s.add(key[0]+key[2]-key[3] == 0x7C7D68D1)
    if s.check() == sat:
        m = s.model()
        m = [m[key[i]].as_long() for i in range(4)]
        print(m)
    else: 
        print('Not Found!')
    #[2750330814, 1841087164, 1357369498, 2019106695]
再用上面4个数据依次爆破出对应的4字节明文数据：
    #include 
    unsigned int box[256];
    char res[5];
    int number[] = {0x100, 0x100, 0xf, 0x1c};
    unsigned enc[] = {2750330814, 1841087164, 1357369498, 2019106695};
    void gen_box()
    {
      unsigned int j; // [rsp+4h] [rbp-Ch]
      unsigned int i; // [rsp+8h] [rbp-8h]
      unsigned int v3; // [rsp+Ch] [rbp-4h]
      for ( i = 0; i > 1) ^ 0x8320EDB8;
          else
            v3 >>= 1;
        }
        box[i] = v3;
      }
    }
    unsigned int fun1(unsigned int a1, unsigned char a2[256], unsigned int a3)
    {
        unsigned int v4; // [rsp+4h] [rbp-1Ch]
        unsigned int v5; // [rsp+8h] [rbp-18h]
        v5 = 0;
        v4 = a1;
        while ( v5 > 8) ^ box[(unsigned char)(a2[v5++] ^ v4)];
        return a1 ^ v4;
    }
    unsigned int bp(int up, int number, unsigned int pre, unsigned int next)
    {
        for(int i = 0; i 
    #include 
    #include  
    unsigned int get_delat()
    {
        int i = 0;
        unsigned int ans = 0, delat = 0x667E5433;
        for(i = 0; i > 5)) + v0) ^ (sum + key[(sum>>11) & 3]);  
            sum += delta;  
            v0 -= (((v1 > 5)) + v1) ^ (sum + key[sum & 3]);  
        }  
        v[0]=v0, v[1]=v1;  
    }
    int check(unsigned a)
    {
        for(int i = 0; i  127)
                return 0;
        }
        return 1;
    }
    int main(void)
    {
        //['a3eeb7be', '6dbcc2bc', '50e7d09a', '78591f87']
        uint32_t k[4]={0x78591FAD, 0x6DBCC2BC, 0xA3EEB7BE, 0x50E7DE9A};
        for(int i = 10; i  13 9f
    ]zSE>?d 81 d7
    (sqF m# 8a 6b
    Z,wRg8T_ 92 76
    yOu_L1kE b7 ad
    !vta&K]M ba d3
    K?Gl@~Rw bf b5
    1C ="`~p c3 71
    ?&bqWg]_ cd b1
    SX|6u|v f4 43
    +zWv6`!C fb a2