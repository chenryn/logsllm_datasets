title:The cloudier side of cryptographic end-to-end verifiable voting: a
security analysis of Helios
author:Nicholas Chang-Fong and
Aleksander Essex
The Cloudier Side of Cryptographic End-to-end Veriﬁable
Voting: A Security Analysis of Helios
Nicholas Chang-Fong
Department of Electrical and Computer
Engineering
Western University, Canada
PI:EMAIL
Aleksander Essex
Department of Electrical and Computer
Engineering
Western University, Canada
PI:EMAIL
ABSTRACT
Helios is an open-audit internet voting system providing
cryptographic protections to voter privacy, and election in-
tegrity. As part of these protections, Helios produces a cryp-
tographic audit trail that can be used to verify ballots were
correctly counted. Cryptographic end-to-end (E2E) election
veriﬁcation schemes of this kind are a promising step toward
developing trustworthy electronic voting systems.
In this paper we approach the discussion from the ﬂip-side
by exploring the practical potential for threats to be intro-
duced by the presence of a cryptographic audit trail. We
conducted a security analysis of the Helios implementation
and discovered a range of vulnerabilities and implemented
exploits that would: allow a malicious election oﬃcial to
produce arbitrary election results with accepting proofs of
correctness; allow a malicious voter to cast a malformed bal-
lot to prevent the tally from being computed; and, allow an
attacker to surreptitiously cast a ballot on a voter’s behalf.
We also examine privacy issues including a random-number
generation bias aﬀecting the indistinguishably of encrypted
ballots. We reported the issues and worked with the Helios
designers to ﬁx them.
CCS Concepts
•Security and privacy → Cryptanalysis and other
attacks; Web application security; Privacy-preserving
protocols;
Keywords
Internet voting, cryptographic end-to-end veriﬁcation, at-
tacks
1.
INTRODUCTION
Internet voting. Like ﬂying cars it is standard fare in our
collective vision of the future. The perceived advantages
of internet voting typically center around otherwise rea-
sonable goals like increasing voter turnout, reaching under-
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full citation
on the ﬁrst page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
ACSAC ’16, December 05 - 09, 2016, Los Angeles, CA, USA
c⃝ 2016 Copyright held by the owner/author(s). Publication rights licensed to ACM.
ISBN 978-1-4503-4771-6/16/12. . . $15.00
DOI: http://dx.doi.org/10.1145/2991079.2991106
represented populations, and decreasing election costs. Al-
though these advantages themselves have been widely de-
bated, the real reason we don’t all vote online already is
because, simply put, internet voting is a really hard security
challenge. As a simpliﬁcation of rather a complex problem,
the reason internet voting is harder than other security sys-
tems comes down to the tension between ballot secrecy and
election integrity. Consider that when you bank online, both
you and your bank have a record of your account totals and
transactions. So when something goes wrong, at least there’s
a shared starting point with which to pursue the correction.
Internet voting by contrast does not typically have a str-
aightforward way to answer questions about many of its
critical functionalities such as “did my vote count?” In its
most basic form, contemporary commercial internet voting
systems consist of a standard web-application framework;
Javascript is delivered to a client over TLS, and the ballot is
returned to the server and stored in a database. Other sys-
tems oﬀer some degree of veriﬁability,1 but have variously
been shown to have weak procedural security [29, 32], TLS
conﬁguration errors [30], command-line injection vulnerabil-
ities [33], etc.
Cryptographic End-to-end Veriﬁable Voting.
One promising paradigm to tackle these challenges is cryp-
tographic end-to-end (E2E) election veriﬁcation [20], which
produces a universally veriﬁable cryptographic proof, allow-
ing (a) any voter to conﬁrm the inclusion of their vote in
the overall tally, and (b) anyone to conﬁrm the tally was
counted and decrypted correctly. Unlike conventional elec-
tions that focus on procedural controls, E2E veriﬁcation fo-
cuses on providing evidence, exploiting the unique ability
of cryptography to be able to prove statements without re-
vealing any information beyond the truth of the statement
itself. Applied in the voting context that means proving the
correctness of the outcome without requiring direct access
to the voting intention of individuals.
The E2E literature is extensive, so we will brieﬂy men-
tion a few related implementations. Chaum et al. [13] de-
veloped Scantegrity, a scheme for paper optical-scan ballots
and notably ran the ﬁrst E2E-veriﬁable governmental elec-
tion in the City of Takoma Park, MD in 2009 [12]. They re-
peated the election 2011 with an internet voting add-on, Re-
motegrity [34]. Ryan et al. proposed another paper optical-
scan scheme, Prˆet `a Voter [15]. Recently Burton et al. [10,
11] adapted and deployed a variant in the Australian state
1http://www.cs.cornell.edu/˜clarkson/papers/scytl-odbp.pdf
https://www.veriﬁedvoting.org/resources/internet-voting
324
election of Victoria. Bell et al. [7] proposed StarVote for
Travis County, TX. Delis et al. [18] piloted an end-to-end
code voting system during the 2014 European Elections in
Greece.
Helios [3] is an E2E veriﬁable internet voting system, and
the subject of this paper. We decided to focus on Helios
for several reasons. It is one of the oldest E2E implementa-
tions, and at over 500,000 ballots cast, is by far the largest.
It is among the only such implementations to have been ac-
tively maintained and still in continuous use. Finally, it is
perhaps the only such implementation that could be used
to run an election without any involvement of the software
designers. This creates an interesting threat model for us
to explore: an automated election-as-a-service in which the
code is being executed as-is, underscoring the the idea that
vulnerabilities are inherent to the implementation, and not
simply the result of malicious alterations to the code.
Contributions. Our contributions are as follows:
• A security analysis of Helios uncovering a number of
vulnerabilities to conﬁdentiality, integrity and avail-
ability,
• An implementation of exploits demonstrating:
– A malicious election oﬃcial rigging an election by
declaring an arbitrary election result, but issuing
a cryptographic proof that the results were cor-
rectly tallied,
– A malicious voter casting a maliciously formed
ballot preventing the tally from being decrypted,
– An XSS attack allow an attacker to cast a ballot
on a voter’s behalf.
• Discussion and lessons learned,
• Responsible disclosure and collaboration with the He-
lios designers to correct the issues presented in this
paper.
The rest of the paper is organized as follows: Sections 2 and
3 provides background and preliminaries of the cryptogra-
phy used by Helios. Section 4 presents cryptographic attack
that (a) allow a voter to prevent a Helios tally from being
computed and (b) allow an malicious election oﬃcial to pro-
duce arbitrary tallies, with accepting proofs of correctness.
Section 5 describes a RNG bias that undermining the se-
mantic security of ballot encryptions. Section 6 presents the
details of a ballot stealing cross-site scripting attack. Finally
Section 7 concludes.
2. BACKGROUND AND RELATED WORK
2.1 Helios Open-Audit Internet Voting
As originally proposed by Adida [3], Helios used a mixnet-
based proof for robustness. Later Adida et al. [4] moved to a
homomorphic tally approach, in which encrypted votes are
be summed under encryption (cf. Section 3). This scheme
was used to run one of the ﬁrst Helios elections, at the Uni-
versit´e catholique de Louvain in 2008. Today, the Helios
website claims to have been used to cast over half a mil-
lion ballots, and some organizations have used it multiple
times, including the Princeton Undergraduate Student Gov-
ernment (USG) since 20132 and the International Associa-
2https://princeton.heliosvoting.org
tion for Cryptologic Research (IACR) since 2010.3 The cur-
rent actively maintained Helios code base4 is an implementa-
tion of Helios protocol v3.5 There have also been a number
of proposals for Helios variants. Demirel et al. [19] propose
a version oﬀering everlasting privacy. Bluens et al. [9] re-
visit a mixnet-based approach to allow more expressive vote
tallying schemes and explores the property of submission se-
curity. Tsoukalas et al. [31] also explore extending Helios to
support other voting schemes, and provide an open-source
implementation.
A number of papers have studied the security of Helios.
Estehghari and Desmedt [21] propose an attack involving
client-side malware, though the attack is admittedly outside
Helios’ stated threat model. Cortier and Smyth [16] iden-
tiﬁed an attack that would allow a voter to replay ballots
and suggest a ﬁx. Heiderich et al. [24] proposed a number of
subtle client-side attacks to the web technology. Bernhard et
al. [8] identify pitfalls in deciding what precisely to hash for
the Fiat-Shamir heuristic, with implications to proof sound-
ness. K¨usters et al. [26] propose the notion of clash attacks
in which a corrupt election authority issues multiple voters
the same receipt toward the goal of undetectably modifying
the tally. Finally, Karayumak et al. [25] and Acemyan et
al. [2, 1] have examined the usability of Helios and found
a variety of issues, and suggested a number of places for
improvement in the voter and admin interfaces.
2.2 Protocol Overview
To motivate our discussion in the following sections provide a
high-level overview of the phases of a Helios election. Other
cryptographically end-to-end veriﬁable voting schemes pro-
ceed in similar high-level terms, albeit using varying cryp-
tographic proof techniques.
Initial Setup. In the initial setup, the election oﬃcials set
all the relevant election parameters, including the various
ballot contests and candidates, voter lists, and election web-
site, as well as setting generating the relevant cryptographic
parameters including distributed- or threshold-shared pub-
lic keys for ballot encryption/decryption.
Ballot Casting. The voter is directed to the election web-
site and prompted to provide their login credentials. Within
the browser the voter is presented with the various ballot
contests and candidates. They mark their selections. Next,
each of the voter’s selections are separately encrypted using
an additively homomorphic public key cryptosystem. For
example, if a contest was between two candidates Alice, and
Bob, and the voter selected Alice, the booth would produce
two ciphertexts: the “Alice” ciphertext would be an encryp-
tion of 1, and the “Bob” ciphertext would be the encryption
of 0. The booth then constructs a non-interactive crypto-
graphic zero knowledge proof that the ciphertexts constitute
a valid vote. Without loss of generality, a valid vote is one
that casts either (a) a single vote for a single candidate, or
(b) no vote for any candidate (i.e., an abstention).
Finally the voter casts their ballot by posting the cipher-
texts and associated zero-knowledge proofs to the election
website. The server veriﬁes the proofs, and rejects the bal-
lot if the proof is invalid. The voter retains a copy of their
3https://www.iacr.org/elections/2010
4https://github.com/benadida/helios-server
5http://documentation.heliosvoting.org
325
encrypted ballot as a privacy-preserving receipt, which they
may refer to later during the cryptographic election veriﬁ-
cation phase.
Homomorphic Tally. When the election is complete, elec-
tion oﬃcials produce the tally by homomorphically summing
the ciphertexts cast for the respective candidates. For ex-
ample, they would homomorphically sum all ‘Alice’ cipher-
texts, decrypt the result, and issue a zero-knowledge proof
that the decryption was correct. They would then repeat
this for Bob. These vote totals, along with all encrypted
ballots and all associated proofs are posted to a public bul-
letin board.
End-to-end Veriﬁcation. The election can now be ver-
iﬁed for correctness. The end-to-end nature of veriﬁcation
arises from the fact that each voter can:
1. Check their encrypted ballot was included in the col-
lection of encrypted ballots,
2. Verify the zero-knowledge proofs of correctness in the
collection of encrypted ballots,
3. Homomorphically re-compute the encrypted tally,
4. Verify the zero-knowledge proof of decryption and com-
pare it to the reported outcome.
Recalling the goals of cryptographic end-to-end veriﬁcation,
the ﬁrst check allows the voter to conﬁrm the inclusion of
their vote in the overall tally (Helios provides a veriﬁcation
step prior to ballot submission that allows the voter to verify
their choices were correctly encrypted). Finally, the second,
third and fourth checks allow anyone to conﬁrm the tally
was counted and decrypted correctly.
2.3 Threat Model and Assumptions
Helios does not attempt (nor claim) to protect against cer-
tain threats, such as over-the-shoulder coercion resistance,
and client-side malware [3]. For the purposes of the attacks
presented in this paper we attempt to provide a set of as-
sumptions that fairly capture aspects of the threat model:
• Semantic Security. Bernhard et al. [8] demonstrated
that Helios is non-malleable under chosen plaintext at-
tack (NM-CPA), and by implication indistinguishable
under chosen plaintext attack (IND-CPA). It should be
computationally infeasible, therefore, for an adversary
to guess how a voter voted with advantage based solely
on the public audit trail.
• Semi-Trusted Election Authority. In this paper
we do not consider attacks in which a malicious elec-
tion authority attempts to recover voting preferences
from encrypted ballots—this capability is assumed. Al-
though Helios does in principle support multiple trus-
tees with distributed decryption, the default and most
common conﬁguration is a single-trustee mode in which
the Helios server has a copy of the election private key.
• Completeness and Soundness. Helios produces
various non-interactive zero-knowledge proofs for the
purposes of proving (a) a ballot is correctly formed,
e.g., doesn’t contain multiple votes, negative votes,
etc., and (b) the election trustees decrypted the homo-
morphic tally correctly. We say a proof is accepting if a
veriﬁcation algorithm returns True, and non-accepting
otherwise. We assume the Helios proofs are both com-
plete, meaning (informally) that a veriﬁer will accept
valid proofs, and sound meaning a veriﬁer will reject
invalid proofs.
• Election as a Service. We analyze Helios from the
perspective of an election-as-a-service meaning we don’t
consider exploits that could be achieved by altering the
server-side code or by otherwise assuming the Helios
service acts maliciously.
3. PRELIMINARIES
Let Gq denote a ﬁnite cyclic group of order q in which the
discrete logarithm problem is assumed to be hard. Helios
implements Gq over a ﬁnite ﬁeld (as opposed to an elliptic
curve), thus for the purposes of this paper let p, q be primes
for which q | (p − 1)/2, and Gq subgroup of Z∗p. Current
NIST guidelines require |p|≥2048 bits and |q|≥224 bits,
corresponding to the 112-bit security level [28]. Let x ←$ Zq
denote a value x sampled uniformly from the set of integers
modulo q. Values ⟨a, b, c⟩ ∈ Gq forms a Diﬃe-Hellman tuple
if ⟨a, b, c⟩ = ⟨gx, gy, gxy⟩ for some integers x, y ∈ Zq.
Let ⟨Gen, Enc, Dec⟩ by a public-key encryption scheme.
Helios uses the exponential variant of Elgamal:
Gen(1s) → g, y ∈ Gq for y = gx, x ∈$ Zq
Enc(m) =⟨
gr, gmyr⟩ for r ∈$ Zq
= ⟨α, β⟩
Dec(⟨α, β⟩) = (α)−xβ
= (gr)−xgm+xr
= gm.
In El Gamal’s original description, a plaintext is encoded
directly as an element in m ∈ Gq, and β = myr. Here
instead we encode the message as an exponent of g, i.e.,