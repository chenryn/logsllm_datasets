tokens tested for meaning, public information, 89–91 causes, 393–394
815–816 user-directed spidering, HPP, 394–395
tokens tested for 81–83 HTTP parameter pollution (HPP)
predictability, 816–817 web server leveraged for, client-side, 548–550
understanding, 814–815 91–93 HPI, 394–395
sessions Wikto, 92–93 HTTPRECON, 102
fi xation, 819 hacker’s methodology, HTTPS, 49
terminating, 818–819 application mapping, integrated testing suites,
shared hosting, 845–846 796–797 intercepting proxies,
SMTP injection, 836–837 hidden HTML form fi elds 755–758
SOAP injection, 839 client-side data transmission login function, 170
SQL injection, 827–829 with, 118–120 man-in-the-middle attacks,
stored procedures, 831–832 intercepting proxy modifying, 566–568
weak SSL ciphers, 851 119–120 proxy servers, 50
web servers, 846–849 hidden parameters, application session tokens, 234–236, 250
dangerous HTTP methods, mapping, 96–97 HTTPWatch tool, IE, 748
847 hijacking Hydra, 785–786
default content, 847 JavaScript, 519–520 hyperlinks, web functionality, 58
default credentials, 846 E4X, 523–524 hypertext markup language
native software bugs, 848 function callbacks, 520 (HTML). Seealso HTML5
proxy server functionality, JSON, 521 ActiveX controls modifi cation,
847 preventing, 524 557
virtual hosting, 847–848 variable assignment, 522 bypassing fi lters, 459–465
WAFs, 848–849 sessions, 436 attribute delimiters, 461–462
work areas, 791–793 Holyfi eld, Brian, 138 attribute names, 461
XPath injection, 840–841 horizontal access controls, attribute values, 462
XXE injection, 841 258 character sets, 464–465
hacker’s toolkit, 747 horizontal privilege escalation, tag brackets, 462–464
custom scripts, 786–789 259, 416 tag name, 460–461
Curl, 788 Host header, 41 encoding, 68–69
Netcat, 788–789 hosting. See shared hosting developer mistakes, 494–495
Stunnel, 789 HP OpenView, 359 forms, 58–59
Wget, 788 HPI. See HTTP parameter authentication, 160–161
Firebug, 785 injection client-side control of user
Hydra, 785–786 HPP. See HTTP parameter input with, 127–133
integrated testing suites, pollution client-side data transmission
751–773 HTML. See hypertext markup with hidden, 118–120
components, 752–769 language disabled elements, 131–133
types, 751 HTML5 intercepting proxy
Nikto, 785 Ajax, 487 modifying hidden,
web browsers, 748–750 event handlers, 458 119–120
Chrome, 750 local privacy attacks, 554 length limits, 128–129
Firefox, 749–750 same-origin policy, 528–529 script-based validation,
IE, 748–749 script pseudo-protocols, 458 129–131
Wikto, 785 web functionality, 64–65 injection, cross-domain data
Hammad, Sherief, 322 HTTP. See hypertext transfer capture, 516–517
Harper, Allen, 634 protocol refl ected XSS limiting, 495–496
Harris, Shon, 634 HTTP header injection script code introduced in
HEAD functions, 43 causes, 531–532 dynamically evaluated CSS
HEAD method, 265 cookies, 533 styles, 459
heap overfl ows, 635–636 exploiting, 532–535 event handlers, 457–458
Heasman, John, 634 attackers, 534–535 script pseudo-protocols, 458
hex encoding, 69–70 hacker’s methodology, 830 scripttags, 457
bbiinnddeexx..iinndddd 886644 88//1199//22001111 1122::0011::3366 PPMM
Stuttard bindex.indd V1 - 08/13/2011 Page 865
Index n I–I 865
stored XSS limiting, 495–496 application logs, 262 session fi xation, 537–540
tag pairs, XSS, 422 identifi ers. See enumerating CSS, cross-domain data
web functionality with, 58 identifi ers capture, 517–519
hypertext transfer protocol IE. See Internet Explorer e-mail header, 398–399
(HTTP). Seealso HTTP header IEWatch tool, 79, 748 HPI, 390
injection If-Modified-Since, 128–129 causes, 393–394
access controls testing, 278 If-None-Match, 128–129 HTML, cross-domain data
authentication, 50–51 iframe, 511–515 capture, 516–517
sessions avoided with, IIS, Microsoft HTTP header
208–209 error messages, 628 attackers exploiting, 534–535
benefi ts, 5 ISAPI extensions, 688 causes, 531–532
cookies, 19, 47 path traversal vulnerabilities, cookies, 533
client-side data transmission, 691–692 exploiting, 532–535
121 impersonation, authentication, hacker’s methodology, 830
session management tokens, 178–180 HTTP response splitting,
207–208, 234–236 hacker’s methodology, 808–809 534–535
fi ngerprinting, 102 in-band delivery, XSS, 449–450 input validation, 536
hacker’s methodology, web inducing actions, 501 output validation, 536
servers, 847 request forgery preventing, 536
headers CSRF, 8, 244, 251, 504–511 interpreted language, 288–290
application mapping, input OSRF, 502–503 LDAP, 349–354
entry points, 100–101 UI redress attacks, 508, 511–515 conjunctive queries fi lters,
general, 45 basic form, 511–513 352–353
request, 45–46 framebusting, 514–515 exploiting, 351–353
response, 46 mobile devices, 515 fl aws, 353–354
security assumptions, 123 preventing, 515 hacker’s methodology,
HPI, 390 variations, 513 839–840
causes, 393–394 XSS attack payloads, 445–446 preventing, 354
HPP, 394–395 inference vulnerabilities, 350–351
client-side, 548–550 information disclosure, login function bypassed,
man-in-the-middle attacks, 626–627 288–290
566–568 search engines, 626 NoSQL, 342–344
messages, 40–42 SQL injection, 319–324 MongoDB, 343–344
methods, 42–44 infi nite loops, 29 OS commands, 358–368
information disclosure ASP.net, 360–361
origins, 39
error messages, 615–625 dynamic code execution, 362
proxy servers, 49–50
generic, 628 dynamic code execution,
requests, 40–41
inference, 626–627 vulnerabilities, 366–367
dissecting, 107–108
leaks fl aws, 363–366
input sources, 52
client-side, 629 hacker’s methodology,
URL, 40, 42
preventing, 627–629 832–833
responses, 41–42
protecting, 628–629 metacharacters, 420
splitting, 534–535
published content, 625 Perl language, 358–360
server-side redirection,
information leakage, 8 preventing, 367–368
390–392
authentication preventing, shell metacharacters, 363, 365
exploiting, 391–392
195–196 source code, 708
SSL and, 49
hacker’s methodology, 852 spaces, 366
status codes, 48–49
information disclosure time delay, 363–364
enumerating identifi ers, 574
client-side, 629 script
TCP protocol, 40
preventing, 627–629 hacker’s methodology, 835
hypothesis testing, statistical,
information_schema, 309–310 preventing vulnerabilities,
219–222
initialization vector (IV), 685 368
injection SMTP, 397–402
I back-end request, 841 fl aws, 400–401
ID fi eld, 295 client-side, 531–550 hacker’s methodology,
IDA Pro, 153 SQL, 547–548 836–837
iDefense, 558 code, 288 preventing, 402
identifi er-based functions cookie SOAP, 386–388
access controls, 261–262 attacker methods, 536–537 banking application, 387–388
bbiinnddeexx..iinndddd 886655 88//1199//22001111 1122::0011::3366 PPMM
Stuttard bindex.indd V1 - 08/13/2011 Page 866
866 Index n J–J
error messages, 388 blind, 347–348 hacker’s methodology, 838
fi nding and exploiting, 389 fl aws, 348–349 overfl ows, 640–641
hacker’s methodology, 839 hacker’s methodology, signedness errors, 641–642
preventing, 27, 390 840–841 source code, 709–710
SQL, 7, 14 informed, 346–347 integrated testing suites
advanced exploitation, preventing, 349 fuzzing, 762–763
314–324 input. Seealso user input hacker’s toolkit, 751–773
API methods, 291 “accept known good” components, 752–769
application logic fl aws, approach, 24 types, 751
420–422 application mapping, entry intercepting proxies
blind, 626 points for alternatives, 771–773
bugs, 298–302 HTTP headers, 100–101 common features, 758–759
client-side, 547–548 out-of-band channels, 101 HTTPS, 755–758
column name, 301–302 request parameters, 99 web browser confi guration,
conditional errors, 320–322 URL fi le paths, 98–99 752–755
database code components, blog applications, 22 manual request tools, 765–767
741–742 boundary validation, 25–28, shared functions and utilities,
defense in depth, 342 313 768–769
DELETE statements, 297–298 canonicalization, 28–29 shared token analyzers, 767
double hyphen, 293 defense mechanisms, 21–29 Tamper Data, 772
error messages, 334–338 approaches to, 23–25 TamperIE, 772–773
exploitation tools, 328–331 fi lters, path traversal vulnerability scanners, 764–765
fi lter bypassing, 311–313 vulnerabilities, 374–377 standalone, 773–784
fi ngerprinting databases, hacker’s methodology, web spidering, 760–762
303–304 application logic fl aws work fl ow, 769–771
hacker’s methodology, and incomplete, 843 intercepting proxies
827–829 insertion, stored XSS, refl ected evolution, 751
inference, 319–324 XSS eliminating integrated testing suites
input validation dangerous, 495 alternatives, 771–773
circumvented, 312 multistep validation, 28–29 common features, 758–759
INSERT statements, 295–296 “reject known bad” approach, HTTPS, 755–758
JavaScript errors, 299 23–24 web browser confi guration,
numeric data, 299–301, safe data handling approach, 752–755
315–316 25 Internet. See World Wide Web
ORDER BY clause, 301–302 sanitization approach, 24–25 Internet Explorer (IE), 239, 459
out-of-band channel, 316–319 semantic checks, 25 anti-XSS fi lters, 748
parameterized queries, validation, 21–22, 313 error messages, 622
339–341 application logic fl aws HTTPWatch tool, 748
preventing, 27, 338–342 invalidating, 420–422 IEWatch tool, 79, 748
query structure, 301–302 circumventing, 312 refl ected XSS, 435
second-order, 313–314 DOM-based XSS, 497 TamperIE, 772–773
SELECT statements, 294–295 HTTP header injection, 536 userData, 554
source code, 705–706 problems, 26 web application hacker’s
string data, 298–299 stored XSS, refl ected XSS, toolkit, 748–749
syntax, 332–334 492–493 XSS fi lter, 479–481
time delays, 322–324 varieties, 21–23 Internet forums, public
UNION operator, 304–308 input-based vulnerabilities, information, 91
UNION operator data hacker’s methodology, interpreted language injection,
extraction, 308–311 824–836 288–290
UPDATE statements, 296–297 function-specifi c, 836–841 IP address availability, 100
URL encoding, 300–301 INSERT statements IV. See initialization vector
vulnerability exploitation, SQL injection, 295–296
292–294 WHERE clause, 295 J
Trojan, XSS attack payloads, insurance, application logic Jad, Java, 141
444–445 fl aws, 412–413 decompiling, 148–150
XML, 383–390 integer vulnerabilities .jad fi les, 148–150
XXE, 384–386, 841 causes, 640 .jar fi les, 141
XPath, 344–349 detecting, 642–643 JAttack
bbiinnddeexx..iinndddd 886666 88//1199//22001111 1122::0011::3366 PPMM
Stuttard bindex.indd V1 - 08/13/2011 Page 867
Index n K–L 867
data harvesting, 585–586 preventing, 524 Lightweight Directory Access
enumerating identifi ers, variable assignment, 522 Protocol (LDAP)
577–583 $js function, 344 fi lters, 350
extract function, 598 length limits, 471 injection, 349–354
fuzzing, 588–590 logging keystrokes, 560 conjunctive queries fi lters,
strength, 590 open redirection 352–353
Java vulnerabilities, 546 disjunctive queries fi lters, 351
API methods port scanning, 561, 566 exploiting, 351–353
database access, 714–715 script code bypassing fi lters fl aws, 353–354
dynamic code execution, 715 using VBScript and, hacker’s methodology,
fi le access, 713 467–468 839–840
OS command execution, SQL injection, errors in, 299 preventing, 354
715–716 third-party applications vulnerabilities, 350–351
potentially dangerous, currently used, 560–561 uses, 349–350
713–716 web functionality, 61 Linder, Felix, 634
sockets, 716 XSS, 436–438 Litchfi eld, David, 320, 327, 693
URL redirection, 716 XSS exploits executing, in XML LOAD_FILE command, 328
applets, 134 responses, 478–479 local fi le inclusion, 382
decompiling browser JavaScript Object Notation tiered architectures, 652–654
extensions, 146–150 (JSON) local privacy attacks
bytecode, 141 cross-domain requests, autocomplete, 552
debuggers, 151–152 477 browsing history, 552
error messages, 628 JavaScript hijacking, 521 Flash LSOs, 553
Jad, 141 web functionality, 63 hacker’s methodology, 850–851
decompiling, 148–150 JavaSnoop, 151–152 HTML5, 554
same-origin policy, 527 JBoss Application Server, IE userData, 554
security confi guring, 716–717 674–676 persistent cookies, 550
serialized data, 136–137 Jetty, 218 preventing, 554–555
session interaction, 712–713 Dump Servlet, 672 Silverlight Isolated Storage, 553
terminology, 53 Jitko worm, 530–531 testing, 550
tiered architectures, 648 $js function, JavaScript, 344 Local Shared Objects (LSOs), 553
user input, 711–712 JMX, 674–676 Location header, 531–532
JRun, Allaire, 690–691 enumerating identifi ers, 575
API methods, 712
JSON. See JavaScript Object location-based access controls,
web container, 53
Notation 266
web functionality, 53–54
.jsp fi le extension, 107 logging keystrokes, 560
Java Servlet, 53
JSwat, 151–152 logic. See application logic fl aws
Java Virtual Machine (JVM), 134
web server software JVM. See Java Virtual Machine login function, 18–19, 160
vulnerabilities, 690 account suspension, 197–198
java.io.File, 713 K application logic fl aws, 426–427
java.net.Socket, 716 Kamkar, Samy, 219 race conditions, 427
JavaScript keystrokes, logging, 560 attackers, 164–165
browsing history stolen with, Klein, Amit, 248 authentication
560 brute-forcible, 162–165
client-side, validation with, verbose failure messages,
130–131, 156 L 166–169
decompiling browser LAMP server, 650–651, 666 concurrent, 250
extensions, original languages. See interpreted cookies, 163
bytecode manipulation, language fail-open, 185–186, 194
144 lazy load approach, data HTTPS, 170
DOM, 440 transmission, 626 injection bypassing, 288–290
DOM-based API methods, 740 LDAP. See Lightweight Directory multistage, 186–190, 194–195
escaping, script code Access Protocol attackers, 188
bypassing fi lters, 465–466 leaks. See information leakage common myth, 187
hijacking, 519–520 length limits purpose, 186–187
E4X, 523–524 JavaScript, 471 random questions, 189–190,
function callbacks, 520 refl ected XSS, 471–473 194–195
JSON, 521 Ley, Jim, 444 secondary challenge, 173, 200
bbiinnddeexx..iinndddd 886677 88//1199//22001111 1122::0011::3366 PPMM
Stuttard bindex.indd V1 - 08/13/2011 Page 868
868 Index n M–O
secret questions, 189 error messages, 334–338 .NET
session management, 206 out-of-band channels, 317 encryption, 686
tokens, 539–540 syntax, 332–334 padding oracle, 685–687
timing differences, 168–169 WAITFOR command, 322–323 .NET Binary Format for SOAP
username enumeration, multistage functions (NBFS), 138
166–169 access controls, 262–263 Netcat, 788–789
logout function, session testing, 271–273 NETGEAR router, 562
management, 242, 250 banking application, 263 network disclosure, session
logs. See system log disclosure, hacker’s methodology, tokens, 234–237
session tokens application logic fl aws, network hosts, attackers, 561–562
LSOs. See Local Shared Objects 842–843 network perimeter, web
login, 186–190, 194 application security and new,
M attackers, 188 12–14
common myth, 187 nextPayload method, 578
macros, request, 604–606
purpose, 186–187 NGSSoftware, 640
magic_quotes-gpc directive,
random questions, 189–190, Nikto
734
194–195 hacker’s toolkit, 785
mail() command, 398–399
multistep validation, input, hidden content, 93
mail services. See e-mail; SMTP
28–29 maximizing effectiveness, 797
injection
MySpace, stored XSS, 442–443, non-HTTP services, 562–563
man-in-the-middle attacks,
446 NoSQL
566–568
MySQL advantages, 343
manual request tools, integrated
attackers, 328 data stores, 342–343
testing suites, 765–767
comments, 303–304, 312 injection, 342–344
mapping. See application
double hyphen, 293 MongoDB, 343–344
mapping
error messages, 334–338 notNetgear function, 562
Mavituna, Ferruh, 566