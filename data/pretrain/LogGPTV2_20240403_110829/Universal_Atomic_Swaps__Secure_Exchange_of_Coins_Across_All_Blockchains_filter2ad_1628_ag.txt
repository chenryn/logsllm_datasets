https://web.getmonero.org/zh-cn/resources/research-
lab/pubs/MRL-0010.pdf.
[66] H. Corrigan-Gibbs and D. Kogan, “The discrete-
logarithm problem with preprocessing,” in EURO-
CRYPT 2018, Part II, J. B. Nielsen and V. Rijmen,
Eds., ser. LNCS, vol. 10821, Springer, Heidelberg, 2018,
pp. 415–447. D O I: 10.1007/978-3-319-78375-8_14.
[67] W. Difﬁe and M. E. Hellman, “New directions in cryp-
tography,” IEEE Transactions on Information Theory,
vol. 22, no. 6, pp. 644–654, 1976.
J. Gugger, Bitcoin-monero cross-chain atomic swap,
Cryptology ePrint Archive, Report 2020/1126, https :
//eprint.iacr.org/2020/1126, 2020.
[68]
[69] A. Bhat, Liblhtlp - c library implementing linearly
homomorphic time lock puzzles, https://github.com/
veriﬁable-timed-signatures/liblhtlp.
[70] E. Tairi, Anonymous atomic locks (a2l), https://github.
com/etairi/A2L.
[71] Github Project, https : / / github. com / chatch / hashed -
timelock-contract-ethereum.
[72] TierNolan, Atomic swap - bitcoin wiki, https://en.bitcoin.
it/wiki/Atomic_swap.
[73] M. Herlihy, B. Liskov, and L. Shrira, “Cross-chain deals
and adversarial commerce,” Proceedings of the VLDB
Endowment, vol. 13, no. 2, 100–113, 2019, I S S N: 2150-
8097. D O I: 10 . 14778 / 3364324 . 3364326. [Online].
Available: http://dx.doi.org/10.14778/3364324.3364326.
[74] A. Zamyatin, D. Harz, J. Lind, P. Panayiotou, A. Gervais,
and W. J. Knottenbelt, Xclaim: Trustless, interoperable
16
cryptocurrency-backed assets, Cryptology ePrint Archive,
Report 2018/643, https://eprint.iacr.org/2018/643, 2018.
[75] S. Dziembowski, L. Eckey, and S. Faust, Fairswap:
How to fairly exchange digital goods, Cryptology ePrint
Archive, Report 2018/740, https://eprint.iacr.org/2018/
740, 2018.
[76] A. Zamyatin, M. Al-Bassam, D. Zindros, E. Kokoris-
Kogias, P. Moreno-Sanchez, A. Kiayias, and W. J. Knot-
tenbelt, Sok: Communication across distributed ledgers,
Cryptology ePrint Archive, Report 2019/1128, https :
//eprint.iacr.org/2019/1128, 2019.
[77] S. Thyagarajan and G. Malavolta, “Lockable signatures
for blockchains: Scriptless scripts for all signatures,” in
2021 2021 IEEE Symposium on Security and Privacy
(SP), Los Alamitos, CA, USA: IEEE Computer Society,
2021, pp. 937–954. D O I: 10.1109/SP40001.2021.00065.
[Online]. Available: https://doi.ieeecomputersociety.org/
10.1109/SP40001.2021.00065.
J. Camenisch, S. Krenn, and V. Shoup, “A framework
for practical universally composable zero-knowledge
protocols,” in ASIACRYPT 2011, D. H. Lee and X. Wang,
Eds., ser. LNCS, vol. 7073, Springer, Heidelberg, Dec.
2011, pp. 449–467. D O I: 10.1007/978-3-642-25385-
0_24.
[78]
[79] B. M. Thuraisingham, D. Evans, T. Malkin, and D. Xu,
Eds., ACM CCS 2017, ACM Press, 2017.
A P P E N D I X
A. Solution to Exercise
The solution to the fun exercise posed in Section I-B is the
transaction [37]. This is the swap transaction on the Bitcoin
side of the protocol.
B. Related Work
We give an overview of the related work in the following.
HTLC-Based Atomic Swaps. First
introduced by Tier-
Nolan [72], HTLC-based atomic swaps have constituted the
core building block for several cryptocurrency transfers and
exchange protocols [7], [73]. These protocols however suffer
from the drawbacks on HTLC- and timelock-compatibility as
described previously in this section.
Other Approaches for Atomic Swaps. Atomic swaps based
on the Atomic Multi-Hop Locks (AHML) primitive [46] depart
from HTLC-based ones in that the cryptographic condition to
coordinate the swap is embedded in the creation of the digital
signature that authorizes the swap, thereby departing from the
need of hash functions. Yet, AMHL-based swaps as in [46]
still rely on ledgers compatible with timelock functionality
and support single-asset swaps. Recently, [68] have proposed
an atomic swap protocol between Bitcoin and Monero that
does not require hash functionality at any of the ledgers while
timelock functionality is only required at one of the ledgers
(i.e., in this case Bitcoin). Yet, this protocol is single-asset
swap and tailored to these two ledgers.
Decentralized Exchanges. Leveraging the expressive scripting
language available at cryptocurrencies like Ethereum, decen-
tralized exchanges are implemented as a smart contract that
encodes the (somewhat complex) logic to exchange multiple
assets among multiple users. This approach is, however, sup-
ported only by those cryptocurrencies with expressive scripting
language such as that in Ethereum and forces uses with assets
in other ledgers to migrate their assets to Ethereum [74], [75].
Other Cross-chain Communication. Apart from the cryp-
tocurrency transfers and exchanges, cross-chain communication
is a critical component for scalability solutions such as sharding,
feature extensions via sidechains, as well as bootstrapping of
new systems. Although these applications are out of the scope of
this paper, we ﬁnd them an interesting future research direction.
We refer the reader to [76] for further reading.
Scriptless Payment Channel Network. Lockable Signature
was a recently introduced tool [77] useful to construct payment
channel networks scriptlessly from any signature scheme.
However the resulting protocol still relies on time-lock scripts
from the currencies to realize payment expiry, and therefore is
not universal.
C. Security Deﬁnitions of Adaptor signatures
The correctness deﬁnition of adaptor signatures is described
Deﬁnition 5 (Pre-signature Correctness): An adaptor
signature scheme ΠAS satisﬁes pre-signature correctness if
for every λ ∈ N, every message m ∈ {0, 1}∗ and every
statement/witness pair (Y, y) ∈ R, the following holds:
(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)
 = 1.
below.
(λ)
aSigForgeA,ΠAS
Q := ∅
(sk , pk ) ← KGen(1λ)
m ← ASignO(·),pSignO(·,·)(pk )
(Y, y) ← GenR(1λ)
ˆσ ← pSign(sk , m, Y )
σ ← ASignO(·),pSignO(·,·)(ˆσ, Y )
return (m (cid:54)∈ Q ∧ Vf(pk , m, σ))
Fig. 7: Unforgeabiltiy experiment of adaptor signatures
SignO(m)
σ ← Sign(sk , m)
Q := Q ∪ {m}
return σ
pSignO(m, Y )
ˆσ ← pSign(sk , m, Y )
Q := Q ∪ {m}
return ˆσ
aWitExtA,ΠAS (λ)
Q := ∅
(sk , pk ) ← KGen(1λ)
(m, Y ) ← ASignO(·),pSignO(·,·)(pk )
ˆσ ← pSign(sk , m, Y )
σ ← ASignO(·),pSignO(·,·)(ˆσ)
(cid:48)
y
return (m (cid:54)∈ Q ∧ (Y, y
∧ Vf(pk , m, σ))
:= Ext(pk , σ, ˆσ, Y )
(cid:48)
) (cid:54)∈ R
SignO(m)
σ ← Sign(sk , m)
Q := Q ∪ {m}
return σ
pSignO(m, Y )
ˆσ ← pSign(sk , m, Y )
Q := Q ∪ {m}
return ˆσ
Fig. 8: Witness extractability experiment for adaptor signatures
where the experiment aWitExtA,ΠAS is deﬁned as follows
Combining the three properties described above, we can
deﬁne a secure adaptor signature scheme as follows.
Deﬁnition 9 (Secure Adaptor Signature Scheme): An adaptor
signature scheme ΠAS is secure, if it is aEUF-CMA secure,
pre-signature adaptable and witness extractable.
D. Non-Interactive Zero Knowledge Proofs.
Let R : {0, 1}∗ × {0, 1}∗ → {0, 1} be a n NP-witness-
relation with corresponding NP language L := {x : ∃w s.t.
R(x, w) = 1}. A non-interactive zero-knowledge proof
(NIZK) [64] system for the relation R is initialized with
a setup algorithm Setup(1λ) that, outputs a common ref-
erence string crs and a trapdoor td. A prover can show
the validity of a statement x (provided he has a witness
w) by invoking PNIZK,LR (crs, x, w), which outputs a proof
π. The veriﬁer checks the proof π efﬁciently checked using
VNIZK,LR (crs, x, π). We require a NIZK system to be (1) zero-
knowledge, where the veriﬁer does not learn more than the
validity of the statement x, and (2) simulation sound extractable,
if there exists an extractor algorithm E that on input the common
reference string crs, a trapdoor information td, the statement x
and the proof π, and outputs a witness w such that (x, w) ∈ R
with high probability. For formal UC-style deﬁnition of security
we refer the reader to [78].
E. Veriﬁable Timed Dlog
Deﬁnition 10 (Soundness): A VTD scheme ΠVTD =
(Commit, Verify, Open, ForceOp) for a group G with generator
G and order q is sound if there is a negligible function negl(λ)
pVf(pk , m, Y, ˆσ) = 1
Pr
Vf(pk , m, σ) = 1
∧
∧
(Y, y(cid:48)) ∈ R
(sk , pk ) ← KGen(1λ)
ˆσ ← pSign(sk , m, Y )
σ := Adapt(ˆσ, y)
y(cid:48) := Ext(σ, ˆσ, Y )
Next, we formally deﬁne the security properties of an adaptor
signature scheme.
Deﬁnition 6 (Unforgeability): An adaptor signature scheme
ΠAS is aEUF-CMA secure if for every PPT adversary A there
exists a negligible function negl such that:
Pr(cid:2)aSigForgeA,ΠAS
(λ) = 1(cid:3) ≤ negl(λ)
where the experiment aSigForgeA,ΠAS is deﬁned as follows:
Deﬁnition 7 (Pre-signature Adaptability): An adaptor
signature scheme ΠAS satisﬁes pre-signature adaptability if for
any λ ∈ N, any message m ∈ {0, 1}∗, any statement/witness
pair (Y, y) ∈ R, any key pair (sk , pk ) ← KGen(1λ) and any
pre-signature ˆσ ← {0, 1}∗ with pVf(pk , m, Y, ˆσ) = 1 we have:
Pr[Vf(pk , m, Adapt(ˆσ, y)) = 1] = 1
Deﬁnition 8 (Witness Extractability): An adaptor signature
scheme ΠAS is witness extractable if for every PPT adversary
A, there exists a negligible function negl such that the following
holds:
Pr[aWitExtA,ΠAS (λ) = 1] ≤ negl(λ)
17
such that for all probabilistic polynomial time adversaries A
and all λ ∈ N, we have:
b1 = 1 ∧ b2 = 0 :
Pr
(H, C, π, T) ← A(1λ)
x ← ForceOp(C)
b1 := Verify(H, C, π)
b2 := (H = Gx)
≤ negl(λ)
We say that a VTD is simulation-sound if it is sound even
when the prover has access to simulated proofs for (possibly
false) statements of his choice; i.e., the prover must not be
able to compute a valid proof for a fresh false statement of his
choice. In the following deﬁnition we present the deﬁnition of
privacy.
Deﬁnition 11 (Timed Privacy): A VTD scheme ΠVTD =
(Commit, Verify, Open, ForceOp) for a group G with generator
G and order q is private if there exists a PPT simulator S,
a negligible function negl(λ), and a polynomial ˜T such that
for all polynomials T > ˜T, all PRAM algorithms A whose
running time is at most t < T, all messages m ∈ {0, 1}∗, and
all λ ∈ N it holds that
A(H, C, π) = 1 :
A(H, C, π) = 1 :
Pr
− Pr
(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)
x ← {0, 1}λ
H := Gx
(C, π) ← Commit(x, T)
x ← {0, 1}λ
H := Gx
(C, π) ← S(H, T)
(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)
≤ negl(λ)
1) Construction of Veriﬁable Timed Dlog: The construction
uses a NIZK for proving range proofs over time-lock puzzles.
The language is speciﬁed below.
(cid:26)stmt = (Z, a, b, T) : ∃wit = (x, r) s.t.
(cid:27)
(Z ← PGen(T, x; r)) ∧ (x ∈ [a, b])
Lrange :=
The formal construction is given in Figure 9.
F. Security analysis of construction of Atomic Swaps from
Adaptor Signatures for Schnorr and ECDSA signatures
Proof 1 (Proof of Theorem 5.1): We now prove that our
protocol in Figure 5 securely US-realizes the atomic swap
functionality from Figure 3.
We describe a simulator S that handles either of the parties P0
or P1 that are corrupted by a PPT A and simulates the real world
execution protocol while interacting with the ideal functionality
Fswap. We have a static corruption where the environment E
at the beginning of a session speciﬁes the corrupted parties
and the honest parties. The simulator S faithfully impersonates
the honest party. For operations exclusively among corrupted
users, the environment does not expect any interaction with
the simulator. Similarly, communications exclusively among
honest nodes happen through secure channels and therefore
the attacker does not gather any additional information other
than the fact that the communication took place. For simplicity,
we omit these operations in the description of our simulator.
The operations to be simulated for a n-to-˜n atomic swap are
described in the following.
In describing S’s operations for swapping, we begin by
describing a series of hybrid executions, where we begin with
a real world execution and gradually change the simulation
in these hybrids and then we argue about the proximity of
neighbouring experiments. Simulator S’s execution for the
payment operation is deﬁned as the ﬁnal hybrid’s execution.
Below we describe the hybrid executions ﬁrst and later argue
about their proximity. Note that the switching of hybrid
executions is performed over every session, but one at a time
and we only discuss here a single time for simplicity and
readability.
Hybrid H0: This is the same as the real execution of the
protocol in Figure 5.
Hybrid H1: This is the same as the above execution except
now the 2PC protocol ΓSIG
JKGen in the freezing coins of swap
setup phase to generate shared keys is simulated using the 2PC
simulator S2pc,1 for the corrupted parties. Notice that such a
simulator is guaranteed to exist for the 2PC protocol ΓSIG
JKGen.
Rest of the execution is unchanged from H0.
Hybrid H2: This is the same as the above execution except now
the 2PC protocol ΓAdpSg in the swap lock phase to generate
the pre-signatures is simulated using S2pc,2 for the corrupted
parties.
Hybrid H3: This is the same as the above execution except
now if in some session q3, the adversary corrupts user
P1 and the adversary outputs σ∗ on a transaction tx (1)
for some i ∈ [n] such that
under the public key pk (01)
= 1, before the simulator initiates
ΠSIG
the swap on behalf of P0, the simulator aborts by outputting
abort1.
Hybrid H4: This is the same as the above execution except
now if in some session q4, the adversary corrupts P0 and
outputs σ∗ on a transaction tx (0)
swp,k under the public key pk (10)
k
for some k ∈ [˜n] such that ΠSIG
= 1.
DS .Vf
The simulator computes y(cid:48) ← ΠSIG
and if
(Y, y(cid:48)) /∈ R, the simulator aborts by outputting abort2.
Hybrid H5: This is the same as the above execution except now
if in some session q5, the adversary corrupts P0 and outputs
σ∗ on a transaction tx (0)
for
some k ∈ [˜n] such that ΠSIG
• the simulator computes y←ΠSIG
AS .Ext
(Y, y) ∈ R
• the simulator computes for all i ∈ [n],
˜σ(1)
swp,i, y
swp,k, σ∗(cid:17)
(cid:17)