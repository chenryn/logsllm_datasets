title:A Look Back at "Security Problems in the TCP/IP Protocol Suite"
author:Steven M. Bellovin
A Look Back at “Security Problems in the TCP/IP Protocol Suite”
Steven M. Bellovin
AT&T Labs—Research
PI:EMAIL
Abstract
About ﬁfteen years ago, I wrote a paper on security prob-
lems in the TCP/IP protocol suite, In particular, I focused on
protocol-level issues, rather than implementation ﬂaws. It
is instructive to look back at that paper, to see where my fo-
cus and my predictions were accurate, where I was wrong,
and where dangers have yet to happen. This is a reprint of
the original paper, with added commentary.
1. Introduction
“Security Problems
The paper
in the
TCP/IP Protocol Suite” was originally pub-
lished in Computer Communication Re-
view, Vol. 19, No. 2, in April, 1989. It was a
protocol-level analysis; I intentionally did not
consider implementation or operational
is-
sues. I felt—and still feel—that that was the
right approach. Bugs come and go, and ev-
eryone’s operational environment is different.
But it’s very hard to ﬁx protocol-level prob-
lems, especially if you want to maintain com-
patibility with the installed base.
in a sans serif
This paper is a retrospective on my orig-
inal work. New commentary is shown in-
dented,
font. The original
text is otherwise unchanged, except for pos-
sible errors introduced when converting it
from troff to LATEX. I’ve left the references in-
tact, too, even if there are better versions
today. The reference numbers and pag-
ination are, of course, different;
the sec-
tion numbers remain the same, except for
a new “Conclusions” section. As a gen-
eral rule, the commentary follows the section
it’s discussing.
It helps to understand where this paper
came from. When I started work at Bell Labs
Murray Hill in 1982, I assumed ownership of
2 of the ﬁrst three pieces of Ethernet ca-
1 1
ble in all of AT&T, then a giant monopoly tele-
phone company. My lab had one cable, an-
other lab had a second, and a “backbone”
linked the two labs. That backbone grew, as
other labs connected to it. Eventually, we
scrounged funds to set up links to other Bell
Labs locations; we called the resuling net-
work the “Bell Labs Internet” or the “R&D In-
ternet”, the neologism “Intranet” not having
been invented.
Dedicated routers were rare then; we gen-
erally stuck a second Ethernet board into a
VAX or a Sun and used it to do the routing.
This mean that the routing software (we used
Berkeley’s routed) was accessible to system
administrators. And when things broke, we
often discovered that it was a routing prob-
lem: someone had misconﬁgured their ma-
chine. Once, we found that someone had
plugged a new workstation into the Murray
Hill backbone, rather than into his depart-
ment’s network; worse yet, the (proprietary)
address assignment software on his machine
didn’t see any (proprietary) address assign-
ment servers on that network, so it allocated
.1—the gatewayy router—to itself. These two
situations worried me; it was clear that any-
thing that could happen by accident could be
done deliberately, possibly with serious con-
sequences.
Several other things focused my atten-
tion on security even more. One was Robert
Morris’ discovery of sequence number
guessing attacks; these are discussed ex-
tensively below. Another was the “Shadow
Hawk” incident—a teenager broke into var-
ious AT&T computers [2]. He was detected
when he tried to use uucp to grab pass-
word ﬁles from various Research machines;
a number of us had installed detectors for ex-
actly that sort of activity, and noticed the un-
Proceedings of the 20th Annual Computer Security Applications Conference (ACSAC’04) 
1063-9527/04 $ 20.00 IEEE 
usual behavior. At that, we were lucky—most
of the connectivity within AT&T was via the
proprietary Datakit network, which he didn’t
know how to exploit.
By the time of the Internet worm of 1988,
this paper was already in substantially its cur-
rent form. The result was an analysis (to the
best of my ability; I was relatively new to se-
curity at the time) of protocol-level problems
in TCP/IP.
The original paper was criticized in [54].
Some of the criticisms were valid; some, in
my opinion, were not. At the time, I chose
not to publish a detailed rebuttal; I will not
do so here. I have, where appropriate, noted
where my analysis was especially incorrect. I
did and do feel that my conclusions were sub-
stantially correct.
The TCP/IP protocol suite [41, 21] which is very widely
used today, was developed under the sponsorship of the De-
partment of Defense. Despite that, there are a number of se-
rious security ﬂaws inherent in the protocols. Some of these
ﬂaws exist because hosts rely on IP source address for au-
thentication; the Berkeley “r-utilities” [22] are a notable ex-
ample. Others exist because network control mechanisms,
and in particular routing protocols, have minimal or non-
existent authentication.
When describing such attacks, our basic assumption is
that the attacker has more or less complete control over
some machine connected to the Internet. This may be due
to ﬂaws in that machine’s own protection mechanisms, or it
may be because that machine is a microcomputer, and inher-
ently unprotected. Indeed, the attacker may even be a rogue
system administrator.
1.1. Exclusions
We are not concerned with ﬂaws in particular implemen-
tations of the protocols, such as those used by the Internet
“worm” [95, 90, 38] Rather, we discuss generic problems
with the protocols themselves. As will be seen, careful im-
plementation techniques can alleviate or prevent some of
these problems. Some of the protocols we discuss are de-
rived from Berkeley’s version of the UNIX system; others
are generic Internet protocols.
We are also not concerned with classic network attacks,
such as physical eavesdropping, or altered or injected mes-
sages. We discuss such problems only in so far as they are
facilitated or possible because of protocol problems.
For the most part,
there is no discussion here of
vendor-speciﬁc protocols. We do discuss some prob-
lems with Berkeley’s protocols, since these have be-
come de facto standards for many vendors, and not just for
UNIX systems.
the criticisms in [54]) was that
One of
I
had lumped Berkeley-speciﬁc protocols to-
gether with standardized protocols described
in RFCs. It’s quite clear from the preceed-
ing paragraph that I understood the differ-
ence. However, the use of address-based
authentication—a major ﬂaw that
I criti-
cize throughout the paper—was peculiar to
Berkeley’s software; I did not make that dis-
tinction clear. It is indeed a bad way to do au-
thentication, but it was not blessed by any
ofﬁcial standard.
2. TCP Sequence Number Prediction
One of the more fascinating security holes was ﬁrst de-
scribed by Morris [70]. Brieﬂy, he used TCP sequence num-
ber prediction to construct a TCP packet sequence without
ever receiving any responses from the server. This allowed
him to spoof a trusted host on a local network.
The normal TCP connection establishment sequence in-
volves a 3-way handshake. The client selects and transmits
an initial sequence number ISNC, the server acknowledges
it and sends its own sequence number ISNS, and the client
acknowledges that. Following those three messages, data
transmission may take place. The exchange may be shown
schematically as follows:
C → S : SYN(ISNC)
S → C : SYN(ISNS), ACK(ISNC)
C → S : ACK(ISNS)
C → S : data
and/or
S → C : data
That is, for a conversation to take place, C must ﬁrst hear
ISNS, a more or less random number.
Suppose, though, that there was a way for an intruder X
to predict ISNS. In that case, it could send the following se-
quence to impersonate trusted host T :
X → S : SYN(ISNX ), SRC = T
S → T :
X → S : ACK(ISNS), SRC = T
X → S : ACK(ISNS), SRC = T, nasty − data
SYN(ISNS), ACK(ISNX )
Even though the message S → T does not go to X, X
was able to know its contents, and hence could send data.
If X were to perform this attack on a connection that al-
lows command execution (i.e., the Berkeley rsh server), ma-
licious commands could be executed.
Proceedings of the 20th Annual Computer Security Applications Conference (ACSAC’04) 
1063-9527/04 $ 20.00 IEEE 
How, then, to predict the random ISN? In Berkeley sys-
tems, the initial sequence number variable is incremented
by a constant amount once per second, and by half that
amount each time a connection is initiated. Thus, if one ini-
tiates a legitimate connection and observes the ISNS used,
one can calculate, with a high degree of conﬁdence, ISN(cid:1)
used on the next connection attempt.
S
Morris points out that the reply message
S → T : SYN(ISNS), ACK(ISNX )
does not in fact vanish down a black hole; rather, the real
host T will receive it and attempt to reset the connection.
This is not a serious obstacle. Morris found that by im-
personating a server port on T , and by ﬂooding that port
with apparent connection requests, he could generate queue
overﬂows that would make it likely that the S → T mes-
sage would be lost. Alternatively, one could wait until T
was down for routine maintenance or a reboot.
I mischaracterized Morris’ paper on this
point. While ﬂooding can work—without ex-
plicitly stating it,
I anticipated the denial
of service attacks that started occurring in
1996—Morris in fact exploited an imple-
mentation error in the Berkeley kernel
to
accomplish his goal with many fewer pack-
ets. That ﬂaw (described in [10] as well as
in Morris’ paper) received very little atten-
tion at the time, and was not ﬁxed until many
years later.
For that matter, sequence number attacks
received little attention outside of my pa-
per, until Kevin Mitnick reimplemented Mor-
ris’ idea and used it to attack Tsutomu Shi-
momura [93]. Shimomura then proceeded to
track down Mitnick.
A variant on this TCP sequence number attack, not de-
scribed by Morris, exploits the netstat [86] service. In this
attack, the intruder impersonates a host that is down. If net-
stat is available on the target host, it may supply the nec-
essary sequence number information on another port; this
eliminates all need to guess.1
The Berkeley implementation of netstat was
dangerous, but not for the reasons that I gave
here. It did list the open ports on the machine,
as well as all current connections; both items
are very valuable to would-be attackers. In-
deed, discovering the former is a major piece
of functionality of many attack tools. Fortu-
nately, even in 1989 netstat was not available
1
The netstat protocol is obsolete, but is still present on some Internet
hosts. Security concerns were not behind its elimination.
by default on any 4.2BSD or 4.3BSD systems.
There were still TOPS-20 systems on the net
at that time; those systems had a vulnera-
ble netstat, a fact I refrained from mentioning
for fear of pointing attackers at targets. Ac-
tual output is shown in Figure 1.
There are several salient points here. The
ﬁrst, of course, which I stressed at the time,
is that address-based authentication is very
vulnerable to attack. I will return to this point
later. A second point is a threat I mention
later, but not in this context: if you know the
sequence numbers of an active session, you
can hijack it. This attack was implemented a
few years later by Joncheray [53].
A more important point (and this is one
made in [54]) is that the r-utilities are implic-
itly relying on TCP sequence numbers—and
hence on TCP session correctness—for se-
curity properties. However, TCP was never
designed to be a secure protocol, nor were
there ever any guarantees about the proper-
ties of the sequence number. The underly-
ing issue is this: what properties of a layer
are “exported” to a higher layer? Assuming
too much at any higher later is a mistake; it
can lead to correctness failurs as well as to
security failures. For that matter, it is neces-
sary to inquire even more closely, even of se-
quence numbers in a security protocol: what
properties are they guaranteed to have? Are
they simply packet sequence numbers, or
can they be used as, say, the initialization
vector for counter mode encryption [35]?
Was there a security problem? Yes, there
certainly was, as demonstrated graphically
a few years later in the Mitnick vs. Shimo-
mura incident. But the architectural ﬂaw was
the assumption that TCP sequence num-
bers had security properties which they did
not. (Ironically, I have Heard that analyses of
the security properties of sequence numbers
were, in fact, done in the classiﬁed world—
and they concluded that such attacks were
not feasible. . . )
The sequence number attack story isn’t
over. In 2004, Watson observed that TCP
reset packets were honored if the RST bit
was set on a packet whose initial sequence
number was anywhere within the receive win-
dow (see US-CERT Technical Cyber Security
Alert TA04-111A). On modern systems, the
receive window is ofen 32K bytes or more,
Proceedings of the 20th Annual Computer Security Applications Conference (ACSAC’04) 
1063-9527/04 $ 20.00 IEEE 
-3-.EST.OOPA---
FIN.FIN.--P----
FIN.FIN.--P----
-3-.EST.O-PAV--
-3-.EST.O-PAV--
JCN STATE
0,-1
6,6
6,5
0,21
0,2
Figure 1. Output from a TOPS-20 netstat command. Note the “send” and ”‘receive” sequence num-