# A Look Back at "Security Problems in the TCP/IP Protocol Suite"
## Author: Steven M. Bellovin
### AT&T Labs—Research
### Email: [Your Email]

#### Abstract
Approximately fifteen years ago, I authored a paper on security issues within the TCP/IP protocol suite, focusing specifically on protocol-level vulnerabilities rather than implementation flaws. This retrospective revisits that original work, evaluating the accuracy of my initial analysis and predictions, identifying where I was mistaken, and highlighting areas where potential threats remain unaddressed. The original paper is reprinted here with added commentary, which is presented in an indented sans-serif font. The original text remains largely unchanged, except for minor formatting adjustments made during the conversion from troff to LaTeX. References are preserved as they were, even if more recent sources may be available. Section numbers are consistent with the original, with the addition of a new "Conclusions" section.

#### 1. Introduction
The paper "Security Problems in the TCP/IP Protocol Suite" was first published in *Computer Communication Review*, Vol. 19, No. 2, in April 1989. It provided a protocol-level analysis, intentionally excluding implementation and operational issues. I believed, and still believe, that this approach was appropriate because while bugs and operational environments vary, protocol-level problems are more difficult to fix, especially when maintaining compatibility with existing systems.

This retrospective includes new commentary, which is shown in an indented sans-serif font. The original text is otherwise unchanged, except for possible errors introduced during the format conversion. The references and pagination have been updated, but the section numbers remain the same, with the addition of a new "Conclusions" section. Generally, the commentary follows the section it discusses.

To provide context, when I began working at Bell Labs Murray Hill in 1982, I took responsibility for two of the first three pieces of Ethernet cable in all of AT&T, then a large monopoly telephone company. Our lab had one cable, another lab had a second, and a "backbone" linked the two. This backbone expanded as other labs connected, eventually forming what we called the "Bell Labs Internet" or "R&D Internet," a term predating the neologism "Intranet."

Dedicated routers were rare, so we often used a second Ethernet board in a VAX or Sun machine for routing. This meant that the routing software (we used Berkeley’s routed) was accessible to system administrators. When issues arose, they were often due to misconfiguration. For example, someone once plugged a new workstation into the Murray Hill backbone instead of their department's network. The proprietary address assignment software on the machine, unable to find any address assignment servers, allocated the gateway router's address to itself. These incidents highlighted the potential for deliberate misuse of such vulnerabilities.

Several other events further focused my attention on security. Robert Morris' discovery of sequence number guessing attacks and the "Shadow Hawk" incident, where a teenager broke into various AT&T computers, underscored the need for a thorough analysis of TCP/IP security. By the time of the 1988 Internet worm, this paper was already in its current form, providing a detailed analysis of protocol-level security issues in TCP/IP.

The original paper was critiqued in [54], with some valid points and others I disagreed with. I chose not to publish a detailed rebuttal at the time, and I will not do so here. However, I have noted where my analysis was particularly incorrect. I stand by my overall conclusions, which I believe were substantially correct.

#### 1.1. Exclusions
This paper does not address implementation-specific flaws, such as those exploited by the Internet "worm" [95, 90, 38]. Instead, it focuses on generic protocol-level issues. Some of these protocols are derived from Berkeley’s version of UNIX, while others are standard Internet protocols. We also do not cover classic network attacks like physical eavesdropping or message alteration, unless facilitated by protocol vulnerabilities. Vendor-specific protocols are generally not discussed, except for Berkeley’s, which have become de facto standards for many vendors.

One criticism in [54] was that I lumped Berkeley-specific protocols with standardized ones. While I understood the difference, I did not clearly distinguish that address-based authentication, a major flaw, was specific to Berkeley’s software and not part of any official standard.

#### 2. TCP Sequence Number Prediction
One of the most intriguing security vulnerabilities was first described by Morris [70]. He used TCP sequence number prediction to construct a packet sequence without receiving responses from the server, allowing him to spoof a trusted host on a local network.

The normal TCP connection establishment involves a 3-way handshake:
- The client selects and transmits an initial sequence number (ISNc).
- The server acknowledges it and sends its own sequence number (ISNs).
- The client acknowledges ISNs.

Data transmission can then occur. Schematically, this is:
```
C → S : SYN(ISNc)
S → C : SYN(ISNs), ACK(ISNc)
C → S : ACK(ISNs)
C → S : data
and/or
S → C : data
```

For a conversation, C must first hear ISNs, a random number. If an intruder X could predict ISNs, it could impersonate a trusted host T:
```
X → S : SYN(ISNx), SRC = T
S → T : SYN(ISNs), ACK(ISNx)
X → S : ACK(ISNs), SRC = T
X → S : ACK(ISNs), SRC = T, nasty-data
```

Even though S → T does not go to X, X can know its contents and send data. If X performs this attack on a command-execution connection (e.g., the Berkeley rsh server), malicious commands can be executed.

How can ISNs be predicted? In Berkeley systems, the ISN variable increments by a constant amount per second and by half that amount each time a connection is initiated. Observing ISNs in a legitimate connection allows predicting the next ISN with high confidence.

Morris noted that the S → T message does not vanish; T receives it and attempts to reset the connection. Morris found that by impersonating a server port on T and flooding it with connection requests, he could generate queue overflows, likely causing the S → T message to be lost. Alternatively, one could wait until T was down for maintenance or a reboot.

I mischaracterized Morris’ method. While flooding can work, Morris actually exploited an implementation error in the Berkeley kernel, using fewer packets. This flaw, described in [10], received little attention and was not fixed for many years.

Sequence number attacks gained little attention until Kevin Mitnick used Morris’ idea to attack Tsutomu Shimomura [93], who then tracked down Mitnick.

A variant of this attack exploits the netstat service. An intruder impersonates a down host, and if netstat is available on the target, it may provide necessary sequence number information, eliminating the need for guessing. The Berkeley implementation of netstat was dangerous, listing open ports and connections, valuable to attackers. Fortunately, netstat was not available by default on 4.2BSD or 4.3BSD systems. TOPS-20 systems, still on the net, had a vulnerable netstat, which I refrained from mentioning to avoid aiding attackers.

Key points include:
- Address-based authentication is highly vulnerable.
- Knowing session sequence numbers allows session hijacking, as demonstrated by Joncheray [53].
- The r-utilities rely on TCP sequence numbers for security, assuming properties TCP was never designed to provide. This architectural flaw assumes too much about higher-layer properties, leading to both correctness and security failures.

There was indeed a security problem, as seen in the Mitnick vs. Shimomura incident. The fundamental issue was the assumption that TCP sequence numbers had security properties they did not. Analyses in classified settings concluded such attacks were not feasible, ironically.

The sequence number attack story continues. In 2004, Watson observed that TCP reset packets were honored if the RST bit was set on a packet whose ISN was within the receive window, which is often 32K bytes or more on modern systems.

![Figure 1. Output from a TOPS-20 netstat command. Note the “send” and “receive” sequence numbers.](path_to_image)

---

This revised version aims to improve clarity, coherence, and professionalism while preserving the original content and structure.