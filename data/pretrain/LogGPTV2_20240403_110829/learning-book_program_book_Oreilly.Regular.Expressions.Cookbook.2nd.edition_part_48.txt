it with cat dog), the next match attempt can’t peek to the left of its starting position
like lookbehind does. The regex matches the second cat cat, which is again replaced
with cat dog.
See Also
Recipe 5.4 explains how to find all except a specific word. Recipe 5.5 explains how to
find any word not followed by a specific word.
Techniques used in the regular expressions in this recipe are discussed in Chapter 2.
Recipe 2.3 explains character classes. Recipe 2.5 explains anchors. Recipe 2.6 explains
word boundaries. Recipe 2.9 explains grouping. Recipe 2.12 explains repetition.
Recipe 2.16 explains lookaround. It also explains , that would allow up to 15 words between the two you're looking
for, and require that they be separated by at least one other word.
The shorthand character classes that are used to match word characters and nonword
characters (cword1)1(?word2) )\w+(?:\a+\w+){0,5}？(?(w2) (?&1) 1 (?&w2))b
Regex options: None
Regexflavor: PCRE 7, Perl 5.10
Here, named capturing groups, written as - ), surround the first instances
of word1> and word2>., This allows you to use the  sazbrouzine syntax to reuse
a subpattern that is called by name. This does not work the same as a backreference to
a named group. A named backreference, such as \k (.NET, Java 7, XRegExp,
PCRE 7, Perl 5.10) or  (PCRE 4, Perl 5.10, Python) lets you rematch text
that has already been matched by a named capturing group. A subroutine such as (?
&name) allows you to reuse the actual patterm contained within the corresponding
group. You can't use a backreference here, because that would only allow rematching
words that have already been matched. The subroutines within the conditional at the
end of the regex match the word from the two provided options that hasn'r already
been matched, without having to spell out the words again. This means there is only
one place in the regex to update if you need to reuse it to match different words.
since Ruby 1.9 doesn’t support conditionals it can't run the regexes
Ruby 1.9 supports named subroutines using the syntax ), but
routines, but back then it used the syntax nase)>, which is now
in Perl 5.10 and PCRE 7. PCRE 7.7 added Ruby 1.9's suberoutine syntax
discouraged in favor of the Perl-compatible (?anase) that was added
as yet another supported altermative.
Match three or more words near each other
Exponentially increasing permutations. Matching two words near each other is a fairly
straightforward task. After all, there are only two possible ways to order them. But what
if you want to match three words in any order? Now there are six possible orders (see
Example 5-1). The number of ways you can shift a given set of words around is n!, or
350 | Chapter 5: Words, Lines, and Special Characters
---
## Page 367
the product of consecutive integers 1 through n (* factorial"). With four words, there
are 24 possible ways to order them. By the time you get to 10 words, the number of
arrangements explodes into the millions. It is simply not viable to match more than a
few words near each other using the regular expression techniques discussed so far.
The concepts in the rest of this section are among the most dense and
difficult to understand in the book. Proceed with your wits about you,
and don’t feel bad if it doesn’t all click on the first read-through.
The ugly solution. One way to solve this problem is by repeating a group that matches the
required words or any other word (after a required word has been matched), and then
using conditionals to prevent a match attempt from finishing successfully until all of
the required words have been matched. Following is an example of matching three
words in any order with up to five other words separating them:
\b(?: (?>(word)1(word2) 1(word3)1(?(1)1(?(2)1(?(3) 1(?!))))\w+)\b\w*>){3,8} 
(？(1)(?(2)(?(3)1(?!))1(?!))1(？!))
Regex options: Case insensitive
Regexflarers: .NET, PCRE, Perl
Example 5-I. Many ways fo arrange a set
Two values:
[12, 21 ]
= 2 possible arrangements
Three values:
[123, 132,
213, 231,
312, 321 ]
= 6 possible arrangements
Four values:
[1234, 1243, 1324, 1342, 1423, 1432,
2134, 2143, 2314, 2341, 2413, 2432,
3124, 3142, 3214, 3241, 3412, 3421,
4123, 4132, 4213, 4231, 4312, 4321 ]
= 24 possible arrangements
Factorials:
21 = 2 × 1
2
 ×  ×  = iE
4! = 4 × 3 × 2 × 1
24
6
5! = 5 × 4 × 3 × 2 × 1
120
10! = 10 × 9 × 8 × 7 × 6 × 5 × 4 × 3 × 2 × 1 = 3628800
5.7 Find Words Mear Each 0ther 1 351
---
## Page 368
Here again is the regex, except that the atomic group (see Recipe 2.14) has been replaced
by a standard, noncapturing group. This adds support for Python at the cost of some
efficiency:
\b(?: (?: (word)1(word2) 1(word3)1(?(1)1(?(2)1(?(3) 1(?!))))\w+)\b\w*>){3,8} 
(?(1)(?(2)(?(3)1(?!))1(?!))1(？!))
Regexoptions: Case insensitive
Regexflavers: .NET, PCRE, Perl, Python
The {3,8} quantifiers in the regular expressions just shown account for the three
required words, and thus allow zero to five words in berween them. The empty negative
lookaheads, which look like (?!), will never match and are therefore used to block
certain paths through the regex until one or more of the required words have been
matched. The logic that controls these paths is implemented using two sets of nested
conditionals. The first set prevents matching any old word using word1 () |word2() |word3()1 (?>\1|2| \3)\w+)\b\w*){3,8)\1,23
Regexoptions: Case insensitive
Regexflavers: .NET, Java, PCRE, Perl, Ruby
\b(?: (?:ord1() |word2()|woxd3()1 (?:\1|2|\3)\w+)\b\w*)(3,8)\1,23
Regex options: Case insensitive
Regexflavers: .NET, Java, PCRE, Perl, Python, Ruby
Using this construct, it’s easy to add more required words. Here's an example that
allows four required words to appearin any order, with a total of up to five other words
berween them:
352 | Chapter5: Words, Lines, and Special Characters
---
## Page 369
b(?: (?>word1()|word2()|word3() |word4() |
(?>\1 /2|3|\4)\a+)\b\w*){4,9)\1234
Regex options: Case insensitive
Regexflavers: .NET, Java, PCRE, Perl, Ruby
\b(?: (?:word1()|word2()|word3()|word4()|
(？:\1 /2|3\4)\a+)\b\w*){4,9)\123\4
Regex options: Case insensitive
Regexflaver: .NET, Java, PCRE, Perl, Python, Ruby
These regular expressions intentionally use empty capruring groups after each of the
required words Since any attempt to match abackreference such as 1 willfil if the
sauaapaaxoeq *qpseu au u! pa1edored 1as 1ou seq dnou Suumdeo Bupuodsauos
much like the more verbose conditionals we showed earlier. If the corresponding group
to empty groups can be used to control the path a regex engine takes through a patterm,
has already participated in the match attempt when the engine reaches the backrefer-
ence, it will simply match the empty string and move on.
Here, the \1|\2|3) grouping prevents matching a word using  would
5.7 Find Words Near Each Other | 353
---
## Page 370
still match ab, but backreference 1 after the match is complete would reference a non-
participating capruring group, which in JavaScripr would match an empty string within
the regex itself and be returned as undefined in, for example, the array returned by the
regexp-exec() method.
Either of these behavioral differences found in the JavaScript regex flavor are enough
to prevent emulating conditionals using empty capruring groups, as described here.
Multiple words, any distance from each other
If you simply want to test whether a list of words can be found anywhere in a subject
string without regard for their proximity, positive lookahead provides a way to do so
using one search operation.
In many cases it’s simpler and more efficient to perform discrete search-
es for each term you're looking for, while keeping track of whether all
^(?=, *?\bword1\b)(?=, *?\bmord2\b) *
Regex options: Case insensitive, dot matches line breaks (* ^ and $ match at line
breaks” must not be set)
Regexflavers: .NET, Java, XRegExp, PCRE, Perl, Python, Ruby
^(?=[\s\S]*?\bword1\b) (?=[sS]*>\bnord2\b)[\s\S]*
Regexoptions: Case insensitive ("^ and S match at line breaksa must not be set)
Regexflavers: NET, Java, JavaScript, PCRE, Perl, Python, Ruby
These regular expressions match thentire sring theyre run against if all of your target
words are found within it; otherwise, they will not find any match. JavaScript pro-
grammers cannot use the first version unless using the XRegExp library, because stan-
dard JavaScript doesn’t support the “dot matches line breaks” option.
You can implement these regular expressions by following the code in Recipe 3.6. Sim-
ply change the word1> and word2> placeholders to the terms you're searching for. If
you’re checking for more than rwo words, you can add as many lookaheads to the front
of the regex as you need. For example,  searches for three words.
SeeAlso
Recipe 5.5 explains how to find any word not followed by a specific word. Recipe 5.6
explains how to find any word not preceded by a specific word.
Techniques used in the regular expressions in this recipe are discussed in Chapter 2
Recipe 2.3 explains character classes. Recipe 2.6 explains word boundaries.
Recipe 2.8 explains alternation. Recipe 2.9 explains grouping. Recipe 2.10 explains
354 I Chapter 5: Words, Lines, and Special Characters
---
## Page 371
backreferences. Recipe 2.11 explains named capruring groups. Recipe 2.12 explains
repetition. Recipe 2.14 explains atomic groups. Recipe 2.17 explains conditionals.
5.8FindRepeatedWords
Problem
You're editing a document and would like to check it for any incorrectly repeated
as with *The the." You also want to allow differing amounts of whitespace berween
words. You want to find these doubled words despite capitalization differences, such
words, even if this causes the words to extend across more than one line. Any separating
punctuation, however, should cause the words to no longer be treated as if they are
repeating.
Solution
A backreference matches something that has been matched before, and therefore pro-
vides the key ingredient for this recipe:
b([A-Z]+)\s+\1\b
Regex options: Case insensitive
Regexflaver: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
If you want to use this regular expression to keep the first word but remove subsequent
duplicate words, replace all matches with backreference 1. Another approach is to
highlight matches by surrounding them with other characters (such as an HTML tag) ,
so you can more easily identify them during later inspection. Recipe 3.15 shows how
you can use backreferences in your replacement text, which you'll need to do to im-
plement either of these approaches.
If you just want to find repeated words so you can manually examine whether they