### USENIX Association
**25th USENIX Security Symposium**

#### References
1. [41] Kevin Walsh and Fred B. Schneider. "Costs of Security in the PFS File System." Technical Report, Computing and Information Science, Cornell University, 2012.
2. [42] Wikimedia Foundation. "Image Dump." <http://archive.org/details/wikimedia-image-dump-2005-11>
3. [43] Wikimedia Foundation. "Static HTML Dump." <http://dumps.wikimedia.org/>
4. [44] Wikipedia. "Data Breach: Major Incidents." <http://en.wikipedia.org/wiki/Data_breach#Major_incidents>
5. [45] Edward Wobber, Martín Abadi, Michael Burrows, and Butler Lampson. "Authentication in the Taos Operating System." ACM Transactions on Computer Systems (TOCS), 12(1), 1994.
6. [46] Alexander Yip, Xi Wang, Nickolai Zeldovich, and M. Frans Kaashoek. "Improving Application Security with Data Flow Assertions." In Proceedings of the ACM SIGOPS 22nd Symposium on Operating Systems Principles (SOSP), 2009.
7. [47] Nickolai Zeldovich, Silas Boyd-Wickizer, Eddie Kohler, and David Mazières. "Making Information Flow Explicit in HiStar." In Proceedings of the 7th USENIX Symposium on Operating Systems Design and Implementation (OSDI), 2006.
8. [48] Qing Zhang, John McCullough, Justin Ma, Nabil Schear, Michael Vrable, Amin Vahdat, Alex C. Snoeren, Geoffrey M. Voelker, and Stefan Savage. "Neon: System Support for Derived Data Management." In Proceedings of the 6th ACM SIGPLAN/SIGOPS International Conference on Virtual Execution Environments (VEE), 2010.

### Appendix: Thoth Policies for Data Flows in a Search Engine

In this appendix, we provide details of the policies used in our Thoth-compliant search engine. All policies are represented in the read, update, and declassify rules on source conduits (documents that the search engine indexes, user profiles, etc.). We describe these rules incrementally, starting from a set of base rules, which we refine to include more policies.

#### Base Rules
Our base rules allow anyone to read, update, or destroy the source conduit they are attached to.

```plaintext
read :- TRUE
update :- TRUE
destroy :- TRUE
declassify :- isAsRestrictive(read, this.read) until FALSE
```

The `read`, `update`, and `destroy` rules have the condition `TRUE`, which always holds, so these rules do not restrict access at all. The `declassify` rule ensures that the `read` rule on any conduit containing data derived from the source conduit is at least as restrictive as the `read` rule above, which will always be the case (because the `read` rule above is the most permissive `read` rule possible). This base policy is pointless in itself but serves as the starting point for the remaining policies.

#### A.1 Client Policies
First, we describe policies to represent client privacy preferences.

##### Private Data Policy
A user, Alice, may wish that her private files (e.g., her emails) be accessible only to her. This can be enforced by requiring that accesses to Alice's private files happen in the context of a session authenticated with Alice's key. Technically, this is accomplished by replacing the conditions in the base `read`, `update`, and `destroy` rules as shown below and attaching the resulting rules to Alice's private files. The predicate `sKeyIs(k)` means that the current session is authenticated using the public key `k`.

```plaintext
read :- sKeyIs(kAlice)
update :- sKeyIs(kAlice)
destroy :- sKeyIs(kAlice)
```

The `declassify` rule remains unchanged. It ensures that any conduit containing data derived from Alice's private files is subject to a `read` rule that is at least as restrictive as the revised `read` rule above. Hence, no such conduit can be read by anyone other than Alice.

##### Friends Only Policy
Alice might want her blog and online social network profile to be readable by her friends. To do this, she could add a disjunctive ("or"-separated) clause in the `read` rule requiring that read accesses happen in the context of a session authenticated with a key `kX` of one of Alice's friends. Alice's friends are assumed to be listed in the file `Alice.acl`, which contains an entry of the form `isFriend(kX, XACL)` for each public key `kX` that belongs to a friend of Alice. The `isFriend` entry also states the file `XACL` which lists the friends of the key `kX`'s owner. Note that the `isFriend` entry format presented in the paper was slightly simplified for readability.

```plaintext
read :- sKeyIs(kAlice) ∨
[sKeyIs(kX) ∧ (“Alice.acl”, off) says isFriend(kX, XACL)]
```

The predicate `("Alice.acl", off) says isFriend(kX, XACL)` checks that `kX` exists in the list of Alice's friends (file "Alice.acl") at some offset `off`.

##### Friends of Friends Policy
To additionally allow read access to friends of friends, the policy would require read accesses to happen in the context of an authenticated session whose key is present in the friend list of any of Alice's friends.

```plaintext
read :- sKeyIs(kAlice) ∨
[sKeyIs(kX) ∧ (“Alice.acl”, off) says isFriend(kX, XACL)] ∨
[sKeyIs(kY) ∧ (“Alice.acl”, off1) says isFriend(kX, XACL) ∧
(XACL, off2) says isFriend(kY, YACL)]
```

The predicate `("Alice.acl", off1) says isFriend(kX, XACL)` checks that `kX` exists in the list of Alice's friends (file "Alice.acl") at some offset `off1`. It also binds the variable `XACL` to the friend list of the key `kX`'s owner. The predicate `(XACL, off2) says isFriend(kY, YACL)` checks that the public key `kY` that authenticated the session exists in the list of friends for the `kX`'s owner at some offset `off2`.

#### A.2 Provider Policies
Next, we describe two policies that a provider may wish to impose, possibly to comply with legal requirements.

##### Mandatory Access Logging (MAL)
The MAL policy allows an authorized employee of the provider read access to a source conduit `F` if the access is logged. The log entry must have been previously written to the file `k.log`, where `k` is the public key of the employee. The log entry must mention the employee's key, the ID of the accessed conduit, and the time at which the conduit is accessed with a tolerance of 60 seconds. To enforce these requirements, a new disjunctive condition is added to the last `read` rule above. The `...` in the rule below abbreviate the conditions of the last `read` rule above.

```plaintext
read :- ... ∨
sKeyIs(k) ∧ cIdIs(F) ∧
("auth_employees", off) says isEmployee(k) ∧
(LOGk = concat(k, ".log")) ∧
(LOGk, off1) says readLog(k, F, T) ∧ timeIs(curT) ∧
gt(curT, T) ∧ sub(diff, curT, T) ∧ lt(diff, 60)
```

The predicate `sKeyIs(k)` binds the public key that authenticated the session (i.e., the public key of the employee) to the variable `k`, and `cIdIs(F)` binds the name of the source conduit `F`. The predicate `("auth_employees", off) says isEmployee(k)` checks that `k` exists in the list of authorized employees (file "auth_employees") at some offset `off`, to verify that the source conduit's reader is really an employee. Next, `LOGk` is bound to the name of the employee's log file, `k.log`. The predicate `(LOGk, off1) says readLog(k, F, T)` checks that the log file contains an appropriate entry with some timestamp `T`, and the remaining predicates check that the current time, `curT`, satisfies `T ≤ curT ≤ T + 60s`.

Every log file has a `read` rule that allows only authorized auditors to read the file (the public keys of all authorized auditors are assumed to be listed in the file "auditors"). It also has an `update` rule that allows appends only, thus ensuring that a log entry cannot be removed or overwritten.

```plaintext
read :- sKeyIs(k) ∧ ("auditors", off) says isAuditor(k)
update :- sKeyIs(k) ∧
("auth_employees", off) says isEmployee(k) ∧
cCurrLenIs(cLen) ∧ cNewLenIs(nLen) ∧
gt(nLen, cLen) ∧ (this, 0, cLen) hasHash(h) ∧
(this, 0, cLen) willHaveHash(h)
```

In the append-only policy (rule `update` above), the predicate `cCurrLenIs(cLen)` binds the current length of the log file to `cLen` and the predicate `cNewLenIs(nLen)` binds the new length of the log file to `nLen`. Next, the predicate `gt(nLen, cLen)` ensures that the update only increases the log file's length. The predicates `hasHash` and `willHaveHash` are used to verify that the existing file content is not modified during an update by checking that the hashes of the file from offset 0 to `cLen`, originally and after the prospective update, are equal.

A more efficient implementation of the append-only policy could rely on a specialized predicate `unmodified(off, len)`, which checks that the conduit contents from offset `off` with length `len` were not modified. The `update` rule could then be simplified to:

```plaintext
update :- sKeyIs(k) ∧
("auth_employees", off) says isEmployee(k) ∧
cCurrLenIs(cLen) ∧ cNewLenIs(nLen) ∧
gt(nLen, cLen) ∧ unmodified(0, cLen)
```

##### Region-based Censorship
Legal requirements may force the provider to blacklist certain source files in certain regions. Accordingly, the goal of the censorship policy is to ensure that content from a document `F` can only reach users in regions whose blacklists do not contain `F`. The policy relies on a mapping from IP addresses to regions and a per-region blacklist file. The blacklist file is maintained in a sorted order to efficiently lookup whether it contains a given document or not.

The censorship policy is expressed by modifying the `declassify` rule of every source conduit `cndID` as follows:

```plaintext
declassify :- isAsRestrictive(read, 
(CENSOR(cndID) ∧ isAsRestrictive(read, 
this.read) until this.read))
```

The rule says that the `read` rule on any conduit to which `cndID` flows must be as restrictive as `cndID`'s `read` rule until a conduit at which the condition `CENSOR(cndID)` holds is reached. `CENSOR(cndID)` is a macro defined below. The predicate `sIpIs(IP)` checks that the IP address of the connecting (remote) party is `IP` and the predicate `IpPrefix(IP, R)` means that `IP` belongs to region `R`. The blacklist file for region `R` is `R.BlackList`. In words, `CENSOR(cndID)` means that the remote party's IP belongs to a region `R` and `cndID` lies strictly between two consecutive entries in `R`'s blacklist file (and, hence, `cndID` does not exist in `R`'s blacklist file).

```plaintext
sIpIs(IP) ∧ IpPrefix(IP, R) ∧
(FBL = concat(R, ".BlackList")) ∧
(FBL, off1) says isCensored(cnd1) ∧
add(off2, off1, CENSOR_ENTRY_LEN) ∧
(FBL, off2) says isCensored(cnd2) ∧
lt(cnd1, cndID) ∧ lt(cndID, cnd2)
```

#### A.3 Search Engine Flows
##### Indexing Flow
The indexer reads documents with possibly contradictory policies and, in the absence of a dedicated provision for declassification, the index (and any documents derived from it) cannot be served to any client. To prevent this problem, searchable documents allow typed declassification. The `declassify` rule for each searchable document is modified with a new clause that allows complete declassification into an (internal) conduit whose `update` rule allows the conduit to contain only a list of object IDs. The modified `declassify` rule of each source document has the form:

```plaintext
declassify :- ... until (... ∨ (cIsIntrinsic ∧
isAsRestrictive(update, ONLY_CND_IDS)))
```

The macro `ONLY_CND_IDS` stipulates that only a list of valid conduit IDs can be written and it expands to:

```plaintext
cCurrLenIs(cLen) ∧ cNewLenIs(nLen) ∧
each in(this, 0, nLen) says(cndId) {cIdExists(cndId)}
```

In the macro above, the predicate `cNewLenIs(nLen)` binds the new length of the output file to `nLen`. The predicate `willsay` checks that the content update from offset 0 and length `nLen` is a list of conduit IDs, and the predicate `cIdExists(cndId)` checks that `cndId` corresponds to an existing conduit.

So far, we have assumed that the conduit IDs are not themselves confidential. If the presence or absence of a particular conduit ID in the search results may leak sensitive information, then the source declassification policy can be augmented to require that the list of conduit IDs is accessible only to a principal who satisfies the confidentiality policies of all listed conduits. Then, the macro `ONLY_CND_IDS` can be re-written to:

```plaintext
cCurrLenIs(cLen) ∧ cNewLenIs(nLen) ∧
each in(this, 0, nLen) willsay(cndId) {cIdExists(cndId) ∧
hasPol(cndId, P) ∧
isAsRestrictive(read, P.read) ∧
isAsRestrictive(declassify, P.declassify)}
```

Additionally, in the macro above, the predicate `hasPol(cndId, P)` binds `P` to the policy of the conduit `cndId`, and the predicate `isAsRestrictive(read, P.read)` requires that the confidentiality of the list of conduit IDs is as restrictive as the confidentiality requirements of the source conduit IDs themselves.

##### Profile Aggregation Flow
Since raw user activity logs are typically private, a declassification is required that enables a profile generator to produce a user preferences vector (a vector of fixed length) from the activity logs. However, this preferences vector must further be restricted so that it can be used to produce only a list of conduit IDs (the search results). Further, the user might also want to ensure that only activity logs generated in the past 48 hours be used for personalization. This can be achieved by allowing the declassification into the fixed-size vector to happen only within 172800 seconds of the log's creation. Suppose an activity log is created at time `t` and that the preferences vector has length `n`. Then, the relevant policy rules on the activity log are the following (note that `t` and `n` are constants, not variables).

```plaintext
read :- sKeyIs(kAlice)
declassify :- [isAsRestrictive(read, 
this.read) until
isAsRestrictive(update, ONLY_FLOATS(n)) ∧
cIsIntrinsic ∧ timeIs(curT) ∧ gt(curT, t) ∧
sub(diff, curT, t) ∧ lt(diff, 172800)] ∧
[isAsRestrictive(read, 
this.read) until cIsIntrinsic ∧
isAsRestrictive(update, ONLY_CND_IDS)]
```

This policy ensures that the raw user logs can only be transformed into the user preferences vector, which in turn can only be declassified into the search results of the search engine.

The macro `ONLY_FLOATS(n)` stipulates that only a vector of `n` floats can be written. It expands to:

```plaintext
cNewLenIs(nLen) ∧
each in(this, 0, nLen) willsay(value) {vType(value, FLOAT) ∧ eq(Cnt, n)}
```

In the macro above, the predicate `cNewLenIs(nLen)` binds the new length of the output file to `nLen`. The predicate `willsay` checks that the content update from offset 0 and length `nLen` is a list of values, and the predicate `vType(value, FLOAT)` checks that each value in the list is of type `FLOAT`. The predicate `eq(Cnt, n)` checks that the update contains `n` floats.