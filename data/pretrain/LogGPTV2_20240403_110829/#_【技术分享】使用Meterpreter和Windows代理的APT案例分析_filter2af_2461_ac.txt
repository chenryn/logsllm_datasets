    else if (ieConfig.lpszAutoConfigUrl)
    {
    dprintf("[PROXY] IE config set to autodetect with URL %S", ieConfig.lpszAutoConfigUrl);
    autoProxyOpts.dwFlags = WINHTTP_AUTOPROXY_CONFIG_URL;
    autoProxyOpts.dwAutoDetectFlags = 0;
    autoProxyOpts.lpszAutoConfigUrl = ieConfig.lpszAutoConfigUrl;
    }
    autoProxyOpts.fAutoLogonIfChallenged = TRUE;
       if (WinHttpGetProxyForUrl(ctx->internet, ctx->url, &autoProxyOpts, &proxyInfo))
    ...
代码修改完毕后，我们重新编译工程文件，将生成的metsrv Meterpreter DLL文件拷贝到监听端主机上，再次运行监听端，等待客户端连接。
监听端在攻击者主机上的运行情况如下图所示：
从上图可知，当受害者主机使用“自动探测”代理选项时（本例中使用的是DHCP的252选项），我们能够成功建立Meterpreter会话。
**三、分析问题的根本原因**
文章阅读至此，现在是时候讨论以下这些问题了：
1、为什么最开始时，传输器载荷能够到达攻击者主机？
2、传输器载荷与传输体载荷在通信上有什么区别？
为了找到这些问题的答案，我们首先需要理解Meterpreter（在本文撰写时）的工作机制。
Windows
API提供了两种方式（或接口）与HTTP(s)进行交互：WinInet以及WinHTTP。对于Meterpreter而言，我们需要关注它在处理HTTPs通信时的两个功能：
1、Meterpreter可以验证HTTPs服务器（即运行在攻击者主机上的Metasploit监听端）所提供的证书签名，避免代理设备（如L7网络防火墙）检查其通信内容。
2、Meterpreter可以透明地使用当前用户的代理设置，通过互联网访问监听端。
这两个功能无法同时在同一个Windows API中找到，具体如下：
**WinInet：**
1、可以透明感知代理。也就是说，如果当前用户系统的代理设置适用于Internet
Explorer浏览器，那么这个设置对使用WinInet的程序来说同样适用。
2、不支持SSL/TLS证书的自定义验证。
**WinHTTP：**
1、允许自定义验证服务器所提供的SSL证书。
2、不能透明地使用当前用户的系统代理设置。
现在，对于Meterpreter而言，我们可以使用两种不同的传输器载荷：
1、Meterpreter的reverse_https载荷。该载荷使用的是WinInet这个Windows
API，这意味着它不能验证服务器证书，但可以透明地使用系统代理。也就是说，如果用户可以通过IE浏览器访问互联网，那么这个传输器载荷也可以。
2、Meterpreter的reverse_winhttps载荷。该载荷使用的是WinHTTP这个Windows
API，这意味着它可以验证服务器证书，但必须手动设置代理信息才能访问互联网。
对Meterpreter传输体载荷来说，默认情况下它使用的是WinHTTP Windows API，如果出现问题则会切换为使用WinInet
API（读者可以阅读官方文档，查看旧版本中如何判断代理是否存在问题）。这种切换是自动发生的，除非用户决定使用“paranoid”（偏执）模式，这种模式优先级较高。
请注意：对于Meterpreter而言，使用“paranoid”模式意味着SSL/TLS证书签名必须被验证，如果证书签名被替换（比如，Palo
Alto网络防火墙会替换证书以检查通信内容），那么传输体载荷就不会被下载，当然会话也无法成功建立。如果用户确实需要使用“paranoid”模式，那么传输器载荷就必须使用WinHTTP这个Windows
API。
现在对于这个问题，我们已经掌握了必要的背景知识。之前我使用的是“reverse_https”
Meterpreter载荷（出于测试目的，没有使用“paranoid”模式），这意味着传输器载荷使用的是WinInet
API来访问监听端，也就是说它透明地使用了当前用户的代理设置，可以正常工作。然而，Meterpreter传输体载荷默认使用的是WinHTTP
API，根据我们前面的分析结论，这个载荷在处理代理时有个bug，因此无法回连到攻击者主机上的监听端。我想这足以回答我们前面提出来的两个问题。
**四、代理识别方法**
我们并没有回答另外一个问题，那就是：在使用WinHTTP Windows API时，获取当前用户代理设置的最佳方法是什么？
为了回答这个问题，我们需要探索系统在处理代理时的优先级。当系统中配置了多个代理的情况下，如果某个代理无法正常工作，Windows如何处理这种情况（即Windows是否会尝试另一个代理选项）。
根据我的研究结论，代理设置的优先级与Internet选项中设置的代理顺序一致。也就是说，系统首先会检查“自动检测设置”选项是否已设置，然后再检查“使用自动配置脚本”选项是否已设置，最后再检查“为LAN使用代理服务器”选项是否设置。
此外，我们可以在微软MSDN的“开发者代码示例”中，找到使用WinHTTP API的示例代码，其中关于代理的优先级，有这样一段说明：
    // WinHTTP API会按照以下顺序检测代理： 
     // 1) 自动检测
    // 2) 自动配置的URL
    // 3) 静态配置的代理
这个说明跟我们前面提到的代理优先级一样。
**五、容错机制**
前面我们提到的问题是，假设当前主机配置了多个代理选项，如果某个优先选项失效了，结果会如何？Windows是否会按照优先级继续尝试下一选项，直到找到一个可用的代理？
为了回答这个问题，我们可以做个简单的实验，或者花无数个小时，逆向分析与代理有关的Windows组件（主要是wininet.dll）。我们可以先尝试做个实验，至少这个过程花费的时间没那么多。
**5.1 实验环境**
为了进一步分析Windows的代理设置及功能，我创建了如下的实验环境：
使用1台域控的Windows域环境：
1、域：lab.bransh.com
2、域控IP：192.168.0.1
3、DHCP地址范围：192.168.0.100–150
3个微软Forefront TMG（Thread Management Gateway）服务器：
1、tmg1.lab.bransh.com：192.168.0.10
2、tmg2.lab.bransh.com：192.168.0.11
3、tmg3.lab.bransh.com：192.168.0.12
每个TMG服务器都有两个网络接口：“内部（internal）”接口（地址范围为192.168.0.x）连接到域中，客户端可以通过这个接口访问互联网。“外部（external）”接口连接到另一个网络，代理使用这个接口直接访问互联网。
1台Windows主机（Windows 8.1 x64）：
1、通过DHCP获取IP地址
2、代理设置情况：
（1）通过DHCP获取的代理（252选项）：tmg1.lab.bransh.com
（2）通过脚本配置的代理：http://tmg2.lab.bransh.com/wpad.dat
（3）手动设置的代理：tmg3.lab.bransh.com:8080
3、Windows主机无法直接访问互联网
4、Firefox浏览器设置为使用系统代理
Windows主机的代理设置情况如下图所示：
通过DHCP（252选项）获取的代理信息如下图所示：
请注意：“自动检测设置”选项可以通过DHCP或DNS获取代理信息。我们在使用Windows API时，可以指定使用哪种（或者同时使用两种）方式获取代理信息。
我们可以编写一段简单的代码，使用Windows提供的API，测试几种代理场景。我先写了一段Python代码，因为这样我可以更加简单地修改和运行代码，而不需要像C/C++代码那样每次修改后都需要重新编译。读者可以根据自己的喜好选择喜欢的语言完成这一任务。
Python代码如下：
    import ctypes
    import ctypes.wintypes
    import sys
    class WINHTTP_CURRENT_USER_IE_PROXY_CONFIG(ctypes.Structure):
        _fields_ = [("fAutoDetect", ctypes.wintypes.BOOL),
                    ("lpszAutoConfigUrl", ctypes.wintypes.LPWSTR),
                    ("lpszProxy", ctypes.wintypes.LPWSTR),
                    ("lpszProxyBypass", ctypes.wintypes.LPWSTR)]
    class WINHTTP_AUTOPROXY_OPTIONS(ctypes.Structure):
        _fields_ = [("dwFlags", ctypes.wintypes.DWORD),
                    ("dwAutoDetectFlags", ctypes.wintypes.DWORD),
                    ("lpszAutoConfigUrl", ctypes.wintypes.LPCWSTR),
                    ("lpvReserved", ctypes.c_void_p),
                    ("dwReserved", ctypes.wintypes.DWORD),
                    ("fAutoLogonIfChallenged", ctypes.wintypes.BOOL)]
    class WINHTTP_PROXY_INFO(ctypes.Structure):
        _fields_ = [("dwAccessType", ctypes.wintypes.DWORD),
                    ("lpszProxy", ctypes.wintypes.LPCWSTR),
                    ("lpszProxyBypass", ctypes.wintypes.LPCWSTR)]
    WINHTTP_USER_AGENT = ctypes.c_wchar_p('Mozilla/5.0 (Windows NT 6.3; Trident/7.0; rv:11.0) like Gecko')
    WINHTTP_ACCESS_TYPE_DEFAULT_PROXY = 0
    WINHTTP_ACCESS_TYPE_NO_PROXY = 1
    WINHTTP_ACCESS_TYPE_NAMED_PROXY = 3
    WINHTTP_NO_PROXY_NAME = 0
    WINHTTP_NO_PROXY_BYPASS = 0
    def ShowLastError(message, alignment = 0):
        error_id = ctypes.GetLastError()
        print ' ' * alignment + '[-] Error on %s: %s' % (message, error_id)
        if error_id == 12167:
            title = 'ERROR_WINHTTP_UNABLE_TO_DOWNLOAD_SCRIPT'
            message = 'The PAC file cannot be downloaded. For example, the server referenced by the PAC URL may not have been reachable, or the server returned a 404 NOT FOUND response.'
        elif error_id == 12007:
            title = 'ERROR_WINHTTP_NAME_NOT_RESOLVED'
            message = 'The server name cannot be resolved.'
        elif error_id == 12029:
            title = 'ERROR_WINHTTP_CANNOT_CONNECT'
            message = 'Returned if connection to the server failed.'
        elif error_id == 12002:
            title = 'ERROR_WINHTTP_TIMEOUT'
            message = 'The request has timed out.'
        elif error_id == 12180:
            title = 'ERROR_WINHTTP_AUTODETECTION_FAILED'