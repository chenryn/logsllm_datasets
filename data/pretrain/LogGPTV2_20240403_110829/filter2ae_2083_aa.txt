本文章将讲解如何使用 Golang 来实现恶意的 dll 劫持转发
## dll 转发概述
dll 转发: 攻击者使用恶意dll替换原始dll，重命名原始dll并通过恶意dll将原先的功能转发至原始dll。
该恶意dll一般用来专门执行攻击者希望拦截或修改的功能，同时将所有其他功能转发至原始dll
一般可与 dll 劫持共同使用。
### dll 搜索顺序
首先我们来看一下 Windows 系统中 dll 的搜索顺序
上图中攻击者可以控制的就是 **标准搜索顺序** 中的步骤，根据情况的不同我们可以选择不同的方式来进行 dll 劫持
### 步骤
要实现 dll 转发，一般需要以下一些步骤
  1. 解析原始 dll 的导出表
  2. 收集出要拦截修改的函数
  3. 在恶意 dll 中实现拦截功能
  4. 将所有其他函数转发至原始 dll 上
  5. 重命名原始 dll
  6. 使用原始 dll 的名称重命名恶意 dll
## PE 文件导出表
### 什么是 PE 导出表？
导出表就是当前的 PE 文件提供了哪些函数给别人调用。
并不只有 dll 才有导出表，所有的 PE 文件都可以有导出表，exe 也可以导出函数给别人使用，一般情况而言 exe 没有，但并不是不可以有
### 导出表在哪里？
PE 文件格式在这里并不进行详细介绍，感兴趣的读者可以自行查阅相关资料。
PE 文件包含 DOS 头和 PE 头，PE
头里面有一个扩展头，这里面包含了一个数据目录（包含每个目录的VirtualAddress和Size的数组。目录包括：导出、导入、资源、调试等），从这个地方我们就能够定位到导出表位于哪里
### 导出表的结构
接下来我们看看导出表的结构
    typedef struct _IMAGE_EXPORT_DIRECTORY {
        DWORD   Characteristics;
        DWORD   TimeDateStamp;      //时间戳.  编译的时间. 把秒转为时间.可以知道这个DLL是什么时候编译出来的.
        WORD    MajorVersion;
        WORD    MinorVersion;
        DWORD   Name;           //指向该导出表文件名的字符串,也就是这个DLL的名称  辅助信息.修改不影响  存储的RVA 如果想在文件中查看.自己计算一下FOA即可.
        DWORD   Base;           // 导出函数的起始序号
        DWORD   NumberOfFunctions;     //所有的导出函数的个数
        DWORD   NumberOfNames;         //以名字导出的函数的个数
        DWORD   AddressOfFunctions;     // 导出的函数地址的 地址表  RVA  也就是 函数地址表  
        DWORD   AddressOfNames;         // 导出的函数名称表的  RVA      也就是 函数名称表
        DWORD   AddressOfNameOrdinals;  // 导出函数序号表的RVA         也就是 函数序号表
    } IMAGE_EXPORT_DIRECTORY, *PIMAGE_EXPORT_DIRECTORY;
我们使用cff explorer看看dll的导出表
可惜从这个图上我们并不能观察出导出的函数是否是一个转发函数，我们使用16进制编辑器打开看看
从这个图上我们可以看到 add 导出函数前面还有一些东西 `_lyshark.dll._lyshark.add.add`
这个标识告诉我们这个 dll 的导出函数 add 实际上位于 _lyshark.dll 上
## dll 转发如何工作
当我们调用转发函数时，Windows加载程序将检查该 dll（即恶意 dll）所引用的 dll（即原始dll）是否已加载，如果引用的 dll
还没有加载到内存中，Windows加载程序将加载这个引用的 dll，最后搜索该导出函数的真实地址，以便我们调用它
## dll 转发（dll 劫持）的一般实现
我们能在网上搜索到一些 dll 转发（dll 劫持）的实现，基本是使用微软 MSVC 编译器的特殊能力4
MSVC 支持在 cpp 源文件中写一些链接选项，类似
    #progma comment(linker, "/export:FUNCTION_NAME=要转发的dll文件名.FUNCTION_NAME")
### 列出导出函数
下面我们采用 MSVC 对 zlib.dll 实现一个样例5
首先我们能使用 [DLL Export
Viewer](http://www.nirsoft.net/utils/dll_export_viewer.html) 工具查看并导出一个 dll
的导出表
然后我们点击 `View > HTML Report - All Functions`
我们可以得到一个类似于下面的 html
### 给 MSVC 链接器生成导出指令
我们现在可以把这个 html 转化为 MSVC 的导出指令5
    """
    The report generated by DLL Exported Viewer is not properly formatted so it can't be analyzed using a parser unfortunately.
    """
    from __future__ import print_function
    import argparse
    def main():
        parser = argparse.ArgumentParser(description="DLL Export Viewer - Report Parser")
        parser.add_argument("report", help="the HTML report generated by DLL Export Viewer")
        args = parser.parse_args()
        report = args.report
        try:
            f = open(report)
            page = f.readlines()
            f.close()
        except:
            print("[-] ERROR: open('%s')" % report)
            return
        for line in page:
            if line.startswith(""):
                cols = line.replace("", "").split("")
                function_name = cols[1]
                ordinal = cols[4].split(' ')[0]
                dll_orig = "%s_orig" % cols[5][:cols[5].rfind('.')]
                print("#pragma comment(linker,\"/export:%s=%s.%s,@%s\")" % (function_name, dll_orig, function_name, ordinal))
    if __name__ == '__main__':
        main()
然后我们可以获得这样的输出
下面的具体怎么生成不再进行介绍，如果感兴趣可以查看 [Windows Privilege Escalation - DLL
Proxying](https://itm4n.github.io/dll-proxying/) 或
[基于AheadLib工具进行DLL劫持](https://www.write-bug.com/article/1883.html)
## dll 转发（dll 劫持）的 mingw 实现
如果有的人和我一样，不喜欢安装庞大的 Visual Studio，习惯用 gcc mingw 来完成，我们也是能够完成的
### def 文件介绍
这里我们使用 [gcc](https://gcc.gnu.org/) 编译器和
[mingw-w64](http://mingw-w64.org/doku.php)（这个是mingw的改进版）
此处我们不再采用直接把链接指令写入代码源文件的方式，而是采用[模块定义文件](https://docs.microsoft.com/en-us/cpp/build/reference/module-definition-dot-def-files?view=msvc-160) (.Def)
模块定义 (.def) 文件为链接器提供有关导出、属性和有关要链接的程序的其他信息的信息。.def 文件在构建 DLL 比较有用。详情可参见 [MSDN
Module-Definition (.Def) Files](https://docs.microsoft.com/en-us/cpp/build/reference/module-definition-dot-def-files?view=msvc-160)
当然，我们采用这种方式的原因是因为 .def 能被 mingw-w64
所支持，我们要做的就是在.def文件中写入我们要转发到原始dll的所有函数的列表，并在编译dll的时候在GCC中设置该 .def 文件参与链接。
### 简单的示例
#### 实现流程
这里我们采用一个简单的样例，我们采用常规写了一个 dll, 该 dll 文件导出一个 add 函数，该导出函数的作用就是把传入的两个数值进行相加
    #include 
    extern "C" int __declspec(dllexport)add(int x, int y)
    {
        return x + y;
    }
    BOOL APIENTRY DllMain(HANDLE handle, DWORD dword, LPVOID lpvoid)
    {
        return true;
    }
我们将它编译成 dll 文件
    gcc add.cpp -shared -o add.dll
然后我们写一个主程序来调用它
    #include 
    #include 
    typedef int(*lpAdd)(int, int);
    int main(int argc, char *argv[])
    {
        HINSTANCE DllAddr;
        lpAdd addFun;
        DllAddr = LoadLibraryW(L"add.dll");
        addFun = (lpAdd)GetProcAddress(DllAddr, "add");
        if (NULL != addFun)
        {
            int res = addFun(100, 200);
            printf("result: %d \n", res);
        }
        FreeLibrary(DllAddr);
        system("pause");
        return 0;
    }
然后我们进行编译执行
    gcc main.cpp -o main.exe
    ./main.exe
可以看到如下输出
然后我们将我们刚才生成的 add.dll 重命名为 _add.dll
然后创建一个 .def 文件
functions.def
    LIBRARY _add.dll
    EXPORTS
        add = _add.add @1
`LIBRARY _add.dll` 代表转发到 `_add.dll`，下面的 `EXPORTS` 定义了需要转发的函数，`=` 前面是导出函数名，`=`
后面的 `_add` 代表要转发到的 dll 的名称，`add` 代表要转发到 `_add.dll` 的哪一个导出函数，关键在于 `@1`
我们可以拿 [DLL Export Viewer](http://www.nirsoft.net/utils/dll_export_viewer.html)
或 [StudyPE+](https://bbs.pediy.com/thread-246459-1.htm) 等工具看看
我们可以看到 `Ordinal`, 这个是导出函数序号，就是 `@1` 的来源，如果有多个导出函数，依次写下来即可
然后编写我们的恶意 dll
    #include 
    BOOL APIENTRY DllMain(HANDLE handle, DWORD dword, LPVOID lpvoid)
    {
        return true;
    }
如上所示，当然，这只是一个样例，所以我并没有写下任何恶意代码
**现在可以编译我们的恶意dll了**
    gcc -shared -o add.dll evil.cpp functions.def