# 五、DockerSwarm
在本章中，我们将学习什么是 Docker swarm，以及如何设置 Docker swarm 集群。我们将了解所有的群管理命令，然后我们将了解更多关于群管理器和群工作者的信息。接下来，我们将发现集群服务。最后，我们将了解访问运行在集群中任何节点上的容器应用有多容易。
There are currently over 17,000,000 shipping containers in the world, and 5 or 6,000,000 of them are currently shipping around the world on vessels, trucks, and trains. In total, they make around 200,000,000 trips a year. – [https://www.billiebox.co.uk/facts-about-shipping-containers](https://www.billiebox.co.uk/facts-about-shipping-containers)
在本章中，我们将涵盖以下主题:
*   什么是 Docker Swarm？
*   建立 Docker 集群
*   经理和工人
*   群集服务
*   访问群中的容器应用
# 技术要求
您将从 Docker 的公共报告中提取 Docker 映像，因此需要基本的互联网访问来执行本章中的示例。您将设置一个多节点群集，因此您将需要多个节点来完成本章中的示例。您可以使用物理服务器、EC2 实例、虚拟空间或工作站上的虚拟机，甚至虚拟机箱上的虚拟机。我在 Vmware 工作站上为我的节点利用了 6 台虚拟机。每个虚拟机都配置有 1 GB 内存、1 个 CPU 和 20 GB 硬盘。使用的客户操作系统是 Xubuntu 18.04，因为它体积小，功能齐全。徐邦图可以从[https://xubuntu.org/download/](https://xubuntu.org/download/)下载。实际上，节点可以接受任何现代 Linux 操作系统选择。
本章代码文件可在 GitHub:
[https://GitHub . com/PacktPublishing/Docker-Quick-Start-Guide/tree/master/chapter 05](https://github.com/PacktPublishing/Docker-Quick-Start-Guide/tree/master/Chapter05)
查看以下视频，查看正在运行的代码:
[http://bit.ly/2KENJOD](http://bit.ly/2KENJOD)
# 什么是 Docker Swarm？
您可能没有注意到这一点，但是到目前为止，我们在示例中使用的所有 Docker 工作站部署或节点都是在单引擎模式下运行的。这是什么意思？它告诉我们 Docker 安装是作为独立的 Docker 环境直接管理的。虽然这很有效，但效率不是很高，而且不能很好地扩展。当然，Docker 理解这些限制，并为这个问题提供了一个强有力的解决方案。它被称为 Docker Swarm。Docker swarm 是一种将 Docker 节点链接在一起的方法，它可以高效、大规模地管理这些节点以及在这些节点上运行的 Docker 化应用。简而言之，Docker Swarm 是一组作为集群或群连接和管理的 Docker 节点。Docker swarm 内置于 Docker 引擎中，因此使用它不需要额外的安装。当 Docker 节点是群的一部分时，它以群模式运行。如果有任何疑问，您可以使用`docker system info`命令轻松检查运行 Docker 的系统是群的一部分还是在单引擎模式下运行:
![](img/9e0e8cfa-39dd-47f7-a668-80354184afee.png)
提供集群模式的特性是 Docker SwarmKit 的一部分，Docker swarm kit 是一个大规模编排分布式系统的工具，也就是 Docker swarm 集群。一旦 Docker 节点加入群，它就成为群节点，成为管理器节点或工作器节点。我们将很快讨论经理和工人之间的区别。现在，知道第一个加入新群的 Docker 节点成为第一个管理器，也称为 Leader。当第一个节点加入一个群体(实际上，它创建并初始化群体，然后加入它)并成为领导者时，会发生很多技术魔法。以下是发生的一些奇迹(没有特别的顺序):
*   创建并加密基于 Swarm-ETCD 的配置数据库或集群存储
*   为所有节点间通信设置了相互 TLS (mTLS)身份验证和加密
*   容器编排已启用，它负责管理哪些容器在哪些节点上运行
*   群集存储被配置为自动复制到所有管理器节点
*   节点被分配一个加密标识
*   启用了基于 Raft 的分布式共识管理系统
*   该节点成为管理器，并被选为群领导者
*   群管理器是为高可用性配置的
*   公钥基础设施系统被创建
*   该节点成为证书颁发机构，允许它向加入群的任何节点颁发客户端证书
*   在证书颁发机构上配置了默认的 90 天证书轮换策略
*   节点获得其客户端证书，包括其名称、标识、群标识以及节点在群中的角色
*   创建新的加密连接令牌以添加新的群管理器
*   为添加新的群工作人员创建新的加密连接令牌
该列表代表了通过将第一个节点加入群而获得的许多强大功能。而且，巨大的权力伴随着巨大的责任，这意味着你真的需要准备好做大量的工作来创建你的 Docker Swarm，正如你可能想象的那样。因此，让我们进入下一部分，我们将讨论如何在设置集群集群时启用所有这些功能。
# 参考
有关更多信息，请查看以下链接:
*   群集工具包的存储库:[https://github.com/docker/swarmkit](https://github.com/docker/swarmkit)
*   筏共识算法:[https://raft.github.io/](https://raft.github.io/)
# 如何建立 Docker 集群
您刚刚了解了创建 Docker 集群时启用和设置的所有令人难以置信的功能。现在，我将向您展示设置 Docker 集群所需的所有步骤。你准备好了吗？它们在这里:
```
# Set up your Docker swarm cluster
docker swarm init
```
什么事？等等？剩下的在哪里？没有。什么也没少。上一节中描述的所有设置和功能都是通过一个简单的命令实现的。使用单个`swarm init`命令，创建群集群，将节点从单实例节点转换为群模式节点，将管理器的角色分配给该节点，并将其选为群的领导者，创建集群存储，该节点成为集群的证书颁发机构，并为自己分配包括加密标识的新证书，为管理器创建新的加密加入令牌，为工作器创建另一个，等等。这就是变得简单的复杂性。
群命令组成了另一个 Docker 管理组。以下是群管理命令:
![](img/bd6dff1c-08fb-4b1b-9361-ad8741316fff.png)
我们稍后将回顾这些命令的用途，但在此之前，我想让您了解一些重要的网络配置。我们将在[第 6 章](6.html)、 *Docker Networking* 中更多地讨论 Docker 网络，但是现在请注意，您可能需要打开对 Docker 节点上的一些协议和端口的访问，以允许 Docker Swarm 集正常运行。以下是直接来自 Docker 的*群模式入门*维基的信息:
![](img/4a75151b-36db-43db-b9e7-ab46c7288927.png)
您可能需要为 REST API 打开的另外两个端口如下:
*   用于 Docker REST API 的 TCP 2375(纯文本)
*   TCP 2376 for Docker REST API (ssl)
好了，让我们继续复习蜂群命令。
# DockerSwarm 初始化
您已经看到了 init 命令的作用，即创建集群集群，向其中添加(这个)第一个 Docker 节点，然后设置并启用我们刚刚介绍的所有集群特性。init 命令可以像使用它一样简单，没有参数，但是有许多可选的参数可以用来微调初始化过程。像往常一样，您可以通过使用`--help`获得可选参数的完整列表，但是现在让我们考虑一些可用的参数:
*   `--autolock`:使用此参数启用管理器自动锁定。
*   `--cert-expiry duration`:使用此参数更改节点证书的默认有效期(90 天)。
*   `--external-ca external-ca`:使用此参数指定一个或多个证书签名端点，即外部 ca。
# Docker swarm 连接令牌
当您通过在第一个节点上运行`swarm init`命令来初始化集群时，执行的一个函数会创建唯一的加密连接令牌，一个连接其他管理节点，一个连接工作节点。使用`join-token`命令，您可以获得这两个加入令牌。事实上，使用`join-token`命令将为您指定的任何角色提供完整的连接命令。角色参数是必需的。以下是该命令的示例:
```
# Get the join token for adding managers
docker swarm join-token manager
# Get the join token for adding workers
docker swarm join-token worker
```
这是它的样子:
![](img/2f9b447e-3447-40f2-8449-5f4d754a4182.png)
```
# Rotate the worker join token
docker swarm join-token --rotate worker
```
请注意，这不会使已经使用旧的、现在无效的连接令牌的现有工作人员无效。它们仍然是群的一部分，不受加入令牌变化的影响。只有您希望加入群的新节点需要使用新令牌。
# DockerSwarm 加入
您已经看到了在前面的*DockerSwarm 连接标记*部分中使用的连接命令。join 命令与加密连接令牌一起用于向群添加 Docker 节点。除了第一个节点之外，所有节点都将使用 join 命令成为群的一部分(当然，第一个节点使用“init”命令)。join 命令有几个参数，其中最重要的是`--token`参数。这是所需的连接令牌，可通过`join-token`命令获得。这里有一个例子:
```
# Join this node to an existing swarm
docker swarm join --token SWMTKN-1-3ovu7fbnqfqlw66csvvfw5xgljl26mdv0dudcdssjdcltk2sen-a830tv7e8bajxu1k5dc0045zn 192.168.159.156:2377
```
您会注意到该命令不需要该角色。这是因为令牌本身与为其创建的角色相关联。当您执行联接时，输出会提供一条信息性消息，告诉您节点作为管理者或工作者加入了什么角色。如果您无意中使用了一个管理器令牌来加入一个工作人员，反之亦然，您可以使用`leave`命令从群中移除一个节点，然后将该令牌用于实际需要的角色，将该节点重新加入群。