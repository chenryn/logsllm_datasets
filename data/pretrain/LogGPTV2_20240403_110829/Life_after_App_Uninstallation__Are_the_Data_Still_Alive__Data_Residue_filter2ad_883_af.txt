involves several parties, such as developers, apps, Android
system, vendors and end users. A high-level view of Android
security is presented in [29], followed by Stowaway [32],
which maps APIs to their permission requirements. Moreover,
the security implication of vendor customization is studied
in [15], [53], [58]. Previous studies also examine the third-
party ad libraries [35], [40], [45], [49], [56], user involve-
ment [33], [41] and the app installation process [18] on
Android. While the knowledge gained from the existing work
helps us conduct our study, none of them studied the security
risks of the app uninstallation process.
Android Vulnerability Exploration Another line of research
is devoted to uncovering vulnerabilities in the Android system
and apps. Luo et al. [43] demonstrate attacks on Android’s
WebView component, while Wang et al. [52] identify unau-
thorized origin crossing attacks on popular Android apps.
The prevalence of content provider vulnerabilities is studied
by Zhou et al. [59]. Previous studies [24], [36] also use
unguarded public interfaces in vulnerable Android apps to
launch attacks. Two recent studies further examine the crypto
misuse in Android apps [26], [38]. These vulnerabilities are
partially due to developers’ mis-conﬁgurations of app compo-
nents or misinterpretation of Android’s security protection. The
data residue vulnerability identiﬁed in our research, however,
arises directly from Android system services and demands a
framework-level solution.
Prior studies have also revealed several ﬂaws in the An-
droid system. The vulnerability in Android’s upgrading process
allows a malicious app to escalate its privileges in the new
system [54]. Also, the problem of permission revocation at
the time of app uninstallation has been discussed in [31], [34],
[48], [50]. Exploits on Android Clipboard enable attackers to
gain accesses to user’s sensitive data [30], [57]. Those vulner-
abilities are linked to two speciﬁc Android system services,
the PackageManager service and Clipboard service. In
contrast, the data residue vulnerability affects a much broader
range of system services in Android.
To understand the damage scope of each attack, several
static analysis frameworks are proposed for Android, including
AndroGuard [3], CHEX [42], FlowDroid [16], Epicc [44], etc.
Most of the work is build upon WALA [14] or SOOT [12],
but makes extensive customization to model speciﬁc system
behaviors. These tools mostly stay at the app level and do
not ﬁt our needs for examining the framework-level code.
In our work, AndroGuard is utilized to identify potential
targets on GooglePlay. Dynamic analysis is also widely used in
13
understanding app’s behaviors [39], [46], [47]. Our veriﬁcation
experiments rely on various triggering conditions, such as
device reboot, app installation and uninstallation, which are
difﬁcult to fully automate using the dynamic analysis approach.
Despite all challenges involved, an automatic detection system
would be helpful in eliminating all data residue instances from
Android eventually, which itself is another research problem.
Android Security Enhancement Several architectures have
been proposed to enhance Android security. With SELinux
in the kernel as a building block, SEAndroid [51] and
FlaskDroid [20] attempt to develop ﬂexible Mandatory Access
Control (MAC) frameworks for Android. With the MAC sup-
port, a more strict and system-wide policy can be enforced to
restrict data accesses. As for the framework level enhancement,
TaintDroid [27] applies system-wide dynamic taint tracking
and analysis to monitor the ﬂow of sensitive information
through Android simultaneously. AppFence [37] is built upon
TaintDroid and denies all the unnecessary data request and
blocks communications that would lead to privacy leakage. To-
gether with ScanDroid [11], Aurasium [55], XMandDroid [19],
DroidChecker [21], PScount [17], WoodPecker [36] and other
proposed security frameworks [22], [23], [25], [28] for An-
droid, they strike to either protect user privacy or restrict app’s
privilege. The common technique in use is statically modeling
and dynamically monitoring app’s suspicious behaviors. The
data residue vulnerability, however, allows newly installed
app to possess the data, so the data-access operations appear
completely legitimate. The challenge here is to identify all
data creation functions and to correctly mark the data with the
associated app. Those data could come directly from apps, but
also be dynamically constructed within the system services,
making the tainting strategy complicated. We leave it as our
future work in exploring the possibility of applying MAC
policies and framework-level static/dynamic analysis to solve
the data residue problem.
VIII. CONCLUSIONS & FUTURE WORK
In this project, we made the ﬁrst step towards a better un-
derstanding of the security implication in the app uninstallation
process, by systematically examining the data cleanup logic
within 122 Android system services. Our study uncovered
12 data residue instances, and 11 of them are found to
be exploitable in our testing experiments, leading to severe
damages. Our work further demonstrates the feasibility of
the data residue attacks against real apps, and the attacking
apps can be distributed through the existing app markets.
To mitigate the threat, clear guidelines should be provided
to Android framework developers regarding the data cleanup
operation during the app uninstallation process. Further efforts
are also needed to design a generic solution for preserving the
uniqueness of attributes used by Android framework to save
sensitive resources. Actually, Android has already been using
a combination of package name and developer key to uniquely
associate app data between mobile devices and wear devices.
This practice can be generalized to mitigate the data residue
risk. Several other approaches can also be applied to defeat the
data residue attacks. For example, we can use taint analysis to
carefully label and eventually remove all the data residues from
the system; we can deﬁne mandatory access control policies on
data residues to prevent unauthorized access. We will pursue
these ideas in our future work.
ACKNOWLEDGMENT
We would like to thank our shepherd, William Enck, and
our anonymous reviewers for their insightful comments. This
project was supported in part by the NSF grant 1318814. Xiao
Zhang and Yousra Aafer thank Samsung Research America for
supporting this project during their internships.
REFERENCES
IDC Report. http://goo.gl/z2AyMV.
iResearch on App Life Expectancy. http://goo.gl/jwENYX.
[1] AccountManager Changelog. https://goo.gl/oD2qXt.
[2] ADAL Android SDK. https://goo.gl/uJGzAU.
[3] AndroGuard. http://code.google.com/p/androguard/.
[4] AndroidCentral Poll. http://goo.gl/nl5z6y.
[5] App Genome Report. https://goo.gl/eGszpB.
[6] AppBrain Statistic on Android Apps. http://goo.gl/CyDYNc.
[7] Demo of the Paper. https://sites.google.com/site/droidnotsecure/.
[8]
[9]
[10] Localytics on App Retention. http://goo.gl/NWRCGL.
[11] SCanDroid. http://spruce.cs.ucr.edu/SCanDroid/.
[12] Soot. http://sable.github.io/soot/.
[13] Statista Report. http://goo.gl/kkwLW9.
[14] WALA. http://wala.sourceforge.net/.
[15] Y. Aafer, N. Zhang, Z. Zhang, X. Zhang, K. Chen, X. Wang, X. Zhou,
W. Du, and M. Grace. Hare hunting in the wild android: A study on
the threat of hanging attribute references. In Proceedings of the 22Nd
ACM SIGSAC Conference on Computer and Communications Security,
CCS ’15, New York, NY, USA, 2015.
[16] S. Arzt, S. Rasthofer, C. Fritz, E. Bodden, A. Bartel, J. Klein,
Y. Le Traon, D. Octeau, and P. McDaniel. Flowdroid: Precise context,
ﬂow, ﬁeld, object-sensitive and lifecycle-aware taint analysis for android
the 35th ACM SIGPLAN Conference on
apps.
Programming Language Design and Implementation, PLDI ’14, New
York, NY, USA, 2014.
In Proceedings of
[17] K. W. Y. Au, Y. F. Zhou, Z. Huang, and D. Lie. Pscout: Analyzing
the android permission speciﬁcation. In Proceedings of the 2012 ACM
Conference on Computer and Communications Security, CCS ’12, New
York, NY, USA, 2012.
[18] D. Barrera, J. Clark, D. McCarney, and P. C. van Oorschot. Under-
standing and improving app installation security mechanisms through
In Proceedings of the Second ACM
empirical analysis of android.
Workshop on Security and Privacy in Smartphones and Mobile Devices,
SPSM ’12, New York, NY, USA, 2012.
[19] S. Bugiel, L. Davi, A. Dmitrienko, T. Fischer, and A.-R. Sadeghi.
Xmandroid: A new android evolution to mitigate privilege escalation
attacks. Technical report, Technische Universitt Darmstadt, 2011.
[20] S. Bugiel, S. Heuser, and A.-R. Sadeghi. Flexible and ﬁne-grained
mandatory access control on android for diverse security and privacy
policies. In Presented as part of the 22nd USENIX Security Symposium
(USENIX Security 13), Washington, D.C., 2013.
[21] P. P. Chan, L. C. Hui, and S. M. Yiu. Droidchecker: Analyzing android
In Proceedings of the Fifth ACM
applications for capability leak.
Conference on Security and Privacy in Wireless and Mobile Networks,
WISEC ’12, New York, NY, USA, 2012.
[22] E. Chin, A. P. Felt, K. Greenwood, and D. Wagner. Analyzing
In Proceedings of the
inter-application communication in android.
9th International Conference on Mobile Systems, Applications, and
Services, MobiSys ’11, New York, NY, USA, 2011.
[23] M. Conti, V. T. N. Nguyen, and B. Crispo. Crepe: Context-related
policy enforcement for android. In Proceedings of the 13th International
Conference on Information Security, ISC’10, Berlin, Heidelberg, 2011.
[24] L. Davi, A. Dmitrienko, A.-R. Sadeghi, and M. Winandy. Privilege
escalation attacks on android. In Proceedings of the 13th International
Conference on Information Security, ISC’10, Berlin, Heidelberg, 2011.
14
[25] M. Dietz, S. Shekhar, Y. Pisetsky, A. Shu, and D. S. Wallach. Quire:
In 20th
Lightweight provenance for smart phone operating systems.
USENIX Security Symposium, San Francisco, CA, Aug. 2011.
[26] M. Egele, D. Brumley, Y. Fratantonio, and C. Kruegel. An empirical
study of cryptographic misuse in android applications. In Proceedings of
the 2013 ACM SIGSAC Conference on Computer and Communications
Security, CCS ’13, New York, NY, USA, 2013.
[27] W. Enck, P. Gilbert, B.-G. Chun, L. P. Cox, J. Jung, P. McDaniel,
and A. N. Sheth. Taintdroid: An information-ﬂow tracking system for
realtime privacy monitoring on smartphones. In Proceedings of the 9th
USENIX Conference on Operating Systems Design and Implementation,
OSDI’10, Berkeley, CA, USA, 2010.
[28] W. Enck, M. Ongtang, and P. McDaniel. On lightweight mobile phone
application certiﬁcation. In Proceedings of the 16th ACM Conference
on Computer and Communications Security, CCS ’09, New York, NY,
USA, 2009.
[29] W. Enck, M. Ongtang, and P. McDaniel. Understanding android
security. Security Privacy, IEEE, 7(1), Jan 2009.
[30] S. Fahl, M. Harbach, M. Oltrogge, T. Muders, and M. Smith. Hey,
you, get off of my clipboard. In In proceeding of 17th International
Conference on Financial Cryptography and Data Security, 2013.
[31] Z. Fang, W. Han, and Y. Li. Permission based android security: Issues
and countermeasures. Computers & Security, 2014.
[32] A. P. Felt, E. Chin, S. Hanna, D. Song, and D. Wagner. Android
permissions demystiﬁed. In Proceedings of the 18th ACM Conference
on Computer and Communications Security, CCS ’11, New York, NY,
USA, 2011.
[33] A. P. Felt, E. Ha, S. Egelman, A. Haney, E. Chin, and D. Wagner.
Android permissions: User attention, comprehension, and behavior. In
Proceedings of the Eighth Symposium on Usable Privacy and Security,
SOUPS ’12, New York, NY, USA, 2012.
[34] E. Fragkaki, L. Bauer, L. Jia, and D. Swasey. Modeling and enhancing
In Computer Security ESORICS’ 12,
androids permission system.
volume 7459 of Lecture Notes in Computer Science. 2012.
[35] M. C. Grace, W. Zhou, X. Jiang, and A.-R. Sadeghi. Unsafe exposure
analysis of mobile in-app advertisements. In Proceedings of the Fifth
ACM Conference on Security and Privacy in Wireless and Mobile
Networks, WISEC ’12, New York, NY, USA, 2012.
[36] M. C. Grace, Y. Zhou, Z. Wang, and X. Jiang. Systematic detection of
capability leaks in stock android smartphones. In 19th Annual Network
and Distributed System Security Symposium, NDSS’ 12, San Diego,
California, USA, 2012.
[37] P. Hornyack, S. Han, J. Jung, S. Schechter, and D. Wetherall. These
aren’t the droids you’re looking for: Retroﬁtting android to protect
In Proceedings of the 18th ACM
data from imperious applications.
Conference on Computer and Communications Security, CCS ’11, New
York, NY, USA, 2011.
[38] S. H. Kim, D. Han, and D. H. Lee. Predictability of android openssl’s
In Proceedings of the 2013 ACM
pseudo random number generator.
SIGSAC Conference on Computer and Communications Security, CCS
’13, New York, NY, USA, 2013.
the Art
[39] W. Klieber, L. Flynn, A. Bhosale, L. Jia, and L. Bauer. Android
In Proceedings of the 3rd ACM
in Java
taint ﬂow analysis for app sets.
SIGPLAN International Workshop on the State of
Program Analysis, SOAP ’14, New York, NY, USA, 2014.
I. Leontiadis, C. Efstratiou, M. Picone, and C. Mascolo. Don’t kill my
ads!: Balancing privacy in an ad-supported mobile application market.
In Proceedings of the Twelfth Workshop on Mobile Computing Systems
and Applications, HotMobile ’12, New York, NY, USA, 2012.
J. Lin, S. Amini, J. I. Hong, N. Sadeh, J. Lindqvist, and J. Zhang. Ex-
pectation and purpose: Understanding users’ mental models of mobile
app privacy through crowdsourcing. In Proceedings of the 2012 ACM
Conference on Ubiquitous Computing, UbiComp ’12, New York, NY,
USA, 2012.
[40]
[41]
[42] L. Lu, Z. Li, Z. Wu, W. Lee, and G. Jiang. Chex: Statically vetting
android apps for component hijacking vulnerabilities. In Proceedings of
the 2012 ACM Conference on Computer and Communications Security,
CCS ’12, New York, NY, USA, 2012.
[43] T. Luo, H. Hao, W. Du, Y. Wang, and H. Yin. Attacks on webview
In Proceedings of the 27th Annual Computer
in the android system.
15
Security Applications Conference, ACSAC ’11, New York, NY, USA,
2011.
[44] D. Octeau, P. McDaniel, S. Jha, A. Bartel, E. Bodden, J. Klein,
and Y. Le Traon. Effective inter-component communication mapping
in android: An essential step towards holistic security analysis.
In
Presented as part of the 22nd USENIX Security Symposium (USENIX
Security 13), Washington, D.C., 2013.
[45] P. Pearce, A. P. Felt, G. Nunez, and D. Wagner. Addroid: Privilege sepa-
ration for applications and advertisers in android. In Proceedings of the
7th ACM Symposium on Information, Computer and Communications
Security, ASIACCS ’12, New York, NY, USA, 2012.
[46] S. Poeplau, Y. Fratantonio, A. Bianchi, C. Kruegel, and G. Vigna.
Execute This! Analyzing Unsafe and Malicious Dynamic Code Loading
In 21st Annual Network and Distributed
in Android Applications.
System Security Symposium, NDSS 14’, San Diego, California, USA,
2014.
[47] V. Rastogi, Y. Chen, and W. Enck. Appsplayground: Automatic security
analysis of smartphone applications. In Proceedings of the Third ACM
Conference on Data and Application Security and Privacy, CODASPY
’13, New York, NY, USA, 2013.
J. Sellwood and J. Crampton. Sleeping android: The danger of dormant
permissions. In Proceedings of the Third ACM Workshop on Security
and Privacy in Smartphones & Mobile Devices, SPSM ’13, New York,
NY, USA, 2013.
[48]
[49] S. Shekhar, M. Dietz, and D. S. Wallach. Adsplit: Separating smart-
phone advertising from applications. In Proceedings of the 21st USENIX
Conference on Security Symposium, Security’12, Berkeley, CA, USA,
2012.
[50] W. Shin, S. Kwak, S. Kiyomoto, K. Fukushima, and T. Tanaka. A
small but non-negligible ﬂaw in the android permission scheme.
In
Proceedings of the 2010 IEEE International Symposium on Policies
for Distributed Systems and Networks, POLICY ’10, Washington, DC,
USA, 2010.
[51] S. Smalley and R. Craig. Security enhanced (SE) android: Bringing
In 20th Annual Network and Distributed
ﬂexible MAC to android.
System Security Symposium, NDSS 13’, San Diego, California, USA,
2013.
[52] R. Wang, L. Xing, X. Wang, and S. Chen. Unauthorized origin crossing
on mobile platforms: Threats and mitigation. In Proceedings of the 2013
ACM SIGSAC Conference on Computer and Communications Security,
CCS ’13, New York, NY, USA, 2013.
[53] L. Wu, M. Grace, Y. Zhou, C. Wu, and X. Jiang. The impact of vendor
customizations on android security. In Proceedings of the 2013 ACM
SIGSAC Conference on Computer and Communications Security, CCS
’13, New York, NY, USA, 2013.
[54] L. Xing, X. Pan, R. Wang, K. Yuan, and X. Wang. Upgrading your
android, elevating my malware: Privilege escalation through mobile os
updating. In Proceedings of the 2014 IEEE Symposium on Security and
Privacy, SP ’14, Washington, DC, USA, 2014.
[55] R. Xu, H. Sa¨ıdi, and R. Anderson. Aurasium: Practical policy enforce-
In Proceedings of the 21st USENIX
ment for android applications.
Conference on Security Symposium, Security’12, Berkeley, CA, USA,
2012.
[56] X. Zhang, A. Ahlawat, and W. Du. Aframe: Isolating advertisements
from mobile applications in android. In Proceedings of the 29th Annual
Computer Security Applications Conference, ACSAC ’13, New York,
NY, USA, 2013.
[57] X. Zhang and W. Du. Attacks on android clipboard. In S. Dietrich, edi-
tor, Detection of Intrusions and Malware, and Vulnerability Assessment,
volume 8550 of Lecture Notes in Computer Science. 2014.
[58] X. Zhou, Y. Lee, N. Zhang, M. Naveed, and X. Wang. The peril of
fragmentation: Security hazards in android device driver customizations.
In Proceedings of the 2014 IEEE Symposium on Security and Privacy,
SP ’14, Washington, DC, USA, 2014.
[59] Y. Zhou and X. Jiang. Detecting passive content leaks and pollution in
android applications. In 20th Annual Network and Distributed System
Security Symposium, NDSS ’13, San Diego, California, USA, 2013.