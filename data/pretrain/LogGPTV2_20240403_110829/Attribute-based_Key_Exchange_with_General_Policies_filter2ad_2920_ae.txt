### Satisfying All Requirements

To present our scheme, we first recall the general construction of Identity-Based Encryption (IBE) and define its terminology. An IBE scheme consists of four main components: setup, key generation, encryption, and decryption.

#### IBE Scheme Components

1. **SetupIBE(1^n)**:
   - **Input**: Security parameter \( n \).
   - **Output**:
     - **Public Parameters (PPIBE)**: Common to all key pairs and implicitly given to all algorithms.
     - **Master Public Key (mpkIBE)** and **Master Secret Key (mskIBE)**: Generated in two parts.
       - **Part 1**: Outputs the public parameters PPIBE.
       - **Part 2**: Outputs the master public key mpkIBE and the master secret key mskIBE.

2. **KeyGenIBE(mskIBE, ID)**:
   - **Input**: Master secret key mskIBE and the identity ID of the client.
   - **Output**: Client’s secret key skIBE.

3. **EncIBE(mpkIBE, m, ID)**:
   - **Input**: Master public key mpkIBE, plaintext message \( m \), and the identity ID of a client.
   - **Output**: Ciphertext \( c \).

4. **DecIBE(c, skIBE)**:
   - **Input**: Ciphertext \( c \) and the client’s secret key skIBE.
   - **Output**: Decrypted message \( m \).

We assume familiarity with the definition of IBE. Here, we informally state that encrypting with IBE is a secure encryption method.

### Our Construction: IBE-ASE Scheme

Our IBE-ASE (Attribute-Selective Encryption) scheme is defined as follows:

#### Setup(1^n, m)

1. **Run Part 1 of SetupIBE**:
   - Receive PPIBE.

2. **Choose 2m Random Strings**:
   - For \( j \in [m] \), choose \( g_{j,0} \) and \( g_{j,1} \), where \( g_{j,0} \) corresponds to not having attribute \( j \), and \( g_{j,1} \) corresponds to having the attribute. These will be the "identities" of the system.

3. **Key Generation for ELH Signature Scheme**:
   - Generate and set \( mVK \) to the public verification key and \( mSK \) to the secret signing key.

4. **Output**:
   - \( PP := (PPIBE, \{g_{j,0}, g_{j,1}\}_{j \in [m]}, mVK, mSK) \).

#### GenCert(mSK, χ)

1. **Run Part 2 of SetupIBE**:
   - Create \( mskIBE \) and \( mpkIBE \).
   - Set \( pk_\chi := (mpkIBE, \sigma = \text{Sign}(mpkIBE)) \). We sometimes refer to \( pk_\chi \) as the public key and sometimes as both the public key and its signature.

2. **For Each Attribute \( j \in [m] \)**:
   - Call KeyGenIBE on input \( mskIBE \) and identity \( g_{j,\chi[j]} \).
   - This returns a secret key \( sk_j \).

3. **Set the Client’s Secret Key**:
   - \( sk_\chi := (sk_1, \ldots, sk_m) \).
   - Discard the master secret key \( mskIBE \). The signature compensates for the fact that \( mpkIBE \) is not one of the public parameters of the system.

#### Vrfy(mVK, pkχ)

- **Output**: A bit attesting to the validity of the public key \( pk_\chi \) by checking the signature \( \sigma \).

#### Enc(pkχ, {xj,0, xj,1}j∈[m])

1. **Verify**:
   - Check that \( \text{Vrfy}(mVK, pk_\chi) = 1 \). If not, abort.

2. **For \( j \in [m] \)**:
   - Compute \( c_{j,0} \leftarrow \text{EncIBE}(pk_\chi, x_{j,0}, g_{j,0}) \) and \( c_{j,1} \leftarrow \text{EncIBE}(pk_\chi, x_{j,1}, g_{j,1}) \).

3. **Output**:
   - \( c := (c_{1,0}, c_{1,1}, \ldots, c_{m,0}, c_{m,1}) \).

#### Dec(skχ, c)

- **Output**: \( x_j := \text{DecIBE}(c_{j,\chi[j]}, sk_{\chi[j]}) \) for all \( j \in [m] \).

#### Unlink(pkχ, skχ)

- **In our implementation using the Boneh-Franklin IBE scheme**:
  - The public key \( pk_\chi \) has the form \( g^z \) for some value \( z \).
  - Implement the unlink operation by raising \( pk_\chi \) to a random exponent \( s \). All other values, including the ELH signature and every component of the secret key, are also raised to \( s \).

#### Project(pkχ, skχ, S)

- **Function in the IBE case**:
  - Remove from the secret key the elements whose index is not in the set \( S \). The public key remains the same.

#### GenCert∗(mSK, χ)

- **Same as GenCert**, except now the secret key \( sk \) contains secret keys \( sk_{j,b} \) for all \( j \in [m] \) and \( b \in \{0, 1\} \).

#### Dec∗(sk, c)

- **Same as Dec**, except here the full set of \( 2m \) plaintexts are returned. This is straightforward, as the secret key now includes decryption keys for all messages.

### Theorem 8.1

- **Theorem**: The above scheme is a secure ASE scheme when instantiated with the Boneh-Franklin IBE and an ELH signature scheme. The ELH signature scheme needs to work over the same group \( G \), as defined in Boneh-Franklin.

### ASE Using ELH Signatures

We present an instantiation of an attribute-selective encryption (ASE) scheme based on extractable linearly homomorphic (ELH) signatures. The key generation and certification mechanism uses the homomorphic property of the signatures, while their extractability properties are used to prove security.

#### ELH-ASE Scheme

##### Setup(1^n, m)

- **Let Sig = (Sign, Vrfy)**: Be an ELH signature scheme over a group \( G \) of order \( q \).
- **Setup uses Sig** to sign several elements in each client’s public key.
- **Each element type (g, h, u)**: Has a dedicated signature key, and there is also a per-attribute signature key to sign elements of the form \( u^{e_j} \).
- **Notation**: Denote the above four types of signatures by \( \text{Sign}_g, \text{Sign}_h, \text{Sign}_u \), and \( \text{Sign}_j \) for \( j \in [m] \).
- **Master Verification Key (mVK)**: The set of public verification keys for the above signatures.
- **Master Secret Key (mSK)**: The corresponding secret signing keys.

##### GenCert(mSK, χ)

- **Generate a public key \( pk_\chi \) associated with an attribute vector \( \chi = (\chi_1, \ldots, \chi_m) \)**:
  1. Choose random elements \( g, h, u \in G \setminus \{1\} \) and compute signatures \( \text{Sign}_g(g), \text{Sign}_h(h), \text{Sign}_u(u) \).
  2. Choose \( r_1, \ldots, r_m \in_R \mathbb{Z}_q^* \) and set \( e_j = g^{r_j} \) if \( \chi[j] = 0 \) and \( e_j = h^{r_j} \) if \( \chi[j] = 1 \); compute signatures \( \text{Sign}_j(u^{e_j}) \) for \( j \in [m] \).
  3. Set the public key \( pk_\chi \) to \( (g, h, u, \{e_j\}_{j \in [m]}, \text{Sign}_g(g), \text{Sign}_h(h), \text{Sign}_u(u), \{\text{Sign}_j(u^{e_j})\}_{j \in [m]}) \) and the secret key \( sk_\chi \) to \( \{r_j\}_{j \in [m]} \).

##### Vrfy(mVK, pkχ)

- **Check**: That \( g, h, u \in G \setminus \{1\} \) and use \( mVK \) to check all signatures.

##### Enc(pkχ, {xj,0, xj,1}j∈[m])

- **For \( j \in [m] \)**:
  - Choose \( s_j, t_j \in_R \mathbb{Z}_q \) and set \( c_{j,0} := (g^{s_j}, e_j^{s_j} \cdot x_{j,0}) \) and \( c_{j,1} := (h^{t_j}, e_j^{t_j} \cdot x_{j,1}) \).
- **Ciphertext**: The sequence \( \{(c_{j,0}, c_{j,1})\}_{j \in [m]} \).

##### Dec(skχ, {(cj,0, cj,1)}j∈[m])

- **For \( j \in [m] \)**:
  - Set \( (C_1, C_2) \) to the pair \( c_{j,\chi[j]} \) and compute \( x_{j,\chi[j]} := C_2 / C_1^{r_j} \).

##### Unlink(pkχ, skχ)

- **Choose a random value \( r \in \mathbb{Z}_q \)** and raise every element of \( pk \) to the power of \( r \); output:
  - \( pk' := (g^r, h^r, u^r, \{e_j^r\}_{j \in [m]}, (\text{Sign}_g(g))^r, (\text{Sign}_h(h))^r, (\text{Sign}_u(u))^r, \{(\text{Sign}_j(u^{e_j}))^r\}_{j \in [m]}) \)
  - \( sk' := \{r \cdot r_j\}_{j \in [m]} \).

##### Project(pkχ, skχ, S)

- **Output a new public key** by omitting any component \( e_j \) for \( j \notin S \), and set the corresponding secret key to \( \{r_j\}_{j \in S} \).

##### GenCert∗(mSK, χ)

- **Generation of the pair \( (pk_\chi, sk_\chi) \)**: Same as for GenCert except that \( h \) is set to \( g^\tau \) for known \( \tau \in_R \mathbb{Z}_q \) and \( e_j \) is set to \( g^{r_j} \) for all \( j \in [m] \) (as in the case \( \chi = 0^m \)). The secret key \( sk \) is comprised of the set \( \{r_j\}_{j \in [m]} \) and the value \( \tau \).

##### Dec∗(sk, {cj,0, cj,1}j∈[m])

- **For \( j \in [m] \)**:
  - Set \( (C_1, C_2) \) to the pair \( c_{j,0} \) and compute \( x_{j,0} := C_2 / C_1^{r_j} \).
  - For \( j \in [m] \), set \( (C_1, C_2) \) to the pair \( c_{j,1} \) and compute \( x_{j,1} := C_2 / C_1^{\tau \cdot r_j} \).

### Theorem 9.1

- **Theorem**: If Sig is an extractable linearly homomorphic signature scheme over a DDH group \( G \), then under the DDH and KEA assumptions over \( G \), the ELH-ASE scheme has the properties of collusion resistance, attribute privacy, unlinkability, projectability, and committing encryption.

### Performance

As the bottleneck in terms of computation is the pairings and exponentiations (versus garbling and evaluating the policy), we provide a concrete count of the number of pairings and exponentiations required for each of the two ASE schemes presented in Sections 8 and 9.

#### IBE-based Scheme (Section 8)

- **Client**:
  - Computes two exponentiations to randomize both its “master public key” and its associated signature.
- **Server**:
  - Computes two pairings to verify the signature of the client’s “master public key”.
  - To encrypt \( 2m \) messages, the server computes \( 2m \) pairings and \( 2m \) exponentiations.
- **Client**:
  - Computes \( m \) pairings and exponentiations to decrypt \( m \) messages.

#### ELH Signature-based Scheme (Section 9)

- **Client**:
  - Computes a total of \( 6 + 2m \) exponentiations to randomize both the basis and its associated signature (6) and the public keys and their associated signatures (2m). These operations can all be done offline.
- **Server**:
  - Computes \( 3 + m \) signature verifications, which requires \( 6 + 2m \) pairings (this can be sped up by batch verification of signatures).
  - To encrypt the \( 2m \) messages, it computes \( 4m \) exponentiations.
- **Client**:
  - Computes \( m \) exponentiations to decrypt \( m \) messages.

### Important Points

- The scheme requires the client to only compute exponentiations as opposed to pairings, which could be meaningful in a setting where the client is a small computing device.
- The server can batch multiple signature verifications from different clients. The CA’s signature keys for \( g, h, u \), and the attributes are the same for all clients. Using techniques of Ferrara et al. [24] for batching pairing-based signatures can help achieve better amortized run-times.

### Implementation and Results

We implemented the scheme described in Figure 6.1 using the ELH signature-based ASE scheme, utilizing all the optimizations mentioned above. We instantiate the coin-tossing and commitment functionalities using SHA-1 and use the privacy-free garbling technique of Zahur et al. [39]. The code and all the scripts for generating our experimental results are available at [GitHub Repository](https://github.com/amaloz/abke).

All experiments were conducted on an Intel Core i5-4210H CPU running at 2.90 GHz, and we use the RELIC library [6] for pairings, using the optimal ate pairing on the BN-P256 curve. On our benchmark machine, pairings take roughly 1.88 ms, and exponentiations in \( G_1 \) take roughly 160 µs (76 µs when using preprocessing). All experiments were run over localhost; however, to emulate a WAN environment, we used the `tc` command in Linux to set the latency to 33 ms (the average latency in the United States [2]) and the bandwidth to 200 Mbps. For each measurement, we ran 10 iterations of 10 runs, taking the mean of the medians from each run.

#### Experimental Results

- **Figures 10.1 and 10.2** show the results of our experiments, varying the number of attributes \( m \) between 10, 50, and 200, and the size of the policy (comprised of only AND gates) between 1,000, 10,000, and 100,000.
- **Figure 10.1** depicts the computation time of the server and client.
- **Figure 10.2** depicts the communication time and lists the number of bits sent by the server and client.

### Figures

- **Figure 10.1**: Computation time of the server and client for various numbers of attributes and sizes of the policy.
- **Figure 10.2**: Communication time of the server and client for various numbers of attributes and sizes of the policy circuit.
- **Figure 10.3**: Optimized computation time (i.e., pushing the cost of randomizing the public key and garbling the policy to an offline stage, along with batching of the key verification) of the server and client for various numbers of attributes and sizes of the policy.

### Step

- **S**: 159 ms
- **S [opt]**: 82 ms
- **P P [opt]**: 2 (Gb)