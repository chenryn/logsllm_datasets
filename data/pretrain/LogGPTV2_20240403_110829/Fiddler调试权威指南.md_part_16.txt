确，服务器就返回请求的资源。该模式意味着当产生NTLM认证时，客户端会在资源完全以
HTTP/200返回之前，接收两个HTTP/401质询。
与Basic和Digest认证不同，NTLM机制往往不是基于每一个请求。相反地，NTLM机
制是基于每一个连接的，表示会使用某个认证证据在相同的连接上认证所有后续的请求。这
是你经常会看到在第一次加载内网站点时会产生一系列HTTP/401s，面在后期的页面加载中
即看不到任何后续认证质询的原因，
用NTLM协议或Kerberos协议。在HTTP层，Negotiate与NTLM很类似，每次请求需要1
到3次循环。
当在代理服务器上使用NTLM或Negotiate机制时，客户端应用要求该代理添加Proxy-Support：
Session-Based-Authentication响应头。该响应头表示代理理解不同的客户端之间必须共享认证
的连接。Fiddler会自动添加该响应头。
4.11.2Fiddler中的自动身份认证
Fiddler可以自动对使用Digest、NTLM和Negotiate 协议的服务器进行身份认证。当
Fiddler自动进行身份认证时，发送请求的客户端无法看到中间生成的HTTP/401或HTTP/407
响应。这是因为Fiddler本身会处理这些响应，回答服务器的质询，只有当认证完成后才向
客户端返回数据。
要使Fiddler自动响应服务器或网关代理的认证质询，应设置Session的X-AutoAuth属性
为纯文本证书字符串。如果使用（默认）值，Fiddler会使用运行Fiddler的Windows登录用
户账户的证书：
static function OnBeforeRequest(oSession: Session)
//To use the current Fiddler user's credentials:
if (oSession.HostnameIs("ServerThatDemandsCreds")){
//or,touse explicit credentials...
if (oSession.HostnameIs("ServerUsingChannelBinding"))(
103
---
## Page 104
第4章配置Fiddler和客户端
//
如果Fiddler是配置成从其他设备或用户账户中接收请求，使用默认
A
值会造成安全隐惠。因为这些请求会通过运行Fiddler的账号的证书来进
行身份认证。
如果在Options子选项卡中选中了AutomaticallyAuthenticate（自动身份认证）对话框，
Composer选项卡会自动把x-AutoAuth标志位的值设置成Preference fidler.composer
AutoAuthCreds的值。在需要HTTPBasic认证的场景下，只需要产生需要的usemame:password
字符串，使用TextWizard进行base64编码。使用base64编码的证书字符串，把它添加到
Authorization或Proxy-Authorization请求头。请求头可以使用Filters选项卡、FiddlerScript选
项卡或Composer选项卡的RequestHeaders对话框添加对外的请求。
4.11.3身份认证问题
因为Fiddler作为代理并提供强大的HTTPS解密功能，所以Fiddler在运行时有时会影响
认证。认证时常见的三个问题是Channel-BindingTokens、WinHTTP证书发布和Loopback认
证保护。以下将逐一描述。
Channel-Binding
NTLM身份认证机制的缺点之一在于会遭受“直通（passthrough）”攻击。在这种攻击中，
客户端会被引导到恶意网站，该网站借用不知情的第三方服务器提出认证质询。客户端如实
发送对认证质询的响应，该恶意网站就使用客户端的质询响应发送给被攻击的第三方服务器
进行身份认证。通过攻击，攻击者可以使用客户端证书从被攻击的服务器窃取数据。
要解决这个问题，提出了Channel-Binding的概念。Channel-Binding把认证质询响应绑定
到底层连接，从而不能在另一个连接上重用质询响应。通常，把证书绑定到当前HTTPS连接
的方式可以正常工作。Channel-Binding是通过IIS的ExtendedProtection选项实现的。
Channel-Binding给Fiddler带来了问题，因为客户端把证书通过Fiddler绑定到客户端，
因此当Fiddler把这些证书转发给真实的服务器时，服务器会拒绝。要解决这个问题，可以配
置Fiddler本身和服务器身份认证，不需要客户端参与。因为Fiddler自己生成质询响应，使
用Channel-Binding信息和服务器自己的连接匹配，服务器会接收该证书。要配置Fiddler为
客户端完成任何。使用4.11.2节所描述的X-AutoAuth标志位米完成。
---
## Page 105
4.11Fiddler和Web认证
WinHTTP证书发布策略
WinHTTP网络栈不支持安全区的概念，这表示当涉及Fiddler这样的代理时，它有时会
拒绝响应认证质询。当使用MicrosoftOffice客户端应用从SharePoint站点下载文档时，可能
会发生这种问题。可以配置Fiddler在客户端通过X-AutoAuth标志位认证来解决这个问题。
此外，查看htp://support.microsoft.com/kb/956943可以了解更多如何在注册表中修改
AuthForwardServerList的信息
回路保护（LoopbackProtection）
Windows还会保护用户避免“回路认证”攻击。在这种攻击中，客户端认为它是和远程
服务器进行认证，但实际上是和本地计算机认证。这种攻击通常是为了提升低级别进程的运
行权限，使其成为高级别的本地进程。当Windows遇到未期望的和本地计算机认证，会阻塞
该请求。
要取消回路保护，可以参考http://support.microsoft.com/kb/926642中描述的，设置标志位
DisableLoopbackCheck-1。
4.11.4HTTPS客户端证书
除了基于HTML表单和HTTP认证协议，在高安全的网站中可以使用第三种认证类型。
HTTPS客户端证书是非常严格的认证表单，用于对安全性要求特别高的场合（如银行和文档
签名）。当使用客户端证书认证时，客户端为服务器提供客户端证书，通过密码加密保证用户
的身份。
客户端证书认证的关键目的之一是要阻止网络中间件（如Fiddler）滥用客户端证书。即
使客户端应用把证书发送给Fiddler，Fiddler也无法成功地重用该证书，响应服务器的需求，
因为客户端永远都不会为Fiddier提供私钥。
要解决这个缺陷，当和服务器握手时，可以直接提供任何客户端证书和私钥给Fiddler。默
认情况下，如果服务器弹出对话框，要求客户端提供证书，Fiddler会查看%USERPROFILE%
DocumentsFiddler2\目录下的ClientCertificate.cer文件，使用该证书来响应服务器的认证要求。
在某些情况下，你可以使用不同的客户端证书进行安全连接。要实现这一点，在连接到
需要安全认证的服务器的CONNECT通道上使用https-Client-Certificate属性来指定证书所在
的路径。例如，你可以写如下代码：
static function OnBeforeRequest (oSession: Session)
105
---
## Page 106
第4章配置Fiddler和客户端
if (oSession.HTTPMethodIs("CONNECT")(
if (oSession.HostnameIs("exampleA"))(
oSession["https-Client-Certificate"]-"C:\\certs\\CertA.cer";
else
if (oSession.HostnameIs ("exampleB"))(
oSession["https-Client-Certificate"]="C:\\test\\CertB.cer";
//...
CER文件不包含和证书的公钥相关的私钥。相反，.CER文件只是作为Windows个人证
书库（certmgr.msc）的引用。Windows证书库保存了和证书相关的私钥以及需要的发布版本。
当插入Smartcard时，在Smartcard上保存的客户端证书会自动出现在个人证书库中，如图429
所示。
EleActionYiew telp
X
CenifictesCorent Uer
Penonal
lsued To
Isued Bly
Cetifiates
eiclaw@micl..
Clent Authenticatien
Trusted Root Cetificatic
Eeicln
EncLaeceMLee2er CA2IGSn
ericlie
ewat Carg LogonCient Aue
图4-29
当插入Smartcard时，可以从certmgr.msc中导出.CER文件，就像其他客户端证书那样使
用它。注意，Smartcard必须保留，以便Fiddler可以使用它获取私钥。
如果想要的证书还没有安装Windows个人证书库（比如只有.pfx文件），你必须先把它导
入到证书库中，然后导出成.CER文件。安装了证书后，只需要右击证书，选择AllTasks>
Export.,，把CER文件保存到默认的ClientCertificate.cer路径或保存到https-Client-Certificate
标志位所指定的路径。
106
---
## Page 107
7
第章
Inspectors
5.1概览
Fiddler的Inspectors用于显示WebSession列表中选定session的请求和响应。Inspectors
可以出现在两个地方：一个是Fiddler主窗口的Inspectors tab选项卡，另一个是独立的Inspect
Session窗口.InspectSession窗口需要在WebSession的上下文菜单中输入命令才能打开。
在Inspectors 选项卡中，Request Inspectors在面板顶部，Response Inspectors在面板底部。
点击Inspector名称（如HexView）可以对Inspector进行切换，如图5-1所示。
statsisInpectorsAutoRespondeConposeOiffe
HeadersTextlewSyntaxWewWebFormsHexilewAuth
图 5-1
第一次在WebSession列表中双击某个Session或按下Enter键，就会激活Inspectors选项
卡。系统会对每个请求和响应的inspector进行轮询，确认选中的请求和响应是否合适。举个
地，TextViewInspector对文本类型返回高分，而对二进制类型返回低分。
对于某个Session，返回最高分的inspectors会被激活。要强制Fiddler总是激活某个Request
Inspector，可以设置fiddler.uiinspectors.request.alwaysuse 为该Inspector选项卡的标题。要强
制Fiddler总是激活某个ResponseInspector，则需要设置fiddler.ui.inspectors.response.alwaysuse
的取值为该Inspector选项卡的标题。
面板上方和下方之间使用一条很细的蓝色分割线进行分割：可以使用鼠标移动这条线并
调整面板的大小。双击蓝色分割线会最大化ResponseInspectors面板，因为这是大多数用户经
常使用的面板，如图5-2所示。
107
---
## Page 108
第5章Inspectors
sattsnectorsAtoReondeCorpese
Maasa
1Spmar
图5-2
为了扩大显示区域，可以让Inspector选项卡从主窗口中独立出来，可以点击工具栏上的
Tearof按钮，也可以在QuickExec对话框中键入tearoff命令实现这一目的。关闭Inspector窗
口，就会返回主窗口的默认位置。
右击单个请求和响应的Inspector选项卡会显示包含两个选项的菜单：InspectorProperties
和HideInspector。第一个菜单显示Inspector提供的自身信息，而第二个菜单会从Inspectors
选项卡中删除这个Inspector。为了在后期恢复隐藏的Inspector，可以编辑fiddler.inspectors
hidelistpreference，并重新启动，或者在启动Fiddler时按下SHIFT键。
默认情况下，Inspectors是以只读（ReadOnly）模式分析某个session，除非该Session当
前停止在某个断点处。除此以外，只要Session处于未锁定（Unlocked）状态，就可以在Edit
菜单中输入命令对该Session进行编辑。大多数Inspector在ReadOnly模式下会以特定的背景
色来显示，当允许编辑时，会显示另一种颜色（通常是白色）。默认的ReadOnly颜色是淡蓝
色，可以通过Tools>FiddlerOptions>Appearance选项卡对其进行修改。
本章的最后将介绍Fiddler中的所有Inspector。
5.2授权和认证（AUTH）
类型
请求&响应
允许编辑
否
Fiddler的AuthInspector会解释请求头和响应头的授权（Authorization）和认证（Authentication）
相关的内容。一般而言，服务器返回HTTP/401和HTTP/407响应头时，说明它们需要认证证
书，后续的请求需要提供这些证书。
举个例子，假设你选中Rule菜单中的“RequireProxyAuthentication”规则，Fiddler会返回
108
---
## Page 109
5.2授权和认证（AUTH）
HTTP/407响应，要求用户为每个请求提供认证证书。该命令是通过请求头Proxy-Authenticate提
供的，Auth Response Inspector的显示如图5-3所示。
Auth
Proxy-Authenticate Header 1s present: Basic realm="FiddlerProxy
No www-Authent1cate Header 1s present.
图 5-3
用户在浏览器的Authentication对话框中输入用户名UserName和密码SecretKey后，浏
览器的后续请求中会提供包含了用户认证证书的Proxy-Authorization请求头。因为这个场景
所使用的认证机制是HTTP Basic，认证证书是以base64编码的。Auth Request Inspector会自
动对字符串进行解码，并以纯文本形式显示，如图5-4所示。
Auth|
Decoded username:Password=userName:SecretKey
No Authorization Header 1s present.
% 5-4
当然，大多数Web站点会使用更严格的认证方式，如使用HTTPDigest、WindowsNTLM
或Negotatiate机制。在Windows网络中，Negotatiate认证机制被普遍使用。
Fiddler的Authinspector内置了解析NTLM数据块的机制，会用下面的方式来显示数据
块中所包含的信息：
- [NTLM Type3: Authentication]-
Provider: NTLMSSP
Type:3
OS Version: 6.2:8329
Flags: 0xa2888205
Unicode supported in security buffer.
Request server's authentication realm included in Type2 reply.
NTLM authentication. Negotiate Always Sign.Negotiate NTLM2 Key.
Target Information block provided for use in calculation of the NTLMv2 response.
Supports 56-bit encryption.Supports 128-bit encryption.
1mresp_Offset:134;1mresp_Length: 24;1mresp_Length2:24
ntresp_offset: 158; ntresp_Length: 396;ntresp_Length2: 396
Domain_Offset: 88; Domain_Length: 14; Domain_Length2: 14
User_Offset: 102; User_Length: 14; User_Length2: 14
Host_Offset: 116; Host_Length: 18;Host_Length2: 18
msg_1en:554
Domain: REDMOND
109
---
## Page 110
第5章Inspectors
User: ericlaw
Host:ERICLAWT8
1m_1e5p:000000000000000000000000000000000000000000000000
nt_re8p: 42 40 AE AB 3B D7 7F 02 B5 F9 76 D7 C9 5E 6B 82 01 01 00 00 00 00 00 00
05 96 B2 D4 01 23 CD C1 D3 D9 8A 33 47 87 40 3D 00 00 00 00 02 00 52 ..*
AuthInspector当前无法解析Kerberos认证消息，但是可以显示解码后的质询和响应内容。
5.3缓存（CACHING）
类型