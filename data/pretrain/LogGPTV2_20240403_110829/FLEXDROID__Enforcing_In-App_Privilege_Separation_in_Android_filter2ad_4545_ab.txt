r
e
h
n
I
s
s
a
l
C
I
N
J
Category A
Name
W
× (cid:88) (cid:88) (cid:88) (cid:88) (cid:88)
·
·
×
× O
·
·
Social
Facebook
O (cid:88) (cid:88) · (cid:88) ·
·
·
·
× O
·
·
Analytics
Flurry
·
·
·
· (cid:88) (cid:88) (cid:88)
·
·
Advertising × (cid:52) O
·
RevMob
(cid:88) (cid:88) · (cid:88) (cid:88)
·
·
·
·
× O
·
·
Advertising
Chartboost
· (cid:52) (cid:88) (cid:88) (cid:88) (cid:88) ·
·
O × × (cid:52) (cid:52) ·
·
·
·
InMobi
Advertising
O × (cid:88) (cid:88) · (cid:88) (cid:88)
·
·
·
·
·
Millennialmedia Advertising
O
× (cid:88) ·
·
· (cid:88) ·
·
·
× O
·
·
Billing
Paypal
× (cid:88) (cid:88) · (cid:88) (cid:88)
·
× × ·
·
Umeng
O O
Analytics
·
·
(cid:88) (cid:88) (cid:88) (cid:88) ·
Advertising (cid:52) O O
·
·
·
AppLovin
·
×
· (cid:88) · (cid:88) ·
·
·
·
·
Pushwoosh
Notiﬁcation
O O
× (cid:88) (cid:88) (cid:88) (cid:88) ·
·
·
·
·
·
Advertising
Tapjoy
O O
·
·
· (cid:52) · (cid:88) ·
·
· (cid:52) O
·
Advertising
AppFlood
· (cid:88) (cid:88) (cid:88) ·
×
·
·
·
·
O
OpenFeint
Social
O O
Advertising × (cid:52) O
· (cid:88) · (cid:88) ·
· × ·
·
×
Airpush
·
·
× ·
·
×
· (cid:88) · (cid:88) ·
Youmi
O O
Advertising
·
× ·
· (cid:88) (cid:88) ·
·
·
· (cid:52) ·
Advertising
O
Cauly
· (cid:52) (cid:88) (cid:88) · (cid:88) ·
·
·
·
· (cid:52) O
Social
Socialize
·
·
·
·
·
× (cid:88) (cid:88) · (cid:88) ·
O O
Domob
Advertising
Advertising × (cid:52) O
·
·
·
· (cid:52) (cid:88) (cid:88) (cid:88) (cid:88) ·
Leadbolt
·
× O
·
·
·
· (cid:52) (cid:88) (cid:88) · (cid:88) ·
MobFox
Advertising
W
·
·
·
·
·
·
·
·
·
·
·
·
·
·
·
·
·
·
× ×
·
·
·
·
·
·
·
·
·
·
·
·
·
·
× ×
·
·
·
·
·
·
·
·
·
·
·
·
·
·
·
·
·
·
·
·
·
·
e
t
i
r
W
·
·
·
·
·
·
·
·
·
·
·
·
·
·
·
·
·
·
·
TABLE I: Characteristics of third-party libraries. Columns 3-14 show the permissions potentially used by apps (O: required permission, (cid:52):
optional permission, ×: undocumented permission). The rest of columns are related to runtime behavior and dependency with host apps.
to the lack of in-app privilege separation, however, libraries
can take free rides to access private resources even without
corresponding permissions documented properly (i.e., undoc-
umented permissions) when its host app has the permissions.
If the library dynamically checks whether it has certain per-
missions or catches a security exception, it can abuse those
permissions without noticing users.
Contaminated libraries. Although the original
library is
legitimate, an adversary is able to rewrite its binary or source
code and redistribute it. When an app mistakenly uses such
contaminated libraries, the users who install the app are in
danger of severe privacy leaks, and may suffer monetary
damages. In 2013, a malware called Uten.A was repackaged
and distributed while disguising itself as Umeng SDK library,
a mobile analytic platform [28]. Some legitimate gaming apps
available in the Google Play used this malware, and many
users installed those apps. Devices affected by the malware
are silently subscribed to a premium-rate SMS service, and
SMS messages are sent to the service at the users’ expense.
Vulnerable libraries. A third-party library may execute a class
or JavaScript code1 downloaded from Internet at runtime. If
the mobile device is connected to an unsafe network and the
library does not encrypt the code, an attacker can replace it
with a malicious code. Such a malicious code can exploit
the host app’s permission to leak personal information (e.g.,
A malicious advertisement written in JavaScript can read the
1 A JavaScript code can run on a WebView-based framework via
JavascriptInterface provided by third-party libraries. Open Rich Media
Mobile Advertising (ORMMA) [13] is an example of such frameworks.
device’s IMEI code if the ad library exposes the getDeivceId
method to JavaScript using addJavascriptInterface).
B. Real-world Findings
In order to look at how our attack scenarios are pervasive
in the wild, we investigate the characteristics of third-party
libraries used in Android applications. Here is a brief summary
of our ﬁndings:
1) 17 of 20 popular third-party libraries use undocumented
2) 72% of 295 third-party libraries rely on dynamic code
permissions.
execution.
3) 17% of 295 third-party libraries use JNI.
Methodologies. We randomly collect the 100,000 Android
apps from the Playdrone dataset [42], an archive of Android
Application Package (APK) ﬁles downloaded from the Google
play store. To perform a static analysis for applications, we
dissect each APK ﬁle using apktool [4] which translates the
Android app’s .dex code into the corresponding .smali code. In
our analysis, we particularly focus the following characteristics
of each library which are relevant to our threat model.
Permissions exploited by third-party libraries. We chose 16
different Android permissions that allow a third-party library
to access privacy-sensitive information such as device ID,
SMS, contacts, and a device’s current location. Since a third-
party library accesses such information via the Android’s
APIs or content provider, we need their mapping to the
corresponding necessary permission. We extended the ﬁndings
3
from PScout [19] that provides the mapping between Android’s
native API, the content provider’s URI, and permissions. In
addition, we manually examined and compared the required
permissions that we could ﬁnd from the developer’s guide of
each third-party library, and the exploited permissions that they
could covertly use when embedded by an app.
Dynamic code execution. As previously mentioned in §III,
third-party libraries deeply rely on dynamic features of the
Java programming language, including runtime class loading,
Java reﬂection, and multi-threading. To identify whether such
techniques are used by third-party libraries, we build code-level
signatures of techniques and apply them to the smali code of
apps.
Interaction between a library and its host application.
In addition to the reliance of dynamic code features, third-
party libraries interact with their host apps in various ways,
which makes it hard to analyze and disambiguate the bound-
aries between third-party libraries and their apps. These
techniques include callback, class inheritance and JNI and
make FLEXDROID distinct from previous works such as Ad-
Droid [37] and AdSplit [39]. To examine such use cases, for
each application, we check whether a host app inherits classes
provided by third-party libraries, whether it uses any callback
method, and whether third-party libraries embed JNI.
Unlike previous works [32, 40] focusing on speciﬁc third-
party libraries (i.e., ad), our investigation is not limited to ad
libraries, but includes social, billing, analytics and more. In
addition, our investigation covers dynamic execution patterns
used by third-party libraries, which serves as a primary moti-
vation of our work.
Summary of results. Table I summarizes the results of our
ﬁndings for third-party libraries used in 100,000 Android apps.
We extracted the top 20 popular libraries which use at least
one permission out of 16 permissions mentioned above. Note
that in the result, we include a third-party library only if it
provides a clear documentation on necessary permissions and
a method of integration.
We found that some libraries could attempt to use per-
missions which are not documented in their developer’s
guide (marked as ×). For instance, ad libraries such as
RevMob, Airpush, and Leadbolt potentially utilize host app’s
GET_ACCOUNTS permission while its developer does not
mention the permissions as required or optional. With the
GET_ACCOUNTS permission, a library can obtain a user’s online
account information on the phone such as Gmail, Facebook,
and Dropbox.
In addition, our ﬁndings show that most libraries can make
dynamic execution paths with dynamic class Loading, Java
reﬂection, and Java thread. All the listed 20 libraries use at
least one technique, and 16 libraries utilize all three techniques.
Moreover, it turns out that host apps and third-party libraries
have strong dependencies. Speciﬁcally, most of the ad libraries
including Flurry, AppLovin, and Tapjoy need to obtain the
host app’s context to show and manipulate advertisements. We
also found that some libraries use class inheritance, perhaps
for simple integration. For instance, Parse and Chartboost
recommend app developers to inherit the provided class for
simplifying the integration process. In addition, we found that