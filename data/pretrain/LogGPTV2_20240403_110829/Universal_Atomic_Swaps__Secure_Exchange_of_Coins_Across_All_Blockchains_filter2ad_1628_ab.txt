objective will be to simulate such a functionality without using
any on-chain script. Our main leverage to achieve this will be
veriﬁable timed signatures (VTS) [34]. A VTS lets a user (or
a committer) generate a timed commitment C of a signature
σ on a message m under a public key pk. The commitment
3
refund transactions1 of the form
rfnd : pk (01) v(0)−−→ P0
tx (0)
rfnd : pk (10) v(1)−−→ P1.
tx (1)
Then P1 generates a VTS for the signature on the former
refund transaction with time parameter T0 and P0 generates
a VTS for the signature on the latter refund transaction with
time parameter T1. The time parameters are set such that
T0 = T1 + ∆, where ∆ is a conservatively chosen delay
parameter. This gap ∆ prevents race conditions and ensures that
a adversarial P0 cannot wait until the last moment to retrieve the
coin v(1), in the hope that the transaction swapping v(0) expires
in the meantime, effectively stealing coins from P1. Once both
VTS are veriﬁed, the parties proceed by transferring the coins
to the shared addresses by signing the freeze transactions of
the form
tx (0)
frz : P0
v(0)−−→ pk (01)
tx (1)
frz : P1
v(1)−−→ pk (10).
Swap Lock Phase. After a successful setup phase, parties
generate payment “locks” on transactions that spend from
the joint keys. Speciﬁcally, they deﬁne the following swap
transactions
swp : pk (01) v(0)−−→ P1
tx (1)
swp : pk (10) v(1)−−→ P0.
tx (0)
Since the secret keys of the joint addresses are secret shared
among the parties, a natural idea is to compute the respective
signatures using a secure 2-party computation (2PC) protocol.
However, this naive attempt leads to an insecure scheme: The
2PC protocol does not guarantee any form of guaranteed output
delivery,2 so nothing prevents P0 from going ofﬂine after
receiving a valid signature on tx (0)
swp. Instead, the parties ﬁrst
compute via a 2PC, a “locked” version of a signature on tx (1)
swp,
i.e.,
(cid:16)
(cid:17)
(cid:96)k := σ(1)
σ(0)
swp
swp ⊕ H
(cid:17)
(cid:16)
σ(0)
swp
where H is a hash function (modelled as a random oracle3).
the ⊕ operation mimics the one-time pad
Observe that
as the encryption key and σ(1)
encryption with H
swp
as the encrypted message. Note that at this point, neither party
knows the valid signature σ(1)
swp since it is masked by the output
of H. However, we now know that if P0 were to somehow
publish the signature on tx (0)
swp, then P1 would immediately
learn a valid signature on tx (1)
swp, by recomputing4 and removing
the mask. Only after this “lock” step is successfully completed,
both parties engage in a 2PC to jointly compute a signature
on tx (0)
Swap Complete Phase. After a successful lock phase, each
party can post the respective transaction-signature pair on the
swp, which is now safe to reveal.
1We assume the parties come to an agreement on the transaction fee for all
swap related transactions.
2The standard security notion for 2PC is security with aborts, which allows
an adversarial party to learn the output of the computation while preventing
honest parties to do so.
3A standard model instantiation is possible if we let H be a sufﬁciently
stretching leakage resilient pseudorandom generator that can be constructed
from Extremely Lossy Functions [42]
4We assume the signing algorithm is deterministic.
Fig. 1: Results of different phases for parties P0 and P1 in a
1-to-1 swap. In each phase, the ﬁrst party to receive the output
in the phase is written at the top followed by the second party
to receive the output in the phase.
C must hide the signature σ for time T (which can be chosen
arbitrarily by the committer). At the same time, the committer
also generates a proof π that proves that the commitment
C contains a valid signature σ: This guarantees that σ can
be publicly recovered in time T by anyone who solves the
computational puzzle.
To build some intuition on how to use this tool to simulate
a transaction timelock, consider the case of two users (Alice
and Bob) sharing an address pk AB (where each party owns
a share of the corresponding secret key). Before sending
the funds to pk AB, Alice and Bob jointly sign a “refund”
transaction tx rfnd that transfers all funds from pk AB back to
the address of Alice, in such a way that only Bob learns the
signature. Bob then generates a VTS (using time parameter T)
on this refund signature and provides Alice with the resulting
commitment C and proof π. Note that, if after time T some
funds in pk AB remain unspent, then Alice can immediately
refund them by posting the transaction tx rfnd together with the
valid signature that she learned from C.
2) One-to-One Atomic Swaps: Equipped with a VTS scheme,
we ﬁrst present a simple single-currency one-to-one atomic
swap protocol. The protocol consists of four phases, that we
describe in the following. Figure 1 shows the parties’ outputs
in each phase. For convention, keys, transactions and signatures
with (01) are involved in the payment from P0 to P1 and (10)
are involved in the payment from P1 to P0.
Swap Setup Phase. In the setup phase, the parties transfer
their coins to new joint addresses pk (01) and pk (10) (one for
each coin) that both parties together control. More concretely,
we have that
sk (01) = sk (01)
0 ⊕ sk (01)
1
and sk (10) = sk (10)
0 ⊕ sk (10)
1
where each party possesses one share of each signing key.
However, before transferring the coins to the joint keys, the
parties need to ensure that the coins will not be locked forever
in the joint address, in case one party goes ofﬂine.
As brieﬂy discussed above, this is done by generating two
4
1. Setup2. Lockonon3. Completeatat4. Timeoutblockchain. As mentioned before, while P0 can simply read
the signature in plain, P1 recovers his signature by computing
(cid:16)
(cid:17)
swp = (cid:96)k ⊕ H
σ(1)
σ(0)
swp
.
This guarantees the atomicity of the swap: P0 cannot obtain
v(1) without P1 transferring v(0), and vice versa.
Swap Timeout Phase. If at any point in the setup or lock
phase either of the party goes ofﬂine, then party Pb can recover
her coins from the joint address using the time-locked signature
σ(b)
swp, which she eventually learns by opening the VTS. Here,
as shown in Figure 1, party P1 can recover her coins ﬁrst as
T1 < T0. Thus, the parties are guaranteed to not lose their
coins if any participant goes ofﬂine for extended periods of
time.
3) Multi-Asset Atomic Swaps: The most general (and realis-
tic) setting that we consider is when P0 holds n coins (possibly
from different currencies) and P1 holds ˜n coins (from a possibly
disjoint set of currencies), which they want to swap atomically.
This situation is presented in Figure 2.
Fig. 2: Setting for a n-to-˜n swap.
Before delving into the details on how to modify our vanilla
protocol to support multi-asset swaps, let us pause and discuss
what kind of security we (intuitively) expect from such a
protocol. On P0 side, we want to ensure that P1 cannot claim
(or transfer) any of P0’s coin before P0 holds signatures on
transactions for all of P1’s coin. P0 can obtain P1’s coins by
posting the transactions and the corresponding signatures. The
coins are then considered transacted to P0. Conversely, we
want to guarantee that if any of P1’s coin is transacted to P0,
then P1 can simultaneously learn signatures on all transactions
that spend P0’s coins to P1.
To do this, we proceed by viewing the swap as a collection
of ˜n separate n-to-1 atomic swaps. Intuitively, this forces P0
to wait until the end of all ˜n iteration before publishing any
signature, as otherwise P1 would be able to claim all of P0’s
coins. To implement a single n-to-1 atomic swap we need to
be able to generate a single (cid:96)k that simultaneously locks n
signatures (σ1, . . . , σn) and condition their release on a single
signature ˜σ. We realize this extending our one-to-one locking
mechanism and computing (cid:96)k as
(cid:96)k = (σ1 ⊕ H(1||˜σ), . . . , σn ⊕ H(n||˜σ)) .
Since we model H as a random oracle, this allows us to stretch
the randomness extracted from ˜σ as much as we need. Note that
once ˜σ is revealed, all of the other signatures are simultaneously
unmasked. Running ˜n copies of this modiﬁed protocol once
5
for each of P0’s coins, allows us to achieve a secure n-to-˜n
multi-asset swap.
Shielded Addresses of Zcash. Our approach can also be ex-
tended to atomic swaps of shielded addresses of Zcash [26], with
the aid of 2PC protocols for generating SNARK proofs [43].
Zcash provides two types of addresses: shielded (that retain
privacy) and unshielded (that are trasnparent like Bitcoin
addresses), and prior works only support atomic swap for the
unshielded addresses of Zcash [44].
Trade-off with HTLC based Solutions. Note that in HTLC
based solutions (described in Section I-A) we implicitly assume
the adversary cannot force parties to go ofﬂine for too long. In
our VTS based solution, we implicitly assume that an adversary
cannot force a party not to perform local computation for too
long, for example by cutting off the computation power of
the party for extended periods of time. An advantage of our
approach is that a party only have to spend computational
effort to open their VTS if the other party does not respond
quickly. In other words, opening of VTS is only a deterrent
mechanism in case the parties do not instantaneously complete
the swap. On the other hand, in the HTLC approach, parties
have to pay the transaction fee/gas cost associated with the
HTLC invariably.
B. The Case of Schnorr/ECDSA Signatures
While our generic protocol satisﬁes all desired properties
simultaneously (non-custodial, universal, multi-asset), it falls
short in achieving concrete computational efﬁciency: The usage
of generic tools (such as general-purpose 2PC) might make
the cost of running such a protocol prohibitive for some users.
However, we can use the general blueprint established by the
approach to develop efﬁcient protocols for speciﬁc signature
schemes.
In this regard, we revisit our general framework to dramati-
cally improve its efﬁciency for the case where the signature
scheme veriﬁed by the ledgers is either Schnorr or ECDSA.
While this is a downgrade for the generality of our approach, we
remark that virtually all major cryptocurrencies rely on Schnorr
or ECDSA signatures, which allows us to remain compatible
with the vast majority of coins. In the following, we give a
cursory outlook at the aspects that we improve and we refer the
reader to Section V for a precise description of the protocol.
More Efﬁcient VTS. Time-lock encryption [45] in principle
lets us encrypt messages to the future, however there is no
known practically efﬁcient instantiation of their proposal. Prac-
tically efﬁcient VTS constructions tailored for Schnorr/ECDSA
signatures were presented in [34]. However, we observe that we
can further improve the efﬁciency by committing to the whole
signature key corresponding to pk (01) and pk (10) (instead of the
signature), since the public keys are used only once. Recall that
in Schnorr/ECDSA signatures, secret keys are integers x and
public keys are of the form (G, Gx), where G is the generator
of some cyclic group of prime order. Thus, instead of VTS, we
can generate commitments to a secret key x via a veriﬁable
timed discrete logarithm (VTD) scheme [34]. Concretely, the
VTD construction from [34] is far more efﬁcient than the
VTS constructions for Schnorr/ECDSA signatures in terms of
commitment generation and veriﬁcation, as the committer no
longer needs to prove that the committed signature is valid.
Instead, the committer needs to prove that the committed
value is a valid discrete logarithm of some known element,
which is a simpler algebraic statement. This allows us to
signiﬁcantly boost the efﬁciency of our setup phase. However,
in our protocol we need to ensure that the parties generate valid
VTD commitments to their shares of the secret key x as neither
party has access to the whole secret key at the beginning of
the protocol. We defer the details to Section V-D.
Avoiding General-Purpose 2PC. Instead of relying on a
general-purpose 2PC protocol to compute a “locked” signature,
we leverage atomic multi-hop locks [46] originally introduced
in the context of payment channel networks.5 On a high level,
their 2PC protocol lets party P0 and P1 jointly compute a pre-
signature ˜σ on a message m under the joint public key pk, with
respect to an instance Y of a hard relation R. The property of
interest here is that ˜σ is not a valid signature on the message m,
but can be adapted into a valid signature σ with the knowledge
of a witness y, such that (Y, y) ∈ R. Additionally, given the
pre-signature ˜σ and the valid signature σ, one can efﬁciently
extract the witness y for the instance Y . A ﬁrst approach would
be to use their protocol instead of a 2PC, however it turns out
that we can do even better by tweaking the composition of
different protocol instances.
Reducing the Number of Iterations. We show how to reduce
the number of iterations for the execution of lock protocol from
˜n · (n + 1) to an additive n + ˜n. The overall idea to do this, is
to let the parties engage in the 2PC protocol from [46] for each
swap transaction (n + ˜n in total) exactly once, generating a
pre-signature on the transaction under the corresponding joint
public key. Importantly, all the pre-signatures are generated
with respect to the same instance Y of a hard relation R, where
one of the two parties (in our case P0) knows the corresponding
witness y.
Care must be taken to ensure an ordering such that party P1
ﬁrst obtains all the pre-signatures on the transactions from P0 to
P1, before party P0 obtains any pre-signature on any transaction
from P1 to P0. This is to prevent P0 from completing any
pre-signature, since he knows the witness y. Once all the n + ˜n
pre-signatures are generated and available with both parties, the
swap can be completed by P0, using the knowledge of y. On
the other hand, P1 can extract the witness y from any of the
signatures posted by P0 and therefore turn his pre-signatures
into valid ones. This completes the swap.
Optimisations. We have two possible optimisations to reduce
computational work for both parties in terms of opening the
VTD commitments. In the ﬁrst optimisation, party P0 instead
of computing on n VTD commitments, can homomorphically
combine those commitments and work on opening only a single
VTD commitment. Similar optimisation is possible for party P1
5This functionality can be abstracted into what is referred to as adaptor
signature [47].
also. The technique is called batching VTD commitments [48]
and we discuss this in more detail in Appendix G.
In Section VI we implement the second optimization where
instead of n + ˜n VTD commitments, only 2 VTD commitments
are generated. Now the parties solve one commitment each
instead of n and ˜n like before. To do this, we exploit the key
structure in Schnorr/ECDSA signature schemes, where opening
one VTD commitment helps P0 learn n secret keys and vice
versa for P1. The parties additionally need to execute a joint
coin tossing protocol n + ˜n times which is signiﬁcantly cheaper
than computing on n + ˜n VTD commitments.
Optimising Number of Swaps. With the above optimisation,
the parties are still required to perform persistent computation
to open their respective VTD commitments. This could limit
the number of coins (n and ˜n) that the parties may want to
swap simultaneously with many other parties. However, the
persistent computation of opening a VTD commitment can be
securely outsourced to a decentralized service [49] at a market
determined cost. This relieves both parties of any potentially
heavy computation related to VTD opening. As a consequence,
provided the parties have enough funds to outsource VTD
openings, the number of coin swaps of a party is no longer
limited by its own computational power.
Optimistic Efﬁciency. More importantly, in the optimistic case
(i.e., where both parties P0 and P1 are honest and remain online
until the end of the protocol) our protocol terminates instantly,
without either party having to invest computational resources
into opening the VTD commitments. In practice, we expect
that the presence of VTD commitments will mostly function
as a deterrent for people not to misbehave and the parties will
not have to open them, except for rare cases. Therefore, in
the pessimistic case where parties need to use the deterrent
mechanism, parties need to dedicate one CPU core for solving
a certain number of batched VTD commitments.
Extensions. Finally, we show (Section V-E) how to handle a
mixture of Schnorr/ECDSA signatures even when implemented
over different curves (that deﬁne groups of different orders).
I I I . P R E L I M I N A R I E S
We denote by λ ∈ N the security parameter and by x ←
A(in; r) the output of the algorithm A on input in using r ←
{0, 1}∗ as its randomness. We often omit this randomness
and only mention it explicitly when required. The notation
[n] denotes a set {1, . . . , n} and [i, j] denotes the set {i, i +
1, . . . , j}. We consider probabilistic polynomial time (PPT)