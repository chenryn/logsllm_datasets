# 六、保护集群组件
在前面的章节中，我们研究了 Kubernetes 集群的架构。Kubernetes 集群由主组件(包括`kube-apiserver`、`etcd`、`kube-scheduler`、CoreDNS、`kube-controller-manager`和`cloud-controller-manager`)和节点组件(包括`kubelet`、`kube-proxy`和`container-runtime`组成。主组件负责集群管理。它们构成了集群的控制平面。另一方面，节点组件负责节点上的容器和容器的功能。
在 [*第 3 章*](03.html#_idTextAnchor091)*威胁建模*中，我们简要讨论了 Kubernetes 集群中的组件需要进行配置以确保集群的安全性。任何集群组件的泄露都可能导致数据泄露。环境配置不当是传统或微服务环境中数据泄露的主要原因之一。了解每个组件的配置以及每个设置如何打开新的攻击面非常重要。因此，集群管理员了解不同的配置非常重要。
在本章中，我们将详细介绍如何保护集群中的每个组件。在许多情况下，不可能遵循所有的安全最佳实践，但是如果攻击者试图利用易受攻击的配置，突出风险并制定缓解策略是很重要的。
对于每个主组件和节点组件，我们简要讨论 Kubernetes 集群中具有安全相关配置的组件的功能，并详细查看每个配置。我们查看这些配置的可能设置，并强调推荐的做法。最后，我们介绍`kube-bench`并介绍如何使用它来评估集群的安全状况。
在本章中，我们将涵盖以下主题:
*   保护 kube-apiserver
*   保护 kubelet
*   固定 etcd
*   保护 kube 调度程序
*   保护 kube-控制器-管理器
*   保护 coreens
*   对集群的安全配置进行基准测试
# 保护 kube-apiserver
`kube-apiserver`是你集群的入口。它实现了一个**表示状态转移** ( **REST** ) **应用编程接口** ( **API** )来授权和验证对对象的请求。它是在 Kubernetes 集群内通信和管理其他组件的中央网关。它执行三个主要功能:
*   **API 管理** : `kube-apiserver`公开用于集群管理的 API。开发者和集群管理员使用这些 API 来修改集群的状态。
*   **请求处理**:对对象管理和集群管理的请求进行验证和处理。
*   **内部消息传递**:API 服务器与集群中的其他组件进行交互，确保集群正常运行。
对应用编程接口服务器的请求在处理前要经过以下步骤:
1.  **认证** : `kube-apiserver`首先验证请求的来源。`kube-apiserver`支持多种认证模式，包括客户端证书、承载令牌、**超文本传输协议** ( **HTTP** )认证。
2.  **授权**:一旦验证了起源的身份，API 服务器验证允许起源执行请求。`kube-apiserver`默认支持**基于属性的访问控制** ( **ABAC** )、**基于角色的访问控制** ( **RBAC** )、节点授权、网络钩子进行授权。RBAC 是推荐的授权方式。
3.  **准入控制器**:一旦`kube-apiserver`认证并授权该请求，准入控制器解析该请求，以检查集群内是否允许该请求。如果该请求被任何接纳控制器拒绝，则该请求被丢弃。
`kube-apiserver`是集群的大脑。API 服务器的泄露会导致集群泄露，因此 API 服务器的安全至关重要。Kubernetes 提供了无数的设置来配置 API 服务器。接下来让我们看看一些与安全相关的配置。
要保护应用编程接口服务器，您应该执行以下操作:
*   **禁用匿名认证**:使用`anonymous-auth=false`标志将匿名认证设置为`false`。这确保了被所有身份验证模块拒绝的请求不会被视为匿名请求而被丢弃。
*   **禁用基础认证**:基础认证在`kube-apiserver`中为了方便支持，不宜使用。基本身份验证密码无限期保留。`kube-apiserver`使用`--basic-auth-file`参数启用基本身份验证。请确保不使用此参数。
*   **禁用令牌身份验证** : `--token-auth-file`为您的集群启用基于令牌的身份验证。不建议使用基于令牌的身份验证。静态令牌永远存在，需要重启应用编程接口服务器才能更新。客户端证书应该用于身份验证。
*   **使用 HTTPS** 确保与库贝莱的连接:默认情况下，`--kubelet-https`设置为`true`。确保该参数没有设置为`kube-apiserver`的`false`。
*   **禁用分析**:使用`--profiling`启用分析会暴露不必要的系统和程序细节。除非您遇到性能问题，否则通过设置`--profiling=false`禁用性能分析。
*   **禁用 alwaysacclave**:`--enable-admission-plugins`可用于启用默认未启用的准入控制插件。`AlwaysAdmit`接受请求。确保插件不在`--enabled-admission-plugins`列表中。
*   **使用 AlwaysPullImages** :准入控制确保节点上的映像在没有正确凭证的情况下无法使用。这可以防止恶意 pods 为节点上已经存在的映像创建容器。
*   **使用安全上下文拒绝**:如果`PodSecurityPolicy`未启用，应使用该准入控制器。`SecurityContextDeny`确保 Pod 不能修改`SecurityContext`升级权限。
*   **启用审核**:审核默认在`kube-apiserver`中启用。确保`--audit-log-path`设置为安全位置的文件。此外，确保审核的`maxage`、`maxsize`和`maxbackup`参数设置符合合规性预期。
*   **禁用 AlwaysAllow 授权**:授权模式确保来自拥有正确权限的用户的请求被 API 服务器解析。不要将`AlwaysAllow`与`--authorization-mode`一起使用。
*   **启用 RBAC 授权** : RBAC 是 API 服务器推荐的授权模式。ABAC 很难使用和管理。RBAC 角色和角色绑定的易用性和易更新性使 RBAC 适合经常扩展的环境。
*   **确保对 kubelet 的请求使用有效证书**:默认情况下，`kube-apiserver`对`kubelet`的请求使用 HTTPS。启用`--kubelet-certificate-authority`、`--kubelet-client-key`和`--kubelet-client-key`可确保通信使用有效的 HTTPS 证书。
*   **启用服务账户查找**:除了确保服务账户令牌有效，`kube-apiserver`还应验证令牌存在于`etcd`中。确保`--service-account-lookup`未设置为`false`。
*   **启用 PodSecurityPolicy 策略** : `--enable-admission-plugins`可用于启用`PodSecurityPolicy`。正如我们在第 5 章[](05.html#_idTextAnchor144)**中看到的，配置 Kubernetes 安全边界*`PodSecurityPolicy`用于定义 pod 的安全敏感标准。我们将在 [*第 8 章*](08.html#_idTextAnchor249)*中深入探讨如何创建 pod 安全策略来保护 Kubernetes pod*。*
**   **使用服务帐户密钥文件**:使用`--service-account-key-file`可以旋转服务帐户的密钥。如果未指定，则`kube-apiserver`使用来自**传输层安全性** ( **TLS** )证书的私钥来签署服务帐户令牌。*   **启用授权请求 etcd** : `--etcd-certfile`和`--etcd-keyfile`可用于识别对`etcd`的请求。这确保了任何未识别的请求都可以被`etcd`拒绝。*   **不要禁用服务账户准入控制**:该准入控制自动服务账户。启用`ServiceAccount`确保具有受限权限的自定义`ServiceAccount`可以用于不同的 Kubernetes 对象。*   **不要使用自签名证书请求**:如果`kube-apiserver`启用了 HTTPS，则应提供一个`--tls-cert-file`和一个`--tls-private-key-file`，以确保不使用自签名证书。*   **到 etcd** 的安全连接:设置`--etcd-cafile`允许`kube-apiserver`使用证书文件通过**安全套接字层** ( **SSL** )向`etcd`验证自身。*   **使用安全的 TLS 连接**:仅将`--tls-cipher-suites`设置为强密码。`--tls-min-version`用于设置最低支持的 TLS 版本。TLS 1.2 是推荐的最低版本。*   **启用高级审核**:将`--feature-gates`设置为`AdvancedAuditing=false`可以禁用高级审核。确保该字段存在并设置为`true`。高级审计有助于在发生违规时进行调查。*
 *在 Minikube 上，`kube-apiserver`配置如下:
```
$ps aux | grep kube-api
root      4016  6.1 17.2 495148 342896 ?       Ssl  01:03   0:16 kube-apiserver --advertise-address=192.168.99.100 --allow-privileged=true --authorization-mode=Node,RBAC --client-ca-file=/var/lib/minikube/certs/ca.crt --enable-admission-plugins=NamespaceLifecycle,LimitRanger,ServiceAccount,DefaultStorageClass,DefaultTolerationSeconds,NodeRestriction,MutatingAdmissionWebhook,ValidatingAdmissionWebhook,ResourceQuota --enable-bootstrap-token-auth=true --etcd-cafile=/var/lib/minikube/certs/etcd/ca.crt --etcd-certfile=/var/lib/minikube/certs/apiserver-etcd-client.crt --etcd-keyfile=/var/lib/minikube/certs/apiserver-etcd-client.key --etcd-servers=https://127.0.0.1:2379 --insecure-port=0 --kubelet-client-certificate=/var/lib/minikube/certs/apiserver-kubelet-client.crt --kubelet-client-key=/var/lib/minikube/certs/apiserver-kubelet-client.key --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname --proxy-client-cert-file=/var/lib/minikube/certs/front-proxy-client.crt --proxy-client-key-file=/var/lib/minikube/certs/front-proxy-client.key --requestheader-allowed-names=front-proxy-client --requestheader-client-ca-file=/var/lib/minikube/certs/front-proxy-ca.crt --requestheader-extra-headers-prefix=X-Remote-Extra- --requestheader-group-headers=X-Remote-Group --requestheader-username-headers=X-Remote-User --secure-port=8443 --service-account-key-file=/var/lib/minikube/certs/sa.pub --service-cluster-ip-range=10.96.0.0/12 --tls-cert-file=/var/lib/minikube/certs/apiserver.crt --tls-private-key-file=/var/lib/minikube/certs/apiserver.key
```
如您所见，默认情况下，在 Minikube 上，`kube-apiserver`并没有遵循所有的安全最佳实践。例如:默认不启用`PodSecurityPolicy`，默认不设置强密码套件和`tls`最低版本。集群管理员有责任确保应用编程接口服务器配置安全。
# 保护库布雷
`kubelet`是 Kubernetes 的节点代理。它管理 Kubernetes 集群内对象的生命周期，确保对象在节点上处于健康状态。
要保护`kubelet`，您应该执行以下操作:
*   **禁用匿名身份验证**:如果启用匿名身份验证，则被其他身份验证方法拒绝的请求将被视为匿名。确保为`kubelet`的每个实例设置`--anonymous-auth=false`。
*   **设置授权模式**:使用配置文件设置`kubelet`的授权模式。使用`--config`参数指定配置文件。确保授权模式列表中没有`AlwaysAllow`。
*   **旋转库伯莱证书** : `kubelet`证书可以使用`kubelet`配置文件中的`RotateCertificates`配置进行旋转。这应该与`RotateKubeletServerCertificate`一起使用，以自动请求服务器证书的轮换。
*   **提供证书颁发机构(CA)捆绑包**:CA 捆绑包由`kubelet`用来验证客户端证书。这可以使用配置文件中的`ClientCAFile`参数进行设置。
*   **禁用只读端口**:默认为`kubelet`启用只读端口，应该禁用。只读端口没有身份验证或授权。
*   **启用节点限制准入控制器**:准入控制器`NodeRestriction`只允许`kubelet`修改其绑定到的节点上的节点和 pod 对象。
*   **限制对库布雷应用编程接口**的访问:只有`kube-apiserver`组件与`kubelet`应用编程接口交互。如果尝试与节点上的`kubelet` API 通信，则是禁止的。这是通过将 RBAC 用于`kubelet`来保证的。
在 Minikube 上，`kubelet`配置如下:
```
root      4286  2.6  4.6 1345544 92420 ?       Ssl  01:03   0:18 /var/lib/minikube/binaries/v1.17.3/kubelet --authorization-mode=Webhook --bootstrap-kubeconfig=/etc/kubernetes/bootstrap-kubelet.conf --cgroup-driver=cgroupfs --client-ca-file=/var/lib/minikube/certs/ca.crt --cluster-domain=cluster.local --config=/var/lib/kubelet/config.yaml --container-runtime=docker --fail-swap-on=false --hostname-override=minikube --kubeconfig=/etc/kubernetes/kubelet.conf --node-ip=192.168.99.100 --pod-manifest-path=/etc/kubernetes/manifests
```
与应用编程接口服务器类似，并非所有安全配置都默认用于`kubelet`—例如，禁用只读端口。接下来，我们将讨论集群管理员如何保护`etcd`。
# 固定 etcd
`etcd`是 Kubernetes 用于数据存储的键值存储。它存储 Kubernetes 集群的状态、配置和机密。只有`kube-apiserver`可以访问`etcd`。`etcd`的妥协会导致集群妥协。
要保护`etcd`，您应该执行以下操作:
*   **限制节点访问**:使用 Linux 防火墙，确保只允许需要访问`etcd`的节点访问。
*   **确保 API 服务器使用 TLS**:`--cert-file``--key-file`确保对`etcd`的请求是安全的。
*   **使用有效证书** : `--client-cert-auth`确保来自客户端的通信是使用有效证书进行的，将`--auto-tls`设置为`false`确保不使用自签名证书。
*   **静态加密数据** : `--encryption-provider-config`传递给 API 服务器，确保数据在`etcd`中静态加密。
在 Minikube 上，`etcd`配置如下:
```
$ ps aux | grep etcd
root      3992  1.9  2.4 10612080 48680 ?      Ssl  01:03   0:18 etcd --advertise-client-urls=https://192.168.99.100:2379 --cert-file=/var/lib/minikube/certs/etcd/server.crt --client-cert-auth=true --data-dir=/var/lib/minikube/etcd --initial-advertise-peer-urls=https://192.168.99.100:2380 --initial-cluster=minikube=https://192.168.99.100:2380 --key-file=/var/lib/minikube/certs/etcd/server.key --listen-client-urls=https://127.0.0.1:2379,https://192.168.99.100:2379 --listen-metrics-urls=http://127.0.0.1:2381 --listen-peer-urls=https://192.168.99.100:2380 --name=minikube --peer-cert-file=/var/lib/minikube/certs/etcd/peer.crt --peer-client-cert-auth=true --peer-key-file=/var/lib/minikube/certs/etcd/peer.key --peer-trusted-ca-file=/var/lib/minikube/certs/etcd/ca.crt --snapshot-count=10000 --trusted-ca-file=/var/lib/minikube/certs/etcd/ca.crt
```
`etcd`存储 Kubernetes 集群的敏感数据，如私钥和机密。`etcd`的妥协是`api-server`成分的妥协。集群管理员在设置`etcd`时要特别注意。
# 保护 kube 调度程序
接下来，我们来看看`kube-scheduler`。正如我们在 [*第 1 章*](01.html#_idTextAnchor020)*中已经讨论过的，Kubernetes 架构*`kube-scheduler`负责将一个节点分配给一个 pod。一旦 Pod 被分配给一个节点，`kubelet`执行 Pod 。`kube-scheduler`首先对 pod 可以运行的节点集进行过滤，然后根据每个节点的评分，将 pod 分配给过滤后得分最高的节点。`kube-scheduler`组件的折衷会影响集群中 Pod 的性能和可用性。
要保护`kube-scheduler`，您应该执行以下操作:
*   **禁用剖析**:剖析`kube-scheduler`暴露系统细节。将`--profiling`设置为`false`会减少的攻击面。
*   **禁用与 kube-scheduler 的外部连接**:应禁用`kube-scheduler`的外部连接。`AllowExtTrafficLocalEndpoints`设置为`true`，启用与`kube-scheduler`的外部连接。确保使用`--feature-gates`禁用该功能。
*   **启用设备**:默认情况下，`kube-scheduler`启用`AppArmor`。确保`kube-scheduler`没有禁用`AppArmor`。
在 Minikube 上，`kube-scheduler`配置如下:
```
$ps aux | grep kube-scheduler
root      3939  0.5  2.0 144308 41640 ?        Ssl  01:03   0:02 kube-scheduler --authentication-kubeconfig=/etc/kubernetes/scheduler.conf --authorization-kubeconfig=/etc/kubernetes/scheduler.conf --bind-address=0.0.0.0 --kubeconfig=/etc/kubernetes/scheduler.conf --leader-elect=true
```
与`kube-apiserver`类似，调度程序也没有遵循所有的安全最佳实践，例如禁用概要分析。
# 保护库比-控制器-管理器
`kube-controller-manager`管理集群的控制回路。它通过应用编程接口服务器监控集群的变化，旨在将集群从当前状态移动到所需状态。默认情况下，`kube-controller-manager`附带多个控制器管理器，例如复制控制器和名称空间控制器。`kube-controller-manager`的妥协可能导致对集群的更新被拒绝。
要保护`kube-controller-manager`，您应该使用- `-use-service-account-credentials`，当与 RBAC 一起使用时，确保控制回路以最低权限运行。
在 Minikube 上，`kube-controller-manager`配置如下: