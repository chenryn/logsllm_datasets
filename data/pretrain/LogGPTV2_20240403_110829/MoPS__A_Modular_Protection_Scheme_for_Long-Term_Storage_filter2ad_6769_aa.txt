title:MoPS: A Modular Protection Scheme for Long-Term Storage
author:Christian Weinert and
Denise Demirel and
Mart&apos;ın A. Gagliotti Vigil and
Matthias Geihs and
Johannes Buchmann
MoPS: A Modular Protection Scheme for
Long-Term Storage
Christian Weinert
TU Darmstadt, Germany
PI:EMAIL
Denise Demirel
TU Darmstadt, Germany
ddemirel@cdc.informatik.tu-
darmstadt.de
Martín Vigil
UFSC, Brazil
PI:EMAIL
Matthias Geihs
TU Darmstadt, Germany
mgeihs@cdc.informatik.tu-
darmstadt.de
Johannes Buchmann
TU Darmstadt, Germany
buchmann@cdc.informatik.tu-
darmstadt.de
ABSTRACT
Current trends in technology, such as cloud computing, al-
low outsourcing the storage, backup, and archiving of data.
This provides eﬃciency and ﬂexibility, but also poses new
risks for data security.
It in particular became crucial to
develop protection schemes that ensure security even in the
long-term, i.e. beyond the lifetime of keys, certiﬁcates, and
cryptographic primitives. However, all current solutions fail
to provide optimal performance for diﬀerent application sce-
narios. Thus, in this work, we present MoPS, a modular pro-
tection scheme to ensure authenticity and integrity for data
stored over long periods of time. MoPS does not come with
any requirements regarding the storage architecture and can
therefore be used together with existing archiving or stor-
age systems. It supports a set of techniques which can be
plugged together, combined, and migrated in order to create
customized solutions that fulﬁll the requirements of diﬀerent
application scenarios in the best possible way. As a proof
of concept we implemented MoPS and provide performance
measurements. Furthermore, our implementation provides
additional features, such as guidance for non-expert users
and export functionalities for external veriﬁers.
Keywords
long-term security;
tegrity; cloud computing; eﬃciency
long-term archiving; authenticity;
in-
1.
INTRODUCTION
The development of solutions that allow to preserve im-
portant security goals such as authenticity and integrity
even in the long run has become an important research di-
rection. During the last decades, the way documents are
stored changed from secure oﬄine media, e.g. hard disks,
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
ASIA CCS ’17, April 02-06, 2017, Abu Dhabi, United Arab Emirates
c(cid:13) 2017 ACM. ISBN 978-1-4503-4944-4/17/04. . . $15.00
DOI: http://dx.doi.org/10.1145/3052973.3053025
to company-wide document management systems. Besides
these interconnected systems, the increasing availability of
reliable high-bandwidth Internet connections makes outsour-
cing of storage, backup, and archiving into the cloud increas-
ingly attractive. These technological trends allow for higher
eﬃciency and ﬂexibility, but also pose new risks for data
security.
Classical protection schemes provide only a suﬃcient level
of protection for the time interval these schemes are consid-
ered secure for the chosen parameters and keys. Also, in
practice, it must be considered that attackers might get ac-
cess to keys, e.g. by stealing smartcards or hacking backup
servers.
Related Work and Problem Description.
Up until now, various protection schemes that allow to
archive data securely even in the long-term have been de-
veloped, i.e. the AdES family of schemes [3], ERS [4, 2],
CIS [5], CISS [13], CN [6], and AC [11].
In [10], the au-
thors provide a rigorous summary of all existing protection
schemes that provide long-term authenticity and integrity
in archiving systems. However, none of them provides an
eﬃcient solution for diﬀerent scenarios which may appear
in practice and the authors do not discuss solutions to this
problem.
Assume, for instance, all electronic documents generated
in a hospital should be stored such that their authenticity
and integrity is protected. If such large amounts of docu-
ments are generated and stored, ERS is currently the most
eﬃcient solution with respect to initializing and maintain-
ing the protection. However, when the record of a patient
consisting of several ﬁles is opened and an eﬃcient proce-
dure for checking its authenticity and integrity is needed,
CIS or CISS are the methods of choice. Thus, a new scheme
would be required which, at the same time, provides an ef-
ﬁcient veriﬁcation process for folders, like CIS or CISS, and
an eﬃcient process for generating and maintaining the data
needed to protect the folders, like ERS. For some scenarios
it might be possible to identify exactly one approach after
reviewing the state of the art. However, besides the fact
that an expert is needed who selects and implements the so-
lution, another drawback of this approach is that the access
pattern for documents might change over time. While the
patients are still alive, their medical records are opened and
436new ﬁles are added on a regular basis. This makes CIS or
CISS an interesting solution. However, when a patient is
deceased, the access pattern changes and a migration to a
simple document protection, e.g. AdES, CN, or AC, would
be more eﬃcient.
Contribution.
The previously mentioned archiving schemes have the fol-
lowing shortcomings: First, each scheme is only eﬃcient for
very speciﬁc access patterns. This requires the existence of
experienced users who are able to review the state of the
art to choose the most suitable solution. Furthermore, in
many cases the most eﬃcient solution can only be gained by
combining several techniques, thereby requiring even expert
knowledge. Second, there are scenarios in which access pat-
tern change over time and no archiving scheme is available
that supports migration.
To address these shortcomings we ﬁrst analyzed the ex-
isting proposals for long-term archiving in order to extract
reusable techniques and identiﬁed for which trust assump-
tions and access patterns they are most suitable. The out-
come is a toolbox of several techniques (presented in Section
3), i.e. attestation techniques and data structures, that can
be plugged together in order to instantiate customized pro-
tection schemes, thereby addressing many diﬀerent appli-
cation scenarios. We focused on authenticity and integrity
protection, as these two security goals are addressed with
similar measures. Performing a corresponding analysis for
protection schemes providing long-term conﬁdentiality is left
for future work.
Furthermore, our toolbox comes with two features: First,
it allows combining data structures, thereby increasing the
amount of possible protection schemes and correspondingly
the amount of applications for which eﬃcient solutions are
available (presented in Section 4). Second, it allows migrat-
ing between diﬀerent protections schemes, thereby address-
ing that application scenarios change over time (presented
in Section 5).
Based on this toolbox we developed and implemented the
ﬁrst modular protection scheme for long-term storage, called
MoPS. Our implementation provides tools with graphical
user interfaces for signing documents, protecting documents
in the long-term, and verifying the protection of documents.
Furthermore, it comes with wizard-based guidance to sup-
port non-expert users when creating protection schemes and
updating the protection of documents. Note that this makes
our solution a very important contribution for practical use
since each user can set up and maintain customized storage
solutions even without expert knowledge. Finally, MoPS
contains export functionalities for stored documents and
their proofs of existence.
Structure.
This paper is organized as follows: First, in Section 2,
we explain how authenticity and integrity can be preserved
in the long run. Then, in Section 3, we present our set of
techniques, show how they can be combined in Section 4,
and explain how migrating between diﬀerent conﬁgurations
is possible in Section 5.
In Section 6 we provide details
regarding our implementation and conclude with a summary
and future work in Section 7.
2. LONG-TERM AUTHENTICITY AND IN-
TEGRITY PROTECTION
To provide authenticity and integrity for electronic docu-
ments, digital signature schemes are used. More precisely,
when a document is stored, the document owner signs the
document with its private signature key following the hash-
and-sign paradigm1. This allows any third party retrieving
the document to verify that it has been signed by the doc-
ument owner (authenticity) and that the document has not
been modiﬁed (integrity). However, this solution does not
provide authenticity and integrity in the long run, because
signatures and hashes are only secure for a limited period of
time. One threat to the security of signature schemes is that
a malicious party might get access to the private keys, e.g.
by stealing smartcards. Alternatively, an attacker can run a
brute force attack by simply trying out all possible private
keys, thereby identifying the used ones. This attack also
allows violating the security of hash functions, since they
are only secure as long as an attacker is not able to ﬁnd a
collision, i.e. two documents which lead to the same hash
value. Furthermore, over time new attacks or technologi-
cal progress may allow breaking signature schemes or hash
functions even more eﬃciently. In practice, the validity of
signature keys is the limiting factor since they are only valid
for some years. This makes it very likely that the storage
period of a document exceeds the time frame for which a
signature remains secure. In the following, we will denote
the time period in which signature keys, signatures, or hash
values are secure with the term validity period.
To address that signatures come with a limited validity
period and to provide authenticity and integrity even in the
long run, the security of signatures is prolonged. More pre-
cisely, before the validity period of a signature is about to
end, a so-called proof of existence for the signature and the
document is generated. A simple approach to create such
a proof is to generate an attestation for the data by send-
ing it to a trusted third party, e.g. a timestamping author-
ity (TSA), which signs it together with the current time.
Thus, although an attacker might get access to the private
signing key of the document owner enabling it to forge sig-
natures, a veriﬁer can distinguish whether a signature has
been generated before or after the signature key became in-
secure. Furthermore, the attacker cannot change signatures
which have already been generated. Therefore, the attesta-
tion prolongs the security of the signature and consequently
the authenticity and integrity of the signed document.
However, also attestations come with a validity period de-
termined by the generated signatures and hash values. Thus,
this procedure is performed repetitively. One example to ac-
complish this works as follows: The initial attestation a0 is
generated by hashing the document together with its signa-
ture and signing the resulting hash value together with the
current time. We will refer to the procedure generating the
initial attestation as initialization procedure. Then, when
the security of the signature or the hash value is about to
fade out, i.e. the validity period of a0 is about to end, a
renewal procedure is performed during which an attestation
a1 for a0 is generated.
In other words, the proof of exis-
tence consists of a chain a0, . . . , an of n + 1 attestations. If
the latest attestation an is still secure, it proves that an−1
1Using the hash-and-sign paradigm, the size of messages is
reduced using a hash function and the hash value is signed.
437Table 1: Assumptions and requirements for attesta-
tion techniques grouped by corresponding issuers.
WVM TSA NA
Attestation Issuer
Issuer Trust Assumptions
WVM cannot be modiﬁed or deleted
Correct time included
Input veriﬁed correctly
Security Assumptions
Hash function security
Signature scheme security
Infrastructure Requirements
Witnesses for issuing
Public key infrastructure












existed at a point in time when the parameters used to gen-
erate an−1 were still secure. In the same way an−1 proves
the existence of an−2, and so on, until a0. a0 then proves
the existence of the signature to a document, which in turn
proves the authenticity and integrity of the document.
3. MODULARIZATION OF TECHNIQUES
Analyzing the state of the art in long-term archiving, there
are mainly two criteria to distinguish diﬀerent techniques.
First, the attestation techniques used to generate the attes-
tations. Second, the data structures specifying which infor-
mation is encapsulated in the proofs of existence and which
additional metadata must be stored.
3.1 Attestation Techniques
The long-term archiving schemes proposed so far make use
of three diﬀerent techniques to generate attestations, where
each technique comes with diﬀerent security and trust as-
sumptions. Table 1 provides an overview of these assump-
tions as well as infrastructure requirements for the attesta-
tion techniques grouped by the corresponding issuers. All
approaches described below make use of cryptographic prim-
itives which are only secure for a limited period of time for
the chosen parameters. Thus, all attestations generated with
these techniques are only secure within a certain validity pe-
riod.
3.1.1 WVM-Based Timestamps
WVM-based timestamps [1] are generated by publishing
the input data, usually received in hashed form, on widely
visible media (WVM), e.g. bulletin boards or newspapers.
To verify such a timestamp, the veriﬁer must check that the
hash has been published at the claimed point in time. The
veriﬁcation data needed to perform this procedure depends
on the instantiation of the WVM and is out of scope.
Using this attestation technique, it is necessary to trust
in the correct functionality of the WVM. More precisely, it
must not be possible to delete or modify published data.
Furthermore, since only hashed data is published, it is as-
sumed that the used hash function is secure for the cho-
sen parameters within the validity period of the attestation.
When the security of the hash function is about to fade out,
all data must be rehashed. Furthermore, since these attesta-
tions inherit the time from the WVM, witnesses are needed
testifying that the data has been published at the claimed
point in time.
Signature-Based Timestamps
3.1.2
Signature-based timestamps are issued by a trusted third
party called timestamping authority (TSA). More precisely,