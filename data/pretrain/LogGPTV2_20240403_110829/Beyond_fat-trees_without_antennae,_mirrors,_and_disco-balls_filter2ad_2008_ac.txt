### 4.1 Static vs. Unrestricted and Restricted Dynamic Networks: A Toy Example

Consider a network with 54 switches, each equipped with 12 ports, of which 6 are connected to servers. The relevant devices and links for this discussion are depicted in Figure 4. Assume that the traffic matrix (TM) involves only the 9 racks at the bottom, rendering the servers on the other 45 switches inactive and irrelevant. These 45 switches can be treated as 6-port devices and connected in a standard fat-tree topology with \( k = 6 \). This configuration exposes 54 ports to traffic sources and sinks, providing full bandwidth between all active servers.

Using the topology in Figure 4, the unrestricted dynamic model can achieve full throughput. Even if direct-connection matchings are limited but unlimited buffering is allowed, full throughput can still be achieved by dynamically reconfiguring connections between the 9 racks in a round-robin fashion. At any moment, the network can deliver the same capacity as required by the servers. However, in practice, buffering cannot be unlimited, and reconfiguration overhead must be considered. For example, ProjecToR’s recommended duty cycle could achieve 90% of full throughput.

Notice that the topology in Figure 4 does not directly connect any of the 9 switches with traffic demands, unlike a restricted dynamic network. Without buffering, all flows must be serviced concurrently, implying no advantage in moving links around for all-to-all traffic between these switches. This makes the restricted dynamic model no better than the best possible static topology connecting the 9 racks using their direct links. The performance of such a static topology is upper-bounded at 80% of full throughput.

Interestingly, the best-known static networks of the same cost can achieve full throughput for near-worst-case traffic patterns across the same number of communicating servers without prior knowledge of which servers will be active. We verified this with experiments over Jellyfish in two configurations supporting the same number of servers:
1. With 9 network ports at each of the 54 switches instead of 6 (i.e., \( \delta = 1.5 \)).
2. With 12 ports for all switches but 81 switches (again, \( \delta = 1.5 \)).

Other expander-based data centers would yield similar results. This toy example illustrates the core question: do fewer, more expensive, but flexible connections in dynamic networks compare favorably to a larger number of cheaper static connections? We will explore this question quantitatively later, but it is also useful to consider several qualitative factors that may disadvantage dynamic networks.

### 4.2 Barriers to the Deployment of Dynamic Networks

Dynamic topologies are an intuitive and exciting idea but pose unique challenges for deployment in data centers:
- **Device Packaging and Spatial Planning:** Unfamiliar problems in device packaging and spatial planning.
- **Monitoring and Debugging:** Monitoring and debugging highly ephemeral networks.
- **Environmental Factors:** Impact of dust, vibration, and temperature on device alignment and functioning.
- **Reliability and Lifetime:** Lack of clarity on the reliability and lifetime of devices in unintended environments.
- **Operator Experience:** Lack of operator experience with the involved devices.

While not all criticisms apply to all proposals, some are fundamental, such as monitoring and debugging networks that are constantly changing. Deploying a different static topology like Xpander may also require changes, but these barriers are substantially lower, as evidenced by the recent deployment of the DragonFly topology in high-performance computing.

### 5. Static ≠ Inflexible

This section compares static and dynamic networks, focusing on the topology models themselves, while neglecting inefficiencies from routing, congestion control, and dynamic topology optimization. Section 6 will address translating results from this idealized setting to low flow-completion times under dynamic, skewed network traffic.

We verified that Xpander and Jellyfish achieve identical performance. Experiments use Jellyfish due to its ease of construction with arbitrary switch and port counts, allowing us to include two other recent static networks for comparison. Results in Section 6 use Xpander to avoid concerns about Jellyfish's randomness.

Both dynamic and static networks are evaluated under skewed but difficult (ideally, worst-case) TMs. We use a series of skewed TMs, increasing the fraction of server racks participating in the TM, with no flows between non-participating racks. For static networks, we use longest matching TMs, where each participating rack sends all its traffic to one other rack, maximizing distance between communicating racks using a heuristic: maximum-weight matching, with weights being the distances between racks. These TMs have been shown empirically to be harder than all-to-all TMs.

In the context of dynamic networks, longest matching TMs are meaningless because distances between racks can be changed by reconfiguring the topology. The unrestricted model can achieve per-server throughput \( \min\{1, r/s\} \), where \( r \) is the number of network ports and \( s \) is the number of server ports, independent of the number of ToRs, ignoring reconfiguration time and buffering.

For the restricted model, we compute an upper-bound on the performance of any topology that can be built using the fixed network degree \( r \) at each ToR, as explained in Section 4.1.

**Results:**
- Non-fat-tree networks achieve much higher performance than a same-cost oversubscribed fat-tree, particularly when fewer servers participate in the TM.
- Figure 5(a) shows results for SlimFly, Jellyfish, and the throughput proportionality (TP) curve using Jellyfish's throughput at \( x=1.0 \) as the base.
- For a hypothetical TP-network built at the same oversubscription as Jellyfish, when fewer than 35% of servers are involved, each would obtain full throughput.
- The restricted dynamic topology model (with two-thirds the network ports used by the static networks, i.e., \( \delta = 1.5 \)) performs poorly.
- The unrestricted dynamic model (with \( \delta = 1.5 \)) achieves lower throughput than Jellyfish when a smaller fraction of servers is involved.
- Recent measurements across 4 large production clusters showed 46-99% of rack-pairs exchanging no traffic in a representative 5-minute window.

Clearly, reducing the number of network ports hurts dynamic topologies due to ToR-level bottlenecks. Instead of reducing network ports for dynamic networks, we evaluated Jellyfish with \( \delta \times \) the network ports. Even with \( \delta = 1.5 \), Jellyfish achieved full throughput in the regime of interest.

**Beyond comparisons with dynamic networks:**
- We quantify how much more efficient expander-based networks can be than fat-trees for skewed traffic.
- Figure 6(a) shows results for Jellyfish built using the same number of servers and 80%, 50%, and 40% of the switches available to a full fat-tree with \( k=20 \).
- With 50% of the fat-tree’s switches, Jellyfish can provide nearly full bandwidth as long as <40% of servers participate in the TM.
- Figure 6(b) shows that Jellyfish’s advantage is consistent or improves with scale, as it is built using the same set of switches as full fat-trees with \( k=12, 24, \) and \( 36 \), but with twice the servers in each case.

### 6. Simple, Effective Routing on Static Networks

Routing on expander-based networks is nontrivial, and solutions have depended on MPTCP over k-shortest paths. While this approach has been shown to achieve good performance, it is complex. We propose a robust ECMP-VLB hybrid scheme that achieves high performance across a diversity of workloads.

**Results:**
- Figures 5 and 6 cover oversubscription ranging from 1:4 to nearly 1:1.
- Throughout the regime of interest, for large \( \alpha \), both unrestricted dynamic networks (with \( \delta = 1.5 \)) and Jellyfish achieve full throughput.
- For smaller values of \( \alpha \), both fall short, but Jellyfish compares well with dynamic networks.

In summary, known static topologies provide substantial efficiency gains over fat-trees in a fluid-flow model, and they fail to provide an advantage over these static topologies, especially under skewed workloads.