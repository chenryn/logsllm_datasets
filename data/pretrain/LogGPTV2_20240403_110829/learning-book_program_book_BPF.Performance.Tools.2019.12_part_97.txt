int kprobe_blk_account_lo_completion (atruct pt_zega *ctx, stxuct request *req)
ist. increnent (bpf_1og21 (xeq->_data_1en / 1024) 1 
return 0
Now, the bytes value is fetched from struct request and its __data_len member. Since I'm now
processing struct request, I have needed to include the linux/blkdlev.h header that has its def-
nition. Since I'm not using the second bytes argument to this function, I have not declared it
in the function signature: trailing unused arguments can be elided, which still preserves the
position of earlier arguments.
d a u pougap (xo, saud onns age) squaune a e s Suruaddeq Aeau s,eu
program are mapped to the function calling convention registers. On x86_64, this is %rdi,
%rsi, %rdx, etc. If you write the wrong function signature, the BPF tool will compile success-
fully and apply that signature to the registers, leading to invalid data.
Shouldn’t the kernel know what these function arguments are? Why am I redeclaring them in
the BPF program? The answer is that the kernel does know, if kernel debuginfo is installed on
your system. But that'’s rarely the case in practice, since the debuginfo files can be large.
Lightweight metadata has been in development that should solve this problem: BPF Type
Format, which can be included in the kernel vmlinux binary, and one day may be available
for user-level binaries as well. This should hopefully remove the need to include header files
and redleclare function signatures. See Section 2.3.9 in Chapter 2.
---
## Page 792
BCC Tool Development
755
Tool 4: biolatency
The following are al the lines from my original biolatency.py tool, enumerated and
commented:
1#!/usz/bln/python
atibility-inports
Line 1: We're Python.
Line 2 suppresses a lint warning (these were added for Facebook's build environment).
3#
4  biolatency
Summarize block device I/0 latency as a histogran
5 #
For Linux, uses BCC, eBPF.
6 
7 USAGE: biolatency [h] [T] [-Q] [-n] [-D] [ntezval][count]
8f
9 # Copyzlght [c]  2015 Bzendan Gregg-
10 f Licensed under the Apache License, Version 2.0 (the *License*)
11#
12 20-Sep-20151
Brendan Gregg  C
Created this
I have a certain style to my header comments. Line 4 names the tool and has a single-sentence
description. Line 5 adds any caveats: for Linux only, uses BCC/eBPE.? It then has a synopsis
line, a copyright, and a history of major changes.
13
14 from _future_ inport print_function
15 fros bce inport BFT
16 from tine inport sleep, stxftine
17 inport argparse
Note that I import BPE, which Ill use to interact with BPF in the kernel.
18
19 # azguments
21
/b1olatency
# surnarlze block I/0 latency as a hlstogran
22
/biolatency 1 10
 print 1 second sumnaries, 10 tines
23
/blolatency
-nT 1
# 1s sunnarles, mLlllseconds, and tinestamps
24
,/biolatency =Q
 include 0S queued time in I/o tine
25
/blolatency =
shov each disk device separately
59yep -ad89, 941 T
Sd8 1 Ifeo jsn[ ew. 
---
## Page 793
756
Appendix C
26 ***
27 parser
) xoszegyvesmbzy* eszedbxe
28
description=*Sumnarize block device I/o latency as a histogran*,
2.9
fornatter_class=argpazse ,RaxDescriptionHelpFormatter,
30
epilog=exanples)
31 parser ads_arqunent (*-T", "--tlmestanpa, action=*store_true*,
32
helg=*include tinestanp on output*)
33 parser add_argunent (*-*, default=999s9999,
410
helg=*output interval, in seconds*)
41 parser,add_arguent (*counta, nazgs=*>*, default=s99s99,
2
(gqndno go aqunu,da
43 args = paraer,parse_args ()
44 countdovn - int(args,count)
45 debug = 0
16
Lines 19 to 44 are argument processing. I'm using Python’s argparse here.
My intent is to make this a Unix-like tool, something similar to vmstat(8) or iostat(1), to make
it easy for others to recognize and learn—hence the style of options and arguments and also
have aded a mode to ump per-event details but made that aseparate tool, bisnoopp.
to do one thing and do it well (in this case, showing disk I/O latency as a histogram). I could
You may be writing BCC/eBPF for other reasons, including agents to other monitoring soft-
ware, and don’t need to worry about the user interface.
47  define BPF program
** = 1x"gdg Bb
49 finclude >
50 #1nclude 
51
52 typedef stxuct disk_key ↑
53
char disk[0ISK_NAME_LEN]
54
u64 s1ot
"x"eTP(55
56 BPF_HAsH (start, struct request *);
57 STORAGE
58
---
## Page 794
BCC Tool Development 
757
59 // tine block I/0
60 int trace_req_start (struct pt_regs *ctx, struct request *xeq)
61I
62
 () u"faxgdq = s 9n
63
start.update (&reg 6ts) 
64
return 0:
651
67 // ostput
66
68 int trace_req_completion (atruct pt_rega *ctx, stxuct request *reg)
69↑
.
u64 *tsp, delta,
71
72
// fetch tinestanp and calculate delta
73
tsp = start.lookup (6reg) 
74
1f (tsp == 0) (
75
return 0;
snesT peestu //
76
77
delta = bpf_ktime_get_ns() - *tsp
BL
FACTOR
79
80
//stoxe as hlstogzan
81
STORE
82
83
start. delete (&reg) 
B4
return 0;
851
86 "*e
The BPF program is declared as an inline C assigned to the variable bpf_text.
Line S6 declares a hash array called *start*, which uses a struct request pointer as the key.
a pue (suagatupxgdq Susn duresau e supsag uogoung (ressbar"aoen a
stores it in this hash, keyed by *req. (I'm just using that pointer address as a UUID.) The
trace_req_completion0 function then does a lookup on the hash with its *req, to fetch the
start time of the request, which is then used to calculate the delta time on line 77. Line 83
deletes the timestamp from the hash.
ueu se uaq pue sastau sog , saud onus e  uaq suogoung asa o sadqogod at
of the probed function arguments as you want to include. I’ve included the first function
argument in each, struct request *.
This program also declares storage for the output data and stores it, but there's a problem:
biolatency has a D option to emit per-disk histograms, instead of one histogram for every-
thing, and this changes the storage code. So this BPF program contains the text STORAGE and
---
## Page 795
758
Appendix C
STORE (and FACTOR) which are merely strings that I'Il search and replace with code next,
harder to debug.
depending on the options. Id rather avoid code-that-writes-code if possible, since it makes it
87
88fcode substitutions
B91f args,ni1liseconds:
bpf_text = bpf_text,replace (*FACToR*, *de1ta /= 1000000>*)
91
label = "nsecs*
92 else:
E6
bpf_text = bpf_text,replace (*FACToR*, *de1ta /= 1000*)
94
label = usecs*
95 1f axgs disks:
96
bpf_text = bpf_text,replace (*SToRAGE*,
97
*BPF_HISTOGRAN (dist, d1sk_key_t) =*)
bpf_text = bpf_text.replace (*sroRs′,
99
*dlsk_key_t key = [ s1ot = bpf_1og21 (de1ta) l: * +
100
bpf_probe_read (skey, disk, slzeof (key -disk) ,* +
101
req=>rq_Gisk=>disk_nane) : di.st. increnent (key) : *)
102 else1
103
bpf_text = bpf_text., replace (*STORAGE*, *BPF_HISTOGRAx(dist) *)
104
bpf_text = bpf_text,replace (*sToRE′,
105
*dlst, 1ncrement (bpf_1og21 (de1tal/ # *)
The FACTOR code just changes the units of the time I’m recording, depending on the 
option.
Line 95 checks if per-disk has been requested (D), and if so, replaces the STORAGE and
STORE strings with code to do per-disk histograms. It uses the disk_key struct declared
on line 52, which is the disk name and the slot (bucket) in the power-of-two histogram.
Line 99 takes the delta time and turns it into the power-of-two slot index using the
bpf_log210 helper function. Lines 100 and 101 fetch the disk name via bpf_probe_read(),
which is how all data is copied onto BPF's stack for operation. Line 101 includes many
dereferences: req->rq_disk, rq_disk->disk_name: BCC’s rewriter has transparently turned
these into bpf_probe_read()s as well.
Lines 103 to 105 deal with the single histogram case (not per disk). A histogram is declared
named °dist° using the BPF_HISTOGRAM macro. The slot (bucket) is found using the
bpf_log210 helper function and then incremented in the histogram.
This example is a little gritty, which is both good (realistic) and bad (intimidating). See the
tutorial I linked to earlier for more simple examples.
106 1f debug:
LOT
print (bpf_text.)
---
## Page 796
BCC Tool Development
759
Since I have code that writes code, I need a way to debug the final output. If debug is set, print
it out.
109 # 1oad BPF progran
108
110 b = BPF(text=bpf_text)
111
if arga,queued:
112
b,attach_kprobe (event=*blk_account_io_start*, fn_nane=trace_req_start*)
113 else:
114
b,attach_kprobe (event=*b1k_start_request*, fn_nane=*trace_reg_start*)
115
b,attach_kprobe [event=*b1k_nq_start_request*, Cn_nane=*trace_req_start")
116 b,attach_kprobe (event=*b1k_sccount_io_completion*,
117
(guoT1eduoobsxssex1g=sueuug
118
Line 110 loads the BPF program.
Since this program was written before BPF had tracepoint support, I wrote it to use kprobes
(kernel dynamic tracing). It should be rewritten to use tracepoints, as they are a stable API,
although that then also requires a later kernel version (Linux 4.7+).
biolatency.py has a Q option to include time queued in the kernel. You can see how it's
implemented in this code. If it is set, line 12 attaches the BPF trace_req_start() function with
a kprobe on the blk_account_io_start( kernel function, which tracks the request when it's
first queued in the kernel. If not set, lines 114 and 115 attach the BPF function to different
kernel functions, which is when the disk I/O is issued (it can be either of these). This only
works because the first argument to any of these kernels functions is the same: struct
request *. If their arguments were different, I’d need separate BPF functions for each to
handle that.
119 print("rraclng block device I/0... H1t Ctx1=C to end.")
120
121 # output
122 exiting = 0 if args,interval else 1
123 d1st = b-get_table ("dist)
Line 123 fetches the *dist* histogram that was declared and populated by the
STORAGE/STORE code.
124 xh.ile (11 :
125
try:
126
sleep (int (args,interva1))
127
except KeyboardInterrupt:
1.28
exiting = 1
129
130
print ()
---
## Page 797
760
Appendix C
131
if args.tinestamp1
132
print (*s=8s\n* $strftime (*s8: s;ss*) , eng**)
133
134
dlst.print_log2_hist (label, *disk*)
135
dist.clear1)
136
137
countdovn
138
== 1
exit ()
D:
139
This has logic for printing every interval a certain number of times (countdown). Lines 131
and 132 print a timestamp if the T option was used.
Line 134 prints the histogram, or per-disk histograms., The first argument is the label variable,
which contains *usecs* or *msecs* and decorates the column of values in the output.
The second argument labels the secondary key if dist has per-disk histograms. How
print_log2_hist() can identify whether this is a single histogram or has a secondary key, Ill
leave as an adventurous exercise in code spelunking of BCC and BPF internals.
Line 135 clears the histogram, ready for the next interval.
Here is some sample output, using  for per-disk histograms:
 blolatency -D
Hit Ctr1-C to end.
d1sk = 'xvdb′
usecs
1count
distribution
0 -> 1
: 0
2 -> 3
: 0
8 -> 15
f -> 7
: 0
16 -> 31
: 0
: 0
32 -> 63
: 0
64 -> 127
: 18
/*++*
128 -> 255
: 167
  ×
25 6 -> 511
: 90
] + +
disk = 'xvdc*
usecs
coun.t
distri.bution
0 -> 1
: 0
2 > 3
: 0
4 -> 7
: 0
8 -> 15
: 0
16 -> 31
0
---
## Page 798
BCC Tool Development
761
32 -> 63
: 0
64 -> 127
: 22
: 179
] + ++ +
128 -> 255
256 -> 511
: 88
[. - - ]
More Info
Refer to the section *Resources, at the beginning of this appendix, for more about BCC tool
development, and see Chapter 4 for BCC in general.
---
## Page 799
This page intentionally left blank
---