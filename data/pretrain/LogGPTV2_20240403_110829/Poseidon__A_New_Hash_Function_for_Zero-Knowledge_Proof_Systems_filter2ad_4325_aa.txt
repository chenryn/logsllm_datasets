# Poseidon: A New Hash Function for Zero-Knowledge Proof Systems

## Authors
- Lorenzo Grassi, Radboud University Nijmegen
- Dmitry Khovratovich, Ethereum Foundation and Dusk Network
- Christian Rechberger, IAIK, Graz University of Technology
- Arnab Roy, University of Klagenfurt
- Markus Schofnegger, IAIK, Graz University of Technology

**Paper Link:** [Proceedings of the 30th USENIX Security Symposium](https://www.usenix.org/conference/usenixsecurity21/presentation/grassi)

This paper is included in the Proceedings of the 30th USENIX Security Symposium, held from August 11–13, 2021. The proceedings are sponsored by USENIX and are available under ISBN 978-1-939133-24-3.

## Abstract

The field of practical computational integrity proof systems, such as SNARKs, STARKs, and Bulletproofs, has seen dynamic development with several recent constructions offering improved properties and relaxed setup requirements. Many use cases of these systems involve proving the knowledge of a preimage under a cryptographic hash function, often as the most computationally expensive part. For example, in the Zcash cryptocurrency, the SHA-256 hash function's inefficiency in circuit form led to significant computational penalties.

In this paper, we introduce POSEIDON, a modular framework and concrete instances of cryptographic hash functions designed to work natively with GF(p) objects. POSEIDON uses up to 8x fewer constraints per message bit compared to Pedersen Hash. Our construction is not only compactly expressed as a circuit but can also be tailored for various proof systems using specially crafted polynomials, thus enhancing performance. We demonstrate this by implementing a 1-out-of-a-billion membership proof with Merkle trees in less than a second using Bulletproofs.

## Cryptanalysis Summary of POSEIDON

### 5.1 Definitions
### 5.2 Security Claims
### 5.3 Summary of Attacks
### 5.4 Security Margin
### 5.5 Attack Details
#### 5.5.1 Statistical Attacks
#### 5.5.2 Algebraic Attacks

## POSEIDON in Zero-Knowledge Proof Systems

### 6.1 State of the Art
### 6.2 SNARKs with POSEIDONπ
#### 6.2.1 Groth16
#### 6.2.2 Bulletproofs
#### 6.2.3 PLONK
#### 6.2.4 RedShift
### 6.3 Comparison with Other Hash Algorithms
### 6.4 STARKs with POSEIDONπ

## Acknowledgements

## 1 Introduction

Recent advances in computational integrity proof systems have made many computational tasks verifiable in short time and/or in zero knowledge. Several protocols require one party to prove the knowledge of a seed-derived secret or an element being part of a large set. While accumulator-based solutions and algebraic Schnorr proofs exist, they are complex, error-prone, and often slow. An alternative is to use cryptographic hash functions for secret derivation and set membership proofs via Merkle trees. Such hash-based protocols require a computational integrity proof system that can be applied to arbitrary arithmetic circuits. For efficiency, the hash function must be cheap in a metric depending on the proof system.

As of mid-2020, popular proof systems include ZK-SNARKs (e.g., Pinocchio, Groth16, PLONK, Marlin), Bulletproofs, ZK-STARKs, and MPC-in-the-head systems. These systems use different circuit descriptions, leading to varying proof sizes and generation times:

- **R1CS Format (Rank-1 Quadratic Constraints):** Used in most SNARKs and Bulletproofs, it describes the circuit as a set of quadratic polynomials. The proof generation complexity is proportional to the number of constraints, which often corresponds to the number of multiplication gates.
- **AET Metric:** Used in ZK-STARKs and PLONK, it expresses computation as a set of internal program states related by polynomial equations. The proof generation is roughly proportional to the product of the state size, degree, and number of transformations.

Our goal was to design a family of hash functions optimal in R1CS and good in AET, supporting different finite field sizes. The substitution-permutation network (SPN) design, well-known in symmetric cryptography, allows for a generic hash function framework where the only critical parameter is the number of rounds. We provide an efficient and transparent strategy for choosing the number of rounds. The S-box is chosen as the power map \( x \mapsto x^d \), where \( d \geq 3 \) ensures invertibility and non-linearity. For fields where \( x^3 \) is not a bijection, we suggest other S-boxes like \( x^5 \) or \( 1/x \).

## 2 The POSEIDON Hash Function

### 2.1 Sponge Construction for POSEIDONπ
### 2.2 The HADES Design Strategy for Hashing
### 2.3 The Permutation Family POSEIDONπ

## 3 Applications

## 4 Concrete Instantiations of POSEIDONπ

### 4.1 Main Instances
### 4.2 Domain Separation for POSEIDON

## Our Contributions

We design and analyze a family of hash functions over GF(p) named POSEIDON. The internal permutation, called POSEIDONπ, is based on the HADES design strategy, which includes partial rounds with non-linear functions for part of the state. This reduces the R1CS or AET cost.

We aim to support security levels of 80, 128, and 256 bits, with the same security for collision and preimage resistance. For each pair (basic field, security level), we suggest a concrete instance of POSEIDON. In our hash function, a few S-box elements are reserved for the capacity, and the rest for the rate. The permutation width is determined by the application, set close to 1280 bits for long-message hashing and varied for Merkle trees to enable higher ZK performance.

We provide an extensive cryptanalysis of POSEIDON, focusing on algebraic methods. We explore interpolation, Gröbner basis, and higher-order differential attacks. For a security level of M bits, we require no attack to exhibit a non-random property faster than in \( 2^M \) queries. We then calculate the maximum number of rounds for each field, security level, and fixed permutation width that can be attacked, and select the number of rounds for concrete instances with a security margin.

We evaluate the number of constraints in POSEIDON instances for the R1CS and AET metrics. Our primary proposals, POSEIDON-80/128/256, are listed in Table 1 and compared to similar designs. We refer to [30, Appendix A] for a complete overview of our auxiliary files, including reference implementations and scripts to create POSEIDONπ instances.

We also have third-party benchmarks of POSEIDON for regular hashing and in ZK proof systems: PLONK (Table 6), Groth16 (Table 3), and Bulletproofs (Table 5).

## Table 1: Primary Proposals and Their Competitors

| SB Size | Tree | RF (log2 p) | Curve | Scalar Field | Name | S-box | Rate | Bits/Perm |
|---------|------|-------------|-------|--------------|------|-------|------|-----------|
| 510     | 1020 | 510         | 1020  | -            | Rescue | x5 & x1/5 | 510  | 1020      |
| x5      | x5   | x5          | x5    | x5           | x5   | -     | -    | -         |
| -       | -    | -           | -     | -            | -    | -     | -    | -         |

**Note:** "Tree" refers to the Merkle tree arity and is equal to the rate/capacity ratio. "Curve" denotes the curve (BLS12-381, BN254, Ed25519) whose (subgroup) scalar field determines the prime size. The R1CS/bit costs are obtained by dividing the R1CS prover costs by the message rate. Timings are from a third-party implementation of Rescue and POSEIDON on an i9-8950 CPU @2.9 GHz and 32 GB RAM.