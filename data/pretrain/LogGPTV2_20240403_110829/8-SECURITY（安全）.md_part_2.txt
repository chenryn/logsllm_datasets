### 使用 `passwd` 命令更改用户密码

```bash
[root@client-50 ~]# echo 123456 | passwd --stdin tiechui
更改用户 tiechui 的密码。
passwd：所有的身份验证令牌已经成功更新。

[root@client-50 ~]# echo 123456 | passwd --stdin niuben
更改用户 niuben 的密码。
passwd：所有的身份验证令牌已经成功更新。
```

### 查看命令的绝对路径

```bash
[root@client-50 ~]# which vim
/usr/bin/vim

[root@client-50 ~]# which systemctl
/usr/bin/systemctl
```

### 开始提权

```bash
[root@client-50 ~]# vim /etc/sudoers
91 ## Allow root to run any commands anywhere
92 root ALL=(ALL) ALL
93 dachui localhost,client-50=/usr/bin/vim /etc/httpd/conf/httpd.conf, /usr/bin/systemctl * httpd # 新加提权命令

[root@client-50 ~]# su - dachui
[dachui@client-50 ~]$ sudo -l
我们信任您已经从系统管理员那里了解了日常注意事项。总结起来无外乎这三点：
1) 尊重别人的隐私。
2) 输入前要先考虑(后果和风险)。
3) 权力越大，责任越大。

[sudo] dachui 的密码：
匹配 %2$s 上 %1$s 的默认条目：
...
用户 dachui 可以在 client-50 上运行以下命令：
(root) /usr/bin/vim /etc/httpd/conf/httpd.conf, /usr/bin/systemctl * httpd
[dachui@client-50 ~]$
```

### 使用 `sudo` 别名设置

通过使用别名可以提高配置的可读性和可维护性。别名名称必须全大写。

#### 定义别名并调用

```bash
[root@client-50 ~]# vim /etc/sudoers
# 普通提权方式:
用户名 ALL=(ALL) ALL
dachui localhost,client-50=/usr/bin/vim /etc/httpd/conf/httpd.conf, /usr/bin/systemctl * httpd

# 定义别名并调用使用:
Cmnd_Alias MYCMND=/usr/bin/vim /etc/httpd/conf/httpd.conf, /usr/bin/systemctl * httpd, /usr/bin/vim /etc/my.cnf, /usr/bin/systemctl * mysqld
Cmnd_Alias SOFTMGM=/bin/yum, /bin/rpm
Host_Alias MYPC=localhost,client-50

# 定义好之后使用别名给niuben用户提权
niuben MYPC=MYCMND,SOFTMGM,/sbin*,!/sbin/ifconfig eth0

[root@client-50 ~]# su - niuben
上一次登录：三 3月 6 11:54:34 CST 2019从 192.168.4.50pts/2 上
[niuben@client-50 ~]$ sudo -l
我们信任您已经从系统管理员那里了解了日常注意事项。
...
[sudo] niuben 的密码：
...
用户 niuben 可以在 client-50 上运行以下命令：
(root) /usr/bin/vim /etc/httpd/conf/httpd.conf, /usr/bin/systemctl * httpd, /usr/bin/vim /etc/my.cnf, /usr/bin/systemctl * mysqld, /bin/yum, /bin/rpm, /sbin*, !/sbin/ifconfig eth0
```

### 分析 `sudo` 提权使用日志

```bash
[root@client-50 ~]# vim /etc/sudoers
Defaults logfile="/var/log/sudo" # 文本最后一行添加

[niuben@client-50 ~]$ sudo -l
[root@client-50 ~]# cat /var/log/sudo
Mar 6 14:41:03 : niuben : TTY=pts/1 ; PWD=/home/niuben ; USER=root ; COMMAND=list
Mar 6 14:42:29 : niuben : TTY=pts/1 ; PWD=/home/niuben ; USER=root ; COMMAND=/bin/vim /etc/httpd/conf/httpd.conf
```

### SSH 访问控制

**SSH 连接原理**

- SSH 服务是一个守护进程（daemon），系统后台监听客户端的连接。
- SSH 服务端的进程名为 `sshd`，负责实时监听客户端的请求（IP 22 端口）。
- SSH 服务端由两部分组成：`openssh`（提供 SSH 服务）和 `openssl`（提供加密程序）。
- SSH 客户端可以用 Xshell、SecureCRT、MobaXterm 等工具进行连接。

**SSH 工作机制**

- 服务器启动时生成一个密钥（768 位公钥）。
- 客户端发送连接请求到 SSH 服务器。
- 服务器检查客户端的数据和 IP 地址，确认合法后发送密钥（768 位）给客户端。
- 客户端将本地私钥（256 位）和服务器的公钥（768 位）结合成密钥对（1024 位），发回给服务器端，建立连接并通过密钥对进行数据传输。

**SSH 加密技术**

- **SSH1**：没有对客户端的密钥进行校验，容易被植入恶意代码。
- **SSH2**：增加了 Diffe-Hellman 机制，每次数据传输时，服务器都会检查数据来源的正确性，避免黑客入侵。
- SSH2 支持 RSA 和 DSA 密钥：
  - DSA：数字签名算法。
  - RSA：既可以数字签名又可以加密。

**SSH 知识小结**

1. SSH 是安全的加密协议，用于远程连接 Linux 服务器。
2. SSH 的默认端口是 22，安全协议版本是 SSH2。
3. SSH 服务器端主要包含两个服务功能：SSH 连接和 SFTP 服务器。
4. SSH 客户端包含 SSH 连接命令和远程拷贝 `scp` 命令等。

**如何防止 SSH 登录入侵**

1. 使用密钥登录，更改端口。
2. 使用蜜罐技术。
3. 监听本地内网 IP（例如 `ListenAddress 192.168.25.*`）。

**SSH 功能大全**

1. **登录**
   ```bash
   ssh -p22 user@host
   ```

2. **直接执行命令**
   ```bash
   ssh user@host "ls -ltr /backup/data"
   ```

3. **查看已知主机**
   ```bash
   cat /root/.ssh/known_hosts
   ```

4. **SSH 远程执行 `sudo` 命令**
   ```bash
   ssh -t user@host "sudo rsync hosts /etc/"
   ```

5. **SCP**
   - **功能**：远程文件的安全（加密）拷贝。
   - **命令示例**
     ```bash
     scp -P22 -r -p /home/omd/h.txt user@host:/home/omd/
     ```
   - **SCP 知识小结**
     - SCP 是加密远程拷贝，`cp` 为本地拷贝。
     - 可以推送过去，也可以拉过来。
     - 每次都是全量拷贝（效率不高，适合第一次），增量拷贝用 `rsync`。

6. **SFTP**
   - **Windows 和 Linux 的传输工具**
     - WinSCP
     - SFTP：基于 SSH 的安全加密传输
     - Samba
   - **SFTP 客户端连接**
     ```bash
     sftp -oPort=22 user@host
     put /etc/hosts /tmp
     get /etc/hosts /home/omd
     ```
   - **SFTP 小结**
     - Linux 下使用命令：`sftp -oPort=22 root@x.x.x.x`
     - `put` 加客户端本地路径上传
     - `get` 下载服务器端内容到本地
     - 远程连接默认连接用户的家目录

**SSH 免密设置**

1. **生成私钥和公钥**
   ```bash
   [root@client-50 ~]# ssh-keygen
   > id_rsa  # 私钥（钥匙）
   id_rsa.pub  # 公钥（锁）
   ```

2. **拷贝公钥给目标服务器**
   ```bash
   [root@client-50 ~]# ssh-copy-id user@target_ip
   ```

**常见的防护措施**

- 用户限制，黑白名单
- 更改验证方式（密码 -> 密钥对）
- 防火墙
- 修改端口

**修改 SSH 端口**

```bash
[root@client-50 ~]# vim /etc/ssh/sshd_config
Port 2222  # 修改端口

[root@client-50 ~]# systemctl restart sshd
```

**测试新端口**

```bash
[root@room9pc01 ~]# ssh 192.168.4.50
ssh: connect to host 192.168.4.50 port 22: Connection refused

[root@room9pc01 ~]# ssh -p2222 192.168.4.50
Last login: Wed Mar 6 14:57:47 2019 from 192.168.4.254
[root@client-50 ~]#
```

**修改 SSH 配置**

```bash
[root@client-50 ~]# vim /etc/ssh/sshd_config
LoginGraceTime 2m  # 登录超时 2 分钟
PermitRootLogin no  # 禁止 root 登录
StrictModes yes
MaxAuthTries 6  # 每次连接最多认证 6 次密码
MaxSessions 10
UseDNS no  # 不解析客户机地址
```

**SSH 黑白名单配置**

```bash
[root@client-50 ~]# vim /etc/ssh/sshd_config
DenyUsers user1 user2  # 黑名单
AllowUsers user1@host user2@  # 白名单
DenyGroups group1 group2..
AllowGroups group1 group2..

[root@client-50 ~]# systemctl restart sshd
```

**真机测试**

```bash
[root@room9pc01 ~]# ssh -p 2222 user@host
user's password:
Last login: Wed Mar 6 14:32:03 2019
[user@client-50 ~]$
```

**SSH 默认用户密码登录**

```bash
[root@client-50 ~]# vim /etc/ssh/sshd_config
PasswordAuthentication yes  # 默认开启
```

**SSH 密钥对验证**

```bash
[root@client-50 ~]# vim /etc/ssh/sshd_config
PubkeyAuthentication yes  # 默认启用
AuthorizedKeysFile .ssh/authorized_keys  # 公钥文件名称和存储路径
```

**SSH 免密设置**

1. **生成私钥和公钥**
   ```bash
   [root@client-50 ~]# ssh-keygen  # 一路回车即可，若指定算法 (-t rsa 或 -t dsa)，不指定默认为 RSA 算法
   > id_rsa  # 私钥（钥匙）
   id_rsa.pub  # 公钥（锁）
   ```

2. **拷贝公钥给目标服务器**
   ```bash
   [root@client-50 ~]# ssh-copy-id user@target_ip
   ```

希望这些优化后的文本能更好地帮助你理解和操作相关命令。