\[root@client-50 \~\]# echo 123456 \| passwd \--stdin tiechui
更改用户 tiechui 的密码 。
passwd：所有的身份验证令牌已经成功更新。
\[root@client-50 \~\]# echo 123456 \| passwd \--stdin niuben
更改用户 niuben 的密码 。
passwd：所有的身份验证令牌已经成功更新。
\[root@client-50 \~\]# which vim #查看命令的绝对路径
/usr/bin/vim
\[root@client-50 \~\]# which systemctl
/usr/bin/systemctl
**开始提权**
\[root@client-50 \~\]# vim /etc/sudoers
91 \## Allow root to run any commands anywhere
92 root ALL=(ALL) ALL
93 dachui localhost,client-50=/usr/bin/vim /etc/httpd/conf/httpd.conf ,
/usr/b
in/systemctl \* httpd #新加提权命令
\[root@client-50 \~\]# su - dachui
\[dachui@client-50 \~\]\$ sudo -l
我们信任您已经从系统管理员那里了解了日常注意事项。
总结起来无外乎这三点：
#1) 尊重别人的隐私。
#2) 输入前要先考虑(后果和风险)。
#3) 权力越大，责任越大。
\[sudo\] dachui 的密码：
匹配 %2\$s 上 %1\$s 的默认条目：
\....
\....
用户 dachui 可以在 client-50 上运行以下命令：
(root) /usr/bin/vim /etc/httpd/conf/httpd.conf, /usr/bin/systemctl \*
httpd
\[dachui@client-50 \~\]\$
### sudo别名设置
提高可重用性 易读性 简化配置,使记录更有条理
别名名称必须全大写
此外sudo还支持别名的定义，我们通过引用定义好的别名可以提供工作效率：
who User_Alias
which_hosts Host_Alias
runas Runas_Alias
command Cmnd_Alias
User_Alias Host_Alias Runas_Alias Cmnd_Alias
用户名 主机名 用户名 命令路径（全路径）
组名(%) IP 地址 组名（%） 目录
其他User_Alias 网络地址 其他Runas_Alias 其他Cmnd_Alias
其他Host_Alias
\[root@client-50 \~\]# vim /etc/sudoers
**#普通提权方式:**
用户名 ALL=(ALL) ALL
dachui localhost,client-50=/usr/bin/vim /etc/httpd/conf/httpd.conf ,
/usr/bin/systemctl \* httpd
**#定义别名并调用使用:**
Cmnd_Alias MYCMND=/usr/bin/vim /etc/httpd/conf/httpd.conf ,
/usr/bin/systemctl \* httpd , /usr/bin/vim /etc/my.cnf ,
/usr/bin/systemctl \* mysqld
Cmnd_Alias SOFTMGM=/bin/yum , /bin/rpm
Host_Alias MYPC=localhost,client-50
#定义好之后使用别名给niuben用户提权
niuben MYPC=MYCMND,SOFTMGM,/sbin\*,!/sbin/ifconfig eth0
\[root@client-50 \~\]# su - niuben
上一次登录：三 3月 6 11:54:34 CST 2019从 192.168.4.50pts/2 上
\[niuben@client-50 \~\]\$ sudo -l
我们信任您已经从系统管理员那里了解了日常注意事项。
\....
\[sudo\] niuben 的密码：
\....
用户 niuben 可以在 client-50 上运行以下命令：
(root) /usr/bin/vim /etc/httpd/conf/httpd.conf, /usr/bin/systemctl \*
httpd, /usr/bin/vim /etc/my.cnf, /usr/bin/systemctl \* mysqld, /bin/yum,
/bin/rpm,
/sbin\*, !/sbin/ifconfig eth0
**在/etc/sudoers 中定义了很多功能别名,去掉注释即可调用使用**
分析sudo提权使用日志
\[root@client-50 \~\]# vim /etc/sudoers
Defaults logfile=\"/var/log/sudo\" #文本最后一行添加
\[niuben@client-50 \~\]\$ sudo -l
\[root@client-50 \~\]# cat /var/log/sudo
Mar 6 14:41:03 : niuben : TTY=pts/1 ; PWD=/home/niuben ; USER=root ;
COMMAND=list
\[root@client-50 \~\]# cat /var/log/sudo
Mar 6 14:41:03 : niuben : TTY=pts/1 ; PWD=/home/niuben ; USER=root ;
COMMAND=list #操作内容
Mar 6 14:42:29 : niuben : TTY=pts/1 ; PWD=/home/niuben ; USER=root ;
COMMAND=/bin/vim /etc/httpd/conf/httpd.conf #操作内容
# 3：SSH访问控制
SSH(远程连接工具)连接原理：ssh服务是一个守护进程(demon)，系统后台监听客户端的连接，ssh服务端的进程名为sshd,负责实时监听客户端的请求(IP
22端口)，包括公共秘钥等交换等信息。
ssh服务端由2部分组成： openssh(提供ssh服务) openssl(提供加密的程序)
ssh的客户端可以用 XSHELL，Securecrt, Mobaxterm等工具进行连接
**SSH的工作机制**
服务器启动的时候自己产生一个密钥(768bit公钥)，本地的ssh客户端发送连接请求到ssh服务器，服务器检查连接点客户端发送的数据和IP地址，确认合法后发送密钥(768bits)给客户端，此时客户端将本地私钥(256bit)和服务器的公钥(768bit)结合成密钥对key(1024bit),发回给服务器端，建立连接通过key-pair数据传输。
**SSH的加密技术**
加密技术：传输过程，数据加密。
1.SSH1没有对客户端的秘钥进行校验，很容易被植入恶意代码
2.SSH2增加了一个确认联机正确性的Diffe_Hellman机制，每次数据的传输，Server都会检查数据来源的正确性，避免黑客入侵。
SSH2支持RSA和DSA密钥
DSA:digital signature Algorithm 数字签名
RSA:既可以数字签名又可以加密
**SSH知识小结**
1.SSH是安全的加密协议，用于远程连接Linux服务器
2.SSH的默认端口是22，安全协议版本是SSH2
3.SSH服务器端主要包含2个服务功能SSH连接和SFTP服务器
4.SSH客户端包含ssh连接命令和远程拷贝scp命令等
**如何防止SSH登录入侵**
1.密钥登录,更改端口
2.牤牛阵法
3.监听本地内网IP(ListenAddress 192.168.25.\*)
**SSH功能大全**
1.登录
ssh -p22 PI:EMAIL
2.直接执行命令 \--\>最好全路径
ssh PI:EMAIL ls -ltr /backup/data
==\>ssh PI:EMAIL /bin/ls -ltr /backup/data
3.查看已知主机
cat /root/.ssh/known_hosts
4.ssh远程执行sudo命令
ssh -t PI:EMAIL sudo rsync hosts /etc/
5.scp
1.功能 \--\>远程文件的安全(加密)拷贝
scp -P22 -r -p /home/omd/h.txt PI:EMAIL:/home/omd/
2.scp知识小结
scp是加密远程拷贝，cp为本地拷贝
可以推送过去，也可以拉过来
每次都是全量拷贝(效率不高，适合第一次)，增量拷贝用rsync
6.ssh自带的sftp功能
1.Window和Linux的传输工具
wincp filezip
sftp \--\>基于ssh的安全加密传输
samba
2.sftp客户端连接
sftp -oPort=22 PI:EMAIL
put /etc/hosts /tmp
get /etc/hosts /home/omd
3.sftp小结：
1.linux下使用命令： sftp -oPort=22 root@x.x.x.x
2.put加客户端本地路径上传
3.get下载服务器端内容到本地
4.远程连接默认连接用户的家目录
**ssh免密设置**
1.根据DSA算法生成私钥和公钥【默认建立在当前用户的家目录】
\]# ssh-keygen \# 一路回车即可
> id_dsa \--\>私钥(钥匙)
id_dsa.pub \--\>公钥(锁)
2.  拷贝公钥给目标服务器
\]# ssh-copy-id 对方IP
## ssh基本防护
**存在安全隐患**
密码嗅探/键盘记录
暴力枚举账号,猜解密码
**常见的防护措施**
用户限制,黑白名单
更改验证方式(密码\--秘钥对)
防火墙
**修改端口**
\[root@client-50 \~\]# vim /etc/ssh/sshd_config
17 Port 2222
修改端口
\[root@client-50 \~\]# vim /etc/ssh/sshd_config
17 Port 2222
\[root@client-50 \~\]# systemctl restart sshd
\[root@client-50 \~\]# exit
登出
Connection to 192.168.4.50 closed.
\[root@room9pc01 \~\]# ssh 192.168.4.50
ssh: connect to host 192.168.4.50 port 22: Connection refused #连接拒绝
\[root@room9pc01 \~\]# ssh -p2222 192.168.4.50
Last login: Wed Mar 6 14:57:47 2019 from 192.168.4.254
\[root@client-50 \~\]#
**修改配置**
37 #LoginGraceTime 2m #登录超时2分钟
38 #PermitRootLogin yes #禁止root登录
39 #StrictModes yes
40 #MaxAuthTries 6 #每次连接最多认证6次密码
41 #MaxSessions 10
115 #UseDNS no #不解析客户机地址
**ssh黑白名单配置**
\[root@client-50 \~\]# vim /etc/ssh/sshd_config #在文本末尾添加
DenyUsers user1 user2 #黑名单
AllowUsers user1@host user2@ #白名单
DenyGroups group1 group2..
AllowGroups group1 group2 ..
**ssh白名单配置**
\[root@client-50 \~\]# vim /etc/ssh/sshd_config #在文本末尾添加
AllowUsers PI:EMAIL niuben
\[root@client-50 \~\]# systemctl restart sshd
真机测试
\[root@room9pc01 \~\]# ssh -p 2222 PI:EMAIL
PI:EMAIL\'s password:
Last login: Wed Mar 6 14:32:03 2019
\[niuben@client-50 \~\]\$ exit
登出
\[root@room9pc01 \~\]# ssh -p 2222 PI:EMAIL
PI:EMAIL\'s password: #密码正确也无法登录.连续三次密码后退出
Permission denied, please try again.
PI:EMAIL\'s password:
Permission denied, please try again.
PI:EMAIL\'s password:
Permission denied (publickey,gssapi-keyex,gssapi-with-mic,password).
重新添加白名单
AllowUsers PI:EMAIL niuben dachui
真机测试
\[root@room9pc01 \~\]# ssh -p 2222 PI:EMAIL
PI:EMAIL\'s password:
Last failed login: Wed Mar 6 15:38:46 CST 2019 from 192.168.4.254 on
ssh:notty
There were 3 failed login attempts since the last successful login.
Last login: Wed Mar 6 11:43:03 2019
\[dachui@client-50 \~\]\$
**ssh黑名单配置**
\[root@client-50 \~\]# vim /etc/ssh/sshd_config
DenyUsers dachui
\[root@client-50 \~\]# systemctl restart sshd
## ss登录方式
### 默认用户密码登录
65 PasswordAuthentication yes #默认开着
### ssh秘钥对验证
\[root@client-50 \~\]# vim /etc/ssh/sshd_config
43 #PubkeyAuthentication yes #默认启用
47 AuthorizedKeysFile .ssh/authorized_keys #公钥文件名称和存储路径
**ssh免密设置**
**1.根据DSA算法生成私钥和公钥【默认建立在当前用户的家目录】**
\]# ssh-keygen #一路回车即可,若指定算法(-t rsa 或 -t
dsa),不指定默认RSA算法
> id_dsa \--\>私钥(钥匙)
id_dsa.pub \--\>公钥(锁)
**2.拷贝公钥给目标服务器**
\]# ssh-copy-id 用户名@需远程免密登录的IP
私钥文件：id_rsa
公钥文件：id_rsa.pub