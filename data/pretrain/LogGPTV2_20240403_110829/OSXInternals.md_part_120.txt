 SIGEV_SIGNAL notification through signal generation (delivery depends on whether the
implementation supports the Real-time Signals Extension)
 SIGEV_THREAD notification function called to perform notification (intended for multithreaded
programs)
Mac OS X 10.4 supports only SIGEV_NONE and SIGEV_SIGNAL. Figure 939 shows a contrived program
that uses the lio_listio() system call to submit an asynchronous read operation, while requesting
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh46E8.htm 20.08.2007
Chapter 9. Interprocess Communication Page 81 of 153
notification of read completion through the SIGUSR1 signal. Multipleup to AIO_LISTIO_MAX (16)read or
write operations can be submitted in a single call through lio_listio().
Figure 939. Signal notification of asynchronous I/O completion
// aio_read.c
#include 
#include 
#include 
#include 
#include 
#include 
#define PROGNAME "aio_read"
#define AIO_BUFSIZE 4096
#define AIOCB_CONST struct aiocb *const*
static void
SIGUSR1_handler(int signo __unused)
{
printf("SIGUSR1_handler\n");
}
int
main(int argc, char **argv)
{
int fd;
struct aiocb *aiocbs[1], aiocb;
struct sigaction act;
char buf[AIO_BUFSIZE];
if (argc != 2) {
fprintf(stderr, "usage: %s \n", PROGNAME);
exit(1);
}
if ((fd = open(argv[1], O_RDONLY)) < 0) {
perror("open");
exit(1);
}
aiocbs[0] = &aiocb;
aiocb.aio_fildes = fd;
aiocb.aio_offset = (off_t)0;
aiocb.aio_buf = buf;
aiocb.aio_nbytes = AIO_BUFSIZE;
// not used on Mac OS X
aiocb.aio_reqprio = 0;
// we want to be notified via a signal when the asynchronous I/O finishes
// SIGEV_THREAD (notification via callback) is not supported on Mac OS X
aiocb.aio_sigevent.sigev_notify = SIGEV_SIGNAL;
// send this signal when done: must be valid (except SIGKILL or SIGSTOP)
aiocb.aio_sigevent.sigev_signo = SIGUSR1;
// ignored on Mac OS X
aiocb.aio_sigevent.sigev_value.sival_int = 0;
aiocb.aio_sigevent.sigev_notify_function = (void(*)(union sigval))0;
aiocb.aio_sigevent.sigev_notify_attributes = (pthread_attr_t *)0;
aiocb.aio_lio_opcode = LIO_READ;
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh46E8.htm 20.08.2007
Chapter 9. Interprocess Communication Page 82 of 153
// set up a handler for SIGUSR1
act.sa_handler = SIGUSR1_handler;
sigemptyset(&(act.sa_mask));
act.sa_flags = 0;
sigaction(SIGUSR1, &act, NULL);
// initiates a list of I/O requests specified by a list of aiocb structures
if (lio_listio(LIO_NOWAIT, (AIOCB_CONST)aiocbs, 1, &(aiocb.aio_sigevent)))
perror("lio_listio");
else {
printf("asynchronous read issued...\n");
// quite contrived, since we could have used LIO_WAIT with lio_listio()
// anyway, the I/O might already be done by the time we call this
aio_suspend((const AIOCB_CONST)aiocbs, 1, (const struct timespec *)0);
}
return 0;
}
$ gcc -Wall -o aio_read aio_read.c
SIGUSR1_handler
asynchronous read issued...
9.8.5. Signals and Multithreading
The signal mechanism does not lend itself well to a multithreaded environment. Traditional signal
semantics require exceptions to be handled serially, which is problematic when a multithreaded
application generates exception signals. For example, if several threads hit breakpoints while debugging a
multithreaded application, only one breakpoint can be reported to the debugger, which will therefore not
have access to the entire state of the process. Modern-day operating systems have to deal with several
common and system-specific problems in their signal implementations. A representative multithreaded
signal implementation in a modern Unix system has per-thread signal masks, allowing threads to block
signals independently of other threads in the same process. Mac OS X provides the pthread_sigmask()
system call to examine or change (or both) the calling thread's signal mask.
If a signal is generated because of a trap, such as an illegal instruction or an arithmetic exception (i.e., the
signal is synchronous), it is sent to the thread that caused the trap. Others (typically asynchronous signals)
are delivered to the first thread that is not blocking the signal. Note that signals such as SIGKILL,
SIGSTOP, and SIGTERM affect the entire process.
9.8.6. Signal Actions
A signal action can be carried out only by the process (technically, a thread within that process) to which
the signal was delivered. Unlike Mach exceptions, which can be handled by any thread in any task (with
prior arrangement), no process can execute a signal handler on another process's behalf. This is
problematic when the complete register context of an exception is desirable or the exception may have
corrupted the resources of the victim process. Debuggers have been historically difficult to implement on
Unix systems because of limitations in prevailing signal mechanisms.
POSIX.1 allows a process to declare a signal to have its handler execute on an alternate stack, which can
be defined and examined using sigaltstack(2). When changing a signal action through sigaction(2),
the sa_flags field of the sigaction structure can have the SA_ONSTACK flag set to cause delivery of the
signal in question on the alternate stack, provided an alternate stack has been declared with sigaltstack
().
int
sigaltstack(const struct sigaltstack *newss, struct sigaltstack *oldss);
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh46E8.htm 20.08.2007
Chapter 9. Interprocess Communication Page 83 of 153
// bsd/sys/signal.h
struct sigaltstack {
user_addr_t ss_sp; // signal stack base
user_size_t ss_size; // signal stack length
int ss_flags; // SA_DISABLE and/or SA_ONSTACK
};
#define SS_ONSTACK 0x0001 // take signal on signal stack
#define SS_DISABLE 0x0004 // disable taking signals on alternate stack
#define MINSIGSTKSZ 32768 // (32KB) minimum allowable stack
#define SIGSTKSZ 131072 // (128KB) recommended stack size
If the signal handler needs exception context, the kernel must explicitly save the context and pass it to the
handler for examination. For example, POSIX.1 stipulates that the signal-catching function (handler) for a
signal will be entered differently based on whether the SA_SIGINFO flag is set for the signal or not.
// SA_SIGINFO is cleared for this signal (no context passed)
void sig_handler(int signo);
// SA_SIGINFO is set for this signal (context passed)
void sig_handler(int signo, siginfo_t *info, void *context);
The siginfo_t structure on a system must at least contain the signal number, the cause of the signal, and
the signal value.
// bsd/sys/signal.h
// kernel representation of siginfo_t
typedef struct __user_siginfo {
int si_signo; // signal number
int si_errno; // errno association
int si_code; // signal code
pid_t si_pid; // sending process
uid_t si_uid; // sender's real user ID
int si_status; // exit value
user_addr_t si_addr; // faulting instruction
union user_sigval si_value; // signal value
user_long_t si_band; // band event for SIGPOLL
user_ulong_t pad[7]; // reserved
} user_siginfo_t;
When a signal handler is invoked, the current user context is saved and a new context is created. The
context argument to sig_handler() can be cast to a pointer to an object of type ucontext_t. It refers to
the receiving process's user context that was interrupted when the signal was delivered. The ucontext_t
structure contains a data structure of type mcontext_t, which represents the machine-specific register
state of the context.
// kernel representation of 64-bit ucontext_t
struct user_ucontext64 {
// SA_ONSTACK set?
int uc_onstack;
// set of signals that are blocked when this context is active
sigset_t uc_sigmask;
// stack used by this context
struct user_sigaltstack uc_stack;
// pointer to the context that is resumed when this context returns
user_addr_t uc_link;
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh46E8.htm 20.08.2007
Chapter 9. Interprocess Communication Page 84 of 153
// size of the machine-specific representation of the saved context
user_size_t uc_mcsize;
// machine-specific representation of the saved context
user_addr_t uc_mcontext64;
};
// kernel representation of 64-bit PowerPC mcontext_t
struct mcontext64 { // size_in_units_of_natural_t =
struct ppc_exception_state64 es; // PPC_EXCEPTION_STATE64_COUNT +
struct ppc_thread_state64 ss; // PPC_THREAD_STATE64_COUNT +
struct ppc_float_state fs; // PPC_FLOAT_STATE_COUNT +
struct ppc_vector_state vs; // PPC_VECTOR_STATE_COUNT
};
The type and the amount of context made available to a signal handler depend on the operating system
and the hardwarethe context is not guaranteed against corruption.
Mac OS X does not provide the POSIX getcontext() and setcontext() functions for retrieving and
setting, respectively, the current user context of the calling thread. As we saw earlier, thread_get_state
() and tHRead_set_state() are used for this purpose. Other related functions such as makecontext()
and swapcontext() are also not available on Mac OS X. In any case, the getcontext() and setcontext
() routines have been marked as obsolescent in SUSv3[13] and can be replaced using POSIX thread
functions.
[13] Single UNIX Specification, Version 3.
9.8.7. Signal Generation and Delivery
The kill() system call, which is used to send a signal to one or more processes, is invoked with two
arguments: a process ID (pid) and a signal number. It sends the specified signal (provided that the caller's
credentials permit it) to one or more processes based on whether the given pid is positive, 0, -1, or
otherwise negative. The details of kill()'s behavior are described in the kill(2) man page. The killpg
() system call sends the given signal to the given process group. For a certain combination of its
arguments, kill() is equivalent to killpg(). The implementations of both system calls on Mac OS X
use the psignal() internal function [bsd/kern/kern_sig.c] to send the signal. psignal() is a simple
wrapper around psignal_lock() [bsd/kern/kern_sig.c]. If the signal has an associated action,
psignal_lock() adds the signal to the set of pending signals for the process. Figure 940 shows the
important functions that are part of the signal mechanism in the kernel.
Figure 940. Implementation of the signal mechanism in the kernel
[View full size image]
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh46E8.htm 20.08.2007
Chapter 9. Interprocess Communication Page 85 of 153
psignal_lock() calls get_signalthread() [bsd/kern/kern_sig.c] to select a thread for signal
delivery. get_signalthread() examines the threads within the process, normally selecting the first
thread that is not blocking the signal. Sending signals to the first thread allows single-threaded programs
to be linked with multithreaded libraries. If get_signalthread() returns successfully, a specific
asynchronous system trap (AST_BSD) is set for the thread. psignal_lock() then processes the signal,
performing signal-specific actions as necessary and allowed. In particular, psignal_lock() examines the
following fields of the utHRead structure, possibly modifying uu_siglist and uu_sigwait:
 uu_siglist signals pending for the thread
 uu_sigwait signals for sigwait(2) on this thread
 uu_sigmask signal mask for the thread
Before the thread returns to user space from the kernel (after a system call or trap), the kernel checks the
thread for pending BSD ASTs. If it finds any, the kernel calls bsd_ast() [bsd/kern/kern_sig.c] on the
thread.
// bsd/kern/kern_sig.c
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh46E8.htm 20.08.2007
Chapter 9. Interprocess Communication Page 86 of 153
void
bsd_ast(thread_t thr_act)
{
...
if (CHECK_SIGNALS(p, current_thread(), ut)) {
while ((signum = issignal(p)))
postsig(signum);
}
...
}
psignal_lock() does not send signals to the kernel task, zombie processes, or a process that has invoked
the reboot() system call.
The CHECK_SIGNALS() macro [bsd/sys/signalvar.h] ensures that the thread is active (not terminated)
and then calls the SHOULDissignal() macro to determine whether there are signals to be delivered based
on the following quick checks.
 There must be at least one signal pendingthat is, the utHRead structure's uu_siglist field must be
nonzero.
 The thread may be blocking one or more signals, as specified by the uthread structure's
uu_sigmask field being nonzero. Note that there is also a per-process signal mask, which is
deprecated.
 The process may be ignoring one or more signals, as specified by the proc structure's p_sigignore
field.
 The signals contained in the sigcantmask global bitmapSIGKILL and SIGSTOPcannot be masked.
If the process is being traced, even blocked and ignored signals will be delivered so that the
debugger can know about them.
When called in a loop, issignal() [bsd/kern/kern_sig.c] keeps returning a signal number if the
current process has received a signal that should be caught, should cause termination of the process, or
should interrupt the current system call. issignal() performs a variety of processing depending on the
type of the signal, whether the signal is masked, whether the signal has the default action, and so on. For
example, if the process has a pending SIGSTOP with the default action, issignal() processes the signal
immediately and clears the signal. No signal number is returned in this case. Signals that have actions
(including the default action of terminating the process) are returned and are processed by postsig()
[bsd/kern/kern_sig.c].
postsig() either terminates the process if the default action warrants so or calls sendsig()
[bsd/dev/ppc/unix_signal.c] to arrange for the process to run a signal handler. This arrangement
primarily involves population of ucontext and mcontext structures (32-bit or 64-bit, as appropriate) that
contain the context information required by the handler to run within the thread in user space. The context
is copied to user space and various registers are set up, including SRR0, which contains the address at
which the handler will start execution. Finally, postsig() calls thread_setstatus()
[osfmk/kern/thread_act.c] to set the thread's machine state. thread_setstatus() is a trivial wrapper
around the thread_set_state() Mach routine.
9.8.8. Mach Exceptions and Unix Signals Living Together
When the kernel starts up, bsdinit_task() [bsd/kern/bsd_init.c] calls ux_handler_init()
[bsd/uxkern/ux_exception.c] to initialize the Unix exception handler. ux_handler_init() starts a
kernel thread that runs ux_handler() [bsd/uxkern/ux_exception.c]an internal kernel exception
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh46E8.htm 20.08.2007
Chapter 9. Interprocess Communication Page 87 of 153
handler that provides Unix compatibility by converting Mach exception messages to Unix signals.
ux_handler() allocates a port set for receiving messages and then allocates an exception port within the
set. The global name for this port is contained in ux_exception_port. The exception ports of both the
host and the BSD init task (that would eventually run launchd) are set to ux_exception_port. Since
launchd is the ultimate ancestor of all Unix processes, and task exception ports are inherited across fork
(), most exceptions that have signal analogs are converted to signals by default.
The message-handling loop of ux_handler() is the typical Mach exception handler loop: An exception
message is received, exc_server() is called, and a reply message is sent. If there is an error in receiving
a message because it is too large, the message is ignored. Any other error in message reception results in a
kernel panic. The corresponding call to catch_exception_raise() causes an exception to be converted
to a Unix signal and code by calling ux_exception() [bsd/uxkern/ux_exception.c]. Finally, the
resultant signal is sent to the appropriate thread.
// bsd/uxkern/ux_exception.c
kern_return_t
catch_exception_raise(...)
{
...
if (th_act != THR_ACT_NULL) {
ut = get_bsdthread_info(th_act);
// convert {Mach exception, code, subcode} to {Unix signal, uu_code}
ux_exception(exception, code[0], code[1], &ux_signal, &ucode);
// send signal
if (ux_signal != 0)
threadsignal(th_act, signal, ucode);
thread_deallocate(th_act);
}
...
}
ux_exception() first calls machine_exception() [bsd/dev/ppc/unix_signal.c] to attempt a
machine-dependent translation of the given Mach exception and code to a Unix signal and code. The
translation is as follows:
 { EXC_BAD_INSTRUCTION, code } is translated to { SIGILL, code }.
 { EXC_ARITHMETIC, code } is translated to { SIGFPE, code }.
 { EXC_PPC_SOFTWARE, EXC_PPC_TRAP } is translated to { SIGTRAP, EXC_PPC_TRAP }.
If machine_exception() fails to translate a Mach exception, ux_exception() itself translates
exceptions as shown in Table 97.
Table 97. Translation of Mach Exceptions to Unix Signals
Mach Exception Mach Exception Code Unix Signal
EXC_ARITHMETIC SIGFPE
EXC_BAD_ACCESS KERN_INVALID_ADDRESS SIGSEGV
EXC_BAD_ACCESS SIGBUS
EXC_BAD_INSTRUCTION SIGILL