is injective for all admissible values of j and n.
For key generation, AES-GCM uses the PRF to derive
both a static MAC key k0 generated from the PRF (with
nonce and counter 0) and a 1-time MAC key for each
nonce (with counter 1) whereas Poly1305 uses a pure 1-
time MAC key for each nonce (with counter 0). To handle
both cases uniformly, we introduce a parameter j0 ∈ {0, 1}
to shift the counter before concatenation with the nonce. In
the following, we assume a compatible MAC, meaning that
either j0 = 0 ∧ (cid:2)k0
≤ (cid:2)b ∧
(cid:2)k − (cid:2)k0
For pad generation, counter mode encrypts plaintext
blocks as p ⊕ eval(j(cid:9)n) and decrypts by applying the same
pad to the ciphertext. In the PrfCtr game below, we separate
encryption and decryption, and we fuse the block generation
and the XOR, so that we can give separate types to plaintexts
and ciphertexts. (We truncate the block in case it is smaller
= 0 ∧ (cid:2)k ≤ (cid:2)b or j0 = 1 ∧ (cid:2)k0
≤ (cid:2)b.
than the input, as required for the last block in counter-
mode.)
Deﬁnition 5 (PrfCtr security): Given PRF and MAC, let
PrfCtr(A[qb, qg]) be the advantage of an adversary A that
makes qb queries to either EvalEnx or EvalDex and qg queries
to EvalKey in the following game:
Game PrfCtrb(PRF, MAC)
T ← ∅; R ← ∅
k $← PRF.keygen()
k0
if j0 ∧ ¬b
Oracle EvalKey(j(cid:8)n)
if j (cid:5)= j0 return ⊥
if T [j(cid:8)n] = ⊥
if b
$← MAC.keygen(k0)
km
else
o ← PRF.eval(k, j(cid:8)n)
km ← truncate(k0(cid:8)o, (cid:3)k)
T [j(cid:8)n] ← km
return T [j(cid:8)n]
Oracle EvalDex(j(cid:8)n, c)
if j ≤ j0 return ⊥
o $← Eval(j(cid:8)n)
p ← c ⊕ truncate(o,|c|)
return p
$← MAC.keygen0()
o ← PRF.eval(k, 0(cid:3)b )
k0 ← truncate(o, MAC.(cid:3)k0 )
return {EvalKey, EvalEnx,
EvalDex}
Oracle EvalEnx(j(cid:8)n, p)
if j ≤ j0 return ⊥
o $← Eval(j(cid:8)n)
c ← p ⊕ truncate(o,|p|)
return c
Lemma 3 (PrfCtrb reduces to Prfb): Given PRF, MAC,
and A against PrfCtrb(PRF, MAC), we construct B against
Prf b(PRF) such that:
PrfCtr(A[qb, qg]) = Prf (B[qb + qg + j0]).
The proof is in the full paper. Intuitively, we have a
perfect reduction because, in all cases, the specialized game
still samples a single fresh block for each j(cid:9)n for a single
purpose, and returns a value computed from that block.
|p|
In the next section, once b holds and the MAC has
been idealized, we will use two oracles that further idealize
encryption and decryption:
(cid:2)(j(cid:8)n, p)
Oracle EvalEnx
if j ≤ j0 return ⊥
if T [j(cid:8)n] (cid:5)= ⊥ return ⊥
if b(cid:2) c $← byte
else c $← EvalEnx(j(cid:8)n, p)
T [j(cid:8)n] ← (p, c)
return c
Oracle EvalDex
if j ≤ j0 return ⊥
if T [j(cid:8)n] = (p, c) for some p
else return ⊥
(cid:2)(j(cid:8)n, c)
return p
(cid:3) holds, encryption samples c instead of o = p ⊕ c,
When b
and records the pair (p, c) instead of just p ⊕ c; and
decryption simply performs a table lookup. This step is valid
provided the block at j(cid:9)n is used for encrypting a single p
and decrypting the resulting c. The oracles enforce this
restriction dynamically (on their second lines) whereas our
code enforces it statically, using type-based preconditions on
EvalEnx or EvalDex implied by the AEAD invariant of §V.
Veriﬁed Implementation Lemma 3 and the subsequent step
are not currently veriﬁed by typing. (Still, note that the
sampling of c instead of o is justiﬁed by F(cid:2)’s probabilistic
semantic and could be veriﬁed using the relational typing
rule for sample in RF(cid:2) [4])
471
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:24:30 UTC from IEEE Xplore.  Restrictions apply. 
(cid:2)
We use an idealized PRF module with two idealization
(cid:3)) that directly corresponds to the
ﬂags (for b and for b
specialized game PrfCtrb,b
parametrized by a Cipher mod-
ule that implements real AES128, AES256, and ChaCha20
(depending on an algorithmic parameter alg) and by a MAC
module. The separation of the PRF domain is enforced by
(cid:3), its range includes
typing: depending on alg, j0, j, b, and b
keys, blocks, and pairs (p, c).
V. FROM MAC AND PRF TO AEAD
We implement the two main AEAD constructions used
by TLS 1.3 and modern ciphersuites of TLS 1.2. We show
that their composition of a PRF and a one-time MAC yields
a standard notion of AEAD security. Our proof is generic
and carefully designed to be modular and TLS-agnostic: we
share our AEAD code between TLS 1.2 and 1.3, and plan
to generalize it for other protocols such as QUIC.
AEAD functionality Our authenticated encryption with
associated data (AEAD) has a real interface of the form
(∗ ﬁxed nonce length ∗)
val (cid:2)n: nat
val (cid:2)a: n:nat{n < 232} (∗ maximal AD length ∗)
val (cid:2)p: n:nat{n < 232} (∗ maximal plaintext length ∗)
val cipherlen: n:nat{n ≤ (cid:2)p} → Tot nat
type nonce = lbytes (cid:2)n
type ad = bbytes (cid:2)a
type plain = bbytes (cid:2)p
type cipher = bytes
val decrypt: key → nonce → ad → c:cipher →
ST (option (p:plain{length c = cipherlen (length p)}))
val encrypt: k:key → n:nonce → a:ad → p:plain →
ST (c:cipher{length c = cipherlen (length p))
with two functions to encrypt and decrypt messages with
associated data of variable lengths, and types that specify
the cipher length as a function of the plain length. (We omit
declarations for keys, similar to those for PRFs in §IV.)
Deﬁnition 6 (Aead security): Let Aead(A[qe, qd, (cid:2)p, (cid:2)a])
be the advantage of an adversary that makes at most qe
Encrypt and qd Decrypt queries on messages and associated
data of lengths at most (cid:2)p and (cid:2)a in the game:
Game Aeadb(AEAD)
C ← ∅
k $← AEAD.keygen()
return {Encrypt, Decrypt}
Oracle Encrypt(n, a, p)
if C[n] (cid:5)= ⊥ return ⊥
if b c $← bytecipherlen(|p|)
else c ← AEAD.encrypt(k, n, a, p)
C[n] ← (a, p, c)
return c
if C[n] = (a, p, c) for some p
return p
return ⊥
p ← AEAD.decrypt(k, n, a, c)
return p
Oracle Decrypt(n, a, c)
if b
else
Our deﬁnition generalizes AE in §II; it has a richer do-
main with plaintext and associated data of variable lengths;
a function cipherlen from plaintext
lengths to ciphertext
lengths; and nonces n. It similarly maintains a log of
472
encryptions, indexed by nonces. Crucially, Encrypt uses the
log to ensure that each nonce is used at most once for
encryption.
Generic AEAD Construction Given a PRF and a compat-
ible MAC, AEAD splits plaintexts into blocks which are
then blinded by pseudo-random one-time pads generated
by calling PRF on increasing counter values, as shown
in §IV. (Blocks for MAC keys and the last mask may require
truncation.)
To authenticate the ciphertext and associated data, the
construction formats them into a single 16-byte-aligned
buffer (ready to be hashed as polynomial coefﬁcients as
described in §III) using an encoding function declared
as val encode: bbytes (cid:2)p × bbytes (cid:2)a → Tot bbytes ((cid:2)p + (cid:2)a + 46)
and implemented (in pseudo-code) as
Function encode(c, a)
return pad16(a)(cid:8) pad16(c)
(cid:8) length8(a)(cid:8) length8(c)
Function pad16(b)
r, b1, . . . , br ← split16(b)
return b(cid:8) zeros(16 − |br|)
(b) splits the bytestring b
where the auxiliary function split(cid:4)
into a sequence of r non-empty bytestrings, all of size (cid:2),
except for the last one which may be shorter. (that
is,
((cid:2)), then b = b1 (cid:9)···(cid:9) br.); where
if r, b1, . . . br ← splitb
zeros((cid:2)) is the bytestring of (cid:2) zero bytes; and where
length8(n) is the 8-byte representation of the length of n.
Thus, our encoding adds minimal zero-padding to a and c,
so that they are both 16-bytes aligned, and appends a ﬁnal
16-byte encoding of their lengths.
is
that
Recall
the domain of MAC messages
re-
stricted by the wellformed predicate. We now deﬁne
wellformed b = ∃ (c:cipher) (a:ad). b = encode c a and typecheck
the property listed in §III that ensures injectivity of the
polynomial encoding.
The rest of the AEAD construction is deﬁned below,
using an operator otp⊕ p that abbreviates the expression
truncate(otp,|p|)⊕ p, and a function untag16 that separates
the ciphertext from the tag.
Function keygen()
k $← PRF.keygen(); k0 ← ε
if j0
o ← PRF.eval(k, 0(cid:3)b )
k0 ← truncate(o, MAC.(cid:2)k0
return k0(cid:10)k
)
Function encrypt(K, n, a, p)
(k0, k) ← split(cid:3)k0
(K); c ← ε
k1 ← PRF.eval(k, j0(cid:10)n)
km ← truncate(k0(cid:10)k1, MAC.(cid:2)k)
r, p1, . . . , pr ← split(cid:3)b
otp ← PRF.eval(k, j0 + j(cid:10)n)
c ← c (cid:10)(otp ⊕ pj )
t ← MAC.mac(km, encode(c, a))
return c(cid:10)t
for j = 1..r
(p);
Function decrypt(K, n, a, c)
(k0, k) ← split(cid:3)k0
(K); p ← ε
k1 ← PRF.eval(k, j0(cid:10)n)
km ← truncate(k0(cid:10)k1, MAC.(cid:2)k)
(c, t) ← untag16(c)
m ← encode(c, a)
if ¬MAC.verify(km, m, t)
return ⊥
r, c1, . . . , cr ← split(cid:3)b
otp ← PRF.eval(k, j0 + j(cid:10)n)
p ← p (cid:10)(otp ⊕ cj )
for j = 1..r
(c);
return p
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:24:30 UTC from IEEE Xplore.  Restrictions apply. 
The main result of this section is that it is Aead-secure
Theorem 2 (AEAD construction): Given A against Aead,
when PRF is Prf-secure and MAC is MMac1-secure:
we construct B against Prf and C against MMac1, with:
Aead(AEAD)(A[qe, qd, (cid:2)p, (cid:2)a]) ≤ Prf(PRF)(B[qb])
+ MMac1(MAC)(C[(cid:2)p + (cid:2)a + 46, qd, qe + qd])
where qb (the number of distinct queries to the PRF)
satisﬁes:
(cid:4)
(cid:5)
(cid:6)(cid:7)
qb ≤ j0 + qe
1 +
(cid:4)p
(cid:4)b
+ qd
(cid:2)
Proof sketch: The proof is in the full paper; it relies
and MMac1b idealizations; it involves a
on the PrfCtrb,b
1 that inline
sequence of transformations from Aead
successively more idealizations. Therefore, we introduce a
parametric game AeadCtr(X) for any game X that returns
EvalKey, EvalEnx, EvalDex, Mac, and Verify oracles:
0 to Aead
Game AeadCtr(X)
(EvalKey, EvalEnx, EvalDex, Mac, Verify) ← X()
return {Encrypt, Decrypt}
Oracle Encrypt(n, a, p)
if C[n] (cid:13)= ⊥ return ⊥
EvalKey(n); c ← ε
r, p1, . . . , pr ← split(cid:3)b
c ← c (cid:10) EvalEnx(j0 + j(cid:10)n, pj )
for j = 1..r
c ← c (cid:10) Mac(n, encode(c, a))
C[n] ← (a, p, c)
return c
(p)
Oracle Decrypt(n, a, c)
c, t ← untag16(c)
EvalKey(n)
if ¬Verify(n, encode(c, a), t)
return ⊥
(c); p← ε
r, c1, . . . , cr ← split(cid:3)b
p ← p (cid:10) EvalDex(j0 + j(cid:10)n, cj )
for j = 1 . . . r
return p
0 and MMac1
0 we have a
When X is obtained from PrfCtr
1
0. We ﬁrst switch to PrfCtr
game that is equivalent to Aead
1. When
to get random MAC keys and then idealize MMac1
1 and MMac1
1 ciphertexts are
X is obtained from PrfCtr
1,0 and then to
authenticated and we can switch to PrfCtr
1,1. At this stage the PRF table contains randomly
PrfCtr
sampled ciphertext blocks and decryption corresponds to
table lookup in this table. This is ensured on the code by
our AEAD invariant.
Veriﬁed Implementation We outline below the idealized
interface of our main AEADb module built on top of (the
idealized interfaces of) PrfCtrb,b
and MMac1b, both taken
as cryptographic assumption, and documented by the games
with the same names on paper. We focus on types for
encryption and decryption:
abstract type key (∗ stateful key, now containing the log ∗)
val log: memory → key →
Spec (seq (nonce × ad × cipher × plain)
val keygen : unit → ST (k:key)