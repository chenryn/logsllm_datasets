      movq 144(%rsp), %xmm3
      movq 160(%rsp), %xmm4
      movq 176(%rsp), %xmm5
      movq 192(%rsp), %xmm6
      movq 208(%rsp), %xmm7
      movq 224(%rsp), %xmm8
      movq 240(%rsp), %xmm9
      movq 256(%rsp), %xmm10
      movq 272(%rsp), %xmm11
      movq 288(%rsp), %xmm12
      movq 304(%rsp), %xmm13
      movq 320(%rsp), %xmm14
      movq 336(%rsp), %xmm15
      leaq 352(%rsp), %rsp
      jmp  __afl_store
  1. 调用`close(STRINGIFY(FORKSRV_FD))`和`close(STRINGIFY(FORKSRV_FD + 1))`，即调用`close(198)`和`close(199)`，关闭两个状态管道。
  2. 弹出栈中的两个用于对齐的无用数据。(此数据在`__afl_forkserver`中被压栈)
  3. 从`R12`寄存器中恢复`RSP`寄存器的值。(此值在`__afl_setup_first`中被保存)
  4. 从栈中恢复所有在`__afl_setup_first`中被保存的寄存器值。
  5. 回收在`__afl_setup_first`中被开辟的栈空间。
  6. 跳转`__afl_store`函数。
####  `__afl_die`函数
    __afl_die:
      xorq %rax, %rax
      call _exit@PLT
调用`exit(0)`退出。
####  `__afl_setup_abort`函数
    __afl_setup_abort:
      /* Record setup failure so that we don't keep calling
         shmget() / shmat() over and over again. */
      incb __afl_setup_failure(%rip)
      movq %r12, %rsp
      popq %r12
      movq  0(%rsp), %rax
      movq  8(%rsp), %rcx
      movq 16(%rsp), %rdi
      movq 32(%rsp), %rsi
      movq 40(%rsp), %r8
      movq 48(%rsp), %r9
      movq 56(%rsp), %r10
      movq 64(%rsp), %r11
      movq  96(%rsp), %xmm0
      movq 112(%rsp), %xmm1
      movq 128(%rsp), %xmm2
      movq 144(%rsp), %xmm3
      movq 160(%rsp), %xmm4
      movq 176(%rsp), %xmm5
      movq 192(%rsp), %xmm6
      movq 208(%rsp), %xmm7
      movq 224(%rsp), %xmm8
      movq 240(%rsp), %xmm9
      movq 256(%rsp), %xmm10
      movq 272(%rsp), %xmm11
      movq 288(%rsp), %xmm12
      movq 304(%rsp), %xmm13
      movq 320(%rsp), %xmm14
      movq 336(%rsp), %xmm15
      leaq 352(%rsp), %rsp
      jmp __afl_return
  1. 将`AFL`初始化失败计数器`__afl_setup_failure`加1。
  2. 从`R12`寄存器中恢复`RSP`寄存器的值。(此值在`__afl_setup_first`中被保存)
  3. 从栈中恢复所有在`__afl_setup_first`中被保存的寄存器值。
  4. 回收在`__afl_setup_first`中被开辟的栈空间。
  5. 跳转`__afl_return`函数。
###  `main_payload_64`代码总结
至此，`main_payload_64`的所有函数分析完毕，其流程图如下：
**P.S：凡是线有交叉的均使用了不同颜色的线进行标注。**
但事实上这只是`afl-as`对目标程序进行的插桩处理，正式进行`fuzz`时，还会有部分关键逻辑在`afl-fuzz`中，我将在日后对`afl-fuzz`进行分析时进行详述。
###  `main_payload_32`代码分析
去除了对于`MacOS`以及`OpenBSD`的系统适配后，合并宏定义后代码整理结果如下：
    /* --- AFL MAIN PAYLOAD (32-BIT) --- */
    .text
    .att_syntax
    .code32
    .align 8
    __afl_maybe_log:
      lahf
      seto %al
      /* Check if SHM region is already mapped. */
      movl  __afl_area_ptr, %edx
      testl %edx, %edx
      je    __afl_setup
    __afl_store:
      /* Calculate and store hit for the code location specified in ecx. There
         is a double-XOR way of doing this without tainting another register,
         and we use it on 64-bit systems; but it's slower for 32-bit ones. */
    #ifndef COVERAGE_ONLY
      movl __afl_prev_loc, %edi
      xorl %ecx, %edi
      shrl $1, %ecx
      movl %ecx, __afl_prev_loc
    #else
      movl %ecx, %edi
    #endif /* ^!COVERAGE_ONLY */
    #ifdef SKIP_COUNTS
      orb  $1, (%edx, %edi, 1)
    #else
      incb (%edx, %edi, 1)
    #endif /* ^SKIP_COUNTS */
    __afl_return:
      addb $127, %al
      sahf
      ret
    .align 8
    __afl_setup:
      /* Do not retry setup if we had previous failures. */
      cmpb $0, __afl_setup_failure
      jne  __afl_return
      /* Map SHM, jumping to __afl_setup_abort if something goes wrong.
         We do not save FPU/MMX/SSE registers here, but hopefully, nobody
         will notice this early in the game. */
      pushl %eax
      pushl %ecx
      pushl $.AFL_SHM_ENV
      call  getenv
      addl  $4, %esp
      testl %eax, %eax
      je    __afl_setup_abort
      pushl %eax
      call  atoi
      addl  $4, %esp
      pushl $0          /* shmat flags    */
      pushl $0          /* requested addr */
      pushl %eax        /* SHM ID         */
      call  shmat
      addl  $12, %esp
      cmpl $-1, %eax
      je   __afl_setup_abort
      /* Store the address of the SHM region. */
      movl %eax, __afl_area_ptr
      movl %eax, %edx
      popl %ecx
      popl %eax
    __afl_forkserver:
      /* Enter the fork server mode to avoid the overhead of execve() calls. */
      pushl %eax
      pushl %ecx
      pushl %edx
      /* Phone home and tell the parent that we're OK. (Note that signals with
         no SA_RESTART will mess it up). If this fails, assume that the fd is
         closed because we were execve()d from an instrumented binary, or because 
         the parent doesn't want to use the fork server. */
      pushl $4          /* length    */
      pushl $__afl_temp /* data      */
      pushl $" STRINGIFY((FORKSRV_FD + 1)) "  /* file desc */
      call  write
      addl  $12, %esp
      cmpl  $4, %eax
      jne   __afl_fork_resume
    __afl_fork_wait_loop:
      /* Wait for parent by reading from the pipe. Abort if read fails. */
      pushl $4          /* length    */
      pushl $__afl_temp /* data      */
      pushl $" STRINGIFY(FORKSRV_FD) "        /* file desc */
      call  read
      addl  $12, %esp
      cmpl  $4, %eax
      jne   __afl_die
      /* Once woken up, create a clone of our process. This is an excellent use
         case for syscall(__NR_clone, 0, CLONE_PARENT), but glibc boneheadedly
         caches getpid() results and offers no way to update the value, breaking
         abort(), raise(), and a bunch of other things :-( */
      call fork
      cmpl $0, %eax
      jl   __afl_die
      je   __afl_fork_resume
      /* In parent process: write PID to pipe, then wait for child. */
      movl  %eax, __afl_fork_pid
      pushl $4              /* length    */
      pushl $__afl_fork_pid /* data      */
      pushl $" STRINGIFY((FORKSRV_FD + 1)) "      /* file desc */
      call  write
      addl  $12, %esp
      pushl $0             /* no flags  */
      pushl $__afl_temp    /* status    */
      pushl __afl_fork_pid /* PID       */
      call  waitpid
      addl  $12, %esp
      cmpl  $0, %eax
      jle   __afl_die
      /* Relay wait status to pipe, then loop back. */
      pushl $4          /* length    */
      pushl $__afl_temp /* data      */
      pushl $" STRINGIFY((FORKSRV_FD + 1)) "  /* file desc */
      call  write
      addl  $12, %esp
      jmp __afl_fork_wait_loop
    __afl_fork_resume:
      /* In child process: close fds, resume execution. */
      pushl $" STRINGIFY(FORKSRV_FD)
      call  close
      pushl $" STRINGIFY((FORKSRV_FD + 1))
      call  close
      addl  $8, %esp
      popl %edx
      popl %ecx
      popl %eax
      jmp  __afl_store
    __afl_die:
      xorl %eax, %eax
      call _exit
    __afl_setup_abort:
      /* Record setup failure so that we don't keep calling
         shmget() / shmat() over and over again. */
      incb __afl_setup_failure
      popl %ecx
      popl %eax
      jmp __afl_return
    .AFL_VARS:
      .comm   __afl_area_ptr, 4, 32
      .comm   __afl_setup_failure, 1, 32
    #ifndef COVERAGE_ONLY
      .comm   __afl_prev_loc, 4, 32
    #endif /* !COVERAGE_ONLY */
      .comm   __afl_fork_pid, 4, 32
      .comm   __afl_temp, 4, 32
    .AFL_SHM_ENV:
      .asciz  "SHM_ENV_VAR"
32位代码与64位代码大同小异，接下来进行分析
####  `__afl_maybe_log`函数
此函数主要负责保存现场并且检查共享内存是否已被分配。
    __afl_maybe_log:
      lahf
      seto %al
      /* Check if SHM region is already mapped. */
      movl  __afl_area_ptr, %edx
      testl %edx, %edx
      je    __afl_setup
与64位代码完全相同，只不过保存共享内存指针的位置变成了`edx`
####  `__afl_store`函数