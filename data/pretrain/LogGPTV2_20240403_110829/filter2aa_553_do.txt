int onkoo;
1147
onkoo = stonk >
右移运算符（>>）将其左侧运算对象每一位的值向右移动其右侧运算
对象指定的位数。左侧运算对象移出右末端位的值丢。对于无符号类型，用
0 填充空出的位置；对于有符号类型，其结果取决于机器。空出的位置可用
0填充，或者用符号位（即，最左端的位）的副本填充：
(10001010) >> 2    // 表达式，有符号值
(00100010)       // 在某些系统中的结果值
(10001010) >> 2    // 表达式，有符号值
(11100010)       // 在另一些系统上的结果值
下面是无符号值的例子：
(10001010) >> 2    // 表达式，无符号值
(00100010)       // 所有系统都得到该结果值
每个位向右移动两个位置，空出的位用0填充。
右移赋值运算符（>>=）将其左侧的变量向右移动指定数量的位数。如
下所示：
int sweet = 16;
int ooosw;
ooosw = sweet >> 3;  // ooosw = 2，sweet的值仍然为16
1148
sweet >>=3;      // sweet的值为2
3.用法：移位运算符
移位运算符针对2的幂提供快速有效的乘法和除法：
number > n    如果number为非负，则用number除以2的n次幂
这些移位运算符类似于在十进制中移动小数点来乘以或除以10。
移位运算符还可用于从较大单元中提取一些位。例如，假设用一个
unsigned long类型的值表示颜色值，低阶位字节储存红色的强度，下一个字
节储存绿色的强度，第 3 个字节储存蓝色的强度。随后你希望把每种颜色的
强度分别储存在3个不同的unsigned char类型的变量中。那么，可以使用下面
的语句：
#define BYTE_MASK 0xff
unsigned long color = 0x002a162f;
unsigned char blue, green, red;
red = color & BYTE_MASK;
green = (color >> 8) & BYTE_MASK;
blue = (color >> 16) & BYTE_MASK;
以上代码中，使用右移运算符将 8 位颜色值移动至低阶字节，然后使用
掩码技术把低阶字节赋给指定的变量。
15.3.8 编程示例
在第 9 章中，我们用递归的方法编写了一个程序，把数字转换为二进制
1149
形式（程序清单 9.8）。现在，要用移位运算符来解决相同的问题。程序清
单15.1中的程序，读取用户从键盘输入的整数，将该整数和一个字符串地址
传递给itobs()函数（itobs表示interger to binary string，即整数转换成二进制字
符串）。然后，该函数使用移位运算符计算出正确的1和0的组合，并将其放
入字符串中。
程序清单15.1 binbit.c程序
/* binbit.c -- 使用位操作显示二进制 */
#include 
#include  // 提供 CHAR_BIT 的定义，CHAR_BIT 表示每字节
的位数
char * itobs(int, char *);
void show_bstr(const char *);
int main(void)
{
char bin_str[CHAR_BIT * sizeof(int) + 1];
int number;
puts("Enter integers and see them in binary.");
puts("Non-numeric input terminates program.");
while (scanf("%d", &number) == 1)
{
itobs(number, bin_str);
1150
printf("%d is ", number);
show_bstr(bin_str);
putchar('\n');
}
puts("Bye!");
return 0;
}
char * itobs(int n, char * ps)
{
int i;
const static int size = CHAR_BIT * sizeof(int);
for (i = size - 1; i >= 0; i--, n >>= 1)
ps[i] = (01 & n) + '0';
ps[size] = '\0';
return ps;
}
/*4位一组显示二进制字符串 */
void show_bstr(const char * str)
{
1151
int i = 0;
while (str[i]) /* 不是一个空字符 */
{
putchar(str[i]);
if (++i % 4 == 0 && str[i])
putchar(' ');
}
}
程序清单15.1使用limits.h中的CHAR_BIT宏，该宏表示char中的位数。
sizeof运算符返回char的大小，所以表达式CHAE_BIT * sizeof(int)表示int类型
的位数。bin_str数组的元素个数是CHAE_BIT * sizeof(int) + 1，留出一个位置
给末尾的空字符。
itobs()函数返回的地址与传入的地址相同，可以把该函数作为printf()的
参数。在该函数中，首次执行for循环时，对01 & n求值。01是一个八进制形
式的掩码，该掩码除0号位是1之外，其他所有位都为0。因此，01 & n就是n
最后一位的值。该值为0或1。但是对数组而言，需要的是字符'0'或字符'1'。
该值加上'0'即可完成这种转换（假设按顺序编码的数字，如 ASCII）。其结
果存放在数组中倒数第2个元素中（最后一个元素用来存放空字符）。
顺带一提，用1 & n或01 & n都可以。我们用八进制1而不是十进制1，只
是为了更接近计算机的表达方式。
然后，循环执行i--和n >>= 1。i--移动到数组的前一个元素，n >>= 1使n
中的所有位向右移动一个位置。进入下一轮迭代时，循环中处理的是n中新
的最右端的值。然后，把该值储存在倒数第3个元素中，以此类推。itobs()
函数用这种方式从右往左填充数组。
1152
可以使用printf()或puts()函数显示最终的字符串，但是程序清单15.1中定
义了show_bstr()函数，以4位一组打印字符串，方便阅读。
下面的该程序的运行示例：
Enter integers and see them in binary.
Non-numeric input terminates program.
7
7 is 0000 0000 0000 0000 0000 0000 0000 0111
2013
2013 is 0000 0000 0000 0000 0000 0111 1101 1101
-1
-1 is 1111 1111 1111 1111 1111 1111 1111 1111
32123
32123 is 0000 0000 0000 0000 0111 1101 0111 1011
q
Bye!
15.3.9 另一个例子
我们来看另一个例子。这次要编写的函数用于切换一个值中的后 n 位，
待处理值和 n 都是函数的参数。
～运算符切换一个字节的所有位，而不是选定的少数位。但是，^运算
符（按位异或）可用于切换单个位。假设创建了一个掩码，把后n位设置为
1153
1，其余位设置为0。然后使用^组合掩码和待切换的值便可切换该值的最后n
位，而且其他位不变。方法如下：
int invert_end(int num, int bits)
{
int mask = 0;
int bitval = 1;
while (bits–– > 0)
{
mask |= bitval;
bitval 
#include 
char * itobs(int, char *);
void show_bstr(const char *);
int invert_end(int num, int bits);
int main(void)
{
char bin_str[CHAR_BIT * sizeof(int) + 1];
int number;
puts("Enter integers and see them in binary.");
puts("Non-numeric input terminates program.");
while (scanf("%d", &number) == 1)
{
itobs(number, bin_str);
printf("%d is\n", number);
show_bstr(bin_str);
putchar('\n');
number = invert_end(number, 4);
printf("Inverting the last 4 bits gives\n");
1155
show_bstr(itobs(number, bin_str));
putchar('\n');
}
puts("Bye!");
return 0;
}
char * itobs(int n, char * ps)
{
int i;
const static int size = CHAR_BIT * sizeof(int);
for (i = size - 1; i >= 0; i--, n >>= 1)
ps[i] = (01 & n) + '0';
ps[size] = '\0';
return ps;
}
/* 以4位为一组，显示二进制字符串 */
void show_bstr(const char * str)
{
int i = 0;
1156
while (str[i]) /* 不是空字符 */
{
putchar(str[i]);
if (++i % 4 == 0 && str[i])
putchar(' ');
}
}
int invert_end(int num, int bits)
{
int mask = 0;
int bitval = 1;
while (bits-- > 0)
{
mask |= bitval;
bitval <<= 1;
}
return num ^ mask;
}
下面是该程序的一个运行示例：
1157
Enter integers and see them in binary.
Non-numeric input terminates program.
7
7 is
0000 0000 0000 0000 0000 0000 0000 0111
Inverting the last 4 bits gives
0000 0000 0000 0000 0000 0000 0000 1000
12541
12541 is
0000 0000 0000 0000 0011 0000 1111 1101
Inverting the last 4 bits gives
0000 0000 0000 0000 0011 0000 1111 0010
q
Bye!
1158
15.4 位字段
操控位的第2种方法是位字段（bit field）。位字段是一个signed int或
unsigned int类型变量中的一组相邻的位（C99和C11新增了_Bool类型的位字
段）。位字段通过一个结构声明来建立，该结构声明为每个字段提供标签，
并确定该字段的宽度。例如，下面的声明建立了一个4个1位的字段：
struct {
unsigned int autfd : 1;
unsigned int bldfc : 1;
unsigned int undln : 1;
unsigned int itals : 1;
} prnt;
根据该声明，prnt包含4个1位的字段。现在，可以通过普通的结构成员
运算符（.）单独给这些字段赋值：
prnt.itals = 0;
prnt.undln = 1;
由于每个字段恰好为1位，所以只能为其赋值1或0。变量prnt被储存在
int大小的内存单元中，但是在本例中只使用了其中的4位。
带有位字段的结构提供一种记录设置的方便途径。许多设置（如，字体
的粗体或斜体）就是简单的二选一。例如，开或关、真或假。如果只需要使
用 1 位，就不需要使用整个变量。内含位字段的结构允许在一个存储单元中
储存多个设置。
有时，某些设置也有多个选择，因此需要多位来表示。这没问题，字段
1159
不限制 1 位大小。可以使用如下的代码：
struct {