j=0 δjxj.
i=1 to B. Next:
with a random T ∈ G. Given {m1, ..., mn, m∗}, BDDHI ﬁrst
computes the tuple (g, gγ, ..., gγq
) by the Binomial Theorem
where γ = α − m∗. Then, it computes g(cid:48) = gf (γ), w = (g(cid:48))γ
and Ai = (g(cid:48))1/(γ+mi) for each i ∈ [n] as in the proof for
Lemma 1, and returns g(cid:48), w and {Ai}n
• If m∗ is equal to one of {mi}n
i=1, BDDHI aborts. We also
denote this event as abort.
• Otherwise, BDDHI computes gq(γ) = Πn−1
j=0 (gγj
)δj , and
returns σ = gq(γ)T θ to B as the challenge A∗
b, where f (x) =
q(x)(x + m) + θ for some θ (cid:54)= 0 and q(x) = Σn−1
Finally, BDDHI returns the output of B as the solution of q-
DDHI problem.
If T = g1/(α), then σ = gγgθ/(γ+m) = gf (γ)/(γ+m) =
(g(cid:48))1/(γ+m). Otherwise, T is uniformly distributed in G∗ and
so is σ. If BDDHI does not abort, it succeeds if Exp2 returns
1. The probability of abortion is Pr[abort] ≤ n/p. Thus, we
have the bound claimed by Lemma 2.
By Lemma 2, we can straightforwardly bound the difference
between Game 4 and Game 3 using a reduction B3 against
the experiment in Fig. 5. In particular, B3 executes just as in
Game 3 and interacts with A, with the following exceptions:
• B3 outputs {uid i}i∈[n]\[j] and the challenge message uid j
before the setup phase, and receives {(uid i, Ai)}i∈[n]\[j] and
sets Ai as the credential of user i for i ∈ [n]\[j]. B3 also
receives a challenge credential X on message uid j. Besides,
B3 receives w and sets w as isp.
• B3 sets X as the credential of user j and uses X to
validate the tokens in all VERIFY(uid j, (cid:63), (cid:63)) queries with
the extracted uid j.
$← G∗ and sets Ri as the credential of user i
for each i ∈ [j − 1]. B3 uses Ri to validate the tokens in
all VERIFY (uidi, (cid:63), (cid:63)) queries with the extracted uid i for
i ∈ [j − 1].
If X is an authentication tag on message uidj, B3 behaves
exactly as in Game (3, j − 1). If X is a random element in
G∗, B3 behaves exactly as in Game (3, j). Thus, we have
(O(t(cid:48) + n2texp), n).
Adv3(A) = Adv4(A) + nAdvDDHIG
• B3 picks Ri
In Game 4, the credentials of all users are uniformly random
in G∗. Since HG is a random oracle, [Ri]pwi = Ri · HG(pwi)
is random in group G for every i ∈ [n]. Thus, the only way for
getting a credential Ri is to mount online dictionary attacks
via VERIFY for each i ∈ [n] when the password of user i is not
revealed. From the simulation-sound extractability of SPK, we
know that A must recover Ri from [Ri]pwi in order to forge
an authentication token on (extracted) username uid∗ = uidi
for any i ∈ [n]. Therefore, we obtain Adv4(A) ≤ qv/|D|.
9
In the ﬁnal game, we bound the adversary’s advantage by
qv/|D|. This completes the proof.
D. Strong Authentication with PBC
Similar to digital signature schemes, πPBC (as well as
other PBC schemes) can be used as a strong authentication
mechanism as follows:
C
B
P
w it h
n
a ti o
n ti c
e
u t h
A
e r
U s
IdP
(
a
s
s
e
r
t
i
o
n
,
π
P
K
)
RP
1) The server chooses a challenge message m at random,
and sends it to the user.
2) The user generates an authentication token σ ←
Sign(uid , pw , [cre]pw , m), and sends (uid , σ) to the server.
3) Upon receiving (uid , σ), the server veriﬁes the user by
checking whether Verify(γ, uid , m, σ) = 1.
A PBC authenticator can be implemented entirely with
software. The user authenticates to server through “some-
thing possessed” (i.e., the PBC authenticator) and “something
known” (i.e., the password). It provides superior security guar-
antees than the other software authenticators in the setting that
the authenticator is leaked by device stolen/broken, as the latter
are vulnerable to off-line attacks. However in the setting where
the attacker installs malware (e.g. key-logger) on the user’s
device and obtains both the password and the credentials, it
might not protect the user and additional mitigation is needed
to prevent such key-logger attacks. One possible mitigation
is to use an anti-malware software such as IBM’s Trusteer
Rapport [7], which is available with PC, android and IOS.
In practice, PBC authenticators can be implemented by
the operating system or browser via providing APIs which
can be called by applications, or also be implemented by
mobile applications or browser extensions using common
cryptographic libraries alone.
Compared with traditional authenticator for strong authen-
tication, PBC authenticator does not become another thing to
be remembered to carry, as it
can be implemented across
different devices (e.g., mobile phones and desktop computers)
simultaneously to perform strong authentication. Moreover,
the PBC authenticator can be stored on a cloud server for
backup, which enables the user to fetch it on a new device
for authentication in the case that the old device carrying
the authenticator is compromised or lost. By contrast, losing
an authenticator for hardware-based mechanisms [45], [57],
[60] means losing all credentials bound to it. The W3C’s web
authentication speciﬁcation [60] suggests to register multiple
credentials for the same user as backup for authenticator lost.
In PBC, a user encrypts and decrypts its credentials with
passwords locally, which means that it can change passwords
in an off-line manner, by decrypting the wrapped credentials
with old passwords and then encrypting them with new ones.
Note that the server does not store a password-related ﬁle as
usual, the system also provides security against ofﬂine attacks
in the event of server compromise (assuming that the attacker
does not also compromise the password-wrapped credentials).
For practical security, we suggest that the server should
protect γ with a secure hardware, and should implement the
Issue algorithm with a protection from being utilized as an
oracle which enables an attacker to query credentials belonging
to honest users. Such protection can be implemented with
User
n
R(uid,π
R)
Fig. 6: The application of PBC for holder-of-key assertion.
some common measures such as out-of-band devices. To avoid
online attacks, both the rate-limiting mechanisms in [31] that
effectively limits the number of failed authentication attempts
that can be made on the user’s account, and the related
techniques [31] reducing the likelihood that an attacker locks
legitimate users out by abusing the mechanism, are applicable
to PBC-based authentication systems.
V. APPLICATION OF PBC IN FEDERATED IDENTITY
In this section, we show the applications of PBC schemes
in federated identity systems, where ΠPBC is taken as an
example. We ﬁrst present a trivial application of using PBC
for the authentication between user and IdP, and then describe
how PBC can be applied for holder-of-key assertions with
a privacy-preserving option. In the second application, we
provide a technique to transform the designated-veriﬁability of
PBC scheme to publicly-veriﬁability with the help of an IdP,
such that the user can prove the possession of its credential
to any RP. Furthermore, to meet the requirement of privacy-
preserving scenarios, such as the user login at RPs with
pseudonyms allocated by the IdP, our application also supports
an option that the user prove the possession of key for the
holder-of-key assertion in a privacy-preserving way.
For simplicity, our description only presents the details that
are related to the application of PBC, and can be adopted by
various federation systems implementing either modes, such as
OpenID Connect [51], OAuth 2.0 [33], [36] and SAML2 [46],
[39]. Based on a PBC scheme PBC = (Setup, KeyGen, Issue,
Sign, Verify), the applications are described as follows:
A. Application for user-IdP authentication
Setup. The IdP chooses the public parameters pp from a
publicly-trusted source such as a standard, generates the secret
key γ and public parameter w via executing KeyGen. Then it
publishes pp and w.
10
Registration. The user interacts with IdP via executing the
interactive protocol Issue(sk, Reg) (cid:10) (uid, pw), and stores the
password-wrapped credential [cre]pw to a preferred storage.
Authentication. In common federated identity systems,
the
user ﬁrst visits RP, and is then redirected to the IdP for
authentication.
1) The IdP generates a challenge nI
to the user as a challenge.
$← {0, 1}λ, and sends nI
2) Upon receiving nI, the user generates the authentication
token σI = (T, πT ) via Sign(uid , pw , [cre]pw , nI ), and
sends (uid , σI ) to the IdP.
3) The IdP veriﬁes the user’s authentication token σI by
checking Verify(γ, uid , nI , σI ) = 1, and continues the
protocol ﬂow of identity federation if the check passes.
B. Application for holder-of-key assertion
The authentication token σ = (T, πT ) of ΠPBC presented in
section IV-B is a signature proof of knowledge:
πT ← SPK{(a) : ga = PK} (m) for PK = T γ+uid ,
which can only be checked by the designated veriﬁer (i.e., IdP)
with the knowledge of γ. For a veriﬁer who does not hold γ
(e.g., RP), it needs the value of PK and the knowledge that
PK is generated correctly in the form T γ+uid for an unknown
γ. Thus, we let IdP to provide PK with a proof of knowledge
that proves the validity of PK .
In this application, the Setup and Registration phases are
the same as in the application presented in Section V-A. We
present the Authentication phase as follows (Also see Fig. 6):
1) The user authenticates to the IdP ﬁrst, where an ephemeral
p is chosen and used in the Sign
private-key a
algorithm. a is kept for further usage.
$← Z∗
2) If IdP authenticates the user successfully with an authen-
tication token σI = (T, πT ), it generates a holder-of-key
assertion assertion. In this step, we provide two options as
follows:
a) (The privacy-preserving option.) When the privacy
of user is required to be protected,
the IdP calcu-
lates ˜PK = T γ, puts (T , ˜PK ) in assertion, and signs
assertion with a proof of knowledge that logT ( ˜PK ) is
equal to that of γ:
π ˜P K = SPK(cid:48){(γ) : w = g γ ∧ ˜PK = T γ}(·).
b) Otherwise, the IdP calculates PK = T γ+uid, and puts
(T, PK ) in assertion. Then, it signs assertion with a
signature proof of knowledge that the discrete logarithm
of logT (T −uid · PK ) is equal to γ:
πPK = SPK(cid:48)(cid:8)(γ) : w = g γ ∧ T −uid · PK = T γ(cid:9) (·).
Next, assertion and πPK (or π ˜PK ) are presented to the
RP via either the front-channel or back-channel modes. In
the front channel mode, assertion and πPK (or π ˜PK ) are
transferred to the RP via the user. As for the back-channel
mode, only a reference to assertion (e.g., an authorization
code) is transmitted to the RP via user. Then, the RP
redeems assertion and πPK by sending the reference to the
IdP. Upon receiving the reference and checks its validity,
the IdP responds with assertion and πPK (or π ˜PK ).
3) Upon receiving assertion and πPK (or π ˜PK ),
the RP
requests the user to prove the possession of key corre-
sponding to PK (or ˜PK ) by sending a random challenge
nR
$← {0, 1}λ.
4) The user generates a proof-of-possession of the ephemeral
private-key a w.r.t to the ephemeral public-key PK , which
also includes two options:
a) (The privacy-preserving option.) For this option, it
calculates a privacy-preserving authentication token:
πR ← SPK(cid:48)(cid:48){(a, uid) : T −uid · ga = ˜PK}(nR), and
sends πR to the RP.
it calculates: πR ← SPK{(a) : ga =
PK}(nR), and sends (uid , πR) to the RP.
b) Otherwise,
5) The RP checks the validity of assertion as well as the user’s
proof-of-possession of key as follows:
a) (The privacy-preserving option.) For this option, the
RP ﬁrst checks the validity of π ˜PK with w, T and
˜PK , then checks πR with T and ˜PK , and accepts if
all checks pass.
b) Otherwise, the RP checks πPK , and use PK and uid
to verify πR.
Instantiation of SPK(cid:48). Here, based on the Chaum-Pedersen
protocol [26] and Fiat-Shamir heuristic [28], SPK(cid:48) can be
instantiated as follows for a cryptographic hash function
H(cid:48) : {0, 1}∗ → Zp:
Prove: The algorithm picks r
where c ← H(cid:48)(cid:0)g, T, w, T −uid · PK , R1, R2
$← Zp and computes R1 ← T r
and R2 ← gr. Then, it computes s ← r + c · γ mod p,
outputs a proof πPK ← (c, s).
compute R(cid:48)