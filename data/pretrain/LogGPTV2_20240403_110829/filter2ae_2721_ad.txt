  2. AbstractBeanFactoryPointcutAdvisor->getAdvice() 调用 BeanFactory->getBean()
  3. SimpleJndiBeanFactory->getBean() 触发 the JNDI lookup.
  4. **适用于**
SnakeYAML (3.1.1), Jackson (3.1.6), Castor (3.1.7), Kryo
(3.2.2),Hessian/Burlap (3.2.3), json-io (3.2.4), XStream (3.2.5)
### 4.13 SpringDefaultListableBeanFactory
假设这个机制可以被恢复 ，SimpleJndiBeanFactory（4.1，4.11，4.12 中用到） 也能被
DefaultListableBeanFactory 替代。 需要有恢复 non-java.io.Serializable
对象、恢复临时字段、或调用构造函数能力，不能通过调用 readObject() 或 setter 方法实现。 Alvaro Muñoz 之前描述过它在
Java Serialization
中的使用。[CVE-2011-2894](http://www.pwntester.com/blog/2013/12/16/cve-2011-2894-deserialization-spring-rce/)
然而 ，他的方向需要用到 proxy 。 Spring 对象构造函数可以通过 上面 描述的 SpringBFAdv (4.12) 或
SpringPropFac (4.10) 链来触发。
### 4.14 Apache XBean
依赖 xbean-naming 。 不需要构造函数调用。 所有涉及的class 均 java.io.Serializable
  1. 使用 SpringCompAdv (4.11)中描述的 org.apache.xbean.naming.context.ContextUtil$ReadOnlyBinding 触发 toString()。 实例没有一个稳定的hashCode(),所有还需要额外的操作。
  2. javax.naming.Binding->toString() 调用 getObject().
  3. ReadOnlyBinding->getObject() 利用提供的 javax.naming.Reference 调用 ContextUtil->resolve() 
  4. ContextUtil->resolve() 调用 javax.naming.spi.NamingManager->getObjectInstance() ( bypass 了 最近新增的代码库关于 JNDI References 的限制)
  5. **适用于**
SnakeYAML (3.1.1), Java Serialization (3.2.1), Kryo (3.2.2)†, Hessian/Burlap
(3.2.3),json-io (3.2.4), XStream (3.2.5)
### 4.15 Caucho Resin
依赖 Resin 。不需要调用构造函数。javax.naming.spi.ContinuationContext 未实现
java.io.Serializable.
  1. 使用 SpringCompAdv (4.11) 中描述的 com.caucho.naming.QName 触发 toString()。 它有一个稳定的 hashCode() 实现。
  2. QName->toString() 调用 javax.naming.Context->composeName()
  3. ContinuationContext->composeName() 调用 getTargetContext()，进而利用攻击者提供的UI对象调用 NamingManager->getContext(), 最终到达 NamingManager->getObjectInstance()
  4. **适用于**
Kryo (3.2.2)†, Hessian/Burlap (3.2.3), json-io (3.2.4), XStream (3.2.5）
### 4.16 javax.script.ScriptEngineManager
来自 Oracle/OpenJDK 标准库。 需要使用提供的数据调用任意构造函数的能力。 涉及的类型没有实现 java.io.Serializable。
  1. 构建一个 java.net.URL 指向一个远程 class path
  2. 使用该 URL 构建一个 java.net.URLClassLoader
  3. 使用该 ClassLoader 构建 javax.script.ScriptEngineManager
  4. javax.script.ScriptEngineManager 构造函数 会调用 ServiceLoader 机制 ， 最终实例化一个任意实现了该接口的远程 class
  5. **适用于**
SnakeYAML (3.1.1)
### 4.17 Commons BeanutilsBeanComparator
知名的 Java deserialization gadget ，由 Chris Frohoff 第一次发布。 实现了
java.io.Serializable， 有public 默认构造函数，需要的属性也有 public getter/setter 。如果提供了一个排序过的
collection/map ，就需要调用一个自定义的 java.util.Comparator。
  1. 根据要调用的 getter， 用 Comparator 构造一个包含属性集的 collection/map 。
  2. 插入两个目标对象实例， 进而调用 Comparator
  3. BeanComparator 会调用两个对象的 属性getter 方法
也能用于通过 'databaseMetaData' 触发 TemplatesImpl (4.1.1) or JdbcRowset (4.2)
  * **适用于**
Java Serialization (3.2.1), Kryo (3.2.2), XStream (3.2.5)
### 4.18 ROMEEqualsBean/ToStringBean
作为一个 Java deserialization gadge 被公开。 所有涉及类型都实现了 java.io.Serializable
。没有默认构造函数和 setters。 因此 exp 需要一个运行任意构造函数调用、或、完全不调用构造函数的 marshaller 。需要可以
marshal java.lang.Class 。
  1. 创建一个 EqualsBean，将 obj 设置为 ToStringBean 实例。 ToStringBean 的 'obj' 设置为目标对象， 它的 'beanClass'属性就是对象的 class (或者包含应该调用的 getter 方法的 superclass/interface ，这可能是有帮助的，因为来自 getter 的异常将停止执行)
  2. 插入结果返回的对象进入 collection ,调用 hashCode()
  3. EqualsBean->hashCode() 触发 'obj' 属性的 toString()
  4. ToStringBean->toString() 调用所有 'beanClass' 的 getter 方法
也能通过 'databaseMetaData' 属性触发 TemplatesImpl (4.1.1) 或者 JdbcRowset (4.2)
  * **适用于**
Java Serialization (3.2.1), Kryo (3.2.2)†, Hessian/Burlap (3.2.3), json-io
(3.2.4),XStream (3.2.5)
### 4.19 GroovyExpando/MethodClosure
这个已经被用于对 XStream(3.2.5) 的[攻击](https://www.contrastsecurity.com/security-influencers/serialization-must-die-act-2-xstream,)。 类型都没有实现
java.io.Serializable 。 攻击者也不需要控制 setters。 MethodClosure 没有默认构造函， 有一个
readResolve() 和 readObject() 方法会抛出异常 (必须不被调用)
（readResolve()在版本2.4.4中引入，从版本2.4.8开始，还实现了readObject()，它将执行相同的操作 ）
  1. 创建一个 MethodClosure ， 设置 'delegate' 和 'owner' 属性为一个 java.lang.ProcessBuilder 实例， 使用 命令和参数启动， 设置 'method' 到 'start'。
  2. 创建一个 Expando 实例 ， 添加 MethodClosure 到 'expandoProperties' 作为 'hashCode' key(也能触发 'toString' 和 'equals')
  3. 插入一个 collection 调用 hashCode()。 Expando 调用 MethodClosure 执行 hashCode() ，最近调用 ProcessBuilder->start() 执行命令。
  4. **适用于**
Kryo (3.2.2)†, json-io (3.2.4)
### 4.20 sun.rmi.server.UnicastRef(2)
来自 Oracle/OpenJDK 标准库。作为一个 Java Serialization 过滤的 bypass gadget被公开。需要支持
java.io.Externalizable。java.io.Externalizable->readExternal() 会通过
LiveRef->read() 注册一个 RMI Distributed Garbage Collection (DGC) 对象引用 。 为了执行 DGC
， 对象的用户必须通知托管改对象的 endpoint 有关其使用的信息。通过打开到该 endpoint 的JRMP 连接来对调用DGC 服务的
dirty()。远程地址是攻击者控制的，这就意味着我们正在攻击者控制的 JRMP 服务器上执行调用。JRMP 是基于 Java Serialization
，精心设计的异常返回值将被主机 unmarshalling 。这就给攻击者几个进一步执行代码，通常这里没有其他地方设置的过滤器。
  * **适用于**
BlazeDS (3.1.4), json-io (3.2.4)
### 4.21 java.rmi.server.UnicastRemoteObject
来自 Oracle/OpenJDK 标准库。作为一个 Java Serialization 过滤的 bypass gadget
被公开。成功攻击需要攻击者可以调用 protected 默认构造函数，或 readObject()。
这将通过 RMI 导出读取/实例化的对象。 沿着这么走下去，显然会有一个特殊的 endpoint 存在， 创建一个 listener 绑定至
0.0.0.0。如果 protected 默认构造函数被调用了， 会bind 一个随机端口，否则攻击者会提供一个端口。 如果那个 listener
可以被攻击者访问 ， 这就可能通过 JRMP 造成攻击 Java deserialization。
这里有几个限制。 为了攻击 JRMP 服务，我们需要对对象进行调用。我们需要的对象 ID 是随机的（如果没有配置）。这里有三个出名的对象 ID -DGC(2) ，RMI Activator(1) ，RMI Registry(0). 只有 DGC 是一直可以调用的， 当程序用了 RMI/JMX 才可用
RMI Registry , Activator 相当罕见。根据目标应用程序的类加载器体系结构，因为对象使用 APPClassLoader
,可能无法产生利用。
导出的对象将会使用 thread’s context class loader ，可以在对象被创建时激活。对于web应用程序，这通常是一个有趣的例子。
如果攻击者可以泄露对象的 identifier ， 访问该对象和它的 class loader ，那么就可能被进一步攻击。[示例 Jenkins
CVE-2016-0788](https://github.com/frohoff/ysoserial/blob/master/src/main/java/ysoserial/exploit/JenkinsListener.java)
  * **适用于**
Jackson (3.1.6), json-io (3.2.4)
## 5 进一步交流
到现在为止，我们仅仅关注于发生在 unmarshalling 过程中的事，这发生在控制流返回到用户应用之前。但是如果你以后不打算使用这些数据，为什么还要
unmarshal 。假设需要 unmarshalled 的对象 通过了可能的类型检查，在这些过滤之后还有开发 exp
的空间。一个明显的例子是，如果应用程序直接调用某个方法，由于攻击者提供的对象的(意外的)状态产生不想要的副作用。注入 proxy
的能力几乎可以打破任何对对象行为的预期。有一下更一般的场景甚至不需要程序与 "bad" 类型交互。
### 5.1 Marshalling Getter Calls
基于属性的 marshallers 会调用所有对象包含的属性 getters。因此，如果预先 unmarshalled
对象（不一定要使用相同的机制）最终到达一个 marshalling 机制，将对攻击者控制的对象调用一系列全新的方法。
如果可以区分不同类型进行恢复，它们将在 marshalling 时触发一些不希望的影响。例如：
  * Xalan 的 TemplatesImpl 执行 getOutputProperties() 提供的字节码
  * com.sun.rowset.JdbcRowSetImpl 会在 getDatabaseMetaData() 时触发一个 JNDI lookup
  * org.apache.xalan.lib.sql.JNDIConnectionPool 会在 getConnection() 触发 JDNI lookup
  * java.security.SignedObject: 将触发对 getObject() 上提供的数据的 Java deserialization 
### 5.2 Java “re”serialization
大部分 servlet containers 在一个 servlet session 中存储对象图时 ， 如果 session 被置换出去就会触发
serialization ,当被 置换回来时会触发 deserialization 。 这里有各种各样的 primitives 可以通过使用Java
Serialization 克隆对象图。这也可以实现其他方法不可实现的攻击向量。一个例子是 spring-tx 的
JtaTransactionManager。这个class 可以使用所有描述过的机制十分漂亮的创建。 但是几乎没有一个会触发开发 exp
所需的初始化代码，因为这是在
afterPropertiesSet()或readObject()中完成的。但是如果攻击者精心制作的对象被存储在一个session 中 或者 通过
serialization 进行克隆，就会触发这段代码。
## 6 总结
好消息是这些机制或多或少会传递 java type 信息 -- 暴露实现细节，因此不适合作为 public APIs ，并且很少被用于这些。 有些描述的
marshallers 相当模糊，有些甚至已经被废弃，但是几乎所有的这些 marshallers 都能在大型项目中找到被用于开发 exp
，许多情况下会造成严重的漏洞。
这个问题仅限于 Java 吗？ 显然并不是（例如 c# 中 Json.NET 多态的 TypeNameHandling，使用文档中就有一个 warning
不要随意使用它，通常并没有人注意到）。 Java 的 flat class path 架构和大量的通用 class paths 包括但不限于标准库，为
exp开发提供了大量可用代码（模块化技术，如 OSGI、JBoss/Wildfly 模块和 Java 9
模块，确实通过显式限制可访问类型，大大降低了实例可被利用的可能性，但这并不是万能的。）。标准库中提供的 企业级特性 (JNDI)
提供了远程代码执行的能力，通过看似无害的 API 完成剩下的工作。这里许多提出的 gadgets 依赖于 JNDI 实现 RCE 。JNDI/RMI
已经默认不允许远程代码库，而且作者认为 JNDI/LDAP 很快也会如此。然而，这不会修复现实的问题，首先这段代码是可达的并且允许升级到 java
Serialization (3.2.1) ，可能比原先的机制更易被攻击。
在比较这些不同的机制时，很明显，尽管基于字段和基于属性的 marshallers 二者 gadgets
并没有多少重叠，但是它们都可以被利用，而且它们的脆弱程度主要取决于可供利用的类型的数量。这些限制有些可能来自技术要求，例如可见约束和构造函数的要求（参见
Kryo 3.2.2），使用运行时 类型信息 和 某些情况下的目标对象 intent 声明。除了 Hessian/Burlap (3.2.3)
中的错误实现外， Java Serialization (3.2.1) 似乎是唯一一种通过 java.io.Serializable 实现了 intent
检查的机制。
虽然运行声明一个类型是否可以 marshalling 是一个好主意，而且像这里描述的机制表现的那样，取消现在会变得更糟。我们已经看到了 Java
Serialization (3.2.1) 出现了严重的错误。这个错误有各种原因，其中一个是 java.io.Serializable
有两个相互冲突的需求。 使用钝化,例如 在web 会话中存储一些对象，希望尽可能实现透明恢复，而在数据传输过程中的使用应尽量减少副作用。另一个问题出现在
intent 是通过一个接口 声明的
，因此是可遗传的，将强制适用于所有子类型。最终判断是否安全的责任落到了那些可能看不到全貌的人头上，一个代码库中看似安全的东西可能突然间在另一个代码库由于负载作用变得可被攻击。创造一个安全行为规则库并没有听起来那么简单。
除非在确实需要使用具有不希望的行为的类的情况下，从root type 开始对 fields/properties/collections
进行完全的类型检查是一个十分有效的缓解措施，但是大多数情况下需要软件架构上的调整，并且不能完全的实现多态性。将其与多态类型的注册向结合，例如 GSON 或的
Jackson 利用 Id.NAME 机制所做的，似乎做到了安全与便利直接的平衡。
人们都爱找替罪羊。hashCode()/equals() 或属性访问器的实现是否应该调用任何可能造成副作用的代码?(在判断时，作者建议你先看看
ServiceLoader (4.3) 中描述的 iterator 触发器 )。 尽管一般而言这可能是一个 bad style
,它也可能是在其他时候获得正确行为所必须的。是否 unmarshaller 需要假定所有类型都遵循某些隐形约定？
也许并不是，但是如果没有任何约定那么他们什么都做不了。 **开发人员应该更关注他们所使用的技术的安全性，包括阅读文档中的警告，而不是便利性吗?当然！**
对于 Java Serialization (3.2.1) ，我们已经看见一下代码库， commons-collections 和 groovy
宣称"修复"了代码中的gadgets。
但是在作者的观点这是一个坏选项，遗留了许多可被利用的示例，因为根本问题并没有被解决。在许多情况下，甚至不可能实现本文某些描述机制的缓解，因为类型无法防止自己的
unmarshalling。
unmarshalling 到对象一定是一种形式的代码执行。一旦你允许攻击者调用甚至你自己也不知道会运行什么的代码，那么它很可能会走向你不愿意看到的地方。
不管 unmarshalling 如何与对象交互，有多么 "powerful" ,如果他允许 unmarshalling
至那些没有被明确指定目标的对象类型，那么它有极大可能被利用。
唯一正确的修复方法是限制类型的可用性--可能表现为白名单，使用从根类型开始的 runtime 类型信息，或者其他的指标。他们必须保证在
unmarshalled
时不产生任何副作用。最好的情况下，这些是不包含任何逻辑的数据对象。现实中，实际使用的类型的限制似乎并不够好，通常你不关心的成吨的代码会让你被攻破。