size_t n
);
返回第⼀个参数，即⽬标字符串指针。
strncat()
为了保证连接后的字符串，不超过⽬标字符串的⻓度， 通常会写成下⾯这样。
strncat()
strncat(
str1,
str2,
sizeof(str1) - strlen(str1) - 1
);
总是会在拼接结果的结尾，⾃动添加空字符 ，所以第三个参数的最⼤值，应该是 的变
strncat() \0 str1
量⻓度减去 的字符串⻓度，再减去 。下⾯是⼀个⽤法实例。
str1 1
char s1[10] = "Monday";
char s2[8] = "Tuesday";
strncat(s1, s2, 3);
puts(s1);
上⾯示例中， 的变量⻓度是 10，字符⻓度是 6，两者相减后再减去 1，得到 ，表明 最多可以再
s1 3 s1
添加三个字符，所以得到的结果是 。
MondayTue
strcmp() #
如果要⽐较两个字符串，⽆法直接⽐较，只能⼀个个字符进⾏⽐较，C 语⾔提供了 函数。
strcmp()
函数⽤于⽐较两个字符串的内容。该函数的原型如下，定义在 头⽂件⾥⾯。
strcmp() string.h
int strcmp(const char* s1, const char* s2);
按照字典顺序，如果两个字符串相同，返回值为 ；如果 ⼩于 ， 返回值⼩于 0；如果
0 s1 s2 strcmp()
⼤于 ，返回值⼤于 0。
s1 s2
下⾯是⼀个⽤法示例。
strcmp(s1, s2)
strcmp(s1, s3)
strcmp(s3, s1)
注意， 只⽤来⽐较字符串，不⽤来⽐较字符。因为字符就是⼩整数，直接⽤相等运算符（ ）
strcmp() ==
就能⽐较。所以，不要把字符类型（ ）的值，放⼊ 当作参数。
char strcmp()
strncmp() #
由于 ⽐较的是整个字符串，C 语⾔⼜提供了 函数，只⽐较到指定的位置。
strcmp() strncmp()
该函数增加了第三个参数，指定了⽐较的字符数。它的原型定义在 头⽂件⾥⾯。
string.h
int strncmp(
const char* s1,
const char* s2,
size_t n
);
它的返回值与 ⼀样。如果两个字符串相同，返回值为 ；如果 ⼩于 ， 返回值
strcmp() 0 s1 s2 strcmp()
⼩于 0；如果 ⼤于 ，返回值⼤于 0。
s1 s2
下⾯是⼀个例⼦。
char s1[12] = "hello world";
char s2[12] = "hello C";
if (strncmp(s1, s2, 5) == 0) {
printf("They all have hello.\n");
}
上⾯示例只⽐较两个字符串的前 5 个字符。
sprintf()，snprintf() #
函数跟 类似，但是⽤于将数据写⼊字符串，⽽不是输出到显示器。该函数的原型定义
sprintf() printf()
在 头⽂件⾥⾯。
stdio.h
int sprintf(char* s, const char* format, ...);
的第⼀个参数是字符串指针变量，其余参数和 相同，即第⼆个参数是格式字符串，后
sprintf() printf()
⾯的参数是待写⼊的变量列表。
char first[6] = "hello";
char last[6] = "world";
char s[40];
sprintf(s, "%s %s", first, last);
printf("%s\n", s);
上⾯示例中， 将输出内容组合成 “hello world”，然后放⼊了变量 。
sprintf() s
的返回值是写⼊变量的字符数量（不计⼊尾部的空字符 ）。如果遇到错误，返回负值。
sprintf() \0
有严重的安全⻛险，如果写⼊的字符串过⻓，超过了⽬标字符串的⻓度， 依然会将
sprintf() sprintf()
其写⼊，导致发⽣溢出。为了控制写⼊的字符串的⻓度，C 语⾔⼜提供了另⼀个函数 。
snprintf()
只⽐ 多了⼀个参数 ，⽤来控制写⼊变量的字符串不超过 个字符，剩下⼀
snprintf() sprintf() n n - 1
个位置写⼊空字符 。下⾯是它的原型。
\0
int snprintf(char*s, size_t n, const char* format, ...);
总是会⾃动写⼊字符串结尾的空字符。如果你尝试写⼊的字符数超过指定的最⼤字符数，
snprintf()
会写⼊ n - 1 个字符，留出最后⼀个位置写⼊空字符。
snprintf()
下⾯是⼀个例⼦。
snprintf(s, 12, "%s %s", "hello", "world");
上⾯的例⼦中， 的第⼆个参数是 12，表示写⼊字符串的最⼤⻓度不超过 12（包括尾部的空字
snprintf()
符）。
的返回值是写⼊变量的字符数量（不计⼊尾部的空字符 ），应该⼩于 。如果遇到错误，
snprintf() \0 n
返回负值。
字符串数组 #
如果⼀个数组的每个成员都是⼀个字符串，需要通过⼆维的字符数组实现。每个字符串本身是⼀个字符数
组，多个字符串再组成⼀个数组。
char weekdays[7][10] = {
"Monday",
"Tuesday",
"Wednesday",
"Thursday",
"Friday",
"Saturday",
"Sunday"
};
上⾯示例就是⼀个字符串数组，⼀共包含 7 个字符串，所以第⼀维的⻓度是 7。其中，最⻓的字符串的⻓
度是 10（含结尾的终⽌符 ），所以第⼆维的⻓度统⼀设为 10。
\0
因为第⼀维的⻓度，编译器可以⾃动计算，所以可以省略。
char weekdays[][10] = {
"Monday",
"Tuesday",
"Wednesday",
"Thursday",
"Friday",
"Saturday",
"Sunday"
};
上⾯示例中，⼆维数组第⼀维的⻓度，可以由编译器根据后⾯的赋值，⾃动计算，所以可以不写。
数组的第⼆维，⻓度统⼀定为 10，有点浪费空间，因为⼤多数成员的⻓度都⼩于 10。解决⽅法就是把数组
的第⼆维，从字符数组改成字符指针。
char* weekdays[] = {
"Monday",
"Tuesday",
"Wednesday",
"Thursday",
"Friday",
"Saturday",
"Sunday"
};
上⾯的字符串数组，其实是⼀个⼀维数组，成员就是 7 个字符指针，每个指针指向⼀个字符串（字符数
组）。
遍历字符串数组的写法如下。
for (int i = 0; i < 7; i++) {
printf("%s\n", weekdays[i]);
}
全⽂完
本⽂由 简悦 SimpRead 转码，⽤以提升阅读体验，原⽂地址
语⾔的内存管理 语⾔教程 ⽹道
C - C -
⽹道（WangDoc.com），互联⽹⽂档计划
“
⽹道（WangDoc.com），互联⽹⽂档计划
简介 #
C 语⾔的内存管理，分成两部分。⼀部分是系统管理的，另⼀部分是⽤户⼿动管理的。
系统管理的内存，主要是函数内部的变量（局部变量）。这部分变量在函数运⾏时进⼊内存，函数运⾏结
束后⾃动从内存卸载。这些变量存放的区域称为”栈 “（stack），” 栈“所在的内存是系统⾃动管理的。
⽤户⼿动管理的内存，主要是程序运⾏的整个过程中都存在的变量（全局变量），这些变量需要⽤户⼿动
从内存释放。如果使⽤后忘记释放，它就⼀直占⽤内存，直到程序退出，这种情况称为”内存泄漏
“（memory leak）。这些变量所在的内存称为” 堆“（heap），”堆“所在的内存是⽤户⼿动管理的。
void 指针 #
前⾯章节已经说过了，每⼀块内存都有地址，通过指针变量可以获取指定地址的内存块。指针变量必须有
类型，否则编译器⽆法知道，如何解读内存块保存的⼆进制数据。但是，向系统请求内存的时候，有时不
确定会有什么样的数据写⼊内存，需要先获得内存块，稍后再确定写⼊的数据类型。
为了满⾜这种需求，C 语⾔提供了⼀种不定类型的指针，叫做 void 指针。它只有内存块的地址信息，没有
类型信息，等到使⽤该块内存的时候，再向编译器补充说明，⾥⾯的数据类型是什么。
另⼀⽅⾯，void 指针等同于⽆类型指针，可以指向任意类型的数据，但是不能解读数据。void 指针与其他
所有类型指针之间是互相转换关系，任⼀类型的指针都可以转为 void 指针，⽽ void 指针也可以转为任⼀
类型的指针。
int x = 10;
void* p = &x;
int* q = p;
上⾯示例中，整数指针和 void 指针可以互相转换。
注意，由于不知道 void 指针指向什么类型的值，所以不能⽤ 运算符取出它指向的值。
*
char a = 'X';
void* p = &a;
printf("%c\n", *p);
上⾯示例中， 是⼀个 void 指针，所以这时⽆法⽤ 取出指针指向的值。
p *p
void 指针的重要之处在于，很多内存相关函数的返回值就是 void 指针，只给出内存块的地址信息，所以放
在最前⾯进⾏介绍。
malloc() #
函数⽤于分配内存，该函数向系统要求⼀段内存，系统就在 “堆” ⾥⾯分配⼀段连续的内存块给
malloc()
它。它的原型定义在头⽂件 。
stdlib.h
void* malloc(size_t size)
它接受⼀个⾮负整数作为参数，表示所要分配的内存字节数，返回⼀个 void 指针，指向分配好的内存块。
这是⾮常合理的，因为 函数不知道，将要存储在该块内存的数据是什么类型，所以只能返回⼀个
malloc()
⽆类型的 void 指针。
可以使⽤ 为任意类型的数据分配内存，常⻅的做法是先使⽤ 函数，算出某种数据类型
malloc() sizeof()
所需的字节⻓度，然后再将这个⻓度传给 。
malloc()
int* p = malloc(sizeof(int));
*p = 12;
printf("%d\n", *p);
上⾯示例中，先为整数类型分配⼀段内存，然后将整数 放⼊这段内存⾥⾯。这个例⼦其实不需要使⽤
12
，因为 C 语⾔会⾃动为整数（本例是 ）提供内存。
malloc() 12
有时候为了增加代码的可读性，可以对 返回的指针进⾏⼀次强制类型转换。
malloc()
int* p = (int*) malloc(sizeof(int));
上⾯代码将 返回的 void 指针，强制转换成了整数指针。
malloc()
由于 的参数可以是变量，所以上⾯的例⼦也可以写成下⾯这样。
sizeof()
int* p = (int*) malloc(sizeof(*p));
分配内存有可能分配失败，这时返回常量 NULL。Null 的值为 0，是⼀个⽆法读写的内存地址，
malloc()
可以理解成⼀个不指向任何地⽅的指针。它在包括 等多个头⽂件⾥⾯都有定义，所以只要可以使
stdlib.h
⽤ ，就可以使⽤ 。由于存在分配失败的可能，所以最好在使⽤ 之后检查⼀下，
malloc() NULL malloc()
是否分配成功。
int* p = malloc(sizeof(int));
if (p == NULL) {
}
if (!p) {
}
上⾯示例中，通过判断返回的指针 是否为 ，确定 是否分配成功。
p NULL malloc()
最常⽤的场合，就是为数组和⾃定义数据结构分配内存。
malloc()
int* p = (int*) malloc(sizeof(int) * 10);
for (int i = 0; i < 10; i++)
p[i] = i * 5;
上⾯示例中， 是⼀个整数指针，指向⼀段可以放置 10 个整数的内存，所以可以⽤作数组。
p
⽤来创建数组，有⼀个好处，就是它可以创建动态数组，即根据成员数量的不同，⽽创建⻓度不
malloc()
同的数组。
int* p = (int*) malloc(n * sizeof(int));
上⾯示例中， 可以根据变量 的不同，动态为数组分配不同的⼤⼩。
malloc() n
注意， 不会对所分配的内存进⾏初始化，⾥⾯还保存着原来的值。如果没有初始化，就使⽤这段
malloc()
内存，可能从⾥⾯读到以前的值。程序员要⾃⼰负责初始化，⽐如，字符串初始化可以使⽤ 函
strcpy()
数。
char* p = malloc(4);
strcpy(p, "abc");
*p = "abc";
上⾯示例中，字符指针 指向⼀段 4 个字节的内存， 将字符串 “abc” 拷⻉放⼊这段内存，完成
p strcpy()
了这段内存的初始化。
free() #
⽤于释放 函数分配的内存，将这块内存还给系统以便重新使⽤，否则这个内存块会⼀直
free() malloc()
占⽤到程序运⾏结束。该函数的原型定义在头⽂件 ⾥⾯。
stdlib.h
void free(void* block)
上⾯代码中， 的参数是 返回的内存地址。下⾯就是⽤法实例。
free() malloc()
int* p = (int*) malloc(sizeof(int));