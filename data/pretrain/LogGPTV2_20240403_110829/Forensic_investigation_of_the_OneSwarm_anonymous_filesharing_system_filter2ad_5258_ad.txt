deﬁnitely suﬃcient for probable cause for content that is
sourced at only one in a thousand peers.
The false positive rate for the collusion attack is the prob-
ability that the target does not forward the query to any of
the colluding attackers given that it is not the source of the
ﬁle of interest:
F P R = (1 − p)k−1
(24)
This quantity is less than 0.0025 for k ≥ 3 and p = 0.95.
Thus investigators are at a very low risk of falsely suspecting
any peer in OneSwarm as deployed. When p = 0.5 the false
positive rate is less than 1.6% only when k ≥ 7; note that
for ﬁles less popular than v ≤ 0.06, the same bound of k ≥ 7
holds for precision values of 95% (see Fig. 5(top)) and so the
requirement of a low FPR is not an signiﬁcant issue for the
Comparison Against Onion Routing. Isdal et al. do not
quantitatively compare OneSwarm directly against any other
privacy mechanism. As a basic comparison we analyze the
following simple OR attack. Peers hiding behind a OR circuit
can be deanonymized if attackers are selected at random to be
in the ﬁrst and last positions. Selection of these nodes occurs
without replacement. Once in these positions, attackers
can use a well-known attack of sending a speciﬁc sequence
of duplicate packets to determine if they are on the same
path [20], essentially with a precision of 1 and FPR of 0.
Therefore, the chances of a circuit being compromised in a
OR network of N peers where C are attackers is
P{A = 2} = ( C
N )( C−1
N−1 ).
(25)
Mechanisms such as guard nodes [26,27] can make this attack
on OR more diﬃcult. However, in general the simplicity of
the model in Eq. 25 prevents us from comparing OneSwarm
to Tor directly, instead of Onion Routing.
We use this passive attack because it’s a tractable, con-
ceptually simple presentation of the collusion attack on the
OR architecture, allowing a straightforward comparison with
OneSwarm’s architecture. A more accurate model would
consider the active attacks that are available against Tor,
which are more eﬀective than Eq. 25. This would require
updating Bauer et al. [1] with the latest Tor path selection
algorithm and measurements of Tor, to model weighted path
selection.
It wouldn’t change our analysis of OneSwarm,
and we expect it wouldn’t change the relative comparison,
barring a gross bias in the Tor route selection algorithm.
Fig. 6 compares eﬀectiveness of these attacks against One-
Swarm and OR. The plot is independent of a chosen value
for p; to determine the required value of k, we ﬁrst choose a
value of p and consult Fig. 5(top or bottom). There are a
number of implications to note. First, there is a non-linear,
00.10.20.30.40.50.60.70.80.9100.10.20.30.40.50.60.70.80.91Perc. of Peers that are AttackersProb. of Attack Success  k≥2k≥4k≥6k≥8k≥10OR209sharp increase in attacker success as they increase their pro-
portion of the OneSwarm network. When the attack requires
only that k ≥ 4, the chances of success are 98% as attackers
comprise 25% of peers in the network. Note that k ≥ 4 is
suﬃcient for even unpopular content when p = 0.95, which
is the hard coded value in the released software. However,
even if p = 0.5, requiring larger values of k, the eﬀectiveness
of the attack on OneSwarm grows far more quickly than the
simple attack on OR.
All of the previous analysis assumes that the attackers
join the network once. As such, they can only investigate
peers to whom they’ve attached suﬃcient colluders. But
attackers can repeatedly quit and rejoin the system with new
identities, thereby investigating more and more peers over
time. OneSwarm oﬀers no Sybil attack protections.
Trusted Neighbors. Our attacks are worst case in that
we assume the peer has 39 neighbors. To give a point of
comparison, if the node has only U = 20 neighbors from
the community server (and 19 trusted friends) then the
investigator’s job is harder. For example, the k ≥ 4 line in
Fig. 6 shifts roughly to almost where k ≥ 8 is in the ﬁgure;
these values can be compared more directly by re-plotting
Eq. 20. Again, attackers can execute this attack as many
times as necessary — churn in the OneSwarm population
will force the community server to assign and re-assign new
untrusted relationships.
5.3 Practical Considerations
The Multiple Comparison Problem. A naive version
of the collusion attack would see investigators joining the
network as described above. The investigator would then
test each connected peer for possession of all known ﬁles of
interest, and claim probable cause for each peer which was
determined to have at least one ﬁle. This naive version is
susceptible to the well-known multiple comparison problem of
testing sets of hypothesis at once. We elide the analysis here,
but we note the false positive rate quickly grows unusably
high as the number of ﬁles tested per peer increases.
There are several ways to limit the eﬀect of this problem,
each of which centers around limiting the number of diﬀerent
ﬁles investigators check a peer for possession of. One such
method is as follows. First, investigators survey the network
for ﬁles of interest by searching for well-known keywords. In
other p2p networks such as Gnutella and eDonkey2000, these
ﬁles are typically named with explicit and descriptive names;
our law enforcement partners conﬁrm the same appears to
be true of OneSwarm. The ﬁles are rank ordered by their
apparent popularity in the system. Investigators then sweep
through the network by performing the collusion attack for
the top n ﬁles, where n is chosen to keep the FPR acceptably
low. Only once these peers have been fully investigated,
including oﬄine searches and the subsequent legal process,
do investigators repeat their survey to determine the next
rank-ordered list to investigate.
Post-Warrant Conﬁrmation. OneSwarm peers connect
to one another using SSL bootstrapped by their RSA key
pairs. A OneSwarm peer stores keys of neighbors and its
own key on the local ﬁle system. Once a search warrant is
executed and a machine seized, the investigator can tie that
machine to speciﬁc network traﬃc based on the recovered
key ﬁle. Even if the content has been deleted locally, the
mechanism can conﬁrm with cryptographic precision if this
machine is the machine that transferred it. BitTorrent clients
Figure 7: An attacker distinguishes two scenarios.
In the ﬁrst, the target is a proxy for the real source
of a ﬁle. The goal is to increase the rate of trans-
fer, t, from the target so that it is greater than the
rate of transfer from the source, s. The buﬀer at
the proxy should empty before the transfer is com-
pleted. In the second case, the target is the source,
and therefore, for any value of t, the transfer should
complete.
are subject to forensic tagging [12], in which investigators
covertly ask remote machines to store nonces. These nonces
can later be recovered to conﬁrm that the correct machine
was seized. However, OneSwarm makes this task redundant
since all outgoing traﬃc is signed and the keys are stored
persistently.
6. TCP-BASED ATTACKS
In this section, we demonstrate a novel adaptation of a
known TCP-based attack [18] that can identify whether a
OneSwarm peer is the source of data or a proxy. Peers that
do not rate limit outgoing traﬃc are vulnerable. OneSwarm
happens to turn on rate limiting by default to 80% of a test
transfer to a central server, but nothing prevents eager users
from turning oﬀ the rate limiting. A more robust defense
without rate limiting is to probabilistically drop outgoing
packets and audit incoming selective acks. In this section,
we detail the attack and its limitations, show experimental
results for a simpliﬁed implementation of the attack executed
on a simple non-OneSwarm transfer, and we discuss defenses
to the attack.
The attack leverages optimistic acking [18], where a receiver
sends TCP acknowledgements for data before it is received,
increasing throughput. Sherwood et al. [19] leverage the
same mechanism to perform denial-of-service attacks against
a server. Our contribution is in showing that the same
mechanisms can be used to distinguish proxies from sources.
The attack is not speciﬁc to OneSwarm; anonymous ﬁle-
sharing protocol designers should be aware of the attack.
Fig. 7 illustrates our TCP attack scenario. An attacker
requests a ﬁle from a target. The attacker induces a higher-
bandwidth connection between itself and target than between
the target and a potential source of data. If t can be made
greater than any potential s and the target is not the source, it
will stall out. The stall occurs because the target’s application
level buﬀers will run out before the actual source can ﬁll
them. Our tests show that it is possible to induce a sending
rate that is higher than is typical even between nodes within
the same building.
In our tests, we show that the attack can succeed in prac-
tice. In sum, OneSwarm is vulnerable (when rate-limiting is
rate srate tTargetAttackerSourcestored ﬁleproxybufferrecv bufferrate tTarget and SourceAttackerstored ﬁlerecv buffer210Algorithm 6.1: DetectProxy(maxExtra, rate)
local p, ack, extra, lastReceived, maxReceived
while (download is not complete)
p = receivePkt(timeoutV alue)
if timeout occurred
do
then
else
then return (“proxy”)
extra = 0
if too many timeouts
ack = lastReceived
lastReceived = SeqNum(p)
if SeqNum(p) > maxReceived
then maxReceived = SeqNum(p)
extra += rate
extra = min(extra, maxExtra)
ack = maxReceived + extra
sendAck(ack)
return (“sender”)
oﬀ) because it defends against only application-level timing
and traﬃc attacks, and does not defend against an attacker
breaking the underlying network abstraction.
Trusted Peers. When a peer has trusted peers (that are not
undercover investigators), they reduce the chances that an
investigator has an opportunity to execute the TCP attack,
but do not aﬀect the success of the attack itself. Vulnerable
peers are those that have at least one untrusted relationship
to an investigator; i.e., set k = 1 in Eq. 20.
6.1 Attack Details
We assume that targets of the attack follow TCP speci-
ﬁcations properly, but we place no limit on the connection
bandwidth between peers. The attacker does not follow TCP
rules for receivers, by incorrectly acking packets that were
lost and optimistically acking packets that have not yet been
received. The receiver also always advertises a large TCP
ﬂow control window so as not to inhibit the sender.
The idealized attack algorithm is presented as pseudocode
in Algorithm 6.1. The pseduocode assumes a TCP connection
has been set up and a download requested via application-
level messaging. The input to the algorithm is the rate
at which the optimistic acking increases and the maximum
value it can reach. Reasonable values can be found through
heuristic hill-climbing.
Whenever a packet is received, the attacker sends an ack for
the highest sequence number ever received from the sender,
regardless of whether earlier bytes in the TCP ﬂow were
lost. Because acks are cumulative in TCP, the skipped over
byte sequences are not a concern of the sender. Additionally,
the receiver optimistically acks extra segments it has yet to
receive but are likely on the way. The value of extra starts
at 0 and the receiver increases it by rate bytes (and rounded
to segment sizes) for each packet received, regardless of loss
or duplication, until a given maxExtra value is reached.
The reason to grow this optimistic acking slowly is that
the sender will silently drop acks for packets beyond what it
has sent. If a sender receives overly optimistic acks, it will
not close the connection, as TCP was designed to manage
the occasional odd error. Accordingly, thoughtless optimistic
acking by the attacker will have no eﬀect, and the attacker
must grow the window commensurately with the sender’s
values. As the window grows, heavy packet loss will occur,
and the attack is partly blind in that sense.
If attacker grows the sender’s window too aggressively, the
RTT calculation at the sender can become mis-estimated as
a very small duration, making a timeout exceedingly easy.
When a timeout occurs, the sender will back oﬀ, cutting
the rate drastically, and will resend old data, which is very
bad for the attack. Therefore, if the receiver doesn’t receive
data by some timeout (250ms in our implementation), an
ack packet is sent to the sender for the latest packet received,
rather than the highest received. In our tests, this quickly
re-initiates the data ﬂow, and the attacker can return to
acking the highest byte sent.
Pipelining. OneSwarm is BitTorrent based, and therefore
requests for a ﬁle are piecewise. There are seven BitTorrent
piece sizes in common use, and the most common are 256kB,
512kB, and 1MB. Our tests show that for the two smaller
size, the sender barely gets out of slow start before the attack
is complete.
Inside of slow start, the congestion window
is so small that the attack cannot achieve signiﬁcant gains.
However, pipelining of piece requests has been a feature
since the protocol was introduced in 2003 to avoid reseting
TCP’s bandwidth algorithm and causing “disastrous” transfer
rates [4]; this pipelining prevents the attack from stalling.
6.2 Attack Experimentation
We implemented the attack in about 700 lines of C++ to
test its feasibility. The attack implementation and details
of our measurement experiments (including packet header
logs) are available from http://traces.cs.umass.edu. Our
prototype implementation attacks the HTTP protocol rather
than the BitTorrent protocol, as HTTP has fewer implemen-
tation details to manage. In principle, the same attack will
work on pipelined BitTorrent requests. Further, our imple-
mentation does not implement the SSL handshake between
peers that OneSwarm requires.
Methodology. We conﬁgured a network as shown in Fig. 7.
We could not use PlanetLab for this experiment since it
enforces a bandwidth cap, which is splits among all virtual
hosts on each node [13]. The attacking machines were lo-
cated at UMass, Wesleyan (CT), and UT Arlington (TX);
the targets were a superset of the attacking machines and
also included UCSB (CA); and the proxied sources at Central
Michigan University, Harvey Mudd College (CA) and Mojo-
host, Inc. (FL). We chose these proxies to model relatively
close (UCSB and HMC are both in CA) and distant (UCSB
to Mojohost crosses the country) peers. We served the ﬁle
directly through an httpd daemon from the targets, and we
used netcat to act as an application-level proxy to the other
sources. Our target ﬁle was a 10MB ISO image. We used
wget as the well-behaved requester. We ﬁxed the parame-
ters of our attack implementation at relatively conservative
values. We set the maxExtra value to 50 TCP segments for
all connections, though in our experience this value should
vary per bandwidth of the connection to the target. We
report the bandwidth speedup of the attack, rather than
seeking a maxExtra value that causes a timeout (as per
Alg. 6.1). We ran measurement experiments across all paths
(27 in total), varying type of retrieval (wget or tcp attack)
and potential source (direct from UCSB, or proxied to either
HMC or Mojohost). Each measurement was repeated ﬁve
times.
211Attacker Target
Proxied Source wget
attack (relative) wget
attack (relative)
Path
Target Possesses File
Target Proxies File
UCSB
Wesleyan
UMass
UTA
Wesleyan
UMass
UCSB
UTA
Wesleyan
UTA
UCSB
UMass
CMich
HMC
Mojohost
CMich
HMC
Mojohost
CMich
HMC