The ﬁnal stage in our reduction pipeline is the Reducer
( 5 ) stage. The Reducer is responsible for removing AST
nodes and modules that are marked as unused by Call Graph
Builder and Load Dependency Builder, respectively (§6.5).
After ﬁnishing all of the reduction stages, Mininode generates
source code for each module from their updated AST.
5 Challenges
The dynamic nature of JavaScript introduces several chal-
lenges to static analysis [33, 37, 50] and this is also true for
the module system used by Node.js (§2.1). In this section, we
list some of the research challenges that we faced during the
implementation of the attack surface reduction tools using
static analysis for Node.js applications. Overall, we divide the
challenges into two categories: (1) export-related challenges;
(2) import-related challenges.
5.1 Export-Related Challenges
The export-related challenges relate to the way how a module
is exporting its functionality, and thus directly affects the
Mininode’s effectiveness design goal as deﬁned earlier (§ 4.1).
124    23rd International Symposium on Research in Attacks, Intrusions and Defenses
USENIX Association
4. Call Graph Builder3. Load Dependency Builder2. Value-binding5. Reducer1. ParserNode.js ApplicationReduced Applicationﬁne-graincoarse-grainFailure to deal with export-related challenges will mostly lead
to the under-reduction of the attack surface, i.e. not removing
unused functionalities from the module. However, in some
rare cases may lead to over-reduction of the functionality,
i.e. removing used functionality. We give an example of both
cases in follow up subsections.
Unusual use of the export object. JavaScript allows
developers to modify an object in several different ways. Con-
sequently, the export object can also be modiﬁed in several
different ways to export functionality. For example, develop-
ers can create an alias for the export object and use the alias
instead to export the module’s functionalities.
1 // inside request . js
2 exports. post = function() {}
3 exports. get = function() {}
4 // inside request - v2 . js
5 exports = module.exports = require (" request ")
6 exports. patch = function() {}
7 // inside index . js
8 var req = require (" request - v2 ")
9 req . get () ;
10 req . patch () ;
Listing 4: Example of re-exporting the imported module
Extension of a module with re-export. In CommonJS
module system one can extend other modules by re-exporting
it and adding additional functionality. In the example given in
Listing 4, one can see how request-v2.js module extends re-
quest.js module with patch function. During analysis, Minin-
ode should detect that get function used in index.js is ac-
tually coming from request.js. This behavior prevents over-
reduction of the request.js module, and it ensures that Minin-
ode meets the correctness goal.
5.2 Import-Related Challenges
The import-related challenges affect the static analysis’s per-
formance in the detection of used functionalities of the im-
ported CommonJS modules. Failure to detect used function-
alities of imported modules will lead to over-reductions, i.e.
removing used functionalities. Thus, it will lead to breaking
the original behavior of the Node.js application. The rest of the
section is describing some of the import-related challenges.
1 // inside request . js
2 exports. post = function() {}
3 exports. get = function() {}
4 // inside index . js
5 request = require (" request ");
6 request . post ()
7 // inside util . js
8 request . get () ;
Listing 5: Example of importing a module in the global
scope.
Dynamically importing the module. It is common for
Node.js applications to load different modules depending on
the execution environment or the user’s input. Dynamically
importing a module restricts the ability for simple static anal-
ysis to detect which module was loaded, which may lead to
the removal of the whole used module. Therefore, it is vital to
resolve dynamic imports to build a complete load dependency
graph of the application.
1 // inside parent . js
2 module.exports = require (" child . js ")
3 exports. foo = function() {
4
5 }
6 exports. parentBar = function() {
7 }
8 // inside child . js
9 exports. childFoo = functon () {
10
11 }
exports. parentBar () ; // defined in parent . js
exports. childFoo () ; // defined in child . js
Listing 6: Example of invisible parent-child dependency
Importing as a global variable. As discussed in Back-
ground section 2.1, Node.js wraps the modules with wrapper
function to avoid collision of variable and function names
and create separate scope for each module. Despite this, de-
velopers can import a module into a global scope, as shown
in Listing 5. If a module is imported into a global scope, any
other module can have direct access to the module’s func-
tionality without importing it. Listing 5 gives an example of
loading the request.js in global scope in index.js, which makes
it possible for util.js to use get function of the request.js with-
out importing it.
1 // in index . js entry point
2 var foo = require (" foo ")
3 var bar = require (" bar ")
4 foo .x ()
5 bar .z ()
6 // inside foo . js module
7 var bar = require (" bar ")
8 exports.x = function() {}
9 exports.y = function() {
10
11 }
12 // inside bar . js module
13 exports.w = function() {}
14 exports.z = function() {}
bar .w ()
Listing 7: Example of cross-reference dependence.
Invisible parent-child dependency. This issue arises
when the imported module (child) is using the functional-
ity deﬁned inside the module (parent) that imports the child
module as shown in Listing 6. Because of the absence of a
clear dependency link from child to parent, this challenge is
counter-intuitive in nature. From Listing 6 one can see that,
even if child.js is not importing parent.js, the child module
is using parentBar that was deﬁned in the parent module.
We saw this behavior in one of the most popular NPM package
debug [5].
Cross-reference dependency. The cross-reference depen-
dency problem happens when two different modules import
the same module, but they use different parts. For example
USENIX Association
23rd International Symposium on Research in Attacks, Intrusions and Defenses    125
in Listing 7 index.js and foo.js are referencing bar.js, how-
ever using different parts of it. If Mininode preserves all used
functionality, it will preserve exports.w function of bar.js,
because function exports.w was used inside foo.js. However,
function exports.w of bar.js should be removed because it
is not reachable from the entry point (index.js) of the appli-
cation.
6 Implementation
Mininode takes as input a Node.js application and makes
three different reduction stages to produce a reduced version
of the application (§4.2). This section gives implementation
details of each reduction stage and how certain challenges de-
scribed in Section 5 are resolved. Additionally, the following
subsections give details about how access to built-in modules
is restricted, and what kind of metadata is collected during
Value-binding stage.
6.1 Restricting Access to Built-in Modules
The require function in Node.js checks if the requested
module is in a built-in modules list before trying to resolve
it (§2.1). We modiﬁed the original behavior of the require
function at the Node.js C++ level. The patched require func-
tion restricts access to the built-in modules by checking if
the requested module is not in a whitelist of built-in modules
generated by Mininode. The whitelist is generated only once
during the reduction of the application and kept unchanged. If
the application does not have previously generated whitelist,
our custom-built Node.js will allow all built-in modules to
avoid breaking the application.
6.2 The Value-binding Details
The Value-binding ( 2 ) is a preprocessing step that collects
metadata about each module in order to help other reduc-
tion stages to overcome challenges listed previously (§5).
Value-binding collects an array of aliases for exports object
and require function, because developers may rename these
CommonJS APIs by assigning them to another variable and
using an alias for the API instead of using API directly. Espe-
cially, this behavior can be seen in the case of packages that
provide a miniﬁed version. Miniﬁcation usually substitutes
longer names with shorter ones to decrease the size of the ﬁle.
Value-binding also collects a dictionary of identiﬁer names
with their corresponding values, which are used to detect
the possible values of dynamically imported modules. Possi-
ble values of identiﬁers could be literals (strings) or other
identiﬁer names that were assigned to the original identi-
ﬁer. If an identiﬁer’s value depends on any dynamic expres-
sion, e.g. a function call, Value-binding will mark the identi-
ﬁer as non-resolvable. However, if the identiﬁer’s value de-
pends on binary expression, e.g. var a=b+"-production",
Value-binding tries to resolve the possible values by get-
ting the values of "b" from the dictionary and adding the
"-production" to it. Note that variable "b" in the dictionary
must be resolvable. Otherwise, Value-binding will mark the
variable "a" as non-resolvable.
6.3 The Load Dependency Builder Details
The Load Dependency Builder ( 3 ) is responsible for build-
ing the ﬁle-level dependency graph by looking for require
(or its aliases (§6.2)) function calls in AST and by resolving
the function’s argument to one of the existing modules (§4.2).
The Load Dependency Builder resolves require’s argument
using Node.js default resolution algorithm if the argument’s
type is literal. In other cases, it will use a simple algorithm to
resolve dynamic import.
Resolving dynamic imports. To resolve the dynamic im-
ports, the Load Dependency Builder uses the dictionary gen-
erated by Value-binding in the previous stage. If the argu-
ment’s type is an identiﬁer and the dictionary contains values
for the identiﬁer, Load Dependency Builder iterates through
the possible values and resolves to possible modules in the
application. This process is one of Mininode’s advantages
over other open-source NPM packages implemented to build
the dependency tree of an application [13, 29, 31]. On the
other hand, if the identiﬁer does not exist in the dictionary, or
the identiﬁer is marked as non-resolvable, Load Dependency
Builder will mark a module as using complicated dynamic
import that can not be resolved reliably using only static tech-
nique. If the dependency graph of the application contains a
module with complicated dynamic import, Mininode stops
performing further analysis and exits because the application
under analysis cannot be reduced reliably without breaking
its original behavior.
6.4 The Call Graph Builder Details
The Call Graph Builder ( 4 ) runs only during ﬁne-grain
reduction mode, as can be depicted from Figure 1. The goal
of the Call Graph Builder is to detect which parts of the code
are used for each module and mark unused ones. To achieve
the goal, it performs two separate tasks on the module’s AST
each time during analysis.
The ﬁrst task, which is called marking unused, is responsi-
ble for marking exports, functions, and variables as unused if
they are not used inside or outside of the module according
to an array of used exports of the analyzed module.
The second task, which is called usage detection, is respon-
sible for constructing the used exports array for each imported
modules of the currently analyzed module. It achieves this
by recording the variable names initialized by require (or
the aliases (§6.2)) function calls and detecting all member
expressions (i.e. property accesses) for all recorded variable
names.
126    23rd International Symposium on Research in Attacks, Intrusions and Defenses
USENIX Association
Resolving cross-reference challenge. To achieve the ef-
fectiveness design goal discussed in Section 4.1, Mininode
needs to resolve the cross-reference challenge. The cross-
reference challenge can be solved by always running the
marking unused task before the usage detection task for each
module’s AST. One beneﬁt of running marking unused be-
fore usage detection is that during usage detection, we can
skip functions that are marked as unused. For example, for
the module foo.js from Listing 7, by ﬁrst running marking
unused task, we mark exports.y as unused. Thus, usage de-
tection will skip traversing exports.y during analysis, and,
therefore, exports.w will not be included in an array of used
exported functions of the bar.js module.
Resolving extension of the module by re-exporting. The
Call Graph Builder internally keeps track of used re-exported
modules during an analysis of the AST. Later on, Call Graph
Builder will add re-exported modules into the descendants ar-
ray of the currently analyzed module. In the case of Listing 4,
request.js module will be added into the descendants array
of request-v2.js module. Additionally, request-v2.js becomes
part of the ancestors array of request.js automatically. Later,
when Call Graph Builder analyzes request.js module, it passes
all used properties of request.js’s ancestors (i.e. request-v2.js)
to the marking unused task as an extra argument. In this par-
ticular case, the extra array argument will include get and
patch function names. Thus, exported get function of re-
quest.js will not be marked as unused during the marking
unused task. Therefore, Reducer will not remove used ex-
ported functions, and eventually, Mininode will preserve the
correctness design goal (§4.1).
Resolving invisible parent-child dependency. Call
Graph Builder resolves the invisible parent-child dependency
challenge almost the same way it resolves extension by re-
export challenge. Because Mininode already has information
about ancestors and descendants of the module, Call Graph
Builder can pass as an extra argument all used exports of all
ancestors and descendants of the module during the marking
unused task. In the case of Listing 6, Call Graph Builder pass
as an extra argument child.js’s used exports array, which con-
tains parentBar function, into the marking unused task for
parent.js.
Resolving importing as a global variable. To resolve the
importing module as a global variable challenge, Call Graph
Builder keeps track of leaked global variables during the
usage detection task and stores used members, i.e. accessed
properties, of a variable inside a dictionary of leaked global
variables. In the example from Listing 5, Call Graph Builder
creates an entry in the dictionary with a key request after
analyzing index.js. The value of the entry is an array of used
members, which contains post and get after analyzing in-
dex.js and util.js, respectively. Next, when Call Graph Builder
performs the marking unused task for request.js, it passes the
corresponding members’ array of the dictionary as an extra
argument.
Figure 2: Validation experiment setup
6.5 The Reducer Details
The Reducer ( 5 ) is responsible for removing the AST nodes
marked as unused without breaking the valid syntax of the
AST and generating code from the AST. We are using the
open-source escodegen [7] library to generate the source code
from the AST.
Resolving unusual use of exports object Currently,
Reducer can reduce exporting logic for the most common
three ways to statically deﬁne a property for the object in
JavaScript. These are: (1) deﬁning property using dot no-
tation, e.g. exports.a=1; (2) deﬁning property using array
notation, e.g. exports["b"]=2; and (3) deﬁning property
using Object.defineProperty function. In addition to the
listed ones, Reducer tries to resolve the value for dynamically
deﬁned properties, e.g. var c=’c’; exports[c]=3, using
a similar algorithm as in the resolving dynamic import chal-
lenge. If the Reducer cannot resolve the dynamically deﬁned
property, it will not reduce the property, which may cause
under-reduction. However, this behavior will not break the
original code of the application.
7 Mininode Validation and Measurement
Overall, we run two experiments: (1) to validate the correct-
ness of the Mininode in reducing the attack surface of the
application; (2) to measure the bloated code and to check
the effectiveness of the system in reducing the attack surface
and vulnerabilities in the NPM registry packages. In the next
subsections, we will give more details of experiments’ setup
and results.
7.1 Mininode Reduction Validation
Experiment Setup. We performed the validation experiment
to evaluate the effectiveness and correctness of the Mininode
reduction (§4.1). We measured the effectiveness by calculat-
ing the total number of removed ﬁles, removed LLOC, and re-
moved exports. The correctness of the reduction, i.e. whether
Mininode reduced the package without changing its original
behavior, is measured by the success rate of passed original
unit tests of the packages after the reduction of their attack
surface. The validation experiment consists of ﬁve steps as
shown in Figure 2.
USENIX Association
23rd International Symposium on Research in Attacks, Intrusions and Defenses    127
4. Reduction TestingReduced VersionUnit Tests2. Installation and TestingProduction VersionUnit TestsReduced Version3. Application ReductionProduction Version5. Analyze The Results1. Filtering and Data CollectionPackages w/ TestsSource Codew/ TestsThe goal of the ﬁrst Filter and Data Collection step was
to gather package names for which we could run unit tests,
and calculate the tests coverage metrics automatically. The
most popular test coverage package on NPM is nyc, previously
known as istanbul, which is advertised as a tool where no
conﬁguration is needed to calculate unit tests’ code coverage
metrics. Therefore, we selected packages that list as one of
their dependencies nyc and/or unit test package that is com-
patible with nyc. In total, 225,449 out of 1,055,131 packages
depend on one of the packages required for automatic testing
and coverage calculation. Next we collected packages’ source
code from Github, installed them, and ran their original unit
tests without performing any reduction. We decided to collect
source code from Github because not all developers publish
package’s test code into NPM. As a result of this, we were left
with only 49,535 packages that were successfully installed,
and passed their original unit tests before reduction.
Initially, we tried to reduce the full version of the packages