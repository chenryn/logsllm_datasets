DCE
std.
std.
std.
std.
std.
✗
✗
std.
RO
2
2
1
Related works. Two recent (independent) reports proposed
alternative constructions of LR AE schemes. The first one,
by Dobraunig et al. [16], combines a concrete instance of
fresh re-keying (borrowed from [17, 32]), with a sponge-based
construction [12]. Due to the nature of these components,
their security analysis is (so far) more heuristic. Yet, it comes
with the nice and intuitive observation that one can naturally
capture certain classes of leakage functions by reducing the
capacity of the sponge.
The second one, by Barwell et al. [6], shares some goals
with ours (as it also aims to combine both MR and LR)
with a few significant differences though. First, and conceptu-
ally, this work is more focused on composition results, while
we pay a particular attention to efficient instances of AE
schemes. As a result of this choice, a second difference is
that their instantiations require all the building blocks to be
well protected against side-channel analysis, while we aim
to minimize the use of a leak-free component. Concretely,
this difference is reflected by different encryption modes: the
instances in [6] are based on the standard Cipher Feed Back
(CFB) mode, which is insecure in the simulatable leakage
model that we use (because of the continuous reuse of a single
long-term key), while we leverage the literature on LR stream
ciphers in order to reduce the use of our leak-free compo-
nent [19, 20, 38, 43, 46, 47]. Third, and more technically, we
discuss what can be achieved by symmetric cryptographic
building blocks, while the work by Barwell et al. would be
implemented using elliptic curves operations for each mes-
sage block. (Note the pairing-based LR PRF proposed in the
latter work could be one more option to instantiate our leak-
free component, So these two pieces of work are essentially
complementary).
Paper structure. In Section 2, we review the main defi-
nitions and notations used in the paper. Section 3 defines
and motivates our new notion of ciphertext integrity in the
presence of misuse and leakages (CIML). Section 4 reviews
some constructions of MRAE schemes, and shows how they
do not achieve CIML security. Sections 5 and 6 introduce
the DCE and DTE schemes, and show their CIML security.
Eventually, Section 7 shows the LR CPA security of DTE
and DCE.
2 BACKGROUND
We denote as a (𝑞, 𝑡)-bounded algorithm a probabilistic algo-
rithm that can make at most 𝑞 queries to the oracles he is
granted access to and can perform computation bounded by
running time 𝑡.
2.1 Definitions
We first need the following definition of collision-resistant
hash function.
Definition 2.1. A (0, 𝑡, 𝜖cr)-collision resistant hash function
H : 𝒮 ×ℳ → ℬ is a function that is such that, for every (0, 𝑡)-
bounded adversary 𝒜, the probability that 𝒜(𝑠) outputs a
pair of distinct messages (𝑚0, 𝑚1) ∈ ℳ2 such that H𝑠(𝑚0) =
H𝑠(𝑚1) is bounded by 𝜀cr, where 𝑠 ← 𝒮 is selected uniformly
at random.
We next need the following definition of range-oriented
preimage resistance.
Definition 2.2. A (0, 𝑡, 𝜖pr)-range-oriented preimage resis-
tant hash function H : 𝒮 × ℳ → ℬ is a function that is such
that, for every (0, 𝑡)-bounded adversary 𝒜, the probability
that 𝒜(𝑠, 𝑦) outputs a message 𝑚 ∈ ℳ such that H𝑠(𝑚) = 𝑦
is bounded by 𝜀pr, where 𝑠 ← 𝒮, 𝑦 ← ℬ are selected uniformly
at random.
Note that the usual notion of preimage resistance samples
a random 𝑚0 ← ℳ over the domain of H𝑠 and then sets
𝑦 = H𝑠(𝑚0). Definition 2.2, which was introduced in [4],
uniformly samples 𝑦 ← ℬ over the range of H𝑠.
In the following, we assume that the key 𝑠 is not private,
and refer to the hash function simply as H for simplicity, the
key 𝑠 being implicit.
We also need the following definition of pseudorandom func-
tion.
Definition 2.3. A function F : 𝒦 × ℬ → 𝒯 is a (𝑞, 𝑡, 𝜖F)-
pseudorandom function (PRF) if for all (𝑞, 𝑡)-bounded ad-
versaries 𝒜 provided with oracle access to the function, the
advantage
⃒⃒⃒ Pr[︀𝒜F𝑘(.) ⇒ 1]︀ − Pr[︀𝒜f(.) ⇒ 1]︀⃒⃒⃒
is upper-bounded by 𝜀F, where 𝑘 and f are chosen uniformly
at random from their domains, namely 𝒦 and the set of
functions from ℬ to 𝒯 .
Conference’17, July 2017, Washington, DC, USA
In order to capture authenticity, we introduce the notion of
IV-based MAC. We use this variant of the standard definition
of MAC (with no IV) because it gives compatibility with
previous constructions of LR MAC’s [37], which we will be
using.
such that:
message and outputs a tag.
Definition 2.4. An IV-based MAC is a tuple ivM = (𝒦, Mac, Vrfy)
∙ Mac : 𝒦 × ℐ𝒱 × ℳ → 𝒯 takes a key, an IV, and a
∙ Vrfy : 𝒦×ℐ𝒱 ×ℳ×𝒯 → {⊤∪⊥} and outputs ⊤ only
We assume that, ∀𝑘 ∈ 𝒦, ∀𝐼𝑉 ∈ ℐ𝒱, ∀𝑚 ∈ ℳ, it holds
that Vrfy𝑘(𝐼𝑉, 𝑚, Mac𝑘(𝐼𝑉, 𝑚)) = ⊤.
We also define the probabilistic algorithm MAC : 𝒦×ℳ →
ℐ𝒱 × 𝒯 which, on inputs 𝑘 ∈ 𝒦 and 𝑚 ∈ ℳ picks a random
𝐼𝑉 ∈ ℐ𝒱 and outputs 𝐼𝑉 and 𝜏 ← Mac𝑘(𝐼𝑉, 𝑚)
if 𝜏 is a valid tag for IV, message 𝑚 and key 𝑘.
While the traditional security property required from
MACs is unforgeability, our constructions rely on a stronger
property of the Mac function: we require Mac to be a pseu-
dorandom function for the (ℐ𝒱 × ℳ) input space.
Definition 2.5. ivM is (𝑞, 𝑡, 𝜖cip) chosen-IV pseudorandom
if the function Mac : 𝒦 × (ℐ𝒱 × ℳ) → 𝒯 is a (𝑞, 𝑡, 𝜖cip)-
pseudorandom function.
Our AE schemes will be based on IV-based encryption
schemes, which we define following Rogaway and Shrimp-
ton [41].
ivE = (𝒦, Enc, Dec) such that:
Definition 2.6. An IV-based encryption scheme is a tuple
∙ Enc : 𝒦 × ℐ𝒱 × ℳ → 𝒞 maps a key selected from 𝒦,
an IV selected from ℐ𝒱 and a message from ℳ to a
ciphertext from 𝒞.
∙ Dec : 𝒦 × ℐ𝒱 × 𝒞 → ℳ provides the decryption of a
We also use ENC : 𝒦 × ℳ → ℐ𝒱 × 𝒞 for the probabilistic
function that picks a uniformly random 𝐼𝑉 and returns the
ciphertext (𝐼𝑉, Enc(𝑘, 𝐼𝑉, 𝑚)) ← ENC𝑘(𝑚).
pair containing an IV and a ciphertext.
To capture message secrecy, we use the security definition
of Namprempre et al. [34] and consider a distinguishing game
in which the adversary tries to determine whether he is facing
an encryption oracle or a random function.
Definition 2.7. An IV-based encryption scheme ivE =
(𝒦, Enc, Dec) is (𝑞, 𝑡, 𝜖IV-sec)-IV-sec secure if for any 𝑘 ← 𝒦
and for every (𝑞, 𝑡)-adversary 𝒜, the advantage
[︁𝒜ENC𝑘(·) ⇒ 1
]︁ − Pr
]︁⃒⃒⃒
[︁𝒜$(·) ⇒ 1
AdvIV-sec
ivE,𝒜 :=
⃒⃒⃒ Pr
is upper-bounded by 𝜖IV-sec, where $(𝑚) picks a random
𝐼𝑉 ← ℐ𝒱 and outputs (𝐼𝑉, 𝜎), where 𝜎 is a random bit
string of length |Enc𝑘(𝐼𝑉, 𝑚)|.
Resistance against misuse then captures the security in
front of an adversary controlling the generation of the ran-
domness used for encryption. In the case of AE, the adversary
is also granted access to a decryption oracle. We consider a
definition of misuse-resistant authenticated encryption similar
to the one appearing in [41].
Francesco Berti, Fran¸cois Koeune, Olivier Pereira,
Thomas Peters, Fran¸cois-Xavier Standaert.
tuple AE = (𝒦, Enc, Dec) such that:
Definition 2.8. An authenticated encryption scheme is a
∙ Enc : 𝒦 × ℛ × ℳ → 𝒞 maps a key selected from 𝒦,
randomness selected from ℛ and a message from ℳ
to a ciphertext in 𝒞.
∙ Dec : 𝒦 × 𝒞 → ℳ ∪ {⊥} maps a key and a ciphertext
to a message that is the decryption of that ciphertext,
or to a special symbol ⊥ if decryption fails.
The associated probabilistic algorithm ENC first picks a
random coin 𝑟 ∈ ℛ and returns 𝑐 = Enc𝑘(𝑟, 𝑚) := Enc(𝑘, 𝑟, 𝑚).
We stress that Dec𝑘 only needs 𝑐 to recover 𝑚, which is the
main difference between our definition and previous IV-based
schemes for which an IV additionally needs to be provided.
This slight variation allows for instance to embed an encryp-
tion of the IV in the ciphertext as done in our DTE scheme,
which will be motivated by our improved LR goal as detailed
in the next sections.
The definition of MR due to [41] is tailored for IV-based
AE while our definition focuses on AE as in Definition 2.8.
Definition 2.9. An authenticated encryption scheme AE =
(𝒦,
Enc, Dec) offers (𝑞, 𝑡, 𝜀) strong misuse-resistance if, for ev-
ery (𝑞, 𝑡)-bounded adversary 𝒜, the advantage
Advmr
AE,𝒜 :=
⃒⃒⃒Pr
[︁𝒜Enc𝑘(·,·),Dec𝑘(·) ⇒ 1
]︁
[︁𝒜$(·,·),⊥(·) ⇒ 1
]︁⃒⃒⃒
− Pr
is upper-bounded by 𝜀, where 𝑘 is selected uniformly at
random from 𝒦, $(𝑟, 𝑚) outputs 𝑐 selected as a random bit
string of length Enc𝑘(𝑟, 𝑚) and the oracle ⊥(𝑐) outputs ⊥
except if 𝑐 was output by the $(·,·) oracle earlier, in which
case it returns the associated 𝑚.
In the rest of the paper, we will simply refer to this notion
as Misuse Resistance (MR).
Note that, for conciseness, we ignore the specific treatment
of associated data in our constructions, which is orthogonal
to the discussions on MR and LR that motivate our results.
2.2 Security parameter
We provide explicit adversary’s advantages for all the con-
structions in the paper. Whenever instantiating our building
blocks, we will consider 𝒦 = 𝒯 = ℛ = ℬ = ℐ𝒱 = {0, 1}𝑛
using 𝑛 as a security parameter, and ℳ = {0, 1}ℓ𝑛, (i.e.,
a message is made of on ℓ blocks of 𝑛 bits) so that the
advantages are negligible in 𝑛.
3 INT-CTXT WITH MISUSE AND
LEAKAGES
Motivation. Definition 2.9 seems a natural starting point
to define AE schemes that offer security in the presence of
misuse and leakages.
It however makes a very strong requirement: it requires
ciphertexts to be indistinguishable from random bits. This
is a strengthening (which is already visible in Def. 2.7) of
Ciphertext Integrity with Misuse and Leakage
Conference’17, July 2017, Washington, DC, USA
usual confidentiality requirements of indistinguishable en-
cryption, which require ciphertexts to be indistinguishable of
the encryption of random messages, but not to have cipher-
texts that are themselves indistinguishable from random bits.
While this strengthening does not look overly constraining
for practical schemes, it clearly rules out some schemes that
look satisfactory from a security point of view. For instance,
modifying a MR AE scheme by concatenting the bit “0” to
all ciphertexts looks benign from a security point of view,
but removes the MR property, since ciphertexts do not look
uniformly distributed anymore.
This becomes a real issue if we want to use such a def-
inition in the presence of leakages, and a similar difficulty
was already faced in the early work of Micali and Reyzin [33]
when they separated indistinguishability and unpredictabil-
ity in the side-channel security of pseudorandom generators:
in essence, leaking about a value prevents that value from
looking random.
Concretely, an extension of Def. 2.9 to a world with leakages
would focus on an advantage of the form:
⃒⃒⃒Pr
[︁𝒜EncL𝑘(·,·),Dec𝑘(·) ⇒ 1
]︁ − Pr
]︁⃒⃒⃒
[︁𝒜$L(·,·),⊥(·) ⇒ 1
in which the EncL oracle is the usual Enc oracle modified in
such a way that it also outputs the leakage happening during
the computation of Enc𝑘(𝐼𝑉, 𝑚) (remember that we focus on
leakages during encryption only). Now, the difficulty comes
when defining $L: how do we define a leakage corresponding
to an idealized computation that cannot be implemented
physically, which would be an encryption of 𝑚 that outputs
a randomly chosen bit string instead of a ciphertext? And we