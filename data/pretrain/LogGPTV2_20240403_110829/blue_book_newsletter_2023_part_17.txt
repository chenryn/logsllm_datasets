* New: [Restore watched history.](jellyfin.md#restore-watched-history)
    Jellyfin stores the watched information in one of the `.db` files, there are two ways to restore it:
    * Using scripts that interact with the API like [`jelly-jar`](https://github.com/mueslimak3r/jelly-jar) or [`jellyfin-backup-watched`](https://github.com/jab416171/jellyfin-backup-watched)
    * Running sqlite queries on the database itself.
    The user data is stored in the table `UserDatas` table in the `library.db` database file. The media data is stored in the `TypedBaseItems` table of the same database.
    Comparing the contents of the tables of the broken database (lost watched content) and a backup database, I've seen that the media content is the same after a full library rescan, so the issue was fixed after injecting the missing user data from the backup to the working database through the [importing a table from another database](sqlite.md#import-a-table-from-another-database) sqlite operation.
* New: [Fix ReadOnly: SQLitePCL.pretty.SQLiteException: attempt to write a readonly database.](jellyfin.md#readonly:-sqlitepcl.pretty.sqliteexception:-attempt-to-write-a-readonly-database)
    Some of the database files of Jellyfin is not writable by the jellyfin user, check if you changed the ownership of the files, for example in the process of restoring a database file from backup.
* New: [Deceptive site ahead.](jellyfin.md#deceptive-site-ahead)
    It seems that Google is marking the domains that host Jellyfin as deceptive. If it happens to you, your users won't be able to access your instance with Firefox, Chrome nor the Android app. Nice uh? It's kind of scary how google is able to control who can access what in the internet without you signing for it.
    If you search the problem online they suggest that you log in with your google account into the Search Console and see the reasons behind it. Many people did this and reported in the issue that they didn't get any useful information through this process. It's a privacy violation though, as now google is able to tie your identity (as your google account is linked to your phone number) with your Jellyfin domain. Completely disgusting.
    To solve this issue you need [to file a case with google](https://safebrowsing.google.com/safebrowsing/report_error/?tpl=mozilla&hl=en) and wait for them to unban you. It's like asking them for permission so that they let your users access your system. The disgust levels keep on growing. Don't waste your time being creative in the Comments of the request either, it looks like they don't even read them.
    The problem is that until the people from Jellyfin finds a solution, after following this ugly process, you may be flagged again any time in the future (ranging from days to months).
    A mitigation of the problem is to have an alternative domain that your users can use (for example in duckdns.org). You may be lucky that google doesn't block both domains at the same time.
    For more information follow the [Jellyfin issue](https://github.com/jellyfin/jellyfin-web/issues/4076) or the [Jellyfin reddit thread](https://www.reddit.com/r/jellyfin/comments/xqk01i/deceptive_site_ahead/).
* New: [Missing features.](jellyfin.md#missing-features)
    - Hide movie or tv show from my gallery: Tracked by these feature requests [1](https://features.jellyfin.org/posts/1072/let-the-user-hide-a-movie-or-tv-show) and [2](https://features.jellyfin.org/posts/116/add-hide-ignore-for-series-seasons-episodes-as-an-alternative-to-favorite)
* New: [Introduce Jellyfin Desktop.](jellyfin.md#jellyfin-desktop)
    - Download the latest deb package from the [releases page](https://github.com/jellyfin/jellyfin-media-player/releases)
    - Install the dependencies
    - Run `dpkg -i`
    If you're on a TV you may want to [enable the TV mode](https://github.com/jellyfin/jellyfin-media-player/issues/11) so that the remote keys work as expected. The play/pause/next/prev won't work until [this issue is solved](https://github.com/jellyfin/jellyfin-media-player/issues/3), but it's not that bad to use the "Ok" and then navigate with the arrow keys.
* New: [Introduce Jellycon.](jellyfin.md#jellycon)
    JellyCon is a lightweight Kodi add-on that lets you browse and play media files directly from your Jellyfin server within the Kodi interface. It can be thought of as a thin frontend for a Jellyfin server.
    It's not very pleasant to use though.
* New: [Forgot Password. Please try again within your home network to initiate the password reset process.](jellyfin.md#forgot-password.-please-try-again-within-your-home-network-to-initiate-the-password-reset-process.)
    If you're an external jellyfin user you can't reset your password unless you are part of the LAN. This is done because the reset password process is simple and insecure.
    If you don't care about that and still think that the internet is a happy and safe place [here](https://wiki.jfa-go.com/docs/password-resets/) and [here](https://github.com/hrfee/jellyfin-accounts/issues/12) are some instructions on how to bypass the security measure.
    For more information also read [1](https://github.com/jellyfin/jellyfin/issues/2282) and [2](https://github.com/jellyfin/jellyfin/issues/2869).
### [Kitty](kitty.md)
* New: [How to add fonts to kitty.](kitty.md#fonts)
    * Add your fonts to the `~/.local/share/fonts` directory
    * Check they are available when you run `kitty +list-fonts`
    * Add them to your config:
      ```
      font_family      Operator Mono Book
      bold_font        Operator Mono Medium
      italic_font      Operator Mono Book Italic
      bold_italic_font Operator Mono Medium Italic
      ```
    feat(kitty#Screen not working on server with sudo): Troubleshoot the Screen not working on server with sudo issue
    Make sure you're using the ssh alias below
    ```bash
    alias ssh="kitty +kitten ssh"
    ```
    And then copy the `~/.terminfo` into `/root`
    ```bash
    sudo copy -r ~/.terminfo /root
    ```
### [Kodi](kodi.md)
* New: Introduce Kodi.
    [Kodi](https://kodi.tv/) is a entertainment center software. It basically converts your device into a smart tv
### [Koel](koel.md)
* New: Introduce Koel.
    [koel](https://koel.dev/) is a personal music streaming server.
    Note: Use [`mopidy`](mopidy.md) instead
    There are [docker-compose files](https://github.com/koel/docker) to host the service. Although they behave a little bit weird
    For example, you need to [specify the DB_PORT](https://github.com/koel/docker/issues/168). It has had several PR to fix it but weren't merged [1](https://github.com/koel/docker/pull/165/files), [2](https://github.com/koel/docker/pull/162/files).
    The API is [not very well documented](https://github.com/koel/koel/issues/535):
    - [Here you can see how to authenticate](https://github.com/X-Ryl669/kutr/wiki/Communication-API#authentication)
    - [Here are the api docs](https://github.com/koel/koel/blob/master/api-docs/api.yaml#L763)
### [Matrix](matrix.md)
* New: How to install matrix.
    ```bash
    sudo apt install -y wget apt-transport-https
    sudo wget -O /usr/share/keyrings/element-io-archive-keyring.gpg https://packages.element.io/debian/element-io-archive-keyring.gpg
    echo "deb [signed-by=/usr/share/keyrings/element-io-archive-keyring.gpg] https://packages.element.io/debian/ default main" | sudo tee /etc/apt/sources.list.d/element-io.list
    sudo apt update
    sudo apt install element-desktop
    ```
### [Mediatracker](mediatracker.md)
* New: Introduce MediaTracker.
    [MediaTracker](https://github.com/bonukai/MediaTracker) is a self hosted media tracker for movies, tv shows, video games, books and audiobooks
    [Installation](https://github.com/bonukai/MediaTracker#installation):
    With docker compose:
    ```yaml
    version: "3"
    services:
      mediatracker:
        container_name: mediatracker
        ports:
          - 7481:7481
        volumes:
          - /home/YOUR_HOME_DIRECTORY/.config/mediatracker/data:/storage
          - assetsVolume:/assets
        environment:
          SERVER_LANG: en
          TMDB_LANG: en
          AUDIBLE_LANG: us
          TZ: Europe/London
        image: bonukai/mediatracker:latest
    volumes:
      assetsVolume: null
    ```
    If you attach more than one docker network the container becomes unreachable :S.
    Install the jellyfin plugin:
    They created a [Jellyfin plugin](https://github.com/bonukai/jellyfin-plugin-mediatracker) so that all scrobs are sent automatically to the mediatracker
    - Add new Repository in Jellyfin (Dashboard -> Plugins -> Repositories -> +) from url `https://raw.githubusercontent.com/bonukai/jellyfin-plugin-mediatracker/main/manifest.json`
    - Install MediaTracker plugin from Catalogue (Dashboard -> Plugins -> Catalogue)
    Some tips on usage:
    - Add the shows you want to watch to the watchlist so that it's easier to find them
    - When you're ending an episode, click on the episode number on the watchlist element and then rate the episode itself.
    - You can create public lists to share with the rest of the users, the way to share it though [is a bit archaic so far](https://github.com/bonukai/MediaTracker/issues/527), it's only through the list link, in the interface they won't be able to see it.
* Correction: [Update ryot comparison with mediatracker.](mediatracker.md#alternatives)
    [Ryot](https://github.com/IgnisDa/ryot) has a better web design, it also has a [jellyfin scrobbler](https://github.com/IgnisDa/ryot/pull/195), although it's not [yet stable](https://github.com/IgnisDa/ryot/issues/187). There are other UI tweaks that is preventing me from migrating to ryot such as [the easier media rating](https://github.com/IgnisDa/ryot/issues/284) and [the percentage over five starts rating system](https://github.com/IgnisDa/ryot/issues/283).
### [retroarch](retroarch.md)
* New: Install retroarch instructions.
    To add the stable branch to your system type:
    ```bash
    sudo add-apt-repository ppa:libretro/stable
    sudo apt-get update
    sudo apt-get install retroarch
    ```
    Go to Main Menu/Online Updater and then update everything you can:
    - Update Core Info Files
    - Update Assets
    - Update controller Profiles
    - Update Databases
    - Update Overlays
    - Update GLSL Shaders
### [Rocketchat](rocketchat.md)
* New: Introduce Rocketchat integrations.
    Rocket.Chat supports webhooks to integrate tools and services you like into the platform. Webhooks are simple event notifications via HTTP POST. This way, any webhook application can post a message to a Rocket.Chat instance and much more.
    With scripts, you can point any webhook to Rocket.Chat and process the requests to print customized messages, define the username and avatar of the user of the messages and change the channel for sending messages, or you can cancel the request to prevent undesired messages.
    Available integrations:
    - Incoming Webhook: Let an external service send a request to Rocket.Chat to be processed.
    - Outgoing Webhook: Let Rocket.Chat trigger and optionally send a request to an external service and process the response.
    By default, a webhook is designed to post messages only. The message is part of a JSON structure, which has the same format as that of a .
    [Incoming webhook script](https://docs.rocket.chat/use-rocket.chat/workspace-administration/integrations#incoming-webhook-script):
    To create a new incoming webhook:
    - Navigate to Administration > Workspace > Integrations.
    - Click +New at the top right corner.
    - Switch to the Incoming tab.
    - Turn on the Enabled toggle.
    - Name: Enter a name for your webhook. The name is optional; however, providing a name to manage your integrations easily is advisable.
    - Post to Channel: Select the channel (or user) where you prefer to receive the alerts. It is possible to override messages.
    - Post as: Choose the username that this integration posts as. The user must already exist.
    - Alias: Optionally enter a nickname that appears before the username in messages.
    - Avatar URL: Enter a link to an image as the avatar URL if you have one. The avatar URL overrides the default avatar.
    - Emoji: Enter an emoji optionally to use the emoji as the avatar. [Check the emoji cheat sheet](https://github.com/ikatyang/emoji-cheat-sheet/blob/master/README.md#computer)
    - Turn on the Script Enabled toggle.
    - Paste your script inside the Script field (check below for a sample script)
    - Save the integration.
    - Use the generated Webhook URL to post messages to Rocket.Chat.
    The Rocket.Chat integration script should be written in ES2015 / ECMAScript 6. The script requires a global class named Script, which is instantiated only once during the first execution and kept in memory. This class contains a method called `process_incoming_request`, which is called by your server each time it receives a new request. The `process_incoming_request` method takes an object as a parameter with the request property and returns an object with a content property containing a valid Rocket.Chat message, or an object with an error property, which is returned as the response to the request in JSON format with a Code 400 status.
    A valid Rocket.Chat message must contain a text field that serves as the body of the message. If you redirect the message to a channel other than the one indicated by the webhook token, you can specify a channel field that accepts room id or, if prefixed with "#" or "@", channel name or user, respectively.
    You can use the console methods to log information to help debug your script. More information about the console can be found [here](https://developer.mozilla.org/en-US/docs/Web/API/Console/log).
    . To view the logs, navigate to Administration > Workspace > View Logs.
    ```
    /* exported Script */
    /* globals console, _, s */
    /** Global Helpers
     *
     * console - A normal console instance
     * _       - An underscore instance
     * s       - An underscore string instance
     */
    class Script {
      /**
       * @params {object} request
       */
      process_incoming_request({ request }) {
        // request.url.hash
        // request.url.search
        // request.url.query
        // request.url.pathname
        // request.url.path
        // request.url_raw
        // request.url_params
        // request.headers
        // request.user._id
        // request.user.name
        // request.user.username
        // request.content_raw
        // request.content
        // console is a global helper to improve debug
        console.log(request.content);
        return {
          content:{
            text: request.content.text,
            icon_emoji: request.content.icon_emoji,
            channel: request.content.channel,
            // "attachments": [{
            //   "color": "#FF0000",
            //   "author_name": "Rocket.Cat",
            //   "author_link": "https://open.rocket.chat/direct/rocket.cat",
            //   "author_icon": "https://open.rocket.chat/avatar/rocket.cat.jpg",
            //   "title": "Rocket.Chat",
            //   "title_link": "https://rocket.chat",
            //   "text": "Rocket.Chat, the best open source chat",
            //   "fields": [{
            //     "title": "Priority",
            //     "value": "High",
            //     "short": false
            //   }],
            //   "image_url": "https://rocket.chat/images/mockup.png",
            //   "thumb_url": "https://rocket.chat/images/mockup.png"
            // }]
           }
        };
        // return {
        //   error: {
        //     success: false,
        //     message: 'Error example'
        //   }
        // };
      }
    }
    ```
    To test if your integration works, use curl to make a POST request to the generated webhook URL.
    ```bash
    curl -X POST \
      -H 'Content-Type: application/json' \
      --data '{
          "icon_emoji": ":smirk:",
          "text": "Example message"
      }' \
      https://your-webhook-url
    ```
    If you want to send the message to another channel or user use the `channel` argument with `@user` or `#channel`. Keep in mind that the user of the integration needs to be part of those channels if they are private.
    ```bash
    curl -X POST \
      -H 'Content-Type: application/json' \
      --data '{
          "icon_emoji": ":smirk:",
          "channel": "#notifications",
          "text": "Example message"
      }' \
      https://your-webhook-url
    ```
    If you want to do more complex things uncomment the part of the attachments.
### [sed](sed.md)
* New: Introduce sed snippets.
### [Tails](tails.md)
* New: Add interesting operations on tails.
    - [Upgrading a tails USB](https://tails.net/upgrade/tails/index.en.html)
    - [Change the window manager](https://www.reddit.com/r/tails/comments/qzruhv/changing_window_manager/): Don't do it, they say it it will break Tails although I don't understand why
### [vdirsyncer](vdirsyncer.md)
* Correction: Use SHA256 for the verification.
    Now SHA1 is not allowed
* New: Suggest more debuggin steps when connecting to google.
    The code has changed and the fix is now different
### [Vim](vim.md)
* New: [Configure nvim with lua.](vim.md#configuration)