(cid:29)
(cid:12)
(cid:31)
(cid:30)
(cid:12)
(cid:1)
(cid:22)
(cid:24)
(cid:13)
(cid:26)
(cid:18)
(cid:1)
(cid:19)
(cid:14)
(cid:25)
(cid:16)
(cid:13)
(cid:23)
(cid:29)
(cid:16)
(cid:27)
(cid:1)
(cid:25)
(cid:12)
(cid:12)
(cid:11)
(cid:23)
(cid:1)
(cid:27)
(cid:27)
(cid:31)
(cid:16)
(cid:25)
(cid:24)
(cid:26)
Figure 9. Shadow stack overhead.
324
Figure 10. Cumulative overhead of ﬁrst two layers, with call-validation.
bound limit: they are based in software simulations of hard-
ware solutions. Therefore, we can expect much lower values
in a hardware implementation.
(cid:42)(cid:38)(cid:47)(cid:1)
(cid:42)(cid:38)(cid:46)(cid:1)
(cid:42)(cid:38)(cid:45)(cid:1)
(cid:42)(cid:38)(cid:43)(cid:1)
(cid:42)(cid:1)
(cid:39)(cid:42)(cid:38)(cid:43)(cid:1)
)
%
n
i
(
d
a
e
h
r
e
v
O
(cid:1)
(cid:15)
(cid:44)
(cid:16)
(cid:20)
(cid:23)
(cid:30)
(cid:16)
(cid:23)
(cid:1)
(cid:27)
(cid:24)
(cid:30)
(cid:32)
(cid:16)
(cid:37)
(cid:1)
(cid:24)
(cid:13)
(cid:23)
Weighted average = 0.02%
(cid:1)
(cid:17)
(cid:16)
(cid:29)
(cid:45)
(cid:46)
(cid:43)
(cid:19)
(cid:1)
(cid:8)
(cid:3)
(cid:2)
(cid:30)
(cid:32)
(cid:31)
(cid:14)
(cid:12)
(cid:14)
(cid:1)
(cid:24)
(cid:32)
(cid:31)
(cid:25)
(cid:12)
(cid:32)
(cid:28)
(cid:13)
(cid:20)
(cid:23)
(cid:1)
(cid:6)
(cid:6)
(cid:23)
(cid:12)
(cid:16)
(cid:15)
(cid:1)
(cid:17)
(cid:29)
(cid:34)
(cid:1)
(cid:26)
(cid:31)
(cid:25)
(cid:26)
(cid:31)
(cid:1)
(cid:30)
(cid:14)
(cid:12)
(cid:24)
(cid:26)
(cid:29)
(cid:18)
(cid:1)
(cid:30)
(cid:30)
(cid:16)
(cid:24)
(cid:12)
(cid:18)
(cid:1)
(cid:3)
(cid:9)
(cid:3)
(cid:4)
(cid:30)
(cid:24)
(cid:16)
(cid:5)
(cid:1)
(cid:29)
(cid:12)
(cid:31)
(cid:30)
(cid:12)
(cid:1)
(cid:18)
(cid:25)
(cid:16)
(cid:21)
(cid:30)
(cid:20)
(cid:1)
(cid:35)
(cid:25)
(cid:19)
(cid:27)
(cid:30)
(cid:1)
(cid:17)
(cid:14)
(cid:24)
(cid:1)
(cid:19)
(cid:14)
(cid:25)
(cid:16)
(cid:13)
(cid:23)
(cid:29)
(cid:16)
(cid:27)
(cid:1)
(cid:15)
(cid:24)
(cid:12)
(cid:25)
(cid:1)
(cid:35)
(cid:20)
(cid:23)
(cid:32)
(cid:14)
(cid:23)
(cid:12)
(cid:14)
(cid:1)
(cid:29)
(cid:16)
(cid:24)
(cid:24)
(cid:19)
(cid:1)
(cid:43)
(cid:27)
(cid:20)
(cid:37)
(cid:13)
(cid:1)
(cid:30)
(cid:16)
(cid:33)
(cid:12)
(cid:34)
(cid:13)
(cid:23)
(cid:1)
(cid:35)
(cid:16)
(cid:27)
(cid:26)
(cid:30)
(cid:1)
(cid:14)
(cid:14)
(cid:18)
(cid:1)
(cid:14)
(cid:23)
(cid:20)
(cid:24)
(cid:1)
(cid:8)
(cid:10)
(cid:7)
(cid:7)
(cid:1)
(cid:25)
(cid:12)
(cid:12)
(cid:11)
(cid:23)
(cid:1)
(cid:22)
(cid:24)
(cid:13)
(cid:26)
(cid:18)
(cid:1)
(cid:36)
(cid:12)
(cid:29)
(cid:33)
(cid:26)
(cid:27)
(cid:1)
(cid:27)
(cid:27)
(cid:31)
(cid:16)
(cid:25)
(cid:24)
(cid:26)
Figure 11. First two layers cumulative overhead with a shadow stack.
4) The Overhead of Layer 3: As mentioned in Sec-
tion III-C, false positives can be avoided either at the hardware
level, or at the compiler level. If Layer 2 is implemented
via the call validation strategy of Section III-B, then a
solution at the compilation level is possible. The CET-based
implementation of Layer 2 requires hardware interventions. At
the end of this section, we discuss the overhead of a hardware-
based implementation of Layer 3.
Measurement methodology. As discussed in Section III-C,
a compiler-based solution to eliminate false positives consists
in replacing the return instruction by a sequence of pop
reg and jmp reg. This replacement is necessary only for
functions that might be invoked by means other than the
execution of a call instruction. To estimate the overhead of
this replacement, we have performed it manually onto every
function of the twelve programs of the Shootout collection,
available in the LLVM test suite2. We had to perform 52 re-
placements. Tail call optimization was not allowed. Figure 12
shows an example of code replacement.
Analysis of Results. Figure 13 shows the result of this
experiment. All the benchmarks run for more than one second;
Hash (hsh) runs for 35 seconds – the longest runtime. Every
benchmark performs thousands of function calls. Each box
2Shootout contains the smallest benchmarks in the LLVM test suite that
are not unit tests. We chose small benchmarks because we had to perform
the instruction replacement manually, directly in the assembly representation.
The sole difﬁculty in this task is ﬁnding a free register reg.
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 10:52:59 UTC from IEEE Xplore.  Restrictions apply. 
(a)
(cid:23)(cid:17)(cid:12)(cid:8)(cid:1)(cid:19)(cid:9)(cid:7)(cid:30)(cid:12)(cid:16)(cid:21)(cid:1)(cid:12)(cid:31)
(cid:34)
(cid:1)(cid:1)(cid:12)(cid:10)(cid:30)(cid:12)(cid:41)(cid:37)(cid:31)
(cid:1)(cid:1)(cid:34)
(cid:1)(cid:1)(cid:1)(cid:1)(cid:19)(cid:9)(cid:7)(cid:30)(cid:12)(cid:29)(cid:38)(cid:31)(cid:26)
(cid:1)(cid:1)(cid:35)
(cid:1)(cid:1)(cid:19)(cid:9)(cid:21)(cid:22)(cid:19)(cid:16)(cid:26)
(cid:35)
(b)
(c)
(cid:19)(cid:9)(cid:7)(cid:36)(cid:19)(cid:9)(cid:21)(cid:27)
(cid:28)(cid:4)(cid:3)(cid:2)(cid:37)(cid:27)
(cid:1)(cid:1)(cid:7)(cid:15)(cid:18)(cid:1)(cid:1)(cid:1)(cid:32)(cid:9)(cid:20)(cid:18)(cid:40)(cid:39)(cid:33)(cid:25)(cid:1)(cid:37)
(cid:1)(cid:1)(cid:13)(cid:14)(cid:9)(cid:1)(cid:1)(cid:1)(cid:28)(cid:4)(cid:39)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:1)(cid:1)(cid:15)(cid:17)(cid:23)(cid:1)(cid:1)(cid:1)(cid:9)(cid:5)(cid:24)(cid:25)(cid:1)(cid:32)(cid:9)(cid:20)(cid:18)(cid:40)(cid:39)(cid:33)(cid:1)
(cid:1)(cid:1)(cid:20)(cid:22)(cid:6)(cid:1)(cid:1)(cid:1)(cid:9)(cid:5)(cid:24)(cid:25)(cid:1)(cid:38)(cid:1)(cid:1)
(cid:1)(cid:1)(cid:18)(cid:22)(cid:20)(cid:11)(cid:1)(cid:1)(cid:9)(cid:5)(cid:24)
(cid:1)(cid:1)(cid:7)(cid:5)(cid:14)(cid:14)(cid:1)(cid:1)(cid:19)(cid:9)(cid:7)(cid:36)(cid:19)(cid:9)(cid:21)
(cid:1)(cid:1)(cid:5)(cid:8)(cid:8)(cid:1)(cid:1)(cid:1)(cid:9)(cid:20)(cid:18)(cid:25)(cid:1)(cid:39)(cid:1)(cid:1)
(cid:28)(cid:4)(cid:39)(cid:27)
(cid:1)(cid:1)(cid:19)(cid:9)(cid:21)
(cid:19)(cid:9)(cid:7)(cid:36)(cid:18)(cid:17)(cid:18)(cid:36)(cid:13)(cid:15)(cid:18)(cid:27)
(cid:28)(cid:4)(cid:3)(cid:2)(cid:37)(cid:27)
(cid:1)(cid:1)(cid:7)(cid:15)(cid:18)(cid:1)(cid:1)(cid:1)(cid:32)(cid:9)(cid:20)(cid:18)(cid:40)(cid:39)(cid:33)(cid:25)(cid:1)(cid:37)
(cid:1)(cid:1)(cid:13)(cid:14)(cid:9)(cid:1)(cid:1)(cid:1)(cid:28)(cid:4)(cid:39)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:1)(cid:1)(cid:15)(cid:17)(cid:23)(cid:1)(cid:1)(cid:1)(cid:9)(cid:5)(cid:24)(cid:25)(cid:1)(cid:32)(cid:9)(cid:20)(cid:18)(cid:40)(cid:39)(cid:33)(cid:1)
(cid:1)(cid:1)(cid:20)(cid:22)(cid:6)(cid:1)(cid:1)(cid:1)(cid:9)(cid:5)(cid:24)(cid:25)(cid:1)(cid:38)(cid:1)(cid:1)
(cid:1)(cid:1)(cid:18)(cid:22)(cid:20)(cid:11)(cid:1)(cid:1)(cid:9)(cid:5)(cid:24)
(cid:1)(cid:1)(cid:7)(cid:5)(cid:14)(cid:14)(cid:1)(cid:1)(cid:19)(cid:9)(cid:7)(cid:36)(cid:18)(cid:17)(cid:18)(cid:36)(cid:13)(cid:15)(cid:18)
(cid:1)(cid:1)(cid:5)(cid:8)(cid:8)(cid:1)(cid:1)(cid:1)(cid:9)(cid:20)(cid:18)(cid:25)(cid:1)(cid:39)(cid:1)(cid:1)
(cid:28)(cid:4)(cid:39)(cid:27)
(cid:1)(cid:1)(cid:18)(cid:17)(cid:18)(cid:1)(cid:1)(cid:1)(cid:9)(cid:8)(cid:24)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
(cid:1)(cid:1)(cid:13)(cid:15)(cid:18)(cid:1)(cid:1)(cid:1)(cid:9)(cid:8)(cid:24)(cid:1)(cid:1)(cid:1)(cid:1)(cid:1)
Figure 12. To carry out the experiment described in this section, we compile a
program such as (a) into its assembly version (b). Then, we replace, manually,
occurrences of ret with the two-instruction sequence seen in (c).
shows the runtime of the modiﬁed program divided by the
runtime of the original program. The t-test applied on the two
populations has never given us a p-score lower than 0.1. Thus,
it is statistically difﬁcult to distinguish original and modiﬁed
binaries by just observing their runtimes.
.
g
o
r
p
i
l
a
n
g
i
r
o
e
m
i
t
/
.
g
o
r
p
d
e
ﬁ
d
o
m
e
m
i
i
t
An average of 1.00 
indicate that original 
and modified programs 
have the same runtime.
1.04
1.03
1.02
1.01
1.00
0.99
0.98
k
c
a
y
r
a
p
e
h
h
s
h
s
i
l
h
t