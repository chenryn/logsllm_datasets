分则由冒号隔开。最简单的文件规格语法由一个文件名和一个文件大小构成，不过还可以使用
建目录。
/var/mysql/data):
的值，以确定表空间文件的路径名：
436
默认的自扩展增量值为8MB。要想指定其他的增量值，需要设置系统变量innodb_
如果你启动了服务器，同时未显式地配置InnoDB，那么InnoDB会使用默认的配置来创建
（1）把相应的设置行添加到选项文件里。
在一般情况下，系统表空间完全由常规文件构成，并且不会包含任何原始分区（即设备文
2.配置InnoDB系统表空间
第一种格式指定了一个大小固定为 size 的文件。其中，size 值应该是一个正整数，其后
innodb_data_file_path选项的值由多个以分号隔开的文件规格构成，每个规格的各个部
基于上述规则，以下三组配置所指定的表空间文件集合是完全一样的（假设数据目录为
口如果未指定 innodb_data_home_dir，那么默认值就是服务器数据目录的路径名，并且
InnoDB存储引擎会按以下规则组合innodb_data_home_dir和innodb_data_file_path
（4）启动服务器。InnoDB 将会注意到这些文件尚不存在，然后创建并初始化它们。
(3）确认那些表空间组成文件都不存在。
(2）确认将被创建的各个表空间组成文件所在的目录都已存在。InnoDB 只会创建文件，不会创
path:size:autoextend:max:maxsize
path:size:autoextend
path:size
innodb_data_file_path=/var/mysql/data/ibdata1:500M;/var/mysql/data/ibdata2:500M
innodb_data_home_dir=
[mysqla]
innodb_data_home_dir=/var/mysql/data
[mysqld]
innodb_data_file_path=ibdata1:500M;ibdata2:500M
[mysqld] 
口如果显式地将 innodb_data_home_dir 设置为空，那么InnoDB 会把 innodb_data_
口
InnoDB会把 innodb_data_file_path 里的文件名解释为相对于该数据目录的。
file_path 里的所有文件规格当作绝对路径名。
innodb_data_home_dir 值的。
file_path里的所有文件规格所在的目录，并且会把那些文件名解释为相对于
如果innodb_data_home_dir不为空，那么InnoDB会把它解释为innodb_data_
第12章MySQL的基本管理
---
## Page 457
如果该字符为一个数字，那么InnoDB 会将这个规格的下一部分当作一个文件大小；否则，会
格的各个部分。遇到冒号时，InnoDB 存储引擎会通过查看其后面那个字符来消除这种二义性。
Windows路径名是以一个驱动器名和一个冒号为开头的），你仍然应该使用冒号来分隔各文件规
统会
些进程会破坏彼此的数据。例如，如果你错误地把交换分区指定给InnoDB 使用，那么你的系
争进程，它们每一个都认为自己拥有这个分区，并且可以随意使用它。这样导致的结果就是
务器可以对它进行读/写。此外，还需要确保这个分区未被用作其他用途。否则，将会有多个
已被初始化，并且可以按读/写方式来使用此表空间。
当作是只读的，因为还没有进行重新配置。
件是一个需要初始化的原始分区：
file_path里，以此实现分区配置。具体步骤如下所示。
innodb_data_home_dir 设置为空，就可以把设备文件的完整路径放在innodb_data_
需要为innodb_data_home_dir 选项指定一个值，因为这个分区并不在数据目录下。如果把
Unix系统，并且想在其上面使用一个路径名为/dev/rdsk8、大小为200GB的原始分区。此时，
系统使用的，而不能面向分区。此时，使用分区会使系统备份变得更加困难。
有以下几个。
表转储出来；在完成配置之后再重新加载它们。）
不要创建任何InnoDB表。如果已经创建，那么需要在重新配置之前用mysqldump 工具把那些
如果把原始分区指定为InnoDB表空间的一部分，则需要确保对其设置了访问权限，以便服
（2）启动服务器。InnoDB会看到newraw后缀，并初始化这个分区。它还会把这个表空间
（1）使用带有newraw后缀的大小值来初始配置原始分区。该后缀是要告诉InnoDB，该文
将原始分区包含在表空间里涉及两个操作：初始配置和随后的重新配置。假设，你有一个
把原始分区用作InnoDB系统表空间的组成部分要稍微复杂一些。考虑使用这种方式的原因
在Windows系统上配置InnoDB系统表空间时，需要把路径名里的反斜线写成单个的斜纟
变得非常不稳定！
（5）再次启动服务器。InnoDB现在看到的后缀是raw，而非 newraw。它会假定这个分区
（3）在InnoDB初始化分区之后，停止服务器。
innodb_data_file_path=/dev/rdsk8:200Gnewraw
[mysqld]
在InnoDB表空间里使用原始分区的一个不利因素是：你的系统备份软件可能只是面向文件
口可以轻而易举地创建非常巨大的表空间。分区组成可以扩展到整个分区，而常规的文件
innodb_data_file_path=/dev/rdsk8:200Graw
nnodb_data_home_dir=
[mysqld]
（4）
nnodb_data_home_dir=
口
口
组成会受到操作系统所允许的最大文件大小的限制。
显；但是在其他系统里，这种差异却足以让人选用分区。
原始分区通过消除文件系统管理层来减少开销。在某些系统里，这类开销可能并不明
不再出现。
给常规文件，而不是以递增方式进行分配。但是，这样只能减少碎片，并不能保证它
空间时，会尽量向有关文件写入足够多的零，以迫使操作系统把空间一次性全部分配
件系统碎片的影响。为最大限度地减少常规文件的碎片，InnoDB存储引擎在初始化表
可以保证每个原始分区在磁盘上都拥有一个完全连续的空间，而常规文件却会受到文
重新配置分区规格，把后缀newraw改为raw：
12.5存储引擎配置
437
线
这
竞
---
## Page 458
件。
raw），将其添加进表空间。
为表空间组成部分的步骤（即先使用newraw后缀，接着在启动和停止服务器之后把它更改回
则必须保证它还不存在。如果这个组成是一个原始分区，则需要使用前面介绍过的把分区指定
116MB，使用它来更改文件规格，如下所示：
舍入近似到1MB（字节数为1048576，而非1000000）的倍数，并将其用在文件的规格里。
然后在其后面添加另一个文件。为此，需要先确定这个文件的当前实际大小；然后，将其向下
Data_free 的值，其中，tbl_name是包含在系统表空间里的任何一个 InnoDB 表的名字：
假
且会回滚。要想确定剩余空间的数量，
有必要。表空间快被填满的征兆之一是：当InnoDB 事务应该成功时，它们却总是会失败，并
你可在现有的表空间组成文件列表的末尾添加一个新的文件。当表空间被填满时，这样做就很
在初始化分区时，使用newraw后缀；在启动和停止服务器之后更改回raw。
的任何原始分区），修正配置错误，并重启服务器。如果已拥有了原始分区，请记得更改规格：
以检查出错日志，弄清问题所在。接着，删除InnoDB创建的所有文件（不包括可能正在使用
别为500MB和10GB）构成的表空间：
将其当作路径名的一部分。例如，下面这个配置会创建一个由C盘和D盘上的文件（其大小分
438
启用或禁用使用单独的表空间只会对InnoDB 如何创建新表产生影响。不管对变量
设，当前有一个文件，其规格内容如下所示：
在启用此变量之后，每个新创建的 InnoDB表都将有一个.frm格式文件和一个.ibd数据文
要想让每个 InnoDB 表都使用一个表空间，需要启用系统变量innodb_file_per_table:
4.使用单独的（每个表）InnoDB表空间
（4）重启服务器。
(3）把这个新组成的规格添加到现有文件列表的末尾。如果这个新组成是一个常规文件，
如果此文件现在的实际大小为121634816个字节，其换算后的大小就是121634816÷1048576=
(2）如果表空间的最后一个组成是一个自扩展文件，那么必须先将其规格更改为固定大小，
要想通过另外添加组成文件来扩大InnoDB表空间，可以按以下步骤进行。
mysql> SHOW TABLE STATUS LIKEtbl_name';
在初始化InnoDB系统表空间，并开始使用它之后，便不能更改其组成文件的大小。不过
3.重新配置InnoDB系统表空间
在建立初始表空间时，如果因为InnoDB不能创建某个必要的文件而导致启动失败，那么可
innodb_file_per_table=1
[mysqld]
innodb_data_file_path=ibdatal:116M
[mysqld]
innodb_data_file_path=ibdata1:100M:autoextend
[mysqld]
（1）停止正在运行的服务器。
innodb_data_file_path=C:/ibdata1:500M;D:/ibdata2:10G
innodb_data_home_dir=
[mysqld]
第12章MySQL的基本管理
，可以运行下面这条语句，并在其输出结果里检查
---
## Page 459
作产生影响。
以及一些其他的配置参数。
12.5.3.2InnoDB 存储引擎的变量
设置可能很有用。例如：
file_format，但也可以在运行时对它们进行更改。这种情况对于那些只应用于创建特定表的
创建的表。
前一节讨论了如何配置InnoDB的表空间。InnoDB 也有其自己的日志文件和内存缓冲区，
 innodb_log_file_size/innodb_log_files_in_group
innodb_log_buffer_size
 innodb_buffer_pool_size
通常情况下，可以在服务器启动时设置系统变量innodb_file_per_table和innodb_
SET GLOBALinnodb_file_format='Antelope';
口InnoDB支持多种文件格式，默认格式为Antelope。当启用innodb_file_per_table 时，
口对于未被其他表以外键形式进行引用的表，TRUNCATE TABLE的执行速度更快，并且可以重
对于使用其自己的.ibd文件进行存储的表，InnoDB会启用其他几项功能。
SET
新申请磁盘空间；但存储在系统表空间里的表不具备这两个特点。
数。
（其代价是：较大的日志文件会增加崩溃之后的恢复时间。）修改innodb_log_file_size
志文件，可以减少日志文件被填满的频率，从而减少把缓冲池里的信息写入磁盘的次数。
当 InnoDB的日志被写满时，InnoDB会把缓冲池里的信息写入磁盘。使用较大的 InnoDB日
服务器之前一定要确保日志文件目录已存在。
home_dir。（通过这种方式，把日志文件放到另一个与数据目录所在物理驱动器不同的驱
们。要想显式指定InnoDB写入日志文件的目录路径名，可以使用innodb_log_group_
它们。日志文件的名字都是以ib_作为开头。默认情况下，InnoDB会在数据目录里创建它
InnoDB有其自己的日志文件，如果服务器启动时，它们还不存在，那么InnoDB会自动创建
时不需要提前刷新。缓冲区的默认大小为1MB，最大可取值为8MB。
有更多的磁盘活动多次刷新缓冲区。加大缓冲区的大小可以在内存里缓冲更大的事务，
次性地写入磁盘。如果某个事务很大，超出了缓冲区的大小，那么在事务结束之前，需要
InnoDB会尽量把与每一个事务有关的信息缓冲在内存里，等到整个事务结束时才把它们一
引导致的磁盘操作。更多相关信息请参考12.7.2节。
如果有多余的内存，可以让InnoDB的缓冲池变得更大一点，从而减少因访问表数据和表索
些行格式的特点相关的信息请参考5.4节。
Barracuda支持在创建新的InnoDB表时使用COMPRESSED 或者DYNAMIC行存储格式。与这
innodb_file_format=Barracuda
format:
可以创建使用 Barracuda 格式的表。要想实现这一点，还必须设置系统变量innodb_file_
动
GLOBAL
[mysqld]
力器上，可以分散磁盘的读写活动。）InnoDB只会创建文件，而不会创建目录，因此在启动
、日志文件的总大小（即这两个值的乘积）是一个十分重要的指标，最大不能超过4GB。
innodb_file_
ENGINE=INNODB ROW_FORMAT=COMPRESSED;
，下面列出的这几个常用参数，可以对InnoDB存储引擎的一般性操
Barracuda';
12.5存储引擎配置
439
回
---
## Page 460
支持多个时区的能力。
的运行地点（而不是MySQL服务器的运行地点）来使用时间设置。下面的讨论描述了MySQL
户端改写这个默认设置，设置成自己想要的时区。如此一来，应用程序便可以根据客户端程序
主机的本地时区。不过，
12.6.1配置时区支持
以下几个方面。
是从软件支持的本地习惯列表中选择使用某组特定的习惯。MySQL的国际化和本地化配置涉及
国际化指的是软件遵照本地习惯使用的能力，即软件可用于各种不同的本地环境。本地化指的
12.6
440
MySQL服务器可以通过检查所在系统环境来设置默认时区。大部分情况下，它就是服务器
口time_zone。它是MySQL 服务器的默认时区。默认情况下，其值为 SYSTEM，表示的是
口 system_time_zone。它是服务器在启动时确定的在服务器主机上实际使用的时区。这
时区信息保存在下面这两个系统变量里。
口月份和日期名称的区域设置。
口
口
口服务器默认时区。
理用户可以设置全局的time_zone 变量，以更改此后所有连接成功的客户端的默认时区。
可以通过设置会话级time_zone 变量来重新设置自己的会话级时区。拥有 sUPER 权限的管
连接上的客户端设置会话级的time_zone 值，使其成为客户端的默认时区。任何客户端都
的--default-time-zone 选项。服务器在运行时会使用全局的time_zone 值来为每一个
请根据系统的具体情况选择合适的语法格式。
另一种常见的语法格式为：
这个示例展示了一种可以广泛使用的语法格式（例如，它在Linux和Mac OSX上都有效）。
mysqld_safe指定为美国中部时间，可以在服务器的选项文件里添加如下内容：
server脚本间接调用mysqld_safe的时候，因为该脚本不支持命令行选项。例如，要想把
法是把这个选项放到某个选项文件的[mysqld_safe]选项组里，尤其是在你通过mysql.
启动脚本（并非mysqld，因为它不支持这个选项）里指定一个--timezone选项。最好的做
时），难以保证Tz会被设置。在Unix系统里，另一种设置时区的方法是在mysqld_safe的
system_time_zone产生影响。不过，在某些环境里（如服务器随同系统的启动过程而启云
前，如果把环境变量TZ设置为期望的时区，那么会对服务器在启动时如何设
变量只能以全局系统变量形式存在，并且在运行期间不允许重新设置。在服务器启动
显示诊断和出错信息所使用的语言。
默认字符集和排序规则。
便让InnoDB 可以创建新的文件。
够彻底处理好正在进行中的事务。接着，删除那些日志文件，重新配置，并重启服务器以
timezone=Us/Central
[mysqld_safe]
全球化问题
如果已创建了日志文件，并想要更改它们的大小，则必须完全关闭服务器，以使InnoDB 能
timezone=CST6CDT
[mysqld_safe]
第12章MySQL的基本管理
，你也可以在启动服务器时显式指定时区。此外，服务器还允许每个客
具
之
个
---
## Page 461
和 DEFAULT_COLLATION 来更改这些默认值。例如：
与字符集相兼容（即排序规则名称的开始部分必须与字符集的名称相同）。例如：
改这些值，可以设置系统变量character_set_server 和 collation_server。排序规则必须
排序规则会对字符串的比较和排序操作产生影响。
据库、表、列和字符串常量等级别上选择字符集。对每种字符集，MySQL还支持多种排序规则。
12.6.2选择默认字符集和排序规则