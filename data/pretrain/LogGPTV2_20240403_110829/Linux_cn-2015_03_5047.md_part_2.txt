```
tar -xjvf valgring-x.y.z.tar.bz2 (where x.y.z is the version number you are trying to install)
```
进入新创建的目录（的valgrind-XYZ）内运行以下命令：
```
./configure
make
make install
```
让我们通过一个小程序(test.c)来理解valgrind怎么工作的:
```
#include 
void f(void)
{
int x = malloc(10 * sizeof(int));
x[10] = 0;
}
int main()
{
f();
return 0;
}
```
编译程序:
```
gcc -o test -g test.c
```
现在我们有一个可执行文件叫做'test'。我们现在可以用valgrind来检测内存错误：
```
valgrind –tool=memcheck –leak-check=yes test
```
这是valgrind呈现错误的输出：
![output of valgrind showing heap block overrun and memory leak](/data/attachment/album/201503/12/164218lp5jw1zodwcdcpqa.png)
*valgrind显示堆溢出和内存泄漏的输出*
正如我们在上面看到的消息，我们正在试图访问函数f未分配的内存以及分配尚未释放的内存。
### 5. GDB
GDB是来自自由软件基金会的调试器。它对定位和修复代码中的问题很有帮助。当被调试的程序运行时，它给用户控制权去执行各种动作， 比如:
* 启动程序
* 停在指定位置
* 停在指定的条件
* 检查所需信息
* 改变程序中的数据 等。
你也可以将一个崩溃的程序coredump附着到GDB并分析故障的原因。
GDB提供很多选项来调试程序。 然而，我们将介绍一些重要的选择，来感受如何开始使用GDB。
如果你还没有安装GDB，可以在这里下载：[GDB官方网站](http://www.gnu.org/software/gdb/download/)。
#### 编译程序:
为了用GDB调试程序，必须使用gcc的'-g'选项进行编译。这将以操作系统的本地格式产生调试信息，GDB利用这些信息来工作。
下面是一个简单的程序（example1.c）执行被零除用来显示GDB的用法:
```
#include
int divide()
{
int x=5, y=0;
return x / y;
}
int main()
{
divide();
}
```
![An example showing usage of gdb](/data/attachment/album/201503/12/164220djyusau3myjmlyj6.png)
*展示GDB用法的例子*
#### 调用 GDB:
通过在命令行中执行'gdb'来启动gdb:
![invoking gdb](/data/attachment/album/201503/12/164222wcstzjtcje3oj6tr.png)
*调用 gdb*
调用后, 它将等待终端命令并执行，直到退出。
如果一个进程已经在运行，你需要将GDB连接到它上面，可以通过指定进程ID来实现。假设程序已经崩溃，要分析问题的原因，则用GDB分析core文件。
#### 启动程序:
一旦你在GDB里面，使用'run'命令来启动程序进行调试。
#### 给程序传参数:
使用'set args'给你的程序传参数，当程序下次运行时将获得该参数。'show args'将显示传递给程序的参数。
#### 检查堆栈:
每当程序停止，任何人想明白的第一件事就是它为什么停止，以及怎么停在那里的。该信息被称为反向跟踪。由程序产生每个函数调用和局部变量，传递的参数，调用位置等信息一起存储在堆栈内的数据块种，被称为一帧。我们可以使用GDB来检查所有这些数据。 GDB从最底层的帧开始给这些帧编号。
* **bt**: 打印整个堆栈的回溯
* **bt**  打印n个帧的回溯
* **frame** : 切换到指定的帧，并打印该帧
* **up** : 上移'n'个帧
* **down** : 下移'n'个帧 ( n默认是1)
#### 检查数据:
程序的数据可以在里面GDB使用'print'命令进行检查。例如，如果'x'是调试程序内的变量，'print x'会打印x的值。
#### 检查源码:
源码可以在GDB中打印。默认情况下，'list'命令会打印10行代码。
* **list** : 列出'linenum'行周围的源码
* **list** : 从'function'开始列出源码
* **disas** : 显示该函数机器代码
#### 停止和恢复程序:
使用GDB，我们可以在必要的地方设置断点，观察点等来停止程序。
* **break** : 在'location'设置一个断点。当在程序执行到这里时断点将被击中，控制权被交给用户。
* **watch** : 当'expr'被程序写入而且它的值发生变化时GDB将停止
* **catch** : 当'event'发生时GDB停止
* **disable** : 禁用指定断点
* **enable** : 启用指定断点
* **delete** : 删除 断点/观察点/捕获点。 如果没有传递参数默认操作是在所有的断点
* **step**: 一步一步执行程序
* **continue**: 继续执行程序，直到执行完毕
#### 退出 GDB:
用'quit'命令还从GDB中退出。
GDB还有更多的可用选项。里面GDB使用help选项了解更多详情。
![getting help within gdb](/data/attachment/album/201503/12/164223lcbwgwwyqgbqgbmq.png)
*在GDB中获得帮助*
### 总结
在这篇文章中，我们已经看到不同类型的Linux用户空间的调试工具。总结以上所有内容，如下是什么时候使用该什么的快速指南：
* 基本调试，获得关键变量 - print 语句
* 获取有关文件系统支持，可用内存，CPU，运行程序的内核状态等信息 - 查询 /proc 文件系统
* 最初的问题诊断，系统调用或库调用的相关问题，了解程序流程 – strace / ltrace
* 应用程序内存空间的问题 – valgrind
* 检查应用程序运行时的行为，分析应用程序崩溃 – gdb
---
via: 
作者：[B N Poornima](http://linoxide.com/author/bnpoornima/) 译者：[mtunique](https://github.com/mtunique) 校对：[wxy](https://github.com/wxy)
本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创翻译，[Linux中国](http://linux.cn/) 荣誉推出