title:Searchable Encryption with Secure and Efficient Updates
author:Florian Hahn and
Florian Kerschbaum
Searchable Encryption with Secure and Efﬁcient Updates
Florian Hahn
SAP, Karlsruhe
Germany
Florian Kerschbaum
SAP, Karlsruhe
Germany
ﬂPI:EMAIL
ﬂPI:EMAIL
ABSTRACT
Searchable (symmetric) encryption allows encryption while
still enabling search for keywords.
Its immediate applica-
tion is cloud storage where a client outsources its ﬁles while
the (cloud) service provider should search and selectively
retrieve those. Searchable encryption is an active area of
research and a number of schemes with diﬀerent eﬃciency
and security characteristics have been proposed in the liter-
ature. Any scheme for practical adoption should be eﬃcient
– i.e. have sub-linear search time –, dynamic – i.e. allow
updates – and semantically secure to the most possible ex-
tent. Unfortunately, eﬃcient, dynamic searchable encryp-
tion schemes suﬀer from various drawbacks. Either they
deteriorate from semantic security to the security of deter-
ministic encryption under updates, they require to store in-
formation on the client and for deleted ﬁles and keywords
or they have very large index sizes. All of this is a problem,
since we can expect the majority of data to be later added
or changed. Since these schemes are also less eﬃcient than
deterministic encryption, they are currently an unfavorable
choice for encryption in the cloud. In this paper we present
the ﬁrst searchable encryption scheme whose updates leak
no more information than the access pattern, that still has
asymptotically optimal search time, linear, very small and
asymptotically optimal index size and can be implemented
without storage on the client (except the key). Our con-
struction is based on the novel idea of learning the index for
eﬃcient access from the access pattern itself. Furthermore,
we implement our system and show that it is highly eﬃcient
for cloud storage.
Categories and Subject Descriptors
D.4.6 [Operating Systems]: Security and Protection—
Cryptographic controls; H.3.1 [Information Storage and
Retrieval]: Content Analysis and Indexing—Indexing meth-
ods
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full citation
on the ﬁrst page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
CCS’14, November 3–7, 2014, Scottsdale, Arizona, USA.
Copyright is held by the owner/author(s). Publication rights licensed to ACM.
ACM 978-1-4503-2957-6/14/11 ...$15.00.
http://dx.doi.org/10.1145/2660267.2660297.
Keywords
Searchable Encryption; Dynamic Searchable Encryption; Se-
cure Index; Update
1.
INTRODUCTION
Searchable (symmetric) encryption [8, 9, 11, 13, 19, 20,
24, 29] consists of three operations. Encryption transforms a
keyword/ﬁle pair using a secret key into a ciphertext. Using
the secret key one can generate a search token for a speciﬁc
keyword. Using this token, one can then search in a set of
ciphertexts for those that match the keyword. Hence, one
can encrypt, but still search without decryption.
The immediate application for searchable encryption is
cloud storage where the client outsources its storage, but
encrypts its ﬁles for conﬁdentiality beforehand and retains
the key. The advantage compared to standard encryption is
that the cloud can perform the search operation without the
key and only return a matching subset for a query. Hence,
the client does not have to download the entire data set and
search himself. In many cases this is an enormous eﬃciency
gain.
Any practical searchable encryption scheme should be eﬃ-
cient, dynamic and secure. By eﬃciency we mean sub-linear
search time and this is achieved using an (inverted) index.
Indices can be diﬃcult to update, particularly if they are
encrypted, but eﬃcient dynamic searchable encryption [8,
19, 20, 24] achieves just this. Nevertheless, current eﬃcient,
dynamic schemes [20, 24] leak a deterministic function of
the keyword during an update, require client storage and
additional storage linear in the number of deletes [8] or have
an index of the size of the number of documents times the
number of keywords [19]. This is a problem, since in long-
running systems the majority of data will be later added,
changed or deleted. Hence, a long-running system using
such a method is either no more secure or very ineﬃcient
in storage. Furthermore, since deterministic encryption is
very eﬃcient, searchable encryption becomes an unfavorable
choice for such cloud storage systems.
In this paper we present the ﬁrst dynamic searchable en-
cryption scheme with secure and eﬃcient updates. Even
under updates, our schemes leaks no more than what can
be inferred from the search tokens. Our index is only linear
in the number of keywords, hence asymptotically optimal,
and client storage (except the key) is optional in our con-
struction1. While our time for the ﬁrst, initial search of a
keyword is linear in the number of keywords, we show that
1Client storage can be used to speed up additions
it amortizes over multiple searches and is hence practical.
We show a theoretic upper bound for amortization in O(n2)
searches in Section 6.3. In our experiments amortization is
approached much faster, namely after 0.73n searches, which
is a much more practical assumption. Furthermore, 84% of
all keywords where never searched for and remained seman-
tically secure encrypted.
Hence, our scheme oﬀers a new viable alternative for se-
cure storage in the cloud. It is nearly as eﬃcient as determin-
istic encryption having the same overall search complexity,
but it is clearly more secure leaking only the access pattern
of ﬁles. We implement our scheme and show that is highly
eﬃcient also in absolute performance metrics.
In summary, we contribute a searchable encryption scheme
that is
• dynamic. Data can be added, deleted and hence changed
after the initial outsourcing. In fact, we do not oﬀer
a speciﬁc operation for initial outsourcing and assume
all data is added incrementally.
• eﬃcient. Our scheme has asymptotically optimal, sub-
linear search time. Furthermore, our Java-based im-
plementation shows that a search in a collection with
300.000 keywords and documents can be performed in
70 ms on average. We only require to store 2 crypto-
graphic hash values per keyword and document.
• secure. We formalize security using a simulation-based
deﬁnition. Particularly, we deﬁne our own leakage
functions which are signiﬁcantly more restrictive than
those of related work. Loosely speaking, our scheme
is semantically secure unless a search token has been
revealed.
The remainder of the paper is structured as follows.
In
the next section, we explain the problem of securely up-
dating searchable encryption in more detail and outline our
solution approach. In Section 3 we describe the algorithms
of our scheme and formally deﬁne its security. We present
our construction in Section 4, before we prove its security
according to our deﬁnition in Section 5. We discuss open as-
pects in Section 6. In Section 7 we present the results of the
evaluation of our implementation. Finally, in Section 8 we
overview related work, before we summarize our conclusions
in Section 9.
2. PROBLEM DESCRIPTION
Searchable encryption consists of three operations: en-
cryption, token generation and search. Encryption takes a
plaintext, e.g. a ﬁle identiﬁer, a (set of) keyword(s) and a
key as input. In this paper we investigate symmetric search-
able encryption, but there also exists public key searchable
encryption [6]. Encryption produces a ciphertext which can
be outsourced to a server, e.g. in the cloud. The key holder
can generate a search token for a keyword using the token
generation operation. The storage service provider can iden-
tify all ciphertexts for a keyword using this search token and
the ciphertext(s) in the search operation. He learns which
ciphertexts match the query (the access pattern) and mul-
tiple ciphertexts can match.
Searchable encryption can secure outsourcing of data by
retaining the key at the client. Still due to the search ca-
pability eﬃcient retrieval can be implemented. The leakage
of the access pattern is key to this eﬃciency, since it allows
to retrieve all ciphertexts in one round. Methods that hide
the access pattern come with additional restrictions. Private
information retrieval (PIR) [10, 22] can only retrieve one ci-
phertext. Furthermore computational PIR [22] requires a
linear scan of the data [28] and information-theoretic PIR
requires multiple servers to store the data [10]. Oblivious
RAM [14, 31, 33] accesses also one entry at a time and
that even with at least logarithmic overhead. An interesting
scheme is proposed by Stefanov et al. that combines ORAM
and searchable encryption [30]. This scheme leaks the access
pattern, but hides all keywords of updated ﬁles. Hence, it
has less leakage than our scheme, but it still has logarithmic
search time.
Song et al. introduced searchable encryption as a standard
semantically secure encryption scheme that only leaks the
access pattern of searches [29]. Their scheme still requires a
linear scan of all data for searching. Meanwhile, Hacig¨um¨us
et al. use deterministic encryption to search eﬃciently – in
sublinear time – in databases [16]. Clearly, deterministic en-
cryption leaks signiﬁcantly more information than the access
pattern and hence is less secure, but more eﬃcient.
Curtmola et al. introduced semantically secure searchable
encryption with sublinear search time [11]. Loosely speak-
ing, the basic idea is to construct an index as also used
in deterministic encryption. The index is encrypted and
contains deterministically encrypted index keywords. Then
there is a list of entries where the pointer to the next entry
is encrypted with a key speciﬁc for the keyword. The search
token is a deterministic function of the keyword plus the
key for the decryption of the pointers. The storage service
provider can look up the deterministic keyword in sublinear
time and then decrypt and traverse the list. Still, this is
semantically secure unless a search token has been revealed,
since each keyword is encrypted deterministically at most
once.
Curtmola et al.’s construction builds this index on the
client before he uploads the data to the service provider.
They introduce an additional operation called BuildIndex
that takes all plaintexts and keywords as input. Afterwards
they allow no more updates until the client builds the next
entire index. Kamara et al. propose dynamic searchable en-
cryption where this index can be incrementally updated [20].
They describe an update operation that, loosely speaking,
takes the deterministically encrypted keyword, a ciphertext
and a token key as input. The service provider can then
insert the new ciphertext at the beginning of the list and
encrypt the pointer using the token key.
Another contribution starting with Curtmola et al. is the
simulation-based security deﬁnition. Diﬀerently from a game-
based security deﬁnition as in standard semantic security
the simulation-based security uses all leaked information to
construct a simulator that produces indistinguishable out-
put. This has the clear advantage that the expected leakage
of the encryption is explicitly spelled out. In order to acco-
modate updates Kamara et al. introduced additional leakage
functions: L3 and L4 in their paper. Particularly, for addi-
tions L3 leaks a deterministic function of each keyword in a
ciphertext. Now, consider a case where the client uploads an
empty index and incrementally adds all ciphertexts. In this
case, the deterministic keyword function result(s) is (are)
revealed for each ciphertext. Hence, in this case dynamic
searchable encryption is no more secure than any determin-
Scheme
[20]
[24]
[19]
[8]
This paper 1
This paper 2
Search Time
O(m/n)
O(m/n)
Index Size Client Storage Revocation Storage Update Leakage Update Cost
O(m + n)
O(m + n)
O(log |f | · m/n) O(|f | · n)
O(m + n)
O(m + n)
O(m + n)
O(1)
O(1)
O(1)
O(n)
O(n)
O(1)
O(m/n)
O(m/n)
O(m/n)
ID(w)
ID(w)
O(log |f | · n)
O(m/n)
O(m/n)
O(m/n)
O(m/n)
O(m)
-
-
-
-
-
O(m)
-
-
-
-
Table 1: Overview over average complexities for eﬃcient dynamic searchable encryption schemes. n is the number of unique
keywords, m is the total number of keywords, ID(w) is a deterministic identiﬁer of the keyword, |f | is the number of ﬁles
istic encryption, yet has a constant overhead in space and
time.
Naveed et al. propose a scheme which trades storage for
performance by scattering the stored blocks using hashing
instead of encrypting the index [24]. They still leak a deter-
ministic function of the added keywords, i.e. the block where
the keyword index is stored. Kamara and Papamanthou ﬁx
this problem by using a tree-based construction, but this
has index size linear in the number of documents times the
number of keywords [19]. Furthermore, constants are quite
high, since each index entry (one bit) requires a semantically
secure ciphertext. Cash et al. ﬁx this problem by giving each
update a counter, but the client has to keep track of these
counters [8]. Furthermore, in order to accomodate deletes,
they organize those by keeping a revocation list, such that
the data may actually never be deleted. Nevertheless, they
oﬀer an edit operation that is also indistinguishable from
an add operation in case of never before searched keywords.
Table 1 gives a comparison of these and our schemes.
The problem we consider in this paper is whether we can
update an outsourced storage without leaking anything ex-
cept the access pattern and with minimal storage overhead.
It is important to maintain an index for sublinear search
time, since for large data sets linear scans are prohibitive,
particularly if they involve a linear number of cryptographic
operations. Moreover, it is important to provide storage-
eﬃcient updates, since in the long run the majority of the
data will have been added after the initial outsourcing. Over
the history of computing we have observed an exponential
growth in data, such that the initial data set is quickly
marginalized.
On a high level our approach works by learning the index
from the access pattern. We start with a non-index based
searchable encryption scheme that requires linear scans. When
we search, we learn the search token which is deterministic
and the access pattern. We then start to construct an in-
dex using the token and the accessed ciphertexts. When
we search the same keyword again we can use the index
and search in constant time. Over the long run, the initial
linear search time amortizes and we achieve asymptotically
optimal search time while leaking nothing except the access
pattern.
We show a theoretic analysis with an upper bound for
amortization of O(n2) searches. Yet, in our experiments
amortization is approached much faster, namely after 0.73n
searches.This is an assumption which can be easily met in
practice.
Clearly, the access pattern of past searches extends to the
future. A search token stays valid and can be used to match
against future ciphertexts until the entire system is rekeyed.
We have to account for this in our security deﬁnition and
include the respective leakage. We emphasize that this leak-