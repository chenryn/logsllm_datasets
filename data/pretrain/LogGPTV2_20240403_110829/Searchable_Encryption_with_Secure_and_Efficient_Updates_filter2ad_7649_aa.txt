# Title: Searchable Encryption with Secure and Efficient Updates

## Authors:
- Florian Hahn, SAP, Karlsruhe, Germany
- Florian Kerschbaum, SAP, Karlsruhe, Germany

## Abstract
Searchable (symmetric) encryption allows for the encryption of data while still enabling keyword searches. Its primary application is in cloud storage, where a client can outsource their files to a cloud service provider, which should be able to search and selectively retrieve these files. Searchable encryption is an active research area, with various schemes proposed, each offering different levels of efficiency and security. For practical adoption, a scheme must be efficient (sub-linear search time), dynamic (allowing updates), and semantically secure.

However, current efficient and dynamic searchable encryption schemes have several drawbacks. They either degrade from semantic security to deterministic encryption under updates, require storing additional information on the client, or have very large index sizes. These issues are significant because most data is expected to be added or changed over time. As a result, these schemes are less efficient than deterministic encryption and thus are not ideal for cloud storage.

In this paper, we present the first searchable encryption scheme that provides secure and efficient updates. Our scheme ensures that updates leak no more information than the access pattern, maintains asymptotically optimal search time, has a linear and very small index size, and can be implemented without requiring storage on the client (except for the key). Our construction is based on the novel idea of learning the index for efficient access from the access pattern itself. We also implement our system and demonstrate its high efficiency for cloud storage.

## Categories and Subject Descriptors
- D.4.6 [Operating Systems]: Security and Protection—Cryptographic controls
- H.3.1 [Information Storage and Retrieval]: Content Analysis and Indexing—Indexing methods

## Keywords
- Searchable Encryption
- Dynamic Searchable Encryption
- Secure Index
- Update

## 1. Introduction
Searchable (symmetric) encryption [8, 9, 11, 13, 19, 20, 24, 29] consists of three operations: encryption, token generation, and search. Encryption transforms a keyword/file pair into a ciphertext using a secret key. The secret key can generate a search token for a specific keyword, which can then be used to search a set of ciphertexts for matches. This allows for encrypted data to be searched without decryption.

The immediate application of searchable encryption is in cloud storage, where a client outsources their storage but encrypts files for confidentiality, retaining the key. The advantage is that the cloud service provider can perform the search operation without the key, returning only a matching subset for a query. This is significantly more efficient than downloading and searching the entire dataset.

A practical searchable encryption scheme should be efficient, dynamic, and secure. Efficiency means sub-linear search time, achieved using an (inverted) index. Dynamic schemes [8, 19, 20, 24] allow updates, but they often leak deterministic functions of keywords during updates, require client storage, or have large index sizes. This is problematic in long-running systems where most data will be added, changed, or deleted. Consequently, such systems may become less secure or inefficient in storage.

In this paper, we present the first dynamic searchable encryption scheme with secure and efficient updates. Our scheme leaks no more information than the access pattern, even under updates. The index size is linear in the number of keywords, making it asymptotically optimal, and client storage (except for the key) is optional. While the initial search time for a keyword is linear, it amortizes over multiple searches, making it practical. We provide a theoretical upper bound for amortization in O(n^2) searches and show through experiments that amortization is achieved much faster, after 0.73n searches. Additionally, 84% of all keywords were never searched and remained semantically secure.

Our scheme offers a new, viable alternative for secure storage in the cloud, nearly as efficient as deterministic encryption but more secure, leaking only the access pattern. We implement our scheme and demonstrate its high efficiency in absolute performance metrics.

In summary, our contributions include:
- **Dynamic**: Data can be added, deleted, and changed after the initial outsourcing.
- **Efficient**: Sub-linear search time, with a Java-based implementation showing that a search in a collection with 300,000 keywords and documents can be performed in 70 ms on average.
- **Secure**: Formalized security using a simulation-based definition, ensuring semantic security unless a search token has been revealed.

The remainder of the paper is structured as follows:
- Section 2: Detailed problem description and solution approach.
- Section 3: Description of the algorithms and formal security definition.
- Section 4: Construction of the scheme.
- Section 5: Proof of security.
- Section 6: Discussion of open aspects.
- Section 7: Evaluation results.
- Section 8: Overview of related work.
- Section 9: Conclusions.

## 2. Problem Description
Searchable encryption involves three operations: encryption, token generation, and search. Encryption takes a plaintext (e.g., a file identifier), a set of keywords, and a key as input. In this paper, we focus on symmetric searchable encryption, though public key searchable encryption [6] also exists. Encryption produces a ciphertext that can be outsourced to a server, and the key holder can generate a search token for a keyword. The server can use this token to identify and return matching ciphertexts, learning the access pattern.

Searchable encryption secures data outsourcing by retaining the key at the client. The leakage of the access pattern is key to efficiency, allowing all matching ciphertexts to be retrieved in one round. Methods that hide the access pattern, such as Private Information Retrieval (PIR) [10, 22] and Oblivious RAM (ORAM) [14, 31, 33], come with additional restrictions. PIR can only retrieve one ciphertext, and ORAM accesses one entry at a time with logarithmic overhead. Stefanov et al. [30] combine ORAM and searchable encryption, leaking the access pattern but hiding all keywords of updated files, though with logarithmic search time.

Song et al. [29] introduced searchable encryption as a semantically secure scheme that leaks only the access pattern. Their scheme requires a linear scan of all data for searching. Hacigümüş et al. [16] use deterministic encryption for sublinear search time, but it leaks more information and is less secure. Curtmola et al. [11] introduced semantically secure searchable encryption with sublinear search time, using an encrypted index and deterministically encrypted keywords. However, their scheme requires building the index on the client before uploading, and no further updates are allowed until the next index build.

Kamara et al. [20] proposed dynamic searchable encryption, allowing incremental updates. Naveed et al. [24] trade storage for performance by scattering stored blocks using hashing, but still leak deterministic functions of added keywords. Kamara and Papamanthou [19] use a tree-based construction, but the index size is linear in the number of documents and keywords. Cash et al. [8] use counters for updates, but the client must keep track of them and maintain a revocation list for deletes.

The problem we address is whether we can update an outsourced storage without leaking anything except the access pattern and with minimal storage overhead. It is crucial to maintain an index for sublinear search time and provide storage-efficient updates, as the majority of data will be added after the initial outsourcing.

Our approach learns the index from the access pattern. We start with a non-index-based searchable encryption scheme that requires linear scans. When we search, we learn the deterministic search token and the access pattern. We then construct an index using the token and accessed ciphertexts. Subsequent searches for the same keyword use the index, achieving constant-time search. Over time, the initial linear search time amortizes, and we achieve asymptotically optimal search time while leaking nothing except the access pattern.

We provide a theoretical analysis with an upper bound for amortization of O(n^2) searches. Experiments show that amortization is achieved much faster, after 0.73n searches. The access pattern of past searches extends to the future, and we account for this in our security definition, including the respective leakage.

## 3. Algorithms and Security Definition
[Detailed description of the algorithms and formal security definition]

## 4. Construction
[Detailed construction of the scheme]

## 5. Security Proof
[Proof of security according to the defined security model]

## 6. Open Aspects
[Discussion of open aspects and future work]

## 7. Evaluation
[Results of the evaluation of the implementation]

## 8. Related Work
[Overview of related work in the field]

## 9. Conclusions
[Summary of the contributions and conclusions]

---

This revised version aims to improve clarity, coherence, and professionalism, ensuring that the content is well-structured and easy to follow.