suade many ISPs from per-packet accounting, aggregate rate limit-
ing is likely to be needed to support those customers that wish to
pay a ﬂat rate for a ﬁxed amount of bandwidth. In order to imple-
ment such a pricing model in Platypus, an AS must have some way
to restrict bandwidth consumption for a particular resource princi-
pal at one or more routers. One possible approach to this problem
is to construct a distributed token bucket that limits the aggregate
rate of all packets with a given resource principal identiﬁer.3
7.3 Replay attacks
In the context of rate-based accounting, a simple model in which
resource principals can use a ﬁxed, aggregate bandwidth will likely
sufﬁce. However, while (modulo cryptographic hardness assump-
tions) packet bindings cannot be forged, they may be replayed by
an adversary, who may wish to waste a resource principal’s limited
bandwidth for a given capability. Since capabilities expire periodi-
cally, a natural countermeasure to replay attacks is to track packets
that traverse a router within some time window and only count each
distinct packet once. A Bloom ﬁlter allows for tracking of packets
in such a way, but may ﬁll up over time, resulting in false positives.
This issue can be addressed by maintaining a small circular array
of Bloom ﬁlters which are cleared as they ﬁll up [2, 32]. While
an adversary may be able to log all packets and replay them after
the corresponding Bloom ﬁlter is emptied, if the ﬁlters are emptied
only at key expiration intervals, stored packets cannot be replayed.
7.4 Scalability
While we have thus far only addressed the deployment of Platy-
pus in several limited settings, the system’s potential scalability in
real-world deployment is of obvious interest. In this section we dis-
cuss the scalability of our current design.
Careful selection of MAC algorithms is crucial for peak veriﬁca-
tion performance. We use UMAC in our software implementation,
but expect PMAC would be selected for hardware implementations.
While we do not have raw ﬁgures on its performance, its inherently
parallelizable design makes PMAC is ideal for hardware imple-
mentation [8]. Hardware implementations of AES already achieve
raw throughput of 48 Gbps [30], giving reason to believe that hard-
ware can be built to perform PMAC computation at high speeds.
Since MAC computations are done with local information only, ca-
pability issuers can choose a MAC algorithm appropriate to their
forwarding hardware or software.
Platypus’s double-MAC design requires constant state for capa-
bility veriﬁcation, regardless of the number of resource principals.
ISPs may wish to keep additional accounting state for billing pur-
poses, however. In the extreme case of per-packet billing, an ISP
would need to keep a packet counter corresponding to each re-
source principal. While deployments of Platypus in the core may
only need to handle a few thousand resource principals (for ex-
ample, UUNet’s 2,569 peers [34] may each represent a principal),
deployments for a broadband ISP may have many more (the largest
of which, Comcast, currently has 5.7 million customers [21]). Re-
cent work has shown that approximate counters with bounded error
can be maintained per ﬂow at very high speeds (OC-768) [19].
We contend that Platypus key management can also be scaled to
support large numbers of resource principals. For key distribution,
it is unlikely that all requests will arrive exactly at key ID-change
boundaries, since Platypus does not require tight time synchroniza-
tion between resource principals and routers. Even in such an un-
likely event, Platypus key servers need only perform two MAC and
one block-cipher calls for each request; servicing ten million such
requests in one second is well within the limits of approximately
20 well-provisioned key servers. Furthermore, since key lookup
requests and responses are small, each lookup requires only one
packet receipt and transmission on the part of a key server.
3To our knowledge, while work exists on distributed counting [39], none exists on
distributed token buckets; we are actively investigating how one might be designed.
Key servers must periodically distribute revocation lists to Platy-
pus routers; while distribution can occur off the critical path, lookup
cannot, so revocation lists must be stored in high-speed memory.
In our current design, each revocation entry is twelve bytes, so
a 16-MB SRAM chip could store just under 1.4 million revoked
capabilities. In the case of Comcast, that would correspond to al-
most a quarter of all its users’ capabilities in any given expiration
interval—a fraction much larger than we expect in practice.
7.5 Trafﬁc engineering
Conventional wisdom holds that widespread source routing de-
ployment would complicate trafﬁc-engineering efforts. While there
admittedly is cause for concern, we have reasons for optimism. Re-
cent simulations by Qiu et al. show that while source-routed trafﬁc
can have deleterious interactions with intra-AS trafﬁc engineering
mechanisms in extreme cases, certain techniques may be able to
mitigate these effects [28]. In their studies, however, source-routed
trafﬁc was capable of completely specifying intra-AS paths. Our
measurements indicate that such ﬁne-grained intra-AS hop selec-
tion may not be necessary; hence, we expect that Platypus can be
deployed in concert with existing trafﬁc engineering techniques.
Furthermore, while we have thus far equated waypoints and phys-
ical router interfaces, waypoints can be more ﬂexible in practice.
Our design for Platypus is meant to allow ISPs to specify any glob-
ally routable IP address within their IP space as a Platypus way-
point and dynamically adjust the actual (set of) internal router(s) to
which the IP corresponds in response to trafﬁc load. We intend to
explore this expanded ISP control in future work.
Independent of its interaction with traditional trafﬁc engineering,
Platypus opens up a new dimension for trafﬁc provisioning: time.
Routing in today’s Internet has no temporal dimension—the adver-
tisement of a route makes it immediately available. With Platypus,
however, routes may have time-limited availability; that is, a route
is available only when users possess the correct temporal secrets.
By appropriately choosing expiration intervals and expressing route
selection policy upon key lookup, ISPs can control the temporal as-
pects of trafﬁc ﬂow; in this way, Platypus may even serve to help
achieve trafﬁc engineering goals. While it is technically possible
to implement a similar scheme using BGP, it has been shown that
rapid, repeated announcement and withdrawal of routes can have a
destabilizing effect on the routing system [20].
8. RELATED WORK
Source routing has been included as a feature in many Inter-
net architectures over the years. For example, Nimrod [10] deﬁned
mechanisms for packets to be forwarded in both ﬂow-based and
source-routed, per-packet fashions. Similarly, IPv6 provides sup-
port for the source demand routing protocol, SDRP [14]. SDRP
allows for hosts to specify a strict or loose source route of ASes or
IP addresses through which to route a packet. More recently, Yang
described a new addressing architecture called NIRA [40] with the
explicit goal of providing AS-level source routing. NIRA path se-
lection consists of two stages: an initial discovery phase followed
by an availability phase in which a host determines the quality of a
particular route. A contemporary proposal, BANANAS, allows for
explicit path selection in a multi-path environment, but does not al-
low for the insertion of arbitrary intermediate hops [38]. None of
these proposals, however, have addressed the need to verify policy
compliance of the speciﬁed route on the forwarding plane. To the
best of our knowledge, we are the ﬁrst to present a fully decentral-
ized, authenticated source-routing architecture.
Frustrated with the lack of control provided by current wide-area
Internet routing, researchers have proposed circumventing it en-
tirely by forwarding packets between end hosts in an effort to con-
struct routes with more desirable path characteristics [4, 31]. Unfor-
tunately, the effectiveness of any overlay-based approach is funda-
mentally limited by both the number and the locations of the hosts
involved in the overlay. We believe Platypus addresses both of these
issues: overlay networks can view far away Platypus routers as ad-
ditional members of the overlay and use nearby Platypus routers to
increase the efﬁciency of their forwarding mechanisms.
Stoica et al. suggest that indirection be explicitly supported as an
overlay network primitive; in the Internet Indirection Infrastructure
(i3) packets may include a set of indirection points through which
they wish to be forwarded [36]. Unlike Platypus waypoints, how-
ever, i3 IDs specify logical entities, not necessarily network routing
hops. Each ID is associated with one or more application-installed
triggers that can involve arbitrary packet processing; there are no
guarantees about the topological location of the overlay node(s) re-
sponsible for a particular ID.
Packet-level authentication credentials have been suggested in a
number of other contexts. IPsec-enabled packets may contain an
authentication header with information similar to a network capa-
bility [6], except without a routing request. In order to verify au-
thentication headers, however, IPsec routers must hold one key for
each source, far more than with Platypus. Per-packet authenticators
have also been proposed to prevent DoS attacks [3, 5]; it would
be straightforward to implement a similar scheme using Platypus.
Perhaps the most closely related use is due to Estrin et al., who
introduced the notion of visas that confer rights of exit from one
organization and entry into another [15]. Stateless visas provide a
mechanism for per-packet authentication between two independent
organizations, but not for expressing routing requests. Visas are the
result of a bilateral agreement between a packet’s source and desti-
nation; each packet contains exactly two visas—one for the source
organization and one for the destination. In contrast, network capa-
bilities are concerned with authentication and routing through inter-
mediate ASes. In a subsequent paper [16], the authors also consid-
ered implementing preventative security measures within Clark’s
policy routing framework [11].
9. CONCLUSIONS & FUTURE WORK
Capabilities are well known in the operating systems literature,
but have failed to catch on in many mainstream systems, likely
because they are perceived as too heavyweight a mechanism to
address the relatively simple access problems of single-user sys-
tems. In contrast, we believe capabilities are extremely well-suited
for use in wide-area Internet routing. Unlike today’s PCs, which
typically are used by at most a small number of users with sim-
ilar goals and policy constraints, the Internet serves an extremely
large number of users with an even larger number of motivations,
all attempting to simultaneously share widely distributed resources.
Most importantly, there exists no single arbiter (for example, a sys-
tem administrator or user logged in at the console) who can make
informed access decisions.
Looking forward, while much work has gone into understand-
ing existing Internet routing policy and describing how to specify
it better, we believe that much of the complexity of Internet rout-
ing policy stems from inﬂexibility of existing routing protocols. We
aim to study how one might implement inter-AS trafﬁc engineering
policies through capability pricing strategies. For example, an AS
with multiple peering routers that wishes to encourage load balanc-
ing may be able to do so through variable pricing of capabilities for
the corresponding Platypus waypoints. While properly modeling
the self-interested behavior of external entities may be difﬁcult, we
are hopeful that this challenge is simpliﬁed by the direct mapping
between Platypus waypoints and path selection (as compared, for
example, to the intricate interactions of various BGP parameters).
Acknowledgments
We thank Alvin AuYoung, Mihir Bellare, Nick Feamster, Ratul
Mahajan, Daniele Micciancio, Travis Newhouse, Saurabh Panjwani,
Sriram Ramabhadran, Jennifer Rexford, Chris Tuttle, Amin Vah-
dat, and David Wetherall for helpful discussions and feedback. We
are indebted to Neil Alldrin for his help with k-means clustering
and to David Andersen for the use of the RON testbed. Finally, we
would like to thank our shepherd, Ken Calvert, and the anonymous
reviewers for their comments. This work is supported in part by the
National Science Foundation (CNS-0347949).
10. REFERENCES
[1] S. Agarwal, C.-N. Chuah, and R. H. Katz. OPCA: Robust
interdomain policy routing and trafﬁc control. In Proc. IEEE
OPENARCH, June 2002.
[2] M. K. Aguilera, M. Ji, M. Lillibridge, J. MacCormick,
E. Oertli, D. G. Andersen, M. Burrows, T. Mann, and C. A.
Thekkath. Block-level security for network-attached disks. In
Proc. USENIX FAST, Apr. 2003.
[3] D. G. Andersen. Mayday: Distributed ﬁltering for internet
services. In Proc. USITS, Mar. 2003.
[4] D. G. Andersen, H. Balakrishnan, M. F. Kaashoek, and R. T.
Morris. Resilient overlay networks. In Proc. ACM SOSP,
Oct. 2001.
[5] T. Anderson, T. Roscoe, and D. Wetherall. Preventing
Internet denial-of-service with capabilities. In Proc. HotNets,
Nov. 2003.
[6] R. Atkinson. Security architecture for the Internet protocol.
RFC 1825, IETF, Aug. 1995.
[7] J. Black, S. Halevi, H. Krawczyk, T. Krovetz, and
P. Rogaway. UMAC: Fast and secure message authentication.
Advances in Cryptology – CRYPTO ’99. LNCS, 1666, 1999.
[8] J. Black and P. Rogaway. A block-cipher mode of operation
for parallelizable message authentication. Advances in
Cryptology – EUROCRYPT ’02. LNCS, 2332, 2002.
[9] CAIDA Skitter Project. http://www.caida.org/tools/
measurement/skitter/.
[10] I. Casti˜neyra, N. Chiappa, and M. Steenstrup. The Nimrod
routing architecture. RFC 1992, IETF, Aug. 1996.
[11] D. D. Clark. Policy routing in Internet protocols. RFC 1102,
IETF, May 1989.
[12] D. D. Clark, J. Wroclawski, K. R. Sollins, and R. Braden.
Tussle in cyberspace: Deﬁning tomorrow’s Internet. In Proc.
ACM SIGCOMM, Aug. 2002.
[13] N. G. Dufﬁeld and M. Grossglauser. Trajectory sampling for
direct trafﬁc observation. In Proc. ACM SIGCOMM, Aug.
2000.
[14] D. Estrin, T. Li, Y. Rekhter, K. Varadhan, and D. Zappala.
Source demand routing: Packet format and forwarding
speciﬁcation. RFC 1940, IETF, May 1996.
[15] D. Estrin, J. C. Mogul, and G. Tsudik. Visa protocols for
controlling interorganizational datagram ﬂow. IEEE J. SAC,
7(4), May 1989.
[16] D. Estrin and G. Tsudik. Security issues in policy routing. In
Proc. IEEE Symposium on Security and Privacy, May 1989.
[17] G. Huston. Commentary on inter-domain routing in the
Internet. RFC 3221, IETF, Dec. 2001.
[18] H. Krawczyk, M. Bellare, and R. Canetti. HMAC:
Keyed-hashing for message authentication. RFC 2104, IETF,
Feb. 1997.
[19] A. Kumar, J. Xu, L. Li, J. Wang, and O. Spatschek.
Space-code Bloom ﬁlter for efﬁcient per-ﬂow trafﬁc
measurement. In Proc. IEEE Infocom, Mar. 2004.
[20] C. Labovitz, A. Ahuja, A. Bose, and F. Jahanian. Delayed
Internet routing convergence. IEEE/ACM ToN, 9(3), June
2001.
[21] Leichtman Research Group. A record 2.3 million add
broadband in ﬁrst quarter of 2004, May 2004.
[22] J. B. MacQueen. On convergence of k-means and partitions
with minimum average variance. Ann. Math. Stat., 36, 1965.
[23] R. Mahajan, N. Spring, D. Wetherall, and T. Anderson.
User-level Internet path diagnosis. In Proc. ACM SOSP, Oct.
2003.
[24] R. Mahajan, D. Wetherall, and T. Anderson. Understanding
BGP misconﬁguration. In Proc. ACM SIGCOMM, Aug.
2002.
[25] D. L. Mills. A brief history of NTP time: Memoirs of an
Internet timekeeper. SIGCOMM CCR, 33(2), 2003.
[26] A. Nakao, L. L. Peterson, and A. Bavier. A routing underlay
for overlay networks. In Proc. ACM SIGCOMM, Aug. 2003.
[27] W. B. Norton. Internet service providers and peering. In
Proc. NANOG, June 2000.
[28] L. Qiu, Y. R. Yang, Y. Zhang, and S. Shenker. On selﬁsh
routing in Internet-like environments. In Proc. ACM
SIGCOMM, Aug. 2003.
[29] E. C. Rosen, A. Viswanathan, and R. Callon. Multiprotocol
label switching architecture. RFC 3031, IETF, Jan. 2001.
[30] B. Sanzone, D. Katz, D. Asher, D. Carlson, G. Bouchard,
M. Bertone, M. Hussain, R. Kessler, and T. Hummel.
NITROX II: A family of in-line security processors. In Proc.
IEEE Hot Chips, Aug. 2003.
[31] S. Savage, A. Collins, E. Hoffman, J. Snell, and T. Anderson.
The end-to-end effects of Internet path selection. In Proc.
ACM SIGCOMM, Sept. 1999.
[32] A. C. Snoeren, C. Partridge, L. A. Sanchez, C. E. Jones,
F. Tchakountio, B. Schwartz, S. T. Kent, and W. T. Strayer.
Single-packet IP traceback. IEEE/ACM ToN, 10(6), Dec.
2002.
[33] A. C. Snoeren and B. Raghavan. Decoupling policy from
mechanism in Internet routing. In Proc. HotNets, Nov. 2003.
[34] N. Spring, R. Mahajan, and T. Anderson. Quantifying the
causes of path inﬂation. In Proc. ACM SIGCOMM, Aug.
2003.
[35] N. Spring, R. Mahajan, and D. Wetherall. Measuring ISP
topologies with Rocketfuel. In Proc. ACM SIGCOMM, Aug.
2002.
[36] I. Stoica, D. Adkins, S. Zhuang, S. Shenker, and S. Surana.
Internet indirection infrastructure. In Proc. ACM SIGCOMM,
Aug. 2002.
[37] I. Stoica and H. Zhang. LIRA: An approach for service
differentiation in the Internet. In Proc. NOSSDAV, June 1998.
[38] H. Tahilramani Kaur, S. Kalyanaraman, A. Weiss,
S. Kanwar, and A. Gandhi. BANANAS: An evolutionary
framework for explicit and multipath routing in the Internet.
In Proc. ACM SIGCOMM FDNA, Aug. 2003.
[39] R. Wattenhofer and P. Widmayer. An inherent bottleneck in
distributed counting. In Proc. ACM PODC, Aug. 1997.
[40] X. Yang. NIRA: A new Internet routing architecture. In Proc.
ACM SIGCOMM FDNA, Aug. 2003.
[41] D. Zhu, M. Gritter, and D. R. Cheriton. Feedback based
routing. In Proc. HotNets, Oct. 2002.