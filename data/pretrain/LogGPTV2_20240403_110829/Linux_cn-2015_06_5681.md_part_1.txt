---
author: Owen Garrett
category: 技术
comments_data:
- date: '2016-10-01 23:21:49'
  message: 不错，稍后回来看
  postip: 183.240.202.10
  username: luhouxiang [Chrome 53.0|Windows 7]
count:
  commentnum: 1
  favtimes: 13
  likes: 0
  sharetimes: 0
  viewnum: 6587
date: '2015-06-24 07:37:00'
editorchoice: true
excerpt: NGINX 能在 web 性能中取得领先地位，这是由于其软件设计所决定的。许多 web 服务器和应用程序服务器使用一个简单的基于线程或进程的架构，NGINX
  立足于一个复杂的事件驱动的体系结构，使它能够在现代硬件上扩展到成千上万的并发连接。 下面这张深入 NGINX 的信息图从高层次的进程架构上深度挖掘说明了 NGINX
  如何在单一进程里保持多个连接。这篇博客进一步详细地解释了这一切是如何工作的。  知识  NGINX 进程模型  为了更好的理解这个设计，你需要理解 NGINX
  如何运行的。NGINX 有一个主进程（它执行特权操作，如读取配置和绑定端口）和
fromurl: http://nginx.com/blog/inside-nginx-how-we-designed-for-performance-scale/
id: 5681
islctt: true
largepic: /data/attachment/album/201506/23/234046vwtfosrtus0uw8zz.gif
permalink: /article-5681-1.html
pic: /data/attachment/album/201506/23/234046vwtfosrtus0uw8zz.gif.thumb.jpg
related: []
reviewer: ''
selector: ''
summary: NGINX 能在 web 性能中取得领先地位，这是由于其软件设计所决定的。许多 web 服务器和应用程序服务器使用一个简单的基于线程或进程的架构，NGINX
  立足于一个复杂的事件驱动的体系结构，使它能够在现代硬件上扩展到成千上万的并发连接。 下面这张深入 NGINX 的信息图从高层次的进程架构上深度挖掘说明了 NGINX
  如何在单一进程里保持多个连接。这篇博客进一步详细地解释了这一切是如何工作的。  知识  NGINX 进程模型  为了更好的理解这个设计，你需要理解 NGINX
  如何运行的。NGINX 有一个主进程（它执行特权操作，如读取配置和绑定端口）和
tags:
- NGINX
thumb: false
title: '深入 NGINX: 我们如何设计性能和扩展'
titlepic: false
translator: wyangsun
updated: '2015-06-24 07:37:00'
---
NGINX 能在 web 性能中取得领先地位，这是由于其软件设计所决定的。许多 web 服务器和应用程序服务器使用一个简单的基于线程或进程的架构，NGINX 立足于一个复杂的事件驱动的体系结构，使它能够在现代硬件上扩展到成千上万的并发连接。
下面这张[深入 NGINX](http://nginx.com/resources/library/infographic-inside-nginx/) 的信息图从高层次的进程架构上深度挖掘说明了 NGINX 如何在单一进程里保持多个连接。这篇博客进一步详细地解释了这一切是如何工作的。
[![](/data/attachment/album/201506/23/234046vwtfosrtus0uw8zz.gif)](http://cdn.nginx.com/wp-content/uploads/2015/04/150427_NGINX-subway_RGB.png)
### 知识 – NGINX 进程模型
![Master Process](/data/attachment/album/201506/23/234152tawgcappldapga03.png)
为了更好的理解这个设计，你需要理解 NGINX 如何运行的。NGINX 有一个主进程（它执行特权操作，如读取配置和绑定端口）和一些工作进程与辅助进程。
```
# service nginx restart
* Restarting nginx
# ps -ef --forest | grep nginx
root     32475     1  0 13:36 ?        00:00:00 nginx: master process /usr/sbin/nginx \
                                                -c /etc/nginx/nginx.conf
nginx    32476 32475  0 13:36 ?        00:00:00  \_ nginx: worker process
nginx    32477 32475  0 13:36 ?        00:00:00  \_ nginx: worker process
nginx    32479 32475  0 13:36 ?        00:00:00  \_ nginx: worker process
nginx    32480 32475  0 13:36 ?        00:00:00  \_ nginx: worker process
nginx    32481 32475  0 13:36 ?        00:00:00  \_ nginx: cache manager process
nginx    32482 32475  0 13:36 ?        00:00:00  \_ nginx: cache loader process
```
在四核服务器，NGINX 主进程创建了4个工作进程和两个管理磁盘内容缓存的缓存辅助进程。
### 为什么架构很重要？
任何 Unix 应用程序的根本基础是线程或进程。（从 Linux 操作系统的角度来看，线程和进程大多是相同的，主要的区别是他们共享内存的程度。）一个线程或进程是一个自包含的指令集，操作系统可以在一个 CPU 核心上调度运行它们。大多数复杂的应用程序并行运行多个线程或进程有两个原因：
* 它们可以同时使用更多的计算核心。
* 线程或进程可以轻松实现并行操作。（例如，在同一时刻保持多连接）。
进程和线程消耗资源。他们每个都使用内存和其他系统资源，他们会在 CPU 核心中换入和换出（这个操作叫做上下文切换）。大多数现代服务器可以并行保持上百个小型的、活动的线程或进程，但是一旦内存耗尽或高 I/O 压力引起大量的上下文切换会导致性能严重下降。
网络应用程序设计的常用方法是为每个连接分配一个线程或进程。此体系结构简单、容易实现，但是当应用程序需要处理成千上万的并发连接时这种结构就不具备扩展性。
### NGINX 如何工作？
NGINX 使用一种可预测的进程模式来分配可使用的硬件资源：
* 主进程（master）执行特权操作，如读取配置和绑定端口，然后创建少量的子进程（如下的三种类型）。
* 缓存加载器进程（cache loader）在加载磁盘缓存到内存中时开始运行，然后退出。适当的调度，所以其资源需求很低。
* 缓存管理器进程（cache manager）定期裁剪磁盘缓存中的记录来保持他们在配置的大小之内。
* 工作进程（worker）做所有的工作！他们保持网络连接、读写内容到磁盘，与上游服务器通信。
在大多数情况下 NGINX 的配置建议：每个 CPU 核心运行一个工作进程，这样最有效地利用硬件资源。你可以在配置中包含 [worker\_processes auto](http://nginx.org/en/docs/ngx_core_module.html#worker_processes)指令配置：
```
worker_processes auto;
```
当一个 NGINX 服务处于活动状态，只有工作进程在忙碌。每个工作进程以非阻塞方式保持多连接，以减少上下文交换。
每个工作进程是一个单一线程并且独立运行，它们会获取新连接并处理之。这些进程可以使用共享内存通信来共享缓存数据、会话持久性数据及其它共享资源。（在 NGINX 1.7.11 及其以后版本，还有一个可选的线程池，工作进程可以转让阻塞的操作给它。更多的细节，参见“[NGINX 线程池可以爆增9倍性能！](/article-5684-1.html)”。对于 NGINX Plus 用户，该功能计划在今年晚些时候加入到 R7 版本中。）
### NGINX 工作进程内部
![](/data/attachment/album/201506/23/234152pu28p2uz282dmvq2.png)
每个 NGINX 工作进程按照 NGINX 配置初始化，并由主进程提供一组监听端口。
NGINX 工作进程首先在监听套接字上等待事件（[accept\_mutex](http://nginx.org/en/docs/ngx_core_module.html#accept_mutex) 和[内核套接字分片](http://nginx.com/blog/socket-sharding-nginx-release-1-9-1/)）。事件被新进来的连接初始化。这些连接被分配到一个状态机 – HTTP 状态机是最常用的，但 NGINX 也实现了流式（原始 TCP ）状态机和几种邮件协议（SMTP、IMAP和POP3）的状态机。