startndisprot来实现。使用这样一个需要定制的驱动程序的库的缺点是，该驱动程序可能无
法处理所有类型的网络适配器。例如对于Metro面言，该驱动程序将不能处理一个无线适配器。
16.3ProtoFuzz的开发
现在已经有一些运行良好的协议模糊器。如果我们准备创建一个新的模糊器，那么为了避
免开发一个重复的项目，就需要提供其他模期器所不具备的一些功能。由于许多现有的模期器
都是从命令行开始运行的，因此我们面向下面的目标来使ProtoFuzz不同于其他模糊器：
·直观性。掌握ProtoFuzz的使用应当不需要一个长的学习曲线。一个终端用户应当可以掌
握该工具的基础用法，而不用手工输人或记住令人费解的命令行选项。
·易于使用。一且ProtoFuzz被启动，它就应当立即开始运转。我们将利用前面所捕获的数
据包的结构来创建模糊测试模板，而不需要用户来创建繁琐的模板以定义数据包的结构。
·可以访问所有的协议层。一些网络模糊器关注于包内的数据，面不是协议头本身。
ProtoFuzz应当能对一个包的任何以及所有部分进行模糊化，包括从以太网头到TCP/UDP
数据。
我们创建ProtoFuzz的目标肯定不是要替代现有的工具。它是为在Windows环境中进行网络
模糊测试来构建一个基础平台，该平台既可以作为一个学习工具，也可以作为一个开源项目被
任何感兴趣的团体来进行扩展。
16.3.1开发语言的选择
对于我们的基于Windows的文件格式模糊测试工具FileFuzz而言，我们选择了C#和微软
的.NET框架来创建GUI驱动的网络协议模糊器。当开发GUI应用程序时，NET平台可以处理许
多繁琐的事务，以使你可以关注于应用程序的业务逻辑，对于我们的情形而言，就是关注于破
坏业务的逻辑。NET应用要求用户首先要安装.NET框架。然面，基于NET的应用的不断流行
也正在使这一点变得有些不方便，因为大多数系统已经具有可用的库，
付5
16.3.2包捕获库
在创建网络协议模糊器的过程中，所做的一个关键决定就是选择一个合适的包捕获库，该
库需要具备三个核心功能：捕获，解析以及传输包。尽管可以从头来创建此功能，但通常并没
有建议指出，已经存在一些健壮的，开源的包捕获库。
我们选择在Windows平台上开发ProtoFuzz，就自动限制了我们在该领域的选择，典型的，
http:/sourceforge.net/projects/dotmetro
---
## Page 192
第16章网络协议模期测试：Windows平台上的自动化测试177
针对微软的Windows平台所选择的库将是WinPcap°，它是一个非常优秀的包捕获库，最初是
PieroViano将libpcap移植到Windows平台中作为其毕业论文的一部分。WinPcap已经存在许多
年了，现在它作为开源项目已经发展成一个支持大多数主流协议的强大的代码库。实际上，它
对于需要同数据包，如Wireshark（前面所提到的Ethereal）和CoreImpact，一起工作的许多
商业的和开源的应用来说是一个必备条件。WinPcap的Web站点上列出了超过100种利用该库实
现包捕获功能的工具，而这只是他们所知道的一些工具。
尽管针对ProtoFuzz而言，WinPcap已经被考虑在内，但使用C#作为开发语言的决定也限
制了使用主流库的便利性。WinPcap是用C语言编写的，尽管有一小部分工作试图编写包装程序
以简化WinPcap在C#应用中的使用，我们还是看到了一个合并了WinPcap所有功能的完整项目。
为WinPcap提供一个包装程序的COM类库PacketX?也曾经被该项目所考虑过，但最终还是被否
决了，因为它是一个商用的库。当撰写此书时，我们希望尽所有的努力来利用免费发布的库。
在经过了一段时间的搜索之后，我们很高兴偶然间发现了Metro包库，尽管它的健壮性不
如WinPcap，但该库全部是用C#来编写的，并且具有完整的使用指南和文档，并且对于我们
寻找要创建的基础模糊器是足够用的。Metro所具有的一个弱点是受限制的解析能力。它包含
有一些类，可以识别出所有高层的包的头—以太网，TCP,UDPICMP,IPv4以及地址转换协议
（AddressResolutionProtocol,ARP）—但它不包含那些可以理解在这些头下面的包中的数据
的类。同样，根据ProtoFuzz所要实现的适当的目标，这不是一个主要的考虑问题，由于Metro
是一个开源项目，我们总是可以对当前的类进行扩展以开发任何所需要的功能。
16.3.3设计
我们已经了解了足够的理论知识，下面就可以进行编码了。同样，ProtoFuzz的所有源代码
可以从www.fuzzing.org网站上获取，我们不准备分析代码的所有部分，但是在下面的几节中，
我们将强调一些非常重要的代码段。
网络连配器
我们希望ProtoFuzz能够捕获将被用来生成模糊模板的通信。为此，用户必须要首先选择将
被置为混合模式以噢探通信的网络适配器，我们不要求用户提供一个适配器名或者他们手工发
现的标识符，我们将向用户提供一个简单的下拉菜单，通过这个菜单，他们可以选择系统中任
何活动的网络适配器。幸运的是，Metro提供了用以简化该过程的类，如下面的代码片段所示：
private const string DRIVER_NAME =a"\\.\ndisprot";
NdisProtoco1DriverInterface driver = new NdisProtoco1DriverInterfaceO:
try
driver.OpenDevice (ORIVER_NAME);
odedum.nod
http://www.coresecurity.com/products/coreimpact/index.php
@http://www.beesync.com/packetx/index.html
---
## Page 193
178
第二部分目标和自动化
catch (SystenException ex)
string error - ex.Message;
error += "\n";
error += “Please ensure that you have correctly fnstalled the “+
DRIVER_NAME+"device driver.":
error += “A1so, make sure it has been started.";
"\”at a conmand prompt.";
error +-“To stop it again,type\net stop”+
DRIVER_NAME.Substring(DRIVER_NAME.LastIndexOf（"\\")+1)+
"\”in a command prompt.;
error +="\n":
error -“Press“oK'to continue...”;
MessageBox.Show(error,"Error",MessageBoxButtons.OK,
区因
MessageBoxIcon.Error);
return;
eiwn
foreach (NetworkAdapter adapter in driver.Adapters)
爱
cbxAdapters.Items,Add(adapter.AdapterName):
if (cbxAdapters.Items.Count > 0)
cbxAdapters.SelectedIndex=0;
}
首先，我们初始化了一个新的NdisProtoco1DriverInterface，然后使用用户应当已经手
工安装的ndisprot网络适配器来调用0penDevice（）函数。如果该适配器不可用，一个
SystemException异常将被捕获，用户将被提示安装井启动该适配器。一且该调用成功地执行
完，我们就得到了一个NetworkAdapter数组，该数组包含了所有可用的网络适配器的信息。利
用该数组，我们使用一个简单的foreach循环来遍历该数组，并将AdapterName属性添加到组
合列表框控件中。
捕获数据
一且我们打开了一个适配器，就可以将它置于混合模式并开始捕获通信：
try
naxPackets = Convert.ToInt32(tbxPackets.Text):
capturedPackets - new byte[maxPackets]]:
driver,BindAdapter(driver.Adapters[cbxAdapters.SelectedIndex]):
ThreadStart packets =new ThreadStart(capturePacket);
captureThread = new Thread(packets):
captureThread.Start():
catch (IndexOutofRangeException ex)
MessageBox.Show(ex.Message +
---
## Page 194
第16章网络协议模糊测试：Windows平台上的自动化测试
179
“Error*,MessageBoxButtons,OK, MessageBoxIcon.Error):
"\nYou must select a valid network adapter."
我们一开始创建了一个二维数组（capturePackets），它包含一个被捕获包的数组以及
个在该包中的字节的数组。然后调用BindAdapter（）函数将所选择的网络适配器绑定到前面所
初始化的NdisProtocolDriverInterface（driver）.这时，我们在一个单独的线程中调用
capturePacket。为此部署一个单独的线程是非常重要的，这样当包被捕获时GUI就不会加锁。
private void capturePacket()
whi1e (packetCount = nColuns)
nPosition-1;
租
=+eegs
else
nPosftion++;
byte nByte =(byte)packet.GetValue（i):
if (nByte <16)
10=+3egs
sData += nByte.To5tring("X", oCulture.NumberFormat) +
sData += "\n";
return (sData):
模变量
对于强制性模糊测试而言，模糊变量通过将字节包围在方括号中（U）来表达，而对于基