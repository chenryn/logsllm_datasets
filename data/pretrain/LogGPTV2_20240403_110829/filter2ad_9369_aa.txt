### 一、ATN介绍
ATN作为全球首个区块链+AI项目，是一个去中心化的、无需授权的、用户自定义人工智能即服务(AIaaS)和使用接口的开放区块链平台。ATN公有链将引入DBot的Oracle预言机、跨链互操作技术，且通过石墨烯架构实现高并发TPS，侧重解决人工智能服务(AIaas)与EVM兼容的智能合约之间互操作性的问题。ANT旨在提供下一代的区块链平台，提供AIaaS人工智能即服务和智能合约，为各个DApp服务，让其可以具备调用人工智能能力，繁荣DBot生态。
然而在2018年5月11日中午，ATN安全检测人员收到了异常的监控报告，并发现其ATN存在漏洞并遭受攻击。黑客利用了 ERC223
合约可传入自定义的接收调用函数与 ds-auth 权限校验等特征，在 ERC223
合约调用这个自定义函数时，合约调用自身函数从而造成内部权限控制失效。而本文，我们就针对这次事件进行漏洞分析，并在文章中对漏洞详情进行复现操作，以方便读者进行深入研究。
### 二、合约详解
ATN
Token合约采用的是在传统ERC20Token合约基础上的扩展版本[ERC223](https://github.com/ethereum/EIPs/issues/223
"ERC223")，并在此基础上调用了[dapphub/ds-auth](https://github.com/dapphub/ds-auth
"dapphub/ds-auth")
库。而我们在前文中提到的合约代码均为ERC20，这里为何使用ERC23呢？下面我们介绍一下ERC23与ERC20的区别。
ERC223 是由 Dexaran 于 2017 年 3 月 5 日提出的一个 Token 标准草案 ，用于改进 ERC20，解决其无法处理发往合约自身
Token 的这一问题。ERC20 有两套代币转账机制，一套为直接调用`transfer()`函数，另一套为调用 `approve() +
transferFrom()` 先授权再转账。当转账对象为智能合约时，这种情况必须使用第二套方法，否则转往合约地址的 Token 将永远无法再次转出。
下面我们具体来看一下ATN合约代码的具体函数。
    contract DSAuthority {
        function canCall(
            address src, address dst, bytes4 sig
        ) public view returns (bool);
    }
    contract DSAuthEvents {
        event LogSetAuthority (address indexed authority);
        event LogSetOwner     (address indexed owner);
    }
首先，代码定义了两个合约，第一个合约作为接口，而第二个合约声明了两个事件，用于记录Authority以及设置owner。
下面是`DSAuth`合约。
    contract DSAuth is DSAuthEvents {
        DSAuthority  public  authority;
        address      public  owner;
        function DSAuth() public {
            owner = msg.sender;
            LogSetOwner(msg.sender);
        }
        function setOwner(address owner_)
            public
            auth
        {
            owner = owner_;
            LogSetOwner(owner);
        }
        function setAuthority(DSAuthority authority_)
            public
            auth
        {
            authority = authority_;
            LogSetAuthority(authority);
        }
        modifier auth {
            require(isAuthorized(msg.sender, msg.sig));
            _;
        }
        function isAuthorized(address src, bytes4 sig) internal view returns (bool) {
            if (src == address(this)) {
                return true;
            } else if (src == owner) {
                return true;
            } else if (authority == DSAuthority(0)) {
                return false;
            } else {
                return authority.canCall(src, this, sig);
            }
        }
    }
此合约定义了一些基本的函数，而该合约大部分的功能是用于进行身份认证。例如`setOwner`用于更新`owner`的身份。而下面定义了一个`auth`修饰器，其中调用了下文的`isAuthorized`函数。次函数是来判断该地址是否为合约为`owner`或者是否被授权。
下面合约定义了`DSStop`。
    contract DSStop is DSNote, DSAuth {
        bool public stopped;
        modifier stoppable {
            require(!stopped);
            _;
        }
        function stop() public auth note {
            stopped = true;
        }
        function start() public auth note {
            stopped = false;
        }
    }
看合约名我们也能清楚，该合约用于定义合约目前是否停止运行。所以合约内部定义了变量`stopped`并增加修饰器便于其余合约进行继承使用。
而为了防止出现整数溢出等问题，合约定义了安全函数。
    contract DSMath {
        function add(uint x, uint y) internal pure returns (uint z) {
            require((z = x + y) >= x);
        }
        function sub(uint x, uint y) internal pure returns (uint z) {
            require((z = x - y) = y ? x : y;
        }
        function imin(int x, int y) internal pure returns (int z) {
            return x = y ? x : y;
        }
        uint constant WAD = 10 ** 18;
        uint constant RAY = 10 ** 27;
        function wmul(uint x, uint y) internal pure returns (uint z) {
            z = add(mul(x, y), WAD / 2) / WAD;
        }
        function rmul(uint x, uint y) internal pure returns (uint z) {
            z = add(mul(x, y), RAY / 2) / RAY;
        }
        function wdiv(uint x, uint y) internal pure returns (uint z) {
            z = add(mul(x, WAD), y / 2) / y;
        }
        function rdiv(uint x, uint y) internal pure returns (uint z) {
            z = add(mul(x, RAY), y / 2) / y;
        }
        function rpow(uint x, uint n) internal pure returns (uint z) {
            z = n % 2 != 0 ? x : RAY;
            for (n /= 2; n != 0; n /= 2) {
                x = rmul(x, x);
                if (n % 2 != 0) {
                    z = rmul(z, x);
                }
            }
        }
    }
通读此合约，我们能够了解到在除了正常的加减乘除之外，合约还定义了平方求幂的运算函数——`rpow`。不过此函数在ATN中并没有进行使用。
之后定义了`DSTokenBase`基础合约。
    contract DSTokenBase is ERC20, DSMath {
        uint256                                            _supply;
        mapping (address => uint256)                       _balances;
        mapping (address => mapping (address => uint256))  _approvals;
        function DSTokenBase(uint supply) public {
            _balances[msg.sender] = supply;
            _supply = supply;
        }
        function totalSupply() public view returns (uint) {
            return _supply;
        }
        function balanceOf(address src) public view returns (uint) {
            return _balances[src];
        }
        function allowance(address src, address guy) public view returns (uint) {
            return _approvals[src][guy];
        }
        function transfer(address dst, uint wad) public returns (bool) {
            return transferFrom(msg.sender, dst, wad);
        }
        function transferFrom(address src, address dst, uint wad)
            public
            returns (bool)
        {
            if (src != msg.sender) {
                _approvals[src][msg.sender] = sub(_approvals[src][msg.sender], wad);
            }
            _balances[src] = sub(_balances[src], wad);
            _balances[dst] = add(_balances[dst], wad);
            Transfer(src, dst, wad);
            return true;
        }
        function approve(address guy, uint wad) public returns (bool) {
            _approvals[msg.sender][guy] = wad;
            Approval(msg.sender, guy, wad);
            return true;
        }
    }
该合约与ERC20等基础合约的部分相同，所以函数定义部分比较简单，这里就不进行详细说明。
    contract DSToken is DSTokenBase(0), DSStop {
        mapping (address => mapping (address => bool)) _trusted;
        bytes32  public  symbol;
        uint256  public  decimals = 18; // standard token precision. override to customize
        function DSToken(bytes32 symbol_) public {
            symbol = symbol_;
        }
        event Trust(address indexed src, address indexed guy, bool wat);
        event Mint(address indexed guy, uint wad);
        event Burn(address indexed guy, uint wad);
        function trusted(address src, address guy) public view returns (bool) {
            return _trusted[src][guy];
        }
        function trust(address guy, bool wat) public stoppable {
            _trusted[msg.sender][guy] = wat;
            Trust(msg.sender, guy, wat);
        }
        function approve(address guy, uint wad) public stoppable returns (bool) {
            return super.approve(guy, wad);
        }