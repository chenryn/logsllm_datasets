title:Boxify: Full-fledged App Sandboxing for Stock Android
author:Michael Backes and
Sven Bugiel and
Christian Hammer and
Oliver Schranz and
Philipp von Styp-Rekowsky
Boxify: Full-fledged App Sandboxing 
for Stock Android
Michael Backes, Saarland University and Max Planck Institute for  
Software Systems (MPI-SWS); Sven Bugiel, Christian Hammer, Oliver Schranz, 
and Philipp von Styp-Rekowsky, Saarland University
https://www.usenix.org/conference/usenixsecurity15/technical-sessions/presentation/backes
This paper is included in the Proceedings of the 
24th USENIX Security Symposium
August 12–14, 2015 • Washington, D.C.
ISBN  978-1-939133-11-3
Open access to the Proceedings of  the 24th USENIX Security Symposium is sponsored by USENIXBoxify: Full-ﬂedged App Sandboxing for Stock Android
Michael Backes
CISPA, Saarland University & MPI-SWS
PI:EMAIL
Sven Bugiel
CISPA, Saarland University
PI:EMAIL
Christian Hammer
CISPA, Saarland University
PI:EMAIL
Oliver Schranz
CISPA, Saarland University
PI:EMAIL
Philipp von Styp-Rekowsky
CISPA, Saarland University
PI:EMAIL
Abstract
We present the ﬁrst concept for full-ﬂedged app
sandboxing on stock Android. Our approach is based
on application virtualization and process-based priv-
ilege separation to securely encapsulate untrusted
apps in an isolated environment. In contrast to all
related work on stock Android, we eliminate the ne-
cessity to modify the code of monitored apps, and
thereby overcome existing legal concerns and deploy-
ment problems that rewriting-based approaches have
been facing. We realize our concept as a regular An-
droid app called Boxify that can be deployed without
ﬁrmware modiﬁcations or root privileges. A system-
atic evaluation of Boxify demonstrates its capability
to enforce established security policies without incur-
ring a signiﬁcant runtime performance overhead.
1 Introduction
Security research of the past ﬁve years has shown that
the privacy of smartphone users—and in particular of
Android OS users, due to Android’s popularity and
open-source mindset—is jeopardized by a number
of diﬀerent threats. Those include increasingly so-
phisticated malware and spyware [63, 39, 62], overly
curious libraries [25, 32], but also developer negli-
gence and absence of fail-safe defaults in the Android
SDK [33, 29]. To remedy this situation, the develop-
ment of new ways to protect the end-users’ privacy
has been an active topic of Android security research
during the last years.
Status quo of deploying Android security ex-
tensions. From a deployment perspective, the pro-
posed solutions followed two major directions: The
majority of the solutions [26, 44, 45, 16, 21, 64, 52, 56]
extended the UID-centered security architecture of
Android.
In contrast, a number of solutions [38,
59, 23, 49, 22, 15] promote inlined reference moni-
toring (IRM) [28] as an alternative approach that
integrates security policy enforcement directly into
Android’s application layer, i.e., the apps’ code.
However, this dichotomy is unsatisfactory for end-
users: While OS security extensions provide stronger
security guarantees and are preferable in the long run,
they require extensive modiﬁcations to the operating
system and Android application framework. Since
the proposed solutions are rarely adopted [54, 53] by
Google or the device vendors, users have to resort to
customized aftermarket ﬁrmware [4, 6] if they wish
to deploy new security extensions on their devices.
However, installing a ﬁrmware forms a technological
barrier for most users. In addition, fragmentation of
the Android ecosystem [46] and vendor customiza-
tions impede the provisioning of custom-built ROMs
for all possible device conﬁgurations in the wild.
In contrast, solutions that rely on inlined reference
monitoring avoid this deployment problem by mov-
ing the reference monitor to the application layer
and allowing users to install security extensions in
the form of apps. However, the currently available
solutions provide only insuﬃcient app sandboxing
functionality [36] as the reference monitor and the
untrusted application share the same process space.
Hence, they lack the strong isolation that would
ensure tamper-protection and non-bypassability of
the reference monitor. Moreover, inlining reference
monitors requires modiﬁcation and hence re-signing
of applications, which violates Android’s signature-
based same-origin model and puts these solutions
into a legal gray area.
The sweet spot. The envisioned app sandboxing
solution provides immediate strong privacy protec-
tion against rogue applications. It would combine the
security guarantees of OS security extensions with
the deployability of IRM solutions, while simultane-
ously avoiding their respective drawbacks. Eﬀectively,
USENIX Association  
24th USENIX Security Symposium  691
such a solution would provide an OS-isolated refer-
ence monitor that can be deployed entirely as an
app on stock Android without modiﬁcations to the
ﬁrmware or code of the monitored applications.
Our contributions.
In this paper we present a
novel concept for Android app sandboxing based on
app virtualization, which provides tamper-protected
reference monitoring without ﬁrmware alterations,
root privileges or modiﬁcations of apps. The key idea
of our approach is to encapsulate untrusted apps in a
restricted execution environment within the context
of another, trusted sandbox application. To establish
a restricted execution environment, we leverage An-
droid’s “isolated process” feature, which allows apps
to totally de-privilege selected components—a fea-
ture that has so far received little attention beyond
the web browser. By loading untrusted apps into a
de-privileged, isolated process, we shift the problem
of sandboxing the untrusted apps from revoking their
privileges to granting their I/O operations whenever
the policy explicitly allows them. The I/O opera-
tions in question are syscalls (to access the ﬁle system,
network sockets, bluetooth, and other low-level re-
sources) and the Binder IPC kernel module (to access
the application framework). We introduce a novel
app virtualization environment that proxies all syscall
and Binder channels of isolated apps. By intercepting
any interaction between the app and the system (i.e.,
kernel and app framework), our solution is able to en-
force established and new privacy-protecting policies.
Additionally, it is carefully crafted to be transparent
to the encapsulated app in order to keep the app
agnostic about the sandbox and retain compatibility
to the regular Android execution environment. By
executing the untrusted code as a de-privileged pro-
cess with a UID that diﬀers from the sandbox app’s
UID, the kernel securely and automatically isolates
at process-level the reference monitor implemented
by the sandbox app from the untrusted processes.
Technically, we build on techniques that were found
successful in related work (e.g., libc hooking [59])
while introducing new techniques such as Binder IPC
redirection through ServiceManager hooking. We re-
alize our concept as a regular app called Boxify that
can be deployed on stock Android. To the best of our
knowledge, Boxify is the ﬁrst solution to introduce
application virtualization to stock Android.
In summary, we make the following contributions:
1. We present a novel concept for application virtual-
ization on Android that leverages the security pro-
vided by isolated processes to securely encapsulate
untrusted apps in a completely de-privileged exe-
cution environment within the context of a regular
Android app. To retain compatibility of isolated
apps with the standard Android app runtime, we
solved the key technical challenge of designing and
implementing an eﬃcient app virtualization layer.
2. We realize our concept as an app called Boxify,
which is the ﬁrst solution that ports app virtual-
ization to the Android OS. Boxify is deployable
as a regular app on stock Android (no ﬁrmware
modiﬁcation and no root privileges required) and
avoids the need to modify sandboxed apps.
3. We systematically evaluate the eﬃcacy and eﬃ-
ciency of Boxify from diﬀerent angles including
its security guarantees, diﬀerent use-cases, perfor-
mance penalty, and Android API version depen-
dence across multiple Android OS versions.
The remainder of this paper is structured as follows.
In §2, we provide necessary technical background
information on Android. We deﬁne our objectives
and discuss related work in §3. In §4, we present our
Boxify design and implementation, which we evaluate
in §5. We conclude the paper in §6.
2 Background on Android OS
Android OS is an open-source software stack (see Fig-
ure 1) for mobile devices consisting of a Linux ker-
nel, the Android application framework, and system
apps. The application framework together with the
pre-installed system apps implement the Android
application API. The software stack can be extended
with third-party apps, e.g., from Google Play.
Android Security Model. On Android, each ap-
plication runs in a separate, simple sandboxed envi-
ronment that isolates data and code execution from
other apps. In contrast to traditional desktop operat-
ing systems where applications run with the privileges
of the invoking user, Android assigns a unique Linux
user ID (UID) to every application at installation
time. Based on this UID, the components of the
Android software stack enforce access control rules
that govern the app sandboxing. To understand the
placement of the enforcement points, one has to con-
sider how an app can interact with other apps (and
processes) in the system:
Like any other Linux process, an app process uses
syscalls to the Linux kernel to access low-level re-
sources, such as ﬁles. The kernel enforces discre-
tionary access control (DAC) on such syscalls based
on the UID of the application process. For instance,
each application has a private directory that is not
accessible by other applications and DAC ensures
692  24th USENIX Security Symposium 
USENIX Association
Application Framework
Service / System App
(Platform Permissions)
App (UIDApp)
Components
Native Libs
Binder IPC
Syscall
Binder IPC Module
Linux Kernel
Syscall API
(DAC + MAC)
Figure 1: High-level view of interaction between apps,
application framework, and Linux kernel on Android.
that applications cannot access other apps’ private
directories. Since Android version 4.3 this discre-
tionary access control is complemented with SELinux
mandatory access control (MAC) to harden the sys-
tem against low-level privilege escalation attacks and
to reinforce this UID-based compartmentalization.
The primary channel for inter-application com-
munication is Binder Inter-Process Communica-
tion (IPC). It is the fundamental building block for
a number of more abstract inter-app communica-
tion protocols, most importantly Inter-Component
Communication (ICC) [27] among apps and the ap-
plication framework. For sandboxing applications at
the ICC level, each application UID is associated with
a set of platform permissions, which are checked at
runtime by reference monitors in the system services
and system apps that constitute the app framework
(e.g. LocationService). These reference monitors
rely on the Binder kernel module to provide the UID
of IPC senders to the IPC receivers.
In general, both enforcement points are imple-
mented callee-sided in the framework and kernel,
and hence agnostic to the exact call-site within the
app process. This means that enforcement applies
equally to all code executing in a process under the
app’s UID, i.e., to both Java and native code.
Additionally, Android veriﬁes the integrity of ap-
plication packages during installation based on their
developer signature. The corresponding developer
certiﬁcate is afterwards used to enforce a same-origin
policy for application updates, i.e., newer app ver-
sions must be signed with the same signing key as
the already installed application.
Isolated Process. The Isolated Process, introduced
in Android version 4.1, is a security feature that has
received little attention so far. It allows an app de-
veloper to request that certain service components
within her app should run in a special process that
is isolated from the rest of the system and has no
permissions of its own [2]. The isolated process mech-
anism follows the concept of privilege separation [48],
which allows parts of an application to run at dif-
ferent levels of privilege. It is intended to provide
an additional layer of protection around code that
processes content from untrusted sources and is likely
to have security holes. Currently, this feature is pri-
marily geared towards web browsers [35] and is most
prominently used in the Chrome browser to contain
the impact of bugs in the complex rendering code.
An isolated process has far fewer privileges than a
regular app process. An isolated process runs under
a separate Linux user ID that is randomly assigned
on process startup and diﬀers from any existing UID.
Consequently, the isolated process has no access to
the private app directory of the application. More
precisely, the process’ ﬁlesystem interaction is lim-
ited to reading/writing world readable/writable ﬁles.
Moreover, the isolated process’ access to the An-
droid middleware is severely restricted. The isolated
process runs with no permissions, regardless of the
permissions declared in the manifest of the appli-
cation. More importantly, the isolated process is
forbidden to perform any of the core Android IPC
functions: Sending Intents, starting Activities, bind-
ing to Services or accessing Content Providers. Only
the core middleware services that are essential to
running the service component are accessible to the
isolated process. This eﬀectively bars the process
from any communication with other apps. The only
way to interact with the isolated process from other
application components is through the Service API
(binding and starting). Further, the transient UID of
an isolated process does not belong to any privileged
system groups and the kernel prevents the process
from using low-level device features such as network
communication, bluetooth or external storage. As
of Android v4.3, SELinux reinforces this isolation
through a dedicated process type. With all these
restrictions in place, code running in an isolated pro-
cess has only minimal access to the system, making
it the most restrictive runtime environment Android
has to oﬀer.
3 Requirements Analysis and Exist-
ing Solutions
We ﬁrst brieﬂy formulate our objectives (see §3.1)
and afterwards discuss corresponding related work
(see §3.2 and Table 1).
3.1 Objectives and Threat Model
In this paper, we aim to combine the security beneﬁts
of OS extensions with the deployability beneﬁts of
application layer solutions. We identify the following
objectives:
USENIX Association  
24th USENIX Security Symposium  693
O1 No ﬁrmware modiﬁcation: The
solution
does not rely on or require customized Android
ﬁrmware,
such as extensions to Android’s
middleware, kernel or the default conﬁguration
ﬁles (e.g., policy ﬁles), and is able to run on
stock Android versions. This also excludes
availability of root privileges, since root can only
be acquired through a ﬁrmware modiﬁcation
on newer Android versions due to increasingly
stringent SELinux policies.
O2 No app modiﬁcation: The solution does not
rely on or require any modiﬁcations of monitored
apps’ code, such as rewriting existing code.
O3 Robust reference monitor: The
solution
provides a robust reference monitor. This
encompasses:
1) the presence of a strong
security boundary, such as a process boundary,
between the reference monitor and untrusted
code; and 2) the monitor cannot be bypassed,
e.g., using a code representation that is not
monitored, such as native code.
O4 Secure isolation of untrusted code: This
objective encompasses fail-safe defaults and
complete mediation by the reference monitors.
The solution provides a reference monitor that
mediates all interaction between the untrusted
code and the Android system, or,
in case
no complete mediation can be established,
enforces fail-safe defaults that isolate the app
on non-mediated channels in order to prevent
untrusted code from escalating its privileges.
Threat model. We assume that the Android OS is
trusted, including the Linux kernel and the Android
application framework. This includes the assumption
that an application cannot compromise the integrity
of the kernel or application framework at runtime.
If the kernel or application framework were com-
promised, no security guarantees could be upheld.
Protecting the kernel and framework integrity is an
orthogonal research direction for which diﬀerent ap-
proaches already exist, such as trusted computing,
code hardening, or control ﬂow integrity.
Furthermore, we assume that untrusted third-party
applications have full control over their process and
the associated memory address space. Hence the
attacker can modify its app’s code at runtime, e.g.,
using native code or Java’s reﬂection interface.
3.2 Existing Solutions
We systematically analyze prior solutions on app
sandboxing.
Application Framework
Service / System App
Service / System App
(Platform Permissions)
App (UIDApp)
Components
Native Libs
Binder IPC
Syscall
Binder IPC Module
Linux Kernel
Syscall API
Syscall API
(DAC + MAC)
New Reference Monitor added
Figure 2: Instrumentation points for operating sys-
tem security extensions.
p
p