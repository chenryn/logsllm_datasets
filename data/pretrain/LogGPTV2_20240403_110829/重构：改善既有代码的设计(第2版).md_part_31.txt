title: ${aPhoto.title}`
title: ${p.title}`
同时我会记得调整函数参数的命名，使之与我的编程风格保持一致,
最后，再对新提炼的函数应用函数改名（124），就大功告成了。
date:
替换完emitPhotoData函数的所有调用点后，我紧接着应用内联函数（115）
${aPhoto.date.toDateString()},
`${person.name}^);
$3aPhoto
location}`
---
## Page 287
至是多个不同的关注点。
界偏移意味着曾经视为一个整体、
进），原先设定的抽象边界总会悄无声息地发生偏移。对于函数来说，这样的边
抽象的边界。
象能力的源泉正是来自函数。
动机
function emitPhotoData(outStream,
outStream.write(^location: ${person.photo.location}\n`);
emitPhotoData(outStream, 
function emitPhotoData(outStream, photo){
emitPhotoData(outStream, person.photo);
8.4搬移语句到调用者（Move Statements to Callers）
outstream.write()
作为程序员，
反向重构：搬移语句到函数（213）
。随着系统能力发生演进（通常只要是有用的系统，
title: ${photo.title}\n`);
，我们的职责就是设计出结构一致、
 person.photo);
 与其他抽象机制的设计一样，我们并非总能平衡好
一个单元的行为，如今可能已经分化出两个甚
、抽象合宜的程序，
功能都会演
 而程序抽
---
## Page 288
·对提炼出来的函数应用改变函数声明（124），令其与原函数使用同一个名
·对原函数应用内联函数（115），
·最简单的情况下，
函数来，以形成更合适的边界。
办法是先用内联函数（115）合并双方的内容，调整语句的顺序，再提炼出新的
者之间的边界已经相去甚远，此时便只能重新进行设计了
只要差异代码被搬移到调用点，我就可以根据需要对其进行修改。
现不同的行为调整到函数的开头或结尾,
出，并搬移到其调用处。这种情况下，我会使用移动语句（223）手法，先将表
某些调用点面前表现出不同的行为。于是，我们得把表现不同的行为从函数里挪
 outstream.write(
范例
相同的提炼函数。接着将子类的提炼函数删除，让它们引用超类提炼出来的函
子类的覆写方法进行同样的提炼操作，保证继承体系上每个类都有一份与超类
做法
字。
成一
若调用点不止一两个，则需要先用提炼函数（106）将你不想搬移的代码提炼
整。运行测试。如果测试通过，那就大功告成，本手法可以到此为止。
要搬移的代码从函数里剪切出来并粘贴回调用端去即可，必要的时候做些调
下面这个例子比较简单：emitPhotoData是一个函数，在两处地方被调用。
如果你能想到更好的名字，那就用更好的那个。
这个重构手法比较适合处理边界仅有些许偏移的场景，
函数边界发生偏移的一个征兆是，
如果原函数是一个超类方法，并且有子类进行了覆写，
一个新函数，函数名可以临时起一个，只要后续容易搜索即可。
${person.name}
原函数非常简单，
其调用者也只有寥寥一两个，
以往在多个地方共用的行为，
，再使用本手法将语句搬移到其调用点。
若果真如此，最好的
但有时调用点和调用
，那么还需要对所有
此时只需把
如今需要在
---
## Page 289
function renderPerson(outStream,
函数里的语句先提炼出去。
下运作，这里我还是遵从更详细也更安全的步骤。
行，我要应用本手法，将emitPhotoData函数最后的那行代码搬移到其调用端。
location信息，而renderPerson的行为则保持不变。
function zztmp(outStream, photo） {
function
function listRecentPhotos(outStream, photos） {
function emitPhotoData(outStream, 
function listRecentPhotos(outStream, photos） {
outstream
photos
emitPhotoData(outStream, person.photo);
:(u>{uotaeo01 0zoyd}s :u0taeo0t. )antm wea1as1no
outStream.write(
outstream
photos
 emitPhotoData(outStream, person.photo);
rende
:({
.filter(p => p.date > recentDatecutoff())
 我需要修改软件，支持listRecentPhotos函数以不同方式渲染相片的
:({
.forEach(p =>
.filter(p => p.date > recentDatecutoff())
新提炼出来的函数一般只会短暂存在，因此我在命名上不需要太认真，不
outStream.write("\n");
重构的第一步是先用提炼函数（106），将那些最终希望留在emitPhotoData
一般来说，
outStream.write("\n");
 emitPhotoData(outStream，photo）{
write(
像这样简单的场景，
 person.photo);
${photo.title}\n`);
p
person）
photo）{
我都会直接将emitPhotoData的最后一行剪切
为了使这次修改更容易进
---
## Page 290
function renderPerson(outStream,
一个调用点。
function renderPerson(outstream, 
renderPerson函数开始。
function zztmp(outStream，photo）{
function emitPhotoData(outStream, photo） {
function listRecentPhotos(outStream, photos） {
function zztmp(outstream, photo) {
function emitPhotoData(outStream, photo） {
function listRecentPhotos(outStream, photos)
的新函数能正常工作。
过，
photos
 outstream.write(^location: ${person.photo.location}\n`);
renderPhoto(outstream,
outstream.
 outStream.write(^date: ${photo.date.toDateString()}\n`);
photos
 outStream.write(^location: ${person.photo.location}\n`);
({
.forEach(p
:(
.filter(p => p.date > recentDatecutoff())
 取个容易搜索的名字会很有帮助。提炼完成后运行一下测试，确保提炼出来
然后再次运行测试，确保这次函数内联能正常工作。测试通过后，再前往下
接下来，
zztmp(outstream, 
outStream.write("\n"); 
.write(
write(
，我要对emitPhotoData的调用点逐一应用内联函数（115）。先从
=>
person.photo)
p);
 person.photo);
${photo.title}\n`）;
 person）{
person）
人
---
## Page 291
function emitPhotoData(outStream, photo)
function listRecentPhotos(outStream, photos） {
function renderPerson(outstream,
function zztmp(outstream, 
t
function emitPhotoData(outStream, photo) {
function renderPerson(outstream,
法
outStream.write( date: ${photo.date.toDateString()}\n);
photos
outStream.write(
renderPhoto(outStream,
outstream.write(
outstream.write(^date: 
 outstream.write()
outStream.write(location: $[photo.location}\n);
zztmp(outstream, 
photos
outStream.write(^location: ${person.photo.location}\n`);
:({
.forEach(p =>
.filter(p => p.date > recentDatecutoff())
.filter(p => p.date > recentDateCutoff())
至此，我就可以移除外面的emitPhotoData函数，完成内联函数（115）手
最后，我将zztmp改名为原函数的名字emitPhotoData，
emitPhotoData(outStream,
 outStream.write("\n");
outstream
write(
write(
title:
photo);
${person.
 person.photo)
p);
location: ${p.location}\n`);
person.photo);
 person.photo);
photo）{
:( u>()butsazeaon'anep:oroudys. 
${photo.title}\n`);
p)
person）
person）
人
完成本次重构。
---
## Page 292
函数名显得不协调，
代码做了一样的事，
真正重复，从函数名往往可以看出端倪：如果一个函数命名得当，
实现时，并不期望对应内联代码的行为发生改变。判断内联代码与函数之间是
与函数之间只是外表相似但其实并无本质联系时。这种情况下，当我改变了函数
寻找相似代码。）
是否都应该使用新的实现，
有没有漏改的相似代码。（当然，我可能需要检查函数的所有调用点，判断它们
调用一下函数即可。此外，
解其细节。
益一
appliesToMass = states.includes("MA");
以一人
动机
with Function Call)
8.5
 善用函数可以帮助我将相关的行为打包起来，这对于提升代码的表达力大有
个函数调用取代内联代码。
如果我见到一些内联代码，
以函数调用取代内联代码（Replace Inline Code
-一个命名良好的函数，本身就能极好地解释代码的用途，使读者不必了
函数同样有助于消除重复，
 可能是因为命名本身就比较糟糕（此时可以运用函数改名
那么这个名字用在内联代码的语境里也应该十分协调；如果
，但通常很少需要这么仔细，即便需要，也总好过四处
，当我需要修改函数的内部实现时，也不需要四处寻找
、但有一种情况需要特殊对待，那就是当内联代码
它们做的事情仅仅是已有函数的重复，
因为同一段代码我不需要编写两次，每次
({}
也确实与内联
，我通常会
否
---
## Page 293
·测试。
·将内联代码替代为对一个既有函数的调用。
都不需要自己编写了，库已经提供了相应的函数。
是后者的情况，我就不应该用函数调用取代该内联代码。
做法
（124）来解决），
我发现，
，配合一些库函数使用，
 也可能是因为函数与内联代码彼此的用途确实有所不同。若
会使本手法效果更佳，因为我甚至连函数体
---
## Page 294
就没有彼此在一起，那么我也很难应用提炼函数（106）的手法。
顶部一口气声明函数用到的所有变量，我个人则喜欢在第一次需要使用变量的地
来。此外还有一种常见的“关联”，
结构的代码中间。最简单的情况下，我只需使用移动语句就可以让它们聚集起
了同一个数据结构，
const pricingPlan = retrievePricingPlan();
const chargePerunit = pricingPlan.unit;
Fragments）
它们提炼到独立的函数往往能起到更好的抽象效果。但如果起先存在关联的代码
（106））开始之前的准备工作。相比于仅仅把几行相关的代码移动到一起，将
方再声明它。
动机
let charge;
const
const chargePerUnit
const order = retreiveorder(); 
const pricingPlan = retrievePricingPlan();
let
8.6移动语句（Slide Statements）
通常来说，
charge;
曾用名：合并重复的代码片段（Consolidate Duplicate Conditional
让存在关联的东西一起出现，
 retreiveorder();
，把相关代码搜集到一处，
= pricingPlan.unit; 
 那么最好是让它们在一起出现，而不是夹杂在取用其他数据
就是关于变量的声明和使用。有人喜欢在函数
可以使代码更容易理解。
一
 往往是另一项重构（通常是在提炼函数
如果有几行代码取用
---
## Page 295
产生干扰，甚至于改变程序的可观测行为？
我得思考这个问题：如果我把代码移动过去，执行次序的不同会不会使代码之间
能否做到的问题。
便做函数提炼。
一项重构，比如在应用提炼函数（106）之前先将相关的代码集中到一块，以方
移动到靠近它们的使用处。不过大多数时候，我移动代码的动机都是因为想做另
望元素的声明点和使用点互相靠近，因此移动语句的目标便是将元素的声明语句
目标能否达到。第一件事通常取决于代码所在的上下文。最简单的情况是，我希
么是一次搬移更少的代码。
·确定待移动的代码片段应该被搬往何处。
范例
·测试。
1 const pricingPlan = retrievePricingPlan();
正
如果片段中修改了某些元素，则不允许移动到任何引用了这些元素的语句之
的声明语句之前。往后移动代码片段时，如果有语句引用了待移动片段中的变
做法
剪切源代码片段，粘贴到上一步选定的位置上。
移动片段中引用的变量，则不允许移动到该语句之后。往后移动代码片段时
语句，看看搬移后是否会影响这些代码正常工作。如果会，则放弃这项重构。
const
如果测试失败，那么尝试减小移动的步子：要么是减少上下移动的行数，要
。
请观察以下代码片段:
确定要把代码移动到哪里之后，
移动代码片段时，
往前移动代码片段时，如果片段中声明了变量，
。为此我需要观察待移动的代码，
通常需要想清楚两件事：本次调整的目标是什么，以及该
，往后移动代码片段时，
 我就需要思考第二个问题，
仔细检查待移动片段与目的地之间的
，以及移动中间经过的代码段，
 则不允许移动到任何变量
，如果有语句修改了待
，也就是此次搬移