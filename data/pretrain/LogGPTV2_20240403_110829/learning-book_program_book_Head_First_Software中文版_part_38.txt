ptivete Stting dtinkOesesiption,
定量的方法。
ptisate int giftCandNamfet;
ptisate int pefenefStoseNumdet,
pullic woid setCustomenNeme(Stsing name) (
ckstomesfName  nume;
putic oid setDrinkDesesiption(Sening desc) (
dhinkDesetiptiox = desc,
pablic void serGifteCanuNomben(int geNam)(
siltCandNombet  geNam;
palic soid setPefeedStoneflumer(int nam) {
有什么事情是你在这置不用效，但还
ptefenedStoteNzmbet = nem,
是能通过测试的吗：
pefie Ssins setCstomenfNlemeO (
tetetn castometName;
OrderJntormation
pabic Stning setDtinkDesetiptiox( {
cstomnNameStning
tetasn atinkDesesiption,
dtixkDesctiption.Stning
siftCandNumfes : int
paflic int serGieCendNasmben() (
pteleredStoseNsmbet : int
tetats giftCanfNumfet;
+setCastomerflame(name : Sttins)
putlic int getPvelemedStoteNuomdenO) (
+setDtinkDeseniptios(desc :Sttixs)
tetatn ptefemedStonefNamfet,
+setGiftCanNumer(gcNam : int)
+setPsefenedStotNomber(nam
+geeCustomeNameOStning
：（st)
+ serDrinkOesctiption).Stsing
+getGiitCaaNombe).int
+ setPseletedStoeNumbeO: ixt
目前位置
285
---
## Page 322
用TDD驱动你的代码
在TDD中，以测试驱动实施
现在，你已经得到了一个可工作和测试的OrderInformation类。井且，因为最
后一个测试的关系，你还完成了可以工作的存取器（seuer和getter），事实上，你
放入类中的东西完全被你的测试所驱动。
测试驱动开发与测试优先开发是不同的，测试驱动开发在你开发的全过程驱动着你
的实施。在应用程序的代码之前，通过编写测试程序，你必须立刻集中于系统的功
能性。即将实施的程序代码究竞应该微到什么事情？
为了有助于测试的可管理和有效，有几个好的习惯你应该养成：
每项测试应慎仅检验一件事
为了保持测试简单直接并集中于你需要实施的事情，试着使每项测
试只测试一件事情。在Starbuzz系统中，每项测试是我们测试类中
的方法。因此，testCreateOrderInformation（）是只测试一件
事情的例子：它的全部工作是测试一个新的订单对象的创建。下一
个测试，虽然测试多个方法，但仍然只测试一个功能片段：即订单
保存了正确的信息在里面。
2
避免重复的测试代码
你应该避免重复的测试代码，正如你要避免重复的产品代码一样。
有些测试方案具有建立（setup）和卸载（teardown）方法，这两种
组如你常要一个数辅
方法让你把所有测试共有的代码合并在一起，你应该自如地利用这
进接，你可以在ontp(
水法中建立
将且在
些方法。你可能还要模拟测试对象——在本章中以后的内容中，我
t水湛中释设
们将做深人地探讨。
铸别试保留在你源代码的镜像D录中
一且你在项目中开始使用TDD，你会编写一大堆测试程序。为
了有助于你组织好事情，将测试保留在与源代码同级别的单独
的目录中（通常称为test/），并且用相同的目录结构。这有
言”（如Java）产生的问题，又能让你的测试案例与你的产品
代码分开。另外，这也会让构建文件比较简单，所有的测试
都处在同一地方。
286
8
---
## Page 323
测试驱动开发
没有愚蠢的问题
问：
我们做过的测试例子要我们
我们何时做设计？
为存取方法编写测试程序，我以为不
必测试那些东西
测试驱动开发的
测试存取方法并没有什么
宗旨是为特定的功
计(Evolutionary
design）一起使用。
注意，这并不意味着所有你想得到的
；只是效益不部么明显，存取方法
能创建测试程序，
代码，然而，神奇的是，最后你能得
的例子只是一个开头。在接下来的几
到设计良好的系统，得到良好设计的
页中要深入具有执战性的问题。
然后编写代码满足
至关重要的部分是TDD中的重构步骤。
问：
功能要求。
基本上讲，TDD努力防止过度设计系
在实施代码已使特定的测试
统。随着你把功能增加到系统中去，
通过时，我知道我必项写的下一个测
你将增加基融代码（Codebase）。过
试程序是什么，我能不能把该测试需
对你的软件系统来
了一段时间后，你会发现事情自然而
要的代码也增加进来？
讲，超过功能的任
然地缺乏组织，因此，在测试通过后，
重构产品代码，重新设计应用程序，
答：
不是，那样的语存在两个问
何事情都是不重要
应用何时的设计模式，无论需要多少
题，第一，
一旦开始增加你正试图通
的（现在）。
功夫。而且，所有的测试应该保持通
过的测试范图以外的东西，事情会变
过，并让你知通你没有并坏任何东西，
得派不明确，你可能认为你需要它。
但是，还是等到测试告诉你，不要自
己诱感自己，
实施某功能片段时又会怎样？
第二，可能更严重的问题是如果你尾
在对你正在编写的、下一个测试程序
增加代码，第二项测试可能不会失败，
你需要实现功能的每个类增加测试。
那表示你不如道它是否真地测试你想
如果你对每个类增加测试，你将增加
要测试的东西，你无法确定它会不会
测试、实施代码、再增加测试等、并
让你知道背后的代码是否被破坏。
且用红灯、绿灯和重构描环，构建你
写测试程序
接着为该测试实施代
的功能。
码,
通过为礼券和收据对象编写测试程序和实施，完成当
前Starbuzz任务中还剩余的工作。
我们把运个练习留下来给
你解…….要言你自己编
军测试程序了。
目前位置
287
---
## Page 324
测试通过，任务完成
完成任务就说明你做
了所需要的全部测试
并且都通过了
任务1
为了完成第一个任务，你需要测试被捕提和访问的信息，
搏提订单信息
如订单、礼券和收据信息。你应该为这三个项目创建对
礼券信鸟.及收
据信息。
象。以下显示我们如何实施每个对象
5
这里是由第一个任务户生
出来的类，所有的字设来
使用情节的能得提到的
Receipt
conditmationNumbet.int
pichapTime : Dete
OrletJxdommetion
scBelance , BigDecimal
ckstomtNamdSting
+ setConditmationNaomben(no : 
+setPickspTime(date:Dete)
int)
siftCandNmen : ist
+serGCBelance(bal:BigDecimel)
pefeneiStoeNambet . int
+getConditmatioxNomber)int
+setCastometNam(num:Stting)
+setPichupTime)：Date
+setDtinkDeseiptioa(desc , Stting)
+seCCBelance()，BigDecimet
+ setGifeCetNsmben(gcNzm : ixt)
+ setPvedeedStoeNsomber(nam , int)
+setCsstomenName) : Stning
 setDtinkDesesiptio. Sning
GiteCend
+ seGitCaNmee.ixt
+ setPefeeStoefumder . int
activetionDate ：Date
expisationDete :Dete
balance ,BigOecimal
+getExpitationDate,Date
+getActivatioxDate().Date
+：
setBalance():BigDecimal
+ setBalance(BigDecimal) :wpid
equals(object,Object)boolen
288
第8章
---
## Page 325
测试驱动开发
当测试通过时，继续前进！
第一项任务已完成，我们编写和测试了Receipt、Gift-
Card和OrderInformation类。现在，让我们把TDD方法应
用到更困难的任务上：实施处理和保存订单的业务逻辑。
标题：用礼券预江咖啡
描述：从级项中热绝得喜项的咖唯，输入件
的礼费量、名字和喜爱的士多店，单鲁提义
款得确认号，然券余额，以及预计准量时间。
优先级：
20
任务2
实施处理和保存
订单的业务还辑。
2
不同的任务，相同的过程
这项任务与上一任务没有什么不同。我们将只是遵循同样的
方法。编写失败的测试程序、实施使测试通过的代码、执行清
理，接着，再重复。
红灯：测试失败
隐灯：到试通址
3
生构：清理任何重复、难系、旧的代
目前位置
289
---
## Page 326
先失败
红灯：编写
（失败的）测试程序
第一步是编写测试程序。使用情节告诉我们需要处理和保存
的订单信息，因此，让我们假设为此需要一个新的类，称之为
OrderProcessor:
OdeProceso这个名称
温有什会搞别之延，它
import org.junit.*;
只是一个放医业务证
的地方，由于在应用程
public class TestOrderProcessor [
序中，唯一的、其他的
eTest
是是保存数排。
public void testCreateOrderProcessor()(
OrderProcessor orderProcessor = new OrderProcessor () :
it.jar
Sor-Java
mbol
正如我们期望的那样，这项测试将失
locati
nlann
headfirst.sd.c
一你还没有OrderProcessor类。
因此，你现在可以轻易地修正这个向
olanac
tfind
题
Locatl
class
这个别试程序基至不能
OrderProcessor()
被编译，犹别提能不能
绿灯：
编写通过测试的代码
为了让你的第一项测试通过，增加空的OrderProcessor类：
绿灯：测试能够端译料
通过.
public class OrderProcessor
就这样，再编译一次，重新测试一
次，你会回到绿灯。使用情节告诉
JUnit version 4.4
你需要处理和保存订单信息。你已
Time:0.018
经得到了表示订单信息的类（及收
OK(1 test）
据信息），因此，现在使用这些类
hfsd>
搭配你刚创建的OrderProcess-
or类。
290
第8章
---
## Page 327
测试驱动开发
红灯
下面是新的测试方法，实施一项测试，该测试能检验你的软
件能处理一张简单的订单。
// other tests
你必须将各个
public void testSiapleorder() (
Test
片设效在一起，
OrderProcessor orderProcessor
new OrderProcessor () ;
以基送行单.
··.弟
它得给行单处
理器，并确定
它能工作.
OtdeJd
利忘了来自上一个任务的类
Receipt
↓
atinkDesesiption
giftCanfNamfer
:Sering
GinCens
pedenedStouNumtes
int
pickuyTime . Dste
coxfirmationiomfet
exinsticxDate : Dete
setinetioxDete : Date
setCa:
Stnixg)
Deseniptien(desc:
Sring!
salasce BigOecimal
tdetlgcflam
tetConk
retfickugTime(date
ienflombes(no
Date)
(NI)
medStetet
setGCBalance(bal , BigDecimal)
+ setExpituti
tinDase(),Dace
Sping
getCordi
+ setBalance(): BigDecimat
getGtitCaNamsen)
1iRE
getPickapTime()
、 Date
setalence(BigOecimal)
+ eqaais(object,Object) , boola
:82i8
IR
目前位置
291