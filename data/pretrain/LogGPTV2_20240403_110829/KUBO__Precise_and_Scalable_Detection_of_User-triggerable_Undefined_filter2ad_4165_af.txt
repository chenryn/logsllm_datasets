### Precise and Scalable Detection of Undefined Behavior Bugs in OS Kernels

#### Introduction
The detection of integer overflows (IOs) at memory allocation sites is a well-studied problem, but existing approaches often struggle to scale to large programs like operating system (OS) kernels. This paper introduces KUBO, a static analysis framework designed to precisely and efficiently detect undefined behavior (UB) bugs in OS kernels, focusing on those triggered by userspace inputs.

#### Related Work

##### Integer Overflow Detection
Previous work on detecting IOs includes IntScope [35], IntFlow [29], IntEq [33], Osiris [34], and IntRepair [28]. These tools use various techniques to identify and mitigate IOs. For example:
- **IntScope [35]** and **IntFlow [29]** employ taint analysis to locate overflows influenced by untrusted input sources. They observe that harmful integer errors often stem from untrusted inputs and must affect sensitive functions such as `memcpy`.
- **Osiris [34]** targets IOs in smart contracts.
- **IntRepair [28]** aims to automatically detect and repair IOs through program rewriting.
- **IntEq [33]** formally defines benign IOs and achieves high accuracy in distinguishing them from harmful ones.

While these tools are effective for small to medium-sized user-space programs, they face challenges when scaling to large codebases like the Linux kernel. Specifically, they often require the overflowed value to flow into a critical sink, which may be far from the UB instruction, leading to false negatives.

KUBO differs from these works in several key ways:
1. **Input Source Distinction**: Prior works [29] use a flow-based method with coarse-grained data-flow analysis. In contrast, KUBO strictly distinguishes userspace input from under-constrained memory and asserts that only UBs solely affected by userspace input are considered true bugs. For other cases, KUBO uses BTI (Branch Target Identification) to model the likelihood of UBs.
2. **Scope of Analysis**: The observation in [35], [29], and [33] that only overflows affecting sensitive functions are meaningful may hold for user-space code. However, in the kernel, any unintended undefined behavior or wrap-around is critical due to the compactness of integer semantics. Thus, KUBO does not limit its scope to predefined sensitive functions.
3. **Scalability**: Previous benchmarks used in these works are generally small to medium-sized user-space programs, indicating potential scalability issues for large codebases like the kernel. As noted in IntRepair [28], even more complex and large real-world programs would likely report false positives.

##### Symbolic Execution for Bug Finding
Symbolic execution, often combined with SMT solvers [16], has been widely used for bug detection [19], [12], [30], [26], [14], [11]. Works like STACK and KINT have made significant progress in analyzing large codebases, but there is always a trade-off between scalability and precision. Tools like UCKLEE and KINT improve scalability by performing symbolic execution on partial program paths starting from certain interesting functions within the kernel, but this approach can lead to high false detection rates.

KUBO also uses symbolic execution and path constraint solving, but it focuses on each instrumented bug and analyzes its triggerability via an efficient backward inter-procedural analysis. This analysis scales to the entire kernel and combats path explosion by actively pruning potential UBs that are not triggerable by userspace input.

##### Non-UB Bug Detection in Kernel
- **KMiner [20]**: A static analysis tool for detecting memory corruption bugs in the Linux kernel using value flow analysis.
- **PEX [42]**: Generates a whole-kernel call graph and uses static call chain analysis to detect privilege checking errors.
- **APISan [41]** and **Unisan [25]**: Aim to find API misuse but suffer from high false detection rates, especially for integer overflows, due to the inability to track API parameter flows.

Unlike these tools, KUBO uses a scalable and efficient inter-procedural analysis focused on detecting critical UBs that can be triggered by userspace inputs.

#### Conclusion
KUBO is a precise and scalable static analysis framework for detecting undefined behavior bugs in OS kernels. By using a novel inter-procedural analysis that tracks data and control dependencies across function calls, KUBO can produce highly accurate results. It reduces the number of paths to analyze by focusing only on those directly affected by userspace inputs and employing on-demand, incremental call chain analysis. KUBO also tracks post-bug triggering paths to filter out UBs that have been handled and do not pose security implications. KUBO can analyze 27.8 million lines of code in the latest Linux kernel in under 33 hours, finding 23 UBs, including 17 critical ones, 14 of which were quickly accepted or patched.

#### Acknowledgments
The authors thank the anonymous reviewers for their insightful comments and Meng Xu for releasing the DEADLINE source code and providing consultation during the development of the KUBO prototype. This project was supported by the National Science Foundation (Grant#: CNS-1748334) and the Office of Naval Research (Grant#: N00014-18-1-2660). Any opinions, findings, and conclusions or recommendations expressed in this paper are those of the authors and do not necessarily reflect the views of the funding agencies.

#### References
[References listed as provided in the original text]

This revised version aims to provide a clear, coherent, and professional presentation of the research and its contributions.