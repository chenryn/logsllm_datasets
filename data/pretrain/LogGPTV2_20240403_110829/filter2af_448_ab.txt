zuh3vcyskd4gipkm.onion/bin32/update.php  
tljmmy4vmkqbdof4.onion/bin32/update.php
这两种方式的请求都是通过ssl协议进行的。请求完成后，恶意代码解析相应数据并且提取出控制命令和控制参数信息。其实现的远程控制命令和控制参数信息如下：
从该后门实现的远程控制功能我们可以推测该黑客的动机：
(1)和其他后门一样，黑客希望能够通过远程shell命令对设备进行完全的控制。  
(2)黑客可以在一定时机对这些设备进行破坏性操作，使其无法再次使用。  
(3)为了隐藏其可疑的控制流量，采用socks5和Tor逃避IDS监测。  
(4)可以灵活的配置其在Tor网络中的C&C服务器以及代理服务器  
(5)能提供扩展模块的下载与执行的操作。  
(6)可灵活配置连接C&C的频率，提高其活动的隐蔽性。
此外，该阶段的最新恶意代码有较大的变化，不仅对代码做了优化、去除了日志信息，还改变了部分控制命令的功能，比如kill命令用于结束进程及清理其下载的插件，新增加了update命令和restart命令。不言而喻，update命令用于更新样本，restart命令用于重启样本执行。同时移除了seturl、proxy命令。
##### 第三阶段：扩展组件
第三阶段目前已经发现大量的组件，其中包含一个为MIPS平台的流量嗅探器、一个用于破坏设备的dstr模块、一个用于进行广泛HTTP流量嗅探和监控的ssler模块，还有一些辅助性模块如：Tor
client、mikrotik.o、torrc、ip_tables.ko、iptable_filter.ko、iptable_nat.ko等。辅助性模块如Tor客户端用于支持第二阶段的Tor网络通信。Tor工程提示：
由于其为标准的Tor客户端，不具备恶意功能，因此我们仅仅分析核心的三个模块。
1、MIPS平台的TCP流量嗅探模块
该模块为MIPS平台，其主要通过从原始数据包中过滤出TCP/IP数据包，并且通过对TCP的payload数据进行过滤，检索其中的敏感信息存储起来。
该流量嗅探模块通过第二阶段恶意代码远程下载并启动执行，其启动运行参数如下：
{模块名} DstDir Unkownagr ModbusServer
其中第一个参数为嗅探数据的存放路径，第二个参数未使用，第三个参数为modbus server的IP地址。
该模块启动后并没有做过多额外的工作，初始化环境后直接调用流量截取函数进行流量嗅探。
同样二进制程序中不带任何符号文件，函数由我们分析完后进行了重命名。该函数主要创建一个原始socket并且接收当前设备所通过的原始数据流。
接下来恶意代码会根据TCP/IP头部格式识别出TCP数据包以进行进一步的处理。
首先该模块只关心数据包长度大于0x96个字节的原始流数据，也就是说除去TCP/IP协议头部的长度的0x36个字节，该模块仅仅监视大于0x60个字节的TCP
payload数据。
对于TCP payload数据大于0x60个字节的数据包，该模块会解析IP、TCP协议，并且通过目的端口502判定当前流量数据是否是工控的modbus
TCP协议包，如果是，且当前数据包的目的IP为运行参数中指定的IP地址，该模块便会将该数据包中的源IP、目的IP、源端口、目的端口记录下来。
其中记录的信息格式如下：
_modbus_
源IP:源端口->目的IP:目的端口(如：192.168.1.5:2243->192.168.1.3:503)
该信息记录在文件`%workdir%/rep_[time].bin`。
如果当前协议不是modbus协议，该模块会根据已有的规则进行过滤，找出其关心的两类数据：一种为携带有验证信息HTTP数据包，一种是携带有登录信息的HTTP请求数据。其中提取验证数据的关键字为"Authorization:
Basic”，一旦找到该信息，该模块会将当前嗅探到的数据包直接记录到文件`%workdir%/rep_[%time%].bin`中。
提取登录信息的关键字如下：
用户名关键字："User="、"user="、"Name="、"name="、"Usr="、"usr="、"Login="、"login="
登录密码关键字："Pass="、"pass="、"Password="、"password="、"Passwd="、"passwd="
此外要说明的是，数据包中只要满足如下条件，该模块便会丢弃：
(1)数据包的目的IP为模块运行参数所指定的IP。  
(2)数据包的源端口小于1024。  
(3)数据包的源端口为8080/8088。  
(4)TCP payload数据长度小于0x14。  
(5)TCP Payload数据包中包含有`""、"Basic Og=="、"/tmUnblock.cgi"、"Password
required"、"<div”、"<form"、"<input"、"{"、"}"、"200 OK"、".get"、"<span "、"<SPAN
"、"<DIV "`等。
2、ssler HTTP嗅探与监控模块
该模块主要针对HTTP层实施更加丰富和强大的处理，其提供有HTTP流量重定向、HTTP流量监控与截取、流量劫持与篡改、定向注入JS以进行精准攻击等功能。其由第二阶段的恶意模块启动运行，运行参数说明如下：
首先该模块会使用insmod命令安装三个iptable相关的内核模块 (ip_tables.ko、iptable_filter.ko、
iptable_nat.ko)，通过这三个模块，恶意代码可以将自己的规则配置到iptable中去 。
接下来执行如下命令将所有80端口的流量重定向到其所监听的8888端口上：
    iptables -I INPUT -p tcp --dport 8888 -j ACCEPT
    iptables -t nat -I PREROUTING -p tcp --dport 80 -j REDIRECT --to-port 8888
为了保证该规则不会被删除，该模块会每隔5分钟更新一次该规则。
该模块会关注所有80端口上的数据，包括流向服务器端和流向客户端的数据。在处理流向服务器端的数据时，为了最大化的监控到敏感数据，其会对HTTP请求的数据进行一定篡改。在处理流向客户端的响应数据时，同样会对数据进行篡改并且根据启动参数的指定来对特定目标实施精准的JS注入，入侵到具体客户端主机上，也可以是内网的办公主机上。
（1）对请求数据的处理
首先，该模块为了能够最大限度的监控到流量，其会将所有请求数据的`"https://"`篡改为`"http://"`。为了确保HTTP传输的数据都为可处理数据，会修改”Accept-Encoding”的值，以及修改Connection的方式，具体处理方式如下：
i.将请求数据中的所有https篡改为http，以方便监控并窃取敏感信息，如登录凭证等。
ii.如果HTTP请求中包含有”Connection: keep-alive”，将会被替换为”Connection: close”。
iii.如果HTTP请求中,HTTP头中包含有gzip值的”Accept-Encoding”头部域(排除url为jpg、jpeg、png、gif、css、js、ttf、woff文件)，其将会转化为”Accept-Encoding:
plaintext/none”，这样请求得到的数据便不会被服务器端压缩。
随后，该组件可对截取的流量进行过滤并将相关数据保存到设备中。首先如果`“dump:domain”`参数被指定，http请求的url、port、http
header都会保存在指定的文件中。如果在dump参数中没有指定具体值(domain字符串为空)或者dump参数没有指定时，其会dump包含有特定信息http请求信息。其通过URL来判定当前请求是否是其关心的请求，如果URL中包含有关键字：
“sername=”、“ser=”、“ame=”、“ogin=”、“ail=”、“hone=”、“session%5Busername”、“session%5Bpassword”、“session[password”
便会dump请求的头部信息到指定的文件中。
另外，对accounts.google.com发送的POST请求，只要其中包含有字符串“signin”,都会被dump下来。
（2）对响应信息的处理
所有HTTP请求得到的响应数据都会被处理，其处理方式如下：