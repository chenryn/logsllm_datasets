URL location as long as it remains being the ten-
ant. (When the window is navigated to a different
principal, the old tenant will no longer be associated
with the window and will not be able to access the
window’s state.)
Table 1 summarizes the access control policies in the
browser kernel. In existing browsers, these manipulation
policies also vaguely exist. However, their logic is inter-
mingled with the DOM logic and is implemented at the
object property and method level of a number of DOM
objects which all reside in the same protection domain
despite their origins. This had led to numerous vulnera-
bilities [18, 44]. In Gazelle, by separating these security
policies from the DOM semantics and implementation,
and concentrating them inside the browser kernel we
achieve more clarity in our policies and much stronger
robustness of our system construction.
The browser kernel ensures that principal instances
other than the landlord and the tenant cannot manipu-
late any of the window states. This includes manipulat-
ing the URL location for navigation. Here, we depart
from the existing descendant navigation policy in most
of today’s browsers [7, 8]. Descendant navigation pol-
icy allows a landlord to navigate a window created by
its tenant even if the landlord and the tenant are different
principals. This is ﬂawed in that a tenant-created window
is a resource that belongs to the tenant and should not be
controllable by a different principal.
Existing literature [7, 8] supports the descendant navi-
gation policy with the following argument: since exist-
ing browsers allow the landlord to draw over the ten-
ant, a landlord can simulate the descendant navigation by
overdrawing. Though overdrawing can visually simulate
navigation, navigation is much more powerful than over-
drawing because a landlord with such descendant nav-
igation capability can interfere with the tenant’s opera-
tions. For example, a tenant may have a script interact-
ing with one of its windows and then effecting changes
to the tenant’s backend; navigating the tenant’s window
requires just one line of JavaScript and could effect un-
desirable changes in the tenant’s backend. With over-
drawing, a landlord can imitate a tenant’s content, but the
landlord cannot send messages to the tenant’s backend in
the name of the tenant.
5.2 Cross-Principal Events Protection
The browser kernel captures all events in the system
and must accurately dispatch them to the right princi-
pal instance to achieve cross-principal event protection.
Networking and persistent-state events are easy to dis-
patch. However, user interface events pose interesting
challenges to the browser kernel in discerning event own-
ership, especially when dealing with overlapping, poten-
tially transparent cross-origin windows: major browsers
allow web pages to mix content from different origins
along the z-axis where content can be occluded, either
partially or completely, by cross-origin content. In addi-
tion, current standards allow web pages to make a frame
or portions of their windows transparent, further blur-
ring the lines between principals. Although these ﬂexible
mechanisms have a slew of legitimate uses, they can be
used to fool users into thinking they are interacting with
content from one origin, but are in fact interacting with
content from a different origin. Zalewski [48] gave a tax-
onomy on “UI redressing” or clickjacking attacks which
illustrated some of the difﬁculties with current standards
and how attackers can abuse these mechanisms.
To achieve cross-principal events protection,
the
browser kernel needs to determine the event owner, the
principal instance to which the event is dispatched. There
are two types of events for the currently active tab: state-
less and stateful. The owner of a stateless event like a
mouse event is the tenant of the window (or display area)
on which the event takes place. The owner of a state-
ful event such as a key-press event is the tenant of the
current in-focus window. The browser kernel interprets
mouse clicks as focus-setting events and keeps track of
the current in-focus window and its principal instance.
The key problem to solve then is to determine the win-
dow on which a stateless or focus-setting event takes
place. We consider a determination to have high ﬁdelity
if the determined event owner corresponds to the user in-
tent. Different window layout policies directly affect the
ﬁdelity of this determination. We elaborate on our explo-
rations of three layout policies and their implications on
ﬁdelity.
Existing browsers’ policy. The layout policy in exist-
ing browsers is to draw windows according to the DOM
hierarchy and the z-index values of the windows. Exist-
ing browsers then associate a stateless or focus-setting
event to the window that has the highest stacking order.
Today, most browsers permit page authors to set trans-
parency on cross-origin windows [48]. This ability can
result in poor ﬁdelity in determining the event owner in
the face of cross-principal transparent overlays. When
there are transparent, cross-origin windows overlapping
with one another, it is impossible for the browser ker-
nel to interpret the user’s intent: the user is guided by
what she sees on the screen; when two windows present
a mixed view, some user interfaces visible to the user be-
long to one window, and yet some belong to another. The
ability to overlay transparent cross-origin content can
be extremely dangerous: a malicious site can make an
iframe sourced at a legitimate site transparent and over-
laid on top of the malicious site [48], fooling the users to
interact with the legitimate site unintentionally.
2-D display delegation policy. This is a new layout
policy that we have explored. In this policy, the display
is managed as two-dimensional space for the purpose of
delegation. Once a landlord delegates a rectangular area
to a tenant, the landlord cannot overdraw the area. Thus,
no cross-principal content can be overlaid. Such a lay-
out constraint will enable perfect ﬁdelity in determining
an event ownership that corresponds to the user intent. It
also yields better security as it can prevent all UI redress-
ing attacks except clickjacking [48]. Even clickjacking
would be extremely difﬁcult to launch with this policy
on our system since our cross-principal memory protec-
tion makes reading and writing the scrolling state of a
window an exclusive right of the tenant of the window.
However, this policy can have a signiﬁcant impact on
backward compatibility. For example, a menu from a
host page cannot be drawn over a nested cross-origin
frame or object; many sites would have signiﬁcant con-
straints with their own DOM-based pop-up windows cre-
ated with divs and such (rather than using window.open
or alert), which could overlay on cross-origin frames or
objects with existing browsers’ policy; and a cross-origin
image cannot be used as a site’s background.
Opaque overlay policy. This policy retains exist-
ing browsers’ display management and layout policies
as much as possible for backward compatibility (and
additionally provides cross-principal events protection),
but lets the browser kernel enforce the following layout
invariant or constraint:
for any two dynamic content-
containing windows (e.g., frames, objects) win1 and
win2, win1 can overlay on win2 iff (T enantwin1 ==
T enantwin2) || (T enantwin1 (cid:54)= T enantwin2 && win1
is opaque). This policy effectively constrains a pixel
to be associated with just one principal, making event
owner determination trivial. This is in contrast with
the existing browsers’ policy where a pixel may be as-
sociated with more than one principals when there are
transparent cross-principal overlays. This policy allows
same-origin windows to transparently overlay with one
another. It also allows a page to use a cross-origin im-
age (which is static content) as its background. Note that
no principal instance other than the tenant of the window
can set the background of a window due to our mem-
ory protection across principal instances. So, it is impos-
sible for a principal to fool the user by setting another
principal’s background. The browser kernel associates a
stateless event or a focus-setting event with the dynamic
content-containing window that has the highest stacking
order.
This policy eliminates the attack vector of overlaying a
transparent victim page over an attacker page. However,
by allowing overlapping opaque cross-principal frames
or objects, it allows not only legitimate uses, such as
those denied by the 2D display delegation policy, but it
also allows an attacker page to cover up and expose se-
lective areas of a nested cross-origin victim frame or ob-
ject. The latter scenario can result in inﬁdelity. We leave
as future work the mitigation of such inﬁdelity by deter-
mining how much of a principal’s content is exposed in
an undisturbed fashion to the user when the user clicks
on the page.
We implemented the opaque overlay policy in our pro-
totype.
6 Security Analysis
In Gazelle, the trusted computing base encompasses the
browser kernel and the underlying OS. If the browser
kernel is compromised, the entire browser is compro-
If the underlying OS is compromised, the en-
mised.
tire host system is compromised.
If the DNS is com-
promised, all the non-HTTPS principals can be compro-
mised. When the browser kernel, DNS, and the OS are
intact, our architecture guarantees that the compromise
of a principal instance does not give it any capabilities
in addition to those already granted to it through browser
kernel system call interface (Section 4).
Next, we analyze Gazelle’s security over classes of
browser vulnerabilities. We also make a comparison with
popular browsers with a study on their past, known vul-
nerabilities.
• Cross-origin vulnerabilities:
By separating principals into different protection
domains and making any sharing explicit, we can
much more easily eliminate cross-origin vulnera-
bilities. The only logic for which we need to en-
sure correctness is the origin determination in the
browser kernel.
This is unlike existing browsers, where origin val-
idations and SOP enforcement are spread through
the browser code base [10], and content from dif-
ferent principals coexists in shared memory. All of
the cross-origin vulnerabilities illustrated in Chen et
al. [10] simply do not exist in our system; no spe-
cial logic is required to prevent them because all of
those vulnerabilities exploit implicit sharing.
Cross-origin script source can still be leaked in our
architecture if a site can compromise its browser in-
stance. Nevertheless, only that site’s browser in-
stance is compromised, while other principals are
intact, unlike all existing browsers except OP.
• Display vulnerabilities:
The display is also a resource that Gazelle’s browser
kernel protects across principals, unlike existing
browsers (Section 5). Cross-principal display and
events protection and access control are enforced in
the browser kernel. This prevents a potentially com-
promised principal from hijacking the display and
events that belong to another principal. Display hi-
jacking vulnerabilities have manifested themselves
in existing browsers [17, 26] that allow an attacker
site to control another site’s window content.
• Plugin vulnerabilities:
Third-party plugins have emerged to be a signiﬁ-
cant source of vulnerabilities [36]. Unlike exist-
ing browsers, Gazelle’s design requires plugins to
interact with system resources only by means of
browser kernel system calls so that they are sub-
ject to our browser’s security policy. Plugins are
contained inside sandboxed processes so that basic
browser code doesn’t share fate with plugin code
(Section 4). A compromised plugin affects the prin-
cipal instance’s plugin process only, and not other
principal instances nor the rest of the system.
In
contrast, in existing browsers except OP, a compro-
mised plugin undermines the entire browser and of-
ten the host system as well.
A DNS rebinding attack results in the browser la-
beling resources from different network hosts with
a common origin. This allows an attacker to operate
within SOP and access unauthorized resources [30].
Although Gazelle does not fundamentally address
this vulnerability, the fact that plugins must inter-
act with the network through browser kernel system
Origin validation error
Memory error
GUI logic ﬂaw
Others
Total
IE 7 Firefox 2
6
38
3
-
47
11
25
13
28
77
Table 2: Vulnerability Study for IE 7 and Firefox 2
calls defeats the multipin form of such attacks.
We analyzed the known vulnerabilities of two major
browsers, Firefox 2 [3] and IE 7 [35], since their re-
lease to November 2008, as shown in Table 2. For both
browsers, memory errors are a signiﬁcant source of er-
rors. Memory-related vulnerabilities are often exploited
by maliciously crafted web pages to compromise the en-
tire browser and often the host machines.
In Gazelle,
although the browser kernel is implemented with man-
aged C# code, it uses native .NET libraries, such as net-
work and display libraries; memory errors in those li-
braries could still cause memory-based attacks against
the browser kernel. Memory attacks in principal in-
stances are well-contained in their respective sandboxed
processes.
Cross-origin vulnerabilities, or origin validation er-
rors, constitute another signiﬁcant share of vulnerabili-
ties. They result from the implicit sharing across princi-
pals in existing browsers and can be much more easily
eliminated in Gazelle because cross-principal protection
is exclusively handled by the browser kernel and because
of Gazelle’s use of sandboxed processes.
In IE 7, there are 3 GUI logic ﬂaws which can be
exploited to spoof the contents of the address bar. For
Gazelle, the address bar UI is owned and controlled by
our browser kernel. We anticipate that it will be much
easier to apply code contracts [6] in the browser kernel
than in a monolithic browser to eliminate many of such
vulnerabilities.
In addition, Firefox had other errors which didn’t map
into these three categories, such as JavaScript privilege
escalation, URL handling errors, and parsing problems.
Since Gazelle enforces security properties in the browser
kernel, any errors that manifest as the result of JavaScript
handling and parsing are limited in the scope of exploit
to the principal instance owning the page. URL handling
errors could occur in our browser kernel as well.
7 Implementation
We have built a Gazelle prototype mostly as described in
Section 4. We have not yet ported an existing plugin onto
our system. Our prototype runs on Windows Vista with
.NET framework 3.5 [4]. We next discuss the implemen-
tation of two major components shown in Figure 2: the
browser kernel and the browser instance.
Browser Kernel. The browser kernel consists of ap-
proximately 5k lines of C# code. It communicates with
principal instances using system calls and upcalls, which
are implemented as asynchronous XML-based messages
sent over named pipes. An overview of browser kernel
system calls and upcalls is presented in Table 3. Sys-
tem calls are performed by the browser instance or plug-
ins and sometimes include replies. Upcalls are messages
from the browser kernel to the browser instance.
Display management is implemented as described in
Section 5 using .NET’s Graphics and Bitmap libraries.
Each browser instance provides the browser kernel with
a bitmap for each window of its rendered content using
a display system call; each change in rendered content
results in a subsequent display call. For each top-level
browsing window (or tab), browser kernel maintains a
stacking order and uses it to compose various bitmaps
belonging to a tab into a single master bitmap, which is
then attached to the tab’s PictureBox form. This straight-
forward display implementation has numerous optimiza-
tion opportunities, many of which have been thoroughly
studied [33, 38, 40], and which are not the focus of our
work.
Browser instance. Instead of undertaking a signiﬁ-
cant effort of writing our own HTML parser, renderer,
and JavaScript engine, we borrow these components
from Internet Explorer 7 in a way that does not com-
promise security. Relying on IE’s Trident renderer has a
big beneﬁt of inheriting IE’s page rendering compatibil-
ity and performance. In addition, such an implementa-
tion shows that it is realistic to adapt an existing browser
to use Gazelle’s secure architecture.
In our implementation, each browser instance embeds
a Trident WebBrowser control wrapped with an interpo-
sition layer which enforces Gazelle’s security properties.
The interposition layer uses Trident’s COM interfaces,
such as IWebBrowser2 or IWebBrowserEvents2, to
hook sensitive operations, such as navigation or frame
creation, and convert
them into system calls to the