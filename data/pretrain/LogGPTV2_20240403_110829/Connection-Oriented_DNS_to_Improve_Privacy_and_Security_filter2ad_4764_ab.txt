### Servers from TCP-based DoS Attacks and Source Address Spoofing

TCP-based servers are inherently more resilient to Denial of Service (DoS) attacks [26, 71] because the connection establishment process in TCP prevents source address spoofing, thereby eliminating the risk of amplification attacks.

### DNS Amplification Attacks

While we lack specific data to quantify the number of DNS amplification attacks, measurements of source-IP spoofing indicate that the number of networks allowing spoofing has remained relatively stable over the past six years [7]. Recent studies on Distributed Reflective Denial-of-Service (DRDoS) attacks show that a majority involve DNS amplification [66]. Reports also highlight that DNS amplification is a significant issue, especially in the largest DoS attacks [3]. T-DNS proposes a long-term solution to mitigate this risk.

### TCP Security and DoS Mitigation

Even though TCP reduces the likelihood of DoS attacks, it is crucial to ensure that it does not introduce new vulnerabilities. Our experimental results in ยง V demonstrate potential risks. Fortunately, TCP security has been extensively studied within the web ecosystem. We have outlined our approaches to mitigating DoS attacks, and most known TCP-specific attacks already have established defenses. A detailed list of these attacks can be found in our technical report [86].

### Need for DNS Privacy

The lack of protection for query privacy is a critical issue. Historically, the privacy of Internet traffic was not considered a high priority. However, recent trends in DNS usage, deployment, and documented cases of widespread eavesdropping have increased the need for query privacy [9].

1. **End-User Queries**: End-user queries are increasingly exposed to eavesdropping through third-party DNS services like OpenDNS and Google Public DNS, as well as on open networks such as WiFi hotspots.
2. **Eavesdropping and Misdirection**: Widespread eavesdropping and misdirection are well-documented, often for government espionage [31], censorship [2], and criminal activities [51].
3. **ISPs and Monetization**: ISPs have recognized the opportunity to monetize DNS typos by redirecting non-existent domain responses (NXDOMAIN hijacking), a practice that has been widespread since 2009 [52].

For both corporate or national observation and interference, it is essential to follow the policies of one's provider and comply with local laws. However, making these policies explicit by requiring interaction with the operator of the configured recursive name server, rather than enabling passive observation, is valuable.

### Importance of DNS Privacy

DNS is vital for many services, and while protecting queries for IP addresses might seem unnecessary if the IP addresses will appear in an open IP header, full domain names provide much more information. For shared cloud services, the domain name is crucial since IP addresses are shared across multiple services. DNS is also used for various purposes beyond name-to-IP translation, such as anti-spam services where DNS maps email senders to reputations, exposing some email sources via DNS [46].

### Threat Model

To understand the security aspects of these issues, we define our threat model:

1. **DoS Attacks with Spoofed Source Addresses**: The adversary can target the 30 million currently existing open, recursive resolvers that lack ingress filtering [50].
2. **Query Eavesdropping and Privacy Attacks**: We assume an adversary with network access between the user and the recursive resolver. Aggregation and caching at the recursive resolver provide effective anonymization to authoritative servers; if not, TLS can be enabled.
3. **Trusted Recursive Resolver Operator**: We assume the operator of the recursive resolver is trusted. This requirement can be relaxed by alternating requests across several DNS providers, implementing a mix network to shuffle requests from multiple users, or padding the request stream with fake queries.
4. **Fragmentation Attacks**: An off-path adversary can inject packets with spoofed source addresses, following Herzberg and Schulman [32].
5. **Other Attacks on Query Integrity**: These are largely prevented by DNSSEC, which is outside the scope of this paper. T-DNS augments DNSSEC but is not intended to replace it.
6. **Person-in-the-Middle Attacks**: We rely on existing mechanisms to prevent such attacks during T-DNS setup of TLS, as discussed in ยง III-B.
7. **Information Leakage in Encrypted DNS**: Shulman identified information leakage in encrypted DNS [70]. While this paper aims to close the primary channel, side channels remain.
8. **Downgrade Attacks**: T-DNS clients may set their own policies for handling downgrade attacks, where a request for privacy is declined. An adversary in control of the network can interfere with TLS negotiation, preventing its use. A conservative client may retry other servers, refuse to provide non-private DNS, or alert the user.

### Design and Implementation of T-DNS

#### DNS over TCP

The original DNS specification [53] included support for TCP, with later clarifications [5]. However, DNS-over-TCP implementations have been underdeveloped due to its infrequent use. We consider three implementation decisions to improve TCP performance:

1. **Pipelining**: Sending multiple queries before their responses arrive is essential to avoid round-trip delays. Batches of queries are common, and our custom stub resolver supports pipelining.
2. **Out-of-Order Processing (OOOP)**: OOOP at recursive resolvers avoids head-of-line blocking. We have implemented OOOP in our DNS proxy and have a prototype in unbound.
3. **Shifting State from Server to Client**: Per-client state accumulation in servers with many connections can be reduced by shifting TCP state to the client, as observed in TIME-WAIT state overheads in web servers [28].

#### DNS over TLS

TLS for DNS builds on TCP, with new decisions about trust, negotiation, and implementation choices:

1. **Grounding Trust**: TLS depends on public-key cryptography to establish session keys and prevent man-in-the-middle attacks [21]. DNS servers must have TLS certificates, available from many sources at little or no cost.
2. **Client Trust**: We prefer DANE/TLSA to leverage the DNSSEC chain of trust [33], but other alternatives include current PKIs or trusted CAs provided out-of-band.
3. **TLS Negotiation**: T-DNS must negotiate the use of TLS. We propose a new EDNS0 extension [18] to negotiate TLS. The mechanism uses a "TLS OK" (TO) bit in the extended flags of the EDNS0 OPT record. A distinguished query with name "STARTTLS", type TXT, class CH, is used to initiate TLS negotiation.

#### Implementation Optimizations

1. **TLS Connection Resumption**: This allows the server to discard state, yet an intermittently active client can regenerate that state more quickly than a full, fresh TLS negotiation.
2. **TLS Close Notify**: This mechanism shifts TCP TIME-WAIT management to the client.

#### Implementation Status

We have several implementations of these protocols, including a custom client resolver for performance testing and three server implementations. In the long run, we expect to integrate our methods into existing resolvers like BIND-9.9.3 and unbound-1.4.21.

#### Gradual Deployment

Given the large deployed base of DNS clients and servers, any modifications to DNS will take effect gradually. T-DNS deployment is technically feasible and backward-compatible with current DNS deployments. Motivations for deployment include enhanced privacy and DoS mitigation. Complete deployment is not necessary, as partial adoption still provides benefits.

#### Connection Reuse and Resources

Connection reuse is crucial for T-DNS performance to amortize setup over multiple queries. We examine the trade-off between long-lived connections preferred by clients and short-lived connections preferred by servers, using datasets from DNSChanger, DITL/Level 3, and others to represent diverse conditions.