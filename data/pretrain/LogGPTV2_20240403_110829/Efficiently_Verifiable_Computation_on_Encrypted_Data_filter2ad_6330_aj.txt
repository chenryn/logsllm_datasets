10 Experimental Evaluation
To give the reader a glance at the practical applicability of our procedures, we implemented the
schemes in sections 5, 6, and 7, and reported the cost of each procedure.6
10.1 Setup
Hardware and Software. Our timings were performed on a 2011 MacBook Pro (Intel Core i5-
2415M, 2 hyperthreaded cores at 2.30GHz, 8GB RAM at 1.333GHz), on Ubuntu (linux kernel 3.11,
SMP, x86 64). Our implementations are single-threaded.
For our code, we made use of the following libraries:
6 The timings reported in this section correspond to an earlier version of the protocols algorithms described in the
present paper. Experiments for the algorithms described in this work will be added soon.
38
– HElib [39], which implements the BGV scheme [19]. We tweaked some homomorphic operations
to avoid KeySwitch and ModulusSwitch.
– NTL [56], to perform operations over polynomial rings (e.g. evaluating Hα,β).
– PBC [46], to perform group and pairing operations (e.g. evaluating e(X (1), Y (2)) in the scheme
in section 5).
Input. Our schemes are targeted at the encryption of a database that can be thought of as a
big table. Each row of the table represents an input, and each column represents an attribute. An
example is given in table 3.
Day
Bicycles
Cars
Trucks
March 1
March 2
...
55
10
...
128
28
...
20
0
...
. . .
. . .
. . .
Table 3. Number of vehicles driving through Paper Street at a given time.
The schemes we implemented all use the BGV encryption scheme [19], which, as pointed out in
section 4.1 has the nice feature batching. Therefore, for the computation of the same function for
each attribute (e.g. in table 3, the average amount of bicycles, cars, trucks, etc, going through Paper
Street in March), it is natural to encrypt each entire row of the database into a single ciphertext,
encoding each data set element into a diﬀerent slot.
Parameters selection. In our implementations we covered 80bit and 128bit security, and we
required the length of each data set item to be at most 32bit. These choices lead to the following
parameters (s denotes the number of slots):
Polynomials (Section 6 and 5): For 80bit (respectively 128bit) security, we chose log q = 173
(log q = 272), n = 5418 (n = 8820), s = 165 (s = 275).
Linear Combinations (Section 7): For 80bit (respectively 128bit) security, we chose log q =
123 (log q = 173), n = 4050 (n = 6370), s = 125 (s = 196).
10.2 Timings
We are now ready to present our timings. We introduce the concept of PCost (a shorthand for
“privacy cost”) of a process, deﬁned as the ratio of the total execution time of the process over the
time taken by the process to compute authentication operations (i.e. excluding privacy operations
such as encryption, FHE evaluation, hashing, etc). PCost can therefore be seen as a measure for
the cost for bringing privacy to each operation of a VC scheme.
In the following, by “Amortized” cost, we mean the per-attribute cost, which equals the “Raw”
(or total) cost of an operation divided by the number of attributes, according to the above pa-
rameters choice. Moreover, costs associated with procedures followed by “∗” are obtained using
exponentiations with precomputation.
39
Multi-Variate Quadratic Polynomials.
Timing (ms)
Raw Cost
Amortized Cost
PCost
Security
80bit
128bit
80bit
128bit
80bit
128bit
ProbGen
ProbGen∗
Add
Const. Mult.
Mult.
Verify
Verify∗
25d
21d
0.15
16
184
70
62
75d
65d
0.28
28
369
180
166
0.15d
0.13d
0.0009
0.09
1.11
0.42
0.37
0.27d
0.24d
0.001
0.01
1.32
0.65
0.60
2.92
5.08
2.21
1.10
1.14
1.92
2.14
3.09
8.00
3.45
1.08
1.33
2.77
3.23
Table 4. Summary of the costs associated with each procedure (ms) for the scheme described in section 5. We omitted
the cost of KeyGen, as that is dependent on the function to compute; see ﬁgure 1 for more information.
106
105
104
103
102
101
100
10−1
10−2
10−3
10−4
10−5
i
T
m
e
(
s
e
c
)
f2
ProbGen
f3
f1
KeyGen2
KeyGen3
KeyGen1
Verify
101
102
103
104
105
106
Database Size
– f1, f2, and f3 denote the cost of the corresponding function (see section 9.1 for more details). Notice
that the cost of f3 does not scale linearly with the database size (there is a constant cost of one
multiplication, which dominates for small databases).
– KeyGen1, KeyGen2, and KeyGen3 denote the cost of KeyGen for the corresponding function.
Here there is a constant term (HE.ParamGen) and a linear term that depends on the cost of the
function.
– ProbGen, and Verify denote the cost of the corresponding function. Dashed lines depict costs
obtained using precomputation. Notice that the cost of Verify is constant.
Fig. 1. Summary of the raw costs for the scheme in section 5, with 80bit security.
40
Univariate Polynomials of Large Degree.
Timing (ms)
Raw Cost
Amortized Cost
PCost
Security
KeyGen
KeyGen∗
ProbGen
Compute
Verify
Verify∗
80bit
128bit
80bit
128bit
80bit
128bit
1.35 + 20.7d
1.35 + 19.7d
N/A
2d
17
16
4.33 + 65d
4.33 + 63d
N/A
4d
53
51
0.008 + 0.125d
0.008 + 0.124d
N/A
0.01d
0.11
0.10
0.015 + 0.234d
0.015 + 0.233d
N/A
0.01d
0.19
0.18
5.29
5.95
N/A
3.34
3.89
4.76
8.26
9.62
N/A
2.65
5.78
7.46
Table 5. Summary of the costs associated with each procedure (ms) for the scheme described in section 6.
Linear Combinations.
Timing (ms)
Raw Cost
Amortized Cost
PCost
Security