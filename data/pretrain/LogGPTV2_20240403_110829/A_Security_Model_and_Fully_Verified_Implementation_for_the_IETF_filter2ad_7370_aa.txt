title:A Security Model and Fully Verified Implementation for the IETF
QUIC Record Layer
author:Antoine Delignat-Lavaud and
C&apos;edric Fournet and
Bryan Parno and
Jonathan Protzenko and
Tahina Ramananandro and
Jay Bosamiya and
Joseph Lallemand and
Itsaka Rakotonirina and
Yi Zhou
9
3
0
0
0
.
1
2
0
2
.
1
0
0
0
4
P
S
/
9
0
1
1
.
0
1
:
I
O
D
|
E
E
E
I
1
2
0
2
©
0
0
.
1
3
$
/
1
2
/
5
-
4
3
9
8
-
1
8
2
7
-
1
-
8
7
9
|
)
P
S
(
y
c
a
v
i
r
P
d
n
a
y
t
i
r
u
c
e
S
n
o
m
u
i
s
o
p
m
y
S
E
E
E
I
1
2
0
2
2021 IEEE Symposium on Security and Privacy (SP)
A Security Model and Fully Veriﬁed Implementation
for the IETF QUIC Record Layer
Antoine Delignat-Lavaud∗, Cédric Fournet∗, Bryan Parno†, Jonathan Protzenko∗, Tahina Ramananandro∗,
Jay Bosamiya†, Joseph Lallemand‡, Itsaka Rakotonirina‡, Yi Zhou†
∗Microsoft Research †Carnegie Mellon University ‡INRIA Nancy Grand-Est, LORIA
Abstract—Drawing on earlier protocol-veriﬁcation work, we
investigate the security of the QUIC record layer, as standardized
by the IETF in draft version 30. This version features major
differences compared to Google’s original protocol and early
IETF drafts. It serves as a useful test case for our veriﬁcation
methodology and toolchain, while also, hopefully, drawing atten-
tion to a little studied yet crucially important emerging standard.
We model QUIC packet and header encryption, which uses
a custom construction for privacy. To capture its goals, we
propose a security deﬁnition for authenticated encryption with
semi-implicit nonces. We show that QUIC uses an instance of a
generic construction parameterized by a standard AEAD-secure
scheme and a PRF-secure cipher. We formalize and verify the
security of this construction in F(cid:2). The proof uncovers interesting
limitations of nonce conﬁdentiality, due to the malleability of short
headers and the ability to choose the number of least signiﬁcant
bits included in the packet counter. We propose improvements
that simplify the proof and increase robustness against strong
attacker models. In addition to the veriﬁed security model, we
also give a concrete functional speciﬁcation for the record layer,
and prove that it satisﬁes important functionality properties
(such as the correct successful decryption of encrypted packets)
after ﬁxing more errors in the draft. We then provide a high-
performance implementation of the record layer that we prove to
be memory safe, correct with respect to our concrete speciﬁcation
(inheriting its functional correctness properties), and secure with
respect to our veriﬁed model. To evaluate this component, we
develop a provably-safe implementation of the rest of the QUIC
protocol. Our record layer achieves nearly 2 GB/s throughput,
and our QUIC implementation’s performance is within 21% of
an unveriﬁed baseline.
I.
INTRODUCTION
The majority of the Web today relies on the network stack
consisting of IP, TCP, TLS and HTTP. This stack is modular
but inefﬁcient: TLS starts only when the TCP handshake is
complete, and HTTP must wait for completion of the TLS
handshake. There have been recent efforts to cut this latency
overhead (using, e.g., TCP fast open and TLS 1.3 0-RTT),
but further gains require breaking the classic OSI model.
QUIC was introduced by Google in 2012 [38] to increase
performance by breaking layer abstractions, combining fea-
tures that are part of TCP (fragmentation, re-transmission,
reliable delivery, ﬂow control), TLS (key exchange, encryption
and authentication), and application protocols (parallel data
streams) into a more integrated protocol, as shown in Figure 1.
For example, consider two independent features that require
an extra round-trip: source address validation (when a server
wants to check that the source IP of an initial packet is not
spoofed, currently part of the TCP handshake), and a TLS
hello-retry request (when a server asks the client to send its
key share over a different Difﬁe-Hellman group). Using QUIC,
Application
HTTP/2
Application
HTTP/3
TLS
TCP
IP
QUIC
UDP
IP
Fig. 1: Modularity of current networking stack vs. QUIC
it is possible to combine both features in a single message,
saving a full network round-trip.
From a security standpoint, a fully-integrated secure trans-
port protocol offers the potential for a single, clean security
theorem, which avoids the pitfalls that arise when composing
adversary models from different layers. Mismatched assump-
tions have caused several surprising cross-layer attacks against
HTTPS. For instance, the CRIME [47] and BREACH [43]
attacks illustrate the risk of composing application-layer com-
pression with transport-layer encryption against adversaries
that can both control the application plaintext and observe
encrypted TLS trafﬁc. Interestingly,
transport compression
exists in Google’s version of QUIC, but was removed entirely
by the IETF. Another example is cross-layer truncation attacks,
such as the Cookie Cutter attack [15], where applications may
perform dangerous side-effects based on incomplete received
data due to a TCP error. With QUIC, it becomes possible
to consider a single adversarial model for the application’s
transport and, in principle, to show that an application is secure
against the UDP/IP message interface, which is very hard to
achieve with TLS or IPSec.
Although QUIC was originally designed and implemented
by Google for its own products, it is currently undergoing
standardization by the IETF [36]. An explicit goal of the
QUIC working group has been to ensure that QUIC inherits all
the security properties of TLS 1.3, thus avoiding the lengthy
formal protocol analysis effort that stretched out the TLS 1.3
standardization process for 4 years.
Unfortunately, as we highlight
the
working group has failed to achieve that goal;
the latest
IETF drafts have progressively opened up many internal TLS
abstractions, and thus, increasingly diverged from the context
under which TLS 1.3 is proved secure. Entire features of TLS
(including the record layer [52], version negotiation, the end-
of-early-data message, hello retry, re-keying, and some key
derivations) have been replaced in QUIC, often under different
assumptions; furthermore, new cryptographic constructions,
which have received little academic scrutiny, have been added.
in this paper (§II),
© 2021, Antoine Delignat-Lavaud. Under license to IEEE.
DOI 10.1109/SP40001.2021.00039
1162
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:13:53 UTC from IEEE Xplore.  Restrictions apply. 
Handshake
Keys
Messages
Alert
App Data
TLS Record Layer (stream 0)
m
a
e
r
t
S
1 …
m
a
e
r
t
S
n
Records
Exporter 
Secrets
QUIC Protocol Logic
QUIC Record Layer
Frames
Packets
Q
U
I
C
TLS Handshake
Handshake
Messages
m
a
e
r
t
S
0 …
Traffic 
Secrets
QUIC Protocol Logic
QUIC Record Layer
m
a
e
r
t
S
n
Frames
Packets
Fig. 2: Internal modularity between TLS 1.3 and QUIC before (left) and after (right) draft 12. In the latter, the QUIC Protocol
Logic is responsible for deriving keys from the TLS Handshake’s trafﬁc secrets.
The standard has also drifted signiﬁcantly away from Google’s
original version of QUIC, to the point that little of the early
security analysis work on Google’s QUIC ([40], [37], [30]) is
relevant to the IETF version. Careful new analysis is required
to capture the security properties of QUIC data streams.
Hence, the primary goal of this paper is to analyze and
address weaknesses in a protocol that is practically as im-
portant as TLS but that has received little academic attention
(despite imminent standardization and deployment). We do
so by applying and extending methodologies and veriﬁcation
toolchains developed in the context of TLS to this new setting,
thereby also validating their applicability to challenging non-
TLS constructions.
Concretely, we model and mechanically verify the security
of the new features of the IETF’s QUIC, focusing on what
we refer to as the QUIC “record layer”, i.e., the portion that
handles packet formatting and encryption. This is an important
step towards full end-to-end veriﬁcation of the soon-to-be-
standardized protocol (we discuss remaining steps below). Our
contributions consist of:
C1 Security Model. We give a new security deﬁnition (build-
ing on prior work [11], [41]) that captures the record
layer’s security and privacy goals (§III-B). We found
that early drafts of QUIC failed to satisfy this deﬁnition;
our feedback [42] resulted in updates to the construction