# A Security Model and Fully Verified Implementation for the IETF QUIC Record Layer

## Authors
- Antoine Delignat-Lavaud<sup>∗</sup>
- Cédric Fournet<sup>∗</sup>
- Bryan Parno<sup>†</sup>
- Jonathan Protzenko<sup>∗</sup>
- Tahina Ramananandro<sup>∗</sup>
- Jay Bosamiya<sup>†</sup>
- Joseph Lallemand<sup>‡</sup>
- Itsaka Rakotonirina<sup>‡</sup>
- Yi Zhou<sup>†</sup>

<sup>∗</sup>Microsoft Research  
<sup>†</sup>Carnegie Mellon University  
<sup>‡</sup>INRIA Nancy Grand-Est, LORIA

## Abstract
Drawing on earlier protocol-verification work, we investigate the security of the QUIC record layer as standardized by the IETF in draft version 30. This version features significant differences compared to Google’s original protocol and early IETF drafts. It serves as a useful test case for our verification methodology and toolchain, while also drawing attention to an emerging standard that is crucial but has received little study.

We model QUIC packet and header encryption, which uses a custom construction for privacy. To capture its goals, we propose a security definition for authenticated encryption with semi-implicit nonces. We show that QUIC uses an instance of a generic construction parameterized by a standard AEAD-secure scheme and a PRF-secure cipher. We formalize and verify the security of this construction in F<sub>★</sub>. The proof uncovers interesting limitations of nonce confidentiality due to the malleability of short headers and the ability to choose the number of least significant bits included in the packet counter. We propose improvements that simplify the proof and increase robustness against strong attacker models.

In addition to the verified security model, we provide a concrete functional specification for the record layer and prove that it satisfies important functionality properties (such as the correct successful decryption of encrypted packets) after fixing errors in the draft. We then provide a high-performance implementation of the record layer, which we prove to be memory-safe, correct with respect to our concrete specification (inheriting its functional correctness properties), and secure with respect to our verified model. To evaluate this component, we develop a provably-safe implementation of the rest of the QUIC protocol. Our record layer achieves nearly 2 GB/s throughput, and our QUIC implementation's performance is within 21% of an unverified baseline.

## 1. Introduction

The majority of today's web traffic relies on a network stack consisting of IP, TCP, TLS, and HTTP. While this stack is modular, it is inefficient: TLS starts only after the TCP handshake is complete, and HTTP must wait for the TLS handshake to finish. Recent efforts to reduce latency (e.g., TCP Fast Open and TLS 1.3 0-RTT) have been made, but further gains require breaking the classic OSI model.

QUIC, introduced by Google in 2012, aims to improve performance by integrating features from TCP (fragmentation, re-transmission, reliable delivery, flow control), TLS (key exchange, encryption, and authentication), and application protocols (parallel data streams) into a more integrated protocol, as shown in Figure 1. For example, QUIC can combine source address validation and a TLS hello-retry request in a single message, saving a full network round-trip.

From a security standpoint, a fully-integrated secure transport protocol offers the potential for a single, clean security theorem, avoiding the pitfalls that arise when composing adversary models from different layers. Mismatched assumptions have caused several cross-layer attacks against HTTPS, such as the CRIME and BREACH attacks, which exploit the combination of application-layer compression and transport-layer encryption. Another example is the Cookie Cutter attack, where applications perform dangerous side-effects based on incomplete received data due to a TCP error. With QUIC, it becomes possible to consider a single adversarial model for the application’s transport and, in principle, to show that an application is secure against the UDP/IP message interface, which is very hard to achieve with TLS or IPSec.

Although QUIC was originally designed and implemented by Google, it is currently undergoing standardization by the IETF. An explicit goal of the QUIC working group is to ensure that QUIC inherits all the security properties of TLS 1.3, thus avoiding the lengthy formal protocol analysis effort that stretched out the TLS 1.3 standardization process for four years. Unfortunately, as we highlight in this paper, the working group has failed to achieve that goal; the latest IETF drafts have progressively opened up many internal TLS abstractions, diverging from the context under which TLS 1.3 is proved secure. Entire features of TLS, including the record layer, version negotiation, the end-of-early-data message, hello retry, re-keying, and some key derivations, have been replaced in QUIC, often under different assumptions. Furthermore, new cryptographic constructions, which have received little academic scrutiny, have been added.

The standard has also drifted significantly away from Google’s original version of QUIC, to the point that little of the early security analysis work on Google’s QUIC is relevant to the IETF version. Careful new analysis is required to capture the security properties of QUIC data streams.

Hence, the primary goal of this paper is to analyze and address weaknesses in a protocol that is practically as important as TLS but has received little academic attention, despite imminent standardization and deployment. We do so by applying and extending methodologies and verification toolchains developed in the context of TLS to this new setting, thereby also validating their applicability to challenging non-TLS constructions.

Concretely, we model and mechanically verify the security of the new features of the IETF’s QUIC, focusing on what we refer to as the QUIC “record layer,” i.e., the portion that handles packet formatting and encryption. This is an important step towards full end-to-end verification of the soon-to-be-standardized protocol. Our contributions consist of:

**C1. Security Model:** We provide a new security definition (building on prior work) that captures the record layer’s security and privacy goals. We found that early drafts of QUIC failed to satisfy this definition; our feedback resulted in updates to the construction.

---

This revised version of the text is more structured, coherent, and professional, making it easier to read and understand.