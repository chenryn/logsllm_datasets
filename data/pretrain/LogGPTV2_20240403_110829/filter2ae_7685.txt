**作者：林以**  
**公众号：[支付宝安全实验室](https://mp.weixin.qq.com/s/ZpdPwySu0U1QVJ9GOJBNkw)**

Oracle于2020年4月15日发布了本年度第二次的Critical Patch Update Advisory，并在最新版VirtualBox（6.1.6）中修复了由支付宝光年安全实验室@鹜望与@林以提交的USB XHCI模块中的堆越界读写漏洞。本文将对该漏洞进行详细分析。

## VirtualBox USB XHCI 模块介绍
VirtualBox是一款开源虚拟化软件，广泛应用于个人用户。虽然VirtualBox大部分模块是开源的，但部分模块是以二进制插件包的形式发布，包括USB 2.0与3.0虚拟设备、VirtualBox RDP协议模块、硬盘加密、NVMe以及用于Intel的PXE引导部分。CVE-2020-2905漏洞存在于VirtualBox二进制插件包中的USB 3.0 XHCI模块。USB协议目前有三代接口标准：OHCI和UHCI对应USB 1.1，EHCI对应USB 2.0，而最新的XHCI则对应USB 3.0。本文将重点分析XHCI协议的数据结构。

## 漏洞分析
### 漏洞简介
该漏洞存在于二进制插件包`VBoxEhciR3.so`中，该文件包含了EHCI和XHCI的实现。从VirtualBox 6.1版本开始，插件包中的二进制符号被strip掉了，因此我们将使用6.0.14带符号的版本进行分析。复现环境为宿主机和虚拟机均为Ubuntu系统。

### 漏洞成因
该漏洞是一个数组越界读写问题，位于`xhciR3WriteEvent`函数中。攻击者可以控制`iIntr`参数。根据IDA Pro的Structures段显示，`aInterrupters`数组只有8个元素（如下图所示），但`iIntr`的值却可以是0～1023。由于代码未对`iIntr`值进行校验，导致了堆溢出。

通过逆向分析回溯调用流，我们发现`xhciR3WriteEvent`的调用路径是：
```
xhciR3WorkerLoop -> xhciR3PostXferEvent -> xhciR3WriteEvent
```

具体而言，当XHCI模块正常启动时，会调用`xhciR3WorkerLoop`函数。在此函数中，宿主机的XHCI驱动会与虚拟机通过XHCI命令进行通信。宿主机会等待XHCI相应的物理寄存器的读写来进行响应。后续文章将通过理清XHCI协议的相关数据结构来进一步分析。

### XHCI协议数据结构分析
虚拟机通过读写宿主机的物理地址来与宿主机响应驱动进行通信。通过在虚拟机中执行`cat /proc/iomem`命令，我们可以得知宿主机对应的驱动及其映射出来的物理地址。例如，XHCI驱动对应的物理地址范围是0xf1810000-0xf181ffff，大小为0x10000字节。

XHCI驱动会将物理地址转换成XHCI协议中的寄存器。当我们在虚拟机中对物理地址进行读写时，实际上是对XHCI协议的相应寄存器进行读写。读者可查阅XHCI specification来深入了解XHCI协议。

触发该漏洞需要CRCR和DCBAAP两个寄存器的配合：

#### CRCR寄存器
CRCR (Command Ring Control) 寄存器用于控制XHCI驱动，存储着dequeue pointer，指向TRB ring。TRB ring是一个存储TRB结构体的数组。在CRCR寄存器中，存储的是Command TRBs。Command TRBs包含17个命令，用于对宿主机XHCI驱动发起命令。`xhciR3WorkerLoop`函数轮询处理这些命令，包括Enable Slot Command、Address Device Command、Stop Endpoint Command等，在specification 6.4.3节中有定义。

在这17个命令中，我们需要关注Stop Endpoint Command。`xhciR3WorkerLoop`函数在处理Stop Endpoint Command时触发了漏洞。以下以Stop Endpoint Command TRB为例介绍TRB数据结构。一个TRB数据长128位，在Stop Endpoint Command TRB中，前12个字节是保留使用的，最后4个字节才有意义。其中TRB Type字段表明该TRB的类型，如果要发送Stop Endpoint Command，则需将该字段设为15。Slot ID最大值为32，即XHCI最多拥有32个slot。Slot的定义为：“Device Slot refers to the xHC interface associated with an individual USB device, e.g., the associated Device Context Base Address Array entry, a Doorbell Array register, and its Device Context.”

#### DCBAAP寄存器
DCBAAP (Device Context Base Address Array Pointer Register) 存储着指向Device Context Base Address Array的指针，该指针通过slot id进行索引。Device Context Base Address Array数组存储着Device Context Data Structure数据结构，共有32个入口。第一个入口是Slot Context Data Structure，其余入口是Endpoint Context Data Structure。

## 漏洞具体触发方式
回到`xhciR3WorkerLoop`函数：
1. 攻击者首先需要调用CR_ENABLE_SLOT命令来开启对应的slot，否则程序会在遇到未开启的slot时直接返回。在这里，我们可以将所有32个slot都开启。
2. 在CR_STOP_ENDPOINT命令处理代码中，`v134`即slot id。通过`v37 = xhciR3FetchDevCtxAddr(v2, v134);`将对应slot id的Device Context Base Address Array的地址取出并存入`v37`中。随后在`pfnPCIPhysRead`调用中读取32字节到`icc_0`变量中。根据XHCI协议数据结构分析，前32个字节应该是slot context数据结构。
3. 驱动随后调用`xhciR3PostXferEvent`函数，该函数的第二个参数为`(unsigned __int16)(HIWORD(icc_0.resvd[0]) >> 6)`，即为被控制的`icc_0`中的数据。
4. 参数`(unsigned __int16)(HIWORD(icc_0.resvd[0]) >> 6)`传递给`uIntTgt`变量，最终传递到`xhciR3WriteEvent`函数的`iIntr`参数，从而控制`aInterrupters`中的index值。

根据上述分析，`icc_0`中存储着slot context结构，我们需要分析出`(unsigned __int16)(HIWORD(icc_0.resvd[0]) >> 6)`对应的slot context中的字段，以此来控制`iIntr`。查看IDA Pro中`icc_0`结构体的定义，我们可以得知`(unsigned __int16)(HIWORD(icc_0.resvd[0]) >> 6)`是Slot Context Data Structure中的Interrupter Target字段。该字段有10位长，值范围是0～1023，意味着我们可以越界写1023个元素。

总结而言，分析清楚这些数据结构的关系后，我们就可以构造PoC来触发该漏洞。还有一些校验字段由于篇幅原因略去分析，读者可以根据specification及VirtualBox代码实现来绕过这些校验。

## 补丁分析
VirtualBox在6.1.6版本中修复了该漏洞。查看补丁代码，修复方法非常简单，即将`iIntr`值限定在0～7之间。

## 可利用性分析
攻击者可以通过越界写操作来利用该漏洞。例如，在`xhciR3WriteEvent`函数中，变量`v4`是被攻击者控制的，下面的代码会将`v4`的值写入`v7->errp`中，`v7`是从`aInterrupters`数组中取出的越界地址。

攻击者通过内存布局，将关键数据结构布局到越界写的数据内容之后，可以覆盖关键数据结构的值，从而造成虚拟机逃逸。

## 引用
* [XHCI Specification](https://www.intel.com/content/dam/www/public/us/en/documents/technical-specifications/extensible-host-controler-interface-usb-xhci.pdf)

### 关于作者
**支付宝光年安全实验室：**
隶属于支付宝安全实验室。通过对基础软件及设备的安全研究，达到全球顶尖破解能力，致力于保障蚂蚁金服及行业金融级基础设施安全。因发现并报告行业系统漏洞，数十次获得Google、Apple等国际厂商致谢。

扫码关注支付宝安全实验室微信公众号，获取更多干货！

---

希望优化后的文本更加清晰、连贯和专业。如果有任何进一步的需求，请随时告知。