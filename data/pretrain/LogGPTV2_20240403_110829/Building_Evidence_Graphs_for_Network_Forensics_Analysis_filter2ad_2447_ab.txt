We calculate priority score for an edge to indicate the
overall importance of the intrusion evidence. The priority
score p(e) of an edge e is calculated as the product of its
weight, relevancy and host importance:
p(e) = w(e) × r(e) × h(e)
(2)
As an example, a Windows DCOM buffer overﬂow at-
tack is observed to initiate from host s against host t. By
prior knowledge we know that host t is a Linux server.
Therefore the Windows DCOM buffer overﬂow will have
no impact on target t because it is not vulnerable to the
exploit. As described before, weight of the edge w(e)
comes from the attack knowledge base; relevancy of the
edge r(e) = 0. Thus priority score of the edge p(e) = 0.
Weight and priority score are deﬁned for different impli-
cations in our reasoning process. We use p(e) in reasoning
for attack group and scenario identiﬁcation. In the above
example, the failed attack has p(e) = 0, which indicates
that it has little signiﬁcance in the attack scenario because
the attacker did not achieve his goal. On the other hand, we
use w(e) in reasoning for host s’ state because although the
attack is unsuccessful, it still indicates malicious intent of
host s and consequently host s’ ”Attacker” state should be
updated.
2.4 Building Evidence Graph
To construct the evidence graph, the sequence of intru-
sion evidence is processed in time order, starting from the
ﬁrst evidence in record and moving towards the latest evi-
dence. Evidence with time intervals is added to the graph in
order of the start time in their interval. For each evidence,
we evaluate which nodes in the current evidence graph it
will affect and create nodes that do not exist, then create the
edge accordingly. The algorithm for building the evidence
graph is listed as follows.
input : Stream of evidence in time order
output: Evidence graph G
begin
foreach evidence E in stream do
foreach host V affected by E do
if V does not exist in G then
CreateNode (G, V );
end
end
CreateEdge (G, E);
foreach host V affected by E do
UpdateNode (E, V );
end
end
end
Algorithm 2: Constructing an evidence graph
The U pdateN ode function updates the states of node
reasoning via Rule-Based Fuzzy Cognitive
by causal
Maps(RBFCM), which we will describe in section 3.
2.5 Edit Operations on Evidence Graph
The evidence graph provides an effective means for the
forensics analyst to incorporate expert knowledge and out-
of-band information into automated analysis. General oper-
ations on the evidence graph includes the following:
1. Insert a new node n: This represents adding a new sus-
picious host to the evidence graph.
2. Remove a node n: This represents removing an irrele-
vant host from the evidence graph. Note that removing
a node implies removing all the edges connecting to it.
3. Update a node n: This represents changing one or more
state values of the node.
4. Insert a new edge e: This represents adding new intru-
sion evidence between existing nodes in the evidence
graph.
5. Remove an edge e: This represents removing irrele-
vant evidence from the evidence graph. We consider
an edge as irrelevant when its priority value is below a
certain threshold.
6. Update an edge e: This represents changing weight,
relevancy or host importance of evidence represented
by the edge.
Proceedings of the 21st Annual Computer Security Applications Conference (ACSAC 2005) 
1063-9527/05 $20.00 © 2005 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:05:17 UTC from IEEE Xplore.  Restrictions apply. 
3 Hierarchical Reasoning Framework
Based on the evidence graph, we develop a hierarchical
reasoning framework for automated evidence analysis. In
this section we describe two levels of the framework: local
reasoning and global reasoning.
3.1 Local Reasoning
The objective of local reasoning is to infer the states of a
host from local observations. We argue that it is essential to
keep track of host states for the following reasons:
1. Host states provide context for evaluating evidence.
There is no absolute ”suspicious value” of events. Ac-
tions of attackers are often represented by events that
do not seem suspicious when examined individually
without context. For example, legitimate ﬁle transfer
connections associated with a healthy host generally
do not indicate suspicious activity. However, an out-
bound ftp connection initiated from a victim host is
likely to be a data exﬁltration attempt that leads back
to a host controlled by the attacker. Therefore, host
states provides the context to discover hidden events
for further investigation.
2. Host states derived with local observations provide an
initial view of the roles the host may play in an at-
tack. The evolution of host states helps to display the
advancing stages of an attack to the forensics analyst.
The complexity of host systems and cyber attacks makes
it difﬁcult to reach a precise statement about host states.
Consequently we believe that the fuzzy logic method could
be an effective approach towards the problem. In the cur-
rent prototype,we develop causal inference via Rule-Based
Fuzzy Cognitive Maps(RBFCM) to model the states of
nodes.
Fuzzy Cognitive Maps(FCM) are actually fuzzy directed
graphs that combine neural networks and fuzzy logic to pre-
dict changes of the system. [3]. Nodes in a FCM are con-
cepts that change over time and edges represent the causal-
ity link between nodes. Weight of the edge measures how
much one concept impacts the other. FCM has been used for
decision support in many different domains, including net-
work security and intrusion detection systems [19]. How-
ever, FCMs are limited to model simple monotonic causal
relations and cannot cooperate with traditional fuzzy rules
[3]. We also observe that it requires signiﬁcant training to
get appropriate weight values.
Rule Based Fuzzy Cognitive Maps(RBFCM) are an evo-
lution of FCM. A RBFCM is essentially a standard rule
based fuzzy system plus feedback and mechanisms to deal
with causal relations [4]. Compared with the generic FCM,
RBFCM is better adapted for modelling complex dynamic
systems because changes to the concept are not simply de-
termined by the weight of the edges, but are deﬁned by the
fuzzy rules relating the concepts and inputs. This is an im-
portant advantage to incorporate non-symmetric and non-
monotonic causal relationships.
As shown in ﬁgure 2, a RBFCM consists of fuzzy con-
In our context, concepts are
cepts and fuzzy rule bases.
the deﬁned states {Attacker, V ictim, Stepping Stone,
Af f iliated}. Fuzzy rule bases consist of ”IF...T hen...”
fuzzy rules that deﬁne how each concept is affected by val-
ues of other concepts and incoming new evidence.
Figure 2. RBFCM model for local reasoning
In the RBFCM shown in ﬁgure 2, fuzzy rules are used
to map multiple inputs (current value of states and new
evidence) to the output (updated value of states). The states
are updated in an incremental manner. State values at
time t + 1 are determined by the states at time t and new
evidences observed during the time interval [t, t + 1).The
fuzzy rules are designed from expert knowledge.
For
example:
If BackOrif ice is detected
Then V ictim state is activated highly.
If exploit of weight w initiates from self
Then Attacker state value is increased by w.
If V ictim state is activated highly and
Attacker state is activated highly and
AT (Tactivate) > V I(Tactivate)
Then Stepping Stone state is activated highly.
If ftp connection to host n is detected and
V ictim(n) = high and
Tf tp − Tactivate(V I) < Tlimit
Then Af f iliated state value is activated medium.
Proceedings of the 21st Annual Computer Security Applications Conference (ACSAC 2005) 
1063-9527/05 $20.00 © 2005 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:05:17 UTC from IEEE Xplore.  Restrictions apply. 
To monotonically map the concept value into a normal-
ized range [0,1], we apply the sigmoid function in the fol-
lowing form where c is a positive constant.
f(x) =
1
1 + e−cx
(3)
3.2 Global Reasoning
The global reasoning process aims to identify a set of
highly correlated hosts that belong to the attack of interest
and derive their relationships by reﬁning the local state es-
timates in the scenario context. Global reasoning is based
on the assumption that during the procedure of attack, there
must be a strong correlation between members of the attack
group, and this correlation is exhibited through certain evi-
dence observable in the network.
Based on the evidence graph, we approach the global
reasoning task as a group detection problem, which is to
discover potential members of an attack group given the in-
trusion evidence observed. The attack group detection pro-
cedure works in two different phases: (1) create new attack
groups by generating seed for the group and (2) expand ex-
isting groups by discovering hidden members.
1. Seed Selection
The ﬁrst phase of group detection is to select certain
node as seed of the attack group. Usually there are two
approaches for seed generation.
The ﬁrst approach is to select seed based on states and
context of nodes. This is basically an empirical proce-
dure. To start the investigation, it is natural to select the
victim host as the initial seed. Another example is that
if a host in the trusted domain has Attacker state acti-
vated in local reasoning, it would be a good candidate
as the initial seed.
The second approach is to select seed based on graph
metrics. We have been evaluating a set of measures to
rank the list of nodes in the evidence graph for select-
ing important nodes that are highly suspicious as initial
seeds. In our current prototype, we use the degree of a
node degree(v) in the evidence graph as a simple met-
ric. The measure of degree(v) represents the fanout of
a host in the given time interval, which indicates the
number of intrusion evidence associated with the host.
A node with higher degree often has greater probabil-
ity to be an important host that could be used as initial
seed of the attack group.
2. Group Expansion
In group expansion process, we expect to discover hid-
den members of the attack group that have strong cor-
relation with the initial seeds.
Based on the evidence graph, we transform the prob-
lem space into a correlation graph ˆG = (V, E). ˆG
has the same set of nodes with the evidence graph G
while each undirected edge e represents the correlation
between two neighbor nodes. Weight of the edge indi-
cates the strength of correlation. For a pair of neighbor
nodes (s, t) in ˆG, let E(s, t) denote the set of inci-
dent edges between s and t in the evidence graph G,
then correlation score C(s, t) is computed as the sum
of priority value of edges in E(s, t).
C(s, t) = C(t, s) =
p(e)
(4)
(cid:88)
e∈E{s,t}
For convenience, we deﬁne the reciprocal of correla-
tion score as the distance between two neighbor nodes
s and t. Smaller distance value represents stronger cor-
relation between the two nodes.
d(s, t) = d(t, s) =
1
C(s, t)
(5)
We are investigating different approaches to reﬁne the
distance evaluation process with logical and temporal
constraints. For example, we can apply a time window
so that repeated same class of exploits within the time
window are only counted once when calculating the
correlation score by (4). Another option is to make the
priority score decay with time, i.e. p(e)(cid:48) = p(e) ×
eαt(α < 0) so that to give recent events higher weight
in the correlation score. The decay factor α depends
on the classiﬁcation of evidence.
Group expansion is an iterative process. First, we iden-
tify all external neighbors of current seed members as
the list of candidate nodes. Secondly, a ranked list is
formed based on the distance between each candidate
node to current group members; Finally, the ranked list
is cut at a predeﬁned threshold and nodes within the
distance threshold are added as new seed members of
the group. If no candidate node is within the distance
threshold, the group expansion procedure terminates.
The procedure is listed in algorithm 3.
The F indN eighbors function returns neighbor nodes
that are not current
In the
GetDistance function, we can (1) evaluate the dis-
tance between the candidate node to its nearest seed
member or (2) view the current seed group as a ”su-
per seed” and evaluate the distance as aggregation of
distances to all seed members. The RankCandidates
function ranks the candidate nodes by distance value,
candidate nodes whose distance exceed the predeﬁned
threshold are discarded.
seed members.
Proceedings of the 21st Annual Computer Security Applications Conference (ACSAC 2005) 
1063-9527/05 $20.00 © 2005 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:05:17 UTC from IEEE Xplore.  Restrictions apply. 
input : Evidence graph G, initial seed node v0 and
distance threshold d
output: The group of nodes group
begin
group ← v0;
neighbors ← ∅;
candidates ← ∅;
repeat
foreach node v in the set group do
neighbors ← FindNeighbour (G, v);
candidates ← candidates ∪ neighbors;
end
foreach node v in the set candidates do
v.distance ← GetDistance
(v, group);
end
new ←RankCandidates (candidates, d);
group ← group ∪ new;
until no new member is found;
end
Algorithm 3: Attack group expansion
Due to the vast difference in attack traces, selection
of the threshold is largely an empirical process:
the
analyst could compare the results of a set of thresh-
olds and pick the most suitable one based on expertise.
Lowering the threshold generally leads to higher rate
of false positives while raising the threshold may re-
sult in higher rate of false negatives. Moreover, the
ranking list often explains more than trying to ﬁnd the
best cut-off threshold.
4 Related Work
To our knowledge, little work has been done in auto-
mated network forensics analysis. Most mature forensics
investigation tools like EnCase [11] and Safeback [17] fo-
cus on capture and analysis of evidence from storage media
on a single host. ForNet [18] is a novel distributed logging
mechanism that focuses on network forensics evidence col-
lection rather than evidence analysis.
Our work extends current work in several areas into the
network forensics analysis mechanism.
Intrusion Detection Systems: Intrusion detection tech-
niques are generally classiﬁed into two categories: anomaly
detection and misuse detection [9]. IDS’ are an important
source of evidence for forensics analysis. However we can-
not solely rely on IDS’ as they only catch known attacks or
unusual behavior. Also, the high volume and low quality
of IDS alerts makes it difﬁcult for forensics investigators to
identify a clear picture of the attack. We incorporate aggre-
gated IDS alerts into our evidence graph model and evaluate
their effects in reasoning process.
Attribution Techniques: Attack attribution techniques
aim to locate the true origin of attack ﬂows. IP spooﬁng
and stepping stone connections are two common techniques
attackers use to conceal their origin [8]. Therefore, attri-
bution techniques generally fall into two classes: stepping
stone detection [22, 23] and IP traceback [2, 20]. Attribut-
ion methods can be integrated into our reasoning process as
evidence sources.
Alert Correlation: As intrusion alerts only reﬂect ele-
mentary steps in an attack, alert correlation methods aim at
reconstructing the attack scenario by linking alerts that sat-
isfy certain relationships together. Past work on alert corre-
lation include attribute similarity based [6, 21], pre-deﬁned
scenario based [7, 10], pre/post condition based [5, 16] and
methods that based on multiple information sources [15].
These methods are complementary to our approach. We
extend a simple and ﬂexible attribute-based alert aggre-
gation mechanism derived from [21] in our evidence pre-
processing module. Pre/post condition based and prede-
ﬁned scenario based methods can be leveraged in our local
and global reasoning process.
5 Experiments
We evaluate our proposed techniques through several
multi-stage attack scenarios. We use Snort as the network
IDS sensor to generate intrusion alerts and use TcpDump
to collect raw network trafﬁc in the testbed. Evidence col-
lected are stored into a MySQL database. We implemented
a set of Perl scripts to aggregate intrusion alerts, extract
ﬂow information and automatically integrate prior knowl-
edge in reasoning process. We develop an application based
on LEDA [1] to manipulate evidence graphs and reasoning
results.
5.1 Scenario Setup
We implemented a small scale multi-stage attack sce-
nario is in our testbed. Roles of hosts in the attack group
are shown in table 1. In addition to two stepping stones,
the attacker also uses one third party host that has public ftp
service as the relay for attack tools and exﬁltrated data.
Table 1. Role conﬁguration of hosts
Attacker
Stepping Stone 1
Stepping Stone 2
Victim
FTP Relay
192.168.21.3
192.168.25.3
192.168.22.4
192.168.23.4
192.168.24.4
To bring more variety to the scenario, multiple exploits,
backdoor programs and scanning tools are used. In addi-
tion, we generate mixed background trafﬁc including web
Proceedings of the 21st Annual Computer Security Applications Conference (ACSAC 2005) 
1063-9527/05 $20.00 © 2005 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:05:17 UTC from IEEE Xplore.  Restrictions apply. 
trafﬁc, ftp, sftp, ssh and telnet throughout the whole process
of attack to simulate a more realistic network environment.
Random attacks not related to the primary attack scenario
are also included in the background trafﬁc to obscure the
primary attack. The attack process lasts about 40 minutes
and the raw network ﬂow trace is about 300MB in size.
The attack scenario includes the following steps:
1. Samba remote buffer overﬂow attack against stepping
stone 1 from attacker.
2. Download attack tools from ftp relay to stepping stone
1 and start an Netcat backdoor on stepping stone 1.