Routing in the Dark: Pitch Black
Anonymous
Abstract. In many networks, such as mobile ad-hoc networks and friend-
to-friend overlay networks (darknets), direct communication between
nodes is limited to speciﬁc neighbors. Often these networks have a small-
world topology; while short paths exist between any pair of nodes in
small-world networks, it is non-trivial to determine such paths with a
distributed algorithm. Recently, Clarke and Sandberg proposed the ﬁrst
decentralized routing algorithm that achieves eﬃcient routing in such
small-world networks.
This paper is the ﬁrst independent security analysis of Clarke and Sand-
berg’s routing algorithm. We show that a relatively weak participating
adversary can render the overlay ineﬀective without being detected, re-
sulting in signiﬁcant data loss due to the resulting load imbalance. We
have measured the impact of the attack in a testbed of 800 nodes using
minor modiﬁcations to Clarke and Sandberg’s implementation of their
routing algorithm in Freenet. Our experiments show that the attack is
highly eﬀective, allowing a small number of malicious nodes to cause
rapid loss of data on the entire network.
We also discuss various proposed countermeasures designed to detect,
thwart or limit the attack. While we were unable to ﬁnd eﬀective counter-
measures, we hope that the presented analysis will be a ﬁrst step towards
the design of secure distributed routing algorithms for restricted-route
topologies.
1
Introduction
Fully decentralized and eﬃcient routing algorithms for restricted route networks
promise to solve crucial problems for a wide variety of networking applications.
Eﬃcient decentralized routing is important for sensor and general wireless net-
works, peer-to-peer overlay networks and theoretically even next generation In-
ternet (IP) routing. A number of distributed peer-to-peer routing protocols de-
veloped in recent years achieve scalable and eﬃcient routing by constructing a
structured overlay topology [4,5,8,11,15]. However, all of these designs are un-
able to work in real-world networks with restricted routes. In a restricted route
topology, nodes can only directly communicate with a subset of other nodes in
the network. Such restrictions arise from a variety of sources, such as physical
limitations of the communications infrastructure (wireless signals, physical net-
work topology), policies (ﬁrewalls) or limitations of underlying protocols (NAT,
IPv6-IPv4 interaction).
Recently, a new routing algorithm for restricted route topologies was pro-
posed [13] and implemented in version 0.7 of Freenet, an anonymous peer-to-peer
ﬁle-sharing network [3]. The proposed algorithm achieves routing in expected
2
Anonymous
O(log n) hops for small-world networks with n nodes by having nodes swap loca-
tions in the overlay under certain conditions. This signiﬁcant achievement raises
the question of whether the algorithm is robust enough to become the foundation
for the large domain of routing in restricted route networks.
The research presented in this paper shows that any participating node can
severely degrade the performance of the routing algorithm by changing the way it
participates in the location swapping aspect of the protocol. Most of the guards
in the existing routing implementation are ineﬀective or severely limited and
in particular fail to reliably detect the malicious nodes. Experiments using a
Freenet testbed show that a small fraction of malicious nodes can dramatically
degenerate routing performance and cause massive content loss in a short period
of time. Our research also illuminates why churn impacts the structure of the
overlay negatively, a phenomenon that was observed by Freenet users in practice
but has, to the best of our knowledge, never been explained.
The paper is structured as follows. Section 2 describes related work focus-
ing on distributed hash tables for networks without restricted-route topologies
and gives details about small-world networks, a particularly common form of a
restricted-route topology. Section 3 details Freenet’s distributed darknet rout-
ing algorithm for small-world networks. The proposed attack is described in
Section 4, followed by experimental results showing the eﬀects of the attack in
Section 5. Possible defenses and their limitations are discussed in Section 6.
2
Related Work
2.1
Distributed hash tables
A distributed hash table is a data structure that enables eﬃcient key-based
lookup of data in a peer-to-peer overlay network. Generally, the participating
peers maintain connections to a relatively small subset of the other participants
in the overlay. Each peer is responsible for storing a subset of the key-value
pairs and for routing requests to other peers. In other words, a key property of
DHTs in a peer-to-peer setting is the need to route queries in a network over
multiple hops based on limited knowledge about which peers exist in the overlay
network. Part of the DHT protocol deﬁnition is thus concerned with maintaining
the structure of the network as peers join or leave the overlay.
DHT designs can be characterized using the performance metrics given in
Table 1. Routing in DHTs is generally done in a greedy fashion and resembles
lookups in skip lists [10]. Table 2 summarizes the key properties of various ex-
isting DHT designs. The table does not capture properties which are hard to
quantify, such as fault-tolerance. Most existing DHT designs achieve near per-
fect load balancing between peers. Hosts that can provide signiﬁcantly more
resources than others are usually accommodated by associating multiple loca-
tions in the overlay with a single host. In some sense, those hosts are counted as
multiple peers.
A major limitation of the DHT designs listed in Table 2 is that they do
not support routing in restricted route topologies. These DHTs assume that it
Routing in the Dark: Pitch Black
3
(1) Messages required for each key lookup
(2) Messages required for each store operation
(3) Messages needed to integrate a new peer
(4) Messages needed to manage a peer leaving
(5) Number of connections maintained per peer
(6) Topology can be adjusted to minimize per-hop latency (yes/no)
(7) Connections are symmetric or asymmetric
Table 1. Performance metrics for DHTs.
Chord [15] Pastry [12] Kademlia [8] CAN [11]
RSG [5]
(1)
O(log n)
O(log n)
O(log n)
O(n−d)
O(log n)
(2)
O(log n)
O(log n)
O(log n)
O(n−d)
O(log n)
(3)
O(log2 n)
O(log n)
O(log n)
O(d + n−d)
O(log n)
(4)
O(log2 n)
O(1)
O(1)
O(d)
O(log n)
(5)
O(log n)
O(log n)
O(log n)
O(d)
O(1)
(6)
no
yes
yes
yes
no
(7) asymmetric asymmetric
symmetric
symmetric asymmetric
Table 2. Comparison of DHT designs. The numbers refer to the list of perfor-
mance metrics given in Table 1. The value d is a system parameter for CAN.
is generally possible for any peer to connect to any other peer. However, ﬁre-
walls and network address translation (NAT) make this assumption unrealistic
over the current Internet where large-scale studies have shown that over 70% of
machines are NATed [1].
In contrast to the DHT designs from Table 2, the Freenet routing algorithm
achieves expected O(log n) routing in restricted route topologies under the as-
sumption that the restricted network topology has small-world properties.
2.2
Small-world networks
A small-world network is informally deﬁned as a network where the average
shortest path between any two nodes is “small” compared to the size of the
network, where “small” is generally considered to mean at least logarithmic in
relation to the size of the network. Small world networks occur frequently in the
real world [16], the most prominent example being social networks [9].
Watts and Strogatz [16] characterized small-world networks as an interme-
diate stage between completely structured networks and random networks. Ac-
cording to their deﬁnition, small world networks with n nodes have on average
k edges per vertex where n >> k >> log n. They deﬁne a clustering coeﬃcient
which captures the amount of structure (clustering) in a given network. Small-
world networks are then networks with a clustering coeﬃcient signiﬁcantly larger
than the coeﬃcients of completely random networks and with average shortest
4
Anonymous
path lengths close to those for of completely random networks. Watts and Stro-
gatz’s work explains why short paths exist in real-world networks.
Kleinberg [6,7] generalized Watts and Strogatz’ construction of small-world
networks and gave suﬃcient and necessary conditions for the existence of eﬃcient
distributed routing algorithms for these constructions. Kleinberg’s model for
distributed routing algorithms does not include the possibility of nodes swapping
locations, which is a fundamental part of Freenet’s “Darknet” routing algorithm.
3
Freenet’s “Darknet” routing algorithm
Freenet [3] is a peer-to-peer network where the operator of each node speciﬁes
which other peers are allowed to connect to the node [2]. The main reason for
this is to obscure the participation of a node in the network – each node is only
directly visible to the friends of its’ operator. Peer-to-peer networks that limit
connections to friend-to-friend interactions are often called darknets. Given that
social networks are small-world networks and that small-world networks arise
easily given a certain amount of “randomness” in the graph construction, it is
realistic to assume that Freenet’s darknet is a small-world network. The routing
restrictions imposed on the Freenet overlay could technically model arbitrary
network limitations; consequently, an eﬃcient distributed routing algorithm for
such a topology should easily generalize to any small-world network.
3.1
Network creation
The graph of the Freenet network consists of vertices, which are peers, and edges,
which are created by friend relationships. An edge only exists between peers if
both operators have agreed to the connection a priori. Freenet assumes that a
suﬃcient number of edges (or friend relationships) between peers will exist so
that the network will be connected.
Each Freenet node is created with a unique, immutable identiﬁer and a ran-
domly generated initial location. The identiﬁer is used by operators to specify
which connections are allowed while the location is used for routing. The loca-
tion space has a range of [0, 1) and is cyclic with 0 and 1 being the same point.
For example, the distance between nodes at locations 0.1 and 0.9 is 0.2.
Data stored in the Freenet network is associated with a speciﬁc key from
the range of the location space. The routing algorithm transmits get and put
requests from node A to the neighbors of A starting with the neighbor with the
closest location to the key.
3.2
Operational overview
The basic strategy of the routing algorithm is to greedily forward a request to
the neighbor whose location is closest to the key. However, the simple greedy
forwarding is not guaranteed to ﬁnd the closest peer – initially, the location of
each peer is completely random and connections between peers are restricted
Routing in the Dark: Pitch Black
5
(since a peer is only allowed to establish connections the operator explicitly
designated as allowed). Consequently, the basic greedy algorithm is extended to
a depth-ﬁrst search of the topology (with bounded depth) where the order of
the traversal is determined by the distance of the nodes to the key [14]. Figure 1
shows the routing algorithm for the get operation in pseudocode.
For put operations, Freenet creates a copy of the content in the local data-
store of every node on the path from the initiator to the peer with the closest
location with respect to the key as found by greedy routing. The put algorithm
is detailed in Figure 2.
1. Check that new get request is not identical with recently processed request; if the
request is a duplicate, notify sender about duplication status, otherwise continue.
2. Check local data store for data; if data is found, send response to sender, otherwise
continue.
3. If hops-to-live of request is zero, respond with data not found, otherwise continue.
4. Find closest neighbor (in terms of peer location) with respect to the key of the
get request, excluding those routed to already. Forward the request to the closest
peer with (probabilistically) decremented hops-to-live counter. If valid content is
found, forward content to sender, otherwise, repeat step 4.
Fig. 1. Pseudocode for routing of a get request.
1. Check that new put request is not identical to a recently processed request; if the
request is a duplicate, notify sender about duplication status, otherwise continue.
2. Insert the data into the local datastore.
3. Find closest neighbor location to key, if the closest location is the location of the
current node, then reset hops-to-live to the maximum hops-to-live and forward the
put request to all neighbors.
4. If hops-to-live is zero, signal success to sender, otherwise forward the request to
the nearest peer.
Fig. 2. Pseudocode for routing of a put request.
3.3
Location swapping