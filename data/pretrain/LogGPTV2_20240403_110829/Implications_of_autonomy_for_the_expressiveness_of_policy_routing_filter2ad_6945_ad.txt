Deﬁnition 18 (Ranking Permutation): Given
nodes, let
be a permutation of the nodes
permutation on a ranking
yielding a new ranking
If
for node over the paths in
over the paths in
. Then induces a ranking
,
, as follows:
(where
, then
is the path permutation of path
, and
under
).
Note that a permutation does not modify the routing system
in any substantive way, except to relabel the nodes, and to re-
label the paths and rankings in a way that is consistent with the
relabeling of nodes.
is
of
and a ranking
is
-accepted, for any permutation
is permutation invariant if, given
, the relation
tion
an AS over all paths in
only if
Deﬁnition 19 (Permutation Invariance): A local RC func-
for
-accepted if and
.
Second, a local RC function should specify conditions for ac-
ceptance or rejection of rankings that “scale” appropriately with
the number of nodes in the system; we call this property scale in-
variance. Suppose, for example, that a local RC function accepts
nodes are in the system. Now
a ranking
suppose that we add nodes to the system, so the total number of
. As additional nodes are added to the system,
nodes is
additional paths become available as well, and each node must
. Informally, scale in-
specify its rankings over the larger set
should be able
variance of the local RC function requires that
,
to “extend” the ranking
to an accepted ranking over
, when
over
FEAMSTER et al.: IMPLICATIONS OF AUTONOMY FOR THE EXPRESSIVENESS OF POLICY ROUTING
1275
nodes, let
, let
. Given
. Note that
if
implies
be a
be a
. We
,
without having to modify its existing ranking over
; other-
wise, the properties of allowed rankings would depend on the
number of nodes in the global system.
To formalize this concept, we ﬁrst deﬁne a subranking.
Deﬁnition 20 (Subranking): Given
ranking for AS over all paths in
ranking for AS over all paths in
say that
for all
is a subranking of
.
We now deﬁne scale invariance.
Deﬁnition 21 (Scale Invariance): A local RC function
is
scale invariant if the following condition holds: given any -ac-
,
cepted ranking
there exists at least one
that
as a subranking.
has
, and given any
over
-accepted ranking
for AS over
Permutation invariance guarantees that relabeling nodes does
not affect allowed rankings; scale invariance ensures that even
as the set of nodes in the network increases, the rankings over
previously existing paths should remain valid. Local RC func-
tions that satisfy both permutation invariance and scale invari-
ance correspond to protocols that respect the ability of ASes
to autonomously choose rankings; we call such functions au-
tonomous ranking constraint functions.
Deﬁnition 22 (ARC Function): A local RC function is an
autonomous ranking constraint (ARC) function if it is both per-
mutation invariant and scale invariant.
We want to derive the conditions under which protocols are
guaranteed to be safe under ﬁltering. Given that we use an ARC
function as an abstraction of the constraints placed by a protocol
on rankings, we would thus like to characterize ARC functions
that can ensure safety under ﬁltering of the entire routing system
(a global property). For this reason, we extend the deﬁnition of
“safety under ﬁltering” to cover local RC functions.
Deﬁnition 23: Let
be a local RC function. We say that
is safe under ﬁltering if all
under ﬁltering.
-accepted routing systems are safe
B. Examples of ARC Functions
We now present two simple examples of ARC functions: the
shortest hop count ARC function, which is guaranteed to be
safe, but is not expressive; and the next hop ARC function,
which is expressive, but not safe.
Example 6: Our ﬁrst example is the shortest hop count RC
, the RC function
. Given the number of nodes
function,
accepts a ranking
for node if and only if the relation
strictly prefers shorter paths (in terms of hop count) over longer
ones. Formally, it accepts
such that
broken arbitrarily.
, if, for any two paths
. Ties may be
,
It is not hard to verify that
is an ARC function. To check
permutation invariance, note that if
is allowed for node ,
will
then of course for any permutation , the ranking
will also prefer shorter
also be allowed for node
paths to longer paths. Scale invariance is natural: given any
,
shortest hop count ranking
there obviously exists at least one shortest hop count ranking
over
as a subranking.
, and given
that has
over
, as
The RC function
forces all providers to use shortest AS
path length, effectively precluding each AS from having any
policy expressiveness in choosing rankings (other than when
breaking ties). A more ﬂexible set of rankings is allowed by the
next hop RC function of the next example.
Example 7: The next hop RC function,
for node
a ranking
Section IV-A; that is, if
if and only if
is a next hop ranking.
, accepts
satisﬁes (1) in
The RC function
is clearly permutation invariant: if
is determined entirely by the rankings of node
is a next
. Furthermore, note that any next hop
is a next hop ranking for node , then clearly
hop ranking for node
ranking
over each possible next hop, together with tiebreaking choices
among routes with the same next hop. Thus, for
can be extended to a next hop ranking over
, by extending
node ’s rankings over each possible next hop, and determining
.
tiebreaking rules for any routes with next hop
We conclude that
is scale invariant as well, and thus it is an
ARC function.
,
The RC function
, albeit at some cost. With
grants greater ﬂexibility in choosing
routing policies than under the shortest hop count RC function,
, each AS will choose a
without any global constraints on the com-
next hop ranking
chosen by the
posite vector of next hop rankings
nodes. We have shown earlier in Section IV-A that there exist
conﬁgurations of next hop rankings that may not be stable or
can lead to a
safe under ﬁltering; thus, the ARC function
lack of safety.
Next, we use dispute rings and dispute wheels to characterize
the class of ARC functions that are safe under ﬁltering. We will
.
prove that this class is closely related to the ARC function
C. Impossibility Results
We prove two main results in this section. Informally, the ﬁrst
result can be stated as follows: suppose we are given an ARC
function and an accepted ranking such that some
hop path is
less preferred (i.e., ranked lower) than another path of length at
hops. Then, we can construct an accepted routing
least
system with a dispute ring; i.e., one that is not safe under ﬁl-
-hop path is less
tering. The second result states that if some
hops, then
preferred than another path of length at least
there exists a routing system with a dispute wheel (though not
necessarily a dispute ring). Note that this result is weaker than
our ﬁrst result, because a dispute wheel does not necessarily
imply that the system is not safe under ﬁltering.
We interpret these results as follows: if we are searching for
ARC functions that are safe under ﬁltering, we are very nearly
restricted to considering only the shortest hop count ARC func-
hops must be more preferred than
tion, because all paths of
hops to guarantee safety under ﬁltering,
paths of at least
hops must be more preferred than paths of at
and all paths of
least
hops to prevent dispute wheels.
Our ﬁrst lemma, which is crucial to proving both of our re-
sults, uses permutation invariance to construct a dispute wheel
from a single node’s rankings. We use a permutation to “repli-
cate” pieces of the dispute wheel until the entire wheel is com-
pleted.
1276
IEEE/ACM TRANSACTIONS ON NETWORKING, VOL. 15, NO. 6, DECEMBER 2007
are all distinct, this assignment of rankings to nodes
is well deﬁned (i.e., no node is assigned two different rankings).
-accepted, we conclude
By permutation invariance, since
, choose any
. For all other nodes
-accepted for all
is
is
-accepted ranking
for all nodes .
This permutation deﬁnes a -accepted routing system
. Let
this system. Deﬁne
. We now construct a dispute wheel for
, for
. We claim that these deﬁnitions yield a dispute
, and
Fig. 9. Dispute wheel construction for Lemma 1.
wheel.
Since
is a path from
path from to
now observe that
for all
to
for all
, all paths are feasible. Next, since
is a
). We
, we conclude that
(where we deﬁne
To state the lemma, we must deﬁne the period of a node with
respect to a permutation, as well as the period of a permutation.
denote the
Given a permutation
permutation that results when is applied times; e.g.,
on the nodes
, let
, where
is deﬁned to be the identity permutation.
Deﬁnition 24 (Period): Given a permutation
as
, we deﬁne the period of
under
on the nodes
.
Thus, the period of
is the minimum number of applications
of
required to return to .
Deﬁnition 25 (Permutation Period): Given a permutation
, we deﬁne the period of the permutation
on the nodes
as
is the minimum number of applications of
Thus,
required to recover the original node labeling, and can be
.
computed as the least common multiple of
, for
.
The following result establishes the conditions under which
we can apply a permutation to a -accepted ranking to obtain a
dispute wheel. We use this lemma as a building block for both
of the theorems in this section.
Lemma 1: Let
node with a ranking
a permutation
; 3)
on
over
be an ARC function. Suppose there exists a
, and
-accepted; 2)
; and 4) there exists a
such that: 1)
, two paths
is
path
from to
such that
(2)
Then there exists a -accepted routing system with a dispute
wheel.
This dispute wheel is deﬁned by pivot nodes
paths
and where for
, and
and
, where
, we have
.
, and
,
,
Proof: Refer to Fig. 9. The key idea of the proof is that,
to
and apply permutation invariance to con-
since
the paths
struct a -accepted routing system with a dispute wheel.
, we can repeatedly apply
and
Let
by
for
,
the nodes
, deﬁne
. Deﬁne the sequence
. Since
are all distinct. For
; since the nodes
Finally, since
tion and the fact that
and
, we have
. Using the preceding deriva-
, we conclude that
, as required.
Thus, we have established that
, together with
and
, constitute a dispute wheel.
into the “tail” of the path
The preceding lemma reduces the search for a dispute wheel
to a search for a permutation and a -accepted ranking with the
stated properties. Observe from (2) that the permutation maps
the path
; in applying Lemma
1, we will construct a partial permutation by mapping a path
into the “tail” of
as in (2), and then we will complete the
permutation by adding nodes to the system if necessary so that
. We use this approach to prove two
theorems; the ﬁrst states that if an ARC function accepts at least
one ranking that prefers an -hop path less than a path of at least
hops, then the ARC function is not safe under ﬁltering.
Theorem 1: Let