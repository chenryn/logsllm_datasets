Possibly related to #2751, #2725 and #2686, but I do not think it's a
duplicate, since this bug only appears when default parameters are used. Also,
I tried asking in slack, but didn't recieve an answer and I think the question
got burried now.
I'm using a fresh setup with `node v5.0.0`, `npm v3.3.11`, `babel-cli 6.0.15`
(with `babel-core 6.0.20`), `babel-preset-es2015` (which includes `babel-
plugin-transform-regenerator` and `babel-plugin-transform-es2015-parameters`).
    $ babel --version
    6.0.15 (babel-core 6.0.20)
**.babelrc** (I've tried manually specifying the above-mentioned `plugins` as
well)
    {
      "presets": ["es2015"]
    }
**index.js**
    export class Test {
        *memberGenerator(arg = 0) {
            console.log(arg);
        }
        start() {
            this.memberGenerator(1).next();
        }
    }
**`babel index.js --module-id Test -o out.js`**
**out.js**
    "use strict";
    (function (global, factory) {
        if (typeof define === "function" && define.amd) {
            define("Test", ["exports"], factory);
        } else if (typeof exports !== "undefined") {
            factory(exports);
        } else {
            var mod = {
                exports: {}
            };
            factory(mod.exports);
            global.Test = mod.exports;
        }
    })(this, function (exports) {
        Object.defineProperty(exports, "__esModule", {
            value: true
        });
        var _arguments = arguments;
        function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
        var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();
        var Test = exports.Test = (function () {
            function Test() {
                _classCallCheck(this, Test);
            }
            _createClass(Test, [{
                key: "memberGenerator",
                value: regeneratorRuntime.mark(function memberGenerator() {
                    var arg = _arguments.length <= 0 || _arguments[0] === undefined ? 0 : _arguments[0];
                    return regeneratorRuntime.wrap(function memberGenerator$(_context) {
                        while (1) switch (_context.prev = _context.next) {
                            case 0:
                                console.log(arg);
                            case 1:
                            case "end":
                                return _context.stop();
                        }
                    }, memberGenerator, this);
                })
            }, {
                key: "start",
                value: function start() {
                    var gen = this.memberGenerator(1);
                    gen.next();
                }
            }]);
            return Test;
        })();
    });
**test.js**
    require('babel-polyfill');
    var Test = require('./out').Test;
    var test = new Test();
    test.start();
**expected result**  
`1`
**actual result**  
`{ Test: [Function: Test] }`
From what I can tell, it is the combination of exporting a class with the use
of default parameters that causes this. If i `export Test { ... }` as an
object instead of a class, or remove the default parameter,
`*memberGenerator(arg)` it works as expected. Also, if i run this in the
online babel editor, http://goo.gl/koJrnZ, (no export) it works as expected.
Thanks for your help.