User: How to use jenkins to realize automatic deployment? Please give steps and sample code.
Assistant: The steps are as follows: 1. Create a new job (Job) in Jenkins and select "Build a free-style software project". 2. Clone the code of the project on the Git server. For example, if your project code is hosted on GitHub, you can use the Jenkins Git Plugin. Jenkins will use the Git client to pull code. 3. Configure parameterized build: Add some variables that need to be interacted with in the build parameters, such as environment (environment name), release version number, etc. It can be configured using the Parameterized Build Plugin. 4. Configure the build environment: Configure the build environment to run the deployment script. For example, you can use the Pipeline Plugin to define deployment pipelines. 5. Write and execute the deployment script: Write a simple shell script, specify the code path, target server, service, etc. in the script, and then execute the script. 6. Configure a scheduled task: Use Jenkins' Build Triggers to set a scheduled task, for example, an update is automatically deployed at 9:00 p.m. every day. 7. Test automated deployment: Manually trigger a Jenkins job to check whether it is deployed in the specified environment. The sample code is as follows: pipeline { agent any parameters { string(name: 'environment', defaultValue: '', description: 'Target environment: prod, staging or dev') } stages { stage('Checkout') { steps { git branch : 'master', url: 'https://github.com/example/app.git' } } stage('Deploy') { when { expression { params.environment != '' } } steps { echo "Deploying to ${params.environment}..." sh "./scripts/deploy.sh -e ${params.environment}" } } } }