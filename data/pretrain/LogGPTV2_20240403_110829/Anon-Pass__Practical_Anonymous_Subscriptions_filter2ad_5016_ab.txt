Correctness requires that when honest clients interact with
a server then, except with negligible probability, cur is always
equal to the number of clients who are logged in, and next is
always equal to the number of clients who are linked.
B. Security
We deﬁne two notions of security: one ensuring that ma-
licious clients cannot generate more active logins than the
number of times they have registered (“soundness”), and the
other (“anonymity”) guaranteeing anonymity and unlinkability
for clients who authenticate using the Login protocol. (On
the other hand, clients who re-authenticate using the Re-Up
protocol will be linked to their session in the previous epoch.)
1) Soundness: A scheme is sound if for all probabilistic
polynomial-time adversaries A, the probability that A suc-
ceeds in the following experiment is negligible:
1) Setup(1n) is run to generate keys spk, ssk, and an initial
state σ. Adversary A is given spk, and the experiment
sets cur = next = t = users = 0.
2) A may then do any of the following, where the server
uses its prescribed inputs (based on its current state):
321
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:54:46 UTC from IEEE Xplore.  Restrictions apply. 
• A can interact with an oracle for RegS. (This represents
a registration by a client whom A controls.) A need
not run the registration protocol honestly. Following
each such interaction, users is incremented.
• A can request that an honest client (one not controlled
by A) register. On the ith such request, the registration
protocol is run honestly (using the prescribed inputs)
and the resulting client key is denoted by ski. A cannot
observe1 the interaction between this client and the
server, and ski is not given to A.
• A can interact with an oracle for LoginS (resp.,
Re-UpS). This represents a login (resp., link) request
by a client controlled by A.
• A can request that client i Login (resp., Re-Up). In
response, the login (resp., link) protocol is run honestly
using ski (and the rest of the prescribed inputs). A
cannot observe2 this interaction.
• A can request to end the current epoch, in response
(cid:2)) ←
to which t is incremented and (σ
EndEpoch(σ, cur, next) is executed.
In the above, we allow A only sequential access to its
oracles.
3) A succeeds if at any point cur is greater than users plus
, next
, cur
the number of honest clients who are logged in.
(cid:2)
(cid:2)
2) Anonymity: A scheme is anonymous if for all prob-
abilistic polynomial-time adversaries A, the probability that
A succeeds in the following experiment is negligibly close
to 1/2:
1) A random bit c is chosen, and we set t = 0.
2) A outputs a service public key spk.
3) A runs two sequential interactions with RegC(spk). If
either of these results in output ⊥, then c
(cid:2) = 0 is output
and the experiment ends. Otherwise, these interactions
result in two secret keys sk0, sk1.
4) A then runs in three phases. In the ﬁrst phase, A may do
any of the following:
• Increment the epoch number t.
• Query oracle Login(·). On input a bit b, this begins
executing the client login protocol LoginC using inputs
skb, spk, and the current epoch number t.
• Query oracle Re-Up(·). On input a bit b, if client b
is not logged in, Re-Up(b) does nothing. Otherwise, it
begins executing the client link protocol Re-UpC using
inputs skb, spk, and the current epoch number t.
5) When the second phase begins, both clients must not be
logged in. Then A may:
• Increment the epoch number t.
• Query oracle ChallengeLogin(·). ChallengeLogin(b) re-
sponds as Login(b ⊕ c) does.
• Query oracle ChallengeRe-Up(·). ChallengeRe-Up(b)
1We assume registration is done over a private, authenticated channel.
2We assume logins/links are done over a private channel. Note that there is
no client authentication when setting up this channel (since the client wishes
to remain anonymous); thus, we assume A only passively eavesdrops but does
not actively interfere.
322
responds as Re-Up(b ⊕ c) does.
The second phase ends once an epoch begins in which
neither client is logged in.
6) In the third phase, A interacts as in the ﬁrst phase.
7) A outputs a bit c
In all the above, A is again given only sequential access to its
oracles.
(cid:2), and succeeds if c
(cid:2) = c.
III. CONSTRUCTION
In this section we provide a construction for a secure
anonymous subscription scheme with conditional linkage. Our
construction uses a number of primitives – bilinear groups,
zero-knowledge proofs of knowledge, and a particular pseudo-
random function family – and cryptographic assumptions from
prior work. We provide relevant background in Appendix A.
Similar to [4], our construction works by associating a
unique token, Yd(t), with each client secret, d, in each epoch, t.
Registration works by allowing a client to obliviously obtain
a signature on a secret. To log in, a client sends a token and
proves in zero-knowledge that (1) it knows a server signature
on a secret, and (2) this secret corresponds to the token
that was sent. The tokens are used to determine admission
to the service; the server accepts a token only if it has not
been presented before in that epoch. Intuitively, soundness
follows from the difﬁculty of generating signatures; anonymity
follows from pseudorandomness of the tokens. (Formal proofs
of security can be found in the full version of this paper [18].)
On a technical level, we use the Dodis-Yampolskiy PRF [15]
and an adapted version of one of the signature schemes
proposed by Camenisch and Lysyanskaya [7] (CL signatures).
These building blocks are themselves efﬁcient, and also enable
efﬁcient zero-knowledge proofs as needed for our construction.
As noted above, a client can authenticate during epoch t by
sending the token Yd(t) and proving in zero-knowledge that
the token is “correct.” If a client is already logged in during
epoch t − 1, however, an alternative way of authenticating
is to send Yd(t) and prove that this token is “linked” to the
token Yd(t − 1) (which was already proven correct). This can
be done much more efﬁciently, with the tradeoff that the two
user sessions are now explicitly linked to each other. In an
epoch where the client is not logged in, it can perform a fresh
Login to “re-anonymize” itself.
A. Notation
Throughout, G = (cid:5)g(cid:6) is a bilinear group of prime order q,
with target group GT . e(·,·) denotes the bilinear map, and we
let gT = e(g, g). We denote by a ← S the selection of an
element a uniformly at random from the set S.
We denote an interactive protocol executed by two proba-
bilistic algorithms A (with private input a) and B (with private
input b) by
(x, y) ← (cid:5)A(a), B(b)(cid:6),
where x (resp., y) denotes the local output of A (resp., B).
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:54:46 UTC from IEEE Xplore.  Restrictions apply. 
We denote zero-knowledge proofs of knowledge where
a prover convinces a veriﬁer of knowledge of values
(a1, . . . , an) that satisfy a predicate P by
PoK{(a1, . . . , an) | P (a1, . . . , an)}.
This notation is taken from Camenisch and Stadler [8] (mod-
iﬁed to use PoK instead of PK).
B. Main construction
We assume zero-knowledge proofs of knowledge as building
blocks, and describe them in a separate section (§III-D). The
zero-knowledge proofs of knowledge presented there are non-
interactive proofs that are secure in the random oracle model.
In our security proofs, we assume the use of interactive
versions of these protocols that do not rely on the random
oracle model and can in turn be made zero knowledge using
standard execution of protocols, this implies sequential ex-
ecution of the zero-knowledge proofs. When the interactive
zero-knowledge proofs of knowledge are instantiated using
the Fiat-Shamir heuristic in the random oracle model, and
protocols may be executed concurrently, our proof breaks
down for technical reasons but we nevertheless view our proof
as heuristic evidence for the security of our implementation.
Setup: (spk, ssk,σ ) ← Setup
The server chooses x, y, z ← Zq and sets X = gx,
Y = gy, and Z = gz. The service public key is spk =
(q, G, GT , g, X, Y, Z), and the service secret key is ssk =
(x, y, z). The server state σ will be a pair of sets. They are
both initialized to be empty, i.e., σ = ({},{}). We refer
to the ﬁrst component as σ.cur and the second as σ.next.
Throughout, cur = |σ.cur| and next = |σ.next|.
Registration: (φ, sk) ← (cid:5)RegS(ssk), RegC(spk)(cid:6)
1) The client chooses d, r ← Zq. It constructs M = gdZ r
and sends this to the server.
2) The client acts as prover and the server as veriﬁer in the
zero-knowledge proof of knowledge
PoK{(d, r) | M = g
If the proof fails, registration fails.
r}.
d
Z
3) The server generates a ← Z
∗
q and sets A = ga. Then it
forms signature s = (A, B = Ay, ZB = Z ay(= Bz), C =
AxM axy) and returns it to the client.
4) The client veriﬁes that it has received a legitimate signa-
ture by checking
A (cid:7)= 1,
e(g, B) = e(Y, A),
e(g, ZB) = e(Z, B),
e(g, C) = e(X, A)e(X, B)de(X, ZB)r.
Otherwise, RegC outputs ⊥.
5) The client sets sk = (s, d, r).
Login: ((σ
(cid:2)
, cur
(cid:2)), φ) ←
(cid:5)LoginS(ssk, σ, cur, t), LoginC(sk, spk, t)(cid:6)
1) The client uses its secret key (s = (A, B, ZB, C), d, r) to
create a blinded signature. The client chooses r1, r2 ← Z
∗
q
and creates blinded signature ˜s = ( ˜
ˆ
C), where
A,
A = Ar1, ˜
B , and ˆ
˜
r1
C = C r1r2.
1/(d+t).
B = Br1, ˜
ZB = Z
˜
ZB,
˜
B,
2) The client creates login token Yd(t) = gT
3) The client submits ˜s, Yd(t) to the server.
4) If Yd(t) ∈ σ.cur, login fails.
5) Otherwise, the server veriﬁes that
˜A (cid:7)= 1, e(g, ˜B) = e(Y, ˜A), and e(g, ˜ZB) = e(Z,
If not, login fails.
˜
B).
6) The client and server each compute
v = e(g,
vx = e(X,
vxy = e(X,
(cid:2)
xy = e(X,
v
ˆ
C)
˜
A)
˜
B)
˜
ZB)
7) The client acts as prover and the server as veriﬁer in the
zero-knowledge proof of knowledge
(cid:2)) | v
PoK{(d, r, r
(The client uses r
8) The server sets σ
1/(d+t)}.
= vxv
r2 .) If the proof fails, login fails.
r(cid:2)
(cid:2) = 1
(cid:2) = (σ.cur ∪ {Yd(t)}, σ.next).
xy ∧ Yd(t) = gT
(cid:2)r
d
xyv
Link: ((σ
(cid:2)
, next
(cid:2)), φ) ←
(cid:5)Re-UpS(ssk, σ, next, t), Re-UpC(sk, spk, t)(cid:6)
1) The client with sk = (s, d, r) submits Yd(t) =
2) The server checks that Yd(t) ∈ σ.cur and Yd(t + 1) (cid:7)∈
, Yd(t + 1) = g
1/(d+(t+1))
T
to the server.
1/(d+t)
T
g
σ.next. If not, linking fails.
3) The client acts as prover and the server as veriﬁer in the
zero-knowledge proof of knowledge
PoK{d | Yd(t) = g
If the proof fails, linking fails.
1/(d+t)
T
4) The server adds Yd(t + 1) to σ.next.
∧ Yd(t + 1) = g
1/(d+(t+1))
T
}.
(cid:2)
(cid:2)
End epoch: (σ
, cur
(cid:2) = (σ.next,{}).
σ
Proofs of the following can be found in the full version of
(cid:2)) ← EndEpoch(σ, cur, next)
, next
this paper [18].
Theorem (soundness): If the LRSW assumption holds in G,
the construction above is sound.
Theorem (anonymity): If the DDHI assumption holds in G,
the construction above is anonymous.
C. Efﬁciency improvements
Our protocol incorporates several efﬁciency improvements
over the base primitives that it uses:
Improved CL signatures: The base CL signature incorpo-
rates a ﬁfth element: Az ≡ ZA in our notation, where A is
part of a client sk, and z ∈ ssk. ZA, and a blinded version
323
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 11:54:46 UTC from IEEE Xplore.  Restrictions apply. 
˜
ZA that the client would need to send in proof of knowledge
of a signature, can be eliminated by restructuring checks of
signature validity. Instead of checking
e( ˜
A, Z) = e(g,
ZA and ˜
˜
ZA),
e( ˜
ZA, Y ) = e(g,
˜
ZB),
to prove that ˜
˜
ZA and the former check, and for the latter, check
ZB are formed correctly, we eliminate
e( ˜
B, Z) = e(g,
˜
ZB)