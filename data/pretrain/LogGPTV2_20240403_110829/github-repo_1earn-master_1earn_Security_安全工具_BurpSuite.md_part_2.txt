### 工具与插件

#### DNS Log
- **[hackvertor/taborator](https://github.com/hackvertor/taborator)**
- **[NetSPI/BurpCollaboratorDNSTunnel](https://github.com/NetSPI/BurpCollaboratorDNSTunnel)**
- **[nccgroup/CollaboratorPlusPlus](https://github.com/nccgroup/CollaboratorPlusPlus)**
- **[PortSwigger/collaborator-everywhere](https://github.com/PortSwigger/collaborator-everywhere)**

#### 数据加密
- **[c0ny1/jsEncrypter](https://github.com/c0ny1/jsEncrypter)**
  - 使用 PhantomJS 调用前端加密函数对数据进行加密，方便对加密数据输入点进行 fuzz。
  - [编写加密传输爆破插件jsEncrypter](http://gv7.me/articles/2017/jsEncrypter/)

#### 爆破增强
- **[PortSwigger/turbo-intruder](https://github.com/portswigger/turbo-intruder)**
  - Burp 官方开发的 Intruder 模块增强版。
  - [Turbo Intruder: BurpSuite 高速 Intruder 插件介绍](https://www.freebuf.com/sectool/195912.html)
  - [Burp - Turbo Intruder](https://www.cnblogs.com/muxueblog/p/14035477.html)

#### 分块传输
- **[c0ny1/chunked-coding-converter](https://github.com/c0ny1/chunked-coding-converter)**
  - 分块传输辅助插件，用于绕过 WAF。

#### 绕过 WAF
- **Hackvertor**
  - 构造绕过 WAF 的 payload 并破解 XOR 加密。
  - [利用 Burp 插件 Hackvertor 绕过 WAF 并破解 XOR 加密](https://www.4hou.com/tools/14353.html)

#### AES 加密
- **[ekgg/Caidao-AES-Version](https://github.com/ekgg/Caidao-AES-Version)**
  - 一个 Burp 插件，实现用 AES 算法透明加密原版 Caidao.exe 与服务器端交互的 HTTP 数据流。

#### SQL 注入
- **[c0ny1/sqlmap4burp-plus-plus](https://github.com/c0ny1/sqlmap4burp-plus-plus)**
  - 一款兼容 Windows, Mac, Linux 多个系统平台的 Burp 与 sqlmap 联动插件。
  - [重构 sqlmap4burp 插件](http://gv7.me/articles/2019/refactoring-sqlmap4burp/)

#### 图形验证码
- **[bit4woo/reCAPTCHA](https://github.com/bit4woo/reCAPTCHA)**
  - 一个 Burp 插件，自动识别图形验证码，并用于 Intruder 中的 Payload。

#### 流量转发
- **[c0ny1/passive-scan-client](https://github.com/c0ny1/passive-scan-client)**
  - Burp 被动扫描流量转发插件。

#### Protobuf 解码
- **[nccgroup/blackboxprotobuf](https://github.com/nccgroup/blackboxprotobuf)**
  - 用于解码和修改任意的 protobuf 消息，而不需要定义 protobuf 类型。

#### 验证码识别
- **[c0ny1/captcha-killer](https://github.com/c0ny1/captcha-killer)**
  - 验证码识别接口调用插件。

#### IP 伪造
- **[TheKingOfDuck/burpFakeIP](https://github.com/TheKingOfDuck/burpFakeIP)**
  - 通过修改 HTTP 请求头伪造 IP 的插件。

#### AES 解密
- **[Ebryx/AES-Killer](https://github.com/Ebryx/AES-Killer)**
  - 可即时解密移动应用程序的 AES 加密流量的 Burp 插件。

#### HTTP 数据包头修改
- **[c0ny1/HTTPHeadModifer](https://github.com/c0ny1/HTTPHeadModifer)**
  - 一款快速修改 HTTP 数据包头的 Burp Suite 插件。

#### JSON 格式化
- **JSON Beautifier**
  - 格式化查看 JSON 数据。

#### 前端加密爆破
- **[whwlsfb/BurpCrypto](https://github.com/whwlsfb/BurpCrypto)**
  - 支持多种加密算法或直接执行 JS 代码的用于爆破前端加密的 BurpSuite 插件。

#### Burp 与 Frida 协作
- **[federicodotta/Brida](https://github.com/federicodotta/Brida)**
  - 用于 Burp Suite 与 Frida 协作的插件。

#### 扩展管理
- **[hvqzao/burp-wildcard](https://github.com/hvqzao/burp-wildcard)**
  - 旨在通过劫持扩展标签页来简化 Burp 扩展标签页的管理。

#### TLS 优化
- **[sleeyax/burp-awesome-tls](https://github.com/sleeyax/burp-awesome-tls)**
  - 修复 Burp Suite 的糟糕 TLS 栈并模拟任何浏览器指纹。

#### Unicode 自动转码
- **[KagamigawaMeguri/burp-UnicodeAutoDecode](https://github.com/KagamigawaMeguri/burp-UnicodeAutoDecode)**
  - Unicode 自动转码为中文。

#### 自动重放
- **[nccgroup/AutoRepeater](https://github.com/nccgroup/AutoRepeater)**
- **[winezer0/passive-scan-client-plus](https://github.com/winezer0/passive-scan-client-plus)**
  - Burp 被动扫描流量转发插件。

### 漏洞检测
- **Authz - 快速探测越权**
- **[wuntee/BurpAuthzPlugin](https://github.com/wuntee/BurpAuthzPlugin)**
  - 探测越权漏洞的插件。
- **[PortSwigger/http-request-smuggler](https://github.com/PortSwigger/http-request-smuggler)**
  - HTTP 请求走私辅助工具。
- **[ozzi-/JWT4B](https://github.com/ozzi-/JWT4B)**
  - 即时操作 JWT，自动执行针对 JWT 的常见攻击。
- **[doyensec/inql](https://github.com/doyensec/inql)**
  - 用于 GraphQL 安全测试的扩展。
- **Wsdler**
  - 解析 WSDL 请求，以便使用 Repeater 和 Scanner 对 WSDL 请求进行测试。
- **[API-Security/APIKit](https://github.com/API-Security/APIKit)**
  - Discovery, Scan and Audit APIs Toolkit All In One。
- **[wagiro/BurpBounty](https://github.com/wagiro/BurpBounty)**
  - 通过直观的图形界面自定义规则，快速简单地改进主动和被动扫描器。
  - [Sy3Omda/burp-bounty](https://github.com/Sy3Omda/burp-bounty)
    - Burp Bounty 是一个扩展 Burp Suite 的插件，用于改进 Burp 扫描器。
- **[smxiazi/xia_sql](https://github.com/smxiazi/xia_sql)**
  - xia SQL (瞎注) burp 插件，在每个参数后面添加单引号、双引号，进行简单的注入判断。
- **[ethicalhackingplayground/ssrf-king](https://github.com/ethicalhackingplayground/ssrf-king)**
  - SSRF 插件，自动化 SSRF 检测。
- **[ilmila/J2EEScan](https://github.com/ilmila/J2EEScan)**
  - J2EEScan 是一个 Burp Suite 代理插件，用于提高 J2EE 应用程序渗透测试的覆盖率。
- **[F6JO/RouteVulScan](https://github.com/F6JO/RouteVulScan)**
  - 递归式被动检测脆弱路径的 Burp 插件。

#### Shiro 检测
- **[pmiaowu/BurpShiroPassiveScan](https://github.com/pmiaowu/BurpShiroPassiveScan)**
  - 一款基于 BurpSuite 的被动式 Shiro 检测插件。
- **[bigsizeme/shiro-check](https://github.com/bigsizeme/shiro-check)**
  - Shiro 反序列化检查 Burp 插件。

#### Fastjson 检测
- **[p1g3/Fastjson-Scanner](https://github.com/p1g3/Fastjson-Scanner)**
  - 一个 Burp 扩展，用于查找使用 fastjson 的地方。
- **[Maskhe/FastjsonScan](https://github.com/Maskhe/FastjsonScan)**
- **[bigsizeme/fastjson-check](https://github.com/bigsizeme/fastjson-check)**
  - fastjson 被动扫描、不出网 payload 生成。
- **[pmiaowu/BurpFastJsonScan](https://github.com/pmiaowu/BurpFastJsonScan)**
  - 一款基于 BurpSuite 的被动式 FastJson 检测插件。

#### Log4j 检测
- **[whwlsfb/Log4j2Scan](https://github.com/whwlsfb/Log4j2Scan)**
  - Log4j2 远程代码执行漏洞，BurpSuite 被动扫描插件。
- **[f0ng/log4j2burpscanner](https://github.com/f0ng/log4j2burpscanner)**
  - CVE-2021-44228 Log4j2 BurpSuite 扫描器，支持自定义 ceye.io API 或其他 API，包括内部网络。

### 插件开发
- **[rsrdesarrollo/generator-burp-extension](https://github.com/rsrdesarrollo/generator-burp-extension)**
  - 帮助 Burp 插件开发的工具。

## 安装及维护
### Linux
以 Kali 为例，Kali 自带的是 OpenJDK，不支持新版 Burp。自行下载 [Oracle JDK](https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html)。
安装过程见 [Power-Linux](../../Integrated/Linux/Power-Linux.md##JDK)。
安装完成后，运行 `java -jar .jar`。

### macOS
- [macOS 下如何优雅的使用 Burp Suite](https://www.sqlsec.com/2019/11/macbp.html)

### 证书配置
对于 HTTPS 包需要在浏览器中导入证书进行解密。

#### 证书
- **Firefox**
  - 浏览器访问 `burp/`，下载 `cacert.der` 证书。
  - Firefox 到隐私与安全 -> 证书 -> 查看证书 -> 导入 -> 一路下一步安装，证书存储选择存储在“受信任的根证书颁发机构”，全部勾选信任。

- **Chrome**
  - Proxy -- Options -- Proxy Listeners 中 import/export CA certification 导出证书，选择 Certificate in DER format。
  - 打开 Chrome 浏览器的设置选项，找到管理证书的按钮，在受信任一栏中选择导入，将刚才保存在本地的证书导入进去。
  - ![](../../../assets/img/Security/安全工具/BurpSuite/37.png)
  - ![](../../../assets/img/Security/安全工具/BurpSuite/38.png)

## Target
Burp Target 组件主要包含站点地图、目标域、Target 工具三部分，帮助渗透测试人员更好地了解目标应用的整体状况、当前的工作涉及哪些目标域、分析可能存在的攻击面等信息。

### Site Map
Site Map 的左边显示访问的 URL，按照网站的层级和深度树形展示整个应用系统的结构和关联其他域的 URL 情况；右边显示某个 URL 被访问的明细列表，共访问哪些 URL，请求和应答内容分别是什么，都有着详实的记录。基于左边的树形结构，可以选择某个分支，对指定的路径进行扫描和抓取。
同时，也可以将某个域直接加入 Target Scope 中。

**右键--Compare site maps**
站点比较是 Burp 提供给渗透测试人员对站点进行动态分析的利器。我们可以在以下三种场景中使用：
1. 同一个帐号，具有不同的权限，比较两次请求结果的差异。
2. 两个不同的帐号，具有不同的权限，比较两次请求结果的差异。
3. 两个不同的帐号，具有相同的权限，比较两次请求结果的差异。

由于站点比较是在两个站点地图之间进行的，所以在配置过程中需要分别指定 Site Map 1 和 Site Map 2。
- **Site Map 1** 默认为当前会话。
  - ![](../../../assets/img/Security/安全工具/BurpSuite/5.png)
  - ![](../../../assets/img/Security/安全工具/BurpSuite/6.png)
- **Site Map 2** 有三种方式：从 Burp project 中读取、之前保存下来的 Burp Suite 站点记录、重新发生一次请求作为 Site Map 2。
  - ![](../../../assets/img/Security/安全工具/BurpSuite/7.png)
  - 如果选择第三种方式，则进入请求消息设置界面，指定通信的并发线程数、失败重试次数、暂停的间隙时间。
  - ![](../../../assets/img/Security/安全工具/BurpSuite/8.png)
- 设置完 Site Map 1 和 Site Map 2 之后，进入请求消息匹配设置。可以通过 URL 文件路径、HTTP 请求方式、请求参数、请求头、请求 Body 来对匹配条件进行过滤。
  - ![](../../../assets/img/Security/安全工具/BurpSuite/9.png)
- 设置请求匹配条件后，进入应答比较设置界面。可以设置哪些内容需要进行比较，如响应头、form 表单域、空格、MIME 类型。
  - ![](../../../assets/img/Security/安全工具/BurpSuite/10.png)

**右键--Engagement tools**