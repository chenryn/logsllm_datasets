.ir type ,
which specifies the communication semantics.
currently defined types
are:
.tp 16
.b sock_stream
provides sequenced, reliable, two-way, connection-based byte streams.
an out-of-band data transmission mechanism may be supported.
.tp
.b sock_dgram
supports datagrams (connectionless, unreliable messages of a fixed
maximum length).
.tp
.b sock_seqpacket
provides a sequenced, reliable, two-way connection-based data
transmission path for datagrams of fixed maximum length; a consumer is
required to read an entire packet with each input system call.
.tp
.b sock_raw
provides raw network protocol access.
.tp
.b sock_rdm
provides a reliable datagram layer that does not guarantee ordering.
.tp
.b sock_packet
obsolete and should not be used in new programs;
see
.br packet (7).
.pp
some socket types may not be implemented by all protocol families.
.pp
since linux 2.6.27, the
.i type
argument serves a second purpose:
in addition to specifying a socket type,
it may include the bitwise or of any of the following values,
to modify the behavior of
.br socket ():
.tp 16
.b sock_nonblock
set the
.br o_nonblock
file status flag on the open file description (see
.br open (2))
referred to by the new file descriptor.
using this flag saves extra calls to
.br fcntl (2)
to achieve the same result.
.tp
.b sock_cloexec
set the close-on-exec
.rb ( fd_cloexec )
flag on the new file descriptor.
see the description of the
.b o_cloexec
flag in
.br open (2)
for reasons why this may be useful.
.pp
the
.i protocol
specifies a particular protocol to be used with the socket.
normally only a single protocol exists to support a particular
socket type within a given protocol family, in which case
.i protocol
can be specified as 0.
however, it is possible that many protocols may exist, in
which case a particular protocol must be specified in this manner.
the protocol number to use is specific to the \*(lqcommunication domain\*(rq
in which communication is to take place; see
.br protocols (5).
see
.br getprotoent (3)
on how to map protocol name strings to protocol numbers.
.pp
sockets of type
.b sock_stream
are full-duplex byte streams.
they do not preserve
record boundaries.
a stream socket must be in
a
.i connected
state before any data may be sent or received on it.
a connection to
another socket is created with a
.br connect (2)
call.
once connected, data may be transferred using
.br read (2)
and
.br write (2)
calls or some variant of the
.br send (2)
and
.br recv (2)
calls.
when a session has been completed a
.br close (2)
may be performed.
out-of-band data may also be transmitted as described in
.br send (2)
and received as described in
.br recv (2).
.pp
the communications protocols which implement a
.b sock_stream
ensure that data is not lost or duplicated.
if a piece of data for which
the peer protocol has buffer space cannot be successfully transmitted
within a reasonable length of time, then the connection is considered
to be dead.
when
.b so_keepalive
is enabled on the socket the protocol checks in a protocol-specific
manner if the other end is still alive.
a
.b sigpipe
signal is raised if a process sends or receives
on a broken stream; this causes naive processes,
which do not handle the signal, to exit.
.b sock_seqpacket
sockets employ the same system calls as
.b sock_stream
sockets.
the only difference is that
.br read (2)
calls will return only the amount of data requested,
and any data remaining in the arriving packet will be discarded.
also all message boundaries in incoming datagrams are preserved.
.pp
.b sock_dgram
and
.b sock_raw
sockets allow sending of datagrams to correspondents named in
.br sendto (2)
calls.
datagrams are generally received with
.br recvfrom (2),
which returns the next datagram along with the address of its sender.
.pp
.b sock_packet
is an obsolete socket type to receive raw packets directly from the
device driver.
use
.br packet (7)
instead.
.pp
an
.br fcntl (2)
.b f_setown
operation can be used to specify a process or process group to receive a
.b sigurg
signal when the out-of-band data arrives or
.b sigpipe
signal when a
.b sock_stream
connection breaks unexpectedly.
this operation may also be used to set the process or process group
that receives the i/o and asynchronous notification of i/o events via
.br sigio .
using
.b f_setown
is equivalent to an
.br ioctl (2)
call with the
.b fiosetown
or
.b siocspgrp
argument.
.pp
when the network signals an error condition to the protocol module (e.g.,
using an icmp message for ip) the pending error flag is set for the socket.
the next operation on this socket will return the error code of the pending
error.
for some protocols it is possible to enable a per-socket error queue
to retrieve detailed information about the error; see
.b ip_recverr
in
.br ip (7).
.pp
the operation of sockets is controlled by socket level
.ir options .
these options are defined in
.ir  .
the functions
.br setsockopt (2)
and
.br getsockopt (2)
are used to set and get options.
.sh return value
on success, a file descriptor for the new socket is returned.
on error, \-1 is returned, and
.i errno
is set to indicate the error.
.sh errors
.tp
.b eacces
permission to create a socket of the specified type and/or protocol
is denied.
.tp
.b eafnosupport
the implementation does not support the specified address family.
.tp
.b einval
unknown protocol, or protocol family not available.
.tp
.b einval
.\" since linux 2.6.27
invalid flags in
.ir type .
.tp
.b emfile
the per-process limit on the number of open file descriptors has been reached.
.tp
.b enfile
the system-wide limit on the total number of open files has been reached.
.tp
.br enobufs " or " enomem
insufficient memory is available.
the socket cannot be
created until sufficient resources are freed.
.tp
.b eprotonosupport
the protocol type or the specified protocol is not
supported within this domain.
.pp
other errors may be generated by the underlying protocol modules.
.sh conforming to
posix.1-2001, posix.1-2008, 4.4bsd.
.pp
the
.b sock_nonblock
and
.b sock_cloexec
flags are linux-specific.
.pp
.br socket ()
appeared in 4.2bsd.
it is generally portable to/from
non-bsd systems supporting clones of the bsd socket layer (including
system\ v variants).
.sh notes
the manifest constants used under 4.x bsd for protocol families
are
.br pf_unix ,
.br pf_inet ,
and so on, while
.br af_unix ,
.br af_inet ,
and so on are used for address
families.
however, already the bsd man page promises: "the protocol
family generally is the same as the address family", and subsequent
standards use af_* everywhere.
.sh examples
an example of the use of
.br socket ()
is shown in
.br getaddrinfo (3).
.sh see also
.br accept (2),
.br bind (2),
.br close (2),
.br connect (2),
.br fcntl (2),
.br getpeername (2),
.br getsockname (2),
.br getsockopt (2),
.br ioctl (2),
.br listen (2),
.br read (2),
.br recv (2),
.br select (2),
.br send (2),
.br shutdown (2),
.br socketpair (2),
.br write (2),
.br getprotoent (3),
.br address_families (7),
.br ip (7),
.br socket (7),
.br tcp (7),
.br udp (7),
.br unix (7)
.pp
\(lqan introductory 4.3bsd interprocess communication tutorial\(rq
and
\(lqbsd interprocess communication tutorial\(rq,
reprinted in
.i unix programmer's supplementary documents volume 1.
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.\" copyright (c) 1995 jim van zandt 
.\"
.\" %%%license_start(gplv2+_doc_full)
.\" this is free documentation; you can redistribute it and/or
.\" modify it under the terms of the gnu general public license as
.\" published by the free software foundation; either version 2 of
.\" the license, or (at your option) any later version.
.\"
.\" the gnu general public license's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" this manual is distributed in the hope that it will be useful,
.\" but without any warranty; without even the implied warranty of
.\" merchantability or fitness for a particular purpose.  see the
.\" gnu general public license for more details.
.\"
.\" you should have received a copy of the gnu general public
.\" license along with this manual; if not, see
.\" .
.\" %%%license_end
.\"
.\" modified 2001-12-13, martin schulze 
.\" added ttyname_r, aeb, 2002-07-20
.\"
.th ttyname 3 2021-03-22 "linux" "linux programmer's manual"
.sh name
ttyname, ttyname_r \- return name of a terminal
.sh synopsis
.nf
.b #include 
.pp
.bi "char *ttyname(int " fd );
.bi "int ttyname_r(int " fd ", char *" buf ", size_t " buflen );
.fi
.sh description
the function
.br ttyname ()
returns a pointer to the null-terminated pathname of the terminal device
that is open on the file descriptor \fifd\fp, or null on error
(for example, if \fifd\fp is not connected to a terminal).
the return value may point to static data, possibly overwritten by the
next call.
the function
.br ttyname_r ()
stores this pathname in the buffer
.i buf
of length
.ir buflen .
.sh return value
the function
.br ttyname ()
returns a pointer to a pathname on success.
on error, null is returned, and
.i errno
is set to indicate the error.
the function
.br ttyname_r ()
returns 0 on success, and an error number upon error.
.sh errors
.tp
.b ebadf
bad file descriptor.
.tp
.\" glibc commit 15e9a4f378c8607c2ae1aa465436af4321db0e23
.b enodev
.i fd
refers to a slave pseudoterminal device
but the corresponding pathname could not be found (see notes).
.tp
.b enotty
.i fd
does not refer to a terminal device.
.tp
.b erange
.rb ( ttyname_r ())
.i buflen
was too small to allow storing the pathname.
.sh attributes
for an explanation of the terms used in this section, see
.br attributes (7).
.ad l
.nh
.ts
allbox;
lbx lb lb
l l l.
interface	attribute	value
t{
.br ttyname ()
t}	thread safety	mt-unsafe race:ttyname
t{
.br ttyname_r ()
t}	thread safety	mt-safe
.te
.hy
.ad
.sp 1
.sh conforming to
posix.1-2001, posix.1-2008, 4.2bsd.
.sh notes
a process that keeps a file descriptor that refers to a
.br pts (4)
device open when switching to another mount namespace that uses a different
.i /dev/ptmx
instance may still accidentally find that a device path of the same name
for that file descriptor exists.
however, this device path refers to a different device and thus
can't be used to access the device that the file descriptor refers to.
calling
.br ttyname ()
or
.br ttyname_r ()
on the file descriptor in the new mount namespace will cause these
functions to return null and set
.i errno
to
.br enodev .
.sh see also
.br tty (1),
.br fstat (2),
.br ctermid (3),
.br isatty (3),
.br pts (4)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.so man2/capget.2
.\" copyright (c) 2007 by michael kerrisk 
.\"
.\" %%%license_start(verbatim)
.\" permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" since the linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  the author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  the author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%license_end
.\"
.th sgetmask 2  2021-03-22 "linux" "linux programmer's manual"
.sh name
sgetmask, ssetmask \- manipulation of signal mask (obsolete)
.sh synopsis
.nf
.br "#include " "      /* definition of " sys_* " constants */"
.b #include 
.pp
.b "long syscall(sys_sgetmask, void);"
.bi "long syscall(sys_ssetmask, long " newmask );
.fi
.pp
.ir note :
glibc provides no wrappers for these functions,
necessitating the use of
.br syscall (2).
.sh description
these system calls are obsolete.
.ir "do not use them" ;
use
.br sigprocmask (2)
instead.
.pp
.br sgetmask ()
returns the signal mask of the calling process.
.pp
.br ssetmask ()
sets the signal mask of the calling process to the value given in
.ir newmask .
the previous signal mask is returned.
.pp
the signal masks dealt with by these two system calls
are plain bit masks (unlike the
.i sigset_t
used by
.br sigprocmask (2));
use
.br sigmask (3)
to create and inspect these masks.
.sh return value
.br sgetmask ()
always successfully returns the signal mask.
.br ssetmask ()
always succeeds, and returns the previous signal mask.
.sh errors
these system calls always succeed.
.sh versions
since linux 3.16,
.\" f6187769dae48234f3877df3c4d99294cc2254fa
support for these system calls is optional,
depending on whether the kernel was built with the
.b config_sgetmask_syscall
option.
.sh conforming to
these system calls are linux-specific.
.sh notes
these system calls are unaware of signal numbers greater than 31
(i.e., real-time signals).
.pp
these system calls do not exist on x86-64.
.pp
it is not possible to block
.b sigstop
or
.br sigkill .
.sh see also
.br sigprocmask (2),
.br signal (7)
.sh colophon
this page is part of release 5.13 of the linux
.i man-pages
project.
a description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
.\" copyright (c) 2002 andries brouwer 
.\"
.\" %%%license_start(verbatim)
.\" permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" since the linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  the author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from