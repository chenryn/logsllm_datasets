### Socket Communication Semantics

The `.ir type` argument specifies the communication semantics for a socket. The currently defined types include:

- **SOCK_STREAM**: Provides sequenced, reliable, two-way, connection-based byte streams. An out-of-band data transmission mechanism may be supported.
- **SOCK_DGRAM**: Supports datagrams (connectionless, unreliable messages of a fixed maximum length).
- **SOCK_SEQPACKET**: Provides a sequenced, reliable, two-way connection-based data transmission path for datagrams of a fixed maximum length. The consumer must read an entire packet with each input system call.
- **SOCK_RAW**: Provides raw network protocol access.
- **SOCK_RDM**: Provides a reliable datagram layer that does not guarantee ordering.
- **SOCK_PACKET**: This type is obsolete and should not be used in new programs. Refer to `packet(7)` for alternatives.

**Note:** Not all protocol families support all socket types.

### Additional Type Flags (Linux 2.6.27+)

Since Linux 2.6.27, the `type` argument can also include bitwise OR of the following values to modify the behavior of `socket()`:

- **SOCK_NONBLOCK**: Sets the `O_NONBLOCK` file status flag on the open file description. This saves extra calls to `fcntl(2)`.
- **SOCK_CLOEXEC**: Sets the close-on-exec (`FD_CLOEXEC`) flag on the new file descriptor. See `open(2)` for more details.

### Protocol Specification

The `protocol` argument specifies a particular protocol to be used with the socket. Typically, only one protocol exists for a given socket type within a protocol family, in which case `protocol` can be set to 0. However, if multiple protocols are available, a specific protocol number must be provided. The protocol number is specific to the "communication domain" and can be mapped from names to numbers using `getprotoent(3)`.

### SOCK_STREAM Sockets

Sockets of type `SOCK_STREAM` are full-duplex byte streams that do not preserve record boundaries. A stream socket must be in a connected state before data can be sent or received. A connection is established using `connect(2)`, and data transfer can be done using `read(2)`, `write(2)`, or variants like `send(2)` and `recv(2)`. When a session is complete, `close(2)` is called. Out-of-band data can be transmitted and received as described in `send(2)` and `recv(2)`.

The communication protocols for `SOCK_STREAM` ensure that data is not lost or duplicated. If a piece of data cannot be successfully transmitted within a reasonable time, the connection is considered dead. Enabling `SO_KEEPALIVE` on the socket allows the protocol to check if the other end is still alive. A `SIGPIPE` signal is raised if a process sends or receives on a broken stream, causing naive processes to exit.

### SOCK_SEQPACKET Sockets

`SOCK_SEQPACKET` sockets use the same system calls as `SOCK_STREAM` sockets. The key difference is that `read(2)` calls return only the amount of data requested, discarding any remaining data in the arriving packet. Message boundaries in incoming datagrams are preserved.

### SOCK_DGRAM and SOCK_RAW Sockets

`SOCK_DGRAM` and `SOCK_RAW` sockets allow sending datagrams to correspondents named in `sendto(2)` calls. Datagrams are generally received with `recvfrom(2)`, which returns the next datagram along with the sender's address.

### SOCK_PACKET Sockets

`SOCK_PACKET` is an obsolete socket type for receiving raw packets directly from the device driver. Use `packet(7)` instead.

### Error Handling

When the network signals an error condition to the protocol module (e.g., using an ICMP message for IP), the pending error flag is set for the socket. The next operation on this socket will return the error code. For some protocols, it is possible to enable a per-socket error queue to retrieve detailed information about the error; see `IP_RECVERR` in `ip(7)`.

### Socket Options

Socket operations are controlled by socket-level options. These options are defined in `<sys/socket.h>`. The functions `setsockopt(2)` and `getsockopt(2)` are used to set and get these options.

### Return Value

On success, `socket()` returns a file descriptor for the new socket. On error, -1 is returned, and `errno` is set to indicate the error.

### Errors

- **EACCES**: Permission to create a socket of the specified type and/or protocol is denied.
- **EAFNOSUPPORT**: The implementation does not support the specified address family.
- **EINVAL**: Unknown protocol, or protocol family not available.
- **EMFILE**: The per-process limit on the number of open file descriptors has been reached.
- **ENFILE**: The system-wide limit on the total number of open files has been reached.
- **ENOBUFS** or **ENOMEM**: Insufficient memory is available.
- **EPROTONOSUPPORT**: The protocol type or the specified protocol is not supported within this domain.

Other errors may be generated by the underlying protocol modules.

### Conformance

POSIX.1-2001, POSIX.1-2008, 4.4BSD.

### Notes

- The `SOCK_NONBLOCK` and `SOCK_CLOEXEC` flags are Linux-specific.
- `socket()` appeared in 4.2BSD and is generally portable to/from non-BSD systems supporting clones of the BSD socket layer (including System V variants).

### Examples

An example of the use of `socket()` is shown in `getaddrinfo(3)`.

### See Also

- `accept(2)`
- `bind(2)`
- `close(2)`
- `connect(2)`
- `fcntl(2)`
- `getpeername(2)`
- `getsockname(2)`
- `getsockopt(2)`
- `ioctl(2)`
- `listen(2)`
- `read(2)`
- `recv(2)`
- `select(2)`
- `send(2)`
- `shutdown(2)`
- `socketpair(2)`
- `write(2)`
- `getprotoent(3)`
- `address_families(7)`
- `ip(7)`
- `socket(7)`
- `tcp(7)`
- `udp(7)`
- `unix(7)`

### References

- "An Introductory 4.3BSD Interprocess Communication Tutorial"
- "BSD Interprocess Communication Tutorial," reprinted in *UNIX Programmer's Supplementary Documents Volume 1*.

### Colophon

This page is part of release 5.13 of the Linux `man-pages` project. A description of the project, information about reporting bugs, and the latest version of this page can be found at [https://www.kernel.org/doc/man-pages/](https://www.kernel.org/doc/man-pages/).