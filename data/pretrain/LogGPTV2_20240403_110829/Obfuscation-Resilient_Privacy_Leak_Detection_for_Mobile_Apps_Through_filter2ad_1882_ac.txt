ActivityManager.getMemoryInfo() for information
about available memory.
In order
Encrypted values.
to decrypt encrypted con-
tent, we hook the Android Crypto APIs (i.e., Cipher,
MessageDigest, Mac) and store the arguments and return
value of each method. Our module parses the API traces to
build a decryption map that allows it to map ciphertext to the
corresponding original plaintext. Since the ﬁnal ciphertext can
be the result of many Crypto API calls, AGRIGENTO combines
the values tracking the temporal data dependency. Figure 4
shows an example of how we use Crypto API traces to create
a map between encrypted and decrypted content. Speciﬁcally,
the example shows how AGRIGENTO creates an entry in the
decryption map by tracing the API calls to a Cipher object
and by concatenating the arguments of such calls ( update(),
doFinal()).
Patching JavaScript code. We observed many applications
and ad libraries downloading and executing JavaScript (JS)
code. Often, this code uses random number generation, time-
related, and performance-related functions. We implemented a
module in the proxy that inspects the JS code and patches it
to remove non-determinism. Speciﬁcally, this module injects
a custom random number generation function that uses a
ﬁxed seed, and replaces calls to Math.random() and
getRandomValues() with our custom generator. Also,
the JS injector replaces calls to time-related functions (e.g.,
Date.now()) with calls to a custom, injected timestamp
generator, and sets constant values in global performance
structures such as timing.domLoading.
B. Network Setup
Our implementation of AGRIGENTO captures the HTTP
trafﬁc and inspects GET and POST requests using a proxy based
on the mitmproxy library [2]. In order to intercept HTTPS
trafﬁc, we installed a CA certiﬁcate on the instrumented device.
6
0x4432cd80  = Cipher.getInstance(0x48a67fe0)*0x48a67fe0: "AES/CBC/PKCS5Padding"0x4432cd80.init(1, 0x48a9fac0, 0x48d448ec)0x48ae98f0 = 0x4432cd80.update(0x485affb74)*0x485affb74: "Plaintext"*0x48ae98f0: \xea\x37\xfb\xfa\xc0\xcc\x47\x46\xce\x01    \x25\x0a\x82\x5b\x6b\x380x48aeb6f0 = 0x4432cd80.doFinal(0x485af740)*0x485af740: "Content"*0x48aeb6f0: \xf5\xff\x0a\xab\xf0\x5b\xd9\xd5\x6a\x0f    \x6c\xda\x30\xaf\xf1\x3a\xea\x37\xfb\xfa\xc0\xcc\x47\x46\xce\x01\x25\x0a\x82\x5b\x6b\x38\xf5\xff\x0a\xab\xf0\x5b\xd9\xd5\x6a\x0f\x6c\xda\x30\xaf\xf1\x3a  "Plaintext Content"Decryption mapdiffs ← Ø
for http f low ∈ context trace do
if http f low /∈ summary then
f ield ← getMissingField(http f low, summary)
f ields ← getSamePositionField(f ield, summary)
diffs.add(COMPARE(f ield, f ields))
Algorithm 1 Differential Analysis.
1: procedure DIFFERENTIALANALYSIS(context trace, summary)
2:
3:
4:
5:
6:
7:
8:
9:
10: procedure COMPARE(f ield, f ields)
11:
12:
13:
14:
15:
16:
17:
18:
19:
20:
21:
22:
23:
24:
25:
26:
27:
diffs ← Ø
most similar ← mostSimilar(f ield, f ields)
if isKnownDataStructure(f ield, most similar) then
subf ields ← parseDataStructure(f ield)
similar subf ields ← parseDataStructure(most similar)
for i ∈ subf ields do
alignment ← align(f ield, most similar)
regex ← getRegex(alignment)
diffs ← getRegexMatches(f ield)
diffs ← removeNetworkValues(diffs)
diffs ← whitelistBenignLibaries(diffs)
return diffs
return diffs
diffs.add(COMPARE(subf ieldsi, similar subf ieldsi))
if isKnownEncoding(f ield, most similar) then
return diffs
f ield ← decode(f ield)
most similar ← decode(most similar)
D. Modifying Sources of Private Information
In our implementation we track the following sources
of private information: Android ID, contacts, ICCID, IMEI,
IMSI, location, MAC address, and phone number. For IC-
CID, IMEI, IMSI, MAC address and phone number we
leverage the Xposed module to alter the return values of
the Android APIs that allow to retrieve such data (e.g.,
TelephonyManager.getDeviceId()). For
the An-
droid ID we directly modify the value in the database in which
it is stored, while to alter the contact list we generate intents
through adb. We also use mock locations, which allow to set
a fake position of the device for debug purposes.
E. Differential Analysis
In the second phase of our approach, AGRIGENTO modiﬁes
the input sources of private information as described in the
previous section, reruns the app in the instrumented environment,
and compares the new contextualized trace with the network
behavior summary to identify changes in the network trafﬁc
caused by the input manipulation.
We implemented the differential analysis following the steps
deﬁned in Algorithm 1. For each HTTP ﬂow in the contextual-
ized trace collected from the ﬁnal run, AGRIGENTO navigates
the tree and checks if each ﬁeld of the given ﬂow is part of the
tree. If it does not ﬁnd an exact match, AGRIGENTO compares
the new ﬁeld with the ﬁelds in the same position in the tree
(e.g., requests to the same domain, path, and key). Speciﬁcally,
AGRIGENTO performs the comparison between the new ﬁeld
and the most similar ﬁeld among those in the same position in
the tree. During the comparison phase, AGRIGENTO recognizes
patterns of known data structures such as JSON. If any are
found, AGRIGENTO parses them and performs the comparison
on each subﬁeld. This step is useful to improve the alignment
quality and it also improves the performance since aligning
7
Fig. 5. Example of the tree-based data structure used to model a network
behavior summary.
Furthermore, to be able to capture trafﬁc also in the case apps
use certiﬁcate pinning, we installed JustTrustMe [1] on the
client device, which is an Xposed module that disables certiﬁ-
cate checking by patching the Android APIs used to perform
the check (e.g., getTrustManagers()). However, if an
app performs the certiﬁcate check using custom functionality
or native code, we cannot intercept the trafﬁc.
We limit our study to HTTP(S) trafﬁc (further referred to
both as HTTP), since related work found this to be the protocol
of choice for the majority (77.77%) of Android apps [11]. How-
ever, this is only a limitation of our prototype implementation of
AGRIGENTO, and not a fundamental limitation of our approach.
Finally, to ﬁlter only the network trafﬁc generated by the
analyzed app, we use iptables to mark packets generated
by the UID of the app, and route only those packets to our
proxy.
C. Network Behavior Summary
We model the network behavior summary using a tree-based
data structure, which contains the HTTP GET and POST ﬂows
from all the contextualized traces. The tree has four layers. The
ﬁrst layer contains all the domain names of the HTTP ﬂows.
The second layer contains the paths of the HTTP ﬂows recorded
for each domain. The third and fourth layers contain key-value
pairs from the HTTP queries and HTTP headers. Also, we
parse known data structures (e.g., JSON) according to the HTTP
Content-Type (e.g., application/json). Figure 5 shows
an example of a tree modeling a network behavior summary.
This structure is useful to group the ﬁelds of the HTTP
ﬂows that we track according to their “type” and position in
the tree. In fact, when performing the differential analysis, we
want to compare ﬁelds in the same position in the tree. For
instance, if an HTTP request contains an HTTP value that is
not part of the tree, we compare it with the other values from
requests with the same domain, path, and key.
i.e.,
in all parts of the HTTP request:
AGRIGENTO looks for privacy leaks at all levels of the
tree,
the domain,
path, key, and values, as well as the headers and the pay-
load. In the current
implementation AGRIGENTO includes
parsers for application/x-www-form-urlencoded,
application/json, and any content that matches a HTTP
query format (i.e., variable=value). However, AGRIGENTO can
be easily extended with parsers for further content types.
mydomain.comrootads.comauth.domain.com/showad/register/client......usertsJohnJackConnectionkeep-aliveshorter subﬁelds is faster than aligning long values. Furthermore,
before the comparison, AGRIGENTO decodes known encodings
(i.e., Base64, URLencode). Then, AGRIGENTO leverages the
Needleman-Wunsch algorithm to obtain an alignment of the
ﬁelds under comparison. The alignment identiﬁes regions of
similarity between the two ﬁelds and inserts gaps so that
identical characters are placed in the same positions. From
the alignment, AGRIGENTO generates a regular expression.
Essentially, it merges consecutive gaps, and replaces them with
a wildcard (i.e., *). Finally, it obtains a set of differences
by extracting the substrings that match the wildcards of the
regular expression from a ﬁeld. AGRIGENTO then discards
any differences caused by values that have been received
by previous network requests (e.g., server-assigned identiﬁer).
Finally, AGRIGENTO also whitelists benign differences caused
by known Google libraries (e.g., googleads), which can
be particularly complex to analyze and that contain non-
determinism AGRIGENTO cannot efﬁciently eliminate.
Example. For instance, in this simpliﬁed case, the network
behavior summary tree contains the following HTTP ﬂows:
domain.com/path?key=111111111_4716ac99767e
domain.com/path?key=111111111_6fa092d4891a
other.com/new?id=28361816686630788
The HTTP ﬂow in the contextualized trace collected from the
ﬁnal run is:
domain.com/path?key=999999999_4716ac99767e
AGRIGENTO navigates the tree from domain.com to key,
and then determines that 999999999_4716ac99767e is
not part of the tree. Hence, it selects the most similar ﬁeld
in the tree, and performs the comparison with its value.
In this case, it aligns 999999999_4716ac99767e with
111111111_4716ac99767e. Starting from the alignments
it produces the regular expression *_4716ac99767e and
determines 999999999 as the difference in the network
behavior of the ﬁnal run compared to the network behavior
summary of previous runs.
F. Risk Analysis
As mentioned in §IV-B we combine the Hamming and
the Levenshtein distance to compute a score for each of the
differences AGRIGENTO identiﬁes during differential analysis.
In particular, we are interested in quantifying the number of
bits that differ in the network trafﬁc of the ﬁnal run from what
we have observed in the network behavior summary.
For each ﬁeld that the differential analysis ﬂagged as being
different from the previously observed network trafﬁc, we
compute a score based on the distance of its value to the most
similar value in the same position of the network behavior
summary. This is equivalent to selecting the minimum distance
between the value and all other previously observed values for
a speciﬁc ﬁeld.
Given an app A, D (= the differences detected by analyzing
A), and F (= all the ﬁelds in the tree of A’s network behavior),
we then compute an overall score SA that quantiﬁes how many
8
bits the app is leaking:
distance(x, y) =
Hamming(x, y)
Levenshtein(x, y) ∗ 8 otherwise
if len(x) = len(y)
(cid:40)
(cid:88)
∀d∈D
SA =
min∀f∈F
distance(d, f )
We combine the Hamming and the Levenshtein distance as
follows: if the values under comparison are of equal length we
use the Hamming distance, otherwise we use the Levenshtein
distance. While we apply the Hamming distance at the bit level,
the Levenshtein distance calculates the minimum number of
single-character edits. In the latter case, to obtain the number
of different bits, we simply map one character to bits by
multiplying it with 8. We note that this distance metric does
not provide a precise measurement, but we believe it provides
a useful estimation of the amount of information contained in
each difference. Moreover, we note that BayesDroid [42] also
applied the Hamming and Levenshtein distances, although only
on strings of the same length, to provide a rough indication
on how much information is contained in a given leak. Both
metrics share the very same intuition and, therefore, provide a
similar numeric result.
VI. EVALUATION
For our evaluation, we ﬁrst performed an experiment to
characterize non-determinism in network trafﬁc and demonstrate
the importance of leveraging contextual
information when
applying differential analysis to the network trafﬁc of mobile
apps. Second, we compared the results of our technique with
existing tools showing that AGRIGENTO outperformed all of
them, and identiﬁed leaks in several apps that no other tool was
able to detect. Then, we describe the results of our analysis on
current popular apps and present some interesting case studies
describing the stealthy mechanisms apps use to leak private
information. Finally, we assess the performance of AGRIGENTO
in terms of runtime.
A. Experiment Setup
We performed our experiments on six Nexus 5 phones,
running Android 4.4.4, while we deployed AGRIGENTO on a 24
GB RAM, 8-core machine, running Ubuntu 16.04. The devices
and the machine running AGRIGENTO were connected to the
same subnet, allowing AGRIGENTO to capture the generated
network trafﬁc.
We chose to perform our experiments on real devices
since emulators can be easily ﬁngerprinted by apps and ad
libraries [30], [43]. Especially ad libraries are likely to per-
form emulator detection as ad networks, such as Google’s
AdMob [21], encourage the use of test ads for automated testing
to avoid inﬂating ad impressions. By using real devices instead
of emulators our evaluation is thus more realistic. Furthermore,
we set up a Google account on each phone to allow apps to
access the Google Play Store and other Google services.
For each execution, we run an app for 10 minutes using
Monkey [3] for UI stimulation. We provide Monkey with a ﬁxed
seed so that its interactions are the same across runs. Although
the ﬁxed seed is not enough to remove all randomness from
the UI interactions, it helps to eliminate most of it. At the end
of each run, we uninstall the app and delete all of its data.
B. Datasets
We crawled the 100 most popular free apps across all
the categories from the Google Play Store in June 2016.
Additionally, we randomly selected and downloaded 100 less
popular apps. We distinguish between those two datasets based
on the intuition that
these two sets of apps might differ
signiﬁcantly in their characteristics and overall complexity.
In order to compare our approach with existing techniques,
we also obtained the dataset from the authors of ReCon [35],
which they used to compare their approach to state-of-the-art
static and dynamic data ﬂow techniques. This dataset contains
the 100 most popular free apps from the Google Play Store
in August 2015 and the 1,000 most popular apps from the
alternative Android market AppsApk.com. Ultimately, we use
750 of those apps for analysis, since those apps were the ones
that produced any network trafﬁc in ReCon’s experiments. We