# 零、前言
Kubernetes 已经席卷全球，成为 DevOps 团队开发、测试和运行应用的标准基础设施。大多数企业要么已经在运行它，要么计划在明年运行它。看看任何一个主要工作网站上的招聘信息就会发现，几乎每家知名公司都有 Kubernetes 的职位空缺。在过去的 4 年中，快速的采用率使得与 Kubernetes 相关的职位增长了 2000%以上。
公司正在努力解决的一个常见问题是缺乏企业 Kubernetes 知识。由于该技术相对较新，对于生产工作负载来说甚至更新，因此公司在尝试建立团队以可靠地运行集群时遇到了问题。找到具有基本 Kubernetes 技能的人变得越来越容易，但是找到具有企业集群所需主题知识的人仍然是一个挑战。
# 这本书是给谁的
我们创作这本书是为了帮助 DevOps 团队将他们的技能扩展到 Kubernetes 的基础之外。它是根据我们在多个企业环境中使用集群的多年经验创建的。
有很多书介绍了 Kubernetes 以及安装集群、创建部署和使用 Kubernetes 对象的基础知识。我们的计划是创建一本书，这本书将超出一个基本的集群，为了保持这本书的合理长度，我们不会重新散列 Kubernetes 的基础。在阅读这本书之前，你应该对 Kubernetes 有一些经验。
虽然本书的主要重点是扩展具有企业功能的集群，但本书的第一部分将提供关键 Docker 主题和 Kubernetes 对象的复习资料。为了充分利用更高级的章节，对 Kubernetes 对象有一个坚实的理解是很重要的。
# 这本书涵盖了什么
[*第 1 章*](01.html#_idTextAnchor018)*了解 Docker 和 Containers Essentials，*帮助您了解 Docker 和 Kubernetes 为开发人员解决了哪些问题。将向您介绍 Docker 的不同方面，包括 Docker 守护程序、数据、安装和使用 Docker CLI。
[*第二章*](02.html#_idTextAnchor044)*使用 Docker Data，*讨论了容器需要如何存储数据，一些用例只需要临时磁盘，而另一些则需要持久磁盘。在本章中，您将了解持久性数据以及 Docker 如何与卷、绑定装载和 tmpfs 一起使用来存储数据。
[*第三章*](03.html#_idTextAnchor062)*了解 Docker 联网，*为您介绍 Docker 中的联网。它将涵盖创建不同的网络类型、添加和删除容器网络以及公开容器服务。
[*第 4 章*](04.html#_idTextAnchor083)*使用 KinD 部署 Kubernetes，*展示了 KinD 是一个多么强大的工具，它允许您创建从单节点集群到完整的多节点集群的 Kubernetes 集群。本章超出了基本的 KinD 集群，解释了如何使用运行 HAproxy 的负载平衡器来负载平衡工作节点。到本章结束时，您将了解 KinD 的工作原理以及如何创建自定义多节点集群，这些将用于后面几章的练习。
[*第 5 章*](05.html#_idTextAnchor150)*Kubernetes boot camp，*涵盖了集群包含的大部分对象，无论您是需要对 Kubernetes 进行更新，还是对该平台较新。它通过描述每个对象的功能及其在集群中的作用来解释对象。这一章是对物品的复习或“袖珍指南”——它没有包含每个物品的详尽细节，因为那需要第二本书。
[*第 6 章*](06.html#_idTextAnchor174)*服务、负载平衡和外部域名系统，*教您如何使用服务公开 Kubernetes 部署。每种服务类型都用示例进行了解释，您将学习如何使用第 7 层和第 4 层负载平衡器来公开它们。在本章中，您将超越简单入口控制器的基础，安装 MetalLB，以提供第 4 层服务访问。您还将安装一个名为 external-dns 的孵化器项目，为 MetalLB 公开的服务提供动态名称解析。
[*第 7 章*](07.html#_idTextAnchor203)*将认证集成到您的集群中，*考虑一旦您的集群建立，用户将如何访问它的问题。在这一章中，我们将详细介绍 OpenID Connect 是如何工作的，以及为什么您应该使用它来访问您的集群。我们还将介绍几个应该避免的反模式，以及为什么应该避免它们。
[*第 8 章*](08.html#_idTextAnchor228)*RBAC 策略和审计，*演示了一旦用户访问了集群，您需要能够限制他们的访问。无论您是向用户提供整个集群，还是只提供一个名称空间，您都需要知道 Kubernetes 如何通过其**基于角色的访问控制**系统或 **RBAC** 授权访问。在本章中，我们将详细介绍如何设计 RBAC 策略，如何调试它们，以及多租户的不同策略。
[*第 9 章*](09.html#_idTextAnchor246)*保护 Kubernetes 仪表板，*查看 Kubernetes 仪表板，这通常是集群启动并运行后用户尝试启动的第一件事。关于安全性(或缺乏安全性)有相当多的神话。您的集群也将由其他 web 应用组成，例如网络仪表板、日志记录系统和监控仪表板。本章介绍了仪表板是如何构建的，如何正确地保护它，以及如何不部署它的示例，并详细说明了原因。
[*第 10 章*](10.html#_idTextAnchor260) ，创建 *Pod 安全策略，*处理运行您的`Pod`实例的节点的安全。我们将讨论如何安全地设计您的容器，使它们更难被滥用，以及如何构建策略来限制您的容器访问它们不需要的资源。我们还将讨论`PodSecurityPolicy`应用编程接口的贬值以及如何处理它。
[*第 11 章*](11.html#_idTextAnchor272)**使用开放策略代理扩展安全性，*为您提供了部署开放策略代理和网守所需的指导，以启用无法使用 RBAC 或 PodSecurityPolicies 实现的策略。我们将介绍如何部署网守，如何在减压阀编写策略，以及如何使用 OPA 的内置测试框架测试您的策略。*
 *[*第 12 章*](12.html#_idTextAnchor295)*使用 Falco 和 EFK 进行审计，*讨论了 Kubernetes 如何包括用于 API 访问的事件日志记录，但是它没有记录可能在 Pod 内部执行的事件的能力。为了解决这个限制，我们将安装一个捐赠给 CNCF 的项目，名为“Falco”。您还将学习如何使用 FalcoSideKick 和 **EFK** 栈(**弹性搜索、FluentD 和 Kibana** )呈现 FalcoSideKick 捕获的数据。您将通过在基巴纳查找事件并创建包含重要事件的自定义仪表板来获得实际操作体验。
[*第 13 章*](13.html#_idTextAnchor314)*备份工作负载，*教您如何使用 Velero 为灾难恢复或集群迁移创建集群工作负载的备份。您将亲自动手创建示例工作负载的备份，并将备份恢复到全新的群集，以模拟群集迁移。
[*第 14 章*](14.html#_idTextAnchor337)*供应一个平台，*让您构建一个平台，通过 GitLab、Tekton、ArgoCD 和 OpenUnison 实现多租户集群的自动化。我们将探索如何构建管道以及如何自动创建管道。我们将探讨用于驱动管道的对象如何相互关联，如何在系统之间建立关系，最后，如何创建自助工作流来自动化管道的部署。
# 为了充分利用这本书
您应该对 Linux、基本命令和工具(如 Git)以及文本编辑器(如 vi)有基本的了解。
这些章节包含理论和实践练习。我们觉得练习有助于巩固理论，但并不要求理解每个主题。如果你想做书中的练习，你需要满足下表的要求:
![](img/B15514_Table_01.jpg)
所有的练习都使用了 Ubuntu，但是它们中的大部分将在其他的 Linux 安装上运行。Falco 一章有特定于 Ubuntu 的步骤，该练习可能无法在其他 Linux 安装上正确部署。
**如果您正在使用本书的数字版本，我们建议您自己键入代码或通过 GitHub 存储库访问代码(下一节中提供了链接)。这样做将帮助您避免任何与复制和粘贴代码相关的潜在错误。**
# 下载示例代码文件
你可以从你在[www.packt.com](http://www.packt.com)的账户下载这本书的示例代码文件。如果您在其他地方购买了这本书，您可以访问[www.packtpub.com/support](http://www.packtpub.com/support)并注册将文件直接通过电子邮件发送给您。
您可以按照以下步骤下载代码文件:
1.  登录或注册[www.packt.com](http://www.packt.com)。
2.  选择**支持**选项卡。
3.  点击**代码下载**。
4.  在**搜索**框中输入图书名称，并按照屏幕指示进行操作。
下载文件后，请确保使用以下文件的最新版本解压缩或解压缩文件夹:
*   视窗系统的 WinRAR/7-Zip
*   zipeg/izp/un ARX for MAC
*   适用于 Linux 的 7-Zip/PeaZip
这本书的代码包也在 GitHub 上的[https://GitHub . com/PacktPublishing/Kubernetes-and-Docker-The-Complete-Guide](https://github.com/PacktPublishing/Kubernetes-and-Docker-The-Complete-Guide)上托管。如果代码有更新，它将在现有的 GitHub 存储库中更新。