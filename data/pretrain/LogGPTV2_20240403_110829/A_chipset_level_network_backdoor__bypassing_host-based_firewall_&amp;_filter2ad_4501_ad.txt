NO 
Product 
Win XP 
Firewall 
Zone 
Alarm 
Snort 
YES 
YES 
4.3.  Network Backdoor Performance 
It is difficult to estimate the performance of the network backdoor 
on  the  overall  system.  In  order  to  estimate  performance,  it  is 
necessary  to  obtain  a  comparison  with  the  performance  of  the 
Operating  System’s  network  subsystem,  which  is  a  difficult  task 
due to the architecture. It is also difficult to measure the execution 
time  for  the  Operating  System’s  network  handling  code  because 
only a small portion of the code runs in the interrupt handler and the 
remaining majority is executed as deferred procedure  calls  which 
are scheduled to run asynchronously when CPU resources are not 
needed for critical tasks. Because the network processing code does 
not  run  continuously  and  linearly  from  start  to  finish,  estimating 
actual execution time is problematic.  
We can however, make the observation that the backdoor will add a 
relatively  constant  overhead  to  network  processing.    To  measure 
that overhead, we calculated the number of clock cycles it takes to 
execute  our  backdoor’s  network  interrupt  handler  using  the  CPU 
timestamp  counter.    On  our  test  system,  this  averaged  out  to  an 
overhead  of  approximately  4000  additional  clock  cycles  per 
network packet received. Subjectively, however, this overhead did 
not produce any human detectable lag in performance, even while 
the network was subjected to heavy loads (such as downloading a 
large file). 
5.  DEFENSE 
We have shown that it is relatively easy for an attacker to develop a 
network backdoor capable of evading a  large  number  of  popular, 
widely  deployed  firewalls  and  intrusion  detection  systems.    The 
first  problem  lies  in  the  fact  that  most  of  these  systems  fail  to 
monitor outbound traffic. This deficiency may result in the leakage 
of  potentially  secure  data  and  the  delayed  detection  of  malware 
threats  like  worms,  and  botnets.    Support  for  extrusion  detection 
would  be  a  valuable  addition  to  many  commodity  firewalls  and 
intrusion detection / prevention systems. 
However, the second issue concerns the reliable implementation of 
such support.  Systems which rely upon the trustworthiness of the 
Operating  System  for  monitoring  network  data  may  be  easily 
spoofed  using  a  variety  of  existing  rootkit  techniques  (e.g.  TDI  / 
NDIS hooking).  In general, malware becomes more  stealthy  and 
difficult to detect as it insinuates itself deeper in the OS and closer 
to  the  physical  hardware.    We  take  this  paradigm  to  its  logical 
conclusion by developing a network backdoor that operates at the 
network card chipset interface.  Detecting such malware becomes a 
difficult problem for several reasons. 
First,  it  is  difficult  for  security  vendors  to  operate  at  this  level.  
Second, there is no network protocol stack support from the OS at 
this  level.    Finally,  the  hardware  specific  nature  of  the  code 
becomes an obstacle to producing a generic, robust product.  From 
the software side, we can break defense into two related challenges: 
detecting outbound traffic, and detecting inbound traffic. Between 
these  two  challenges,  detecting  inbound  traffic  is  easier.    This  is 
due  to  the  fact  that  in  order  to  intercept  incoming  traffic,  the 
malware must be able to intercept the card's frame arrival interrupt. 
If it hooks the OS interrupt handler directly, it will be detectable by 
the  changes  it  makes  to  the  Interrupt  Descriptor  Table  (i.e.  the 
pointer  no  longer  points  within  the  OS  handler).  Our  method  of 
redirecting the interrupt at the IOAPIC redirection table increases 
its  stealth  because  we  are  not  directly  hooking  the  OS  interrupt 
handler for the network. Instead, we take an unused interrupt and 
reprogram the chipset to interrupt on the new vector. In addition to 
scanning the IDT for changes, security software should also check 
chipset  level  data  structures,  like  the  APIC  redirection  table,  for 
suspicious modifications. 
Detecting outbound traffic is more difficult. This is due to the fact 
that  the  malicious  code  does  not  need  to  make  any  permanent 
changes to the OS or architectural data structures (e.g. the IDT) to 
send data frames out over the network.  It merely needs to know the 
location  of  the  card's  shared  memory  space  and  write  to  a  few 
registers on the card. If one were able to detect and validate reads 
and  writes  on  the  shared  memory  region  of  the  card,  it  might  be 
possible  to  monitor  outgoing  traffic.  Unfortunately,  the  card 
addresses memory physically rather than virtually and the x86 does 
not support monitoring physical memory accesses. 
In  order  to  detect  packet  erasing  approach  used  by  the  proposed 
backdoor, a host must cooperate with a network  firewall/gateway 
that  take  charge  of  this  host’s  incoming  traffic.  The  network 
firewall  could  provide  the  exact  number  of  packets  incoming 
132 
targeting the host. By comparing the host’s monitored number of 
incoming packets, the host could possibly detect if there are some 
packets  being  erased  or  not.  This  approach  does  not  place  much 
burden to network firewalls and should be able to be implemented 
without much difficulty. 
The best software option may, in fact, be moving the firewall into a 
virtual machine monitor (VMM) with support for I/O virtualization. 
The new Intel and AMD CPU’s have the hardware support for this 
[25].  This  would  allow  the  virtual  machine  monitor  to  receive 
notification on hardware accesses and validate them accordingly. In 
addition,  VMsafe  from  VMware  [29]  and  the  XenAccess  [30] 
provide  software  based  virtual  machine  monitor  platform.   
Alternatively, the Operating System could provide a trusted virtual 
machine  monitor  that  abstracts  critical  components  like  the 
networking hardware and provides an interface to kernel drivers.  
Another  hardware  supported  defense  is  to  use  virtualization  for 
directed  I/O.  For  example,  Intel  VT-d  supports  the  remapping  of 
I/O DMA transfers and device-generated interrupts [26], thus only 
memory blessed by the OS can be accessed by devices for DMA. 
The  best  defense,  however,  is  likely  to  be  a  hardware  firewall 
capable  of  inspecting  and  blocking  outgoing  traffic.    A  hardware 
firewall  will  be  immune  to  the  attacks  discussed  in  this  paper; 
however, detecting malicious outbound traffic is still likely to pose 
challenges  if  it  is  encrypted  or  obsfucated  using  steganographic 
techniques. 
Finally, we can rely on network-based intrusion detection systems 
(NIDS), to detect the backdoor, or any other rootkit secret  traffic 
since  they  do  not  rely  on  host’s  integrity  for  malicious  traffic 
detection. The drawback is that a network-based detection system 
only has packet-level monitoring capability without any knowledge 
of  host-level  information,  which  makes  it  difficult  to  detect 
advanced  malicious  activities  that  hide  with  either  encryption  or 
embedded within normal traffic. 
6.  CONCLUSIONS & FUTURE WORK 
The  greatest  limitation  of  our  implementation  is  the  fact  that  its 
hardware and chipset specific.   Our implementation is limited to 
cards using the Intel 8255x chipset.  While this may appear to limit 
the  usefulness  of  such  an  attack,  the  Intel  8255x  is  a  widely 
deployed chipset that is compatible with a large number of network 
cards.    The  complexity  and  level  of  effort  required  to  implement 
chipset specific malicious code places this type of attack out of the 
reach of most casual hackers and malware developers.   It is more 
suited to advanced, targeted attacks where the attackers are capable 
of  investing  considerable  resources  in  terms  of  time  and  money. 
Such attacks are likely to be profit driven goal oriented, and target 
specific  as  in  the  case  of  economic  espionage  or  cyber  terrorism 
attacks.   
The range of the threat would be increased if one were able to target 
a wider subset of commodity networking hardware.  For example, 
our  network  backdoor  might  be  extended  to  support  the  Intel 
Centrino wireless network card specification.  Since Intel Centrino 
mobile platform defines a built-in wireless capability, it has created 
a  homogenous  networking  environment  for  Intel  laptops.    Were 
adversaries  capable  of  creating  a  similar  backdoor  to  the  one 
proposed  in  this  paper  that  would  work  on  the  Intel  Centrino 
chipset,  it  would  greatly  reduce  the  hardware  specific  limitation 
and  greatly  increase  the  threat.  Intel  has  not  published  the 
the  Intel  Centrino  wireless  chipset,  but 
specifications  for 
experienced adversaries could reverse engineer the Intel drivers to 
figure out how it works.  This is one potential area of future work 
we’d like to persue.  We intend to study this wireless chipset and 
figure  out  whether  it  is  possible  and  whether  it  is  easy  for 
adversaries to produce such a backdoor.   
Another limitation of our current design is that it is non persistent.  
Non  persistent  malware  is  incapable  of  persisting  across  reboots.  
To persist across reboots, malware must usually have some method 
of gaining control of execution during the boot sequence so that it 
can install itself. It must also have some means of storing itself on 
non-volatile media (e.g. a hard disk) so that it can be loaded into 
volatile  RAM.  Adding  the  persistent  capability  to  a  malicious 
application  decreases  its  stealth  and  becomes  another  vector  for 
detection because many anti virus and security applications inspect 
the boot process and scan non persistent media like hard disks.  In 
practice,  non  persistence  is  not  a  big  limitation.    Many  servers 
remain active for weeks or months at a time between reboots. This 
is almost certain to give an attacker adequate time  to  inspect  and 
exfiltrate sensitive information from the target computer.   
In conclusion, our design and implementation  serves  to  highlight 
two  important  weaknesses  in  commodity  host-based  firewall  and 
intrusion  detection  technology:  the  lack  of  support  for  outbound 
traffic monitoring and a continuing reliance on the trustworthiness 
of a potentially compromised OS. 
7.  ACKNOWLEDGMENTS 
This  work  was  supported  by  NSF  Grant  CNS-0627318  and  Intel 
Research Fund. 
8.  REFERENCES 
 [1] Intel Corporation. Intel 64 and IA-32 Architectures Software 
Developer’s Manual Volume 3B: System Programming Guide, 
Part 2.  May 2007. 
[2]   Intel Corporation. Intel 64 and IA-32 Architectures Software 
Developer’s Manual Volume 3A: System Programming Guide, 
Part 1.  May 2007. 
[3]  Intel Corporation. Intel 8255x 10/100 Mbps Ethernet 
Controller Family: Open Source Software Developer Manual, 
January 2006. 
[4]  R. Bejtlich. Extrusion Detection: Security Monitoring for 
Internal Intrusions. AddisonWesley, first edition, 2006. 
[5]  Joanna Rutkowska. "Rootkits vs. Stealth by Design Malware", 
Presented at Black Hat, Europe 2006. 
[6]   Alexander Tereshkin. "Rootkits: Attacking Personal 
Firewalls", Presented at Black Hat USA, 2006. 
[7]   Windows XP Firewall.    
http://www.microsoft.com/windowsxp/using/networking/sec
urity/winfirewall.mspx 
[8]   Zone Alarm. 
http://www.zonealarm.com/store/content/home.jsp 
[9]   Snort. http://www.snort.org/ 
[10]  AOL/NCSA Online Safety Study. Conducted by America 
Online and the National Cyber Security Alliance. Dec. 2005.  
[11]  Microsoft Corporation. Windows XP Firewall. 
[12]  Chipset.    http://en.wikipedia.org/wiki/Chipset 
[13]  Gramm-Leach Bliley Act.          
http://www.ftc.gov/privacy/privacyinitiatives/glbact.html 
133 
[14]  Payment Card Industry Data Security Standard. 
[22]  Network Packet Generator.        
https://www.pcisecuritystandards.org/ 
http://www.wikistc.org/wiki/Network_packet_generator 
[15]  J. Bulter and G. Hoglund. “Rootkits: Subverting the Windows 
[23] Greg Hoglund. “A *REAL* NT Rootkit, patching the NT 
Kernel.” Addison Wesley. 2005. 
Kernel”. In Phrack Vol. 9, Issue 55. 1999. 
[16]  W. Cui, R.H. Katz, and W. Tan.  BINDER: An 
[24] J. Heasman.  Implementing and Detecting an ACPI BIOS 
Extrusion-based Break-In Detector for Personal Computers. 
In 2005 USENIX Annual Technical          Conference. 2005. 
Rootkit.  Presented at Black Hat Federal, 2006. 
[25] x86 virtualization. 
[17]  Salvador Mandujano. “Identifying Attack Code through an 
http://en.wikipedia.org/wiki/X86_virtualization 
Ontology-Based Multiagent Tool: FROID.” In Proceedings of 
the World Academy of Science, Engineering, and Technology, 
June 2005. 
[26] Intel® Virtualization Technology for Directed I/O. 
http://www.intel.com/technology/itj/2006/v10i3/2-io/7-concl
usion.htm 
[18]  F. Bellifemine, A. Poggi, and G. Rimassa. “JADE – A 
FIPA-compliant agent framework.”  In  Proceedings of 
Practical Applications of Intelligent Agents, 1999. 
[19]  K. Borders and A. Prakash. “Web Tap: Detecting  
         Covert Web Traffic”.  In ACM Conference on Commputer 
[27] Extrusion detection.  
http://en.wikipedia.org/wiki/Extrusion_detection 
[28] D. Whyte, P. Oorschot, E. Kranakis. Exposure Maps: 
Removing Reliance on Attribution during Scanning Detection. 
USENIX HotSec 2006. 
and Communications Security. 2004. 
[29] VMware VMsafe Security Technology. 
[20]  Y. Zhang and V. Paxson.  “Detecting Backdoors”.  In 
http://www.vmware.com/technology/security/vmsafe.html 
Proceedings of the 9th USENIX Security Symposium. August, 
2000.  
[21] NDIS. http://en.wikipedia.org/wiki/Network_ 
Driver_Interface_Specification 
[30] XenAccess Library. http://code.google.com/p/xenaccess/ 
134