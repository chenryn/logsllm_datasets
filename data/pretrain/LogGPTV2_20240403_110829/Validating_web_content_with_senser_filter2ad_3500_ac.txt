be hosted on different servers). If (cid:10)q/2(cid:11) + 1 proxies return IP ad-
dresses located in the same AS (as locally determined by the client
using a compact database such as GeoMind), then the client accepts
an IP address chosen randomly amongst the addresses in that AS.
The use of content distribution networks (CDNs) such as Aka-
mai further complicates the problem. Here, a given URL may be
mapped to multiple IP addresses that correspond to cache servers
distributed over the world.
If the proxy selection process cannot reach a consensus on the
IP address of the destination website, it falls back to selecting the
proxies uniformly at random. Otherwise, if an IP consensus can be
reached, it then adopts the AS-disjoint proxy selection algorithm,
described next.
AS-disjoint routes.
After it has determined the IP address for
the destination, the client next needs to determine the paths which
the available proxies take to reach the destination. This is done by
343
1.0
0.0
1.0
1.0
1.0
1.0
AS15169
AS3356
AS2914
1.0
0.0
0.0
1.0
0.0
AS2152
AS17716
AS3549
AS7521
AS3267
AS7385
1.0
1.0
1.0
AS2500
1.0
AS1299
0.0
0.0
AS25
AS9264
AS2907
1.0
0.0
AS1955
0.0
AS3303
1.0
AS3303b
AS6327
AS2012
1.0
0.0
0.0
0.0
AS2683
1.0
1.0
1.0
1.0
AS7660
AS4538
1.0
AS2603
1.0
AS3836
1.0
1.0
AS4767
AS12925
0.0
AS1916
1.0
1.0
AS38018
0.0
AS2852
AS20965
1.0
AS2200
AS38022
AS20965b
1.0
AS271
0.0
0.0
1.0
1.0
AS1741
0.0
AS9431
AS8501
0.0
1.0
0.0
AS1213
0.0
1.0
1.0
AS137
0.0
AS1887
1.0
1.0
0.0
AS680
1.0
0.0
AS12464
1.0
1.0
0.0
0.0
AS1930
AS5617
0.0
0.0
SINK
Figure 6: The AS-level disjoint paths for the example scenario. The se-
lected endpoint ASes include AS271, AS12925, AS1213, AS25, AS4538,
AS2200, AS1916, AS1741, AS4767, and AS137.
utilizing an Internet mapping service such as iPlane Nano [18] that
infers the AS-level path between two arbitrary IP addresses without
performing active Internet measurements2.
We select the “best” proxies according to the constructed AS-
level graph. Generally speaking, we consider two properties: dis-
jointedness and randomness. We want disjointedness in order to
make it more difﬁcult for a single adversary to affect the quorum
by controlling a single AS. If the paths are disjoint, they have to
control an AS on at least (cid:12)k/2(cid:13) paths to create their quorum. How-
ever, randomness is also important: if an adversary can determin-
istically calculate which proxies will be selected, it can carefully
position rogue proxies in a manner that signiﬁcantly increases the
probability that its proxies will be selected. Section 4.4 discusses
such a potential attack and its countermeasures in greater detail.
To ﬁnd vertex-disjoint paths, we adopt the max-ﬂow algorithm:
we split each vertex with multiple incoming and outgoing edges in
two — an in-node and an out-node — where all incoming edges are
connected to the in-node, all outgoing edges are connected to the
out-node, and the in-node and out-node are connected by exactly
one edge. We then set all edges to have a weight of 1.0, and run the
max-ﬂow algorithm on the constructed graph. The max-ﬂow result
corresponds to the maximal number of vertex-disjoint paths, based
on which we can select the proxies that maximize the path diversity.
If the number of disjoint path is smaller than the desired number of
proxies, we iteratively relax the weights of the bottleneck edges in
the graph in order to ﬁnd the “more disjoint” paths.
The max-ﬂow algorithm produces disjoint AS-level paths. To
complete the proxy selection and add randomness to the selections,
a random proxy is picked from each selected endpoint AS.
An example scenario.
To illustrate the proxy selection process,
we consider a webpage request to http://google.com. Google has
deployed reverse proxies, making it difﬁcult to reach a consensus
on the DNS resolution. However, all of the resolved IP addresses
reside within the same subnet and belong to the same AS. The client
2Due to the current unavailability of iPlane Nano, we use the
iPlane [19] service to query AS-level paths between all available
proxies and the Alexa top sites, and record the results in a concise
Internet “map” that is loaded with the Senser client software.
344
randomly selects an IP from these resolved IP addresses, and then
determines the AS-level paths from each individual proxy to that
IP using the Internet mapping service. For example, for the proxy
with IP address 169.229.50.15, our iPlane-based database returns
the AS path AS25 → AS2152 → AS15169.
Figure 6 depicts the constructed graph based on the paths from
the available proxies. (Note that both AS3303 and AS20965 are
each split into two vertices that are connected by a single edge.
This reﬂects the above constraint that each AS should be included
in at most one AS-disjoint path.) The numbers associated with the
edges show the execution result of the max-ﬂow algorithm. The
graph has a max-ﬂow of 10, indicating that it can accommodate at
most 10 AS-disjoint paths. The client selects proxies that are lo-
cated in endpoint ASes that connect to the sink with edges labeled
1. If more proxies are needed, the edges can be relaxed to accom-
modate more paths (which are no longer necessarily disjoint). For
instance, if the edge between AS3303 and AS3303b is relaxed, a
proxy located at AS9431 can then be added to the selection.
4. PRACTICAL ISSUES
We next discuss potential limitations of the Senser architecture
(Section 4.1) and optimizations (Sections 4.2 through 4.4).
4.1 HTTP POST Requests and Cookies
Senser does not currently support POSTs or GETs that cause
side-effects (the latter of which violate HTTP GET semantics, but
are unfortunately not uncommon on the web). The incompatibili-
ties arise from Senser’s dependence on multiple vantage points to
verify web content. A single non-idempotent request’s are ampli-
ﬁed because each proxy causes a state change on the server.
For many websites, these multiple and near-identical requests
may be caught by the service and considered only once.
(Such
techniques are often applied, for example, to prevent credit card
transactions from being issued multiple times.) Since the web cur-
rently has no standard protocol in place for handling concurrent
and identical requests, we conservatively disable support for HTTP
POSTs in Senser, and (perhaps optimistically) assume that GET
requests are idempotent and side-effect-free.
We note that while our incompatibility with HTTP POSTs and
GETs that are not effect-free makes Senser inappropriate for many
websites, the use of non-idempotent operations over unprotected
HTTP (i.e., without SSL) is ill-advised in many cases (in particular,
for site logins). Preventing such capabilities may be disruptive to
the user, but it may also protect the user.
As a future enhancement, Senser may be amended to offer some
support for HTTP POSTs by relaying POSTs requests through a
single, randomly chosen proxy. Alternatively, clients may apply a
secure reputation system (cf. [14]) to rate proxies, and relay POSTs
through a proxy with a sufﬁciently high reputation score.
We similarly have limited support for cookies. Since many sites
rely on cookies to manage state and present a cohesive user expe-
rience, Senser adopts the cookies returned by a randomly selected
proxy, and forwards those cookies in subsequent HTTP requests.
4.2
Incremental Consensus Construction
Senser forwards HTTP requests to multiple proxies, providing
the opportunity to construct the consensus incrementally as responses
arrive. Rather than waiting for all the summaries to be returned,
the client checks whether a top-level MHT consensus (out of all
the selected proxies; not out of only the proxies from which a re-
sponse has been received) has already been reached whenever a
new summary is received. If a consensus can be reached, the client
can conclude on that consensus without waiting for the remaining
summaries. If there is no consensus at the top level of the hash tree,
Senser waits for all summaries before constructing a “majority ver-
sion” of the webpage. (This is because a “majority version” of the
webpage is created given any input, so it is difﬁcult to determine
when the consensus construction algorithm can be run without ill
effect before all the summaries have been received.)
DNS lookup requests are handled in a similar fashion: When
possible, the client chooses an IP to satisfy the lookup before replies
from all proxies have been received.
The repeated invocation of consensus construction consumes more
computation resources. However, the additional computation over-
head is overshadowed by its beneﬁts: given the long-tail distri-
bution of different proxies’ latencies, it effectively improves the
time-to-ﬁrst-byte latency by eliminating the effects of slow, cor-
rupt, and/or failed proxies.
4.3 Caching
Senser also beneﬁts from the adoption of multiple caches. When
the same URL is requested, the use of caching saves considerable
overhead at several stages of Senser’s operation. In particular, the
consensus IP of the web server that hosts a given URL as well as
the routes from each proxy to the resolved IP address are unlikely to
change frequently, and therefore beneﬁt from client-side caching.
In addition, it is typical in web browsing that multiple visits to the
same website occur within a short period of time (e.g., clicking
links on a portal webpage such as yahoo.com for reading about
related topics). In such scenarios, the client can additionally cache
proxy selection results to further reduce latency overheads. Senser
does not cache a webpage or the MHT constructed from that page.
Instead, the webpage is fetched each time it is requested by a client.
We evaluate the performance beneﬁts of incremental consensus
construction and caching in Section 5.3.
4.4 Resistance to Knowledgeable Attackers
An adversary may attempt to game the proxy selection algorithm
presented in Section 3.4 by strategically placing malicious proxies
to maximize their chances of being selected for a targeted website.
More speciﬁcally, the attacker exploits instances in which there are
few AS-disjoint paths from the honest proxies to a targeted website.
If an attacker is able to add corrupt proxies to the network that
are AS-disjoint from the existing proxies w.r.t. the targeted site,
then the adversary increases the likelihood that the corrupt proxies
will be disproportionately chosen for that site. That is, the proxy
selection algorithm will choose these proxies with high probability
to improve the route diversity, and as a result, the adversary gains
the control of a signiﬁcant portion of the selected proxies.
To counter such an attack, we introduce additional randomness
into the proxy selection algorithm. Instead of deﬁnitively select-
ing the proxies that maximize AS-level path diversity, we con-
duct a weighted randomized selection from the proxies. This ap-
proach strikes a balance between randomness (to counter the ex-
ploit presented above) and path diversity (to limit the potential dam-
age caused by a malicious AS). Here, we introduce a parameter,
α ∈ [0, 1], that determines the level of randomness used to select
proxies. If k is the number of desired proxies, the modiﬁed algo-
rithm selects (cid:10)αk(cid:11) proxies using the AS-disjoint algorithm from
Section 3.4 and (cid:12)k(1 − α)(cid:13) proxies uniformly at random from
the remaining (unchosen) proxies. We explore the performance-
security tradeoffs of selecting α in Section 5.4.
5. EVALUATION
This section evaluates Senser’s effectiveness and efﬁciency. In
Section 5.1, we describe our implementation of Senser. We ex-
amine the accuracy of constructed consensus pages in Section 5.2
and measure the performance of our implementation in Section 5.3.
Using topologies constructed from real-world trace data, we con-
duct simulation experiments to assess Senser’s ability to mitigate
censorship in Section 5.4.
5.1 Experimental Setup
Senser consists of two core components: (i) a client-side appli-
cation that intercepts browser requests and constructs a consensus,
and (ii) a proxy that retrieves requested URLs and returns the result-
ing MHT. We use the JSoup HTML parser to normalize webpages
and the GNU Crypto implementation of the Tiger hash function.
Tiger was chosen for its fast performance on 64bit architectures –
in our benchmarks, it was approximately 50% faster than SHA-2.
Clients run an instance of the Firefox browser that has been con-
ﬁgured to forward requests through the local Senser client (which
itself acts as an HTTP proxy). To obtain meaningful performance
results, we disable both memory and disk caching in Firefox. The
Senser client communicates with Senser proxies using a custom
HTTP API secured with SSL.
In our experiments, the Senser client and proxies use a 24 thread
pool to respond to requests. Firefox was conﬁgured to allow up to
24 concurrent HTTP requests.
We deploy 12 Senser proxies on Amazon EC2 in four separate
regions (US East, Brazil, Ireland, and Singapore), with three prox-
ies per region.
In our experiments, we set k = 11. The client
utilizes a Verizon FIOS broadband connection in Washington, DC.
5.2 Consensus Construction Accuracy
To minimize latency, we trade off efﬁciency for optimality: while
our consensus construction algorithm is efﬁcient, it does not achieve
the optimal solution (which requires exponential time [3]). To de-
termine how often our consensus algorithm is able to construct a
usable webpage, we evaluate our algorithm against websites cho-
sen from the Alexa “top 1,000” list, which we will refer to as the
Alexa websites. We visited the top pages of each of these 1,000
websites and additionally randomly clicked ﬁve selected links on
each site.