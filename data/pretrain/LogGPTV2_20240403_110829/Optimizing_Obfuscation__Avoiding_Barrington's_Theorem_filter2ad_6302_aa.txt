# Optimizing Obfuscation: Avoiding Barrington's Theorem

**Authors:**
- Prabhanjan Ananth
- Divya Gupta
- Yuval Ishai
- Amit Sahai

## Abstract

In this work, we aim to enhance the efficiency of secure, general-purpose obfuscation schemes. We focus on optimizing the obfuscation of Boolean formulas and branching programs, which are core components in the construction of general-purpose obfuscators as introduced by Garg, Gentry, Halevi, Raykova, Sahai, and Waters (FOCS 2013) and subsequent works. These core obfuscators rely on approximate multilinear maps, where efficiency is closely tied to the maximum number of "levels" of multilinearity required.

The most efficient prior construction of a core obfuscator, by Barak, Garg, Kalai, Paneth, and Sahai (Eurocrypt 2014), required the maximum number of levels of multilinearity to be \(O(\ell s^{3.64})\), where \(s\) is the size of the Boolean formula to be obfuscated, and \(\ell\) is the number of input bits. In contrast, our construction only requires the maximum number of levels of multilinearity to be approximately \(\ell s\), or just \(s\) for a keyed family of formulas, i.e., functions of the form \(f_z(x) = \phi(z, x)\) where \(\phi\) is a formula of size \(s\). This results in significant improvements in both the total size of the obfuscation and the running time for evaluating an obfuscated formula.

Our efficiency improvement is achieved by generalizing the class of branching programs that can be directly obfuscated. This generalization allows us to simulate formulas using branching programs without relying on Barrington's theorem, which was a key component in all previous constructions. Additionally, the ability to directly obfuscate general branching programs (without bootstrapping) enables us to efficiently apply our construction to natural function classes that do not have known polynomial-size formulas.

## 1. Introduction

The goal of general-purpose program obfuscation is to make an arbitrary computer program "unintelligible" while preserving its functionality. Obfuscation allows software to keep secrets, ensuring that these secrets remain secure even if the code is fully captured by an adversary. Since the work of Diffie and Hellman in 1976 [24], researchers have explored the potential applications of general-purpose obfuscation. If such obfuscation could be achieved efficiently and securely, it would have profound implications for computer security [5].

### Motivating Scenarios

1. **Control Algorithms and Failsafe Modes:**
   - Control algorithms may enter a failsafe mode on certain rare and hard-to-predict inputs. Securely obfuscating the control software hides these rare inputs from adversaries.

2. **Software Watermarking:**
   - Modifying software to include undetectable imprints (watermarks) that can be identified later. An obfuscated version of this modified software would hide the existence of these imprints, preventing adversaries from removing them unless they rewrite almost all of the software.

3. **Hiding Unknown Software Bugs:**
   - Obfuscation can hide the existence of unknown and unintentional rare input/output behavior, such as software bugs that are resistant to testing. This prevents adversaries from exploiting these vulnerabilities even if they have the code.

4. **Hiding Software Patch Details:**
   - Obfuscation can conceal which software bugs are being fixed by a patch, preventing adversaries from learning about vulnerabilities and attacking unpatched software.

### Applications to Data Security

Obfuscation can also protect against data breaches caused by low-level insiders who might go rogue or whose systems are compromised. For example, an employee tasked with generating financial summaries may need decryption keys to access sensitive data. If the decryption key is captured, it can be used to steal vast amounts of information. However, obfuscation can hide the decryption keys within the summary generation software, limiting the insider's power to generating statistics.

### Efficiency of General-Purpose Obfuscation

Despite the potential benefits, efficient and secure obfuscation has been challenging. The first candidate cryptographic construction for a general-purpose obfuscator was given by Garg, Gentry, Halevi, Raykova, Sahai, and Waters [28] in 2013. Subsequent work has explored various applications [10, 13, 44, 12, 1, 42, 7, 34, 9, 45, 29, 32, 3, 17, 39, 30, 35, 14, 15, 27, 21]. The simplest and most efficient proposed general-purpose obfuscator, presented in [4], remains highly inefficient.

### Our Approach

We aim to improve the efficiency of the core obfuscator for Boolean formulas. Previous constructions [28, 15, 4] use Barrington's theorem to convert Boolean formulas into matrix branching programs, leading to an exponential blowup in the length of the program. Instead, we propose an alternative strategy that avoids Barrington's theorem and the need to balance Boolean formulas.

#### Key Contributions

1. **Relaxed Matrix Branching Programs (RMBPs):**
   - We introduce RMBPs, which relax some requirements of matrix branching programs. This relaxation allows us to adapt the construction and security proofs from [4] to work with RMBPs, improving efficiency.

2. **Efficient Conversion:**
   - We provide simple and efficient ways to convert Boolean formulas and traditional branching programs into RMBPs without using Barrington's theorem. This includes transformations for formulas over the {and, not, or} basis and more general bases.

3. **Input-Oblivious RMBPs:**
   - To handle varying input orders, we make the RMBP family input-oblivious, which incurs a small additional cost but ensures robustness.

By avoiding the inefficiencies of Barrington's theorem and balancing formulas, our approach significantly reduces the number of levels of multilinearity required, leading to more efficient and practical obfuscation schemes.