### 成功
该方法确保了记录级别的时序一致性。由于重试可以异步执行，因此也保证了系统的性能。

### 时序一致性
时序一致性为记录更新提供了简单的语义支持，并允许应用在读取延迟和数据流通性之间进行权衡。然而，它并不支持一般的ACID事务，尤其是涉及多条记录的读写操作。

#### ACID属性
- **原子性**：所有操作要么全部成功，要么全部失败。
- **一致性**：事务执行前后，数据库状态必须保持一致。
- **隔离性**：并发事务互不干扰。
- **持久性**：一旦事务提交，其结果将永久保存。

### 分区策略
细心的读者可能会注意到，如果所有更新都影响到特定时间范围内的分区，那么仅通过时间范围划分并不能解决问题。此时需要采用其他方法，如通过组合关键字（例如用户名和时间）进行排序。

### 复杂查询
随着Web应用变得越来越复杂和多样化，它们需要以新的方式从数据库中检索和组合信息。接下来，我们将探讨如何在大规模系统上支持这些查询。

### 面临挑战
现有系统主要优化了对单条或少数几条记录的查询。例如，通过主键查询记录，只要知道Alice的用户名，就可以直接定位包含她信息的分区。此外，系统可以使用散列分区表或范围分区表来存储数据。对于范围分区表，可以通过主键的排序范围进行范围扫描。例如，系统可能以每个连接一条记录的方式存储Alice的好友列表，其中每个连接的主键是Alice及其好友的用户ID对（见表4-7）。

#### 表4-7：好友关系表
| User1 | User2 |
|-------|-------|
| Alice | Bob   |
| Alice | Charles |
| Alice | Dave  |

对于范围分区表，所有以“Alice”为前缀的记录会聚集在一起，因此只需要小范围扫描即可检索相关记录。

假设我们需要为社交网络站点添加一个新功能，用户可以发布照片并对他人照片发表评论。Alice可能想对Bob、Charles和Dave的照片发表评论。当显示一张照片时，我们希望同时显示与该照片相关的评论，以及Alice对其他人照片的评论。评论表的主键设定为 (PhotoID, CommentID)，并以有序的YDOT表的形式存储（见表4-8），这样对同一张照片的所有评论会聚集在一起，可以通过范围查询来检索。

#### 表4-8：照片评论表
| PhotoID | CommentID | Comment | Commenter |
|---------|-----------|---------|-----------|
| Photo123 | 18        | Cool    | Mary      |
| Photo123 | 22        | Pretty  | Alice     |
| Photo123 | 29        | Interesting | Charles |

系统如何收集Alice做出的所有评论？这需要对Alice的信息记录（以用户名为主键）和评论记录（以用户名为外键）进行连接查询。由于向外扩展的系统架构，数据分区跨越多个服务器，连接操作需要访问多台服务器。这种操作不仅需要跨多台服务器进行连接，而且会占用大量服务器资源，导致请求响应变慢。

在向外扩展的系统中，另一种高成本的操作是聚合查询。例如，系统想要计算每种爱好的用户数，以便向Alice展示最受欢迎的爱好。这种查询需要扫描所有数据并维护计数值，给系统带来巨大负担，并且不能同步执行，导致页面加载时间过长。

### 我们的方法
处理高成本操作的核心原则是异步执行。但对于高成本查询，异步执行并不总是适用，因为用户不希望不断返回检查查询是否完成。实例化视图可以通过异步构建，在Alice登录时快速查询该视图。虽然视图可能已过期，但由于应用本身能够处理过期副本，通常是可以接受的。实际上，我们可以将实例化视图视为一种特殊的副本，通过与更新副本相同的机制来更新视图，从而保证视图和复制的基本表数据具有相似的可靠性和一致性。

尽管视图是在后台维护，但仍需尽量减少其成本。如果维护视图占用大量系统资源，或者影响同步读写请求，或者运行缓慢，视图数据会严重过期而变得无用。因此，我们必须探索使视图维护高效的策略。例如，系统想给Alice显示她对他人照片的所有评论。系统将创建一个实例化视图，通过外键（评论者的用户名）而不是主键对评论数据进行重组和聚合。这样，Alice的所有评论将聚合在一起，还可以将Alice的信息记录添加到视图中，以她的用户名为主键。主键/外键连接操作就像扫描并连接以“Alice”为前缀的视图记录一样简单（见表4-9）。

#### 表4-9：信息和评论记录的连接和聚合
| Username | Location | Age | Full Name | PhotoID | CommentID | Comment | Commenter |
|----------|----------|-----|-----------|---------|-----------|---------|-----------|
| Alice    | West     | 32  | Alice Smith | -       | -         | -       | -         |
| Alice    | -        | -   | -         | Photo123 | 22        | Pretty  | Alice     |
| Alice    | -        | -   | -         | Photo203 | 43        | Nice    | Alice     |
| Alice    | -        | -   | -         | Photo418 | 33        | OK      | Alice     |

注意，我们在视图中并没有预先连接信息和评论记录，而是通过定位需要连接的记录来降低连接的维护成本。当基本表记录需要更新时，只需更新一条视图记录，即使该视图将与许多其他记录进行连接。

### 灵活的数据模式
PNUTS的一个核心特性是能够表示灵活的数据库模式。同一表中的不同记录可以有不同的属性组。这对于Web应用特别有用，因为Web数据通常是稀疏的，例如销售商品的数据库根据商品种类会有不同的属性（如颜色、重量、RAM和口味）。灵活的数据模式对于实现实例化视图连接也非常关键，这样可以从不同表中定位连接记录。

### 其他类型的查询
异步视图方法也有助于响应其他类型的查询。聚合查询可以通过实例化视图预先分组甚至预聚合数据，从而有效响应查询。即使是选择非主键属性的“简单”查询，也可以通过实例化视图高效处理。例如，查询住在加州Sunnyvale的所有用户。因为用户表的主键是用户名，该查询通常需要执行高成本的表扫描操作。但我们可以使用实例化视图在用户表的“location”字段上构建索引，并将其存储在有序的YDOT表中，然后在“Sunnyvale, California”的索引记录上执行范围扫描来获取结果（见表4-10）。

#### 表4-10：地理位置索引
| Location      | Username |
|---------------|----------|
| Sunnyvale, CA | Alice    |
| Sunnyvale, CA | Mary     |
| Sunnyvale, CA | Steve    |
| Sunnyvale, CA | Zach     |
| ...           | ...      |

### 查询计划器
为了即时请求存储在PNUTS中的数据，开发者需要使用PNUTS插件从系统中获取数据，并将其保存到运行Hadoop的计算网格中，Hadoop是MapReduce的开源实现。当有多种机制处理复杂查询时，实现一个有助于有效执行查询的查询计划器非常有用。查询计划器可以减轻开发者的负担，使他们能够编写声明性查询而不必考虑具体执行方式。但对于像PNUTS这样的大规模系统，有效的查询计划器需要复杂的统计收集、负载监测、网络监测等机制，以确保查询计划器能够针对系统的各种瓶颈制定最有效的查询计划。

### 与其他系统的比较
当我们开始设计PNUTS时，Google和Amazon已经宣布了两个大规模可扩展性数据库系统，微软也将对外宣布。我们仔细研究了这些系统，思考它们的思想是否对我们有用。虽然这些系统的一些想法对我们有影响，但我们还是决定构建一个新的系统，其架构在很多方面与这些系统不同。我们现在来研究这些系统。