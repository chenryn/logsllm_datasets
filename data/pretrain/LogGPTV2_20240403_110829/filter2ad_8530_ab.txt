同理，数组中的结构体存储也是类似。
### 问题分析
#### 变量覆盖
    pragma solidity ^0.4.23; 
    contract Locked {
        bool public unlocked = false;    
        struct NameRecord { 
            bytes32 name;
            address mappedAddress;
        }
        mapping(address => NameRecord) public registeredNameRecord; 
        mapping(bytes32 => address) public resolve;
        function register(bytes32 _name, address _mappedAddress) public {
            NameRecord newRecord;
            newRecord.name = _name;
            newRecord.mappedAddress = _mappedAddress; 
            resolve[_name] = _mappedAddress;
            registeredNameRecord[msg.sender] = newRecord; 
            require(unlocked); 
        }
    }
本合约中 unlocked 变量存储在 storage 中偏移为1 的位置。而在调试中发现 newRecord 对象在 storage 部分的索引位置也是
0 ，和全局 unlocked 相重叠，因此访问 newRecord 的时候也会顺便修改到 unlocked。
调试中我们发现所有的临时变量都是从 storage 的 0 位置开始存储的，如果我们多设置几个临时变量，会发现在函数开始选定 slot
时，所有的临时变量对应的 slot 值都是 0。
#### 成因分析
我们下载 solidity
编译器的源码进行查看，分析这里出现问题的原因。源码可在[这里](https://github.com/ethereum/solidity "这里")
找到，直接使用 cmake
编译源码即可，[编译教程](http://solidity.readthedocs.io/en/v0.4.24/installing-solidity.html "编译教程")。 solidity 的源码需要引用 boost 库，如果之前没有安装的话需要先安装
boost。编译的过程不再赘述，最终会生成三个可执行文件 （在 Windows
上的编译会有点问题，依赖的头文件没办法自动加入工程，需要手动添加，并且会还有一些字符表示的问题）
  * solc\solc
  * lllc\lllc
  * test\soltest
solc 可以将 sol 源码编译成 EVM 可以运行的 bytecode
调试 Solc ，查看其中对于 struct 作为临时变量时的编译情况
    contract Project
    {
        uint a= 12345678;
        struct Leak{
            uint s1;
        }
        function f(uint i) returns(uint) {
            Leak l;
            return l.s1;
        }
    }
关键代码调用栈如下
    >   solc.exe!dev::solidity::ContractCompiler::appendStackVariableInitialisation(const dev::solidity::VariableDeclaration & _variable) Line 951  C++
        solc.exe!dev::solidity::ContractCompiler::visit(const dev::solidity::FunctionDefinition & _function) Line 445   C++
        solc.exe!dev::solidity::FunctionDefinition::accept(dev::solidity::ASTConstVisitor & _visitor) Line 206  C++
        solc.exe!dev::solidity::ContractCompiler::appendMissingFunctions() Line 870 C++
        solc.exe!dev::solidity::ContractCompiler::compileContract(const dev::solidity::ContractDefinition & _contract, const std::map,std::allocator > > & _contracts) Line 75  C++
        solc.exe!dev::solidity::Compiler::compileContract(const dev::solidity::ContractDefinition & _contract, const std::map,std::allocator > > & _contracts, const std::vector > & _metadata) Line 39 C++
        solc.exe!dev::solidity::CompilerStack::compileContract(const dev::solidity::ContractDefinition & _contract, std::map,std::allocator > > & _compiledContracts) Line 730  C++
        solc.exe!dev::solidity::CompilerStack::compile() Line 309   C++
        solc.exe!dev::solidity::CommandLineInterface::processInput() Line 837   C++
        solc.exe!main(int argc, char * * argv) Line 59  C++
关键函数为 appendStackVariableInitialisation，可以看到这里调用 pushZeroValue 记录临时变量信息，如果函数发现
value 存在于 Storage 中，那么就直接 PUSH 0，直接压入 0！！！所有的临时变量都通过这条路径，换而言之，所有的临时变量 slot 都是
0 。
    void ContractCompiler::appendStackVariableInitialisation(VariableDeclaration const& _variable)
    {
        CompilerContext::LocationSetter location(m_context, _variable);
        m_context.addVariable(_variable);
        CompilerUtils(m_context).pushZeroValue(*_variable.annotation().type);
    }
笔者目前还不能理解这样设计的原因，猜测可能是因为 storage 本身稀疏数组的关系，不便于通过其他额外变量来控制 slot
位置，但是以目前这样的实现，其问题应该更多。
与之相对的全局变量的编译，函数调用栈如下
    >   solc.exe!dev::solidity::ContractCompiler::initializeStateVariables(const dev::solidity::ContractDefinition & _contract) Line 403    C++
        solc.exe!dev::solidity::ContractCompiler::appendInitAndConstructorCode(const dev::solidity::ContractDefinition & _contract) Line 146    C++
        solc.exe!dev::solidity::ContractCompiler::packIntoContractCreator(const dev::solidity::ContractDefinition & _contract) Line 165 C++
        solc.exe!dev::solidity::ContractCompiler::compileConstructor(const dev::solidity::ContractDefinition & _contract, const std::map,std::allocator > > & _contracts) Line 89   C++
        solc.exe!dev::solidity::Compiler::compileContract(const dev::solidity::ContractDefinition & _contract, const std::map,std::allocator > > & _contracts, const std::vector > & _metadata) Line 44 C++
        solc.exe!dev::solidity::CompilerStack::compileContract(const dev::solidity::ContractDefinition & _contract, std::map,std::allocator > > & _compiledContracts) Line 730  C++
        solc.exe!dev::solidity::CompilerStack::compile() Line 309   C++
        solc.exe!dev::solidity::CommandLineInterface::processInput() Line 837   C++
        solc.exe!main(int argc, char * * argv) Line 59  C++
关键函数为 StorageItem::StorageItem ，函数从 storageLocationOfVariable 中获取全局变量在 storage
中的 slot
    StorageItem::StorageItem(CompilerContext& _compilerContext, VariableDeclaration const& _declaration):
        StorageItem(_compilerContext, *_declaration.annotation().type)
    {
        auto const& location = m_context.storageLocationOfVariable(_declaration);
        m_context  balances;     // slot 0  
    map userTable;    // slot 1
在存储 balances[key1] = value1 时计算 sha3(key1,0) = hash1; Storage[hash1] = value1
。
存储 userTable[key2] = account 时计算 sha3(key2,1) = hash2; 。
hash1 和 hash2 是不相同的，但是 hash1 和 hash2 很有可能是临近的，相差很小，我们假设其相差 4 。
此时实际存储 account 时，会依次将
Account.name、Account.ID、Account.amount、Account.priceLimit、Account.total存放在
storage 中 hash2、hash2+1、hash2+2、hash2+3、hash2+4 的位置。而 hash2+4 恰恰等于 hash1 ，那么
Account.total 的值就会覆盖之前存储在 balances 中的内容 value1。
不过通过 struct 攻击只是存在理论上可能，在实际中找到相差很小的 sha3 是很难的。但是如果将问题转化到 array 中，就有可能实现真实的攻击。
因为在 array 中，数组的长度由数组对象第一个字节中存储的数据控制，只要这个值足够大，攻击者就可以覆盖到任意差距的 hash 数据。
    pragma solidity ^0.4.23; 
    contract Project
    {
        mapping(address => uint) public balances; // records who registered names 
        mapping(bytes32 => address) public resolve; // resolves hashes to addresses
        uint[] stateVar;
        function Resolve() returns (bytes32){
            balances[msg.sender] = 10000000;   // 0x14723a09acff6d2a60dcdf7aa4aff308fddc160c ->  0x51fb309f06bafadda6dd60adbce5b127369a3463545911e6444ab4017280494d 
            return sha3(bytes32(msg.sender),bytes32(0));
        }
        function Resize(uint i){
            stateVar.length = 0x92b6e4f83ec43f4bc9069880e92f6ea53e45d964038b04cc518a923857c1b79c; // 0x405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace
        }
        function Rewrite(uint i){
            stateVar[i] = 0x10adbeef; // 0x11a3a8a4f412d6fcb425fd90f8ca757eb40f014189d800d449d4e6c6cec4ee7f = 0x51fb309f06bafadda6dd60adbce5b127369a3463545911e6444ab4017280494d - 0x405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace
        }
    }
当前的 sender 地址为 `0x14723a09acff6d2a60dcdf7aa4aff308fddc160c` ,
balance[msg.sender] 存储的位置为
`0x51fb309f06bafadda6dd60adbce5b127369a3463545911e6444ab4017280494d`。 调用
Resize 方法将数组 stateVar 的长度修改，数组的存储位置在
`0x405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace`。
最后调用合约方法 Rewrite 向数组赋值，该操作会覆盖 balance 中的内容，将地址为 sender 的值覆盖。
#### 实际内存
最后我们来看一下实际内存的管理情况。无论以太坊区块链的上层技术如何高深，内存终归是需要落地的，最终这些数据还是需要存储在实际的物理内存中的。因此我们通过源码，实际分析
storage 部分的存储情况。EVM 的源码在 
### 流程分析
1、 EVM 的返回值是通过 EVM 传递的，一般的在 Memory 偏移 0x40 的位置保存着返回值地址，这个地址上保存着真实的返回值
2、Storage 在最底层的实现上是一个 STL 实现稀疏数组，将 slot 值作为 key 来存储值
3、在 Storage 中的 Map 和 变长 Array 均是以 hash 值作为最底层稀疏数组的索引来进行的。 其中变长数组的索引方式为
hash(array_slot) + index 而 Map 的索引方式为 hash(map_slot, key) ，当 Value 为 Struct 时
Struct 成员会分别存储，每个成员的索引为 hash(map_slot, key) + offset
### 代码分析
#### STORAGE
Storage 部分内存是与合约代码共同存储在区块中的内存，因此 storage 内存消耗的 gas 回相对较多，我们通过 SLOAD 指令查看
Storage 在区块上的存储方式
SLOAD 指令在函数 interpretCases 中进行处理，当 EVM 解析到 SLOAD 指令后，首先从栈中获取栈顶元素作为 storage 访问的
key，然后调用函数 getStorage 进行实际访问
        case SLOAD:
                evmc_uint256be key = toEvmC(m_SP[0]);
                evmc_uint256be value;
                m_context->fn_table->get_storage(&value, m_context, &m_message->destination, &key);
                m_SPP[0] = fromEvmC(value);
    evmc_context_fn_table const fnTable = {
            accountExists,
            getStorage,
            setStorage,
            getBalance,
            getCodeSize,
            copyCode,
            selfdestruct,
            eth::call,
            getTxContext,
            getBlockHash,
            eth::log,
        };
getStorage 函数接收四个参数，第一个参数为返回地址，第二个参数是当前调用的上下文环境，第三个参数是此次交易信息的目的地址即合约地址，第四个参数是
storage 的索引 key
函数首先对 address 进行验证，保证当前的上下文就是处于合约地址的空间内，接着再调用 env.store 实际获取数据
    void getStorage(
        evmc_uint256be* o_result,
        evmc_context* _context,