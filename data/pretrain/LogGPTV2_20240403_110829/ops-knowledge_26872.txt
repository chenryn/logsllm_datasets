User: Here is my current setup:
GitHub repository, a branch for dev.
myappdev.appspot.com (not real url)
myapp.appspot.com  (not real url)
App written on GAE Python 2.7, using django-nonrel
Development is performed on a local dev server.  When I'm ready to release to dev, I increment the version, commit, and run "manage.py upload" to the myappdev.appspot.com
Once testing is satisfactory, I merge the changes from dev to main repo.  I then run "manage.py upload" to upload the main repo code to the myapp.appspot.com domain.
Is this setup good?  Here are a few issues I've run into.
1) I'm new to git, so sometimes I forget to add files, and the commit doesn't notify me.  So I deploy code to dev that works, but does not match what is in the dev branch. (This is bad practice).
2) The datastore file in the git repo causes issues.  Merging binary files?  Is it ok to migrate this file between local machines, or will it get messed up?
3) Should I be using "manage.py upload" for each release to the dev or prod environment, or is there a better way to do this?  Heroku looks like it can pull right from GitHub.  The way I'm doing it now seems like there is too much room for human error.
Any overall suggestions on how to improve my setup?
Thanks!
Assistant: I'm on a pretty similar setup, though I'm still runing on py2.5, django-nonrel.
1) I usually use 'git status' or 'git gui' to see if I forgot to check in files.
2) I personally don't check in my datastore.  Are you familiar with .gitignore?  It's a text file in which you list files for git to ignore when you run 'git status' and other functions.  I put in .gaedata as well as .pyc and backup files.
To manage the database I use "python manage.py dumpdata > file" which dumps the database to a json encoded file.  Then I can reload it using "python manage.py loaddata".
3) I don't know of any deploy from git.  You can probably write a little python script to check whether git is up to date before you deploy.  Personally though, I deploy stuff to test to make sure it's working, before I check it in.