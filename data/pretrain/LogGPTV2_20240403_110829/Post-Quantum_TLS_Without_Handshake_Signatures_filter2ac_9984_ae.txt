the two honest parties if the adversary was passive. This is called
optimal negotiation by [40] and downgrade security by [12].
2) No downgrade to unsupported algorithms: the adversary can
cause parties to use a different algorithm than the optimal one that
would be used if the adversary was passive, but cannot cause a
party to use an algorithm that it disabled in its configuration. This
is called negotiation correctness by [12].
3) No downgrade resilience: the adversary can cause a party to
use any algorithm permitted in the standard (e.g., [1]).
We assume that none of the algorithms supported by the client
or server are broken at the time the session is established, and the
downgrade adversary’s goal is to force use of an algorithm that the
adversary hopes to have a better chance of breaking in the future
(e.g., ECDH instead of a PQ KEM; AES-128 instead of AES-256).
In KEMTLS, for client sessions, any algorithms used prior to the
acceptance of the stage-6 key (i.e., ephemeral KEM, authenticated
encryption of handshake and of first client-to-server application
flow) cannot be downgraded to an unsupported algorithm (barring
an implementation flaw), but can still be downgraded to a different
client-supported algorithm.6 The explicit authentication that the
client receives for the stage-6 key includes confirmation in the
ServerFinished message that the client and server have the same
transcript including the same negotiation messages, which implies
full downgrade resilience once the stage-6 key is accepted, assuming
that the hash, MAC, KEM, and KDF used are not broken by the time
of acceptance.7 Since there is no client-to-server authentication
in the base KEMTLS protocol, servers obtain “no downgrade to
unsupported algorithms” for all their stages.
Anonymity. Neither TLS 1.3 nor KEMTLS offer server anonymity
against passive adversaries, due to the ServerNameIndicator ex-
tension in the ClientHello message. The TLS working group is in-
vestigating techniques such as Encrypted ClientHello [94] which
rely on out-of-band distribution of server keying material. If the
client gets the server’s long-term KEM public key out-of-band as
in [94], KEMTLS could be adapted to have wfs1, implicit authenti-
cation, and no-downgrade-to-unsupported-algorithms on the first
client-to-server KEMTLS flow; and fs, explicit authentication, and
full downgrade-resilience on the 2nd client-to-server flow.
Deniability. Krawczyk pointed out [66, Sec. 2.3.2] that using sig-
natures for explicit authentication in key-agreement protocols adds
an unnecessary and undesirable property: non-repudiation. A pro-
tocol has offline deniability [33] if a judge, when given a protocol
transcript and all of the keys involved, cannot tell whether the tran-
script is genuine or forged. The KEM-authenticated handshake of
KEMTLS, unlike the signature-authenticated handshake of TLS 1.3,
has offline deniability: given just the long-term public keys of the
parties, it is possible to forge KEMTLS transcripts indistinguishable
from real ones. Online deniability [36] is harder to achieve: the
judge may coerce a party to send certain malicious messages to the
target. KEMTLS does not achieve online deniability.
5 INSTANTIATION AND IMPLEMENTATION
5.1 Choice of primitives
To compare the performance of KEMTLS and TLS 1.3 we selected
8 post-quantum suites (4 using TLS 1.3 with signatures, 4 using
KEMTLS with only KEMs) that exemplify the following 4 scenarios:
(1) optimizing communication size assuming one intermediate
CA certificate is included in transmission,
(2) optimizing communication size assuming intermediate CA
certificates can be cached, thus excluded from transmission,
(3) handshakes relying on module learning with errors (MLWE)
/ module short-integer-solutions (MSIS), and
(4) handshakes relying on the NTRU assumption.
We decided on two scenarios with structured lattices (NTRU, MLWE
/ MSIS) since these give very good overall performance in terms of
size and speed [74, 87]. The two lattice-based signature schemes
6While KEMTLS’s implicit authentication in stage 3/4 does not preclude downgrades,
TLS 1.3’s signature-based explicit authentication at stage 3 does provide transcript
authentication. Hence, when KEMTLS and TLS 1.3 are simultaneously supported by a
client, an attacker cannot downgrade 1-RTT application data from KEMTLS to TLS 1.3.
7Signature-based authentication in TLS 1.3 means that TLS 1.3’s downgrade-resilience
relies only on the signature and hash being unbroken by the time of acceptance.
CCS ’20, November 9–13, 2020, Virtual Event, USA
Schwabe, Stebila, Wiggers
Table 1: Instantiations of TLS 1.3 and KEMTLS handshakes with sizes in bytes of transmitted public-key cryptography objects.
Abbrv.
ERRR
SFXG
SFGG
KDDD
NFFF
SSXG
SSGG
KKDD
NNFF
)
X
E
K
d
e
n
g
i
S
(
3
1
.
S
L
T
S
L
T
M
E
K
TLS 1.3
Min. incl.
int. CA cert.
Min. excl.
int. CA cert.
Assumption:
MLWE+MSIS
Assumption:
NTRU
Min. incl.
int. CA cert.
Min. excl.
int. CA cert.
Assumption:
MLWE+MSIS
Assumption:
NTRU
KEX
(pk+ct)
ECDH
(X25519) 64
SIKE
405
SIKE
405
Kyber
1536
NTRU
1398
SIKE
SIKE
405
405
Kyber
1536
NTRU
1398
Excluding intermediate CA certificate
Leaf crt.
subject (pk)
RSA-2048
272
Leaf crt.
(signature)
RSA-2048
256
HS auth
(ct/sig)
RSA-2048
256
Falcon
Falcon
690
690
Falcon
Falcon
897
897
XMSSMT
s
979
GeMSS
32
Dilithium
2044
Dilithium
1184
Dilithium
2044
Falcon
SIKE
SIKE
Kyber
NTRU
690
209
209
736
699
Falcon
SIKE
SIKE
Kyber
NTRU
897
196
196
800
699
Falcon
690
XMSSMT
s
979
GeMSS
32
Dilithium
2044
Falcon
690
Sum excl.
int. CA cert.
848
2971
2024
6808
3675
1789
842
5116
3486
Including intermediate CA certificate
Sum incl.
int. CA crt.
Int. CA crt.
subject (pk)
RSA-2048
272
Int. CA crt.
(signature)
RSA-2048
256
XMSSMT
s
32
GeMSS
352180
GeMSS
GeMSS
32
32
Dilithium
1184
Dilithium
2044
Falcon
XMSSMT
s
897
32
GeMSS
352180
Falcon
GeMSS
GeMSS
690
32
32
Dilithium
1184
Dilithium
2044
Falcon
897
Falcon
690
Root CA
(pk)
RSA-2048
272
GeMSS
352180
GeMSS
352180
Dilithium
1184
Falcon
897
GeMSS
352180
GeMSS
352180
Dilithium
1184
Falcon
897
Sum TCP pay-
loads of TLS HS
(incl. int. CA crt.)
2711
4056
355737
11094
6227
2898