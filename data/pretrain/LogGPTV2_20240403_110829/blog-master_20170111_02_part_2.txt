可以看到，cached占用的空间并没有像我们想象的那样完全被释放，其中13G的空间仍然被/tmp/tmpfs中的文件占用的。  
当然，我的系统中还有其他不可释放的cache占用着其余16G内存空间。  
那么tmpfs占用的cache空间什么时候会被释放呢？  
是在其文件被删除的时候，如果不删除文件，无论内存耗尽到什么程度，内核都不会自动帮你把tmpfs中的文件删除来释放cache空间。  
```  
[root@tencent64 ~]# rm /tmp/tmpfs/testfile   
[root@tencent64 ~]# free -g  
             total       used       free     shared    buffers     cached  
Mem:           126         30         95          0          0         16  
-/+ buffers/cache:         14        111  
Swap:            2          0          2  
```  
这是我们分析的第一种cache不能被回收的情况。  
#### 2. 共享内存  
共享内存是系统提供给我们的一种常用的进程间通信（IPC）方式，但是这种通信方式不能在shell中申请和使用，所以我们需要一个简单的测试程序，代码如下：  
```  
[root@tencent64 ~]# cat shm.c   
#include   
#include   
#include   
#include   
#include   
#include   
#define MEMSIZE 2048*1024*1023  
int  
main()  
{  
    int shmid;  
    char *ptr;  
    pid_t pid;  
    struct shmid_ds buf;  
    int ret;  
    shmid = shmget(IPC_PRIVATE, MEMSIZE, 0600);  
    if (shmid /proc/sys/vm/drop_caches  
[root@tencent64 ~]# free -g  
             total       used       free     shared    buffers     cached  
Mem:           126         32         93          0          0         18  
-/+ buffers/cache:         14        111  
Swap:            2          0          2  
```  
结果是仍然不可回收。大家可以观察到，这段共享内存即使没人使用，仍然会长期存放在cache中，直到其被删除。  
删除方法有两种，一种是程序中使用shmctl()去IPC_RMID，另一种是使用ipcrm命令。我们来删除试试：  
```  
[root@tencent64 ~]# ipcs -m  
------ Shared Memory Segments --------  
key        shmid      owner      perms      bytes      nattch     status        
0x00005feb 0          root       666        12000      4                         
0x00005fe7 32769      root       666        524288     2                         
0x00005fe8 65538      root       666        2097152    2                         
0x00038c0e 131075     root       777        2072       1                         
0x00038c14 163844     root       777        5603392    0                         
0x00038c09 196613     root       777        221248     0                         
0x00000000 294918     root       600        2145386496 0                         
[root@tencent64 ~]# ipcrm -m 294918  
[root@tencent64 ~]# ipcs -m  
------ Shared Memory Segments --------  
key        shmid      owner      perms      bytes      nattch     status        
0x00005feb 0          root       666        12000      4                         
0x00005fe7 32769      root       666        524288     2                         
0x00005fe8 65538      root       666        2097152    2                         
0x00038c0e 131075     root       777        2072       1                         
0x00038c14 163844     root       777        5603392    0                         
0x00038c09 196613     root       777        221248     0                         
[root@tencent64 ~]# free -g  
             total       used       free     shared    buffers     cached  
Mem:           126         30         95          0          0         16  
-/+ buffers/cache:         14        111  
Swap:            2          0          2  
```  
删除共享内存后，cache被正常释放了。这个行为与tmpfs的逻辑类似。  
内核底层在实现共享内存（shm）、消息队列（msg）和信号量数组（sem）这些POSIX:XSI的IPC机制的内存存储时，使用的都是tmpfs。  
这也是为什么共享内存的操作逻辑与tmpfs类似的原因。当然，一般情况下是shm占用的内存更多，所以我们在此重点强调共享内存的使用。  
#### 3. mmap  
mmap()是一个非常重要的系统调用，这仅从mmap本身的功能描述上是看不出来的。  
从字面上看，mmap就是将一个文件映射进进程的虚拟内存地址，之后就可以通过操作内存的方式对文件的内容进行操作。但是实际上这个调用的用途是很广泛的。  
当malloc申请内存时，小段内存内核使用sbrk处理，而大段内存就会使用mmap。  
当系统调用exec族函数执行时，因为其本质上是将一个可执行文件加载到内存执行，所以内核很自然的就可以使用mmap方式进行处理。  
我们在此仅仅考虑一种情况，就是使用mmap进行共享内存的申请时，会不会跟shmget()一样也使用cache？  
同样，我们也需要一个简单的测试程序：  
```  
[root@tencent64 ~]# cat mmap.c   
#include   
#include   
#include   
#include   
#include   
#include   
#include   
#include   
#define MEMSIZE 1024*1024*1023*2  
#define MPFILE "./mmapfile"  
int main()  
{  
    void *ptr;  
    int fd;  
    fd = open(MPFILE, O_RDWR);  
    if (fd  /proc/sys/vm/drop_caches  
[root@tencent64 ~]# free -g  
             total       used       free     shared    buffers     cached  
Mem:           126         30         95          0          0         16  
-/+ buffers/cache:         14        111  
Swap:            2          0          2  