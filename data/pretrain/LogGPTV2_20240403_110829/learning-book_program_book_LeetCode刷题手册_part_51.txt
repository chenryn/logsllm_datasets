---
## Page 475
func dfs386(x, n int，res *[]int){
1imit := (× + 10) / 10 * 10
for x = 1B, and you want to check
one by one to see if T has its subsequence. In this scenario, how would you change your codle?
Credlits: Special thanks to @pbrother for adding this problem and creating all test cases.
题目大意
给定字符串s和t，判断s是否为t的子序列。你可以认为s和t中仅包含英文小写字母。字符串t可
能会很长（长度-=500,000），而s是个短字符串（长度 0 &&len(t) > 0 {
if s[0] == t[0] {
s = s[1:]
t = t[1:]
F
return 1en(s) == 0
393.UTF-8Validation
---
## Page 479
题目
A character in UTF8 can be from 1 to 4 bytes long, subjected to the following rules:
1. For 1-byte character, the first bit is a 0, followed by its unicode code.
2. For n-bytes character, the first n-bits are all one's, the n+1 bit is 0, followed by n-1 bytes with
most significant 2 bits being 10.
This is how the UTF-8 encoding would work:
Char. number range 1
UTF-8 octet sequence
(hexadecima1)
(binary)
0000 0000-0000 007F1 0xXXXXXX
0000 0080-0000 07FF1110xxxxx 10xxXXXx
0000 0800-0000 FFFF 11110xxxx 10xxxxxx 10xxxXxx
0001 0000-0010 FFFF | 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx
Given an array of integers representing the data, return whether it is a valid utf-8 encodling.
Note: The input is an array of integers. Only the least significant 8 bits of each integer is used to
store the data. This means each integer represents only 1 byte of data.
Example 1:
data = [197, 130, 1], which represents the octet sequence: 11000101 10000010
00000001.
Return true.
It is a valid utf-8 encoding for a 2-bytes character followed by a 1-byte
character.
Example 2
data = [235, 140, 4], which represented the octet sequence: 11101011 10001100
00000100,
Return false.
The first 3 bits are al1 one′s and the 4th bit is 0 means it is a 3-bytes
character.
o s           x 
But the second continuation byte does not start with 10, so it is invalid.
题目大意
UTF-8中的一个字符可能的长度为1到4字节，遵循以下的规则：
---
## Page 480
对于1字节的字符，字节的第一位设为0，后面7位为这个符号的unicode码。
对于n字节的字符（n>1），第一个字节的前n位都设为1，第n+1位设为0，后面字节的前两位一律设
为10。剩下的没有提及的二进制位，全部为这个符号的unicode码。
这是UTF-8编码的工作方式：
Char. number range
UTF-8 octet sequence
(hexadecima1)
(binary)
0000 0000-0000 007F|0xxXXXXX
0000 0080-0000 07FF1
110xxxxx 10xxxxxx
0000 0800-0000 FFFF1
1110xxxx 10xxxxxx 10xxxxxx
0001 0000-0010 FFFF 1
11110xxx 10xxxxxx 10xxxxxx 10xxxxxx
给定一个表示数据的整数数组，返回它是否为有效的utf-8编码。
注意：
输入是整数数组。只有每个整数的最低8个有效位用来存储数据。这意味着每个整数只表示1字节的数
据。
解题思路
·这一题看似很复杂，其实严格按照UTF8定义来模拟就可以了。
代码
package leetcode
func validutf8(data []int) bool {
count := 0
for
-, d := range data {
if count == 0 {
if d >= 248 { // 11111000 = 248
return false
}else if d >=240 {// 11110000=240
count=3
} else if d >= 224 { // 11100000 = 224
count = 2
} else if d >= 192 { // 11000000 = 192
count = 1
} else if d > 127 { // 0111111l = 127
return false
}else{
if d = 192 {
---
## Page 481
return false
count--
}
return count ==0
394.DecodeString
题目
Given an encoded string, return its decoded string.
The encoding rule is: k[encoded_string], where the encodled_string inside the square brackets is
being repeated exactly k times. Note that k is guaranteed to be a positive integer.
You may assume that the input string is always valid; No extra white spaces, square brackets are
well-formed, etc.
Furthermore, you may assume that the original data does not contain any digits and that digits
are only for those repeat numbers, k. For example, there won't be input like 3a or 2[4].
Examples:
oqqeee ua *.[oa]z[e]. = s
=
题目大意
给定一个经过编码的字符串，返回它解码后的字符串。编码规则为：k[encoded_string]，表示其中方括
号内部的encoded_string正好重复k次。注意k保证为正整数。你可以认为输入字符串总是有效的；
输入字符串中没有额外的空格，且输入的方括号总是符合格式要求的。此外，你可以认为原始数据不包
含数字，所有的数字只表示重复的次数k，例如不会出现像3a或2[4]的输入。
解题思路
这一题和第880题大体类似。用栈处理，遇到“"，就要开始重复字符串了，另外重复的数字是可能存
在多位的，所以需要往前找到不为数字的那一位，把数字转换出来。最后用把stack里面的字符串都串
联起来即可。
代码
---
## Page 482
package leetcode
import(
"strconv"
func decodeString(s string) string {
stack, res = []string{)， ""
for _, str := range s {
if len(stack) ==0 11（1en(stack) >0 && str !=']'){
stack = append(stack, string(str))
}else{
tmp := "
for stack[len(stack)-1] != "["{
tmp = stack[1en(stack)-1] + tmp
stack = stack[:1en(stack)-1]
stack = stack[:len(stack)-1]
for index =1en(stack)-1;index >= 0；index--{
if stack[index]>=“o" && stack[index] 4 -> 2 -> 1
Example 2:
Input:
7
Output:
4
Explanation:
 16 -> 8 
->
[ 111010 -> 11101 -> 11100 -> 1110 -> 111 -> 1000 -> 100 -> 10 ->
1
111011 -> 111100 -> 11110 -> 1111 -> 10000 -> 1000 -> 100 -> 10 -> 1
·对于7来说，加1和减1的结果相同，可以不用管，对于3来说，减1的步骤更少，所以需要先
去掉这种特殊情况。
·最后如何判断某个数字加1后是4的倍数呢？这里有一个小技巧，由于之前判断了其是奇数了，
那么最右边一位肯定是1，如果其右边第二位也是1的话，那么进行加1运算，进位后右边肯定会
出现两个0，则一定是4的倍数。于是就可以判断出来了。剩下的情况就是偶数的情况，如果之前
判定是偶数，那么直接除以2（右移一位）即可。
代码
package leetcode
func integerReplacement(n int) int {
res := 0
for n > 1 {
if（n&1）==0{//判断是否是偶数
n >>= 1
} else if (n+1)%4 == 0 && n != 3{ // 末尾 2 位为 11
n++
}else{//末尾2位为01
n==
res++
return res
399.EvaluateDivision
题目
Equations are given in the format A / B = k, where A and B are variables represented as
strings, and k is a real number (floating point number). Given some queries, return the answers.
If the answer does not exist, return -1. 0.
Example:
---
## Page 485
Given a / b = 2.0, b / c = 3.0. queries are: a / c = ?, b / a = ?, a / e = ?, a / a
= ?, x / x = ?. return [6.0, 0.5, -1.0, 1.0, -1.0 ].
The input is: vector> equations, vector& values,
vector> queries , where equations.size() == values.size(), and
the values are positive. This represents the equations. Return vector
According to the example above:
equations = [ ["a", "b"], ["b", “c"] ],
values = [2.0, 3.0],
queries = [ ["a", "c"], ["b", "a"], ["a", "e"], ["a", "a"], ["x", "x"] ].
The input is always valid. You may assume that evaluating the queries will result in no division by
zero and there is no contradiction.
题目大意
给出方程式A/B=k，其中A和B均为代表字符串的变量，k是一个浮点型数字。根据已知方程式求解
问题，并返回计算结果。如果结果不存在，则返回-1.0。
示例：
给定 a / b = 2.0, b / c = 3.0
 =x/x=e/e’= /e=e/q² =/e:[]
返回 [6.0, 0.5, -1.0, 1.0, -1.0 ]
ed>oa sanjen goa suoena ed>joa :
queries(方程式，方程式结果，问题方程式)，其中 equations.size( == values.size()，即方程式的长度
与方程式结果长度相等（程式与结果一一对应），并且结果值均为正数。以上为方程式的描述。返回
vector类型。
假设输入总是有效的。你可以假设除法运算中不会出现除数为0的情况，且不存在任何矛盾的结果。
解题思路
·给出一些字母变量的倍数关系，问给出任意两个学母的倍数是多少。
·这一题可以用DFS或者井查集来解题。先来看看DFS的做法。先建图。每个字母或者字母组合可
值。那么问题可以转换成是否存在一条从起点节点到终点节点的路径，如果存在，输出这条路径上
所有有向边权值的累乘结果。如果不存在这条路径，就返回-1。如果给的起点和终点不在给出的
节点集里面，也输出-1。
·再来看看并查集的做法。先将每两个有倍数关系的节点做并查集union（）操作。例如A/B=2，
那么把B作为 parent 节点，parents[A]={B，2}，parents[B]={B，1}，B指向自己是
1。还有一个关系是B/C=3，由于B已经在并查集中了，所以这个时候需要把这个关系反过来，
处理成c/B=1/3，即parents[c]={B，1/3]。这样把所有有关系的字母都union（起
来。如何求任意两个字母的倍数关系呢？例如A/c=？在并查集中查找，可以找到parents[c]