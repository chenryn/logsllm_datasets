[0,1,0] ,
[1, 1, 1]]
Output:
[[0,0,0],
[0 ,1,0] ,
[1 , 2 , 1]]
Note:
1. The number of elements of the given matrix will not exceed 10,000.
2. There are at least one O in the given matrix.
3. The cells are adjacent in only four directions: up, down, left and right.
题目大意
给定一个由0和1组成的矩阵，找出每个元素到最近的0的距离。两个相邻元素间的距离为1。
解题思路
·给出一个二维数组，数组里面只有0和1。要求计算每个1距离最近的0的距离。
·这一题有3种解法，第一种解法最容易想到，BFS。先预处理一下棋盘，将每个0都处理为-1。
将1都处理为0。将每个-1（即原棋盘的0）都入队，每次出队都将四周的4个位置都入队。这就
想一颗石头扔进了湖里，一圈一圈的波纹荡开，每一圈都是一层。由于棋盘被我们初始化了，所有
为-1的都是原来为0的，所以波纹扫过来不需要处理这些-1的点。棋盘上为0的点都是原来为
1的点，这些点在波纹扫过来的时候就需要赋值更新level。当下次波纹再次扫到原来为1的点的
时候，由于它已经被第一次到的波纹更新了值，所以这次不用再更新了。（第一次波纹到的时候一
定是最短的）
·第二种解法是DFS。先预处理，把周围没有0的1都重置为最大值。当周围有0的1，距离0的
位置都是1，这些点是不需要动的，需要更新的点恰恰应该是那些周围没有0的点。当递归的步数
val比点的值小（这也就是为什么会先把1更新成最大值的原因）的时候，不断更新它。
·第三种解法是DP。由于有4个方向，每次处理2个方向，可以降低时间复杂度。第一次循环从上
到下，从左到右遍历，先处理上边和左边，第二次循环从下到上，从右到左遍历，再处理右边和下
边。
---
## Page 607
代码
package leetcode
import (
"math"
1
//解法一BFS
func updateMatrixBFS(matrix [][]int) [][]int {
res = make([][]int, len(matrix))
if 1en(matrix) == 0 11 1en(matrix[0])
==0{
return res
queue := make([][]int, 0)
for i := range matrix {
res[i] = make([]int, len(matrix[o]))
for j := range res[i] {
if matrix[i][j] == 0 {
res[i][j] = -1
queue = append(queue, []int{i, j})
L
level := 1
for len(queue)> 0 {
size := len(queue)
for size > 0 {
size=*
[o]ananb =: apou
queue = queue[1:]
i, j := node[o], node[1]
for _, direction := range [][]int{{-1,0}，{1,0},{0, 1}， {0, -1}} {
x:= i + direction[0]
y := j + direction[1]
if x=len(matrix) 11 y =len(matrix[o]) 11 res[x]
[y]  0{
continue
res[x][y]= leve]
queue = append(queue，[]int{x，y})
leve1++
for i, row := range res {
F
for j, cell := range row {
if cell == -1 {
---
## Page 608
res[1][j] = 0
上
return res
//解法二DFS
func updateMatrixDFs(matrix [][]int) [][]int {
result := [][]int{}
if 1en(matrix) == 0 11 1en(matrix[0]） == 0{
return result
maxRow, maxCol := 1en(matrix), 1en(matrix[0])
for r =0;r  0 && matrix[row-1][col] == 0 {
return true
if co] > 0 && matrix[row][col-1] == 0{
return true
if row = 1en(matrix) 11 col = 1en(matrix[o]) 11
(matrix[row][col] 0 {
matrix[row][co1]= va]
dfsMatrix(matrix, row-1, col, matrix[row] [col]+1)
dfsMatrix(matrix, row, co1-1, matrix[row] [col]+1)
dfsMatrix(matrix, row+l, col, matrix[row] [col]+1)
dfsMatrix(matrix, row, co1+1, matrix[row][col]+1)
//解法三DP
func updateMatrixDP(matrix [][]int) [][]int {
for i, row := range matrix {
for j, val := range row {
if val == 0 {
continue
left, top := math.MaxInt16, math.MaxInt16
if i>0 {
top = matrix[i-1][j] + 1
if j>o{
left = matrix[i][j-1] + 1
matrix[i][j] = min(top, left)
for i:=1en（matrix)-1；i >=0;i--{
for j :=len(matrix[o]） -1;j >= 0；j--{
if matrix[1][j] == 0 {
continue
right, bottom := math.MaxIntl6, math.MaxInt16
if i 0 {
if flag{
sum = sum + i - 10000
flag = !flag
array[i]--
return sum
563.BinaryTreeTilt
---
## Page 615
题目
Given a binary tree, return the tilt of the whole tree.
The tilt of a tree node is defined as the absolute difference between the sum of all left subtree
node values and the sum of all right subtree node values. Null node has tilt 0.
The tilt of the whole tree is dlefined as the sum of all nodes' tilt.
Example:
Input:
/
2
3
Output: 1
Explanation:
Tilt of node 2 : 0
Tilt of node 3 : 0
Tilt of node 1 : |2-31 = 1
Tilt of binary tree : 0 + 0 + 1 = 1
Note:
1. The sum of node values in any subtree won’t exceed the range of 32-bit integer.
2. All the tilt values won't exceed the range of 32-bit integer.
题目大意
给定一个二叉树，计算整个树的坡度。一个树的节点的坡度定义即为，该节点左子树的结点之和和右子
树结点之和的差的绝对值。空结点的的坡度是0。整个树的坡度就是其所有节点的坡度之和。
注意：
1.任何子树的结点的和不会超过32位整数的范围。
2.坡度的值不会超过32位整数的范围。
解题思路
·给出一棵树，计算每个节点的“倾斜度“累加和。“倾斜度“的定义是：左子树和右子树的节点值差值
的绝对值。
·这一题虽然是简单题，但是如果对题目中的“倾斜度“理解的不对，这一题就会出错。“倾斜度“计算
的是左子树所有节点的值总和，和，右子树所有节点的值总和的差值。并不是只针对一个节点的左
节点值和右节点值的差值。这一点明白以后，这一题就是简单题了。
代码
package leetcode
---
## Page 616
import "math"
* Definition for a binary tree node.
type TreeNode struct {
valint
Left *TreeNode
Right *TreeNode
*/
func findTilt(root *TreeNode) int {
if root == nil {
return 0
Sum := 0
findTiltDFS(root,&sum)
return sum
func findTiltDFS(root *TreeNode,sum *int) int {
if root == nil {
return 0
1eft := findTiltDFS(root.Left, sum)
right := findTiltDFS(root.Right, sum)
*sum += int(math.Abs(f1oat64(1eft)
-float64(right)))
return root.val + left + right