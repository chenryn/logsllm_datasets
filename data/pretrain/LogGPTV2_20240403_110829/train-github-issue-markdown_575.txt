If `test.ts` is:
    const { symlinkSync, readFileSync } = Deno;
    try {
      const s = readFileSync("./test_private/file");
      console.log(s);
    } catch(e) {
      console.log("caught", e.name);
    }
    symlinkSync("./test_private/file", "./test_public/file");
    const s = readFileSync("./test_public/file");
    console.log("success!", new TextDecoder().decode(s));
Then:
    $ deno --version
    deno 0.36.0
    v8 8.1.310
    typescript 3.8.3
    $ mkdir test_private test_public
    $ echo data > test_private/file
    $ deno --allow-read=./test_public --allow-write=./test_public test.ts
    caught PermissionDenied
    success! data
Hence, if I know that `./test_private/file` exists, and have `--allow-read
--allow-write` access anywhere, I can create a symlink to
`./test_private/file` and put it in the second location, giving me (at least)
read access to `./test_private/file`. (I verified that I'll also have write
access to it.)
Combined with the issues in #4423, if I have only `--allow-write` but not
`--allow-read` access to `./test_private`, I have the means to query the
existence of any paths underneath it.
We could partly address this by having `op_symlink` require `--allow-read`
access on its source file. I don't know if that would break the ability to
create symlinks to non-existent paths. I don't think it would prevent one from
gaining write access to any path they had read access to, if they had
read/write access to any other path (such as `/tmp`).
A different strategy for addressing might be to have our
`state.check_read`/`check_write` machinery follow symlinks?