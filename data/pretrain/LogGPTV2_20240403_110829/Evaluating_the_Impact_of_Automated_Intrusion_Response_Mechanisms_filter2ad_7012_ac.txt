calculated paths between entities allow a fast evaluation of
the complete model.
The insertion and removal of a temporary response ac-
tions (the one which is currently examined) into the model
is a crucial step because it has to be performed every time
the impact of new a response action needs to be calcu-
lated. For the actual evaluation of the impact itself, the pre-
calculated paths are utilized. This allows one to only take
the effects of ﬁrewall rules and the availability of resources
into account, making local optimization (i.e. ﬁnding the
best response action among a set of alternatives) very efﬁ-
cient.
Proceedings of the 18th Annual Computer Security Applications Conference (ACSAC(cid:146)02) 
1063-9527/02 $17.00 ' 2002 IEEE 
Finding a globally optimal response conﬁguration is
harder. It requires an exhaustive search of all possible com-
binations of alternatives in the response history, which is
comprised by all response actions that have been suggested
by the IRS. Although this search can be optimized too, it is
still an expensive operation where the number of possibili-
ties increases exponentially with the length of the history of
the response actions that have been evaluated so far (shown
in Figure 5).
Alt. 1
Alt. 1
1
2
Alt. 2
Alt. 2
1
2
Alt. 3
1
........
Optimal
Response
Configuration
Alt. 1
N
Alt. 2
N
Alt. 3
N
Alt. 4
N
Alt. 1
N+1
Alt. 2
N+1
Alt. 3
N+1
Figure 5. Response history and globally opti-
mal response conﬁguration
6.2. Performance Results
We obtained performance measurements to support the
claims of our theoretical results. The execution times of dif-
ferent tasks performed by our prototype evaluation engine
have been determined. We used a model with 35 resources
which were heavily depended on each other - the depen-
dency trees had a depth of up to eight. These resources
were distributed over ﬁve subnets. We evaluated the impact
of thirteen different response actions that consisted of up to
ten ﬁrewall rule changes, user accounts and process status
modiﬁcations.
The average number of alternatives in each test was
2.5384. The performance measurements ( listed in Table 1
below) have been collected on a Pentium III machine with
550 MHz and 512 MB RAM. For each local optimization
step, only up to eight scenarios had to be evaluated where
we could make use of partial evaluation. The global eval-
uation, on the other hand, had to completely evaluate 5184
response conﬁgurations in order to determine an optimal so-
lution.
The results show that evaluating different response ac-
tions can be done quickly. This is caused by the fact that
only crucial resources are modeled and that optimized data
structures are used during the evaluation process. While
Insertion and deletion
0.0255 ms
Complete entity
capability evaluation
0.915 ms
Global optimization step
34.358 s
Table 1. Performance Results
the complete entity capability evaluation is suitable for real
time response, a complete global optimization may take
longer, depending on the length of the response history and
the number of alternative response actions. This is caused
by the fact that many alternatives in a long history of re-
sponse actions lead to an explosion of the number of se-
quences that have to be tried. While this seems to be un-
desirable at ﬁrst glance, one has to realize that no real time
performance is needed for this task. Even if the model re-
quires a minute to ﬁnd a globally optimal response conﬁg-
uration with an adequate level of security, the result is still
beneﬁcial. The security of the system has to be achieved
ﬁrst, then, in a second step, the usability can be improved.
7. Conclusion and Future Work
We have presented a network model together with an
evaluation function that can be consulted by an intrusion re-
sponse component to determine the response action which
yields the minimal negative impact on deployed network
resources and their users. The effects of ‘severe’ responses
and their impact on the usability of the whole system can be
estimated.
We propose a network model that takes network topol-
ogy, ﬁrewall rules, services and users into account and sup-
ports both, dependencies among entities within the network
and those to and from outside users. This allows us to deter-
mine the costs of disabling crucial resources in a response
function. The evaluation mechanism which determines the
negative impact exhibits good performance properties, es-
pecially the variant that determines the best action among a
set of possible alternatives.
Future work will extend the network model and the cost
functions.
Instead of deriving the capability of an entity
from static dependency weights on various services, more
sophisticated functions could be utilized. Usually penalty
costs are not constants, but they are a function of time, and
our model could be extended to do so. Work will also con-
centrate on improving the global optimization step which
is computationally expensive now (because an exhaustive
search is performed). Priority queues and dynamic pro-
Proceedings of the 18th Annual Computer Security Applications Conference (ACSAC(cid:146)02) 
1063-9527/02 $17.00 ' 2002 IEEE 
gramming might help in speeding up that process.
8. Appendix
References
8.1. Model Language Grammar
[1] D. Anderson, T. Frivold, A. Tamaru, and A. Valdes. Next
Generation Intrusion Detection Expert System (NIDES).
SRI International, 1994.
[2] C. A. Carver, J. M. D. Hill, and U. W. Pooch. Limiting
Uncertainty in Intrusion Response.
In Proceedings of the
2001 IEEE Workshop on Information Assurance and Se-
curity, United States Military Academy, West Point, June
2001.
[3] F. Cohen. Simulating Cyber Attacks, Defenses, and Con-
sequences. http://all.net/ journal/ntb/simulate/simulate.html,
May 1999.
[4] D. Denning. An intrusion-detection model. In IEEE Sym-
posium on Security and Privacy, pages 118–131, Oakland,
USA, 1986.
[5] L. Eschenauer. Imsafe. http://imsafe.sourceforge.net, 2001.
[6] S. Forrest, S. A. Hofmeyr, A. Somayaji, and T. A. Longstaff.
A sense of self for Unix processes. In Proceedinges of the
1996 IEEE Symposium on Research in Security and Privacy,
pages 120–128. IEEE Computer Society Press, 1996.
[7] C. Kr¨ugel, T. Toth, and C. Kerer. Service speciﬁc anomaly
detection for network intrusion detection.
In Symposium
on Applied Computing (SAC). ACM Scientiﬁc Press, March
2002.
[8] P. G. Neumann and P. A. Porras. Experience with emerald to
date. In 1st USENIX Workshop on Intrusion Detection and
Network Monitoring, pages 73–80, Santa Clara, California,
USA, April 1999.
[9] P. A. Porras and P. G. Neumann. Emerald: Event monitor-
ing enabling responses to anomalous live disturbances. In
Proceedings of the 20th NIS Security Conference, October
1997.
[10] M. Roesch. Snort - lightweight intrusion detection for net-
works. In USENIX Lisa 99, 1999.
[11] D. Sterne, K. Djahandari, B. Wilson, B. Babson,
D. Schnackenberg, H. Holliday, and T. Reid. Autonomic Re-
sponse to Distributed Denial of Service Attacks. In Proceed-
ings of 4th International Symposium, RAID 2001, Davis,
CA, USA, October 2001.
[12] G. Vigna, S. Eckmann, and R. A. Kemmerer. The STAT Tool
Suite. In Proceedings of DISCEX 2000, Hilton Head, South
Carolina, January 2000. IEEE Computer Society Press.
[13] G. Vigna and R. A. Kemmerer. NetSTAT: A Network-based
Intrusion Detection System. In 14th Annual Computer Se-
curity Applications Conference, December 1998.
[14] G. Vigna and R. A. Kemmerer. NetSTAT: A Network-based
Intrusion Detection System. Journal of Computer Security,
7(1):37–71, 1999.
[15] G. B. White, E. A. Fisch, and U. W. Pooch. Cooperating
security managers: A peer-based intrusion detection system.
IEEE Network, pages 20–23, January/February 1996.
Resource:
header:
type:
locations:
’requires’ [] ’;’
resourceName ’is’ 
[number] 
( ’SERVICE’ | ’USER’ )
’at’ (IPAddress/subnetmask
| Hostname)
’{’ ( ’;’)+ ’}’
properties:
Attribute ’=’ Value
property:
depends:
(  [’or’])+
compounddepend: ’(’ resourceName 
degree:
[][’and’
]+ ’)’
The grammars for importing router conﬁgurations and
ﬁrewall rules as well as the API for the IRS have been omit-
ted here because of lack of space.
8.2. Example
This section shows the network model of the simple ex-
ample that has been introduced above in Figure 2 written in
our grammar.
After that, we describe how the effects for the two differ-
ent response actions are calculated and demonstrate that the
order in which response actions are selected is crucial for
the ﬁnal result. Our example presents a situation where the
selected responses, though locally optimal, do not lead to
the best global result. Only an expensive global optimiza-
tion which involves brute forcing all possible combinations
can assert that a setup with a minimal global penalty cost is
reached.
DNS is service at 132.100.98.11 53 udp
{ processName="bind";};
HTTP is service at 132.100.98.15 80,
at 132.100.101.4 80
{ processName="httpd"; };
NFS is service at 132.100.100.4 2049
{ processName="nfsd"; };
anne is user at 132.100.100.27 { cost=5000; }
requires (DNS at 132.100.98.11 53 udp 0.4)
and
( NFS at 132.100.100.4 2049 0.4
and HTTP at 132.100.101.4 80 0.2 ));
Proceedings of the 18th Annual Computer Security Applications Conference (ACSAC(cid:146)02) 
1063-9527/02 $17.00 ' 2002 IEEE 
customer is user at !132.100.0.0/255.255.0.0
tcp { cost= 100000; }
requires (HTTP at 132.100.101.4 80 1.0
or HTTP at 132.100.98.15 80 1.0 );
// here routing entries & fw rules start
// subnet *.98
{
132.100.98.1 132.100.98.0 0.0.0.0
255.255.255.0 eth1;
132.100.99.16 132.100.99.0 0.0.0.0
255.255.255.0 eth0;
132.100.98.1 0.0.0.0 132.100.99.1
255.255.255.0;
}
// subnet *.99
{
132.100.99.1 132.100.99.0 0.0.0.0
255.255.255.0 eth0;
132.100.99.1 0.0.0.0 132.101.27.1
255.255.255.0;
132.100.98.1 132.100.98.0 0.0.0.0
255.255.255.0 eth1;
132.100.101.1 132.100.100.0
132.100.101.79 255.255.255.0 ;
132.101.27.34 132.101.27.0 external
0.0.0.0 255.255.255.0 eth3;
}
// subnet *.100
{
132.100.100.1 132.100.100.0 0.0.0.0
255.255.255.0 eth1;
132.100.100.1 0.0.0.0 132.100.101.1
255.255.255.0;
132.100.101.14 132.100.101.0 0.0.0.0
255.255.255.0 eth0;
}
// subnet *.101
{
132.100.101.1 132.100.101.0 0.0.0.0
255.255.255.0 eth0;
132.100.100.27 132.100.100.0 0.0.0.0
255.255.255.0 eth1;
132.100.99.34 132.100.99.0 0.0.0.0
255.255.255.0 eth2;
132.100.101.79 0.0.0.0 132.100.99.1
255.255.255.0;
}
// Response actions to check
// First response action
{
// Alternative 1-A
{ insertfwrule at 132.100.101.1:
fw forward -i eth2 -j deny;
}
// Alternative 1-B
{ insertfwrule at 132.100.99.1:
fw forward -sourceIP !132.100.0.0
-sourceNm 255.255.0.0 -destIP
132.100.100.0 -destNm 255.255.255.0
-j deny;
insertfwrule at 132.100.99.1:
fw forward -sourceIP !132.100.0.0
-sourceNm 255.255.0.0 -destIP
132.100.101.0 -destNm 255.255.255.0
-j deny;
}
}
{ // Second response action
// Alternative 2-A
{ insertfwrule at 132.100.99.1:
fw forward -destIP 132.100.98.0
-destNm 255.255.255.0 -j deny;
}
}
Initially the response conﬁguration does not contain any
ﬁrewall rules (for the sake of simplicity). An ID sys-
tem detects an attack coming from the Internet towards the
machine 132.100.101.4, which is running the HTTP-
server. The IRS ﬁnds out that there are two ways to pro-
tect this server (labeled alternative 1-A and alternative 1-B).
The IRS then requests the evaluation function to calculate
the effects of both response actions. Alternative 1-A is in-
serted temporary into the model and the capability of all
entities is determined, ﬁnding that it results in a reduced ca-
pability for the user Anne (because she will not be able to
access the DNS server anymore) leading to a penalty cost of
2000. The capability for the entity Customer is not reduced
because it can use one of two alternative HTTP servers.
Even if one of them is not accessible the availability of the
other one is sufﬁcient and no penalty cost has to be assigned
to this resource. The total penalty cost for this alternative is
therefore 2000.
The evaluation of alternative B reveals that the capability
of both, the customer and Anne are not reduced, resulting
in a total penalty cost of 0.0. This means that the IRS will
clearly use this variant, because it has a lower penalty value.
The ID system then detects another attack in the network
132.100.98.0/24, for which the IRS ﬁnds only one re-
sponse action (namely alternative 2-A). As there are no al-
ternatives to this response action, the optimal choice can be
determined easily. Unfortunately, together with alternative
1-B, the capability of the customer drops to 0.0 which re-
sults in a total penalty cost of 100000 for this variant.
When alternatives 1-A and 2-A would have been cho-
sen, the total penalty cost would have been only 2000. This
emphasizes the importance of global optimization. Notice
that the reconﬁguration will not change the security but in-
creases the availability of important services.
Proceedings of the 18th Annual Computer Security Applications Conference (ACSAC(cid:146)02) 
1063-9527/02 $17.00 ' 2002 IEEE