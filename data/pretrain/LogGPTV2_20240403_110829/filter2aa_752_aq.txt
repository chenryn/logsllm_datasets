### 优化后的文本

本章将介绍多种进程间通信（Inter-Process Communication, IPC）机制，旨在解除传统方法中的诸多限制。我们将展示如何让“父子”进程、“无关”进程甚至是运行在不同主机上的进程之间进行自由通信。

#### 进程间通信简介
进程间通信是指不同进程之间传递数据的方法。例如，互联网浏览器向服务器发送请求，随后接收HTML信息；这类数据传递通常通过类似电话线路连接的套接字完成。另一个例子是使用 `ls | lpr` 命令打印目录下的文件名：Shell程序创建两个进程（`ls` 和 `lpr`），并通过管道（用 `|` 符号表示）连接它们，提供单向通信渠道。在这个例子中，`ls` 进程向管道写入信息，而 `lpr` 进程从管道读取信息。

#### 五种IPC机制
1. **共享内存**：允许两个或多个进程通过对特定内存地址的简单读写来完成通信。
2. **映射内存**：与共享内存类似，但需要关联到文件系统中的一个文件上。
3. **管道**：允许从一个进程到另一个关联进程之间的顺序数据传输。
4. **FIFO（命名管道）**：类似于管道，但因为FIFO对应于文件系统中的一个文件，因此无关进程也可以通信。
5. **套接字**：允许无关进程、甚至是运行在不同主机上的进程之间相互通信。

这些IPC机制可以根据以下标准进行区分：
- 通信对象是否限制为相互关联的进程、共享同一个文件系统的进程，还是可以为连接到同一个网络中的不同主机上的进程。
- 通信中的一个进程是否仅能读取或写入数据。
- 允许参加通信的进程总数。
- 通信进程是否直接在IPC机制中得到同步，例如，读取数据的进程会等待直到有数据到达时开始读取。

#### 共享内存
共享内存是最简单的IPC方式之一，它允许多个进程访问同一块内存。当一个进程修改这块内存的内容时，其他进程都能察觉到更改。

##### 快速本地通信
由于所有进程共享同一块内存，共享内存在各种IPC方式中具有最高的效率。访问共享内存区域和访问进程独有的内存区域一样快，不需要通过系统调用或其他需要切入内核的过程来完成。同时，它也避免了对数据的不必要的复制。需要注意的是，系统内核不对共享内存的访问进行同步，因此必须提供自己的同步措施，常用方法是通过信号量进行同步。

##### 内存模型
要使用共享内存，进程首先必须分配它。随后，需要访问该共享内存块的每个进程都必须将其绑定到自己的地址空间中。当通信完成后，所有进程都将脱离共享内存，并由一个进程释放该共享内存块。Linux系统中，每个进程的虚拟内存被分为许多页面，不同的进程可以将同一个内存页面映射到自己的地址空间中，从而实现共享内存。

##### 分配
进程通过调用 `shmget` 函数来分配一个共享内存块。该函数的第一个参数是一个键值，用于标识共享内存块。第二个参数指定内存块的大小，第三个参数是一组标志，包括 `IPC_CREAT` 和 `IPC_EXCL` 等。

##### 绑定和脱离
要使一个进程获取对共享内存的访问，必须调用 `shmat` 函数。如果不再使用共享内存块，则应调用 `shmdt` 函数与该共享内存块脱离。

##### 控制和释放
`shmctl` 函数用于控制和释放共享内存块。通过传递不同的命令参数，可以获取共享内存块的信息或删除它。

##### 示例程序
以下代码展示了如何使用共享内存块：

```c
#include <stdio.h>
#include <sys/ipc.h>
#include <sys/shm.h>

int main() {
    int segment_id;
    char* shared_memory;
    struct shmid_ds shmbuffer;
    int segment_size;
    const int shared_segment_size = 0x6400;

    // 分配一个共享内存块
    segment_id = shmget(IPC_PRIVATE, shared_segment_size, IPC_CREAT | IPC_EXCL | S_IRUSR | S_IWUSR);

    // 绑定到共享内存块
    shared_memory = (char*) shmat(segment_id, 0, 0);
    printf("Shared memory attached at address %p\n", shared_memory);

    // 确定共享内存的大小
    shmctl(segment_id, IPC_STAT, &shmbuffer);
    segment_size = shmbuffer.shm_segsz;
    printf("Segment size: %d\n", segment_size);

    // 在共享内存中写入一个字符串
    sprintf(shared_memory, "Hello, world.");

    // 脱离该共享内存块
    shmdt(shared_memory);

    // 重新绑定该内存块
    shared_memory = (char*) shmat(segment_id, (void*) 0x500000, 0);
    printf("Shared memory reattached at address %p\n", shared_memory);

    // 输出共享内存中的字符串
    printf("%s\n", shared_memory);

    // 脱离该共享内存块
    shmdt(shared_memory);

    // 释放这个共享内存块
    shmctl(segment_id, IPC_RMID, 0);

    return 0;
}
```

##### 调试
使用 `ipcs -m` 命令可以查看系统中共享内存的信息。如果某个共享内存块在程序结束后没有被删除，可以使用 `ipcrm` 命令手动删除。