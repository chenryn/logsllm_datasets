以下是优化后的代码，使其更加清晰、连贯和专业：

```python
import subprocess

def run_gdb(commands):
    """
    运行 GDB 并发送命令。
    
    :param commands: 要发送给 GDB 的命令字符串
    :return: GDB 的输出
    """
    process = subprocess.Popen(["gdb", "qqq"], stdin=subprocess.PIPE, stdout=subprocess.PIPE, text=True)
    process.stdin.write(commands)
    process.stdin.close()
    return process.stdout.read()

def main():
    ROP_LEN = (2 ** 18) // 4
    ROP_POS = 0x0818c080
    
    # 设置 GDB 命令
    gdb_commands = (
        "set disassembly-flavor intel\n"
        f"b *0x804820a\n"
        "r --pctfkey PCTF{1234567890qwertyuiop1234567890qwertyuiop1234567}\n"
        f"x/{ROP_LEN}d {ROP_POS}\n"
        "q\n"
    )
    
    # 运行 GDB 并获取输出
    output = run_gdb(gdb_commands)
    relevant_output = output.split("(gdb) ")[5]
    
    # 解析 ROP 链
    rop_chain = []
    for line in relevant_output.splitlines():
        for num in line.split("\t")[1:]:
            rop_chain.append((int(num) + 2 ** 32) % (2 ** 32))
    
    # 去除末尾的零
    while rop_chain and rop_chain[-1] == 0:
        rop_chain.pop()
    
    # 打印 ROP 链
    print("ROP_CHAIN")
    print(f"Length: {len(rop_chain)} dwords")
    for r in rop_chain:
        print(hex(r))
    
    # 将特定值写入文件
    with open("values", "w") as f:
        for i in range(14):
            f.write(f"{hex(rop_chain[0x208c4 // 4 + i * 7])}\n")
    
    # 分析每个 ROP 地址
    cache = {}
    with open("ropchain", "w") as f:
        for index, r in enumerate(rop_chain):
            if r in cache:
                out = cache[r]
            else:
                out = run_gdb(f"x/10i {r}\nq\n")
                out = out.split("(gdb) ")[5]
                cache[r] = out
            
            print(f"{hex(r)}, index: {index} out of {len(rop_chain)}")
            f.write(f"{hex(r)} - ROP offset: {hex(index * 4)}\n")
            
            out_lines = out.splitlines()
            res = None
            for i, line in enumerate(out_lines):
                if "ret" in line:
                    res = "\n".join(out_lines[:i + 1])
                    break
                if r == ord("w"):
                    f.write("Note: this is probably FAILING place.\n")
            
            if res is None:
                f.write("\n".join(out_lines) + "\n")
            else:
                f.write(res + "\n")
    
    # 单步执行并显示寄存器
    NUM_STEPS = 5000
    step_commands = (
        "display/i $eip\n"
        "display/x $eax\n"
        "display/x $ebx\n"
        "display/x $ecx\n"
        "display/x $edx\n"
        "display/x $esp\n"
        "display/x $ebp\n"
        "display/x $esi\n"
        "display/x $edi\n"
        f"si\n" * NUM_STEPS
        "q\n"
    )
    
    step_output = run_gdb(step_commands)
    for line in step_output.splitlines():
        if "(gdb)" in line:
            print("")
        elif "/x" in line:
            print(line)
        elif "=>" in line:
            print(line)

if __name__ == "__main__":
    main()
```

### 主要改进点：
1. **函数封装**：将 `subprocess` 的调用封装在 `run_gdb` 函数中，提高代码复用性和可读性。
2. **字符串格式化**：使用 f-string 使字符串拼接更简洁易读。
3. **注释**：添加了必要的注释，解释每一步的作用。
4. **文件操作**：使用 `with` 语句进行文件操作，确保文件正确关闭。
5. **变量命名**：改进了变量命名，使其更具描述性。
6. **逻辑结构**：优化了代码的逻辑结构，使其更清晰。

这样修改后，代码不仅更易读，也更易于维护。