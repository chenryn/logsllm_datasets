### Rule Functions for Modifying Passwords in Wordlists

Rule functions are used to modify existing passwords within a wordlist. Each rule can consist of one or more rule functions, and it is common to use multiple rule functions in a single rule. To perform a rule-based attack, we create a rule file containing one or more rules and use it with a password-cracking tool.

#### Example: Appending Fixed Characters
A simple example of a rule function is appending fixed characters to all passwords in a wordlist or modifying various characters in a password. For instance, we could create a rule function that appends a specific character to each password.

#### Note on Rule-Based Attacks
Rule-based attacks significantly increase the number of attempted passwords. However, modern hardware can easily handle common passwords with fewer than eight characters.

### Example: Adapting to a Password Policy

Assume we need to crack a password that must include an uppercase letter, a special character, and a numerical value. Let's check the first 10 passwords from `rockyou.txt` to see if they meet this requirement:

```bash
kali@kali:~$ head /usr/share/wordlists/rockyou.txt
123456
12345
123456789
password
iloveyou
princess
1234567
rockyou
12345678
abc123
```

None of these passwords meet the required policy. We will now use rule functions to mutate the wordlist to fit the policy.

### Familiarizing with Rule Functions

Before applying complex rules to a large wordlist like `rockyou.txt`, let's start with a simpler example. We'll copy the first 10 passwords from `rockyou.txt` into a new file `demo.txt` and then remove lines starting with "1" using `sed`.

```bash
kali@kali:~$ mkdir passwordattacks
kali@kali:~$ cd passwordattacks
kali@kali:~/passwordattacks$ head /usr/share/wordlists/rockyou.txt > demo.txt
kali@kali:~/passwordattacks$ sed -i '/^1/d' demo.txt
kali@kali:~/passwordattacks$ cat demo.txt
password
iloveyou
princess
rockyou
abc123
```

### Mutating Passwords to Fit the Policy

We now have five passwords in `demo.txt`. Let's mutate these passwords to include a numerical value, a special character, and an uppercase letter.

#### Adding a Numerical Value
To add a "1" to the end of each password, we create a rule file `demo.rule` with the rule function `$1`:

```bash
kali@kali:~/passwordattacks$ echo \$1 > demo.rule
```

Using `hashcat` in debugging mode to display the mutated passwords:

```bash
kali@kali:~/passwordattacks$ hashcat -r demo.rule --stdout demo.txt
password1
iloveyou1
princess1
rockyou1
abc1231
```

#### Adding an Uppercase Character
To capitalize the first character of each password, we add the `c` rule function to our rule file:

```bash
kali@kali:~/passwordattacks$ cat demo1.rule
$1 c
kali@kali:~/passwordattacks$ hashcat -r demo1.rule --stdout demo.txt
Password1
Iloveyou1
Princess1
Rockyou1
Abc1231
```

#### Adding a Special Character
To add a special character, such as "!", we modify our rule file:

```bash
kali@kali:~/passwordattacks$ cat demo1.rule
$1 c $!
kali@kali:~/passwordattacks$ hashcat -r demo1.rule --stdout demo.txt
Password1!
Iloveyou1!
Princess1!
Rockyou1!
Abc1231!
```

### Cracking a Hash with a Rule-Based Attack

Now, let's crack an MD5 hash using a rule-based attack. Assume we have the MD5 hash `f621b6c9eab51a3e2f4e167fee4c6860` and want to use the `rockyou.txt` wordlist, modified to fit the password policy.

Create a rule file `demo3.rule`:

```bash
kali@kali:~/passwordattacks$ cat crackme.txt
f621b6c9eab51a3e2f4e167fee4c6860
kali@kali:~/passwordattacks$ cat demo3.rule
$1 c $!
$2 c $!
$1 $2 $3 c $!
```

Run `hashcat` to crack the hash:

```bash
kali@kali:~/passwordattacks$ hashcat -m 0 crackme.txt /usr/share/wordlists/rockyou.txt -r demo3.rule --force
...
f621b6c9eab51a3e2f4e167fee4c6860:Computer123!
...
```

### Using Predefined Rules

Hashcat provides predefined rule files in `/usr/share/hashcat/rules/`:

```bash
kali@kali:~/passwordattacks$ ls -la /usr/share/hashcat/rules/
total 2588
-rw-r--r-- 1 root root 933 Dec 23 08:53 best64.rule
-rw-r--r-- 1 root root 666 Dec 23 08:53 combinator.rule
-rw-r--r-- 1 root root 200188 Dec 23 08:53 d3ad0ne.rule
...
```

These predefined rules cover a wide range of mutations and are useful when the target's password policy is unknown.

### Summary

In this section, we discussed rule-based attacks and how to use rule functions to mutate wordlists. We demonstrated how to adapt a wordlist to fit a specific password policy and used `hashcat` to crack a hash. Finally, we introduced the predefined rule files provided by Hashcat.

### Cracking Methodology

The process of cracking a hash can be broken down into the following steps:

1. **Extract Hashes**: Obtain the hashes from the target system.
2. **Format Hashes**: Ensure the hashes are in the correct format for the cracking tool.
3. **Calculate Cracking Time**: Determine the feasibility of the cracking attempt.
4. **Prepare Wordlist**: Create or modify a wordlist to fit the password policy.
5. **Attack the Hash**: Use the prepared wordlist and rules to crack the hash.

By following this methodology, you can systematically approach password cracking in a penetration test.