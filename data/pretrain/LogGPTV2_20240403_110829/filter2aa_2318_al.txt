cache   key   a   new   cache   would   need   to   be   created   for   every   unique   user   agent   header.  
Web  Cache  Poisoning  
If   an   attacker   can   somehow   inject   malicious   content   into   a   http   response   that   is   cached   
the   same   response   will   be   served   to   other   users   who   request   the   same   endpoint.   The   
name   web   cache   poisoning   may   sound   scary   and   hard   but   it's   actually   relatively   easy   to   
find   and   exploit.  
The   first   step   is   to   find   unkeyed   input.   As   mentioned   earlier   cache   keys   are   used   by   the   
caching   server   to   determine   which   requests   are   the   same   and   which   are   different.   We   
need   to   find   keys   that   don't   cause   the   server   to   think   the   request   is   different.   Hince   the   
name   “unkeyed”   because   it's   not   keyed   by   the   caching   server   therefore   it  won't   be   used   
to   determine   if  a   request   is   unique   or   not.   The   second   step   is   to   determine   the   impact   
the   unkeyed   input   has   on   the   server,   can   it  be   used   to   exploit    an   open   redirect   
vulnerability,   self   xss,   or   some   other   vulnerability.   Finally,   you   need   to   figure   out   if  the   
page   is   cacheable   using   the   unkeyed   input,   if  it  is   you   should   be   able   to   exploit   other   
users   when   they   view   the   cached   page.  
I   mentioned   that   the   first   thing   you   want   to   do   is   find   unkeyed   input.   This   can   be   
accomplished   in   Burp   using   the   “param   miner”   plugin.   Once   this   plugin   is   downloaded   
you   can   easily   initiate   a   scan   by   right   clicking   a   request   and   choosing   param   miner.  
Next   the   attack   config   will   be   displayed.   You   can   change   the   settings   around   here   but   I   
typically   just   hit   ok.   Note   you   can   also   use   the   guess   headers   button   if  you're   only   
interested   in   unkey   values   in   the   header   or   you   can   hit   guess   GET   parameters   if  you're   
interested   in   GET   parameters.  
After   hitting   “ok”   the   attack   will   start   and   you   can   view   your   results   under   the   extender   
tab   as   shown   below:  
As   shown   above   the    “X-forward-scheme”   header   was   found   and   it  isn't   used   as   a   key   
by   the   caching   server.   This   header   is   also   vulnerable   to   self   XSS.   Under   normal   
conditions   we   would   only   be   able   to   exploit   ourselves   but   if   the   self   xss  payload   is   
cached   by   the   application   other   users   will   be   able   to   view   the   cached   page   if  it's   public.   
Looking   at   the   HTTP   response   we   can   see   several   headers   are   returned   which   are   
indicators   of   the   page   being   cached.    The   “X-Cache”   header   is   set   to   “hit”   which   means  
the   page   was   served   from  cache.   If   it  was   set   to   “miss”   the   page   isn't   served   from   
cache.   The   “Age”   header   is   also   another   indicator   this   page   is   cached.   This   value   
contains   the   seconds   the   page   has   been   cached   for.   Obviously   we   need   the   self   xss   
payload   to   be   cached   so   trying   to   execute   it  on   an   endpoint   that   is   already   cached   wont   
work.   However,   as   mentioned   earlier   the   path   is   normally   used   when   determining   if  a   
page   has   been   cached   or   not,   so   adding   a   random   GET   parameter   to   the   request   
should   cause   the   response   to   be   cached.  
As   you   can   see   above   changing   the   GET   parameter   “test”   to   “2”   causes   the    response   
to   be   cached   by   the   server.   This   conclusion   came   from  the   fact   that   the   “X-cache”   
header   is   set   to   “miss”   and   the   “Age”   header   is   set   to   0.    We   now   know   we   can   cause   
the   response   to   be   cached   by   incrementing   the   test   parameter.   Now   add   the   self   xss   
payload   to   the   vulnerable   “X-forward-scheme”   header   and   increment   the   test   parameter   
one   more   time.   Finally,   hit   send   and   the   self   xss  payload   will   be   cached   by   the   server.   
Any   one   who   views   the   endpoint   will   cause   the   xss  payload   to   trigger   effectively   turning   
self   xss  into   stored   xss.  
Summary  
Web   cache   poisoning   is   a   relatively   new   vulnerability   and   might   sound   confusing   to   
some   people   but   it's   fairly   easy   to   exploit.   Find   an   unkeyed   value   using   the   param   miner   
plugin,   see   if  you   can   exploit   the   unkeyed   value   in   some   way(self   xss),   see   if  you   can   
make   the   server   cache   the   malicious   http   response,   finally   test   to   see   if  your   exploit   
worked.   Normally   people   dismiss   self   xss  vulnerabilities   but   with   web   cache   poisoning   
you   can   turn   self   XSS   into   stored   XSS.  
Web  Cache  Deception  
Introduction  
Like   web   cache   poisoning   web   cache   deception   is   an   attacker   against   the   caching   
server.   With  this   attack   we   trick   the   caching   server   into   caching   sensitive   information   of   
other   users.   In   certain   scenarios   the   exposed   information   can   be   used   to   take   over   a   
users   account.  
We   talked   about   caching   servers   in   the   web   cache   poisoning   section   so   if  you   haven't   
read   that   I   would   recommend   doing   so   you   know   how   caching   servers   work.   
Web  Cache  Deception  
Web   cache   deception   works   by   sending   the   victim   a   URL   which   will   cache   the   response   
for   everyone   to   see.   This   exploit   is   only   possible   due   to   path   confusion   and   the   fact   that   
some   caching   servers   will   cache   any   request   containing   a   static   file   such   as   a   png,   jpeg,  
and   css.   
First   let's   explore   when   a   caching   server   decides   to   cache   a   response   and   when   it   
doesn't.   Caching   is   very   useful   but   sometimes   you   don't   want   to   have   a   page   cached.   
For   example,   suppose   you   have   the   endpoint   “setting.php”   which   returns   a   user's   
name,email,address,   and   phone   number.   There   could   be   numerous   users   access   
setting.php   and   each   response   will   be   different   as   the   response   relies   on   the   user   
currently   logged   in   so   it  wouldn't   make   sense   to   have   caching   on   this   page.   Also   for   
security   reasons   you   probably   don’t   want   your   application   caching   pages   with   sensitive   
information   on   them.  
As   you   can   see   in   the   above   image   on   line   15   there   is   a   header   called   “cache-control”   
which   is   set   to   “no-cache”.   This   tells   the   caching   server   to   not   cache   this   page.   
However,   sometimes   the   caching   server   will   make   the   executive   decision   to   cache   a   
page   anyway.   This   normally   occurs   when   the   caching   server   is   configured   to   cache   any   
page   ending   with   a   specific   extension   (css,jpg,png,ect).   The   caching   server   will   cache   
all   static   pages   no   matter   what   the   response   headers   say.   So   if  we   were   to   request   
“example.com/nonexistent.css”   the   caching   server   would   cache   this   response   
regardless   of   the   response   headers   because   it  is   configured   to   do   so.  
Next   let's   look   at   path   confusion.   Path   confusion   occurs   when   an   application   loads   the   
same   resources   no   matter   what   the   path   is.  With  the   rise   of   large   web   applications   and   
complicated   routing   tables   path   confusion   has   been   introduced.  
As   you   can   see   above   there   is   a   catch   all   path   on   the   root   directory.   This   means   that   
any   path   after   “/”   will   essentially   be   passed   to   the   same   function   giving   the   same   results.   
Both   the   “example.com”   and   “example.com/something''   URL   would   be   sent   to   the   same   
catch_all   function.   We   are   just   printing   the   path   but   in   the   real   world   the   application   
would   perform   some   task   and   return   the   HTML   response.  
The   above   image   is   from  the   white   paper   “Cached   and   Confused:   Web   Cache   
Deception   in   the   Wild”   and   describes   several   techniques   used   to   cause   path   confusion.   
The   first   technique   “path   parameter”   occurs   when   additional   paths   added   to   the   request   
are   passed   to   the   same   backend   function.   So   “example.com/account.php”   is   the   same   
as   “example.com/account.php/nonexistent.css”   in   the   eyes   of   the   application.   However,   
the   caching   server   sees   “example.com/account.php/nonexistent.css”.  
The   second   technique   “encoded   newline”   tries   to   take   advantage   of   the   fact   that   some   
proxies   and   web   servers   stop   reading   after   the   new   line   character   but   the   caching   
server   does   not.   So   the   webserver   sees   “example.com/account.php”   but   the   caching   
server   sitting   in   front   of   the   website   sees   
“example.com/account.php%0Anonexistent.css”   so   it  caches   the   response   because   
they   are   different.  
The   third   technique   “encoded   semicolon”   takes   advantage   of   the   fact   that   some   web   
servers   treat   semicolons(;)    as   parameters.   However,   the   caching   server   may   not   
recognize   this   value   and   treat   the   request   as   a   separate   resource.   The   website   sees   
“example.com/account.php”   with   the   parameter   “nonexistent.css”   but   the   caching   server   
only   sees   “example.com/account.php%3Bnonexistent.css”.  
The   fourth   technique   “encoded   pound”   takes   advantage   of   the   fact   that   web   servers   
often   process   the   pound   character   as   an   HTML   fragment   identifier   and   stop   parsing   the   
URL   after   that.   However,   the   caching   server   may   not   recognize   this   so   it  sees   
“example.com/account.php%23nonexistent.css”   while   the   server   sees   
“example.com/account.php”.   
The   last   technique   “encoded   question   mark”   takes   advantage   of   the   fact   that   web   
servers   treat   question   marks(?)   as   parameters   but   the   caching   server   treats   the   
response   different.   So   the   caching   server   sees   
“example.com/account.php%3fname=valnonexistent.css”   but   the   web   server   sees   
“example.com/account.php”.  
As   you   can   tell   these   attacks   are   about   the   web   server   interpreting   a   request   one   way   
while   the   caching   server   interprets   it  a   different   way.    If   we   can   get   the   application   to   
interpret   two   different   urls   the   same   way   while   getting   the   caching   server   to   interpret   it   
differently   while   caching   the   page   there   is   a   possibility   of   web   cache   deception.  
Now   let's   get   our   hands   dirty   with   a   live   application.   As   shown   below   when   visiting   the   
“/users/me”   path   the   application   presents   us   with   a   bunch   of   PII   information   such   as   my   
email,name,   and   phone   number.  
To   test   for   web   cache   deception   try   one   of   the   several   path   confusing   payloads   as   
shown   below:  
●
example.com/nonexistent.css  
●
example.com/%0Anonexistent.css  
●
example.com/%3Bnonexistent.css  
●
example.com/%23nonexistent.css  
●
example.com/%3fname=valnonexistent.css  
As   you   can   see,   appending   “nonexistent.css”   to   the   URL   did   not   have   any   impact   on   the   
response   as   we   see   the   same   response   as   if  we   hit   the   path   “/user/me”.   The   server   also   
responds   with   a   header   telling   the   caching   server   not   to   cache   the   page.   However,   the   
caching   server   is   set   up   to   cache   all   CSS   pages   so   the   page   does   in   fact   get   cached.   
Now   any   one   who   views   that   url   will   see   the   target   users   information   resulting   in   the   
leakage   of   sensitive   PII   information.  
Summary  
Web   cache   deception   is   a   fairly   new   technique   and   it's   really   easy   to   exploit.   All   you   
have   to   do   is   trick   the   caching   server   into   caching   a   page   that   has   sensitive   information   
on   it.   If   exploited   in   the   wild   attackers   could   target   users   potentially   stealing   PII   
information   or   in   the   worse   scenario   their   entire   account.   First   you   want   to   find   a   page   
exposing   sensitive   information,   check   for   path   confusion,   see   if  the   response   is   cached,   
and   finally   check   to   see   if  the   cached   response   is   public.  
More  OWASP  
Introduction  
We   discussed   some   basic   OWASP   vulnerabilities   towards   the   beginning   of   the   book   but   
that   didn't   even   scratch   the   surface.   As   I   stated   earlier   the   vast   majority   of   your   targets   
external   facing   assets   are   going   to   be   web   applications.   So   it  would   be   wise   if  you   learn   
everything   there   is   to   know   about   web   application   testing   as   you   will   be   doing   it  alot.   
That   being   said   lets   add   a   few   more   web   application   vulnerabilities   to   your   arsenal   of   
techniques.  
Server  Side  Template  Injection  (SSTI)  
Introduction  
To   understand   server   side   template   injection   you   must   understand   templates   and   to   
understand   templates   you   must   understand   the   model–view–controller   design   pattern.   
Model-view-controller   is   a   software   designed   pattern   primarily   used   for   developing   user   
interfaces.  
As   you   can   see   above   a   user   initiates   a   request   to   the   controller.   The   controller   then   
uses   the   model   to   gather   information   from  the   back   end   database,   this   information   is   
then   passed   back   to   the   controller.   Next   the   controller   passes   the   information   to   the   
view   where   it  uses   the   data   to   update   values   in   the   view.   The   updated   view   is   passed   
back   to   the   controller   where   it  is   then   sent   to   the   user   and   rendered   in   the   browser.  
The   view   is   used   to   manipulate   the   HTML   code   and   is   normally   implemented   using   
templates.   Templates   allow   you   to   have   place   holders   in   your   HTML   code   where   you   
can   pass   in   variables   as   shown   below:  
As   you   can   see   on   the   4th   line   there   is   a   title   tag   holding   the   expression   “{{Title}}”.   This   
string   will   be   replaced   by   whatever   argument   is   passed   to   the   template   engine.   This   
allows   developers   to   easily   reuse   their   code.  
A   template   engine   enables   you   to   use   static   template   files   in   your   application.   At   
runtime,   the   template   engine   replaces   variables   in   a   template   file   with   actual   values,   and   
transforms   the   template   into   an   HTML   file   sent   to   the   client.   You   may   be   thinking   why   
use   a   template   engine   to   modify   an   HTML   document   when   a   simple   format   string   
operator   would   work.   The   reason   is   that   template   engines   are   much   more   powerful   than   
a   simple   format   string   operator.   Template   engines   can   do   all   kinds   of   things   such   as   
calling   functions   and   methods,   looping   over   variables,   arithmetic,   and   much   more.  
As   you   will   find   out   in   the   following   section   hackers   can   abuse   templates   engines   to   do   
all   kinds   of   nasty   things.   Server   side   template   injection   can   be   used   for   XSS,   sensitive   
information   disclosures,   and   even   code   execution.  
Python  -  Jinja  2  
Jinja   2   is   a   template   engine   in   python   and   is   often   used   in   Flask   and   Django   
applications.   An   example   of   a   vulnerable   flask   application   can   be   found   in   the   below   
image:   
When   testing   for   server   side   template   injection(SSTI)   in   a   Jinja   2   application   I   usually   try   
the   following   payloads:  
●
{{7*7}}  
○
49  
●
{{7*’7’}}  
○
7777777  
In   the   above   image   we   see   the   number   “7777777”   displayed   so   you   can   assume   the   
application   is   vulnerable   and   is   using   the   Jinja   2   or   tornado   template   engine.  
To   fully   understand   how   to   exploit   this   vulnerability   you   first   need   to   understand   Method   
Resolution   Order   (MRO).   MRO   is   the   order   in   which   Python   looks   for   a   method   in   a   
hierarchy   of   classes   and   you   can   use   the   MRO   function   to   list   these   classes.  
●
‘’.__class.__mro__  
So,   here   it  will   first   search   the   string   class   for   a   method   and   if  it's   not   there   it  will   search   
the   root   object   class.   For  this   attack   we   only   care   about   the   root   object   class   as   we   can   
use   this   to   get   a   handle   to   all   other   classes   used   by   the   application.   To   get   the   root   
object   go   to   the   second   index   in   the   array   as   shown   below:  
●