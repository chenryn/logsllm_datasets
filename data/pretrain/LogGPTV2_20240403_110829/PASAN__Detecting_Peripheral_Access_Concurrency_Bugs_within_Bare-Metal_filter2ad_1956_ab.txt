step (i) will not eliminate the concurrency bug. To guarantee
the exclusive access to the SPI bus, we need to protect the
bus-level state machines, as denoted as Bus Lock (i.e., a blue
box) in Figure 1.
Peripheral-Level State Machines. Embedded peripherals
are often memory mapped within an embedded system and
have their own internal state machines. As shown in Figure 1,
the LIS3DH sensor (accelerometer) contains four states be-
sides the init state. To read a value from the sensor, a thread A
starts with a read command via writing into a memory mapped
I/O (MMIO) address, which puts the sensor into the read cmd
state. The sensor’s internal state machine then transits to the
wait state since the command processing takes some time
depending on the sensor’s working frequency (e.g., 50Hz).
Now imagine another thread B sends a command to the sensor
during the wait state. Due to such a transaction corruption,
the sensor might produce an unexpected result, e.g., corrupted
three-axis acceleration values, leading to an accident if it is
used by a robotic vehicle. Similarly, putting a lock only on
the state sending a command to the sensor cannot eliminate
this concurrency bug. To achieve an exclusive access to a
peripheral, we need to protect the peripheral-level state ma-
chines, e.g., all the four states of the sensor and all the three
states of the SD card controller, as denoted as Peripheral Lock
in Figure 1.
There have been a large body of the prior approaches for
detecting concurrency bugs [13, 15, 19–21, 24, 32, 33, 36, 40,
42,50,54,55,60,62,65–67,69,73,79,83,84]. As summarized
in Table 1, most of them (classiﬁed as “Static”, “Dynamic”
and “Hybrid” in the analysis approach column) have not con-
sidered the concurrency issues caused by the race conditions
in the internal state machines within bus and peripheral lev-
els [13,15,19–21,24,33,40,50,54,55,62,67,69,73,79,83,84].
Furthermore, other works (classiﬁed as “Manual” in Table 1)
require to manually modify source code [36, 65] or insert an-
notations for analysis [32, 42] while relying on users to fully
understand peripheral device operations. The other works
(classiﬁed as “Algorithmic”) even require the redesigning
of the entire code base [60, 66]. This paper aims to detect
a new class of concurrency bugs caused by the transaction
corruption that has never been considered before PASAN –
an address-range-aware and transaction-aware concurrency
detection tool for embedded systems. In PASAN, we solve
three main challenges:
• C1: How to ﬁnd a peripheral’s MMIO address range
automatically? We note that a naïve protection on a single
MMIO address operation is not enough due to the intrinsic
behavior of the internal state machines. We need to know
the whole MMIO address range given a peripheral, and lock
the whole range to protect a transaction of the peripheral.
• C2: How to ﬁnd a peripheral’s transaction scope auto-
matically? Recall that a transaction is essentially a com-
plete transition of the internal states. To protect a transac-
tion, we need to know where the transaction starts and ends
within the code, and lock the whole transaction to protect
the internal state machines.
• C3: How to use MMIO addresses and transaction
scopes to ﬁnd bugs automatically? With the above knowl-
edge, we have an opportunity to detect concurrency issues
of peripherals. We need a way to explore as many concur-
rency sources as possible while reducing false positives.
Usage Scenarios and Required Expertise. PASAN is an
automatic tool that detects not just typical concurrency bugs,
but speciﬁc concurrency bugs with transaction corruptions.
Therefore, it does not assume users to have certain expertise.
However, we expect the developers who respond to PASAN’s
bug report to have knowledge about in (1) embedded sys-
tem device driver programming, (2) multi-threading, (3) race
condition (e.g., lock/unlock usage), and (4) peripheral device
data sheets. The aforementioned background is essential to
understand the bugs and ﬁx the race conditions.
We believe PASAN is particularly useful when appropri-
ate dynamic device driver concurrency analysis tools are not
available. This is quite common in the domain of embed-
ded systems because of either the inability to instrument the
related hardware devices (e.g., the peripheral device or the tar-
get board) for analysis or the unavailability of corresponding
dynamic analysis frameworks. For instance, Hellgrind (part
USENIX Association
30th USENIX Security Symposium    251
Figure 2: The architecture of PASAN.
of Valgrind [67]) cannot run on an RTOS, and QEMU [35]
supports only a few boards and peripherals. Moreover, even
state-of-the-art dynamic analysis tools have limited analysis
coverage; it is hard for them to uncover concurrency bugs
due to their intrinsic triggering conditions [55]. More impor-
tantly, they cannot ﬁnd concurrency bugs with transaction
corruptions.
3 Design
Concurrent memory accesses which do not consider the
internal processing states of peripherals can lead to con-
currency bugs. These bugs result in undeﬁned behavior
due to the generation of incorrect results or operation fail-
ures. We propose PASAN which provides a device-agnostic
framework to detect such concurrency bugs. Different from
the detection techniques in the prior art (that focuses on
preventing concurrent accesses to certain program vari-
ables [33, 40, 50, 54, 55, 62, 73, 79, 83, 84]), PASAN takes
a transaction-aware and address-range-aware concurrency
bug detection approach which has resulted in the discovery
of novel concurrency bugs in peripheral device transactions.
Figure 2 presents the overall architecture of PASAN frame-
work. PASAN takes three inputs: (1) the source code of the
host ﬁrmware which will compile into the LLVM bitcode [61],
(2) the host ﬁrmware’s memory layout including MMIO ad-
dress ranges, and (3) the list of the library functions utilized
by the host ﬁrmware. Then PASAN proceeds through the fol-
lowing steps to generate the concurrency bug report as the
output automatically without requiring any user intervention
and expertise. This report contains: (i) MMIO access instruc-
tions causing concurrency bugs, (ii) inferred transaction spans,
and (iii) lock objects and their spans if they are enforced. For
developing the rectiﬁed device driver, PASAN requires an
expert to deal with false positives and ﬁx bugs as discussed in
Section 2.
1. MMIO Address Range Identiﬁcation (Section 3.1):
First, PASAN parses the memory layout documents to
identify the address ranges of MMIOs through which
peripheral devices are attached to the host. By enabling
the automated mapping of the accessed addresses to the
corresponding MMIOs, this step plays an important role
(in Step 4) in identifying the instructions belonging to
the same transaction. As such, this step addresses the
ﬁrst aforementioned challenge (C1 in Section 2).
2. Target Function Identiﬁcation (Section 3.2): Then, by
analyzing the target LLVM bitcode, PASAN identiﬁes
the functions (e.g., multi-process, multi-thread, lock, and
interrupt management functions) which are relevant for
analyzing concurrently executable functions.
3. Concurrency Analysis (Section 3.3): In this step,
PASAN ﬁrst identiﬁes the instructions which can be ex-
ecuted concurrently. Out of those instructions, PASAN
identiﬁes the existing locked instructions (which are exe-
cuted exclusively) via the context-sensitive lockset anal-
ysis [79]. Unlike the prior art, PASAN also considers the
operations of interrupt handlers.
4. Transaction Span Extraction (Section 3.4): Next,
PASAN identiﬁes all of the transaction spans, i.e., start
and end pair of instructions belonging to one complete
transaction of a peripheral device, by developing a set
of span extraction heuristics. This novel technique to ex-
tract the proper lock spans enables PASAN to determine
transaction-aware access patterns of peripheral devices,
and addresses the second aforementioned challenge (C2
in Section 2). We note that the complete transaction
should ideally be locked (i.e., executed exclusively) to
avoid concurrency bugs.
5. Concurrency Bug Detection (Section 3.5): Finally,
PASAN veriﬁes whether the determined transaction span
(obtained in Step 4) is correctly covered by the existing
lock objects (obtained in Step 3). This addresses the
last aforementioned challenge (C3 in Section 2) and en-
ables the detection of concurrency bugs by automatically
checking whether an MMIO address can be concurrently
accessed in the absence of a proper lock span.
We describe the details of each step of PASAN in the fol-
lowing sections.
3.1 MMIO Address Range Identiﬁcation
MMIO enables the interaction between a host and periph-
eral devices by assigning a unique and ﬁxed range of mem-
ory addresses for each peripheral. For example, a Universal
252    30th USENIX Security Symposium
USENIX Association
Source CodeConcurrency BugDetection (§3.5)ConcurrencyAnalysis (§3.3)MMIO AddressRanges Identification (§3.1) Transaction SpanExtraction (§3.4)%2 = load i32, i32* %3Memory LayoutLibrary Function ListMemoryPeripheralConcurrencyBug ReportPASAN Frameworkfork   0x4000lock   0x6884sleep 0x9102--------Target Function Identification (§3.2)ing the starts of interrupt processes, (3) interrupt disable/en-
able functions (e.g., enable_irq) utilized to check whether
interrupt handlers can execute concurrently, and (4) the func-
tions related to locks and unlocks (e.g., mutex_lock) identi-
fying the locked instructions and objects. It is important to
consider interrupts because they can start a new transaction
with a peripheral, thus corrupting the ongoing transaction of
the peripheral. If none of relevant functions is found from the
source ﬁle, PASAN looks for architecture-speciﬁc assembly
instructions related to interrupts. For example, Cortex-M se-
ries architecture employs cpsid and cpsie instructions for
disabling and enabling interrupts, respectively.
3.3 Concurrency Analysis
In this step, PASAN identiﬁes which code can potentially be
executed concurrently by tracking the code’s starting/stopping
threads and checking the enabling/disabling code of interrupt
handlers. Next, by leveraging lockset analysis, PASAN iden-
tiﬁes which code are not properly locked allowing concurrent
execution of unlocked code by leveraging lockset analysis.
Speciﬁcally, by analyzing the LLVM bitcodes and the list
of the relevant library and interrupt handler functions (iden-
tiﬁed in Section 3.2), PASAN ﬁrst identiﬁes the executable
processes, threads and interrupt handlers. Next, PASAN an-
alyzes them to identify the concurrently executable instruc-
tions. Finally, PASAN performs lockset analysis to identify
the instructions that are “locked” to prevent concurrent ac-
cess. We provide the technical details of this analysis below,
and describe them through an example shown in Figure 4
and Figure 5.
Executable Processes, Threads, and Interrupt Han-
dlers. To infer this information, PASAN generates the call
graph via points-to analysis [76], which is an established static
analysis technique for identifying which memory locations
the pointer variables can reference. Then, PASAN gathers
the list of entry functions of processes, threads, and interrupt
handlers. Starting from the entry function of the main pro-
cess, PASAN ﬁnds instructions which call process and thread
creation functions. Next, PASAN ﬁnds newly created func-
tions from the arguments of these function call instructions.
If such arguments are variables, PASAN ﬁnds the possible
functions pointed by those variables via points-to analysis.
One example is main function calling pthread_create with
IOThreadEntry (the entry function) as the argument.
Concurrently Executable Code.
PASAN identiﬁes the
concurrently executable code by analyzing the instructions
corresponding to different processes and threads [47]. In this
analysis, PASAN ﬁrst discovers the life span of each pro-
cess/thread by tracking its identiﬁer via points-to analysis. A
life span usually starts with the identiﬁer initialized by the
process/thread creation function, and ends when the identiﬁer
is passed back to the function after the process/thread ter-
mination function. For instance, the functions waitpid and
Figure 3: An MMIO address range corresponding to a Uni-
versal Synchronous/Asynchronous Receiver/Transmitter (US-
ART).
Synchronous/Asynchronous Receiver/Transmitter (USART) is
mapped to an address range used to control, receive and trans-
fer data as illustrated in Figure 3. Therefore, in this step, to
detect potential concurrent accesses to the same peripheral,
PASAN identiﬁes the MMIO address range allocated to each
peripheral.
To identify these address ranges, PASAN utilizes the mem-
ory layout documents for the host including either the system
view description (SVD) ﬁle [8] or the host-speciﬁc develop-
ment tool libraries. We note that SVD is preferred because
of the following reasons: (1) SVD contains the formally de-
ﬁned and accurate description of the memory layout of all
MMIO address ranges; (2) SVD can be easily parsed thanks
to its well-deﬁned structure based on the Extensible Markup
Language (XML) format; and (3) SVDs are available for
a majority of hosts equipped with ARM architecture-based
processors (e.g., Cortex-A and Cortex-M).
If an SVD ﬁle is not available, PASAN identiﬁes the MMIO
address ranges using the hard-coded base addresses in host-
speciﬁc development tool libraries (e.g., header ﬁles). In this
case, PASAN utilizes two common observations in embedded
domains: (1) each peripheral is mapped to a unique address
range, and (2) each peripheral is accessed by loading a hard-
coded base address. Exploiting these observations, PASAN
determines the MMIO address range for a peripheral starting
with the base address for the peripheral and ending with the
address right before the base address of the closest next periph-
eral. For example, as shown in Figure 3, the MMIO address
range of USART spans from 0x40004400 to 0x400047FF.
3.2 Target Function Identiﬁcation
In this step, PASAN identiﬁes the functions related to poten-
tial concurrent MMIO accesses and lockings that are essential
to identify concurrently executable code. Speciﬁcally, PASAN
handles four types of functions: (1) thread or process manage-
ment functions (e.g., pthread_create and pthread_join)
which are used to analyze the control ﬂow of execution, (2) in-
terrupt handler functions (e.g., I2C_IRQHandler) represent-
USENIX Association
30th USENIX Security Symposium    253
FirmwareBase (Start) AddressEnd Address0x400044000x400047FFUSART’s MMIO boundary addresses0x000x040x08 0x0c0x100x140x18ACCESSUSART_SRUSART_DRUSART_BRRUSART_CR1USART_CR2USART_CR3USART_GTRPOffsetRegisterthese different call stacks help identify the potential threads
which can execute concurrently.
In addition to detecting typical lock objects, PASAN also
takes enabling and disabling of interrupts into account by
considering them as lock and unlock functions respectively.
In fact, the interrupt control ﬂag can be considered as a virtual
global lock object preventing interrupts from concurrent exe-
cutions. PASAN also identiﬁes recursive function calls, and
avoids the analysis of duplicate functions in a loop. To identify
such recursive function calls, we use the strongly connected
component algorithm [68] employed in other static analysis
systems as well, such as the points-to analysis framework
employed by us [76].
3.4 Transaction Span Extraction
To ﬁnd concurrency bugs for peripheral devices, PASAN
must consider whether the concurrency can occur for trans-
actions rather than for individual MMIO accesses (discussed
in Section 2). As such, before the concurrency bug detection,
PASAN must identify transaction spans that are the ranges
of instructions representing transactions.
Speciﬁcally, as shown in Figure 5, the usage of different
locks leads to peripheral access concurrency bugs. More im-
portantly, even if the same lock was used, we still could not
guarantee that both the store and the load come from the
same thread. It might be Thread 1 store + Thread 2 load
or Thread 2 store + Thread 1 load. In either case, neither
Thread 1 nor Thread 2 would have the correct response from
the peripheral due to the corruption of each thread’s transac-
tion with the peripheral.
Consequently, we need to detect each transaction initiated
by different threads that can potentially interleave with each
other and cause a transaction corruption. As the ﬁrst step,
we extract all of the transaction spans in advance. We argue
that although drivers might lack proper locking, their imple-
mentations have to follow the operation instruction of the
peripherals (aka, transaction) to make them work. Otherwise,
these drivers simply would not work, which would be caught
during the development or testing. More importantly, the ex-
tracted transaction spans need to be context-sensitive and
MMIO-address-range-aware. The former provides call stacks
with lock information (if exists); the later tells potential con-
current peripheral accesses from different MMIO addresses
but within the same MMIO address range.
Finding the Peripheral-Access Instructions.
PASAN
identiﬁes the peripheral-access instructions by following
the occurrences of the store and load instructions, whose
pointer argument might represent an MMIO access. We take
the following approach to resolve possible address values of
a given pointer variable: PASAN ﬁrst performs points-to anal-
ysis to ﬁnd the list of alias variables of the pointer variable. It
then strives to ﬁnd the constant MMIO address values propa-
gated to such alias variables. This can be done by checking the
Figure 4: Code snippets for locked MMIO access instructions.
Figure 5: Locked MMIO access instructions in different
thread call stacks.
pthread_join may denote the end of a process and thread re-
spectively. We obtain the concurrently executable code by de-
tecting the overlap of the life spans of different processes and
threads. For instance, in Figure 4, we observe that the store
and load instructions are executed whenever the spi_cmd
function is executed. In Figure 5, we consider that the two
overlapping threads (i.e., Thread 1 corresponding to the main
function, and Thread 2 corresponding to the IOThreadEntry
function) call the spi_cmd function. Then, PASAN reports
both load and store instructions (that are parts of a single
transaction that must be atomically executed) as concurrently
executable when those threads run simultaneously.
Lockset Analysis. After analyzing the lock/unlock and in-
terrupt enable/disable functions (identiﬁed in Section 3.2),