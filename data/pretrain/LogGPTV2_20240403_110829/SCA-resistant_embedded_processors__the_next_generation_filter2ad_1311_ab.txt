the mask storage can be reused for a mask with a diﬀerent
masked register address.
2Note that RNGs are sometimes also referred to as
true/truly random number generators (TRNGs).
If the period of the LFSR is suﬃciently long, then masks
will not repeat. Thus it is only necessary to use the RNG for
seeding of the LFSR at device startup with all masks being
subsequently produced by the LFSR. The speed of the RNG
thus only dictates some startup cost but has no bearing on
the device performance during normal operation. Therefore,
a slower but cheaper RNG can be used if the startup cost
can be tolerated to be longer. However, it is also possible
to build relatively fast and simple RNGs [4] to reduce this
initial cost.
Note that any given state of the LFSR can be used as
basis for reconstructing masks, as an LFSR can be run in
both forward and inverse direction. This property can be
used to make the regeneration of masks eﬃcient. Whenever
a mask needs to be stored to memory, the current LFSR
state can be saved along with it. By the principle of locality,
the masks held in the mask storage will not be “far” from the
current LFSR state, and thus regenerating them from that
state will only take a few steps. In order to uphold security,
care must be taken that the words of an LFSR state which
is stored to memory are never be used as masks themselves.
All information about the state of the mask generator and
mask storage which is held in memory should not be directly
readable by an attacker. This is the same requirement im-
posed on any sensitive data typically stored in memory, e.g.
cryptographic keys. Achieving such protection is thus a gen-
eral issue for any secure embedded system, e.g. by use of a
secure operating system preventing dumps of the complete
memory, and is out of scope of this work.
It is important to note that instructions which are exe-
cuted within the secure zone and which have masked operands
can only be executed when the corresponding masks are lo-
cated in the mask storage. If the required masks happen to
be stored in memory in their alternative representation, they
ﬁrst need to be restored to the mask storage before regular
execution can continue. Flushing out masks from the mask
storage can also be used to share the secure zone among
multiple processes in a multi-tasking environment. By re-
moving all masks from the mask storage and the clearing of
the current state of the mask generator, a complete sepa-
ration of processes is achievable as it would be required for
any environment which runs a secure operating system with
potentially insecure user applications. Thus, our solution
could be seamlessly integrated into such environments, e.g.
processors which support the ARM TrustZone concept [1].
3.3 Exceptional Conditions
The described functionality of the hardware countermea-
sures can lead to a number of exceptional conditions in the
processor. When a new mask needs to be written to the
mask storage, there might not be any free entries left (mask
storage full exception). Furthermore, the mask generator,
which keeps track of the mask index of the generated masks,
might encounter an overﬂow condition of the counter for
the mask index (mask index overﬂow exception). Finally,
a mask which is required to execute an instruction with
masked operands might not be present in the mask stor-
age, e.g. because it is stored in memory in its alternative
representation (mask missing exception). Exceptional con-
ditions should cause hardware traps, so that the according
trap handler routines can rectify the situation before normal
execution resumes.
4.
IMPLEMENTATION DETAILS
We have implemented our protection mechanisms in the
32-bit SPARC V8-compliant Leon-3 processor. Our concrete
design decisions are described in the following sections.
4.1 Functional Unit
The functional unit must support all instructions to imple-
ment all required cryptographic algorithms. More precisely,
all instructions which manipulate critical data, which can
potentially be subjected to an SCA attack need to be real-
ized by the protected functional unit. Uncritical operations
like updating of round counters, loop condition checking,
etc. can still be implemented outside of the secure zone using
native instructions of the processor. Note that our counter-
measures cannot relieve the software developer from avoid-
ing traditional well-known SCA vulnerabilities like data-
dependent conditional jumps.
The only class of typical processor operations which can
not be protected in our solution are table lookups, as they
inherently involve access to the memory. Although data-
dependent table lookups are used in some cryptographic
implementations, their use should be discouraged as they
lead to potential vulnerabilities against cache-based timing
attacks [2, 17]. Instruction set extensions can usually be em-
ployed to remove the need for table lookups completely, so
there is no need to support them in the secure zone concept.
For our implementation we have chosen to include support
for AES in the form of the “Advanced Word-Oriented AES
Extensions with Implicit ShiftRows” from [14] and a pro-
tected XOR instruction. These instructions support all AES
round functions and the AES key schedule. Note that as we
employ Boolean masking to protect critical values outside
of the secure zone, the AES AddRoundKey transformation
can also be performed directly on the masked values using
an unprotected XOR instruction.
4.2 Mask Generator
For a w-bit processor, the mask generator must be able to
deliver a fresh w-bit mask for the result of each instruction
with masked operands. In order to sustain an execution rate
of one instruction per clock cycle, one fresh mask per cycle
is required. Section 3.2 already mentioned our choice of an
LFSR-based mask generator. More precisely, we selected
a Fibonacci-type LFSR based on the pentanomial x127 +
x87 + x59 + x37 + 1. This irreducible polynomial generates
a multiplicative group of order 2127 − 1, which is identical
to the period of the LFSR. Thus, after seeding, the LFSR is
capable of producing about 2122 masks (32 bits each) before
the sequence of masks starts repeating.
The choice of the pentanomial has two key advantages.
First, the input bit generation can be eﬃciently parallelized,
so that 32-bit pseudo-random masks can be produced in a
single clock cycle. Second, the LFSR can also be conﬁgured
to run in the inverse direction at low extra hardware cost.
This functionality is very useful to re-generate masks from
their alternative representation in an eﬃcient manner.
The mask generator keeps track of the mask index of the
current mask, i.e. the number of steps taken from the last
seed value. The mask index is written to the mask stor-
age along with the mask and it is an essential part of the
alternative representation of the mask. This alternative rep-
resentation of the mask is used when it needs to be ﬂushed
out to the unprotected memory.
4.3 Mask Storage
The mask storage holds a number of masks which can be
readily used for any instruction with masked operands. The
association of masked values and masks is established via the
masked register address (cf. Section 3.1). Each logical reg-
ister of the processor, i.e. in SPARC V8 architectures each
of the 32 registers of the current register window, is mapped
to a speciﬁc masked register address via a custom hardware
table (the so-called masked-register table or MRT). Moving
a masked value from one logical register to another must
therefore be reﬂected by an update of the MRT. Further-
more, the masked register address associated with the mask
is contained in the mask storage along with the mask itself.
Consequently, the processor can associate masked operands
in the logical registers with their respective masks via the
masked register address.
We have set the number of entries of the mask storage
unit to eight. Each entry consists of a valid bit, a dirty bit,
a 10-bit masked register address, the 21-bit mask index, and
the 32-bit mask. A mask can be written to any of the eight
entries and therefore the organization of the mask storage
resembles a fully-associative cache with address-dependent
lookup. Mask missing exceptions (cf. Section 3.3) can thus
be regarded as the equivalent of cache misses. The valid
and dirty bits set automatically by the hardware and can
be retrieved via special management instructions. The valid
bit indicates whether a speciﬁc entry is valid. The dirty bit
is set when the mask has no alternative representation in
memory3.
The valid bit, the masked register address, and the mask
index of each entry can be read as a single 32-bit word with
the help of a custom instruction. Together with the original
seed state of the LFSR, this 32-bit word is suﬃcient to re-
construct the mask and its context at any later point in time.
An illustrative example of the interplay of logical registers,
the MRT, and the mask storage is provided in Section 4.5.
4.4 Management of Masked Register Addresses
The masked-register table (MRT) is used by the compiler
or the developer of the cryptographic application to indicate
the presence of speciﬁc masked values (with masked register
addresses) in the logical registers of the processor. Thus,
masked values can be moved freely between logical registers
and memory, giving the greatest degree of ﬂexibility to the
software. The entries of the MRT can be read and written
by custom instructions. As the MRT does not contain any
critical data it can be implemented in standard CMOS.
4.5 Masked Values and Masks
In the following, we illustrate the software usage of masked
registers with a simple example. An assembly-code example
of using the secure zone is given in Figure 3.
Figure 2 shows an example of how masked values are as-
sociated to their masks. The standard register ﬁle of the
Leon-3 with the 32 logical registers is depicted on the left
(logical register address and register contents). The MRT
with its mapping from logical register addresses to masked
register addresses is shown in the middle. For each of the 32
logical registers there is exactly one entry in the MRT. On
3If an entry with a set dirty bit is ﬂushed to memory, its
alternative representation must be written to memory.
If
the dirty bit is not set, the entry can just be deleted from
the mask storage.
the right, the mask storage with a capacity of eight entries
is shown (only masked register address and mask).
In this example, the register ﬁle contains four masked val-
ues (Am, Cm, Em, and Fm). The mask storage holds ﬁve
masks (mA, mB, mC , mD, mF ). The masked register with
address 0 encompasses the masked value Am (held in i0)
and the mask mA (held in the ﬁrst entry of the mask stor-
age). As both values are resident in the register ﬁle and the
mask storage, the masked register 0 can be readily used as
operand in a secure zone instruction. The same is true for
masked register 3 (Cm in i1 and mC in third entry of mask
storage) and for masked register 9 (Fm in o7 and mF in
ﬁfth entry of mask storage). However, the masked register
7, with its masked value Em in i3, cannot be used, because
the associated mask is not present in the mask storage. To
become useable, the mask for masked register 7 must ﬁrst
be restored in the mask storage. There are also two masks
(mB and mD) in the mask storage which are associated with
masked registers 2 and 5, respectively. However, the corre-
sponding masked values (Bm and Dm) are not present in the
register ﬁle. In order to use the masked registers 2 and 5,
the masked values must be loaded into a logical register and
these registers must be associated with the masked register
addresses 2 and 5 by updating the MRT. For example, Bm
could be loaded from memory into i2 and the MRT entry
for i2 could be updated to point to masked register address
2.
Figure 3 gives an example of implementing a single round
of AES on the secure zone in AT&T assembly notation. In
this notation, register names are preﬁxed by % and the des-
tination register of an instruction (if any) is written as the
ﬁnal operand of the instruction. First, the MRT is updated
so that the masked register addresses 0-7 are assigned to
the logical registers o0-o3 and l4-l7 (szwwrmrtdir instruc-
tion). Then the AES state in registers o0-o3 is masked
(szmask instruction). The round key in o4-o7 is applied
to the masked AES state via the standard xor instruction
(cf. Section 4.1). The rest of the round transformations is
done via the szsbox4s and szmixcol4s instructions (cf. [14])
using the temporary registers l4-l7. The result is then un-
masked (szunmask instruction).
4.6
Integration of the Secure Zone into the Pro-
cessor Pipeline
Figure 4 gives a simpliﬁed view of three pipeline stages of
the Leon-3 processor and the logical structure of the secure
zone. Each register stage has feedback paths to the previous
stages in order to cater for potential data dependencies of
subsequent instructions, e.g. if an instructions uses the result
of the previous instruction as operand.
While the functional unit with unmasking and masking
logic resides on the same level as the execute stage (which
contains the other functional units of the processor), the
mask storage and mask generator are located on the same
level as the register ﬁle. This depiction should emphasize,
that changes to the mask storage and the mask generator
should only occur when there is an according change in the
register ﬁle. In particular, whenever a masked result of an
instruction is committed to the register ﬁle, the according
new mask must be written to the mask storage.
In some cases, the result of an instruction is calculated in
the execute stage, but it is never committed to the register
ﬁle and thus has no eﬀect on the processor state. This can
Figure 2: Example of association of masked values and masks.
! %o0-%o3: AES state
! %o4-%o7: AES round key
! %l4-%l7: Temporary AES state
! Set up MRT: Assign masked register
! addresses 0-7 to %o0-%o3 and %l4-%l7
szwwrmrtdir %o0, 0
szwwrmrtdir %o1, 1
szwwrmrtdir %o2, 2
szwwrmrtdir %o3, 3
szwwrmrtdir %l4, 4
szwwrmrtdir %l5, 5
szwwrmrtdir %l6, 6
szwwrmrtdir %l7, 7
! Mask AES state
szmask %o0, %o0
szmask %o1, %o1
szmask %o2, %o2
szmask %o3, %o3
! AddRoundKey
xor %o0, %o4, %o0
xor %o1, %o5, %o1
xor %o2, %o6, %o2
xor %o3, %o7, %o3
! SubBytes & 1st part of ShiftRows
szsbox4s %o0, %o1, %l4
szsbox4s %o1, %o2, %l5
szsbox4s %o2, %o3, %l6
szsbox4s %o3, %o0, %l7
! 2nd part of ShiftRows & MixColumns
szmixcol4s %l4, %l6, %o0
szmixcol4s %l5, %l7, %o1
szmixcol4s %l6, %l4, %o2
szmixcol4s %l7, %l5, %o3
! Unmask result
szunmask %o0, %o0
szunmask %o1, %o1
szunmask %o2, %o2
szunmask %o3, %o3
Figure 3: A single round of AES implemented on
the secure zone.
happen for various reasons, e.g. for instructions after a taken
branch or when a previous instruction has caused a trap.
Certain control signals of the processor pipeline make sure
that such cases are handled correctly. The mask storage and
the mask generator can make use of the same control signals
in order to determine whether an instruction should change
their state or not.
Figure 4 also shows two pipeline register stages within
the secure zone which can be regarded as extensions to the
pipeline register stages at the end of the execute and mem-
ory stage of the processor pipeline. The secure zone must
implement feedback paths from these register stages in or-
der to cater for potential data dependencies of subsequent
instructions which use the secure zone in the same way as
the rest of the processor pipeline.
4.7 Automatic Handling of Exceptional Con-
ditions
Whenever an exceptional condition as described in Sec-
tion 3.3 occurs, the processor throws a hardware trap and
automatically directs execution to the according trap han-
dler. We have added a set of management instructions which
allows for an automatic handling of these exceptional condi-
tions4. More precisely, an operating system with appropri-
ate trap handlers can manage these conditions transparently
for the cryptographic application. Therefore, cryptographic
applications need not be aware of the actual size or con-
tents of the mask storage or of the size of the mask index.
The only thing it has to do is to indicate where it holds the
masked intermediate values during execution via the MRT.
These updates of the MRT could be inserted automatically
by the compiler, so that a cryptographic application using
the protection of the secure zone could be written in almost
the same way as an unprotected application.
5. USE IN AN AUTOMATED DESIGN FLOW
AND COMPILER INTEGRATION
The presented protection mechanism can be easily used
as basis for a fully automated design ﬂow for secure embed-
4These instructions allow to read and write the mask gen-
erator state, regenerate masks, read and clear entries of the
mask storage, update the MRT, etc.
Am00mAi02mB......Register fileMasked Register TableMask storageLRARCLRAMRAMRAMaskLRA: Logical Register AddressRC: Register ContentsMRA: Masked Register Addressi0i1Cm3i13mC5mD9mFEmi2i3Fmo7o6i27i3o69o7Figure 4: Secure zone components in relation to the processor pipeline stages.
ded systems. Starting from a baseline protected processor,
an arbitrary number of protected instructions can be simply
added by extending the functional unit within the secure
zone with the appropriate capabilities. Moreover, the set of