X 
X
X 
X 
X 
X 
X 
X 
X 
X 
X 
X 
X 
X 
X 
vulnerability checking [15]. Although VMs can harm 
security in some cases [12], most of these problems 
come  from  running  many  virtual  machines  on  one 
host  or  from  reverting  to  checkpoints.  Siren  would 
typically  run  with  only  one  main  VM  for  the  guest 
operating  system  that  rarely  reverts  to  checkpoints. 
Another issue with virtual machines is that they are 
not  widely  used  at  this  time  and  would  have  to  be 
installed  to  use  Siren.  However,  recent  research 
shows that it is feasible to place an entire operating 
system  inside  of  a  VM  without  disturbing  the  OS, 
significantly  hurting  performance,  or  requiring  any 
user interaction [17]. 
In the Siren architecture, the guest OS contains 
all of the user’s normal files and applications. This is 
where  the  user  browses  the  web,  sends  e-mail,  and 
composes documents. The guest OS is the one most 
susceptible to infection by spyware, root kits, worms, 
and  other  malware.  Siren  operates  below  the  guest 
OS on the virtual machine monitor (VMM) in order 
to isolate itself from these threats. Here it is able to 
view  all  device  I/O  from  the  guest  OS  and  inject 
input without being disrupted or detected by the guest 
OS. 
programs 
legitimate 
that  most 
To detect malware, Siren takes advantage of the 
rarely 
fact 
communicate over the network when the user is not 
around. Many computers, however, run a few trusted 
processes  such  as  automated  update  software  and 
event  notification  programs  (weather,  sports  scores, 
etc.)  that  generate  network  traffic  when  the  user  is 
away.  If  not  filtered  out,  these  programs  have  the 
potential to generate false positives.  
One  approach  to  filtering  network  messages 
from trusted applications is to ignore traffic based on 
process ID. This approach is similar the one taken by 
many  commercial  protection  programs  such  as 
and 
Norton  Personal  Firewall  and  BlackIce  Defender. 
Although  intuitive,  deciding  trust  by  originating 
process does not work very well in practice; injecting 
and  executing  code  in  other  processes  is  relatively 
straightforward.  Many  spyware  programs 
insert 
libraries  into  web  browsers  in  order  to  track  the 
user’s  browsing  patterns, 
send  private 
information back to their host servers from within the 
browser. 
Instead  of  looking  at  the  originating  process, 
Siren  can  support  a  white  list  of  trusted  destination 
network addresses. For example, if Google Toolbar, 
Windows Update, and Weatherbug are installed, then 
Siren  would  ignore  network  messages  from  that 
workstation  to  google.com  and  windowsupdate.com 
and weatherbug.com, regardless of which application 
made  the  requests.  Using  a  white  list  of  trusted 
addresses, however, may open a hole in the system. If 
an  attacker  can  passively  listen  somewhere  on  the 
path from the workstation to a trusted server, then he 
or  she  can read  data  sent  to  the  trusted  server  by  a 
malware.  This  attack  is  fairly  hard  to  execute,  but 
networks that are worried about such threats can ban 
programs like Google Toolbar and Weatherbug, and 
also run a local update server. 
3. Evaluation 
the 
A  major  security  threat  that  Siren  aims  to 
eliminate is spyware. We installed ten different types 
of  spyware  on  a  Windows  PC  instrumented  with 
Siren to evaluate its effectiveness. We also installed 
Web  Tap  [2]  on  the  system  for  the  purpose  of 
comparison.  Table  1  summarizes  our results  for  the 
ten  spyware  programs.  For  the  first  phase  of  the 
experiment,  we  ran  Siren  without  injecting  any 
additional  input  to  see  how  many  of  the  spyware 
programs  generated  network  traffic  when  the  user 
was  away.  Three  out  of 
ten  programs 
(BargainBuddy,  Gator, 
and  TargetSaver)  did 
communicate with their home servers in the absence 
of  human  input  and  were  detected  immediately  by 
both Siren and Web Tap. Web Tap, however, failed 
to detect the other seven spyware programs because 
they  made  only  few  web  requests  to  blend  in  with 
normal browsing activity. 
Using  systems  such  as  BINDER  [9],  Norton 
Personal  Firewall,  and  BlackIce  Defender  would 
have  been  an  alternative  approach  to  detecting  the 
spyware programs. However, they are also unable to 
identify the seven spyware programs missed by Web 
Tap because these programs run as plug-ins inside of 
the  browser,  which  is  a  trusted  process  receiving 
legitimate input. Because Siren uses input injection, it 
is able to detect spyware embedded in a web browser. 
Proceedings of the 2006 IEEE Symposium on Security and Privacy (S&P’06) 
1081-6011/06 $20.00 © 2006 IEEE 
For  Siren’s  evaluation,  we  manually  created  a 
sequence of web activity and replayed it with each of 
the  spyware  programs  installed.    Siren  then  ran  a 
script  to  compare  the  websites  visited  during  each 
input run. Siren flagged request to sites that were not 
visited in the original input run as malicious. Using 
this heuristic, Siren identified all ten of the spyware 
programs, even those that ran inside of the browser 
and were not detected by Web Tap.  
At  the  present  time,  we  have  not  tested  Siren 
against  any  programs  that  analyze  web  browsing 
patterns  to  mount  a  sophisticated  mimicry  attack 
because  we  are  unaware  of  any  such  programs. 
However, several spyware programs in our tests only 
communicate  when  the  user  is actively  browsing  in 
order to blend in with normal traffic. 
4. Realistic Input Generation Challenges 
For our evaluation, we injected input by opening 
a web browser window and manually traversing web 
pages. Ideally, Siren should be able to automatically 
generate and inject human input. There are a number 
of challenges, however, in developing such a system. 
One  major  issue  is  ensuring  that  the  injected  input 
does  not  cause  any  negative  side-effects.  Examples 
include making a purchase over the internet, sending 
out an e-mail, or modifying an important document. 
Another  problem  is  configuration  changes  on  the 
local  machine,  such  as  moving  programs  and 
adjusting  window  sizes,  that  affect  the  result  of 
human  input.    Finally,  the  injected  input  should  be 
difficult for an attacker to distinguish from real input.  
One  possible  solution  is  to  manually  record  a 
sequence  of  human  input  and  the resulting network 
output on a single clean computer. Then, Siren could 
replay the input on other machines, raising an alarm 
if  the  content  or  destination  of  requests  changes 
between runs, except as expected by the protocol (If a 
message contains the time or special state such as a 
browser cookie). With this solution, one must worry 
about  differences  between  computers,  such  as 
program locations, which will affect the result of the 
input. One method of dealing with this issue is to fix 
settings across all computers on the network. Another 
is to re-record input for each configuration or when a 
user changes a critical setting on his or her computer. 
Another  problem  with  recording  and  replaying 
input  is  dynamic  web  content.  Many  web  pages 
change frequently, and this will disrupt the network 
traffic. One could get around this problem by visiting 
relatively  static  sites  and  re-recording  input  when 
they  change.  Avoiding  dynamic  sites  and  re-record 
input in response to content changes is a significant 
Proceedings of the 2006 IEEE Symposium on Security and Privacy (S&P’06) 
1081-6011/06 $20.00 © 2006 IEEE 
limitation of this approach, and could be exploited by 
an attacker to identify real user activity. 
With manually recorded input, the administrator 
can make  sure  that it  does  not  cause  any  unwanted 
state changes. However, an attacker may  be able to 
identify real activity by patiently waiting for the user 
to  perform  some  state-changing  operation.  Also,  if 
Siren repeatedly injects the same sequence of input, 
then an attacker will be able to tell that it is fake. 
Another  way  of  generating  input  is  to  use  an 
algorithm 
imitates  human  behavior.  This 
algorithm  would  have  to  know  which  raw  input 
events  will trigger  which high-level  actions  such  as 
text selection and link traversal. It can then infer the 
expected output based on the content returned by the 
server  and  on  application  behavior.  Generating 
correct 
input  would  require  either  some  video 
processing,  which  could  be  very  hard,  or  virtual 
machine introspection [11] to obtain the locations of 
objects on the screen for mouse input. 
that 
Automatic input generation may be vulnerable to 
natural  language  analysis  by  a  malware  program.  If 
malware  is  able  to  identify  input  referring  to  the 
current time or recent events in natural language, then 
it  may  be  able  to  conclude  that  the  real  user  is 
present. However, this would have to be done by the 
attacking  program  without  communicating  over  the 
network,  which  is  a  hard  problem.  If  the  malware 
program  tries  to  send  information  to  its  owner 
without  first  making  sure  that  it  is  safe,  then  it  is 
likely to be detected by Siren. 
All  of  the input  injection methods  discussed  so 
far also have issues with disturbing state on the local 
machine.  Avoiding  state  changes  altogether  in  fake 
input  would  help  a  patient  attacker  to  identify  real 
activity.  Another  solution  is  to  undo  changes  right 
before  the  user  returns  by  either  injecting  input  to 
undo  them  (such  as  closing  a  browser  window)  or 
reverting to a snapshot that was taken earlier. Recent 
work  shows  that  snapshot  restoration  can  be  done 
efficiently  [5].  Undoing  state  changes,  however,  is 
detectable  and  allows  malware  to  build  a  schedule 
from  past  usage  in  order  to  predict  future  activity. 
State  changes  on  a  remote  server  also  cannot  be 
undone, and need to be addressed separately.  
Another  way  of  avoiding  detrimental  state 
changes  is  to  create  a  clone  of  the  current machine 
and run it instead of the original. Siren could inject 