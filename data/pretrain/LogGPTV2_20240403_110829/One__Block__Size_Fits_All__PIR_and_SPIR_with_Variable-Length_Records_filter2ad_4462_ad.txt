database record (a unit of retrievable information), which
may be larger than or smaller than a PIR block (a unit of
data transfer). We use r and R to denote the number of
(ﬁxed-length) blocks and the number of (variable-length)
records that comprise the database, respectively, and S
to denote the length of the longest record (measured in
ﬁeld elements). The user is assumed to have a priori
knowledge about the layout of any relevant portions of
the database;
i.e., we assume she knows the mapping
between PIR blocks and database records, including the
offsets into a block that specify where records begin and
end (see Figure 1). How the user obtains this information
is tangential to our own work; existing approaches like
private keyword search [15], SQL queries [33], or trivial
download of the entire index (which will
typically be
much smaller than the actual database) all sufﬁce for this
purpose. We assume that the block size is ﬁxed to the
communication-optimal size, as discussed at the end of
Section III, whereas the sizes of individual records may
vary independently from the block size and are dictated
by their contents alone. In addition to the privacy and
efﬁciency goals stated below, a secondary goal of our
constructions is to enable the user to produce efﬁcient
zero-knowledge proofs about the record she is requesting
in a given query. These proofs can state theorems such
as “I have paid for this record” or “the access control
list states that I should be allowed to access this partic-
ular record”, for example. Indeed, attaching such zero-
knowledge proofs to a query is straightforward in the latter
three of our four constructions. To facilitate this, record
descriptors (optionally) contain metadata about the record,
and are signed under a cryptographic signature scheme
that admits efﬁcient zero-knowledge proofs of knowledge
of a message-signature pair under a given public key (e.g.,
BBS+ signatures [1]).
Our protocols target the standard security requirements
for SPIR:
User privacy: Queries must not
leak any information
about the particular records that a user requests, in-
cluding the sizes of (i.e., the numbers of blocks that
comprise) those records. More formally, we require
that, for any honest user U requesting a record Ai ∈
{A1, . . . ,AR}, and for any coalition C of at most t
dishonest database servers, the combined view of C
upon receiving U’s query is statistically independent
of the record index i.
Data privacy: It must be infeasible for a user to learn
nontrivial information about n + 1 or more database
records using only n SPIR queries. More formally,
k 1: Multi-block PIR + ephemeral encryption
ﬁeld operations
exponentiations
r
o
w
s
i
h
T
Protocol
Computation
Θ(N + lgR) —
Θ(N)
Θ(1)
Θ(N + R)
Θ(R)
Θ(R)
Θ(N + R)
Θ(1)
Camenisch et al.’s OT [12]
Θ(1)
√
N )
Henry et al.’s (ﬁxed-record length) SPIR [28] Θ(N)
Θ(
2: Multi-block PIR + OT
3: Multi-block PIR + SPIR
4: Multi-block SPIR
Communication Hardness assumptions
Θ(S/q + lgR)
Θ(S/q + R)
Θ(S/q + R)
Θ(S/q + R)
2N + Θ(1)
Θ(
√
N )
SC, KDF
SC, (R+2)-BDHE, (R+1)-SDH
SC, (t +q−1)-SDH
SC, KDF, (t +q−1)-SDH
(R+2)-BDHE, (R+1)-SDH
t-SDH
Table 2: The “Computation” and “Communication” columns list the asymptotic computation cost (in ﬁeld operations and exponentiations)
and communication cost (in ﬁeld elements), respectively, for each protocol considered in this paper: N is the length of the database, S is the
length of the longest database record, q is the number of blocks per query, and R is the number of records. All exponentiations have ≈ 160-bit
exponents for the user and ≈ 40-bit exponents for the database servers. With the exception of Protocol 1, each protocol uses ΘΘΘ(1) pairing
operations. For simplicity, the communication costs assume that (S− 1)/(q− 1) ≥ √
N . The “Hardness assumptions” column lists the computational
hardness assumptions that must hold for data privacy: SC assumes a secure stream cipher, KDF assumes a secure key derivation function,
BDHE is the bilinear Difﬁe-Hellman exponent assumption [7, §2.3], SDH is the strong Difﬁe-Hellman assumption [6, §2.3]. (User privacy is
unconditional in each of the protocols.) To allow comparison with existing work, the last two rows list Camenisch et al.’s OT and Henry et
al.’s SPIR.
we require that, for any (possibly dishonest) user U
holding an arbitrary, auxiliary input α and interacting
with honest database servers DB1, . . . ,DBk, for any
set of descriptors I = {A1, . . . ,AR} mapping records
onto portions of an r-by-s matrix, for any n < R, and
for any pair (D1,D2) of r-by-s matrices that agree
on a subset I (cid:48) = {Ai1, . . . ,Ain} of records described
in I , the probability that U can, by issuing arbitrary
queries to DB1, . . . ,DBk for records in I (cid:48), determine
if DB1, . . . ,DBk hold D1 or D2 is at most negligibly
greater (in some suitable security parameter) than 1/2.
In each of our protocols, the ﬁrst property (user privacy)
holds information-theoretically under the same noncol-
lusion assumption that
is required for user privacy in
Goldberg’s IT-PIR protocol, and the second property (data
privacy) holds computationally; that is, the user is re-
stricted to run polynomial time algorithms, but the database
servers can be computationally unbounded. We point out
the required computational assumptions in Table 2 and in
the security analyses following each construction.
Protocol 1: Multi-block PIR + ephemeral encryp-
tion
Our ﬁrst SPIR construction is a straightforward variant
of Goldberg’s IT-PIR in which the database servers use a
stream cipher to encrypt each record on the ﬂy with its own
ephemeral pseudorandom key stream. The user ﬁrst queries
the (plaintext) database using a multi-block IT-PIR query
to obtain a sequence of (ephemerally encrypted) blocks
that span the desired record. Next, she uses OT to retrieve
a seed that will allow her to reconstruct the key stream
for (and thereby decrypt) only those parts of the retrieved
blocks that correspond to a single record of her choosing.
Under the assumption that the chosen stream cipher is
computationally secure, the database servers do not need to
check the validity of the user’s IT-PIR query since the user
learns nothing by requesting blocks that contain encrypted
portions of other records (since she cannot reconstruct their
respective key streams). Several aspects of this high-level
protocol warrant some explanation.
Constructing the key streams. The ephemerally encrypted
SPIR construction is instantiable with an arbitrary stream
cipher, provided each database server has some way of
computing the same per-record ephemeral key streams. We
stress that it is crucial for the key streams to be truly unique
and ephemeral; any key stream reuse can violate the data
privacy requirement of the protocol. To accomplish this,
we propose that each database server uses a shared secret
key (which changes whenever the database changes) and
some common state information (which changes after each
query) to derive the ephemeral keys. Following Henry et
al. [28], we point out that a cryptographic hash of the
entire plaintext database is a suitable shared key, although
any other cryptographically strong symmetric key would
also work in practice. It is less straightforward to share
a common, ephemeral state among the database servers
because inter-server communication is undesirable. One
simple way to securely get such a common state is to have
the user designate an arbitrary database server as the key
master for her query; the key master chooses a nonce ν
and returns (ν,ς) to the user, where ς is a cryptographic
signature on ν under the key master’s long-term public key.
The user transmits (ν,ς) to each database server as part of
her query; once a server is convinced that the signature is
valid, it uses ν as the “common state” from which to derive
the ephemeral keys for the query. The database servers can
process any query that contains a valid (ν,ς) pair without
checking the freshness of ν; only the key master needs to
take care to ensure that the ν it issues do not get reused
(see below). (If desired, the database servers could use a
common private key or a group signature scheme [14] to
prevent the pair (ν,ς) from revealing the identity of the
key master.)
i=1 κibi
Deriving and obtaining the ephemeral keys. Let M = (cid:100)lgR(cid:101)
denote the number of bits in the binary representation of
each record index, and let ξ and ν denote the shared sym-
metric key and shared state that the database servers will
use to derive the set of ephemeral keys, respectively. We
adapt a technique due to Naor and Pinkas [32] to enable the
user to efﬁciently reproduce the ephemeral key stream for
the record she is requesting. The database servers use a key
derivation function (e.g., a keyed hash function) to derive
a set of 2M symmetric keys {κ10,κ11, . . . ,κM0,κM1} from
is then Kj =(cid:76)M
i=1 bi 2i−1
ξ and ν. The key for the record at index j = ∑M
; here bi denotes the ith bit in the
binary representation of j. The user retrieves Kj by issuing
a sequence of M consecutive 1
2OT queries to the key master
for the necessary κibi
, and then computes Kj from the κibi
using the above formula. The key master should respond
to at most M such OT queries for kibi
corresponding to a
given nonce ν (and every database server should refuse
to respond to any OT queries for a nonce that it did not
personally choose and sign); if so, the user can reconstruct
at most one symmetric key Kj — and hence can decrypt
at most one database record — per query.
Online database encryption. Encrypting each record by
the ephemeral key streams is simple. Conceptually, each
database server uses the output from the stream cipher to
form an r-by-s matrix K over F, which has the exact same
layout as the database D (that is, if record j in D begins
at column c j of block b j and ends at column c(cid:48)j of block
b(cid:48)j , then the key stream produced by Kj also begins at
column c j of block b j and ends at column c(cid:48)j of block
b(cid:48)j
in K). Upon receiving a query (in the form of a vector
of secret shares), the database servers each compute and
return the product of their given share vectors with D +K.
This is illustrated in Figure 2. In practice, the database
servers never need to compute K; rather, they can generate
the elements of K on the ﬂy as they compute the afore-
mentioned product, thus using signiﬁcantly less memory.
The user reconstructs the encrypted record using Lagrange
interpolation, just as in Goldberg’s original protocol, and
then uses Kj to reconstruct the key stream and decrypt the
desired record.
·
 e j...
e j+q−1
 +
D
K
Figure 2: A multi-block IT-PIR query over the ephemerally en-
crypted database D. In practice, the q-by-s matrix of standard basis
vectors on the left is shared using the ramp scheme variant of
Shamir secret sharing in Section III and the key stream matrix
K is never computed in full. The user follows up her IT-PIR query
with M = (cid:100)lg R(cid:101) OT queries to retrieve the seed for one key stream
in K.
Informal security and cost analysis. The above protocol
information-theoretically hides the contents of the user’s
query under the same noncollusion assumptions as Gold-
berg’s IT-PIR protocol, provided the chosen OT scheme
also provides information-theoretic security for the user.
(The OT scheme by Camenisch et al. [12] described in
Section II-B, for example, provides the necessary infor-
mation-theoretic protection for the user.) If the user is
permitted to request at most M of the κibi
from (only)
the key master for a given nonce ν, then the user can
reconstruct at most one key stream (assuming the stream
cipher is secure); moreover, if the key master chooses its
nonces uniformly at random from a suitable domain, then,
with overwhelming probability (in the bit-length of the size
of that domain), a secure key derivation function will never
output the same ephemeral seed for two different records
in two different queries. Similarly, since the shared secret ξ
changes each time the contents of the database change, the
user cannot replay ν to get two or more records encrypted
under the same key stream as the database evolves. Hence,
the protocol provides computational data privacy if it is
instantiated with a secure stream cipher and a secure key
derivation function, and if the database servers do not
deviate from the protocol by reusing nonces or giving out
too many κibi
. We justify this latter assumption regarding
the correct operation of the database servers by pointing
out that a database server who is willing to reuse nonces
or permit superﬂuous OT queries for the κibi
could just
as easily give the user unfettered access to the plaintext
database.
Both the communication cost and the computation cost
of the protocol are dominated by the multi-block IT-
PIR query, with some small additional overhead owing
to encryption/decryption and the OT queries to fetch the
seed for the key stream. The cost of this latter step scales
with the logarithm of the number of records; thus, the
N , S/q} + lgR) ﬁeld
total communication cost is Θ(max{√
elements and the total computation cost is Θ(N + lgR).
Unfortunately, there does not appear to be any straight-
forward way to augment this simple construction with
additional features like pricing or access control. The next
three constructions address this limitation.