405 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:02:23 UTC from IEEE Xplore.  Restrictions apply. 
for this additional time by adding functional units to the mi- 
croprocessor.  This added hardware is what we  call  spare 
capacip. We will  attempt to discover the minimum spare 
capacity needed to bring execution time back down to nor- 
mal.  We add functional units for two reasons: it is simpler 
than  adding hardware to other portions of the pipeline, and 
it is an effective method of  speeding up both P-stream  and 
R-stream instruction executions. By using both existing idle 
capacity and  added spare capacity, the resulting  micropro- 
cessor will meet both performance and reliability goals. 
5  Simulation 
5.1  The Simplescalar Simulator 
We simulated REESE using the Simplescalar Tool  Set, 
Version  2.0  [25].  We  modified  the  execution-driven sini- 
outorder simulator, which  supports out-of-order issue and 
execution.  The  simulator  uses  a  Register  Update  Unit 
(RUU) to handle register  renaming. The RUU commits in- 
structions to the register file in program order by only com- 
mitting instructions from the head of the RUU. 
Simplescalar  implements the  RUU as a circular queue 
with  pointers  to  the  current  head  and  tail  of  the  queue. 
We  simulated  the  R-stream  Queue  in  a  similar  manner. 
R-stream  instructions carry their operands and  result  with 
them  as  they  proceed  through  the  Simplescalar  pipeline. 
This allowed us to avoid adding forwarding logic to the sim- 
ulator. 
In  Simplescalar, a  loadlstore queue  (LSQ) handles  all 
the  memory  instructions that  flow  through  the  processor. 
The  RUU  calculates  the  effective  address,  and  the  LSQ 
handles the cache and translation  lookaside buffer (tlb) ac- 
cesses.  A  load  instruction  may also receive  its value  from 
loads or stores that are ahead of it in the LSQ. 
The Simplescalar Tool Set allows us to easily change the 
number of  functional units that are available  for computa- 
tion. We can also change the configuration of other proces- 
sor hardware:  caches, maximum IPC, branch predictors, et 
cetera. Table  1 shows the general simulator options that we 
set for REESE. From this point forward, this set of options 
is called the starting configuration. 
5.2  Benchmark Programs 
We  tested  six  benchmark  programs from  the  SPEC95 
benchmark suite [27].  The programs we used  were all  in- 
teger  benchmarks.  This  helps  us  to  focus on  how  many 
integer units of spare capacity are necessary  to bring per- 
formance back to baseline levels.  We did  not  study float- 
ing point (Fp) programs.  We chose to execute 100 million 
instructions in  each benchmark program.  This allows the 
i 
I,1  Inst. cache 
I,2 Data Cache 
Fetch Queue Size 
R4ax IPC for Other 
F’ipeline Stages 
I, 1  Data Cache 
I,2  Inst. cache 
Branch Predictor 
b:unctionai  Units 
16 
8 
32 KB, 2-way, 
2-cycle hit time 
5 12 KB, 4-way, 
12-cycle hit time 
32 KB, 2 - ~ a y ,  
2-cycle hit time 
Shared wl D-cache 
gshare. from 1261 
I 32 GP, 32 FP 
1618 
4 IntAdd, lIntM/D, Same for FP 
simulations to finish  in  a reasonable amount of  time.  Ta- 
ble 2 gives a list of the benchmarks we used and the inputs 
to leach benchmark. 
Table 2. Benchmark Programs and Inputs 
[ Benchmark I 
gcc 
eo 
I 
Input 
1  stmt-urot0ize.i  I 
I 
I 
train 
li 
per1 
vortex 
I 
I 
ctak.lsD 
scrabbl.pl 
train 
6  Results and Analysis 
First, we compare a simulated processor that implements 
RBESE to a simulated processor that does not.  We always 
test both models using the same hardware configuration be- 
fore we add spare elements to the REESE model. From this 
paint forward, the processor model that does not implement 
RBESE will be called the baseline model. 
We  focus on the committed instructions per cycle (IPC) 
for the benchmark programs that were used. Every program 
was tested using five different hardware variations. The pur- 
pose of the following figures is to answer two distinct ques- 
tions.  First,  how  does  a  microprocessor  that  implements 
REESE compare to one that  does not?  Second, how does 
adding spare elements affect the comparison? Both of these 
questions are tested for a variety of processor configurations 
in  order to quantify the influence of  other hardware struc- 
tures on IPC. 
406 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:02:23 UTC from IEEE Xplore.  Restrictions apply. 
The results  shown  in  Figure  2 correspond  to the  start- 
ing  configuration  detailed  in  Table  1.  Each  of  the  next 
four  figures  also  display  what  happens  when  spare  ele- 
ments are  added to the  REESE simulated  processor.  The 
spare  elements used  are  integer  ALUs  and  integer  multi- 
plieddividers. 
2.5 
2
$
0” 
L a, a 2  1.5 
.- 
0 
c 
0 
2 
c 
v) 
5
1
I 
0.5 
go 
ijpeg 
li 
per1  vortex  AV. 
Figure 2. Initial Comparison Between REESE 
and Baseline 
3 
R+2+1  Mult 
2
2.5 
a, 
0 
- 
0” 
z
a 
- 
v) 
C 0 
.- 
5  1.5 
3 
L 
- 
v) C 
1 
0.5 
ijpeg 
li 
per1  vortex  AV. 
Figure  3.  Comparing  REESE  and  baseline: 
RUU size = 32 and LSQ size = 16 
Figure 3 shows the results of doubling the size of both the 
RUU and LSQ in both REESE and the baseline models. The 
sizes of the RUU and LSQ are a couple of the factors that 
can limit IPC results for both models. This could cause the 
models to appear to perform equally  well.  By  increasing 
the RUU and LSQ sizes, we can measure the influence of 
these elements on IPC values.  This influence can  then  be 
distinguished from the influence of REESE on IPC. 
In Figure 4, the size of the models’ datapaths are doubled 
from  8 to  16.  The  larger RUU  and LSQ  are  maintained 
from Figure  3.  In  this  figure, we  want to make  sure that 
the pipeline bandwidth is not artificially limiting the IPC of 
either model. 3r------ 
n 
2.5. 
. 
- 
a, 
0” 
0 
z  2 -  
a 
2 - 
v) t 
0 .- 5 1.5 
S - 
v) 
1 
0 5  . -   gee 
go 
ijpeg 
li 
per1  vortex  AV. 
Figure 4. IPC for 16-wide datapath 
We  added more memory ports  to the  simulated  proces- 
sors in  figure 5.  Of  course,  adding  memory  ports  would 
be much more expensive then adding ALUs.  However, we 
wanted to measure the influence of memory bandwidth on 
IPC results.  We did  not include the case of 2 spare ALUs 
and I  spare multiplier/divider. This is because the data was 
the same as if only 2 spare ALUs are present.  Examination 
of  the previous figures shows that a spare multiplier/divider 
has little effect on average IPC values. 
6.1  Analysis 
Several general conclusions can be drawn from these fig- 
ures. The first is that an RUU-based microprocessor cannot 
attain  2  IPC on  a  regular  basis.  This is  probably  due to 
high-latency  instructions causing pipeline  stalls.  When  an 
RUU is used, a high-latency  instruction  (like division) can 
reach the head of the RUU and cause other instructions to 
back up behind it.  These stalls are reflected in the low IPC 
values. An alternative to the RUU-based  scheme is to have 
reservation stations associated with each type of functional 
unit.  This would be like a distributed  RUU that would not 
fill up as easily as the RUU in SimpleScalar. A separate Re- 
order Buffer would be needed to insure in-order instruction 
commit. 
407 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 04:02:23 UTC from IEEE Xplore.  Restrictions apply. 
zl a 
2  1.5 
.- 
0 
c 
0 
2 
c 
m 
= 1
0.5 
gcc 
go 
ijpeg 
li 
ped  vortex  AV. 
I 
RUU,LSQ  2X Ex. Q 2X MemPorts 
None 
Figure 5. IPC for additional memory ports 
Figure 6. Summary of results 
1.7 
0) 