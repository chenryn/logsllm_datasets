电电
图6-9-41
rsp.
oc_1403E2c0e:
ec,
图6-9-42
MeeuLeckPtz - (PSYST(F_RO0ULE_INFORWT20N)
HEAP_ZERo_KDRoRY, ReturnLength);
Status s NtquerySystenLnfernat1on(SysteafeduteInforsat ian,
Medulelecketr,
ReturnLength,
SReturnLength);
1F (INT_SuCCESS(Status)) (
fadled tx'\n",Status)
fer (1 = 0; 1 = e)
typedef struet SYSTEx_RoULE (
ULONG Reserved1;
#1fdef _KIN64
ULONG Reserved2;
lendif
ULONG Reserved3;
PVOEo
InagelaseAddress
ULONG FLags:
ULONG
InageSize;
HORO
HORO
Id;
Rank:
MORO
w018;
CHAR
VORO
Nane[25];
Naneoffset;
1 SYSTEM_HOOULE, PSYSTER_RODULE;
typedef struct SYSTER_NOOULE_INFORRATION{
ULONG HodutesCount;
在声明NtQuerySystemlnformation函数原型时需要增加externC"的辅助声明，这是因为Visual
默认为驱动项目生成的代码文件是*cPP，在编译时也会按照C++代码来进行编译，但是按照C+
Studio
+编译的函数符号是带有类信息的，在进行键接时会找不到对应的ib文件中的函数。当然，将*cpp改
为*c后缀也是可以的，这样就不需要extern'C'了。
打开项目属性页，选择“链接器一输入”，在“附加依赖项”中添加“ntdllib”，因为
函数是由ntdl.dll导出的，见图6-9-43。当然，使用VisualStudio的译器宏增加
NtQuerySystemlnformation
也可以。
lib
https:/weread.qq.com/web/reader77d32500721a485577d8eeek283328802332838023a7529
21/27
---
## Page 360
2021/1/16
从0到1：CTFer成长之路-Nu1L战队-微信读书
图6-9-43
我们成功获得了NT模块的基地址（见图6-9-44）。其他利用函数泄露内核模块地址或其他对象地址
的方法与之类似，不再整述。如果想要进一步了解其他泄露方法，这里推荐在Github上搜索一个名为
windows_kernel_address_leaks的开源项目，其中做了很好的总结。
T3 = igx C10.M
itlse = 1el_nt_mods+01
图6-9-44
综上所述，我们编写的利用代码如下：
OPELEXISTING
ULARO(
File x wh*, trr
c30 + 08
1F (10
evic, WM,CTL,
slze
CestesL + Ms*, ErrerCade)
sswes.0
我们通过逆向得出HalDispacthTable在NT模块中的偏移为0x1e9c30，且xHalQuerySystem-
为HalDispacthTable中的第二个函数。因为NtQuerylntervalProfile函数中存在图6-9-45中
Information
的逻辑，所以需要在用户态内存空间进行一些设置。
mov
eax,
[rdx]
mov
[rdx],
eax
图6-9-45
总之，利用代码与栈溢出利用相似，比较简单，思路在于通过任意地址写寻找可以控制程序执行流程
https:/weread.qq.com/web/reader/77d32500721a485577d8eeek283328802332838023a7529
---
## Page 361
2021/1/16
从0到1：CTFer成长之路-Nu1L战队-微信读书
的数据结构。
利用的这种数据结构也不止HalDispacthTable，如在win32k.sys模块中也存在大量的函数使用类似
的全局指针表进行调用（见图6-9-46）。
这里挑选一个流程比较简单的函数作为示例，如NtGdiDdDDIAcquireKeyedMutex就通过win32k中
的全局函数表进行调用（见图6-9-47）。
利用代码如下：
图6-9-46
rap,
eyedletex proc
rhoet 1o
FFFFF97FFF18C388
eax,OCN
图6-9-47
PSYSTER_MODULE_INFORSATION Modu/LeELacPtr = NULL;
NTSTATUS Status = 8;
DNORO
0:
PV0TO
RodulLelase = MLL;
PCKAR
RoduLefiase = MULL;
KEAP_ZER0_MEMoRY, RetumLength);
RetuznLength, SRetunLength);
1f (:NT_SUCCEsS(Status)) 
printf(*stquerylystenLeformat.ion failed x\s*, Status);
retarn NULL;
for (1 = 8; 1 ModulesCount; I++) (
POHR ModuLefiane = ModsLelockPt,rModuLes[1 Ma;
f[strcep[“Systeaet\1Systes2\in2h.sys*,Meoulefae
osegeu unaa
https:/weread.q.com/web/reader/77d32500721a485577d8eeek283328802332838023a7529
---
## Page 362
2021/1/16
从0到1：CTFer成长之路-Nu1L战队-微信读书
这次利用中通过NtQuerySystemlnformation泄露出win32k.sys模块的基地址，再计算函数表的地址
并通过任意地址写进行劫持，整个过程比较简单，不再整述。
6.9.2.6内核缓解措施与读写原语
自Windows7以来，每一代新发布的Windows操作系统相比前作多多少少在内核漏洞防御方面增加
了缓解措施, 如NULL Dereference Protection、 NonPagedPoolNX, Intel SMEP、Intel Secure
、int 0x29、Win32k Filter等。 SMEP (Supervisor Mode Execution Protection) 是Intel在
Key
中引I入的一种漏洞缓解措施，其作用是阻止RingO特权模式下执行Ring3地址空间的代码。实际上
CPL
在2011年，Intel已经在Ivy Bridge引I入了SMEP特性，但是Windows操作系统直到Windows 8才予
以支持。
下面来看SMEP的细节。首先，Intel把SMEP的开关设置在CR4寄存器的第20位，见图6-9-48。如果
处于启用状态，当以Ring0权限试图执行用户模式地址空间的代码时会被拒绝，见图6-9-49.
SMEP
GMIEXCPT
图6-9-48
图6-9-49
同时，从Windows8.1起针对内核地址泄露函数做了限制，实现的方法是通过进程完整性级别（
level）进行控制。在Windows操作系统中，进程或者其他内核对象的安全性均由自主访问控制
aba
符（DACL）来管理。进程完整性级别其实也可以视为DACL中特殊的一项，它同样位于进程的令牌
(Token)中。
进程完整性级别分为System、High、Medium、Low、untrusted，对于内核利用来说，其主要是限
制了在较低完整性级别时通过这些函数来获取内核的信息
由于前文这些缓解措施的出现，一方面使得泄露内核地址信息变得困难，另一方面使得攻击者难以分
配合适的内存存放shellcode，虽然此时仍然可以通过内核地址泄露漏洞与内存破坏漏洞结合的方式
进行利用，但是相对而言成本过高。因此攻击者在进行内核利用时考虑不使用shellcode，而是通过
寻求获取读写原语的方式来进行利用，即：把漏洞转化为不受限制的任意地址（绝对地址或相对地
址）读和任意地址写操作，再通过任意地址读和任意地址写来实现最终的利用。
这里简单介绍两个内核漏洞利用历史上出现过的比较经典的内核读写原语：Bitmap原语、tagWND
原语
通过之前的分析不难想到，想达到内核内存任意读写的效果，无非是在内核空间中寻找一些内核对
象。这些内核对象需要具有一些指针域或者长度域，如在浏览器利用技术中经常以Array作为获取内
存读写原语的途径，因为Array对象通常具有一个长度域和一个指针表示数据存储的缓冲区。当控制
了这些对象的指针域或长度域时，任意内存读、写的目的就达到了。当然，与用户态的利用不同，目
标内核对象不仅需要满足以上条件，还需要直接在用户空间能被访问到，并且必须能够在用户态获知
它的地址信息，否则目的无法达到。Bitmap正是这样一种GD对象，其结构如下，其中存在一个指针
https:/weread.qq.com/web/reader/77d32500721a485577d8eeek283328802332838023a7529
24/2
---
## Page 363
2021/1/16
从0到1：CTFer成长之路-Nu1L战队-微信读书
域名为pvScano.
SetBitmapBits是由gdi32.dll模块导出的一个Win32APl函数，可以在用户态直接调用。它会针对
进行操作，其内核实现函数为NtGdiSetBitmapBits。其中存在以下代码：
Bitmap
rfarit) nlust;
t  , ]
et t
可见，SURFOBJ对象中的pvScan0参数是作为缓冲区指针来直接使用的。同样，在Win32API函数
对应的内核函数NtGdiGetBitmapBits中存在类似的代码如下，直接以pvScan0域作为
GetBitmapBits
缓冲区指针读取数据并返回用户态。
jln, 1lias)
tagWND的情况与Bitmap类似，是在内核中表示密体的一个GUI对象，其结构如下：
在Windows的各类数据结构的设计中，通常以一个单位长度的数组表示可变长缓冲区并辅以数据长度
域。在tagWND中，wExtra域表示其尾部是不定长的缓冲区，cbWndExtra表示其长度域。通过修改
这两个域，即可达到任意地址读、写的目的。
下面来看如何在用户态获取Bitmap和tagWND对象的内核地址信息。PEB（ProcessEnvironment
Block，进程环境块）位于进程的用户空间中，其中保存许多进程的相关信息。用户态下，段寄存器
GS始终指向TEB，从而轻易地得到PEB的位置。在PEB中存在一个名为GdiSharedHandleTable的
域，它是一个结构数组，见图6-9-50.
Raximusl
+ex120 0SBui1dNumber
Jint4
图6-9-50
GdiSharedHandleTable数组中的结构是GDICELL64,
https:/weread.q.com/web/reader77d32500721a485577d8eeek283328802332838023a7529
2572/
---
## Page 364
2021/1/16
从0到1：CTFer成长之路-Nu1L战队-微信读书
其中，pkernelAddress域指向的就是Bitmap对象的地址。泄露示例代码如下：
TEB结构中，ProcessEnvironmentBlock域的候移0x60字节指向关联的PEB，见图6-9-51。
kd> dt nt1_TEB
+0x000
NtTib
entPointer
：_NT_TIB
：CLIENT_ID