在对代码进行一些扫描之后，我找到了将BBCode标签与其相应的React组件匹配的表，并将我看到的每个BBCode标签与混合的结果一起发送。大多数标签被服务器剥离，许多标签显然需要属性参数[imgur
alt=]等，但我不知道如何使用。
我转而尝试记录所有富文本命令的BBCode表示形式，比如滚动随机数或显示图像，但收效甚微。我发现了一些我可以发送的标签，它们可能会被删除，包括[url=xxx]、[code]和[image]。图像被严重锁定，我发现它几乎不可能以一种恶意的方式使用它。[code]只是安全生成[code]标记，但[url=xxx]是合法地链接到任何地方，包括javascript:
URI链接。
我立即打开这份报告，说我已经实现了XSS，这通常会导致这类客户端出现RCE。结果比这复杂多了。
当然，我已经实现了XSS，我可以真正地扰乱web浏览器用户，但是javascript:
URI实际上被被巧妙地剥离了，或者没有被Steam客户端浏览器使用。我开始尝试其他方法，因为我知道我可以创建任何URL。
## \- 3C.Steam URI
基于现有技术，我从使用steam:// uri开始，这是steam客户端独有的，可以做很多不好的事情。许多年前，浏览器内的steam://
uri通过安装、运行游戏并将精心制作的日志导入startup文件夹来实现远程代码执行。
我取得了一点小小的成功。在聊天客户机中，steam:// uri 是在有特权的浏览器中执行的，而它们通常无法访问。在出现 steam://
安全问题之后，如果我 steam://open/440 通过网络浏览器打开了你的网页，那么阀门会增加一个提示 -如果我在网络浏览器中发送你，它会让steam确认你真的想打开那个游戏，但这些链接在Steam聊天客户端不会导致此类确认。
我尝试着制作了各种各样在人们的计算机上打开游戏的链接，重置他们的配置，关闭steam或打开steam系统，就像steam控制台一样，通过运行
steam://-console 或其他东西。我不记得实际的URL是什么了。
## \- 3D.滥用OEMBED
经过多次尝试和头脑风暴后，我再次改变了方向，并试图专门针对OEMBED。安全的OEMBED系统很难实现，因此人们通常只使用像Embedly这样的服务。Embedly的安全性来自于对iframe
sandboxing和白名单的很好的使用。然而，由于我们不是在一个普通的浏览器中，嵌入会给您带来不同的特权。如果你嵌入一个电子桌面应用程序浏览器，而iframe不在一个特殊的``中，你仍然可以通过iframe的窗口对象访问所有危险的电子api，即使iframe在浏览器中是安全的。
为了滥用这一点，我需要(1)通过嵌入得到白名单(不可能)，(2)在白名单的嵌入中找到javascript注入。幸运的是，我想到了，codepen.io是被嵌入的白名单，而代码页，也就是Javascript注入服务。
在过去，这样的环境中的工作往往是我为FireBug注入脚本，但是这通常是一件痛苦的事，因为有些东西不能很好地工作。@mandatory建议我使用远程chrome控制台。他向我推荐了一些我完全忘记名字的软件，它可以让你通过注入一些脚本来使用chrome开发工具远程控制台。
## \- 3E.远程控制台
一旦我用我的远程控制台加载Steam我的codepen.io应用程序，我开始寻找Steam Web
Helper环境的特性。我从转储Object.keys(window)开始，并在一个普通的Chrome浏览器上运行差异。这就产生了一些东西，其中大部分是无用的。我可以在页面上加载一些样式以及浏览器中通常不可能加载的其他样式时挂起事件，但这并不是真正的安全问题。
由于聊天客户端与父窗口通信以执行特权操作，比如提取好友列表，所以我尝试使用postMessage命令来执行window.top.postMessage()，该命令用于诱使客户端做一些坏事。OEMBED系统生成的沙盒环境似乎阻止了对window.top的访问。
此时，我已经开始使用远程控制台，通过发出`open(“steam://xxx”)`来快速测试steam://
uri的效果。我没有发现更多，但是它促使我开始对Steam Web
Helper二进制文件进行更多的剖析。我首先在Steam文件夹中为我知道存在的Steam协议uri运行一个二进制grep，然后使用vim搜索包含这些内容的字符串表。这让我想到了一些有趣的、没有文档的uri，它们是Steam
Web Helper特有的。
## \- 3F.通过一个开放的窗口
两个特别有趣的URI包括我希望或许具有一定级别权限的Chrome Dev Tools
URI以及在应用程序二进制文件中`steam://openexternalforpid`出现的URI
`steam://openexternalforpid/%s/%s`。
当我打开它时，它会打开一个像素宽的黑色窗口，想打开多少次就打开多少次。从openexternalforpid字符串可以明显看出，它需要两个参数，但是我完全不知道如何计算它们。
经过多次猜测，我将这些openexternalforpid东西传递给了我的朋友@XMPPWocky，一个非常棒的二进制逆向工程师，我曾和他一起找到过非常严重的steam
bug。但是他从在Symantec里拯救世界所挤出的一小点时间根本不够用来搞这个。
我想到了执行这个Javascript的环境。打开窗口通常是专门为嵌入式浏览器实现的，并且打开的窗口对开启窗口具有不同的权限是很常见的。我试着抓取
open('steam-chrome-dev-tools://something').contentWindow或URL，看看能不能抓取一个privilaged devtools窗口，得到有趣的结果。
新窗口确实有一些通常无法访问的特殊功能。我可以读取用户光标所在的位置，最大化窗口，最小化它和一堆其他垃圾，这些都没有让我在经过数小时测试后更接近远程代码执行。
## \- 3G.协议之外
在我对Steam://
协议的测试中，我注意到一些有趣的事情:每当我输入错误时，Windows就会打开一个对话框，说它不知道如何打开文件类型sream:之类的。这对我来说很有趣。
像Steam这样的自定义协议是由大量不同的软件实现的。它们通常非常糟糕，其安全性依赖于浏览器提示打开此应用程序。当每个人都使用Skype的时候，我在给人们发送skype://call
的url中发现了一些乐趣，它打开了对回调Skype号码的呼叫，这个号码正好与你所说的相呼应。
但就像，现在人们实际上没有Skype，所以我想知道在我的系统上可能实现的其他定制协议。这对于windows内部来说是一个绝对迷人的兔子洞。我花了几个小时浏览论坛和参考文档，描述如何添加协议以及哪些协议是由windows注册的。事实证明，有很多。Windows甚至有自定义协议，用于打开地图定位用户要查看的位置。
然后我更加深入了。自定义协议实际上是在HKEY_CURRENT_CLASSES之类的Windows注册表中实现的。如何讲述这个系统的结构真是令人着迷。不仅在这个目录中有每个协议(例如，在Windows上打开http://
链接时会打开什么)，而且这个文件夹实际上包含Windows中每个文件类型的文件类型关联，就像打开.txt文件时记事本是如何打开的一样。
http:协议的文件夹和其他文件夹就在.png的文件夹旁边，它们遵循相同的语法，描述如何将参数转换为程序调用。完全不敢相信，我按下win+R，输入.txt:你好……它打开了记事本。自定义协议和文件类型关联是一回事。
在那之后，我搜索了整个类，每次都在寻找一些我可能会发现更聪明的方法有用的东西。我直奔.bat文件类型，该文件可以运行任意Windows命令，然后我在Run中试用了它。结果它使得Windows资源管理器崩溃了。
我仿佛更机智了，开始搜索使用第0个参数并通过程序打开它的文件类型，因为通过阅读协议是如何打开的，很明显，如果第0个参数被称为$0，那么http://
这样的协议本质上就是open_webbrowser.exe $0，其中$0是URL。
我遇到了一些非常奇怪的景象，我想和大家一起分享。有一个计算器协议。我不知道为什么，但确实有。如果你想要显示并弹出一个计算器，你可以建立一个calculator:类似的链接，就像click
me!，当点击它将打开受害者计算机上的计算器。
我花了好几个小时搜罗这个该死的数据库，发现了一些潜在的可利用协议。一个是jarfile:，它执行你给它的jarfile。它实际上是.jar文件类型的绑定。另一个是JSEFile:它是一个windows
xp时代的系统，可以像程序一样用VB脚本运行HTML页面。比如史前的电子什么的。
它......没有用。问题是$0包含完整的URI。如果我链接到jarfile:c:/windows/whatever.exe，
实际调用就好了c:/Program Files/Java/Java.exe jarfile:c:/windows/whatever.exe，
好吧......它试图找到一个名为'jarfile：c：'的目录，这显然不存在。
我休息了一下并提交了另一个标签，说明我通过这种方式找到了另一个有趣的方法，我可以在他们的计算机上打开任何程序，但或许不是我想要的参数。我很确定这是RCE的一种方式。至少我可以提交一个推出的例子calculator.exe，这是所有酷孩子都做的，对吧？
我几乎立刻恍然大悟。目录遍历。如果它正在寻找一个不存在的名为'jarfile:c:' 的目录，我们可以注入一个 ../ 说“go one directory
back”并否定不存在的目录。这实际上是一个相当大的成功。我可以发送就像
jarfile:................\Users\Username\Downloads\drive-by-download.jar
然后合法运行受害者的计算机上的一个jar文件。这既令人兴奋又令人失望，因为这意味着我无法远程加载jar文件。我需要让用户不加载它。
## \- 3H. openexternalforpid
这一次，我打开了Steam控制台（打开steam://console）。 我没有读它，但它打印了很多有用的信息，比如，特别是steam:/
/它正在运行的调用。我不小心碰到了控制台，凭借绝对的运气，我看到了一些东西。当我发送时jarfile: xxx，Steam Web
Helper在内部发送steam://openexternalforpid/10400/jarfile:xxx。 这太大了。
我立即从所有这些毫无意义的自定义协议切换到使用幻数10400和cmd调用openexternalforpid。你猜怎么着?远程，编码，执行，任务完成。
由于此链接表单不是javascript:// 链接，因此它仍然受到Steam
Chat的青睐。要么我可以发送我的codepen.io嵌入或我可以发送我的[link]标签来获取远程代码:)
# **4.结论**
这真是太有趣了，我学到了很多。我总是在寻找bug，在这些bug中，一组低严重程度的简单错误会级联成一个严重程度很高的大bug，这就是一个完美的例子。