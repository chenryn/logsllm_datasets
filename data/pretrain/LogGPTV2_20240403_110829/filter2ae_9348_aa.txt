**Author: Hcamael@Knownsec 404 Team**  
**Chinese Version:**
On Thanksgiving Day, meh submitted an Exim UAF Vulnerability on Bugzilla:
. But I could not use his PoC to
make a crash.
#### Vulnerability Recurrence
First is the recurrence.
##### Environment Construction
Recurrence environment: ubuntu 16.04 server
    # Get source code from github
    $ git clone https://github.com/Exim/exim.git# The UAF vulnerability was patched in the 4e6ae62 branch, so switch the branch to the previous 178ecb:
    $ git checkout ef9da2ee969c27824fcd5aed6a59ac4cd217587b
    # Install related dependencies
    $ apt install libdb-dev libpcre3-dev
    # Get the Makefile provided by meh, put it in the Local directory. 
    $ cd src
    $ mkdir Local
    $ cd Local
    $ wget "https://bugs.exim.org/attachment.cgi?id=1051" -O Makefile
    $ cd ..
    # In line 134, modify the user to the present user on the server, then compile and install
    $ make && make install
Then modify the 364th line of the configuration file `/etc/exim/configure` .
Modify `accept hosts = :` to `accept hosts = *`.
##### PoC Test
Get the debug information of meh from
 :
    $ /usr/exim/bin/exim -bdf -d+all
There are two PoCs:
  1. 
  2. 
First is to install pwntools with pip. The difference between the two PoC is
that they have different length of padding.
Then I used PoC to test and found several problems:
  1. My debug information is different from the one provided by meh in the last part.
  2. Although crash is triggered, it is not caused by UAF
Here are the differences:
    # My debug information
    12:15:09  8215 SMTP>> 500 unrecognized command
    12:15:09  8215 SMTP> 250 1 byte chunk received
    12:15:09  8215 chunking state 0
    12:15:09  8215 SMTP> 501 missing size for BDAT command
    12:15:09  8215 host in ignore_fromline_hosts? no (option unset)
    12:15:09  8215 >>Headers received:
    12:15:09  8215 :
    ...Undisplayable characters
    **** debug string too long - truncated ****
    12:15:09  8215
    12:15:09  8215 search_tidyup called
    12:15:09  8215 >>Headers after rewriting and local additions:
    12:15:09  8215 :
    ......Undisplayable characters
    **** debug string too long - truncated ****
    12:15:09  8215
    12:15:09  8215 Data file name: /var/spool/exim//input//1eKcjF-00028V-5Y-D
    12:15:29  8215 LOG: MAIN
    12:15:29  8215   SMTP connection from (test) [10.0.6.18] lost while reading message data
    12:15:29  8215 SMTP>> 421 Lost incoming connection
    12:15:29  8215 LOG: MAIN PANIC DIE
    12:15:29  8215   internal error: store_reset(0x2443048) failed: pool=0      smtp_in.c  841
    12:15:29  8215 SMTP>> 421 Unexpected failure, please try later
    12:15:29  8215 LOG: MAIN PANIC DIE
    12:15:29  8215   internal error: store_reset(0x2443068) failed: pool=0      smtp_in.c  841
    12:15:29  8215 SMTP>> 421 Unexpected failure, please try later
    12:15:29  8215 LOG: MAIN PANIC DIE
    12:15:29  8215   internal error: store_reset(0x2443098) failed: pool=0      smtp_in.c  841
    12:15:29  8215 SMTP>> 421 Unexpected failure, please try later
    12:15:29  8215 LOG: MAIN PANIC DIE
    12:15:29  8215   internal error: store_reset(0x24430c8) failed: pool=0      smtp_in.c  841
    12:15:29  8215 SMTP>> 421 Unexpected failure, please try later
    12:15:29  8215 LOG: MAIN PANIC DIE
    12:15:29  8215   internal error: store_reset(0x24430f8) failed: pool=0      smtp_in.c  841
    12:15:29  8215 SMTP>> 421 Unexpected failure, please try later
    12:15:29  8215 LOG: MAIN PANIC DIE
    12:15:29  8215   internal error: store_reset(0x2443128) failed: pool=0      smtp_in.c  841
    12:15:29  8215 SMTP>> 421 Unexpected failure, please try later
    12:15:29  8215 LOG: MAIN PANIC DIE
    12:15:29  8215   internal error: store_reset(0x2443158) failed: pool=0      smtp_in.c  841
    12:15:29  8215 SMTP>> 421 Unexpected failure, please try later
    12:15:29  8215 LOG: MAIN PANIC DIE
    12:15:29  8215   internal error: store_reset(0x2443188) failed: pool=0      smtp_in.c  841
    12:16:20  8213 child 8215 ended: status=0x8b
    12:16:20  8213   signal exit, signal 11 (core dumped)
    12:16:20  8213 0 SMTP accept processes now running
    12:16:20  8213 Listening...
                 --------------------------------------------    # meh's debug information
    10:31:59 21724 SMTP>> 500 unrecognized command
    10:31:59 21724 SMTP> 250 1 byte chunk received
    10:31:59 21724 chunking state 0
    10:31:59 21724 SMTP> 501 missing size for BDAT command
    10:31:59 21719 child 21724 ended: status=0x8b
    10:31:59 21719   signal exit, signal 11 (core dumped)
    10:31:59 21719 0 SMTP accept processes now running
    10:31:59 21719 Listening...
It indeed threw an exception, but my debug information is different from
meh's. I used gdb to debug and found:
    RAX  0xfbad240c
    *RBX  0x30
    *RCX  0xffffffffffffffd4
     RDX  0x2000
    *RDI  0x2b
    *RSI  0x4b7e8e ?— jae    0x4b7f04 /* 'string.c' */
    *R8   0x0
    *R9   0x24
    *R10  0x24
    *R11  0x4a69e8 ?— push   rbp
    *R12  0x4b7e8e ?— jae    0x4b7f04 /* 'string.c' */
    *R13  0x1a9
    *R14  0x24431b8 ?— 0x0
    *R15  0x5e
    *RBP  0x2000
    *RSP  0x7ffd75b862c0 —? 0x7ffd75b862d0 ?— 0xffffffffffffffff
    *RIP  0x46cf1b (store_get_3+117) ?— cmp    qword ptr [rax + 8], rdx
    --------------     > 0x46cf1b     cmp    qword ptr [rax + 8], rdx
    ------------     Program received signal SIGSEGV (fault address 0xfbad2414)
The crash was not caused by UAF. If the option `-d+all` of debug all is
replaced with the option `-dd` which only displays simple debug information,
then no exception will be thrown.
    $ sudo ./build-Linux-x86_64/exim -bdf -dd
    ......
     8266 Listening...
     8268 Process 8268 is handling incoming connection from [10.0.6.18]
     8266 child 8268 ended: status=0x0
     8266   normal exit, 0
     8266 0 SMTP accept processes now running
     8266 Listening...
I again read meh's description on Bugzilla carefully. Maybe it was because of
the size of the padding? So I wrote the code to blast the padding at the
length from 0-0x4000 but did not find the lenth to cause a crash.
> This PoC is affected by the block layout(yield_length), so this line:
> `r.sendline('a'*0x1250+'\x7f')` should be adjusted according to the program
> state.
Therefore, it can be ruled out that the PoC test fails because of the padding
length.
And I have also found that the author of Exim also tried to test the
vulnerability, but he failed ,too. He posted his debug information which is
almost the same as mine. (I don't know if he made it after getting meh's
Makefile and log).
#### Study
The full name of UAF is use after free, so I patched a printf before it is
freed:
    # src/store.c
    ......
    448 void
    449 store_release_3(void *block, const char *filename, int linenumber)
    450 {
    ......
    481    printf("--------free: %8p-------\n", (void *)bb);
    482    free(bb);
    483    return;
    484    }
Recompile and run again, and it was triggered:
And the gdb debugging information also proves that uaf vulnerability can cause
a crash:
    *RAX  0xdeadbeef
    *RBX  0x1e2e5d0 ?— 0x0
    *RCX  0x1e29341 ?— 0xadbeef000000000a /* '\n' */
    *RDX  0x7df
    *RDI  0x1e2e5d0 ?— 0x0
    *RSI  0x46cedd (store_free_3+70) ?— pop    rbx
    *R8   0x0
     R9   0x7f054f32b700 ?— 0x7f054f32b700
    *R10  0xffff80fab41c4748
    *R11  0x203
    *R12  0x7f054dc69993 (state+3) ?— 0x0
    *R13  0x4ad5b6 ?— jb     0x4ad61d /* 'receive.c' */
    *R14  0x7df
    *R15  0x1e1d8f0 ?— 0x0
    *RBP  0x0
    *RSP  0x7ffe169262b8 —? 0x7f054d9275e7 (free+247) ?— add    rsp, 0x28
    *RIP  0xdeadbeef
    ------------------------------------------    Invalid address 0xdeadbeef
PS: Here is the `./build-Linux-x86_64/exim` binary does not patch printf,
`/usr/exim/bin/exim` patches printf.
It is very strange that adding a printf can trigger the vulnerability, and
delete it can not. And i also used `puts` and `write` instead of `printf` to
test, and I found that `puts` can also trigger the vulnerability, but `write`
can't. Probably it is because of stdio's buffer mechanism.
#### In-depth study
Take a look at meh's description of the vulnerability on Bugzilla:
        Hi, we found a use-after-free vulnerability which is exploitable to RCE in the SMTP server.
        According to receive.c:1783, 
        1783     if (!store_extend(next->text, oldsize, header_size))
        1784       {
        1785       uschar *newtext = store_get(header_size);
        1786       memcpy(newtext, next->text, ptr);
        1787       store_release(next->text);
        1788       next->text = newtext;
        1789       }
        when the buffer used to parse header is not big enough, exim tries to extend the next->text with store_extend function. If there is any other allocation between the allocation and extension of this buffer, store_extend fails.
        store.c
        276 if ((char *)ptr + rounded_oldsize != (char *)(next_yield[store_pool]) ||
        277     inc yield_length[store_pool] + rounded_oldsize - oldsize)
        278   return FALSE;
        Then exim calls store_get, and store_get cut the current_block directly.
        store.c
        208 next_yield[store_pool] = (void *)((char *)next_yield[store_pool] + size);
        209 yield_length[store_pool] -= size;
        210
        211 return store_last_get[store_pool];
        However, in receive.c:1787, store_release frees the whole block, leaving the new pointer points to a freed location. Any further usage of this buffer leads to a use-after-free vulnerability.
        To trigger this bug, BDAT command is necessary to perform an allocation by raising an error. Through our research, we confirm that this vulnerability can be exploited to remote code execution if the binary is not compiled with PIE.
        An RIP controlling PoC is in attachment poc.py. The following is the gdb result of this PoC:
        Program received signal SIGSEGV, Segmentation fault.
        0x00000000deadbeef in ?? ()
        (gdb)
         -------------------------------------------------------------        In receive.c, exim used receive_getc to get message.
        1831     ch = (receive_getc)(GETC_BUFFER_UNLIMITED);
        When exim is handling BDAT command, receive_getc is bdat_getc.
        In bdat_getc, after the length of BDAT is reached, bdat_getc tries to read the next command.
        smtp_in.c
         536 next_cmd:
         537   switch(smtp_read_command(TRUE, 1))
         538     {
         539     default:
         540       (void) synprot_error(L_smtp_protocol_error, 503, NULL,
         541     US"only BDAT permissible after non-LAST BDAT");
        synprot_error may call store_get if any non-printable character exists because synprot_error uses string_printing.
        string.c
         304 /* Get a new block of store guaranteed big enough to hold the
         305 expanded string. */
         306
         307 ss = store_get(length + nonprintcount * 3 + 1);
         ------------------------------------------------------------------        receive_getc becomes bdat_getc when handling BDAT data.
        Oh, I was talking about the source code of 4.89. In the current master, it is here:
        https://github.com/Exim/exim/blob/master/src/src/receive.c#L1790
        What this PoC does is:
        1. send unrecognized command to adjust yield_length and make it less than 0x100
        2. send BDAT 1
        3. send one character to reach the length of BDAT
        3. send an BDAT command without size and with non-printable character -trigger synprot_error and therefore call store_get
        // back to receive_msg and exim keeps trying to read header
        4. send a huge message until store_extend called
        5. uaf
        This PoC is affected by the block layout(yield_length), so this line: `r.sendline('a'*0x1250+'\x7f')` should be adjusted according to the program state. I tested on my ubuntu 16.04, compiled with the attached Local/Makefile (simply make -j8). I also attach the updated PoC for current master and the debug report.
There is a simple heap management in Exim. In src/store.c:
    void *
    store_get_3(int size, const char *filename, int linenumber)
    {
    /* Round up the size to a multiple of the alignment. Although this looks a