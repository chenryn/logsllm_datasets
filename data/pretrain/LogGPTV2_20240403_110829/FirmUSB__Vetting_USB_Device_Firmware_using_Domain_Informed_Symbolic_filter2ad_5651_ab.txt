analysis is smaller and possibly simpler. The alternative would be
to have an architecture-specific engine, but this approach would
require a rewrite of the engine and all of the analyses built upon it
when targeting a new architecture.
Two notable intermediate representations are LLVM and VEX
IR. The former is used by the LLVM compiler framework while the
USB DB101101110101011011101001100111011001000101000010100100110HID0101110110101010100011010101010101101010101Analyse ﬁrmware forUSB signaturesSave to DB101101110101011011101001100111011001010110111010012Utilize symbolic execution to discover program paths interacting with USB targetsUSB targetsHIDHID≠Expected ModelRecovered ModelProgramPath3Build expected USB model from known device types and signatures4Use program knowledge to recover a model of the USB device5Compare models and identify unexpected or unknown behaviors6Construct a report detailing the ﬁndings of FirmUSBExtractLoadLifterlatter is used by the Valgrind dynamic analysis framework. A major
difference between the IRs is that LLVM is meant for compilation
(top-down) while VEX lifts machine code (bottom-up) and then
drops back down after instrumentation. Both IRs support a variety
of architectures and are supported by symbolic execution engines
(Fie and angr respectively). However, to our knowledge, prior to
this work neither LLVM nor VEX had any support for the 8051 ISA.
Symbolic Execution. Symbolic execution [35] is a program analy-
sis technique that represents input values (e.g., registers or memory
addresses) as variables that may hold any value. As a program is
executed, symbolic values are propagated as a side effect of updates.
Symbolic constraints encountered in conditional branch instruc-
tions are accumulated in what is called a path condition. When a
conditional branch instruction is evaluated, the decision whether
to take a specific branch is determined by the satisfiability of the
path condition in conjunction with the symbolic constraints of the
branch condition. For each feasible branch, a clone of the current
execution state is created and the path condition is updated with
the symbolic branch condition.
Symbolic execution engines suffer from the path explosion prob-
lem as the number of paths to be considered is exponential in the
number of branches considered. Therefore, state-of-the art sym-
bolic execution engines come with a variety of path exploration
strategies such as random selection and coverage-based progress.
Although symbolic execution has emerged as an effective white-box
testing technique, we use it to determine reachability of states that
can help us understand various characteristics of a USB device.
3 OVERVIEW OF FIRMUSB
FirmUSB is an extensible framework for execution and semantic
analysis of firmware images. The primary purpose of FirmUSB is
to act as a semantic query engine via a combination of static and
symbolic analysis. Unlike other solutions that rely on a device’s
actions [2] or on human interaction [55] to determine its trustwor-
thiness. FirmUSB examines the device firmware to determine its
capability for generating potentially malicious behavior. In general,
determining if a device is malicious or benign via its firmware is
a difficult task because of the many different device architectures
and operating environments. As a result, we have specialized this
tool to aid in the analysis of binary USB controller firmware.
FirmUSB synthesizes multiple techniques to effectively reason
about USB firmware. Its most significant component is a symbolic
execution engine that allows binary firmware to be executed beyond
simple concrete inputs. Another involves static analysis on assem-
bly and IR instructions. The glue that binds these components is
domain knowledge. Through informing FirmUSB about specific
protocols such as USB, we are able to relate and guide the execution
of the firmware binary to what we publicly know about the proto-
col. This allows analysis to begin from commonly available generic
data – in our case, USB descriptors. From there we can begin to
unravel more about the firmware’s specifics, such as whether this
data is actually referenced during operation.
High-Level Flow. Figure 1 illustrates FirmUSB’s process of col-
lecting information, analyzing it, and characterizing the potential
malice of a device. Normally when a USB device gets plugged in, the
4
operating system will enumerate the device and, based on the class,
interface it with the appropriate subsystems. Instead of sandboxing
or requesting user input in order to determine how to classify a
device, FirmUSB directly examines the device firmware in order
to query this information directly. FirmUSB begins its analysis by
performing an initial pass for signatures relating to USB operation,
such as interfaces 1 . The type of interfaces that are expected to be
supported by devices of the claimed identity are passed to the static
analysis stage, which identifies memory addresses and instructions
that would be relevant to an attack scenario. The static analysis
component supports a variety of domain specific queries that can
be used for (1) determining whether a device is malicious and (2)
providing semantic slicing of the firmware for facilitating more
accurate analysis such as symbolic execution. Memory references
to these descriptors are discovered and any valid code location that
is found is marked as a “target” for the symbolic execution stage.
Upon finding these descriptors, the reported product, vendor IDs,
configuration, and interface information are parsed based on US-
BDB, a database of operational information that we have extracted
from the Linux kernel. Such parsing allows device firmware to be
correlated against expected USB behavior. 3
The next stage is symbolic execution, which can provide a more
precise answer on reachability of instructions of interest or the
target instructions that have been computed by the static analysis
stage based on the specific semantic query 2 . FirmUSB is able to
search for any instance of USB misbehavior or non-adherence to
the protocol, given the appropriate queries. As a demonstration,
we currently support two types of queries focusing on the BadUSB
attack. The first type of query is about potential interfaces the device
may use during its operation, e.g., “Will the device ever claim to be
an HID device?” The second type of query relates to consistency of
device behavior based on the interface it claims to have, e.g., “Will
the device send data entered by the user or will it use crafted data?”.
The first query consists of a target reachability pass that attempts to
reach the code referencing USB descriptors. When these locations
are reached, the found path conditions will demonstrate the key
memory addresses and values required to reach these locations,
implying the ability to reach this code location during runtime on
a real device. The path conditions required to reach this location in
the code further inform FirmUSB about the addresses being used
for USB specific comparisons. For example, if an HID descriptor
is reached, then we should expect to see a memory constraint of
MEM[X] == 33. Additionally, if an expected mass storage device
firmware reaches an HID descriptor, this could be an indicator of
malice or other anomalous behavior. The second query is a check for
consistency regarding USB endpoints. For example, if an endpoint
for keyboard data flow is observed to reference a concrete value,
this could indicate static keystroke injection. These gathered facts
about the binary are used to construct a model of operation 4 that
is compared against an expected model of behavior 5 . This model
is built from the known device VID, PID, and interface descriptors
that are extracted from the binary and searched in the USBDB.
Finally the results are reported for further review 6 .
Core Components. In lieu of writing a symbolic execution engine
from scratch, we used the well-established engines developed by
the Fie [28] and angr [49] projects. In order to target these engines
towards USB firmware, we first developed the underlying architec-
ture support for each engine. This consists of machine definitions
(registers, memory regions, I/O, etc.) and an 8051 machine code to
IR translator known as a lifter. We opted to use two different back-
ends to better understand the strengths of each approach. These
are detailed further in Section 4. angr utilizes VEX IR, which was
originally created for Valgrind [40] – a dynamic program instrumen-
tation tool. Fie embeds the KLEE symbolic execution engine [16],
which uses LLVM IR, originally developed by the LLVM project as
a compilation target. The IR syntax of VEX and LLVM differ greatly,
but the underlying semantics of both 8051 lifters are virtually equiv-
alent, with some exceptions.2 The complexity of these binary lifters
is extremely high as they must map each and every subtle archi-
tectural detail from a reference manual written informally to the
target IR and architecture specification. Beyond the likelihood of
omitting a critical detail, some instructions may not easily map to
a target IR, causing many IR instructions to be emitted. This is a
major factor in the speed of the underlying execution engine and
having an optimized and well-mapped IR can improve performance.
Threat Model. In designing a firmware analysis tool, we must
make assumptions about the firmware images being analyzed. Fir-
mUSB assumes that images being analyzed are genuine, meaning
that they have not been specifically tampered with in order to in-
terfere with analysis during firmware extraction or the build step.
Additionally, FirmUSB does not support obfuscated firmware im-
ages with the purpose to hide control flow or memory accesses. We
otherwise assume that the adversary has the ability to arbitrarily
tamper with the firmware prior to its placement on the device or
at any time prior to running FirmUSB. During analysis, FirmUSB
does not consider attacks on the USB protocol, vulnerabilities in
the host drivers, or the physical layer (e.g. USB-C combined with
Thunderbolt to perform DMA attacks) as protocol analysis and
driver protection are handled by other solutions. We assume that
the adversarial device can operate within the USB specification,
but can potentially masquerading as one or more devices. In sum-
mary, FirmUSB assumes firmware is genuine, unobfuscated, and
non-adversarial to the analysis engine. We discuss future potential
additions to the framework to further strengthen the adversarial
model in Section 6.
4 DESIGN AND IMPLEMENTATION
FirmUSB leverages existing symbolic execution frameworks, which
allows us to focus on identifying malicious USB firmware.3 The
primary new components we developed to support this analysis
consist of two 8051 lifters to IR, modifications to angr to support
interrupt scheduling, and the development of semantic firmware
queries with a basis in the USB protocol.
2Each IR has different operations available to it. VEX IR has many specific operations
relating to vector instructions and saturating arithmetic, while LLVM has no saturating
IR operations to speak of. The specificity of the underlying IR can affect analysis tool
understanding of program itself.
3There were some circumstances where additional efforts were required with the
frameworks; these issues are discussed in Section 6.
5
4.1 8051 Lifting to IR
In order to reason about firmware, it is necessary to represent it
in a format that is amenable to symbolic analysis. The process
of converting binary firmware into a corresponding IR is shown
in Figure 2. To facilitate this process, we built two lifters for 8051
binaries: a lifter to VEX IR for use with angr and one for LLVM IR
for use with Fie. Both lifters were written to lift 8051 machine code
to the equivalent or nearest representation in their respective IRs.
Writing lifters is non-trivial because of the substantial number of
instructions involved and the precision required. Every instruction
and sub-opcode needs to be accurately mapped to the target IR.
The 8051 has 44 different mnemonics (e.g. ADD, INC, MOV, LJMP)
across 256 different opcodes (e.g. INC A versus INC R0), each of
which may define a one-byte, two-byte or three-byte instruction.
For each opcode, the decoding pattern with operand types were
manually encoded into a 256 entry table. Some example operand
types included the accumulator (A), an 8 or 16-bit immediate, an
address, or a general purpose register. Even with an architecture sig-
nificantly less instruction-rich than Intel’s current x86 and x86_64
architectures, this lifting process took months.
Any inaccuracy in lifting, no matter how subtle, may cause code
paths to be ignored or incorrect values to be calculated during sym-
bolic execution. Processor documentation is written to be read by
humans, not machines, meaning that it is easy to miss technicalities
while transcribing the instructions. For example, while lifting a
specific 8051 MOV instruction, we later noticed that unlike all other
instructions, which followed the form of [op, dst, src], it is
the the only instruction to have the form of [op, src, dst] in
the binary instruction stream. This detail was missed on the first
lifting pass and caused subtle incorrect execution, leading to time-
consuming debugging. Ideally, processor documentation would
also be accompanied by an instruction specification. Such a formal
definition of instructions, which would include their encoding and
functionality, could possibly lead to an automatic lifter generator to
be created.
There are very few disassemblers available for the 8051 architec-
ture. We used D524 and mcs51-disasm5 disassemblers, in addition
to our own new, table-based 8051 disassembler built into our VEX
lifter and exposed to angr via a Python wrapper we wrote called
py8051. To support our symbolic execution engines, the disassem-
bled instructions are mapped to their corresponding IR. This map-
ping allows the engine to emulate hardware while revealing it in
detail to the analysis engine. At this stage, additional information
regarding the instruction set architecture and memory layout of the
device is added. On 8051, a distinction between memory regions is
required as there are numerous types of memory accesses, including
memory-mapped registers, external RAM, and code bytes.
Fie Backend. To facilitate memory analysis, we built a translator
that remaps 8051 machine code to LLVM IR for further use within
Fie. The translator has two main components – Dictionary and
Memory Layout. The dictionary maps 8051 instructions into their
corresponding LLVM IR sequence, e.g., for an add instruction, the
IR mapping is to LOAD the operands, ADD the loaded values, and
4Available from http://www.bipom.com/dis51.php
5Available from https://github.com/pfalcon/sdcc/blob/master/support/scripts/mcs51-
disasm.pl
Projects, Paths, PathGroups, and many more abstractions to aid in
analyzing binaries. In order for angr to support the 8051 architec-
ture, we developed a VEX IR lifter, firmware loader in CLE, archi-
tecture definition file in archinfo, disassembler wrapper (py8051),
and IR-specific CCalls in SimuVEX for load and store addreses.7
In total we added 917 lines of Python code to core angr subpro-
jects, 623 lines of C for our 8051 disassembler, 2,850 lines of C for
our VEX lifter along with 343 lines of 8051-to-IR tests. FirmUSB’s
usage of angr as a library, which included the frontend, interrupt
scheduling and 8051 environment definitions amounted to 3,117
lines of Python and C.
The architecture loader consisted of a mapping between the 8051
VEX guest state structure, which contains the 8051 CPU registers, to
human-readable register names. The firmware loader we added was
responsible for mapping in the binary’s code section and automati-
cally discovering ISRs for later scheduling. In order to have parity
with Fie, an ExecutionTechnique was written for angr to support
the dynamic scheduling of interrupts. The 8051 architecture uses an
interrupt vector table in which the first bytes of a firmware image
are trampolines to an Interrupt Service Routine (ISR) or a reti,
which means no ISR. Knowledge of the 8051 interrupt semantics
were used to limit when they and which ones were run. To improve
the execution time of firmware binaries, we created the concept of
code coverage in order to give our engine feedback on path perfor-
mance. Additionally, we created a randomized cooldown for ISR
scheduling order to facilitate binaries that have expensive ISRs. One
more heuristic we incorporated was the ability to detect looping
paths with a fixed threshold. This functionality was already built
into angr, but we utilized it to continually prune paths not making
any progress.
4.2 VID/PID Based Inference
To figure out what a firmware image would look like to the oper-
ating system when flashed on to a device, we simulate how the
operating system recognizes a USB device and loads the corre-
sponding driver. Ideally, one would expect to find all the necessary
information about the device using its Vendor ID (VID) and Product
ID (PID). Unfortunately, this only works for a small portion of USB
devices, an exception being USB class devices. These devices usually
follow a specific USB class specification, e.g., USB Mass Storage.
The benefit of having USB class devices is that the OS can provide
a general purpose driver to serve devices from different vendors –
as long as they follow the USB class specification. In this case, the
bDeviceClass solely determines the functionality of the device.
Another exception comes from USB composite devices. These de-
vices expose multiple interfaces and functionalities to the operating
system. For instance, a USB headset may control an HID interface
and three audio interfaces. This is good example of where a simple
VID/PID pair is just not enough to find two different drivers at the
same time.
To solve these issues, we extract all the USB device matching
information from the Linux 4.9 kernel, and save it as a “USBDB”.
We have also fully implemented how the Linux kernel uses the USB
7CCalls are an IR expression that acts as a callback into a function. It is primarily used
by VEX to assist in supported complicated IR blocks, but we utilize it to resolve 8051
memory addresses to regions.
6
Figure 2: The relationship between source code, 8051 binary
firmware, and lifted IR with VEX as the example.
STORE to the destination operand location. Memory Layout contains
addresses of registers and special memory locations. This memory
layout is loaded by Fie in order to correctly handle symbolic mem-
ory and normal memory operations. Fie also requires interrupt
subroutines to be specified. This requires an extra step to specify
function boundaries by matching them against the compiled and
assembled file.
Fie was built as a source level analysis tool, operating on LLVM
bytecode as generated by the Clang compiler. As a result, it was
not designed to load raw binaries. Instructions that refer to code
bytes in binary firmware may not be used properly without a direct
reference to raw code bytes. These bytes are referred to for accessing
constant data (e.g. USB descriptors and jump tables). Since Fie
does not load code bytes, it does not support these instructions. To
address this issue, we modified Fie to load binary firmware to handle
access to code regions. This allowed us to properly symbolically
execute the destination of the jumps, therefore increasing our code
coverage.
In total our 8051 to LLVM IR lifter consisted of 1,967 lines of Java
with 803 of 8051-to-IR specification mappings. Our direct changes
to Fie consisted of 4,716 lines of C++.
angr Backend. The angr binary analysis platform is meant to be
used in projects as a Python library. It supports many binary formats
(e.g. ELF, PE, MachO, raw binary) and many processor architectures
(e.g. ARM, AArch64, x86, x86_64, PPC) out-of-the-box. Despite this,
during FirmUSB’s initial development, no processor architecture
with a word size less than 32-bits was supported. This has recently
changed with the addition of AVR support. Going forward with
FirmUSB, we opted to utilize angr as a library and make as little
modifications to the core, architecture independent code as possible.