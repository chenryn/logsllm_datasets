them, a typical countermeasure is to mask the secret value:
each time a secret s of κ bytes must be transmitted, a ran-
dom value m (the mask) of the same length would be chosen
and the pair (m, m⊕s) would be sent instead of s. This way,
the value can trivially be recomputed by the other party, but
the representation on the wire is diﬀerent for every message.
If the secret s to mask is longer than κ, s can be split in
κ-byte words, masked by the same mask. Alternatively, it is
possible to choose a longer mask to cover the secret entirely.
Masking all secrets using a fresh mask would force the
attacker to mount a second order attack, that is ﬁnd a way
to simultaneously retrieve information about the mask and
the masked value, to learn something about the secret.
Most of the attacks described in Sec. 2 are designed to
recover the plaintext one byte at a time, which makes them
ﬁrst order attacks with κ = 1. Some attacks against RC4
also exploit statistical biases on two consecutive bytes, which
also corresponds to our model (for κ = 2).
In practice, the BEAST, CRIME, TIME and Lucky 13
attacks could easily be extended to guess κ consecutive bytes
at once (for example, for BEAST, this would mean aligning
the boundary of the block to guess diﬀerently). However, the
complexity to recover κ bytes at once would be proportional
to 28κ (instead of κ · 28), which limits κ to small values
in practice. To be conservative, we consider the maximum
number of recoverable successive bytes κ to be 8.
Overall, the recent attacks against TLS Record layer can
all be considered as ﬁrst order attacks (with κ ≤ 8). So,
masking secret values using unique 8-byte random strings
will mitigate these attacks.
In the following sections we
present two implementations of this concept applied to the
transport and the application level.
Concerning RC4, it can be noted that other known biases
exist and are related to distinct distant groups of keystream
bytes. Thus, second order attacks against RC4 might be
possible by exploiting such biases. We brieﬂy discuss this
case in the conclusion.
4. PROPOSED MECHANISMS
This section presents generic mechanisms to mitigate the
impact of TLS security ﬂaws, by leveraging the masking
principle. The ﬁrst one acts at the transport (TLS) layer,
while the second one works at the application (HTTP) level.
4.1 TLS Scramble: Masking at the TLS level
The idea of masking application data at the transport
level is not new in TLS. During the speciﬁcation of Web-
Sockets [11], a recent HTML5 feature, a randomization step
was added to avoid confusion between WebSocket traﬃc and
other protocols, that could be leveraged by an attacker.
WebSocket randomizes client-to-server traﬃc using 4-byte
long masks. An interesting side eﬀect of this change was to
block the early version of the BEAST attack, forcing Duong
and Rizzo to rewrite their exploit using Java instead of Web-
Sockets.
4.1.1 A fake compression method: Scramble
As shown in Fig. 1, record processing may optionally com-
press the plaintext before the cryptographic transformations.
This step takes a plaintext record of at most 214 bytes, and
produces a compressed record that can be at most 1024 bytes
longer than the plaintext.
To generalize the idea behind WebSockets masking, we
deﬁne a fake compression algorithm, Scramble. Given a κ
parameter (the mask length) and a plaintext P , the way
Scramble compresses P is as follows:
• the scramble_record method generates a κ-byte ran-
dom string m;
• m is repeated, and possibly truncated, to be as long
as P . The result is a masking string M ;
• the compressed record is m|P ⊕ M , which is exactly
κ-byte longer than P .
The unscramble_record operation is straightforward:
• on receiving a compressed string c, which should con-
tain at least κ bytes, extract the ﬁrst κ bytes of c as
the mask m, and call X the remaining string;
• expand m to be as long as X to obtain M ;
• the uncompressed value is M ⊕ X.
Implementation in OpenSSL
4.1.2
To check the feasibility of this idea, we implemented the
Scramble compression method in OpenSSL (v1.0.1) with 8-
byte masks. The patch aﬀects the crypto/comp directory.
It adds c_scramble.c, a 75-line ﬁle describing the method,
as well as trivial changes to comp.h and to the correspond-
ing Makefile. The scramble_record function is given in
Appendix C. To test the method with real connections, we
also patched apps/s_client.c and apps/s_server.c to ex-
change data over the scrambled channel.
4.2 MCookies: Masking at the application level
Another way to tackle the problem is to mask secret val-
ues at the application level, which requires less bandwidth
(only relevant elements would need to be masked) and avoids
modifying TLS stacks. In this section, we propose a method
to mask cookies at the HTTP level.
4.2.1 MCookies principle
Usually, HTTP cookies work as speciﬁed in Fig. 5: a server
can deﬁne cookies to be stored by its client, then each time
this client sends a request to the server, the cookies are
added to the headers [3]. In some cases, they may also be
read and modiﬁed by client-side scripts.
If we only consider cookies that are never read nor modi-
ﬁed by client-side scripts, there is a simple way to break this
repetition while modifying only the HTTP server, which is
described in Fig. 6:
• Cookie deﬁnition: when the web application sets
such a cookie (e.g. calling set-cookie(SESSID, V )),
the HTTP layer rewrites the Set-cookie header to
send SESSID=M :M ⊕ V instead of SESSID=V 8.
• Cookie restitution (and redeﬁnition):
for each
request containing a SESSID=X:Y cookie, the HTTP
server transmits SESSID=X ⊕ Y (the unmasked cookie)
to the web application. Then, three cases may arise:
– the web application updates the cookie, which is
covered by the Cookie deﬁnition step;
– it can erase the cookie by setting an outdated
expiration time, in which case the HTTP layer
simply transmits the header as is;
– otherwise (the cookie is left unchanged by the ap-
plication), the HTTP server sets a new version of
the cookie, M(cid:48):M(cid:48) ⊕ V , that is the same initial
value masked using a fresh random mask.
4.2.2 Discussion of MCookies feasibility
To select the senstive cookies to protect, a simple way
would be to deﬁne a static list of cookie names, but a natu-
ral heuristic is to protect every cookie ﬂagged both httpOnly
and secure. Only considering httpOnly cookies guarantees
that client-side script have no access to the cookie value,
leaving the HTTP server free to change the cookie represen-
tation at will. However, from the web application point of
view, the cookie value sent and received remains the same.
Moreover, protecting a non-secure cookie is pointless as this
one can be easily stolen with our attacker model in general9.
8Since M and M ⊕ V are binary strings, Base64 is used.
9Even when cookies are sent without the secure attribute,
security mechanisms like HSTS (HTTP Strict Transport Se-
curity [17]) can forbid cleartext communications.
Figure 5: HTTP cookies: deﬁnition and restitution.
Figure 6: Deﬁnition and restitution of MCookies
Yet, rewriting the cookies on every request has negative
consequences. First, it adds extra-bandwidth in server mes-
sages. Second, the original cookie attributes (Expires, Max-
Age, Domain, Path) are lost in the process. These attributes
would need to be speciﬁed at each redeﬁnition to keep ap-
plication cookies constistency. To ﬁx this problem, the at-
tributes from the original Set-cookie header are encoded in-
side the masked cookie: a sensitive cookie V with attributes
A would be transmitted to the client as M :M ⊕ V :A. It
would thus be possible to remember the correct attributes
for each request.
By ﬁxing the attribute problem, we ampliﬁed the band-
width overhead. However, we can use smaller representa-
tions for several attributes, since each request carries infor-
mation that can help rebuild the Domain and Path attributes.
For domains, we can keep only the number of subdomains
in the domain and the presence of a starting dot. For exam-
ple, the .example.com domain would become .2, whereas
sub.example.com would become 3.
Indeed, the exact do-
main can be rebuilt using the Host header in the request.
Therefore, we only need a single byte to encode domains,
using the sign bit to store the presence of the starting dot,
leaving 7 bits for the node count. A similar transformation
can be applied to path attributes. Finally, the expiration
attribute can be converted into a 8-byte timestamp.
Another drawback of MCookies is that they cannot pre-
vent active network attacks (such as Lucky 13).
Indeed,
when the record packets are modiﬁed by the attacker, they
are seen as corrupted records by the server TLS stack, and
discarded. Since the HTTP server never receives the cor-
responding request, it cannot answer with a freshly masked
cookie. To counter active attacks, the browser could monitor
failed successive HTTPS connections for each origin and, af-
ter a given number of broken connections, erase the cookies
associated to this domain. Drawbacks of this countermea-
sure are twofold:
• the client has to be modiﬁed to maintain this counter;
• setting a correct threshold is hard: the trigger should
be eﬀective against real attacks, but a low threshold
would easily break HTTPS sessions on poor quality
network connections.
To overcome MCookies limitations, we extend MCookies
with a new HTTP header: Masked-Cookie. This extension
requires a change in the browser that is now put in charge
of masking cookies.
4.2.3 Masked-Cookie headers
In addition to the MCookies mechanism, we introduce a
new Set-Cookie attribute, masked to signal to the client
the presence of masking. Then, a compliant client would,
for each request, send this cookie in a new header, Masked-
Cookie, with the value here masked by the client : Masked-
Figure 7: Use of Masked-Cookie headers: masking is done by the client.
Cookie: SESSID=M(cid:48)
use of this new header.
:M(cid:48)⊕V . Fig. 7 describes the protocol
By moving the cookie masking process to the client side,
active attacks are no more eﬀective. Faced with a compliant
client, a server only needs to deﬁne MCookies once, so the
extra bandwidth cost is essentially removed. On the other
hand, a standard client will ignore the masked attribute, and
the server will fall back on the previous behavior.
4.2.4 Apache Implementation
Implementing MCookies can easily be done as a ﬁlter
module for HTTP servers. We chose Apache for our proof of
concept, since it is open-source, and currently the most de-
ployed HTTP server (its market share is estimated at 45 %
by Netcraft10 and at 65 % by W3Techs11).
Apache exposes a powerful module system with hooks al-
lowing to interact with the request and response processing.
In order to mask the cookies sent by the server during the
emission of the Set-Cookie header, we hook the response
process using an output_filter, deﬁned by mod_filter.
To this aim, we call the ap_register_output_filter and
ap_add_output_filter_handle functions. Then, to unmask
the cookies received via Cookies headers from the client, we
hook the request handling. The input_filter hook happen-
ing too late in the process, we use an earlier control point,
when headers are parsed, using ap_hook_header_parser.
The last step is to send a new representation of the cookie
parsed in the request, along with the response; this step is
easy to implement since request cookies are available from
the output_filter hooks.
The overall code to implement the MCookies (including
the Base64 code to encode the masked value safely) is around
500 lines of C. It handles both the MCookie rewriting, with-
out compression, and the Masked-Cookie extension.
4.2.5 Masked-Cookies for Chromium
Chromium is currently the most popular web browser. As
it is open-source and modular, we decided to patch this web
browser to prove the feasibility of Masked-Cookies head-
ers in a real world context. The overall C++ patch for
Chromium (version 31) only counts 241 lines. It adds the
masked attribute to the internal cookie representation, the
CanonicalCookie class, as a new attribute. Masking and un-
10http://www.netcraft.com
11http://w3techs.com
masking are implemented in the CanonicalCookie::Create
and CookieMonster::BuildCookieLine methods.
5. ANALYSIS OF MASKING MECHANISMS
5.1 Security analysis
5.1.1 TLS Scramble method
Speciﬁed as a new TLS compression method, TLS Scram-
ble would require deployment eﬀorts. However, once de-
ployed, TLS compression negotiation would be reliable, since
it is similar to ciphersuite negotiation, which is known to
work between all TLS stacks.
TLS Scramble disables real TLS compression, trivialy de-
feating CRIME and TIME attacks. This technique is also
eﬃcient against BEAST, Lucky 13, RC4-biases and POO-
DLE attacks, since they only recover the secret one byte at
a time, and that Scramble makes this byte a moving target.
It is however important to notice that TLS Scrambling
masks the entire messages, and not only the secret values,
which means this method does not meet the principle de-
scribed in section 3 per se. In particular, some attacks rely-
ing on mixing secret values and attacker’s guess might still
work, e.g. compression attacks in the application layer.
5.1.2 MCookies
MCookies randomize only the cookie values sent by the
client, which ﬁts exactly our masking principle. As long as
secrets are masked, ﬁrst-order attacks will be defeated by
MCookies: this is the case for passive network attacks like
BEAST, client-side compression attacks and RC4-biases.
To be eﬀective, MCookies need HTTP requests to reach
the server and the corresponding answers (containing a freshly
masked cookie) to get back to the client. Active network at-
tackers may be able to block such answers. Even if they do
not, Lucky 13 can not be blocked by MCookies, since each
tampered request will lead to a server-side TLS error, thus
breaking the connection. For POODLE, a lucky guess will
lead to a valid record, and the server will be able to send a
new cookie representation, which may still be blocked by the
attacker. So MCookies are ineﬃcient against active attacks.
Apart from thwarting most of the attacks, MCookies have
the advantage of requiring only a small modiﬁcation of the
HTTP server, leaving the browser and the web application
untouched, which makes it a reliable solution to deploy.
5.1.3 MCookies with Masked-Cookies headers
As MCookies, this extended mechanism ﬁts the masking
principle. Moreover, since sensitive cookies are masked by
the browser, every request will be masked diﬀerently, even
in the presence of an active attacker: all the studied attacks
are covered by the countermeasure.
Moreover, this mechanism is backward compatible:
it is
possible with the same HTTPS server to handle old and
new clients, taking advantage of the new Masked-Cookies
headers when available, but still defeating passive network
attacks with older clients.
5.2 Performance analysis
5.2.1 TLS Scrambling overhead analysis
Masking plaintext data at the TLS level is easy to im-
plement, and is completely transparent from the application
layer point of view. Yet, it presents two major drawbacks:
• each and every record has to be κ-byte longer, even for
short messages;
• deploying a new compression method in TLS would
be hard, since deploying new ciphersuites (an easier
operation) can take years.
Performance-wise, the CPU overhead is negligible, and
the network bandwidth overhead is less than 1 % in bytes.
5.2.2 MCookies network overhead analysis
At application level, the masking of cookie values increases
the HTTP requests and responses size by adding the mask
and the attributes to the initial cookie value and by sending
new headers. In order to quantify this overhead, we built a
script that simulates MCookies on a real internet navigation
traﬃc. It computes the overheads according to whether the
web browser used supports Masked-Cookies headers or not.
Traﬃc
type
Sensitive
Overall
Raw
traﬃc
volume
24 MB
122 MB
Extra bandwidth
w/o UA support
naive
compr.
with UA
support
+20.1 % +14.9 % +10.8 %
+2.2 %
+4.1 % +3.0 %
Table 2: Network overhead evalulation
We instrumented a web browser (Chromium) to analyse