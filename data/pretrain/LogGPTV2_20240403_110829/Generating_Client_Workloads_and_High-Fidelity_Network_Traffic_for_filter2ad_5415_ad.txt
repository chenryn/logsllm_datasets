You can disable virtualization of the TSC by adding the setting monitor_control.virtual_rdtsc = FALSE 
to the virtual machine’s .vmx configuration file. This feature is no longer recommended for use. When you 
disable virtualization of the TSC, reading the TSC from within the virtual machine returns the physical 
machine’s TSC value, and writing the TSC from within the virtual machine has no effect. Migrating the virtual 
machine to another host, resuming it from suspended state, or reverting to a snapshot causes the TSC to jump 
discontinuously. Some guest operating systems fail to boot or exhibit other timekeeping problems when TSC 
virtualization is disabled. In the past, this feature has sometimes been recommended to improve performance 
Copyright © 2008 VMware, Inc. All rights reserved.
8
Timekeeping in VMware Virtual Machines
of applications that read the TSC frequently, but performance of the virtual TSC has been improved 
substantially in current products. The feature has also been recommended for use when performing 
measurements that require a precise source of real time in the virtual machine, but for this purpose, the 
pseudoperformance counters discussed in the next section are a better choice.
Pseudoperformance Counters
For certain applications it can be useful to have direct access to real time (as opposed to apparent time) within 
a virtual machine. For example, you may be writing performance measuring software that is aware it is 
running in a virtual machine and does not require its fine‐grained timer to stay in step with the number of 
interrupts delivered on other timer devices.
VMware virtual machines provide a set of pseudoperformance counters that software running in the virtual 
machine can read with the rdpmc instruction to obtain fine‐grained time. To enable this feature, use the 
following configuration file setting:
monitor_control.pseudo_perfctr = TRUE
The following machine instructions then become available:
Table 2.  Instructions Available When Pseudoperformance Counters Are Enabled
Instruction
Time Value Returned
rdpmc 0x10000
rdpmc 0x10001
rdpmc 0x10002
Physical host TSC
Elapsed real time in ns
Elapsed apparent time in ns
Although the rdpmc instruction normally is privileged unless the PCE flag is set in the CR4 control register, a 
VMware virtual machine permits the above pseudoperformance counters to be read from user space 
regardless of the setting of the PCE flag. Note that the pseudoperformance counter feature uses a trap to catch 
a privileged machine instruction issued by software running in the virtual machine and thus has more 
overhead than reading a performance counter or the TSC on physical hardware.
There are some limitations. Some or all of these counters may not be available on older versions of VMware 
products. In particular, elapsed real time and elapsed apparent time were first introduced in VMware ESX 3.5 
and VMware Workstation 6.5. The zero point for the counters is currently unspecified. The physical host TSC 
may change its counting rate, jump to a different value, or both when the virtual machine migrates to a 
different host or is resumed from suspend or reverted to a snapshot. The elapsed real time counter runs at a 
constant rate but may jump to a different value when the virtual machine migrates to a different host or is 
resumed from suspend or reverted to a snapshot.
Virtual HPET
Current VMware products do not provide a virtual HPET, because currently supported guest operating 
systems do not require one.
Other Time-Dependent Devices
Computer generation of sound is time‐sensitive. The sounds that a virtual machine generates are always 
played by the host machine’s sound card at the correct sample rate, regardless of timer behavior in the virtual 
machine, so they always play at the proper pitch. Also, there is enough buffering between the virtual sound 
card of the virtual machine and the host machine’s sound card so that sounds usually play continuously. 
However, there can be gaps or stuttering if the virtual machine falls far enough behind that the supply of 
buffered sound information available to play is exhausted.
Playback of MIDI music (as well as some other forms of multimedia), however, requires software to provide 
delays for the correct amount of time between notes or other events. Thus, playback can slow down or speed 
up if the apparent time deviates too far from real time.
Copyright © 2008 VMware, Inc. All rights reserved.
9
Timekeeping in VMware Virtual Machines
VGA video cards produce vertical and horizontal blanking signals that depend on a monitor’s video scan rate. 
VMware virtual machines currently make no attempt to emulate these signals with accurate timing. There is 
very little software that uses these signals for timing, but a few old games do use them. These games currently 
are not playable in a virtual machine.
VMI Paravirtual Timer
The Virtual Machine Interface (VMI) is an open paravirtualization interface developed by VMware with input 
from the Linux community. VMI is an open standard, the specification for which is available at 
http://www.vmware.com/pdf/vmi_specs.pdf. VMI is currently defined only for 32‐bit guests. VMware 
products beginning with Workstation 6 and ESX 3.5 support VMI.
VMI includes a paravirtual timer device that the guest operating system kernel can use for tickless 
timekeeping. In addition, VMI allows the guest kernel to explicitly account for “stolen time”; that is, time when 
the guest operating system was ready to run but the virtual machine was descheduled by the host scheduler.
VMI could be used by any guest operating system, but currently only Linux uses it. See “Linux” on page 11.
Timekeeping in Specific Operating Systems
This section details some of the peculiarities of specific operating systems that affect their timekeeping 
performance when they are run as guests in virtual machines. A few of these issues also affect timekeeping 
behavior when these operating systems are run as hosts for VMware Workstation and other VMware hosted 
products.
Microsoft Windows
Microsoft Windows operating systems generally keep time by counting timer interrupts (ticks). System time 
of day is precise only to the nearest tick. The timer device used and the number of interrupts generated per 
second vary depending on which specific version of Microsoft Windows and which Windows hardware 
abstraction layer (HAL) are installed. Some uniprocessor Windows configurations use the PIT as their main 
system timer, but multiprocessor HALs and some ACPI uniprocessor HALs use the CMOS periodic timer 
instead. For systems using the PIT, the base interrupt rate is usually 100Hz, although Windows 98 uses 200Hz. 
For systems that use the CMOS timer, the base interrupt rate is usually 64Hz.
Microsoft Windows also has a feature called the multimedia timer API that can raise the timer rate to as high 
as 1024Hz (or 1000Hz on systems that use the PIT) when it is used. For example, if your virtual machine has 
the Apple QuickTime icon in the system tray, even if QuickTime is not playing a movie, the guest operating 
system timer rate is raised to 1024Hz. This feature is not used exclusively by multimedia applications. For 
example, some implementations of the Java runtime environment raise the timer rate to 1024Hz, so running 
any Java application may raise your timer rate, depending on the version of the runtime you are using. This 
feature is also used by VMware hosted products running on a Windows host system, to handle cases in which 
one or more of the currently running virtual machines require a higher virtual timer interrupt rate than the 
host’s default physical interrupt rate.
Microsoft Windows has an additional time measurement feature accessed through the 
QueryPerformanceCounter system call. This name is a misnomer, because the call never accesses the CPU’s 
performance counter registers. Instead, it reads one of the timer devices that have a counter, allowing time 
measurement with a finer granularity than the interrupt‐counting system time of day clock. Which timer 
device is used (the ACPI timer, the TSC, the PIT, or some other device) depends on the specific Windows 
version and HAL in use.
Some versions of Windows, especially multiprocessor versions, set the TSC register to zero during their 
startup sequence, in part to ensure that the TSCs of all the processors are synchronized. Microsoft Windows 
also measures the speed of each processor by comparing the TSC against one of the other system timers during 
startup, and this code also sets the TSC to zero in some cases.
Some multiprocessor versions of the Windows operating system program the local APIC timers to generate 
one interrupt per second. Other versions of Windows do not use these timers at all.
Copyright © 2008 VMware, Inc. All rights reserved.
10
Timekeeping in VMware Virtual Machines
Some multiprocessor versions of Windows route the main system timer interrupt as a broadcast to all 
processors. Others route this interrupt only to the primary processor and use interprocessor interrupts for 
scheduler time slicing on secondary processors.
To initialize the system time of day on startup, Microsoft Windows reads the battery‐backed CMOS TOD 
clock. Occasionally, Windows also writes to this clock so that the time is approximately correct on the next 
startup. Windows keeps the CMOS TOD clock in local time, so in regions that turn their clocks ahead by an 
hour during the summer, Windows must update the CMOS TOD clock twice a year to reflect the change. Some 
rare failure modes can put the CMOS TOD clock out of step with the Windows registry setting that records 
whether it has been updated, causing the Windows clock to be off by an hour after the next reboot. If VMware 
Tools is installed in the virtual machine, it corrects any such error at boot time.
A daemon present in Windows NT‐family systems (that is, Windows NT 4.0 and later) checks the system time 
of day against the CMOS TOD clock once per hour. If the system time is off by more than 60 seconds, it is reset 
to match the TOD clock. This behavior is generally harmless in a virtual machine and may be useful in some 
cases, such as when VMware Tools or other synchronization software is not in use. One possible (though rare) 
problem can occur if the daemon sets the clock ahead while the virtual machine is in the process of catching 
up on an interrupt backlog. Because the virtual machine is not aware that the guest operating system clock has 
been reset, it continues catching up, causing the clock to overshoot real time. If you turn on periodic clock 
synchronization in VMware Tools, it disables this daemon.
For a discussion of W32Time and other Windows clock synchronization software, see “Synchronizing Virtual 
Machines and Hosts with Real Time” on page 14.
Linux
Timekeeping in Linux has changed a great deal over its history. Recently, the direction of kernel development 
has been toward better behavior in a virtual machine. However, along the way, a number of kernels have had 
specific bugs that are strongly exposed when run in a virtual machine. Some kernels have very high interrupt 