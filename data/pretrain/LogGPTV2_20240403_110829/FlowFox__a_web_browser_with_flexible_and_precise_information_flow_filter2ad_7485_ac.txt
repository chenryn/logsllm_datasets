### Figure 7: Distribution of the Relative Visual Difference

**Figure 7** shows the distribution of the relative visual difference between FlowFox and the masked Firefox for the top-500 websites. The differences are usually small to non-existent: a 0% difference means that FlowFox renders the page exactly as the unmasked Firefox does.

The main reasons for larger deviations, identified after manual inspection, include:
1. **Non-displayed content**
2. **Differently positioned content**
3. **Network delays** (content loaded in FlowFox but not yet in Firefox, or vice versa)
4. **Varying images** not captured by the mask

In one case, a site violated the policy, but by providing an appropriate default value in the policy, FlowFox could still render the site correctly.

**Conclusion:**
This experiment demonstrates that FlowFox is compatible with the current web, meaning it does not break sites that comply with the enforced policy. This is a significant observation given that FlowFox handles scripts differently (executing each script twice under the SME regime) and supports our claim that FlowFox is a fully functional web browser.

### Automatic Crawl Experiment

The first experiment involved an automatic crawl, visiting only the homepages of websites. Despite these pages often containing intricate JavaScript code, the experiment did not interact intensely with the websites. Therefore, we conducted a second experiment where FlowFox was used to complete several complex, interactive web scenarios with a random selection of popular sites.

We identified six important categories of websites/web applications among the Alexa top-15:
1. Web mail applications
2. Online (retail) sales
3. Search engines
4. Blogging applications
5. Social network sites
6. Wikis

For each category, we randomly selected a prototypical website from the top-15 list and recorded a specific, complex use case scenario of an authenticated user interacting with that website. We also selected some sites that perform behavior tracking and browsed them in a way that triggers this tracking (e.g., selecting and copying text) with a policy that protects against tracking (see Section 5.2.2). Appendix A contains an overview of a representative sample of our use cases recordings.

**Results:**
For all scenarios, the behavior of FlowFox was indistinguishable from the Firefox browser for the user. For behavior tracking sites, information leaks were closed—FlowFox fixed the executions by preserving the original script behavior while replacing sensitive information with default values. This had no impact on user experience, as users do not notice these leaks in Firefox either.

**Conclusion:**
This second experiment confirms our conclusions from the first experiment: FlowFox is compatible with the current web and can fix interfering executions without impacting user experience.

### Security Evaluation

We evaluated two aspects of FlowFox's security:
1. **Deterministic Scheduler**: Due to the total order of our lattice and semi-serial execution (see Section 4.1), the scheduler is effectively deterministic. Although there are some sources of non-determinism in JavaScript, they are considered technical issues and do not affect the deterministic execution.
2. **Deterministic Language**: The ECMAScript specification ensures that I/O can only be done via the browser API. Core JavaScript, as defined by the ECMAScript specification, does not provide any input or output channels to the programmer [20, §I]. Since all I/O operations pass through the translation layer to be used by the DOM implementation (see Section 4.2), we have high assurance that all operations are correctly intercepted and handled according to the SME I/O rules.

#### Is FlowFox Non-interferent?

1. **Policy Compatibility**: An important assumption is that no information output to an API method classified as high can be input again through an API call classified as low. Validating this assumption in our prototype is non-trivial due to the complexity of the browser API. However, the relatively simple policies used in our experiments are compatible.
2. **Implementation Vulnerabilities**: Given the size and complexity of the code base, we cannot formally guarantee the absence of implementation vulnerabilities. However, extensive manual verification has been performed to ensure FlowFox behaves as expected on malicious scripts attempting to leak information.

#### Can FlowFox Enforce Useful Policies?

FlowFox guarantees non-interference with respect to an information flow policy. Here are some examples of how FlowFox mitigates concrete threats:

1. **Leaking Session Cookies**:
   - **Problem**: Malicious scripts can leak session cookies to an attacker.
   - **Solution**: By assigning high security levels to the DOM calls for cookies and background color, and low levels to API calls that trigger network output, FlowFox allows access to cookies but prevents leakage.
   - **Example**:
     ```javascript
     1 new Image().src = "http://host/?=" + document.cookie;
     2 document.body.style.backgroundColor = cookieValue("color");
     ```
     - **FlowFox Execution**:
       ```javascript
       1 new Image().src = "http://host/?=" + document.cookieundefined;
       2 document.body.style.backgroundColor = cookieValue("color");
       ```

2. **History Sniffing**:
   - **Problem**: History sniffing can leak browsing history by reading link colors.
   - **Solution**: Assign a high security level to the `getPropertyValue` method and set an appropriate default color value. If all API calls that trigger network output are low, scripts can still access the color but cannot leak it.
   - **Example**:
     ```javascript
     1 var l = document.createElement("a");
     2 l.href = "http://web.site.com"
     3 new Image().src = "http://attacker/?=" +
     4 (document.defaultView.getComputedStyle(l, null)
     5 .getPropertyValue("color") == "rgb(12, 34, 56)")
     ```

3. **Tracking Libraries**:
   - **Problem**: Libraries like Tynt track copy events and append URLs to copied content.
   - **Solution**: Assign a high security label to the DOM call for receiving the selected text, ensuring FlowFox reports empty strings as copied.
   - **Example**:
     ```javascript
     R6[window.getSelection] : true → H (cid:44)→ 
     ```

These examples demonstrate the versatility of FlowFox in supporting useful policies. Further investigation into three classes of policies is recommended:
1. **Privacy Profiles**: Classify the entire DOM API as low, except for selected calls returning sensitive information.
2. **SOP Approximation**: Write policies that approximate the Same-Origin Policy (SOP) but close its leaks.
3. **Server-Driven Policies**: Allow sites to configure FlowFox to better protect information returned from that site.

### Performance and Memory Cost

All experiments were performed on a MacBook notebook with a 2GHz Intel Core2 Duo processor and 2GB RAM.

#### Micro Benchmarks

The goal was to quantify the performance cost of our implementation of SME for JavaScript. We used the Google Chrome v8 Benchmark suite version 6 and an I/O test to simulate I/O-intensive applications.

**Results:**
- **Unmodified SpiderMonkey**: Baseline
- **SpiderMonkey with SME Disabled**: Minor modifications
- **SpiderMonkey with SME Enabled**: Significant impact for data structure-intensive applications, doubling execution time when multi-executing with two security levels.

#### Macro Benchmarks

The goal was to measure the impact on the latency perceived by a browser user. We used Selenium to record and replay six scenarios from our second compatibility experiment.

**Results:**
- **User-Perceived Latency**: Acceptable for real-life web applications, with caching enabled during browsing but cleared between different browser runs.

#### Memory Benchmarks

Finally, we provide a measurement of the memory usage.