User: 请回答以下运维开发问题选择集成分支战略是DevOps的一部分吗？在一个成熟的DevOps组织中，选择产品/产品线集成分支战略是否会成为DevOps的一部分？
我所说的整合分支战略是什么意思？
例如，一个产品团队必须在一定的时间间隔内集成20个功能，以满足一些上市时间的发布要求。
一种潜在的方法是以瀑布式的方式使用功能分支，就像他们多年来一直在做的那样——每个功能都在自己的分支中进行开发和测试，只有在达到各自的功能QA目标后才能合并到主分支中（发布分支将从中提取）。
但是总的集成时间估计-20个功能分支合并窗口乘以平均合并持续时间（来自团队的分支合并历史数据）可能太高了。
另一种方法是拉取4个中间集成分支，每个分支由5个特征分支使用。这样，所有20个特征将在5个分支合并窗口间隔中集成到4个中间分支中。随后是4个其他分支合并窗口间隔，用于将这4个分支集成到主分支中，从而使总集成估计达到9个窗口，远好于20个。是的，一些收益可能会被最后4次合并的更高难度所抵消。
另一种方法是直接进行基于主干的开发（真正的CI集成到主分支中），而实际上没有分支合并。
选择这样一种策略的过程就是我所说的分支策略。
注：实际的SCM存储库是无关的，它可以是作为单个存储库一起管理的回购的任何组合，术语分支仅表示该组合中存在的任何物理/实际回购分支的通用逻辑表示。

Assistant: 分支战略显然是一个商业决策，DevOps工程师应该是其中的主要专家，解释所有的权衡。在这个问题上，社区里有一些强有力的立场，很明显，Jez Humble支持他的《持续交付》一书。你可以在这里看到他在谈论这件事。以下是专家小组关于这个主题的视频。以下是我对StackOverflow的高度投票回答，特别是关于功能分支的主题。很明显，这是DevOps的一个大主题。
人们常说的一件事（Jez Humble大部分）是特征分支是邪恶的。对于n个独立的特征分支，您将需要一个（n-1）（n-2）/2合并[组合编号n-1超过2]。在10个以上的功能分支中，出现了一些非常高的数字。由于合并很难，而且没有公开的版本控制系统可以做到这一点，因此整个软件行业正在从软件发布和软件内部部署转向软件即服务，在那里，唯一的出路是向前发展，软件由供应商为您开发和维护。
据我所知，只有一家公司能够在本地制作高质量的业务关键型软件，并保持10多年的过去主要版本，通过多次代码重构对补丁进行反向移植，并且能够在每个版本中定期处理数十个主要功能分支和在其单个功能分支上开发的数千个小功能，并不断合并为完整功能，而不是单个提交。该代码还发布在14种不同的体系结构上。这家公司是Oracle，产品是RDBMS，他们至少从1990年起就一直在实践现在所说的DevOps。早在2001年，每天部署数百个代码将是相当标准的。他们之所以能够做到这一点，是因为我花了10多年的时间开发了严格的编码标准、不变的测试套件和专有的版本控制系统。一个可以通过自动化完成99%合并的系统。
其他人几乎只在项目的某个阶段/规模之后修补最新的主要发布版本，或者需要大量的人力资源将所有补丁合并到所有可能的发布版本，并需要大量的人工或计算资源来测试所有补丁。例如，在Linux内核中，X.odd开发版本有一个维护程序，X.even版本有更高版本的稳定分支维护程序，但X-1.Y版本没有补丁。有时，Linux发行版会在其LTS发行版中维护内核版本，但代价很高，而且发行版之间的代码质量各不相同。这是一个高知名度的项目，投入了大量资源。
造成这种差异的主要原因是：
遵守编码标准和编码样式
通过不变测试套件完成覆盖，它可以捕获没有专门编写测试的bug。
版本控制系统能够实现高水平的自动化。