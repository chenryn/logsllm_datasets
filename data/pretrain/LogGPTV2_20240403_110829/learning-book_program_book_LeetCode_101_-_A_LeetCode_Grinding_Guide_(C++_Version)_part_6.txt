6.4广度优先搜索
36/143 -
if (grid[x][y]
-2)(
continue;
if
(grid[x] [y] == 1) {
return level;
points.push({x, y});
grid[x] [y] = 2;
return 0;
//辅函数
void dfs(queue>& points, vector>& grid, int n, int n
，int i,int j) {
if (i > findLadders(string beginWord, string endWord, vector& vordList)(
vector> ans;
unordered_set dict;
for (const auto &w: wordList){
dict.insert(v);
if (!dict.count(endford)) {
return ans;
dict,erase(beginvord) ;
dict .erase (endWord) ;
unordered_set q1{beginWord} , q2{endWord};
unordered_map> next;
bool reversed - false, found - false;
while (!q1.empty()){
unordered_set q;
for (const auto &v: q1）{
string s = v;
for (size_t i = 0; i  path = {beginlord};
backtracking(beginWord, endWord, next, path, ans);
return ans;
void backtracking(const string &src, const string &dst, unordered_map> &next,vector &path, vector> &ans) {
if (src =- dst){
ans .push_back (path) ;
return;
for (const auto &s: next[src]） {
path.push_back(s);
backtracking(s, dst, next, path, ans);
path.pop_back();
6.5练习
基础难度
130. Surrounded Regions (Medium)
先从最外侧填充，然后再考虑里侧。
257.Binary Tree Paths (Easy)
输出二叉树中所有从根到叶子的路径，回溯法使用与否有什么区别？
进阶难度
47. Permutations II (Medium)
排列题的follow-up，如何处理重复元素？
40.Combination Sum II(Medium)
组合题的follow-up，如何处理重复元素？
---
## Page 44
6.5练习
39/143
37.Sudoku Solver (Hard)
十分经典的数独题，可以利用回溯法求解。事实上对于数独类型的题，有很多进阶的搜索方
法和剪枝策略可以提高速度，如启发式搜索。
310.Minimum Height Trees (Medium)
如何将这道题转为搜索类型题？是使用深度优先还是广度优先呢？
---
## Page 45
第7章深人浅出动态规划
内容提要
算法解释
子序列问题
基本动态规划：一维
背包问题
基本动态规划：二维
字符串编辑
分割类型题
股票交易
7.1算法解释
这里我们引用一下维基百科的描述：“动态规划（Dynamic Programming，DP）在查找有很多
重叠子问题的情况的最优解时有效。它将问题重新组合成子问题。为了避免多次解决这些子问
题，它们的结果都逐渐被计算并被保存，从简单的问题直到整个问题都被解决。因此，动态规划
保存递归时的结果，因面不会在解决同样的问题时花费时间··动态规划只能应用于有最优
子结构的问题。最优子结构的意思是局部最优解能决定全局最优解（对有些问题这个要求并不能
完全满足，故有时需要引人一定的近似）。简单地说，问题能够分解成子问题来解决。”
通俗一点来讲，动态规划和其它遍历算法（如深/广度优先搜索）都是将原问题拆成多个子问
题然后求解，他们之间最本质的区别是，动态规划保存子间题的解，避免重复计算。解决动态规
划问题的关键是找到状态转移方程，这样我们可以通过计算和储存子问题的解来求解最终问题。
同时，我们也可以对动态规划进行空间压缩，起到节省空间消耗的效果。这一技巧笔者将在
之后的题目中介绍。
在一些情况下，动态规划可以看成是带有状态记录（memoization）的优先搜索。状态记录的
意思为，如果一个子问题在优先搜索时已经计算过一次，我们可以把它的结果储存下来，之后遍
历到该子问题的时候可以直接返回储存的结果。动态规划是自下而上的，即先解决子问题，再解
决父问题；而用带有状态记录的优先搜索是自上而下的，即从父问题搜索到子问题，若重复搜索
到同一个子问题则进行状态记录，防止重复计算。如果题目需求的是最终状态，那么使用动态搜
索比较方便：如果题目需要输出所有的路径，那么使用带有状态记录的优先搜索会比较方便。
7.2基本动态规划：一维
70.Climbing Stairs (Easy)
题目描述
给定n节台阶，每次可以走一步或走两步，求一共有多少种方式可以走完这些台阶。
输人输出样例
输入是一个数字，表示台阶数量；输出是爬台阶的总方式。
---
## Page 46
7.2基本动态规划：
41/143
Input: 3
Output: 3
在这个样例中，一共有三种方法走完这三节台阶：每次走一步；先走一步，再走两步：先走
两步，再走一步。
题解
这是十分经典的斐波那契数列题。定义一个数组dp，dp[i表示走到第i阶的方法数。因为
我们每次可以走一步或者两步，所以第i阶可以从第i-1或i-2阶到达。换句话说，走到第i阶的
方法数即为走到第i-1阶的方法数加上走到第-2阶的方法数。这样我们就得到了状态转移方程
dp[i]=dp[i-1]+dp[i-2]。注意边界条件的处理。
int climbStairs(int n){
if (n  dp(n + 1, 1);
for (int i = 2; i & nums){
if (nums.empty()) return 0;
int n = nums.size();
vector dp(n + 1, 0);
dp[1] = nums [0];
for (int i = 2; i & nums){
if (nums.empty()) return 0;
int n = nums,size();
if (n == 1) return nums[0];
int pre2 - 0, pre1 = 0, cur;
for (int i = 0; i & nums) {
int n = nums.size();
if (n  dp(n, 0);
for (int i = 2; i 3->1->1->1。
题解
我们可以定义一个同样是二维的dp数组，其中dp[ij]U]表示从左上角开始到（ij)位置的最
优路径的数字和。因为每次只能向下或者向右移动，我们可以很容易得到状态转移方程dp[]i]=
min(dp[i-1]U], dp[i][-1]) + grid[i]U]，其中 grid 表示原数组。
int minPathSum(vector>& grid) {
int m = grid.size(), n = grid[o] .size() ;
vector> dp(n, vector(n, 0));
for （int i = 0;i >& grid) {
int m = grid.size(), n = grid[o] .size() ;