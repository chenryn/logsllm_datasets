One of the reasons for keeping dead containers around in kubelet today is to
get access to logs from previous instances. Dead container instances can take
up disk space via their root filesystem and result in disk pressure on the
nodes. To alleviate disk pressure and improve the logging experience in
kubernetes, kubelet can retrieve logs from dead containers and GC them right
away once kubelet doesn't depend on metadata associated with old containers.  
Specifically,
  * Kubelet can retrieve logs from the runtime and store in a per-pod, per-container directory inside of `/var/log/` directory. For the docker runtime, this can be a simple move operation. For rkt, we will have to retrieve the logs remotely.
  * The directory structure can be `/var/log///_stdout.log`
  * Update `kubectl logs -p` to return logs from the files instead of relying on the runtime for previous logs.
  * These logs will be kept around on a best-effort basis and will be deleted whenever there is disk pressure.
  * Kubelet can prefer keeping the first and most recent instances of a container around and aggressively delete other log files.
  * All these logs will be accessible initially via the `/logs` REST endpoint. In the future, we can consider expanding `kubectl logs` interface to support an instance number or add support for the first attempt specifically.