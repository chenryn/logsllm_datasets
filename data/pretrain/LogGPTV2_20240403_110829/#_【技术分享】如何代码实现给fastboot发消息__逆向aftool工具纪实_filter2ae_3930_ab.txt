        UCHAR iInterface;
    } USB_INTERFACE_DESCRIPTOR, *PUSB_INTERFACE_DESCRIPTOR;
    typedef int(*AdbWriteEndpointSync_)(ADBAPIHANDLE, char*, int, int *, int);
    typedef void* (*AdbCreateInterfaceByName_)(const wchar_t*);
    typedef void* (*AdbOpenDefaultBulkWriteEndpoint_)(ADBAPIHANDLE, AdbOpenAccessType, AdbOpenSharingMode);
    typedef bool(*AdbNextInterface_)(ADBAPIHANDLE, AdbInterfaceInfo*, unsigned long* size);
    typedef void* (*AdbEnumInterfaces_)(GUID, bool, bool, bool);
    typedef ADBAPIHANDLE(*AdbOpenDefaultBulkReadEndpoint_)(ADBAPIHANDLE, AdbOpenAccessType, AdbOpenSharingMode);
    typedef bool(*AdbGetInterfaceName_)(ADBAPIHANDLE adb_interface,
        void* buffer,
        unsigned long* buffer_char_size,
        bool ansi);
    typedef bool(*AdbCloseHandle_)(ADBAPIHANDLE adb_handle);
    typedef bool(*AdbGetUsbDeviceDescriptor_)(ADBAPIHANDLE, USB_DEVICE_DESCRIPTOR*);
    typedef bool(*AdbGetUsbInterfaceDescriptor_)(ADBAPIHANDLE, USB_INTERFACE_DESCRIPTOR*);
    typedef bool(*AdbGetSerialNumber_)(ADBAPIHANDLE, void*, unsigned long*, bool);
    typedef bool(*AdbReadEndpointSync_) (ADBAPIHANDLE,
        void*,
        unsigned long,
        unsigned long*,
        unsigned long);
    AdbWriteEndpointSync_ AdbWriteEndpointSync;
    AdbCreateInterfaceByName_ AdbCreateInterfaceByName;
    AdbOpenDefaultBulkWriteEndpoint_ AdbOpenDefaultBulkWriteEndpoint;
    AdbNextInterface_ AdbNextInterface;
    AdbEnumInterfaces_ AdbEnumInterfaces;
    AdbOpenDefaultBulkReadEndpoint_ AdbOpenDefaultBulkReadEndpoint;
    AdbGetInterfaceName_ AdbGetInterfaceName;
    AdbCloseHandle_ AdbCloseHandle;
    AdbGetUsbDeviceDescriptor_ AdbGetUsbDeviceDescriptor;
    AdbGetUsbInterfaceDescriptor_ AdbGetUsbInterfaceDescriptor;
    AdbGetSerialNumber_ AdbGetSerialNumber;
    AdbReadEndpointSync_ AdbReadEndpointSync;
    usb_handle* do_usb_open(const wchar_t* interface_name);
    void usb_cleanup_handle(usb_handle* handle);
    int recognized_device(usb_handle* handle);
    int main()
    {
        int d;
        char getvar[] = "getvar:product";   
        char rebootbl[] = "reboot-bootloader";
        HMODULE a = LoadLibrary(L"AdbWinApi.dll");
        AdbWriteEndpointSync = (AdbWriteEndpointSync_)GetProcAddress(a, "AdbWriteEndpointSync");
        AdbCreateInterfaceByName = (AdbCreateInterfaceByName_)GetProcAddress(a, "AdbCreateInterfaceByName");
        AdbOpenDefaultBulkWriteEndpoint = (AdbOpenDefaultBulkWriteEndpoint_)GetProcAddress(a, "AdbOpenDefaultBulkWriteEndpoint");
        AdbNextInterface = (AdbNextInterface_)GetProcAddress(a, "AdbNextInterface");
        AdbEnumInterfaces = (AdbEnumInterfaces_)GetProcAddress(a, "AdbEnumInterfaces");
        AdbOpenDefaultBulkReadEndpoint = (AdbOpenDefaultBulkReadEndpoint_)GetProcAddress(a, "AdbOpenDefaultBulkReadEndpoint");
        AdbGetInterfaceName = (AdbGetInterfaceName_)GetProcAddress(a, "AdbGetInterfaceName");
        AdbCloseHandle = (AdbCloseHandle_)GetProcAddress(a, "AdbCloseHandle");
        AdbGetUsbDeviceDescriptor = (AdbGetUsbDeviceDescriptor_)GetProcAddress(a, "AdbGetUsbDeviceDescriptor");
        AdbGetUsbInterfaceDescriptor = (AdbGetUsbInterfaceDescriptor_)GetProcAddress(a, "AdbGetUsbInterfaceDescriptor");
        AdbGetSerialNumber = (AdbGetSerialNumber_)GetProcAddress(a, "AdbGetSerialNumber");
        AdbReadEndpointSync = (AdbReadEndpointSync_)GetProcAddress(a, "AdbReadEndpointSync");
        usb_handle* handle = NULL;
        char entry_buffer[2048];
        char interf_name[2048];
        char read[2048];
        int ArgList;
        AdbInterfaceInfo* next_interface = (AdbInterfaceInfo*)(&entry_buffer[0]);
        unsigned long entry_buffer_size = sizeof(entry_buffer);
        char* copy_name;
        static const GUID usb_class_id = ANDROID_USB_CLASS_ID;
        // Enumerate all present and active interfaces.
        ADBAPIHANDLE enum_handle =
            AdbEnumInterfaces(usb_class_id, true, true, true);
        while (AdbNextInterface(enum_handle, next_interface, &entry_buffer_size)) {
            const wchar_t* wchar_name = next_interface->device_name;
            for (copy_name = interf_name;
            L'' != *wchar_name;
                wchar_name++, copy_name++) {
                *copy_name = (char)(*wchar_name);
            }
            *copy_name = '';
            handle = do_usb_open(next_interface->device_name);
            if (recognized_device(handle)) {
                printf("adding a new device %sn", interf_name);
                char serial_number[512];
                unsigned long serial_number_len = sizeof(serial_number);
                if (AdbGetSerialNumber(handle->adb_interface, serial_number, &serial_number_len, true))
                {
                    memset(read, 0, sizeof(read));
                    AdbWriteEndpointSync(handle->adb_write_pipe, getvar, strlen(rebootbl), &d, 0x26c);
                    Sleep(3000);
                    AdbReadEndpointSync(handle->adb_read_pipe, read, 4096, (unsigned long*)&ArgList, 0x26c);
                    read[strlen(read)]='';
                    printf("%s:n",read);
                    memset(read, 0, sizeof(read));
                    AdbWriteEndpointSync(handle->adb_write_pipe, rebootbl, strlen(rebootbl), &d, 0x26c);
                    Sleep(3000);
                    AdbReadEndpointSync(handle->adb_read_pipe, read, 4096, (unsigned long*)&ArgList, 0x26c);
                    read[strlen(read)] = '';
                    printf("%s:n", read);
                }
            }
        }
        //AdbWriteEndpointSync(ret->adb_write_pipe, rebootbl, strlen(rebootbl), &d, 0x26c);
        return 0;
    }
    int recognized_device(usb_handle* handle) {
        if (NULL == handle)
            return 0;
        // Check vendor and product id first
        USB_DEVICE_DESCRIPTOR device_desc;
        if (!AdbGetUsbDeviceDescriptor(handle->adb_interface,
            &device_desc)) {
            return 0;
        }
        // Then check interface properties
        USB_INTERFACE_DESCRIPTOR interf_desc;
        if (!AdbGetUsbInterfaceDescriptor(handle->adb_interface,
            &interf_desc)) {
            return 0;
        }
        // Must have two endpoints
        if (2 != interf_desc.bNumEndpoints) {
            return 0;
        }
        //if (is_adb_interface(device_desc.idVendor, device_desc.idProduct,
        //  interf_desc.bInterfaceClass, interf_desc.bInterfaceSubClass, interf_desc.bInterfaceProtocol)) {
        //  if (interf_desc.bInterfaceProtocol == 0x01) {
        //      AdbEndpointInformation endpoint_info;
        //      // assuming zero is a valid bulk endpoint ID
        //      if (AdbGetEndpointInformation(handle->adb_interface, 0, &endpoint_info)) {
        //          handle->zero_mask = endpoint_info.max_packet_size - 1;
        //      }
        //  }
        return 1;
    }
    void usb_cleanup_handle(usb_handle* handle) {
        if (NULL != handle) {
            if (NULL != handle->interface_name)
                free(handle->interface_name);
            if (NULL != handle->adb_write_pipe)
                AdbCloseHandle(handle->adb_write_pipe);
            if (NULL != handle->adb_read_pipe)
                AdbCloseHandle(handle->adb_read_pipe);
            if (NULL != handle->adb_interface)
                AdbCloseHandle(handle->adb_interface);
            handle->interface_name = NULL;
            handle->adb_write_pipe = NULL;
            handle->adb_read_pipe = NULL;
            handle->adb_interface = NULL;
        }
    }
    usb_handle* do_usb_open(const wchar_t* interface_name) {
        // Allocate our handle
        usb_handle* ret = (usb_handle*)malloc(sizeof(usb_handle));
        if (NULL == ret)
            return NULL;
        // Set linkers back to the handle
        ret->next = ret;
        ret->prev = ret;
        // Create interface.
        ret->adb_interface = AdbCreateInterfaceByName(interface_name);
        //if (NULL == ret->adb_interface) {
        //  free(ret);
        //  errno = GetLastError();
        //  return NULL;
        //}
        // Open read pipe (endpoint)
        ret->adb_read_pipe =
            AdbOpenDefaultBulkReadEndpoint(ret->adb_interface,
                AdbOpenAccessTypeReadWrite,
                AdbOpenSharingModeReadWrite);
        // Open write pipe (endpoint)
        ret->adb_write_pipe =
            AdbOpenDefaultBulkWriteEndpoint(ret->adb_interface,
                AdbOpenAccessTypeReadWrite,
                AdbOpenSharingModeReadWrite);
        // Save interface name
        unsigned long name_len = 0;
        // First get expected name length
        AdbGetInterfaceName(ret->adb_interface,
            NULL,
            &name_len,
            true);
        if (0 != name_len) {
            ret->interface_name = (char*)malloc(name_len);
            if (NULL != ret->interface_name) {
                // Now save the name
                if (AdbGetInterfaceName(ret->adb_interface,
                    ret->interface_name,
                    &name_len,
                    true)) {
                    // We're done at this point
                    return ret;
                }
            }
            else {
                SetLastError(ERROR_OUTOFMEMORY);
            }
        }
        // Something went wrong.
        int saved_errno = GetLastError();
        usb_cleanup_handle(ret);
        free(ret);
        SetLastError(saved_errno);
        return NULL;
    }
**0x07 代码运行结果**
其中 OKAYMSM8916是其CUP型号，为fastboot命令 getvar product的返回，OKAY是reboot-bootloader的返回，并且手机重启进入fastboot模式。说明得到的代码是完全能执行命令的核心API。