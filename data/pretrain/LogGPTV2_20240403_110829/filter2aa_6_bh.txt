现在我们将讨论关于面向对象的约定。
（1）推荐构造函数而不是其他实例创建模式
我建议：
总是使用构造函数。
创建实例时总是使用 new。
这样做的主要优点是：
你的代码可以更好地融入JavaScript主流，且更有可能在框架间互相移植。
在现代引擎中，使用构造函数的实例速度很快（例如，通过隐藏类（http://bit.ly/ 1oOEA1Z））。
在即将到来的ECMAScript 6中，类，将会基于构造函数默认继承构造。
构造函数，使用严格模式很重要，因为这样可以防止你忘记使用new操作符实例化。而且你应该意识到可以在构造函数中返回任何对象。在17.10.5“实现构造函数的小技巧”中介绍了使用构造函数的更多技巧。
（2）避免私有数据使用闭包
如果你希望一个对象的私有数据完全安全，必须使用闭包。否则，你可以使用普通属性。一种常见的做法是给私有属性名称增加下划线前缀。闭包的问题是代码会变得很复杂（除非你把所有的方法放在实例中，但这样既不符合语言习惯，也比较慢）且速度更慢（目前访问闭包中的数据比访问属性更慢）。17.12“保持数据私有性”详细介绍了这一个主题。
（3）即使构造函数没有参数，也要写括号
我发现用括号调用构造函数看起来更清晰：
（4）小心操作符优先级
使用括号，这样两个操作符不会彼此比较——结果不总是你所期望的：
instanceof尤为棘手：
然而，我发现在构造函数后调用方法没有问题：
26.4.4 其他
这部分收集了各种小技巧。
（1）强制转换
通过Boolean、Number、String()或Object()（作为函数使用——绝不要作为构造函数使用）把一个值强制转换为一个类型。理由是这种约定更具描述性：
（2）避免this作为隐式参数
this应该只引用当前方法调用的接收者，它不应该作为隐式参数滥用。理由是这种函数更易于调用和理解。我也喜欢分开使用面向对象和函数式机制：
（3）通过in和hasOwnProperty检查属性是否存在（参见17.5“遍历和检测属性”）
这更加一目了然，且与undefined比较或检测真假相比更安全：
（4）快速处理
如果可以，最好快速处理失败而不是静默失败。JavaScript之所以如此宽容（例如，除以零），是因为ECMAScript的第一版没有异常。例如，不要强制转换值，而应抛出异常。然而，在生产环境中，你应该想办法，让代码从失败中优雅地恢复。
26.5 结论
当你在考虑风格问题时，问问自己：如何让我的代码更易于理解？抵制小聪明的诱惑并把大部分机械的技巧留给JavaScript引擎和压缩工具来处理（参见第32章）。
[1] 有人说它们是同义词，1TBS是K&R的一种开玩笑的说法。
第27章 调试的语言机制
下面三个语句有助于调试。显然应该辅以合适的调试器。
调试器声明的行为类似于设置断点并启动调试器。
console.log(x)把x的值输出到JavaScript引擎的控制台。
console.trace()把堆栈跟踪信息打印到引擎的控制台。
控制台API提供了更多的调试帮助，并详细记录在23.5“Console API”中。异常处理在第14章阐述。
第28章 子类化内置构造函数
JavaScript的内置构造函数比较难扩展。本章解释了原因以及给出了一些解决方案。
28.1 术语
使用“子类化内置构造函数（subclass a built-in）”，而避免采用“扩展（extend）”，是因为extend已经被占用了。
（1）子类化内置实例A
由给出的内置构造函数A生成一个子构造函数B，B的实例同样也是A的实例。
（2）扩展对象obj
将一个对象的属性复制给另一个对象。Underscore.js沿用这个在Prototype框架中建立的习惯术语。
子类化一个内置对象有两个障碍：一是具有内部属性的实例，二是构造函数不能作为一个函数被调用。
28.2 障碍1：具有内部属性的实例
大多数内置构造函数都有所谓的内部属性（见17.1.1“属性的种类”），内部属性的名字都写在双方括号内，例如[[PrimitiveValue]]。内部属性由JavaScript引擎操作，通常不能在JavaScript中直接访问。在JavaScript中常用的子类化技术是在子类构造函数中调用超类构造函数，且作用域中this指向子类自身（见17.13“第4层：构造函数之间的继承”）。
对于大多数内置构造函数，通过代码（2）中的this传入的子类会被忽略。这是下一节会讲到的障碍。此外，代码（1）给现有的实例添加内部属性通常是办不到的，因为新增的属性很可能从根本上改掉实例自身的功能。因此，代码（2）中的call并不能用于添加内部属性。以下几种构造函数都具有存在内部属性的实例。
封装构造函数
Boolean、Number和String实例都封装了原始值。它们都有内部属性[[PrimitiveValue]]，这个属性的值可通过valueOf()函数返回；String还有两个额外的实例属性。
Boolean：有内部属性[[PrimitiveValue]]。
Number：有内部属性[[PrimitiveValue]]。
String：有内部属性[[PrimitiveValue]]，还有自定义的内部实例方法[[GetOwnProperty]]和正常的实例属性长度 length。[[GetOwnProperty]]方法读取封装的字符串，传入数组索引，可以获取对应的字符。
数组
自定义内部实例的方法[[DefineOwnProperty]]可以拦截即将被设置的属性。这样可以确保当新的数组元素被添加或者多余的元素被删除时，length属性可以及时更新。
日期
内部属性[[PrimitiveValue]]存储了日期实例的时间（从1970年1月1日00:00:00开始到目前的毫秒数）。
函数
有内部实例属性[[call]]（当实例被调用时执行的代码），可能还有其他的内部属性。
正则表达式
有内部实例属性[[Match]]，还有两个非内部的实例属性。引用自ECMAScript规范：
内部属性[[Match]]的值表示一个依赖实现的RegExp对象的模式。
没有内部属性的内置构造函数只有Error和Object。
28.2.1 障碍1的解决方法
MyArray是Array的子类。它有一个获取size属性的方法。size返回的是数组真实元素的个数，不包含空值（length属性会把空值计算在内）。实现MyArray的窍门是新建一个数组实例，然后复制MyArray的方法到这个实例。
上面的代码使用了帮助函数copyOwnPropertiesFrom()，该函数在17.8.4“复制对象”中将有解释与说明。
代码（1）中没有调用Array构造函数，是因为一个怪异的现象：如果调用时只传入一个数字参数，该数字不会成为数组的元素，而是声明当前空数组的大小（见18.2.1小节的“用元素初始化一个数组（避免使用!）”）。
下面是代码执行例子：
28.2.2 注意
直接复制方法到实例中，会导致代码冗余。这可以通过将方法添加到原型链中来避免（如果我们能够使用）。此外，MyArray生成的对象并非是它的实例：
28.3 障碍2：内置的构造函数不能作为方法调用
尽管Error和子类没有带内部属性的实例，你仍然不能轻易地新建子类，因为子类化的标准模式行不通（之前已经提到过）：
问题是，即使如代码（1）所示调用Error，也总是会产生一个新的实例。也就是说,它忽略了call方法调用时的传参this：
在前面的代码执行中，Error返回一个带有自身属性的实例，但这是一个新的实例，而非e。子类化模式只有Error将自身的属性添加到this（即前面示例中的e）了，才是有效果的。
障碍2的解决方案
在子类构造函数中，新建一个超类实例，并且将超类实例的属性复制到子类实例中：
帮助函数copyOwnPropertiesFrom()的实现见17.8.4“复制对象”。试验一下MyError：
下面是在Node.js中运行的输出：
instanceof的运行结果也是对的：
28.4 另一种解决方案：委托
委托是一种非常好的子类化的替代方案。例如，重写一个数组构造函数，将真实数组保存到一个属性中：
明显的缺陷就是不能够通过中括号语法去访问MyArray的元素，必须使用以下方法获取和设置元素值：
Array.prototype常规的方法可以通过以下元程序代码来实现：
通过调用this.array原生的Array方法来派生MyArray方法。
使用MyArray：
第29章 JSDoc：生成API文档
这是一种常见的开发问题：如果你编写的JavaScript代码会被其他人使用，就需要为它的API编写一个直观的HTML文档。JSDoc（http://usejsdoc.org）是生成JavaScript API文档的标准工具。[1]它类似Java的文档生成工具JavaDoc。
JSDoc是通过以“/***/”（普通的块级注释以一个 * 开头）注释的内容读取JavaScript代码并且生成HTML文档。比如下面的代码：
在浏览器中生成的HTML文档如图29.1所示。
图29.1 JSDoc生成的HTML文档
JSDoc网站上的Readme（http://usejsdoc.org/about-jsdoc3.html）介绍了如何安装和使用该工具。
29.1 JSDoc基础
JSDoc全都是记录文档实体（实体包括函数、方法、构造函数等），是通过处理实体代码片段前的以“/＊＊”开始的注释完成的。
29.1.1 语法
让我们回顾一下之前的代码注释：
这条注释展示了JSDoc的一些语法，包括以下几个部分。
（1）JSDoc注释
JavaScript注释是以“*”开头的。JSDoc注释容易给人造成这样的错觉，认为JavaScript注释是以“/＊＊”作为起始标志。
（2）标签
JSDoc中的标签是@符号后跟关键词组成。标签位于每一行注释的开头。例如前面代码中的“@param”。
（3）HTML
开发者可以在JSDoc注释中自由地使用HTML。例如，tt标签表示使用monospaced 字体。
（4）类型注释
你可以通过花括号来定义一个实体的类型。变量包括如下类型。
单类型：@param {string} name
多类型：@param {string|number} idCode
数组类型：@param {string[]} names
（5）命名路径
在JSDoc注释中，所谓的命名路径是用于说明实体。命名路径的语法如下：
类通常就是构造函数，构造函数的属性属于静态成员。JSDoc对于实例成员的定义相对宽泛些，它指的是可以通过实例访问的所有内容。因此，实例成员包括实例自身的属性和通过原型继承获得的属性。
29.1.2 命名类型
实体类型要么是基础类型要么是自定义类。前者通常以小写字母开头，后者通常以大写字母开头。换句话说，基础类型包含布尔、数值和字符串类型，正如type of所返回的结果。这样就不会将strings（基础类型）同构造函数的实例String（对象）相混淆。
29.2 基础的标签
以下是基础的元数据标签。
@fileOverview 描述：标志这段JSDoc注释是用来描述整篇文档的。例如：
@author：指的是代码的作者。
@deprecated：说明对应的内容已经被废弃。文档中应该写明废弃后的替换方案。
@example：使用示例。
JSDoc中链接基本标签如下。
@see：链接到相关资源。
{@link ...}：作用类似于@see，但是需要用于其他标签内部。
@requires资源描述：指的是文档所依赖的资源。资源描述可以是一个命名路径，也可以是描述语句。
版本控制相关的标签有以下几种。
@version 版本号：注明所记录的实体的版本号。例如：
@since 版本号：注明记录的实体从哪个版本开始产生。例如：
29.3 文档记录函数和方法
对于函数和方法，可以记录参数、返回值以及可能会抛出的异常。
@param {paramType} paramName`` description：paramName是参数名称。参数类型和描述可选。示例如下：
高级特征：
可选参数
带默认值的可选参数
@returns {returnType} description：描述一个函数或方法的返回值，类型和描述都可以忽略不填。
@throws {exceptionType} description：描述函数或方法在执行的过程中可能会抛出的异常，类型和描述都可以忽略。
29.4 行内类型信息（“行内文档注释”）
有两种说明参数和返回值类型的方式。第一种是在@param和@returns中添加注释：
第二种是在行内添加类型说明信息：
29.5 文档记录变量、参数和实例属性
以下标签都是用于文档变量、参数以及实例属性：
@type {typeName}
变量都有哪些类型呢？例如：
@type标签同样能够记录函数的返回类型，但是在这个例子中，用@returns更加合适。
@constant：标记该记录的变量是个常量。
@property {propType} propKey description：在构造函数的注释中记录实例的属性。例如：
或者，实例属性还可以记录如下：
具体采用哪种风格类型取决于个人习惯。
@default defaultValue：一个参数或者实例属性的默认值是什么？如下所示：
29.6 文档记录类
JSDoc是将类和构造函数区别开来的。类的概念更像是一个类型，而构造函数是一种实现类的方式。因为JavaScript内置定义类的方法有限，所以产生了很多API，用于实现类。这些API各不相同，所以需要开发者通过JSDoc说明它们各自是如何工作的。下列标签能够做到这点：
@constructor：将一个函数标记为构造函数。
@class：将一个变量或者一个函数标记为类。在后面的例子中，@class等同于@constructor。
@constructs：记录创建实例数据的方法。如果该方法存在，类的文档从这开始记录。
@lends namePath：指出接下来的对象字面量是贡献给哪个类使用的。存在两种不同方式。
@lends Person#：对象字面量为Person类贡献实例成员。
@lends Person：对象字面量为Person类贡献静态成员。
@memberof parentNamePath：所记录的实体是指定对象中的一员。@lends MyClass＃应用于一个对象字面量，和通过@memberof MyClass＃标记该对象每个属性具有相同的效果。