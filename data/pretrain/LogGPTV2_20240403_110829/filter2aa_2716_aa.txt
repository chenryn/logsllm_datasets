Biting the Hand That Feeds You 
2007 
Biting the Hand That Feeds You 
1 
Biting the Hand That Feeds You 
Storing and Serving Malicious Content from Well Known Web Servers 
Billy K Rios – Senior Researcher 
Nathan Mcfeters – Senior Researcher 
Kicking Down the Cross Domain Door 
ii 
Intended Audience 
This paper assumes the reader has a solid understanding of web application security 
principles, Cross Site Request Forgery, and web browser security mechanisms.   
Contributing Authors 
Version 1.0  
Billy Kim Rios – Senior Researcher – VeriSign Inc, Seattle 
Nathan Mcfeters – Senior Researcher – Advanced Security Center, Houston 
Kicking Down the Cross Domain Door 
iii 
Table of Contents 
INTENDED AUDIENCE............................................................................................................................ II 
CONTRIBUTING AUTHORS................................................................................................................... II 
CHAPTER 1 – WHO DO YOU TRUST? .................................................................................................. 4 
1. OVERVIEW .............................................................................................................................................. 4 
2. BROWSER/APPLICATION SECURITY MEASURES...................................................................................... 4 
3. A NEW TWIST ON CROSS SITE REQUEST FORGERY................................................................................. 5 
CHAPTER 2 – BITING THE HAND - YAHOO....................................................................................... 7 
1. CREATING AN ACCOUNT......................................................................................................................... 7 
2. UPLOADING CONTENT ............................................................................................................................ 7 
3. BYPASSING MISCELLANEOUS PROTECTION MEASURES.......................................................................... 8 
4. SENDING MALICIOUS CONTENT TO THE VICTIM ................................................................................... 10 
CHAPTER 3 – BITING THE HAND – GMAIL ..................................................................................... 13 
1. CREATING AN ACCOUNT....................................................................................................................... 13 
2. UPLOADING CONTENT .......................................................................................................................... 13 
3. BYPASSING MISCELLANEOUS PROTECTION MEASURES........................................................................ 15 
4. SENDING MALICIOUS CONTENT TO THE VICTIM ................................................................................... 15 
CHAPTER 4 – FLASH BASED ATTACK .............................................................................................. 17 
1. OVERVIEW ............................................................................................................................................ 17 
2. FORCING OWNERSHIP OF THE CROSSDOMAIN.XML FILE....................................................................... 17 
CHAPTER 5 – CONCLUSION................................................................................................................. 19 
REFERENCES ........................................................................................................................................... 20 
APPENDIX A – BITING YAHOO HTML – FIREFOX ........................................................................ 21 
APPENDIX B – BITING GMAIL HTML – FIREFOX.......................................................................... 23 
Biting the Hand That Feeds You 
2007 
Biting the Hand That Feeds You 
4 
Chapter 1 – Who do you Trust? 
1. Overview 
Trust on the World Wide Web (WWW) is difficult at best.  On one hand, the value of the 
WWW stems from the fact that resources and content can be hosted by anyone and 
received by anyone.  This “feature” also makes the WWW a dangerous place, 
considering malicious content can be hosted by anyone and served to anyone.  With this 
in mind, we must establish some criteria to determine who we should trust… and who we 
shouldn’t trust. 
Although several different methods exist, most users of the WWW base their trust 
decisions on a single item… a domain name.  For example, users may be hesitant to 
download an update for XYZ software from www.hacker.com, but they may be more 
receptive to downloading and executing the same content if it comes from www.xyz.com.  
Shady individuals and groups have taken advantage of this trust in domain names by 
using variations on domain names to facilitate phishing and other types of attacks.  These 
shady individuals understand the power of a trustworthy name and use various “tricks” to 
fool users into believing that the attacker controlled content, is actually coming from a 
trusted place.  In order to combat these types of attacks, developers have implemented 
browser and application security measures to help users determine whether they should 
trust the content they are receiving from the WWW.  A small number of these protections 
are described in the next section. 
2. Browser/Application Security Measures 
Many of the protections offered by the various browsers and applications are based 
primarily on the domain name serving the content.  A brief description of various domain 
name level protections is discussed below.   
SSL Certificates – SSL certificates can have domain names specified.  If the domain 
serving the content doesn’t match the domain name contained on the SSL certificate a 
“Domain Name Mismatch” error is thrown. 
Same Origin Policy – The philosophy of the same origin policy is simple: it is not safe to 
trust content loaded from any websites. As semi-trusted scripts are run within the 
sandbox, they should only be allowed to access resources from the same website, but not 
resources from other websites, which could be malicious.  The term "origin" is defined 
using the domain name, protocol and port. Two pages belong to the same origin if and 
only if these three values are the same.  -Wikipedia 
Phishing filters – Since phishing is based on impersonation, preventing it depends on 
Biting the Hand That Feeds You 
2007 
Biting the Hand That Feeds You 
5 
users having some reliable way to identify the sites they are dealing with. For example, 
some anti-phishing toolbars display the real domain name for the visited website.  -
Wikipedia 
Most of these protections help the user determine whether the domain name they are 
receiving content from is really the domain name they believe it to be.  For example, it 
may be difficult for a human user to distinguish the difference between www.trust3d.com 
and www.trusted.com, but the SSL certificates checks, same origin policy, and phishing 
filters are not so easily fooled….  but what happens when attacker controlled content 
actually comes from a domain name we typically trust?   
3. A New Twist on Cross Site Request Forgery 
Typically, Cross Site Request Forgery (CSRF) takes advantage of a pre-existing session 
to execute some functionality on behalf of an unsuspecting user.  An example of how 
attackers typically take advantage of CSRF vulnerabilities is presented below in a simple 
example. 
The attacker (Billy) decides to transfer $1 to his friends (Raghav) checking 
account using www.BigCreditUnion.com.  Billy logs all of the HTTP requests 
and responses made from his computer and notices that when he requests a 
transfer of $1 from his account to Raghav’s account the following HTTP GET 
request is made: 
GET /transfer.do?toacct=RAGHAV&amount=1   HTTP/1.1 
… … … … 
Cookie: MYCOOKIE=AWSWADJ1LE3UQHJ3AJUAJ5Q5U 
Host: www.BigCreditUnion.com 
The web application does a great job of tying the users’ session to the appropriate 
account and subtracts the $1 from Billy’s account and adds $1 to Raghav’s 
account.  Being an enterprising hacker, Billy understands that this scenario is ripe 
for XSRF and embeds the following HTML tag into his website: 
Now, whenever a victim with an established session with BigCreditUnion.com 
visits Billy’s website, $10000 will be transferred out of the victims’ account and 
placed into Billy’s account. 
Various web applications are taking measures to protect themselves (albeit slowly) to 
Biting the Hand That Feeds You 
2007 
Biting the Hand That Feeds You 
6 
various Cross Site Request Forgery (CSRF) vulnerabilities.  One piece of functionality 
that seems to be consistently overlooked when it comes to CSRF, is the login 
functionality.  As previously demonstrated in “Kicking Down the Cross Domain Door” 
(and other documents) it is possible to use CSRF to attack unprotected login 
functionality, forcing the user to establish an active session with a web server.  In the 
example presented in Kicking down the Cross Domain Door, the attacker brute forces the 
login credentials to a HTTP network management console located on a corporation’s 
internal network.  The attack demonstrated in Kicking Down the Cross Domain Door 
cycled through a number of username and password combinations, until a legitimate 
username and password combination was verified through an authenticated only Cross 
Site Scripting exposure.   
In the examples presented below, we will use the same techniques, with a twist.  We 
focus out attention on web mail servers available via the WWW.  The foundation of these 
attacks is based on the fact that we can replay the exact POST parameters needed to 
establish an authenticated session.  Since a valid set of credentials can be easily obtained, 
we simply use CSRF to force our victim’s browser to establish an authenticated session 
with the affected web mail server.  Since most web servers allow for authenticated users 
to attach and download files, we will abuse this functionality to serve malicious files and 
content.  Normally, serving a file from a web server isn’t an issue, in this case however; 
the danger arises when the web mail servers serve the content from their domain name, 
essentially taking ownership of the contents of the file.  
Although the examples presented below target two popular web servers, these concepts 
can be applied to any web application that allows for the storage and retrieval of content 
and files.  The examples presented below do have various issues, making them somewhat 
limited in their capabilities.  The most obvious issue with these attacks involves that 
passing of credentials for the account used to force the authenticated session.  This is 
somewhat mitigated by the fact that most of these services allow for the mostly 
anonymous registration of accounts and can be used as one-time, “throw away” account.   
Biting the Hand That Feeds You 
2007 
Biting the Hand That Feeds You 
7 
Chapter 2  – Biting the Hand - Yahoo 
1. Creating an Account 
Creating an account on Yahoo is fairly straight forward; you fill out the required 
information, choose a strong password, and off you go!  Like other web mail providers, 
the account creation process is easily fooled and “throw away” accounts are easily 
created. 
2. Uploading Content 
Once the throw away account is created, we can log into Yahoo mail using the newly 
created account.  We capture the exact POST request made when we login to the server.  
Once we are logged in, we can upload file to our email account.  The file upload process 
is straightforward and the screenshot below shows that PwDump.exe has been uploaded 
to the email server.  
Biting the Hand That Feeds You 
2007 
Biting the Hand That Feeds You 
8 
Once the file has been uploaded, we send the message to ourselves (to the throw away 
account we created).  Once we have received the email with the attachment, we can view 
the email message containing the file.  The email message has a button that is used to 
download the file from the web server.  When the button is depressed, a HTTP GET 
request is made to the web server.  The web server validates the session and serves the 
appropriate file.  The exact HTTP GET request sent when the download attachment 
button is pressed should be noted for future use.  The screenshot below shows the button 
used to download the attachment.   
3. Bypassing Miscellaneous Protection Measures 
The creators of Yahoo mail probably understood some of the dangers associated with 
serving attacker controlled content from their domains.  When uploaded files are served 
from the email service, they are served from the “attach.re3.mail.yahoo.com” domain.  
This domain is different than the one where mail is served from (in this example, 
us.f574.mail.yahoo.com).  The screenshot below shows how content is normally served 
by the Yahoo mail server. 
Biting the Hand That Feeds You 
2007 
Biting the Hand That Feeds You 
9 
From an attacker standpoint, it may be beneficial to serve content from the same domain 
that the user’s mail is served from.  The screenshot below shows the HTTP GET request 
made when the attachment is requested.  If we simply remove the initial portions of the 
request (highlighted in blue in the screenshot below) we can force the content to be 
served from a different domain (us.f574.mail.yahoo.com).  
The screenshot below shows the content being served from the Yahoo mail server, but 
instead of being served from the typical “attach.re3.mail.yahoo.com” domain, we see that 
the file is being served from “us.f574.mail.yahoo.com” 
Biting the Hand That Feeds You 
2007 
Biting the Hand That Feeds You 
10 
If the attacker desires, an additional sub domain can be removed, further shortening the 
domain to “f574.mail.yahoo.com”, which is shown in the screenshot below.  This can 
come in handy in more advanced attacks. 
4. Sending Malicious Content to the Victim 
Now that the exact POST request needed to authenticate to our “throw away” Yahoo 
account and the exact GET request needed to pull our file from the Yahoo server are 
known, we can go about setting up our attack.  The following example shows a simple 
way a phishing attack would be executed. 
Biting the Hand That Feeds You 
2007 
Biting the Hand That Feeds You 
11 
A phishing site indicating that a new update for some software is available.  When the 
user clicks the link to download, the malicious page first submits the credentials to 
authenticate to the throw away Yahoo account.  Once the authentication process is 
completed, the malicious page makes a request for the file stored on the Yahoo server 
using the HTTP GET request obtained earlier.  The screenshot below shows the page as 
the victim might see it. 
As soon as the user visits the page, the attacker controlled content is servered from the 
yahoo domain. 
Biting the Hand That Feeds You 
2007 
Biting the Hand That Feeds You 
12 
A simplified HTML version of this page is provided in the Appendix. 
Biting the Hand That Feeds You 
2007 
Biting the Hand That Feeds You 
13 
Chapter 3 – Biting the Hand – Gmail 
1. Creating an Account 
Once again, creating an account on the web mail server is fairly straight forward.  Once 
the proper pieces of information are filled out, the server creates the account.  Once 
again, the account creation process is easily fooled and one-time, “throw away” accounts 
are easily created. 
2. Uploading Content 
Once we’ve created our account, we use the account to log into Gmail.  We make note of 
the exact POST request used to authenticate to the server.  Once we’re logged in, its time 
to upload the content.  Uploading content is straightforward using the “Attach file” 
functionality.  Once the attach file functionality is selected, we simple select the file for 
upload using the intuitive user menus.  In this example, we choose to upload cmd.exe 
from our local file system.  The screenshot below shows cmd.exe on our local file 
system. 