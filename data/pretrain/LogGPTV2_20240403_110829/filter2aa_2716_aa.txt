# Biting the Hand That Feeds You
## 2007

### Abstract
This paper explores the vulnerabilities associated with storing and serving malicious content from well-known web servers. The authors, Billy K Rios and Nathan McFeters, present a detailed analysis of how attackers can exploit trust in domain names to serve malicious content, focusing on popular webmail services like Yahoo and Gmail. The paper is intended for readers with a solid understanding of web application security, Cross-Site Request Forgery (CSRF), and web browser security mechanisms.

### Table of Contents
1. **Intended Audience**
2. **Contributing Authors**
3. **Chapter 1: Who Do You Trust?**
   - 1. Overview
   - 2. Browser/Application Security Measures
   - 3. A New Twist on Cross Site Request Forgery
4. **Chapter 2: Biting the Hand - Yahoo**
   - 1. Creating an Account
   - 2. Uploading Content
   - 3. Bypassing Miscellaneous Protection Measures
   - 4. Sending Malicious Content to the Victim
5. **Chapter 3: Biting the Hand - Gmail**
   - 1. Creating an Account
   - 2. Uploading Content
   - 3. Bypassing Miscellaneous Protection Measures
   - 4. Sending Malicious Content to the Victim
6. **Chapter 4: Flash-Based Attack**
   - 1. Overview
   - 2. Forcing Ownership of the Crossdomain.xml File
7. **Chapter 5: Conclusion**
8. **References**
9. **Appendix A: Biting Yahoo HTML - Firefox**
10. **Appendix B: Biting Gmail HTML - Firefox**

### Intended Audience
This paper assumes the reader has a solid understanding of web application security principles, Cross-Site Request Forgery (CSRF), and web browser security mechanisms.

### Contributing Authors
- **Billy Kim Rios** - Senior Researcher, VeriSign Inc., Seattle
- **Nathan McFeters** - Senior Researcher, Advanced Security Center, Houston

## Chapter 1: Who Do You Trust?

### 1. Overview
Trust on the World Wide Web (WWW) is inherently challenging. The value of the WWW lies in its ability to host and distribute content globally, but this same feature makes it a potential source of malicious content. Users often base their trust decisions on domain names, assuming that content from a trusted domain is safe. However, attackers exploit this trust by using variations on domain names to facilitate phishing and other attacks. To combat these threats, developers have implemented various browser and application security measures, which are discussed in the next section.

### 2. Browser/Application Security Measures
Many browser and application protections rely on the domain name serving the content. Key security measures include:

- **SSL Certificates**: SSL certificates specify domain names. If the domain serving the content does not match the domain name on the SSL certificate, a "Domain Name Mismatch" error is generated.
- **Same Origin Policy**: This policy restricts scripts from accessing resources from different origins (domains, protocols, and ports). It ensures that semi-trusted scripts can only access resources from the same website.
- **Phishing Filters**: These filters help users identify the real domain name of the visited website, making it harder for attackers to impersonate trusted sites.

These protections help users verify the authenticity of the domain they are interacting with. However, what happens when attacker-controlled content comes from a typically trusted domain?

### 3. A New Twist on Cross Site Request Forgery
Cross-Site Request Forgery (CSRF) typically exploits pre-existing sessions to execute unauthorized actions. For example, an attacker might use CSRF to transfer money from a victim's account. However, CSRF can also be used to attack login functionality, forcing users to establish an authenticated session with a web server. This can be particularly dangerous when the web server allows authenticated users to upload and download files, as the server effectively takes ownership of the file content.

## Chapter 2: Biting the Hand - Yahoo

### 1. Creating an Account
Creating a Yahoo account is straightforward, requiring basic information and a password. Throwaway accounts can be easily created, allowing for anonymous registration.

### 2. Uploading Content
After creating the throwaway account, log into Yahoo mail and capture the POST request made during login. Upload a file, such as PwDump.exe, to the email account and send it to yourself. Note the HTTP GET request made when downloading the attachment.

### 3. Bypassing Miscellaneous Protection Measures
Yahoo mail serves uploaded files from a different domain (e.g., attach.re3.mail.yahoo.com) to mitigate some risks. However, by manipulating the HTTP GET request, an attacker can force the content to be served from the main mail domain (e.g., us.f574.mail.yahoo.com), enhancing the attack's effectiveness.

### 4. Sending Malicious Content to the Victim
With the exact POST and GET requests known, set up a phishing site. When the user clicks to download an update, the page first authenticates to the throwaway Yahoo account and then retrieves the malicious file from the Yahoo server, serving it from the trusted domain.

## Chapter 3: Biting the Hand - Gmail

### 1. Creating an Account
Creating a Gmail account is also straightforward, and throwaway accounts can be easily created.

### 2. Uploading Content
Log into Gmail with the throwaway account and note the POST request used for authentication. Use the "Attach file" functionality to upload a file, such as cmd.exe, from your local system.

### 3. Bypassing Miscellaneous Protection Measures
Similar to Yahoo, Gmail may serve uploaded files from a different domain. By manipulating the HTTP GET request, an attacker can force the content to be served from the main Gmail domain, increasing the attack's credibility.

### 4. Sending Malicious Content to the Victim
Set up a phishing site that, when accessed, authenticates to the throwaway Gmail account and retrieves the malicious file from the Gmail server, serving it from the trusted domain.

## Chapter 4: Flash-Based Attack

### 1. Overview
Flash-based attacks can also exploit trust in domain names. By forcing ownership of the crossdomain.xml file, attackers can control the content served from the domain.

### 2. Forcing Ownership of the Crossdomain.xml File
By manipulating the crossdomain.xml file, an attacker can gain control over the content served from the domain, allowing for the execution of malicious scripts.

## Chapter 5: Conclusion
This paper highlights the dangers of trusting domain names and the importance of robust security measures. Developers must remain vigilant and continuously improve security mechanisms to protect against evolving threats.

## References
[Include relevant references here]

## Appendix A: Biting Yahoo HTML - Firefox
[Include HTML code for the Yahoo attack]

## Appendix B: Biting Gmail HTML - Firefox
[Include HTML code for the Gmail attack]