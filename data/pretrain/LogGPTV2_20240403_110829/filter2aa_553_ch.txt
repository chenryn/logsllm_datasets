const char ar1[] = "Something is pointing at me.";
以上两个声明表明，pt1和ar1都是该字符串的地址。在这两种情况下，
带双引号的字符串本身决定了预留给字符串的存储空间。尽管如此，这两种
形式并不完全相同。
3.数组和指针
数组形式和指针形式有何不同？以上面的声明为例，数组形式（ar1[]）
在计算机的内存中分配为一个内含29个元素的数组（每个元素对应一个字
符，还加上一个末尾的空字符'\0'），每个元素被初始化为字符串字面量对
应的字符。通常，字符串都作为可执行文件的一部分储存在数据段中。当把
程序载入内存时，也载入了程序中的字符串。字符串储存在静态存储区
（static memory）中。但是，程序在开始运行时才会为该数组分配内存。此
743
时，才将字符串拷贝到数组中（第 12 章将详细讲解）。注意，此时字符串
有两个副本。一个是在静态内存中的字符串字面量，另一个是储存在ar1数
组中的字符串。
此后，编译器便把数组名ar1识别为该数组首元素地址（&ar1[0]）的别
名。这里关键要理解，在数组形式中，ar1是地址常量。不能更改ar1，如果
改变了ar1，则意味着改变了数组的存储位置（即地址）。可以进行类似
ar1+1这样的操作，标识数组的下一个元素。但是不允许进行++ar1这样的操
作。递增运算符只能用于变量名前（或概括地说，只能用于可修改的左
值），不能用于常量。
指针形式（*pt1）也使得编译器为字符串在静态存储区预留29个元素的
空间。另外，一旦开始执行程序，它会为指针变量pt1留出一个储存位置，
并把字符串的地址储存在指针变量中。该变量最初指向该字符串的首字符，
但是它的值可以改变。因此，可以使用递增运算符。例如，++pt1将指向第
2 个字符（o）。
字符串字面量被视为const数据。由于pt1指向这个const数据，所以应该
把pt1声明为指向const数据的指针。这意味着不能用pt1改变它所指向的数
据，但是仍然可以改变pt1的值（即，pt1指向的位置）。如果把一个字符串
字面量拷贝给一个数组，就可以随意改变数据，除非把数组声明为const。
总之，初始化数组把静态存储区的字符串拷贝到数组中，而初始化指针
只把字符串的地址拷贝给指针。程序清单11.3演示了这一点。
程序清单11.3 addresses.c程序
// addresses.c -- 字符串的地址
#define MSG "I'm special"
#include 
int main()
744
{
char ar[] = MSG;
const char *pt = MSG;
printf("address of \"I'm special\": %p \n", "I'm special");
printf("         address ar: %p\n", ar);
printf("         address pt: %p\n", pt);
printf("       address of MSG: %p\n", MSG);
printf("address of \"I'm special\": %p \n", "I'm special");
return 0;
}
下面是在我们的系统中运行该程序后的输出：
address of "I'm special": 0x100000f10
address ar: 0x7fff5fbff858
address pt: 0x100000f10
address of MSG: 0x100000f10
address of "I'm special": 0x100000f10
该程序的输出说明了什么？第一，pt和MSG的地址相同，而ar的地址不
同，这与我们前面讨论的内容一致。第二，虽然字符串字面量"I'm
special"在程序的两个 printf()函数中出现了两次，但是编译器只使用了一个
存储位置，而且与MSG的地址相同。编译器可以把多次使用的相同字面量
745
储存在一处或多处。另一个编译器可能在不同的位置储存3个"I'm special"。
第三，静态数据使用的内存与ar使用的动态内存不同。不仅值不同，特定编
译器甚至使用不同的位数表示两种内存。
数组和指针表示字符串的区别是否很重要？通常不太重要，但是这取决
于想用程序做什么。我们来进一步讨论这个主题。
4.数组和指针的区别
初始化字符数组来储存字符串和初始化指针来指向字符串有何区别
（“指向字符串”的意思是指向字符串的首字符）？例如，假设有下面两个声
明：
char heart[] = "I love Tillie!";
const char *head = "I love Millie!";
两者主要的区别是：数组名heart是常量，而指针名head是变量。那么，
实际使用有什么区别？
首先，两者都可以使用数组表示法：
for (i = 0; i 
#define SLEN 40
#define LIM 5
749
int main(void)
{
const char *mytalents[LIM] = {
"Adding numbers swiftly",
"Multiplying accurately", "Stashing data",
"Following instructions to the letter",
"Understanding the C language"
};
char yourtalents[LIM][SLEN] = {
"Walking in a straight line",
"Sleeping", "Watching television",
"Mailing letters", "Reading email"
};
int i;
puts("Let's compare talents.");
printf("%-36s  %-25s\n", "My Talents", "Your Talents");
for (i = 0; i 
int main(void)
{
const char * mesg = "Don't be a fool!";
const char * copy;
copy = mesg;
printf("%s\n", copy);
printf("mesg = %s; &mesg = %p; value = %p\n", mesg, 
&mesg, mesg);
printf("copy = %s; &copy = %p; value = %p\n", copy, 
&copy, copy);
return 0;
754
}
注意
如果编译器不识别%p，用%u或%lu代替%p。
你可能认为该程序拷贝了字符串"Don't be a fool!"，程序的输出似乎也验
证了你的猜测：
Don't be a fool!
mesg = Don't be a fool!; &mesg = 0x0012ff48; value = 
0x0040a000
copy = Don't be a fool!; &copy = 0x0012ff44; value = 
0x0040a000
我们来仔细分析最后两个printf()的输出。首先第1项，mesg和copy都以
字符串形式输出（%s转换说明）。这里没问题，两个字符串都是"Don't be a
fool!"。
接着第2项，打印两个指针的地址。如上输出所示，指针mesg和copy分
别储存在地址为0x0012ff48和0x0012ff44的内存中。
注意最后一项，显示两个指针的值。所谓指针的值就是它储存的地址。
mesg 和 copy 的值都是0x0040a000，说明它们都指向的同一个位置。因此，
程序并未拷贝字符串。语句copy = mesg;把mesg的值赋给copy，即让copy也指
向mesg指向的字符串。
为什么要这样做？为何不拷贝整个字符串？假设数组有50个元素，考虑