tectable difference. However, they serve as a guideline for finding
new XS-Leaks (see Table 1).
2.4 Real-world Inclusion Methods
In all XS-Leak attacks, the attacker’s web page uses cross-origin
inclusion methods to force the victim’s browser in requesting the
state-dependent resource. In theory, the SOP should prevent cross-
origin information leakage, but this separation of web origins is not
perfect and exceptions must be made; cf. Schwenk et al. [46] for a
Session 6B: Web Vulnerabilities CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1774partial analysis. In the following, we discuss four different groups
of inclusion methods:
HTML Elements. HTML offers a variety of elements that en-
able cross-origin resource inclusion. Elements like stylesheets, im-
ages, or scripts, force the victim’s browser to request a specified
non-HTML resource. A list that enumerates possible HTML ele-
ments for this purpose is available online [21].
Frames. Elements such as iframe, object, and embed may embed
further HTML resources directly into the attacker page. If the page
does not use framing protection, JavaScript code can access the
framed resource’s window object via the contentWindow property.
Pop-ups. The window.open method loads a resource in a new
browser tab or window. The method returns a window handle that
JavaScript code can use to access methods and properties, which
comply with the SOP. These so-called pop-ups are often used in
single sign-on. Modern browsers only allow pop-ups if they are
triggered by certain user interactions [43]. For XS-Leak attacks,
this method is especially helpful because it bypasses framing and
cookie restrictions for a target resource. Newer browser versions
recently added means to isolate window handles, as described in
Section 7.
JavaScript Requests. JavaScript allows sending requests to tar-
get resources directly. There are two different ways for this purpose:
XMLHttpRequests and its successor Fetch API [40]. In contrast to
previous inclusion methods, an attacker has fine-grained control
over the issued request, for example, whether an HTTP redirect
must be automatically followed.
2.5 Real-world Leak Techniques
An attacker can observe various types of information from cross-
origin resources. As it is not possible to directly access the response
of a cross-origin request, an XS-Leak attacker relies on side effects
that are caused by the included resource. We found that the tech-
niques used to detect these side effects can ultimately be ascribed to
a set of core problems. By analyzing the existing and new XS-Leaks
we identified six groups:
Event Handler. Event handler can be seen as the classical leak
technique for XS-Leaks. They are a well-known source of various
pieces of information. For example, the trigger of onload indicates
a successful resource loading in contrast to the onerror event.
Error Messages. Beyond event handlers, error messages can
occur as JavaScript exceptions and special error pages. Error mes-
sages can be thrown in different steps, for example, directly by
the leak technique. The leak technique can either use additional
information directly contained in the error message, or distinguish
between the appearance and absence of an error message.
Global Limits. Every computer has its physical limits, so does
a browser. For example, the amount of available memory limits a
browser’s running tabs. The same holds for other browser limits
that are enforced for the entire browser. If an attacker can determine
when the limit is reached this can be used as a leak technique.
Global State. Browsers have global states that all pages can
interact with. If this interaction is detectable from an attacker’s
website, it can be used as a leak technique. For example, the History
interface allows manipulation of the pages visited in a tab or frame.
This creates a global state because the number of entries allows an
attacker to draw conclusions about cross-origin pages.
Performance API. The Performance API is used to access the
performance information of the current page. Their entries include
detailed network timing data for the document and every resource
loaded by the page. This allows an attacker to draw conclusions
about requested resources. For example, we identified cases where
browsers will not create performance entries for some requests.
Readable Attributes. HTML has several attributes that are
readable cross-origin. This read access can be used as a leak tech-
nique. For example, JavaScript code can read the number of frames
included in a webpage cross-origin with the window.frame.length
property.
3 XSINATOR: AUTOMATIC BROWSER
EVALUATION
One of this paper’s main contributions is to evaluate the impact
of XS-Leak attacks on different web browsers 𝑤 ∈ 𝑊 . We system-
atically extend the work of Sudhodanan et al. [51] by including
a broad set of relevant browsers, both desktop and mobile, and
extending the set of XS-Leak attacks significantly.
3.1 Implementation
Based on our formal description in Section 2, we evaluate all inclu-
sion methods and leak techniques for a large set 𝑊 of web browsers.
For that, we built a web application named XSinator that consists
of three main components:
(1) A testing site that acts as an XS-Leak attacker page. It im-
plements known and novel XS-Leaks and evaluates them by
running all of them with a single click.
(2) A vulnerable web application, which simulates the behavior
of a state-dependent resource (𝑠𝑑𝑟) for each XS-Leak. This
web application has two states 𝑠0 and 𝑠1, which are triggered
via a parameter in the HTTP requests. The states trigger
different behavior in the 𝑠𝑑𝑟, for instance, in state 𝑠0, the 𝑠𝑑𝑟
has difference 𝑑0 and 𝑑1 in 𝑠1.
(3) A database containing all previous test results. Security re-
searchers can use this database to compare these results with
the actual results of a new browser and track the XS-Leaks’
exploitability over time.
The JavaScript code aims to distinguish states 𝑠0 and 𝑠1 based on
the retrieved side-channel information. In our formal description,
we consider an XS-Leak exploitable (denoted by ○ in Table 2, Table 3,
and Table 4), if there exists a inclusion method 𝑖 and a leak technique
𝑡 in web browser 𝑤 such that 𝑥𝑠𝑙((𝑢𝑟𝑙, 𝑠𝑏, 𝑑𝑏), 𝑖, 𝑡) = 𝑏. Otherwise,
the XS-Leak is not exploitable (denoted by ○␣).
The test results from XSinator allow us to draw the following
conclusion: If a certain XS-Leak is only exploitable in some of the
tested web browsers, then the underlying leak technique could be
fixed and will most probably not break existing web applications.
This allows us to propose realistic countermeasures to known and
novel XS-Leaks in Section 7.
3.2 Evaluation Challenges
The implementation of XSinator was far from being straightforward
and revealed surprising insights.
Session 6B: Web Vulnerabilities CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1775Privileged Events. Some XS-Leaks require specific conditions
or user interaction. For example, the Frame Count Leak, Web Pay-
ment API Leak, and the WebSocket Leak require a reference to an
opened cross-origin window handle. JavaScript code can only create
this handle with privileged events. For instance, a browser is only
allowed to open a pop-up window if the window.open() function
is triggered by human user interaction. XSinator uses the initial
click on the “Run All Tests” button to initialize the environment as
necessary.
Compatibility between Browsers. Since known XS-Leaks are
often specific to one particular browser, we adapted them to be
compatible with as many browsers as possible. If it was not possible
to cover all browsers, XSinator implements variants of the same
leak technique.
Mobile Browsers. The user interfaces of all mobile browsers
restrict the number of visible windows/tabs to one. In all tested
browsers except FF Focus, multiple windows/tabs can be opened
in the background and are executed in parallel. Therefore, the test
suite can be flawlessly executed. In FF Focus XSinator will not
execute the test cases requiring a secondary window correctly due
to the missing functionality. This has a low impact since an attacker
would succumb to the same conditions.
Different Error Types. Many XS-Leaks distinguish between
a successful leak technique’s code execution and code execution
triggering an error. For this reason, XSinator must distinguish if
a triggered error can be interpreted as a XS-Leak test result or a
runtime error. For example, when comparing SA to Chromium-
based browsers, the Web Payment API is implemented differently.
It, therefore, needs custom code adaptation. In contrast, FF does
not implement the Web Payment API at all. Therefore it throws
different errors, which XSinator must correctly interpret to give
accurate results.
3.3 Limitations
XSinator comes with a few limitations and constraints.
No Automatic Detection of New Variants. XSinator is not
designed to find new attack variants and automatically building new
XS-Leaks remains an open problem. Although, as we implemented
leaks that were thought of to be specific to one browser, we often
found that they apply to others browser families as well by changing
the leak technique or inclusion method.
From Browser to Website Evaluation. XSinator is not meant
to be an automatic penetration testing tool. We use XSinator to
systematically evaluate browser implementations against all known
XS-Leaks. Although it cannot automatically detect weaknesses in
real-world websites, developers can run the implemented XS-Leaks
against a specified endpoint.
Excluded XS-Leaks. We had to exclude XS-Leaks that rely on
service workers as they would interfere with other leaks in XSinator.
Furthermore, we chose to exclude XS-Leaks that rely on misconfig-
uration and bugs in a specific web application. For example, Cross-
Origin Resource Sharing (CORS) misconfigurations, postMessage
leakage [19] or Cross-Site Scripting. Additionally, we excluded time-
based XS-Leaks since they often suffer from being slow, noisy and
inaccurate.
4 OVERVIEW OF XS-LEAK ATTACKS
We conducted a comprehensive analysis of known XS-Leaks. In
Table 1, we present our results and show that all of them fit in
our formal model. Each known XS-Leak can be described using
𝑥𝑠𝑙(𝑠𝑑𝑟, 𝑖, 𝑡) with 𝑖 ∈ 𝐼 and 𝑡 ∈ 𝑇 . In total, there are 5 detectable
differences and 34 XS-Leaks, including a contribution of 14 novel
XS-Leaks (+) discussed in Section 5. We use 5 classes of detectable
difference to structure this section, since they provide the basic in-
formation we want to observe through different inclusion methods
and leak techniques based sidechannels.
Full details for the new attacks are provided in Section 5. Details
for other attacks are given in Appendix A.
5 NEW XS-LEAK ATTACKS
Our formal model reveals that every XS-Leak consists of three
main ingredients. To systematically identify novel XS-Leaks, we
henceforth investigated them. First, there are inclusion methods.
The sets of inclusion methods are well-known and mostly static.
Novel XS-Leaks can be especially identified once browser vendors
implement new features that are leak techniques. Second, there are
leak techniques. Novel XS-Leaks are typically found by developing
new leak techniques. In this section, we identified new XS-Leaks
based on this ingredient. Third, there are detectable differences. We
systematically created tests to extend the set of detectable differences
when combined with known leak techniques, which led us to new
XS-Leaks.
5.1 Leak Technique: Global Limits
WebSocket API. With this new technique, it is possible to identify
if, and how many, WebSocket connections a target page uses. It
allows an attacker to detect application states and leak information
tied to the number of WebSocket connections.
Details: The WebSocket API allows the use of streaming connec-
tions between clients and servers using proprietary (e.g., binary)
protocols. The client initiates the WebSocket Handshake using
HTTPS. Upon success, the established TLS connection is used for
tunneling the desired protocol. The specification recommends a lim-
itation of WebSocket connections per client [15]. If one origin uses
the maximum amount of WebSocket connection objects, regardless
of their connections state, the creation of new objects will result in
JavaScript exceptions. To execute this attack, the attacker website
opens the target website in a pop-up or iframe and then attempts to
create the maximum number of WebSockets connections possible.
The number of thrown exceptions is the number of WebSocket
connections used by the target website window.
Example Attack: Slack is a proprietary business communication
platform that offers teams to work together in one workspace. Users
can join one or more workspaces and communicate with other
members in real-time. For this purpose, Slack uses WebSockets. We
found that by detecting this WebSocket connection, it is possible
to leak if a user is a member of a specific workspace.
Payment API. This XS-Leak enables an attacker to detect when
a cross-origin page initiates a payment request.
Details: The Payment Request API enables a website to use the
web browser to conduct payments. The user enters their payment
credentials (e.g., credit card information) into the web browser.
Session 6B: Web Vulnerabilities CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1776Related Work
+ Perf. API Error
+ Style Reload Error
+ Request Merging Error
XS-Leak
Detectable Difference: Status Code
(Section 5.2)
(Section 5.2)
(Section 5.2)
Staicu and Pradel [50],
Sudhodanan et al. [51]
Acar
and
Y. Huang [1]
Event Handler Error
MediaError
Danny
Detectable Difference: Redirects
+ CORS Error
+ Redirect Start
+ Duration Redirect
Fetch Redirect
(Section 5.3)
(Section 5.2)
(Section 5.2)
Janc et al. [30]
URL Max Length
Max Redirect
History Length
CSP Violation
Masas [38, 39]
Herrera [23]
Olejnik et al. [44], Smith
et al. [47], terjanq [54],
Wondracek et al. [75]
Homakov [27], West [63]
CSP Detection
Detectable Difference: API Usage
Homakov [27], West [63]
(Section 5.1)
(Section 5.1)
Karami et al. [32]
+ WebSocket
+ Payment API
Service Worker
Detectable Difference: Page Content
(Section 5.2)
(Section 5.2)
Vela [59]
+ Perf. API Empty Page
+ Perf. API XSS-Auditor
Cache
Frame Count
Media Dimensions
Media Duration
Id Attribute
CSS Property
Detectable Difference: Header
Grossman [18], Masas
[38]
Masas [38]
Masas [38]
Heyes [25]
Evans [13]
+ SRI Error
+ Perf. API Download
+ Perf. API CORP
+ COOP
Perf. API XFO
CSP Directive
CORP
CORB
(Section 5.2)
(Section 5.2)
(Section 5.2)
(Section 5.2)
terjanq [55]
Yoneuchi [76]
Wiki [72]
Wiki [71]
ContentDocument XFO
Sudhodanan et al. [51]
Download Detection
Masas [38]
Leak Technique 𝑡 ∈ 𝑇
A request that results in errors will not create a resource timing entry.
Due to a browser bug, requests that result in errors are loaded twice.
Requests that result in an error can not be merged.
Event handlers attached to HTML tags trigger on specific status codes.
Inclusion Method 𝑖 ∈ 𝐼
HTML Elements, Frames
HTML Elements
HTML Elements
HTML Elements, Frames
In FF, it is possible to accurately leak a cross-origin request’s status code.
HTML Elements (Video, Audio)
In SA CORS error messages leak the full URL of redirects.
Resource timing entry leaks the start time of a redirect.
The duration of timing entries is negative when a redirect occurs.
GC and SA allow to check the response’s type (opaque-redirect) after the redirect
is finished.
Gather the length of a URL that triggers an error on a specific server.
Abuse the redirect limit to detect redirects.
JavaScript code manipulates the browser history and can be accessed by the
length property.
Fetch API
Frames
Fetch API
Fetch API
Fetch API, HTML Elements
Fetch API, Frames
Pop-ups
The attacker sets up a CSP on attacker.com that only allows requests to
target.com. If attacker.com issues a request to target.com that redirects
to another cross-origin domain, the CSP blocks access and creates a violation
report. Target location of the redirect may leak.
Similar to the above leak technique, but the location does not leak.
Fetch API, Frames
Fetch API, Frames
Exhausting the WebSocket connection limit leaks the number of WebSocket
connections of a cross-origin page.
Detect Payment Request because only one can be active at a time.
Detect if a service worker is registered for a specific origin.
Frames, Pop-ups
Frames, Pop-ups
Frames
Empty responses do not create resource timing entries.
Detect presence of specific elements in a webpage with the XSS-Auditor in SA.
Clear the file from the cache. Opens target page checks if the file is present in
the cache.
Read number of frames (window.length).
Frames
Frames
Frames, Pop-ups
Frames, Pop-ups
Read size of embedded media.
Read duration of embedded media.
Leak sensitive data from the id or name attribute.
Detect website styling depending on the status of the user.
HTML Elements (Video, Audio)
HTML Elements (Video, Audio)
Frames
HTML Elements
Subresource Integrity error messages leak the size of a response in SA.
Downloads do not create resource timing entries in the Performance API.
Resource protected with CORP do not create resource timing entries.
COOP protected pages can not be accessed.
Resource with X-Frame-Options header does not create resource timing entry.
CSP header directives can be probed with the CSP iframe attribute.
Resource protected with CORP throws error when fetched.
Detect presets of Content-Type and Content-Type-Options headers, because
CORB is only enforced for specific content types together with the nosniff
option.
In GC, when a page is not allowed to be embedded on a cross-origin page
because of X-Frame-Options, an error page is shown.
Attacker can detect downloads by using iframes. If the iframe is still accessible,
the file was downloaded.
Fetch API
Frames