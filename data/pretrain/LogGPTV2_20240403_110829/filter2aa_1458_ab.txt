我们选择 YARA 的另一个原因是：在写了一些 YARA 规则后，我们回测了一些历史 Windows
本地提权样本。让我们意外的是，YARA 的表现超出我们的预期。 
编写正确的规则 
接下来我们将描述如何将之前学到的经验转换为 YARA 规则。 
基本上，我们有三种思路： 
1. 
为漏洞利用各个阶段的特征编写规则 
2. 
为最新的漏洞和利用手法编写规则 
3. 
为最可能出现的漏洞编写规则 
对于第一种思路（为漏洞利用各个阶段的特征编写规则），通常来说，一个 Windows 内核本
地提权漏洞利用包含以下阶段： 
a) 
漏洞触发 
b) 
堆风水 
c) 
内核信息泄露 
d) 
任意地址读写 
e) 
控制流劫持 
f) 
权限提升 
我们的任务就是基于每个阶段的通用特征写规则。以下是两个例子： 
对于内核信息泄露阶段，思路是匹配通用的 Windows 内核信息泄露手法。包括但不限于下
面这些： 
NtQuerySystemInformation 
➢ 
SystemBigPoolInformation 
➢ 
SystemModuleInformation 
➢ 
… 
Win32k Shared Info User Handle Table 
Descriptor Tables  
HMValidateHandle 
GdiSharedHandleTable 
对于任意地址读写原语，部分思路是匹配以下出现过的历史手法： 
SetWindowLong / SetWindowLongPtr 
SetWindowText / InternalGetWindowText / NtUserDefSetText  
GetMenuItemRect / SetMenuItemInfo / GetMenuBarInfo 
NtUpdateWnfStateData / NtQueryWnfStateDate 
GetBitmapBits / SetBitmapBits 
GetPaletteEntries / SetPaletteEntries 
CreatePipe / NtFsControlFile 
Previous Mode + NtReadVirtualMemory / WriteVirtualMemory 
需要指出的是，以上只是一些可能的思路，不是所有思路都适合 YARA 规则，其中一些思路
可能会导致大量误报。 
对于第二种思路（为最新的漏洞和利用手法编写规则），这里我给出两个例子： 
1. 2020 年 7 月， Synacktiv 公司 的 Paul Fariello(@paulfariello) 和 Corentin Bayet 
(@OnlyTheDuck)在 SSTIC 大会上提出了一种新的 Windows 内核堆溢出漏洞利用手
法。在学习了他们的白皮书后，我们意识到在 PagedPool 中借助 Pipe Attribute 手法
实现任意地址读取的利用方式具有通用性，在未来很可能会被用到。因此我们花了
一些时间为这种手法写了几条规则。事实证明这些规则后来捕获了一些高价值样本。 
2. 2021 年 6 月 8 号，卡巴斯基写了一篇博客，披露了一个 Windows 本地提权在野
0day(CVE-2021-31956)。文章中提到样本使用 Windows Notification Facility (WNF)
实现了任意地址读写原语。随后在 2021 年 7 月和 8 月，NCC Group 公司的 Alex 
Plaskett(@alexjplaskett)发表了两篇博客，详细披露了 CVE-2021-31956 漏洞的利用
细 节 ， 并 解 释 了 使 用 WNF 构 造 任 意 地 址 读 写 原 语 的 细 节 。 与 此 同 时 ，
YanZiShuang(@YanZiShuang)也写了一篇博客讨论了借助WNF构造任意地址读写原
语的手法。在学习了这些博客后，我们意识到这种方法是通用的，于是又花了一些
时间为此写了几条规则。和预期的一样，我们确实捕获了一些高价值样本。 
对于第三种思路（为最可能出现的漏洞编写规则），我这里也给出一个例子。2021 年 4 月 13
号，卡巴斯基写了一篇博客披露了 CVE-2021-28310，这是一个位于 Windows 桌面窗口
管理器组件（Desktop Window Manager，简称为 dwm）的在野 Windows 本地提权 0day。
不到一个月后，ZDI 发表了另一篇博客，披露了另一个漏洞（CVE-2021-26900），这也
是一个位于 dwm 组件的漏洞。这使我们意识到这种类型的漏洞在未来还会出现，所以
我们在几个小时内为 dwm 漏洞写了几条规则。几周后，我们捕获了 CVE-2021-33739   
这个 0day 漏洞。  
编写出规则只是第一步。为了捕获一个 Windows 本地提权在野 0day，我们需要去构建一整
个系统。 
构建可行的系统 
思考如下三个问题： 
1. 当一个样本命中了规则，如何及时通知我们？ 
2. 当一个命中的样本推送给我们，如何快速复现和分类它？ 
3. 为了调试不同的 Windows 本地提权 0day，我们需要掌握什么技巧？ 
对于第一个问题，如果 YARA 运行在 VirusTotal 上，我们可以使用其 Hunting 页面的通知机
制，我们可以在“Notify by email“一栏中填写用来接收通知的邮箱。这样，当一个新的样本被
命中，我们的邮箱会在第一时间接收到通知。对于运行在我们自有产品上的规则，我们构建
了一套类似 VirusTotal 的通知接口。 
对于第二个问题，我们已经统计了每个历史案例中被攻击的系统版本，这些信息可以用在此
处。此外，考虑到我们捕获的可能是 Nday、1day 或者 0day，因此我们需要制作这三种不同
的环境，并且需要随时间流逝更新这三种环境。为了最小化复现时间，我们还制作了多种操
作系统环境，包括 Windows 7、Windows 10 和 Windows 11，并且涵盖了 x86 和 x64。 
第三个问题取决于我们调试不同样本的经验。举个例子，对于那些已经分析过 Windows
内核堆溢出漏洞的人来说，Windows 内核调试和 Driver Verifier 配置是两种基本技巧。
此外，对于那些分析过 dwmcore 模块漏洞的人来说，使用 Windows 远程调试是必须的
（因为直接附加到 dwm.exe 进程会导致系统 UI 无法响应）。我们积累的经验越多，就可
以越好地回答这个问题。 
测试和改进系统 
没有方法是完美的，为了使系统更准确，我们做了如下测试和改进： 
1. 使用收集到的历史 Windows 本地提权 0day 样本去测试规则，消除误报和漏报 
2. 使用收集到的公开 poc/exploit 对规则进行测试，消除误报和漏报 
3. 尝试编写 poc/exploit（对于一些无法收集到公开 poc/exploit 的漏洞案例），并对规则进
行测试，消除误报和漏报 
4. 将规则应用到大规模样本进行压力测试，消除观察到的漏报和误报 
5. 持续将最新的漏洞和利用手法转化为规则，编写、测试规则并消除误报和漏报 
这套系统部署一年以后，我们捕获了大量 Windows 本地提权漏洞样本。 
在接下来的章节，我们将分享这套系统捕获的三个案例： 
1. CVE-2021-1732：一个位于 win32k 子系统的 Windows 本地提权在野 0day 
2. CVE-2021-33739：一个位于桌面窗口管理器（Desktop Window Manager）的
Windows 本地提权在野 0day 
3. 未知 CVE：一个位于通用日志文件系统（Common Log File System）的 Window 本
地提权在野 1day 
首先来看第一个案例。 
案例分享 
CVE-2021-1732 的故事 
2020 年 12 月 10 日，我们捕获了第一个 Windows 本地提权在野 0day，微软为这个漏洞分
配的编号为 CVE-2021-1732。 
这 个 在 野 样 本 是 从 我 们 的 私 有 数 据 集 中 捕 获 的 ， 我 们 注 意 到 它 是 因 为 它 使 用 了
HMValidateHandle 手法泄露内核信息，这是 Windows 内核提权漏洞利用中的一个强特征。
进一步的分析表明这个样本利用了一个 win32k 模块中的类型混淆漏洞。 
值得一提的是，这个在野样本是作为一个独立组件使用的。当使用这个样本时，用户需要提
供一个进程 id 作为命令行参数，该进程 id 指出了需要被提权的进程。目标进程会先被结束，
然后以 system 权限重新启动。如果直接运行该在野样本，它也会将自身提权到 system 权
限，但会以没有任何可见行为的方式退出。 
以下是这个在野样本的一些亮点： 
1. 
它针对的是当时最新的 Windows 10 1909 x64 操作系统（样本编译于 2020 年 5 月） 
2. 
它使用 GetMenuBarInfo 来构造任意地址读取原语，该手法此前未公开过 