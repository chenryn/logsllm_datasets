(?P5[1-5][o-9]{14})|
?P3[47][0-9]{13}) 1
?P3(?:0[0-5]1[68][0-9])[0-9]{11})1
(?P(?:2131|1800|35[0-9]{3))[0-9]{11})
$(
Regex options: Free-spacing
Regexflavers: PCRE, Python
Java 4 to 6, Perl 5.8 and earlier, and Ruby 1.8 do not support named capture. You can
use numbered capture instead. Group 1 will capture Visa cards, group 2 MasterCard,
and so on up to group 6 for JCB:
^(?:
(4[0-9]{12}(?:[0-9]{3})?)1
# Visa
(5[1-5][0-9]{14})|
# MasterCard
(6(?:011|5[0-9]{2])[0-9]{12}) 1
# Discover
(3[47][0-9]{13})1
#AMEX
(3(?:0[0-5][68][0-9])[0-9]{11})|
# Diners Club
((?:2131|1800|35[0-9]{3})[0-9]{11})
JCB
$
Regexoptions: Free-spacing
318 | Chapter 4: Validation and Formatting
---
## Page 335
Regexflavers: .NET, Java, XRegExp, PCRE, Perl, Python, Ruby
Standard JavaScript does not support named capture or free-spacing. Removing white
space and comments, we get:
(?:(4[0-9]{12}(?:[0-9]{3}))1(5[1-5][0-9]{14})|
6(?:011|5[0-9]{2])[0-9]{12})|(3[47][0-9]{13])∣
(3{?:0[0-5]][68][0-9])[0-9]{11})1((?:2131|1800|35[0-9]{3})[0-9]{11}))$
Regex options: None
Regexflavers: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
If you don’t need to determine which type the card is, you can remove the six capturing
groups that surround the pattern for each card type, as they don’t serve any other
purpose.
Follow Recipe 3.6 to add this regular expression to your order form to validate the card
number. If you use different processors for diferent cards, or if you just want to keep
some statistics, you can use Recipe 3.9 to check which named or numbered capturing
group holds the match. That will tell you which brand of credit card the customer has.
Example web page with JavaScript
Credit Card Test
Credit Card Test
Please enter your credit card nunber:
aquupxe,=aweu oz,=azs ,x,=d ndu>
onkeyup=“validatecardnunber(this. value) ">
(no card number entered)
// Strip spaces and dashes
(., *3/[- ]/)aetdaxxaqunupxe> = xaqunupxe>
// See if the card 1s valid
// The regex wil1 capture the nurber in one of the capturing groups
var match=/~(?:(4[0-9]{12}(?:[0-9](3})²)|(5[1-5][0-9]{14})
(6{?:011]5[0-9]{2])[0-9]{12})|(3[47][0-9]{13})|(3(?:0[0-5]|[68][0-9]] 
[0-9]{11}) 1((?:2131|1800|35[0-9]{3})[0-9]{11}))$/ ,exec(cardnumber);
1f (match) (
4.20 Validate Credit Card Numbers I 319
---
## Page 336
// List of card types, in the same order as the regex capturing groups
var types = ['Visa′, “MasterCard', ‘Discover′, 'Anerican Express',
‘Diners Club’,'JCB′];
/ Find the capturing group that matched
// Skip the zeroth element of the match array (the overall match)
for (var 1 = 1; 1 
Discussion
Strip spaces and hyphens
On an actual credit card, the digits of the embossed card number are usually placed
into groups of four. That makes the card number easier for humans to read. Naturally,
many people will try to enter the card number in the same way, including the spaces,
on order forms.
Writing a regular expression that validates a card number, allowing for spaces, hyphens,
and whatnot, is much more dificult that writing a regular expression that only allows
digits. Thus, unless you want to annoy the customer with retyping the card number
without spaces or hyphens, do a quick search-and-replace to strip them out before
validating the card number and sending it to the card processor.
The regular expression  * - ] matches a characterthat is a space or a hyphen. Replacing
all matches of this regular expression with nothing effectively deletes all spaces and
hyphens.
Credit card mumbers can consist only of digits. Instead of using  to strip out all nondigits.
epue uoeA de 1oe
---
## Page 337
Validate the number
Each of the credit card companies uses a different number format. We'll exploit that
differencetoallow usersto enter a number without specifying acompany; the company
can be determined from the number. The format for each company is:
Visa
13 or 16 digits, starting with 4.
MasterCard
16 digits, starting with 51 through 55.
Discover
16 digits, starting with 6011 or 65.
American Express
15 digits, starting with 34 or 37.
Diners Club
14 digits, starting with 300 through 305, 36, or 38.
JCB
15 digits, starting with 2131 or 1800, or 16 digits starting with 35.
If you accept only certain brands of credit cards, you can delete the cards that you don’t
accept from the regular expresson. When deleting JCB, make sure to delete the last
remaining  in the regular expression as well. If you end up with  word boundaries.
Incorporating the solution into a web page
The section *Example web page with JavaScripr* on page 319 shows how you could
add these two regular expressions to your order form. The input box for the credit card
number has an onkeyup event handler that calls the validatecardnurber( ) function. This
4.20 Validate Credit Card Numbers | 321
---
## Page 338
function retrieves the card number from the input box, strips the spaces and hyphens,
and then validates it using the regular expression with numbered capruring groups.
The result of the validation is displayed by replacing the text in the last paragraph on
the page.
If the regular expression fails to match, regexp -exec() returns null, and (invalid card
number) is displayed. Ifthe regex does match, regexpexec() retums an array of strings.
The zeroth element holds the overall match. Elements 1 through 6 hold the text match-
ed by the six capturing groups.
Our regular expression has six capturing groups, divided by alternation. This means
that exactly one capruring group will participate in the match and hold the card num-
ber. The other groups will be empty (either undefined or the empty string, depending
11 tau auo sq suo *sdnoa8 Suumadeo xis au sxpaup uogoung aq1 (iasmouq anod uo
finds one that is not empty, the card number is recognized and displayed.
Extra Validation with the Luhn Algorithm
There is an extra validation check that you can do on the credit card number before
processing the order, The last digit in the credit card number is a checksum calculated
according to the Lazhn algorithm. Since this algorithm requires basic arithmetic, you
cannot implement it with a regular expression.
You can add the Luhn check to the web page example for this recipe by insering the
call luhn(cardnunber) ; before the *else~ line in the validatecardnunber() function. This
way, the Luhn check will be done only if the regular expression finds a valid match,
and after determining the card brand. However, determining the brand of the credit
card is not necessary for the Luhn check. All credit cards use the same method.
In JavaScript, you can code the Luhn function as follows:
function luhn (cardnunber)(
// Build an array with the digits in the card nunber
（..)dsxaqunupxe= sp xeA
for (var 1 = 0; 1 = 0; 1--) {
1f (alt) {
digits[i] *= 2;
if (digits[1] > 9) {
digits[1] -= 9;
}
sun += digits[1];
alt • !alt;
322 | Chapter 4: Validation and Formatting
---
## Page 339
// Check the result
1f (sum % 10 == 0) {
document.getElementById('notice′) -innerHTML += *; Luhn check passed’ ;
}else {
document-getElementById('notice′) -innerHTML += *; Luhn check failed’;
This function takes a string with the credit card number as a parameter. The card
number should consist only of digits. In our example, validatecardnunber() has already
stripped spaces and hyphens and determined the card number to have the right number
of digits.
First, we split the string into an array of individual characters. Then we iterate over the
array to convert the characters into integers. If we don’t convert them, the sum variable
the numbers.
will end up as a string concatenation of the digits, rather than the integer addition of
The actual algorithm runs on the array, calculating a checksum. If the sum modulus
10 is zero, then the card number is valid. If not, the number is invalid.
See Also
Techniques used in the regular expressions in this recipe are discussed in Chapter 2.
Recipe 2.3 explains character classes. Recipe 2.5 explains anchors. Recipe 2.8 explains
Sundeo pauu suedxa [I'7 xdpooy Budnog suedxa 6'7 adoay uogeu
groups. Recipe 2.12 explains repetition.
4.21EuropeanVATNumbers
Problem
You’re given the job of implementing an online order form for a business in the Euro-
pean Union.
European tax laws stipulate that when a VAT-registered business (your customer) lo-
cated in one EU country purchases from a vendor (your company) in another EU
country, the vendor must not charge VAT (Value-Added Tax). If the buyer is not VAT-
registered, the vendor must charge VAT and remit the VAT to the local tax office. The
vendor must use the VAT registration number of the buyer as proof to the tax office
that no VAT is due. This means that for the vendor, it is very important to validate the
buyer’s VAT number before proceeding with the tax-exempt sale.
The most common cause of invalid VAT numbers are simple typing mistakes by the
customer. To make the ordering process faster and friendlier, you should use a regular
expression to validate the VAT number immediately while the customer fills out your
4.21 European VAT Numbers | 323
---
## Page 340
online order form. You can do this with some client-side JavaScript or in the CGI script
on your web server that receives the order form. If the number does not match the
regular expression, the customer can correct the typo right away.
Solution
To keep the implementation simple, this solution is split into two parts. First we strip
out spaces and punctuation. Then we validate what remains.
Strip whitespace and punctuation
Retrieve the VAT number entered by the customer and store it into a variable. Before
performing the check for a valid number, replace all matches of this regular expression
with a blank replacement text:
[-.]
Regexoptions: None
Regexflavers: .NET, Java, JavaScript, PCRE, Perl, Python, Ruby
Recipe 3.14 shows you how to perform this initial replacement. We’ve assumed that
the customer wouldn’t enter any punctuation except hyphens, dots, and spaces. Any
other extraneous characters will be caught by the upcoming check.
Validate the number
With whitespace and punctuation stripped, this regular expression checks whether the
VAT number is valid for any of the 27 EU countries:
(AT)?U[0-9]{8}1
# Austria
(BE)?0[0-9]{9}1
# Belgiun
(BG)?[0-9]{9,10}1
# Cyprus
# Bulgaria
(CY)?[0-9]{8}L
(C2)?[0-9]{8,10}1
# Czech Republic
(DE)?[0-9]{9}1
# Germany
(DK)?[0-9]{8}
# Dermark
(EE)?[0-9]{9}1
# Estonia
(EL|GR)?[0-9]{9}1
# Greece
(ES)?[0-9A-Z][0-9]{7}[0-9A-Z]1
# Spain
(FI)?[0-9]{8}1
#France
# Finland
(FR)?[0-9A-Z]{2}[0-9]{9}1
(GB)?([0-9]{9}([0-9]{3})?1[A-Z]{2)[0-9]{3}) ∣ # Un1ted Kingdom
1{8}[6-0](nH)
Kxe&unH #
(IE)?[0-9]S[0-9]{5}L1
# Italy
# Ireland
(IT)?[0-9]{11}1
(LT)?([0-9]{9}|[0-9]{12})1
 Luxenbourg
# Lithuania
1{8}[6-0](n)
(LV)?[0-9]{11}1
# Latvia
(MT)?[0-9]{8}1
# Malta
324 I Chapter 4: Validation and Formatting
---
## Page 341
(NL)?[0-9]{9}B[0-9]{2} 1
# Netherlands
1(ot}[6-0](d)
#Portuga1
# Poland
1{6}[6-0](1d)
(R0)？[0-9]{2,10}1
# Ronania
(SE)?[0-9]{12} 1
# Sweden
(S1)?[0-9]{8}1
# Slovenia
(SK)?[0-9]{10}
# Slovakia
$(
Regex options: Free-spacing, case insensitive
Regexflavers: .NET, Java, XRegExp, PCRE, Perl, Python, Ruby
The above regular expression uses free-spacing mode to make it easy to edit later. Every