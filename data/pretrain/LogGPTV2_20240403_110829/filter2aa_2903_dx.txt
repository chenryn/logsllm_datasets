### 日志的可靠性和持久性

日志通常以简单的文本文件形式存储，因此具有良好的可读性和易传递性。对于需要长时间运行的系统服务类软件（如数据库系统或网络服务），日志是了解其运行状态和进行调试的重要资源。以下是一些典型的日志记录场景：

- **进程或系统的启动和终止**：在启动时，通常会将当前版本等重要信息一并写入日志。
- **重要工作线程的创建和退出**：特别是非正常退出的情况。
- **模块加载和卸载**：记录关键模块的动态变化。
- **异常情况或检测到错误**：及时记录以便后续分析。

日志记录应简明扼要，避免过多冗余信息，因为日志通常需要长期保存，过多的信息会导致存储和查阅不便。第15章介绍了Windows系统提供的日志功能。

### 提高软件观察性的方法

本节讨论了一些提高软件观察性的常用方法，但并非全部。例如，使用编译器的函数进出挂钩（/Gh编译器选项）功能可以帮助观察程序的执行位置。由于在设计软件和编写代码时无法完全预料错误的发生位置和调试所需信息，因此在编写每一段代码时都应考虑软件的可观察性和可调试性。

### 16.6 自检和自动报告

#### 16.6.1 BIST (内置自测试)

BIST（Built-In Self-Test）是集成电路（IC）领域的一个术语，指芯片内部的自我测试功能。许多大规模集成芯片（如CPU、芯片组）都包含BIST机制。BIST通常在芯片复位时自动运行，也可以根据需要调用，例如通过TAP接口启动英特尔IA-32 CPU的BIST，测试结果存放在EAX寄存器中，0表示测试通过。

对于计算机系统，每次启动时CPU复位后首先执行的是POST代码（位于BIOS中），即上电自检（Power On Self Test）。自检可以防止系统在存在问题时继续运行，从而避免产生错误的计算和输出结果。

#### 16.6.2 软件自检

与硬件领域的BIST类似，软件中的自检功能也非常有意义。软件自检不同于单元测试，后者主要用于开发过程中的辅助测试，而软件自检对已进入产品阶段的软件同样适用。软件自检更关注整个系统的完整性，通常包括以下内容：

- **组成模块的完备性和完整性**：确保没有缺少或篡改任何模块。
- **各个模块的版本及其依赖关系**：验证是否满足运行要求。
- **系统运行所依赖的软硬件条件**：检查依赖的硬件和其他基础软件是否存在且正常工作。
- **模块间的通信机制**：确保通信畅通。

软件自检可以在软件启动时自动执行，也可以通过专门的工具程序或用户界面进行。例如，DirectX的自检工具DXDIAG就提供了一个用户界面，用于诊断和检查不同方面的功能。

#### 16.6.3 自动报告

与自检相关的另一个功能是自动生成和发送报告。自动报告使软件能够收集自己的状态信息和故障信息，并将其写入文件。这些报告可以是二进制形式或文本形式，以便于阅读和分析。

例如，DirectX自检工具可以将收集的信息和检查结果保存为文本文件。Windows中的Msinfo32工具可以将系统的软硬件信息保存到文件中。例如，执行以下命令可以将系统信息写入`sysinfo.txt`文件中：

```sh
Msinfo32 /report c:\sysinfo.txt
```

Windows的WER（Windows Error Reporting）机制是自动发送报告的一个典型实例。需要注意的是，在生成和发送报告时，必须保护用户的隐私信息，不应包含用户的标识信息（如用户名、地址等），并且应在征得用户同意后才能将报告发送到服务器。

### 16.7 本章小结

本章讨论了软件工程中实现软件可调试性的一些具体问题，包括角色分工、架构方面的考虑，以及如何实现可追溯性和可观察性。尽管篇幅有限，未能深入讨论编码和实现细节，但提高软件可调试性是一项长期投资，即使短期内看不到明显效益也不应放弃。

以Windows操作系统为例，其流行的一个重要原因是有丰富的应用软件支持。Windows不仅自身具有良好的可调试性，还为其上运行的其他软件提供了强大的调试支持。

### 参考资料

[1] G Pascal Zachary. *Showstopper: The Breakneck Race to Create Windows NT and the Next Generation at Microsoft*. The Free Press, 1994.
[2] Robert M Metzger. *Debugging by Thinking: A Multidisciplinary Approach*. Elsevier Digital Press, 2003.