的可靠性和持久性。另外，因为日志通常是以简单的文本文件形式存储
的，所以它具有非常好的可读性和易传递性。对于需要长时间运行的系
统服务类软件，比如数据库系统或网络服务等，日志是了解其运行状态
和进行调试的重要资源。重大的事件或者异常情况通常应该写入日志，
以下是一些典型的例子。
进程或系统的启动和终止，在启动时通常会将当前的版本等重要信
息一并写到日志中。
重要工作线程的创建和退出，特别是非正常退出。
模块加载和卸载。
异常情况或检测到错误时。
日志记录也应该注意简明扼要，而且记录的数量不宜过多，因为日
志通常是要保存较长时间的，如果记录的信息太多，就不易于保存和查
阅。第15章介绍过Windows系统提供的日志功能。
本节介绍了提高软件观察性的一些常用方法，这当然不是全部，比
如使用编译器的函数进出挂钩（/Gh编译器选项）功能有利于观察程序
的执行位置。因为在设计软件和编写代码时无法完全预料错误会发生在
哪个位置和调试时希望观察什么样的信息。这就要求我们始终把软件的
可观察性记在心中，带着未雨绸缪的思想写好每一段代码，这样整个软
件的可观察性和可调试性自然就会得到提高。
16.6 自检和自动报告
本节将简要地讨论用来提高软件可调试性的另两种机制：自检（自
我诊断）和自动报告。下面先从集成电路领域的BIST说起。
16.6.1 BIST
BIST（Built-In Self-Test）是集成电路（IC）领域的一个术语，意
思是指内置在芯片内部的自我测试功能，或者说自检。很多较大规模的
集成芯片（比如CPU、芯片组等）都包含BIST机制。BIST通常在芯片
复位时自动运行，但也可以根据需要调用和运行，比如通过TAP接口可
以启动英特尔IA-32 CPU的BIST，测试结束时EAX寄存器中存放着测试
的结果，0代表测试通过。
BIST通常是对芯片而言的，对于计算机系统，通常也会实现自检机
制。事实上，在每次启动一个计算机系统时，CPU复位后首先执行的就
是所谓的POST代码（位于BIOS中），POST的含义就是上电自检
（Power On Self Test）。
自检可以防止系统在存在问题时继续工作而导致错误的计算结果和
输出结果，以免导致更严重的问题。
16.6.2 软件自检
与硬件领域的BIST类似，在软件中实现自检功能也是非常有意义
的。软件自检与单元测试不同。首先，单元测试在开发软件的过程中是
用来辅助测试的，而软件自检对于进入产品期的软件也是有意义的。其
次，单元测试主要关注某个模块（单元）的工作情况，而软件自检更关
注整个系统的完整性。
软件自检的内容应该根据每个软件的实际情况来定义，通常包括以
下内容。
组成模块的完备性（不缺少任何模块）和完整性（没有哪个模块残
缺或者被篡改）。
各个模块的版本，版本间的依赖关系是否满足运行要求。
系统运行所依赖的软硬件条件是否满足，比如依赖的硬件或者其他
基础软件是否存在并正常工作。
模块间的通信机制是否畅通。
要启动软件自检，可以在软件开始运行时自动执行，也可以提供一
个专门的工具程序或者用户界面。比如用来诊断和检查DirectX的自检
工具DXDIAG使用的就是后一种方式。执行DXDIAG后，它会启动一个
界面，其中包含很多个标签（tab），分别用来提供不同方面的检查功
能（见图16-8）。
图16-8 DirectX的自检工具
单击DXDIAG程序主界面中的带Test字样的按钮就可以测试当前系
统中的有关模块和功能，并将测试结果显示在列表中。
16.6.3 自动报告
与自检有关的一个功能是自动产生和发送报告。自动产生报告就是
让软件自己收集自己的状态信息和故障信息，并把这些信息写在文件
中。可以把转储文件看作一种二进制形式的报告。为了便于阅读，很多
软件可以产生文本文件形式的报告，或者同时使用文本文件和二进制文
件。
例如前面介绍的DirectX自检工具就可以将收集的信息和检查的结
果保存在一个文本文件中（单击图16-8中的Save All Information按
钮）。
Windows中的Msinfo32工具可以将系统的软硬件信息保存到文件
中。例如执行以下命令，Msinfo32就会以静默的方式将系统信息写入
sysinfo.txt文件中。
Msinfo32 /report c:\sysinfo.txt
通过“winmsd/?”命令可以得到Msinfo32的一个简单帮助。在测试和
调试过程中，很多时候我们需要比较多个系统的配置信息。这时，使用
DXDIAG或Msinfo32产生的信息报告是一种便捷有效的方式。
Windows的WER（Windows Error Reporting）机制是自动发送报告
的一个典型实例。自动发送报告功能的一个重要问题就是要注意不能侵
犯用户的隐私信息，在报告中不应该包含用户的标识信息，比如用户
名、地址等。另外，应该征得用户同意后才能将报告发送到自己的服务
器。
16.7 本章小结
本章讨论了在软件工程中实现软件可调试性的一些具体问题，包括
角色分工、架构方面的考虑，特别是比较详细地讨论了如何实现可追溯
性和可观察性。因为篇幅限制，本章无法讨论太多编码和实现方面的细
节。
最后要说明的是，提高软件可调试性是一项长期的投资，即使短期
内看不到明显的效益，也不应该放弃。仍然以Windows操作系统为例，
Windows操作系统流行的一个重要原因是有无比丰富且源源不断的应用
软件可以在上面运行。否则，即使一个操作系统本身的技术再好，安装
和配置再灵活，但只有很少的应用软件可以运行，它也很难流行起来。
因为人们购买一台计算机（硬件和操作系统）的目的主要是在上面安装
和使用应用软件，如办公软件、工程绘图软件等。而Windows操作系统
中有如此丰富的应用软件的一个重要原因，就是它对软件开发和调试的
良好支持。Windows不但自身有很好的可调试性，而且它为其上运行的
其他软件实现可调试性提供了强大的支持。
参考资料
[1] G Pascal Zachary. Showstopper: The Breakneck Race to Create
Windows NT and the Next Generation at Microsoft[M]. The Free Press,
1994.
[2] Robert M Metzger. Debugging by Thinking: A Multidisciplinary
Approach[M]. Elsevier Digital Press, 2003.