service.
5.2 SEApp policy structure
Developers interested in taking advantage of our approach to
improve the security of their apps are required to load the pol-
icy into their Android Package (APK). A predeﬁned directory,
policy, at the root of the archive, is where the SEApp-aware
package installer will be looking for the policy module (see
Figure 3). Inside this directory, the installer looks for four ﬁles
(which we refer to as local), that outline a policy structure
similar to the one of the system. Speciﬁcally, the developer is
able to operate at two different levels: (i) the actual deﬁnition
of the app policy logic using the policy language described in
Section 4 (in the local ﬁle sepolicy.cil), and (ii) the con-
ﬁguration of the security context for each process (in the local
ﬁles seapp_contexts and mac_permissions.xml) and for
each ﬁle directory (in the local ﬁle file_contexts).
5.2.1 Processes
5.1.3 Services
Unlike what happens for system processes, a system service
requires the assignment of a security context to both its pro-
cesses and its Binder [17], to be fully compliant with SEAn-
droid. The Binder is the lightweight inter-process communi-
cation primitive bridging access to a service. Its retrieval is en-
abled by the servicemanager, a process started during device
boot-up to keep track of all the services available on the de-
vice. Based on the labels speciﬁed in the service_contexts
SEApp permits to assign a SELinux domain to each process
of the security enhanced app. To do this, the developer lists
in the local seapp_contexts a set of entries that determine
the security context to use for its processes. For each entry,
we restrict the list of valid input selectors to user, seinfo
and name: user is a selector based upon the type of UID;
seinfo matches the app seinfo tag contained in the local
mac_permissions.xml conﬁguration ﬁle; name matches ei-
ther a preﬁx or the whole process name. The conjunction of
these selectors determines a class of processes, to which the
USENIX Association
30th USENIX Security Symposium    3619
.apkAndroidManifest.xmlMETA-INF/classes.dexclasses2.dex policy file_contextsmac_permissions.xmlseapp_contexts sepolicy.cil res/ resources.argsSEApp modificationStock OScontext speciﬁed by domain is assigned. To avoid privilege
escalation, the only permitted domains are the ones the app
deﬁnes within its policy module and untrusted_app. As a
process may fall into multiple classes, the most selective one,
with respect to the input selector, is chosen. An example of
valid local seapp_contexts entries is shown in Listing 1,
which shows the assignment of the unclassiﬁed and secret do-
mains to the :unclassiﬁed and :secret processes, respectively.
In Android, developers have to focus on components rather
than processes. Normally, all components of an application
run in a single process. However, it is possible to change this
default behavior setting the android:process attribute of
the respective component inside the AndroidManifest.xml,
thus declaring what is usually called a remote component.
Furthermore, with the speciﬁcation of an android:process
consistent with the local seapp_contexts conﬁguration, we
support the assignment of distinct domains to app components.
To execute the component, the developer is only required
to create the proper Intent object [21], as she would have
already done on stock Android for remote components. The
assignment to the process of the correct domain is handled by
the system. This design choice allows us to support Android
activities, services, broadcast receivers and content providers,
while avoiding changes to the PackageParser [62], as there
are no modiﬁcations to the manifest schema.
5.2.2 Files
The developer states the SELinux security contexts of internal
ﬁles in the local file_contexts. Each of its entries presents
three syntactic elements, pathname_regexp, file_type and
security_context: pathname_regexp deﬁnes the direc-
tory the entry is referred to (it can be a speciﬁc path or a
regular expression); file_type describes the class of ﬁlesys-
tem resource (i.e., directory, ﬁle, etc.); security_context is
the security context used to label the resource. The admissible
entries are those conﬁned to the app dedicated directory and
using types deﬁned by the app policy module, with the excep-
tion of app_data_file. Due to the regexp support, a path
may suit more entries, in which case the most speciﬁc one
is used. Examples of valid local file_contexts entries are
shown in Listing 2: the ﬁrst line describes the default label for
app ﬁles, second and third line respectively specify the label
for ﬁles in directories dir/unclassified and dir/secret.
In SELinux, the security context of a ﬁle is inherited from
the parent folder, even though file_contexts might state
otherwise. Since, for our approach, it is essential that ﬁles are
labeled as expected by the developer, we decided to enforce
ﬁle relabeling at creation. Therefore, a new native service
has been added to the system (see Section 6.2). We then
offer to the developer an alternative implementation of class
java.io.File, named android.os.File, which sets ﬁle
and directory context upon its creation, transparently handling
the call to our service.
5.2.3 System services
To support any third-party app, the untrusted_app domain
grants to a process the permissions to access all system
services an app could require in the AndroidManifest.xml.
As an example, in Android 11, the untrusted_app_all.te
platform policy ﬁle [28] permits to a process labeled
with untrusted_app to access audioserver, camera,
location, mediaserver, nfc services and many more.
To prevent certain components of the app from holding the
privilege to bind to unnecessary system services, the devel-
oper deﬁnes a domain with a subset of the untrusted_app
privileges (in the local sepolicy.cil ﬁle), and then she en-
sures the components are executed in the process labeled with
it. Listing 3 shows an example in which the cameraserver
service is made accessible to the secret process.
1 user = _app seinfo = cert_id domain = package_name .
unclassified name = package . name : unclassified
2 user = _app seinfo = cert_id domain = package_name .
secret name = package . name : secret
Listing 1: seapp_contexts example
1 .*
2 dir / unclassified
u: object_r : app_data_file : s0
u: object_r : package_name .
unclassified_file : s0
3 dir / secret
u: object_r : package_name .
secret_file : s0
Listing 2: file_contexts example
1 ( block package_name
2
3
4
5
( type secret )
( call md_appdomain ( secret ))
( typebounds untrusted_app secret )
( allow secret cameraserver_service (
service_manager ( find ))) ...)
Listing 3: Granting cameraserver access to secret domain
6
Implementation
In this section we describe the main changes introduced in
Android by SEApp. We ﬁrst analyze the modiﬁcations re-
quired to manage policy modules, both during device boot
and at app installation. We then describe how the runtime
support was realized.
6.1 Policy compilation
6.1.1 Boot procedure
Since the introduction of Project Treble [10], policy ﬁles are
split among multiple partitions, one for each device maintainer
(i.e., platform, SoC vendor, ODM, and OEM). This feature
facilitates updates to new versions of Android, separating
the Android OS Framework from the device-speciﬁc low-
level software written by the chip manufacturers. Yet, each
time a partition policy (i.e., a segment) changes, an on-device
compilation is required.
3620    30th USENIX Security Symposium
USENIX Association
The init process divides its operations in three stages [19]:
(i) ﬁrst stage (early mount), (ii) SELinux setup, and (iii) sec-
ond stage (init.rc). The ﬁrst stage mounts the essential parti-
tions (i.e., /dev, /proc, /sys and /sys/fs/selinux), along-
side some other partitions speciﬁed as early mounted (since
Android 10 using an fstab ﬁle in the ﬁrst stage ramdisk, in
Android 9 and lower adding fstab entries using device tree
overlays). Once the required partitions are mounted, init en-
ters the SELinux setup. As the name suggests, this is the stage
where init loads the SELinux policy. As the /data partition,
where policy modules are stored, is not yet mounted, it is not
yet possible to integrate them with the policy of the system.
Then, as last operation of the SELinux setup stage, init re-
executes itself to transition from the initial kernel domain
to the init domain, entering the second stage. As the sec-
ond stage starts, init parses the init.rc ﬁles and performs
the builtin functions listed there, among them mounting the
/data partition. Now, the policy modules are available, and
we can produce with secilc [26] (the SELinux CIL compiler)
the binary policy consisting of the integration among the sys-
tem policy, the SEApp macros and the app policy modules.
To trigger the build and reload of the policy, we implemented
a new builtin function, and modiﬁed the init.rc to call this
function right after /data is mounted. The policy is consid-
ered immediately after the /data partition is available and
this ensures that the policy modules are loaded far before an
application starts, making the policy not bypassable.
Even though most Android devices supporting Android 10
were released with Treble support and, therefore, execute their
SELinux setup stage on the sepolicy.cil fragments scat-
tered among multiple partitions, init still supports the use of a
legacy monolithic binary policy. For compatibility towards de-
vices using a monolithic binary policy, additional changes are
required, as SEApp needs the system policy written in CIL to
be compiled alongside with app modules. To this end, we mod-
iﬁed the Android build process to push the sepolicy.cil
ﬁles onto the device even for non-Treble devices. New entries
in the device tree were added to make the policy segments
available during init SELinux setup stage [22].
As previously mentioned, we decided to store the policy
modules in the /data partition; even if this choice required
us to adapt the boot procedure of the device, it smoothly in-
tegrates SEApp with the current Android design. In fact, the
/data partition is one of the few writable partitions, it is
dedicated to hold the APK the user installs, as well as their
dedicated data directories and, therefore, it represents the best
option to contain also the app policy modules. Moreover,
whenever a user performs a factory reset, Android automati-
cally wipes the /data partition, removing the customization
the user made to the device conﬁguration, including the apps.
By placing the app policy modules and the apps into the same
partition, a factory reset removes the policy modules as well.
Figure 4: Installation process
6.1.2 App installation
As introduced in Section 5.2, the developer willing to deﬁne
its own policy module is expected to load it in the app pack-
age. At app installation, the PackageManagerService [23]
inspects the APK to identify whether or not the current instal-
lation involves a policy module, by looking for the policy
directory at the root of the archive. When the app has a policy
module attached to it (see Figure 4), the PackageManager-
Service extracts it ( 1 ) and uses our PolicyModuleValidator
to verify the respect of all the constraints on sepolicy.cil
(through the SEAppPolicyParser, Section 4) and on the con-
ﬁguration ﬁles (Section 5). In case of a violation of the con-
straints, the app installation stops. Otherwise, the policy mod-
ule is stored within /data/selinux, in a dedicated directory
identiﬁed by the package name ( 2 ). Then, the PackageMan-
agerService invokes installd [20] through the Installer to
trigger the policy compilation with an exec call to the se-
cilc program ( 3 , 4 ). Secilc reads the system sepolicy.cil
fragments, the SEApp macros and the sepolicy.cil frag-
ments of the app policy modules in the /data/selinux di-
rectory ( 5 ), and builds the binary policy ( 6 ). When the se-
cilc execution returns and no compilation errors have been
raised, the binary policy is then read by installd ( 7 ) and
loaded with selinux_android_load_policy, which writes the
sys/selinux/load ﬁle ( 8 ).
To load the policy ﬁles after init, the implementation of
SELinux in Android has been slightly modiﬁed. In particu-
lar, we modiﬁed the policy loading function within libselinux
(function selinux_android_load_policy), and changed the sys-
tem policy to allow installd to load the app policy module.
As for the policy conﬁguration ﬁles, some changes were
introduced to properly load the application file_contexts,
seapp_contexts and mac_permissions.xml. SELinux-
MMAC [27], i.e., the class responsible for loading the
appropriate mac_permissions.xml ﬁle and assigning
seinfo values to apks, was modiﬁed to load the new
mac_permissions.xml speciﬁed within the app policy mod-
ule. The loading of file_contexts and seapp_contexts
USENIX Association
30th USENIX Security Symposium    3621
 /data/selinux/packageName  file_contexts mac_permissions.xml seapp_contexts  sepolicy.cil .apkpolicywrite2installdsecilcexec4101011100100100system policy fragments+SEAppmacrossys/selinux/load3callread8write6writebinary policyread5+7SEApp modificationStock OSPackageManagerServicePolicyModuleValidatorread1SEAppPolicyParser6.2.1 Processes
Android application design is based on components. Each of
them lives inside a process, and can be seen as an entry point
through which the system or the user can enter the app.
To activate a component, an asynchronous message called
intent, containing both the reference to the target component
and parameters needed for its execution, has to be created.
The intent is then routed by the system to the ActivityManag-
erService [12] via Binder IPC. Before delivering the intent
request to the target component, the ActivityManagerService
checks if the process in which the target component should be
executed is already running; if not, the native service called
Zygote [29] is executed. Its role is to spawn and correctly
setup the new application process. To achieve this, it ﬁrst
replicates itself by performing a fork, then, using the input
provided by the ActivityManagerService (namely, package
name, seinfo, android:process, etc.), it starts conﬁguring
the process GID, the seccomp ﬁlter, the UID and ﬁnally the
SELinux security context. We adapted the ﬁnal conﬁguration
step, forcing Zygote to set the security context based on the
seapp_contexts located at /data/selinux/packageName
(i.e., the one provided by the developer for her app). Process
name is used to assign the proper context to the process when
it starts, before the logic of the process kicks in. In case the de-
veloper did not specify a domain, then Zygote uses the system
seapp_contexts as fallback. After the correct labeling, the
ActivityManagerService ﬁnishes the conﬁguration by binding
the application class, launching the component, and ﬁnally
delivering the intent message. Figure 5 details the process.
This implementation design offers several beneﬁts, includ-
ing backward compatibility, support for all components, and
ease of use. Indeed, a developer who wants to use our solution
only has to conﬁgure some ﬁles; changes in the application
code are reduced to a minimum, thus facilitating the introduc-
tion of SELinux in already existing apps.
In our study we have also explored other design alterna-
tives, in which the developer could explicitly state a domain
transition in the code, wherever she needs it. Although this
category of solutions would give the developers more control
over domain transitions, it also has some drawbacks. First, the
developer would be expected to enforce the isolation among
source and target domains managing the multi-threaded sce-
nario, and second, this design implies granting too many per-
missions to the app (e.g., dyntransition, setcurrent and
read/write access to selinuxfs). Moreover, such solution
would introduce a new Android API, that would be quite deli-
cate and, if not used correctly, it might be difﬁcult to control.
Figure 5: Application launch
Figure 6: File relabeling
was conﬁgured to treat system and app conﬁguration ﬁles
apart. So, SEApp-enhanced applications will load exclusively
their conﬁguration ﬁles, whereas the loading of system’s
and other apps’ conﬁguration ﬁles is not needed since their
use is prohibited. System services and daemons, instead,
load the base system conﬁgurations once, and then load
the app policy module speciﬁc conﬁguration ﬁles as they
are needed. An example of this are Zygote and restorecon
services, which need to retrieve at runtime seapp_contexts
and file_contexts, respectively (see Section 6.2).
Our implementation also supports the uninstallation of
SEApp apps. The regular uninstallation process is extended
with a step where the global policy is recompiled, in order to
remove the impact of old modules on the overall binary policy.
With reference to application updates, the native installd runs
with the necessary permission to remove and apply new ﬁle
types based on the content of the file_contexts.
6.2 Runtime support
In addition to the steps described above, other aspects have
to be considered in order to extend SELinux support at the
application layer.
6.2.2 Files
Android applications aiming to create a ﬁle can use the
java.io.File abstraction. Each ﬁle creation request that
is generated is captured by the Android Runtime (ART) [15],
and then converted into the appropriate syscall. The result
3622    30th USENIX Security Symposium
USENIX Association
ActivityManagerService1. StartActivity     (Intent)Zygote2. Process.start()Initializationset GIDsetup seccomp filterset UIDreadset SELinux context/data/selinux/packageName/seapp_contextsActivity ThreadpackageName:processlooper.loop()App classNew Activity3. fork()4. BIND5. LAUNCHSEApp modificationStock OSAndroid RunTimejava.io.Fileandroid.os.File/data/data/packageNameapplicationsystemServiceManagerrestorecon/data/selinux/packageName     file_contextsfile2ActivityActivityActivityServiceServiceService12346BAinit5file1SEApp modificationconfidential_fileapp_data_file(a)