**作者：HuanGMz@知道创宇404实验室  
时间：2020年10月30日**

### 概述
在.NET相关的安全漏洞中，ViewState经常成为攻击的目标。例如，在Exchange CVE-2020-0688和SharePoint CVE-2020-16952中都涉及到了ViewState的安全问题。尽管ViewState本身并不是一个漏洞，但在ASP.NET生成和解析ViewState时使用了`ObjectStateFormatter`进行序列化和反序列化。虽然序列化后的数据经过加密和签名处理，但一旦加密和签名的算法及密钥泄露，攻击者就可以伪造正常的ViewState，并触发`ObjectStateFormatter`的反序列化漏洞。

### 加密和签名
加密和签名所用的算法及密钥通常存储在`web.config`文件中。在CVE-2020-0688中，所有安装实例都使用了相同的默认密钥；而在CVE-2020-16952中，则是由于`web.config`文件被泄露。

### 工具与分析
`ysoserial.net`工具提供了利用ViewState的插件，主要功能是通过泄露的算法和密钥来伪造ViewState的加密和签名，从而触发`ObjectStateFormatter`的反序列化漏洞。然而，仅依赖工具并不够，本文将深入分析ViewState的加密和签名过程，以便更好地理解其工作原理。

### 1. 调试.NET Framework

#### 1.1 .NET 源码
对于初次接触.NET反序列化甚至C#的朋友来说，拥有一个舒适的调试环境至关重要。以下简要介绍如何调试.NET Framework的底层代码。

.NET Framework的部分源码已经由微软开源，可以在[官方网站](https://referencesource.microsoft.com/)上下载或在线浏览。当前开源版本包括.NET 4.5.1到4.8。需要注意的是，虽然微软提供了源码和相应的VS项目文件，但这些源码只能用于代码浏览而无法编译，因为缺少一些重要组件（如XAML文件和资源文件）。

#### 1.2 调试方法
微软官方文档提供了使用Visual Studio进行.NET源码调试的方法，主要是通过PDB文件和源码结合的方式进行单步调试。然而，实际测试发现，并非所有.NET程序集都有完整的PDB文件，部分程序集的PDB文件不包含源码信息，因此只能对一部分程序集进行单步调试。

在放弃使用Visual Studio进行调试后，可以考虑使用`dnSpy`这一开源.NET反编译工具。`dnSpy`不仅能够反编译代码，还支持直接调试。其GitHub链接为[这里](https://github.com/dnSpy/dnSpy)。你可以下载源码自行编译，也可以直接下载预编译版本，但需注意满足所需的.NET Framework版本。

**设置环境变量 `COMPLUS_ZapDisable=1`**
为了禁用所有NGEN映像（*.ni.dll）的使用，需要设置该环境变量。如果Windows服务器上运行IIS服务并托管了一个网站，浏览器访问该网站时会创建一个工作进程（w3wp.exe）。使用Process Explorer查看该进程加载的DLL，会发现许多DLL带有`.ni`后缀，表示它们是优化后的版本。设置环境变量后重启系统，再次检查`w3wp.exe`，会发现加载的DLL变回了标准版本（如System.Web.dll）。

**注意事项：**
- 设置环境变量后必须重启系统。
- 如果找不到`w3wp.exe`，请以管理员权限运行Process Explorer。

**使用dnSpy进行调试**
首先，使用Process Explorer确定`w3wp.exe`加载的程序集位置。选择与被调试进程匹配的32位或64位dnSpy，以管理员权限启动。打开正确的程序集（如System.Web.dll），确保路径一致。然后附加到`w3wp.exe`进程，根据进程号或命令行参数确定目标进程。给目标函数下断点，刷新页面即可中断到断点处。

### 2. ViewState基础知识

在尝试利用ViewState反序列化之前，需要了解一些基础知识。

**ASP.NET简介**
ASP.NET是微软在.NET Framework框架中提供的Web应用程序开发库，封装在System.Web.dll中，提供网页处理、HTTP通信等功能。ViewState是ASP.NET的一个重要特性，用于管理页面状态。

**ViewState的出现原因**
HTTP协议是无状态的，每次客户端请求都会导致服务器创建一个新的页面实例。为了在多次请求之间保持状态，出现了多种状态管理技术，ViewState便是其中之一。

**ViewState的工作原理**
ViewState是一个字典类型的数据结构，用于存储页面控件的状态。当响应页面时，ASP.NET将所有控件的状态序列化为字符串，并作为隐藏输入字段插入到页面中返回给客户端。客户端再次请求时，该隐藏字段将ViewState传回服务器，服务器对其进行反序列化并恢复控件状态。

**ViewState的安全性**
ViewState面临的主要威胁是信息泄露和篡改。早期版本的ViewState仅使用Base64编码，容易被解码。从ASP.NET 2.0开始，可以通过配置启用ViewState的加密和MAC校验功能，提高安全性。从.NET 4.5.2起，强制启用ViewState MAC校验，即使配置为禁用也会被忽略。

### 3. web.config 中关于ViewState的配置

在`web.config`中，可以通过以下参数配置ViewState的功能：
- **enableViewState**: 控制是否启用ViewState，但不影响被动解析。
- **enableViewStateMac**: 控制是否启用ViewState MAC校验，从.NET 4.5.2起强制启用。
- **viewStateEncryptionMode**: 控制ViewState的加密模式，可选值有Always、Auto、Never。

### 4. ViewState的生成和解析流程

ViewState的生成和解析主要通过`ObjectStateFormatter`的`Serialize`和`Deserialize`方法完成。使用dnSpy调试时，可以在`ObjectStateFormatter`的`Serialize`方法处下断点，观察其调用栈和具体实现。

#### 4.1 Serialize 流程
`Serialize`方法将状态图对象序列化为二进制格式，根据配置进行加密和MAC校验，最后编码为Base64字符串写入页面中的`__VIEWSTATE`表单值。

### 结论
通过深入了解ViewState的生成和解析过程，可以更好地理解其潜在的安全风险，并采取相应的防护措施。希望本文能帮助读者更清晰地掌握ViewState的相关知识和技术细节。

### 致谢
初次接触.NET，文中难免存在疏漏之处，恳请指正。