```  
postgres=# \d pg_publication  
            Table "pg_catalog.pg_publication"  
    Column    |  Type   | Collation | Nullable | Default   
--------------+---------+-----------+----------+---------  
 pubname      | name    |           | not null |   
 pubowner     | oid     |           | not null |   
 puballtables | boolean |           | not null |   
 pubinsert    | boolean |           | not null |   
 pubupdate    | boolean |           | not null |   
 pubdelete    | boolean |           | not null |   
Indexes:  
    "pg_publication_oid_index" UNIQUE, btree (oid)  
    "pg_publication_pubname_index" UNIQUE, btree (pubname)  
```  
4\. 允许使用all tables发布所有表。  
5\. 一个publication允许有多个订阅者。  
6\. 目前publication仅支持insert, update, delete。  
7\. 允许发布时，选择发布insert、update、delete，比如只发布insert，而不发布update, delete。  
8\. 当发布了表的update, delete时，表必须设置replica identity，即如何标示OLD TUPLE，通过pk或者uk或者full。如果设置了nothing，则执行update,delete时会报错  
```  
alter table table_name  
    REPLICA IDENTITY { DEFAULT | USING INDEX index_name | FULL | NOTHING }  
```  
报错例子  
```  
postgres=# delete from c;  
ERROR:  cannot delete from table "c" because it does not have replica identity and publishes deletes  
HINT:  To enable deleting from the table, set REPLICA IDENTITY using ALTER TABLE.  
```  
9\. create publication或者alter publication，发布或者修改发布内容中添加或者删除表时，都是事务级别，不会出现复制了部分事务的情况。 so the table will start or stop replicating at the correct snapshot once the transaction has committed。  
10\. 发布者需要设置wal_level=logical，同时开启足够的worker，设置足够大的replication slot，设置足够多的sender。  
因为每一个订阅，都要消耗掉一个replication slot，需要消耗一个wal sender，一个worker进程。  
发布者的pg_hba.conf需要设置replication条目，允许订阅者连接。(更正：逻辑订阅不需要,请普通设置)    
[《PostgreSQL 10.0 preview 变化 - 逻辑复制pg_hba.conf变化,不再使用replication条目》](../201704/20170405_02.md)  
发布者的数据库中，必须有replication角色的用户，或者超级用户，并且订阅者要使用它通过流复制协议连接到发布者。  
### subscription - 订阅者  
订阅者，需要指定发布者的连接信息，以及 publication name，同时指定需要在publication数据库中创建的slot name。  
在同一个数据库中，可以创建多个订阅。  
订阅者和发布者的角色可以同时出现在同一个实例的同一个数据库中。  
注意，订阅者一样需要设置：   
```
max_replication_slots
max_logical_replication_workers
max_worker_processes
```
The subscriber also requires the max_replication_slots to be set.    
In this case it should be set to at least the number of subscriptions that will be added to the subscriber.    
max_logical_replication_workers must be set to at least the number of subscriptions, again plus some reserve for the table synchronization.    
Additionally the max_worker_processes may need to be adjusted to accommodate for replication workers,    
at least (max_logical_replication_workers + 1).    
Note that some extensions and parallel queries also take worker slots from max_worker_processes.   
#### 订阅语法  
创建订阅  
```  
Command:     CREATE SUBSCRIPTION
Description: define a new subscription
Syntax:
CREATE SUBSCRIPTION subscription_name
    CONNECTION 'conninfo'
    PUBLICATION publication_name [, ...]
    [ WITH ( subscription_parameter [= value] [, ... ] ) ]
       WITH ( subscription_parameter [= value] [, ... ] )
           This clause specifies optional parameters for a subscription. 
           The following parameters are supported:
           copy_data (boolean)
               Specifies whether the existing data in the publications that are being subscribed to should be copied once the replication starts. 
               The default is true.
           create_slot (boolean)
               Specifies whether the command should create the replication slot on the publisher. 
               The default is true.
           enabled (boolean)
               Specifies whether the subscription should be actively replicating, or whether it should be just setup but not started yet. 
               The default is true.
           slot_name (string)
               Name of the replication slot to use. 
               The default behavior is to use the name of the subscription for the slot name.
               When slot_name is set to NONE, there will be no replication slot associated with the subscription. 
               This can be used if the replication slot will be created later manually. 
               Such subscriptions must also have both enabled and create_slot set to false.
           synchronous_commit (enum)
               The value of this parameter overrides the synchronous_commit setting. 
               The default value is off.
               It is safe to use off for logical replication: 
               If the subscriber loses transactions because of missing synchronization, the data will be resent from the publisher.
               A different setting might be appropriate when doing synchronous logical replication. 
               The logical replication workers report the positions of writes and flushes to the publisher, 
               and when using synchronous replication, the publisher will wait for the actual flush. 
               This means that setting synchronous_commit for the subscriber to off when the subscription is used for synchronous 
               replication might increase the latency for COMMIT on the publisher. 
               In this scenario, it can be advantageous to set synchronous_commit to local or higher.
           connect (boolean)
               Specifies whether the CREATE SUBSCRIPTION should connect to the publisher at all. 
               Setting this to false will change default values of enabled, create_slot and copy_data to false.
               It is not allowed to combine connect set to false and enabled, create_slot, or copy_data set to true.
               Since no connection is made when this option is set to false, the tables are not subscribed, 
               and so after you enable the subscription nothing will be replicated. 
               It is required to run ALTER SUBSCRIPTION ... REFRESH PUBLICATION in order for tables to be subscribed.
```  
修改订阅  
```  
Command:     ALTER SUBSCRIPTION
Description: change the definition of a subscription
Syntax:
ALTER SUBSCRIPTION name CONNECTION 'conninfo'
ALTER SUBSCRIPTION name SET PUBLICATION publication_name [, ...] [ WITH ( set_publication_option [= value] [, ... ] ) ]
ALTER SUBSCRIPTION name REFRESH PUBLICATION [ WITH ( refresh_option [= value] [, ... ] ) ]
ALTER SUBSCRIPTION name ENABLE
ALTER SUBSCRIPTION name DISABLE
ALTER SUBSCRIPTION name SET ( subscription_parameter [= value] [, ... ] )
ALTER SUBSCRIPTION name OWNER TO { new_owner | CURRENT_USER | SESSION_USER }
ALTER SUBSCRIPTION name RENAME TO new_name
```  
#### 订阅者小结  
1\. 订阅者需要通过流复制协议连接到发布者，同时需要在发布者创建replication slot。  
因此发布者的pg_hba.conf中需要配置相应的replication条目，允许订阅者通过流复制协议连接。(更正：逻辑订阅不需要，请使用普通设置)    
[《PostgreSQL 10.0 preview 变化 - 逻辑复制pg_hba.conf变化,不再使用replication条目》](../201704/20170405_02.md)  
同时连接发布者的用户，必须具备replication权限，或者具备超级用户权限。  
2\. 同一个数据库中，可以创建多个subscription，这些subscription可以连自一个或多个发布者。  
3\. 当同一个数据库中有多个subscription时，如果这些subscriptions是来自同一个发布者，那么他们之间发布的表不能重叠。  
也就是说，订阅者的同一张表，不能接受来自同一个源的多个发布。  
例如  
发布者  
```  
create table public.a (id int primary key, info text);  
create publication pub1 for table a;  
create publication pub2 for table a;  
```  
订阅者  
A表接受了同一个源的多次发布，会报错。  
```  
create table public.a (id int primary key, info text);  
create subscription sub1 connection 'hostaddr=127.0.0.1 port=1922 user=postgres dbname=postgres' publication pub1;  
create subscription sub2 connection 'hostaddr=127.0.0.1 port=1922 user=postgres dbname=postgres' publication pub2;  
```  
4\. 每一个订阅，都需要在发布端创建一个slot，可以使用slot name = ?指定，或者默认为subscription name。  
即使是同一个发布端，只要订阅了多次，就需要创建多个SLOT，因为slot中记录了同步的LSN信息。  
例如  
```  
create table public.a (id int primary key, info text);  
create table public.b (id int primary key, info text);  
create publication pub1 for table a;  
create publication pub2 for table b;  
```  
订阅者  
```  
create table public.a (id int primary key, info text);  
create table public.b (id int primary key, info text);  
create subscription sub1 connection 'hostaddr=127.0.0.1 port=1922 user=postgres dbname=postgres' publication pub1;  
create subscription sub2 connection 'hostaddr=127.0.0.1 port=1922 user=postgres dbname=postgres' publication pub2;  
```  
这种情况，对于这个订阅者，建议合并成一个，例如  
```  
create subscription sub1 connection 'hostaddr=127.0.0.1 port=1922 user=postgres dbname=postgres' publication pub1, pub2;  
```  
5\. pg_dump导出数据库逻辑数据时，默认不会导出subscription的定义，除非使用选项 --include-subscriptions  
6\. 在创建subscription或者alter subscription时，可以使用enable来启用该订阅，或者使用disable暂停该订阅。  
7\. 如果要完全删除订阅，使用drop subscription，注意，删除订阅后，本地的表不会被删除，数据也不会清除，仅仅是不在接收该订阅的上游信息。  
这个也很好理解，因为同一个表可能接收多个订阅。删订阅和删表是两码事。  
8\. 删除订阅后，如果要重新使用该订阅，数据需要resync，比如订阅的上游节点有100万数据，resync会将这100万数据同步过来。随后进入增量同步。  
将来10.0正式发布时，也许会提供一个选项，选择要不要resync。  
(目前来说，一次订阅，意味着这些被订阅的表会和发布端一模一样（只要发布端发布了insert,update,delete语句）。如果发布端只发布了insert，那么源表的update和delete不会被订阅)  
9\. 订阅时，不会自动创建发布端的表，所以表需要在订阅端先创建好。  
将来10.0正式发布时，也许会填补这个功能。  
目前发布端和订阅端的表定义必须完全一致，包括  
schema，表名必须一致。  
字段名和字段类型必须一致。  
字段顺序可以不一致。  
除了表，其他对象都不能被订阅，例如你不能将表订阅到一张视图中。  
10\. 必须使用超级用户创建订阅  
### 逻辑复制的冲突  
逻辑复制，本质上是事务层级的复制，需要在订阅端执行SQL。  
如果订阅端执行SQL失败（或者说引发了任何错误，包括约束等），都会导致该订阅暂停。  
注意，update, delete没有匹配的记录时，不会报错，也不会导致订阅暂停。  
用户可以在订阅端数据库日志中查看错误原因。  
#### 冲突修复方法  
1\. 通过修改订阅端的数据，解决冲突。例如insert违反了唯一约束时，可以删除订阅端造成唯一约束冲突的记录先DELETE掉。然后使用ALTER SUBSCRIPTION name ENABLE让订阅继续。  
2\. 在订阅端调用pg_replication_origin_advance(node_name text, pos pg_lsn)函数，node_name就是subscription name，pos指重新开始的LSN，从而跳过有冲突的事务。  
```  
pg_replication_origin_advance(node_name text, pos pg_lsn)         
Set replication progress for the given node to the given position.   
This primarily is useful for setting up the initial position or a new position after configuration changes and similar.   
Be aware that careless use of this function can lead to inconsistently replicated data.  
```  
当前的lsn通过pg_replication_origin_status.remote_lsn查看。  
https://www.postgresql.org/docs/devel/static/view-pg-replication-origin-status.html  
## 逻辑复制架构  
![pic](20170227_01_pic_001.jpg)  
![pic](20170227_01_pic_002.jpg)  
1\. 在创建subscription后，订阅者会在发布端创建一个快照，同时将发布端的数据，在同一个快照内的视角，发送给订阅端。  
例如订阅了发布端的A,B,C三张表，那么这三张表的当前快照下的数据，会发送给订阅端。  
2\. 订阅端接收完快照后，发布端会从快照的这个LSN开始，从WAL（REDO）日志中，根据发布定义的表以及过滤条件（INSERT\UPDATE\DELETE），按事务组装复制的消息包，通过流复制协议发送给订阅端的apply（wal receiver）进程。  
3\. 订阅端接收到消息包之后，对于同一个订阅(wal reciever或applyer进程)来说，会按照事务的先后顺序，按事务apply。所以在订阅端，apply也是事务一致的。   
将来可能会考虑组复制，提高并发性。  
PS  
其实你可以把不同的表分别放在不同的订阅中，这样就是并行的了。但是消耗的wal sender进程与连接会多一些。  
4\. 在订阅端，wal receiver(applyer)的session_replication_role会设置为replica。  
这个影响数据库的trigger和rule。  
参考  
[《PostgreSQL trigger/rule based replication configure, DISABLE/ENABLE [ REPLICA | ALWAYS ] TRIGGER | RULE》](../201506/20150615_01.md)  