如果您回忆起第 6 章、*中的`Dockerfile`在容器*中运行服务，`APACHE_LOG_DIR`环境变量被设置到`/var/log/apache2`目录，使用`ENV`指令。这将使 Apache2 HTTP 服务将所有日志消息路由到`/var/log/apache2`数据卷。
2.  一旦容器启动，我们可以将目录更改为 Docker 主机上的`/var/log/myhttpd`:
```
      $ cd /var/log/myhttpd
```
3.  或许，快速检查一下`/var/log/myhttpd`目录中的文件是合适的:
```
 $ ls -1
 access.log
 error.log
 other_vhosts_access.log
```
这里`access.log`文件包含了 Apache2 HTTP 服务器处理的所有访问请求。`error.log`文件是一个非常重要的日志文件，我们的 HTTP 服务器会记录它在处理任何 HTTP 请求时遇到的错误。`other_vhosts_access.log`文件是虚拟主机日志，在我们的例子中，它总是空的。
4.  我们可以使用带有`-f`选项的`tail`命令显示`/var/log/myhttpd`目录中所有日志文件的内容:
```
 $ tail -f *.log
 ==> access.log  error.log  other_vhosts_access.log  access.log  \
 /DataMount/testfile 
```
2.  使用`cat`命令，旋转一个容器来显示我们在上一步中编写的文本:
```
      $ sudo docker run --rm \
 --volumes-from datavol \
 busybox:latest cat /DataMount/testfile
```
以下是上述命令的典型输出:
```
      Data Sharing between Container
```
显然，我们新容器化的`cat`命令的前面的`Data Sharing between Container`输出是我们在步骤 1 中在`datavol`容器的`/DataMount/testfile`中写的文本。
很酷，不是吗？通过共享数据卷，您可以在容器之间无缝地共享数据。在这个例子中，我们使用了纯数据容器作为数据共享的基本容器。但是，Docker 允许我们共享任何类型的数据卷，并一个接一个地装载数据卷，如下所示:
```
$ sudo docker run --name vol1 --volumes-from datavol \
 busybox:latest /bin/true
$ sudo docker run --name vol2 --volumes-from vol1 \
 busybox:latest /bin/true
```
这里，在`vol1`容器中，我们从`datavol`容器装载数据卷。然后，在`vol2`容器中，我们安装了来自`vol1`容器的数据卷，该数据卷最终来自`datavol`容器。
### 容器间数据共享的实用性
在本章的前面，您学习了从 Docker 主机访问 Apache2 HTTP 服务的日志文件的机制。虽然通过将 Docker 主机目录装载到容器中来共享数据相当方便，但后来我们知道，只需使用数据卷就可以在容器之间共享数据。因此，在这里，我们将通过在容器之间共享数据来引入 Apache2 HTTP 服务日志处理的方法。为了在容器之间共享日志文件，我们将在以下步骤中分离下列容器:
1.  首先，一个纯数据容器，它将向其他容器公开数据卷。
2.  然后，Apache2 HTTP 服务容器利用纯数据容器的数据量。
3.  一个容器，用于查看我们的 Apache2 HTTP 服务生成的日志文件。
If you are running any HTTP service on the `80` port number of your Docker host machine, pick any other unused port number for the following example. If not, first stop the HTTP service, then proceed with the example in order to avoid any port conflict.
现在，我们将一丝不苟地指导您完成制作相应映像的步骤，并启动容器来查看日志文件:
1.  在这里，我们首先使用`VOLUME`指令创建一个带有`/var/log/apache2`数据量的`Dockerfile`。`/var/log/apache2`数据量是到`APACHE_LOG_DIR`的直接映射，环境变量设置在[第 6 章](06.html)、*在容器*中运行服务，使用`ENV`指令:
```
      ####################################################### 