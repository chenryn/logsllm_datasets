B.1. Lemma 2
Lemma 2 Consider two invocations of bc-ask made by CP and
DP made under the following assumptions:
narios
1. bc-ask is invoked with identical parameters in both sce-
2. goals (cid:5)= [ ]
3. ﬁrst(goals) is such that [8d].l (cid:5)= localmachine
4. Any recursive call to bc-ask will produce the same answer
if invoked with the same parameters in both scenarios.
Let α1, . . . , αk, αk+1 denote the sequence of return results
from the (k + 1) bc-ask invocations on line 11 by DP, and
let β1, . . . , βk(cid:1) denote the sequence of return results of the k(cid:2)
bc-ask invocations on line 17 by CP that do not return ⊥. Then,
k = k(cid:2)
and for each 1 ≤ i ≤ k, αi = βi.
(cid:2)
i = [17c].failures
Proof We prove Lemma 2 by induction over i. Our induction
(cid:2)
hypothesis is that [11d].failures
i. Note that
αk+1 = ⊥.
Base Case We must show that [11d].α1 = [17c].β1 and that
(cid:2)
1 =
[11d].failures
(cid:2)
1 = [c].failures, we can use As-
[d].failures and [17c].failures
(cid:2)
sumption 1 to conclude that [11d].failures
1.
Assumption 1 tells us that [d].θ = [c].θ, from which we can con-
clude that [7d].q(cid:2) = [7c].q(cid:2)
(cid:2)
2. Since [11d].failures
(cid:2)
2 = [17c].failures
(cid:2)
1 = [17c].failures
.
DP will call bc-ask (line 11) on machine l. Let [Nr] represent
the execution of line N within this remote call.
5r–6r [r].goals=[d].ﬁrst(goals), which cannot be empty, by
Assumption 2, so the body of these if statements will never
be executed.
7r ﬁrst([r].goals) = ﬁrst(ﬁrst([d].goals)) = ﬁrst([d].goals).
Additionally, [r].θ = [d].θ. Since we know that [7d].q(cid:2) =
[7c].q(cid:2)
, we can conclude that [7r].q(cid:2) = [7c].q(cid:2)
8r Since DP made the RPC to [8d].l, [8r].l is localmachine.
9r [9r].failures
10r Since [8r].l = localmachine, the body of this if statement
(cid:2)
1 = [r].failures = [11d].failures
(cid:2)
1.
.
([11r]–[14r]) will never be executed.
15r Since [8r].l = localmachine, the body of this else state-
ment will always be executed.
16r We let [c].R ⊆ [c].KB represent the set of tactics with
can unify and [r].R ⊆ [r].KB represent the
which [16c].q(cid:2)
set of tactics with which [16r].q(cid:2)
can unify. Knowing that
[16r].q(cid:2) = [16c].q(cid:2)
, we now show that [r].R = [c].R. If [c].Rt
represents the subset of [c].R that is tactics with subgoals and
if [c].Rf represents the subset of [c].R that is facts of the
form A signed F , [c].Rt∪ [c].Rf = [c].R. By deﬁnition of
our scenario, all machines in DP know all tactics with sub-
goals, so [r].Rt = [c].Rt. Furthermore, our scenario states
that machine A knows all facts of the form A signed F .
Since [8r].l = localmachine, [r].Rf = [c].Rf with respect
to the formula q(cid:2)
. Having shown [r].Rt = [c].Rt and [r].Rf
= [c].Rf , we can conclude that [r].R = [c].R.
Since [r].R = [c].R, if unify succeeds in one scenario, it
will succeed in both. As a result, [16r].(P, q) = [16c].(P, q),
which means that [16r].θ(cid:2) = [16c].θ(cid:2)
(cid:2)
1, which we have shown to
(cid:2)
1. Assumption 4 tells us that any
be equal to [17c].failures
17r [17r].failures
= [11d].failures
.
(cid:2)
recursive call to bc-ask made by DP will produce the same
answer as a call made by CP with the same parameters. Hav-
ing shown the equality of all parameters to bc-ask, we can
conclude that [17r].β = [17c].β. If β = ⊥, both [c] and [r]
will go to line 15 and repeat lines 16–17 using the next tactic.
If no such tactic exists, they will both fall through to line 21
and return ⊥. If β (cid:5)= ⊥, then we have found [17c].β1, and
that [17r].β = [17c].β1.
19–20r Since [r].goals = ﬁrst([d].goals), rest([r].goals) must
be the empty set. Therefore, [19r].answer = [17r].β, which
is equal to [17c].β1.
(cid:2)
1 = [17c].failures
(cid:2)
2 as desired.
Since [11d].α1 = [r].result and [r].result = [17c].β1,
Since
(cid:2)
1 and [11d].α1 = [17c].β1, the
(cid:2)
2 =
we can conclude [11d].α1 = [17c].β1 as desired.
[11d].failures
execution of [12d] and [18c] will produce [12d].failures
[18c].failures
Induction When the recursive call on [11d] is made for the
i = [d].failures∪ [11d].α1 ∪ . . .∪
(cid:2)
ith time, [11d].failures
i = [c].failures∪ [17c].β1∪. . .∪
(cid:2)
[11d].αi−1 and [17c].failures
[17c].βi−1.
5r–8r These lines will behave identically to the base case.
9r [9r].failures
Using our
(cid:2)
i.
tion hypothesis, we can conclude that [9r].failures
[17c].failures
10r, 15r–16r These lines will behave identically to the base
(cid:2) = [11d].failures
(cid:2)
i.
induc-
(cid:2) =
case.
17r Having shown the equality of all parameters to bc-ask, we
can use Assumption 4 to conclude that [17r].β = [17c].β. As
in the base case, if β = ⊥, both [c] and [r] will go to line 15
and repeat lines 16–17 using the next tactic. If no such tactic
exists, they will both fall through to line 21 and return ⊥.
If β (cid:5)= ⊥, then we have found [17c].βi, and that [17r].β =
[17c].βi.
19r–20r As in the base case, [r].result = [17r].β.
(cid:2)
i = [17c].failures
[11d].αi = [r].result, which is equal to [17c].βi as de-
(cid:2)
i and [11d].αi
sired. Since [11d].failures
= [17c].βi,
the execution of [12d] and [18c] will produce
(cid:2)
(cid:2)
i+1 = [18c].failures
[12d].failures
i+1 as desired. Finally, we
have shown that there is a one-to-one correspondence between
αi and βi, and so k = k(cid:2)
. 2
B.2. Lemma 3
Using Lemma 2, we now prove a stronger result. For the
purposes of the following lemma, we deﬁne the recursion depth
to be the number of times bc-ask directly invokes itself (i.e.,
invocations wrapped in RPC calls do not increase the recursion
depth, but all others do).
Lemma 3 If both CP and DP invoke bc-ask with parameters
goals, θ, and failures, then [c].result = [d].result.
Proof We prove Lemma 3 via induction on the recursion depth
of bc-ask. Our induction hypothesis is that at a particular recur-
sion depth, subsequent calls to bc-ask with identical parameters
will return the same answer in DP as in CP.
Proceedings of the 2005 IEEE Symposium on Security and Privacy (S&P’05) 
1081-6011/05 $ 20.00 IEEE
Base Case The deepest point of recursion is when goals is the
empty list. Since [d].failures = [c].failures and [d].θ = [c].θ,
lines 5–6 will execute identically in DP and CP returning either
θ or ⊥.
Induction In this case, goals (cid:5)= [ ].
5d–6d Since [c].goals = [d].goals (cid:5)= [ ], both DP and CP pro-
7d Because [c].goals = [d].goals and [c].θ = [d].θ, [7d].q(cid:2) =
ceed to line 7.
[7c].q(cid:2)
.
8d–9d By deﬁnition of determine-location,
[8c].l =
localmachine. Depending on [7d].q(cid:2)
, [8d].l may or may
not be localmachine. We proceed to show that in either
situation, [c].result = [d].result.
In both cases,
[9c].failures
and so
Case A of 8d–9d: [8d].l (cid:5)= localmachine We show that each
[c].failures = [d].failures,
(cid:2) = [9d].failures
.
(cid:2)
assumption of Lemma 2 holds.
1 is an assumption of the current lemma as well.
2 is fulﬁlled by the deﬁnition of the inductive case we are
trying to prove.
3 is true by the deﬁnition of Case A.
4 is true by our induction hypothesis.
Therefore, by Lemma 2, the sequence α1, . . . , αk, αk+1 of
return results from the (k + 1) bc-ask invocations on line 11
by DP, and the sequence β1, . . . , βk(cid:1) of return results of the
k(cid:2) bc-ask invocations on line 17 by CP that do not return ⊥
and for each 1 ≤ i ≤ k, αi = βi. As a
satisfy k = k(cid:2)
result, applying the induction hypothesis at [13d] and [19c]
yields [13d].answer = [19c].answer in each iteration, and
[c].result = [d].result.
Case B of 8d–9d: [8c].l = [8d].l=localmachine
Analogously to the argument in the base case of Lemma 2
(line [16r]), [d].R = [c].R, where [c].R is set of tactics with
which [16c].q(cid:2)
can unify, and [d].R is the set of tactics with
which [16d].q(cid:2)
can unify. As a result, applying the induc-
tion hypothesis at [19d] and [19c] yields [19d].answer =
[19c].answer in each iteration, and [c].result = [d].result.
2
B.3. Theorem 1
Theorem 1 For any goal G, a distributed prover using tactic
set T will ﬁnd a proof of G if and only if a centralized prover
using T will ﬁnd a proof of G.
Proof Both CP and DP will attempt to prove G by invoking
bc-ask with goals = G, θ equal to the empty substitution, and
failures = [ ]. Lemma 3 states that in this situation, the result
returned by CP and DP is identical. From this, we can conclude
that DP will ﬁnd a solution to G if and only if CP ﬁnds a solu-
tion. 2
) speaksfor key(KCMU ))
) speaksfor key(KCMU ).CA)
P1 = KCMU signed (key(KCMU S
P2 = KCMU signed (key(KCMU CA
P3 = KCMU CA signed (key(KUserA) speaksfor key(KCMU ).CA.UserA)
P4 = KCMU CA signed (key(KUserB) speaksfor key(KCMU ).CA.UserB)
P5 = KCMU CA signed (key(KUserC) speaksfor key(KCMU ).CA.UserC)
P6 = KCMU S signed (delegate(key(KCMU ), key(KCMU ).DH1, resource))
P7 = KCMU S signed (key(KCMU ).CA.UserA speaksfor key(KCMU ).DH1)
P8 = KUserA signed (delegate(key(KCMU ).DH1, key(KCMU ).DH1.FM1, resource))
P9 = KUserA signed (key(KCMU ).CA.UserB speaksfor key(KCMU ).DH1.FM1)
P10 = KUserB signed (delegate(key(KCMU ).DH1.FM1, key(KCMU ).CA.UserC, resource))
P11 = KUserC signed (action(resource, nonce))
0
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
key(KCMU ) says (key(KCMU S ) speaksfor key(KCMU ))
key(KCMU ) says (key(KCMU CA ) speaksfor key(KCMU ).CA)
key(KCMU CA ) says (key(KUserA) speaksfor key(KCMU ).CA.UserA)
key(KCMU CA ) says (key(KUserB) speaksfor key(KCMU ).CA.UserB)
key(KCMU CA ) says (key(KUserC) speaksfor key(KCMU ).CA.UserC)
key(KCMU ).CA says (key(KUserA) speaksfor key(KCMU ).CA.UserA)
key(KCMU ).CA says (key(KUserB) speaksfor key(KCMU ).CA.UserB)
key(KCMU ).CA says (key(KUserC) speaksfor key(KCMU ).CA.UserC)
key(KCMU S ) says (key(KCMU ).CA.UserA speaksfor key(KCMU ).DH1)
key(KCMU ) says (key(KCMU ).CA.UserA speaksfor key(KCMU ).DH1)
key(KUserA) says (key(KCMU ).CA.UserB speaksfor key(KCMU ).DH1.FM1)
key(KCMU ).CA.UserA says (key(KCMU ).CA.UserB speaksfor key(KCMU ).DH1.FM1)
key(KCMU ).DH1 says (key(KCMU ).CA.UserB speaksfor key(KCMU ).DH1.FM1)
key(KCMU S ) says delegate(key(KCMU ), key(KCMU ).DH1, resource)
key(KCMU ) says delegate(key(KCMU ), key(KCMU ).DH1, resource)
key(KUserA) says delegate(key(KCMU ).DH1, key(KCMU ).DH1.FM1, resource)
key(KCMU ).CA.UserA says delegate(key(KCMU ).DH1, key(KCMU ).DH1.FM1, resource)
key(KCMU ).DH1 says delegate(key(KCMU ).DH1, key(KCMU ).DH1.FM1, resource)
key(KUserB) says delegate(key(KCMU ).DH1.FM1, key(KCMU ).CA.UserC, resource)
key(KCMU ).CA.UserB says delegate(key(KCMU ).DH1.FM1, key(KCMU ).CA.UserC, resource)
key(KCMU ).DH1.FM1 says delegate(key(KCMU ).DH1.FM1, key(KCMU ).CA.UserC, resource)
key(KUserC) says action(resource, nonce)
key(KCMU ).CA.UserC says action(resource, nonce)
key(KCMU ).DH1.FM1 says action(resource, nonce)
key(KCMU ).DH1 says action(resource, nonce)
key(KCMU ) says action(resource, nonce)
Figure 9. Proof of key(KCMU ) says action(resource, nonce)
SAYS-I(P1 )
SAYS-I(P2 )
SAYS-I(P3 )
SAYS-I(P4 )
SAYS-I(P5 )
SPEAKSFOR-E2(1, 2)
SPEAKSFOR-E2(1, 3)
SPEAKSFOR-E2(1, 4)
SAYS-I(P7 )
SPEAKSFOR-E(0, 8)
SAYS-I(P9 )
SPEAKSFOR-E2(5, 10)
SPEAKSFOR-E2(9, 11)
SAYS-I(P6 )
SPEAKSFOR-E(0, 13)
SAYS-I(P8 )
SPEAKSFOR-E2(5, 15)
SPEAKSFOR-E2(9, 16)
SAYS-I(P10 )
SPEAKSFOR-E2(6, 18)
SPEAKSFOR-E2(12, 19)
SAYS-I(P11 )
SPEAKSFOR-E2(7, 21)
DELEGATE-E(20, 22)
DELEGATE-E(17, 23)
DELEGATE-E(14, 24)
lar user via a certiﬁcate like P7; each ﬂoor manager position is
similarly created and populated by certiﬁcates such as P8–P9;
and each user authorized to use resource receives a certiﬁcate
similar to P10. Finally, every user attempting to access a re-
source creates a certiﬁcate like P11.
C. Sample Proof of Access
Figure 9 shows a proof
that allows UserC to access
resource, a resource controlled by KCMU using the policy
described in Section 5.1. The goal that must be proved is
key(KCMU ) says action(resource, nonce). P1–P11 repre-
sent the necessary certiﬁcates, and below them is the proof.
The inference rules used by this proof are those of Ap-
pendix A. This proof is representative of those generated by
our prover during the simulations of Section 5.
In our simulations, a certiﬁcate like P3–P5 is generated for
each principal. Each department head is given authority over
each resource in the corresponding department via certiﬁcates
like P6, and the job of department head is assigned to a particu-
Proceedings of the 2005 IEEE Symposium on Security and Privacy (S&P’05) 
1081-6011/05 $ 20.00 IEEE