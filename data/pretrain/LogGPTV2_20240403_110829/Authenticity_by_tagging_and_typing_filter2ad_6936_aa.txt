# Authenticity by Tagging and Typing

## Authors
Michele Bugliesi, Riccardo Focardi, Matteo Maffei  
Università Ca’Foscari di Venezia  
Dipartimento di Informatica  
Via Torino 155, 30172 Mestre (VE), Italy  
{bugliesi, focardi, maffei}@dsi.unive.it

## Abstract
We introduce a type and effect system for authentication protocols that employs a tagging scheme to formalize the intended semantics of ciphertexts. The key result is that the validation of each protocol component in isolation is both sound and fully compositional: if all participants are independently validated, the entire protocol ensures authentication even in the presence of Dolev-Yao intruders. The highly compositional nature of this analysis makes it suitable for multi-protocol systems, where different protocols might run concurrently.

## Categories and Subject Descriptors
C.2.2 [Computer-Communication Networks]: Network Protocols—Protocol Verification; F.3.2 [Logics and Meanings of Programs]: Semantics of Programming Languages—Program Analysis; K.6.5 [Management of Computing and Information Systems]: Security and Protection—Authentication

## General Terms
Security, Verification

## Keywords
Static Analysis, Authentication, Process Calculi

## 1. Introduction
Authentication protocols are security protocols designed to enable two entities to achieve mutual and reliable agreement on specific information, such as the identity of the other party, its presence, the origin of a message, or its intended destination. Achieving these guarantees is subtle because they typically involve the encryption/decryption of messages composed of multiple parts, each providing a piece of the authentication guarantee. For example, consider the following protocol:

1. B → A: n
2. A → B: {B, m, n}SignA

In this protocol, Bob (the initiator) sends Alice (the responder) a random challenge (nonce) n. Alice signs the challenge along with a message m and Bob's identifier B, and Bob verifies the nonce after decrypting the message with Alice's public key. The goal is to ensure that m is authentic from Alice, i.e., freshly sent by Alice to Bob. Each component of the encrypted packet {B, m, n}SignA has a specific role: the nonce n ensures freshness, the identifier B specifies the intended receiver, and the signature confirms the sender. Collectively, this exchange provides the following agreements:
1. Both participants agree on each other's identity.
2. They agree on the origin and destination of the message m.

In our previous work [10], we proposed a static method for analyzing such authentication properties. Here, we extend our results in several ways:
- Our methodology now applies to a broader class of protocols, including both symmetric and asymmetric cryptography and diverse challenge-response mechanisms.
- We provide authentication guarantees against a wider range of attacks, including those where the opponent acts as an honest principal.
- We extend our analysis to verify message authentication properties in addition to entity authentication.
- We formulate our approach using a type-and-effect system, providing a more robust meta-theory based on established type-theoretic foundations.

Our current approach follows the same methodology as [11, 12]:
1. Specify properties by annotating the protocol with correspondence assertions.
2. Annotate the protocol with suitable types and tags.
3. Verify the assertions using a type checker.

However, we use tags to annotate the ciphertexts exchanged in the protocol, which aids the typed analysis. For instance, in the simple authentication protocol, the authenticity properties are derived from the combined effects of the message components. The system in [12] captures these guarantees by assigning a dependent type to the private key:

```plaintext
Key( B : Principal,
     m : Payload,
     n : Public Response[end A sending m to B]
)
```

This type structure renders the dependencies among the message components. The safety proof for the protocol is then a consequence of the typing rules ensuring that the nonce is used as intended. While this approach is flexible and expressive, it can be complex and less compositional.

Our approach differs by rendering inter-dependencies directly on terms using a richer, tagged structure. We identify minimal authentication patterns and tag encrypted messages to indicate the pattern they correspond to. For example, the message {B, m, n}SignA is tagged as {Id(B), Auth(m), Verif(n)}SignA, indicating that the nonce n authenticates m to the verifier B. The tags are dynamically identified by the recipient upon decryption and used to achieve authentication guarantees. This allows us to use simple types to enforce secrecy and simple effects to reason about authentication.

The advantages of our approach include:
- Full compositionality: Each party can be checked in isolation, using independent typing environments.
- Scalability: The tagging discipline naturally scales to multi-protocol settings.
- Simplicity: The type system is easy to use, requiring minimal human effort.
- Expressiveness: The selected authentication patterns capture many protocols in the literature, providing insights into basic authentication mechanisms.

Our safety results rely on the assumption that messages are tagged, making the tags play both static and dynamic roles. While this may seem limiting, our tagging mechanism is less demanding than those used in existing protocol implementations and analysis techniques.

## 2. ρ-spi Calculus
The ρ-spi calculus, originally proposed in [10], is derived from the spi calculus [2] and incorporates features from Lysa [5]. It introduces tagged message exchange, new authentication-specific constructs, and primitives for declaring process identities and keys. In this paper, we extend the calculus with primitives for asymmetric cryptography.

### Syntax
We presuppose two countable sets: N of names and V of variables. Names and variables can be tagged, denoted C(a). Tags, denoted by C, are a special category of names. The syntax is reported in Table 1.

#### Table 1: Syntax of ρ-spi Calculus
| Notation | Description |
| --- | --- |
| **Patterns (M)** | names, variables, tagged data, key |
| **Processes (P, Q)** | principal, replication, composition, symmetric-key assignment, asymmetric-key assignment |
| **Sequential Processes (S)** | nil, restriction, input, output, symmetric encryption, asymmetric encryption, symmetric decryption, asymmetric decryption, run, commit |

### Key Constructs
- **Principal (I (cid:2) S)**: A sequential process associated with an identity I.
- **Replication (I(cid:2)!S)**: An arbitrary number of copies of I (cid:2) S.
- **Let-Binding (let k = sym-key(I1, I2).P)**: Declares and binds a long-term key k shared between I1 and I2 in the scope P.
- **Asymmetric Key (let k = asym-key(I).P)**: Declares and binds the key pair Pub(k), Priv(k) associated with I.
- **New (new(n).S)**: Generates a fresh name n local to S.
- **Input (in(M1, ..., Mn).S)**: Reads a message and performs pattern-matching.
- **Output (out(M1, ..., Mn).S)**: Sends a message.
- **Encryption (encrypt{M1, ..., Mn})**: Symmetric encryption.
- **Decryption (decrypt x as {M1, ..., Mn})**: Symmetric decryption.
- **Run (run(I1, I2, M).S)**: Runs a sub-protocol.
- **Commit (commit(I1, I2, M).S)**: Commits to a sub-protocol.

### Operational Semantics
We assume a unique (anonymous) public channel, the network, from/to which all principals, including intruders, read/send messages. The input primitive can test part of the message read by pattern-matching, binding variables to the remaining subparts.

## 3. Type and Effect System
We summarize our type and effect system and its main properties. The system uses tags to annotate the ciphertexts, allowing for a more modular and composable analysis of authentication protocols.

## 4. Case Study: Splice/AS Protocol
We analyze the Splice/AS Protocol to demonstrate the effectiveness of our approach.

## 5. Conclusion and Related Work
We conclude with final remarks and a discussion of related work, highlighting the strengths and potential applications of our tagging and typing approach.

---

This revised version aims to make the text more coherent, clear, and professional, while preserving the original content and intent.