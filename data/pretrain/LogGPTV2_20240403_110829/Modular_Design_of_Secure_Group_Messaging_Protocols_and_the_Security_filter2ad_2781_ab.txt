### 1. Introduction

This section discusses the advancements in (symmetric-key) broadcast encryption [16, 18] and multicast encryption [12, 24, 30]. Cremers et al. [15] highlight the limitations of MLS/TreeKEM with respect to PCS for multiple groups. Weider [29] proposes Causal TreeKEM, a variant that reduces the need for ordering protocol messages. Additionally, recent concurrent work [9] analyzed an older version of TreeKEM (from MLS Draft 7) using formal verification techniques.

### 2. Preliminaries

#### Notation

We use associative arrays to map arbitrary key strings to item strings. For an array \( A \), we use “.” to denote all entries. Specifically, we implicitly declare \( A \) as a one-dimensional array and set all its entries to the empty string by writing \( A[.] \leftarrow \epsilon \). Similarly, we declare a new two-dimensional array \( B \) with empty entries by \( B[., .] \leftarrow \epsilon \). The shorthand \( B[x, .] \leftarrow A \) denotes that for all \( y \) such that \( A[y] \neq \epsilon \), we set \( B[x, y] \leftarrow A[y] \).

For a subset \( Y' \subseteq Y \), the term \( Y' \subseteq A \) returns true if and only if \( A \) contains all elements in \( Y' \); that is, \( \forall y \in Y' \, \exists x : A[x] = y \). For a vector \( \mathbf{x} = (x_1, \ldots, x_d) \) with all components \( x_i \in X \), we write \( A[\mathbf{x}] \) to denote the vector \( (A[x_1], \ldots, A[x_d]) \). The empty list is denoted by [.] and the length of a list \( L \) by \( |L| \).

The following special keywords are used to simplify the exposition of the security games:
- **req**: followed by a condition; if the condition is not satisfied, the oracle/procedure containing the keyword is exited, and all actions by it are undone.
- **let**: followed by a variable and a condition; after evaluating the expression, the variable is assigned the value that satisfies the condition, or \( \bot \) otherwise.
- **chk**: followed by a condition; if the condition is not satisfied, the oracle/procedure containing the keyword returns false; otherwise, the next instruction is executed.

### 3. Formal Definition of Secure Group Messaging

In this section, we formally define secure group messaging (SGM). Section 3.1 introduces the formal syntax of SGM schemes, and Section 3.2 introduces the security game for SGM schemes.

#### 3.1 Syntax

This section introduces the formal syntax of an SGM scheme. Parties are identified by unique party IDs \( \text{ID} \) chosen from an arbitrary fixed set. In the following, \( s \) and \( s' \) denote the internal state of the SGM scheme before and after an operation, respectively. An SGM scheme consists of 15 algorithms grouped into the following categories:

- **Initialization:**
  - \( s \leftarrow \text{Init}(\text{ID}) \): takes a party ID and generates the initial state.
  - \( (s', \text{spk}) \leftarrow \text{Gen-SK}(s) \): generates a new signature key pair and outputs the public key.
  - \( s' \leftarrow \text{Rem-SK}(s, \text{spk}) \): removes the key pair corresponding to spk from the state.
  - \( s' \leftarrow \text{Get-SK}(s, \text{ID'}, \text{spk'}) \): stores the signature public key spk' for party ID'.
  - \( (s', \text{kb}) \leftarrow \text{Gen-KB}(s, \text{spk}) \): generates a new key bundle (aka initial key material), signed with spk.
  - \( (s', \text{ok}) \leftarrow \text{Get-KB}(s, \text{ID'}, \text{kb'}) \): stores key bundle kb' for party ID'—can reject kb' by outputting ok = false.
    - Key bundles have the format \( \text{kb} = (\text{wpk}, \text{spk}, \text{sig}) \), where sig is a signature of wpk under spk, and wpk is the welcome key material, which can be used to encrypt secret information for joining group members.

- **Group Creation:**
  - \( s' \leftarrow \text{Create}(s, \text{spk}, \text{wpk}) \): creates a group with self, where the party uses the key pair corresponding to spk to sign in this group, while control messages for the group creator are encrypted under keys in wpk.

- **Proposals:**
  - \( (s', P) \leftarrow \text{Add}(s, \text{ID'}) \): generates a proposal to add party ID'.
  - \( (s', P) \leftarrow \text{Remove}(s, \text{ID'}) \): generates a proposal to remove party ID'.
  - \( (s', P) \leftarrow \text{Update}(s, \text{spk}) \): generates a proposal for self to update the personal key material; the new signing verification key will be spk.
  - \( (s', \text{PI}) \leftarrow \text{Proc-PM}(s, P) \): adds proposal \( P \) to the state and outputs information PI about \( P \).

- **Commits:**
  - \( (s', E, W, T) \leftarrow \text{Commit}(s, P) \): creates a commit corresponding to a vector \( P \) of proposals and outputs an epoch ID \( E \), an array of welcome messages \( W \) (where \( W[\text{ID}] \) is the welcome message for newly added party ID), and a commit message \( T \) (for existing group members).
  - \( (s', \text{GI}) \leftarrow \text{Proc-CM}(s, T) \): used by existing group members to process a commit message \( T \) and reach a new epoch; outputs updated group information GI (where \( \text{GI} = \bot \) if \( T \) is considered invalid).
  - \( (s', \text{GI}) \leftarrow \text{Proc-WM}(s, W) \): used by newly added group members to process welcome message \( W \) and join a group; outputs group information GI (where \( \text{GI} = \bot \) if \( W \) is considered invalid).

- **Sending and Receiving Messages:**
  - \( (s', e) \leftarrow \text{Send}(s, a, m) \): generates a ciphertext \( e \) encrypting plaintext \( m \) and authenticating AD \( a \).
  - \( (s', E, S, i, m) \leftarrow \text{Rcv}(s, a, e) \): decrypts ciphertext \( e \) to plaintext \( m \) and verifies AD \( a \); also outputs a triple \( (E, S, i) \) consisting of epoch ID \( E \), sender ID \( S \), and message index \( i \).

#### 3.2 Security

##### 3.2.1 Bookkeeping

The complexity of the SGM security definition stems from the bookkeeping required to determine which messages are safe to challenge and when the attacker is allowed to inject. The security game keeps track of all relevant execution data using a history graph. The recorded data informs three safety predicates (each pertaining to privacy, authenticity, or both) used to determine whether a given execution was legal. These predicates are kept generic and are considered parameters of the security definition.

- **History Graphs:** A history graph is a directed tree whose nodes correspond to the group state in various epochs of an execution. The root of the tree is a special node \( v_{\text{root}} \) that corresponds to the state of not being part of a group. The children of the root node are \( v_{\text{create}} \)-nodes, which correspond to the creation of groups. The remaining nodes correspond to the group state after a particular commit operation. Two nodes \( v \) and \( v' \) are connected by an edge \( (v, v') \) if the commit operation leading to \( v' \) was created in \( v \). Concretely, a history graph node consists of the following values: \( v = (\text{vid}, \text{orig}, \text{data}, \text{pid}) \), where vid is the node’s unique ID, orig is the party that caused the node’s creation, data is additional data, and pid is the vector of (IDs of) proposals included in the commit. The history graph is accessed by the security-game oracles via the "HG object" HG, which provides information via several methods. The (ID vid of the) node corresponding to a party ID’s current state is stored by the array \( V_{\text{-Pt}}[\text{ID}] \).

- **Proposals:** The object Props keeps track of proposals. The information recorded about each proposal is a vector \( p = (\text{pid}, \text{vid}, \text{op}, \text{orig}, \text{data}) \), where pid is the proposal’s unique ID, vid is the ID of the HG node corresponding to the epoch in which the proposal was created, op ∈ {add, rem, upd} is the type of proposal, orig is the party that issued the proposal, and data is additional data. Props will also export several useful methods to the oracles of the security game.

- **PKI Bookkeeping:** Welcome keys and signature keys are tracked symbolically. Each welcome key has a unique welcome-key ID wkid, and each signature key has a unique signature-key ID skid. The arrays \( WK_{\text{-ID}}[\cdot] \) and \( SK_{\text{-ID}}[\cdot] \) map wkid and skid values to the ID of the party that owns the corresponding secret keys; the arrays \( WK_{\text{-PK}}[\cdot] \) and \( SK_{\text{-PK}}[\cdot] \) map wkid and skid values to the corresponding public keys. The array \( WK_{\text{-SK}}[\cdot] \) remembers the binding of welcome keys to signature keys; these bindings are created by key bundles: when wpk with wkid is signed under spk with skid in a key bundle, the game sets \( WK_{\text{-SK}}[\text{wkid}] \leftarrow \text{skid} \).

- **Stored and Leaked Values:** The security game maintains the following arrays/sets to track the information accumulated by the attacker via state compromise:
  - **Stored values:**
    - \( V_{\text{-St}}[\text{ID}] \) contains pairs (vid, flag) of (i) the epochs for which ID currently stores information and (ii) a flag recording whether said information can be used to infer information about subsequent states. This array is organized as a queue with maximum capacity \( r \), where \( r \) is a parameter of the definition and of SGM protocols: it stands for the maximum number of "open" epochs a party keeps at any point in time.
    - \( P_{\text{-St}}[\text{ID}] \) contains the IDs of the proposals currently stored by ID.
    - \( WK_{\text{-St}}[\cdot] \) and \( SK_{\text{-St}}[\cdot] \) contain the IDs of the welcome and signing keys, respectively, currently stored by ID.
  - **Leaked values:**
    - \( V_{\text{-Lk}} \) is a set that contains triples (vid, ID). Each such tuple means that the attacker learned the state of ID in epoch vid, and for that state, flag = true, which implies that leaked information can be used to infer information about subsequent epochs.
    - \( WK_{\text{-Lk}} \) and \( SK_{\text{-Lk}} \) contain the IDs of the welcome and signing keys, respectively, for which the attacker has learned the secret keys.
    - \( AM_{\text{-Lk}} \) records application messages for which the attacker has learned the key material.

- **Deletions, and Lack Thereof:** The SGM definition requires that parties who fail to delete old values cannot use them to their advantage after they are removed from the group. The array Del keeps track of which parties are deleting values as they are supposed to (those with Del[ID] = true) and which ones are not. Formally, a party with Del[ID] = false will simply move such values to a special "trash tape," instead of deleting them; the contents of the trash tape will be revealed to A upon state leakage. Consequently, there are several "trash arrays" that keep track of what is stored on the trash tape of each party: \( V_{\text{-Tr}} \) (for undeleted information about epochs), \( AM_{\text{-Tr}} \) (for undeleted information about application messages), \( WK_{\text{-Tr}} \) (for undeleted information about welcome keys), and \( SK_{\text{-Tr}} \) (for undeleted information about signature keys).

- **Challenges:** The array Chall[vid] stores, for each vid, pairs (S, i), indicating that the ith message from S in epoch vid was a challenge message.

- **Epoch IDs:** The receiving algorithm Rcv must correctly output a "sequence number" for each message received. A natural way to identify application messages is by the triple of epoch ID, sender, and index. However, the SGM scheme cannot be expected to output epoch identifiers vid used by the security game. Instead, the scheme gets to label the epochs itself whenever a commit is created by outputting an epoch ID \( E \). Algorithm Rcv will use the same \( E \) to refer to messages sent in the corresponding epoch. The security game stores the \( E \) used by the SGM scheme in array Ep-ID[vid].

- **Bad Randomness:** The game keeps track of which update proposals and commits were created with randomness known to the attacker with the help of the Boolean array BR[·]. This information must be recorded because such proposals/commits will not contribute to PCS.

##### 3.2.2 Oracles

All adversary oracles described below proceed according to the same pattern: (a) verifying the validity of the oracle call, (b) retrieving values needed for (c), (c) running the corresponding SGM algorithm, and (d) updating the bookkeeping. Validity checks (a) are described informally in the text below; a formal description is provided in Section D of the Appendix. To improve readability, lines (c) are highlighted.

- **Generate New Signature Key:**
  ```plaintext
  // ID generates new sig. key
  gen-new-SigK(ID)
  (s[ID], spk) ← Gen-SK(s[ID])
  skid ← idCtr++
  SK-ID[skid] ← ID
  SK-PK[skid] ← spk
  SK-St[ID] +← skid
  ```

### 4. Initialization

At the onset of the execution, the SGM security game initializes all of the bookkeeping variables listed above. Additionally, it randomly chooses the challenge bit \( b \), initializes a counter idCtr that serves to provide IDs for epochs (vid), for proposals (pid), for welcome keys (wkid), as well as for signature keys (skid), and sets up communication arrays dedicated to control and application messages. The initialization also initializes the state of all possible parties by running the Init algorithm and storing the result in the state array \( s[\cdot] \).

Finally, the first node of the history graph is created via a call to the HG.init method. This causes HG to create the root node \( v_{\text{root}} = (.vid \leftarrow \text{idCtr++}, .orig \leftarrow \bot, .data \leftarrow \bot, .pid \leftarrow \bot) \) and return vidroot = \( v_{\text{root}}.vid \).

### 5. Oracles

All adversary oracles described below proceed according to the same pattern: (a) verifying the validity of the oracle call, (b) retrieving values needed for (c), (c) running the corresponding SGM algorithm, and (d) updating the bookkeeping. Validity checks (a) are described informally in the text below; a formal description is provided in Section D of the Appendix. To improve readability, lines (c) are highlighted.

- **Generate New Signature Key:**
  ```plaintext
  // ID generates new sig. key
  gen-new-SigK(ID)
  (s[ID], spk) ← Gen-SK(s[ID])
  skid ← idCtr++
  SK-ID[skid] ← ID
  SK-PK[skid] ← spk
  SK-St[ID] +← skid
  ```