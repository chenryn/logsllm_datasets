作者：[廖新喜](https://mp.weixin.qq.com/s?__biz=MzU0NzYzMzU0Mw==&mid=2247483659&idx=1&sn=a89bfa211b5e7706967cf6e801a4496c&chksm=fb4a21e3cc3da8f5f2eec6c6d991e2b6b78630cf251f786da5f5b3b4ea034c0225c5cd643442#rd
"廖新喜")
### 背景
2017年OWASP发布了新的十大web漏洞威胁，其中A8:2017就是不安全的反序列化，A9:2017-使用含有已知漏洞的组件也和反序列化紧密相连，这是因为在Java开发中很多代码都依赖于第三方组件，而这些组件可能会存在反序列漏洞，典型的例子就是Jackson，fastjson，XStream，XMLDecoder等开源组件。序列化是对象转换成二进制，json，xml等存储格式。而反序列化恰好相反，则是将二进制，json，xml转换成相应的类。
在2017年绿盟科技NS-SRC 处理的漏洞应急中就有很大一部分是反序列化漏洞，下面我们来一一分析2017年我们应急的那些反序列化漏洞。
总得来说，2017年出现的反序列化漏洞和以往反序列漏洞在漏洞形成方式上不太一样，在以往都是由于Java自身的反序列特征导致的漏洞，2017年则多了fastjson，Jackson等，这两个库都能将json文本转换成具体的java
bean，在这个转换过程中会调用相应的setter方法和getter方法从而导致远程代码执行。2017年还出现关于XMLDecoder和XStream的应急，都是因为依赖问题导致的缺陷。
本报告重点回顾2017年绿盟科技重点应急，影响面非常广的那些反序列化漏洞。从这个报告中能看出反序列化漏洞的发展，攻击方和防御方不停的对抗过程，bypass和反bypass在这个过程中体现得淋漓尽致。
### 概述
应急路线
从3月份爆出Fastjson的反序列化特性导致的远程代码执行，四月份则是Jackson，Log4j2，Jenkins的反序列化造成的远程代码执行，接着6月份流出了Weblogic
CVE-2017-3248的利用代码。稍微消停了一会，Struts2又被安全研究人员盯上，爆出Struts2-052，又是一个远程代码执行。在11月份，由于Jackson官方对漏洞不敏感，接着又被曝CVE-2017-15095，又一个绕过。进入12月份，Fastjson和Jackson相继发布了几个补丁修复那些黑名单的绕过；Weblogic
XMLDecoder(CVE-2017-10352)的漏洞被广泛应用于于挖坑。由于很多漏洞都是远程代码执行，有的一个HTTP
POST请求就能getshell，所以备受黑产亲睐。
### 反序列化漏洞
#### 1 fastjson反序列化漏洞
2017年3月15日，fastjson官方发布安全公告表示fastjson在1.2.24及之前版本存在远程代码执行高危安全漏洞。攻击者可以通过此漏洞远程执行恶意代码来入侵服务器。fastjson官方建议直接升级到1.2.28/1.2.29或者更新版本来保证系统安全。4月29日，本文作者绿盟科技安全研究员廖新喜（xxlegend）构造出了Fastjson的反序列漏洞的PoC，引起了安全圈的广泛讨论。详细的分析可参照1，下面做简单的回顾。
##### 1.1 补丁
在ParserConfig.java中添加了checkAutoType，不论用户是否开启了autoTypeSupport功能，在类名被加载时都需要通过额外的一层处理（来判断是否在acceptlist里），只有满足了此限制的类名才会被加载。另外引入了黑名单机制，在开启了autoTypeSupport的情况下，如果加载的是黑名单中类也会抛出异常。补丁核心代码如下：
    public Class&lt;?&gt; checkAutoType(String typeName, Class&lt;?&gt; expectClass) {
             if (typeName == null) {
                 return null;
             }
             if (typeName.length() &gt;= maxTypeNameLength) {
                 throw new JSONException("autoType is not support. " + typeName);
             }
             final String className = typeName.replace('$', '.');
             if (autoTypeSupport || expectClass != null) {
                 for (int i = 0; i &lt; acceptList.length; ++i) {
                     String accept = acceptList[i];
                     if (className.startsWith(accept)) {
                         return TypeUtils.loadClass(typeName, defaultClassLoader);
                     }
                 }
                 for (int i = 0; i &lt; denyList.length; ++i) {
                     String deny = denyList[i];
                     if (className.startsWith(deny)) {
                         throw new JSONException("autoType is not support. " + typeName);
                     }
                 }
             }
             Class&lt;?&gt; clazz = TypeUtils.getClassFromMapping(typeName);
             if (clazz == null) {
                 clazz = deserializers.findClass(typeName);
             }
             if (clazz != null) {
                 if (expectClass != null &amp;&amp; !expectClass.isAssignableFrom(clazz)) {
                     throw new JSONException("type not match. " + typeName + " -&gt; " + expectClass.getName());
                 }
                 return clazz;
             }
##### 1.2 初略分析
静态分析得知，要构造一个可用的poc，肯定得引入denyList的库。这里我们就引入`com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl`类。
     final String NASTY_CLASS = "com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl";
             String text1 = "{\"@type\":\"" + NASTY_CLASS +
                     "\",\"_bytecodes\":[\""+evilCode+"\"],'_name':'a.b','_tfactory':{ },\"_outputProperties\":{ }," +
                     "\"_name\":\"a\",\"_version\":\"1.0\",\"allowedProtocols\":\"all\"}\n";
             System.out.println(text1);
             Object obj = JSON.parseObject(text1, Object.class, config, Feature.SupportNonPublicField);
最核心的部分是`_bytecodes`，它是要执行的代码，@type是指定的解析类，fastjson会根据指定类去反序列化得到该类的实例，在默认情况下，fastjson只会反序列化公开的属性和域，而`com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl`中`_bytecodes`却是私有属性，`_name`也是私有域，所以在parseObject的时候需要设置Feature.SupportNonPublicField，这样`_bytecodes`字段才会被反序列化。`_tfactory`这个字段在TemplatesImpl既没有get方法也没有set方法，这没关系，我们设置`_tfactory`为{
},fastjson会调用其无参构造函数得`_tfactory`对象，这样就解决了某些版本中在defineTransletClasses()用到会引用`_tfactory`属性导致异常退出。整个PoC的执行过程的调用栈如下:
    JSON.parseObject
     ...
     JavaBeanDeserializer.deserialze
     ...
     FieldDeserializer.setValue
     ...
     TemplatesImpl.getOutputProperties
     TemplatesImpl.newTransformer
     TemplatesImpl.getTransletInstance
     ...
     Runtime.getRuntime().exec
更多的原理分析可见2 。
##### 1.3 后续官方修补
fastjson官方后续又添加了一些补丁，本文作者给fastjson官方提交了两次绕过，fastjson官方都发布了相应更新。具体如下：
  1. fastjson-1.2.34版本发布，当autoType=true时增强安全防护
  2. fastjson-1.2.42版本发布 Bug修复安全加固
  3. fastjson-1.2.43版本发布 Bug修复安全加固
  4. fastjson-1.2.44版本发布 Bug修复安全加固
在fastjson-1.2.42版本中通过异或操作混淆了其黑名单，可以阻挡一部分人分析其黑名单内容，其实这是自欺欺人的。具体的黑名单分析读者可以自行研究。
#### 2 Jackson反序列化
Jackson是一个开源的Java序列化与反序列化工具，可以将java对象序列化为xml或json格式的字符串，或者反序列化回对应的对象，由于其使用简单，速度较快，且不依靠除JDK外的其他库，被众多用户所使用。但是其组件Jackson-databind可以指定特定的反序列化类，这样就存在代码执行的风险。
##### 2.1 CVE-2017-7525
这个CVE是本文作者报告的。下面来看一个Jackson官方的补丁，这个补丁主要是将TemplatesImpl加入了黑名单，从后续的CVE就可以看出这是远远不够的，可以通过各种方式绕过。
    +    protected void checkIllegalTypes(DeserializationContext ctxt, JavaType type,
     +            BeanDescription beanDesc)
     +        throws JsonMappingException
     +    {
     +        // There are certain nasty classes that could cause problems, mostly
     +        // via default typing -- catch them here.
     +        Class&lt;?&gt; raw = type.getRawClass();
     +        String name = raw.getSimpleName();
     +
     +        if ("TemplatesImpl".equals(name)) { // [databind#1599]
     +            if (raw.getName().startsWith("com.sun.org.apache.xalan")) {
     +                throw JsonMappingException.from(ctxt,
     +                        String.format("Illegal type (%s) to deserialize: prevented for security reasons",
     +                                name));
     +            }
     +        }
     +    }
      }
###### 2.1.1 分析
Jackson在反序列的过程中，首先扫描输入的json文件，分析其要反序列的类，通过反射的方式获取该类的构造方法，包括无参构造方法和有参构造方法，获取其setter，getter方法用于操作具体的类的属性。反序列的过程就是先通过反射得到一个实例，通过其setter或者getter方法给该实例的属性赋值，当然如果引入的类的setter方法或者getter方法中存在执行一些一些危险的操作，如利用rmi远程加载类则会造成远程代码执行缺陷。PoC示例图
详细分析可参考3。
##### 2.2 后续官方修补
CVE-2017-15095是CVE-2017-7525的延续，这个漏洞同样也是本文作者报告的。同样是黑名单的绕过。
CVE-2017-17485是CVE-2017-7525的延续，这个漏洞引入的类是`org.springframework.context.support.ClassPathXmlApplicationContext`,利用这个库的bean重新生成类，而这个bean所依赖的xml是由攻击者来定制的。从这里也可以看出黑名单就是个无底洞，深不可见，bypass也是不完。由于Jackson的特性，可以预测，Jackson在2018年还将出现更多的绕过。
#### 3 Struts2
struts2号称漏洞之王，2017应急中就处理了S2-045，S2-046，S2-48，S2-052，S2-055，都是远程代码执行级别的漏洞。S2-045的PoC现在还被黑客用于各种漏洞扫描，挖矿。既然是漏洞之王，那自然少不了反序列化，S2-052（CVE-2017-9805）就是XStream使用不当造成的反序列化。S2-055则是由于Jackson-databind导致的反序列化。这两个漏洞的典型特点都是不恰当的使用第三方库导致的。
##### 3.1 S2-052分析
根据官方的描述信息来看，是REST插件使用到XStreamHandler处理xml数据的时候，由于未对xml数据做任何过滤，在进行反序列将xml数据转换成Object时导致的RCE。