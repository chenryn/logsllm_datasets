# McTiny Protocol Overview and Security Analysis

## 1. Introduction
The McTiny protocol is designed to make the well-studied McEliece cryptosystem practical for tiny network servers. This document provides a detailed overview of the McTiny protocol, its phases, and its security considerations.

## 2. Protocol Phases

### 2.1 Phase 0: Key Generation and Initial Exchange
- **Key Generation**:
  - The server generates a key pair \((sk, pk) \leftarrow KGen\).
  - The client generates a key pair \((k, K) \leftarrow KGen\).

- **Initial Encryption**:
  - The client encrypts a message using the server's public key: \((\bar{c}, \bar{C}, S) \leftarrow ENC(pk)\).
  - A random value \(R \leftarrow \{0,1\}^{176}\) is generated.
  - The client sends \(AE(0 : R, 0, 0 : S)\), along with the hash of the public key, \(\bar{c}\), and \(\bar{C}\).

- **Server Processing**:
  - The server decrypts \(\bar{c}\) and \(\bar{C}\) using \(sk\) to retrieve \(S\).
  - A new random value \(N \leftarrow \{0,1\}^{176}\) and a seed \(E \leftarrow SeedGen\) are generated.
  - The server computes \(C_0 = (AE(S, E : N, 1, 0 : hash(sm)), m \mod 8)\) using the current cookie key \(sm\).
  - The server sends \(AE(C_0 : N, 1, 0 : S)\) and \((N, 1, 0)\) to the client.

### 2.2 Phase 1: Partial Public-Key Encryption
- **Client-Side**:
  - For each partial matrix \(K_{i,j}\), the client sends \(AE(K_{i,j} : N, 2(i-1), 64 + j-1 : S)\), \(C_0\), and \((N, 2(i-1), 64 + j-1)\) to the server.

- **Server-Side**:
  - The server verifies and decrypts the payload to obtain \(K_{i,j}\).
  - The server computes the partial matrix-vector multiplication \(c_{i,j} = K_{i,j} e_j\).
  - The server recomputes \(C_0\) and generates a client-specific cookie key \(s = hash(sm, S)\).
  - The server sends \(AE(C_0, C_{i,j} : M, 2i-1, 64 + j-1 : S)\) and \((M, 2i-1, 64 + j-1)\) to the client.

### 2.3 Phase 2: Row-wise Combination
- **Client-Side**:
  - Once the client has all blocks in one batch, it sends them for partial combination.
  - The client sends \(AE(C_{iv-v+1,1}, C_{iv-v+1,2}, \ldots, C_{iv,\ell} : N, 2(i-1), 64 + 32 : S)\), \(C_0\), and \((N, 2(i-1), 64 + 32)\).

- **Server-Side**:
  - The server decrypts and combines the partial encryptions to compute \(c_j\).
  - The server sends \(AE(C_0, c_{iv-v+1}, c_{iv-v+2}, \ldots, c_{iv} : M, 2i-1, 64 + 32 : S)\) and \((M, 2i-1, 64 + 32)\) to the client.

### 2.4 Phase 3: Decapsulation
- **Client-Side**:
  - The client sends \(c\) to the server.

- **Server-Side**:
  - The server computes the plaintext confirmation \(C = hash(2, e)\) and the shared secret \(Z = hash(1, e, c, C)\).
  - The server sends \(AE(CZ, c, C : M, 255, 255 : S)\) and \((M, 255, 255)\) to the client.
  - The client computes \(Z = DEC(c, C, k)\) and stores \(Z\) and the cookie \((CZ, M)\) for future use.

## 3. Security Considerations

### 3.1 Key Erasure
- **Server-Side**:
  - An attacker who steals the server can decapsulate all KEM messages and obtain shared keys \(S\).
  - However, unless there is a security problem with the McEliece system, the attacker cannot determine \(Z\) from the ciphertext.
  - The attacker can decrypt recent cookies but not older ones.

- **Client-Side**:
  - An attacker who steals a client can decrypt current connections, but the McTiny client software does not retain keys for past connections.

### 3.2 Passive External Attacker
- **Nonce Reuse**:
  - All packets use authenticated encryption with fresh nonces, ensuring no nonce reuse for different plaintexts.
  - Cookies encrypt the same message under different keys, which is secure.

### 3.3 Active External Attacker
- **McEliece KEM Security**:
  - The Classic McEliece KEM is secure against active attacks.
  - Authenticated encryption protects other packets against forgery and modification.

### 3.4 Malicious Client
- **Cookie Keys**:
  - A malicious client can send attack packets within the same cookie interval, but this is limited by the deterministic nature of the protocol.
  - The client can learn some bits of \(e\) prematurely, but learning \(e\) requires many more steps than a regular run.

## 4. Implementation and Evaluation

### 4.1 Tools
- **master**: Creates a new server identity.
- **rotate**: Updates the pool of server cookie keys.
- **server**: Handles the server side of the protocol.
- **client**: Performs the client side of the protocol.

### 4.2 RAM Consumption
- **Server**: 206,586 bytes of code, 792 bytes of initialized data, and 23,824 bytes of bss.
- **Rotate**: 920 bytes of initialized data and 944 bytes of bss.
- **Master**: 752 bytes of initialized data and 1,062,560 bytes of bss.
- **Client**: 800 bytes of initialized data and 1,154,648 bytes of bss.

### 4.3 Network Usage
- **Packets**: 971 packets from client to server and 971 packets from server to client.
- **Data**: 1,188,422 bytes from client to server and 135,977 bytes from server to client.

### 4.4 CPU Usage
- **Haswell Core**: 53 million cycles per key exchange on a quad-core 3.1GHz Intel Xeon E3-1220 v3.

### 4.5 Security Against Overload
- **CPU Overload**: The server handles 810 bytes of application-layer data with about 400 cycles per byte, making it resilient to overload.

### 4.6 Security Against Memory Flooding
- **Memory Management**: The server does not allocate per-client storage, making it immune to memory denial of service.

## 5. Conclusions and Further Considerations
The McTiny protocol achieves forward secrecy with minimal overhead in the number of packets and round trips. Further analysis and proofs are encouraged to ensure the robustness of the protocol and its variants.

## 6. Acknowledgments
This work was supported by various grants and research programs, including the U.S. National Science Foundation, the European Commission, and the Deutsche Forschungsgemeinschaft (DFG).

## 7. References
[1] Albrecht, M. R., Ducas, L., Herold, G., Kirshanova, E., Postlethwaite, E. W., & Stevens, M. (2019). The general sieve kernel and new records in lattice reduction. In EUROCRYPT (2), volume 11477 of Lecture Notes in Computer Science, pages 717–746. Springer.
[2] Augot, D., Batina, L., Bernstein, D. J., Bos, J., Buchmann, J., Castryck, W., ... & Yang, B.-Y. (2015). Initial recommendations of long-term secure post-quantum systems. PQCRYPTO project.
[3] Aura, T., & Nikander, P. (1997). Stateless connections. In Information and Communication Security, First International Conference, ICICS’97, Beijing, China, November 11–14, 1997, Proceedings, volume 1334 of Lecture Notes in Computer Science, pages 87–97. Springer.
[4] Bernstein, D. J. (1996). SYN cookies. https://cr.yp.to/syncookies.html.
[5] Bernstein, D. J. (2009). DNSCurve: Usable security for DNS. https://dnscurve.org.
[6] Bernstein, D. J., Chou, T., Lange, T., von Maurich, I., Misoczki, R., Niederhagen, R., ... & Schwabe, P. (2017). Classic McEliece: Conservative Code-Based Cryptography. In Submission to the NIST Post-Quantum Cryptography Standardization Project.