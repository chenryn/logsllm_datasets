# Backdooring Hardware Devices by Injecting Malicious Payloads on Microcontrollers

By Sheila A. Berta (@UnaPibaGeek)

## About the Author
**Sheila A. Berta (@UnaPibaGeek)**
- **Role:** Offensive Security Researcher
- **Skills:**
  - Developer in ASM (Microcontrollers & Microprocessors x86/x64), C/C++, Python, and Go.
  - Speaker at Black Hat (x2), DEF CON (x2), Ekoparty (x4), HITB, PhDays, IEEE, and more.

## Microcontrollers vs. Microprocessors

### Microprocessors
- **Examples:** Intel, AMD, ARM
- **Features:**
  - CPU only; memories and I/O busses are physically separated.
  - Usually larger than microcontrollers.
  - Greater processing capacity.
  - Modified-Harvard memory organization.
  - 32 or 64 bits (most common).

### Microcontrollers
- **Examples:** Microchip, ATMEL, ST
- **Features:**
  - Integrated CPU, RAM, ROM, and I/O busses.
  - Smaller CPU with less processing capacity.
  - Typically smaller in size compared to microprocessors.
  - Harvard memory organization.
  - 16 bits (most common).
  - Limited stack space.

## Use Cases
- **Raspberry PI (ARM Microprocessor)**
- **Arduino UNO (Atmega Microcontroller)**

## Microcontrollers Evolution
- [Details about the evolution of microcontrollers]

## Is It Worth It?
- **Physical Security Systems**
- **Car's ECU**
- **Semaphores**
- **Elevators**
- **Sensors**
- **Industrial System Modules**
- **Home Appliances**
- **Robots**

## Microcontrollers Programming
- **ASM Code Example for Turning on a LED (PIC)**
- **MPLAB X IDE**
- **.hex File (Firmware)**
- **Microchip (PIC) Programmer Software and Hardware**

## Program Memory Dump
### Steps:
1. **Connection from PIC Microcontroller to PICKIT 3**
2. **Using MPLAB X IDE to Read (and Dump) the Program Memory**
   - Step-by-step process with screenshots.
3. **Load the .hex File in the MPLAB X IDE**

### Example
- **ASM Source Code**
- **Disassembly**
- **OpCodes in the .hex Dump**

## Payload Injection: At the Entry Point
### Program Standard Structure (PIC)
- **Reset Vector:** Always at 0x0000 memory address
- **Interrupt Vector:** At 0x0008 and 0x0018 memory addresses
- **Program Entry Point**

### Locating the Entry Point
- **Simple Program Example**
- **Large Program Example**
- **Example 1 -- Entry point: 0x06**
- **Example 2 -- Entry point: 0x7F84**

### Generating the Payload #1 (PoC)
- **ASM Code Example:**
  ```asm
  BCF TRISD,1  // Set PIN as output
  BSF PORTD,1  // Turn ON a LED
  BCF TRISD,2  // Set PIN as output
  BSF PORTD,2  // Turn ON a LED
  ```
- **Hex Codes:**
  - `0x9295 = BCF TRISD,1`
  - `0x8283 = BSF PORTD,1`
  - `0x9495 = BCF TRISD,2`
  - `0x8483 = BSF PORTD,2`
  - **Little Endian:** `0x9592 0x8382 0x9594 0x8384`

### Injecting the Payload
- **Entry Point at 0x28**
- **Original Program Memory (.hex dump)**
- **Entry Point Offset**
- **Checksum Calculation**
- **Payload Injected at Entry Point (0x28)**

### Checksum Recalculation
- **Formula: Sum(bytes on the line) = Not +1 = checksum**
- **Example:**
  - `:1000000003EF00F00000959E838E836A000E956E`
  - **Sum:** `0x634`
  - **Not(0x634) +1 = 0xFFFF 0xFFFF 0xFFFF 0xF9CC`
  - **Checksum:** `0xCC`
- **Online Tool:** [https://www.fischl.de/hex_checksum_calculator/]

### Writing the Program Memory
- **Before / After (PoC)**
  - **Original**
  - **Payload Injected**

### Advanced Payload Injection: At the Interrupt Vector
- **Peripherals and Interruptions:**
  - Internal timers
  - A/D converters
  - CCP (Capture/Compare/PWM)
  - TX/RX busses
  - Others

### Injecting to a Carâ€™s ECU
- **IGNITION KEY**
- **Entry Point: 0x152A**

This optimized version provides a clear, professional, and structured overview of the topic, making it easier to follow and understand.