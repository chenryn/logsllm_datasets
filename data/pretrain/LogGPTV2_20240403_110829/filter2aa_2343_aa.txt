Backdooring hardware devices 
by injecting malicious payloads
on microcontrollers_
By Sheila A. Berta (@UnaPibaGeek)
@UnaPibaGeek
WHO AM I?_
Sheila A. Berta (@UnaPibaGeek)
Offensive Security Researcher
@UnaPibaGeek
WHO AM I?_
Sheila A. Berta (@UnaPibaGeek)
Offensive Security Researcher
A little bit more:
-
Developer in ASM (Microcontrollers & Microprocessors x86/x64), C/C++, Python and Go.
-
Speaker at Black Hat (x2), DEF CON (x2), Ekoparty (x4), HITB, PhDays, IEEE… & more.
@UnaPibaGeek
@UnaPibaGeek
@UnaPibaGeek
MICROCONTROLLERS VS MICROPROCESSORS_
Microprocessors
Intel, AMD, ARM
…
Microcontrollers
Microchip, ATMEL, ST
…
@UnaPibaGeek
MICROPROCESSORS OVERVIEW_
• Microprocessors = CPU
• Memories and I/O busses are physically separated.
• Usually bigger than a microcontroller.
• Greater processing capacity. 
• Modified-Harvard memory organization.
• 32 or 64 bits (most common).
@UnaPibaGeek
MICROCONTROLLERS OVERVIEW_
• Microcontrollers = CPU + RAM + ROM + I/O busses
• Smaller CPU with less processing capacity.
• Usually smaller size than microprocessors. 
• Harvard memory organization.
• 16 bits (most common).
• A little stack.
@UnaPibaGeek
USE CASES_
!=
Raspberry PI
ARM Microprocessor
Arduino UNO
Atmega Microcontroller
@UnaPibaGeek
MICROCONTROLLERS EVOLUTION_
@UnaPibaGeek
MICROCONTROLLERS EVOLUTION_
@UnaPibaGeek
MICROCONTROLLERS EVOLUTION_
@UnaPibaGeek
MICROCONTROLLERS EVOLUTION_
@UnaPibaGeek
IS WORTH IT?_
• Physical Security Systems.
• Car’s ECU.
• Semaphores.
• Elevators.
• Sensors.
• Modules of Industrial systems.
• Home appliances.
• Robots.
• …
@UnaPibaGeek
MICROCONTROLLERS 
PROGRAMMING_
@UnaPibaGeek
MICROCONTROLLERS PROGRAMMING_
@UnaPibaGeek
MICROCONTROLLERS PROGRAMMING_
ASM code to turning on a LED - (PIC)
@UnaPibaGeek
MICROCONTROLLERS PROGRAMMING_
ASM code to turning on a LED - (PIC)
MPLAB X IDE
@UnaPibaGeek
MICROCONTROLLERS PROGRAMMING_
ASM code to turning on a LED - (PIC)
MPLAB X IDE
.hex file (firmware)
@UnaPibaGeek
MICROCONTROLLERS PROGRAMMING_
Microchip (PIC) programmer software
Microchip (PIC) programmer hardware
@UnaPibaGeek
PROGRAM MEMORY 
DUMP_
@UnaPibaGeek
PIC MEMORY ORGANIZATION_
non-volatile
non-volatile
volatile
@UnaPibaGeek
PROGRAM MEMORY DUMP (STEP 1)_
Connection from PIC microcontroller to PICKIT 3
@UnaPibaGeek
PROGRAM MEMORY DUMP (STEP 2)_
Using MPLAB X IDE to read (and dump) the program memory
1
@UnaPibaGeek
PROGRAM MEMORY DUMP (STEP 2)_
Using MPLAB X IDE to read (and dump) the program memory
1
2
@UnaPibaGeek
PROGRAM MEMORY DUMP (STEP 2)_
Using MPLAB X IDE to read (and dump) the program memory
1
2
3
@UnaPibaGeek
PROGRAM MEMORY DUMP (STEP 2)_
Using MPLAB X IDE to read (and dump) the program memory
1
2
3
4
@UnaPibaGeek
PROGRAM MEMORY DUMP (STEP 3)_
Load the .hex file in the MPLAB X IDE 
@UnaPibaGeek
PROGRAM MEMORY DUMP (STEP 3)_
Load the .hex file in the MPLAB X IDE 
@UnaPibaGeek
CODE VS DISASSEMBLY  (EXAMPLE)_
ASM source code
Disassembly
@UnaPibaGeek
CODE VS DISASSEMBLY  (EXAMPLE)_
OpCodes in the .hex dump
ASM source code
Disassembly
@UnaPibaGeek
PAYLOAD INJECTION: 
AT THE ENTRY POINT_
@UnaPibaGeek
PROGRAM STANDARD STRUCTURE (PIC)_
Reset Vector: always at 0x0000 memory address 
Interrupt Vector: at 0x0008 and 0x0018 memory addresses 
Program entry point
@UnaPibaGeek
LOCATING THE ENTRY POINT_
@UnaPibaGeek
LOCATING THE ENTRY POINT_
Entry point
Simple program example
@UnaPibaGeek
LOCATING THE ENTRY POINT_
Entry point
Simple program example
Large program example
@UnaPibaGeek
LOCATING THE ENTRY POINT_
Entry point
Simple program example
Large program example
Example 1 -- Entry point: 0x06
Example 2 -- Entry point: 0x7F84
Memory address to inject
Memory address to inject
@UnaPibaGeek
GENERATING THE PAYLOAD #1 (PoC)_
BCF
TRISD,1
// Set PIN as output
BSF
PORTD,1
// Turn ON a LED
BCF
TRISD,2
// Set PIN as output
BSF
PORTD,2
// Turn ON a LED
@UnaPibaGeek
GENERATING THE PAYLOAD #1 (PoC)_
BCF
TRISD,1
// Set PIN as output
BSF
PORTD,1
// Turn ON a LED
BCF
TRISD,2
// Set PIN as output
BSF
PORTD,2
// Turn ON a LED
@UnaPibaGeek
GENERATING THE PAYLOAD #1 (PoC)_
BCF
TRISD,1
// Set PIN as output
BSF
PORTD,1
// Turn ON a LED
BCF
TRISD,2
// Set PIN as output
BSF
PORTD,2
// Turn ON a LED
0x9295 = BCF TRISD,1
0x8283 = BSF
PORTD,1
0x9495 = BCF TRISD,2
0x8483 = BSF PORTD,2
@UnaPibaGeek
GENERATING THE PAYLOAD #1 (PoC)_
BCF
TRISD,1
// Set PIN as output
BSF
PORTD,1
// Turn ON a LED
BCF
TRISD,2
// Set PIN as output
BSF
PORTD,2
// Turn ON a LED
0x9295 = BCF TRISD,1
0x8283 = BSF
PORTD,1
0x9495 = BCF TRISD,2
0x8483 = BSF PORTD,2
Little Endian: 0x9592 0x8382 0x9594 0x8384 
@UnaPibaGeek
INJECTING THE PAYLOAD_
Entry point at 0x28
Original program memory (.hex dump)
@UnaPibaGeek
INJECTING THE PAYLOAD_
Entry point at 0x28
Original program memory (.hex dump)
@UnaPibaGeek
INJECTING THE PAYLOAD_
Entry point at 0x28
Original program memory (.hex dump)
Entry point offset
@UnaPibaGeek
INJECTING THE PAYLOAD_
Entry point at 0x28
Original program memory (.hex dump)
Entry point offset
Checksum
@UnaPibaGeek
INJECTING THE PAYLOAD_
Entry point at 0x28
Original program memory (.hex dump)
Entry point offset
Checksum
Payload injected at entry point (0x28)
@UnaPibaGeek
CHECKSUM RECALCULATION_
Sum(bytes on the line) = Not +1 = checksum
@UnaPibaGeek
CHECKSUM RECALCULATION_
Sum(bytes on the line) = Not +1 = checksum
Example: :1000000003EF00F00000959E838E836A000E956E
@UnaPibaGeek
CHECKSUM RECALCULATION_
Sum(bytes on the line) = Not +1 = checksum
Example: 
10+00+00+00+03+EF+00+F0+00+00+95+9E+83+8E+83+6A+00+0E+95+6E = 0x634
Not(0x634) +1 = 0xFFFF 0xFFFF 0xFFFF 0xF9CC
Checksum = 0xCC
:1000000003EF00F00000959E838E836A000E956E
@UnaPibaGeek
CHECKSUM RECALCULATION_
https://www.fischl.de/hex_checksum_calculator/
@UnaPibaGeek
CHECKSUM RECALCULATION_
https://www.fischl.de/hex_checksum_calculator/
Payload injected and checksum fixed
@UnaPibaGeek
WRITE THE PROGRAM MEMORY_
@UnaPibaGeek
BEFORE / AFTER (PoC)_
Original
@UnaPibaGeek
BEFORE / AFTER (PoC)_
Original
Payload injected
@UnaPibaGeek
INJECTING TO A CAR’S ECU_
IGNITION
KEY
@UnaPibaGeek
INJECTING TO A CAR’S ECU_
IGNITION
KEY
Entry point: 0x152A
@UnaPibaGeek
INJECTING TO A CAR’S ECU_
IGNITION
KEY
Entry point: 0x152A
@UnaPibaGeek
ADVANCED 
PAYLOAD INJECTION: 
AT THE INTERRUPT VECTOR_
@UnaPibaGeek
PERIPHERALS AND INTERRUPTIONS_
•
Internal timers
•
A/D converters
•
CCP (Capture/Compare/PWM)
•
TX/RX busses
•
Others
@UnaPibaGeek
PERIPHERALS AND INTERRUPTIONS_
•
Internal timers
•
A/D converters