/tcb/) The shadow password file on a UNIX system typically contains a hashed 
form of passwords for each user. An unprivileged program being able to read 
the shadow password information can often lead to further compromise. 
Weakly constructed passwords can be discovered through a dictionary attack 
with the use of a password-cracking program, such as Solar Designer's John 
the Ripper tool (www.openwall.com). Unpassworded accounts stick out in the 
shadow file because they are missing a hash. A program that can write to 
these files can typically grant itself root access. Manipulating or corrupting 
these files usually disables a machine until an administrator re-creates them. 
Host equivalency (/etc/hosts.equiv, .rhosts, .shosts) These files indicate 
which hosts and users can log in to the machine without authenticationthat is, 
which hosts and users are considered to be trusted. Trust relationships are 
sometimes found in internal networks because they make administration and 
scripted tasks simpler. Note that ssh daemons honor these trust 
configurations if they are configured to do so. Attackers who discover these 
trust relationships can attempt to access trusted machines or even launch a 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
528 
network-level attack via IP spoofing (masquerading as being from a trusted IP 
address). Attacker who can write to these files can often gain root access by 
forcing the machine to trust them. 
/etc/ld.preload.so If attackers can write to certain shared libraries, they can 
potentially insert code that multiple programs on the machine run. 
/etc/nologin, /etc/hosts.allow Creating these files can effectively disable a 
system. 
Personal User Files 
Personal user files might also be of interest to attackers, because there are not only 
sensitive files in a typical user's directory, but also configuration files that are used by 
various applications on the system. This list is a brief summary of some interesting 
personal user files: 
Shell histories (.sh_history, .ksh_history, .bash_history, .history) Shell 
histories are files containing a log of each command users enter in their 
command shells. Attackers could use these files to observe the behavior of 
other users in an attempt to discover potential attack targets on the system or 
discover other systems users commonly log into. 
Shell login and logout scripts (.profile, .bashrc, cshrc, .login) These files run 
automatically when users log in or out. Attackers might be able to use these 
files to find potential attack targets on the system, such as programs with 
temporary file race conditions that are run by root at login. Of course, the 
ability to write to these files would represent an imminent threat, because the 
attacker could add arbitrary commands to the file that will be executed when 
the user next logs in. 
Mail spools Mail for system users is another target that could prove quite 
useful to attackers, as users often have sensitive and confidential information 
in their e-mail, and administrators discuss security issues, such as account 
credentials and existing vulnerabilities. The mail spool directory is often a 
mode 777 sticky directory, which is susceptible to manipulation by 
unprivileged attackers. 
Program Configuration Files and Data 
Program-specific configuration files and data can also be useful to attackers. Reading 
configuration files might enable them to find weaknesses or sensitive information that 
can be used to achieve a higher level of compromise. Modifying file data usually has 
more immediate and drastic consequences, such as gaining privileges of the 
application using the configuration file. The following list describes some 
configuration and data files that would be of interest to an attacker: 
Web-related files Web applications typically have static configuration files with 
database credentials inline. Any authentication mechanism that's local to the 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
529 
Web server might use static files with password information, such as 
Apache's .htpasswd file. Furthermore, because Web applications are often 
written in scripting languages, the source code might be valuable to attackers. 
Because the source gives them a detailed understanding of how the Web 
application works, they could use it to attempt to find a vulnerability in a Web 
service. Web applications are discussed in Chapters 17(? [????.]), "Web 
Applications," and 18(? [????.]), "Web Technologies." 
SSH configuration files The secure shell (SSH) program contains configuration 
files and parameters that can be used to compromise other users' accounts if 
they can be read and modified. As noted previously, placing an .shosts file in 
a user's directory allows you to log in as them without any credentials (if 
rhosts configuration options are enabled in the SSH server). Being able to read 
and modify sensitive key files can similarly lead to account compromises. 
Temporary files Temporary files are usually stored in a public directory such as 
/var/tmp or /tmp, which is usually a sticky directory that's mode 777. 
Log Files 
Logs sometimes contain sensitive information, such as users' passwords if they 
mistakenly enter them at a username prompt. Editing logs allows attackers to cover 
up evidence of any attack behavior. Log files are often in subdirectories of /var, such 
as /var/log. 
Program Files and Libraries 
Being able to write over a program file or library can almost certainly lead to a 
privilege escalation. For example, in a BSD system, the pwdb_mkdb program runs as 
root when users modify their account information entry in the password file. Users 
who can overwrite this binary could run arbitrary code in the context of the root user. 
Similarly, if attackers can write over shared libraries, they can potentially insert code 
that's run by multiple programs across the machine. 
Kernel and Boot Files 
If attackers can write to the kernel file or files used in the booting process, they can 
potentially insert or modify code that's used the next time the machine is rebooted. 
Device Files 
As mentioned, device files look just like regular files available to users on the file 
system, except they access devices rather than regular files. The device files present 
on a UNIX system vary widely depending on the UNIX variant, but some common 
ones are listed here: 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
530 
Virtual device drivers Denial-of-service conditions can often be caused by 
forcing a program to read a file of infinite size or a file that causes constant 
blocking. On UNIX systems, files such as /dev/zero, /dev/random, and 
/dev/urandom can be used to generate endless amounts of data, which can 
keep a process tied up parsing meaningless information or blocking. 
Raw memory devices Some systems contain raw memory devices that allow 
reading and writing directly to memory. Usually, a system contains a /dev/mem 
file, which provides access to physical memory available on the system. Being 
able to write to this file would result in a kernel-level compromise. Other 
memory files, such as /dev/kmem, also allow writing to virtual memory 
locations in the kernel. 
Hardware device drivers Hardware devices often have corresponding device 
files used to access the device in question. For example, a printer device might 
be accessible via /dev/lpX. Accessing hardware devices when a program 
intends to manipulate regular files usually results in the application ceasing to 
function correctly. 
Terminal devices Users interact with the shell through the use of terminal 
devices (or pseudo-terminal devices). They are usually named /dev/ttyX, 
/dev/ptyX, or something similar. Gaining access to these devices might allow 
attackers to read data from other users' sessions or insert keystrokes in their 
session, thus assuming their privileges. 
Named Pipes 
Providing named pipes instead of regular files could be of interest to attackers, 
particularly for timing-based attacks (discussed in the IPC section in Chapter 10(? 
[????.]), "UNIX II: Processes"). In addition, if an application opens a named pipe, it 
allows the owner of the pipe to deliver the SIGPIPE signal, which could be used to 
perform a signal-based attack. Signals are covered in depth in Chapter 13(? [????.]). 
The Proc File System 
Some UNIX OSs provide other interesting files in /proc that could be leveraged for 
file-based attacks. For example, a daemon running as an unprivileged user has 
permissions to read its own /proc/pid/mem filea virtual file that can be used to read 
and write to the current process's memory. If the daemon is tricked into reading this 
file and outputting the results, it could leak sensitive information to users. Another 
useful file in the proc file system is the kcore file, which could be used to read sensitive 
data in kernel memory. 
7.5.6 File Internals 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
531 
When you're studying complex file vulnerabilities, such as race conditions and linking 
attacks, having a basic grasp of UNIX file internals is useful. Naturally, UNIX 
implementations differ quite a bit under the hood, but this explanation takes a 
general approach that should encompass the major features of all implementations. 
This discussion doesn't line up 100% with a particular UNIX implementation, but it 
should cover the concepts that are useful for analyzing file system code. 
File Descriptors 
UNIX provides a consistent, file-based interface that processes can use to work with 
a fairly disparate set of system resources. These resources include files, hardware 
devices, special virtual devices, network sockets, and IPC mechanisms. The 
uniformity of this file-based interface and the means by which it's supported in the 
kernel provide a flexible and interoperable system. For example, the code used to talk 
with a peer over a named pipe could be used to interact with a network socket or 
interact with a program file, and retargeting would involve little to no modification. 
For every process, the UNIX kernel keeps a list of its open files, known as the file 
descriptor table. This table contains pointers to data structures (discussed in more 
detail in Chapter 10(? [????.])) in the kernel that encapsulate these system resources. 
A process generally opens a normal, disk-backed file by calling open() and passing a 
pathname to open. The kernel resolves the pathname into a specific file on the disk 
and then loads the necessary file data structures into memory, reading some 
information from disk. The file is added to the file descriptor table, and the position, 
or index, of the new entry in the file descriptor table is handed back to the process. 
This index is the file descriptor, which serves as a unique numeric token the process 
can use to refer to the file in future system calls. 
Figure 9-3 shows a file descriptor table for a simple daemon. File descriptors 0, 1, and 
2, which correspond to standard input, standard output, and standard error, 
respectively, are backed by the device driver for the /dev/null file, which simply 
discards anything it receives. File descriptor 3 refers to a configuration file the 
program opened, named /etc/config. File descriptor 4 is a TCP network connection to 
the 1.2.3.4 machine's Web server. 
Figure 9-3. Simplified view of a file descriptor table 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
532 
File descriptors are typically closed when a process exits or calls close() on a file 
descriptor. A process can mark certain file descriptors as close-on-exec, which 
means they are automatically closed if the process executes another program. 
Descriptors that aren't marked close-on-exec persist when the new program runs, 
which has some security-related consequences addressed in Chapter 10(? [????.]). 
File descriptors are duplicated automatically when a process uses a fork(), and a 
process can explicitly duplicate them with a dup2() or fcntl() system call. 
Inodes 
The details of how file attributes are stored are up to the file system code, but UNIX 
has a data structure it expects the file system to be able to fill out from its backing 
data store. For each file, UNIX expects an information node (inode) that the file 
system can present. In the more straightforward, classic UNIX file systems, inodes 
are actual data structures existing in physical blocks on the disk. In modern file 
systems, they aren't quite as straightforward, but the kernel still uses the concept of 
an inode to track all information for a file, regardless of how that information is 
ultimately stored. 
So what's in an inode? Inodes have an inode number, which is unique in the file 
system. Every file system mounted on a UNIX machine has a unique device number. 
Therefore, every file on a UNIX system can be uniquely identified by the combination 
of its device number and its inode number. Inodes contain a file type field that can 
indicate the file is an ordinary file, a character device, a block device, a UNIX domain 
socket, a named pipe, or a symbolic link. Inodes also contain the owner ID, group ID, 
and file permission bits for the file as well as the file size in bytes; access, modification, 
and inode timestamps; and the number of links to the file. 
The term "inode" can be confusing, because it refers to two different things: an inode 
data structure stored on a disk and an inode data structure the kernel keeps in 
memory. The inode data structure on the disk contains the aforementioned file 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
533 
attributes as well as pointers to data blocks for the file on the disk. The inode data 
structure in kernel memory contains all the disk inode information as well as 
additional attributes and data and pointers to associated kernel functions for working 
with the file. When the kernel opens a file, it creates an inode data structure and asks 
the underlying file system driver to fill it out. The file system code might read in an 
inode from the disk and fill out the kernel's inode data structure with the retrieved 
information, or it could do something completely different. The important thing is that 
for the kernel, each file is manipulated, tracked, and maintained through an inode. 
Inodes are organized and cached so that the kernel and file system can access them 
quickly. The kernel primarily deals with files using inodes rather than filenames. 
When a process makes a system call that has a pathname argument, the kernel 
resolves the pathname into an inode, and then performs the requested operation on 
the inode. This explanation is a bit oversimplified, but it's enough for the purposes of 
this discussion. Anyway, when a file is opened and stored in the file descriptor table, 
what's placed there is a pointer to a chain of data structures that eventually leads to 
the inode data structure associated with the file. 
Note 
Chapter 10(? [????.]) explains the data structures involved in associating the file 
descriptor table with an inode data structure. These constructs are important for 
understanding how files and file descriptors are shared among processes, but you can 
set them aside for now. 
Directories 
A directory's contents are simply the list of files the directory contains. Each item in 
the list is called a directory entry, and each entry contains two things: a name and 
an inode number. You might have noticed that the filename isn't stored in the file 
inode, so it's not kept on the file system as a file attribute. This is because filenames 
are only instructions that tell the kernel how to walk through directory entries to 
retrieve an inode number for a file. 
For example, specifying the filename /tmp/testing/test.txt tells the kernel to start 
with the root directory inode, open it, and read the directory entry with the name tmp. 
This information gives the kernel an inode number that corresponds to the tmp 
directory. The kernel opens that inode and reads the entry with the name testing. 
This information gives the kernel an inode number for the testing directory. The 
kernel then opens this inode and reads the directory entry with the name test.txt. 
The inode number the kernel gets is the inode of the file, which is all that the kernel 
needs for operating on the file. 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
534 
Figure 9-4 shows a simple directory hierarchy. Each box represents an inode. The 
directory inodes have a list of directory entries below them, and each ordinary file 
inode contains its file contents below its attributes. The figure shows the following 
simple directory hierarchy: 
fred.txt 
jim/ 
        bob.txt 
Figure 9-4. Directories at play 
[View full size image] 
The leftmost inode is a directory containing the fred.txt file and the jim directory. 
You don't know this directory's name because you have to see its parent directory to 
learn that. It has an inode number of 1000. The jim directory has an inode of 700, and 
you can see that it has only one file, bob.txt. 
If a process has a current directory of the directory in inode 1000, and you call 
open("jim/bob.txt", O_RDWR), the kernel translates the pathname by reading the 
directory entries. First, the directory at inode 1000 is opened, and the directory entry 
for jim is read. The kernel then opens the jim directory at inode 700 and reads the 
directory entry for bob.txt, which is 900. The kernel then opens bob.txt at inode 900, 
loads it into memory, and associates it with an entry in the file descriptor table. 
7.5.7 Links 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
535 
UNIX provides two mechanisms for users to link fileshard links and soft links. Hard 
links allow users to create a single file with multiple names that can be located in 
different directories. Symbolic links allow users to create a special file that points to a 
file or directory in a different location. Attackers have used both mechanisms to 
subvert file system interaction code, so you examine them in detail in the following 
sections. 
Symbolic Links 
Symbolic links, also known as symlinks or soft links, allow users to create a file or 
directory that points to another file or directory. For example, an administrator can 
make a symbolic link called /home that points to the /mnt/disks/disk3a/ directory. 
Users could then work with files in their home directories in /home/, and everything 
would be redirected behind the scenes to the disk3a directory. Similarly, a user could 
make a symbolic link named computers in his home directory that points to the system 
file /etc/hosts. If the user opens computers for reading, he is actually opening the 
/etc/hosts file, but it would appear as though the file is in the user's home directory. 
Symbolic links, created with the symlink() system call, are actually special small files 
placed in the file system. Their inodes are marked as a type symbolic link, and their 
actual file contents are a file path. When the kernel is resolving a pathname, if it 
encounters a symbolic link file, it reads in the file path in the symbolic link, follows the 
symlink's file path until it's complete, and then resumes its original path traversal. 
The file path in the symlink can be an arbitrary pathname, as long as it's valid enough 
to get the kernel to a destination. 
Figure 9-5 shows what soft links look like at the directory entry level. In this figure, 
you have two directories. The name of the top directory isn't visible in the diagram, 
but assume it's thatdir. Say you're in the bottom directory, inode 1100, and you open 
the test.txt file. It has the inode 1300, and you can see it's a symbolic link inode. The 
kernel automatically opens the symbolic link file at inode 1300 and reads in the file 
path ../thatdir/fred.txt. The kernel opens ../ and goes back to inode 200. It then 
opens thatdir and enters inode 1000 (the top directory). It looks up fred.txt and 
goes to inode 500, which is the text file. 
Figure 9-5. Symbolic link diagram 
[View full size image] 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
536 
Symlink Syscalls 
Because symbolic links are actually files on the file system, system calls can react to 
their presence in two ways. Some system calls follow symbolic links automatically, 
and others operate on the special symbolic link file. The following calls have 
symlink-aware semantics: 
If unlink() is provided a file that's a symbolic link, it deletes the symbolic link, 
not the target. 
If lstat() is provided a file that's a symbolic link, it returns the information 
about the symbolic link, not about its target. 
If lchown() is provided a file that's a symbolic link, it changes the user and 
group of the symbolic link file, not the target. 
readlink() is used to read the contents of the symbolic link file specified in its 
argument. 
If rename() has a from argument that's a symbolic link, the symbolic link file is 
renamed, not its target. If rename() has a to argument that's a symbolic link, 
the symbolic link file is overwritten, not its target. 
Symbolic Link Attacks 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
537 