# Title: A Hybrid Fault Injection Approach Based on Simulation and Emulation Co-operation

## Authors:
- Alireza Ejlali<sup>1</sup>
- Seyed Ghassem Miremadi<sup>2</sup>
- Hamidreza Zarandi<sup>1</sup>
- Ghazanfar Asadi<sup>1</sup>
- Siavash Bayat Sarmadi<sup>1</sup>

### Affiliations:
- Department of Computer Engineering, Sharif University of Technology, Azadi Ave., Tehran, Iran
- <sup>1</sup>{ejlali, zarandi, asadi, bayat}@ce.sharif.edu
- <sup>2</sup>PI:EMAIL

---

## Abstract
This paper introduces a novel fault injection approach that leverages the cooperation between a simulator and an emulator. This hybrid method combines the advantages of both simulation-based and physical fault injection to achieve high controllability, observability, and speed in fault injection experiments. The proposed approach involves simulating parts of a circuit while emulating the remaining components. A fault injection tool, FITSEC (Fault Injection Tool based on Simulation and Emulation Co-operation), has been developed to support the entire system design process. FITSEC is compatible with both Verilog and VHDL languages and can inject faults at various levels of abstraction. Experimental results demonstrate that this approach significantly reduces the time required for fault injection campaigns.

---

## 1. Introduction
Fault injection is a critical technique for experimentally evaluating the dependability of computer systems. There are two main categories of fault injection: simulation-based fault injection [26][39] and physical fault injection [2][17][34].

**Advantages of Simulation-Based Fault Injection:**
- Can be used early in the design cycle [2][26].
- Provides good controllability and observability [39].

**Drawbacks of Simulation-Based Fault Injection:**
- Time-consuming, especially for detailed models [15].
- Simulated models cannot be connected to real application environments.

Physical fault injection, particularly using FPGA-based emulators, has been employed to inject faults into designs [13][23][38]. These methods, however, do not address the evaluation of fault-tolerant systems. Some efforts have been made to use FPGA-based emulators for fast evaluation of fault-tolerant systems [10][12][15], but they are limited to bit-flip faults in flip-flops and cannot handle non-synthesizable models. During the design cycle, some components are described as non-synthesizable behavioral models, making FPGA-based fault injection unsuitable until the final steps when a fully synthesizable model is available.

In this paper, we present a new fault injection approach that combines the benefits of simulation-based and FPGA-based fault injection. By simulating parts of a circuit and emulating the rest, our approach offers:
- Faster execution compared to pure simulation.
- Compatibility with both synthesizable and non-synthesizable models.
- Evaluation of the target system in a real application environment.
- Good controllability and observability through the use of a simulator.

We have developed FITSEC, a fault injection tool that supports the entire system design process. To demonstrate the features of our approach, we apply FITSEC to a 32-bit processor, DP32, as a case study.

The paper is organized as follows: Section 2 reviews related research, Section 3 provides an overview of the FITSEC approach and tool, Section 4 explains how FITSEC injects faults into models, Section 5 describes the cooperation between simulation and emulation, Section 6 details the partitioning of designs for simulation and emulation, Section 7 covers the control and analysis of the fault injection process, Section 8 outlines the experimental environment, Section 9 presents and analyzes the results, and Section 10 concludes the paper.

---

## 2. Related Research
This section provides a brief review of fault injection methods and tools, along with a comparison between them.

### 2.1. Fault Injection Methods and Tools
Fault injection methods can be categorized into physical fault injection and simulation-based fault injection. Common physical fault injection methods include:

- **SWIFI (Software Implemented Fault Injection):** Faults are injected into a physical system via software. Examples of SWIFI tools include FIAT[7], FERRARI[28], FINE[29], Xception[11], EXFI[9], GOOFI[2], and MAFALDA[4].
- **SCIFI (Scan Chain Implemented Fault Injection) [17]:** Faults are injected using scan chains. Examples of SCIFI tools are FIMBUL[17] and GOOFI[2].
- **Pin-level fault injection:** Faults are injected into the pins of an IC. Examples include MESSALINE[3] and RIFLE[34].
- **Fault injection by external disturbance:** Techniques such as heavy-ion radiation [20], EMI [30], and power supply disturbance [36] are used to inject faults.
- **Fault injection in emulated systems:** Faults are injected into emulated models using FPGA chips [10][12][15].

Simulation-based fault injection tools, which can be used before system implementation, include MEFISTO[26], VERIFY[39], FOCUS[14], and DEPEND[18].

### 2.2. Comparison of Fault Injection Techniques
Key considerations in fault injection experiments include the ability to inject faults into HDL-described systems and the synthesizability of the target model. HDL-based fault injection tools are essential due to the widespread use of HDLs in digital system design. For example, MEFISTO[26] and VERIFY[39] can inject faults into VHDL models, and ADEPT[32] can evaluate dependability parameters using VHDL models, though it is not a fault injection tool.

Table 1 compares different fault injection methods in terms of controllability, observability, connection to real environments, speed, and other factors.

| Method                        | Controllability | Observability | Connection to Real Environment | Speed | Early Design Cycle | Non-Synthesizable Models | HDL Models |
|-------------------------------|-----------------|---------------|--------------------------------|-------|--------------------|--------------------------|------------|
| SWIFI                         | -               | -             | -                              | -     | +                  | -                        | -          |
| SCIFI                         | -/+ (1)         | -/+ (1)       | -                              | -     | +                  | -                        | -          |
| Pin level                     | -               | -             | -                              | -     | +                  | -                        | -          |
| External disturbance           | -/+ (2)         | -/+ (2)       | -                              | -     | +                  | -                        | -          |
| Simulation-based FI           | +               | +             | -                              | -     | +                  | -                        | +          |
| FI in emulated systems        | +               | +             | -                              | +     | -                  | -                        | +          |
| FI based on simulation and    | +               | +             | +                              | +     | +                  | +                        | +          |
| emulation co-operation        |                 |               |                                |       |                    |                          |            |

(1) Depends on the complexity of the scan chain.
(2) Depends on the type of external disturbance.
(3) Depends on the complexity of the hardware used for fault injection.

Most HDL-based fault injection methods are simulation-based, but FPGA-based emulators can also be used for synthesizable HDL models [15]. A tool that supports fault injection into non-synthesizable models can be used early in the design phase, as the system model is not fully synthesizable except in the final steps.

---

## 3. Overview of the FITSEC Approach and Tool
FITSEC (Fault Injection Tool based on Simulation and Emulation Co-operation) is designed to support the entire system design process. It combines the advantages of simulation and emulation to provide a comprehensive fault injection solution. FITSEC is compatible with both Verilog and VHDL languages and can inject faults at different levels of abstraction.

### 3.1. Features of FITSEC
- **High Controllability and Observability:** FITSEC leverages the strengths of both simulation and emulation to offer precise control and detailed observation of fault injection experiments.
- **Compatibility with HDLs:** FITSEC supports both Verilog and VHDL, making it versatile for a wide range of digital designs.
- **Flexibility in Fault Injection:** FITSEC can inject faults into both synthesizable and non-synthesizable models, allowing for early fault injection in the design cycle.
- **Real-Time Evaluation:** By connecting to the real application environment, FITSEC enables the evaluation of the target system's behavior under fault conditions.

### 3.2. Architecture of FITSEC
FITSEC's architecture is designed to seamlessly integrate simulation and emulation. The tool partitions the design into simulated and emulated parts, ensuring efficient and effective fault injection. The following sections will detail the specific functionalities and processes involved in FITSEC.

---

## 4. Fault Injection with FITSEC
FITSEC supports the injection of faults into various types of models, including both synthesizable and non-synthesizable designs. The tool allows users to specify the type and location of faults, providing a flexible and powerful fault injection mechanism.

### 4.1. Fault Specification
Users can define faults in FITSEC using a simple and intuitive interface. The tool supports a wide range of fault types, including stuck-at, transient, and permanent faults. Users can also specify the timing and duration of fault injection, enabling precise control over the fault injection process.

### 4.2. Fault Injection Process
The fault injection process in FITSEC involves the following steps:
1. **Design Partitioning:** The system design is partitioned into simulated and emulated parts.
2. **Fault Definition:** Users define the type, location, and timing of faults.
3. **Fault Injection:** FITSEC injects the specified faults into the design.
4. **Observation and Analysis:** The tool monitors the system's behavior and collects data for analysis.

### 4.3. Example: Fault Injection in a 32-bit Processor
As a case study, FITSEC is applied to a 32-bit processor, DP32. The tool injects various types of faults into the processor's structural model, and the resulting behavior is analyzed to evaluate the processor's fault tolerance.

---

## 5. Cooperation Between Simulation and Emulation
The key to FITSEC's effectiveness is the seamless cooperation between simulation and emulation. By simulating parts of the circuit and emulating the rest, FITSEC achieves a balance between speed and accuracy.

### 5.1. Advantages of Combined Simulation and Emulation
- **Speed:** Emulation accelerates the fault injection process, making it faster than pure simulation.
- **Accuracy:** Simulation provides detailed and accurate modeling of the system, ensuring high controllability and observability.
- **Flexibility:** The combination of simulation and emulation allows for the evaluation of both synthesizable and non-synthesizable models.

### 5.2. Implementation
FITSEC uses a hybrid approach where the system design is partitioned into simulated and emulated parts. The simulated part is modeled using a high-fidelity simulator, while the emulated part is implemented using an FPGA-based emulator. The two parts are then integrated to form a complete system, and faults are injected into the combined model.

### 5.3. Case Study: 32-bit Processor
In the case study, the 32-bit processor, DP32, is partitioned into simulated and emulated parts. The control logic and data path are simulated, while the memory and I/O interfaces are emulated. Faults are injected into the combined model, and the resulting behavior is observed and analyzed.

---

## 6. Partitioning of Designs for Simulation and Emulation
Partitioning the design into simulated and emulated parts is a crucial step in the FITSEC approach. The partitioning strategy depends on the specific requirements of the fault injection experiment and the characteristics of the system design.

### 6.1. Factors to Consider
- **Complexity of the Design:** More complex parts of the design may benefit from simulation, while simpler parts can be emulated.
- **Fault Injection Requirements:** The type and location of faults to be injected should influence the partitioning strategy.
- **Performance and Accuracy:** The need for high performance and accuracy should be balanced to achieve the best results.

### 6.2. Example: 32-bit Processor
For the 32-bit processor, DP32, the control logic and data path are simulated due to their complexity and the need for detailed observation. The memory and I/O interfaces, which are less complex, are emulated to accelerate the fault injection process.

### 6.3. Partitioning Strategy
The partitioning strategy in FITSEC involves the following steps:
1. **Identify Key Components:** Identify the critical components of the system that require detailed modeling.
2. **Determine Complexity:** Assess the complexity of each component to decide whether it should be simulated or emulated.
3. **Define Interfaces:** Define the interfaces between the simulated and emulated parts to ensure seamless integration.
4. **Implement and Test:** Implement the partitioned design and test the integration to ensure proper functionality.

---

## 7. Control and Analysis of the Fault Injection Process
FITSEC provides robust mechanisms for controlling and analyzing the fault injection process. The tool allows users to specify the fault injection parameters, monitor the system's behavior, and analyze the results.

### 7.1. Fault Injection Control
- **Fault Definition:** Users can define the type, location, and timing of faults.
- **Injection Parameters:** Users can specify the duration and intensity of fault injection.
- **Execution Control:** FITSEC provides options for running fault injection experiments, including single-run and batch processing.

### 7.2. Data Collection and Analysis
- **Data Collection:** FITSEC collects data on the system's behavior during fault injection, including error propagation, system state, and performance metrics.
- **Analysis Tools:** The tool provides built-in analysis tools for visualizing and interpreting the collected data.
- **Reporting:** FITSEC generates detailed reports summarizing the results of the fault injection experiments.

### 7.3. Example: 32-bit Processor
In the case study, FITSEC injects various types of faults into the 32-bit processor, DP32. The tool collects data on the processor's behavior, including the effects of faults on the control logic, data path, memory, and I/O interfaces. The results are analyzed to evaluate the processor's fault tolerance and identify potential areas for improvement.

---

## 8. Experimental Environment
The experimental environment for FITSEC includes the necessary hardware and software components to support the fault injection process. The environment is designed to be flexible and scalable, allowing for a wide range of fault injection experiments.

### 8.1. Hardware Setup
- **Simulator:** A high-fidelity simulator is used to model the simulated parts of the design.
- **Emulator:** An FPGA-based emulator is used to implement the emulated parts of the design.
- **Interface Board:** A custom interface board is used to connect the simulated and emulated parts, ensuring seamless communication.

### 8.2. Software Setup
- **FITSEC Tool:** The FITSEC tool is installed on a host computer and configured to control the fault injection process.
- **HDL Models:** The system design is described using Verilog and VHDL models, which are loaded into the simulator and emulator.
- **Control Software:** Custom control software is used to manage the fault injection process, including fault definition, injection, and data collection.

### 8.3. Configuration and Testing
- **Configuration:** The experimental environment is configured to match the specific requirements of the fault injection experiment.
- **Testing:** The setup is tested to ensure proper functionality and accurate results.

---

## 9. Results and Analysis
The results of the fault injection experiments conducted using FITSEC are presented and analyzed in this section. The experiments were performed on a 32-bit processor, DP32, to evaluate its fault tolerance.

### 9.1. Experimental Setup
- **System Model:** The 32-bit processor, DP32, was partitioned into simulated and emulated parts.
- **Fault Types:** Various types of faults, including stuck-at, transient, and permanent faults, were injected into the processor.
- **Data Collection:** Data on the processor's behavior was collected, including error propagation, system state, and performance metrics.

### 9.2. Results
- **Error Propagation:** The results showed that certain types of faults, such as stuck-at faults, had a significant impact on the processor's performance.
- **System State:** The system state was monitored to identify the effects of faults on the control logic, data path, memory, and I/O interfaces.
- **Performance Metrics:** Performance metrics, such as execution time and throughput, were analyzed to evaluate the processor's fault tolerance.

### 9.3. Analysis
- **Fault Tolerance:** The analysis revealed that the processor exhibited good fault tolerance for certain types of faults but was vulnerable to others.
- **Improvement Suggestions:** Based on the results, several suggestions for improving the processor's fault tolerance were identified, including the use of redundant components and error-correcting codes.

### 9.4. Conclusion
The experimental results demonstrate the effectiveness of the FITSEC approach in evaluating the fault tolerance of digital systems. The combination of simulation and emulation provides a powerful and flexible tool for fault injection, enabling detailed and accurate analysis of system behavior under fault conditions.

---

## 10. Conclusions
In this paper, we presented a novel fault injection approach that leverages the cooperation between a simulator and an emulator. The proposed approach, implemented in the FITSEC tool, combines the advantages of both simulation-based and physical fault injection to achieve high controllability, observability, and speed in fault injection experiments. FITSEC supports the entire system design process and is compatible with both Verilog and VHDL languages. The experimental results show that FITSEC can significantly reduce the time required for fault injection campaigns and provide valuable insights into the fault tolerance of digital systems.

Future work will focus on extending FITSEC to support more advanced fault injection techniques and expanding its application to a wider range of digital designs. Additionally, we plan to explore the integration of machine learning techniques to further enhance the fault injection process and improve the accuracy of fault tolerance evaluation.

---

**Acknowledgments:**
This work is sponsored by the Iran Telecommunication Research Center (ITRC).

**References:**
[1] [Reference 1]
[2] [Reference 2]
...
[39] [Reference 39]

---

**Note:** The references listed above are placeholders and should be replaced with the actual references cited in the original document.