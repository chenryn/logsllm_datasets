Pre-request masking
(masked by proxy); 2707;
7,67%
Post-request masking
(masked by rules); 32438;
91,95%
Fig. 4. Analysis of the detected differences
Detection Reliability. In this ﬁrst validation phase, we used an environment composed
of three servers: BuggyHTTP on Linux, Apache 1.3.29 on MacOS-X, and IIS 5.0 on
windows. The choice of BuggyHTTP is dictated by the fact that it contains many vul-
nerabilities that can be easily exploited. Seven attacks have been performed against the
system security properties. These attacks are summarized in Table 1. We exploited three
types of vulnerabilities that allows: access to ﬁles outside the web space (attack against
conﬁdentiality); modiﬁcation of ﬁles outside the web space (attack against integrity);
denial of service (attack against availability).
The HTTP trafﬁc was composed only by the attacks. Notice that, as each request
is processed independently from the others, the detection rate would be the same if the
malicious trafﬁc was drowned in trafﬁc without attacks. All the attacks launched against
one of the COTS server were detected by the IDS, as expected.
Detection Accuracy. The architecture used in this second validation phase is com-
posed by three servers: an Apache server on MacOS-X, a thttpd server on Linux, and
an IIS 5.0 on windows. We avoid to use the buggyHTTP server in this phase because
we do not expect to attack the server in this phase, and because buggy provides limited
functionalities. The three servers contain a copy of our campus web site. They are con-
ﬁgured in such a way that they will generate a minimum of output differences. The three
servers are fed with the requests logged on our campus web server on march 2003. It
represents more than 800.000 requests. A previous study [19] that used a very sensitive
tool [20] carried out tests on the same logs and showed that at most 1.4% of the HTTP
requests can be harmful.
As shown on Figure 4, only 0.37% of the output differences generate an alert. This
represents only 1.6 × 10
−2% of the HTTP requests. In one month, the administrator
must thus analyse 150 alerts, that means about 5 alerts a day. The security administrator
COTS Diversity Based Intrusion Detection and Application to Web Servers
57
Analysis of Alerts (Apache, thttpd, IIS)
Encoded request
(400/404/404); 20
Unknown (404/403/404); 1
CONNECT site
(405,400,501); 4
redirected GET
(404,400,404); 4
Winsys access
(400/404/200); 16
Winsys access
(404/404/500); 16
Winsys access
(none,none,200); 30
Winsys access
(404/404/200); 40
0
5
10
15
20
25
30
35
40
45
Number of Alerts
Fig. 5. Analysis of Alerts
has to analyse each alert generated in order to determine its root cause, and to elimi-
nate potential residual false positives. We observe (see Figure 5) that only the ﬁrst four
alert types are probably false positives (22% of the alerts). However, they have not been
eliminated because they seem to be symptoms of unsuccessfull attacks. The three ﬁrst
winsys access request types are symptoms of an intrusion: one of the servers (IIS) deliv-
ers a reply while the others refuse: attacks against conﬁdentiality have succeeded on IIS.
The comparison algorithm detects a large amount of output differences. Thanks to
the design difference masking mechanisms, 99.63% of these differences are masked
(see Figure 4). For instance, the rule previously presented allows to mask differences
generated for an HTTP request on a directory without appending a ﬁnal ’/’ (the thttpd
server and the IIS server responds with a 302 status code while the Apache server
answers with a 301 status code). At the proxy level we, for example, transform all re-
source names to lower case (on Windows, the ﬁle system is not case sensitive while this
is the case on Linux, or MacOS-X). Notice that, without the deﬁnition of such masking
mechanisms, the output differences would have produced a lot of false positives.
Currently, we have only 36 rules deﬁned, and more will be added in the future. Even
with additional rules, we expect that this base will not become very large (in fact, only
5 rules permit to mask 90% of the design differences). We can thus argue here that
the rule deﬁnition work is not very heavy compared with the work needed to build a
complete behaviour model as for classical anomaly detector, and that this mechanism
is consequently viable in a real environment.
4.3 Comparison with Snort and WebStat
It is in practice very difﬁcult to compare the outputs of the 3 IDSes. First, they do
not detect the same attacks, as they may not share the same signature set. In addition,
they all produce different kinds of false positives. But in order to roughly compare our
58
E. Totel, F. Majorczyk, and L. Mé
IDS Comparison
s
t
r
e
A
l
40
35
30
25
20
15
10
5
0
1
2
3
4
5
6
7
8
9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31
Day (March 2003)
WebStat Alerts
COTS diversity based IDS Alerts
Snort Alerts
Fig. 6. Several IDS Results
approach with those of well known tools, we give on Figure 6 the results obtained, on
the same data set, with our tool, with WebStat [21] and Snort [22], both conﬁgured with
their standard sets of signatures.
We fed the three IDSes with the same HTTP trafﬁc (as previously, the 800.000 re-
quests logged on our campus web server on march 2003). The mean of the number of
alerts emitted per day is a ﬁrst measurement of the IDS performance, because we know
that there are very few successful attacks in the log we are executing (at most 1.4% of
the request may be harmful). The Figure 6 gives this number of alerts generated by each
IDS: we obtain about 10 alerts per day generated by Snort and WebStat and about 5 by
our tool. This can be explained by the fact that our IDS detects intrusions, while Snort
and Webstat actually detect attacks, i.e. intrusion attempts, without giving an evidence
of the success or failure of these attacks. Thus, from our point of view, we can conclude
that our approach produces less alerts than the two other IDSes, without missing the
known attacks. However, this conclusion must be carefully taken into account, because
Snort and Webstat have not really be tuned in the context of the experiment.
4.4 Detection Time and Time Overheads
When we apply intrusion detection on a service, it can be interesting to evaluate the
time overheads induced by the detection process. As the detection is performed online
in real-time, it should induce a time overhead in the service. The results presented in
this section have been obtained on the same set of requests, using the same architecture
described in the previous paragraph.
We summarize the results in Table 2. All these measurements are performed from the
client point of view (i.e., all durations show the time between a request and the reception
COTS Diversity Based Intrusion Detection and Application to Web Servers
59
Table 2. Temporal Performance Measurements
thttpd Apache
0.0214s 0.0173s 0.0183s
IDS inactive
IDS Active
IDS Overhead 0.1042s 0.1083s 0.1073s
IIS
0.1256s
of its answer). The IDS Inactive row in the table gives the mean-time necessary to
process a request by each web server. The IDS Active row gives the mean-time required
to process a request when the proxy and the IDS are active.
Activating the proxy and the IDS implies both the creation of lots of communications
and the activation of the detection algorithm: it multiplies by about 6 the duration of a
request processing. The communications are, of course, parts of the measured durations.
The IDS tested is a prototype, and thus is not really optimised. However, we can see
than the overhead it induces is acceptable (about 0.1s), and is adapted to a real-time use.
4.5 Discussion
Successful attacks against the availability of one of the COTS server are detected. The
IDS detects that the COTS server successfully attacked does not respond to the re-
quest and further requests. Similarly, successful attacks against the conﬁdentiality are
detected. The IDS detects that the responses from the COTS servers are different. How-
ever, it is possible that some attacks against the integrity of one of the COTS servers are
not detected. We compare the response from the COTS servers and the response may be
equivalent according to the detection algorithm while one of the server has been com-
promised. This is due to the fact that we currently do not investigate what actions the
web services are performing inside each server. This will be part of our future work.
Another issue that we do not address is the dynamic aspects: Web servers are not
static and often use dynamic functionalities, such as script execution, access to data-
base servers, and so on. These functionalities are considered as separate applications in
our approach, and must then be coupled with an additional speciﬁc IDS at this appli-
cation level. For example, the COTS diversity approach (e.g., database diversity, script
interpreter diversity, etc.) can be applied to each of them.
It must be noticed that although our IDS detects the intrusions, in some cases, the
identiﬁcation of the intruded server is not possible (e.g., if there is no majority in the re-
sponses of the servers). In most cases, a majority is found thanks to the output difference
masking mechanisms. However, in some cases an output difference can be the symp-
tom of both a design difference and a design fault. Thus, these differences cannot be
masked without introducing false negatives in the detection process and consequently a
majority cannot be found and the identiﬁcation of an intruded server can be impossible.
5 Conclusion and Future Work
As a conclusion, we can state that this approach provides a high coverage of detection
(consequence of COTS diversity and hypothesis of de-correlation of vulnerabilities),
and a low level of false positives (as shown by the experiments).
60
E. Totel, F. Majorczyk, and L. Mé
However, applying the method to COTS implies the detection of a high amount of
output differences that are not due to the exploit of vulnerabilities. In our current work,
we chose to deﬁne the design differences off-line, using rules on inputs and outputs.
These rules permit to eliminate these design differences. We only have 36 rules in our
current implementation. Nevertheless, this technique requires an effort from the admin-
istrator to build and keep this base of rules up to date. Even if the expertise of this
administrator is probably the best knowledge we can use to build such a rule base, there
is no proof that the rules he generates do not introduce false negatives in the detection
process. This problem is similar to the one of a misuse IDS where no proof is given that
the attack signature set leads to a reliable and accurate detection process.
Despite the good results obtained using off-line generated rules, we intend, in a fu-
ture work, to characterize the detected differences on-line, in order to avoid the deﬁni-
tion of explicit rules. This leads to deﬁne diagnosis functions in the architecture, whose
role will be to identify which server is in a failure state, and thus if a response is correct
or not.
Acknowledgement
This work has been partly supported by the Conseil Régional de Bretagne and is part of
the French Ministry of Research (CNRS ACI-SI) DADDi project.
References
1. Shannon, C., Moore, D.: The spread of the witty worm. Security and Privacy 2 (2004)
2. Moore, D., Paxson, V., Savage, S., Shannon, C., Staniford, S., Weaver, N.: Inside the slammer
worm. Security and Privacy 1 (2003) 33–39
3. Kantz, H., Veider, A.: Design of a vital platform for railway signalling applications. In: Pro-
ceedings of the 10th European Workshop on Dependable Computing (EWDC-10), Vienna,
Austria (1999) 37–41
4. Adelsbach, A., Cachin, C., Creese, S., Deswarte, Y., Kursawe, K., Laprie, J.C., Pﬁtzmann,
B., Powell, D., Randell, B., Riodan, J., Stroud, R.J., Veríssimo, P., Waidner, M., Welch, I.:
MAFTIA conceptual model and architecture. Maftia deliverable d2, LAAS-CNRS (2001)
5. Valdes, A., Almgren, M., Cheung, S., Deswarte, Y., Dutertre, B., Levy, J., Saïdi, H., Stravi-
dou, V., Uribe, T.E.: An adaptive intrusion-tolerant server architecture. In: Proceedings of
the 10th International Workshop on Security Protocols, Cambridge, U.K. (2002)
6. Just, J., Reynolds, J., Clough, L., Danforth, M., Levitt, K., Maglich, R., Rowe, J.: Learning
Unknown Attacks - A Start. In: Proceedings of the 5th International Symposium on Recent
Advances in Intrusion Detection (RAID 2002), Zurich, Switzerland (2002)
7. Veríssimo, P.E., Neves, N.F., Correia, M.P.: Intrusion-tolerant architectures: Concepts and
design. In: Architecting Dependable Systems. Volume 2677. (2003)
8. Porras, P.A., Neumann, P.G.: EMERALD: Event monitoring enabling responses to anom-
alous live disturbances. In: Proceedings of the 20th National Information Systems Security
Conference. (1997) 353–365
9. Ko, C., Fink, G., Levitt, K.: Automated detection of vulnerabilities in privileged programs by
execution monitoring. In: Proceedings of the 10th Annual Computer Security Applications
Conference, IEEE Computer Society Press (1994) 134–144
COTS Diversity Based Intrusion Detection and Application to Web Servers
61
10. Sekar, R., Bendre, M., Dhurjati, D., Bollineni, P.: A fast automaton-based method for de-
In: Proceedings of the 2001 IEEE Symposium on
tecting anomalous program behaviors.
Security and Privacy, Oakland, CA (2001) 144–155
11. Avizienis, A., Kelly, J.P.J.: Fault tolerance by design diversity: Concepts and experiments.
IEEE Computer (1984) 67–80
12. Randell, B.: System structure for software fault tolerance. In: Proceedings of the Interna-
tional Conference on Reliable software. (1975) 437–449
13. Laprie, J.C., Arlat, J., Béounes, C., Kanoun, K.: Deﬁnition and analysis of hardware-and-
software fault-tolerant architectures. IEEE Computer 23 (1990) 39–51
14. Avizienis, A., Chen, L.: On the implementation of n-version programming for sotware fault
tolerance during execution. In: Proceedings of the IEEE COMPSAC 77. (1977) 149–155
15. Lyu, M., He, Y.: Improving the N-version programming process through the evolution of a
design paradigm. IEEE Transactions on Reliability 42 (1993) 179–189
16. Gashi, I., Popov, P., Stankovic, V., Strigini, L. In: On Designing Dependable Services with
Diverse Off-The-Shelf SQL Servers. Volume 3069 of Lecture Notes in Computer Science.
Springer-Verlag (2004) 196–220
17. Wang, R., Wang, F., Byrd, G.T.: Design and implementation of acceptance monitor for build-
ing scalable intrusion tolerant system. In: Proceedings of the 10th International Conference
on Computer Communications and Networks, Phoenix, Arizona (2001) 200–5
18. Saidane, A., Deswarte, Y., Nicomette, V.: An intrusion tolerant architecture for dynamic
content internet servers. In Liu, P., Pal, P., eds.: Proceedings of the 2003 ACM Workshop
on Survivable and Self-Regenerative Systems (SSRS-03), Fairfax, VA, ACM Press (2003)
110–114
19. Tombini, E., Debar, H., Mé, L., Ducassé, M.: A serial combination of anomaly and misuse
idses applied to http trafﬁc. In: Proceedings of ACSAC’2004. (2004)
20. Debar, H., Tombini, E.: Webanalyzer: Accurate and fast detection of http attack traces in
web server logs. In: Proceedings of EICAR, Malta (2005)
21. Vigna, G., Robertson, W., Kher, V., Kemmerer, R.: A stateful intrusion detection system
for world-wide web servers. In: Proceedings of the Annual Computer Security Applications
Conference (ACSAC 2003), Las Vegas, NV (2003) 34–43
22. Roesch, M.: Snort - lightweight intrusion detection for networks. In: 13th Administration
Conference, LISA’99, Seattle, WA (1999)
A Description of the Attacks Against BuggyHTTP
(1) The BuggyHTTP server does not do any veriﬁcation on the URL of a request. It
is possible to access ﬁles outside the site served by introducing a sequence of "../". As
we ran the BuggyHTTP server as root on the linux computer, we were able to access
the ﬁle /etc/shadow that contains the encrypted passwords of users on the system by a
request similar to the following: "GET /../../../../../../etc/shadow HTTP/1.0". The viola-
tion of the conﬁdentiality was detected. The BuggyHTTP server responded with a 200
status code and sent the ﬁle to the client. The two others COTS servers responded with
a 404 status code and with a 400 status code respectively for the Apache web server and
for the IIS.
(2) The same type of vulnerability was exploited to change ﬁles on the system.
Again, no checking is carried out in the code that allows access to scripts on the server.
So we can execute any binary present on the system by using folder traversal technique.
62
E. Totel, F. Majorczyk, and L. Mé
A request like "GET /cgi-bin/../../bin/sh -c ’echo root::12492::::: > /etc/shadow’" modi-
ﬁes the /etc/shadow ﬁle. The BuggyHTTP server accepted the request while the Apache
server and the IIS refused it and responded with a 400 status code. So the violation of
the integrity was detected.
(3) We modiﬁed the BuggyHTTP server to use a "select" approach instead of a "fork"
approach to handle network connections. Thus, it is possible to exploit a buffer overﬂow
vulnerability to crash the server resulting in a loss of availability. The BuggyHTTP
server did not respond to the request while the two other servers responded with a 400
status code and a 414 status code respectively for the Apache and for the ISS. This
intrusion was detected too.
Behavioral Distance for Intrusion Detection
Debin Gao1, Michael K. Reiter2, and Dawn Song2
1 Electrical & Computer Engineering Department, Carnegie Mellon University,
Pittsburgh, Pennsylvania, USA
2 Electrical & Computer Engineering Department, Computer Science Department,
and CyLab, Carnegie Mellon University, Pittsburgh, Pennsylvania, USA
PI:EMAIL
{reiter, dawnsong}@cmu.edu
Abstract. We introduce a notion, behavioral distance, for evaluating
the extent to which processes—potentially running diﬀerent programs
and executing on diﬀerent platforms—behave similarly in response to a
common input. We explore behavioral distance as a means to detect an
attack on one process that causes its behavior to deviate from that of
another. We propose a measure of behavioral distance and a realization of
this measure using the system calls emitted by processes. Through an em-
pirical evaluation of this measure using three web servers on two diﬀerent
platforms (Linux and Windows), we demonstrate that this approach holds