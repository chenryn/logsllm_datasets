access pattern mapping table and switches angle_max to
copter.aparm.angle_max, as shown in Listing 7. We note
that PGPATCH also changes the ‘return false;’ statement
because the function at the patch location is type void. In such
a case, PGPATCH prints an error message as a PPL formula’s
post-condition (i.e., an action to be executed).
4) Checking Valid Ranges of Parameters (CHECK): To detect
and prevent the parameter values outside their valid range, we
use the PPL formulas with the following structure. “Mini is less
than Parami_value and Maxi is more than Parami_value”, where
i denotes the i-th conﬁguration parameter. To ﬁx this type
of logic bugs, PGPATCH’s patch forces the parameter to have
a valid value before a code statement refers to it. PGPATCH
performs the following steps: (1) It obtains the name of the
conﬁguration parameter triggering a logic bug from the given
user inputs. (2) It maps the parameter name to a variable in
the source code. (3) It ﬁnds all code statements which refer to
the identiﬁed variable. (4) It learns how to access the identiﬁed
variable from the access pattern mapping table (Figure 6). (5)
It inserts an “if statement” checking for the parameter’s value.
PGPATCH assigns the default parameter value to the identiﬁed
variable if it has a value outside the valid range.
PGPATCH obtains the valid ranges and default values of con-
ﬁguration parameters by parsing the XML ﬁles in ArduPilot [7],
PX4 [65], and Paparazzi [58]. For example, in GPS Fail-Safe
Bug (Section III-A), COM_POS_FS_DELAY conﬁguration param-
eter’s valid range in PX4 is between 1 and 100. PGPATCH
ﬁrst maps the parameter to the _param_com_pos_fs_delay
variable. PGPATCH then inserts an “if statement” before
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:39:29 UTC from IEEE Xplore.  Restrictions apply. 
81833
bool Commander::check_posvel_validity (...) {
if (_param_com_pos_fs_delay.get()  100) {
// Assign a default value
_param_com_pos_fs_delay = 1; }
Listing 8: Fixing the GPS fail-safe bug (Section III-A).
void Copter::failsafe_battery_event(void) {
else if (g.failsafe_battery_enabled == 2
&& home_distance > 2) // Switch to RTL
Listing 9: Fixing the battery fail-safe bug (Section III-C).
any statement referring to the _param_com_pos_fs_delay
variable, as shown in Listing 8.
5) Updating a Statement (UPDATE): RV software must
trigger post-conditions only when an RV’s current states satisfy
preconditions. However, logic bugs in UPDATE patch type
trigger a behavior although the RV satisﬁes only a part of
the preconditions. This means that the RV software uses
an incorrect “if statement”. Hence, PGPATCH replaces the
incorrect “if statement” with a new one.
PGPATCH ﬁrst extracts the terms of the violated formula’s
preconditions. For example, in Battery Fail-Safe Bug (Sec-
tion III-C), preconditions are “Failsafe is on”, “FS_BATT_-
ENABLE is 2”, and “home_distance > 2”. It obtains Failsafe,
FS_BATT_ENABLE, and home_distance as the terms. Second,
it extracts the variables and functions from the term-source
code mapping table (Figure 4), e.g., FS_BATT_ENABLE and
home_distance are mapped to failsafe_battery_enabled
and home_distance variables, respectively. Third, it ﬁnds an
“if statement” that uses the mapped variables as operands.
For this, it backtracks def-use chains of %cmp instructions of
the unpatched program’s bitcode. The backtracking method
is the same as Section V-D3. Fourth, from the access pattern
mapping table, it learns how to access the mapped variables
in the found patch location, e.g., we can use g.failsafe_-
battery_enabled to access the FS_BATT_ENABLE term in
the found patch location (failsafe_battery_event function).
Lastly, it conducts in-order traversal of the expression tree to
create a new “if statement”. It then replaces the incorrect ”if
statement” with the new one (Listing 9). Yet, this patch cannot
ﬁx Battery Fail-safe Bug. We will detail how PGPATCH’ Patch
Veriﬁer corrects the patch in Section V-E.
6) Disabling a Statement
(DISABLE): Logic bugs in
DISABLE patch type cause an RV software to change a state
although a PPL formula explicitly represents the state that
must not be changed. It means that the RV software has
unnecessary code statements that change the state. Hence,
PGPATCH ﬁnds the statements and comments them out to
ﬁx these logic bugs. PGPATCH ﬁrst extracts terms from
the formula’s post-condition part, e.g., in Tilt Angle Bug
(Section III-D), “_constraints.tilt is disabled” is the
violated formula’s post-condition. It obtains the _constraints.tilt
term from the formula. Second, it obtains mapped variables
from the term-source code mapping table, e.g., _constraints.tilt
term is mapped to _constraints.tilt. Third, it ﬁnds all
statements that assign a value to the mapped variables, e.g., _-
constraints.tilt = a value. Lastly, it comments out the
found statements. PGPATCH leaves a variable declaration and
disables only an assignment part if a found statement includes
declaration and assignment at the same time, e.g., it comments
out statements at lines 2 and 5 in Listing 5.
E. Patch Veriﬁer
PGPATCH checks whether the patch ﬁxes the logic bug for
the given user inputs that trigger the bug and performs patch
correction if needed. It then veriﬁes (1) the bug does not occur
in other missions and environmental conditions (i.e., testing
the patches in different contexts), and (2) the patch does not
break an RV’s functionality and degrade its performance.
1) Patch Correction: We noticed some patches could not
ﬁx the bugs due to inconsistencies between metric units used
in PPL formulas and the units in the source code. Thus, we
developed a patch correction component to address these issues.
Patch correction ﬁrst checks whether the bug persists on the
RV simulator with the given user inputs after the patch is
deployed. If PGPATCH still detects the bug while executing
the bug-triggering inputs on an RV simulator, PGPATCH tries
to ﬁx the generated patch by ﬁxing the unit inconsistencies.
Fixing Unit Inconsistency. PGPATCH’s patch generation is
based on PPL formulas, which do not include the units for the
constants. When PGPATCH generates a patch, it makes a guess
on the unit of the constants (e.g., meter or centimeter). If the
guess is incorrect, PGPATCH attempts to ﬁx the generated patch.
Speciﬁcally, when the term’s name implies a distance variable
(e.g., altitude, height, and elevation), PGPATCH converts the
distance variable into another unit (i.e., multiplies or divides
it by the powers of 10). It then tests whether the bug is ﬁxed
with the selected unit.
To illustrate, in the Battery Fail-safe Bug, PGPATCH creates
a patch (Listing 9). This patch does not prevent the targeted
logic bug as home_distance uses centimeters, while the
constant number 2 in the formula is in meters. After the patch
correction step, PGPATCH generates the following patch:
else if (g.failsafe_battery_enabled == 2
&& (home_distance/100) > 2)
2) Testing the Completeness of Patches: We consider that a
patch is complete if the following three conditions are satisﬁed:
(1) The inputs that previously triggered the bug do not lead to
the bug in the patched program (C1). (2) The patched program
does not lead to the bug even in different contexts, e.g., different
missions and altitudes (C2). (3) The patch does not break an
RV’s existing functionalities and degrade performance (C3).
To verify these conditions, PGPATCH runs the patched pro-
gram on an RV simulator using multiple scenarios. Particularly,
to check C1 and C2, we leverage the “Autotest suite” [12]
from ArduPilot and extend it to PX4 and Paparazzi. ArduPilot
developers use the test suite to test functionalities after they
update their RV software. Whenever the “Autotest suite” tests
each scenario, PGPATCH executes the inputs given by users
that trigger the logic bug. If PGPATCH does not detect any
logic bug, it runs PGFuzz [41] to ﬁnd a new input set to trigger
the logic bug. If PGPATCH detects a logic bug, this means the
generated patch does not fully ﬁx the bug.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:39:29 UTC from IEEE Xplore.  Restrictions apply. 
91834
To verify C3, PGPATCH checks if the patched program
violates any existing formulas obtained from PGFuzz while
running PGFuzz for checking C1 and C2. Additionally, it runs
the “Autotest suite” on the unpatched and patched programs.
It then compares the RV’s physical states (e.g., roll, pitch, and
yaw) from each execution. We obtain the states from stored
log ﬁles after executing the “Autotest suite”. We note that a
correct patch may change some states since it ﬁxes a bug.
Thus, PGPATCH’s Patch Veriﬁer must know which states are
expected to be changed by the patch. To address this, we use
PGFuzz’s proﬁling engine [41] that automatically ﬁnds states
related to a given formula (StateC). If PGPATCH detects either
a policy violation or an unexpected changed state that is not
included in StateC, we consider that the patch interferes with
the program’s functionality and performance.
VI. IMPLEMENTATION
Preprocessor. We write 376 lines of code (LoC) in Python
using the PyParsing v.2.4.7 library [70] to implement the
translator which converts (i) LTL formulas to PPL formulas and
(ii) PPL formulas to LTL formulas. The syntax analyzer ( 2 in
Figure 1) is implemented in 279 LoC in Python. To create (i)
the term classiﬁcation table ( 3b Figure 1) and (ii) candidate
terms for users, we obtain variable and function names in the
ﬂight control programs using LLVM v.10.0.0 [50]. We extract
the variable and function names through an LLVM pass that
consists of 217 LoC in C. We manually construct a list of RV
physical states from RVs’ documentations [11], [59], [68].
Patch Type Analyzer. We write 429 LoC in Python to
implement the “Terms and source code mapper” and 741 LoC
in Python for “Patch type analyzer” components ( 5 - 6 in
Figure 1) on top of the Pymavlink v2.4.9 and PPRZLINK
libraries [63], [69]. These libraries enable PGPATCH to com-
municate with a simulated vehicle through MAVLink [53]
commands. To simulate RVs, we choose Software in the Loop
(SITL) [6] for ArduPilot, jMAVSim [36] for PX4, and NPS [57]
for Paparazzi.
Patch Generator. The patch locator is implemented as 239
LoC in Python. We write 457 LoC in C to collect def-use
chains of variables through an LLVM pass. To parse XML ﬁles
which contain valid ranges and default values of conﬁguration
parameters, we write 95 LoC in Python.
Patch Veriﬁer. To deploy patches to RV software, we write
114 LoC in Python. To test the patches’ completeness, we
adapt the “Autotest suite” of ArduPilot v.4.0.3 [12]. It consists
of four scripts in Python for each RV type. The “Autotest
suite” consists of 4,911 LoC for the multi-copters, 5,435 LoC
for the rover, 1,982 LoC for the ﬁxed wings, and 729 LoC
for the submarines. To run the “Autotest suite” on PX4, we
modify 295 LoC for the multi-copter, 279 LoC for the rover,
and 149 LoC for the ﬁxed wing as they differently implement
the MAVLink protocol. Further, to run the “Autotest suite”
on Paparazzi, we have to modify 1,086 LoC since Paparazzi
uses PPRZLINK instead of Pymavlink. Finally, we manually
created a list of distance variables to ﬁx unit inconsistencies.
Selected bugs
Patchable bugs
Fixed bugs
ArduPilot (A)
PX4 (PX)
Paparazzi (PP)
Total
70
70
70
210
38
27
29
94
32
24
21
77
TABLE I: Details of the quantitative evaluation for bugs from
the commit history of ArduPilot, PX4, and Paparazzi.
Bug origin
RV SW
ADD
REUSE
UPDATE
DISABLE
CHECK
Patch
type of
ﬁxed
bugs
Unﬁxable
Total
Success rate
Fuzzing
Commit history
Total
A
34
1
44
44
37
0
8
1
135
94
39
10
150
297
93.3% 66.7% 100% 84.2% 88.9% 72.4% 86.9%
PX
0
0
0
0
24
12
36
PP
0
0
0
0
17
0
17
PX
6
0
18
0
0
3
27
PP
14
0
4
3
0
8
29
A
13
0
15
4
0
6
38
TABLE II: Summary of the quantitative evaluation on ArduPilot
(A), PX4 (PX), and Paparazzi (PP).
VII. EVALUATION
A. Experiment Setup
We evaluate PGPATCH on the three most popular ﬂight
control software, ArduPilot, PX4, and Paparazzi. We collect
a total of 2,268 logic bugs. In particular, we ﬁnd 292 logic
bugs reported by previous RV fuzzing research papers [41],
[43]. We refer to these logic bugs as DataSetF. Further, we
collect 1,976 logic bugs by searching in the GitHub commit
history of the three considered RV control programs [8], [59],
[64]. We refer to these logic bugs as DataSetH.
Among these bugs, we select bugs that satisfy the following
criteria: This is because outdated bugs cannot be reproduced on
the same version of the operating system and RV simulator. (1)
They are reported within the last two years because outdated
bugs cannot be reproduced on the same version of the operating
system and RV simulator. (2) They can be triggered by sending
user inputs to a simulated vehicle. (3) They belong to one of
the ﬁve patch types that PGPATCH supports.
We select a total of 297 logic bugs from DataSetF and
DataSetH. Speciﬁcally, by applying these ﬁltering rules, we
obtain 203 logic bugs from DataSetF. Most of the bugs are
classiﬁed as CHECK (74.6%) and REUSE (24.3%). Further, to
choose logic bugs from DataSetH, we ﬁrst randomly select 210
bugs, then, we obtain 94 (out of 210) logic bugs by applying
the above ﬁltering rules, as shown in Table I. To ﬁx bugs
from DataSetF, we reuse 29 LTL formulas from PGFuzz [41].
Additionally, we create 94 PPL formulas4 ourselves to ﬁx logic
bugs from DataSetH. Out of these 123 formulas, 4 formulas
ﬁxed multiple bugs, while the others can ﬁx one bug each (as
detailed in Appendix G).
We run our evaluation using a desktop machine with an Intel
i5-10400 CPU, 64 GB RAM, and Ubuntu 18.04 64-bit.
B. Quantitative Evaluation
After the patch passes the patch veriﬁcation process in
PGPATCH’s patch veriﬁer, we manually examine the patch to
check its correctness. When PGPATCH aborts patch generation
4These 94 rules are available online: https://github.com/purseclab/PGPatch/
blob/main/policy_list.pdf
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:39:29 UTC from IEEE Xplore.  Restrictions apply. 
101835
Bug origin
Fixed bugs
Performance damage
Different from
developers’ patches
Total
Fuzzing
A
140
0
PX
24
0
PP
17
0
Commit history
PP
A
21
32
0
0
PX
24
0
N/A N/A N/A
2
181
0
0
77
TABLE III: Summary of the qualitative evaluation.
or incorrectly generates a patch, we also manually analyze it
to identify what makes PGPATCH fail.
As shown in Table II, PGPATCH correctly ﬁxes 258 out
of 297 logic bugs (86.9%). Speciﬁcally, PGPATCH’s Patch
Generator component initially ﬁxes 238 out of 297 logic bugs.
PGPATCH’s Patch Veriﬁer then detects 59 faulty patches and
corrects 20 of them by ﬁxing unit inconsistencies.
PGPATCH fails to ﬁx 39 logic bugs (Table II). Yet, we
note that failing to create correct patches does not mean
that PGPATCH deploys faulty patches. The false positives
represent the patches that PGPATCH considers correct, but they
are actually faulty (do not ﬁx the bugs). Overall, PGPATCH
produces zero false positives because PGPATCH’s Patch Veriﬁer
checks the correctness of the patches created by PGPATCH’s
Patch Generator before they are deployed. We found 39 logic
bugs to be faulty for the following reasons: (1) For four patches,
PGPATCH should have added third party libraries to compute
variables related to attitude control, but using third party
libraries is not supported, e.g., a patch [4] needs to add a math
library to apply a ﬁlter to the yaw speed state, (2) 23 patches