PERMISSIONS button at the top of a number of the panes. These are present throughout
the UI and are used to define which users have access to which configuration items. For
example, if you have a team of Database Administrators (DBAs) who should only have
access to run playbooks relevant to database servers against those servers, you could create
an inventory of database servers and only give the DBAs access to this. Similarly, you could
put all of the DBA-related playbooks into one project, and again only give that team
permission to access that project. In this way, AWX forms a part of the good processes
inside an enterprise, both making Ansible more accessible, and ensuring that the right
items are only available to the correct people.
To continue our simple example, let's create a new project to reference our example Ansible
code:
1. Click on Projects on the left-hand menu bar.
2. Click on the green + icon to create a new project.
3. Give the project a suitable name.
4. Select Git from the SCM TYPE drop-down list.
5. Enter the following URL into the SCM URL field: https:/​/​github.​com/
ansible/​ansible-​examples.​git.
6. Optionally, you could also populate the SCM BRANCH/TAG/COMMIT field if
you wanted to only work with a specific commit or branch in the repository. In
this simple example, we will use the latest commit, known in Git as HEAD.
7. No other credentials are necessary as this is a publicly available GitHub
example—however, if you were using a password-protected repository, you
would create an SCM credential to the machine credential we created in the
Setting up credentials in AWX section of this chapter.
8. Check the UPDATE REVISION ON LAUNCH checkbox—this causes AWX to
pull the latest version of the code from our SCM URL every time a playbook
from this project is run. If this is unchecked, you must manually update the local
copy of the code before AWX will see the latest version.
9. Click on the green SAVE button.
[ 76 ]
Streamlining Infrastructure Management with AWX Chapter 3
When complete, the resulting screen should look something like the following screenshot:
[ 77 ]
Streamlining Infrastructure Management with AWX Chapter 3
Before we can proceed to the final step of configuring our playbook for its first run, we
need to manually pull the contents from the GitHub repository. To do this, click on the two
semicircular arrows to the right of your newly created project—this forces a manual sync of
the project from the upstream repository. An example of this is shown in the following
screenshot for your reference:
[ 78 ]
Streamlining Infrastructure Management with AWX Chapter 3
The green dot to the left of the project title (as seen in the preceding screenshot) will pulsate
during the sync. Once this completes successfully, it will turn a static green, whereas if
something goes wrong, it will turn red. Assuming all is well, we can proceed to the final
stage of preparing to run our playbook.
With our project defined in AWX, the next task required as we head toward running our
first playbook from it is to create a template, and we will do exactly that in the next section.
Creating a template in AWX
Templates in AWX pull together all of the other configuration items you have created so
far—in essence, a template is the AWX definition of all of the parameters you would specify
on the command line following the ansible-playbook command.
Let's walk through the process of creating a template so that we can run our playbook:
1. Click on Templates on the left-hand menu bar.
2. Click on the green + icon to create a new template.
3. Select Job Template from the drop-down list.
4. Give the template a suitable name.
5. In the INVENTORY field, select the inventory we created earlier in this chapter.
6. In the PROJECT field, select the project we created earlier.
7. In the PLAYBOOK field, note that the drop-down list has automatically been
populated with a list of all of the viable playbooks that are available in the
GitHub repository we specified in our PROJECT definition.
Choose lamp_simple_rhel7/site.yml from the list.
8. Finally, select the credential we defined earlier in the CREDENTIAL field.
9. Click the green SAVE button.
[ 79 ]
Streamlining Infrastructure Management with AWX Chapter 3
The end result should look something like the following screenshot, which shows all of the
fields filled in:
With those steps complete, we have now completed everything required to run our first
ever job from AWX. Hence, we shall proceed to do exactly that in the next section and
observe the results.
Running a playbook from AWX
When we run a playbook from AWX, what we're actually doing is running a template.
Hence, to do this interactively, we will navigate our way back to the Templates screen,
which should present a list of available templates. Note that when you are employing role-
based access control, you can only see the templates (and inventories and other
configuration items) that you have permission to see—if you don't have permission, it is
invisible. This helps make AWX more manageable when using it across different teams.
[ 80 ]
Streamlining Infrastructure Management with AWX Chapter 3
We are using an administrator account, so we can see everything. To launch our newly
created template, follow these instructions:
1. Click on the rocket ship icon on the right of the template name, as shown in the
following screenshot, which shows our newly created Templates with the option
to execute it highlighted:
[ 81 ]
Streamlining Infrastructure Management with AWX Chapter 3
When you do this, the screen automatically reloads and you will see details of the
run on your screen. Don't worry if you navigate away from this—you can always
find it again later by clicking on Jobs on the left-hand menu bar. Since we have
defined this job, it fails in the first instance. Luckily, the Jobs pane shows you all
of the same details and output that you would get when you run Ansible from the
command line, only in AWX, it is archived in the database so that you can always
go back to it at a later date or so that another user can analyze it simply by
logging into AWX (assuming they have the required permissions).
2. Looking at the job output, we can see the problem is some kind of permissions
issue, and a screenshot showing what this might look like is shown for your
reference:
[ 82 ]
Streamlining Infrastructure Management with AWX Chapter 3
Taking a look at the playbook source code on GitHub, we can see that the original
author hardcoded the use of the root user account for this playbook (note
the remote_user: root statements in site.yml). Normally, you wouldn't do
this—it is generally better practice to get Ansible to log in using an unprivileged
account, and then to use sudo as required by putting the become:
true statement in the play headers (we'll see this in action later in this book).
3. To work around this, for now, we'll simply allow root logins over SSH on our
CentOS 7 server, and then modify the credential in AWX to be for the root
account. Note that you could also define a new credential and change the
credential linked to the template—either are acceptable solutions. Once you have
changed the credential, run the template again—this time, the output should
look somewhat different, as we can see in the following screenshot, which is
showing now a successful run of the playbook:
[ 83 ]
Streamlining Infrastructure Management with AWX Chapter 3
As we can see from the preceding screenshot, we have a successful playbook run, along
with all of the relevant details about which user launched it, which revision on GitHub was
used, which credentials were used, which inventory, and so on. Scrolling down this pane
gives the output from ansible-playbook that we saw in the error screenshot previously;
if we wish to, we can further analyze the playbook run to see whether there were any
warnings, what was changed, and so on. Hence, with AWX we really achieve a nice simple
user interface to Ansible, which integrates all of the good practices that should be present
when automating Linux in an enterprise environment such as security, auditability, and
centralized control of Ansible (and indeed playbook code through source control
integration).
We have seen how AWX can assist us with running tasks manually—but what if we want a
truly hands-off approach to task automation? We will explore scheduling tasks in the next
section of this chapter.
Automating routine tasks with AWX
Although there are many facets to AWX that would require much more space than we have
in this book, one particular one stands out—the automation of routine tasks. Routine tasks
that Ansible could handle might include patching of servers, running some kind of
compliance check or audit, or enforcing a security policy.
For example, you could write an Ansible playbook to ensure that the SSH daemon does not
allow remote root logins as this is considered a good security practice. It is, of course, easy
for any system administrator with root privileges to log in and turn this back on; however,
running an Ansible playbook regularly to turn this off enforces it and ensures no-one (well-
meaning or otherwise) turns it back on. The idempotent nature of Ansible changes means
that where the configuration is already in place, Ansible will not make any changes, and
hence running the playbook is safe, light on system resources, and non-disruptive.
If you wanted to do this with Ansible on the command line, you would need to create a
cron job to run the ansible-playbook command regularly, along with all of the required
parameters. This would mean having the SSH private keys installed on the server handling
the automation, and means you have to keep track of which servers are running Ansible on
a routine basis. This is not ideal for an enterprise where good practice is the byword of
automation and ensures that everything keeps running smoothly.
Luckily, AWX can help us out here, too. To keep this example concise, we will reuse the
LAMP stack example from the previous section of this chapter. In this scenario, we might
want to schedule a one-off installation of the LAMP stack for a time when things are quiet,
whereas for a routine task, it would be on an ongoing basis.
[ 84 ]
Streamlining Infrastructure Management with AWX Chapter 3
To set a schedule for this template, follow these steps:
1. Click on Templates on the left-hand menu bar.
2. Click on the template we created earlier.
3. Click on the SCHEDULES button at the top of the pane.
4. Click on the green + icon to add a new schedule to it.
5. Set the appropriate start date and time—I will set mine a few minutes from now
to demonstrate it in action.
6. Also, set the appropriate timezone.
7. Finally, select the REPEAT FREQUENCY—in this example, I will choose None
(run once), but note that other ongoing options are available from the drop-down
list.
8. Click on the green SAVE button to activate the schedule.
When you have completed the preceding steps, the resulting configuration screen should
look something like the following:
[ 85 ]
Streamlining Infrastructure Management with AWX Chapter 3
Now, if you watch the Jobs pane, you should see your template start to run at the
scheduled time. When you analyze the completed (or indeed running) job, you should
see that it was launched by the name of the schedule you created earlier, rather than by the
name of a user account such as admin (as we saw when we launched it manually). A
screenshot is provided here that shows an example of a completed job that was launched by
our Scheduled install schedule that we created earlier in this section:
If you want to see all scheduled jobs that are forthcoming on your AWX instance, you can
simply click on the Schedules menu item on the left-hand menu bar, and a screen will load
that lists all configured schedules in your AWX instance. For those of you familiar with
Linux administration, this is akin to listing cron jobs. An example of such a screen is shown
in the following screenshot:
[ 86 ]
Streamlining Infrastructure Management with AWX Chapter 3
This gives you a concise overview of all of the schedules you have created, without having
to go into the individual configuration items themselves to edit them.
In this way, AWX supports not just interactive automation of your Linux environment, but
also hands-off scheduled automation tasks too, hence increasing the power and flexibility
of your automation solution.
It is hoped that this overview gives you an idea of the benefits that a tool such as AWX or
Ansible Tower can bring to your enterprise, and why it is beneficial to supplement your
Ansible automation with this.
[ 87 ]
Streamlining Infrastructure Management with AWX Chapter 3
Summary
Ansible offers a great deal of power with just a small amount of learning, yet when
deployed at a large scale in an enterprise, it can become more difficult to keep track of
everything, especially which users have the latest versions of playbook code and who ran
what playbook when. AWX supplements Ansible in the enterprise by bringing with it key
benefits such as role-based access control, auditability, integrated source control
management of playbook code, secure credential management, and job scheduling. It
achieves this while providing an easy to use point and click interface, which further lowers
the barrier to entry for all staff responsible for the Linux environment.
In this chapter, you learned why AWX is important to an Enterprise Linux environment
and how to leverage a number of its key features. You then carried out a hands-on
installation of a single AWX node before completing a practical end-to-end example of
running a playbook directly from GitHub to install a LAMP stack on a CentOS 7 server.
Finally, you learned about job scheduling to automate routine maintenance tasks
using Ansible.
In the next chapter, we will look at the different deployment methodologies that are
relevant to an Enterprise Linux environment and how to leverage these.
Questions
1. What is a key advantage of using AWX to store your credentials over the
methods available to you on the command line?
2. Why is it important to make good use of a version control system such as Git to
store your playbooks?
3. How is AWX advantageous over Ansible on the command line when it comes to
dynamic inventories?
4. What is a project in AWX?
5. What is a template in AWX analogous to on the command line?
6. How does AWX tell you which commit to a Git repository a playbook run was
performed against?
7. Why is it advisable to restrict access to the server that hosts AWX, especially the
shell and local filesystem?
8. If you need to programmatically launch playbook runs, how can AWX help you?
[ 88 ]
Streamlining Infrastructure Management with AWX Chapter 3
Further reading
For an in-depth understanding of Ansible including AWX, please refer
to Mastering Ansible, Third Edition by James Freeman and Jesse Keating (https:/​/
www.​packtpub.​com/​gb/​virtualization-​and-​cloud/​mastering-​ansible-​third-
edition).
To achieve a greater understanding of version control with Git and best practices
associated with its use, please refer to Git Best Practices Guide by Eric Pidoux
(https:/​/​www.​packtpub.​com/​application-​development/​git-​best-​practices-
guide).
To understand how to access and work with the AWX API, please refer
to https:/​/​docs.​ansible.​com/​ansible-​tower/​latest/​html/​towerapi/​index.
html.
If you wish to explore the control of AWX with the tower-cli tool, please refer
to the official documentation here: https:/​/​tower-​cli.​readthedocs.​io/​en/
latest/​.
[ 89 ]
2
Section 2: Standardizing Your
Linux Servers
This section presents a hands-on look at how to ensure that consistency and repeatability
remain core facets of your Linux server environment, promoting best practices such as
scalability, reproducibility, and efficiency.
This section comprises the following chapters:
Chapter 4, Deployment Methodologies
Chapter 5, Using Ansible to Build Virtual Machine Templates for Deployment
Chapter 6, Custom Builds with PXE Booting
Chapter 7, Configuration Management with Ansible
4
Deployment Methodologies
So far in this book, we have set the groundwork for a stable foundation for your Enterprise
Linux environment. We have discussed in detail how to ensure your Linux environment
lends itself well to automation through standardization and how to leverage Ansible and
AWX to support you on your automation journey. Before we get started on the really
detailed technical work in this chapter, we must take a look at one final piece of
detail—your deployment methodology.
We have already established a need for a small number of consistent Linux builds for your
environment. There is now a decision-making process for you to go through—how to
deploy these builds across your enterprise. Most enterprises have several choices available
to them, ranging from the easiest—downloading publicly available template
images—through building their own templates, to perhaps the most complex—building
from scratch using a pre-boot environment. Alternatively, the best approach might be some
hybrid of these approaches. In this chapter, we will explore these options and understand
how to ensure you are selecting the best one for your enterprise that supports you in your
automation journey and is efficient and easy to implement. In subsequent chapters, we will
then go into greater technical depth on each approach.
The following topics will be covered in this chapter:
Knowing your environment
Keeping builds efficient
Ensuring consistency across Linux images
Deployment Methodologies Chapter 4
Technical requirements
This chapter assumes that you have access to a virtualization capable environment running
Ubuntu 18.04 LTS. Some examples are also performed on CentOS 7. In either of these cases,
the examples can be run on either a physical machine (or laptop) running one of the
aforementioned operating systems, with a process that has virtualization extensions
enabled, or a virtual machine with nested virtualization enabled.
Ansible 2.8 is also used later in this chapter and it is assumed you have this installed on the
Linux host you are using.
All example code discussed in this book is available from GitHub at: https:/​/​github.​com/
PacktPublishing/​Hands-​On-​Enterprise-​Automation-​on-​Linux.
Knowing your environment
No two enterprise environments are the same. Some businesses still rely heavily on bare-
metal servers, whilst others now rely on one of a myriad of virtualization or cloud
providers (either private or public). Knowing which environments are available to you is a
key part of the decision-making process.
Let's explore the various environments and the relevant build strategies for each.
Deploying to bare-metal environments
Bare-metal environments are without a doubt the grandfather of all enterprise
environments. Before the revolution in virtualization and then cloud technologies
throughout the 21st century, the only way to build an environment was on bare metal.
These days it is unusual to find an entire environment which is run on bare metal, though it
is common to find ones where certain key components are run on physical hardware,
especially databases or computational tasks that require certain physical hardware
assistance (for example, GPU acceleration or hardware random number generation).