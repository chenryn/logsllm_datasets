    LABEL_276:
              v27 = *(v9 + 24);
              goto LABEL_33;
            }
            break;
        }
        if ( *v7 != 28 )
          goto LABEL_276;
        if ( length )
        {
          v31 = length + *(v9 + 16);
          if ( v31 >= *(*(v9 + 8) + 40i64) )
          {
            NdisAdvanceNetBufferDataStart(v9, length, 0i64, 0i64);
          }
          else
          {
            *(v9 + 40) += length;
            *(v9 + 24) -= length;
            *(v9 + 16) = v31;
          }
        }
        v21 += length;
      }
往下调试可以看到，这里有一个循环来处理数据包。而0x18选项这里是对长度有限制条件的。首先会获取每个option内数据的大小进行验证，读取第一个Option数据，获取Option中的Length字段为\x04，4*8=0x20字节，从Option头相加0x20字节，会直接跳到下一个\x19\x26，从而跳过长度限制。
    while ( 1 )
    {
      ...
      if ( *v78 == 0x18 )
      {
         v80 = 8 * v78[1];
         v256 = 0i64;
         v257 = 0i64;
         v258 = 0i64;
         v249 = 0i64;
         v250 = 0i64;
         v156 = NdisGetDataBuffer(v72, v79, &v256, 1i64, 0);
         _mm_storeu_si128(&v264, _mm_load_si128(&_xmm));
         v184 = *(&v264 + ((*(v156 + 3) >> 3) & 3));
         if ( v184 != -1 )
         {
            v157 = *(v156 + 2);
            v158 = _byteswap_ulong(*(v156 + 4));
            v159 = 2 * v158;
            if ( (2 * v158) >> 1 != v158 )
               v159 = -1;
            CopyPrefix(&v249, v156 + 8, *(v156 + 2), 16i64);
            v172 = v184;
            LOBYTE(v170) = v157;
            IppUpdateAutoConfiguredRoute(v11, Buf2, v68, &v249, v170);
            v76 = v179;
            if ( v67 CurrentMdlOffset
字段来记录要访问数据起始地址相对于_MDL->MappedSystemVa 的偏移。
关于_NET_BUFFER
    0: kd> dt ndis!_NET_BUFFER
       +0x000 Next             : Ptr64 _NET_BUFFER
       +0x008 CurrentMdl       : Ptr64 _MDL
       +0x010 CurrentMdlOffset : Uint4B
       +0x018 DataLength       : Uint4B
       +0x018 stDataLength     : Uint8B
       +0x020 MdlChain         : Ptr64 _MDL
       +0x028 DataOffset       : Uint4B
       +0x000 Link             : _SLIST_HEADER
       +0x000 NetBufferHeader  : _NET_BUFFER_HEADER
       +0x030 ChecksumBias     : Uint2B
       +0x032 Reserved         : Uint2B
       +0x038 NdisPoolHandle   : Ptr64 Void
       +0x040 NdisReserved     : [2] Ptr64 Void
       +0x050 ProtocolReserved : [6] Ptr64 Void
       +0x080 MiniportReserved : [4] Ptr64 Void
       +0x0a0 DataPhysicalAddress : _LARGE_INTEGER
       +0x0a8 SharedMemoryInfo : Ptr64 _NET_BUFFER_SHARED_MEMORY
       +0x0a8 ScatterGatherList : Ptr64 _SCATTER_GATHER_LIST
关于_MDL
    0: kd> dt ndis!_MDL
       +0x000 Next             : Ptr64 _MDL
       +0x008 Size             : Int2B
       +0x00a MdlFlags         : Int2B
       +0x00c AllocationProcessorNumber : Uint2B
       +0x00e Reserved         : Uint2B
       +0x010 Process          : Ptr64 _EPROCESS
       +0x018 MappedSystemVa   : Ptr64 Void
       +0x020 StartVa          : Ptr64 Void
       +0x028 ByteCount        : Uint4B
       +0x02c ByteOffset       : Uint4B
第一次调用Ipv6pUpdateRDNSS函数之前：
    0: kd> dt ndis!_NET_BUFFER @r14
       +0x000 Next             : (null) 
       +0x008 CurrentMdl       : 0xffff9a04`9ae4c350 _MDL
       +0x010 CurrentMdlOffset : 0x10
       +0x018 DataLength       : 0x150
       +0x018 stDataLength     : 0x150
       +0x020 MdlChain         : 0xffff9a04`9c40a180 _MDL
       +0x028 DataOffset       : 0x70
       +0x000 Link             : _SLIST_HEADER
       +0x000 NetBufferHeader  : _NET_BUFFER_HEADER
       +0x030 ChecksumBias     : 0
       +0x032 Reserved         : 0
       +0x038 NdisPoolHandle   : 0xffff9a04`9aba28c0 Void
       +0x040 NdisReserved     : [2] (null) 
       +0x050 ProtocolReserved : [6] 0x00000160`00000000 Void
       +0x080 MiniportReserved : [4] (null) 
       +0x0a0 DataPhysicalAddress : _LARGE_INTEGER 0x0
       +0x0a8 SharedMemoryInfo : (null) 
       +0x0a8 ScatterGatherList : (null) 
    0: kd> dt ndis!_MDL 0xffff9a04`9ae4c350
       +0x000 Next             : 0xffff9a04`9ae4c7d0 _MDL
       +0x008 Size             : 0n56
       +0x00a MdlFlags         : 0n4
       +0x00c AllocationProcessorNumber : 0x9a04
       +0x00e Reserved         : 0xffff
       +0x010 Process          : (null) 