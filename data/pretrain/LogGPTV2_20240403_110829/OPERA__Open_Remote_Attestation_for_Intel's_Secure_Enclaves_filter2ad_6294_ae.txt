Running OPERA-SV frontends in enclaves. OPERA may also opt
to run OPERA-SV frontends in enclaves. There are two reasons for
this alternative design choice: First, as the IAS verification reports
are encrypted by IAS with the OPERA-SV’s public key, the OPERA-SV
frontend must be involved to decrypt the quotes. As periodic valida-
tion of IssueEs and AttestEs are required, the OPERA-SV frontend
must be always online. Second, during the periodic validation, these
OPERA-SV frontends may collect information regarding the setup
and validation of both IssueEs and AttestEs. While privacy of
IssueEs and AttestEs are less important in general (as they are
public enclaves), however, under certain circumstances, such as
decentralized attestation schemes, users of OPERA may place less
trust on the OPERA-SV than Intel.
To address this, OPERA-SV can ship the decryption functional-
ity in enclaves (dubbed FrontE) and run the FrontE on the same
OPERA Server as IssueE. The FrontE could attest itself (using IAS)
to other OPERA enclaves to derive shared keys for secure commu-
nications between these enclaves. The EPID private key can be
provisioned into the FrontE after attestation. Hence, the OPERA
Servers do not need to be trusted with OPERA-SV’s private keys.
Alternatively, FrontE may first generate a public/private key pair
inside the enclave and then expose the certificate to the outside. In
this way, even the OPERA-SV could not participate in the validation
process of IssueEs and AttestEs. Thus, privacy of these enclaves
can be preserved.
OPERA on AMD’s Secure Encrypted Virtualization (SEV). OPERA
is primarily designed for Intel’ SGX platforms. However, we do not
see major challenges of adopting OPERA on other trusted execution
environments, such as AMD’s SEV [23]. However, as the time of
writing, we could not obtain the source code to perform remote
attestation for SEV-enabled virtual machines. Neither is AMD’s
attestation service available to us. We leave extension of OPERA to
other platforms to the future work.
6.3 Dependence on Intel
OPERA still relies on Intel (IPS and IAS) to establish the root of trust
on the underlying SGX platforms. As analyzed by by Francillon et
al. [16], a remote attestation protocol requires exclusive accesses
to a long-term key for generating attestation signatures. For Intel
SGX, as its manufacturer, Intel is the only entity that could embed
such long-term secrets into SGX processors, and retain exclusive
accesses to these secrets. Hence, OPERA, and any other alternative
attestation services, must rely on Intel to bootstrap the trust on the
SGX platform.
Intel may decide to ban IssueE and AttestE. However, in its
current design, Intel could only ban OPERA-SVs but not individual
enclaves. This is because enclaves’ launch control is enforced in the
launch enclave using a white list of MRSIGNERs (corresponding to
ISVs), and using IAS’s service requires the ISV’s registered SPID and
certificate. Therefore, Intel could only ban the OPERA-SVs that run
IssueE and AttestE. With the formation of an open attestation
framework, OPERA will invite a large number of ISVs to participate
in the attestation service, and thus preventing Intel from banning
all participating OPERA-SVs. Banning individual enclaves instead of
ISVs would introduce considerable changes to the current design
of SGX.
Session 10B: TEE IICCS ’19, November 11–15, 2019, London, United Kingdom2327(a) ISV performs verification.
(b) Verifier = Attester.
Figure 10: Third-party attestation models. ➀ISV sends an at-
testation request the the Attester (SGX platform); ➁Attester
sends the attestation report to ISV; ➂ISV requests Verifier to
verify the attestation report; ➃Verifier responds to ISV.
Nevertheless, given the benefit of security, privacy, and usability,
instead of suppressing OPERA, Intel will benefit by supporting it.
OPERA may attract more ISVs with particular security and/or pri-
vacy requirements, e.g., confidential cloud computing and privacy-
preserving blockchains, to adopt SGX for development. We are
discussing with Intel to gain support from the tech-giant to OPERA.
6.4 Intel’s Third-Party Attestation Scheme
Concurrent to our work, Intel announced Data Center Attestation
Primitives (DCAP) to support third-party attestation in on-premise
network, such as data centers [32]. In such a scheme, third-party
quoting enclaves can be used instead of Intel’s quoting enclave. A
pair of attestation keys used by the third-party quoting enclave
are generated from inside, using algorithms such as Elliptic Curve
Digital Signature Algorithm (ECDSA). The public key is exported
to Intel’s Provisioning Certification Enclave (PCE) and signed using
the private Provisioning Certification Key (PCK). PCK is a pair of
asymmetric keys derived from the root provisioning secret burnt
into the SGX platform’s e-fuses.
To establish a chain of trust, Intel needs to publish PCK certifi-
cates for users to verify the public key of PCKs, which can be used
to verify the ECDSA public key certificate generated by the PCE.
Therefore, a user with knowledge of Intel’s public key, PCK cer-
tificates, and ECDSA public key certificates, can verify the ECDSA
attestation result all by herself (i.e., the quote signed by the ECDSA
private key). Similar to OPERA, the revocation list of PCKs still needs
to be periodically retrieved from Intel (and thus the third-party at-
testation service still relies on Intel).
However, what is not made clear by Intel is where the verifi-
cation should be performed [32]. Depending on whether the PCK
certificates could be disclosed to public, two verification models
can exist (Fig. 10): First, when the certificates can be made publicly
available (Fig. 10a), the attestation results could be verified locally
by the users without trusting any third party. However, as a PCK
certificate can uniquely identify an SGX platform [32], such a de-
sign leaks the identity of attester, i.e., the SGX platform that runs
the enclave application, which can be a privacy concern—this is also
the motivation of adopting EPID in SGX original attestation scheme.
In the case of confidential cloud computing, users of public clouds
may use such information to perform co-location attacks [30, 45].
Second, when the certificates are only accessible by the ser-
vice provider (Fig. 10b), to use the third-party attestation service,
users have to fully trust the third-party attestation service. As ar-
gued by Swami [39], collusion between the attester and the verifier
could completely invalidate the attestation results. Specifically, if
the attestation service provider is the same as the operator of the
data center—which is typically the case—enclave programs can be
launched on non-SGX machines but still pass the remote attestation.
In comparison, OPERA addresses the disadvantages of both de-
signs. On one hand, OPERA adopts EPID schemes to protect SGX
platforms’ privacy. On the other hand, OPERA leverages Intel SGX
to exclude the third party from the trusted domain. Therefore, we
envision OPERA could be used in cases where Internet-based attesta-
tion service is required, such as privacy-preserving permissionless
blockchain [13, 50], confidential public clouds [2, 31], etc.
Build OPERA on top of DCAP. It is also possible to integrate OPERA
and DCAP together. The idea is to replace the functionality of IAS
with DCAP. Note that IAS is used to (1) prove AttestE’s identity
to IssueE and (2) prove IssueE’s identity to the ISV. For the first
purpose, instead of sending an IAS quote, AttestE sends DCAP
quote and the corresponding PCK certificate and ECDSA public
key certificate to IssueE. IssueE could then verify AttestE’s iden-
tity and provision private EPID member key. Note that the PCK
certificate and ECDSA public key certificate of the SGX platform
will not be recorded by IssueE nor forwarded to IsvE so that SGX
platform privacy can be reserved. For the second purpose, instead of
appending IAS verification report in the gvCert, IssueE appends
the PCK certificate and ECDSA public key certificate of the OPERA
Server in gvCert. In this way, IssueE’s identity can be verified by
the ISV, and only the OPERA Server’s identity is disclosed.
7 RELATED WORK
Intel SGX adopts the EPID scheme which is a group signature with
additional security goals such as anonymity [9], and member revo-
cation [10]. Some of its security guarantees, however, have been
questioned by Swami [39]. In this paper, we further explore prob-
lems in SGX attestation and propose an open attestation platform
to address the privacy and performance issues.
To adapt SGX in clouds, VC3 proposes to use a Cloud Quoting
Enclave to generate an additional attestation signature for the at-
tested enclaves, in order to prove that an SGX platform is not only
authentic but indeed in the possession of the cloud provider [33].
However, this Cloud Attestation scheme does not replace Intel’s
SGX attestation, but rather merely complements it. VC3 could ex-
tend OPERA (by offering a provider specific signature) to replace its
combined use of SGX Attestation and Cloud Attestation.
SafeKeeper [25] and ReplicaTEE [37] addressed a related problem
to ours, i.e., enabling unregistered users to use IAS. They achieved
this by forwarding quotes to IAS via a registered proxy. However,
this design does not address the privacy issues considered in our
paper, as IAS could still collect information from the forwarded
quotes. Concurrent to our work, Alder et al. [1] proposed a tran-
sitive attestation protocol in the context of Function-as-a-Service
clouds, enabling the users to verify the worker enclaves by attesting
only a centralized key distributing enclave. Despite this technical
similarity, however, their protocol targets a specific application,
while ours aims to provide a generic attestation service.
Session 10B: TEE IICCS ’19, November 11–15, 2019, London, United Kingdom2328Knauth et al. [24] from Intel proposed to use Intel’s remote attes-
tation to generate X.509 certificates for TLS communication. They
used IAS verification reports to prove the validity of the certificates,
which is similar to how IssueE creates gvCert. Moreover, Intel’s
Data Center Attestation Primitives also enables third parties to
conduct attestation services [32]. However, as discussed in Sec. 6.4,
their scheme has limitations and does not replace OPERA.
Also related to our work is due to Jackson [21], who proposed
several alternative attestation schemes to address similar attesta-
tion problems. However, the schemes were still rudimentary; the
security of the proposed schemes were not formally analyzed, and
no proof-of-concept implementation was provided.
Prior to our work, ProVerif [8] has been used to verify secu-
rity properties for various protocols [5, 7]. In the context of SGX,
ProVerif has also be used for verification of confidentiality prop-
erties of enclave programs [36].
8 CONCLUSION
This paper presents OPERA, an Open Platform for Enclave Remote
Attestation for SGX applications to perform distributed, frequent,
and privacy-preserving remote attestation. The advantages of OPERA,
in comparison to Intel’s attestation service, are its openness, im-
proved privacy and performance. We analyzed and proved the se-
curity and privacy guarantees of OPERA, implemented a prototype,
and evaluated its performance.
ACKNOWLEDGMENTS
The work was supported in part by the NSF grants 1718084 and
1750809, and research gifts from Intel and Dfinity.
REFERENCES
[1] Fritz Alder, N. Asokan, Arseny Kurnikov, Andrew Paverd, and Michael Steiner.
2018. S-FaaS: Trustworthy and Accountable Function-as-a-Service using Intel
SGX. CoRR abs/1810.06080 (2018). arXiv:1810.06080 http://arxiv.org/abs/1810.
06080
[2] Alicloud. 2018. ECS Bare Metal Instance. https://www.alibabacloud.com/product/
ebm.
[3] Ittai Anati, Shay Gueron, Simon P Johnson, and Vincent R Scarlata. 2013. Inno-
vative Technology for CPU Based Attestation and Sealing. In 2nd International
Workshop on Hardware and Architectural Support for Security and Privacy. ACM.
[4] Sergei Arnautov, Bohdan Trach, Franz Gregor, Thomas Knauth, Andre Martin,
Christian Priebe, Joshua Lind, Divya Muthukumaran, Dan O’Keeffe, Mark L.
Stillwell, David Goltzsche, Dave Eyers, Rüdiger Kapitza, Peter Pietzuch, and
Christof Fetzer. 2016. SCONE: Secure Linux Containers with Intel SGX. In 12th
USENIX Symposium on Operating Systems Design and Implementation. USENIX
Association.
[5] Michael Backes, Matteo Maffei, and Dominique Unruh. [n.d.]. Zero-Knowledge
in the Applied Pi-calculus and Automated Verification of the Direct Anonymous
Attestation Protocol. In Proceedings of the 2008 IEEE Symposium on Security and
Privacy. IEEE Computer Society, Washington, DC, USA.
[6] Andrew Baumann, Marcus Peinado, and Galen Hunt. 2014. Shielding Applications
from an Untrusted Cloud with Haven. In 11th USENIX Symposium on Operating
Systems Design and Implementation (OSDI 14). USENIX Association, Broomfield,
CO.
[7] K. Bhargavan, B. Blanchet, and N. Kobeissi. 2017. Verified Models and Reference
Implementations for the TLS 1.3 Standard Candidate. In 2017 IEEE Symposium on
Security and Privacy (SP).
[8] Bruno Blanchet. 2016. Modeling and Verifying Security Protocols with the
Applied Pi Calculus and ProVerif. Foundations and Trends in Privacy and Security
1, 1–2 (Oct. 2016), 1–135.
[9] Ernie Brickell, Jan Camenisch, and Liqun Chen. 2004. Direct Anonymous Attesta-
tion. In Proceedings of the 11th ACM Conference on Computer and Communications
Security (CCS ’04). ACM, New York, NY, USA.
[10] E. Brickell and J. Li. 2010. Enhanced Privacy ID from Bilinear Pairing for Hardware
Authentication and Attestation. In IEEE Second International Conference on Social
Computing. 768–775.
[11] Chia che Tsai, Donald E. Porter, and Mona Vij. 2017. Graphene-SGX: A Practical
Library OS for Unmodified Applications on SGX. In 2017 USENIX Annual Technical
Conference (USENIX ATC 17). USENIX Association, Santa Clara, CA.
[12] Guoxing Chen, Sanchuan Chen, Yuan Xiao, Yinqian Zhang, Zhiqiang Lin, and
Ten H. Lai. 2019. Stealing Intel Secrets from SGX Enclaves via Speculative
Execution. In Proceedings of the 2019 IEEE European Symposium on Security and
Privacy.
[13] Raymond Cheng, Fan Zhang, Jernej Kos, Warren He, Nicholas Hynes, Noah M.
Johnson, Ari Juels, Andrew Miller, and Dawn Song. 2019. Ekiden: A Platform
for Confidentiality-Preserving, Trustworthy, and Performant Smart Contract
Execution. In Proceedings of the 2019 IEEE European Symposium on Security and
Privacy.
[14] D. Dolev and A. C. Yao. 1981. On the Security of Public Key Protocols. In
Proceedings of the 22nd Annual Symposium on Foundations of Computer Science
(SFCS ’81). IEEE Computer Society, Washington, DC, USA.
[15] Fortanix. 2018. Runtime Encryption with Intel SGX. https://fortanix.com/.
[16] Aurélien Francillon, Quan Nguyen, Kasper B. Rasmussen, and Gene Tsudik. 2014.
A Minimalist Approach to Remote Attestation. In Proceedings of the Conference on
Design, Automation & Test in Europe (DATE ’14). European Design and Automation
Association, 3001 Leuven, Belgium, Belgium.
[17] Matthew Hoekstra, Reshma Lal, Pradeep Pappachan, Vinay Phegade, and Juan
Del Cuvillo. 2013. Using Innovative Instructions to Create Trustworthy Software
Solutions. In 2nd International Workshop on Hardware and Architectural Support
for Security and Privacy. ACM.
[18] Tyler Hunt, Zhiting Zhu, Yuanzhong Xu, Simon Peter, and Emmett Witchel. 2016.
Ryoan: A Distributed Sandbox for Untrusted Computation on Secret Data. In
12th USENIX Symposium on Operating Systems Design and Implementation (OSDI
16). USENIX Association.
[19] Intel. 2017.
Intel 64 and IA-32 Architectures Software Developer’s Manual,
Combined Volumes:1,2A,2B,2C,3A,3B,3C and 3D. https://software.intel.com/
sites/default/files/managed/39/c5/325462-sdm-vol-1-2abcd-3abcd.pdf.
[20] Intel. 2018. Intel Software Guard Extensions (Intel SGX) Services. https://api.
portal.trustedservices.intel.com/.
[21] Alon Jackson. 2017. Trust is in the Keys of the Beholder : Extending SGX Au-
tonomy and Anonymity. M.Sc. dissertation. Interdisciplinary Center, Herzliya.
(2017).
[22] Simon Johnson, Vinnie Scarlata, Carlos Rozas, Ernie Brickell, and Frank Mckeen.
2016. Intel Software Guard Extensions: EPID Provisioning and Attestation Services.
Technical Report. Intel, Tech. Rep. https://software.intel.com/sites/default/files/
managed/57/0e/ww10-2016-sgx-provisioning-and-attestation-final.pdf.
[23] David Kaplan, Jeremy Powell, and Tom Woller. 2016. AMD memory encryp-
tion. White paper. https://developer.amd.com/wordpress/media/2013/12/AMD_
Memory_Encryption_Whitepaper_v7-Public.pdf.
[24] Thomas Knauth, Michael Steiner, Somnath Chakrabarti, Li Lei, Cedric Xing, and