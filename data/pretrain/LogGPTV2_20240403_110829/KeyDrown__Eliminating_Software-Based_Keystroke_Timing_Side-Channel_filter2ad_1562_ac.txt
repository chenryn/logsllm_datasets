procfs attacks, we consider them out of scope for this paper.
The attacker is able to continuously monitor a side channel
to obtain traces for all user input. We assume the (hypothetical)
countermeasure against keystroke timing attacks was already
installed when the attacker gained unprivileged access to the
machine. Consequently, the attacker cannot obtain keystroke
timing templates and thus cannot perform a template attack.
We assume that an attacker can generally obtain only a
single trace for any user input sequence, but multiple traces
for password input. In contrast
to side-channel attacks on
algorithms, which can be repeated multiple times, user input
sequences are generally not (automatically) repeatable, and
thus an attacker cannot obtain multiple traces. An exception
are phrases that are repeatedly entered in the same way, such as
login credentials and especially passwords. A countermeasure
must address both cases.
To effectively eliminate keystroke timing attacks, we iden-
tify the 3 following requirements a countermeasure must fulﬁll.
R1: Minimize Side Channel Accuracy. As user in-
put sequences are in general not (automatically) repeatable,
keystroke timing attacks require a high precision and high
recall
to succeed. To be effective, a countermeasure must
reduce the F-score enough so that the attacker does not gain
any advantage from using the side channel over an always-
one oracle. More speciﬁcally, the F-score of the side-channel
based classiﬁer may not be above the F-score of the always-
one oracle (0.15). Ristenpart et al. [46] reported a false-
negative rate of 5 % with 0.3 false positives per second. At an
average typing speed for a skilled typist of 8 keystrokes per
second [44], the F-score is thus 0.96, which is an advantage
over an always-one oracle of +545.3 %. Gruss et al. [16], [17]
reported false-negative rates ≤ 8 % with no false positives,
resulting in an F-score of > 0.96, which is an advantage
over an always-one oracle of +546.9 %. Thus, we assume a
countermeasure is effective if it reduces the F-score of side
channels signiﬁcantly, such that using the side channel gives
an advantage over an always-one oracle of ≤0.0 %.
R2: Reduction of Statistical Characteristics in Password
Input. In the case of a password input, we assume that an
attacker can combine information from multiple traces, i.e.,
exploit statistical characteristics. A countermeasure is effective
if the attacker requires an impractical number of traces to reach
the F-score of state-of-the-art attacks, i.e., higher than 0.95.
Speciﬁcally, if the side-channel attack requires more traces
than can be practically obtained, we consider the side-channel
attack not practical. Studies [8], [9], [11], [47], [54] estimate
that most users have 1–5 different passwords and enter 5
Fig. 5. Multi-layered design of KeyDrown.
passwords per day on average. It is also estimated that 56%
of users change their password at least once every 6 months.
Thus, even if we assume that we attack a user with a single
password that is entered 5 times per day, the expected number
of measurement traces that an attacker is able to gather after
6 months is 913. Assuming that attackers might come up with
new side-channel attacks, a generous security margin must be
applied. We consider a countermeasure effective if it requires
more than 1825 traces, i.e., traces for a whole year, to reach
an F-score of 0.95.
R3: Implementation Security. R1 and R2 deﬁne how the
countermeasure must be designed to be effective. However,
the implementation itself can indirectly violate R1 or R2
by leaking side-channel information on computations of the
countermeasure itself. Consequently, an attacker may be able
to ﬁlter the true positive keystrokes. We thus require that the
countermeasure may not have distinguishable code paths or
data access patterns to guarantee that it is free from leakage.
leak by itself, an at-
tacker is only left with the low F-scores from R1 and R2.
If all requirements are met, classical password recovery at-
tacks like brute force and more sophisticated attacks using
Markov n-grams [33], [38], probabilistic context-free gram-
mars (PCFG) [52], [55], or neural networks [36], are more
practical than a side-channel attack in the presence of the
countermeasure.
If the implementation does not
In the following section, we describe the design of a
countermeasure that fulﬁlls all three requirements.
IV. KeyDrown MULTI-LAYER DESIGN
We designed KeyDrown as a multi-layered countermea-
sure.2 Each layer builds up on the layer beneath and adds addi-
tional protection. Figure 5 shows how the layers are connected
to each other. The ﬁrst layer implements a protection mecha-
nism against interrupt-based attacks and timing-based attacks
by artiﬁcially injecting interrupts. Any real keyboard interrupt
only replaces one fake keyboard interrupt within a multitude of
fake interrupts, i.e., it perfectly blends in the stream of random
fake keyboard interrupts. The implementation ensures that it
makes the keystroke interrupt density uniform over time and
thus, independent of the real interrupts. Figuratively speaking,
plotting the number of keystroke interrupts over time will yield
a line which has no deviations at the points in time where real
keystrokes occur.
2The code and a demo video are available in a GitHub repository:
https://github.com/keydrown/keydrown.
6
KernelRealkeyFakekey/dev/input/event*Librarylibgtk/libinputWidgetHiddenWindowApplicationWindowFig. 6. General ﬂowchart of the kernel module.
Fig. 7.
Snapdragon speciﬁc functions are marked in blue.
Linux kernel module design for x86 and the Snapdragon SoC.
KeyDrown exploits that keystroke timing side channels
do not provide the information which process or window is
receiving the keystroke. These side channels are system-wide
attacks on shared code, shared cache sets, or other shared
parts of the microarchitecture. While this makes them very
powerful (cross-core, cross-user attacks), it is also the basis
for our defense mechanism. An attacker cannot distinguish real
keyboard input in one process or window from fake keyboard
input in another process or window. KeyDrown exploits this
technicality and sends the fake keyboard input through the
entire software stack into a special process and window. All
keystrokes, i.e., real keystrokes and fake keystrokes, are passed
to the library in a way which is indistinguishable for an
attacker. The only difference is the key code value as well as
the target process and window, which both cannot be obtained
in keystroke timing side channels.
The second layer protects the library handling the user
input against Flush+Reload attacks, including cache template
attacks, and Prime+Probe attacks. For every keystroke event
received from the kernel, a random keystroke is sent to a
hidden window. The library cannot distinguish between real
and fake keystrokes and thus both have the same execution
path. Note that this also triggers screen redraw events, hence,
the screen-redraw interrupt side channel is also covered by
KeyDrown.
In the third layer, the actual password entry ﬁeld is pro-
tected against Prime+Probe attacks by accessing the underlying
buffer whenever a real or a fake keystroke is received.
Combining the three layers, the system-wide set of cache
lines that are touched by the code paths through the entire
software stack for real and fake keystrokes, are identical. As
there is no difference, this voids any advantage an attacker
could have gained from a cache side channel.
A. First Layer
Basic Concept. Figure 6 shows the program ﬂow for the
kernel part of KeyDrown for both x86 and ARM. We use a non-
periodic one-shot timer interrupt with a random delay to inject
a fake keystroke.3 This leads to a uniform random distribution
of keystrokes over time.
The kernel module handles two types of events: Hardware
interrupts from the input device, and the timer interrupts. If the
3Timer interrupts are often known as periodic interrupts triggering reg-
ular operations, e.g., scheduling. However, on modern systems there are
signiﬁcantly more features to timer interrupts, such as non-periodic one-shot
timers [22]. One-shot timers are architectural features that can be used through
legitimate kernel interfaces and have no side effects on any system timers.
kernel module receives one of our timer interrupts, it injects
a keyboard interrupt. If it receives a keyboard interrupt, it
injects a non-periodic one-shot timer interrupt. Thus, for real
and fake keystrokes both interrupts occur. To minimize the
effect of the real keyboard interrupt on the interrupt density, the
upcoming non-periodic one-shot timer interrupt is canceled.
Note that the time between the fake keyboard interrupt and
the user pressing a key was also a random delay. KeyDrown
acts as if this random delay was planned for the fake keyboard
interrupt all along. That is, the real keyboard interrupt takes the
place of our fake keyboard interrupt. Hence, the real keyboard
interrupt has no additional inﬂuence on the keystroke interrupt
density function. This guarantees that overall, the keystroke
interrupt density remains uniform and real keystrokes cannot
be distinguished from fake keystrokes.
For the fake keystrokes, the kernel uses a typically unused
key value. The kernel does not have varying code paths and
data accesses based on the key value, hence, the same code
is executed for both real and fake keystrokes. In both cases,
the keystroke handler is delayed by a small random delay to
hide timing differences from interrupt runtimes. Finally, all
keystrokes are passed to the library through the same data
structures (cf. Figure 5). Consequently, the attacker cannot use
a Prime+Probe or Multi-Prime+Probe attack on the kernel to
distinguish real and fake keystrokes.
Implementation Details. The ﬁrst layer of KeyDrown is
implemented as a Linux kernel module that aims to prevent
interrupt-based attacks on keystrokes. We do not require a
custom kernel or any patches to the Linux kernel itself, but
only the Linux kernel header ﬁles for the running kernel. All
functionality is implemented in one generic kernel module
that can be loaded into any Linux kernel from version 3.4 to
4.10, the newest release at the time of writing. The interrupt
hardware and handling mechanism is compatible with all
personal computers; thus, there is no further limitation on PC
hardware or Linux distributions.
Figure 7 shows the implementation details of the KeyDrown
kernel module. The non-periodic one-shot
timer interrupts
are implemented using the Linux platform-independent high-
resolution timer API [32]. On Linux, a driver can register
an interrupt handler for a speciﬁc interrupt which is called
whenever the CPU receives the interrupt. The interrupt service
routine do_IRQ calls the general handle_irq function
which subsequently calls generic_handle_irq_desc to
execute the correct handler for every interrupt. To receive all
hardware interrupts, we change the input device’s interrupt
handler to a function within our kernel module. Afterwards,
7
HookIRQStarttimerEventisreal?InjectIRQInjecttimerinterruptRandomlydelayISRFetchIRQhandlerSendeventRestarttimerTimerIRQYesNodo_IRQ()handle_irq()generic_handle_\irq_desc()handle_irq()IRQ0x31/362handle_irq()IRQn...i8042_interrupt()irq_touch_handler()Hookserio_interrupt()input_*()KeyDrownfetchINT0x31msmgpiointerrupt5we forward the interrupt to the actual input device driver (i.e.,
i8042_interrupt on x86, and irq_touch_handler
on the Nexus 5 (ARM)). Every time the kernel receives one of
the non-periodic timer interrupts or a real hardware interrupt,
we restart the non-periodic timer with a new random delay to
maintain the uniform random distribution over time.
The kernel module triggers a hardware interrupt for every
non-periodic timer interrupt. On x86, we can simply execute
the int assembly instruction with the corresponding interrupt
number. This spurious keyboard interrupt travels up until the
point where the keyboard driver tries to read the scancode
from the hardware. As the driver does not execute the entire
i8042_interrupt function for spurious interrupts, we
access the remaining function to fetch it into the cache as if it
was executed. In contrast, for real keys, we access the code that
injects the keys to fetch it into the cache as if it was executed.
From an attacker’s point of view, there is no difference in cache
activity between a data fetch and a code fetch, i.e., a Prime+
Probe attack cannot determine the difference.
We inject a scancode of a typically unused key, such
as F16 or a Windows multimedia key using the standard
serio_interrupt interface. Thus, from this point on
the only difference between real and fake keystrokes is the
scancode. Finally, all scancodes are sent to the upper software
layers and run through the same execution path.
On the ARM platform, hardware interrupts and device
drivers are hardware dependent. We decided to implement our
proof-of-concept on the widespread Qualcomm Snapdragon
Mobile Station Modem (MSM) SoC [45].
ARM processors generally do not provide an assembly
instruction to generate arbitrary interrupts from supervisor
mode. Instead, we have to communicate with the interrupt
controller directly. The Snapdragon MSM SoC implements
its own intermediate I/O interrupt controller. All
interrupt
generating hardware elements are connected to this interrupt
controller and not directly to the GIC. Therefore, if we want
to inject an interrupt, we write the interrupt state of the
touchscreen interrupt via memory mapped I/O registers to the
MSM I/O interrupt controller. The remaining execution path
is analogous to the x86 module. When the driver aborts due
to a spurious interrupt, we fetch the irq_touch_handler
to produce the same cache footprint as if it was executed. We
inject an out-of-bounds touch event using the input_event,
input_report_abs, and input_sync functions, which
is then handed to the upper layers.
B. Second Layer
Basic Concept. The second layer countermeasure ensures
that the control ﬂow within the key-handling library is exactly
the same for both real and injected keystrokes. The fundamen-
tal idea of the second layer is that real and injected keystrokes
should have the same code paths and data accesses in the
library. We rely on the events injected in the ﬁrst layer to
propagate them further through the key-handling library. The
injected keys sent by our ﬁrst layer are valid, but typically
unused keys, thus they travel all the way up to the user space
to the receiving user space application. However, these unused
keys might not have the exact same path within the library.
Gruss et al. showed that an attacker can build cache tem-
plate attacks based on Flush+Reload [17] to detect keystrokes
and even distinguish groups of keys. This cache leakage
can also be measured with Multi-Prime+Probe. Both attacks
exploit the cache activity of certain functions that are only
called if a keystroke is handled, i.e., varying execution paths
and access patterns [17]. We mitigate these attacks by dupli-
cating every key event (cf. Figure 5) running through multiple
execution paths and access sequences simultaneously. The key
value of the duplicated key event is replaced by a random key
value, and the key event is sent to a hidden window. Hence, the
two key events, the real and the duplicated one, are processed
simultaneously by the remainder of the library and the two
applications. This introduces a signiﬁcant amount of noise on
cache template attacks on the library layer.
The real key event at this point may still be a fake keystroke
from the kernel. However, we duplicate the key event in order
to trigger key value processing and key drawing in the library
and the hidden window for both fake and real keystrokes.
Consequently, we cannot distinguish real and fake keystrokes
on the library layer using a side channel anymore.
Implementation Details. One of the most popular user
interface libraries for Linux is GTK+ [57]. The GTK+ library
handles the user input for many desktop environments and is
included in most Linux distributions [51]. As we cannot hide
cache activity, we generate artiﬁcial cache activity for the same
cache lines that are active when handling real user inputs.
The kernel provides all events, such as keyboard inputs,
through the /dev/input/event* pseudo-ﬁles to the user
space. The X Window System uses these ﬁles to provide all
events to the GTK+ event queue.
On x86, the second layer is a standalone GTK+ application.
On system startup, we create a hidden window containing
a text ﬁeld. The application uses poll to listen to the
/dev/input/event* interface to get notiﬁed whenever a
keyboard event occurs. This allows KeyDrown to have a very
low performance overhead, as the application is not using