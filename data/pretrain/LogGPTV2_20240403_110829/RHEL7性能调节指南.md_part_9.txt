### [⁠]{#chap-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Memory.html#sect-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Profiling_application_memory_usage_with_Valgrind-Profiling_heap_and_stack_space_with_Massif}4.2.2.3. 使用 Massif 分析堆栈空间 {.title}
:::
::: para
[**Massif**]{.application}
测量特定应用程序的堆空间。它测量可用空间和额外用来记录和调准的空间。[**massif**]{.application}
有助于用户了解减少应用程序内存使用的方法，以便提高运行速度，减少应用程序耗尽系统交换空间的可能性。使用
[**massif**]{.application} 执行的应用程序运行起来比平常通常慢 20
倍左右。
:::
::: para
要在一个应用程序中运行 [**massif**]{.application}，请执行如下命令：
:::
``` screen
# valgrind --tool=massif application
```
::: para
用户也可以使用以下选项来将 [**massif**]{.application}
的输出集中在一个特定的问题上。
:::
::: variablelist
[⁠]{#chap-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Memory.html#varl-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Profiling_heap_and_stack_space_with_Massif-_heap}[\--heap]{.term}
:   ::: para
    设定 [**massif**]{.application} 是否分析堆。默认值为
    `--heap=yes`{.command}。要禁用堆分析可设置为 `--heap=no`{.command}。
    :::
[⁠]{#chap-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Memory.html#varl-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Profiling_heap_and_stack_space_with_Massif-_heap_admin}[\--heap-admin]{.term}
:   ::: para
    堆分析启用时要设定每个用于管理的数据块字节数。默认值为 `8`{.literal}
    字节。
    :::
[⁠]{#chap-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Memory.html#varl-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Profiling_heap_and_stack_space_with_Massif-_stacks}[\--stacks]{.term}
:   ::: para
    设定 [**massif**]{.application} 是否分析堆。默认值为
    `--stack=no`{.command} 是由于堆分析会大大减缓
    [**massif**]{.application}。将这一选项设置为 `--stack=yes`{.command}
    来启用堆分析。要注意的是，[**massif**]{.application}
    会假设主要的堆始于零值，这是为了更好地显示与所分析的应用程序相关的堆尺寸的变化。
    :::
[⁠]{#chap-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Memory.html#varl-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Profiling_heap_and_stack_space_with_Massif-_time_unit}[\--time-unit]{.term}
:   ::: para
    设定 [**massif**]{.application} 收集分析数据的间隔。默认值为
    `i`{.literal}（执行指令）。用户也可以指定
    `ms`{.literal}（毫秒或实时）和
    `B`{.literal}（分配或收回的堆栈字节数）。检查分配的字节数有利于短期运行的应用程序及测试，因为对于不同的硬件来说，它是最具重复性的。
    :::
:::
::: para
[**Massif**]{.application} 将分析数据输出至 `massif.out.pid`{.filename}
文件中，该文件中的 *pid*
是指定应用程序的进程标识符。[**ms_print**]{.application}
工具将此分析数据绘成图表，以此显示执行应用程序的内存消耗，也包括峰值内存分配点负责分配的站点详情。要绘制
`massif.out.pid`{.filename} 文件中的数据，请执行以下指令：
:::
``` screen
# ms_print massif.out.pid
```
::: para
要查看 [**Massif**]{.application} 选项的完整列表，请参见
`/usr/share/doc/valgrind-version/valgrind_manual.pdf`{.filename}
中的文档。
:::
:::
:::
:::
::: section
::: titlepage
# [⁠]{#chap-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Memory.html#sect-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Memory-Configuration_tools}4.3. 配置工具 {.title}
:::
::: para
内存使用量往往是通过设置一个或多个内核的参数值来进行配置的。这些参数可以通过改变在
/proc
文件系统中的文件内容来进行暂时设置，或是通过设置系统核心参数工具来进行永久设置，此工具由
[procps-ng]{.package} 数据包提供。
:::
::: para
例如，要将 overcommit_memory 参数暂时设置为 1，请运行以下指令：
:::
``` screen
# echo 1 > /proc/sys/vm/overcommit_memory
```
::: para
要永久设置这个值，请运行以下指令：
:::
``` screen
# sysctl vm.overcommit_memory=1
```
::: para
暂时设置一个参数有利于决定此参数对系统的影响。用户可以在确定了参数值有预期的效果之后再将其设置为永久值。
:::
::: section
::: titlepage
## [⁠]{#chap-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Memory.html#sect-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Configuration_tools-Configuring_huge_pages}4.3.1. 配置大页面 {.title}
:::
::: para
大页面依赖于连续的内存区域，因此最好在启动时，也就是在内存变为片段前就定义好大页面。为此，请添加以下参数至内核启动命令行：
:::
::: variablelist
[⁠]{#chap-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Memory.html#varl-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Configuring_huge_pages-hugepages}[hugepages]{.term}
:   ::: para
    启动时在内核中定义 2MB 定值大页面的数量。默认值为
    0。只有在系统拥有足够的物理持续性空闲页面时才能进行分配（或是收回）大页面。此参数保留的页面不能用于其他目的。
    :::
    ::: para
    此值可以在启动后通过改变 `/proc/sys/vm/nr_hugepages`{.filename}
    文件值来调节。
    :::
    ::: para
    更多详情请参阅相关内核文档，默认安装于
    `/usr/share/doc/kernel-doc-kernel_version/Documentation/vm/hugetlbpage.txt`{.filename}
    中。
    :::
[⁠]{#chap-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Memory.html#varl-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Configuring_huge_pages-procsysvmnr_overcommit_hugepages}[/proc/sys/vm/nr_overcommit_hugepages]{.term}
:   ::: para
    通过超量使用内存来定义系统所能创建和使用的最大数量的额外大页面。在此文件中写入任何非零的值，表示系统包含此数目的大页面，在不变的页面池耗尽后，这些大页面便来自于内核的常规页面池。由于这些额外的大页面是未使用过的，因此它们会释放并返回至内核的常规页面池中。
    :::
:::
:::
::: section
::: titlepage
## [⁠]{#chap-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Memory.html#sect-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Configuration_tools-Configuring_system_memory_capacity}4.3.2. 配置系统内存容量 {.title}
:::
::: para
本章探讨与内存相关的内核参数，它们可能有助于提高用户系统的内存使用率。基于测试目的，可以通过改变
`/proc`{.filename}
文件系统中相应的文件值来暂时设置这些参数。一旦决定了能提供最佳性能的值，就可以使用
`sysctl`{.command} 指令来进行永久设置。
:::
::: section
::: titlepage
### [⁠]{#chap-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Memory.html#sect-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Configuring_system_memory_capacity-Virtual_Memory_parameters}4.3.2.1. 虚拟内存参数 {.title}
:::
::: para
此章中的参数都在 `/proc/sys/vm`{.filename} 内，除非另有标明。
:::
::: variablelist
[⁠]{#chap-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Memory.html#varl-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Virtual_Memory_parameters-dirty_ratio}[dirty_ratio]{.term}
:   ::: para
    一个百分比值。当整个系统内存的这一百分比值被修改时，系统会通过运行
    `pdflush`{.methodname} 将改动写入磁盘。默认值为 `20`{.literal}%。
    :::
[⁠]{#chap-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Memory.html#varl-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Virtual_Memory_parameters-dirty_background_ratio}[dirty_background_ratio]{.term}
:   ::: para
    一个百分比值。当整个系统内存的这一百分比值被修改时，系统会在后台将改动写入磁盘。默认值为
    `10`{.literal} %。
    :::
[⁠]{#chap-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Memory.html#varl-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Virtual_Memory_parameters-overcommit_memory}[overcommit_memory]{.term}
:   ::: para
    定义用来决定接受或拒绝一个大内存请求的注意事项。
    :::
    ::: para
    默认值为
    `0`{.literal}。默认情况下，内核执行探索法内存超量使用，是通过估算可用内存大小和由于太大而失败的请求来进行处理的。但由于内存分配使用的是探索法而不是精确算法，这一设置导致超载内存是可能的。
    :::
    ::: para
    当这一参数设置成 `1`{.literal}
    时，内核不执行内存超量使用处理。这增加了内存超量的可能性，但提高了内存密集型任务的性能。
    :::
    ::: para
    当这一参数设置成 `2`{.literal}
    时，内核拒绝请求，即请求的内存等于或大于总的可用交换空间，以及在
    *`overcommit_ratio`* 中指定的物理 RAM
    的百分比。这减少了超量使用内存的风险，但仅在系统交换空间大于物理内存时推荐此设置。
    :::
[⁠]{#chap-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Memory.html#varl-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Virtual_Memory_parameters-overcommit_ratio}[overcommit_ratio]{.term}
:   ::: para
    当 *`overcommit_memory`* 设置为 `2`{.literal} 时，设定所考虑的物理
    RAM 的百分比。默认值为 `50`{.literal}。
    :::
[⁠]{#chap-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Memory.html#varl-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Virtual_Memory_parameters-max_map_count}[max_map_count]{.term}
:   ::: para
    定义一个进程可以使用的最大内存映射区域数量。默认值（`65530`{.literal}）适用于大部分情况。如果应用程序需要映射超过此数量的文件，可增加此值。
    :::
[⁠]{#chap-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Memory.html#varl-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Virtual_Memory_parameters-min_free_kbytes}[min_free_kbytes]{.term}
:   ::: para
    指定千字节的最小数量，使之在整个系统中都保持空闲。这是用来给每一个低内存区决定一个合适的值，每一个低内存区都按照其大小比例分配了大量保留的空闲页面。
    :::
    ::: {.warning xmlns:d="http://docbook.org/ns/docbook"}
    ::: admonition_header
    **警告**
    :::
    ::: admonition
    ::: para
    极值会损坏用户的系统。将 *`min_free_kbytes`*
    设置为一个极小的值以防止系统回收内存，回收内存会导致系统锁死，以及
    OOM-killing 进程。但是，将 *`min_free_kbytes`* 设置过高
    （例如，整个系统内存的 5--10%
    ）会使系统立即进入一种内存不足的状态，导致系统花太多时间来回收内存。
    :::
    :::
    :::
[⁠]{#chap-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Memory.html#varl-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Virtual_Memory_parameters-oom_adj}[oom_adj]{.term}
:   ::: para
    在系统内存不足，并且 *`panic_on_oom`* 参数设置成 `0`{.literal}
    的情况下，`oom_killer`{.systemitem}
    功能会结束进程，直至系统可以恢复，从最高的 `oom_score`{.systemitem}
    进程开始。
    :::
    ::: para
    *`oom_adj`* 参数有助于确定一个进程的
    *`oom_score`*。此参数以每一个进程标识符为单位进行设置。值为
    `-17`{.literal} 时会禁用进程的
    `oom_killer`{.systemitem}。其他有效值是从 `-16`{.literal} 到
    `15`{.literal}。
    :::
    ::: {.note xmlns:d="http://docbook.org/ns/docbook"}
    ::: admonition_header
    **注意**
    :::
    ::: admonition
    ::: para
    由一个调整过的进程而产生的进程会继续该进程的
    `oom_score`{.systemitem}。
    :::
    :::
    :::
[⁠]{#chap-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Memory.html#varl-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Virtual_Memory_parameters-swappiness}[swappiness]{.term}
:   ::: para
    一个从 `0`{.literal} 到 `100`{.literal}
    的值可以控制系统交换的程度。高值优先考虑系统效率，并在进程不活跃时主动交换物理内存耗尽的进程。低值优先考虑响应度，并且尽可能久地避免交换物理内存耗尽的进程。默认值为
    `60`{.literal}。
    :::
:::
:::
::: section
::: titlepage
### [⁠]{#chap-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Memory.html#sect-Red_Hat_Enterprise_Linux-Performance_Tuning_Guide-Configuring_system_memory_capacity-File_system_parameters}4.3.2.2. 文件系统参数 {.title}