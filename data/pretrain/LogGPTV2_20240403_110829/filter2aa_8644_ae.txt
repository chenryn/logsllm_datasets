## Captive Portal
When macOS connects to a new network, it checks for Internet connectivity and may launch the Captive Portal assistant utility. An attacker could trigger this utility and direct a Mac to a site with malware without any user interaction. To mitigate this risk, it is best to disable this feature and log in to captive portals using your regular web browser. You can do this by navigating to a non-secure HTTP page and accepting a redirect to the captive portal login interface (after disabling any custom proxy or DNS settings).

To disable the Captive Portal assistant, use the following command:
```console
$ sudo defaults write /Library/Preferences/SystemConfiguration/com.apple.captive.control.plist Active -bool false
```

For more information, see:
- [Apple's secret "wispr" request](https://web.archive.org/web/20171008071031/http://blog.erratasec.com/2010/09/apples-secret-wispr-request.html)
- [How to disable the captive portal window in Mac OS Lion](https://web.archive.org/web/20130407200745/http://www.divertednetworks.net/apple-captiveportal.html)
- [An undocumented change to Captive Network Assistant settings in OS X 10.10 Yosemite](https://web.archive.org/web/20170622064304/https://grpugh.wordpress.com/2014/10/29/an-undocumented-change-to-captive-network-assistant-settings-in-os-x-10-10-yosemite/)

## Certificate Authorities
macOS comes with over 200 root authority certificates pre-installed from for-profit corporations like Apple, Verisign, Thawte, DigiCert, and government agencies from China, Japan, the Netherlands, the U.S., and more. These Certificate Authorities (CAs) are capable of issuing SSL/TLS certificates for any domain, code signing certificates, etc.

For more information, see:
- [Certification Authority Trust Tracker](https://github.com/kirei/catt)
- [Analysis of the HTTPS certificate ecosystem](https://conferences.sigcomm.org/imc/2013/papers/imc257-durumericAemb.pdf) (PDF)
- [You Wonâ€™t Be Needing These Any More: On Removing Unused Certificates From Trust Stores](https://www.ifca.ai/fc14/papers/fc14_submission_100.pdf) (PDF)

To inspect system root certificates, use **Keychain Access** under the **System Roots** tab or use the `security` command line tool with the `/System/Library/Keychains/SystemRootCertificates.keychain` file.

To disable specific certificate authorities, mark them as **Never Trust** in Keychain Access and close the window.

The risk of a man-in-the-middle attack, where a coerced or compromised CA issues a fake/rogue SSL certificate, is low but still possible. For more information, see:
- [Man-in-the-Middle Attack](https://en.wikipedia.org/wiki/Man-in-the-middle_attack)
- [DigiNotar Incident](https://en.wikipedia.org/wiki/DigiNotar#Issuance_of_fraudulent_certificates)

## OpenSSL
**Note**: This section may be out of date. See [GitHub Issue #356](https://github.com/drduh/macOS-Security-and-Privacy-Guide/issues/356).

The version of OpenSSL in Sierra is `0.9.8zh`, which is not current. It does not support TLS 1.1 or newer, elliptic curve ciphers, and other features. For more details, see:
- [Stack Overflow: Difference between OpenSSL 0.9.8z and 1.0.1](https://stackoverflow.com/questions/27502215/difference-between-openssl-09-8z-and-1-0-1)

Since Apple's officially supported TLS library on macOS is [Secure Transport](https://developer.apple.com/documentation/security/secure_transport), OpenSSL is considered deprecated. Apple's version of OpenSSL may also have patches that can cause unexpected behavior. For more information, see:
- [Cryptographic Services Guide](https://developer.apple.com/library/mac/documentation/Security/Conceptual/cryptoservices/GeneralPurposeCrypto/GeneralPurposeCrypto.html)
- [Hynek's Article: Apple's OpenSSL Verification Surprises](https://hynek.me/articles/apple-openssl-verification-surprises/)

If you need to use OpenSSL, download and install a recent version with Homebrew:
```console
$ brew install openssl
```
Note that linking Homebrew's OpenSSL to be used in place of `/usr/bin/openssl` may interfere with built-in software. See [GitHub Issue #39](https://github.com/drduh/macOS-Security-and-Privacy-Guide/issues/39).

Compare the TLS protocol and cipher between the Homebrew version and the system version of OpenSSL:
```console
$ ~/homebrew/bin/openssl version; echo | ~/homebrew/bin/openssl s_client -connect github.com:443 2>&1 | grep -A2 SSL-Session
OpenSSL 1.0.2j  26 Sep 2016
SSL-Session:
    Protocol  : TLSv1.2
    Cipher    : ECDHE-RSA-AES128-GCM-SHA256
$ /usr/bin/openssl version; echo | /usr/bin/openssl s_client -connect github.com:443 2>&1 | grep -A2 SSL-Session
OpenSSL 0.9.8zh 14 Jan 2016
SSL-Session:
    Protocol  : TLSv1
    Cipher    : AES128-SHA
```

For more information, see:
- [Comparison of TLS Implementations](https://en.wikipedia.org/wiki/Comparison_of_TLS_implementations)
- [How's My SSL](https://www.howsmyssl.com/)
- [Qualys SSL Labs Tools](https://www.ssllabs.com/projects/)

## Curl
The version of Curl that comes with macOS uses [Secure Transport](https://developer.apple.com/library/mac/documentation/Security/Reference/secureTransportRef/) for SSL/TLS validation. If you prefer to use OpenSSL, install it with Homebrew and ensure it is the default:
```console
$ brew install curl --with-openssl
$ brew link --force curl
```

Download the `curlrc` configuration file:
```console
$ curl -o ~/.curlrc https://raw.githubusercontent.com/drduh/config/master/curlrc
```

For more information, see the [man page](https://curl.haxx.se/docs/manpage.html).

## Web
### Privoxy
Consider using [Privoxy](https://www.privoxy.org/) as a local proxy to filter web browsing traffic. Note that macOS proxy settings are not universal, and some apps and services may not honor system proxy settings. Ensure the application you wish to proxy is correctly configured and manually verify connections do not leak. Additionally, it may be possible to configure the *pf* firewall to transparently proxy all traffic.

A signed installation package for Privoxy can be downloaded from [silvester.org.uk](https://silvester.org.uk/privoxy/Macintosh%20%28OS%20X%29/) or [Sourceforge](https://sourceforge.net/projects/ijbswa/files/Macintosh%20%28OS%20X%29/). The signed package is more secure than the Homebrew version and receives full support from the Privoxy project.

Alternatively, install and start Privoxy using Homebrew:
```console
$ brew install privoxy
$ brew services start privoxy
```

By default, Privoxy listens on localhost, TCP port 8118. Set the system **HTTP** proxy for your active network interface:
```console
$ sudo networksetup -setwebproxy "Wi-Fi" 127.0.0.1 8118
```

**(Optional)** Set the system **HTTPS** proxy, which still allows for domain name filtering:
```console
$ sudo networksetup -setsecurewebproxy "Wi-Fi" 127.0.0.1 8118
```

Confirm the proxy is set:
```console
$ scutil --proxy
 {
  ExceptionsList :  {
    0 : *.local
    1 : 169.254/16
  }
  FTPPassive : 1
  HTTPEnable : 1
  HTTPPort : 8118
  HTTPProxy : 127.0.0.1
}
```

Visit `http://p.p/` in a browser, or with Curl:
```console
$ ALL_PROXY=127.0.0.1:8118 curl -I http://p.p/
HTTP/1.1 200 OK
Content-Length: 2401
Content-Type: text/html
Cache-Control: no-cache
```

Privoxy already comes with many good rules, but you can also write your own. Download the configuration files:
```console
$ curl -o homebrew/etc/privoxy/config https://raw.githubusercontent.com/drduh/config/master/privoxy/config
$ curl -o homebrew/etc/privoxy/user.action https://raw.githubusercontent.com/drduh/config/master/privoxy/user.action
```

Restart Privoxy and verify traffic is blocked or redirected:
```console
$ sudo brew services restart privoxy
$ ALL_PROXY=127.0.0.1:8118 curl ads.foo.com/ -IL
HTTP/1.1 403 Request blocked by Privoxy
Content-Type: image/gif
Content-Length: 64
Cache-Control: no-cache
$ ALL_PROXY=127.0.0.1:8118 curl imgur.com/ -IL
HTTP/1.1 302 Local Redirect from Privoxy
Location: https://imgur.com/
Content-Length: 0
HTTP/1.1 200 OK
Content-Type: text/html; charset=utf-8
```

You can replace ad images with pictures of kittens, for example, by starting a local web server and [redirecting blocked requests](https://www.privoxy.org/user-manual/actions-file.html#SET-IMAGE-BLOCKER) to localhost.

### Browser
Web browsers pose the largest security and privacy risks because their primary function is to download and execute untrusted code from the internet. Despite this, they have adopted impressive security features, such as the Same Origin Policy (SOP). SOP prevents a malicious script on one page from accessing sensitive data on another page through the Document Object Model (DOM). If SOP is compromised, the entire browser's security is at risk.

To ensure secure browsing, practice good security hygiene. Most web browser exploits require social engineering attacks to achieve native code execution. Be cautious of links and downloads, especially when websites ask you to install software. 99% of the time, that software is malware.

Web extensions increase the attack surface of the browser. They can only access specific browser APIs governed by their manifest, allowing for quick audits. In the interest of security, limit your use of web extensions.

This guide covers [Mozilla Firefox](https://www.mozilla.org/en-US/firefox/new/), [Google Chrome](https://www.google.com/chrome/), [Safari](https://www.apple.com/safari/), and [Tor Browser](https://www.torproject.org/projects/torbrowser.html.en). Each browser has its own security and privacy benefits and drawbacks. Make an informed choice and consider using multiple browsers.

#### Firefox
[Mozilla Firefox](https://www.mozilla.org/en-US/firefox/new/) is an excellent, open-source browser. Currently, Firefox is undergoing a renaissance, replacing major parts of its infrastructure and code base under projects [Quantum](https://wiki.mozilla.org/Quantum) and [Photon](https://wiki.mozilla.org/Firefox/Photon/Updates). Part of the Quantum project involves replacing C++ code with [Rust](https://www.rust-lang.org/en-US/), a systems programming language focused on security and thread safety. Rust adoption is expected to improve Firefox's overall security.

Firefox offers a similar security model to Chrome, including a [bug bounty program](https://www.mozilla.org/en-US/security/bug-bounty/), though not as lucrative as Chrome's. Firefox follows a six-week release cycle similar to Chrome. For more information, see [GitHub Issues #2 and #90](https://github.com/drduh/macOS-Security-and-Privacy-Guide/issues/2,90).

Firefox supports user-supplied configuration files. See [drduh/config/user.js](https://github.com/drduh/config/blob/master/user.js), [pyllyukko/user.js](https://github.com/pyllyukko/user.js), and [ghacksuserjs/ghacks-user.js](https://github.com/ghacksuserjs/ghacks-user.js) for recommended preferences and hardening measures. Also, consider [NoScript](https://noscript.net/), an extension that allows whitelist-based, preemptive script blocking.

Firefox focuses on user privacy, supporting [tracking protection](https://developer.mozilla.org/en-US/Firefox/Privacy/Tracking_Protection) in Private Browsing mode. Tracking protection can be enabled for the default account, although it may break some websites. Another unique privacy feature is [Containers](https://testpilot.firefox.com/experiments/containers), similar to Chrome profiles.

Previous versions of Firefox used a [Web Extension SDK](https://developer.mozilla.org/en-US/Add-ons/Legacy_add_ons) that was quite invasive and offered immense freedom to developers. Unfortunately, this freedom introduced several vulnerabilities. For more information, see [this paper](https://www.exploit-db.com/docs/24541.pdf) (PDF). Currently, Firefox only supports Web Extensions through the [Web Extension API](https://developer.mozilla.org/en-US/Add-ons/WebExtensions), similar to Chrome's.

Submission of Web Extensions in Firefox is free, and most are open source, though some are proprietary.

**Note**: Similar to Chrome and Safari, Firefox allows account sync across multiple devices. While stored login passwords are encrypted, Firefox does not require a password to reveal them in plain text. This is a significant security issue. Be cautious if you sign in to your Firefox account from devices that do not belong to you and leave them unattended. The [issue](https://bugzilla.mozilla.org/show_bug.cgi?id=1393493) has been raised among the Firefox community and hopefully will be resolved in future versions.

See [drduh/config/firefox.user.js](https://github.com/drduh/config/blob/master/firefox.user.js) for additional Firefox configuration options to improve security and privacy.

#### Chrome
[Google Chrome](https://www.google.com/chrome/) is based on the open-source [Chromium project](https://www.chromium.org/Home) with certain [proprietary components](https://fossbytes.com/difference-google-chrome-vs-chromium-browser/):
- Automatic updates with GoogleSoftwareUpdateDaemon.
- Usage tracking and crash reporting, which can be disabled through Chrome's settings.
- Chrome Web Store.
- Adobe Flash Plugin - supports a Pepper API version of Adobe Flash, which is updated automatically with Chrome.
- Media Codec support - adds support for proprietary codecs.
- Chrome [PDF viewer](http://0xdabbad00.com/2013/01/13/most-secure-pdf-viewer-chrome-pdf-viewer/).
- Non-optional tracking. The Chrome installer includes a randomly generated token sent to Google after installation to measure success. The RLZ identifier stores information about the source of the Chrome download and installation week. It does not include personal information and is used to measure the effectiveness of promotional campaigns. **Chrome downloaded from Googleâ€™s website does not have the RLZ identifier**. The source code to decode the strings is made open by Google.

Chrome offers account sync between multiple devices, including stored website credentials. Login passwords are encrypted, and a user's Google account password is required to access them. You can use your Google account to sign in to your Chrome customized settings from other devices while retaining the security of your passwords.

Chrome's Web store for extensions requires a [5 dollar lifetime fee](https://developer.chrome.com/webstore/publish#pay-the-developer-signup-fee) to submit extensions. The low cost allows for the development of many quality open-source Web Extensions that do not aim to monetize through usage.

Chrome has the largest share of global usage and is the preferred target platform for most developers. Major technologies, such as [node.js](https://nodejs.org/en/) and the [Electron](https://electron.atom.io/) framework, are based on Chrome's open-source components. Chrome's vast user base makes it the most attractive target for threat actors and security researchers. Despite constant attacks, Chrome has maintained an impressive security track record over the years.

Chrome offers [separate profiles](https://www.chromium.org/user-experience/multi-profiles), [sandboxing](https://www.chromium.org/developers/design-documents/sandbox), [frequent updates](https://googlechromereleases.blogspot.com/), and carries [impressive credentials](https://www.chromium.org/Home/chromium-security/brag-sheet). Google offers a very lucrative [bounty program](https://www.google.com/about/appsecurity/chrome-rewards/) for reporting vulnerabilities along with its own [Project Zero](https://googleprojectzero.blogspot.com). This means a large number of highly talented and motivated people are constantly auditing Chrome's code base.

Create separate Chrome profiles to reduce XSS risk and compartmentalize cookies/identities. In each profile, either disable JavaScript in Chrome settings and manually whitelist allowed origins, or use [uBlock Origin](https://github.com/gorhill/uBlock) to manage JavaScript and/or disable third-party scripts/frames. Also, install [HTTPSEverywhere](https://www.eff.org/https-everywhere) to upgrade insecure connections.

Change the default search engine from Google to reduce additional tracking. Disable [DNS prefetching](https://www.chromium.org/developers/design-documents/dns-prefetching) (see also [DNS Prefetching and Its Privacy Implications](https://www.usenix.org/legacy/event/leet10/tech/full_papers/Krishnan.pdf) (PDF)). Note that Chrome may attempt to resolve DNS using Google's `8.8.8.8` and `8.8.4.4` public nameservers.

Read [Chromium Security](https://www.chromium.org/Home/chromium-security) and [Chromium Privacy](https://www.chromium.org/Home/chromium-privacy) for more detailed, technical information. Read [Google's privacy policy](https://www.google.com/policies/privacy/) and learn which [Google services](https://www.google.com/services/) collect personal information. Users can opt-out of services and see what type of information Google has stored in [account settings](https://myaccount.google.com/privacy).

#### Safari
[Safari](https://www.apple.com/safari/) is the default web browser for macOS and is optimized for reducing battery use. Safari, like Chrome, has both open-source and proprietary components. Safari is based on the open-source [WebKit](https://en.wikipedia.org/wiki/WebKit) engine, which is used by Apple apps such as Mail, iTunes, iBooks, and the App Store. Chrome's [Blink](https://www.chromium.org/blink) engine is a fork of WebKit and shares many similarities.

Safari supports unique features that benefit user security and privacy. [Content blockers](https://webkit.org/blog/3476/content-blockers-first-look/) enable the creation of content blocking rules without using JavaScript, improving memory use, security, and privacy. Safari 11 introduced an [Intelligent Tracking Prevention](https://webkit.org/blog/7675/intelligent-tracking-prevention/) system, which automatically removes tracking data stored in Safari after a period of non-interaction by the user from the tracker's website.

Similar to Chrome and Firefox, Safari offers an invite-only [bounty program](https://developer.apple.com/bug-reporting/) for bug reporting to a select number of security researchers. The bounty program was announced during Apple's [presentation](https://www.blackhat.com/docs/us-16/materials/us-16-Krstic.pdf) at [BlackHat](https://www.blackhat.com/us-16/briefings.html#behind-the-scenes-of-ios-security) 2016.

Web Extensions in Safari have the option to use native code in the Safari sandbox environment, in addition to Web Extension APIs. Web Extensions in Safari are distributed through the App Store, which provides the added benefit of code being audited by Apple. However, App Store submission comes at a steep cost. The yearly [developer subscription](https://developer.apple.com/support/compare-memberships/) fee is $100 (compared to Chrome's $5 lifetime fee and Firefox's free submission). The high cost is prohibitive for most open-source developers, resulting in fewer extensions for Safari. Be wary of Web Extensions whose source code is not open.

Safari syncs user preferences and saved passwords with [iCloud Keychain](https://support.apple.com/en-gb/HT202303). To view passwords in plain text, a user must input the account password of the current device, adding an extra layer of security.

Safari follows a slower release cycle than Chrome and Firefox (3-4 minor releases, 1 major release, per year). Newer features are slower to be adopted into the stable channel. Security updates in Safari are handled independently of the stable release schedule and are issued automatically through the App Store. The Safari channel that follows a six-week release cycle (similar to Chrome and Firefox) is called [Safari Technology Preview](https://developer.apple.com/safari/technology-preview/) and is the recommended option instead of the stable channel of Safari.

An excellent open-source ad blocker for Safari that fully leverages content blockers is [dgraham/Ka-Block](https://github.com/dgraham/Ka-Block). See also [el1t/uBlock-Safari](https://github.com/el1t/uBlock-Safari/wiki/Disable-hyperlink-auditing-beacon) to disable hyperlink auditing beacons.

#### Other Web Browsers
Many Chromium-derived browsers are not recommended. They are often [closed source](http://yro.slashdot.org/comments.pl?sid=4176879&cid=44774943), [poorly maintained](https://plus.google.com/+JustinSchuh/posts/69qw9wZVH8z), [have bugs](https://code.google.com/p/google-security-research/issues/detail?id=679), and make dubious claims to protect privacy. See [The Private Life of Chromium Browsers](https://web.archive.org/web/20180517132144/http://thesimplecomputer.info/the-private-life-of-chromium-browsers).

Other miscellaneous browsers, such as [Brave](https://github.com/drduh/macOS-Security-and-Privacy-Guide/issues/94), are not evaluated in this guide and are neither recommended nor actively discouraged from use.

#### Web Browsers and Privacy
All web browsers retain certain information about our browsing habits. This information is used to improve the overall performance of the browser, such as resolving typos or URL redirections, storing analytics data of browsing patterns, crash reports, and blacklisting known malicious servers. These options can be turned on and off from each browser's settings panel.

Since web browsers execute untrusted code from the server, it is important to understand what type of information can be accessed. The [Navigator](https://developer.mozilla.org/en-US/docs/Web/API/Navigator) interface gives access to information about the browser's user agent, including the operating system, websites' permissions, and the device's battery level. For more information about security-conscious browsing and what type of information is "leaked" by your browser, see [HowTo: Privacy & Security Conscious Browsing](https://gist.github.com/atcuno/3425484ac5cce5298932), [browserleaks.com](https://www.browserleaks.com/), and [EFF Panopticlick](https://panopticlick.eff.org/).

To hinder third-party trackers, it is recommended to **disable third-party cookies** in web browser settings. A third-party cookie is a cookie associated with a file requested by a different domain than the one the user is currently viewing. Disabling third-party cookies prevents HTTP responses and scripts from other domains from setting cookies. Moreover, cookies are removed from requests to domains that are not the document origin domain, so cookies are only sent to the current site being viewed.

Be aware of [WebRTC](https://en.wikipedia.org/wiki/WebRTC#Concerns), which may reveal your local or public (if connected to a VPN) IP address(es). In Firefox and Chrome/Chromium, this can be disabled with extensions such as [uBlock Origin](https://github.com/gorhill/uBlock/wiki/Prevent-WebRTC-from-leaking-local-IP-address) and [rentamob/WebRTC-Leak-Prevent](https://github.com/rentamob/WebRTC-Leak-Prevent). Disabling WebRTC in Safari is only possible with a [system hack](https://github.com/JayBrown/Disable-and-toggle-WebRTC-in-macOS-Safari).

### Plugins
**Adobe Flash**, **Oracle Java**, **Adobe Reader**, **Microsoft Silverlight** (Netflix now works with [HTML5](https://help.netflix.com/en/node/23742)), and other plugins are [security risks](https://news.ycombinator.com/item?id=9901480) and should not be installed. If necessary, use them in a disposable virtual machine and subscribe to security announcements to ensure you are always patched.

See the following for examples:
- [Hacking Team Flash Zero-Day](https://blog.trendmicro.com/trendlabs-security-intelligence/hacking-team-flash-zero-day-integrated-into-exploit-kits/)
- [Java Trojan BackDoor.Flashback](https://en.wikipedia.org/wiki/Trojan_BackDoor.Flashback)
- [Acrobat Reader: Security Vulnerabilities](https://www.cvedetails.com/vulnerability-list/vendor_id-53/product_id-497/Adobe-Acrobat-Reader.html)
- [Angling for Silverlight Exploits](https://blogs.cisco.com/security/angling-for-silverlight-exploits)

## Tor
Tor is an anonymizing proxy that can be used for browsing the web. Download Tor Browser from the [Tor Project](https://www.torproject.org/download/). Do **not** attempt to configure other browsers or applications to use Tor, as you may make a mistake that compromises anonymity.

Download both the `dmg` and `asc` signature files, then verify the disk image has been signed by Tor developers:
```console
$ cd ~/Downloads
$ file Tor*
TorBrowser-8.0.4-osx64_en-US.dmg:     bzip2 compressed data, block size = 900k
TorBrowser-8.0.4-osx64_en-US.dmg.asc: PGP signature Signature (old)
$ gpg Tor*asc
[...]
gpg: Can't check signature: No public key
```

If the signature cannot be verified, you may need to import the Tor Project's public key.