应用的`vote`部分可以在`http://localhost:5000`找到:
![](img/f8de0f3e-20dd-45db-ae5f-7488b207f103.png)
点击 **CATS** 或 **DOGS** 将进行投票；您应该能够在终端的 Docker Compose 输出中看到这个日志:
![](img/b3a3eb0d-f32c-46be-8b36-0257af71fc63.png)
有一些错误，因为 Redis 表结构只在投票应用注册第一次投票时创建；一旦投票，将创建 Redis 表结构，工作容器将进行投票，并通过写入`db`容器进行处理。一旦投票完毕，`result`容器将实时更新:
![](img/bbd70927-10dc-48ab-ae1a-cada61daea24.png)
在接下来的章节中，当我们考虑启动 Docker Swarm 栈和 Kubenetes 集群时，我们将再次考虑 Docker Compose YAML 文件。现在，让我们回到 Docker Compose，看看我们可以运行的一些命令。
# Docker 合成命令
这一章已经过半，我们唯一运行的 Docker Compose 命令是`docker-compose up`。如果您一直跟随并运行`docker container ls -a`，您将看到类似于以下终端屏幕的内容:
![](img/5d363680-67d7-437f-bd51-5dbf01bffb15.png)
如你所见，我们有很多状态为`EXITED`的容器。这是因为当我们使用 *Ctrl* + *C* 返回我们的 Docker 时，Docker 组合容器被停止。
选择一个 Docker Compose 应用，并切换到包含`docker-compose.yml`文件的文件夹，我们将处理更多的 Docker Compose 命令。我将使用**示例投票**应用。
# 向上和向下
第一个是`docker-compose up`，但是这一次，我们将增加一个标志。在您选择的应用文件夹中，运行以下命令:
```
$ docker-compose up -d
```
这将启动应用备份，这次是在分离模式下:
![](img/0b96c910-8548-4bf7-ac18-d2d5daf3b40f.png)
一旦您的终端的控制权返回，您应该能够使用以下命令检查容器是否正在运行:
```
$ docker-compose ps
```
从下面的终端输出可以看到，所有的容器都处于`Up`状态:
![](img/bb818478-bc68-4381-84be-11090fbd2b00.png)
运行这些命令时，Docker Compose 将只知道您的`docker-compose.yml`文件的服务部分中定义的容器；所有其他容器都将被忽略，因为它们不属于我们的服务栈。
# 配置
运行以下命令将验证我们的`docker-compose.yml`文件:
```
$ docker-compose config
```
如果没有问题，它将打印你的 Docker 撰写 YAML 文件的渲染副本到屏幕；这就是 Docker Compose 将如何解释您的文件。如果您不想看到此输出，只想检查错误，则可以运行以下命令:
```
$ docker-compose config -q
```
这是`--quiet`的简写。如果有任何错误，这些错误是我们到目前为止所处理过的示例不应该有的，它们将显示如下:
```
ERROR: yaml.parser.ParserError: while parsing a block mapping in "./docker-compose.yml", line 1, column 1 expected , but found '' in "./docker-compose.yml", line 27, column 3
```
# 拉动、构建和创建
接下来的两个命令将帮助您准备启动 Docker Compose 应用。以下命令将读取您的 Docker Compose YAML 文件，并提取它找到的任何映像:
```
$ docker-compose pull
```
以下命令将执行它在文件中找到的任何构建指令:
```
$ docker-compose build
```
当您第一次定义以 Docker Compose 为动力的应用并希望在不启动应用的情况下进行测试时，这些命令非常有用。如果最初用于构建映像的任何 Dockerfiles 有更新，也可以使用`docker-compose build`命令触发构建。
`pull`和`build`命令只生成/拉取我们应用所需的映像；他们不自己配置容器。为此，我们需要使用以下命令:
```
$ docker-compose create
```
这将创建但不会启动容器。与`docker container create`命令相同，在您启动它们之前，它们将处于退出状态。`create`命令有几个有用的标志可以传递:
*   `--force-recreate`:这将重新创建容器，即使没有必要，因为配置中没有任何内容发生变化
*   `--no-recreate`:如果容器已经存在，这不会重新创建容器；此标志不能与前面的标志一起使用
*   `--no-build`:这不会构建映像，即使需要构建的映像丢失了
*   `--build`:这将在创建容器之前构建映像
# 开始、停止、重新开始、暂停和取消暂停
以下命令的工作方式与 docker 容器完全相同，唯一的区别是它们会对所有容器产生影响:
```
$ docker-compose start
$ docker-compose stop
$ docker-compose restart
$ docker-compose pause
$ docker-compose unpause
```
可以通过传递名称来定位单个服务；例如，对于`db`服务的`pause`和`unpause`，我们将运行以下内容:
```
$ docker-compose pause db
$ docker-compose unpause db
```
# 顶部、日志和事件
接下来的三个命令都会给我们关于正在运行的容器和 Docker Compose 中发生的事情的反馈。
与 docker 容器对应的命令一样，下面的命令显示了在我们的 Docker Compose 启动的每个容器中运行的进程的信息:
```
$ docker-compose top
```
从下面的终端输出中可以看到，每个容器都被分成自己的部分:
![](img/47672e5f-ef23-41ba-96ac-f09431f5030f.png)
如果您只想查看其中一个服务，那么在运行命令时只需传递它的名称:
```
$ docker-compose top db
```
下一个命令将`logs`从每个运行的容器流式传输到屏幕:
```
$ docker-compose logs
```
像`docker container`命令一样，你可以通过`-f`或`--follow`等标志来保持溪流流动，直到你按下 *Ctrl* + *C* 。此外，您还可以通过在命令末尾附加日志名称来流式传输单个服务的日志:
![](img/ce0c8f42-1208-4a13-b767-c02b3bb462ef.png)
`events`命令再次像 docker 容器版本一样工作；它实时地流式传输事件，例如由我们已经讨论过的其他命令触发的事件。例如，运行以下命令:
```
$ docker-compose events
```
在第二个终端窗口中运行`docker-compose pause`给出以下输出:
![](img/332e23d6-bc34-4a7e-8e48-c1b910707a23.png)
这两个命令的运行方式与它们的 docker 容器相似。运行以下命令:
```
$ docker-compose exec worker ping -c 3 db
```
这将在已经运行的`worker`容器中启动一个新进程，并对`db`容器进行三次 ping 操作，如下所示:
![](img/0647960c-03ed-4c9d-9e24-259c4e0ab85f.png)
如果您需要在应用中一次性运行容器化命令，那么`run`命令非常有用。例如，如果您使用包管理器(如 composer)来更新存储在卷上的项目的依赖项，您可以运行类似以下内容:
```
$ docker-compose run --volume data_volume:/app composer install
```
这将使用`install`命令运行`composer`容器，并将`data_volume`安装到容器内的`/app`上。
# 规模
`scale`命令会将您传递的服务传递给该命令，并将其缩放至您定义的数字；例如，要添加更多的工作容器，我只需要运行以下命令:
```
$ docker-compose scale worker=3
```
然而，这实际上给出了以下警告:
```
WARNING: The scale command is deprecated. Use the up command with the -scale flag instead.
```
我们现在应该使用以下命令:
```
$ docker-compose up -d --scale worker=3
```
当`scale`命令在 Docker Compose 的当前版本中时，它将从软件的未来版本中删除。
您会注意到，我选择了扩展工作容器的数量。这是有充分理由的，因为如果您尝试运行以下命令，您将会看到:
```
$ docker-compose up -d --scale vote=3
```
您会注意到，虽然 Docker Compose 创建了另外两个容器，但它们无法从以下错误开始:
![](img/4a6ae0cb-5db8-4bf8-99cc-2cc1c667be78.png)
这是因为我们不能让三个单独的容器都试图映射到同一个端口。对此有一个解决方法，我们将在后面的章节中详细讨论。
# 杀，rm，下来
我们最后要看的三个 Docker Compose 命令是删除/终止 Docker Compose 应用的命令。第一个命令通过立即停止正在运行的容器进程来停止我们正在运行的容器。这是`kill`命令:
```
$ docker-compose kill
```
运行时要小心，因为它不会等待容器优雅地停止，例如运行`docker-compose stop`时，这意味着使用`docker-compose kill`命令可能会导致数据丢失。
接下来是`rm`命令；这将移除任何状态为`exited`的容器:
```
$ docker-compose rm
```
最后，我们有`down`命令。你可能已经猜到了，这与运行`docker-compose up`的效果相反: