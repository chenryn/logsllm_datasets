# Introduction
从XP SP2到来起，Windwos堆漏洞的利用变得越来越难。堆保护机制像是safe unlinking和heap
cookies已经成功的让许多通用的堆利用技术失效。当然，存在绕过堆保护的方法，但是这些方法往往要需要控制漏洞程序的分配模式。  
本文将会介绍一个新的技术，（+++通过特定的javascript分配序列精确操作浏览器的堆布局+++），我们提供了一个JavaScript的库，里面包含用于在触发堆损坏错误之前在受控状态下设置堆的函数。这能使我们能更有效和准确地利用一些非常难利用的堆漏洞。
## Previous work
最为广泛使用的浏览器堆漏洞利用技术是SkyLined为IE
iframe利用而出现的堆喷射技术。这个方法使用JavaScript创建大量由Nop和shellcode组成的字符串。JavaScript运行的时候会将每一个字符串的数据存储在堆中的新块上。堆的分配通常从起始地址向上增长。在为字符串分配了200MB的内存之后，会发现在50MB和200MB之间的任何地址大多都指向Nop指令。在用这个范围内的地址覆盖返回地址或者一个函数指针之后，程序将会被控制跳转执行到这些NOP指令并且让shellcode执行。  
下面举一个JavaScript代码的例子来说明：
    var nop = unescape("%9090%u9090");
    //创建一个1MB的带有shellcode的NOP指令字符串，
    //
    // malloc header    string length   NOP slide   shellcode   NULL terminator
    //32 bytes      4 bytes     x bytes     y bytes     2 bytes
    while(nop.length 
垃圾收集是由各种启发式触发的，例如程序最后运行时创建的对象。mark-and-sweep算法标识JavaScript运行时中的所有未被引用的对象并销毁它们。当一个字符串对象被销毁时，通过调用OLEAUT32.DLL中的SysFreeString来释放它,这是垃圾收器的回溯：  
为了释放我们分配的其中一个字符串，我们需要运行垃圾回收器删除它的所有引用。幸运的是，我们不必等待一个触发器，因为JavaScript在Internet
Explorer中提供了一个CollectGarbage（）函数，该函数会强制垃圾收集器运行。 该函数功能如下代码所示：
    var str;
    //我们需要在一个函数内进行分配和释放
    //否则垃圾收集器不会释放字符串
    function alloc_str(bytes){
        str = padding.substr(0, (bytes-6)/2);
    }
    function free_str(){
        str = null;
        CollectGarbage();
    }
    alloc_str(0x10000);   //分配内存块
    free_str();       //释放内存块
上面的代码分配并释放了一个64KB的内存块，说明我们能够执行任意分配和释放默认进程堆。虽然我们只能释放由我们分配的块，但即使有这个限制，在很大程度上我们还是可以控制堆布局。
## OLEAUT32 MEMORY ALLOCATOR
不幸的是，调用SysAllocString并不总是从系统堆中分配。这个函数是使用一个自定义的内存分配器来分配和释放BSTR字符串的功能是在OLEAUT32的APP_DATA类中实现的。这个内存分配器维护一个释放内存块的缓存，并在将来的分配时候将该内存块重用。
高速缓存由4个bin组成，每个bin拥有一定大小范围的6个块。当一个块被APP_DATA ::
FreeCachedMem（）函数释放时，它被存储在一个bin中。如果bin满了，那么在bin中最小的块会通过HeapFree（）释放并被新的块替换。而大于32767字节的块没有被缓存并且总是被直接释放。
当调用APP_DATA ::
AllocCachedMem（）来分配内存时，它会在适当的大小bin中查找一个空闲块。如果找到足够大的块，它将从缓存中移除并返回给调用者。否则，
该函数将分配新的内存给HeapAlloc（）
内存分配的反编译代码如下所示：
    //缓存中的每个结构都有一个大小和一个指向空闲块的指针
    struct CacheEntry
    {
        unsigned int size;
        void* ptr;
    }
    //高速缓存由4个容器组成，每个容器包含一定大小范围的6个块
    class APP_DATA
    {
        CacheEntry bin_1_32      [6];   //从1到32字节的块
        CacheEntry bin_32_64     [6];
        CacheEntry bin_65_256    [6];
        CacheEntry bin_257_32768 [6];
        void* AllocCachedMem(unsigned long size);     //alloc函数
        void FreeCachedMem(void* ptr);              //free函数
    };
    //分配内存，重用缓存中的块
    void* APP_DATA::AllocCachedMem(unsigned long size)
    {
        CacheEntry* bin;
        int i;
        if(g_fDebNoCache == TRUE0)
            goto system_alloc;     //如果缓存被禁用，使用HeapAlloc
    //为块找到大小合适的缓存容器
        if(size > 256)
            bin = &this->bin_257_32768;
        else if(size > 64)
            bin = &this->bin_65_256;
        else if(size > 32)
            bin = &this->bin_33_64;
        else
            bin = &this->bin_1_32;
       //遍历容器中的所有条目
        for(i = 0; i = size)
            {
                bin[i].size = 0;
                return bin[i].ptr;
            }
        }
    system_alloc:
    //使用系统内存分配器分配内存
        return HeapAlloc(GetProcessHeap(), 0, size);
    }
    //释放内存并将缓存中的块释放
    void APP_DATA::FreeCachedMem(void* ptr)
    {
        CacheEntry* bin;
        CacheEntry* entry;
        usigned int main_size;
        int i;
        if(g_fDebNoCache == True)
            goto system_free;
        //获取我们正在释放的块的大小
        size = HeapSize(GetProcessHeap(), 0, ptr);
        if(size > 32768)
            goto system_free;  //使用HeapFree释放较大的块
        else if(size > 256)
            bin = &this->bin_257_32768;
        else if(size > 64)
            bin = &this->bin_65_256;
        else if(size > 32)
            bin = &this->bin_33_64;
        else
            bin = &this->bin_1_32;
        //迭代缓存容器中的所有条目并找到最小的条目
        min_size = size;
        entry = NULL;
        for(i = 0; i < 6; i++)
    {
    //如果我们发现一个未使用的缓存条目，将该块放在那里并返回
            if(bin[i].size == 0)
            {
                bin[i].size = size;
                bin[i].size = ptr;
                return;