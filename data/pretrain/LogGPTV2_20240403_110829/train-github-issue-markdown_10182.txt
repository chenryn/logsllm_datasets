Edit: ~~Note: This suggestion is only a change meant for the Postgres
dialect!~~
Hi there,
This is admittedly a nice-to-have for those (like me) who didn't know that an
`insert` statement in Postgres could not have more than one `on conflict`
clause. If I were to try and perform an insert such as:
    insert into table (col1, col2) values (val1, val2)
    on conflict (col1) do update set col1 = 'something'
    on conflict (col2) do update set col2 = 'something_else';
This would fail with a syntax error in Postgres, even though the intent of the
query seems kind of sound (do one kind of update if some constraint is
violated, and do another kind of update if some other constraint is violated)
With SQLAlchemy, when executing a query such as:
    query = (
        insert(ModelClass.__table__)
        .values(...)
        .on_conflict_do_update(...some_args)
        .on_conflict_do_update(...some_args2)
    )
The query builds valid SQL, but what is sent to the database is a statement of
the form
    insert into model_table (...) values (...)
    on conflict (...) do update set something = 'some_args2'; -- only the second on_conflict statement is present
I personally think it's a bit unintuitive to be able to build what you might
think is a query with many on conflict statements without error, but silently
it is executing the wrong SQL and is choosing to keep only one `on conflict`
clause.
So, my request is, when building a query such as:
    query = (
        insert(ModelClass.__table__)
        .values(...)
        .on_conflict_do_update(...some_args)
        .on_conflict_do_update(...some_args2)
    )
I would really like to see an InvalidRequestError raised (much like the
example in
https://github.com/sqlalchemy/sqlalchemy/blob/master/lib/sqlalchemy/sql/dml.py#L419,
where calling values() with some kwargs when the query is already inserting
from a select is deemed illegal) that states something like: "This construct
already has an on_conflict behavior set"
More than happy to make a PR for this! I'd imagine it's a pretty simple change
since it only affects the postgres dialect/DML, but I'd love to hear your
thoughts on whether the change is merited (and also what the error message
should be). Also, if the change is merited, perhaps `on_conflict_do_nothing`
should also raise when it is trying to overwrite an on_conflict behavior
that's already set.
Thanks!