Our OMOS architecture abstracts the mashlet commu-
nication and provides mashup developers with a powerful
and ﬂexible API. We borrow the concepts in networking
to design a communication stack in OMOS. The admin-
istrative communications between mashlet and the parent
mashlet (i.e., integrator) are done using a socket connec-
tion. Most of the OMOS service calls through JavaScript
APIs lead to a communication through this socket connec-
tion. As a result, we are able to support modularity and
transparency. Complex implementation details are hidden
from the outside. For example, the request to get the DOM
address of a speciﬁc domain name (or principal) is invisi-
ble to mashup developers. Figure 3 depicts the communi-
cation layers in OMOS architecture, namely from bottom
to top, Datalink layer, Mashup Datagram Protocol (MDP)
layer, and Mashup Hypertext Transfer Protocol (MHTTP)
layer.
At the Datalink layer, communications are realized in a
direct frame-to-frame fashion, which needs to be compliant
with restrictions imposed by browsers. For example, the
size of data to be transferred is limited depending on the
type of the browser and the communication method, and
DOM location of an iframe (e.g., parent.frame[3]) is used
for addressing. We further discuss the Datalink layer ser-
vices and implementation techniques in Section 3.4.
The purpose of Mashup Datagram Protocol (MDP) layer
358358
Figure 3. Communication stack in OMOS. The
arrows and their texts are the communica-
tion methods for the layers. Note that all the
communications between two mashlets take
place within the end user’s browser.
is to abstract the Datalink layer details. MDP provides the
logical client-side communication between two mashlets, in
such a way that from a mashlet’s perspective, it is directly
sending arbitrary sized data to another mashlet. Yet, in re-
ality, the data may be fragmented, defragmented, and re-
ordered which are all handled in the lower Datalink layer.
Mashup applications use the logical communications pro-
vided by the MDP layer to send data to each other, without
worrying about the implementation details of browser types,
restrictions, etc. In MDP layer domain names and port num-
bers are being used for addressing. OMOS exposes ser-
vices provided by this layer using socket APIs that is very
similar to Java socket API for conventional TCP/IP com-
munication. OMOS uses socket connection for adminis-
trative communication between mashlets and their parents.
During the bootstrapping process, when a mashlet is ﬁrst
loaded, it gets the communication parameters from the seg-
ment identiﬁer of its URL provided by the integrator, i.e.,
parent mashlet. Then the mashlet creates a socket connec-
tion to the integrator service on port zero (dedicated for this
purpose). Through this bootstrapping process, the integra-
tor establishes connections to all the mashlets that it con-
tains. The integrator uses these connections to provide the
services that the mashlets need, e.g., ﬁnding the DOM loca-
tion of a speciﬁc mashlet, changing the width and height of
their iframes, or resolving domain names to frame address,
etc.
Mashup HyperText Transfer Protocol (MHTTP) is the
top layer in the communication stack of OMOS. MHTTP
provides stateless request and reply types of communica-
tion and abstracts all the details of socket programming. It
is very common for service consumers that need to send
a request to a service provider and get the corresponding
response. It is easy for service providers to deﬁne the inter-
face for these types of services with MHTTP.
We use JSON-RPC protocol on top of the MHTTP
layer [12]. JSON-RPC is a simple lightweight remote pro-
cedure call protocol that is very efﬁcient in AJAX applica-
tions [2]. This layer makes it easy to use existing JavaScript
services. Instead of directly injecting JavaScript code, ser-
vice consumer includes the service in a sandbox mashlet
and hosts the mashlet in a safe throwaway subdomain. Then
the service consumer uses JSON-RPC to call the service
and retrieves the result without giving the script full access
to resources available in the main domain.
3.3
Implementation Details
In this section, we describe some important implemen-
tation details of OMOS. Our descriptions of our commu-
nication stack are bottom-up, starting from the Datalink
layer. More implementation details can be found at http:
//OpenMashupOS.com [16].
3.4 Datalink Layer
Datalink is the layer that does the actual transfer of data
from one frame to another. OMOS currently uses iframe
proxy or postMessage (if available) for cross-domain com-
munication between frames. Other communication mech-
anisms can be implemented and easily plugged into the
framework.
In Opera and some especial conﬁguration of
other browsers, frame navigation is restricted that prevents
two mashlets in different frame hierarchies from communi-
cating directly. In this case, if the integrator is not trusted
then the communication fails and OMOS will prompt the
user to use a browser with permissive navigation policy;
otherwise, the data link layer or the integrator mediates and
routes the data link packets to the destination.
3.4.1 iframe Proxy and Key Establishment Protocol
For inter-frame communication, if postMessage API is not
available, OMOS fails to iframe proxy techniques to do
inter-frame communication. Browsers enforce a write-only
policy on URL ﬁeld of iframes, which means that a frame
can write to the URL ﬁeld of a frame with a different ori-
gin domain, but not read. The URL ﬁeld of a frame can
only be read by the frame itself or a frame of the same
origin. Therefore, in OMOS, if iframe A originated from
a.com wants to pass some data to iframe B from b.com,
iframe A creates an internal temporary hidden iframe that
points to a proxy page that is hosted on b.com and sets
the fragment identiﬁer to carry data (for example, http:
//b.com/proxy.html#data). As part of its OnLoad
event, the proxy page reads the data from its URL and de-
livers that to iframe B. The iframe proxy gets removed af-
terward. This method has the following beneﬁts over the
approach that is used in [13]; it is event driven and does
not require polling, therefore eliminates the delay between
each poll and improves the performance by eliminating un-
necessary timers. With this solution, we eliminate the click
sound problem that IE has in SMash 3.
Although this event-based communication mecha-
nism through iframe proxy has been documented else-
where [7], [5], it is not known previously how to achieve
mutual authentication in this communication method.
When frame A writes http://b.com/proxy.html#
data as the URL in the iframe proxy, A can make sure that
frame B can get the data only if its domain is b.com (be-
cause of SOP); however when frame B receives data, there
is no direct way to ﬁnd out the origin of the received data.
We develop a key establishment protocol in OMOS that is
used by two frames to initiate a shared secret key. By lever-
aging the write-only property of frame URL, the key estab-
lishment protocol elegantly allows the two frames to verify
each other’s domain name (e.g., that iframe[A]’s domain is
a.com and iframe[B]’s domain is b.com).
OMOS key establishment protocol is as follows. Let say
frame[1] from a.com and frame[2] from b.com want to
exchange a shared secret key. Frame[1] generates the se-
cret key SK1 and passes the key to frame[2] using a proxy
from b.com. Since frame[2] can get the key only if it is
originated from b.com, frame[2] can prove that its origin
is b.com by responding back with SK1. However, b.com
still needs to verify that the origin of frame[1] is a.com. To
do so, it generates a new secret key SK2 and passes it along
with SK1 using a.com’s proxy then frame[2] can prove
that its origin is a.com by responding with SK2. At this
point only a.com and b.com know SK2 so they can use it
as a shared secret for the rest of communication. Note that
key establishment happens during three-way handshake in
MDP layer that is described in the next section. Using this
protocol, OMOS framework can provide mutual authenti-
cation capability in inter-mashlet communication.
Figure 4 illustrates this key establishment protocol. Data
ﬁelds shown on the arrows between the two frames rep-
resent Datalink packets, which encapsulate MDP pack-
ets. SK1 and SK2 are session secrets chosen by frame[1]
and frame[2], respectively for each communication session.
EID is an identiﬁer needed by Datalink layer for addressing
destination object. Each frame also creates a serial number
in each Datalink packet.
3.5 Other Datalink Layer Services
Besides key establishment for mutual authentication,
the Datalink layer also provides services like reordering,
(de)fragmentation, and (un)piggybacking to enable efﬁ-
3A click sound is usually made in IE when a frame is redirected, which
can be distracting if it occurs too frequently as the frames URL gets re-
peatedly updated for the data transfer purpose.
359359
one iframe proxy, instead of sending them in multiple
iframe proxies. To do so, OMOS automatically detects
this case and keeps the small data objects in a queue
and piggyback them on an single iframe proxy. This
service dramatically improves the event rate.
3.6 MDP Layer
In OMOS, MDP (Mashup Datagram Protocol) is similar
to transport layer protocols in TCP/IP (or UDP/TCP). How-
ever, note that all of the frame-to-frame communications
occurred in OMOS take place in the end user’s browser
on the user’s local machine, as OMOS supports client-
side mashups. The inter-frame messages are represented
by the thick arrows in Figure 1. An MDP communication
has three phases: 1) Connection establishment (three-way
handshake) 2) Communication (transferring actual data) 3)
Disconnection (upon requests of one of the peers, closing
the connection and releasing the resources). Figure 5 illus-
trates these three phases. Note that all mashlet-to-mashlet
communications are asynchronous. Applications can com-
municate at the MDP layer using OMOS socket APIs. The
APIs are asynchronous meaning that actions are executed
in non-blocking scheme, allowing the main program ﬂow
to continue processing. Programs pass callback functions
to handle events. Figure 5 shows a usual MDP communica-
tion scenario;
The following code illustrates how one can use OMOS
socket APIs. For the mashlet at the service provider side:
var serverSocket = OpenMashupOS.ServerSocket(1111);
var ssCallback =
{
onConnectionRequested: function(socket)
{ // define sCallback to handle events
// including onDataReceived,
// onTimeout,onError events
// set callback object for server-side
// socket endpoint
socket.setCallback(sCallback);
var currentTime = new Date();
//send data to client that is connected
//to this socket
socket.send(currentTime.getTime());
},
onError: function(exp) {/*handle exception */}
}
serverSocket.accept(ssCallback);
For the mashlet at the service consumer side:
var sCallback =
{
onConnected:
function()
{alert("Connected to server");},
onDisconnected: function()
onDataReceived: function(data)
{alert("Disconnected.");},
{
alert("Server’s time is "+data);
socket.disconnect();
},
function()
{ /*handle timeout
*/ },
onTimeout:
360360
Figure 4. Key establishment protocol be-
tween two mashlets, frame[1] from a.com and
frame[2] from b.com, through Datalink layer.
cient transfer of arbitrarily big data objects or frequent
events/small objects. We explain them as follows.
• Fragmentation: Each browser deﬁnes Maximum
Transfer Unit (MTU) size that speciﬁes the maximum
amount of data a frame can carry in its URL ﬁeld.
When the size of a MDP packet is larger than MTU,
the packet should be fragmented to smaller chucks
and then sent to the other end, which is called frag-
mentation. On the other side, the receiver’s DataLink
layer assembles these fragments and sends the result-
ing MDP packet up to MDP layer, which is called de-
fragmentation. This service enables transfer of arbi-
trarily large data objects without interrupting respon-
siveness of user interface.
• Reordering: We observe that in some cases, de-
pending on how event handling is implemented in the
browser, packets sent using iframe proxy arrive out of
order. Reordering ensures that MDP packets are deliv-
ered to MDP layer in the order that they are sent by the
sender.
• Piggybacking: Piggybacking essentially refers to a
lazy-send approach for transferring small data objects.
OMOS needs to create a new iframe proxy for every
data transfer between two iframes. When the sender
has frequent small sized data objects, it is more efﬁ-
cient to collect them and send them together using only
Figure 6. Illustration of the ﬂexibility of asyn-
cRequest method in OMOS that can be used
to realize three types of requests from b.com:
same-domain mashlet-to-server communica-
tion (solid thin line), cross-domain mashlet-
to-server communication (dash line to server
at c.com), and mashlet-to-mashlet communi-
cation (solid thick line to mashlet at a.com).
a MHTTP call:
var callback =
{
onDataReceived: function(response)
onTimeout:
function()
{ /*consume response */ },
onError:
{ /*handle timeout
function(exception)
*/ },
timeout:
1000
{ /*handle exception */ },
}
OpenMashupOS.asyncRequest(’POST’,
"mhttp:5555//socialnetwork.com/service",
callback,
JsonRpcRequest
);
4 Security Analysis
We analysis the security of OMOS from three aspects:
data conﬁdentiality, message integrity, and mutual authenti-
cation. We describe how frame phishing can be easily pre-
vented in our framework.
Data Conﬁdentiality OMOS satisﬁes the data conﬁ-
dentiality in inter-mashlet messaging by leveraging the
browser’s same origin policy and the write-only restriction
on the URL ﬁeld of iframe. The sender passes data through