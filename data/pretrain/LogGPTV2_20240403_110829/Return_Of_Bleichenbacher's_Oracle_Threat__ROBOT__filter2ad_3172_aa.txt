title:Return Of Bleichenbacher's Oracle Threat (ROBOT)
author:Hanno B&quot;ock and
Juraj Somorovsky and
Craig Young
Return Of Bleichenbacher’s Oracle Threat (ROBOT)
Hanno Böck, unaffiliated; Juraj Somorovsky, Ruhr University Bochum, Hackmanit GmbH; 
Craig Young, Tripwire VERT
https://www.usenix.org/conference/usenixsecurity18/presentation/bock
This paper is included in the Proceedings of the 
27th USENIX Security Symposium.
August 15–17, 2018 • Baltimore, MD, USA
ISBN 978-1-939133-04-5
Open access to the Proceedings of the 27th USENIX Security Symposium is sponsored by USENIX.Return Of Bleichenbacher’s Oracle Threat (ROBOT)
Hanno B¨ock
Juraj Somorovsky
Ruhr University Bochum, Hackmanit GmbH
Craig Young
Tripwire VERT
Abstract
In 1998 Bleichenbacher presented an adaptive chosen-
ciphertext attack on the RSA PKCS #1 v1.5 padding
scheme. The attack exploits the availability of a server
which responds with different messages based on the ci-
phertext validity. This server is used as an oracle and
allows the attacker to decrypt RSA ciphertexts. Given
the importance of this attack, countermeasures were de-
ﬁned in TLS and other cryptographic standards using
RSA PKCS #1 v1.5.
We perform the ﬁrst large-scale evaluation of Ble-
ichenbacher’s RSA vulnerability. We show that this vul-
nerability is still very prevalent in the Internet and af-
fected almost a third of the top 100 domains in the Alexa
Top 1 Million list, including Facebook and Paypal.
We identiﬁed vulnerable products from nine differ-
ent vendors and open source projects, among them F5,
Citrix, Radware, Palo Alto Networks, IBM, and Cisco.
These implementations provide novel side-channels for
constructing Bleichenbacher oracles: TCP resets, TCP
timeouts, or duplicated alert messages.
In order to
prove the importance of this attack, we have demon-
strated practical exploitation by signing a message with
the private key of facebook.com’s HTTPS certiﬁcate.
Finally, we discuss countermeasures against Bleichen-
bacher attacks in TLS and recommend to deprecate the
RSA encryption key exchange in TLS and the RSA
PKCS #1 v1.5 standard.
1
Introduction
In 1998 Daniel Bleichenbacher published an adaptive
chosen-ciphertext attack on RSA PKCS #1 v1.5 encryp-
tion as used in SSL [11]. In his attack the attacker uses
a vulnerable server as an oracle and queries it with suc-
cessively modiﬁed ciphertexts. The oracle answers each
query with true or false according to the validity of the
ciphertext. This allows the attacker to decrypt arbitrary
ciphertext without access to the private key by using Ble-
ichenbacher’s algorithm for exploiting the PKCS #1 v1.5
format.
Instead of upgrading to RSA-OAEP [29], TLS design-
ers decided to use RSA PKCS #1 v1.5 in further TLS
versions and apply speciﬁc countermeasures [2, 17, 34].
These countermeasures prescribe that servers must al-
ways respond with generic alert messages. The in-
tention is to prevent the attack by making it impossi-
ble to distinguish valid from invalid ciphertexts.
Im-
proper implementation of Bleichenbacher attack coun-
termeasures can have severe consequences and can en-
danger further protocols or protocol versions. For ex-
ample, Jager, Schwenk, and Somorovsky showed that
the mere existence of a vulnerable implementation can
be used cross-protocol to attack modern protocols like
QUIC and TLS 1.3 that do not support RSA encryp-
tion based key exchanges [23]. Aviram et al. published
DROWN, a protocol-level variant of Bleichenbacher’s
attack on SSLv2 [6].
Due to the high relevance of this attack, the evaluation
of countermeasures applied in TLS libraries is of high
importance. There were several researchers concentrat-
ing on the evaluation of Bleichenbacher attacks in the
context of TLS. However, these evaluations mostly con-
centrated on the evaluation of the attacks in open source
TLS implementations. Meyer et al. showed that some
modern TLS stacks are vulnerable to variations of Ble-
ichenbacher’s attack [28]. For example, the Java TLS
implementation was vulnerable due to handling of en-
coding errors and other implementations were demon-
strated as vulnerable through time based oracles. In 2015
Somorovsky discovered that MatrixSSL was vulnerable
as well [36].
While Bleichenbacher attacks have been found on
multiple occasions and in many variations, we are not
aware of any recent research trying to identify vulner-
able TLS implementations in the wild. Given the fact
that most of the open source implementations are secure
USENIX Association
27th USENIX Security Symposium    817
according to the latest evaluations [28, 36], one would
think that such an evaluation would not reveal many new
vulnerable implementations. But this is not the case.
We developed a systematic scanning tool that allowed
us to identify multiple vulnerable TLS hosts. Many of
the ﬁndings are interesting from the research perspec-
tive since they uncover different server behaviors or show
new side-channels which were speciﬁcally triggered by
changing TLS protocol ﬂows or observing TCP connec-
tion state. These behaviors are of particular importance
for the analyses of different vulnerabilities relying on
server responses, for example, padding oracle [37] or in-
valid curve attacks [24].
Contributions. Our work makes the following contri-
butions:
• We performed the ﬁrst large-scale analysis of Ble-
ichenbacher’s attack and identiﬁed vulnerabilities in
high proﬁle servers from F5, Citrix, Radware, Palo
Alto Networks, IBM, and Cisco, as well as in the
open source implementations Bouncy Castle, Er-
lang, and WolfSSL.
• We present new techniques to construct Bleichen-
bacher oracles which are of particular interest for
developing related attacks. These involve changing
TLS protocol ﬂows or observing TCP connection
states.
• We implemented a proof of concept attack that al-
lowed us to sign a message with the private key of
Facebook’s web page certiﬁcate.
• Finally, we discuss the countermeasures proposed
in TLS 1.2 [34] and whether it is feasible to depre-
cate RSA encryption based key exchanges.
Responsible disclosure and ethical considerations.
In collaboration with affected web site owners we re-
sponsibly disclosed our ﬁndings to vulnerable ven-
dors. We collaborated with them on mitigations and re-
evaluated the patches with our scripts. Several vendors
and web site owners awarded us with bug bounties.
To raise the awareness of these attacks, we also col-
laborated with different TLS evaluation tool developers.
The Bleichenbacher vulnerability check was afterwards
included in SSL Labs and testssl.sh.
As a result of a successful attack, the attacker is able to
obtain the decrypted RSA ciphertext or sign an arbitrary
message with server’s private key. Therefore, by per-
forming our proof of concept attacks we were not able
to reconstruct the RSA private key. We performed our
attacks with dummy data and never attempted to decrypt
real user trafﬁc. Since the complete attack requires tens
Figure 1: TLS-RSA handshake.
of thousands of queries, we performed it only against
servers with a large user base such as Facebook.
2 TLS-RSA key exchange
Bleichenbacher’s attack is applicable to the TLS-RSA
key exchange. This key exchange is used in all ci-
pher suites having names starting with TLS RSA (e.g.
TLS RSA WITH AES 128 CBC SHA). The message ﬂow
of an RSA key exchange as implemented in TLS [34]
is illustrated in Figure 1.
The TLS handshake is initiated by a TLS client with a
ClientHello message. This message contains informa-
tion about the TLS version and a list of supported cipher
suites. If the server shares cipher and protocol support
with the client, it responds with a ServerHello message
indicating the selected cipher suite and other connection
parameters. The server continues by sending its certiﬁ-
cate in the Certificate message and signals the end of
transmission with the ServerHelloDone message. The
client then sends a ClientKeyExchange message con-
taining a premaster secret that was RSA encrypted us-
ing the key included in the server’s certiﬁcate. All fur-
ther connection keys are derived from this premaster se-
cret. The handshake concludes with both parties sending
the ChangeCipherSpec and Finished messages. The
ChangeCipherSpec indicates that the peer will send
further messages protected with the negotiated crypto-
graphic keys and algorithms. The Finished message
authenticates the exchanged protocol messages.
3 Bleichenbacher’s attack
Bleichenbacher’s attack on SSL relies on two ingredi-
ents. The ﬁrst is the malleability of RSA which allows
anybody with an RSA public key to multiply encrypted
plaintexts. The second is the tolerant nature of the RSA
818    27th USENIX Security Symposium
USENIX Association
TLS ClientTLS ClientTLSServerTLSServerClientHello ServerHelloCertificateServerHelloDoneClientKeyExchangeChangeCipherSpec(Client-) FinishedChangeCipherSpec(Server-) FinishedPKCS #1 v1.5 padding format that allows an attacker to
create valid messages with a high probability.
We assume (N,e) to be an RSA public key, where N
has byte-length (cid:96) (|N| = (cid:96)), with corresponding secret
key d = 1/e mod φ (N). || denotes byte concatenation.
3.1 RSA PKCS #1 v1.5
RSA PKCS #1 v1.5 describes how to generate a random-
ized padding string PS for a message k before encrypting
it with RSA [25]:
1. The encryptor generates a random padding string
PS, where |PS| > 8, |PS| = (cid:96)− 3−|k|, and 0x00 (cid:54)∈
{PS1, . . . ,PS|PS|}.
2. It computes the message block as follows: m =
00||02||PS||00||k.
3. Finally, it computes the ciphertext as c = me mod N.
Figure 2: A vulnerable server would respond with differ-
ent alert messages based on the PKCS #1 v1.5 validity.
To mitigate the attack it is important that the server al-
ways responds with the same alert message and does not
provide any information about the PKCS #1 v1.5 valid-
ity.
The decryption process reverts these steps in an obvi-
ous way. The decryptor uses its private key to perform
RSA decryption, checks the PKCS #1 v1.5 padding, and
extracts message k.
r values, the attacker reduces the possible solutions m,
until only one is left or the interval is small enough to ac-
commodate a brute force search. We refer to the original
paper for more details [11].
3.2 Attack intuition
Bleichenbacher’s attack allows an attacker to recover the
encrypted plaintext m from the ciphertext c. For the at-
tack execution, the attacker uses an oracle that decrypts
c and responds with 1 if the plaintext starts with 0x0002
or 0 otherwise:
(cid:40)
1
0
O(c) =
if m = cd mod N starts with 0x0002
otherwise.
Such an oracle can be constructed from a server decrypt-
ing RSA PKCS #1 v1.5 ciphertexts.
Bleichenbacher’s algorithm is based on the malleabil-
ity of the RSA encryption scheme. In general, this prop-
erty allows an attacker to use an integer value s and per-
form plaintext multiplications:
c(cid:48) = (c· se) mod N = (ms)e mod N,
Now assume a PKCS #1 v1.5 conforming message
c = me mod N. The attacker starts with a small value
s. He iteratively increments s, computes c(cid:48), and queries
the oracle. Once the oracle responds with 1, he learns
that
2B ≤ ms− rN < 3B,
for some computed r, where B = 28((cid:96)−2). This allows
him to reduce the set of possible solutions. By iteratively
choosing new s, querying the oracle, and computing new
3.3 Countermeasures
In general the attack is always applicable if the attacker is
able to distinguish valid from invalid RSA PKCS #1 v1.5
ciphertexts. To mitigate the attack, the TLS standard has
deﬁned the following countermeasure. Once the server
receives a ClientKeyExchange message, it proceeds as
follows (see Figure 2). It generates a random premaster
secret and attempts to decrypt the ciphertext located in
the ClientKeyExchange message. If the ciphertext was
valid, it proceeds with the decrypted premaster secret.
Otherwise, it proceeds with the random value. Since the
attacker does not know the premaster secret value, he is
not able to compute a valid Finished message. There-
fore, the client Finished message is always responded
with an alert message and the attacker cannot determine
PKCS #1 v1.5 validity. See Section 9.1 for more details.
3.4 Attack performance and oracle types
In his original publication Bleichenbacher estimated that
it takes about one million queries to decrypt an arbi-
trary ciphertext. Therefore, the attack was also named
“million message attack”. The attack performance varies
however depending on the “strength” of the provided or-
acle. In general, the attack algorithm ﬁnds a new inter-
val with every new valid oracle response. This happens
if the decrypted ciphertext starts with 0x0002. The or-
acle is considered “weaker” if it responds with a nega-
USENIX Association
27th USENIX Security Symposium    819
AttackerAttackerTLSServerTLSServerClientHello ServerHelloCertificateServerHelloDoneClientKeyExchangeChangeCipherSpec(Client-) FinishedAlertpms = rnd /     dec(CKE)tive response for some decrypted ciphertexts which start
with 0x0002.
In this scenario, the new interval is not
found and the attacker needs to issue more queries. This
can happen, for example, if the implementation strictly
checks the PKCS #1 v1.5 format which prescribes that
the ﬁrst 8 bytes following 0x0002 are non-zero, or if
the implementation strictly checks the length of the un-
padded key.
Bardou et al.
improved the original attack and ana-
lyzed the impact of different implementations on the at-
tack performance [7]. For example, the improved Ble-
ichenbacher attack algorithm needs about 10,000 queries
on average when using the “strongest” oracle. On the
other hand, it needs about 18,000,000 queries using the
“weakest” oracle.
For simplicity, in our paper we just assume two oracle
types: weak and strong. The strong oracle allows one
to decrypt arbitrary ciphertext in less than one million
queries on average. Such an oracle can be provided by
an implementation which returns true if the decrypted ci-
phertext starts with 0x0002 and contains a 0x00 at any
position. The weak oracle results in an attack with sev-
eral millions of queries and can be provided by an imple-
mentation which checks whether the 0x00 byte is located
on the correct position. We use the original Bleichen-
bacher algorithm [11].
3.5 Creating a signature with Bleichen-
bacher’s attack
In most of the studies, Bleichenbacher’s attack is referred
to as a decryption attack. A lesser noted point is that the
attack allows one to perform arbitrary RSA private key
operations. Given access to an oracle, the attacker is not
only able to decrypt ciphertexts but also to sign arbitrary
messages with server’s private RSA key.
In order to create a signature with the server’s private
key, the attacker ﬁrst uses a proper hash function and en-
coding to process the message. For example, when creat-
ing a PKCS #1 v1.5 signature for message M, the encoded
result will have the following format [29]:
EM = 0x0001 (cid:107) 0xFF...FF (cid:107) 0x00 (cid:107)
ASN.1(hash(M))
hash() denotes a cryptographic hash function. The out-
put of the hash function has to be encoded using ASN.1.
The attacker then sets EM as an input into the Bleichen-
bacher algorithm. In a sense, he uses the to be signed
message as if it were an eavesdropped ciphertext. The
end result of this operation is a valid signature for M.
It is also important to mention that creating a signa-
ture is typically more time consuming than decrypting a
PKCS #1 v1.5 ciphertext. The reason is that an attacker
with a PKCS #1 v1.5 ciphertext can already assume that
the ﬁrst message is PKCS #1 v1.5 conforming. This al-
lows him to skip the very ﬁrst step from the original al-
gorithm [11]. On the other hand, by decrypting a ran-
dom ciphertext or creating a signature, the attacker can-
not assume the ﬁrst query is PKCS #1 v1.5 conforming.