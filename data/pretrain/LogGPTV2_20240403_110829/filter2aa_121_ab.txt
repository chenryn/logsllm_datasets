10
Security Paper
as you can understand this method is all about calculating the size of several Windows
data structures and traversing inside the memory,
the real challenge here is building a
reliable name comparing mechanism for selecting the right DLL and functions, if PEB
parsing technique seems too hard to implement do not worry, there are easier way to do
this.
6. Hash API
Almost all shellcodes inside metasploit project uses a assembly block called Hash API, it
is a fine piece of code written by Stephen Fewer and it is used by majority of Windows
the shellcodes inside metasploit since 2009, this assembly block makes parsing the PEB
structure much easier, it uses the basic PEB parsing logic and some additional hashing
methods for quickly finding the required functions with calculating the ROR13 hash of
the function and module name, usage of this block is pretty easy, it uses the stdcall
calling convention only difference is after pushing the required function parameters it
needs the ROR13 hash of the function name and DLL name that is containing the
function, after pushing the required parameters and the function hash it parses the PEB
block as explained earlier and finds the module name, after finding the module name it
calculates the ROR13 hash and saves it to stack then it moves to the DLL’s export
address table and calculates the ROR13 hash of each function name, it takes the sum of
the each function name hash and module name hash, if the sum matches the hash that
we are looking for, it means the wanted function is found, finally Hash API makes a jump
to the found function address with the passed parameters on the stack, it is a very
elegant piece of code but it is coming to its final days, because of it’s popularity and
wide usage, some AV products and anti exploit mitigations specifically targets the work
logic of this code block, even some AV products uses the ROR13 hash used by the Hash
API as signatures for identifying the malicious files, because of the recent advancements
on anti exploit solutions inside operating systems, Hash API has a short lifespan left, but
there are other ways to find the Windows API function addresses, also with using some
encoding mechanisms this method can still bypass the majority of AV products.
INVICTUS
11
Security Paper
7. Encoder/Decoder Design
Before starting to design, reader should acknowledge the fact that using this encoder
alone will not generate fully undetectable shellcodes, after executing the shellcode,
decoder will run directly and decode the entire shellcode to its original form, this can’t
bypass the dynamic analysis mechanisms of the AV products.
Decoder logic is pretty simple, it will use a randomly generated multi byte XOR key for
decoding the shellcode, after the decode operation it will execute it, before placing the
shellcode inside the decoder header it should be ciphered with a multi byte XOR key and
both shellcode and XOR key should be placed inside the “”, “” labels,
Since the code is pretty much self explanatory, i will not waste time for explaining it
line by line, with using the JMP/CALL trick it gets the addresses of shellcode and key on
runtime then performs a logical XOR operation between each byte of shellcode and key,
every time the decipher key reaches to end it will reset the key with it’s start address,
after finishing the decode operation it will jump to shellcode, using longer XOR key
increase the randomness of the shellcode but also increases the entrophy of the code
block so avoid using too long decipher keys,
INVICTUS
12
Security Paper
there are hundreds of ways to encode shellcodes with using basic logical operations such
as XOR, NOT, ADD, SUB, ROR, ROL
in every encoder routine there are infinite possible
shellcode output, the possibility of AV products detecting any sign of shellcode before
decoding sequence is very low, because of this AV products also develops heuristic
engines that is capable of detecting decryption and decoding loops inside code blocks,
there are few effective methods for bypassing the static approaches for detecting
decoder loops when writing shellcode encoders,
Uncommon Register Usage:
In x86 architecture all registers have a specific purpose, for example ECX stands for
Extended Counter Register and it is commonly used as a loop counter, when we write a
basic loop condition in any compiled language, the compiler will probably use the ECX
register as the loop counter variable, finding a consecutively increasing ECX register
inside a code block is strongly indicates a loop for the heuristic engines, solution to this
issue is simple, not using the ECX register for loop counter, this is just one example but it
is also very effective for all other stereotyped
code fragments like function
epilogue/prologue etc.. a lot of
code recognition mechanism depends on the register
usage, writing assembly code with unusual register usage will decrease the detection
rate.
Garbage Code Padding:
There may be hundreds of ways to identify decoders inside code blocks and almost every
AV product uses different approaches but eventually they have to generate a signature
for statically checking a code block for possible decoder or decryptor, using random NOP
instructions inside the decoder code is a nice way to bypass static signature analysis, it
doesn’t have to be specifically NOP instruction, it can be any instruction that maintains
the functionality of the original code, the aim is adding garbage instructions in order to
break apart the malicious signatures inside code block, another important thing about
writing shellcodes is the size, so avoid using too much garbage obfuscation code inside
the decoder or it will increase the overall size.
INVICTUS
13
Security Paper
After implementing this methods resulting code looks like this,
Only change is between EAX and ECX registers, now the register responsible for
counting the shellcode index is EAX, and there are few lines of NOP padding between
every XOR and MOV instructions, the shellcode used by this tutorial is Windows
meterpreter reverse TCP, after ciphering the shellcode with a 10 byte long random XOR
key, both placed inside the decoder,
with using the nasm -f bin Decoder.asm command
assemble the decoder to binary format(Don’t forget the remove the line breaks on
shellcode or nasm will not asssemble it).
INVICTUS
14
Security Paper
Here is the AV scan result before encoding the raw shellcode,
INVICTUS
15
Security Paper
As you can see a lot of AV scanners recognizes the shellcode.
And this is the result for encoded shellcode,
INVICTUS
16
Security Paper
8. Anti Exploit Mitigations
When it comes to bypassing AV products there are a lot of ways to success but anti
exploit mitigations takes the situation to a whole new level, Microsoft announced
Enhanced Mitigation Experience Toolkit(EMET) in 2009, it is basically is a utility that
helps prevent vulnerabilities in software from being successfully exploited, it has
several protection mechanisms,
●
Dynamic Data Execution Prevention (DEP)
●
Structure Exception Handler Overwrite protection (SEHOP)
●
NullPage Allocation
●
HeapSpray Protection
●
Export Address Table Address Filtering (EAF)
●
Mandatory ASLR
●
Export Address Table Access Filtering Plus (EAF+)
●
ROP mitigations
■
Load library checks
■
Memory protection check
■
Caller checks
■
Simulate execution flow
■
Stack pivot
●
Attack Surface Reduction (ASR)
Among these mitigations EAF, EAF+ and caller checks concerns us most, as explained
earlier almost all shellcodes inside metasploit framework uses the Stephen Fewer’s Hash
API and because of Hash API applies the PEB/EAT parsing techniques, EMET easily
detects and prevents the executions of shellcodes.
INVICTUS
17
Security Paper
9. Bypassing EMET
The caller checks inside the EMET
inspects the Windows API calls made by processes, it
blocks the RET and JMP instructions inside Win API functions in order to prevent all
exploits that are using return oriented programming(ROP) approaches, in Hash API after
finding the required Win API function addresses JMP instruction is used for executing
the function, unfortunately this will trigger EMET caller checks, in order to bypass the
caller checks, usage of JMP and RET instructions pointing to Win API functions should be
avoided,
with replacing the JMP instruction that is used for executing the Win API
function with CALL , Hash API should pass the caller checks, but when we look at the
EAF/EAF+ mitigation techniques, they prevents access to the Export Address Table (EAT)
for read/write access depending on the code being called and checks if the stack register
is within the permitted boundaries or not also it tries to detect read attempts on the
MZ/PE header of specific chapters and KERNELBASE, this is a very effective mitigation
method for preventing EAT parsing techniques, but EAT is not the only structure that
contains the required function addresses, import address table(IAT) also holds the Win
API function addresses used by the application, if the application is also using the
required functions, it is possible to gather the function addresses inside the IAT
structure,
a cyber security researcher named Joshua Pitts recently developed a new
IAT parsing method, it finds the LoadLibraryA and GetProcAddress Windows API
functions inside the import address table, after obtaining these function addresses any
function from any library can be extracted, he also wrote a tool called fido for striping
Stephen Fewer’s Hash API and replacing with this IAT parsing code he wrote, if you want
to read more about this method check out here,
INVICTUS
18
Security Paper
10.
References:
https://msdn.microsoft.com/en-us/library/ms809762.aspx
https://en.wikipedia.org/wiki/Process_Environment_Block
https://support.microsoft.com/en-us/help/875352/a-detailed-description-of-the-data-ex
ecution-prevention-dep-feature-in-windows-xp-service-pack-2,-windows-xp-tablet-pc-edi
tion-2005,-and-windows-server-2003
https://en.wikipedia.org/wiki/Portable_Executable
https://en.wikipedia.org/wiki/Address_space_layout_randomization
https://en.wikipedia.org/wiki/X86_calling_conventions
http://www.vividmachines.com/shellcode/shellcode.html
https://github.com/secretsquirrel/fido
https://github.com/rapid7/metasploit-framework/blob/master/external/source/shellco
de/windows/x86/src/block/block_api.asm
The Shellcoder's Handbook: Discovering and Exploiting Security Holes
Sockets, Shellcode, Porting, and Coding: Reverse Engineering Exploits and Tool Coding
for Security Professionals