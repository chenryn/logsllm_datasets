### 解压和分析过程

1. **解压与初步检查**:
   - 首先，我们对文件进行解压，并检查其中的 `class.dex` 文件。然而，直接查看 `class.dex` 并未发现有用信息。

2. **资产目录与证书文件**:
   - 在 `assets` 目录中发现了一个名为 `abc` 的文件。
   - 在 `META-INF` 目录中发现了一个名为 `y` 的文件。
   - `CERT.RSA` 文件异常大，引起了我们的注意。

3. **Dex 头部与内容提取**:
   - 通过观察 `abc` 文件，确认它是一个 Dex 文件头部。
   - 在 `CERT.RSA` 文件中发现了字符串 `KEY=Misc@inf0#fjhx11^@DEX=`，并从中提取出后续内容。

4. **解密尝试**:
   - 使用 Python 尝试 AES-128-CBC 解密，但未能成功（尝试了前 16 位和后 16 位作为 IV）。
   - 后来使用 OpenSSL 成功解密：
     ```bash
     openssl aes-128-cbc -d -nosalt -in DEX -out DEX.dec -k Misc@inf0#fjhx11
     ```

5. **修复 Dex 文件**:
   - 将解密后的内容拼接到 `abc` 文件后面，但仍无法正确解析。
   - 发现 Dex 头部中的计数器均为 0，进行了修复，但校验仍失败。
   - 使用 `baksmali` 成功反编译，但在 `MainActivity` 中的 `onCreate` 方法存在问题。

6. **利用 `y` 文件修复**:
   - 回忆起之前未使用的 `y` 文件，推测其用于修复 `onCreate` 方法。
   - 最终在队友的帮助下，使用 IDA 查看 Dex 文件，找到 `onCreate` 区域并替换为正确的代码，成功获取 flag。

### Caesar 变形 (MISC 100)

1. **Exif 信息提取**:
   - 从图片的 Exif 信息中提取出一个包含许多重复字符的字符串。

2. **提取不重复部分**:
   - 提取出不重复的部分，将其视为二进制串。

3. **移位尝试**:
   - 根据提示，尝试 7 位一个字符的编码方式，发现某些情况下字符是可打印的。
   - 将其在 `string.printable` 上移位，得到字符串 `XCZFnCaesar tr3nsformation s0 easy fun1x0b`。

4. **字符移位**:
   - 通过移位操作，将特定字符转换为 `RCTF{Caesar_tr3nsformation_s0_easy_fun1}`，提交后成功。

### Python 代码示例

```python
s = 'DJECQDJEARTJECRTBAARDJECRTBACQDJACRTBECRTJEARTBACQTBAARTBECRDJECQTJAARDJECQTBEAQTBACQTJECQDBECRDJACQTBACQDJACRDBACRTBECQTBACQDBEARTBEARTJACQDJACQTJEARTBACQTJECQDBEAQTJEARDJEARDJACRDBEAQTBACQTJEARTJAARTJECQDJAARDJAAQTJEARTBACQTJEARTJACRDJECQDJAARDJAARDBACRTJACQTBECQDJACQDBACQDJEAR'

from pwn import *

def xor(s1, s2, z):
    rt = ''
    for i in range(len(s1)):
        if s1[i] == s2[i]:
            rt += str(z[i])
        else:
            rt += str(1 - z[i])
    return rt

cmp = 'DJECQ'
a = {}
cnt = 0

def dfs(s, dep):
    global cnt
    if dep == 5:
        ans = ''
        for i in range(len(s) // 5):
            ans += xor(cmp, s[i * 5:(i + 1) * 5], a)
        flag = ''
        for i in range(len(ans) // 7):
            flag += pack(int(ans[i * 7:(i + 1) * 7], 2), 8, endianness='big')
        print(flag)
        cnt += 1
        print(cnt)
        return
    a[dep] = 1
    dfs(s, dep + 1)
    a[dep] = 0
    dfs(s, dep + 1)

print(len(s))
dfs(s, 0)
```

### I can't hear that (MISC 150)

1. **WAV 文件分析**:
   - 提供了一个 WAV 文件，通过 `strings` 命令提取出一个字符串形式的数组。
   - 数组为 0 到 8349 的排列，而 WAV 文件的帧数为 835000。

2. **帧重排**:
   - 根据数组中的值重新排列 WAV 文件的帧，播放后得到 flag。

### login (WEB 300)

请参阅 [GitHub](https://github.com/garzon/CTF-Writeups/tree/master/RCTF2015#login-web-300) 获取详细信息。

### Old Driver (REVERSE 400)

1. **初步观察**:
   - 题目涉及 `OldDriverAPP.exe` 和 `OldDriverWin7.sys` 之间的通信。
   - `OldDriverAPP.exe` 被加了一层 Themida 壳。

2. **驱动分析**:
   - 驱动加载时主要做了以下事情：
     1. 通过修改 SSDT Hook `NtDeviceIoControlFile`。
     2. 没有其他显著行为。

3. **Hook 处理**:
   - 当进程文件名是 `OldDriverAPP.exe` 时：
     1. 第一次调用时，将 `IoControlCode` 的最低位字节修改为 `0x2F`。
     2. 接下来的 512 次调用，根据驱动数据段的一个数组修改 `IoControlCode`。
     3. 数组由 `IoControlCode` 为 `0x22E02F` 时触发的函数初始化。

4. **关键逻辑**:
   - 对于用户名中的前 512 个字符，发送请求给驱动。
   - 根据字符的不同，发送不同的 `control code`。
   - 使用 OllyDbg 和 StrongOD 插件在 Windows XP/7 上带壳调试，找到关键逻辑。