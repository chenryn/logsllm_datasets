可以看到无法访问此内存地址，这是因为它已经超过了OS允许的范围。  
下面我们把程序进行改进：  
```  
#include "stdio.h"  
int main(){  
int* stack_of = malloc(sizeof(int)*100000000);  
int b=1;  
int* a;  
*a=b;  
}  
```  
使用gcc -O3 -g a.c -o a进行编译,运行后会再次Core掉，使用gdb查看栈信息，请见下图：  
![pic](20150916_01_pic_007.jpg)    
可见BUG出在第7行，也就是*a=b这句，这时我们尝试打印b的值，却发现符号表中找不到b的信息。为何？原因在于gcc使用了-O3参数，此参数可以对程序进行优化，一个负面效应是优化过程中会舍弃部分局部变量，导致调试时出现困难。在我们的代码中，b声明时即赋值，随后用于为*a赋值。优化后，此变量不再需要，直接为*a赋值为1即可，如果汇编级代码上讲，此优化可以减少一条MOV语句，节省一个寄存器。  
此时我们的调试信息已经出现了一些扭曲，为此我们重新编译源程序，去掉-O3参数（这就解释了为何一些大型软件都会有debug版本存在，因为debug是未经优化的版本，包含了完整的符号表信息，易于调试），并重新运行，得到新的core并查看，如下图：  
![pic](20150916_01_pic_008.jpg)    
这次就比较明显了，b中的值没有问题，有问题的是a，其指向的地址是非法区域，也就是a没有分配内存导致的Core。当然，本例中的问题其实非常明显，几乎一眼就能看出来，但不妨碍它成为一个例子，用来解释在看Core过程中，需要注意的一些问题。  
其他例子  
3\. 使用gdb调试core文件。    运行命令：$gdb ./a.out ./core.7369，可看到如下打印：  
```  
[michael@localhost core_dump]$ gdb ./a.out ./core.7369   
GNU gdb (GDB) Fedora (7.2-52.fc14)  
Copyright (C) 2010 Free Software Foundation, Inc.  
License GPLv3+: GNU GPL version 3 or later   
This is free software: you are free to change and redistribute it.  
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"  
and "show warranty" for details.  
This GDB was configured as "i686-redhat-linux-gnu".  
For bug reporting instructions, please see:  
...  
Reading symbols from /home/michael/core_dump/a.out...done.  
[New Thread 7369]  
Missing separate debuginfo for   
Try: yum --disablerepo='*' --enablerepo='*-debuginfo' install /usr/lib/debug/.build-id/c4/1c574f31a203492b9389c783adad6ff1989915  
Reading symbols from /lib/libc.so.6...(no debugging symbols found)...done.  
Loaded symbols for /lib/libc.so.6  
Reading symbols from /lib/ld-linux.so.2...(no debugging symbols found)...done.  
Loaded symbols for /lib/ld-linux.so.2  
Core was generated by `./a.out'.  
Program terminated with signal 11, Segmentation fault.  
#0  0x080483b8 in do_it () at ./test.c:10  
10        *p = 'a'; //真正产生段错误的在这里，试图更改地址1的值，此时内核会终止该进程，并且把core文件dump出来  
Missing separate debuginfos, use: debuginfo-install glibc-2.13-2.i686  
(gdb)   
    运行命令：where，即可看到出现段错误的行数了，如下打印：  
(gdb) where  
#0  0x080483b8 in do_it () at ./test.c:10  
#1  0x0804839f in main () at ./test.c:4  
(gdb)   
    在第10行，很容易吧。  
```  
## 参考  
http://my.oschina.net/michaelyuanyuan/blog/68618  
http://blog.csdn.net/_xiao/article/details/22389997  
http://blog.csdn.net/_xiao/article/details/23177577  
http://www.cnblogs.com/kernel-style/archive/2012/12/26/2833485.html  
http://www.bo56.com/%E6%80%8E%E6%A0%B7%E7%94%A8core%E6%96%87%E4%BB%B6%E8%B0%83%E8%AF%95%E4%BD%A0%E7%9A%84linux%E7%A8%8B%E5%BA%8F/  
http://baidutech.blog.51cto.com/4114344/904419  
man 5 core  
man 7 signal  
ulimit -a  
readelf  
gdb  
objdump   
/usr/share/doc/kernel-doc-2.6.32/Documentation/sysctl/kernel.txt  
```  
==============================================================  
core_pattern:  
core_pattern is used to specify a core dumpfile pattern name.  
. max length 128 characters; default value is "core"  
. core_pattern is used as a pattern template for the output filename;  
  certain string patterns (beginning with '%') are substituted with  
  their actual values.  
. backward compatibility with core_uses_pid:  
        If core_pattern does not include "%p" (default does not)  
        and core_uses_pid is set, then .PID will be appended to  
        the filename.  
. corename format specifiers:  
        %  '%' is dropped  
        %%      output one '%'  
        %p      pid  
        %u      uid  
        %g      gid  
        %s      signal number  
        %t      UNIX time of dump  
        %h      hostname  
        %e      executable filename (may be shortened)  
        %E      executable path  
        % both are dropped  
. If the first character of the pattern is a '|', the kernel will treat  
  the rest of the pattern as a command to run.  The core dump will be  
  written to the standard input of that program instead of to a file.  
==============================================================  
core_pipe_limit:  
This sysctl is only applicable when core_pattern is configured to pipe core  
files to user space helper a (when the first character of core_pattern is a '|',  
see above).  When collecting cores via a pipe to an application, it is  
occasionally usefull for the collecting application to gather data about the  
crashing process from its /proc/pid directory.  In order to do this safely, the  
kernel must wait for the collecting process to exit, so as not to remove the  
crashing processes proc files prematurely.  This in turn creates the possibility  
that a misbehaving userspace collecting process can block the reaping of a  
crashed process simply by never exiting.  This sysctl defends against that.  It  
defines how many concurrent crashing processes may be piped to user space  
applications in parallel.  If this value is exceeded, then those crashing  
processes above that value are noted via the kernel log and their cores are  
skipped.  0 is a special value, indicating that unlimited processes may be  
captured in parallel, but that no waiting will take place (i.e. the collecting  
process is not guaranteed access to /proc//).  This value defaults  
to 0.  
==============================================================  
core_uses_pid:  
The default coredump filename is "core".  By setting  
core_uses_pid to 1, the coredump filename becomes core.PID.  
If core_pattern does not include "%p" (default does not)  
and core_uses_pid is set, then .PID will be appended to  
the filename.  
```  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")