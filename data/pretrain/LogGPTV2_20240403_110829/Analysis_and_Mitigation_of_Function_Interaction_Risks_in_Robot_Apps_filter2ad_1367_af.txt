### Node Coordination and Latency in Robotic Applications

A typical robotic application comprises numerous nodes that operate in a parallel, multi-flow configuration. To ensure real-time performance, each data flow generally includes fewer than 10 nodes. Therefore, we consider the overhead of end-to-end latency within 10 coordination nodes. As illustrated in Figure 11, the additional latency introduced by 10 coordination nodes is approximately 5ms. This is negligible even for applications with stringent real-time requirements, such as autonomous driving. According to industry standards published by Mobileye [73] and design specifications from Udacity [14], the acceptable latency for processing critical conditions in an autonomous driving application should be within 100ms, which is significantly higher than the overhead of coordination nodes.

### Case Studies in Real-World Scenarios

To demonstrate the practicality of the identified threats and proposed solutions, we implemented and evaluated several scenarios using a physical device, specifically the Turtlebot3. Figure 12 illustrates our setup and the real-world environment. The Turtlebot3 is an open-source mobile base equipped with a Raspberry Pi (1 GB memory) and a 360-degree Laser Distance Sensor (LDS), running Ubuntu 16.04 and ROS Kinetic. It is connected to a server (Intel i7 with 16GB RAM) for computation offloading and mission launching.

#### 7.1 Attack Method

We developed two tools, `/tb3_safe_control` and `tb3_monitor`, to monitor and control the robot's movement. We embedded malicious code in these tools to send incorrect control commands. The `/tb3_safe_control` tool provides commands for safe teleoperation using different input devices. It uses LaserScan information to estimate the distance between the robot and obstacles, stopping the robot within a customizable safe distance. The `tb3_monitor` package monitors nodes' information and the robot's state in real time. We encapsulated these tools into two ROS packages and successfully uploaded them to the ROS platform as a developer, validating our threat model that adversaries can easily share malicious packages on the ROS platform.

Next, we downloaded these two packages as another developer and implemented them on the Turtlebot device. Below, we describe the malicious behaviors and how our system mitigates them in three cases. To avoid ethical concerns, we added an extra trigger so that the attacks occur only when the MAC address of the robot matches a predefined one, ensuring that the malicious package does not affect normal users.

Figure 13 illustrates the attack and its consequences. The malicious code for the GR attack is added to the `/tb3_safe_control` package, while the RSR and MSR attack codes are hidden in the `tb3_monitor` package. We included specific triggering logic (Lines 2) in each attack to avoid ethical issues. The trigger condition is a successful match between the default MAC address and the local host MAC address. Since the MAC address is unique to each device, the malicious code will only work on our robotic devices. Additionally, we set a time-based trigger to make the attack launch at a specific time rather than immediately, making the attack more covert.

- **GR Attack**: The `gr_attack` function is invoked by a callback function of the LaserScan topic. In each iteration, it searches for the vulnerable node, `move_base`. If found, it sends a Twist-type move command with -0.2 z-axis angular velocity to the `cmd_vel` topic, causing the robot to turn right and potentially crash.
- **RSR and MSR Attacks**: The `rsr_attack` and `msr_attack` functions are invoked during the traversal of all topics of a node. If the `control/max_vel` topic exists, a max velocity control command of 2 m/s is sent. If the `move_base_simple/goal` topic exists, a goal with a malicious location is launched, directing the robot to a dangerous destination.

#### 7.2 Evaluation Results

- **GR Case**: The `/tb3_safe_control` node generates malicious velocity commands during the robot's navigation. In Figure 12a, the robot plans a straight route in the corridor. The `/move_base` node computes real-time velocity and publishes it to the `cmd_vel` topic. Due to shared states, the malicious node compromises the robot by sending continuous "turn right" commands, leading to a crash. In RTron, developers can choose a Preemption policy in the GRCN and set different priorities to each flow, preventing the malicious node from interrupting normal navigation.
- **MSR Case**: The `tb3_monitor` node sends malicious goal commands during navigation. As shown in Figure 12b, it generates a wrong destination in an unstable area far from the wireless access point. The robot loses network connection and malfunctions. In RTron, developers can use the `/odom` topic to check if the robot moves into an unstable area and block suspicious destinations.
- **RSR Case**: The `tb3_monitor` node sends malicious max velocity configuring commands. In Figure 14, the initial max velocity is 0.22m/s, but it is increased to 2m/s, causing the robot to move too fast and collide. In RTron, we choose a Constrain policy in the RSRCN and set the max velocity to 0.22m/s, preventing the attacker from changing it.

### Related Work

**Robotic Security**: Existing research has focused on traditional security issues in robot systems, such as network communication, denial-of-service attacks, and software vulnerabilities. Adversaries can also spoof sensory data, fake actuator signals, or tamper with micro-controller inputs.

In this paper, we focus on a new type of security issue in robot apps caused by malicious interactions. We are the first to demonstrate the feasibility and severity of this threat and propose a possible defense solution.

### Discussion and Future Work

**Graph-Based Analysis Scheme**: We use graphs to analyze interaction risks in robot apps, similar to other appified platforms like smartphones, IoT, and SDN. However, the potential risks in robot apps are more complex and diverse due to their mobility and direct interactions via shared internal states.

**Policy Design**: The security policies in robot apps differ from those in other domains. We adopt distributed coordination nodes for policy enforcement, unlike centralized permission-based systems. Policy responses include coordinating execution order and adjusting data flows, which are necessary for handling GR and RSR attacks.

**Interaction Risk Mitigation**: Prior works have studied interaction risks in IoT apps using the IFTTT trigger-action programming paradigm. Robot apps require more complex rules and new actions to handle malicious flows. Our approach helps developers design correct policies and parameters for GRCN and RSRCN.

By addressing these challenges, we aim to enhance the security and reliability of robot applications.