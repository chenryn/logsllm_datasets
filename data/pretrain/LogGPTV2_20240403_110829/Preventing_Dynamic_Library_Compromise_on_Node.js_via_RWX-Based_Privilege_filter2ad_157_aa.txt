title:Preventing Dynamic Library Compromise on Node.js via RWX-Based Privilege
Reduction
author:Nikos Vasilakis and
Cristian-Alexandru Staicu and
Grigoris Ntousakis and
Konstantinos Kallas and
Ben Karel and
Andr&apos;e DeHon and
Michael Pradel
Preventing Dynamic Library Compromise on Node.js
via RWX-Based Privilege Reduction
Nikos Vasilakis
CSAIL, MIT
PI:EMAIL
Konstantinos Kallas
University of Pennsylvania
PI:EMAIL
Cristian-Alexandru Staicu
CISPA Helmholtz Center for
Information Security
PI:EMAIL
Ben Karel
Aarno Labs
PI:EMAIL
Grigoris Ntousakis
TU Crete
PI:EMAIL
André DeHon
University of Pennsylvania
PI:EMAIL
Michael Pradel
University of Stuttgart
PI:EMAIL
ABSTRACT
Third-party libraries ease the development of large-scale software
systems. However, libraries often execute with significantly more
privilege than needed to complete their task. Such additional privi-
lege is sometimes exploited at runtime via inputs passed to a library,
even when the library itself is not actively malicious. We present
Mir, a system addressing dynamic compromise by introducing
a fine-grained read-write-execute (RWX) permission model at the
boundaries of libraries: every field of every free variable name in
the context of an imported library is governed by a permission set.
To help specify the permissions given to existing code, Mir’s auto-
mated inference generates default permissions by analyzing how
libraries are used by their clients. Applied to over 1,000 JavaScript
libraries for Node.js, Mir shows practical security (61/63 attacks
mitigated), performance (2.1s for static analysis and +1.93% for
dynamic enforcement), and compatibility (99.09%) characteristics—
and enables a novel quantification of privilege reduction.
CCS CONCEPTS
• Software and its engineering → Automated static analysis; Dy-
namic analysis; Scripting languages; • Security and privacy →
Software and application security.
KEYWORDS
Supply-chain attacks, Third-party libraries, Program analysis
ACM Reference Format:
Nikos Vasilakis, Cristian-Alexandru Staicu, Grigoris Ntousakis, Konstanti-
nos Kallas, Ben Karel, André DeHon, and Michael Pradel. 2021. Prevent-
ing Dynamic Library Compromise on Node.js via RWX-Based Privilege
Permission to make digital or hard copies of part or all of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for third-party components of this work must be honored.
For all other uses, contact the owner/author(s).
CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea
© 2021 Copyright held by the owner/author(s).
ACM ISBN 978-1-4503-8454-4/21/11.
https://doi.org/10.1145/3460120.3484535
Reduction. In Proceedings of the 2021 ACM SIGSAC Conference on Com-
puter and Communications Security (CCS ’21), November 15–19, 2021, Vir-
tual Event, Republic of Korea. ACM, New York, NY, USA, 18 pages. https:
//doi.org/10.1145/3460120.3484535
1 INTRODUCTION
Modern software development relies heavily on third-party libraries.
Applications use several dozens or even hundreds of libraries, cre-
ated by many different authors and accessed via public repositories.
The heavy use of libraries is particularly common in JavaScript
applications [38, 51], and especially in those running on the Node.js
platform [83], where developers have millions of libraries at their
fingertips through the node package manager (npm).1
Reliance on libraries introduces the risk of dynamic compromise,
i.e., the runtime exploitation of a benign library via its inputs, affect-
ing the security of the entire application and its broader operating
environment. For example, consider a (de)serialization library that
uses JavaScript’s built-in eval function to parse a string into a run-
time object. While the library itself is benign, accessing no other
external API apart from eval, an attacker may pass a malicious seri-
alized object to the deserialization function, which in turn will pass
it to eval. As a result, the library may be subverted into malicious
behavior, e.g., accessing the file system or the network, that goes
far beyond what a (de)serialization library is supposed to do.
The underlying problem is that each library running on Node.js
has all privileges offered by the JavaScript language and its run-
time environment. In particular, each library is allowed to access
any built-in API, global variables, APIs of other imported libraries,
and even import additional libraries. The left-hand side of Fig. 1
illustrates this current default situation.
This paper reduces the risk of dynamic compromise on Node.js
through a system called Mir, which allows specifying, enforcing,
inferring, and quantifying the privilege available to libraries. The
goal of Mir is to permit a library to access only the functionality
that it really needs, preventing attackers from subverting it into
behavior that goes beyond its intended behavior. Our key insight
to reach this goal is that if a library does not need access to some
1This paper uses the terms library, module, and package interchangeably.
Session 6B: Web Vulnerabilities CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1821analysis addressing runtime meta-programming patterns common
in npm packages.
Quantification of privilege reduction: Our third contribution
is a metric for quantifying the privilege reduction achieved by Mir.
This metric characterizes the remaining privilege that a library
can exercise at runtime and is a direct byproduct of the permis-
sion model’s design. The quantification is achieved by comparing
the permissions granted by Mir to those a library would have by
default—i.e., statically counting all the access paths in the lexical
scope of a library. The metric is designed to operate in harmony
with the permission model and analysis, functioning as a proxy
of the attack surface that remains available to runtime subversion
after applying the chosen permissions.
Implementation & evaluation: Our last contribution is an open-
source implementation and evaluation of Mir. We implement the
majority of the analysis in Java, and the runtime enforcement in
JavaScript. While Mir’s permission model can be encoded in sys-
tems that implement more powerful protection models [5, 20, 29,
73], we chose a lightweight wrapping strategy that matches the
permission model’s first-order nature. We evaluate Mir on over
1000 libraries, and find that Mir (1) defends against 61/63 attacks
on real-world vulnerable packages, (2) reduces a library’s attack
surface by an average of 143.48×, (3) avoids breaking compatibility
for more than 99% of field accesses and in over 99.3% of test cases,
and (4) averages 2.1s per library for its permission inference and
1.93% for its runtime enforcement overhead.
The paper is structured as follows. It starts with an example illustrat-
ing dynamic library compromise and how Mir’s techniques address
it (§2), followed by a discussion of Mir’s threat model (§3). It then
presents Mir’s permission model and its specification language (§4),
Mir’s automated permission inference (§5), Mir’s privilege reduc-
tion quantification (§6), and Mir’s runtime enforcement compo-
nent (§7). It then discusses Mir’s security, compatibility, and perfor-
mance evaluation (§8), and compares to prior work (§9). It finally
concludes (§10) that Mir’s automation and performance characteris-
tics make it an important addition to a developer’s toolbox—similar
to a minifier or a linter—in many circumstances working in tandem
with defenses that focus on other threats.
Appendices A–C contain additional evaluation results. The URL
below contains an accompanying material—including the source
code, benchmarks, and exploits: github.com/andromeda/mir. Mir
is also available as an npm package and can be installed using npm
i @andromeda/mir.
2 BACKGROUND AND OVERVIEW
This section uses a server-side JavaScript application to illustrate
the problem of dynamic application compromise due to third-party
code (§2.1), and to then show how Mir addresses this problem (§2.2).
2.1 Example: A De-serialization Library
Consider the Node.js scenario mentioned earlier (§1) that uses a
third-party (de)serialization library for converting serialized strings
into in-memory objects. The (de)serialization library is fed client-
generated strings, which may lead to remote code execution (RCE)
attacks. RCE problems due to serialization have been identified
Fig. 1: Mir analyzes a library, possibly compromisable by malicious
inputs, to infer a set of permissions. It then enforces this set at run-
time, to lower the library’s privilege over the application and its sur-
rounding environment. It also computes a privilege reduction score
for this set and, if needed, allows the set to be inspected or changed
(leading to a new score).
functionality statically (i.e., as visible in the library’s source code),
then it should not be able to use that functionality dynamically—
even when being subverted.
Specifically, Mir introduces a fine-grained read-write-execute
(RWX) permission model at the boundaries of libraries. To aid in spec-
ifying these permissions, Mir provides a program analysis compo-
nent that infers permissions automatically. The permission model is
first-order—less powerful than membranes [49], higher-order con-
tracts [25], or information-flow monitoring [13]—and the analysis
aims at a level of simplicity comparable to linting and minification,
tools commonly used by Node.js developers today. Combined, the
permission model and associated analysis, aim at reducing the risk
of attacks while maintaining practical performance and automa-
tion characteristics to enable adoption. By coupling default-deny
semantics with explicit and statically-inferrable whitelisting, Mir
minimizes the effects of dynamic compromise, as illustrated on the
right-hand side of Fig. 1. Our key contributions can be summarized
as follows:
Permission model & language: Our first contribution is a per-
mission model and associated domain-specific language to express
read-write-execute permissions (RWX). Permissions guard access paths
in individual libraries. Access paths correspond to free variable
names and their fields in the top-level scope of the library. They
point to functionality imported from other libraries or available
through built-in language features, such as globals, process argu-
ments, require capabilities. The aforementioned (de)serialization
library would only be given an execute permission X over the eval
built-in primitive, allowing the library to execute eval but restrict-
ing its accesses to all other APIs.
Permission inference: Our second contribution is a program
analysis for automatically inferring permissions. This automation
is critical for dealing with (1) continuous codebase evolution, which
requires updating the specification for every code change, (2) nam-
ing issues, such as variable aliasing, and (3) library-internal code,
possibly not intended for humans. The analysis identifies name us-
ages within a library to infer the permissions that a library requires.
We design the analysis to be scalable, conservative, and to make no
assumptions about the existence of tests. The majority of the analy-
sis is static, augmented with a short phase of dynamic, import-time
Compromisable LibraryxPriv: 0.1%+Mir TechniquesMaliciousInputOutputInputMaliciousInputOutputInputAnalysisPermissionsSession 6B: Web Vulnerabilities CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1822and WARN are read, thus are annotated as R; LVL is written, thus W;
and info is executed, thus X. The analysis also infers permissions
for require, eval, module, and exports. Names that do not show
up—even if they are built-in language objects—get no permissions.
After extracting all necessary permissions, the developer can
start the program using Mir’s runtime enforcement component.
Mir shadows all variable names that cross a boundary with vari-
ables that point to modified values. When accessing a modified
value, Mir checks the permissions before forwarding access to the
original value. If a module does not have permission to access a
value, Mir throws a special exception that prevents the access.
The attacks described at the end of the previous section (§2.1) are
now impossible: (1) overwriting info from serial will throw a W
violation, (2) inspecting Object handlers, built-in libraries, such as
crypto, and the cache of loaded modules will all throw R violations,
and (3) accessing global or pseudo-global variables, such as process,
to reach into the environment will also throw R violations. Moreover,
a refinement of the base RWX model (§4) shields against loading
unexpected libraries by allowing require to be executed only with
argument log.
3 THREAT MODEL
Focus: Mir focuses on the dynamic compromise of possibly buggy
or vulnerable libraries, and does not target actively malicious or
obfuscated libraries. Attacks are performed by passing malicious
payloads to libraries through web interfaces, programmatic APIs,
or shared interfaces, such as global variables. Prominent examples
include libraries that offer some form of object de-serialization or
runtime code evaluation, allowing attackers to invoke names from
the language or other libraries by using malicious payloads. These
libraries implement their features using runtime interpretation,
subvertible by attacker-controlled inputs (see §8).
The focus of these attacks is the confidentiality and integrity
of data and code that reside outside the library under attack. Such
confidentiality concerns include reading global state, loading other
libraries, and exfiltrating data; integrity concerns include writing
global variables and tampering with the library cache. These con-
cerns extend to the broader environment within which a program
is executing—including environment variables, the file system, and
the network. Specific accesses include (1) language-level APIs, such
as stack inspection, reflection capabilities, and prototype pollution;
(2) ambient authority to process.env, process.args, global vari-
ables, the module cache, and require ability; (3) interfaces to the
standard library, e.g., to access the file-system or network; and (4)
interfaces to other third-party libraries shipped with the program.
Tab. 7 in Appendix B offers many more real-world examples of
vulnerabilities Mir defends against.
Assumptions: Mir’s static analysis is assumed to be performed
prior to execution, otherwise a malicious library can rewrite the
code of a benign library upon load. For the same reason, Mir’s
runtime enforcement component is assumed to be loaded prior to
any other library. At the time of loading, Mir places trust in the
language runtime and built-in modules, such as fs, which is needed
to locate and load permissions.
Non-threats: Mir does not consider native libraries written in
lower-level languages, such as C/C++, or libraries available in binary
Fig. 2: Use of third-party modules. The main module (left) requires
off-the-shelf serialization implemented by the serial third-party
module (right), vulnerable to remote code execution (Cf.§2).
in widely used libraries [2, 3, 9] as well as high-impact websites,
such as PayPal [70] and LinkedIn [71]. Injection and insecure
de-serialization are respectively ranked number one and eight in
OWASP’s ten most critical web application security risks [56].
Fig. 2 zooms into the two fragments of this Node.js (de)serialization
scenario. The main module (left) requires off-the-shelf serializa-
tion functionality through the serial module, whose dec method
de-serializes strings using eval, a native language primitive. The
serial module requires log and assigns it to the lg variable.2
Although serial is not actively malicious, it is subvertible by
attackers at runtime, who can use the input str for several attacks:
(1) overwrite info, affecting all (already loaded) uses of log.info
across the entire program; (2) inspect or rewrite top-level Object
handlers, built-in libraries, such as crypto, and the cache of loaded
modules; (3) access global or pseudo-global variables, such as pro-
cess to reach into environment variables; and (4) load other mod-
ules, such as fs and net, to exfiltrate files over the network.
2.2 Overview: Applying Mir on Serial
Our work address these security problems by first developing a
permission model at the boundaries between and around libraries.
The model specifies access to functionality that is defined outside
a library with RWX permissions. A part of this functionality comes
from imported libraries; for example, among other permissions,
serial needs to be able to execute info from module log—i.e.,
log.info is X. Another part of this functionality comes directly
from the programming language itself; for example, serial clearly
needs X permissions for require and eval. In all these three cases
of X permissions, it is not serial that provides all this functionality
but rather the language and its runtime environment.
These three permissions are a
part of the total nine required for
serial’s normal operation. To aid
developers in identifying the re-
maining permissions, Mir comes with a static inference component
that analyzes how libraries use the available names. The figure
on the right exemplifies a small fragment of this analysis: levels
2Naming is important in this paper: we differentiate between the module log and
the variable lg. Mir tracks permissions at the level of modules, irrespective of the
variables they are assigned to. To aid the reader, modules, and more broadly, contexts,
are typeset in purple sans serif, fields in olive teletype, and plain variables in
uncolored teletype fonts.
…serial……mainSession 6B: Web Vulnerabilities CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1823s, m ∈ String
r := R | ϵ
ReadPerm
w := W | ϵ
WritePerm
x := X | ϵ
ExecPerm
i := I | ϵ
ImpoPerm
µ := [r w x i]
Mode
f := f .s | *.f | f .* | s
AccessPath
p := f : µ | f : µ, p
ModPermSet
ω := m : {p} | m : {p}, ω FullPermSet
Fig. 3: Mir’s permission language. The DSL captures the full set of
specifications for modeling permissions across libraries (Cf.§4).
form. These libraries are out of scope for two reasons: (i) they cannot
be analyzed by Mir’s static analysis, which operates on source code,
and (ii) they can bypass Mir’s runtime protection, which depends on
memory safety. In the context of JavaScript, these can be addressed
by complementary techniques [33, 76, 77] (see also §9).
Mir blocks accesses to names, such as eval, or access paths,
such as fs.read, if these names are not used in the lexical scope of
a library. If a library already uses that name, however, Mir does not
check or sanitize its input. Such command injection or sanitization
attacks, in which attackers pass malicious input to APIs already used
by the library, are outside of Mir’s threat model and are handled by
complementary techniques [14, 68]. Notably, if a library invokes
such a name, it will show up in the results of Mir’s inference—
allowing developers to audit them. Mir also does not consider
availability, denial-of-service, and side-channel attacks.
4 PERMISSION MODEL AND LANGUAGE
Mir’s goal is to reduce the privilege that libraries possess. At the
core of our approach is a model that can express the set of first-
order permissions that should be granted to each library. The model
is instantiated per-library using a domain-specific language (DSL,
Fig. 3) that focuses on read (R), write (W), execute (X), and import
(I) permissions.
Core Permission Model: The core of Mir’s permission model and
associated DSL is a per-library permission set: ModPermSet maps
names accessible within the library context to a Mode, i.e., a set of
access rights encoded as RWX permissions. Names represent access
paths within the object graph reachable from within the scope of
the library—e.g., String.toUpperCase. Access paths start from a
few different points that can be grouped into two broad classes.
The first class contains a closed set of known root points that are
provided by the language, summarized in the first four rows of
Tab. 1. These names are available by default through (and shared
with) the library’s outer context, i.e., resolving to a scope outside
that of a library and pervasively accessible from any point in the
code. Examples include top-level objects and functions, such as pro-
cess.args and eval, functions to perform I/O, such as console.log,
ability to require other libraries.
The second class contains access paths that start from explicitly
importing a new library into the current scope. Such an import
results in multiple names available through the imported library’s
(equivalent of) export statement. Examples of such paths from
Fig. 2 include log.info and srl.dec (§2.1).
Tab. 1: Access paths start from a variable name that is free in the
top-level scope of the library. They resolve to values that reside out-
side the module, and fall in the following broad classes: (1) core Ec-
maScript names, (2) Node.js-specific names, (3) library-local names,
(4) user-defined global names, (5) the require name.
Class
es
node
lib-local
globs
require
Example Names
Math, Number, String, JSON, Reflect, ...
Buffer, process, console, setImmediate, ...
exports, module.exports, __dirname, ...
GLOBAL, global, Window
require(lib),
Mir’s model can thus be thought as an access-path protection
service: access rights are expressed as permissions associated with
paths starting from a set of variable names that are free at the top-
level scope of the library. Names in this set are bound to values
outside the scope of the library, pointing to functionality that is
not implemented by the library. These values often contain fields,
defining recursive maps from names to values. Names or values
created within the scope of a library are not part of this model: Mir
does not allow specifying or enforcing access restrictions on, say,
arbitrary objects or function return values.
Semantics: The semantics behind the core set of permissions can
be summarized as follows:
• A read permission (R) grants clients the ability to read a value,
including assigning it to variables and passing it around to other
modules.
• A write permission (W) grants clients the ability to modify a
value, and includes the ability to delete it. The modification will
be visible by all modules that have read permissions over the
original value.
• An execute permission (X) grants clients the ability to execute a
value, provided that it points to an executable language construct,
such as a function or a method. It includes the ability to invoke
the value as a constructor (typically prefixed by new).
RWX permissions are loosely based on the Unix permission model,
with a few key differences. Reading a field of a composite value
x.f requires R permissions on the value x and the field f—that
is, an R permission allows only a single de-reference. Reading or
copying a function only requires an R-permission, but perform-
ing introspection requires X permissions over its subfields due to
introspection facilities being provided by auxiliary methods (e.g.,