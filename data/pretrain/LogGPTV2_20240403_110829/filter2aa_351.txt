Defeating static signatures in 
blackbox antivirus engines
Insomni’hack 2022
Vladimir Meier
# whoami
#Security researcher @ SCRT 
#Working on antivirus software since 2015
#Author of https://github.com/scrt/avcleaner
#https://blog.scrt.ch «Antivirus Bypass» category
1 / 52
Contents
#Demo
#13 reasons why antivirus bypass research
#Antivirus detection mechanisms
#Extracting signatures
#Demos: Meterpreter + kiwi vs Windows Defender
#Limitations & future work
2 / 52
Demo
#https://github.com/scrt/avdebugger
#~ 3000 python LoC
#Powered by radare2/rizin, lief and keystone
#Application:
# Meterpreter’s main DLL is detected by Windows Defender
# Antivirus’ verdict is SLFPER:Win32/Meterpreter!ApiRetrieval
# You have 4 hours
3 / 52
13 reasons why antivirus bypass research
#Security software from a pentester’s perspective
#False sense of security
#Really legit use case, I swear!
4 / 52
Security software vs pentesters
AD
Meterpreter
Pwnable servers 
/ workstations
Trigger the AV == game over
5 / 52
13 reasons why antivirus bypass research
#Security software from a pentester’s perspective
#False sense of security
#Really legit use case, I swear!
6 / 52
Why: overpromoted IT security guy 
7 / 52
13 reasons why
#Security software from a pentester’s perspective
#False sense of security
#Really legit use case
# Company X sells a software
# 39 different antivirus flag it as malware, every new release.
# Company X actually worried its own product contains a virus.
8 / 52
13 reasons why
#Really legit use case
# Company X sells a software
# 39 different antivirus flag it as malware, every new release.
# Company X actually worried its own product contains a virus.
#Obviously a false positive, but:
# How do you prove it?
# How do you fix it?
=> Call ghosbusters SCRT
9 / 52
Antivirus detection pipeline
10 / 52
Antivirus detection pipeline: bypass
11 / 52
Extracting signatures: Main steps
#Scan automation
#Mutations / search algorithms
# Prior works
# Improvements
#Binary patching
#Filtering results
#Encrypting strings directly in the binary
12 / 52
Antivirus scan automation
#Why
# CI/CD pipeline
# …or applying mutations until the sample comes out clean => 
need to scan every sample
#How
# VirusTotal?
# Build your own
13 / 52
Taviso’s loadlibrary
14 / 52
Taviso’s loadlibrary
#Windows Defender’s scan engine is mpclient.dll 
#”loadlibrary” is able to run it 
#Perfect for automation
15 / 52
Problem: other antivirus engines
#A bit more complicated…
#Antivirus with / without command line interface
#Some only run on Windows
16 / 52
Scan automation: VMWare’s vmrun
$ vmrun –h
vmrun version 1.17.0 build-17964953
Usage: vmrun [AUTHENTICATION-FLAGS] COMMAND [PARAMETERS]
AUTHENTICATION-FLAGS
--------------------
These must appear before the command and any command parameters.
-T  (ws|fusion)
-vp 
-gu 
-gp 
Example commands:
CMD                    PARAMETERS         DESCRIPTION
--------------
----------
-----------
start                     Path to vmx file     Start a VM
17 / 52
Scan automation: VMWare’s vmrun
$ vmrun –h
Command
Use case
CopyFileFromHostToGuest
Upload the sample to the VM
runProgramInGuest
Invoke a scan and get the result
18 / 52
Scan automation: VMWare’s vmrun
$ vmrun –h
vmrun -T  ws -gu   -gp  runProgramInGuest kasp.vmx 'C:\\Program Files (x86)\\Kaspersky Lab\\Kaspersky Anti-Virus 21.3\\avp.exe' SCAN a.exe
Complete example
vmrun command
Path to .vmx
Command line agent
arguments
Command
Use case
CopyFileFromHostToGuest
Upload the sample to the VM
runProgramInGuest
Invoke a scan and get the result
19 / 52
Scan automation: VMWare’s vmrun
$ vmrun –h
Windows-only AV with no command line agent (Avast, DeepInstinct…)
Command
Use case
CopyFileFromHostToGuest
Upload the sample to the VM
fileExistsInGuest
Some AV scan files when they’re written to 
disk.
runProgramInGuest
Execute the sample. Some AV only scan files 
upon execution.
fileExistsInGuest
Re-check if the file is deleted. If yes, sample 
is a malware.
20 / 52
Extracting signatures: Main steps
#Scan automation
#Mutations / search algorithms
# Prior works
# Improvements
#Binary patching
#Filtering results
#Encrypting strings directly in the binary
21 / 52
The needle and the haystack
$ ls -lh ext_server_kiwi.x64.dll
-rwxr-xr-x  1 vladimir staff   994K Mar 21 15:45 ext_server_kiwi.x64.dll
#Public projects
# Dsplit (2006)
# DefenderCheck.exe (April, 2019)
Which parts are seen as malicious by the AV?
Idea: split a binary into smaller parts to see which one triggers the AV
22 / 52
Problems and solutions
#Problem
# Splitting an executable into chunks
# Corrupted Portable Executable structure
# Granularity (more on that later)
#Solution
# PE format-aware targeted mutations
23 / 52
PE format 101
Your code
Your global variables
Your constants (e.g strings) 
Embedded resources
(icons, files to be dropped, 
etc)
24 / 52
All kinds of mutations
#If you were a lazy engineer implementing an antivirus, 
what would you do?
# Search sequences of bytes
# Search strings
25 / 52
All kinds of mutations
#If you were a lazy engineer implementing an antivirus, 
what would you do?
# Search sequences of bytes
# Search strings
#Where would you do it?
26 / 52
All kinds of mutations
#Where would you do it?
What
Where
Sequence of bytes to find hashes / inlined
constants
.text section
Sequence of bytes to find (big) shellcodes
.data section
Strings
.rdata section
Embeddeds files with known hashes
.rsrc section
27 / 52
All kinds of mutations
#Is it that simple?
28 / 52
Hypothetize and verify
#Demo
29 / 52
gem fetch metasploit-payloads
gem unpack metasploit-payloads
ls -lht metasploit-payloads-2.0.66/data/meterpreter/
-rw-r--r-- 1 vladimir wheel   199K Mar 23 20:19 screenshot.x86.dll
-rw-r--r-- 1 vladimir wheel   199K Mar 23 20:19 screenshot.x64.dll
-rw-r--r-- 1 vladimir wheel   170K Mar 23 20:19 metsrv.x86.dll
-rw-r--r-- 1 vladimir wheel   195K Mar 23 20:19 metsrv.x64.dll
-rw-r--r-- 1 vladimir wheel   364K Mar 23 20:19 ext_server_stdapi.x86.dll
-rw-r--r-- 1 vladimir wheel   400K Mar 23 20:19 ext_server_stdapi.x64.dll
-rw-r--r-- 1 vladimir wheel   106K Mar 23 20:19 ext_server_priv.x86.dll
-rw-r--r-- 1 vladimir wheel   127K Mar 23 20:19 ext_server_priv.x64.dll
-rw-r--r-- 1 vladimir wheel   1.1M Mar 23 20:19 ext_server_kiwi.x86.dll
-rw-r--r-- 1 vladimir wheel   1.4M Mar 23 20:19 ext_server_kiwi.x64.dll
…
Fantastic signatures and where to find them
#Signatures can target sequences of bytes of arbitrary 
lengths
#Sequences of bytes can have “malicious” or “benign” 
scores
#How to find those with the highest score?
30 / 52
Divide and conquer search algorithm 101
31 / 52
Divide and conquer search algorithm 101
Why?
32 / 52
Divide and conquer
1. Split the sample
2. Fill one half with random junk
3. Antivirus scan
Malware detected?
The half with junk contains no signatures, 
the other does however
The half with junk contains the 
signatures.
yes
no
Repeat with the “bad” half
33 / 52
Granularity
#We can do better than splitting and scanning things
#“Know your data”
What
Where
Granularity
Identification
Sequence of bytes to 
find shellcodes
.text section
Functions
Radare2 / rizin 
disassembler
Sequence of bytes to 
find (big) shellcodes
.data section
Global variables
Custom algo
Strings
.rdata section
…Strings
Radare2 / rizin
Embeddeds files 
with known hashes
.rsrc section
Resources
Doesn’t matter
34 / 52
Example with strings
#Mimikatz contains ~5 thousands strings
#5-100 characters per strings -> good granularity
#Divide and conquer
# Divide the 5k strings into 2 clusters
# Replace every string in cluster 1 with random data of equal size
# Cluster 2 is left intact
# Patch the sample with these modifications
# Antivirus scan to find which cluster contains “bad” strings.
# Repeat, until you have 2 clusters with 1 string each.
35 / 52
Example with strings
#Demo
#Proof 
36 / 52
Validation
Reverse-engineering of 
Defender’s signatures 
database by @commial 
and Romain Melchiorre 
(SCRT)
37 / 52
Granularity: global variables
#What if there is a signature in the .data section?
# Hard for the human eye and / or intuition to recognize raw 
binary
#Solution: recover global variables
# Use radare2 / rizin to find cross-references in .data section
# The length of the variable is determined by the next XREF 
location.
# Divide and conquer
# Once you know which variable, use its XREF to understand 
what it is.
38 / 52
Global variables recovery
•
pipe.cmdj: run r2 cmd and 
parse JSON
•
axj: enum xrefs as JSON
39 / 52
Global variables
#Is that really necessary?
#Enter "SLFPER:Win32/Meterpreter!ApiRetrieval”
#Present in the .data section of metsrv.x64.dll 
#Showtime
40 / 52
Filtering results
#When all else fails
# -> chunks
#But chunks may:
# overlap
# envelop
# intersect
41 / 52
Filtering results
#Solution
# Interval trees
42 / 52
img src: https://en.wikipedia.org/wiki/Interval_tree
Bonus: Automated binary patching
43 / 52
Automated binary patching
#Can we encrypt strings in a binary without breaking 
anything?
44 / 52
Fun with LIEF, radare2 and keystone
1. Inject a function that takes a string 
as input and decrypts it
2. Enumerate strings
3. Enumerate xrefs to each string
4. Patch the xref to hijack execution 
flow
5. Redirect into a switch table that
1. Saves original instruction 
pointer into a RSI
2. Set registers (string address, 
string size)
3. Call decryption function
4. Jump to RSI
45 / 52
Hooking with radare2
46 / 52
Hook content
•
Built each time for each string
•
Dynamically assembled with Keystone
•
Merged at the end of the switch table
47 / 52
Inject a decryption function
1. Don’t want to program in assembly, so I write a C function that encrypts 
stuff
2. Build binary with –fpie
3. Copy the function’s code with LIEF into the other binary.
48 / 52
Inject a decryption function
r2.cmdj(“aflj”): enum functions as JSON
LIEF: get_content_from_virtual_address
49 / 52
Inject a decryption function
1. Don’t want to program in assembly, so I write a C function that encrypts 
stuff
2. Build binary with –fpie
3. Copy the function’s code with LIEF into the other binary.
Totally neat and legit :p
Simple code injection:
50 / 52
Limitations & Future work
#Not for script kiddies :p
#.text section: divide and conquer with functions boundaries
#Optimization: only analyze strings present in source code
#Divide and conquer with differential builds
51 / 52
Conclusion
52 / 52
Windows Defender scan engine