interested in the constant term of the resulting (degree-2t) polynomial, and it will
be zero if wℓk = wik · wjk .
15
PROTOCOL 4.2 (Veriﬁcation of Multiplication Correctness)
Inputs: The parties hold shares {[wk]t}M
k=1 of wire values and gate deﬁnitions
(g1, . . . , gN ), where each gk is a triple (i, j, ℓ) representing the multiplication gate
wℓ = wi · wj.
Parameter: Let δ be such that |F|δ ≥ 2s, where s is the statistical security
parameter, and let κ be a computational security parameter for a pseudorandom
function F .
The protocol:
1. Phase 1 – prepare random values:
(a) The parties call Fcoin to obtain a single key K ∈ {0, 1}κ for a pseudoran-
dom function F . Then, the parties compute δ · N pseudorandom values
1, . . . , b1
(b1
to obtain double sharings ([ρ1]t, [ρ1]2t), . . . ,
1, . . . , bδ
(b) The parties call F double
k = FK (k󰀂j).
([ρδ]t, [ρδ]2t) of unknown random values ρ1, . . . , ρδ.
N ), . . . , (bδ
N ) by setting bj
rand
2. Phase 2 – actual veriﬁcation: Denote gk = (ik, jk, ℓk) for every k = 1, . . . , N .
(a) For j = 1, . . . , δ, each party Pi locally computes its 2t-share of
[vj]2t =󰀣 N󰁛k=1
k · (wik · wjk − wℓk )󰀤 + [ρ′j]2t.
bj
(b) For j = 1, . . . , δ, the parties run open([vj]2t), and obtain vj. If a party
receives ⊥ in any opening, then it sends ⊥ to all other parties, outputs ⊥
and halts. Else, it continues.
(c) For j = 1, . . . , δ, each Pi locally computes [v′j]t = [ρ′j]t − vj.
(d) For j = 1, . . . , δ, the parties call FcheckZero with [v′j]t.
accept; else, it outputs reject.
3. Output: If a party receives accept from all calls to FcheckZero then it outputs
cheating, this will reveal the value vj − ρj which in the case of cheating in the
kth gate only, is the diﬀerence between wℓk and wik · wjk . If πmult is secure under
an additive attack, then this value is already known and so it is ﬁne to reveal
it. However, we wish to prove the protocol secure, even for πmult that is weaker
(e.g., only being private, and enable detection of cheating). Thus, we need to
call FcheckZero here. This makes very little diﬀerence in practice anyway, since it
is run once for the entire circuit.
As in Lemma 4.1, we prove here only that the veriﬁcation in Protocol 4.2
works. The fact that it reveals nothing is explained above, and proven formally
when we simulate the full protocol itself.
Lemma 4.2. Let n be the number of parties, let t  2δ2+2. The DoubleShareRandom(t, t′)
procedure of [2,3] generates n − 2t double sharings with each party sending n
elements. This means that we can generate δ double sharings and another δ + 2
regular sharing at the cost of each party sending n ﬁeld elements overall (for the
regular sharings, the parties just throw out the degree-2t shares). We also note
that Fcoin requires a single random sharing, and FcheckZero requires δ calls to
generate double-random sharings. Thus, by assuming n − 2t > 2δ2 + 2, a single
call to DoubleShareRandom suﬃces. In addition, recall that n − t values can be
opened with open at the cost of each party sending n elements. Thus, three calls
to open suﬃce throughout (one call to open suﬃces for the δ2 values opened in
all of the δ calls to FcheckZero because n − t > δ2).
Under the above assumption (that n−2t > 2δ2 +2), the cost of both veriﬁca-
tions is a single call to DoubleShareRandom to generate all the sharings needed at
the cost of 2n + 2n/3 elements per party (to generate n − 2t = n/3 double shar-
ings), a single opening for Fcoin at the cost of n elements per party, δ elements
opened for Step 2b (at the cost of n elements per party) and another δ elements
opened in Step 2b (at the cost of n elements per party) using the ReconsPub
procedure of [2,3], and δ calls to FcheckZero at the cost of another execution of
ReconsPub and n elements per party with δ calls to open for each call). The over-
all communication cost per party is therefore (2n + 2n/3) + 4n = 6 2
3 · n elements.
In the extreme case that the number of parties is small and the ﬁeld is small,
we need to call DoubleShareRandom at most 2δ2 + 2 times and open at most
2δ2 times. Thus, the cost in this case is O(δ2n) elements per party (with a
small constant).
18
5 Damg˚ard-Nielsen (DN) Multiplication Protocol – πmult
5.1 Information-Theoretic DN Multiplication
Our underlying multiplication protocol is the one by Damg˚ard and Nielsen [10],
denoted DN from here on. A full description of the DN multiplication protocol
appears in Protocol 5.1. As in [19], we include an additional check that the
degree-t random sharings generated are of degree-t. This is needed in order to
ensure that the masking by a degree-2t sharing later on suﬃces to hide all secrets.
As shown in [19], this also suﬃces to make the protocol secure up to an additive
attack, as described above.
PROTOCOL 5.1 (The DN Multiplication Protocol – πmult)
Setup phase for multiplications: The parties generate a series of n − t double
random shares {[rk]t, [rk]2t}n−t
k=1 where [rk]t is a sharing of rk using a t-degree poly-
nomial and [rk]2t is a sharing of rk using a 2t-degree polynomial. This generation
works as follows:
1. Each party Pi chooses a random element ui ∈ F and runs share(ui) twice
as the dealer, once using a degree-t polynomial and then using a degree-2t
polynomial.
2. Holding shares ([u1]t, . . . , [un]t) and ([u1]2t, . . . , [un]2t), each party Pi locally
computes
([r1]t, . . . , [rn−t]t) = ([u1]t, . . . , [un]t) · Vn,n−t
([r1]2t, . . . , [rn−t]2t) = ([u1]2t, . . . , [un]2t) · Vn,n−t
where Vn,n−t is the Vandermonde matrix.
The above is run in parallel󰁯 N
n−t󰁰 times, where N is the number of multiplications
in the circuit to be computed. At the end, the parties have N random double
sharings; denote them ([r1]t, [r1]2t), . . . , ([rN ]t, [rN ]2t).
Single veriﬁcation: The parties run Protocol 4.1 on input shares [r1]t, . . . , [rN ]t.
Each party proceeds if and only if it outputs accept from the protocol.
Multiplications: Let [x]t and [y]t be the next shares to be multiplied; denote by
xi and yi the shares of x and y held by Pi.
1. Let [r]t, [r]2t be the next unused double-random shares generated in the setup.
Parties P2, . . . , P2t+1 compute [x]t · [y]t − [r]2t and send the result to party P1
([x]t · [y]t is locally computed by each party Pi computing xi · yi and is a valid
degree-2t sharing of x · y).
2. Party P1 uses the 2t+1 shares it holds (its own plus 2t received) to reconstruct
∆ = x · y − r, and then sends it to all the other parties.
3. Each party sends ∆ to all other parties. (When many multiplications are run
in parallel—as in the full layer of the circuit being computed—the parties send
a single value H(∆1, . . . , ∆m) where H is a collision-resistant hash function.)
4. If a party received the same ∆ (or hash) from all, then it locally computes its
output share [z]t = [x · y]t = [r]t + ∆ = [r]t + (xy − r). Else, it aborts.
19
rand
rand
instead. However, F double
Observe that Protocol 5.1 begins with generating double-random sharings; as
such, we could use F double
generates double-random
sharings that are provably correct; in contrast to the setup phase of Protocol 5.1
which has no such guarantees. This makes the generation of these sharings much
more eﬃcient in Protocol 5.1 (an average of 3 elements per party for each double
sharing in Protocol 5.1, versus an average of 8 elements per party for each double
sharing using F double
rand ).
Security of πmult: It has already been proven in [19] (building on [12,13]) that
the version in Protocol 5.1 of the Damg˚ard-Nielsen multiplication is secure up
to additive attacks (see Section 6.1.1 and πmult). Intuitively, this is due to the
fact that all [ri]t values are veriﬁed to be of degree-t and therefore valid, and
the output is deﬁned by adding some value to [ri]t. As such, the output of each
multiplication is a valid value. Regarding the fact that the adversary can add
some d to x · y, if P1 is corrupted then this is clear. In addition, since there is
no check that the same ri is shared in the degree-t and degree-2t sharing, a gap
between them would also result in some d ∕= 0 being added to x · y. However,
since the simulator knows all actual values (since it holds all the honest parties’
shares in the simulation), it knows exactly what that gap would be. We stress
that in order to have this d be well deﬁned, we must ensure that the same value
∆ is sent by P1 to all other parties. This is the reason for the echo of the ∆
values in Step 3 of Protocol 5.1.6 Formally, πmult securely computes F add
mult, as
formalized in Functionality 5.2.
FUNCTIONALITY 5.2 (F add
Let I denote the subset of corrupted parties.
mult - Secure Mult. Up To Additive Attack)