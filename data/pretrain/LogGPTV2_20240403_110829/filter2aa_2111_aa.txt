# Friday the 13th: JSON Attacks

### Presenters
- **Alvaro Muñoz (@pwntester)**
  - Security Researcher at HPE
  - Int3pids CTF Player
- **Oleksandr Mirosh**
  - Security Researcher at HPE

## Introduction
- 2016 was marked by the "Java Deserialization Apocalypse."
- This vector has been known since 2011.
- Previously, there were limited Remote Code Execution (RCE) gadgets in common libraries.
- The Apache Commons-Collections Gadget caught many off-guard.
- **Solutions:**
  - Stop using Java serialization.
  - Use a secure JSON or XML serializer instead.
  - Raise awareness about .NET deserialization vulnerabilities.
  - Ensure history does not repeat itself.

## Is JSON/XML Better?
- **JSON** is generally secure when used to transmit data and simple JavaScript objects.
- Replacing Java/.NET serialization with JSON requires Object-Oriented Programming (OOP) support.
- Challenges:
  - How do we serialize a `System.lang.Object` field?
  - How do we handle generics?
  - How do we serialize interface fields?
  - How do we manage polymorphism?

## Quick Recap of Java Deserialization Attacks
- Attackers can force the execution of `readObject()` or `readResolve()` methods of any class in the classpath.
- By controlling the deserialized field values, attackers can abuse these methods to run arbitrary code.
- JSON libraries typically do not invoke deserialization callbacks or magic methods.

## Can We Initiate a Gadget Chain in JSON?
- **Yes, we can.**
- JSON libraries reconstruct objects by:
  - Calling default constructors and using reflection to set field values.
    - Default constructors are parameterless and generally useless for attacks.
    - Reflection does not invoke object methods, but the deserializer might.
  - Calling default constructors and calling setters to set field values.
    - Setters that allow running arbitrary code can be exploited.
  - Calling "special" constructors, type converters, or callbacks.
    - These can bridge into other formatters or start gadget chains.
  - Calling common methods like `hashCode()`, `toString()`, `equals()`, `finalize()`, etc.
  - Combinations of the above methods.

## Gadgets: .NET Edition
- **System.Configuration.Install.AssemblyInstaller**
  - `set_Path`: Executes payload on local assembly load.
- **System.Activities.Presentation.WorkflowDesigner**
  - `set_PropertyInspectorFontAndColorData`: Arbitrary XAML load.
  - Requires Single Threaded Apartment (STA) thread.
- **System.Windows.ResourceDictionary**
  - `set_Source`: Arbitrary XAML load.
  - Required for working with setters of types derived from `IDictionary`.
- **System.Windows.Data.ObjectDataProvider**
  - `set_MethodName`, `set_ObjectInstance`, `set_ObjectType`: Arbitrary method invocation.
  - Example:
    ```json
    {
      "$type": "System.Windows.Data.ObjectDataProvider, PresentationFramework",
      "ObjectInstance": {
        "$type": "System.Diagnostics.Process, System"
      },
      "MethodParameters": {
        "$type": "System.Collections.ArrayList, mscorlib",
        "$values": ["calc"]
      },
      "MethodName": "Start"
    }
    ```

## Gadgets: Java Edition
- **org.hibernate.jmx.StatisticsService**
  - `setSessionFactoryJNDIName`: JNDI lookup.
- **com.atomikos.icatch.jta.RemoteClientUserTransaction**
  - `toString`: JNDI lookup.
- **com.sun.rowset.JdbcRowSetImpl**
  - `setAutoCommit`: JNDI lookup.
  - Available in Java JRE.

## Non-RCE Gadgets
- **.NET**
  - **System.Xml.XmlDocument/XmlDataDocument**
    - `set_InnerXml`: XXE on .NET before 4.5.2.
  - **System.Data.DataViewManager**
    - `set_DataViewSettingCollectionString`: XXE on .NET before 4.5.2.
  - **System.Windows.Forms.BindingSource**
    - `set_DataMember`: Arbitrary getter call, which can chain to other gadgets.
- **Java**
  - **org.antlr.stringtemplate.StringTemplate**
    - `toString`: Arbitrary getter call, which can chain to other gadgets like `TemplatesImpl.getOutputProperties()`.

## Analyzed Libraries
- We analyzed various Java/.NET JSON libraries to determine if they could lead to arbitrary code execution upon deserialization of untrusted data.
- **Requirements:**
  - Attacker can control the type of reconstructed objects.
  - Can specify the type.
  - Library loads the type.
  - Library/GC calls methods on reconstructed objects.
  - There are gadget chains starting on methods executed upon or after reconstruction.

## Different Scenarios
- **Format includes type discriminator:**
  - Default
  - Configuration setting
- **Type control:**
  - Cast after deserialization
  - Inspection of expected type
  - User JSON.Deserialize(untrusted);
  - JSON.Deserialize(untrusted, typeof(User));
  - Example:
    ```json
    {
      "$type": "Newtonsoft.Json.Samples.Stockholder, Newtonsoft.Json.Tests",
      "FullName": "Steve Stockholder",
      "Businesses": {
        "$type": "System.Collections.Generic.List`1[[Newtonsoft.Json.Samples.Business, Newtonsoft.Json.Tests]], mscorlib",
        "$values": [
          {
            "$type": "Newtonsoft.Json.Samples.Hotel, Newtonsoft.Json.Tests",
            "Stars": 4,
            "Name": "Hudson Hotel"
          }
        ]
      }
    }
    ```
- **Inspection of expected type’s object graph to determine nested types:**
  - Check assignability from provided type and/or whitelist creation.
  - Vulnerable if:
    - Expected type is user-controllable.
    - Attacker can find an injection member in the object graph.

## Summary
| Name | Language | Type Discriminator | Type Control | Vector |
|------|----------|--------------------|--------------|--------|
| FastJSON | .NET | Default | Cast | Setter |
| Json.Net | .NET | Configuration | Expected Object Graph Inspection | Setter, Deserialization Callbacks |
| FSPickler | .NET | Default | Expected Object Graph Inspection | Setter, Deserialization Callbacks |
| Sweet.Jayson | .NET | Default | Cast | Setter |
| JavascriptSerializer | .NET | Configuration | Cast | Setter |
| DataContractJsonSerializer | .NET | Default | Expected Object Graph Inspection | Setter, Deserialization Callbacks |
| Jackson | Java | Configuration | Expected Object Graph Inspection | Setter |
| Genson | Java | Configuration | Expected Object Graph Inspection | Setter |
| JSON-IO | Java | Default | Cast | toString |
| FlexSON | Java | Default | Cast | Setter |
| GSON | Java | Configuration | Expected Object Graph Inspection | - |

## FastJson
- Always includes type discriminators.
- No type check controls other than a post-deserialization cast.
- Invokes setters.
- Should never be used with untrusted data.
- Example: KalikoCMS (CVE-2017-10712)
  ```csharp
  var obj = (ExpectedType) JSON.ToObject(untrusted);
  ```

This optimized version of the text is more structured and professional, making it easier to follow and understand.