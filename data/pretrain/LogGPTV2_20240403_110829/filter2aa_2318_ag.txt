so   on   until   we   get   an   error.  
As   you   can   see   below   once   we   hit   3   columns   the   server   errors   out,   this   tells   us   that   
there   are   only   2   columns   being   retrieved   by   the   query.  
As   shown   below   we   can   use   the   “union   all   select”   operator   to   perform   the   second   
query.Also   note   how   the   second   select   column   is   wrapped   in   single   quotes,   this   is   
because   the   column   types   must   match   the   original   query.   The   first   column   is   an   integer   
and   the   second   column   is   a   string.   
Note   you   can   also   use   the   word   “null”   if  you   don’t   know   the   data   type,   so   it  would   look   
like:  
●
Union  all  select  null,null  
If   you   weren't   able   to   detect   the   database   type   from  the   error   message   you   could   always   
use   the   “version()”   function   to   print   the   database   type   and   version   as   shown   below:  
As   you   can   see   above   the   application   is   running   on   PostgreSQL   version   12.3.  
After   you   have   the   number   of   columns   the   query   returns   we   need   to   find   all   the   tables   in   
the   database.   Just   like   MySql   we   can   query   the   “information_schema.tables”   table   to   
get   a   list   of   all   tables   in   the   databases.  
●
union  all  select  1,table_name  from  information_schema.tables  where   
table_schema  !=  'pg_catalog'  and  table_schema  !=  'information_schema'  offset  0  
For   the   most   part   this   is   the   same   as   MySql   but   there   are   a   few   differences.   For  starters   
PostgreSQL   doesn't   have   a   group_concat   function   so   instead   I   return   one   table_name   
at   a   time   with   the   “offset”   operator.   Offset   ‘0’   get   the   first   table   name,   offset   ‘1’   gets   the  
second   and   so   on.   I   also   filter   out   the   default   databases   “pg_catalog”   and   
“information_schema”   as   they   tend   to   clog   up   the   results.  
As   shown   above   the   second   table   name   is   called   “users”,   this   is   the   table   we   will   be   
targeting.   The   next   step   is   to   extract   the   columns   associated   with   the   target   table   as   
shown   below.  
●
union  all  select  1,column_name  from  information_schema.columns  where   
table_name  =  'users'  offset  0  
As   shown   above   there   are   two   interesting   columns   called   username   and   password.   
These   are   the   columns   we   will   be   extracting   data   from  as   shown   in   the   below   query:  
●
union  all  select  1,concat(username,':',password)  from  users  offset  0  
Finally   the   username   and   password   of   the   first   user   is   shown.   An   attacker   could   then   
use   these   credentials   to   log   in   to   the   application.  
Oracle  
MySql   and   PostgreSql   are   very   similar   to   each   other   so   if  you   know   one   the   other   will   
come   easy.   However,   Oracle   is   different   from  those   two   and   will   require   some   additional   
knowledge   to   successfully   exploit   it.    As   always   when   testing   for   this   vulnerability   I   
usually   just   throw   a   bunch   of   single   and   double   quotes   around   until   I   get   an   error   
message   as   shown   below:  
As   shown   above   the   error   message   starts   with   “ORA”   and   that's   a   good   sign   that   you   
are   dealing   with   an   Oracle   database.   Sometimes   you   can’t   tell   the   database   type   from   
the   error   message   if  that's   the   case   you   need   to   return   the   database   version   from  a   sql   
query   as   shown   below:  
●
select  banner  from  v$version  
Note   that   similar   to   PostgreSql   when   you   are   selecting   a   column   it  must   match   the   type   
of   the   first   select   statement.   You   can   also   use   the   word   ‘null’   as   well   if  you   don't   know   
the   type.   Another   thing   to   note   is   that   when   using   the   select   operator   you   must   specify   a   
table,   in   the   above   image   the   default   table   of   “dual”   was   used.   
Union   Based   Sql   Injection  
Just   like   MySql   and   PostgreSql   the   first   step   is   to   figure   out   how   many   columns   the   
select   statement   is   using.   Again   this   can   be   accomplished   with   the   “order   by”   operator   
as   shown   below:  
As   mentioned   in   the   previous   sections   we   increase   the   order   by   operator   by   one   until   
you   get   an   error.   This   will   tell   you   how   many   columns   there   are.  
As   shown   above   an   error   was   displayed   once   we   got   to   column   number   3   so   there   must   
only   be   2   columns   used   in   the   select   statement.   The   next   step   is   to   retrieve   a   list   of   
tables   belonging   to   the   database   as   shown   below:  
●
union  all  select  LISTAGG(table_name,',')  within  group  (ORDER  BY   
table_name),null  from  all_tables  where  tablespace_name  =  'USERS'  --  
If   you’re   used   to   using   MySql   or   PostgreSql   you   would   normally   use   the   
“information_schema.tables”   table   to   get   a   list   of   tables   but   oracle   uses   the   “all_tables”   
table   for   this.   You   probably   want   to   filter   on   the   “tablespace_name”   column   value   
“USERS”   otherwise   you   will   get   hundreds   of   default   tables   which   you   have   no   use   for.   
Also   notice   the   “listagg()”   function,   this   is   the   same   as   MySqls   ‘group_concat()’   function   
and   is   used   to   concatenate   several   rows   into   a   single   string.   When   using   the   listagg()   
function   you   must   also   use   the   ‘within   group()’   operator   to   specify   the   order   of   the   
listagg   function   results.  
Once   you   get   your   target   table   you   need   to   get   a   list   of   the   column   names   belonging   to   
that   table   as   shown   below:  
●
union  all  select  LISTAGG(column_name,',')  within  group  (ORDER  BY   
column_name),null  from  all_tab_columns  where  table_name  =  'EMPLOYEES'--  
In   MySql   we   would   have   queried   the   “information_schema.columns”   table   to   get   a   list   of   
columns   belonging   to   a   table   but   with   oracle   we   use   the   “all_tab_columns”   table   to   do   
this.   Finally   once   you   know   the   tables   column   names   you   can   extract   the   information   
you   want   using   a   standard   sql   query   as   shown   below:  
●
Union  all  select  email,phone_number  from  employees  
As   you   might   have   noticed   Oracle   sql   injection   is   a   little   different   compared   to   MySql   
and   PostgreSql   but   it  is   still   very   similar.   The   only   difference   is   the   syntax   of   a   couple   
things   but   the   process   remains   the   same.   Figure   out   the   target   table   name,   get   the  
tables   columns,   then   finally   extract   the   sensitive   information.  
Summary  
SQL   injection   is   one   of   the   oldest   tricks   in   the   book   yet   it  still   makes   the   OWASP   top   10   
list   every   year.   It's   relatively   easy   to   search   for   and   exploit   plus   it  has   a   high   impact   on   
the   server   since   you   are   able   to   steal   everything   in   the   database   including   usernames   
and   passwords.    If   you're   searching   for   this   vulnerability   you   are   bound   to   come   across   
a   vulnerable   endpoint,   just   throw   single   and   double   quotes   everywhere   and    look   for   the   
common   error   messages.   Unlike   90%   of   other   hackers   you   should   know   how   to   exploit   
the   vast   majority   of   databases   not   just   Mysql   so   when   you   do   find   this   bug   it  shouldn't   
be   too   hard   to   exploit.  
Cross  Site  Scripting(XSS)  
Introduction  
Cross   site   scripting(XSS)   is   one   of   the   oldest   and   most   common   vulnerabilities   out   there   
and   has   been   on   the   OWASP   top   10   list   for   awhile   now.   XSS   allows   attackers   to   
execute   javascript   code   and   in   the   target   browser.   This   can   be   used   to   steal   tokens,   
sessions,   cookies   ,   and   much   more.   There   are   three   types   of   XSS   reflected,   stored,   and   
DOM   based.   The   following   sections   will   discuss   each   of   these.  
Reflected  XSS  
One   of   the   most   basic   forms  of   cross   site   scripting   is   reflected   XSS.   With  reflected   XSS   
user   input   is   reflected   in   the   html   source.   If   done   improperly   an   attacker   could   insert   
malicious   payloads   into   the   page.  
Basic   script   alert  
In   the   above   example   you   can   see   that   user   input   is   being   reflected   between   the   two   
“”   tags.   If   the   input   is   not   being   sanitized   an   attacker   could   insert   javascript   code   as   
shown   below:  
As   you   can   see   above   I   was   able   to   insert   a   javascript   command   to   pop   an   alert   box   on   
the   screen.   A   real   attacker   wouldn't   pop   an   alert   box   they   would   insert   a   javascript   
payload   to   steal   the   users   cookie   so   they   could   login   as   that   user.  
Input   Field  
In   the   image   below   the   users   input   is   being   reflected   in   the      tags   value   attribute   
and   also   in   between   the   two      tags   like   the   last   exercise.   However,   the   input   between   
the      tags   is   being   sanitized   by   the   back   end   application.   This   will   prevent   us   from   
inputting   javascript   tags   at   that   location   since   the   ‘”   tag   without   the   “   tags   value   attribute   the   input   is   not   being   sanitized.   So   if  we   
can   break   out   of   the   value   attribute   we   should   be   able   to   insert   our   javascript   payload.   
Think   about   it,   our   input   is   contained   in   an   input   tag   and   is   enclosed   by   double   quotes.  
To   break   out   of   the   double   quotes   we   need   to   insert   a   double   quote   and   to   break   out   of   
the   input   tag   we   need   to   close   it  with   a   “>”  symbol.  
As   you   can   see   above   we   used   the   “>   characters   to   break   out   of   the   input   tag.   Then   we   
inserted   our   javascript   payload   to   pop   an   alert   box.   Just   because   your   payload   is   
reflected   in   the   page   doesn't   mean   it  will   immediately   trigger,   you   might   have   to   break   
out   of   a   few   tags   to   get   the   payload   to   work   properly.  
Event   Attributes  
As   shown   in   the   image   below   our   input   is   again   being   sanitized   to   prevent   XSS.   This   
time   both   the      tags   and      tags   are   being   sanitized   to   prevent   the   use   of   “”  tags.   Under   most   conditions   this   is   efficient   at   preventing   XSS   but   there   are   a   
few   edge   cases   where   we   don't   need   “”  tags.  
Event   attributes   are   applied   to   HTML   tags   for   the   execution   of   Javascript   when   certain   
events   occur,   for   example,   onclick   ,   onblur   ,   onmousehover   ,   etc.   What's   nice   about   
these   attributes   is   that   we   don’t   need    “”  tags.   A   few   example   events   can   be   
found   in   the   image   below:  
For   this   example   I   will   be   using   the   onfocus   event.   This   event   will   run   our   javascript   
payload   when   a   user   focuses   their   mouse   on   the   input   field,   this   happens   by   default   
when   they   click   the   input   field   to   type   in   their   input.  
As   you   can   see   above   we   successfully   injected   an   onfocus   event   into   the   input   tag.   
When   a   user   focuses   on   this   input   tag   our   function   will   execute   and   an   alert   box   will   
appear.  
Stored  XSS  
If   you   understand   how   to   exploit   reflected   XSS   then   learning   stored   XSS   will   be   a   
breeze.   The   only   difference   between   stored   XSS   and   reflected   XSS   is   that   stored   XSS   
will   be   permanently   stored   somewhere   while   reflected   XSS   is   not.   
In   the   illustration   above   the   XSS   payload   is   stored   in   a   (Database,Json   File,XML   File)   
and   retrieved   by   the   application.   This   means   that   once   a   user   visits   the   vulnerable   
endpoint   the   XSS   payload   will   be   retrieved   and   executed   by   the   application.   
When   searching   for   this   vulnerability   you   have   to   think   about   what   information   the   
application   saves   in   its  database   and   outputs   to   the   screen.   Some   examples   are   shown   
below:  
●
Email  
●
Username  
●
BIO  
●
Address  
●
Comments  
●
Images  
●
Links  
As   you   can   see   above   there   are   a   bunch   of   potential   things   that   are   saved   and   
displayed   in   an   application.   For  example   when   you   sign   up   for   a   website   you   will    have   
to   login   with   your   username.   This   username   may   be   used   to   display   a   greeting   
message,   used   in   an   error   message,   or   many   other   things.   If   the   developer   does   not   
sanitize   this   value   it  could   lead   to   XSS.  
Another   popular   feature   used   to   store   user   input   is   comments.   A   lot   of   websites   have  
the   ability   to   write   a   comment   and   have   it  displayed   on   the   page.   This   is   the   perfect   
place   for   stored   XSS.  
As   shown   above   we   have   an   application   which   allows   users   to   leave   a   comment.   If   we   
enter   the   string   “”   as   our   comment   it  will   be   saved   by   application   
and   displayed   to   every   user   who   visits   the   page.  
If   you   look   at   line   “121”   our   payload   is   being   executed   by   the   application.   This   means   
that   any   user   visiting   this   endpoint   will   see   the   famous   alert   prompt.  
As   you   can   tell   stored   XSS   is   very   similar   to   reflected   XSS.   The   only   difference   is   that   
our   payload   is   saved   by   the   application   and   executed   by   every   user   who   visits   the   
vulnerable   endpoint.  
DOM  Based  XSS  
Introduction  
Reflected   and   stored   XSS   occur   when   server   side   code   unsafely   concatenates   user   
supplied   input   with   the   HTTP   response.   DOM   based   XSS   happens   client   side   entirely   
within   the   browser,   this   means   we   should   be   able   to   spot   these   vulnerabilities   by   looking   
at   the   javascript   source   code.   Remember   javascript   is   executed   in   the   browser   so   we   
have   access   to   everything,   all   you   need   to   know   now   are   some   basic   code   review   
techniques.  
When   performing   a   code   review   people   generally   look   for   user   supplied   input   (source)  
and   track   them   through   the   program   until   it  gets   executed   (sink)   as   shown   in   the   below   
illustration:  
As   shown   above   the   user   is   able   to   control   the   GET   parameter   “vuln”.   This   parameter   is   
then   saved   to   a   variable   called   “vul_var”   where   it  finally   ends   up   being   passed   as   an   
argument   to   the   function   “eval”.   The   eval   function   is   used   to   execute   javascript   and   
since   the   arguments   passed   to   this   function   are   controlled   by   the   user   attackers   could   
pass   a   malicious   payload   which   would   be   executed   by   the   users   browser.  
The   above   code   snippet   is   another   example   of   DOM   xss.   This   time   the   GET   parameter   
“index”   is   being   passed   to   the   “eval”   function.    The   “index”   parameter   is   the   source   and   
the   “eval”   function   is   the   sink.   Note,   if  a   javascript   function   is   passed   to   the   eval   function   
it  will   be   automatically   executed   before   the   eval   function   is   run.   
This   is   actually   true   for   any   function   that   takes   another   function   as   an   argument   as   
shown   in   the   image   below:  
Sources  
As   mentioned   earlier   we   need   to   find   all   the   locations   where   user   input   AKA   source   is   