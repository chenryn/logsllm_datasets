S =
{(u, Nu, Au)} ∀u ∈ U, where Nu ⊆ P is the set
of product codes for which user u is authorized, and
Au ⊆ K, is the set of keywords which user u has been
assigned.
For the example in Table 1, we have the following sets
(only the ﬁrst entry of setS is shown):
U = {Bob, Carol, Ted, Alice}
P = {SVG, DSAS}
KN = {(SVG, INQ), (SVG, DEP),
(DSAS, INQ)}
Proceedings of the 18th Annual Computer Security Applications Conference (ACSAC(cid:146)02) 
1063-9527/02 $17.00 ' 2002 IEEE 
Figure 3. Core RBAC (adapted from Ferraiolo et al. [2]).
KR = {(SVG, COR), (SVG, COROVR),
(SVG, KYAPSVG), (DSAS, BRAUTH)}
S = {(Alice,{SVG, DSAS},
{(SVG, INQ), (SVG, DEP), (SVG, COR),
(DSAS, INQ)}), . . .}
We now look at mapping from the DENT/DSAS “world”
into the RBAC “world”. Our approach is to develop the
mapping as a design exercise, structured as a series of ques-
tions and answers.
5.1. Who are the users of our system?
The users of DENT/DSAS will be the users of the new
RBAC system, so U SERS = U. Note that the proposed
NIST RBAC standard allows only people to be represented
in its U SERS set, which conﬂicts with the DENT/DSAS
deﬁnition of a user. In the DENT/DSAS world, a user is
most often a person—an employee—but may also be a ma-
chine: an application server or Automated Banking Ma-
chine (a “tin teller”) operating like a human teller on behalf
of a customer.
5.2. What are the roles to which users can be as-
signed?
The set of roles we deﬁne is the union of three kinds of
roles: user roles, product owner roles (one for each prod-
uct), and the Brauth role, i.e., ROLES = ROLESU ∪
ROLESO ∪ {Brauth}.
As we have mentioned, DENT/DSAS was not a role-
based system. We can still view it as role-oriented if we
consider that every user in the organization has, by deﬁ-
nition, his or her own role, which has the same permis-
sions in the RBAC world as the keywords permitted in
the DENT/DSAS world. In other words, ROLESU = U.
We assume that every product has a product owner, so
ROLESO = P .
5.3. What are the objects we are protecting?
The basic objects we are protecting are business func-
tions as represented by keywords. So the keywords in bank-
ing product systems become the “user” objects (as with
the keywords themselves, we separate “normal” objects and
“restricted” objects). We also need objects to represent roles
in the RBAC system so that we can assign, for example,
permissions to managers to permit them to change the per-
missions assigned to their employees’ roles, and to product
owners so that they can fulﬁll requests for restricted key-
words. We refer to these objects as “admin” objects. More
formally: OBS = OBSU ∪ OBSA where
OBSU = OBSN ∪ OBSR
OBSN = {k = (p, w) ∈ KN}
OBSR = {k = (p, w) ∈ KR}
OBSA = ROLESU
5.4. What are the operations on the objects?
We divide the operations into two kinds: user (those used
to construct end user permissions) and administrative (those
used to manage roles and permissions). OP S = OP SU ∪
OP SA, where
OP SU = {exec}
OP SA = {assign, request, approve, change}
5.5. How are the objects and operations combined
into permissions?
P RM S = P RM SU ∪ P RM SA where
P RM SU = {(exec, o)∀o ∈ OBSU}
Proceedings of the 18th Annual Computer Security Applications Conference (ACSAC(cid:146)02) 
1063-9527/02 $17.00 ' 2002 IEEE 
User
Branch
User Security Proﬁles
Product Keyword
(Implicit Role)
Alice
Bob
Carol
Ted
1
1
1
2
SVG
DSAS
SVG
DSAS
SVG
DSAS
SVG
DSAS
INQ
DEP
COR
INQ
INQ
DEP
COR
COROVR
INQ
INQ
DEP
COR
COROVR
INQ
BRAUTH
KYAPSVG
INQ
Teller
Supervising Teller
Manager
Product Owner
Product
Keyword
Normal/Restricted Guidelines
Product and Keyword Table
INQ
DEP
COR
COROVR
KYAPSVG
INQ
BRAUTH
SVG
DSAS
N
N
R
R
R
N
R
Any employee
Any Teller
Any Teller
Supervising Teller
Product Owner
Any employee
Branch Manager
Table 1. A sample DENT/DSAS security database
P RM SA = P RM SR ∪ P RM SM ∪ P RM SO
and where
P RM SR = {(change, k) ∀k ∈ OBSA}
P RM SM = {(assign, k) ∀k ∈ OBSN} ∪
{(request, k) ∀k ∈ OBSR}
P RM SO = {(approve, k) ∀k ∈ OBSR}
Each permission in P RM SU conveys the right to exe-
cute the business function represented by the permission’s
object. These are the permissions that constitute the ma-
jority of a normal user’s role’s permissions. Each permis-
sion in P RM SR conveys the right to change the role whose
name is the object of the permission. These permissions are
assigned to the Brauth role and to all product owner roles.
Permissions in P RM SM are attached to the Brauth role:
an “assign” operation on object k conveys the right to add
the (exec, k) permission to a role; a “request” operation on
object k conveys the right to request of a product owner that
the (exec, k) permission be added to a role. Finally, the per-
missions in P RM SO are assigned to product owner roles:
an “approve” operation on object k conveys the right to add
the (exec, k) permission to a role.
5.6. What is the Permission Assignment (PA) rela-
tion?
This relation, the mapping between roles and permis-
sions, is given in Table 2. We use the notation, fooP, to
refer to the permissions assigned to role foo.
Note that the permissions assigned to the Brauth role
do not capture the constraint of the corresponding keyword
semantics in the DENT/DSAS system.
In DENT/DSAS,
someone holding the Brauth keyword could only change
or create proﬁles for employees with the same branch num-
ber. The NIST RBAC model offers no obvious way to en-
force this constraint. Note also that a product owner can add
the keyword(s) it owns to any user’s role without a preced-
ing “request” from a user in the Brauth role. Within the
proposed NIST RBAC standard there appears to be no way
to prevent this situation. We will return to these issues in
Section 6.2.
Proceedings of the 18th Annual Computer Security Applications Conference (ACSAC(cid:146)02) 
1063-9527/02 $17.00 ' 2002 IEEE 
Role
∀u ∈ ROLESU
Brauth
∀r ∈ ROLESO
Permissions
uP = {(exec, (p, w)) | (u, Nu, Au) ∈ S ∧ p ∈ Nu ∧ (p, w) ∈ Au ∧ p 6= DSAS}
BrauthP = P RM SR ∪ P RM SM
rP = P RM SR ∪ {(approve, (p, w)) | p = r}
Table 2. The Permission Assignment (PA) relation
Role
∀r ∈ ROLESU
Brauth
∀o ∈ ROLESO
Users assigned to the role
rU = r
BrauthU = {u ∈ U SERS | (u, Nu, Au) ∈ S ∧ (DSAS, BRAU T H) ∈ Au}
oU = {u ∈ U SERS | (u, Nu, Au) ∈ S ∧ (o, KY AP o) ∈ Au}
Table 3. The User Assignment (UA) Relation
5.7. What is the User Assignment (UA) relation?
This relation, the mapping between roles and users, is
given in Table 5.4. We use the notation, fooU , to refer to
the users assigned to role foo.
We complete our mapping by referring the reader to Fig-
ure 4 which illustrates the UA and PA relations for each of
the users in our sample database.
6. Conclusions
The major contribution of this paper is to demonstrate
the power of the proposed NIST RBAC standard by us-
ing it to model a legacy mainframe access control system.
DENT and DSAS, although successful, were not perfect.
Section 6.1 describes some improvements that would be in-
cluded if a redesign were to be undertaken now. Similarly,
NIST’s proposed RBAC standard is a creature of compro-
mise and constraint; for example, the authors required that
each feature be supported by a a proven implementation.
Our experience with DENT/DSAS suggest, however, that
the proposed model is missing some features that are impor-
tant in the ﬁnancial
industry, as evidenced by their support
by DENT/DSAS. Section 6.2 describes these features.
6.1. DENT/DSAS: A Retrospective Redesign
DENT/DSAS was in service for 22 years before being
decommissioned, and the decommissioning was triggered
by system integration activities, not by some inherent ﬂa w
in the system. However, taking advantage of hindsight, a
number of issues have been identiﬁed with it that were not
completely solved in the initial design.
Employment practices within CT, common also to TD,
raise issues with role activation.
It is not uncommon for
one person to work in two different branches at different
times and to take on different roles in each branch. Ideally,
their proﬁle would be automatically adjusted according to
their location or time of day or some other external clue.
DENT/DSAS essentially side-stepped this issue by mandat-
ing that a user in this situation would have two different lo-
gon ids: one for each branch, each with its own security
proﬁle. Similar issues arise in health care, as location—the
notion of a “ﬂoor”—is important in determining access to a
patient’s records [1].
A related issue is dealing with the privileges assigned to
internal auditors. This class of employees is not assigned to
any one branch but has access to the records of any branch.
Their access rights are somewhat contradictory: they have
complete access, much greater than that afforded to normal
employees, to transaction log ﬁles, but simultaneously have
no access to the transactional applications themselves. The
designers of DENT/DSAS were unable to integrate access
control for internal auditors into DENT/DSAS in a way that
they found satisfying.
6.2. Suggestions for the Proposed RBAC Standard
As noted in Section 5.1, the proposed RBAC standard
requires its U SERS set to denote only human users, a re-
striction which appears to be unnecessarily restrictive.
As described in Section 5.6, there is no obvious simple
solution to permit us to constrain a holder of the Brauth
role only to changing the roles of the employees in the same
branch. However, there do appear to be two options:
1. Create one Brauth role for each branch, one change
permission for each branch, and assign each man-
ager to a branch-speciﬁc Brauth role rather than
the generic Brauth role. This creates administrative
complications that seem at odds with the goal of RBAC
to simplify access control administration.
2. A more aesthetically pleasing solution would be to en-
Proceedings of the 18th Annual Computer Security Applications Conference (ACSAC(cid:146)02) 
1063-9527/02 $17.00 ' 2002 IEEE 
(a) User and permission assignments for Alice (Teller)
(b) User and permission assignments for Bob (Supervising Teller)
(c) User and permission assignments for Carol (Manager)
(d) User and permission assignments for Ted (Product
Owner)
Figure 4. Mapping of the sample security database from Table 1 into the RBAC world
Proceedings of the 18th Annual Computer Security Applications Conference (ACSAC(cid:146)02) 
1063-9527/02 $17.00 ' 2002 IEEE 
Based Access Control (RBAC-98), pages 43–46, New York,
Oct. 22–23 1998. ACM Press.
[2] D. F. Ferraiolo, R. Sandhu, S. Gavrila, D. R. Kuhn, and
R. Chandramouli. Proposed NIST standard for role-based ac-
cess control. ACM Transactions on Information and System
Security, 4(3):224–274, Aug. 2001.
[3] T. Jaeger and J. E. Tidswell. Rebuttal to the NIST RBAC
model proposal. In Proceedings of the 5th ACM Workshop on
Role-Based Access Control (RBAC-00), pages 65–66, N.Y.,
July 26–27 2000. ACM Press.
[4] S. Osborn, R. Sandhu, and Q. Munawer. Conﬁguring role-
based access control to enforce mandatory and discretionary
access control policies. ACM Transactions on Information
and System Security, 3(2):85–106, May 2000.
[5] R. Sandhu. Role-based access control. In M. V. Zelkowitz,
editor, The Engineering of Large Systems, volume 46 of Ad-
vances in Computers, pages 238–286. Academic Press, 1998.
courage NIST to modify its RBAC model to support
general constraints. Constraints are well-understood
and useful (e.g., see the RBAC2 model in Sandhu’s dis-
cussion of RBAC96 in [5]): in this context a constraint
would be a rule attached to a role which indicates that
it only applies if the holder of the role and the target
object have the same value in their “branch” attributes.
The Dual Control policy presented in Section 3 requires
two users, an initiator and an approver, to cooperate to com-
plete a transaction. The proposed NIST RBAC standard
does not appear to support this policy since it does not allow
more than one user to be connected to a single session. The
most obvious way to adjust the standard to support Dual
Control would be to relax this restriction, and allow more
than one user to be attached to a session.
Alternatively, is could be supported by adding a work-
ﬂo w or temporal ordering constraint on permissions. This
would also help with the issue of product owners being able
to make arbitrary changes to any user’s proﬁle, discussed in
Section 5.6.
The bulk of the permissions and roles we created in map-
ping DENT/DSAS to RBAC were concerned with admin-
istration of the RBAC system itself. The absence of ad-
ministrative roles and permissions from the proposed NIST
RBAC standard is a surprising omission. Administrative
role hierarchies are a familiar notion in the RBAC literature
(see, again, Sandhu’s RBAC96 article [5]). In their paper
demonstrating how RBAC can simulate other access con-
trol models, Osborn, Sandhu and Munawer note that, “The
Administrative Role Hierarchy is essential in the enforce-
ment of DAC policies” [4]. Finally, in their critique [3] of
an earlier version of the standard, Jaeger and Tidswell re-
mark on the “surprising omission” of administrative roles
in the standard.
7. Acknowledgements
principal
architect
the
Chuck Burns was
of
DENT/DSAS. He provided many details of its history
and development. Discussions with Val Woodward, Ron
Brubacher, and Barb Edwards provided additional useful
information.
The author would like to thank Sylvia Osborn for review-
ing early drafts of this paper and for providing expert guid-
ance to the RBAC literature; the anonymous reviewers for
their valuable comments; and, ﬁnally , Cristina Scassa and
Frank Coletti for supporting RBAC research within the TD
Bank Financial Group.
References
[1] K. Beznosov. Requirements for access control: US healthcare
domain. In Proceedings of the 3rd ACM Workshop on Role-
Proceedings of the 18th Annual Computer Security Applications Conference (ACSAC(cid:146)02) 
1063-9527/02 $17.00 ' 2002 IEEE