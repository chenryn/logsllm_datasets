      {
        *puIndex = itemHit;
        return longHit;
      }
    }
_函数 xxxMNFindWindowFromPoint 的代码逻辑片段_
在通过函数 `xxxSendMessageTimeout` 向窗口对象发送消息时，系统在调用对象指定的消息处理程序之前，还会调用 `xxxCallHook`
函数用来调用先前由用户进程设定的 `WH_CALLWNDPROC` 类型的挂钩处理程序。设置这种类型的挂钩会在每次线程将消息发送给窗口对象之前调用。
    if ( (LOBYTE(gptiCurrent->fsHooks) | LOBYTE(gptiCurrent->pDeskInfo->fsHooks)) & 0x20 )
    {
      v22 = pwnd->head.h;
      v20 = wParam;
      v19 = lParam;
      v21 = message;
      v23 = 0;
      xxxCallHook(0, 0, &v19, 4); // WH_CALLWNDPROC
    }
_函数 xxxSendMessageTimeout 调用 xxxCallHook 函数_
系统最终在菜单窗口消息处理函数 `xxxMenuWindowProc` 中接收并处理 `MN_FINDMENUWINDOWFROMPOINT`
消息，并将子菜单窗口对象的弹出菜单对象作为目标参数以继续调用 `xxxMNFindWindowFromPoint` 函数。
    case 0x1EBu:
      pwnd = xxxMNFindWindowFromPoint((WCHAR)popupMenu, wParam, (int)lprc);
      if ( IsMFMWFPWindow(pwnd) )
      {
        if ( !pwnd )
          return 0;
        lRet = (LRESULT)*pwnd; // pwnd->head.h
      }
      else
      {
        lRet = pwnd;
      }
      return lRet;
_函数 xxxMenuWindowProc 处理 MN_FINDMENUWINDOWFROMPOINT 消息_
函数 `xxxSendMessage` 向调用者函数 `xxxMNFindWindowFromPoint`
返回通过子菜单窗口对象查找的坐标点坐落窗口对象的用户句柄。接下来函数将该句柄转换成窗口对象指针，如果该指针指向真实的菜单窗口对象，则直接将该指针作为返回值返回。然而，如果目标弹出菜单对象的成员域
`spwndNextPopup` 不存在关联的子菜单窗口对象，或是函数 `xxxSendMessage` 返回的是 `0xFFFFFFFB` 或
`0xFFFFFFFF` 等代表窗口对象未找到的返回值，那么函数将继续向下执行，转而通过弹出菜单对象成员域 `spwndPopupMenu`
指向的当前菜单窗口对象执行查找任务。
_函数 xxxMNFindWindowFromPoint 的简要执行流_
* * *
**xxxMNDestroyHandler**
当在内核中调用函数 `xxxDestroyWindow` 销毁特定的菜单窗口对象期间，系统在函数 `xxxFreeWindow` 中根据目标窗口对象的成员域
`fnid` 的值调用对应的消息处理包装函数 `xxxWrapMenuWindowProc` 并传入 `WM_FINALDESTROY`
消息参数，最终在函数 `xxxMenuWindowProc` 中接收该消息并通过调用函数 `xxxMNDestroyHandler`
对目标菜单窗口对象关联的弹出菜单对象执行清理相关数据的任务。
    .text:0008D9B6    lea     ecx, [eax+6]
    .text:0008D9B9    xor     eax, eax
    .text:0008D9BB    push    eax
    .text:0008D9BC    push    eax
    .text:0008D9BD    push    eax
    .text:0008D9BE    mov     eax, _gpsi
    .text:0008D9C3    push    70h        ; WM_FINALDESTROY
    .text:0008D9C5    and     ecx, 1Fh
    .text:0008D9C8    push    esi
    .text:0008D9C9    call    dword ptr [eax+ecx*4+8]
_函数 xxxFreeWindow 根据成员域 fnid 调用消息处理包装函数_
在函数 `xxxMNDestroyHandler` 的末尾，函数将位于目标菜单窗口 `tagWND`
对象末尾扩展区域中指向关联的弹出菜单对象的指针置空；然后判断目标弹出菜单对象的成员标志位 `fDelayedFree`
是否处于置位状态，并据此决定是在完整菜单终止时再进行对目标弹出菜单对象的延时释放，还是在当前时刻立即释放目标弹出菜单对象。
    pwnd = popupMenu->spwndPopupMenu;
    *(_DWORD *)popupMenu |= 0x8000u; // fDestroyed
    if ( pwnd )
      *(_DWORD *)(pwnd + 0xB0) = 0;  // Pointer to popupMenu
    if ( *((_BYTE *)popupMenu + 2) & 1 ) // fDelayedFree
    {
      popupmenuRoot = popupMenu->ppopupmenuRoot;
      if ( popupmenuRoot )
        *(_DWORD *)popupmenuRoot |= 0x20000u; // ppopupmenuRoot->fFlushDelayedFree
    }
    else
    {
      MNFreePopup(popupMenu);
    }
_函数 xxxMNDestroyHandler 的代码片段_
在内核中通过正规途径创建上下文弹出菜单对象时，根弹出菜单对象或子弹出菜单对象的成员标志位 `fDelayedFree` 默认情况下都会在函数
`xxxTrackPopupMenuEx` 或 `xxxMNOpenHierarchy` 中被置位。
* * *
另外，和本分析中的漏洞相关的更多系统机制在我之前的分析文章[《从 CVE-2017-0263
漏洞分析到菜单管理组件》](https://paper.seebug.org/588/ "《从 CVE-2017-0263
漏洞分析到菜单管理组件》")中有更详尽的涉及，如果感兴趣的话请点击链接移步。
#### 0x3 验证
通过在桌面点击鼠标右键，并使鼠标指针指向某个作为子弹出菜单入口的子菜单项（如“新建”命令）以尝试使执行流触达漏洞所在的位置，我发现始终无法命中，这是由于系统每次向目标菜单窗口发送
`MN_SETTIMERTOOPENHIERARCHY` 消息时都执行成功并返回成功的返回值，这样一来自然就不会触达漏洞所在的
`xxxMNHideNextHierarchy` 函数调用，因此需要自行构造验证代码以实现漏洞触发。
接下来谈一下触发的思路：
* * *
**#1 使 MN_SETTIMERTOOPENHIERARCHY 消息返回失败**
在函数 `xxxMNMouseMove` 执行期间，要想使发送 `MN_SETTIMERTOOPENHIERARCHY` 消息的
`xxxSendMessage`
函数调用返回失败的返回值，最直接的做法就是在调用之前的某个时机将目标菜单窗口对象的消息处理函数篡改为在用户进程中的自定义消息处理函数，并在自定义消息处理函数中针对这种消息返回失败的返回值。
* * *
**#2 释放目标弹出菜单对象**
要想在漏洞所在位置触发释放后重用（UAF）漏洞，则需要在适当时机执行对目标弹出菜单 `tagPOPUPMENU` 对象的释放。这个操作最好能在通过函数
`xxxSendMessage` 发送 `MN_SETTIMERTOOPENHIERARCHY` 消息期间执行。
前面已经提到，在发送消息时，调用对象指定的消息处理函数之前，系统会调用 `xxxCallHook` 函数分发调用先前由用户进程定义的
`WH_CALLWNDPROC` 窗口挂钩处理程序。因此，我们可以通过设置这种类型的挂钩处理程序，并在处理程序函数中对目标菜单窗口对象调用
`DestroyWindow` 等函数以触发对目标窗口对象的销毁操作。
调用 `DestroyWindow` 函数时，在内核中将进入函数 `xxxDestroyWindow` 中执行对目标菜单窗口对象的销毁操作。最终在内核函数
`xxxMNDestroyHandler` 中，如果目标菜单窗口对象的成员标志位 `fDelayedFree` 未置位，那么系统将直接调用函数
`MNFreePopup` 释放目标弹出菜单对象。
_释放目标弹出菜单对象的思路_
然而，在内核中通过正规途径创建上下文弹出菜单对象时，根弹出菜单对象或子弹出菜单对象的成员标志位 `fDelayedFree` 默认情况下都会在函数
`xxxTrackPopupMenuEx` 或 `xxxMNOpenHierarchy` 中被置位，因此我们需要先前单独创建窗口类型为
`#32768`(`MENUCLASS`)
的窗口对象作为被利用的目标对象，而不是使用通过正规途径创建的菜单窗口对象，这样一来新创建的菜单窗口对象同样存在通过扩展区域关联的弹出菜单
`tagPOPUPMENU` 对象作为扩展对象，并且所关联的弹出菜单 `tagPOPUPMENU` 对象的成员域 `fDelayedFree`
将不会被置位，后续在函数 `xxxMNDestroyHandler` 中的释放操作将立即执行。
* * *
**#3 使 xxxMNFindWindowFromPoint 返回目标窗口对象**
由于用来利用的目标菜单窗口对象是我们单独创建的，并不存在具体对应的某个菜单实体对象，因此通常情况下函数 `xxxMNFindWindowFromPoint`
不可能返回我们创建的菜单窗口对象指针。
根据前面的分析，函数 `xxxMNFindWindowFromPoint` 判断通过参数传入的弹出菜单对象成员域 `spwndNextPopup`
是否指向存在的子菜单窗口对象，如果是则调用 `xxxSendMessage` 向子菜单窗口对象发送 `MN_FINDMENUWINDOWFROMPOINT`
以将查找坐标点坐落的菜单窗口对象的任务暂时交给子菜单对象执行。
这样一来，可以通过将子菜单窗口对象的消息处理函数成员域篡改为用户进程中的自定义消息处理函数，并在自定义消息处理函数中返回我们先前创建的用来利用的目标菜单窗口对象的句柄。因此，函数
`xxxMNFindWindowFromPoint` 将收到由 `xxxSendMessage`
函数返回的真实的窗口对象句柄，并在转换成对象指针后向上级调用者返回。
而由于子菜单窗口对象关联具体的菜单，很多向其发送的消息需要在消息处理函数 `xxxMenuWindowProc`
中执行，因此需要在较为接近的时机替换。这可以通过设置 `WH_CALLWNDPROC` 窗口挂钩处理程序来执行。
* * *
**#4 触发鼠标移动消息**
这样一来，这就需要在利用代码中创建相互关联的根菜单和子菜单。
当子菜单完成在屏幕中的显示时，根菜单窗口对象和子菜单窗口对象已经通过各自的弹出菜单 `tagPOPUPMENU`
对象完成关联。在这一时机通过在用户进程定义的事件通知处理程序函数中调用函数 `SendMessage` 向根菜单窗口对象发送 `WM_MOUSEMOVE`
消息，可以使系统在内核中进入函数 `xxxMNMouseMove` 调用。
* * *
**验证代码的实现**
接下来根据思路实现具体的验证代码，用户进程中验证代码的大部分代码逻辑都在新创建的单独线程中执行。
在验证代码的主函数中通过 `CreatePopupMenu`
等函数创建两个弹出式的菜单对象，并在添加菜单项时将两个菜单对象相互关联，使第二个成为第一个的子菜单。
    HMENU hMenuList[2] = { 0 };
    hMenuList[0]  = CreatePopupMenu();
    hMenuList[1]  = CreatePopupMenu();
    MENUINFO mi = { 0 };
    mi.cbSize  = sizeof(mi);
    mi.fMask   = MIM_STYLE;
    mi.dwStyle = MNS_AUTODISMISS | MNS_MODELESS | MNS_DRAGDROP;
    SetMenuInfo(hMenuList[0], &mi);
    SetMenuInfo(hMenuList[1], &mi);
    LPCSTR szMenuItem = "item";
    AppendMenuA(hMenuList[0], MF_BYPOSITION | MF_POPUP, (UINT_PTR)hMenuList[1], szMenuItem);
    AppendMenuA(hMenuList[1], MF_BYPOSITION | MF_POPUP, 0, szMenuItem);
_创建并关联根菜单和子菜单对象的验证代码_
菜单的显示需要有用于承载的窗口作为菜单的拥有者窗口对象。注册并创建普通窗口类和窗口对象并将句柄存储在 `hWindowMain` 全局变量中：
    WNDCLASSEXW wndClass = { 0 };
    wndClass.cbSize = sizeof(WNDCLASSEXW);
    wndClass.lpfnWndProc    = DefWindowProcW;
    wndClass.cbWndExtra     = cbWndExtra;
    wndClass.hInstance      = GetModuleHandleA(NULL);
    wndClass.lpszMenuName   = NULL;
    wndClass.lpszClassName  = lpszClassName;