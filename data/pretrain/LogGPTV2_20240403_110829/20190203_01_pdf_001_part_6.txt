### 2.3.1.6 xDB Replication Server Command Line Interface

The xDB Replication Server Command Line Interface (CLI) is a command-line alternative to the xDB Replication Console, offering equivalent functionality for creating and managing all aspects of a replication system. The CLI can be used to automate replication system operations by embedding commands in scripts, such as Bash for Linux.

The xDB Replication Server CLI is installed whenever you choose to install the xDB Replication Console. For detailed instructions on using the CLI, refer to Chapter 8.

### 2.3.1.7 Publication Database

A publication database contains the tables and views that are part of a publication. It can be located on the same host or a different host from the publication server, provided both hosts are network-accessible to each other.

Each publication database includes a control schema, which is a collection of database objects containing metadata about all replication systems, whether single-master or multi-master, managed by the connected publication server. For more information on the control schema, see Section 2.3.1.11.

In a multi-master replication system, all master nodes are considered publication databases. A database can act as both a publication and subscription database if it contains both publications and subscriptions.

### 2.3.1.8 Subscription Database

**Note:** The subscription database applies only to single-master replication systems.

A subscription database contains the tables created from a subscription. It can be running on the same host or a different host from the subscription server, as long as both hosts are network-accessible to each other.

A subscription database can also serve as a publication source for replicating to a third server, a configuration known as cascading replication. In scenarios like cascaded replication, a database can play the roles of both a publication and subscription database if it contains both publications and subscriptions.

### 2.3.1.9 Master Node

In a multi-master replication system, the databases containing the set of tables (the publication) for which row changes are to be replicated are called master nodes. These master nodes can be on the same host or different hosts from the publication server, as long as they are network-accessible to each other.

Each master node includes a control schema, which is a collection of database objects containing metadata about all replication systems, both single-master and multi-master, managed by the connected publication server. For more information on the control schema, see Section 2.3.1.11.

Master nodes can run under the same or multiple database server instances (Postgres database clusters).

### 2.3.1.10 Master Definition Node

The first node added to create a multi-master replication system is initially designated as the master definition node. This node must contain the table definitions (and optionally, the initial set of rows) that are to be included in the publication.

As subsequent databases are added as master nodes to the replication system, the table definitions and initial row sets can optionally be propagated from the master definition node to the newly added master nodes.

After the multi-master replication system is defined, the role of the master definition node can be reassigned to another master node. This reassignment allows snapshots to be taken from the newly appointed master definition node to other master nodes, which can be beneficial if the data in the old master definition node becomes corrupt or out-of-sync with the other master nodes and needs to be refreshed.

Like all master nodes, the master definition node contains a control schema, which is a collection of database objects containing metadata about all replication systems, both single-master and multi-master, managed by the connected publication server. For more information on the control schema, see Section 2.3.1.11.

### 2.3.1.11 Control Schema and Control Schema Objects

The control schema is a conceptual term referring to the collection of metadata database objects that define the logical and physical structure and enable the operation and maintenance of xDB Replication Server single-master and multi-master replication systems.

These metadata database objects, referred to as control schema objects, include tables, sequences, functions, procedures, triggers, packages, etc. They store metadata such as the type of replication system (single-master or multi-master), network location, database type, connection and authentication information for publication and subscription databases, names of publications and their contents, names of subscriptions and their associated publications, replication transaction status, scheduling, and history.

Each publication database in a trigger-based, single-master replication system also contains control schema objects with the changes made to rows in the publication and the status of whether these changes have been applied to the subscription tables. Similarly, in a multi-master replication system, each trigger-based master node contains control schema objects with the changes made to rows in the publication and the statuses of whether these changes have been applied to other master nodes.

For log-based single-master and multi-master replication systems, changes are extracted from the database server WAL files instead of being stored in control schema objects. See Section 2.2.10 for information on the log-based method.

The actual, physical database schemas implementing the control schema vary depending on the database type (Oracle, SQL Server, or Postgres) and how the database was initially configured for use by xDB Replication Server.

Key points about the control schema:
- The control schema and its objects are created in every publication database of both single-master and multi-master replication systems.
- When a new master database or master node is added, a snapshot operation is used to replicate the control schema to the newly added publication database, assuming there is an existing controller database. See Section 2.3.1.12 for information on the controller database.
- Updates to the configuration of a single-master or multi-master replication system made by the xDB Replication Console or the xDB Replication Server CLI are synchronized between the control schemas on all publication databases to ensure consistency.
- The slave (subscription) database of single-master replication systems contains a single table as its metadata database object, referred to as the subscription metadata object.
- The control schema objects in all databases controlled by the same publication server generally contain the same information, allowing any such database to provide the necessary information for xDB Replication Server to control all replication systems.
- If a publication database goes offline, the other replication systems running under the same publication server remain functional because the other publication databases can provide the required control schema information.

### 2.3.1.12 Controller Database

In the xDB Replication Configuration file, the connection and authentication information for one publication database is included, designating it as the controller database.

The controller database, like all publication databases, contains the control schema with the replication system information for all single-master and multi-master replication systems run by the publication server that accesses the xDB Replication Configuration file.

The controller database serves as the primary provider of replication system information to the publication and subscription servers. Upon initial startup, the servers attempt to connect to the designated controller database, which then provides the metadata information for all replication systems.

If the initial connection to the controller database fails, you can manually edit the xDB Replication Configuration file to provide the connection and authentication information for another publication database. The control schema of this alternate publication database will then be used to provide the replication system information.

The initial controller database is determined by the first publication database definition created by the xDB Replication Console or the xDB Replication Server CLI. The publication server records the connection and authentication information in the xDB Replication Configuration file.

To delete the publication database definition of the current controller database, you must first designate another publication database, defined under the same publication server, as the controller using the xDB Replication Console. See Section 7.7 for directions on switching the controller to another publication database.

Key points about the controller database:
- The database server running the controller database must be running and accessible before starting the publication and subscription servers.
- For a single-master replication system, the publication and subscription servers must both connect to the same controller database to access the same control schema.
- Changes to the metadata maintained by the control schema in the controller database are replicated to the control schemas of all other publication databases, ensuring consistency. This allows you to switch the controller database at a later time. See Section 7.7 for information on switching the controller database.
- If the controller database is an Oracle or SQL Server publication database, a second Oracle or SQL Server publication database cannot be added to create a second single-master replication system. To run multiple single-master replication systems with Oracle or SQL Server publication databases, a Postgres publication database must be designated as the controller database.

### 2.3.2 Logical Components

This section discusses the logical components of a replication system, their relationships, and how they correspond to the programs and databases in a replication system.

The logical components are created when you build a replication system using the xDB Replication Console or the xDB Replication Server CLI. These components are stored as part of the replication system metadata in the control schema of the publication databases.

Creating a replication system involves the following steps:
- Register a publication server
- Create a publication database definition
- Create a publication

For a single-master replication system, you also need to:
- Register a subscription server
- Create a subscription database definition
- Create a subscription

For a multi-master replication system, you create additional master nodes by creating additional publication database definitions.

Each step creates a logical component represented by a node in the replication tree of the xDB Replication Console. See Chapter 4 for a description of the xDB Replication Console. Brief descriptions of these components are provided in the following sections.

#### 2.3.2.1 Publication Server

The first step in creating a publication is to identify the publication server that will manage the publication. This process is called registering the publication server.

Using the xDB Replication Console or the xDB Replication Server CLI, a publication server is registered by providing the IP address and port number of the host on which the publication server is running, along with the admin user name and password stored in the xDB Replication Configuration file located on the host running the publication server. (This information is determined during the publication server installation process.)

When viewed in the xDB Replication Console, a registered publication server appears under the top-level Replication Servers node in the replication tree. All publication-related logical components are created subordinate to a registered publication server and appear underneath it in the replication tree.

See Section 5.2.1 for directions on registering a publication server for a single-master replication system and Section 6.2.1 for a multi-master replication system.

#### 2.3.2.2 Replication System Type (SMR/MMR)

Subordinate to a registered publication server, two nodes representing the replication system type appear: one labeled SMR for single-master replication and the other labeled MMR for multi-master replication.

- For a single-master replication system, add logical components under the SMR type node.
- For a multi-master replication system, add logical components under the MMR type node.

#### 2.3.2.3 Publication Database Definition

Subordinate to one of the Replication System Type nodes under a registered publication server, one or more publication database definitions can be created.

A publication database definition identifies a database whose tables and views are to be used in a publication. The identity information consists of the database server IP address, port number, a database user name and password, and the database identifier.

The publication server uses this information to connect to the publication database to create the replication system control schema and perform replications.

- In a single-master replication system, a publication database definition identifies the storage area of one or more publications, each of which is eventually associated with its own subscription in a master-to-slave relationship.
- In a multi-master replication system, each publication database definition subordinate to the MMR type node of a given publication server identifies a master node in a single, multi-master replication system.

**Note:** Currently, there can only be one multi-master replication system per publication server.

See Section 5.2.2 for creating a publication database definition for a single-master replication system and Sections 6.2.2 and 6.3 for a multi-master replication system.

#### 2.3.2.4 Publication

Subordinate to a publication database definition in a single-master replication system, one or more publications can be defined. A publication contains a list of tables and views that are to be replicated to a subscription database.

- In a single-master replication system, the database user name specified in the publication database definition of the publication’s parent, as viewed in the replication tree, must have the SELECT object privilege on any table or view that is to be included in the publication.
- In a multi-master replication system, one and only one publication can be defined. The publication contains the list of tables that are to be replicated and kept synchronized in the master nodes of the multi-master replication system. The database user name specified in the publication database definition of the publication’s parent must have superuser privileges and be the owner of all tables to be included in the publication.

See Section 5.2.3 for creating a publication for a single-master replication system and Section 6.2.3 for a multi-master replication system.

#### 2.3.2.5 Subscription Server

**Note:** The subscription server applies only to single-master replication systems. You do not register a subscription server when creating a multi-master replication system.

The first step in creating a subscription is to identify the subscription server that will manage the subscription. This process is called registering the subscription server.

Using the xDB Replication Console or the xDB Replication Server CLI, a subscription server is registered by providing the IP address and port number of the host on which the subscription server is running, along with the admin user name and password stored in the xDB Replication Configuration file located on the host running the subscription server. (This information is determined during the subscription server installation process.)

When viewed in the xDB Replication Console, a registered subscription server appears under the top-level Replication Servers node in the replication tree. All subscription-related logical components are created subordinate to a registered subscription server and appear underneath it in the replication tree.

See Section 5.3.1 for directions on registering a subscription server.

#### 2.3.2.6 Subscription Database Definition

**Note:** The subscription database definition applies only to single-master replication systems. You do not create a subscription database definition when creating a multi-master replication system.

Subordinate to a registered subscription server, one or more subscription database definitions can be created.

A subscription database definition identifies a database to which a publication’s tables and views are to be replicated. The identity information consists of the database server IP address, port number, a database user name and password, and the database identifier.

The subscription server uses this information to connect to the subscription database to create the table definitions. The publication server also uses this information to connect to the subscription database when performing replications.

See Section 5.3.2 for creating a subscription database definition.

#### 2.3.2.7 Subscription

**Note:** The subscription applies only to single-master replication systems. You do not create a subscription when creating a multi-master replication system.

Subordinate to a subscription database definition, one or more subscriptions can be defined. A subscription associates a publication with a subscription database to which the publication’s tables and views are to be replicated.

Each subscription can be associated with one and only one publication.

See Section 5.3.3 for creating a subscription.

### 2.3.3 xDB Replication System Examples

This section contains examples of replication systems and how the logical components are used to define them. The accompanying diagrams show the logical components, represented by nodes in the replication tree of the xDB Replication Console, superimposed on the physical components of the replication system.