# 十一、Docker 安全
概观
在本章中，我们将为您提供所需的信息，以确保您的容器是安全的，并且不会对使用运行在容器上的应用的人造成安全风险。您将使用特权和非特权容器，并了解为什么不应该在根用户下运行容器。本章将帮助您使用签名密钥验证映像是否来自可信来源。您还将为 Docker 映像设置安全扫描，确保您的映像可以安全使用和分发。您将与 AppArmor 合作，通过使用容器和 Linux 的安全计算模式(`seccomp`)来创建和使用带有 Docker 映像的`seccomp`配置文件，从而进一步保护容器。
# 简介
这一章试图解决一个可能有整本书专门讨论的问题。我们试图通过 Docker 教育您如何处理安全问题。前几章已经为您提供了使用 Docker 构建应用的坚实基础，这一章希望使用这些信息也为它们的运行提供安全稳定的容器。
Docker 和微服务架构允许我们从一个更安全、更健壮的环境开始管理我们的服务，但这并不意味着我们需要完全忘记安全性。本章详细介绍了我们在跨环境创建和维护服务时需要考虑的一些方面，以及您可以在工作系统中开始实现这些过程的方式。
Docker 安全不应该与您的常规 IT 安全流程分开，因为概念是相同的。Docker 有不同的方法来处理这些概念，但是一般来说，从 Docker 安全性开始的一个很好的地方如下:
*   **访问控制**:确保运行的容器不能被攻击者访问，并且权限也受到限制。
*   **更新和修补操作系统**:我们需要确保我们的映像使用的是可信来源。我们还需要能够扫描我们的映像，以确保任何引入的应用不会引入额外的漏洞。
*   **数据敏感度**:所有敏感信息应保持不可访问。这可能是密码、个人信息或您不想让任何人获得的任何其他数据。
在这一章中，我们将涵盖大量的信息，这些信息将涵盖前面的要点和更多内容。我们将首先考虑 Docker 容器在运行时可能具有的不同访问权限，以及如何开始限制它们可以执行的操作。然后，我们将更仔细地研究保护映像、使用签名密钥以及如何验证它们来自可信来源。我们还将练习根据已知漏洞扫描您的映像，以确保它们可以安全使用。本章的最后两部分将集中讨论如何使用 AppArmor 和`seccomp`安全配置文件来进一步限制运行容器的功能和访问权限。
注意
当在 Docker 映像中使用机密和密码时，Swarm 和 Kubernetes 等编排方法提供了安全的方法来存储您的机密，而无需将它们存储为明文配置供每个人访问。如果您没有使用这些编排方法之一，我们也将在下一章中提供一些关于如何在映像中使用机密的想法。
# 容器中的特权和根用户访问
提高容器安全性的一个重要方法是减少攻击者获得访问权限的可能性。攻击者可以在容器上运行的命令类型受限于在容器上运行进程的用户的访问级别。因此，如果在运行的容器上没有根权限或提升的权限，这就限制了攻击者的能力。另一件需要记住的事情是，如果一个容器被破坏并且作为根用户运行，这也可能允许攻击者逃离该容器并访问运行 Docker 的主机系统。
在容器上运行的大多数进程都是不需要 root 访问权限的应用，这与在服务器上运行进程是一样的，在服务器上，您也不会以 root 身份运行它们。运行在容器上的应用应该只能访问它们需要的内容。提供根访问的原因，特别是在基本映像中，是因为应用需要安装在容器上，但这应该只是一种临时措施，您的完整映像作为另一个用户运行。
为此，在创建我们的映像时，我们可以设置一个 Dockerfile，并创建一个用户来运行容器上的进程。下一行与在 Linux 命令行上设置用户相同，我们首先设置组，然后将用户分配到该组:
```
RUN addgroup --gid   && adduser  -h  --disabled-password --uid  --ingroup  
```
在前面的命令中，我们还使用了`adduser`选项来设置`home`目录并禁用登录密码。
注意
`addgroup`和`adduser`是特定于基于 Alpine 的映像的，它们是基于 Linux 的映像，但是使用不同于基于 Debian 的映像的包和实用程序。基于 Alpine 的映像之所以使用这些包，是因为它们选择了更轻量级的实用程序和应用。如果您使用的是基于 Ubuntu/Debian 或红帽的映像，您需要使用`useradd`和`groupadd`命令，以及这些命令的相关选项。
正如您将在接下来的练习中看到的，我们将切换到我们专门创建的用户，以创建我们将要运行的流程。您对组和用户的命名是可选的，但是许多用户更喜欢使用四位或五位数字，因为这不会向潜在攻击者突出显示该用户的任何进一步权限，并且通常是创建用户和组的标准做法。在我们的 Dockerfile 中，在我们创建流程之前，我们包含`USER`指令，并包含我们之前创建的用户的用户 ID:
```
USER 
```
在本章的这一部分，我们将介绍一个新的映像，并展示如果容器上的进程由根用户运行时可能出现的问题。我们还将向您展示容器中的根用户如何与底层主机上的根用户相同。然后，我们将更改我们的映像，以显示删除对容器上运行的进程的根访问的好处。
注意
请使用`touch`命令创建文件，使用`vim`命令使用 vim 编辑器处理文件。
## 练习 11.01:作为根用户运行容器
当我们与根用户一起运行容器进程时，可能会出现许多问题。本练习将演示特定的安全问题，例如更改访问权限、终止进程、更改域名系统，以及如何使您的映像和底层操作系统变得易受攻击。您将观察到，作为根用户，攻击者还可以使用`nmap`等工具扫描网络中的开放端口和网络目标。
您还将纠正这些问题，从而限制攻击者对正在运行的容器的操作:
1.  Create a new Dockerfile named `Dockerfile_original` with your favorite text editor and enter the following code into the file. All of the commands are currently being run as the root user in this step:
    ```
    1 FROM alpine
    2
    3 RUN apk update
    4 RUN apk add wget curl nmap libcap
    5
    6 RUN echo "#!/sh\n" > test_memory.sh
    7 RUN echo "cat /proc/meminfo; mpstat; pmap -x 1"     >> test_memory.sh
    8 RUN chmod 755 test_memory.sh
    9
    10 CMD ["sh", "test_memory.sh"]
    ```
    这将创建一个基本应用，运行一个名为`test_memory.sh`的小脚本，该脚本使用`meminfo`、`mpstat`和`pmap`命令来提供容器内存状态的详细信息。您还会注意到，在*第 4 行*上，我们正在安装一些额外的应用，以便使用`nmap`查看网络进程，并允许我们使用`libcap`库查看用户容器功能。
2.  Build the `security-app` image and run the image in the same step:
    ```
    docker build -t security-app . ; docker run –rm security-app
    ```
    输出大幅减少，您应该会看到映像构建，然后运行内存报告:
    ```
    MemTotal:        2036900 kB
    MemFree:         1243248 kB
    MemAvailable:    1576432 kB
    Buffers:          73240 kB
    …
    ```
3.  Use the `whoami` command to view the running user on the container:
    ```
    docker run --rm security-app whoami
    ```
    运行的用户是根用户，这并不奇怪:
    ```
    root
    ```
4.  Use the `capsh –print` command to see the processes that the user is able to run on the container. As the root user, you should have a large number of capabilities available:
    ```
    docker run --rm -it security-app capsh –print
    ```
    您会注意到用户有权更改文件的所有权(`cap_chown`)、终止进程(`cap_kill`)以及更改域名系统(`cap_net_bind_service`)等等。这些都是在运行环境中会导致许多问题的高级流程，容器不应该使用这些流程:
    ```
    Current: = cap_chown,cap_dac_override,cap_fowner,cap_fsetid,
    cap_kill,cap_setgid,cap_setuid,cap_setpcap,cap_net_bind_service,
    cap_net_raw,cap_sys_chroot,cap_mknod,cap_audit_write,
    cap_setfcap+eip
    groups=0(root),1(bin),2(daemon),3(sys),4(adm),6(disk),10(wheel),
    11(floppy),20(dialout),26(tape),27(video)
    ```
5.  As the root user, an attacker would also be able to use tools such as `nmap`, which we installed earlier, to scan the network for open ports and network targets. Run your container images again by passing the `nmap` command, looking for the opened `443` port under `localhost`:
    ```
    docker run --rm -it security-app sh -c 'nmap -sS -p 443 localhost'
    ```
    该命令的输出如下:
    ```
    Starting Nmap 7.70 ( https://nmap.org ) at 2019-11-13 02:40 UTC
    Nmap scan report for localhost (127.0.0.1)
    Host is up (0.000062s latency).
    Other addresses for localhost (not scanned): ::1
    PORT    STATE  SERVICE
    443/tcp closed https
    Nmap done: 1 IP address (1 host up) scanned in 0.27 seconds
    ```
    注意
    前面的`nmap`扫描没有找到任何开放的网络，但是它是一个提升的命令，不应该被任何用户运行。我们将在本练习的后面演示非根用户无法运行此命令。
6.  As previously mentioned, being the root user on your container is the same as being the root user on the underlying host. This can be demonstrated by mounting a file owned by the root onto the container. To do that, create a secret file. Echo your secret password into the `/tmp/secret.txt` file:
    ```
    echo "secret password" > /tmp/secret.txt
    ```
    更改所有权以确保根用户拥有它:
    ```
    sudo chown root /tmp/secret.txt
    ```
7.  Use the `docker run` command to mount the file on the running container and check whether you are able to access it and view the data in the file. The user on the container can access the file that the root user on the host system should only have access to:
    ```
    docker run -v /tmp/secret.txt:/tmp/secret.txt security-app sh -c 'cat /tmp/secret.txt'
    ```
    docker 运行命令的输出将是单词“`secret password`”
    ```
    secret password
    ```
    但是，Docker 容器应该不能公开这些信息。
8.  要开始对您的容器进行一些简单的更改以阻止这种访问再次发生，请再次打开 Dockerfile 并添加突出显示的代码(*第 6 行*、*第 7 行*、*第 8 行*和*第 9 行*，保持前几行代码不变。这几行代码将创建一个组`10001`和一个用户`20002`。用户将被设置一个`home`目录，然后您将进入该目录并开始使用*第 9 行* :
    ```
    1 FROM alpine
    2
    3 RUN apk update
    4 RUN apk add wget curl nmap libcap
    5
    6 RUN addgroup --gid 10001 20002 && adduser 20002 -h     /home/security_apps --disabled-password --uid 20002     --ingroup 20002
    7 WORKDIR /home/security_apps
    8
    9 USER 20002
    ```
    中的`USER`指令
9.  Make a change to *line 15* to make sure the script is being run from the new `security_app` directory, and then save the Dockerfile:
    ```
    11 RUN echo "#!/sh\n" > test_memory.sh
    12 RUN echo "cat /proc/meminfo; mpstat; pmap -x 1" >>     test_memory.sh
    13 RUN chmod 755 test_memory.sh
    14
    15 CMD ["sh", "/home/security_apps/test_memory.sh"]
    ```
    完整的 Dockerfile 应该如下所示:
    ```
    FROM alpine
    RUN apk update
    RUN apk add wget curl nmap libcap
    RUN addgroup --gid 10001 20002 && adduser 20002 -h   /home/security_apps --disabled-password --uid 20002     --ingroup 20002
    WORKDIR /home/security_apps
    USER 20002
    RUN echo "#!/sh\n" > test_memory.sh
    RUN echo "cat /proc/meminfo; mpstat; pmap -x 1" >>   test_memory.sh
    RUN chmod 755 test_memory.sh
    CMD ["sh", "/home/security_apps/test_memory.sh"]
    ```
10.  Build the image again and run it with the `whoami` command:
    ```
    docker build -t security-app . ; docker run --rm security-app whoami
    ```
    您将看到一个新用户为`20002`，而不是根用户:
    ```
    20002
    ```
11.  Previously, you were able to run `nmap` from the container. Verify whether the new user is stopped from accessing the `nmap` command now to scan for network vulnerabilities:
    ```
    docker run --rm -it security-app sh -c 'nmap -sS -p 443 localhost'
    ```
    通过使用`nmap -sS`命令再次运行您的映像，您现在应该被停止运行该命令，因为容器正在运行的`20002`用户没有足够的权限运行该命令:
    ```
    You requested a scan type which requires root privileges.
    QUITTING!