els by separate RDP sessions on virtual consoles—each vir-
tual console providing a full-screen GUI. Nitpicker could
make the user interaction with different classiﬁcation lev-
els more natural by integrating them into one desktop. Nit-
picker’s capability of tinting views of different classiﬁcation
levels with different colors and the ﬂoating-labels mecha-
nism provide a convenient way to distinguish different do-
mains.
Multi-server OSs such as EROS [21] deploy conﬁne-
ment to decompose OS functionality into small components
that can be evaluated independently. For EROS, there ex-
ists EWS [22] as GUI. In comparison to EWS, Nitpicker
provides the advantages of lower complexity and a higher
ﬂexibility for applications. Compatibility to EWS could be
maintained by executing EWS as client of Nitpicker. Dif-
ferent compartments could even use dedicated instances of
EWS. However, the biggest strength of Nitpicker—the sup-
port for legacy window systems as clients—remains largely
unused because EROS provides no means to execute legacy
software. Coyotos [2] as the successor of EROS will pro-
vide support for legacy software by a Linux emulation layer.
When Coyotos supports X11, Nitpicker would do well with
integrating X11-based legacy software with EWS windows.
4
Implementation
Without constraining the general applicability, we im-
plemented the presented design for one concrete platform
to prove its concept, observe its performance, and evaluate
the source-code complexity of an actual implementation.
The basis platform was provided by the L4/Fiasco [18,
19] microkernel that enables us to safely execute one or
multiple L4Linux kernel servers [17] along with native L4-
based applications at the same time. All L4 applications—
including L4Linux—are running in user mode and are ex-
ecuted within isolated protection domains. Communica-
tion between protection domains is performed by L4 inter-
process communication (IPC) only. For handling mouse
and keyboard input, we ported the input subsystem of the
GNU/Linux kernel version 2.6 to L4/Fiasco. We real-
ized the graphical output by using the VESA frame buffer
that is provided by the majority of modern graphics cards.
The used light-weight software graphics routines consist of
functions for drawing rectangles, blitting pixels, and ren-
dering text using a compiled-in font. The rectangle draw-
ing function is used for painting the view borders in X-ray
mode. The blitting function supports solid, dimmed, and
masked pixel transfer. The masked mode is used for the
mouse cursor that is implemented as a special view that
stays always on top.
To evaluate the support for legacy applications, we
ported two legacy window systems—DOpE and X11—to
Nitpicker (Figure 7). For porting DOpE, we added 160
lines of support code, including the replacement of DOpE’s
screen and input drivers and the propagation of window
placement information to corresponding views. For the sup-
port of X11, we implemented drivers for screen (400 LOC)
and input (250 LOC) as modules for XFree86 [10]. We
propagate window events from X11 to Nitpicker by using
a custom X11 client (200 LOC) that scans all windows and
registers itself as an event handler for window events at the
root window. We did not require changes of the X server
at all. X11 and DOpE client applications are executable in
this setup without modiﬁcation. Figure 7 displays Nitpicker
in X-ray mode with X11 and DOpE as clients. Note that the
translucency effect, which is implemented by DOpE does
not display X11 windows. DOpE has no access to data of
the X11 session and therefore, cannot incorporate X11 win-
dows for the computation of the translucency effect.
5 Evaluation
At the beginning of Section 2, we introduced low com-
plexity as ﬁrst-grade design goal. Our implementation of
Nitpicker consists of merely 1,500 human-written lines of
C code (LOC). This is only a fraction of EWS’s size (5,400
LOC) and an order of magnitude smaller than Trusted X
(30,000 LOC) and X11 (> 80,000 LOC without drivers).
The prime reason for the small complexity in relation to
EWS as the most comparable GUI server is the client-side
window handling. Thanks to this design decision, Nitpicker
does not need to implement the policy for rearranging win-
dows. This eases the internal logic, leads to further simpli-
ﬁcation of the drawing primitives, and enhances the ﬂexi-
Figure 7. Screenshot of Nitpicker.
bility of clients, which can implement GUI paradigms such
as cascaded menus without special support from Nitpicker
For example, the scroll-able menus of WindowMaker and
virtual desktops work with X11 on Nitpicker exactly in the
same way as on native X11.
An interesting side aspect regarding source-code com-
plexity is the considerable amount of generated code that
Nitpicker as well as EWS rely on when using IDL for de-
scribing the client interface. Whereas the client interface
description of Nitpicker consists of merely 50 lines of IDL
code, the generated stub code comprises about 1,000 lines
of C code. Comparing this number to the complexity of the
human-written code highlights the critical role of compilers
and tools for secure systems.
We estimated Nitpicker’s performance by comparing the
CPU demand of DOpE running as Nitpicker client against
native DOpE. In both scenarios, we stressed DOpE by dis-
playing four animations of the size of 320x240 pixels at a
rate of 25 frames per second while permanently generating
artiﬁcial redraw requests for another DOpE window. For
the tests, we used an Intel Celeron PC clocked at 900 MHz.
Nitpicker does not require additional copying of pixels. We
expected DOpE on Nitpicker to perform slightly worse than
native DOpE because of two additional context switches for
each redraw operation and a computational overhead for
traversing Nitpicker’s view stack. In X-ray mode, the ad-
ditional load raises up to 25 percent. This is caused by the
dimmed blitting function that is not optimized for perfor-
mance, yet. When switching to Flat mode, the additional
load drops to less than one percent. Although this is just
a showcase, the observed low overhead matches our prece-
dent estimations and indicates the feasibility of Nitpicker’s
design with regard to output performance.
Figure 8. Application scenario.
5.1 Application scenario
For highlighting the beneﬁt of Nitpicker in conjunction
with widely used commodity applications, let us present an
application scenario.
Mail readers such as Mozilla Thunderbird are popular
because of their rich features (e. g., spam ﬁltering, powerful
searching functions) and good usability. This convenience
comes at the cost of an enormous complexity of the appli-
cation and the needed OS support. With regard to the con-
ﬁdentiality of private keys for signing emails, such appli-
cations are a nightmare. For the concrete example of us-
ing Mozilla Thunderbird on the GNU/Linux platform, the
complexity of the Linux kernel, the privileged daemon pro-
cesses, the X window system, Mozilla Thunderbird and
concurrently running user processes of the same user ac-
cumulate to millions of lines of code that potentially put the
secrets of the user at risk.
In fact, only a small fraction of this code—the GNU Pri-
vacy Guard (GnuPG) [4]—actually needs the private keys
for operation. We ported GnuPG to the L4 platform, cre-
ating L4GnuPG, and complemented it with a trusted text
viewer. We interfaced L4GnuPG with Thunderbird by cre-
ating a L4Linux proxy process that redirects Thunderbird’s
calls of GnuPG to L4GnuPG. L4GnuPG uses DOpE as
its widget set, which is running within an isolated address
space. In this scenario, L4GnuPG is the only process in the
whole system that can access the conﬁdential signing key
of the user. Figure 8 presents an overview about the compo-
nents of this scenario. When the user activates the signing
function of Thunderbird, our L4Linux proxy process trans-
fers the email to L4GnuPG. L4GnuPG presents this email
in a DOpE window that is displayed within a correspond-
ing view of Nitpicker. The user can now decide to sign
the email or cancel the operation. If he decides to sign the
email, L4GnuPG requests a pass-phrase, signs the email and
transfers the result to Thunderbird via the L4Linux proxy
Figure 9. Orphaned area on screen.
process.
In the presented scenario, the conﬁdentiality of the sign-
ing key depends on only 105,000 LOC including L4/Fiasco
(15,000 LOC),
trusted L4 services (35,000 LOC) and
L4GnuPG (55,000 LOC). The isolation of the legacy X11
window system and the GUI of the trusted application de-
pends only on the L4/Fiasco kernel and Nitpicker (1,500
LOC). We obtain the powerful features and great usabil-
ity of a commodity application while extremely minimaliz-
ing the trusted computing base (TCB) of a security-sensitive
function with regard to its GUI. The scenario underlines the
biggest strengths of Nitpicker: low complexity and the sup-
port of legacy graphical user interfaces.
5.2 Current limitations
After presenting the strengths of Nitpicker, we review
the limits of our current implementation.
Nitpicker attaches exactly one label to each view. There
are view layouts that leave orphaned areas unlabeled on
screen (Figure 9). Although the dimming technique in
X-ray mode prevents confusion about the focused view, a
shading policy as described in [12] could be deployed to
encounter such cases by blanking out orphaned areas. This
will be implemented in a future version.
Nitpicker performs graphical output via software graph-
ics routines. Making hardware-accelerated graphics usable
by Nitpicker and untrusted clients at the same time is a chal-
lenging problem and will be an object of our future work.
6 Related work
This section complements Section 3 with related work
about techniques and approaches that inspired the design of
Nitpicker.
J. Epstein addressed the problem of expressive and
unique labeling of windows for the Trusted X11 in [12].
Beside estimating different labeling techniques for mark-
ing classiﬁed information, he introduces a technique to de-
tect and blank out orphaned window areas. The dimming
of non-focused windows was inspired by Apple’s Exposé
feature in Mac OS X. J. Shapiro described the dimming
NitpickerDOpEL4LinuxMozillaThunderbirdX Window SystemGnuPG ProxyL4GnuPGVideo DeviceInput DevicesHardwareTrustedcomputingbaseMozillaTerminalorphaned areaTerminalMozillaTerminalMozillaof unfocused windows for EWS in [22]. Apple Quartz is
an existing implementation of client-side window handling.
It is used for integrating X11 with the Aqua GUI of Mac
OS X. The X server, provided by Apple, enables the use
of any legacy window manager (e. g., WindowMaker) for
managing the X windows. Apple signiﬁcantly changed the
XFree86 source base. Each X window is rendered into a
dedicated pixel buffer. In contrast, we did not change the X
server at all and use only one buffer for all X windows.
References
[1] Apple Mac OS X website. URL:
http://www.apple.com/macosx/.
[2] Coyotos website. URL:
http://www.coyotos.org.
[3] Fresco website. URL:
http://www.fresco.org.
[4] GNU Privacy Guard website. URL:
http://www.gnupg.org.
[5] Intel Vanderpool technology website. URL:
7 Conclusion
With the work described in this paper, we hope to ad-
vance the discussion of GUI-related security mechanisms of
operating systems a step further. With Nitpicker, we min-
imized the complexity of the security-sensitive GUI server
to only 1,500 lines of C code by consequently moving non-
security-related functionality from the GUI server to the
clients. The achieved low complexity is only a fraction of
existing approaches.
When running on a host OS that provides isolated protec-
tion domains, Nitpicker maintains the isolation of its clients
to prevent applications from spying at each other by ex-
ploiting GUI server functionality. In contrast to todays GUI
servers, which expose user input to any application, Nit-
picker protects the user from spyware by routing user in-
put to exactly one focused client at a time. Provided an
OS that supports secure booting and client authentication,
Nitpicker enables the user to clearly identify each client ap-
plication via a combination of dimming and labeling tech-
niques while preserving a high ﬂexibility of client GUIs.
This enables the user to identify and disarm Trojan Horses.
Thanks to the extremely low complexity and the deployed
resource management, Nitpicker is robust against denial-of-
service attacks driven by client applications and thus, can
guarantee the service of sensitive client applications with re-
gard to their GUI. At that time, we facilitate the support for
existing legacy applications using the ﬂexible buffers and
views technique. This enables the further use of commodity
window systems and their application alongside the safe ex-
ecution of low-complexity security-sensitive applications.
Our implementation proves the feasibility of the pre-
sented design. We frequently use our custom software stack
for public talks and lectures. At publishing time of this pa-
per, the implementation of Nitpicker will be publicly avail-
able under the terms of the GNU General Public License.
We thank Jonathan S. Shapiro for sharpening our minds
with regard to (more or less) covered channels and resource
management. Furthermore, we want to thank Alexander
Warg for the valuable and frequent discussions during the
design of Nitpicker.
http://www.intel.com/technology/
computing/vptech/.
[6] Microsoft’s Virtualization Architecture.
TWAR05013 at
WinHEC 2005.
[7] NGSCB presentation at WinHEC 2004. URL:
http://download.microsoft.com/download/1/
8/f/18f8cee2-0b64-41f2-893d-a6f2295b40c8/
TW04008_WINHEC2004.ppt.
[8] SINAvpn website. URL:
http://www.sinavpn.com.
[9] VMware website. URL:
http://www.vmware.com.
[10] XFree86 website. URL:
http://www.xfree86.org.
[11] P. Barham, B. Dragovic, K. Fraser, S. Hand, T. Harris, A. Ho,
R. Neugebauer, I. Pratt, and A. Warﬁeld. Xen and the Art of
Virtualization. In Proceedings of the 19th ACM Symposium
on Operating System Principles (SOSP), Oct. 2003.
[12] J. Epstein. A prototype for Trusted X labeling policies. In
Proceedings of the 6. Annual Computer Security Applications
Conference, Dec. 1990.
[13] J. Epstein, J. McHugh, H. Orman, R. Pascale, A. Marmor-
Squires, and B. D. et al. A high assurance window system
prototype.
[14] N. Feske and H. Härtig. Demonstration of DOpE — a Win-
dow Server for Real-Time and Embedded Systems. In 24th
IEEE Real-Time Systems Symposium (RTSS), pages 74–77,
Cancun, Mexico, Dec. 2003.
[15] N. Feske and C. Helmuth. Overlay window management:
User interaction with multiple security domains. Technical
Report TUD-FI04-02-März-2004, TU Dresden, 2004.
[16] K. Fraser, S. Hand, I. Pratt, and A. Warﬁeld. Safe Hardware
Access with the Xen Virtual Machine Monitor. In Proceed-
ings of the 1st Workshop on Operating System and Architec-
tural Support for the on demand IT InfraStructure (OASIS
2004), Boston, MA, Oct. 2004.
[17] H. Härtig, M. Hohmuth, and J. Wolter. Taming Linux. In
Proceedings of the 5th Annual Australasian Conference on
Parallel And Real-Time Systems (PART ’98), Adelaide, Aus-
tralia, Sept. 1998.
[18] M. Hohmuth. The Fiasco kernel: System architecture. Tech-
nical Report TUD-FI02-06-Juli-2002, TU Dresden, 2002.
[19] J. Liedtke. L4 reference manual. Technical report, Sept.
1996. RC 20549, IBM T. J. Watson Research Center.
[20] M. Peinado, P. England, and Y. Chen. An Overview of
NGSCB.
[21] J. S. Shapiro. EROS: A Capability System. PhD thesis, Uni-
versity of Pennsylvania, Apr. 1999.
[22] J. S. Shapiro, J. Vanderburgh, E. Northup, and D. Chizmadia.
Design of the EROS Trusted Window System. In Proceed-
ings of the 13th USENIX Security Symposium (2004), pages
165–178, 2004.