                     right_index += 1; 
                 } 
                 k += 1; 
             } 
             while left_index (list: &[T], index: isize) -> *const T {
        let list_offset = list.as_ptr();
        list_offset.offset(index)
    }
Bug 复现：
    use algorithmica::sort::merge_sort::sort;
    fn main() {
        let mut arr = vec![
            String::from("Hello"),
            String::from("World"),
            String::from("Rust"),
        ];
        // Calling `merge_sort::sort` on an array of `T: Drop` triggers double drop
        algorithmica::sort::merge_sort::sort(&mut arr);
        dbg!(arr);
    }
输出：
    free(): double free detected in tcache 2
    Terminated with signal 6 (SIGABRT)
该 Bug 还未得到修复。
此问题给我们的启示：不要为了刷题而忽略安全。
## RUSTSEC-2021-0068: iced x86 版本中 不合理（Soundness） 的问题
### 漏洞描述：
  * 漏洞类型：Vulnerability
  * 漏洞分类：soundness
  * CVE 编号：无
  * 详细： **** [12]
  * 补丁：`>1.10.3`
### 漏洞分析
iced 用户在使用 miri 编译其项目时，发现 UB:
    error: Undefined Behavior: memory access failed: pointer must be in-bounds at offset 4, but is outside bounds of alloc90797 which has size 3
        --> C:\Users\lander\.rustup\toolchains\nightly-x86_64-pc-windows-msvc\lib\rustlib\src\rust\library\core\src\slice\mod.rs:365:18
         |
    365  |         unsafe { &*index.get_unchecked(self) }
         |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^ memory access failed: pointer must be in-bounds at offset 4, but is outside bounds of alloc90797 which has size 3
         |
         = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior
         = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information
         = note: inside `core::slice::::get_unchecked::` at C:\Users\lander\.rustup\toolchains\nightly-x86_64-pc-windows-msvc\lib\rustlib\src\rust\library\core\src\slice\mod.rs:365:18
         = note: inside `iced_x86::Decoder::new` at C:\Users\lander\.cargo\registry\src\github.com-1ecc6299db9ec823\iced-x86-1.9.1\src\decoder\mod.rs:457:42
    note: inside `Emulator::run` at src\lib.rs:563:27
        --> src\lib.rs:563:27
         |
    563  |         let mut decoder = Decoder::new(self.bitness, bytes, self.decoder_options);
该用户在使用 `Decoder::new` 的时候出现了 UB。在 iced相关源码中，即
`iced/src/rust/iced-x86/src/decoder.rs` 中，存在
    let data_ptr_end: *const u8 = unsafe { 
        data.get_unchecked(data.len()) 
    }; 
根据 **标准库文档** [13]描述：
> Calling this method with an out-of-bounds index is undefined behavior even
> if the resulting reference is not used.使用 界外索引调用该方法就是
> 未定义行为（UB），即便这个结果的引用没有被使用。
示例：
    let x = &[1, 2, 4];
    unsafe {
        assert_eq!(x.get_unchecked(1), &2);
        assert_eq!(x.get_unchecked(3), &2); // UB
    }
该代码已经被修复为，不再使用 get_unchecked ：
    let data_ptr_end = data.as_ptr() as usize + data.len();
### RUSTSEC-2021-0037：Diesel 库的 Sqlite 后端 UAF(use-after-free) bug
### 漏洞描述：
  * 漏洞类型：Vulnerability
  * 漏洞分类：memory-corruption
  * CVE 编号：CVE-2021-28305
  * 详细： **** [14]
  * 补丁：`>=1.4.6`
### 漏洞分析
Diesel 的 sqlite 后端使用了 libsqlite3_sys 这个库来调用 sqlite
提供的sql函数。比如`sqlite3_finalize` 和 `sqlite3_step` 之类。
> sqlite 函数执行调用过程：
>
>   * sqlite3_open()
>   * sqlite3_prepare()
>   * sqlite3_step() // 用于执行有前面sqlite3_prepare创建的 预编译语句
>   * sqlite3_column() // 从执行sqlite3_step()执行一个预编译语句得到的结果集的当前行中返回一个列
>   * sqlite3_finalize() // 销毁前面被sqlite3_prepare创建的预编译语句
>   * sqlite3_close()
>
Diesel 的 by_name 查询通用做法是将预编译语句的所有字段名称保存为字符串切片以备以后使用。
但是sqlite的行为是：
  * 返回的字符串指针一直有效，直到准备好的语句被 `sqlite3_finalize()` 销毁，
  * 或者直到第一次调用 `sqlite3_step()` 为特定运行自动重新预编译该语句，
  * 或者直到下一次调用 `sqlite3_column_name()` 或 `sqlite3_column_name16()` 在同一列。
在之前版本的 Diesel 中，没有注意到这种情况，在调用 `sqlite3_step()`
之后，因为重新预编译语句，导致之前字符串切片指针就无效了。就造成 UAF 的情况。
这个案例告诉我们，在使用 FFi 的时候，要注意绑定sys库 的相关行为。这个在 Rust 编译器这边是无法检查发现的，案例应该属于逻辑 Bug。
## 参考资料
[1]`RustSecurity` 安全数据库库: __
[2]https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-hpqh-2wqx-7qp5:
__
[3]https://cfallin.org/blog/2021/03/15/cranelift-isel-3/:
__
[4]https://github.com/bytecodealliance/wasmtime/pull/2919/files:
__
[5]https://github.com/bytecodealliance/wasmtime/security/advisories/GHSA-hpqh-2wqx-7qp5:
__
[6]https://github.com/djkoloski/rkyv/issues/113:
__
[7]https://github.com/djkoloski/rkyv/commit/9c65ae9c2c67dd949b5c3aba9b8eba6da802ab7e:
__
[8]https://github.com/zeta12ti/parse_duration/issues/21:
__
[9]https://github.com/AbrarNitk/algorithmica/issues/1:
__
[10]algorithmica: __
[11]https://www.fifthtry.com/abrar/rust-algorithms/:
__
[12]https://github.com/icedland/iced/issues/168:
__
[13]标准库文档:
[14]https://github.com/diesel-rs/diesel/pull/2663:
__
* * *