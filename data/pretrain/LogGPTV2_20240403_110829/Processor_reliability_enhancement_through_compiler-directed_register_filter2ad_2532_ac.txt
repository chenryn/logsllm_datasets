Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 09:58:58 UTC from IEEE Xplore.  Restrictions apply. 
1(      )t10ra, a5−1(t10)a5loop0x1,2(      )t10t8R1t9R2a5R3t8R4t10loop:ldbuaddlldastbxort10,a5,t8,t9,t9,t9,movt9,bne1.2.3.4.5.6.7.8.stba5,Code fragmentStatic name adjustmentmovmovR3,R4,R5,movloop:movldbuaddlldastbxorR1,R2,R3,R4,R1,R1,R1,loop:movldbuaddlldastbxorR7,R1,R2,R3,R7,R7,R7,stbR1,bne.sbne.sregister namesiter 1iter 2If taken, shufflevariablesInitialize live−ina5−1(R4)ra, R2loopR3R51(      )0x1,R4R52(      )loop1(      )0x1,R2R4R3R4−1(R3)ra, R1t8t102(      )8(sp)8(sp)Fig.3.Registernameadjustmentintwoconsecutiveiterationscanbedeterminedaccordingly.Sincethemappingofalogicalregistervariesacrossiterations,readaccessesbeforeandaftertheﬁrstassignmentwithintheloopbodyshouldbedirectedtodistinctphysicalregisters.Speciﬁcally,allthereadaccessesfollowingtheﬁrstwriteoperation,asitremapsthelogicalregister,shouldbedirectedtothenewallocatedphysicalregister.Incontrast,allthereadaccessesprecedingtheﬁrstwriteoperationshouldobtainthevalueproducedattheprioriteration,thusrequiringthecompilertoadditionallyshufﬂetheregisternamebyO(cid:2).Theaforementionednameadjustmentofsourceregisterscanbeillustratedmoreclearlybyconsideringthelogicalregistera5inthebzip2looppresentedinFigure2a.AsshownintheﬁrstcolumnofTableI,thenameofa5isadjustedtoB1O(cid:2)bythecompiler.Sincea5isremappedbyinstruction2,allthesubsequentreadaccessestoa5withintheloopbodyshouldbedirectedtoB1O(cid:2).Ontheotherhand,instruction1,whichreadsa5beforeitisremapped,shouldobtainthevalueproducedattheprioriterationwhereinthenameofa5isnotB1O(cid:2)butB2O(cid:2).Accordingly,thecompilershouldadjustthenameofa5appearingininstruction1byanadditionalamountofO(cid:2)soastopreservethisloop-carrieddependence.AnadditionalshufﬂeofO(cid:2)tothenamesofthelive-invari-ablesallowsregistervaluestobeeffectivelypassedacrossloopboundariesduringexecution.Therefore,semanticcorrectnesscanbenaturallyguaranteedaslongaslive-invariables,suchasa5,t8andt10inthebzip2loop,arecorrectlyinitializedpriortoenteringtheloop.Thistaskcanbeattainedsimplythroughtheinsertionofextramoveinstructionstotransferregistervaluespriortoenteringtheloop.Thesefewregistermoveinstructions,astheyareexecutedquiterarelyoutsidetheloopbody,introducenooverheadinpractice,neitherintermsofperformancenorintermsofenergy.Toconcretelyillustratetheaforementionednameadjustmentpolicyfordestinationandsourceregisters,ithasbeenappliedtoanon-unrolledversionofthebzip2looppresentedinFigure3.UsingthemoduloadditioninTableIastheshufﬂefunction,Figure3presentstheregisternamesintheﬁrsttwoiterationsofthetransformedcode.Ascanbeseen,thecompilerhasgloballyadjustedregisternamesaccordingtotheorderinwhich(a) ShiftableB1B2B3read R1(b) ShiftableB1B2B3(c) ShiftableB1B2B3B1B2B3(d) Not shiftablewrite R1read R1read R1read R1write R1write R1write R1write R1write R1Fig.4.ShiftabilityanalysisofregisterR1theyappearasdestinations.ThenamesofadjacentyetdistinctregisterdestinationsdifferbyanoffsetofO(cid:2)=−1,whileanextraoffsetofO(cid:2)isaddedtoeachlive-inreadreferenceshownininstructions1,2,3,and4.Meanwhile,ahintisinsertedintoinstruction7,theloopbranch,sothatoncethebranchistaken,eachregistername,exceptfortheread-onlyregisterra,willbeshiftedbyanadditionaloffsetofO=1.Finally,threeregistermovinstructionshavebeeninsertedpriortoenteringtheloopsoastoinitializethelive-inregistersa5,t8,andt10,respectively.D.ShiftablelogicalregisteridentiﬁcationTheproposedregistershufﬂingschemerequiresadetailedexaminationofregisteraccesspatternssoastodeterminewhetheralogicalregisteraccessedwithintheloopbodyisshiftableornot.Ingeneral,thecharacteristicsoftheproposedregistershufﬂingschemeprecludeitsapplicationtotwotypesoflogicalregisters.Firstly,asalogicalregisterisremappedupontheﬁrstassignment,read-onlyregisters,suchasrainthebzip2example,becomeunshiftable.Amorecomplexcaseisthatofregistersexhibitingconditionaldeﬁnitionswithintheloopbody;asthecompilerneedstoidentifyforeachreadaccesstheexactiterationatwhichthevalueisproduced,alogicalregistercannotbeshufﬂedifitsvalueisnotcertiﬁablyupdatedateachloopiteration,thatis,ifitexhibitswriteaccessesonlyinconditionallyexecutedbasicblocksbutreadaccessesoutsidethoseblocks.Conditionallydeﬁnedregisterscreateanissueofnondeter-ministicloop-carrieddependences,whichcanbeillustratedmoreclearlythroughexaminingthefourcasespresentedinFigure4.ThesefourcasessharethesamecontrolﬂowyetexhibitavarietyofaccesspatternstoregisterR1withintheloopbody.InFigure4a,thewriteaccessinbasicblockB2constitutesaconditionaldeﬁnition.However,R1isstillshiftablesinceitisreadwithinthesamebasicblockfollowingsuchawriteaccess,thusallowingidenticalregisternamestobeassignedtobothaccesses.InFigure4b,R1isalsoshiftableasthewriteaccessinB1constitutesanunconditionaldeﬁnition,thusindicatingthatthereadaccessinB1shouldalwaysobtainthevaluedeﬁnedintheprecedingiteration.Similarly,inFigure4c,whileneitherofthewriteaccessesinB2andB3isguaranteedtobeexecuted,thetwoaccessesinconjunctionconstituteanunconditionaldeﬁnition,thusmakingR1shiftable.Incomparison,inFigure4d,R1isonlywrittenonthefall-throughpathofthebranch,resultinginthereadaccess978-1-4244-4421-2/09/$25.00 c(cid:13)2009 IEEE
473
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 09:58:58 UTC from IEEE Xplore.  Restrictions apply. 
TABLEIIACCESSPATTERN-BASEDREGISTERCLASSIFICATIONShiftableUnconditionallywrittenConditionallywrittenandreadonthesamepathUnshiftableRead-onlyConditionallywrittenyetunconditionallyreadFreeNot-accessed,eitherdeadorliveinB1obtainingavaluedeﬁnedineithertheprecedingiterationoranevenearlieriteration,dependingonthebranchoutcome.Asaresult,forsuchareadaccessinB1,thecompilercannotstaticallydeterminetheexactiterationatwhichthevalueisproduced,resultinginR1beingunshiftable.Anunshiftablelogicalregisterdoesnotneedtoberemapped,ifitisnotaccessedfrequentlywithintheloopbody.However,intheextremecaseofanunshiftableregisterbeingfrequentlyaccessed,twoapproachescanbeadoptedtopreventlocalheatbuildup.Inahardware-orientedapproach,thevalueofsucharegistercanbeduplicatedintoadedicatedbufferforaccess,insteadofthepower-hungryregisterﬁle.Inasoftware-orientedapproach,anextramoveinstructioncanbeinsertedwithintheloopbodytomakeitshiftable.Ifthisregisterhappenstobeaconditionallydeﬁnedregister(forexample,R1inFigure4d),suchamoveinstructioncanbeinsertedintothebasicblockexecutedontheotherpathofthebranch(B3inFigure4d).If,ontheotherhand,thefrequentlyaccessedyetunshiftableregisterhappenstobearead-onlyregister,theextramoveinstructionneedstobeinsertedintoanunconditionallyexecutedbasicblock.E.PhysicalregisterreallocabilityanalysisTheexamplepresentedinSectionIV-Aindicatesthatthepro-poseddeterministicshufﬂingapproachrequirestheexistenceofatleastonefreeextraregister,suchast12inFigure2c,fortheshufﬂeoftheﬁrstdestinationwithintheloopbody.Asmostexecutionhotspotsarecomposedofnestedloopsconsistingofonlyalimitednumberofinstructions,therequirementofonefreeregistercanbenaturallysatisﬁedsincetypicallyonlyasubsetofregistersisaccessedduringloopexecution.Thebzip2examplepresentedinFigure2aclearlyconﬁrmsthispropertyinthatonly6outofthetotal32registersareaccessedwithintheloopbody.Whiletheoreticallytheshufﬂewindowonlyneedstoincludeoneextrafreeregisterinadditiontotheshiftabledestinationregisters,thesearchforanincreasinglybalancedregisteraccessdistributionmotivatesthemaximizationofthenumberoffreeregisterswithintheshufﬂewindow.Adetailedexaminationindicatesthataccordingtotheaccesspattern,allthelogicalregistersandhence,thecorrespondingphysicalregisters,canbeclassiﬁedintothreecategories:shiftable,unshiftable,andnot-accessed.Forthethirdtype,aphysicalregisternotaccessedwithintheloopbodycanbedirectlyremapped,ifitisnotusedtoholdalivevariablewithinﬁnitelifetimeacrosstheexecutionofthewholeloop.Asanexample,inthebzip2loopallthenot-accessedregistersexceptforsparefreeforremapping.Registersp,ontheotherhand,holdsitslifetimeacrossthewholeloopasitisdirectlyreadafterexitingtheloop.However,eventhistypeofnot-accessedyetliveregisterscanbefreedupthroughLoop exitLoop bodyLoop entryInitializeValue swappingRestoreValue reswappingFig.5.Buildingashufﬂewindowthroughswappingregistervaluesatloopentryandexitemployingextrastoreandloadinstructionstocheckpointandrestoretheoriginalvalueatloopentriesandexits,respectively.Theintroducedperformanceoverheadispracticallynonexistentsincethischeckpointingandrestorationprocessisperformedoutsidetheloopexecution.Bycheckpointingandrestoringliveyetnot-accessedregistervalues,alltheregistersthatarenotaccessedwithintheloopbodybecomeavailableforremapping.Accordingly,amongthethreeclassesofregisterslistedinTableII,boththeshiftableandthefreeregistersareincludedintheshufﬂewindow,whileonlytheunshiftableregistersneedtobeplacedoutsidetheshufﬂewindow.Thesizeoftheshufﬂewindowthereforecanbemaximized,thusenablingtheachievementofamorebalancedaccessdistributionand,hence,afurtherreductioninpeaktemperature.Theidentiﬁedshiftableandfreeregistersmayscatteracrosstheentireregisterﬁle.Astheshufﬂewindowshouldbecomposedofasetofcontiguousregisters,attheentryandtheexitofeachfrequentlyexecutedloop,someregistervaluesneedtobeswappedsothattheidentiﬁedshiftableandfreeregisterscanbeplacedatcontiguouspositions.ThisprocessisconcretelypresentedinFigure5.Attheloopentrythelive-inregistervaluesneedtobepreserved,implyingthatunshiftableregisterswithintheshufﬂewindowneedtobeswappedout,whileshiftableyetlive-inregistersoutsidethewindowneedtobeswappedin.Ontheotherhand,attheloopexit,aregisterre-swappingprocessneedstobeperformedtopreservethelive-outregistervalues,bothwithinandoutsidetheshufﬂewindow.Boththeregisterswappingandreswappingprocessesareaccomplishedbythecompilerthroughtheinsertionofextramoveinstructionswhich,astheyareexecutedoutsidetheloopbody,introducenooverheadinpractice.F.FunctionalEvaluationWehavediscussedtheproposeddeterministicregistershuf-ﬂingtechniquefromthreevantagepoints,namely,thedynamicshufﬂingfunctions,theadjustmentoflogicregisternames,aswellastheidentiﬁcationoftheshiftableandfreeregisters.Sincetheproposedtechniqueonlyremapsregisternamesacrossloopiterations,itcanbeindependentlyappliedoneachexecutionhotspot,i.e.,afrequentlyexecutedloop.Duetotheiterativenatureandtherelativelyshortstaticcodesizeofeachloop,theproposedtechniquedeliversmaximumbeneﬁtatminimalcost,asonly10%ofthecodeneedstobeanalyzed978-1-4244-4421-2/09/$25.00 c(cid:13)2009 IEEE
474
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 09:58:58 UTC from IEEE Xplore.  Restrictions apply. 
whilebalancedregisteraccessesfor90%ofexecutiontimecanbeaccomplished.Comparedtothethermal-awareregisterreassignmentap-proaches[20],[18],theproposeddeterministicregistershuf-ﬂingtechniquerequiresnorevisitationoftheNP-hardregisterallocationproblemtoperformliverangereassignment.There-fore,theadjustmentoflogicregisternamescanbeimplementedasaproceduretobeperformedsubsequenttotheconventionalregisterallocationphase,thusretainingalltheconcomitantbeneﬁtsofthelatter.Moreover,adetailedexaminationindicatesthatneitherofthetwotechniquescanfullybalancetheaccessestoeachindividualregisterateachloopiteration.Instead,bothtechniquesattainarelativelycoarse-grainedaccessbalance,yetoneexploitsthespatialdomainwhiletheotherexploitsthetemporaldomain.Thethermal-awareregisterreassignmentapproachesattainaspatialbalanceatthegranularityofregistersub-banks,thusrestrictingtheirapplicabilitysolelytomulti-bankregisterﬁles.Incontrast,theproposedtechniqueaimstoattainatemporalbalanceforeachindividualregisteratthegranularityofloopiterations.Astemperaturetakesatleast0.1millioncyclestoriseby0.1°C[6],thisiterativelybalancedaccessactivitythusenablesaneffectivereductionofpeaktemperatureevenforsingle-bankregisterﬁles.Astheproposedtechniquedeterministicallyshufﬂesregistermappingacrossiterations,theattainablebeneﬁtsintermsofreliabilityenhancementaremaximizedwhenitisappliedtosingleprocessorarchitectureswithnoexplicitregisterrenamingsupport.Forarchitectureswithpuredynamicregisterrenaming,suchasconventionalsuperscalarprocessors,alargehardwaremappingtableneedstobemaintainedsoastoeliminatepseudoregisternamedependences.Asthismappingtableneedstobeaccessedusinglogicalregisternamesatafrequencynolowerthanthatofregisterﬁleaccesses,itbecomesatemperature“hotspot”withskewedaccessdistribution.Inthiscase,theproposedtechniquecanbeemployedtoevenlydistributetheaccessestodifferententrieswithinthemappingtable.Additionally,futurecomputersystemsareexpectedtointen-sivelyusemulticorearchitectures,forwhichthermalinducedreliabilityaspectshavealreadybeenidentiﬁedasagrandchallenge.Assuchsystemstypicallyscaleupwardsinthenumberofcoresbutnotnecessarilyinthecomplexityofeachcore,theproposedtechniquedespitethepossibleabsenceoftherenaminglogic,canbeemployedtoeffectivelyreducetheregisterﬁlepeaktemperatureforeachcoreandhence,toimprovethereliabilityoftheentiresystem.V.IMPLEMENTATIONTheimplementationoftheproposeddeterministicregistershufﬂingtechniqueconsistsoftwocollaborativeparts,acom-pilationprocedurethatembedsregularityintostaticregisternames,aswellasahardwareimplementationofashufﬂingfunctionthatdynamicallydeterminesthenameofaregisterateachiteration.A.StaticregisternameadjustmentThepseudo-codeforadjustinglogicregisternamesisout-linedinAlgorithm1.Thisprocedureonlyreliesontheproﬁlinginformationregardingtheexecutioncountsofeachbasicblock,Algorithm1RegisterNameAdjustment1:foreachproceduredo2:foreachfrequentlyexecutedloopdo3:Differentiateshiftableandunshiftableregisters;4:CalculateAveAccessCnt;5:ifAccessCnt(Rj)>AveAccessCntforaunshiftableRjthen6:InsertanextramovtomakeRjshiftable;7:endif8:Insertextrastoreandloadtofreeupnot-accessedyetliveregisters;9:T=Ntotal−Nunshiftable,andselectBandOthereafter;10:Ordertheshiftabledestinationregisters;11:GloballyadjustregisternamessuchthatthestaticnameofthekthregisterSN(Rk)=BkO(cid:2);12:Shufﬂethenameofeachlive-invariablebyanextraoffsetO(cid:3);13:Insertahintintheloopbranch;14:Insertextramovtoinitializelive-invariablesatloopentryandrestorelive-outvariablesatloopexit;15:endfor16:Globallyperformregistercoalescingoutsidetherenamedloopstoeliminateredundantmovinstructions;17:endforbasedonwhichasetoffunctionshavebeendevelopedtoaccomplishstaticregisternameadjustment.Speciﬁcally,eachfrequentlyexecutedloopistransformedinthefollowing5steps:•Partitionshiftableandunshiftableregisters(lines3-7);•Freeupnot-accessedyetliveregisters(line8);•Determineshufﬂefunctions(line9);•Sequentiallyadjustnamesofdestinationandsourcereg-isters(lines10-13);•Initializelive-invariablesandrestorelive-outvariablesatloopentryandloopexit,respectively(line14);Asthegoaloftheregistershufﬂingtechniqueistoprecludelocalheatbuildupthroughiterativemappingofahotlogicalregistertodistinctphysicalregisters,thealgorithminsertsextramoveinstructionstoshufﬂeafrequentlyaccessedregister(line6),ifitisdetectedtobeunshiftable(line5).Thesemovein-structions,togetherwiththestoreandloadinstructionsinsertedforfreeingupnot-accessedyetliveregisters(line8)andthemoveinstructionsinsertedforlive-inorlive-outvariables(line14),constitutetheoverheadoftheproposedtechnique.Asmostoftheseextrainstructionsareexecutedoutsidetheloopbody,theoverheadinexecutiontimeisnegligible.Suchoverheadcanbefurtherreducedthroughperforminganextrastepofregistercoalescing[22]onthetransformedcode(line16)soastoeliminateredundantmoveinstructions.B.DynamicregisternameshufﬂingUsingthecodetransformationsupportoutlinedinAlgorithm1,adeterministicregistershufﬂingprocesscanbeaccom-plishedduringexecution,aslongasthehardwareisinformedbythecompilerabouttheshufﬂevector,,priortoenteringafrequentlyexecutedloop.UsingtheGF(23)multiplicationinTableIastheshufﬂefunctionwhereinthevector=,thecircuitpresentedinFigure6canbeemployedtoconvert978-1-4244-4421-2/09/$25.00 c(cid:13)2009 IEEE
475