2 BACKGROUND
2.1 Pseudorandom generators
We adopt the notation of Dodis et al. [19].
Definition 1 (Pseudorandom generator). A pseudorandom gen-
erator (PRG) is a pair of algorithms (I, G). The seeding algorithm
I(λ) takes a security parameter λ and probabilistically generates an
initial state s ∈ S, typically some fixed-length bit string. The gener-
ation algorithm G : n × S → {0, 1}n × S maps the current state to
an n-bit output and a new state. For any λ, integer q ≥ 1, initial seed
s0 ∈ I(λ), and any list of non-negative integers (n1, n2, . . . , nq) we
let outq(G, s0) denote the set of bit strings (r1, r2, . . . , rq) produced
by computing (ri , si) ← G(ni , si−1) for i = 1 to q. A PRG is secure
when no adversary can distinguish between the outputs outq and
a set of random bits.
The PRG discussed in this work extends this basic definition slightly,
as the generate function G also takes (and may return) additional
input, namely a counter or timer value that is used as a partial input
to the generator. We require that pseudorandomness hold even
when this auxiliary data is predictable or adversarially chosen.
2.2 ANSI X9.31
The ANSI X9.31 random number generator is an algorithm that
was included in some form on the list of approved random number
generators for FIPS and NIST standards between 1992 and 2016. The
design first appeared in the ANSI X9.17 standard on cryptography
for the financial industry, published in 1985, using DES for the
block cipher. The X9.31 variant uses two-key 3DES for the block
cipher, and NIST published three-key 3DES and AES versions in
Figure 1: Each iteration of the ANSI X9.31 PRG generation
function (G) inputs a timestamp Ti and a seed Vi−1 and pro-
duces an output block Ri and a new seed Vi.
2005. [39] While this design has appeared under various names, we
will refer to it as the X9.31 PRG for the rest of this paper, to use the
terminology in modern implementations and standards.
The PRG is based on a block cipher with block size ℓ bits. We
will specialize to AES, and define ℓ = 128. EK(Y) represents the
encipherment of Y under key K.
The seeding algorithm I selects an initial seed s = (K, V) where V
is generated randomly and K is a pre-generated fixed key K for
the block cipher. The exact language used to describe the key in
the NIST specification [39] for the AES-based variant is “For AES
128-bit key, let *K be a 128 bit key.” and similarly for 192 and 256
bits. It continues “This *K is reserved only for the generation of
pseudo-random numbers.”
The jth call to the generate algorithm G takes as input a desired
output length in bits n, the current state s = (K, V) and a series of
timestamps (T1, . . . ,TN ) where N = ⌈n/ℓ⌉. Let V0 = V at the start
of the generate call. For i = 1 to N the state is updated using the
current timestamp Ti as follows. First, generate an intermediate
value Ii = EK(Ti). Then one block of output is generated as
Ri = EK(Ii ⊕ Vi−1)
(1)
and the state for the next iteration is Vi = EK(Ri ⊕ Ii).
The output of G is truncaten(R1∥R2∥ . . . ∥Rb) where truncaten out-
puts the leftmost n bits, as well as the updated state s′ = (K, Vb). A
diagram of the generation algorithm appears in Figure 1.
2.3 State Recovery Attack with a Known Key
We are not aware of a formal proof showing that ANSI X9.31 is
pseudorandom, though this is likely to be the case if the block
cipher is a pseudorandom permutation.
Kelsey et al. [41] observed that the generator is clearly vulnerable
when K is not secret. An attacker who learns K can recover the
current state using two consecutive blocks of output together with
guesses for their timestamps. (A single block of output will not
uniquely identify the state, but two blocks almost surely will.) Let R0
be a block of output generated at T0, R1 a block of output generated
at T1, and D(Y) the decryption of Y using key K. We can relate
these quantities as:
D(D(R1) ⊕ E(T1)) = R0 ⊕ E(T0)
(2)
If the timestamps are only known approximately, we can brute force
them within some range until we find a pair that yields equality, or
apply a meet-in-the-middle attack [41]. If one block is not known
completely, we can rearrange the encryptions and decryptions
and verify equality of the known portion of the block. Once the
timestamps T0 and T1 are known, the next seed is
V2 = E(R1 ⊕ E(T1))
A guess for the output from the next iteration is then uniquely
defined by a guess for the timestamp T2:
R2 = E(E(T2) ⊕ V2)
(3)
The above attack allows an attacker who has access to raw X9.31
output and the key K to recover the state. The attacker can then
predict future output by running the generation algorithm with a
guess for each subsequent timestamp. Alternatively, she can recover
previous output blocks by “winding the generator backwards” and
guessing earlier timestamps. Both attacks require the same effort.
In order to understand the impact on real cryptographic usage, we
will describe how this attack works in theory in the context of
popular cryptographic protocols.
2.4 Attacking X9.31 in TLS
Checkoway et al. [16] performed an in-depth analysis of the vul-
nerability of the TLS protocol to a compromised random number
generator in the context of the Dual EC DRBG. The attack surface
is similar for a vulnerable X9.31 implementation, with two key
differences. First, the Dual EC backdoor is asymmetric, and thus
only a party who generates the curve points used with Dual EC can
detect the presence of the backdoor or exploit it, while the X9.31
vulnerability is symmetric, and any implementation that stores a
fixed secret key is vulnerable to passive exploitation by an attacker
who can recover this key. Second, the Dual EC attack requires at
least 28 bytes of contiguous PRG output for an efficient attack,
while the X9.31 attack can be conducted with fewer bytes.2 This
second restriction plays a major role in the cost of an attack on a
protocol such as TLS or IPsec.
2.4.1 TLS Background. A TLS 1.0, 1.1, or 1.2 handshake begins
with a client hello message containing a 32-byte random nonce and
a list of supported cipher suites. The server hello message contains
a 32-byte random nonce, the server’s choice of cipher suite, and
the server’s certificate with a long-term public key. The server
and client then negotiate shared secret keying material using the
chosen asymmetric cipher. For RSA, the client encrypts a secret
to the server’s public key; for (elliptic curve) Diffie-Hellman, the
server and client exchange key exchange messages. The client and
server then derive symmetric keys from the negotiated shared secret
2In practice, given(256−n) bits of contiguous generator output, Dual EC state recovery
involves a guessing phase consisting of 2n elliptic curve operations. This becomes
costly for values of n ≥ 32. By contrast, the ANSI attack requires only 128 bits of
contiguous generator output for initial state recovery and a small portion of a second
block to test for correctness. Given (256−n) total bits the probability of recovering the
wrong state is generally small (≈ M ∗ 2−(128−n) when brute forcing over a timestamp
space of size M) even when n is large.
TiAESKVi−1⊕AESK⊕AESKViRiand nonces, authenticate the handshake, and switch to symmetric
encryption.
2.4.2
State and key recovery in TLS. If the X9.31 PRG is used
to generate both the random nonce and the cryptographic secrets
used for the key exchange, then an attacker could use the raw PRG
output in the nonce to carry out the state recovery attack, and then
use knowledge of the state to derive the secret keys. The 256-bit
client or server random is exactly two blocks of AES output. Some
TLS implementations include a 32-bit timestamp in the first 4 bytes
of the nonce; in this case the attacker would have fewer than two
full blocks, but the attacker will likely still recover a unique state.
For a Diffie-Hellman key exchange, this attack would work if either
the client or server uses the vulnerable PRG; for RSA key exchange,
the key exchange would only be compromised if the client uses the
vulnerable PRG.
2.5 Attacking X9.31 in IPsec
Checkoway et al. [16] describe the impact of a compromised random
number generator on the IKE key exchange used in IPsec in the
context of the Dual EC PRG. Our case is similar. We describe the
protocols in detail, since we target IPsec for our proof-of-concept.
2.5.1
IPSec/IKEv2 background. IPSec is a Layer-3 protocol suite
for end-to-end IP packet encryption, authentication and access
control, widely used for Virtual Private Networks (VPNs). The IKE
(Internet Key Exchange) protocols allow two hosts, denoted the
Initiator and Responder, to establish an authenticated “Security
Association”, a secure communication channel. Two versions of
IKE exist, IKEv1 and IKEv2. Both use Diffie-Hellman key exchange.
IKEv1. The original IKE specification [31] defines two phases, an
initial key exchange phase (Phase 1) and a second phase (Phase 2)
that uses keying material from the first phase to establish an IPSec
SA. In Phase 1, authenticated key exchange can be performed using
two handshake types: Main Mode or Aggressive Mode.
We focus our attention on the Phase 1 handshake in main mode.
First, initiator and responder exchange Security Association (SA)
payloads, with the initiator offering proposals for combinations
of cipher suites and parameters and the responder accepting one.
The parties then exchange Key Exchange (KE) messages, each con-
taining a Diffie-Hellman key exchange payload. The format differs
based on the authentication method. When using digital signatures
or a pre-shared key to authenticate, the initiator and responder
send their key exchange message together with a cleartext nonce of
length between 8 and 256 bytes [31]. Each packet includes an 8-byte
connection identifier called a cookie.3 The ISAKMP specification
(RFC 2408) [17] suggests that the cookie be generated by applying
the MD5 hash function to the participant IPs, ports, and a local
random secret.
Both parties then derive symmetric key material from the Diffie-
Hellman shared secret, the nonces, the cookies, and optionally
the PSK if using PSK authentication. All messages following this
3The ISAKMP specification (RFC 2408) [17] suggests generating the cookie by applying
the MD5 hash function to the participant IPs, ports, and a local random secret.
Figure 2: Randomness and the IKEv2 Handshake. The IKEv2
handshake establishes an authenticated, encrypted connec-
tion using a Diffie-Hellman key exchange. In our target
implementation, both the SPI and nonce N are raw, unen-
crypted outputs from the PRG. The key exchange message
KE is generated from the PRG immediately afterward. The
encrypted portions of the handshake are inside of a gray
box.
point are encrypted with the newly derived keys. Both sides then
exchange certificates and identities, and authenticates the key ex-
change using the negotiated authentication method.
In Aggressive Mode, the initiator sends the SA and KE payloads to-
gether and the responder replies with its SA, KE and authentication
messages together. IKEv1 Aggressive mode using pre-shared key
authentication is widely considered to be a security risk because
the authentication hash is sent unencrypted, which could allow an
attacker to brute force the PSK.
In Phase 2, participants can negotiate additional keying material
and exchange parameters using another Diffie-Hellman exchange,
with messages encrypted using the key established in Phase 1.
After negotiating this further material, the parties can exchange
encrypted data.
IKEv2. The IKEv2 protocol was standardized in 2005 [14]. We show
an abbreviated version of the IKEv2 handshake in Figure 2. First the
initiator sends an IKE_SA_INIT message, with proposals similar to
IKEv1, including a Diffie-Hellman public key generated using its
best guess for the proposal parameters that will be accepted by the
responder. Every message includes a connection identifier called
the SPI. 4
If the responder accepts the initiator’s proposal, it replies with
its own IKE_SA_INIT messages containing its key exchange. The
two parties then authenticate each other and create an IPsec SA
using IKE_AUTH messages, which are encrypted and integrity-
protected using keys derived from the Diffie-Hellman shared secret,
the nonces, and the SPI values. The analogue of Phase 2 in IKEv2
is the encrypted CREATE_CHILD_SA exchange, which admits an
optional a second key exchange.
4In IKEv2 the cookie field from IKEv1 is renamed to the ‘Security Parameter Index’
(SPI). This is not to be confused with the IPSec SPI that identifies a particular SA, nor
the IKEv2 COOKIE SA payload, which is a countermeasure against resource exhaustion
attacks. The latter is called the IPSec SPI in IKEv1.
SPIi,SAi,KEi,NiSPIr,SAr,KEr,NrSPIi,AUTHAUTHSPIr,2.5.2
State recovery in IPsec. An attack on the IKE handshake
exploiting a vulnerable X9.31 implementation proceeds much as
described in [16]. The attacker requires that both the victim’s nonce
and Diffie-Hellman key exchange secret be composed of raw X9.31
output, and additionally, that the nonce be longer than one block
in length. In an ideal attack scenario the Diffie-Hellman secret
and nonce are generated in quick succession. The attacker then
recovers the PRG state by guessing the timestamps used to generate
the nonce, and checking for equality in Equation 2. The attacker
then guesses the two timestamps used for the next two blocks of
output using Equation 3, and confirms her guess using the public
Diffie-Hellman exchange.
Full symmetric key recovery for IKEv1 depends on the authentica-
tion method used in the exchange. The attacker can validate state
recovery and Diffie-Hellman secret compromise against a single
key exchange packet from one side of the connection, but for some
authentication methods may need additional information to gener-
ate the session keys. For signature authentication, the attacker does
not need to learn any information beyond the nonces and cookies
that appear in the clear in the handshake. For PSK authentication,
the attacker would need to learn the PSK. For public key encryption
authentication, the nonces are encrypted, so the attacker would
need to learn the private keys for both sides of the connection in
order to learn the nonces and derive the session keys.
For IKEv2, the IKE_SA_INIT messages contain all of the fields nec-
essary to perform state recovery and derive the Diffie-Hellman
secret: timestamps, nonces, the SPI nonce, and both key exchange
values. We note that in IKEv2, the PSK is used only for authentica-
tion, and not to derive encryption keys. A passive attacker would
need to collect both sides of the handshake in order to derive the
session keys necessary to decrypt content, but state recovery and
Diffie-Hellman secret compromise can be validated against a single
packet from the vulnerable side of the connection.
3 FIPS AND HARDCODED X9.31 KEYS
As discussed in Section 2.2, the NIST design description for the
X9.31 random number generator [39] does not specify how the
block cipher key should be generated or stored. However, vendors
who wish to obtain FIPS certification are required to produce a
detailed public “security policy” document describing their cryp-
tographic implementations and key management procedures. We
performed a systematic study of the security policies for prod-
ucts certified for the X9.31 PRG to understand how many vendors
publicly documented a potential hard-coded key vulnerability. We
obtained the list of certified devices from the NIST web site [51].
3.1 Background on FIPS certification
FIPS 140-2 [50] defines requirements for cryptographic devices and
software. This standard is used by the Cryptographic Module Vali-
dation Program (CMVP) to certify products used in US government
applications. Compliant devices are eligible for certification under
the CMVP jointly administered by NIST and the Communications
Security Establishment (CSE) of Canada.
Certificate Type
SP 800-90
X9.31/FIPS 186-2
2006-2008
0
310
2008-2016 To date
1073
952
2053
1411
Table 1: Certificate issuances for X9.31 continued even af-