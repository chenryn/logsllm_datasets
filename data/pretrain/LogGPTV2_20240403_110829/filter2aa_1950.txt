# Deanonymizing Tor

**Authors:**
- Nathan S. Evans
- Christian Grothoff

**Affiliation:**
- Colorado Research Institute for Security and Privacy, University of Denver

---

## 1. Motivation

Tor is one of the most popular and widely used free software P2P networks designed to provide anonymity on the Internet. It boasts a strong and large user base, robust support, and is generally assumed to offer users a high level of anonymity. However, recent developments have shown that all the Tor nodes involved in a circuit can be discovered, thereby reducing the level of anonymity for Tor users.

---

## 2. General Information about Tor

- **Tor (The Onion Router):** 
  - Encrypts data multiple times, with each layer being decrypted as it travels through the network, similar to peeling an onion.
  - Functions as a low-latency P2P mix cascade.
  - Routes data through the network along a "circuit."
  - Data is encrypted as it passes through nodes until the final hop.

---

## 3. Routing in Tor

- **Data Forwarding:** 
  - Data is forwarded through the network.
  - Each node only knows the previous and next hop.
  - Only the originator knows the entire path.
  - The number of hops is fixed (currently set to three).
- **Key Security Goal:** 
  - No node in the path should be able to discover the full path.

---

## 4. Routing Example

```plaintext
Client
|
V
Tor Node 1
|
V
Tor Node 2
|
V
Tor Node 3
|
V
Server
```

**Figure 1:** Example showing how a normal path is chosen in the Tor network.

---

## 5. Previous Work

- **Murdoch and Danezis' Study:**
  - Title: "Low Cost Traffic Analysis of Tor"
  - Goal: Discover all the Tor routers involved in a given circuit.
  - Method: Identify the added load of one normal Tor connection by sending a specific sequence down a tunnel and monitoring each Tor router.
  - Effectiveness: Their attack was effective on the 2005 Tor network, which had approximately a dozen Tor routers.

---

## 6. Problems with Previous Work

- **Scalability Issues:**
  - Less feasible with over 1000 routers.
  - Must identify all separate routers in the circuit.
  - Small effects are difficult to measure due to large fluctuations in the current network, leading to false positives.
  - Our replication of their experiments showed that their method is much less effective on today's network.

---

## 7. Basis for Deanonymization

- **Design Issues:**
  1. No artificial delays induced on connections.
  2. Path length is set at a small, fixed number.
  3. Paths of arbitrary length through the network can be constructed.
- **Target User Configuration:**
  - Running Tor with Privoxy using default settings.

---

## 8. Regular Path Example

```plaintext
Client
|
V
Tor Node 1
|
V
Tor Node 2
|
V
Tor Node 3
|
V
Server
```

**Figure 2:** Example showing a typical Tor circuit.

---

## 9. Circular Path Examples

### Example 1/5

```plaintext
Client
|
V
Tor Node 1
|
V
Tor Node 2
|
V
Tor Node 3
|
V
Server
```

**Figure 3:** Example showing how long circular routes are created.

### Example 2/5

```plaintext
Client
|
V
Tor Node 1
|
V
Tor Node 2
|
V
Tor Node 3
|
V
Server
```

**Figure 4:** Example showing how long circular routes are created.

### Example 3/5

```plaintext
Client
|
V
Tor Node 1
|
V
Tor Node 2
|
V
Tor Node 3
|
V
Server
```

**Figure 5:** Example showing how long circular routes are created.

### Example 4/5

```plaintext
Client
|
V
Tor Node 1
|
V
Tor Node 2
|
V
Tor Node 3
|
V
Server
```

**Figure 6:** Example showing how long circular routes are created.

### Example 5/5

```plaintext
Client
|
V
Tor Node 1
|
V
Tor Node 2
|
V
Tor Node 3
|
V
Server
```

**Figure 7:** Example showing how long circular routes are created.

---

## 10. Attack Example

```plaintext
Client
|
V
Tor Node 1 (Unknown)
|
V
Tor Node 2 (Known High BW)
|
V
Tor Node 3 (Our Exit Node)
|
V
Server
```

**Figure 8:** Example showing a partial view of the Tor network during the attack.

---

## 11. Attack Implementation

- **Components:**
  - Modified exit node.
  - Modified DoS node.
  - Lightweight DoS web server running on GNU libmicrohttpd.
  - Client-side JavaScript for latency measurements.
  - Instrumentation client to receive data.
- **Process:**
  - Exit node injects JavaScript "ping" code into HTML responses.
  - Client browses as usual while JavaScript continues to "phone home."
  - Exit node measures variance in latency.
  - DoS attack strains possible first hop(s) while continuing to measure.
  - If no significant variance is observed, another node is selected and the process restarts.
  - Once a sufficient change is observed, the initial node is identified.

---

## 12. Gathered Data Examples

### Example 1/10

**Figure 9:** Attack effects on an unused Tor node. Red line is unstressed test, green is stressed test. X-axis is measurement number, Y-axis is latency variance (in milliseconds).

### Example 2/10

**Figure 10:** Attack effects on a Tor node. Red line is unstressed test, green is stressed test.

### Example 3/10

**Figure 11:** Attack effects on a Tor node. Red line is unstressed test, green is stressed test.

### Example 4/10

**Figure 12:** Attack effects on a Tor node. Red line is unstressed test, green is stressed test.

### Example 5/10

**Figure 13:** Attack effects on a Tor node. Red line is unstressed test, green is stressed test.

### Example 6/10

**Figure 14:** Histogram plot of latency times. Red is unstressed trial, green is stressed.

### Example 7/10

**Figure 15:** Histogram plot of latency times (same trials as previous graphs).

### Example 8/10

**Figure 16:** Histogram plot of latency times (same trials as previous graphs).

### Example 9/10

**Figure 17:** Histogram plot of latency times (same trials as previous graphs).

### Example 10/10

**Figure 18:** Histogram plot of latency times (same trials as previous graphs).

---

## 13. Achievements

- **Path Identification:**
  - We successfully identify the entire path through the Tor network, similar to the results of Murdoch and Danezis.
  - This achievement is applicable to the modern, current Tor network.
  - If an attacker performs this attack from an exit node, Tor becomes as effective as a one-hop proxy.

---

## 14. Why Our Attack is Effective

- **Single Node Discovery:**
  - Since we control the exit router, only one node needs to be found.
  - Our bandwidth multiplication technique allows low-bandwidth connections to DoS high-bandwidth connections, overcoming a common DoS limitation.

---

## 15. Potential Fixes

- **Path Length:**
  - Use variable or longer path lengths.
  - Disallow infinite path lengths.
- **Connection Delays:**
  - Induce delays into connections (though this is unlikely to be implemented).
- **Monitoring:**
  - Monitor exit nodes for unusual behavior (already partially done).
- **Client-Side Measures:**
  - Disable JavaScript in clients.
  - Use end-to-end encryption.

---

## 16. Attack Improvements and Variants

- **Measurement Techniques:**
  - Use meta refresh tags for measurements instead of JavaScript.
- **Parallel Testing:**
  - Parallelize testing to rule out multiple possible first nodes simultaneously.
- **Latency Measurement:**
  - Improve latency measures for the first hop to further narrow down possible first hops.

---

## 17. Conclusion

- **Current Tor Implementation:**
  - Allows arbitrary length paths.
  - Uses minimally short paths.
- **Arbitrary Path Lengths:**
  - Enable DoS attacks.
- **DoS Attacks:**
  - Allow detection of significant changes in latency.
- **Significant Latency Changes:**
  - Reveal the paths used.

---

## 18. Questions?

Thank you for your attention. We welcome any questions or comments.