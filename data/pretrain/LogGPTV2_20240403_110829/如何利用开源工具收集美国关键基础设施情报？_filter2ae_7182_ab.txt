  * Time Zone
  * Host ID
  * VM UUID
  * Brand I
Niagara Fox 设备的真实响应示例：
>
>     fox a 0 -1
> foxhello\n{\nfox.version=s:1.0.1\nid=i:255149\nhostName=s:192.168.1.11\nhostAddress=s:192.168.1.11\napp.name=s:Station\napp.version=s:3.8.311\nvm.name=s:JavaHotSpot(TM)
> Embedded
> ClientVM\nvm.version=s:25.141-b06\nos.name=s:QNX\nos.version=s:6.5.0\nstation.name=s:Guadelupe_Jail\nlang=s:en\ntimeZone=s:America/Chicago;-21600000;3600000;02:00:00.000,wall,march,8,onor
> after,sunday,undefined;02:00:00.000,wall,november,1,on
> orafter,sunday,undefined\nhostId=s:Qnx-> JVLN-0000–05A1–7B93\nvmUuid=s:11e98b97-b656–1c50–0000–00000000bafd\nbrandId=s:vykon\nsysInfo=o:bog61[ version=”1.0″>\n v=””/>\n\n]\nauthAgentTypeSpecs=s:fox:FoxUsernamePasswordAuthAgent\n};;\nfoxa
> 1 -1 fox rejected\n{\n};;\n
## 收集数据
如上所述，本研究仅基于以被动方式收集的数据。我是用了两种服务，分别是 Shodan 和 BinaryEdge，它们都允许用户查找互联网上的联网设备，其中包括
ICS 设备。另外它们提供过滤功能，从而可以发现自己感兴趣的内容或者将搜索的范围缩小到某个具体的国家、产品或版本。和 Shodan
不同，BinaryEdge 提供现成可用的查询，以便我们过滤所有可能的 ICS 设备，但它不支持地理位置信息。为了使用这一解决方案，我们需要拥有他们自己的
IP 地址位置信息数据库并借此收集 IP 地址。虽然免费的数据库并不十分准确但最好的是 Maxmind。而Shodan 直接从 API
提供设备的地理位置数据且无需进行更多检查。然而，要使用标记并列出所有的 ICS 设备（如 BinaryEdge
那样），我们需要具有“企业级”访问权限，但这种权限花费较高。所搜索的设备和我之前的研究工作是一致的：
  * Modbus
  * Siemens S7
  * Tridium
  * General Electric
  * BACnet
  * HART IP
  * Omron
  * Mitsubishi Electric
  * DNP3
  * EtherNet/IP
  * PCWorx
  * Red Lion
  * Codesys
  * IEC 60870–5–104
  * ProConO
为了主动地查找美国暴露的设备，我们需要扫描1,573,564,566个IP地址，并进行分类、进行地理定位并将它们展现到地图上。我们不可能知道工控设备的默认端口及其返回的响应。为此，最好是使用
masscan 或类似工具，通过正则表达式匹配响应。可从此处找到 nmap
正则表达式的完整列表：。检测 Niagara Fox
设备的正则表达式如下：
>
>     matchniagara-fox m|^fox a 0 -1
> foxhello\n\{\nfox\.version=s:([\d.]+)\nid=i:\d+.*\napp\.name=s:Station\napp\.version=s:([\d.]+)\n|sp/Tridium
> Niagara/ v/$2/ i/fox version $1/ cpe:/a:tridium:niagara:$2/
检测 Allen-Bradley 管理服务器的正则表达式如下：
>
>     matchhttp m|^HTTP/1\.0 200 OK \r\nServer: A-B
> WWW/([\d.]+)\r\n.* httpd/ v/$1/ i/RockwellAutomation Ethernet Processor http config/
另外，为了获取更多详情，我们需要使用Nmap Scripting Engine (NSE) 脚本。他们会发送正确的
payload以便我们获取设备的规格。主动扫描并不是隐形的，而且需要比被动收集付出更多的努力，但我认为结果应该是非常类似的。
开源工具 KamerkaKamerka
的第一个版本可以简单地可视化给定位置摄像头。基于此，它会展示某个企业网络块中虽然并不存在的资产但却在企业附近或内部运营的资产因此属于该企业的资产。它也可被用于通过入侵摄像头或找到无需认证的摄像头的方式实施间谍活动。我创建这个开源工具的目的是突出强调具有较高军事或商业价值的建筑物附近的互联网摄像头所存在的问题。当然，物联网世界中并不止摄像头。因此
Kamerka 的第二个版本还涵盖了打印机、信息查询遥测协议 (MQTT)和实施流协议 (RTSP)。所有这些如保护不当，则可遭滥用。另外，很多协议如
MQTT通常被关键基础设施用作智能传感器，处理某设施的机密测量数据。在纽约某发电厂中运行的工业物联网设备如下：
Kamerka 的最后一个版本可供用户扫描某个国家的工控设备并将包括具体详情的结果展示在地图上，其中包括某个特定 IP
地址的所有人信息。上次研究展示的是波兰和瑞士，而这次我要展示的是美国暴露的2.6万台设备。我必须把脚本缩小以便展示比平时更多的数据并将其放在
Elasticsearch 中以便更好地管理。由于展示的是所有的设备，因此地图看上去有一些模糊，不过可以根据具体的查询，针对所拥有的信息创建其它地图。
(被暴露的1.5万台设备地图）端口5900 (Virtual Network Computing) 开放的设备：Red Lion Controls
端口789 开放的设备：
## 数据统计
在我们进行地理定位和识别之前，我将展现一些统计数据。受影响最大的组织机构是：
受影响最严重的城市是：
开放的端口：
前5大 ICS 端口：
  * 1911
  * 47808
  * 4911
  * 502
  * 44818