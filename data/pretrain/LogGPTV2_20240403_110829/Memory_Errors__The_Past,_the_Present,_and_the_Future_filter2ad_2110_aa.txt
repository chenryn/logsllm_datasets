# Memory Errors: The Past, the Present, and the Future

**Authors:**
- Victor van der Veen
- Nitish Dutt-Sharma
- Lorenzo Cavallaro
- Herbert Bos

**Affiliations:**
- 1 The Network Institute, VU University Amsterdam
- 2 Royal Holloway, University of London

## Abstract
Memory error exploits have been a persistent threat for over 25 years and continue to rank among the top three most dangerous software vulnerabilities. Despite numerous security measures implemented on modern systems, these errors remain a significant challenge. This paper provides a comprehensive overview of memory errors, including historical trends, real-world vulnerabilities, and future prospects. By examining past and present developments, we aim to determine the significance of memory errors in the foreseeable future.

## 1. Introduction
Memory errors in C and C++ programs are among the oldest and most persistent classes of software vulnerabilities. Over the years, the research community has proposed various approaches to mitigate or eliminate these errors, such as using safe languages, bounds checkers, and other countermeasures. Despite these efforts, memory errors continue to undermine system security. For instance, classic buffer overflows have consistently ranked among the top three most dangerous software errors in the CWE SANS Top 25 [85]. Attackers, now often motivated by profit, have found ways to circumvent protective measures, making memory corruption a common initial foothold for further infections.

The question remains: Are memory errors still a significant threat, and do they require renewed research efforts? To address this, we provide a detailed analysis of the memory error landscape, including a historical overview, statistical data, and an examination of real-world vulnerabilities and countermeasures. Our goal is to offer a comprehensive and succinct reference that consolidates existing knowledge and guides future research.

## 2. A High-Level View of Memory Error History
### 2.1 Non-Executable Stack
Stack-based buffer overflows are one of the most well-known memory error vulnerabilities. They occur when a stack buffer overflows and overwrites adjacent memory regions, allowing attackers to execute arbitrary code. The introduction of non-executable (NX) stacks in 1997 by Alexander Peslyak (Solar Designer) was a significant step in mitigating these attacks. NX stacks mark stack bytes as non-executable, causing the program to crash if an attacker attempts to execute injected code.

However, Solar Designer himself later described a novel attack, return-into-libc, which bypasses NX stacks by diverting execution to library functions. Subsequent enhancements, such as the PaX project, introduced additional protections like Address Space Layout Randomization (ASLR), which randomizes the memory layout to make return-into-libc attacks more difficult.

### 2.2 Canary-Based Protections
Canary-based protections, first introduced with StackGuard in 1999, place hard-to-predict patterns (canaries) between stack variables and function return addresses. If the canary is altered, it indicates a potential buffer overflow, leading to program termination. While effective against classic buffer overflows, canary-based protections are not foolproof and can be bypassed by more sophisticated attacks.

### 2.3 Heap Overflows
Heap overflows, first described by Matt Conover and the w00w00 security team in 1999, involve overwriting heap memory regions. These attacks are more complex than stack-based overflows but can be equally devastating. Countermeasures for heap overflows include techniques like heap hardening and improved memory management.

### 2.4 Format String Attacks
Format string attacks, introduced by Tymm Twillman in 1999, exploit vulnerabilities in format string handling functions. These attacks can lead to information disclosure, denial of service, and even arbitrary code execution. Mitigations include stricter format string validation and the use of safer alternatives.

### 2.5 Address Space Layout Randomization (ASLR)
ASLR, introduced by the PaX Team in 2001, randomizes the memory layout of a process to make it harder for attackers to predict the location of critical data. ASLR has been widely adopted in modern operating systems but is not a panacea, as advanced attacks like Return-Oriented Programming (ROP) can still bypass it.

## 3. Statistical Analysis of Memory Errors
To understand the current and future significance of memory errors, we analyzed vulnerability and exploit data over the past 15 years. Our findings show that while reported memory error vulnerabilities have decreased since 2007, the number of exploits has remained relatively constant. This suggests that memory errors will likely remain a significant threat in the near future. 

## 4. Future Directions
Given the persistence of memory errors, it may be time to adopt a different mindset and explore related research areas. Potential directions include:
- **Enhanced Bounds Checkers:** Developing low-overhead bounds checkers that can detect and prevent out-of-bounds accesses.
- **Taint Tracking:** Implementing practical taint-tracking mechanisms to trace and control the flow of untrusted data.
- **Advanced Exploit Mitigation:** Investigating new countermeasures to defeat control-hijacking attacks like ROP.

## 5. Conclusion
Memory errors continue to be a significant threat to system security, despite decades of research and the implementation of various countermeasures. By providing a comprehensive overview of the history, current state, and future prospects of memory errors, we aim to guide the research community in addressing this enduring problem. Further research and innovation are essential to mitigate the risks posed by memory errors and enhance the overall security of our systems.

---

**Acknowledgments:**
This work was partially sponsored by the EU FP7 SysSec project and by an ERC Starting Grant project ("Rosetta").

---

**References:**
[Include a list of all references cited in the text, formatted according to the appropriate academic style.]