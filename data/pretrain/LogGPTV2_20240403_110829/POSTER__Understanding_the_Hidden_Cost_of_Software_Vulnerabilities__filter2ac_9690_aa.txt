title:POSTER: Understanding the Hidden Cost of Software Vulnerabilities:
Measurements and Predictions
author:Afsah Anwar and
Aminollah Khormali and
Aziz Mohaisen
Understanding the Hidden Cost of
Software Vulnerabilities: Measurements
and Predictions
Afsah Anwar1(B), Aminollah Khormali1, DaeHun Nyang2, and Aziz Mohaisen1
1 University of Central Florida, Orlando, FL 32816, USA
{afsahanwar,aminkhormali}@knights.ucf.edu, PI:EMAIL
2 Inha University, Incheon, Republic of Korea
PI:EMAIL
Abstract. Vulnerabilities have a detrimental eﬀect on end-users and
enterprises, both direct and indirect; including loss of private data, intel-
lectual property, the competitive edge, performance, etc. Despite the
growing software industry and a push towards a digital economy, enter-
prises are increasingly considering security as an added cost, which makes
it necessary for those enterprises to see a tangible incentive in adopting
security. Furthermore, despite data breach laws that are in place, prior
studies have suggested that only 4% of reported data breach incidents
have resulted in litigation in federal courts, showing the limited legal
ramiﬁcations of security breaches and vulnerabilities.
In this paper, we study the hidden cost of software vulnerabilities
reported in the National Vulnerability Database (NVD) through stock
price analysis. Towards this goal, we perform a high-ﬁdelity data aug-
mentation to ensure data reliability and to estimate vulnerability dis-
closure dates as a baseline for estimating the implication of software
vulnerabilities. We further build a model for stock price prediction using
the NARX Neural Network model to estimate the eﬀect of vulnerability
disclosure on the stock price. Compared to prior work, which relies on
linear regression models, our approach is shown to provide better accu-
racy. Our analysis also shows that the eﬀect of vulnerabilities on vendors
varies, and greatly depends on the speciﬁc software industry. Whereas
some industries are shown statistically to be aﬀected negatively by the
release of software vulnerabilities, even when those vulnerabilities are
not broadly covered by the media, some others were not aﬀected at all.
Keywords: Vulnerability economics · Prediction
National vulnerability database
1 Introduction
An ideal software should be defect-free, reliable and resilient. However, vulner-
abilities are defects in software products, which expose the product and users
c(cid:2) ICST Institute for Computer Sciences, Social Informatics and Telecommunications Engineering 2018
R. Beyah et al. (Eds.): SecureComm 2018, LNICST 254, pp. 377–395, 2018.
https://doi.org/10.1007/978-3-030-01701-9_21
378
A. Anwar et al.
to risk alike, for e.g., Distributed Denial of Service attacks [1,2] or typosquat-
ting attacks [3]. When such defects happen, users prefer vendors who take such
defects as a priority, ﬁx them, report them to their users, and keep the commu-
nity as a whole immune to adversaries. Failure to do so would put vulnerable
vendors at risk, whereby users seek diﬀerent vendors, causing great losses.
In practice, vulnerabilities have multiple costs associated with them. For
example, a vulnerability leads to loss of trust by users, tarnished brand reputa-
tion, and ultimately results in the loss of customer-base. To deal with vulnera-
bilities, vendors also incur additional costs in the form of developer-hours spent
ﬁxing them and redeploying ﬁxes. As such, vulnerabilities could be a direct cause
of losing a competitive edge in the global market to vendors less prone to them.
For example, a study by the National Institute of Standards and Technology
(NIST) estimated that the US economy looses about $60 Billion USD every year
for patches development and redistribution, systems re-deployment, as well as
direct productivity loss due to vulnerabilities [4].
To make matters worse, the number of security incidents and vulnerabili-
ties have been growing exponentially, leading to a similar growth in resources
required for ﬁxing them. In 2012, for example, Knight Capital, a ﬁnancial services
company, lost $400 Million USD because of a bug in their code; the company
bought shares at the ask price and sold them at the bid price [5]. Losses from
WannaCry (2017), a ransomware attack in over 150 countries aﬀecting more
than 100,000 groups, is estimated to be $4 Billion USD [6]. Virus attacks, such
as Love Bug (2000), SirCam (2001), Nimda (2001), and CodeRed (2001), have
had an impact of $8.75 Billion, $1.25 Billion, $1.5 Billion and $2.75 Billion USD,
respectively [7]. With deployment of software in critical infrastructure, vulner-
abilities could have overwhelming impact. For example defects like the loss of
radio contact between the air traﬃc controller and the pilots due to unexpected
shutdown of voice communication system and crash of the backup system within
a minute of it turning on, could cost lives [8].
The cost of vulnerabilities is a variable that does not depend only on the
type of the vulnerability, but also the industry, potential users, and the severity
of the vulnerability as seen by those users. For example, users of security or
ﬁnancial software are more likely to lose faith in their product, compared to
general e-commerce applications. A more severe vulnerability is also more likely
to impact a vendor than a minor software glitch. For example, a vulnerability
that can be used to repeatedly launch a Denial of Service (DoS) attack could
be viewed more severely by users than, say, an access control misconﬁguration
(e.g., 1-time access-token exposure).
For publicly-traded drug and auto vendors, Jarrell and Peltzman [9] demon-
strated that recalling products has a detrimental impact on shareholder value.
Conversely, though, researches have shown that software vendors may, on the one
hand, not suﬀer any signiﬁcant losses due to vulnerabilities [10], or, on the other
hand, grow in proﬁt and oﬀerings despite the parallel growth in software vulner-
abilities. However, there are also underlying costs associated with each software
vulnerability, as mentioned above, and those costs are maybe invisible [10]. For
Understanding the Hidden Cost of Software Vulnerabilities
379
example, Romanosky et al. [11] studied software-related data breaches in the
United States, and found that 4% of them resulted in litigation in federal courts,
out of which 50% (2% of the original studied cases) won by the plaintiﬀs.
Contributions. In this paper, we quantitatively analyze the loss faced by soft-
ware vendors due to software vulnerabilities, through the lenses of stock price
and valuation. To this end, this work has the following contributions. (i) An
evaluation of vulnerabilities, disclosed in the year 2016, from the National Vul-
nerability Database (NVD) and their impact on their vendors. (ii) An accurate
method for predicting stock price of the next day using NARX Neural Network.
(iii) Industry-impact correlation analysis, demonstrating that some industries
are more prone to stock loss due to vulnerabilities than others. (iv) Vulnerabil-
ity type analysis, indicating that diﬀerent types have diﬀerent powers of aﬀecting
the stock price of a vendor.
Our work stands out in the following aspects, compared to the prior work
(more in Sect. 2). First, unlike the prior work, which is event-based (tracks vul-
nerabilities that are only reported in the press), we use a comprehensive dataset
of disclosed vulnerabilities in the National Vulnerability Database (NVD). Per
Spanos and Angelis [12], 81.1% of the prior work they surveyed were limited to
security breaches, while we focus on all software vulnerabilities. Furthermore,
per the same source, 32.4% of the prior work used Lexis/Nexis (database of
popular newspapers in the United States) as their source, 24.3% used the Data
Loss Archive and Database (data for privacy breach), 13.5% used CNET (tech-
nology website), and 13.5% used Factiva (global news database). In this study,
we uniquely focus on using NVD. (ii) We design a model to accurately predict
stock for the next day to precisely measure the eﬀect of a vulnerability. Our app-
roach outperforms state-of-the-art approach using linear regression (e.g., while
our mean-squared error (MSE) using ANN is below 0.6, using linear regression
results in MSE of 6.24). (iii) Unlike the prior work, we did not exclude any ven-
dors, as we considered publicly-traded vendors on NYSE, NASDAQ, Frankfurt,
Other OTC, Taiwan, and LSE. Spanos and Angelis [12] in their survey found
that 83.8% of the surveyed work used vendors that traded in a US stock market,
13.5% used vendors from diﬀerent countries and only 2.9% (1 out of 34 works)
used ﬁrms traded in TYO (the leading stock exchange in Japan) [12].
Organization. The rest of the paper is organized as follows: In Sect. 2, we re-
visit the literature. In Sect. 3, we present our approach to the problem. In Sect. 4,
we present our prediction model. In Sect. 5, we evaluate the results. In Sect. 6
we further comment on the statistical signiﬁcance of our results, followed by
discussion, limitations and future work in Sect. 7. We conclude the paper in
Sect. 8.
2 Related Work
Our work is an amalgam of diﬀerent ﬁelds, where we connect the vulnerabilities
to economic aﬀect on vendor. Perceptions often relate vulnerabilities to eﬀect on
the end user. Little has been said and done from the vendor’s perspective.
380
A. Anwar et al.
Eﬀect on Vendor’s Stock. Hovav and D’Archy [10], and Telang et al. [13]
analyzed, in event-based studies, vulnerabilities and their impact on vendors.
While Hovav and D’Archy have shown that market shows no signs of signiﬁ-
cant negative reaction due to vulnerabilities, Telang et al. show that a vendor
on average loses 0.6% of its stock value due to vulnerabilities. Goel et al. [14]
pointed out that security breaches have an adverse impact of about 1% on the
market value of a vendor. Campbell et al. [15] observed a signiﬁcant negative
market reaction to information security breaches involving unauthorized access
to conﬁdential data, but no signiﬁcant reaction to non-conﬁdential breaches.
Cavusoglu et al. [16] show that the announcement of Internet security breaches
has a negative impact on the market value of vendors.
Bose et al. [17] show that each phishing alert leads to a loss of market capi-
talization that is at least US$ 411 million for a ﬁrm.
Vulnerability Analysis. Li and Paxson [18] outlined a method to approximate
public disclosure date by scrapping reference links in NVD, which we use in this
study. Nguyen and Massaci [19] pointed out that the vulnerable versions data in
NVD is unreliable. Christey and Martin [20] outlined caveats with the NVD data,
also suggesting its unreliability. Romanosky et al. [21] found that data breach
disclosure laws, on average, reduce identity theft caused by data breaches by
6.1%. Similarly, Gordon et al. [22] found a signiﬁcant downward shift in impact
post the September 11 attacks.
Financial Impact of Defects. Jarrell and Peltzman [9] analyzed the impact
of recall in the drug and auto industries on vendors’ stock value loss. Towards
calculating the eﬀect of a vulnerability, it is crucial to predict a hypothetical
stock valuation in the absence of a vulnerability. Kar [23] suggested the use of
Artiﬁcial Neural Network (ANN) as a reliable method for predicting stock value.
Farhang et al. [24], suggest that higher security investments in Android devices
do not impose higher product prices on customers.
3 Methodology
Using the information available on the National Vulnerability Database (NVD),
the goal of this study is to track the public disclosure date of vulnerabilities
and capture their impact on vendors stock market valuation. As in the prior
work [9], we consider the ﬂuctuation in the stock price as a measure of the
reported vulnerabilities’ impact. To this end, we calculate the impact on the
following days, with respect to the predicted value of the stock on the day of
vulnerability disclosure. However, we limit ourselves up to the third day of the
public disclosure of the vulnerability to reduce the likelihood of interference with
factors that might aﬀect the market value. The rest of this section explains in
details the steps taken to achieve the above goal.
3.1 Data and Data Augmentation
Our main sources of data are NVD [25] and Yahoo Finance [26]. Figure 1 sum-
marizes, at a high-level, the ﬂow of data creation, from the source of data to the
Understanding the Hidden Cost of Software Vulnerabilities
381
Ref. Link
n
o
(cid:415)
a
t
n
e
m
g
u
A
e
r
u
t
a
e
F
o
(cid:415)
c
a
r
t
x
E
e
r
u
t
a
e
F
n CVE ID
Vendor
Product
CVSS
CWE
Desc.
Ref.Link
Pub. Date
NVD 
(JSON)
Web Scraping
CVE ID
Vendor
Product
CVSS
CWE
PDD
Desc. 
contains 
Library
No
Yes
Reject
Vendor
Yahoo 
Finance
r
o
d
n
e
V
Yes
Mutual
No
Reject
CVE ID
Vendor
Product
CVSS
CWE
PDD
VHSP(CSV)
Fig. 1. Dataset creation ﬂow. Desc. stands for the description of vulnerability, Ref.
Link is the link referring to details corresponding to the vulnerability, Pub. Date is
the Published Date, CVSS is Common Vulnerability Scoring System metrics, CWE is
the Common Weakness Enumeration identiﬁer, PDD is the Public Disclosure Date,
approximated as the minimum of the dates gathered from the links corresponding to
a vulnerability, and VHSP is the Vendor Historical Stock Price downloaded of mutual
vendors from Yahoo Finance.
ﬁnal dataset. In a nutshell, we extract information from JSON ﬁles downloaded
from the National Vulnerability Database (NVD), scrape through the reference
links for each vulnerability provided by NVD to approximate the disclosure date
of the vulnerability, then check for indicative words, such as “lib” or “library” in
the description of the vulnerability. If such words do not exist in the description,
which means that those vulnerabilities are more likely associated with the vendor
and not due to a third party, we consider the vulnerability for further analysis.
We check for the vendor’s historical stock prices using the Yahoo Finance. If
the vendor exists in Yahoo Finance, we consider the vendor for our analysis,
otherwise the vendor is rejected.
National Vulnerability Database (NVD) is a vulnerability database main-
tained by the National Institute of Standards and Technology (NIST) and con-
tains all vulnerabilities reported to MITRE [27]. Analysts at NVD analyze the
reported vulnerabilities, then insert them into the database after adding other
necessary information, including (most importantly) a Common Vulnerabilities
and Exposures Identiﬁer (CVE-ID). In the following we elaborate on the other
data elements in NVD associated with each vulnerability.
The NVD includes the following information (elements) for each reported
vulnerability: the CVE-ID, vendor, product, Common Vulnerability Scoring Sys-
tem (CVSS) label, published date, Common Weakness Enumeration Identiﬁer
(CWE-ID) [28], description, and reference links. The CVSS label is provided
using both version 2 and version 3 [29,30], which are widely used standard scor-
ing techniques. The vendor element is the name of the vendor of the software
that has the vulnerability, the product element is the name of the product which
contains the vulnerability, and the CVSS is the severity of the vulnerability.
CVSS version 3, released in the later half of 2015, labels vulnerabilities as LOW,
382
A. Anwar et al.
MEDIUM, HIGH, and CRITICAL, while the version 2 classiﬁes them into LOW,
MEDIUM, and HIGH. The attribute published date indicates the date when the
vulnerability was entered into the NVD, while CWE-ID refers to the type of the
weakness. The description element is a textual content to contextualize the sub-
mitted vulnerability. The reference links element is a set of the external URLs
linking to references with additional details about the vulnerability, including a
security advisory, a security thread, an email thread or a patch.
Data Preprocessing and Augmentation. The NVD data can be downloaded
from the NVD website in either XML or JSON format; we chose the JSON
format. The data is distributed in multiple JSON ﬁles with a ﬁle per year. We
use the vulnerabilities reported in the year 2016, and limit our analysis to the
severe ones. Since not all vulnerabilities have their CVSS version 3 assigned to
them, we consider vulnerabilities with CVSS version 3 label as CRITICAL or
version 2 label as “HIGH” to be severe. In our analysis we are interested in
understanding the impact of core vulnerabilities in the software itself, rather
than inherited vulnerabilities due to the use of third-party libraries. To this end,
we ﬁltered vulnerabilities due to third-party libraries by discarding those with
the word “library” in their description. Given that a vulnerability may aﬀect
multiple vendors and products, we limit ourselves to the main source of the
vulnerability by counting a vulnerability only under one vendor. For that, we
checked the vendor name and the description in the vulnerability record, and
found that the main vendor always appears in the description. Where multiple
vendors appear in the description, we exclude those vulnerabilities from our
analysis, since the vulnerability could be due to a third-party library common
among products of those vendors. As a result, our dataset was reduced from
8,709 to 2,849 vulnerabilities.
Since the published date attribute captured in NVD is the date when the vul-
nerability was entered into the database and not the date when the vulnerability
was actually found, the most important step in our analysis was to ﬁnd the date
when the vulnerability was disclosed to the public. We use the links present in
the NVD to scrape through the web and label dates corresponding to each of
the links, in an approach taken also by Li and Paxson [18]. We observed that
some of the domains have stringent security measures preventing the automating
scraping, while some did not have a date. For all such 1262 out of 8365 links, we
manually visited the links and updated the corresponding URLs. For all URLs,
we calculated the minimum of the dates corresponding to a vulnerability (when