    如果目标机器的端口是关闭的，UDP探测应该马上得到一个ICMP端口无法到达的回应报文。
    这对于Nmap意味着该机器正在运行。
    许多其它类型的ICMP错误，像主机/网络无法到达或者TTL超时则表示down掉的或者不可到达的主机。
    没有回应也被这样解释。如果到达一个开放的端口，大部分服务仅仅忽略这个
    空报文而不做任何回应。这就是为什么默认探测端口是31338这样一个
    极不可能被使用的端口。少数服务如chargen会响应一个空的UDP报文，
    从而向Nmap表明该机器正在运行。
    该扫描类型的主要优势是它可以穿越只过滤TCP的防火墙和过滤器。
    例如。我曾经有过一个Linksys BEFW11S4无线宽带路由器。默认情况下，
    该设备对外的网卡过滤所有TCP端口，但UDP探测仍然会引发一个端口不可到达
    的消息，从而暴露了它自己。
-PE; -PP; -PM (ICMP Ping Types)
:   除了前面讨论的这些不常见的TCP和UDP主机发现类型，
    Nmap也能发送世人皆知的ping 程序所发送的报文。Nmap发送一个ICMP type 8
    (回声请求)报文到目标IP地址， 期待从运行的主机得到一个type 0
    (回声响应)报文。 对于网络探索者而言，不幸的是，许多主机和
    防火墙现在封锁这些报文，而不是按期望的那样响应， 参见[RFC
    1122](http://www.rfc-editor.org/rfc/rfc1122.txt){target="_top"}。因此，仅仅ICMP扫描对于互联网上的目标通常是不够的。
    但对于系统管理员监视一个内部网络，它们可能是实际有效的途径。
    使用-PE选项打开该回声请求功能。
    虽然回声请求是标准的ICMP ping查询， Nmap并不止于此。ICMP标准 ([RFC
    792](http://www.rfc-editor.org/rfc/rfc792.txt){target="_top"})还规范了时间戳请求，信息请求
    request，和地址掩码请求，它们的代码分别是13，15和17。
    虽然这些查询的表面目的是获取信息如地址掩码和当前时间，
    它们也可以很容易地用于主机发现。
    很简单，回应的系统就是在运行的系统。Nmap目前没有实现信息请求报文，
    因为它们还没有被广泛支持。RFC 1122 坚持 "主机不应该实现这些消息"。
    时间戳和地址掩码查询可以分别用-PP和-PM选项发送。
    时间戳响应(ICMP代码14)或者地址掩码响应(代码18)表示主机在运行。
    当管理员特别封锁了回声请求报文而忘了其它ICMP查询可能用于
    相同目的时，这两个查询可能很有价值。
-PR (ARP Ping)
:   最常见的Nmap使用场景之一是扫描一个以太局域网。
    在大部分局域网上，特别是那些使用基于
    RFC1918私有地址范围的网络，在一个给定的时间绝大部分
    IP地址都是不使用的。 当Nmap试图发送一个原始IP报文如ICMP回声请求时，
    操作系统必须确定对应于目标IP的硬件
    地址(ARP)，这样它才能把以太帧送往正确的地址。
    这一般比较慢而且会有些问题，因为操作系统设计者认为一般不会在短时间内
    对没有运行的机器作几百万次的ARP请求。
    当进行ARP扫描时，Nmap用它优化的算法管理ARP请求。 当它收到响应时，
    Nmap甚至不需要担心基于IP的ping报文，既然它已经知道该主机正在运行了。
    这使得ARP扫描比基于IP的扫描更快更可靠。
    所以默认情况下，如果Nmap发现目标主机就在它所在的局域网上，它会进行ARP扫描。
    即使指定了不同的ping类型(如 -PI或者 -PS)
    ，Nmap也会对任何相同局域网上的目标机使用ARP。
    如果您真的不想要ARP扫描，指定 \--send-ip。
-n (不用域名解析)
:   告诉Nmap *永不*对它发现的活动IP地址进行反向域名解析。
    既然DNS一般比较慢，这可以让事情更快些。
-R (为所有目标解析域名)
:   告诉Nmap *永远* 对目标IP地址作反向域名解析。
    一般只有当发现机器正在运行时才进行这项操作。
\--system-dns (使用系统域名解析器)
:   默认情况下，Nmap通过直接发送查询到您的主机上配置的域名服务器
    来解析域名。为了提高性能，许多请求 (一般几十个 )
    并发执行。如果您希望使用系统自带的解析器，就指定该选项
    (通过getnameinfo()调用一次解析一个IP)。除非Nmap的DNS代码有bug\--如果是这样，请联系我们。
    一般不使用该选项，因为它慢多了。系统解析器总是用于IPv6扫描。
[]{#5}
## 端口扫描基础
虽然Nmap这些年来功能越来越多，
它也是从一个高效的端口扫描器开始的，并且那仍然是它的核心功能。 **nmap
*\***这个简单的命令扫描主机*\*上的超过 1660个TCP端口。
。许多传统的端口扫描器只列出所有端口是开放还是关闭的，
Nmap的信息粒度比它们要细得多。 它把端口分成六个状态: open(开放的)，
closed(关闭的)，filtered(被过滤的)， unfiltered(未被过滤的)，
open\|filtered(开放或者被过滤的)，或者
closed\|filtered(关闭或者被过滤的)。
这些状态并非端口本身的性质，而是描述Nmap怎样看待它们。例如，
对于同样的目标机器的135/tcp端口，从同网络扫描显示它是开放的，而跨网络作完全相同的扫描则可能显示它是
filtered(被过滤的)。
**Nmap所识别的6个端口状态。**
open(开放的)
:   应用程序正在该端口接收TCP 连接或者UDP报文。发现这一点常常是端口扫描
    的主要目标。安全意识强的人们知道每个开放的端口
    都是攻击的入口。攻击者或者入侵测试者想要发现开放的端口。
    而管理员则试图关闭它们或者用防火墙保护它们以免妨碍了合法用户。
    非安全扫描可能对开放的端口也感兴趣，因为它们显示了网络上那些服务可供使用。
closed(关闭的)
:   关闭的端口对于Nmap也是可访问的(它接受Nmap的探测报文并作出响应)，
    但没有应用程序在其上监听。
    它们可以显示该IP地址上(主机发现，或者ping扫描)的主机正在运行up
    也对部分操作系统探测有所帮助。
    因为关闭的关口是可访问的，也许过会儿值得再扫描一下，可能一些又开放了。
    系统管理员可能会考虑用防火墙封锁这样的端口。
    那样他们就会被显示为被过滤的状态，下面讨论。
filtered(被过滤的)
:   由于包过滤阻止探测报文到达端口，
    Nmap无法确定该端口是否开放。过滤可能来自专业的防火墙设备，路由器规则
    或者主机上的软件防火墙。这样的端口让攻击者感觉很挫折，因为它们几乎不提供
    任何信息。有时候它们响应ICMP错误消息如类型3代码13 (无法到达目标:
    通信被管理员禁止)，但更普遍的是过滤器只是丢弃探测帧， 不做任何响应。
    这迫使Nmap重试若干次以访万一探测包是由于网络阻塞丢弃的。
    这使得扫描速度明显变慢。
unfiltered(未被过滤的)
:   未被过滤状态意味着端口可访问，但Nmap不能确定它是开放还是关闭。
    只有用于映射防火墙规则集的ACK扫描才会把端口分类到这种状态。
    用其它类型的扫描如窗口扫描，SYN扫描，或者FIN扫描来扫描未被过滤的端口可以帮助确定
    端口是否开放。
open\|filtered(开放或者被过滤的)
:   当无法确定端口是开放还是被过滤的，Nmap就把该端口划分成
    这种状态。开放的端口不响应就是一个例子。没有响应也可能意味着报文过滤器丢弃
    了探测报文或者它引发的任何响应。因此Nmap无法确定该端口是开放的还是被过滤的。
    UDP，IP协议， FIN，Null，和Xmas扫描可能把端口归入此类。
closed\|filtered(关闭或者被过滤的)
:   该状态用于Nmap不能确定端口是关闭的还是被过滤的。 它只可能出现在IPID
    Idle扫描中。
[]{#6}
## 端口扫描技术
作为一个修车新手，我可能折腾几个小时来摸索怎样把基本工具(锤子，胶带，扳子等)
用于手头的任务。当我惨痛地失败，把我的老爷车拖到一个真正的技师那儿的时候
，他总是在他的工具箱里翻来翻去，直到拽出一个完美的工具然后似乎不费吹灰之力搞定它。
端口扫描的艺术和这个类似。专家理解成打的扫描技术，选择最适合的一种
(或者组合)来完成给定的 任务。
另一方面，没有经验的用户和刚入门者总是用默认的SYN扫描解决每个问题。
既然Nmap是免费的，掌握端口扫描的唯一障碍就是知识。这当然是汽车世界所不能比的，
在那里，可能需要高超的技巧才能确定您需要一个压杆弹簧压缩机，接着您还得为它付数千美金。
大部分扫描类型只对特权用户可用。
这是因为他们发送接收原始报文，这在Unix系统需要root权限。
在Windows上推荐使用administrator账户，但是当WinPcap已经被加载到操作系统时，
非特权用户也可以正常使用Nmap。当Nmap在1997年发布时，需要root权限是一个严重的
局限，因为很多用户只有共享的shell账户。现在，世界变了，计算机便宜了，更多人拥有互联网连接
，桌面UNIX系统 (包括Linux和MAC OS
X)很普遍了。Windows版本的Nmap现在也有了，这使它可以运行在更多的桌面上。
由于所有这些原因，用户不再需要用有限的共享shell账户运行Nmap。
这是很幸运的，因为特权选项让Nmap强大得多也灵活得多。
虽然Nmap努力产生正确的结果，但请记住所有结果都是基于目标机器(或者它们前面的防火墙)返回的报文的。
。这些主机也许是不值得信任的，它们可能响应以迷惑或误导Nmap的报文。
更普遍的是非RFC兼容的主机以不正确的方式响应Nmap探测。FIN，Null和Xmas扫描
特别容易遇到这个问题。这些是特定扫描类型的问题，因此我们在个别扫描类型里讨论它们。
这一节讨论Nmap支持的大约十几种扫描技术。 一般一次只用一种方法，
除了UDP扫描(-sU)可能和任何一种TCP扫描类型结合使用。
友情提示一下，端口扫描类型的选项格式是-s*\*， 其中*\*
是个显眼的字符，通常是第一个字符。 一个例外是deprecated FTP
bounce扫描(-b)。默认情况下，Nmap执行一个
SYN扫描，但是如果用户没有权限发送原始报文(在UNIX上需要root权限)或者如果指定的是IPv6目标，Nmap调用connect()。
本节列出的扫描中，非特权用户只能执行connect()和ftp bounce扫描。
-sS (TCP SYN扫描)
:   SYN扫描作为默认的也是最受欢迎的扫描选项，是有充分理由的。
    它执行得很快，在一个没有入侵防火墙的快速网络上，每秒钟可以扫描数千个