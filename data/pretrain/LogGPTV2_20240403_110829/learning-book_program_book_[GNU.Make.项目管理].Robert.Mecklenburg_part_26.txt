-e's/[：]*:*//
-e's/*\\ssss//'
.P/s$Ss/.a-
-e's/ss$s/:/'$3.tmp>>$3.tmp
S（MV)$3.tmp $3
endef
-f-选项用来要求makedepend把它的依存信息写到标准输出。
gcc是makedepend或原生编译器的一个替代方案。gcc为依存信息的产生提供了一组
令人混乱的选项。对我们目前的需要来说，下面的做法似乎最恰当：
ifneq“S(MAKECMDGOALS)·*clean”
-include $(dependencies)
endif
#S(call make-depend,source-file,object-file,depend-file)
define make-depend
$（GCC)-MM
-MFS3
-MP
-MT$2
$(CFLAGS)
$（CPPFLAGS）
$（TARGET_ARCH）\
$1
endef
8.0:8.C
$(cal1 make-depend,S/dev/stderr
exit 1
fi
#将输出目录设成默认值，如果没有设定的话
if[I:$BINARY_DIR ”]
then
BINARY_DIR=S(SOURCE_DIR)_out
f i
#创建输出目录
mkdir --parents SBINARY_DIR
运行make
make --directory='SBINARY_DIR""$@"
这个特别的脚本有点花哨。它首先会在当前目录搜索makefile，然后会往上层目录查找，
直到找出makefile或是输出错误信息。然后，它会检查二进制文件树的变量是否被设定，
如果没有设定，就会把它设定成源文件目录附加“_out”。最后，它会创建输出目录并且
运行make。
如果这个编译过程将会在不同的平台上进行，那么你需要使用某个方法来区分不同的平
台。最简单的做法，就是要求开发人员为每种平台设定一个环境变量，并且在makefile
中加人条件语句来判断此变量。较好的做法，就是根据uname的输出自动设定平台的类
型。
space :=S（empty)$（empty)
export MACHINE:=$（subst $（space）,-,S（she11 uname -smo))
如果编译过程是由cron自动调用的，我发现通过辅助shell脚本会比让cron调用make
本身还好。辅助shel1脚本可以对初始设定、错误恢复以及自动编译的结束工作提供较佳
的支持。此脚本也是一个适合用来设定变量和命令行参数的地方。
最后，如果你的项目支持一组固定的文件树和平台，你可以使用目录名称自动区分当前
的编译过程。例如
ALL_TREES:=/bui1ds/hp-386-windows-optimized\
/bui1ds/hp-386-windows-debug
/builds/sgi-irix-optimzed
/builds/sgi-irix-debug
/builds/sun-solaris8-profiled
/builas/sun-solaris8-debug
BINARY_DIR := S（foreach t,S（ALL_TREES）,\
$（filter $(ALL_TREES)/&,S(CURDIR)))
BUILD_TYPE ：=$（notdir $（subst-./.S（BINARY_DIR)))
---
## Page 178
168
第八章
MACHINE_TYPE := $(strip
$（subst/,-,
S(patsubst&/,,
$(dir
S(subst -,/,
$（notdirS（BTNARY_DIR)1)))))
目录与每个有效的二进制文件树，只有一个会匹配成功。一旦区分出二进制文件树，我
们就可以从编译目录名称中取出编译类型（例如optimized、debug或profiled）。我们可
以通过将破折号分隔符转换成斜线分隔符的方式以及使用notdir取出最后一个单词，
来获取目录名称中的最后一个部分。同样地，我们可以通过取出最后一个单词以及使用
相同的技术移除最后一个破折号来获取机器类型。
部分的源文件树
在相当大的项目中，只是调出与维护源代码就可能成为开发人员沉重的负担。如果一一个
项目由许多模块组成，而且有某个开发人员修改了部分的源代码，那么调出与编译整个
项目可能会成为一个时间黑洞。这个时候若能够在夜间进行一个集中管理的编译过程，
将可填补开发人员的源文件树和二进制文件树中的漏洞。
要这么做，需要进行两种搜索。首先，当编译器所需要的头文件缺少时，你必须指示make
搜索“引用源文件树”：其次，当makefile所需要的程序库缺少时，你必须指示make搜
索“引用二进制文件树”。为了协助编译器找到源文件，我们会在为当前目录指定-I选
项后加上额外的-I选项：为了协助make找到程序库，我们会为vpath加上额外的目录。
SOURCE_DIR:=../mp3_p1ayer
REF_SOURCE_DIR:=/reftree/src/mp3_player
REF_BINARY_DIR :=/binaries/mp3_player
include_dirs := 1ib $(SOURCE_DIR)/1ib $(SOURCE_DIR)/include
CPPFLAGS
+=S（addprefix-I,S（include_dirs))
$（addprefix-I S（REF_SOURCE_DIR)/,S（include_dirs))
vpathg.h
$(include_dirs)
$（addprefix S(REF_SOURCE_DIR)/.$(include_dirs))
vpath.a
$（addprefix S(REF_BINARY_DIR)/1lib/,codec db ui)
这个做法是假设CVS调出动作的“粒度”（大小范围）为一个程序库或程序模块。在此
状况下，make可能会跳过短缺的程序库或程序模块目录，如果开发人员选择不调出它
们的话。但是当make需要使用这些程序库时，搜索路径会自动填人缺少的文件。
在这个makefile中，我们会以modules变量列出可用来找到module.mk文件的目录列
表。如果其中的某个目录不会被调出，你就必须编辑此列表将该子目录移除。你也可以
使用wildcard来设定modules变量：
---
## Page 179
C与C++
169
modules:=$（dir S（wildcard1ib/*/module.mk))
这个表达式将会找到包含了module.mk的所有子目录，并且返回目录列表。请注意，经
过dir函数的处理，每个目录都会包含一个结尾的斜线符号。
当然，make也可以在单独的文件层上管理部分的源文件树，通过从开发人员当前的文
件树中收集二进制文件以及从引用树中收集缺少的文件来建立程序库。然而，就我们的
经验来说，这是个相当麻烦的工作、而且开发人员也不喜欢这么做。
引用编译结果、程序库以及安装程序
此刻，实现引用编译结果所需要的每样东西我们已经介绍得非常多了。自定义一个顶层
的makefile来支持此功能一点都不难，我们只需要以？=运算符对SOURCE_DIR和
BINARY_DIR进行赋值的动作就行了。通过crOn运行的脚本基本上应该进行以下动作：
1.
将输出重定向以及设定多个记录文件
2.
清理旧版的编译结果以及清理引用源文件树
3.
调出新的源文件
4.
设定源文件和二进制文件目录变量
5.
调用make
6.在
在记录文件中查找错误
7.产生标记文件，并且有可能要更新locate数据库（注2）
8.发送关于编译成功或失败的信息
在“引用编译结果”模型中，若能维护一组旧的编译结果，就不怕有人不小心毁坏了文
件树。我通常会保存一周或两周的夜间编译结果。当然，夜间编译脚本会把它的输出记
录到文件里，存储在编译结果的附近，而且脚本会清除旧的编译结果和记录文件。在记
录文件中搜索错误通常会使用awk脚本来进行。为了判断编译结果是否有效，我会为每
个makefile加人一个validate工作目标。此工作目标将会对被编译的其他工作目标进
行简单的确认。
.PHONY:validate_bui1d
validate_build:
test S(foreach f,S(RELEASE_FILES),-s Sf -a)-e，
注2：
locate数据库中包含了文件系统上所有文件名的索引。当你要以名称来查找文件时，这
是比较快的方法。我发现这个数据库非常适合用来管理大型的源文件树，而且当编译结
果完成之后、你会想要在夜间对它进行更新的动作。
---
## Page 180
170
第八章
此脚本只会测试一组你所需要的文件是否存在而且非空白。当然，这并不是一个正式的
检查，这只是在对编译的结果做简单的“健康检查”（sanitycheck）。如果此项测试返
回失败的结果，make就会返回失败的结果，于是夜间编译脚本（nightlybuildscript）
最后所留下的符号链接将会指向旧的编译结果。
第三方程序库（third-partylibrary）总是有点难管理。我同意一般人所认为的，将大型
的二进制文件存入CVS并不恰当。这是因为CVS无法存储二进制文件的前后版本差异
之处，所以底层的RCS文件可能会变得非常庞大。非常大型的文件在CVS仓库中会使
许多常用的CVS操作变慢，因此会对项目的开发造成影响。
如果第三方程序库并未存人CVS，那么你必须使用其他方法来管理它们。我们目前偏好
的做法就是在引用树中为程序库创建一个目录，以及在目录名称里记录程序库的版本编
号，如图8-1所示。
reftree
third_party
oradle-8.0.7sp2
orade-9.0.1.1
图8-1：第三方程序库的目录布局
makefile将会引用这些目录名称：
ORACLE_9011_DIR ?=/reftree/third_party/oracle-9.0.1.1/Ora90
ORACLE_9011_JAR ?=$(ORACLE_9011_DIR)/jdbc/1ib/classes12.jar
当厂商更新其程序库时，我们就会在引用树中创建一个新的目录并在makefile里声明新
的变量。这样，makefile在标记（tag）和分支（branch）被适当维护的状况下，总是可
以明确反映其所用的版本。
安装程序也很麻烦。我相信，把基本的编译过程与创建“安装程序图像”（installerimage）
的过程分开，是件好事。当前的安装程序工具既复杂又容易出问题，把它们存放到（同
常也是既复杂又容易出问题的）编译系统中将会产生难以维护的系统。倒不如让基本的
编译过程将它的结果写人一个“发行版”的目录中，使得这个目录包含安装程序编译工
具需要用到的所有（或大部分）数据。而且这个工具可能会通过它自己的makefile的驱
动，最后产生出可执行的“安装程序图像”。
---
## Page 181
第九章
Java
许多Java开发人员喜欢使用集成开发环境（IntegratedDevelopmentEnvironment，简
称IDE），比如Eclipse。读者可能会问，既然已经有JavaIDE和Ant可用，还需要在
Java项目上使用make吗？本章将会探索在此类状况下使用make有什么好处，特别是，
读者会看到一个通用的makefile稍加修改几平就可以使用在任何的Java项目上，而且可
以完成所有标准的重编译工作。
使用make来处理Java将会引发某些问题，也带来了若干机会。这么做，主要是考虑到
三项因素：Java编译器javac的运行速度非常快：标准的Java编译器支持@filename
语法，可用来从一个文件中读取“命令行参数”；如果用到Java包，必须提供相应的.class
文件的路径名称。
标准的Java编译器的运行速度非常快，这主要与import指令的工作方式有关。如同C
语言的#include，这个指令可用来访问外部所定义的符号。然而，Java只会直接读取
类文件，而不会重新读取源代码，因为这会需要进行重新解析与分析的动作。由于编译
期间，类文件中的符号并不会有所改变，所以编译器会将类文件隐藏起来。这意味着，
相比较于C语言，在中型项目里，Java编译器会避免逐字重新读取、剖析和分析上百方
行程序代码。大部分Java编译器所进行的是最基本的优化动作，这对效能的改进并不大。
事实上，Java的效能主要是靠Java虚拟机（Javavirtualmachine，简称JVM）本身所
进行的较为复杂的即时（just-in-time，简称JIT）优化动作。