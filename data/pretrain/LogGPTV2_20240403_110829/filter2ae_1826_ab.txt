    BaseToRetTaintTransferMethod("").
如上述，doop自有的jackee规则肯定没有包含我们自定义的注解，所以需要在EntryPointClass、Mockobj等关系定义中添加对我们自定义的class污点注解的识别。
    EntryPointClass(?type) :-       //...
       Type_Annotation(?type, "org.apache.commons.text.TestctxTaintedClassAnnotation");
    //...
    MockObject(?mockObj, ?type) :-      //...
       Type_Annotation(?type, "org.apache.commons.text.TestctxTaintedClassAnnotation");
同时也需要添加param污点的注解。doop需要通过这些注解识别分析入口方法，构建污点mockobj，建立初始的指向关系等。
    //...
    mainAnalysis.VarPointsTo(?hctx, cat(cat(cat(cat(?to, "::: "), ?type), "::: "), "ASSIGN"), ?ctx, ?to) :-      FormalParam(?idx, ?meth, ?to),
      (Param_Annotation(?meth, ?idx, "org.springframework.web.bind.annotation.RequestParam");
      Param_Annotation(?meth, ?idx, "org.springframework.web.bind.annotation.RequestBody");
      Param_Annotation(?meth, ?idx, "org.apache.commons.text.TestctxTaintedParamAnnotation");
为了确保方法的可达性，我们还添加了：
    ImplicitReachable("") :- isMethod("").
但后续看不一定有必要，仅供参考。
通过注解我们在规则中定义了source，接下来需要定义sink，我们将ScriptEngine的eval方法定义为sink：
    LeakingSinkMethodArg("default", 0, method) :- isMethod(method), match("", method).
正如前述，由于是在app
only下，doop下通过OpaqueMethod关系过滤了jdk类的识别，这样会导致相应的上述预置的污点转移函数无法完成污点转移，所以需要另外定制规则流去将转移函数包含进数据流分析过程。
于是需要定义OptTaintedtransMethodInvocationBase关系，
    .decl OptTaintedtransMethodInvocationBase(?invocation:MethodInvocation,?method:Method,?ctx:configuration.Context,?base:Var)
    OptTaintedtransMethodInvocationBase(?invocation,?tomethod,?ctx,?base) :-      ReachableContext(?ctx, ?inmethod), 
    //Reachable(?inmethod),
      Instruction_Method(?invocation, ?inmethod),
      (
      _VirtualMethodInvocation(?invocation, _, ?tomethod, ?base, _);
      _SpecialMethodInvocation(?invocation, _, ?tomethod, ?base, _)
      ).
在此基础上，为了完成新的污点转移，doop需要根据以下自定义规则分析出返回值的类型信息
    .decl MaytaintedInvocationInfo(?invocation:MethodInvocation,?type:Type,?ret:Var)
    MaytaintedInvocationInfo(?invocation, ?type, ?ret) :-      Method_ReturnType(?method, ?type),
      MethodInvocation_Method(?invocation, ?method),
      AssignReturnValue(?invocation, ?ret).
    .decl MaytaintedTypeForReturnValue(?type:Type, ?ret:Var, ?invocation:MethodInvocation)
    MaytaintedTypeForReturnValue(?type, ?ret, ?invocation) :-      MaytaintedInvocationInfo(?invocation, ?type, ?ret),
      !VarIsCast(?ret).
基于以上的污点转移过程分析规则，应用到污点变量的转移分析规则中
    VarIsTaintedFromVar(?type, ?ctx, ?ret, ?ctx, ?base) :-      //mainAnalysis.OptTaintedtransMethodInvocationBase(?invocation,?method,?base),
      mainAnalysis.OptTaintedtransMethodInvocationBase(?invocation,?method,?ctx,?base),
      MaytaintedTypeForReturnValue(?type, ?ret, ?invocation),
      BaseToRetTaintTransferMethod(?method).
      //mainAnalysis.VarPointsTo(_, _, ?ctx, ?base).
同时也需要重新定义LeakingSinkVariable关系，因为我们这里自定义的sink方法也是Opaque方法，这样才能识别到我们的ScriptEngine
的eval方法。
    LeakingSinkVariable(?label, ?invocation, ?ctx, ?var) :-      LeakingSinkMethodArg(?label, ?index, ?tomethod),
      mainAnalysis.OptTaintedtransMethodInvocationBase(?invocation,?tomethod,?ctx,?base),
      //mainAnalysis.VarPointsTo(_, _, ?ctx, ?base),//here problem
      ActualParam(?index, ?invocation, ?var).
从上面规则的定义可以看出，改造的流程还是比较清晰的，并且通过关系的名字，这些关系的含义和用途也很容易理解。添加这些自定义规则到我们的doop分析中运行，在结果中可以看出，doop完成了对commons
text的污点信息流的识别。
在结果集中的LeakingTaintedInformation.csv文件中可以找到我们需要捕捉到的souce-sink流，
    default default >   /javax.script.ScriptEngine.eval/0 /@parameter0
LeakingTaintedInformation.csv给出了污点信息。包括污点的标签（这里是默认的default，可以自定义），sink方法的调用信息，该sink方法对应的污点源头souce信息。
如上图可以看出org.apache.commons.text.lookup.ScriptStringLookup: java.lang.String
lookup(java.lang.String)中调用到javax.script.ScriptEngine.eval，并且污点的源头是org.apache.commons.text.StringSubstitutor:
java.lang.String replace(java.lang.String)方法的参数parameter0。
同时，在结果集中的AppTaintedVar.csv文件也可以看到具体的应用代码中由于污点传播过程中的被污染的变量.以上面commons text
漏洞执行方法栈中的resolveVariable方法为例：
可以看出方法中被污染的入参variableName、buf，还有resolver，以及$stack7等(这是经过soot生成jimple的过程中SSA
pack部分优化新增的栈变量)。
基于这两个结果集基本可以看出漏洞的触发流程或者说污点的传播过程（虽然不是特别直观），如果需要也可以再搭配生成的CallGraphEdge.csv去更方便的进行分析。
### 四、总结
doop直接用来分析大型项目需要一定的计算资源，并且无论是规则的定制还是分析结果查看都不是特别直观，毕竟它的设计初衷就是一款分析框架，用在实际漏扫漏洞挖掘中可能需要进一步包装修改
。但可以看出，doop作为一款优秀的开源静态分析框架，在算法上毋庸置疑是比较先进和丰富的，而且基于开源的算法规则，我们可以任意去定制我们需要的分析逻辑。其与codeql在设计思路也较为相近，将程序信息提取后生成数据库，开放查询接口，将程序分析转变为数据关系的查询，可以扩展出更多的用途。
目前网上深入分析doop的文章不是特别多，笔者水平有限平时也无时间投入做专门技术研究，希望师傅们指正和私信交流。