
4
4
privDB [25]
GOR [19]
PDB [1]
SPADE [12]
Secret key
Public key
Group Signature







4
TREAD compared favourably to the best published solu-
tions. The instance based on the group-signature scheme
is fully anonymous and provides TF-resistance, in contrast
to the solution presented in [19], while simply having to
(cid:1)n to
slightly relax the MF-resistance probability (from (cid:0) 1
(cid:0) 3
(cid:1)n, which imposes to double the number of time-critical
2
rounds to achieve the same security level). In fact, it has
the best security properties of any fully anonymous protocol
not relying on any artiﬁcial and ineﬃcient extraction mech-
anism. It almost matches the TF, MF and distance-fraud
(DF) resistance of the best proven solutions [6, 17] while
providing full anonymity. Finally, the instance based on
the public-key scheme achieves slightly less MF-resistance
than the Swiss-Knife protocol attains with a symmetric key.
However, the latter has not been formally proven. In fact, a
minor attack has been presented against it [5].
801Related Work. Since the introduction of DB protocols in
1993 by Brands and Chaum [10], new threats have emerged
against contactless communications. They can be classiﬁed
depending on whether the adversary is an external entity or
a legitimate but malicious prover. The former case includes
attacks in which the adversary illegitimately authenticates,
possibly using a far-away honest prover (Maﬁa Fraud ), or
in which the adversary plays against a simpliﬁed version
of the protocol without any distance estimation (Imperson-
ation Fraud ). The latter case includes attacks featuring a
legitimate but malicious prover who wants to fool the veriﬁer
on the distance between them (Distance Fraud ), sometimes
using the presence of an honest prover close to the veriﬁer
(Distance Hijacking). It also tackles a malicious prover help-
ing an accomplice to authenticate (Terrorist Fraud ), which
is the most diﬃcult attack to counter.
The classical countermeasures against TF rely on the as-
sumption that a malicious prover does not trust his accom-
plice enough to simply give him directly his authentication
credentials (i.e., any potential long-term secret key). TF
resistance is generally implemented by making the authenti-
cation of the accomplice very diﬃcult if the prover does not
leak away a signiﬁcant fraction of his long-term key. While
intuitively achieving this objective is not diﬃcult, proving
that a protocol is TF-resistant is problematic. So far, all
the proofs proposed in the literature have relied on artiﬁcial
mechanisms, such as trapdoors, secret leakage, secret sharing
schemes and extractors. These mechanisms allow an accom-
plice to extract the long-term secret key of his companion
prover if he can authenticate with a non-negligible probabil-
ity. Thus, once the accomplice has retrieved this key, he can
impersonate at will the targeted prover. Hence, these arti-
ﬁcial mechanisms are mainly used to deter rational provers
from helping potential accomplices. For instance, Fischlin
and Onete [17] proposed a special mode (i.e., a trapdoor)
allowing the adversary to authenticate if he knows a tar-
geted string close in terms of Hamming distance to the long-
term secret key of the prover. Very recently, Bultel and co-
authors [12] used the same approach to introduce SPADE, a
fully anonymous TF-resistant protocol. In SPADE, there is
a trade-oﬀ to set in the analysis of the MF and TF resistance
probabilities. This trade-oﬀ balances the information given
to the accomplice by the prover and the information inferred
from the trapdoor, which leads to unusual resistance proba-
bilities for these properties. An important drawback of this
approach is that it does not easily support scattered veriﬁers.
In such a case, the veriﬁers may have to share a common de-
cryption key to respond to the trapdoor queries. Otherwise,
the accomplice would be able to impersonate his partnering
prover only with the given veriﬁer, which is a threat that
the prover may accept. Finally, another drawback of this
solution is that a malicious veriﬁer is able to replay the re-
ceived information and impersonate a given prover, which
constitutes a major threat against the latter.
In their SKI protocols [7], Boureanu, Mitrokotsa and Vau-
denay used a leakage scheme allowing an adversary to re-
trieve the long-term secret key used several times by a prover.
This technique is reused in the DBopt protocols [9]. Avoine,
Lauradoux, and Martin [3] used a classical secret-sharing
scheme to resist to terrorist frauds, which consists in sharing
the prover’s long-term secret using a (n, k)-threshold cryp-
tographic scheme. Upon reception of a challenge, a prover
should send a share back to the veriﬁer. The key point
is that an accomplice must know all the shares to be able
to successfully respond to any challenge, but then he could
retrieve the prover’s long-term secret. In this case, the chal-
lenges sent during the time-critical phase can no longer be
binary messages. Furthermore, the scheme neither considers
distance fraud, nor addresses the issue of privacy. Finally,
Vaudenay [26] relies on extractor schemes to recover a string
close to the long-term secret key from the view of all nearby
participants after a TF attempt. All these solutions depend
on computationally-expensive primitives. Overall, TREAD
has a simpler analysis than any of these protocols with the
same security properties. In addition, as these solutions rely
explicitly on long-term secret keys, they present serious chal-
lenges for developing strong privacy properties.
While a lot of eﬀort has gone in proposing secure DB
protocols, the research community has only recently inves-
tigated privacy issues linked to distance bounding. Consid-
ering the amount of information that can be inferred from
the location history of an individual [18], protecting pri-
vacy becomes a critical issue for the wide acceptance of such
technology. To address this concern, two aspects have to be
considered: (1) the protection of the privacy of the provers
with respect to eavesdroppers and (2) the protection of the
anonymity of the provers with respect to curious veriﬁers.
Anonymous DB protocol against external adversaries have
been introduced recently [20]. Gambs, Onete and Robert [19]
extended this notion to deal with honest-but-curious and
malicious veriﬁers, which try to proﬁle legitimate provers
by linking their authentication sessions. They proposed an
extension of the HPO protocol [20] in which the provers are
managed as a group. Though they addressed the classical
MF, DF and IF, they did not consider TF. Recently, Vau-
denay [25] proposed a generic solution to add privacy to
DB protocols with respect to external eavesdroppers, which
relies on an authenticated key-exchange build on top of a
one-time secure DB protocol. Unfortunately, it does not
provide neither TF -esistance nor anonymity against honest-
but-curious or malicious veriﬁers.
Finally, Ahmadi and Safavi-Naini [1] gave a TF-resistant
protocol PDB, which protects the anonymity of the prover
by ﬁxing weaknesses of the DBPK-log protocol [13]. The
prover shows with a classical zero-knowledge proof that he
possesses the secret key used during the protocol and its
signature issued by a trusted authority. Unfortunately, this
solution does not allow to revoke the credential of a prover
without adding too much complexity and damaging the ro-
bustness of the scheme. Furthermore, since the authentica-
tion is anonymous, there is no way to distinguish whether a
session uses a given stolen secret key or not. Compared to
this protocol, TREAD guarantees the anonymity of its users
through a group signature scheme. This enables an eﬃcient
management of users (i.e., adding and revoking users) and a
clear separation of duties (e.g., adding, revoking and lifting
the anonymity can be done by separate authorities).
Overall, more than forty DB protocols have appeared since
1993. Unfortunately, based on a recent survey [11] only few
of them have not been broken yet.
Outline. In the next section, we describe our generic con-
struction providing TF-resistance and three of its possible
instantiations. Afterwards, in Section 3, we introduce the
security models and prove the main security properties of
our solutions before concluding in Section 4.
8022. THE TREAD INSTANTIATIONS
In this section, we present TREAD, a generic construction,
which encompasses all the desirable properties of a secure
DB protocol. To counter terrorist-fraud attack, the usual
strategy is to ensure that if a malicious prover gives his ac-
complice both responses for a given challenge, he can recover
one bit of the prover’s long-term secret key x as shown in
Figure 1. If the accomplice is able to authenticate with a
non-negligible probability, he probably knows a large frac-
tion of x and can use it to retrieve the full secret through the
available extraction mechanism. Thus, any rational prover
should not accept to go that far. Even though intuitively
clear in general, the security of such approach is hard to
prove formally. Our approach aims at avoiding this pitfall.
2.1 The generic construction TREAD
TREAD requires as building blocks an IND-CCA2-secure
encryption scheme E (either a symmetric-key or public-key
scheme) and an EUF-CMA-secure signature scheme S. The
given instantiations gradually move from a computationally-
eﬃcient symmetric protocol to a prover-anonymous one, in
which a secure group-signature scheme is required.
As shown in Figure 2, our scheme relies on strong design
choices. Our ﬁrst design choice is to enable a prover to
choose the values of the response strings α and β, which
he then sends signed and encrypted in his initial message e
to the veriﬁer. The encryption hides these values from an
eavesdropper, but they can be used by the prover (or a TF
accomplice) to replay the protocol. In addition, a malicious
veriﬁer could also do the same and replay the information
against another veriﬁer. The veriﬁer simply responds to the
initial message with a random binary string m to prevent
trivial DF attacks in which a malicious prover selects α = β.
During the time-critical phases, the response to challenge ci
is computed as αi if ci = 0 and βi ⊕ mi otherwise.
Most existing DB protocols do not enable the prover to
generate the response strings α and β, due to the fact that
provers are potentially malicious and may attempt to cheat
by selecting convenient values. Hence, these strings are usu-
ally computed as the output of a pseudo-random function
(PRF) on nonces selected independently both by the veriﬁer
and the prover. Unfortunately, this is not suﬃcient to pre-
vent provers from inﬂuencing the values α||β [5, 11]. Indeed
as mentioned earlier, there is a potential attack against the
Swiss-Knife protocol [21] based on the use of a weak PRF [5].
Our ﬁrst design choice is motivated by a simple observa-
tion.
If a malicious prover can control the PRF in some
cases, we can further assume that he chooses the response
strings. If a protocol can thwart such provers, it should a
fortiori resist to provers only manipulating the PRF.
A novel approach. Our second design choice is a funda-
mental shift compared to previous approaches existing in the
distance-bounding literature. Our strategy is not to force
the prover to leak his secret to his accomplice. Rather, we
design the protocol such that, if the prover helps his ac-
complice to authenticate, the latter can simply replay suc-
cessfully this information in future sessions. Thus, rational
provers will refuse to cooperate in the ﬁrst place. The dif-
ﬁculty is to ensure that only TF accomplices beneﬁt from
this strategy, and not regular Man-in-the-Middle (MiM) ad-
versaries.
In our construction, anyone knowing proper responses cor-
responding to a given initial message e can adapt them to
any new string m generated by the veriﬁer. This seems to go
against the intuition that authentication protocols need to
ensure freshness (usually through a veriﬁer-generated nonce)
to prevent replay attacks. Indeed, a MiM adversary can ob-
serve a session and learn about half the bits of the strings α
and β corresponding to an authenticated commitment e. He
may then replay e and the responses known to him. How-
ever, this adversary must still guess on average n
2 values.
The counter-intuitive second design choice has important
implications with regards to TF-resistance. Consider the
scenario in which an accomplice is helped by a malicious
prover to authenticate. If the accomplice replays the initial
message e in a latter session, he would be able to adapt
the information given by the prover, which allows him to re-
authenticate without the help of the prover with at least the
same probability as in the ﬁrst attempt. Moreover, if this
probability is non-negligible, he is even able to amplify it in
such a way that, after a polynomial number of interactions
with the veriﬁer (without the prover), he gains the ability to
impersonate the prover with a probability very close to 1.
Based on our design choices, we propose our generic con-
struction TREAD. It can be instantiated with a public iden-
tity (idpub(P )) in the classical non-anonymous case (in which
the private identity idprv(P ) is useless and can be set to null)
or with a private identity (idprv(P )) in the private and the
anonymous settings (in which the public identity must be
set to null). More details are given in the next section.
These identities are used (among other things) to retrieve
the corresponding decryption/veriﬁcation keys.
Definition 1
(TREAD). The construction is composed
of ﬁve algorithms and parametrized by an IND-CCA2-secure
encryption scheme E, an EUF-CMA-secure signature scheme
S, as well as a deﬁnition for idprv(·) and idpub(·) and a
distance bound dmax such that messages cover this distance
within a time tmax
2 .
DB.gen(1λ) is the algorithm run by an honest party, setting
up the encryption scheme E and the signature scheme
S for a security parameter λ. It returns the number of
the time-critical rounds n, which is a function of λ.
DB.prover(ek, sk) is the algorithm executed by the prover in
Figure 2. The prover draws a random value α||β from
the uniform distribution on {0, 1}2n. Then, he com-
putes a signature σp on it with S.sigsk(α||β||idprv(P )).
Afterwards, he gets e = E.encek(α||β||idprv(P )||σp) and
sends e||idpub(P ). Finally, during the n time-critical
rounds, he receives a challenge bit ci and responds with
ri = (αi ∧ ¬ci) ∨ ((βi ⊕ mi) ∧ ci).
DB.veriﬁer(ID, dk, vk, UL, RL) is the algorithm executed by the
veriﬁer interacting with a prover identiﬁed as ID. De-
pending on the context, this identiﬁer can be directly
the identity of a prover (idpub(P )) or the name of a
group (idprv(P )) for anonymous authentication. More-
over depending on the context, the veriﬁer has access
to the lists of legitimate provers UL and revoked ones
RL. He then expects to receive an initial message e
and deciphers it as (α||β||idprv(P )||σp) = E.decdk(e).
If σp is invalid ( i.e., S.vervk(σp, α||β||idprv(P )) = 0),