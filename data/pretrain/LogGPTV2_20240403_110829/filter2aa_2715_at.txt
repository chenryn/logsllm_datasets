X 10.1, network resources are  
mounted in /private/Network with 
symbolic links. OS 10.3, various 
network resources (mainly 
servers) appear dynamically in 
/Network 
/opt/ 
Optional installations such as 
X11 
/private/ 
On typical Unix system tmp, var, 
etc, and cores directories would 
be located. 
/sbin/ 
Contains executables for system 
administration and configuration 
/System/ 
Contains system related files, 
libraries, preferences, critical 
for the proper function of Mac OS 
X 
/tmp/ 
Symbolic link to /private/tmp and 
holds temporary files and caches, 
which can be written by any user.  
190 
/User Information/ -> 
/Library/Documentation/User 
Information.localized  
PDF Manuals 
/Users/ 
All user accounts on the machine 
and their accompanying unique 
files, settings, etc.  
/usr/ 
Contains BSD Unix applications 
and support files. Includes 
subdirectories that contain 
information, configuration files, 
and other essentials used by the 
operating system 
/var/ 
Symbolic link to /private/var and 
contains miscellaneous data, 
configuration files and 
frequently modified files, such 
as log files.  
/vm/ 
Used to store the swap files for 
Mac OS X’s virtual memory & 
contents of RAM for sleep 
operations. 
/Volumes/ 
Mounted devices and volumes, 
either virtual or real. Hard 
disks, CD’s, DVD’s, DMG mounts 
and the boot volume 
REFERENCE: 
https://community.malforensics.com/t/root-directory-structure-in-mac/172 
https://coderwall.com/p/owb6eg/view-folder-tree-in-macosx-terminal 
M
M 
MACOS_Tricks 
ALL 
MISC 
MacOS 
Generate Secure Password & Copy to Clipboard 
LC_ALL=C tr -dc "[:alnum:]" ^[\w \(\)\-
\.]+)(\b|\))\s{3,}(?P[\d]+)\s+(?P[\d\.]+)\s+(?P[\d\.]+)\s+(?P[\d\.]+)\s+(?P[\d\.]+)\s+(?P[\d\.]+)\s+(?P[\d
\.]+)\s+(?P[\d\.]+)\s+(?P[\d\.]+)\s+(?P[\d\.]+)\s+(?P[\d\.]+)" 
macOS CONFIGURATION 
Join a Wi-Fi Network 
networksetup -setairportnetwork en0 WIFI_SSID WIFI_PASSWORD 
192 
Turn WIFI Adapter On 
networksetup -setairportpower en0 on 
Firewall Service 
# Show Status 
sudo /usr/libexec/ApplicationFirewall/socketfilterfw --
getglobalstate 
# Enable 
sudo /usr/libexec/ApplicationFirewall/socketfilterfw --
setglobalstate on 
# Disable (Default) 
sudo /usr/libexec/ApplicationFirewall/socketfilterfw --
setglobalstate off 
Remote Apple Events 
# Status 
sudo systemsetup -getremoteappleevents 
# Enable 
sudo systemsetup -setremoteappleevents on 
# Disable (Default) 
sudo systemsetup -setremoteappleevents off 
AirDrop 
# Enable AirDrop over Ethernet and on Unsupported Macs 
defaults write com.apple.NetworkBrowser BrowseAllInterfaces -bool 
true 
# Enable (Default) 
defaults remove com.apple.NetworkBrowser DisableAirDrop 
# Disable 
defaults write com.apple.NetworkBrowser DisableAirDrop -bool YES 
Force Launch Screen Saver 
# Up to Sierra 
open 
/System/Library/Frameworks/ScreenSaver.framework/Versions/A/Resourc
es/ScreenSaverEngine.app 
# From High Sierra 
/System/Library/CoreServices/ScreenSaverEngine.app/Contents/MacOS/S
creenSaverEngine 
Start Native TFTP Daemon 
#Files will be served from /private/tftpboot. 
sudo launchctl load -F /System/Library/LaunchDaemons/tftp.plist && 
\ 
sudo launchctl start com.apple.tftpd 
193 
Activate/Deactivate the ARD Agent and Helper 
# Activate And Restart the ARD Agent and Helper 
sudo 
/System/Library/CoreServices/RemoteManagement/ARDAgent.app/Contents
/Resources/kickstart -activate -restart -agent -console 
# Deactivate and Stop the Remote Management Service 
sudo 
/System/Library/CoreServices/RemoteManagement/ARDAgent.app/Contents
/Resources/kickstart -deactivate -stop 
Enable/Disable Remote Desktop Sharing 
# Allow Access for All Users and Give All Users Full Access 
sudo 
/System/Library/CoreServices/RemoteManagement/ARDAgent.app/Contents
/Resources/kickstart -configure -allowAccessFor -allUsers -privs -
all 
# Disable ARD Agent and Remove Access Privileges for All Users 
sudo 
/System/Library/CoreServices/RemoteManagement/ARDAgent.app/Contents
/Resources/kickstart -deactivate -configure -access -off 
Remove Apple Remote Desktop Settings 
sudo rm -rf /var/db/RemoteManagement ; \ 
sudo defaults delete 
/Library/Preferences/com.apple.RemoteDesktop.plist ; \ 
defaults delete 
~/Library/Preferences/com.apple.RemoteDesktop.plist ; \ 
sudo rm -r /Library/Application\ Support/Apple/Remote\ Desktop/ ; \ 
rm -r ~/Library/Application\ Support/Remote\ Desktop/ ; \ 
rm -r ~/Library/Containers/com.apple.RemoteDesktop 
REFERENCE: 
https://its-a-feature.github.io/posts/2018/01/Active-Directory-Discovery-
with-a-Mac/ 
https://github.com/herrbischoff/awesome-macos-command-line 
https://gist.github.com/its-a-feature/1a34f597fb30985a2742bb16116e74e0 
https://www.cmdsec.com/macos-performance-monitoring-collection/ 
M
M 
MACOS_Versions 
ALL 
INFORMATIONAL 
MacOS 
Version 
Date 
Darwin 
Latest 
Rhapsody Developer 
31-Aug-97  
DR2 
OS X Server 1.0 
16-Mar-99  
1.2v3 
OS X Developer 
16-Mar-99  
DP4 
OS X Beta Kodiak 
13-Sep-00 1.2.1 
194 
OS X 10.0 Cheetah 
24-Mar-01 1.3.1 
10.0.4 
OS X 10.1 Puma 
25-Sep-01 1.4.1 /5 10.1.5 
OS X 10.2 Jaguar 
24-Aug-02 6 
10.2.8 
OS X 10.3 Panther 
24-Oct-03 7 
10.3.9 
OS X 10.4 Tiger 
29-Apr-05 8 
10.4.11 
OS X 10.5 Leopard 
26-Oct-07 9 
10.5.8 
OSX 10.6 Snow Leopard 
09-Jun-08 10 
10.6.8 v1.1 
OS X 10.7 Lion 
20-Jul-11 11 
10.7.5 
OS X 10.8 Mountain Lion 25-Jul-12 
12 
10.8.5 
OS X 10.9 Mavericks 
22-Oct-13 13 
10.9.5 
OS X 10.10 Yosemite 
16-Oct-14 14 
10.10.5 
OS X 10.11 El Capitan 
30-Sep-15 15 
10.11.6 
macOS 10.12 Sierra 
20-Sep-16 16 
10.12.6 
macOS 10.13 High Sierra 25-Sep-17 17 
10.13.6 
macOS 10.14 Mojave 
24-Sep-18 18 
10.14.6 
macOS 10.15 Catalina 
7-Oct-19 
19 
10.15.2 
REFERENCE: 
https://en.wikipedia.org/wiki/MacOS 
M
M 
MALWARE_Resources 
BLUE TEAM 
REVERSE ENG 
ALL 
MALWARE REPOSITORIES 
Clean MX 
Realtime database of malware and malicious domains. 
http://support.clean-mx.de/clean-mx/viruses.php 
Contagio  
A collection of recent malware samples and analyses. 
http://contagiodump.blogspot.com/ 
Exploit Database  
Exploit and shellcode samples. 
https://www.exploit-db.com/ 
Infosec - CERT-PA  
Malware samples collection and analysis. 
https://infosec.cert-pa.it/analyze/submission.html 
InQuest Labs  
Evergrowing searchable corpus of malicious Microsoft documents. 
https://labs.inquest.net/ 
Malpedia  
195 
A resource providing rapid identification and actionable context 
for malware investigations. 
https://malpedia.caad.fkie.fraunhofer.de/ 
Malshare  
Large repository of malware actively scrapped from malicious sites. 
https://malshare.com/ 
Objective-See 
MacOS malware samples 
https://objective-see.com/malware.html 
Tracker h3x  
Aggregator for malware corpus tracker and malicious download sites. 
http://tracker.h3x.eu/ 
VirusBay  
Community-Based malware repository and social network. 
https://virusbay.io 
VirusShare  
Malware repository, registration required. 
https://virusshare.com/ 
Zeltser's Sources  
A list of malware sample sources put together by Lenny Zeltser. 
https://zeltser.com/malware-sample-sources/ 
VX-UNDERGROUND 
Polyswarm supported malware samples free for all. 
https://vx-underground.org/ 
theZOO 
A repository of LIVE malwares for your own joy and pleasure. theZoo 
is a project created to make the possibility of malware analysis 
open and available to the public. https://thezoo.morirt.com 
https://github.com/ytisf/theZoo/tree/master/malwares/Binaries 
AlphaSecLab 
Malware writeups on samples 
https://github.com/alphaSeclab/awesome-rat 
COMMAMD & CONTROL RESEARCH 
C2 Matrix 
It is the golden age of Command and Control (C2) frameworks. The 
goal of this site is to point you to the best C2 framework for your 
needs based on your adversary emulation plan and the target 
environment. Take a look at the matrix or use the questionnaire to 
determine which fits your needs. 
https://www.thec2matrix.com/ 
196 
REFERENCE: 
https://github.com/rshipp/awesome-malware-analysis 
M
M 
MDXFIND / MDXSPLIT 
RED TEAM 
PASSWORD CRACKING 
ALL 
MDXFIND is a program which allows you to run large numbers of 
unsolved hashes of any type, using many algorithms concurrently, 
against a large number of plaintext words and rules, very quickly. 
It’s main purpose was to deal with large lists (20 million, 50 
million, etc) of unsolved hashes and run them against new 
dictionaries as you acquire them. 
So when would you use MDXFIND on a pentest? If you dump a database 
tied to website authentication and the hashes are not cracking by 
standard attack plans. The hashes may be generated in a unique 
nested hashing series. If you are able to view the source code of 
said website to view the custom hashing function you can direct 
MDXFIND to replicate that hashing series. If not, you can still run 
MDXFIND using some of the below ‘Generic Attack Plans’. MDXFIND is 
tailored toward intermediate to expert level password cracking but 
is extremely powerful and flexible. 
Example website SHA1 custom hashing function performing multiple 
iterations: 
$hash = sha1($password . $salt); 
for ($i = 1; $i  -i  dict.txt > 
out.txt 
2- Takes stdin from outside attack sources in place of dict.txt 
when using the options variable ‘-f’ to specify hash.txt file 
location and variable ‘stdin’. 
mp64.bin ?d?d?d?d?d?d | mdxfind -h  -i  -
f hash.txt stdin > out.txt 
197 
3- Specify file location ‘-f’ with no external stdout/stdin 
sources. 
mdxfind -h  -i  -f hash.txt dict.txt > 
out.txt 
[FULL LIST OF OPTIONS] 
-a 
Do email address munging 
-b 
Expand each word into unicode, best effort 
-c 
Replace each special char (<>&, etc) with XML equivalents 
-d 
De-duplicate wordlists, best effort...but best to do ahead 
of time 
-e 
Extended search for truncated hashes 
-p 
Print source (filename) of found plain-texts 
-q 
Internal iteration counts for SHA1MD5x, and others. For 
example, if you  
have a hash that is 
SHA1(MD5(MD5(MD5(MD5($pass)))))), you would set -q  
to 5. 
-g 
Rotate calculated hashes to attempt match to input hash 
-s 
File to read salts from 
-u 
File to read Userid/Usernames from 
-k 
File to read suffixes from 
-n 
Number of digits to append to passwords. Other options, 
like: -n 6x  
would append 6 digit hex values, and 8i would append 
all ipv4 dotted- 
quad IP-addresses. 
-i 
The number of iterations for each hash 
-t 
The number of threads to run 
-f 
file to read hashes from, else stdin 
-l 
Append CR/LF/CRLF and print in hex 
-r 
File to read rules from 
-v 
Do not mark salts as found. 
-w 
Number of lines to skip from first wordlist 
-y 
Enable directory recursion for wordlists 
-z 
Enable debugging information/hash results 
-h 
The hash types: 459 TOTAL HASHES SUPPORTED 
GENERIC ATTACK PLANS 
This is a good general purpose MDXFIND command to run your hashes 
against if you suspect them to be “non-standard” nested hashing 
sequences. This command says “Run all hashes against dict.txt using 
10 iterations except ones having a salt, user, or md5x value in the 
name.” It’s smart to skip salted/user hash types in MDXFIND unless 
you are confident a salt value has been used. 
cat hash.txt | mdxfind -h ALL -h ‘!salt,!user,!md5x’ -i 10 dict.txt 
> out.txt 
The developer of MDXFIND also recommends running the below command 
options as a good general purpose attack:  
cat hash.txt | mdxfind -h ‘^md5$,^sha1$,^md5md5pass$,^md5sha1$’ -i 
5 dict.txt > out.txt 
198 
And you could add a rule attack as well: 
cat hash.txt | mdxfind -h ‘^md5$,^sha1$,^md5md5pass$,^md5sha1$’ -i 
5 dict.txt   -r best64.rule > out.txt 
GENERAL NOTES ABOUT MDXFIND 
-Can do multiple hash types/files all during a single attack run.  
cat sha1/*.txt sha256/*.txt md5/*.txt salted/*.txt | mdxfind 
-Supports 459 different hash types/sequences 
-Can take input from special ‘stdin’ mode  
-Supports VERY large hashlists (100mil) and 10kb character 
passwords 
-Supports using hashcat rule files to integrate with dictionary  
-Option ‘-z’ outputs ALL viable hashing solutions and file can grow 
very large 
-Supports including/excluding hash types by using simple regex 
parameters 
-Supports multiple iterations (up to 4 billion times) by tweaking -
i parameter for instance: 
MD5x01 is the same as md5($Pass) 
MD5x02 is the same as md5(md5($pass)) 
MD5x03 is the same as md5(md5(md5($pass))) 
... 
MD5x10 is the same as 
md5(md5(md5(md5(md5(md5(md5(md5(md5(md5($pass)))))))))) 
-Separate out -usernames -email -ids -salts to create custom 
attacks 
-If you are doing brute-force attacks, then hashcat is probably 
better route 
-When MDXfind finds any solution, it outputs the kind of solution 
found, followed by the hash, followed by the salt and/or password. 
For example: 
Solution HASH:PASSWORD 
MD5x01 000012273bc5cab48bf3852658b259ef:1EbOTBK3 
MD5x05 033b111073e5f64ee59f0be9d6b8a561:08061999 
MD5x09 aadb9d1b23729a3e403d7fc62d507df7:1140 
MD5x09 326d921d591162eed302ee25a09450ca:1761974 
MDSPLIT 
When cracking large lists of hashes from multiple file locations, 
MDSPLIT will help match which files the cracked hashes were found 
in, while also outputing them into separate files based on hash 
type. Additionally it will remove the found hashes from the 
original hash file. 
COMMAND STRUCTURE THREE METHODS 1-STDOUT 2-STDIN 3-File 
1- Matching MDXFIND results files with their original hash_orig.txt 
files. 
199 
cat hashes_out/out_results.txt | mdsplit hashes_orig/hash_orig.txt 
OR perform matching against a directory of original hashes and 
their results. 
cat hashes_out/* | mdsplit hashes_orig/* 
2- Piping MDXFIND directly into MDSPLIT to sort in real-time 
results. 
cat *.txt | mdxfind -h ALL -h ‘!salt,!user,!md5x’ -i 10 dict.txt | 
mdsplit *.txt 
3- Specifying a file location in MDXFIND to match results in real-
time. 
mdxfind -h ALL -f hashes.txt -i 10 dict.txt | mdsplit hashes.txt 
GENERAL NOTES ABOUT MDSPLIT 
-MDSPLIT will append the final hash solution to the end of the new 
filename. For example, if we submitted a ‘hashes.txt’ and the 
solution to the hashes was “MD5x01” then the results file would be 
‘hashes.MD5x01’. If multiple hash solutions are found then MDSPLIT 
knows how to deal with this, and will then remove each of the 
solutions from hashes.txt, and place them into ‘hashes.MD5x01’, 
‘hashes.MD5x02’, ‘hashes.SHA1’... and so on. 
-MDSPLIT can handle sorting multiple hash files, types, and their 
results all at one time. Any solutions will be automatically 
removed from all of the source files by MDSPLIT, and tabulated into 
the correct solved files. For example: 
cat dir1/*.txt dir2/*.txt dir3/*.txt | mdxfind -h 
‘^md5$,^sha1$,^sha256$’ -i 10 dict.txt | mdsplit dir1/*.txt 
dir2/*.txt dir3/*.txt 
REFERENCE: 
https://hashes.org/mdxfind.php 
M
M 
METASPLOIT 
RED TEAM 
C2 
WINDOWS/LINUX/MacOS 
Metasploit is the world’s most used penetration testing framework. 
GENERAL INFO 
msfconsole 
Launch program 
version 
Display current version 
msfupdate 
Pull the weekly update 
makerc  
Saves recent commands to file 
msfconsole -r  
Loads a resource file 
200 
EXPLOIT/SCAN/MODULE 
use  
Set the exploit to use 
set payload  
Set the payload 
show options 
Show all options 
set   
Set a setting 
exploit or run 
Execute the exploit 
SESSION HANDLING 
sessions -l 
List all sessions 
sessions -i  
Interact/attach to session 
background or ^Z 
Detach from session 
DATABASE 
service postgresql Start 
Start DB 
msfdb Init 
Init the DB 
db_status 
Should say connected 
hosts 
Show hosts in DB 
services 
Show ports in DB 
vulns 
Show all vulns found 
METERPRETER SESSION CMDS 
sysinfo 
Show system info 
ps 
Show running processes 
kill  
Terminate a process 
getuid 
Show your user ID 
upload / download 
Upload / download a file 
pwd / lpwd 
Print working directory (local / 
remote) 
cd / lcd 
Change directory (local / remote) 
cat 
Show contents of a file 
edit  
Edit a file (vim) 
shell 
Drop into a shell on the target 
machine 
migrate  
Switch to another process 
hashdump 
Show all pw hashes (Windows only) 
idletime 
Display idle time of user 
screenshot 
Take a screenshot 
clearev 
Clear the logs 
METERPRETER PRIV ESCALATION 
use priv 
Load the script; Use privileges 
getsystem 
Elevate your privs 
getprivs 
Elevate your privs 
METERPRETER TOKEN STEALING 
use incognito 
Load the script 
list_tokens -u 
Show all tokens 
impersonate_token 
DOMAIN\USER Use token 
drop_token 
Stop using token 
METERPRETER NETWORK PIVOT 
portfwd [ADD/DELETE] -L 
 -l 3388 -r  -p 
3389 
Enable port forwarding 
route add   
Pivot through a session by adding 
a route within msf 
201 
route add 192.168.0.0/24 
Pivot through a session by adding 
a route within msf 
route add 192.168.0.0/24 -d 
Deleting a route within msf 
SEARCH 
EXPLOITS/PAYLOADS/MODULES 