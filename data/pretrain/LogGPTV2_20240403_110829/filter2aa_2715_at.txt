### macOS Directory Structure and Configuration

#### Directory Structure
- **/private/Network**: In macOS 10.1, network resources are mounted in this directory with symbolic links. In macOS 10.3, various network resources (mainly servers) appear dynamically in `/Network`.
- **/opt/**: Optional installations such as X11.
- **/private/**: On a typical Unix system, directories like `tmp`, `var`, `etc`, and `cores` would be located here.
- **/sbin/**: Contains executables for system administration and configuration.
- **/System/**: Contains system-related files, libraries, preferences, and other critical components for the proper functioning of macOS.
- **/tmp/**: A symbolic link to `/private/tmp` that holds temporary files and caches, which can be written by any user.
- **/User Information/**: A symbolic link to `/Library/Documentation/User Information.localized` containing PDF manuals.
- **/Users/**: All user accounts on the machine and their accompanying unique files, settings, etc.
- **/usr/**: Contains BSD Unix applications and support files, including subdirectories with information, configuration files, and other essentials used by the operating system.
- **/var/**: A symbolic link to `/private/var` that contains miscellaneous data, configuration files, and frequently modified files, such as log files.
- **/vm/**: Used to store swap files for macOS's virtual memory and contents of RAM for sleep operations.
- **/Volumes/**: Mounted devices and volumes, either virtual or real. This includes hard disks, CDs, DVDs, DMG mounts, and the boot volume.

**References:**
- [Root Directory Structure in Mac](https://community.malforensics.com/t/root-directory-structure-in-mac/172)
- [View Folder Tree in macOS Terminal](https://coderwall.com/p/owb6eg/view-folder-tree-in-macosx-terminal)

#### macOS Tricks
- **Generate Secure Password & Copy to Clipboard**:
  ```sh
  LC_ALL=C tr -dc "[:alnum:]" < /dev/urandom | head -c 12 | pbcopy
  ```

- **Join a Wi-Fi Network**:
  ```sh
  networksetup -setairportnetwork en0 WIFI_SSID WIFI_PASSWORD
  ```

- **Turn Wi-Fi Adapter On**:
  ```sh
  networksetup -setairportpower en0 on
  ```

- **Firewall Service**:
  - **Show Status**:
    ```sh
    sudo /usr/libexec/ApplicationFirewall/socketfilterfw --getglobalstate
    ```
  - **Enable**:
    ```sh
    sudo /usr/libexec/ApplicationFirewall/socketfilterfw --setglobalstate on
    ```
  - **Disable (Default)**:
    ```sh
    sudo /usr/libexec/ApplicationFirewall/socketfilterfw --setglobalstate off
    ```

- **Remote Apple Events**:
  - **Status**:
    ```sh
    sudo systemsetup -getremoteappleevents
    ```
  - **Enable**:
    ```sh
    sudo systemsetup -setremoteappleevents on
    ```
  - **Disable (Default)**:
    ```sh
    sudo systemsetup -setremoteappleevents off
    ```

- **AirDrop**:
  - **Enable AirDrop over Ethernet and on Unsupported Macs**:
    ```sh
    defaults write com.apple.NetworkBrowser BrowseAllInterfaces -bool true
    ```
  - **Enable (Default)**:
    ```sh
    defaults remove com.apple.NetworkBrowser DisableAirDrop
    ```
  - **Disable**:
    ```sh
    defaults write com.apple.NetworkBrowser DisableAirDrop -bool YES
    ```

- **Force Launch Screen Saver**:
  - **Up to Sierra**:
    ```sh
    open /System/Library/Frameworks/ScreenSaver.framework/Versions/A/Resources/ScreenSaverEngine.app
    ```
  - **From High Sierra**:
    ```sh
    /System/Library/CoreServices/ScreenSaverEngine.app/Contents/MacOS/ScreenSaverEngine
    ```

- **Start Native TFTP Daemon**:
  - Files will be served from `/private/tftpboot`.
    ```sh
    sudo launchctl load -F /System/Library/LaunchDaemons/tftp.plist && sudo launchctl start com.apple.tftpd
    ```

- **Activate/Deactivate the ARD Agent and Helper**:
  - **Activate And Restart the ARD Agent and Helper**:
    ```sh
    sudo /System/Library/CoreServices/RemoteManagement/ARDAgent.app/Contents/Resources/kickstart -activate -restart -agent -console
    ```
  - **Deactivate and Stop the Remote Management Service**:
    ```sh
    sudo /System/Library/CoreServices/RemoteManagement/ARDAgent.app/Contents/Resources/kickstart -deactivate -stop
    ```

- **Enable/Disable Remote Desktop Sharing**:
  - **Allow Access for All Users and Give All Users Full Access**:
    ```sh
    sudo /System/Library/CoreServices/RemoteManagement/ARDAgent.app/Contents/Resources/kickstart -configure -allowAccessFor -allUsers -privs -all
    ```
  - **Disable ARD Agent and Remove Access Privileges for All Users**:
    ```sh
    sudo /System/Library/CoreServices/RemoteManagement/ARDAgent.app/Contents/Resources/kickstart -deactivate -configure -access -off
    ```

- **Remove Apple Remote Desktop Settings**:
  ```sh
  sudo rm -rf /var/db/RemoteManagement
  sudo defaults delete /Library/Preferences/com.apple.RemoteDesktop.plist
  defaults delete ~/Library/Preferences/com.apple.RemoteDesktop.plist
  sudo rm -r /Library/Application\ Support/Apple/Remote\ Desktop/
  rm -r ~/Library/Application\ Support/Remote\ Desktop/
  rm -r ~/Library/Containers/com.apple.RemoteDesktop
  ```

**References:**
- [Active Directory Discovery with a Mac](https://its-a-feature.github.io/posts/2018/01/Active-Directory-Discovery-with-a-Mac/)
- [Awesome macOS Command Line](https://github.com/herrbischoff/awesome-macos-command-line)
- [MacOS Performance Monitoring Collection](https://www.cmdsec.com/macos-performance-monitoring-collection/)

### macOS Versions

| Version               | Date       | Darwin |
|-----------------------|------------|--------|
| Rhapsody Developer    | 31-Aug-97  | Latest |
| OS X Server 1.0       | 16-Mar-99  | 1.2v3  |
| OS X Developer        | 16-Mar-99  | DP4    |
| OS X Beta Kodiak      | 13-Sep-00  | 1.2.1  |
| OS X 10.0 Cheetah     | 24-Mar-01  | 1.3.1  |
| OS X 10.1 Puma        | 25-Sep-01  | 1.4.1  |
| OS X 10.2 Jaguar      | 24-Aug-02  | 6      |
| OS X 10.3 Panther     | 24-Oct-03  | 7      |
| OS X 10.4 Tiger       | 29-Apr-05  | 8      |
| OS X 10.5 Leopard     | 26-Oct-07  | 9      |
| OS X 10.6 Snow Leopard| 09-Jun-08  | 10     |
| OS X 10.7 Lion        | 20-Jul-11  | 11     |
| OS X 10.8 Mountain Lion| 25-Jul-12 | 12     |
| OS X 10.9 Mavericks   | 22-Oct-13  | 13     |
| OS X 10.10 Yosemite   | 16-Oct-14  | 14     |
| OS X 10.11 El Capitan | 30-Sep-15  | 15     |
| macOS 10.12 Sierra    | 20-Sep-16  | 16     |
| macOS 10.13 High Sierra| 25-Sep-17 | 17     |
| macOS 10.14 Mojave    | 24-Sep-18  | 18     |
| macOS 10.15 Catalina  | 07-Oct-19  | 19     |

**Reference:**
- [macOS Wikipedia](https://en.wikipedia.org/wiki/MacOS)

### Malware Resources

- **Clean MX**: Realtime database of malware and malicious domains.
  - [Link](http://support.clean-mx.de/clean-mx/viruses.php)

- **Contagio**: A collection of recent malware samples and analyses.
  - [Link](http://contagiodump.blogspot.com/)

- **Exploit Database**: Exploit and shellcode samples.
  - [Link](https://www.exploit-db.com/)

- **Infosec - CERT-PA**: Malware samples collection and analysis.
  - [Link](https://infosec.cert-pa.it/analyze/submission.html)

- **InQuest Labs**: Evergrowing searchable corpus of malicious Microsoft documents.
  - [Link](https://labs.inquest.net/)

- **Malpedia**: A resource providing rapid identification and actionable context for malware investigations.
  - [Link](https://malpedia.caad.fkie.fraunhofer.de/)

- **Malshare**: Large repository of malware actively scrapped from malicious sites.
  - [Link](https://malshare.com/)

- **Objective-See**: macOS malware samples.
  - [Link](https://objective-see.com/malware.html)

- **Tracker h3x**: Aggregator for malware corpus tracker and malicious download sites.
  - [Link](http://tracker.h3x.eu/)

- **VirusBay**: Community-Based malware repository and social network.
  - [Link](https://virusbay.io)

- **VirusShare**: Malware repository, registration required.
  - [Link](https://virusshare.com/)

- **Zeltser's Sources**: A list of malware sample sources put together by Lenny Zeltser.
  - [Link](https://zeltser.com/malware-sample-sources/)

- **VX-UNDERGROUND**: Polyswarm supported malware samples free for all.
  - [Link](https://vx-underground.org/)

- **theZOO**: A repository of LIVE malwares for your own joy and pleasure.
  - [Link](https://thezoo.morirt.com)
  - [GitHub](https://github.com/ytisf/theZoo/tree/master/malwares/Binaries)

- **AlphaSecLab**: Malware writeups on samples.
  - [GitHub](https://github.com/alphaSeclab/awesome-rat)

- **C2 Matrix**: The goal of this site is to point you to the best C2 framework for your needs based on your adversary emulation plan and the target environment.
  - [Link](https://www.thec2matrix.com/)

**Reference:**
- [Awesome Malware Analysis](https://github.com/rshipp/awesome-malware-analysis)

### MDXFIND / MDXSPLIT

- **MDXFIND**: A program that allows you to run large numbers of unsolved hashes of any type, using many algorithms concurrently, against a large number of plaintext words and rules, very quickly.

- **Usage Scenarios**:
  - If you dump a database tied to website authentication and the hashes are not cracking by standard attack plans, you can use MDXFIND to replicate the custom hashing function.
  - Tailored toward intermediate to expert level password cracking but extremely powerful and flexible.

- **Example Custom Hashing Function**:
  ```php
  $hash = sha1($password . $salt);
  for ($i = 1; $i < 10; $i++) {
      $hash = sha1($hash);
  }
  ```

- **Command Examples**:
  1. Basic usage:
     ```sh
     mdxfind -h ALL -i 10 dict.txt > out.txt
     ```
  2. Using stdin:
     ```sh
     mp64.bin ?d?d?d?d?d?d | mdxfind -h -i -f hash.txt stdin > out.txt
     ```
  3. Specifying file location:
     ```sh
     mdxfind -h -i -f hash.txt dict.txt > out.txt
     ```

- **Generic Attack Plans**:
  - General purpose command:
    ```sh
    cat hash.txt | mdxfind -h ALL -h ‘!salt,!user,!md5x’ -i 10 dict.txt > out.txt
    ```
  - Another recommended command:
    ```sh
    cat hash.txt | mdxfind -h ‘^md5$,^sha1$,^md5md5pass$,^md5sha1$’ -i 5 dict.txt > out.txt
    ```
  - Adding a rule attack:
    ```sh
    cat hash.txt | mdxfind -h ‘^md5$,^sha1$,^md5md5pass$,^md5sha1$’ -i 5 dict.txt -r best64.rule > out.txt
    ```

- **General Notes**:
  - Supports 459 different hash types/sequences.
  - Can handle very large hashlists (up to 100 million) and 10KB character passwords.
  - Supports hashcat rule files.
  - Option `-z` outputs all viable hashing solutions.
  - Supports multiple iterations (up to 4 billion times).

- **MDSPLIT**: Helps match cracked hashes to their original files and sorts them into separate files based on hash type.

- **Command Structure**:
  1. Matching MDXFIND results with original files:
     ```sh
     cat hashes_out/out_results.txt | mdsplit hashes_orig/hash_orig.txt
     ```
  2. Piping MDXFIND directly into MDSPLIT:
     ```sh
     cat *.txt | mdxfind -h ALL -h ‘!salt,!user,!md5x’ -i 10 dict.txt | mdsplit *.txt
     ```
  3. Specifying a file location:
     ```sh
     mdxfind -h ALL -f hashes.txt -i 10 dict.txt | mdsplit hashes.txt
     ```

- **General Notes**:
  - Appends the final hash solution to the end of the new filename.
  - Handles sorting multiple hash files, types, and their results at one time.

**Reference:**
- [Hashes.org MDXFind](https://hashes.org/mdxfind.php)

### Metasploit

- **General Info**:
  - **Launch Program**:
    ```sh
    msfconsole
    ```
  - **Display Current Version**:
    ```sh
    version
    ```
  - **Pull Weekly Update**:
    ```sh
    msfupdate
    ```
  - **Save Recent Commands to File**:
    ```sh
    makerc
    ```
  - **Load a Resource File**:
    ```sh
    msfconsole -r
    ```

- **Exploit/Scan/Module**:
  - **Set the Exploit to Use**:
    ```sh
    use
    ```
  - **Set the Payload**:
    ```sh
    set payload
    ```
  - **Show All Options**:
    ```sh
    show options
    ```
  - **Set a Setting**:
    ```sh
    set
    ```
  - **Execute the Exploit**:
    ```sh
    exploit or run
    ```

- **Session Handling**:
  - **List All Sessions**:
    ```sh
    sessions -l
    ```
  - **Interact/Attach to Session**:
    ```sh
    sessions -i
    ```
  - **Detach from Session**:
    ```sh
    background or ^Z
    ```

- **Database**:
  - **Start DB**:
    ```sh
    service postgresql start
    ```
  - **Init the DB**:
    ```sh
    msfdb init
    ```
  - **DB Status**:
    ```sh
    db_status
    ```
  - **Show Hosts in DB**:
    ```sh
    hosts
    ```
  - **Show Ports in DB**:
    ```sh
    services
    ```
  - **Show All Vulns Found**:
    ```sh
    vulns
    ```

- **Meterpreter Session Commands**:
  - **Show System Info**:
    ```sh
    sysinfo
    ```
  - **Show Running Processes**:
    ```sh
    ps
    ```
  - **Terminate a Process**:
    ```sh
    kill
    ```
  - **Show Your User ID**:
    ```sh
    getuid
    ```
  - **Upload/Download a File**:
    ```sh
    upload / download
    ```
  - **Print Working Directory (Local/Remote)**:
    ```sh
    pwd / lpwd
    ```
  - **Change Directory (Local/Remote)**:
    ```sh
    cd / lcd
    ```
  - **Show Contents of a File**:
    ```sh
    cat
    ```
  - **Edit a File (vim)**:
    ```sh
    edit
    ```
  - **Drop into a Shell on the Target Machine**:
    ```sh
    shell
    ```
  - **Switch to Another Process**:
    ```sh
    migrate
    ```
  - **Show All PW Hashes (Windows Only)**:
    ```sh
    hashdump
    ```
  - **Display Idle Time of User**:
    ```sh
    idletime
    ```
  - **Take a Screenshot**:
    ```sh
    screenshot
    ```
  - **Clear the Logs**:
    ```sh
    clearev
    ```

- **Meterpreter Privilege Escalation**:
  - **Load the Script; Use Privileges**:
    ```sh
    use priv
    ```
  - **Elevate Your Privs**:
    ```sh
    getsystem
    getprivs
    ```

- **Meterpreter Token Stealing**:
  - **Load the Script**:
    ```sh
    use incognito
    ```
  - **Show All Tokens**:
    ```sh
    list_tokens -u
    ```
  - **Use Token**:
    ```sh
    impersonate_token DOMAIN\USER
    ```
  - **Stop Using Token**:
    ```sh
    drop_token
    ```

- **Meterpreter Network Pivot**:
  - **Enable Port Forwarding**:
    ```sh
    portfwd [ADD/DELETE] -L -l 3388 -r -p 3389
    ```
  - **Pivot Through a Session by Adding a Route Within MSF**:
    ```sh
    route add
    ```
  - **Add a Route**:
    ```sh
    route add 192.168.0.0/24
    ```
  - **Delete a Route**:
    ```sh
    route add 192.168.0.0/24 -d
    ```

- **Search**:
  - **Exploits/Payloads/Modules**:
    ```sh
    search
    ```

This document provides a comprehensive overview of macOS directory structure, configuration, tricks, versions, malware resources, and Metasploit commands.