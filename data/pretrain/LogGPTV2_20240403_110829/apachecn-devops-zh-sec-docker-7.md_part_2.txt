 |
| --- | --- | --- |
| 虚拟机进程 | `system_u:system_r:svirt_t:MCS1` | `MCS1`是随机选择的 MCS 字段。目前，大约支持 500，000 个标签。 |
| 虚拟机映像 | `system_u:object_r:svirt_image_t:MCS1` | 只有带有相同 MCS 字段的标记为`svirt_t`的进程才能读取/写入这些映像文件和设备。 |
| 虚拟机共享读/写内容 | `system_u:object_r:svirt_image_t:s0` | 所有标有`svirt_t`的进程都可以写入`svirt_image_t:s0`文件和设备。 |
| 虚拟机映像 | `system_u:object_r:virt_content_t:s0` | 这是映像退出时使用的系统默认标签。不允许`svirt_t`虚拟进程读取带有此标签的文件/设备。 |
# 其他第三方工具
还有其他一些第三方工具确实值得在本章中提及，值得探索，看看它们能为您增加什么价值。现在，很多注意力似乎都集中在图形用户界面应用上，以帮助保护应用和基础架构的安全。以下实用程序将为您提供一些与您使用 Docker 工具运行的环境相关的选项。
### 注
请注意，在实现以下某些项目时，您应该小心谨慎，因为这可能会产生不必要的影响。确保在生产实施之前使用测试环境。
## 停靠站
dockersh 被设计为在支持多个交互式用户的机器上用作登录外壳替代。为什么这很重要？如果您还记得在 Docker 主机上处理 Docker 容器时出现的一些一般安全警告，您就会知道，无论谁有权访问 Docker 主机，都有权访问该 Docker 主机上所有正在运行的容器。使用 dockersh，您可以在每个容器的基础上隔离使用，只允许用户访问您希望他们访问的容器，同时保持对 Docker 主机的管理控制并保持最低的安全阈值。
这是帮助在每个容器的基础上隔离用户的理想方式，虽然容器通过利用 dockersh 有助于消除对 SSH 的需求，但是您可以消除对向每个需要容器访问的人提供对 Docker 主机的访问的恐惧。设置和调用 dockersh 需要很多信息，因此，如果您感兴趣，建议访问以下网址，了解更多关于 dockersh 的信息，包括如何设置并使用它:
[https://github . com/yelp/dock rsh](https://github.com/Yelp/dockersh)
## Docker
dockeri 是查看 Docker 主机内部情况的简单方法。DockerUI 的安装非常简单，只需运行一个简单的`docker run` 命令即可开始:
```
$ docker run -d -p 9000:9000 --privileged -v /var/run/docker.sock:/var/run/docker.sock dockerui/dockerui
```
要访问 DockerUI，您只需打开浏览器并导航到以下链接:
`http://:9000`
这将在端口`9000`向世界打开你的 DockerUI，如下图所示:
![DockerUI](img/00010.jpeg)
您可以获得 Docker 主机及其生态系统的一般高级视图，并可以通过重新启动、停止或从停止状态启动来操作 Docker 主机上的容器。DockerUI 采用了一些运行命令行项目的陡峭学习曲线，并将它们放入您在网络浏览器中使用点击执行的动作中。
更多关于 dockeri 的信息，请访问[https://github.com/crosbymichael/dockerui](https://github.com/crosbymichael/dockerui)。
## 船厂
船厂，像 DockerUI 一样，允许你使用图形用户界面来管理各个方面——主要是在你的容器中——并操纵它们。船厂正在 Docker Swarm 之上构建，这样你就可以利用 Docker Swarm 的特性集，在这里你可以管理多个主机和容器，而不是一次只关注一个主机及其容器。
使用船厂很简单，下面的`curl`命令重新进入画面:
```
$ curl -sSL https://shipyard-project.com/deploy | bash -s
```
设置完成后，要访问造船厂，您只需打开浏览器并导航到以下链接:
`http://:8080`
正如我们在下面的截图中看到的，我们可以查看 Docker 主机上的所有容器:
![Shipyard](img/00011.jpeg)
我们还可以查看 Docker 主机上的所有映像，如下图所示:
![Shipyard](img/00012.jpeg)
我们还可以控制我们的容器，如下图所示:
![Shipyard](img/00013.jpeg)
船厂，像 dockeri 一样，允许您操纵您的 Docker 主机和容器，通过重新启动它们，停止它们，从失败的状态启动它们，或者部署新的容器并让它们加入 Swarm 集群。造船厂还允许您查看信息，如港口映射信息，即主机映射到容器的港口。这使您能够在需要时快速掌握重要信息，以解决任何与安全相关的问题。造船厂也有用户管理，而道克瑞缺乏这种能力。
有关船厂的更多信息，请访问以下网址:
*   [https://github.com/shipyard/shipyard](https://github.com/shipyard/shipyard)
*   [http://shipyard-project.com](http://shipyard-project.com)
## 日志包
当是一个需要解决的问题时，你会去哪里？大多数人会首先查看该应用的日志，看看它是否输出了任何错误。有了 Logspout，这就变成了一个更容易管理的任务，有许多多个运行的容器。使用 Logspout，您可以将每个容器的所有日志路由到您选择的位置。然后，您可以在一个地方解析这些日志。不需要从每个容器中取出日志并单独检查，您可以让日志喷口为您完成这项工作。
Logspout 的设置和我们看到的其他第三方解决方案一样简单。只需在每个 Docker 主机上运行以下命令即可开始收集日志:
```
$ docker run --name="logspout" \
 --volume=/var/run/docker.sock:/tmp/docker.sock \
 --publish=127.0.0.1:8000:8080 \
 gliderlabs/logspout
```
现在我们已经在一个区域收集了所有的容器日志，我们需要解析这些日志，但是我们该如何做呢？
```
$ curl http://127.0.0.1:8000/logs
```
又到了救援的`curl`命令！日志以容器名称作为前缀，并以某种方式着色，以便区分日志。您可以用 Docker 主机的 IP 地址替换`docker run`调用中的环回(`127.0.0.1`)地址，以便更容易连接，从而能够获取日志，并将端口从`8000`更改为您选择的。还有不同的模块可以用来获取和收集日志。
更多关于 Logspout 的信息，请访问[https://github.com/gliderlabs/logspout](https://github.com/gliderlabs/logspout)。
# 总结
在本章中，我们看了一些第三方工具，以便能够帮助保护 Docker 环境。我们主要看了三个工具:流量授权、召唤和带有 SELinux 的 sVirt。这三者可以通过不同的方式来帮助保护您的 Docker 环境，让您在一天结束时可以安心地在 Docker 容器中运行应用。我们了解了除了 Docker 提供的工具之外，还有哪些第三方工具可以帮助保护您的环境，从而在 Docker 上运行时保持应用的安全。
然后我们看了一些其他第三方工具。考虑到您的 Docker 环境设置，这些额外的工具对一些人来说是有价值的。其中一些工具包括 dockersh、DockerUI、船厂和 Logsprout。这些工具在仔细应用时，会增加额外的增强功能，有助于提高 Docker 配置的整体安全性。
在下一章中，我们将关注保持安全性。这些天围绕着安全问题发生了很多事情，有时很难知道在哪里可以找到更新的信息，也很难应用快速修复。
您将学习如何帮助实施将安全性放在首要位置的想法，并订阅电子邮件列表等内容，这些列表不仅包括 Docker，还包括与您使用 Linux 运行的环境相关的项目。其他项目还在继续关注与项目相关的事情，例如与 Docker 安全相关的 GitHub 问题，在 IRC 会议室关注，以及观看 CVE 等网站。