(Refer to Section 3.4.3 for additional information on the SELECT INTO statement.)
SELECT select_expressions BULK COLLECT INTO collection
[, ...] FROM ...;
If a single collection is specified, then collection may be a collection of a single field,
or it may be a collection of a record type. If more than one collection is specified, then
each collection must consist of a single field. select_expressions must match in
number, order, and type-compatibility all fields in the target collections.
The following example shows the use of the BULK COLLECT clause where the target
collections are associative arrays consisting of a single field.
DECLARE
TYPE empno_tbl IS TABLE OF emp.empno%TYPE INDEX BY BINARY_INTEGER;
TYPE ename_tbl IS TABLE OF emp.ename%TYPE INDEX BY BINARY_INTEGER;
TYPE job_tbl IS TABLE OF emp.job%TYPE INDEX BY BINARY_INTEGER;
TYPE hiredate_tbl IS TABLE OF emp.hiredate%TYPE INDEX BY BINARY_INTEGER;
TYPE sal_tbl IS TABLE OF emp.sal%TYPE INDEX BY BINARY_INTEGER;
TYPE comm_tbl IS TABLE OF emp.comm%TYPE INDEX BY BINARY_INTEGER;
TYPE deptno_tbl IS TABLE OF emp.deptno%TYPE INDEX BY BINARY_INTEGER;
t_empno EMPNO_TBL;
t_ename ENAME_TBL;
t_job JOB_TBL;
t_hiredate HIREDATE_TBL;
t_sal SAL_TBL;
t_comm COMM_TBL;
t_deptno DEPTNO_TBL;
BEGIN
SELECT empno, ename, job, hiredate, sal, comm, deptno BULK COLLECT
INTO t_empno, t_ename, t_job, t_hiredate, t_sal, t_comm, t_deptno
FROM emp;
DBMS_OUTPUT.PUT_LINE('EMPNO ENAME JOB HIREDATE ' ||
'SAL ' || 'COMM DEPTNO');
DBMS_OUTPUT.PUT_LINE('----- ------- --------- --------- ' ||
'-------- ' || '-------- ------');
FOR i IN 1..t_empno.COUNT LOOP
DBMS_OUTPUT.PUT_LINE(t_empno(i) || ' ' ||
RPAD(t_ename(i),8) || ' ' ||
RPAD(t_job(i),10) || ' ' ||
TO_CHAR(t_hiredate(i),'DD-MON-YY') || ' ' ||
TO_CHAR(t_sal(i),'99,999.99') || ' ' ||
TO_CHAR(NVL(t_comm(i),0),'99,999.99') || ' ' ||
t_deptno(i));
END LOOP;
END;
EMPNO ENAME JOB HIREDATE SAL COMM DEPTNO
----- ------- --------- --------- -------- -------- ------
7369 SMITH CLERK 17-DEC-80 800.00 .00 20
7499 ALLEN SALESMAN 20-FEB-81 1,600.00 300.00 30
7521 WARD SALESMAN 22-FEB-81 1,250.00 500.00 30
7566 JONES MANAGER 02-APR-81 2,975.00 .00 20
7654 MARTIN SALESMAN 28-SEP-81 1,250.00 1,400.00 30
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 299
Database Compatibility for Oracle® Developers Guide
7698 BLAKE MANAGER 01-MAY-81 2,850.00 .00 30
7782 CLARK MANAGER 09-JUN-81 2,450.00 .00 10
7788 SCOTT ANALYST 19-APR-87 3,000.00 .00 20
7839 KING PRESIDENT 17-NOV-81 5,000.00 .00 10
7844 TURNER SALESMAN 08-SEP-81 1,500.00 .00 30
7876 ADAMS CLERK 23-MAY-87 1,100.00 .00 20
7900 JAMES CLERK 03-DEC-81 950.00 .00 30
7902 FORD ANALYST 03-DEC-81 3,000.00 .00 20
7934 MILLER CLERK 23-JAN-82 1,300.00 .00 10
The following example produces the same result, but uses an associative array on a
record type defined with the %ROWTYPE attribute.
DECLARE
TYPE emp_tbl IS TABLE OF emp%ROWTYPE INDEX BY BINARY_INTEGER;
t_emp EMP_TBL;
BEGIN
SELECT * BULK COLLECT INTO t_emp FROM emp;
DBMS_OUTPUT.PUT_LINE('EMPNO ENAME JOB HIREDATE ' ||
'SAL ' || 'COMM DEPTNO');
DBMS_OUTPUT.PUT_LINE('----- ------- --------- --------- ' ||
'-------- ' || '-------- ------');
FOR i IN 1..t_emp.COUNT LOOP
DBMS_OUTPUT.PUT_LINE(t_emp(i).empno || ' ' ||
RPAD(t_emp(i).ename,8) || ' ' ||
RPAD(t_emp(i).job,10) || ' ' ||
TO_CHAR(t_emp(i).hiredate,'DD-MON-YY') || ' ' ||
TO_CHAR(t_emp(i).sal,'99,999.99') || ' ' ||
TO_CHAR(NVL(t_emp(i).comm,0),'99,999.99') || ' ' ||
t_emp(i).deptno);
END LOOP;
END;
EMPNO ENAME JOB HIREDATE SAL COMM DEPTNO
----- ------- --------- --------- -------- -------- ------
7369 SMITH CLERK 17-DEC-80 800.00 .00 20
7499 ALLEN SALESMAN 20-FEB-81 1,600.00 300.00 30
7521 WARD SALESMAN 22-FEB-81 1,250.00 500.00 30
7566 JONES MANAGER 02-APR-81 2,975.00 .00 20
7654 MARTIN SALESMAN 28-SEP-81 1,250.00 1,400.00 30
7698 BLAKE MANAGER 01-MAY-81 2,850.00 .00 30
7782 CLARK MANAGER 09-JUN-81 2,450.00 .00 10
7788 SCOTT ANALYST 19-APR-87 3,000.00 .00 20
7839 KING PRESIDENT 17-NOV-81 5,000.00 .00 10
7844 TURNER SALESMAN 08-SEP-81 1,500.00 .00 30
7876 ADAMS CLERK 23-MAY-87 1,100.00 .00 20
7900 JAMES CLERK 03-DEC-81 950.00 .00 30
7902 FORD ANALYST 03-DEC-81 3,000.00 .00 20
7934 MILLER CLERK 23-JAN-82 1,300.00 .00 10
3.12.4.2 FETCH BULK COLLECT
The BULK COLLECT clause can be used with a FETCH statement. (See Section 3.8.3 for
information on the FETCH statement.) Instead of returning a single row at a time from the
result set, the FETCH BULK COLLECT will return all rows at once from the result set into
the specified collection unless restricted by the LIMIT clause.
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 300
Database Compatibility for Oracle® Developers Guide
FETCH name BULK COLLECT INTO collection [, ...] [ LIMIT n ];
If a single collection is specified, then collection may be a collection of a single field,
or it may be a collection of a record type. If more than one collection is specified, then
each collection must consist of a single field. The expressions in the SELECT list of
the cursor identified by name must match in number, order, and type-compatibility all
fields in the target collections. If LIMIT n is specified, the number of rows returned into
the collection on each FETCH will not exceed n.
The following example uses the FETCH BULK COLLECT statement to retrieve rows into
an associative array.
DECLARE
TYPE emp_tbl IS TABLE OF emp%ROWTYPE INDEX BY BINARY_INTEGER;
t_emp EMP_TBL;
CURSOR emp_cur IS SELECT * FROM emp;
BEGIN
OPEN emp_cur;
FETCH emp_cur BULK COLLECT INTO t_emp;
CLOSE emp_cur;
DBMS_OUTPUT.PUT_LINE('EMPNO ENAME JOB HIREDATE ' ||
'SAL ' || 'COMM DEPTNO');
DBMS_OUTPUT.PUT_LINE('----- ------- --------- --------- ' ||
'-------- ' || '-------- ------');
FOR i IN 1..t_emp.COUNT LOOP
DBMS_OUTPUT.PUT_LINE(t_emp(i).empno || ' ' ||
RPAD(t_emp(i).ename,8) || ' ' ||
RPAD(t_emp(i).job,10) || ' ' ||
TO_CHAR(t_emp(i).hiredate,'DD-MON-YY') || ' ' ||
TO_CHAR(t_emp(i).sal,'99,999.99') || ' ' ||
TO_CHAR(NVL(t_emp(i).comm,0),'99,999.99') || ' ' ||
t_emp(i).deptno);
END LOOP;
END;
EMPNO ENAME JOB HIREDATE SAL COMM DEPTNO
----- ------- --------- --------- -------- -------- ------
7369 SMITH CLERK 17-DEC-80 800.00 .00 20
7499 ALLEN SALESMAN 20-FEB-81 1,600.00 300.00 30
7521 WARD SALESMAN 22-FEB-81 1,250.00 500.00 30
7566 JONES MANAGER 02-APR-81 2,975.00 .00 20
7654 MARTIN SALESMAN 28-SEP-81 1,250.00 1,400.00 30
7698 BLAKE MANAGER 01-MAY-81 2,850.00 .00 30
7782 CLARK MANAGER 09-JUN-81 2,450.00 .00 10
7788 SCOTT ANALYST 19-APR-87 3,000.00 .00 20
7839 KING PRESIDENT 17-NOV-81 5,000.00 .00 10
7844 TURNER SALESMAN 08-SEP-81 1,500.00 .00 30
7876 ADAMS CLERK 23-MAY-87 1,100.00 .00 20
7900 JAMES CLERK 03-DEC-81 950.00 .00 30
7902 FORD ANALYST 03-DEC-81 3,000.00 .00 20
7934 MILLER CLERK 23-JAN-82 1,300.00 .00 10
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 301
Database Compatibility for Oracle® Developers Guide
3.12.4.3 EXECUTE IMMEDIATE BULK COLLECT
The BULK COLLECT clause can be used with a EXECUTE IMMEDIATE statement to
specify a collection to receive the returned rows.
EXECUTE IMMEDIATE 'sql_expression;'
BULK COLLECT INTO collection [,...]
[USING {[bind_type] bind_argument} [, ...]}];
collection specifies the name of a collection.
bind_type specifies the parameter mode of the bind_argument.
 A bind_type of IN specifies that the bind_argument contains a value that is
passed to the sql_expression.
 A bind_type of OUT specifies that the bind_argument receives a value from
the sql_expression.
 A bind_type of IN OUT specifies that the bind_argument is passed to
sql_expression, and then stores the value returned by sql_expression.
bind_argument specifies a parameter that contains a value that is either passed to the
sql_expression (specified with a bind_type of IN), or that receives a value from the
sql_expression (specified with a bind_type of OUT), or both (specified with a
bind_type of IN OUT).
If a single collection is specified, then collection may be a collection of a single field,
or a collection of a record type; if more than one collection is specified, each
collection must consist of a single field.
3.12.4.4 RETURNING BULK COLLECT
The BULK COLLECT clause can be added to the RETURNING INTO clause of a DELETE,
INSERT, or UPDATE command. (See Section 3.4.7 for information on the RETURNING
INTO clause.)
{ insert | update | delete }
RETURNING { * | expr_1 [, expr_2 ] ...}
BULK COLLECT INTO collection [, ...];
insert, update, and delete are the INSERT, UPDATE, and DELETE commands as
described in Sections 3.4.4, 3.4.5, and 3.4.6, respectively. If a single collection is
specified, then collection may be a collection of a single field, or it may be a
collection of a record type. If more than one collection is specified, then each
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 302
Database Compatibility for Oracle® Developers Guide
collection must consist of a single field. The expressions following the RETURNING
keyword must match in number, order, and type-compatibility all fields in the target
collections. If * is specified, then all columns in the affected table are returned. (Note that
the use of * is an Advanced Server extension and is not compatible with Oracle
databases.)
The clerkemp table created by copying the emp table is used in the remaining examples
in this section as shown below.
CREATE TABLE clerkemp AS SELECT * FROM emp WHERE job = 'CLERK';
SELECT * FROM clerkemp;
empno | ename | job | mgr | hiredate | sal | comm | deptno
-------+--------+-------+------+--------------------+---------+------+-------
-
7369 | SMITH | CLERK | 7902 | 17-DEC-80 00:00:00 | 800.00 | | 20
7876 | ADAMS | CLERK | 7788 | 23-MAY-87 00:00:00 | 1100.00 | | 20
7900 | JAMES | CLERK | 7698 | 03-DEC-81 00:00:00 | 950.00 | | 30
7934 | MILLER | CLERK | 7782 | 23-JAN-82 00:00:00 | 1300.00 | | 10
(4 rows)
The following example increases everyone’s salary by 1.5, stores the employees’
numbers, names, and new salaries in three associative arrays, and finally, displays the
contents of these arrays.
DECLARE
TYPE empno_tbl IS TABLE OF emp.empno%TYPE INDEX BY BINARY_INTEGER;
TYPE ename_tbl IS TABLE OF emp.ename%TYPE INDEX BY BINARY_INTEGER;
TYPE sal_tbl IS TABLE OF emp.sal%TYPE INDEX BY BINARY_INTEGER;
t_empno EMPNO_TBL;
t_ename ENAME_TBL;
t_sal SAL_TBL;
BEGIN
UPDATE clerkemp SET sal = sal * 1.5 RETURNING empno, ename, sal
BULK COLLECT INTO t_empno, t_ename, t_sal;
DBMS_OUTPUT.PUT_LINE('EMPNO ENAME SAL ');
DBMS_OUTPUT.PUT_LINE('----- ------- -------- ');
FOR i IN 1..t_empno.COUNT LOOP
DBMS_OUTPUT.PUT_LINE(t_empno(i) || ' ' || RPAD(t_ename(i),8) ||
' ' || TO_CHAR(t_sal(i),'99,999.99'));
END LOOP;
END;
EMPNO ENAME SAL
----- ------- --------
7369 SMITH 1,200.00
7876 ADAMS 1,650.00
7900 JAMES 1,425.00
7934 MILLER 1,950.00
The following example performs the same functionality as the previous example, but uses
a single collection defined with a record type to store the employees’ numbers, names,
and new salaries.
DECLARE
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 303
Database Compatibility for Oracle® Developers Guide
TYPE emp_rec IS RECORD (
empno emp.empno%TYPE,
ename emp.ename%TYPE,
sal emp.sal%TYPE
);
TYPE emp_tbl IS TABLE OF emp_rec INDEX BY BINARY_INTEGER;
t_emp EMP_TBL;
BEGIN
UPDATE clerkemp SET sal = sal * 1.5 RETURNING empno, ename, sal
BULK COLLECT INTO t_emp;
DBMS_OUTPUT.PUT_LINE('EMPNO ENAME SAL ');
DBMS_OUTPUT.PUT_LINE('----- ------- -------- ');
FOR i IN 1..t_emp.COUNT LOOP
DBMS_OUTPUT.PUT_LINE(t_emp(i).empno || ' ' ||
RPAD(t_emp(i).ename,8) || ' ' ||
TO_CHAR(t_emp(i).sal,'99,999.99'));
END LOOP;
END;
EMPNO ENAME SAL
----- ------- --------
7369 SMITH 1,200.00
7876 ADAMS 1,650.00
7900 JAMES 1,425.00
7934 MILLER 1,950.00
The following example deletes all rows from the clerkemp table, and returns
information on the deleted rows into an associative array, which is then displayed.
DECLARE
TYPE emp_rec IS RECORD (
empno emp.empno%TYPE,
ename emp.ename%TYPE,
job emp.job%TYPE,
hiredate emp.hiredate%TYPE,
sal emp.sal%TYPE,
comm emp.comm%TYPE,
deptno emp.deptno%TYPE
);
TYPE emp_tbl IS TABLE OF emp_rec INDEX BY BINARY_INTEGER;
r_emp EMP_TBL;
BEGIN
DELETE FROM clerkemp RETURNING empno, ename, job, hiredate, sal,
comm, deptno BULK COLLECT INTO r_emp;
DBMS_OUTPUT.PUT_LINE('EMPNO ENAME JOB HIREDATE ' ||
'SAL ' || 'COMM DEPTNO');
DBMS_OUTPUT.PUT_LINE('----- ------- --------- --------- ' ||
'-------- ' || '-------- ------');
FOR i IN 1..r_emp.COUNT LOOP
DBMS_OUTPUT.PUT_LINE(r_emp(i).empno || ' ' ||
RPAD(r_emp(i).ename,8) || ' ' ||
RPAD(r_emp(i).job,10) || ' ' ||
TO_CHAR(r_emp(i).hiredate,'DD-MON-YY') || ' ' ||
TO_CHAR(r_emp(i).sal,'99,999.99') || ' ' ||
TO_CHAR(NVL(r_emp(i).comm,0),'99,999.99') || ' ' ||
r_emp(i).deptno);
END LOOP;
END;
EMPNO ENAME JOB HIREDATE SAL COMM DEPTNO
----- ------- --------- --------- -------- -------- ------
7369 SMITH CLERK 17-DEC-80 1,200.00 .00 20
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 304
Database Compatibility for Oracle® Developers Guide
7876 ADAMS CLERK 23-MAY-87 1,650.00 .00 20
7900 JAMES CLERK 03-DEC-81 1,425.00 .00 30
7934 MILLER CLERK 23-JAN-82 1,950.00 .00 10
3.13 Errors and Messages
Use the DBMS_OUTPUT.PUT_LINE statement to report messages.
DBMS_OUTPUT.PUT_LINE ( message );
message is any expression evaluating to a string.
This example displays the message on the user’s output display:
DBMS_OUTPUT.PUT_LINE('My name is John');
The special variables SQLCODE and SQLERRM contain a numeric code and a text message,
respectively, that describe the outcome of the last SQL command issued. If any other
error occurs in the program such as division by zero, these variables contain information
pertaining to the error.
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 305
Database Compatibility for Oracle® Developers Guide
4 Triggers
This chapter describes triggers in Advanced Server. As with procedures and functions,
triggers are written in the SPL language.
4.1 Overview
A trigger is a named SPL code block that is associated with a table and stored in the
database. When a specified event occurs on the associated table, the SPL code block is
executed. The trigger is said to be fired when the code block is executed.
The event that causes a trigger to fire can be any combination of an insert, update, or
deletion carried out on the table, either directly or indirectly. If the table is the object of a
SQL INSERT, UPDATE, or DELETE command the trigger is directly fired assuming that
the corresponding insert, update, or deletion event is defined as a triggering event. The
events that fire the trigger are defined in the CREATE TRIGGER command.
A trigger can be fired indirectly if a triggering event occurs on the table as a result of an
event initiated on another table. For example, if a trigger is defined on a table containing
a foreign key defined with the ON DELETE CASCADE clause and a row in the parent
table is deleted, all children of the parent would be deleted as well. If deletion is a
triggering event on the child table, deletion of the children will cause the trigger to fire.
Copyright © 2007 - 2018 EnterpriseDB Corporation. All rights reserved. 306
Database Compatibility for Oracle® Developers Guide
4.2 Types of Triggers
Advanced Server supports both row-level and statement-level triggers. A row-level
trigger fires once for each row that is affected by a triggering event. For example, if
deletion is defined as a triggering event on a table and a single DELETE command is
issued that deletes five rows from the table, then the trigger will fire five times, once for
each row.
In contrast, a statement-level trigger fires once per triggering statement regardless of the
number of rows affected by the triggering event. In the prior example of a single DELETE
command deleting five rows, a statement-level trigger would fire only once.
The sequence of actions can be defined regarding whether the trigger code block is
executed before or after the triggering statement, itself, in the case of statement-level
triggers; or before or after each row is affected by the triggering statement in the case of
row-level triggers.
In a before row-level trigger, the trigger code block is executed before the triggering
action is carried out on each affected row. In a before statement-level trigger, the trigger
code block is executed before the action of the triggering statement is carried out.
In an after row-level trigger, the trigger code block is executed after the triggering action
is carried out on each affected row. In an after statement-level trigger, the trigger code