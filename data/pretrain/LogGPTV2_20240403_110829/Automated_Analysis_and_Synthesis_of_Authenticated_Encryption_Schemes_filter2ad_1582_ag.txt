such that the resulting algorithms Enc and Dec—that are derived from the corresponding labeled graphs G2
and G1, respectively—satisfy the reversal condition.
Lemma A.1. If Reverse(G−
1 ) outputs G−
Proof. We ﬁrst describe how to label G−
2 . For convenience, we use the same symbol
to refer to corresponding nodes in the two graphs. Recall that if a node x is a TBC node in G−
2 then x is also
a TBC node in G−
2 . If y is also the parent
of x in G−
We prove our result for general graphs, meaning that the number of INI, FIN, IN, and OUT nodes can be
arbitrary. Our proof is by induction on the total number s of TBC, XOR, and DUP nodes in G−
1 . The base case
s = 0 is trivial.
2 such
that the labels on TBC nodes are distinct, positive integers. Fix a tweak T ∈ T , an initial state X and
input M for the resulting labeled graph G2. Evaluate G2 on input (T, X, M) using f, and let val(x) be the
value on node x. Let (Y, C) be the result of this evaluation. Among the DUP, TBC, and XOR nodes of G−
1 , let
x0 denote the ﬁrst node that Reverse(G−
1 ) re-colors red. We consider the case that x0 is an XOR node; the
other cases are similar.
Let x1 and x2 be the red neighbors of x0, and let x3 be the other (blue) neighbor of x0. Note that x1
can’t be an IN node in G−
2 ), since such a node will be re-colored red only after
its unique neighbor turns red, but here x1 is already red while x0 is still blue. Likewise, x2 can’t be an IN
node in G−
1 , because x0 is the ﬁrst among the DUP, XOR,
and TBC nodes of G−
Let H−
1 by merging x0, x1, and x2 into a single node y. If both x1
1 then let y be an INI node; otherwise, let y be an OUT node. Each node in H−
and x2 are INI nodes in G−
1
has correct ingoing/outgoing degrees and there are s − 1 TBC, XOR, and DUP nodes in H−
2 can
be obtained by (i) running Reverse(H−
2 into the nodes
x0, x1, x2 as in G−
1 , and (iii) changing OUT nodes to IN nodes among the reinstated nodes, and reversing the
direction of their attached edges.
2 for H−
1
and H−
2 , respectively, and let H1 and H2 be the corresponding labeled graphs. In H2, assign the value val(z)
to each INI/IN node z, with val(y) := val(x1) ⊕ val(x2), which is also val(x3). If we evaluate H2 on tweak T
and the assigned input using f, then the value at each node x is also val(x). Since H−
1 is a reversal of H−
2 ,
if we assign value val(x) on each INI/IN node x of H1, and evaluate H1 on tweak T and the assigned input
using f and f−1, then the value of each FIN/OUT node x is also val(x). Next, evaluate G1 on (T, X, C) using
f and f−1. We consider the following cases.
Case 1: Both x1 and x2 are INI nodes in G1. Then we are repeating the evaluation of H1, with the three
nodes x0, x1, and x2 simulating node y, and assigning value val(x1) ⊕ val(x2) = val(y) to x3. Thus, in the
evaluation of G1, the value at each FIN/OUT node x is also val(x), leading to the result (Y, M).
Case 2: One of x1 or x2 is an OUT node in G1. Without loss of generality, suppose that x1 is an OUT node.
Hence in G1, the XOR node x0 is the parent of x1, and so x2 must be an INI node. (Recall that x2 must
be either INI or OUT, but if it is an OUT node then the XOR node x0 has outgoing degree at least two, a
contradiction.) Then we are repeating the evaluation of H1 to get val(y) = val(x1) ⊕ val(x2) on node y,
inserting node x2 with value val(x2), and computing val(x2)⊕ val(y) = val(x1) = val(x0) at nodes x1 and x0.
Thus, for the evaluation on G1, the value at each FIN/OUT node x is also val(x), leading to result (Y, M).
1 . Then x1 and x2 must be INI or OUT nodes in G−
1 that is re-colored red.
1 be the graph obtained from G−
1 is a reversal of H−
2 . Use the same labeling of G−
1 ) to get a graph H−
2 , (ii) splitting the node y in H−
By the induction hypothesis, H−
1 . Note that G−
1 and G−
B Arbitrary Message Lengths
21
// |M|  n then
// |Xi| = n
M1M2 := M // |M1| = n
V := ET
C1 := EL
K(M1); C2 := V [1,|M2|] ⊕ M2; Y1 := X1 ⊕ V ⊕ ∆
K(C210∗) ⊕ M1; C := C1C2
K(0n) ⊕ M; Y1 := X1 ⊕ M
K(0n)[1,|M|] ⊕ M; Y1 := X1 ⊕ M10∗ ⊕ ∆
elseif |M| = n then C := ET
else C := ET
return (Y1Y2, C)
// |C|  n then
// |Xi| = n
C1C2 := C
M1 := C1 ⊕ EL
M2 := C2 ⊕ V [1,|C2|]; M := M1M2; Y1 := X1 ⊕ V ⊕ ∆
// |C1| = n
K(C210∗); V := ET
K(M1)
elseif |C| = n then M := ET
else M := ET
return (Y1Y2, M)
K(0n) ⊕ C; Y1 := X1 ⊕ M
K(0n)[1,|C|] ⊕ C; Y1 := X1 ⊕ M10∗ ⊕ ∆
Figure B.1: Algorithms ]Enc and ]Dec for handling a ﬁnal (fragmentary) message block. For a string X with
|X|  n (left), |M| = n (middle), or 0 < |M| < n (right). The
incoming state X = X1X2 and outgoing state Y = Y1Y2, with |Xi| = |Yi| = n, will satisfy Y2 = X2, so we show only
how to process X1 to get Y1. The trapezoids represent truncation and padding with 10∗.
Our template in Section 3.1 only handles messages in ({0, 1}2n)∗, yet in practice schemes should support
messages of arbitrary length. While arbitrary length messages can be handled by reversibly padding out to a
multiple of 2n bits, we show here how to extend our template to handle messages in {0, 1}∗ more eﬃciently.
The key for an AE scheme will now be a pair (K, ∆). The ﬁrst component K will be used as the key
for a tweakable blockcipher as before, while ∆ is an n-bit string used to handle the ﬁnal (fragmentary)
block. In Figure B.1, we show algorithms ]Enc and ]Dec that operate on strings of length less than 2n bits
(see Figure B.2 for a graphical depiction); they are based on how OTR [20] handles fragmentary blocks.
Figure B.3 shows how to use ]Enc and ]Dec (along with Enc, Dec, and Tag) to construct encryption and
decryption algorithms for arbitrary length messages. Note that the code in Figure 3.1 is a special case of
that in Figure B.3 when the message length is a multiple of 2n bits. Below, we show that the extended
template indeed leads to secure schemes.
22
M1M2C1C2X1Y1∆M1C1X1Y1M1C1X1Y10n∆0nEK,∆(N, A, M)
X := 02n; v := 1; M1 ··· M2mM2m+1 := M
// |Mi| = n for i ≤ 2m, and |M2m+1| < 2n
for i = 1 to m do
T := (N, A, v); (Y, C2i−1, C2i) := EncEK (T, X, M2i−1, M2i)
v := v + Cost(Π); X := Y
∆ ((N, A, v), X, M2m+1)
(X, C2m+1) := ]EncEK
v := v + d|M2m+1|/ne − 1 T := (N, A,−v); V := TagEK (T, X)
return C1 ··· C2m k V [1, τ]
DK,∆(N, A, C)
if |C| 6≡ τ (mod 2n) then return ⊥
C1 ··· C2mC2m+1 k tag := C; X := 02n; v := 1
// |Ci| = n for i ≤ 2m, |C2m+1| < 2n, and |tag| = τ
for i = 1 to m do
T := (N, A, v); (Y, M2i−1, M2i) := DecEK ,E
v := v + Cost(Π); X := Y
∆ ((N, A, v), X, C2m+1)
(X, M2m+1) := ]DecEK
v := v + d|C2m+1|/ne T := (N, A,−v); V := TagEK (T, X)
if tag 6= V [1, τ] then return ⊥
else return M1 ··· M2m
−1
K (T, X, C2i−1, C2i)
Figure B.3: Code of an AE scheme Π = (K,E,D) handling arbitrary length messages, based on a tweakable
blockcipher E and a triple of deterministic algorithms (Enc, Dec, Tag).
1 , G−
Π[E](A) ≤ Advfprp
2 ) = true, where
2 are the unlabeled graphs for Enc and Tag of Π, respectively. Then for any adversary A, there is an
E (B). Adversary B has the same running time as A and makes at
Theorem B.1. Let Π[E] = (K,E,D) be an AE scheme on {0, 1}∗ for which Priv(G−
G−
1 , G−
adversary B with Advpriv
most (Cost(Π) + 1) · σ/2 queries, where σ is the number of (full) message blocks in the queries of A.
Proof. Adversary B runs A as follows. For each of A’s queries (N, A, M), adversary B runs the encryption
scheme Π[E] on (N, A, M) with each call to EK replaced by a query to B’s oracle, and returns the ciphertext
to A. Finally, B outputs the same guess as A. To compute the the number of queries of B, note that
Cost(Π) ≥ 2 and ]Enc/]Dec, on message M, makes dM/ne ≤ dM/ne · Cost(Π)/2 calls to the tweakable
blockcipher or its inverse.
Let Π[π] be the ideal variant of Π[E], where EK calls are replaced by corresponding queries to π, with
π ←$ Perm(T , n). It suﬃces to show that Advpriv
Π[π](A) = 0. Consider experiments H1–H5 in Figure B.4.
The adversary has oracle access to the encryption scheme of Π[π] in experiment H1, and oracle access to
$(·,·,·) in experiment H5. Experiment H2 is identical to H1, except that we re-sample π ←$ Perm(T , n)
2 ⇒ true].
each time we use Enc or Tag. Since a tweak to π is never repeated, Pr[HA
In experiment H3, instead of calling Tagπ(T, X) to get the tag, we sample the tag at random. We then
unroll procedure ]Enc and remove the dead code that processes the state X. By applying Lemma 3.1 to
lines 02–03 of procedure Priv, the string V := Tagπ(T, X) is uniform and so experiments H2 and H3 are
identical. Next, in experiment H4, we directly sample C2m+1 ←$ {0, 1}|M2m+1| instead of processing via π.
Since we never call π on the same tweak twice, each output of π(·,·) is an independent, uniform string, and
thus experiments H3 and H4 are identical. Finally, experiment H5 is identical to H4, except that instead
of calling Encπ(T, X, M2i−1M2i) to get the blocks C2i−1C2i of the ciphertext, we sample them uniformly.
By applying Lemma 3.1 to lines 04–05 of procedure Priv, the output blocks of Encπ(T, X, M2i−1M2i) are
uniform and independent (even conditioned on all prior ciphertext blocks). Hence H4 and H5 are identical,
and Advpriv
1 ⇒ true] = Pr[HA
Π[π](A) = Pr[HA
1 ⇒ true] − Pr[HA
4 ⇒ true] = 0.
23