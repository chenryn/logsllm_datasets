• Why were type R3, type R4 and type R5 probes sent only to
the OutlineVPN server, not the Shadowsocks-libev server?
• Does the GFW consider the length of packets?
• Does the GFW consider the entropy of packet payloads?
• Do outside-to-inside connections (with the client outside
China and the server inside) result in as much active probing
as inside-to-outside connections?
4.1 Experiments
A convincing way to show what features the GFW uses for traffic
analysis is to outline a minimal, reproducible set of conditions that
trigger active probing. Accomplishing this is, unsurprisingly, the
most challenging part of this work, as it requires us to isolate a
small number of features that the GFW really uses, from countless
possibilities.
We are aided by two observations. First, the byte streams sent
between Shadowsocks clients and servers are, by design, indistin-
guishable from random. This means that it may not be necessary
to use a real client Shadowsocks implementation; we may be able
trigger active probes by sending random data. Second, as described
in Section 3.5, replay probes may be sent as soon as 0.28 seconds
after a legitimate data packet. The GFW could have seen only the
116
100101102103104105106Delay until replay of legitimate connection (seconds)0%25%50%75%100%1 second1 minute15 minutes1 hour10 hoursMinimum delay: 0.28 sMaximum delay:569.55 hFirst replayAll replaysHow China Detects and Blocks Shadowsocks
IMC ’20, October 27–29, 2020, Virtual Event, USA
type R3, R4 and R5 probes were only ever received by OutlineVPN
servers, and not by Shadowsocks-libev servers.
As will be expanded on in Section 5.3, one major difference
between Shadowsocks-libev and the version of OutlineVPN we
used is that Shadowsocks-libev has a filter to defend against replay
attacks, and OutlineVPN does not. (At least in the version we used—
OutlineVPN has since added replay protection [26].) For this reason,
Shadowsocks-libev servers does not respond to exact replays of
earlier connections, while OutlineVPN servers do.
We therefore hypothesize that the GFW does not send probes
of type R3, R4, and R5 unless the server has already responded to
probes of type R1 and R2. We switched the server in Exp 1.a to
responding mode after 310 hours of operating in sink mode. Soon
after the server started responding to type R1 and type R2 probes,
it began to receive a large number of type R3 and type R4 probes.
The server continued to receive type R1 and R2 probes as well.
These results suggest that the active probing system operates
in stages. It does not move on to the next stage until a certain
condition is observed. This implementation detail suggests that the
censor may have designed its active probing system with not only
Shadowsocks in mind. Other, similarly behaving protocols may also
be targeted.
We do not know why type R5 and type NR1 probes did not
appear in any of our four random-data experiments.
New probe types observed. The sink/responding servers received
probes that did not match the probe types seen in our earlier ex-
periment with Shadowsocks-libev and OutlineVPN. In Exp 1.b, we
saw 11 replay-based probes that had bytes from 16 to 32 changed.
We additionally saw many non-replay probes across all four experi-
ments. In total, there were 9 probes of 53 bytes, 5 probes of 56 bytes,
3 probes of 169 bytes, 1 probe of 180 bytes, and 1 probe of 402 bytes.
The GFW does not distinguish traffic directionality. We set up a
Shadowsocks server inside China and made connections to it from
outside. The traffic proxied was generated by automatically brows-
ing a subset of Alexa top 1 million websites. The server received a
large amount of active probing. This result indicates that the GFW
probes suspected servers regardless of whether the server is inside
or outside China. This bidirectional triggering behavior differs from
Winter and Lindskog’s [56, §4.4] observation that outside-to-inside
Tor connections did not trigger active probing. On the other hand,
the GFW is known not to distinguish traffic directionality for many
protocols, including DNS [1, §2], HTTP [11, §3] and TLS [9, §3.1].
The GFW’s sensitivity to directionality has even been known to
change over time, as in the case of TLS ESNI blocking, which was
bidirectional for two weeks before becoming unidirectional [6].
5 INTENTION BEHIND THE PROBES
As discussed in Section 3.2, we discovered seven distinct types of
active probes to our Shadowsocks servers. A natural question is:
what information can the GFW get from these probes? Unlike in
previous work [14, 56], for us this question cannot be answered
by a simple glance at the probes. We conjecture that if the probes
elicit reactions from a Shadowsocks server that differ from the
reactions of non-Shadowsocks servers, the GFW can be confident
in classifying the server as Shadowsocks.
Figure 8: CDF of the payload lengths of replay-based probes
over the 310 hours of Exp 1.a. The lengths of replay probes
exhibit a stair-step pattern.
Figure 9: Rate of replay-based probes per legitimate connec-
tion in Exp 3, according to per-byte entropy of the legitimate
connection.
therefore resembles that of the underlying traffic, which is often
HTTP or TLS.
High-entropy packets are more likely to be replayed. Two pieces
of evidence support this conclusion. First, Figure 9 shows that while
packets of all entropies may be replayed, one with a high per-byte
entropy of 7.2 is almost four times as likely to be replayed as one
with a low entropy of 3.0. Second, Exp 1.a and Exp 2 differ only in
the entropy of packets, and over the same period of time, the server
in Exp 1.a received significantly more probes than the one in Exp 2.
Probes of type R3 and R4 are not sent unless the server has pre-
viously responded to probes of type R1 and R2. The thousands of
probes received in Exp 1.a, Exp 2, and Exp 3 could all be classified
as type R1, R2, or NR2. In other words, we were not able to trig-
ger probes of types R3, R4, R5 or NR1 in these experiments. This
result reminded us of the fact that in the experiment of Section 3.1,
117
2004006008001000Payload length (bytes)0%25%50%75%100%Trigger connectionsN=942457 min=1 max=1000Identical replay (R1)N=2835 min=161 max=999Byte-changed replay (R2–R5)N=1110 min=169 max=690Non-replay (NR1–NR2)N=876 min=53 max=221012345678Shannon entropy of PSH/ACK packets0.00%0.05%0.10%0.15%0.20%Ratio of replay-based probesto legitimate connectionsIdentical replay (R1)Byte-changed replay (R2–R5)IMC ’20, October 27–29, 2020, Virtual Event, USA
Alice et al.
Therefore, understanding the effects of those probes on Shadow-
socks servers is key. We developed our own prober simulator to
observe how Shadowsocks servers react to probes like those sent
by the GFW. We further checked the source code of Shadowsocks
implementations to understand their internal logic. Based on this
analysis, we formed conjectures regarding what distinguishable
server reactions may be exploited for classification.
5.1 Prober Simulator Experiment
We developed a prober simulator that can send all seven types of
probes to Shadowsocks servers, and record their reactions. The
prober simulator allows us to test a wide range of Shadowsocks
implementations, with different configurations, efficiently and lo-
cally. In addition, the prober simulator lets us cover implementation
corner cases and reveal some fingerprintable features that may have
not been exploited by the GFW.
Replay-based probes. To simulate replay-based probes, the simu-
lator records the first data-carrying packet in a connection between
a Shadowsocks client and server, then sends the data to the server in
a separate connection. To send byte-changed probes, the simulator
randomly changes certain bytes of the payload to different values.
Non-replay probes. To simulate non-replay probes, the simulator
simply sends a specific number of random bytes. The justification
here is that the servers’ reactions to the GFW’s non-replay probes
are no different from their reaction to random probes. For compre-
hensiveness, we let the simulator send random probes with lengths
of between 1 and 99 bytes, as well as probes of 221 bytes.
Choice of servers. We chose a set of Shadowsocks implemen-
tations that has significant coverage over the Shadowsocks cir-
cumvention ecosystem. Specifically, we tested the Shadowsocks
implementations that met any of the following conditions: 1) is
available in a repository of a major Linux distribution; 2) is avail-
able in the pip repository; 3) is the latest version; 4) is widely used
by any popular one-click script; 5) has a recent fix to any distin-
guishable reactions as the result of a preliminary report on these
attacks; or 6) was recommended to us by developers. Using this
selection process, we chose Shadowsocks-libev (v3.0.8, v3.1.3, v3.2.5,
v3.3.1, and v3.3.3) and OutlineVPN (v1.0.6, v1.0.7, and v1.0.8).
5.2 Intention Behind Random Probes
Servers’ reactions to random probes. Figure 10 summarizes
5.2.1
the reactions of different Shadowsocks implementations to random
probes of various lengths. For each implementation, we group their
available encryption methods first by stream ciphers versus AEAD
ciphers, then by the size of their initialization vector (IV) or salt.
For example, among the stream ciphers supported by Shadowsocks-
libev are “aes-128-ctr” and “aes-256-cfb”. Both of these have a 16-
byte IV, so we group them in the “16 bytes” row. Refer to Section 2
for the meaning of IV and salt in the context of Shadowsocks pro-
tocols.
Server reactions in Figure 10 are represented by the codes “TIME-
OUT”, “RST”, and “FIN/ACK”. TIMEOUT means that the server
waits for more data, until either it or the prober reaches a time-
out. The GFW usually times out in less than 10 seconds, while the
default timeout value for many Shadowsocks implementations is
60 seconds. Therefore, TIMEOUT typically means that the prober,
and not the server, is the first to send a FIN/ACK to close the con-
nection. FIN/ACK and RST mean that the server sends either a
FIN/ACK or a RST immediately. The choice of FIN/ACK or RST
may depend on OS-level socket handling. Frolov et al. showed [19,
§IV.C] that when closing a socket on Linux, a FIN/ACK will be sent
if the application has read all the data from its kernel socket buffer;
otherwise a RST will be sent.
Figure 10 demonstrates that different implementations using
different forms of encryption have fingerprintable reactions to
probes of varying lengths. Below we discuss how the GFW may
exploit these reactions in each Shadowsocks implementation.
Shadowsocks-libev v3.0.8–v3.2.5 with stream ciphers. Take the first
row in Figure 10a as an example. Shadowsocks-libev v3.0.8–v3.2.5
servers with an 8-byte IV exhibit three reactions, depending on
the length of the random probe. When the length of a probe is 1–8
bytes, the server always times out. This is because the server has
only received a (partial) IV and is awaiting a target specification.
When the length of a probe is 9–14 bytes, the server usually
sends an immediate RST, because it has not received a complete
target specification. The shortest random probe likely to decrypt
to a meaningful specification is 15 bytes, which meets the minimal
length requirement of a complete IPv4 specification (see Section 2).
A hostname specification could be slightly shorter than 15 bytes,
but only if the 1-byte hostname length field happens to decrypt to
the value 1 or 2.
When the length of a probe is 15 or more bytes, the server
may have any of the three possible reactions: RST, TIMEOUT or
FIN/ACK. The reaction depends on whether the random payload
decrypts to a meaningful target specification. The first requirement
for a meaningful target specification is that the address type must
be one of the values 0x01, 0x03, or 0x04; any other value results
in an immediate RST. Because the address type is a 1-byte field,
we might expect to see an immediate RST in a 1 − 3
256 fraction
of tests. What we actually see is a fraction closer to 1 − 3
16. The
reason for this is that Shadowsocks-libev masks out the upper 4 bits
of the field (an artifact of the “one time auth” scheme mentioned
in Section 2.1). The probability of a RST reaction decreases with
longer probes, because longer probes are more likely to contain a
complete IPv6 address specification, or a hostname length that is
consistent with the packet length.
Upon receiving a complete target specification, the Shadowsocks
server tries to connect to the given target. Specifically, when the
address type field decrypts to 0x04, the server tries to resolve the
hostname; when the address type is 0x01 or 0x03, the server sends
a SYN packet to the target’s IP address and port. Since this behavior
is a connection to an essentially random IP address or hostname,
the connections almost always fail; and when that happens, the
server sends a FIN/ACK to the client to close the connection. If the
remote connection does not fail immediately (for instance, if the
remote host does not respond and the Shadowsocks server spends
time retransmitting SYN packets), the GFW’s probers will be the
first to close the connection with a FIN/ACK.
Shadowsocks-libev v3.0.8–v3.2.5 with AEAD ciphers. With AEAD
ciphers, servers have a different set of fingerprintable reactions. The
118
How China Detects and Blocks Shadowsocks
IMC ’20, October 27–29, 2020, Virtual Event, USA
(a) Stream ciphers
(b) AEAD ciphers
Figure 10: Reactions of Shadowsocks servers to synthetic random probes with different lengths. Figure 10a is for servers using
the stream ciphers construction and Figure 10b is for the AEAD ciphers construction. Payload lengths that the GFW has been
observed to send are marked in red. “TIMEOUT” means the server waits until the prober or itself times out. “RST” means the
server sends an immediate TCP RST. “FIN/ACK” means the server will be the first to send a FIN/ACK to close the connection.
first row in Figure 10b represents an AEAD cipher with a 16-byte
salt. When the probe length is less than or equal to 50 bytes, the
server times out waiting for more data. It wants there to be at least
enough data for the salt (16 bytes), encrypted length prefix (2 bytes),
encrypted length tag (16 bytes), and another tag (16 bytes) for the
first encrypted data payload. Once 51 bytes or more are received,
the server tries to decrypt the data received, which invariably fails
with an authentication error. (Unlike with stream ciphers, where
random data may by chance decrypt to something meaningful, with
AEAD ciphers, the probability of that happening is negligible.) The
server sends out an immediate RST because of the authentication
error.
Changes in Shadowsocks-libev v3.3.1–v3.3.3. The parsing logic
for Shadowsocks-libev v3.3.1–v3.3.3 is very similar to what we
just described above for Shadowsocks-libev v3.0.8–v3.2.5. The only
difference, as shown in Figure 10b, is that the server always times
out instead of sometimes sending an immediate RST [32].
OutlineVPN v1.0.6. OutlineVPN exclusively uses the AEAD ci-
pher construction of Shadowsocks, and only with the “chacha20-
ietf-poly1305” method, which has a 32-byte salt. In OutlineVPN
v1.0.6, when the probe length is less than 50 bytes, the server times
out. The server wants 50 bytes in order to parse the following
structure:
[32-byte salt]
[2-byte encrypted length][16-byte length tag]
Unlike Shadowsocks-libev, the OutlineVPN server does not addi-
tionally wait for enough data for there to be a second tag. More
uniquely, the OutlineVPN server sends a FIN/ACK immediately
when it receives a probe of exactly 50 bytes. When the probe length
is greater than 50 bytes, the server sends an immediate RST due to
an authentication failure.
119
OutlineVPN v1.0.7–v1.0.8. Starting in OutlineVPN v1.0.7, the de-
velopers fixed the server’s distinguishable reactions [19, 48]. Like
the newer versions of Shadowsocks-libev using AEAD ciphers, the
server always times out, regardless of probe length.
5.2.2 How an attacker might use the information from random
probes. We use the general term “attacker” instead of “GFW” in this
section for two reasons. First, attacks may be performed not only
by the GFW, but by any censor capable of observing Shadowsocks
traffic. Second, due to the black-box nature of the GFW, we can
only guess at its internal logic and cannot confirm our suspicions.
An attacker can identify a Shadowsocks server with high confi-
dence using statistical analysis of its reactions to random probes.
Specifically, an attacker can send a set of probes with varying
lengths to the server and record its reactions. After collecting
enough reactions, the attacker may perform a statistical analysis.
A server whose reactions fit into one row of Figure 10 is then very
likely to be a Shadowsocks server. The fact that the GFW needs
only a single probe to detect and block a Tor server [56], but a set
of several probes before blocking a Shadowsocks server, suggests
that the GFW does some statistical analysis of this kind to detect
Shadowsocks.
The attacker may even be able to infer the length of the IV in
older Shadowsocks implementations. Furthermore, when the IV
is inferred to be 12 bytes long, the attacker knows that the cipher
used is “chacha20-ietf”, because that is the only supported cipher
with a 12-byte IV [46, § Stream Cipher].
By similar reasoning, an attacker may be able to infer which
Shadowsocks implementation is in use, and its approximate version.
For example, whether an authentication error results in a RST or a
TIMEOUT can be used to determine if the server is running an older
or newer implementation [19]. Whether the probability of RST is
ImplementationSalt Length(Bytes)Probe Length (Bytes)1...6789101112131415161718192021222324...3132333435...3940414243...4748495051...221SS-libevv3.0.8-v3.2.58TIMEOUTRSTRST (above 13/16) or TIMEOUT (below 3/16) or FIN/ACK (below 3/16)12TIMEOUTRSTRST (above 13/16) or TIMEOUT (below 3/16) or FIN/ACK (below 3/16)16TIMEOUTRSTRST (above 13/16) or TIMEOUT (below 3/16) or FIN/ACK (below 3/16)SS-libevv3.3.1-v3.3.38TIMEOUTTIMEOUT (above 13/16) or FIN/ACK (below 3/16)12TIMEOUTTIMEOUT (above 13/16) or FIN/ACK (below 3/16)16TIMEOUTTIMEOUT (above 13/16) or FIN/ACK (below 3/16)ImplementationSalt Length(Bytes)Probe Length (Bytes)1...474849505152535455565758596061626364656667686970717273...221SS-libevv3.0.8-v3.2.516TIMEOUTRST24TIMEOUTRST32TIMEOUTRSTSS-libev v3.3.1-v3.3.316,24, or 32TIMEOUTOutlineVPN v1.0.632TIMEOUTFIN/ACKRSTOutlineVPN v1.0.7-v1.0.832TIMEOUTIMC ’20, October 27–29, 2020, Virtual Event, USA