title:Understanding Malicious Cross-library Data Harvesting on Android
author:Jice Wang and
Yue Xiao and
Xueqiang Wang and
Yuhong Nan and
Luyi Xing and
Xiaojing Liao and
Jinwei Dong and
Nicol&apos;as Serrano and
Haoran Lu and
XiaoFeng Wang and
Yuqing Zhang
Understanding Malicious Cross-library 
Data Harvesting on Android
Jice Wang, National Computer Network Intrusion Protection Center, University of 
Chinese Academy of Sciences; Indiana University Bloomington; Yue Xiao and 
Xueqiang Wang, Indiana University Bloomington; Yuhong Nan, Purdue University; 
Luyi Xing and Xiaojing Liao, Indiana University Bloomington; JinWei Dong, School of 
Cyber Engineering, Xidian University; Nicolas Serrano, Indiana University, Bloomington; 
Haoran Lu and XiaoFeng Wang, Indiana University Bloomington; Yuqing Zhang, 
National Computer Network Intrusion Protection Center, University of Chinese Academy 
of Sciences; School of Cyber Engineering, Xidian University; School of Computer Science 
and Cyberspace Security, Hainan University
https://www.usenix.org/conference/usenixsecurity21/presentation/wang-jice
This paper is included in the Proceedings of the 
30th USENIX Security Symposium.
August 11–13, 2021
978-1-939133-24-3
Open access to the Proceedings of the 
30th USENIX Security Symposium 
is sponsored by USENIX.
Understanding Malicious Cross-library Data Harvesting on Android
Jice Wang1;2(cid:3), Yue Xiao2(cid:3), Xueqiang Wang2, Yuhong Nan3;, Luyi Xing2;†,
Xiaojing Liao2;†, JinWei Dong4, Nicolas Serrano2, Haoran Lu2, XiaoFeng Wang2, Yuqing Zhang1;4;5;†
1National Computer Network Intrusion Protection Center, University of Chinese Academy of Sciences,
2Indiana University Bloomington,
3Purdue University, 4School of Cyber Engineering, Xidian University,
5School of Computer Science and Cyberspace Security, Hainan University
Abstract
Recent years have witnessed the rise of security risks of
libraries integrated in mobile apps, which are reported to
steal private user data from the host apps and the app backend
servers. Their security implications, however, have never been
fully understood. In our research, we brought to light a new
attack vector long been ignored yet with serious privacy im-
pacts – malicious libraries strategically target other vendors’
SDKs integrated in the same host app to harvest private user
data (e.g., Facebook’s user proﬁle). Using a methodology that
incorporates semantic analysis on an SDK’s Terms of Ser-
vices (ToS, which describes restricted data access and sharing
policies) and code analysis on cross-library interactions, we
were able to investigate 1.3 million Google Play apps and the
ToSes from 40 highly-popular SDKs, leading to the discovery
of 42 distinct libraries stealthily harvesting data from 16 pop-
ular SDKs, which affect more than 19K apps with a total of 9
billion downloads. Our study further sheds light on the under-
ground ecosystem behind such library-based data harvesting
(e.g., monetary incentives for SDK integration), their unique
strategies (e.g., hiding data in crash reports and using C2
server to schedule data exﬁltration) and signiﬁcant impacts.
1
Introduction
Mobile apps today extensively incorporate third-party li-
braries (e.g., analytics, advertising, app monetization, or
single-sign-on SDK), which enriches their functionalities but
also brings in security risks. It has been reported that mali-
cious SDKs stealthily collect private user data from the device
running their host app [53, 73, 74, 78] (e.g., IMEI, GPS loca-
tion, phone number, MAC address, SIM card ID, Android ID,
etc.), the server or the cloud supporting the app [69]. With
signiﬁcance of such leaks, the security implications of library
integration have yet been fully revealed: it is less clear whether
a malicious library could endanger a user’s sensitive infor-
mation from other data sources, those not under the direct
control of the affected app.
(cid:3)The ﬁrst two authors are ordered alphabetically. Work was done when
Jice Wang was studying at Indiana University Bloomington.
†Luyi Xing, Xiaojing Liao and Yuqing Zhang are co-corresponding au-
thors.
Figure 1: Workﬂow of cross-library data harvesting (XLDH)
Cross-library data harvesting. In our research, we discov-
ered a type of data harvesting libraries never reported before,
which strategically target the SDKs from other vendors also
integrated by the host app. These SDKs carry sensitive user
data. For example, the Facebook SDK extensively used by
apps for single sign-on [34] also manages the information
such as a user’s name, birthday, locations she went to, so-
cial, health, and political groups she follows. The data could
be exposed to the malicious library hosted by the same app
integrating the Facebook SDK. Figure 1 illustrates such a
malicious library, which ﬁrst checks the presence of the Face-
book SDK in its host app, and if so, invokes the Facebook
API to acquire the user’s Facebook session token and data.
Since both the malicious library and the victim SDK co-exist
within the same app, this invocation is not mediated. Given
the wide deployment of the Facebook Login SDK (in more
than 16% of the apps on Google Play [5]), the risk of such
a data leak is signiﬁcant. We call this attack Cross-Library
Data Harvesting (XLDH).1
Beyond its threat to personal privacy, malicious data har-
vesting can also have serious social implications. A prominent
example is the Cambridge Analytica scandal [17], in which
the personal data of millions of Facebook users (proﬁles, page
likes, current city, News Feed, etc. – enough to create psy-
chographic proﬁles of the users) were collected and utilized
for malicious political advertising [17]. XLDH also provides
a new avenue for such political proﬁling and promotion, as
discovered in our research (Section 5.4). Despite the impor-
tance of the problem, little has been done so far to understand
1In this paper, the terms “SDK" and “library" always refer to those de-
veloped by third-parties, i.e., vendors other than the host app vendor or OS
vendor; also, we refer to “SDK" as the victim and “library" as a general term.
USENIX Association
30th USENIX Security Symposium    4133
XLDH, not to mention any attempt to address this new security
and privacy risk.
Finding XLDH in the wild. In this paper, we report the ﬁrst
study on XLDH on Android, aiming to understand its privacy
and social impacts, underground ecosystem and challenges
in controlling the threat. To this end, we developed a new, au-
tomatic methodology called XFinder to identify malicious li-
braries integrated in real-world apps on Google Play. Our idea
is to discover restricted data managed by the SDKs and their
third-party data sharing policies, which describes whether
and how restricted data can be shared with or collected by
other libraries. We automatically extract those policies from
the terms of service (ToS, a.k.a., terms of use, terms and con-
ditions) released by the SDK vendors, and then analyze the
code of each integrated library to ﬁnd out whether it makes
any access to the SDK’s data in violation of these policies.
This turns out to be nontrivial due to the challenges in analyz-
ing ToS to recover its semantics and evaluating apps to ﬁnd
cross-library interactions.
More speciﬁcally, unlike app privacy policies that protect
known sensitive content (e.g., address, contact, etc.) and there-
fore can be identiﬁed by existing privacy policy analyzer such
as Polisis [57], ToS describes restricted data whose security or
privacy implications can only be determined from the context
of their usage. Examples include security-critical data such
as password and token, and SDK-speciﬁc sensitive data such
as utdid used by Alibaba for identifying user devices [2],
page likes, health or political groups of a user recorded by
Facebook, and education and project information maintained
by LinkedIn [18]. More challenging is to recover the data
sharing policies from ToS that specify the restrictions on
collecting and sharing different data items, which tends to
be complicated. For example, Google allows developers to
access advertising ID or device identiﬁer (e.g., ssaid, mac ad-
dress, imei), but restricts the collection of these two data item
simultaneously; also Facebook user’s page likes, timeline,
etc., are open to the apps certiﬁed by Facebook [15], but not
to other parties (including third-party libraries) [55], while
Facebook user ID and password are not allowed to be sent
out to the Internet by any party. Our research shows that ex-
isting techniques like Polisis [57] and PolicyLint [45] cannot
be directly adopted for ToS analysis (see the evaluation in
Section 3.2).
To address these challenges, XFinder utilizes a semantic
analysis tuned towards the unique features of ToS, which
leverages natural language processing techniques to capture
sensitive data items and to recover complicated policies (Sec-
tion 3.2). Further, our code analyzer module in XFinder is de-
signed to handle potential evasion tricks played by malicious
libraries when evaluating its interactions with a target SDK
(Section 3.3). Our experiment shows that XFinder achieved a
high precision of 86% and successfully detected 42 malicious
libraries from more than one million Android apps.
Measurement and discoveries. From 1.3 million Google
Play apps analyzed in our research, we are surprised to ﬁnd
the signiﬁcant impacts of the new threat. More speciﬁcally,
we discovered 42 distinct libraries that stealthily harvest data
from third-party SDKs without a user consent. These libraries
have been integrated into more than 19K apps, with a total of
9 billion downloads. The data harvested are highly sensitive,
including access tokens, proﬁle photos, and friend lists (see
Section 5). As an example, OneAudience, a library integrated
in more than 1,738 apps with more than 100 million users,
collects users’ private data from Facebook and Twitter SDKs.
Based on a press release from Nielsen [29], OneAudience
shared mobile user data with Nielsen – a marketing research
ﬁrm, and the data can be used by Nielsen’s customers for
political marketing purpose, among other marketing usages.
Hence, we suspect that the data harvesting campaign might
lead to a Cambridge-Analytica-like political scandal if they
were taken advantage of by the adversary. Although the cam-
paign has been stopped after we reported it to Facebook (see
below), already millions of Facebook users’ data have been
exposed, since the library has been continuously gathering
user data, once per hour on both Android and iOS since 2014.
Also interesting is the ecosystem behind XLDH, which in-
cludes library distribution, stealthy data exﬁltration channel,
and data monetization. In particular, XLDH vendors are found
to distribute their libraries through multiple channels, includ-
ing colluding with free app building services, integrating into
popular libraries, and offering app monetization (Section 5.4).
For example, app monetization is used to attract app develop-
ers to integrate problematic libraries into their apps: app de-
velopers that integrate OneAudience and Mobiburn are paid
$0.015 to $0.03 per app install. Furthermore, we revealed the
techniques used by malicious libraries that made their data
harvesting activities more stealthy and harder to detect, such
as the abuse of Java reﬂection technique (see Section 3.3).
Our study also sheds light on the challenges in eliminat-
ing the XLDH risk. We found that although VirusTotal and
Google Play are able to detect the libraries collecting data
from mobile devices (such as IMEI, contact), they all failed to
detect XLDH libraries and the apps integrating them, possibly
due to the challenges in determining third-party data sharing
policies and non-compliance with the policies. This has been
addressed by XFinder. We reported our ﬁndings to affected
parties, including Facebook, Twitter, Google Play and others,
who are all serious about this new risk and expressed grati-
tude for our help with bounty programs. Google asked the
developers of affected apps to remove the malicious libraries,
or drop these apps to control the risk. Facebook and Twitter
have taken legal actions to take down OneAudience, a XLDH
library owned by Bridge, a digital marketing company.
Contributions. We summarize the contributions as follows.
(cid:15) Our study brings to light a new attack vector that has long
been ignored, yet with serious privacy implications: malicious
libraries aiming at third-party SDKs integrated in the same
4134    30th USENIX Security Symposium
USENIX Association
apps to harvest private user data. Our ﬁndings demonstrate the
signiﬁcant privacy and social impacts of this new threat. Our
works also help better understand the underground ecosystem
behind it, and the challenges in controlling the risk.
(cid:15) Our study has been made possible by a novel methodol-
ogy that automatically identiﬁes XLDH from over a million
Android apps, through semantic analysis on ToS and code
analysis on cross-library interactions.
(cid:15) We release the dataset used in this research and our source
code for the automatic ToS analysis online [39].
2 Background
Cross-library API calls. Like an app that calls functions
of a library, libraries in an app naturally can invoke the
functions of another library. On Android, this is typically
done through ﬁrst explicitly importing the package name
of the callee class (in Java), and then invoking the target
function through the callee class’ instance. Further, Java
features a technique called reﬂection [26]. that allows func-
tion invocation in a more ﬂexible manner. As illustrated in
Figure 4a, to invoke a function getCurrentAccessToken
in the Facebook library, one can ﬁrst obtain a class ob-
ject through Java reﬂection API Class.forName, by pro-
viding the class name (com.facebook.AccessToken); then
through another reﬂection API getDeclaredMethod, one can
obtain a method object using the name of the target func-
tion getCurrentAccessToken; last, calling reﬂection API
invoke on the method object, one can invoke the target func-
tion. In our research, we observed that XLDH libraries often
leverage reﬂection to call victim libraries, likely for making
the behaviors more stealthy. Note that Android provides a
coarse-grained sandbox and permission model to regulate
third-party libraries, allowing them to operate with the same
permissions as their host apps [4, 76]. In particular, there
is no security boundary between libraries within the same
app, allowing one library to access another (e.g., invoking
functions) without restrictions.
SDK terms of service. Term of service (ToS) is an SDK
developer document that lays out terms, conditions, require-
ments, and clauses associated with the use of a mobile SDK,
e.g. copyright protection, accounts termination in the cases of
abuses, data usage and management, etc. Note that in addition
to the ToS for developers, an SDK vendor (e.g., Facebook and
Twitter) may also have a ToS for regular users, such as [16],
which is outside the scope of our study. In our research, we
manually collected 40 ToSes from SDK vendors’ developer
websites to investigate the XLDH risks.
Unlike privacy policy, which aims at informing end-users
about collection and use of personal data (e.g., name, email
address, mailing address, birthday, IP address), ToS speciﬁes
rules and guidelines for developers who uses an SDK, as illus-
trated in Figure 2. Also, data protected under privacy policy
(a) Dependency parsing tree
(b) Constituency parsing tree
Figure 2: The dependency parsing tree and constituency pars-
ing tree of the sentence: “you may not associate the Adver-
tising ID with any device identiﬁer without consent from the
end user."
is different from that covered by ToS. The former is usually