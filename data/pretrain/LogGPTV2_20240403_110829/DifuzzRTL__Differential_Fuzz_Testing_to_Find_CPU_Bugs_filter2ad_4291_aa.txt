title:DifuzzRTL: Differential Fuzz Testing to Find CPU Bugs
author:Jaewon Hur and
Suhwan Song and
Dongup Kwon and
Eunjin Baek and
Jangwoo Kim and
Byoungyoung Lee
3
0
1
0
0
.
1
2
0
2
.
1
0
0
0
4
P
S
/
9
0
1
1
.
0
1
:
I
O
D
|
E
E
E
I
1
2
0
2
©
0
0
.
1
3
$
/
1
2
/
5
-
4
3
9
8
-
1
8
2
7
-
1
-
8
7
9
|
)
P
S
(
y
c
a
v
i
r
P
d
n
a
y
t
i
r
u
c
e
S
n
o
m
u
i
s
o
p
m
y
S
E
E
E
I
1
2
0
2
2021 IEEE Symposium on Security and Privacy (SP)
DIFUZZRTL: Differential Fuzz Testing to Find
CPU Bugs
Jaewon Hur, Suhwan Song, Dongup Kwon, Eunjin Baek, Jangwoo Kim, Byoungyoung Lee∗
Department of Electrical and Computer Engineering
{hurjaewon, sshkeb96, dongup, ebaek, jangwoo, byoungyoung}@snu.ac.kr
Seoul National University
Abstract—Security bugs in CPUs have critical security impacts
to all the computation related hardware and software components
as it is the core of the computation. In spite of the fact that
architecture and security communities have explored a vast
number of static or dynamic analysis techniques to automatically
identify such bugs, the problem remains unsolved and challenging
largely due to the complex nature of CPU RTL designs.
This paper proposes DIFUZZRTL, an RTL fuzzer to auto-
matically discover unknown bugs in CPU RTLs. DIFUZZRTL
develops a register-coverage guided fuzzing technique, which ef-
ficiently yet correctly identifies a state transition in the finite state
machine of RTL designs. DIFUZZRTL also develops several new
techniques in consideration of unique RTL design characteristics,
including cycle-sensitive register coverage guiding, asynchronous
interrupt events handling, a unified CPU input format with
Tilelink protocols, and drop-in-replacement designs to support
various CPU RTLs. We implemented DIFUZZRTL, and per-
formed the evaluation with three real-world open source CPU
RTLs: OpenRISC Mor1kx Cappuccino, RISC-V Rocket Core,
and RISC-V Boom Core. During the evaluation, DIFUZZRTL
identified 16 new bugs from these CPU RTLs, all of which
were confirmed by the respective development communities and
vendors. Six of those are assigned with CVE numbers, and to the
best of our knowledge, we reported the first and the only CVE
of RISC-V cores, demonstrating its strong practical impacts to
the security community.
I. INTRODUCTION
CPU security bugs critically damage all the computation-
related hardware and software units. Due to the bug, CPUs may
produce a wrong computational result, freeze the execution,
reboot the computer, or allow unprivileged users to access
privileged data. One unique and critical challenge of CPU bugs
is that unlike software security bugs, it is extremely difficult
to deploy the patch as CPUs are hard-wired circuits which
cannot be re-wired once manufactured.
By far, many serious CPU bugs have been discovered.
Focusing on the cases in open source CPUs, it is reported that
OpenSparc had 296 bugs [1]. Proprietary CPUs such as Intel
CPUs also suffered from the CPU security bugs. The Pentium
FDIV bug [2] returned incorrect binary floating point results
when dividing a number, which costed Intel 475 million dollars
to replace the flawed processors [3]. More recently, a group of
security researchers discovered multiple security vulnerabilities
related to CPU’s speculative execution—Spectre, Meltdown,
∗ Corresponding author
SPOILER, Foreshadow, MDS [4–7]. We note there have been
many more CPU security bugs other than those: Pentium F00F
bug, which rebooted the computer upon executing a certain
instruction; Intel SGX Bomb, which rebooted the computer
upon intentionally violating memory integrity; and Intel TSX-
NI bug, in which a detail of the bug is unknown but Intel
disabled TSX through the microcode update [8, 9].
There have been tremendous efforts in automatically iden-
tifying CPU RTL bugs through static or dynamic analysis
techniques [10–13], but the problem remains unsolved and
still challenging largely due to the complex nature of CPU
RTL designs. In particular, RTL designs implement complex
sequential and combinational logics of hardware circuits, which
in fact materializes the finite state machines (FSM). Thus, the
general goal of RTL bug finding is to exhaustively explore as
many states in FSM as possible. However, such an exploration
either through static or dynamic techniques is challenging
mostly because there are too many states to be covered.
This paper proposes DIFUZZRTL, an RTL fuzzer specifically
designed to discover CPU RTL vulnerabilities. The core ideas
behind DIFUZZRTL can be summarized with following two
approaches: a dynamic testing approach and a differential
testing approach, both of which help DIFUZZRTL to efficiently
find RTL bugs. First, DIFUZZRTL takes a dynamic testing
approach, particularly the coverage-guided fuzzing, so as to
comprehensively explore hardware logics embodied in the
RTL design. Second, DIFUZZRTL takes a differential-testing
approach to clearly identify an RTL vulnerability. In other
words, DIFUZZRTL keeps comparing an execution result of
an RTL design with that of a golden model (i.e., an ISA-level
simulation result), thus detecting the bugs at ISA level.
We find that realizing aforementioned ideas involve several
challenges, particularly related to inherent characteristics of
RTL designs. The first challenge is that DIFUZZRTL needs a
new execution coverage metric tailored for RTL designs. A
multiplexer in RTL designs may seem to be a good choice
for coverage metrics, because it is similar to branches in
software code. However, we find that the multiplexer-based
coverage proposed by the state-of-the-art RTL fuzzer [14],
has critical limitations due to following two reasons: 1) cycle-
accurate natures of RTL circuit designs and 2) a vast number
of multiplexers in a circuit. We also confirmed through our
evaluation §VI that the above reasons clearly impose two
© 2021, Jaewon Hur. Under license to IEEE.
DOI 10.1109/SP40001.2021.00103
1286
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:15:46 UTC from IEEE Xplore.  Restrictions apply. 
limitations on the fuzzer: 1) it was not able to correctly capture
the states due to cycle-insensitivity; and 2) it has scalability
limitations due to complex multiplexer wiring.
The second challenge is that DIFUZZRTL needs a systematic
way to explore all possible input spaces of RTL designs.
Conventional software fuzzing typically assumes the one-
dimensional input space (i.e., file input space to fuzz user
programs, or system call input space to fuzz kernels). However,
CPU RTLs accept multi-dimensional inputs in the form of
raw bus packets, so called stimuli, which is sent from various
controllers—memory controllers (as a response to memory
read/write requests), interrupt controllers (raising an interrupt
request), etc. Worse yet, these packets are delivered to CPU
RTLs in every clock cycle, further complicating the input space
that CPU RTLs take.
DIFUZZRTL addresses above two challenges with following
design features. First, DIFUZZRTL’s coverage measurement
is based on a control register, which is a register whose value
can be used for any muxes’ control signal. Then DIFUZZRTL
measures the control register value every clock cycle, thereby
making it clock-sensitive and correctly capture the explored
states by RTL designs. Moreover, since a single control
register is connected to multiple muxes’ control signals, the
number of control registers is far less than the number of
wires connected to the mux’s control signals, addressing the
scalability limitation of mux-based coverage as well. We
highlight that DIFUZZRTL was able to fuzz even a complex
out-of-order machine which has about twenty thousands of
lines of implementation complexity. Second, DIFUZZRTL
provides systematic mechanisms to test a newly designed input
format for CPU RTLs, SimInput. SimInput includes full-fledged
information to run CPU RTLs, from memory address and value
pairs to interrupt signals, and it is automatically translated into
bus protocols that CPU RTLs are accepting. In order to execute
CPU RTLs as specified by SimInput, DIFUZZRTL works as a
pseudo SoC for the CPU, which includes a memory unit and
an interrupt controller inside.
We implemented DIFUZZRTL as a full-fledged fuzzing
framework for CPU RTLs. DIFUZZRTL automatically instru-
ments a given CPU RTL to measure the register coverage,
then keeps running two simulators, ISA and RTL simulators,
while providing an identical input to both simulators. After
each run, DIFUZZRTL cross-checks the architectural states,
and if it identifies the difference, DIFUZZRTL automatically
reports such an input as a potential bug. In order to demonstrate
its strong practical aspect, we implemented DIFUZZRTL to
support
three real-world CPU RTLs: OpenRISC Mor1kx
Cappuccino, RISC-V Rocket Core, and RISC-V Boom Core,
which are widely used for academic researches as well as
industry production. We note these CPU RTLs include not
only simple in-order pipelined cores but also complex out-of-
order superscalar cores.
During the evaluation, DIFUZZRTL identified total of 16
new bugs in those CPU RTLs, all of those are confirmed by
the respective development communities or vendors. More
importantly, six bugs of those are assigned with CVE numbers,
signifying its practical impacts to the security community. To
the best of our knowledge, DIFUZZRTL reported the first and
only CVE vulnerabilities of any RISC-V cores. DIFUZZRTL
has demonstrated the wide testing coverage with respect to
the bug types in CPU RTLs, including atomic operation,
instruction decoding, and even the performance bugs. In
particular, DIFUZZRTL identified the vulnerability from the
RISC-V boom core, which is similar to the notorious Pentium
FDIV vulnerability,
thereby helping to avoid unfortunate
CPU recall cases that Intel experienced before. Particularly
comparing the fuzzing performance of DIFUZZRTL against
RFuzz [14] (i.e., the state of the art RTL fuzzer), DIFUZZRTL
showed significantly better performances. In terms of execution
speed, DIFUZZRTL is 40 times faster than RFuzz to run CPU,
and in terms of states exploration efficiency, DIFUZZRTL is
6.4 times faster than RFuzz to identify a vulnerable state.
II. BACKGROUND
In this section, we provide a brief background of RTL
verification and the concept of coverage-guided fuzzing, which
has largely succeeded in software testing. Finally we introduce
and argue the benefits of adopting coverage-guided fuzzing to
RTL verification.
A. CPU Development and Testing
CPU Development.
In general, modern CPUs are developed
with the following two phases: 1) modeling a CPU architecture,
called Instruction Set Architecture (ISA); and 2) implementing
a microarchitecture with Register-Transfer level (RTL) abstrac-
tion, which follows the ISA. In the first phase, Instruction Set
Architecture (ISA) is defined, which dictates an architectural
level of inputs and outputs, as well as describing desired
operational behaviors to generate an output from a given input.
In particular, ISA defines how the programmer-visible states
(e.g., registers and memory states) are updated in response to
executing a well-formatted instruction.
Based on the ISA, a microarchitecture is designed in Register-
Transfer level (RTL) abstraction, materializing the conceptual
ISA model into a real hardware design. RTL can be expressed
with various hardware description languages such as Verilog
or VHDL [15, 16], which can be synthesized into a hardware
circuit. Since ISA does not dictate the implementation details
(e.g., the pipeline depth, cache size), there can be various
microarchitectures for the same ISA, each of which has its
own unique RTL implementation characteristics. For instance,
although both Rocket and Boom cores implement the same
RISC-V ISA, the former is an in-order and the latter is an
out-of-order core with different pipeline stages.
During the development cycle, CPU should be thoroughly
tested from many different aspects, including functionality,
performance, security, etc. Particularly focusing on the dynamic
testing techniques (we discuss static testing techniques in §VIII),
such a testing can be performed with either an ISA simulation
or an RTL simulation, as we describe next in turn.
Testing with ISA Simulation. An ISA simulator is a
software-only implementation, which simulates all the ISA-
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:15:46 UTC from IEEE Xplore.  Restrictions apply. 