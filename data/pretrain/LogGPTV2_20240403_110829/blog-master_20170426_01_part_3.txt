## 七、性能      
1亿条记录，每条记录15个随机中文。测试前后模糊查询性能。      
1\. 生成测试数据      
```      
vi test.sql      
insert into test001 select gen_hanzi(15) from generate_series(1,2500000);      
pgbench -n -r -P 1 -f ./test.sql -c 40 -j 40 -t 1 test      
test=# select count(*) from test001;      
   count         
-----------      
 100000000      
(1 row)      
test=# select * from test001 limit 10;    
               c1                   
--------------------------------    
 䥺笉皓鲽确艄𩨊馺腃彊𫟳忰采汦择    
 椮搮圮墔婂蹾飘孡𫛶镇赀聩线曲櫕    
 孨鄈韫萅赫炧暤蟠檼𩧲𫗬崉娲讹箸    
 烸喖醝稦怩𬸦棾奜妛曫仾飞饡绘韦    
 撑豁裥峊炠眏罱襄彊鳁莆壏妒辷阛    
 蜁愊𬸣磹贰帵眲嚉榑苍潵檐簄椰鲀    
 瑄翁蠃巨跻壾蛸湗鑂𩓋栎砣八瘫栵    
 馇巍笿鞒装棋嘢恓煓熴锠鋈蹃煿屃    
 訆韄踔牤嘇𫄙绚𫐌鹃燿螛梋鰢謇郼    
 扑蓨伤釱糕觩嬖蓷鳛绳圆醷𤇄叆掑    
(10 rows)    
```      
2\. 创建索引      
```      
test=# set maintenance_work_mem ='32GB';      
test=# create index idx_test001_1 on test001 using gin (c1 gin_trgm_ops);      
```      
表和索引大小    
```  
test=# \di+  
                             List of relations  
 Schema |     Name      | Type  |  Owner   |  Table  | Size  | Description   
--------+---------------+-------+----------+---------+-------+-------------  
 public | idx_test001_1 | index | postgres | test001 | 12 GB |   
(1 row)  
test=# \dt+  
                      List of relations  
 Schema |  Name   | Type  |  Owner   |  Size   | Description   
--------+---------+-------+----------+---------+-------------  
 public | test001 | table | postgres | 7303 MB |   
(1 row)  
```  
3\. 模糊查询性能测试      
3\.1 前模糊      
响应时间：9毫秒    
返回4701行    
```      
select * from test001 where c1 like '你%';    
test=# explain (analyze,verbose,timing,costs,buffers) select * from test001 where c1 like '你%';    
                                                          QUERY PLAN                                                              
------------------------------------------------------------------------------------------------------------------------------    
 Bitmap Heap Scan on public.test001  (cost=89.50..10161.50 rows=10000 width=46) (actual time=1.546..8.868 rows=4701 loops=1)    
   Output: c1    
   Recheck Cond: (test001.c1 ~~ '你%'::text)    
   Rows Removed by Index Recheck: 85    
   Heap Blocks: exact=4776    
   Buffers: shared hit=4784    
   ->  Bitmap Index Scan on idx_test001_1  (cost=0.00..87.00 rows=10000 width=0) (actual time=0.879..0.879 rows=4786 loops=1)    
         Index Cond: (test001.c1 ~~ '你%'::text)    
         Buffers: shared hit=8    
 Planning time: 0.099 ms    
 Execution time: 9.166 ms    
(11 rows)    
```      
3\.2 后模糊      
响应时间：0.25毫秒    
返回2行    
```      
select * from test001 where c1 like '%叆掑';    
test=# explain (analyze,verbose,timing,costs,buffers) select * from test001 where c1 like '%叆掑';    
                                                         QUERY PLAN                                                             
----------------------------------------------------------------------------------------------------------------------------    
 Bitmap Heap Scan on public.test001  (cost=89.50..10161.50 rows=10000 width=46) (actual time=0.049..0.223 rows=2 loops=1)    
   Output: c1    
   Recheck Cond: (test001.c1 ~~ '%叆掑'::text)    
   Rows Removed by Index Recheck: 87    
   Heap Blocks: exact=89    
   Buffers: shared hit=94    
   ->  Bitmap Index Scan on idx_test001_1  (cost=0.00..87.00 rows=10000 width=0) (actual time=0.031..0.031 rows=89 loops=1)    
         Index Cond: (test001.c1 ~~ '%叆掑'::text)    
         Buffers: shared hit=5    
 Planning time: 0.113 ms    
 Execution time: 0.249 ms    
(11 rows)    
```      
3\.3 前后模糊      
响应时间：0.2毫秒    
返回1行    
```      
select * from test001 where c1 like '%螛梋鰢%';    
test=# explain (analyze,verbose,timing,costs,buffers) select * from test001 where c1 like '%螛梋鰢%';    
                                                         QUERY PLAN                                                             
----------------------------------------------------------------------------------------------------------------------------    
 Bitmap Heap Scan on public.test001  (cost=89.50..10161.50 rows=10000 width=46) (actual time=0.044..0.175 rows=1 loops=1)    
   Output: c1    
   Recheck Cond: (test001.c1 ~~ '%螛梋鰢%'::text)    
   Rows Removed by Index Recheck: 81    
   Heap Blocks: exact=82    
   Buffers: shared hit=87    
   ->  Bitmap Index Scan on idx_test001_1  (cost=0.00..87.00 rows=10000 width=0) (actual time=0.027..0.027 rows=82 loops=1)    
         Index Cond: (test001.c1 ~~ '%螛梋鰢%'::text)    
         Buffers: shared hit=5    
 Planning time: 0.112 ms    
 Execution time: 0.201 ms    
(11 rows)    
```      
## 小结
三字或以上模糊查询，使用pg_trgm可以很好的解决。   
1,2个字的模糊查询，使用表达式索引也可以实现很好的性能。    
```
postgres=# create or replace function split_12(text) returns text[] as $$
declare
 res text[];
begin
  select regexp_split_to_array($1, '') into res;
  for i in 1..length($1)-1 loop
    res := array_append(res, substring($1, i, 2));
  end loop;
  return res;
end;
$$ language plpgsql strict immutable;
CREATE FUNCTION
postgres=# select split_12('abc你好');
           split_12           
------------------------------
 {a,b,c,你,好,ab,bc,c你,你好}
(1 row)
create index idx2 on tbl using gin (split_12(col));
select * from tbl where split_12(col) @> array['单字或双字'];
```
建议应用在查询的时候，判断一下词的个数，选择正确的SQL写法。   
### lc_collate, lc_ctype
Check that PostgreSQL is actually using the locale that you think it is. The LC_COLLATE and LC_CTYPE settings are determined when a database is created, and cannot be changed except by creating a new database. Other locale settings including LC_MESSAGES and LC_MONETARY are initially determined by the environment the server is started in, but can be changed on-the-fly. You can check the active locale settings using the SHOW command.   
lc_ctype和lc_collate只能在创建数据库时指定，一旦创建，无法修改。   
lc_ctype和lc_collate决定了什么？  
https://dba.stackexchange.com/questions/94887/what-is-the-impact-of-lc-ctype-on-a-postgresql-database   
```
The locale settings influence the following SQL features:
Sort order in queries using ORDER BY or the standard comparison operators on textual data
The upper, lower, and initcap functions
Pattern matching operators (LIKE, SIMILAR TO, and POSIX-style regular expressions); locales affect both case insensitive matching and the classification of characters by character-class regular expressions
The to_char family of functions
The ability to use indexes with LIKE clauses
```
[《PostgreSQL 模糊查询增强插件pgroonga , pgbigm (含单字、双字、多字、多字节字符) - 支持JSON模糊查询等》](../202003/20200330_01.md)  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")