### Ticket Information
- **Original Ticket:** http://projects.scipy.org/numpy/ticket/922
- **Date:** 2008-10-02
- **Reporter:** @josef-pkt
- **Assigned To:** Unknown

### Issue Description
During my fuzz testing of `scipy.stats`, I occasionally encounter test failures. The issue appears to be related to the `numpy.random.hypergeometric` function, which generates random numbers outside the support of the distribution for certain cases.

#### Environment
- **Numpy Version:** 1.2.0rc2

#### Function Signature
```python
hypergeometric(ngood, nbad, nsample, size=None)
```

### Observed Behavior
When the sample size (number of draws, `nsample`) is small, the generated random numbers appear to be within the expected range:

```python
>>> np.random.hypergeometric(3, 18, 8, size=10)
array([2, 1, 0, 2, 1, 1, 2, 1, 0, 3])

>>> np.random.hypergeometric(3, 18, 9, size=10)
array([2, 2, 0, 0, 1, 0, 1, 1, 3, 1])

>>> np.random.hypergeometric(3, 18, 10, size=10)
array([0, 2, 2, 0, 2, 2, 2, 0, 0, 2])
```

However, for sample sizes larger than 11, the generated random numbers exceed the possible values (since there are only 3 good balls in the urn):

```python
>>> np.random.hypergeometric(3, 18, 11, size=10)
array([18, 16, 16, 17, 18, 17, 18, 17, 17, 16])

>>> np.random.hypergeometric(3, 18, 12, size=10)
array([17, 16, 16, 18, 17, 17, 18, 17, 16, 17])

>>> np.random.hypergeometric(3, 18, 13, size=10)
array([18, 17, 17, 16, 17, 17, 16, 16, 18, 16])

>>> np.random.hypergeometric(3, 18, 14, size=10)
array([16, 17, 17, 17, 17, 18, 17, 16, 18, 17])

>>> np.random.hypergeometric(3, 18, 15, size=10)
array([18, 18, 17, 16, 17, 16, 17, 17, 18, 18])
```

### Reversing Good and Bad Balls
Reversing the number of good and bad balls works correctly for small sample sizes:

```python
>>> np.random.hypergeometric(18, 3, 5, size=10)    # OK
array([5, 4, 5, 5, 4, 4, 4, 4, 5, 5])

>>> np.random.hypergeometric(18, 3, 10, size=10)    # OK
array([9, 8, 9, 7, 8, 8, 7, 8, 8, 9])
```

For sample sizes greater than or equal to 11, negative numbers are generated, which is incorrect:

```python
>>> np.random.hypergeometric(18, 3, 11, size=10)
array([-5, -5, -5, -7, -4, -5, -5, -4, -6, -6])

>>> np.random.hypergeometric(18, 3, 13, size=10)
array([-3, -5, -5, -4, -4, -4, -5, -5, -3, -4])

>>> np.random.hypergeometric(18, 3, 14, size=10)
array([-4, -3, -4, -3, -2, -4, -3, -4, -2, -4])

>>> np.random.hypergeometric(18, 3, 15, size=10)
array([-2, -2, -1, -1, -3, -2, -2, -2, -1, -2])

>>> np.random.hypergeometric(18, 3, 16, size=10)
array([-1, -1,  0, -1,  0, -2, -1, -2, -1, -2])
```

### Conclusion
The `numpy.random.hypergeometric` function appears to generate invalid random numbers when the sample size exceeds the number of good or bad balls in the urn. This issue needs to be addressed to ensure the function behaves as expected.