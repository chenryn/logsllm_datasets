### Source Code and Deceptive Techniques

There is no other method to identify the use of such deceptive techniques, making our methods particularly stealthy and effective as a class of privacy-invasive attacks against users.

#### Root Cause and Mitigation

The underlying issue enabling these attacks is the inherent difficulty for browsers to accurately determine whether something is visible to a user. The discrepancy between the browser's view of a page and the user's visual perception creates ample opportunities for misuse. While we have identified several techniques for hiding elements, it is likely that even more advanced techniques exist, such as color-based deceptive techniques that blend elements and text with the background. We will continue to enhance our browser extension as new techniques are discovered. However, the root cause of these issues means that any purely technical defense will be incomplete. We believe that clearly informing users about the information provided to forms using precise, fine-grained labels can better protect them against this privacy threat. Krol and Preibusch [32] demonstrated that security or privacy warnings lead to reduced disclosure of sensitive data in web forms. However, the notification information shown by Safari and Firefox is different in nature (i.e., no alarming language and not presented as an actual warning). Prior work on security indicators and warnings has extensively shown that the effectiveness of such practices can be influenced by multiple factors. A study exploring how users' behavior is affected by these notifications is beyond the scope of our work but is an important and interesting direction for future research.

#### Crawling Coverage

Our large-scale study provides insights into the prevalence of element-hiding techniques in the wild. As we followed a depth-of-one approach, our measurements likely represent a lower bound on the use of deceptive techniques, as websites may include additional forms not directly accessible from the landing page. Furthermore, websites may already be using other concealment techniques undetectable by our system. Additionally, we do not have access to post-login pages, which may result in our crawler missing additional forms.

#### Browser Monoculture

Microsoft's recent decision to build Edge on Chromium has attracted criticism for exacerbating the monoculture issue. Our attacks highlight this risk, as all the flaws we exploit for our most invasive attack are present in several major browsers (Chrome, Edge, Opera) and even more privacy-oriented ones (Brave) due to their reliance on the same underlying engine. Another issue is the apparent reluctance of certain browsers to independently address vulnerabilities stemming from (or affecting) Chromium, instead waiting for the Chromium team to resolve these issues. For example, Edge explicitly considers flaws that also affect Chrome out of scope for their bug bounty program.

#### Password Managers

While our primary focus is on browsers, we also investigated how two popular password managers (LastPass, 1Password) handle hidden elements when they autocomplete forms. We found that they are similarly vulnerable to browsers. Specifically, 1Password does not fill elements only if they are hidden by setting the CSS `display` property to `none`. LastPass does not fill elements hidden using `display: none` and `visibility: hidden` (strangely, it fills them if `visibility` is set to `collapse`). Given that the LastPass extension has over 10 million downloads in the Google Chrome store and the 1Password extensions account for over 1.6 million downloads, their autofill behavior currently exposes many users to significant privacy threats.

#### Disclosure and Ethics

Due to the severity of our attacks, we disclosed our techniques and findings to the affected browser vendors; Chromium is currently working towards patching their system. We note that the experiments were conducted on the authors' machines using test browser profiles; no external users participated or were targeted during our experiments.

### Related Work

To the best of our knowledge, this paper presents the first systematic and comprehensive analysis of the autofill functionality available in all major browsers. Our research demonstrates new attack vectors that exploit this widely-used functionality and highlights the severe privacy threat it poses to users. In this section, we provide an overview of prior works related to autocompletion.

#### Web Forms

A series of blog posts by researchers [24, 40] and a recently published paper [11] highlighted how credentials and credit card numbers can be obtained through the browser's autocomplete functionality. In [24], they show that third-party scripts included in a page can inject a hidden login form and leverage the browser password manager's autocomplete functionality to obtain the user's credentials for that particular website. In [40], they show that third-party session-replay scripts included in the page can obtain the information of a form, regardless of whether it was entered manually or autofilled by the browser. Although these approaches leverage the autocomplete functionality, the outlined issues stem from the inclusion of third-party scripts not restricted by the Same-Origin Policy (SOP), allowing them to access information willingly provided by the user to the first party. In the case of credit cards, the exfiltration described in [11, 40] is possible when the user intentionally provides this information to the first party. Our work, however, demonstrates new techniques that remove such constraints and comprehensively explores the exfiltration of all types of PII from the user’s profile.

In another direction, Starov et al. [38] and Chatzimpyrros et al. [20] showed that contact and registration forms can expose users' PII to third parties. Kapravelos et al. [26] demonstrated that malicious extensions can steal sensitive data, such as passwords and email addresses, from web forms. In contrast, our work considers that the first-party may also be malicious and focuses on devising techniques that exploit flaws in the autofill and preview functionality to exfiltrate sensitive information that the user never intended to disclose. Moreover, our data inference attacks do not require the user to enter information in the form or even use autofill.

#### Password Managers

In a different line of work focused on password-autocompletion, Silver et al. [35] explored the autofill policies employed by 10 different browser, mobile, and third-party password managers and identified how they differ across them. They also investigated how the autofill functionality can be leveraged by third-parties for stealing user passwords. Their scenario involved a rogue WiFi router injecting login forms in multiple frames on a page, which are then autofilled by password managers, and malicious scripts can read the forms. In similar work, Stock et al. [41] investigated how the password managers of all major browsers behave regarding login form autocompletion and how they can be misused by a cross-site scripting (XSS) attacker who can run malicious code in the context of another site.

Compared to our work, these studies focus on how the autocomplete functionality of password managers can be used to steal the user’s credentials. No prior work has explored how form autofill can be used for stealthily exfiltrating various types of PII from the user’s profile. While browsers are the main focus of our work, we found that two of the most popular password managers are also susceptible to a wide range of our element-hiding techniques.

### Conclusions

In this paper, we presented the first comprehensive evaluation of the privacy threat posed by browsers' autofill functionality to users. We identified various techniques for hiding the presence of form fields that are automatically filled by major browsers. These techniques can be misused for stealthily obtaining sensitive information, unbeknownst to users who rely on autofill for convenience. Our subsequent large-scale study revealed that such deceptive practices are common, with 5.8% of all forms autofilled by Chrome containing at least one hidden field. More importantly, filling out hidden elements is only the first flaw in browsers' autofill functionality. Our in-depth analysis revealed a series of flaws and idiosyncrasies that allowed us to bypass all existing safeguards protecting the information in users' autocomplete profiles. While each of these new attacks constitutes an important privacy risk individually, when combined, they enable a far more egregious attack that exploits the preview functionality and can infer the personal information of cautious users who decide against using autofill. This attack works against all Chromium-based browsers, highlighting the implications of the monoculture issue affecting the browser ecosystem. The severity of our findings prompted us to create a countermeasure to better protect users until browser vendors address all the issues we have reported. Overall, while autofill is a major convenience for users, we hope that our work sheds light on the significant privacy-utility tradeoff it introduces and allows users to better protect their data.

### Acknowledgments

We would like to thank the anonymous reviewers for their valuable feedback. This work was supported by the DARPA ASED Program and AFRL (FA8650-18-C-7880), and NSF (CNS-1934597). Any opinions, findings, conclusions, or recommendations expressed herein are those of the authors and do not necessarily reflect those of the US Government.