source code there is no other way to identify the use of such decep-
tive techniques. This renders our techniques a particularly stealthy
and effective class of privacy-invasive attacks against users.
Root cause and mitigation. The underlying issue that enables
the attacks presented in this paper, is the inherent challenging
task for browsers to truly infer if something is visible to a user
or not. The disconnect between the browser’s view of a page and
the user’s visual perception, leaves ample room for misuse. While
we have identified several techniques for hiding elements, it is
likely that even more advanced techniques exist (e.g., color-based
deceptive techniques that make elements and text blend-in with the
background). As such, we will continue to augment our browser
extension as new techniques are identified. However, the root cause
from which these issues arise will render incomplete any defense
that is purely technical. More specifically, we believe that clearly
informing users what information will be provided to a form us-
ing precise fine-grained labels, can better equip users against this
privacy threat. Krol and Preibusch [32] showed that security or
privacy warnings lead to a reduced disclosure of sensitive data in
web forms, but the notification information shown by Safari and
Firefox is vastly different in nature (i.e., no alarming language and
not presented as an actual warning). As prior work on security
indicators and warnings has extensively demonstrated [12, 42], the
effectiveness of such practices can be affected by a multitude of
factors. A study that explores how users’ behavior is affected by
these notifications is out of the scope of our work, but we consider
it an important and interesting direction for future work.
Crawling coverage. Our large-scale study sheds light on the
prevalence of element-hiding techniques in the wild. As we fol-
lowed a depth-of-one approach, our measurements likely present a
lower bound on the use of deceptive techniques, as web sites may
include additional forms that are not directly accessible from the
landing page. Furthermore, websites may already be leveraging
other concealment techniques that are not detectable by our sys-
tem. Finally, we do not have access to post-login pages, which may
result in our crawler missing additional forms.
Browser monoculture. Microsoft’s recent decision to build
Edge off of Chromium attracted criticism as it exacerbates the mono-
culture issue. Our attacks highlight this risk, as all the flaws that
we exploit for our most invasive attack are present in several major
browsers (Chrome, Edge, Opera) including more privacy-oriented
ones (Brave) due to their reliance on the same underlying engine.
Another issue is the seeming unwillingness of certain browsers to
independently tackle vulnerabilities that stem from (or also affect)
Chromium, waiting instead for these issues to be addressed by the
Chromium team. For instance, Edge explicitly considers flaws that
also affect Chrome out of scope of their bug bounty program.
Password managers. While browsers are our main focus in this
work, we also investigate how two popular password managers
(LastPass, 1Password) handle hidden elements when they autocom-
plete forms and find that they are similarly vulnerable to browsers.
Specifically, 1Password does not fill elements only if they are hidden
by setting the CSS display property to none. LastPass does not
fill elements hidden using display:none and visibility:hidden
(strangely, it fills them if visibility is set to collapse). As the
LastPass extension has over 10 million downloads in the Google
Chrome store, and the 1Password extensions account for over 1.6
million downloads, their autofill behavior is currently exposing
many users to considerable privacy threats.
Disclosure and ethics. Due to the severity of our attacks, we
disclosed our techniques and findings to the affected browser ven-
dors; Chromium is currently working towards patching their sys-
tem. We also note that the experiments were conducted on the
authors’ machines using test browser profiles; no external users
participated, or were targeted, during our experiments.
10 RELATED WORK
To the best of our knowledge, this paper presents the first systematic
and comprehensive analysis of the autofill functionality available in
all major browsers. Our research demonstrates new attack vectors
that exploit this widely-used functionality, and highlights the severe
privacy threat that it poses to users. In this section we present an
overview of prior works that are related to autocompletion.
Web Forms. A series of blog posts by researchers [24, 40] and
a recently published paper [11], highlighted how credentials and
credit card numbers can be obtained through the browser auto-
complete functionality. In [24] they show that third-party scripts
included in a page can inject a hidden login form and leverage the
browser password manager’s autocomplete functionality to obtain
the user’s credentials for that particular website. In [40] they show
that third-party session-replay scripts included in the page can ob-
tain the information of a form, regardless of that information being
entered manually or autofilled by the browser. Even though these
approaches leverage the autocomplete functionality, the outlined
issues stem from the inclusion of third-party scripts that are not
restricted by the Same-Origin-Policy (SOP), and thus can access
the information that a user provides willingly to the first party. Es-
pecially in the case of credit cards, the exfiltration that is described
in [11, 40] is possible when the user intentionally provides this in-
formation to the first party. Our work, however, demonstrates new
techniques that remove such constraints and also comprehensively
explores the exfiltration of all types of PII from the user’s profile.
In another direction Starov et al. [38] and Chatzimpyrros et
al. [20] showed, respectively, that contact and registration forms can
expose users’ PII to third parties. Kapravelos et al. [26] showed that
malicious extensions can steal sensitive data, such as passwords
and email addresses, from web forms. On the other hand, in our
work we consider that the first-party may also be malicious, and
focus on devising techniques that exploit flaws in the autofill and
preview functionality, for exfiltrating sensitive information that
the user never intended to disclose. To make matters worse, our
data inference attacks do not actually require the user to enter
information in the form or even use autofill.
Password managers. In a different line of work that focused
on password-autocompletion, Silver et al. [35] explored the autofill
policies employed by 10 different browser, mobile, and third-party
password managers and identified how they differ across them.
They also investigated how the autofill functionality can be lever-
aged by third-parties for stealing user passwords. Their scenario
focused on a rogue WiFi router that injects login forms in multiple
frames in a page, which are autofilled by password managers, and
then malicious scripts can read the forms. In similar work, Stock
et al. [41] investigated how the password managers of all major
browsers behave with regards to login form autocompletion, and
how they can be misused by a XSS attacker that can run malicious
code in the context of another site.
Compared to our work, these studies focus on how the autocom-
plete functionality of password managers can be used to steal the
user’s credentials. No prior work attempts to explore how form
autofill can be used for stealthily exfiltrating various types of PII
from the user’s profile. While browsers are the main focus of our
work, we found that two of the most popular password managers
are also susceptible to a plethora of our element-hiding techniques.
11 CONCLUSIONS
In this paper we presented the first comprehensive evaluation of the
privacy threat that browsers’ autofill functionality poses to users.
As a starting point, we identified various techniques for hiding
the presence of form fields that are automatically filled by major
browsers. These techniques can be misused for stealthily obtaining
sensitive information, unbeknownst to users that leverage autofill
for its convenience. Our subsequent large-scale study revealed that
such deceptive practices are commonplace in the wild, as we found
that 5.8% of all forms that are autofilled by Chrome contain at least
one hidden field. More importantly, filling out hidden elements is
only the first flaw in browsers’ autofill functionality. Our in-depth
analysis revealed a series of flaws and idiosyncrasies that allowed
us to bypass all existing safeguards that protect the information in
users’ autocomplete profiles. While all these new attacks constitute
important privacy risks individually, when combined they enable a
far more egregious attack that exploits the preview functionality
and can infer the personal information of cautious users that decide
against using autofill. This attack works against all Chromium-
based browsers, highlighting the implications of the monoculture
issue affecting the browser ecosystem. The severity of our findings
prompted us to create a countermeasure to better protect users
until browser vendors address all the issues that we have reported.
Overall, while autofill is a major convenience for users, we hope
that our work sheds light on the significant privacy-utility tradeoff
it introduces and allows users to better protect their data.
ACKNOWLEDGMENTS
We would like to thank the anonymous reviewers for their valuable
feedback. This work was supported by the DARPA ASED Program
and AFRL (FA8650-18-C-7880), and NSF (CNS-1934597). Any opin-
ions, findings, conclusions, or recommendations expressed herein
are those of the authors, and do not necessarily reflect those of the
US Government.
[30] Meng Luo, Oleksii Starov, Nima Honarmand, and Nick Nikiforakis. Hindsight:
Understanding the evolution of ui vulnerabilities in mobile browsers. In Pro-
ceedings of the 2017 ACM SIGSAC Conference on Computer and Communications
Security, pages 149–162, 2017.
[31] Arunesh Mathur, Gunes Acar, Michael J Friedman, Elena Lucherini, Jonathan
Mayer, Marshini Chetty, and Arvind Narayanan. Dark patterns at scale: Findings
from a crawl of 11k shopping websites. Proceedings of the ACM on Human-
Computer Interaction, 3(CSCW):1–32, 2019.
[32] Sören Preibusch, Kat Krol, and Alastair R Beresford. The privacy economics of
voluntary over-disclosure in web forms. In The Economics of Information Security
and Privacy, pages 183–209. Springer, 2013.
[33] Mirjam Seckler, Silvia Heinz, Javier A Bargas-Avila, Klaus Opwis, and Alexan-
dre N Tuch. Designing usable web forms: empirical evaluation of web form
improvement guidelines. In Proceedings of the SIGCHI Conference on Human
Factors in Computing Systems, pages 1275–1284, 2014.
[34] Anisha Sekar. Stolen credit card numbers, 2015. https://www.nerdwallet.com/
blog/credit-cards/stolen-credit-card-numbers/.
[35] David Silver, Suman Jana, Dan Boneh, Eric Chen, and Collin Jackson. Password
managers: Attacks and defenses.
In Proceedings of the 23rd USENIX Confer-
ence on Security Symposium (USENIX Security 14), SEC’14, USA, 2014. USENIX
Association.
[36] Suphannee Sivakorn, Jason Polakis, and Angelos D. Keromytis. I am robot: (deep)
learning to break semantic image captchas. In Proceedings of the 1st IEEE European
Symposium on Security and Privacy, EuroSP ’16, 2016.
[37] Emily Stark. The urlephant in the room. 2019.
[38] Oleksii Starov, Phillipa Gill, and Nick Nikiforakis. Are you sure you want to
contact us? quantifying the leakage of pii via website contact forms. Proceedings
on Privacy Enhancing Technologies, 2016(1):20–33, 2016.
[39] Oleksii Starov and Nick Nikiforakis. Xhound: Quantifying the fingerprintability
of browser extensions. In 2017 IEEE Symposium on Security and Privacy (SP),
pages 941–956. IEEE, 2017.
[40] Steven Englehardt. Freedom To Tinker - No boundaries: Exfiltration of personal
data by session-replay scripts. https://freedom-to-tinker.com/2017/11/15/no-
boundaries-exfiltration-of-personal-data-by-session-replay-scripts/, 2017.
[41] Ben Stock and Martin Johns. Protecting users against xss-based password man-
ager abuse. In Proceedings of the 9th ACM symposium on Information, computer
and communications security, pages 183–194, 2014.
[42] Christopher Thompson, Martin Shelton, Emily Stark, Maximilian Walker, Emily
Schechter, and Adrienne Porter Felt. The web’s identity crisis: understanding the
effectiveness of website identity indicators. In 28th USENIX Security Symposium
USENIX Security 19), pages 1715–1732, 2019.
[43] Erik Trickel, Oleksii Starov, Alexandros Kapravelos, Nick Nikiforakis, and Adam
Doupé. Everyone is different: client-side diversification for defending against
extension fingerprinting. In 28th USENIX Security Symposium (USENIX Security
19), pages 1679–1696, 2019.
[44] Tobias Urban, Martin Degeling, Thorsten Holz, and Norbert Pohlmann. Beyond
the front page: Measuring third party dynamics in the field. In Proceedings of
The Web Conference 2020, pages 1275–1286, 2020.
[45] Christine Utz, Martin Degeling, Sascha Fahl, Florian Schaub, and Thorsten Holz.
(un) informed consent: Studying gdpr consent notices in the field. In Proceedings
of the 2019 ACM SIGSAC Conference on Computer and Communications Security,
pages 973–990, 2019.
[46] Mingxue Zhang, Wei Meng, Sangho Lee, Byoungyoung Lee, and Xinyu Xing. All
your clicks belong to me: investigating click interception on the web. In 28th
USENIX Security Symposium (USENIX Security 19), pages 941–957, 2019.
[47] Binbin Zhao, Haiqin Weng, Shouling Ji, Jianhai Chen, Ting Wang, Qinming He,
and Reheem Beyah. Towards evaluating the security of real-world deployed
image captchas. In Proceedings of the 11th ACM Workshop on Artificial Intelligence
and Security, pages 85–96, 2018.
[8] Mailchimp - troubleshooting the embedded signup form, 2020. https://mailchimp.
com/help/troubleshooting-the-embedded-signup-form/.
[9] Maxmind db, 2020. https://www.maxmind.com/en/geoip2-city.
[10] Nyc department of planning, 2020. https://www1.nyc.gov/site/planning/data-
maps/open-data.page#snd.
[11] Gunes Acar, Steven Englehardt, and Arvind Narayanan. No boundaries: data
exfiltration by third parties embedded on web pages. In Proceedings of the 20th
Privacy Enhancing Technologies Symposium (PETS). Sciendo, July 2020.
[12] Devdatta Akhawe and Adrienne Porter Felt. Alice in warningland: A large-scale
field study of browser security warning effectiveness. In Presented as part of the
22nd USENIX Security Symposium (USENIX Security 13), pages 257–272, 2013.
[13] Mohamed Alsharnouby, Furkan Alaca, and Sonia Chiasson. Why phishing still
works: User strategies for combating phishing attacks. International Journal of
Human-Computer Studies, 82:69–82, 2015.
[14] Anonymized. Preview demo: Desktop, 100k credit card values. https://vimeo.
[15] Anonymized. Preview demo: Laptop, 100k email address values. https://vimeo.
[16] Anonymized. Preview demo: Multiple autofill accounts. https://vimeo.com/
com/412514626/fb485212ad.
com/412447440/e753a2cf4c.
414161536/c3a9e00f1c.
REFERENCES
[1] Google chrome privacy whitepaper. https://www.google.com/chrome/privacy/
whitepaper.html.
[2] Google developers - help users checkout faster with autofill. https://developers.
google.com/web/updates/2015/06/checkout-faster-with-autofill.
[3] Google developers - help users checkout faster with autofill. https://developers.
google.com/web/updates/2015/06/checkout-faster-with-autofill.
[4] Mozilla firefox features. https://wiki.mozilla.org/Firefox/Features/Form_Autofill#
Feature_Availability.
[5] The guardian - browser autofill used to steal personal details in new phishing
attack, 2017. https://www.theguardian.com/technology/2017/jan/10/browser-
autofill-used-to-steal-personal-details-in-new-phising-attack-chrome-safari.
[6] HTML Living Standard - Last Updated 26 February 2020. https://html.spec.
whatwg.org/multipage/form-control-infrastructure.html#attr-fe-autocomplete,
2020.
[7] Http archive - state of the web, 2020. https://httparchive.org/reports/state-of-
the-web.
[17] Reuben Binns, Jun Zhao, Max Van Kleek, and Nigel Shadbolt. Measuring third-
party tracker power across web and mobile. ACM Transactions on Internet Tech-
nology (TOIT), 18(4):1–22, 2018.
[18] Tomasz Bujlow, Valentín Carela-Español, Josep Sole-Pareta, and Pere Barlet-Ros.
A survey on web tracking: Mechanisms, implications, and defenses. Proceedings
of the IEEE, 105(8):1476–1510, 2017.
[19] Yinzhi Cao, Song Li, Erik Wijmans, et al. (cross-) browser fingerprinting via os
and hardware level features. In NDSS, 2017.
[20] Manolis Chatzimpyrros, Konstantinos Solomos, and Sotiris Ioannidis. You shall
In Computer
not register! detecting privacy leaks across registration forms.
Security, pages 91–104. Springer, 2019.
[21] Graham Cluley. Hackers’ malicious script skimmed credit card details off robert
dyas website, 2020. https://www.grahamcluley.com/hackers-robert-dyas/.
[22] Linda Di Geronimo, Larissa Braz, Enrico Fregnan, Fabio Palomba, and Alberto
Bacchelli. Ui dark patterns and where to find them: A study on mobile applications
and user perception. In Proceedings of the 2020 CHI Conference on Human Factors
in Computing Systems, CHI ’20, 2020.
[23] Steven Englehardt and Arvind Narayanan. Online tracking: A 1-million-site
measurement and analysis. In Proceedings of the 2016 ACM SIGSAC conference on
computer and communications security, pages 1388–1401, 2016.
[24] Gunes Acar.
Freedom To Tinker - No boundaries for user identities:
https://freedom-to-
Web trackers exploit browser
tinker.com/2017/12/27/no-boundaries-for-user-identities-web-trackers-
exploit-browser-login-managers/, 2017.
login managers.
[25] Brendan Harkness. Anatomy of a credit card, 2020. https://www.creditcardinsider.
com/learn/anatomy-of-a-credit-card/.
[26] Alexandros Kapravelos, Chris Grier, Neha Chachra, Christopher Kruegel, Gio-
vanni Vigna, and Vern Paxson. Hulk: Eliciting malicious behavior in browser
extensions. In 23rd USENIX Security Symposium (USENIX Security 14), pages
641–654, 2014.
[27] Soroush Karami, Panagiotis Ilia, Konstantinos Solomos, and Jason Polakis. Carnus:
Exploring the privacy threats of browser extension fingerprinting. In 27th Annual
Network and Distributed System Security Symposium. The Internet Society, 2020.
[28] Pierre Laperdrix, Walter Rudametkin, and Benoit Baudry. Beauty and the beast:
Diverting modern web browsers to build unique browser fingerprints. In 2016
IEEE Symposium on Security and Privacy (SP), pages 878–894. IEEE, 2016.
[29] Lindsay Liedke. Wpforms blog - online form statistics & facts for 2020, 2020.
https://wpforms.com/online-form-statistics-facts/#form-conversions.