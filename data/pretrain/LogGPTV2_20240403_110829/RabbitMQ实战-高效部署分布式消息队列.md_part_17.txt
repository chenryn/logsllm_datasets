I6
picture 函数4回显通知你它正在调整图片大小。和以往一样，在实际环境中，这
里需要真实的图片大小调整代码。
现在，打开第三个终端窗口，并输入：
$php resize-picture-consumer.php
然后回到之前的发布者脚本窗口，再次运行：
$ php fanout-publisher.php 1 2 /path/to/pic.jpg
如果一切正常的话，你应该看到每个消费者窗口都会显示以下信息：
Adding points to user:2
和
Resizing picture: 1 /path/to/pic.jpg
从为用户添加积分这个消费者示例可以看出，如果将RabbitMQ集成到解决方
案中去的话，扩展代码以应对新的需求是十分简单的。为了添加一个图片大小调整
（imageresize）消费者，你只需一个基于imageID和path的函数；可以从文件系统
读取图片，对其调整大小（可能使用像Imagemagick这样的工具），然后基于image
ID对数据库记录进行更新。对通知用户朋友来说也是一样的。将userID作为参数
你就可以从数据库中获取用户的联系人，然后通过诸如电子邮件等形式发送通知给
那些朋友。
从这个例子中你可以学到的是，RabbitMQ消息通信的强大之处在于如何将交
换器和队列进行组合。如果你需要某种方式过滤掉消息，那么可以使用之前章节提
到的topic交换器。在应用程序中，是否存在一个动作触发其他动作，然后并行运
行？如果有的话，使用topic交换器。如果你想“秘密监视”一段消息流，然后不
留痕迹地离开，那么可以使用匿名队列并设置autodeleted为true。一旦习惯思考消
息通信模式，你将发现原来一些编程任务可以变得如此简单！
但是该设计方案的好处可不止于此。现在假设图片大小调整变得太慢了；你需
要更多的计算能力，同时你又不想更改代码。小菜一碟。你可以启动更多的消费者
进程，同时RabbitMQ会负责对消息进行相应的分发。即便消费者在不同的机器上，
---
## Page 114
92
第4章解决Rabbit相关问题：编码与模式
这都没有问题。现在想象一下，当服务用户请求时，如果所有事情都按顺序发生的话，
你该如何扩展原始代码呢？如你所见，RabbitMQ并行处理是简单的。
4.3别忘了：用RabbitMQ实现RPC并等待响应
有多种方式来实现远程过程调用（RPC）一一譬如UNIXRPC、RESTAPI和
SOAP。这些传统的RPC实现方法有共同之处：那就是客户端和服务器端紧密相连。
客户端直接连接上服务器端，发送一个请求，然后就停下来等待服务器的应答。这
种点对点性质的模式有很多好处，它使得在小范围内的拓扑变得简单。但这种简单
的拓扑同时也限制了灵活性，并且当需要纵向扩展的时候，增加了复杂度。举例来
说，当有众多服务器时，客户端如何发现在哪台服务器上可以找到其想要的服务呢？
SOAP和大多数企业RPC已经采取了复杂的补充协议和服务目录。这带来了额外复
杂度和众多故障点。所有这些还都是以服务众多RPC服务器API而不会紧耦合客
户端和服务端的名义发布的。此外，如果客户端连接的RPC服务器崩溃了，怎么办
呢？这该由客户端来决定重连。并且，如果服务器端彻底停止运行的话，客户端必
须重新发现能提供相同服务的新的服务器。当连上服务器端之后，客户端还不得不
重试API调用。
如果取代复杂目录和多种协议而使用一种协议来进行RPC通信的话会如何呢？
如果客户端可以发起API调用，而无须关心由哪台服务器来处理，同时也不必关
心服务器崩溃的情况，那会如何呢？通过使用MQ服务器来实现RPC就可以做到
这些。当使用RabbitMQ来实现RPC时，你只是简单地发布消息而已。RabbitMQ
会负责使用绑定来路由消息到达合适的队列。RPC服务器会从这些队列上消费消
息。RabbitMQ替你完成了所有这些艰难的工作：将消息路由到合适的地方，通过
多台RPC服务器对RPC消息进行负载均衡，甚至当处理消息的服务器崩溃时，将
RPC消息重发到另一台。所有的这些都无须复杂的WS-*协议，也不需要客户端的
路由功能。问题在于，如何将应答返回给客户端呢？毕竟，到目前为止你体验的
RabbitMQ是发后即忘模型。
---
## Page 115
4.3别忘了：用RabbitMQ实现RPC并等待响应
93
4.3.1私有队列和发送确认
由于AMQP消息是单向的，RPC服务器如何才能将结果返回给原始客户端呢？
由于RabbitMQ处于中间环节，RPC服务器甚至都不知道客户端调用者的身份（除
非在消息体内放入应用特定的ID）。谢天谢地，RabbitMQ团队想出了一个优雅的解
决方案：使用消息来发回应答。在每个AMQP消息头里有个字段叫作replY_to。
消息的生产者可以通过该字段来确定队列名称，并监听队列等待应答。然后接收消
息的RPC服务器能够检查reply_to字段，并创建包含应答内容的新的消息，并以
队列名称作为路由键。
你也许想：“光是每次创建唯一队列名就得花很多工夫吧。我们怎样阻正其他
如果你声明了没有名字的队列，RabbitMQ会为你指定一个。这个名字恰好是唯一
的队列名；同时在声明的时候指定exclusive参数，确保只有你可以读取队列上
的消息。所有RPC客户端需要做的是声明临时的、排他的、匿名队列，并将该队列
名称包含到RPC消息的reply_to头中，于是服务器端就知道应答消息该发往哪儿
了。值得注意的是我们并没有提到将应答队列绑定到交换器上。这是因为当RPC服
务器将应答消息发布到RabbitMQ而没有指定交换器时，RabbitMQ就知道目的地是
应答队列，路由键就是队列的名称。
话不多说。让我们看看在实际代码中如何使用RabbitMQ来实现RPC。
4.3.2使用reply_to来实现简单的JSONRPC
首先你需要一台RPC服务器。在深人代码之前，先看一下RPC客户端和服务
器端流程是很有帮助的，参见图4.5。
---
## Page 116
94
第4章解决Rabbit相关问题：编码与模式
Pong!
reply_callback
API客户端
Suic
mq.gen-9ith
1Dx..
amq.gen-9ith1Dx..
RabbitMQ
ping
amq.gen-9ith
ping
1Dx...
rate_limit_notify
API服务器
图4.5RPC客户端和服务器流程
在下列清单中，你将构造一个简单的API服务器（实现了一个ping 调用）。该
方法的唯一功能是接收来自客户端的ping调用，发回一个Pong!应答，并携带了客
户端初始调用时的时间戳。
---
## Page 117
4.3别忘了：用RabbitMQ实现RPC并等待响应
95
清单4.12API服务器rpc_server.py
import pika, json
建立到
conn_params = pika.ConnectionParameters("localhost",
代理服
virtual_host="/",
务器的
连接
credentials = creds_broker)
conn_broker = pika.BlockingConnection(conn_params)
声明交
换器和
channel =conn_broker.channel()
ping调
channel.exchange_declare(exchange="rpc",
<用队列
type="direct",
auto_delete=False)
channel.queue_declare(queue="ping",auto_delete=False)
channel.queue_bind(queue="ping",
exchange="rpc",
routing_key="ping")
等待RPC
调用和应答
def api_ping(channel，method,header,body):
"""'ping' API call."""
channel.basic_ack(delivery_tag=method.delivery_tag)
msg_dict = json.loads (body)
print "Received API call...replying..."
channel.basic_publish(body="Pong!"+str(msg_dict["time"]),
exchange="",
routing_key=header.reply_to)
channel.basic_consume(api_ping,
queue="ping",
consumer_tag="ping")
print "Waiting for RPC calls..."
channel.start_consuming()
我们已经讲过怎样配置和连接RabbitMQ服务器，所以让我们直接跳到最有趣
的那部分：创建交换器和队列，用于接收API调用。
channel.exchange_declare(exchange="rpc",
type="direct",
auto_delete=False)
channel.queue_declare(queue="ping",auto_delete=False)
channel.queue_bind(queue="ping",
exchange="rpc",
routing_key="ping")
此处设置了典型的direct类型交换器并创建了队列和绑定。为了实现API服务
器，你遵循着一种模式：将RPC函数调用的名称作为绑定模式（同时作为队列名
称）。在该示例里，将 ping 队列绑定到rpc 交换器并把 ping 作为绑定模式，ping
API函数调用就创建成功了。客户端需要做的是将ping作为路由键，同时将参数
---
## Page 118
96
第4章解决Rabbit相关问题：编码与模式
放人消息体中。通过使用topic类型交换器，你可以使用更为复杂的RPC请求路由。
下一步需要设置消费者订阅：
def api_ping(channel, method, header, body):
"""'ping' API call.""
channel.basic_ack(delivery_tag=method.delivery_tag)
msg_dict = json.loads (body)
print "Received API call...replying..."
exchange="",
routing_key=header.reply_to)
channel.basic_consume(api_ping,
queue="ping",
consumer_tag="ping")
每次RabbitMQ将消息通过ping队列送达时，api_ping都会被调用。这里讲
的和本书中到目前为止你做过的很相似。唯一的不同之处是在确认调用消息之后，
你会发送一个basic_publish命令。等一下！你怎么能在用于消费的同一条信道
上发布应答消息呢？我们不是说过这样不行吗？！事实上，在该示例中这是可能
的，因为直到api_ping函数返回前，Pika库不会再次开始消费。更值得注意的是
basic_publish 的配置。它使用消息头的reply_to作为应答消息的路由键。同
时，不同于通过RabbitMQ发布的任何其他消息，这里没有交换器。这是关于通过
Rabbit来实现RPC通信的唯一两处特别的地方：使用replyto作为发布应答消息
的目的地，同时发布的时候无须指定交换器。
那么RPC客户端是怎样的呢？它应该如何编写，如何设置应答队列呢？让我们
看看下列清单。
清单4.13API客户端—rpc_client.py
import time,json,pika
conn_params =pika.ConnectionParameters("localhost",
理服务器
的连接
virtual_host ="/",
credentials = creds_broker)
conn_broker = pika.BlockingConnection (conn_params)
channel =conn_broker.channel()
msg = json.dumps({"client_name":"RPC Client 1.0",
<发送RPC
"time":time.time()})
调用并等
result = channel.queue_declare(exclusive=True, auto_delete=True)
待应答
msg_props = pika.BasicProperties()
msg_props.reply_to=result.method.queue
---
## Page 119
4.3别忘了：用RabbitMQ实现RPC并等待响应
97
channel.basic_publish(body=msg,
exchange="rpc",
properties=msg_props,
routing_key="ping")
print "Sent 'ping' RPC call.Waiting for reply..."
def reply_callback(channel,method,header,body):
"""Receives RPC server replies."""
print"RPC Reply---"+ body
channel.stop_consuming()
channel.basic_consume(reply_callback,
queue=result.method.queue,
consumer_tag=result.method.queue)
channel.start_consuming()
客户端实现RPC的核心部分在此：
result = channel.queue_declare (exclusive=True, auto_delete=True)
msg_props = pika.BasicProperties()
msg_props.reply_to=result.queue
在这三行代码里，你创建了应答队列，并将消息的reply_to头设置为新队列
的名称。当声明应答队列时，确保将exclusive和auto_delete都设置为 true。
这样做可以确保没有人能够窃取你的消息（这是因为Rabbit创建的队列名是唯一的），
并且当接收完应答消息后断开和队列的连接时，Rabbit会自动将队列删除。剩下的
就是发布API调用消息，并将回调函数订阅到应答队列上：
channel.basic_publish(body=msg,
exchange="rpc",
properties=msg_props,
routing_key="ping")
print "Sent'ping'RPC call.Waiting for reply..."
def reply_callback(channel,method,header,body):
"""Receives. RPC server replies.""
print"RPC Reply---"+ body
channel.stop_consuming()
channel.basic_consume (reply_callback,
queue=result.method.queue,
consumer_tag=result.method.queue)
没什么神奇之处。一旦设置好应答队列，你就可以像其他队列那样从该队列进
行消费了。只需确保从队列开始消费前，先发布API调用消息。否则的话，信道会
置为消费模式，当你尝试发布消息时会得到一个错误。那么，当你运行RPC应用程
---
## Page 120
98