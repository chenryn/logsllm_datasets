subtle a(cid:139)ack. Finally, we present an implementation of the tool,
and summarize some experimental results.
i∈Q ei or
i.e. expressions of the form
Technically, the main di(cid:129)culty is to reason about equations
and inequations that combine rational fractions and big operators,
i∈Q ei, where Q is a set
of arbitrary size—informally, corresponding to adversary queries.
Because neither symbolic computation nor algorithmic veri(cid:128)cation
tools can deal with big operators (the former do not support big
operators and the la(cid:139)er operate on a bounded state space), we
develop deductive methods for solving systems of equations.
Constraints. We use a rich language of constraints that can ex-
press the existence of solutions of systems of equations and inequa-
tions between rational expressions. In order to accommodate case
analysis, the language also features disjunction at top level. (cid:145)us
constraints are of the form
∃ (cid:174)x1. C1 ∨ . . . ∨ ∃ (cid:174)xk . Ck
where each C is a (cid:128)nite conjunction of (in-)equations. Due to
the presence of big operators, (in-)equations may be universally
quanti(cid:128)ed over arbitrary sets Q. (cid:145)erefore, and without loss of
generality, each C is a (cid:128)nite conjunction of atoms of the following
form:
• equation: E = 0;
• inequation: E (cid:44) 0;
• universal equation: ∀ k ∈ K. E = 0;
• universal inequation: ∀ k ∈ K. E (cid:44) 0.
where E ranges over expressions. (cid:145)e syntax of expressions is
presented in Figure 6. Expressions E must be well-typed, which
we enforce by declaring a type for each variable, and imposing
a simple typing discipline on expressions. For example, matrices
appearing in our equations are typed with a dimension and we
require that these dimensions are consistent for matrix addition and
6An a(cid:139)ack against symbolic security could potentially require an exponential number
of keys, and in that case, it would not correspond to an e(cid:129)cient a(cid:139)ack on the scheme.
Session C4:  From Verification to ABECCS’17, October 30-November 3, 2017, Dallas, TX, USA655
i∈K Ei ×


j∈K\{i} E(cid:48)
j
Ei/E(cid:48)
(cid:32)
i
i∈K E(cid:48)
i∈K
i
E ∗ E(cid:48) = 0 (cid:32) E = 0 ∨ E(cid:48) = 0
E/E(cid:48) = 0 (cid:32) E = 0 ∧ E(cid:48) (cid:44) 0
E = 0 (cid:32) E = 0 ∧ E[v (cid:55)→ E(cid:48)] = 0 for variable
v and a closed (variable-free) expression E(cid:48)
E ∗ v + E(cid:48) = 0 (cid:32) E = 0 ∧ E(cid:48) = 0 where v
is a variable and E, E(cid:48) do not contain v
i∈K


i∈K
∃i ∈ K . Si (cid:32) (∃i ∈ K\{j}. Si) ∨ Sj
Ei = 0 (cid:32) ∃j ∈ K : Ej = 0
Ei (cid:44) 0 (cid:32) ∃j ∈ K : Ej (cid:44) 0
com-den
mul-split
div-split
eval-var
extr-coe(cid:128)
zero-prod
non-zero-sum
idx-split
Table 1: Selected constraint-solving rules
multiplication. Additionally, operators like ◦ (pair-wise product)
and diag (diagonal matrix) are enforced to be applied to vectors
only (matrices with dimension n × 1 or 1 × n).
sists of two parts: proof rules and proof search.
Constraint-solving system. (cid:145)e constraint-solving system con-
Proof rules are of the form D (cid:32) D(cid:48). Rules can either be sim-
pli(cid:128)cation rules or case distinction rules. Simpli(cid:128)cation rules turn
systems into simpler ones. (cid:145)e rules are sound in the sense that they
preserve solutions, i.e., if the new system contains a contradictory
equation like 1 = 0 or 0 (cid:44) 0, it is guaranteed that the original sys-
tem is unsatis(cid:128)able. Case distinctions transform one single system
into several systems of equations. Soundness is guaranteed because
these transformations are such that if the original system has a
solution, at least one of the derived new systems will have a solu-
tion. In turn, the new equations can trigger further simpli(cid:128)cations.
Table 1 contains some key rules: com-den can be used to push the
division operation outermost, by multiplying and dividing by the
common denominator of the summation terms; eval-var exploits
the fact that if a polynomial equation is zero, it has to be zero for
every evaluation of its variables; eval-coe(cid:128) uses similar ideas than
the previous rule, but is applied to expressions that do not include
divisions; zero-prod is semantically sound because Zp is an integral
domain; (cid:128)nally div-split, mul-split and idx-split (the last two are
examples of case-distinction rules) allow to split the system into
more restricted cases.
Proof search is a series of heuristics that repeatedly selects and
applies rules until it is shown that the system has no solution (or
on the contrary is solvable). Since all rules are sound, the proof
search algorithm is trivially sound.
Example. We illustrate our constraints solving methodology with
an example. Consider the system of equations in Figure 5, that
corresponds to the symbolic security of the IBE1 from Section 5.1.
A solution to such a system consists of concrete values for q ∈ N
sets
params
vars

∀i ∈ Q : yi (cid:44) x
Q = [q].
, yi , ai ∈ Zp ∀i ∈ Q.
∗
x
S, B, A ∈ Zp .
∗
S(B + x∗)A
∧
ai
i∈Q
B + yi
= AS
Figure 5: Input (cid:128)le for the symbolic security of IBE 1
and the parameters x∗, yi , ai ∈ Zp for every i ∈ [q] such that all the
equations hold simultaneously treating S, B, A as formal variables
(note that equality must be treated as the equivalence relation ∼rf
de(cid:128)ned in Section 2).
(cid:145)e (cid:128)rst step consists of ge(cid:139)ing rid of divisions. To do so, we
apply rules com-div and div-split in this case. (cid:145)ese rules, combined
with other standard simpli(cid:128)cation rules will transform the system
into:
(cid:0) 
(B + yi) =

∀i ∈ yi − x
i∈Q
i∈Q
∀i ∈ Q : B + yi (cid:44) 0
(cid:1)ai(B + x
variable B and E(cid:48) = −x∗ will add the equation
Now, the application of the rule eval-var to the second equation with
i∈Q(−x∗ +yi) = 0
to the system, which can be further simpli(cid:128)ed by zero-prod. (cid:145)e
system becomes:
∧
∧
∗)
j∈Q\{i}
∗ (cid:44) 0
B + yj
∃k ∈ Q :
(cid:0) 
j∈Q\{i}
∗ (cid:44) 0
(B + yi) =

∀i ∈ Q : yi − x
i∈Q
i∈Q
∀i ∈ Q : B + yi (cid:44) 0
− x
∗ + yk = 0
(cid:1)ai(B + x
∗)
B + yj
∧
∧
∧
which will be reduced to a contradiction a(cid:137)er applying standard
simpli(cid:128)cation rules, because the (cid:128)rst and the fourth equations are
contradictory.
Finding A(cid:136)acks. Our tool can be used to (cid:128)nd a(cid:139)acks for
primitives that look secure. We present an a(cid:139)ack (found by our
tool) for the candidate Unbounded KP-ABE(cid:52) below:
× ([(cid:96)] → Zp).
U := Zp, X := {Γ ⊆ Zp}, Y := Z(cid:96)×(cid:96)(cid:48)
• n = 1, (cid:174)B := B; w1 = 0, (cid:174)S := S; m1 := (cid:96)(cid:48) − 1
• sE(Γ) →(cid:0)Si(B + i), S − Si
• rE(M, ρ) →(cid:0)M(cid:62)
j (A, (cid:174)R)/(B + ρ(j)), M(cid:62)
j (A, (cid:174)R)(cid:1)
i∈S
(cid:1)
p
j∈[(cid:96)]
(cid:145)e a(cid:139)ack works as follows: (cid:128)rst, the challenger samples b, a
R←
Zp and makes [b]1,[a]T public. (cid:145)e adversary queries a secret
key for policy M = (1, 0, . . . , 0), ρ(1) = 3 which is satis(cid:128)ed i(cid:130) the
set of a(cid:139)ributes contains a(cid:139)ribute 3. (cid:145)e adversary will be given
sk = (sk1, sk2) = ([a/(b + 3)]2, [a]2). (cid:145)en, it picks two messages at
Session C4:  From Verification to ABECCS’17, October 30-November 3, 2017, Dallas, TX, USA656D ::= D ∨ D | S
S ::= ∃k ∈ K. S | C
C ::= C ∧ C | ∀ k ∈ K. C
| E = 0 | E (cid:44) 0
E ::= E + E | E ∗ E | E/E
| 
| E ◦ E | diag(E)
E
E | 
k ∈K
k ∈K
| − E | E(cid:62) | M | S
K ::= Γ | K \ {k}
disjunction
symbolic constraint (k ∈ Idx)
conjunction (k ∈ Idx)
expression (k ∈ Idx)
atom (S ∈ Z)
index set (k ∈ Idx, Γ ∈ Set)
We assume given sets Var, Par, Idx, Set of variables, parameters,
indices and index sets respectively. Matrices M are associated to a
name ρ ∈ Var ∪ Par, a dimension m × n (m, n ∈ N) and a domain
Zp or {0, 1} ⊂ Zp. Our syntax ◦ stands for pair-wise product
between vectors. Additionally, for a vector v ∈ Zn
p , diag((cid:174)v)
represents the null matrix in Zn×n
, where the main diagonal is
replaced by vector (cid:174)v.
p
Figure 6: Grammar for symbolic constraints
random and sends them together with the target set for a(cid:139)ributes
Γ = {1, 2}. It will receive
ct = (ct1, ct2, ct3, ct4) = ([s1(b +1)]1,[s −s1]1,[s2(b +2)]1,[s −s2]1)
where s, s1, s2 are fresh random values in Zp. Now, the following
linear combination
− e(ct1, sk1) + 2e(ct2, sk1) − e(ct2, sk2)+
2e(ct3, sk1) − 2e(ct4, sk1) + 2e(ct4, sk2)
equals the symmetric key κ = [as]T derived from encryption. (cid:145)is
allows the adversary to fully recover the plaintext and win the
experiment. (cid:145)is is because
− S1A
2S2A
B + 1
B + 3 + 2A
B + 2
B + 3 − 2A
S − S1
B + 3 − A(S − S1)+
S − S2
B + 3 + 2A(S − S2) =rf AS.
(cid:145)e above a(cid:139)ack can be easily missed when designing the primi-
tive, since it involves a linear combination of six terms on a primitive
that at a (cid:128)rst sight, looks secure. (cid:145)is is an evidence of the sub-
tleties that inversion in the exponent and the GGM may involve
and it justi(cid:128)es the need of rigorous formalization and the design of
automated methods for veri(cid:128)cation.
Implementation and case studies. We have implemented our
method in a tool7 and used the tool on several case studies. Table 2
summarizes the results. Our tool is able to prove automatically the
symbolic security of our encodings IBE 1, IBE 2, IPE 1, IPE 2 and
7 Source code available at h(cid:139)ps://github.com/miguel-ambrona/ggm-symbolic-solver.
Scheme Time (s)
0.016
0.001
0.001
0.027
IBE 1 [64]
IBE 2 [27]
IPE 1 [46]
IPE 2 (New)
KP-ABE [41]
Compact KP-ABE (New)
Unbounded KP-ABE (New)
KP-ABE [41]
((cid:128)xed-size d = (cid:96) = (cid:96)(cid:48) = 2)
((cid:128)xed-size d = (cid:96) = (cid:96)(cid:48) = 3)
CP-ABE (New)
((cid:128)xed-size d = (cid:96) = (cid:96)(cid:48) = 2)
((cid:128)xed-size d = (cid:96) = (cid:96)(cid:48) = 3)
Spatial Encryption [36]
Doubly Spatial Enc. [36]