N and that r = s is quite restrictive in
practice; one cannot generally rely on all records in a
database being of a ﬁxed length, nor on the number of
records being somehow related to their lengths. Using a
suboptimal choice of parameters can address part of this
problem, but it also serves to increase the communication
cost. A second possible workaround immediately comes
√
to mind: pack multiple records into a block (together with
N
some padding) to handle records that are smaller than
√
ﬁeld elements, and require users to submit multiple queries
N ﬁeld elements.
to retrieve records that are larger than
However, if users must submit multiple queries to retrieve
large records, then it becomes necessary for all users to
submit the maximum possible number of queries needed
2There is a large body of research on communication-efﬁcient IT-PIR,
and quite a few protocols in the literature have asymptotically lower
communication cost than Goldberg’s protocol if the user only wishes to
retrieve a single bit (or a small number of bits) from an n-bit database.
The state of the art in this respect appears to be Yekhanin’s 3-server
IT-PIR based on locally decodable codes, which has communication
complexity nO(1/(cid:100)lg p(cid:101)) for any Mersenne prime p [38]. Assuming that
there are inﬁnitely many Mersenne primes, this yields a scheme with
communication complexity nO(1/loglogn) for inﬁnitely many n. Nonethe-
less, it is clear that no protocol — private or otherwise — can use less
N and
we treat (cid:96) as a constant, then Goldberg’s IT-PIR achieves this optimal
asymptotic communication cost, and does so with only a reasonably small
coefﬁcient (i.e., less than (cid:96) + k) hidden behind the “big O”.
than O(s) communication to fetch an s-element block. If s ≥ √
for any record, regardless of the size of the actual record
they seek. Otherwise,
the database servers could infer
some information about the records a user is requesting
by observing how many blocks she queries for. A similar
√
line of reasoning reveals that, as long as there exists at least
N ﬁeld elements long, then the above
one record that is
observation regarding the near-optimality of Goldberg’s IT-
PIR holds; moreover, as we will see in Section III, using
an appropriate choice of parameters extends this near-
optimality to any database containing a record that is more
than
B. Symmetric PIR and oblivious transfer
√
N ﬁeld elements long.
Symmetric PIR (SPIR) is a variant of PIR that extends
privacy protection to the database servers by insisting that
users must not learn any nontrivial information about parts
of the database that they do not explicitly request [24]. A
close relative of SPIR is 1-out-of-n oblivious transfer [8]
(1
nOT, or just OT); SPIR and OT are so similar, in fact, that
many researchers do not distinguish between them. For
the purposes of this paper, SPIR refers to protocols that
use strictly sublinear communication, while OT refers to
protocols that use (at least) linear communication. Kushile-
vitz and Ostrovsky note that it is theoretically possible to
transform any PIR protocol into SPIR using general zero-
knowledge proof techniques and some encryption [30]. We
illustrate the distinction between SPIR and OT by com-
paring two schemes that are constructed using Kushilevitz
and Ostrovsky’s suggestion; that is, we compare Henry et
al.’s multi-server SPIR protocol [28] with Camenisch et
al.’s simulatable adaptive OT protocol [12]. The former
protocol derives from Goldberg’s IT-PIR and the latter
from trivial PIR (i.e. downloading the entire database).
For brevity, we only give a high-level overview of both
protocols and refer the reader to the respective references
for further details.
Henry et al.’s SPIR. The user in Henry et al.’s scheme
forms a query exactly as in Goldberg’s IT-PIR, and then
commits to each of her secret sharing polynomials using
Kate et al.’s polynomial commitments [29], which we
brieﬂy review in Section IV-A. (One consequence of using
polynomial commitments in this way is that the underlying
IT-PIR must be instantiated with a prime ﬁeld F whose
order is large enough to satisfy certain cryptographic
assumptions. This has a small, though not insigniﬁcant,
impact on the efﬁciency of the underlying IT-PIR.) She
then uses (noninteractive, batch) zero-knowledge proofs to
convince each database server that the committed polyno-
mials are consistent with the set of shares in her query, and
that the committed polynomials evaluate (componentwise)
to a standard basis vector e j at x = 0, for some 1 ≤ j ≤ r.
Of course, a clever user could still obtain some information
about other parts of the database either by sending a differ-
ent vector of commitments to each database server, or by
choosing her vector of secret sharing polynomials nonran-
domly so that it also passes through one or more additional
standard basis vectors at different inputs x(cid:54) = 0. (We use
this latter “attack” in our multi-block query construction
in Section III and throughout Section IV.) Henry et al.
thwart both of these attacks in one fell swoop: the database
servers each seed a pseudorandom generator (PRG) with
a common secret value (for example, a digest of the entire
database) and the vector of polynomial commitments from
the user. Each database server then uses the output of this
PRG to rerandomize the user’s query before processing
it. (Intuitively, this rerandomization replaces each of the
non-free coefﬁcients in the secret sharing polynomials that
contain the user’s response with new, uniform random ones
that are unknown to the user.) The polynomial commit-
ments and zero-knowledge proofs that Henry et al. add to
Goldberg’s IT-PIR protocol increase the communication
cost by only a small constant factor (plus a small additive
term), so their protocol preserves the sublinear asymptotic
communication cost of the underlying IT-PIR. The linear
computation of the IT-PIR dominates the computation cost,
albeit with some additional overhead owing mostly to Θ(r)
full-length exponentiations (in an elliptic curve group) for
the user, and Θ(r) short exponentiations (i.e., with ≈ 40-bit
exponents) for each database server [28, Figure 1].
Camenisch et al.’s OT. Camenisch et al. take an entirely dif-
ferent approach with their OT protocol. In an initialization
phase, the (single) database server encrypts each individual
record using a different, specially chosen cryptographic
key, and then publishes the encrypted database for any
user to download in its entirety. To retrieve a plaintext
record from the encrypted database, the user must ﬁrst
download the entire encrypted database (to avoid revealing
which portion she is interested in), and then obtain the
appropriate decryption key for her desired record from the
database server. To accomplish this, Camenisch et al. clev-
erly employ a unique signature scheme3: the key needed
to decrypt the record at index j is just (perhaps some
publicly known function of) the unique signature on the
message “j ” under the database server’s public key. Hence,
to decrypt a record, the user just requests a blind signature
on that record’s index, and attaches a zero-knowledge proof
that attests to the well-formedness of the blinded message.
Privacy for the database server follows from the security
of the encryption and the (one-more-)unforgeability of the
signature scheme, while privacy for the user follows from
the (unconditional) hiding of the blind signature scheme
and the trivial download step. The zero-knowledge proofs
3A unique signature scheme is a cryptographic signature scheme with
the nonstandard property that, for any given (message, public key) pair,
there exists one and only one valid signature on the given message under
the given public key.
and blind signature that the client uses to retrieve her
decryption key increase the communication cost of the
underlying trivial PIR by a factor of two plus a small
constant; thus, the protocol preserves trivial PIR’s linear
asymptotic communication cost.
C. Pricing and access control
The Henry et al. SPIR protocol and the Camenisch et
al. OT protocol have more in common than just being
constructed from simpler PIR protocols using Kushilevitz
and Ostrovsky’s heuristic: the creators of both schemes
have augmented their respective protocols to support some
additional, nonstandard features that make them suitable
for deployment in scenarios outside of the standard SPIR
and OT use cases. In particular, both protocols support
ﬂexible pricing [9, 28] and access control [10, 11, 28]
structures. As such, variants of either protocol would seem
to be particularly well suited to use in privacy-preserving
e-commerce applications such as privacy-friendly sales of
e-books, music, movies, or smart phone and tablet apps.
Henry et al. refer to their extended SPIR, which provides
simultaneous support for pricing and access control, as
priced SPIR (PSPIR); Camenisch et al. call their pricing-
extended OT protocol priced OT (POT), and their access-
control-extended OT protocol OT with access control
(OTAC). Unfortunately, both Henry et al.’s PSPIR proto-
col and Camenisch et al.’s POT/OTAC protocols possess
certain characteristics that make them less than ideal for
e-commerce in practice: Henry et al. require each database
block to be (padded to) a ﬁxed length, which is unrealistic
for some types of multimedia ﬁles like movies or music,
and Camenisch et al. assume a static database that
is
small enough for each user to download in its entirety.
It
is (intentionally) straightforward to extend three of
our four new SPIR protocols in Section IV with either
Henry et al.’s or Camenisch et al.’s zero-knowledge proofs
(or related techniques) to implement pricing and access
control, although full details of how to do this is beyond the
scope of the present paper. Moreover, each of the resulting
schemes is free from the aforementioned shortcomings;
they all use strictly sublinear communication and do not
place unrealistic restrictions on the size of the database
or the lengths of records contained therein. Measurements
by Henry et al. indicate that using their PSPIR protocol
on a 44-gigabyte database is more than two orders of
magnitude faster than trivial download over a 9 Mbps
broadband Internet connection [28], with the performance
gap increasing as the database grows in size. Each of our
SPIR protocols is at least as efﬁcient as their construction
is, and we therefore conclude that our protocols are among
the most practical choices in the literature for real-world-
scale privacy-preserving e-commerce applications.
that one query. It
III. Multi-block queries in Goldberg’s IT-PIR
In Section II-B, we described a potential attack —
previously noted by Henry et al. [28] — on symmetric
variants of Goldberg’s IT-PIR. In particular, Henry et al.
note that the user might try to cheat the database servers
by encoding several standard basis vectors into a single
query vector,
thus enabling her to learn about several
database blocks with just
turns out
that, if the user encodes q > 1 basis vectors in a query
using degree (at most) t +q−1 secret sharing polynomials,
this attack is information-theoretically undetectable by any
coalition of up to t cooperating servers. The proof of
this assertion echoes the security proof for conventional
Shamir secret sharing: if a coalition of database servers
has t vectors of such shares, then for each hypothesized
set of q standard basis vectors, the coalition can construct
one and only one vector of polynomials of degree at
most t + q − 1 that passes componentwise through the t
given and q hypothesized vectors. By construction, each
candidate set of hypothesized basis vectors is equally
likely, and the coalition gains no information about the
actual set of vectors. (The generalization of Shamir secret
sharing that this attack implicitly uses is really a ramp
scheme [5], since an adversary with access to more than t
but fewer than t +q vectors of shares has some incomplete
information about the q secret basis vectors.) The key
idea of this section is to recast Henry et al.’s observation
as a feature of — rather than an attack against — the
underlying IT-PIR protocol. In particular, we show how to
construct multi-block queries to fetch several blocks for the
(communication and computation) cost of one, thus greatly
reducing the multiplicative factor that separates the cost of
Goldberg’s protocol from the theoretically optimal cost.
Suppose that D is an N-ﬁeld-element database that uses
the communication-optimal block size in Goldberg’s (cid:96)-
(cid:0)(cid:96) +k(cid:1)√
server IT-PIR with privacy threshold t. Recall that the
communication cost to fetch a single block from D is then
N ﬁeld elements when k servers respond. The cost
q·(cid:0)(cid:96) + k(cid:1)√
to fetch a large record that occupies q blocks by using
q consecutive queries (as suggested in Section II-A) is
N ﬁeld elements. Guruswami-Sudan list decod-
to v = k−(cid:98)√
ing can provide robustness for each such query against up
kt (cid:99)−1 Byzantine database servers, while us-
ing Devet et al.’s suggested multi-polynomial list decoding
increases this to v = k−t−2. We thus observe potential for
a tradeoff between Devet et al.’s newfound robustness and
the cost of querying for q blocks at once: for ﬁxed (cid:96),t,k,
requesting q blocks together in a single query (for any
1≤ q≤ k−t−1) using Henry et al.’s “attack” decreases the
robustness bound v from k−t − 2 to k−t − q− 1 servers,
but does not
increase the communication cost beyond
N ﬁeld elements (provided the actual number of
Byzantine responses v(cid:48) is sufﬁciently small compared to
(cid:0)(cid:96) + k(cid:1)√
N size of database in ﬁeld elements
(cid:96)
t
k
v
v(cid:48)
q
total number of PIR servers
privacy threshold (max. coalition size)
number of PIR servers that respond
Byzantine-robustness bound
actual number of Byzantine responses
number of blocks the user is requesting
Table 1: Listing of relevant parameters from the above problem
setup. The parameters are subject to the following constraints: N
is a perfect square; k ≤ (cid:96) and t < k; and v = k− t− q− 1 ≥ 0 (which
implies that q ≤ k− t− 1).
v = k − t − q− 1; see below). As a point of reference for
the remainder of this section, Table 1 lists each of the
relevant parameters in the above setup.
Let us brieﬂy examine what happens when the user
bound of up to v = k−(cid:98)√
sets q so as to preserve the Guruswami-Sudan robustness
kt (cid:99)− 1 Byzantine servers from
Goldberg’s original IT-PIR paper [25].4 To achieve this
bound, she simply ﬁxes the number of blocks per query as
q =(cid:0)k−t − 2(cid:1)−(cid:0)k−(cid:98)
√
= (cid:98)
kt (cid:99)−t
kt (cid:99)− 1(cid:1) + 1
√
(cid:0)k − (cid:98)√