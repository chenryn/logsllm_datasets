Sebastian Gotz, Thomas Ilsche, Jorge Cardoso, Josef Spillner, Thomas Kissinger, Uwe Assmann, Wolfgang Lehner,
Wolfgang Nagel and Alexander Schill, Energy-Efficient Databases using Sweet Spot Frequencies, Green Cloud
Computing Workshop (GCC), London, UK, 2014.
Software Energy-Efficiency with Sweet Spot
Frequencies
Sebastian Götz∗, Thomas Ilsche∗, Jorge Cardoso∗†, Josef Spillner∗
∗ Technische Universität Dresden
Faculty of Computer Science
01062 Dresden, Germany
Email: {sebastian.goetz1, thomas.ilsche, josef.spillner}@tu-dresden.de
† University of Coimbra
Department of Informatics Engineering
3030-320 Coimbra, Portugal
Email: PI:EMAIL
Abstract—A common misconception is to equate software performance normalized to the maximum possible perfor-
energy-efficiency to CPU performance. The rationale of this fal- mance of the system.
lacyisthatincreasingCPUclockfrequencyinvolvesareduction
This suggests that when Util increases, P should be in-
of CPU usage in time and, hence, energy consumption. In this
creasedtomaintainahighefficiencyor,forarunningsystem,
paper, we give empirical evidence for scenarios where a server
is more energy-efficient when its CPU(s) operate(s) at a lower P canbedecreasedtoforceUtiltoincrease.Thiswouldyield
frequency than the maximum allowed frequency. Our approach a better η P. In this paper, we explore how the interplay of P
uses a novel high-precision, fine-grained energy measurement andUtilaffectsenergy-efficiency,andshedlightonthefallacy
infrastructure to investigate the energy (joules) consumed by
that increasing the P (CPU clock frequency) always involves
three different sorting algorithms. Our experiments show the
a reduction of energy consumption. We will show that some
existence of algorithm sweet spots: CPU clock frequencies at
which algorithms achieve the lowest energy consumption to computational tasks are more energy-efficient when executed
completethesamecomputationaltask.Toleveragethesefindings, at lower CPU clock frequencies.
wedescribehowanewkindofself-adaptivesoftwareapplications To better understand this claim, it is adequate to study
can be engineered to increase their energy-efficiency.
energy-efficiency instead of power efficiency, as done in [2].
SinceenergyE isafunctionofpowerP andtime,theenergy-
I. INTRODUCTION
efficiency η can be written as:
E
In 2010, electricity used in global data centers likely ac-
Util↓
counted for between 1.1% and 1.5% of total electricity use.
η (cid:108)= (2)
For the US that number was between 1.7 and 2.2%. Data E P ↓×t↑
center traffic is expected to quadruple by 2016. This calls for Since Eq. 2 accounts for the time a system will be under a
thedevelopmentofnewenergyandpowerefficientapproaches certainutilization,itprovidesamorerealisticmodelcompared
to reduce their consumption [1]. toEq.1.Specifically,theequationsuggeststhehypothesisthat
To address this increasing concern, the concept of energy- by decreasing the CPU clock frequency, and, thus, its P (↓)
proportional computing [2] was introduced by Google to and Util (↓), the time t (↑) to complete a computational task
describeanidealsystemwhichconsumesnoenergywhenidle increases. The goal of this paper is to study for which config-
andwhosepowerconsumptiongrowslinearlywithutilization. urations of P, Util, and t, computational tasks are executed
Such a computing system would enable a greater efficiency in a more energy-efficient way, thus in which direction they
at any level of utilization compared to today’s systems. To affect η ((cid:108)).
E
calculate power efficiency, utilization is divided by its corre- Fig. 1 shows the reason why the model presented in [2]
sponding power value. Thus, the formula to evaluate power needs to be relaxed. It is already known from previous
efficiency is given in [2] by: academic and industrial research that in practice, processors
do not follow a proportional path. Single processors have
Util
η = (1) power states and associated frequencies for which the power
P P
efficiency, i.e., the ratio between utilization and power con-
η is the power efficiency, Util the utilization, and P the sumption is maximized in so-called sweet spots [3] and often
P
power consumed by a computing system (server). Such an minimized in high-performance turbo mode [4], [5]. In the
ideal system would always yield the same optimal power figure, the sweet spot is represented by the minimum of the
efficiency since P grows proportionally with Util. As an function divided by x, denoted as maximum efficiency. There
example, a utilization of 25% would require only 25% of is always an offset, even when unused through idle power.
computingpower.Utilizationcanbeconsideredtheapplication Furthermore, in multi-processor systems, additional overlap
Turbo mode current Software Programming Hardware
P (W) behavior language
η = Util / P energy- Code Instruction set
P proportional optimization (integer, fpoint, mm)
behaviour
Maximum
Idle power (se wff eic ei te sn pc oy t) Algorithm our work H pea rr id pw hea rr ye
Util (%)
Service context Data characteristics
Fig.1. Energy-proportionalandcurrent,non-linearpowerconsumption.
(SLAs, preferences) (ranges)
Data centre
context (fuses,
Service energy contracts) Data
effects result from using the turbo mode as a gap-filler before
switching on the next core when the utilization increases [6].
Fig.2. Dimensionsanddirectionsofenergy-efficientsoftwareresearch.
This effect, in particular the sweet spot, translate into time-
dependent energy-efficiency due to Dynamic Voltage Fre-
quencyScaling(DVFS;acommonlyusedpower-management searches have approximately the same ecological footprint as
technique). driving a car for one kilometer. Furthermore, as stated in
The importance and implications of this effect has trig- the introduction, existing data centers consume approximately
gered preliminary research on the design of energy-efficient between 1.1% and 1.5% of all energy used in the world.
software. Proposals suggested to control the power states The magnitude of these numbers have driven researchers
from the application to select the most efficient frequency. and industries to look into new ways to make information
In [7], the authors control the CPU frequency of a laptop and communication technologies more energy-efficient. The
while running specific applications (e.g., video encoders, web solutions found include high-efficiency power supplies, water
browsers,andwordprocessors)toreduceenergyconsumption. cooled servers, efficient multi-core CPUs, virtualization, dy-
In [8], similar experiments are done with message passing namicpowermanagement,andlivevirtualmachinemigration.
interface programs running in high-performance computing For example, the consolidation of virtual machines through
systems. In both studies, the notion of sweet spots was not live migration enables to aggregate work onto fewer server
known since the experiments where done at a macro level, nodes and shutdown idle nodes to reduce power consump-
measuring only consumption at the “plug”. While Livingston tion [9].
et al. [3] mention sweet spots in their work, they did not fully While these solutions are important and complementary
explore their sources, characteristics, and implications. (focusing on hardware and computing environments), another
Therefore, a conclusive analysis on the design of self- form of energy reduction is to use more energy-efficient soft-
adaptive software applications which select the algorithms ware. The concept of energy-efficient software is to “use less
to execute depending on the existence and characteristics of energy to achieve the same computational task”. Compared
sweetspotsismissing.Thissetsourworkapartfromprevious to, e.g., live virtual machine migration, which is an energy
approaches by providing an important contribution to foster conservationtechnique(migratingandturningoffidleservers),
research on the development of energy-efficient software as a theenergy-efficiencyofsoftwarelooksintowhichsoftwareto
complement to current hardware level energy optimizations. use to execute a specific computational task.
Thispaperisstructuredasfollows.Sect.IIbrieflydescribes Ourlong-termresearchgoalistostudyhowenergy-efficient
our motivation, and the importance and timeliness of this mechanisms can be implementation as part of self-adaptive
work. Sect. III enumerates three central research questions software and service systems that change their behavior and
that are addressed throughout this paper. Sect. IV describes implementation, and affect the computing environment to
our approach and the methodology we have followed to reduce energy consumption. Fig. 2 shows relevant dimensions
experimentally analyze the energy-efficiency of computing of research in this field. The short-term goal for this paper is
systems. We discuss the results of our experiments in Sect. V to answer three research questions while looking at a com-
andshowinSect.VI,howthesefindingscanbeused,tobuild putational task implemented in three different ways. Later we
self-adaptivesoftware,abletoleveragethisknowledgetosave extend the considerations to complex data centre setups with
energy. Finally, Sect. VII and VIII present related work and trade-offsbetweenenergy,performance,anddependability(as,
our conclusions, respectively. e.g., in [10]).
II. MOTIVATION III. RESEARCHQUESTIONS
Googleestimates1 thatitrequires1kJofenergypersearch. The energy-efficiency of software looks into how software,
Thiscorrespondsto0.2gramsofCO .Onethousandkeyword the underlying computing system and the environment affect
2
energy consumption. Our research questions (RQ) are the
1http://googleblog.blogspot.de/2009/01/powering-google-search.html following:
• RQ1(MeasurementSetup).Howtoinstrumentacomput- suchasDVFS,thefastestalgorithmandsystemsettingisoften
ing system (server) with measurement devices to obtain no longer the most energy-efficient one.
fine-grained measurements for its individual parts (e.g., Our approach to gain insights is pragmatic and experimen-
fan, disk, power supply, and CPU sockets)? (Sect. IV-A). tal. We use energy as a main optimization goal and vary
• RQ2 (Sweet spots). How can sweet spot frequencies the algorithm and hardware configuration for comparison. To
beidentified?Whichmathematicalfunctionscharacterize limitthesearchspace,wedonotinvestigatespecifichardware
them? Do sweet spot frequencies still exist on newer micro-optimizations, but use generic compiler optimization
computer architectures? (Sect. V). flags instead. The methodology has the following activities:
• RQ3 (Dynamic Software Adaptation). How to capitalize • Measurement environment (Sect. IV-A).
on the existence of sweet spots to dynamically adapt
– Instrument server with energy sensors.
softwaretoachieveahigherenergy-efficiency?(Sect.VI).
– Determine static power consumption of the server.
In this paper, we focus on studying how different imple- – Setup software infrastructure to conduct the experi-
mentations of the same software application affect differently ments.
the energy-efficiency of a computing system. We take the • Software under test (Sect. IV-B).
computational task of sorting n numbers and explore how
– Selectthecomputationaltasktobetestedexperimen-
different implementations of sorting algorithms consume dif-
tally.
ferent amounts of energy.
– Select different software implementations for the
Whilemuchresearchhaslookedintohowtomakeinforma-
task.
tionandcommunicationtechnologiesmoreenergy-efficient,it
• Experimental results analysis (Sect. V).
is rather hard to find a precise definition for software energy-
– Determine resources affected by task.
efficiency. Thus, to remove any possible ambiguity on the
– Interpret measurement results.
results of our research, we define the concept as follows:
• Generalization and application of the results (Sect. VI).
Definition 1 (Software energy-efficiency). Energy is defined
astheamountofjoules,requiredbyafullorpartialcomputing A. Measurement Setup: Energy Monitoring
environment, to execute a software application. A software 1) Hardware: Thesystemundertestisadualsocketsystem
application S 1 is said to be more energy-efficient than an with Intel Xeon E5-2690 processors. Several layers of power
application S 2, if it requires less energy to accomplish the measurement instrumentation are required. The complete AC
same computational task. input is measured with a calibrated ZES Zimmer LMG450
power analyzer. Several custom-built, shunt-based sensors are
Definition 2 (Computing environment). A full computing
added to the system. All sensors are pluggable via Molex
environment includes all the devices that, directly or indi-
connectorsusedinmanystandardizedsystems.Forthispaper,
rectly, consume energy to enable a software application to be
we monitor the 12V input of the two individual sockets
executed. For example, it typically includes CPUs, fans, and
separately.TheysupplypowerfortheCPUsandtheirattached
disks. A partial computing environment only includes a subset
memory. The voltage drop over the measurement shunt is
of those devices.
amplified with calibrated amplifiers and digitally captured
Tosimplifyourstudy,wedonotdirectlysetacertainutility, by a National Instruments PCI-6255 data acquisition board