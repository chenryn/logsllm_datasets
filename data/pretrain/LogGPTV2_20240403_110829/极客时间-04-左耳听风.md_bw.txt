# 弹力设计篇之“隔离设计”

## 概述
“隔离设计”对应的英文术语是Bulkheads，该词原用于描述船舶内部的防水隔板。这些隔板将船舱分割成多个独立空间，以防止漏水时整个船体沉没。在软件设计中，我们同样需要类似的机制来隔离故障，确保一个部分的故障不会影响到整个系统。

![](https://static001.geekbang.org/resource/image/0d/c4/0d73168bd1af3e1266c24c2064d391c4.png)
![](https://static001.geekbang.org/resource/image/53/97/53ae45b51f9e2678ec7e8661ef233297.png)

著名的泰坦尼克号虽然采用了Bulkheads设计，但由于设计缺陷，在撞上冰山后，水漫过了隔板导致了船只下沉。
![](https://static001.geekbang.org/resource/image/5b/bf/5bfda0399c45e1ae6a53860698740dbf.png)

在分布式软件架构中，我们需要采用类似的技术来隔离故障。这通常通过系统的分离实现，主要分为两种方式：按服务种类分离和按用户请求分离。

## 按服务种类分离

![](https://static001.geekbang.org/resource/image/34/eb/34e3b94399f89a825a0046234607f9eb.png)

如图所示，我们将系统分为用户、商品和社区三个模块，每个模块使用不同的域名、服务器和数据库，从而实现从接入层到应用层再到数据层的完全隔离。这种架构可以有效防止一个模块的故障影响其他模块。

亚马逊的每个服务都有自己的数据库，并且从一开始就准备好了对外暴露。这种方式符合微服务架构的推荐做法。然而，这种架构也存在一些问题：

- **性能降低**：如果需要同时获取多个模块的数据，就需要调用多个服务，这会增加响应时间。为此，应谨慎设计用户交互，避免在一个页面上展示过多信息。
- **数据合并复杂度**：如果有大数据平台，需要将各模块的数据抽取到数据仓库中进行计算，增加了数据合并的复杂度。可以通过框架或中间件来简化这一过程。
- **跨模块业务流程**：如果业务逻辑需要跨模块执行，一个模块的故障会导致整个流程中断。为解决这个问题，可以采用Step-by-step的方式保存每一步操作，以便故障恢复后继续执行。
- **跨模块交互**：需要一个高可用的消息订阅通知中间件（如Pub/Sub）来实现各个模块间的数据交换。
- **分布式事务**：可以采用“二阶段提交”方案，例如亚马逊的Plan-Reserve-Commit/Cancel模式，类似于阿里的TCC (Try-Confirm/Cancel)。

## 按用户请求分离

![](https://static001.geekbang.org/resource/image/a7/5e/a7293c5fe813a7e8e2498aac34c4825e.png)

在这种模式下，我们将用户分成不同的组，并为每个组分配独立的服务实例。这样，当某个服务实例发生故障时，只会影响一部分用户，而不会影响所有用户。这种模式称为“多租户”模式。

对于多租户架构，有三种常见的实现方式：

1. **完全独立的设计**：每个租户有自己的服务和数据。开发和资源隔离效果好，但成本较高。
2. **独立的数据分区，共享的服务**：服务是共享的，但数据是分开的。资源利用较好，但开发难度较大。
3. **共享的服务，共享的数据分区**：数据和服务都是共享的。资源利用率高，但数据隔离较差。

![](https://static001.geekbang.org/resource/image/0c/9c/0c7cb0d25fb2c65a8db011ba61b8729c.png)

## 隔离设计的重点

要做好隔离设计，需要考虑以下几点：

1. **定义隔离粒度**：隔离业务的大小和粒度要适中，过大或过小都不合适。
2. **权衡复杂度和成本**：无论是按模块还是按用户隔离，都需要平衡系统的复杂度、成本、性能和资源使用。
3. **配套设计模式**：配置高可用、重试、异步处理、消息中间件、流控和熔断等设计模式。
4. **运维自动化**：分布式系统的运维复杂度较高，需要自动化运维工具，尤其是虚拟化技术（如Docker）来管理资源。
5. **监控系统**：需要一个完整的监控系统来实时查看所有服务的状态。

## 小结

本文从船舶水密舱的设计引出了分布式系统中的隔离设计概念，并介绍了两种常见的隔离方式：按服务种类分离和按用户请求分离。希望对你有所帮助，并欢迎分享你的实践经验。

### 《分布式系统设计模式》系列文章目录

- **弹力设计篇**
  - [认识故障和弹力设计](https://time.geekbang.org/column/article/3912)
  - [隔离设计 Bulkheads](https://time.geekbang.org/column/article/3917)
  - [异步通讯设计 Asynchronous](https://time.geekbang.org/column/article/3926)
  - [幂等性设计 Idempotency](https://time.geekbang.org/column/article/4050)
  - [服务的状态 State](https://time.geekbang.org/column/article/4086)
  - [补偿事务 Compensating Transaction](https://time.geekbang.org/column/article/4087)
  - [重试设计 Retry](https://time.geekbang.org/column/article/4121)
  - [熔断设计 Circuit Breaker](https://time.geekbang.org/column/article/4241)
  - [限流设计 Throttle](https://time.geekbang.org/column/article/4245)
  - [降级设计 Degradation](https://time.geekbang.org/column/article/4252)
  - [弹力设计总结](https://time.geekbang.org/column/article/4253)

- **管理设计篇**
  - [分布式锁 Distributed Lock](https://time.geekbang.org/column/article/5175)
  - [配置中心 Configuration Management](https://time.geekbang.org/column/article/5819)
  - [边车模式 Sidecar](https://time.geekbang.org/column/article/5909)
  - [服务网格 Service Mesh](https://time.geekbang.org/column/article/5920)
  - [网关模式 Gateway](https://time.geekbang.org/column/article/6086)
  - [部署升级策略](https://time.geekbang.org/column/article/6283)

- **性能设计篇**
  - [缓存 Cache](https://time.geekbang.org/column/article/6282)
  - [异步处理 Asynchronous](https://time.geekbang.org/column/article/7036)
  - [数据库扩展](https://time.geekbang.org/column/article/7045)
  - [秒杀 Flash Sales](https://time.geekbang.org/column/article/7047)
  - [边缘计算 Edge Computing](https://time.geekbang.org/column/article/7086)

![](https://static001.geekbang.org/resource/image/fc/e9/fcc761001867c60f526665e237f831e9.jpg)