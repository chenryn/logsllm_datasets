title:PeGaSus: Data-Adaptive Differentially Private Stream Processing
author:Yan Chen and
Ashwin Machanavajjhala and
Michael Hay and
Gerome Miklau
PeGaSus: Data-Adaptive Differentially Private Stream
Processing
Yan Chen
Duke University
Department of Computer Science
PI:EMAIL
Michael Hay
Colgate University
Department of Computer Science
PI:EMAIL
Ashwin Machanavajjhala
Duke University
Department of Computer Science
PI:EMAIL
Gerome Miklau
University of Massachusetts Amherst
College of Computing and Information Sciences
PI:EMAIL
ABSTRACT
Individuals are continually observed by an ever-increasing num-
ber of sensors that make up the Internet of Things. The resulting
streams of data, which are analyzed in real time, can reveal sensitive
personal information about individuals. Hence, there is an urgent
need for stream processing solutions that can analyze these data in
real time with provable guarantees of privacy and low error.
We present PeGaSus, a new algorithm for differentially private
stream processing. Unlike prior work that has focused on answer-
ing individual queries over streams, our algorithm is the first that
can simultaneously support a variety of stream processing tasks
– counts, sliding windows, event monitoring – over multiple res-
olutions of the stream. PeGaSus uses a Perturber to release noisy
counts, a data-adaptive Perturber to identify stable uniform regions
in the stream, and a query specific Smoother, which combines the
outputs of the Perturber and Grouper to answer queries with low
error. In a comprehensive study using a WiFi access point dataset,
we empirically show that PeGaSus can answer continuous queries
with lower error than the previous state-of-the-art algorithms, even
those specialized to particular query types.
1 INTRODUCTION
A number of emerging application domains rely on personal data
processed in a streaming manner. Streaming data is the foundation
of the Internet of Things [1] and prevalent in domains like envi-
ronmental sensing, traffic management, health monitoring, and
financial technology. Such data is typically captured and analyzed
continuously and, because of the volume of the data, it is often
processed as it arrives, in real time.
Since this data may report on individuals’ location, health status,
or other sensitive states, directly releasing the data, or even aggre-
gates computed from the data stream, can violate privacy [8, 14].
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
CCS ’17, October 30-November 3, 2017, Dallas, TX, USA
© 2017 Association for Computing Machinery.
ACM ISBN 978-1-4503-4946-8/17/10...$15.00
https://doi.org/10.1145/3133956.3134102
In particular, continually updating statistics over time leaks more
and more information to the attackers, potentially causing harmful
privacy leakage [3].
Differential privacy [10], proposed over a decade ago, has be-
come a primary standard for privacy. Informally, a (randomized)
algorithm is differentially private if its output distribution is approx-
imately the same when executed on two inputs that differ by the
presence of a single individual’s data. This condition prevents an
attacker with access to the algorithm output from learning anything
substantial about any one individual.
In this paper we propose a novel technique for releasing contin-
uous query answers on real time streams under differential privacy.
Our technique combines a Perturber, which generates a stream of
noisy counts, and an independent module called a Grouper, which
computes a partition of the data received so far. The Grouper pri-
vately finds partitions of the data which have small absolute devi-
ations from their average. The final module, called the Smoother,
combines the output of both the Perturber and the Grouper, gen-
erating the final private estimate of a query answer at each time
step. The Perturb-Group-Smooth technique (we name it “PeGaSus”)
is data-adaptive: it offers improved accuracy for streams that have
sparse or stable counts because the Grouper detects these regions
and the Smoother uses knowledge of stability within these regions
to infer better estimates.
PeGaSus not only helps release accurate differentially private
streams (individual counts at each time step) but can also simulta-
neously support multiple alternative query workloads including
sliding window queries and event monitoring queries like find-
ing jumping and dropping points or detecting low signal points
in the stream. These different tasks can be solved by reusing the
output of the Perturber and the Grouper, and simply modifying
the Smoother method, without incurring any additional privacy
budget. Surprisingly, for many of these workloads, using our data
dependent strategy outperforms state-of-the-art algorithms that
are designed specifically for the corresponding query workload.
We propose extensions to PeGaSus to answer counting queries
at different hierarchical resolutions on the stream. These extensions
allow us to model typical query workloads that appear in build-
ing or network monitoring, where analysts are interested in both
streams generated by individual sensors (or IP addresses), but also
in aggregate streams generated by groups of sensors (or groups of
IP addresses).
In summary, we make the following contributions:
• We design PeGaSus, a novel algorithm for answering a large
class of continuous queries over real time data streams under
differential privacy.
• PeGaSus uses a combination of a Perturber, a data-adaptive
Grouper and a query specific Smoother to simultaneously sup-
port a range of query workloads over multiple resolutions over
the stream.
curacy for streams that have sparse or stable counts.
• The Grouper and Smoother, in combination, offer improved ac-
• A thorough empirical evaluation, on a real data stream collected
from 4000 WiFi access points from a large educational insti-
tution, shows that by using different query specific Smoother
methods, PeGaSus outperforms the previous state-of-the-art
algorithms specialized to given workloads. For example, our
data dependent algorithm can compute more accurate sliding
window queries than the previous state-of-the-art algorithm
that is designed for a specific sliding window workload.
The paper is organized as follows. Section 2 reviews the stream-
ing data model, queries on streams, and the semantics of privacy
on streams. In Section 3, we describe the framework of Perturb-
Group-Smooth (PeGaSus) algorithm. In Section 4, we show how
the framework can support multiple query workloads by applying
different query specific Smoother methods. In Section 5, we discuss
how to extend PeGaSus to answer counting queries at different hi-
erarchical resolutions on the stream. Comprehensive experiments
on a real data stream are presented in Section 6. Related work is
discussed in Section 7 and our conclusions are in Section 8.
2 PRELIMINARIES
2.1 Stream data model
We define the source stream D as an infinite sequence of tuples.
Each tuple is of the form (u, s, t ) and is an element from the domain
dom = U × S × T where U is set of user identifiers, S is a set
of possible states, and T is an (infinite) set of timestamps. Each
(u, s, t ) records an atomic event, namely that user u was observed
in state s at time t. Note that this single stream could contain events
from multiple sources – these would be encoded as different states
(elements of S).
To simplify presentation, we represent time using logical times-
tamps letting T = {1, 2, 3, . . . }. The rationale is that the analysis
tasks we consider in Section 2.2 emit an aggregate summary of
the stream periodically (e.g. every five minutes) and thus logical
time t = 1 can be understood as capturing all events that happened
within the first reporting period. Furthermore, this implies that a
tuple (u, s, t ) does not describe a specific, instantaneous event but
rather it encodes the aggregate behavior of user u during the time
step t. Therefore, the states S encode the state of a user during the
logical time step t. We illustrate with an example.
Example 2.1. Consider a data stream management system that
collects data from WiFi access points (APs) distributed across build-
ings on a campus. Users correspond to MAC addresses of individual
devices that connect to WiFi access points. The set of time steps
could represent the aggregated activity of a user over time inter-
vals of 5 minutes each. Thus, time steps t and t + 1 would differ
in wall clock time of 5 minutes. Finally, if there are m WiFi access
points on campus, then we could have m + 1 states: a state s⊥ that
represents “user did not make a successful connection to any AP",
and m states sp, one for each AP p, that represents “user made at
least one successful connection to the AP p".
The tuples in D arrive in order by time. Thus if (u′, s′, t′) arrives
after (u, s, t ) it must be that t ≤ t′. We use Dt to represent a stream
prefix: the set of tuples that arrive on or before time t.
2.2 Queries on streams
We consider a number of queries on the private stream D. The
answer to a query on D is itself a stream. We focus on counting
queries as well as other queries that can be derived from them.
2.2.1 Queries on a single target state. A counting query takes a
specific target state s and reports, for each time step t, the number
of users who were observed in state s at time t. More formally, let
C (s) be the infinite stream C (s) = c1 (s), c2 (s), . . . where ct (s) =
|{(u′, s′, t′) ∈ Dt | t′ = t and s′ = s}|. Let Ct (s) denote the prefix
stream of C (s) up to time t. When clear from context, we drop the
s and just use C = c1, c2, . . . .
Note that the answer to the query should be generated in “real
time” – i.e., ct should be produced before any tuple (· ,· , t + 1) is
observed.
Example 2.2. An analyst might want to visualize the counts of
the number of users who had at least one successful connection
in a time step at access point AP1. Hence, the target state is sAP1,
Ct (sAP1 ) represents the number of users with at least one successful
connection to AP1 in time step t, and C (sAP1 ) represents the stream
of counts.
The counting query defined above is referred to as a unit query.
We can also support additional queries, all of which can be derived
from C.
Sliding Windows. A sliding window query with window size w
and target state s reports, for each time step t, the total number
of times a user has been observed in state s in the most recent
w time steps. More formally, let SW (s, w ) be an infinite stream
SW (s, w ) = sw1, sw2, . . . , where swt (s, w ) = |{(u′, s′, t′) ∈ Dt
|
t − w < t′ ≤ t and s′ = s}|. Observe that the sliding window query
answers can also be derived by summing corresponding counts in
query C (s): swt (s, w ) =(cid:80)t
t′=t−w +1 ct′ (s).
Event Monitoring. While each tuple in the stream D captures an
atomic event, the analyst may be interested in monitoring certain
patterns in the event stream. We call this task event monitoring
and consider monitoring event patterns that can be derived from
the counting query stream C.
We define the event monitoring query as follows. Let EM (s, w, f , B)
= b1, b2, . . . be an infinite stream of bits where b1 = 1 if the moni-
tored event has occurred at time t and 0 otherwise. The inputs to
the query EM are the target state s, a desired window size w, an
abitrary function f that computes on a window of w counts, and a
boolean function B that computes on the ouptut of f . The bit bt is
computed as bt = B( f (ct−w +1, . . . , ct )). We give two examples of
event monitoring queries.
• Jumping and dropping point: This query monitors whether
the count has changed by at least δ from the count w time
steps ago. Thus, f computes the absolute difference between
the current count and the count received w time steps before,
f (ct−w +1, . . . , ct ) = |ct − ct−w +1| and B compares that differ-
ence to a threshold δ, B(x ) = 1 if x ≥ δ and is 0 otherwise.
• Low signal: This query monitors whether the total count in
a sliding window is smaller than δ. Thus, f computes the to-
t′=t−w +1 ct′ and B is again a
tal count, f (ct−w +1, . . . , ct ) =(cid:80)t
threshold function, B(x ) = 1 if x < δ and is 0 otherwise.
2.2.2 Queries on multiple target states. Our approach also sup-
ports queries on multiple target states. Let {s1, . . . , sm} ⊆ S denote
the set of states the analyst is interested in. We support three vari-
ants. First, the analyst can simply issue multiple queries where each
query is on a single target state (i.e., any one of the queries defined
previously). We illustrate this with an example.
Example 2.3. An analyst might be interested in the unit query
for the states sp corresponding to all access points p within a
specific building, as well as a low signal event monitoring query
EM (sq , w, . . . ), for all access points q housed in conference rooms
across campus.
Second, we also support queries on aggregations of target states.
We denote a single aggregation as aдд ⊆ {s1, s2, . . . , sm}. Any query
that is defined for a single target state can also be defined over an
aggregation of target states by replacing any equality condition on
the state (s′ = s) with set membership condition (s′ ∈ aдд). For
example, an aggregated counting query is denoted C (aдд) and it
produces a stream of answers C (aдд) = c (aдд)1, c (aдд)2, . . . where
c (aдд)t =(cid:80)
i∈aдд ct (si ).
Finally, the analyst may wish to ask a query about more than
one aggregation of states. Let AGG = {aдд1, aдд2, ...} denote a
collection of aggregations. We consider the special case where this
collection has a hierarchical structure.
Definition 2.4. A set of aggregations AGG = {aдд1, aдд2, ...} is
hierarchical if for any two aggregations aдд1, aдд2 ∈ AGG, they
satisfy one of the following two properties:
(1) aдд1 ⊂ aдд2 or aдд2 ⊂ aдд1.
(2) aдд1 ∩ aдд2 = ∅.
Intuitively, a set of hierarchical aggregations AGG can be repre-
sented as a tree or a forest, where any child aggregation contains
a subset of states that its parent aggregation covers, and any two