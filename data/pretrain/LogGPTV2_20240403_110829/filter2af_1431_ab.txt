          balanceOf[msg.sender] = initialSupply;              // Give the creator all initial tokens 初始化用户金额
          totalSupply = initialSupply;                        // Update total supply 更新总金额
          name = tokenName;                                   // Set the name for display purposes  
          symbol = tokenSymbol;                               // Set the symbol for display purposes 显示小数的符号
          decimals = decimalUnits;                            // Amount of decimals for display purposes 更新小数的值
      }
其中传入了四个参数，分别代表`庄家初始化总金额、token的名字、小数部分的具体值、token的标志类型`
之后是主合约的`_transfer`函数，这个函数从新定义了其父合约的同名函数。在父合约中，其函数定义为：
    function _transfer(address _from, address _to, uint _value) internal {
          require (_to != 0x0);                               // Prevent transfer to 0x0 address. Use burn() instead
          require (balanceOf[_from] > _value);                // Check if the sender has enough
          require (balanceOf[_to] + _value > balanceOf[_to]); // Check for overflows  检查溢出
          balanceOf[_from] -= _value;                         // Subtract from the sender 
          balanceOf[_to] += _value;                            // Add the same to the recipient
          Transfer(_from, _to, _value);
      }
传入转账方已经接收方的地址以及转账的值。之后调用了一些判断，包括：“接收方地址不为0、转账方的余额>转账金额；增加了防止溢出的判断”。
而子合约中，在上述基础上又增加了判断是否转账方已经接受方账户被冻结的函数。
    function _transfer(address _from, address _to, uint _value) internal {
          require (_to != 0x0);                               // Prevent transfer to 0x0 address. Use burn() instead
          require (balanceOf[_from] > _value);                // Check if the sender has enough
          require (balanceOf[_to] + _value > balanceOf[_to]); // Check for overflows
          require(!frozenAccount[_from]);                     // Check if sender is frozen
          require(!frozenAccount[_to]);                       // Check if recipient is frozen
          balanceOf[_from] -= _value;                         // Subtract from the sender
          balanceOf[_to] += _value;                           // Add the same to the recipient
          Transfer(_from, _to, _value);
      }
之后，合约拥有者可以调用下面的函数来增加某个账户代币的数量。PS：这里我觉得是为了合约的健壮性考虑。合约的owner需要有足够的能力去增删改查所有用户的token数量。
之后增加金额后会将总金额-`totalSupply`进行更新。
    /// @notice Create `mintedAmount` tokens and send it to `target`
      /// @param target Address to receive the tokens
      /// @param mintedAmount the amount of tokens it will receive
      function mintToken(address target, uint256 mintedAmount) onlyOwner {
          balanceOf[target] += mintedAmount;
          totalSupply += mintedAmount;
          Transfer(0, this, mintedAmount);
          Transfer(this, target, mintedAmount);
      }
除了上述增加token外，合约还定义了`burn`函数。
    /// @notice Remove `_value` tokens from the system irreversibly
      /// @param _value the amount of money to burn
      function burn(uint256 _value) returns (bool success) {
          require (balanceOf[msg.sender] > _value);            // Check if the sender has enough
          balanceOf[msg.sender] -= _value;                      // Subtract from the sender
          totalSupply -= _value;                                // Updates totalSupply
          Burn(msg.sender, _value);
          return true;
      }
这个函数的含义我还没有搞懂，但是从函数内容来看，它是用于销毁账户账面的部分金额。（就是说账户里有10块钱，我可以调用此函数来永久销毁2块钱）。
为了彰显owner的绝对权力，我们合约中能够查看到冻结账户的函数。
    /// @notice `freeze? Prevent | Allow` `target` from sending & receiving tokens
      /// @param target Address to be frozen
      /// @param freeze either to freeze it or not
      function freezeAccount(address target, bool freeze) onlyOwner {
          frozenAccount[target] = freeze;
          FrozenFunds(target, freeze);
      }
合约的owner可以调用这个函数来冻结或者解冻账户，被冻结了的账户是无法进行转账操作的。
#### 2 合约盲点
在我细致的分析合约过程中，我发现了合约中不易理解的一个点：  
`mapping (address => mapping (address => uint256)) public allowance;`。
合约定义了一个mapping变量，而这个变量存储的也是账户账面的金额数量。虽然这次漏洞中与这个变量没有太大的关系，但是为了给读者提供一个可参考的例子，我还是在这里对这个变量的作用进行分析。
简单来说，我认为这个变量就类似于我们生活中的工资的概念。而这个工资是使用的公司内部自己印刷的钱财，可以在公司内部进行交易转账等等。
首先我们可以看赋权函数：
    function approve(address _spender, uint256 _value)
          returns (bool success) {
          allowance[msg.sender][_spender] = _value;
          return true;
      }
这个函数使调用方给予`_spender`一个代替转账的权利。即
B向C转账，但是由于A给予B某些权利，那么我B就可以使用A给的额度来变相的向C转账。于是可以调用下面的转账函数：
    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {
          require (_value = _value);                // Check if the targeted balance is enough
          require(_value = amount * sellPrice);      // checks if the contract has enough ether to buy
          _transfer(msg.sender, this, amount);              // makes the transfers
          msg.sender.transfer(amount * sellPrice);          // sends ether to the seller. It's important to do this last to avoid recursion attacks
      }
而漏洞就在上面的函数中。因为买卖的单价均可以由owner进行定义。倘若owner进行作恶，将单价设置为特殊的值，那么便可以达到意想不到的效果。例如：
管理员设置`buyPrice = 1 ether, sellPrice =
2^255`。即用户可以花1以太币购买一个token，然后可以以2^255的价格卖出。看起来很划算对吗？但是这样便产生了整数溢出。
倘若我们卖出两个token：amount * sellPrice = 2^256 。而我们这里为uint256类型，所以直接产生溢出，使变量为0
。也就是说，系统便可以不用花费任何一分钱就可以收入2个token，而用户直接白白损失了2个以太币。
除此之外，我们还可以简单地将卖出价格设置为0，这样同样使amount * sellPrice为0 。不过有可能无法使那些投机的用户上钩。
我们也可以对合约进行简单的部署。
之后传入参数：
成功后对买卖变量进行设置：
之后便可以使用第二个测试账户进行token的购买操作。
### 四、参考资料
  * 
  * 
  * 
  * 
**本稿为原创稿件，转载请标明出处。谢谢。**