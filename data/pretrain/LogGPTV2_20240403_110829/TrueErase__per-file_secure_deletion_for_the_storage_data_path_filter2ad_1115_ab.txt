erasure [18] 
Semantically-Smart Disk Systems [35, 36] 
Type-Safe Disks [33] 
Data Node Encrypted File System [26] 
TrueErase 
3.  CHALLENGES AND ASSUMPTIONS 
(cid:57) (cid:57) (cid:57)    (cid:57)    (cid:57) 
(cid:57) (cid:57) (cid:57)   
  (cid:57) 
(cid:57) (cid:57) (cid:57)    (cid:57) (cid:57) (cid:57) 
(cid:57) (cid:57) (cid:57) (cid:57) (cid:57) (cid:57) (cid:57) 
Designing  and  implementing  per-file  secure  deletion  is 
challenging for a number of reasons: 
440
•  No  pre-existing  deletion  operation:  Other  than  removing 
references  to  data  blocks  and  setting  the  file  size  and 
allocation  bits  to  zeros,  file  systems  typically  do  not  issue 
requests  to  erase  file  content.    (Note  that  the  ATA  Trim 
command was not implemented  for security [32] and might 
not delete all data [17].)  
•  Complex  storage-data-path  optimizations:    Secure  deletion 
needs  to  retrofit  legacy  asynchronous  optimizations.    In 
particular,  storage  requests  may  be  reordered,  concatenated, 
split,  consolidated  (applying  one  update  instead  of  many  to 
the same location), cancelled, or buffered while in transit.    
Lack  of  data-path-wide  identification:    Tracking  sensitive 
data  throughout  the  operating  system  is  complicated  by  the 
possible  reuse  of  data  structures,  ID  numbers,  and  memory 
addresses.   
• 
•  Verification:    Although  verification  is  often  overlooked  by 
various solutions, we need to ensure that (1) secure deletions 
are  correctly  propagated  throughout  the  storage  data  path, 
and (2) assumptions are checked when possible.  
Due to these challenges, we assume a user has administrative 
control  of  an  uncompromised,  single-user,  single-file-system, 
non-RAID,  non-distributed  system.    The  threat  model  is  dead 
forensics  attacks,  which  occur  after  a  user  unmounts  and  shuts 
down the system after completing secure-deletion operations.   
Our  system  assumes  control  of  the  entire  storage  data  path.  
Although  assuming  access  to  proprietary  firmware  may  be 
optimistic,  this  paper  argues  that  there  is  a  need  for  storage 
devices  to  expose  information  and  control  to  support  secure-
deletion features correctly. 
In  addition,  we  assume  that  common  journaling  file  systems 
that  adhere  to  the  consistency  properties  specified  by  [34]  are 
used,  since  we  cannot  verify  secure  deletion  in  file  systems  that 
cannot  even  guarantee  their  own  consistency  (e.g.,  ext2,  FAT).  
Further,  all  update  events  and  block  types  are  reported  to  our 
framework  to  verify  that  we  are  tracking  all  important  events.  
These assumptions allow us to focus on building and verifying the 
properties of secure deletion. 
4.  TRUEERASE DESIGN 
We introduce TrueErase (Figure 1), a holistic framework that 
propagates  file-level  information  to  the  block-level  storage-
management  layer  via  an  auxiliary  communication  path,  so  that 
per-file secure deletion can be honored throughout the data path.   
Our  system  is  designed  with  the  following  observations  and 
• 
formulated guidelines: 
•  Modifying  the  request  ordering  of  the  legacy  data  path  is 
undesirable  because  it  is  difficult  to  verify  the  legacy 
semantics.  Thus, we leave the legacy data flow intact.  
Per-file  secure  deletion  is  a  performance  optimization  over 
applying secure deletion to all file removals.  Thus, we can 
simplify  tricky  decisions  about  whether  a  case  should  be 
handled securely by handling it securely by default. 
Persistent states complicate system design with mechanisms 
to survive reboots and crashes.  Thus, our solution minimizes 
the use of persistent states. 
• 
The  major  areas  of  TrueErase’s  design  include  (1)  a  user 
model  to  specify  which  files  or  directories  are  to  be  securely 
deleted,  (2)  tracking  and  propagating  information  across  storage 
layers via a centralized module named TAP, (3) enforcing secure 
deletion  via  storage-specific  mechanisms  added  to  the  storage-
management  layer,  and  (4)  exploiting  file-system  consistency 
properties to enumerate cases for verification.  
(cid:68)(cid:258)(cid:396)(cid:364)(cid:3)(cid:296)(cid:349)(cid:367)(cid:286)(cid:876)(cid:282)(cid:349)(cid:396)
(cid:400)(cid:286)(cid:374)(cid:400)(cid:349)(cid:410)(cid:349)(cid:448)(cid:286)
(cid:100)(cid:4)(cid:87)
(cid:17)(cid:367)(cid:381)(cid:272)(cid:364)(cid:3)(cid:951)
(cid:17)(cid:367)(cid:381)(cid:272)(cid:364)(cid:3)(cid:951)
(cid:90)(cid:286)(cid:393)(cid:381)(cid:396)(cid:410)
(cid:18)(cid:346)(cid:286)(cid:272)(cid:364)
(cid:4)(cid:393)(cid:393)(cid:367)(cid:349)(cid:272)(cid:258)(cid:410)(cid:349)(cid:381)(cid:374)(cid:400)
(cid:38)(cid:349)(cid:367)(cid:286)(cid:3)(cid:94)(cid:455)(cid:400)(cid:410)(cid:286)(cid:373)
(cid:104)(cid:400)(cid:286)(cid:396)
(cid:60)(cid:286)(cid:396)(cid:374)(cid:286)(cid:367)
(cid:17)(cid:367)(cid:381)(cid:272)(cid:364)(cid:882)(cid:367)(cid:258)(cid:455)(cid:286)(cid:396)(cid:3)(cid:47)(cid:374)(cid:410)(cid:286)(cid:396)(cid:296)(cid:258)(cid:272)(cid:286)
(cid:94)(cid:410)(cid:381)(cid:396)(cid:258)(cid:336)(cid:286)(cid:3)(cid:68)(cid:336)(cid:373)(cid:410)(cid:3)(cid:62)(cid:258)(cid:455)(cid:286)(cid:396)
(cid:94)(cid:286)(cid:272)(cid:437)(cid:396)(cid:286)(cid:3)(cid:282)(cid:286)(cid:367)(cid:286)(cid:410)(cid:286)(cid:3)
(cid:94)(cid:286)(cid:272)(cid:437)(cid:396)(cid:286)(cid:3)(cid:282)(cid:286)(cid:367)(cid:286)(cid:410)(cid:286)(cid:3)
(cid:272)(cid:381)(cid:373)(cid:373)(cid:258)(cid:374)(cid:282)(cid:400)
(cid:272)(cid:381)(cid:373)(cid:373)(cid:258)(cid:374)(cid:282)(cid:400)
(cid:94)(cid:410)(cid:381)(cid:396)(cid:258)(cid:336)(cid:286)
Figure 1.  TrueErase framework.  The shaded box and dotted 
lines  represent  our  augmented  data  path.    Other  boxes  and 
lines represent the legacy storage data path.   
4.1  User Model  
A naïve user may mark the entire storage device sensitive for 
secure  deletion.    A  more  sophisticated  user  can  mark  all  user-
modifiable folders sensitive.  An expert user can follow traditional 
permission semantics and apply common attribute-setting tools to 
mark  a  file  or  directory  as  sensitive,  which  means  the  sensitive 
file,  or  all  files  under  the  sensitive  directory,  will  be  securely 
deleted  when  removed.    A  legacy  application  can  then  issue 
normal  deletion  operations,  which  are  carried  out  securely,  to 
remove  sensitive  file  and  directory  data  content,  metadata,  and 
associated copies within the storage data path.  However, there are 
deviations from the traditional permission models. 
Toggling  the  sensitive  status:    Before  the  status  of  a  file  or 
directory is toggled from non-sensitive to sensitive, older versions 
of  the  data  and  metadata  may  have  already  been  left  behind.  
Without tracking all file versions or removing all old versions for 
all  files,  TrueErase  can  enforce  secure  deletion  only  for  files  or 
directories  that  have  remained  sensitive  since  their  creation.  
Should  a  non-sensitive  file  be  marked  sensitive,  secure  deletion 
will be carried out only for the versions of the metadata and file 
content created after that point.(cid:3)(cid:3)
Name handling:  A directory is traditionally represented as a 
special  file,  with  its  data  content  storing  the  file  names  the 
directory holds.  Although file permissions are applied to its data 
content,  permission  to  handle  the  file  name  is  controlled  by  its 
parent directory. 
Under  TrueErase,  marking  a  file  sensitive  will  also  cause  its 
name stored in the parent directory to be securely handled, even if 
the  parent  is  not  marked  sensitive.    Otherwise,  marking  a  file 
sensitive  would  require  its  parent  to  be  marked  sensitive  for 
containing  the  sensitive  file  name,  its  grandparent  to  be  marked 
sensitive  for  containing  the  sensitive  parent  name,  etc.,  until 
reaching the root directory. 
Links:  Similar to legacy semantics, a secure deletion of a hard 
link  is  performed  when  the  link  count  decreases  to  zero.  
Symbolic link names and associated metadata are not supported, 
but file data written to a symbolic link will be treated sensitively if 
the link's target file is sensitive.   
4.2  Information Tracking and Propagation 
Tracking and propagating information from the file system to 
the  lower  layers  is  done  through  a  centralized  type/attribute 
propagation (TAP) module.   
4.2.1  Data Structures and Globally Unique IDs 
TAP  expands  the  interface  between  the  file  system  and  the 
block  layer  in  a  backward-compatible  way.    This  passive 
441
forwarding module receives pending sensitive update and deletion 
events  from  file  systems,  and  uses  internal  write  entries  and 
deletion reminders, respectively, to track these events.   
Since  various  data  structures  (e.g.,  block  I/O  structures), 
namespaces (e.g., i-node numbers), and memory addresses can be 
reused,  correct  pairing  of  write  entries  and  deletion  reminders 
requires a unique ID scheme.  In particular, the IDs need to be (1) 
accessible  throughout  the  data  path  and  (2)  altered  when  its 
content association changes.  TrueErase embeds a monotonically 
increasing globally unique page ID in each memory page structure 
accessible  throughout  the  data  path.    The  ID  is  altered  at 
allocation time, so that the same page reallocated to hold versions 
of the same logical block has different IDs.   
To  handle  various  tracking  units,  such  as  logical  blocks, 
requests,  physical  sectors,  and  device-specific  units,  TAP  tracks 
by the physical sector, because that is unique to the storage device 
and  can  be  computed  from  anywhere  in  the  data  path.    The 
globally  unique  page  ID  and  the  physical  sector  number  form  a 
globally unique ID (GUID).  
In addition to the GUID, a write entry contains the update type 
(e.g., i-node) and the security status.  A deletion reminder contains 
a deletion list of physical sector numbers to be deleted.   
Table 2:  The TAP Interface. 
TE_report_write(GUID, block type, secure status):  Creates or updates a
TAP write entry associated with the GUID. 
TE_report_delete(metadata GUID, metadata block type, metadata secure
status,  deletion  sector  number):    Creates  or  updates  a  TAP  deletion
reminder that contains the sector number.  The reminder is attached to
the write entry (created as needed) associated with the metadata GUID.  
  Copies
information from a write entry corresponding to the source GUID to a
new entry corresponding to the destination GUID.  The flag determines
whether deletion reminders should be transferred. 
TE_report_copy(source  GUID,  destination  GUID, 
flag): 
TE_cleanup_write(GUID):    Removes  the  write  entry  with  a  specified
GUID.  This call also handles the case in which a file has already been
created, written, and deleted before being flushed to storage.   
TE_check_info(GUID):  Used to query TAP to retrieve information about
a block layer write with a specific GUID.  (cid:3)
4.2.2 TAP Interface and Event Reporting 
Through  the  TAP  interface  (Table  2),  the  file  system  must 
report  all  important  events:  file  deletions  and  truncations,  file 
updates, and certain journaling activities.   
File deletions and truncations:  Data deletion depends on the 
update  of  certain  metadata,  such  as  free-block  bitmaps.    TAP 
allows  file  systems  to  associate  deletion  events  with  metadata 
update events via TE_report_delete().  Within TAP, write entries 
are  associated  with  respective  deletion  reminders  and  their 
deletion lists. 
Eventually, the file system flushes the metadata update.  Once 
the  block-layer  interface  receives  a  sector  to  write,  the  interface 
uses  the  GUID  to  look  up  information  in  TAP  through 
TE_check_info().    If  the  write  entry  is  linked  to  a  deletion 
reminder,  the  storage-management  layer  must  securely  delete 
those  sectors  on  the  deletion  list  before  writing  the  metadata 
update.   
 Additionally,  the  storage-management  layer  can  choose  a 
secure-deletion method that matches the underlying medium.  For 
NAND  flash,  triggering  the  erase  command  once  may  be 
sufficient  (details  in  §4.3).    For  a  hard  drive,  the  sectors  can  be 
directly overwritten with random data. 
After secure deletion has been performed and the metadata has 