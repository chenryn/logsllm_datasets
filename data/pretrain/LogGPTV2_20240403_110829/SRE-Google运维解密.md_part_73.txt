回答以下问题：
一通过学习这个文档，学员可以了解系统的重要组件，以及背后的原因。当他
一这个文档可帮助学员了解运维系统的边界。
变化的假想和背后的逻辑。
一哪一节是最让人困惑的？
第28章迅速培养SRE加入on-call
于一些可以通过日后学习得来的细节问题。
们掌握了这些系统的知识之后，可以去了解其他更广泛的知识，而不是纠结
”如下所示：
---
## Page 395
on-call可以和学员一起讨论背后的处理逻辑和过程。这种活动可以帮助见习学员记住更
也是学员了解on-call责任的好机会。通过安排这些学生见习团队中的多个成员进行on-
报警系统的警报复制一份给学员。一开始，可以让他们只接收工作时间内的报警。可以
当学员掌握了所有的系统基础知识之后（例如，完成on-call学习列表），我们会考虑将
对新手来说必须要能够在接收到第一条真实报警之前进行演习。
准备好on-call。到达一定时候，进行实战操作一定会比进行假想演习更为有效。但是，
不管进行多少次假想中的演习，学习多少培训材料，也无法完全保证某个SRE能够彻底
这些修改必须经过列在表上的资深SRE的评审才能提交。
间后，当学员开始熟悉学习列表的规范和格式后，会要求他们提供某一章节的修改部分
励学员尽早与这些专家沟通，这样他们就能够直接学习到相关技术的内部原理。一段时
如图28-1所示，我们将资深SRE和开发者的联系方式与对应的组件标记起来。我们鼓
更新程度将各节排序。随着新成员的加入，他们会被指定更新某一个或者某几个章节。
在搜索SRE团队里，我们会在新成员加入之前先组织评审现有的学习检查列表，同时按
积极性，与资深SRE的知识共存，保证所有人的知识都是最新的。
要执行的动作，以及提供必要的提示。
立地检查问题，而不会做任何修改操作。资深SRE同时可以提供积极的帮助，帮忙确认
为主on-call，负责处理所有相关的问题，但是资深的on-call成员会在一旁观察，让其独
某些团队还会增加一个最终步骤：让有经验的on-call成员“反向见习”学员。学员会成
多细节。
和主on-call共享一个终端，或者仅仅是坐在一起讨论。在故障解决后的某个合适时机，
力的情况下进行操作。他们现在可以亲眼观察故障发展，而不是在事后学习。学员可以
当一个报警发生时，新手SRE并不是问题解决的负责人，这样可以让他们在没有任何压
种方式也有助于资深成员合理安排时间，避免团队出现后劲不足。
call，可以促进团队之间的互相了解和信任，为该成员最终加入on-call做准备。同时，这
利用他们的好奇心驱动自己。这些“见习”on-call过程是培训者了解学员进度的好机会，
尽早
尽快见习on-call
为事后总结是一项琐事，专门交给新手来完成的：千万不要造成这种印象。
加为共同作者。不要将整个书写过程全部交给学员，因为这可能会导致他误认
如果某个较大的故障发生，书写事后总结比较必要时，on-call成员应该将学员
有抱负的on-call工程师的5个特点
353
405
---
## Page 396
[0>on-call之后：通过培训l的仪式感，
354
队。祝读者在创建学习型团队的路上一切顺利！
务目标是很明确的：作为SRE，我们必须要能够以比扩张机器更快的速度扩张我们的团
同时可以不断磨炼团队的技能。具体如何将这些实践应用起来，要靠读者自己，但是任
队来说都一样。通过利用本章中描述的一些实践，我们可以更好地培养出合格的SRE，
针对SRE培训的投入是非常有价值的，不管是对渴望尽快掌握知识的学员还是对整个团
小结
后工作中达成一致就越容易。
进团队学习，例如：让SRE给开发者做讲座。开发团队对SRE工作与挑战越了解，日
通过一些努力，我们可以让SRE和开发者沟通得更加密切。也可以通过其他一些方式促
记录下来，作为未来学员的培训资料。
最好由推进这个改动的SRE，甚至与开发者共同展示。如果可能的话，可以将这些讲座
应该为整个团队建立一系列常规的学习时间，利用这个时间讨论新的和即将发生的改动，
重新架构，或者扩展了，导致团队对这个方面的知识过期。
主动、积极地了解不停出现的新改动。整个技术栈的某些部分可能在不知情的情况下被
在学员加入on-call之后学习就停止了吗？当然不是！为了保持新鲜知识，SRE团队需要
一个仪式，团队中的所有人共同庆祝。
供证明其完成了学习检查列表即可。不管怎样，加入on-call都是一个里程碑，应该作为
予学员on-call权限和责任之前会再最后测试一次。其他的新SRE团队仅仅要求学员提
力。这时，他们应该加入到服务的on-call轮值中来。有些团队会有一个最终考试，在赋
随着知识的增多，学员最终可以理解大部分的技术栈，并且具有自主学习其他部分的能
第28章
迅速培养SRE加入on-call
，以及日后的持续教育
---
## Page 397
者配置文件发布，或者是处理临时的但是又紧急的客户需求。虽然这些任务没有指定的
日常运维任务（也被称为接力棒任务，或者琐事，参见第5章）包括团队负责的代码或
容量规划方案评审。工单同样也有SLO，但是它的响应时间一般是数小时，甚至数天数月。
行代码评审。复杂的工单则可能需要处理一个较为复杂，不那么寻常的设计评审，或者
很简单的、重复的，几乎不需要临场发挥。简单的工单可能只是需要对某个配置文件进
工单，是指那些需要进行某种操作以应对客户的需求。和紧急警报类似，工单也可以是
有的时候问题需要详细地在线调查才能解决。紧急警报通常配有预期的响应时间（SLO），
人处理紧急情况。有的时候，这些问题是单调重复的，处理起来不需要很多思考。但是，
紧急警报，是关于生产环境中出现的问题以及相关问题发出的警报，目的在于通知接收
但是基本分为三大类：紧急警报、工单，以及其他的持续性运维活动。
运维负载有许多类型，有一些很明显，
负载时，一定要记住这一点。
任何复杂系统都和创造这个系统的人一样，都不是完美的。在管理这些系统造成的运维
维护工作，以确保这辆车保持运行状态。
例如，如果我拥有一辆车，我需要对它进行维护操作，例如给车加油，或者其他的常规
“运维负载”这个词语，在讨论到复杂系统时，是指维持系统正常运转必须进行的工作。
一般是几分钟。
一些则不那么明显。具体使用的术语各有不同，
处理中断性任务
作者：DaveO'Connor
编辑：DianeBates
第29章
355
<407
---
## Page 398
408
356
候哪些因素是必须要考虑到的。SRE团队发现下列指标对制定策略很有帮助：
如何决策对中断性任务的处理策略
工单在每个 SRE团队内部的管理方式都不一样：可能是主on-call工程师在轮值过程中
的时候负责联系主on-call工程师。这种情况下，一般来说，副on-call工程师是由另外
小组都有不同。在某些小组中，副on-call工程师的唯一职责是如果在紧急警报无人响应
一般来说，副on-call工程师作为主on-call工程师的替补。副on-call工程师的职责每个
工程师值班。如果该工程师对某个问题不够了解，无法处理，他可以给其他团队发紧急
工作的打断，以及避免出现事故无人负责的问题，Google的on-call轮值每次只有一个
应用户支持请求，包括将问题升级给对应的开发者等。为了减少紧急警报对整个团队的
立接收和响应紧急警报，处理发生的事故或者故障。该主on-call工程师可能同时需要响
紧急警报主要是通过设置专门的主on-call工程师来处理的。也就是说，让一个工程师独
Google有几种方式管理团队中每种类型的运维负载。
管理运维负载
可能会牵扯某个人很长时间，甚至需要某个人现场决策这件事情是否可以稍后处理。
一些类型的运维负载是可以预计并且计划的，但是更多的负载都来自于未预料的地方，
SLO，但是这些任务会打断日常的工作。
讨论过具体的运维负载管理策略之后，我们应该回过头来讨论一下在制定这些策略的时
某个耗时很长的工单）。
call工程师需要在轮值结束后继续执行某个任务（例如某个需要持续多周的发布，或者
修改等。其他时候，每项任务都会分配给临时的某个具体的团队成员。也有的时候，on-
日常运维任务的管理方式就更多了。有时，on-call工程师负责进行版本发布、配置文件
员自己主动去处理工单。
某个非on-call工程师来处理。工单可能会随机分配给团队中的所有人，也可能是团队成
也处理工单，也可能是副on-call工程师在轮值的时候负责处理工单，或者团队可以指定
是中断任务。
一个团队的成员担任的。取决于职责的划分，副工程师可能会继续执行日常工作，而不
警报，寻求帮助。
●中断任务的SLO，即预期的响应时间
）排队的中断性任务有多少
第29章处理中断性任务
---
## Page 399
工将会产生出很强的创造力，成果丰硕。同时，这个员工自己也会更满意自己的工作。
这就是每个人都想进入的状态：某个人在解决问题的过程中，充分了解问题的起因和现
认知流状态：富有创造性和参与感
要做的那些一样。有多种方式进入这种状态，但是目标都是一样的。
电子游戏。但是更简单的方法是进行某种高技能需求、高难度的任务，正如工程师每天
我们可以通过不断进行低技能需求的工作来进入创造性状态，例如玩一个重复性很强的
流逝感也很强烈，例如打扫卫生、开车等。
样无法激发创造力。这些任务具有很明确的目标，反馈很及时，控制感很强，同时时间
认知流的概念同样适用，如果某项工作需要的技能很少，虽然他们是持续性的，但是同
就会失去这个状态。我们的目标是尽可能让员工在这个状态下工作。
正地掌握和优化某个他们负责的任务和项目。但是，如果有其他的事情打断他们，他们
可以提升生产力，也可以提升创造性，甚至艺术创造性。进入这个状态可以鼓励员工真
流状态（flow state注1）是一个软件工程行业内被普遍接受、人尽皆知的理念。“在状态里”
流状态
考虑的几个基本理念。
排中，能够认识到人的这些缺陷，取长补短是最好的。下面我们讨论一些在决策中需要
方式）工作原理不清楚，用户界面（指沟通方式）也不太友好，效率也不高。在工作安
从某种意义上讲，人类可以被称为不完美的机器。人会感觉无聊，人的处理器（指思维
不完美的机器
计算人力成本和生产力成本是很困难的。
读者可能注意到了，这些指标都是关于如何能用最低人力成本来满足最低响应时间的。
可能地忽略其他中断性任务。最大化某个成员在这个状态下的时间是非常好的，这个员
状，隐约感觉自己可以解决这个问题。这个人受主观能动性驱动，甚至忘记了时间，尽
单才能加人on-call）
可以处理某种中断性任务的人有多少（某些团队要求成员必须处理一定数量的工
中断性任务的发生频率
中断性任务的严重程度
不完美的机器
1357
<410
409
---
## Page 400
411
358
但是，下列任何一件事情都可能随时发生：
倒一杯咖啡，带上“不要打扰”的耳机，开始干活，
今天不是on-call,也不负责处理中断性事务。很明显，他希望能够进行他自己的项目工作。
工程师能够被分心的方法太多了。例如，某个名字是Fred的SRE星期一正常上班，他
分心指数
而使得团队成员都能成功。
这里关注的焦点是整个团队如何管理中断性任务，以便确保整个团队可以正常工作，从
团队管理层。这篇文章并不关心个人的习惯问题一
接下来的建议是来自于我在Google内部管理数个SRE团队的经验，主要面向的对象是
读者这时候可能在思考上述思想如何能指导具体的实践。
将一件事情做好
般是更好的。每个工程师对这种平衡的要求不一样。这里要注意的是，某些工程师其实