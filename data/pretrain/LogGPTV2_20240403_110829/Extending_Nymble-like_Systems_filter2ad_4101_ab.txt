(The number of time periods in a linkability window will
be a multiple of the number of VVPs.) Thus, when the VI
issues the user a verinym, this verinym is only valid until
some future VVP; the NI will not issue any nymble to a user
for any time period in a VVP after her verinym expires.
4The protocol of [15] with the modiﬁcation suggested in [9, §5]
produces an RSA modulus n = pnqn such that gcd((pn − 1)/2, s!) =
gcd((qn − 1)/2, s!) = 1; thus, it is easy to see that 2n + 1 is always
divisible by 3. 3n + 1 is even, so we use N = 4n + 1.
526
A. Threshold signature acquisition
Let VI = {VI1, VI2, . . . , VIs} be a set of s VIs. Let (cid:4)hash
be the bit length of the output of some secure cryptographic
hash function hash (say, (cid:4)hash = 256). U’s unique identiﬁer
is z and y = hash(z). There are Kmax VVPs per linkability
window and the current VVP is Kcur. A verinym is valid for
at most Klim VVPs but will expire earlier if Kcur + Klim ≥
Kmax.
The s VIs initialize the system by ﬁrst jointly computing
an RSA modulus n = pnqn, such that pn, qn, and N = 4n+
1 are all prime, by using the ‘Distributed Computation of N’
protocol from [15, §10] with the modiﬁcation suggested in
[9, §5].
Choosing a set of public keys: Suppose the public
modulus n will be retired after Lmax linkability windows.
The VIs agree on a prime η > s such that (cid:4)log2 (η)(cid:5) +
hamming weight(η) is the smallest possible. (If s  s for all
0 ≤ L  Kexp, then U backdates Xij
| VIij
to get X
Xij . Each X
(cid:4)
ij = X η
(cid:4)
ij =
(cid:4)
ij is now a verinym share for VVP Kexp.
; otherwise, U sets X
(Kij
ij
−Kexp)
10. U recombines her shares as follows:
(cid:5)
a) U computes
∈S
ω =
VIij
(cid:4)
ij )
(X
2λij = Y
4(s!)5·d/(ηKexp ) mod n
where λij is the integer
(cid:5)
λij = (s!) ·
{i|VIi∈S}−{ij}
i
i − ij
.
b) U uses the Extended Euclidean Algorithm to ﬁnd
a and b such that
a · 4(s!)
5
+ b · e · ηKexp = 1.
c) U computes her verinym by ﬁrst computing the
signature xKexp:
xKexp = ωaY b
= (Y
= (Y
4(s!)5·d/(ηKexp ))aY b
4(s!)5·d/(ηKexp ))a(Y e·d)b
4(s!)5·d/(ηKexp ))a(Y
(e·η
= (Y
= (Y a·4(s!)5+b·e·η
= (Y )d/(ηKexp )
= (y
2
Kexp
)d/(ηKexp )
+ (y mod ξ))d/(ηKexp ) mod n.
Kexp )·d/(ηKexp ))b
At the conclusion of the Verinym Acquisition Protocol, U
outputs a signature xKexp; given this value, she can compute
her verinym x0 by backdating this signature as follows: x0 =
xη
Kexp . More to the point, she can compute (and prove in
zero-knowledge to the NI that)
Kexp
(cid:6)
(cid:3) ≡
(cid:7)
2
y
+ (y mod ξ)
Kexp
xη
Kexp
e
mod n.
(cid:2)
∗
Figure 3 illustrates the Verinym Showing Protocol. In this
example, U is requesting J nymbles from the NI and her
current verinym expires in VVP Kexp. In the Nymble Show-
ing Protocol, U is required to prove that her verinym is valid
= min{(cid:11)(Kmax · (Tcur + J))/Tmax(cid:12), Kexp} (i.e., K
∗
for VVP K
is the VVP containing the last time period associated with
th nymble). She backdates her verinym xKexp (locally)
her J
mod n. She then commits
as follows: xK
K∗
to y, xK
∗ mod n and produces a zero-
K∗
knowledge proof that x0 is indeed xη
∗ mod n and that
(y2 + (y mod ξ)) ≡ xe
∗
K
0 mod n. Note that the exponent ηK
in this proof is public. That U is able to compute this proof
proves to the NI that U’s verinym is still
with exponent ηK
∗. When the NI is convinced by U’s proof,
valid in VVP K
the Nymble Acquisition Protocol runs as usual using x0 as
U’s verinym.
Kexp−K∗
Kexp
∗ and x0 = xη
K
∗ = xη
∗
Let αn, βn be known generators of the order-n subgroup
modulo N. U invokes the Verinym Showing Protocol to
prove to the NI that she has a valid verinym. The protocol
works as follows:
527
U does the following:
∗
∗ = xη
Kexp−K∗
Kexp
1. U computes K
mod n and x0 = xη
K
xK
VVP K
for which she is requesting a nymble.
= min{(cid:11)(Kmax · (Tcur + J))/Tmax(cid:12), Kexp},
K∗
∗ mod n;
∗ is the VVP that contains the last time period
2. U chooses γ1, γ2, γ3 ∈R Zn and computes Peder-
n mod N, xK
∗ =
n mod N and the
sen [26] commitments ¯y = αy
αxK∗
n mod N and x0 = αx0
n βγ2
ZKP ΠxK∗ (using Camenisch-Stadler notation [8])
nβγ1
n βγ3
mod N
mod N
mod N
⎫⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎬
⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎭
.
⎧⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎨
⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎩
⎛
⎞
P K
⎜⎜⎜⎜⎜⎜⎝
⎟⎟⎟⎟⎟⎟⎠ :
γ1,
γ2,
γ3,
y,
x0,
∗
xK
¯y = αy
nβγ1
∧xK
n
∗ = αxK∗
n βγ2
∧x0 = αx0
n
n βγ3
n
K∗
∧x0 = xη
∗
∧xe
∧0 ≤ y < 2(cid:5)hash
∧0 ≤ xK
∗ < n
3. Finally, U transmits ¯y, xK
K
to the NI.
modn
0 = y2 + (y mod ξ)mod n
∗ and x0, along with ΠxK∗ ,
The NI does the following:
4. The NI receives and veriﬁes ΠxK∗ . If veriﬁcation fails,
it aborts; otherwise, it accepts the verinym x0 as valid.
The remainder of the protocol works just like the scheme
with a non-threshold VI. As Figure 3 illustrates, U computes