care where the memory is allocated. For example, if the caller has a newly created submap that the
caller knows is empty, the caller may want to allocate memory at the beginning of the map.
 If KMA_NOPAGEWAIT is set, the function does not wait for pages if memory is not available.
 If KMA_KOBJECT is set, the function uses the kernel VM object (kernel_object); otherwise, a new
VM object is allocated.
kernel_memory_allocate() calls vm_map_find_space() [osfmk/vm/vm_map.c] to find and allocate a
virtual address range in the VM map. A new VM map entry is initialized because of this. As shown in
Figure 843, kernel_memory_allocate() calls vm_page_alloc() to allocate pages. If the VM object is
newly allocated, it passes a zero offset to vm_page_alloc(). If the kernel object is being used, the offset
is the difference of the address returned by vm_map_find_space() and the minimum kernel address
(VM_MIN_KERNEL_ADDRESS, defined to be 0x1000 in osfmk/mach/ppc/vm_param.h).
8.16.2. kmem_alloc
The kmem_alloc family of functions is implemented in osfmk/vm/vm_kern.c. These functions are
intended for use in the Mach portion of the kernel.
kern_return_t
kmem_alloc(vm_map_t map, vm_offset_t *addrp, vm_size_t size);
kern_return_t
kmem_alloc_wired(vm_map_t map, vm_offset_t *addrp, vm_size_t size);
kern_return_t
kmem_alloc_aligned(vm_map_t map, vm_offset_t *addrp, vm_size_t size);
kern_return_t
kmem_alloc_pageable(vm_map_t map, vm_offset_t *addrp, vm_size_t size);
kern_return_t
kmem_alloc_contig(vm_map_t map, vm_offset_t *addrp,
vm_size_t size, vm_offset_t mask, int flags);
kern_return_t
kmem_realloc(vm_map_t map, vm_offset_t oldaddr, vm_size_t oldsize,
vm_offset_t *newaddrp, vm_size_t newsize);
void
kmem_free(vm_map_t map, vm_offset_t addr, vm_size_t size);
 kmem_alloc() simply forwards its arguments to kernel_memory_allocate() and also sets the
latter's mask and flags parameters to 0 each.
 kmem_alloc_wired() simply forwards its arguments to kernel_memory_allocate() and also sets
the latter's mask and flags parameters to 0 and KMA_KOBJECT, respectively. Consequently, memory
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhCF85.htm 20.08.2007
Chapter 8. Memory Page 109 of 135
is allocated in the kernel objectin either the kernel's map or a submap. The memory is not zero-
filled.
 kmem_alloc_aligned() simply forwards its arguments to kernel_memory_allocate() after
ensuring that the requested allocation size is a power of 2. Additionally, it sets the latter's flags
parameter to KMA_KOBJECT and the mask parameter to (size -1), where size is the requested
allocation size.
 kmem_alloc_pageable() allocates pageable kernel memory in the given address map. It only calls
vm_map_enter() to allocate a range in the given VM map. In particular, it does not back the range
with physical memory. The execve() system call implementation uses this function to allocate
memory in the BSD pageable map (bsd_pageable_map) for execve() arguments.
 kmem_alloc_contig() allocates physically contiguous, wired kernel memory. The I/O Kit uses
this function.
 kmem_realloc() reallocates wired kernel memory given a region that is already allocated using
kmem_alloc().
 kmem_free() releases allocated kernel memory.
Except kmem_alloc_pageable(), all kmem_alloc functions allocate wired memory.
8.16.3. The Mach Zone Allocator
The Mach zone allocator is a fast memory allocation mechanism with garbage collection. As shown in
Figure 843, several allocation functions in the kernel directly or indirectly use the zone allocator.
A zone is a collection of fixed-size memory blocks that are accessible through an efficient interface for
allocation and deallocation. The kernel typically creates a zone for each class of data structure to be
managed. Examples of data structures for which the Mac OS X kernel creates individual zones include the
following:
Asynchronous I/O work queue entries (struct aio_workq_entry)
Alarms (struct alarm) and timer data (mk_timer_data_t)
Kernel audit records (struct kaudit_record)
Kernel notifications (struct knote)
Tasks (struct task), threads (struct thread), and uthreads (struct uthread)
Pipes (struct pipe)
Semaphores (struct semaphores)
Buffer headers (struct buf) and metadata buffers
Various protocol control blocks in the network stack
Unified buffer cache "info" structures (struct ubc_info)
Vnode pagers (struct vnode_pager) and device pagers (struct device_pager)
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhCF85.htm 20.08.2007
Chapter 8. Memory Page 110 of 135
Mach VM data structures, such as VM maps (struct vm_map), VM map entries (struct
vm_map_entry), VM map copy objects (struct vm_map_copy), VM objects (struct vm_object),
VM object hash entries (struct vm_object_hash_entry), and pages (struct vm_page)
Mach IPC data structures, such as IPC spaces (struct ipc_space), IPC tree entries (struct
ipc_tree_entry), ports (struct ipc_port), port sets (struct ipc_pset), and IPC messages
(ipc_kmsg_t)
The host_zone_info() Mach routine retrieves information about Mach zones from the kernel. It returns
an array of zone names and another array of zone_info structures []. The
zprint command-line program uses host_zone_info() to retrieve and display information about all
zones in the kernel.
$ zprint
elem cur max cur max cur alloc alloc
zone name size size size #elts #elts inuse size count
-------------------------------------------------------------------------------
zones 80 11K 12K 152 153 89 4K 51
vm.objects 136 6562K 8748K 49410 65867 39804 4K 30 C
vm.object.hash.entries 20 693K 768K 35496 39321 24754 4K 204 C
...
pmap_mappings 64 25861K 52479K 413789 839665272627 4K 64 C
kalloc.large 59229 2949K 4360K 51 75 51 57K 1
Note that zprint's output includes the size of an object in each zone (the elem size column). You can
pipe zprint's output through the sort command to see that several zones have the same element sizes. A
single physical page is never shared between two or more zones. In other words, all zone-allocated objects
on a physical page will be of the same type.
$ zprint | sort +1 -n
...
alarms 44 3K 4K 93 93 1 4K 93 C
kernel.map.entries 44 4151K 4152K 96628 96628 9582 4K 93
non-kernel.map.entries 44 1194K 1536K 27807 35746 18963 4K 93 C
semaphores 44 35K 1092K 837 25413 680 4K 93 C
vm.pages 44 32834K 0K 764153 0763069 4K 93 C
...
A zone is described in the kernel by a zone structure (struct zone).
// osfmk/kern/zalloc.h
struct zone {
int count; // number of elements used now
vm_offset_t free_elements;
decl_mutex_data(,lock); // generic lock
vm_size_t cur_size; // current memory utilization
vm_size_t max_size; // how large this zone can grow
vm_size_t elem_size; // size of an element
vm_size_t alloc_size; // chunk size for more memory
char *zone_name; // string describing the zone
...
struct zone *next_zone; // link for all-zones list
...
};
A new zone is initialized by calling zinit(), which returns a pointer to a newly created zone structure
(zone_t). Various subsystems use zinit() to initialize the zones they need.
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhCF85.htm 20.08.2007
Chapter 8. Memory Page 111 of 135
zone_t
zinit(vm_size_t size, // size of each object
vm_size_t max, // maximum size in bytes the zone may reach
vm_size_t alloc, // allocation size
const char *name); // a string that describes the objects in the zone
The allocation size specified in the zinit() call is the amount of memory to add to the zone each time the
zone becomes emptythat is, when there are no free elements on the zone's free list. The allocation size is
automatically rounded up to an integral number of pages. Note that zone structures are themselves
allocated from a zone of zones (zone_zone). When the zone allocator is initialized during kernel
bootstrap, it calls zinit() to initialize the zone of zones. zinit() TReats this initialization specially: It
calls zget_space() [osfmk/kern/zalloc.c] to allocate contiguous, nonpaged space through the master
kernel memory allocator (kernel_memory_allocate() [osfmk/vm/vm_kern.c]). Other calls to zinit()
allocate zone structures from the zone of zones through zalloc() [osfmk/kern/zalloc.c].
// osfmk/kern/zalloc.c
// zone data structures are themselves stored in a zone
zone_t zone_zone = ZONE_NULL;
zone_t
zinit(vm_size_t size, vm_size_t max, vm_size_t alloc, const char *name)
{
zone_t z;
if (zone_zone == ZONE_NULL) {
if (zget_space(sizeof(struct_zone), (vm_offset_t *)&z)
!= KERN_SUCCESS)
return(ZONE_NULL);
} else
z = (zone_t)zalloc(zone_zone);
// initialize various fields of the newly allocated zone structure
thread_call_setup(&z->call_async_alloc, zalloc_async, z);
// add the zone structure to the end of the list of all zones
return(z);
}
void
zone_bootstrap(void)
{
...
// this is the first call to zinit()
zone_zone = zinit(sizeof(struct zone), 128 * sizeof(struct zone),
sizeof(struct zone), "zones");
// this zone's empty pages will not be garbage collected
zone_change(zone_zone, Z_COLLECT, FALSE);
...
}
zinit() populates the various fields of a newly allocated zone structure. In particular, it sets the zone's
current size to 0 and the zone's empty list to NULL. Therefore, at this point, the zone's memory pool is
empty. Before returning, zinit() arranges for zalloc_async() [osfmk/kern/zalloc.c] to run by
setting up a callout. zalloc_async() attempts to allocate a single element from the empty zone, because
of which memory is allocated for the zone. zalloc_async() immediately frees the dummy allocation.
// osfmk/kern/zalloc.c
void
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhCF85.htm 20.08.2007
Chapter 8. Memory Page 112 of 135
zalloc_async(thread_call_param_t p0, __unused thread_call_param_t p1)
{
void *elt;
elt = zalloc_canblock((zone_t)p0, TRUE);
zfree((zone_t)p0, elt);
lock_zone((zone_t)p0);
((zone_t)p0)->async_pending = FALSE;
unlock_zone((zone_t)p0);
}
The zone allocator exports several functions for memory allocation, deallocation, and zone configuration.
Figure 845 shows the important functions.
Figure 845. Zone allocator functions
// Allocate an element from the specified zone
void *zalloc(zone_t zone);
// Allocate an element from the specified zone without blocking
void *zalloc_noblock(zone_t zone);
// A special version of a nonblocking zalloc() that does not block
// even for locking the zone's mutex: It will return an element only
// if it can get it from the zone's free list
void *zget(zone_t zone);
// Free a zone element
void zfree(zone_t zone, void *elem);
// Add ("cram") the given memory to the given zone
void zcram(zone_t zone, void *newmem, vm_size_t size);
// Fill the zone with enough memory for at least the given number of elements
int zfill(zone_t zone, int nelem);
// Change zone parameters (must be called immediately after zinit())
void zone_change(zone_t zone, unsigned int item, boolean_t value);
// Preallocate wired memory for the given zone from zone_map, expanding the
// zone to the given size
void zprealloc(zone_t zone, vm_size_t size);
// Return a hint for the current number of free elements in the zone
integer_t zone_free_count(zone_t zone)
The zone_change() function allows the following Boolean flags to be modified for a zone.
 Z_EXHAUST If this flag is true, the zone is exhaustible, and an allocation attempt simply returns if the
zone is empty. This flag is false by default.
 Z_COLLECT If this flag is true, the zone is collectable: Its empty pages are garbage collected. This
flag is true by default.
 Z_EXPAND If this flag is true, the zone is expandable: It can be grown by sending an IPC message.
This flag is true by default.
 Z_FOREIGN If this flag is true, the zone can contain foreign objectsthat is, those objects that are not
allocated through zalloc(). This flag is false by default.
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhCF85.htm 20.08.2007
Chapter 8. Memory Page 113 of 135
The typical kernel usage of zalloc() is blockingthat is, the caller is willing to wait if memory is not
available immediately. The zalloc_noblock() and zget() functions attempt to allocate memory with no
allowance for blocking and therefore can return NULL if no memory is available.
As shown in Figure 843, the zone allocator eventually allocates memory through
kernel_memory_allocate() [osfmk/vm/vm_kern.c]. If the system is low on available memory, this
function returns KERN_RESOURCE_SHORTAGE, which causes the zone allocator to wait for a page to become
available. However, if kernel_memory_allocate() fails because there is no more kernel virtual address
space left, the zone allocator causes a kernel panic.
Freeing a zone element through zfree() [osfmk/kern/zalloc.c] causes the element to be added to the
zone's free list and the zone's count of in-use elements to be decremented. A collectable zone's unused
pages are periodically garbage collected.
During VM subsystem initialization, the kernel calls zone_init() [osfmk/kern/zalloc.c] to create a
map for the zone allocator (zone_map) as a submap of the kernel map. zone_init() also sets up garbage
collection information: It allocates wired memory for the zone page tablea linked list that contains one
element, a zone_page_table_entry structure, for each page assigned to a zone.
// osfmk/kern/zalloc.c
struct zone_page_table_entry {
struct zone_page_table_entry *link;
short alloc_count;
short collect_count;
};
The alloc_count field of the zone_page_table_entry structure is the total number of elements from
that page assigned to the zone, whereas the collect_count field is the number of elements from that
page on the zone's free list. Consider the following sequence of steps as an example of new memory being
added to a zone.
 A caller invokes zalloc() to request memory. zalloc() is a wrapper around zalloc_canblock
(), which it calls with the "can block" Boolean parameter (canblock) set to true.
 zalloc_canblock() attempts to remove an element from the zone's free list. If it succeeds, it
returns; otherwise, the zone's free list is empty.
 zalloc_canblock() checks whether the zone is currently undergoing garbage collection. If so, it
sets the zone structure's waiting bit field and goes to sleep. The garbage collector will wake it up,
after which it can retry removing an element from the zone's free list.
 If allocation still doesn't succeed, zalloc_canblock() checks the zone structure's doing_alloc bit
field to check whether someone else is allocating memory for the zone. If so, it goes to sleep again
while setting the waiting bit field.
 If nobody else is allocating memory for the zone, zalloc_canblock() attempts to allocate memory
for the zone by calling kernel_memory_allocate(). The size of this allocation is normally the
zone's allocation size (the size structure's alloc_size field), but it can be just the size of a single
element (rounded up to an integral number of pages) if the system is low on memory.
 On a successful return from kernel_memory_allocate(), zalloc_canblock() calls
zone_page_init() on the new memory. For each page in the memory, zone_page_init() sets
both the alloc_count and collect_count fields of the corresponding zone_page_table_entry
structure to 0.
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhCF85.htm 20.08.2007
Chapter 8. Memory Page 114 of 135
 zalloc_canblock() then calls zcram() on the new memory, which in turn calls
zone_page_alloc() for each newly available element. zone_page_alloc() increments the
appropriate alloc_count value by one for each element.
The zone garbage collector, zone_gc() [osfmk/kern/zalloc.c], is invoked by consider_zone_gc()
[osfmk/kern/zalloc.c]. The latter ensures that garbage collection is performed at most once per minute,
unless someone else has explicitly requested a garbage collection. The page-out daemon calls
consider_zone_gc().
zfree() can request explicit garbage collection if the system is low on memory and the zone from which
the element is being freed has an element size of a page size or more.
zone_gc() makes two passes on each collectable zone.[24] In the first pass, it calls zone_page_collect
() [osfmk/kern/zalloc.c] on each free element. zone_page_collect() increments the appropriate
collect_count value by one. In the second pass, it calls zone_page_collectable() on each element,
which compares the collect_count and alloc_count values for that page. If the values are equal, the
page can be reclaimed since all elements on that page are free. zone_gc() tracks such pages in a list of
pages to be freed and eventually frees them by calling kmem_free().
[24] zone_gc() can skip a collectable zone if the zone has less than 10% of its elements free
or if the amount of free memory in the zone is less than twice its allocation size.
8.16.4. The Kalloc Family
The kalloc family of functions, implemented in osfmk/kern/kalloc.c, provides access to a fast general-
purpose memory allocator built atop the zone allocator. kalloc() uses a 16MB submap (kalloc_map) of
the kernel map from which it allocates its memory. The limited submap size avoids virtual memory
fragmentation. kalloc() supports a set of allocation sizes, ranging from as little as KALLOC_MINSIZE
bytes (16 bytes by default) to several kilobytes. Note that each size is a power of 2. When the allocator is
initialized, it calls zinit() to create a zone for each allocation size that it handles. Each zone's name is set
to reflect the zone's associated size, as shown in Figure 846. These are the so-called power-of-2 zones.
Figure 846. Printing sizes of kalloc zones supported in the kernel