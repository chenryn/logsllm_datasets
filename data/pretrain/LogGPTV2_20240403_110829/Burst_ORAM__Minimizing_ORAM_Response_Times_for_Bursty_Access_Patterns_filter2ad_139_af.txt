[20] REN, L., YU, X., FLETCHER, C. W., VAN DIJK, M., AND DE-
VADAS, S. Design space exploration and optimization of path
oblivious RAM in secure processors. In Proc. ISCA. 2013.
[21] SHI, E., CHAN, H., STEFANOV, E., AND LI, M. Oblivious
In Proc. ASIACRYPT
RAM with O((logN)3) worst-case cost.
(2011).
[22] STEFANOV, E., AND SHI, E. Multi-Cloud Oblivious Storage. In
CCS (2013).
[23] STEFANOV, E., AND SHI, E. ObliviStore: High performance
In IEEE Symposium on Security and
oblivious cloud storage.
Privacy (2013).
[24] STEFANOV, E., SHI, E., AND SONG, D. Towards practical obliv-
ious RAM. NDSS, 2012.
[25] STEFANOV, E., VAN DIJK, M., SHI, E., FLETCHER, C., REN,
L., YU, X., AND DEVADAS, S. Path ORAM: An extremely
simple oblivious RAM protocol. In ACM CCS (2013).
[26] WILLIAMS, P., AND SION, R. Sr-oram: Single round-trip obliv-
ious ram. ACNS, industrial track (2012), 19–33.
[27] WILLIAMS, P., SION, R., AND CARBUNAR, B. Building castles
out of mud: practical access pattern privacy and correctness on
untrusted storage. In Proc. ACM CCS (2008), pp. 139–148.
[28] WILLIAMS, P., SION, R., AND TOMESCU, A. PrivateFS: A
parallel oblivious ﬁle system. In CCS (2012).
A Pseudocode
Algorithms 1–4 give pseudocode for Burst ORAM, using
the notation summarized in Table 1. The algorithms are
described in detail in Section 6, but we clarify some of
the code and notation below.
The efﬁciency of shufﬂe job Jp is given by:
EJp =
VJp + AJp
RJp +WJp
.
(1)
Cp represents the state of partition p at the time p’s last
shufﬂe job completed, and determines the current set of
occupied levels in p. Vp represents the number of blocks
that have been evicted to p, since p’s last shufﬂe job com-
pleted. Cp +Vp determines which levels would be occu-
pied if p were to be completely shufﬂed.
VJp represents the number of evicted blocks that will
be shufﬂed into p by Jp. Thus, Cp and VJp together de-
termine Jp’s read and write levels.
If Jp is inactive, it is updated whenever Vp changes,
setting VJp ← Vp (Algorithm 1, Line 25). However, we
762  23rd USENIX Security Symposium 
USENIX Association
14
Table 1: Algorithm Notation
v
λ
p
Vp
Cp
b
Eviction rate: blocks evicted per request
Number of levels cached locally
A partition
# blocks evicted to p since p’s last shufﬂe end
p’s state after last shufﬂe (shufﬂed evictions)
Block ID
Plaintext contents of b
Encrypted contents of b
Server address/ID of b
Partition containing b, or random if none
Level containing b, or ⊥ if none
IDs of standard-read blocks to fetch
IDs of early shufﬂe read blocks to fetch
Combined block (XOR of all blocks in Q)
Subtraction block (XOR of dummies in Q)
Shufﬂe job for p
Number of evicted blocks Jp will shufﬂe
Efﬁciency of Jp
Number of early shufﬂe reads for Jp
Total blocks remaining to be read for Jp
Total blocks to write for Jp
D(b)
E(b)
S(b)
P(b)
L(b)
Q
C
XQ
X(cid:30)Q
Jp
VJp
EJp
AJp
RJp
WJp
NJQ New Job Queue
RJQ Read Job Queue
W JQ Write Job Queue
implement level caching by skipping those updates to Jp
that would cause Jp to write to levels with indexes less
than λ (Algorithm 1, Line 23). Once Jp is active, VJp
is no longer updated. When Jp completes, p’s state is
updated to reﬂect the blocks shufﬂed in by Jp, setting
Cp ← Cp +VJp (Algorithm 3, Line 37).
If p has no inactive shufﬂe job, the job is created fol-
lowing the ﬁrst eviction to p that would allow updating
(Algorithm 1, Line 24). If p has no active job, the inac-
tive job moves to the New Job Queue (NJQ) as soon as
the job is created (Algorithm 1, Line 27), where it stays
until the job is activated. If p does have an active shufﬂe
job, the inactive job is not added to NJQ until the active
job completes (Algorithm 3, Line 38).
Thus, NJQ contains only inactive shufﬂe jobs for
those partitions with no active job, ensuring that any job
in NJQ may be activated. NJQ is a priority queue serving
the most efﬁcient jobs ﬁrst. Job efﬁciency may change
while the job is in NJQ, since VJp can still be updated.
B Reducing Online Costs of SR-ORAM
We now brieﬂy describe how SR-ORAM [26] can beneﬁt
from our XOR technique. Like ObliviStore, SR-ORAM
requires only a single round-trip to satisfy a request, and
has online bandwidth cost O(logN). SR-ORAM uses an
Append b to RequestQueue
On REQUESTCALLBACK(D(b)), return D(b)
Append b to RequestQueue
On REQUESTCALLBACK(D(b)), write d to D(b)
b ← PEEK(RequestQueue)
if FETCH(b) then
RequestMade ← true
POP(RequestQueue)
MAKEEVICTIONS
Algorithm 1 Pseudocode for Client and ORAM Main
1: function CLIENTREAD(b)
2:
3:
4: procedure WRITE(b,d)
5:
6:
7: procedure ORAM MAIN
RequestMade ← f alse
8:
if RequestQueue (cid:28)= /0 then
9:
10:
11:
12:
13:
14:
15:
16:
17: procedure MAKEEVICTIONS
18:
19:
20:
21:
22:
23:
24:
25:
26:
27:
p ← random partition
Evict new dummy or assigned real block to p
Vp = Vp + 1
if shufﬂing p only writes levels ≥ λ then
Jp ← p’s inactive job (cid:30) Create if needed
VJp ← Vp
if p has no active job then
PendingEvictions = PendingEvictions + v
while PendingEvictions ≥ 1 do
if RequestMade = f alse then
TRYSHUFFLEWORK
(cid:30) Request Issued
NJQ = NJQ∪ Jp
28:
PendingEvictions = PendingEvictions− 1
encrypted Bloom ﬁlter to let the server obliviously check
whether each level contains the requested block. The
server retrieves the requested block from its level, and
client-selected dummies from all others. Since at most
one block is real, the server can XOR all the blocks to-
gether and return a single combined block.
One difference in SR-ORAM is that the client does not
know a priori which level contains the requested block.
Thus, SR-ORAM must be modiﬁed to include the level
index of each retrieved block in its response. To al-
low the client to easily reconstruct dummies, we must
also change SR-ORAM to generate the contents of each
dummy block as in Burst ORAM. Since the client knows
the indexes of the dummy blocks it requested from each
level, it can infer the real block’s level from the server’s
response. The client then reconstructs the all dummy
block contents and XORs them with the returned block
to obtain the requested block, as in Burst ORAM.
SR-ORAM is a synchronous protocol, so it has no
notion equivalent to early shufﬂe reads. Thus,
the
XOR technique reduces SR-ORAM’s online bandwidth
cost from O(logN) to 1. The reduction in overall
USENIX Association  
23rd USENIX Security Symposium  763
15
P(b),L(b) ← position map lookup on b
Q = /0,C = /0
for level (cid:30) ∈ P(b) do
Algorithm 2 Pseudocode for Requester
1: function FETCH(b)
2:
3:
4:
5:
6:
7:
8:
9:
10:
11:
if (cid:30) is non-empty then
b(cid:30) ← b if (cid:30) = L(b)
b(cid:30) ← ID of next dummy in (cid:30) if (cid:30) (cid:29)= L(b)
if (cid:30) more than half full then
(cid:29) Standard read
Q ← Q∪ S(b(cid:30))
C ← C∪ S(b(cid:30))
Ret ← |C|+ MAX(|Q|,1)
if Not TRYDEC(Local Space, Ret) then
(cid:29) Early shufﬂe read
(cid:29) # blocks to return
else
return f alse (cid:29) Not enough space for blocks
return true
DEC(Concurrent IO, Ret)
Issue asynch. request for (C,Q) to server
When done, server calls:
12:
13:
14:
15:
16:
17:
18:
19:
20: procedure FETCHCALLBACK({E(ci)},XQ)
21:
22:
23:
24:
25:
X(cid:24)Q ← ⊕{E(qi) | S(qi) ∈ Q,qi (cid:29)= b}
E(b) ← XQ ⊕ X(cid:24)Q
E(b) ← E(ci) where ci = b
if b ∈ C then
D(b) ← decrypt E(b)
Assign b for eviction to random partition
REQUESTCALLBACK(D(b))
INC(Concurrent IO, 1)
if b ∈ Q then
26:
27:
28:
29:
30:
FETCHCALLBACK(E(C), XOR of E(Q))
(cid:29) Subtraction block, computed locally
cost is negligible, as SR-ORAM has an ofﬂine cost
O(log2 N loglogN). SR-ORAM contains only one hier-
archy of O(logN) levels, so XOR incurs only O(logN)
extra storage cost for the level-speciﬁc keys, ﬁtting into
SR-ORAM’s logarithmic client storage.
return
TRYACTIVATE
(cid:29) No shufﬂe work
(cid:29) Try to add job to RJQ
if Not TRYDEC(Concurrent IO, 1) then
if Not ReadIssued and Not WriteIssued then
ReadIssued,WriteIssued ← f alse
if All reads for jobs in RJQ issued then
if Jp ∈ RJQ has not issued read bR then
if TRYDEC(Shufﬂe Buffer, 1) then
Issue asynch. request for S(bR)
When done: READCALLBACK(E(bR))
ReadIssued ← true
if !ReadIssued and Jp ∈ W JQ has write bW then
Write E(bW ) to server
When done, call WRITECALLBACK(S(bW ))
WriteIssued ← true
INC(Concurrent IO, 1)
Algorithm 3 Pseudocode for Shufﬂer
1: procedure TRYSHUFFLEWORK
2:
3:
4:
5:
6:
7:
8:
9:
10:
11:
12:
13:
14:
15:
16:
17:
18: procedure TRYACTIVATE
19:
Jp ← PEEK(NJQ)
20:
if TRYDEC(Shufﬂe Buffer, VJp + AJp) then
21:
Mark Jp active
22:
INC(Local Space, VJp + AJp)
23:
Move Jp from NJQ to RJQ
24:
25: procedure READCALLBACK(E(bR))
26:
27:
28:
29:
30:
31:
32: procedure WRITECALLBACK(S(bW ))
33:
34:
35:
36:
37:
38:
Mark Jp complete
Remove Jp from W JQ
Update Cp ← Cp +VJp,Vp ← Vp −VJp
Add p’s inactive job, if any, to NJQ
INC(Concurrent IO, 1)
Decrypt E(bR), place D(bR) in Shufﬂe Buffer
if all reads in Jp have ﬁnished then
Create dummy blocks to get WJp blocks total
Permute and re-encrypt the blocks
Move Jp from RJQ to W JQ
INC(Concurrent IO, 1)
if all writes in Jp have ﬁnished then
if NJQ (cid:29)= /0 then
(cid:29) Most efﬁcient job
(cid:29) VJp frozen
Algorithm 4 Pseudocode for semaphores
1: procedure DEC(Semaphore,Quantity)
Semaphore ← Semaphore− Quantity
2:
3: procedure INC(Semaphore,Quantity)
Semaphore ← Semaphore + Quantity
4:
5: function TRYDEC(Semaphore,Quantity)
if Semaphore < Quantity then return f alse
6:
DEC(Semaphore,Quantity); return true
7:
764  23rd USENIX Security Symposium 
USENIX Association
16