of the other approaches later in Section 5.
3 Modeling Deduplication
This section presents a formal model of the existence-of-ﬁle attack on client-side deduplication by giving
an indistinguishability-based notion of security. Client-side deduplication incorporates the following
interaction between client and server, and the crucial item is the signal sig sent from the server to the
client to indicate whether it wants the client to upload the ﬁle (sig = 1) or not (sig = 0).
1. When a client uploads a ﬁle, it will send a short description hF to the server (or otherwise enable
the server to decide if it has the ﬁle).
2. Server will then communicate a response sig to the client.
3. Client then sends the ﬁle if required.
Note that the ﬁrst and third steps may be preceded by encryption or segmentation, and thus we focus on
ﬁle-based deduplication to simplify our results. As we mentioned earlier, this signal potentially gives
the client the ability to learn whether or not a ﬁle is already stored.
Note that once the server gives sig = 0 to some client, it should give the signal 0 to every subsequent
in practice the
upload request for that ﬁle. We make this assumption to strengthen our adversary:
adversary may not be sure that she has been the only person to upload a ﬁle in a given time period, but in
our idealized model any requests for upload after the ﬁrst instance of sig = 0 will only result in wasted
bandwidth.
3.1 Deduplication Strategies
Cloud providers that are concerned with the potential consequences of the existence-of-ﬁle attack may
wish to implement a deduplication strategy that chooses the upload threshold based on some probability
distrubution. This approach will ideally reduce an adversary’s ability to gain information from its up-
loads, in a way that does not severely impact the amount of bandwidth required. In Section 4 we discuss
the important tradeoff between the bandwidth overhead and the security gain.
To deﬁne client-side deduplication strategies for cloud storage systems, we regard strategies as dis-
tributions on the possible thresholds. By this we mean a strategy DS can be written as a list (p0 =
0, p1, . . . ) where pi is the probability that the threshold is value i. The ﬁrst upload request must be met
with the signal 1 (otherwise the ﬁle could not be retrieved) so p0 = 0 for all meaningful strategies: we
will subsequently forego writing p0 when representing strategies. We refer to DS as the probability mass
function for the strategy, and DS.Alg as the algorithm that implements strategy DS. More formally:
Deﬁnition 1 (Deduplication Strategy). A deduplication strategy DS is characterized by its probability
distribution
DS(F, λ) = (p1(F, λ), p2(F, λ), . . . )
where pi(F, λ) = Pr [i ← DS.Alg(F, λ)]. A threshold selection algorithm DS.Alg is a probabilistic
procedure that on input a deduplication strategy distribution DS, security parameter λ ∈ N and a ﬁle
F ∈ {0, 1}∗, outputs a threshold thr ∈ N. Denote this event by thr ← DS.Alg(F, λ).
We say that a DS is ﬁle-oblivious if the distributions are independent of the ﬁle, i.e. DS.Alg(F, λ) =
DS.Alg(F ∗, λ) for all λ ∈ N and all F, F ∗ ∈ {0, 1}∗. Moreover, we say that DS is ﬁnite if for all security
parameters λ and ﬁles F ∈ {0, 1}∗, there exists an upper bound B = B(F, λ) such that pj(F, λ) = 0
for all j > B(F, λ). While our model does not discount strategies that are ﬁle-dependent, we have not
5
found any examples of such a strategy existing in the literature. Consequently, we only consider ﬁnite
and ﬁle-oblivious strategies for the rest of the paper. For clarity, we omit the ﬁle and security parameter
inputs and write pi instead of pi(F, λ).
Note that this deﬁnition includes strategies where, for example, the adversary ﬂips a biased coin for
each upload to decide if the server should stop requesting uploads – this strategy is included by ﬂipping
the coin until a threshold is given. Because we only consider ﬁnite strategies, this means that for any
i=1 pi. Some
strategy that ﬂips coins, the probability of the ﬁnal threshold value pB is forced to be 1−(cid:80)B−1
special cases include:
• Server that does not defend against existence-of-ﬁle attack DSdnd = (1, 0, 0, . . . )
• Threshold chosen uniformly at random [8] DSU = ( 1
• Fair coin DSfc = ( 1
B , . . . , 1
B , 0, . . . )
B , 1
8 , . . . ,
1
2B−1 , 0, . . . )
2 , 1
4 , 1
3.2 Security Model for Existence-of-File Attack
We now introduce the notion of indistinguishability under existence-of-ﬁle attack (IND-EFA) and give
our security experiment for an adversary mounting an existence-of-ﬁle attack. The general IND-EFA
experiment for deduplication schemes is depicted in Figure 1. At the start of the security experiment, A
chooses a ﬁle F from the ﬁlespace (denoted by F ← A). Here the adversary A attempts to distinguish
the two distributions DS and DS∗, where DS∗ is the deduplication strategy probability function shifted
one position to the left. The experiment keeps a counter ctr to track how many upload requests have
been performed for ﬁle F . The challenger, acting as the server, then invokes strategy algorithm DS.Alg
on F and in the b = 1 case increments the counter by one to simulate initial storage of F . A has access
to a store() oracle which increments the storage counter and responds with the appropriate signal sig.
As a consequence of this, if the adversary makes more than B queries to the store() oracle, it will always
receive sig = 0 and thus not gain any information – this gives us an inherent bound on the number of
(useful) queries an adversary can make. The experiment is parameterised by integer λ that is an input to
the DS.Alg algorithm. The line return b(cid:48) = b means that the experiment outputs 1 if the adversary has
output b(cid:48) = b and thus won the game, and outputs 0 if b(cid:48) (cid:54)= b.
Deﬁnition 2. Indistinguishability under existence-of-ﬁle attack (IND-EFA). The advantage of an adver-
sary A in the existence-of-ﬁle attack game against deduplication strategy DS is stated as follows:
(cid:104)
(cid:12)(cid:12)(cid:12)(cid:12)2 · Pr
(cid:105) − 1
(cid:12)(cid:12)(cid:12)(cid:12)
AdvIND-EFA
DS, A (λ)
def
=
ExpIND-EFA
DS, A (λ) = 1
where the experiment ExpIND-EFA
DS, A (λ) is given in Figure 1.
DS.Alg, A(λ) :
ExpIND-EFA
b $←− {0, 1}
F ← A
thr ← DS.Alg(F, λ)
ctr ← b
b(cid:48) ← Astore(λ)
return b(cid:48) = b
store():
ctr ← ctr + 1
if ctr < thr then
sig ← 1
sig ← 0
return sig
else
Figure 1: The general IND-EFA experiment for deduplication schemes.
As we mentioned earlier, there are multiple side channel attack vectors in the context of cloud
storage, and this security experiment considers the case when the adversary is attempting to learn the
storage status of one particular ﬁle. A straightforward hybrid argument extends our model to one with
6
multiple ﬁles, but note that this would not accurately model an adversary attempting to learn which ﬁle
from a set is stored on a cloud server. To see this, observe that in a multi-ﬁle extension of Figure 1, the
challenger either stores or does not store each ﬁle that the adversary queries, meaning that an adversarial
win indicates that it can distinguish the scenario when all or none of a set of ﬁles are stored.
Note that Deﬁnition 2 is expressed in terms of ﬁles and implicitly assumes that the CSP uses ﬁle-
based deduplication. We could equally express the deﬁnition in terms of blocks where the adversary
is aiming to ﬁnd whether a speciﬁc block has been uploaded, and if the storage protocol involves de-
terministic client-side segmentation then our model directly applies. However, we should be careful to
note that if the server does use block-based deduplication, but the adversary is trying to test whether a
speciﬁc ﬁle made up of different blocks is already uploaded, then a different notion would be needed. It
is conceivable that an adversary could learn that all the blocks of its target ﬁle are stored, and mistakenly
conclude that the ﬁle is stored. Additionally, a naive server handling unencrypted data may wish to only
defend ‘important blocks’ (e.g. block in a contract that includes the salary ﬁeld), but this in fact gives
the adversary more power as she can then conﬁrm that her contract template is correct. A full treatment
of the block-based scenario sits outside of the scope of our model and we consider it future work.
One issue that is deliberately omitted from our analysis is the process used by the CSP to handle
deletion. If the threshold is met for a speciﬁc ﬁle but subsequently all users delete the ﬁle from their
storage then the CSP may be tempted to remove the ﬁle plus associated data, including thr from its
storage. However, this means that the next time a client uploads that ﬁle the CSP would need to send
sig = 1 and randomly choose a new thr. This gives rise to a subtle attack: an adversary creates B
clients, uploads ﬁle F B times, observes threshold thr1 then deletes all its instances of F . She then
repeats this procedure by uploading the ﬁle B times and observes threshold thr2.
If F is stored by
another user then thr1 = thr2 (i.e. actual threshold minus one), but if F is not stored then thr1 (cid:54)= thr2.
Thus this attack wins the IND-EFA game with probability almost 1 (with uncertainty only when thr2
is randomly chosen to be equal to thr1). For this reason, we suggest that ﬁle-storage counters should
be non-decreasing and servers should not delete ﬁles once they are uploaded: we understand that the
second criterion is widely deployed already by CSPs.
4 Security and Efﬁciency Trade-offs
In this section we analyze some desirable properties of effective deduplication strategies. We ﬁrst show
that non-increasing strategies optimize both efﬁciency (in terms of bandwidth costs) and security. Thus
all good strategies should be non-increasing. Then we obtain a bound on the product of efﬁciency
and security, characterizing an essential trade-off between bandwidth overhead and defence against the
existence-of-ﬁle attack, for any deduplication strategy. As a corollary we prove that the uniform strategy
proposed by Harnik et al. [8] is optimal, using the product of efﬁciency and security as a natural efﬁcacy
metric.
Let DS = (p1, p2, . . . ) be a deduplication strategy. The expected bandwidth cost (in terms of the
number of expected uploads of each ﬁle) can be quantiﬁed by computing the expected threshold
∞(cid:88)
E =
ipi.
i=1
This is a natural measure of the overhead cost of the deduplication strategy:
the strategy that does
not defend against the existence-of-ﬁle attack has E = 1. For ﬁnite strategies, this sum will always
converge.
The security of a deduplication strategy is measured by the advantage deﬁned in Section 3. The
adversary only gains information when pi (cid:54)= pi+1. The scenario described earlier, where the adversary
successfully launches the existence-of-ﬁle attack by being told not to upload on its ﬁrst attempt and
winning, corresponds to the difference between p0 and p1, which equals the probability p1. Since the
adversary’s job is essentially to distinguish two probability distributions (the original distribution and its
7
shift by one), the statistical distance1 of the two distributions
∞(cid:88)
i=0
∆ =
1
2
|pi − pi+1|
is an upper bound on the advantage in the IND-EFA game, and hence a useful security measure. In fact
this bound is tight since it is achieved by the maximum likelihood distinguisher (MLD): an adversary
in the IND-EFA game must distinguish the two distributions and the MLD simply looks at the resulting
upload threshold thr and decide for which distribution this value was more likely.
We now state our ﬁrst theorem, which shows that non-increasing strategies, that is strategies DS(cid:48) =
(p(cid:48)
1, p(cid:48)
2, . . . , p(cid:48)
B, minimize both the expected bandwidth cost E
and the security level ∆. This result shows that the deduplication strategy of Lee and Choi [11] is
sub-optimal under any reasonable security metric, meaning one that considers the probability that the
adversary learns some information about a ﬁle’s storage status (rather than only considering instances
where the adversary is certain). We discuss their approach in more detail in Section 5.
B, 0, . . . ) where p(cid:48)
1 ≥ p(cid:48)
2 ≥ ··· ≥ p(cid:48)
Theorem 1. Let DS = (p1, p2, . . . , pB, 0, . . . ) be any deduplication strategy, and let ∆ and E be the cor-
responding values. Let π be a permutation on {1, 2, . . . , B} such that DS(cid:48) = (pπ(1), pπ(2), . . . , pπ(B), 0, . . . )
is a non-increasing deduplication strategy with corresponding values ∆(cid:48) and E(cid:48). Then ∆(cid:48) ≤ ∆ and
E(cid:48) ≤ E.
Proof. We ﬁrst show that E(cid:48) ≤ E. Suppose indexes i, j exist with i < j and pi < pj. Consider the
strategy DS∗ = (. . . , pi−1, pj, pi+1, . . . , pj−1, pi, pj+1, . . . ). It is clear that expected value for the two