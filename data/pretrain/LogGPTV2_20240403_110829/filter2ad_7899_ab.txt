    }
原理是利用`unsorted bin attack`修改`_IO_list_all`指针，然后利用`unsorted
bin`的解链操作将`chunk`放入`small
bin`的特定位置，该位置对应`_IO_list_all->_chain`，链接着我们构造的假`_IO_FILE`。从而在`_IO_flush_all_lockp`中控制程序流。
### 调用关系
`__libc_malloc` => `malloc_printerr` => `__libc_message` => `abort` =>
`_IO_flush_all_lockp`
### 条件
该段代码来自`glibc-2.23/libio/genops.c:779`：
    if (((fp->_mode _IO_write_ptr > fp->_IO_write_base)
    #if defined _LIBC || defined _GLIBCPP_USE_WCHAR_T
      || (_IO_vtable_offset (fp) == 0
          && fp->_mode > 0 && (fp->_wide_data->_IO_write_ptr
            > fp->_wide_data->_IO_write_base))
    #endif
      )
    && _IO_OVERFLOW (fp, EOF) == EOF)
其程序流图如下:  
在第一次判断`fp`的时候，`fp`指向的是`main_arena+88`，当model是一个正数时，会进行`(fp->_wide_data->_IO_write_ptr
> fp->_wide_data->_IO_write_base)`判断，这个判断没有人为干涉的话就一定为真。
    _IO_write_base = 0x7ff04b747c08 , 
      _IO_write_ptr = 0x7ff04b747c18 ,
而`fp->_mode`的值是`main_arena+280`，所以受随机化影响，`_mode`有`1/2`的几率为负数，也就意味着成功几率是`1/2`。
## glibc-2.23之后
在`glibc-2.23`之后增加了`_IO_vtable_check`，则重点成为了如何绕过`_IO_vtable_check`。
该段代码来自`glibc-2.24/libio/libioP.h:929`：
    /* Perform vtable pointer validation.  If validation fails, terminate
       the process.  */
    static inline const struct _IO_jump_t *
    IO_validate_vtable (const struct _IO_jump_t *vtable)
    {
      /* Fast path: The vtable pointer is within the __libc_IO_vtables
         section.  */
      uintptr_t section_length = __stop___libc_IO_vtables - __start___libc_IO_vtables;
      const char *ptr = (const char *) vtable;
      uintptr_t offset = ptr - __start___libc_IO_vtables;
      if (__glibc_unlikely (offset >= section_length))
        /* The vtable pointer is not in the expected section.  Use the
           slow path, which will terminate the process if necessary.  */
        _IO_vtable_check ();
      return vtable;
    }
`IO_validate_vtable`要求我们的`vtable`必须在`__stop___libc_IO_vtables`和`__start___libc_IO_vtables`之间，这就意味着我们不能利用任意地址来充当`vtable`。
我们可以利用原本就在`__stop___libc_IO_vtables`和`__start___libc_IO_vtables`之间的函数指针`_IO_str_jumps->__finish`。
    pwndbg> p _IO_str_jumps
    $1 = {
      __dummy = 0, 
      __dummy2 = 0, 
      __finish = 0x7fb33166d448 , 
      __overflow = 0x7fb33166d0f6 , 
      __underflow = 0x7fb33166d0b4 , 
      __uflow = 0x7fb33166c073 , 
      __pbackfail = 0x7fb33166d429 , 
      __xsputn = 0x7fb33166c0d5 , 
      __xsgetn = 0x7fb33166c223 , 
      __seekoff = 0x7fb33166d559 , 
      __seekpos = 0x7fb33166c38c , 
      __setbuf = 0x7fb33166c2b0 , 
      __sync = 0x7fb33166c60c , 
      __doallocate = 0x7fb33166c3ec , 
      __read = 0x7fb33166cfa6 , 
      __write = 0x7fb33166cfae , 
      __seek = 0x7fb33166cf98 , 
      __close = 0x7fb33166c60c , 
      __stat = 0x7fb33166cfa0 , 
      __showmanyc = 0x7fb33166cfb4 , 
      __imbue = 0x7fb33166cfba 
    }
该段代码来自`glibc-2.24/libio/strops.c:316`：
    void
    _IO_str_finish (_IO_FILE *fp, int dummy)
    {
      if (fp->_IO_buf_base && !(fp->_flags & _IO_USER_BUF))
        (((_IO_strfile *) fp)->_s._free_buffer) (fp->_IO_buf_base);
      fp->_IO_buf_base = NULL;
      _IO_default_finish (fp, 0);
    }
其程序流图如下所示：
所以我们可以将`vtable`指向`_IO_str_jumps`，然后将`fp`的`0xe8`偏移覆盖为`system`函数，`fp`的`0x38`偏移覆盖为`/bin/sh`字符串，就能拿到shell。
## glibc-2.27
在`glibc-2.27`以及之后的源码中，由于abort中没有刷新流的操作了，所以`house of orange`这个组合漏洞就不好用了。
该段代码来自`glibc-2.26/stdlib/abort.c:70`：
    /* Flush all streams.  We cannot close them now because the user
     might have registered a handler for SIGABRT.  */
    if (stage == 1)
    {
      ++stage;
      fflush (NULL);
    }
    /* Send signal which possibly calls a user handler.  */
    if (stage == 2)
    {
      /* This stage is special: we must allow repeated calls of
     `abort' when a user defined handler for SIGABRT is installed.
     This is risky since the `raise' implementation might also
     fail but I don't see another possibility.  */
      int save_stage = stage;
      stage = 0;
      __libc_lock_unlock_recursive (lock);
      raise (SIGABRT);
      __libc_lock_lock_recursive (lock);
      stage = save_stage + 1;
    }
在`2.27`中刷新流的操作被删去。
该段代码来自`glibc-2.27/stdlib/abort.c:77`：
    /* Send signal which possibly calls a user handler.  */
    if (stage == 1)
    {
      /* This stage is special: we must allow repeated calls of
     `abort' when a user defined handler for SIGABRT is installed.
     This is risky since the `raise' implementation might also
     fail but I don't see another possibility.  */
      int save_stage = stage;
      stage = 0;
      __libc_lock_unlock_recursive (lock);
      raise (SIGABRT);
      __libc_lock_lock_recursive (lock);
      stage = save_stage + 1;
    }
# house of orange by thread
## 代码
    #include 
    #include 
    #include 
    #include 
    #define NUM 0x4000 - 0x41
    void *thread_func(void *p)
    {
        char *ptr[NUM] = {0}, *end, *new;
        int i;
        for (i = 0; i size;
    if ((long) (MINSIZE + nb - old_size) > 0
        && grow_heap (old_heap, MINSIZE + nb - old_size) == 0)
      {
        av->system_mem += old_heap->size - old_heap_size;
        set_head (old_top, (((char *) old_heap + old_heap->size) - (char *) old_top)
                  | PREV_INUSE);
      }
    else if ((heap = new_heap (nb + (MINSIZE + sizeof (*heap)), mp_.top_pad)))
      {
        /* Use a newly allocated heap.  */
        heap->ar_ptr = av;
        heap->prev = old_heap;
        av->system_mem += heap->size;
        /* Set up the new top.  */
        top (av) = chunk_at_offset (heap, sizeof (*heap));
        set_head (top (av), (heap->size - sizeof (*heap)) | PREV_INUSE);
        /* Setup fencepost and free the old top chunk with a multiple of
            MALLOC_ALIGNMENT in size. */
        /* The fencepost takes at least MINSIZE bytes, because it might
            become the top chunk again later.  Note that a footer is set
            up, too, although the chunk is marked in use. */
        old_size = (old_size - MINSIZE) & ~MALLOC_ALIGN_MASK;
        set_head (chunk_at_offset (old_top, old_size + 2 * SIZE_SZ), 0 | PREV_INUSE);
        if (old_size >= MINSIZE)
          {
            set_head (chunk_at_offset (old_top, old_size), (2 * SIZE_SZ) | PREV_INUSE);
            set_foot (chunk_at_offset (old_top, old_size), (2 * SIZE_SZ));
            set_head (old_top, old_size | PREV_INUSE | NON_MAIN_ARENA);
            _int_free (av, old_top, 1);
          }
该段代码来自`glibc-2.27/malloc/arena.c:611`：
    /* Grow a heap.  size is automatically rounded up to a
       multiple of the page size. */
    static int
    grow_heap (heap_info *h, long diff)
    {
      size_t pagesize = GLRO (dl_pagesize);
      long new_size;
      diff = ALIGN_UP (diff, pagesize);
      new_size = (long) h->size + diff;
      if ((unsigned long) new_size > (unsigned long) HEAP_MAX_SIZE)
        return -1;
      if ((unsigned long) new_size > h->mprotect_size)
        {
          if (__mprotect ((char *) h + h->mprotect_size,
                          (unsigned long) new_size - h->mprotect_size,
                          PROT_READ | PROT_WRITE) != 0)
            return -2;
          h->mprotect_size = new_size;
        }
      h->size = new_size;
      LIBC_PROBE (memory_heap_more, 2, h, h->size);
      return 0;
    }
`HEAP_MAX_SIZE`的值就是`0x4000000`。