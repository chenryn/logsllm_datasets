50 CHAPTER5. SQLAGGREGATES
test=> SELECT * FROM friend ORDER BY firstname;
firstname | lastname | city | state | age
-----------------+----------------------+-----------------+-------+-----
Dean | Yeager | Plymouth | MA | 24
Dick | Gleason | Ocean City | NJ | 19
Ned | Millstone | Cedar Creek | MD | 27
Sandy | Gleason | Ocean City | NJ | 25
Sandy | Weber | Boston | MA | 33
Victor | Tabor | Williamsport | PA | 22
(6 rows)
test=> SELECT COUNT(*) FROM friend;
count
-------
6
(1 row)
test=> SELECT SUM(age) FROM friend;
sum
-----
150
(1 row)
test=> SELECT MAX(age) FROM friend;
max
-----
33
(1 row)
test=> SELECT MIN(age) FROM friend;
min
-----
19
(1 row)
test=> SELECT AVG(age) FROM friend;
avg
-----
25
(1 row)
Figure5.1: ExamplesofAggregates
5.2. USINGGROUPBY 51
usingthe asterisk(*). It does not examineindividualcolumns like the other aggregates. To find
theCOUNTofallnon-NULLvaluesinacertaincolumn,useCOUNT(colname). Tofindthenumberof
distinctvaluesinacolumn,useCOUNT(DISTINCTcolname).
Figure5.2illustratesaggregatehandlingof NULLvalues. First,asinglerowcontainingaNULL
column is used to show aggregates returning NULL results. Two versions of COUNT on a NULL
columnareshown. NoticethatCOUNTneverreturnsaNULLvalue. Then,asinglenon-NULLrowis
inserted,andtheresultsshown. NoticetheAVG()of3andNULLis3,not1.5,illustratingtheNULL
valueisnotconsideredintheaveragecomputation. Psql’s\dacommandlistsalloftheaggregates
supportedbyPOSTGRESQL.
5.2 Using GROUP BY
Simpleaggregatesreturnonerowasaresult. Itisoftendesirable,however,toapplyanaggregate
to groups of rows. In queries using aggregateswith GROUP BY, the aggregateis applied to rows
grouped by another column in the table. For example, SELECT COUNT(*) FROM friend returns the
total number of rows in the table. The query in Figure 5.3 shows the use of GROUP BY to count
thenumberof peopleineachstate. With GROUPBY,thetableissplitupintogroupsbystate,and
COUNT(*)isappliedtoeachgroupinturn.
Thesecondqueryshowstheminimum,maximum,andaverageagesofthepeopleineachstate.
ItalsoshowsanORDERBYoperationcarriedoutontheaggregatecolumn. Becausethecolumnis
thefourthoneintheresult,youcanidentifyitbythenumber4. UsingORDER BY avg wouldhave
workedaswell.
YoucanGROUPBYmorethanonecolumn,asshowninFigure 5.4. GROUPBYcollectsallNULL
valuesintoasinglegroup.
5.3 Using HAVING
Onemore aggregatecapabilityisoften overlooked—theHAVINGclause. HAVINGallowsauserto
performconditionaltestsonaggregatevalues. ItisoftenemployedinconjunctionwithGROUPBY.
WithHAVING,youcanincludeorexcludegroupsbasedontheaggregatevalueforthatgroup. For
example,supposeyouwanttoknowallstatesinwhichyouhavemorethanonefriend. Lookingat
thefirstqueryinFigure5.3,youcanseeexactlywhichstateshavemorethanonefriend. HAVING
allowsyoutotestthecountcolumn,asshowninFigure5.5. AggregatescannotbeusedinaWHERE
clause;theyarevalidonlyinsideHAVING.
5.4 Query Tips
In Figures 5.3 and 5.5, the queries are spread over several lines. When a query has several
clauses, such as FROM, WHERE, and GROUP BY, it is best to place each clause on a separate
52 CHAPTER5. SQLAGGREGATES
test=> CREATE TABLE aggtest (col INTEGER);
CREATE
test=> INSERT INTO aggtest VALUES (NULL);
INSERT 19759 1
test=> SELECT SUM(col) FROM aggtest;
sum
-----
(1 row)
test=> SELECT MAX(col) FROM aggtest;
max
-----
(1 row)
test=> SELECT COUNT(*) FROM aggtest;
count
-------
1
(1 row)
test=> SELECT COUNT(col) FROM aggtest;
count
-------
0
(1 row)
test=> INSERT INTO aggtest VALUES (3);
INSERT 19760 1
test=> SELECT AVG(col) FROM aggtest;
avg
-----
3
(1 row)
test=> SELECT COUNT(*) FROM aggtest;
count
-------
2
(1 row)
test=> SELECT COUNT(col) FROM aggtest;
count
-------
1
(1 row)
Figure5.2: AggregatesandNULLvalues
5.4. QUERYTIPS 53
test=> SELECT state, COUNT(*)
test-> FROM friend
test-> GROUP BY state;
state | count
-------+-------
MA | 2
MD | 1
NJ | 2
PA | 1
(4 rows)
test=> SELECT state, MIN(age), MAX(age), AVG(age)
test-> FROM friend
test-> GROUP BY state
test-> ORDER BY 4 DESC;
state | min | max | avg
-------+-----+-----+-----
MA | 24 | 33 | 28
MD | 27 | 27 | 27
NJ | 19 | 25 | 22
PA | 22 | 22 | 22
(4 rows)
Figure5.3: AggregatewithGROUPBY
54 CHAPTER5. SQLAGGREGATES
test=> SELECT city, state, COUNT(*)
test-> FROM friend
test-> GROUP BY state, city
test-> ORDER BY 1, 2;
city | state | count
-----------------+-------+-------
Boston | MA | 1
Cedar Creek | MD | 1
Ocean City | NJ | 2
Plymouth | MA | 1
Williamsport | PA | 1
(5 rows)
Figure5.4: GROUPBYwithtwocolumns
test=> SELECT state, COUNT(*)
test-> FROM friend
test-> GROUP BY state
test-> HAVING COUNT(*) > 1
test-> ORDER BY state;
state | count
-------+-------
MA | 2
NJ | 2
(2 rows)
Figure5.5: HAVING
5.5. SUMMARY 55
line. This convention makes queries easier to understand. Clear queries also use appropriate
capitalization.
In a test database,mistakesdo not createa problem. In aliveproduction database,however,
oneincorrectquerycancausegreatdifficulty. It takesfivesecondsto issueanerroneousquery,
and sometimes five days to recover from it. Double-check your queries before executing them.
ThisconsiderationisespeciallyimportantforUPDATE,DELETE,andINSERTqueries,becausethey
modify the database. Also, before performing an UPDATE or DELETE, do a SELECT or SELECT
COUNT(*)withthe sameWHEREclause. MakesuretheSELECTresultis reasonablebefore doing
theUPDATEorDELETE.
5.5 Summary
Sometimesuserswantlessoutputratherthanmore. Theywantatotal,count,average,maximum,
orminimumvalueforacolumn. Aggregatesmakethiscalculationpossible. Theyaggregatedata
intofewerrowsandthensendtheresulttotheuser.
Chapter 6
Joining Tables
This chapter discusses how to store data using multiple tables. Both multitable storage and
multitablequeriesarefundamentaltorelationaldatabases.
We start this chapter by examining table and column references, which are important in
multitable queries. Then, we cover the advantages of splitting data into multiple tables. Next,
we introduce an example based on a mail-order company, showing table creation, insertion, and
queriesusingjoins. Finally,weexploreavarietyofjointypes.
6.1 Table and Column References
Before dealingwith joins, we must mention one important feature. Up to this point, all queries
haveinvolveda singletable. When a queryinvolvesmultipletables, column namescan become
confusing. Unless you are familiar with each table, it is difficult to know which column names
belongtowhichtables. Sometimestwotablesmayusethesamecolumnname. Forthesereasons,
SQLallowsyoutofullyqualifycolumnnamesbyprecedingthecolumnnamewiththetablename.
Figure6.1showsanexampleoftablenameprefixing. Inthefigure,thefirstqueryhasunqualified
column names. The second query is the same, but with fully qualifiedcolumn names. A period
separatesthetablenamefromthecolumnname.
ThefinalqueryinFigure6.1showsanotherfeature. Insteadofspecifyingthetablename,you
cancreateatablealiastotaketheplaceofthetablenameinthequery. Thealiasnamefollowsthe
table name in the FROM clause. In this example, f is used as an alias for the friend table. While
thesefeaturesarenotimportantinsingletablequeries,theyareusefulinmultitablequeries.
6.2 Joined Tables
In our friend example, splitting data into multiple tables makes little sense. However, in cases
wherewemustrecordinformationaboutavarietyofthings,multipletableshavebenefits. Consider
57
58 CHAPTER6. JOININGTABLES
test=> SELECT firstname FROM friend WHERE state = ’PA’;
firstname
-----------------
Victor
(1 row)
test=> SELECT friend.firstname FROM friend WHERE friend.state = ’PA’;
firstname
-----------------
Victor
(1 row)
test=> SELECT f.firstname FROM friend f WHERE f.state = ’PA’;
firstname
-----------------
Victor
(1 row)
Figure6.1: Qualifiedcolumnnames
6.2. JOINEDTABLES 59
Customer Employee Part
Salesorder
Figure6.2: Joiningtables
acompanythatsellspartstocustomersthroughthemail. Itsdatabasehastorecordinformation
aboutmanythings: customers,employees,salesorders,andparts. Itisobviousthatasingletable
cannot hold these different types of information in an organized manner. Therefore, we create
fourtables: customer,employee,salesorder,andpart. Unfortunately,puttinginformationindifferent
tablesalso causesproblems. How do we record which salesordersbelong to which customers?
How do we record the parts for the sales orders? How do we record which employee received
thesalesorder? Thesolutionistoassignuniquenumberstoeverycustomer,employee,andpart.
Whenwewanttorecordthecustomerinthesalesordertable,forexample,weputthecustomer’s
numberinthesalesordertable. Whenwewanttorecordwhichemployeetooktheorder,weputthe
employee’snumberinthesalesordertable. Whenwewanttorecordwhichparthasbeenordered,
weputthepartnumberinthesalesordertable.
Breakinguptheinformationintoseparatetablesallowsustokeepdetailedinformationabout
customers,employees,andparts. Italsoallowsustorefertothosespecificentriesasmanytimes
asneededby usinga unique number. Figure 6.2 illustratesthe joining of the separatetableswe
willuse.
People might question the choice of using separate tables. While not necessary, it is often
useful. Without a separate customer table, every piece of information about a customer would
haveto be stored in thesalesordertable everytimea salesorderrow wasadded. Thecustomer’s
name,telephonenumber,address,andotherinformationwouldhavetoberepeated. Anychange
in customer information, such as a change in telephone number, would have to be performed in
allplacesin which that information isstored. With a customer table, theinformation isstored in
one place, and each salesorder points to the customer table. This approach is more efficient, and
itallowsforeasieradministrationanddatamaintenance. Theadvantagesofusingmultipletables
includethefollowing:
60 CHAPTER6. JOININGTABLES
• Easierdatamodification
• Easierdatalookup
• Datastoredinonlyoneplace
• Lessstoragespacerequired
Theonlytime duplicatedatashouldnotbe movedtoaseparatetableiswhenallofthefollowing
conditionsarepresent:
• Thetimerequiredtoperformajoinisprohibitive.
• Datalookupisunnecessary.
• Duplicatedatarequirelittlestoragespace.
• Dataareveryunlikelytochange.
The customer, employee, part, and salesorder example clearly benefits from multiple tables. The
processofdistributingdataacrossmultipletablestopreventredundancyiscalleddatanormaliza-
tion.
6.3 Creating Joined Tables
Figure 6.3 shows the SQL statements needed to create the tables in our mail-order example.1
The customer, employee, and part tables all have a column to hold their unique identification
numbers. The salesorder2 table includes columns to hold the customer, employee, and part
numbers associatedwitha particularsalesorder. For the sakeof simplicity,we willassumethat
eachsalesorderentrycontainsonlyonepartnumber.
Wehaveusedunderscore(_)toallowtheuseofmultiplewordsincolumnnames—forexample,
customer_id. This is a common practice. You could enter the column as CustomerId, but POST-
GRESQL converts all identifiers, such as column and table names, to lowercase; thus the actual
columnnamebecomescustomerid, whichisnotveryclear. Theonlywaytodefinenonlowercase
column and table names is to use double quotes. Double quotes preserveany capitalizationyou
supply. Youcanevenhavespacesintableandcolumnnamesifyousurroundthenamewithdouble
quotes (")—for example, "customer id". If you decide to use this feature, you must put double
quotes aroundthetableorcolumnnameeverytimeitisreferenced. Obviously,thispracticecan
becumbersome.
1Intherealworld,thenamecolumnswouldbemuchlonger,perhapsCHAR(60)orCHAR(180). Youshouldbasethelengthon
thelongestnameyoumayeverwishtostore.Shortnamesareusedheresotheydisplayproperlyintheexamples.
2Atablecannotbecalledorder. Thewordorderisareservedkeyword,foruseintheORDERBYclause. Reservedkeywords
arenotavailableastableorcolumnnames.
6.3. CREATINGJOINEDTABLES 61
test=> CREATE TABLE customer (
test(> customer_id INTEGER,
test(> name CHAR(30),
test(> telephone CHAR(20),
test(> street CHAR(40),
test(> city CHAR(25),
test(> state CHAR(2),
test(> zipcode CHAR(10),
test(> country CHAR(20)
test(> );
CREATE
test=> CREATE TABLE employee (
test(> employee_id INTEGER,
test(> name CHAR(30),
test(> hire_date DATE
test(> );
CREATE
test=> CREATE TABLE part (
test(> part_id INTEGER,
test(> name CHAR(30),
test(> cost NUMERIC(8,2),