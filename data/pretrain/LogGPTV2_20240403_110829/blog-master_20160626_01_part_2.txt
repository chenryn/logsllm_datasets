### 如何编译C FUNC、创建SQL FUNC    
![screenshot](https://oss-cn-hangzhou.aliyuncs.com/yqfiles/9c037ad54009ee018e70effd530e44bebe43d723.png)  
C函数是扩展中最基本的用法，必须掌握。  
聚合、窗口、数据类型、操作符、索引，FDW等，都是围绕或者直接基于C FUNC的。  
后面你就会理解了，特别是看了语法后，会有更深刻的理解。  
### 聚合函数原理    
希望理解好迭代函数，迭代函数的输入参数，初始迭代值，迭代中间结果，以及终结函数，和终结类型。  
![screenshot](https://oss-cn-hangzhou.aliyuncs.com/yqfiles/9b90f50aa64da5abbec34193ffbce0df99d5f972.png)  
### 自定义聚合函数    
![screenshot](https://oss-cn-hangzhou.aliyuncs.com/yqfiles/385e2573911580194f83bbadf26f6318c90e7cb0.png)  
### 自定义窗口函数    
![screenshot](https://oss-cn-hangzhou.aliyuncs.com/yqfiles/43d728cf0591d27425bc784e5ba2eded45cb8937.png)  
### 自定义数据类型  
数据类型最基本的是输入和输出函数，分别将SQL的text输入转换成C的输入，将C的输出转换成SQL的text。  
文本是需要依赖字符编码的，所以PG还支持基于二进制的输入和输出函数，通常可以用来实现数据的逻辑复制，而不需要关心编码的转换问题，所见即所得。  
![screenshot](https://oss-cn-hangzhou.aliyuncs.com/yqfiles/4080f8184c70032d0d9f670f12a9ee3ad9fc253a.png)  
![screenshot](https://oss-cn-hangzhou.aliyuncs.com/yqfiles/9f5134fc29df406d602f1cc0d97cb1394594ce4d.png)  
![screenshot](https://oss-cn-hangzhou.aliyuncs.com/yqfiles/82247dee4bfd9c5b34a68ab3c2c9642f40ec5c0f.png)  
### 自定义操作符  
操作符其实也是函数的抽象，包括操作符的元，操作符的操作数的类型，以及操作符的等价操作符以及反转操作符的定义（被query rewrite用来重写SQL，以适用更多的执行计划选择）  
例如: a<>1 等价于 not (a=1)，这样的，都是可以互换的。   
与操作符相关的，还有优化器相关的OPTION以及JOIN的选择性因子。  
![screenshot](https://oss-cn-hangzhou.aliyuncs.com/yqfiles/b3b1c3c33ffc0d44fb45725d8149fb5ab1967b1b.png)  
![screenshot](https://oss-cn-hangzhou.aliyuncs.com/yqfiles/5f9679045996b43b2b45ba71b5025eb904b0317b.png)  
![screenshot](https://oss-cn-hangzhou.aliyuncs.com/yqfiles/0a160c4829139f3369241b7b5c4f038b12da6ce3.png)  
![screenshot](https://oss-cn-hangzhou.aliyuncs.com/yqfiles/55c99eaa36a53352651d3b393218e68b40ff4e0f.png)  
![screenshot](https://oss-cn-hangzhou.aliyuncs.com/yqfiles/e0e6bb51f56999fbbd2ec246f98c04b916e16a4d.png)  
![screenshot](https://oss-cn-hangzhou.aliyuncs.com/yqfiles/df09b979ca6c7e91937d7fa5f0faedb0d12a6b95.png)  
### 自定义操作符例子  
![screenshot](https://oss-cn-hangzhou.aliyuncs.com/yqfiles/5929e5a231283281a9c67204e516c0125092c18b.png)  
![screenshot](https://oss-cn-hangzhou.aliyuncs.com/yqfiles/e240993dd2f715adb4a6a397dbec6738e445f72c.png)  
### 自定义索引语法  
自定义索引也非常简单，需要实现索引方法中必须的support函数，同时将操作符添加到索引的op class即可。  
这些OP就可以用这个索引。  
![screenshot](https://oss-cn-hangzhou.aliyuncs.com/yqfiles/dfc75958f8ce46c8b115dbb9c41c86220d4df429.png)  
### GIN索引接口介绍  
![screenshot](https://oss-cn-hangzhou.aliyuncs.com/yqfiles/ec89621b2a5d0d7467756db3f71ab216249a75d7.png)  
![screenshot](https://oss-cn-hangzhou.aliyuncs.com/yqfiles/42d2cc330240a564f1728eec5d38e0abb68f41f4.png)  
### GiST索引接口介绍  
![screenshot](https://oss-cn-hangzhou.aliyuncs.com/yqfiles/1dd674225d67735d3cf25826cb249c13547606a0.png)  
![screenshot](https://oss-cn-hangzhou.aliyuncs.com/yqfiles/64ad5ee59eaf53213925b8be1ed5672db9245a06.png)  
### SP-GiST 索引接口介绍  
![screenshot](https://oss-cn-hangzhou.aliyuncs.com/yqfiles/e20f96f091d3f1063428c25970ecf66d5ad5a546.png)  
![screenshot](https://oss-cn-hangzhou.aliyuncs.com/yqfiles/383e0c532f03d19208343e2d7f4d537c0ff36ca2.png)  
### BRIN, BTREE, hash索引接口介绍  
gin,gist,sp-gist,brin索引接口的strategy是不固定的，用户可以自行根据索引功能的形态增加。  
btree和hash索引接口的strategy是固定的。  
![screenshot](https://oss-cn-hangzhou.aliyuncs.com/yqfiles/5c30794d7e09fedf0c43326123bee0626b10b865.png)  
![screenshot](https://oss-cn-hangzhou.aliyuncs.com/yqfiles/9a9c4c322056152f0175821b7743fbcf2b8dde6a.png)  
### 自定义GIN索引例子  
取自contrib  
![screenshot](https://oss-cn-hangzhou.aliyuncs.com/yqfiles/ab2e93b396890ac04a32799af959aee88cb89480.png)  
![screenshot](https://oss-cn-hangzhou.aliyuncs.com/yqfiles/ab3e1ea9b877410f6a1f78d49bb5b4819fac34f0.png)  
![screenshot](https://oss-cn-hangzhou.aliyuncs.com/yqfiles/8a13dbee6ad98e2a57559d97bb2220c8621b032d.png)  
![screenshot](https://oss-cn-hangzhou.aliyuncs.com/yqfiles/477869b1d52b869fc40c7757c28cab6368870eb4.png)  
![screenshot](https://oss-cn-hangzhou.aliyuncs.com/yqfiles/87818269ac95b65349fa331b20f090ef35752fd2.png)  
![screenshot](https://oss-cn-hangzhou.aliyuncs.com/yqfiles/228b3df6e6965b9342b8f50766ff031b80740bbb.png)  
### PostgreSQL 内核扩展接口总结  
![screenshot](https://oss-cn-hangzhou.aliyuncs.com/yqfiles/7a5b5e7bbb4ec76b31d644fe95963df96865ab09.png)  
### 如何打包与发布PostgreSQL 插件  
![screenshot](https://oss-cn-hangzhou.aliyuncs.com/yqfiles/49b940f682424822b922591776bdf51ceb2299d7.png)  
![screenshot](https://oss-cn-hangzhou.aliyuncs.com/yqfiles/5e289d901440d3c5343adbe5a119a8b5020e37cf.png)  
![screenshot](https://oss-cn-hangzhou.aliyuncs.com/yqfiles/c7b9e2a4bce21825ed598f5cadd83ed3306ac293.png)  
### GPU、FPGA如何与PostgreSQL深度整合  
![screenshot](https://oss-cn-hangzhou.aliyuncs.com/yqfiles/859c82214e94c5a6d87096c7d85f686e180afde2.png)  
### PG-Strom介绍  
![screenshot](https://oss-cn-hangzhou.aliyuncs.com/yqfiles/ba68acfd235812374e44f698a20b9475c50fd3de.png)  
### PG-Strom原理介绍  
pg-strom利用了planner的hook，在生成执行计划时，使用自定义的执行计划生成器，打造属于自己的执行计划。  
同时通过custom scan provider，用户可以使用GPU计算单元使用DMA的方式直接访问块设备，绕过了buffer cache，提升访问吞吐率。  
同时自定义计算节点，包括JOIN，排序，分组，计算等，都可以交给GPU来处理。  
这样就实现了GPU加速的目的。   
![screenshot](https://oss-cn-hangzhou.aliyuncs.com/yqfiles/8ef4ee1974172e8c0ca79e6cc8ab71385f9bd0e3.png)  
![screenshot](https://oss-cn-hangzhou.aliyuncs.com/yqfiles/bc69f41fa45051d866e60d0699df24e723c7633c.png)  
![screenshot](https://oss-cn-hangzhou.aliyuncs.com/yqfiles/7c7ddc826f35d590b6a26c60d004b23c95b77256.png)  
![screenshot](https://oss-cn-hangzhou.aliyuncs.com/yqfiles/6473924f21c719687eaa4e3eed7192b0e39aca04.png)  
![screenshot](https://oss-cn-hangzhou.aliyuncs.com/yqfiles/5d468ccda2d3020f176d976eae41993bf9a937b5.png)  
![screenshot](https://oss-cn-hangzhou.aliyuncs.com/yqfiles/a43d8f300237e3799779b0d945ec2d0997471fff.png)  
![screenshot](https://oss-cn-hangzhou.aliyuncs.com/yqfiles/bd343fbf7545a79787f2463d4dfe9f0442c1bff6.png)
### GPU加速方向    
BULK数据计算。  
例如  
动态路径规划。  
基于BIT运算的人物、人群、企业、小区、城市画像等。  
大量数据的文本分析和学习。  
### 动态路径规划    
![screenshot](https://oss-cn-hangzhou.aliyuncs.com/yqfiles/187cb3ff2405dbd651b4e56e9586ee68d992d52f.png)  
### bit逻辑运算  
![screenshot](https://oss-cn-hangzhou.aliyuncs.com/yqfiles/85a6f7cd9c18f783c75dde594f44f338fde6dbaf.png)  
![screenshot](https://oss-cn-hangzhou.aliyuncs.com/yqfiles/a9f58e2f5bf11e6aeed35a32ebf94bc1b29d5160.png)  
### PostGIS点面判断  
(笔误，这可能不是gpu的强项，GPU的强项是BULK计算，对延迟没要求，但是对处理能力有要求的场景。)  
(点面判断属于OLTP的场景，不需要用到GPU)  
![screenshot](https://oss-cn-hangzhou.aliyuncs.com/yqfiles/28bf7013fdd26b1f326cd5ed33585ee45a84306e.png)  
![screenshot](https://oss-cn-hangzhou.aliyuncs.com/yqfiles/206990e6b126da6189651393ab7c5056d1d34fca.png)  
![screenshot](https://oss-cn-hangzhou.aliyuncs.com/yqfiles/cdaa1f733f9766935880910d57eb95b0d9e184bb.png)  
### 除了GPU加速，其实LLVM也是BULK计算的加速方式之一，而且性能非常的棒。    
Deepgreen, VitesseDB, Redshift都在使用LLVM技术，加速BULK 计算的场景。   
### 参考资料    
![screenshot](https://oss-cn-hangzhou.aliyuncs.com/yqfiles/9318f86768edc73efa58b6103f491a262d86aff0.png)  