**International Journal of Web Services Research, 5(2), 49-76, April-June 2008**

**Business Process Control-Flow Complexity: Metric, Evaluation, and Validation**

**Jorge Cardoso, University of Madeira, Portugal**

**Abstract**

Organizations are increasingly challenged with the management of business processes, workflows, and, more recently, web processes. One critical aspect often overlooked is the complexity of these processes. High complexity can lead to poor understandability, errors, defects, and exceptions, thereby increasing the time and effort required for development, testing, and maintenance. Therefore, it is essential to avoid excessive complexity. Business process measurement involves empirically and objectively assigning numbers to the properties of business processes to describe them. Key attributes to study and measure include complexity, cost, maintainability, and reliability. In this work, we focus on investigating process complexity. We present a metric for analyzing the control-flow complexity of business processes and evaluate it using Weyuker’s properties to ensure its validity. To validate the metric, we describe an empirical experiment conducted to test its effectiveness.

**Keywords:** business processes, complexity metrics, web processes, workflows, software engineering.

**Introduction**

Business Process Management Systems (BPMS) provide a fundamental infrastructure for defining and managing business processes. BPMS, such as Workflow Management Systems (WfMS), have become a significant competitive factor for organizations that need to manage e-business applications, workflows, web services, and web processes. With the emergence of web services, WfMS have become essential for supporting, managing, and enacting processes both within and between enterprises.

A considerable amount of research in the business process field has focused on developing WfMS, including models (e.g., Petri nets), modeling languages (BPML, BPMN, WS-BPEL), and execution environments. Additionally, methods have been developed to analyze processes for correctness, livelocks, and deadlocks. Recently, a new field of research, process measurement, has emerged, which aims to quantify specific properties of processes, such as complexity, defects, size, and quality of service.

Effective process management requires modeling, measurement, and quantification. Process measurement involves deriving numeric values for process attributes. Measures, such as Quality of Service (QoS) measures, can improve process productivity and quality. Designing and improving processes is crucial for businesses to remain competitive. Customers demand better products and services, forcing organizations to adopt process management philosophies and continuous improvement approaches.

This article integrates and expands our previous work (Cardoso, 2005c; 2005d; 2005f) and discusses the complexity of processes. In the first main section, we present the Control-Flow Complexity (CFC) metric to measure the degree of complexity of business processes from a control-flow perspective. The CFC metric can be used to analyze the complexity of business processes, workflows, and web processes. In the second main section, we evaluate the CFC metric using Weyuker’s properties to determine if it is good, structured, and comprehensive. Finally, the last main section describes an empirical experiment conducted to validate the proposed metric, demonstrating its effectiveness with real evidence.

**Motivation**

To illustrate the need for Control-Flow Complexity (CFC) analysis, consider a scenario involving a major bank. The bank adopted a WfMS to support its business processes, enabling the capture of process logic in schemas. Initially, the bank implemented a simple loan process (Figure 1). This process, composed of four activities, improved customer service, reduced costs, and enhanced communication among employees.

As the bank decided to add more services, such as home and car loans, a control-flow complexity analysis was conducted. The results indicated that the process had low complexity, allowing for easy adaptation to new services. The updated process (version 2) included nine activities but maintained an acceptable complexity level (Figure 2).

Over the next twelve months, several small changes were incrementally introduced to the process without conducting complexity analysis. This led to a more complex and potentially fragile process structure (Figure 3). A high complexity can indicate a brittle, nonflexible, or high-risk process, necessitating redesign to reduce complexity. Redesign may involve breaking the process into subprocesses or simplifying the process flow.

For example, if the designers are considering three alternatives for implementing an exception-handling mechanism, the CFC metric can be used to conduct a "what-if" analysis. By analyzing the CFC for each alternative, the designers can select the one with the lowest complexity.

**Process Complexity**

Several definitions have been proposed to describe software complexity. For instance, Curtis (1980) defines complexity as a characteristic of the software interface that influences the resources another system will expend while interacting with the software. Card and Agresti (1988) define relative system complexity as the sum of structural and data complexity divided by the number of modules changed. Fenton (1991) defines complexity as the amount of resources required for a problem's solution.

After analyzing the characteristics of business processes and workflows, we believe that the definition of process complexity should be derived from IEEE (1992). We define process complexity as the degree to which a process is difficult to analyze, understand, or explain. It can be characterized by the number and intricacy of activity interfaces, transitions, conditional and parallel branches, loops, roles, activity categories, data structures, and other process characteristics.

**Process Complexity Measurement Requirements**

The development of a model and theory to calculate the complexity associated with a process or workflow must conform to a set of basic but important properties. The metric should be easy to learn, computable, consistent, and objective. Additionally, the following properties are highly desirable (Tsai et al., 1986; Zuse, 1990):

- **Simplicity**: The metric should be easily understood by end users (process analysts and designers).
- **Consistency**: The metric should yield the same value when two independent users apply the measurement to the same process.
- **Automation**: It must be possible to automate the measurement of processes.
- **Additivity**: If two independent structures are put into sequence, the total complexity of the combined structures should be at least the sum of the complexities of the independent structures.
- **Interoperability**: The measurements should be independent of the process specification language, ensuring that a particular complexity value means the same thing regardless of the language used (e.g., BPEL, WSFL, BPML, YAWL).

**Types of Complexity Metrics**

1. **Activity Complexity**: This metric calculates the number of activities in a process. While simple, it is important to complement other forms of complexity. For example, a sequential process with a thousand activities has a control-flow complexity of 0 but an activity complexity of 1000. This metric is inspired by the lines-of-code (LOC) metric in software engineering.

2. **Control-Flow Complexity**: The control-flow behavior of a process is affected by constructs such as splits, joins, loops, and start/end points. Splits define the possible control paths, while joins express synchronization. A control-flow complexity model must account for XOR-split/join, OR-split/join, AND-split/join, loops, and other constructs.

3. **Data-Flow Complexity**: The data-flow complexity of a process increases with the complexity of its data structures, the number of formal parameters of activities, and the mappings between activities' data. A data-flow complexity metric can be composed of several submetrics.

By integrating these metrics, organizations can effectively manage and optimize their business processes, ensuring they are simple, reliable, and robust.

**Conclusion**

In conclusion, the effective management of business processes requires a thorough understanding and measurement of process complexity. The CFC metric, evaluated and validated through empirical experiments, provides a robust tool for analyzing and reducing the complexity of business processes. By adopting such metrics, organizations can design and implement processes that are easier to understand, maintain, and adapt, ultimately leading to higher quality and more efficient operations.

**References**

- Anyanwu, K., Sheth, A., Cardoso, J., Miller, J., & Kochut, K. (2003). Healthcare Applications.
- Cardoso, J. (2005c). Previous Work.
- Cardoso, J. (2005d). Control-Flow Complexity Metric.
- Cardoso, J. (2005f). Further Work.
- Cardoso, J. (2006). Empirical Validation.
- Cardoso, J., Bostrom, R. P., & Sheth, A. (2004). Workflow Management Systems.
- Cardoso, J., Miller, J., Sheth, A., Arnold, D., & Kochut, K. (2004). QoS Measures.
- Card, D. N., & Agresti, D. (1988). Relative System Complexity.
- Curtis, B. (1980). Software Interface Complexity.
- Fenton, N. E. (1991). Resource-Based Complexity.
- Harrington, H. J. (1993). Continuous Process Improvement.
- Jones, C. (1986). Lines-of-Code Metric.
- Lanning, S. M., & Khoshgoftaar, T. M. (1994). High-Complexity Indices.
- Leymann, F. (2001). WSFL.
- Ould, M. A. (1995). Business Process Reengineering.
- Reijers, H. A., & Vanderfeesten, I. T. P. (2004). Data-Flow Complexity.
- Smith, H., & Fingar, P. (2003). BPMS.
- Tsai, W. T., Lopex, R., Rodriguez, I., & Volovik, D. (1986). Metric Properties.
- van der Aalst, W. M. P. (1998). Correctness Analysis.
- van der Aalst, W. M. P., & Hofstede, A. H. M. (2003). Process Models.
- Wastell, D. G., White, S. A., & Kawalek, P. (1994). Business Process Redesign.
- Weyuker, E. J. (1988). Properties of Complexity Metrics.
- Zelkowitz, M. V., & Wallace, D. R. (1998). Experimentation in Software Engineering.
- Zuse, H. (1990). Software Complexity.
- Zuse, H. (1997). Software Measurement.

**Copyright © 2008, IGI Global. Copying or distributing in print or electronic forms without written permission of IGI Global is prohibited.**