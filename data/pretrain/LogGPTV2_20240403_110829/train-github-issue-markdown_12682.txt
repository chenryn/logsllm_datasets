  * I have searched the issues of this repository and believe that this is not a duplicate.
  * I have checked the FAQ of this repository and believe that this is not a duplicate.
### Environment
  * Dubbo version: 2.5.3
  * Operating System version: CentOS Linux release 7.6.1810
  * Java version: 1.8
  * zkclient version is 0.1
  * zk version is 3.4.6
### Steps to reproduce this issue
  1. 在一次流量突增时，dubbo的用户线程池被打满
    [2020-11-19 10:12:56.558 WARN ] [New I/O worker #12] (AbortPolicyWithReport:52) [DUBBO] Thread pool is EXHAUSTED! Thread Name: DubboServerHandler-127.0.0.1:28080, Pool Size: 500 (active: 500, core: 0, max: 500, largest: 500), Task: 161962029 (completed: 161961529), Executor status:(isShutdown:false, isTerminated:false, isTerminating:false), in dubbo://127.0.0.1:28080!, dubbo version: 2.5.3
随后Tomcat中发现有大量的 timedwaiting 状态的线程
![image](https://user-
images.githubusercontent.com/13230226/99629455-fc273b80-2a72-11eb-85c7-89f52e8f419e.png)
  2. 在查看jstack后，有几千个名为 DubboRegistryFailedRetryTimer-thread-1 的线程，这个重连线程理论上应该只有一个，在启动注册中心时创建，但实际上被创建了几千个
    "DubboRegistryFailedRetryTimer-thread-1" #1231399 daemon prio=5 os_prio=0 tid=0x0000000001ddf000 nid=0x339f waiting on condition [0x00007f4ef5786000]
       java.lang.Thread.State: TIMED_WAITING (parking)
    	at sun.misc.Unsafe.park(Native Method)
    	- parking to wait for   (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)
    	at java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:215)
    	at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(AbstractQueuedSynchronizer.java:2078)
    	at java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:1093)
    	at java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:809)
    	at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1074)
    	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1134)
    	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
    	at java.lang.Thread.run(Thread.java:748)
       Locked ownable synchronizers:
    	- None
    "DubboRegistryFailedRetryTimer-thread-1" #1231397 daemon prio=5 os_prio=0 tid=0x0000000001ddd000 nid=0x339d waiting on condition [0x00007f4ef5887000]
       java.lang.Thread.State: TIMED_WAITING (parking)
    	at sun.misc.Unsafe.park(Native Method)
    	- parking to wait for   (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)
    	at java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:215)
    	at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(AbstractQueuedSynchronizer.java:2078)
    	at java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:1093)
    	at java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:809)
    	at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1074)
    	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1134)
    	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
    	at java.lang.Thread.run(Thread.java:748)
       Locked ownable synchronizers:
    	- None
    "DubboRegistryFailedRetryTimer-thread-1" #1231395 daemon prio=5 os_prio=0 tid=0x0000000001ddb000 nid=0x339b waiting on condition [0x00007f4ef5988000]
       java.lang.Thread.State: TIMED_WAITING (parking)
    	at sun.misc.Unsafe.park(Native Method)
    	- parking to wait for   (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)
    	at java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:215)
    	at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(AbstractQueuedSynchronizer.java:2078)
    	at java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:1093)
    	at java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:809)
    	at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1074)
    	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1134)
    	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
    	at java.lang.Thread.run(Thread.java:748)
       Locked ownable synchronizers:
    	- None
    "DubboRegistryFailedRetryTimer-thread-1" #1231393 daemon prio=5 os_prio=0 tid=0x0000000001dd9000 nid=0x3399 waiting on condition [0x00007f4ef5a89000]
       java.lang.Thread.State: TIMED_WAITING (parking)
    	at sun.misc.Unsafe.park(Native Method)
    	- parking to wait for   (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)
    	at java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:215)
    	at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(AbstractQueuedSynchronizer.java:2078)
    	at java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:1093)
    	at java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:809)
    	at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1074)
    	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1134)
    	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
    	at java.lang.Thread.run(Thread.java:748)
       Locked ownable synchronizers:
    	- None
    "DubboRegistryFailedRetryTimer-thread-1" #1231391 daemon prio=5 os_prio=0 tid=0x0000000001dd7000 nid=0x3397 waiting on condition [0x00007f4ef5b8a000]
       java.lang.Thread.State: TIMED_WAITING (parking)
    	at sun.misc.Unsafe.park(Native Method)
    	- parking to wait for   (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)
    	at java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:215)
    	at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(AbstractQueuedSynchronizer.java:2078)
    	at java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:1093)
    	at java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:809)
    	at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1074)
    	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1134)
    	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
    	at java.lang.Thread.run(Thread.java:748)
       Locked ownable synchronizers:
    	- None
    "DubboRegistryFailedRetryTimer-thread-1" #1231389 daemon prio=5 os_prio=0 tid=0x0000000001dd5000 nid=0x3395 waiting on condition [0x00007f4ef5c8b000]
       java.lang.Thread.State: TIMED_WAITING (parking)
    	at sun.misc.Unsafe.park(Native Method)
    	- parking to wait for   (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)
    	at java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:215)
    	at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(AbstractQueuedSynchronizer.java:2078)
    	at java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:1093)
    	at java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:809)
    	at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1074)
    	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1134)
    	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
    	at java.lang.Thread.run(Thread.java:748)
       Locked ownable synchronizers:
    	- None
    "DubboRegistryFailedRetryTimer-thread-1" #1231387 daemon prio=5 os_prio=0 tid=0x0000000001dd3000 nid=0x3393 waiting on condition [0x00007f4ef5d8c000]
       java.lang.Thread.State: TIMED_WAITING (parking)
    	at sun.misc.Unsafe.park(Native Method)
    	- parking to wait for   (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)
    	at java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:215)
    	at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(AbstractQueuedSynchronizer.java:2078)
    	at java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:1093)
    	at java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:809)
    	at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1074)
    	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1134)
    	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
    	at java.lang.Thread.run(Thread.java:748)
  3. 而且日志有大量重新加载本地缓存文件的输出
    (AbstractRegistry:232) [DUBBO] Load registry store file xxx.properties
  4. 我们用的注册中心是zk， 因此我怀疑 com.alibaba.dubbo.registry.zookeeper.ZookeeperRegistry 对象在某个情况下被创建了多次，每次创建时都会启动 com.alibaba.dubbo.registry.support.FailbackRegistry 中的 retryExecutor 线程池
    private final ScheduledExecutorService retryExecutor = Executors.newScheduledThreadPool(1, new NamedThreadFactory("DubboRegistryFailedRetryTimer", true));
    public FailbackRegistry(URL url) {
            super(url);
            int retryPeriod = url.getParameter(Constants.REGISTRY_RETRY_PERIOD_KEY, Constants.DEFAULT_REGISTRY_RETRY_PERIOD);
            this.retryFuture = retryExecutor.scheduleWithFixedDelay(new Runnable() {
                public void run() {
                    // 检测并连接注册中心
                    try {
                        retry();
                    } catch (Throwable t) { // 防御性容错
                        logger.error("Unexpected error occur at failed retry, cause: " + t.getMessage(), t);
                    }
                }
            }, retryPeriod, retryPeriod, TimeUnit.MILLISECONDS);
        }
  5. 并且 com.alibaba.dubbo.registry.support.AbstractRegistry 类会重新 loadProperties， **所以有大量的Load registry 日志输出**
> (AbstractRegistry:232) [DUBBO] Load registry store file xxx.properties log
> output
    public AbstractRegistry(URL url) {
            setUrl(url);
            // 启动文件保存定时器
            syncSaveFile = url.getParameter(Constants.REGISTRY_FILESAVE_SYNC_KEY, false);
            String filename = url.getParameter(Constants.FILE_KEY, System.getProperty("user.home") + "/.dubbo/dubbo-registry-" + url.getHost() + ".cache");
            File file = null;
            if (ConfigUtils.isNotEmpty(filename)) {
                file = new File(filename);
                if(! file.exists() && file.getParentFile() != null && ! file.getParentFile().exists()){
                    if(! file.getParentFile().mkdirs()){
                        throw new IllegalArgumentException("Invalid registry store file " + file + ", cause: Failed to create directory " + file.getParentFile() + "!");
                    }
                }
            }
            this.file = file;
            loadProperties();
            notify(url.getBackupUrls());
        }
    private void loadProperties() {
            if (file != null && file.exists()) {
                InputStream in = null;
                try {
                    in = new FileInputStream(file);
                    properties.load(in);
                    if (logger.isInfoEnabled()) {
                        logger.info("Load registry store file " + file + ", data: " + properties);
                    }
                } catch (Throwable e) {
                    logger.warn("Failed to load registry store file " + file, e);
                } finally {
                    if (in != null) {
                        try {
                            in.close();
                        } catch (IOException e) {
                            logger.warn(e.getMessage(), e);
                        }
                    }
                }
            }
        }
  6. 我翻阅了源码，从创建ZookeeperRegistry过程到zk断开后重连的recover机制后都没发现和复现这个问题。
### Expected Result
在com.alibaba.dubbo.registry.support.FailbackRegistry类中名为  
DubboRegistryFailedRetryTimer这个线程应该在单注册中心的情况下应该是单例的，只应该被创建一个
### Actual Result
在com.alibaba.dubbo.registry.support.FailbackRegistry类中名为  
DubboRegistryFailedRetryTimer的线程被创建了几千个，产生了大量的timewaited线程。