__text: 000000010099E1F8  CMN  W0, #1
…
__text: 000000010099E220  ADRP X2, #cfstr_ErrorInListenF@Page; “Error in listen() function”
__text: 000000010099E224  ADD X2, X2, #cfstr_ErrorInListenF@PageOFF; “Error in listen() function”
…
__text: 000000010099E314  RET
__text:00000001009F1FBC ; id __cdecl +[TJCacheProtocol cacheServer](TJCacheProtocol_meta *self, SEL)
__text:00000001009F1FC0 __TJCacheProtocol_cacheServer_ ; DATA XREF: __objc_const:0000000101566448 ↓ o
…
__text:00000001009F20F0 BL _objc_msgSend
__text:00000001009F20F4 MOV X24, X0
…
__text:00000001009F2118 ADRP X3, #cfstr_TapjoyCacheRea@PAGE ; "Tapjoy cache ready"
__text:00000001009F211C ADD X3, X3, #cfstr_TapjoyCacheRea@PAGEOFF ; "Tapjoy cache ready”
…
__text:00000001009F218C ; End of function +[TJCacheProtocol cacheServer]
Method
Figure 8: Overview of call stack analysis of Covet Fashion app. The subﬁgures on the left show the call stack and the extracted token for
analyzing, the arrows indicate the returned address of a routine (right subﬁgure).
signatures for system network service APIs and third-party
libraries (see the red box of Figure 4).
5.1 Signatures of System APIs
System network service APIs and corresponding signatures
are built on the call stack information recorded by our “addon”
in our dynamic analysis phase. Speciﬁcally, we navigate the
call stack to locate the system APIs and build hybrid signa-
tures for the APIs.
Identifying system APIs. The challenge for identifying sys-
tem network services is that there is no clear documentation
that details the effects of API calls. For example, the API
registerListener: of class object GKLocalPlayer spawns a
port to provide the network service, but the ofﬁcial documen-
tation does not mention the network service behind the API.
Therefore, we identify the system network service APIs by
leveraging the call stack information of the dynamically ana-
lyzed apps. Speciﬁcally, we travel the pointer in the call stack
from top to bottom until we ﬁnd the API the app code invoked.
As shown in the top-left box of Figure 8, we travel the call
stack from item 0 to 27, and stop traveling at item 1 as this
pointer points to app code. By checking the target API of
the app code invoked (top-right box of Figure 8), we get the
system API (i.e., _bind).
Building signatures for system APIs. The identiﬁed system
APIs, presented as signatures for network services, can be
used to determine whether the app is a potential network
service app. There are two strategies for representing these
APIs: (i) For network services provided by utilizing POSIX
and Core Foundation [25], the API (e.g., _bind in Table 3)
is directly called by app code. In this case, the code for invok-
ing APIs is directly assembled in the executable. By query-
ing for this code in metadata preserved in our database, we
know there is a network service in app or not. (ii) For the
Objective-C APIs provided by other system frameworks, de-
velopers have to pass a message to an object through message
dispatch interface (e.g., _objc_msgSend) to invoke the API.
In this circumstance, the ﬁrst and the second arguments of
the message dispatch interface represent the instance of a
class (e.g., _OBJC_CLASS_$_GKLocalPlayer in Table 3) and
a method (e.g., registerListener: in Table 3), respectively.
This class and method combination designates the real API
being invoked. Hence, for the APIs of Objective-C, class ob-
ject name in “Symbol Table” and the method name in “String
Table” are used as signatures (see column 2 of Table 3).
5.2 Signatures of Third-Party Libraries
Developers often use off-the-shelf third-party libraries to
provide network services rather than building a server from
scratch [27, 54]. There are many third-party network ser-
vice libraries that reside on GITHUB or other repositories to
help developers perform quick network service integration
for their apps. For example, iOS app developers may opt for
CocoaHTTPServer [7] to provide web services. In order to ﬁg-
ure out the real distributions of third-party libraries in iOS
apps and extend our ﬁndings of the vulnerable libraries to the
whole dataset, we ﬁrstly identify third-party network service
libraries and extract signatures for these libraries. Previous
work on Android third-party library identiﬁcation [27, 76] is
based on structurally organized code, (e.g., package), which
does not scale well to iOS third-party library identiﬁcation.
Because there is no structure information preserved in the
iOS executable, the developer’s code and the statically linked
third-party libraries are assembled into an executable binary
ﬁle with no clear boundary. To ﬁnd third-party libraries of
iOS apps, the proposed class name cluster method [67] ex-
pends enormous effort in building every library. But among
these libraries, there are storage libraries for processing data,
USENIX Association
29th USENIX Security Symposium    2423
Table 3: Signatures for system network service APIs and the network service distributions in iOS apps.
Library (a.k.a., Framework)
libSystem
libresolv
CoreFoundation
GameKit (1)
GameKit (2)
MultipeerConnectivity
Signatures
_bind
_res_9_nquery
_CFSocketSetAddress
_OBJC_CLASS_$_GKLocalPlayer
_OBJC_CLASS_$_MCSession
_OBJC_CLASS_$_GKMatchmaker
localPlayer
registerListener:
sharedMatchmaker
setInviteHandler:
Location
Symbol Table
Symbol Table
Symbol Table
Symbol Table
String Table
String Table
Symbol Table
String Table
String Table
Symbol Table
China (480)
353 (73.54%)
56 (11.67%)
112 (23.33%)
United States (820)
331 (40.37%)
1 (0%)
57 (6.95%)
1,300 apps
684 (52.62%)
57 (4.38%)
169 (13%)
168,951 apps
69,238 (40.98%)
1,481(0.88%)
11,965 (7.08%)
0 (0%)
10 (1.22%)
10 (0.77%)
2,673 (1.58%)
1 (0%)
12 (1.46%)
10 (2.08%)
3 (0.37%)
13 (1%)
13 (1%)
5,580 (3.3%)
604 (0.36%)
UI libraries for prettiﬁed views, etc. The third-party network
service library is a subset of the whole library repository.
To identify the third-party network service libraries, we
propose call stack similarity analysis, which is mainly used
for hunting similar bugs [39, 65], to identify these libraries.
Our call stack analysis is based on the runtime properties of a
program. After the third-party network service libraries are
identiﬁed, we use Information Gain [59] to select the most
prominent signatures for these libraries.
Identifying third-party libraries. The top-left box of Fig-
ure 8 shows that there are no rich information in the call
stack C. Consequently, we map the call stack to the executable
with the help of the ASLR value preserved in our dynamic
analysis phase. We collect the strings sii (e.g., “Error in listen()
function” in Figure 8) in each method (e.g., “sub_10099E130”
in Figure 8) that the pointers in the call stack point to in order
to build a token ti. All ti acquired are concatenated to generate
a longer token T (bottom-left box of Figure 8). Considering
that the app code the pointers point to is always a mixture
of developer’s code and third-party library’s code, so the to-
ken T collected is a mixture of ti from developer’s code and
third-party library’s code. For example, the pointers in the
call stack of the Covet Fashion app in Figure 8 point to
libraries Cocoa Async Socket (1, 2, 5), CocoaHTTPServer
(6, 9), Tapjoy (10, 11, 16, 17), and developer’s code (26) re-
spectively; the token ti in developer’s code (26) will affect
similarity analysis since developer’s code varies in different
apps. To reduce noise induced by developer’s code in similar-
ity analysis, we propose a weighted edit distance algorithm
to focus on the third-party library’s code.
Since the third-party library’s code is pointed by pointers at
the top of the call stack, the token ti related to the top of the call
stack is assigned a larger weight wi, and vice-versa. To factor
in the weight, we duplicate ti multiple times according to the
wi assigned to the token and then get a new longer token T0.
After that, we measure the similarity ratio R of call stacks by
using different T0. In practice, we adopt a Levenshtein edit
distance ratio [63] algorithm, that is
DistanceRatio(a,b) = 1 
EditDistance(a,b)
|a| +|b|
(1)
where a and b denote two tokens T0, respectively. The whole
process is described in Algorithm 1.
Algorithm 1 Weighted edit distance for identifying third-party network
service libraries
Input: Call stack: C1, C2; Token for call stack: T1, T2;
Output: Weighted edit distance of the two call stacks: R;
1: W   Max(Len(C1), Len(C2))
2: T01   GET_WEIGHTED_TOKEN(W,C1,T1)
3: T02   GET_WEIGHTED_TOKEN(W,C2,T2)
4: R   Levenshtein.ratio(T01,T02)
5: function GET_WEIGHTED_TOKEN(W,C,T )
for each i 2 [0,W   1] do
6:
7:
8:
9:
10:
11:
wi   W   i
ti   T [i]
t0i   Duplicate(ti,wi)
T0   Concatenate(T0,t0i )
return T0
The weighted edit distance can increase the edit distance
ratio R of the call stacks for the same third-party network
service library in different apps, but has slightly less inﬂuence
for different libraries (see Table 4). Empirically, we tune the
parameter and ﬁnally consider as a third-party network service
library if the ratio R   0.6. Note that, the threshold is tuned
to optimize the library identiﬁcation. The results obtained are
not overly-sensitive to the different thresholds chosen.
Building signatures for third-party libraries. In practice,
if the similarity of two stacks reaches the threshold, the code
pointed by the stack is considered as third-party libraries.
Then we inspect the corresponding apps and tag the identiﬁed
third-party network service libraries by searching GITHUB or
GOOGLE. The most straightforward way to ﬁnd the in-app
network service is to identify the developer’s code that exactly
invokes the third-party network service API. However, this
approach could be very time-consuming to scale up because
it needs an extensive analysis of each app to build the API
invocation due to the Objective-C runtime property, message
dispatch [47, 67]. To address the challenge, we propose to
use the string sii relevant to the third-party library to generate
a signature instead.
By leveraging the TF/IDF algorithm in GENSIM [71], we
evaluate each sii (bottom-left box of Figure 8) and obtain the
prominent sii, which is used for identifying third-party net-
work service libraries. Finally, we obtain a 
tuple for each library. For example, the GCDWebServer library
is presented as .
2424    29th USENIX Security Symposium
USENIX Association
Table 4: Edit distance/weighted edit distance ratio R of call stack for third-party network service libraries.
Edit distance/
Weighted edit distance
QQBrowser
(CocoaHTTPServer)
Taobao4iPhone
(wangxin.taobao)
Libby
(GCDWebServer)
QQSports
(TencentVideoHttpProxy)
bbtime (CocoaHTTPServer)
Tmall4iPhone (wangxin.taobao)
NOW (GCDWebServer)
KuaiBao (TencentVideoHttpProxy)
0.74/0.82
0.16/0.18
0.37/0.37
0.31/0.31
0.16/0.18
1.00/1.00
0.17/0.19
0.15/0.20
0.36/0.37
0.19/0.22
0.89/0.91
0.30/0.30
0.28/0.28
0.12/0.18
0.30/0.29
0.54/0.66
By using signatures of third-party network service libraries,
we can execute a large-scale analysis of iOS apps and push
forward the analysis boundary from the system APIs to third-
party network service libraries (e.g., Section 7.2). Further-
more, the extracted signatures enable us to apply association
analysis to ﬁgure out the relation between these third-party
network service libraries.
In summary, the proposed library identiﬁcation approach
is speciﬁcally designed for a call trace which reaches the
_bind API. The third-party library to which the call stack
points is a network service library. This approach outperforms
the cluster-based method [67] by utilizing lower complexity
(unnecessary to build the third-party library corpus before
extracting network service libraries) and high precise (e.g.,
identiﬁes the library Unreal Engine 4 which provides the
network service but is commonly known as a game library)
analysis.
5.3 Results of Building Network Service Sig-
natures
Using the proposed methodology, we identify six system APIs
and 34 third-party libraries by analyzing the call stacks of seed
apps. System network service APIs are collected by traveling
the call stack. The results are shown in the ﬁrst two columns
of Table 3. Third-party network service libraries are collected
by analyzing the similarity of the call stack. The results are
shown in x-axis of Figure 10 and Table 7 in the Appendix.
Given that there is no ground truth for the identiﬁcation of
network services, each app must be inspected to conﬁrm the
existence of network service usage. Unfortunately, inspecting
more than one thousand apps is tedious and time consuming,
so we instead chose to randomly sample 130 apps (10%) from
the seed dataset. Each of the six expert researchers separately
inspected each app and identiﬁed the use of system APIs
and third-party libraries. Our analysis of the randomly sam-
pled dataset suggests 100% accuracy, with 0% disagreement
among the expert researchers, showing the effectiveness of
our proposed system. Although the perfect accuracy would
probably not be supported through veriﬁcation of every app
that we collected, with more time and effort, manual veriﬁca-
tion of a sample size greater than 400 apps (> 30%) would
give a more pronounced success rate. Furthermore, experi-
mental results show that among the 1,300 apps, none of the
apps is obfuscated, suggesting that obfuscation is not wildly
applied to iOS apps to affect the analysis result (the detail is
available on our website). We highlight that currently there
is no benchmark dataset publicly available for any accuracy
comparison of other iOS library identiﬁcation approaches.
6 Large-Scale Analysis of Network Services
We begin by analyzing the prevalence of the network service
use in iOS apps. By taking signatures of APIs and libraries,
we query the metadata of the collected apps stored in our
database to ﬁnd the percentage of apps that may use net-
work services. We further analyze the association or inter-
dependencies among these third-party network service li-
braries, in assistance with the extraction of apps for subse-
quent analysis. We highlight our main results in the remarks.
(i) System network service APIs. To reveal the portion of
iOS apps that make use of network services, we use the API
signatures collected from the seed apps to query our database
(see query result breakdowns in Table 6 in the Appendix).
Apps assembling these APIs are potentially ready to start net-
work services. As shown in Table 3 (columns 4 and 5), most
of the apps follow the guidance of [25]; speciﬁcally, using the
API _CFSocketSetAddress of Core Foundation socket
and the API _bind of BSD sockets can compose a network
service. _res_9_nquery is an undocumented API used by
iOS apps. Although Apple has documented the remaining
three APIs, it does not clarify whether these APIs provide the
network services.
Compared to the dynamic analysis results shown in Table 2,
our query found several-fold more apps capable of invoking
system APIs for network services. We believe the reasons
for the discrepancy are as follows: (i) The code snippet for
invoking a system API for network services may be dead
(i.e., unused or dummy) code; (ii) UI interaction may hinder
execution of the code snippet that invokes these APIs, so
dynamic analysis fails to pick it up.
The percentage of apps using network services decreases
from 52.62% when querying the 1,300 seed apps to 40.98%
when querying the 168,951 iOS apps (see the last two columns
of Table 3), since general apps are not as fully-featured as
many of the top rate apps. Results grouped by category reveal
that different categories of apps exhibit markedly different
trends in their use of network services. Most iOS apps in the
“Game” category are inclined to provide network services for
multi-peer connection. These apps account for over 60% of
USENIX Association
29th USENIX Security Symposium    2425
Figure 9: Network services across app categories.
Figure 11: Third-party network service libraries across app cat-
egories. The color encodes the logarithm of the number of apps
(log2(# apps)) using third-party libraries.
Figure 10: Third-party network service libraries detected in the seed
apps.
the designated categories. The categories “Reference” and
“Photo & Video” are comparably less likely to provide net-
work services. Other libraries are distributed uniformly in
different categories. The query results are depicted in Fig-
ure 9.
Remark 1. Network services are prevalent in iOS apps.
40.98% apps potentially invoke system APIs to provide net-
work services. The results show that almost every top popular
app in China (73.54%) contains code to start a network ser-
vice. Queries further reveal that China apps are almost twice
as likely to invoke network service APIs than their US coun-
terparts (over 73.54% vs. over 40.37%).
(ii) Third-party network service libraries. iOS apps com-
monly integrate third-party libraries to provide their network
services. In order to characterize the distribution of third-party
network service libraries in iOS apps, we query the third-party
libraries in top popular apps by using the collected signatures.
As shown in Figure 10, we note that (i) as a basic support for
establishing network services, CocoaAsyncSocket is a preva-
lent used third-party library in both the United States and
China. (ii) Apps from the United States are more willing to in-
tegrate the GCDWebServer, Google Cast, and UnityEngine.iOS
third-party libraries. (iii) Due to poor accessibility of network
resources in China, the Google Cast library is rarely used in
apps from China. Libraries in China are largely more scattered
in all categories than those in the United States. We further
the
third-party libraries. Besides
extend our analysis to the 168,951 iOS apps, and the results
are grouped by the category of iOS apps (see breakdowns
in Table 7 in the Appendix). As shown in the corresponding
heatmap of Figure 11, we have the following observation.
Remark 2. Apps in the “Game” category are most
likely to use
li-
braries of CocoaAsyncSocket and UnityEngine.iOS, the
“Game”
category mainly uses CocoaHTTPServer and
Tapjoy-CocoaHTTPServer-Extension libraries. Among the
top ﬁve used network service libraries, there are third-party
libraries CocoaHTTPServer and GCDWebServer, providing
various interfaces for developers to customize (e.g., designate
the access interface, specify resources/functionalities) the
network services. This may potentially lead to the library
misuse.
(iii) The dependency relationship of network service li-
braries. The error-prone use of third-party libraries (e.g.,
GCDWebServer, CocoaHTTPServer) are widely used in iOS apps.
It is likely that these third-party network service libraries
are supporting infrastructure for other libraries. We use the
FP-GROWTH algorithm [52] to mine the association of third-
party libraries. The rules discovered by FP-GROWTH is listed
in Table 5. From Table 5, we ﬁnd dependencies between
different third-party network service libraries. For exam-
ple, the dependency of Tapjoy-CocoaHTTPServer-Extension
can be depicted as Tapjoy-CocoaHTTPServer-Extension  !
CocoaHTTPServer  ! CocoaAsynSocket  ! _bind (lines 1,
5, and 11 in Table 5). This is veriﬁed by checking source
code of this library. Even for closed source libraries, we
know the dependency of the libraries from the table. For
example, analysis result reveals that the closed source library
TencentVideoHttpProxy is built on top of the open source
CocoaAsyncSocket library (line 14). In the real world, the rela-
tions of third-party network service libraries are shown in the
blue box of Figure 3. We also ﬁnd the prevalent usage of Happy
2426    29th USENIX Security Symposium
USENIX Association
Table 5: Association of third-party network service libraries and
system network service APIs.
Library/API
Library/API
Tapjoy-CocoaHTTPServer-Extension CocoaHTTPServer
Tapjoy-CocoaHTTPServer-Extension CocoaAsyncSocket