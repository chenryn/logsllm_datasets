_sum$ = 16  
; size = 4 
_product$ = 20  
; size = 4 
_f1 
PROC 
mov ecx, DWORD PTR _y$[esp-4] 
mov eax, DWORD PTR _x$[esp-4] 
lea edx, DWORD PTR [eax+ecx] 
imul eax, ecx 
mov ecx, DWORD PTR _product$[esp-4] 
push esi 
mov esi, DWORD PTR _sum$[esp] 
mov DWORD PTR [esi], edx 
mov DWORD PTR [ecx], eax 
pop esi 
ret 0 
_f1 
ENDP 
_main PROC 
push OFFSET _product 
push OFFSET _sum 
push 456                
; 000001c8H 
push 123                
; 0000007bH 
call _f1 
mov eax, DWORD PTR _product 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 10 章  指    针 
97 
mov ecx, DWORD PTR _sum 
push eax 
push ecx 
push OFFSET $SG2803 
call DWORD PTR __imp__printf 
add esp, 28           
; 0000001cH 
xor eax, eax 
ret 0 
_main ENDP 
如图 10.1 所示，我们使用 OllyDbg 调试这个程序。 
图 10.1  使用 OllyDbg 观察全局变量的地址传递到 f1()函数的过程 
首先，全局变量的地址会被传递给 f1()函数。我们用右键单击栈中的元素，选中“Follow in dump”，
将会在数据段中看到两个变量的实际情况。 
在运行第一条指令之前，在 BSS（Block Started by Symbol）域内未被初始化赋值的数据会置零，所以
这些变量会被清空（ISO 可规范，6.7.8 节）。变量驻留在数据段。如图 10.2 所示，我们可以按 Alt-M 组合
键调用 memory map 进行确认。 
图 10.2  使用 OllyDbg 查看内存映射 
按下F7 键及跟踪调试f1()函数
①，如图 10.3 所示。 
图 10.3  使用 OllyDbug 跟踪调试 f1() 
① trace，可以进入被调用的函数里继续进行单步调试。如果使用 F8 键，则可一步就完成 call 调用的函数。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
98 
逆向工程权威指南（上册） 
如上图所示，数据栈里会有 0x1C8(456)和 0x7B(123)两个值，以及这两个全局变量的地址（指针）。 
继续跟踪调试程序，待其执行到 f1()函数尾部。如图 10.4 所示，我们会在左下方的窗口看到全局变量
的计算结果。 
图 10.4  使用 ollyDbg 观察 f1()函数执行完毕 
而后，全局变量的值将被加载到寄存器中，通过栈传递给 printf()函数。如图 10.5 所示。 
图 10.5  使用 OllyDbg 观察 printf()函数获取全局变量的地址 
10.2 局部变量 
下面，我们略微调整下程序，使其通过局部变量完成同样的功能。 
指令清单 10.2  将和、积变量存储在局部变量里 
void main() 
{ 
  int sum, product; // now variables are local in this function 
  f1(123, 456, &sum, &product); 
  printf ("sum=%d, product=%d\n", sum, product); 
}; 
编译之后，f1()函数的汇编代码与使用全局变量的代码完全相同。而 main()函数的汇编代码会有相应的
变化。启用/Ox /Ob0 的优化选项编译后，会得到如下所示的指令。 
指令清单 10.3  Optimizing MSVC 2010 (/Ob0) 
_product$ = -8                                         ; size = 4 
_sum$ = -4                                             ; size = 4 
_main    PROC 
; Line 10 
  sub     esp, 8 
; Line 13 
  lea     eax, DWORD PTR _product$[esp+8] 
  push    eax 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 10 章  指    针 
99 
  lea     ecx, DWORD PTR _sum$[esp+12] 
  push    ecx 
  push    456                                   ; 000001c8H 
  push    123                                   ; 0000007bH 
  call    _f1 
; Line 14 
  mov     edx, DWORD PTR _product$[esp+24] 
  mov     eax, DWORD PTR _sum$[esp+24] 
  push    edx 
  push    eax 
  push    OFFSET $SG2803 
  call    DWORD PTR __imp__printf 
; Line 15 
  xor     eax, eax 
  add     esp, 36                               ; 00000024H 
  ret     0 
接下来，我们使用 OllyDbg 来调试这个程序。栈内的两个变量在栈内 0x2EF854 和 0x2EF858 两个地
址上。如图 10.6 所示，我们观察下它们入栈的过程。 
图 10.6  使用 OllyDbg 观察局部变量的入栈过程 
在 f1()函数启动时，0x2EF854 和 0x2EF858 地址的数据都是随机的脏数据，如图 10.7 所示。 
图 10.7  使用 OllyDbg 追踪 f1()的启动过程 
f1()函数结束时的情况如图 10.8 所示。 
现在 0x2EF854 的值是 0xDB18，0x2EF8588 的值是 0x243。它们都是 f1()函数的运算结果。 
图 10.8  使用 OllyDbg 观察 f1()执行完毕时的栈内数据 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
100 
逆向工程权威指南（上册） 
10.3 总结 
借助指针，f1() 函数可以返回位于任意地址的任意值。这个例子体现了指针的重要作用。C++的引用
（指针）/reference 的作用与 C pointer（指针）相同。本书的 51.3 节将详细介绍 C++的引用。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第
第 1111 章
章    G
GO
OTTO
O 语
语句
句  
人们普遍认为使用GOTO语句将破坏代码的结构化构造
①。即使如此，某些情况下我们还必须使用这
种语句
②
① 请参阅 Dij68。 
② 请参阅 Knu74，以及 Yur13。 
。 
本章围绕以下程序进行说明： 
#include  
int main()  
{ 
  printf ("begin\n"); 
  goto exit; 
  printf ("skip me!\n"); 
exit: 
  printf ("end\n"); 
}; 
使用 MSVC 2012 编译上述程序，可得到如下所示的指令。 
指令清单 11.1  MSVC 2012 
$SG2934 DB      'begin', 0aH, 00H 
$SG2936 DB      'skip me!', 0aH, 00H 
$SG2937 DB      'end', 0aH, 00H 
_main   PROC 
         push    ebp 
         mov     ebp, esp 
         push    OFFSET $SG2934 ; 'begin' 
         call    _printf 
         add     esp, 4 
         jmp     SHORT $exit$3 
         push    OFFSET $SG2936 ; 'skip me!' 
         call    _printf 
         add     esp, 4 
$exit$3: 
         push    OFFSET $SG2937 ; 'end' 
         call    _printf 
         add     esp, 4 
         xor     eax, eax 
         pop     ebp 
         ret     0 
_main   ENDP 
源代码中的 goto 语句直接被编译成了 JMP 指令。这两个指令的效果完全相同：无条件的转移到程序
中的另一个地方继续执行后续命令。 
只有在人工干预的情况下，例如使用调试器调整程序、或者对程序打补丁的情况下，程序才会调用第
二个 printf()函数。 
我们用它练习 patching 技术。首先使用 Hiew 打开刚才编译的可执行文件，如图 11.1 所示将光标移动到 JMP
（0x410）处，按下 F3 键（编辑），再输入两个零。这样，我们就把这个地址的 opcode 改为了 EB 00 如图 11.2 所示。 
JMP 所在的 opcode 的第二个字节代表着跳转的相对偏移量。把这个偏移量改为 0，就可以让它继续运
行后续指令。这样 JMP 指令就不会跳过第二个 printf()函数。 
按下 F9 键（保存文件）并退出 Hiew。再次运行这个可执行文件的情况应当如图 11.3 所示。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
102 
逆向工程权威指南（上册） 
图 11.1  Hiew 
图 11.2  Hiew 
当然，把 JMP 指令替换为两个 NOP 指令可以达到同样效果。因为 NOP 的
opcode 是 0x90、只占用一个字节，所以在进行替换时要写上两个 NOP 指令。 
11.1 无用代码 Dead Code 
在编译术语里，上述程序中第二次调用 printf()函数的代码称为“无用代码/dead code”。无用代码永远
不会被执行。所以，在启用编译器的优化选项之后，编译器会把这种无用代码删除得干干净净。 
指令清单 11.2  Optimizing MSVC 2012 
$SG2981 DB      'begin', 0aH, 00H 
$SG2983 DB      'skip me!', 0aH, 00H 
$SG2984 DB      'end', 0aH, 00H 
_main   PROC 
         push    OFFSET $SG2981 ; 'begin' 
         call    _printf 
         push    OFFSET $SG2984 ; 'end' 
$exit$4: 
         call    _printf 
         add     esp, 8 
         xor     eax, eax 
         ret     0 
_main   ENDP 
然而编译器却没能删除字符串“skip me!”。 
11.2 练习题 
请结合自己的编译器和调试器进行有关练习。 
图 11.3  修改后的程序 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第
第 1122 章
章    条
条件
件转
转移
移指
指令
令  
12.1 数值比较 
本章会围绕以下程序进行演示： 
#include  
void f_signed (int a, int b) 
{ 
    if (a>b) 
          printf ("a>b\n"); 
    if (a==b) 
          printf ("a==b\n"); 
    if (ab) 
          printf ("a>b\n"); 
    if (a==b) 
          printf ("a==b\n"); 
    if (ab' 
    call   _printf 
    add    esp, 4 
$LN3@f_signed: 
    mov    ecx, DWORD PTR _a$[ebp] 
    cmp    ecx, DWORD PTR _b$[ebp] 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
104 
逆向工程权威指南（上册） 
    jne    SHORT $LN2@f_signed 
    push   OFFSET $SG739        ; 'a==b' 
    call   _printf 
    add    esp, 4 
$LN2@f_signed: 
    mov    edx, DWORD PTR _a$[ebp] 
    cmp    edx, DWORD PTR _b$[ebp] 
    jge    SHORT $LN4@f_signed 
    push   OFFSET $SG741        ; 'ab' 
    call   _printf 
    add    esp, 4 
$LN3@f_unsigned: 
    mov    ecx, DWORD PTR _a$[ebp] 
    cmp    ecx, DWORD PTR _b$[ebp] 
    jne    SHORT $LN2@f_unsigned 
    push   OFFSET $SG2763    ; 'a==b' 
    call   _printf 
    add    esp, 4 
$LN2@f_unsigned: 
    mov    edx, DWORD PTR _a$[ebp] 
    cmp    edx, DWORD PTR _b$[ebp] 
    jae    SHORT $LN4@f_unsigned 
    push   OFFSET $SG2765    ; 'a<b' 
    call   _printf 
    add    esp, 4 
LN4@f_unsigned: 
    Pop   ebp 
    Ret   0 
_f_unsigned ENDP 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 12 章  条件转移指令 
105 
GCC 编译的结果与 MSVC 编译的结果基本相同。 