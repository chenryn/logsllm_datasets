namic analysis systems [22, 27, 30, 34], such as changing, for
each run, the device’s identi(cid:12)ers.
Nonetheless, we acknowledge that some advanced attacks
(such as (cid:12)ngerprinting a speci(cid:12)c device from its accelerom-
eters’
imperfections [8], USB charging state, the never-
changing geographic position, the presence of extra parti-
tions, or the process that restores the userdata partition)
will be still eﬀective against BareDroid, and that full un-
detectability is an open research problem.
6.2 Attacks against BareDroid
The implementation details described throughout this
paper assume that kernel security functionalities (e.g.,
SELinux) are not compromised during an analysis. In this
section, we elaborate on how an attacker getting around
them could tamper with the BareDroid infrastructure, and
we propose several countermeasures.
Most importantly, as long as malicious apps are not be
able to tamper with the Boot ROM, the bootloader, the re-
covery partition code, and the dm-verity functionality that
will gain control after reboot, we can exclude that a mali-
cious app can persistently modify the content of most of the
device’s partitions.
In other words, as long as the device
reboots normally, the content of the following partitions is
guaranteed to be untampered: aboot (checked by the Boot
ROM), boot (restored at every reboot), system (checked by
dm-verity), recovery (restored at every reboot), userdata
(restored from an on-device copy at every reboot).
When considering a more aggressive threat model
in
which, for example, a malicious app could tamper with the
SELinux module, other attacks are possible. For example, a
malicious app could change the copy of the userdata parti-
tion that BareDroid uses during the device’s restore proce-
dure. To defend from this threat, one countermeasure would
be to check the content of the copy of the userdata partition
every a (cid:12)xed amount of restores (as previously mentioned,
it would be too time consuming to perform the check af-
ter each reboot), where the frequency of this check could
be tuned depending on the security properties that a user
of BareDroid desires. This check could be implemented
in the recovery code by reading the content of this parti-
tion and verifying its hash. In case this veri(cid:12)cation process
fails, a pristine copy of the userdata partition can then be
copied again in the device (and the analysis’s results per-
formed in between the last two checks would need to be
invalidated). In addition, an attacker could perform speci(cid:12)c
attacks against one of the devices used by BareDroid. For
example, an attacker could tamper with the content of the
aboot partition so that the veri(cid:12)cation step of this parti-
tion (performed by the Boot ROM) would fail: this, in turn,
would make the entire device inoperable.
Even though these attacks can cause, in the worst case, a
monetary loss, BareDroid would functionally act as a ca-
nary, signaling and detecting a very malicious app early on,
and eﬀectively preventing the end users’ devices from get-
ting damaged. In fact, BareDroid can easily detect these
sophisticated attacks by noticing a failure in the restoring
process of a device. Moreover, note that these attacks are
possible only when an application can successfully exploit
a vulnerability in the kernel: since these vulnerabilities are
rare (and very valuable), we believe it is very unlikely that
an attacker would utilize a Linux kernel zero-day, at the
very high risk of being discovered, for the mere purpose of
attacking a malware analysis infrastructure.
Finally, we consider the scenario in which we remove the
assumption that the device is guaranteed to reboot nor-
mally:
in other words, the attacker is able to \fake" the
device reboot. In this scenario, all the considerations above
are no longer valid. To deal with this speci(cid:12)c attack, Bare-
Droid would need to rely on a separate method (e.g., a
machine that presses the appropriate button combination,
as mentioned in Section 4.1.2), to hard-reboot the device:
although it is not trivial to properly implement this mecha-
nism, it would guarantee taking the device to a known state
(i.e., the boot menu) and re-establish our chain of trust as
previously exposed.
6.3 Alternative Implementations
Alternative implementations of BareDroid are possible.
For instance, with larger modi(cid:12)cations, it would be possible
to boot a device using data and code stored in an external
storage, such as a network shared drive, which can be re-
stored easily and fast, similarly to how network boot and
iSCSI technologies can be used in servers. Alternatively,
speci(cid:12)c hardware devices could be used to provide IPMI-
like functionality, or rewrite the content of the (cid:13)ash memory
without the need of using the USB connection or the code
contained in the aboot partition.
If fully realized, these approaches would have the advan-
tages of allowing a faster restore and avoiding entirely the
need of on-device code to perform the device’s restore (thus
making completely impossible for an attacker to interfere
with the restoring process). However, using hardware mod-
i(cid:12)cations, instead of commodity devices like those we used
in BareDroid, has two important disadvantages: First, the
cost of a large scale deployment of BareDroid would in-
crease signi(cid:12)cantly; Second, using ad-hoc devices would in-
crease the (cid:12)ngerprintability of BareDroid since they would
likely introduce several discrepancies with respect to the
commonly-used hardware. Nevertheless, we consider explor-
ing the possibility of using diﬀerent hardware devices as one
very interesting direction for future work.
7. RELATED WORK
7.1 Sandbox Evasion
The problem of evasion in dynamic malware analysis is
well-known. For desktop platforms, several techniques have
been proposed to detect virtualized and emulated environ-
ments [3, 4, 11, 23, 26]. The main approach to detection is
to (cid:12)nd artifacts of the execution environment that are not
present in a hardware-based environment. Initially, the de-
tection techniques were focused on detecting the emulated or
virtualized CPU [11, 23, 26]. Then, it has expanded to more
generic approach of (cid:12)ngerprinting software, hardware, and
external con(cid:12)gurations of the analysis environment [4,17,35].
Even though these techniques are developed for desktop
platforms, the core ideas are still related and applicable to
Android analysis environment. Chen et al. (cid:12)rst proposed
a generic taxonomy of evasion techniques used by malware
against dynamic analysis system [4]. The taxonomy pro-
poses abstract groups based on where the artifacts originate
from.
There are a few recent works on Android analysis envi-
ronment detection [16, 24, 33]. Vidas et al. and Petsas et
al. explored several analysis environment artifacts that are
indicative of emulated environment [24, 33]. These environ-
ment artifacts include emulator-speci(cid:12)c properties such as
IMEI value, performance timing, properties of attached in-
put devices, and other artifacts that are unique to the spe-
ci(cid:12)c analysis environment. Jing et al. developed a system,
called Morpheus, which is capable of automatically (cid:12)nding
several thousands of such artifacts [16]. These artifacts can
be used as heuristics to evade analysis environments.
7.2 Transparent Analysis
Sandbox evasion techniques have been frequently used
by evasive malware in desktop platforms. Mobile mal-
ware is likely to follow a similar trend. For desktop plat-
forms, many transparent malware analysis systems have
been proposed to mitigate the problem of evasive mal-
ware [9, 14, 18, 32]. Cobra [32] proposed mitigation tech-
niques for evasion of debugger-base analysis. Many analysis
systems proposed out-of-the-box analysis approaches to im-
prove transparency [1, 14, 27]. Ether [9] leveraged hardware-
based virtualization technology to overcome emulator and
software artifacts [9]. BareBox [18] proposed bare metal en-
vironment for transparent analysis and developed techniques
to improve the scalability of the approach. Our approach,
based on a bare-metal environment, is similar to BareBox.
However, to the best of our knowledge, our work is the (cid:12)rst
to build an automated system of this kind for Android mal-
ware analysis. In fact, all current state-of-the-art Android
analysis systems are based on emulators [2, 20, 25, 31, 34],
which are known to be easily detectable.
8. CONCLUSIONS
Authors of malicious Android apps have started to (cid:12)nger-
print emulated analysis environments, as a mean to avoid
detection from all popular Android malware detection en-
gines. Despite this trend, apps are currently still being an-
alyzed in emulated environment because executing them on
bare-metal devices in scale has been unfeasible, as one can
only analyze an order of magnitude less apps on bare-metal
then on emulators at the same price-point for the hardware.
In this paper, we designed and implemented BareDroid,
a system that makes the analysis of Android apps on bare-
metal feasible at scale. We have shown that BareDroid
is cost-eﬀective (when compared to emulators) and, at
the same time, cannot be evaded by emulator-aware An-
droid malware. Moreover, we have shown that BareDroid
is not being detected by the latest research on analysis-
environment detection.
The goal of our work is to provide a platform on top
of which existing and future analysis engines can perform
malware detection without the risk of being evaded by the
mere presence of an emulator-like environment. This is why,
for the bene(cid:12)t of the security community, we release Bare-
Droid as an open source project.
9. ACKNOWLEDGEMENTS
We would like to thank the anonymous reviewers and
our shepherd, William Enck, for their valuable feedback.
This material is based on research sponsored by DARPA
under agreements number FA8750-12-2-0101 and FA8750-
15-2-0084. The U.S. Government is authorized to reproduce
and distribute reprints for Governmental purposes notwith-
standing any copyright notation thereon. The work was also
supported by the Oﬃce of Naval Research (ONR) under
grant N000140911042, the Army Research Oﬃce (ARO) un-
der grant W911NF0910553, by the National Science Founda-
tion under grant CNS-1408632, by Lastline, Inc., and Secure
Business Austria. This work was also partially supported by
a Google Research Award (winter 2014) and by the Italian
Ministry of Research within the PRIN project \GenData
2020."
10. REFERENCES
[1] Anubis. http://anubis.cs.ucsb.edu.
[2] Sanddroid. http://sanddroid.xjtu.edu.cn/.
[3] D. Balzarotti, M. Cova, C. Karlberger, C. Kruegel, E. Kirda,
and G. Vigna. Eﬃcient Detection of Split Personalities in
Malware. In Proceedings of the Symposium on Network and
Distributed System Security (NDSS), 2010.
Symposium on Recent Advances in Intrusion Detection
(RAID), 2007.
[15] X. Jiang, X. Wang, and D. Xu. Stealthy Malware Detection
through Vmm-based Out-of-The-Box Semantic View
Reconstruction. In Proceedings of the ACM Conference on
Computer and Communications Security (CCS), 2007.
[16] Y. Jing, Z. Zhao, G.-J. Ahn, and H. Hu. Morpheus:
Automatically Generating Heuristics to Detect Android
Emulators. In Proceedings of the Annual Computer Security
Applications Conference (ACSAC), 2014.
[17] A. Kapravelos, M. Cova, C. Kruegel, and G. Vigna. Escape
from Monkey Island: Evading high-interaction Honeyclients. In
Proceedings of the Detection of Intrusions and Malware and
Vulnerability Assessment (DIMVA), 2011.
[18] D. Kirat, G. Vigna, and C. Kruegel. BareBox: Eﬃcient
Malware Analysis on Bare-Metal. In Proceedings of the Annual
Computer Security Applications Conference (ACSAC), 2011.
[19] D. Kirat, G. Vigna, and C. Kruegel. Barecloud: Bare-metal
Analysis-based Evasive Malware Detection. In Proceedings of
the USENIX Security Symposium (USENIX), 2014.
[20] P. Lantz, A. Desnos, and K. Yang. DroidBox: Android
Application Sandbox, 2012.
[21] S. Mutti, Y. Fratantonio, A. Bianchi, L. Invernizzi, J. Corbetta,
D. Kirat, C. Kruegel, and G. Vigna. BareDroid Source Code.
https://github.com/ucsb-seclab/baredroid.
[22] J. Oberheide and C. Miller. Dissecting the Android Bouncer.
SummerCon, 2012.
[23] R. Paleari, L. Martignoni, G. Fresi Roglia, and D. Bruschi. A
Fistful of Red-Pills: How to Automatically Generate Procedures
to Detect CPU Emulators. In Proceedings of the USENIX
Workshop on Oﬀensive Technologies (WOOT), 2009.
[24] T. Petsas, G. Voyatzis, E. Athanasopoulos, M. Polychronakis,
and S. Ioannidis. Rage against the virtual machine: hindering
dynamic analysis of Android malware. In Proceedings of the
ACM European Workshop on System Security (EUROSEC),
2014.
[25] A. Reina, A. Fattori, and L. Cavallaro. A system Call-Centric
Analysis and Stimulation Technique to Automatically
Reconstruct Android Malware Behaviors. In Proceedings of the
ACM European Workshop on System Security (EUROSEC),
2013.
[4] X. Chen, J. Andersen, Z. M. Mao, M. Bailey, and J. Nazario.
[26] J. Rutkowska. Red Pill... or how to detect VMM using (almost)
Towards an Understanding of Anti-Virtualization and
Anti-Debugging Behavior in Modern Malware. In Dependable
Systems and Networks With FTCS and DCC, 2008.
[5] CNET. Google’s $349 Nexus 5 hits today with LTE, KitKat.
http://www.cnet.com/news/googles-349-nexus-5-hits-today-
with-lte-kitkat/.
[6] Contagio mobile mini-dump. OBAD. http://contagiominidump.
blogspot.it/2013/06/backdoorandroidosobada.html .
[7] DexLab. Detecting Android Sandboxes.
http://www.dexlabs.org/blog/btdetect.
[8] S. Dey, N. Roy, W. Xu, R. R. Choudhury, and S. Nelakuditi.
Accelprint: Imperfections of Accelerometers Make Smartphones
Trackable. In Proceedings of the Symposium on Network and
Distributed System Security (NDSS), 2014.
[9] A. Dinaburg, P. Royal, M. Sharif, and W. Lee. Ether: Malware
Analysis via Hardware Virtualization Extensions. In
Proceedings of the ACM Conference on Computer and
Communications Security (CCS), 2008.
[10] F-Secure. Android Pincer A.
https://www.f-secure.com/weblog/archives/00002538.html .
[11] P. Ferrie. Attacks on Virtual Machine Emulators. Technical
report, Symantec Corporation, 2007.
[12] FireEye. Android.HeHe.
https://www.fireeye.com/blog/threat-research/2014/01/
android-hehe-malware-now-disconnects-phone-calls.html .
[13] G. Ho, D. Boneh, L. Ballard, and N. Provos. Tick tock:
building browser red pills from timing side channels. In
Proceedings of the USENIX Workshop on Oﬀensive
Technologies (WOOT), 2014.
[14] X. Jiang and X. Wang. \Out-of-the-Box" Monitoring of
VM-Based High-Interaction Honeypots. Proceedings of the
one CPU instruction.
http://invisiblethings.org/papers/redpill.html, 2004.
[27] J. Security. JOE Sandbox Mobile. http://www.joesecurity.org.
[28] Server Direct. Server prices. http://www.serversdirect.com.
[29] S. Smalley and R. Craig. Security Enhanced (SE) Android:
Bringing Flexible MAC to Android. In Proceedings of the
Symposium on Network and Distributed System Security
(NDSS), 2013.
[30] M. Spreitzenbarth, F. Freiling, F. Echtler, T. Schreck, and
J. Hoﬀmann. Mobile-sandbox: Having a Deeper Look into
Android Applications. In Proceedings of the ACM Symposium
on Applied Computing (SAC), 2013.
[31] K. Tim, S. Khan, A. Fattori, and L. Cavallaro. CopperDroid:
Automatic Reconstruction of Android Malware Behaviors. In
Proceedings of the Symposium on Network and Distributed
System Security (NDSS), 2015.
[32] A. Vasudevan and R. Yerraballi. Cobra: Fine-grained Malware
Analysis Using Stealth Localized-executions. Proceedings of the
IEEE Symposium on Security and Privacy, 2006.
[33] T. Vidas and N. Christin. Evading Android runtime analysis
via sandbox detection. In Proceedings of the ACM Symposium
on Information, Computer and Communications Security
(AsiaCCS), 2014.
[34] L. Weichselbaum, M. Neugschwandtner, M. Lindorfer,
Y. Fratantonio, V. van der Veen, and C. Platzer. Andrubis:
Android Malware Under The Magnifying Glass. Technical
Report TR-ISECLAB-0414-001, iSecLab, May 2014.
[35] K. Yoshioka, Y. Hosobuchi, T. Orii, and T. Matsumoto. Your
Sandbox is Blinded: Impact of Decoy Injection to Public
Malware Analysis Systems. Journal of Information Processing,
2011.