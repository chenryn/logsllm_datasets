Python snippet in the code pattern and the Python code in the
software-under-injection. In the latter case, the DSL directives
will make the pattern to match several different variants of the
Python snippet of code. Similarly, the code replacement can
either be Python-only code, i.e., the injector will insert a ﬁxed
snippet of buggy code; or, it can contain a mix of Python and
DSL directives, i.e., the injected buggy code can vary depending
on what matched the code pattern.
Fig. 1 shows three examples of bug speciﬁcations. These
speciﬁcations inject three fault types from G-SWFIT [14]: the
omission of a function call (MFC); the omission of a small
block of statements surrounded by an IF construct (MIFS); and
Authorized licensed use limited to: University College London. Downloaded on October 01,2020 at 12:46:15 UTC from IEEE Xplore.  Restrictions apply. 
365
a wrong parameter in input to a function call (WPF). Differing
from the G-SWFIT technique, we modiﬁed the deﬁnition of the
fault types, to point out the features of the DSL language, and
to emulate more accurately some of the bugs that we found in
the OpenStack project [45], [46].
(cid:9)(cid:12)(cid:8)(cid:14)(cid:11)(cid:10) (cid:6)
(cid:1)(cid:3)(cid:6)(cid:7)(cid:4)(cid:5)(cid:6)(cid:18)(cid:9)(cid:13)(cid:7)(cid:10)(cid:4)(cid:5)(cid:1)(cid:17)(cid:18)(cid:15)(cid:18)(cid:17)(cid:7)(cid:4)(cid:3)(cid:2)(cid:7)
(cid:1)(cid:4)(cid:2)(cid:6)(cid:6)(cid:6)(cid:16)(cid:9)(cid:15)(cid:12)(cid:7)(cid:11)(cid:12)(cid:14)(cid:12)(cid:18)(cid:12)(cid:8)(cid:2)(cid:7)(cid:2)(cid:4)(cid:4)(cid:4)(cid:3)
(cid:1)(cid:3)(cid:6)(cid:7)(cid:4)(cid:5)(cid:6)(cid:18)(cid:9)(cid:13)(cid:7)(cid:10)(cid:5)(cid:6)(cid:1)(cid:17)(cid:18)(cid:15)(cid:18)(cid:17)(cid:7)(cid:4)(cid:3)(cid:2)(cid:7)
(cid:7)(cid:1)(cid:13)(cid:14)(cid:16)(cid:15) (cid:6)
(cid:1)(cid:3)(cid:6)(cid:7)(cid:4)(cid:5)(cid:6)(cid:18)(cid:9)(cid:13)(cid:7)(cid:10)(cid:4)(cid:7)
(cid:1)(cid:3)(cid:6)(cid:7)(cid:4)(cid:5)(cid:6)(cid:18)(cid:9)(cid:13)(cid:7)(cid:10)(cid:5)(cid:7)
(cid:7)
(cid:12)(cid:15)(cid:11)(cid:17)(cid:14)(cid:13) (cid:11)
(cid:6)(cid:5)(cid:1)(cid:1)(cid:1)(cid:4)(cid:10)(cid:8)(cid:9)(cid:11)(cid:14)(cid:5)(cid:11)(cid:4)(cid:9)(cid:10)(cid:6)(cid:7)(cid:12) (cid:2)
(cid:1)(cid:2)(cid:6)(cid:7)(cid:3)(cid:5)(cid:11)(cid:12)(cid:13)(cid:8)(cid:13)(cid:12)(cid:4)(cid:2)(cid:1)(cid:3)(cid:12)
(cid:3)(cid:8)(cid:7)(cid:9)(cid:6)(cid:7)(cid:10)(cid:4)
(cid:12)(cid:1)(cid:16)(cid:17)(cid:19)(cid:18) (cid:11)
(cid:12)
(a) Missing function call fault (MFC).
(b) Missing IF construct with
statements (MIFS) fault.
(cid:15)(cid:18)(cid:14)(cid:20)(cid:17)(cid:16) (cid:6)
(cid:1)(cid:3)(cid:2)(cid:6)(cid:6)(cid:1)(cid:7)(cid:6)(cid:12)(cid:6)(cid:11)(cid:8)(cid:5)(cid:15)(cid:14)(cid:9)(cid:10)(cid:13)(cid:4)(cid:8)(cid:17)(cid:8)(cid:7)(cid:15)(cid:14)(cid:8)(cid:7)(cid:2)(cid:5)(cid:5)(cid:5)(cid:4)(cid:1)(cid:1)(cid:11)(cid:12)(cid:10)(cid:5)(cid:7)(cid:4)(cid:1)(cid:13)(cid:6)(cid:16)(cid:6)(cid:10)(cid:5)(cid:2)(cid:3)(cid:2)(cid:7)(cid:4)(cid:1)(cid:5)(cid:5)(cid:5)(cid:3)
(cid:7)(cid:1)(cid:19)(cid:20)(cid:22)(cid:21) (cid:6)
(cid:1)(cid:3)(cid:2)(cid:6)(cid:6)(cid:1)(cid:7)(cid:2)(cid:5)(cid:5)(cid:5)(cid:4)(cid:1)(cid:1)(cid:3)(cid:8)(cid:10)(cid:10)(cid:13)(cid:9)(cid:12)(cid:2)(cid:1)(cid:11)(cid:12)(cid:10)(cid:5)(cid:7)(cid:4)(cid:1)(cid:13)(cid:3)(cid:4)(cid:1)(cid:5)(cid:5)(cid:5)(cid:3)
(cid:7)
(c) Wrong parameter in function call (WPF) fault.
Fig. 1. Examples of fault speciﬁcations.
The MFC fault type from G-SWFIT looks for function calls
in the software-under-injection, where there is no return value
from the function call, or where the return value is ignored
by the caller [14]. By targeting this kind of function calls, the
injector can emulate a function call omission by removing these
function call statements, and yet to obtain a syntactically-correct
program, as the removal does not break any dependency with
the rest of the program. Moreover, the G-SWFIT study [14]
recommended that the function call should only be removed
when the function call is not the only statement in its block, to
better reﬂect the real bugs from open-source projects that were
analyzed in that study.
In Fig. 1a, the code pattern (i.e., the change { . . . } part
of the speciﬁcation) looks for any function or method call, by
using the $CALL directive of the DSL. The {name=delete *}
syntax after $CALL means that we are targeting calls where the
function name starts with “delete ” string, in order to inject
faults in calls to the OpenStack Neutron APIs delete port,
delete subnet, delete network, etc. This is an example
of how a user may want to customize fault injection according to
domain knowledge: these APIs are prone to omissions (e.g., the
Neutron bug #1028174 [47]), and users may want to simulate
these faults to assess solutions for resource leak detection. The
rest of the speciﬁcation implements the rules of the MFC fault
type. $CALL only matches statements where the function or
method call is the outermost part of the statement: thus, a
statement like x = mycall(), where the assignment is the
outermost expression, would not match the code pattern of
Fig. 1a. The (. . . ) syntax means that we are targeting function
calls with any number of input parameters (zero, one, or more).
The directives $BLOCK directives require that the function call
must be both preceded and followed by one or more statements.
Finally, the code replacement (i.e., the into { . . . } part of the
speciﬁcation) means that we want to transform the matched code
by replacing it only with the blocks that precede and follow
the function call. The {tag=...} syntax after $BLOCK allows
the user to give a label (e.g., b1, b2) to the parts of the code
pattern that matched the software-under-injection, and to reuse
these parts in the code replacement.
In the second example (Fig. 1b), the MIFS fault type matches
an IF construct with its statements (up to 4), and removes them,
i.e., the code replacement part of the speciﬁcation is empty.
The speciﬁcation mixes fragments of Python code (i.e., the if
construct and continue keywords) and DSL directives ($EXPR,
$BLOCK). Again, we reﬁned the original fault type from G-
SWFIT by leveraging domain knowledge, to inject into more
speciﬁc targets. We emulate another recurring issue in OpenStack,
in which metadata of resources (e.g., the UUID of instances)
must have been initialized to allow operating on the resource,
but a check on the validity of the metadata has been omitted
(e.g., the Nova bug #1096722 [48]). To emulate this real bug, we
target if constructs that check speciﬁc variables (e.g., variables
called node, which are used throughout the OpenStack Nova
codebase) and that skip an operation if the check fails (e.g., by
issuing a continue).
In the third example (Fig. 1c), the WPF fault type injects
an invalid parameter to a function call. The bug speciﬁcation
replaces a $CALL statement with the same $CALL statement, but
modifying one of the input parameters. We use again a tag to
reuse code from the code pattern in the code replacement, by
means of the #c syntax after $CALL, i.e., the matched function
call is labeled as “c”. We tailored the bug speciﬁcation to match
another recurring issue in OpenStack, in which an external utility
(e.g., iptables, dnsmasq, e2fsck) is invoked at the host OS
level, but with incorrect or missing parameters (e.g., the Nova bug
#732549 [49]). Thus, we target the utils.execute() library
function (the name attribute in $CALL), and look for a string
literal ($STRING) among the input parameters of the function,
where the string contains the character used by UNIX utilities
to denote parameters. In the code replacement, we inject the
same function call, but the string literal (labeled s) is wrapped
by a function call that corrupts the string with random contents,
using the $CORRUPT DSL directive.
In addition to these examples, we have been using the DSL to
deﬁne several fault models in an industrial context, in cooperation
with Huawei Technologies Co. Ltd.. The DSL provided us a ﬁne-
grain control over the injections, by combining DSL directives
with Python code fragments. Other fault types include: the
injection of exceptions within try blocks, in order to increase
the test coverage of error handlers [2], [42]; the injection of None
values from library function calls, in order to test error handlers
in which the returned value is checked by an IF construct after
the call; the omission of optional input parameters to function
calls; the omission of AND/OR clauses in IF conditions; wrong
or missing initialization of data, such as key-value pair literals in
Python dictionaries, using the $CORRUPT directive; high resource
consumption (CPU, memory, storage), using the $HOG directive.
Authorized licensed use limited to: University College London. Downloaded on October 01,2020 at 12:46:15 UTC from IEEE Xplore.  Restrictions apply. 
366
The DSL can be used to inject more complex fault types, by:
using regular expressions for specifying search patterns; using
the tagging syntax in the change block, to change the order of
statements in the into block; mutating any arithmetic, boolean,
and control ﬂow expression of the Python grammar; injecting
algorithmic bugs by removing entire portions of code (e.g.,
patterns with multiple nested loops and control ﬂow constructs),
and by injecting artiﬁcial time delays using a $TIMEOUT directive.
More examples are presented in § V.
a limit on the number of experiments); or, the user can inject
faults in all of the injection points. The set of injections deﬁnes
the fault injection plan, which is used in the Execution phase.
In this paper, the proposed DSL is tailored for the Python
language. It is possible to deﬁne a similar DSL to support
other languages, such as C/C++ and Java. Several of the bug
patterns for Python could be re-used (i.e., patterns not involving
special Python syntax). The porting would mostly affect the
DSL compiler and the source code scanner and mutator.
IV. THE ProFIPy WORKFLOW
B. Execution
ProFIPy provides a complete fault injection workﬂow, which
assists test engineers at applying software fault injection in
Python systems. The ProFIPy workﬂow generates a set of
mutated versions of the target software, according to user-deﬁned
bug speciﬁcations. These mutated versions are executed in a
controlled environment, and further analyzed for drawing insights
about the system behavior under failure. Fig. 2 summarizes the
workﬂow, which consists in a sequence of three main phases,
that is, Scan (see § IV-A), Execution (see § IV-B), and Data
Analysis (see § IV-C and § IV-D). The following sub-sections
provide details for each phase.
A. Scan
In the Scan phase, the user interacts with the ProFIPy tool to
deﬁne the fault injection plan, which is the set of fault injection
experiments to be run. Each experiment speciﬁes a fault to be
injected. ProFIPy takes in input the source code of the target
software, and the bug speciﬁcation described by using our DSL
(section III). The fault model is stored in a JSON ﬁle, and users
can save and import fault models of previous fault injection
campaigns. ProFIPy provides pre-deﬁned fault models based on
previous fault injection studies (section II).
The Scan phase identiﬁes fault injection points in the
software, i.e., a statement (or group of statements) in the source
code where ProFIPy can inject the software bug according to the
user-deﬁned speciﬁcation. ProFIPy looks for arithmetic/boolean
expressions, method and function calls, variable initializations,
and other kinds of statements.
ProFIPy processes the target code using its Abstract Syntax
Tree (AST) representation, which is commonly by program
analyzers to represent the structure of a piece of code. The DSL
compiler component takes the bug speciﬁcation written using
the DSL and generates a meta-model, which consists of a small
AST that reﬂects the structure of the code in the code pattern.
The meta-model will be used by the source code scanner, which
visits the program’s AST to ﬁnd matches against the code pattern
(i.e., portions of the program’s AST that match the AST of the
meta-model). The meta-model is also used by the source code
mutator to generate fault-injected versions of the program (see
§ IV-B).
After obtaining a set of fault injection points, the user can
select a subset of such locations according to their needs. For
example, the user may want to perform experiments only for
a speciﬁc component (e.g., class or ﬁle); the user may want
to inject a sample of randomly-chosen faults (e.g., to enforce
In this phase, ProFIPy iterates over the fault injection plan. In
each experiment, the original Python source code is transformed
into a mutated version, which is identical to the original except
for a few mutated statements. The mutation emulates a residual
bug in the software. For example, to inject a wrong parameter
bug in a method call, ProFIPy modiﬁes the method call statement
by replacing it with a call to the same method but with different
or corrupted input parameters; to emulate an omission by the
developer, ProFIPy deletes the method call in the mutated