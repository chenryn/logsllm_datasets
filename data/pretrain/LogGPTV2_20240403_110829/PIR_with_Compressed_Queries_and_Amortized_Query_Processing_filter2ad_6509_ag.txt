)
B
M
(
t
s
o
c
k
r
o
w
t
e
n
l
a
t
o
t
Pung
Pung+S
Pung+M
Pung+MS
1
16
64
256
message batch size (k)
FIGURE 14—Per-user total network cost (upload and download) of
a Pung deployment with 256K users. Each user retrieves k 288-byte
messages. See Figure 13 for an explanation of the legend.
XPIR (d = 2) on large databases as we show in Section 7.1 (this
is also why Pung has higher throughput than Pung-MS when
the batch size is 1), SealPIR is slightly faster when the database
is small (see the column with 65,536 elements in Figure 9).
Ultimately, we ﬁnd that if clients retrieve k = 64 messages, the
throughput of Pung+MS is 3.1× higher than that of Pung.
When it comes to network costs, the beneﬁts of SealPIR and
mPIR are considerable. Figure 14 depicts the total network cost
incurred by a single client for one round of the Pung protocol.
We ﬁnd that the compressed queries and fewer buckets result in
savings of over 36×. In particular, the per-client communication
costs are cut down to 7.7 MB per round for k = 16 (versus
279 MB in the original Pung implementation).
974
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:31:59 UTC from IEEE Xplore.  Restrictions apply. 
8 Discussion
SealPIR signiﬁcantly reduces the network cost of XPIR, while
introducing modest computational overheads. However, there
are several opportunities to reduce CPU costs further. Observe
that in EXPAND and Stern’s protocol, when the database dimen-
sion (d) is greater than 1 (see Section 3.4) the computation
consists of several matrix-vector products. We can therefore
implement the optimization described by Beimel et al. [16]
where multiple queries (from potentially different users) are
aggregated to form a matrix; the server can then use a subcubic
matrix multiplication algorithm to compute the result (§2.2).
Another area of potential improvement is in the design of
PBCs. As we show in our evaluation, PBCs built from reverse
hashing reduce costs over existing methods, but so far we have
only studied allocation strategies that are typically used for on-
line load balancing (i.e., balls arrive one at a time). We could
also consider strategies that optimize for the ofﬂine setting in
which all balls are available at the same time (which is the case
in PBCs). In this setting, the allocation process can be phrased
in terms of orienting the edges of undirected graphs in order
to obtain directed graphs with minimum in-degree [25]. Opti-
mal solutions for this problem can be computed in polynomial
time [30], and linear time approximations also exist [25, 35, 41].
Acknowledgments
We thank Esha Ghosh, Trinabh Gupta, Jay Lorch, Michael
Walﬁsh, and Sergey Yekhanin for their helpful feedback. We
thank Peter Rindal for sharing his estimates of Cuckoo hashing’s
failure probability. Sebastian Angel was supported by NSF grant
CNS-1514422 and AFOSR grant FA9550-15-1-0302.
Appendix
A Query expansion
A.1 Substitution operator
i
= Z
We now give details on how the substitution operator is imple-
mented. Let Φ
i be the i-th cyclotomic polynomial.6 As we dis-
cuss in Section 3.1, we pick Φ
= xN + 1, where N is a power of
two (hence i = 2N). Recall from that same section that FV plain-
(x), and cipher-
[x]/Φ
texts are polynomials in the ring Rt
i
(x).
[x]/Φ
= Z
texts are two polynomials, each in the ring Rq
i
The secret key sk is a randomly sampled polynomial in R2.
Let p(x) be the plaintext encrypted by ciphertext c = (c0, c1).
Our goal is to substitute in p(x) every instance of x with xk for
some integer k, by operating directly on c. Gentry et al. [44,
§4.2] show that if k ∈ Z∗
i (i.e., k is odd so that it is coprime
with i), performing the substitution directly on the ciphertext
polynomials (c0, c1) and the secret key achieves this goal.
q
t
(k)
Speciﬁcally, let c
be the result of replacing every instance
of x in the ciphertext polynomials c0 and c1 with xk. Similarly,
be the result of replacing every instance of x in the
let sk
(k)
secret key sk with xk. The result of decrypting c
is
therefore p(xk)—which is exactly what we want.
with sk
(k)
(k)
One issue with the above is that EXPAND (Figure 3) uses the
6The i-th cyclotomic polynomial is the unique irreducible polynomial with
integer coefﬁcients that is a factor of xi − 1 but not of xj − 1 for any j < i.
975
(k)
, and adds it to the input
output ciphertext after substitution, c
ciphertext c in each iteration of the inner loop (see Lines 10 and
11). This operation is not well deﬁned since both ciphertexts are
encrypted under different keys (substitution essentially changes
the key under which the ciphertext is encrypted). To address
this, we perform an operation called key switching [20], which
under some public
allows us to transform an encryption of c
key associated with sk
under some
public key associated with the original key sk (which is the key
under which c is also deﬁned).
, to an encryption of c
(k)
(k)
(k)
Note that the server needs some auxiliary information in order
to perform key switching. In particular, the server needs a key-
switching matrix showing how to go from sk
to sk (see [44,
Appendix D] for details), which the client must generate. Since
in EXPAND substitution is called for different values of k (notice
that in Line 10 and 11 in Figure 3 the value of k depends on j),
the client must provide a key-switching matrix for each of them.
However, this only needs to be done once and it depends only
on the size of the database.
(k)
The above allows the server to compute EXPAND: the server
ﬁrst does the substitution followed by the appropriate key
switch, and ﬁnally performs the addition in the inner loop.
A.2 Correctness of query expansion
Below we prove that EXPAND (Figure 3) correctly expands one
ciphertext into a vector of n ciphertexts with the desired contents.
The following theorem makes this formal.
Theorem 1. Let N be a power of 2, N ≥ n, and query = Enc(xi)
o0, . . . , on−1 of EXPAND(query) satisfy, for all 0 ≤ k ≤ n − 1:
be the client’s encoding of index i. The n output ciphertexts
(cid:2)
=
ok
Enc(1)
Enc(0)
if i = k
otherwise
(cid:3)
Proof. It sufﬁces to prove the case for n = 2
. For j =
{0, 1, . . . , (cid:4) − 1}, we claim that after the jth iteration of the
] such that
outer loop, we have ciphertexts = [c
(cid:2)
(cid:2)
ciphertexts[k] =
Enc(2j+1xi−k)
Enc(0)
(cid:2)
2j+1−1
0, . . . , c
if i ≡ k
otherwise
(mod 2j+1)
.
(cid:2)
array ciphertexts
We prove the claim by induction on j. The base case j = 0 is
explained in the main text of Section 3.3. Suppose the claim is
true for some j ≥ 0. Then in the next iteration, we compute an
For the ﬁrst half of the array, i.e., 0 ≤ k < 2j+1, we have
(cid:2)[k] = ciphertexts[k] + Sub(ciphertexts[k], N/2j+1 +
ciphertexts
(cid:16)= k (mod 2j+1),
1). If i
is an en-
cryption of 0; otherwise, there is an integer r such that
i − k = 2j+1 · r, and Sub(ciphertexts[k], N/2j+1 + 1) =
(N/2j+1+1)(2j+1r)) = Enc(2j+1(−1)rxi−k). Hence, if
Enc(2j+1x
(cid:2)[k] is an encryption of 0; otherwise,
r is odd, then ciphertexts
(cid:2)[k] is an encryption of 2j+2xi−k. So the claim follows
ciphertexts
because r is even if and only if i ≡ k (mod 2j+2).
then ciphertexts
(cid:2)[k]
We now prove the claim for the second half of the ar-
. The only interesting case is i ≡ k − 2j+1
(cid:2)
ray ciphertexts
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:31:59 UTC from IEEE Xplore.  Restrictions apply. 
(mod 2j+1). In this case, we see that ciphertexts
Enc(2j+1(−1)(i−k)/2j+1
(cid:2)
(cid:3)
loop in EXPAND, we have an array of 2
Finally, with the above claim we show that after the outer
ciphertexts such that:
xi−k). So the same argument applies.
(cid:2)[k] is again
ciphertexts[k] =
xi−k)
(cid:3)
Enc(2
Enc(0)
if i ≡ k
otherwise
(mod 2
(cid:3))
, so i ≡ k (mod 2
(cid:3)
However, note that i < n = 2
(cid:3)) implies
i = k. Hence ciphertexts[k] is either an encryption of 0 or an
. To obtain an encryption of 0 or 1, we multiply
encryption of 2
ciphertexts[k] by the inverse of 2
modulo t in the last step
(Figure 3, Line 14).
(cid:3)
(cid:3)
A.3 Noise growth of query expansion
One advantage of our query expansion technique over the straw
man FHE solution given in Section 3.1 (besides the one men-
tioned in that section) is that our approach has much smaller
noise growth. We bound the noise growth of EXPAND (Figure 3)
in the theorem below. Before stating the theorem, we give some
background on noise. See the SEAL manual [28] for a more
detailed explanation. We have that the noise of the addition of
two ciphertexts is the sum of their individual noises. Plain mul-
tiplication by a monomial xj (for some j) with coefﬁcient 1 does
not change the noise, and plain multiplication by a constant α
multiplies the noise by α. Substitution adds a constant additive
term Bsub to the noise, which depends on the FV parameters.
Theorem 2. Let vout be the output noise of EXPAND, and vin be
the input noise. Let t denote the plaintext modulus in EXPAND,
and let k = (cid:7)log(n)(cid:8). We have that
≤ t · (2k(vin
+ 2Bsub
vout
))
Proof. Let vi be the noise after the ith iteration in EXPAND (set-
ting v0 = vin). Then vi
). Carrying out the sum,
we get
= 2(vi−1 + Bsub
= 2kv0 + 2(2k − 1)Bsub
vk
< 2k(v0 + 2Bsub
)
Since inverse ≤ t, the ﬁnal plain multiplication results in
≤ tvk. This completes the proof.
vout
B Cost of PBC variants
We have implemented ﬁve PBCs with different allocation al-
gorithms using reverse hashing. Our goal is to show that all of
them admit efﬁcient encoding and decoding procedures. For
the purpose of building a multi-query PIR scheme, we wish
to select a PBC variant that reduces the number of codewords
(m) and buckets (b). Our hypothesis is that PBCs that produce
low values of m and b result in more expensive encoding and
schedule generation procedures.
To test this hypothesis we create a collection with 131K
elements, each of which is 1 KB, and encode the collection
with the different PBCs for a batch size of k = 64. We then
measure the time to encode, decode, and generate a schedule.
We also experiment with other element and collections sizes
and ﬁnd that while the absolute costs vary, they are still small
976
PBC scheme
k-way replication
sharding
2-choice hashing
Pung Hybrid
Cuckoo hashing
Encode
GenSchedule
Decode
22.5 ms
52.1 ms
103.6 ms
101.8 ms
154.1 ms
5.8 μs
112.8 μs
212.9 μs
42.3 μs
319.2 μs
0.1 μs
0.3 μs
0.2 μs
1.2 μs
0.15 μs
FIGURE 15—Cost of operations for ﬁve PBCs implemented as part of
mPIR. The collection size (n) is 524,288 and the batch size (k) is 64.