/静态对象的构造就需要通过“init”来初始化。相应地，共享对象中还可能有“finit”段，
当进程退出时会执行”fini"段中的代码，可以用来实现类似C++全局对象析构之类的操作。
如果进程的可执行文件也有“init”段，那么动态链接器不会执行它，因为可执行文件
部分详细介绍程序初始化部分。
当完成了重定位和初始化之后，所有的准备工作就宜告完成了，所需要的共享对象也都
已经装载并且链接完成了，这时候动态链接器就如释重负，将进程的控制权转交给程序的入
口并且开始执行。
7.6.4Linux动态链接器实现
在前面分析Linux下程序的装载时，已经介绍了一个通过execveO系统调用被装裁到进
程的地址空间的程序，以及内核如何处理可执行文件。内核在装载完ELF可执行文件以后
就返回到用户空间，将控制权交给程序的入口，对于不同链接形式的ELF可执行文件，这
个程序的入口是有区别的。对于静态链接的可执行文件来说，程序的入口就是ELF文件头
里面的e_entry指定的入口：对于动态链接的可执行文件来说，如果这时候把控制权交给
e_entry指定的入口地址，那么肯定是不行的，因为可执行文件所依赖的共享库还没有被装
载，也没有进行动态链接。所以对于动态链接的可执行文件，内核会分析它的动态链接器地
址（在“interp”段），将动态链接器映射至进程地址空间，然后把控制权交给动态链接器。
Linux动态链接器是个很有意思的东西，它本身是一个共享对象，它的路径是
/lib/ld-linux.so.2，这实际上是个软链接，它指向/ib/ld-x.y.z.so，这个才是真正的动态连接器
文件，共享对象其实也是ELF文件，它也有跟可执行文件一样的ELF文件头（包括e_entry、
段表等）。动态链接器是个非常特殊的共享对象，它不仅是个共享对象，还是个可执行的程
序，可以直接在命令行下面运行：
Usage: 1d.8o [OPTION] ... EXECUTABLE-FILE [ARGSFORPROGRAM.. ]
$/1ib/1d-1inux.8o.2
in executable files using ELF shared 1ibraries tel1 the systen*8 program
loader to 1oad the helper progran from this file. Thie helper program loads
the shared 1ibraries needed by the progran executable, prepares the progran
command 1ine to load and run an ELF executable filej thi8 is like executing
to run, and runs it.
that file itself, but always uses this helper progran from the file you
file you run.
specified, instead of the helper program file specified in the executable
of this helper progran; chances are you did not intend to run this program.
程序员的自我修养一链接、装载与库
---
## Page 243
220
第7章动态链接
--1ist
--verify
list al1 dependencies and how they are resolved
linked object we can handle
verify that given object really is a dynamically
--1ibrary-path PATH
use given PATH instead of content of the environment
--inhibit-rpath LIST
Ignore RUNPATH and RPATH information in object names
variable LD_LIBRARY_PATH
in LIST
其实Linux的内核在执行execveO时不关心目标ELF文件是否可执行（文件头e_type
是ET_EXEC还是ET_DYN)，它只是简单按照程序头表里面的描述对文件进行装载然后把
话就是动态链接器的e_entry）。这样我们就很好理解为什么动态链接器本身可以作为可执行
程序运行，这也从一个侧面证明了共享库和可执行文件实际上没什么区别，除了文件头的标
志位和扩展名有所不同之外，其他都是一样的，Windows系统中的 EXE和DLL也是类似的
区别，DLL也可以被当作程序来运行，Windows 提供了一个叫做rundII32.exe的工具可以把
一个DLL当作可执行文件运行。
Linux的 ELF动态链接器是Glibc的一部分，它的源代码位于Glibc的源代码的elf目录
下面，它的实际入口地址位于sysdeps/i386/dl-manchine.h中的_start（普通程序的入口地址
_start(在 sysdeps/i386/elf/start.S，本书的第 4 部分还会详细分析）。
_start 调用位于elf/rtld.c的_dl_start(O函数。_dl_start(函数首先对 Id.so（以下简称
ld-x.y.z.so为ld.so）进行重定位，因为Id.so自己就是动态链接器，没有人帮它做重定位工作，
所以它只好自己来，美其名日“自举”，自举的过程需要十分的小心谨慎，因为有很多限制，
这个我们在前面已经介绍过了，完成自举之后就可以调用其他函数并访问全局变量了。调用
关的处理之后就进入了_d_main，这就是真正意义上的动态链接器的主函数了。_d_main在
一开始会进行一个判断：
if (*user_entry = (E1fW(Addr)) ENTRY_POINT)
itself! This means someone ran 1d.so as a command.
/* Ho ho. We are not the program interpreter!  We are the progran
Well, that
might be convenient to do sometimes.1
We support it by
interpreting the args like this:
1d.8o PROGRAN ARGS...
The first argument is the name of a file containing an &LP
To simplify 1ife here, PROGRAM is searched for using the
executable ve will load and run with the following argument8.
1ike that. We just load it and use its entry point; we don't
normal rules for shared objects, rather than $PATH or anything
pay attention to its PT_INreRP command (we are the interpreter
ourselves).  This is an easy way to test a new ld.so before
installing it. */
程序员的自我修养一键接、装载与库
---
## Page 244
7.7显式运行时链接
221
很明显，如果指定的用户入口地址是动态链接器本身，那么说明动态链接器是被当作可
执行文件在执行，在这种情况下，动态链接器就会解析运行时的参数，并且进行相应的处理。
dL_main本身非常的长，主要的工作就是前面提到的对程序所依赖的共享对象进行装载、符
号解析和重定位，我们在这里就不再详细展开了，因为它的实现细节又是一个非常大的话题。
关于动态链接器本身的细节实现虽然不再展开，但是作为一个非常有特点的，也很特殊
的共享对象，关于动态链接器的实现的儿个间题还是很值得思考的：
1.动态链接器本身是动态链接的还是静态链接的？
动态链接器本身应该是静态链接的，它不能依赖于其他共享对象，动态链接器本身是用
来帮助其他ELF文件解决共享对象依问题的，如果它也依赖于其他共享对象，那么
谁来帮它解决依赖问题？所以它本身必须不依赖于其他共享对象，这一点可以使用ldd
来判断：
$ 1dd/1ib/1d1inux,8o.2
statica1ly linked
2.动态链接器本身必须是PIC的吗？
是不是PIC对于动态链接器来说并不关键，动态链接器可以是PIC的也可以不是，但往
往使用PIC会更加简单一些，一方面，如果不是PIC的话，会使得代码段无法共享，浪
费内存：另一方面也会使ld.so本身初始化更加复杂，因为自举时还需要对代码段进行
重定位。实际上的 Id-linux.so.2是PIC的。
3.动态链接器可以被当作可执行文件运行，那么的装载地址应该是多少？
ld.so的装载地址跟一般的共享对象没区别，即为0x00000000。这个装载地址是一个无
效的装载地址，作为一个共享库，内核在装载它时会为其选择一个合适的装载地址。
7.7
显式运行时链接
支持动态链接的系统往往都支持一种更加灵活的模块加载方式，叫做显式运行时链接
（Explicit Run-time Linking），有时候也叫做运行时加载。也就是让程序自己在运行时控制
加载指定的模块，并且可以在不需要该模块时将其卸载。从前面我们了解到的来看，如果动
态链接器可以在运行时将共享模块装载进内存并且可以进行重定位等操作，那么这种运行时
加载在理论上也是很容易实现的。面且一般的共享对象不需要进行任何修改就可以进行运行
时装载，这种共享对象往往被叫做动态装载库（DynamicLoadingLibrary），其实本质上它
跟一般的共享对象没什么区别，只是程序开发者使用它的角度不同，
这种运行时加载使得程序的模块组织变得很灵活，可以用来实现一些诸如插件、驱动等
功能。当程序需要用到某个插件或者驱动的时候，才将相应的模块装载进来，而不需要从一
程序员的自我修养一链接、装载与库
---
## Page 245
222
第7章动态链接
开始就将他们全部装载进来，从而减少了程序启动时间和内存使用。并且程序可以在运行的
时候重新加载某个模块，这样使得程序本身不必重薪启动而实现模块的增加、剩除、更新等，
这对于很多需要长期运行的程序来说是很大的优势。最常见的例子是Web服务器程序，对于
Web服务器程序来说，它需要根据配置来选择不同的脚本解释器、数据库连接驱动等，对于
不同的脚本解释器分别做成一个独立的模块，当Web服务器需要某种脚本解释器的时候可以
将其加载进来：这对于数据库连接的驱动程序也是一样的原理。另外对于一个可靠的Web服
务器来说，长期的运行是必要的保证，如果我们需要增加某种脚本解释器，或者某个脚本解
释器模块需要升级，则可以通知Web服务器程序重薪装载该共享模块以实现相应的目的。
在Linux中，从文件本身的格式上来看，动态库实际上跟一般的共享对象没有区别，正
如我们前面讨论过的。主要的区别是共享对象是由动态链接器在程序启动之前负责装载和链
接的，这一系列步骤都由动态连接器自动完成，对于程序本身是透明的：面动态库的装载则
是通过一系列由动态链接器提供的API，具体地讲共有4个函数：打开动态库（dlopen）
查找符号（dlsym）、错误处理（dlerror）以及关闭动态库（dlclose），程序可以通过这儿个
API对动态库进行操作。这儿个API的实现是在/ib/libdl.so.2里面，它们的声明和相关常量
被定义在系统标准头文件，我们先来看看这几个函数的具体意义，然后再演示一个
很有意思的小程序。
7.7.1dlopen()
dlopenO函数用来打开一个动态库，并将其加载到进程的地址空间，完成初始化过程，
它的C原型定义为：
void · dlopen(const char *filenane, int flag):
第一个参数是被加载动态库的路径，如果这个路径是绝对路径（以“/”开始的路径），
则该函数将会会试直接打开该动态库：如果是相对路径，那么dlopen0会会试在以一定的顺
序去查找该动态库文件：
（1）查找有环境变量LD_LIBRARY_PATH指定的一系列目录（我们在后面会详细介
绍LD_LIBRARY_PATH环境变量）。
(2）查找由/etc/ld.so.cache里面所指定的共享库路径。
（3）Mib、/usr/lib注意：这个查找顺序与旧的a.out 装载器的顺序刚好相反，旧的a.out
的装载器在装载共享库的时候会先查找/usr/lib，然后是/lib。
当然，这在理论上不应该成为一个问题，因为所有的库都应该只存在于某个目录中，而
不应该在多个目录有不同的副本，这将会导致系统变得极为不可靠。
很有意思的是，如果我们将filename这个参数设置为0.那么dlopen返回的将是全局符
号表的句柄，也就是说我们可以在运行时找到全局符号表里面的任何一个符号，并且可以执
程序员的自我修养一链接、装载与库
---
## Page 246
7.7显式运行时键接
223
行它们，这有些类似高级语言反射（Reflection）的特性。全局符号表包括了程序的可执行
文件本身、被动态链接器加载到进程中的所有共享模块以及在运行时通过dlopen打开并且
使用了RTLD_GLOBAL方式的模块中的符号。
第二个参数fag表示函数符号的解析方式，常量RTLD_LAZY表示使用延迟绑定，当
函数第一次被用到时才进行绑定，即PLT机制：面RTLD_NOW表示当模块被加载时即完
成所有的函数绑定工作，如果有任何未定义的符号引用的绑定工作没法完成，那么dlopenO
就返回错误。上面的两种绑定方式必须选其一。另外还有一个常量RTLD_GLOBAL可以跟
上面的两者中任意一个一起使用（通过常量的“或”操作），它表示将被加载的模块的全局
符号合并到进程的全局符号表中，使得以后加载的模块可以使用这些符号，在调试程序的时
候我们可以使用RTLD_NOW作为加载参数，因为如果模块加载时有任何符号未被绑定的
话，我们可以使用dlerrorO立即捕获到相应的错误信息：而如果使用RTLD_LAZY的话，这
种符号未绑定的错误会在加载后发生，则难以插获。当然，使用RTLD_NOW会导致加载动
态库的速度变俊
dlopen的返同值是被加载的模块的句柄，这个句柄在后面使用dlsym或者dlclose时需
要用到，如果加载模块失败，则返回NULL。如果模块已经通过dlopen被加载过了，那么
返回的是同一个句柄。另外如果被加载的模块之间有依赖关系，比如模块A依赖与模块B.
那么程序员需要手工加载被依赖的模块，比如先加载B，再加载A。
事实上dlopen还会在加载模块时执行模块中初始化部分的代码，我们前面提到过，动
态链接器在加载模块时，会执行“.init”段的代码，用以完成模块的初始化工作，dlopen的
加载过程基本跟动态链接器一致，在完成装载、映射和重定位以后，就会执行“init”段的
代码然后返回。
7.7.2dlsym()
dlsym函数基本上是运行时装载的核心部分，我们可以通过这个函数找到所需要的符
号。它的定义如下：
void * dlsym(void *handle, char *synbo1) ;
定义非常简洁，两个参数，第一个参数是由dlopen0返回的动态库的句柄：第二个参数
即所要查找的符号的名字，一个以“vo”结尾的C字符串。如果dlsymO找到了相应的符号。
则返回该符号的值：没有找到相应的符号，则返回NULL。dlsymO返回的值对于不同类型的
符号，意义是不同的。如果查找的符号是个函数，那么它返回函数的地址：如果是个变量，
它返回变量的地址：如果这个符号是个常量，那么它返回的是该常量的值。这里有一个问题
是：如果常量的值刚好是NULL或者0呢，我们如何判断dIsymO是否找到了该符号呢？这
就要用到我们下面介绍的 dlerror(函数了。如果符号找到了，那么dlerrorO返回 NULL，如
程序员的自我修养一链接、装载与库
---
## Page 247
224
第7章动态链接
果没找到，dlerrorO就会返回相应的错误信息。
注
符号不仅仅是函数和变量，有时还是常量，比如表示编译单元文件名的符号等，这一般
由编译器和链接器产生，而且对外不可见，但它们的确存在于模块的符号表中。dlsyml
是可以查找到这些符号的，我们也可以通过“obidump-t”来查看符号表，常量在符号
表里面的类型是“ABS"”。
符号优先级
前面在介绍动态链接实现时，我们已经碰到过许多共享模块中符号名冲突的问题，结论
是当多个同名符号冲突时，先装入的符号优先，我们把这种优先级方式称为装载序列（Load
Ordering）.那么当我们的进程中有模块是通过dlopen(装入的共享对象时，这些后装入的模
块中的符号可能会跟先前已经装入了的模块之间的符号重复。那么这时候模块之间的符号冲
突该怎么解决呢？实际上不管是之前由动态链接器装入的还是之后由dlopen装入的共享对
象，动态链接器在进行符号的解析以及重定位时，都是采用装载序列。
那么当我们使用dlsymO进行符号的地址查找工作时，这个函数是不是也是按照装载
序列的优先级进行符号的查找呢？实际的情况是，dlsymO对符号的查找优先级分两种类
型。第一种情况是，如果我们是在全局符号表中进行符号查找，即dlopen()时，参数filename
为NULL，那么由于全局符号表使用的装载序列，所以dlsymO使用的也是装载序列。第
二种情况是如果我们是对某个通过dlopenO打开的共享对象进行符号查找的话，那么采用
的是一种叫做依赖序列（Dependency Ordering）的优先级。什么叫依赖序列呢？它是以
被dlopenO打开的那个共享对象为根节点，对它所有依赖的共享对象进行广度优先遍历，
直到找到符号为止。
7.7.3dlerror0
每次我们调用dlopenO、dlsym（或dlclose(以后，我们都可以调用dlerror(函数来判断
上一次调用是否成功。dlerrorO的返回值类型是char*，如果返回NULL，则表示上一次调用
成功：如果不是，则返回相应的错误消息。
7.7.4dlclose()
dlcloseO的作用跟dlopenO刚好相反，它的作用是将一个已经加载的模块卸载。系统会
维持一个加载引用计数器，每次使用dlopenO加载某模块时，相应的计数器加一：每次使用
dlcloseO卸载某模块时，相应计数器减一。只有当计数器值减到0时，模块才被真正地卸载
掉。卸载的过程跟加载刚好相反，先执行“.finit”段的代码，然后将相应的符号从符号表中
去除，取消进程空间跟模块的映射关系，然后关闭模块文件。
程序员的自我修养一键接、装载与库
---
## Page 248
7.7显式运行时链接
225
下面是一个简单的例子，这段程序将数学库模块用运行时加载的方法加载到进程中，然
后获取sin0函数符号地址，调用sinO并且返回结果：
#include 
#include 
int main(int argc, char* argv[11
(qnop)(oun）qnop
void* handle;
char* error;