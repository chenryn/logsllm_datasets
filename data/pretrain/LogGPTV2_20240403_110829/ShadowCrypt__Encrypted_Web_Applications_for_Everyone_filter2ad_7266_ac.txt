Output Substitution. When the application sets the textContent
property, it adds a text node to the document. ShadowCrypt’s
JavaScript code notices the sentinel value in the text node and ﬁnds
the ciphertext inserted. ShadowCrypt then uses the key ﬁngerprint
to identify the decryption key and attempts to decrypt the ciphertext.
If decryption succeeds, ShadowCrypt’s JavaScript code has the
sensitive data in the clear. It now needs to show this data to the user
while still isolating it from the application. To do this, it surrounds
the ciphertext string with a span element, creates a shadow tree
for the span element, and writes the cleartext into the shadow tree.
Figure 4 (right) shows the resulting DOM trees.
The composed tree of the output p element would look like the
HTML in Listing 1. Alice sees a personalized greeting as the original
application would show.
document treeshadow treedocumentppinputshadowroothostsinputdocument treeshadow treeshadow treedocumentppinputshadowroothostsHello,␣span!ciphertextshadowroothostsinputAlice=?shadowcrypt-ce4d75a0b5022f0b31cf62e150474d3
0adced1007de8b46c82a546fa9eff97a1?/FnXuSdlLi9
UEV554/CF9RYeMQ/le2ZkErLeyDU=??=
Figure 5: An encrypted messsage. We have set delimiters of the major parts
in bold.
4. SHADOWCRYPT IMPLEMENTATION
We have implemented ShadowCrypt as a Google Chrome browser
extension. The extension is available on the Chrome Store for
anyone to try out [43]. Since we do not use any non-standard
features, we believe ShadowCrypt should work just as well on any
other modern, standards-compliant browser with extension support.
We are currently working on an implementation for Firefox.
4.1 Shadowing Application UI
ShadowCrypt monitors the application’s user interface to iden-
tify encrypted text and input widgets, inserting appropriate shadow
inputs and outputs as needed. Content can make its way into the
application’s web page in different ways, such as when the page
ﬁrst loads as an HTML ﬁle, when JavaScript code inserts markup
through document.write(), or when JavaScript code uses the
DOM API to modify the document tree.
To monitor the page as it changes, ShadowCrypt relies on the
standard MutationObserver interface to register a callback that
the browser will invoke after every modiﬁcation to the document.
Recall that while the application code and ShadowCrypt share the
DOM, the browser provides trusted, isolated (or native) DOM APIs
to ShadowCrypt. Relying on MutationObservers has the added
advantage that these observers also run as the page is progressively
rendered.
ShadowCrypt searches all insertions for HTML text input wid-
gets and inserts shadows as needed. ShadowCrypt also supports the
textarea element and elements with the contentEditable
attribute set to true. The core idea behind supporting these elements
is the same as presented in Section 3.2.2 for input type=text
elements. We discuss the element speciﬁc details in Appendix B.
The essential concept behind ShadowCrypt applies equally to in-
put ﬁelds of type “ﬁle.” We are currently working to expand our
coverage to ﬁles, particularly images.
One limitation of our current implementation is that creating a
shadow tree does not result in a mutation event: shadow trees are
separate from the main document. As a result, an application using
Shadow DOM for its own input would not work with ShadowCrypt
today. We did not ﬁnd any application currently relying on Shadow
DOM.
To work around this limitation, we can modify the application’s
DOM APIs to detect new shadow trees and insert ShadowCrypt
mutation observers into the shadow trees as well. We have not done
this in our implementation, as we did not ﬁnd any application relying
on Shadow DOM right now. We stress that the above issue does not
affect the security of ShadowCrypt. We already require the user to
authenticate ShadowCrypt inputs via a passphrase.
4.2 Encrypting Text
ShadowCrypt encrypts text using the AES-CCM algorithm. In
the near future, the Web Cryptography API will make native and
hardware-based cryptography available to the web platform. For
now, we used the Stanford JavaScript Crypto Library’s (SJCL) im-
plementation [45]. Figure 5 presents an example of an encrypted
message. This encoded payload includes a format signature, the
ﬁngerprint of the key used to encrypt, and the encoded ciphertext,
including initialization vector and authentication data.
Format Signature (=?shadowcrypt-) This eases implementa-
tion of output decryption. ShadowCrypt’s mutation observer
examines content as it enters the document tree. The format
signature explicitly marks all ciphertext strings, making them
easy to ﬁnd via a regular expression search.
Key Fingerprint (ce4d...97a1) ShadowCrypt uses this ﬁnger-
print to look up the right key to decrypt the ciphertext, since
there may be data encrypted with different keys on the same
page. A question mark follows this as a separator.
Payload (/FnX...yDU=) This base64-encoded string internally con-
sists of the random initialization vector, the raw ciphertext,
and the message authentication code. Another question mark
follows this as a separator.
EOF Finally, the sequence “?=” denotes the end of the ciphertext
string.
4.2.1 Other Encryption Schemes
ShadowCrypt, by default, uses AES-CCM with a random IV for
maximum security, but it can easily support arbitrary encryption
schemes for more functionality. We currently also support a search-
able encryption scheme that works transparently with existing web
services such as Gmail and Facebook.
The key difference between the searchable encryption scheme and
the default scheme is the addition of encrypted keywords at the end
of the encrypted message. When encrypting text, ShadowCrypt’s
code computes a deterministic hash (keyed with the encryption key)
of each unique word in the input. ShadowCrypt then appends these
hashes at the end of the encrypted text sent to the application.
To search, ShadowCrypt prepares an encrypted query by perform-
ing just the keyword extraction procedure on the cleartext query,
resulting in the hashes of each cleartext keyword in the query. The
application can use its original keyword searching functionality to
ﬁnd encrypted documents from this query.
Our searchable encryption scheme creates a new side-channel
vulnerability, but we chose this scheme because it works transpar-
ently with the search functionality of current web applications. It is
not difﬁcult to support other (more-secure) searchable encryption
schemes if we can modify application code. Further, users inter-
ested in stronger security can always use the more secure encryption
schemes (but without search functionality).
We also built a variant of ShadowCrypt that uses asymmetric
encryption. This variant uses the OpenPGP.js library [40] to handle
the cryptographic operations. Thus far, we have not incorporated
PGP into our release due to performance reasons. The asymmetric
cryptography takes a long time to process each message. The slowest
part has been decrypting a message, when we used RSA keys. The
keys tend to have small public exponents, so encrypting was much
faster than decrypting. This meant that, while one could enter
text relatively smoothly, the page would freeze up whenever the
application tried to display encrypted content. See Section 6 for our
timing measurements.
4.2.2 Manifest Files
By default, ShadowCrypt applies AES-CCM encryption to all in-
put elements on a page. Often, encryption of all inputs would break
critical functionality. For example, while encrypting the email body
in Gmail is OK, encrypting the contents of the “To” ﬁeld would ren-
der the message undeliverable. ShadowCrypt supports a keyboard
command (Ctrl+Space) to disable encryption on a particular input
widget.
To ease usability, we have also implemented support for mani-
fest ﬁles in ShadowCrypt. These ﬁles specify which input ﬁelds
Figure 6: User interface for managing keys at the input widget. Clicking on
“Unlock” turns off encryption, and clicking on a particular key encrypts with
that key.
ShadowCrypt should not encrypt. Manifest ﬁles can also list which
input ﬁelds should apply the searchable encryption scheme or the en-
crypted query generation scheme. We envision a centralized, trusted
market for these manifest ﬁles. We currently have manifest ﬁles for
Gmail, Twitter, Facebook, and Asana.
Manifest ﬁles are a usability improvement and do not affect the
security of ShadowCrypt. Users can still verify the presence of
secure input based on the passphrase.
5. USER INTERFACE
Our goal with ShadowCrypt is transparent usability as well as
security. A good user interface that helps the user make the right
decision by default is a key component of ShadowCrypt. Critical
to security is ensuring that the user only enters sensitive data in the
ShadowCrypt elements and a good key management interface.
Authenticating to the User. ShadowCrypt ensures that the user
only enters clear text input into the secure shadow inputs by au-
thenticating shadow inputs with a secret passphrase. While set-
ting up ShadowCrypt, the user and ShadowCrypt identify a secret
passphrase. ShadowCrypt includes this passphrase in all the shadow
inputs it creates.
We rely on the user to input sensitive data only after checking for
the presence of this passphrase. Figure 6 shows an example widget
with the secret passphrase. Such reverse passwords are common in
web applications [2, 3].
Key Management UI. ShadowCrypt maintains a key database in
the private storage area that the browser provides to each extension.
Google Chrome automatically synchronizes this database across all
of a user’s browsers. The database supports an arbitrary number of
keys tied to each application (identiﬁed by the origin). Our released
version of ShadowCrypt only supports symmetric encryption, and
keys are 128 bits. Figure 7 shows the key management page for
ShadowCrypt.
Figure 7: Main ShadowCrypt key management user interface.
When the user clicks on a particular key icon, the individual
key’s management page pops up (Figure 8). Each key has a friendly
mnemonic name and a unique color. Users can also set a default
key for the application. Users can import and export keys by copy-
ing/pasting a text string. ShadowCrypt also allows users to annotate
keys with text reminders to help remember their history and prove-
nance. ShadowCrypt thus relieves the privacy diffusion problem by
putting the users back in charge of sharing data (by controlling key
distribution).
Figure 8: User interface for managing individual keys, reached by clicking
on a key icon in Figure 7.
Key management is a well-known, hard, but important problem
that is orthogonal to our work. We designed our system to handle
key distribution independently of the isolation system that we have
developed. ShadowCrypt also provides a new platform for the
broader community to develop and evaluate novel key management
systems. Many of today’s well-known encryption products also rely
on the user to manually export and share keys, including Google’s
recently released End-to-End extension. PGP uses a collection
of public key servers to distribute keys and associate them with
identities. We are currently working on integrating several key
management mechanisms such as keybase.io [27] and cloud-based
key management services proposed in usable security literature [14].
We are currently extending the current key management mecha-
nism in three directions. First, we are adding support for per user
(or user group) keys instead of the current per-site keys. A user can
designate a particular key (across applications) for (say) her family
or for her co-workers. We believe that such a design will be more
intuitive for the typical user. Second, we are investigating designs
for managing public keys and specifying multiple recipients for our
PGP-based variant. Finally, we are investigating an easier interface
for sharing and distributing keys (e.g., via a centralized service, such
as Keybase [27]).
The shadow input widgets that ShadowCrypt creates have a cou-
ple of features to help with key management. First, the shadow input
widget has a color border around it that matches the color of the
key currently in use. Second, ShadowCrypt adds a lock icon at the
bottom right corner of the widget. Clicking the lock icon, users can
choose alternate keys or disable encryption altogether (Figure 6).
6. PERFORMANCE EVALUATION
Figure 9: Time taken for ShadowCrypt to create shadow inputs. Median
and quartile measurements from 100 trials on pages as the number of inputs
varies.
Figure 11: Time taken for ShadowCrypt to encrypt a message. Median and
quartile measurements from batches of 100 messages for each length. Solid
line shows PGP variant. Dotted line shows AES-CCM variant.
Such a number of inputs/outputs are not representative of typical
web application behavior. For example, Gmail normally loads 50
email threads on the inbox page and only has 3 input elements.
ShadowCrypt’s impact on performance in those cases is negligible.
To measure the overhead of cryptographic operations as the length
of the message varies, we measure the timing of ShadowCrypt’s
encryption functions as we varied the length of cleartext from 20 to
2,621,440 characters. Figure 11 shows the results of 100 trials of
each. We ﬁnd that encryption takes under 1 ms for messages up to
640 characters long. Thus, ShadowCrypt’s repeated encryption for
user inputs does not add any noticeable overhead on a page.
The Web Cryptography API is already available in Chrome’s
Canary and Firefox’s Nightly release channel. We benchmarked the
Web Cryptography API in Google Chrome Canary and found that it
performs AES operations 4.7 times as fast as SJCL (encrypting a
1 KiB message with a 256-bit key 1,000 times) and RSA operations
12 times faster than OpenPGP.js (encrypting/decrypting a 256-bit
message with a 2048-bit key 1,000 times). It performs better than
the JavaScript-based cryptography implementation we used in our
overall performance tests, so we have not tried to optimize the
cryptography code.
To estimate ShadowCrypt overhead for real-world applications,
we loaded a typical page from three of our case studies (discussed
next) and estimated the overhead if all inputs and user-generated
strings switched to using ShadowCrypt. Table 1 lists the number
of user-generated strings and input ﬁelds for each page and the
estimated load time increase in milliseconds. To estimate the per-
centage overhead, we measured the page load time on a cold and hot
cache.4 Table 1 also lists these times and the percentage overhead
introduced by ShadowCrypt in each case.
Overall, we ﬁnd that ShadowCrypt does not impose signiﬁcant
overheads on the page, with a high of 8% overhead on hot cache
for a long Reddit comments page. Our estimates of load times are
conservative (particularly in the hot cache case). Google Analytics’
Site Speed Data, which measures real-world page-load times (even
with caching), reports a median (mean) page load time of just under
3000 ms (6000 ms) around the world [26].
7. CASE STUDIES
4We used the webpagetest.org infrastructure (standard
amongst the Web Performance community) with the connection
type set to “Cable” [34]. The load times on our machines are com-
parable.
Figure 10: Time taken for ShadowCrypt to rewrite encrypted messages on
a page. Median and quartile measurements from 100 trials on pages as the
number of encrypted messages varies. Solid line shows PGP variant. Dotted
line shows AES-CCM variant.
Next, we discuss the performance overhead of ShadowCrypt on
the user’s browsing.
We ﬁrst measured the overhead introduced by ShadowCrypt’s
MutationObserver to the user’s day-to-day browsing. We
conducted these tests on an Intel 2.5GHz x 4 with 8GB of RAM. We
ran the Dromaeo DOM benchmark [13]. This test only measures the
overhead introduced by ShadowCrypt to a page’s normal operation
since the page does not contain any encrypted input/outputs. We
found that the Dromaeo benchmark scores dropped from 1,617