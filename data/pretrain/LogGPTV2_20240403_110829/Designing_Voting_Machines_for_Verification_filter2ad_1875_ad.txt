vote. To ensure that a malicious VoteSelection module
does not trick the user into pressing the cast button pre-
maturely, the VoteConﬁrmation module will only enable
the cast button after it detects that the user paged through
all the vote conﬁrmation screens.
We want voters to be able to cancel the voting process
at any time, regardless of whether they are interacting
with the VoteSelection or VoteConﬁrmation modules.
Since the VoteSelection module is untrusted, one pos-
sibility would be to have the IOMultiplexor implement
a virtual cancel button or conditionally pass data to the
VoteConﬁrmation module even when the VoteSelection
module is active. Rather than introduce these complexi-
ties, we chose to have the VoteCore module handle can-
cellation via a physical cancel button. The cancel button
is enabled (and physically lit by an internal light) until
the VoteCore begins the process of storing a ballot and
canceling an authentication token.
5 Prototype implementation
To evaluate the feasibility of the architecture presented in
Section 4, we built a prototype implementation. Our pro-
totype uses off-the-shelf “gumstix connex 400xm” com-
puters. These computers measure 2cm by 8cm in size,
cost $144 apiece, and contain an Intel XScale PXA255
processor with a 400 MHz StrongARM core, 64 MB of
RAM, and 16 MB of ﬂash for program storage. We en-
able hardware isolation by using a separate gumstix for
each component in our architecture.
We do not claim that the gumstix would be the best
way to engineer an actual voting system intended for use
in the ﬁeld. However, the gumstix have many advantages
as a platform for prototyping the architecture. In con-
junction with an equally sized expansion board, the pro-
cessors support three external RS-232 serial ports, which
transmit bidirectional data at 115200 kbps. We use se-
rial ports as our buses. Additionally, each gumstix sup-
ports many general purpose input/output (GPIO) regis-
ters, which we use for our wires. Finally, the XScale
USENIX Association
Security ’06: 15th USENIX Security Symposium
329
Figure 4: We show the front and back of a gumstix as
well as an expansion board through which the GPIO and
serial ports are soldered. The quarter gives an indication
of the physical size of these components.
Figure 5: The mounting board for a single component. It
contains three serial ports (along the top), 4 GPIO pins
and a ground pin (along the right side), as well as a gum-
stix processor board mounted atop an expansion board.
processor supports an LCD and touch screen interface.
The gumstix platform’s well-designed toolchain and
software environment greatly simpliﬁed building our
prototype. The gumstix, and our prototype, use a min-
imal Linux distribution as their operating system. Our
components are written in Java and run on the Mi-
crodoc J9 Java VM; its JIT provides a signiﬁcant speed
advantage over the more portable JamVM Java inter-
preter. Our choice of Java is twofold: it is a type-safe
language and so prevents a broad range of exploits; sec-
ondly, several program veriﬁcation tools are available
for verifying invariants in Java code [8, 19]. C# is an-
other natural language choice since it too is type-safe
and the Spec# [5] tool could aid in veriﬁcation, but C#
is not supported as well on Linux. We view a rich sta-
ble of effective veriﬁcation tools to be just as important
as type-safety in choosing the implementation language
since software tools can improve conﬁdence in the voting
software’s correctness. Both can eliminate large classes
of bugs.
5.1
Implementation primitives
Our architecture requires implementations of two sepa-
rate communications primitives: buses and wires. It is
straightforward to implement buses using serial ports on
the gumstix. To do so, we expose connectors for the se-
rial ports via an expansion board connected to the main
processor. Figures 4 and 5 show an example of such an
expansion board. We additionally disable the getty ter-
minal running on the serial ports to allow conﬂict free use
of all three serial ports. The PXA255 processor has 84
GPIO pins, each controlled by registers; we implement
wires using these GPIOs. A few of the pins are exposed
on our expansion board and allow two components to be
interconnected via their exposed GPIO pins. Each GPIO
pin can be set in a number of modes. The processor can
set the pin “high” so that the pin has a 3.3 volt difference
between the reference ground; otherwise, it is low and
has a 0 voltage difference between ground. Alternatively,
a processor can poll the pin’s state. To enforce the uni-
directional communication property, particularly when a
single wire is connected to more than two GPIOs, we
could use a diode, which allows current to ﬂow in only
one direction 4. We currently rely on software to enforce
that once a GPIO is set high, it cannot ever be set low
without ﬁrst restarting the process; this is a property one
could enforce in hardware via a latch, though our current
prototype does not do so yet.
In addition to the GPIOs, the PXA255 exposes an
NRESET pin. Applying a 3.3v signal to the NRESET
pin causes the processor to immediately halt execution;
when the signal is removed, the processor begins in a
hard boot sequence. The gumstix are able to reboot in
under 10 seconds without any optimizations, making the
NRESET pin nearly ideal to clear a component’s state
during a reset. Unfortunately, the speciﬁcs of the reboot
sequence causes slight problems for our usage. While the
NRESET wire is held high, the GPIO pins are also high.
In the case where one component reboots before another
(or where selective components are reboot), setting the
GPIOs high will inadvertently propagate a signal along
the wire to the other components. Ideally, the pins would
be low during reset. We surmise that designing a chip
for our ideal reset behavior would not be difﬁcult given
4Even this may not be enough, since an actual diode does not be-
have as the idealized diode we rely upon.
330
Security ’06: 15th USENIX Security Symposium
USENIX Association
Figure 6: A picture of our prototype implementation.
There is one board for each component in the system.
The magnetic swipe card (along the left) is used for au-
thentication, while the cast button is in the upper left
component.
Figure 7: The right image shows a screenshot of the
VoteSelection component displaying referenda from the
November 2005 election in Berkeley, CA. We ﬂipped a
coin to choose the response shown on this screen.
sufﬁcient hardware expertise. Since the microprocessors
in our platform do not exhibit our ideal behavior, in our
prototype we have a separate daemon connected to an
ordinary GPIO wire that stops the Java process running
the component code when the reset pin goes high and
then resets all wire state to low. The daemon starts a new
component process when the signal to its reset pin is re-
moved. This is just a way of emulating, in software, the
NRESET semantics we prefer. Of course, a production-
quality implementation would enforce these semantics in
trusted hardware.
We use a Kanecal KaneSwipe GIT-100 magnetic card
reader for authorizing voters to use the machine. A voter
would receive a card with authentication information on
it from poll workers upon signing in. The voter cannot
forge the authentication information (since it contains a
public key signature), but can use it to vote once on a
designated DRE. The reader has an RS-232 interface, so
we are able to use it in conjunction with the serial port
on the gumstix.
Finally, our implementation of the VoteCore compo-
nent uses a compact ﬂash card to store cast ballot im-
ages and invalid magcard identiﬁers. Election ofﬁcials
can remove the ﬂash card and transport it to county head-
quarters after the close of polls. A deployed DRE might
use stronger privacy-protection mechanisms, such as
a history-independent, tamper-evident, and subliminal-
free data structure [25]. For redundancy, we expect a
deployed DRE to also store multiple copies of the votes
on several storage devices. A full implementation of
the VoteSelection component would likely also use some
kind of removable storage device to store the ballot def-
inition ﬁle.
In our prototype, we hard-code a sample
ballot deﬁnition ﬁle into the VoteSelection component.
This sufﬁces for our purposes in gauging the feasibility
of other techniques.
Our prototype consists of ﬁve component boards wired
together in accordance with Figure 3. We implement all
of the functionality except for the cancel button. See Fig-
ure 6 for a picture showing the ﬁve components and all
of their interconnections. Communication uses physical
buses and wires. The I/O multiplexer, after each update
operation, sends an image over a virtual bus connected
(connected via the USB network) to the PC for I/O. It
sends the compressed image it would ordinarily blit to
the framebuffer to the PC so that the PC can blit it to its
display. The gumstix only recently supported LCD dis-
plays, and we view our PC display as an interim solution.
The additional software complexity for using the LCD is
minimal as it only requires blitting an image to memory.
Figure 7 shows our voting software running on the
gumstix. We used ballot data from the November 2005
election in Alameda County, California.
6 Evaluation
6.1 Verifying the desired properties
Property 1. Recall that to achieve “memorylessness”
we must be able to show the DRE is always reset af-
ter a voter has ﬁnished using the machine, and the DRE
only opens a given ﬁle read-only or write-only, but not
USENIX Association
Security ’06: 15th USENIX Security Symposium
331
1
2
3
4
5
6
7
8
grabio.set();
... UPDATE DISPLAY ...
castenable.set();
if (cast.isSet()) {
while (true) {
toVoteCore.write(ballot);
}
}
1
2
3
4
5
6
7
8
9
byte [] ballot =
fromVoteConf.read();
if (ballot != null) {
INVALIDATE VOTER TOKEN ...
...
ballotbox.write (ballot);
while (true) {
resetWire.set();
}
}
Conﬁrm.java
VoteCore.java
Figure 8: Code extracts from the VoteConﬁrmation and VoteCore modules, respectively. Examining these code
snippets with the connection topology helps us gain assurance that the architecture achieves Properties 1 and 2.
both. To show that the DRE is reset after storing a
vote, we examine a snippet of the source code from
VoteCore.java, the source code for the VoteCore
module in Figure 8.
In line 7, after storing the ballot
into the ballot box, the VoteCore module continuously
raises the reset wire high. Looking at the connection dia-
gram from Figure 3, we note the reset wire terminates at
the ResetModule and induces it to restart all components
in the system. Further inspecting code not reproduced in
Figure 8 reveals the only reference to the ballotbox
is in the constructor and in line 5, so writes to it are con-
ﬁned to line 5.
Finally, we need merely examine every ﬁle open call
to make sure they are either read-only or write only. In
practice, we can guarantee this by ensuring writable ﬁles
are append-only, or for more sophisticated vote storage
mechanisms as proposed by Molnar et al., that the stor-
age layer presents a write-only interface to the rest of the
DRE.
Property 2. For the “consent-to-cast” property, we need
to verify two things: 1) the ballot can only enter the
VoteCore through the VoteConﬁrmation module, and 2)
the voter’s consent is required before the ballot can leave
the VoteConﬁrmation module.
Looking ﬁrst at Confirm.java in Figure 8, the
VoteConﬁrmation module ﬁrst ensures it has control of
the touch screen as it signals the IOMultiplexor with the
“grabio” wire. It then displays the ballot over the bus,
and subsequently enables the cast button. Examining the
hardware will show the only way the wire can be enabled
is through a speciﬁc GPIO, in fact the one controlled by
the “castenable” wire. No other component in the sys-
tem can enable the cast button, since it is not connected
to any other module. Similarly, no other component in
the system can send a ballot to the VoteCore module: on
line 6 of Confirm.java, the VoteConﬁrmation sends
the ballot on a bus named “toVoteCore”, which is called
the “fromVoteConf” bus in VoteCore.java. The
Communications
Display
Misc. (interfaces)
VoteSelection
VoteConﬁrmation
IOMultiplexor
VoteCore
ResetModule
Total
Java C (JNI) Total
2314
2991
468
416
25
25
377
377
126
126
77
77
900
846
121
121
5085
4302
677
52
0
0
0
0
54
0
783
Table 1: Non-comment, non-whitespace lines of code.
ballot is demarshalled on line 1. Physically examining
the hardware conﬁguration conﬁrms these connections,
and shows the ballot data structure can only come from
the VoteConﬁrmation module. Finally, in the VoteCore
module, we see the only use of the ballotbox is at line 5
where the ballot is written to the box. There are only two
references to the BallotBox in the VoteCore.java
source ﬁle (full ﬁle not shown here), one at the construc-
tor site and the one shown here. Thus we can be con-
ﬁdent that the only way for a ballot to be passed to the
BallotBox is if a voter presses the cast button, indicat-
ing their consent. We must also verify that the images
displayed to the voter reﬂect the contents of the ballot.
6.2 Line counts
One of our main metrics of success is the size of the
trusted computing base in our implementation. Our code
contains shared libraries (for communications, display,
or interfaces) as well as each of the main four modules in
the TCB (VoteConﬁrmation, IOMultiplexor, VoteCore,
and ResetModule). The VoteSelection module can be
excluded from the TCB when considering Properties 1
332
Security ’06: 15th USENIX Security Symposium
USENIX Association
and 2. Also included in the TCB, but not our line count
ﬁgures, are standard libraries, operating system code,
and JVM code.
In Table 1, we show the size of each trusted portion as
a count of the number of source lines of code, excluding
comments and whitespace.
The communications libraries marshal and unmarshal
data structures and abstract the serial devices and GPIO
pins. The display libraries render text into our user in-
terface (used by the VoteConﬁrmation component) and
ultimately to the framebuffer.
7 Applications to VVPATs and crypto-
graphic voting protocols
So far we’ve been considering our architecture in the
context of a stand-alone paperless DRE machine. How-
ever, jurisdictions such as California require DREs to be
augmented with a voter veriﬁed paper audit trail. In a
VVPAT system, the voter is given a chance to inspect the
paper audit trail and approve or reject the printed VVPAT
record. The paper record, which remains behind glass to
prevent tampering, is stored for later recounts or audits.
VVPAT-enabled DREs greatly improve integrity pro-
tection for non-visually impaired voters. However, a
VVPAT does not solve all problems. Visually impaired
voters who use the audio interface have no way to vi-
sually verify the selections printed on the paper record,
and thus receive little beneﬁt from a VVPAT. Also, a
VVPAT is only an integrity mechanism and does not help
with vote privacy. A paper audit trail cannot prevent a
malicious DRE from leaking one voter’s choices to the
next voter, to a poll worker, or to some other conspirator.
Third, VVPAT systems require careful procedural con-
trols over the chain of custody of paper ballots. Finally,
a VVPAT is a fall-back, and even in machines that pro-
vide a VVPAT, one still would prefer the software to be
as trustworthy as possible.
For these reasons, we view VVPAT as addressing
some, but not all problems. Our methods can be used to
ameliorate some of the remaining limitations, by provid-
ing better integrity protection for visually impaired vot-
ers, better privacy protection for all voters, reducing the
reliance on procedures for handling paper, and reducing
the costs of auditing the source code. Combining our
methods with a VVPAT would be straightforward: the
VoteConﬁrmation module could be augmented with sup-
port for a printer, and could print the voter’s selections at