’a’ and discard label 3 in the list for ’b’.
Scopes and delimiter hierarchy. The intervals that are
computed for each character indicate regions, or scopes, in
the input message where this character is used as delim-
iter. We call such intervals scope ﬁelds. A certain delimiter
character can be present multiple times in the scope ﬁeld of
a message. In this case, this delimiter splits the scope ﬁeld
into multiple parts. These individual parts are referred to
as delimited ﬁelds. Furthermore, scopes for different de-
limiter characters can overlap, indicating that a delimited
ﬁeld is further broken up into multiple, smaller parts de-
limited by another character. In other words, a delimited
ﬁeld can itself be a scope ﬁeld for another character.
As example, consider the HTTP GET request in Fig-
ure 2. One can see that the apache web server checks
different parts of the message for the occurrence of differ-
ent delimiter characters. The sequence ’\r\n’ is used to
split the entire message into lines, and thus, the server com-
pares every byte of the message against ’\r’. Hence, the
message is a scope ﬁeld for the character ’\r’, and each
line is a delimited ﬁeld. Then, the space character is used
to further split the ﬁrst line into three parts. Thus, the ﬁrst
line is not only a delimited ﬁeld (with regard to the ’\r’
delimiter), but also a scope ﬁeld (with regard to the space
character). The complete set of scopes for the exemplary
request are shown in the top, left part of Figure 2. The
corresponding intervals are depicted on the bottom left.
When extracting the structure of a message, it would be
desirable to obtain a hierarchy of ﬁelds that reﬂects nested
scopes. To determine such a relationship between scope
ﬁelds, we analyze the relationship between the intervals
that belong to different delimiter characters. When one
interval is a subset of another, the character that belongs
to the superset is considered to be the parent delimiter,
and its corresponding scope is called the outer scope. In
the special case that two intervals are the same, the scope
whose corresponding delimiter character is checked ﬁrst
in the execution trace is chosen as the outer scope. It is
also possible that two intervals overlap, but neither of the
two completely contains the other one. Note that we have
never observed such a case in practice. However, if en-
countered, we would deal with this situation by removing
both intervals from further consideration. This is because
it is not possible to clearly attribute a section of a message
to a certain delimiter in this special case. In case there is
no overlap between two intervals, the corresponding scope
ﬁelds are at the same hierarchical level, and the ﬁelds are
connected to the scope ﬁeld that encompasses both. When
there is no such scope, they are connected to the root node
(which represents the entire message).
Once we have identiﬁed an outermost scope (a scope
ﬁeld that is not contained in any other scope), we use the
corresponding character to break the scope ﬁeld into ﬁelds
separated by that delimiter. Then, we apply the same anal-
ysis recursively to all the delimited ﬁelds that have been
created.
In the example of the HTTP GET request, the
’\r’ character corresponds to the outermost scope ﬁeld.
Once this character is used to break the complete request
into lines, the analysis proceeds recursively for each line.
At this point, the scope that corresponds to the space char-
acter is the outermost scope, and as a result, the ﬁrst line is
broken into three ﬁelds. Eventually, our analysis produces
the hierarchy of scopes shown on the right in Figure 2.
Multi-byte delimiters. Some protocols use delimiters
that are longer than a single byte. It is, therefore, neces-
sary to extend single byte delimiters to multi-byte delim-
iters. We achieve this by checking the bytes before and
after all occurrences of a particular delimiter. The delim-
iter is extended in either direction by the maximum number
of preceding/succeeding bytes with constant value over all
occurrences of the delimiter. In the HTTP example intro-
duced previously, we would observe that the delimiter byte
’\r’ is always followed by the byte ’\n’. As a result, the
line delimiter is (correctly) extended to contain the multi-
byte sequence ’\r\n’.
Interestingly, certain protocols use multi-byte delimiters
that have to occur aligned at some word boundary. That is,
Figure 2. Finding delimiters.
the server does not check for such delimiters at all positions
(offsets) in the packet, but only at those that are located at a
word boundary. An example of such a delimiter is the Uni-
code string terminator in the SMB protocol. To detect such
delimiters, we use the techniques previously described, but
at a word level rather than the byte level (currently only for
a word size of two bytes). In other words, we look for com-
parison instructions with two-byte operands that compare
the same constant value against consecutive labels (which
are two bytes apart).
variable that points to the start of the target ﬁeld. Then,
the program can step through the message until this end
pointer is reached. When processing a variable length (tar-
get) ﬁeld, we expect the application to access a number of
consecutive bytes of the message. Typically, these repeated
accesses are performed in a loop. The condition that deter-
mines the end of these accesses (and the exit of the loop) is
derived from the length ﬁeld. This insight is leveraged to
specify an algorithm for identifying length ﬁelds, together
with their target ﬁelds.
3.2
Identifying length ﬁelds
An alternative mechanism to structure protocol mes-
sages are length ﬁelds. A length ﬁeld is a number of bytes
that store the length of another ﬁeld. This other ﬁeld, from
now on referred to as a target ﬁeld, holds a number of bytes
or ﬁxed-size records that are a function of the value stored
in the length ﬁeld. The goal of our analysis is to accu-
rately detect both length ﬁelds and the corresponding tar-
get ﬁelds. Initially, we do not make any assumption on the
encoding of the length ﬁelds, and we do not assume that
the target ﬁeld immediately follows the length ﬁeld itself.
Similar to the case with nested scope ﬁelds, a target ﬁeld
can itself contain other ﬁelds.
When an application parses a message that contains a
length ﬁeld, this length ﬁeld is typically used by the pro-
gram to determine the end of the target ﬁeld. For exam-
ple, the length ﬁeld can be used as a counter that is decre-
mented until it reaches zero. Another possibility is to ﬁrst
compute an “end pointer” by adding the length ﬁeld to a
Static analysis. Because our approach to detect length
ﬁelds requires the knowledge of loops and loop exit points
in the program, an initial static analysis step is required.
To this end, we employ a tool that we developed for a pre-
vious project [15]. To improve its accuracy with regard to
loop detection, a few additional improvements were neces-
sary. First, we implemented the Sreedhar algorithm [28],
which correctly handles non-natural/irreducible loops (i.e.,
loops with multiple entry points). Moreover, we extended
the tool with a very simple intra-procedural data ﬂow anal-
ysis and a heuristic [6] to recover jump table targets. When
the static analysis step terminates, it outputs the program’s
loops. As a result, we know (a) which comparison instruc-
tions represent loop exit points, and (b), the set of loops
that each instruction belongs to. Note that a single instruc-
tion can be part of multiple loops when loops are nested.
Finding length and target ﬁelds. Using the information
provided by our static analysis step, we scan the execu-
tion trace for all comparison instructions that are both loop
delimiter: "/"GET ... HTTP/1.1\r\nGET ... HTTP/1.1GET/index.htmlHTTP/1.1/indexhtmlindexdelimiter: "\r"    delimiter: " "                     delimiter: "."0   4   8  12  16  20   24   GET /index.html HTTP/1.1\r\nscan for "\r"scan for " "scan for "."scan for "/""\r"" "".""/"[0,25][0,23][4,15]  [4,9]Initial Intervalsexit points and that operate on tainted data. When such in-
structions are found, we know that the corresponding loop
is controlled by some bytes of the input. These bytes po-
tentially represent a length ﬁeld.
We then narrow down the results by further requiring
that a loop uses the same set of tainted bytes (labels) in
its exit condition for every iteration. The rationale behind
this is that, for length ﬁelds, we expect the tainted bytes
to appear in every loop iteration. Other uses of tainted
data in loop exit conditions, on the other hand, typically
do not repeatedly test the same exit condition on the same
bytes. Finally, if the taint labels in the set are consecutive,
the corresponding input bytes are considered a length ﬁeld
candidate.
Once we have identiﬁed length ﬁeld candidates, we at-
tempt to determine their corresponding target ﬁelds. As
discussed previously, we can identify those loops that are
controlled by a certain length ﬁeld. Now, we assume that
a target ﬁeld is comprised of all bytes in the message that
are accessed by a certain loop. For example, when a length
ﬁeld is used to control a loop that runs a pointer through
a target ﬁeld (either for copying the ﬁeld, or checking its
values), we expect that all of the target ﬁeld’s bytes are ac-
cessed by one or more instructions in at least one iteration.
Thus, for each length ﬁeld candidate, we record all the la-
bels (i.e., positions of input bytes) that are “touched” by a
loop that is controlled by this length ﬁeld. By touched, we
mean that the label appears as an operand of at least one
instruction executed by the loop.
In the next step, we remove all labels that are touched
in every loop iteration. The reason is that the presence of
those bytes is independent of the current loop iteration, and
thus, they are likely not related to the target ﬁeld currently
analyzed. As a convenient side effect, this also removes the
labels that belong to the length ﬁeld itself (since, by deﬁ-
nition, the labels of the length ﬁeld have to appear in the
exit condition in every loop iteration). Once we have de-
termined the set of input bytes that are accessed, we check
whether they are consecutive. If this is the case, we assume
that we have correctly identiﬁed a length ﬁeld with its cor-
responding target ﬁeld. If the bytes are not consecutive, the
length ﬁeld candidate is discarded.
Once a target ﬁeld is identiﬁed, we can look for padding
ﬁelds. Padding is used in some protocols to keep ﬁelds
aligned to a word size (either two, four, or eight bytes).
We detect a padding ﬁeld if we ﬁnd an appropriate number
of unused bytes immediately preceding or following the
end of the target ﬁeld. A byte is unused if, throughout the
execution trace, its taint label only occurs as operands of
move instructions.
Additional information on length and target ﬁelds can
be obtained by directly examining the parameters of sys-
tem calls which read data from the network, such as the
Unix read and recv system calls. If the number of bytes
to be read is tainted with a set of labels, those labels clearly
correspond to a length ﬁeld, while the bytes being read are
the target ﬁeld.
3.3 Extracting additional information
Once the input message is decomposed into its con-
stituent ﬁelds, we attempt to extract additional informa-
tion that might provide insight into the semantics of certain
ﬁelds. Currently, we derive four types of additional infor-
mation: First, we attempt to detect the use of keywords that
have a special meaning for the protocol. Second, we iden-
tify ﬁelds that are used as ﬁle names in ﬁle system accesses.
Third, we locate input ﬁelds that are directly echoed in a
program’s network output (e.g., part of the response to the
host that sent a request). This indicates that the ﬁeld might
be used as cookie or message identiﬁer. Fourth, we identify
pointer ﬁelds, which encode the absolute or relative offset
of another ﬁeld in the input message.
To identify keywords, we use two different techniques.
First, we scan the execution trace for the occurrence of x86
string compare instructions (such as comps) that success-
fully compare a sequence of one or more tainted input bytes
with a constant (untainted) string. The second check looks
for a sequence of comparison instructions that successfully
compare one or more bytes in a ﬁeld with untainted char-
acters. These comparisons have to be equality checks, all
other comparisons are ignored. The rationale behind our
keyword identiﬁcation is that protocol keywords are typ-
ically hardcoded in some way by the application. When
a certain sequence of characters is successfully compared
with tainted input bytes, we mark this sequence as a key-
word candidate. Note that our keyword detection leverages
information derived by the delimiter analysis. This is nec-
essary to exclude delimiter checks from the keyword anal-
ysis. Otherwise, all delimiter bytes would be considered as
keywords, as they appear as operands in successful com-
parison operations.
Once a keyword candidate is found, we then attempt to
verify it by scanning for this keyword in the server binary.
That is, a keyword candidate is considered a keyword only
when it is contained as a sequence of bytes in the appli-
cation binary. Additionally, we require keywords to be at
least three bytes long, to avoid false positives where a short
string occurs in the program binary by chance. Of course,
in general, a keyword does not necessarily have to appear
directly in the binary. However, since a keyword is a string
(or byte sequence) that is deﬁned by the protocol, and thus,
often encoded in the application, we consider this infor-
mation a valuable conﬁrmation. Moreover, we have so far
found all keywords of the protocols that we analyzed em-
bedded in the server binary.
The mechanism outlined above also allows us to im-
plement a technique to extend keywords. More precisely,
once we have found a keyword string (or byte sequence),
we attempt to extend this string by considering the bytes
that follow that keyword in the protocol message. As long
as the extended string is still present in the program binary,
we extend the keyword by those bytes. This is helpful to
correctly identify keywords in cases where programs only
compare a part of a keyword with the actual input data.
For example, in the SMB Negotiate Protocol message, the
SMB server is only checking for the existence of the string
“MICROSOFT NETWORKS ”, however, by employing
our technique, we can extract the complete protocol key-
word “MICROSOFT NETWORKS 1.03.”
File names are straightforward to recognize. Whenever
a sequence of tainted bytes is used as the argument of a
system call that opens or creates ﬁles, these bytes are as-
sumed to represent a ﬁle name. Also, when a sequence of
tainted bytes is found in the argument of a system call that
sends out network trafﬁc, and the values of these bytes re-
main unchanged, we consider them as being a ﬁeld that is
echoed back.
Identifying pointer ﬁelds is also simple. Whenever
tainted bytes are accessed through a pointer tainted with
a set of consecutive labels, those labels are marked as a
pointer ﬁeld. The lowest offset in the message of the bytes
accessed through the pointer ﬁeld is taken to be the offset
that the pointer points to.
4 Analysis of multiple messages
When analyzing a single protocol message, our system
breaks up the byte sequence that makes up this message
into a number of ﬁelds. As mentioned previously, these
ﬁelds can be nested, and thus, are stored in a hierarchical
(tree) structure. The root node of the tree is the complete
message. Both length ﬁeld and delimiter analyses are used
to identify parts of the message as scope ﬁelds, delimited
ﬁelds, length ﬁelds, or target ﬁelds. Input bytes that cannot
be attributed to any such ﬁeld are treated as individual byte
ﬁelds or, if they are in a delimiter scope and end at a delim-
iter, as arbitrary-length token ﬁelds. We refer to ﬁelds that
contain other, embedded ﬁelds as complex ﬁelds. Fields
that cannot be divided further are called basic ﬁelds.
In
the tree hierarchy, complex ﬁelds are internal nodes, while
basic ﬁelds are leaf nodes.
It is possible, and common, that different message in-
stances of the same type do not contain the same ﬁelds in
the same order. For example, in a HTTP GET request, the
client can send multiple header lines with different key-
words. Moreover, these headers can appear in an almost
arbitrary order. Another example is a DNS query where
the requested domain name is split into a variable num-
ber of parts, depending on the number of dots in the name.
By analyzing only a single message, there is no way for the
system to determine whether a protocol requires the format
to be exactly as seen, or whether there is some ﬂexibility
in the way ﬁelds can be arranged. To address this ques-
tion, and to deliver a general and precise message format
speciﬁcation, information from multiple messages must be
combined.
When combining two (or more) messages, two steps
need to be carried out. In the ﬁrst step, we have to ﬁnd
an alignment between the messages such that similar mes-
sage structures are aligned. That is, we aim to locate those
ﬁelds that do not change between messages of the same
type. Then, in a second step, the messages have to be com-
bined such that the result generalizes over all input mes-
sages. This makes it necessary to identify optional ﬁelds,
or to ﬁnd ﬁelds that can appear in one or more alternative
variants.
Alignment. To ﬁnd common structures between mes-
sages, we make use of a sequence alignment algorithm
(the Needleman-Wunsch algorithm [20], which is heav-
ily used in bio-informatics). The goal of this algorithm
is to take two sequences as input and ﬁnd those parts of
the sequence that are similar, respecting the order of the
elements. These similar parts are then aligned, exposing
differences or missing elements in the sequences. An ex-
ample is shown in Figure 3. Here, the alignment algorithm
receives two strings as input and produces an alignment
that identiﬁes the elements ’a’ and ’c’ as similar. Also, it
shows that there is a gap in the second sequence, because
the ﬁrst one has an additional element ’b’. Finally, the
alignment shows that the strings end with different char-
acters ’d’ and ’e’, indicating that the strings can have (at
least) two alternative ends.
Sequence alignment algorithms have been used previ-
ously [9, 16] for automatic protocol reverse engineering.
More precisely, these algorithms have been used on net-
work traces to identify similar byte sequences in messages.
However, in previous work, the systems operate directly on
the input byte sequences. In our case, the alignment oper-
ates on ﬁelds that have been extracted by analyzing indi-
vidual messages. Because we have a signiﬁcant amount
of structural information about individual messages, the
alignment algorithm operates on elements of a higher level
of abstraction, and thus, the results are more accurate.
To perform alignment, the Needleman-Wunsch algo-
rithm uses a scoring function that deﬁnes how well two
elements of a sequence match. For example, when apply-