# Title: A Host-Based Approach to Network Attack Chaining Analysis

# Authors:
- Paul Ammann, ISE Department, George Mason University (PI:EMAIL)
- Joseph Pamula, Center for Secure Information Systems, George Mason University (PI:EMAIL)
- Julie A. Street, ISE Department, George Mason University (PI:EMAIL)
- Ronald W. Ritchey, Booz Allen & Hamilton (ritchey PI:EMAIL)

## Abstract
Attackers typically penetrate a network through a chain of exploits, each exploit facilitating subsequent ones. This sequence is termed an attack path, and the collection of all possible attack paths forms an attack graph. Various methods have been proposed to generate these graphs. In this paper, we introduce a new approach to network vulnerability analysis by adopting the perspective of a penetration tester, focusing on the maximum level of penetration achievable on a host. Our method offers several advantages: it provides a more intuitive model for analysts, and its algorithmic complexity is polynomial, making it scalable for practical networks. However, our approach only tracks optimal attack paths, potentially leading to suboptimal choices in network repair. Given that attack graphs grow exponentially with network size, we argue that suboptimal solutions are a necessary trade-off for scalability and practicality. A working prototype tool has been developed to demonstrate the feasibility of our approach.

## 1. Introduction
Even well-administered networks remain vulnerable to some degree of attack, as complete isolation is not feasible for most enterprises. One of the key challenges for security administrators is to analyze their network's susceptibility to attacks and make necessary modifications to enhance security. Penetration testing is a common method for this analysis, but it is often expensive, labor-intensive, and incomplete. Therefore, there is significant interest in automating aspects of penetration testing. This paper presents a novel approach to automate part of the penetration tester's role.

Penetration testers frequently use attack graphs to understand network weaknesses. These graphs represent network states as nodes and the application of exploits as edges, transforming one state into a more compromised state. The final state of the attack graph indicates the attacker's goal. Exploits usually leverage known vulnerabilities, which are documented in public resources like Bugtraq and can be identified using tools such as Nessus and Retina.

Research has proposed methods to construct attack graphs based on data from vulnerability scanning tools. However, as network complexity increases, attack graphs become unmanageably large. From a theoretical standpoint, the exponential nature of attack graphs makes them impractical for large networks. Adding hosts increases the number of exploits, leading to a combinatorial explosion.

To address this, we propose a host-centric approach that focuses on the maximum level of penetration possible on each host. This approach is more intuitive for both system administrators and penetration testers and scales better than complete attack graphs. It grows polynomially with the number of hosts, unlike the exponential growth of complete attack graphs. While our approach may lead to suboptimal choices, it provides real-time early warnings, identifies policy violations, and analyzes potential impacts of different permissions, making it a practical solution for realistic networks.

## 2. Model
Our model assumes monotonicity, meaning the attacker does not need to backtrack. Although some attacks may not strictly adhere to this, they can often be modeled as monotonic with reasonable accuracy. For example, a "port forward" exploit, where a middleman host forwards communication, can be modeled monotonically if the attacker uses a single port efficiently.

The model is organized around hosts rather than exploits or vulnerabilities. It constructs an access graph with nodes representing hosts and directed edges indicating the access available from one host to another. Initial access is based on trust relationships defined by network rules and configuration. After the initial set of edges is established, exploits are introduced to improve access. For instance, a buffer overflow exploit might upgrade user-level access to admin-level access.

The model consists of two steps: initialization and calculation of maximal access. Initialization establishes the initial trust relationships, while the calculation updates the access graph based on exploits. The `findInitialAccess` algorithm initializes the access graph, and further steps update it with the highest possible access levels.

```python
def findInitialAccess(H, T, E):
    """
    Initialize the access graph with initial trust relationships.
    
    Parameters:
    H (set): Set of host nodes.
    T (dict): Trust relationships between hosts.
    E (dict): Access graph with edges initialized to 'none'.
    
    Returns:
    E (dict): Updated access graph with maximal access edges.
    """
    for hi in H:
        for hj in H:
            if (hi, hj) in T:
                E[(hi, hj)] = access(T, hi, hj)
    return E
```

This approach provides a practical and scalable method for network vulnerability analysis, balancing computational efficiency with the need for actionable insights.