title:A Host-Based Approach to Network Attack Chaining Analysis
author:Paul Ammann and
Joseph Pamula and
Julie A. Street and
Ronald W. Ritchey
A Host–Based Approach to Network Attack Chaining Analysis
Paul Ammann
ISE Department
George Mason University
PI:EMAIL
Joseph Pamula
Center for Secure Information Systems
George Mason University
PI:EMAIL
Ronald Ritchey
Booz Allen & Hamilton
ritchey PI:EMAIL
Julie Street
ISE Department
George Mason University
PI:EMAIL
Abstract
The typical means by which an attacker breaks into a
network is through a chain of exploits, where each exploit in
the chain lays the groundwork for subsequent exploits. Such
a chain is called an attack path, and the set of all possible
attack paths form an attack graph. Researchers have pro-
posed a variety of methods to generate attack graphs. In this
paper, we provide a novel alternative approach to network
vulnerability analysis by utilizing a penetration tester’s per-
spective of maximal level of penetration possible on a host.
Our approach has the following beneﬁts: it provides a more
intuitive model in which an analyst can work, and its al-
gorithmic complexity is polynomial in the size of the net-
work, and so has the potential of scaling well to practical
networks. The drawback is that we track only “good” at-
tack paths, as opposed to all possible attack paths. Hence,
an analyst may make suboptimal choices when repairing
the network. Since attack graphs grow exponentially with
the size of the network, we argue that suboptimal solutions
are an unavoidable cost of scalability, and hence practical
utility. A working prototype tool has been implemented to
demonstrate the practicality of our approach.
1. Introduction
Even well–administered networks are vulnerable to
some level of attack, since eliminating all susceptibility to
attack is arguably equivalent to isolating the network, which
is not an option in most enterprises. One of the challenging
tasks that a security administrator faces is to analyze his
or her organization’s networks for susceptibility to attack
and, as necessary, to modify the network so that it becomes
sufﬁciently secure. Penetration testing is a typical mecha-
nism for carrying out this analysis, but penetration testing
is expensive, labor intensive, and often incomplete. Conse-
quently, there is considerable interest in automating aspects
of penetration testing. This paper offers a novel approach to
automating part of the penetration tester’s job.
Penetration testers routinely use attack graphs to help
them understand a network’s weaknesses. Roughly speak-
ing, attack graph nodes represent network states, and at-
tack graph edges represent the application of an exploit
that transforms one network state into another, more com-
promised, network state. The terminal state of the attack
graph represents a network state in which the attacker has
achieved his or her goal. Typically these exploits take ad-
vantage of known vulnerabilities in various systems and
services. Such vulnerabilities and their associated exploits
are well documented in public sites such as bugtraq [3],
and many commercial tools such as Nessus [11] and
Retina [18] can identify known vulnerabilities in a given
host or network.
At the research level, methods have been proposed to
construct attack graphs based on data provided by commer-
cial vulnerability scanning tools. Details of these methods,
and their relation to the current work, are given in our “Re-
lated Work” section. For the purposes of the current paper,
the salient observation is that attack graphs quickly become
unmanageably large as network complexity grows past a
few machines. Indeed, displays from tools built to support
attack graph generation often show an extremely dense web
of connections that provides little guidance to the analyst.
From a theoretical point of view, attack graphs become
unmanageable because they are, by nature, exponential in
the size of the network. To see why, consider a typical at-
tack path: it represents a minimal set of exploits 1; that is,
1A similar analysis follows from the equivalent formulation of an attack
path as a minimal set of “facts”, where each fact is some network condition
Proceedings of the 21st Annual Computer Security Applications Conference (ACSAC 2005) 
1063-9527/05 $20.00 © 2005 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:09:24 UTC from IEEE Xplore.  Restrictions apply. 
each exploit is necessary for that attack path as a whole to
achieve the desired goal. There are potentially many such
minimal sets of exploits. Given e exploits, there are 2e pos-
sible subsets of exploits, and the number of minimal sub-
sets is still O(2e). Unfortunately, as network size grows,
so does the number of exploits, since each exploit is bound
to a particular host. To see the reason for this, consider
applying a buffer overﬂow attack against the ssh service.
Attacking host B from host A with this exploit results in a
different network state than attacking host C from host A
with the same type of exploit, and so we must consider each
attack separately. The bottom line is that adding another
host inevitably increases the number of exploits e that must
be considered. Hence complete attack graphs, by their very
nature, do not scale well.
One way out of this computational quagmire is to go
back to the penetration tester’s perspective and ask what
structure short of the entire attack graph would nonetheless
be useful. The answer we propose in this paper is that pen-
etration testers often think in terms of the maximal level of
penetration possible with respect to a given host, and push
the details of how to achieve this level to the background.
The contribution of this paper is an alternative to com-
plete attack graphs. Our approach has the following bene-
ﬁts:
• The approach meshes well with the typical mental
model of both the system administrator and the pen-
etration tester, both of whom, we argue, ﬁnd it natural
to analyze network security in terms of the maximal
compromise possible on each host.
• The approach can scale better than complete attack
graphs to realistic size networks. This is because our
host–centric model grows polynomially with the num-
ber of hosts, but the complete attack graph model
grows exponentially.
• The approach through multiple iterations 2 will pro-
vide a system administrator with a secure network the
same as a complete attack graph would, at the expense
that the choices made may be suboptimal. Since each
iteration is done in polynomial time, it can be com-
puted in real–time and will give the system adminis-
trator an area that needs to be ﬁxed.
• The approach can be used to provide near real–time
early warning of potential attacks, to identify the net-
work policy rules violations, and to conduct analysis
on the potential impacts of giving different permis-
sions or credentials to users (i.e., modelling insider at-
tacks).
(e.g., ssh service is running on host A) (initially) necessary for a given
chain of exploits to be feasible.
2The term “iterate” refers to a one complete execution cycle of the al-
gorithm.
The downside of our approach is that the analyst is not
presented with complete information about possible dam-
age, but instead is presented with worst case possible dam-
age in each iteration. Consequently, the analyst may make
suboptimal choices in terms of which vulnerabilities to re-
pair. When complete attack graphs are used the analyst can
determine the minimal changes required to ﬁx the network
at the expense of computing the large exponential graph.
In using our approach, with every iteration run, analysts
are quickly presented with an area that needs to be ﬁxed at
the expense that the choices made maybe suboptimal. This
means that the choices made will provide the same secure
network as attack graphs, however they may not be the min-
imal number of changes. Our position is that since the opti-
mal choice of vulnerability repair is NP–complete anyway,
suboptimal solutions are a foregone conclusion for realistic
networks.
In our model, hosts have an ordered set of possible lev-
els of access, ranging from none to admin. For example,
we might record that from host A, it is possible to obtain
admin level of access on host B with a buffer overﬂow ex-
ploit of the ssh service running on host B. At this point in
the analysis, we would not be concerned with other possible
attacks on B that result in admin (or lesser) level of access.
If the ssh exploit from host A to host B becomes no longer
beneﬁcial, either because connectivity between hosts A and
B was interrupted (perhaps by a ﬁrewall), or because the
ssh service was removed from host B, then the analysis of
other exploits would begin again, with the goal of choosing
one that leads to the (new) maximal level of penetration of
host B.
Our model also handles a transitive aspect of chained ex-
ploits. Suppose that there exists a user level access from
host A to host B, but there is admin level access from host
B to host C. From the penetration testing perspective, this
is equivalent for A having admin level access to C. Our
algorithm presented in Section 2 will use this property to
compute a transitive closure of our access graph.
To demonstrate the practicality of our approach, a
working prototype tool has been implemented.
The
tool comprises all the algorithms presented in this pa-
per. We have also put together a companion website
for this paper which describes our tool’s usage by us-
ing the example presented in the paper.
The web-
site address is: http://ite.gmu.edu/∼jpamula/
tools/host-based.html. It walks the reader through
the example in Section 4 by showing the tool’s screenshots
at different stages of access graph construction and analysis.
The remainder of this paper is organized as follows: Sec-
tion 2 presents the description of the algorithms, and also
discusses the computational complexity of our host–based
model approach to chained network attacks. In Section 3
we suggest a number of ways the analyst can use the results
Proceedings of the 21st Annual Computer Security Applications Conference (ACSAC 2005) 
1063-9527/05 $20.00 © 2005 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:09:24 UTC from IEEE Xplore.  Restrictions apply. 
of a stable host–based access graph (from Section 2) to help
secure the network. In Section 4 we give an example that
illustrates the ideas presented in this paper. Finally, Section
5 presents related work and Section 6 concludes this paper.
2. Model
We make an explicit assumption of monotonicity in our
model. One way of thinking about monotonicity is that it
means the attacker never has to backtrack. Although there
are certain attacks where monotonicity does not strictly
hold, for the most part, these can be modeled, with rea-
sonable ﬁdelity, as monotonic. An example may help here.
Consider the “port forward” exploit, in which an unwitting
middleman host is used to forward communication from a
compromised host to some host that trusts the middleman.
To carry out a “port forward” exploit, it is clearly neces-
sary to have a free port on the middleman, and carrying out
the exploit uses up that port. Hence that port is unavail-
able for a port forwarding attack on a different host; tech-
nically the “port forward” attack is nonmonotonic. How-
ever, a clever attacker can often get by with a single port by
merely switching back and forth between the two exploits,
thereby justifying the modeling the “port forward” exploit
monotonically.
Our model is organized around hosts, rather than exploits
or vulnerabilities. It constructs an access graph with a node
for each host in the network. A directed edge from host h1
to host h2 in the access graph represents the access available
on h2 from h1. Initial access is achieved directly between
two hosts by a trust relationship based on network rules and
conﬁguration. Once complete, this initial set of edges repre-
sents the intended network access. Note that there might be
multiple ways in which two hosts in the network can com-
municate. Instead of adding multiple edges in the graph,
our model will only retain the highest access that can be
achieved between hosts, since higher levels of access to the
destination host typically mean that more powerful attacks
can be accomplished. For example, a user with user ac-
cess to a host cannot, in general, mount as powerful an at-
tack on another host as can a user with admin access.
After the initial set of edges is complete, exploits are then
introduced into the model. A host can improve its access
to another host by using an exploit on the destination host.
For example, h1 may have a trust relationship with h2 that
allows user level access on h2. However it may also be
possible for h1 to use a buffer overﬂow exploit on h2 to
gain admin level access. In this case the edge between h1
and h2 would be updated to reﬂect this new access. Hosts
can also gain higher access indirectly through a series of ex-
ploits on numerous hosts. For example, h1 may not be able
to connect to h3 directly. However, h2 may have admin
access on h3 by using a remote root level exploit. Using
this exploit, and the buffer overﬂow exploit on h2, h1 can
successfully gain admin level access on h3.
The model to construct such an access graph consists of
two steps: initialization and calculation of maximal access.
The goal of initialization is to establish the initial trust re-
lationships between hosts in absence of applying any ex-
ploits.
Initialization is accomplished using the algorithm
findInitialAccess, shown in Figure 1 and described
next. Here access() returns the possible access level
gained between two hosts in trust relationship table T , or
a current level of access for a given edge eij between two
hosts i and j.
ﬁndInitialAccess(H , T , E ) :
Input: A set of host nodes, H
Input: A set of trust relationships, T
Input: An access graph E, each edge eij ∈ E is initialized 4
1
2
3
to none
Output: Access graph of hosts H with maximal access
edges E
5
6
7
8
9
10
11
12
13
14
15
16
For each hi ∈ H Do