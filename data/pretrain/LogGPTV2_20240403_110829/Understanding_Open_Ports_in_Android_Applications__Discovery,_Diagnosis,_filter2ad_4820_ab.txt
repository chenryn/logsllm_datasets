### Methodology

#### Step 1: Aggregation
We divide the observations into 12 groups based on the combination of four types of ports (TCP/UDP in IPv4 or IPv6) and three types of IP addresses (loopback address 127.0.0.1, ANY address 0.0.0.0, and a specific host address such as 192.168.X.X). For example, in the Netflix dataset shown in Figure 3, we have two groups: TCP4 and UDP4, both with IP 0.0.0.0.

#### Step 2: Clustering by Occurrences
A fixed port on an application appears as identical records across multiple user devices, while a random port presents different port numbers. We differentiate between fixed and random ports by analyzing the occurrence of a specific port number within each group. The occurrence is defined as the fraction of user devices presenting a specific port number within the group. For instance, in our Netflix dataset, the UDP port 39798 for IPv4 has an occurrence of 3.6%.

- **Fixed Ports**: These are ports with high occurrences. In practice, we consider ports with occurrences higher than 80% as fixed.
- **Random Ports**: These are ports with low occurrences. We use 50% as the upper bound for the low-occurrence scenario, assuming that fixed ports should cover at least more than half of the users in the group.

However, this threshold-based approach can be unreliable when group sizes are small, as a random port with multiple observations may show high occurrences. In such cases (and others with occurrences between 50% and 80%), we apply a heuristic approach to achieve more accurate classification.

#### Step 3: Clustering by Heuristics
For observations that cannot be reliably determined by occurrences, we use three heuristics:

1. **Random Range Heuristic**:
   - **All ports in the random range (Nr > 0 and Nf = 0)**: We mark them as one random port, adhering to the conservative principle that it is better to misclassify a fixed port as random rather than the opposite.
   
2. **Mixed Range Heuristic**:
   - **Ports in both ranges (Nr > 0 and Nf > 0)**: We first consider all ports in the random range as one random port. If Nr is significantly larger than Nf (e.g., ten times) and Nf is relatively small (e.g., less than 3), we mark ports in the fixed range as fixed ports.

3. **Fixed Range Heuristic**:
   - **All ports in the fixed range (Nr = 0 and Nf > 0)**: We conservatively output just one random port if Nf is not small (e.g., larger than 3); otherwise, we consider them as fixed ports.

### Crowdsourcing Results
We deployed NetMon on Google Play for an IRB-approved crowdsourcing study starting from October 18, 2016. Our analysis is based on data collected until the end of July 2017, involving 3,293 user phones from 136 different countries. We do not collect personally identifiable information (PII) or IMEI; only anonymized ANDROID ID (hashed with a salt) is used for device identification. Users are explicitly informed about the data collection through a pop-up confirmation dialog.

#### Data Collection and Analysis
- **Total Port Monitoring Records**: 40,129,929
- **Open-Port Apps**: 2,778 (2,284 with TCP open ports and 1,092 with UDP open ports)
- **Total Open Ports**: 4,954 (3,327 TCP ports and 1,627 UDP ports)

We classify UDP random ports bound to the host IP address as client UDP ports. Figure 4 shows the distribution of open-port apps with different types of socket addresses. Both TCP and UDP open ports are prevalent, and many expose the apps to potential network attacks. Additionally, 1,390 apps use long-lasting (more than 5 minutes) client UDP ports to communicate with servers.

### Open Ports in Popular Apps
Using Selenium, a web browser automation tool, we obtained the number of installs for 1,769 open-port apps on Google Play. The top five open TCP port numbers (port 8080, 30102, 1082, 8888, and 29009) have no well-defined fixed usage and appear in only 14 to 64 apps. Despite this diversity, some uncommon TCP port numbers (e.g., 30102 and 29009) appear in multiple apps. Static analysis reveals that many of these open ports are introduced by SDKs, with Facebook SDK being a major contributor to 997 apps. Local random TCP ports appear in 62.8% of the 925 popular apps, and the percentage increases to 78% in the 100 highly popular apps. Even anti-virus apps like 360 Security and Avast are affected.

### Open Ports in Built-in Apps
We also identified 755 built-in apps (pre-installed by phone manufacturers) containing open ports, excluding those that also appear as standalone apps on Google Play. These apps were recognized by collecting user devices' system app package names via the SYSTEM flags of the ApplicationInfo class.

This work is the first to report on crowdsourcing Android apps with open ports and their IP address and port number information, providing valuable insights into the security implications of these open ports.