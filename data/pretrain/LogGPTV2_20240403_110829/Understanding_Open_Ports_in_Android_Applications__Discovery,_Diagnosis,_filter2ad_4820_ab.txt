ically, we divide the observations into 12 groups, enumerating
the combination of four types of ports (TCP/UDP ports in IPv4
or IPv6) and three types of IP addresses (loopback address
127.0.0.1, ANY address 0.0.0.0, and the speciﬁc host
address such as 192.168.X.X). In the Netﬂix example
shown in Fig. 3, we have two groups — TCP4 and UDP4
(both with IP 0.0.0.0).
Step 2: Clustering by occurrences. A ﬁxed port on an app
presents itself as identical records on multiple user devices,
while a random port presents its observations with different
port numbers. Based on this observation, we can differentiate
between ﬁxed and random ports by analyzing the occurrences
of a record within each group (constructed in Step 1). We
deﬁne this occurrence as the fraction of user devices presenting
a speciﬁc port number within the group. For example, the
UDP port 39798 for IPv4 address in our Netﬂix set has an
occurrence of 3.6%.
With this deﬁnition of the occurrence, we perform port
clustering where ﬁxed ports are those with a high occurrence
and random ports are those with low ones. As shown in
Fig. 3, Netﬂix’s UDP port 39798 in our dataset is certainly
a random port because its occurrence is only 3.6% among
the 84 Netﬂix users in the UDP4 group, whereas TCP port
9080 is a ﬁxed port because its occurrence has reached 100%
in the TCP4 group. In practice, we use 50% as the upper
bound for the low-occurrence scenario, which is based on the
assumption that ﬁxed ports should cover at least more than half
of the users in the group. We consider those with occurrences
higher than 80% as ﬁxed ports. However, the threshold-based
occurrence strategy tends to be unreliable when group sizes are
small because a random port exhibiting a number of different
observations may have one or several of them show up with
high occurrences. In these cases (and others with occurrences
between 50% and 80%), we apply a heuristics approach, to be
described next, to get a more accurate inference.
Step 3: Clustering by heuristics. For observations that
cannot be reliably determined by occurrences, we further
leverage three heuristics to handle them. We ﬁrst separate port
numbers into the “random” range (for port numbers between
32,768 and 61,000, i.e., those randomly assigned by the OS or
the so-called ephemeral ports [16]) and the “ﬁxed” range (for
other port numbers). For each group, we count the numbers of
unique port numbers within these two ranges, and denote them
by Nr and Nf , respectively. We then have the following three
port distribution patterns and their corresponding heuristics:
• All ports are in the random range (Nr > 0 and Nf = 0).
We simply mark them as one random port based on the
conservative principle that we can tolerate misclassifying
a ﬁxed port to be a random one but not the opposite.
• Ports are in both ranges (Nr > 0 and Nf > 0). We ﬁrst
consider all ports in the random range as presenting one
random port. If Nr is signiﬁcantly bigger than Nf (e.g.,
ten times) and Nf is relatively small (e.g., less than 3),
we mark ports in the ﬁxed range as ﬁxed ports.
• All ports are in the ﬁxed range (Nr = 0 and Nf > 0). We
conservatively output just one random port if Nf is not
small (e.g., larger than 3); otherwise, we consider them
as ﬁxed ports.
C. Crowdsourcing Results
We have deployed NetMon to Google Play for an IRB-
approved2 crowdsourcing study since 18 October 2016. In this
paper, we base our analysis on the data collected till the end of
July 2017 (a period of around ten months when most of our
evaluations were performed and security ﬁndings were con-
ﬁrmed), which involves 3,293 user phones from 136 different
2IRB approval was obtained from Singapore Management University on
14 October 2016. Under this study, we do not collect personally identiﬁable
information (PII) or IMEI. We use only the anonymized ANDROID ID
(hashed with a salt) for device identiﬁcation. Users are also explicitly informed
about all the information we collect through a pop-up conﬁrmation dialog.
4
UIDAppTypeIPPortTimeU1NetflixUDP40.0.0.01900T1U1NetflixUDP40.0.0.039798T1U2NetflixUDP40.0.0.01900T2U2NetflixUDP40.0.0.032799T2……UxNetflixTCP40.0.0.09080TxUyNetflixTCP40.0.0.09080Ty……UnApp NUDP6127.0.0.151663TnUoFacebookTCP6127.0.0.146467ToUpWeChatTCP4192.x.x.x9014TpUqWeChatTCP410.20.x.x9014TqRaw port monitoring records from crowdsourcing (Using Netflix’s TCP4/UDP4 ports as examples)AppTypeIPPortNetflixUDP40.0.0.0RandomClustered per-app open portsfor our analysisLocal IP……Any IPHost IPLocal IPAny IPHost IPTCP6TCP4UDP6UDP4……Local IP……Any IPHost IPLocal IPAny IPHost IPTCP4TCP6UDP6UDP4……Netflix……Netflix’s T4 SubsetPort% User9080100%For each group of each app:Calculate % user for their portsAppTypeIPPortNetflixTCP40.0.0.09080NetflixUDP40.0.0.01900Netflix’s U4 SubsetPort% User1900100%397983.6%327992.4%…………(Other subsets)AppTypeIPPortPorts determined by heuristics Step 1: AggregationApp NStep 2: Clustering by occurrencesStep 3: Clustering by three heuristics according to the port distributionRandomportsFixedportsUnsureportsHeuristic I:For ports allin the random rangeHeuristic II:For ports in bothrangesHeuristic III:For ports allin the fixed rangeTABLE I: Representative apps that have open ports.
Category
Port
# of Installs
App Name
Facebook
Instagram
Google+
VK
Messenger
WeChat
Skype
Chrome
Firefox
YouTube
GPlay Music
Spotify
Amazon Music
Google Play
Services
Google
Clean Master
360 Security
Avast
Google Drive
Cloud Print
ES File
Explorer
GPlay Games
Netﬂix
Social
Communication
Video Players
or
Music & Audio
Tools
Productivity
Entertainment
1B - 5B
1B - 5B
1B - 5B
100M - 500M
1B - 5B
100M - 500M
500M - 1B
1B - 5B
100M - 500M
1B - 5B
1B - 5B
100M - 500M
100M - 500M
5B - 10B
1B - 5B
500M - 1B
100M - 500M
100M - 500M
1B - 5B
500M - 1B
100M - 500M
1B - 5B
100M - 500M
100M - 500M
Type
TCP
TCP
TCP
TCP
TCP
TCP
TCP
TCP
TCP
TCP
TCP
TCP
TCP
UDP
TCP
TCP
TCP
UDP
TCP
TCP
TCP
UDP
UDP
TCP
TCP
TCP
TCP
TCP
TCP
UDP
TCP
TCP
TCP
UDP
TCP
TCP
UDP
UDP
TCP
UDP
UDP
TCP
TCP
TCP
IP†
L
L
H
L
H
L
L
H
H
L
L
H
L
H
H
L
L
H
H
L
H
H
H
H
L
L
H
L
L
H
H
H
L
H
L
H
H
L
L
H
H
H
L
L
Random
Random
Random
Random
48329
Random
Random
9014
Random
Random
5555
8080
Random
1900
Random
Random
Random
1900
Random
Random
Random
2346
5353
20817
Random
Random
20817
Random
Random
5353
42135
59777
Random
5353
Random
9080
1900
Random
Random
5353
24024
7940
Peer Smart
Remote
Plants vs.
Zombies 2
Asphalt 8
Solitaire
Games
100M - 500M
100M - 500M
100M - 500M
100M - 500M
† “L” is for the local IP address and “H” is for the host IP, as termed in Sec. II.
Random
Random
Sonic Dash
Compared to UDP, TCP open ports have more diverse
usages. The top ﬁve open TCP port numbers, port 8080, 30102,
1082, 8888, and 29009, have no well-deﬁned ﬁxed usage
(unlike the UDP port 1900 and 5353 above) and appear in
only 14 to 64 apps. Despite this diversity, it is interesting to see
some uncommon TCP port numbers (e.g., 30102 and 29009)
appearing in multiple apps. To gain a better understanding of
these open ports, we perform static analysis and ﬁnd that many
of them are introduced by SDKs (see Sec. IV-D for more
details). As the most interesting example, Facebook SDK is
the major contributor to 997 apps (of the entire dataset) for
their random TCP ports bound to the local IP address (i.e., the
fourth sector in Fig. 4). Such local random TCP ports appear
in 62.8% of the 925 popular apps, and the percentage goes up
to 78% in the 100 highly popular apps. As shown in Table I,
even anti-virus apps, 360 Security, and Avast, are also affected.
2) Open Ports in Built-in Apps: Besides the popular apps
on Google Play, we also identify 755 built-in apps (apps
pre-installed by phone manufacturers) containing open ports
(excluding those that also appear as standalone apps on Google
Play, such as Facebook and Skype). We recognize them by
collecting user devices’ system app package names (via the
SYSTEM ﬂags of the ApplicationInfo class).
5
Fig. 4: Apps with open ports in different types of socket addresses
(symbols are “H”/“L”: host/local IP; “F”/“R”: ﬁxed/random port
number), including 1,390 apps with long-lasting client UDP ports.
countries worldwide. Users of NetMon are attracted solely via
Google Play without advertisements or other incentives. About
a quarter of the devices (26%) are from the US, while the
percentage for other countries is very diverse, which makes
our dataset more representative.
In our dataset, we collect 40,129,929 port monitoring
records and discover 2,778 open-port apps (2,284 apps with
TCP open ports and 1,092 apps with UDP ones) and a total
of 4,954 open ports (3,327 TCP ports and 1,627 UDP ports).
Note that with the help of our analytic engine, we can classify
UDP random ports bound to the host IP address as client
UDP ports. Fig. 4 shows the distribution of open-port apps
with different types of socket addresses. We ﬁnd that both
TCP and UDP open ports have their fair share in these apps,
and many of these ports expose them to potential network
attacks (e.g., bound to non-local IP addresses). In addition, we
ﬁnd that 1,390 apps use long-lasting (more than 5 minutes)
client UDP ports to communicate with servers. To the best
of our knowledge, this work constitutes the ﬁrst report of
crowdsourcing Android apps with open ports and their IP
address and port number information.
1) Open Ports in Popular Apps: With the help of Sele-
nium [31], a web browser automation tool, we obtain the
number of installs of the 1,769 open-port apps on Google Play,