ing frequency is too high. The recommended practical deployment
settings and analysis are presented in Sec. 6.6.
6.4.2 Delta Message Size. The IDM server of TinyCR requires to
send updating messages to all devices, so that the devices can update
their own CR status classifier locally. Therefore, the delta message
size is a critical metric, as a large message size would significantly
increase the network traffic overhead and transmission latency.
In Fig. 9, we show the average raw delta message size for each
type of updating operations of TinyCR, Othello and CRLite in the
short-term updating scenarios using the Censys certificate data.
Note that in short-term updating scenarios, we conduct limited
numbers of updates such that the data structures (except CRLite)
are not reconstructed. For inserting legitimate certificates, TinyCR
and CRLite usually do not need to be updated as the certificate key
is highly likely to be rejected by the first filter layer. For other cases,
we notice the delta message sizes of TinyCR and Othello do not
scale with the growth of key sizes for all types of the insertion and
value flipping operations. Specifically, both TinyCR and Othello
requires around 0 to 100 bytes of the delta message for all different
types of updates (though Othello requires 16x more total memory),
whereas CRLite requires to push a significantly larger message to all
IoT devices. In addition, for the most common certificate insertion
operation shown in Fig. 9 (b), TinyCR do not need to send any
delta message to devices for most of the insertions (the average
delta message size is around 0.1 bytes), whereas Othello has to
synchronize a delta message for most of the cases.
In Fig. 10, we show the distribution of the raw delta message
size (without the signature) in the long-term insertion and value
flipping scenarios. In these scenarios, when DASS is too full to
support the desired update, it has to be reconstructed In the figure,
the top of each bar in the figure represents the 90th, 99th, 99.9th
percentile of the delta messages sizes.
For the long-term insertion scenario in Fig. 10 (a), the result
shows more than 90% and 99% of the delta messages are equal to
0 bytes when the ratios of the legitimate and revoked certificate
sizes (|N |/|P|) are 100 and 1000 respectively. Namely, for most of
the insertions, the verifier DASS do not need to be updated.
In some rare cases, TinyCR can no longer accommodate a space
for the new key. Then the DASS need to be reconstructed on the
server and then be pushed and reinstalled on the IoT devices. There-
fore, a reconstruction of the data structure would cost much higher
overhead on both devices’ computing resources and network band-
width. In the experiments, we notice the total times of DASS recon-
struction are 44, 31, 28 respectively to insert the 100 million new
certificates, when |N |/|P| equals 10, 100 and 1000. On average∗, the
bandwidth costs of raw delta messages (not including the signa-
tures) for each insertion are only 12.2, 1.25 and 0.13 bytes when
|N |/|P| equals 10, 100 and 1000.
The long-term value flipping result in Fig. 10 (b) shows that
revoking an existing certificate costs more bandwidth in TinyCR
compared with the insertions. Specifically, most revocation events
will trigger an updating of the verifier DASS and more than 90% of
the updates need a delta message smaller than 65 bytes for all the
three scenarios with different revocation ratios. In addition, less
than 1% revocations will cost more than 385 bytes and less than
0.1% revocations (including the cases that require a reconstruction)
will cost more than 1 KB for the delta messages. In total, DASS is
reconstructed for 64, 31, and 29 times in order to randomly revoke
another around 10M, 1M and 0.1M legitimate certificates in the
three 100M sets with different initial revocation ratios. The average
delta message size† for the tree scenarios are 150.58, 108.08 and
119.87 bytes in the three value flipping scenarios.
In summary, TinyCR only needs 0 to 150 bytes on average for
any CRL update. Since nearly all types of wireless IoT data links
(including Licensed/Unlicensed LPWANs and 3G/4G/5G Cellular,
etc.) can provide larger than 1KBps bandwidth in practice, the
TinyCR synchronization process introduces a neglectable extra
data transmission cost to the overall network latency.
6.5 Query
The IoT devices that have installed the DASS verifier would be able
to check the CR status of a particular certificate after validating the
integrity and expiration date of the certificate. Standard certificate
integrity validation requires cryptography computation. Recent
works introduce delegated or distributed reference protocols based
on the chain of trust [6, 26], which still requires at least millisecond-
level latency. Compared with the validation process, the latency for
the revocation status checking process using the TinyCR verifiers
is neglectable (usually in sub-microseconds).
In Fig. 11, we test the average query latency to get a revocation
status using the CenSys dataset on the Raspberry Pi 3 testbed and
compare the result with CRLite and OCSP. For OCSP, we use a
local 8-core CPU server deployed in the local town as the OCSP
server. In addition, on the server side, we use DASS instead of the
whole CRL to maintain the CR status. As the on-device CR verifiers,
TinyCR and CRLite can verify a CR status in sub-microsecond level,
which is a few magnitudes faster than OCSP, as both of them only
require O(1) hash operations and memory loads for checking. In
∗the cost of the reconstruction cases is amortized to every insertion
†the cost of the reconstruction cases is amortized to every revocation event
Session 4B: Wireless, Mobile, and IoT CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1127(a) Insert (P)
(b) Insert (N )
(c) Flip (P → N )
(d) Flip (N → P)
Figure 9: Short term insert and value flip delta message size. (a) Insert a revoked certificate. (b) Insert a legitimate certificate,
a common operation. (c) Unrevoke a revoked certificate. (d) Revoked a certificate, a common operation.
(a) Insert
(b) Flip
Figure 10: The average, and the 90th percentile, 99th per-
centile and 99.9th percentile of the generated Delta Msg
sizes for long-term insertion (a) and value flipping (b).
(a) Revoked certificates
(b) Legitimate certificates
Figure 11: Query latency on Raspberry Pi 3.
particular, the query delay of TinyCR is slightly shorter for the
revoked certificates, while the delay of CRLite is slightly shorter
for the legitimate certificates.
The major query cost for OCSP is the network delays when
inquiring the CR status through a remote server. Thus, OCSP is
not an ideal method for the scenarios where the device available
bandwidth is limited and the latency is sensitive.
More results of the query performance of DASS are shown in
Appendix. A.3.
6.6 Bandwidth vs. Dynamics
In Figs. 12 and 13, we show the delta message cost (each patch in-
cludes a 256-byte RSA signature) for keeping the verifier DASS syn-
chronized under different updating scenarios and settings. Specifi-
cally in our experiments, we initialize DASS with 100 million certifi-
cates, with 1% revoked keys. Then we test two updating scenarios
with different daily workloads: (1) 1 to 108 new certificates are
added to the certificate universe; (2) 1 to 107 existing certificates are
revoked. In the experiments, we assume the updates happen uni-
formly over the day. We deploy four different settings for TinyCR:
TinyCR-(RT) sends the delta message immediately after each up-
date happens; TinyCR-(1, 4, 24) means we only maintain 1, 4, 24
versions of TinyCR per day and use batching as in Sec. 5.5. Hence,
the synchronization latency for TinyCR-(1) is up to one day and
for TinyCR-(24) is up to one hour. Similarly, we implement the
corresponding versions of CRLite as comparisons. The CRLite is
updated for 1, 4, 24 times per day using a bsdiff [25] delta update
message. The initial on-device memory costs of TinyCR and CRLite
under this setting are both 1.7 MB. We also compare the protocols
with OCSP, which has zero update cost on bandwidth and the de-
vice side but generates relatively constant traffic load (around 1KB
according to prior measurement studies [19, 21]) for each query.
Thus, on the y-axis in the right, we show the estimated number of
OCSP queries that can be made using around the same amount of
traffic load needed by the daily updating of TinyCR and CRLite.
From Figs. 12 and 13, we can clearly observe that TinyCR costs
less bandwidth by a few orders of magnitudes compared to CRLite,
when the daily updating amount is moderate (for example, less than
1 million inserts or less than 1 thousand revocations per day). On
the other hand, when the amount of daily updates is huge, TinyCR
has similar total bandwidth cost as CRLite. More specifically, all
versions of TinyCR have a similar raw delta message cost if DASS
is not reconstructed, while the real-time TinyCR always causes
more real-world traffic load due to the high cost of signing the
delta messages. When the number of updates is large and DASS
has to be reconstructed multiple times, the batching protocol with
fewer batches has less bandwidth cost, since at most only one
reconstructed and signed data structure needs to be sent in one
batch. On the other hand, CRLite always needs a large delta message
for synchronization whenever a false positive is found in its first
layer of the filter cascades. The total message size of CRLite is in
proportional to the updating frequency. When the daily update
amount is huge, for example, the certificate universe is doubled
or more than 10,000 certificates are revoked per day, CRLite has a
similar performance as batching TinyCR. In particular, with higher
batching frequency, TinyCR is more efficient; while with lower
frequency, CRLite is a better choice.
In addition, from Figs. 12 and 13, we find that the TinyCR cost
is proportional to the number of updates while the cost of OCSP
is proportional to the number of queries. Note that the TinyCR
0.1M0.3M1M3M10M30M# of Certificates10−410−310−210−1100101102103CR checking latency (ms)TinyCRCRLiteOCSP0.1M0.3M1M3M10M30M# of Certificates10−410−310−210−1100101102103CR checking latency (ms)TinyCRCRLiteOCSPSession 4B: Wireless, Mobile, and IoT CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1128Figure 12: Total bandwidth cost for in-
sertion.
Figure 13: Total bandwidth cost for re-
vocation.
Figure 14: How many updates can be
applied before the first rebuild.
mainly consumes the downlink bandwidth while the OCSP mainly
consumes the uplink bandwidth. Thus, it is easy to conclude that
TinyCR is more bandwidth cost-efficient when the certificate uni-
verse and daily updating amount is small and querying is frequent,
while OCSP is more cost-efficient in the opposite scenarios.
6.7 Mitigate rebuilds
When TinyCR has to rebuild, the delta message and server resource
cost is significantly higher. Therefore, if the CRL is rather dynamic,
we could further optimize DASS to make it less likely to be re-
built. If the certificate universe is smaller than what the devices
can maintain with their memory capability, we could choose to
slightly increase the DASS size to reserve spaces for future new
certificates and revoked certificates. In particular, the two most
important parameters that impact the probability of rebuild is the
load factor α of the Cuckoo Filter and the table size coefficient β
of Othello. The two parameters are set as α = 0.95 and β = 2.33
recommended by the original studies [12, 37] to optimize memory.
Thus, if memory allows, a smaller α and a larger β can be used to
reduce the probability of rebuild.
In Fig. 14, we show how many updates can be handled by DASS
without rebuilding under different memory cost settings. The ini-
tialization setting is similar to the setting in Sec. 6.4.2. In the x-axis,
n× means the memory cost of DASS under different settings com-
pared with that of the memory-optimal setting, while in the y-axis,
the n× means how many updates (insertion or revocation) can be
processed without rebuilding, compared with that of the memory-
optimal setting. For the memory-optimal setting, a rebuild will be
triggered after 22 million insertions or 23 thousand revocations in
average. From Fig. 14, we can find the capability of accommodat-
ing the updates can be significantly improved by increasing the
memory cost slightly. For example, by using 1.5× memory, DASS
can process more than 13× new revocations or 30× new insertions
without reconstructions. This memory allocating strategy is rather
effective for keeping the O(1) updating cost in real deployment.
7 APPLICATION SCENARIOS FOR TINYCR
Based on evaluation results, TinyCR is ideal and optimal for the
application scenarios where 1) users need fast or frequent on-device
authentication, and low synchronization latency for security; 2)
each user device has a limited size of memory, such as several
MBs; 3) the dynamics of certificates are moderate. In addition, for
other scenarios, TinyCR can be used as an alternative with proper
configurations or as a complementary of other protocols.
Batching v.s. Real-time Updating.
Based on our analysis in Fig. 12 and 13, the real-time TinyCR up-
dating policy is the optimal choice when CR updates are infrequent.
This policy can minimize the synchronization delay and protect de-
vices at any time with limited bandwidth cost. However, due to the
high overhead of signing for the delta message, real-time TinyCR
yields a high cost when the updating frequency is too high. Thus,
we could choose the batching policy for TinyCR and keeping the
updating frequency high enough (such as per hour or per 5 minutes)
to trade between bandwidth cost and the worst synchronization la-
tency. According to our results using batching, higher but bounded
updating frequency does not introduce more bandwidth overhead
other than the extra O(1) signing cost. The batching policies are
also friendly to the IDM servers if most IoT devices are sporadically
connected, as it only needs to maintain a bounded number of DASS
versions. In addition, DASS can use a slightly higher memory cost
to reduce the reconstruction probability in practice.
When the certificate universe changes significantly every after
a short period, TinyCR as well as all other push-based methods
will have unacceptable bandwidth cost to keep the synchronization
latency low. In such a scenario, we have to sacrifice security for
efficiency by reducing the updating frequency, and CRLite is more
efficient for one update per day. The on-demand-based methods
(such as OCSP) are the other optional choice under this scenario
despite its higher verification cost.
Moreover, if the CRL updates are non-uniformly distributed over
the data and are predictable by the service providers, we can use a
hybrid policy with the batching protocols and real-time protocol.
For example, we can batch the updates in the peak hours when
updating is frequent, and use the real-time protocol for the rest of
the hours when the updating is sporadic.
TinyCR v.s. OCSP/OCSP-stapling.
TinyCR outperforms OCSP in that it is much faster for CR ver-
ification. In some IoT scenarios, the verification delay is critical
since IoT devices usually have limited data (such as sensing data) to
transmitted and the requirement for end-to-end data transmission
delay is tight. For example, a smart vehicle is required to read the
IoT sensors on streets for decision-making in a short delay while
driving fast. In addition, OCSP is not suitable for many IoT applica-
tions as it leaks user privacy. This drawback becomes more severe
as the IoT data access pattern may include not only the temporal
context but also the location information of the user, such as when
and where a user reads a static street sensor. Besides, many peer-
to-peer communication patterns for IoT usually do not need access
to the Internet, for example, IoT devices can be accessed using
102103104105106107108# of new certificates102103104105106107108109Total Δ-msg size (Bytes)TinyCR (RT)TinyCR (1)TinyCR (4)TinyCR (24)CRLite (1)CRLite (4)CRLite (24)DASS/CRLite size1101001K10K100K1MEstimated # of OCSP quires100101102103104105106107# of revoked certificates1021031041051061071081091010Total Δ-msg size (Bytes)CRLite (1)CRLite (4)CRLite (24)DASS/CRLite sizeTinyCR (RT)TinyCR (1)TinyCR (4)TinyCR (24)1101001K10K100K1M10M100MEstimated # of OCSP quires1.0×1.2×1.4×1.6×1.8×2.0×2.2×DASS Size (n×)1×5×10×15×20×25×30×# of fast revocation (n×)RevokeInsert1×20×40×60×80×100×# of fast inserts (n×)Session 4B: Wireless, Mobile, and IoT CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1129short-distance communication media, such as WLAN, Bluetooth,
and visible light. Hence, on-device CR checking protocols are more
suitable for those scenarios. Still, for the rare cases when a new
certificate cannot be verified by an outdated DASS, we can choose
to fall back to OSCP.