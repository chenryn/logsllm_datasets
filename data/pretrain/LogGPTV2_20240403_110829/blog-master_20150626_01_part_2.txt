(1 row)  
```  
实际上，800多公里就包含北京了，因为这个BOX是立方体，而不是球体，北京被包含在800多公里的球体外面，立方体里面。  
```  
postgres=# select earth_box(ll_to_earth(30.3,120.2), 880999.5704515) @> ll_to_earth(39.9,116.4);  
 ?column?   
----------  
 t  
(1 row)  
```  
用PostGIS可以很好的解决这个问题。  
earthdistance还支持使用point来表示坐标，计算得到的是英里单位。  
经度，纬度。  
```  
postgres=# select point(116.4,39.9)  point(120.2,30.3);  
    ?column?       
-----------------  
 697.01393638328  
(1 row)  
```  
转换为公里。  
```  
postgres=# select 697.01393638328*1.60931;  
       ?column?          
-----------------------  
 1121.7114979609763368  
(1 row)  
```  
与使用cube坐标计算得到的结果有一定的偏差，误差来自定义的地球半径不一样，见代码。  
```  
postgres=# select 3958.747716*1.60931;  
     ?column?       
------------------  
 6370.85228683596  
(1 row)  
```  
earth()函数得到的是 AS 'SELECT ''6378168''::float8';   
调整一下，两种坐标表示方法得到的结果就一致了：  
```  
postgres=# CREATE or REPLACE FUNCTION earth() RETURNS float8  
LANGUAGE SQL IMMUTABLE  
AS 'SELECT ''6370852''::float8';  
CREATE FUNCTION  
postgres=# select earth_distance(ll_to_earth(39.9,116.4),ll_to_earth(30.3,120.2));  
  earth_distance    
------------------  
 1121711.44745797  
(1 row)  
```  
代码如下：  
```  
--------------- geo_distance as operator   
CREATE OPERATOR  (  
  LEFTARG = point,  
  RIGHTARG = point,  
  PROCEDURE = geo_distance,  
  COMMUTATOR =   
);  
--------------- geo_distance  
CREATE FUNCTION geo_distance (point, point)  
RETURNS float8  
LANGUAGE C IMMUTABLE STRICT AS 'MODULE_PATHNAME';  
```  
```  
#include "postgres.h"  
#include   
#include "utils/geo_decls.h"    /* for Point */  
#ifndef M_PI  
#define M_PI 3.14159265358979323846  
#endif  
PG_MODULE_MAGIC;  
/* Earth's radius is in statute miles. 英里单位 */  
static const double EARTH_RADIUS = 3958.747716;  
static const double TWO_PI = 2.0 * M_PI;  
/******************************************************  
 *  
 * geo_distance_internal - distance between points  
 *  
 * args:  
 *       a pair of points - for each point,  
 *         x-coordinate is longitude in degrees west of Greenwich  
 *         y-coordinate is latitude in degrees above equator  
 *  
 * returns: double  
 *       distance between the points in miles on earth's surface  
 ******************************************************/  
static double  
geo_distance_internal(Point *pt1, Point *pt2)  
{  
        double          long1,  
                                lat1,  
                                long2,  
                                lat2;  
        double          longdiff;  
        double          sino;  
        /* convert degrees to radians */  
        long1 = degtorad(pt1->x);  
        lat1 = degtorad(pt1->y);  
        long2 = degtorad(pt2->x);  
        lat2 = degtorad(pt2->y);  
        /* compute difference in longitudes - want  M_PI)  
                longdiff = TWO_PI - longdiff;  
        sino = sqrt(sin(fabs(lat1 - lat2) / 2.) * sin(fabs(lat1 - lat2) / 2.) +  
                        cos(lat1) * cos(lat2) * sin(longdiff / 2.) * sin(longdiff / 2.));  
        if (sino > 1.)  
                sino = 1.;  
        return 2. * EARTH_RADIUS * asin(sino);  
}  
```  
## 参考  
1\. http://www.postgresql.org/docs/9.4/static/earthdistance.html  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")