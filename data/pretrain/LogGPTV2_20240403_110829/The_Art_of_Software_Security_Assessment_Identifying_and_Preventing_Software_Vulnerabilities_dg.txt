Servers 
A server can be vulnerable to name squatting if it uses a predictable pipe name and 
fails to check whether the pipe has already been created. A server can also be 
vulnerable to name squatting if it creates a pool of pipes and uses ConnectNamedPipe() 
to service multiple connections. A pool of pipes is established by creating and 
connecting multiple instances of the same pipe and specifying the same value for 
nMaxInstances on each call to CreateNamedPipe(). Depending on the timing of pipe 
creation and connection, attackers might be able to squat on a pipe and impersonate 
the server. 
When creating a single-instance pipe using CreateFile(), a squatting vulnerability 
can occur in much the same way it does with files: The server neglects to use the 
CREATE_NEW flag in its dwCreationDisposition parameter. When CreateNamedPipe() is 
used for a single instance, the problem happens when the dwOpenMode parameter 
doesn't contain FILE_FLAG_FIRST_PIPE_INSTANCE (available only in Windows 2000 SP2 
and later). Here's an example of a vulnerable call: 
BOOL HandlePipe(SECURITY_DESCRIPTOR *psd) 
{ 
    HANDLE hPipe; 
    hPipe = CreateNamedPipe("\\\\.\\pipe\\MyPipe", 
        PIPE_ACCESS_DUPLEX, PIPE_TYPE_BYTE, 
        PIPE_UNLIMITED_INSTANCES, 1024, 1024, 
        NMPWAIT_USE_DEFAULT_WAIT, psd); 
    if(hPipe == INVALID_HANDLE_VALUE 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
720 
       || ConnectNamedPipe(hPipe, NULL)) { 
        CloseHandle(hPipe); 
        return FALSE; 
    } 
    ... do stuff with the pipe ... 
    DisconnectNamedPipe(); 
} 
This server fails to specify FILE_FLAG_FIRST_PIPE_INSTANCE or limit the number of 
connections. Therefore, attackers can create and connect to a pipe named "MyPipe" 
before this application. Because attackers start listening on the pipe first, the client 
connects to them first. Depending on timing and the number of instances allowed, the 
real server might receive an error or have a valid pipe handle that's last in the 
connection queue. If the server creates a pipe successfully and is the last thread in 
the connection, it can just continue along happily. It might even perform sensitive 
operations based on the assumption that the pipe is valid. 
Clients 
Clients are actually more susceptible to name squatting with named pipes because 
they might unintentionally connect to a malicious pipe server. Guardent Technologies 
disclosed this type of vulnerability in August 2000 
(www.securityfocus.com/advisories/2472). The Windows 2000 Service Control 
Manager (SCM) uses a predictable named pipe for communication with services. 
However, the SCM didn't check for preexisting pipes when starting a service. This 
meant attackers could simply create the pipe and start any service that could be 
started by a normal user (the ClipBook service, for example). The target service 
would then connect to the attacker-controlled pipe and the attacker would escalate 
privilege by impersonating the service account. 
Fortunately, the introduction of the SeImpersonatePrivilege has gone a long way 
toward eliminating this type of impersonation vulnerability. However, it's still a viable 
attack for older systems and for breaking the isolation of restricted service accounts. 
Even without impersonation, this attack is still a successful denial of service. It also 
provides a trusted channel into a privileged process, which could expose sensitive 
data or other potential vulnerabilities. 
7.8.5 Mailslots 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
721 
Mailslots are another IPC mechanism offered by Windows. In contrast to named 
pipes, mailslots are neither connection-oriented nor bidirectional; clients simply send 
messages to a server process. Mailslot clients never read from a mailslot; only 
servers can (the server being the process that has a handle to the mailslot object). 
The limited functionality mailslots offer translates into much less work for code 
auditors. However, for the sake of completeness, the following sections run through 
some basics. 
Mailslot Permissions 
Mailslots don't have a unique set of access rights. Instead, they use the standard file 
access rights discussed in Chapter 11(? [????.]). Their permissions can be audited in 
the same manner as standard file permissions. 
Mailslot Squatting 
Mailslot squatting isn't possible in the same way it is with most other named objects 
because mailslots have only a creation function, CreateMailslot(), which fails if a 
mailslot of the same name already exists. The client end of a mailslot is then opened 
with CreateFile(), which fails if you attempt to open a mailslot that doesn't exist. 
There's the possibility of a client sending messages to a server it didn't intend to. This 
error occurs when a malicious user creates the mailslot before the server, so when the 
server starts and fails to create a mailslot, it simply exits, leaving the malicious 
mailslot in the object namespace for clients to connect to. This attack allows the rogue 
application to impersonate the server and read messages from clients, which could 
result in an information leak. 
7.8.6 Remote Procedure Calls 
The Remote Procedure Call (RPC) is an integral part of Windows operating systems. 
Essentially, RPC is a client/server protocol that application developers can use to call 
procedures on a local or remote node. Although developers often need to direct a 
client application to specifically connect to a remote machine, the connection details 
and data marshalling are done behind the scenes by the RPC layer. This behavior 
shelters developers from the details of how data is passed between the two machines 
and the manner in which procedures are called. 
There are two primary RPC protocols: Open Network Computing (ONC) RPC 
(sometimes called SunRPC) and Distributed Computing Environment (DCE) RPC. 
Chapter 10(? [????.]), "UNIX II: Processes," discusses ONC RPC as it pertains to UNIX 
applications. Microsoft uses DCE RPC, which is quite different, but from a 
code-auditing perspective, the basic procedures for locating exposed code are similar. 
Microsoft RPC programs have some additional complications, discussed in the 
following sections. 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
722 
RPC Connections 
Before you get into the details of auditing RPC programs, you need to be aware of 
some basics of how clients and servers communicate. Before a client can call a remote 
procedure, it needs to create a binding to the destination interface. A binding is an 
application-level connection between the client and server. It contains connection 
details, including the authentication state, and is expressed structurally in RPC 
programs through binding handles. Binding handles are used to subsequently 
perform operations such as calling procedures, establishing authentication, and so 
on. 
The following sections refer to an endpoint mapper, which is an RPC component 
used to establish bindings. Most of the endpoint mapper's operation is handled 
implicitly from a code-auditing standpoint, so you don't need to concern yourself too 
much with it. Just be aware it exists and is responsible for establishing a binding 
between the RPC client and server. 
RPC Transports 
The Windows RPC layer is transport independent, meaning it can package its data 
structures on top of a variety of underlying protocols. When you see a function that 
takes a "protocol sequence" argument, it's referring to the protocol used to transport 
RPC data between two endpoints. The selected transport can definitely affect the 
application's security, as explained in the following sections. These RPC protocols are 
divided into three categories, described in the next three sections. 
NCACN 
The network computing architecture connection-oriented protocol (NCACN) is for RPC 
applications that need to communicate remotely across a network. Protocols in these 
categories are connection oriented, meaning they provide reliable, two-way, 
end-to-end connections for the duration of a session. Table 12-3 lists the protocols 
available in this category. 
Table 12-3. NCACN Protocol Sequences 
Protocol Sequence Description 
ncacn_nb_tcp 
NetBIOS over TCP 
ncacn_nb_ipx 
NetBIOS over Internetwork Packet Exchange (IPX) 
ncacn_nb_nb 
NetBIOS Enhanced User Interface (NetBEUI) 
ncacn_ip_tcp 
RPC data sent over regular TCP/IP connections 
ncacn_np 
RPC data sent over named pipes 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
723 
Table 12-3. NCACN Protocol Sequences 
Protocol Sequence Description 
ncacn_spx 
RPC data sent over Sequenced Packet Exchange (SPX) 
ncacn_dnet_nsp 
DECnet transport 
ncacn_at_dsp 
AppleTalk DSP 
ncacn_vns_spp 
Vines scalable parallel processing transport 
ncacn_http 
RPC over HTTP (which runs on top of TCP) 
NCADG 
The network computing architecture datagram protocol (NCDAG) is also reserved for 
RPC applications that need to communicate with remote nodes across a network. 
Unlike NCACN protocols, however, the NCADG protocols provide a connectionless 
transport. Table 12-4 lists the valid protocol sequences. 
Table 12-4. NCADG Protocol Sequences 
Protocol Sequence Description 
ncadg_ip_udp 
RPC traffic sent over User Datagram Protocol (UDP) 
ncadg_ipx 
RPC traffic sent over IPX 
NCALRPC 
The network computing architecture local remote procedure call protocol (NCALRPC) 
is used by RPC applications in which the client and server reside on the same machine. 
Local RPC calls, also know as local procedure calls (LPC), are a function of the OS and 
don't require any further qualification; that is, there's no requirement for other 
protocols or IPC mechanisms to be used to send RPC data between the client and the 
server. Hence, the only protocol sequence for local RPC calls is simply ncalrpc. 
Microsoft Interface Definition Language 
When auditing RPC servers, you should start with procedures that can be called 
remotely with untrusted user input. A lot of RPC servers define their interface in terms 
of the available procedures and what arguments those procedures take. Microsoft 
provides Microsoft Interface Definition Language (MIDL), a simplified language for 
defining these interfaces. MIDL has a C-like structure, which makes it fairly easy for 
most programmers to use. Look for .idl files when you're reviewing code; they 
contain the definitions that generate C/C++ stubs for RPC applications. The structure 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
724 
of these files and how they produce the client and server interfaces RPC applications 
use are covered in the following sections. 
IDL File Structure 
An IDL file is composed of two main parts: an interface header and an interface body. 
These two sections define an RPC interface for a program and are quite easy to follow. 
IDL Interface Header 
An interface header appears at the beginning of an interface definition and is enclosed 
in square brackets ([ and ]). Within those brackets is a series of interface-specific 
attributes separated by commas. These attributes have the following syntax: 
attribute_name(attribute_arguments) 
For example, an attribute with the name version and the argument 1.1 would appear 
as version(1.1). Many attributes can be used, but the main ones are uuid, version, 
and endpoint. The first two simply provide the universal unique ID (UUID) of the RPC 
interface and the version number of the application this interface definition 
represents. The endpoint attribute specifies where the RPC server receives requests 
from. Endpoint transports are described in terms of a protocol sequence and a port. 
The protocol sequence describes what transports the RPC interface is accessible over. 
The format of the port (or, more appropriately, the endpoint) is specific to the 
protocol sequence. Putting all this information together, here's an example of an 
interface header: 
[ 
   uuid(12345678-1234-1234-1234-123456789012), 
   version(1.1), 
   endpoint("ncacn_ip_tcp:[1234]") 
] 
In this example, the RPC server accepts requests only via TCP/IP on port 1234. 
IDL Definition Body 
After the interface definition header is the definition body, which details all the 
procedures available for clients to use and the arguments those procedures take. The 
definition body begins with the interface keyword, followed by the interface's 
human-readable name and the interface definition enclosed in curly braces. Here's an 
example of a definition body: 
interface myinterface 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
725 
{ 
    ... definition goes here ... 
} 
Inside the curly braces are the definitions for procedures that can be called by clients 
and are implemented elsewhere in the application. The remote procedure prototypes 
are similar to C function prototypes, except each function and argument to a function 
can contain additional attributes enclosed in square brackets. Again, you might 
encounter quite a few of these attributes, but most of them are fairly self-explanatory. 
Typically, the only information that needs to be indicated is whether the argument is 
for input (function attribute in) or output (function attribute out). An example of an 
interface definition is shown: 
interface myinterface 
{ 
    int RunCommand([in] int command, 
                [in, string] unsigned char *arguments, 
                [out, string] unsigned char *results); 
} 
This interface definition is quite simple; it provides just one interface for running a 
command. It fails to address some important considerations, such as authentication 
and maintaining session state. However, it does show what a basic interface looks like, 
so you can move on to the details in the following sections. 
Compiler Features 
The Microsoft IDL compiler includes a few options that can improve an RPC 
application's security. The range attribute provides a method for restricting the values 
of a numeric field. It can be used to restrict data types along with attributes such as 
size_is and length_is. Here's an example: 
interface myinterface2 
{ 
    int SendCommand([in, range(0, 16)] int msg_id, 
                [in, range(0, 1023)] int msg_len, 
                [in, length_is(msg_len)] unsigned char *msg); 
} 
This interface restricts the value of msg_len to a known range and forces the length of 
msg to match. These types of rigid interface restrictions can prevent vulnerabilities in 
the code. Of course, defining restrictions doesn't help if the compiler does not apply 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
726 
them. The /robust switch must be used as a compilation option. This compiler switch 
handles the range keyword and builds in additional consistency checks. This capability 
is available only in Windows 2000 and later. 
Application Configuration Files 
In addition to IDL files, each interface has application configuration files (ACFs). 
Whereas the IDL file describes an interface specification that clients and servers need 
to adhere to, the ACF describes attributes that are local to the client or server 
application and affect certain behaviors. For example, code and nocode attributes can 
be used in an ACF to direct the MIDL compiler to not bother generating stubs for 
various parts of the interface because they aren't used in this application. ACFs have 
the same format as their IDL counterparts, except the attributes they specify don't 
alter the interface definition. They have an attribute list defined in square brackets 
followed by the interface keyword and an interface definition. The definition must be 
identical to the one in the IDL file that defines the same interface. 
You should note a couple of points about ACFs and IDL files. First, they are optional. 
An application doesn't need to make an ACF to build a working RPC application. If the 
ACF doesn't exist, no special options are enabled. Further, the contents of the ACF 
can be put in an IDL file; it doesn't matter to the MIDL compiler. So you often 
encounter ACF attributes in an IDL file. 
RPC Servers 
Now you have a basic idea of what to audit and where to start. Next, you need to 
examine how an RPC server might control the exposure of its network interfaces. This 
means you need to be familiar with how the RPC interface is registered and what 
impact registration might have on the application's attack surface. 
Registering Interfaces 
The basic registration of an RPC interface is achieved with one of two functions, 
described in the following paragraphs. 
The RpcServerRegisterIf() function is the primary means for registering an interface 
with the endpoint mapper: 
void RPC_ENTRY RpcServerRegisterIf(RPC_IF_HANDLE IfSpec, 
         UUID *MgrTypeUuid, RPC_MGR_EPV *MgrEpv) 
The first parameter is an RPC interface handle, which is a structure generated 
automatically by the MIDL compiler. The second argument associates a UUID with the 
third argument, an entry point vector (EPV). The EPV is a table of function pointers to 
the RPC routines available to clients connecting to the interface. Generally, the 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
727 
second and third arguments are NULL, which causes no UUID to be associated with 
the EPV and accepts the default EPV generated by the MIDL compiler. 
The RpcServerRegisterIfEx() function gives developers more control in registering an 
RPC interface: 
RPC_STATUS RPC_ENTRY RpcServerRegisterIfEx(RPC_IF_HANDLE IfSpec, 
        UUID *MgrTypeUuid, RPC_MGR_EPV *MgrEpv, 
        unsigned int Flags, unsigned int MaxCalls, 
        RPC_IF_CALLBACK_FN *IfCallback) 
This function can be used to restrict the interface's availability. Of particular note is 
the last parameter, which is a security callback function. It's called whenever a client 
attempts to call a procedure from the interface being registered. This function is 
intended to evaluate each connecting client and whether it should have access to the 
interface. It's called automatically whenever a client attempts to access an interface. 
The Flags parameter also has some interesting side effects on how the server 
behaves. These are the two most security-relevant flags: 
RPC_IF_ALLOW_CALLBACKS_WITH_NO_AUTH Normally, registering a security 
callback function doesn't prevent unauthenticated RPC calls from being 
rejected automatically. Specifying this flag negates that behavior, permitting 
unauthenticated calls. This flag requires the callback function to permit or 
deny the request based on other criteria. 
RPC_IF_ALLOW_LOCAL_ONLY Requests are allowed only from local named pipes 
(ncacn_np) or local RPC (ncalrpc). All requests from other protocol sequences 
or via remote named pipes are rejected automatically. 
RPC interfaces can also be registered through the following function: 
RPC_STATUS RPC_ENTRY RpcServerRegisterIf2(RPC_IF_HANDLE IfSpec, 
        UUID *MgrTypeUuid, RPC_MGR_EPV *MgrEpv, 
        unsigned int Flags, unsigned int MaxCalls, 
        unsigned int MaxRpcSize, 
        RPC_IF_CALLBACK_FN *IfCallbackFn) 
This function is identical to RpcServerRegisterIfEx(), except it contains an additional 
parameter, MaxRpcSize, used to specify a maximum size in bytes for RPC messages. It 
can be especially useful for preventing buffer manipulation attacks when the message 
size is fixed or within a known range. 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
728 
A quick glance at these three functions should make it clear that how a server is 