If (cid:12) is applied to two vectors, it is performed separately for each position.
D outputs a set of single-input elements with distinct input-proﬁles such that e =(cid:80)
Next we describe an algorithm D used by Sim to decompose elements into single-input
elements. Parts of this description have been taken verbatim from [4]. Given an element e,
s∈D(e) s,
where the equality between the elements means that their values compute the same function
(it does not mean that the arithmetic circuits that represent these values are identical). Note
that the above requirement implies that for every s ∈ D(e), S(s) = S(e). Moreover, for each
s ∈ D(e), D also computes the input-proﬁle of s recursively.
The decomposition algorithm D outputs a set of elements and their associated input proﬁle
and is deﬁned recursively, as follows:
• Element e is basic: D outputs the singleton set {e}. Let S(e) = S(i, b1, b2). Then Prof(e)
is as follows: Prof(e)inp1(i) = b1, Prof(e)inp2(i) = b2, and Prof(e)j = ∗ for all j ∈ [(cid:96)], j (cid:54)=
inp1(i), j (cid:54)= inp2(i).
35
• Element e is of the form e1 + e2: D computes recursively L1 = D(e1), L2 = D(e2) and
outputs L = L1 ∪ L2. If there exist elements s1, s2 ∈ L with the same input-proﬁle, D
replaces the two elements with a single element s = s1 + s2 and Prof(s) = Prof(s1). It
repeats this process until all the input-proﬁles in L are distinct and outputs L.
• Element e is of the form e1 · e2: D computes recursively L1 = D(e1), L2 = D(e2). For
every s1 ∈ L1 and s2 ∈ L2, D adds the expression s1 · s2 to the output set L and
sets Prof(s) = Prof(s1) (cid:12) Prof(s2). D then eliminates repeating input-proﬁles from L as
described above, and outputs L.
Remark 1. Note that if s = s1·s2 such that Prof(s1)j = 0 and Prof(s2)j = 1, then Prof(s)j = ⊥.
Hence, multiplication gates can lead to an element with invalid input-proﬁle. This observation
will be used often in the later proofs.
The fact that in the above decomposition algorithm indeed e = (cid:80)
s∈D(e) s, and that the
input proﬁles are distinct follows from a straightforward induction. Now, we prove a set of
claims and conclude that D(e) runs in polynomial time (see Claim 15). We begin by proving a
claim about the relation between the level of encoding of e and a sub-element e(cid:48) of e.
Claim 13. If e(cid:48) is a sub-element of e, then there exists a collection of disjoint sets C from
our set systems {Sj}j∈[(cid:96)], Us and Ut such that the sets in C are disjoint with S(e(cid:48)) and S(e) =
S(e(cid:48)) ∪(cid:83)
S∈C S.
The above claim says that if e(cid:48) is a sub-element of e, the set corresponding to the encoding
of e can be seen as being derived from the set used for encoding of e(cid:48). Intuitively, this is true
because in obtaining e from e(cid:48), the set of encoding never shrinks. It remains same with each
addition and increases as union of two disjoint sets with each multiplication. Thus, there would
exist a collection of sets such that S(e) can be written as the union of this collection of disjoint
sets along with the set of e(cid:48). In other words, there exists a cover for S(e) which involves the set
S(e(cid:48)) and some other disjoint sets from our set system.
S∈C S. The claim follows by noting that S(e) = S(e1).
and S(e1) = S(e(cid:48)) ∪(cid:83)
the sets in C1 are disjoint with S(e(cid:48)) and S(e1) = S(e(cid:48))∪(cid:83)
Proof. (of Claim 13) We will prove this claim by induction on the size of e. If e = 1, i.e. e
If e = e1 + e2, then either (1) e(cid:48) = e or
is a basic element, then the claim trivially holds.
(2) e(cid:48) is a sub-element of either e1 or e2. In the ﬁrst case, the claim is trivially true. In the
second case, let wlog e(cid:48) be sub-element of e1. Then by induction hypothesis, there exists a
collection of disjoint sets C from our set systems such that the sets in C are disjoint with S(e(cid:48))
Finally, if e = e1 · e2, either (1) e(cid:48) = e or (2) e(cid:48) is a sub-element of either e1 or e2. In the ﬁrst
case, the claim is trivially true. In the second case, let wlog e(cid:48) be sub-element of e1. Then by
induction hypothesis, there exists a collection of disjoint sets C1 from our set systems such that
S. Now, for e2 either (1) e2 is a
basic element or (2) there exists a basic sub-element e(cid:48)(cid:48) of e2. In the ﬁrst case, C = C1 ∪{S(e2)}
since for valid multiplication S(e1) ∩ S(e2) = ∅. In the second case, we apply the induction
hypothesis on e2, e(cid:48)(cid:48) and get a collection of sets C2 and C = C1 ∪ (S(e(cid:48)(cid:48)) ∪ C2). Note that S(e(cid:48)(cid:48))
is a union of two disjoint sets from our set system.
S∈C1
Next, we prove that for elements which can be zero-tested, i.e. elements at the highest
level of encoding, all the elements output by the procedure D are single input elements.
In
this direction, we ﬁrst observe that adding two elements does not create new input-proﬁles.
That is, only way to create new proﬁles is to multiply two elements. As noted in Remark 1,
multiplication of two elements can lead to invalid proﬁles. Here we use the observation that if
e = e1 · e2 has invalid input proﬁle then computations involving e cannot lead to an element at
the universe set and cannot be zero-tested. Here we crucially use the properties of straddling
sets and Claim 13. More formally,
36
Claim 14. If U = S(e) then all the elements in D(e) are single-input elements. Namely, for
every s ∈ D(e) we have that Prof(s) (cid:54)= ⊥.
Proof. We will prove this claim by contradiction. Let us assume that the claim is false. Then
there exists a sub-element ebad of e such that D(ebad) contains an invalid input-proﬁle but
decomposition of all sub-elements of ebad have valid input-proﬁles. We now do a case analysis
on the structure of ebad.
ebad cannot be a basic sub-element since input-proﬁle of all basic sub-elements is valid. Also,
ebad cannot be of the form e1 + e2 because input-proﬁles in D(ebad) is a union of input-proﬁles
in D(e1) and D(e2). Hence, ebad is of the form e1 · e2.
The only way D(ebad) contains an invalid input-proﬁle when all input proﬁles in D(e1) and
D(e2) are valid is the following: There exists a s1 ∈ D(e1) and s2 ∈ D(e2) such that Prof(s1) (cid:54)= ⊥
and Prof(s2) (cid:54)= ⊥ but Prof(s1 · s2) = ⊥. Then, wlog there exists j ∈ [(cid:96)] such that Prof(s1) = 0
and Prof(s2) = 1. From the description of input proﬁles, there exists a basic sub-element ˆe1
of s1 such that S( ˆe1) ∩ Uj = Sj
k,0 ∈ Sj for some k ∈ ind(j). Similarly, there exists a basic
sub-element ˆe2 of s2 such that S( ˆe2) ∩ Uj = Sj
Intuitively, using Claim 4, we show that there is no way of combining ˆe1 and ˆe2 to form a
valid element e such that S(e) ⊇ Uj. For this, we critically use the properties of the straddling
set system and the fact that the set used for encoding only grows as union of two disjoint sets (as
we do more multiplications). Hence, to obtain e using ˆe1 and ˆe2, we need to ﬁnd a collection of
disjoint sets whose union along with S( ˆe1) and S( ˆe2) gives U. This is not possible by properties
of straddling sets. More formally, we have the following:
Since, ˆe1 is a basic sub-element of s1, by Claim 13, there exists a collection C1 such that
S. Similarly, there exists a collection C2 such that S(s2) = S( ˆe2) ∪
S. Since (s1 · s2) is a valid multiplication, (cid:0)S( ˆe1) ∪(cid:83)
S(s1) = S( ˆe1) ∪ (cid:83)
(cid:83)
S(cid:1)(cid:83)(cid:0)S( ˆe2) ∪(cid:83)
k(cid:48),1 ∈ Sj for some k ∈ ind(j).
S(cid:1) =
S∈C1
S∈C2
S(s1 · s2) = S(e1 · e2) = S(ebad).
Again, since ebad is a sub-element of e, using Claim 13, there exists a collection C such that
S(ebad) and C form a cover for S(e). This implies that there is an exact cover of U using both
k(cid:48),1 for some k, k(cid:48) ∈ ind(j), j ∈ [(cid:96)]. This is a contradiction to Claim 4 for straddling
Sj
k,0 and Sj
set system Sj for Uj.
S∈C2
S∈C1
Finally, we prove the main claim of this section that D runs in polynomial time. First observe
that only multiplication can create new input proﬁles. We show that if e is an element of the
form e1 · e2 and D(e) contains a new input-proﬁle then e must itself be a single-input element
(that is, D(e) will be the singleton set {e}). This means that the number of elements in the
decomposition of e is bounded by the number of sub-elements of e, and therefore is polynomial.
To prove the above we ﬁrst observe that if D(e) is not a singleton, then either D(e1) or D(e2)
are also not singletons. Then we show that if D(e1) contains more than one input-proﬁle then
all input-proﬁles in D(e1) must be complete. Here again we use the structure of the straddling
set system and therefore the multiplication e1 · e2 cannot contain any new proﬁles.
Claim 15. D(e) runs in polynomial time, i.e. number of elements in D(e) is polynomial.
Proof. Observe that the running time of D on e is polynomial in the number of the single-input
elements in D(e). Hence, to show that D runs in polynomial time, we will show that the size of
the set D(e) is bounded by the number of sub-elements of e. More precisely, for each s ∈ D(e),
we show a single-input sub-element e(cid:48) of e such that Prof(e(cid:48)) = Prof(s). Since D(e) has single
input elements with distinct proﬁles, we get that |D(e)| is polynomial since e has a polynomial
number of sub-elements.
For each s ∈ D(e), let e(cid:48) be the ﬁrst sub-element of e such that D(e(cid:48)) contains a single
input element with input-proﬁle Prof(s) and decomposition of no sub-element of e(cid:48) contains a
single-input element with input-proﬁle Prof(s). Then we claim that e(cid:48) is a single input element,
i.e. D(e(cid:48)) = {e(cid:48)}. We have the following cases.
37
e(cid:48) is a basic sub-element of e, then by deﬁnition, D(e(cid:48)) = {e(cid:48)}. Next, if e(cid:48) = e1 + e2, then
all the input-proﬁles in D(e(cid:48)) are either in e1 or e2. That is, e(cid:48) cannot be the ﬁrst sub-element
of e which contains the input proﬁle Prof(s). Finally, let e(cid:48) = e1 · e2. We need to show that
D(e(cid:48)) = {e(cid:48)}. Suppose not, that is |D(e(cid:48))| > 1. In this case, we will show that D(e(cid:48)) cannot
contain any new input proﬁles. Let s(cid:48) ∈ D(e(cid:48)) such that Prof(s) = Prof(s(cid:48)).
By the deﬁnition of D, either |D(e1)| > 1 or D(e2) > 1. Wlog, let us assume that D(e1) > 1,
that is there exists s11, s12 ∈ D(e1) and s2 ∈ D(e2) such that s(cid:48) = s11 · s2. By the deﬁnition
of D, it holds that S(s11) = S(s12) and since the all the input-proﬁles in the decompisition
are distinct Prof(s11) (cid:54)= Prof(s12). Wlog, there exists a j ∈ [(cid:96)] such that Prof(s11)j = 0 and
Prof(s12)j ∈ {1,∗}.
First, we claim that if S(s11) = S(s12) and Prof(s11)j = 0 then Prof(s12)j (cid:54)= ∗. By the
deﬁnition of input-proﬁles, S(x) ∩ Uj = ∅ if and only if Prof(x)j = ∗. Hence, if Prof(s11)j = 0
and Prof(s12)j = ∗ then S(s11) ∩ Uj (cid:54)= ∅ and S(s12) ∩ Uj = ∅. Then, S(s11) (cid:54)= S(s12), which is
a contradiction.
k,1.
12 such that S(s(cid:48)
12) ∩ Uj = Sj
11) ∩ Uj = Sj
11 of s11 such that S(s(cid:48)
The remaining case is Prof(s11)j = 0 and Prof(s12)j = 1. We claim that there is no basic
If this not true, then Prof(s11) = ⊥.
sub-element s(cid:48)
Similarly, for s12, there is no basic sub-element s(cid:48)
k,0. This means
that s11 and s12 have consistently used xj = 0 and xj = 1 in their evaluation. Now, by Claim 5,
for S(s11) = S(s12) it has to be the case that Uj ⊆ S(s11) = S(s12). By Claim 16, Prof(s11) is
complete. But, multiplying an element with complete proﬁle to another element cannot lead to
any new valid proﬁle. Hence, we get a contradiction to the assumption on e(cid:48).
Claim 16. If s is a single-input element such that Uj ⊆ S(s) for some j ∈ [(cid:96)], then Prof(s) is
complete.
Proof. Since s is a single input element, Prof(s)j (cid:54)= ⊥. Also, Prof(s)j (cid:54)= ∗ because S(s)∩Uj (cid:54)= ∅.
Let Prof(s) = b for some b ∈ {0, 1}. Also, since Uj ⊆ S(s), for every i ∈ ind(j) there exists a
basic sub-element si of s such that S(si) ∩ Uj = Sj
i,b. Moreover, S(si) = S(i, b1, b2) such that
Prof(s)inp1(i) = b1 and Prof(s)inp2(i) = b2.
We will show that for any k ∈ [(cid:96)], Prof(s)k (cid:54)= ∗. By the property of dual input relaxed
matrix branching program, there exists i∗ ∈ [n] such that wlog, (inp1(i∗), inp2(i∗)) = (j, k).
Since Uj ⊆ S(s), there exists a basic sub-element si∗ of s such that S(si∗ ) = S(i∗, b1, b2). Since
inp2(i) = k, Prof(s)k (cid:54)= ∗.
D.2 Simulation of Zero-testing
We ﬁrst describe the simulation of the zero-testing at a high level and then will formally describe
the simulation. The simulator uses the decomposition algorithm deﬁned in the previous section
to decompose the element e, that is to be zero tested, into single-input elements. Zero-testing of
e essentially involves zero-testing every element in its decomposition. Then we establish that if
e corresponds to a zero polynomial then indeed every element in the decomposition of e should
correspond to a zero polynomial. The intuition is that every element in its decomposition has
product of α’s which is diﬀerent for every in its decomposition. And hence, with negligible
probability it happens that the α’s cancel out and yield a zero-polynomial. The only part left is
to show that indeed we can perform zero-testing on every element in decomposition individually.
To perform this we use the simulation algorithm deﬁned in Section 4. We evaluate the polyno-
mial corresponding to the single-input element on the output of the simulation algorithm. We
then argue that the probability that if the single-input element was indeed a non-zero polyno-
mial then with negligible probability the polynomial evaluates to 0. This establishes that if the
polynomial is a non-zero polynomial then we can indeed detect some single-input element in its
38
decomposition to be non-zero with overwhelming probability.
We now describe zero testing performed by the simulator Sim. Denote the element to be zero
tested to be e and denote the polynomial computed by the circuit α(e) by pe.
1. Sim ﬁrst executes the decomposition algorithm D described before on e. Denote the set of
resulting single-input elements by D(e). The output of Sim is either “Zero” or “Non-zero”
depending on whether the element is zero or not.
2. For every s ∈ D(e) execute the following steps:
(a) Find the input x that corresponds to the element s. More formally, denote x by
(b) Execute SimBP on input (1s, F(x)), where s is the size of the formula F to obtain the
Prof(s). It then queries the F oracle on x to obtain F(x).
following distribution represented by the random variable V Sim
.
s
(cid:110)
˜s, ˜Bi,bi
1,bi
2
, ˜t : i ∈ [n], bi
1 = xinp1(i), bi
2 = xinp2(i)
(cid:111)
(c) We evaluate the polynomial ps, which is the polynomial computed by the circuit α(s),
. If the evaluation yields a non-zero result then Sim outputs “Non-zero”.
on V Sim
s
3. For all s ∈ D(e), if ps(V Sim
s
) = 0 then Sim outputs “Zero”.
This completes the description of the zero-testing as performed by the simulator. We now argue
that the simulator runs in polynomial time.
Running time. From Claim 15 it follows that the ﬁrst step, which is the execution of the decom-
position algorithm, takes polynomial time. We now analyse the running time of the steps (a), (b)
and (c). Step (a) takes linear time. The running time of Step (b) is essentially the running time
of SimBP which is again polynomial. Finally, Step (c) is executed in time which is proportional
to the number of queries made by the adversary to the oracle O(M) which are simulated by the
simulator. Since the number of queries is polynomial, even Step (c) is executed in polynomial
time. Finally we argue that the Steps (a), (b) and (c) are executed polynomially many times.
This follows from Claim 15 which shows that the number of elements in the decomposition is
polynomial and hence the number of iterations is polynomial. Hence, our simulator runs in
polynomial time.
We prove the following two claims about the structure of the polynomial representing the element
to be zero tested that establishes the correctness of simulation. This will be useful when we will
show later that element is zero iﬀ all the elements obtained by its decomposition are zero.
Claim 17. Consider an element e such that U ⊆ S(e). The polynomial computed by the circuit