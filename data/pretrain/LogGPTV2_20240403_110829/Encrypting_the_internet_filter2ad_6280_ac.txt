N
u
)2mod
)
(
(
k
(cid:152)
(cid:109)
C
C
(cid:109) 2/
NCif
(cid:116)
then
C
k
,2mod
k
C
(cid:152)(cid:14)(cid:109)
NuC
(cid:16)(cid:109)
NC
return
C
12/
12/
(cid:16)
do
do
Figure 4: Adapted Montgomery Reduction
c
:
W
2
(cid:16)
word
word
w
CL
CLet
c
[
[
W(cid:32)
1
(cid:16)
bewLet
bewLet
the
the
ˆ
N
N
2mod
1
(cid:16)(cid:109) (cid:16)
U
(cid:109)
for
i
i
for
C
(cid:109)
(cid:109)
0
0
Wto
Wto
ˆ
Nc
Nc
(cid:152)(cid:109)
(cid:109)
i
U
,2/
k
u
u
i
(cid:109)
U
w
2mod
,2mod
NUif
(cid:116)
U
U
then
wi
(cid:152)2
2
(cid:152)(cid:14)(cid:109)
(cid:14)(cid:109)
i
NU
NuU
NuU
(cid:152)
U
(cid:16)(cid:109)
Figure 3: Montgomery Reduction
4
2
In what follows we justify our claim through an exam-
)) composite ﬁeld, the elements of
)
ple. For the GF ((2
2
) are bit-pairs. Thus, its respective
the ground ﬁeld GF (2
operations can be performed using only a handful (1-7) of
logic gates. From the equation a · b = 1 one can construct
a Cramer system relating the bit pairs of the input with
the bit pairs of the output. The resulting logic functions are
simple and can be implemented with a few logic gates involv-
ing no more than 9 terms. In this example, the irreducible
))
polynomial which extends the ﬁeld GF (2
+ 2. For this design the SBox area is no
is x
more than 419 gates. This corresponds to 84% gate count
reduction as compared to the table lookup design of 2,623
2-input NAND gates. More area eﬃcient SBox designs are
reported in [18, 35].
If each SBox requires 419 gates, 16
SBoxes require 6704 gates. This means that the AES area
requirement is in the same order of magnitude as that of
other common ALU circuits.
5.3 RSA Acceleration
) to GF ((2
+ x
+ x
)
2
2
4
4
3
2
Another computationally expensive part of SSL transac-
tions is RSA processing. The RSA algorithm involves the
calculation of modular exponents for both the encryption
and decryption processes. The calculation of modular ex-
ponents can be further reduced to performing modular mul-
tiplications and modular squaring operations using square-
and-multiply or exponent windowing techniques.
A popular algorithm used for performing modular mul-
tiplications and modular squaring operations is the Mont-
gomery algorithm. The Montgomery algorithm accepts as
input two numbers A and B each of length k in bits and a
divisor N and returns the number C = A · B · 2
modN .
Several ways to implement Montgomery have been proposed
[30]. In our implementation the operands A and B are ﬁrst
multiplied with each other resulting in an intermediate value
C. Then C is reduced modN . For the reduction part the
processing can be done on a word-by-word basis where the
word size can vary from implementation to implementation.
Assuming that 2k = w · W where w is the word size, the
Montgomery reduction can be written as in Figure 3.
−k
The rationale behind the Montgomery reduction algorithm
is that variable U is initialized to C and in every step of the
iteration the least signiﬁcant non-zero word of U becomes
zero. In the end the most signiﬁcant half of U is the desired
result. Clearly, word-by-word Montgomery does not equal
large number multiplication. However, if the word size w is
half of the size of C (i.e., W = 2) Montgomery is reduced to
1.5 big number multiplications and one addition as shown
in Figure 4.
From the above it is evident that the performance of RSA
can be improved by accelerating the big number multipli-
cation process which is an essential and compute-intensive
part of the algorithm. Our implementation uses an opti-
mized schoolbook big number multiplication algorithm. We
have developed integer arithmetic software that can acceler-
ate big number multiplication and modular reduction by at
least 2x as compared to routines found in the crypto library
of OpenSSL 0.9.8. Our software can be used not only in
RSA public key encryption but also in Diﬃe Hellman key
exchange and Elliptic Curve Cryptography.
The code listing of Figure 5 (assembly written using the
AT&T syntax running on a Intel R(cid:2) CoreTM i7 processor)
illustrates the main idea which is to do multiply and add
operations combined with a register recycling technique for
intermediate values. Here ‘a’ and ‘b’ are variables that hold
the two large numbers to be multiplied (i.e., A and B) and
the result C is stored in the variable ‘r’. Partial products
are computed in ‘vertical order’. Vertical order means that
all partial products between big number slices are computed
together for the slices associated with the same index sum.
Computations begin for the smallest index sum (i.e., 0) and
continue all the way up to the largest (i.e., 2k − 2). Each
partial product is added to the ﬁnal result as soon as it is
computed. It is easy to show that carry propagation does
not exceed the boundary of three big number slices. Hence
for each partial product the code needs to invoke one ‘mul’
one ‘add’ and two add-with-carry ‘adc’ instructions. Reg-
ister recycling helps in this case with reducing the ‘mov’
operations between registers and the system memory. Sim-
ilarly we are able to accelerate other popular cryptographic
schemes like RSA 2048 and elliptic curve cryptography. We
have also investigated other techniques for big number mul-
tiplication, including Karatsuba-like constructions [46, 31]
and found this schoolbook algorithm implementation to be
the fastest.
5.4 GCM Acceleration
Another cryptographic component of protocols like SSL
is message authentication. Message authentication can be
supported by algorithms like HMAC-SHA1 but also modes
of AES that combine encryption with authentication. One
such mode is AES-GCM. In this section we argue that GCM
can be sped up substantially with another processor instruc-
tion that performs carry-less multiplication [6].
Carry-less multiplication, also known as Galois Field Mul-
tiplication, is the operation of multiplying two numbers with-
out generating or propagating carries. In the standard inte-
ger multiplication the ﬁrst operand is shifted as many times
as the positions of bits equal to ‘1’ in the second operand.
The product of the two operands is derived by adding the
shifted versions of the ﬁrst operand with each other.
In
carry-less multiplication the same procedure is followed ex-
cept that additions do not generate or propagate carry. In
140asm("mulq %3;\n"
:"=a"(t0), "=d"(t1)
:"a"(a[0]), "g"(b[0])
:"cc");
: cc );
t2 = t0;
t3 = t1;
r[0] = t2;
t2 = t3;
t3 = t4;
0
t4
t4 = 0;
asm("movq (%5), %%rax;\n\t"
"mulq 8(%6);\n\t"
"addq %3, %0;\n\t"
"adcq %4, %1;\n\t"
"adcq $0, %2;\n\t"
"movq 8(%5), %%rax;\n\t"
"mulq (%6);\n\t"
"addq %3, %0;\n\t"
"adcq %4, %1;\n\t"
"adcq $0, %2;\n"
:"+r"(t2), "+r"(t3), "+r"(t4), "=a"(t0), "=d"(t1)
:"r"(a), "g"(b)
:"cc");
"g"(b[1])
g (b[1])
r[1] = t2;
asm("mulq %3;\n"
:"=a"(t0), "=d"(t1)
:"a"(a[1])
: a (a[1]),
:"cc");
asm("addq %2, %0;\n\t"
"adcq %3, %1;\n"
:"+r"(t0), "+r"(t1)
:"r"(t3), "r"(t4)
")
:"cc");
"
r[2] = t0;
r[3] = t1;
Figure 5: Big Number Multiplication Code
this way, bit additions are equivalent to the exclusive OR
(XOR) logical operation.
We have implemented a ﬁfth instruction supporting carry-
less multiplication, named ‘PCLMULQDQ’. Carry-less mul-
tiplication is supported between 64-bit quantities. This in-
struction demonstrates a latency of 14 clocks and a through-
put of 10 clocks.
In contrast, one of the fastest software
techniques that perform the same operation known to us
demonstrates a latency of approximately 100 clocks [8].
128
In what follows we justify our claim why we believe the
PCLMULQDQ accelerates GCM. The most compute in-
tensive part of GCM is multiplication in the ﬁnite ﬁeld
). The technique we describe in this paper is car-
GF (2
ried out in two steps: carry-less multiplication and reduction
+ x + 1. Carry-less multiplica-
modulo g = x
tion can be performed through successive invocations of the
PCLMULQDQ instruction.
+ x
+ x
128
7
2
To reduce a 256-bit carry-less product modulo a polyno-
mial g of degree 128, we ﬁrst split it into two 128-bit halves.
The least signiﬁcant half is simply XOR-ed with the ﬁnal
remainder (since the degree of g is 128). For the most sig-
niﬁcant part, we develop an algorithm that realizes division
via two multiplications. This algorithm can be seen as an ex-
tension of the Barrett reduction algorithm [16] to modulo-2
arithmetic, or as an extension of the Feldmeier CRC gener-
ation algorithm [22] to dividends and divisors of arbitrary
size.
Since we do not take into account the least signiﬁcant
half of the input (see above), we investigate the eﬃcient
generation of a remainder p(x) deﬁned as follows:
p(x) = c(x) · x
t
modg(x)
where, c(x) is a polynomial of degree s−1 with coeﬃcients in
GF (2), representing the most signiﬁcant bits of the carry-
less product (for GCM, s = 128), t is the degree of the
polynomial g (for GCM, t = 128), and g(x) is the irreducible
polynomial deﬁning the ﬁnal ﬁeld (for GCM, g = g(x) =
x
+ x + 1).
+ x
+ x
128
7
2
+
∗
Our algorithm involves the following steps:
Preprocessing: For the given irreducible polynomial g two
are computed ﬁrst. The polynomial
is of degree t− 1 consisting of the t least signiﬁcant terms
is of degree s and is equal
with the polynomial
polynomials g
∗
g
of g, whereas the polynomial q
to the quotient of the division of x
g.
and q
t+s
+
+
Calculation of the remainder polynomial: Step 1: The
. The result is a polynomial
input c is multiplied with q
of degree 2s − 1. Step 2: The s most signiﬁcant terms of
the polynomial resulting from step 1 are multiplied with
. The result is a polynomial of degree t + s − 2. Step
∗
g
3: The algorithm returns the t least signiﬁcant terms of
the polynomial resulting from step 2. This is the desired
remainder.
2
128
One can see that the quotient from the division of x
7
+ x
+