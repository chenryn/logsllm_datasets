object of Section 4 from 2k log n to just k log n.
The main insight is to allow compression of the 2k de-
cryption key possibilities into only k + 1 possibilities. This
is achieved by representing the Bloom ﬁlter bits and their
combination in a commutative format. By allowing the de-
cryption key pieces stored in the Bloom ﬁlter (described in
the previous section) to be added together, rather than con-
catenated, the client only has to account for k + 1 diﬀerent
outcomes at each level.
To this end, we start by ﬁrst establishing a secret level-
instance-speciﬁc token v = Hash(sk | level | gen), not known
to the server. In the Bloom ﬁlter, a bit set to 1 at position
pos is represented as Tpos = Hash(sk | level | gen | pos); a bit
set to 0 is represented as Fpos = Tpos + v mod 2c0 (Figure
3), where c0 is a security parameter.
In the following we
operate in Z2c0 , and assume that Hash(·) outputs in Z2c0 .
Now, the query object encryption key (QOEK) is gen-
erated by combining (adding) values using modular arith-
metic, instead of concatenation as in the strawman solution.
This allows the client to only account for k + 1 possibilities,
each key corresponding to the number of times v might show
up among the selected Bloom ﬁlter positions.
The server sums together the values found in the Bloom
ﬁlter, and performs a hash, yielding, e.g., Hash(bit1+bit2 . . .+
bitk mod 2c0 ) as the QOEK. The commutativity of modu-
lar addition means each permutation of bits set to 0 and
bits set to 1 in a given Bloom ﬁlter yields the same key. A
successful Bloom ﬁlter lookup occurs in the case that the
7Recall that biti does not reveal to the server anything about
the actual underlying Bloom ﬁlter bit since the server does
not know the hash key sk.
QOEK is Hash(Tpos0 + Tpos1 + ... + Tposk mod 2c0 ), which
unlocks the edge from the “active” to the “ﬁnished” set.
Further, each of the k values from Hash(Tpos0 +Tpos1 +...+
Tposk +v mod 2c0 ) through Hash(Tpos0 +Tpos1 +...+Tposk +
kv mod 2c0 )—the result of a failed Bloom ﬁlter lookup; the
server does not know they are failures—unlocks an edge in
the query object that continues through the current (“ﬁn-
ished” or “active”) set (Figure 2). Figure 4 provides a sum-
mary of the query object format.
Let us now consider an example from the perspective of
the server. Say the client sends a query object for an item
x. This query object contains a single Level 1 node in clear-
text, and two nodes for every level below. The Level 1 ac-
tive node tells it to query positions L1pos1 . . .L 1posk. The
server retrieves the values stored in the Bloom ﬁlter at these
locations, adds them modulus 2c0, and applies the one-way
hash function. This yields a decryption key. The server now
tries this key on all k encrypted values included in the Level
1 node. It ﬁnds one that successfully decrypts, revealing a
data ID to retrieve from Level 1, as well as the decryption
key for one of the two Level 2 nodes. The server appends
the retrieved Level 1 data item to its result, then decrypts
the Level 2 node that it has the key for.
The server now repeats for the Level 2 node. It ﬁnds a
list of Bloom ﬁlter positions, which it again retrieves, adds
modulus 2c0, and hashes, yielding a decryption key which it
tries on the encrypted values included in the Level 2 node.
Again, only one will decrypt. The server never learns which
are the active or ﬁnished nodes; it simply sends back log2 n
data values to the client, of which one will be a real item,
and the others fake items.
5.1 Obliviously building the Bloom ﬁlter and
levels
This section describes how to construct the Bloom ﬁlter
without revealing to the server which Bloom ﬁlter positions
correspond to which items. Further, it shows how to obliv-
iously scramble the items as a level is constructed. Both
processes are mostly non-interactive (only a constant small
number of round trips).
In the Bloom ﬁlter construction, the key privacy require-
ment is that the server is unable to learn ahead of time any
correlation between Bloom ﬁlter positions and data items.
Constructing a new level in a BF-based ORAM requires ﬁrst
randomly and obliviously permuting all the items, renaming
them according to the new level hash function, and intro-
ducing a fake item for each (again, obliviously, and using
the appropriate hash-function deﬁned name). Constructing
the Bloom ﬁlter requires ﬁrst scanning the new set of items,
building an encrypted list of positions that will be need to
set, and then obliviously rearranging this encrypted list into
the appropriately-sized segments of the resulting encrypted
Bloom ﬁlter. The result is a pristine new level, generated
using a deterministic read and write pattern (independent
of the contents or history).
Further, note that we diﬀer from previous work in that we
store decryption keys in the Bloom ﬁlter, instead of single
encrypted bits. Recall that these components are computed
on the client by a secure keyed hash of the position, and
added to the value v if this position is intended to represent
a bit value of 0.
The other main diﬀerence from existing work is that [19]
assumes a signiﬁcant amount of temporary client storage,
298F0 = T0 + v 
F2 = T2 + v 
F3 = T3 + v 
F4 = T4 + v 
T1 = H(sk | level | gen | 1) 
T5 = H(sk | level | gen | 5) 
key0: all True     = H(Tx + Ty + Tz) 
key1: one False = H(Fx + Ty + Tz) 
     = H(Tx + Fy + Tz) 
     = H(Tx + Ty + Fz) 
     = H(Tx + Ty + Tz + v) 
key2: two False positions 
     = H(Tx + Ty + Tz + 2v) 
Bloom filter, with client secret key sk, 
for generation gen of level (stored on server) 
Query object decryption keys 
for Bloom filter lookup (x, y, z)
Figure 3: Left: Bloom ﬁlter format in full construction. A bit set to 1 in the Bloom ﬁlter is represented by
a hash of the position and current level key; a bit set to 0 is represented by the same value, plus the secret
value v. Right: decryption keys used with the query object. The server obtains the decryption key for a
given query stage by hashing together the speciﬁed Bloom ﬁlter results. Since there are k hash functions
used in a Bloom ﬁlter check, the client includes in the query object an edge corresponding to each of the
k + 1 possible keys.
which is not suitable in our model. To avoid this requirement
we propose to use two passes of an O(n log2 n) oblivious
randomized shell sort from [9].
This shell sort will be applied to a list produced by the
client as follows. The client starts by producing a list of
(encrypted) positions that need to be set in the Bloom ﬁl-
ter. The client will then also add a number of “segment
delimiters” to this list. These delimiters will aid later. One
delimiter is issued per segment (e.g., 32 adjacent positions)
in the Bloom ﬁlter. These delimiters will later provide an
excuse to output something for positions that are not to be
set, to prevent the server from learning which bits are set.
The client then performs a ﬁrst sorting pass, outputting
the list sorted by positions, with the delimiters interspersed
(delimiters include information that allows their sorting).
This sorted list is then scanned, and, for each of its non-
delimiter elements, a fake 32 bit value is issued. For each
encountered segment delimiter however, a 32 bit (encrypted)
segment of the Bloom ﬁlter is output. This segment’s bits
are set correctly according to the recently seen (since the
last segment’s delimiter encounter) encrypted set positions.
This simple mechanism prevents the server from learning
how many bits are set in each segment. To complete the
process, a second oblivious sort pass then moves the fake
32 bit values to the end of this new list, where they can be
safely removed by the server.
Finally, the encrypted bit-storing Bloom ﬁlter needs to be
converted into a key-storing Bloom ﬁlter in one ﬁnal step:
in a single non-oblivious pass, we read each bit and output
either Tpos for 1s and Fpos for 0s (where pos is the current
bit’s position in the Bloom ﬁlter). Note this multiplies the
size of the remotely stored object by the key size in bits.
We do not need to modify the level construction from [19],
except in replacing their storage-accelerated merge sort with
the storage-free randomized shell sort.
Non-interactivity of sort.
It is worth noting that the
shell sort, like the storage-accelerated merge sort, can be im-
plemented in a small, constant number of round trips. Each
step in both sorting algorithms requires reading two items
from the server, and writing them back, possibly swapped
(which is an interactive process). However, the item request
pattern of both sorting algorithms is known ahead of time
to the server. This allows it to send data to the client ahead
of time, without waiting for the request from the client (al-
ternately, the client can issue requests for future items far
in advance of the time they will be used).
√
This process is trivial in the merge sort: the access pat-
tern consists of simultaneous scans of two (or sometimes
up to
n) arrays; the server streams these to the client.
This process of non-interactive streaming of sort data to the
client is not as trivial in the randomized shell sort. Once the
random seed is chosen, however, both the client and server
know in advance the order the items will be requested in.
The server can run a simulation of this sort, for example, to
know which items the client needs to read next, and avoid
waiting for network round-trips throughout the construction
of the level.
The end result in both scenarios is a sort process whose
cost is almost completely independent of the network la-
tency. For any sort, regardless of the size, the client ﬁrst
sends an initialization message. Then, the server sends a
long stream of all the item contents to the client, as the
client simultaneously writes a long stream of the permuted
item contents back to the server.
6. SECURITY
SR-ORAM directly inherits the privacy properties of the
server-side ORAM database traversal, as well as the in-
tegrity defenses from the base ORAM construction in [19].
We must now establish the privacy of the query object con-
struction, as well as the new Bloom ﬁlter construction.
We establish privacy of the query object construction in
Theorem 1. The server learns only one set of Bloom ﬁlter
positions and one item label to retrieve at each level for a
given query.
In other words, the server sees only what it
would see in an equivalent, interactive instantiation.
Lemma 1. The server gains no non-negligible advantage
at guessing v = Hash (sk | level | gen) from observing (i)
the Bloom ﬁlter contents or (ii) the hashes included in the
query object.
Proof. (sketch) For each position pos in the Bloom ﬁlter,
the server sees a single value X that is either a random
number Tpos, or Tpos + v mod 2c0 . If Tpos and v are both
chosen randomly from Z2c0 , then seeing the entire set of
values gives the server no knowledge of v.
299• Level 1:
– L1 active node, in cleartext:
(integer values)
∗ Level 1 Bloom ﬁlter lookup index positions L1pos1 . . . L1posk
∗ the client computes, but does not send, these k + 1 keys:
· keyL1, success = Hash(TL1pos1 + TL1pos2 + ... + TL1posk )
· keyL1,1 = Hash(TL1pos1 + TL1pos2 + ... + TL1posk + v)
· keyL1,k = Hash(TL1pos1 + TL1pos2 + ... + TL1posk + kv)
· EkeyL1, success (L1 real data ID, and key2F: the key for the
· EkeyL1,1 (L1 fake data ID and key2A: the key for the L2
∗ k + 1 encrypted values, included in a random order:
L2 ﬁnished node)
. . .
active node)
. . .
· EkeyL1,k (L1 fake data ID and key2A: the key for the L2
active node)
• Level 2: Both the L2 active and the L2 ﬁnished nodes, in a random
order:
– L2 active node, encrypted with randomly generated key2A:
. . .
∗ Level 2 Bloom ﬁlter lookup index positions L2pos1 . . . L2posk
∗ the client computes, but does not send, these k + 1 keys:
· keyL2,success = Hash(TL2pos1 + TL2pos2 + ... + TL2posk )
· keyL2,1 = Hash(TL2pos1 + TL2pos2 + ... + TL2posk + v)
· keyL2,k = Hash(TL2pos1 + TL2pos2 + ... + TL2posk + kv)
· EkeyL2,success (L2 real data ID, and key3F)
· EkeyL2,1 (L2 fake data ID and key3A)
· EkeyL2,k (L2 fake data ID and key3A)
∗ k + 1 encrypted values, included in a random order:
. . .
– L2 ﬁnished node, encrypted with randomly generated key2F:
. . .
∗ k random Bloom ﬁlter lookup index positions for Level 2
L2pos1 . . . L2posk
∗ the client computes, but does not send, these k + 1 keys:
· keyL2,0 = Hash(TL2pos1 + TL2pos2 + ... + TL2posk )
· keyL2,1 = Hash(TL2pos1 + TL2pos2 + ... + TL2posk + v)
· keyL2,k = Hash(TL2pos1 + TL2pos2 + ... + TL2posk + kv)
· EkeyL2,0 (L2 fake data ID and key3F)
· EkeyL2,1 (L2 fake data ID and key3F)
· EkeyL2,k (L2 fake data ID and key3F)
∗ k + 1 encrypted values, included in a random order:
. . .
• Both the L3 active node (encrypted with key3A) and the L3 ﬁn-
ished node (encrypted with key3F), in a random order.
• And so forth, for each of the log2 n levels.
Figure 4: Query Object Format. For each level,
the query object is composed of two possible nodes
(with the exception of the top which only has one
node). This set constitutes a total of 2 log n nodes
(containing associated Bloom ﬁlter requests), and
2k log n edges. Of these nodes, the server will even-
tually be able to unlock log n. Each of the unlocked
ones provides k edges, of which the server will be
able to unlock exactly one. These edges contain the
decryption key for a single node at the next level,
as well as the data item ID to retrieve. All addition
is done modulus 2c0 .
The only other values observed by the server that are
linked to v are the outputs of the one-way hash functions,