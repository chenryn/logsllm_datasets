```    
使用each函数分解显示hstore存储的信息.    
```    
db1=> \x  
Expanded display is off.  
db1=> select id,(each(old_rec)).* from table_change_rec;    
 id |   key    |        value          
----+----------+---------------------  
  2 | id       | 1  
  2 | info     | digoal  
  2 | crt_time | 2023-11-11 05:33:43  
  3 | id       | 1  
  3 | info     | DIGOAL  
  3 | crt_time | 2023-11-11 05:33:43  
(6 rows)  
db1=> select id,(each(new_rec)).* from table_change_rec;    
 id |   key    |        value          
----+----------+---------------------  
  1 | id       | 1  
  1 | info     | digoal  
  1 | crt_time | 2023-11-11 05:33:43  
  2 | id       | 1  
  2 | info     | DIGOAL  
  2 | crt_time | 2023-11-11 05:33:43  
(6 rows)  
```    
事件触发器:  
- [《PostgreSQL Oracle 兼容性之 - 事件触发器实现类似Oracle的回收站功能》](../201504/20150429_01.md)    
- [《use event trigger function record user who alter table's SQL》](../201412/20141211_02.md)    
```  
db1=> create extension hstore;    
db1=> create or replace function ef_alter() returns event_trigger as $$    
declare    
  rec hstore;    
begin    
  select hstore(pg_stat_activity.*) into rec from pg_stat_activity where pid=pg_backend_pid();    
  insert into aud_alter (ctx) values (rec);    
end;    
$$ language plpgsql strict;    
CREATE FUNCTION    
\c db1 postgres  
db1=# create event trigger e_alter on ddl_command_end when tag in ('ALTER TABLE') execute procedure s1.ef_alter();    
CREATE EVENT TRIGGER    
db1=# \c db1 r1  
You are now connected to database "db1" as user "r1".  
db1=> create table aud_alter(id serial primary key, crt_time timestamp default now(), ctx hstore);    
CREATE TABLE  
db1=> drop table test;  
DROP TABLE  
db1=> create table test(id int);    
CREATE TABLE    
db1=> alter table test alter column id type int8;    
ALTER TABLE    
db1=> select * from aud_alter;    

id       | 1  
crt_time | 2023-11-11 05:38:04.845588  
ctx      | "pid"=>"834", "datid"=>"16388", "query"=>"alter table test alter column id type int8;", "state"=>"active", "datname"=>"db1", "usename"=>"r1", "query_id"=>"-1466738775741965031", "usesysid"=>"16384", "leader_pid"=>NULL, "wait_event"=>NULL, "xact_start"=>"2023-11-11 05:38:04.845588+00", "backend_xid"=>"993", "client_addr"=>NULL, "client_port"=>"-1", "query_start"=>"2023-11-11 05:38:04.845588+00", "backend_type"=>"client backend", "backend_xmin"=>"993", "state_change"=>"2023-11-11 05:38:04.84559+00", "backend_start"=>"2023-11-11 05:37:50.215834+00", "client_hostname"=>NULL, "wait_event_type"=>NULL, "application_name"=>"psql"  
db1=> select each(ctx) from aud_alter where id=1;    
                         each                              
-------------------------------------------------------    
 (pid,48406)    
 (datid,12949)    
 (query,"alter table test alter column id type int8;")    
 (state,active)    
 (datname,postgres)    
 (usename,postgres)    
 (waiting,f)    
 (usesysid,10)    
 (xact_start,"2014-12-12 05:43:42.840327+08")    
 (client_addr,)    
 (client_port,-1)    
 (query_start,"2014-12-12 05:43:42.840327+08")    
 (state_change,"2014-12-12 05:43:42.840331+08")    
 (backend_start,"2014-12-12 05:38:37.084733+08")    
 (client_hostname,)    
 (application_name,psql)    
(16 rows)    
```    
视图:  
- [《PostgreSQL DBA最常用SQL》](../202005/20200509_02.md)    
```  
create view v_lock_chains as   
with recursive   
a as (select pid from pg_locks where not granted),  
tmp as (  
  select 1 as id, pid as blocked_pid, conflict_origin_own_lock_pid from (select pid, unnest(pg_blocking_pids(pid)) as conflict_origin_own_lock_pid from a) tt  
  union all  
  select id+1, conflict_origin_own_lock_pid as blocked_pid, unnest(pg_blocking_pids(conflict_origin_own_lock_pid)) as conflict_origin_own_lock_pid from tmp   
     -- where pg_blocking_pids(conflict_origin_own_lock_pid) <> '{}'::int[]   
)   
select tmp.id, pg_locks.pid, pg_locks.locktype, pg_locks.mode, pg_locks.granted, pg_stat_activity.query,   
  tmp.conflict_origin_own_lock_pid   
  from tmp, pg_locks, pg_stat_activity   
  where tmp.blocked_pid=pg_locks.pid   
      -- or tmp.conflict_origin_own_lock_pid=pg_locks.pid   
      and pg_locks.pid = pg_stat_activity.pid  
  order by id;   
```  
```  
db1=> select * from v_lock_chains;  
 id | pid | locktype | mode | granted | query | conflict_origin_own_lock_pid   
----+-----+----------+------+---------+-------+------------------------------  
(0 rows)  
db1=> select * from v_lock_chains;  
 id | pid |   locktype    |        mode         | granted |             query              | conflict_origin_own_lock_pid   
----+-----+---------------+---------------------+---------+--------------------------------+------------------------------  
  1 | 869 | relation      | RowExclusiveLock    | f       | insert into t_hint values (2); |                          860  
  1 | 869 | virtualxid    | ExclusiveLock       | t       | insert into t_hint values (2); |                          860  
  1 | 860 | relation      | AccessExclusiveLock | f       | truncate t_hint ;              |                          344  
  1 | 860 | transactionid | ExclusiveLock       | t       | truncate t_hint ;              |                          344  
  1 | 860 | virtualxid    | ExclusiveLock       | t       | truncate t_hint ;              |                          344  
  2 | 860 | relation      | AccessExclusiveLock | f       | truncate t_hint ;              |                          344  
  2 | 860 | transactionid | ExclusiveLock       | t       | truncate t_hint ;              |                          344  
  2 | 860 | virtualxid    | ExclusiveLock       | t       | truncate t_hint ;              |                          344  
(8 rows)  
```  
物化视图  
```  
create table t_mv (id int primary key, info text, ts timestamp, active boolean);  
insert into t_mv select generate_series(1,100000), md5(random()::Text), clock_timestamp(), true;  
insert into t_mv select generate_series(100001,200000), md5(random()::Text), clock_timestamp(), false;  
db1=> create materialized view mv_t_mv as select * from t_mv where active ;  
SELECT 100000  
```  
刷新物化视图  
```  
insert into t_mv select generate_series(200001,300000), md5(random()::Text), clock_timestamp(), true;  
update t_mv set active=false where id =2;  
update t_mv set active=true where id =100001;  
db1=> \h refresh  
Command:     REFRESH MATERIALIZED VIEW  
Description: replace the contents of a materialized view  
Syntax:  
REFRESH MATERIALIZED VIEW [ CONCURRENTLY ] name  
    [ WITH [ NO ] DATA ]  
URL: https://www.postgresql.org/docs/14/sql-refreshmaterializedview.html  
db1=> refresh materialized view CONCURRENTLY mv_t_mv with data;  
ERROR:  cannot refresh materialized view "s1.mv_t_mv" concurrently  
HINT:  Create a unique index with no WHERE clause on one or more columns of the materialized view.  
db1=> create unique index on mv_t_mv (id);  
CREATE INDEX  
db1=> refresh materialized view CONCURRENTLY mv_t_mv with data;  
REFRESH MATERIALIZED VIEW  
```  
#### 68 查看系统表  
https://www.postgresql.org/docs/14/catalogs.html  
```  
db1=> \dt pg_catalog.*  
                    List of relations  
   Schema   |          Name           | Type  |  Owner     
------------+-------------------------+-------+----------  
 pg_catalog | pg_aggregate            | table | postgres  
 pg_catalog | pg_am                   | table | postgres  
 pg_catalog | pg_amop                 | table | postgres  
 pg_catalog | pg_amproc               | table | postgres  
 pg_catalog | pg_attrdef              | table | postgres  
 pg_catalog | pg_attribute            | table | postgres  
 pg_catalog | pg_auth_members         | table | postgres  
 pg_catalog | pg_authid               | table | postgres  
 pg_catalog | pg_cast                 | table | postgres  
 pg_catalog | pg_class                | table | postgres  
 pg_catalog | pg_collation            | table | postgres  
 pg_catalog | pg_constraint           | table | postgres  
 pg_catalog | pg_conversion           | table | postgres  
 pg_catalog | pg_database             | table | postgres  
 pg_catalog | pg_db_role_setting      | table | postgres  
 pg_catalog | pg_default_acl          | table | postgres  
 pg_catalog | pg_depend               | table | postgres  
 pg_catalog | pg_description          | table | postgres  
 pg_catalog | pg_enum                 | table | postgres  
 pg_catalog | pg_event_trigger        | table | postgres  
 pg_catalog | pg_extension            | table | postgres  
 pg_catalog | pg_foreign_data_wrapper | table | postgres  
 pg_catalog | pg_foreign_server       | table | postgres  
 pg_catalog | pg_foreign_table        | table | postgres  
 pg_catalog | pg_index                | table | postgres  
 pg_catalog | pg_inherits             | table | postgres  
 pg_catalog | pg_init_privs           | table | postgres  
 pg_catalog | pg_language             | table | postgres  
 pg_catalog | pg_largeobject          | table | postgres  
 pg_catalog | pg_largeobject_metadata | table | postgres  
 pg_catalog | pg_namespace            | table | postgres  
 pg_catalog | pg_opclass              | table | postgres  
 pg_catalog | pg_operator             | table | postgres  
 pg_catalog | pg_opfamily             | table | postgres  
 pg_catalog | pg_partitioned_table    | table | postgres  
 pg_catalog | pg_policy               | table | postgres  
 pg_catalog | pg_proc                 | table | postgres  
 pg_catalog | pg_publication          | table | postgres  
 pg_catalog | pg_publication_rel      | table | postgres  
 pg_catalog | pg_range                | table | postgres  
 pg_catalog | pg_replication_origin   | table | postgres  
 pg_catalog | pg_rewrite              | table | postgres  
 pg_catalog | pg_seclabel             | table | postgres  
 pg_catalog | pg_sequence             | table | postgres  
 pg_catalog | pg_shdepend             | table | postgres  
 pg_catalog | pg_shdescription        | table | postgres  
 pg_catalog | pg_shseclabel           | table | postgres  
 pg_catalog | pg_statistic            | table | postgres  
 pg_catalog | pg_statistic_ext        | table | postgres  
 pg_catalog | pg_statistic_ext_data   | table | postgres  
 pg_catalog | pg_subscription         | table | postgres  
 pg_catalog | pg_subscription_rel     | table | postgres  
 pg_catalog | pg_tablespace           | table | postgres  
 pg_catalog | pg_transform            | table | postgres  
 pg_catalog | pg_trigger              | table | postgres  
 pg_catalog | pg_ts_config            | table | postgres  
 pg_catalog | pg_ts_config_map        | table | postgres  
 pg_catalog | pg_ts_dict              | table | postgres  
 pg_catalog | pg_ts_parser            | table | postgres  
 pg_catalog | pg_ts_template          | table | postgres  
 pg_catalog | pg_type                 | table | postgres  
 pg_catalog | pg_user_mapping         | table | postgres  
(62 rows)  
```  
#### 69 查看系统管理函数  
https://www.postgresql.org/docs/14/functions-info.html  
https://www.postgresql.org/docs/14/functions-admin.html  
```  
\df pg_catalog.*  
```  
#### 70 查看psql快捷命令  
```  
postgres@6f60081d4ace:~$ man psql  
```  
```  
postgres@6f60081d4ace:~$ psql  
psql (14.9 (Debian 14.9-1.pgdg110+1))  
Type "help" for help.  
postgres=# \?  
General  
  \copyright             show PostgreSQL usage and distribution terms  
  \crosstabview [COLUMNS] execute query and display results in crosstab  
  \errverbose            show most recent error message at maximum verbosity  
  \g [(OPTIONS)] [FILE]  execute query (and send results to file or |pipe);  
                         \g with no arguments is equivalent to a semicolon  
  \gdesc                 describe result of query, without executing it  
  \gexec                 execute query, then execute each value in its result  
  \gset [PREFIX]         execute query and store results in psql variables  
  \gx [(OPTIONS)] [FILE] as \g, but forces expanded output mode  
  \q                     quit psql  
  \watch [SEC]           execute query every SEC seconds  
Help  
  \? [commands]          show help on backslash commands  
  \? options             show help on psql command-line options  
  \? variables           show help on special variables  
  \h [NAME]              help on syntax of SQL commands, * for all commands  
Query Buffer  
  \e [FILE] [LINE]       edit the query buffer (or file) with external editor  
  \ef [FUNCNAME [LINE]]  edit function definition with external editor  
  \ev [VIEWNAME [LINE]]  edit view definition with external editor  
  \p                     show the contents of the query buffer  
  \r                     reset (clear) the query buffer  
  \s [FILE]              display history or save it to file  
  \w FILE                write query buffer to file  
Input/Output  
  \copy ...              perform SQL COPY with data stream to the client host  
  \echo [-n] [STRING]    write string to standard output (-n for no newline)  
  \i FILE                execute commands from file  
  \ir FILE               as \i, but relative to location of current script  
  \o [FILE]              send all query results to file or |pipe  
  \qecho [-n] [STRING]   write string to \o output stream (-n for no newline)  
  \warn [-n] [STRING]    write string to standard error (-n for no newline)  
Conditional  
  \if EXPR               begin conditional block  
  \elif EXPR             alternative within current conditional block  
  \else                  final alternative within current conditional block  
  \endif                 end conditional block  
Informational  
  (options: S = show system objects, + = additional detail)  
  \d[S+]                 list tables, views, and sequences  
  \d[S+]  NAME           describe table, view, sequence, or index  
  \da[S]  [PATTERN]      list aggregates  
  \dA[+]  [PATTERN]      list access methods  
  \dAc[+] [AMPTRN [TYPEPTRN]]  list operator classes  
  \dAf[+] [AMPTRN [TYPEPTRN]]  list operator families  
  \dAo[+] [AMPTRN [OPFPTRN]]   list operators of operator families  
  \dAp[+] [AMPTRN [OPFPTRN]]   list support functions of operator families  