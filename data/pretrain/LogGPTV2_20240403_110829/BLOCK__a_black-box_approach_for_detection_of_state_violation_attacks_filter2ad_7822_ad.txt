### 5.2 Performance Overhead

Our detection system, positioned between the client and the web application, will inevitably affect the response time of the web application. The WebScarab proxy intercepts and forwards all messages exchanged between the user and the web application, leading to an increase in response time. Additionally, the integrated detector evaluates the web requests and responses, introducing further delay.

To measure the performance overhead introduced by our detection system, we used simulators to perform a designated sequence of operations and log the response time for each web request. We compared the performance under three configurations:
1. Without WebScarab proxy.
2. With WebScarab proxy deployed but the detector disabled.
3. With WebScarab proxy deployed and the detector enabled.

Figure 8 summarizes the average response time for each application under these scenarios. The results show that the average response time increases by a factor of 1.5 to around 5 when BLOCK is deployed and enabled. Although the resulting response time is still acceptable, more than 90% of the overhead is attributed to the WebScarab proxy, with only a small portion introduced by the detector.

For our current prototype implementation, no modifications or configurations were made to the WebScarab proxy to enhance its performance. If a more lightweight and efficient proxy (e.g., Apache mod_proxy) is used to integrate our detection system, it is possible to reduce the response time. This is an area for future work.

**Figure 8: Summary of Performance Overhead**

| Application | without WebScarab | with WebScarab (without Detector) | with WebScarab (with Detector) |
|-------------|--------------------|-----------------------------------|---------------------------------|
| Scarf       | 80                 | 60                                | 40                              |
| Simplecms   | 60                 | 40                                | 20                              |
| Bloggit     | 40                 | 20                                | 0                               |
| Wackopicko  | 20                 | 0                                 | 0                               |
| OsCommerce  | 0                  | 0                                 | 0                               |

### 5.3 Discussion

One limitation of BLOCK is that it only observes and models the relations between web requests, web responses, and session variables. Therefore, it cannot handle attacks that violate persistent states stored in database tables. Extending BLOCK to capture and analyze SQL queries and responses from a database could potentially address this type of state violation attack. This is another area for future work.

Our technique shares the same limitations as other dynamic analysis techniques. The completeness and correctness of inferred invariants cannot be guaranteed. To effectively deploy BLOCK, some manual intervention may be necessary to ensure sufficient training and to suppress false positives. In the future, we plan to investigate mechanisms for the automatic verification of likely invariants.

### 6. Related Work

Our work falls within the category of web application security and is closely related to the specification inference of software.

#### 6.1 Web Application Security

Web application security has been a popular research topic in recent years. Many existing works focus on input validation attacks, such as cross-site scripting and SQL injection, which exploit insufficient or erroneous sanitization of user inputs. Unlike state violation flaws, which are the focus of this paper, input validation flaws are independent of the application logic and can be captured via a general specification. For example, the information flow model has been applied to the input validation problem, where data input points are defined as sources, and security-sensitive operations are modeled as sinks. Both static and dynamic program analysis techniques have been employed to identify insufficient or erroneous sanitizations within web applications, leading to insecure information flow [12].

Black-box approaches [20], techniques that analyze external request/response flows [1, 23], and methods for inferring a DFA for web requests [15, 11] have been presented to address input validation attacks. Black-box techniques have also been applied to other problems within web applications, such as post-migration testing (Splitter [8]), insider threats (CADS [6]), form tampering (NoTamper [5]), and HTTP parameter pollution [3]. However, due to the different nature of these problems, they do not consider the internal state of the web application and cannot be applied to state violation attacks.

MiMoSA [4] and Waler [10] use white-box analysis techniques to identify vulnerabilities within web applications that attract state violation attacks. While they may achieve better accuracy (i.e., fewer false positives) than black-box techniques, their capability is limited because they rely on precise modeling of the application source code and programming frameworks, which is difficult and not scalable.

The most related work to ours is Swaddler [7], which also detects state violation attacks at runtime by evaluating deviations in session variables when entering a specific program block. A major deficiency of Swaddler is its complete dependence on user-defined session variables. In cases where insufficient session variables are defined, as shown in the example application, it cannot detect those attacks. In contrast, our Type III invariants, defined based on the web request/response history, can capture the application state that is not revealed by defined session variables. Thus, even when the session variables are insufficient or unreliable, our approach remains effective.

#### 6.2 Specification Inference of Software

Software specification is essential for verifying program behaviors and conducting program testing. However, a complete and machine-understandable specification is rarely available. Therefore, researchers are motivated to study the problem of inferring software specifications. Static inference techniques analyze the program code to extract partial orders of function calls [14], while dynamic inference techniques profile the program behavior through mining program execution traces. Daikon engine [9], the most famous tool in this field, extracts value-related invariants by matching invariant templates to expressions. Strauss [2] formalizes the specification mining as a grammar inference problem and learns probabilistic finite state automata (PFSA) from traces. Perracotta [26] mines two-letter alternating patterns of functions from imperfect traces. Gk-tail [16] builds extended finite state machines (EFSM) combining both value-related and temporal properties. Our approach falls into the category of dynamic inference techniques. Unlike these generic software specification inference methods, our work leverages the unique stateless feature of the HTTP protocol and its associated session management mechanism, making it applicable to distributed client/server web applications.

### 7. Conclusion

This paper presents BLOCK, a black-box approach for detecting state violation attacks, and evaluates its prototype implementation using a set of open-source PHP web applications. The results validate the effectiveness of BLOCK. Our approach is valuable because it is independent of the web application source code and can be adapted to a wide variety of web application hosting scenarios based on different application frameworks, where the source code may not be available.