tion/authorization. Parameter manipulation attacks can be
detected by type I invariants, if the input parameters are
related to the session variables. They may also be identiﬁed
by type II invariants, if the corresponding web pages contain
output parameters that are related with the session state.
Workﬂow bypass attacks will be blocked in the same man-
ner as auth bypass attacks, if the session variables, which
are used for guarding the state transitions, are not checked.
If there are no such guarding session variables, e.g., in the
example application, type III invariants would help to iden-
tify workﬂow bypass attacks due to the constraints imposed
on the sequence of operations.
5.2 Performance Overhead
Since our detection system sits between the client and the
web application, it will aﬀect the response time of the web
application. First, the WebScarab proxy intercepts and for-
wards all the messages exchanged between the user and the
web application, which would increase the response time.
Second, the integrated detector evaluates the web requests
and web pages, which also introduces additional delay. To
measure the performance overhead brought by our detec-
tion system, we use the simulators to perform a designated
sequence of operations and log the response time for ev-
ery web request. We compare the performance under three
conﬁgurations: 1) without WebScarab proxy, 2) with Web-
Scarab proxy deployed but the detector disabled, 3) with
WebScarab proxy deployed and the detector enabled. Fig-
ure 8 shows the summary of the averaged response time for
each application under the above three scenarios. We can
see that the average response time increases by a factor from
1.5 to around 5, if BLOCK is deployed and enabled. While
the resulting response time is still acceptable, we notice that
more than 90% of the overhead is brought by the WebScarab
proxy and only a small amount is introduced by the detector.
For our current prototype implementation, no modiﬁcations
or conﬁgurations are made to the WebScarab proxy to en-
hance its performance. If a more light-weight and eﬃcient
proxy (e.g, Apache mod proxy) is employed for integrating
our detection system, it is possible to reduce the response
time, which serves as our future work.
80
60
40
20
0
)
s
m
(
e
m
i
t
e
s
n
o
p
s
e
R
without WebScarab
with WebScarab (without Detector)
with WebScarab (with Detector)
Scarf
Simplecms
Bloggit
Wackopicko
OsCommerce
Figure 8: Summary of performance overhead
(cid:1)(cid:3)(cid:2)
Table 3: Summary of Detection Result
Application
Scarf
Simplecms
BloggIt
Wackopicko
OsCommerce
Requests
(clean
test set)
1364
1731
1044
1322
1505
Web pages
(clean test
set)
1360
1688
1024
1314
1460
Blocked
quests
positive)
0
0
0
0
3
re-
(false
Blocked
re-
sponses (false
positive)
6
8
0
1
10
Attacks
Detected
10
10
10
10
10
10
10
10
10
10
Invariant vio-
lations
type I and III
type I and III
type I and III
type I and II
type I and III
5.3 Discussion
There is one limitation of BLOCK we would like to point
out. BLOCK only observes and models the relations be-
tween web requests, web responses and the session variables.
Thus it cannot handle the attacks that violate the persistent
states that exist in database tables. If BLOCK is extended
to capture and analyze the SQL queries/responses from a
database, it has the potential to handle this type of state
violation attack. This serves as our future work.
Our technique bears the same limitations as other dynamic
analysis techniques. The completeness and correctness of
inferred invariants cannot be guaranteed.
In order to put
BLOCK into practice, introducing some manual intervention
is preferable to guarantee suﬃcient training and suppress
false positives. In the future, we would like to investigate
mechanisms for automatic veriﬁcation of likely invariants.
6. RELATED WORK
Our work falls within the category of web application se-
curity and our approach is closely related to the speciﬁcation
inference of software.
6.1 Web Application Security
Web application security has been a popular research topic
these years. A large body of existing works investigate in-
put validation attacks, such as cross-site scripting, SQL in-
jection, which exploit the applications’ insuﬃcient or erro-
neous sanitization of the user inputs. Compared with state
violation ﬂaws, which is the focus of this paper, input val-
idation ﬂaws are independent of the application logic and
thus can be captured via a general speciﬁcation. For ex-
ample, the information ﬂow model has been applied to the
input validation problem, where a set of data input points
are deﬁned as sources, and the security sensitive operations
are modeled as sinks. Based on this model, both static and
dynamic program analysis techniques are employed to iden-
tify the insuﬃcient or erroneous sanitizations within the web
application, which result in insecure information ﬂow [12]. It
is worth noting that the black-box approach [20], techniques
that analyze the external request/response ﬂow [1, 23], and
approaches of inferring a DFA for web requests [15, 11] have
been presented to address input validation attacks. Black-
box techniques have also been applied to address other prob-
lems within web applications, such as post-migration testing
(Splitter [8]), insider threats (CADS [6]), form tampering
(NoTamper [5]) and HTTP parameter pollution [3]. How-
ever, due to diﬀerent nature of problems, they don’t take
into account the internal state of the web application and
can not be applied to state violation attacks.
MiMoSA [4] and Waler [10] employ white-box analysis
techniques to identify vulnerabilities within web applica-
tions that attract state violation attacks. While they may
achieve better accuracy (i.e., less false positives) than black-
box techniques, their capability is limited in that they rely
on precise modeling of the application source code and pro-
gramming frameworks, which is diﬃcult and not scalable.
The most related work to ours is Swaddler [7], which also
detects state violation attacks at runtime by evaluating the
deviations of session variables when entering a speciﬁc pro-
gram block. One major deﬁciency of Swaddler is that it com-
pletely depends on user deﬁned session variables. In cases
where insuﬃcient session variables are deﬁned, as shown in
the example application, it cannot detect those attacks. In
contrast, our Type III invariants that are deﬁned based on
the web request/response history can capture the application
state that is not revealed by deﬁned session variables. Thus
even when the session variables are insuﬃcient or unreliable,
our approach is still eﬀective.
6.2 Speciﬁcation Inference of Software
Software speciﬁcation is essential for veriﬁcation of pro-
gram behaviors and program testing. However, a complete
and machine understandable speciﬁcation is rarely available.
Thus, researchers are motivated to study the problem of in-
ferring software speciﬁcations. Static inference techniques
analyze the program code to extract the partial orders of
function calls [14], while dynamic inference techniques try to
proﬁle the program behavior through mining program execu-
tion traces. Daikon engine [9], the most famous tool in this
ﬁeld, extracts value-related invariants by matching invariant
templates to expressions. Strauss [2] formalizes the speci-
ﬁcation mining as a grammar inference problem and learns
probabilistic ﬁnite state automata (PFSA) from traces. Per-
racotta [26] mines two-letter alternating patterns of func-
tions from imperfect traces. Gk-tail [16] builds extended
ﬁnite state machine (EFSM) combining both value-related
and temporal properties. Our approach falls into the cate-
gory of dynamic inference techniques. Diﬀerent from these
generic software speciﬁcation inference methods, our work
leverages the unique stateless feature of HTTP protocol and
its associated session management mechanism and can be
applied to distributed client/server web applications.
7. CONCLUSION
This paper presents BLOCK, a black-box approach for de-
tecting state violation attacks, and evaluates its prototype
implementation using a set of open source PHP web applica-
tions. The results validate the eﬀectiveness of BLOCK. Our
approach is valuable in that it is independent of the web ap-
plication source code and can ﬁt into a large variety of web
application hosting scenarios based on diﬀerent application
frameworks, where the source code may not be available.
(cid:1)(cid:2)(cid:2)
[12] N. Jovanovic, C. Kruegel, and E. Kirda. Pixy: A static
analysis tool for detecting web application
vulnerabilities (short paper). In S&P’06: Proceedings
of the 27th IEEE Symposium on Security & Privacy,
pages 258–263, 2006.
[13] C. Kim and K. Shim. Text: Automatic template
extraction from heterogeneous web pages. IEEE
Trans. Knowl. Data Eng., 23(4):612–626, 2011.
[14] T. Kremenek, P. Twohey, G. Back, A. Ng, and
D. Engler. From uncertainty to belief: inferring the
speciﬁcation within. In OSDI ’06: Proceedings of the
7th symposium on Operating systems design and
implementation, pages 161–176, 2006.
[15] C. Kruegel and G. Vigna. Anomaly detection of
web-based attacks. In CCS’03: Proceedings of the 10th
ACM conference on Computer and communications
security, pages 251–261, 2003.
[16] D. Lorenzoli, L. Mariani, and M. Pezz`e. Automatic
generation of software behavioral models. In ICSE ’08:
Proceedings of the 30th international conference on
Software engineering, pages 501–510, 2008.
[17] OsCommerce Inc. http://www.oscommerce.com/.
[18] OWASP WebScarab Project.
https://www.owasp.org/index.php/
category:owasp webscarab project.
[19] D. C. Reis, P. B. Golgher, A. S. Silva, and A. F.
Laender. Automatic web news extraction using tree
edit distance. In WWW ’04: Proceedings of the 13th
international conference on World Wide Web, pages
502–511, 2004.
[20] R. Sekar. An eﬃcient black-box technique for
defeating web application attacks. In NDSS’09: 16th
Annual Network and Distributed System Security
Symposium, 2009.
[21] SeleniumHQ: Web Application Testing System.
http://seleniumhq.org/.
[22] Symantec internet security threat report 2009.
http://www.symantec.com/business/threatreport/.
[23] G. Vigna, W. Robertson, V. Kher, and R. A.
Kemmerer. A stateful intrusion detection system for
world-wide web servers. In ACSAC’03: Proceedings of
the Annual Computer Security Applications
Conference, pages 34–43, 2003.
[24] Wackopicko.
https://github.com/adamdoupe/wackopicko.
[25] G. Wassermann and Z. Su. Static detection of
cross-site scripting vulnerabilities. In ICSE’08:
ACM/IEEE 30th International Conference on
Software Engineering, pages 171–180, 2008.
[26] J. Yang, D. Evans, D. Bhardwaj, T. Bhat, and
M. Das. Perracotta: mining temporal api rules from
imperfect traces. In ICSE ’06: Proceedings of the 28th
international conference on Software engineering,
pages 282–291, 2006.
Acknowledgment
This work was supported by NSF TRUST (The Team for Re-
search in Ubiquitous Secure Technology) Science and Tech-
nology Center (CCF-0424422). We would like to thank Ryan
Burns, Brandon Conway and Russ Amos for their help in
developing user simulators and Vanderbilt ITS for valuable
discussion.
8. REFERENCES
[1] M. Almgren, H. Debar, and M. Dacier. A lightweight
tool for detecting web server attacks. In Proceedings of
the ISOC Symposium on Network and Distributed
Systems Security, pages 157–170, 2000.
[2] G. Ammons, R. Bod´l(cid:7)lk, and J. R. Larus. Mining
speciﬁcations. In Symposium on Principles of
Programming Languages, volume 37, pages 4–16, 2002.
[3] M. Balduzzi, C. Gimenez, D. Balzarotti, and E. Kirda.
Automated discovery of parameter pollution
vulnerabilities in web applications. In NDSS’11:
Proceedings of the 18th Network and Distributed
System Security Symposium, 2011.
[4] D. Balzarotti, M. Cova, V. V. Felmetsger, and
G. Vigna. Multi-module vulnerability analysis of
web-based applications. In CCS’07: Proceedings of the
14th ACM conference on Computer and
communications security, pages 25–35, 2007.
[5] P. Bisht, T. Hinrichs, N. Skrupsky, R. Bobrowicz, and
V. N. Venkatakrishnan. NoTamper: automatic
blackbox detection of parameter tampering
opportunities in web applications. In CCS’10:
Proceedings of the 17th ACM conference on Computer
and communications security, pages 607–618, 2010.
[6] Y. Chen and B. Malin. Detection of anomalous
insiders in collaborative environments via relational
analysis of access logs. In CODASPY ’11: Proceedings
of the ﬁrst ACM conference on Data and application
security and privacy, pages 63–74, 2011.
[7] M. Cova, D. Balzarotti, V. Felmetsger, and G. Vigna.
Swaddler: An Approach for the Anomaly-based
Detection of State Violations in Web Applications. In
RAID’07: Proceedings of the 10th International
Symposium on Recent Advances in Intrusion
Detection, pages 63–86, 2007.
[8] X. Ding, H. Huang, Y. Ruan, A. Shaikh, B. Peterson,
and X. Zhang. Splitter: a proxy-based approach for
post-migration testing of web applications. In
EuroSys’10: Proceedings of the 5th European
conference on Computer systems, pages 97–110, 2010.
[9] M. D. Ernst, J. Cockrell, W. G. Griswold, and
D. Notkin. Dynamically discovering likely program
invariants to support program evolution. IEEE
Transactions on Software Engineering, 27(2):99–123,
Feb. 2001.
[10] V. Felmetsger, L. Cavedon, C. Kruegel, and G. Vigna.
Toward Automated Detection of Logic Vulnerabilities
in Web Applications. In USENIX’10: Proceedings of
the 19th conference on USENIX Security Symposium,
pages 143–160, 2010.
[11] K. L. Ingham, A. Somayaji, J. Burge, and S. Forrest.
Learning dfa representations of http for protecting web
applications. Computer Networks and Isdn Systems,
51:1239–1255, 2007.
(cid:1)(cid:2)(cid:3)