emerges from the middlebox, the agent retrieves the address list [B,
C, D] and removes its own address to get [C, D]. It then follows the
procedure above to create a new subsession from B to C, rewrite
the packet, and transmit the modified SYN packet. This continues
along the service chain until the SYN packet reaches D, where it is
delivered to the TCP end-host.
When D replies to the SYN, the SYN-ACK packet travels back
along the chain of subsessions and middleboxes to continue the
handshake. The forward and reverse paths of the TCP session must
go through exactly the same middleboxes. Between middleboxes,
however, the forward and reverse network paths traversed by sub-
sessions need not be the same.
Middleboxes that modify the five-tuple: If such a middlebox,
e.g., a NAT, has a Dysco agent, the header modification makes it
difficult to associate a SYN packet going into the middlebox with
a SYN packet coming out of it. To solve this problem, the Dysco
agent applies a local tag to each incoming SYN packet, which it can
recognize in the outgoing packet. The agent then associates the
incoming and outgoing five-tuples, and removes the tag. (Note that
Dysco tags are different from tags in FlowTags [9] and Stratos [10],
because they are applied only to SYN packets, are never sent to
the network, and are meaningful only to the agent that inserts and
removes them.)
p1p8p2p3p4p5p6p7TCP session (A, D, p1, p8)Dysco subsession(A, B, p2, p3)Dysco subsession(B, C, p4, p5)Dysco subsession(C, D, p6, p7)Dyscoagenthost ADyscoagenthost BDyscoagenthost CDyscoagenthost DTCPendpointAmiddle-boxmiddle-boxTCPendpointDDysco agentmiddleboxapplicationDysco agenthost TCP stackuseruserOSOSDyscosocketshost Ahost BSIGCOMM ’17, August 21–25, 2017, Los Angeles, CA, USA
P. Zave et al.
A middlebox that modifies the five-tuple can also become part
of a service chain because ordinary routing of subsession packets
directs traffic through it. This will not affect establishment of the
Dysco service chain, even though the subsession five-tuple will be
different on each side of the middlebox.
Flexible session teardown in each direction: The Dysco pro-
tocol preserves TCP’s ability to send data in the two directions
independently. For instance, one end of a TCP session can send a
request, and then send a FIN to indicate that it will send nothing
more. It can then receive the response through a long period of one-
way transmission. When the TCP session is torn down normally,
the chain is torn down along with it. A TCP session can also time
out rather than terminate explicitly, particularly when a middlebox
discards its packets, or an end-host fails. In this case the agents
will time out the subsessions. If necessary, agents can use heartbeat
signals to keep good subsessions alive.
2.2 Role of the policy server
We assume that a policy for service chaining combines a pattern
that matches five-tuples with an (ordered) list of middleboxes or
middlebox types to be traversed by packets matching the pattern.
A policy server determines the policies in force, and can optionally
trigger dynamic reconfiguration of groups of service chains. Com-
pared to an SDN controller, the policy server has no involvement
with individual sessions, and does nothing to enforce its policies
(such as installing forwarding rules in network elements).
Selecting the service chain: The first Dysco agent in a service
chain needs the policy for the chain. Yet the policy server need
not be queried for individual sessions. For example, initial policies
can be pre-loaded or cached in Dysco agents. Policies can specify
middlebox types rather than instances, and agents can choose the
instances, e.g., in a round-robin fashion or based on load. In addition,
each agent can add middleboxes to the untraversed portion of the
list. This makes it possible for any agent along the chain to inject
policies. This also makes it possible for a middlebox, such as an
application classifier, to itself select the next middlebox in the chain.
The middlebox communicates its choice to the local Dysco agent,
and the agent adds the next middlebox to the head of the policy list.
Initiating reconfiguration of a service chain: In some use
cases, Dysco agents initiate reconfiguration of the service chain,
without the involvement of the policy server (e.g., when a load bal-
ancer or Web proxy triggers the change). In other cases, the policy
server is involved, but only in a coarse-grained way. For example,
taking a middlebox instance down for maintenance would involve
the policy server sending a single command to tell the associated
Dysco agent to replace itself in all of its ongoing sessions. Similarly,
when a measurement system suggests that certain traffic is suspi-
cious, the policy server can send a command to Dysco agents to add
a scrubber to the service chain for all sessions matching a particular
classifier. The agents handle the full details of reconfiguring the
session, including resolving any contention if multiple portions of
a service chain try to change at the same time.
2.3 Agents can reconfigure a session
Reconfiguration of the service chain of a session can be triggered
by the policy server or the middleboxes themselves, but it is always
Figure 3: Agents reconfigure a segment of a session, replac-
ing an old path with two middleboxes by a new path with
one.
initiated by a Dysco agent and carried out exclusively by the agents
in the chain. Reconfiguration operates on a segment, consisting of
some contiguous subsessions and the associated hosts. As shown
in Figure 3, the agents at the two unvarying ends of a segment are
the left anchor and right anchor. An anchor can be the agent for a
middlebox or end-host. If the old path consists of a single subsession
(with no middleboxes), and the new path has at least one middlebox,
then middleboxes have been inserted. Reverse old and new above,
and middleboxes have been deleted. If both old and new paths have
middleboxes, then the old ones have been replaced by the new. The
anchors cooperate by exchanging control packets to replace the old
path of the segment with a new path. Reconfiguration is always
initiated by the left anchor, which must know the address of the
right anchor and the list of middlebox addresses to be inserted in
the new path (if any). There is no need for packet buffering, because
new data can always be sent on one of the two paths.
Security: Like other session protocols [4, 24, 29, 30, 34, 41],
Dysco is vulnerable to adversaries that inject or modify control
packets. Dysco can adopt the same solutions to protect against both
off-path attacks (e.g., an initial exchange of nonces, with nonces
included in all control packets) and on-path attacks (e.g., encrypt-
ing control packets within a chain and with the policy server).
The agents of a service chain are cooperating entities that must
trust each other. Excluding untrusted hosts from a service chain
is straightforward, since a service chain can span just a portion
of a TCP session (see below). Cooperating domains can exchange
information about trusted middlebox hosts (by IP address and op-
tional public key) so a middlebox in one domain can establish a
subsession with a trusted middlebox in another.
2.4 Sessions and service chains need not
coincide exactly
In Figure 1 there is one TCP session and one service chain, and
both have the same endpoints. Dysco allows other usages, making
it both versatile and incrementally deployable.
One option is that a service chain can span multiple TCP sessions.
For example, a service chain that includes a session-terminating
proxy (e.g., a layer-7 load balancer, Web cache, or ad-inserting
proxy) would encompass two TCP sessions. The Dysco agent of
the proxy simply presents data to the proxy application with the
TCP session identifier that applies at that point in the service chain.
Later, the proxy’s work may be completed, e.g., when the load
balancer establishes a session to a backend server, or the Web cache
realizes the requested content is not cacheable. The Dysco agent
can then delete the host from the service chain, in response to a
old pathnew pathleft anchorright anchorDyscoDyscoDyscoDyscoDyscoDyscoDyscoDynamic Service Chaining with Dysco
SIGCOMM ’17, August 21–25, 2017, Los Angeles, CA, USA
Figure 5: Contention to reconfigure overlapping segments.
Figure 4: Control packets exchanged for reconfiguration.
Red packets travel on the old path, blue on the new path.
trigger by the proxy (e.g., a “splice” call to relegate further handling
of the traffic to the kernel). After a session-terminating proxy has
been deleted, the resulting service chain would correspond to a
single TCP session.
Another option is that a TCP session can be longer than a service
chain, or even encompass multiple separate service chains. This is
particularly important for partial deployment of Dysco or when mul-
tiple administrative domains do not trust each other. For example,
an end-host that does not run Dysco may connect to the Internet
via an ISP edge router that does. This edge router can initiate a
Dysco service chain to the remote end-host, or to the other edge of
the ISP, on the client’s behalf. In another example, a TCP session
may access a server in a cloud. The part of the session covered by a
service chain in the cloud would begin at some gateway or other
utility guaranteed to be in the path of all of the session’s packets as
they enter the cloud. A Dysco agent in this network element would
begin the service chain.
3 DYNAMIC RECONFIGURATION
3.1 Protocol overview
To reconfigure a service chain Dysco agents use control packets,
each carrying in its body the associated session identifier. Recon-
figuration is always initiated by the Dysco agent acting as the left
anchor, as in Figure 3. Although reconfiguration can be triggered
by a controller or other middlebox, the triggering component must
always communicate with the left anchor to request it to execute
the protocol.
Just as the Dysco agent for A in Figure 1 needs the address list
[B, C, D] to set up the original service chain, the left anchor of a
reconfiguration needs an address list [M1, M2, . . . , rightAnchor] with
the middleboxes and right anchor of the new path that will replace
the old path. Typically the list comes from the triggering agent. If a
middlebox wants to delete itself, it sends a triggering packet to the
agent on its left with the address list [myRightNeighbor], so the left
anchor has an address list containing only a right anchor.
Figure 4 shows the control packets exchanged by the anchors
during the first phase of a simple, successful reconfiguration. The
red packets travel on the old path, so they are forwarded through
the Dysco agents of current middleboxes (the delta fields will be
explained in §3.4). The blue three-way SYN handshake sets up the
new path within the service chain. As in §2, the SYN carries an
address list so that the Dysco agents can include all the addressed
middleboxes before the right anchor. During this phase normal data
transmission continues on the old path.
In the second phase of reconfiguration, both paths exist. The
anchors send new data only on the new path, but continue to send
acknowledgments and retransmissions on the old path for data that
was sent on the old path. This prevents trouble with middleboxes
that might reject packets with acknowledgments for data they did
not send. This phase continues until all the data sent on the old
path has been acknowledged, after which the anchors tear down
the old path and discard the state kept for it.
In subsequent sections we provide protocol details, organized
by significant issues and challenges.
3.2 Contention over segments
Dysco is designed to work even if middleboxes have a great deal of
autonomy, so that new solutions to network-management problems
can be explored. In the most general case, two different Dysco
agents might be triggered to reconfigure overlapping segments at
the same time. Figure 5 shows how the protocol prevents this.
For each subsession, the agent on its left maintains a state that is
one of unlocked, lockPending, or locked. If it is lockPending or locked,
then variable requestor holds the left anchor of the request for which
it is pending or locked. If an agent receives requestLock(leftAnchor,
rightAnchor) from the left, the agent is not rightAnchor, and its
subsession to the right is unlocked, then it forwards the packet
to the right, while setting the subsession state to lockPending and
requestor to leftAnchor. If there is no contention, the same agent
will receive a matching ackLock from the right. It will forward
the ackLock and set the subsession state to locked. In the figure, a
request to lock the segment from X to Z has propagated from X to
Z (packets 1 and 2).
Meanwhile agent W might be triggered to lock the segment from
W to Y. Its request (packet 3) will be blocked at X because the sub-
session to its right is lockPending. Eventually X will receive either
ackLock or nackLock in response to its own request. If ackLock, it
replies with nackLock to the request from W . As a nackLock propa-
gates leftward, lockPending states are reset to unlocked. On the other
hand, if X receives nackLock in response to its own request, then
the subsession to its right becomes unlocked, and it can forward
the saved request from W .
This protocol cannot deadlock because of the linear order of the
service chain. The rightmost request will never be blocked by a
lockPending subsession. Therefore it will always receive a reply,
which will unblock the blocked request to its immediate left (if any).
The unblocked request is now the rightmost request, which will not
be blocked again, and so on. Requests could in theory be starved by
a continual succession of new requests, but this would not happen
in an otherwise correct implementation.
LEFTANCHORRIGHTANCHORrequestLock (leftAnchor, rightAnchor, rightDelta)ackLock (leftAnchor, rightAnchor, leftDelta)SYN (addressList)SYN-ACKACK1: requestLock (X, Z)3: requestLock (W, Y)2: requestLock (X, Z)state =lockPendingstate =lockPendingstate =lockPendingrequestor = Xrequestor = Yrequestor = XDyscoagentXDyscoagentYDyscoagentZDyscoagentWSIGCOMM ’17, August 21–25, 2017, Los Angeles, CA, USA
P. Zave et al.
3.3 Control signaling
Dynamic reconfiguration requires control signaling, e.g., to resolve
contention over segments (§3.2) and to cancel reconfiguration if a
new path cannot be created (§3.6).
In Dysco we implement control signals as UDP packets, rather
than introducing extra data into the TCP byte stream. This simplifies
implementation, as the Dysco agents do not have to monitor the
data stream for control signals, extract them, and fix the TCP header
information (such as sequence number and checksum). Also, an
implementation in the data path would introduce additional delays
to data packets for processing the control information.
Although the packets used to set up the new path (as shown in
Figure 4) and tear down the old path resemble TCP SYN and FIN
handshakes, they are actually UDP packets. The reason we do not
use a TCP SYN handshake (as used in Multipath TCP to set up a
new subflow [38]) is as follows. A principal design goal for dynamic
reconfiguration is to disrupt data transfer as little as possible. While
we attempt to set up the new path, data transfer continues on the old
path. This means that the SYN to set up the new path has no initial
sequence number, as the cutoff number is not determined until the
path is ready to use. This is not a problem for middlebox applications
because, not surprisingly, the only middleboxes inserted in a new
path are ones that do not need to see the initial SYN handshake.
Examples are DPIs that operate at the packet level, and middleboxes
in the old path that are being replaced (with migration of the session
state, as detailed in §3.5).
The reason that we do not use an actual FIN handshake to tear
down the old path is that, if TCP packets are used, it is too difficult
for the anchors to distinguish between tearing down the old path
and tearing down the entire session. This is due to the many possi-
ble race conditions between these two cases, which is something
revealed by verification (see §3.7). In both cases sequence numbers
in the packets mean the same thing, so for both cases TCP packets
are passed to the application.
3.4 Sequence-number deltas
Some middleboxes increase or decrease the size of a byte stream
(by transcoding, inserting, or deleting content). They keep track
of the difference (delta) between incoming and outgoing sequence
numbers (a signed integer) in the relevant direction, so that they can
adjust the sequence numbers of acknowledgments accordingly. A
session-terminating proxy also has a delta because it begins sending
in its TCP session with the server with a different sequence number
than the client chose. If a middlebox with a delta is deleted, the
discrepancy in sequence numbers must be fixed elsewhere.
We make the assumption that once a middlebox is ready for
deletion from a session, its deltas do not change.1 The middlebox’s
Dysco agent must know the deltas, either through an API or by
reconstructing them. As the requestLock packet traverses the old
path, it accumulates the sum of the middlebox deltas for that di-
rection in the field rightDelta. As the ackLock packet traverses the
old path, it accumulates the sum of the middlebox deltas for that
direction in the field leftDelta.
1Without this assumption, there must be a wait while the last data passes through the
old path, during which new data cannot be sent on either path.
Figure 6: How a former anchor modifies TCP packets (dotted
arrows) of the new subsession.
Each anchor must remember the delta it has received in the
requestLock handshake. For the remainder of the session after re-
configuration, for data coming in on the new path or going out on