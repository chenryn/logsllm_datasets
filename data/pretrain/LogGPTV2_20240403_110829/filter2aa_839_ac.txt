### Determining Instruction Addresses and Instrumentation

To determine the addresses of the first instruction in each block, a disassembler must be used. Once the list of addresses to instrument has been determined, they need to be mapped from the global address space to the offset within their respective functions. This mapping is necessary for using these addresses with DTrace probes.

### Integrating DTrace with IDA Pro for Real-Time Code Coverage Visualization

We use a combination of technologies to connect DTrace with IDA Pro, enabling real-time code coverage visualization. Ruby-dtrace is employed to wrap libdtrace, allowing programmatic responses to be coded in Ruby and executed when specific probes fire [4]. IDArub is used to provide a remote interface to the IDA Pro API [5]. IDA Pro runs on a Windows system, and the Ruby environment sends commands to IDA over the network. When a probe fires, indicating that an instruction is executing in the traced application, the instruction is highlighted in IDA Pro. The comment field for that instruction can also be updated to indicate the number of times the instruction has executed. Figure 11 illustrates how code coverage is represented, with red blocks indicating executed code and white blocks indicating unexecuted code.

**Figure 11. Code coverage representation in IDA**

The code coverage visualization makes it easy to identify large portions of code that are not being executed. Manual analysis can then be performed to determine the conditions necessary to execute the missed code.

### RE:Trace: A DTrace/Ruby Framework for Reverse Engineering

As previously noted, Chris Andrew’s Ruby-DTrace adds flexibility to the already powerful DTrace framework, enabling reverse engineers to write scripts that would not be possible in the D language alone. However, many common reverse engineering tasks require boilerplate functionality, such as CPU context, memory dump/search, etc. We have packaged this functionality, along with additional features, into a framework called RE:Trace. By integrating the power of Ruby and DTrace, RE:Trace powers the aforementioned Stack Pin Point, Heap Smash, and Code Coverage scripts.

RE:Trace bundles essential features into an object-oriented framework with numerous helper functions, making it the foundation for many powerful tools. It is actively developed and will soon be released with features such as command-line interaction via Ruby’s IRB and the ability to enable probes without using D syntax.

### Using DTrace Defensively

DTrace's extensive instrumentation capabilities make it highly extensible and applicable to various tasks. While we have primarily focused on DTrace from a reverse engineering perspective, it can also be used to defend a system. Commercial Host-Based Intrusion Detection Systems (HIDS) like McAfee’s “Entercept” and Cisco’s “Security Agent” work by altering function pointers in the system call table within the kernel. These alterations allow the HIDS to hook any system call and apply security methods to validate the call made by the user-land process.

By design, DTrace allows users to perform similar system call interception in a nearly unobtrusive way. A custom HIDS based on system call introspection can be easily implemented in the D Language. For example, using Subreption’s publicly available exploit for the QuickTime 7.3 RTSP stack-based buffer-overflow, we can create a simple custom HIDS with a D Script [10].

The Subreption exploit for QuickTime 7.3 on Leopard OS X 10.5.1 uses a classic ‘return-to-libc’ attack to exploit the stack overflow. This technique leverages a buffer overflow to set up arbitrary arguments on the target stack before returning into the System() function to execute a system call. This is a popular exploit technique on platforms with non-executable stacks. The payload often involves a series of system calls, including a call to “/bin/sh” or “/bin/bash”. To protect a vulnerable QuickTime 7.3 from a ‘return-to-libc’ exploit, we first profile QuickTime’s normal operation through system calls using DTrace, as shown in Figure 12.

Once we establish a profile of normal system calls, we can create signatures for possible attacks that minimize false positives. Although blacklisting known attacks based on one or two public exploits is insufficient for an enterprise HIDS, it illustrates how a HIDS could be built on DTrace. (For further details, see Sun’s DTrace-based HIDS patent application # 20070107058.)

By comparing the output of system calls during normal operation and during an exploit, we can determine which system calls can be used as ‘signatures’ for our HIDS D script. After analyzing the ‘return-to-libc’ attack system calls, it is clear that QuickTime Player would not normally make a system call to execute ‘/bin/sh’. Using the DTrace predicate `/execname == "QuickTime Player" & args[0] == "/bin/sh"` would suffice to create a generic D script to detect the default payload for the Subreption QuickTime exploit and its variants. Upon detecting the exploit, an action can be triggered to log, print out, or stop the process under attack. The entire script, shown in Figure 13, is just a few lines long.

Although this example is basic, it can be improved with the addition of more attack signatures. There are several advantages to implementing a custom HIDS. First, attackers cannot test the effectiveness of a custom HIDS without attacking the target. Second, for a custom application, the HIDS can be tailored to avoid false positives. Generic system call monitoring can often mislabel normal operation. Using Ruby-DTrace to implement a HIDS could allow developers to create a more advanced database with signatures stored in a relational database and a Ruby-On-Rails interface.

**Figure 13. Trivial QuickTime HIDS D script**
```bash
#!/usr/sbin/dtrace -q -s
proc:::exec
/execname == "QuickTime Player" && args[0] == "/bin/sh"/ {
    printf("\n%s Has been p0wned! it spawned %s\n", execname, args[0]);
}
```

**Figure 12. Profiling QuickTime System Calls**
```bash
#!/usr/sbin/dtrace -q -s
proc:::exec
/execname == "QuickTime Player"/ {
    printf("%s execs %s\n", execname, args[0]);
}
```

### Hiding Applications from DTrace

In a blog post dated January 18, 2008, DTrace core developer Adam Leventhal discovered surprising behavior while using DTrace to monitor system-wide activity. Apple is explicitly preventing DTrace from examining or recording data for processes that do not permit tracing, which is contrary to the goals of DTrace and the spirit of open source [11].

Apple uses the same method to prevent GDB from attaching to certain software. As explained by Landon Fuller, `PT_DENY_ATTACH` is a non-standard `ptrace()` request type that prevents a debugger from attaching to the calling process [10]. Both Apple’s version of GDB and DTrace check for this flag before a process can be debugged or instrumented. Landon Fuller has created a kext (Kernel Extension) for XNU that allows any process to be instrumented by DTrace. By altering the `ptrace` function pointer in the `sysent` struct within the XNU kernel with a pointer to a custom PTrace wrapper, Fuller enables DTrace to function as intended.

In his presentation at the Chaos Computer Congress, Archim reported significant work that gives his rootkit “SInAR” the capability to hide from DTrace on the Solaris platform. The problem from a rootkit writer’s perspective is that DTrace’s fbt provider keeps a list of all modules loaded in the kernel. Even if a process is hidden from `ps`, `mbd`, etc., a clever admin with DTrace may still detect a kernel-based rootkit. Archim found that even modules with `mod_loaded` and `mod_installed` set to 0 can still be discovered by DTrace. He describes the method he uses to hide from DTrace:

“When you combine a call to `dtrace_sync()` and then `dtrace_condense(&fbt_provider)`, you will be removed from the list of providing modules in DTrace.”

This forces DTrace to remove the rootkit from its internal linked list of providers and sets its probes to inactive. At present, the 0.3 version of SInAR on vulndev.org only works on SPARC. There is currently no known rootkit for OS X Leopard or Solaris 10 x86 capable of hiding from DTrace.

### Conclusion

DTrace is a powerful tool that allows us to collect a wide range of information about a running program. Like any tool, it is important to understand its strengths and weaknesses. DTrace is well-suited for collecting and reporting statistics or specific values at a given point in time, which is very useful for reverse engineers interested in pinpointing specific conditions and understanding general behavior.

The introduction of DTrace to the reverse engineering world opens many opportunities for improving related techniques. We have shown how DTrace can be used to detect and pinpoint stack and heap overflows, visualize code coverage, and serve as an intrusion detection tool. We have also discussed issues related to subverting DTrace. Future work could include implementing automated fuzzer feedback based on code coverage results or parameter values, detecting rootkits using DTrace timing calculations, and pinpointing kernel bugs.

### References

[1] Bryan Cantrill, Mike Shapiro, and Adam Leventhal, Advanced DTrace – Tips, Tricks and Gotchas, slide 43.
[2] Sun Microsystems, Inc., Solaris Dynamic Tracing Guide, pp.
[3] Pedram Amini, Pin Pointing Stack Smashes, http://dvlabs.tippingpoint.com/blog/2007/05/02/pin-pointing-stack-smashes
[4] Chris Andrews, Ruby-DTrace, http://rubyforge.org/projects/ruby-dtrace/
[5] spoonm, IdaRub, REcon 2006
[6] Amit Singh, Mac OS X Internals A Systems Approach, Addison-Wesley, 2006
[7] Landon Fuller, Fixing ptrace(pt_deny_attach, ...) on Mac OS X 10.5 Leopard, http://landonf.bikemonkey.org/code/macosx/Leopard_PT_DENY_ATTACH.20080122.html, 2008
[8] Adam Leventhal, Mac OS X and the missing probes, http://blogs.sun.com/ahl/entry/mac_os_x_and_the, 2008
[9] Archim, “SUN – Bloody Daft Solaris Mechanisms,” Chaos Computer Congress, 2004
[10] Subreption, LLC., QuickTime RTSP Redux, http://static.subreption.com/public/exploits/qtimertsp_redux.rb
[11] Nemo, “Exploiting OS X Heap Overflows,” Phrack Magazine, Issue 63
[12] Richard McDougall, Jim Mauro, Brendan Greg, “Solaris™ Performance and Tools: DTrace and MDB Techniques for Solaris 10 and OpenSolaris,” Prentice Hall, 2006
[13] Stefan Parvu, “DTrace & DTraceToolkit-0.96,” http://www.nbl.fi/~nbl97/solaris/dtrace/dtt_present.pdf
[14] Various, “The Shellcoder's Handbook: Discovering and Exploiting Security Holes,” Wiley and Sons, 2007