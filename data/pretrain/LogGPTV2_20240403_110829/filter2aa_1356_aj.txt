例中使用的存在漏洞的海豚浏览器HD应用程序版本为6.0.0，以后的版本中修补了漏洞。
海豚浏览器HD有一个名为 BrowserActivity的漏洞活动，它可以被其他应用程序以及其他参
数调用。攻击者可以使用它来调用海豚浏览器HD并打开特定的网页，以及恶意的
JavaScript。以下屏幕截图显示了POC代码以及通报
（ http://packetstormsecurity.com/files/view/105258/dolphin-xas.txt）：
第七章不太知名的Android漏洞
79
这里，使用屏幕截图中的上述代码，我们将打开 http://adityagupta.net网站以及JavaScript
函数 alert(document.domain)，它将在提示框中简单地弹出域名。一旦我们在我们的手机上
打开这个恶意应用程序，它将调用海豚浏览器HD，打开URL和我们指定的JavaScript代
码，如下面的截图所示：
第七章不太知名的Android漏洞
80
总结
在本章中，我们了解了Android中的不同攻击向量，从渗透测试者的角度来看，这非常有
用。本章应该用做对不同攻击向量的快速演练;然而，建议你尝试这些攻击向量，尝试修改它
们，并在现实生活中的渗透测试中使用它们。
在下一章中，我们将离开应用程序层，专注于Android平台的基于ARM的利用。
第七章不太知名的Android漏洞
81
第八章ARM利用
作者：AdityaGupta
译者：飞龙
协议：CCBY-NC-SA4.0
在本章中，我们将了解ARM处理器的基础知识，和ARM世界中存在的不同类型的漏洞。我
们甚至会继续利用这些漏洞，以便对整个场景有个清晰地了解。此外，我们将研究不同的
Androidroot攻击和它们在漏洞利用中的基本漏洞。考虑到目前大多数Android智能手机都
使用基于ARM的处理器，对于渗透测试人员来说，了解ARM及其附带的安全风险至关重
要。
8.1ARM架构导论
ARM是基于精简指令集（RISC）的架构，这意味着其指令比基于复杂指令集（CISC）的机
器少得多。ARM处理器几乎遍布我们周围的所有设备，如智能手机，电视，电子书阅读器和
更多的嵌入式设备。
ARM总共有16个可见的通用寄存器，为R0-R15。在这16个中，有5个用于特殊目的。
以下是这五个寄存器及其名称：
R11:帧指针(FP)
R12:过程内寄存器(IP)
R13:栈指针(SP)
R14:链接寄存器(LR)
R15:程序计数器(PC)
下面的图展示了ARM架构：
第八章ARM利用
82
在五个里面，我们会特别专注于这三个，它们是：
堆栈指针（SP）：这是保存指向堆栈顶部的指针的寄存器
链接寄存器（LR）：当程序进入子过程时存储返回地址
程序计数器（PC）：存储要执行的下一条指令
注意
这里要注意的一点是，PC将总是指向要执行的指令，而不是简单地指向下一条指令。
这是由于被称为流水线的概念，指令按照以下顺序操作：提取，解码和执行。为了控制
程序流，我们需要控制PC或LR中的值（后者最终引导我们控制PC）。
第八章ARM利用
83
执行模式
ARM有两种不同的执行模式：
ARM模式：在ARM模式下，所有指令的大小为32位
Thumb模式：在Thumb模式下，指令大部分为16位
执行模式由CPSR寄存器中的状态决定。还存在第三模式，即Thumb-2模式，它仅仅是
ARM模式和Thumb模式的混合。我们在本章不会深入了解ARM和Thumb模式之间的区
别，因为它超出了本书的范围。
8.2建立环境
在开始利用ARM平台的漏洞之前，建议你建立环境。即使AndroidSDK中的模拟器可以通
过模拟ARM平台来运行，大多数智能手机也是基于ARM的，我们将通过配置QEMU（它是
一个开源硬件虚拟机和模拟器）开始ARM漏洞利用。
为了在Android模拟器/设备上执行以下所有步骤，我们需要下载AndroidNDK并使用
AndroidNDK中提供的工具为Android平台编译我们的二进制文件。但是，如果你使用Mac
环境，安装QEMU相对容易，可以通过键入 brewinstallqemu来完成。现在让我们在
Ubuntu系统上配置QEMU。遵循以下步骤：
1. 第一步是通过安装依赖来下载并安装QEMU，如图所示：
sudoapt-getbuild-depqemu
wgethttp://wiki.qemu-project.org/download/qemu-
1.7.0.tar.bz2
2. 接下来，我们只需要配置QEMU，指定目标为ARM，最后充分利用它。因此，我们将简
单地解压缩归档文件，访问该目录并执行以下命令：
./configure--target-list=arm-softmmu
make&&makeinstall
3. 一旦QEMU成功安装，我们可以下载ARM平台的Debian镜像来进行利用练习。所需下
载列表位于 http://people.debian.org/~aurel32/qemu/armel/。
4. 这里我们将下载格式为 qcow2的磁盘映像，它是基于QEMU的操作系统映像格式，也就
是我们的操作系统为 debian_squeeze_armel_standard.qcow2。内核文件应该
是 vmlinuz-2.6.32-5-versatile，RAM磁盘文件应该是 initrd.img-2.6.32-versatile。
一旦我们下载了所有必要的文件，我们可以通过执行以下命令来启动QEMU实例：
第八章ARM利用
84
qemu-system-arm-Mversatilepb-kernelvmlinuz-2.6.32-5-
versatile-initrdinitrd.img-2.6.32-5-versatile-hda
debian_squeeze_armel_standard.qcow2-append
"root=/dev/sda1"--redirtcp:2222::22
5. redir命令只是在登录远程系统时使用端口2222启用ssh。一旦配置完成，我们可以
使用以下命令登录到Debian的QEMU实例：
sshroot@[ipaddressofQemu]-p2222
6. 登录时会要求输入用户名和密码，默认凭据是 root:root。一旦我们成功登录，我们将
看到类似如下所示的屏幕截图：
8.3基于栈的简单缓冲区溢出
简单来说，缓冲区是存储任何类型的数据的地方。当缓冲区中的数据超过缓冲区本身的大小
时，会发生溢出。然后攻击者可以执行溢出攻击，来获得对程序的控制和执行恶意载荷。
让我们使用一个简单程序的例子，看看我们如何利用它。在下面的截图中，我们有一个简单
的程序，有三个函数： weak， ShouldNotBeCalled和 main。以下是我们试图利用的程序：
第八章ARM利用
85
在整个程序运行期间，从不调用 ShouldNotBeCalled函数。
漏洞函数简单地将参数复制到名为 buff的缓冲区，大小为10字节。
一旦我们完成程序编写，我们可以使用 gcc编译它，如下一个命令所示。此外，我们将在这
里禁用地址空间布局随机化（ASLR），只是为了使场景稍微简单一些。ASLR是由OS实现
的安全技术，来防止攻击者有效地确定载荷的地址并执行恶意指令。在Android中，ASLR
的实现始于4.0。你可以访
问 http://www.duosecurity.com/blog/exploit-mitigations-in-android-jelly-bean-4-1了解所有
Android安全实施。
echo0>/proc/sys/kernel/randomize_va_space
gcc-gbuffer_overflow.c-obuffer_overflow
接下来，我们可以简单将二进制文件加载到GNU调试器，简称GDB，然后开始调试它，如
下面的命令所示：
gdb-qbuffer_overflow
现在我们可以使用 disass命令来反汇编特定的函数，这里是 ShouldNotBeCalled，如下面的
截图所示：
第八章ARM利用
86
正如我们在上面的截图中可以看到的， ShouldNotBeCalled函数从内存地址 0x00008408开始。
如果我们查看 main函数的反汇编，我们看到漏洞函数在 0x000084a4被调用并
在 0x000084a8返回。因此，由于程序进入漏洞函数并使用易受攻击的 strcpy，函数不检查
要复制的字符串的大小，并且如果我们能够在程序进入漏洞函数时控制子过程的LR，我们就
能够控制整个程序流程。
这里的目标是估计何时LR被覆盖，然后放入 ShouldNotBeCalled的地址，以便调
用 ShouldNotBeCalled函数。让我们开始使用一个长参数运行程序，如下面的命令所示，看看
会发生什么。在此之前，我们还需要在漏洞函数和 strcpy调用的地址设置断点。
bvulnerable
b*
一旦我们设置了断点，我们可以使用参数 AAAABBBBCCCC来运行我们的程序，看看它是如何被
覆盖的。我们注意到它在漏洞函数的调用处命中了第一个断点，之后在 strcpy调用处命中了
下一个断点。一旦它到达断点，我们可以使用 x命令分析堆栈，并指定来自SP的地址，如
下面的截图所示：
我们可以看到，堆栈已经被我们输入的缓冲区覆盖（ASCII：41代表A，42代表B，等
等）。从上面的截图中，我们看到，我们仍然需要四个更多的字节来覆盖返回地址，在这种
情况下是 0x000084a8。
所以，最后的字符串是16字节的垃圾，然后是 ShouldNotBeCalled的地址，如下面的命令所
示：
r`printf"AAAABBBBCCCCDDDD\x38\x84"`
第八章ARM利用
87
我们可以在下面的截图中看到，我们已经将 IShouldNeverBeCalled的起始地址添加到了参数
中：
请注意，由于这里是小端结构，字节以相反的顺序写入。一旦我们运行它，我们可以看到程
序 ShouldNotBeCalled函数被调用，如下面的截图所示：
8.4返回导向编程
在大多数情况下，我们不需要调用程序本身中存在的另一个函数。相反，我们需要在我们的
攻击向量中放置shellcode，这将执行我们在shellcode中指定的任何恶意操作。但是，在大
多数基于ARM平台的设备中，内存中的区域是不可执行的，这会阻止我们放置并执行
shellcode。
因此，攻击者必须依赖于所谓的返回导向编程（ROP），它是来自内存不同部分的指令片段
的简单链接，最终它会执行我们的shellcode。这些片段也称为ROPgadget。为了链接
ROPgadget，我们需要找到存在跳转指令的gadget，这将允许我们跳到另一个位置。
例如，如果我们在执行程序时反汇编 seed48()，我们将注意到以下输出：
第八章ARM利用
88
如果我们查看反汇编，我们将注意到它包含一个ADD指令，后面跟着一个POP和BX指
令，这是一个完美的ROPgadget。这里，攻击者可能会想到，为了将其用作ROPgadget，
首先跳到控制r4的POP指令，然后将比 /bin/sh的地址小6的值放入r4中，将ADD指令
的值放入LR中。因此，当我们跳回到ADD也就是 R0=R4+6时，我们就拥有
了 /bin/sh的地址，然后我们可以为R4指定任何垃圾地址并且为LR指定 system()的地
址。
这意味着我们将最终跳转到使用参数 /bin/sh的 system()，这将执行shell。以同样的方
式，我们可以创建任何ROPgadget，并使其执行我们所需要的任何东西。由于ROP是开发
中最复杂的主题之一，因此强烈建议你自己尝试，分析反汇编代码并构建漏洞。
8.5Androidroot利用
从早期版本的Android开始，Androidroot漏洞开始出现于每个后续版本和不同的Android设
备制造商的版本中。Androidroot简单来说是获得对设备的访问特权，默认情况下设备制造
商不会将其授予用户。这些root攻击利用了Android系统中存在的各种漏洞。以下是其中一
些的列表，带有漏洞利用所基于的思想：
Exploid：基于udev中的CVE-2009-1185漏洞，它是Android负责USB连接的组件，
它验证Netlink消息（一种负责将Linux内核与用户连接的消息）是否源自原始来源或是
由攻击者伪造。因此，攻击者可以简单地从用户空间本身发送udev消息并提升权限。
Gingerbreak：这是另一个漏洞，基于vold中存在的漏洞，类似于Exploid中的漏洞。
RageAgainstTheCage：此漏洞利用基于 RLIMIT_NPROC，它指定在调用 setuid函数时可
为用户创建的进程的最大数目。adb守护程序以root身份启动;然后它使用 setuid()调
用来解除特权。但是，如果根据 RLIMIT_NPROC达到了最大进程数，程序将无法调