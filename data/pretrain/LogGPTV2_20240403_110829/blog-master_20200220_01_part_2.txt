```  
4\.1、在10万个标签内随机提取8个标签:   
```  
select gen_rand_tags(100000, 8);  
                   gen_rand_tags                     
---------------------------------------------------  
 {43494,46038,74102,25308,99129,40893,33653,29690}  
(1 row)  
```  
5、给2000万个用户打标, 每个用户64个随机标签, 其中男、女各一半  
```  
insert into t_user_tags   
select generate_series(1,10000000),   
array_append(gen_rand_tags(100000, 63),1), now();  
insert into t_user_tags   
select generate_series(10000001,20000000),   
array_append(gen_rand_tags(100000, 63),2), now();  
```  
6、创建标签（人群）字段倒排索引  
```  
create index idx_t_user_tags_1 on t_user_tags using gin (tags);  
```  
7、查询包含1,3标签的人群  
```  
1、人群数量  
select count(uid) from t_user_tags where tags @> array[1,3];  
2、提取人群ID  
select uid from t_user_tags where tags @> array[1,3];  
```  
8、查询包含1或3或10或200标签的人群  
```  
1、人群数量  
select count(uid) from t_user_tags where tags && array[1,3,10,200];  
2、提取人群ID  
select uid from t_user_tags where tags && array[1,3,10,200];  
```  
## 方案3 DEMO  
### 1、PG 12  
RDS PG 12已支持位图功能, 常用说明：  
```  
安装插件 – create extension roaringbitmap;  
bitmap输出格式 – set roaringbitmap.output_format='bytea|array';  
bitmap取值范围 – 40亿（int4）   
构造bitmap –  rb_build(int4[])   
bitmap转换为数组或多条记录 - rb_to_array(rb) – rb_iterate(rb)   
bitmap内包含对象个数 – rb_cardinality(rb)   
逻辑运算: 与、或、异或、差  
SELECT roaringbitmap('{1,2,3}') | roaringbitmap('{3,4,5}');  
SELECT roaringbitmap('{1,2,3}') & roaringbitmap('{3,4,5}');  
SELECT roaringbitmap('{1,2,3}') # roaringbitmap('{3,4,5}');  
SELECT roaringbitmap('{1,2,3}') - roaringbitmap('{3,4,5}');  
聚合运算: build rb、与、或、异或  
SELECT rb_build_agg(e) FROM generate_series(1,100) e;  
SELECT rb_or_agg(bitmap) FROM t1;  
SELECT rb_and_agg(bitmap) FROM t1;  
SELECT rb_xor_agg(bitmap) FROM t1;  
聚合并统计对象数(与、或、异或)  
rb_or_cardinality_agg  
rb_and_cardinality_agg  
rb_xor_cardinality_agg  
逻辑判断: 包含、相交、相等、不相等  
Opperator   Input   Output  Desc    Example Result  
@>  roaringbitmap,roaringbitmap bool    contains    roaringbitmap('{1,2,3}') @> roaringbitmap('{3,4,5}')    f  
@>  roaringbitmap,integer   bool    contains    roaringbitmap('{1,2,3,4,5}') @> 3   t  
  roaringbitmap,roaringbitmap bool    not equal   roaringbitmap('{1,2,3}') <> roaringbitmap('{3,4,5}')    t  
```  
当uid 超过int4(40亿)时, 使用offset转换, 转换方法如下:  
- https://github.com/digoal/blog/blob/master/202001/20200110_03.md  
其他使用方法参考:  
- https://pgxn.org/dist/pg_roaringbitmap/  
1、安装插件  
```  
create extension roaringbitmap;  
```  
2、创建标签，用户bitmap表  
```  
create table t_tag_users (  
  tagid int primary key,   -- 用户标签（人群）id   
  uid_offset int,          -- 由于userid是int8类型，roaringbitmap内部使用int4存储，需要转换一下。     
  userbits roaringbitmap,     -- 用户id聚合的 bitmap    
  mod_time timestamp       -- 时间   
);  
```  
3、生成标签，uid bitmap  
```  
insert into t_tag_users   
select tagid, uid_offset, rb_build_agg(uid::int) as userbits from   
(  
select   
  unnest(tags) as tagid,   
  (uid / (2^31)::int8) as uid_offset,   
  mod(uid, (2^31)::int8) as uid   
from t_user_tags   
) t   
group by tagid, uid_offset;   
```  
4、查询包含1,3标签的人群   
```  
1、人群数量  
select sum(ub) from   
(  
select uid_offset,rb_and_cardinality_agg(userbits) as ub   
from t_tag_users   
where tagid in (1,3)   
group by uid_offset  
) t;  
2、提取人群ID  
select uid_offset,rb_and_agg(userbits) as ub   
from t_tag_users   
where tagid in (1,3)   
group by uid_offset;  
```  
5、查询包含1或3或10或200标签的人群  
```  
1、人群数量  
select sum(ub) from   
(  
select uid_offset,rb_or_cardinality_agg(userbits) as ub   
from t_tag_users   
where tagid in (1,3,10,200)   
group by uid_offset  
) t;  
2、提取人群ID  
select uid_offset,rb_or_agg(userbits) as ub   
from t_tag_users   
where tagid in (1,3,10,200)   
group by uid_offset;   
```  
## 方案对比:   
环境:  
数据库 | 计算规格 | 存储规格  
---|---|---  
MySQL 8.0 | 8C 32G | 1500GB ESSD  
PG 12 | 8C 32G | 1500GB ESSD  
性能对比:  
CASE(12.8亿 user/tags)(2000万, 64 tags/user) | 方案1(MySQL、PG)多对多:常规方案 | 方案2(PG)一对多:数组、倒排索引 | 方案3(PG)一对多:位图 | 方案3 vs 方案1提升%  
---|---|---|---|---  
与查询圈选用户速度 | 1.5秒 | 42毫秒 | 1.5毫秒 | 99900%  
或查询圈选用户速度 | 3.6秒 | 3秒 | 1.7毫秒 | 211665%  
空间占用(表) | 62GB | 3126MB | 1390MB | 4467%  
空间占用(索引) | 61GB | 3139MB | 2MB | 3123100%  
build索引速度 | - | 20分钟 | 0 | -  
## RDS PG方案价值:   
1、RDS PG支持了位图功能(roaringbitmap), 可以非常高效率的生成、压缩、解析位图数据, 支持最常见的与、或、非、异或等位图聚合操作, 提取位图的ID、选择性, 判断ID是否存在等操作.   
2、使用RDS PG数据库, 满足了用户在亿级以上用户, 百万~千万量级标签的大数据量下实时精准营销、快速圈选用户的需求.   
3、对比MySQL的方案, RDS PG方案优势非常明显, 是一个低成本, 高效率的解决方案.   
- 节约存储空间 8948%,   
- 平均性能提升 155782.5%,   
- 最高性能提升 211665%.  
目前支持该功能的RDS PG版本:   
- RDS PG V12
- 未来将在V10以上的所有版本支持.
## 课程视频  
视频:  
https://yq.aliyun.com/live/1896  
## 阿里云RDS PG优惠活动  
https://www.aliyun.com/database/postgresqlactivity  
RDS PG优惠活动:   
- 9.9元试用3个月  
- 升级5折  
## 阿里云PG技术交流群  
![pic](../pic/dingding_chat_fast.png)  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")