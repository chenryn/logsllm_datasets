调用方法的哪个版本而影响其选择。在本例中调用的重载方法接受两个int参数，返回一
个int值，这个返回值随后会转换为long类型。
下一行代码让编译器使用“+”运算符的另一个重载版本：
    double myOtherDouble = myDouble + myInteger;
在这个实例中，参数是一个double类型的数据和一个int类型的数据，但“+”运算符没
有这种复合参数的重载形式，所以编译器认为，最匹配的“+”运算符重载是把两个double
数据作为其参数的版本，并隐式地把int强制转换为double。把两个double数据加在一起与
把两个整数加在一起完全不同，浮点数存储为一个尾数和一个指数。把它们加在一起要按
位移动一个double数据的尾数，从而使两个指数有相同的值，然后把尾数加起来，移动所
得到尾数的位，调整其指数，保证答案有尽可能高的精度。
现在，看看如果编译器遇到下面的代码会发生什么：
    Vector vect1, vect2, vect3;
    // initialize vect1 and vect2
    vect3 = vect1 + vect2;
    vect1 = vect1＊2;
其中，Vector是结构，稍后再定义它。编译器知道它需要把两个Vector实例加起来，
即vect1和vect2。它会查找“+”运算符的重载，该重载版本把两个Vector实例作为参数。
如果编译器找到这样的重载版本，它就调用该运算符的实现代码。如果找不到，它就
要看看有没有可以用作最佳匹配的其他“+”运算符重载，例如，某个运算符重载对应的两
个参数是其他数据类型，但可以隐式地转换为Vector实例。如果编译器找不到合适的运算
符重载，就会产生一个编译错误，就像找不到其他方法调用的合适重载版本一样。
8.5.2 运算符重载的示例：Vector结构
本章的示例使用如下依赖项和名称空间（除非特别注明）：
依赖项：
    NETStandard.Library
名称空间：
    System
    static System.Console
本小节将开发一个结构Vector来说明运算符重载，这个Vector结构表示一个三维数学
矢量。如果数学不是你的强项，不必担心，我们会使这个例子尽可能简单。就此处而言，
三维矢量只是3个（double）数字的集合，说明物体的移动速度。表示数字的变量是_x、
_y和_z, _x表示物体向东移动的速度，_y表示物体向北移动的速度，_z表示物体向上移动
的速度（高度）。把这3个数字组合起来，就得到总移动量。例如，如果_x=3.0、
_y=3.0、_z=1.0，一般可以写作（3.0, 3.0, 1.0），表示物体向东移动3个单位，向北移动3
个单位，向上移动1个单位。
矢量可以与其他矢量或数字相加或相乘。在这里我们还使用术语“标量”，它是简单数
字的数学用语——在C#中就是一个double数据。相加的作用很明显。如果先移动（3.0,
3.0, 1.0）矢量对应的距离，再移动（2.0, -4.0, -4.0）矢量对应的距离，总移动量就是把这
两个矢量加起来。矢量的相加指把每个对应的组成元素分别相加，因此得到（5.0, 
-1.0,
-3.0）。此时，数学表达式总是写成c=a+b，其中a和b是矢量，c是结果矢量。这与Vector
结构的使用方式一样。
  注意： 这个例子将作为一个结构而不是类来开发，但这并不重要。运算符重
载用于结构和类时，其工作方式是一样的。
下面是Vector的定义——包含只读属性、构造函数和重写的ToString（）方法，以便
轻松地查看Vector的内容，最后是运算符重载（代码文件
OperatorOverloadingSample/Vector.cs）：
    struct Vector
    {
      public Vector(double x, double y, double z)
      {
        X = x;
        Y = y;
        Z = z;
      }
      public Vector(Vector v)
      {
        X = v.X;
        Y = v.Y;
        Z = v.Z;
      }
      public double X { get; }
      public double Y { get; }
      public double Z { get; }
      public override string ToString() => $"( {X}, {Y}, {Z} )";
    }
这里提供了两个构造函数，通过传递每个元素的值或者提供另一个复制其值的Vector
来指定矢量的初始值。第二个构造函数带一个Vector参数，通常称为复制构造函数，因为
它们允许通过复制另一个实例来初始化一个类或结构实例。
下面是Vector结构的有趣部分——为“+”运算符提供支持的运算符重载：
    public static Vector operator +
(Vector left, Vector right) =>
        new Vector(left.X + right.X, left.Y + right.Y, left.Z + right.Z);
运算符重载的声明方式与静态方法基本相同，但operator关键字告诉编译器，它实际
上是一个自定义的运算符重载，后面是相关运算符的实际符号，在本例中就是“+”。返回
类型是在使用这个运算符时获得的类型。在本例中，把两个矢量加起来会得到另一个矢
量，所以返回类型也是Vector。对于这个特定的“+”运算符重载，返回类型与包含的类一
样，但并不一定是这种情况，在本示例中稍后将看到。两个参数就是要操作的对象。对于
二元运算符（带两个参数），如“+”和“-”运算符，第一个参数是运算符左边的值，第二个
参数是运算符右边的值。
这个实现代码返回一个新的矢量，该矢量用left和right变量的x、y和z属性初始化。
C#要求所有的运算符重载都声明为public和static，这表示它们与其类或结构相关联，
而不是与某个特定实例相关联，所以运算符重载的代码体不能访问非静态类成员，也不能
访问this标识符；这是可行的，因为参数提供了运算符执行其任务所需要知道的所有输入
数据。
下面需要编写一些简单的代码来测试Vector结构（代码文件
OperatorOverloadingSample/Program.cs）：
    static void Main()
    {
      Vector vect1, vect2, vect3;
      vect1 = new Vector(3.0, 3.0, 1.0);
      vect2 = new Vector(2.0, -4.0, -4.0);
      vect3 = vect1 + vect2;
      WriteLine($"vect1 = {vect1}");
      WriteLine($"vect2 = {vect2}");
      WriteLine($"vect3 = {vect3}");
    }
把这些代码另存为Vectors.cs，编译并运行它，结果如下：
    vect1 = ( 3, 3, 1 )
    vect2 = ( 2, -4, -4 )
    vect3 = ( 5, -1, -3 )
矢量除了可以相加之外，还可以相乘、相减和比较它们的值。本节通过添加几个运算
符重载，扩展了这个Vector例子。这并不是一个功能齐全的真实的Vector类型，但足以说
明运算符重载的其他方面了。首先要重载乘法运算符，以支持标量和矢量的相乘以及矢量
和矢量的相乘。
矢量乘以标量只意味着矢量的每个组成元素分别与标量相乘，例如，2×（1.0, 
2.5,
2.0）就等于（2.0, 
5.0, 
4.0）。相关的运算符重载如下所示（代码文件
OperatorOverloadingSample2/Vector.cs）：
    public static Vector operator ＊(double left, Vector right) =>
      new Vector(left ＊ right.X, left ＊ right.Y, left ＊ right.Z);
但这还不够，如果a和b声明为Vector类型，就可以编写下面的代码：
    b = 2 ＊ a;
编译器会隐式地把整数2转换为double类型，以匹配运算符重载的签名。但不能编译
下面的代码：
    b = a ＊ 2;
编译器处理运算符重载的方式与方法重载是一样的。它会查看给定运算符的所有可用
重载，找到与之最匹配的重载方式。上面的语句要求第一个参数是Vector，第二个参数是
整数，或者可以隐式转换为整数的其他数据类型。我们没有提供这样一个重载。有一个运
算符重载，其参数依次是一个double和一个Vector，但编译器不能交换参数的顺序，所以
这是不可行的。需要显式地定义一个运算符重载，其参数依次是一个Vector和一个
double，有两种方式可以实现这样的运算符重载。第一种方式是对矢量乘法进行分解，和
处理所有运算符的方式一样，显式执行矢量相乘操作：
    public static Vector operator ＊(Vector left, double right) =>
      new Vector(right ＊ left.X, right ＊ left.Y, right ＊ left.Z);
前面已经编写了实现基本相乘操作的代码，最好重用该代码：
    public static Vector operator ＊(Vector left, double right) =>
      right ＊ left;
这段代码会有效地告诉编译器，如果有Vector和double数据的相乘操作，编译器就颠
倒参数的顺序，调用另一个运算符重载。本章的示例代码使用第二个版本，因为它看起来
比较简洁，同时阐述了该行为的思想。利用这个版本可以编写出可维护性更好的代码，因
为不需要复制代码，就可在两个独立的重载中执行相乘操作。
下一个要重载的乘法运算符支持矢量相乘。在数学领域，矢量相乘有两种方式，但这
里我们感兴趣的是点积或内积，其结果实际上是一个标量。这就是我们介绍这个例子的原
因：算术运算符不必返回与定义它们的类相同的类型。
在数学术语中，如果有两个矢量（x, y, z）和（X, Y, Z），其内积就定义为x * X + y
* Y + z * Z的值。两个矢量这样相乘很奇怪，但这实际上很有用，因为它可以用于计算各
种其他的数。当然，如果要使用Direct3D或DirectDraw编写代码来显示复杂的3D图形，那
么在计算对象放在屏幕上的什么位置时，中间常常需要编写代码来计算矢量的内积。这里
我们关心的是使用Vector编写出double X =a * b，其中a和b是两个Vector对象，并计算出它
们的点积。相关的运算符重载如下所示：
    public static double operator ＊(Vector left, Vector right) =>
      left.X ＊ right.X + left.Y ＊ right.Y + left.Z ＊ right.Z;
理解了算术运算符后，就可以用一个简单的测试方法来检验它们是否能正常运行：
    static void Main()
    {
      // stuff to demonstrate arithmetic operations
      Vector vect1, vect2, vect3;
      vect1 = new Vector(1.0, 1.5, 2.0);
      vect2 = new Vector(0.0, 0.0, -10.0);
      vect3 = vect1 + vect2;
      WriteLine($"vect1 = {vect1
}");
      WriteLine($"vect2 = {vect2
}");
      WriteLine($"vect3 = vect1 + vect2 = {vect3
}");
      WriteLine($"2 ＊ vect3 = {2 ＊ vect3
}");
      WriteLine($"vect3 += vect2 gives {vect3 += vect2
}");
      WriteLine($"vect3 = vect1 ＊ 2 gives {vect3 = vect1 ＊ 2
}");
      WriteLine($"vect1 ＊ vect3 = {vect1 ＊ vect3
}");
    }
运行此代码，得到如下所示的结果：
    vect1 = ( 1, 1.5, 2 )
    vect2 = ( 0, 0, -10 )
    vect3 = vect1 + vect2 = ( 1, 1.5, -8 )
    2 ＊ vect3 = ( 2, 3, -16 )
    vect3 += vect2 gives ( 1, 1.5, -18 )
    vect3 = vect1 ＊ 2 gives ( 2, 3, 4 )
    vect1 ＊ vect3 = 14.5
这说明，运算符重载会给出正确的结果，但如果仔细看看测试代码，就会惊奇地注意
到，实际上它使用的是没有重载的运算符——相加赋值运算符（+=）：
    WriteLine($"vect3 += vect2 gives {vect3 += vect2
}");
虽然“+=”一般计为单个运算符，但实际上它对应的操作分为两步：相加和赋值。与
C++语言不同，C#不允许重载“=”运算符；但如果重载“+”运算符，编译器就会自动使
用“+”运算符的重载来执行“+=”运算符的操作。-=、*=、/=和&=等所有赋值运算符也遵循
此原则。
8.5.3 比较运算符的重载
本章前面介绍过，C#中有6个比较运算符，它们分为3对：
● ==和！=
● >和=和 ! (left == righ
t);
现在重写Equals和GetHashCode方法。这些方法应该总是在重写==运算符时进行重
写，否则编译器会报错。
    public override bool Equals(object obj)
    {
      if (obj == null) return false;
      return this == (Vector)obj;
    }
    public override int GetHashCode() =>
      X.GetHashCode() + (Y.GetHashCode() 。这个接口是Equals方法的一个强类型
化版本，由基类Object定义。有了所有其他代码，就很容易实现该方法：
    public bool Equals(Vector other) => this == other;
像往常一样，应该用一些测试代码快速检查重写方法的工作情况。这次定义3个
Vector对象，并进行比较（代码文件OverloadingComparisonSample/Program.cs）：
    static void Main()
    {
      var vect1 = new Vector(3.0, 3.0, -10.0);
      var vect2 = new Vector(3.0, 3.0, -10.0);
      var vect3 = new Vector(2.0, 3.0, 6.0);
      WriteLine($"vect1 == vect2 returns {(vect1 == vect2)}");
      WriteLine($"vect1 == vect3 returns {(vect1 == vect3)}");
      WriteLine($"vect2 == vect3 returns {(vect2 == vect3)}");
      WriteLine();
      WriteLine($"vect1 ! = vect2 returns {(vect1 ! = vect2)}");
      WriteLine($"vect1 ! = vect3 returns {(vect1 ! = vect3)}");
      WriteLine($"vect2 ! = vect3 returns {(vect2 ! = vect3)}");
    }
在命令行上运行该示例，生成如下结果：
    vect1 == vect2 returns True
    vect1 == vect3 returns False
    vect2 == vect3 returns False
    vect1 ! = vect2 returns False
    vect1 ! = vect3 returns True
    vect2 ! = vect3 returns True
8.5.4 可以重载的运算符
并不是所有的运算符都可以重载。可以重载的运算符如表8-5所示。
表8-5
类别
运算符
限制
算术二元运算符
+、*、/、-、%
无
算术一元运算符
+、-、++、--
无
按位二元运算符
&、|、^、>
无
按位一元运算符
!、～、true、false
true和false运算符必须成对重载
比较运算符
==、! =、>=、
比较运算符必须成对重载
赋值运算符
+=、-=、*=、/=、
>>=、<<=、%=、
&=、|=、^=
不能显式地重载这些运算符，在