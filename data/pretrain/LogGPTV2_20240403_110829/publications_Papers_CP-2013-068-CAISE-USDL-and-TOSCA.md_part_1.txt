**Title: Cloud Computing Automation: Integrating USDL and TOSCA**

**Authors:**
- Jorge Cardoso1,2
- Tobias Binz3
- Uwe Breitenb√ºcher3
- Oliver Kopp3
- Frank Leymann3

**Affiliations:**
1. Karlsruhe Service Research Institute (KSRI), Karlsruhe Institute of Technology, Germany
2. CISUC, Department of Informatics Engineering, University of Coimbra, Portugal
3. Institute of Architecture of Application Systems, University of Stuttgart, Germany

**Contact:**
- PI: EMAIL
- {lastname}@iaas.uni-stuttgart.de

**Abstract:**
Standardization efforts to simplify the management of cloud applications are often conducted in isolation. This paper investigates the integration of two promising specifications, USDL and TOSCA, to automate the lifecycle of cloud applications. We selected a commercial SaaS CRM platform, modeled it using the service description language USDL, and its cloud deployment using TOSCA. A prototypical platform was constructed to integrate service selection with deployment. Our evaluation indicates that a high level of integration is possible, enabling full automation of remote deployment after service selection in a marketplace. Architectural decisions during platform construction addressed global service identification and access, multi-layer routing, and dynamic binding.

**Keywords:**
USDL, TOSCA, cloud service lifecycle, service description, service management

**1. Introduction**
Standardization efforts are paving the way for the mainstream adoption of SaaS (Software-as-a-Service) and cloud computing environments [1]. Various organizations (e.g., OMG, W3C, Eurocloud, NIST) are developing standards such as USDL, TOSCA, CCRA, and OCCI. In 2009, it was argued that no standard existed [2], but this has changed. For example, The Open Group is working on the Cloud Computing Reference Architecture (CCRA), and EuroCloud is devising guidelines on law, data privacy, and compliance.

However, these initiatives have limitations. Efforts are often conducted in isolation, and it is unclear how they can be integrated. Additionally, there is uncertainty about which standards provide adequate interoperability. For cloud providers, advances in interoperability can simplify the numerous activities involved in the lifecycle of applications.

This paper aims to study the interoperability of current cloud specifications, particularly USDL (Unified Service Description Language) [3,4] and TOSCA (Topology and Orchestration Specification for Cloud Applications) [5]. USDL enhances the description of service offerings to facilitate discovery and selection [6], while TOSCA automates the deployment and management of services.

We use the SaaS application SugarCRM, an open-source, web-based CRM platform, as a representative use case to evaluate the interoperability of USDL and TOSCA. The various SugarCRM service offerings were modeled with USDL, and the deployment, including virtual machines, databases, and web servers, was modeled with TOSCA. Based on these models, we developed a loosely coupled platform, SIOPP (ServIce Offering and Provisioning Platform), to achieve interoperability between the two specifications. The platform enables global and unique identification of services, remote access and querying of USDL service descriptions, intelligent routing of service requests, and dynamic binding of TOSCA deployment descriptors.

Our evaluation indicated a high degree of interoperability, allowing the selection of a cloud service from a marketplace, routing the request to a provider, and deploying the cloud service automatically. Future work will involve replicating our research with other emerging specifications (e.g., CloudAudit for auditing and BSI-ESCC for security) to support the full lifecycle of cloud applications.

**2. Motivating Scenario**
Currently, the discovery and selection of cloud applications, such as a SaaS SugarCRM system, are primarily manual. It is not possible to effectively query services offered by different marketplaces because they are not publicized in computer-understandable formats. This manual process is a first limitation we aim to address.

After a purchase decision, contracting and billing are negotiated manually, and the selected cloud application and its customization are handed over to an IT provider or department without formalization of executables, technical requirements, and best practices. Operators invest significant effort to learn how to set up and manage the application. Customization is done manually, often requiring research or consulting to make the cloud solution work in a specific environment. This manual and error-prone process is not suitable for fast-changing markets and dynamic business requirements. This is the second limitation we aim to address.

To solve these limitations, USDL aims to formalize, structure, and simplify the discovery and selection of services, while TOSCA automates their management. When used together, they can automate parts of the cloud application lifecycle, including discovery, selection, deployment, and management.

**3. Modeling SugarCRM with USDL and TOSCA**
In this section, we provide a brief introduction to the two specification languages we will integrate. We also use USDL to describe the SaaS SugarCRM application and TOSCA to model its deployment.

**3.1 USDL Overview**
The Unified Service Description Language (USDL) was developed in 2008 to describe business, software, or real-world services using machine-readable specifications for trading on the Internet [3]. Previous efforts focused on describing software interfaces (e.g., WSDL, CORBA IDL, RPC IDL). However, the Internet of Services requires services to be traded, emphasizing the description of business-related aspects such as pricing, legal terms, and service level agreements. This motivated the creation of USDL. Initial versions were ready in 2009 [7,3]. In 2011, a W3C Incubator group was created, and USDL was extended based on experiences from several European academic and industrial projects (e.g., SOA4ALL, Reservoir, ServFace, Shape, etc.). In 2012, a new version, Linked USDL, based on Linked Data principles [8] and RDF, was proposed. This version is currently being explored and evaluated in several research projects such as FI-Ware, FInest, and Value4Cloud.

Linked USDL is segmented into five modules:
- **usdl-core**: Models general information and service options.
- **usdl-price**: Models cost and pricing plans.
- **usdl-legal**: Models legal terms and conditions.
- **usdl-sla**: Models service level agreements.
- **usdl-sec**: Models security features.

Due to its benefits, such as reusability of existing data models and simplicity in publishing and interlinking services, Linked USDL was used in this research.

**3.2 Describing SugarCRM with USDL**
The information used to model the SaaS SugarCRM was retrieved from its website. A service and vocabulary model were created. The vocabulary contained domain-dependent concepts from the field of CRM systems (e.g., taxonomies of common installation options). Since Linked USDL provides a generic service description language, domain-specific knowledge needs to be added to enrich the service description. The excerpt from Listing 1.1 illustrates the description of the SugarCRM service (in this paper, examples are written using the Turtle language [6]).

```turtle
:service_SugarCRM a usdl:Service ;
    dcterms:title "SugarCRM service instance"@en ;
    usdl:hasProvider :provider_SugarCRM_Inc ;
    usdl:hasLegalCondition :legal_SugarCRM ;
    gr:qualitativeProductOrServiceProperty
        crm:On_premise_or_cloud_deployment,
        crm:Scheduled_data_backups,
        crm:Social_media_integration,
        crm:Mobile_device_accessibility .
```

The description starts with the identification of the provider, the legal usage conditions, and the general properties of the service (e.g., deployment, scheduled backups, integration, and mobile accessibility). Service offerings connect services to price plans. Listing 1.2 defines four price plans: professional, corporate, enterprise, and ultimate. The professional plan includes common features shared with other plans, such as sales force automation, marketing automation, and support automation. It costs $30 per month, with an annual contract and monthly billing.

```turtle
:offering_SugarCRM a usdl:ServiceOffering ;
    usdl:includes :service_SugarCRM ;
    usdl:hasPricePlan
        :pricing_SugarCRM_Professional,
        :pricing_SugarCRM_Corporate,
        :pricing_SugarCRM_Enterprise,
        :pricing_SugarCRM_Ultimate ;
    usdl:hasServiceLevelProfile :slp_SugarCRM .

:priceComponent_SugarCRM_Professional_General a price:PriceComponent ;
    dcterms:title "General price"@en ;
    dcterms:description "Fee for general usage of the instance."@en ;
    price:isLinkedTo
        crm:Sales_Force_Automation,
        crm:Support_Automation,
        crm:Integration_via_web_services_API,
        crm:Customizable_Reporting,
        crm:MySQL_and_MS_SQL_server_database_support ;
    price:hasPrice
        [ a gr:UnitPriceSpecification ;
          gr:hasCurrency "USD" ;
          gr:hasCurrencyValue "30" ;
          gr:hasUnitOfMeasurement "MON" ] .
```

In this example, Linked USDL uses existing vocabularies such as Dublin Core (dcterms), GoodRelations (gr), and the domain vocabulary constructed for CRM systems (crm).

**3.3 TOSCA Overview**
The Topology and Orchestration Specification for Cloud Applications (TOSCA) [5] was standardized to enable automated deployment and management of applications while being portable between different cloud management environments [9]. The management and operation of cloud applications are major concerns in enterprise IT. For example, the pay-as-you-go model requires fast provisioning and management of application instances. Since these applications typically consist of numerous heterogeneous distributed components, managing the components, their relationships, and the entire application is difficult and expensive, especially when manual work is required. Thus, there is a need to automate management to decrease effort and reduce errors. Additionally, to avoid vendor lock-in, there is a need to create portable applications that can be moved between different cloud providers. TOSCA is currently standardized by an OASIS Technical Committee, which has published several community specification drafts. TOSCA is an XML-based exchange format. The application's architecture, components, and relationships are modeled formally in a typed topology graph. Each node and relationship defines the management operations it offers. These operations are exposed as web services and are used to manage individual components and relationships at a fine-granular technical level. The overall management functionalities, such as deploying, scaling, backing up, and terminating the whole application, are modeled at a higher level of abstraction using management plans.