Cardoso, J.; Binz, T.; Breitenbucher, U; Kopp, O. and Leymann, F. Cloud Computing Automation: Integrating
USDL and TOSCA. In 25th Conference on Advanced Information Systems Engineering (CAiSE 2013), pages
1-16, Springer, LNCS, Vol. 7908, 2013.
Cloud Computing Automation:
Integrating USDL and TOSCA
Jorge Cardoso1,2, Tobias Binz3, Uwe Breitenbu¨cher3,
Oliver Kopp3, and Frank Leymann3
1 Karlsruhe Service Research Institute(KSRI)
Karlsruhe Instituteof Technology, Karlsruhe, Germany
2 CISUC, Departmentof Informatics Engineering
Universityof Coimbra, Coimbra, Portugal
PI:EMAIL
3 Instituteof Architectureof Application Systems
Universityof Stuttgart,Stuttgart, Germany
{lastname}@iaas.uni-stuttgart.de
Abstract. Standardizationeffortstosimplifythemanagementofcloud
applications are being conducted in isolation. The objective of this pa-
peristoinvestigatetowhichextendtwopromisingspecifications,USDL
and TOSCA,can beintegrated toautomatethelifecycle of cloud appli-
cations.Inourapproach,weselectedacommercialSaaSCRMplatform,
modeled it using the service description language USDL, modeled its
cloud deployment using TOSCA, and constructed a prototypical plat-
form to integrate service selection with deployment. Our evaluation in-
dicates that a high levelof integration is possible. Wewere able tofully
automatize the remote deployment of a cloud service after it was se-
lected by a customer in a marketplace. Architectural decisions emerged
duringtheconstructionoftheplatformandwererelatedtoglobalservice
identification and access, multi-layerrouting, and dynamicbinding.
Keywords: USDL,TOSCA,cloudservicelifecycle, servicedescription,
service management.
1 Introduction
Standardizationeffortsarepavingthewaywhichleadstothe mainstreamadop-
tionofSaaS(Software-as-a-Service)andcloudcomputingenvironments[1].Cur-
rently, different players (e.g., OMG, W3C, Eurocloud, NIST) are undertaking
several initiatives1 (e.g., USDL, TOSCA, CCRA, OCCI) to provide useful and
usable standards for cloud computing. In 2009, it was argued that no standard
existed [2]. This has changed. For example, The Open Group is working on the
Cloud Computing Reference Architecture (CCRA) and EuroCloud is devising
guidelines on law, data privacy, and compliance.
1 http://cloud-standards.org
C.Salinesi,M.C.Norrie,andO.Pastor(Eds.):CAiSE2013,LNCS7908,pp.1–16,2013.
(cid:2)c Springer-VerlagBerlinHeidelberg2013
2 J. Cardoso et al.
Nonetheless, these initiatives have two limitations. On the one hand, efforts
are being conducted in isolation and it is not clear to which extend they can
be integrated and, on the other hand, there is a lack of certainty as to which
standards provide adequate levels of interoperability. For cloud providers (e.g.,
HostEurope.com and JiffyBox.de), advances in interoperability can simplify
the countless activities involved during the life cycle of applications.
Theobjectiveofthispaperistostudytowhichextendcurrentcloudspecifica-
tions and standards are interoperable. In particular, we investigate how USDL
(Unified Service Description Language) [3,4] and TOSCA (Topology and Or-
chestration Specification for Cloud Applications) [5] can be integrated to link
the description and the management of cloud services2, respectively. USDL is
being exploredby severalresearchprojectsto enhance the descriptionofservice
offeringstofacilitate servicediscoveryandselection[6]. TOSCAhelps providers
to automate the deployment and management of services.
OurresearchdesignusestheSaaSapplicationSugarCRM3,anopen-source,web-
basedcustomerrelationshipmanagement(CRM)platform,asarepresentativeuse
caseforevaluatingtheinteroperabilitylevelofUSDLandTOSCA.Therefore,the
variousSugarCRMserviceofferingsweremodeledwiththeirpricingmodels,soft-
wareoptions,andlegalstatementsinUSDL.TheSugarCRMdeployment,which
includedvirtualmachines,databases,andwebservers,aswellasitsmanagement,
wasmodeledwithTOSCA.Basedontheseactivities,thedevelopmentofaloosely
coupledplatformasameantoachieveinteroperabilitybetweenthetwospecifica-
tionswasconducted,buildingthecorepartoftheproposedapproach.Thedevelop-
mentoftheplatform,calledSIOPP(ServIceOfferingandProvisioningPlatform)4,
involvedtakingarchitecturaldecisionstoenabletheglobalanduniqueidentifica-
tion of services described with USDL, the remote access and querying of USDL
service descriptions, the intelligent routing of service requests to providers, and
thedynamicbindingofTOSCAdeploymentdescriptorstoservicedescriptions.
Theevaluationoftheplatformindicatedthatahighdegreeofinteroperability
was achieved. It became possible to select a cloud service from a marketplace,
route the request to a provider which had previously announced to offer the
service, and deploy the cloud service using plans which accounted for the char-
acteristics of the service. After setup and configuration, all these steps were
conductedautomaticallywithoutrequiringhumanintervention.Futureworkre-
quires the replication of our research using other emerging specifications (e.g.,
CloudAuditforauditingandBSI-ESCCforsecurity)tosupportthefulllifecycle
of cloud applications from cradle to grave.
This paper is structured as follows: In Section 2, we illustrate a motivating
scenarioexplaining the needto integratecloudspecifications. Section3explains
howthe SaaSSugarCRMfromourscenariowasdescribedusingUSDL andhow
its deployment was specified using TOSCA. The requirements for a platform
to make USDL and TOSCA interoperable, as well as the main architectural
2 WewillusethetermsserviceandcloudapplicationtorefertoSoftware-as-a-Service.
3http://www.sugarcrm.com/
4SIOPPispronounced‘shop’.
Cloud Computing Automation 3
decisionsarepresentedinSection4. Section5evaluatesthe developedplatform.
Section 6 provides a literature review. Section 7 discusses our conclusions.
2 Motivating Scenario
Nowadays,thediscoveryandselectionofcloudapplications,suchasaSaaSSugar-
CRMsystem,isstillmainlycarriedoutmanuallybyconsumers.Itisnotpossible
toeffectivelyqueryservicesofferedbydifferentmarketplaces(e.g.,AppDirect,Ap-
pcelerator,andtheServiceDeliveryBrokerfromPortugalTelecom),becausethey
arenotpublicizedusingcomputer-understandableformats.Marketplacesneedto
besearchedmanually.Thisisafirstlimitationwewanttoaddress.
Afterapurchasedecisionismade,andfromtheproviderside,contractingand
billing is negotiated by the sales and procurement divisions, the selected cloud
applicationanditscustomizationisgiventoanITproviderordepartmentwith-
out any formalization of the executables, technical requirements, management
best practices, and so on. Operators invest considerable efforts to learn how to
setup and manage the application. Customization is done manually and often
research or consulting is required to make a cloud solution work in a particular
environment.Thismanualanderror-proneprocessisnotsuitabletoaddressfast
changingmarketsanddynamicbusinessrequirements.Apartfromsolutionssuch
as Saleforce, Google Apps, or Microsoft Office 365, this is still the way software
is provisioned. This is the second limitation we want to address.
To solve these limitations, USDL is aiming to formalize, structure, and sim-
plifythediscoveryandselectionofservices,andTOSCAtoautomatetheirman-
agement. When used in conjunction, they can automate parts of the lifecycle of
cloud applications, namely discovery, selection, deployment, and management.
3 Modeling SugarCRM with USDL and TOSCA
Inthis sectionweprovideabriefintroductiontothetwospecificationlanguages
wewillintegrate.WealsouseUSDLtodescribetheSaaSSugarCRMapplication
from our scenario and use TOSCA to model its deployment.
3.1 USDL Overview
The Unified Service Description Language was developed in 2008 for describing
business, software, or real world services using machine-readable specifications
tomakethemtradableontheInternet[3]. Pasteffortswereconcentratedonde-
velopinglanguages,suchasWSDL, CORBAIDL, andRPCIDL, whichfocused
on the description of software interfaces. Nonetheless, the Internet of Services
requires services to be traded, placing emphasis on the description of business-
relatedaspects such as pricing, legal aspects, and service level agreements. This
was the motivation to create USDL. The initial versionsof USDL were ready in
2009 [7,3]. Later, in 2011, based on the experiences gained from the first devel-
opments, a W3C Incubator group5 was created and USDL was extended. The
5 http://www.w3.org/2005/Incubator/usdl/
4 J. Cardoso et al.
extensions resulted from the experience gained in several European academic
and industrial projects (e.g., SOA4ALL, Reservoir, ServFace, Shape, etc.). In
2012, a new version named Linked USDL based on Linked Data principles [8]
andRDFwasproposed.Thisrecentversioniscurrentlybeingexploredandeval-
uated in several research projects such as FI-Ware (smart applications), FInest
(logistics), and Value4Cloud (value-added cloud services).
Linked USDL is segmented in 5 modules. The usdl-core module models
general information such as the participants involved during provisioning and
service options such as customer support. The cost and pricing plans are mod-
eledwithusdl-price.Thelegaltermsandconditionsunderwhichservicesmay
be consumed are modeled with usdl-legal. The module usdl-sla gathers in-
formation on the levels of service provided, e.g., availability, response time, etc.
Finally, usdl-secmodels security features of a service. Due to its benefits, e.g.,
reusability of existing data models and simplicity in publishing and interlinking
services, Linked USDL was used in this research.
3.2 Describing SugarCRM with USDL
The information used to model the SaaS SugarCRM was retrievedfrom its web
site. A service and a vocabulary model were created. The vocabulary contained
domain dependent concepts from the field of CRM systems (e.g., taxonomies of
commoninstallationoptions).SinceLinkedUSDLonlyprovidesagenericservice
description language, domain specific knowledge needs to be added to further
enrich the description of services. The excerpt from Listing 1.1 illustrates the
description of the SugarCRM service (in this paper, examples are written using
the Turtle language6).
1  a usdl:Service ;
2 ...
3 dcterms:title "SugarCRM service instance"@en ;
4 usdl:hasProvider :provider_SugarCRM_Inc ;
5 usdl:hasLegalCondition :legal_SugarCRM ;
6 gr:qualitativeProductOrServiceProperty
7 crm:On_premise_or_cloud_deployment ,
8 crm:Scheduled_data_backups ,
9 crm:Social_media_integration ,
10 crm:Mobile_device_accessibility .
11 ...
Listing 1.1. SugarCRM service modeled with Linked USDL
Thedescriptionstartswiththeidentificationoftheprovider(line4),thelegal
usage conditions (line 5), and the general properties of the service (e.g., deploy-
ment,scheduledbackups,integration,andmobileaccessibility).Serviceofferings
6 Turtle – Terse RDFTriple Language, see http://www.w3.org/TR/turtle/
Cloud Computing Automation 5
connect services to price plans. Listing 1.2 defines four price plans (lines 4-8):
professional,corporate,enterprise,andultimate.Theprofessionalplan
includescommonfeaturessharedwiththeotherplanssuchassalesforceautoma-
tion, marketing automation, and support automation (lines 15-20). It costs $30
per month (lines 21-25), the contract is annual and the billing is made every
month (not shown in this excerpt).
1 :offering_SugarCRM a usdl:ServiceOffering ;
2 ...
3 usdl:includes  ;
4 usdl:hasPricePlan
5 :pricing_SugarCRM_Professional ,
6 :pricing_SugarCRM_Corporate ,
7 :pricing_SugarCRM_Enterprise ,
8 :pricing_SugarCRM_Ultimate ;
9 usdl:hasServiceLevelProfile :slp_SugarCRM .
10 ...
11 :priceComponent_SugarCRM_Professional_General a price:PriceComponent ;
12 dcterms:title "General price"@en ;
13 dcterms:description "Fee for general usage of the instance."@en ;
14 price:isLinkedTo
15 crm:Sales_Force_Automation ,
16 crm:Support_Automation ,
17 crm:Integration_via_web_services_API ,
18 crm:Customizable_Reporting ,
19 ...
20 crm:MySQL_and_MS_SQL_server_database_support ;
21 price:hasPrice
22 [ a gr:UnitPriceSpecification ;
23 gr:hasCurrency "USD" ;
24 gr:hasCurrencyValue "30" ;
25 gr:hasUnitOfMeasurement "MON" ] .
Listing 1.2. Pricing plans for SugarCRM services
Inthisexample,LinkedUSDLusesexistingvocabulariessuchasDublinCore
(shown in the model with :dcterms), GoodRelations (:gr), and the domain
vocabulary constructed for CRM systems (:crm).
3.3 TOSCA Overview
The Topology and Orchestration Specification for Cloud Applications [5] was
standardized to enable automated deployment and management of applications
whilebeingportablebetweendifferentcloudmanagementenvironments[9].The
management and operation of cloud applications are major concerns in enter-
prise IT. For example, the pay-as-you-go model requires fast provisioning and
management of application instances. Since these applications typically consist
6 J. Cardoso et al.
ofnumerousheterogenousdistributedcomponents,themanagementofthecom-
ponents itself, the relationships among each other, and the whole application is
difficult and expensive in terms of time and money - especially when manual
workisrequired,e.g.,deployingandexecutingscriptsinaspecialorderbyhand
which is error prone. Thus, there is the need to automate management to de-
crease the effort and reduce the error rate. In addition, to avoidvendor lock-in,
whichisamajorconcernofcustomerswhentalkingaboutoutsourcingandcloud
computing, there is a need to create portable applications which can be moved
between different cloud providers. The TOSCA specification is currently stan-
dardized by an OASIS Technical Commitee7 which already published a number
of community specification drafts. TOSCA is an XML-based exchange format.
The application’s architecture, the components it consists of, and the relation-
ships among them are modeled formally in a typed topology graph. Each node
and relationship defines the management operations it offers. These operations
are exposed as web services and are used to manage the individual components
and relationships on a fine-granular technical level. The overall management
functionalities suchas deploying,scaling,backuping, andterminating the whole
application are modeled on a higher level of abstraction by using management