postgres=# explain (analyze,verbose,costs,buffers,timing) select count(*) from t1 natural join t2 natural join t3 natural join t4 natural join t5 natural join t6 natural join t7 natural join t8 ;  
                                                                                           QUERY PLAN                                                                                              
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------  
 Aggregate  (cost=1663562.75..1663562.76 rows=1 width=0) (actual time=48858.541..48858.541 rows=1 loops=1)  
   Output: pgstrom.count((pgstrom.nrows()))  
   Buffers: shared hit=354038  
   ->  Custom Scan (GpuPreAgg)  (cost=1453270.24..1642063.09 rows=17 width=4) (actual time=48794.894..48858.504 rows=28 loops=1)  
         Output: pgstrom.nrows()  
         Bulkload: On (density: 100.00%)  
         Reduction: NoGroup  
         Features: format: tuple-slot, bulkload: unsupported  
         Buffers: shared hit=354038  
         ->  Custom Scan (GpuJoin)  (cost=1450270.24..1638562.92 rows=9999931 width=0) (actual time=48438.139..48777.446 rows=10000000 loops=1)  
               Pseudo Scan: (t1.c1)::integer, (t1.c2)::integer, (t4.c1)::integer, (t4.c2)::integer  
               Bulkload: On (density: 100.00%)  
               Depth 1: GpuHashJoin, HashKeys: (t1.c1, t1.c2), JoinQual: ((t1.c1 = t4.c1) AND (t1.c2 = t4.c2))  
                        Nrows (in:10000000 out:10000000, 100.00% planned 100.00%), KDS-Hash (size: 801.09MB planned 560.27MB, nbatches: 1 planned 2)  
               Features: format: heap-tuple, bulkload: supported  
               Buffers: shared hit=354038  
               ->  Custom Scan (GpuJoin)  (cost=422951.98..567268.52 rows=10000000 width=24) (actual time=9964.714..10167.462 rows=10000000 loops=1)  
                     Output: t1.c1, t1.c2, t2.c1, t2.c2, t3.c1, t3.c2  
                     Pseudo Scan: t1.c1::integer, t1.c2::integer, t2.c1::integer, t2.c2::integer, t3.c1::integer, t3.c2::integer  
                     Bulkload: On (density: 100.00%)  
                     Depth 1: GpuHashJoin, HashKeys: (t1.c1, t1.c2), JoinQual: ((t1.c1 = t3.c1) AND (t1.c2 = t3.c2))  
                              Nrows (in:10000000 out:10000000, 100.00% planned 100.00%), KDS-Hash (size: 495.91MB planned 739.10MB, nbatches: 1 planned 1)  
                     Features: format: tuple-slot, bulkload: supported  
                     Buffers: shared hit=132771  
                     ->  Custom Scan (GpuJoin)  (cost=211479.50..355978.48 rows=10000000 width=16) (actual time=5018.376..5238.156 rows=10000000 loops=1)  
                           Output: t1.c1, t1.c2, t2.c1, t2.c2  
                           Pseudo Scan: t1.c1::integer, t1.c2::integer, t2.c1::integer, t2.c2::integer  
                           Bulkload: On (density: 100.00%)  
                           Depth 1: GpuHashJoin, HashKeys: (t1.c1, t1.c2), JoinQual: ((t1.c1 = t2.c1) AND (t1.c2 = t2.c2))  
                                    Nrows (in:10000000 out:10000000, 100.00% planned 100.00%), KDS-Hash (size: 495.91MB planned 739.10MB, nbatches: 1 planned 1)  
                           Features: format: tuple-slot, bulkload: supported  
                           Buffers: shared hit=88523  
                           ->  Custom Scan (BulkScan) on public.t1  (cost=0.00..144248.00 rows=10000000 width=8) (actual time=12.040..322.669 rows=10000000 loops=1)  
                                 Output: t1.c1, t1.c2  
                                 Features: format: tuple-slot, bulkload: supported  
                                 Buffers: shared hit=44275  
                           ->  Seq Scan on public.t2  (cost=0.00..144248.00 rows=10000000 width=8) (actual time=0.008..1528.913 rows=10000000 loops=1)  
                                 Output: t2.c1, t2.c2  
                                 Buffers: shared hit=44248  
                     ->  Seq Scan on public.t3  (cost=0.00..144248.00 rows=10000000 width=8) (actual time=0.022..1529.554 rows=10000000 loops=1)  
                           Output: t3.c1, t3.c2  
                           Buffers: shared hit=44248  
               ->  Custom Scan (GpuJoin)  (cost=845250.50..990105.67 rows=9999835 width=40) (actual time=25935.700..27197.613 rows=10000000 loops=1)  
                     Output: t4.c1, t4.c2, t5.c1, t5.c2, t6.c1, t6.c2, t7.c1, t7.c2, t8.c1, t8.c2  
                     Pseudo Scan: t4.c1::integer, t4.c2::integer, t5.c1::integer, t5.c2::integer, t6.c1::integer, t6.c2::integer, t7.c1::integer, t7.c2::integer, t8.c1::integer, t8.c2::integer  
                     Bulkload: On (density: 100.00%)  
                     Depth 1: GpuHashJoin, HashKeys: (t4.c1, t4.c2), JoinQual: ((t4.c1 = t5.c1) AND (t4.c2 = t5.c2))  
                              Nrows (in:10000000 out:10000000, 100.00% planned 100.00%), KDS-Hash (size: 495.91MB planned 739.10MB, nbatches: 1 planned 1)  
                     Features: format: tuple-slot, bulkload: supported  
                     Buffers: shared hit=221267  
                     ->  Custom Scan (GpuJoin)  (cost=634200.09..778635.44 rows=9999835 width=32) (actual time=20268.808..20269.446 rows=10000000 loops=1)  
                           Output: t4.c1, t4.c2, t6.c1, t6.c2, t7.c1, t7.c2, t8.c1, t8.c2  
                           Pseudo Scan: t4.c1::integer, t4.c2::integer, t6.c1::integer, t6.c2::integer, t7.c1::integer, t7.c2::integer, t8.c1::integer, t8.c2::integer  
                           Bulkload: On (density: 100.00%)  
                           Depth 1: GpuHashJoin, HashKeys: (t4.c1, t4.c2), JoinQual: ((t4.c1 = t8.c1) AND (t4.c2 = t8.c2))  
                                    Nrows (in:10000000 out:10000000, 100.00% planned 100.00%), KDS-Hash (size: 495.91MB planned 739.10MB, nbatches: 1 planned 1)  
                           Features: format: tuple-slot, bulkload: supported  
                           Buffers: shared hit=177019  
                           ->  Custom Scan (GpuJoin)  (cost=422951.23..567266.84 rows=9999906 width=24) (actual time=14136.992..14560.294 rows=10000000 loops=1)  
                                 Output: t4.c1, t4.c2, t6.c1, t6.c2, t7.c1, t7.c2  
                                 Pseudo Scan: t4.c1::integer, t4.c2::integer, t6.c1::integer, t6.c2::integer, t7.c1::integer, t7.c2::integer  
                                 Bulkload: On (density: 100.00%)  
                                 Depth 1: GpuHashJoin, HashKeys: (t4.c1, t4.c2), JoinQual: ((t4.c1 = t7.c1) AND (t4.c2 = t7.c2))  
                                          Nrows (in:10000000 out:10000000, 100.00% planned 100.00%), KDS-Hash (size: 495.91MB planned 739.10MB, nbatches: 1 planned 1)  
                                 Features: format: tuple-slot, bulkload: supported  
                                 Buffers: shared hit=132771  
                                 ->  Custom Scan (GpuJoin)  (cost=211479.13..355977.88 rows=9999977 width=16) (actual time=7517.167..7812.485 rows=10000000 loops=1)  
                                       Output: t4.c1, t4.c2, t6.c1, t6.c2  
                                       Pseudo Scan: t4.c1::integer, t4.c2::integer, t6.c1::integer, t6.c2::integer  
                                       Bulkload: On (density: 100.00%)  
                                       Depth 1: GpuHashJoin, HashKeys: (t4.c1, t4.c2), JoinQual: ((t4.c1 = t6.c1) AND (t4.c2 = t6.c2))  
                                                Nrows (in:10000000 out:10000000, 100.00% planned 100.00%), KDS-Hash (size: 495.91MB planned 739.10MB, nbatches: 1 planned 1)  
                                       Features: format: tuple-slot, bulkload: supported  
                                       Buffers: shared hit=88523  
                                       ->  Custom Scan (BulkScan) on public.t4  (cost=0.00..144248.48 rows=10000048 width=8) (actual time=12.063..322.445 rows=10000000 loops=1)  
                                             Output: t4.c1, t4.c2  
                                             Features: format: tuple-slot, bulkload: supported  
                                             Buffers: shared hit=44275  
                                       ->  Seq Scan on public.t6  (cost=0.00..144247.77 rows=9999977 width=8) (actual time=0.009..1559.817 rows=10000000 loops=1)  
                                             Output: t6.c1, t6.c2  
                                             Buffers: shared hit=44248  
                                 ->  Seq Scan on public.t7  (cost=0.00..144247.77 rows=9999977 width=8) (actual time=0.022..1527.810 rows=10000000 loops=1)  
                                       Output: t7.c1, t7.c2  
                                       Buffers: shared hit=44248  
                           ->  Seq Scan on public.t8  (cost=0.00..144247.77 rows=9999977 width=8) (actual time=0.023..1521.776 rows=10000000 loops=1)  
                                 Output: t8.c1, t8.c2  
                                 Buffers: shared hit=44248  
                     ->  Seq Scan on public.t5  (cost=0.00..144248.48 rows=10000048 width=8) (actual time=0.015..1499.270 rows=10000000 loops=1)  
                           Output: t5.c1, t5.c2  
                           Buffers: shared hit=44248  
 Planning time: 82.220 ms  
 Execution time: 52799.548 ms  
(92 rows)  
```  
## 参考  
1\. [《试用 PGStrom》](../201508/20150814_02.md)    
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")