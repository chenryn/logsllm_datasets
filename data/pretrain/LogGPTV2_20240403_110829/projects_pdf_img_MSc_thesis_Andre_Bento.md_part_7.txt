### Functional Requirements

1. **FR-2: Retrieval of Service Dependency Graphs (High Priority)**
   - The system must be capable of retrieving service dependency graphs from distributed tracing tools.

2. **FR-3: Storage of Service Dependency Graphs (High Priority)**
   - The system must be able to store service dependency graphs in a graph database.

3. **FR-4: Storage of Time-Series Metrics (High Priority)**
   - The system must be able to store time-series metrics extracted from tracing data in a time-series database.

4. **FR-5: Extraction of Call Counts (Medium Priority)**
   - The system must be able to extract the number of calls per service (total, incoming, and outgoing) from tracing data.

5. **FR-6: Extraction of Response Times (Medium Priority)**
   - The system must be able to extract the response time per service from tracing data.

6. **FR-7: Generation of Request Workflow Paths (Medium Priority)**
   - The system must be able to generate request workflow paths from tracing data.

7. **FR-8: Calculation of Request Ratios (Medium Priority)**
   - The system must be able to calculate the request ratio of success and error for specific services from tracing data.

8. **FR-9: Calculation of Service Degrees (Medium Priority)**
   - The system must be able to calculate the degree (total, in, and out) of services from service dependency graphs.

9. **FR-10: Retrieval of Differences Between Service Dependency Graphs (Medium Priority)**
   - The system must be able to retrieve the differences between two service dependency graphs.

10. **FR-11: Reporting on Spans Structure (Low Priority)**
    - The system must be able to produce a report about spans structure using a defined OpenTracing structural schema.

11. **FR-12: Calculation of Trace Time Coverage (Low Priority)**
    - The system must be able to calculate the time coverage of traces within a given timeframe.

12. **FR-13: Identification of Outliers in Time-Series (Low Priority)**
    - The system must be able to identify regions of outliers presented in multiple time-series.

### Priority Grouping
The functional requirements are grouped based on their priority levels:

- **High Priority (FR-1 to FR-4):** These represent the foundational functionalities required to implement the remaining requirements.
- **Medium Priority (FR-5 to FR-10):** These focus on the extraction of time-based metrics from tracing data.
- **Low Priority (FR-11 to FR-13):** These are related to trace testing and anomaly detection based on time-series data.

### Relationship to Research Questions
These functional requirements are aligned with the research questions outlined in Section 3.2. The verification of these requirements will be covered in Sections 5.2 and 5.3 of the next chapter.

---

### 4.2 Quality Attributes

When designing a software system, it is crucial to specify all quality attributes, also known as non-functional requirements. These are often Architecturally Significant Requirements and require significant attention from the software architect, as they directly influence architectural decisions.

#### Priority Codification
- **H:** High
- **M:** Medium
- **L:** Low

#### Definition Aspects
To properly describe quality attributes, the following six aspects should be included:
- Stimulus source
- Stimulus
- Environment
- Artefact
- Response
- Measure of the response

#### Utility Tree
Figure 4.2 contains all raised quality attributes (QAs) for this proposed solution, structured in an utility tree, sorted alphabetically by their general QA name, and then by the architectural impact pair (Architecture and Business).

**QA1: Interoperability (H, M)**
- **Description:** The system, when running, must be able to retrieve information for analysis from an external tracing and/or monitoring tool.
- **Explanation:** This is essential for ingesting tracing data, which is typically found in distributed tracing tools used by operators. Access to an external distributed tracing tool is a critical feature, and we assigned a Medium level for the architecture and a Low level for the business.

**QA2: Interoperability (L, H)**
- **Description:** The system, when running, must be able to work without affecting the normal work of the external systems.
- **Explanation:** It is crucial that our solution does not interfere with the normal operation of external systems. This is very important from a business perspective, as any conflicts could lead to rejection of the solution. For the architectural perspective, it has a Low level of impact.

### 4.3 Technical Restrictions

In this section, the technical restrictions considered in the proposed solution are presented. No business restrictions were raised due to the exploratory and research nature of this work.

#### Table 4.2: Technical Restrictions Specification

| ID | Description |
|----|-------------|
| TR-1 | Use OpenTSDB as a Time-Series database. |

**Explanation:** This restriction was imposed by Professor Jorge Cardoso, who acts as a client for this solution. OpenTSDB is the database currently used in their projects at Huawei Research Center, and this restriction will facilitate any necessary changes.

### 4.4 Architecture

This section presents the architecture based on the Simon Brownâ€™s C4 Model, which uses four diagrams: Context Diagram, Container Diagram, Component Diagram, and Code Diagram. Only the first three representations are considered here.

#### 4.4.1 Context Diagram

**Figure 4.3: Context Diagram**

- **Overview:** The context diagram provides a high-level view of the overall system, representing it as a "big box" and its interactions with users and external software systems.
- **Components:**
  - **Graphy (OTP):** Analyzes data from an external target system and provides extracted metrics to an external metrics visualizer.
  - **Metrics Visualizer:** Allows users to view metrics in a human-readable format.
  - **Target System:** Holds the tracing information to be analyzed.
  - **Users:** DevOps/SysAdmin and Operators who interact with the system.

#### 4.4.2 Container Diagram

**Figure 4.4: Container Diagram**

- **Overview:** The container diagram provides a more detailed view of the system, showing how responsibilities are distributed across containers.
- **Containers:**
  - **Access Console:** Allows users to control system functionalities.
  - **Graphy API:** Manages the entire OpenTracing system, communicates with the target system, and interacts with the databases.
  - **Databases:**
    - **Graph Database (GDB):** Stores graphs extracted from span trees.
    - **Time Series Database (TSDB):** Stores time metrics extracted from tracing data.
  - **Target System:** Provides tracing data for analysis.

#### 4.4.3 Component Diagram

**Figure 4.5: Component Diagram**

- **Overview:** The component diagram provides a deeper view of the system, revealing the main components.
- **Components:**
  - **Graphy Controller:** Receives requests from the user and controls other components.
  - **Tracing Processor:** Maps tracing data, span trees, and service dependency graphs into memory.
  - **Tracing Collector:** Collects tracing data from local files or external systems.
  - **Data Analyzer:** Identifies outliers in time-series metrics.
  - **Graph Processor:** Handles graph operations, such as subtraction and node degree calculation.
  - **Graphs Repository:** Maps graphs to and from the graph database.
  - **Metrics Repository:** Maps time-series metrics to and from the time series database.

### Verification of Architectural Drivers

- **QA1 and QA2:** Satisfied by the system's ability to collect data from an external system using HTTP and exposed APIs, ensuring minimal interference with normal functions.
- **Technical Restriction (TR-1):** Satisfied by the use of OpenTSDB as the main time series database.

### Conclusion

The proposed architecture satisfies all the architectural drivers, including quality attributes, business constraints, and technical restrictions. This ensures that the solution fits the needs of the project and supports the research objectives.

### Next Chapter: Implementation Process

The next chapter, Chapter 5, will cover the implementation of the solution, discussing all implemented algorithms and technical decisions in detail.