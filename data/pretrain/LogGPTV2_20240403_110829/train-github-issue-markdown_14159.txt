The scipy curve_fit documentation says that xdata can be an object:
> xdataarray_like or object  
>  The independent variable where the data is measured. Should usually be an
> M-length sequence or an (k,M)-shaped array for functions with k predictors,
> **but can actually be any object.**
(emphasis mine)
This is currently not respected. Previously, anything could be passed in, but
with 1.2.3, it appears that a numpy array is assumed and xdata is modified to
float64.
`xdata = xdata.astype(float)`
The xdata should not be modified by curve_fit since it's not, in any way,
meant for curve_fit to consume. It's meant for our models. These may rely on
the data types of the xdata, possibly non-numeric. Even for numeric models,
casting to float breaks models that rely on the data types passed to them, or
would require possibly lossy conversions back.
This is a regression that breaks all models that use something besides float64
numpy arrays or need to preserve data types for their models to work.
#### Reproducing code example:
    from scipy.optimize import curve_fit
    class ExampleObject(object):
        def __init__(self, a=5, b=3.0):
            self.a = 5.0
            self.b = 3.0
    def model(xdata, k):
        return xdata.a * k
    values = range(10)
    answer = curve_fit(
                model,  # Function to fit the data to
                xdata=ExampleObject(),
                ydata=values,
                p0=[1.0],
            )
#### Error message:
      File "/usr/local/lib/python2.7/site-packages/scipy/optimize/minpack.py", line 716, in curve_fit
        xdata = xdata.astype(float)
    AttributeError: 'ExampleObject' object has no attribute 'astype'
#### Scipy/Numpy/Python version information:
    ('1.2.3', '1.16.6', sys.version_info(major=2, minor=7, micro=17, releaselevel='final', serial=0))