*†
Contains Digits
Vowel Ratio
Digit Ratio
Alphabet Cardinality
Ratio of Repeated Charac-
ters
Ratio of Consecutive Conso-
nants
Ratio of Consecutive Digits
Output F (d1) F (d2)
1
binary
0.3
rational
0.2
rational
18
integer
rational
0.33
0
0.21
0.0
12
0.25
rational
rational
0.67
0.0
0.36
0.08
Table 2: Overview of 7 linguistic features applied on the
example domains d1 and d2.
least
twice.
for the
is repeated at
domain name rwth-aachen.derwth-aachen.de this
feature evaluates to 1, but
the domain name
rwthrwth-aachen.de it evaluates to 0.
For example,
for
(#9) Ratio of Digit-Exclusive Subdomains. This fea-
ture is computed as the ration of
the number of
subdomains consisting exclusively of digits to the
overall number of subdomains.
ignores public
sufﬁxes.
Consider for example the domain name
123.itsec.rwth-aachen.de resulting in 1/3 as it has
3 subdomains (the public sufﬁx de is excluded), where
one of them consists of digits exclusively.
It
(#10) Ratio of Hexadecimal-Exclusive Subdomains.
This feature is deﬁned analogously to feature (#9) Ratio
of Digit-Exclusive Subdomains.
(#12) Contains IP Address. This is a binary feature,
which is 1 if and only if the domain contains an IP ad-
dress, where IP address refers to common notations of
IPv4 and IPv6 addresses including dots.
3.3 Linguistic Features
To extend our feature set we focus on linguistic charac-
teristics of domain names in the following. These fea-
tures are used to capture deviations from common lin-
guistic patterns of domain names. Table 2 presents an
overview of all 7 linguistic features. In the following, we
discuss the non-self-explanatory linguistic features #17,
#18, and #19 in detail.
(#17) Ratio of Repeated Characters. The repeated
character ratio is computed on the dds f and is de-
ﬁned as the number of characters occurring more
than once in dds f divided by the alphabet cardinality
(#16). Considering the example domain name d =
bnxd.rwth-aachen.de this feature evaluates to 3/12,
where repeating characters in dds f are n, h, and a.
#
20
21
Feature
Output
F (d1) F (d2)
*†
1-Gram
1-Gram
*†
N-Gram Dist.
d1
d2
Entropy
vector
(0.43,1,1.25,1,2,1,1.25)
(0.59,1,1.39,1,3,1,2)
3.64
rational
4.05
Table 3: Overview of 2 statistical features evaluated on
the example domains d1 and d2.
(#18) Ratio of Consecutive Consonants. This fea-
ture sums up the lengths of disjunct sequences of con-
sonants ≥ 2 and divides the sum by the length of
dds f . For example, considering the domain name d =
bnxd.rwth-aachen.de results in (8 + 2)/15 = 0.67,
where dds f = bnxdrwth-aachen and the consecutive
disjunct consonant sequences are: bnxdrwth and ch.
(#19) Ratio of Consecutive Digits. This feature is de-
ﬁned analogously to feature (#18) Ratio of Consecutive
Consonants.
3.4 Statistical Features
The two statistical features used by FANCI are shown in
Table 3. Both are explained in detail in the following.
(#20) N-Gram Frequency Distribution [2]. An n-
gram of domain name d is a multi
set of all
(also non-disjunct) character sequences e, e ∈ dds f ,
with |e| = n.
f n denotes the frequency distri-
bution of the corresponding n-gram.
The n-gram
frequency distribution feature is deﬁned as gn =
( f n,σ ( f n),min( f n),max( f n), ˜f n, f n
0.75), where f n
is the arithmetic mean of fn, σ ( f n) the corresponding
standard deviation, min( f n) the minimum, max( f n) the
maximum,
0.25 the lower quartile, and
f n
0.75 the upper quartile. Table 3 exemplarily illustrates
the evaluation of this feature for 1-grams on the domains
d1 and d2. FANCI uses g1,g2,g3 as feature #20 which
results in a vector of 21 output values overall.
˜f n the median, f n
0.25, f n
(#21) Entropy [14, 2]. The entropy (according to
Shannon) is deﬁned considering the 1-gram frequency
distribution f 1 of d: −∑c∈dds f pc · log2(pc), where pc is
the relative frequency of character c according to f 1. Ta-
ble 3 shows example evaluations for the domains d1 and
d2.
4 FANCI
In this section, we present Feature-based Automated
NXDomain Classiﬁcation and Intelligence (FANCI).
1168    27th USENIX Security Symposium
USENIX Association
It consists of three modules:
FANCI is a lightweight system for classifying arbitrary
NXDs into benign and DGA-related solely based on do-
main names.
training,
classiﬁcation, and intelligence. Figure 3 provides an
overview of FANCI’s architecture, of required inputs, of
outputs, and of the way FANCI processes data internally.
The three modules and potential application scenarios
are described in more detail in the following.
4.1 Training Module
As FANCI is based on supervised learning classiﬁers, it
requires training with labeled data. The training module
implements training of classiﬁers and requires the input
of labeled mAGDs and bNXDs (see upper left in Fig-
ure 3). We obtain labeled mAGDs for training purposes
from DGArchive. Assuming FANCI operates in a cam-
pus or business network, bNXDs can for example be ob-
tained from the network’s DNS resolver. To obtain an
as clean as possible set of bNXDs for training, we ﬁlter
them in a cleaning step against all known mAGDs from
DGArchive [14]. After the cleaning step, feature extrac-
tion is performed for each of the inputs as described in
Section 3.
The output of the training module is a trained model,
ready to be used for classiﬁcation of unknown NXDs in
the classiﬁcation module.
4.2 Classiﬁcation Module
The classiﬁcation module classiﬁes arbitrary NXDs into
mAGDs and bNXDs based on a model it receives from
the training module (see middle part of Figure 3). The
classiﬁcation module operates on an NXD, that is, on an
individual domain name as input submitted for classiﬁ-
cation either by an intelligence module (see Section 4.3)
or by any other source as indicated with a dashed arrow
in Figure 3. The output of the classiﬁcation module is a
label for the submitted NXD that can take either of the
two values benign or malicious.
To perform the classiﬁcation, ﬁrst, feature extraction is
performed on the input NXD as described in Section 3.
Afterwards, the actual classiﬁcation is performed (cur-
rently either by RFs or by SVMs) on the extracted feature
vector using the previously trained model. The classiﬁ-
cation module can either be used standalone or in com-
bination with the intelligence module.
Intelligence Module
4.3
The intelligence module’s task is to supply intelligence
based on classiﬁcation results, in particular, ﬁnd infected
devices and identify new DGAs or unknown seeds. As
opposed to the classiﬁcation module, which only takes
the NXD itself as input, the intelligence module addi-
tionally takes the source and destination IP address and
the timestamp of each NXD response as input in order to
be able to map a malicious label as classiﬁcation result
back to the device that initiated the query.
In a ﬁrst preprocessing step this module extracts the
domain name and the aforementioned meta data from an
NXD response. It uses the classiﬁcation module to deter-
mine the label of the corresponding NXD and stores the
results including the meta data in a database. To handle
and improve results, postprocessing is performed, which
can be divided into ﬁltering and transformation.
Filtering is performed to further reduce false positives
(FPs) and is carried out by ﬁltering all positives against
two whitelists. An NXD is removed from the positives
list if it ends with a domain name present in one of the
whitelists.
The ﬁrst whitelist is of global nature and always ap-
plicable. It consists of the top X Alexa domains6, where
the exact amount X to use in this step is conﬁgurable.
Whitelisting the top Alexa domains is based on the com-
monly made assumption that criminals are not able to
host command & control (C2) servers under the most
popular domains [4, 1]. To avoid whitelisting domain
names such as dyndns.org, we exclude all domains
from this list under which domains are publicly regis-
trable according to Mozilla’s list of public sufﬁxes [8].
The second whitelist is of local nature. It considers
domains occurring with high frequency in the network
FANCI operates in. This list is fully conﬁgurable and we
provide examples for two networks in the evaluation part
of this paper (see Section 5.2.4).
After ﬁltering, transformations are applied on the re-
sults to generate different views on this data and facil-
itate the analysis of the results. These transformations
primary include the grouping of all positives by TLD
or second-level domain, the grouping of NXDs by IP
address of the requesting device, and the grouping by
timestamps. Additionally, string-based searching and ﬁl-
tering of NXDs can be performed. Now, the data is well-
prepared for a manual review and a conclusive interpre-
tation.
4.4 Usage Scenarios
FANCI is a versatile and ﬂexible system and is applicable
in a variety of different scenarios. We mainly differenti-
ate between two major use cases. The ﬁrst case considers
the usage of FANCI with all of its three modules at a sin-
gle operation site, while the second case takes advantage
of FANCI’s modular design and considers a distributed
use of FANCI.
6https://www.alexa.com/
USENIX Association
27th USENIX Security Symposium    1169
Figure 3: Abstract illustration of the architecture and operation of FANCI.
Local. This deployment scenario is typical for corpo-
rate or campus-grade networks, where FANCI can be
used locally as a fully-featured system. Networks of this
size usually have a centralized DNS infrastructure which
eases the deployment of FANCI, in particular the acquisi-
tion of bNXDs to train the classiﬁer and also subsequent
real-time detection using NXD responses. In such a de-
ployment the previously trained model is used to label
NXDs and to provide insights about infected devices to
network administrators and incident handlers.
In some networks (e.g., in a typical university net-
work) DNS trafﬁc of devices can be monitored in a
way such that IP addresses of querying devices are vis-
ible. In this case, FANCI’s intelligence module is able
to map mAGDs detected in NXD responses to infected
devices that queried them. The detection of an infected
device may trigger a monitoring of the successfully re-
solved DNS trafﬁc originating from these devices. Us-
ing FANCI’s classiﬁcation module trained on success-
fully resolved domains (see Section 5.5) then enables the
detection of successfully resolving mAGDs and the iden-
tiﬁcation of C2 servers allowing for blacklisting of cor-
responding IP addresses. Note that starting with moni-
toring the NXD responses only, has the advantage that
much less trafﬁc needs to be handled in this step than if
we would monitor the full DNS trafﬁc. As a DGA typi-
cally generates many more mAGDs that result in NXD
responses than mAGDs that resolve, monitoring NXD
responses is the most promising way to ﬁnd infected de-
vices. The chance an infected device is able to contact its
C2 server before it has queried a non-resolving mAGD
seem very slim.
In less permissive networks (e.g., in large corporate
networks) DNS trafﬁc may not allow for a direct map-
ping to devices, for example, because of a hierarchi-
cal DNS infrastructure, where central DNS servers only
communicate with subordinate domain controllers.
In
this case, the identiﬁcation of infected devices is less
straight forward but could to some extend be managed
with the help of sinkholing mAGDs detected by FANCI.
FANCI could also be integrated into existing monitor-
ing software and can signiﬁcantly add value to its de-
tection capabilities by providing directly utilizable threat
intelligence. Domains that were classiﬁed as mAGDs by
FANCI can be considered to be high-conﬁdence indica-
tors of compromise (IOCs). Thus, FANCI can trigger
and support a variety of subsequent measures. This may
include proxy log and DNS log analysis, for example to
retrospectively detect further infections and to sinkhole
or blacklist identiﬁed C2 domains. Furthermore, the uti-
lization of detected mAGDs on host-based agents or net-
work edge devices like routers or ﬁrewalls is possible to
ﬁnd further infected devices and disrupt C2 trafﬁc at the
same time.
Outsourced. FANCI generalizes well to unknown en-
vironments, which means that some parts can be out-
sourced. In particular, it is possible to perform training
with data obtained from a certain campus-grade network
and use the resulting model to perform detection in other
networks. This enables the use of FANCI in networks,
where it is hard to perform training. For example, this
can be small networks (e.g., those of small businesses),
where it takes too long to get the necessary amount of
data for training or this can be networks, where it is a
non-trivial task to obtain a clean set of bNXDs for super-
vised learning (e.g., ISP networks).
Furthermore, FANCI’s classiﬁcation module can be
used as a service, for example, accessible via an API
or a web service useable by security software or security
researchers. Note that in this case, only the domain name
in question would have to be submitted to the server. The
entirety of labeled mAGDs could also further be shared
using various mechanisms, for example, as a threat intel-
ligence feed, which can again be integrated into existing
protection efforts of large and medium-sized companies.
1170    27th USENIX Security Symposium
USENIX Association
5 Evaluation
In this section, we present an extensive evaluation of
FANCI’s classiﬁcation module. We compare SVMs and
RFs to ﬁnd the best performing classiﬁer setup for de-
tecting mAGDs and show that RFs slightly outperform
SVMs in this use case. We show that FANCI’s clas-
siﬁcation module generalizes well to unknown network
environments and present a real world application test,
whereby we are able to report new DGAs. Finally, we
evaluated how well FANCI’s classiﬁcation module is
able to detect resolving mAGDs in full DNS trafﬁc. Be-
fore presenting our results in detail, we ﬁrst describe our
evaluation procedure, including a description of the data
sets our evaluation is based on.
5.1 Data Sets
As FANCI’s classiﬁcation module relies on supervised
learning classiﬁers, we require labeled data sets for train-
ing and evaluation. Furthermore, as classiﬁcation is per-
formed on domain names only, we only require sets of
labeled unique domain names to evaluate classiﬁcation
performance. The three data sources we use are the
RWTH Aachen University campus network, the internal
network of Siemens AG and the DGA Archive [14].
RWTH Aachen University. The central DNS resolver
of RWTH Aachen University serves as ﬁrst source for
bNXD responses, which includes a variety of academic
institutes, eduroam7, several administrative networks,
student residences, and the University hospital of RWTH
Aachen. The campus network is additionally intercon-
nected with the University of Applied Science Aachen,
and the Research Center J¨ulich [15]. Due to enforce-
ment, a vast majority of devices uses the network’s cen-
tral DNS resolvers. Our bNXD data set is a continu-
ous one-month recording of NXD responses recorded at
the central DNS resolver. We recorded 31 days overall,
more precisely from 22 May 2017 until 21 June 2017. In
this one-month period, we recorded pcap ﬁles of NXD
responses with a size of 98.9 GB containing approxi-
mately 700 million NXD responses, that is, on average
we recorded 3.2 GB or 22.6 million NXD responses per
day. In total, this data set comprises 35.8 million unique
NXDs.
module. This data originates from several central DNS
servers of Siemens AG and covers three regions: Europe,
Asia, and the USA. This broad and international cover-
age guarantees diverse data from different entities and
devices. We obtained data of a two-month period from
September and October 2017 (i.e., 61 days) comprising
31.2 million unique NXDs overall.
The long recording periods for both benign data
sets guarantee a representative data set including dif-
ferent times of the day, different days of the week, and
working and non-working days. To clean our benign
data sets as far as possible we checked our benign
data against DGArchive [14] and removed all known
mAGDs.
DGArchive. To obtain sets of known mAGDs we used
the DGArchive [14]. mAGDs in DGArchive are com-
puted by using reimplementations of reverse engineered
DGAs and by using corresponding known seeds. Hence,
DGArchive serves as an extremely reliable source for a
malicious data set. Our data set comprises all data avail-
able from DGArchive at the time of writing. We were
able to obtain mAGD data for 1,344 days, ranging from
12 February 2014 until 30 January 2018. In total, this set
contains 72 different DGAs. As our selected ML algo-
rithms at least need a set size of a few hundred NXDs to
perform well, we decided to reduce the set by eliminat-
ing all DGAs with less than 250 unique mAGDs. This
results in 59 remaining DGAs. For our malicious data
set we consider unique mAGDs of these DGAs exclu-
sively. This comprises 49,738,973 unique mAGDs in to-
tal. Across these DGAs, the number of unique mAGDs
is between 251 and 13,488,000.
5.2 Classiﬁcation Accuracy
In this section, we ﬁrst determine the best perform-
ing classiﬁer or ensemble of classiﬁers for detecting
mAGDs. Next, we present several experiments, each to
prove a certain capability of FANCI’s classiﬁcation mod-
ule. This includes the ability to detect unknown seeds
and unknown DGAs as well as showing that FANCI’s