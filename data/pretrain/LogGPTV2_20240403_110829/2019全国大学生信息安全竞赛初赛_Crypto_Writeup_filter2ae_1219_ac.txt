            kkk -= 1
    if __name__=='__main__':
        test()
解密结果（部分）：
    16
     ▲↨^#Q
    15
    ▲D0↑/
    14
    t-ÏEÏx§
    13
    y0ur9Ood
    12
    µp^Ûé=¹
    11
    )Á`rûÕû
    10
    Âoãªh♫áf
    9
    À¤Zz¢»‼
    8
    òðÜ¤ß
    7
    ×Í♫9Ò↑5S
    6
    Bh¤~$)▲£
    5
    5£!P
    ôËâ
    4
    &L
tT®
    3
    lÇ!@∟é
    2
    l§1?I}3{
    1
    /Ô☼5èB!±
    0
    ¿B♣2t♂↑X
可以看出n为13，flag为`flag{y0ur9Ood}`
###  FLAG值：
flag{y0ur9Ood}
## 0x01 warmup
####  题目内容：
    from Crypto.Cipher import AES
    from Crypto.Util import Counter
    from Crypto import Random
    import binascii
    import SocketServer
    pad = lambda s: s + (16 - len(s) % 16) * chr(16 - len(s) % 16)
    flag = "******************************************"
    key = Random.get_random_bytes(16)
    print binascii.b2a_hex(key)
    prefix = Random.get_random_bytes(4)
    suffix = Random.get_random_bytes(4)
    def enc(plaintext):
        count = Counter.new(64, prefix=prefix, suffix=suffix)
        cipher = AES.new(key, AES.MODE_CTR, counter=count)
        print(binascii.hexlify(pad(plaintext)))
        return cipher.encrypt(pad(plaintext + flag))
    class ThreadedTCPServer(SocketServer.ThreadingMixIn, SocketServer.TCPServer):
        pass
    class EncHandler(SocketServer.BaseRequestHandler):
        def handle(self):
            self.request.sendall("Welcome to flag getting systemn")
            while 1:
                self.request.sendall("plaintext>")
                plaintext = self.request.recv(1024).strip()
                ciphertext = binascii.hexlify(enc(plaintext))
                self.request.sendall("result>" + ciphertext + 'n')
    if __name__ == "__main__":
        HOST, PORT = "0.0.0.0", 7777
        server = ThreadedTCPServer((HOST, PORT), EncHandler)