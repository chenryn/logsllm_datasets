𝑖=𝑟+1
𝑖=𝑟+1
𝑖=𝑟+1
𝑖=𝑟+1
𝑥𝑖 .
𝑖=1
𝑖=1
𝑖=1
𝑖=1 (1 − 𝑥𝑖) ≥(cid:80)𝑛
𝑟(cid:88)
𝑝𝑖 ≥ 𝑛(cid:88)
𝑖=1
𝑖=1
𝑝𝑖 · 𝑥𝑖 ,
as required.
We now proceed to the proof of Theorem 5.3.
Proof: We wish to upper bound the maximum advantage of an
attacker 𝒢 who makes at most 𝑞 queries to the Test oracle in game
OFFGUESS𝒢,𝑞
Π,𝒯 . Let the sequence of guesses made by 𝒢 be denoted
𝐺 = {( ˜𝑤1, 𝑗1), ( ˜𝑤2, 𝑗2), . . . , ( ˜𝑤𝑞, 𝑗𝑞 )}, and recall that if 𝑗𝑖 = 0
then this corresponds to a guess at the value of the real password;
otherwise the guess represents a guess at the typo stored at position
0 < 𝑗𝑖 ≤ 𝑡 in the cache. Without loss of generality, we may assume
that 𝒢 never repeats a query, since this would decrease his success
probability. We split the guesses into two sets 𝑍0 and 𝑍1 where,
𝑍0 = {( ˜𝑤𝑖, 𝑗𝑖) | 𝑗𝑖 = 0} and 𝑍1 = {( ˜𝑤𝑖, 𝑗𝑖) | 0 < 𝑗𝑖 ≤ 𝑡} .
We let 𝑞0 = |𝑍0| and 𝑞1 = |𝑍1|, so 𝑞1 ≤ 𝑞 − 𝑞0. We let 𝑇 [𝑗] denote
the distribution of the typo at the 𝑗th position in the cache. Notice
that the adversary 𝒢 will succeed if either the real password 𝑇 [0]
lies in the set 𝑍0, or 𝑇 [𝑗𝑖] = ˜𝑤𝑖 for some ( ˜𝑤𝑖, 𝑗𝑖) ∈ 𝑍1. It follows
that
Advoffguess
(𝒢, 𝑞) = Pr[𝑇 [0] ∈ 𝑍0 ∨ ∃( ˜𝑤𝑖, 𝑗𝑖) ∈ 𝑍1 : 𝑇 [𝑗𝑖] = ˜𝑤𝑖]
We may rewrite the above expression
Advoffguess
Π,𝒯
= Pr[𝑇 [0] ∈ 𝑍0] + Pr[𝑇 [0] (cid:60) 𝑍0 ∧ ∃( ˜𝑤𝑖, 𝑗𝑖) ∈ 𝑍1 : 𝑇 [𝑗𝑖] = ˜𝑤𝑖] .
(cid:88)
(cid:88)
(𝒢, 𝑞) − Pr[𝑇 [0] ∈ 𝑍0]
Pr[∃( ˜𝑤𝑖, 𝑗𝑖) ∈ 𝑍1 : 𝑇 [𝑗𝑖] = ˜𝑤𝑖 | 𝑇 [0] = 𝑤] · Pr[𝑇 [0] = 𝑤]
𝑤∈𝒲∖𝑍0
Π,𝒯
(cid:103)
· Pr[𝑇 [0] = 𝑤] .
𝑤∈𝒲∖𝑍0
𝑇 [𝑗𝑖] = ˜𝑤𝑖 | 𝑇 [0] = 𝑤
(cid:88)
For each 𝑤 ∈ 𝒲, Pr
and so an application of Lemma A.1 implies that
Advoffguess
( ˜𝑤𝑖,𝑗𝑖) 𝑇 [𝑗𝑖] = ˜𝑤𝑖 | 𝑇 [0] = 𝑤
Pr[𝑇 [0] = 𝑤] +
(cid:103)
Π,𝒯
∈ [0, 1],
Pr
( ˜𝑤𝑖,𝑗𝑖)∈𝑍1
(cid:102) (cid:95)
(cid:102)(cid:87)
(𝒢, 𝑞) ≤ (cid:88)
1⌉(cid:88)
𝑤∈𝑍0
𝑞0+⌈𝑞′
≤
Pr[𝑇 [0] = 𝑤]
𝑤∈𝑍*
1
Pr[𝑇 [0] = 𝑤𝑖] ,
.
=
=
𝑖=1
17
CCS ’17, October 30-November 3, 2017, Dallas, TX, USA
𝑞
′
1 =
where 𝑍
(cid:102) (cid:95)
*
1 is the set of the 𝑞
′
1 heaviest passwords in 𝒲 ∖ 𝑍0 and,
(cid:103) .
We now upper bound 𝑞
(cid:103)
𝑡-sparse, it holds that 𝑏 ˜𝜏 ( ˜𝑤) ≤ 𝑡 for all ˜𝑤 ∈ ℳ. It follows that
( ˜𝑤𝑖,𝑗𝑖)∈𝑍1
′
1. Since by assumption the error setting is
𝑇 [𝑗𝑖] = ˜𝑤𝑖 | 𝑇 [0] = 𝑤
𝑤∈𝒲∖𝑍0
Pr
𝑇 [𝑗𝑖] = ˜𝑤𝑖 | 𝑇 [0] = 𝑤
( ˜𝑤𝑖,𝑗𝑖)∈𝑍1
Pr
(cid:102) (cid:95)
(cid:102) (cid:95)
(cid:88)
(cid:88)
( ˜𝑤𝑖,𝑗𝑖)∈𝑍1
( ˜𝑤𝑖,𝑗𝑖)∈𝑍1
( ˜𝑤𝑖,𝑗𝑖)∈𝑍1
· ˜𝜏𝑤 ( ˜𝑤𝑖)
1
𝑡
(cid:103)
𝑇 [𝑗𝑖] = ˜𝑤𝑖 | 𝑇 [0] = 𝑤
Pr[𝑇 [𝑗𝑖] = ˜𝑤𝑖 | 𝑇 [0] = 𝑤]
𝑞
′
(cid:88)
1 ≤ (cid:88)
≤ (cid:88)
≤ (cid:88)
(cid:88)
(cid:88)
𝑤∈𝒲
𝑤∈𝒲
𝑤∈𝒲
=
=
𝑤∈𝒲∖𝑍0
Pr
( ˜𝑤𝑖,𝑗𝑖)∈𝑍1
· 𝑏 ˜𝜏 ( ˜𝑤𝑖) ≤ 𝑞 − 𝑞0 .
1
𝑡
The first inequality follows since 𝒲 ∖ 𝑍0 ⊆ 𝒲 for any 𝑍0. The
second inequality follows by taking a union bound over the points
in 𝑍1. The next equality follows because the typo cache elements are
distinct and randomly permuted, so Pr[𝑇 [𝑗𝑖] = ˜𝑤𝑖 | 𝑇 [0] = 𝑤] =
(cid:80)
𝑡 · ˜𝜏𝑤 ( ˜𝑤). The next equality follows since by definition 𝑏 ˜𝜏 ( ˜𝑤𝑖) =
1
𝑤∈𝒲 ˜𝜏𝑤 ( ˜𝑤𝑖). The final inequality follows since 𝑏 ˜𝜏 ( ˜𝑤𝑖) ≤ 𝑡 for
all ˜𝑤𝑖, and there are at most 𝑞 − 𝑞0 guesses in 𝑍1. Putting this all
together implies that,
𝑞0 + 𝑞
and we conclude that
′
1 ≤ 𝑞0 + (𝑞 − 𝑞0) = 𝑞 ,
(𝒢, 𝑞) ≤ 𝑞(cid:88)
𝑖=1
Advoffguess
Π,𝒯
𝑝(𝑤𝑖) .
A.5 Online Security
Following from the discussion in Section 5.3, we now detail the
security analysis of TypTop in the online setting.
We define online security via the game ONGUESS depicted in Fig-
ure 11, adapting the corresponding notion formulated by Chatterjee
et al. in [8] to the adaptive checking setting, with the advantage
defined
(cid:20)
(cid:21)
Advonguess
Π,𝒯
(𝒜, 𝑞) = Pr
ONGUESS𝒜,𝑞
Π,𝒯 ⇒ true
.
We sample a password and login transcript via the transcript gen-
erator 𝒯 and evolve the state of the adaptive checker accordingly.
The attacker is given access to an oracle Test to which he may
submit guesses; he succeeds if he makes a guess which is accepted
by the checking algorithm Chk. The game is parameterized by 𝑞
representing the number of Test queries 𝒜 is allowed; this reflects
the standard online attack countermeasure of locking an account
after a certain number of incorrect guesses.
The analysis. Following the similar discussion in Section 5, we
first define a game ONGUESS analogous to OFFGUESS, in which
the final cache state is generated via the plaintext checker PChecker,
18
and the advantage is defined as
(𝒜, 𝑞) = Pr
Advonguess
Π,𝒯
(cid:20)
Chatterjee et al.
(cid:21)
ONGUESS
𝒜,𝑞
Π,𝒯 ⇒ true
.
In Lemma A.2 we bound the difference between the two games for
TypTop in terms of the robustness of the underlying SE scheme SE.
Lemma A.2. Let (𝑝, 𝜏 ) be an error setting with associated transcript
generator 𝒯 , and let Π = (Reg, Chk) be TypTop’s password checker
with associated plaintext checker PChecker[Π]. Let Π be implemented
using the canonical PBE scheme PBE[SH, SE] = (E, D) where SE is a
symmetric encryption scheme and SH is a random oracle. Then for
any adversary 𝒜 running in time 𝑇 , there exist adversaries 𝒜′, ℛ
such that
Advonguess
, 𝑞)
(𝑡 · (𝑛 + 1 + 𝑞) + 1 + 𝑞)2
(𝒜′
(𝒜, 𝑞) ≤ Advonguess
Π,𝒯
SE (ℛ) +
+ Advrob
′ ≈ 𝑇 . Here 𝑡 denotes the size of the
and, moreover, 𝒜′ runs in time 𝑇
cache, 𝑛 denotes the length of the transcript output by 𝒯 and SE has
key space {0, 1}𝜅.
Proof: We argue by a series of game hops. Let game G0 be equiva-
lent to game ONGUESSΠ,𝒯 , so
Π,𝒯
2𝜅
,
Advonguess
Π,𝒯
(𝒜, 𝑞) = Pr [ G0 ⇒ 1 ] .
Let game G1 be identical to G0 except that the keys used to compute
the cached ciphertexts in state 𝑠𝑛, and those used for trial decryp-
tions in response to Test queries made by 𝒜 in the guessing stage
of the game while win = false, are sampled without replacement.
These games run identically unless two of the keys sampled during
these phases collide. There are at most (𝑡 · (𝑛 + 1) + 1) such keys
sampled while computing the cached ciphertexts for a transcript of
length 𝑛, and at most 𝑞 · (𝑡 + 1) keys sampled during the guessing
phase (reflecting the (𝑡 + 1) trial decryptions performed by Chk for
each of the 𝑞 Test queries made by 𝒜). Notice that since cache up-
dates only occur in the guessing phase if 𝒜 guesses a string which
is accepted by Chk, the cache will never update while win = false.
It follows that
|Pr [ G0 ⇒ 1 ] − Pr [ G1 ⇒ 1 ]| ≤ (𝑡 · (𝑛 + 1 + 𝑞) + 1 + 𝑞)2
Next we define game G2 which is identical to G1 except that we
replace Checker[Π] with PChecker and redefine Test to perform
comparisons on the plaintext typo cache output by PChecker. Since
the adversary in these games never sees the internal state of the
checker, not encrypting the values which lie in this state does
not change the adversary’s view of the game; rather the two run
identically unless during the process of updating the state and
the adversary’s subsequent queries to Test we find two distinct
keys k1 (cid:44) k2 such that Dk2 (Ek1 (𝑠𝑘)) (cid:44)⊥ where 𝑠𝑘 denotes the
secret key of the PKE scheme which is encrypted under each of
the cached typos. Thus the fundamental lemma of game playing
implies that the gap between game G1 and G2 is upper bounded
by the probability that this event occurs. Consider an adversary ℛ
in game ROBℛ
SE who simply executes the game G1, simulating SH
by sampling random strings without replacement, and checking
if there ever exists a typo cache ciphertext Ek1 (𝑠𝑘) that decrypts
under some subsequently sampled k2 (cid:44) k1 (recall that since G1
2𝜅+1
.
The TypTop System
CCS ’17, October 30-November 3, 2017, Dallas, TX, USA
ONGUESS𝒜,𝑞
Π,𝒯 :
(𝑤0, ˜𝑤1, . . . , ˜𝑤𝑛) ←$ 𝒯
𝑠𝑛 ←$ Checker[Π](𝑤0, ˜𝑤1, . . . , ˜𝑤𝑛)
𝑟 ← 0 ; win ← false
𝒜Test
return win
Test( ˜𝑤):
(𝑏, 𝑠𝑛+𝑟+1) ← Chk( ˜𝑤, 𝑠𝑛+𝑟 )
𝑟 ← 𝑟 + 1
If (𝑏 = 1) and (𝑟 ≤ 𝑞)
win ← true
return 𝑏
𝒜,𝑞
Π,𝒯 :
ONGUESS
(𝑤0, ˜𝑤1, . . . , ˜𝑤𝑛) ←$ 𝒯