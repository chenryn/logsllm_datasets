# IO FILE之fread详解
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
这是IO FILE系列的第二篇文章，主要写的是对于fread函数的源码分析，描述fread读取文件流的主要流程以及函数对IO
FILE结构体以及结构体中的vtable的操作。流程有点小复杂，入坑需谨慎。
## 总体流程
第一篇文章`fopen`的分析，讲述了系统如何为FILE结构体分配内存并将其链接进入`_IO_list_all`的。
这篇文章则是说在创建了文件FILE以后，fread如何实现从文件中读取数据的。在开始源码分析之前，我先把fread的流程图给贴出来，后面在分析源码的时候，可以适时的参考下流程图，增进理解：
从图中可以看到，整体流程为`fread`调用`_IO_sgetn`，`_IO_sgetn`调用vtable中的`_IO_XSGETN`也就是`_IO_file_xsgetn`，`_IO_file_xsgetn`是`fread`实现的核心函数。它的流程简单总结为：
  1. 判断`fp->_IO_buf_base`输入缓冲区是否为空，如果为空则调用的`_IO_doallocbuf`去初始化输入缓冲区。
  2. 在分配完输入缓冲区或输入缓冲区不为空的情况下，判断输入缓冲区是否存在数据。
  3. 如果输入缓冲区有数据则直接拷贝至用户缓冲区，如果没有或不够则调用`__underflow`函数执行系统调用读取数据到输入缓冲区，再拷贝到用户缓冲区。
## 源码分析
仍然是基于glibc2.23的源码分析，使用带符号的glibc对程序进行调试。
fread的函数原型是：
    size_t fread(void *ptr, size_t size, size_t nmemb, FILE *stream);
    The  function fread() reads nmemb items of data, each size bytes long, from the stream pointed to by stream, storing them at the location given by ptr.
demo程序如下：
    #include
    int main(){
        char data[20];
        FILE*fp=fopen("test","rb");
        fread(data,1,20,fp);
        return 0;
    }
要让程序可以运行，执行命令`echo 111111>test`，然后gdb加载程序，断点下在fread，开始一边看源码，一边动态跟踪流程。
程序运行起来后，可以看到断在`_IO_fread`函数。在开始之前我们先看下FILE结构体fp的内容，从图里可以看到此时的`_IO_read_ptr`和`_IO_buf_base`等指针都还是空的，后面的分析一个很重要的步骤也是看这些指针是如何被赋值以及发挥作用的：
vtable中的指针内容如下：
fread实际上是`_IO_fread`函数，文件目录为`/libio/iofread.c`：
    _IO_size_t
    _IO_fread (void *buf, _IO_size_t size, _IO_size_t count, _IO_FILE *fp)
    {
      _IO_size_t bytes_requested = size * count;
      _IO_size_t bytes_read;
      ...
      # 调用_IO_sgetn函数
      bytes_read = _IO_sgetn (fp, (char *) buf, bytes_requested);
      ...
      return bytes_requested == bytes_read ? count : bytes_read / size;
    }
    libc_hidden_def (_IO_fread)
`_IO_fread`函数调用`_IO_sgetn`函数，跟进去该函数：
    _IO_size_t
    _IO_sgetn (_IO_FILE *fp, void *data, _IO_size_t n)
    {
      /* FIXME handle putback buffer here! */
      return _IO_XSGETN (fp, data, n);
    }
    libc_hidden_def (_IO_sgetn)
看到其调用了`_IO_XSGETN`函数，查看它定义：
    #define _IO_XSGETN(FP, DATA, N) JUMP2 (__xsgetn, FP, DATA, N)
实际上就是FILE结构体中vtable的`__xsgetn`函数，跟进去`/libio/fileops.c`：
    _IO_size_t
    _IO_file_xsgetn (_IO_FILE *fp, void *data, _IO_size_t n)
    {
      _IO_size_t want, have;
      _IO_ssize_t count;
      char *s = data;
      want = n;
      if (fp->_IO_buf_base == NULL)
        {
          ...
          # 第一部分，如果fp->_IO_buf_base为空的话则调用`_IO_doallocbuf`
          _IO_doallocbuf (fp);
        }
      while (want > 0)
        {
          have = fp->_IO_read_end - fp->_IO_read_ptr;
          if (want _IO_read_ptr, want);
          fp->_IO_read_ptr += want;
          want = 0;
        }
          else
        {
          if (have > 0)  ## 第二部分，输入缓冲区里有部分字符，但是没有达到fread的size需求，先把已有的拷贝至目标buff
            {
              ...
              memcpy (s, fp->_IO_read_ptr, have);
              s += have;
              want -= have;
              fp->_IO_read_ptr += have;
            }
          if (fp->_IO_buf_base
              && want _IO_buf_end - fp->_IO_buf_base))
            {
              if (__underflow (fp) == EOF)  ## 第三部分，输入缓冲区里不能满足需求，调用__underflow读入数据
             break;
              continue;
            }
          ...
      return n - want;
    }
    libc_hidden_def (_IO_file_xsgetn)
`_IO_file_xsgetn`是处理`fread`读入数据的核心函数，分为三个部分：
  * 第一部分是`fp->_IO_buf_base`为空的情况，表明此时的FILE结构体中的指针未被初始化，输入缓冲区未建立，则调用`_IO_doallocbuf`去初始化指针，建立输入缓冲区。
  * 第二部分是输入缓冲区里有输入，即`fp->_IO_read_ptr`小于`fp->_IO_read_end`，此时将缓冲区里的数据直接拷贝至目标buff。
  * 第三部分是输入缓冲区里的数据为空或者是不能满足全部的需求，则调用`__underflow`调用系统调用读入数据。
接下来对`_IO_file_xsgetn`这三部分进行跟进并分析。
###  初始化输入缓冲区
首先是第一部分，在`fp->_IO_buf_base`为空时，也就是输入缓冲区未建立时，代码调用`_IO_doallocbuf`函数去建立输入缓冲区。跟进`_IO_doallocbuf`函数，看下它是如何初始化输入缓冲区，为输入缓冲区分配空间的，文件在`/libio/genops.c`中：
    void
    _IO_doallocbuf (_IO_FILE *fp)
    {
      if (fp->_IO_buf_base) # 如何输入缓冲区不为空，直接返回
        return;
      if (!(fp->_flags & _IO_UNBUFFERED) || fp->_mode > 0) #检查标志位
        if (_IO_DOALLOCATE (fp) != EOF) ## 调用vtable函数
          return;
      _IO_setb (fp, fp->_shortbuf, fp->_shortbuf+1, 0);
    }
    libc_hidden_def (_IO_doallocbuf)
函数先检查`fp->_IO_buf_base`是否为空，如果不为空的话表明该输入缓冲区已被初始化，直接返回。如果为空，则检查`fp->_flags`看它是不是`_IO_UNBUFFERED`或者`fp->_mode`大于0，如果满足条件调用FILE的vtable中的`_IO_file_doallocate`，跟进去该函数，在`/libio/filedoalloc.c`中：
    _IO_file_doallocate (_IO_FILE *fp)
    {
      _IO_size_t size;
      char *p;
      struct stat64 st;
      ...
      size = _IO_BUFSIZ;
      ...
      if (fp->_fileno >= 0 && __builtin_expect (_IO_SYSSTAT (fp, &st), 0) >= 0) # 调用`_IO_SYSSTAT`获取FILE信息
       {
         ... 
         if (st.st_blksize > 0)
             size = st.st_blksize;
         ...
       }
     p = malloc (size);
     ...
     _IO_setb (fp, p, p + size, 1); # 调用`_IO_setb`设置FILE缓冲区
      return 1;
    }
    libc_hidden_def (_IO_file_doallocate)
可以看到`_IO_file_doallocate`函数是分配输入缓冲区的实现函数，首先调用`_IO_SYSSTAT`去获取文件信息，`_IO_SYSSTAT`函数是vtable中的`__stat`函数，获取文件信息，修改相应需要申请的size。可以看到在执行完`_IO_SYSSTAT`函数后，st结构体的值为：
因此size被修改为`st.st_blksize`所对应的大小0x1000，接着调用malloc去申请内存，申请出来的堆块如下：
空间申请出来后，调用`_IO_setb`，跟进去看它干了些啥，文件在`/libio/genops.c`中：
    void
    _IO_setb (_IO_FILE *f, char *b, char *eb, int a)
    {