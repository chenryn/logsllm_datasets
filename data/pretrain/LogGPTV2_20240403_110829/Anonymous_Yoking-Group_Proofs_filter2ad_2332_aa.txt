title:Anonymous Yoking-Group Proofs
author:Nan Li and
Yi Mu and
Willy Susilo and
Vijay Varadharajan
Anonymous Yoking-Group Proofs∗
Nan Li, Yi Mu, Willy Susilo
Centre for Computer and Information Security
School of Computer Science and Software
Engineering, University of Wollongong
Wollongong, Australia
{nl864,ymu,wsusilo}@uow.edu.au
Vijay Varadharajan
Information and Networked Systems Security
Research
Department of Computing, Faculty of Science
Macquarie University Sydney, Australia
PI:EMAIL
ABSTRACT
Yoking-proofs show an interesting application in Radio Fre-
quency Identiﬁcation (RFID) that a veriﬁer can check whe-
ther two tags are simultaneously scanned by a reader. We
consider a scenario that multi-group of tags can be proved to
be scanned simultaneously. Grouping-proof, which is an ex-
tension of yoking-proofs, allows multiple tags to be proved
together, while existing protocols cannot support multiple
groups. In this paper, we introduce a novel concept called
“yoking-group proofs”. Additionally, we propose an anony-
mous yoking-proof protocol and an anonymous yoking-group
proof protocol and prove their security in Universal Compos-
ability framework.
Categories and Subject Descriptors
D.4.6 [Security and Protection]: Authentication, Access
Control
General Terms
Security, Design
Keywords
RFID Security; Yoking Proof; Anonymity; UC Framework
1.
INTRODUCTION
A Radio Frequency Identiﬁcation (RFID) system com-
prises three essential components: RFID tags, RFID read-
ers and a backend server. An RFID tag is associated with a
unique identiﬁer, which is allocated by the backend server.
RFID has many practical applications, such as supply-chain
management and retail operations. Normally, both the reader
and the server are operated by a trusted party who initiates
tags. Although the reader can scan a bulk of tags together,
∗This work is supported by the Australian Research Council
Discovery Project DP110101951.
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
ASIA CCS’15, April 14–17, 2015, Singapore..
Copyright c(cid:13) 2015 ACM 978-1-4503-3245-3/15/04 ...$15.00.
http://dx.doi.org/10.1145/2714576.2714609..
there is no proof which can convince a veriﬁer the simulta-
neous presence of tags.
Juels [12] introduced the notion of yoking-proofs which
guarantee that two tags have been scanned simultaneously.
In the scenario, a veriﬁer who maintains a server and all
secret information of tags is considered as a trusted third
party. Yoking-proofs allow an untrusted party to control
a reader which can connect to the veriﬁer after a proof is
compiled. Two tags interact with the reader individually
and assume that tags cannot be directly linked during the
protocol run. The reader obtains a proof at the end of the
protocol and issues it to the veriﬁer who can be either oﬄine
or online.
The concept of yoking-proofs have been extended to group-
ing proofs by Saito and Sakurai [20] in 2005. Grouping-proof
protocols allow multiple tags cooperatively generate a proof
of simultaneous presence to the reader. During the proof,
any message from a tag shall be delivered by a reader to
another tag. An important task of a reader is to follow a
speciﬁc logical structure to communicate with tags as dif-
ferent structures may signiﬁcantly inﬂuence the security of
protocol.
Tag anonymity is an essential consideration of most RFID
authentication protocols [21, 5, 15, 13, 14].
In grouping-
proof protocols, preventing the tag or group’s identity from
leaking to an adversary is a challenging task if the protocol
intends to employ symmetric-key cryptography. Usually, a
symmetric-key based RFID authentication protocol requires
exhaustive key search during the tag authentication. To
check the validity of multiple tags without providing identi-
ties, eﬃciency problems will ensue as there are many possi-
ble combinations of tags and each tag cannot be considered
individually. Public key based protocols [1, 2, 10] enables
the veriﬁer to verify arbitrary anonymous groups without
overwhelming computational cost. However, low-cost pas-
sive tags usually cannot aﬀord these protocols due to the
extensive computation requirements and therefore, we do
not consider this type of solutions as it is rather expensive
and impractical.
1.1 Motivation
Although the gourping-proof can show the simultaneous
presence of a group of tags, in some scenarios, single group-
ing proof is insuﬃcient. For example, a warehouse which
stores a number of vehicles intends to prove the presence of
all goods to the owner. For each car, several tags are at-
tached to core components, such as the engine, brake and
lock system. A prover should show the presence of cars as
well as their integrity. Swapping components between vehi-
615cles is prevented, otherwise the product is no longer original.
Unfortunately, the grouping-proof can only show the pres-
ence of either all components or an individual car. Note
that each car is in a diﬀerent group since it intends to be
sold separately.
In addition, a car should be untraceable
after it has been sold. Thus, the authentication should be
anonymous that an unauthorized third party cannot obtain
tags’ identity during the protocol execution.
In the above scenario, a protocol which provides untrace-
ability and simultaneous presence of multi-group is neces-
sary. In this paper, we propose a solution that it not only
supports a single group veriﬁcation but also generates an
anonymous proof for multiple groups. Note that a trivial so-
lution from grouping-proof protocols is highly unlikely due
to the lack of inter-group communication. In the literature,
grouping-proof protocols usually interact with tags in a spe-
ciﬁc order which constructs a logical structure. To the best
of our knowledge, there are two main structures: ring and
yoking-style. Ring-based protocols [3, 4, 9, 6] start from
an initiator tag, then followed by the other tags and com-
plete the proof at the initiator. Regardless whether tags
share a group key or not, once an initiator has generated
a proof, it cannot interact with initiators of other groups.
In other words, we need to signiﬁcantly modify the protocol
to achieve the requirement. Existing protocols [20, 16, 11]
which adopt yoking-style proof generation can also hardly
accomplish a multi-group proof. These protocols usually
employ a pallet tag to collect responses from a bunch of
tags, then generate a proof by collaborating with another
tag. Eventually, the group proof is formed similarly as in
yoking proof. Therefore, to perform the multi-group proof,
an upper layer must be constructed.
1.2 Related Work
Two yoking-proofs were proposed in [12], while the proto-
col using minimalist MACs has been attacked by Saito and
Sakurai [20]. The concept of anonymous grouping-proof was
ﬁrstly presented by Bolotnyy and Robins [3]. Unfortunately,
the protocol statement is ambiguous that how to link tags
via their pseudonyms.
Huang and Ku [11] introduced a lightweight grouping-
proof which employs a pseudorandom number generator in
passive tags, however, the proposal is insecure as described
in [8]. Burmester, Medeiros and Motta [4] presented two
grouping-proof protocols which support the anonymity and
forward security. The protocols have been proved secure in
universal composability framework, while some ﬂaws were il-
lustrated later by Peris-Lopez, Orﬁla, Hernandez-Castro and
Lubbe [19]. Subsequently, some other anonymous grouping-
proof protocols were proposed in [18, 17, 1].
Recently, Burmester and Munilla [6] proposed an anony-
mous grouping-proof protocol which prevents an adversary
from linking two sessions of a target group. The protocol
considered that a group of tags is deﬁned as in a logical
ring. A speciﬁc framework was described. It allows a reader
to concurrently interact with tags. The proof of simultane-
ous presence is generated by a tag labeled with index 1 and
the proof is in constant size.
In grouping-proof, a reader is normally assumed as un-
trusted and the veriﬁer is oﬄine. If an online server is avail-
able, the grouping-proof is not hard since the veriﬁer can
setup a timer for a challenge. Even so, there are some pro-
tocols [16, 9] proposed for an online veriﬁer. Note that, we
only consider a system where online veriﬁer is unavailable.
1.3 Our Contributions
In this paper, we deﬁne a novel notion called yoking-group
proofs. It can be considered as an extension of both yoking-
proofs and grouping-proofs. Basically, yoking-group proofs
allow a veriﬁer to check the simultaneous scanning of mul-
tiple groups. Grouping-proof protocols guarantee a group
of tags have been authenticated together, while no existing
protocol supports authentication of multiple groups without
signiﬁcant modiﬁcations.
We propose two protocols: anonymous yoking-proofs and
anonymous yoking-group proofs. As a building block, our
anonymous yoking proof is a lightweight protocol which only
requires one hash computation in each tag during the pro-
tocol run. Our anonymous yoking-group proof provides the
evidence of simultaneous presence of multiple groups and
the size of a proof is irrelevant to the size of each group.
Unlike some previous work, there is no group key stored in
any tag, instead, the key is reconstructed at the end of pro-
tocol execution and it can only be checked by the veriﬁer.
Indeed, the yoking-proof is a special case of yoking-group
proofs where there is one tag in each group.
2. SYSTEM OVERVIEW
The yoking-group proof system consists of three entities:
RFID tags, reader and a veriﬁer.
Tag Ti: A paasive low-cost device which has a small storage
and limited computational capacity.
Reader Ri: A powerful device which is controlled by an
untrusted third party. Tag and veriﬁer’s secret infor-
mation is unknown to Ri.
Veriﬁer Vi: An oﬄine trusted third party (TTP) which
maintains all the keys and identities of groups.
In an anonymous yoking-group proof, a veriﬁer V creates
a group of tags that each tag shares a part of secret keys
with other tags. Each group has an individual group identi-
ﬁcation key which indicates the group’s identity. Note that
no individual tag holds the key of a group, instead, the key
is reconstructed during the protocol run.
In the protocol
execution, a reader ﬁrstly interrogates all the tags and col-
lects their indexes. Then, the reader constructs a logical key
structure based on the tag indexes and interacts with tags
in the speciﬁc order. Finally, the reader obtains a proof that
multiple groups are presented simultaneously and issues the
proof to the veriﬁer. However, the reader cannot extract any
private information, such as a tag’s identity and group’s key.
3. SECURITY AND PRIVACY MODELS
In this section, we deﬁne the security requirements and as-
sumptions. A yoking-group proof algorithm proves that pre-
deﬁned groups of tags have been simultaneously scanned.
To evaluate the security of our protocol, we shall deﬁne the
capacities of an adversary as follows.
Definition 1
(Adversary). We deﬁne capabilities of
adversaries as follows.
• An adversary A is allowed to capture all the interac-
tions between the interrogating reader and participating
tags.
616Functionality Fayp
Functionality Faygp
Upon receiving input Initiate at reader R: It ignores the request
if R is compromised. Otherwise, it generates a unique sub-
session identiﬁer s and replaces any existing init record by
init(s, R), and then outputs init.
Upon receiving input Initiate at tag Ti: It ignores the request if
Ti is compromised. Otherwise, it generates a unique sub-
session identiﬁer s(cid:48)
i and replaces any existing init records
by init(s(cid:48)
i, Ti) and deletes any record link, and then outputs
init.
Upon receiving input Link (s(cid:48)
i, s(cid:48)
init(s(cid:48)
init(s(cid:48)
j , Tj ) or link(s(cid:48)
i, Ti), records and outputs link(s(cid:48)
j , Tj ) and init(s(cid:48)
i, Ti).
j ) at tag Ti: If there are records
i, Ti), and then it deletes
Upon receiving input Prove(s, s(cid:48)
i, s(cid:48)
init(s, R),
proof(s, s(cid:48)
j ):
i, Ti) and link(s(cid:48)
link(s(cid:48)
j ), deletes all link records and outputs proof.
If there are records
then it records
j , Tj ),
i, s(cid:48)
Upon receiving input Initiate at reader R: It ignores the request
if R is compromised. Otherwise, it generates a unique sub-
session identiﬁer s and replaces any existing init record by
init(s, R), and then outputs init.
Upon receiving input Initiate at tag Ti, where i ≥ 1: It ignores
the request if Ti is compromised. Otherwise, it generates
a unique subsession identiﬁer s(cid:48)
i and replaces any existing
init records by init(s(cid:48)
i, Ti, i) and deletes any record link, and
then outputs init.
j , Tj , j) and init(s(cid:48)
j ) at tag Ti: If there are records
i, Ti, i), and then it
Upon receiving input Link (s(cid:48)
i, s(cid:48)
j , Tj , j) or link(s(cid:48)
init(s(cid:48)
deletes init(s(cid:48)
Upon receiving input Build(s(cid:48)
are records