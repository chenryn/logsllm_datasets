contribution of our work is the proposal of a novel physical-
core co-location test using contrived data races between two
threads running in the same enclave. Our design guarantees
that when the two threads run on co-located logical cores of
the same physical core, they will both observe data races on
a shared variable with a close-to-one probability. Our security
analysis and empirical evaluation suggest that the adversary
is not able to schedule the two threads on different physical
cores while keeping the same probability of data races that
are observed by the enclave threads. Performance evaluation
with nbench and the Intel SGX SSL library shows that the
performance overhead due to program instrumentation and
runtime co-location tests is modest.
192
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:38:29 UTC from IEEE Xplore.  Restrictions apply. 
X. ACKNOWLEDGMENTS
We would like to express our sincere thanks to our shepherd
Jay Lorch and the anonymous reviewers for their valuable
feedback to help us improve the paper. The work was sup-
ported in part by the NSF grants 1566444, 1750809, 1527141,
1408874, 1618493, 1718084, an NIH grant 1U01EB023685
and an ARO grant W911NF1610127.
REFERENCES
[1] Y. Xu, W. Cui, and M. Peinado, “Controlled-channel attacks: Determin-
istic side channels for untrusted operating systems,” in IEEE Symposium
on Security and Privacy.
IEEE, 2015, pp. 640–656.
[2] S. Shinde, Z. L. Chua, V. Narayanan, and P. Saxena, “Preventing page
faults from telling your secrets,” in 11th ACM on Asia Conference on
Computer and Communications Security. ACM, 2016, pp. 317–328.
[3] J. Van Bulck, N. Weichbrodt, R. Kapitza, F. Piessens, and R. Strackx,
“Telling your secrets without page faults: Stealthy page table-based
attacks on enclaved execution,” in USENIX Security Symposium, 2017.
[4] W. Wang, G. Chen, X. Pan, Y. Zhang, X. Wang, V. Bindschaedler,
H. Tang, and C. A. Gunter, “Leaky cauldron on the dark land: Un-
derstanding memory side-channel hazards in SGX,” in ACM SIGSAC
Conference on Computer and Communications Security, 2017.
[5] M. Schwarz, S. Weiser, D. Gruss, C. Maurice, and S. Mangard, Malware
Springer
guard extension: Using SGX to conceal cache attacks.
International Publishing, 2017.
[6] F. Brasser, U. M¨uller, A. Dmitrienko, K. Kostiainen, S. Capkun, and A.-
R. Sadeghi, “Software grand exposure: SGX cache attacks are practical,”
in USENIX Workshop on Offensive Technologies, 2017.
[7] M. H¨ahnel, W. Cui, and M. Peinado, “High-resolution side channels for
untrusted operating systems,” in USENIX Annual Technical Conference,
2017, pp. 299–312.
[8] J. G¨otzfried, M. Eckert, S. Schinzel, and T. M¨uller, “Cache attacks on
Intel SGX,” in EUROSEC, 2017, pp. 2–1.
[9] S. Lee, M.-W. Shih, P. Gera, T. Kim, H. Kim, and M. Peinado, “Inferring
ﬁne-grained control ﬂow inside SGX enclaves with branch shadowing,”
in USENIX Security Symposium, 2017, pp. 557–574.
[10] Y. Yarom and K. E. Falkner, “FLUSH+RELOAD: A high resolution, low
noise, L3 cache side-channel attack,” in USENIX Security Symposium,
2014, pp. 719–732.
[11] D. Gruss, R. Spreitzer, and S. Mangard, “Cache template attacks:
Automating attacks on inclusive last-level caches,” in USENIX Security
Symposium, 2015, pp. 897–912.
[12] G. Irazoqui, T. Eisenbarth, and B. Sunar, “S$A: A shared cache attack
that works across cores and deﬁes VM sandboxing—and its application
to AES,” in IEEE Symposium on Security and Privacy, May 2015.
[13] F. Liu, Y. Yarom, Q. Ge, G. Heiser, and R. B. Lee, “Last-level cache
side-channel attacks are practical,” in IEEE Symposium on Security and
Privacy.
IEEE, 2015, pp. 605–622.
[14] Y. Yarom and N. Benger, “Recovering OpenSSL ECDSA nonces using
the FLUSH+RELOAD cache side-channel attack,” in Cryptology ePrint
Archive, 2014.
[15] M. H¨ahnel, W. Cui, and M. Peinado, “High-resolution side channels for
untrusted operating systems,” in USENIX Annual Technical Conference,
2017, pp. 299–312.
[16] M.-W. Shih, S. Lee, T. Kim, and M. Peinado, “T-SGX: Eradicating
controlled-channel attacks against enclave programs,” in Network and
Distributed Systems Security (NDSS) Symposium, 2017.
[17] S. Chen, X. Zhang, M. K. Reiter, and Y. Zhang, “Detecting privileged
side-channel attacks in shielded execution with D´ej´a Vu,” in 12th ACM
on Asia Conference on Computer and Communications Security. ACM,
2017, pp. 7–18.
[18] O. Aciic¸mez, c. K. Koc¸, and J.-P. Seifert, “Predicting secret keys via
branch prediction,” in 7th Cryptographers’ track at the RSA conference
on Topics in Cryptology, 2007, pp. 225–242.
[19] O. Aciicmez and J.-P. Seifert, “Cheap hardware parallelism implies
cheap security,” in Workshop on Fault Diagnosis and Tolerance in
Cryptography, 2007, pp. 80–91.
[20] C. Percival, “Cache missing for fun and proﬁt,” in 2005 BSDCan, 2005.
[21] D. A. Osvik, A. Shamir, and E. Tromer, “Cache attacks and counter-
measures: the case of AES,” in 6th Cryptographers’ track at the RSA
conference on Topics in Cryptology, 2006, pp. 1–20.
[22] O. Aciic¸mez, “Yet another microarchitectural attack: exploiting I-
Cache,” in 2007 ACM workshop on Computer security architecture,
2007, pp. 11–18.
[23] O. Aciic¸mez, B. B. Brumley, and P. Grabher, “New results on instruc-
tion cache attacks,” in 12th international conference on Cryptographic
hardware and embedded systems, 2010, pp. 110–124.
[24] E. Tromer, D. A. Osvik, and A. Shamir, “Efﬁcient cache attacks on
AES, and countermeasures,” Journal of Cryptology, vol. 23, no. 1, pp.
37–71, 2010.
[25] Y. Yarom, D. Genkin, and N. Heninger, “CacheBleed: a timing attack on
OpenSSL constant-time RSA,” Journal of Cryptographic Engineering,
vol. 7, no. 2, pp. 99–112, 2017.
[26] “Intel 64 and IA-32 architectures software developer’s manual, combined
volumes:1,2A,2B,2C,3A,3B,3C and 3D,” https://software.intel.com/
sites/default/ﬁles/managed/39/c5/325462-sdm-vol-1-2abcd-3abcd.pdf,
2017, order Number: 325462-063US, July 2017.
[27] Y. Zhang, A. Juels, M. K. Reiter, and T. Ristenpart, “Cross-VM side
channels and their use to extract private keys,” in ACM conference on
Computer and communications security. ACM, 2012, pp. 305–316.
[28] B. S. Ahmad Moghimi, Thomas Eisenbarth, “MemJam: A false
dependency attack against constant-time crypto implementations,”
arXiv:1711.08002, 2017, https://arxiv.org/abs/1711.08002.
[29] D. Sullivan, O. Arias, T. Meade, and Y. Jin, “Microarchitectural
mineﬁelds: 4k-aliasing covert channel and multi-tenant detection in
IaaS clouds,” in Network and Distributed Systems Security (NDSS)
Symposium, 2018.
[30] D. Gruss, J. Lettner, F. Schuster, O. Ohrimenko, I. Haller, and M. Costa,
“Strong and efﬁcient cache side-channel protection using hardware
transactional memory,” in USENIX Security Symposium, 2017, pp. 217–
233.
[31] M. F. Chowdhury and D. M. Carmean, “Method, apparatus, and system
for maintaining processor ordering by checking load addresses of
unretired load instructions against snooping store addresses,” Nov. 19
2002, US Patent 6,484,254.
[32] “Intel
software guard extensions programming reference,” https:
//software.intel.com/sites/default/ﬁles/managed/48/88/329298-002.pdf/,
2014, order Number: 329298-002, October 2014.
[33] A. Mazouz, A. Laurent, B. Pradelle, and W. Jalby, “Evaluation of
CPU frequency transition latency,” Computer Science - Research and
Development, vol. 29, no. 3, pp. 187–195, Aug 2014.
[Online].
Available: https://doi.org/10.1007/s00450-013-0240-x
[34] Clang: a C language family frontend for LLVM. http://clang.llvm.org/.
[35] The LLVM compiler infrastructure. https://llvm.org/.
http://www.math.cmu.edu/∼ﬂorin/
[36] Nbench-byte
benchmarks.
[37] Intel
software
guard
extensions
SSL.
https://github.com/intel/
bench-32-64/nbench/.
intel-sgx-ssl.
[38] Y. Zhang, A. Juels, A. Oprea, and M. K. Reiter, “HomeAlone: Co-
residency detection in the cloud via side-channel analysis,” in IEEE
Symposium on Security and Privacy, 2011.
[39] T. Ristenpart, E. Tromer, H. Shacham, and S. Savage, “Hey, you, get
off of my cloud: Exploring information leakage in third-party compute
clouds,” in ACM Conference on Computer and Communications Secu-
rity, 2009.
[40] V. Varadarajan, Y. Zhang, T. Ristenpart, and M. Swift, “A placement
vulnerability study in multi-tenant public clouds,” in USENIX Security
Symposium, 2015.
[41] T. Zhang, Y. Zhang, and R. B. Lee, “Dos attacks on your memory in
cloud,” in 12th ACM on Asia Conference on Computer and Communi-
cations Security. ACM, 2017.
[42] Y. Zhang and M. K. Reiter, “D¨uppel: retroﬁtting commodity operating
systems to mitigate cache side channels in the cloud,” in ACM Confer-
ence on Computer and Communications Security, 2013, pp. 827–838.
193
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:38:29 UTC from IEEE Xplore.  Restrictions apply. 
INTEL MICROPROCESSORS WITH SGX SUPPORT
APPENDIX A
SGX support as of Oct 2017. Note that although some of the processors support SGX, the feature may not be enabled by
default by system manufacturer in UEFI. Processors marked with (cid:3) have Hyper-Threading (HT) support.
Generation
Family
Model
TABLE VIII: Intel CPU with SGX support
E3-1575M V5 (cid:2)
E3-1268L V5 (cid:2)
E3-1230 V5 (cid:2)
E3-1545M V5 (cid:2)
E3-1260L V5 (cid:2)
E3-1225 V5
Skylake
Xeon
Pentium
Celeron
Core
Pentium
Celeron
Kabylake
Core
Xeon
Coffee Lake
Core
G4400TE
G4400
G3902E
3955U
i3-6006U (cid:2)
i7-6970HQ (cid:2)
i7-6822EQ (cid:2)
i3-6100E (cid:2)
i7-6700HQ (cid:2)
i5-6360U (cid:2)
i5-6287U (cid:2)
m3-6Y30 (cid:2)
i5-6500T
i3-6100 (cid:2)
4415Y (cid:2)
4415U (cid:2)
3965Y
3965U
i3-7130U (cid:2)
i7-7700HQ (cid:2)
i7-7567U (cid:2)
i5-7500T
i5-7360U (cid:2)
i5-7Y57 (cid:2)
i3-7101E (cid:2)
i3-7100H (cid:2)
i5-7Y54 (cid:2)
E3-1515M V5 (cid:2)
E3-1245 V5 (cid:2)
E3-1220 V5
4405U (cid:2)
E3-1280 V5 (cid:2)
E3-1240L V5 (cid:2)
E3-1505L V5 (cid:2)
G4500
E3-1275 V5 (cid:2)
E3-1240 V5 (cid:2)
E3-1535M V5 (cid:2)
G4500T
E3-1270 V5 (cid:2)
E3-1235L V5
E3-1505M V5 (cid:2)
G4520
G3920
G3900TE
G3900T
G3900
i7-6785R (cid:2)
i7-6770HQ (cid:2)
i7-6700TE (cid:2)
i3-6100TE (cid:2)
i7-6600U (cid:2)
i5-6300U (cid:2)
i3-6167U (cid:2)
i7-6700 (cid:2)
i5-6400T
i7-6700K (cid:2)
G4600 (cid:2)
i5-6685R
i5-6350HQ (cid:2)
i5-6500TE
i7-6920HQ (cid:2)
i7-6560U (cid:2)
i5-6200U (cid:2)
m7-6Y75 (cid:2)
i5-6600
i3-6300 (cid:2)
i5-6600K
G4620 (cid:2)
i5-6585R
i5-6402P
i5-6440EQ
i7-6820HQ (cid:2)
i7-6500U (cid:2)
i5-6260U (cid:2)
m5-6Y57 (cid:2)
i5-6600T
i3-6300T (cid:2)
i7-6567U (cid:2)
G4560T (cid:2)
G3930E
G3950
G3930T
i7-7920HQ (cid:2)
i7-7700K (cid:2)
i5-7600K
i5-7440HQ
i5-7300HQ
i3-7320 (cid:2)
i3-7100T (cid:2)
i7-7Y75 (cid:2)
i7-7820HQ (cid:2)
i7-7700T (cid:2)
i5-7600T
i5-7440EQ
i5-7287U (cid:2)
i3-7300 (cid:2)
i3-7100E (cid:2)
i5-7200U (cid:2)
i7-7820HK (cid:2)
i7-7660U (cid:2)
i5-7600
i5-7400T
i5-7267U (cid:2)
i3-7300T (cid:2)
i3-7100 (cid:2)
i3-7100U (cid:2)
i7-6660U (cid:2)
i3-6098P (cid:2)
i5-6442EQ
i7-6820HK (cid:2)
i5-6440HQ
i5-6267U (cid:2)
m5-6Y54 (cid:2)
i5-6500
i3-6320 (cid:2)
G4560 (cid:2)
G3930
i7-7820EQ (cid:2)
i7-7600U (cid:2)
i5-7500
i5-7400
i5-7260U (cid:2)
i3-7102E (cid:2)
i3-7167U (cid:2)
m3-7Y30 (cid:2)
4405Y (cid:2)
G4400T
G3900E
3855U
i3-6157U (cid:2)
i7-6870HQ (cid:2)
i7-6820EQ (cid:2)
i3-6102E (cid:2)
i7-6650U (cid:2)
i5-6300HQ
i3-6100H (cid:2)
i7-6700T (cid:2)
i5-6400
i3-6100T (cid:2)
G4600T (cid:2)
4410Y (cid:2)
G3930TE
3865U
m3-7Y32 (cid:2)
i7-7700 (cid:2)
i7-7560U (cid:2)
i5-7442EQ
i5-7300U (cid:2)
i3-7350K (cid:2)
i3-7101TE (cid:2)
i7-7500U (cid:2)
E3-1285 V6 (cid:2)
E3-1245 V6 (cid:2)
E3-1505M V6 (cid:2)
i7-8700 (cid:2)
i7-8650U (cid:2)
E3-1501L V6
E3-1240 V6 (cid:2)
E3-1505L V6 (cid:2)
i7-8700K (cid:2)
i7-8550U (cid:2)
E3-1501M V6
E3-1230 V6 (cid:2)
E3-1280 V6 (cid:2)
E3-1225 V6
E3-1275 V6 (cid:2)
E3-1220 V6
E3-1270 V6 (cid:2)
E3-1535M V6 (cid:2)
i5-8600K
i5-8350U (cid:2)
i5-8400
i5-8250U (cid:2)
i3-8350K
i3-8100
194
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:38:29 UTC from IEEE Xplore.  Restrictions apply.