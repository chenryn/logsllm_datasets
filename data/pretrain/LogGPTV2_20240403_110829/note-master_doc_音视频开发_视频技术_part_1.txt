# 视频技术
![2023312145123](/assets/2023312145123.webp)
## 视频基础
### 色彩格式
- GRAY 色彩空间：使用8位数据的来表示颜色
![GRAY](/assets/2022111194755.webp)
- YUV 色彩空间：Y 表示视频的灰阶值、UV 表示色彩度
![YUV图像示例](/assets/2022111195043.webp)
![yuv420格式表示宽度为 6、高度为 4的图像](/assets/2022111195138.webp)
- RGB 色彩空间：使用三个 8 位无符号整数（0 到 255）表示红色、绿色和蓝色的强度
![2022111195211](/assets/2022111195211.webp)
- HSL 和 HSV 色彩空间
  - HSL，就是色相（Hue）、饱和度（ Saturation）、亮度（ Lightness）
  - HSV 是色相（Hue）、饱和度（ Saturation）和明度（Value）
色相（H）是色彩的基本属性，就是颜色名称，如红色、黄色等；饱和度（S）是指色彩的纯度，越高色彩越纯，低则逐渐变灰，取 0～100% 的数值；明度（V）和亮度（L），同样取 0～100% 的数值
![2022111195421](/assets/2022111195421.webp)
### 色彩空间
> 也叫色域，指某种表色模式用所能表达的颜色构成的范围区域
### 帧率
> 一秒钟刷新的视频图像帧数
### 码率
> 指视频在单位时间内的数据量的大小，一般是 1 秒钟内的数据量，其单位一般是 Kb/s 或者 Mb/s
### 分辨率
> 分辨率通常由宽、高与像素点占用的位数组成，计算方式为图像的宽乘以高
### Stride
指的是图像存储时内存中每行像素所占用的空间，为了能够快速读取一行像素，我们一般会对内存中的图像实现内存对齐，比如 16 字节对齐
![2023312145940](/assets/2023312145940.webp)
如果读取时没有跳过这些填充的区域，那么渲染出来的图像就完全错了，产生花屏
### 缩放算法
目前绝大多数图像的缩放还是通过插值算法：都是使用周围已有的像素值通过一定的加权运算得到“插值像素值”
![2023312152254](/assets/2023312152254.webp)
插值算法：
- 最近邻插值：将目标图像中的目标像素位置，映射到原图像的映射位置；找到原图像中映射位置周围的 4 个像素；取离映射位置最近的像素点的像素值作为目标像素
  - 得到的放大图像大概率会出现块状效应，而缩小图像容易出现锯齿
- 双线性插值：先通过两次线性插值得到两个中间值，然后再通过对这两个中间值进行一次插值得到最终的结果
  - 取待插值像素周围的 4 个像素，将这 4 个像素值插值得到中间像素 m 和 n 的像素值，再对这m n插值，得到最终的像素值
![2023312152848](/assets/2023312152848.webp)
- 双三次插值：通过 BiCubic 基函数计算得到待插值像素周围 16 个像素的权重，然后将 16 个像素加权平均就可以得到最终的待插值像素
## 视频编码
### 原理
视频由一帧帧图象个构成，而对于每一帧图像，又是划分成一个个块来进行编码
图像一般都是有数据冗余：
- 空间冗余：相邻的块很多时候都有比较明显的相似性
- 时间冗余：两帧图像的变化是比较小的
- 视觉冗余：人眼对图像中的高频信息不敏感
- 信息熵冗余：即文件压缩
#### 帧内预测
在当前编码图像内部已经编码完成的块中找到与将要编码的块相邻的块，再用编码块减去每一个预测块得到一个个残差块。最后，我们取这些算法得到的残差块中像素的绝对值加起来最小的块为预测块
帧又是由一块块数据组成的，对于块有如下规则：
- 宏块大小是 16 x 16，其中亮度块为 16 x 16，色度块为 8 x 8
- 亮度块和色度块是分开独立进行预测的
- 16 x 16 的亮度块可以继续划分成 16 个 4 x 4 的子块
在实际帧内预测的时候就会分为：4 x 4 亮度块的预测、16 x 16 亮度块的预测、8 x 8 色度块的预测
4 x 4 亮度块的 9 种预测模式：
1. Vertical 模式：当前编码亮度块的每一列的像素值，都是复制上边已经编码块的最下面那一行的对应位置的像素值
2. Horizontal 模式：当前编码亮度块的每一行的像素值，都是复制左边已经编码块的最右边那一列的对应位置的像素值
3. DC 模式：当前编码亮度块的每一个像素值，是上边已经编码块的最下面那一行和左边已编码块右边最后一列的所有像素值的平均值
4. Diagonal Down-Left 模式：上边块和右上块的像素通过插值得到
5. Diagonal Down-Right 模式：过上边块、左边块和左上角对角的像素通过插值得到。如果这三个有一个不存在则该模式无效
6. Vertical-Right 模式：通过上边块、左边块以及左上角对角的像素插值得到的。必须要这三个都有效才能使用，否则该模式无效
7. Horizontal-Down 模式：通过上边块、左边块以及左上角对角的像素插值得到。必须要这三个都有效才能使用，否则该模式无效
8. Vertical-Left 模式：通过上边块和右上块最下面一行的像素通过插值得到
9. Horizontal-Up 模式：通过左边块的像素通过插值得到的。如果左边块不存在，则该模式不可用
16 x 16 亮度块总共有4种预测模式。它们分别是Vertical模式，Horizontal模式、DC 模式和Plane 模式
8 x 8 色度块的帧内预测模式：DC 模式、Vertical 模式，Horizontal 模式、Plane 模式
#### 帧间预测
- 帧间预测是在其他已经编码的图像中去寻找参考像素块的
- 帧间预测是可以在多个已经编码的图像里面去寻找参考像素块的
- 帧间预测既可以参考前面的图像也可以参考后面的图像,只参考前面图像的帧我们称为P 帧,参考后面的图像或者前面后面图像都参考的帧叫做 B 帧
帧间预测的块划分类型要多很多。宏块大小 16 x 16，可以划分为 16 x 8，8 x 16， 8 x 8 三种，其中 8 x 8 可以继续划分成 8 x 4，4 x 8 和 4 x 4
通常在 RTC 场景中,P 帧中的所有块都参考同一个参考帧。并且一般会选择当前编码帧的前一帧来作为参考帧,这是由图像运动的局部性原理导致的：自然界的运动一般是连续的，同时在短时间之内的变化相对比较小，在这种参考里，会使用**运动矢量**来表示参考块在上一帧以及当前帧的相对位置
为了找到参考块，就必须遍历参考帧中的每块图像块，找到残差块值最小的那块图像作为参考块，为了提高搜索参考块的效率，有钻石搜索算法、六边形搜索算法提高搜索效率，这些算法的基本原理还是利用了运动的局部性原理，就是在编码块的附近进行搜索，结果可能是局部最优，而非全局最优，但相比全搜索算法拥有很高的时间效率
![钻石搜索算法](/assets/20230319140405.webp)
![六边形搜索算法](/assets/20230319140511.webp)
由于图像块移动的便宜可能跟图像块大小匹配不上，所以需要通过插值的方式计算这种移动一半的图像，计算方式称之为亚像素插值，插值完成之后就可以继续进行运动搜索了
图像块的运动矢量并不是直接编码到视频流中，而是通过周围相邻块的运动矢量预测一个预测运动矢量，称为 MVP。将当前运动矢量与 MVP 的残差称之为 MVD，然后编码到码流中去，MVP+MVD 就是运动矢量