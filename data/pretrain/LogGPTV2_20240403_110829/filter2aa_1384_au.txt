Mimikatz extension doesn’t bear any fruit, all is not yet lost. It may be possible to
obtain cached credentials from users who have logged in to the system in the past.
8.4
Harvesting domain cached credentials
Another useful Windows feature that is often exploited by attackers is Windows’ ability
to store cached credentials locally for domain accounts. These cached credentials are
hashed using a hashing function separate from NTLM: mscache or mscache2 for older
and newer versions of Windows, respectively. The idea behind caching credentials
makes sense from a usability point of view.
 Suppose you are an IT administrator, and you have to support users who take their
computers home after work. When your users open their laptops at home, they are
not connected to the corporate domain controller and can’t authenticate using
domain credentials. Of course, the appropriate way to solve this challenge would be to
set up a virtual private network (VPN), but that’s a topic for another discussion. An
alternative solution is to implement domain cached credentials.
 The folks at Microsoft opted to allow Windows systems to store the mscache or
mscache2 hashed version of domain users’ passwords locally. This way, an employee
working remotely can log in to their workstation even if it isn’t connected to the cor-
porate network using Active Directory credentials.
 These cached domain account password hashes are stored similarly to local account
password hashes in a Windows registry hive. The SECURITY hive keeps track of a fixed
number of cached user accounts, as specified in the CachedLogonsCount registry key
located in the HKLM\Software\Microsoft\Windows NT\CurrentVersion\Winlogon
key. You can check out this Windows Docs page for more information about registry
hives: http://mng.bz/EEao.
8.4.1
Using the Meterpreter post module
Just as with local user account password hashes, Metasploit has a post module called
post/windows/gather/cachedump that can be used in an active Meterpreter session.
Type the command run post/windows/gather/cachedump to use the post module to
extract domain cached credentials from a compromised host.
meterpreter > run post/windows/gather/cachedump
[*] Executing module against TIEN
[*] Cached Credentials Setting:  - (Max is 50 and 0 default)
[*] Obtaining boot key...
[*] Obtaining Lsa key...
[*] Vista or above system
[*] Obtaining NL$KM...
[*] Dumping cached credentials...
[*] Hash are in MSCACHE_VISTA format. (mscash2)
Listing 8.5
Harvesting domain cached credentials 
144
CHAPTER 8
Windows post-exploitation
[+] MSCACHE v2 saved in: 
/home/royce/.msf4/loot/20191120122849_default_mscache2.creds_608511.txt
[*] John the Ripper format:
# mscash2
tien:$DCC2$10240#tien#6aaafd3e0fd1c87bfdc734158e70386c::
meterpreter >
Table 8.2 outlines all of the important pieces of information displayed by the cached-
ump post module.
8.4.2
Cracking cached credentials with John the Ripper
Unfortunately, we can’t use the Pass-the-Hash technique with cached domain hashes
due to how remote authentication works in Windows. These hashes are still useful,
though, because we can crack them using a password-cracking tool. In this section we’ll
use a simple password cracking tool called John the Ripper. 
 If you’ve never learned about password cracking, it’s actually a straightforward pro-
cess. You start with an encrypted or hashed password that you want to crack. You then
provide a list of words called a dictionary and tell your password-cracking program to
hash or encrypt each word and compare it to the value you’re trying to break. When the
two values match, you know you’ve successfully cracked the password. To install John the
Ripper, grab the latest source code from GitHub with git clone https://github
.com/magnumripper/JohnTheRipper.git. Change into the src directory, and run
./configure to prepare the source. After that completes, run make -s clean && make
-sj4 to compile the binaries.
git clone https://github.com/magnumripper/JohnTheRipper.git
Cloning into 'JohnTheRipper'...
remote: Enumerating objects: 18, done.
remote: Counting objects: 100% (18/18), done.
remote: Compressing objects: 100% (17/17), done.
remote: Total 91168 (delta 2), reused 4 (delta 1), pack-reused 91150
Receiving objects: 100% (91168/91168), 113.92 MiB | 25.94 MiB/s, done.
Table 8.2
Domain cached credential components
Represented value
Example from listing 8.5
Username
tien
Type of hash (DCC or DCC2)
DCC2
Active Directory UID
10240
Username
tien
Hashed password
6aaafd3e0fd1c87bfdc734158e70386c
Listing 8.6
Installing John the Ripper from source
A single cached domain 
account password hash
145
Harvesting domain cached credentials
Resolving deltas: 100% (71539/71539), done.
cd JohnTheRipper/src
./configure             
make -s clean && make -sj4   
To use John to attempt to crack the cached domain credentials, you first need to place
them in a file. Create a file called cached.txt, and paste in the contents of your cached
domain hashes obtained from the Metasploit post module. Using the example from
listing 8.5, the file would contain the following:
tien:$DCC2$10240#tien#6aaafd3e0fd1c87bfdc734158e70386c::
You can now start to brute-force attempt randomly generated passwords against this file
by navigating into the JohnTheRipper directory and typing the following command:
 ./run/john –format=mscash2 cached.txt. Brute force means you start with a char-
acter set. The full character set for a US standard keyboard includes a–z, A–Z, 0–9,
and all the special characters. Using the set of characters you specify, John program-
matically iterates through every possible combination of characters that can be made
for a given password length. For example, when brute-force guessing a three-character
password using only lowercase alphabet characters, you would try aaa, aab, aac, aad . . .
all the way to zzz. The formula for determining how many possibilities there are is the
number of individual characters in the character set raised to the power of the pass-
word length you’re trying to guess.
 So, if you wanted to brute-force all possible 8-character passwords using uppercase
letters, lowercase letters, and numbers (26 + 26 + 10 = 62), you would have to guess
62 × 62 × 62 × 62 × 62 × 62 × 62 × 62 = 218 trillion possible passwords. Increase the
password length from 8 to 10 characters, and the number goes up to 839 quadrillion.
Using default input encoding: UTF-8
Loaded 1 password hash (mscash2, MS Cache Hash 2 (DCC2) [PBKDF2-SHA1
256/256 AVX2 8x])
Will run 2 OpenMP threads
Proceeding with single, rules:Single
Press 'q' or Ctrl-C to abort, almost any other key for status
Warning: Only 2 candidates buffered for the current salt, minimum 16 needed
for performance.
Almost done: Processing the remaining buffered candidate passwords, if any.
Proceeding with wordlist:./run/password.lst
0g 0:00:00:11 27.93% 2/3 (ETA: 12:40:26) 0g/s 4227p/s 4227c/s 4227C/s
rita5..transfer5yes
Proceeding with incremental:ASCII 
Listing 8.7
Running John the Ripper without a dictionary file
Configures the source packages
Makes and installs John the Ripper
Performing incremental ASCII-
based brute-force guessing
146
CHAPTER 8
Windows post-exploitation
The brute-force method is painfully slow when strong passwords are in use because it
literally has to attempt every possible combination of letters, numbers, and special
characters. Theoretically, if given enough time, this method is guaranteed to produce
the correct password eventually; however, based on the size and complexity of the pass-
word you are trying to crack, it could take millennia or eons to guess the right combi-
nation. You shouldn’t completely discount raw brute-forcing, though, because people
come up with surprisingly weak passwords that can be brute-forced easily. That said, it
isn’t practical most of the time without using a multiple-GPU password-cracking rig,
which is a topic that is beyond the scope of this chapter.
 A more practical approach is to use a dictionary file containing common words and
guess only the words in the list. Since the password you’re trying to crack was thought
up by a human (presumably), it has a better-than-average chance of containing human-
readable text rather than randomly generated numbers letters and symbols. 
8.4.3
Using a dictionary file with John the Ripper
The internet is full of useful dictionary files, some of them tens of gigabytes in size
containing trillions of entries. As you would expect, the larger the dictionary file, the
longer it takes to get through the list. You could have a dictionary file that was so large
it would reach a point of diminishing returns, in which case you might as well brute-
force an entire character set.
 There is a somewhat famous dictionary file called the Rockyou dictionary that’s a
favorite among hackers and pentesters. It’s a lightweight file containing a bit more
than 14 million passwords that have been collected throughout various publicly dis-
closed password breaches from real companies. If you are trying to crack a lot of pass-
word hashes, there is a strong possibility that at least one of them exists in the
Rockyou dictionary. Download the .txt file to your attacking machine using this URL:
http://mng.bz/DzMn. Use wget to download the file from a terminal window; notice
the size of the file after it’s downloaded.
--2019-11-20 12:58:12--  https://github.com/brannondorsey/naive
hashcat/releases/download/data/rockyou.txt
Resolving github.com (github.com)... 192.30.253.113
Connecting to github.com (github.com)|192.30.253.113|:443... connected.
HTTP request sent, awaiting response... 302 Found
Connecting to github-production-release-asset-2e65be.s3.amazonaws.com
(github-production-release-asset
2e65be.s3.amazonaws.com)|52.216.104.251|:443... connected.
HTTP request sent, awaiting response... 200 OK
Length: 139921497 (133M) [application/octet-stream]
Saving to: 'rockyou.txt'
2019-11-20 12:58:18 (26.8 MB/s) - ‘rockyou.txt’ saved [139921497/139921497]
Once you’ve downloaded the Rockyou dictionary, you can rerun the John the Ripper
command. But this time, add the --wordlist=rockyou.txt option to the command
Listing 8.8
Downloading the rockyou.txt dictionary file
The rockyou.txt file 
is 133 MB of text.
147
Harvesting credentials from the filesystem
at runtime to tell John not to brute-force random characters but instead to guess the
passwords in the dictionary you provided:
~$ ./run/john --format=mscash2 cached.txt --wordlist=rockyou.txt 
In the case of the Capsulecorp pentest, we’re in luck: the password was in the file, as
shown in the following output. In just over eight minutes, John found that the pass-
word for the tien domain account is Password82$:
Using default input encoding: UTF-8
Loaded 1 password hash (mscash2, MS Cache Hash 2 (DCC2) [PBKDF2-SHA1
256/256 AVX2 8x])
Will run 2 OpenMP threads
Press 'q' or Ctrl-C to abort, almost any other key for status
Password82$      (tien)       
1g 0:00:08:30 DONE (2019-11-21 11:27) 0.001959g/s 4122p/s 4122c/s 4122C/s
Patch30..Passion7
Use the "--show --format=mscash2" options to display all of the cracked
passwords reliably
Session completed
Of course, you won’t always get lucky and crack the hash you’re trying to break in
eight minutes, or at all. Password cracking is a numbers game; the more hashes you
obtain from users, the greater your chances that one of the users has a bad password.
In most cases, users do the bare minimum when it comes to password complexity
because people are typically annoyed by having to set complex passwords in the first
place. If the organization you’re targeting has a weak password policy, you’ll likely
have success with password cracking.
 Password cracking is a useful skill for pentesters to have. That said, it isn’t the only
way to obtain credentials that can be used to access level-two hosts. It’s also possible
and surprisingly common to find credentials written in clear text stored somewhere
on the filesystem; you just have to know where and how to look for them.
8.5
Harvesting credentials from the filesystem
Easily one the most underrated (and possibly most tedious) activities is pilfering
through the filesystem of a compromised target looking for juicy bits of information
like usernames and passwords. This concept is analogous to somebody breaking into
your home and rifling through papers on your desk looking for anything they can
find, such as a sticky note with your computer password or a bank statement with wire-
transfer routing instructions. 
 Just as a home invader would intuitively search common places where people are
likely to hide things, Windows computer systems contain files and folders that are
commonly used to store credentials. There’s no guarantee that you’ll find something
on every system you check, but you will find things often enough that you should
always look, especially if you haven’t had success elsewhere.
Specifies the --wordlist option to
tell John where the dictionary is
The password was cracked because
it was in the dictionary file.
148
CHAPTER 8
Windows post-exploitation
 First, consider what the system you are trying to compromise is being used for. For
example, does it have a web server? If so, can you decipher from the HTTP headers
what type of web server it is? Web servers are almost always used in conjunction with a
backend database. Because the web server needs to be able to authenticate to the
backend database, it’s not uncommon to find configuration files containing clear-text
database credentials. As you discovered in chapter 6, having valid database credentials
can be a great way to compromise a target system remotely.
 Rather than try to memorize all of the different file paths where you might find an
instance of IIS, Apache, or another web server installed, it’s easier to learn the names
of useful files that often contain database credentials and then use the Windows find
command to search the filesystem for these files (see table 8.3).
Additionally, you may find arbitrary files in users’ home directories. Users frequently
store passwords in clear-text Word documents and text files. You won’t know the name
of the file in advance, and sometimes there is no substitution for manually investigating
the contents of every file in a user’s home directory. That said, when you do know what
you are looking for, a couple of useful Windows commands can help you: findstr and
where are two great examples.
8.5.1
Locating files with findstr and where
Now that you know which files to look for, the next concept to understand is how to
locate them. Presumably you won’t have graphical user interface (GUI) access to com-
promised targets, so opening Windows File Explorer and using the search bar proba-
bly is not an option. But Windows has a command-line tool that works just as well: the
findstr command.
 The findstr command has two use cases on a pentest. The first is if you want to
find all files on the filesystem that contain a given string such as “password=”. The sec-
ond is to locate a specific file such as tomcat-users.xml. The following command
searches the entire filesystem for any files that contain the string “password=”:
findstr /s /c:"password="
Table 8.3
Configuration files containing credentials
Filename
Service
web.config
Microsoft IIS
tomcat-users.xml
Apache Tomcat
config.inc.php
PHPMyAdmin
sysprep.ini
Microsoft Windows
config.xml
Jenkins
Credentials.xml
Jenkins
149
Moving laterally with Pass-the-Hash
The /s flag tells findstr to include subdirectories, /c: tells findstr to begin the
search at the root of the C: drive, and "password=" is the text string you want findstr
to search for. Be prepared for the command to take a long time because it is literally
looking for your string in the contents of every file on the system. It’s obviously very
thorough, but the trade-off is that it can be a slow process. Depending on your situa-
tion, it may be more advantageous to first locate specific files and then use findstr to
search their contents. This is where the where command comes in handy. Using table
8.3 as a reference point, if you want to locate the file tomcat-users.xml, which might
contain clear-text credentials, you can use the where command like this:
where /r c:\ tomcat-users.xml
The where command is much faster because it doesn’t need to work nearly as hard.
The /r option tells where to search recursively, c:\ tells it to begin the search at the
root of the C: drive, and tomcat-users.xml is the name of the file to locate. Either
method—findstr or where—will work well, depending on whether you’re searching
for a specific filename or a file containing a particular string.
8.6
Moving laterally with Pass-the-Hash
As mentioned in previous chapters, Windows’ authentication mechanisms allow users
to authenticate without providing a clear-text password. Instead, if a user has the 32-
character NTLM hashed equivalent of a password, that user is permitted to access the
Windows system. This design characteristic, in combination with the fact that IT and
systems administrators often reuse passwords, presents an opportunistic attack vector
for hackers and pentesters alike. This technique is referred by the cheeky name Pass-
the-Hash or passing-the-hash. 
 The concept behind this attack vector is as follows: 
1
You have successfully managed to compromise one or more Windows systems
(your level-one targets) because of a vulnerability that you discovered during
information gathering. 
2
You have extracted the local user account password hashes to the Windows systems.
3
You want to see if you can use the passwords to log in to adjacent network hosts
(level-two targets). 
This is particularly rewarding from a pentester’s perspective because if it weren’t for
the shared credentials, you might not have been able to access these adjacent hosts
(since they weren’t affected by any discoverable vulnerabilities or attack vectors). As I
mentioned earlier, in the spirit of gamification and keeping this fun and interesting, I
like to refer to these newly accessible targets as level-two targets. If it helps the illustra-
tion, think of a Zelda-style video game: you’ve moved around the board, killed all the
monsters you could, and, after finally gaining access to a special key, unlocked a new
area to explore—level two, if you will. 
150
CHAPTER 8
Windows post-exploitation
 Once again, you can use the Meterpreter shell you obtained in the previous chap-
ter to harvest the local user account password hashes by issuing the hashdump com-
mand from the Meterpreter prompt, as follows:
meterpreter > hashdump
Administrator:500:aad3b435b51404eeaad3b435b51404ee:c1ea09ab1bab83a9c9c1f1c
66576737:::