### Overview
Currently, there is no mechanism for socket types outside the standard library to access the runtime network poller. If this proposal is accepted, it would resolve issue #10565 by enabling external packages to leverage the runtime network poller instead of implementing their own network polling mechanisms.

### Proposed Change
I propose adding a new API to the `net` package that allows the registration of arbitrary sockets for use with the runtime network poller. The design of this API is based on a comment from @rsc in issue #11492:

> "It seems to me that the net package should just keep using (and providing) only FileConn, but perhaps we can put a registration mechanism in the `syscall` package to let clients register converters between `sockaddrs` and `net.Addr` for non-standard `sockaddr` types."

After some experimentation, I have developed a prototype that works on a Linux system. The parameter list is still under consideration, but efforts will be made to ensure the mechanism is as generic and cross-platform friendly as possible. However, immediate implementation on non-UNIX platforms may not be feasible. From my observations, `syscall.Sockaddr` appears to be available on all platforms.

#### API Design

```go
package net

// RegisterSocket is a registration mechanism that can be called in `init()` or `main()`
// when a socket is first initialized.
func RegisterSocket(
    family int,
    sockaddr syscall.Sockaddr,
    addr Addr,
    convertSockaddr func(syscall.Sockaddr) Addr,
    convertNetAddr func(Addr) syscall.Sockaddr,
)

// SocketConn is a generic `net.Conn` and `net.PacketConn` implementation that embeds the
// internal `net.conn` type. It checks for registered socket hooks to determine the
// validity of sent and received `net.Addr` implementations.
type SocketConn struct {
    conn
}
```

### Example

Using a modified version of the `net` package, I was able to access the runtime network poller and simplify my raw sockets package code as follows:

```go
// Called in init() in the `raw` package
net.RegisterSocket(
    syscall.AF_PACKET,
    &syscall.SockaddrLinklayer{},
    &Addr{},
    // Internal conversion functions for `syscall.SockaddrLinklayer` to `raw.Addr`
    convertSockaddr,
    convertNetAddr,
)

sock, _ := syscall.Socket(syscall.AF_PACKET, syscall.SOCK_RAW, proto)
_ = syscall.Bind(sock, &syscall.SockaddrLinklayer{
    Protocol: pbe,
    Ifindex:  ifi.Index,
})

f := os.NewFile(uintptr(sock), "linklayer")
// `c` is of type `net.SocketConn`, backed by a raw socket (uses `raw.Addr` for addressing)
c := net.FilePacketConn(f)
```

### Summary
The runtime network poller is an excellent mechanism, and enabling access to it will facilitate the development of packages for raw Ethernet sockets, Netlink sockets, and other platform-specific socket types.

If this proposal is accepted, I would be happy to seek guidance from @mikioh to create the best possible API for this feature. Additionally, this would allow me to contribute code from my raw Ethernet socket package as a resolution to issue #8432.

Feedback and comments are greatly appreciated. Thank you for your time.

/cc @rsc @mikioh