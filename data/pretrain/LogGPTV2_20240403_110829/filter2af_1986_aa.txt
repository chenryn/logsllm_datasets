****
* * *
## 0x05 WAZUH整合
现在，我们已经完成了SIEM的部分。是时候将我们的解决方案从一个简单的观察者转变为一个积极的响应者了。我们所使用到的一个很重要的工具就是Wazuh。在本章节中，我们希望能让您了解这个工具的优势，以及如何部署和使用。本章节分为以下几个部分：
### 5.1 Wazuh服务端和agent的安装
Wazuh是一个免费的、开源的、企业级的安全监控解决方案，用于威胁检测、完整性监控、事件响应及合规性。
你需要知道的一些定义：
**Wazuh服务端：** 运行Wazuh manager、API和Filebeat。它从部署的agent收集和分析数据。
**Wazuh agent：** 在被监控的主机上运行，收集系统日志和配置数据、检测入侵和异常情况。它与Wazuh
server进行对话，并将收集到的数据转发到该server进行进一步分析。
#### 5.1.1 Wazuh server架构简介
Wazuh架构基于运行在被监控主机上的agent，这些被监控主机上的日志将会转发到中心server。同时，还支持无代理设备（如防火墙、交换机、路由器、接入点等），可以通过syslog或定期探查其配置变化主动提交日志数据，随后将数据转发给中心server。中心server对接收到的信息进行解码和分析，并将结果传递给Elasticsearch集群进行索引和存储。
我们将使用单主机架构(HIDS)，如下图所示:
有关其他架构的更多详细信息，可以查看官方文档：
#### 5.1.2 Wazuh manager 、API和Filebeat安装
如下链接是wazuh安装介绍的官方文档：
安装后，必须要配置filebeat的配置文件：可以将filebeat连接到elasticsearch output 或logstash output
。在我们的例子中，我们将配置没有ssl验证的elasticsearch output（下图可以看到，只有告警模块被启用了）。
    cd /etc/filebeat
    nano filebeat.yml
现在将设置索引模板并启动3个服务：
    filebeat setup — index-management
    service filebeat start
    service wazuh-manager start
    service wazuh-api start
#### 5.1.3 **wazuh-agent** 安装
安装参考链接如下：
检查wazuh-agent是否正常运行：
#### 5.1.4 安装wazuh app并与Kibana整合
这个app将成为Wazuh
server和我们之前安装ELK的Kibana之间的桥梁。这个app只在github仓库中提供，不在官网上提供。我们将安装的wazuh app是与ELK
Stack 7.6.1兼容的（这点很重要）。
    cd /usr/share/kibana
    sudo -u kibana bin/kibana-plugin install https://packages.wazuh.com/wazuhapp/wazuhapp-3.12.2_7.6.1.zip
建议增加Kibana的heap大小，以保证插件的安装效果：
    cat >> /etc/default/kibana 
现在在kibana中，你应该看到在kibana的左边标签中出现了wazuh的符号。点击它，wazuh的api将会打开。花一些时间去探索它，你应该得到类似下图的内容。但是现在不会有任何agent连接到它。接下来的内容我们将讨论如何连接agent。
#### 5.1.5 连接和配置agents
注册agent的方式有很多。在本文中，我们将使用手动方式。
在Wazuh manager的主机命令行中，我们将运行manage_agents来添加agent。在本例中，我们将添加一个新的agent。利用命令如下：
    /var/ossec/bin/manage_agents
选择添加agent，输入A并回车。然后我们输入我们要给我们的机器取的名字，在本例中是user1。
我们键入终端设备的IP（注意，如果你没有终端设备的静态IP地址，你可以用关键字（any）代替IP地址）。  
完成后，回车。现在我们要提取秘钥，使我们的agent能够连接到wazuh
server。选择E选项并提取一个agent的密钥,然后我们输入agent的id，本例中我选择了id为001的agent。
在Wazuh
manager的主机中添加了agent后，以root用户身份在agent主机中打开一个会话。之后，让我们导入密钥并将agent连接到manager。命令如下：
    /var/ossec/bin/manage_agents -i “Your_Secret_key”
输入y，回车，应该能得到一个结果：
还有一个步骤，编辑`/var/ossec/etc/ossec.conf`中的Wazuh agent配置，添加Wazuh
server的IP地址。在部分，将manager_IP值改为Wazuh server地址。Wazuh
server的地址可以是IP地址或DNS名称。
#### 5.1.6 检查接收到的数据
要检查ELK是否从wazuh server接收数据。进入索引管理（Index Management）。应该得到类似下图的内容（wazuh-alerts和wazuh-monitoring）：
### 5.2 Wazuh主动响应
Wazuh提供了一个主动响应模块来处理在Wazuh-manager上配置的特定警报的自动响应。主动响应是一个脚本，被配置为在特定告警、告警级别或规则组被命中时执行。主动响应是指有状态响应或无状态响应。有状态响应被配置为在指定时间后可撤消，而无状态响应则被配置为一次性动作。
例如，如果我们想根据终端设备传过来的某些日志（显示RDP/SSH正在被暴力破解攻击），去阻断某些ip。我们可以创建一个主动响应，当攻击者的行为与存储在Wazuh上的规则集相匹配时，它就会阻止攻击者的IP。
我们将以SSH的暴力破解为例：我们将把8次登录失败视为一次攻击的尝试。当这个事件发生时，规则 "`5712 — SSHD brute force
trying to get access to the system`"将被触发。因此，阻断IP的命令就会被执行。
首先，我们需要定义我们将用于响应的命令。
OSSEC自带了一套用于主动响应的常用脚本。这些脚本在机器的/var/ossec/active-response/bin/目录下。我们将使用`firewall-drop.sh`脚本（该脚本应该可以在常见的Linux/Unix操作系统中使用），它允许使用本地防火墙阻止恶意IP。  
在OSSEC Manager的ossec.conf中定义命令：
    nano /var/ossec/etc/ossec.conf
接下来，在同一个文件中，我们配置OSSEC来运行主动响应。主要的字段有:
**-command:** 之前定义的命令 (firewall-drop)；
**-location** : 命令的执行位置-我们希望在agent上执行，上报事件。因此，我们使用`local`；
**-rules_id** : 如果规则5712被触发，命令就会被执行；
**-timeout** : 在防火墙（iptables，ipfilter等）上封禁IP 60秒。
随后保存修改并关闭文件。用如下命令重启wazuh-manager：
    Service wazuh-manager restart
在wazuh-agents主机上，别忘了修改ossec.conf配置文件并添加：
    no
现在，你可以尝试在安装了Wazuh agent 的主机上进行SSH暴力破解测试，在8次登录失败后，你的ip将被封禁60秒。  
关于Wazuh主动响应的更多细节，可以查看如下链接：
## 0x06 告警
本章节将涵盖我们SOCaaS解决方案中的告警部分。众所周知，告警在通知安全响应团队上发挥着很重要的作用。因此，他们可以根据企业和团队的决策，中断'cyber
kill chain'(网络杀伤链)或监控该攻击进一步动作。你可能好奇，为什么需要覆盖这么多告警，Open
Distro的告警模块还不够吗？确实，这是因为Open
Distro在输出数量上，以及与其他解决方案（如Thehive）的可集成性方面都较为欠缺。因此，我们将介绍其他替代方案。
### 6.1 ElastAlert、ElastAlert-Server和Praeco的安装配置
#### 6.1.1 介绍
**(1) 定义**
**Praeco：** 可以跟有通知选项的工具进行告警配置，包括 Slack, e-mail, Telegram, Jira等。
Praeco中的告警可以通过使用查询生成器选择要告警的字段及其相关操作符来组装，也可以使用Kibana查询语言（KQL）手动组装。
**ElastAlert：** 是一个用于对 Elasticsearch
中数据的异常、峰值或其他感兴趣的内容进行告警的简单框架。它的工作原理是将Elasticsearch与规则类型和告警这两类组件相结合。Elasticsearch被定期查询，数据被传递给不同的规则类型，规则类型决定何时发现匹配。当匹配发生时，会被赋予一个或多个告警，告警会根据匹配情况采取行动。  
这是由一组规则进行配置的，每个规则定义了一个查询、一个规则类型和一组告警。
**Sigma规则：**
Sigma是一种通用和开放的签名格式，它允许你以一种直接的方式描述相关日志事件。该规则格式非常灵活，易于编写，适用于任何类型的日志文件。这个项目的主要目的是提供一种结构化的格式，研究人员或分析人员可以用这种格式来描述他们曾经开发的检测方法，并使之可以与他人共享。
**(2) 项目cloning**
    cd /etc
    git clone https://github.com/Yelp/elastalert.git
    git clone https://github.com/ServerCentral/elastalert-server.git
    git clone https://github.com/ServerCentral/praeco.git
更多信息查看如下链接：
#### 6.1.2 Elastalert配置
    cd /etc/elastalert
    mkdir rules rule_templates
    cp config.yaml.example config.yaml
    nano config.yaml
elastalert 配置文件`config.yaml`的配置如下：
    es_host: localhost
    writeback_index: elastalert_status
    # 将rules_folder配置为rules
    rules_folder: rules
**注意：如果你运行的是python 2.7版本，必须改成3.6版本。**
**(1) Ubuntu上安装python 3.6:**
    sudo add-apt-repository ppa:deadsnakes/ppa
    sudo apt update
    sudo apt install python3.6
**(2) 更新python配置：**
    sudo update-alternatives — install /usr/bin/python python /usr/bin/python2.7
    sudo update-alternatives — install /usr/bin/python python /usr/bin/python3.6
**(3) 更改python默认版本：**
    update-alternatives — config python
选择python 3.6，如下图所示：
现在默认版本应该是python 3.6了。
**(4) 安装pip3：**
    sudo apt install python3-pip
**(5) 还要安装PyYAML(本例是5.1版本)：**
    pip install PyYAML==5.1
**(6) 安装Requirement和elastalert：**
    cd /etc/elastalert
    pip3 install “setuptools>=11.3”
    python setup.py install
**(7) 创建索引：**
    cd /usr/local/bin/
    ./elastalert-create-index
安装时，命令终端中的几个选项：
    ES Host : localhost
    ES Port : 9200
    Use ssl : t
    Verify ssl :f