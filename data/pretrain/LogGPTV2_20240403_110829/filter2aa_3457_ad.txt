By default, this dialog exports x86 payload stages. Check the Use x64 payload box to generate 
an x64 stage with an x64 artifact.  
www.cobaltstrike.com/
/
34/
Check the Sign executable file box to sign an EXE or DLL artifact with a code-signing 
certificate.  
5.4 Hosting Files 
Cobalt Strike’s web server can host your user-driven packages for you. Go to Attacks -> Web 
Drive-by -> Host File to set this up. Choose the file to host, select an arbitrary URL, and choose 
the mime type for the file. 
By itself, the capability to host a file isn’t very impressive. However, in a moment, you will learn 
how to embed Cobalt Strike URLs into a spear phishing email. When you do this, Cobalt Strike 
can cross-reference visitors to your file with sent emails and include this information in the 
social engineering report.  
5.5 User-driven Web Drive-by Attacks 
Cobalt Strike makes several tools to setup web drive-by attacks available to you. To quickly start 
an attack, go to Attacks -> Web Drive-by and choose an option: 
Java Signed Applet Attack 
This attack starts a web server hosting a self-signed Java applet. Visitors are asked to give the 
applet permission to run. When a visitor grants this permission, you gain access to their system.  
The Java Signed Applet Attack uses Cobalt Strike’s Java injector. On Windows, the Java injector 
will inject shellcode for a Windows listener directly into memory for you.  
To get the most mileage from this attack, you will want to download the Applet Kit from the 
Cobalt Strike arsenal and sign it with a code signing certificate. 
Java Smart Applet Attack 
Cobalt Strike’s Smart Applet Attack combines several exploits to disable the Java security 
sandbox into one package. This attack starts a web server hosting a Java applet. Initially, this 
applet runs in Java’s security sandbox and it does not require user approval to start.  
The applet analyzes its environment and decides which Java exploit to use. If the Java version is 
vulnerable, the applet will disable the security sandbox, and execute a payload using Cobalt 
Strike’s Java injector.  
Scripted Web Delivery (S) 
This feature generates a stageless Beacon payload artifact, hosts it on Cobalt Strike’s web server, 
and presents a one-liner to download and run the artifact. The options are: bitsadmin, powershell, 
and python. 
The bitsadmin option hosts an executable and uses bitsadmin to download it. The bitsadmin 
method runs the executable via cmd.exe. The exe option generates an executable and hosts it on 
Cobalt Strike's web server. The powershell option hosts a PowerShell script and uses 
powershell.exe to download the script and evaluate it. The python option hosts a Python script 
and uses python.exe to download the script and run it. Each of these options is a different way to 
run a Cobalt Strike listener. 
www.cobaltstrike.com/
/
35/
5.6 Client-side Exploits 
You may use a Metasploit Framework exploit to deliver a Cobalt Strike Beacon. Cobalt Strike’s 
Beacon is compatible with the Metasploit Framework’s staging protocol. To deliver a Beacon 
with a Metasploit Framework exploit: 
• Use/windows/meterpreter/reverse_http[s]/as/your/PAYLOAD/and/set/LHOST/and/
LPORT/to/point/to/your/Cobalt/Strike/listener./You’re/not/really/delivering/
Meterpreter/here,/you’re/telling/the/Metasploit/Framework/to/generate/the/HTTP[s]/
stager/that/downloads/a/payload/from/the/specified/LHOST/LPORT.//
• Set/DisablePayloadHandler/to/True./This/will/tell/the/Metasploit/Framework/to/avoid/
standing/up/a/handler/within/the/Metasploit/Framework/to/service/your/payload/
connection./
• Set/PrependMigrate/to/True./This/option/tells/the/Metasploit/Framework/to/prepend/
shellcode/that/runs/the/payload/stager/in/another/process./This/helps/your/Beacon/
session/survives/if/the/exploited/application/crashes/or/if/it’s/closed/by/a/user./
Here’s a screenshot of msfconsole used to stand up a Flash Exploit to deliver Cobalt Strike’s 
HTTP Beacon hosted at 192.168.1.5 on port 80: 
Figure 27. Using Client-side Attacks from Metasploit 
5.7 Clone a Site 
Before sending an exploit to a target, it helps to dress it up. Cobalt Strike’s website clone tool 
can help with this. The website clone tool makes a local copy of a website with some code added 
to fix links and images so they work as expected. 
To clone a website, go to Attacks -> Web Drive-by -> Clone Site. 
www.cobaltstrike.com/
/
36/
It’s possible to embed an attack into a cloned site. Write the URL of your attack in the Embed 
field and Cobalt Strike will add it to the cloned site with an IFRAME. Click the ... button to 
select one of the running client-side exploits. 
Figure 28. Website Clone Tool 
Cloned websites can also capture keystrokes. Check the Log keystrokes on cloned site box. This 
will insert a JavaScript key logger into the cloned site.  
To view logged keystrokes or see visitors to your cloned site, go to View -> Web Log. 
5.8 Spear Phishing 
Targets 
Now that you have an understanding of client-side attacks, let’s talk about how to get the attack 
to the user. The most common way into an organization’s network is through spear phishing.   
Before you send a phishing message, you should assemble a list of targets. Cobalt Strike expects 
targets in a text file. Each line of the file contains one target. The target may be an email address. 
You may also use an email address, a tab, and a name. If provided, a name helps Cobalt Strike 
customize each phish. 
Templates 
Next, you need a phishing template. The nice thing about templates is that you may reuse them 
between engagements. Cobalt Strike uses saved email messages as its templates. Cobalt Strike 
will strip attachments, deal with encoding issues, and rewrite each template for each phishing 
attack. 
If you’d like to create a custom template, compose a message and send it to yourself. Most email 
clients have a way to get the original message source. In Gmail, click the down arrow next to 
Reply and select Show original. Save this message to a file and then congratulate yourself—
you’ve made your first Cobalt Strike phishing template.  
www.cobaltstrike.com/
/
37/
You may want to customize your template with Cobalt Strike’s tokens. Cobalt Strike replaces the 
following tokens in your templates: 
Token 
Description 
%To% 
The email address of the person the message is sent to 
%To_Name% 
The name of the person the message is sent to. 
%URL% 
The contents of the Embed URL field in the spear phishing dialog. 
Sending Messages 
Now that you have your targets and a template, you’re ready to go phishing. To start the spear 
phishing tool, go to Attacks -> Spear Phish. 
Figure 29. Spear Phishing Tool 
To send a phishing message, you must first import your targets. Click the folder next to the 
Targets field to import your targets file.   
Next, choose your template file. Click on the folder next to the Template field to choose one.  
Now, you have the option to attach a file if you choose. This is a great time to use one of the 
social engineering packages discussed earlier. Cobalt Strike will add your attachment to the 
outgoing phishing message. 
You may also ask Cobalt Strike to rewrite all URLs in the template with a URL of your 
choosing. Paste in the URL or press ... to choose one of the tools hosted by Cobalt Strike. Cobalt 
Strike tools include cloned websites, the auto-exploit server, and the system profiler. 
When you embed a URL, Cobalt Strike will attach ?id=%TOKEN% to it. Each sent message will 
get its own token. Cobalt Strike uses this token to map website visitors to sent emails. If you care 
about reporting, be sure to keep this value in place. 
www.cobaltstrike.com/
/
38/
Set Mail Server to an open relay or the mail exchange record for your target. If necessary, you 
may also authenticate to a mail server to send your phishing messages.  
Press … next to the Mail Server field to configure additional server options. You may specify a 
username and password to authenticate with. The Random Delay option tells Cobalt Strike to 
randomly delay each message by a random time, up to the number of seconds you specify. If this 
option is not set, Cobalt Strike will not delay its messages. 
Figure 30. Configure Mail Server 
Set Bounce To to an email address where bounced messages should go. This value will not affect 
the message your targets see. Press Preview to see an assembled message to one of your 
recipients. If the preview looks good, press Send to deliver your attack. 
Cobalt Strike sends phishing messages through the team server. 
www.cobaltstrike.com/
/
39/
6. Payload Artifacts and Anti-virus Evasion 
6.1 Philosophy 
Strategic Cyber LLC regularly fields questions that ask about evasion. Does Cobalt Strike bypass 
anti-virus products? Which anti-virus products does it bypass? How often is this checked? 
The Cobalt Strike default artifacts are likely snagged by most endpoint security solutions. 
Evasion is not a goal of the default Cobalt Strike product. Cobalt Strike’s does offer flexibility.  
You, the operator, may change the executables, DLLs, applets, and script templates Cobalt Strike 
uses in its workflows. You may also export Cobalt Strike’s Beacon payload in a variety of 
formats that work with third-party tools designed to assist with evasion. 
This chapter will highlight the Cobalt Strike features that provide this flexibility. 
6.2 The Artifact Kit 
Cobalt Strike uses the Artifact Kit to generate its executables and DLLs. The Artifact Kit is a 
source code framework to build executables and DLLs that evade some anti-virus products.  
The Theory of the Artifact Kit 
Traditional anti-virus products use signatures to identify known bad. If we embed our known bad 
shellcode into an executable, an anti-virus product will recognize the shellcode and flag the 
executable as malicious.  
To defeat this detection, it’s common for an attacker to obfuscate the shellcode in some way and 
place it in the binary. This obfuscation process defeats anti-virus products that use a simple string 
search to identify malicious code.  
Many anti-virus products go a step further. These anti-virus products simulate execution of an 
executable in a virtual sandbox. With each emulated step of execution, the anti-virus product 
checks for known bad in the emulated process space. If known bad shows up, the anti-virus 
product flags the executable or DLL as malicious. This technique defeats many encoders and 
packers that try to hide known bad from signature-based anti-virus products. 
Cobalt Strike’s counter to this is simple. The anti-virus sandbox has limitations. It is not a 
complete virtual machine. There are system behaviors the anti-virus sandbox does not emulate. 
The Artifact Kit is a collection of executable and DLL templates that rely on some behavior that 
anti-virus product’s do not emulate to recover shellcode located inside of the binary.  
One of the techniques [see: src-common/bypass-pipe.c in the Artifact Kit] generates executables 
and DLLs that serve shellcode to themselves over a named pipe. If an anti-virus sandbox does 
not emulate named pipes, it will not find the known bad shellcode. 
www.cobaltstrike.com/
/
40/
Where Artifact Kit Fails 
Of course it’s possible for anti-virus products to defeat specific implementations of the Artifact 
Kit. If an anti-virus vendor writes signatures for the Artifact Kit technique you use, then the 
executables and DLLs it creates will get caught. This started to happen, over time, with the 
default bypass technique in Cobalt Strike 2.5 and below. If you want to get the most from the 
Artifact Kit, you will use one of its techniques as a base to build your own Artifact Kit 
implementation. 
Even that isn’t enough though. Some anti-virus products call home to the anti-virus vendor’s 
servers. There the vendor makes a determination if the executable or DLL is known good or an 
unknown, never before seen, executable or DLL. Some of these products automatically send 
unknown executables and DLLs to the vendor for further analysis and warn the users. Others 
treat unknown executables and DLLs as malicious. It depends on the product and its settings.  
The point: no amount of “obfuscation” is going to help you in this situation. You’re up against a 
different kind of defense and will need to work around it accordingly. Treat these situations the 
same way you would treat application whitelisting. Try to find a known good program (e.g., 
powershell) that will get your payload stager into memory. 
How to use the Artifact Kit 
Go to Help -> Arsenal from a licensed Cobalt Strike to download the Artifact Kit. You can also 
access the Arsenal directly at: 
https://www.cobaltstrike.com/scripts 
Strategic Cyber LLC distributes the Artifact Kit as a .tgz file. Use the tar command to extract it. 
The Artifact Kit includes a build.sh script. Run this script on Kali Linux, with no arguments, to 
build the default Artifact Kit techniques with the Minimal GNU for Windows Cross Compiler.  
Figure 31. The Artifact Kit Build Process 
The Artifact Kit build script creates a folder with template artifacts for each Artifact Kit 
technique. To use a technique with Cobalt Strike, go to Cobalt Strike -> Script Manager, and 
load the artifact.cna script from that technique’s folder.  
You’re encouraged to modify the Artifact Kit and its techniques to make it meet your needs. 
While skilled C programmers can do more with the Artifact Kit, it’s quite feasible for an 
www.cobaltstrike.com/
/
41/
adventurous non-programmer to work with the Artifact Kit too. For example, a major anti-virus 
product likes to write signatures for the executables in Cobalt Strike’s trial each time there is a 
release. Up until Cobalt Strike 2.5, the trial and licensed versions of Cobalt Strike used the 
named pipe technique in its executables and DLLs. This vendor would write a signature for the 
named pipe string the executable used. Defeating their signatures, release after release, was as 
simple as changing the name of the pipe in the pipe technique’s source code. 
6.3 The Veil Evasion Framework 
Veil is a popular framework to generate executables that get past some anti-virus products. You 
may use Veil to generate executables for Cobalt Strike’s payloads. Go to Attacks -> Packages -
> Payload Generator. Choose the listener you want to generate an executable for. Select Veil as 
the Output type. Press Generate and save the file. 
Launch the Veil Evasion Framework and choose the technique you want to use. Veil will 
eventually ask about shellcode. Select Veil’s option to supply custom shellcode. Paste in the 
contents of the file Cobalt Strike’s payload generator made. Press enter and you will have a fresh 
Veil-made executable. 
Figure 32. Using Veil to Generate an Executable 
6.4 Java Applet Attacks 
Strategic Cyber LLC distributes the source code to Cobalt Strike’s Applet Attacks as the Applet 
Kit. This is also available within the Cobalt Strike arsenal. Go to Help -> Arsenal and download 
the Applet Kit. 
Use the included build.sh script to build the Applet Kit on Kali Linux. Many Cobalt Strike 
customers use this flexibility to sign Cobalt Strike’s Java Applet attacks with a code-signing 
certificate that they purchased. This is highly recommended. 
To make Cobalt Strike use your Applet Kit over the built-in one, load the applet.cna script 
included with the Applet Kit.  
www.cobaltstrike.com/
/
42/
On the Cobalt Strike Arsenal Page you will also notice the Power Applet. This is an alternate 
implementation of Cobalt Strike’s Java Applet attacks that uses PowerShell to get a payload into 
memory. The Power Applet demonstrates the flexibility you have to recreate Cobalt Strike’s 
standard attacks in a completely different way and still use them with Cobalt Strike’s workflows. 
To make Cobalt Strike use your Applet Kit over the built-in one, load the applet.cna script 
included with the Applet Kit.  
6.5 The Resource Kit 
The Resource Kit is Cobalt Strike’s means to change the HTA, PowerShell, Python, VBA, and 
VBS script templates Cobalt Strike uses in its workflows. Again, the Resource Kit is available to 
licensed users in the Cobalt Strike arsenal. Go to Help -> Arsenal to download the Resource Kit. 
The README.txt IIed with the Resource Kit documents the included scripts and which features 
use them. To evade a product, consider changing strings or behaviors in these scripts.  
To make Cobalt Strike use your script templates over the built-in script templates, load the 
resources.cna script included with the Resource Kit. 
www.cobaltstrike.com/
/
43/
7. Post Exploitation 
7.1 The Beacon Console 
Right-click on a Beacon session and select interact to open that Beacon’s console. The console is 
the main user interface for your Beacon session.  The Beacon console allows you to see which 
tasks were issued to a Beacon and to see when it downloads them. The Beacon console is also 
where command output and other information will appear. 
Figure 33. Cobalt Strike Beacon Console 
In between the Beacon console’s input and output is a status bar. This status bar contains 
information about the current session. In its default configuration, the statusbar shows the 
target’s NetBIOS name, the username and PID of the current session, and the Beacon’s last 
check-in time. 
Each command that’s issued to a Beacon, whether through the GUI or the console, will show up 
in this window. If a teammate issues a command, Cobalt Strike will pre-fix the command with 
their handle.  
You will likely spend most of your time with Cobalt Strike in the Beacon console. It’s worth 
your time to become familiar with its commands. Type help in the Beacon console to see 
available commands. Type help followed by a command name to get detailed help. 
7.2 The Beacon Menu 
Right-click on a Beacon or inside of a Beacon’s console to access the Beacon menu. This is the 
same menu used to open the Beacon console. The Access menu contains options to manipulate 
trust material and elevate your access. The Explore menu consists of options to extract 
information and interact with the target’s system. The Pivoting menu is where you can setup 
tools to tunnel traffic through a Beacon. The Session menu is where you manage the current 
Beacon session. 
www.cobaltstrike.com/
/
44/
Figure 34. Cobalt Strike Beacon Menu 
Some of Cobalt Strike’s visualizations (the pivot graph and sessions table) let you select multiple 
Beacons at one time. Most actions that happen through this menu will apply to all selected 
Beacon sessions. 
7.3 Asynchronous and Interactive Operations 
Be aware that Beacon is an asynchronous payload. Commands do not execute right away. Each 
command goes into a queue. When the Beacon checks in (connects to you), it will download 
these commands and execute them one by one. At this time, Beacon will also report any output it 
has for you. If you make a mistake, use the clear command to clear the command queue for the 
current Beacon. 
By default, Beacons check in every sixty seconds. You may change this with Beacon’s sleep 
command. Use sleep followed by a time in seconds to specify how often Beacon should check in. 
You may also specify a second number between 0 and 99. This number is a jitter factor. Beacon 
will vary each of its check in times by the random percentage you specify as a jitter factor. For 
example, sleep 300 20, will force Beacon to sleep for 300 seconds with a 20% jitter percentage. 
This means, Beacon will sleep for a random value between 240s to 300s after each check-in. 
To make a Beacon check in multiple times each second, try sleep 0. This is interactive mode. In 
this mode commands will execute right away. You must make your Beacon interactive before 
you tunnel traffic through it. A few Beacon commands (e.g., browserpivot, desktop, etc.) will 
automatically put Beacon into interactive mode at the next check in. 