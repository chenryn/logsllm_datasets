### Exporting Payload Stages

By default, this dialog exports x86 payload stages. To generate an x64 stage with an x64 artifact, check the "Use x64 payload" box.

---

### Signing Executable Files

To sign an EXE or DLL artifact with a code-signing certificate, check the "Sign executable file" box.

---

### 5.4 Hosting Files

Cobalt Strike’s web server can host your user-driven packages. Go to **Attacks -> Web Drive-by -> Host File** to set this up. Choose the file to host, select an arbitrary URL, and choose the MIME type for the file.

While the ability to host a file may not seem impressive on its own, you can embed Cobalt Strike URLs into a spear phishing email. This allows Cobalt Strike to cross-reference visitors to your file with sent emails and include this information in the social engineering report.

---

### 5.5 User-driven Web Drive-by Attacks

Cobalt Strike provides several tools to set up web drive-by attacks. To quickly start an attack, go to **Attacks -> Web Drive-by** and choose one of the following options:

#### Java Signed Applet Attack

This attack starts a web server hosting a self-signed Java applet. Visitors are prompted to give the applet permission to run. If they grant this permission, you gain access to their system. The Java Signed Applet Attack uses Cobalt Strike’s Java injector, which injects shellcode for a Windows listener directly into memory on Windows systems.

For optimal results, download the Applet Kit from the Cobalt Strike arsenal and sign it with a code signing certificate.

#### Java Smart Applet Attack

Cobalt Strike’s Smart Applet Attack combines multiple exploits to disable the Java security sandbox into one package. This attack starts a web server hosting a Java applet that initially runs in Java’s security sandbox without requiring user approval. The applet analyzes its environment and decides which Java exploit to use. If the Java version is vulnerable, the applet disables the security sandbox and executes a payload using Cobalt Strike’s Java injector.

#### Scripted Web Delivery (S)

This feature generates a stageless Beacon payload artifact, hosts it on Cobalt Strike’s web server, and presents a one-liner to download and run the artifact. The available options are: `bitsadmin`, `powershell`, and `python`.

- **Bitsadmin**: Hosts an executable and uses `bitsadmin` to download it. The executable is then run via `cmd.exe`.
- **Powershell**: Hosts a PowerShell script and uses `powershell.exe` to download and evaluate the script.
- **Python**: Hosts a Python script and uses `python.exe` to download and run the script.

Each of these options provides a different method to run a Cobalt Strike listener.

---

### 5.6 Client-side Exploits

You can use a Metasploit Framework exploit to deliver a Cobalt Strike Beacon. Cobalt Strike’s Beacon is compatible with the Metasploit Framework’s staging protocol. To deliver a Beacon with a Metasploit Framework exploit:

1. Use `/windows/meterpreter/reverse_http[s]` as your PAYLOAD and set `LHOST` and `LPORT` to point to your Cobalt Strike listener. You are not delivering Meterpreter; you are telling the Metasploit Framework to generate the HTTP[s] stager that downloads a payload from the specified `LHOST` and `LPORT`.
2. Set `DisablePayloadHandler` to `True`. This tells the Metasploit Framework to avoid standing up a handler within the Metasploit Framework to service your payload connection.
3. Set `PrependMigrate` to `True`. This option tells the Metasploit Framework to prepend shellcode that runs the payload stager in another process, helping your Beacon session survive if the exploited application crashes or is closed by the user.

Here’s a screenshot of `msfconsole` used to set up a Flash Exploit to deliver Cobalt Strike’s HTTP Beacon hosted at 192.168.1.5 on port 80:

![Using Client-side Attacks from Metasploit](Figure_27.png)

---

### 5.7 Cloning a Site

Before sending an exploit to a target, it helps to dress it up. Cobalt Strike’s website clone tool can help with this. The tool makes a local copy of a website, fixing links and images so they work as expected.

To clone a website, go to **Attacks -> Web Drive-by -> Clone Site**. You can embed an attack into a cloned site by writing the URL of your attack in the Embed field. Cobalt Strike will add it to the cloned site with an IFRAME. Click the `...` button to select one of the running client-side exploits.

Cloned websites can also capture keystrokes. Check the "Log keystrokes on cloned site" box to insert a JavaScript key logger into the cloned site. To view logged keystrokes or see visitors to your cloned site, go to **View -> Web Log**.

---

### 5.8 Spear Phishing

Now that you have an understanding of client-side attacks, let’s discuss how to get the attack to the user. The most common way into an organization’s network is through spear phishing.

#### Targets

Before sending a phishing message, assemble a list of targets. Cobalt Strike expects targets in a text file, with each line containing one target. The target can be an email address, or an email address followed by a tab and a name. If provided, a name helps Cobalt Strike customize each phish.

#### Templates

Next, you need a phishing template. Templates can be reused between engagements. Cobalt Strike uses saved email messages as templates. It will strip attachments, handle encoding issues, and rewrite each template for each phishing attack.

To create a custom template, compose a message and send it to yourself. Most email clients allow you to view the original message source. In Gmail, click the down arrow next to Reply and select "Show original." Save this message to a file, and you have created your first Cobalt Strike phishing template.

Cobalt Strike supports the following tokens in your templates:

- **%To%**: The email address of the person the message is sent to.
- **%To_Name%**: The name of the person the message is sent to.
- **%URL%**: The contents of the Embed URL field in the spear phishing dialog.

#### Sending Messages

With your targets and a template ready, you can start the spear phishing tool by going to **Attacks -> Spear Phish**.

1. Import your targets by clicking the folder next to the Targets field.
2. Choose your template file by clicking the folder next to the Template field.
3. Optionally, attach a file. This is a good time to use one of the social engineering packages discussed earlier. Cobalt Strike will add your attachment to the outgoing phishing message.
4. You can ask Cobalt Strike to rewrite all URLs in the template with a URL of your choosing. Paste in the URL or press `...` to choose one of the tools hosted by Cobalt Strike, such as cloned websites, the auto-exploit server, or the system profiler.

When you embed a URL, Cobalt Strike will append `?id=%TOKEN%` to it. Each sent message will get its own token, allowing Cobalt Strike to map website visitors to sent emails. If you care about reporting, ensure this value remains in place.

Set the Mail Server to an open relay or the mail exchange record for your target. If necessary, you can authenticate to a mail server to send your phishing messages. Press `...` next to the Mail Server field to configure additional server options, including specifying a username and password for authentication. The Random Delay option tells Cobalt Strike to randomly delay each message by a random time, up to the number of seconds you specify.

Set the Bounce To field to an email address where bounced messages should go. This value does not affect the message your targets see. Press Preview to see an assembled message to one of your recipients. If the preview looks good, press Send to deliver your attack.

Cobalt Strike sends phishing messages through the team server.

---

### 6. Payload Artifacts and Anti-virus Evasion

#### 6.1 Philosophy

Strategic Cyber LLC regularly fields questions about evasion. Does Cobalt Strike bypass anti-virus products? Which anti-virus products does it bypass? How often is this checked?

The default Cobalt Strike artifacts are likely detected by most endpoint security solutions. Evasion is not a primary goal of the default Cobalt Strike product, but it offers flexibility. As an operator, you can change the executables, DLLs, applets, and script templates Cobalt Strike uses in its workflows. You can also export Cobalt Strike’s Beacon payload in various formats that work with third-party tools designed to assist with evasion.

This chapter highlights the Cobalt Strike features that provide this flexibility.

#### 6.2 The Artifact Kit

Cobalt Strike uses the Artifact Kit to generate its executables and DLLs. The Artifact Kit is a source code framework to build executables and DLLs that evade some anti-virus products.

##### Theory of the Artifact Kit

Traditional anti-virus products use signatures to identify known bad. If we embed our known bad shellcode into an executable, an anti-virus product will recognize the shellcode and flag the executable as malicious. To defeat this detection, attackers commonly obfuscate the shellcode and place it in the binary, defeating simple string-based signature detection.

Many anti-virus products simulate execution in a virtual sandbox, checking for known bad in the emulated process space. This technique defeats many encoders and packers that try to hide known bad from signature-based anti-virus products.

Cobalt Strike’s counter to this is simple: the anti-virus sandbox has limitations. It is not a complete virtual machine and does not emulate all system behaviors. The Artifact Kit is a collection of executable and DLL templates that rely on behaviors that anti-virus products do not emulate to recover shellcode located inside the binary.

One technique (see: `src-common/bypass-pipe.c` in the Artifact Kit) generates executables and DLLs that serve shellcode to themselves over a named pipe. If an anti-virus sandbox does not emulate named pipes, it will not find the known bad shellcode.

##### Where the Artifact Kit Fails

Anti-virus products can defeat specific implementations of the Artifact Kit. If an anti-virus vendor writes signatures for the Artifact Kit technique you use, the executables and DLLs it creates will be detected. This started to happen with the default bypass technique in Cobalt Strike 2.5 and below. To get the most from the Artifact Kit, you should use one of its techniques as a base to build your own implementation.

Some anti-virus products call home to the vendor’s servers, where the vendor determines if the executable or DLL is known good or unknown. Some products automatically send unknown executables and DLLs to the vendor for further analysis and warn users, while others treat unknown executables and DLLs as malicious. No amount of obfuscation will help in these situations. Treat these scenarios like application whitelisting and try to find a known good program (e.g., `powershell`) to get your payload stager into memory.

##### How to Use the Artifact Kit

Go to **Help -> Arsenal** from a licensed Cobalt Strike to download the Artifact Kit. You can also access the Arsenal directly at:

```
https://www.cobaltstrike.com/scripts
```

Strategic Cyber LLC distributes the Artifact Kit as a `.tgz` file. Use the `tar` command to extract it. The Artifact Kit includes a `build.sh` script. Run this script on Kali Linux, with no arguments, to build the default Artifact Kit techniques with the Minimal GNU for Windows Cross Compiler.

The Artifact Kit build script creates a folder with template artifacts for each technique. To use a technique with Cobalt Strike, go to **Cobalt Strike -> Script Manager** and load the `artifact.cna` script from that technique’s folder.

You are encouraged to modify the Artifact Kit and its techniques to meet your needs. While skilled C programmers can do more with the Artifact Kit, it is feasible for non-programmers to work with it as well. For example, changing the name of the pipe in the pipe technique’s source code can defeat signatures written by anti-virus vendors.

#### 6.3 The Veil Evasion Framework

Veil is a popular framework for generating executables that evade some anti-virus products. You can use Veil to generate executables for Cobalt Strike’s payloads. Go to **Attacks -> Packages -> Payload Generator**, choose the listener you want to generate an executable for, select Veil as the Output type, and press Generate and save the file.

Launch the Veil Evasion Framework and choose the technique you want to use. Veil will eventually ask about shellcode. Select the option to supply custom shellcode, paste in the contents of the file generated by Cobalt Strike’s payload generator, and press enter to generate a fresh Veil-made executable.

#### 6.4 Java Applet Attacks

Strategic Cyber LLC distributes the source code for Cobalt Strike’s Applet Attacks as the Applet Kit, available in the Cobalt Strike arsenal. Go to **Help -> Arsenal** and download the Applet Kit. Use the included `build.sh` script to build the Applet Kit on Kali Linux. Many Cobalt Strike customers use this flexibility to sign Cobalt Strike’s Java Applet attacks with a code-signing certificate, which is highly recommended.

To make Cobalt Strike use your Applet Kit over the built-in one, load the `applet.cna` script included with the Applet Kit.

On the Cobalt Strike Arsenal Page, you will also notice the Power Applet, an alternate implementation of Cobalt Strike’s Java Applet attacks that uses PowerShell to get a payload into memory. The Power Applet demonstrates the flexibility you have to recreate Cobalt Strike’s standard attacks in a completely different way and still use them with Cobalt Strike’s workflows.

#### 6.5 The Resource Kit

The Resource Kit allows you to change the HTA, PowerShell, Python, VBA, and VBS script templates Cobalt Strike uses in its workflows. The Resource Kit is available to licensed users in the Cobalt Strike arsenal. Go to **Help -> Arsenal** to download the Resource Kit.

The `README.txt` file included with the Resource Kit documents the included scripts and which features use them. To evade a product, consider changing strings or behaviors in these scripts.

To make Cobalt Strike use your script templates over the built-in ones, load the `resources.cna` script included with the Resource Kit.

---

### 7. Post-Exploitation

#### 7.1 The Beacon Console

Right-click on a Beacon session and select "Interact" to open that Beacon’s console. The console is the main user interface for your Beacon session. It allows you to see which tasks were issued to a Beacon and when it downloads them. The Beacon console is also where command output and other information will appear.

In between the Beacon console’s input and output is a status bar. This status bar contains information about the current session, including the target’s NetBIOS name, the username and PID of the current session, and the Beacon’s last check-in time.

Each command issued to a Beacon, whether through the GUI or the console, will show up in this window. If a teammate issues a command, Cobalt Strike will prefix the command with their handle.

You will likely spend most of your time with Cobalt Strike in the Beacon console. It’s worth becoming familiar with its commands. Type `help` in the Beacon console to see available commands. Type `help` followed by a command name to get detailed help.

#### 7.2 The Beacon Menu

Right-click on a Beacon or inside of a Beacon’s console to access the Beacon menu. This is the same menu used to open the Beacon console. The Access menu contains options to manipulate trust material and elevate your access. The Explore menu consists of options to extract information and interact with the target’s system. The Pivoting menu is where you can set up tools to tunnel traffic through a Beacon. The Session menu is where you manage the current Beacon session.

Some of Cobalt Strike’s visualizations (the pivot graph and sessions table) allow you to select multiple Beacons at once. Most actions that happen through this menu will apply to all selected Beacon sessions.

#### 7.3 Asynchronous and Interactive Operations

Be aware that Beacon is an asynchronous payload. Commands do not execute right away. Each command goes into a queue. When the Beacon checks in (connects to you), it will download these commands and execute them one by one. At this time, Beacon will also report any output it has for you. If you make a mistake, use the `clear` command to clear the command queue for the current Beacon.

By default, Beacons check in every sixty seconds. You can change this with Beacon’s `sleep` command. Use `sleep` followed by a time in seconds to specify how often Beacon should check in. You can also specify a jitter factor (a second number between 0 and 99). Beacon will vary each of its check-in times by the random percentage you specify as a jitter factor. For example, `sleep 300 20` will force Beacon to sleep for 300 seconds with a 20% jitter percentage, meaning Beacon will sleep for a random value between 240s and 300s after each check-in.

To make a Beacon check in multiple times each second, try `sleep 0`. This is interactive mode, where commands will execute right away. You must make your Beacon interactive before you tunnel traffic through it. A few Beacon commands (e.g., `browserpivot`, `desktop`, etc.) will automatically put Beacon into interactive mode at the next check-in.