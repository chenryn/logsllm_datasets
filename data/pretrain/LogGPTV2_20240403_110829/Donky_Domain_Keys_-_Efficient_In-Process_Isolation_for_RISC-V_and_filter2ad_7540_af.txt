Manual, Volume II: Privileged Architecture, document
version 1.12-draft.
https://github.com/riscv/
riscv-isa-manual/releases/download/draft-
20200212-c3d1f07/riscv-privileged.pdf, 2020.
[30] Tommaso Frassetto, Patrick Jauernig, Christopher
Liebchen, and Ahmad-Reza Sadeghi. IMIX: In-Process
Memory Isolation EXtension. In USENIX Security Sym-
posium, 2018.
USENIX Association
29th USENIX Security Symposium    1691
[31] Tal Garﬁnkel. Traps and Pitfalls: Practical Problems
in System Call Interposition Based Security Tools. In
NDSS, 2003.
[44] Hojoon Lee, Chihyun Song, and Brent ByungHoon
Kang. Lord of the x86 Rings: A Portable User Mode
Privilege Separation Architecture on x86. In CCS, 2018.
[32] Qian Ge, Yuval Yarom, David Cock, and Gernot Heiser.
A survey of microarchitectural timing attacks and coun-
J. Crypto-
termeasures on contemporary hardware.
graphic Engineering, 8, 2018.
[33] Github: Tunz. Case Study of JavaScript Engine Vulner-
abilities. https://github.com/tunz/js-vuln-db.
[34] Khilan Gudka, Robert N. M. Watson, Jonathan An-
derson, David Chisnall, Brooks Davis, Ben Laurie, Il-
ias Marinos, Peter G. Neumann, and Alex Richardson.
Clean Application Compartmentalization with SOAAP.
In CCS, 2015.
[35] Terry Ching-Hsiang Hsu, Kevin J. Hoffman, Patrick
Eugster, and Mathias Payer. Enforcing Least Privilege
Memory Views for Multithreaded Applications. In CCS,
2016.
[36] Hong Hu, Zheng Leong Chua, Zhenkai Liang, and Pra-
teek Saxena.
Identifying Arbitrary Memory Access
Vulnerabilities in Privilege-Separated Software. In ES-
ORICS, volume 9327 of LNCS, pages 312–331, 2015.
[37] IBM Corporation. Power ISA version 3.0b. 2017.
[38] Yoongu Kim, Ross Daly, Jeremie Kim, Chris Fallin, Ji-
Hye Lee, Donghyuk Lee, Chris Wilkerson, Konrad Lai,
and Onur Mutlu. Flipping bits in memory without ac-
cessing them: An experimental study of DRAM distur-
bance errors. In ISCA, 2014.
[39] Vladimir Kiriansky, Ilia Lebedev, Saman Amarasinghe,
Srinivas Devadas, and Joel Emer. DAWG: A Defense
Against Cache Timing Attacks in Speculative Execution
Processors. ePrint 2018/418, May 2018.
[40] Paul Kocher, Jann Horn, Anders Fogh, Daniel Genkin,
Daniel Gruss, Werner Haas, Mike Hamburg, Moritz
Lipp, Stefan Mangard, Thomas Prescher, Michael
Schwarz, and Yuval Yarom. Spectre Attacks: Exploiting
Speculative Execution. In S&P, 2019.
[41] Koen Koning, Xi Chen, Herbert Bos, Cristiano Giuffrida,
and Elias Athanasopoulos. No Need to Hide: Protecting
Safe Regions on Commodity Hardware. In EUROSYS,
2017.
[42] Volodymyr Kuznetsov, Laszlo Szekeres, Mathias Payer,
George Candea, R. Sekar, and Dawn Song. Code-Pointer
Integrity. In OSDI, 2014.
[43] Dayeol Lee, David Kohlbrenner, Shweta Shinde, Dawn
Song, and Krste Asanovic. Keystone: A Framework for
Architecting TEEs. CoRR, abs/1907.10119, 2019.
[45] Lee Thomason. TinyXML-2. https://github.com/
leethomason/tinyxml2, 2019.
[46] Linux
kernel.
Memory Protection Keys.
https://www.kernel.org/doc/Documentation/
x86/protection-keys.txt, 2017.
[47] Linux kernel.
SECure COMPuting with ﬁlters.
https://www.kernel.org/doc/Documentation/
prctl/seccomp_filter.txt, 2017.
[48] Moritz Lipp, Michael Schwarz, Daniel Gruss, Thomas
Prescher, Werner Haas, Anders Fogh, Jann Horn, Stefan
Mangard, Paul Kocher, Daniel Genkin, Yuval Yarom,
and Mike Hamburg. Meltdown: Reading Kernel Mem-
ory from User Space. In USENIX Security Symposium,
2018.
[49] Richard J. Lipton and Lawrence Snyder. A Linear Time
Algorithm for Deciding Subject Security. J. ACM, 24,
1977.
[50] James Litton, Anjo Vahldiek-Oberwagner, Eslam El-
nikety, Deepak Garg, Bobby Bhattacharjee, and Peter
Druschel. Light-Weight Contexts: An OS Abstraction
for Safety and Performance. In OSDI, 2016.
[51] Yutao Liu, Tianyu Zhou, Kexin Chen, Haibo Chen, and
Yubin Xia. Thwarting Memory Disclosure with Efﬁcient
Hypervisor-enforced Intra-domain Isolation. In CCS,
2015.
[52] Aravind Machiry, Eric Gustafson, Chad Spensky,
Christopher Salls, Nick Stephens, Ruoyu Wang, Anto-
nio Bianchi, Yung Ryn Choe, Christopher Kruegel, and
Giovanni Vigna. BOOMERANG: Exploiting the Se-
mantic Gap in Trusted Execution Environments.
In
NDSS, 2017.
[53] Stephen McCamant and Greg Morrisett. Evaluating SFI
for a CISC Architecture. In USENIX Security Sympo-
sium, 2006.
[54] Larry W. McVoy and Carl Staelin. lmbench: Portable
Tools for Performance Analysis. In USENIX ATC, 1996.
[55] Marcela S. Melara, Michael J. Freedman, and Mic Bow-
man. EnclaveDom: Privilege Separation for Large-TCB
Applications in Trusted Execution Environments. CoRR,
abs/1907.13245, 2019.
[56] Lucian Mogosanu, Ashay Rane, and Nathan Dauten-
hahn. MicroStache: A Lightweight Execution Context
for In-Process Safe Region Isolation. In RAID, volume
11050 of LNCS, 2018.
1692    29th USENIX Security Symposium
USENIX Association
[57] Kit Murdock, David Oswald, Flavio D. Garcia,
Jo Van Bulck, Daniel Gruss, and Frank Piessens. Plun-
dervolt: Software-based fault injection attacks against
intel sgx. In Security and Privacy (S&P), 2020.
[58] Myoung Jin Nam, Periklis Akritidis, and David J.
Greaves. FRAMER: a tagged-pointer capability sys-
tem with memory safety applications. In ACSAC, 2019.
[59] Shravan Narayan, Craig Disselkoen, Tal Garﬁnkel,
Nathan Froyd, Eric Rahm, Sorin Lerner, Hovav
Shacham, and Deian Stefan. Retroﬁtting Fine Grain
Isolation in the Firefox Renderer (Extended Version).
CoRR, abs/2003.00572, 2020.
[60] Bernard Ngabonziza, Daniel Martin, Anna Bailey, Hae-
hyun Cho, and Sarah Martin. TrustZone Explained:
Architectural Features and Use Cases. In CIC, 2016.
[61] Node.js. https://nodejs.org/en/docs/es6/, 2019.
[62] Job Noorman, Jo Van Bulck, Jan Tobias Mühlberg,
Frank Piessens, Pieter Maene, Bart Preneel, Ingrid Ver-
bauwhede, Johannes Götzfried, Tilo Müller, and Felix C.
Freiling. Sancus 2.0: A Low-Cost Security Architecture
for IoT Devices. ACM Trans. Priv. Secur., 20, 2017.
[63] Hewlett Packard. PA-RISC 1.1 architecture and instruc-
tion set reference manual, third edition. 1994.
[64] Soyeon Park, Sangho Lee, Wen Xu, Hyungon Moon,
and Taesoo Kim. libmpk: Software Abstraction for Intel
Memory Protection Keys (Intel MPK). In USENIX ATC,
2019.
[65] Sandro Pinto and Cesare Garlati. User mode interrupts:
A must for securing embedded systems. In Embedded
World Conference, 2019.
[66] Niels Provos, Markus Friedl, and Peter Honeyman. Pre-
venting Privilege Escalation. In USENIX Security Sym-
posium, 2003.
[67] Charles Reis, Alexander Moshchuk, and Nasko Oskov.
Site Isolation: Process Separation for Web Sites within
the Browser. In USENIX Security Symposium, 2019.
[68] Google Security Research.
Google Chrome
72.0.3626.121 / 74.0.3725.0 - ’NewFixedDoubleArray’
Integer Overﬂow.
https://github.com/riscv/
riscv-isa-manual/releases/download/draft-
20200212-c3d1f07/riscv-privileged.pdf, 2020.
[69] Jerome H. Saltzer and Michael D. Schroeder. The pro-
tection of information in computer systems. Proceed-
ings of the IEEE, 63, 1975.
[70] Samuel Gross. Exploiting Logic Bugs in JavaScript
http://www.phrack.org/papers/
JIT Engines.
jit_exploitation.html.
[71] Michael Schwarz, Samuel Weiser, and Daniel Gruss.
Practical Enclave Malware with Intel SGX. In DIMVA,
volume 11543 of LNCS, 2019.
[72] David Sehr, Robert Muth, Cliff Bifﬂe, Victor Khimenko,
Egor Pasko, Karl Schimpf, Bennet Yee, and Brad Chen.
Adapting Software Fault Isolation to Contemporary
CPU Architectures. In USENIX Security Symposium,
2010.
[73] Standard Performance Evaluation Corporation. SPEC
CPU 2017. https://www.spec.org/cpu2017.
[74] Raoul Strackx, Pieter Agten, Niels Avonds, and Frank
Piessens. Salus: Kernel Support for Secure Process
Compartments. ICST Trans. Security Safety, 2, 2015.
[75] Adrian Tang, Simha Sethumadhavan, and Salvatore J.
Stolfo. CLKSCREW: Exposing the Perils of Security-
Oblivious Energy Management. In USENIX Security
Symposium, 2017.
[76] The Computer Language Benchmarks Game Team.
https://benchmarksgame-
Nbody C Benchmark.
team.pages.debian.net/benchmarksgame/
description/nbody.html#nbody.
[77] Peter Teoh. How can eBPF be compromised by
vulnerabilities?
https://tthtlc.wordpress.com/
2019/01/01/how-can-ebpf-be-compromised-by-
vulnerabilities/, 2019.
[78] The New York Times. The Loophole That Turns
Your Apps Into Spies. https://www.nytimes.com/
2019/09/24/opinion/facebook-google-apps-
data.html, 2019.
[79] V8.
The ofﬁcial mirror of the V8 Git repos-
https://github.com/v8/v8/blob/
itory.
3fbeb93760bcf663dcf84b57597f49d7d3b29c02/
src/flags/flag-definitions.h#L665, 2020.
[80] v8 - Untrusted code mitigations. https://v8.dev/
docs/untrusted-code-mitigations, 2019.
[81] v8 developer blog. https://v8.dev/docs, 2019.
[82] Anjo Vahldiek-Oberwagner, Eslam Elnikety, Nuno O.
Duarte, Michael Sammler, Peter Druschel, and Deepak
Garg. ERIM: Secure, Efﬁcient In-process Isolation with
Protection Keys (MPK). In USENIX Security Sympo-
sium, 2019.
USENIX Association
29th USENIX Security Symposium    1693
[83] Nikos Vasilakis, Ben Karel, Nick Roessler, Nathan Daut-
enhahn, André DeHon, and Jonathan M. Smith. Towards
Fine-grained, Automated Application Compartmental-
ization. In PLOS, 2017.
[84] Nikos Vasilakis, Ben Karel, Nick Roessler, Nathan
Dautenhahn, André DeHon, and Jonathan M. Smith.
BreakApp: Automated, Flexible Application Compart-
mentalization. In NDSS, 2018.
[85] Lluís Vilanova, Muli Ben-Yehuda, Nacho Navarro, Yoav
Etsion, and Mateo Valero. CODOMs: Protecting soft-
In ISCA,
ware with Code-centric memory Domains.
2014.
[86] Robert Wahbe, Steven Lucco, Thomas E. Anderson, and
Susan L. Graham. Efﬁcient Software-Based Fault Isola-
tion. In SOSP, 1993.
[87] Jun Wang, Xi Xiong, and Peng Liu. Between Mu-
tual Trust and Mutual Distrust: Practical Fine-grained
Privilege Separation in Multithreaded Applications. In
USENIX ATC, 2015.
[88] Robert N. M. Watson, Robert M. Norton, Jonathan
Woodruff, Simon W. Moore, Peter G. Neumann,
Jonathan Anderson, David Chisnall, Brooks Davis, Ben
Laurie, Michael Roe, Nirav H. Dave, Khilan Gudka,
Alexandre Joannou, A. Theodore Markettos, Ed Maste,
Steven J. Murdoch, Colin Rothwell, Stacey D. Son, and
Munraj Vadera. Fast Protection-Domain Crossing in the
CHERI Capability-System Architecture. IEEE Micro,
36, 2016.
[89] Robert N. M. Watson, Jonathan Woodruff, Peter G. Neu-
mann, Simon W. Moore, Jonathan Anderson, David
Chisnall, Nirav H. Dave, Brooks Davis, Khilan Gudka,
Ben Laurie, Steven J. Murdoch, Robert M. Norton,
Michael Roe, Stacey D. Son, and Munraj Vadera.
CHERI: A Hybrid Capability-System Architecture for
In S&P,
Scalable Software Compartmentalization.
2015.
[90] Samuel Weiser, Luca Mayr, Michael Schwarz, and
Daniel Gruss. SGXJail: Defeating Enclave Malware
via Conﬁnement. In RAID, 2019.
[91] Oﬁr Weisse, Valeria Bertacco, and Todd M. Austin. Re-
gaining Lost Cycles with HotCalls: A Fast Interface for
SGX Secure Enclaves. In ISCA, 2017.
[92] Mario Werner, Thomas Unterluggauer, Lukas Giner,
Michael Schwarz, Daniel Gruss, and Stefan Mangard.
ScatterCache: Thwarting Cache Attacks via Cache Set
Randomization. In USENIX Security Symposium, 2019.
[93] David A. Wheeler. Preventing Heartbleed. IEEE Com-
puter, 47, 2014.
[94] Emmett Witchel, Josh Cates, and Krste Asanovic. Mon-
drian memory protection. In ASPLOS, 2002.
[95] Bennet Yee, David Sehr, Gregory Dardyk, J. Bradley
Chen, Robert Muth, Tavis Ormandy, Shiki Okasaka,
Neha Narula, and Nicholas Fullagar. Native Client: A
Sandbox for Portable, Untrusted x86 Native Code. In
S&P, 2009.
[96] Florian Zaruba and Luca Benini.
The Cost of
Application-Class Processing: Energy and Performance
Analysis of a Linux-Ready 1.7-GHz 64-Bit RISC-V
Core in 22-nm FDSOI Technology. IEEE Trans. VLSI
Syst., 27, 2019.
[97] Mingwei Zhang, Ravi Sahita, and Daiping Liu.
executable-only-memory-switch (xom-switch): Hiding
your code from advanced code reuse attacks in one shot.
Black Hat Asia, 2018.
[98] Lu Zhao, Guodong Li, Bjorn De Sutter, and John Regehr.
ARMor: fully veriﬁed software fault isolation. In EM-
SOFT, 2011.
[99] Yajin Zhou, Xiaoguang Wang, Yue Chen, and Zhi Wang.
ARMlock: Hardware-based Fault Isolation for ARM. In
CCS, 2014.
A System Call Filter Example
1 int interpose_socket(int dom, int type, int prot) {
2
if (CURRENT_DOMAIN != 0) {
errno = EACCES;
return -1;
}
return socket(dom, type, prot);
6
7 }
8 int interpose_open(const char *path, int flags) {
9
if (!login || strchr(path, ’/’)) {
3
4
5
10
11
12
errno = EACCES;
return -1;
}
return open(path, flags);
13
14 }
Listing 2: DonkyLib user mode ﬁlters beneﬁt from the
full application context.
Listing 2 shows how an application using Donky can con-
strain socket creation to the root domain (did=0) only (line 2).
Furthermore, opening of ﬁles is bound to some login proce-
dure via a global variable login and limited to the current
directory (line 9).
Recent additions to the Linux kernel similarly allow such
ﬁlters in userspace [18]. However, unlike Donky, it requires
kernel interaction and a separate thread or process.
1694    29th USENIX Security Symposium
USENIX Association