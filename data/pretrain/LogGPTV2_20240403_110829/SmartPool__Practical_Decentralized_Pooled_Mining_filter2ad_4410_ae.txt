cess without block withholding, namely 1− γ. That is,
the value p for which block withholding is advantageous
satisﬁes
1
1 + (γ2 − 2γ)p > 1− γ.
(2)
We complete the analysis by inspecting the cases where
p is greater than or less than the threshold 1/(2γ −γ2). In
the ﬁrst case it follows that p ≥ 1/2, since this threshold
is always at least 1/2 when 0 < γ ≤ 1, and if γ = 0 then
the attacker has no incentive for dropping blocks. In the
second case, the left hand side of (2) is negative, and so
the inequality in (2) fails in this case.
5 Supporting Other Cryptocurrencies
One can use SMARTPOOL’s design to build decentral-
ized mining pools for other cryptocurrencies. For clarity
of exposition, we ﬁx Bitcoin as the target in this section.
The overall protocol is still similar to what have been dis-
cussed in previous sections, but here we present the detail
changes to make SMARTPOOL work with Bitcoin while
the contract is running on the Ethereum blockchain.
Generating a block template.
is
In Ethereum,
straightforward to to generate a valid block template, i.e.,
just by using the pool’s address in the “coinbase address.”
It is tricker in Bitcoin since the block header is much sim-
pler, (see Table 3 in Appendix 10.2) and the pool oper-
ates in another cryptocurrency (i.e., Ethereum). To gen-
erate a share that belongs to the pool, we leverage a spe-
cial transaction in Bitcoin called a “coinbase transaction”
whose outputs consist of a list of Bitcoin addresses paid
and along with their payment amounts.
it
Speciﬁcally, in order to generate valid shares, a miner
queries the verClaimList in the contract which records
the contributed shares by different miners to date. The
miner then prepares the coinbase transaction such that
the ﬁrst output pays to the miner who mined the block;
the latter outputs pay to other miners included in the
verClaimList. The sum of all outputs in the coinbase
transaction equals the block reward. Thus, if a miner
ﬁnds a fraction f of the shares in SMARTPOOL, he gets
paid proportional to f in the reward that SMARTPOOL’s
miners get every time they mine a valid block.
Verifying a claim. As before, we use the probabilis-
tic approach which samples random shares from a claim.
However, in SMARTPOOL, verifying a Bitcoin share is
slightly different from verifying an Ethereum share. Typ-
ically, a Bitcoin share is valid if the miner can demon-
strate that the share has a valid coinbase transaction (la-
beled as the ﬁeld Coinbase) in their ShareProof paid
out to the pool members. The miner cannot selectively
1420    26th USENIX Security Symposium
USENIX Association
choose to omit this transaction; it is required to be the
ﬁrst transaction in the list of transactions (called TxList)
on which the miner has searched for shares. The claimant
must submit a Merkle root as commitment over the set
TxList he has selected, and a Merkle proof (labeled
CoinProof) that it contains the coinbase transaction.
Second, the ShareProof contains an indication of the
verClaimList based on which the payouts to miners
were determined by the claimant. This last ﬁeld is called
a Snapshot to allow discretizing payouts over an ever-
growing verClaimList. This is used to check the cor-
rectness of the coinbase transaction, i.e. if all the out-
puts pay to miners correctly. Figure 4 in the Appendix
reports on all data ﬁelds of our Claim and ShareProof
structures.
6
Implementation and Evaluation
We implemented SMARTPOOL and deployed it on
Ethereum and Ethereum classic (main) networks. In this
section, we describe the implementation (along with a
Bitcoin pool implementation) and report actual fees from
real mining that was done with SMARTPOOL.
6.1
Implementation
We implement SMARTPOOL protocol (as described in
Figure 4) in an Ethereum smart contract and a miner soft-
ware (client) that interacts with the contract according
to our protocol [12]. Our smart contract implementation
consists of two main modules, namely, claim submission,
claim veriﬁcation.
Claim submission. This module allows miners to sub-
mit their shares in batch. A miner submits a batch of
shares by calling submitClaim() with the parameters:
(i)
the root of the corresponding augmented Merkle
tree for the shares; (ii) number of shares in the tree;
(iii) counter interval of the shares. A submission is ac-
cepted only if the smallest counter is greater than the
current biggest counter.
Claim veriﬁcation. A miner submits a proof for
the validity of his last submitted claim by calling
verifyClaim() with a branch in the augmented Merkle
tree that corresponds to the next block hash. We allow
different claims to include different amounts of shares,
i.e. NShare can vary between claims. If the veriﬁcation
fails, then the claim is discarded, and the miner will not
be able to submit all the shares (or a subset of them) again
(forced by validating the counter in submitClaim()). If
the veriﬁcation is successful, then the claim is added to
the to the verClaimList list.
6.1.1 Verifying Ethereum PoW
The PoW function that Ethereum is using is Ethash [16].
Ethash is not a native opcode nor a pre-compiled con-
tract in the Ethereum virtual machine (EVM). Hence, to
verify that a block header satisﬁes the required difﬁculty
we have to explicitly implement Ethash function. Ethash
was designed to be ASIC resistant, which is achieved by
forcing miners to extract 64 values from pseudo-random
positions of a 1 GB dataset. Thus, to explicitly com-
pute Ethash, one would have to store 1 GB data in a
contract, which costs roughly 33,554 Ether (storing 32
bytes of data costs 50,000 gas). Moreover, the Ethereum
protocol dictates that the dataset is changed every four
days (on average). Hence, one would require a budget
of approximately $3,000,000 per day as of June 2017 to
maintain the dataset, which is impractical. Alternatively,
one could store a smaller subset of the seed elements and
calculate the values of the dataset on the ﬂy. Unfortu-
nately, to extract values from the seed one would have
to compute several SHA3 512 calculations, which is not
a native opcode in the EVM, and would require massive
gas usage if queried many times.
Fortunately, for our purposes, we do not need to fully
compute Ethash. Instead it is enough to just verify the
result of an Ethash computation. Thus, we ask the miner
to submit along with every block header the 64 dataset
values that are used when computing its Ethash and a
witness for the correctness of the dataset elements. The
witness shows that the 64 values are from the correspond-
ing positions in the 1 GB dataset. Intuitively, to verify
the witness for dataset elements, the contract will keep
the Merkle-root of the dataset and a witness for a single
element is its Merkle-branch. Formally, the pool contract
holds the Merkle-roots of all the 1 GB datasets that are
applicable for the next 10 years. We note that the con-
tent of the dataset only depends on block number (i.e.,
the length of the chain). Hence, it is predictable and the
values of all future datasets are already known. Storing
the Merkle roots of one year dataset requires storing 122
Merkle hashes, and would cost only 0.122 Ether.
We note that technically, our approach does not pro-
vide a mathematical guarantee for the correct computa-
tion of Ethash. Instead it guarantees the correct compu-
tation provided that the public dataset roots stored on the
contract were correct. Hence, it is the miner’s respon-
sibility (and best interest) to verify the stored values on
the contract before joining the pool. As the veriﬁcation
is purely algorithmic, no trust on the intentions of the
contract authors is required.
6.1.2 Coinbase Transactions in Bitcoin
Recall that the payment to the Bitcoin miners is done
via the coinbase transaction of a block. As per Figure 4,
USENIX Association
26th USENIX Security Symposium    1421
SMARTPOOL allows miners to fetch the verClaimList
and build the coinbase transaction locally. This ap-
proach, however, has a technical challenge regarding the
transaction size when we implement SMARTPOOL in the
current Ethereum network. Speciﬁcally, a single coin-
base transaction may have many outputs to pay to hun-
dreds or thousands of miners. As a result, the size of the
coinbase transaction could be in the order of 10KB (e.g.,
P2POOL’s coinbase transactions is of size 10KB [24]).
Hence, it is expensive to submit a coinbase transaction
of that size to an Ethereum contract.
In SMARTPOOL
implementation we could not ask miners to construct the
coinbase transaction naively and submit as the input for
verifyClaim() function.
To address the challenge, we modify SMARTPOOL
protocol slightly. Instead of asking miners to construct
the coinbase transaction naively as in P2POOL, we ask
them to work on only a small part of it. Speciﬁcally,
we observe that we can ﬁx the postﬁx of the coinbase
transaction by using the pay per share scheme. Recall
that the block reward consists of the block subsidy (12.5
Bitcoin) and the transaction fees. Thus, in our imple-
mentation, we pay the transaction fees to the miner who
ﬁnds the block. The remaining 12.5 Bitcoin (the block
subsidy) is paid to, say, the next 1 million shares in
verClaimList. This distribution is encoded in all the
latter outputs. Thus, we can ﬁx all the outputs but the
ﬁrst one in the coinbase transaction, since the next 1 mil-
lion shares in verClaimList are the same for all min-
ers. This allows us to maintain the postﬁx of the coinbase
transaction in SMARTPOOL and only ask miners to sub-
mit the preﬁx (the ﬁrst output) when they verify a share.
Our approach signiﬁcantly reduces both the gas fees paid
for verifyClaim() and also the amount of bandwidth
that miners have to send for veriﬁcation.
Block submission. In SMARTPOOL-based pool for Bit-
coin, there exists the block submission module which al-
lows any user to submit a witness for a new valid block
in the Bitcoin blockchain so that SMARTPOOL can have
the latest state of the blockchain. If the block is mined
by miners in SMARTPOOL, SMARTPOOL updates the
verClaimList to remove the paid shares from the list.
This also reduces the amount of persistent storage re-
quired in the contract since we do not need to store all
veriﬁed claims in SMARTPOOL.
There are other technical subtleties in block submis-
sion and constructing coinbase transactions. We discuss
these in Appendix 10.2.
6.2 Experimental Results
We deployed SMARTPOOL on Ethereum [25] (and
Ethereum classic [26]) live networks and mined with
them with 30GH/s (4GH/s) hash power for 7 days (1
Function
submitClaim()
verifyClaim()
Gas
79,903
2,872,693
Price
0.000319612
0.011490772
% of reward
0.01%
0.6%
Table 2: Ethereum fees of contract operations for Ethereum
pool. Prices are in Ether. We note that in verifyClaim() for
the Ethereum pool, 2.1M gas is spent on Ethash veriﬁcation.
week). The pool successfully mined over 20 blocks [27]
(85 blocks [28]) in corresponding periods. In this sec-
tion we report the deployment cost of the contract and
the fees that our protocol entails.
For verifyClaim(), we measure the cost to check 1
sample. The cost to check multiple samples can be eas-
ily computed from the cost to check 1. The results are
presented in Tables 2.
The contract consists of over 1,300 lines of Solid-
ity code. The deployment of the contract consumed
4,351,573 gas (6.24 USD). The contract source code is
publicly available [29]. To reduce veriﬁcation costs, we
have submitted 1024 Merkle nodes for each 1GB dataset,
namely, all the nodes in depth 10 of the Merkle tree. This
operation was done is 11 transactions, which consumed
in total around 6,000,000 gas (around 15 USD) [30]. We
emphasize that this operation is done only once every
30,000 Ethereum blocks, or roughly 5 days. We report
the evaluation of the claim submission and veriﬁcation in
transactions [31,32]. In our report, a miner with 20 GH/s
submits a batch of shares every 3 hours. Every batch is
rewarded with around 1.8 Ether (630 USD), and entails
total gas fees of 0.011 Ether. Hence, the miner pays 0.6%
for the effective pool fees.
7 Related Work
A number of previous works have studied the problem
of addressing centralization in cryptocurrencies, and ad-
dressing ﬂaws in pool mining protocols. We discuss
these here, and further discuss security of smart contract
applications of which SMARTPOOL is an instance.
P2POOL. The work which most directly relates to
SMARTPOOL is P2POOL [8]. As discussed in Sec-
tion 2.1, P2POOL consumes much more resources (both
computation and network bandwidth), and the variance
of reward is much higher than in centralized pools.
SMARTPOOL solves these problems in P2POOL by i)
relying on the smart contracts which are executed in a
decentralized manner; ii) using probabilistic veriﬁcation
and a novel data structure to reduce veriﬁcation costs
signiﬁcantly; iii) applying simple penalty scheme to dis-
courage cheating miners. As a result, SMARTPOOL is
the ﬁrst decentralized pooled mining protocol which has
low costs, guarantees low variance of reward to miners.
Further, SMARTPOOL is more secure than P2POOL since
1422    26th USENIX Security Symposium
USENIX Association
any miner who has more than 50% of the mining power
in P2POOL can fork and create a longer share-chain.
On the other hand, the adversary has to compromise the
Ethereum network to attack SMARTPOOL.
Pooled mining research. Several previous works have
analysed the security of pooled mining in Bitcoin [2, 4,
9–11]. In previous works [9–11], researchers study the
block withholding attack to mining pools and show that
the attack is proﬁtable when conducted properly. In [2]
Rosenfeld et al. discussed (i) “pool hopping” in which
miners hop across different pools to exploit a weakness
of an old payoff scheme, and (ii) “lie in wait” attacks that
allows miner to strategically calculate the time to sub-
mit his blocks. These challenges also apply to SMART-
POOL when SMARTPOOL is used as a decentralized min-
ing pool in existing networks, and have speciﬁc payoff
schemes to reward miners as solutions. The design of
SMARTPOOL is agnostic to the payoff scheme used to
reward miners. Furthermore, if SMARTPOOL were to be
deployed natively in a cryptocurrency as the only mining
pool (see Appendix 10.1), these attacks no longer work.
In [13], Miller et al. study different puzzles and pro-
tocols which either make pooled mining impossible and/
or disincentivize it. Out work is different from [13] in
several aspects. First, we aim to provide an efﬁcient and
practical decentralized pooled mining protocol so miners
have an option to move away from centralized mining
pools. Second, SMARTPOOL is compatible with current
Bitcoin and Ethereum networks as we do not require any
changes in the design of these cryptocurrencies. In [13],
the solutions are designed for new and future cryptocur-
rencies.
In [3, 4], the authors study the decentralization of the
Bitcoin network. Previous works have highlighted that
Bitcoin is not as decentralized as it was intended ini-
tially in terms of services, mining and protocol develop-
ment [3,33]. On the other hand, Bonneau et al. provided
an excellent survey on Bitcoin which also covered the
security concerns of pooled mining [4].
Smart contract applications.
Previous works pro-
posed several applications which leveraged smart con-
tracts [34–36]. For example, in [35], Juels et al. study
how smart contracts support criminal activities, e.g.
money laundering, illicit marketplaces, and ransomware
due to the anonymity and the elimination of trust in the
platform. Such applications are built separately from the
underlying consensus protocol of the network.
In this
work, we propose a new application of smart contract
that enhances the security of the underlying network by
supporting decentralized mining pools. Bugs in smart
contract implementations are a practical concern; we be-
live the use of bug-detection tools such as Oyente [17]
are useful to SMARTPOOL as well as other.
8 Conclusion
In this paper, we present a new protocol design for an
efﬁcient decentralized mining pool in existing cryptocur-
rencies. Our protocol, namel SMARTPOOL, resolves the