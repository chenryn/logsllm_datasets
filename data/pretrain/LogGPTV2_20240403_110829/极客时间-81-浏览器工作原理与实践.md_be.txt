### 1. 排队（Queuing）时间过久排队时间过久，大概率是由浏览器为每个域名最多维护 6个连接导致的。那么基于这个原因，你就可以让 1个站点下面的资源放在多个域名下面，比如放到 3个域名下面，这样就可以同时支持 18个连接了，这种方案称为**域名分片**技术。除了域名分片技术外，我个人还建议你**把站点升级到HTTP2**，因为 HTTP2 已经没有每个域名最多维护 6 个 TCP 连接的限制了。
### 2. 第一字节时间（TTFB）时间过久这可能的原因有如下：-   **服务器生成页面数据的时间过久**。对于动态网页来说，服务器收到用户打开一个页面的请求时，首先要从数据库中读取该页面需要的数据，然后把这些数据传入到模板中，模板渲染后，再返回给用户。服务器在处理这个数据的过程中，可能某个环节会出问题。-   **网络的原因**。比如使用了低带宽的服务器，或者本来用的是电信的服务器，可联通的网络用户要来访问你的服务器，这样也会拖慢网速。-   **发送请求头时带上了多余的用户信息**。比如一些不必要的 Cookie    信息，服务器接收到这些 Cookie    信息之后可能需要对每一项都做处理，这样就加大了服务器的处理时长。对于这三种问题，你要有针对性地出一些解决方案。面对第一种服务器的问题，你可以想办法去提高服务器的处理速度，比如通过增加各种缓存的技术；针对第二种网络问题，你可以使用CDN来缓存一些静态文件；至于第三种，你在发送请求时就去尽可能地减少一些不必要的Cookie 数据信息。
### 3. Content Download 时间过久如果单个请求的 Content Download花费了大量时间，有可能是字节数太多的原因导致的。这时候你就需要减少文件大小，比如压缩、去掉源码中不必要的注释等方法。
## 总结好了，今天就介绍到这里了，下面我来总结下今天的内容。首先我们简单介绍了 Chrome 开发者工具 10个基础的面板信息；然后重点剖析了网络面板，再结合之前介绍的网络请求流程来重点分析了网络面板中时间线的各个指标的含义；最后我们还简要分析了时间线中各项指标出现异常的可能原因，并给出了一些优化方案。其实通过今天的分析，我们可以得出这样一个结论：如果你要去做一些实践性的项目优化，理解其背后的理论至关重要。因为理论就是一条"线"，它会把各种实践的内容"串"在一起，然后你可以围绕着这条"线"来排查问题。
## 思考时间今天我们介绍了网络面板，还有一个非常重要的 Performance面板我们没有介绍，不过你可以去网上查找一些相关的资料。所以今天留给你的是一道实际操作的题目，你可以结合网络面板和 Performance面板来分析一个 Web应用的性能瓶颈（比如[https://www.12306.cn](https://www.12306.cn/index/)）。欢迎在留言区与我分享你的想法，也欢迎你在留言区记录你的思考过程。感谢阅读，如果你觉得这篇文章对你有帮助的话，也欢迎把它分享给更多的朋友。![](Images/7e91bd5c116048de87e68468f727fc3c.png){savepage-src="https://static001.geekbang.org/resource/image/3f/cb/3f4d5bec2d5c89600b4628581144d8cb.jpg"}
# 22 \| DOM树：JavaScript是如何影响DOM树构建的？在[上一篇文章](https://time.geekbang.org/column/article/138844)中，我们通过开发者工具中的网络面板，介绍了网络请求过程的几种**性能指标**以及对页面加载的影响。而在渲染流水线中，后面的步骤都直接或者间接地依赖于 DOM结构，所以本文我们就继续沿着网络数据流路径来**介绍 DOM树是怎么生成的**。然后再基于 DOM树的解析流程介绍两块内容：第一个是在解析过程中遇到 JavaScript 脚本，DOM解析器是如何处理的？第二个是 DOM 解析器是如何处理跨站点资源的？
## 什么是 DOM从网络传给渲染引擎的 HTML文件字节流是无法直接被渲染引擎理解的，所以要将其转化为渲染引擎能够理解的内部结构，这个结构就是DOM。DOM 提供了对 HTML 文档结构化的表述。在渲染引擎中，DOM有三个层面的作用。-   从页面的视角来看，DOM 是生成页面的基础数据结构。-   从 JavaScript 脚本视角来看，DOM 提供给 JavaScript    脚本操作的接口，通过这套接口，JavaScript 可以对 DOM    结构进行访问，从而改变文档的结构、样式和内容。-   从安全视角来看，DOM 是一道安全防护线，一些不安全的内容在 DOM    解析阶段就被拒之门外了。简言之，DOM 是表述 HTML 的内部数据结构，它会将 Web 页面和 JavaScript脚本连接起来，并过滤一些不安全的内容。``{=html}