witness-extended emulation, if P∗ does not produce an
accepting transcript tr on the ﬁrst run, the extractor is al-
lowed to exit early with (tr,⊥). If tr is accepting, rewind
to the point after r is chosen and run EMIPP−k, EHMIPP,
EHWW, and ETIPP to extract (a0,z1,z3,z4,A,B,C, ˆS(cid:48)).
Finally, output (a0,A[:n],B[:n],C[:n]).
Note that EHICIAP algorithm is expected polynomial
time, since its runtime is at most the sum of the runtimes
of EHMIPP, EHWW, and ETIPP, which are assumed to be
expected polynomial time.
To prove the claimed relations hold, ﬁrst note that
the commitment comin = ˆS∗ ck1,[:n−2] is computationally
binding under the (n− 2)-ASDBP assumption, and so,
with overwhelming probability, ˆS(cid:48) = ˆS.
It remains to show that, with overwhelming probability,
the extracted witness satisﬁes the Groth16 veriﬁcation
condition. That is, for all i = 1, . . . ,n,
e (Ai,Bi) = e ([α]1 , [β ]2)· e (Ci, [δ ]2)· e(cid:0) ˆSi, [γ]2
(cid:1) .
The commitments comA, comB, comC are computationally
binding under the n-ASDBP assumptions. Further, since
P1,P2,P3 are unrelated by assumption,
the Pedersen
commitment coma0 is computationally binding by the
DL hardness assumption. Thus, with overwhelming
probability, the formal product being evaluated in TIPP
is the one committed to by comA, comB, comC, i.e.,
e (Ai,Bi)xi
n
∏
i=1
=
i=1
n−2
e (a0W0, [γ]2)xi · n
∏
∏
(cid:1)xi · n
e(cid:0) ˆSi, [γ]2
· n−2
∏
· e ([z1]1 , [γ]2)xn−1
∏
i=1
i=1
e([α]1 , [β ]2)xi
i=1
e (Ci, [δ ]2)xi
Then by the Schwartz-Zippel lemma, the above relation
holds with probability at least 1− n/p. Since the above
equality directly implies the Groth16 veriﬁcation condi-
tion, the theorem is proved.
Theorem 3 (HICIAP Perfect Honest Veriﬁer Zero Knowl-
dege). The HICIAP protocol is perfect HVZK, provided
that n ≥ 16.
Proof. A HICIAP proof consists of the values
comin, coma0, comA, comB, comC, aggin, aggC,W,
trMIPP-k, trHMIPP, trHWW, trTIPP.
We construct a simulator that knows a Groth16 simulation
trapdoor τ to crs and which can choose the veriﬁer’s
randomness in advance, such that the simulated transcript
is indistinguishable from an honest prover’s transcript.
The simulator will also use the simulators described
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:59:56 UTC from IEEE Xplore.  Restrictions apply. 
963
in Lemmas 4 and 6 which generate transcripts for
subprotocols HMIPP and HWW,
SimHMIPP(ck, comC, aggc,r) → trHMIPP
SimHWW(coma0,W,P1,P2,P3,G1,G2) → trHWW.
The simulator is given the Groth16 prepared public
inputs ˆS and behaves as follows.
1) The simulator computes the ﬁrst prover message
coma0, comA, comB, comC. It chooses randomness
a0,z1,z2 ← F and coma0 ← G1 and comC ← GT . It
runs
(A(cid:48)
i,B(cid:48)
i,C(cid:48)
i) = SimGroth16(crs,τ, (a0, ˆSi))
for 1 ≤ i ≤ n− 2. It sets
A := A(cid:48)|| [z1]1|| [z2]1
B := B(cid:48)|| [γ]2|| [δ ]2
C := C(cid:48)|| [1]1|| [z2]1
comA := A∗ ck1
comB := ck2 ∗ B
2) The simulator computes the ﬁrst veriﬁer message
honestly and chooses r ← F randomly.
3) The simulator uses ˆS to construct aggin and trMIPP-k
honestly.
4) The simulator computes the second prover message
(aggC,W ) honestly as
aggC := Cr
W := [z1rn−1]1 +
n−2
∑
i=1
ria0W0
for r = (r,r2, . . . ,rn).
5) The simulator generates a transcript trHMIPP for the
HMIPP protocol by running
trHMIPP := SimHMIPP(crs, comC, aggc,r)
6) The simulator generates a transcript trHWW for the
HWW protocol by running
trHWW :=
SimHWW(coma0,W,P1,P2,P3,
n−2
∑
i=1
riW0, [rn−1]1)
7) The simulator computes aggAB honestly and gener-
ates a transcript trTIPP by running
trTIPP := TIPP(ck, (comA, comB, aggAB,r),A,B).
We will show that the simulator’s transcript is indis-
tinguishable from an honest prover’s. We look at the
distribution of each of the proof components.
The MIPP optimization. We ﬁrst note that
this
optimization is simulated perfectly, since it involves no
witness values. Speciﬁcally, comin, aggin, and trMIPP-k are
simulated perfectly, since both the prover and simulator
have access to the Groth16 public prepared inputs ˆS.
The ﬁrst prover message. We look at coma0, comA,
comB, and comC. In the real prover execution: coma0 is
distributed uniformly at random because it is randomized
by z3; comA is distributed uniformly at random because
it is randomized by z2; comB is distributed uniformly
at random because it is randomized by B(cid:48)
n−2; comC is
distributed uniformly at random because it is randomized
by z4. In the simulated execution: coma0
is chosen
uniformly at random; comA is distributed uniformly
at random because it is randomized by z2; comB is
distributed uniformly at random because it is randomized
by B(cid:48)
n−2; comC is chosen uniformly at random. Thus
both the provers and the simulators ﬁrst messages are
distributed randomly and are indistinguishable.
The second prover message. We second look at aggC,
W . In the real prover execution: aggC is distributed
uniformly at random because it is randomized by C(cid:48)
n−2;
W is distributed uniformly at random because it
is
randomized by z1. In the simulated execution: coma0
is chosen uniformly at random; aggC is distributed
uniformly at random because it is randomized by C(cid:48)
n−2;
comW is distributed uniformly at random because it
is randomized by z1. Thus both the provers and the
simulators second messages are distributed randomly and
are indistinguishable.
The hidden MSM argument. We see that trHMIPP gen-
erated by the prover and simulator are indistinguishable
by the zero-knowledge of HMIPP (Lemma 4).
The HWW argument. We see that trHWW generated
by the prover and simulator are indistinguishable by the
perfect zero-knowledge of HWW (Lemma 6).
The TIPP argument.
In order to argue that trTIPP
generated by the prover and simulator are indistinguish-
able we must look at the rerandomizations of each
(Ai,Bi,Ci). The bulk of the following argument consists of
demonstrating that enough values in the HICIAP protocol
are independent and uniformly distributed. To do this, we
associate each iid uniform blinding factor to at most one
transcript variable. One thing to be careful about here is
enforcing the “at most one” requirement.
Following [HKR19] we deﬁne a masking set M of size
O(log2 n) that deﬁnes a position of randomized values
that will ensure the transcripts appear random in the
recursion. We track the parts of the TIPP transcript which
are functions of A,B, ck1, ck2 (where we let A represent
r(cid:12)A and ck1 represent r−1(cid:12) ck1 for simplicity). In each
round of the TIPP protocol (of which there are logn),
the prover sends six values:
comLA := A[:h] ∗ ck1
comLB := ck2 ∗ B[:h]
aggLR := A[:h] ∗ B[h:]
comRA := A[h:] ∗ ck1
comRB := ck2 ∗ B[h:]
aggRL := A[h:] ∗ B[:h]
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:59:56 UTC from IEEE Xplore.  Restrictions apply. 
964
The veriﬁer sends a challenge x, which deﬁnes the
prover’s values for the next round:
A(cid:48) := A[:h] + x· A[h:]
B(cid:48) := B[:h] + x−1 · B[h:]
ck(cid:48)
1 := ck1,[:h] + x−1 · ck1,[h:]
ck(cid:48)
2 := ck2,[:h] + x· ck2,[h:]
Note that a randomized Ai value in round k will
yield a uniform value of A j
in round k + 1, where
j ≡ i (mod 2k−1), and similarly for Bi.
With 6 proof elements in each round, we need to
ensure there are at least 6 randomizers per round, and
that one unique randomizer appears in each proof element.
We divide them as 3 randomizers in A (to random-
ize comLA, comRA, aggLR) and 3 in B (to randomize
comLB, comRB, aggRL). We deﬁne the masking set
M = {2k,2k + 1}(cid:96)−1
k=2 ∪{2k − 1}(cid:96)−1
k=2,
where (cid:96) = log2(n). The two sets making up M are non-
overlapping. Note that because log2(n) ≥ 4 we have that
M also does not overlap with the blinders B(cid:48)
n−2.
For the components aggLR and aggRL in the TIPP
argument, we must use the fact that with overwhelming
probability, none of the components of a Groth16 proof
(Ai,Bi,Ci) equals 0. This implies that the rerandomization
is a uniform proof of the same statement, and also
contains no zeros.
n−2 or C(cid:48)
With this in mind we argue that M is sufﬁcient to
randomize the distribution of the comLA, comRA, aggLR
components of TIPP. To see this, observe that in round
k with veriﬁer challenges x0, . . . ,xk−1
Denote
and
and
RLA,k,bbb = ∑
s∈{0,1}k
ckA,(s,1,b) fk,x−1(s)
RRA,k,bbb = ∑
s∈{0,1}k
ckA,(s,0,b) fk,x−1(s)
RLR,k,bbb = ∑
s∈{0,1}k
Bs,1,b fk,x−1(s)
Observe that with overwhelming probability, each of
{RLR,k−1,(0,0,1)}(cid:96)−1
k=1 are non-zero, depend non-trivially
on xk−1, and have no dependence on xk Thus the
RLR,0,(0,000,1), . . . ,RLR,(cid:96)−2,(0,000,1) are pairwise independent
and ensure that: the A0,0,1 term in aggLR,2 (denoting
the second round’s aggLR) is randomized by x1 and
thus is independent from the A0,0,1 terms in aggLR,1;
the A0,0,0,1 term in aggLR,3 is randomized by x2 and thus
is independent from the A0,0,0,1 terms in aggLR,1 and
aggLR,2; etc. Thus A0,0,1 perfectly blinds aggLR except
with negligible probability.
By the same argument, the RLA,k,(000,0,1,000,1) terms are
pairwise independent and the RLB,k,(000,1,000)
terms are
pairwise independent ensuring independence between the
A000,0,1,000,1 terms in comLA,k and A000,1,000 terms in comLB,k
respectively. Thus A0,0,1,0,1, A0,1,0 terms perfectly blind
comLA, comRA except with negligible probability.
By a symmetric argument we see that B0,0,1,0,1, B0,1,0,
B0,0,1 perfectly blinds comLB, comRB, aggRL except with
negligible probability.
We now consider the penultimate round (round (cid:96)−
1). Here the proof elements comLA, comLB, comRA and
comRB of both the honest prover and simulator take the
form
comLA = e(A(cid:96)−1,1,H2), comRA = e(A(cid:96)−1,2,H1),
comLB = e(G1,B(cid:96)−1,2), comRB = e(G2,A(cid:96)−1,1)
for ck1,(cid:96)−1 = (H1,H2) and ck2,(cid:96)−1 = (G1,G2). Thus the
proof elements
aggLR = e(A(cid:96)−1,1,B(cid:96)−1,2), aggRL = e(A(cid:96)−1,2,B(cid:96)−1,1)
are uniquely determined given comLA, comLB, comRA
and comRB. Hence they are sampled from the same
distribution.
s∈{0,1}k
 ∑
 ∑
 ∑
s∈{0,1}k
comLA =
∏
b∈{0,1}(cid:96)−k−1
e
comRA =
∑
b∈{0,1}(cid:96)−k−1
e
aggLR =
∏
A(s,0,b) fk,x(s), ∑
s∈{0,1}k
A(s,1,b) fk,x(s), ∑
s∈{0,1}k
ckA,(s,1,b) fk,x−1(s)
 ,
 ,
 ,
(cid:1) for s ∈ {0,1}k
B(s,1,b) fk,x−1(s)
ckA,(s,0,b) fk,x−1(s)
e
A(s,0,b) fk,x(s), ∑
s∈{0,1}k
b∈{0,1}(cid:96)−k−1
s∈{0,1}k
where fk,x(s) := ∏k−1
and Ab represents Ai when b is the binary representation
of the integer i. Thus
(cid:0)s jxk− j−1 + 1− s j
j=0
• A0,0,1,0,1 is included in comLA in the kth round and
corresponds to the blinder 2(cid:96)−k−2 + 1
• A0,1,0 is included in comRA in the kth round and
corresponds to the blinder 2(cid:96)−k−1.
• A0,0,1 is included in aggLR in the kth round and
corresponds to the blinder 2(cid:96)−k−1 − 1.
965
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:59:56 UTC from IEEE Xplore.  Restrictions apply.