process (e.g., a web server). Existing programs assume a
shared memory space for threads and SMVs must therefore
validate that all threads follow the memory rules deﬁned
by the programmer (cf. Section 3.2). Threads that deviate
from these memory reference rules are killed by the system.
The SMV model aims to strictly conﬁne the memory ac-
cess boundaries for multithreaded programs while preserv-
ing all four desired requirements for intra-process isolation.
We argue in Section 3 that the SMV model along with the
memory access enforcement can constrain threads within the
programmer-deﬁned memory boundaries.
3. SMV MODEL DESIGN
The SMV model consists of three abstractions: memory
protection domains, secure memory views, and SMVthreads.
The SMV model uses user-deﬁned security policies to en-
force the threads’ privileges in accessing the shared memory
space. The ﬂexibility and programmability of the model al-
lows a programmer to specify the protection domains using
high-level abstractions while enforcing the security policy
at the lowest level of the software stack (page tables) with
acceptable runtime overhead.
3.1 Memory Protection Domains
We deﬁne a memory protection domain as a contiguous
range of virtual memory. Any memory address can only
belong to one memory protection domain.
In this way, a
large shared memory space such as the heap can be divided
into several distinct sets of memory protection domains. For
example, a process can create a private memory protection
domain that is only accessible by one thread, or a partially
shared memory protection domain such that only threads
with explicit privileges can access it.
In addition, an in-
memory communication domain can be allocated with global
access privileges so that all threads can exchange data with-
out relying on expensive IPC. In general, an unprivileged
thread cannot tamper with a memory protection domain
even if there exists a defect in the code of the thread. We
use the term memory domain to refer to the memory pro-
tection domain in the rest of the paper.
3.2 Secure Memory Views
We deﬁne a secure memory view (SMV) to be a thread
container with a collection of memory domains. The mem-
ory blocks covered by a memory view can only be accessed
by threads explicitly given permission to run in the corre-
sponding privileged SMV. Therefore, we consider a memory
view to be secure.
We deﬁne three abstract operations for deﬁning the com-
position of an SMV:
• Register(SMV,MD): registers memory domain MD as part
of SMV ’s memory view.
• Grant(SMV,MD,P): grants SMV the capability to access
memory domain MD with access privilege P.
• Revoke(SMV,MD): revokes SMV ’s capabilities to access
memory domain MD.
We categorize the privileges P of an SMV to access a
memory domain into four operations:
• Read : An SMV can read from the memory domain.
• Write: An SMV can write to the memory domain.
• Execute: An SMV can execute in the memory domain.
• Allocate: An SMV can allocate/deallocate memory space
in the memory domain.
The access privileges to each of the memory domains for
an SMV can be diﬀerent. Two SMVs can reference the
same memory domain but the access privileges can diﬀer.
The programmer can set up the SMV’s privileges to access
memory domains in the way needed for the application at
hand. For example, multiple threads sharing the same secu-
rity context can be assigned to the same SMV to parallelize
the workload (LO). To minimize an application’s attack sur-
face, the programmer can assume the main parent thread
to be the master thread of a program. All the permission
modiﬁcations must be done by the master thread and are
immutable by child threads. The SMV model considers any
access to a memory domain without proper privileges to be
an SMV invalid memory access. We implemented the privi-
lege enforcement at the OS kernel level and detail the design
in Section 4.5.
3.3 SMVthread
An SMVthread is a thread that strictly follows the privileges
deﬁned by an SMV to access memory domains. SMVthreads
run in the memory view deﬁned by an SMV and cannot
change to other SMVs. While the popular pthreads have
to trust all pthreads running in the same memory space,
SMVthreads distrust other SMVthreads by default. SMVthreads –
unlike pthreads – must explicitly share access to the intrin-
sically shared memory space with other SMVthreads. We de-
signed SMVthreads to partially share the memory space with
3.5 SMV Architecture
The SMV architecture consists of two parts: a user space
programming interface and a kernel space privilege enforce-
ment mechanism. Figure 1 gives an overview. In short, a
user space application can call the SMV API to use the SMV
model. In the OS kernel, the SMV kernel module is respon-
sible for exchanging the messages between the user space
component and the kernel memory management subsystem.
We added SMV metadata management to the OS memory
management subsystem to record the memory access privi-
leges for the SMVs. We modiﬁed the page table management
logic to support partially shared page tables and added the
SMV privilege checks to the page fault handler that enforces
the memory access control.
With the user space interface and the support from the OS
kernel, applications can explicitly structure the intrinsically
shared process memory space into distinct memory domains
with diﬀerent access privileges without any hardware mod-
iﬁcations. Therefore, our approach can be run directly on
today’s commodity hardware (NH).
3.6 Application Examples
The SMV model allows privilege separation of individual
components and data regions in an application. We present
one example of the popular design model in general multi-
threaded applications and two concrete application exam-
ples of how the SMV model can protect applications by or-
ganizing the process address space with diﬀerent privileges
for threads (GF and EU).
3.6.1 Producer-Consumer Model
First, the SMV model can support the common producer-
consumer model with strict memory isolation while main-
taining eﬃcient data sharing. Figure 2 illustrates how the
SMV model can secure interacting components according to
a generic producer-consumer model that is employed by all
the applications in PARSEC we evaluated. In this example,
the SMVthreads run in the process address space that contains
four SMVs and six memory domains. The SMVs conﬁne the
memory access privileges of SMVthreads according to the se-
curity policy. In this case, the queue domain is the shared
memory domain for all SMVthreads to cooperate with each
Figure 2: Security-enhanced producer/consumer
model with ﬁne-grained memory protection do-
mains.
Figure 1: SMV architecture.
other SMVthreads according to the policy speciﬁed by the pro-
grammer through the API. Section 4.3 explains the imple-
mentation of the partially shared page tables for SMVthreads.
SMVthreads are glibc-compatible, meaning that our SMVthreads
can directly invoke the library functions in glibc. SMVthreads
can cooperate with pthreads through all the synchronization
primitives deﬁned by the pthreads API. For SMV manage-
ment, privileged SMVthreads have to invoke the SMV API to
set up the memory boundaries for least privilege enforce-
ment. pthreads can access the whole process address space.
Changing such accesses would hamper the correctness of
legacy programs that do not require any memory segregation
(backward compatibility). While possible, programmers are
advised against mixing SMVthreads and pthreads in one pro-
cess when an application requires isolation as pthreads will
have unrestricted access to all memory of the process.
3.4 SMV API: User Space Library
We implemented our SMV model as a user-space library
that oﬀers an API to support partially shared memory multi-
threading programming in C and C++. Table 2 summarizes
the primary SMV API with descriptions of the main func-
tions. For instance, a programmer can use memdom_create
to create a memory domain and memdom_alloc to allocate
memory blocks that are only accessible by SMVthreads run-
ning in the privileged SMVs. Each memory domain and
SMV has a unique ID assigned by the SMV model in the
system. SMVthreads are integrated with pthreads for easier
synchronization and every SMVthread thus also has an asso-
ciated pthread_t identiﬁer. Note that casting an SMVthread
to a pthread does not bypass the privilege checks. The
SMV interface allows programmers to structure the pro-
cess memory space into distinct memory domains with dif-
ferent privileges for SMVthreads and to manage the desired
security policy. Furthermore, our library provides options
for programmers to automatically override related function
calls to signiﬁcantly reduce the porting eﬀorts. For example,
pthread_create can be automatically replaced by smvthread_create,
which internally allocates a private memory domain for the
newly created SMVthread. Similarly, when an SMVthread calls
malloc, the library allocates memory in the calling thread’s
private memory domain.
    Virtual Memory    Kernel Space     OS Memory Management Subsystem   User SpaceSec. 4.1: SMV Netlink Kernel ModulePrivateMemory Domain #1SharedMemory DomainIn-MemoryCommunication DomainPrivateMemory Domain #2System Library (glibc)Page Fault HandlerOriginal objectSMV objectSMVthreadInteractionMemory domainKey   Multithreaded Application Protected by SMV ModelSMV thread #3Sec: 3.4: SMV Userspace APISMV thread #4SMV thread #5SMV thread #1SMV thread #2Sec. 4.5: SMV Privilege ChecksSec. 4.2:SMV Metadata ManagementSec 4.3:Partially Shared Page Table ManagementThe yellow rounded boxes represent the new objects introduced by the SMV model.ProcessSMVSMVthreadMemory DomainRead PrivilegeWrite PrivilegeAllocate PrivilegeKeyQueue Domain SecureCommunication DomainMasterSMVMaster Domain ProducerSMVProducer Domain ConsumerSMV 1Consumer DomainConsumerSMV 2Consumer DomainArrow points from source SMV to destination domainSMV API
Description
Table 2: List of primary SMV API.
int smv_main_init (bool allow_global)
Initialize the main process to use the SMV model. If allow_global is true, allow child
threads to access global memory domains. Otherwise distrust all threads by default.
int memdom_create (void)
Creates a new memory domain, initializes the memory region, and returns the kernel-
assigned memory domain ID.
int smv_create (void)
Creates a new SMV and returns the kernel-assigned smv_id.
pthread_t smvthread_create (int smv_id,
(void*)func_ptr, struct smv_data* args)
Creates an SMVthread to run in the SMV speciﬁed by smv_id and returns a
glibc-compatible pthread_t identiﬁer.
void* memdom_alloc
(int memdom_id, unsigned long size)
Allocates a memory block of size bytes in memory domain memdom_id.
void memdom_free (void* data)
Deallocates a memory block previously allocated by memdom_alloc.
int memdom_priv_grant
(int memdom_id, int smv_id, int privs)
Grants the privileges privs to access memory domain memdom_id for SMV
svm_id and returns new privileges.
int memdom_priv_revoke
(int memdom_id, int smv_id, int privs)
Revokes the privileges privs to access memory domain memdom_id from
SMV svm_id and returns new privileges.
int memdom_kill (int memdom_id)
Deletes the memory domain with memdom_id from the process.
int smv_kill (int smv_id)
Deletes the SMV with smv_id from the process.
Figure 3: Security-enhanced Cherokee web server.
Figure 4: Security-enhanced Firefox.
other, but any write or allocate request from the producer
SMV to the consumer domains is prohibited; only reads are
permitted. The secure communication domain works as a
one-way communication channel for the master SMVthread to
transmit data to the consumer SMVthreads and is inaccessi-
ble to the producer SMVthread due to the restricted privileges
of the producer SMV. In this case, the SMV model strictly
enforces memory access boundaries, constraining memory
safety bugs to the current component’s memory view.
3.6.2 Case Study: Cherokee Web Server
Cherokee [12] is a high-performance and light-weight mul-
tithreaded web server. To isolate connections, Cherokee uses
worker threads to handle incoming requests stored in per-
thread connection queues. One worker thread handles all the
requests coming from the same connection. However, only
one worker thread on the server needs to be compromised
to leak sensitive information. To provide an alternative for
isolating server workers in diﬀerent processes, we show how
the SMV model can compartmentalize the process memory
into memory domains and provide reasonable isolation for
the multithreaded Cherokee web server. As shown in Fig-
ure 3, the SMV model deﬁnes the memory boundaries for
worker SMVthreads and enforces the memory access privileges
to protect the server. The SSL connections are handled only
by the SMVthreads running in SMV 3 that have the privilege
to access worker domain 3, which contains the server’s pri-
vate key.
If SMVthreads in SMV 2 (handling only HTTP
requests) make any attempt to access the private key, the
SMV model will reject such invalid memory accesses because
of insuﬃcient privileges.
In this way, when an exploited
worker thread attempts to access memory in an invalid do-
main, the SMV model detects such invalid accesses and stops
further attacks triggered by the memory bugs (e.g., CVE-
2004-1097). The original pthread Cherokee server does not
have this security guarantee since all the threads can ac-
cess the complete process address space (with unanimously
shared permission). We show how accessing invalid memory
domains is prevented by the SMV model in Section 5.4.
3.6.3 Case Study: Mozilla Firefox Web Browser
The SMV model allows multithreaded web browsers such
as Firefox and its JavaScript engine SpiderMonkey to achieve
strict compartment isolation enforced by hardware protec-
Multithreaded Cherokee Web Server Main ProcessShared Domain (accept mutex, configuration etc.)WorkerSMV 1WorkerDomain1Worker SMV 3 WorkerDomain 3Worker SMV 2 WorkerDomain2Secure Communication Domain ProcessSMVSMVthreadMemory domainRead privilegeWrite privilegeAllocate privilegeServer’s private keyKeyArrow points from source SMV to destination domainhttps://http://WorkerMainThreadhttp://Mozilla Firefox Web Browser Main ProcessShared Domain (GC, GUI, timer, etc.)ProcessSMVSMVthreadMemory domainRead privilegeWrite privilegeAllocate privilegeBanking credentialsLogin credentialsMalicious payloadsDenied accessKeyeBaySMVeBayDomainPayPalSMVPayPalDomainTrojanWorldSMVTrojanWorld Domain        TrojanWorldtion, preventing one malicious origin from accessing sensi-
tive data such as bank accounts hosted by another origin.
Figure 4 presents an example of how the SMV model can
isolate browser tabs in SMVs based on the same-origin pol-
icy [37]. With SMVs, the malicious origin TrojanWorld can-
not escape from its compartment to access the PayPal bank-
ing account (add recipient account by allocating memory or
transfer money to attacker’s account by writing to memory)
or read the user credentials hosted by eBay. Such strong iso-
lation guarantees inspired Google to design Chrome to use
process isolation for its rendering process.
4.
IMPLEMENTATION
This section details the OS kernel level implementation of
the SMV model and discusses its security guarantees. We
modiﬁed the Linux kernel version 4.4.5 for the x64 architec-
tures to support the SMV model. Table 3 summarizes the
component sizes in our prototype.
4.1 SMV Communication Channel
We developed an SMV loadable kernel module (LKM)
that allows the user-space SMV API to communicate with
our kernel using the Netlink socket family. Once loaded, the
SMV LKM is eﬀectively part of the kernel. The SMV LKM
works as a dispatcher in the SMV model that sanitizes the
messages from the user space SMV API and invokes SMV-
related kernel functions.
Security guarantee. The attacker cannot replace our
SMV LKM with a malicious SMV LKM to perform a man-
in-the-middle attack and escalate permissions for a given
SMVthread. Such a system-wide change requires the attacker
to have root privilege on the system.
4.2 Metadata Management
To eﬃciently maintain the state of the processes that have
SMVthreads, we added two major objects to the OS kernel.
(1) memdom_struct: memory domain metadata for tracing the
virtual memory area and the memory domains mappings.
(2) SMV_struct: the SMV privilege metadata for accessing
memory domains. These kernel objects cooperate with each
other to maintain the ﬁne-grained privilege information of
each SMV in a process.
Security guarantee. The metadata is allocated in ker-
nel memory space and is not mutable by any user space
programs without proper privileges through our API. Mem-
ory bugs in user space programs cannot aﬀect the integrity
of the metadata stored in kernel memory. One of the main
sources of kernel 0-day attacks is the use of uninitialized
bytes in kernel memory (e.g., CVE-2010-4158) that allows
local users to read sensitive information. The SMV model
sanitizes the metadata by initializing objects to avoid any