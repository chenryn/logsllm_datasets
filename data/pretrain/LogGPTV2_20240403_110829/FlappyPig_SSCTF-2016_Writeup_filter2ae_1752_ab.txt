             for cc in range(0xff):
                 plaincc=[1]*(ci)
                 plaincc.append(cc)
                 rr=calc(key,plaincc)
                 #print cc,plaincc,rr,ci
                 if rr[ci*8:ci*8+8]==flagout[ci*8:ci*8+8]:
                     fte.append(chr(cc))
         print ''.join(fte)
       # out>>
     # OO|OO||O O|||||OO |OO||O|| O|O||O|| |O|OOOOO OO|O|O|O |||||OO| ||O|||OO ||O|OOOO OO|O|OO| OO||||OO |||OOOO|||||O||||O|OO|O|O|O||OO|O||O|OO|O||O|||O||O|OO|OOOOOO||OOO|O|O|O|||O|OO|O|O||O||O||OOOOO|||OO|O|
     # flag >>
     # OO||O||O|O|||OOOO||||||O|O|||OOO||O|OOOO||O|O|OO|||||OOOO||||O||OO|OO||O||O|O|O|||||OOOOOO|O|O||OOOOOOO||O|||OOOO||OO|OO|||O|OO|O|||O|O|OO|OOOO|OOO|OOO|OOOO||O|OO||||OO||||OOO|O|O||OO||||O||OOO|||O|OO|OO||OO||OOOO|O|
发现只有一个flag没有乱码
**  
**
**200 Chain Rule**
很多带密码zip，提示说try start，推测有一个压缩包的解压密码是start，果然有一个是，解压出来的txt是下一个压缩包的解压密码，于是写个程序跑：
    import zipfile
       import os
     a=os.listdir("crypto")
       print a
       def zipout(opath,outpath,password):
         zip = zipfile.ZipFile(opath, "r",zipfile.zlib.DEFLATED)
         try:
             zip.extractall(path=outpath,members=zip.namelist() , pwd=password)
             return 1
         except:
             return 0
       ppass="start"
       while(1):
         for f in a:
             if zipout(r"crypto/"+f,r"hehe/"+f,ppass)==1:
                 r=open(r"hehe/"+f+"/1.txt","r")
                 rr=r.read()
                 print rr
                 r.close()
                 ppass=rr.split("n")[0].split("is ")[1]
能找到pwd.zip和flag.zip两个文件，pwd.zip是一个新的指来指去的游戏，flag.zip是个带密码的压缩文件.
后面有两种方法：
第一种暴力一点直接明文攻击flag.zip就行，用AAPR。
第二种：
写个程序把这个新的指来指去的游戏玩完，注意查重，否则会无限循环，是有分支的：
最后是这样：
于是用zipinfo -v可以获得每个文件的comment，有三种不同注释。
然后我做了一个回溯的表获得到达最后一个信息的遍历路径，然后组合起来，后面就是套路了
这里方便变成写了个递归，深度有点大，所以躲开了下系统限制：
    import sys
     sys.setrecursionlimit(1000000)
     fr="start"
       prelist=["1"]*999999
       def openfuck(fr):
         r=open("GAME/"+fr+".txt","r")
         rr=r.read()
         r.close()
         print fr,rr,rr.encode("hex")
         try:
             frn=rr.split("n")[0].split("xt is ")[1].split(" ")[0]
             if prelist[int(frn)]=="1":
                 prelist[int(frn)]=fr
                 openfuck(frn)
             if "or" in rr:
                 frn2=rr.split("n")[0].split("or ")[1].split(" ")[0]
                 if prelist[int(frn2)]=="1":
                     prelist[int(frn2)]=fr
                     openfuck(frn2)
         except:
             pass
       openfuck("start")
     final=[]
     test="376831"
       while test!="start":
         final.append(test)
         test=prelist[int(test)]
         print test
**300 Nonogram**
本题是一个nonogram游戏，游戏开始后服务端发来行列的数值，据此解出相应的图片，在解题过程中发现解出的图片都是二维码，而且是经过一定的破坏，电脑端没找到什么好的工具，都是用微信扫的….
解nonogram方面搜了挺多工具，最终发现一个比较快的，参考[http://www.hakank.org/constraint_programming_blog/2010/11/google_cp_solver_a_much_faster_nonogram_solver_using_defaultsearch.html](http://www.hakank.org/constraint_programming_blog/2010/11/google_cp_solver_a_much_faster_nonogram_solver_using_defaultsearch.html)。
二维码的图片
最终解出的二维码扫完之后如下，
b2403b96?8924408|Next:id|Salt:5
59b6a648?8a85a2f|Next:w|Salt:a
ebcfd0bc?c532969|Next:eval|Salt:d
30cfce11?f4fe85d|Next:bash|Salt:1
6e9b1036?8dd8d17|Next:ls|Salt:c
679df8e4?564b41e|Next:dir|Salt:f
8eb99012?513f24f|Next:cd|Salt:f
e0327ad8?8d138f2|Next:mv|Salt:7
32d17e56?07902b2|Next:cp|Salt:2
7e88149a?8dd32b2|Next:pwd|Salt:3
a57b0395?163467c|Next:tree|Salt:3
f75f2a3e?6164d0f|Next:apt|Salt:9
41bb47e0?09205ea|Next:mysql|Salt:d
5cb4d45b?d0e5624|Next:php|Salt:c
92327e4c?43d619d|Next:head|Salt:4
3ad1439f?85ac494|Next:tail|Salt:b
68b6edd3?15b3edc|Next:cat|Salt:1
9f078b06?0cd507d|Next:grep|Salt:7
a50c413a?c7e05ad|Next:more|Salt:3
36b90d08?4cf640b|Next:less|Salt:b
6e7929b1?5f85978|Next:vim|Salt:3
4dfa42ca?dbd0694|Next:nano|Salt:2
8b94aee6?a2f1642|Next:sed|Salt:f
4cea9109?07cacd8|Next:awk|Salt:1
4cee5724?a9b28b7|Next:ps|Salt:a
6a60928b?5a7e228|Next:top|Salt:8
d34d9c29?711bdb3|Next:kill|Salt:7
b7942173?881b53e|Next:find|Salt:8
f766fa44?1ed0ff6|Next:break|Salt:4
4528ad8b?6d6bbed|Next:gcc|Salt:4
aa6880d6?7b76c95|Next:debug|Salt:0
c30201f7?f142449|Next:git|Salt:0
a9ded88f?8ecee47|Next:curl|Salt:9
f062936a?6d3c8bd|Next:wget|Salt:5
6ed83efb?5042fb3|Next:gzip|Salt:b
22bcc25a?f606eb5|Next:tar|Salt:4
fc8586df?4d1bc0e|Next:ftp|Salt:3
08e95939?adf34b1|Next:ssh|Salt:9
74b5a988?9bbd4b5|Next:exit|Salt:c  
---  
所有题目解完后服务器提示这个，如下图，纠结了半天。。combine这个词用的简直..
后来猜了一下发现，flag的每个字母加上salt算出来的16位MD5、正好是前面的一串字符串。这样爆破就可以爆破出来了。
Flag是SSCTF{02909c92cd8efb656435f43fa8414147}
附上脚本，好几个，挺乱的，有一些特例运行不了手工调整的。
首先是连接的脚本
    import zio
    import json
    from CTFs.TOOL.binqr import BinQR
    from    nonogram_default_search import main as getSolve
    z =   zio.zio(('socket.lab.seclover.com', 52700))
    z.read_until('Email Addr : ')
    z.writeline('PI:EMAIL')
    z.read_until(':')
    z.writeline('RVfUzFGQsyod')
    number = 0
    with open('input', 'r') as f:
          for line in f.readlines():
            # for line in ['sudo sun', 'idn']:
            if line:
                z.read_until(['#', '$'])
                z.write(line)
                number += 1
    f = open('input', 'a+')
    z.read_until(zio.EOF)
    while z.isalive():
          z.readline()
          data = z.read_line().strip()
          if '"?"' in data:
            l = None
            for r in '0123456789':
                datac =   data.replace('"?"', r)
                j = json.loads(datac)
                col = j['col']
                row = j['row']
                l = getSolve(row, col)
                if l:
                    break
            l = l[0]
            b = BinQR(l)
            b.save(str(number) + '.' + r +   '.png')
            b.show()
          else:
            j = json.loads(data)
            col = j['col']
            row = j['row']
            l = getSolve(row, col)
            if l:
                  b = BinQR(l)
                b.save(str(number) + '.png')
                b.show()
          z.read_until(['#', '$'])
          getInput = raw_input()
          f.write(getInput + 'n')
          z.writeline()
          number += 1
    z.interact()
    # #
    #
    import hashlib
    import string
    import sys
    from ortools.constraint_solver   import pywrapcp
    #
    # Make a transition (automaton)   list of tuples from a
    # single pattern, e.g. [3,2,1]
    #
    def   make_transition_tuples(pattern):
          p_len = len(pattern)
          num_states = p_len + sum(pattern)
          tuples = []
          # this is for handling 0-clues. It generates
          # just the minimal state
          if num_states == 0:
            tuples.append((1, 0, 1))
            return (tuples, 1)
          # convert pattern to a 0/1 pattern for easy handling of
          # the states
          tmp = [0]
          c = 0
          for pattern_index in range(p_len):
            tmp.extend([1] *   pattern[pattern_index])
            tmp.append(0)
          for i in range(num_states):
            state = i + 1
            if tmp[i] == 0:
                tuples.append((state, 0, state))
                tuples.append((state, 1, state +   1))
            else:
                if i < num_states - 1:
                    if tmp[i + 1] == 1:
                        tuples.append((state, 1,   state + 1))
                    else:
                        tuples.append((state, 0,   state + 1))
          tuples.append((num_states, 0, num_states))