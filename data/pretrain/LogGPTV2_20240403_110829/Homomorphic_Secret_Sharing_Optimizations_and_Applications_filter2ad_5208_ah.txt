1
d
n
o
c
e
s
r
e
p
s
t
l
u
m
S
M
R
2−5
B = 16
B = 4
B = 16, [13] version
2−13
2−11
2−7
2−9
2−15
2−17
2−19
Failure probability per RMS mult
Figure 5: Number of RMS multiplication per second given
the failure probability per RMS multiplication with R = 8.
The ciphertext size for B = 4 (resp., B = 16) is 18.8kB (resp.,
10.6kB). See Remark 6.1 for implementation details. The ver-
sion of [13] assumes 2 × 109 conversion steps per second.
Group: We used a conversion-friendly group with a pseudo-
Mersenne modulus p = 21536−11510609 (hence group elements
are 1536 bits long).
Cost of operations: With the above settings, we were able to
perform roughly 5 · 109 conversion steps per second6 and 106
mod-p multiplications per second on average.
Optimizations: Improvements from Section 4 where assumed
when relevant, such as ciphertext size reduction under the
ESDH assumption, and randomized conversions.
Parameters: Experiments were run for bases B = 2, 4, 16 for the
secret key, and with precomputation parameter R = 1, 8, 12 for
exponentiations.
6.2 Measured Results
Using our optimized implementation for modular multiplication,
we were able to report about 106 modular multiplications per sec-
ond. In order to obtain time estimates for conversions on elliptic-
curve groups, we benchmarked OpenSSL’s implementation of SECG
curves secp160k1 and secp160r1[43], both providing 80 bits of se-
curity. In both cases, we were able to measure about 4.1 · 106 group
operations per second. This is three orders of magnitude slower
than what can be achieved on conversion-friendly groups; in the
low-error regime, where conversions dominate, elliptic-curve based
HSS should therefore be about a thousand times slower that their
counterpart based on conversion-friendly groups. On the other
hand, it is worth noting that the size of the HSS ciphertexts in the
elliptic curve implementation are smaller by roughly a factor of 10
(1.1kB vs. 10.6kB).
Remark 6.1. We summarize below the parameters and assump-
tions on which our concrete efficiency analysis is based.
Processor: Benchmarks have been performed on an Intel Core
i7-3537U @ 2.00GHz processor running Debian stretch -
Linux 4.9 patched with Grsecurity.
5 https://gmplib.org/
Compared to the previous implementation of [13], our imple-
mentation for the distributed descrete log achieves a factor 3 of
improvement in performing distributed discrete log.
Figure 5 shows the number of full RMS multiplications that
can be performed in one second for a given failure probability per
RMS multiplication. The curves are based on an analytical formula
derived from the data obtained in the previous experiment. Ad-
ditional analysis, graphs, and benchmarks, and source code are
publicly available at https://www.di.ens.fr/~orru/hss/. Some con-
crete numbers are also given in Table 3.
ACKNOWLEDGMENTS
We thank Josh Benaloh, Florian Bourse, Ilaria Chillotti, Henry
Corrigan-Gibbs, Ranjit Kumaresan, Pierrick Meaux, and Victor
Shoup for helpful discussions, comments, and pointers.
First author supported by ISF grant 1861/16, AFOSR Award
FA9550-17-1-0069, and ERC grant 307952. Second author supported
by ERC grant 339563 (project CryptoCloud). Third author supported
by ISF grant 1638/15, a grant by the BGU Cyber Center, and by the
European Union’s Horizon 2020 ICT program (Mikelangelo project).
6We note that the number of conversion steps per second remains essentially the same
even if one chooses a larger prime p for better security.
Session J1:  OutsourcingCCS’17, October 30-November 3, 2017, Dallas, TX, USA2121Failure
Base
ϵ = 2−5
ϵ = 2−10
ϵ = 2−15
B = 4
B = 4
B = 16
B = 16
B = 4
B = 4
B = 16
B = 16
B = 4
B = 4
B = 16
B = 16
Tradeoff Length of
param.
dist. point
R = 1
R = 8
R = 1
R = 8
R = 1
R = 8
R = 1
R = 8
R = 1
R = 8
R = 1
R = 8
d = 9
d = 9
d = 11
d = 11
d = 14
d = 14
d = 16
d = 16
d = 19
d = 19
d = 21
d = 21
Share RMS mult.
per second
(kB)
55
18.8
438
18.8
10.6
109
856
10.6
54
18.8
361
18.8
10.6
101
562
10.6
29
18.8
55
18.8
10.6
34
47
10.6
Table 3: Performance of RMS multiplications, see Re-
mark 6.1 for implementation details.
Fourth author was supported by a DARPA/ARL SAFEWARE award,
DARPA Brandeis program under Contract N66001-15-C-4065, NSF
Frontier Award 1413955, NSF grants 1619348, 1228984, 1136174,
and 1065276, ERC grant 742754, NSF-BSF grant 2015782, ISF grant
1709/14, BSF grant 2012378, a Xerox Faculty Research Award, a
Google Faculty Research Award, an equipment grant from Intel,
and an Okawa Foundation Research Grant. This material is based
upon work supported by the Defense Advanced Research Projects
Agency through the ARL under Contract W911NF-15-C-0205. Fifth
author supported by ERC grant 639554 (project aSCEND).
[4] Donald Beaver. 1992.
Foundations of Secure Interactive Computing. In
[3] Benny Applebaum and Shachar Lovett. 2016. Algebraic attacks against random
REFERENCES
[1] Benny Applebaum. 2013. Pseudorandom Generators with Long Stretch and Low
Locality from Random Local One-Way Functions. SIAM J. Comput. 42, 5 (2013),
2008–2037.
[2] Benny Applebaum, Ivan Damgård, Yuval Ishai, Michael Nielsen, and Lior Zichron.
2017. Secure Arithmetic Computation with Constant Computational Overhead.
In Crypto’17. 223–254.
local functions and their countermeasures. In STOC. 1087–1100.
CRYPTO’91, Vol. 576. 377–391.
97–109.
[5] Donald Beaver. 1995. Precomputing Oblivious Transfer. In CRYPTO’95, Vol. 963.
[6] Michael Ben-Or, Shafi Goldwasser, and Avi Wigderson. 1988. Completeness The-
orems for Non-Cryptographic Fault-Tolerant Distributed Computation (Extended
Abstract). In STOC. 1–10.
Interactive Protocols. In CRYPTO. 213–222.
A Secret Sharing. In CRYPTO. 251–260.
[9] Rikke Bendlin, Ivan Damgård, Claudio Orlandi, and Sarah Zakarias. 2011. Semi-
homomorphic Encryption and Multiparty Computation. In EUROCRYPT 2011,
Vol. 6632. 169–188.
[10] E. Boyle, N. Gilboa, and Y. Ishai. 2015. Function Secret Sharing. In EUROCRYPT.
[11] Elette Boyle, Niv Gilboa, and Yuval Ishai. 2016. Breaking the Circuit Size Barrier
for Secure Computation Under DDH. In CRYPTO. 509–539. Full version: IACR
Cryptology ePrint Archive 2016: 585 (2016).
[12] Elette Boyle, Niv Gilboa, and Yuval Ishai. 2016. Function Secret Sharing: Improve-
[7] Josh Cohen Benaloh. 1986. Cryptographic Capsules: A Disjunctive Primative for
[8] Josh Cohen Benaloh. 1986. Secret Sharing Homomorphisms: Keeping Shares of
ments and Extensions. In ACM CCS. 1292–1303.
[13] Elette Boyle, Niv Gilboa, and Yuval Ishai. 2017. Group-Based Secure Computation:
Optimizing Rounds, Communication, and Computation. In Eurocrypt’17. 163–
193.
[14] Zvika Brakerski and Guy N. Rothblum. 2013. Obfuscating Conjunctions. In
337–367.
CRYPTO 2013, Part II, Vol. 8043. 416–434.
[15] Zvika Brakerski and Vinod Vaikuntanathan. 2014. Efficient Fully Homomorphic
Encryption from (Standard) $\mathsf{LWE}$. SIAM J. Comput. 43, 2 (2014),
831–871.
[16] Ran Canetti. 1997. Towards Realizing Random Oracles: Hash Functions That
[19] Benny Chor, Oded Goldreich, Eyal Kushilevitz, and Madhu Sudan. 1995. Private
[17] David Chaum, Claude Crépeau, and Ivan Damgård. 1988. Multiparty Uncondi-
Hide All Partial Information. In CRYPTO’97, Vol. 1294. 455–469.
tionally Secure Protocols (Extended Abstract). In STOC. 11–19.
[18] Ilaria Chillotti, Nicolas Gama, Mariya Georgieva, and Malika Izabachène. 2016.
Faster fully homomorphic encryption: Bootstrapping in less than 0.1 seconds. In
Asiacrypt’16. 3–33.
information retrieval. In FOCS’95. 41–50.
Width Programs. Computational Complexity 1 (1991), 91–105.
[21] Ivan Damgård, Jesper Buus Nielsen, Michael Nielsen, and Samuel Ranellucci.
2017. Gate-scrambling Revisited - or: The TinyTable protocol for 2-Party Secure
Computation. Crypto’17 (2017).
[22] Ivan Damgård, Valerio Pastro, Nigel P. Smart, and Sarah Zakarias. 2012. Multi-
party Computation from Somewhat Homomorphic Encryption. In CRYPTO 2012,
Vol. 7417. 643–662.
[23] Yevgeniy Dodis, Shai Halevi, Ron D. Rothblum, and Daniel Wichs. 2016. Spooky
[20] Richard Cleve. 1991. Towards Optimal Simulations of Formulas by Bounded-
[25] Sanjam Garg, Craig Gentry, Shai Halevi, and Mariana Raykova. 2014. Two-Round
[24] Léo Ducas and Daniele Micciancio. 2015. FHEW: Bootstrapping Homomorphic
Encryption and Its Applications. In CRYPTO. 93–122.
Encryption in Less Than a Second. In EUROCRYPT. 617–640.
Secure MPC from Indistinguishability Obfuscation. In TCC. 74–94.
169–178.
[26] Craig Gentry. 2009. Fully homomorphic encryption using ideal lattices. In STOC.
[27] Craig Gentry, Amit Sahai, and Brent Waters. 2013. Homomorphic Encryp-
tion from Learning with Errors: Conceptually-Simpler, Asymptotically-Faster,
Attribute-Based. In Crypto’13. 75–92.
[28] Satrajit Ghosh, Jesper Buus Nielsen, and Tobias Nilges. 2017. Maliciously Secure
Oblivious Linear Function Evaluation with Constant Overhead. IACR Cryptology
ePrint Archive (2017), 409.
[29] Niv Gilboa. 1999. Two Party RSA Key Generation. In CRYPTO’99, Vol. 1666.
116–129.
[30] Niv Gilboa and Yuval Ishai. 2014. Distributed Point Functions and Their Applica-
641–670. https://doi.org/10.1007/978-3-662-46800-5_25
tions. In EUROCRYPT 2014, Vol. 8441. 640–658.
[31] Oded Goldreich, Silvio Micali, and Avi Wigderson. 1987. How to Play any Mental
Game or A Completeness Theorem for Protocols with Honest Majority. In STOC.
218–229.
[32] Shai Halevi and Victor Shoup. 2015. Bootstrapping for HElib. In EUROCRYPT.
[33] Yuval Ishai, Eyal Kushilevitz, Sigurd Meldgaard, Claudio Orlandi, and Anat
Paskin-Cherniavsky. 2013. On the Power of Correlated Randomness in Secure
Computation. In TCC 2013, Vol. 7785. 600–620.
[34] Yuval Ishai, Eyal Kushilevitz, Rafail Ostrovsky, and Amit Sahai. 2008. Cryptog-
raphy with constant computational overhead. In 40th ACM STOC, Richard E.
Ladner and Cynthia Dwork (Eds.). ACM Press, 433–442.
[35] Yuval Ishai, Manoj Prabhakaran, and Amit Sahai. 2009. Secure Arithmetic Com-
putation with No Honest Majority. In TCC’09. 294–314.
[36] Marcel Keller, Emmanuela Orsini, and Peter Scholl. 2016. MASCOT: Faster
Malicious Arithmetic Secure Computation with Oblivious Transfer. In Proceedings
of the 2016 ACM SIGSAC Conference on Computer and Communications Security.
830–842.
[37] Vladimir Kolesnikov and Ranjit Kumaresan. 2013. Improved OT Extension for
Transferring Short Secrets. In CRYPTO 2013, Part II, Vol. 8043. 54–70.
[38] Eyal Kushilevitz and Rafail Ostrovsky. 1997. Replication is NOT Needed: SINGLE
Database, Computationally-Private Information Retrieval. In 38th FOCS. 364–373.
[39] Pratyay Mukherjee and Daniel Wichs. 2016. Two Round Multiparty Computation
via Multi-key FHE. In Proc. EUROCRYPT 2016. 735–763. https://doi.org/10.1007/
978-3-662-49896-5_26
[40] Moni Naor and Benny Pinkas. 2006. Oblivious Polynomial Evaluation. SIAM J.
[41] Rafail Ostrovsky and William E. Skeith III. 2005. Private Searching on Streaming
Comput. 35, 5 (2006), 1254–1281.
Data. In Proc. CRYPTO 2005. 223–240.
[42] Ronald L. Rivest, Len Adleman, and Michael L. Dertouzos. 1978. On data banks
and privacy homomorphisms. In Foundations of secure computation (Workshop,
Georgia Inst. Tech., Atlanta, Ga., 1977). Academic, New York, 169–179.
[43] SECG. 2010. SEC 2: Recommended Elliptic Curve Domain Parameters, Version 2.
http://www.secg.org. (2010).
[44] Marten van Dijk, Craig Gentry, Shai Halevi, and Vinod Vaikuntanathan. 2010.
Fully Homomorphic Encryption over the Integers. In Proc. EUROCRYPT 2010.
24–43.
[45] Andrew Chi-Chih Yao. 1986. How to Generate and Exchange Secrets (Extended
Abstract). In FOCS. 162–167.
Session J1:  OutsourcingCCS’17, October 30-November 3, 2017, Dallas, TX, USA2122