---
author: Pablo A. Martínez
category: 软件开发
comments_data: []
count:
  commentnum: 0
  favtimes: 1
  likes: 0
  sharetimes: 0
  viewnum: 7451
date: '2017-07-17 09:09:00'
editorchoice: false
excerpt: 写这篇文章我主要想总结一下安装步骤，好给自己以后作参考，当然，这篇文章也是给同行看的，只要他们感兴趣。
fromurl: https://medium.com/@pamartineza/how-to-set-up-a-continuous-integration-server-for-android-development-ubuntu-jenkins-sonarqube-43c1ed6b08d3#.x6jhcpg98
id: 8701
islctt: true
largepic: /data/attachment/album/201707/16/211658sfpp9oa761q4374o.jpg
permalink: /article-8701-1.html
pic: /data/attachment/album/201707/16/211658sfpp9oa761q4374o.jpg.thumb.jpg
related: []
reviewer: ''
selector: ''
summary: 写这篇文章我主要想总结一下安装步骤，好给自己以后作参考，当然，这篇文章也是给同行看的，只要他们感兴趣。
tags:
- Android
- CI
- 开发
thumb: false
title: 如何为安卓开发搭建一个持续集成（CI）服务器
titlepic: true
translator: Taylor1024
updated: '2017-07-17 09:09:00'
---
我最近买了新 MacBook Pro 作为我的主要的安卓开发机，我的老式的 MacBookPro（13 寸，2011 年后期发布，16GB 内存， 500G 的固态硬盘，内核是 i5，主频 2.4GHz，64 位），我也没卖，我清理了它，并把他变成了一个 MacOS 和Ubuntu 双引导的持续集成（CI）服务器。
![](/data/attachment/album/201707/16/211658sfpp9oa761q4374o.jpg)
写这篇文章我主要想总结一下安装步骤，好给自己以后作参考，当然，这篇文章也是给同行看的，只要他们感兴趣。好了，现在开始：
1. 配置一个新的 Ubuntu ，以便运行 Android SDK。
2. 安装 Jenkins CI 服务来拉取、编译、运行测试托管在 Github 的多模块 Android 项目。
3. 安装 Docker 并在容器中运行 MySQL 服务器和 SonarQube。来运行由 Jenkins 触发的静态代码分析。
4. Android app 配置需求。
### 第一步－安装 Ubuntu：
我将使用 Ubuntu 作为持续集成的 SO，因为 Ubuntu 有一个强大的社区，它可以解决你遇到的任何问题，而且我个人推荐总是使用 LTS 版本，当前是 16.04 LTS。已经有很多教程教大家在各种硬件上怎么安装了，我就不废话了，贴个下载链接就行了。
* [下载 Ubuntu Desktop 16.04 LTS](https://www.ubuntu.com/download/desktop)
有人可能很奇怪：用什么桌面版，服务器版多好。额，这个嘛，萝卜青菜，各有所爱。我倒不在乎 UI 占用的那点运算资源。相反，用那一点资源换来生产力的提升我觉得挺值的。
### 第二步－远程管理：
#### SSH 服务器
Ubuntu 桌面版默认安装并没有 ssh 服务器，所以你想远程通过命令行管理的话就只好自己安装。
```
$ sudo apt-get install openssh-server
```
#### NoMachine 远程桌面
可能你的持续集成服务器没有挨着你，而是在你的路由器后面，或者其它屋子，甚至还可能远离你数里。我试过各种远程桌面方案，不得不说，IMHO NoMachine 在这方面表现的最好，它只需要你的 ssh 证书就可以工作了（显然你要先把它安装在 CI 和你的机器中）。
* [NoMachine - 任何人都能用的免费的远程访问工具](https://www.nomachine.com/download)
### 第三步－配置环境：
这里我打算安装 Java8，Git，和 Android SDK，Jenkins 需要它们来拉取、编译和运行 android 项目。
#### SDKMAN!
这个超级厉害的命令行工具让你可以安装各种流行的 SDK（比如说，Gradle、Groovy、Grails、Kotlin、 Scala……），并可以以容易方便的方式列出它们和在各个并行版本中切换。
* [SDKMAN! - SDK 管理器](http://sdkman.io/)
它们最近又增加了对 JAVA8 的支持，所以我使用它来安装 Java，而是用流行的 webupd8 仓库。所以在你安装开始前，务必要想清你要不要安装 SDKMAN，话说回来，最好还是装上，因为我们以后应该会用到。
安装 SDKMAN! 很容易，执行以下命令即可：
```
$ curl -s "https://get.sdkman.io" | bash
```
#### Oracle JAVA8
因为我们已经安装了 SDKMAN! ，所以安装 JAVA8 就相当简单了：
```
$ sdk install java
```
或者使用 webupd8 这个仓库：
* [在 Ubuntu 或 Linux Mint 上通过 PPA 仓库安装 Oracle Java 8 [JDK8]](http://www.webupd8.org/2012/09/install-oracle-java-8-in-ubuntu-via-ppa.html)
#### Git:
安装git的命令也非常直观，就不废话了。
```
$ sudo apt install git
```
#### Android SDK
这下面这篇文章的底部
* [下载 Android Studio 和 SDK Tools | Android Studio](https://developer.android.com/studio/index.html)
你可以找到 “Get just the command line tools” 等字样，复制这个链接。比如：
```
https://dl.google.com/android/repository/tools_r25.2.3-linux.zip
```
下载，然后解压到 `/opt/android-sdk-linux` 下：
```
$ cd /opt
$ sudo wget https://dl.google.com/android/repository/tools_r25.2.3-linux.zip
$ sudo unzip tools_r25.2.3-linux.zip -d android-sdk-linux
```
我们使用 root 用户创建了该目录，所以我们需要重新授权来使我们的主要用户对它可读可写。
```
$ sudo chown -R YOUR_USERNAME:YOUR_USERNAME android-sdk-linux/
```
然后，在 `~/.bashrc` 文件下设置 SDK 的环境变量
```
$ cd
$ nano .bashrc
```
在文件底部写入这些行（注意，但要在 SDKMAN! 配置文件前）:
```
export ANDROID_HOME="/opt/android-sdk-linux"
export PATH="$ANDROID_HOME/tools:$ANDROID_HOME/platform-tools:$PATH"
```
关闭此终端，再打开一个新的终端看看环境变量是否正确生效：
```
$ echo $ANDROID_HOME
/opt/android-sdk-linux
```
然后我们启动图形界面的 Android SDK 管理器，并安装你所需的平台和依赖：
```
$ android
```
![](/data/attachment/album/201707/16/211711ymj839h4t0t9938m.png)
*运行 Android SDK Manager 的图形交互界面*
### 第四步－Jenkins 服务器
这里，我要讲讲怎么安装、配置该服务器，并创建 Jenkin 任务来拉取、构建和测试 Android 项目，并怎样获取控制台输出。
#### 安装 Jenkins
你可以在下面的链接找到 Jenkins 服务器相关信息：
* [Jenkins](https://jenkins.io/)
我们有许多办法运行 Jenkins，比如说运行 .war 文件，作为 Linux 服务，作为 Docker 容器等等。
我起初是想把它当做 Docker 容器运行，但是后来我意识到正确地配置代码文件夹、android-sdk 文件夹的可见性，和插到运行的 Android 测试机上的物理设备的 USB 可见性简直是一场噩梦。
少操点心，我最终决定以服务的方式，增加 Stable 仓库的 key 来通过 apt 安装和更新。
```
$ wget -q -O - https://pkg.jenkins.io/debian-stable/jenkins.io.key | sudo apt-key add -
```
编辑 `source.list`，写入这一行：
```
$ sudo nano /etc/apt/sources.list
```
```
#Jenkin Stable
deb https://pkg.jenkins.io/debian-stable binary/
```
然后安装：
```
sudo apt-get update
sudo apt-get install jenkins
```
在你的用户组里面增加 `jenkins` ，允许其读写 Android SDK 文件夹。
```
$ sudo usermod -a -G 你的用户组 jenkins
```
Jenkins 服务在开机引导时就会被启动，并可通过 http://localhost:8080 访问：
安装完毕会有一些安全预警信息，跟着引导程序走，你的 Jenkins 就会运行了。
![](/data/attachment/album/201707/16/211712mv7ci6453vtx5z6z.png)
*启用安装成功的 Jenkins 服务器。*
#### Jenkins 配置
启用成功后，会有提示程序提示你安装插件，单击 “Select plugins to Install” 就可以开始浏览所有插件，然后选择你要安装的插件就 OK 了 。
* [JUnit 插件](https://wiki.jenkins-ci.org/display/JENKINS/JUnit+Plugin)
* [JaCoCo 插件](https://wiki.jenkins-ci.org/display/JENKINS/JaCoCo+Plugin)
* [EnvInject 插件](https://wiki.jenkins-ci.org/display/JENKINS/EnvInject+Plugin)
* [GitHub 插件](https://wiki.jenkins-ci.org/display/JENKINS/GitHub+Plugin)
![](/data/attachment/album/201707/16/211714ly09f70771c3z3fy.png)
*安装 Jenkins 插件*
创建管理员用户，并完成安装。
要完成安全需要配置环境变量 `ANDROID_HOME`，`JAVA_HOME`。
点击 Manage Jenkins，接着 Configure System。
滚动文件至底部，在全局属性模块中找到环境变量，并增加 `ANDROID_HOMOE`，和 `JAVA_HOME` 变量。
![](/data/attachment/album/201707/16/211717vco343w6te3v2zrq.png)
*给所有 Jenkins 任务增加全局变量*
#### 创建 Jenkins 任务