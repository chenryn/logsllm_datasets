if len(mc.data)> 0 {
return mc.queryInTree(0, 0, 1en(mc.data)-1, 1eft, right)
return segmentItem{candidate: -1, count: -1}
func (mc *MajorityChecker) queryInTree(treeIndex, left, right, queryLeft,
queryRight int) segmentItem {
midTreeIndex, 1eftTreeIndex, rightTreeIndex := 1eft+(right-1eft)>>1,
mc.1eftChild(treeIndex), mc.rightChi1d(treeIndex)
if queryLeft = right { // segment completely inside
range
return mc.segmentTree[treeIndex]
if queryLeft > midTreeIndex {
return mc.queryInTree(rightTreeIndex, midTreeIndex+l, right, queryLeft,
queryRight)
} else if queryRight = threshold {
return res.candidate
return -1
* Your Majoritychecker object will be instantiated and called as such:
*obj := Constructor(arr);
* param_1 := obj-Query(left,right,threshold);
---
## Page 1046
1160.FindWordsThatCanBeFormedby.
Characters
题目
seu guuas e pue spuom sus jo Aee ue uai aue no
A string is good if it can be formed by characters from chars (each character can only be used
once).
Return the sum of lengths of all good strings in words 
Example 1:
Input: words = ["cat","bt","hat","tree"], chars = "atach"
Output: 6
Explanation:
The strings that can be formed are "cat" and "hat" so the answer is 3 + 3 = 6.
Example 2:
Input: words = ["hello","world","leetcode"], chars = "welldonehoneyr’
output: 10
Explanation:
The strings that can be formed are "hello" and "world" so the answer is 5 + 5
= 10.
Note:
1. 1  c[w[i]-'a']{
return false
return true
1170.CompareStringsbyFrequency_ofthe
SmallestCharacter
题目
Let's dlefine a function f(s) over a non-empty string s, which calculates the frequency of the
smallest character in s . For example, if s = "dcce" then f(s) = 2 because the smallest
character is *c" and its frequency is 2.
---
## Page 1048
a aaum hamsue ee aa ue nau spom pe sa anb see us aai mon
words
Example 1:
Input: queries = ["cbd"], words = ["zaaaz"]
output: [1]
Explanation: On the first query we have f("cbd") = 1, f("zaaaz") = 3 so
f("cbd")  f("cc").
Constraints:
●1 
1{
counter--
h = h.Next
h.Next = lastNode.Next
if h == nil {
break
}else{
h, prefixSumMap, sum, counter, lastNode = head, map[int]int{}, 0, 0,
&ListNode{va1: 1010}
return head
1175.PrimeArrangements
题目
Return the number of permutations of 1 to n so that prime numbers are at prime indices (1-
indexed.)
(Recall that an integer is prime if and only if it is greoter than 1, ond connot be written as o prodluct of
two positive integers both smoller than it.)
Since the answer may be large, return the answer modulo 10x9 + 7
---
## Page 1053
Example 1:
Input: n = 5
Output: 12
Exp1anation: For example [1,2,5,4,3] is a valid permutation, but [5,2,3,4,1]
is not because the prime number 5 is at index 1.
Example 2:
Input: n = 100
Output: 682289015
Constraints:
●1  n })
return factorial(primeCount) * factorial(n-primeCount) % 1000000007
---
## Page 1054
func factorial(n int) int{
if n == 1 11 n == 0 {
return 1
return n * factorial(n-1) % 1000000007
1184.DistanceBetweenBusStops
题目
A bus has n stops numbered from 0 to n - 1 that form a circle. We know the distance
between all pairs of neighboring stops where distance [i] is the distance between the stops
number i and (i + 1) % n
The bus goes along both directions i.e. clockwise and counterclockwise.
Return the shortest distance between the given start and destination stops.
Example 1:
1
0
(start)
(destination)
Input: distance = [1,2,3,4], start = 0, destination = 1
output: 1
Explanation: Distance between 0 and 1 is 1 or 9, minimum is 1.
Example 2:
---
## Page 1055
0
(start)
(destination)
Input: distance = [1,2,3,4], start = 0, destination = 2
Output: 3
Explanation: Distance between 0 and 2 is 3 or 7, minimum is 3.
Example 3:
1
0
(start)
(destination)
3
Input: distance = [1,2,3,4], start = 0, destination = 3
Output: 4
Explanation: Distance between 0 and 3 is 6 or 4, minimum is 4.
Constraints:
●1 <= n<=10^4
distance.length ==n
●0 <= start, destination < n
0<= distance[i]<= 10^4
题目大意
---
## Page 1056
环形公交路线上有n个站，按次序从0到n-1进行编号。我们已知每一对相邻公交站之间的距离，
distance[i]表示编号为i的车站和编号为（i+1)%n的车站之间的距离。环线上的公交车都可以按顺时
针和逆时针的方向行驶。返回乘客从出发点start到目的地destination之间的最短距离。
提示：
●1 <=n <= 10^4
●distance.length == n
●0 <= start, destination < n
●0 <= distance[i] <= 10^4
解题思路