 4
 5
 6
 7
 8
 9
10
11
12
13
14
Go
复制代码
httpResponse, authResponse, err := api.PreAuthorize(suffix, r)
1
13
Go
复制代码
// PreAuthorize performs a pre-authorization check against the API for the 
given HTTP request
//
// If `outErr` is set, the other fields will be nil and it should be treated 
as
// a 500 error.
//
// If httpResponse is present, the caller is responsible for closing its body
//
// authResponse will only be present if the authorization check was 
successful
func (api *API) PreAuthorize(suffix string, r *http.Request) (httpResponse 
*http.Response, authResponse *Response, outErr error) {
    authReq, err := api.newRequest(r, suffix)
    if err != nil {
        return nil, nil, fmt.Errorf("preAuthorizeHandler newUpstreamRequest: 
%v", err)
    }
    httpResponse, err = api.doRequestWithoutRedirects(authReq)
    if err != nil {
        return nil, nil, fmt.Errorf("preAuthorizeHandler: do request: %v", 
err)
    }
    defer func() {
        if outErr != nil {
            httpResponse.Body.Close()
            httpResponse = nil
        }
    }()
    requestsCounter.WithLabelValues(strconv.Itoa(httpResponse.StatusCode), 
authReq.Method).Inc()
    // This may be a false positive, e.g. for .../info/refs, rather than a
    // failure, so pass the response back
    if httpResponse.StatusCode != http.StatusOK || 
!validResponseContentType(httpResponse) {
        return httpResponse, nil, nil
    }
    authResponse = &Response{}
    // The auth backend validated the client request and told us additional
    // request metadata. We must extract this information from the auth
    // response body.
    if err := json.NewDecoder(httpResponse.Body).Decode(authResponse); err != 
nil {
        return httpResponse, nil, fmt.Errorf("preAuthorizeHandler: decode 
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
14
在 api.newRequest(r, suffix)  中组装头部，并最终向 authorize 发起 API 请求。接受并处理
这个 API 请求的是 Gitlab rails-web组件中的 upload_action , （ 注 Rails框架是 MVC框架，关于 
action、controller 等等⾃⾏搜索补⻬知识
Action 代码如下
app/controllers/concerns/uploads_actions.rb
authorization response: %v", err)
    }
    return httpResponse, authResponse, nil
}
40
41
42
43
Ruby
复制代码
module UploadsActions
  def authorize
    set_workhorse_internal_api_content_type
    authorized = uploader_class.workhorse_authorize(
      has_length: false,
      maximum_size: 
Gitlab::CurrentSettings.max_attachment_size.megabytes.to_i)
    render json: authorized
  rescue SocketError
    render json: _("Error uploading file"), status: :internal_server_error
  end
  def model
    strong_memoize(:model) { find_model }
  end
  ...
  def workhorse_authorize_request?
    action_name == 'authorize'
  end
end
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
15
对应的 Controller 如下
https://guides.rubyonrails.org/action_controller_overview.html  rail 的controller 中可以插⼊多个 
filter ， 所以
从 Gitlab 官⽅⽂档来看 https://docs.gitlab.com/ee/security/user_file_uploads.html 这⾥也是有意为
之，因为 图⽚等等通常会包含在 各类email 等需要读取的地⽅，因此默认情况下 图⽚类型的⽂件是 ⽆
Ruby
复制代码
class UploadsController  return unless model
  uploads_actions: model > strong_memoize(:model) { find_model }
    uploads_controller: find_model > return unless params[:id]
1
2
3
17
⽽ 参数中并没有带上 id ，因此 会⼀路直接 return 掉，并去调⽤了对应的 action
18
因此这个过程中并没有发⽣错误 = =，回到前⾯ api.go 中的 PreAuthorizeHandler 中，这⾥摘录如下
gitlab-workhorse 中的api.go
在完成了 对 /user/uploads/authorize 的请求后， rail-web 中的 upload_contraoller 执⾏ render 返
回数据， gitlab-workhorse 获取返回的 信息并设置authResponse。
next  值如下，其中包含了 HandleFileUpload 也即处理 exif 图⽚ 调⽤ exiftool 的触发点
Go
复制代码
func (api *API) PreAuthorizeHandler(next HandleFunc, suffix string) 
http.Handler {
    return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
        httpResponse, authResponse, err := api.PreAuthorize(suffix, r)
        if httpResponse != nil {
            defer httpResponse.Body.Close()
        }
        if err != nil {
            helper.Fail500(w, r, err)
            return
        }
        // The response couldn't be interpreted as a valid auth response, so
        // pass it back (mostly) unmodified
        if httpResponse != nil && authResponse == nil {
            passResponseBack(httpResponse, w, r)
            return
        }
        httpResponse.Body.Close() // Free up the Puma thread
        copyAuthHeader(httpResponse, w)
        next(w, r, authResponse) 
    })
}
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
19
从⽽完成了整条RCE链路的调⽤。
因此在实际遇到的场景中，POST upload/users 接⼝会返回 404  时因为 代码⾥包含了9⽉的
commit，如果发现 id 没有传⼊，那么就直接 raise 错误，不进⾏下⼀步操作。
Go
复制代码
next => func(w http.ResponseWriter, r *http.Request, a *api.Response) {
            s := &SavedFileTracker{Request: r}
            opts, _, err := p.Prepare(a)
            if err != nil {
                helper.Fail500(w, r, fmt.Errorf("Accelerate: error preparing 
file storage options"))
                return
            }
            HandleFileUploads(w, r, h, a, s, opts)
        }, 
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
20
关于 csrf， 因为 API 请求被发到了后端的 Rails-web， 本身就有 csrf保护， 在 
lib/gitlab/request_forgery_protection.rb:7 对于 绝⼤部分的请求，默认都是要有 CSRF保护的。所以
对于⼀开始流传的POC⽽⾔，第⼀步⾃然是访问主⻚获取到 gitlab_session_   和 X-CSRF-
Token  的值。
21
这部分就只放个⼈星球了，感谢阅读 。
https://public.zsxq.com/groups/555848225184.html
3、扩展利⽤