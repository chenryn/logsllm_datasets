clfsiostat,c
Loconf .h
clfsiostat.h
iostat, c
rd_sensor８.c
sysstat-11.1.1.1sn
αysconf1g.in
iostat .h
rd_sensors.h
common . c
rd_stats.c
sysatat11.1.1,spec
common .h
json_atata.c
READNE
rd_stats.h
syeatat.1n
configure
Json_stata.h
ayaatat,service.1n
syaatat .loconf
configure.Ln
Hakefile,in
rndr_stata, c
contr1b
man
rndr_stats.h
gysatat ayaconfig.1n
COPYING
mpatat,c
sa1.in
count , c
sa2.in
version, 1n
npatat.h
xn1
count .h
CREDITS
nfslostat-sysatat .h
nfεlo８tat-ays８tat .c
sa_conn
sadc.c
on, c
xnl_stats.h
xn1_stats,c
cxon
n1 α
sadf.c
FAQ
pldatat .c
sadf.h
format  c
pldatat .h
sadf_nlac.c
在这个目录的列表中，应该能看到README或AAAREADME文件。读这个文件非常重要。
该文件中包含了软件安装所需要的操作。
按照README文件中的建议，下一步是为系统配置sysstat。它会检查你的Linux系统，确保
它拥有合适的编译器能够编译源代码，另外还要具备正确的库依赖关系。
./configure
Check programs:
checking for gce.., gcc
checking whether the C conpller works..-yea
checking for C conpiler default output [1le nane..- a,out
checking Cor ANSI C header files..- (cached) yea
[ - . . ]
checking for library containing opendir... none required
checklng for dirent.h that Geflnes DIR..- yes
checking ctype.h uaabllity -..yea
---
## Page 194
9.4从源码安装
179
checking ctype.h presence..- yes
checking for ctype.h.-- yea
checking errno.h usability--. yes
checking errno.h presence..-- yea
checking for errno.h..- yes
Check llbrary functions:
[ - - . ]
checking for strchr... yes
checking for atrspn..- yea
checking for atrcspn.-- yes
checking
 for atratr..- yes
checking for sensors support... yea
checking
for sensors_get_detected_chipa in -lsensors... no
checking for sensorsa lib... no
Check syaten servlces:
checking for speclal C compiler options needed for large files... no
checking for _FILE_OFFSET_BITs value needed for large filea... 64
Check configuration:
Nov create files:
[ - - .]
[ - - . ]
config.status: creating Kakefile
Syaatat veraion:
Inatallatlon prefix:
11,1.1
rc dlrectory:
/usr/Local
/etc/rc,d
Init directory:
/etc/rc,d/Lnit,d
Syatemd unit dlx:
Conflguratlon dlrectory:
/etc/aysconfig
Man pages Girectory:
Comp11er :
gcc
(datarootdir)/aan
Compller flags:
-g 02
#
如果哪里有错了，在configure步骤中会显示一条错误消息说明缺失了什么东西。如果你所
用的Linux发行版中没有安装GNUC编译器，那只会得到一条错误信息。对于其他问题，你会看
到好几条消息，说明安装了什么，没有安装什么。
下一步就是用make命令来构建各种二进制文件。make命令会编译源码，然后链接器会为这
个包创建最终的可执行文件。和configure命令一样，make命令会在编译和链接所有的源码文
件的过程中产生大量的输出。
#nake
20- editd- radoqo.d-otxasn- ey- 20- 6- o- o*opes o- 3o6-
-DSA_DIR=\*/var/1og /sa\* -DSADC_PATH=\*/usx/1oca1 /1Lb/sa/sadc^*
-DLOCALEDIR=\*/usx/loca1/share/1ocale\* sadc , c
Z0-sdtdsedoo.d-12Txqsm- Tte- z0- 6- 2- o*ogesoe o- 3o6
---
## Page 195
180
第9章安装软件程序
-DSOURCE_SADC-DSA_DIR=^*/vax/1og/sa^
-DSADc_pATH= /etc/a1ternatives/v
S ls -1 /etc/alternatives/vi
1rwxrwxxwx 1 root root 17 Apr 22 12:33
/etc/alternat:ives/vi -> /usz/bln/vin,tiny
$ 1a -1 /usr/bin/vim.tiny
-rwxr-xx=×x 1 root root 884360 Jan2 14:40
/uax/bln/vin, tiny
S readlink -f /usr/bin/vi
/uax/bin/vin, tiny
因此，当输人vi命令时，执行的是程序/usr/bin/vim.tiny。vim.tiny只提供少量的vim
编辑器功能。如果特别需要vim编辑器，而且使用的又是Ubuntu，那至少应该安装一个基础版本
的vim包。
说明在上面的例子中，其实用不着非得连续使用1s-1命令杂查找一系列链接文件的最终目
标，只需要使用readlink-F命令就可以了。它能够立刻找出链接文件的最后一环
第9章已经详细讲解了软件安装。在Ubuntu发行版中安装基础版的vim包非常简单。
$ sudo apt-get in8tal1 vin
The folloving extra packages wi11 be installed:
( - + + J
---
## Page 198
10.1vim编辑器
183
vim-runt ine
Suggeated packages:
The fol1owing NEM packages vi11 be 1nstalled:
ctagα vimGoc vlm=8cx1ptα
vim via-runtime
[· - - ]
 readlink -f /usr/bin/v1
/ugx/bin/vin,basic
基础版的vim现在安装好了，/usx/bin/vi的文件链接会自动更改成指向/usr/bin/
vim.basic。以后再输人vi命令的时候，使用的就是基础版的vim编辑器了。
10.1.2vim基础
vim编辑器在内存缓冲区中处理数据。只要键人vim命令（或vi，如果这个别名或链接文件
存在的话）和要编辑的文件的名字就可以启动vim编辑器：
S via myprog.c
如在启动vim时未指定文件名，或者这个文件不存在，vim会开辟一段新的缓冲区域来编辑。
如果你在命令行下指定了一个已有文件的名字，vim会将文件的整个内容都读到一块缓冲区域来
准备编辑，如图10-1所示。
int min()
fer(1i = 1; 1 et
t ▪ jeguopse, = teopze,
10
nyprog.c* 16 1.ines, 237 characters
图10-1vim的主窗口
vim编辑器会检测会话终端的类型（参见第2章），并用全屏模式将整个控制台窗口作为编辑
器区域。
最初的vim编辑窗口显示了文件的内容（如果有内容的话），并在窗口的底部显示了一条消息
行。如果文件内容并未占据整个屏幕，vim会在非文件内容行放置一个波浪线（如图10-1所示）。
---
## Page 199
184
第10章使用编辑器
底部的消息行根据文件的状态以及vim安装时的默认设置显示了所编辑文件的信息。如果文
件是新建的，会出现消息[NewFile]。
vim编辑器有两种操作模式：
口普通模式
口插入模式
当你刚打开要编辑的文件时（或新建一个文件时）.vim编辑器会进人普通模式。在普通模式
中，vim编辑器会将按键解释成命令（本章后面会讨论更多）。
在插人模式下，vim会将你在当前光标位置输入的每个键都插入到缓冲区。按下键就可以进
人插人模式。要退出插人模式回到普通模式，按下键盘上的退出键（ESC键，也就是Escape键）
就可以了。
在普通模式中，可以用方向键在文本区域移动光标（只要vim能正确识别你的终端类型）如
果你恰巧在一个古怪的没有定义方向键的终端连接上，也不是完全没有希望。vim中有用来移动
光标的命令。
h：左移一个字符。
口j：下移一行（文本中的下一行）
k：上移一行（文本中的上一行）
1：右移一个字符。
在大的文本文件中一行一行地来回移动会特别麻烦，幸面vim提供了一些能够提高移动速度