  - name: authz_service
    cluster:
      certificate-authority: ca.pem
      server: https://authz.remote/
```
一旦请求被认证和授权模块通过，许可控制器就处理该请求。让我们详细讨论入场控制器。
# 入场管制员
准入控制器是模块，在请求通过认证和授权后，拦截对 API 服务器的请求。控制器在修改集群中对象的状态之前验证并改变请求。控制器可以是突变的，也可以是验证的。如果任何控制器拒绝该请求，该请求将立即被丢弃，并向用户返回一个错误，这样该请求将不会被处理。
可以通过使用`--enable-admission-plugins`标志来启用准入控制器:
```
$ps aux | grep api
root      3460 17.0  8.6 496896 339432 ?       Ssl  06:53   0:09 kube-apiserver --advertise-address=192.168.99.106 --allow-privileged=true --authorization-mode=Node,RBAC --client-ca-file=/var/lib/minikube/certs/ca.crt --enable-admission-plugins=PodSecurityPolicy,NamespaceLifecycle,LimitRanger --enable-bootstrap-token-auth=true
```
可以使用`--disable-admission-plugins`标志禁用默认准入控制器。
在接下来的几节中，我们将看看一些重要的入场控制器。
### 总是承认
这个准入控制器允许集群中存在所有的 Pod 。自 1.13 以来，此控制器已被弃用，不应在任何集群中使用。有了这个控制器，集群的行为就像集群中没有控制器一样。
## 恶意中伤
该控制器确保新的 Pod 总是强制映像拉动。这有助于确保 PODS 使用更新的映像。它还确保私有映像只能由拥有访问权限的用户使用，因为没有访问权限的用户无法在新 pod 启动时获取映像。这个控制 r 应该在你的集群中被启用。
## EventRateLimit
拒绝服务攻击在基础设施中很常见。行为不当的对象也可能导致资源的高消耗，如中央处理器或网络，导致成本增加或低可用性。`EventRateLimit`用于防止这些场景。
使用配置文件指定限制，可以通过向 API 服务器添加`--admission-control-config-file`标志来指定。
一个集群可以有四种类型的限制:`Namespace`、`Server`、`User`和`SourceAndObject`。对于每个限制，用户可以有每秒**查询**(**QPS**)突发和缓存大小的最大限制。
让我们看一个配置文件的例子:
```
limits:
- type: Namespace
  qps: 50
  burst: 100
  cacheSize: 200
- type: Server
  qps: 10
  burst: 50
  cacheSize: 200
```
这为所有应用编程接口服务器和名称空间增加了`qps`、`burst`和`cacheSize`限制。
接下来，我们将讨论 LimitRanger，它可以防止集群中可用资源的过度利用。
## 限定语
该准入控制器观察传入的请求，并确保其不违反`LimitRange`对象中指定的任何限制。
`LimitRange`对象的示例如下:
```
apiVersion: "v1"
kind: "LimitRange"
metadata:
  name: "pod-example" 
spec:
  limits:
    - type: "Pod"
      max:
        memory: "128Mi"
```
使用该限制范围对象，任何请求超过 128 米内存的 Pod 都将失败:
```
pods "range-demo" is forbidden maximum memory usage per Pod is 128Mi, but limit is 1073741824
```
使用 LimitRanger 时，mal 冰冷的 PODS 不能消耗多余的资源。
## 节点限制
这个接纳控制器限制库贝莱可以修改的荚和节点。有了这个准入控制器，kubelet 获得了一个`system:node:`格式的用户名，并且只能修改 nod e 对象和在其自身节点上运行的 pods。
## 持久性卷声明
该许可控制器为`PersistentVolumeClaimResize`请求添加有效性 ns 。
## 亚急性胰腺炎
该许可控制器在 Pod 的创建或修改时运行，以基于 Pod 的安全敏感配置来确定 Pod 是否应该运行。根据工作负载配置检查策略中的条件集，以验证是否应该允许工作负载创建请求。PodSecurityPolicy 策略可以检查诸如`privileged`、`allowHostPaths`、`defaultAddCapabilities`等字段。在下一章中，您将了解到更多关于 PodSecurityPolicy 的信息。
## SecurityContextDeny(安全上下文否认)
如果没有启用 PodSecurityPolicy，这是推荐的准入控制器。它限制了安全敏感字段的设置，这可能会导致权限升级，例如运行权限 pod 或向容器添加 Linux 功能:
```
$ ps aux | grep api
root      3763  6.7  8.7 497344 345404 ?       Ssl  23:28   0:14 kube-apiserver --advertise-address=192.168.99.112 --allow-privileged=true --authorization-mode=Node,RBAC --client-ca-file=/var/lib/minikube/certs/ca.crt --enable-admission-plugins=SecurityContextDeny
```
建议在集群中默认启用 PodSecurityPolicy。但是，由于管理开销，可以使用`SecurityContextDeny`u 直到为集群配置了 PodSecurityPolicy。
## 服务帐户
`ServiceAccount`是 PODS 的一个身份。该入场控制器执行`ServiceAccount`；如果群集使用服务帐户，则应使用 T4 t。
## 突变的 dmissionWebhook 和 ValidatingAdmissionWebhook
类似于认证和授权的网络钩子配置，网络钩子可以用作准入控制器。MutatingAdmissionWebhook 修改工作负载的规范。这些钩子按顺序执行。ValidatingAdmissionWebhook 解析传入的请求以验证它是否正确。验证钩子同时执行。
现在，我们已经了解了 Kubernetes 中资源的身份验证、授权和准入控制。让我们看看开发人员如何在他们的集群中实现细粒度的访问控制。在下一节中，我们将讨论 OPA，这是一个在生产集群中广泛使用的开放源码工具。
# OPA 介绍
**OPA** 是一个开源策略引擎，允许在 Kubernetes 中执行策略。几个开源项目，如 Istio，利用 OPA 来提供更细粒度的控制。OPA 是由**云原生计算基金会** ( **CNCF** )主办的孵化项目。
OPA 作为一项服务与您的其他服务一起部署。为了做出授权决定，微服务向 OPA 发出调用，以决定是允许还是拒绝请求。授权决策被卸载到 OPA，但是这种强制需要由服务本身来实现。在 Kubernetes 环境中，它经常被用作验证网络钩子:
![Figure 7.2 – Open Policy Agent ](img/B15566_07_002.jpg)
图 7.2–开放策略代理
为了做出政策决定，OPA 需要以下内容:
*   **集群信息**:集群的状态。集群中可用的对象和资源对于 OPA 决定是否允许请求非常重要。
*   **输入查询**:策略代理正在解析的请求的参数由代理进行分析，以允许或拒绝请求。
*   **策略**:策略定义解析集群信息并输入查询返回决策的逻辑。OPA 的策略是用一种叫做减压阀的定制语言定义的。
让我们看一个例子，说明如何利用 OPA 来拒绝创建带有`busybox`映像的 PODS。您可以使用官方 OPA 文档([https://www . open policy agent . org/docs/latest/kubernetes-tutorial/](https://www.openpolicyagent.org/docs/latest/kubernetes-tutorial/))在您的集群上安装 OPA。
以下是限制创建和更新带有`busybox`映像的 PODS 的策略:
```
$ cat pod-blacklist.rego
package kubernetes.admission
import data.kubernetes.namespaces
operations = {"CREATE", "UPDATE"}
deny[msg] {
	input.request.kind.kind == "Pod"
	operations[input.request.operation]
	image := input.request.object.spec.containers[_].image
	image == "busybox"
	msg := sprintf("image not allowed %q", [image])
}
```
要应用此策略，您可以使用以下内容:
```
kubectl create configmap pod —from-file=pod-blacklist.rego
```
一旦`configmap`被创建，`kube-mgmt`将这些策略从`configmap`装载到`opa`容器中，两个`kube-mgmt`和`opa`容器都在`opa`容器中。现在，如果您尝试创建一个带有`busybox`映像的 pod，您会得到以下结果:
```
$ cat busybox.yaml
apiVersion: v1
kind: Pod
metadata:
  name: busybox
spec:
  containers:
  - name: sec-ctx-demo
    image: busybox
    command: [ "sh", "-c", "sleep 1h" ]
```
此策略检查对`busybox`映像名称的请求，并拒绝创建带有`busybox`映像的 PODS，出现`image not allowed`错误:
```
admission webhook "validating-webhook.openpolicyagent.org" denied the request: image not allowed "busybox"
```
类似于我们之前讨论的准入控制器，可以在 Kubernetes 集群中使用 OPA 创建更细粒度的准入控制器。
# 总结
在这一章中，我们研究了 Kubernetes 中身份验证和授权的重要性。我们讨论了可用于身份验证和授权的不同模块，并详细讨论了这些模块，以及如何使用每个模块的详细示例。在讨论身份验证时，我们讨论了用户模拟，集群管理员或开发人员可以使用它来测试权限。接下来，我们讨论了准入控制器，它可以用于在身份验证和授权后验证或变异请求。我们还详细讨论了一些准入控制。最后，我们看了 OPA，它可以在 Kubernetes 集群中用来执行更细粒度的授权。
现在，您应该能够为集群设计适当的身份验证和授权策略。您应该能够弄清楚哪些准入控制器适合您的环境。在许多情况下，您需要更精细的授权控制，这可以通过使用 OPA 来提供。
在下一章中，我们将深入研究安全舱。本章将更详细地介绍我们在本章中介绍的一些主题，例如 PodSecurityPolicy。保护 pods 对于保护 Kubernetes 中的应用部署至关重要。
# 问题
1.  哪些授权模块不应在集群中使用？
2.  集群管理员如何测试授予新用户的权限？
3.  生产集群推荐哪些授权模式？
4.  `EventRateLimit`和 LimitRange 入场控制器有什么区别？
5.  你能写一个减压阀策略来拒绝创建带有`test.example`端点的入口吗？
# 进一步阅读
有关更多信息，您可以参考以下链接:
*   入场控制员:[https://kubernetes . io/docs/reference/access-authn-authz/入场控制员/#每个入场控制员都做什么](https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/#what-does-each-admission-controller-do)
*   OPA:[https://www.openpolicyagent.org/docs/latest/](https://www.openpolicyagent.org/docs/latest/)
*   立方 RBC:[https://RBAC . dev/](https://rbac.dev/)
*   audit 2 RBAC:https://github . com/liggitt/audit 2 RBAC
*   忽必烈:[https://github . com/cyber ark/kubi stan](https://github.com/cyberark/KubiScan)