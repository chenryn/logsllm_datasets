    ' (length=3)
          2 => int 5
从第13行开始,出现的token索引为:
> 308 379 312 318
分别对应的`token`信息为:
> T_LNUMBER:整型  
>  T_WHITESPACE:空格  
>  T_VARIABLE:变量  
>  T_CONSTANT_ENCAPSED_STRING:字符串语法
因此,根据行数与对应token索引的值可以明白键值的类型是可以由`T_CONSTANT_ENCAPSED_STRING`以及`T_LNUMBER`来表示的.
有了这层基础,我们才能较好的去分析`array_reconstruct_tokens`
随后进入`array_reconstruct_tokens`函数,函数源码如下:
    function array_reconstruct_tokens()
    {   
        for($i=0,$max=count($this->tokens); $itokens[$i]) && $this->tokens[$i][0] === T_VARIABLE && $this->tokens[$i+1] === '[' )
            {   
                $this->tokens[$i][3] = array();
                $has_more_keys = true;
                $index = -1;
                $c=2;
                // loop until no more index found: array[1][2][3]
                while($has_more_keys && $index tokens[$i+$c][0] === T_CONSTANT_ENCAPSED_STRING || $this->tokens[$i+$c][0] === T_LNUMBER || $this->tokens[$i+$c][0] === T_NUM_STRING || $this->tokens[$i+$c][0] === T_STRING) && $this->tokens[$i+$c+1] === ']')
                    {       
                        unset($this->tokens[$i+$c-1]);
                        $this->tokens[$i][3][$index] = str_replace(array('"', "'"), '', $this->tokens[$i+$c][1]);
                        unset($this->tokens[$i+$c]);
                        unset($this->tokens[$i+$c+1]);
                        $c+=2;
                    // save tokens of non-constant index as token-array for backtrace later 
                    } else
                    {
                        $this->tokens[$i][3][$index] = array();
                        $newbraceopen = 1;
                        unset($this->tokens[$i+$c-1]);
                        while($newbraceopen !== 0)
                        {   
                            if( $this->tokens[$i+$c] === '[' )
                            {
                                $newbraceopen++;
                            }
                            else if( $this->tokens[$i+$c] === ']' )
                            {
                                $newbraceopen--;
                            }
                            else
                            {
                                $this->tokens[$i][3][$index][] = $this->tokens[$i+$c];
                            }   
                            unset($this->tokens[$i+$c]);
                            $c++;
                            if(!isset($this->tokens[$i+$c]))
                            {
                                addError('Could not find closing bracket of '.$this->tokens[$i][1].'[].', array_slice($this->tokens, $i, 5), $this->tokens[$i][2], $this->filename);
                                break;  
                            }
                        }
                        unset($this->tokens[$i+$c-1]);
                    }
                    if($this->tokens[$i+$c] !== '[')
                        $has_more_keys = false;
                    $c++;   
                }   
                $i+=$c-1;
            }
        }
        $this->tokens = array_values($this->tokens);        
    }
    回到```array_reconstruct_tokens```函数
    首先分析第一个```if```语句,判断要求为:
    1. 该```token```信息为数组
    2. 该```token```的索引为变量类型
    3. 该```token```的下一个```token```信息为```[
从这三个条件,我们可以很容易发现这是在寻找`数组`类型的变量,继续分析
在进入if语句后,将`$this->token[$i][3]`替换为了数组,随后又进行了三次赋值:
    $has_more_keys = true;
    $index = -1;
    $c=2;
暂时不分析其各自含义,继续向下分析
接下来是一个`while`循环,判断条件有两个:
  1. `$has_more_keys`是否为真
  2. `$index`小于`MAX_ARRAY_KEYS`
两者需要同时满足,才进入while循环.跟踪`MAX_ARRAY_KEYS`常量,发现是类似于数组维数的变量,定义如下:
    define('MAX_ARRAY_KEYS', 10);           // maximum array key $array[1][2][3][4]..
进入之后`while`循环,首先`$index`变量自增,随后是`if`语句,判断条件如下:
  1. `token`索引的值需要为数组
  2. `token`索引的值需要为`T_CONSTANT_ENCAPSED_STRING`,`T_LNUMBER`,`T_NUM_STRING`,`T_STRING`
  3. 下一个`token`对应的值为`]`
可以判断出,这是在寻找数组的键值部分
进入该`if`语句后,首先将上一个`token`信息消除,再将该`token`的值去掉单双引号存入`$this->token[$i+$c][3]`位置的数组.
进入该`if`语句对应的`else`语句中,与前面取`不变值作为index`不同,else语句中则是对`变值作为index`的收集
首先是赋值语句,对`token`新增了第四个键值,并初始化为数组:
    $this->tokens[$i][3][$index] = array();
接下来对`$newbraceopen`赋值为`1`,该变量可理解为`[`出现的次数.
往下两行是`while`循环:
    while($newbraceopen !== 0)
    {   
        if( $this->tokens[$i+$c] === '[' )
        {
            $newbraceopen++;
        }
        else if( $this->tokens[$i+$c] === ']' )
        {
            $newbraceopen--;
        }
        else
        {
            $this->tokens[$i][3][$index][] = $this->tokens[$i+$c];
        }   
        unset($this->tokens[$i+$c]);
        $c++;
        if(!isset($this->tokens[$i+$c]))
        {
            addError('Could not find closing bracket of '.$this->tokens[$i][1].'[].', array_slice($this->tokens, $i, 5), $this->tokens[$i][2], $this->filename);
            break;  
        }
    }
有了上一个`if`的基础,我们可以轻易看出,该`while`语句作用为将数组的`值`存储在token信息的第四个键上.
到此为止,`array_reconstruct_tokens`函数的作用基本明了:
> 将数组如由`$array[]`格式转换为`$token[i][3]`格式表示的数据
**fix_tokens()函数分析**
    整个函数与上面类似,由```for```和```return```语句构成,跟入```for```语句.
    首先是```if```语句,当前token信息为反引号时,则进入if语句.
    ```if```语句中嵌套了```while```语句,可以发现```if```的条件和```while```的条件刚好可以构成由一对反引号包裹的变量.
    而在```while```语句中的逻辑则是在取其行号,当```while```语句结束后,则进入行号的判断,若行号存在,则第二个反引号的位置被替换为```)```,第一个反引号的位置被替换为如下的token信息:
$this->tokens[$i] = array(T_STRING, ‘backticks’, $line_nr);
    在第一个```if```语句最后以```array_merger```收尾,语句如下:
    ```php
    $this->tokens = array_merge(
    array_slice($this->tokens, 0, $i+1), 
    array('('), 
    array_slice($this->tokens, $i+1)
    );
结合刚刚提到到,将第二个反引号替换为`)`,那么换个角度看,其实也缺失了一个`(`,为了补齐这个括号,通过使用将`token`先分段,再插入,再组合的方法达到补齐括号的效果.
因为`fix_token`的函数过长,因此每个`if`我都会总结一下作用,那么这个if的作用其实便是:
    将 `xxxx`  转换为   xxx()
接下来进入`else if`.
首先是`if`语句,进入`if`语句的条件为:
    1. T_IF
    2. T_ELSEIF
    3. T_FOR
    4. T_FOREACH
    5. T_WHILE
    6. 以上五个条件任意成立一个并且  $this->tokens[$i+1] === '(' 成立
接下来是一个`while`语句,结合上面的经验,我们可以知道这其实是在对括号中的内容定位,然而并没有出现记录相关的操作,结合`T_IF`此类token信息,不难分析出这一步的`while`实质是跳过其中的条件语句.
接着`while`语句的为一个`if`语句,相关代码为:
    if($this->tokens[$i+$f] === ':')
    {
        switch($this->tokens[$i][0])
        {
            case T_IF:
            case T_ELSEIF: $endtoken = T_ENDIF; break;
            case T_FOR: $endtoken = T_ENDFOR; break;
            case T_FOREACH: $endtoken = T_ENDFOREACH; break;
            case T_WHILE: $endtoken = T_ENDWHILE; break;
            default: $endtoken = ';';
        }
        $c=1;
        while( $this->tokens[$i+$f+$c][0] !== $endtoken)
        {
            $c++;
            if(!isset($this->tokens[$i+$f+$c]))
            {
                addError('Could not find end'.$this->tokens[$i][1].'; of alternate '.$this->tokens[$i][1].'-statement.', array_slice($this->tokens, $i, $f+1), $this->tokens[$i][2], $this->filename);
                break;  
            }
        }
        $this->wrapbraces($i+$f+1, $c+1, $i+$f+$c+2);
    }
进入`if`的条件为:
  1. `$this->tokens[$i+$f] === ':'`
而`if`语句则是switch语句,分别对应`T_IF`一类的条件语句,然而再结合前面的`$this->tokens[$i+$f] ===
':'`这个条件则让人有点不解.
这一部分其实是php的替代语法.比如:
    123
替代语法的语法结构与我们常用的语法结构不同这一点十分重要.
在`switch`语句中,设置了对应不同token的结束符号,而接下来的while语句则是不断寻找对应的结束符号的出现位置.
在最后出现了函数`wrapbraces`.跟入:
    function wrapbraces($start, $between, $end)
    {
        $this->tokens = array_merge(
            array_slice($this->tokens, 0, $start), array('{'), 
            array_slice($this->tokens, $start, $between), array('}'),
            array_slice($this->tokens, $end)
        );  
    }
与上面出现的`array_merge`作用类似,都是为了补齐语法结构,符合我们平常的使用习惯
        123   
到这一步为止,语法结构补完.
对应的`else if`语句则为:
    else if($this->tokens[$i+$f] !== '{' && $this->tokens[$i+$f] !== ';'){
        $c=1;
        while($this->tokens[$i+$f+$c] !== ';' && $cwrapbraces($i+$f, $c+1, $i+$f+$c+1);
    }
由于我们已经跳过了判断的条件语句,那么此时`$token[$i+$f]`对应的其实是`{`,但是可以看到这里的`else if`判断条件便是`不为{ 且不为
;`.
此类代码如下:
    if($a==1) echo 1;
于是在这个`else if`语句里出现了`while`循环用以寻找这个语句块的结尾,并通过`$this->wrapbraces`来补齐语法结构.
再跟入下一个
    else if( 
    $this->tokens[$i][0] === T_ELSE 
    && $this->tokens[$i+1][0] !== T_IF
    && $this->tokens[$i+1] !== '{')
    {   
        $f=2;
        while( $this->tokens[$i+$f] !== ';' && $fwrapbraces($i+1, $f, $i+$f+1);
    }
语法结构基本一样,根据条件判断,该语句是用来补全`else`结构的`{`.
再往下依然是`else if`,代码如下:
    else if( $this->tokens[$i][0] === T_SWITCH && $this->tokens[$i+1] === '(')
    {
        $newbraceopen = 1;
        $c=2;
        while( $newbraceopen !== 0 )
        {
            if( $this->tokens[$i + $c] === '(' )
            {
                $newbraceopen++;
            }
            else if( $this->tokens[$i + $c] === ')' )
            {
                $newbraceopen--;
            }                   
            else if(!isset($this->tokens[$i+$c]) || $this->tokens[$i + $c] === ';')
            {
                addError('Could not find closing parenthesis of switch-statement.', array_slice($this->tokens, $i, 10), $this->tokens[$i][2], $this->filename);
                break;  
            }
            $c++;
        }
        // switch(): ... endswitch;
        if($this->tokens[$i + $c] === ':')
        {
            $f=1;
            while( $this->tokens[$i+$c+$f][0] !== T_ENDSWITCH)
            {
                $f++;
                if(!isset($this->tokens[$i+$c+$f]))
                {
                    addError('Could not find endswitch; of alternate switch-statement.', array_slice($this->tokens, $i, $c+1), $this->tokens[$i][2], $this->filename);
                    break;  
                }
            }
            $this->wrapbraces($i+$c+1, $f+1, $i+$c+$f+2);
        }
    }
该`else if`语句进入的条件为`switch`语句,根据前面的经验,我们可以知道第一个`while`语句是用来寻找`swicth`的条件值,而下面的
    if($this->tokens[$i + $c] === ':')
        {
            $f=1;
            while( $this->tokens[$i+$c+$f][0] !== T_ENDSWITCH)
            {
                $f++;
                if(!isset($this->tokens[$i+$c+$f]))
                {
                    addError('Could not find endswitch; of alternate switch-statement.', array_slice($this->tokens, $i, $c+1), $this->tokens[$i][2], $this->filename);
                    break;  
                }
            }
            $this->wrapbraces($i+$c+1, $f+1, $i+$c+$f+2);
        }
则是用来寻找`switch`语句的结尾并使用`{}`包裹,使之形成一个代码块.
继续看向下一个`else if`块:
    else if( $this->tokens[$i][0] === T_CASE )
    {
        $e=1;
        while($this->tokens[$i+$e] !== ':' && $this->tokens[$i+$e] !== ';')
        {
            $e++;
            if(!isset($this->tokens[$i+$e]))
            {
                addError('Could not find : or ; after '.$this->tokens[$i][1].'-statement.', array_slice($this->tokens, $i, 5), $this->tokens[$i][2], $this->filename);
                break;  
            }
        }
        $f=$e+1;
        if(($this->tokens[$i+$e] === ':' || $this->tokens[$i+$e] === ';')
        && $this->tokens[$i+$f] !== '{' 
        && $this->tokens[$i+$f][0] !== T_CASE && $this->tokens[$i+$f][0] !== T_DEFAULT)
        {
            $newbraceopen = 0;
            while($newbraceopen || (isset($this->tokens[$i+$f]) && $this->tokens[$i+$f] !== '}' 
            && !(is_array($this->tokens[$i+$f]) 
            && ($this->tokens[$i+$f][0] === T_BREAK || $this->tokens[$i+$f][0] === T_CASE 
            || $this->tokens[$i+$f][0] === T_DEFAULT || $this->tokens[$i+$f][0] === T_ENDSWITCH) ) ))
            {       
                if($this->tokens[$i+$f] === '{')