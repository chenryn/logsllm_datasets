  uint uVar1;
  uVar1 = param_4 - 2;
  if (uVar1 != 0) {
    uVar1 = param_4 - 3;
    if ((uVar1 == 0) || (uVar1 = param_4 - 0xc, uVar1 == 0)) {
LAB_00405abd:
      return CONCAT31((int3)(uVar1 >> 8),1);
    }
    if (param_4 != 0xd) {
      uVar1 = uVar1 & 0xffffff00;
      if ((param_3 != 'c') && (param_3 != 's')) goto LAB_00405abd;
    }
  }
  return uVar1 & 0xffffff00;
}
uint __cdecl FUN_00405ac5(uint param_1,undefined4 param_2,short param_3,int param_4)
{
  byte bVar1;
  int iVar2;
  if (param_4 == 2) {
    return 0;
  }
  iVar2 = param_4 + -3;
  if (((iVar2 != 0) && (iVar2 = param_4 + -0xc, iVar2 != 0)) && (param_4 != 0xd)) {
    bVar1 = 1;
    if ((param_3 == 99) || (param_3 == 0x73)) {
      bVar1 = 0;
    }
    return (uint)(bVar1 ^ (param_1 & 4) != 0);
  }
  return CONCAT31((int3)((uint)iVar2 >> 8),1);
}
// Library Function - Single Match
// Name: ??$scratch_data@D@formatting_buffer@__crt_stdio_output@@QAEPADXZ
// Libraries: Visual Studio 2015 Debug, Visual Studio 2015 Release
// public: char * __thiscall __crt_stdio_output::formatting_buffer::scratch_data(void)
char * __thiscall scratch_data_char_(formatting_buffer *this)
{
  int iVar1;
  uint uVar2;
  iVar1 = *(int *)(this + 0x404);
  uVar2 = count_char_(this);
  if (iVar1 == 0) {
    this = this + uVar2;
  }
  else {
    this = (formatting_buffer *)(uVar2 + iVar1);
  }
  return (char *)this;
}
void __thiscall FUN_00405b31(void *this,uint param_1,uint param_2,byte param_3)
{
  uint uVar1;
  formatting_buffer *pfVar2;
  char cVar3;
  formatting_buffer *pfVar4;
  pfVar4 = *(formatting_buffer **)((int)this + 0x444);
  if (*(formatting_buffer **)((int)this + 0x444) == (formatting_buffer *)0x0) {
    pfVar4 = (formatting_buffer *)((int)this + 0x40);
  }
  uVar1 = count_char_((formatting_buffer *)((int)this + 0x40));
  pfVar4 = pfVar4 + (uVar1 - 1);
  *(formatting_buffer **)((int)this + 0x34) = pfVar4;
  pfVar2 = pfVar4;
  while ((0 > 1;
  *(int *)((int)this + 0x34) = *(int *)((int)this + 0x34) + 2;
  return;
}
void __thiscall
FUN_00405c2b(void *this,undefined4 param_1,undefined4 param_2,uint param_3,byte param_4)
{
  uint uVar1;
  char extraout_CL;
  char cVar2;
  formatting_buffer *pfVar3;
  formatting_buffer *pfVar4;
  longlong lVar5;
  pfVar4 = *(formatting_buffer **)((int)this + 0x444);
  if (*(formatting_buffer **)((int)this + 0x444) == (formatting_buffer *)0x0) {
    pfVar4 = (formatting_buffer *)((int)this + 0x40);
  }
  uVar1 = count_char_((formatting_buffer *)((int)this + 0x40));
  pfVar4 = pfVar4 + (uVar1 - 1);
  *(formatting_buffer **)((int)this + 0x34) = pfVar4;
  lVar5 = CONCAT44(param_2,param_1);
  pfVar3 = pfVar4;
  while( true ) {
    if ((*(int *)((int)this + 0x28) > 0x20),param_3,0);
    cVar2 = extraout_CL + '0';
    if ('9' > 0x20),param_3,0);
    uVar2 = extraout_ECX + 0x30U & 0xffff;
    cVar1 = (char)uVar2;
    if (0x39 > 1;
  *(int *)((int)this + 0x34) = *(int *)((int)this + 0x34) + 2;
  return;
}
void __cdecl FUN_00405d5f(void *param_1,byte param_2,int param_3,int *param_4)
{
  uint uVar1;
  int iVar2;
  int iVar3;
  iVar3 = 0;
  if (0 ,char>(class
// __crt_stdio_output::string_output_adapter const &,char,int,int * const)
void __cdecl
write_multiple_characters_class___crt_stdio_output__string_output_adapter_wchar_t__char_
          (string_output_adapter_wchar_t_ *param_1,char param_2,int param_3,int *param_4)
{
  int iVar1;
  iVar1 = 0;
  if (0 ::common_data(void)
void __thiscall common_data_char_(common_data_char_ *this)
{
  *(undefined4 *)this = 0;
  *(undefined4 *)(this + 4) = 0;
  *(undefined4 *)(this + 8) = 0;
  *(undefined4 *)(this + 0xc) = 0;
  *(undefined4 *)(this + 0x10) = 0;
  *(undefined4 *)(this + 0x14) = 0;
  *(undefined4 *)(this + 0x18) = 0;
  *(undefined4 *)(this + 0x1c) = 0;
  *(undefined4 *)(this + 0x20) = 0;
  *(undefined4 *)(this + 0x24) = 0;
  *(undefined4 *)(this + 0x28) = 0;
  *(undefined2 *)(this + 0x30) = 0;
  *(undefined4 *)(this + 0x38) = 0;
  this[0x3c] = (common_data_char_)0x0;
  *(undefined4 *)(this + 0x440) = 0;
  *(undefined4 *)(this + 0x444) = 0;
  return;
}
undefined4 * __fastcall FUN_00405e12(undefined4 *param_1)
{
  *param_1 = 0;
  param_1[1] = 0;
  param_1[2] = 0;
  param_1[3] = 0;
  *(undefined2 *)((int)param_1 + 0x32) = 0;
  param_1[4] = 0;
  param_1[5] = 0;
  param_1[6] = 0;
  param_1[7] = 0;
  param_1[8] = 0;
  param_1[9] = 0;
  param_1[10] = 0;
  *(undefined *)(param_1 + 0xc) = 0;
  param_1[0xe] = 0;
  *(undefined *)(param_1 + 0xf) = 0;
  param_1[0x110] = 0;
  param_1[0x111] = 0;
  return param_1;
}
// Library Function - Multiple Matches With Same Base Name
// Name: output_adapter_data<>
// Library: Visual Studio 2015 Release
undefined4 * __thiscall
output_adapter_data__
          (void *this,undefined4 *param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4,
          undefined4 param_5,undefined4 param_6)
{
  common_data_char_((common_data_char_ *)this);
  *(undefined4 *)((int)this + 0x448) = *param_1;
  *(undefined4 *)this = param_2;
  *(undefined4 *)((int)this + 4) = param_3;
  *(undefined4 *)((int)this + 8) = param_5;
  *(undefined4 *)((int)this + 0x10) = param_4;
  *(undefined4 *)((int)this + 0x14) = param_6;
  return (undefined4 *)this;
}
// Library Function - Multiple Matches With Same Base Name
// Name: output_adapter_data<>
// Library: Visual Studio 2015 Release
undefined4 * __thiscall
output_adapter_data__
          (void *this,undefined4 *param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4,
          undefined4 param_5,undefined4 param_6)
{
  FUN_00405e12((undefined4 *)this);
  *(undefined4 *)((int)this + 0x448) = *param_1;
  *(undefined4 *)this = param_2;
  *(undefined4 *)((int)this + 4) = param_3;
  *(undefined4 *)((int)this + 8) = param_5;
  *(undefined4 *)((int)this + 0x10) = param_4;
  *(undefined4 *)((int)this + 0x14) = param_6;
  return (undefined4 *)this;
}
uint * __thiscall FUN_00405ed6(void *this,undefined4 *param_1)
{
  undefined **ppuVar1;
  undefined *puVar2;
  uint uVar3;
  *(undefined *)((int)this + 0xc) = 0;
  ppuVar1 = (undefined **)((int)this + 4);
  if (param_1 == (undefined4 *)0x0) {
    if (DAT_0041ef80 != 0) {
      uVar3 = FUN_0040b5c7();
      *(uint *)this = uVar3;
      *ppuVar1 = *(undefined **)(uVar3 + 0x4c);
      *(int *)((int)this + 8) = *(int *)(uVar3 + 0x48);
      ___acrt_update_locale_info(uVar3,ppuVar1);
      FUN_0040b846(*(int *)this,(int *)((int)this + 8));
      uVar3 = *(uint *)(*(int *)this + 0x350);
      if ((uVar3 & 2) != 0) {
        return (uint *)this;
      }
      *(uint *)(*(int *)this + 0x350) = uVar3 | 2;
      *(undefined *)((int)this + 0xc) = 1;
      return (uint *)this;
    }
    *ppuVar1 = PTR_PTR_DAT_0041e1f8;
    puVar2 = PTR_DAT_0041e1fc;
  }
  else {
    *ppuVar1 = (undefined *)*param_1;
    puVar2 = (undefined *)param_1[1];
  }
  *(undefined **)((int)this + 8) = puVar2;
  return (uint *)this;
}
void __fastcall FUN_00405f69(int param_1)
{
  FID_conflict__free(*(void **)(param_1 + 0x404));
  *(undefined4 *)(param_1 + 0x404) = 0;
  return;
}
// Library Function - Multiple Matches With Same Base Name
// Name: operator=
// Library: Visual Studio 2015 Release
void ** __thiscall operator_(void *this,void **param_1)
{
  FID_conflict__free(*(void **)this);
  *(undefined4 *)this = 0;
  *(void **)this = *param_1;
  *param_1 = (void *)0x0;
  return (void **)this;
}