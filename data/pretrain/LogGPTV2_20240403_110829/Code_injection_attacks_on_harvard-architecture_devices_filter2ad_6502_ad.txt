### 6.4 Flashing the Malware into Program Memory

Once the fake stack is injected into the data memory, the next step is to copy the malware into the flash memory. As previously explained, this can be achieved using the Reprogramming meta-gadget described in Section 6.2. The reprogramming task can be triggered by a specially crafted packet that overwrites the saved return address of the function with the address of the Reprogramming meta-gadget. This packet also injects the address of the fake stack and the address of Gadget2 of the Reprogramming meta-gadget into the stack. The payload of the reprogramming packet is shown in Figure 5.

Upon receiving this packet, the target sensor executes the Reprogramming meta-gadget. The malware, which is part of the fake stack, is then flashed into the sensor's program memory. When the meta-gadget terminates, it returns to the address of the malware, which is then executed.

### 6.5 Finalizing the Malware Installation

After the malware is injected into the program memory, it must be executed. If the malware is installed at address 0, it will run at each reboot. However, this would render the original application non-functional and make the infection easily detectable, which is often undesirable. If the malware is installed in a free area of the program memory, it can be activated by a buffer overflow exploit, allowing the attacker to activate the malware when needed.

This approach has at least two advantages:
1. **Stealth**: The application will run normally, reducing the chance of detection.
2. **Efficiency**: The malware can use some of the existing functions of the application, reducing the size of the code to inject.

If the malware needs to be executed periodically or upon an internal event, it can modify the sensor application to insert a hook. This hook can be installed in a function called by a timer, causing the malware to execute each time the timer fires. This operation requires modifying the local code to add the hook. The same fake stack technique presented in Section 6.3 is used to locally reprogram the page with the modified code containing the hook. Instead of loading the malicious code into the fake stack, the attacker loads the page containing the function to modify, adds the hook, and calls the Reprogramming meta-gadget.

It is important to note that once the malware is installed, it should patch the exploited vulnerability (in the reception function) to prevent over-infection.

### 6.6 Turning the Malware into a Worm

The previous section detailed how to remotely inject malware into a sensor node. It was assumed that this injection was performed by an attacker. However, the injected malware can self-propagate, turning it into a worm. The main idea is that once the malware is installed, it performs the attack described in Section 6 on all its neighbors. It builds a fake stack containing its own code and injects it byte-by-byte into its neighbors as previously explained.

The key difference is that the injected code must not only contain the malware but also the self-propagating code, i.e., the code that builds the fake stack and sends the specially crafted packets. This results in a larger injected code. The main limitation of the injection technique presented in Section 6 is that it can only inject one page (i.e., 256 bytes) of code. If the malware is larger than one page, it needs to be split into pieces of 256 bytes, which are injected separately. In our experiments, we were able to implement a self-propagating worm containing all this functionality in about 1 KByte.

Due to the packet size limitation and the overhead introduced by the byte-injection gadget, only one byte of the fake stack can be injected per packet. This results in the transmission of many malicious packets. An alternative would be to inject an optimized gadget and then use it to inject the fake stack several bytes at a time. Since this gadget would be optimized, it would have less overhead, and more bytes would be available to inject useful data. This technique could reduce the number of required packets by a factor of 10 to 20.

### 7. Possible Counter-Measures

Our attack combines various techniques to achieve code injection. It first uses a software vulnerability to perform a buffer overflow that smashes the stack. It then injects data into the program memory via the execution of gadgets, making the injected code persistent across reboots.

Any solutions that prevent or complicate these operations can help mitigate our attack. However, as we will see, all existing solutions have limitations.

#### Software Vulnerability Protection

Safe TinyOS [5] provides protection against buffer overflows by adding new keywords to the language that allow the programmer to specify the length of an array. The compiler enforces memory boundary checks based on this information. While this solution is useful in preventing some errors, it is not foolproof because the code still needs to be manually instrumented, and human errors are possible. Additionally, other software vulnerabilities can be exploited to gain control of the stack.

#### Stack-Smashing Protection

Stack protections, such as random canaries, are widely used to secure operating systems [6]. These solutions prevent return address overwriting. However, implementing such techniques on a sensor is challenging due to hardware and software constraints. No implementation currently exists for AVR microcontrollers.

#### Data Injection Protection

A simple solution to protect against data injection across reboots is to re-initialize the whole data memory each time a node reboots. This can be done with a simple piece of code, as shown in Figure 8. Cleaning up the memory prevents storing data across reboots for future use. This solution comes with a slight overhead and does not stop attacks that do not rely on reboots to restore the clean state of the sensor. Our proposed attack can use similar state restoration mechanisms, rendering this counter-measure ineffective.

Furthermore, our attack is generic and does not make assumptions about the exploited applications. Some applications may store data in memory for their own usage (e.g., a buffer of data to be sent to the sink). If such a feature exists, it could be exploited to store the fake stack without using the Injection meta-gadget. In this case, only the Reprogramming meta-gadget would be needed, and the presented defense would be ineffective.

#### Gadget Execution Protection

ASLR (Address Space Layout Randomization) [26] randomizes the binary code location in memory to protect against return-into-libc attacks. Since sensor nodes typically contain only one monolithic program and have limited memory space, ASLR would not be effective. [16] proposes improving ASLR by randomizing the binary code itself, which could be adaptable to wireless sensors. However, given the limited address space, sensors would still be vulnerable to brute force attacks [24].

### 8. Conclusions and Future Work

This paper describes how an attacker can take control of a wireless sensor network. The attack can be used to eavesdrop on data, modify configuration, or turn the network into a botnet. The main contribution is proving the feasibility of permanent code injection into Harvard architecture-based sensors. Our attack combines techniques like fake frame injection and return-oriented programming to overcome the barriers posed by the sensor's architecture and hardware. We also describe how to transform the attack into a worm, making the injected code self-replicating.

Even though packet authentication and cryptography can make code injection more difficult, they do not prevent it completely. If the exploited vulnerability is located before the authentication phase, the attack can proceed as described. Otherwise, the attacker must corrupt one of the network nodes and use its keys to propagate the malware to its neighbors. Once infected, the neighbors will infect their own neighbors, eventually compromising the entire network.

Future work includes evaluating how the worm propagates on a large-scale deployment, particularly the potential damage when infection packets are lost, leading to the injection of an incomplete malware image. We will also explore code injection optimizations and efficient counter-measures.

### 9. Acknowledgments

The authors would like to thank Gene Tsudik, John Solis, Karim El Defrawy, and the members of the INRIA PLANETE team for their helpful feedback and editorial suggestions. We are also grateful for the comments from the anonymous reviewers.

The work presented in this paper was supported in part by the European Commission within the STREP UbiSec&Sens project. The views and conclusions contained herein are those of the authors and should not be interpreted as representing the official policies or endorsement of the UbiSec&Sens project or the European Commission.

### 10. References

[1] Aleph One. Smashing the stack for fun and profit. Phrack Magazine 49(14), 1996. http://www.phrack.org/issues.html?issue=49.

[2] AMD. AMD 64 and Enhanced Virus Protection.

[3] ATMEL. Atmega128(l) datasheet, doc2467: 8-bit microcontroller with 128k bytes in-system programmable flash.

[4] K. Chang and K. Shin. Distributed authentication of program integrity verification in wireless sensor networks. ACM TISSEC, 11(3), 2008.

[5] N. Cooprider, W. Archer, E. Eide, D. Gay, and J. Regehr. Efficient memory safety for tinyos. In SenSys, 2007.

[6] C. Cowan, C. Pu, D. Maier, H. Hintony, J. Walpole, P. Bakke, S. Beattie, A. Grier, P. Wagle, and others. Stackguard: automatic adaptive detection and prevention of buffer-overflow attacks. In USENIX Security Symposium, 1998.

[7] Crossbow technology inc. Micaz.

[8] T. DeRaadt. Advances in OpenBSD. In CanSecWest, 2003.

[9] P. Dutta, J. Hui, D. Chu, and D. Culler. Securing the deluge network programming system. IPSN, 2006.

[10] T. Goodspeed. Exploiting wireless sensor networks over 802.15.4. In ToorCon 9, San Diego, 2007.

[11] T. Goodspeed. Exploiting wireless sensor networks over 802.15.4. In Texas Instruments Developer Conference, 2008.

[12] Q. Gu and R. Noorani. Towards self-propagate mal-packets in sensor networks. In WiSec. ACM, 2008.

[13] J. A. Halderman, S. D. Schoen, N. Heninger, W. Clarkson, W. Paul, J. A. Calandrino, A. J. Feldman, J. Appelbaum, and E. W. Felten. Least we remember: Cold boot attacks on encryption keys. In USENIX Security Symposium, 2008.

[14] J. W. Hui and D. Culler. The dynamic behavior of a data dissemination protocol for network programming at scale. In SenSys. ACM, 2004.

[15] IEEE. Wireless medium access control and physical layer specifications for low-rate wireless personal area networks. IEEE Standard, 802.15.4-2003.

[16] C. Kil, J. Jun, C. Bookholt, J. Xu, and P. Ning. Address space layout permutation (ASLP): Towards fine-grained randomization of commodity software. In ACSAC, 2006.

[17] D. H. Kim, R. Gandhi, and P. Narasimhan. Exploring symmetric cryptography for secure network reprogramming. ICDCSW, 2007.

[18] I. Krontiris and T. Dimitriou. Authenticated in-network programming for wireless sensor networks. In ADHOC-NOW, 2006.

[19] P. Lanigan, R. Gandhi, and P. Narasimhan. Sluice: Secure dissemination of code updates in sensor networks. ICDCS, 2006.

[20] G. Montenegro, N. Kushalnagar, J. Hui, and D. Culler. Transmission of IPv6 packets over IEEE 802.15.4 networks (RFC 4944). Technical report, IETF, September 2007.

[21] Riley, Jiang, and Xu. An architectural approach to preventing code injection attacks. dsn, 2007.

[22] A. Seshadri, A. Perrig, L. van Doorn, and P. K. Khosla. SWATT: Software-based attestation for embedded devices. In IEEE S&P, 2004.

[23] H. Shacham. The geometry of innocent flesh on the bone: return-into-libc without function calls (on the x86). In CCS. ACM, 2007.

[24] H. Shacham, M. Page, B. Pfaff, E.-J. Goh, N. Modadugu, and D. Boneh. On the effectiveness of address-space randomization. In CCS. ACM, 2004.

[25] Solar Designer. Return-to-libc attack. Bugtraq mailing list, August 1997.

[26] The PaX Team. Pax address space layout randomization (ASLR). http://pax.grsecurity.net/docs/aslr.txt.

[27] The PaX Team. Pax, 2003. http://pax.grsecurity.net.

[28] B. L. Titzer, D. K. Lee, and J. Palsberg. Avrora: scalable sensor network simulation with precise timing. In IPSN, 2005.

[29] Ubisec&Sens European Project. http://www.ist-ubisecsens.org/.