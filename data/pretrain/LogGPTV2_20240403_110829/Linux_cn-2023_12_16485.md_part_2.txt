TensorFlow 还支持逻辑运算、关系运算和位运算。这里的操作也是按元素执行的。图 2 显示了执行这些按元素操作的 Python 脚本。第 1 行代码从列表创建一个张量，并将其存储在变量 `t1` 中。TensorFlow 的函数 `constant()` 用于从 Python 对象（如列表、元组等）创建张量。类似地，第 2 行创建了另一个张量 `t2`。第 3 行和第 4 行都是执行逐元素求幂并打印输出。从图 2 中可以清楚地看出，该求幂的结果是相同的。第 5 行代码比较张量 `t1` 和 `t2` 的元素并打印结果。输出中的 `[True True False]` 分别是对应 3>2、4>3 和 2>6 的结果。第 6 行的输出与之类似。
![图 3：TensorFlow 矩阵乘法](/data/attachment/album/202312/18/134507v0kwhwctnu003ctw.png)
图 3 展示了 TensorFlow 处理矩阵的例子。第 1 行和第 3 行分别构造两个矩阵 `x` 和 `y`，第 2 行和第 4 行分别打印矩阵 `x` 和 `y`的形状。代码的输出显示 `x` 的形状为 `(3,3)`，`y` 的形状为 `(3，)`。从本系列前面介绍的矩阵知识，我们知道这两个矩阵是不能相乘的。
因此，在第 5 行中将矩阵 `y` 增加了一个维度。在第 6 行，再次打印矩阵 `y` 的形状，输出结果为 `(3,1)`。现在矩阵 `x` 和 `y` 可以相乘了。第 7 行中，将矩阵相乘并打印输出。注意，类似的操作也可以在张量上执行，即使张量的维数很高，TensorFlow 也可以很好地扩展。在本系列的后续文章中，我们将更多地了解 TensorFlow 支持的数据类型和其他复杂操作。
既然介绍了 TensorFlow，我想我也应该提一下 Keras。它为 TensorFlow 提供 Python 接口。在后续的文章中，我们将专门介绍 Keras。
我们如何利用非英伟达 GPU 的能力呢？有许多功能强大的软件包可以做到这一点。比如 PyOpenCL，一个在 Python 中编写并行程序的框架。它让我们可以使用 OpenCL（ 开放计算语言   open computing language ）。OpenCL 可以与 AMD、Arm、英伟达等厂商的 GPU 进行交互。当然还有其他选择，比如 Numba。它是一种JIT 编译器，可用在代码执行期间将 Python 代码编译为机器码。如果 GPU 可用，Numba 允许代码使用的 GPU 能力。图 4 是展示了使用 Numba 的 Python 代码。
我们可以看到函数 `fun()` 具有允许并行化的特征。从图 4 中可以看到，代码在不使用和使用 Numba 的情况下的答案是相同的。但是我们可以看到所花费的执行时间是不同的。当使用 Numba 并行化代码时，只花费了不到一半的时间。此外随着问题规模的增加，并行化和非并行化版本所花费的时间之间的差距也将增加。
![图 4：使用 Numba 进行并行化](/data/attachment/album/202312/18/134507bdtgan8naangpdaa.png)
### SymPy 入门
SymPy 是一个用于符号计算的 Python 库。通过图 5 中的例子，让我们试着理解什么是符号计算。它使用 SymPy 提供的函数 `Integral()`来求积分。图 5 也显示了这个符号计算的输出。注意，SciPy 提供的 `integrate()` 函数返回数值计算结果，而 SymPy 的 `Integral()` 函数能提供精确的符号结果表达式。人工智能和机器学习程序开发中会用到一些统计学操作，SymPy 在执行这些操作时非常有用。
![图 5：符号计算的例子](/data/attachment/album/202312/18/134507jngnklmz9nlg33m3.png)
在本系列的下一篇文章中，我们将讨论 Theano。Theano 是一个 Python 库和优化编译器，用于计算数学表达式。
### 概率论入门
现在是概率论出场的时候了，它是人工智能和机器学习的另一个重要话题。对概率论的详细讨论超出了本系列的范围。我强烈建议在继续阅读之前，先通过维基百科上关于“概率”、“贝叶斯定理”和“标准差”的文章了解一些重要的术语和概念，如概率、独立事件、互斥事件、条件概率、贝叶斯定理、均值、标准差等。学习完这些后，你将能够轻松理解后面关于概率的讨论。
我们从概率分布开始讲起。根据维基百科的说法，“概率分布是一个数学函数，它能给出一个实验中不同的可能结果发生的概率”。现在，让我们试着理解什么是概率分布函数。最著名的概率分布函数是正态分布，通常也称为高斯分布（以伟大的数学家高斯的名字命名）。正态分布函数的图像是一条钟形曲线。图 6 是一个钟形曲线的例子。钟形曲线的确切形状取决于均值和标准差。让我们试着通过分析一种自然现象来理解钟形曲线。从网上可以查到，中国男性的平均身高约为1.7米。在我们周围的到多数男性的身高都非常接近这个数字。你看到一个身高低于1.4米或高于2米的男人的可能性很小。如果记录 100 万人的身高，然后以横轴为身高，纵轴为该身高的人数，绘制统计结果，你会发现绘制出的图像近似为钟形曲线，其中只有一些轻微的倾斜和弯曲。因此，正态分布很容易地捕捉到自然现象的概率特征。
![图 6：钟形曲线（图像来源：维基百科）](/data/attachment/album/202312/18/134507dsm666hsuwhdamxk.png)
现在，我们来看一个使用正态分布的例子。图 7 的代码中我们使用 NumPy 的正态分布的函数 `normal()`，然后使用 Matplotlib 进行绘图。从第 3 行我们可以看到样本大小为 1000。第 4 行绘制一个包含 1000 个  桶   bin  的直方图。但是图 7 的钟形曲线与图 6 中看到的钟形曲线相差很大。究其原因是我们的样本数量只有 1000。样本量应该足够大才能获得更清晰的图像。将第 3 行代码替换为 `sample = normal(size=100000000)`，行并再次执行程序。图 8 显示了一条更好的钟形曲线。这一次，我们的样本大小为 100,000,000，钟形曲线与图 6 所示非常相似。正态分布和钟形曲线只是开始。在下一篇文章中，我们将讨论可以概括其他事件和自然现象的概率分布函数。下一次，我们还将更正式地讨论这个主题。
![图 7：绘制钟形曲线](/data/attachment/album/202312/18/134508m10u13dz1o7dnmhd.png)
本篇的内容就到此结束了。在下一篇文章中，我们将继续探索概率和统计中的一些概念。我们还将安装和使用 Anaconda，这是一个用于科学计算的 Python 发行版，对于开发人工智能、机器学习和数据科学程序特别有用。如前所述，我们还将熟悉另一个名为 Theano 的 Python 库，它在人工智能和机器学习领域被大量使用。
![图 8：更好的钟形曲线](/data/attachment/album/202312/18/134508toqozvrbqgqriitl.png)
*（题图：DA/2a8d805a-01d3-4039-b96c-74766491e264）*
---
via: 
作者：[Deepu Benson](https://www.opensourceforu.com/author/deepu-benson/) 选题：[lujun9972](https://github.com/lujun9972) 译者：[toknow-gh](https://github.com/toknow-gh) 校对：[wxy](https://github.com/wxy)
本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创编译，[Linux中国](https://linux.cn/) 荣誉推出