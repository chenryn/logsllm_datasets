```  
$ psql  
=# BEGIN;  
=# INSERT INTO ft1 VALUES(2);  
=# INSERT INTO ft2 VALUES(2);  
=# COMMIT;  
```  
日志如下，看到启动了两阶段事务  
```  
[S1] LOG:  statement: SET search_path = pg_catalog  
[S1] LOG:  statement: SET timezone = 'UTC'  
[S1] LOG:  statement: SET datestyle = ISO  
[S1] LOG:  statement: SET intervalstyle = postgres  
[S1] LOG:  statement: SET extra_float_digits = 3  
[S1] LOG:  statement: START TRANSACTION ISOLATION LEVEL REPEATABLE READ  
[S1] LOG:  execute pgsql_fdw_prep_1: INSERT INTO public.ft1(c) VALUES ($1)  
[S1] DETAIL:  parameters: $1 = '2'  
[S1] LOG:  statement: DEALLOCATE pgsql_fdw_prep_1  
[S2] LOG:  statement: SET search_path = pg_catalog  
[S2] LOG:  statement: SET timezone = 'UTC'  
[S2] LOG:  statement: SET datestyle = ISO  
[S2] LOG:  statement: SET intervalstyle = postgres  
[S2] LOG:  statement: SET extra_float_digits = 3  
[S2] LOG:  statement: START TRANSACTION ISOLATION LEVEL REPEATABLE READ  
[S2] LOG:  execute pgsql_fdw_prep_2: INSERT INTO public.ft2(c) VALUES ($1)  
[S2] DETAIL:  parameters: $1 = '2'  
[S2] LOG:  statement: DEALLOCATE pgsql_fdw_prep_2  
[S1] LOG:  statement: PREPARE TRANSACTION 'px_1389361800_16388_10'  
[S2] LOG:  statement: PREPARE TRANSACTION 'px_53866648_16389_10'  
[S1] LOG:  statement: COMMIT PREPARED 'px_1389361800_16388_10'  
[S2] LOG:  statement: COMMIT PREPARED 'px_53866648_16389_10'  
```  
3\. 在coordinator节点使用两阶段事务  
```  
=# BEGIN;  
=# INSERT INTO ft1 VALUES (3);  
=# INSERT INTO ft2 VALUES (3);  
=# PREPARE TRANSACTION 'gxid';  
```  
此时，可以查看到2PC会下发到shard节点  
```  
=# SELECT * FROM pg_fdw_xacts;  
 dbid  | transaction | serverid | userid |  status  |      identifier         
-------+-------------+----------+--------+----------+-----------------------  
 13182 |         564 |    16389 |     10 | prepared | px_450388264_16389_10  
 13182 |         564 |    16388 |     10 | prepared | px_569713952_16388_10  
(2 rows)  
```  
当执行COMMIT PREPARED 'gxid'时，会提交远程的两阶段事务。  
4\. 两阶段事务的回滚，保证分布式一致性  
```  
=# BEGIN;  
=# INSERT INTO lt VALUES(4);  
=# INSERT INTO ft1 VALUES(4);  
=# INSERT INTO ft2 VALUES(4);  
```  
关闭一个shard，提交失败  
```  
=# COMMIT; -- error  
```  
检查数据是否一致，所有节点均无数据  
```  
=# SELECT * FROM lt WHERE c = '4'; -- data on local server  
 c   
---  
(0 rows)  
=# SELECT * FROM ft2 WHERE c = '4'; -- data on shard2 server  
 c   
---  
(0 rows)  
当shard1恢复后，可以看到自动回滚掉了  
=# SELECT * FROM ft1 WHERE c = '4'; -- data on shard1 server  
 c   
---  
(0 rows)  
```  
这个patch的讨论，详见邮件组，本文末尾URL。      
PostgreSQL社区的作风非常严谨，一个patch可能在邮件组中讨论几个月甚至几年，根据大家的意见反复的修正，patch合并到master已经非常成熟，所以PostgreSQL的稳定性也是远近闻名的。               
## 参考                
https://wiki.postgresql.org/wiki/2PC_on_FDW  
https://www.postgresql.org/message-id/flat/CAFjFpRfQaCTt1vD9E35J%2BXxfCnZC5HONqgJgGpUjfktJdoYZVw%40mail.gmail.com#CAFjFpRfQaCTt1vD9E35J+PI:EMAIL  
#### [PostgreSQL 许愿链接](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216")
您的愿望将传达给PG kernel hacker、数据库厂商等, 帮助提高数据库产品质量和功能, 说不定下一个PG版本就有您提出的功能点. 针对非常好的提议，奖励限量版PG文化衫、纪念品、贴纸、PG热门书籍等，奖品丰富，快来许愿。[开不开森](https://github.com/digoal/blog/issues/76 "269ac3d1c492e938c0191101c7238216").  
#### [9.9元购买3个月阿里云RDS PostgreSQL实例](https://www.aliyun.com/database/postgresqlactivity "57258f76c37864c6e6d23383d05714ea")
#### [PostgreSQL 解决方案集合](https://yq.aliyun.com/topic/118 "40cff096e9ed7122c512b35d8561d9c8")
#### [德哥 / digoal's github - 公益是一辈子的事.](https://github.com/digoal/blog/blob/master/README.md "22709685feb7cab07d30f30387f0a9ae")
![digoal's wechat](../pic/digoal_weixin.jpg "f7ad92eeba24523fd47a6e1a0e691b59")
#### [PolarDB 学习图谱: 训练营、培训认证、在线互动实验、解决方案、生态合作、写心得拿奖品](https://www.aliyun.com/database/openpolardb/activity "8642f60e04ed0c814bf9cb9677976bd4")
#### [购买PolarDB云服务折扣活动进行中, 55元起](https://www.aliyun.com/activity/new/polardb-yunparter?userCode=bsb3t4al "e0495c413bedacabb75ff1e880be465a")
#### [About 德哥](https://github.com/digoal/blog/blob/master/me/readme.md "a37735981e7704886ffd590565582dd0")