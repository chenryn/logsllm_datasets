等方面的开销提出了更多的需求。MySQL提供了几种存储引擎，有的是事务安全的（如
接下来，用START TRANSACTION语句初始化事务，然后往表里添加一些行，再提交事务，
一种常用的执行事务的办法是：先调用 STARTTRANSACTION（或BEGIN）语句，挂起自动
默认情况下，MySQL的运行模式是自动提交，即每条语句所做的更改会立刻提交到数据
你可以看到表里已记录到了几行内容。如果你启动第二个 mysql 程序实例，并且在插入之
下面的示例对这一方法进行了说明。首先，需要创建一个供使用的表：
要想使用事务，就必须选用一种支持事务处理的存储引擎，如InnoDB。像MyISAM和
mysql>
mySql>INSERTINTOtSET
mysql> START TRANSACTION;
mySql> CREATE TABLE t（name CHAR(20), UNIQUE (name)) ENGINE = InnoDB;
事务处理为数据库操作的结果提供了强有力的保证，但这也对CPU周期、内存和磁盘空
口持久性。当事务执行成功完成时，其影响将被永久性地记录到数据库里。
口独立性。事务之间不应该相互影响，这样事务在并发执行时才会得到与挨个依次执行一
William
Wallace
name
样的效果。
利用事务保证语句安全执行
name='William';
2.12事务处理
111
司
---
## Page 132
被提交的语句：
系。下面这些语句可以说明自动提交模式仍处于被禁用状态，并且 ROLLBACK 将取消那些尚未
自动提交模式的办法来提交一个事务。
回
都将成为当前事务的一部分，语句范围一直延伸到你调用COMMIT或ROLLBACK语句来提交或
然后开始一个新事务。
已经成功执行的那条INSERT语句被还原了，它的影响并没有被记录到表里。
语句之后，这个表只包含在这个事务失败之前被插入的那两个行。准确地说，在发生错误之前
name 值。由于 name 列有一个UNIQUE 索引l，因此这条语句在执行时会失败。在调用 ROLLBACK
句
在调用下面这些语句时你就会看到这种情况：
112
1原来的状态。因此，在结束一个事务的同时，又将开始下一个事务。你也可以通过重新激活
还原它为止。如果使用这个办法，那么自动提交模式的状态将一直保持下去，直到你把它设置
，那么它们将成为另一个新事务的组成部分，它们的提交或还原与第一个事务不会有任何关
如果在事务处理过程中调用了STARTTRANSACTION语句，那么它将隐式地提交当前事务，
此时，有两个行被插入了表，但自动提交模式仍处于禁用状态。如果你继续调用更多的语
接下来，禁用自动提交模式，并插入一些行，然后提交此事务：
我们来看看这个办法是如何实施的。首先，创建一个与前面那个示例一样的表：
将 autocommit 变量设置为0，可以禁用自动提交模式。最后的效果是，后面的所有语句
另一个执行事务的办法是，利用SET语句直接操作自动提交模式的状态：
第二条INSERT语句会试图往表里插入一行，而它与这个表里已有的某个行存在相同的
如果事务执行过程中发生了错误，那么你可以用 ROLLBACK语句来取消它。仍以表t为例，
mysql>INSERT
ny
mysql>
mySql>DROPTABLEt;
SETautocommit=O;
mySql>SELECT *FROM t;
mySql> ROLLBACK;
mysql>
mySql> START TRANSACTION;
William
Wallace
name
sql>
sgi>
sql>
sql>
ySql> CREATE TABLE t（name CHAR(2O),UNIQUE （name)) ENGINE = InnoDB;
name
第2章使用SQL管理数据
INSERT INTO t SET
SET autocommit=0;
INSERT INTO t SET name ='Gromit';
一+
SET
name=
'Wallace';
---
## Page 133
两条语句即可轻松地完成：
你突然发现有两名学生的分数搞混了，需要对换一下。那些输入有误的成绩如下所示：
将会把默认状态重置为启用自动提交模式。
时，服务器会自动回滚该客户端正提交的所有事务。
MySQL参考手册。
了下列语句当中的某一条，那么服务器在执行这条语句之前将先提交当前事务：
语句，以及那些与锁定有关的语句都不能成为事务的一部分。例如，你在事务处理过程中调用
些用来创建、更改或删除数据库或其中的对象的数据定义语言（DataDefinitionLanguage，DDL)
另外一些语句，因为不能成为事务的一部分，而只会对事务产生隐式的影响。通常情况下，那
时再次启用它，当前事务都会结束。在其他情形里，事务也会结束。除了sETautocommit、
想要修复这个错误，应该把8号学生的成绩改成13，把9号学生的成绩改为18。使用下面
在各种场合里，事务都能派上用场。假设你正在处理成绩考评项目里那个 score 表，然后
不过，你必须保证这两条语句是作为一个单元成功执行的。这是一个需要使用事务来解决
如果客户端程序在与服务器的连接断开后，又再次自动重新连接上，那么这个新建的连接
如果在事务被提交之前，客户端结束了会话，或者因意外而中断，都会导致事务结束。此
针对你正在使用的那个MySQL 版本，具体有哪些语句会隐式地提交当前事务请参考
UPDATE Score SET score=13 WHERE event_id=5 AND student_id=8;
正如刚才所述，无论是调用COMMIT或ROLLBACK语句，还是在自动提交模式处于禁用模式
UNLocK TABLES (if tables currently are locked)
TRUNCATETABLE
LOCK TABLES
DROPTABLE
DROP DATABASE
CREATE INDEX
ALTER TABLE
mysql>SETautocommit=1;
要想重新启用自动提交模式，
RENAME TABLE
mySql>SELECT*FROMt;
Student_id I event_id1
William
Wallace
name
INDEX
6
=1 (if not already set to 1)
5
18WHERE event_id=5 AND student_id=9;
score
，可以使用下面这条语句：
18
2.12事务处理
113
---
## Page 134
有两个客户端想要同时修改某个行，那么先锁定该行的那个客户端则可以先修改它。这比表级
在一个客户端修改某个行的同时，另一个客户端可以读取和修改同一个表里的另一个行。如果
采用的是另外一方法。它使用了比较底层的锁定方式，为客户端提供了更细致的表访问控制。
修改同一个表。但这种做法在大量更新时操作时，难以提供很好的并发性能。InnoDB存储引擎
一个表。诸如MyISAM之类的存储引擎使用了表级的锁定机制，以此保证不同客户端不能同时
2.12.3
操作。
INSERT 语句所插入的行被取消了，因为后面执行了那个部分回滚到my_savepoint 保存点的
语句来指定那个保存点。下列语句说明了整个过程是如何工作的：
置一些命名标记。在事务的后续部分，如果想要回滚到那个标记点位置，那么需要使用ROLLBACK
2.12.2使用事务保存点
的问题。先用 START TRANSACTION语句来实现：
114
因为MySQL 是一个多用户数据库系统，所以不同的客户端可能会在同一时间试图访问同
在执行完这些语句之后，表里只有第一条和第三条INSERT 语句插人的那些行；而第二条
MySQL可以让你对事务进行部分回滚。具体做法是，在事务里调用SAVEPOINT语句来设
mySql>INSERT INTO t VALUES(3);
mysql>
这两种办法都可以保证两名学生的分数被正确地交换过来：
mysql>SETautocommit=1;
下面再通过直接显式地设置自动提交模式来完成同样的事情：
mysql>COMMIT;
mysql> UPDATE
mysql>UPDATE score SET
mysql> START TRANSACTION;
------+
ysql>
sql>
student_id |event_id I score
sql>
sgi>
sql>
sql>
第2章使用SQL管理数据
事务隔离
SELECT *FROM t;
ROLLBACK TO SAVEPOINT my_savepoint;
SAVEPOINT my_savepoint;
INSERT INTO t VALUES(1);
START TRANSACTION;
CREATE TABLE t（i INT)ENGINE =InnoDB;
UPDATE
UPDATE score SET score = 13 WHERE event_id=5 AND student_id= 8;
8
score SET score=18 WHEREevent_id=
：0；
：5 AND student_id =
9；
---
## Page 135
会作用于后续的所有客户端连接。此外，所有客户端都可以修改其自己的事务隔离级别。用 SET
句。此语句有以下3种形式：
启动时使用--transaction-isolation 选项，或者在服务器运行时使用 SET TRANSACTION语
数据库系统的 REPEATABLE READ 级别却允许出现幻影行。
这个表格只适用于InnoDB 存储引擎，其中 REPEATABLE READ 级别不允许出现幻影行。而有些
事务所做的哪些修改可以被其他与之同时执行的事务所看到。
时可能出现的各类问题。
做的修改类型进行控制。
看到另一个客户端的事务所做的修改。
的锁定方式提供了更好的并发性能。不过，这里还有一个问题，即一个客户端的事务是否应该
拥有 SUPER 权限的客户端，可以使用 SET TRANSACTION 语句来改变全局隔离级别，之后它
InnoDB 存储引擎默认的隔离级别是REPEATABLE READ。更改它的方式有两种：在服务器
表2-4列出了这4种隔离级别与脏读、
ImnoDB存储引擎实现的事务隔离级别功能，能够让客户端对它们想要看到的由其他事务所
SET
SET
SET
口 SERIALIZABLE。它与 REPEATABLE READ 很相似，但对事务的隔离更彻底，主要表现
 REPEATABLE READ。如果某个事务两次执行同一条 SELECT 语句，其结果是可重复
口READCOMMITTED。它只允许某个事务看到其他事务已经提交的行修改。
口READ UNCOMMITTED。它允许某个事务看到其他事务尚未提交的行修改。
为了解决这些问题，InnoDB存储引擎提供了4种事务隔离级别。这些隔离级别确定了一个
口么
口
口
SERIALIZABLE
REPEATABLEREAD
READCOMMITTED
READ UNCOMMITTED
行修改。
是说，如果某个事务正在读取某些行，那么在它完成之前，其他事务都将无法对这些
在：对于某个事务正在查看的行，只有等到该事务完成才能被其他事务所修改。也就
样的。
的。也就是说，即使有其他事务在同时插入或修改行，这个事务所看到的结果也是一
一个幻影。
果第一个事务再执行同样的一条SELECT 语句，则可能会看到这个新增行，
个事务在刚执行完一条SELECT语句之后，接着就有另一个事务插入了一个新的行。如
幻影行（phantom row）。它指的是，一个事务突然看到一个以前没有见过的行。
次读取时得到的结果都不一样。
不可重复读（nonrepeatable read）。
回滚，从而导致这些行并未真的被修改，其他事务也会那样认为。
这些修改。
脏读（dirtyread）
TRANSACTION ISOLATION LEVEL leVel;
GLOBALTRANSACTION ISOLATION LEVEL
隔离级别
。其他事务因此认为这些行已被修改；即使那个对行进行修改的事务后来被
。它提供了多种不同的隔离级别，
：它指的是，在某个事务所做的修改尚未提交时，其他事务就能看到
表2-4
隔离级别所认可的问题
，如果有一个事务两次执行了同一条SELECT语句，
脏读
。它指的是，同一个事务使用同一条 SELECT 语句在每
否
否
否
是
、不可重复读或幻影行这三个问题之间的认可关系。
level;
，可以允许或预防在多个事务同时运行
不可重复读
否
否
是
是
2.12事务处理
幻影行
而它其实是
否
否
是
假设某
但
115
另