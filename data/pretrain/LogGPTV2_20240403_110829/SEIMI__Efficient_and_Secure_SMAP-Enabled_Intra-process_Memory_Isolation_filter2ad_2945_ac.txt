HLT, INVLPG, RDPMC, MONITOR, MWAIT, WBINVD
LGDT, LLDT, LTR, LIDT
MOV to/from DR0-DR7
MOV to/from CR3, MOV to/from CR8
MOV to/from CR0/CR4, CLTS, LMSW, SMSW
MOV to/from CR2
SWAPGS
CLI, STI
LAR, LSL, VERR, VERW
POPF, POPFQ
L[FS/GS/SS], MOV to [DS/ES/FS/GS/SS], POP [FS/GS]
Far CALL, Far RET, Far JMP
IRET, IRETD, IRETQ
SYSEXIT, SYSRET
XSAVES, XRSTORS, INVPCID
Unco.
Cond.
INV
#GP
#PF
#UD
e
p
y
T
-
T
I
X
E
e
p
y
T
-
V
N
I
e
p
y
T
-
P
X
E
PML4’ page have the same values as their counterparts in the
PML4 page.
Configuring the U-page and S-page. Each page table entry
has a U/S bit that indicates whether it is a user-mode entry
or a supervisor-mode entry. Given a virtual memory page, if
the corresponding entries in all levels of the page tables are
user-mode entries (U/S bit is 1), the page will be a U-page;
otherwise, if any entry is a supervisor-mode entry (U/S bit
is 0), the page will be an S-page. In the host page table, all
user-space pages are U-page. However, as SEIMI copies the
guest page table from the host page table, most page table
entries are identical. To configure S-pages in the guest page
table, SEIMI takes the following strategy. Figure 3(a) shows
our memory management. The 0th-254th entries of the PML4’
page are modified to be supervisor-mode entries, which are
used for the non-isolated memory region. The 255th entry of
the PML4’ page is still a user-mode entry that is reserved for
the isolated memory region. In this way, SEIMI configures
the non-isolated memory region to be S-pages in the guest
page table; however, the region is still U-pages in the host
page table.
Supporting the read-only isolated S-page region. To map
the same physical page as a read-only S-page and a read-
write U-page (as mentioned in §III-B), SEIMI first reserves
the 254th entry in the PML4’ page, and let it reference the
same PDPT page that is referenced by the 255th entry. SEIMI
then sets the 254th entry as a supervisor-mode entry (shown
in Figure 3(b)). Similar to the method of setting the S-page,
SEIMI flips the R/W bit of the page table entry to mark the
page as read-only.
B. Intercepting Privileged Instructions
SEIMI must intercept all privileged instructions in ring 0
of the VMX non-root mode and prevent them from accessing
privileged hardware features. Here we present how we identify
6
all privileged instructions, and enable SEIMI to intercept and
invalidate them.
1) Identifying Privileged Instructions: The identification has
two steps: (1) automated filtering of privileged instructions and
(2) manual verification. The goal is to find instructions that
are privileged or exhibit different functionalities when running
in ring 0 and ring 3. First, to automatically filter privileged
instructions, we embed each instruction with random operands
into a test program and run it in ring 3. By capturing the
general protection exception and the invalid opcode exception,
we manage to automatically and completely filter all privileged
instructions. Such filtering is conservative and will not have
false negatives. Second, we manually review the description of
all X86 instructions by reading the Intel Software Developers’
Manual [29] to confirm that the instructions found in the first
step are all privileged instruction. By reviewing the manual,
we also identify instructions that behave differently in ring 0
and ring 3.
We have identified 20 groups of instructions, as shown
in Table II. Instructions in bold and italic (lines 14-17) are
instructions that behave differently in ring 0 and ring 3.
All other instructions are the privileged instructions. These
instructions are further categorized into three types according
to how they are intercepted by SEIMI: EXIT-Type (§IV-B2),
INV-Type (§IV-B4), EXP-Type (§IV-B3). Some of these han-
dling mechanisms may employ several methods for intercepting
these instructions, which are listed in the Method column.
For most privileged instructions, Intel VT-x provides the
support for monitoring their execution. SEIMI leverages this
support to capture them. For the other instructions, SEIMI
invalids their execution condition that is required for their
correct execution. If there are multiple execution conditions
for one instruction, we choose the one which incurs a lower
performance overhead and does not affect other instructions.
2) Triggering VM Exit: The Intel VT-x technique provides
VMM with the ability to monitor behaviors in a VM. When
the instructions of the EXIT-Type (see Table II) execute in
the VMX non-root mode, they can trigger the VM exit events
and be captured by the VMM. The VM exits are divided into
unconditional exits (lines 1-2) and conditional exits (lines 3-9).
The conditional exit refers to that the triggering of VM exits
depends on the configuration of the control field in the VMCS.
For example, the privileged instructions in SGX (line 3) can
be captured by the Intel VT-x technique via configuring the
ENCLS-exiting bitmap field in the VMCS. To prevent such
instructions from being executed in ring 0, SEIMI explicitly
configures the EXIT-Type privileged instructions to trigger VM
exits in order to capture and stop their execution.
3) Raising Exceptions: For the EXP-Type instructions,
SEIMI raises exceptions during their execution.
Raising #UD. For the instructions in line 20, we disable the
support of them in VMCS, so that the invalid opcode exception
(#UD) will be raised when executing them.
Raising #GP. For the instructions in lines 16-18, Intel VT-x
however does not provide any support for interception. These
instructions are related to the segment operation, and their
no special handling is needed because their execution will set
CPL to 3 and run in ring 3, which prevents instructions from
being fetched from any S-page in ring 3. Therefore, when the
CPU executes the next instruction of the SYSEXIT/SYSRET,
the instruction fetch always raises a page fault exception (#PF).
4) Invalidating the Execution Effects: For the INV-Type
instructions, our solution is instead to invalidate their execution
effects, thus preventing attackers from using these instructions
to obtain information or change any kernel state.
CR*-related instructions. For the %CR0 and %CR4 control
registers–related load/store instructions (line 10), Intel VT-x
supports the configuration of VMCS to control the operation of
these instructions. The %CR0 and %CR4 registers in the VMCS
have a set of guest/host masks and read shadows. Each
bit in the guest/host mask indicates the ownership of the
corresponding bit in %CR0/%CR4—when the bit is 0, the guest
owns the bit, and the guest can read and write the bit in the
%CR0/%CR4; when the bit is 1, the host owns the bit. In the
latter case, when the guest reads the bit in the %CR0/%CR4, the
value of the corresponding bit is read from the corresponding
read shadows; when the guest writes the bit, it does not write
to the %CR0/%CR4. Based on this feature, SEIMI sets all the
bits of the guest/host mask to 1, and all bits in the read
shadows to 0. In this way, the value of the %CR0/%CR4 read
from guest is all 0. Writing to these two registers does not
really modify the values of the %CR0/%CR4. The %CR2 control
register (line 11) is used to store the fault address when a
#PF occurs. Since the exception in the guest directly triggers
the VM exits, the fault address is stored in the VMCS, and
the %CR2 does not record any fault address. An attacker could
not reveal any #PF information from this register, and thus
modifying this register has no effect.
SWAPGS, L[AR/SL], and VER[R/W]. The SWAPGS instruc-
tion (line 12) is used to quickly exchange the base address
stored in the %GS with the value in the IA32_KERNEL_GS_BASE
MSR register. SEIMI sets this MSR register and the %GS
segment base address to the same value, so that the execution
of this instruction has no effect. The LAR and LSL instructions
(line 14) are used to obtain the access right and segment
limit information from the corresponding descriptor. The VERR
and VERW instructions (line 14) are used to verify a segment
is readable and writable. Since the descriptor table is set to
empty, executing these instructions will trigger a descriptor
load segment violation, and the RFLAG.ZF flag will be set to 0.
SEIMI cannot emulate the execution of these instructions,
so the execution will be ignored. Fortunately,
these four
instructions are very rarely used in applications.
CLI/STI and POPF/POPFQ. While CLI/STI (line 13)
instructions can modify the system flag, IF, recorded in RFLAGS,
POPF/POPFQ (line 15) instructions can additionally modify
IOPL and AC. The IF flag is used to mask the hardware
interrupts, and the IOPL is used to control the execution
conditions of the I/O related instructions. In SEIMI, the
modification against IF and IOPL however will not have any
effect. Both interrupts and I/O instructions trigger unconditional
Fig. 4: The segmentation-related handling in SEIMI.
execution changes the segment register. Since the application
runs in ring 0, attackers may switch to any segment, so we
also need to control the execution of these instructions.
We observe that when changing a segment register, the
hardware will use the target selector to access the segment
descriptor table. During this process, if the segment descriptor
table is empty, the CPU will raise a general protection exception
(#GP). Therefore, we can use this feature to capture these
instructions—emptying out the descriptor table. However, this
will lead to two problems: (1) how to ensure the normal
execution of a program with an empty segment descriptor
table, which is used in the addressing of every instruction. 2)
how to ensure the correct functionality of the segment related
instructions (lines 16-17) when the table is empty;
Segment-switching exception using descriptor cache: To
address these two problems, we use the segment descriptor
cache in X86. Each segment register has a visible part for
storing the segment selectors and a hidden part for storing
the segment descriptor information [16]. This hidden part is
also called descriptor cache (as shown in Figure 4). When
executing an instruction that does not switch the segment, the
hardware directly obtains the segment information from the
descriptor cache. Only when an instruction that switches the
segment being executed, the hardware accesses the segment
descriptor table and loads the target segment information into
the descriptor cache (①). Since X86 allows the descriptor cache
to be inconsistent with the descriptor table, we can fill the
correct segment descriptor information in the descriptor cache
and empty out the segment descriptor table. Specifically, we
set the contents of all segment registers in the guest-state field
of the VMCS, including the selector and the corresponding
segment descriptor information. When entering the VMX non-
root mode, the information will be directly loaded into the
guest segment register (②), and we set the value of the base
and limit fields in the GDTR and LDTR registers to 0. This
approach does not affect normal execution of the instructions
that do not switch the segment, and cause the exception only
for instructions that switch the segment. When an exception is
captured, the SEIMI module will check whether this operation
is legal1. If it is legal, the module will perform the emulation
for that instruction to fill the requested segment information
into the corresponding segment register in the VMCS and
return to the VMX non-root mode.
Raising #PF. The SYSEXIT/SYSRET will switch the segment
and directly fill the fixed value into the descriptor cache (③)
without accessing the segment descriptor table, however. We
observe that, although they do not raise the #GP exception,
1The legal operation refers to the legal access that the program should
perform with the CPL=3, rather than running in ring 0.
7
LDT DescriptorGDTBase,Limit,AccessLDTBase,  Limit,  AccessSelector%ds:mov%ds:(%rax), %rbx Visible PartHidden Partmovto %dsVMCSBase, Limit, AccessCS/SS/DS...GS:GuestSelector…SYSEXIT/SYSRETBase=0Limit=FFFFHFixed Values:… …③②①LDTRGDTRVM exits. Even if an attacker modifies IF and IOPL flags, it
will not change any behavior in the interrupts or I/O. We next
describe how to protect AC which is used to control SMAP.
Eliminating the effects of POPFQ on AC. The POPFQ
instruction may also enable/disable SMAP by manipulating
the AC flag. Therefore, we need to make sure that either the
user code does not have such an instruction at all or it cannot
manipulate the AC flag. Since the POPFQ instruction can be
legitimately used for other purposes, we choose to prevent them
from manipulating the AC flag. Our approach is to insert an
“and” instruction before each POPFQ instruction such that the
AC flag of the stack object (i.e., in (%RSP)) is always 0. That
is, the POPFQ instruction can never change the AC flag to 1.
Since in the threat model, attackers cannot hijack control flows
until breaking SEIMI, they cannot skip the and instruction.
C. Redirecting and Delivering Kernel Handlers
System-call handling. The SYSCALL instruction, which is
used to complete a system call, cannot transfer the control
flow from the VMX non-root or root mode. To address this
problem, we choose to replace SYSCALL with VMCALL by
mapping a code page into the target memory space, which
contains two instructions: VMCALL and JMP *%RCX. We then
set the IA32_LSTAR MSR register in guest, which is used to
specify the entry of the system call, to the address of this
VMCALL. Once the process executes a SYSCALL, the control
flow will be transferred to execute this VMCALL instruction to
trigger a hypercall, and the address of the next instruction of
this SYSCALL will be stored into the %RCX register. The SEIMI
module vectors hypercalls through the kernel system call table
and calls the corresponding system call handler. After the
handler returns, the module executes VMRESUME to return back
to the VMX non-root mode and executes the JMP instruction
to jump to the next instruction of the SYSCALL.
Hardening system calls against confused deputy. We
identify a new confused deputy problem that also exists in
previous intra-process isolation mechanisms (e.g., the ones