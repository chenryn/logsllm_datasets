[8.3.6 安全性测试的重要性及其方法](#text00000.html#nav_point_124)
[8.3.7 Web 健康诊断基准](#text00000.html#nav_point_125)
[8.3.8 承包方测试](#text00000.html#nav_point_126)
[8.3.9 发包方测试（验收）](#text00000.html#nav_point_127)
[8.3.10 运维阶段的注意事项](#text00000.html#nav_point_128)
[8.4 总结](#text00000.html#nav_point_129)
# **推荐序** {#text00000.html#nav_point_0 line-num="0 1"}
我投身信息安全产业领域已经有十五个年头了。过去我通过端口扫描，探测服务器的操作系统类型；防火墙出现后，我又转攻
Web 应用安全，结交了很多业内的顶级信息安全专家，与他们进行了大量的交流。
互联网的出现使得大家从传统的纸质信件传递转变为通过互联网电子邮件收发邮件；社交网络的出现，让我们得以通过互联网来结交更多的朋友。然而，我们在享受这些便利的同时，也承受着恶意钓鱼、跨站脚本攻击、恶意网马植入等风险。这些行为造成用户的信息泄漏，银行卡、信用卡信息被恶意盗刷，以致产生大量的经济损失。
通过国际权威的 Web 应用安全机构 OWASP 所发布的 TOP Ten，可以看出 Web
安全的重要性。现在全球有效的网络攻击中，基于 Web 的占 80% ，SQL
注入与跨站脚本攻击一直都位于 OWASP Top Ten
的前两名，这两种攻击通常都发生在 Web 应用当中。
本次受图灵公司的邀请，参与了本书的校译工作，在进行校译期间看到了赵文和刘斌两位译者深厚的日文专业技术功底，同时也深深地感受到了日本人工作的严谨，作者在书中为大家准备了详实的应用案例和代码。
我作为 OWASP
中国北京的负责人，有幸组织和参与了在中国区域内召开的信息安全峰会与亚洲应用安全峰会，发现国外的信息安全专家更善于总结。他们能通过有效的方法论有效地进行一些精尖技术的推广和学习，而国内的信息安全专家在介绍一些高精技术时一般只告知结果，而不介绍过程。
《Web 应用安全权威指南》这本书的作者是日本 Web
安全第一人，足见其编程功底之深厚。本书没有欧美作者的那些诙谐幽默的用语，更多的是严谨而实用的陈述。作者以
Web
应用的安全隐患为引子，将产生安全隐患的原因作为整个主线来描述，同时还生动地介绍了试验这些安全隐患的环境的搭建，以及缺陷代码的示例。同时本书又给大家做了很好的补充说明，讲述了
Web 安全的基础协议和原理，帮助读者打好 Web 安全的基本功。
最难能可贵的是，本书详尽地讲解了 SQL 注入、XSS、CSRF
等的基本原理，同时又增加了详尽的代码解析。这是一本难得的 Web
应用安全指南。无论你是 Web
安全的爱好者，还是研究者，都可以将它作为一本很好的参考书籍。个人建议一些高校的学生通过学习本书，实现从
Web 安全的基础入门到精通。
OWASP 中国北京区负责人、51CTO 信息安全专家
陈亮（OWASP 子明）
# **译者序** {#text00000.html#nav_point_1 line-num="0 1"}
2011 年，索尼遭受了 3 次大规模攻击，造成 7700 万 PlayStation
Network（PSN）用户的个人信息泄漏。攻击令 PSN 网络服务瘫痪了 23
天，给索尼造成了上亿美元的经济损失。
2011 年 12 月，国内知名开发者社区 CSDN 遭到攻击，600
万用户账号及明文密码泄漏并在网络上被大量传播。
2013 年 3 月，全球知名的云笔记应用 Evernote 遭到攻击，导致 5000
万用户的邮箱地址和加密密码泄漏。
写下这篇文字时，又正值全球最大的众筹网站 Kickstarter
被攻击而导致用户信息被窃取。
一件件触目惊心的事件无一不在提醒着我们网络安全的重要性。造成这些事件的罪魁祸首或许只是代码中一些不起眼的地方，但引发的影响及后果却骇人听闻。掌握如何在编程时不引入漏洞已成为了
Web 应用开发者不可或缺的技能。
然而，当开发者想要系统性地学习 Web
应用安全时，却发现市面上充斥着以攻击者的视角写作的"XX
攻防大全"等书籍，却鲜有站在开发者立场的优秀的权威性书籍可供参考。图灵公司引进的这本《Web
应用安全权威指南》正好填补了这一领域的空缺。
"在那本'德丸本'中有透彻的讲解。"这是译者在日本工作期间，向同事询问"什么是
CSRF"时得到的答复。没错，"德丸本"就是本书在日本的昵称，几乎在每个 Web
开发小组的案头都能发现它的身影。
本书的作者德丸浩先生在日本被誉为"Web 应用安全领域第一人"，他在经营着一家
Web 安全咨询公司的同时，还在博客上笔耕不辍，孜孜不倦地分享着自己 Web
安全方面的知识，得此称号可谓实至名归。这本书是目前为止德丸浩先生出版的唯一一本图书，可以说是从业多年的经验沉淀下来的精华。
看过日系技术书的读者，一定会对其通俗易懂、深入浅出、谦虚谨慎等特点印象深刻，本书也不例外。SQL
注入、XSS、CSRF 等对于 Web
开发人员来说耳熟能详却可能一知半解的术语，都将在这本书中详细剖析。本书既适合从头到尾通读来进行系统性学习，也适合作为参考书时常查阅。
最后，再一次感谢图灵文化的编辑们能将这本书引入到国内。感谢另一位译者刘斌的辛勤付出，使得本书能够成功地问世。还要感谢妻子马超对我使用业余时间进行翻译工作的鼓励和支持。
希望本书能够让您受益。
赵文
2014 年 2 月于无锡
# **前言** {#text00000.html#nav_point_2 line-num="0 1"}
近年来，利用 Web
应用存在的安全隐患（即所谓的"漏洞"）展开攻击的案例层出不穷，受害者也与日俱增。虽说只要消除安全隐患就能够杜绝这些攻击，但这就需要
Web 应用开发人员掌握正确的安全性方面的知识。
目前，网络上充斥着大量关于安全性的信息，但多数内容都只是流于表面，无法解答开发人
员的困惑。具体来说，主要存在以下几点疑问。
-   为什么会产生安全隐患
-   安全隐患会产生什么样的影响
-   如何编程才能消除安全隐患
-   为什么某些方法能够消除安全隐患
而本书就是为了解答这些疑问而创作的。为此，从安全隐患产生的原理到具体的对策，以及采用该对策的根据，本书都将尽可能地详细讲述。本书的目标读者包括程序员、设计师、项目经理、质量管理负责人等参与
Web 应用开发的全部人员。另外，本书也会站在 Web
应用的发包方（甲方）的立场上，尽可能地为其提供有用的信息。
虽然本书面向的是开发人员，但对攻击的手段也做了详细的解说。目的就是为了能够让读者切实感受到安全隐患所造成的影响。但有一点需要注意的是，如果没有得到网站管理员的许可就尝试实施攻击的话，就有可能会触犯相关的法律法规。由于非专业人员很难判断自己的行为是否违法，因此，请不要在没有得到许可的情况下攻击正式的网站。
为了让读者能够放心地体验攻击流程，本书提供了在 VMware Player
的虚拟机环境中尝试安全隐患攻击的方法。希望读者能够通过亲自动手，来加深对安全隐患的理解。
最后，虽然本书中的示例代码主要使用了 PHP
语言，但讲述的内容对其他语言也是同样适用的。
# **谢辞** {#text00000.html#nav_point_3 line-num="0 1"}
笔者在写作本书时，在网上征集了一些试读者，并根据试读者的意见和反馈不断地进行了调整。试读者不仅指出了错别字及语法问题，还提出了各种各样的改进方案，甚至还就安全隐患进行了深入的探讨，实在令笔者受益匪浅。如果没有这些建议和探讨，本书就不会是现在的样子。衷心感谢以下这些试读者（恕笔者省略敬称）：
大崎雅幸、太田良典、kaito834、加藤泰文、小邨孝明、坂井隆二、下冈叶子、高木正弘、竹迫良范、东内裕二、塙与志夫、日野洋一郎、山崎圭吾、山下太郎、Masahiro
Yamada（masa141421356）、山本阳平
另外，长谷川阳介先生对本书提出了宝贵意见。同时笔者还在 Twitter
上收到了很多人士的建议。在此一并表示感谢。
最后还要感谢本书的编辑------SB Creative
股份有限公司信息书籍编辑部的友保健太先生，友保先生不仅对写作进度缓慢的笔者颇为照顾，还时常给出宝贵的意见和建议。在此向您致以衷心的感谢。
2011 年 1 月
德丸浩
# **第 1 章 什么是 Web 应用的安全隐患** {#text00000.html#nav_point_4 line-num="0 1"}
> 本章将对"安全隐患"这一贯穿全书的主题加以概述，包括什么是安全隐患，安全隐患会带来哪些问题，安全隐患是如何产生的，等等。本章最后会给出全书的结构和学习方法。
## **1.1 安全隐患即"能用于作恶的 Bug"** {#text00000.html#nav_point_5 line-num="4 5"}
程序 Bug 对于开发者来说如同家常便饭。应用程序有了
Bug，就会出现各种不正常的现象。例如，显示出错误的结果、需要进行的处理迟迟不能结束、网页布局错乱、响应速度极为缓慢等。而这其中，有一种
Bug 能被恶意利用。此类 Bug
被称为安全隐患（Vulnerability），有时也被称为安全性 Bug。
以下是一些恶意利用的常见案例。
-   未经许可浏览用户个人信息等隐私信息
-   篡改网站的内容
-   使网页浏览者的计算机感染病毒
-   伪装成他人来窥探用户的隐私信息、发布文章、在线购物、肆意转账等
-   使目标网站不能被访问
-   在网络游戏中让自己达到无敌状态，或非法获得游戏中的装备道具
-   在确认自己的个人信息时，能看到别人的个人信息 [1]{.注释编号}
[1]{.注释编号下} 能看到其他用户个人信息的 Bug
虽不是故意作恶，但由此而偶然造成的不良后果也被视为安全隐患。
如同程序员对一般的 Bug（无奈地）习以为常一样，Web
应用程序开发者对安全隐患也同样已经司空见惯。倘若开发 Web
应用程序时对安全隐患一无所知，就会开发出能被用来进行上述恶举的网站。针对这一问题，本书将从原理到具体对策，来详细讲述如何在开发
Web 应用时杜绝安全隐患。
## **1.2 为什么存在安全隐患会有问题** {#text00000.html#nav_point_6 line-num="20 21"}
为什么存在安全隐患会有问题，这是个越思考就越深入的课题。接下来，就让我们从几个方面来探讨一下必须杜绝安全隐患的原因。
-   **经济损失**
    应杜绝安全隐患的原因之一为，假如网站的安全隐患被恶意利用，网站的经营者将会蒙受经济损失。典型的损失为以下几项。
    -   赔偿用户的经济损失
    -   给用户寄送代金券作为补偿时的花销
    -   网站暂停运营造成的机会损失
    -   信誉度下降造成的营业额减少
    此类经济损失的总额有时会高达数十亿日元。
    然而，或许有人会有这样的疑问。如果网站的营销规模并不大，上述列举的各项经济损失就会变得相对较小。所以可能有些网站运营方就会采取这种思路：事前不做相应对策，万一出事了就赔偿用户的损失。[2]{.注释编号}
    但是，实际的损失并不仅限于经济损失。
-   **法律要求** [3]{.注释编号}
    《个人信息保护法》是规定网站实施安全性措施的法律。该法第 20
    条规定，拥有超过 5000
    名用户的网站运营方，作为个人信息经营者，有义务实施网站的安全管理措施。
    > （安全管理措施）
    >
    > 第二十条 个人信息经营者，为了安全管理其用户的个人信息，必须采取必要且恰当的措施，防止用户的个人信息被泄漏、删除或损坏。
    安全管理措施的具体内容，由各省厅分别制定规章。其中，"经济产业领域关于个人信息保护法的指导方针"中，"技术性安全管理措施"中的"'个人数据访问控制'的实践方法示例"一节中有如下记载。
    > 检验处理个人信息的系统中引入的访问控制功能的有效性。
    >
    > （例如，检验网络应用是否存在安全隐患。）
    也就是说，通过 Web
    系统管理个人信息的运营者受到《个人信息保护法》以及相关规章的约束，承担着对
    Web 应用的安全隐患采取安全管理措施的法律义务。
-   **对用户造成不可逆的伤害**
    应该意识到，安全隐患造成的事故会给用户带来很多不可逆的伤害。个人信息一旦泄漏，就不可能再回收。账号被盗而导致用户的名誉受损之后，就再也回不到以前的状态了。另外，如果用户的信用卡账号被泄漏，即使赔偿了用户的金钱损失，也不可能完全平抚用户受到的恐慌、不安等精神上的痛苦。换言之，一旦发生了安全事故，就会出现很多金钱无法解决的问题。
-   **欺骗用户**
    大多数网站都会夸耀自身有多么安全。没有网站会表示"本站完全不保证安全性，对于可能出现的安全问题概不负责"。假如网站强调了自己的安全性，就最好将安全隐患消除干净。安全隐患的存在会极大地影响网站的信誉度与可信任性。
-   **被用于构建僵尸网络**
    僵尸网络（Botnet）的存在，是威胁互联网安全的主要因素之一。僵尸病毒（Bot）是一种恶意代码（Malware），计算机被感染后就能够被外界远程操纵，用来发送垃圾邮件或执行
    DDoS 攻击（分布式拒绝服务攻击）等恶意行为。据传，2010 年初爆发的
    Gumblar 恶意程序的目的之一就是构建僵尸网络。
    Web 应用的安全隐患也可能被用于构建僵尸网络，情形如图 1-1 所示。
    ![{%}](Image00000.jpg)
    **图 1-1 Web 应用的安全隐患被用来构建僵尸网络**
    攻击者首先会篡改存在安全隐患的网站的内容，并设下圈套试图让浏览者的计算机感染僵尸病毒。假如浏览网站的用户的计算机存在安全隐患，就会感染上僵尸病毒，从而便能够接受攻击者的命令。进入僵尸网络的计算机
    [4]{.注释编号} 会被用来发送垃圾邮件或执行 DDoS
    攻击。另外，有时僵尸机器也会去攻击新的服务器。如此这般，新被入侵的机器也加入到了被控的僵尸
    Web 服务器集群，那么被感染僵尸病毒的计算机集群的数量就会不断扩大。
    据传，僵尸网络带来的收益是网络犯罪者的一项主要收入来源。换言之，在互联网上发布一个带有安全隐患的网站，就有被反社会势力利用的可能性。
[2]{.注释编号下} 这种策略被称为"风险自留"。
[3]{.注释编号下}
本节阐述的是日本的相关法律，供中国读者参考。遗憾的是，截至译稿时（2013
年 9 月），中国在网络安全隐患方面还没有推出相应的法律法规。------译者注
[4]{.注释编号下} 俗称"肉鸡"。 ------译者注
## **1.3 产生安全隐患的原因** {#text00000.html#nav_point_7 line-num="76 77"}
接下来本节将说明安全隐患产生的原因，据此就可以理解为何笔者之前会说"Web
应用程序开发者对安全隐患已经司空见惯"。
首先，产生安全隐患的原因可分为以下两类。
（A）由 Bug 造成
（B）由检验功能不完善造成
情况（A）包含 SQL 注入（SQL Injection）和跨站脚本（Cross Site
Scripting，简称
XSS）等极具影响力的著名的安全隐患。此类隐患不仅发生场所与安全性毫不相关，而且波及范围能扩散至整个应用程序，着实让人头疼。因此，开发团队的每一个成员在编写应用程序时就必须具有极强的安全意识，但可惜目前还有很多开发团队并未这么做。
另一方面，目录遍历（Directory
Traversal）漏洞是情况（B）中一个代表性的例子。产生此类安全隐患的原因是很多开发者缺乏执行安全检验的意识，而且同（A）一样，它造成的影响也会波及整个应用程序。
由此可见，Web
应用的安全隐患可以被形象地比喻为"在意想不到的地方隐藏着的一个很深的陷阱"。因此，一直以来安全隐患都在源源不断地产生。但是，与真正的陷阱不同的是，我们能够通过学习提前得知哪里会有陷阱。
## **1.4 安全性 Bug 与安全性功能** {#text00000.html#nav_point_8 line-num="92 93"}