strength moderation. Thus, defeating the modera-
tion scheme would require a crack of a moderator’s
key, or the ability to forge an MD5 hashed signa-
ture, both of which are currently computationally
infeasible.
Administrative functions also require the same level
of authentication.2
Messages to be moderated appear to be bounces to
most mail user agents (MUA). MUAs that support a
feature like “retry bounce”, such as Kyle Jones’s ex-
cellent VM for XEmacs and GNU Emacs, will work
best, as the submissions can be read from the mod-
eration queue, brought into a composition buﬀer,
PGP signed, and then sent on their way.
Shibboleth, upon seeing that the message has a valid
PGP signature belonging to a moderator, will send
the message on its way. It is noteworthy that only
the part of the message that was signed will be
passed. Anything outside of the delimiters for the
signed message will not be included; neither will the
PGP signature itself.
Because we use a version of PGP that is not MIME-
aware, PGP does not interfere with any of the
MIMEisms that are in the original message.
Its
Content-type header is left unchanged, and the sig-
nature engulfs the entire message body, including all
attachment data. Thus, when Shibboleth veriﬁes the
2Again, we recently added the ability to allow the simple
X-Password header authentication for moderators and admin-
istrators. This isn’t something we recommend that adminis-
trators enable, but provide it as a means of authentication
where PGP isn’t an option.
signature, it is verifying not only the content of the
message, but also of all of the attachments. Any
changes to the attachments in transit (such as, for
example, the addition of a virus-infected ﬁle) would
cause the signature to fail, causing the attempted
approval message to go to the administrator for re-
view.
For the sake of safety, Shibboleth adds an X-Loop
header and will recognize its own token as a means
of preventing mail loops. If the header and token
are present in an incoming message, Shibboleth will
not deliver the message; it will exit, logging the de-
tection of a mail loop.
3.6 Load Sharing
4 Administration
Instead of requiring that all processing and all out-
bound messages be sent via the same host, Shibbo-
leth provides the ability to direct its outbound mail
to another host. This allows the system running
Shibboleth to share the burden of running the list:
one machine can receive all of the incoming mes-
sages and handle that processing; another can be
used to send all of the outbound messages.
Other features that would enable a more granular
level of load sharing have been planned.
3.7 Outgoing Messages
To prevent the leakage of header data that could
provide information about a poster’s address, Shib-
boleth does not simply forward the message to the
appropriate users. Shibboleth actually creates a new
message altogether. Shibboleth’s conﬁguration con-
tains a list of Perl patterns whose headers should
be preserved. This allows us to include things like
Subject, without having to worry about what data
might bleed in other headers.
Outgoing messages have their own Message-ID
headers generated, thus preventing the poster’s
MTA’s domain name from being present in outgo-
ing messages. Thus, all Message-IDs have the site
name of the MTA that Shibboleth uses. As such, it
is safe to conﬁgure Shibboleth to pass headers like
In-Reply-To and References, which can be used
for building threads. These headers should contain
only Message-IDs that were generated by Shibbo-
leth.
In practice, we also allow such personal touches
that are contained in headers like X-Face and
X-Attribution. MIME works by passing such
headers as MIME-Version and Content-type. This
is all completely under the control of the list family
administrator.
Administration of a Shibboleth installation tends to
be somewhat intensive at ﬁrst, while the system
learns diﬀerent addresses the insiders will use and
what mail relays will deliver their mail. Once the
system has been running for a while, the regular
posters will have their proﬁles set properly, and the
system will not report problems for them except in
the cases of real errors or in major system conﬁgu-
ration changes (such as an ISP buying another and
changing an insider’s address).
The additional administration comes from the need
to train the system to recognize the legitimate mail
relays that are used by various insiders. Because we
use Perl patterns, one need not list every possible
relay host for each user: to allow any host with an
alphanumeric name inside of the zone example.com,
we can specify the pattern \w+\.example\.com.
Beyond this, there is little diﬀerence in the admin-
istrative operation of a Shibboleth list, as compared
to another list manager, such as Majordomo [5].
Because of our authentication system’s requirement
for strong authentication, it isn’t practical for us to
implement a web-based interface like that of Mail-
man [20].
5 Future Work
We have identiﬁed some areas where Shibboleth
could be improved.
5.1 Other Secure Mail Standards
Support
for
OpenPGP [4]
times more desirable options
emerging
(which supports newer,
standards,
such
as
some-
for ciphers and
hashing algorithms) and perhaps S/MIME [17],
would be useful. There are some tricky matters to
be resolved here, especially in allowing a moderator
to sign a signed message and sanely preserving
MIME Content-type data, but it seems well within
reach.
An additional beneﬁt to support of these stan-
dards would be that one could reasonably sign all
outgoing messages without the need to be con-
cerned whether such signing would create problems
for MIME-formatted messages.
(Our RFC 1991-
compliant PGP, though convenient for approving
MIME-formatted messages, isn’t practical for sign-
ing things that will be reviewed by most MUAs.
Our option to have Shibboleth sign all outgoing mes-
sages would prevent most MUAs from being able
to decode MIME-formatted data properly.
If we
could perform the signing in a way that’s friendly
with MIME, the sign-outgoing-mail feature would
be much more useful.)
5.2 Better Peer Support
Especially in an installation where many users dig-
itally sign their submissions to the mailing list and
where the system is signing each message it relays,
CPU overhead could be signiﬁcant. It would be nice
if there were a more intelligent way to spread the
load among some set of hosts, rather than placing
all of the processing burden on one host and only
providing the option of giving the delivery burden
to another.
5.3 Better Moderation Scheme
Currently, there is a race condition for lists where
there are multiple moderators: all moderators for
a particular list get all copies of messages for that
list to be moderated. As a result, multiple approval
(and thus, multiple posts) are possible. We have
managed this problem by convention, but a more
intelligent system for moderation would include the
ability for a moderator to get some number of mes-
sages from the moderation queue and then work on
them himself, without leaving the possibility of du-
plicating another moderator’s work.
5.4 Tolerance of SMTP Irregularities
Our current implementation treats any irregularity
as an error that could indicate forgery, thus requir-
ing administrative attention. We have been think-
ing about ways of lightening this load somewhat
without losing the beneﬁts of SMTP header veri-
ﬁcation.
The most interesting solution to this problem we’ve
considered so far is the addition of a runtime param-
eter that will specify the number of irregularities
that can be tolerated per message. Another run-
time parameter could be used to indicate whether
Shibboleth should automatically add the previously
unknown relays to the user’s proﬁle if they are fewer
than the speciﬁed number. Messages that have
come through more unknown relays than that num-
ber could continue to be handled in the manner
that today’s errors are: administrative attention.
Indeed, if they are not, messages will either mys-
teriously “disappear”, or we’ll override any beneﬁts
derived from checking the headers at all.
5.5 Local User Dilemma
People with local access via normal user accounts to
systems that provide network services can often cre-
ate problems for those network services. Shibboleth
is no exception. Speciﬁcally, users who can inject a
message locally can fool our SMTP header veriﬁca-
tion. Today, we do a simple enumeration of relays
and compare those hosts to patterns in a user’s pro-
ﬁle. If any pattern in a user’s proﬁle does not match,
no error is signaled. This is a mildly diﬃcult prob-
lem, since the primary use for these lists of patterns
is the allowance of posters to send either from home
or from work. Were we to trigger an error if a pat-
tern does not match, a message from such a user
would need to be sent from home and work at the
same time.
The best solution to this problem is to improve the
intelligence of the SMTP header parsing. Rather
than being a simple enumeration of hosts to be
checked against a pattern, the headers should be
parsed, thus telling us which host injected the mes-
sage into the network and which hosts merely re-
layed the message.
Even in such a scenario, we’re at the mercy of MTAs
that are out of our control. Perhaps in practice,
this will be good enough to provide us much more
security than we have now. Whether this is true
will probably depend on each installation, where its
users originate their mail, and which MTAs those
systems run.
Depending on the MTA and its conﬁguration, local
users also have the ability to determine if a “user
unknown” bounce is legitimately generated by the
MTA or if it has been tricked into returning such an
error.
For the time being, we have to consider local users
“trusted”, and reducing such trust is an area for
further study.
5.6 Reducing Necessary Trust in Ad-
ministrators
As implemented, Shibboleth users must trust the ad-
ministrators. Though insiders are protected from
outsiders and from each other, they are not pro-
tected from administrators. Also, all administrators
have full administrative access to the system.
We’re particularly intrigued by the possibility of fu-
ture releases of Shibboleth actually distrusting ad-
ministrators and hiding sensitive information—such
as the members database—from them. Rather than
having any single administrator being able to query
the database for full user proﬁles, for example, what
if we were to require that multiple administrators’
signatures would be necessary to have Shibboleth re-
veal such information or perform especially “risky”
operations?
Another interesting possibility is where hosts would
be used for initially introducing new insiders to the
system, after which users would be individually re-
sponsible for maintaining their own proﬁles.
(It
seems obvious that this would work only for rather
experienced or technical users, but could the system
be made to be smart enough that this is no longer
true?)
6 Conclusions
We have shown that it is possible for a group of
people who wishes to keep to itself can do so, even
in today’s Internet. Despite the lack of strong au-
thentication mechanisms for email at any level other
than application, it is possible to identify mail from
insiders, letting it ﬂow normally, without requiring
that mail from outsiders ﬂow just as freely. Even
less-than-perfect schemes, like SMTP’s simple head-
ers, can be employed to determine reasonably the
authenticity of a message.
Forcing all mail to insiders, public and private, to
run through Shibboleth solves the problem of posters
receiving multiple copies of posts later in the threads
to which they contribute.
Because only Shibboleth nyms are known, someone
cannot inﬁltrate the group, collect messages, and
then use those addresses for his own nefarious pur-
poses later. Once someone is no longer an insider,
those addresses immediately become useless to him.
A simple checklist of features and requirements will
show that we have satisﬁed our requirements. Our
experience with running mailing lists with Shibbo-
leth and enduring attacks against it gives us evi-
dence that these safeguards have in fact worked.
On a daily basis, we hear about the diﬃculty of
privacy and security on the Internet. Though not a
substitute for the needed support for security in our
infrastructure through eﬀorts like IPsec [12], making
better use of what we have available can move us in
the right direction and bring us much closer to the
sort of well-behaved system that does our bidding,
and only our bidding.
7 Acknowledgments
Much of the ﬁrst implementation of the original
design owes its existence to Eugene Sandulenko
((cid:17)en(cid:31) Sandulenko). Thanks to Ed Sheppard for
suggesting the name and to Carolyne J. Butler for
careful proofreading.
[14] J. Postel.
Simple Mail Transfer Protocol.
RFC 821, August 1982.
[15] J. Postel and J.K. Reynolds. File Transfer Pro-
tocol. RFC 959, October 1985.
[16] Jon Postel. On the Junk Mail Problem.
RFC 706, November 1975.
[17] B. Ramsdell (Ed.). S/MIME Version 3 Message
Speciﬁcation. RFC 2633, June 1999.
[18] Justin Sheehy.
FAQ. Usenet FAQ, January 2000.
http://www.faqs.org/faqs/gnus-faq/.
Gnus (emacs newsreader)
[online]
[19] Bob Thomas. On the Problem of Signature
Authentication for Network Mail. RFC 644,
July 1974.
[20] John Viega, Barry Warsaw, and Ken Man-
heimer. Mailman: The GNU mailing list man-
ager. In Twelfth Systems Administration Con-
ference (LISA ’98), page 309, Boston, Mas-
sachusetts, December 6-11 1998. USENIX.
[21] F. Wancho. Message Digest Format. RFC 1153,
April 1990.
References
[1] Usenet
software:
History
Usenet FAQ, February 1998.
http://www.faqs.org/faqs/usenet/software/
part1/.
and sources.
[online]
[2] D. Atkins, W. Stallings, and P. Zimmermann.
PGP Message Exchange Formats. RFC 1991,
August 1996.
[3] T. Berners-Lee, R. Fielding, and H. Frystyk.
Hypertext Transfer Protocol – HTTP/1.0.
RFC 1945, May 1996.
[4] J. Callas, L. Donnerhacke, H. Finney, and
OpenPGP Message Format.
R. Thayer.
RFC 2440, November 1998.
[5] D. Brent Chapman. Majordomo: How I
manage 17 mailing lists without answering
“-request” mail.
In Systems Administration
(LISA VI) Conference, pages 135–143, Long
Beach, CA, October 19-23 1992. USENIX.
[6] D. Crocker. Standard for the format of ARPA
Internet text messages. RFC 822, August 1982.
[7] R. Fielding, J. Gettys, J. Mogul, H. Frystyk,
L. Masinter, P. Leach, and T. Berners-Lee.
Hypertext Transfer Protocol – HTTP/1.1.
RFC 2616, June 1999.
[8] N. Freed and N. Borenstein. Multipurpose In-
ternet Mail Extensions (MIME) Part One: For-
mat of Internet Message Bodies. RFC 2045,
November 1996.
[9] N. Haller and R. Atkinson. On internet authen-
tication. RFC 1704, October 1994.
[10] S. Hambridge and A. Lunde. DON’T SPEW A
Set of Guidelines for Mass Unsolicited Mailings
and Postings (spam*). RFC 2635, June 1999.
J. Kappesser.
FAQ,
news-
[11] Peter
Advanced.
reader
part
Usenet FAQ, August
[online]
http://www.faqs.org/faqs/usenet/software/trn-
faq/part2/.
2:
1998.
trn
[12] S. Kent and R. Atkinson. Security Architecture
for the Internet Protocol. RFC 2401, November
1998.
[13] Eli Pogonatus.
(how to use user+box@host
Usenet FAQ, December 1998.
http://www.faqs.org/faqs/mail/addressing/.
Email addressing FAQ
addresses).
[online]