```
当然，可以使用`docker inspect`子命令的`--format`选项过滤特定端口字段。
`docker port`子命令使您能够通过指定容器的端口号来检索 Docker 主机上的端口绑定:
```
$ sudo docker port baddba8afa98 80
0.0.0.0:80  
```
显然，在前面的所有输出摘录中，突出的信息是`0.0.0.0` IP 地址和`80`端口号。`0.0.0.0` IP 地址是一个元地址，代表 Docker 主机上配置的所有 IP 地址。实际上，`80`容器的端口绑定到 Docker 主机上的所有有效 IP 地址。因此，可以通过 Docker 主机上配置的任何有效 IP 地址来访问 HTTP 服务。
### 将容器绑定到特定的 IP 地址
到目前为止，通过您学习的方法，容器总是绑定到 Docker 主机上配置的所有 IP 地址。但是，您可能希望在不同的 IP 地址上提供不同的服务。换句话说，特定的 IP 地址和端口将被配置为提供特定的服务。我们可以在 Docker 中使用`docker run`子命令的`-p ::`选项来实现这一点，如下例所示:
```
$ sudo docker run -d -p 198.51.100.73:80:80 apache2
92f107537bebd48e8917ea4f4788bf3f57064c8c996fc23ea0fd8ea49b4f3335  
```
这里，IP 地址必须是 Docker 主机上的有效 IP 地址。如果指定的 IP 地址不是 Docker 主机上的有效 IP 地址，容器启动将失败并显示错误消息，如下所示:
```
2014/11/09 10:22:10 Error response from daemon: Cannot start container 
99db8d30b284c0a0826d68044c42c370875d2c3cad0b87001b858ba78e9de53b: 
Error starting user land proxy: listen tcp 10.110.73.34:49153: bind:cannot assign requested address
```
现在，让我们快速查看前面示例的端口映射和 NAT 条目:
*   以下文本是显示该容器详细信息的`docker ps`子命令输出的摘录:
```
 92f107537beb apache2:latest "/usr/sbin/apache2ct 
 About a minute ago Up About a minute 198.51.100.73:80->80/tcp 
 boring_ptolemy
```
*   以下文本是`iptables -n nat -L -n`命令输出的摘录，显示了为此容器创建的`DNAT`条目:
```
 DNAT tcp -- 0.0.0.0/0 198.51.100.73 tcp dpt:80 
 to:172.17.0.15:80
```
在查看了`docker run`子命令的输出和`iptables`的`DNAT`条目后，您将会意识到 Docker 引擎在 Docker 主机的`198.51.100.73` IP 地址和`80`端口上配置了容器提供的服务是多么优雅。
### 自动生成 Docker 主机端口
Docker 容器天生就是轻量级的，由于它们的轻量级特性，您可以在单个 Docker 主机上运行具有相同或不同服务的多个容器。特别是，根据需求跨多个容器自动扩展相同的服务是当今信息技术基础设施的需要。在本节中，您将了解到使用相同服务旋转多个容器的挑战，以及 Docker 解决这一挑战的方式。
在本章的前面，我们通过绑定到 Docker 主机的端口`80`，使用 Apache2 HTTP 服务器启动了一个容器。现在，如果我们尝试再启动一个具有相同端口`80`绑定的容器，该容器将无法以错误消息开始，如下例所示:
```
$ sudo docker run -d -p 80:80 apache2
6f01f485ab3ce81d45dc6369316659aed17eb341e9ad0229f66060a8ba4a2d0e
2014/11/03 23:28:07 Error response from daemon: Cannot start container 
6f01f485ab3ce81d45dc6369316659aed17eb341e9ad0229f66060a8ba4a2d0e: 
Bind for 0.0.0.0:80 failed: port is already allocated  
```
显然，在前面的例子中，容器无法启动，因为前面的容器已经映射到`0.0.0.0`(Docker 主机的所有 IP 地址)和端口`80`。在 TCP/IP 通信模型中，IP 地址、端口和传输协议(TCP、UDP 等)的组合必须是唯一的。
我们可以通过手动选择 Docker 主机端口号(例如，`-p 81:80`或`-p 8081:80`)来克服这个问题。虽然这是一个很好的解决方案，但它不能很好地扩展到自动扩展场景。相反，如果我们将控制权交给 Docker，它将自动生成 Docker 主机上的端口号。通过使用`docker run`子命令的`-p `选项，不指定 Docker 主机端口号来生成端口号，如下例所示:
```
$ sudo docker run -d -p 80 apache2
ea3e0d1b18cff40ffcddd2bf077647dc94bceffad967b86c1a343bd33187d7a8  
```
用自动生成的端口成功启动新容器后，让我们查看端口映射以及前面示例的 NAT 条目:
*   以下文本是显示该容器详细信息的`docker ps`子命令输出的摘录:
```
 ea3e0d1b18cf apache2:latest "/usr/sbin/apache2ct 
 5 minutes ago Up 5 minutes 0.0.0.0:49158->80/tcp 
 nostalgic_morse  
```
*   以下文本是`iptables -n nat -L -n`命令输出的摘录，显示了为此容器创建的`DNAT`条目:
```
 DNAT tcp -- 0.0.0.0/0 0.0.0.0/0 tcp dpt:49158 
 to:172.17.0.18:80  
```
在查看了`docker run`子命令的输出和`iptables`的`DNAT`条目后，最突出的是`49158`端口号。`49158`端口号由 Docker 主机上的 Docker 引擎在底层操作系统的帮助下统一自动生成。此外，`0.0.0.0`元 IP 地址意味着容器提供的服务可以通过 Docker 主机上配置的任何有效 IP 地址从外部访问。
您可能有一个想要自动生成端口号的用例。但是，如果您仍然希望将服务限制在 Docker 主机的特定 IP 地址，可以使用`docker run`子命令的`-p ::`选项，如下例所示:
```
$ sudo docker run -d -p 198.51.100.73::80 apache2
6b5de258b3b82da0290f29946436d7ae307c8b72f22239956e453356532ec2a7
```
在前面两个场景中，Docker 引擎在 Docker 主机上自动生成端口号，并将其暴露给外部世界。网络通信的一般规范是通过预定义的端口号公开任何服务，以便任何人都知道 IP 地址，并且端口号可以轻松访问所提供的服务。然而，这里的端口号是自动生成的，因此，外部世界不能直接到达所提供的服务。因此，这种容器创建方法的主要目的是实现自动缩放，以这种方式创建的容器将与预定义端口上的代理或负载平衡服务接口。
### 使用 EXPOSE 和-P 选项的端口绑定
到目前为止，我们已经讨论了向外部世界发布在容器内部运行的服务的四种不同方法。在所有这四种方法中，端口绑定决定是在容器启动期间做出的，并且该映像没有关于提供服务的端口的信息。到目前为止，它运行良好，因为我们正在建立形象，我们非常了解提供服务的港口。
然而，在第三方映像的情况下，容器内部的端口使用必须明确地公布。此外，如果我们为第三方消费甚至为我们自己使用而构建映像，那么显式地声明容器提供服务的端口是一个很好的做法。也许，映像构建者可以随映像一起发送一个自述文件。然而，更好的做法是将端口详细信息嵌入到映像本身中，以便您可以手动或通过自动脚本轻松地从映像中找到端口详细信息。
Docker 技术允许我们使用`Dockerfile`中的`EXPOSE`指令嵌入端口信息，我们在[第 3 章](03.html)、*建筑映像*中介绍了该指令。在这里，让我们编辑一下本章前面我们用来构建`apache2` HTTP 服务器映像的`Dockerfile`，并添加一个`EXPOSE`指令，如下代码所示。HTTP 服务的默认端口是端口`80`，因此会显示端口`80`:
```
########################################### 
# Dockerfile to build an apache2 image 
########################################### 
# Base image is Ubuntu 
FROM ubuntu:16.04 
# Author: Dr. Peter 
MAINTAINER Dr. Peter  
# Install apache2 package 
RUN apt-get update &&  
     apt-get install -y apache2 &&  
     apt-get clean 
# Set the log directory PATH 
ENV APACHE_LOG_DIR /var/log/apache2 
# Expose port 80 
EXPOSE 80 
# Launch apache2 server in the foreground 
ENTRYPOINT ["/usr/sbin/apache2ctl", "-D", "FOREGROUND"] 
```
现在我们已经将`EXPOSE`指令添加到我们的`Dockerfile`中，让我们进入下一步，使用`docker build`命令构建映像。在这里，让我们重复使用`apache2`映像名称，如下图所示:
```
$ sudo docker build -t apache2 .  
```
成功构建映像后，让我们检查映像以验证`EXPOSE`指令对映像的效果。如前所述，我们可以使用`docker inspect`子命令，如下所示:
```
$ sudo docker inspect apache2  
```
仔细查看前面命令生成的输出，您会发现 Docker 将公开的端口信息存储在`Config`对象的`ExposedPorts`字段中。以下是如何显示公开端口信息的摘录:
```
"ExposedPorts": {
 "80/tcp": {}
},  
```
或者，您可以将`--format`选项应用到`docker inspect`子命令，以便将输出缩小到非常具体的信息。在这种情况下，`Config`对象的`ExposedPorts`字段如下例所示:
```
$ sudo docker inspect --format='{{.Config.ExposedPorts}}' apache2
map[80/tcp:map[]]  
```
为了继续讨论`EXPOSE`指令，我们现在可以使用刚刚制作的`apache2`映像旋转容器。然而，`EXPOSE`指令本身不能在 Docker 主机上创建端口绑定。为了为使用`EXPOSE`指令声明的端口创建端口绑定，Docker 引擎在`docker run`子命令中提供了一个`-P`选项。
在下面的示例中，从较早重建的`apache2`映像启动一个容器。这里，`-d`选项用于在分离模式下启动容器，`-P`选项用于使用`Dockerfile`中的`EXPOSE`指令在 Docker 主机上为所有声明的端口创建端口绑定:
```
$ sudo docker run -d -P apache2
fdb1c8d68226c384ab4f84882714fec206a73fd8c12ab57981fbd874e3fa9074  
```
现在，我们已经使用使用`EXPOSE`指令创建的映像启动了新容器，就像前面的容器一样，让我们查看前面示例的端口映射和 NAT 条目:
*   以下文本是显示该容器详细信息的`docker ps`子命令输出的摘录:
```
      ea3e0d1b18cf apache2:latest "/usr/sbin/apache2ct 
 5 minutes ago Up 5 minutes 0.0.0.0:49159->80/tcp 
 nostalgic_morse 
```
*   以下文本是`iptables -t nat -L -n`命令输出的摘录，显示了为此容器创建的`DNAT`条目:
```
      DNAT tcp -- 0.0.0.0/0 0.0.0.0/0 
 tcp dpt:49159 to:172.17.0.19:80
```
`docker run`子命令的`-P`选项不接受任何附加参数，如 IP 地址或端口号；因此，不可能对端口绑定进行微调，例如`docker run`子命令的`-p`选项。如果端口绑定的微调对您至关重要，您可以随时使用`docker run`子命令的`-p`选项。
## 摘要
容器不会以孤立或单独的方式运送任何实质性的东西。需要系统地构建它们，并为它们提供网络接口和端口号。这些导致了容器向外部世界的标准化展示，便于其他主机或容器在任何网络上查找、绑定和利用它们的独特功能。因此，网络可访问性对于容器被注意到并以无数方式被利用来说是至关重要的。这一章专门展示了容器是如何作为服务被设计和部署的，以及随着时间的推移，容器网络是如何在精确和丰富地增强容器服务这一特殊领域中派上用场的。在接下来的章节中，我们将详细讨论软件密集型 IT 环境中 Docker 容器的各种功能。