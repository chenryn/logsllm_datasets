174Ms(cid:1),pred(scopeS) = Ms,pred(scopeS)∪{xsi : M, s |= ψ(xsi)}.
Ms(cid:1),f un(subPerm)(xsi) = ∅.
8. rmUsr(xsi) :
Ms(cid:1),pred(scopeS) = Ms,pred(scopeS)\{xsi : M, s |= ψ(xsi)}.
Ms(cid:1),f un(subPerm)(xi) = ∅ if M, s |= ψ(xsi).
Ms(cid:1),pred(playsRole)(xi) = Ms(cid:1),pred(playsRole)\{(xsi, xrj ) :
M, s |= ψ(xsi)}.
9. addRole(xri) :
Ms(cid:1),pred(scopeR) = Ms,pred(scopeR)∪{xri : M, s |= ψ(xri)}.
10. rmRole(xri) :
Ms(cid:1),pred(scopeR) = Ms,pred(scopeR)\{xri : M, s |= ψ(xri)}.
Ms(cid:1).pred(playsRole) = Ms,pred(playsRole) \ {(xsi, xrj ) :
M, s |= ψ(xri)}.
11. addObj(xoi) :
Ms(cid:1),pred(scopeO) = Ms,pred(scopeO)∪{xoi : M, s |= ψ(xo)}.
12. rmObj(xoi) :
Ms(cid:1),pred(scopeO) = Ms,pred(scopeO)\{xoi : M, s |= ψ(xoi)}.
Ms(cid:1),f un(subPerm)(sj) = Ms,f un(subPerm)(sj)\{(xoj , xak) ∈
subPerm(sj ) : M, s |= ψ(xoi)} for any subject sj .
Ms(cid:1),f un(rolePerm)(rj ) = Ms,f un(rolePerm)(rj )\{(xoj, xak) ∈
rolePerm(rj ) : M, s |= ψ(xoi)}. for any role rj.
13. addAct(xai) :
Ms(cid:1),pred(scopeA) = Ms,pred(scopeA)∪{xai : M, s |= ψ(xai)}.
14. rmAct(xak) :
Ms(cid:1),pred(scopeA) = Ms,pred(scopeA)\{xak : M, s |= ψ(xak)}.
Ms(cid:1),f un(subPerm)(sj) = Ms,f un(subPerm)(sj)\{(xoj , xak) ∈
subPerm(sj ) : M, s |= ψ(xak)} for any subject sj .
Ms(cid:1),f un(rolePerm)(rj ) = Ms,f un(rolePerm)(rj )\{(xoj, xak) ∈
rolePerm(rj ) : M, s |= ψ(xak)} for any role rj .
The intuition behind atomic constructs can be seen by ex-
amining the deﬁnition of assignP(xsi, xoj, xak) ←
ψ(xsi, xoj , xak).
Intuitively, if ψ(si, oj , ak) is satisﬁed in
state s, then subject si acquires the permission oj , ak. That
is expressed as Ms(cid:1),f un(subPerm)(si) = Ms,f un(subPerm)(si)
∪ {(xoj , xa) : M, s |= scopeO(xoj )scopeA(xak)∧ψ(si, xoj , xak)}.
Similarly, revokeP(xsi, xoj, xak) ← ψ(xsi, xoj, xak) removes
{(xoj , xa) : M, s |= scopeO(xoj)scopeA(xak)∧ψ(si, xoj, xak)}
from Ms,f un(subPerm)(si) to form Ms(cid:1),f un(subPerm)(si)
= Ms,f un(subPerm)(si) \ {(xoj, xa) : M, s |= scopeO(xoj )
scopeA(xak) ∧ ψ(si, xoj , xak)}.
Notice that our interpretation of assigning and removing
permissions are an enhancement of the interpretation given
to the assignment statement (x:=t) in operational seman-
tics of imperative programs. In the case of (x:=t), the only
diﬀerence between the pre state and the post state is that
the value of the variable x in the post state is the value of t
computed in the pre state. Thus, only one variable changes
its value between the pre state and the post state. In our
policy algebra any subject si change its access permission
sets provided that it satisﬁes ψ(si, oj , ak) for some permis-
sion (oj , ak). If it does satisfy ψ(si, oj , ak) for some (oj, ak),
then all such permissions are added to si. Therefore in that
sense, our assignments and removals behave like a vectorized
assignment, and the variables that do change are precisely
those that satisfy ψ.
The next pertinent point about the deﬁnition of atomic
state transitions is that when an entity is removed, it goes
out of scope. Hence all tuples that had the removed entity
is dropped from all relations (i.e.
instances of predicates).
This is necessary in order to prevent the following scenario
occurring. An element goes out of scope in one policy. Then
the application of another policy adds it back.
It would
then start acquiring all relationships it had in its previous
incarnation (that is before it went out of scope). Now, we
deﬁne state transitions for compound policy operators.
Definition 10
(Compound State Transitions). If p
) ∈ Mq.
) ∈ Mq.
) ∈ Mq.
) /∈ Mq.
and q are policies and φ is a sentence. Then:
1. (s, s(cid:7) ∈ Mp(cid:8)q iﬀ (s, s(cid:7)
) ∈ Mp or (s, s(cid:7)
) ∈ Mp(cid:9)q iﬀ (s, s(cid:7)
) ∈ Mp and (s, s(cid:7)
2. (s, s(cid:7)
) ∈ Mp(cid:1)q iﬀ (s, s(cid:7)
) ∈ Mp and (s, s(cid:7)
3. (s, s(cid:7)
) ∈ M(cid:2)p iﬀ (s, s(cid:7)
) /∈ Mp.
4. (s, s(cid:7)
) ∈ Mφ::p iﬀ (s, s(cid:7)
) ∈ Mp and M, s |= φ.
5. (s, s(cid:7)
) ∈ Mφ(cid:1)p iﬀ (s, s(cid:7)
) ∈ Mp and M, s(cid:7) |= φ for every
6. (s, s(cid:7)
s(cid:7) ∈ S(cid:7)
.
) ∈ Mp;q iﬀ there is a state s(cid:7)
) ∈ Mp
7. (s, s(cid:7)(cid:7)
and (s(cid:7), s(cid:7)(cid:7)
n)(cid:15)
8. Inductively deﬁne p
n and (3)(s, s(cid:7)
p
9. (s, sp ∪ sq) ∈ Mp∪q if (s, sp) ∈ Mp and (s, sq) ∈ Mq for
some states sp and sq.
10. (s, sp ∩ sq) ∈ Mp∩q if (s, sp) ∈ Mp and (s, sq) ∈ Mq for
some states sp and sq.
11. (s, sp − sq) ∈ Mp−q if (s, sp) ∈ Mp and (s, sq) ∈ Mq for
some states sp and sq.
) ∈ Mφ:p if there is a state s(cid:7)(cid:7) ⊇ S such that
(s, s(cid:7)
12.
) ∈ Mp and s = {(si, oj , ak) : M, s |= φ(si, oj , ak)}.
(s(cid:7)(cid:7), s(cid:7)
) ∈ Mφ(cid:2)p if there is a state s(cid:7)(cid:7) ⊇ S(cid:7)
(s, s(cid:7)
13.
such that
= {(si, oj , ak) : M, s(cid:7)(cid:7) |= φ(si, oj , ak)}.
) ∈ Mp and s(cid:7)
(s, s(cid:7)(cid:7)
1 = p, (2) p
) ∈ Mpn for some n.
n as: (1) p
) ∈ Mp(cid:1) iﬀ (s, s(cid:7)
such that (s, s(cid:7)
n+1 = (p; p
4.1 Algebra of Policies
Our previous work on policy compositions [22] show many
algebraic properties such as (POL,(cid:15), (cid:16), (cid:2), 1pol, 0pol) forms
a Boolean algebra under suitable assumptions of 1pol and
0pol. Due to deﬁned atomic operations we can now deﬁne
Opol and 1pol as p1; p2 and 0pol; p3; p4 respectively. Here
p1, p2, p3 and p4 are deﬁned as (revokeP(xsi, xoj , xak) ←
(cid:29)); (revokeP(xri, xoj, xak) ← (cid:29)); (revokeR(xsi, xrj) ← (cid:29)),
(rmUsr(xsi) ← (cid:29)); (rmRole(xri) ← (cid:29)); (rmObj(xoi) ← (cid:29));
(rmAct(xai) ← (cid:29)), (assignP(xsi, xoj , xak) ← (cid:29));
(assignP(xri, xoj, xak) ← (cid:29)); (assignR(xsi, xrj ) ← (cid:29)) and
(addUsr(xsi) ← (cid:29)); (addRole(xri) ← (cid:29)); (addObj(xoi) ←
(cid:29)); (addAct(xai) ← (cid:29)), where (cid:29) is any tautology. Other
algebraic properties of composition operators appear in [22].
5. SPECIFYING FAMILIAR POLICIES
Now we demonstrate the expressibility of our algebra by
showing how some commonly known policies can be for-
mulated. Completeness enforcing open and closed meta-
policies, consistency resolving permissions take precedence,
prohibitions takes precedence and RBAC constraint enforc-
ing policies are our examples.
Open Policy: The open policy that permits every access
request not explicitly prohibited is expressed as ps∪pr where
ps and pr are given by the sentences (the closed policy can
be similarly deﬁned):
assignP(xsi, xoj , +xak) ← scopeO(xoj) ∧ scopeA(xak) ∧
(xoj,−xak) /∈ subPerm(xsi)
assignRP(xri, xoj , +xak) ← scopeO(xoj) ∧ scopeA(xak) ∧
(xoj,−xak) /∈ rolePerm(xri)
Permissions take Precedence: In case of over speciﬁ-
cation, this policy which allows permissions to supersede
175prohibitions can be expressed as follows (prohibitions takes
precedence can be similarly deﬁned).
revokeP(xsi, xoj,−xak) ← (xoj , +xak), (xoj ,−xak)
∈ subPerm(xsi).
Most Speciﬁc Permissions/Prohibitions takes Prece-
dence: This policy is used to resolve inconsistencies aris-
ing out of multiply inheritance, resolves them by allowing
the most speciﬁc to supersede all others can be speciﬁed as
p1 ∩ p2, ﬁrst we deﬁne p1 the most speciﬁc permissions take
precedence policy as follows. (p2 where most speciﬁc prohi-
bitions supersedes others can be deﬁned similarly):
∀xsixoj xak[(xoj , +xak), (xoj ,−xak) ∈ subPerm(xsi)∧∃xol >
xoj(xol, +xak) ∈ subPerm(xsi)∧ (cid:22) ∃xom(xol >o xom >o
xoj)∧(xom,−xak) ∈ subPerm(xsi) →]revokeP(xsi, xoj, −xak).
Separation of Duty Principles: Static separation of duty
principle require that conﬂicting permissions not be granted
to any subject or role. It can be speciﬁed as [∀xom, ∀xan
scopeO(xom)∧conPerm(xoj , xak, xom, xan)∧scopeA(xan) →
(xom, +xan) /∈ subPerm(xsi)] → assignP(xsi, xoj, xak).
Similarly, we can specify static separation of duty for roles
as pr. Then ps ∪ pr is commonly referred to as the static
separation of duty principle.
Specifying RBAC compliant Accesses: Suppose that
r1 and r2 are conﬂicting roles, and therefore in order to
enforce dynamic separation of duty principles, no subject
should be able to assume both of them simultaneously. The
policy p1 (cid:15) p2 deﬁnable in our language enforces this form
of separation of duty principle where p1 and p2 are deﬁned
as ¬playsRole(xsi, r2) → assignR(xsi, r1) and
¬playsRole(xsi, r1) → assignR(xsi, r2).
Designing Conﬂict-free Roles: There is a RBAC princi-
ple that speciﬁes roles to be conﬂict free if they do not have
conﬂicting permissions. We can use our syntax to design
such roles as follows, where conPerm(xoj, xak, xom, xan) de-
notes a conﬂict between permissions (xoj, xak) and (xom, xan).
[∀xom∀xanscopeO(xoj) ∧ scopeA(xak) ∧
conPerm(xoj , xak, xom, xan)] → assignRP(xri, xoj , xak).
6. CONSISTENCY AND COMPLETENESS
Two issues we examine with respect to consistency and
completeness are the eﬀect of built in non-determinism on
consistency and completeness, and the nature of inconsis-
tencies/incompleteness and their potential remedies. In our
formulation, consistency and completeness are properties of
states, and policies are state transformations. Thus, target
states determine the consistency and completeness of a pol-
icy. Because of non determinism, one or all target states can
be consistent/complete, making the distinction between pos-
sible and necessary consistency/completeness. In this sec-
tion we state suﬃcient conditions to identify such policies. A
more comprehensive treatment using modal operators along
the line of dynamic logic [11] is forthcoming.
6.1 Consistency
In our formulation, an inconsistency can arise out of two
sources: (1) a role or a subject being granted permissions
and prohibitions for the same operation on the same object
(2) by violating an application speciﬁc constraint. We use
conUsr, conRole and conPerm predicates to specify latter
kind of inconsistencies. We address both issues separately,
although they can be treated uniformly by requiring the sen-
tence ∀xoi∀xaj scopeO(xoi) ∧ scopeA(xaj) →
conPerm(xoi, +xaj, xoi,−xaj ) to be valid in all states. Fur-
thermore, if both kinds of inconsistencies are to be treated
uniformly, then we note that consistency is deﬁnable in our
syntax (exactly as the sentence stated above), and also con-
sistency resolution policies can be written in our syntax.
They are similar in nature to those stated towards the end
of Section 5. To address inconsistencies arising out of as-
signing a permission and a prohibition to the same action of
the same object for the same role or subject, we begin with
some deﬁnitions.
Definition 11
(Consistent State). A state s is said
to be subject/role consistent iﬀ every subject/role in scope
has at most one of positive or negative permissions for every
action and object in scope. We say that a state is consistent
iﬀ it is both subject consistent and role consistent.
ψconS :
ψconR :
∀xsi∀xoj∀xakscopeS(xsi) ∧ scopeO(xoj) ∧
scopeA(xak) → ¬[(xoj , +xak) ∈ subPerm(xsi) ∧
(xoj,−xak) ∈ subPerm(xsi)]
∀xri∀xoj∀xakscopeR(xri) ∧ scopeO(xoj) ∧
scopeA(xak) → ¬[(xoj , +xak) ∈ rolePerm(xri) ∧
(xoj,−xak) ∈ rolePerm(xri)]
Sentences ψconS and ψconR deﬁne subject and role consis-
tency according to Deﬁnition 11. Hence a state s is consis-
tent iﬀ M, s |= ψconS ∧ ψconR. Next, we deﬁne consistent
and ultra-consistent policies in Deﬁnition 12.