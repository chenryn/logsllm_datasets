下面的代码接收通过 WebSocket连接并且不需要一个模式解析编码ProtoBuf消息。（protobuf-
inspector）
import ssl
from http.server import HTTPServer, SimpleHTTPRequestHandler
httpd = HTTPServer(('0.0.0.0', 443), SimpleHTTPRequestHandler)
httpd.socket = ssl.wrap_socket(httpd.socket, server_side=True, 
certfile='cert.pem')
httpd.serve_forever()
127.0.0.1 - - [27/Feb/2020 10:45:12] "POST /register HTTP/1.1" 200 -
127.0.0.1 - - [27/Feb/2020 10:45:14] "POST /check-in HTTP/1.1" 200 -
127.0.0.1 - - [27/Feb/2020 10:45:59] "POST /submit-events HTTP/1.1" 200 -
127.0.0.1 - - [27/Feb/2020 10:46:14] "POST /check-in HTTP/1.1" 200 -
127.0.0.1 - - [27/Feb/2020 10:47:14] "POST /check-in HTTP/1.1" 200 -
127.0.0.1 - - [27/Feb/2020 10:47:29] "POST /submit-events HTTP/1.1" 200 -
127.0.0.1 - - [27/Feb/2020 10:48:14] "POST /check-in HTTP/1.1" 200 -
from asyncio import get_event_loop
from datetime import datetime
from io import BytesIO
from websockets import serve
# Using https://github.com/mildsunrise/protobuf-inspector.
from lib.types import StandardParser
# Load ProtoBuf parser.
p = StandardParser()
p.types['Message'] = {}
async def handler(websocket, path):
    data = await websocket.recv()
    print(f'Received message at {datetime.now().isoformat()}.')
    print(p.safe_call(p.match_handler('message'), BytesIO(data), 'Message'))
server = serve(handler, 'localhost', 8765)
传感器-服务器流程
现在可以接收和解析来此传感器的消息，你将从一个正常的服务器模仿响应以便于你可以接收遥测。
在传感器和服务器之间一个经典的流程可能是这样：
依赖于产品，在传感器注册服务器时，这通常会有一个初始化请求，让服务器知道传感器是在线的。
在服务器响应确认或者任务后，传感器将周期性或持续基础开始发送事件。服务器通常将响应确认（例
如 一个简单的 204，或者一个关联ID。）
代理工具像Fiddler 或 tcpprox能够被用来审查合法的请求和响应以便于模拟服务器能更精确地适应仿真
响应。如果使用代理是不可行的，可以在响应被解密后在传感器设置一个断点。
例子和回顾
这儿有一些虚构的场景来说明实施一个模拟服务器的步骤：
场景1：该产品建立了到本地服务器的连接并且它们的URLs可以通过注册表进行配置。由于URL表示
HTTPS，因此可以实例化一个python服务器来收集请求。模拟服务器的证书也可以在注册表指定来满足
证书校验规定。事件被周期性地以HTTP POST请求 ZIP文件上传，在过滤之后，它们能够被作为
ProtoBuf消息解析。通过204响应码为确认。
get_event_loop().run_until_complete(server)
get_event_loop().run_forever()
Received message at 2020-03-06T19:01:49.817219.
Message:
    1  = 1
    2  = 2
    3  = 3
    4   = bytes (738)
        0000  1F 8B 08 00 1D 75 A0 5F 89 40 89 93 93 5E A2 69  .....u._...T[o.0
        0010  7D 1D 5D 6C 81 B1 37 8A 14 A0 15 38 85 5E EF 59  ..+(.K.K.;}KoZ..
        0020  BB 8F 82 76 68 7F 3E 57 0B 24 F7 B6 A2 10 41 A3  Uk.h...u+.4.lg0.
        ...
场景2：默认，此产品连接到一台云服务器但是诊断工具可以被用来指向它到另一台服务器并且允许使
用自签名证书。粗略分析配置和导入的库表明使用了WebSocket协议。在证书检测禁用情况下，解密的
WebSocket流量能够在Fiddler上被预览，使用了ProtoBuf序列化消息。服务器通过一个任务的可选数
组来响应传感器的初始化请求。发送的事件通过ProtoBuf消息返回的关联性IDs被确认。
场景3: 此产品仅仅能在连接到一台被硬编码在二进制中的云服务器并且没有配置选项。传感器设置断点
表明一个自定义协议正在被使用。证书检验通过破解二进制被破解。服务器通过会话token响应传感器
的初始化请求。发送的事件通过消息返回的关联性IDs被确认。
回顾，你应该问问你自己下面的问题，在实施一台模拟服务器时。
这些能够帮助你考虑下一步行动或者其他调查途径：
能否建设连接到一台可配置的本地服务器或者硬编码服务器？
能否通过改变配置或者诊断工具对传感器进行修改吗？
如果有二进制补丁需求，那种方法最不容易被破解？
如果补丁在内核模式，应该怎么应用（例如 滥用虫洞驱动程序?）
是否正在从服务可执行或驱动程序处建立连接？
可以使用代理(例如 Burp,Fiddler)对连接进行内省吗？
哪一种访问协议被使用了？(HTTPS,WSS,custom w/ TLS)
TLS证书怎样才能已验证，有可能使用自签名证书吗？
这些证书校验如何bypass?
用这个服务器初始化邮服看上去怎么样？
怎样能接收事件确认（例如 200OK 返回相关ID）?
配置弹性栈
现在你有一台模拟服务器，它可以接收反序列化遥测，你可以发送事件到你私有的SIEM。
在这个场景中，我正在使用弹性栈(ELK),因为它是一个免费的流行的选择。警告是合理的，因为在此项
目之前我没有使用过ELK，我仍然是新手。
日志存储
日志存储，ELK中的L，能够被用来摄取日志。在我的设置中，我配置了一台HTTP 监听器用来接受JSON
数据。模拟服务器将从传感器接收事件，反序列化它们，转换成JSON数据然后发送它们到日志存储监
听器。在下面的配置中，增加了一对过滤来映射事件时间戳并且移除外来的HTTP头。
input {
  http {
    host => "0.0.0.0"
    port => 8080
  }
}
filter { 
  mutate {
    remove_field => "headers"
  }
  date {
    match => ["unix_timestamp", "UNIX"]
  }
}
output {
  elasticsearch {
Kibana
随着事件通过日志存储运行，你可以创建一个索引在Kibana然后观察事件滚动。
在相当多的事件被导入后，你可以考虑在设置页面，首页刷新这个栏目列表。
在发现页面内，你可以发起查询例如下面的来查看最近的命令和它们的父进程。你也可以指定进程查询
事件列表然后使用这个来获取EDR关于你植入物的细粒度视图。
每一个植入物行为能够被测试来考虑它们生成了什么事件并且它们任何的组合是否会被导入检测。关于
这个一个重要的警告是你通常不会获取任何自定义服务器端在传感器层检测查询的权限，但是你将能够
看到原始事件流向它们。
你也可以增加一个面板来创建可视化，例如这个展示了一段事件内事件类型的细分并标记了篡改事件。
    hosts => ["localhost:9200"]
    index => "events"
  }
}
这儿有很多机会来挖掘数据然后了解在给定系统上看起来正常的东西。这个将在下一篇文章Blending in 
techniques被进一步讨论。
概要
下面的顺序图总结了在本文中以一个更高水平被讨论的方法。对于一些传感器，它能够合乎时宜地使用
事件轮询机制，从一台数据库文件或者临时文件获取新的事件。提取的事件会被运送到日志存储以便于
数据能够通过Kibana被查询。
对于其他的传感器，写一台模拟服务器能够是更稳固的方法。传感器将被重新配置发送遥测到模拟服务
器，转发，到日志存储。
在一些案例中内核驱动修改的点会合适的重路由遥测到你的模拟服务器。然后下面的图可能更适合。
通读需要很长的时间，恭喜你坚持了下来同时谢谢你花时间来阅读它。在能够转移遥测到私有基础设施
的目标下，我们复习下获取传感器遥测的过程。实现这一目标为开发返回环路奠定了基础。允许我们发
现融合的，滥用盲点和传感器篡改的技术。请继续关注将来重点关注这些主题的帖子。
如果你有任何的反馈，问题或者注意任何错误，请ping我。