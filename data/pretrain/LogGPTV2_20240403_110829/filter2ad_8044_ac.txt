    keyGen.init(128);
引用：  
[Blowfish (cipher)](http://en.wikipedia.org/wiki/Blowfish_\(cipher))  
[CWE-326: Inadequate Encryption
Strength](http://cwe.mitre.org/data/definitions/326.html)
# RSA使用了过短密钥
漏洞特征: RSA_KEY_SIZE  
NIST建议RSA算法应该使用2048bits的密钥或者更长的密钥  
“电子签名验证 | RSA: 1024 ≤ len(n) 
  2. 用户被重定向到了一个虚假的登录页面，这样页面看起来就像真的一样() 
  3. 用户输入了他的凭据 
  4. 恶意网站偷走了用户的凭据，并且跳转回了原来的网站 
这个攻击貌似是合理的，因为大多数用户在被重定向之后不会再次检查url。而且跳转到授权页面也是很普遍的现象。  
漏洞代码：
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        [...]
        resp.sendRedirect(req.getParameter("redirectUrl"));
        [...]
    }
解决方案/对策
  * 不要从用户的输入中接受重定向的目的url
  * 接受一个目的地址的key，这个key可以查询到一个合法的目的地址。 
  * 仅接受相对路径 
  * urls白名单（如果可行的话） 
  * 验证url开始的部分是否在白名单里面
引用：  
[WASC-38: URL Redirector
Abuse](http://projects.webappsec.org/w/page/13246981/URL%20Redirector%20Abuse)  
[OWASP: Top 10 2013-A10: Unvalidated Redirects and
Forwards](https://www.owasp.org/index.php/Top_10_2013-A10-Unvalidated_Redirects_and_Forwards)  
[OWASP: Unvalidated Redirects and Forwards Cheat
Sheet](https://www.owasp.org/index.php/Unvalidated_Redirects_and_Forwards_Cheat_Sheet)  
[CWE-601: URL Redirection to Untrusted Site ('Open
Redirect')](http://cwe.mitre.org/data/definitions/601.html)
# 未验证的重定向(Play Framework)
漏洞特征：PLAY_UNVALIDATED_REDIRECT  
未验证重定向漏洞是因为应用跳转到用户输入的指定目标url，这个输入的参数没有被充分的验证。这个漏洞可能会被用来钓鱼
假设的场景：
  1. 用户被欺骗点了恶意链接：
  2. 用户被重定向到了一个虚假的登录页面，这样页面看起来就像真的一样() 
  3. 用户输入了他的凭据 
  4. 恶意网站偷走了用户的凭据，并且跳转回了原来的网站 
这个攻击貌似是合理的，因为大多数用户在被重定向之后不会再次检查url。而且跳转到授权页面也是很普遍的现象。  
漏洞代码：
    def login(redirectUrl:String) = Action {
        [...]
        Redirect(url)
    }
解决方案/对策
  * 不要从用户的输入中接受重定向的目的url
  * 接受一个目的地址的key，这个key可以查询到一个合法的目的地址。 
  * 仅接受相对路径 
  * urls白名单（如果可行的话） 
  * 验证url开始的部分是否在白名单里面
引用：  
[WASC-38: URL Redirector
Abuse](http://projects.webappsec.org/w/page/13246981/URL%20Redirector%20Abuse)  
[OWASP: Top 10 2013-A10: Unvalidated Redirects and
Forwards](https://www.owasp.org/index.php/Top_10_2013-A10-Unvalidated_Redirects_and_Forwards)  
[OWASP: Unvalidated Redirects and Forwards Cheat
Sheet](https://www.owasp.org/index.php/Unvalidated_Redirects_and_Forwards_Cheat_Sheet)  
[CWE-601: URL Redirection to Untrusted Site ('Open
Redirect')](http://cwe.mitre.org/data/definitions/601.html)
# Spring中未验证的重定向
漏洞特征：SPRING_UNVALIDATED_REDIRECT  
未验证重定向漏洞是因为应用跳转到用户输入的指定目标url，这个输入的参数没有被充分的验证。这个漏洞可能会被用来钓鱼
假设的场景：
  1. 用户被欺骗点了恶意链接：
  2. 用户被重定向到了一个虚假的登录页面，这样页面看起来就像真的一样() 
  3. 用户输入了他的凭据 
  4. 恶意网站偷走了用户的凭据，并且跳转回了原来的网站 
这个攻击貌似是合理的，因为大多数用户在被重定向之后不会再次检查url。而且跳转到授权页面也是很普遍的现象。  
漏洞代码：
    @RequestMapping("/redirect")
    public String redirect(@RequestParam("url") String url) {
        [...]
        return "redirect:" + url;
    }
解决方案/对策
  * 不要从用户的输入中接受重定向的目的url
  * 接受一个目的地址的key，这个key可以查询到一个合法的目的地址。 
  * 仅接受相对路径 
  * urls白名单（如果可行的话） 
  * 验证url开始的部分是否在白名单里面
引用：  
[WASC-38: URL Redirector
Abuse](http://projects.webappsec.org/w/page/13246981/URL%20Redirector%20Abuse)  
[OWASP: Top 10 2013-A10: Unvalidated Redirects and
Forwards](https://www.owasp.org/index.php/Top_10_2013-A10-Unvalidated_Redirects_and_Forwards)  
[OWASP: Unvalidated Redirects and Forwards Cheat
Sheet](https://www.owasp.org/index.php/Unvalidated_Redirects_and_Forwards_Cheat_Sheet)  
[CWE-601: URL Redirection to Untrusted Site ('Open
Redirect')](http://cwe.mitre.org/data/definitions/601.html)
# jsp动态包含
漏洞特征：JSP_INCLUDE  
jsp允许动态包含文件。这可能允许攻击者控制jsp的文件包含。如果出现这样的漏洞的话，攻击者就会包含一个他能控制到的文件。通过直接包含文件，攻击者就能执行任意代码。  
有漏洞的代码：
解决方案：
引用：
[InfosecInstitute: File Inclusion
Attacks](http://resources.infosecinstitute.com/file-inclusion-attacks/)  
[WASC-05: Remote File
Inclusion](http://projects.webappsec.org/w/page/13246955/Remote%20File%20Inclusion)
# Spring 表达式中的动态变量
漏洞特征：JSP_SPRING_EVAL  
Spring使用动态值构建。应该严格检验源数据，以避免未过滤的数据进入到危险函数中。  
有漏洞的代码
解决方案：
引用：  
[CWE-94: Improper Control of Generation of Code ('Code
Injection')](http://cwe.mitre.org/data/definitions/94.html)  
[CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code
('Eval Injection')](http://cwe.mitre.org/data/definitions/95.html)
# xml字符转义被禁用
漏洞特征：JSP_JSTL_OUT  
可能会有潜在的xss漏洞。这可能会在客户端执行未期望的JavaScript。（见引用）  
有漏洞的代码：
解决方案：
引用：  
[WASC-8: Cross Site
Scripting](http://projects.webappsec.org/w/page/13246920/Cross%20Site%20Scripting)  
[OWASP: XSS Prevention Cheat
Sheet](https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet)  
[OWASP: Top 10 2013-A3: Cross-Site Scripting
(XSS)](https://www.owasp.org/index.php/Top_10_2013-A3-Cross-Site_Scripting_%28XSS%29)  
[CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')](http://cwe.mitre.org/data/definitions/79.html)  
[JSTL Javadoc: Out
tag](http://docs.oracle.com/javaee/5/jstl/1.1/docs/tlddocs/c/out.html)
# jsp中潜在的xss
漏洞特征：XSS_JSP_PRINT  
可能会有潜在的xss漏洞。这可能会在客户端执行未期望的JavaScript。（见引用）  
有漏洞的代码：
    [...]
解决方案：
    [...]
抵御xss最好的方式是像上面在输出中编码特殊的字符。有4种环境类型要考虑：HTML, JavaScript, CSS (styles),
和URLs.请遵守OWASP XSS Prevention备忘录中定义的xss保护规则，里面会介绍一些防御的细节。  
引用：  
[WASC-8: Cross Site
Scripting](http://projects.webappsec.org/w/page/13246920/Cross%20Site%20Scripting)  
[OWASP: XSS Prevention Cheat
Sheet](https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet)  
[OWASP: Top 10 2013-A3: Cross-Site Scripting
(XSS)](https://www.owasp.org/index.php/Top_10_2013-A3-Cross-Site_Scripting_%28XSS%29)  
[CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')](http://cwe.mitre.org/data/definitions/79.html)  
[OWASP Java Encoder](https://code.google.com/p/owasp-java-encoder/)
# Servlet中潜在的xss
漏洞特征：XSS_SERVLET  
可能会有潜在的xss漏洞。这可能会在客户端执行未期望的JavaScript。（见引用）  
有漏洞的代码：