more messages and hence more information about them-
selves than with a normal honeyd platform without any
script. Similarity scores are useless to answer that question
since they are not able to give clues on the real behavior of
the emulation: there is no way of knowing whether the de-
viations observed in those tests can be considered relevant
enough to stop the conversation with the client or not.
In order to address this point, a real ScriptGen honeypot
has been deployed on the Internet in March and April 2005.
The following ports were being emulated using honeyd [14]
scripts:
• TCP Port 80 (HTTP), emulated by ScriptGen
Clients seen by ScriptGen honeypot
Clients seen by VMware honeypot
Clients seen by both
Clients seen by both performing non-null activity
333
325
45
30
Table 3. Results of the comparison
VM length
SG length
Sim.Vector
16
18
12
16
4
4
4
4
[ C:1.0 S:1.0 C:1.0 S:0.8 ]
[ C:1.0 S:1.0 C:1.0 S:0.8 ]
[ C:1.0 S:1.0 C:1.0 S:0.8 ]
[ C:1.0 S:1.0 C:1.0 S:0.8 ]
• TCP Port 135 (DCE endpoint resolution), only opened
Table 4. Activity comparison
• UDP Port 137 (NetBios Name Service), emulated by
ScriptGen
• TCP Port 139 (NetBios Session Service), emulated by
ScriptGen
The sample tcpdump ﬁle has been built using samples of
interaction extracted from high interaction honeypots data
provided by the Leurre’com project [4, 5, 6, 7, 8, 9]. That
ﬁle contained requests from 1107 different clients observed
in a 5 months period against a VMware honeypot.
4.1 NetBios scanners
A ﬁrst attempt to evaluate the performance of the Script-
Gen emulation has consisted in trying to run different well
known NetBios scanners1 against our automatically gener-
ated script. All the scanners have correctly identiﬁed the
host using the NetBios Name Service, correctly fetching the
informations from the emulated host exactly like from a real
one. So the ScriptGen honeypot is able to behave correctly
in these simple scenarios, being equivalent to the emulation
given by a high interaction honeypot running VMware.
4.2 Comparison with a high interaction honeypot
To have a better and more complete evaluation of the
ScriptGen-based honeypot, it has been deployed on the In-
ternet and put on the same subnet with the VMware high
interaction honeypot. It has thus been possible to compare
the reactions of the two different honeypot implementations
placed in an homogeneous environment.
In [12], authors conclude that IP addresses can be con-
sidered free of the so called “DHCP artifacts” for periods
1“SoftPerfect Network Scanner” (http://www.softperfect.com); “Ad-
“Angry IP Scanner”
vanced IP Scanner” (http://www.radmin.com);
(http://www.angryziber.com)
shorter than 24 hours. This means that on such periods,
each IP address can be uniquely bound to a single attacking
client, even if it is dynamically assigned (as it often happens
when clients are connecting to the Internet through ISPs).
So analyzing the two months of collected data day by day,
it has been possible to search for clients performing their
activities on both honeypots, ﬁnding IP addresses common
to both environments.
Table 3 shows the results that have been extracted from
the observation of the tcpdump ﬁles for the two environ-
ments during the two months. For the sake of conciseness,
we focus only on the NetBios TCP port 139 for which we
had the most complex ScriptGen state machine. Both envi-
ronments see the same amount of attacks (around 300) but
only 45 attackers have hit both of them.
In table 4 it is possible to see the behavior of a single
sample client attacking both environments. The ﬁrst two
columns show the length of the observed sequences gener-
ated by the client, that is the number of client and server
messages the sequence is composed of. It is possible to see
that the ScriptGen environment is performing in quite a pe-
culiar way, generating conversations always of length 4 in
the dialog with the client. This behavior can be observed
in the conversations with many different clients, since 1992
sequences (67% of the total) generated by the ScriptGen
honeypot always have exactly that length. It may be inter-
esting to compare the messages sent by the ScriptGen hon-
eypot with those sent by the VMware environment to better
understand the reasons for this phenomenon. This is done
in the third column of table 4 using Similarity Vectors. Sim-
ilarity Vectors are arrays of similarity scores for the various
messages in the sequence: in this case each message of the
SG sequence is compared with each message of the VM
one. The table shows that the ﬁrst client request, the corre-
sponding answer and then the second client request in the
two environments are identical. There is instead a discor-
Proceedings of the 21st Annual Computer Security Applications Conference (ACSAC 2005) 
1063-9527/05 $20.00 © 2005 IEEE 
9
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:13:11 UTC from IEEE Xplore.  Restrictions apply. 
dance in the answer that the two environments are giving
to the second client request (80% similarity score): this dis-
cordance may lead the client to refuse the ScriptGen answer
and to prematurely close the TCP session. Another fact that
seems to conﬁrm this hypothesis is that while each client
usually performs each activity only once on the VMware
environment, there are multiple subsequent attempts of run-
ning the activity on the ScriptGen honeypot.
We have analyzed the conversation with a protocol ana-
lyzer [1] and found out that the reason for ScriptGen’s em-
ulation failure has to be found in a preliminary and still in-
complete implementation of the Dependency Handling (see
section 2.4.3 on page 5). SMB Header in fact contains a
ﬁeld called Process ID, which uniquely identiﬁes the con-
sumer process within a virtual connection. The server an-
swer must contain the same Process ID than the request to
be considered valid and to be accepted by the client. Since
the Dependency Handling support is still in a preliminary
stage inside ScriptGen, it was inactive during the emulation
and so the emulator has used in the answer the Process ID
that had been seen in the tcpdump samples, without modify-
ing it in order to satisfy the dependency: as a consequence,
the answer was naturally rejected by the client who subse-
quently then closes the conversation.
We have ﬁxed the problem and we have replayed the
messages observed in the VMware environment against this
new script, and the new results have highlighted the impor-
tance of the dependency handling feature. Several correct
messages have then been exchanged; however, the emulator
does provide erroneous replies a few steps before the end.
This can be due to the fact that the observed client activity
was not present in the initial tcpdump sample ﬁle. In fact,
the emulator is able to handle correctly only behaviors that
have been previously seen in the sample data, and may not
be able to handle new kinds of activities that may be gen-
erated by a new tool or worm that was not yet spread in
the period during which the sample has been built. This is
conﬁrmed by the fact that after a certain point in the conver-
sation the certainty level with which the emulator is inter-
nally choosing the future state drastically drops to less than
50%. Even if this level is not acceptable, ScriptGen emula-
tor chooses to carry on the conversation in any case, since
there may still be a remote possibility of sending a good
answer.
ScriptGen emulators, as already mentioned, may not al-
ways handle correctly newly encountered activities. In the
context of the Leurre’com project [4, 5, 6, 7, 8, 9] we are
more interested in gathering long term statistical data over
attacks, therefore detecting promptly new activities is not
one of our main objectives. Nevertheless low certainty lev-
els may be interpreted as a signal of this situation, and there-
fore they may trigger appropriate reactions. An incremental
version of the Region Analysis algorithm, allowing to reﬁne
an existing state machine with new samples, is still a work
in progress.
4.3 Region Analysis validation
In Section 2.4.2 on page 4 the Region Analysis is posited
as being able to identify the semantically important parts
of the protocol, in order to generate some sort of pattern
matching able to discriminate between incoming client re-
quests and correctly choose the future state. Here it may
be interesting to see the impact of Region Analysis on a
real case example, analyzing the label of one of the tran-
sitions of the NetBios Session Service state machine (TCP
port 139) used in the ScriptGen honeypot. The analyzed
packet is a Negotiate Protocol Request, sent by the client
in the initial opening steps of a conversation on that port.
To understand the meaning of the various ﬁelds, a protocol
analyzer has been used [1]. The ﬁelds that Region Analysis
considers as important for discriminating between the var-
ious incoming packets are shown below, together with the
values considered as discriminating for the transition:
NetBIOS Session Service
• Message type: Session Message
• Flags: 0x00
• (Message length is correctly not considered as discrim-
inating)
SMB Header
• Server component: SMB
• SMB Command: Negotiate Protocol
• NT Status: STATUS_SUCCESS
• Flags: 0x18 (characterize the type of query)
• (Flags2 are considered as mutating, and include re-
quest for Unicode Strings and other stuff)
• Signature: all zeroes
• Reserver: all zeroes
• (Process ID is correctly considered as mutating)
• (UserID is mutating)
• (MultiplexID is mutating)
Negotiate Protocol Request
• (WordCount is mutating)
• (ByteCount is mutating)
• (The list of dialects is considered as mutating)
Proceedings of the 21st Annual Computer Security Applications Conference (ACSAC 2005) 
1063-9527/05 $20.00 © 2005 IEEE 
10
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:13:11 UTC from IEEE Xplore.  Restrictions apply. 
e
r
o
c
S
 1.2
 1.1
 1
 0.9
 0.8
 0.7
 0.6
 0.5
 0.4
 10
 15
 20
 25
’score.dat’
ated by a real server. If the conversation is shorter, the score
will be lower. So a higher similarity score corresponds to
a higher number of steps in the conversation between client
and server.
It is then possible to state that there is a proportion be-
tween the complexity of the state machine and the quality
of the emulation, in a trade-off between simulation quality
and use of resources. The more resources are available for
the script, the better the evaluation of the emulated service.
 30
 35
 40
5 Conclusions
Number of nodes
Figure 7. Similarity score as a function of
complexity
So Region Analysis is correctly identifying the ﬁelds that do
really have a semantic meaning (as, for instance, the name
of the SMB Command) and is able to distinguish them from
those that don’t carry any semantic value (as the Process
ID). The original state machine would not have been able to
correctly handle a packet having a different Process ID from
the one used in the sample, since it did not have any way of
knowing the semantic value of that difference. After Region
Analysis, the emulator is able to know that the Process ID
ﬁeld does not carry any semantic information for the choice
of the future state, and correctly ignores such differences.
This highlights the importance of the macroclusterings
and microclusterings and that a trivial bytewise pattern
matching approach is certainly not an appropriate way to
handle this issue.
4.4 Relationship between complexity and emula(cid:173)
tion quality
It has been shown in the previous Section that the Script-
Gen honeypot has been able to carry on a conversation for a
certain number of steps. The question is if there is any sort
of control over the number of steps, in order to be able to
carry on the conversation with the client as long as needed.
Elaborating the results obtained in 3.2 for a given se-
quence in order to correlate the number of nodes of the state
machine with the obtained similarity score, it is possible to
obtain the curve shown in ﬁgure 7. From this curve it is pos-
sible to obtain a direct relationship between the complexity
of the state machine and the similarity score, that is the aver-
age of the values in the vectors seen in the previous section.
The similarity score is equal to 1.0 if and only if the con-
versation generated by the emulated server is identical in
content and length to the conversation that would be gener-
ScriptGen is a tool able to create honeyd-compatible em-
ulators for any protocol using a given sample of interaction.
No assumptions are made about the nature of the protocol,
so it can be applied to a very wide range of different proto-
cols without any a priori knowledge of their behavior.
When tested with the SMB protocol, ScriptGen has
shown a certain sensitivity to the choice of the simpliﬁca-
tion parameters and to the sample tcpdump ﬁle showing the
theoretical interaction. In any case it has generated emula-
tors that were good enough to carry on a valid conversation
with a client for a certain number of steps. This number de-
pends on the complexity of the built emulator. The greater
that complexity, the better the results in fooling the attack
tools.
Preliminary results with this approach are extremely en-
couraging. They open a new avenue for research and also
provide some practical results that will enable honeyd users
to dramatically improve the emulation capabilities offered
by this architecture. There is certainly room for improve-
ment: dependency handling has to be enhanced and more
validation needs to be carried out. Also, dynamic evolution
of the state machine when new activities are encountered
may represent a new interesting research topic. However, as
it is, the method brings novel and important contributions on
the table, namely i) enrichment of the PI algorithm thanks
to the region analysis algorithm, ii) a novel method to au-
tomatically create honeyd scripts for a very large class of
services and protocols, even if proprietary, iii) a sound val-
idation methodology which provides convincing arguments
in favor of the usefulness of the method.
References
[1] Ethereal,
the world’s most popular protocol analyzer.
http://www.ethereal.com accessed at 03/09/2005.
[2] The
tcpreplay ofﬁcial homepage.
tcpreplay.
sourceforge.net accessed at 03/09/2005.
[3] M. A. Beddoe. Network protocol analysis using bioinfor-
matics algorithms. http://www.insidiae.com/PI
accessed at 03/09/2005, 2005.
Proceedings of the 21st Annual Computer Security Applications Conference (ACSAC 2005) 
1063-9527/05 $20.00 © 2005 IEEE 
11
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:13:11 UTC from IEEE Xplore.  Restrictions apply. 
[4] M. Dacier, F. Pouget, and H. Debar. Attack processes found
In NATO Symposium IST-041/RSY-013,
on the internet.
Toulouse, France, April 2004.
[5] M. Dacier, F. Pouget, and H. Debar. Honeypot-based foren-
sics. In Proceedings of AusCERT Asia Paciﬁc Information
Technology Security Conference 2004, Brisbane, Australia,
May 2004.
[6] M. Dacier, F. Pouget, and H. Debar. Honeypots, a practi-
cal mean to validate malicious fault assumptions.
In Pro-
ceedings of the 10th Paciﬁc Ream Dependable Computing
Conference (PRDC04), Tahiti, February 2004.
[7] M. Dacier, F. Pouget, and H. Debar. Towards a better un-
derstanding of internet threats to enhance survivability. In
Proceedings of the International Infrastructure Survivabil-
ity Workshop 2004 (IISW’04), Lisbonne, Portugal, Decem-
ber 2004.
[8] M. Dacier, F. Pouget, and H. Debar. Honeynets: foundations
for the development of early warning information systems.
In J. Kowalik, J. Gorski, and A. Sachenko, editors, Proceed-
ings of the Cyberspace Security and Defense: Research Is-
sues, 2005.
[9] M. Dacier, F. Pouget, and H. Debar. Leurre.com: On the
advantages of deploying a large scale distributed honeypot
platform.
In Proceedings of the E-Crime and Computer
Conference 2005 (ECCE’05), Monaco, March 2005.
[10] G. H. Hong and S. F. Wu. On interactive internet trafﬁc re-
play. In 8th Symposium on Recent Advanced Intrusion De-
tection (RAID), LNCS, Seattle, September 2005. Springer.
[11] E. Kohler. The Click modular router. PhD thesis, MIT,
November 2000.
[12] D. Moore, C. Shannon, and J. Brown. Code red: a case study
on the spread and victims of an internet worm. In Proceed-
ings of ACM SIGCOMM Internet Measurement Workshop,
November 2002.
[13] Pang, Yegneswaran, Barford, Paxson, and Peterson. Charac-
teristics of background radiation. In Proceedings of the 4th
ACM SIGCOMM conference on the Internet Measurement,
2004.
[14] N. Provos. A virtual honeypot framework. In Proceedings of
the 12th USENIX Security Symposium, pages 1–14, August
2004.
[15] V. Yegneswaran, P. Barford, and D. Plonka. On the design
and use of internet sinks for network abuse monitoring. In
Proceedings of the Network and Distributed Security Sym-
posium (NDSS), February 2004.
Proceedings of the 21st Annual Computer Security Applications Conference (ACSAC 2005) 
1063-9527/05 $20.00 © 2005 IEEE 
12
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 12:13:11 UTC from IEEE Xplore.  Restrictions apply.