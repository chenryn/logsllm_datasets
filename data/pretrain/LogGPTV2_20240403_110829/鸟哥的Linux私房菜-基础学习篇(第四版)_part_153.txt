优化后的文本如下：

---

在处理某些程序时，其运行速度异常缓慢，几乎可以称之为“龟速”。为了解决这一问题，我们最终决定停止使用该程序，并以一个自编的小程序取而代之。这样一来，CPU 的负载显著下降，系统性能得到了明显改善。

工作管理（job control）是 bash 环境下的一种功能，允许用户在同一终端会话中同时执行多项任务。例如，在登录 bash 后，用户可能希望同时进行文件复制、数据搜索、代码编译以及 vim 编辑器中的编程等活动。尽管可以通过打开多个终端窗口来实现多任务处理，但通过 job control，所有这些操作都可以在一个 bash 会话内完成。

重要的是要认识到，利用 job control 执行的任务实际上是当前 bash shell 的子进程，这意味着它们之间存在关联性。因此，无法通过 job control 来控制不同终端环境下的 bash 进程。比如，不能用 tty1 中的 bash 控制 tty2 中的进程。

你可能会疑惑，既然能够通过多个终端界面登录，为何还需要使用 job control 命令？实际上，在某些情况下，系统管理员可能会限制用户的并发登录数量（如通过 /etc/security/limits.conf 配置）。在这种限制条件下，掌握如何高效地运用单个终端接口变得尤为重要。此外，理解数据流重定向对于充分利用这些技巧也是必不可少的，相关内容可参考第十章 BASH Shell。

当只有一个终端可用时，可以直接与用户交互并接收命令输入的环境被称为前台（foreground），而其他非交互式或暂停的任务则被放置于后台（background）。值得注意的是，任何需要与用户互动的应用程序，例如 vim，都不适合在后台运行。此外，后台进程也无法通过 [Ctrl]+C 组合键直接终止。

要有效地使用 bash 的 job control 功能，请注意以下几点：
- 只能管理当前 shell 的子进程；
- 前台是指可以接受用户指令和响应的活跃状态；
- 后台指自动运行且不干扰前台活动的任务；
- 后台进程中不应包含等待终端输入的操作。

现在让我们深入了解如何实际应用这些知识。

首先明确一点：即使是 root 用户也无法跨不同的 bash 会话管理任务。根据任务的状态（暂停或运行），我们可以采取不同的措施来进行管理和调整。接下来将介绍几个常用的命令示例。

**将命令发送到后台执行**

当我们希望立即开始某项任务而不必等待其完成时，可以将其置于后台执行。这可以通过在命令末尾添加 `&` 符号轻松实现。例如，为了创建 `/etc/` 目录的一个压缩备份文件 `/tmp/etc.tar.gz` 并立即返回提示符，您可以执行以下命令：

```bash
[root@study ~]# tar -zcpf /tmp/etc.tar.gz /etc &
```

这样就启动了压缩过程，同时允许您继续在前台做其他事情。

**将当前任务切换至后台暂停**

如果您正在使用某个应用程序（如 vim），并且突然需要执行另一个命令，可以暂时将当前应用挂起至后台。只需按下 `[Ctrl]-z` 即可达到目的。之后，您可以在任何时候恢复它或者让其继续在后台运行。

**管理后台任务**

对于已经在后台运行的任务，我们可以使用 `bg` 和 `fg` 命令分别使其保持后台运行或切换回前台。如果想要彻底结束某个后台任务，则需要用到 `kill` 命令向特定进程发送信号。

```bash
[root@study ~]# kill -signal %jobnumber
```
其中 `-signal` 参数定义了传递给目标进程的具体信号类型，更多详情可通过 `man 7 signal` 查阅。