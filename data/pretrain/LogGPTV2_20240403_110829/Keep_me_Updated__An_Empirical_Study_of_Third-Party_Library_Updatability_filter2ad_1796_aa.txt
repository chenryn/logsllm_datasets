title:Keep me Updated: An Empirical Study of Third-Party Library Updatability
on Android
author:Erik Derr and
Sven Bugiel and
Sascha Fahl and
Yasemin Acar and
Michael Backes
Keep me Updated: An Empirical Study of Third-Party Library
Updatability on Android
Erik Derr, Sven Bugiel
CISPA, Saarland University
Saarland Informatics Campus
Sascha Fahl, Yasemin Acar
Leibniz University Hannover
Michael Backes
CISPA, Saarland University
Saarland Informatics Campus
ABSTRACT
Third-party libraries in Android apps have repeatedly been shown
to be hazards to the users’ privacy and an amplification of their
host apps’ attack surface. A particularly aggravating factor to this
situation is that the libraries’ version included in apps are very
often outdated.
This paper makes the first contribution towards solving the
problem of library outdatedness on Android. First, we conduct a
survey with 203 app developers from Google Play to retrieve first-
hand information about their usage of libraries and requirements
for more effective library updates. With a subsequent study of li-
brary providers’ semantic versioning practices, we uncover that
those providers are likely a contributing factor to the app develop-
ers’ abstinence from library updates in order to avoid ostensible
re-integration efforts and version incompatibilities. Further, we
conduct a large-scale library updatability analysis of 1,264,118 apps
to show that, based on the library API usage, 85.6% of the libraries
could be upgraded by at least one version without modifying the
app code, 48.2% even to the latest version. Particularly alarming are
our findings that 97.8% out of 16,837 actively used library versions
with a known security vulnerability could be easily fixed through a
drop-in replacement of the vulnerable library with the fixed version.
Based on these results, we conclude with a thorough discussion
of solutions and actionable items for different actors in the app
ecosystem to effectively remedy this situation.
1 INTRODUCTION
Third-party libraries are an indispensable aspect of modern soft-
ware development. They ease the developer’s job, for instance, by
providing commonly useful functionality, sharing programming
know-how among developers, enabling monetization of software,
or integrating social media such as Facebook or Twitter. In contrast
to the benefits that developers reap from third-party code, end-
users of software are reportedly exposed to an increasing risk to
their privacy and security by those external software components.
Recent reports [17, 38] warn of the hidden costs of libraries in form
of buggy code that increases the app’s attack surface and introduces
security vulnerabilities. Sonatype [38] reports that older software
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than the
author(s) must be honored. Abstracting with credit is permitted. To copy otherwise, or
republish, to post on servers or to redistribute to lists, requires prior specific permission
and/or a fee. Request permissions from permissions@acm.org.
CCS ’17, October 30-November 3, 2017, Dallas, TX, USA
© 2017 Copyright held by the owner/author(s). Publication rights licensed to Associa-
tion for Computing Machinery.
ACM ISBN 978-1-4503-4946-8/17/10...$15.00
https://doi.org/10.1145/3133956.3134059
components have a three times higher rate of vulnerabilities and
that almost 2 bn software component downloads per year include
at least one security vulnerability. These numbers are backed with
findings from different software ecosystems, e.g., for Windows ap-
plications [31] and Javascript libraries [23]. Moreover, their results
show that, although library updates with security fixes exist, they
are not adopted by developers.
Similarly, recent works [4, 9] have reported such alarming find-
ings for the Android ecosystem. About 70% of all third-party li-
braries in apps are (severely) outdated and a slow adoption rate
of updates of about one year aggravates the library outdatedness
problem. As a consequence, fast response times by library devel-
opers remain noneffective and even known security vulnerabili-
ties [3, 7, 33–35] remain a persistent threat in the app ecosystem,
when app developers do not integrate the existing fixes into their
apps. Google recognized their central role as market operator early
for amending this problem and introduced their application se-
curity improvement program (ASI) [12] in 2015. In this ongoing
effort, Google notifies developers when security problems were
detected in their apps and/or included third-party components and
enforces a remediation period to fix the detected vulnerabilities.
According to their statistics [14], this approach already proved to be
successful in improving the overall app market security. However
the main drawback is that this approach only fights the symptoms
of the underlying problem of developers not keeping dependencies
up-to-date.
To improve on this situation more sustainably, for instance by
realizing effective solutions that are practical and accepted by all
involved parties, it is important to first understand the app devel-
opers’ motivation for not updating third-party dependencies and
to investigate the role of other actors—like the library developers—
in the current situation. This paper makes the first contribution
towards such a solution by identifying the root causes why app
developers do not update third-party libraries on Android. We start
with conducting a survey with 203 app developers from Google
Play to collect first-hand information about library usage in apps.
Among others, this survey covers questions regarding library se-
lection criteria, developer tools, reasons to (not) update, as well
as feedback and comments on what app developers think needs
to be changed to enable more effective library upgrades. These
insights motivate a follow-up library release analysis that uncov-
ers that library developers are very likely a contributing factor to
the poor adaptation rate through an inconsistent and imprecise
library version specification, i.e., the actual changes in code and
API do not match the expected changes conveyed by the version
numbers (semantic versioning). As a result, app developers cannot
properly assess the expected effort for upgrading the library and
Session J3:  Problematic PatchesCCS’17, October 30-November 3, 2017, Dallas, TX, USA2187ultimately abstain from an update to prevent ostensible effort and
incompatibilities.
To investigate the actual effort of updating libraries, we conduct
a large-scale library updatability analysis of 1,264,118 apps from
Google Play. We analyzed the apps’ bytecode to check whether
included libraries are actually called by the app. Combining this
data with the results of an analysis of each library’s API robustness
across its different versions, we determine that 85.6% of all libraries
can be updated by at least one version, in 48.2% of all cases even to
the most current library version, simply by replacing the library
and without the need to change the host app’s code. Contributing
factors for this high updatability rate are a generally low library
API usage, i.e., on average 18 library API calls, and the fact that
the most frequently used APIs remain stable for the majority of
libraries. Focusing on security incidents, we find 16,837 actively
used libraries in apps that contain one publicly known security
vulnerability. Based on our analysis, 97.8% of these libraries could
be patched by simply exchanging the vulnerable library with the
fixed version, again without the need to change the app’s code.
Finally, the results of the developer survey and our follow-up
analyses helped us to identify problem areas and weak links in the
ecosystem. In Section 5 we summarize our findings and propose
actionable items for different entities including library developers,
the market place, development tools, and the Android system to
remedy the situation. Based on our findings and the responses from
our survey, we believe that these solutions are both effective in
amending the library outdatedness problem and accepted by the
majority of developers. In summary, this paper makes the following
contributions:
(1) We conduct a survey with 203 app developers from Google Play
to collect first-hand information on library usage and to identify
root causes of developers not updating their dependencies.
(2) We analyze library releases to uncover that library developers
are likely a contributing factor to a poor library adaptation. In 58%
of all library updates, the expected changes derived from semantic
versioning do not match the actual library code changes.
(3) We conduct a large-scale analysis of 1,264,118 apps to identify
libraries and their API usage. In 85.6% of cases, the detected library
can be updated by at least one version, in 48.2% of cases even to
the most current version. In addition, we find 16,837 apps that
include a library with a known security vulnerability, out of which
97.8% could be patched without app code adaption.
(4) Finally, we thoroughly discuss short-/long-term actionable items
for different entities of the app ecosystem to remedy the problem
of outdated libraries.
The remainder of this paper is structured as follows: In Section 2,
we explain how we conducted our developer survey and summarize
first results. We present the results of our library release analysis
in Section 3 and the results of our library updatability analysis in
Section 4. We thoroughly discuss our survey and analysis results
and propose actionable items in Section 5. We compare with related
work in Section 6 and conclude the paper in Section 7.
Table 1: Demographics of developer survey participants.
Age (x= 32.90± 1.60 years)
Female
Male
No answer
Gender
10 (04.93%)
186 (91.63%)
7 (03.45%)
Highest educational degree
117 (57.64%)
Graduate
41 (20.20%)
College
30 (14.78%)
High school
No degree
12 (05.91%)
3 (01.48%)
No answer
15–19
19–29
29–39
39–49
49–59
59–69
No answer
6 (02.96%)
63 (31.03%)
64 (31.53%)
31 (15.27%)
15 (07.39%)
4 (01.97%)
20 (09.85%)
2 APP DEVELOPER SURVEY
We conducted an online survey with Android application develop-
ers who already published at least one application on Google Play.
We investigated the developers’ main motives and knowledge when
it comes to managing third-party libraries for their apps. Mainly,
we were interested in the following three questions:
Q1: What is the common workflow to search for and to integrate
third-party libraries into applications?
Q2: How frequently do developers update their apps/libs and what
is their main motivation for updates?
Q3: What are possible reasons to not update dependencies and
what solutions could app developers think of?
2.1 Ethical Concerns
The questionnaire (see Appendix A) was approved by the ethical
review board of our university. We also took the strict German data
and privacy protection laws into account for collecting, processing,
and storing participant information. We collected email addresses
from Android application developers who had previously published
at least one application on Google Play and kindly asked them
to participate in our online questionnaire, whether they like to
be blacklisted for future user studies, and whether they want to
learn more about our scientific work. Overall, we sent out 60,000
invite emails. Before filling out the questionnaire, developers had
to consent to the use and publication of their answers.
2.2 Participants
In response to the invitation emails, 203 app developers finished the
questionaire within five days (participation rate of 0.34%). Of all par-
ticipants, 91.6% reported being male, 4.9% female, and the remaining
3.4% declined to answer. Participants’ mean age was 32.9 years (with
a margin of error of 1.6 years with α = .05). The general coding
experience was relatively high with a mean of 12.11± 1.35 years.
The Android experience was reported with 4.06± 0.33 years on av-
to have worked on 13.188± 4.42 apps. A detailed overview of the
erage. Of all participants, 34% affirmed that developing apps is their
primary job. Asked about the context of app development, 35.5%
reported to develop apps in a company, 38.4% are self-employed,
and 61.6% develop apps (also) as a hobby. The participants reported
participants’ demographics and professional background can be
found in Table 1 and Table 2.
Session J3:  Problematic PatchesCCS’17, October 30-November 3, 2017, Dallas, TX, USA2188Table 2: Professional background of participants in our on-
line app developer survey.
1–5 years
5–10 years
< 1 year
10+ years
< 1 year
10+ years
1–2 years
2–3 years
4–5 years
5–10 years
Years of general coding experience
4 (01.97%)
45 (22.17%)
51 (25.12%)
103 (50.74%)
x= 12.11± 1.35 years
Years of Android experience
x= 4.06± 0.33 years
How learned Android programming†
Yes
No
Developing apps primary job
69 (33.99%)