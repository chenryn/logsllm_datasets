49
9.5
6.2.2 Attestation Under Analog Cuckoo Attacks. To mimic the
attack on the basic protocol, we used a Sony Cybershot DSC-RX100
camera to simulate both Dev and the accomplice display. The Sony
camera’s lens faces Verifier’s display, while the camera attached
to the Raspberry board (acting as M) is faces the Sony camera’s
LCD screen. We turn the Sony camera into the video mode, such
that it simultaneously plays the role of Dev and the accomplice
screen. Compared with the attack setting in Section 3, this exper-
iment setting involves no network transmission and no software
execution.
Results are shown in Table 7. All attacks are detected by Verifier
since incurred ATLs are above ∆max . Under our analytic model,
the smallest ATL the adversary can achieve is 98 msec. In fact,
attack ATL follows the same distribution as the ATL of the iterative
protocol with n = 1, since both scenarios have two transmissions
over the D2C channel. Note that the adversary cannot predict (or
manipulate) the D2C interval.
ATL
max. ATL
min. ATL
Basic
129.9
164.0
110.0
Iterative (n = 1)
248.3
275.1
220.3
Table 7: ATL of basic and iterative protocols, manipulated by the ad-
versary. Theoretical lowest values are: ¯∆min = 98 msec and ¯∆I
=
196 msec.
min
To simulate the attack on the iterative protocol, we introduce
another digital camera (Olympus OM-D EM-10). The Olympus cam-
era’s lens faces the Raspberry board’s display while its LCD screen
faces Verifier’s camera. Both digital cameras then concurrently re-
lay screen images from Verifier to M and vice-versa. As shown in
Table 7, all ATLs are above ∆I
max . In other words, no false negatives
are observed.
Basic v.s. Iterative Table 7 also shows that the iterative protocol
is stronger than the basic protocol. We compare the gap between
observed smallest ATL and its largest legal value. It is 28 msec
for the basic protocol and 56.3 msec for the iterative one. We also
compare the observed smallest ATL against its lower bound. It is
only 2 msec for the basic protocol, while it rises to 24 msec for
the iterative one. This is because the probability of reaching the
lowest value in the iterative protocol (n = 1) is the square of the
probability in the basic protocol.
7 RELATED WORK
The topic of this paper is related to several research areas. This
section overviews related work in each.
DRTM. The first effort to take advantage of hardware DRTM
is Flicker [20] which launches a tiny secure execution environ-
ment based on AMD SVM technology [2]. Subsequent results, no-
tably TrustVisor [19] and XMHF [32], launch a bare-metal micro-
hypervisor by using Intel TXT [12] which is also used by Intel’s
own trusted boot-loader. Recent advent of Intel SGX [11] represents
a stronger form of DRTM. It was shown to be a powerful tool in
some recent literature [6, 26]. ARM TrustZone [3] could also be
considered as a special type of DRTM, although its TCB is bigger
than those of its counterparts on x86 platforms. Code protected
by TrustZone can dynamically measure and launch the hypervisor
[10]. Azab, et. al. propose to use TrustZone to provide kernel’s run-
time security [4]. Although the aforementioned schemes are secure
in their respective adversary models, none of them considers the
role of the human user in trust establishment.
Attestation. Research on remote attestation starts with TPM-
based[31] static attestation [25] which only allows a trusted remote
verifier to check static code integrity of the untrusted remote prover.
Many subsequent research efforts have extended remote attestation
from code integrity to encompass more expressive and dynamic
properties [1, 7, 9, 14].
Some static attestation methods are based purely on software,
under some assumptions about underlying hardware performance.
For example, SWATT [28] and VIPER [18] do not require a hard-
ware root of trust. Instead, by relying on carefully crafted memory
traversal algorithms that compute measurements, these schemes
can detect malware presence by precise timings (under the assump-
tion that malware attempts to hide its presence and is thus forced
to copy itself in chunks, which takes extra time). Similar to our
schemes, a malware-infested device takes longer time to attest than
an intact one. However, our schemes are more reliable and effective,
since they are based on analog operations with more significant
delays.
Distance Bounding. Since our work involve measuring commu-
nication delays, it is also somewhat related to distance-bounding
protocols [8, 24]. In principle, distance bounding protocols might
be applicable to the presence attestation problem, since the verifier
can use them to determine the upper bound on the distance to the
prover. Nonetheless, such protocols are extremely sensitive to time
and require high-precision clocks. Also, they cannot tolerate the
variance caused by software execution.
Virtualization-based Security. Many security architectures have
been proposed based on a bare-metal micro-hypervisor, including:
SecVisor[27], TrustVisor [19], InkTag[15], and MiniBox[17] on x86
platforms, as well as: XNpro [22], OSP [10], and H-Binder [29] on
ARM platforms. Compared with DRTM, the hypervisor is more
versatile and adaptive. As shown by XMHF [32], the DRTM mea-
sures and launches a micro-hypervisor, and the latter (acting as a
trust anchor) extends the security perimeter to protect higher-level
software. This paradigm combines the advantages of both DRTM
and the hypervisor.
User Involvement. Both Lange, et. al. [16] and Danisevskis, et. al.
[13] describe a means for a human user to establish trusts in her
device via a secure user interface. The main idea is to isolate a small
bar at the top of the device’s screen that shows whether the critical
virtual machine is running. In these methods, the hypervisor is
launched before kernel initialization, and it is trusted to be always
present. In contrast, our focus is on presence attestation – a more
difficult problem, since the hypervisor is launched after (potentially
corrupted) kernel execution.
TrustICE [30] is a TrustZone-based isolation method which in-
volves an LED light solely controlled by software in the TrusZone’s
“Secure World”. As acknowledged in the beginning of this paper, this
currently represents the strongest hardware-based approach. Un-
fortunately, it lacks compatibility and requires hardware vendors’
cooperation. Another less related result is “Seeing-is-Believing”
[21], wherein the human-aided camera-based channel is used to
obtain a public-key credential from a smartphone and bootstrap a
secure channel.
8 CONCLUSIONS
This paper investigated how a human user can ascertain DRTM
presence on her own computing device. The threat of cuckoo at-
tacks makes this a challenging problem due to the gap between the
hardware and the human user. We tackled this challenge with a
two-step approach: (1) assisted by a trusted verifier device, the user
first checks for existence of a DRTM in the interaction, and then
(2) uses the residence-checking protocol to decide whether DRTM
indeed resides on her device. We proposed three flavors of presence
attestation: sight-, location- and scene-based. The sight-based vari-
ant offers the strongest security, since it can detect analog cuckoo
attacks, while the other two offer better usability, commensurate
with slightly weaker security.
Future work is planned in two directions. First, we intend to
better understand proposed schemes via usability studies. and thus
assess user burden, as well as reliability and error-prone-ness. Sec-
ond, we plan to explore new presence attestation techniques under
weaker security assumptions and resistant to compromised verifier
devices.
ACKNOWLEDGEMENTS
Authors are grateful to the ACM CCS’17 anonymous reviewers
for their constructive suggestions. This research was supported,
in part, by the Singapore National Research Foundation under the
NCR Award: NRF2014NCR-NCR001-012. Gene Tsudik’s research
was supported by funding from: (1) the Department of Homeland
Security, under subcontract from the HRL Laboratories, (2) the
Army Research Office (ARO) under contract: W911NF-16-1-0536,
and (3) the Fulbright Foundation. Zhoujun Li’s work was funded
by National High Technology Research and Development Program
of China (No.2015AA016004), National Natural Science Foundation
of China (61672081, 61602237, 61370126,U1636211,U1636208).
REFERENCES
[1] T. Abera, N. Asokan, L. Davi, J.-E. Ekberg, T. Nyman, A. Paverd, A.-R. Sadegi, and
G. Tsudik. C-FLAT: Control-flow ATtestation for embedded systems software.
In Proceedings of ACM CCS, 2016.
[2] AMD. Secure virtual machine architecture reference manual. Technical report,
Advanced Micro Devices, 2005.
[3] ARM. ARM security technology - building a secure system using trust-
zone technology. http://infocenter.arm.com/help/topic/com.arm.doc.prd29-genc-
009492c/PRD29-GENC-009492C_trustzone_security_whitepaper.pdf.
[4] A. M. Azab, P. Ning, J. Shah, Q. Chen, R. Bhutkar, G. Ganesh, J. Ma, and W. Shen.
Hypervision across worlds: Real-time kernel protection from the arm trustzone
secure world. In Proceedings of the 21st ACM Conference on Computer and Com-
munications Security (CCS), 2014.
[5] A. M. Azab, K. Swidowski, R. Bhutkar, J. Ma, W. Shen, R. Wang, and P. Ning.
SKEE: A lightweight secure kernel-level execution environment for ARM. In
Proceedings of NDSS, 2016.
[6] M. Barbosa, B. Portela, G. Scerri, and B. Warinschi. Foundations of hardware-
based attested computation and application to sgx. In Proceedings of IEEE Euro-
pean Symposium on Security and Privacy (EuroS&P), 2016.
[7] E. F. Brickell, J. Camenisch, and L. Chen. Direct anonymous attestation.
In
V. Atluri, B. Pfitzmann, and P. D. McDaniel, editors, ACM Conference on Computer
and Communications Security, pages 132–145. ACM, 2004.
[8] S. Capkun and J.-P. Hubaux. Secure positioning in wireless networks.
IEEE
Journal on Selected Areas in Communications: Special Issue on Security in Wireless
Ad Hoc Networks, February.
[9] L. Chen, R. Landfermann, H. L&#246;hr, M. Rohe, A.-R. Sadeghi, and
C. St&#252;ble. A protocol for property-based attestation.
In STC ’06: Pro-
ceedings of the first ACM workshop on Scalable trusted computing, pages 7–16,
New York, NY, USA, 2006. ACM Press.
[10] Y. Cho, J. Shin, D. Kwon, M. J. Ham, Y. Kim, and Y. Paek. Hardware-assisted
on-demand hypervisor activation for efficient security critical code execution on
mobile devices. In USENIX ATC, 2016.
[11] I. Corporation.
Innovative instructions and software model for isolated exe-
cution. http://privatecore.com/wp-content/uploads/2013/06/HASP-instruction-
presentation-release.pdf.
[12] I. Corporation. Intel Trusted Execution Technology (Intel TXT) software devel-
opment guide, Dec 2009.
[13] J. Danisevskis, M. Peter, J. Nordholz, M. Petschick, and J. Vetter. Graphical user
interface for virtualized mobile handsets. In MOST, 2015.
[14] K. Eldefrawy, A. Francillon, D. Perito, and G. Tsudik. SMART: Secure and Minimal
Architecture for (Establishing a Dynamic) Root of Trust. In Proceedings of the
19th Annual Network and Distributed System Security Symposium, February 5-8,
San Diego, USA, San Diego, UNITED STATES, 02 2012.
[15] O. S. Hofmann, S. Kim, A. M. Dunn, M. Z. Lee, and E. Witchel. Inktag: secure
applications on an untrusted operating system. In Proceedings of the 18th In-
ternational Conference on Architectural Support for Programming Languages and
Operating Systems (ASPLOS), 2013.
[16] M. Lange and S. Liebergeld. Crossover: secure and usable user interface for
mobile devices with multiple isolated OS personalities.
In Annual Computer
Security Applications Conference, ACSAC ’13, New Orleans, LA, USA, December
9-13, 2013, pages 249–257, 2013.
[17] Y. Li, J. McCune, J. Newsome, A. Perrig, B. Baker, and W. Drewry. Minibox: A two-
way sandbox for x86 native code. In 2014 USENIX Annual Technical Conference,
2014.
[18] Y. Li, J. M. McCune, and A. Perrig. VIPER: verifying the integrity of periph-
eral’s firmware. In Proceedings of the 18th ACM Conference on Computer and
Communications Security (CCS), 2011.
[19] J. M. McCune, Y. Li, N. Qu, Z. Zhou, A. Datta, V. Gligor, and A. Perrig. Trustvisor:
Efficient TCB reduction and attestation. In Proceedings of the 2010 IEEE Symposium
on Security and Privacy (S&P), 2010.
[20] J. M. McCune, B. Parno, A. Perrig, M. K. Reiter, and H. Isozaki. Flicker: An execu-
tion infrastructure for TCB minimization. In Proceedings of the ACM European
Conference in Computer Systems (EuroSys), Apr. 2008.
[21] J. M. McCune, A. Perrig, and M. K. Reiter. Seeing-is-believing: Using camera
In Proceedings of the 2005 IEEE
phones for human-verifiable authentication.
Symposium on Security and Privacy (S&P’05, 2005.
[22] J. Nordholz, J. Vetter, M. Peter, M. Junker-Petschick, and J. Danisevskis. Xnpro:
Low-impact hypervisor-based execution prevention on arm. In Proceedings of
the 5th International Workshop on Trustworthy Embedded Devices, TrustED ’15,
pages 55–64, New York, NY, USA, 2015. ACM.
[23] B. Parno, J. M. McCune, and A. Perrig. Bootstrapping Trust in Modern Computers.
Springer, 2011.
[24] K. B. Rasmussen and S. Capkun. Realization of rf distance bounding. In Proceed-
ings of the 19th USENIX Security Symposium, 2010.
[25] R. Sailer, X. Zhang, T. Jaeger, and L. van Doorn. Design and implementation
of a TCG-based integrity measurement architecture. In Proceedings of the 13th
conference on USENIX Security Symposium, pages 16–16, 2004.
[26] F. Schuster, M. Costa, C. Fournet, C. Gkantsidis, M. Peinado, G. Mainar-Ruiz, and
M. Russinovich. Trustworthy data analytics in the cloud using sgx. In Proceedings
of the 35th IEEE Symposium on Security and Privacy (S&P), 2015.
[27] A. Seshadri, M. Luk, N. Qu, and A. Perrig. Secvisor: a tiny hypervisor to provide
lifetime kernel code integrity for commodity OSes. In Proceedings of the 21st
ACM Symposium on Operating Systems Principles (SOSP), 2007.
[28] A. Seshadri, A. Perrig, L. van Doorn, and P. K. Khosla. SWATT: Software-based
attestation for embedded devices. In IEEE Symposium on Security and Privacy,
pages 272–, 2004.
[29] D. Shen, Z. Zhang, X. Ding, Z. Li, and R. Deng. H-binder: A hardened binder
framework on android systems. In Proceedings of SecureComm, 2016.
[30] H. Sun, K. Sun, Y. Wang, J. Jing, and H. Wang. Trustice: Hardware-assisted
isolated computing environments on mobile devices. In Ieee/ifip International
Conference on Dependable Systems and Networks, pages 367–378, 2015.
[31] Trusted Computing Group. TPM main specification. Main Specification Version
1.2 rev. 85, Feb. 2005.
[32] A. Vasudevan, S. Chaki, L. Jia, J. McCune, J. Newsome, and A. Datta. Design,
implementation and verification of an extensible and modular hypervisor frame-
work. In Proceedings of the 34th IEEE Symposium on Security and Privacy (S&P),
2014.
[33] Z. Zhou, V. D. Gligor, J. Newsome, and J. M. McCune. Building Verifiable Trusted
Path on Commodity x86 Computers. In Proceedings of the 33rd IEEE Symposium
on Security and Privacy, S&P, May 2012.