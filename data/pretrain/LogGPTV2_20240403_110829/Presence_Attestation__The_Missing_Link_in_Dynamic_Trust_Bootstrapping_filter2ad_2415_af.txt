### 6.2.2 Attestation Under Analog Cuckoo Attacks

To simulate the attack on the basic protocol, we used a Sony Cybershot DSC-RX100 camera to mimic both the device (Dev) and the accomplice display. The Sony camera's lens was directed towards the Verifier's display, while the camera attached to the Raspberry Pi (acting as M) faced the Sony camera’s LCD screen. We set the Sony camera to video mode, allowing it to simultaneously play the roles of Dev and the accomplice screen. Unlike the attack setting in Section 3, this experimental setup involved no network transmission or software execution.

**Results:**

The results are summarized in Table 7. All attacks were detected by the Verifier because the incurred ATLs exceeded \(\Delta_{\text{max}}\). According to our analytic model, the smallest ATL an adversary can achieve is 98 milliseconds. In fact, the attack ATL follows the same distribution as the ATL of the iterative protocol with \(n = 1\), as both scenarios involve two transmissions over the D2C channel. It is important to note that the adversary cannot predict or manipulate the D2C interval.

| Protocol | Average ATL (ms) | Max. ATL (ms) | Min. ATL (ms) |
|----------|------------------|---------------|---------------|
| Basic    | 129.9            | 164.0         | 110.0         |
| Iterative (n = 1) | 248.3            | 275.1         | 220.3         |

**Table 7:** ATLs for the basic and iterative protocols under adversarial manipulation. Theoretical lowest values are: \(\bar{\Delta}_{\text{min}} = 98\) ms and \(\bar{\Delta}_I = 196\) ms.

To simulate the attack on the iterative protocol, we introduced another digital camera (Olympus OM-D EM-10). The Olympus camera's lens faced the Raspberry Pi's display, while its LCD screen faced the Verifier's camera. Both digital cameras then concurrently relayed screen images between the Verifier and M. As shown in Table 7, all ATLs exceeded \(\Delta_{I,\text{max}}\), indicating no false negatives were observed.

**Comparison:**

Table 7 also highlights that the iterative protocol is more robust than the basic protocol. We compared the gap between the observed smallest ATL and its largest legal value. For the basic protocol, this gap is 28 ms, while for the iterative protocol, it is 56.3 ms. Additionally, the observed smallest ATL was only 2 ms above the lower bound for the basic protocol, but 24 ms for the iterative protocol. This difference is due to the probability of reaching the lowest value in the iterative protocol (with \(n = 1\)) being the square of the probability in the basic protocol.

### 7. Related Work

This paper intersects with several research areas, which are discussed below.

**DRTM:**

The first effort to leverage hardware DRTM was Flicker [20], which launched a secure execution environment using AMD SVM technology [2]. Subsequent works, such as TrustVisor [19] and XMHF [32], utilized Intel TXT [12] to launch a bare-metal micro-hypervisor. Intel SGX [11] represents a stronger form of DRTM and has been shown to be a powerful tool in recent literature [6, 26]. ARM TrustZone [3] can also be considered a form of DRTM, although its TCB is larger than those on x86 platforms. Code protected by TrustZone can dynamically measure and launch the hypervisor [10]. Azab et al. proposed using TrustZone to provide kernel runtime security [4]. While these schemes are secure within their respective adversary models, none of them consider the role of the human user in trust establishment.

**Attestation:**

Research on remote attestation began with TPM-based static attestation [31], which allows a trusted remote verifier to check the static code integrity of an untrusted remote prover [25]. Subsequent efforts have extended remote attestation to include more dynamic properties [1, 7, 9, 14].

Some static attestation methods, such as SWATT [28] and VIPER [18], do not require a hardware root of trust. Instead, they rely on carefully crafted memory traversal algorithms to detect malware presence through precise timings. Similar to our schemes, a malware-infested device takes longer to attest. However, our schemes are more reliable and effective because they are based on analog operations with more significant delays.

**Distance Bounding:**

Our work, which involves measuring communication delays, is related to distance-bounding protocols [8, 24]. These protocols might be applicable to the presence attestation problem, as the verifier can use them to determine the upper bound on the distance to the prover. However, such protocols are extremely sensitive to time and require high-precision clocks. They also cannot tolerate the variance caused by software execution.

**Virtualization-based Security:**

Many security architectures have been proposed based on a bare-metal micro-hypervisor, including SecVisor [27], TrustVisor [19], InkTag [15], and MiniBox [17] on x86 platforms, and XNpro [22], OSP [10], and H-Binder [29] on ARM platforms. Compared to DRTM, the hypervisor is more versatile and adaptive. As shown by XMHF [32], DRTM measures and launches a micro-hypervisor, which extends the security perimeter to protect higher-level software. This paradigm combines the advantages of both DRTM and the hypervisor.

**User Involvement:**

Lange et al. [16] and Danisevskis et al. [13] describe methods for a human user to establish trust in her device via a secure user interface. The main idea is to isolate a small bar at the top of the device’s screen that shows whether the critical virtual machine is running. In these methods, the hypervisor is launched before kernel initialization and is trusted to be always present. In contrast, our focus is on presence attestation, a more challenging problem since the hypervisor is launched after (potentially corrupted) kernel execution.

TrustICE [30] is a TrustZone-based isolation method that involves an LED light solely controlled by software in the TrustZone’s "Secure World." This currently represents the strongest hardware-based approach, but it lacks compatibility and requires hardware vendor cooperation. Another related result is "Seeing-is-Believing" [21], where a human-aided camera-based channel is used to obtain a public-key credential from a smartphone and bootstrap a secure channel.

### 8. Conclusions

This paper investigates how a human user can ascertain DRTM presence on her computing device. The threat of cuckoo attacks makes this a challenging problem due to the gap between the hardware and the human user. We addressed this challenge with a two-step approach: (1) assisted by a trusted verifier device, the user first checks for the existence of a DRTM in the interaction, and then (2) uses the residence-checking protocol to determine whether the DRTM resides on her device. We proposed three flavors of presence attestation: sight-, location-, and scene-based. The sight-based variant offers the strongest security, as it can detect analog cuckoo attacks, while the other two offer better usability, albeit with slightly weaker security.

**Future Work:**

We plan to further understand the proposed schemes through usability studies, assessing user burden, reliability, and error-proneness. Additionally, we aim to explore new presence attestation techniques under weaker security assumptions and resistance to compromised verifier devices.

### Acknowledgements

The authors are grateful to the anonymous reviewers of ACM CCS'17 for their constructive suggestions. This research was supported, in part, by the Singapore National Research Foundation under the NCR Award: NRF2014NCR-NCR001-012. Gene Tsudik’s research was supported by funding from: (1) the Department of Homeland Security, under subcontract from the HRL Laboratories, (2) the Army Research Office (ARO) under contract: W911NF-16-1-0536, and (3) the Fulbright Foundation. Zhoujun Li’s work was funded by the National High Technology Research and Development Program of China (No.2015AA016004), the National Natural Science Foundation of China (61672081, 61602237, 61370126, U1636211, U1636208).

### References

[References are listed as provided in the original text, with no changes made.]