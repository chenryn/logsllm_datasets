title:Adding query privacy to robust DHTs
author:Michael Backes and
Ian Goldberg and
Aniket Kate and
Tomas Toft
Adding Query Privacy to Robust DHTs
Michael Backes
Saarland University and MPI-SWS, Germany
PI:EMAIL
Aniket Kate
MPI-SWS, Germany
PI:EMAIL
Ian Goldberg
University of Waterloo, Canada
PI:EMAIL
Tomas Toft
Aarhus University, Denmark
PI:EMAIL
ABSTRACT
Interest in anonymous communication over distributed hash
tables (DHTs) has increased in recent years. However, al-
most all known solutions solely aim at achieving sender or
requestor anonymity in DHT queries. In many application
scenarios, it is crucial that the queried key remains secret
from intermediate peers that (help to) route the queries to-
wards their destinations. In this paper, we satisfy this re-
quirement by presenting an approach for providing privacy
for the keys in DHT queries.
We use the concept of oblivious transfer (OT) in communi-
cation over DHTs to preserve query privacy without compro-
mising spam resistance. Although our OT-based approach
can work over any DHT, we concentrate on communication
over robust DHTs that can tolerate Byzantine faults and
resist spam. We choose the best-known robust DHT con-
struction, and employ an eﬃcient OT protocol well-suited
for achieving our goal of obtaining query privacy over robust
DHTs. Finally, we compare the performance of our privacy-
preserving protocols with their more privacy-invasive coun-
terparts. We observe that there is no increase in the message
complexity and only a small overhead in the computational
complexity.
Categories and Subject Descriptors
C.2.0 [Computer-Communication Networks]: General
—Security and protection; C.2.2 [Computer-Communica-
tion Networks]: Network Protocols—Routing protocols;
D.2.8 [Software]: Security and Protection—Cryptographic
controls
General Terms
Algorithms, Design, Reliability, Security
Keywords
Distributed hash tables, Query privacy, Spam resistance,
Oblivious transfer
1.
INTRODUCTION
In the digital society, our online activities are persistently
recorded, aggregated, and analyzed. Although worldwide
electronic data privacy laws and organizations such as EFF
[1] and EPIC [2] try to challenge this pervasive surveillance
through policies and protests, privacy enhancing technolo-
gies (PETs) are key components for establishing a suitable
privacy protection mechanism from the technology side. The
interest in developing novel PETs is increasing for a variety
of reasons, ranging from the desire to share and access copy-
righted information without revealing one’s network iden-
tity, to scalable anonymous web browsing [31, 29, 30, 35,
50].
In this paper, we study privacy in the peer-to-peer
(P2P) paradigm, a popular approach to providing large-scale
decentralized services.
In the P2P paradigm, distributed hash tables (DHTs) [38,
47, 41, 54] are the most common methodology for imple-
menting structured routing. Similar to hash tables, a DHT
is a data structure that eﬃciently maps keys onto values that
are stored over a distributed overlay network. However, un-
like hash tables, DHTs can scale to extremely large number
of key-value pairs as the mapping from keys to values is
distributed among all peers. In order to obtain a value as-
sociated with a key, a requester (a sender) in a DHT routes
the key through a small fraction of the network to reach the
receiver that has stored the value. DHTs can also handle
continual arrivals and departures of peers, and small-scale
modiﬁcations to the set of peers do not disturb the mapping
from keys to values signiﬁcantly.
In a DHT, privacy may be expected for the sender, the re-
ceiver or the queried key. Ensuring the anonymity of senders
and requesters in DHTs has received considerable attention
in the privacy community [31, 29, 30, 35, 50]. Privacy of the
queries / keys, i.e., keeping the keys secret from intermedi-
ate peers that route the queries towards their destinations,
is also equally important: in many scenarios such as censor-
ship resistance, this query privacy constitutes a necessary
condition for sender and requestor anonymity. In this pa-
per, we present a practical approach to obtain privacy for
queries in robust and spam-resistant DHTs where a fraction
of peers may behave maliciously.
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
ASIACCS ’12, May 2–4, 2012, Seoul, Korea.
Copyright 2012 ACM 978-1-4503-1303-2/12/05 ...$10.00.
1.1 Contributions
Almost all anonymity solutions for DHTs try to provide
anonymity to a sender or a requester in a DHT lookup, up-
load or request. It may also be necessary that the queried
key remains secret from peers that route the corresponding
requests in some situations. We call this property query pri-
vacy. In this case, an intermediate routing peer should be
able to suggest a next peer or a set of next peers without de-
termining the key being searched for. Example application
scenarios for this property can be protection against mass
surveillance or censorship, preventing tracking and data-
mining activities on users requests, and providing opportuni-
ties to access material that is socially deplored, embarrassing
or problematic in society.
Recursive routing and iterative routing are the two ap-
proaches to route information in DHTs.
In the recursive
routing approach, obtaining query privacy looks infeasible,
if not impossible. This results from the fact that the in-
termediate router itself decides to which peer to forward a
request. Assuming that every peer is under the control of
an individual, it is always possible for the controller to ﬁg-
ure out the next peer for the request. On the other hand,
query privacy in iterative routing, which is also a commonly
used routing approach over robust DHTs, can be trivially
obtained if every peer sends its complete routing table to
the requesting peer. The requester can then determine the
next peer itself and send the request. However, this solution
may make it signiﬁcantly easier to mount spamming attacks
in the systems: a malicious sending peer can easily gather
a signiﬁcant amount of routing information, and use it to
determine and target peers that hold speciﬁc keys.
We instead use the oblivious transfer (OT) primitive [37,
17]. Given a peer holding a database, OT allows a re-
quester with a key to obtain a database entry associated
with the key, such that the requester does not get any in-
formation about other database entries and the database
owner does not learn the requester’s key. Therefore, OT
perfectly ﬁts our requirements of obtaining query privacy
without divulging additional routing information. We use
the OT protocol by Naor and Pinkas [32] in the best-known
robust DHT constructions by Young et al. [52, 53] (their
RCP-I and RCP-II protocols) to obtain our goal of query
privacy in robust DHTs.
Importantly, our query privacy
mechanism does not increase the message complexity of the
RCP-I and RCP-II protocols and an increase in the com-
putation cost is also not signiﬁcant. We elaborate on our
exact choice of OT protocol in Section 4.3, and discuss ro-
bust DHT constructions in Section 2.
The employed OT protocol [32] is a simple indexed OT
protocol, where the database contains index-value pairs and
a requester inputs an index. However, a query for a rout-
ing table entry is an interval membership (or a range) query
and not an index query. Therefore, to prevent a requesting
peer from obtaining any additional information, we could
have employed the concept of conditional OT (COT) [15]
and used the interval-membership strong COT (I-SCOT)
protocol by Blake and Kolesnikov [8]. However, the I-SCOT
protocol is expensive in terms of both computation and com-
munication. We observe that by releasing the upper and
lower bounds of a routing table entirely to the requester,
large improvements can be made. There is no information
in these range boundary values for a malicious requesters in
terms of spamming as they do not convey any information
regarding the identities of the key owners. However, given
this information, the requester will know the desired entry
(index), allowing the use of OT instead of the more complex
COT.
Private information retrieval (PIR) [13] is a weaker form
of OT, where more information may be revealed than asked
for; e.g., sending the complete routing table is a trivial PIR
protocol. PIR protocols can be less costly than OT in terms
of computation, but the risk of spamming persists with all
non-OT PIR protocols, and hence we avoid them.
Outline.
The rest of the paper is organized as follows.
In Sec-
tion 2, we survey the literature on robust DHTs. Section 3
describes our system model, while Section 4 overviews the
cryptographic tools used in our constructions. In Section 5,
we present the robust communication protocols that pre-
serve query privacy. In Section 6, we analyze and discuss
performance and systems issues. Finally, we conclude in
Section 7. We include a detailed description of the employed
OT protocol in Appendix A.
2. BACKGROUND AND RELATED WORK
Malicious behaviour is now common over the Internet.
Lack of admission control mechanisms in DHT systems make
them particularly vulnerable to these malicious (or Byzan-
tine) attacks [45, 49]. Such attacks can not only pollute
the data that is available over DHTs [25], but also poison
the indices by creating fake data identiﬁers [26]. They may
further create Sybil identities and disrupt communication
between well-behaving peers by spamming. The concern is
quite serious, since large-scale P2P systems in existence to-
day (e.g., Azureus or Vuze DHT [18] or KAD DHT [46]) see
millions of users every day. Along with the basic ﬁle sharing
application, there are proposals for using P2P systems to
re-implement the Domain Name System [48], mitigate the
impact of computer worms [3] and protect archived data [20,
51]. These applications would beneﬁt from tolerance against
Byzantine behaviors. As a result, a number of solutions have
been deﬁned that can provably tolerate Byzantine faults over
P2P systems (e.g., [6, 7, 5, 42, 19, 33, 22, 23, 52]). Due to
the popularity of DHTs, the majority of these solutions are
built to work over DHTs and the resulting constructions are
called robust DHTs.
In robust DHTs, malicious attacks are generally dealt with
using the concept of quorums [22, 33, 42, 4, 19, 6, 7, 5]. A
quorum is a set of peers such that a minority of the members
suﬀer adversarial faults. Typically, it consists of Θ(log n)
nodes where n is the total number of nodes in the underly-
ing DHT. A DHT quorum replaces an individual DHT peer
as the atomic unit and malicious behaviour by an adversary
is overcome by majority action; e.g., the content may be
stored in a distributed and redundant fashion across mem-
bers of a quorum such that it cannot be polluted by a small
fraction of host peers. Poisoning attacks can be mitigated by
having peers belonging to the same quorum validate routing
information before it is advertised.
If a peer violates the
protocol, then it is possible to remove it from the quorum,
which eﬀectively removes them from the system.
Protocols using quorums are split between those that use
iterative and those that use recursive approaches. When
sending a request using the recursive approach, a sending
peer contributes one message (its request), while its DHT
has to generate O(log n) messages. In the iterative approach,
a sending peer has to contribute an equal number of mes-
sage as its DHT. Consequently, while dealing with Byzantine
faults, the iterative approach is more common than the re-
cursive approach as the former provides better protection
against the spamming attack than the latter.
Peers u, v, and w are in the routing table (RT ) of peer p on a DHT. Correspondingly, in an quorum topology with p ∈ Q1,
u ∈ Q2, v ∈ Q3 and w ∈ Q(cid:96), quorums Q2, Q3, and Q(cid:96) are linked to quorum Q1 in its RT . Thick lines signify inter-quorum
links. Each quorum has size η = Ω(log n) and must have strictly fewer than 1/3 faulty peers.
Figure 1: Quorum Topology over DHTs
The common way such quorums are utilized is as follows:
a request m originating from a peer p traverses a sequence of
quorums Q1, Q2, . . . , Q(cid:96) until a destination peer is reached.
A typical example is a query for content where the desti-
nation is a peer q holding a data item. Initially p notiﬁes
its own quorum Q1 that it wishes to transmit m. Each
peer in Q1 forwards m to all peers in Q2. Every peer in Q2
determines the correct message by majority ﬁltering on all
incoming messages and, in turn, forwards it to all peers in
the next quorum. This forwarding process continues until
the quorum Q(cid:96) holding q is reached. Assuming a major-