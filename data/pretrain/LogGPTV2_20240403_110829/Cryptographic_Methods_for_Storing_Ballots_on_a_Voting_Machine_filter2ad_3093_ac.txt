is described in Section 5.3. The initial signature is stored
on non-volatile memory within the machine. When the In-
sertBallot procedure is invoked with a ballot b, the Append
algorithm is used to update the internal signature with b
(overwriting the previous value). The ballot is saved to the
removable memory (taking care to ensure that every order-
ing of the ballots currently stored is equally likely). When
2Grouping all the choices made by a voter into a single ballot string
would provide subliminal channels which could be used by a voter under
coercion [10].
the Close procedure is invoked, the CVSM uses Finalize to
prevent any further additions to the signature and copies it
to the removable memory.
Veriﬁcation and aggregation module. To verify the sig-
nature on a set of ballots stored on a removable ﬂash mem-
ory, we simply check that the public key ﬁngerprint pro-
vided matches the public key stored on the memory and use
the Verify algorithm to check that the signature matches the
key and the stored ballots.
5.3 Operational Procedures
Initialization and polling. We assume the electronic vot-
ing machines are stored at central municipal facilities be-
fore being taken to the individual polling places on election
day.
Immediately prior to transport, the election ofﬁcials
should invoke the Open procedure on each machine, thus
storing the initial history-hiding append only signature on
the internal ﬂash and printing out a sheet with the public
key ﬁngerprint. These sheets are collected for later veri-
ﬁcation of the electronic ballots.
Ideally, the ﬁngerprints
should be immediately sent to the county canvassing facili-
ties where they will be needed; this can be accomplished by
simply reading the hex ﬁngerprint over the phone. To min-
imize the possibility of the persons at the canvassing facil-
ity being tricked into using the wrong key ﬁngerprints, they
may be transmitted in additional ways such publicly posting
them on the Internet and bringing the sheets to the canvass-
ing facilities in hard copy. Note that from this point until
the close of polling the machines should not be left unat-
tended. If someone were to boot a machine with their own
software and read the initial history-hiding append only sig-
nature stored internally, they may later be capable of replac-
ing all the results reported by that machine. This and other
threat scenarios are considered in detail in Section 6. Once
the electronic voting machines are at the polling places and
the polls have opened, voters may visit the machines one
by one and have their votes recorded. After the polling pe-
riod has ended, poll workers activate the Close procedure
on each electronic voting machine and collect the remov-
able ﬂash memories containing the ballots.
Canvassing. The removable memories are transported to
canvassing facilities where the contents are read. Using the
public key ﬁngerprints received from the staging facility, the
contents of each memory are checked. The ballots may then
be totaled and the results publicly announced. Note that if
we assume the public key ﬁngerprints reach the canvassing
facility securely, the integrity of the election does not de-
pend on the integrity of the contents of the ﬂash memories.
It is therefore reasonable to transmit the signed electronic
ballots over the Internet from the polling places to the can-
vassing facility rather than physically transporting the mem-
ories. This may somewhat reduce expenses. The history-
hiding append only signatures should be rerandomized as
described in Section 4.5; this may be performed once at
the polling place before sending the electronic ballots to
the canvassing facility and again at the canvassing facility
before making the signed ballots publicly available.
6 Comparisons
The use of history-hiding append only signatures for se-
cure vote storage in a DRE voting machine serves primarily
as an alternative to the PROM system. While the PROM
system ensures any illicit writes will be detected, it does
not address the threat of one PROM being replaced with an-
other. Ensuring the integrity of the election requires phys-
ical tracking and monitored transport of the PROM mem-
ories. The same considerations apply to the use of other
write-once media such as recordable CD’s in storing elec-
tronic ballots.
Essentially, the use of an HHAOS scheme replaces the
physical tracking requirement by requiring secure commu-
nication of a public key ﬁngerprint. A more simplistic ap-
proach to gain this effect would be to use a normal digital
signature scheme to sign ballots stored by the vote storage
module. However, it is likely necessary to save the signing
key on non-volatile memory within the machine in order to
transport it to the polling place and for fault tolerance, leav-
ing it vulnerable to compromise. The append only property
of an HHAOS scheme limits this threat by ensuring at least
the integrity of ballots cast before the point of compromise.
We now detail a threat model in which to evaluate the
cryptographic vote storage module of Section 5 and the
PROM-based vote storage module. After explaining the
model, we will highlight the improvements offered by the
new techniques. Finally, we will compare the efﬁciency and
robustness of the two approaches.
6.1 Threat Model
DRE voting machines face a wide variety of threats;
however, we will restrict our attention to the types of at-
tacks relevant to the new and previously proposed systems
for vote storage. We focus on illicit read and write compro-
mises to the memories involved in vote storage along with
key management issues. In particular, we do not consider
the issue of software veriﬁcation. That said, the algorithms
proposed in Sections 4 and 5 are simple enough to be veri-
ﬁed by hand, with some effort. Assuming correct software,
the three different components that will be considered in
our threat model are the removable storage on which the
electronic ballots are recorded (either a ﬂash memory or
a PROM), the internal ﬂash memory on which the initial
history-hiding append only signature is stored, and the pub-
lic key ﬁngerprint (these last two components only exist in
the newly proposed system).
An adversary may gain read-only or read / write access
to the removable or internal memory within a voting ma-
chine either between machine initialization and ﬁnalization
or after ﬁnalization (a compromise prior to initialization
will have no effect). Note that we may consider replace-
ments of PROM’s and writes to removable ﬂash memories
to be equivalent operations, since the contents of a PROM
being replaced may ﬁrst be read and partly copied over to
the new PROM, gaining the effect of general purpose mem-
ory. Additionally, we consider the effect of the public key
ﬁngerprint printed during machine initialization being in-
correctly communicated to the canvassing facility (e.g., as a
result of social engineering attacks).
6.2 Threat Evaluation
Integrity. Given this threat model, we now evaluate the
integrity properties of the new cryptographic vote storage
module and the previous PROM vote storage module. In
Table 1 we list all combinations of the previously described
compromises and the resulting effects on election integrity.3
The column for the PROM VSM depends only on the com-
promise to the removable memory, since that system does
not include the internal memory or a public key ﬁnger-
print. Dashes in the table denote the collapse of several
rows where the outcome is the same for all values of that
variable.
The key security improvements offered by the CVSM
over the PROM VSM manifest in scenarios B and E. In
these cases the removable memory is swapped or illicitly
written either before or after ﬁnalization, and the internal
memory of the CVSM and the public key ﬁngerprint are se-
cure.4 In both cases, any ballot tampering will be detected
if the CVSM is used, but if the PROM VSM is used, the
ballots currently stored at the point of compromise may be
arbitrarily modiﬁed.
A lesser improvement is obtained if the internal memory
of the CVSM is also compromised. In scenario C, if the ad-
versary is able to write the internal memory when they write
the removable memory, they may insert ballots undetected.
They may not, however, remove or modify ballots already
present without detection. Similarly, in scenario F, if the ad-
versary gains read-only or read / write access to the internal
memory after the ﬁrst k ballots have been cast, then they
may alter the set of ballots when they compromise the re-
3Reads of the removable memory are not considered here since they
affect only privacy, not integrity.
4A read of the internal memory at the time of compromise of the re-
movable memory is also acceptable in scenario B.
A
B
C
D
E
F
G
swapped / written
during polling
swapped / written
during polling
swapped / written
during polling
swapped / written
after polling
swapped / written
after polling
swapped / written
after polling
secure or read
compromise
read / write
compromise
—
secure
read or read / write
compromise
—
secure
secure
replaced
secure
secure
4
4
4/8
8
4
4/8
8
4
8
8
8
8
8
8
Removable Memory
(Electronic Ballots)
Internal Memory
(Evolving Sig.)
Public Key
Crypto
PROM
secure
—
—
replaced
Key to symbols:
4: No tampering possible without detection.
4/8:
Possible to insert ballots undetected, but ballots already present at point of compro-
mise may not be removed without detection.
8: Arbitrary, undetected tampering with ballots present at point of compromise possible.
Table 1. Results of various threat scenarios on election integrity using the cryptographic and PROM
vote storage modules.
movable memory after ﬁnalization. However, the resulting
set must include the ﬁrst k ballots cast if it is to verify.
If the public key ﬁngerprint does not correctly reach the
canvassing facility, then the new system offers no improve-
ments over the PROM-based system. It should be easier,
however, to ensure the safe arrival of a public key ﬁnger-
print than a PROM.
An additional issue affecting election integrity is that of
“vote disqualiﬁcation” attacks, in which the attacker does
not insert or delete votes, but instead attempts to prevent
votes from being counted (presumably in a region support-
ing their opponent). An attacker who is able to replace the
public key ﬁngerprint or write the internal memory would
be able cause the ﬁnal signature check to fail, even if they
do not have write access to the removable memory. This
suggests the following policy. If the signature check fails, a
recount should be performed based on a set of paper receipts
or some other redundant source of information (if possible),
but in no case should the votes be outright discounted.
Privacy. Having considered the improvements to elec-
tion integrity offered by the use of the HHAOS scheme in
the CVSM, we now compare the privacy properties of the
CVSM and PROM VSM. Assuming a secure random num-
ber generator and a non-malicious implementation of the
CVSM algorithms, the two systems offer the same privacy
guarantees. The data structures in both the internal mem-
ory of the CVSM and its removable storage are history-
independent. In either system, an illicit read of the remov-
able storage during the polling process will reduce voter pri-
vacy by partitioning the ballots into those cast before the
compromise and those cast after (but no further privacy will
be lost). In the case of the CVSM, an illicit read of the value
S1 stored internally will reduce voter privacy in the same
way, assuming the ﬁnal contents of the removable storage
are eventually made public.
However, in the case of a malicious random number gen-
erator or a malicious implementation of the CVSM algo-
rithms, the new approach suffers from subliminal channels
that may reveal a great deal of information about the or-
dering of ballots. The PROM VSM suffers the same prob-
lem when the random placement table technique for insert-
ing ballots into the PROM is used with a malicious random
number generator. This threat is mitigated when using the
CVSM by employing the Rerandomize operation described
in Section 4.5.
If the contents of the removable memory
are rerandomized once at the polling place after ﬁnaliza-
tion and once at the canvassing facility before the contents
are publicly posted, then the subliminal channels will be
publicly visible only if both the machines performing reran-
domization are malicious. One point to be made regarding
the process of rerandomization when using the CVSM is
that the rerandomization operation may be performed by an
7 Conclusions
We presented a new cryptographic tool for storing cast
ballots on a voting terminal. The tool, called history-hiding
append-only signatures (HHAOS), preserves all the beneﬁts
of a hardware-based solution, while preventing hardware re-
placement attacks. We presented an efﬁcient realization of
HHAOS using groups with a bilinear map. We also dis-
cussed a less efﬁcient system that uses any standard signa-
ture scheme.
untrusted entity. In the worst case, the subliminal channels
will remain, but the machine performing rerandomization
may not change the ballots without invalidating their signa-
ture. This is not the case if one were to rerandomize the
output of the PROM VSM when using random placement
tables. The ballots would need to be copied to a new PROM
(or empty space on the original), and the machine perform-
ing rerandomization would need to be trusted to protect
election integrity. When using the PROM VSM, however,
subliminal channels may be avoided entirely by using a dif-
ferent (and less efﬁcient) storage method, such as copyover
lists or lexicographic chain tables [15].
6.3 Robustness and Efﬁciency
The cryptographic vote storage module described in Sec-
tion 5 shares fault tolerance properties similar to those of
the PROM-based vote storage module. All the information
necessary for the CVSM to continue operation after a power
failure or system crash is stored on non-volatile memory.
When overwriting values on either the internal memory or
the removable memory, simple two-phase commits may be
used to allow recovery in the case of a crash in the midst of
writing. In this case, a crash in the middle of an operation
may reveal the last ballot stored, but there will be no further
compromise of voter privacy. The unavailability of the pub-
lic key ﬁngerprint at veriﬁcation time will prevent verifying
the integrity of the electronic ballots, but will not prevent
them from being counted.
The computational requirements placed on the voting
machine by the CVSM algorithms are very modest. The
voting machines need only compute modular exponentia-
tions twice at initialization (the pairing may be precom-
puted) and twice for each ballot recorded (also evaluating
a hash function for each ballot). This is well within the ca-
pabilities of low end commodity PC’s or even much more
limited embedded systems. If a commodity PC has already
been chosen as the basic architecture for a DRE voting ma-
chine, the computational requirements of CVSM will not
affect hardware selection. The necessary storage is also
minimal. If we assume at most 9,000 votes across all races
as in Section 3, 50-byte identiﬁers for each vote, and 160-bit
group elements in G (typical of an elliptic curve), then less
than 650KB are necessary on the removable storage (and
only a single group element on the internal storage). The
PROM-based VSM requires the purchase of new PROM’s
for each use of the machines. In contrast, a USB ﬂash drive
may be purchased (at consumer rates) for less than $9.00,
a one time cost. If no internal non-volatile storage is other-
wise available on the machines, 1Mbit ﬂash memory chips
may be purchased for less than $1.00 each.
References
[1] M. Bellare and S. Miner. A forward-secure digital signature
scheme. In Proceedings of Crypto, 1999.
[2] D. Boneh, C. Gentry, B. Lynn, and H. Shacham. Aggregate
and veriﬁably encrypted signatures from bilinear maps. In
Proceedings of Eurocrypt, 2003.
[3] D. Boneh, C. Gentry, B. Lynn, and H. Shacham. A survey
of two signature aggregation techniques. CryptoBytes, 6(2),
2003.