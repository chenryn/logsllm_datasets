title:SketchVisor: Robust Network Measurement for Software Packet Processing
author:Qun Huang and
Xin Jin and
Patrick P. C. Lee and
Runhui Li and
Lu Tang and
Yi-Chao Chen and
Gong Zhang
SketchVisor: Robust Network Measurement for
So(cid:129)ware Packet Processing
Qun Huang1, Xin Jin2, Patrick P. C. Lee3, Runhui Li1, Lu Tang3, Yi-Chao Chen1, Gong Zhang1
2Johns Hopkins University 3The Chinese University of Hong Kong
1Huawei Future Network Theory Lab
control decisions [25]. Software switches, such as Open vSwitch
[41], Microsoft Hyper-V Virtual Switch [32], and Cisco Nexus 1000V
Virtual Switch [10], are now common building blocks of virtualiza-
tion software and widely deployed in modern public and private
clouds.
ABSTRACT
Network measurement remains a missing piece in today’s software
packet processing platforms. Sketches provide a promising building
block for filling this void by monitoring every packet with fixed-size
memory and bounded errors. However, our analysis shows that
existing sketch-based measurement solutions suffer from severe
performance drops under high traffic load. Although sketches
are efficiently designed, applying them in network measurement
inevitably incurs heavy computational overhead.
We present SketchVisor, a robust network measurement frame-
work for software packet processing. It augments sketch-based
measurement in the data plane with a fast path, which is activated
under high traffic load to provide high-performance local measure-
ment with slight accuracy degradations. It further recovers accurate
network-wide measurement results via compressive sensing. We
have built a SketchVisor prototype on top of Open vSwitch. Ex-
tensive testbed experiments show that SketchVisor achieves high
throughput and high accuracy for a wide range of network mea-
surement tasks and microbenchmarks.
CCS CONCEPTS
•Networks → Network measurement;
KEYWORDS
Sketch; Network measurement; Software packet processing
ACM Reference format:
Qun Huang, Xin Jin, Patrick P. C. Lee, Runhui Li, Lu Tang, Yi-Chao Chen,
and Gong Zhang. 2017. SketchVisor: Robust Network Measurement for
Software Packet Processing. In Proceedings of SIGCOMM ’17, Los Angeles,
CA, USA, August 21−25, 2017, 14 pages.
DOI: http://dx.doi.org/10.1145/3098822.3098831
1 INTRODUCTION
Software packet processing is an important pillar of modern data
center networks. It emphasizes programmability and extensibility,
thereby supporting new network management features. Extensive
work has been undertaken to improve software-based packet for-
warding performance [16, 45]. Recent trends on network function
virtualization (NFV) extend traditional layer 2-3 packet processing
to more sophisticated middlebox functionalities via software-based
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page. Copyrights for components of this work owned by others than ACM
must be honored. Abstracting with credit is permitted. To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee. Request permissions from permissions@acm.org.
SIGCOMM ’17, August 21−25, 2017, Los Angeles, CA, USA
© 2017 ACM. 978-1-4503-4653-5/17/08...$15.00
DOI: http://dx.doi.org/10.1145/3098822.3098831
Network measurement is crucial to managing software packet
processing platforms. Its goal is to collect essential network traffic
statistics (e.g., heavy hitters, traffic anomalies, flow distribution,
and traffic entropy) to help network operators make better network
management decisions on traffic engineering, performance diag-
nosis, and attack prevention. Although network measurement has
been well studied in IP networks, today’s software switches, sur-
prisingly, only support limited network measurement. For example,
Open vSwitch only provides sampling-based measurement tools
based on NetFlow [40] and sFlow [49], yet packet sampling inher-
ently suffers from low measurement accuracy and achieves only
coarse-grained measurement [28, 56]. While we can improve mea-
surement accuracy by increasing the sampling rate or even record-
ing all traffic (e.g., SPAN [51]), the resource usage will dramatically
increase and pose scalability issues in high-speed networks.
Sketches provide an alternative to achieving fine-grained mea-
surement. Unlike packet sampling, sketches are compact data
structures that can summarize traffic statistics of all packets with
fixed-size memory, while incurring only bounded errors. Many
sketch-based solutions have been proposed in the literature to
address different trade-offs between measurement accuracy and
resource usage [13, 19, 22, 35, 46]. Although such proposals are
not widely deployed in production IP networks due to the need
of re-engineering switching ASIC, the programmability nature of
software switches makes the deployment of sketch-based measure-
ment in software packet processing viable. With the theoretical
guarantees of resource usage of sketches, it is expected that sketch-
based measurement incurs low overhead to the software packet
processing pipeline.
Unfortunately, contrary to conventional wisdom, our analysis
(§2.2) shows that existing representative sketch-based solutions in
software actually consume substantial CPU resources, which could
otherwise be used by other co-located applications (e.g., virtual ma-
chines or containers in virtualized environments). The root cause
is that sketches are only primitives. While they are simple and
efficient by design, applying them into practical network measure-
ment requires additional extensions or components that often incur
heavy computations. As modern data center networks now scale
to 10Gbps or even higher speeds, sketch-based measurement will
require excessive CPU resources to meet the line-rate requirement.
Even though data centers do not always see high link utilization
in practice [3], achieving line-rate measurement remains critical,
especially in the face of traffic bursts, which indicate the presence
SIGCOMM ’17, August 21−25, 2017, Los Angeles, CA, USA
Huang et al.
of hot-spots or even attacks. Thus, not only do we require a mea-
surement solution be resource-efficient under high traffic load, but
also to accurately reason about the behavior of high traffic load.
We present SketchVisor, a robust network measurement frame-
work for software packet processing. By robust, we mean that even
under high traffic load, SketchVisor preserves both high (or even
line-rate) performance and high accuracy for network-wide mea-
surement. Instead of proposing a new sketch design, SketchVisor
augments existing sketch-based solutions with a separate data path
(called the fast path) that provides fast but slightly less accurate
measurement for the packets that cannot be promptly handled
by the underlying sketch-based solutions under high traffic load.
Later, it accurately recovers network-wide measurement results
from both sketch-based and fast path measurements.
Specifically, SketchVisor deploys a distributed data plane across
software switches in the network, each of which processes packets
based on the sketch-based measurement tasks as assigned by net-
work operators, and redirects excessive packets to the fast path if
the tasks are overloaded and cannot process those packets at high
speed. We propose a new top-k algorithm for the fast path to track
large flows. By leveraging traffic skewness estimations and care-
fully designed data structures, our top-k algorithm can achieve low
amortized processing overhead and tight estimation bounds. We
also maintain a global counter to track the traffic entering the fast
path so as to capture the aggregate characteristics of small flows
as well. Note that our fast path is general to support a variety of
measurement tasks designed for different types of traffic statistics.
In addition, SketchVisor deploys a centralized control plane to
merge the local measurement results (from both sketch-based and
fast path measurements) from all software switches to provide
accurate network-wide measurement. As the fast path inevitably
loses information for high performance, we formulate a matrix
interpolation problem to enable the control plane to recover missing
information via compressive sensing [6, 7, 9, 61].
We have implemented a SketchVisor prototype and integrated
it with Open vSwitch [41]. We have conducted extensive testbed
experiments on SketchVisor for a wide range of measurement tasks
and microbenchmarks. We show that for all our evaluated sketch-
based measurement tasks, SketchVisor achieves above 17Gbps
throughput with a single CPU core and near-optimal accuracy
with only few KBs of memory in the fast path.
2 BACKGROUND AND MOTIVATION
We introduce the network measurement tasks considered in this
paper, and demonstrate the overhead of existing sketch-based solu-
tions in software.
2.1 Network Measurement
We target general measurement tasks that monitor traffic and col-
lect traffic statistics, conducted by network operators, over one or
multiple time periods called epochs. Traffic statistics can be either
flow-based (identified by 5-tuples) or host-based (identified by IP
addresses); or either volume-based (measured by byte counts) or
connectivity-based (measured by distinct flow/host counts). This
paper focuses on the following common traffic statistics that have
been extensively studied in the literature.
Figure 1: Example of Count-Min sketch.
an epoch.
two consecutive epochs exceeds a threshold.
• Heavy hitter: a flow whose byte count exceeds a threshold in
• Heavy changer: a flow whose change of byte counts across
• DDoS: a destination host that receives data from more than a
• Superspreader: a source host that sends data to more than a
threshold number of destination hosts in an epoch (i.e., a super-
spreader is the opposite of a DDoS).
threshold number of source hosts in an epoch.
• Cardinality: the number of distinct flows in an epoch.
• Flow size distribution: the fractions of flows for different
• Entropy: the entropy of flow size distribution in an epoch.
ranges of byte counts in an epoch.
2.2 Performance Analysis
This paper focuses on sketch-based measurement, which summa-
rizes traffic statistics of all observed packets with theoretical guar-
antees on memory usage and error bounds. At a high level, a sketch
is a compact data structure comprising a set of buckets, each of
which is associated with one or multiple counters. It maps each
packet to a subset of buckets with independent hash functions,
and updates the counters of those buckets. Network operators can
query the counter values to recover traffic statistics.
The actual sketch design varies across measurement tasks. To
show the main idea of sketches, we use a Count-Min sketch [14]
as an example to illustrate how it collects flow-based traffic statis-
tics. As shown in Figure 1, a Count-Min sketch consists of a two-
dimensional array with w columns and d rows. For each packet,
we hash its flow ID (5-tuple) to a bucket in each of the d rows using
d independent hash functions, and then add the packet size to the
counter of each bucket. To recover the size of a given flow, we
use the minimum of the counters of the d hashed buckets as an
estimate. With proper settings of w and d, the estimation flow size
provably incurs a bounded error with a high probability [14].
This example shows that sketches perform fairly simple opera-
tions, mainly hash computations and counter updates. Intuitively,
they should add limited overhead to software packet processing.
Unfortunately, we find that this intuition does not hold in practice.
Observations: Sketches are only primitives that cannot be directly
used for network measurement; instead, we must supplement them
with additional components and operations to fully support a mea-
surement task. In particular, in order to collect meaningful traffic
statistics, we must add extensions to sketches to make them re-
versible, meaning that sketches not only store traffic statistics, but
also efficiently answer queries on the statistics. For example, a
Count-Min sketch can return a flow size only if we query a specific
flow. Thus, if we want to identify, say, heavy hitters that exceed a
pre-specified threshold, a Count-Min sketch can immediately report
Packetw=4d=3+S+S+Sh1h2h3d(=3)hash  functionsSketchVisor: Robust Network Measurement for So(cid:129)ware Packet Processing
SIGCOMM ’17, August 21−25, 2017, Los Angeles, CA, USA
(a) CPU cycles
(b) Throughput with 10 Gbps NIC
Figure 2: CPU overhead and throughput of sketch-based so-
lutions.
a heavy hitter after updating a packet by checking if the estimated
flow size exceeds the thresholds based on the counters of the hashed
buckets. However, the prior threshold is often unavailable in ad-
vance in practice, and we need to query for heavy hitters subject
to different thresholds. In this case, we must query all candidate
flows in the entire flow space and check if each of them exceeds a
threshold. The flow space size can be extremely large, say 2104 for
5-tuple flows, thereby leading to substantial query costs.
Some proposals extend sketches with efficient reversibility. Del-
toid [13] encodes flow headers with extra counters in each bucket
and updates these counters on every packet. Reversible Sketch [46]
partitions a flow header and hashes each sub-header into smaller
subspaces. FlowRadar [28] maps flows to counters through XOR
operations, such that new flows can be reconstructed by repeatedly
XOR-ing the counters with known flows. However, such extensions
incur heavy computational overhead.
In addition, most sketch-based solutions are designed for specific
measurement tasks and traffic statistics. To run multiple measure-
ment tasks together, we need to deploy each corresponding solution
separately. Thus, running all of them on every packet becomes
computationally burdensome. The recently proposed UnivMon
[30] allows a single sketch to simultaneously collect different types
of traffic statistics. However, it needs to update various compo-
nents (including CountSketch [8] and top-k flow keys), and remains
computationally expensive (see analysis below).
Microbenchmark: To validate the above claims, we present mi-
crobenchmark results on the software implementations of four
representative sketch-based solutions, namely Deltoid [13], Re-
versible Sketch [46], FlowRadar [28], and UnivMon [30], on heavy
hitter detection. Here, we only measure the overhead of record-
ing packets into each sketch-based solution but not collecting the
recorded traffic statistics, as the latter can usually be done offline.
We employ the same configurations as detailed in §7. Figure 2(a)
shows the number of CPU cycles (measured by Perf [42]) of record-