# SketchVisor: Robust Network Measurement for Software Packet Processing

## Authors
Qun Huang, Xin Jin, Patrick P. C. Lee, Runhui Li, Lu Tang, Yi-Chao Chen, Gong Zhang

### Affiliations
- **Qun Huang, Runhui Li, Yi-Chao Chen, Gong Zhang**: Huawei Future Network Theory Lab
- **Xin Jin**: Johns Hopkins University
- **Patrick P. C. Lee, Lu Tang**: The Chinese University of Hong Kong

## Abstract
Network measurement remains a critical but often overlooked aspect in today's software packet processing platforms. Sketches offer a promising solution by monitoring every packet with fixed-size memory and bounded errors. However, our analysis reveals that existing sketch-based measurement solutions suffer from significant performance drops under high traffic loads. Although sketches are designed to be efficient, their application in network measurement can lead to substantial computational overhead.

We introduce SketchVisor, a robust network measurement framework for software packet processing. SketchVisor enhances sketch-based measurement in the data plane with a fast path, activated under high traffic load, to provide high-performance local measurement with minimal accuracy degradation. It then recovers accurate network-wide measurement results using compressive sensing. We have implemented a SketchVisor prototype on top of Open vSwitch. Extensive testbed experiments demonstrate that SketchVisor achieves high throughput and high accuracy for a wide range of network measurement tasks and microbenchmarks.

## CCS Concepts
- **Networks → Network measurement**

## Keywords
- Sketch
- Network measurement
- Software packet processing

## ACM Reference Format
Qun Huang, Xin Jin, Patrick P. C. Lee, Runhui Li, Lu Tang, Yi-Chao Chen, and Gong Zhang. 2017. SketchVisor: Robust Network Measurement for Software Packet Processing. In Proceedings of SIGCOMM '17, Los Angeles, CA, USA, August 21-25, 2017, 14 pages. DOI: http://dx.doi.org/10.1145/3098822.3098831

## 1. Introduction
Software packet processing is a fundamental component of modern data center networks, emphasizing programmability and extensibility. Significant efforts have been made to improve the performance of software-based packet forwarding [16, 45]. Recent trends in Network Function Virtualization (NFV) extend traditional Layer 2-3 packet processing to more sophisticated middlebox functionalities via software.

Network measurement is essential for managing software packet processing platforms. It aims to collect crucial network traffic statistics, such as heavy hitters, traffic anomalies, flow distribution, and traffic entropy, to assist network operators in making informed decisions about traffic engineering, performance diagnosis, and attack prevention. While network measurement has been well-studied in IP networks, today's software switches, like Open vSwitch, Microsoft Hyper-V Virtual Switch, and Cisco Nexus 1000V, only support limited measurement capabilities. For instance, Open vSwitch provides sampling-based measurement tools based on NetFlow [40] and sFlow [49], which inherently suffer from low accuracy and coarse-grained measurements [28, 56]. Increasing the sampling rate or recording all traffic (e.g., SPAN [51]) improves accuracy but significantly increases resource usage, posing scalability issues in high-speed networks.

Sketches offer an alternative for fine-grained measurement. They are compact data structures that summarize traffic statistics with fixed-size memory and bounded errors. Many sketch-based solutions have been proposed to balance measurement accuracy and resource usage [13, 19, 22, 35, 46]. Despite their potential, these solutions are not widely deployed in production IP networks due to the need for re-engineering switching ASICs. The programmable nature of software switches makes the deployment of sketch-based measurement feasible. However, our analysis (§2.2) shows that existing sketch-based solutions in software consume substantial CPU resources, which could otherwise be used by other co-located applications (e.g., virtual machines or containers in virtualized environments).

To address this, we present SketchVisor, a robust network measurement framework for software packet processing. SketchVisor augments existing sketch-based solutions with a fast path that provides high-performance, slightly less accurate measurement during high traffic loads. It later recovers accurate network-wide measurement results using both sketch-based and fast path measurements. Specifically, SketchVisor deploys a distributed data plane across software switches, each processing packets based on assigned sketch-based measurement tasks. Excessive packets are redirected to the fast path if the tasks are overloaded. We propose a new top-k algorithm for the fast path to track large flows, leveraging traffic skewness estimations and carefully designed data structures to achieve low amortized processing overhead and tight estimation bounds. A global counter tracks the traffic entering the fast path to capture the aggregate characteristics of small flows.

Additionally, SketchVisor deploys a centralized control plane to merge local measurement results from all software switches, providing accurate network-wide measurement. The control plane uses compressive sensing to recover missing information from the fast path. We have implemented a SketchVisor prototype integrated with Open vSwitch and conducted extensive testbed experiments. Results show that SketchVisor achieves over 17 Gbps throughput with a single CPU core and near-optimal accuracy with only a few KBs of memory in the fast path.

## 2. Background and Motivation
This section introduces the network measurement tasks considered in this paper and demonstrates the overhead of existing sketch-based solutions in software.

### 2.1 Network Measurement
We target general measurement tasks that monitor traffic and collect traffic statistics, conducted by network operators over one or multiple time periods called epochs. Traffic statistics can be flow-based (identified by 5-tuples) or host-based (identified by IP addresses), and either volume-based (measured by byte counts) or connectivity-based (measured by distinct flow/host counts). This paper focuses on the following common traffic statistics:

- **Heavy Hitter**: A flow whose byte count exceeds a threshold in an epoch.
- **Heavy Changer**: A flow whose change in byte counts between two consecutive epochs exceeds a threshold.
- **DDoS**: A destination host receiving data from more than a threshold number of source hosts in an epoch.
- **Superspreader**: A source host sending data to more than a threshold number of destination hosts in an epoch.
- **Cardinality**: The number of distinct flows in an epoch.
- **Flow Size Distribution**: The fractions of flows for different ranges of byte counts in an epoch.
- **Entropy**: The entropy of flow size distribution in an epoch.

### 2.2 Performance Analysis
Sketch-based measurement summarizes traffic statistics of all observed packets with theoretical guarantees on memory usage and error bounds. A sketch is a compact data structure comprising a set of buckets, each associated with one or multiple counters. It maps each packet to a subset of buckets using independent hash functions and updates the counters. Network operators can query the counter values to recover traffic statistics.

The actual sketch design varies across measurement tasks. As an example, a Count-Min sketch [14] consists of a two-dimensional array with \( w \) columns and \( d \) rows. For each packet, its flow ID (5-tuple) is hashed to a bucket in each of the \( d \) rows using \( d \) independent hash functions, and the packet size is added to the counter of each bucket. To recover the size of a given flow, the minimum of the counters of the \( d \) hashed buckets is used as an estimate. With proper settings of \( w \) and \( d \), the estimated flow size incurs a bounded error with high probability [14].

While sketches perform simple operations, mainly hash computations and counter updates, they require additional components and operations to fully support a measurement task. For example, to identify heavy hitters, a Count-Min sketch must query all candidate flows in the entire flow space, leading to substantial query costs. Some proposals, like Deltoid [13], Reversible Sketch [46], and FlowRadar [28], extend sketches with efficient reversibility but incur heavy computational overhead. Additionally, most sketch-based solutions are designed for specific measurement tasks, and running multiple tasks together becomes computationally burdensome.

To validate these claims, we present microbenchmark results on the software implementations of four representative sketch-based solutions: Deltoid [13], Reversible Sketch [46], FlowRadar [28], and UnivMon [30], focusing on heavy hitter detection. Figure 2(a) shows the number of CPU cycles (measured by Perf [42]) required to record packets into each sketch-based solution, while Figure 2(b) shows the throughput with a 10 Gbps NIC. These results confirm that existing sketch-based solutions incur significant computational overhead under high traffic loads.