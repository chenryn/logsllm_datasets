# Initiating the Avalanche: Application DoS in Microservice Architectures

## Authors
- **Scott Behrens**
  - Senior Application Security Engineer at Netflix
  - Over 8 years of experience in breaking and building systems
  - Contributor to various open-source projects (github.com/sbehrens)

- **Jeremy Heffner**
  - Senior Security Software Engineer
  - Over 20 years of experience in developing and securing systems

## Introduction
This presentation focuses on Denial of Service (DoS) attacks targeting the application layer logic in microservice architectures. We will explore how these attacks differ from traditional DoS attacks, their impact, and potential mitigation strategies.

## How Novel is Application DoS?
Application DoS attacks are becoming increasingly sophisticated, targeting specific vulnerabilities in the application layer. According to the Akamai State of the Internet Security Report (Q1 2017), these attacks are a growing concern.

## Microservice Primer: High-Level Architecture
### Key Components
- **Client Libraries and API Gateway**: Interfaces for middle-tier services.
- **Circuit Breakers/Failover**: Handle service failures.
- **Cache**: Speeds up response times and reduces server load.

### Benefits
- **Scale**: Independent scaling of services.
- **Service Independence**: Fault isolation.
- **Eliminates Stack Debt**: Simplifies system maintenance.

### Challenges
- **Distributed System Complexity**: Increased complexity in deployment and management.
- **Cascading Failures**: If not properly configured, one failure can lead to a chain reaction.

## Simplified Microservice API Architecture
```
INTERNET
│
├── ZUUL PROXY
│   ├── CORE API
│   └── WEBSITE
│
├── MIDDLE TIER SERVICES
│
└── BACKEND TIER SERVICES
```

## Microservice Primer: API Gateways and Client Libraries
- **API Gateway**: Acts as an interface for middle-tier services.
- **Client Libraries**: Provided by services to interact with the API Gateway.

## Microservice Primer: Circuit Breaker
- **Function**: Helps handle service failures.
- **Considerations**: Choosing the right timeout and breaker duration.

## Microservice Primer: Cache
- **Benefits**:
  - Speeds up response time.
  - Reduces load on services.
  - Minimizes the number of servers needed.
- **Example**: Netflix's evcache (github.com/netflix/evcache).

## Old School vs. New School Application DoS
### Old School Application DoS
- **Target**: Often 1-to-1.
- **Example**: 
  ```perl
  > perl create_many_profiles.pl
  POST /create_profile HTTP/1.1
  ...
  profile_name=$counter + "hacker"
  300 requests per second
  ```

### New School Application DoS
- **Target**: Often 1-to-many.
- **Example**:
  ```python
  > python grizzly.py
  POST /recommendations HTTP/1.1
  ...
  {"recommendations": {"range": [0,10000]}}
  ```

### Impact
- **Core API**: Makes many client requests.
- **Middle Tier Services**: Make many calls to backend services.
- **Backend Services**: Queues fill up with expensive requests.
- **Client Timeouts**: Circuit breakers triggered, fallback experience activated.

## Workflow for Identifying Application DoS
1. **Identify Latent Service Calls**: Determine which service calls have the highest latency.
2. **Investigate Manipulation**: Check if latent calls can be manipulated.
3. **Tune Payload**: Adjust payload to bypass WAF/Rate Limiting.
4. **Test Hypothesis**: Use Cloudy Kraken (orchestrator) and Repulsive Grizzly (attack framework) to scale the test.

## Attack Patterns
- **Range**: Exploits range-based queries.
- **Object Out per Object In**: Generates disproportionate output.
- **Request Size**: Uses large request payloads.
- **All of the Above**: Combines multiple techniques.

## Cloudy Kraken Deployment
- **Components**:
  - **VPC**: Virtual Private Cloud.
  - **Security Group**: Controls network traffic.
  - **Auto Scaling Group (ASG)**: Automatically starts identical nodes.
  - **Launch Config**: Initial configuration.
- **Deployment Phase**:
  - Each worker node is a single EC2 instance.
  - Enhanced Networking Driver for minimal overhead.
- **Execution Phase**:
  - Runs cloud-init script on startup.
  - Downloads and runs main config script and attack script.
  - Spins up attack workers.
  - Waits for coordinated start time.
- **Kill-Switch**: Script to terminate all instances and clean up resources.
- **Tear-Down**: Removes ASGs, Launch Configs, VPC, Security Groups, and Instance Profiles.

## Test Results
- **Outcome**: 80% error rate, $1.71 cost, 5-minute outage for a single AWS region.
- **Failures**:
  - Expensive API calls invoked with non-member cookies.
  - Many RPCs per request.
  - WAF/Rate Limiter unable to monitor middle-tier RPCs.
  - Missing fallback experience when cache missed.

## Mitigations
- **Understand Impact**: Identify which microservices affect customer experience.
- **Rate Limiter (WAF)**: Monitor middle-tier signals or request costs.
- **Contextual Monitoring**: Middle-tier services should provide context on abnormal behavior.
- **Cache Misses**: Rate limiter should monitor volume of cache misses.
- **Prioritize Traffic**: Prioritize authenticated traffic over unauthenticated.
- **Timeouts**: Configure reasonable client library timeouts.
- **Fallback Experiences**: Trigger fallback experiences when cache or lookups fail.

## Demo
- **Test App**: Demonstration of launching and scaling an attack with Cloudy Kraken.

## Conclusion
Thank you for your attention. For more information, please visit:
- [Repulsive Grizzly](https://github.com/netflix-skunkworks/repulsive-grizzly)
- [Cloudy Kraken](https://github.com/netflix-skunkworks/cloudy-kraken)

Follow us on Twitter: @helloarbit