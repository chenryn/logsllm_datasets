the average of the times required to reach a and c.
2. PoP grouping. Using the cleansed CAIDA data, we
group IP addresses into PoPs using a simple nearness
heuristic: IPs within 2.5 ms of each other, within the
same /24 network, and belonging to the same AS are
assigned to a single point-of-presence (PoP). These
grouping rules preserve the AS paths in our topology
and reduce its size signiﬁcantly while still maintaining
meaningful inter-PoP latencies.
The nearness heuristic may result in multiple “edges”
between two PoPs. This occurs when the CAIDA
datasets contain traceroute measurements for multiple
(src, sink) pairs, where src and sink are IP addresses
belonging to the two respective PoPs. To ensure that
only one “edge” exists between PoPs in our model, we
assign the latency of each PoP-level link to be the me-
dian latency over all the (src, sink) links.
1iPlane [27] provides a similar traceroute dataset; we used CAIDA be-
cause, as of this writing, its data was drawn from a wider distribution of
sources and destinations.
2Such inconsistencies likely occur due to jitter and other transient net-
work effects that take place during successive ICMP echo requests belong-
ing to the same traceroute query.
3. Tor relays attachment. We then identify the Tor relays
on the live Tor network whose IP addresses are in the
same /24 network as some PoP in our model. We add
the matching relays to our model, and mark the corre-
sponding PoPs as a “point of interest” (PoI). The use
of PoIs is explained below.
4. Attachment of clients and destinations.
Prior re-
search [13] has identiﬁed popular Tor client and des-
tination ASes. We add clients and destinations to our
model at the PoPs that belong to the popular client and
destination (resp.) ASes, and mark their PoPs as PoIs.
(Note that based on our grouping heuristic, a PoP be-
longs to exactly one AS.)
5. Graph pruning and compaction. To reduce the size
of our model and make it practical for experimenta-
tion, we prune unimportant nodes and edges. First, we
perform All-Pairs-Shortest-Paths over the PoIs (i.e.,
clients, destinations, and relays) and retain only the
nodes and edges that appear on the shortest paths.
Conceptually, this removes the portion of the Inter-
net from our model that does not “participate” in the
live Tor network. Second, we iteratively replace all
segments a ↔ b ↔ c, where b has degree two; if
w(a ↔ b) and w(b ↔ c) are the respective costs of
links a ↔ b and b ↔ c, we remove b from our model
and insert a new edge a ↔ c with cost w(a ↔ c) =
w(a ↔ b) + w(b ↔ c).
The resulting model represents a reduced map of the In-
ternet built directly from traceroute data that contains Tor
relays, clients, and destinations (see Figure 1). We are able
to effectively model 1524 relays in our full topology, which
constitutes a large proportion of the Tor network. While we
were unable to model the full Tor network (since we lacked
the necessary traceroute information), it is worth noting that
the 1524 Tor relays in our graph handle 71.3% of all trafﬁc
on the live network.
Tor bandwidths and rate limits.
To generate a scaled-
down topology that is faithful to the bandwidth distribution
of the live Tor network, we sample router bandwidths from
the live Tor network as follows. We ﬁrst take a list of all
routers in a current Tor consensus and sort the list by the
routers’ observed bandwidths, as reported in each router’s
descriptor. We sample routers uniformly from this sorted
list to select precisely the desired number of routers.3
Since Tor allows router operators to conﬁgure rate
limits using a token bucket rate-limiting mechanism, we
also sample each router’s rate-limiting conﬁgurations (i.e.,
3While we note that this procedure allows us to approximate the band-
width distribution of the live Tor network, it may slightly underestimate
the bandwidths since the live network’s measurements are affected by la-
tencies (in addition to relays’ actual bandwidths).
4
1.
Figure
1524-
relay model of the
Tor network.
Figure 2. 100-relay
model of
the Tor
network. 50 of the
100 relays are ac-
tive during experi-
mentation.
Figure 3. CDF of
bandwidths as re-
ported by the ac-
tual Tor network,
and our 1524- and
50-relay models.
Figure 4. Histogram
of relays’ AS mem-
bership
the
live Tor network
and our 1524-relay
model.
for
the BandwidthRate and BandwidthBurst options),
which are also advertised within each router’s descriptor.
Lastly, it is necessary to conﬁgure the directory authori-
ties in the emulated network to advertise the correct band-
width weights for each router. These weights ensure that
clients select routers in the proper proportions. As de-
scribed in Section 2, the live Tor network uses a set of Band-
width Authorities to measure and compute these bandwidth
weights.
In our emulated network, we take a more sim-
ple approach: Each router is conﬁgured with an estimated
bandwidth capacity according to the observed bandwidth
value given in its live descriptor. The emulated directories
then use these observed bandwidth values to compute a set
of bandwidth weights to be used by clients for router selec-
tion in our subsequent experiments.
Client and server conﬁgurations. We assign unlimited
bandwidths to the clients and server PoIs in our models so
that they do not create bottlenecks. Although this may be
slightly unrealistic, we note that except for very bandwidth-
limited clients, performance bottlenecks occur in the Tor
network itself, not at the sender or receiver. The “last-mile”
latencies for servers and clients are assigned to be the me-
dian latency of the links within the PoP they are attached to,
if available. If not, the latency is set to 10 ms.
We run a single Tor client for each client PoI within
our topology. Each Tor client uses different conﬁguration
options depending on the selection strategy being evalu-
ated; however, there are a number of standard conﬁgura-
tion options that we apply for our emulation experiments.
We disable the use of entry guards in emulation4 due to
4As discussed in Section 6.1, each client node in the graph may con-
ceptually represent multiple clients on the live Tor network who share the
same AS. Somewhat counterintuitively, enabling the use of entry guards
thus adds unrealism by modeling the improbable scenario in which the
the scaled down nature of the evaluation environment, the
use of entry guards would impose unrealistic levels of con-
gestion, since all paths would pass through only a small
number of guards. Since guards ﬁx the ﬁrst hop, dis-
abling guards increases the available paths for each selec-
tion strategy similarly. Entry guards are enabled in sim-
ulation. We also use the MaxCircuitDirtiness and
LearnCircuitBuildTimeout parameters to increase the
frequency with which new circuits are requested and to pre-
vent historical data from being used to choose circuits.
Destinations are handled by a single server listening on
all designated destination PoI IP addresses.
Routing. We use shortest path routing to compute the
latency between any two points on our constructed net-
work graph. Existing work has demonstrated that the In-
ternet generally obeys shortest path routing policies, with
some notable exceptions [15]. Using the CAIDA AS Re-
lationship dataset [6], we validate that the resultant routes
obey the valley-free property [16], i.e., that routes do not
traverse from a provider AS down to a customer AS and
back again. This property holds for 80% of the sequences
in most routes; for the remaining sequences, no AS rela-
tionship data are available in the CAIDA dataset and we
are consequently unable to verify whether or not these se-
quences are valley-free. However, since we found no cases
in which our routing heuristic violated the valley-free prop-
erty using the available data, and all links were constructed
using traceroute data (i.e., actual Internet paths), we believe
our routes are largely valley-free.
We produce two models using the above techniques: one
with 1524 relays and another with 100 relays (Figures 1
clients who share the same AS and are represented in the graph by a single
client node all select the identical set of guards.
5
0.00.20.40.60.81.0Bandwidth (KBps)CDF1101001000100000Live Tor Network1524−relay Model50−relay Model02004006008000.000.010.020.030.04AS IndexFraction of Tor relays in an AS●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●Live Tor Network1524−relay Modeland 2, respectively).5 The 1524-relay topology contains ev-
ery relay that could be mapped from the live Tor network.
The 100-relay model was constructed by down-sampling
from the 1524 model, while preserving the bandwidth pro-
ﬁles and relay type (i.e., guard, exit, etc.) distributions from
the larger model. We use the larger model for simulations
of circuit building events (Section 5), and the smaller model
in our emulation environment (which requires a more man-
ageable topology size). Our experimental emulation (Sec-
tion 6) uses 50 of the 100 possible relays to increase the
ratio of clients-to-relays and better approximate the perfor-
mance offered by the live Tor network. As such, we will
refer to it as the 50-relay model.
3.2 Verifying our Topology
We next verify our models by demonstrating that they
share important characteristics with the live Tor network.
Relay types.
Tor biases relay selection in part based on
relay type (e.g., guard, exit, etc.). Since relay selection af-
fects both the performance and anonymity properties of Tor
circuits, to properly evaluate performance and anonymity,
we desire models that reﬂect the same proportions of relay
types as the live Tor network. Table 1 shows that our topolo-
gies reﬂect the numeric distribution of non-exit guards, exit
guards, middle relay, and non-guard exits that occur on the
live Tor network. We reasonably approximate the band-
width handled by those classes of relays in our 1524-relay
model, but see a modest shift in bandwidth capacity from
Exit Guards to Non-Exit Guards in our 50-relay model.
Bandwidth distributions.
Figure 3 plots the cumulative
distributions of bandwidth capacities for relays in the live
Tor network as well as our 1524- and 50-relay models. Ap-
plying the two sample Kolmogorov-Smirnov test (a statisti-
cal measure for comparing the similarity between two em-
pirical distributions), we ﬁnd a Kolmogorov-Smirnov (K-S)
statistic of 0.050 between the 1524-relay model and the live
network, and a K-S statistic of 0.065 between the 50-relay
model and the live network. This strongly indicates that the
bandwidth distributions of our models closely match that of
the live Tor network.
AS distribution.
Tor’s anonymity is affected by the net-
work’s AS topology [13]. An AS that exists both on the
ingress path – between a client and the ﬁrst relay – and
the egress path – between the exit relay and the destina-
tion – can apply known timing attacks [24] to link the two
segments and discover the identities of both the sender and
receiver. To accurately assess the anonymity offered by var-
ious relay selection policies, our models should therefore
5Our topologies are available in GraphML format for download at
https://security.cs.georgetown.edu/lib/ndss2013/
topos.tar.gz.
exhibit AS distributions that closely match that of the live
Tor network.
A histogram of AS memberships for the live network and
our 1524-relay topology is shown in Figure 4. For ease of
presentation, AS numbers have been replaced with indexes,
sorted by the count of constituent relays for the live Tor net-
work. As can be seen from the ﬁgure, our model accurately
reﬂects the live Tor network’s distribution of ASes. Com-
paring against the live Tor network, the K-S statistic for the
1524-relay model is 0.046.
While the AS distribution in the 1524-relay model
closely resembles that of the live Tor network, the 50-relay
model is not particularly representative (here, the K-S statis-
tic is 0.153). This “loss in ﬁdelity” results from the small
size of our 50-relay sample, relative to the number of re-
lays on the live network. We discuss this limitation in more
detail in Section 3.4. However, we note that our security re-
sults (in which we investigate how often an AS appears on
both a circuit’s ingress and egress segments) are based on
simulations over the larger 1524-relay topology (Section 5).
Our performance analyses, which are less dependent on AS
topologies, are conducted using emulation over the 50-relay
model (Section 6).
Geographic diversity.
Figures 5, 6, and 7 respectively
show the global distribution of Tor relays for the full Tor
network, our 1524-relay model, and our 50-relay model.
We use the GeoIP [29] service to map relays to geographic
locations based on their IP addresses. Our down-sampled
set of 1524-relays maintains similar geographic character-
istics to the full set of Tor relays. The 50-relay model used
for emulation unavoidably loses some ﬁdelity due to down-
sampling, but still retains a diverse geographic distribution
that covers sixteen countries.
3.3 Client Behavior and Workloads
To reﬂect realistic workloads, we model two types of
Interactive (also called web) clients repeat a
Tor clients.
fetch-sleep cycle where they access content for ﬁve minutes
and sleep for up to one minute. While in the fetch stage of
this cycle, clients request ﬁles (i.e., “web pages”) between
100 KB and 500 KB in size, which approximates the aver-
age web page size (320 KB) as reported by Google [38].
Between each fetch, clients wait for up to 11 seconds to
simulate the behavior of someone browsing the web (i.e.,
they do not click links continuously, but pause to decide
where to navigate next).
In contrast, bulk clients download continuously, and re-
quest ﬁles between 1 MB and 5 MB in size. Bulk clients
roughly approximate the behavior of ﬁle sharers on the Tor
network. To match existing studies [30] of behavior on the
live Tor network, 3% of the clients are conﬁgured to be bulk;
the remaining 97% are interactive.
6
Network/Model
Live Tor network
1524-relay model
50-relay model
Relays
2642
1524
50
Non-Exit Guards
579 [22%, 40%]
389 [26%, 43%]
13 [26%, 64%]
Exit Guards
239 [9%, 31%]
154 [10%, 31%]
4 [8%, 17%]
Middle
1208 [46%, 18%]
650 [43%, 18%]
22 [44%, 15%]
Non-Guard Exits
616 [23%, 10%]
332 [22%, 9%]
11 [22%, 4%]
Table 1. Distribution of relays in the live Tor network and our 1524- and 50-relay models, by count. The
percentage of the network by count and the percentage of the network by bandwidth are respectively
indicated in brackets.
Figure 5. Geographic distri-
bution of Tor relays in the full
Tor network.
Figure 6. Geographic distri-
bution of Tor relays in our
1524-relay topology.
Figure 7. Geographic distri-
bution of the 50 relays we se-
lect for emulation.
To create workloads that capture the latency of Tor con-
nections, each client additionally runs a low-bandwidth
“echo” client that sends a single Tor cell once a second
through the Tor network.
Our models also include destination nodes, which are the
targets of anonymous communication. They serve HTTP
requests and respond to “echo” messages.
3.4 Limitations
As described above, our goal was to construct models
that accurately represent the live Tor network’s bandwidth,
relay type, geographic, and AS distributions. However, due
to the inherent loss of ﬁdelity due to down-sampling and
the inability to perfectly represent client behavior, our tech-
nique has some limitations: