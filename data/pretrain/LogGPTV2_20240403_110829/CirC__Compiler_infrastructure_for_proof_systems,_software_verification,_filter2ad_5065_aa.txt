title:CirC: Compiler infrastructure for proof systems, software verification,
and more
author:Alex Ozdemir and
Fraser Brown and
Riad S. Wahby
2022 IEEE Symposium on Security and Privacy (SP)
CirC: Compiler infrastructure for proof systems, software veriﬁcation, and more
Alex Ozdemir∗ Fraser Brown∗† Riad S. Wahby∗†
∗Stanford University
†Carnegie Mellon University
2
8
7
3
3
8
9
.
2
2
0
2
.
4
1
2
6
4
P
S
/
9
0
1
1
.
0
1
:
I
O
D
|
E
E
E
I
2
2
0
2
©
0
0
.
1
3
$
/
2
2
/
9
-
6
1
3
1
-
4
5
6
6
-
1
-
8
7
9
|
)
P
S
(
y
c
a
v
i
r
P
d
n
a
y
t
i
r
u
c
e
S
n
o
m
u
i
s
o
p
m
y
S
E
E
E
I
2
2
0
2
Abstract—Cryptographic tools like proof systems, multi-party
computation, and fully homomorphic encryption are usually
applied to computations expressed as systems of arithmetic
constraints. In practice, this means that these applications rely
on compilers from high-level programming languages (like C)
to such constraints. This compilation task is challenging, but
not entirely new: the software veriﬁcation community has a rich
literature on compiling programs to logical constraints (like SAT
or SMT). In this work, we show that building shared compiler
infrastructure for compiling to constraint representations is pos-
sible, because these representations share a common abstrac-
tion: stateless, non-uniform, non-deterministic computations that
we call existentially quantiﬁed circuits, or EQCs. Moreover, we
show that this shared infrastructure is useful, because it allows
compilers for proof systems to beneﬁt from decades of work on
constraint compilation techniques for software veriﬁcation.
To make our approach concrete we create CirC, an infras-
tructure for building compilers to EQCs. CirC makes it easy to
compile to new EQCs: we build support for three, R1CS (used
for proof systems), SMT (used for veriﬁcation and bug-ﬁnding),
and ILP (used for optimization), in ≈2000 LOC. It’s also easy
to extend CirC to support new source languages: we build a
feature-complete compiler for a cryptographic language in one
week and ≈900 LOC, whereas the reference compiler for the
same language took years to write, comprises ≈24000 LOC, and
produces worse-performing output than our compiler. Finally,
CirC enables novel applications that combine multiple EQCs.
For example, we build the ﬁrst pipeline that (1) automatically
identiﬁes bugs in programs, then (2) automatically constructs
cryptographic proofs of the bugs’ existence.
1. Introduction
Cryptographic proof systems allow one entity, a prover,
to construct a short and easily veriﬁed proof that convinces
another entity, a veriﬁer, that the prover knows a witness W
satisfying a relation R(X, W ), for an instance X speciﬁed by
the veriﬁer. Roughly speaking, a proof convinces the veriﬁer
that X corresponds to a true input-output pair for a program
speciﬁed by the relation R; a zero-knowledge proof does so
without revealing W .1 Applications of this paradigm have
seen explosive growth; examples include computing over the
prover’s secret data, as in Zcash [1, 2], and veriﬁably out-
sourcing computation, as in Rollups [3–6].
In most general-purpose proof systems, the relation R must
be reduced to a system of equations or constraints, often in a
format called a rank-1 constraint system (R1CS; §2.2). Writing
a proof about a program’s execution thus requires expressing
faithful execution of the program as a set of constraints. This
has motivated a large body of work on creating compilers from
various high- and low-level languages to constraints, both in
academia [7–11] and in industry [12–18].
Besides proofs, other settings give rise to similar compi-
lation problems. Secure multi-party computation (MPC) [19]
and fully homomorphic encryption (FHE) [20] both support
computation over secrets, and both require a computation to
be expressed as a set of constraints, frequently an arithmetic
or boolean circuit. And compiling to constraints is neither new
nor peculiar to cryptography: the programming languages and
formal methods communities have a long tradition of translat-
ing programs to logical constraints, e.g., Satisﬁability Modulo
Theories [21] (SMT) formulas, to verify properties [22–27],
synthesize new programs [28–30], and more. Further aﬁeld,
researchers also compile to integer linear programs [31, 32]:
a kind of constraint system used for optimization problems.
Compilers to constraints are crucial in all of these appli-
cations, but they are hard to build. For example, Torlak and
Bodik identify compilers to SMT as “the most difﬁcult aspect
of creating solver-aided tools,” taking “years to develop” [26].
As a result, communities that work on constraint compil-
ers have poured enormous effort into building them (§2.5).
Unfortunately, there has been little cross-pollination among
communities, and duplicated efforts within them. Worse, many
research results never escape the academy, largely because
turning a research prototype into a robust, extensible toolchain
is a huge amount of work. Anecdotally, deployed applications
of proofs (e.g., Zcash [1, 2]) eschew compilation in favor
of hand-crafted constraints because, despite years of effort,
no existing software artifact synthesizes research results and
engineering know-how into a compelling case for compilation.
is it possible to create
shared infrastructure for building constraint compilers that
is useful across such disparate applications? In this paper,
we show that the answer is yes! This means that newer ap-
plications like proof systems can leverage decades of insights
from the compilers and veriﬁcation communities. It also means
that future work can build on common infrastructure, avoiding
duplication and promoting use beyond the prototype stage.
Thus, our animating question:
To start, we observe that shared infrastructure is possible in
principle, because all the constraint representations discussed
above can be viewed as instances of the same abstraction: a
class of non-deterministic execution substrates that we call
existentially quantiﬁed circuits, or EQCs.2 EQCs have two
main features that differentiate them from CPUs,
the tar-
gets of traditional compilers. First, EQCs are stateless—they
do not support mutable variables, control ﬂow, memory, or
storage. Second, they admit non-determinism in the form of
existentially quantiﬁed variables. As one example EQC: a
system of rank-1 constraints (R1CS; §2.2) is “executed” by a
cryptographic proof system; an R1CS is a system of equations,
so it is stateless and free of control ﬂow; and a cryptographic
proof establishes ∃W.R(X, W ), so the witness variables in an
R1CS are existentially quantiﬁed.
By leveraging the EQC abstraction, we show that shared
infrastructure for compiling to constraints is possible—and
1. Here, W captures the program’s execution transcript and, in the zero-
knowledge case, any secret inputs provided by the prover.
2. Note that EQCs do not capture digital circuits, which are stateful and
deterministic; thus, we do not consider them in this work. See Section 2.5.
© 2022, Alex Ozdemir. Under license to IEEE.
DOI 10.1109/SP46214.2022.00093
2248
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:58:36 UTC from IEEE Xplore.  Restrictions apply. 
C
...
Rust
C subset
ZKlog
ZoKrates
LLVM IR:
random-access
machine
CirC IR:
state-free, non-uniform,
non-deterministic
computation
x86
...
ARM
SMT Solver
ILP Solver
Proof System
Figure 1. LLVM uses a random-access machine abstraction to make it easy
for new front-ends to target CPUs. CirC uses a non-uniform non-deterministic
state-free abstraction to make it easy to target EQCs.
useful—in practice, for three reasons. First, the process of
compiling from a high-level language to an EQC is similar,
even for very different EQCs. To compile, say, a C pro-
gram to SMT, there is a well-known procedure: explore all
paths through the program (i.e., unroll all loops, consider
all branches) while guarding all state modiﬁcations by the
condition under which the corresponding path is taken [27].
The same procedure is used to compile a program to boolean
circuits for multi-party computation [33] or to R1CS for proof
systems [11, 34]. Since this procedure is largely independent
of the application, sharing compilation infrastructure avoids
duplicated effort. We describe our language-agnostic machin-
ery for turning programs into circuits in Section 3.
Second, EQCs have performance characteristics different
from processors, but similar to other EQCs. As a result, shared
EQC infrastructure can support shared optimizations, whereas
reusing existing infrastructure geared towards CPUs wouldn’t
make sense. As one example, while CPUs support load and
store instructions for memory access, simulating memory in
EQCs (which are state-free) is very expensive: there are ac-
tive lines of research on memory representations and related
optimizations for both software veriﬁcation [35–40] and proof
systems [6, 7, 10, 11, 41, 42]. We show that proof system and
software veriﬁer performance both improve under the same
memory optimizations (and more) in Section 6.
Finally, shared compiler infrastructure unlocks beneﬁts
with few analogs in traditional compilers. In a traditional
compiler, each target CPU supported by the compiler does
essentially the same thing: it executes code. EQCs, in contrast,
often have very different purposes—and shared infrastructure
makes it easy to combine those purposes in ways that enable
new applications. For example, veriﬁcation allows users to
prove that a program has some property (e.g., “contains no
undeﬁned behavior”), while proof systems allow users to prove
facts to one another in spite of mutual distrust (e.g., proving
“I know my password” without revealing it). Combining these
functionalities, we show in Section 7 that our work helps
analysts ﬁnd a bug (using expert hints and an SMT solver)
and then prove the bug’s existence without revealing how to
trigger it (using a proof system). We also demonstrate other
combinations, e.g., optimizing R1CS using an SMT solver.
To make these beneﬁts concrete, we implement an in-
frastructure for building compilers to EQCs, which we call
CirC (“SIR-see”). CirC is analogous to—and inspired by—
LLVM [43], an infrastructure for compiling programs to
machine code. LLVM’s key abstraction is its intermediate
representation, LLVM IR, which captures the computational
model of random-access machines (i.e., CPUs). CirC builds on
a different abstraction (Fig. 1): state-free, non-deterministic,
non-uniform computation, which captures the computational
model of EQCs (§2.1). As in LLVM,
language designers
can write front-ends that compile to CirC-IR; build CirC-IR
analyses, transformations, and optimizations; and create back-
ends that lower from CirC-IR to a given EQC (e.g., R1CS),
allowing them to run the resulting executable (e.g., by feeding
the resulting R1CS to a proof system).
In sum, our contributions are:
• We build CirC, an infrastructure for compiling programs