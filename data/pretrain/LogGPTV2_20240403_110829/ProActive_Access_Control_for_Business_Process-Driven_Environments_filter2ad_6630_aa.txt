title:ProActive Access Control for Business Process-Driven Environments
author:Mathias Kohler and
Andreas Schaad
2008 Annual Computer Security Applications Conference
2008 Annual Computer Security Applications Conference
ProActive Access Control for Business Process-driven Environments* 
Mathias Kohler and Andreas Schaad 
SAP Research 
PI:EMAIL 
PI:EMAIL 
*  This  work  was  supported  by  the  German  Federal  Ministry  of 
Education  and  Research  under  grant  01ISF19D  in  the  project 
ORKA and EU FP6 IST Project R4eGov. 
1063-9527/08 $25.00 © 2008 IEEE
1063-9527/08 $25.00 © 2008 IEEE
DOI 10.1109/ACSAC.2008.26
DOI 10.1109/ACSAC.2008.26
143
153
Abstract 
Users  expect  that  systems  react  instantly.  This  is 
specifically  the  case  for  user-centric  workflows  in 
business  process-driven  environments.  In 
today's 
enterprise  systems  most  actions  executed  by  a  user 
have to be checked against the system's access control 
policy  and  require  a  call  to  the  access  control 
component.  Hence,  improving  the  performance  of 
access  control  decisions  will  improve  the  overall 
performance experienced by the end user significantly. 
In this paper we propose a caching strategy which pre-
computes caching entries by exploiting the fact that the 
executions  of  business  processes  are  based  on  the 
execution of actions in a predefined order. We propose 
an accompanying architecture and present the results 
of our conducted benchmark. 
1. Introduction 
Short  response  times  for  user  interactions  are  of 
elementary relevance. Users expect that a system reacts 
instantly  on  their  input.  System  response  times  up  to 
0.1  seconds  of  delay  are  perceived  as  direct 
interactions  with  the  system.  Times  above  this  value 
are already recognized by the user as interruption [3]. 
In business process-driven environments fast response 
times  are  required  when  a  user  wants  to  claim  a  new 
task, when she wants to perform the task she claimed, 
or  whenever  she  wants  to  execute  any  process 
management interactions within the workflow system. 
As  important  as  it  is  to  achieve  optimized  response 
times  for  the  overall  system,  we  equally  have  to 
consider  design  and  implementation  of  each  single 
component  which  may 
impact  performance  with 
respect  to  the  complete  system.  In  today's  large 
enterprise  systems,  most  actions  executed  by  a  user 
have to be checked against the system's access control 
in 
to 
policy.  Thus,  in  today's  systems  most  calls  to  basic 
functions  require  a  call 
the  access  control 
component.  Therefore,  improving  the  performance  of 
evaluating  access  control  decisions  will  significantly 
improve  the  overall  performance  experienced  by  the 
end user. 
One solution for improving the performance of the 
access  control  evaluation  process  is  caching.  A  naïve 
caching  approach  for  role-based  systems  is  to  store 
access  control  decision  responses  and  reuse  them 
whenever an identical access decision request occurs. 
The  caching  strategy  presented 
this  paper 
exploits  the  fact  that  the  executions  of  business 
processes  are  based  on  the  execution  of  actions  in  a 
predefined  order.  We  take  advantage  of  this  fact  and 
evaluate relevant access decision responses upfront for 
immediate  subsequent  actions  of  a  currently  executed 
process.  The  advantage  is  that  the  cache  with  pre-
computed  entries  contains  exactly  those  entries  most 
likely to be needed next.  
Our approach is to define dependency relations that 
specify the relation between events of executed actions 
in a business process system  and the access decisions 
which can be pre-computed given such an event. These 
dependency  relations  are  the  basis  for  pre-evaluating 
exactly  those  access  responses  needed  during  the 
ongoing  execution  of  the  process.  The  cache  will 
contain exactly those entries which will potentially be 
needed next, such that we expect a high cache hit rate 
and  hence  a  great  potential  to  decrease  the  response 
time compared to regular access decision evaluations.  
State  of  the  art  caching  techniques  for  access 
control  solutions  are  only  supporting  static  policies, 
i.e., policies that do not depend on context information. 
Especially  in  the  area  of  business  process  executions, 
dynamic constraint types [4] such as separation of duty 
or  cardinality  constrains  come 
into  play.  Such 
constraint  types  rely  on  dynamic  context  information 
(such  as  the  user's  history  of  performed  tasks,  or  the 
current time). 
Our approach to cache decision responses considers 
the  before  mentioned  constraint  types  which  rely  on 
dynamic  context  information.  We  provide  a  caching 
strategy which enables their caching. 
We  implemented  and  benchmarked  our  proposed 
caching  solution  to  analyze  the  effect  of  our  caching 
strategy  as  opposed  to  direct  evaluation.  The  results 
show  a  significant  performance  gain  on  the  caching 
side. 
In this paper our contribution is threefold: First, we 
present a caching strategy for caching policy decisions 
that  supports  dynamic  aspects  of  access  control  (e.g., 
separation of duty).  
Second,  we  present  a  heuristic  for  pre-computing 
cache  entries  based  on  abstract  (business)  process 
models  which,  for  example,  allow  improving  the 
overall response time for user centric processes. 
Third,  we  show  the  results  of  our  benchmark  tests 
which state a significant performance increase for the 
use of the proposed caching strategy. 
The remainder of this paper is structured as follows. 
In  the  following  section  we  will  give  background 
information  on  business  processes.  In  section  3  our 
proposed caching strategy is introduced, where section 
4  depicts  the  accompanying  architecture.  In  section  5 
we present the results of our conducted benchmark. A 
critical evaluation of our solution is given in Section 6. 
Section 7 concludes the paper. 
2. Background 
Business  processes  "focus  upon  the  production  of 
particular products" [5] realized by a sequence of tasks. 
Processes  may  be  modeled  in  total  or  in  parts  as 
workflows.  
Business  process  executions  may  be 
fully 
automated,  partially  automated,  or  completely  user 
centric. Human based executions comprise the process 
is user centric and, hence, relying on user interactions 
to  perform  the  single  tasks.  The  workflow  system's 
responsibility is the process and task management, but 
a  human  person  is  the  one  eventually  claiming  and 
executing  the  tasks  for  which  she  is  responsible.  We 
concentrate on user centric workflow executions. 
in 
three 
Execution  Layers:  in  the  user  interface  layer,  the 
business  process  layer,  and  the  business  object  layer 
(see Figure 1).  
 Business  process  execution  happens 
The user interface layer provides the interface for a 
user to access the work lists as well as the application 
interfaces which enable the user to perform a task. The 
business  process  layer  is  responsible  for  the  process 
and task  management  which  especially deals  with the 
state control of processes and their tasks. 
144154
User
Worklist
Task Interface
Task
Task
Task
Process Mgmt
Task Mgmt
Workflow Engine
Business Object
Webservice
internal
external
Figure 1: Business Process Execution Layers 
The  business  object  layer  provides  the  access  to 
methods of business objects or externally located web 
services.  Business  objects  provide 
the  basic 
functionality of the system on which the workflow and 
especially  the  task  execution  is  built  on.  Typically 
provided  functionality  are  methods  for  querying  and 
modifying data located back-end systems. 
2.1 Process Layer 
We present process and task life cycles on basis of 
the  models  presented  in  [6],  mainly  concentrating  on 
those stages relevant for our caching strategy. 
2.1.1 Business Process Life Cycle 
Figure 2: Process Life Cycle 
Whenever  a  process 
is 
to  be  executed,  an 
independent  process  instance  is  created  based  on  a 
selected  process  definition.  The  states  a  process 
instance  can  adopt  are  Initiated,  Running,  Completed, 
and  Terminated.  Instantiated  is  the  state  after  the 
process  instance  was  created.  Running  reflects  that  at 
least one instance for the  first task of the process has 
been  created  and  assigned  to  a  user.  The  states 
completed  and  terminated  express  equally  that  the 
execution  for  this  process  instance  has  been  finished. 
The difference is that a completed instance reflects all 
the 
They 
reflects 
task  instances  have  been  completed;  a  terminated 
instance 
execution  was 
intentionally  canceled  outside  of  the  ordinary  process 
execution.  Figure  2,  gives  an  overview  of 
the 
mentioned states. 
process 
include 
transitions:  explicit  and 
Every state of the process life cycle can be reached 
through transitions. They transfer the process instance 
from one state to another. We distinguish between two 
types  of 
implicit.  The 
executions of explicit transitions are triggered by user 
createProcess, 
interactions. 
restartProcess,  and  cancelProcess.  CreateProcess 
leads  to  the  state  Initiated  and  is  called  when  a  user 
starts  a  new  process  execution.  A  user  may  also  call 
restartProcess  or  cancelProcess  which  brings 
the 
process  instance  to  the  states  Initiated  or  Terminated 
respectively.  The  executions  of  implicit  transitions 
completeProcess. 
include 
StartProcess  sets  the  workflow  engine  into  the  state 
Running.  It  is  implicitly  called  when  the  first  task 
instance of a process is created and assigned to a user. 
CompleteProcess is implicitly called as soon as all task 
instances for the current process instance are finished. 
startProcess 
Obviously,  if  users  are  involved  to  invoke  state 
transitions, there is at least the question whether these 
users are allowed to initiate the state change. Each of 
the user driven transitions described above is required 
to  be  controlled  by  an  access  control  mechanism. 
CreateProcess  should  only  be  called  by  users  which 
have the permission to start it. A purchase order may, 
for  instance,  only  be  started  by  users  from  the  sales 
department.  CancelProcess  or  restartProcess  may,  for 
instance,  only  be  initiated  by  administrators  or  the 
users who originally started the process.  
and 
Similar constraints also apply for the task life cycle 
which we will show next. 
2.1.2 Task Life Cycle 
Figure 3: Task Life Cycle 
The  task  life  cycle  comprises  the  states Active/Not 
Assigned,  Active/Assigned,  and  Completed.  This  life 
cycle  corresponds  to  user  centric  task  execution.  For 
automated tasks, obviously the differentiation between 
assigned  and  not  assigned  can  be  neglected.  A  task 
instance  is  immediately  in  state  Active/Not  Assigned 
when  created.  If  a  user  decides  to  claim  the  task,  the 
transition claimTask is called and the user is assigned 
145155
to  the  task.  An  access  control  check  verifies  the 
security policy that allows the action accordingly.  
A  user  can  withdraw  from  a  task  by  calling  the 
method revokeTask; the task's state returns to the state 
Active/Not Assigned. In cases where revoking a task is 
not allowed, an access control check prevents the user 
from  revoking  the  task.  When  the  task  is  finished, 
endTask  is  called.    An  access  control  check  at  this 
stage checks that, for instance, a preset processing time 
is not exceeded.  
2.2 User Interface Layer 
The  user  interface  layer  provides  two  types  of 
interfaces  for  process  execution.  One  is  for  process 
management, the other serves as input mask for single 
task executions.  
The  interface  for  process  management  comprises 
the possibilities to start a new process, cancel or restart 
a running process as  well as  to handle task instances. 
Before  a  user  can  start  working  on  a  task  she  must 
claim  the  task.  All  tasks  available  to  be  claimed  are 
listed in a General Worklist (GWL). The user opens the 
GWL and claims the task(s) she wants to perform next.  
Of course, the GWL should only display those tasks 
a user is actually allowed to claim (which are usually 
only a fraction of the total number of tasks active in a 
system). For this reason, for each task instance created 
in  the  system  a  potential  list  of  owners  is  generated. 
This list is created based the roles a user must possess 
to  perform  the  task  (RBAC,  [13]).  Fact  is  with  only 
considering  roles  (rather  than  also  other  types  of 
constraints,  e.g.,  SoD)  the  user  might  get  displayed 
tasks  which  she  still  cannot  claim.  Hence,  whenever 
the  GWL  is  displayed  a  second  access  control  query 
checks  for  every  task  instance  in  the  list  whether  it 
could  be  claimed  by  the  user.  Especially  for  such 