# Intigriti XSS Challenge
Intigriti发布了一个有趣的小XSS挑战，它要求创建一个特殊的URL，既可以用来分配iframe的src，也可以发送到一个eval调用来弹出一个警报（document.domain），这是挑战的目标。但是我们如何实现？让我们回到开始，一步步分析。
注意：最终漏洞仅适用于Chrome，因此如果您想要跟进，我建议您使用Chrome。
主要代码：
      const url = new URL(decodeURIComponent(document.location.hash.substr(1))).href.replace(/script|/gi, "forbidden");#document.location.hash打印出‘#’后的内容
      const iframe = document.createElement("iframe"); iframe.src = url; document.body.appendChild(iframe);
      iframe.onload = function(){ window.addEventListener("message", executeCtx, false);}
      function executeCtx(e) {
        if(e.source == iframe.contentWindow){
          e.data.location = window.location;
          Object.assign(window, e.data);
          eval(url);
        }
      }
## 分析
  1. 代码获取hash当前页面的url（＃后面的任何内容），从中解码URL实体，然后用字符串“forbidden”替换“script”，“”的任何实例。结果分配给url变量
  2. iframe是在当前页面创建，其src是url刚刚创建，有效地加载一个URL到iframe
  3. 当iframe完成加载时，我们开始监听message事件并executeCtx在提出时甚至调用
  4. 该executeCtx功能已定义:
    * 该功能确保事件来自 iframe
    * 本次活动的有效载荷的location属性写入当前windows的location，大概是为了再次保护重定向另一个URL
    * 有效载荷对象中的每个属性都分配给window带有Object.assign(window, e.data)行（这意味着我发送的任何内容executeCtx都将在window...中定义...非常有趣）
    * url变量被eval
阅读完该代码后，我的第一个问题是：`message`事件是什么？事实证明，有一个用于跨源通信的API
`window.postMessage`，它允许您将对象发送给收听该`message`事件的任何人。
## 一步一步的利用
绕过过滤，尝试利用base64  
for
``，我得到了我的`alert！`但是`alert(document.domain)`从内部不起作用，iframe因为它是一个数据URL，并且没有域。我们有一个alert盒子，但我想从外面弹出它，所以我远远没有结束。
Posting a message to the parent window
我们的目标是执行`eval（url）`，我现在需要去post一个message从而执行`executeCtx`函数。所以我尝试刚了解到的这个api并使用以下脚本：``，`postMessage`函数的第二个参数是目标源，我明白使用`'*'`是一个坏的尝试，因为它允许任何人可以截断我的message但是我并不在意,毕竟这只是个挑战，所以结果就是构造了如下的url：
>
> 
啥都没有。我在`executeCtx`下了断点但似乎没有命中。让我们回到[MDN](https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage)了解`postMessage`函数是如何调用的
    targetWindow.postMessage(message, targetOrigin, [transfer]);
    targetWindow
    A reference to the window that will receive the message. Methods for obtaining such a reference include:
    - window.open (to spawn a new window and then reference it),
    - window.opener (to reference the window that spawned this one),
    - HTMLIFrameElement.contentWindow (to reference an embedded ), or
    - window.frames + an index value (named or numeric).
所以`postMessage`必须在window能够接收message的情况下被调用。于是调整我们的payload：``。我想要message能够被主视窗接收，所以`iframe`就是`windows.parent`，新的url如下：
>
> 
好的！现在我得到了一个来自`executeCtx`的js错误
    (index):31 Uncaught TypeError: Failed to set an indexed property on 'Window': Index property setter is not supported.
        at Function.assign ()
        at executeCtx ((index):31)
这是因为数据是一个字符串所以我们遇到了`Object.assign(window,
e.data);`问题。让我们先发送一个空对象。payload如下：``，转换为url如下：
>
> 
结果是`Uncaught SyntaxError: Unexpected end of
input`由`eval(url)`这一行抛出。所以如下的值`data:text/html;base64,PHNjcmlwdD53aW5kb3cucGFyZW50LnBvc3RNZXNzYWdlKHt9LCAiKiIpPC9zY3JpcHQ+`是无法去解析url变量中的有效js。
## 将url转为js
现在我们的目标是让`eval(url)`解析有效的js（还没到思考xss的时候）。我知道有很多东西都能作为有效的js所以我跳出这个挑战尝试运行：`eval('data:text/html;base64,PHNjcmlwdD53aW5kb3cucGFyZW50LnBvc3RNZXNzYWdlKHt9LCAiKiIpPC9zY3JpcHQ+')`在我的控制台。如期望一样发生了相同的错误。“Unexpected
end of input”
意味着解析器期望另一个token但已经到达了字符串的末尾。我的url是以`+`结束，对于JS的表达式而言它没有什么实际意义，所以让我们将他剔除。这会让我们的base64字符串无效但我们之后会回到这个地方
    eval('data:text/html;base64,PHNjcmlwdD53aW5kb3cucGFyZW50LnBvc3RNZXNzYWdlKHt9LCAiKiIpPC9zY3JpcHQ')
    VM42:1 Uncaught ReferenceError: text is not defined
        at eval (eval at  ((index):1), :1:6)
        at :1:1
什么？`text` is not defined？起先我不知道`text`来自于哪儿，但我回看的时候。。。好吧。然后我令`text=1`再次执行`eval`
    > text = 1
    1
    > eval('data:text/html;base64,PHNjcmlwdD53aW5kb3cucGFyZW50LnBvc3RNZXNzYWdlKHt9LCAiKiIpPC9zY3JpcHQ')
    VM70:1 Uncaught ReferenceError: html is not defined
        at eval (eval at  ((index):1), :1:11)
        at :1:1
哦！`html`？对了！url未带`+`结束是一个有效的JS。还是不懂？下面是url缩进之后：
> data: // a label for a goto
>
> text/html; // divides the variable text by the variable html
>
> base64,PHNjcmlwdD53aW5kb3cucGFyZW50LnBvc3RNZXNzYWdlKHt9LCAiKiIpPC9zY3JpcHQ
> // evalutes the base64 variable and the
> PHNjcmlwdD53aW5kb3cucGFyZW50LnBvc3RNZXNzYWdlKHt9LCAiKiIpPC9zY3JpcHQ variable
> then returns the latter (see , operator)
它肯定不是连贯的代码，但它是有效的JavaScript代码。字符串末尾的`+`只是一个简单的base64组件。我不断改进我的payload，只要遇到`+`则将他丢进垃圾桶直到以字母为结尾的base64编码能够是他成为有效的变量名
## 最后考虑XSS
所以如何让`eval`执行js呢，如何放入`alert(document.domain)`？我们回到[MDN](https://developer.mozilla.org/)了解data协议并寻找哪里能放入我的`alert`
    data:[][;base64],
    The mediatype is a MIME type string, such as 'image/jpeg' for a JPEG image file. If omitted, defaults to text/plain;charset=US-ASCII
`; charset = US-ASCII`引起了我的注意。也许我可以把我的有效载荷放在那里？它甚至看起来像一个JavaScript变量赋值！所以我在我的控制台中尝试这个
    > text = 1
    1
    > html = 1
    1
    > eval('data:text/html;charset=alert(1);base64,whatever')
    Uncaught ReferenceError: base64 is not defined
        at eval (eval at  ((index):1), :1:33)
        at :1:1
是的！`alert`成功pop了！虽然它抱怨base64没有被定义但是alert成功了那么又何必在意呢？是时候转向网站了！我更改我的payload为`hi intigriti`记住`Object.assign(window,
e.data)`这行将携带我post的message从而对`text`和`html`变量进行定义（我定义了base64但那不重要），末尾的`hi
intigriti`可以逃离base64编码造成的末尾`+`存在。  
于是url变为：
>
> 
但是。。。并没有奏效  
data URLs最棒的一点就是你可以将他们放在你的地址栏然后查看结果，这一data URL：
>
> data:text/html;charset=alert(1);base64,PHNjcmlwdD53aW5kb3cucGFyZW50LnBvc3RNZXNzYWdlKHt0ZXh0OjEsIGh0bWw6MSwgYmFzZTY0OjF9LCAiKiIpPC9zY3JpcHQ+aGkgaW50aWdyaXRp
回显的信息是“This site can’t be reached”，研究了一阵我发现`alert(1)`的括号搞砸了这一切
## 最后一步
我花了大量的时间努力寻求不需要括号去调用函数的可替代方式直到我发现或许我并不需要`charset=`，或许移除它就能绕过破坏我url的字符验证。现在尝试：
>
> 
`alert(1)`成功了！，最后稍微调整一下
>
> 
**注意**
：早上我升级了我的chrome，上述的方法100%不奏效了。我并没有额外的测试但我认为是因为`iframe`是在`message`事件监听被启用前调用的。所以添加一个`setTimeout`去延迟`postMessage`调用可能会修复这个问题，这一建议由[@ephreet](https://twitter.com/ephreet1/status/1124220724770738176).提出
## 总结
作为xss挑战，这有大量的代码审计。下面就是我的主要步骤：
  * 理解代码是如何运行的将有很大帮助
  * 不要过多关注目标，而是要有计划的针对中间步骤
  * 当你对要解决的挑战手足无措时不要紧张，解决好每一步，答案便会逐渐清晰
谢谢[@intigriti](https://twitter.com/intigriti/)我玩得很开心！恭喜大家，祝你们好运！