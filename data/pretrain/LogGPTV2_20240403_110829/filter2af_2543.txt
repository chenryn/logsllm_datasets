# 360 Marvel Team云系统漏洞第六弹 - CVE-2016-8632分析

## 译文声明
本文为翻译文章，原文来源：安全客。译文仅供参考，具体内容及含义以原文为准。

## 作者信息
- **作者**：[360MarvelTeam](http://bobao.360.cn/member/contribute?uid=2515404154)
- **稿费**：600RMB（欢迎投稿！）
- **投稿方式**：发送邮件至 [linwei#360.cn](mailto:linwei#360.cn)，或访问 [网页版](http://bobao.360.cn/contribute/index) 在线投稿。

## 前言
360 Marvel Team 致力于云安全领域的技术研究，在最近的Pwnfest比赛中成功破解了VMware Workstation，实现了虚拟机逃逸攻击的全球首秀。团队在QEMU、KVM、Xen、Docker、VMware Workstation、VMware ESXi以及Linux内核中积累了丰富的漏洞挖掘和利用经验。Linux内核漏洞不仅能在虚拟机逃逸后夺取宿主机最高权限，还能使黑客完成Docker容器攻击，是云系统漏洞攻击链中的关键一环。本文将分享关于最新公开的Linux内核漏洞的研究成果。

## 招聘信息
360 Marvel Team 正在招聘 **漏洞挖掘 & 利用 & Linux内核及应用层开发** 岗位，感兴趣的同学请将简历发送至 [linwei#360.cn](mailto:linwei#360.cn)。

## 0x0 序
TIPC（透明进程间通信协议）是一种用于进程间通信的网络协议，最初为集群间通信设计。自Linux kernel 2.6.16版本起开始支持TIPC协议，并在VxWorks和Solaris操作系统中广泛应用。然而，TIPC处理数据切包的代码存在一处堆溢出，可能导致特权提升。详细漏洞说明见：[CVE-2016-8632](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-8632)。

## 0x1 漏洞细节
当创建一个TIPC协议的socket后，可以通过多种方式触发`tipc_msg_build`函数。例如，用户态调用`connect`时，TIPC协议栈根据当前socket的状态，需要发送第一个SYN包，此时会调用`tipc_msg_build`来构造TIPC协议头（长度可变）。以下是相关变量的解释：

1. `msz`：TIPC协议头长度 + 实际发送数据长度。
2. `pktmax`：上层函数传递下来的TIPC协议设置的MTU，该值可从设备MTU继承。
3. `skb`：socket buffer数据结构，包含一个`char *`类型的`data`指针，指向实际缓冲区。
4. `dsz`：附加数据的长度。
5. `mhsz`：TIPC协议头长度，根据用户态传递的目标地址类型不同而不同。

如果要发送的数据长度小于设备允许的最大传输单元，则数据包不需要切包，可以直接发送；否则，数据包按`pktmax`长度切开，依次发送。函数根据`pktmax`创建socket buffer，然后进行两次`skb_copy_to_linear_data`操作。每次`memcpy`的长度为`INT_H_SIZE + mhsz`：

- `INT_H_SIZE`固定为40字节。
- `mhsz`根据目标地址类型不同，可取24、32、40、44、60字节。

在POC中设置`mhsz`为32字节，那么两次`memcpy`共拷贝72字节。函数在`memcpy`前并未检查`pktmax`（MTU）是否小于`INT_H_SIZE + mhsz`，且回溯调用堆栈也未发现内核检查过MTU的值。因此，若在内核其他地方创建一个MTU小于72字节的值，即可造成堆溢出。

接下来，我们需要找到TIPC如何设置MTU，以确定可用的最小MTU值。内核在调用`tipc_msg_build`前会根据目的地址类型不同，调用两种方法获取MTU值，但最终都是取TIPC link上的MTU值。TIPC link是在整个TIPC网络出现两个以上节点后，由内核自动建立的。当TIPC link建立后，`n->links`结构的`mtu`属性被赋值，减去40字节的头部大小，但仍没有检查合法的最小MTU大小。

`tipc_link_mtu()`的值由`tipc_link_set_mtu()`设置，而`tipc_link_set_mtu()`在整个4.9-rc4内核代码中仅有一处调用，即在`tipc_bcbase_select_primary()`中。这里可以清楚地看到MTU值来自`tipc_bearer_mtu()`。整个内核只有两处修改过TIPC bearer的值：一是当TIPC网络建立后，内核调用`tipc_enable_l2_media()`；另一处是当我们在shell中使用类似`ifconfig eth0 mtu 60 up`命令修改网络设备MTU时，内核调用`tipc_l2_device_event()`。

通常情况下，网络设备的MTU值为1500，但具体范围取决于不同的网卡驱动。例如，我的网卡驱动e1000支持的最小MTU为46。以下是一个漏洞触发过程示例：

1. 将设备MTU设置为60（大部分网卡驱动最小支持MTU为60）。
2. 创建TIPC网络，当TIPC link建立成功后，内核调用`tipc_node_link_up()`。
3. `tipc_node_link_up()`将60减去40，使得`n->links[bearer_id].mtu = 20`。
4. 调用`connect`，触发`tipc_msg_build`，由于最小的TIPC协议头长度为24，需要切包。
5. 以20字节申请socket buffer。
6. 第一次调用`skb_copy_to_linear_data(skb, &pkthdr, INT_H_SIZE)`，溢出40 - 20字节。
7. 第二次调用`skb_copy_to_linear_data_offset(skb, INT_H_SIZE, mhdr, mhsz)`，再次溢出`mhsz`字节。

为了修改设备MTU，用户需要具备CAP_NET_ADMIN权限，但如果克隆一个具有user_namespace及net_username的进程，则可以轻松修改设备MTU。

## 0x2 漏洞影响
大多数网卡驱动至少可以溢出52字节，合理布局堆空间后，可导致特权提升。受影响的较新内核版本包括：

- Linux kernel 4.9-rc4
- Linux kernel 4.9-rc3
- Linux kernel 4.9
- Linux kernel 4.8.3
- Linux kernel 4.8.1
- Linux kernel 4.8 rc1
- Linux kernel 4.8
- Linux kernel 4.7.9
- Linux kernel 4.7-rc6
- Linux kernel 4.7-rc5
- Redhat Linux 7.2
- S.u.S.E. Linux 7.2
- S.u.S.E. Linux 7.1
- Linux kernel 4.6.3
- Linux kernel 4.6.2

较旧的内核版本尚未测试。

## 0x3 补丁及相关
更多相关信息，请参阅以下链接：
- [360 Marvel Team虚拟化漏洞第一弹 – CVE-2015-6815 漏洞分析](http://blogs.360.cn/blog/360marvelteam%E8%99%9A%E6%8B%9F%E5%8C%96%E6%BC%8F%E6%B4%9E%E7%AC%AC%E4%B8%80%E5%BC%B9-cve-2015-6815-%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/)
- [360 Marvel Team虚拟化漏洞第二弹 – CVE-2015-5279 漏洞分析](http://bobao.360.cn/learning/detail/686.html)
- [360 Marvel Team虚拟化漏洞第三弹 – CVE-2015-7504 漏洞分析（含高清视频）](http://bobao.360.cn/learning/detail/2423.html)
- [360 Marvel Team虚拟化漏洞第四弹 – CVE-2015-8567 漏洞分析](http://bobao.360.cn/learning/detail/2537.html)
- [360 Marvel Team虚拟化漏洞第五弹 – CVE-2016-3710 Dark Portal漏洞分析](http://bobao.360.cn/learning/detail/2867.html)