在最简单的形式中，`/etc/exports`{.literal}
文件只指定导出的目录和允许访问它的主机：
``` screen
/exported/directory bob.example.com
```
这里，`bob.example.com`{.literal} 可以挂载 NFS 服务器的
`/exported/directory/`{.literal}。因为在这个示例中没有指定选项，所以 NFS
使用默认选项。
:::
:::
::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
### 重要 {.title}
`/etc/exports`{.literal}
文件的格式要求非常精确，特别是在空格字符的使用方面。需要将导出的文件系统与主机、不同主机间使用空格分隔。但是，除了注释行外，文件中不应该包括其他空格。
例如，下面两行并不具有相同的意义：
``` literallayout
/home bob.example.com(rw)
/home bob.example.com (rw)
```
第一行仅允许来自 `bob.example.com`{.literal} 的用户读写
`/home`{.literal} 目录。第二行允许来自 `bob.example.com`{.literal}
的用户以只读方式挂载目录（默认），而其他用户可以将其挂载为读/写。
:::
#### []{#exporting-nfs-shares_managing-file-systems.html#_default_options}默认选项
导出条目的默认选项有：
::: variablelist
[`ro`{.literal}]{.term}
:   导出的文件系统是只读的。远程主机无法更改文件系统中共享的数据。要允许主机更改文件系统（即读写），指定
    rw 选项。
[`sync`{.literal}]{.term}
:   在将之前的请求所做的更改写入磁盘前，NFS
    服务器不会回复请求。要启用异步写，请指定 `async`{.literal} 选项。
[`wdelay`{.literal}]{.term}
:   如果 NFS 服务器预期另外一个写入请求即将发生，则 NFS
    服务器会延迟写入磁盘。这可以提高性能，因为它可减少不同的写命令访问磁盘的次数，从而减少写开销。要禁用此功能，请指定
    `no_wdelay`{.literal} 选项，该选项仅在指定了默认 sync 选项时才可用。
[`root_squash`{.literal}]{.term}
:   这可以防止远程连接的 root 用户（与本地连接相反）具有 root
    特权；相反，NFS 服务器为他们分配用户 ID
    `nobody`{.literal}。这可以有效地将远程 root
    用户的权限\"挤压\"成最低的本地用户，从而防止在远程服务器上可能的未经授权的写操作。要禁用
    root 挤压，请指定 `no_root_squash`{.literal} 选项。
    要挤压每个远程用户（包括 root 用户），请使用 `all_squash`{.literal}
    选项。要指定 NFS 服务器应该分配给来自特定主机的远程用户的用户和组
    ID，请分别使用 `anonuid`{.literal} 和 `anongid`{.literal}
    选项，如下所示：
    ``` screen
    export host(anonuid=uid,anongid=gid)
    ```
    这里，[*[uid]{.replaceable}*]{.emphasis} 和
    [*[gid]{.replaceable}*]{.emphasis} 分别是用户 ID 号和组 ID
    号。`anonuid`{.literal} 和 `anongid`{.literal}
    选项允许您为要共享的远程 NFS 用户创建特殊的用户和组帐户。
:::
默认情况下，Red Hat Enterprise Linux 下的 NFS
支持访问控制列表(ACL)。要禁用此功能，请在导出文件系统时指定
`no_acl`{.literal} 选项。
#### []{#exporting-nfs-shares_managing-file-systems.html#_default_and_overridden_options}默认和覆盖选项
每个导出的文件系统的默认值都必须被显式覆盖。例如，如果没有指定
`rw`{.literal} 选项，则导出的文件系统将以只读形式共享。以下是
`/etc/exports`{.literal} 中的示例行，其覆盖两个默认选项：
``` screen
/another/exported/directory 192.168.0.3(rw,async)
```
在此示例中，`192.168.0.3`{.literal} 可以以读写形式挂载
`/another/exported/directory/`{.literal}
，并且所有对磁盘的写入都是异步的。
:::
::: section
::: titlepage
## []{#exporting-nfs-shares_managing-file-systems.html#the-exportfs-utility_exporting-nfs-shares}exportfs 工具 {.title}
:::
`exportfs`{.literal} 工具使 root
用户能够有选择地导出或取消导出目录，而无需重启 NFS
服务。给定合适的选项后，`exportfs`{.literal} 工具将导出的文件系统写到
`/var/lib/nfs/xtab`{.literal}。由于 `nfs-mountd`{.literal}
服务在决定访问文件系统的特权时参考 `xtab`{.literal}
文件，所以对导出的文件系统列表的更改会立即生效。
#### []{#exporting-nfs-shares_managing-file-systems.html#_common_exportfs_options}常用的 exportfs 选项
以下是用于 `exportfs`{.literal} 的常用选项列表：
::: variablelist
[`-r`{.literal}]{.term}
:   通过在 `/var/lib/nfs/etab`{.literal} 中构建新的导出列表，将
    `/etc/exports`{.literal} 中列出的所有目录导出。如果对
    `/etc/exports`{.literal}
    做了任何更改，这个选项可以有效地刷新导出列表。
[`-a`{.literal}]{.term}
:   根据哪些其它选项传给了
    `exportfs`{.literal}，将导出或取消导出所有目录。如果没有指定其他选项，`exportfs`{.literal}
    会导出 `/etc/exports`{.literal} 中指定的所有文件系统。
[`-o file-systems`{.literal}]{.term}
:   指定没有在 `/etc/exports`{.literal}
    中列出的要导出的目录。使用要导出的额外文件系统替换
    [*[file-systems]{.replaceable}*]{.emphasis}。这些文件系统的格式化方式必须与
    `/etc/exports`{.literal}
    中指定的方式相同。此选项通常用于在将其永久添加到导出的文件系统列表之前测试导出的文件系统。
[`-i`{.literal}]{.term}
:   忽略 `/etc/exports`{.literal}
    ；只有命令行上指定的选项才会用于定义导出的文件系统。
[`-u`{.literal}]{.term}
:   不导出所有共享目录。命令 `exportfs -ua`{.literal} 可暂停 NFS
    文件共享，同时保持所有 NFS 服务正常运行。要重新启用 NFS 共享，请使用
    `exportfs -r`{.literal}。
[`-v`{.literal}]{.term}
:   详细操作，当执行 `exportfs`{.literal}
    命令时，更详细地显示正在导出的或取消导出的文件系统。
:::
如果没有选项传给 `exportfs`{.literal}
工具，它将显示当前导出的文件系统列表。
::: itemizedlist
**其他资源**
-   [NFS
    主机名格式](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/managing_file_systems/exporting-nfs-shares_managing-file-systems#nfs-host-name-formats_exporting-nfs-shares){.link}
    。
:::
:::
:::
::: section
::: titlepage
# []{#exporting-nfs-shares_managing-file-systems.html#nfs-and-rpcbind_exporting-nfs-shares}NFS 和 rpcbind {.title}
:::
本节解释 NFSv3 所需的 `rpcbind`{.literal} 服务的用途。
`rpcbind`{.literal} 服务将远程过程调用(RPC)服务映射到其侦听的端口。RPC
进程在启动时通知
`rpcbind`{.literal}，注册它们正在侦听的端口以及它们期望提供服务的 RPC
程序号。然后，客户端系统会使用特定的 RPC 程序号联系服务器上的
`rpcbind`{.literal}。`rpcbind`{.literal}
服务将客户端重定向到正确的端口号，这样它就可以与请求的服务进行通信。
由于基于 RPC 的服务依赖 `rpcbind`{.literal}
来与所有传入的客户端请求建立连接，因此 `rpcbind`{.literal}
必须在这些服务启动之前可用。
`rpcbind`{.literal} 的访问控制规则会影响所有基于 RPC
的服务。另外，也可以为每个 NFS RPC 守护进程指定访问控制规则。
::: itemizedlist
**其他资源**
-   `rpc.mountd(8)`{.literal} man page
-   `rpc.statd(8)`{.literal} man page
:::
:::
::: section
::: titlepage
# []{#exporting-nfs-shares_managing-file-systems.html#installing-nfs_exporting-nfs-shares}安装 NFS {.title}
:::
这个过程安装挂载或导出 NFS 共享所需的所有软件包。
::: itemizedlist
**流程**
-   安装 `nfs-utils`{.literal} 软件包：
    ``` screen
    # dnf install nfs-utils
    ```
:::
:::
::: section
::: titlepage
# []{#exporting-nfs-shares_managing-file-systems.html#starting-the-nfs-server_exporting-nfs-shares}启动 NFS 服务器 {.title}
:::
这个步骤描述了如何启动 NFS 服务器,这是导出 NFS 共享所必需的。
::: itemizedlist
**先决条件**
-   对于支持 NFSv3 连接的服务器，`rpcbind`{.literal}
    服务必须处于运行状态。要验证 `rpcbind`{.literal}
    是否处于活动状态，请使用以下命令：
    ``` screen
    $ systemctl status rpcbind
    ```
    如果停止该服务，启动并启用该服务：
    ``` screen
    $ systemctl enable --now rpcbind
    ```
:::
::: itemizedlist
**流程**
-   要启动 NFS 服务器，并使其在引导时自动启动，请使用以下命令：
    ``` screen
    # systemctl enable --now nfs-server
    ```
:::
::: itemizedlist
**其他资源**
-   [配置仅限 NFSv4
    的服务器](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/managing_file_systems/configuring-an-nfsv4-only-server_managing-file-systems){.link}。
:::
:::
::: section
::: titlepage
# []{#exporting-nfs-shares_managing-file-systems.html#troubleshooting-nfs-and-rpcbind_exporting-nfs-shares}NFS 和 rpcbind 故障排除 {.title}
:::
由于 `rpcbind`{.literal} 服务在 RPC
服务和用于与之通信的端口号之间提供协调，因此在排除故障时，使用
`rpcbind`{.literal} 查看当前 RPC 服务的状态非常有用。`rpcinfo`{.literal}
工具显示每个基于 RPC 的服务，以及其端口号、RPC 程序号、版本号和 IP
协议类型（TCP 或 UDP）。
::: orderedlist
**流程**
1.  要确保为 `rpcbind`{.literal} 启用了正确的基于 NFS RPC
    的服务，请使用以下命令：
    ``` screen
    # rpcinfo -p
    ```
    ::: example
    []{#exporting-nfs-shares_managing-file-systems.html#idm139895546792624}
    **例 4.2. rpcinfo -p 命令输出**
    ::: example-contents
    下面是一个这个命令的输出示例：
    ``` screen
       program vers proto   port  service
        100000    4   tcp    111  portmapper
        100000    3   tcp    111  portmapper
        100000    2   tcp    111  portmapper
        100000    4   udp    111  portmapper
        100000    3   udp    111  portmapper
        100000    2   udp    111  portmapper
        100005    1   udp  20048  mountd
        100005    1   tcp  20048  mountd
        100005    2   udp  20048  mountd
        100005    2   tcp  20048  mountd
        100005    3   udp  20048  mountd
        100005    3   tcp  20048  mountd
        100024    1   udp  37769  status
        100024    1   tcp  49349  status
        100003    3   tcp   2049  nfs
        100003    4   tcp   2049  nfs
        100227    3   tcp   2049  nfs_acl
        100021    1   udp  56691  nlockmgr
        100021    3   udp  56691  nlockmgr
        100021    4   udp  56691  nlockmgr
        100021    1   tcp  46193  nlockmgr
        100021    3   tcp  46193  nlockmgr
        100021    4   tcp  46193  nlockmgr
    ```
    :::
    :::
    如果其中一个 NFS 服务没有正确启动，`rpcbind`{.literal}
    将不能将来自客户端的对该服务的 RPC 请求映射到正确的端口。
2.  在很多情况下，如果 NFS 没有出现在 `rpcinfo`{.literal} 输出中，重启
    NFS 会使服务正确使用 `rpcbind`{.literal} 注册，并开始工作：
    ``` screen
    # systemctl restart nfs-server
    ```
:::
::: itemizedlist
**其他资源**
-   [配置仅限 NFSv4
    的服务器](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/managing_file_systems/configuring-an-nfsv4-only-server_managing-file-systems){.link}。
:::
:::
::: section
::: titlepage
# []{#exporting-nfs-shares_managing-file-systems.html#assembly_configuring-the-nfs-server-to-run-behind-a-firewall_exporting-nfs-shares}将 NFS 服务器配置为在防火墙后运行 {.title}
:::
NFS 需要 `rpcbind`{.literal} 服务，该服务为 RPC
服务动态分配端口，并可能导致配置防火墙规则时出现问题。下面的部分描述了如何在防火墙后配置
NFS 版本（如果要支持）：
::: itemizedlist
-   NFSv3
    这包括支持 NFSv3 的任何服务器：
    ::: itemizedlist
    -   NFSv3-only 服务器
    -   支持 NFSv3 和 NFSv4 的服务器
    :::
-   NFSv4-only
:::
::: section
::: titlepage
## []{#exporting-nfs-shares_managing-file-systems.html#proc_configuring-the-nfsv3-enabled-server-to-run-behind-a-firewall_assembly_configuring-the-nfs-server-to-run-behind-a-firewall}将 NFSv3-enabled 服务器配置为在防火墙后运行 {.title}
:::
下面的步骤描述了如何将支持 NFSv3
的服务器配置为在防火墙后运行。这包括支持 NFSv3 和 NFSv4 的 NFSv3-only
服务器和服务器。
::: orderedlist
**流程**
1.  要允许客户端访问防火墙后面的 NFS 共享，请在 NFS
    服务器上运行以下命令来配置防火墙：
    ``` literallayout
    firewall-cmd --permanent --add-service mountd
    firewall-cmd --permanent --add-service rpc-bind
    firewall-cmd --permanent --add-service nfs
    ```
2.  指定 `/etc/nfs.conf`{.literal} 文件中 RPC 服务 `nlockmgr`{.literal}
    使用的端口，如下所示：