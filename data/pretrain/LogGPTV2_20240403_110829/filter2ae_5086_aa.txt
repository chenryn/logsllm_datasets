**Author：Longofo@Knownsec 404 Team**  
**Time: April 27, 2020**  
**Chinese version: **
Fastjson doesn't have a cve number, so it's difficult to find the timeline. At
first,I wrote something slowly. Fortunately, fastjson is open source and there
are hard work records of other security researchers. This article will give
the key updates and vulnerability timelines related to Fastjson and the
vulnerabilities,I will test and explain some of the more classic
vulnerabilities, and give some check payloads and rce payloads.
#### Fastjson Parsing Process
You can refer to [fastjson process analysis](https://paper.seebug.org/994/)
written by @Lucifaer. I will not write it here, and it will occupy a lot of
space. In this article said that fastjson has byte code generated using ASM.
Since many classes are not native in actual use, fastjson
serializes/deserializes most classes will be processed by ASM. You can use
idea to save byte files during dynamic debugging:
The inserted code is：
    BufferedOutputStream bos = null;
    FileOutputStream fos = null;
    File file = null;
    String filePath = "F:/java/javaproject/fastjsonsrc/target/classes/" + packageName.replace(".","/") + "/";
    try {
        File dir = new File(filePath);
        if (!dir.exists()) {
            dir.mkdirs();
        }
        file = new File(filePath + className + ".class");
        fos = new FileOutputStream(file);
        bos = new BufferedOutputStream(fos);
        bos.write(code);
    } catch (Exception e) {
        e.printStackTrace();
    } finally {
        if (bos != null) {
            try {
                bos.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        if (fos != null) {
            try {
                fos.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
Generated class：
But this class cannot be used for debugging, because the code generated by ASM
in fastjson does not have linenumber, trace and other information.However, it
should be feasible to generate bytecode by rewriting part of the code in the
Expression window.(I have not tested it. If you have enough time or interest,
you can see how ASM generates bytecode that can be used for debugging).
#### Fastjson Demo Test
First test the following example with multiple versions:
    //User.java
    package com.longofo.test;
    public class User {
        private String name; //Private properties, with getter and setter methods
        private int age; //Private properties, with getter and setter methods
        private boolean flag; //Private properties, with is and setter methods
        public String sex; //Public properties, no getter, setter methods
        private String address; //Private properties, no getter, setter methods
        public User() {
            System.out.println("call User default Constructor");
        }
        public String getName() {
            System.out.println("call User getName");
            return name;
        }
        public void setName(String name) {
            System.out.println("call User setName");
            this.name = name;
        }
        public int getAge() {
            System.out.println("call User getAge");
            return age;
        }
        public void setAge(int age) {
            System.out.println("call User setAge");
            this.age = age;
        }
        public boolean isFlag() {
            System.out.println("call User isFlag");
            return flag;
        }
        public void setFlag(boolean flag) {
            System.out.println("call User setFlag");
            this.flag = flag;
        }
        @Override
        public String toString() {
            return "User{" +
                    "name='" + name + '\'' +
                    ", age=" + age +
                    ", flag=" + flag +
                    ", sex='" + sex + '\'' +
                    ", address='" + address + '\'' +
                    '}';
        }
    }
    package com.longofo.test;
    import com.alibaba.fastjson.JSON;
    public class Test1 {
        public static void main(String[] args) {
            //Serialization
            String serializedStr = "{\"@type\":\"com.longofo.test.User\",\"name\":\"lala\",\"age\":11, \"flag\": true,\"sex\":\"boy\",\"address\":\"china\"}";//
            System.out.println("serializedStr=" + serializedStr);
            System.out.println("-----------------------------------------------\n\n");
            //Deserialize through the parse method and return a JSONObject
            System.out.println("JSON.parse(serializedStr)：");
            Object obj1 = JSON.parse(serializedStr);
            System.out.println("parse deserialize object name:" + obj1.getClass().getName());
            System.out.println("parse deserialization：" + obj1);
            System.out.println("-----------------------------------------------\n");
            //Through parseObject, no class is specified, a JSONObject is returned
            System.out.println("JSON.parseObject(serializedStr)：");
            Object obj2 = JSON.parseObject(serializedStr);
            System.out.println("parseObject deserialize object name:" + obj2.getClass().getName());
            System.out.println("parseObject deserialization:" + obj2);
            System.out.println("-----------------------------------------------\n");
            //Through parseObject, specified as object.class
            System.out.println("JSON.parseObject(serializedStr, Object.class)：");
            Object obj3 = JSON.parseObject(serializedStr, Object.class);
            System.out.println("parseObject deserialize object name:" + obj3.getClass().getName());
            System.out.println("parseObject deserialization:" + obj3);
            System.out.println("-----------------------------------------------\n");
            //Through parseObject, specified as User.class
            System.out.println("JSON.parseObject(serializedStr, User.class)：");
            Object obj4 = JSON.parseObject(serializedStr, User.class);
            System.out.println("parseObject deserialize object name:" + obj4.getClass().getName());
            System.out.println("parseObject deserialization:" + obj4);
            System.out.println("-----------------------------------------------\n");
        }
    }
**Tips** :
  * @Type here corresponds to the commonly autotype function , simply understood that fastjson will automatically map the value of `key: value` of json to the class corresponding to @type.
  * Several methods of the sample User class are relatively common methods, the naming and return values are all conventionally written in accordance with the requirements of the bean, so some special calls in the following sample test will not be covered, but in the vulnerability analysis , We can see some special cases.
  * Parse uses four types of writing, all of which can cause harm (however, whether it can actually be used depends on the version and whether the user has turned on certain configuration switches, see later).
  * The sample tests all use jdk8u102, and the code is the source code test. It mainly uses samples to explain the process of autotype default opening, the appearance of checkautotype, and the version of the black list and white list from which it appears and enhancement methods.
##### 1.1.157 Test
This should be the original version (the earliest tag is this), the result:
    serializedStr={"@type":"com.longofo.test.User","name":"lala","age":11, "flag": true,"sex":"boy","address":"china"}
    -----------------------------------------------    
    JSON.parse(serializedStr)：
    call User default Constructor
    call User setName
    call User setAge
    call User setFlag
    parse deserialize object name:com.longofo.test.User
    parse deserialization：User{name='lala', age=11, flag=true, sex='boy', address='null'}
    -----------------------------------------------    
    JSON.parseObject(serializedStr)：
    call User default Constructor
    call User setName
    call User setAge
    call User setFlag
    call User getAge
    call User isFlag
    call User getName
    parseObject deserialize object name:com.alibaba.fastjson.JSONObject
    parseObject deserialization:{"flag":true,"sex":"boy","name":"lala","age":11}
    -----------------------------------------------    
    JSON.parseObject(serializedStr, Object.class)：
    call User default Constructor
    call User setName
    call User setAge
    call User setFlag
    parseObject deserialize object name:com.longofo.test.User
    parseObject deserialization:User{name='lala', age=11, flag=true, sex='boy', address='null'}
    -----------------------------------------------    
    JSON.parseObject(serializedStr, User.class)：
    call User default Constructor
    call User setName
    call User setAge
    call User setFlag
    parseObject deserialize object name:com.longofo.test.User
    parseObject deserialization:User{name='lala', age=11, flag=true, sex='boy', address='null'}
    -----------------------------------------------
Below is a brief explanation of each result.
###### JSON.parse(serializedStr)
    JSON.parse(serializedStr)：
    call User default Constructor
    call User setName
    call User setAge
    call User setFlag
    parse deserialize object name:com.longofo.test.User
    parse deserialization：User{name='lala', age=11, flag=true, sex='boy', address='null'}
When @type is specified, the default constructor of the User class is
automatically called. The setter method(setAge, setName) corresponding to the
User class is the final result. It is an instance of the User class, but it is
worth noting that the public sex is successfully assigned,while private
address is not successfully assigned, but after 1.2.22, 1.1.54.android, a
SupportNonPublicField feature is added. If this feature used, private address
can be successfully assigned even without setter, getter, this feature is also
related to a later vulnerability. Pay attention to the order of the default
constructor and setter method. The default constructor comes first. At this
time, the property value has not been assigned, so even though there are
dangerous methods in the default constructor, the harmful value has not been
passed in.The default constructor is logical and will not be a method of
exploit, but for the inner class, the outer class first initializes some of
its own attribute values, but the inner class default constructor uses some
values of the attributes of the parent class, which may still cause harm.
It can be seen that the autotype function has been available since the
original version, and autotype is enabled by default. At the same time, there
is no blacklist in the ParserConfig class.
###### JSON.parseObject(serializedStr)
    JSON.parseObject(serializedStr)：
    call User default Constructor
    call User setName
    call User setAge
    call User setFlag
    call User getAge
    call User isFlag
    call User getName
    parseObject deserialize object name:com.alibaba.fastjson.JSONObject
    parseObject deserializationflag":true,"sex":"boy","name":"lala","age":11}
When @type is specified, the default constructor of the User class is