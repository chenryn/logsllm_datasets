such attacks is the fact that a bounds violation does not
automatically crash the program; rather, it invokes the registered
#BR exception handler. The exception handler responds to the
attack by forcing re-randomization, leaving BROP attacks on
the same footing as JIT-ROP attacks.
In our experiments, we ran 100,000 runs of the experimental
methodology (for each benchmark), and then measured the
mean chance of success at crafting payloads of increasing
lengths. This evaluates the security of O-CFI against disclosure
attacks. The results are reported in Table VI.
Disclosure attacks in our experiments are unsuccessful at
chaining more than four gadgets from any of the binaries.
Moreover, the chance of chaining even a four-gadget payload
is about 0.01% on average—a strong indicator that O-CFI
offers powerful probabilistic protection against such attacks.
2) Crafting Practical Attacks: Mona is capable of building
practical gadget chains based on a heuristic search. In particular,
it can look for the gadgets necessary for attackers to (i) gain
execute permissions, (ii) disable DEP, and (iii) allocate a new
page with execute permissions.
To evaluate security against a more practical disclosure
attack, we leveraged this capability, and tried to build chains
using gadgets from both the original and rewritten binaries. For
the rewritten binaries, we ﬁltered any chains that resulted in
bounds range exceptions.
Mona found partial chains (i.e., chains that incorporate
some additional gadgets from dynamically linked modules) for
all original binaries, and found full chains for some. However,
no complete or partial chains could be found for any of the
Binary
Program
gzip
twolf
vpr
gap
equake
art
mcf
bzip2
parser
median
3
6
9
3.11
2.70
2.75
2.11
2.90
3.33
3.37
2.87
2.87
4.34
3.61
4.17
2.57
5.73
5.22
6.09
4.38
4.65
5.01
4.42
5.54
3.05
6.93
6.80
6.86
6.32
5.38
Nexus Capacity
15
12
5.99
5.51
6.95
3.49
10.47
8.60
9.58
7.43
6.05
6.96
6.82
9.23
3.94
12.94
13.55
12.63
8.52
6.91
18
8.60
7.96
10.68
4.37
16.94
16.93
18.94
13.34
9.15
∞
288.19
310.67
287.79
255.46
352.73
368.97
353.72
277.88
275.49
2.89
4.53
5.59
7.12
9.05
11.88
307.88
rewritten binaries. This provides additional evidence of the
effectiveness of O-CFI against implementation disclosures.
D. Portal Efﬁcacy
We also tested the O-CFI’s effectiveness at reducing bounds
ranges. Table VII shows the factor by which average bounds
sizes reduce as the nexus capacity varies from 3 to 18, and
when the capacity is left unbounded. The bounds for each case
are compared against a baseline binary that has a nexus capacity
of zero. Across most binaries, with the exception of gap, the
bounds sizes decrease roughly linearly as the number of portals
increases. When the capacity is left unbounded, the bounds
reduce by a factor of almost 308. In other words, the average
bounds range for a binary with unbounded nexus capacities is
only about 0.3% of the range for a binary that does not use
portals.
As mentioned earlier, our implementation uses a nexus
capacity of 12, which reduces bounds by a factor of about
7, while only marginally affecting code size or runtime
performance. Figure 6 is a histogram of bounds sizes across
all the benchmarks when the capacity is set to 12, with the
counts measured on a logarithmic scale. Although there is a
fairly wide variance in ranges, the overwhelming majority of
bounds have span less than 15K in size.
E. Security against Theoretical Full-Knowledge Attack
In the previous section, we evaluated whether a ROP
generation tool (Mona) can construct effective attacks for
attackers who have not located the BLT (cf., §II-B). Although
we protect the BLT from memory disclosure, we now consider
an extraordinarily capable attacker who either (a) discovers
all code pages, disassembles their contents, and infers all
bounds from full knowledge of the program control ﬂow, or
(b) somehow locates and reads the BLT.
To the explore such an attacker’s capabilities, we extended
and adapted the Frankenstein mutation engine [31] to search
for a ROP chain that implements the VirtualAlloc or
VirtualProtect payloads from §V-C2 without violating
any bounds. Frankenstein uses a constraint-solving algorithm
to ﬁnd gadget chains that realize a user-speciﬁed goal state.
The goal processor state for our payloads was expressed as the
stack layout needed for a protection-disabling system API call.
Our tool has basic semantic understanding of a subset of x86
instruction sequences, mainly pertaining to their effect on the
stack. It leverages this understanding to search for a satisfying
sequence of gadgets from a given gadget pool.
When testing against a binary, the gadget pool is initialized
to the set of gadgets found by Mona. Finally, for each runtime-
11
Fig. 6. Bounds range histogram for a nexus capacity of 12. The vast majority of bounds have span under 15K.
randomized layout that the tool is provided, the BLT-permitted
range for each indirect branch is added as a constraint.
We used the tool on each of the SPEC2000 binaries, across
100 randomized code layouts each. Our results mirror the
practical payload tests—although we found partial chains for
the original binaries, we were unable to ﬁnd any ROP chains
that pass the bounds checks in binaries protected by O-CFI.
A. Branch Range Entropy
VI. DISCUSSION
A bounds-guessing disclosure attack succeeds when every
gadget falls within the range of the indirect branch in the
preceding gadget. If a binary contains b indirect branches split
across c clusters, and every indirect branch represents a potential
gadget, each cluster contains on average b/c gadgets.
Given a randomly chosen initial gadget, the chances of
choosing a second gadget that falls within the range of the ﬁrst
is b/c
b or 1/c. Thus, the chances of creating a payload with n
gadgets becomes (1/c)n−1. The average value of c across the
SPEC binaries is 23. Thus, we ﬁnd that the chance of creating
a bounds-adherent payload falls below 0.01% when n > 4.
This supports the experimentally obtained values for disclosure
attacks in Table VI.
Rather than guessing branch ranges, an implementation
disclosure attack could try to guess the location of the BLT
in at attempt to recover all bounds, so that it may craft a
payload in a more guided fashion. As discussed in §III-B, the
probability of doing so falls as low as 1/2,147,483,648 on
x86-64 systems. Attackers who beat the odds and manage to
locate the BLT still face the daunting challenge of leveraging
the leaked information to craft a gadget sequence that (i) is
not bounds-violating, and (ii) expresses a meaningful payload.
Section V-E demonstrates that this is quite difﬁcult given the
sparsity of control-ﬂows allowed by O-CFI.
B. Control-ﬂow Obfuscation
Section V-E evaluates adversaries who use implementation
disclosures, binary reverse-engineering, and control-ﬂow ﬁnger-
printing to infer and recover the complete control-ﬂow graphs
of victim programs, and it concludes that such attackers still
cannot reliably craft signiﬁcant-length gadget chains. To further
frustrate such efforts, O-CFI could be coupled with code obfus-
cation and anti-piracy strategies that hamper effective reverse-
engineering. For example, instruction-level diversiﬁcation (e.g.,
register allocation and instruction schedule randomization), code
duplication, opaque predicates [28], control-ﬂow ﬂattening [44],
and non-readable code pages [3] are all supportable by O-CFI.
C. External Module Support
O-CFI allows secured binaries to call library functions,
and fully supports rewriting of libraries. We here discuss this
capability in the context of Microsoft Windows libraries, but
the approach generalizes to Linux as well.
1) Calling external modules from secured binaries: The
Import Address Table (IAT) of secured binaries is set non-
writable throughout program execution, preventing attackers
from corrupting it to redirect control-ﬂow to arbitrary locations.
As such, calls made to external modules through the IAT need
not be constrained by O-CFI, and work correctly unchanged.
Most binaries also access external modules using dy-
namic linking system calls, such as LoadLibrary and
GetProcAddress on Windows. We use trampolines [48]
to support such calls. In particular, the intermediary library that
performs load-time randomization also intercepts all calls to
the OS’s dynamic linking API. The interception dynamically
loads the requested library, but returns a chunk-aligned pointer
to a trampoline within the caller’s address space instead of the
address of the requested function. When the trampoline is called,
it safely transfers control to the library, ensuring compatibility
between dynamically linked O-CFI and non-O-CFI binaries.
2) Securing Libraries: Libraries can be secured almost
identically to program main modules. The only difference is
that the returns of exported functions need special bounds that
permit cross-module control-ﬂows. O-CFI therefore creates a
return-portal for each exported function and exports its address.
This way, library returns become intra-module, and their bounds
can be set to the range of all locally identiﬁed targets plus the
address of the exported portal.
D. Approach Limitations and Future Work
Our prototype implementation of O-CFI relies on the static-
rewriting phase to identify and protect all branch ranges. As
such, it is unable to secure code that is generated dynamically.
Consequently, although our prototype is compatible with
binaries that generate JIT-code, it does not protect the JIT-
compiled code. However, prior work has shown that both
diversity and CFI can be successfully and efﬁciently applied
at runtime to JIT-compiled code [21, 32]. We believe the same
or similar strategies sufﬁce to realize O-CFI for JIT code.
Our O-CFI prototype implementation is presently incompat-
ible with Windows Component Object Model (COM). COM
uses binary reﬂection to dynamically inform loading modules
of the methods a COM library supports. Once the COM library
is loaded, calls to its methods are implemented as indirect calls.
12
  Number of bounds110100100010000Size interval148622972344583594447430589166104026118887133748148609163470178330193191208052222913237773252634267495282356297216312077326938341799356660371520386381401242416103430963445824460685475546490407505267520128534989549850564710579571594432Because indirect calls in O-CFI binaries are masked to chunk-
aligned targets for safety, and because any dynamically loaded
COM module has function entry points that are not located at
these boundaries, any attempt to jump to one of these functions
crashes the binary. Supporting COM requires extending our
implementation with a mechanism that dynamically creates
(chunk-aligned) trampolines for the functions of loaded COM
modules. This is reserved for future work.
A compiler-based implementation of O-CFI has access to
a more precise control-ﬂow graph of the target binary than
is available to our COTS-compatible, binary-level prototype.
Because completely accurate disassembly of x86 code is,
in general, impossible [8, 23], our binary-level prototype is
prone to false-negatives when identifying branch targets. (False-
positive are harmless, at worst contributing to an increased
bounds range for that branch.) Such false-negatives lead to
runtime #BR violations for legitimate control-ﬂows. This is
a standard limitation of source-free CFI, and is addressable
through improved disassembly heuristics (e.g., [47]).
VII. RELATED WORK
Our work combines aspects of two previously separate areas:
control-ﬂow integrity and software diversity. We discuss each
of these separately.
A. Software Diversity
Cohen was ﬁrst to describe software diversity as a defense
mechanism [8]. Forrest subsequently demonstrated stack-layout
randomization as a defense against stack smashing [15].
Subsequent work on artiﬁcial diversity is extensive; Larsen
et al. [27] provide an overview.
The work most closely related to ours is the concurrently
developed Oxymoron system [2]. Oxymoron uses a pure
code-randomization approach to resist JIT-ROP attacks. By
generating code that does not contain any direct references
to other code pages, it impedes the JIT-ROP attack step that
recursively infers new code page addresses by disassembling
leaked code pages. Instead of direct code references, inter-page
references use an indirection table similar to our BLT, whose
base address is stored in an x86 segment register to protect it
from accidental disclosure.
However, Oxymoron allows raw code addresses to ﬂow
into registers, into the heap, and onto the stack. As a result,
it is vulnerable to buffer over-read attacks that disclose the
stack and heap contents [42], which can hold a wealth of
raw return addresses and function pointers, each of which
potentially reveals a 4K page of gadgets for attackers to
abuse. Concurrent work has exploited this weakness to bypass
Oxymoron by harvesting code pointers from vtables in victim
C++ programs [10]. The XnR approach, which prevents reads
to code pages, shares this weakness [3]. In contrast, we
pessimistically assume that code addresses will eventually
leak to attackers (because they are stored in too many places).
Instead, O-CFI conceals the control-ﬂow policy graph, whose