渗透测试之自力更生
原创六号刃部 酒仙桥六号部队
2020-08-18原文
这是 酒仙桥六号部队 的第 62 篇文章。
全文共计4053个字，预计阅读时长13分钟。
背景
本文是前段时间做过的测试，这次本文全篇使用本地搭建环境来复
习，如有觉得不合理的地方，可能是本地复现的时候未完全还原真
实环境，主要是记录当时在做这个渗透测试的思路以及踩过的坑。
有漏洞没详情
打开网站，是一个企业介绍页，常规的文章列表等，尝试使用admin
等发现系统后台，但是失败了，那就直接上工具扫吧。
发现除了Index.php外还有一个AdminSystem目录，访问发现是后
台。
除了后台目录还有一个robots.txt,看看是否存在敏感信息。
通过robots.txt和后台的页面来看，本次测试目标应该是基于Xia
oCms进行搭建的，检索一下该CMS是否存在漏洞，通过一通搜索有
文章显示该CMS存在多个漏洞，比如前台文章处存在SQL注入等，具
体如下：
优先查看SQL注入，选择文章进行测试是否存在该漏洞。
http://192.168.27.1/xiaocms_20141229/index.php?id=20
通过各种payload测试，均无法形成注入，而且该文章也并没有给
出payload，仅是表示存在漏洞，除了一个名字以外没有任何详情
。为了利用该漏洞，所以将源代码下载下来，审计此处的漏洞是如
何利用的。
没详情的漏洞都是骗人的
下载源代码后，查看下目录结构情况。
后台访问的URL是
http://192.168.27.1/xiaocms_20141229/admin/index.php
，
也就是前台使用一个入口index.php后台使用的是admin目录下的I
ndex.php做为入口，打开admin/index.php查看源代码。
前面基本都是定义一些常量,后面紧跟着就是引入了文件core/xiao
cms.php，查看该文件代码。
该文件为整个CMS的核心，定义了一个名字叫xiaocms的抽象类，略
过没有营养的部分，主要看下面这段静态方法。
处理URL的地方，这里应该是全局处理的，所以url中包含参数c和
参数a，继续追踪静态变量$controller和$action。
将$controller和$action用下划线拼接为变量$app_id，判断静
态变量中$_app（空数组）中是否包含该变量，不存在则先进行判断
文件是否存在，然后进行引入以变量$controller命名的php文件
，而$action则是该文件类里面以变量$action并拼接Action命名
的方法，也就是URL中的C代表为controller同时也表示文件，参
数a则代表是action，也就是controller里面的方法。
了解了URL的一个结构，再来看一下文章处的SQL注入漏洞，URL如
下：
http://192.168.27.1/xiaocms_20141229/index.php?id=20
index.php直接跟ID参数，根据URL规则就是默认类和默认方法。
根据上图，可以看到通过GET方式获取ID后，直接给强转为整数型了
，也就是说不管ID传送的内容是啥，在这里都会被强制转为整数，
所以文章详情处的SQL注入，卒。
继续查看搜索处的SQL注入，搜索处的URL是：
http://192.168.27.1/xiaocms_20141229/index.php?c=index&a=search&
kw=1
根据URL规则，找到搜索处的代码：
可以看到除了一个URL转码以外没有进行任何明显的过滤，直接赋值
给$kw然后就代入数据库里进行查询了，但是根据代码查看显示，这
里可能采用了预编译的方法进行防御SQL注入。跟进该执行方法,一
直追溯，调用PHP原生PDO进行执行SQL语句，所以搜索出SQL注入漏
洞，卒。
继续查看留言处的SQL注入，先看是不是留言页存在SQL注入，URL
如下：
http://192.168.27.1/xiaocms_20141229/index.php?c=index&a=form&mo
delid=3
根据URL规则找到对应的代码，但是URL中参数modelid直接被强转
为整数。
所以留言这页的URL不存在SQL注入，继续看是否是提交内容存在SQ
L注入。输入留言内容抓包，发现参数都是data，只不过data是个
数组。
本地复现，先进代码查看下是否能利用成功，将动静降到最低。
可以看到接收所有的值后，将所有的内容代入post_check_fields
进行验证，追踪看看。
该方法仅仅是将该请求需要的字段进行拼装重组，并未对字段内容
进行校验，所以这里先过，接着看接下来的内容。
再拼装了一下其它的数据后，直接进行了insert操作，追踪insert
方法。
继续追踪_filterFields方法。
仅校验了新增的字段，数据内容未进行校验，继续往下追踪这个ins
ert。
追踪这个Insert方法，发现其实只是进行了数据拼接，拼装了SQL
语句，并将SQL语句里面的值替换成问号，然后调用execute方法执
行，继续追踪。
Execute方法如下：
Prepare函数准备要执行的SQL语句并返回一个PDOStatement对象
，也就是说这里也是使用的PDO进行SQL语句执行，所以留言处的SQ
L注入，卒。
到此为止，搜索到的SQL注入基本没法利用，要么在该版本被修复，
要么就是搜索到一篇假文章了，既然搜索Nday不靠谱，那就自己动
手代码审计吧。
靠人不如靠自己
老规矩先检索一下是否存在CVE编号，根据CVE里面的提示可以更好
的进行漏洞利用，很多CVE编号只会告诉哪个文件存在什么样的问题
，但是并没有给出具体的payload之类的，所以即便通过CVE知道漏
洞文件所在，也需要自己去下载代码进行漏洞分析，构造payload
。
检索xiaocms这个关键词，运气不错，出来8个。
查看一下详情:
有一些CVE详情，会有详细的漏洞利用方法，访问看看这个github
地址。
很不幸，不知道是因为运气不好遇到GitHub抽风了，还是什么原因
，直接是500错误，既然不给看详情，那就根据提示自己审计吧。
根据提示是admin/index.php?c=database这个URL的问题，本地
搭建环境访问一下看看。
看这个页面应该是数据备份的页面，也就是设置里的数据备份。
后台备份数据库的地方，访问的时间进行抓包:
选择几个系统表提交的时候进行抓包查看:
根据前面分析该CMS的一个URL请求情况，c=database就是contro
ller目录下的database.php文件，这个请求没有a参数，所以方法
应该是调用indexAction方法，具体看代码。