### Installing an Old Package with Security Vulnerabilities

#### 4.2 Package Signatures
YUM and urpmi rely solely on signatures embedded in packages for security, without protecting package metadata or root metadata. This makes them vulnerable to replay and freeze attacks, where an attacker can force clients to install vulnerable versions of signed packages. Additionally, YUM and urpmi do not verify that the package metadata used for dependency resolution matches the embedded metadata in downloaded packages, allowing for extraneous dependencies attacks. An attacker can exploit this by causing the installation of a known-vulnerable package when the user installs any other package.

Both YUM and urpmi are also susceptible to endless data attacks. For example, YUM can be made to exit without error after filling the filesystem with a large `repomd.xml` file, making it difficult to detect the problem, especially if YUM is running via auto-update.

**Fixing the Package Managers:**
- **Extraneous Dependencies Attack:** Verify that the downloaded package metadata matches the embedded metadata.
- **Endless Data Attacks:** Cap the size of downloaded data.
- **Replay and Freeze Attacks:** Add root metadata signing, as re-signing all packages to prevent these attacks is impractical.

#### 4.3 Package Metadata Signatures
Portage and Stork use different methods for package metadata signatures:
- **Portage:** Each package version has a separate, signed metadata file containing secure hashes of the package and related files.
- **Stork:** A single file contains timestamps and secure hashes of the metadata for all trusted packages. Users can delegate trust to other users, typically to a "distribution" user.

These package managers are resistant to extraneous dependencies attacks but are still vulnerable to endless data attacks and freeze attacks. Portage is also vulnerable to replay attacks because each package has a separate metadata signature file, allowing an attacker to offer only older, vulnerable versions. Stork checks timestamps to prevent replay attacks but does not prevent freeze attacks.

**Fixing the Package Managers:**
- **Replay Attacks:** Add timestamp checking.
- **Endless Data Attacks:** Cap the size of downloaded data.
- **Freeze Attacks:** Still vulnerable.

#### 4.4 Root Metadata Signatures
APT, APT-RPM, and YaST use signatures on root metadata, which protects package metadata from tampering and prevents extraneous dependencies attacks. The root metadata signature also prevents a mirror from hosting different versions of packages from different time periods, but these package managers do not check the order of timestamps to prevent replay attacks or have mechanisms to prevent freeze attacks or endless data attacks.

**Fixing the Package Managers:**
- **Endless Data Attacks:** Cap the size of downloaded data.
- **Replay Attacks:** Add a timestamp to the root metadata and check that newly downloaded metadata is not older than the last obtained version.
- **Freeze Attacks:** Add an expiration time to the root metadata and require frequent updates to mirrors.

#### 4.5 Classification
The security mechanisms and vulnerabilities of the package managers are summarized in Figure 2. All package managers are vulnerable to endless data and freeze attacks, with varying resistance to other attacks like replay attacks. The best case and common case for each protection mechanism are shown in Figure 3.

#### 5. Additional Usability Needs
Users often need to verify standalone packages, which are not obtained through the package manager's normal channels. Standalone packages may come from unofficial sources or be created by the user. Signing only root metadata does not allow practical verification of standalone packages. Package managers that sign package metadata are more suitable for verifying standalone packages, but the way metadata is stored impacts usability. Embedding signatures in packages is the most practical option for standalone package verification, though it requires the user to have the requisite public keys and ensure the package is up-to-date and free from vulnerabilities.

#### 6. Deployment Experience
We modified the Stork package manager to add root metadata signing and an expiration time to prevent freeze attacks. Since Stork already supported package and package metadata signatures, we could experiment with all types of signatures. The changes were transparent to users, with negligible performance overhead. The initial distribution of the repository key was secure, and users gained increased security without noticeable changes in usability. We found that user-uploaded packages did not include package signatures, indicating that researchers were not using the optional package signing feature.