manner as the FileMonster, this utility functioned more as 
an  additional  access  control  mechanism  for  certain 
resources than as an application sandbox. 
5.3. Where does the FileMonster fit it? 
into 
the  development  of  sandboxes  and 
As  we  have  discussed,  a  great  deal  of  research  has 
the 
gone 
underlying wrapping technology.  It has been shown that 
wrapping  can  be  performed  on  many  different  operating 
systems,  and  that  it  can  be  done  in  a  secure  manner.  
There is little question as to the potential of sandboxing as 
a defensive mechanism, however to this day it remains an 
under-utilized  technology.    The  authors  of  this  paper 
believe  that  the  reason  that  sandboxing  is  not  more 
popular is because although it is effective, the sandboxing 
mechanisms  we  described  are  often  very  difficult  to 
configure  and  use.    The  FileMonster  has  been  designed 
with these problems in mind. 
We  are  not  the  first  to  recognize  the  need  for  more 
usable sandboxing technology.  Recent work described in 
[4]  presents  a  tool  called  WindowBox  that  provides  a 
simplified  sandboxing  mechanism.    This  tool  provides  a 
form of sandbox separation between applications that run 
on  different  virtual  desktops. 
  The  only  way  that 
information  can  be  transferred  from  one  desktop  to 
another is with the explicit approval of the user.  Belfanz 
et  al.  believe  that  this  model  provides  users  with  an 
intuitive way to separate their applications and to protect 
them  from  each  other.    A  potential  problem  with  this 
approach is that all applications on a single desktop have 
full access to any data associated with that desktop.  If a 
user  is  tricked  into  running  a  malicious  program,  this 
program  will  be  able  to  damage  whatever  data  it  can 
access.  To reap the benefits of this model it requires that 
users  change  how  they  go  about  their  work,  as  well  as 
necessitates that they concern themselves with the issue of 
how  to  group  of  applications  on  desktops.    Though  we 
take a different approach to the problem, this paper does 
represent a good effort to provide users with an easier to 
use  sandbox  environment  and  unfortunately  we  have  not 
had the benefit of exploring it first-hand.   
Though it shares some characteristics with application 
sandboxes,  the  FileMonster  differs  from  most  of  the 
approaches  described  above  in  its  focus  on  defending  a 
user’s  documents  rather  than  encapsulating  untrusted 
applications.  In this sense the FileMonster is closer to an 
extension  of  an  operating  system’s  access  control 
mechanisms.  We believe that our prototype protects file 
resources  in  a  manner  that  is  intuitive  to  the  user  and  is 
significantly easier to manage.  The data-centric model of 
protection allows a user to associate confirm on read and 
confirm on write permissions directly with the file or file 
type that is to be protected, rather than to have to decide 
which  applications  are  dangerous  enough 
to  be 
sandboxed.  By default all applications are subject to the 
restrictions  set  up  by  the  FileMonster,  making  this  an 
ideal system for protecting against malicious software that 
a  user  may  not  even  realize  is  executing.    Furthermore, 
the  ability to require a  secure  file  confirmation gives the 
FileMonster  a  security  advantage  over  any  application 
sandboxes that we have seen. 
6. Discussion 
The  prototype  described  in  this  paper  provides  a 
unique  solution  to  the established problem of controlling 
malicious  software  within  a  discretionary  access  control 
environment.    Other  research  efforts  in  the  areas  of 
function  wrapping  and  application  sandboxing  have 
provided  the  building  blocks  necessary  to  implement  a 
solution to this problem, but have not produced a system 
that  is  both  secure  and  easy  to  use.    We  hope  that  the 
FileMonster can help to fill this gap, and provide a much-
needed layer of protection against damage or snooping by 
malicious software of all types. 
The FileMonster provides confirm on read and confirm 
on write permissions to increase a user’s awareness of an 
application’s  access  to  critical  documents.   The scope of 
our  prototype’s  protection  is  more  limited  than  that 
implemented  by  many  application-centric  protection 
measures  that  attempt  to  protect  all  types  of  resources.  
The  FileMonster  does  not  attempt  to  protect  against 
nuisance  attacks  like  denial  of  service  attacks  or  email 
floods.  Rather than being a disadvantage, we believe that 
this is critical to the success of the FileMonster.  We have 
concentrated  our  protective  measures  on  that  which  we 
believe is most important to defend.  The FileMonster is 
most  effective  and  least  obtrusive  when  restricted  to 
protecting  important  user  documents.    To  this  end  we 
have  provided  a  number  of  features  including  session 
caching and application associations that make it simple 
for a user to configure the tool to provide an appropriate 
level  of  additional  security  without  interfering  with 
normal work habits. 
Because  this  prototype  relies  on  the  user  to  make 
security  decisions  the user must have a certain degree of 
security  awareness.    He  must  be  able  to  distinguish 
between  an  ordinary  file  operation  and  a  potentially 
malicious  file  operation.    Usually  the  context  of  the 
operation  provides  enough  data  to  make  a  sensible 
decision.    For  example,  when  a  user  elects  to  save  the 
document  titled  MyDocument.doc,  he  should  expect  the 
FileMonster to present a confirm on write dialog box that 
Proceedings of the 18th Annual Computer Security Applications Conference (ACSAC(cid:146)02) 
1063-9527/02 $17.00 ' 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:28:30 UTC from IEEE Xplore.  Restrictions apply. 
indicates that Microsoft Word is attempting to write to the 
file  MyDocument.doc.    In  our  experience  using  the 
FileMonster,  we  have  found  that  most  users  do  not  have 
trouble  making  the  requisite  decisions.    There  will 
undoubtedly be situations that are not as straightforward, 
and  the  burden  of  making  the  correct  decision  will 
unfortunately  fall  on  the  shoulder  of  the  user.    We  have 
yet  to  be  able  to  explore  this  further  in  a  larger  test 
environment, but hope to make the FileMonster available 
for  broader  use  in  the  near  future  and  to  leverage  this 
experience to improve upon the current concept. 
7. Future work 
interface. 
the  user 
improving 
We  will  continue  to  improve  the  FileMonster  by 
the  number  of  unnecessary  confirmation 
reducing 
requests  and 
  The 
benchmarking that is discussed in section 3.4 will help us 
to quantify the improvements that we make to the system, 
but ultimately the success or failure of this prototype will 
depend  on  its  ease  of  use  and  its  unobtrusiveness.    The 
usability  studies  that  we  have  conducted  so  far  have 
focused on reducing the number of spurious confirmation 
requests.    This  is  an  important  element  of  usability 
because  frequent  dialog  boxes  will  result  in  the  user 
turning  the  FileMonster  off,  or  not  paying  enough 
attention to catch actual attacks.  Reducing the number of 
confirmations  that  a  user  has  to  respond  to  will  increase 
the relative importance of each one.  We hope to further 
evaluate usability in the near future by releasing a version 
of this tool that can be explored by the public at large. 
A  known  weakness 
One possible improvement to the security and usability 
of the tool is to introduce the use of hardware as a method 
of accepting user confirmations.  A device driver could be 
written  that  would distinguish the difference between the 
user  pressing  a  key  on  the  keyboard  and  an  application 
sending a “keystroke” to another application.  This would 
enable  the  FileMonster  to  accept  a  confirmation  request 
on the insecure user desktop without the need to switch to 
the  secure FileMonster desktop.  This would provide the 
security  of  using  the  secure  file  confirmation  mode  with 
the convenience of the simple file confirmation mode. 
that 
the 
FileMonster offers is the possibility of a malicious attack 
that  manipulates  a  trusted  application  to  read  or  damage 
protected files (this is discussed in section 3.2).  We have 
not  yet  addressed  this  difficult  problem,  other  than  to 
caution against the use of application associations in high-
security  environments.    One  possible  solution  is  to  trap 
Windows  system  calls  that  relate  to  the  passing  of 
messages between applications.  This would enable us to 
restrict  the  messages  that  are  being  sent  to  trusted 
applications.    We  could  use  this  capability  to  prevent 
malicious  software  from  manipulating  trusted  programs 
and attacking protected files. 
the  protection 
in 
The next property that needs to be evaluated is whether 
a  user  can  easily  differentiate  between  a  benign 
confirmation  request  and  one  caused  by  malicious 
software.  The FileMonster might be improved to actually 
help  a  user  evaluate  the  seriousness  of  a  confirmation 
dialog box.  As an example of how this could be done, a 
high  importance  could  be  given  to  confirmation  requests 
that originate from applications that are not part of a set of 
trusted  applications.    The  easiest  method  of  establishing 
this  trusted  code  base  would  be  to  simply  include  all 
executables  that  were  on  the  system  at  the  time  the 
FileMonster was installed, or to include all programs that 
have been configured as application associations.   
Testing  a  user’s  ability 
to  differentiate  between 
malicious  requests  and  benign  requests  necessitates  a 
fairly  involved  experiment  because  we  need  to  ascertain 
user’s  reactions  to  malicious  software  when  they  are  not 
expecting  to  be  attacked.    Our  experiments  to  this  point 
have  not  included  any  actual  malicious  software  attacks.  
In  the  future  we  hope  to  conduct  a  more  comprehensive 
experiment;  perhaps  through  a  large-scale  evaluation 
within the computer security community. 
8. References 
[1]    A.  Berman,  V.  Bourassa,  E.  Selberg,  “TRON:  Process-
specific  file  protection  for  the  UNIX  operating  system.”    In 
Proceedings of the 1995 USENIX Winter Technical Conference, 
pages 165--175. USENIX Association, 1995. 
[2]  R.  Balzer,  N.  Goldman,    “Mediating  Connectors:  A  non-
bypassable  process  wrapping  technology.”    In  Proceedings  of 
the  2000  DARPA  Information  Survivability  Conference  and 
Exposition, pp. 361-368, 1999. 
[3]    M.  Blaze,  “A  Cryptographic  File  System  for  Unix.”  In 
Proceedings  of  1st  ACM  Conference  on  Computer  and 
Communications  Security,  Fairfax,  Virginia,  November  1993, 
pp. 9--16. 
[4]  D.  Balfanz,  D.  Simon,    “WindowBox:  A  Simple  Security 
Model for the Connected Desktop.”  In Proceedings of the 2000 
Windows System Symposium, August, 2000 
[5]    F.  Chang,  A.  Itzkovitz,  V.  Karamcheti,  “User-level 
resource-constrained  sandboxing.”  In  Proceedings  of  4th 
USENIX Windows Systems Symposium, 2000. 
[6]    T.  Fraser,  L. Badger, and M. Feldman, “Hardening COTS 
Software  with  Generic  Software  Wrappers.”  In  Proceedings  of 
the 1999 IEEE Symposium on Security and Privacy, 1999. 
[7]  C. Friberg, A. Held,  “Support for Discretionary Role Based 
Access  Control 
in  ACL-oriented  Operating  Systems,”  In 
Proceedings  of  2nd  ACM  Workshop  on  Role  Based  Access 
Control, pages 83--94. ACM, Fairfax, VA, November 6-7 1997. 
Proceedings of the 18th Annual Computer Security Applications Conference (ACSAC(cid:146)02) 
1063-9527/02 $17.00 ' 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:28:30 UTC from IEEE Xplore.  Restrictions apply. 
[8]    D.  Ghormley,  D.  Petrou,  Anderson,  T.    “SLIC:  An 
Extensibility  System  for  Commodity  Operating  Systems”.    In 
USENIX 1998 Annual Technical Conference, June 1998. 
[9]  I. Goldberg, D. Wagner, R. Thomas, and E. A. Brewer, “A 
Secure  Environment  for  Untrusted  Helper  Applications  --- 
Confining  the  Wily  Hacker.”  In  Proceedings  of  the  1996 
USENIX Security Symposium, 1996. 
[10]  G. Hunt, D. Brubacher,  “Detours: Binary interception of 
Win32 Functions.”  In Proceedings of the 3rd USENIX Windows 
NT Symposium, July, 1999. 
 [11]    C.  Johnson,    “GateKeeper  Version  1.3  Documentation.” 
From  http://gargravarr.cc.utexas.edu/gatekeeper/gatekeeper.html 
(May 29, 2001). 
[12]   T. Jeaeger, A. Prakash, and A. Rubin, “Building systems 
that  flexibly  control  downloaded  executable  context.”    In 
Proceedings of the 6th USENIX Security Symposium, 1996. 
[13] 
the  Damage  Potential  of 
Discretionary Trojan Horses.”  In Proceedings of the 1987 IEEE 
Symposium on Security and Privacy, pp. 27-29, April 1987. 
[14]  G. McGraw, E. Felten.  Securing Java: Getting Down to 
Business with Mobile Code.  John Wiley and Sons, 1999. 
[15]    T.  Mitchem,  R.  Lu,  R.  O’Brien,    “Using  Kernel 
Hypervisors  to  Secure  Applications.”    In  Proceedings  of  the 
1997  Annual  Computer  Security  Application  Conference, 
December 1997. 
[16]    C.  Pfleeger.    Security  in  Computing,.  Prentice  Hall,  NJ, 
1997, p. 270. 
[17]  D.  Wagner.    “Janus:  an  approach  for  confinement  of 
untrusted  applications.” 
  Master’s  Thesis,  UC  Berkeley, 
Computer Science Division, 1996. 
  P.  Karger, 
  “Limiting 
*  This  article  reflects  the  views  of  the  authors  only  and 
does  not  necessarily  reflect  the  views  of  the  Department 
of  Defense  or  the  Defense  Advanced  Research  Projects 
Agency. 
Approved for Public Release, Distribution Unlimited 
Proceedings of the 18th Annual Computer Security Applications Conference (ACSAC(cid:146)02) 
1063-9527/02 $17.00 ' 2002 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 07:28:30 UTC from IEEE Xplore.  Restrictions apply.