    * flag.enc
    * pubkey.pem
这边的话enc.py里面要注意一个点，他从int转成bytes和bytes转int都是用的小端模式也就是byteorder =
‘little’,这个和我们正常的一个转换刚好相反的。
然后可以发现是pubkey.pem极大，有1.6MB，这边如果是使用RSA.importKey是无法取出他的公钥n，e的。因为根本无法导入。但是我们其实知道公钥文件的格式，
e其实就在base64编码的公钥文件的尾部
    import base64
    key_end_base64="l8UvtaFCpNsgheCRz1j+HD9cHH05ozrbHMe/rtEUQa6fmQcAJbDNBXZV+yabO1aSKwVm5ZgHKQIDAQAB"
    key=base64.b64decode(key_end_base64)
    print(hex(bytes_to_long(key)))
得到结果如下
明显最后的16进制值为0x10001，这也是rsa中最常用的一个公钥e。
因为n极大，这题也是直接小明文攻击求解。
  * 题解exp如下： 
        from Crypto.Util.number import *
    import base64
    import gmpy2
    key_end_base64="l8UvtaFCpNsgheCRz1j+HD9cHH05ozrbHMe/rtEUQa6fmQcAJbDNBXZV+yabO1aSKwVm5ZgHKQIDAQAB"
    key=base64.b64decode(key_end_base64)
    print(hex(bytes_to_long(key)))
    f=open("flag.enc","rb")
    c_bytes=f.read()
    c=int.from_bytes(c_bytes,byteorder="little")
    m=gmpy2.iroot(c,0x10001)[0]
    flag=long_to_bytes(m)[::-1]
    print(flag)
## [AFCTF2018]MyOwnCBC
  * 题目链接（buu平台）
[https://buuoj.cn/challenges#[AFCTF2018]MyOwnCBC](https://buuoj.cn/challenges#%5BAFCTF2018%5DMyOwnCBC)
  * 附件 
    * MyOwnCBC.py
    * flag_cipher 
                def MyOwnCBC(key, plain):
        if len(key)!=32:
          return "error!"
        cipher_txt = b""
        cipher_arr = []
        cipher = AES.new(key, AES.MODE_ECB, "")
        plain = [plain[i:i+32] for i in range(0, len(plain), 32)]
        print (plain)
        cipher_arr.append(cipher.encrypt(plain[0]))
        cipher_txt += cipher_arr[0]
        for i in range(1, len(plain)):
          cipher = AES.new(cipher_arr[i-1], AES.MODE_ECB, "")
          cipher_arr.append(cipher.encrypt(plain[i]))
          cipher_txt += cipher_arr[i]
        return cipher_txt
简单的对MyOwnCBC.py脚本进行分析，可以发现，其实就是ECB模式下的AES，然后将每个分组单独进行了AES
ECB加密，可以看到的是每一组AES加密的key为上一组加密结果的密文。  
出题人设计这个题目的意图应该是想带大家了解一下AES
CBC模式，用ECB模式进行一个大概的模拟（当然不是这个原理）。主要是想表达CBC模式下会把上一轮的加密影响扩散到下一轮的意思吧。
那解密也很简单，因为key其实就是每组加密后的密文嘛，直接AES ECB模式下解密即可。
  * 题解exp如下： 
        from Crypto.Cipher import AES
    from Crypto.Random import random
    from Crypto.Util.number import long_to_bytes
    f=open("flag_cipher","rb")
    st=f.read()
    print(len(st))
    def MyOwnCBC(key, plain):
      cipher_txt = b""
      cipher = AES.new(key, AES.MODE_ECB)
      cipher_txt=cipher.decrypt(plain)
      return cipher_txt
    #for i in range(len(st)//32):
    flag=""
    for i in range(1,10):
      plain=MyOwnCBC(st[(52-i-1)*32:(52-i)*32],st[(52-i)*32:(53-i)*32])
      flag=plain.decode()+flag
    print(flag)
## [RoarCTF2019]RSA
  * 题目链接（buu平台）
[https://buuoj.cn/challenges#[RoarCTF2019]RSA](https://buuoj.cn/challenges#%5BRoarCTF2019%5DRSA)
  * 附件 
    * attachment
题面如下：
    A=(((y%x)**5)%(x%y))**2019+y**316+(y+1)/x
    p=next_prime(z*x*y)
    q=next_prime(z)
    A =  
    n =  
    c =
这一题我们发现n直接可以分解。  
这一点我也很费解。。因为RoarCTF当时也有参与出题和测题。明明不应该出现这个问题。这个factordb的网站有收录就很离谱。
这边介绍一下预期解。
我们首先看到
    A=(((y%x)**5)%(x%y))**2019+y**316+(y+1)/x
这边可以发现，其实这个方程里面最大的一项是(((y%x) **5)%(x%y))** 2019  
这边之前底数大于等于2，那么这一项直接就大于A了。所以这一项必然是0或者1
其次就是y **316了。发现当y为84的时候y** 316就已经大于A了。所以得到y肯定是小于84的
然后最后一项的结果肯定也很小。所以这边基本就确定了y为83了。然后爆破一下x，得到x为2
到这里我们就得到了x*y的一个值。然后我们知道p和q共有一个大因子z，虽然最后是取了一个next_prime，但是我们可以先得到一个大概的值
得到一个z的大概值
    xy=x*y
    zz_near=n//xy
    z_near=gmpy2.iroot(zz_near,2)[0]
然后写个二分法去求解一下pq的值
    low=0
    hei=10000000
    while low0:
            low=mid+1
        elif p*q-nA:
          print(i)
          break
    '''
    y=83
    x=0
    '''
    for x in range(1,1000):
      if (((y%x)**5)%(x%y))**2019+y**316+(y+1)//x==A:
          print(x)
          break
    '''
    x=2
    xy=x*y
    zz_near=n//xy
    z_near=gmpy2.iroot(zz_near,2)[0]
    low=0
    hei=10000000
    while low0:
          low=mid+1
      elif p*q-n<0:
          hei=mid-1
      else:
          break
    print(p*q==n)
    phi=(p-1)*(q-1)
    e=0x10001
    d=gmpy2.invert(e,phi)
    m=pow(c,d,n)
    flag=long_to_bytes(m)
    print(flag)
## [AFCTF2018]One Secret, Two encryption
  * 题目链接（buu平台）
[https://buuoj.cn/challenges#[AFCTF2018]One Secret, Two
encryption](https://buuoj.cn/challenges#%5BAFCTF2018%5DOne%20Secret,%20Two%20encryption)
  * 附件 
    * public1.pub
    * public2.pub
    * flag_encry1
    * flag_encry2
给了一份题面
    一份秘密发送给两个人不太好吧，那我各自加密一次好啦~~~
    素数生成好慢呀
    偷个懒也……不会有问题的吧？
这边首先把两份公钥文件的n,e取出来看了一下
    from Crypto.PublicKey import RSA
    import gmpy2
    from Crypto.Util.number import *
    f=open("public1.pub","r")
    rsa1=RSA.import_key(f.read())
    n1=rsa1.n
    e1=rsa1.e
    f.close()
    f=open("public2.pub","r")
    rsa2=RSA.import_key(f.read())
    n2=rsa2.n
    e2=rsa2.e
    f.close()
    print(n1,e1)
    print(n2,e2)
测试发现n1 n2有公约数。这边也是印证了题面给的懒得生成素数，所以共用了其中一个素数。这边直接gcd求解公约数即可。  
然后分解出p q进行一个基础的RSA解密
  * 题解exp如下： 
        from Crypto.PublicKey import RSA
    import gmpy2
    from Crypto.Util.number import *
    f=open("public1.pub","r")
    rsa1=RSA.import_key(f.read())
    n1=rsa1.n
    e1=rsa1.e
    f.close()
    f=open("public2.pub","r")
    rsa2=RSA.import_key(f.read())
    n2=rsa2.n
    e2=rsa2.e
    f.close()
    #print(n1,e1)
    #print(n2,e2)
    p=gmpy2.gcd(n1,n2)
    q=n2//p