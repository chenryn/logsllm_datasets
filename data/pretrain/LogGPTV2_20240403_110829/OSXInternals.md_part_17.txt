file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhF139.htm 20.08.2007
Chapter 2. An Overview of Mac OS X Page 68 of 80
[82] Physical presence is warranted unless the system is being driven remotely through a product
such as Apple Remote Desktop. Beginning with Mac OS X 10.4, an application can authorize a
user by passing in a username and password to the authorization functionwithout displaying the
authentication dialog box.
2.14.2.5. Using Authorization Services
Figure 235 shows a program that requests a right named com.osxbook.Test.DoSomething. If the right
doesn't exist in the policy databasewhich should be the case when the program is run for the first timeit sets
up the right based on an existing standard rule called kAuthorizationAuthenticateAsSessionUser. The
latter requires the user to authenticate as the session ownerthat is, the currently logged-in user.
Figure 235. Using Authorization Services
// testright.c
#include 
#include 
#include 
#include 
#include 
const char kTestActionRightName[] = "com.osxbook.Test.DoSomething";
int
main(int argc, char **argv)
{
OSStatus err;
AuthorizationRef authRef;
AuthorizationItem authorization = { 0, 0, 0, 0 };
AuthorizationRights rights = { 1, &authorization };
AuthorizationFlags flags = kAuthorizationFlagInteractionAllowed |\
kAuthorizationFlagExtendRights
// Create a new authorization reference
err = AuthorizationCreate(NULL, NULL, 0, &authRef);
if (err != noErr) {
fprintf(stderr, "failed to connect to Authorization Services\n");
return err;
}
// Check if the right is defined
err = AuthorizationRightGet(kTestActionRightName, NULL);
if (err != noErr) {
if (err == errAuthorizationDenied) {
// Create right in the policy database
err = AuthorizationRightSet(
authRef,
kTestActionRightName,
CFSTR(kAuthorizationRuleAuthenticateAsSessionUser),
CFSTR("You must be authorized to perform DoSomething."),
NULL,
NULL
);
if (err != noErr) {
fprintf(stderr, "failed to set up right\n");
return err;
}
}
else {
// Give up
fprintf(stderr, "failed to check right definition (%ld)\n", err);
return err;
}
}
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhF139.htm 20.08.2007
Chapter 2. An Overview of Mac OS X Page 69 of 80
// Authorize right
authorization.name = kTestActionRightName;
err = AuthorizationCopyRights(authRef, &rights, NULL, flags, NULL);
if (err != noErr)
fprintf(stderr, "failed to acquire right (%s)\n", kTestActionRightName);
else
fprintf(stderr, "right acquired (%s)\n", kTestActionRightName);
// Free the memory associated with the authorization reference
AuthorizationFree(authRef, kAuthorizationFlagDefaults);
exit(0);
}
$ gcc -Wall -o testright testright.c -framework Security\
-framework CoreFoundation
$ ./testright
...
$ less /etc/authorization
...
com.osxbook.Test.DoSomething
default-prompt
You must be authorized to perform DoSomething.
rule
authenticate-session-user
...
2.14.2.6. Miscellaneous Security-Related Features
Other Mac OS X security features readily available to end users, or otherwise controllable by them, include
the following.
Mac OS X provides a feature called FileVault, wherein an AES-encrypted disk image is used to hold
the contents of a user's home directory. For example, if FileVault is enabled for an existing user amit,
then amit's home directory/Users/amit/will contain a disk image file called amit.sparseimage.
This file contains an HFS Plus volume and is visiblesay, from an administrator accountwhen amit is
not logged in. Once amit logs in, the volume within the disk image is mounted on /Users/amit/,
whereas the previous contents of /Users/amit/ (in particular, the image file itself) are moved
to /Users/.amit/.
Mac OS X provides secure file deletion through the Finder's Secure Empty Trash menu item and
through the srm command-line program. The Disk Utility application (Disk Utility.app) allows
disks and volumes to be securely erased using one of many schemes: write zeros over all data on disk
(zero-out data), write data over the entire disk 7 times (7-pass erase), and write data over the entire
disk 35 times (35-pass erase). Moreover, recovery of already deleted files can be made difficult by
securely erasing existing free space on a volume.
We earlier looked at encrypted virtual memory as a kernel feature. It can be enabled or disabled
through the Security pane of the System Preferences application. At boot time, the operating system
checks for the ENCRYPTSWAP shell variable to determine whether virtual memory should be encrypted.
The variable's value is set to -YES- or -NO- in /etc/hostconfig depending on the setting selected in
System Preferences.
2.14.3. System Administration
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhF139.htm 20.08.2007
Chapter 2. An Overview of Mac OS X Page 70 of 80
Mac OS X can be effectively administered through either graphical user interfaces or the command line. Let
us look at some examples of using the command line to control Mac OS Xspecific aspects of system
administration.
2.14.3.1. Interacting with the Security Framework
The security command provides access to the functionality in the Security framework
(Security.framework). In particular, it can be used to access and manipulate certificates, keys, keychains,
and password items, as shown in Figure 236.
Figure 236. Examining keychains using the security command
$ security list-keychains
"/Users/amit/Library/Keychains/login.keychain"
"/Library/Keychains/System.keychain"
$ security dump-keychain login.keychain
...
keychain: "/Users/amit/Library/Keychains/login.keychain"
class: "genp"
attributes:
0x00000007 ="AirPort Express"
0x00000008 =
...
2.14.3.2. Interacting with Directory Services
The server version of Mac OS X uses the LDAP-based[83] Open Directory software to provide directory and
authentication services for Mac OS X, Unix, and Windows clients. A directory service is simply a central
repository for storing and vending information about users, computers, printers, and other network resources
in an organization. Application and system software can access such information for a variety of purposes:
authenticating logins, locating user home directories, enforcing resource quotas, controlling accesses to file
systems, and so on. Traditionally, Unix systems store such information in flat text files, such as those in
the /etc directory. In fact, the Unix /etc directory could be seen as a primitive directory service. Other
examples of directory services include Sun's Network Information Service (NIS)[84] and Microsoft's Active
Directory.[85] The legacy directory service in Mac OS X Server is called NetInfo. Although no longer used
for shared directories, NetInfo is still the directory service for the local directory domain on Mac OS Xthat
is, for users and resources on the local system.
[83] LDAP stands for Lightweight Directory Access Protocol. It is a widely deployed open
standard.
[84] An old name for NIS is Yellow Pages (yp). The successor to NIS is called NIS+. Recent
versions of Solaris have deprecated NIS and NIS+ in favor of LDAP-based directory services.
[85] Active Directory is LDAP-based as well.
The dscl command can be used for operating on data sources, which can be directory node names or hosts
that are running directory services. Similarly, the niutil command utility can be used for operating on
NetInfo domains. However, note that Open Directory includes a NetInfo plug-in that allows interoperation
with NetInfo. Figure 237 shows examples of using dscl and niutil.
Figure 237. Interacting with Directory Services by using command-line tools
$ niutil -list . / # List directories in the path '/' in the local domain '/'
1 users
2 groups
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhF139.htm 20.08.2007
Chapter 2. An Overview of Mac OS X Page 71 of 80
3 machines
4 networks
...
$ dscl /NetInfo/root -list / # List subdirectories of the path '/'
# using the data source /Netinfo/root
AFPUserAliases
Aliases
Groups
Machines
Networks
...
# dscl sorts by directory names, niutil sorts by directory IDs
$ dscl . -read /Users/amit # Read record for user amit
...
NFSHomeDirectory: /Users/amit
Password: ********
Picture: /Library/User
Pictures/Nature/Lightning.tif
PrimaryGroupID: 501
RealName: Amit Singh
RecordName: amit
...
$ niutil -read . /users/amit # Read record for user amit
...
$ niutil -read . /users/uid=501 # Read record for user with UID 501
...
$ dscl . -passwd /Users/amit # Change amit's password
...
$ dscl . -search /Users UserShell "/usr/bin/false"
# Search for users with the specified shell
nobody UserShell = ("/usr/bin/false")
daemon UserShell = ("/usr/bin/false")
unknown UserShell = ("/usr/bin/false")
...
2.14.3.3. Managing System Configuration
The scutil command can be used to access and manipulate various configuration aspects of the local
system. The System Configuration daemon (/usr/sbin/configd) stores relevant configuration data in a
dynamic store that is accessible via scutil. It uses several configuration agentseach of which is a plug-in
that handles a particular configuration management areato form an overall view of system configuration.
The agents reside in /System/Library/SystemConfiguration/ as bundles. For example, the
IPConfiguration agent is responsible for establishing (say, via DHCP) and maintaining IPv4 addresses.
Figure 238 shows an example of accessing the system configuration dynamic store using scutil.
Figure 238. Using the scutil command to access the System Configuration dynamic store
$ scutil
> list
subKey [0] = DirectoryService:PID
subKey [1] = Plugin:IPConfiguration
subKey [2] = Setup:
subKey [3] = Setup:/
...
subKey [26] = State:/Network/Interface/en1/AirPort
subKey [27] = State:/Network/Interface/en1/IPv4
...
> show State:/Network/Interface/en1/AirPort
 {
Power Status : 1
BSSID :  0x00aabbccdd
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhF139.htm 20.08.2007
Chapter 2. An Overview of Mac OS X Page 72 of 80
Card Mode : 1
Link Status : 4
SSID : dummyssid
}
> show State:/Network/Interface/en1/IPv4
 {
Addresses :  {
0 : 10.0.0.1
}
BroadcastAddresses :  {
0 : 10.0.0.255
}
SubnetMasks :  {
0 : 255.255.255.0
}
}
2.14.4. The Auditing System
The Mac OS X auditing system consists of kernel support and a suite of user-space programs.[86] The kernel
records audit events to a log filean audit trail filebased on several types of criteria. A user-space
daemonauditdlistens to trigger events from the kernel and control events from user programs (the audit
command-line utility by default). Trigger events inform auditd if the current log file has become full or if
the file system free space has fallen below a configured threshold; if so, auditd will attempt to rectify the
situation. For example, it may attempt to rotate the log. In this sense, auditd is a log management daemon.
Control events are used to instruct auditd to switch to a new log file, reread the configuration file, or
terminate the auditing system.
[86] In Mac OS X 10.4, user-space auditing programs and configuration files are provided by the
Common Criteria Tools package, which is not installed by default.
Table 22 lists the key executables and configuration files in the auditing system.
Table 22. Auditing System Components
File/Directory Description
/usr/sbin/auditd Audit log management daemonreceives "trigger"
messages from the kernel and "control" messages
from the audit management utility
/usr/sbin/audit Audit management utilityused to control the audit
daemon by sending it control messages
/usr/sbin/auditreduce Utility that selects records from the audit trail files
based on the specified criteria and prints matching
records in raw formeither to a file or to the
standard output
/usr/sbin/praudit Utility that prints selected records in human-
readable format
/var/audit/ Directory for storing audit trail files
/etc/security/rc.audit Script executed during system startup by
the /etc/rc master script to start the audit
daemon
/etc/security/audit_control Default audit policy filecontains global audit
parameters
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hhF139.htm 20.08.2007
Chapter 2. An Overview of Mac OS X Page 73 of 80
/etc/security/audit_class File containing descriptions of audit event classes
/etc/security/audit_event File containing descriptions of audit events
/etc/security/audit_user File specifying event classes that are to be audited
on a per-user basis
/etc/security/audit_warn Administrator-configurable script run when the
audit daemon generates a warning
Auditing can be enabled or disabled by setting the AUDIT variable to -YES- or -NO-, respectively, in
the /etc/hostconfig file. The variable can also be set to -FAILSTOP- or -FAILHALT-, both of which
enable auditing with additional conditions. The former runs auditd with the -s argument, which specifies
that individual processes will stop if the audit log becomes full and running the processes will result in loss
of audit records. The latter runs auditd with the -h argument, which specifies that the system should halt in
case of an auditing failure.
The kernel logs to only one audit trail file at a time. Trail filenames use a specific format: a string consisting
of the file's creation time, followed by a period, followed by the termination time. The name of the active
trail filethat is, the one that has not been terminated yetcontains the string not_terminated instead of the
termination time. Both time substrings are constructed by using the %Y%m%d%H%M%S format specifier with the
strftime() function.
The audit_control, audit_user, and audit_warn files are typically modified to configure the auditing
system. Figure 239 shows the representative contents of an audit_control file.
Figure 239. An audit control file
# /etc/security/audit_control
# Directory/directories where audit logs are stored
#
dir:/var/audit
# Event classes that are to be audited system-wide for all users
# (Per-user specifications are in /etc/security/audit_user)
#
# This is a comma-separated list of audit event classes, where each class
# may have one of the following prefixes:
#
# + Record successful events
# - Record failed events
# ^ Record both successful and failed events