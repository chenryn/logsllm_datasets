spl x dc op1 n
spl dc t op1 (wx − n)
shl x t n
sequence of adds
sequence of subs
sequential C source codes through compiler optimization. GCC sup-
ports SIMD instructions via vector statements. The vector addition
statement v1(ℓ) = v2(ℓ) +v v3(ℓ) assigns to v1(ℓ) the elementwise
sum of v2(ℓ) and v3(ℓ). Similarly, the vector subtraction statement
v1(ℓ) = v2(ℓ) -v v3(ℓ) stores the elementwise difference of v2(ℓ)
and v3(ℓ) in v1(ℓ). In vector statements, v1(ℓ), v2(ℓ), and v3(ℓ) must
have the same element type and length.
Figure 9 gives the operational semantics of gimpleCryptoLine.
In the figure, a state θ : Var → Z is a mapping from variables to
values. Each rule specifies the effects of a statement on a state. Gen-
erally, each statement performs its computation by interpreting all
operands in unsigned types. Unsigned intermediate results are trun-
cated to the bit width of the destination variable. Finally, truncated
results are converted to correct types and stored in states.
The addition statement x = op1 + op2 computes the unsigned
sum of op1 and op2, truncates to the bit width of x, converts to the
type of x, and assigns the result to x. Subsequently, x will not be the
sum of op1 and op2 if over- or underflow occurs. Other statements
are similar except the wide multiplication and arithmetic right
shift statements. In wide multiplication, the product of operands is
always computed accurately. The semantics of the arithmetic right
shift statement uses the floor function to discard fractional parts.
Let v(ℓ) be a vector. v(ℓ)[i] denotes the i-th element of v(ℓ) for
0 ≤ i  2w−1 − 1
otherwise
for v ∈ Var
for z ∈ Z, w ∈ N
(cid:26) u(z, wv)
for v ∈ Var
s(z, wv)
θ) mod 2wx )]
θ) mod 2wx )]
θ + ⟦op2⟧u
θ × ⟦op2⟧u
(cid:26) cvt(x,⟦y⟧u
θ
θ
θ
θ
θ
θ
−−−−−−−−−−−→
x = op1 + op2
−−−−−−−−−−−→
x = op1 * op2
−−−−−−−−−−−→
x = op1 >> n
θ[x ← cvt(x,(⟦op1⟧u
θ[x ← cvt(x,(⟦op1⟧u
θ[x ← ⌊⟦op1⟧θ ÷ 2⟦n⟧θ ⌋]
x = op1 - op2
x = op1 w* op2
−−−−−−−−−−−→ θ[x ← cvt(x,(⟦op1⟧u
−−−−−−−−−−−−→ θ[x ← ⟦op1⟧θ × ⟦op2⟧θ]
−−−−−−−−−−−→ θ[x ← cvt(x,(⟦op1⟧u
θ - ⟦op2⟧u
θ) mod 2wx )]
θ × 2⟦n⟧θ ) mod 2wx )]
x = op1 << n
θ
θ
θ
v1(ℓ) = v2(ℓ) +v v3(ℓ)
−−−−−−−−−−−−−−−−−−→ θ[v1(ℓ)[i] ← cvt(v1(ℓ)[i],(⟦v2(ℓ)[i]⟧u
v1(ℓ) = v2(ℓ) -v v3(ℓ)
−−−−−−−−−−−−−−−−−−→ θ[v1(ℓ)[i] ← cvt(v1(ℓ)[i],(⟦v2(ℓ)[i]⟧u
cvt(x,⟦y⟧θ)
θ[x ← Y] where Y =
x = (T)y
−−−−−−−→
θ + ⟦v3(ℓ)[i]⟧u
θ - ⟦v3(ℓ)[i]⟧u
θ mod 2wx )
i =0
θ) mod 2wv1(ℓ))]ℓ−1
θ) mod 2wv1(ℓ))]ℓ−1
if wx < wy
otherwise
i =0
Figure 9: The semantics of gimpleCryptoLine
1 mov f03 f2_0
2 mov f14 f2_4
3 mov f25 f2_8
4 mov f36 f2_12
5 mov f47 f2_16
6 mov f58 f2_20
7 mov f69 f2_24
8 mov f710 f2_28
9 mov f811 f2_32
10 mov f912 f2_36
11 mov g014 g13_0
12 mov g115 g13_4
13 mov g216 g13_8
14 mov g317 g13_12
15 mov g418 g13_16
16 mov g519 g13_20
17 mov g620 g13_24
18 mov g721 g13_28
19 mov g822 g13_32
20 mov g923 g13_36
21 sub h024 f03 g014
22 sub h125 f14 g115
23 sub h226 f25 g216
24 sub h327 f36 g317
25 sub h428 f47 g418
26 sub h529 f58 g519
27 sub h630 f69 g620
28 sub h731 f710 g721
29 sub h832 f811 g822
30 sub h933 f912 g923
31 mov h34_0 h024
32 mov h34_4 h125
33 mov h34_8 h226
34 mov h34_12 h327
35 mov h34_16 h428
36 mov h34_20 h529
37 mov h34_24 h630
38 mov h34_28 h731
39 mov h34_32 h832
40 mov h34_36 h933
Let fe be an array representing a field element. From program-
mers’ comments in the fe_sub function (not shown), it is seen
that |fe[0]|<1.1*2^25, |fe[1]|<1.1*2^24, |fe[2]|<1.1*2^25,
|fe[3]|<1.1*2^24, and so on are required for each field element.
Now 1.1 × 225 = 36909875.2 and 1.1 × 224 = 18454937.6. Define
R(fe0, fe1, . . . , fe9) =
(−36909876@sint 32 < fe0 ∧ fe0 < 36909876@sint 32
∧ −18454938@sint 32 < fe1 ∧ fe1 < 18454938@sint 32
· · ·
∧ −18454938@sint 32 < fe9 ∧ fe9 < 18454938@sint 32).
The precondition for the C function is therefore
true ∧∧ R(f2_0, f2_4, . . . , f2_36) ∧ R(g13_0, g13_4, . . . , g13_36).
To specify the postcondition, it is necessary to understand how
a 255-bit field element is represented by an array of signed integers.
Let fe be an array representing a field element. FE(fe[0], fe[1],
. . . , fe[9]) gives the field element represented by fe where
FE(fe0, fe1, . . . , fe9) = fe0 × 20 + fe1 × 226+
fe2 × 251 + fe3 × 277 + fe4 × 2102 + fe5 × 2128+
fe6 × 2153 + fe7 × 2179 + fe8 × 2204 + fe9 × 2230.
That is, a field element is represented by 5 26-bit limbs (fe[0],
fe[2], . . ., fe[8]) and 5 25-bit limbs (fe[1], fe[3], . . ., fe[9]).
From programmers’ comments, define the output limb ranges by
R′(fe0, fe1, . . . , fe9) =
(−73819751@sint 32 < fe0 ∧ fe0 < 73819751@sint 32
∧ −36909876@sint 32 < fe1 ∧ fe1 < 36909876@sint 32
· · ·
∧ −36909876@sint 32 < fe9 ∧ fe9 < 36909876@sint 32).
The postcondition for fe_sub is therefore
FE(h34_0, . . . , h34_36) ≡
∧∧R′(h34_0, . . . , h34_36).
Using a laptop, our verification tool verifies the fe_sub function
in 2 seconds. The C function computes the difference of two field
elements correctly. There cannot be any over- or underflow if limbs
of input field elements are in ranges specified in the comments.
Each limb of the output field elements is always in ranges too.
FE(f2_0, . . . , f2_36) − FE(g13_0, . . . , g13_36) mod 2255 − 19
Our translator handles memory and pointer arithmetic automat-
ically. Several heuristics are implemented for better usability (such
as translating x = op1 − op2 to sub x op1 op2). Our verification
technique supports bitwise logical operations, comparators, and
branches as well. See [14] for a corresponding translation from
LLVM intermediate representation to CryptoLine.
5 EVALUATION
We implement our signed extension to CryptoLine and the gimple-
CryptoLine translator. The gimpleCryptoLine is implemented as
a GCC plugin. Our plugin translates the gimple representation of
any indicated C function after the machine-independent optimiza-
tion pass. If an unrecognized gimple statement is encountered, the
plugin simply copies the gimple statement for manual translation.
Session 7D: Formal Analysis IIICCS ’19, November 11–15, 2019, London, United Kingdom1602Table 2: Experimental Result
Function
LIR
LCL
D
P
TRM1
MRM1
TAM1 MAM1
TRM2 MRM2
-
nacl/curve25519/donna_c64/curve25519.c (MathSAT, SMT-LIB2 format)
-
4.05
0.95
2.61
0.22
-
6.3
0.23
6.3
0.20
5.6
0.20
6.3
0.22
4.8
0.15
OOM OOM
69
91
38
68
20
1147
69
127
38
116
20
1493
12.51
2.75
7.44
0.48
-
452.2
104.4
288.1
5.6
-
66
10
7
10
0
361
0
14
10
12
0
127
wolfssl/fe_operations.c (Boolector with Lingeling, BTOR format)
-
bitcoin/field_5x52_impl.h (Boolector with Lingeling, BTOR format)
secp256k1_fe_normalize
secp256k1_fe_normalize_var
secp256k1_fe_normalize_weak
secp256k1_fe_normalizes_to_zero
52
63
26
34
60
63
26
39
21
29
15
10
0
0
0
0
117.18