在自动注册动作配置界面中，难点是设置自动注册的条件。“计算方式”选择默认的
经过三个步骤的操作，Zabbix的自动发现配置就完成了，稍等片刻，就会有符合条件
2.配置网络自动注册规则
自动注册请求发生在每次客户端发送一个刷新主动检查请求到服务器时。请求的延时
打开客户端配置文件zabbix_agentd.conf，修改如下配置。
》在ZabbixWeb中配置一个动作（action）。
》在客户端配置文件中设置参数。
配置主动客户端自动注册有两个步骤。
自动注册（agent auto-registration）功能主要用于 agent主动且自动向 server注册。与
此界面是设置自动发现主机后，要执行哪些操作，这里重点是设置操作的细节。单
>Server=172.16.213.235。
1.客户端修改配置文件
Linux服务器，另一个就是写一个通用的带有公司标识的字符串。
HostMetadata=linuxzabbix.alibaba。#这里设置了两个元数据，
Hostname=elk_172.16.213.71。
ServerActive=172.16.213.235。#这里是主动模式下Zabbix server服务器的地址
运维监控利器Zabbix第6章
一个是告诉自己是
257
---
## Page 269
“Template OSLinux”模板也自动链接到此主机下，最后在ZabbixWeb中启用这台主机。
左下角的“新的”按钮可以设置多个操作动作，一般情况下设置4个即可，也就是发现主
作”选项卡，进入如图6-33所示的设置界面。
高性能 Linux服务器运维实战：shell编程、
258
此界面是设置自动注册主机后，
除了自动注册条件的设置，还需要设置自动注册后操作的方式，单击图6-32中的“操
动作
主机群组换板主机维护动作关联项事件自动发现服务
ZABBIX蓝测资产记录报表配置管理
动作
动作
操作
新的触发条件
图6-33设置自动注册主机后自动执行的操作
消息内容
默认标题
计算方式
已启用
名称自动注册规则
操作
条件
Auto registration:(HOSTHOST)
必须至少设置一个执行内容。
添加
与/成（默认)AorB
添加取消
必须至少设置一个执行内容。
启用主机
添加到主机群组：Discoveredi hosts
添加主机
添加取消
链接到模板：TemplateOSLinux
主机元教据包含
图6-32
：要执行哪些操作，这里重点是设置操作的细节。单击
主机元数据包含inux
主机元数据包含zabbixalibaba
创建自动注册规则
监控告警、性能优化与实战案例
---
## Page 270
130.4.1.2
型，{#IFNAME}表示网卡名称，{#SNMPINDEX}会获取OID 中最后一个值，例如：
{#SNMPVALUE}等。其中，{#FSNAME}表示文件系统名称，{#FSTYPE}表示文件系统类
在主机、模板以及全局，宏变量都是大写的。使用宏变量，可以使Zabbix功能更加强大。
#
231 -k net.if.discovery
只能在 Web 页面中进行配置使用。下面是 zabbix-get 的一个例子：
同的监控项，那就太烦琐了，此时使用 Zabbix的低级发现功能就可以解决这个问题。
开头的，还有些网卡是enpsO开头的。遇到这种情况，如果分别针对不同的网卡名设置不
网卡的名称也不完全相同，有些操作系统的网卡名称是eth开头的，而有些网卡名称是em
指定需要监控的网卡是eth0，而将网卡作为一个通用监控项时，根据主机操作系统的不同，
6.4.3低级别发现Low-leveldiscovery（LLD）
的主机自动添加到ZabbixWeb中来。
Zabbix还支持用户自定义的宏，这些自定义的宏也有特定的语法：
在对主机的监控中，可能出现这样的情况，例如，对某主机网卡etho进行监控，可以
在LLD中，常用的内置宏有{#FSNAME}、{#FSTYPE}、{#IFNAME}、{#SNMPINDEX}、
在自动发现中使用Zabbix自带的宏，固定的语法格式为：
其中，{#IFNAME}是一个宏变量，会返回系统中所有网卡的名字。宏变量可以定义
可以用 zabbix-get 来查看key 获取的数据。对于 SNMP，不能通过zabbix-get 来验证，
》net.if.discovery：适用于Zabbix agent监控方式。
snmp.discovery：SNMPagent监控方式。
》vfs.fs.discovery：适用于Zabbix agent监控方式。
在Zabbix中，支持几种现成类型的数据项发现。
经过两个步骤的操作，Zabbix的自动注册配置就完成了，稍等片刻，就会有符合条件
下面是Zabbix 自带的 LLD key。
》CPU核和状态。
SNMPOID发现
文件系统发现。
网络接口发现
#snmpwalk-v2c-cpub1ic10.10.10.109 1.3.6.1.4.1.674.10892.5.5.1.20.
{SMACRO}
{#MACRO}
{"data"：[{"{#IFNAME}":"ethO"},{"{#IFNAME）":"lo"}，{"{#IFNAME）":"virb
[root@localhost~]#/usr/local/zabbix/bin/zabbix_get
运维监控利器Zabbix第6章
-S172.16.213
259
---
## Page 271
260
为要运行的命令或者脚本。下面是一个简单的例子：
parameter中，Zabbix server读取配置文件中的返回值，通过处理前端的方式返回给用户。
就相当于通过脚本获取要监控的值，然后把相关的脚本或者命令写入到配置文件中的User
数的方法来监控要求的项目item。形象一点说Zabbix代理端配置文件中的User parameters
6.4.4
的宏。若是在各级别都没找到宏，将不使用宏。
"Physical Disk 0:1:2"
"Physical Disk 0:1:1"
"Physical Disk 0:1:0"
高性能Linux服务器运维实战：shell编程、监控告警、性能优化与实战案例
置，
再看一个稍微复杂的例子：
此例子表示当在服务器端添加 item 的 key 为 ping 时，代理程序将会永远返回1。
其中,UserParameter为关键字，key为用户自定义，key的名字可以随便起，
UserParameter用于自定义itme。语法格式为：
启用agent端自定义item功能，设置此参数为1后，就可以使用UserParameter指令了。
1.Zabbix agent 端开启 Userparameter指令
当监控的项目在Zabbix预定义的key中没有定义时，可以通过编写Zabbix的用户参
那
因此，Zabbix查找宏的顺序为：
V
V
宏的级别有多种，其优先级由高到低顺序如下。
那么，
Zabbix自定义监控项
么Zabbix就会去模板中看是否设置有宏。如果模板中也没有，将会查找使用全局
全局级别的宏。
第2级模板中的宏。
第1级模板中的宏。
主机级别的宏优先级最高。
SNMPv2-SMI::enterprises.674.10892.5.5.1.20.130.4.1.2.3
UnsafeUserParameters=1
SNMPv2-SMI::enterprises.674.10892.5.5.1.20.130.4.1.2.2
SNMPv2-SMI::enterprises.674.10892.5.5.1.20.130.4.1.2.1
UserParameter=mysql.ping,
UserParameter=ping,echo1
UserParameter=,
[#SNMPINDEX}
(#SNMPINDEX)
(#SNMPINDEX}
{#SNMPINDEX}、
->1，[#SNMPVALUE]
—>
3，[#SNMPVALUE}
【#SNMPVALUE}获取到的值为：
[#SNMPVALUE}
：首选查找主机级别的宏，如果在主机级别不存在宏设
/usr/local/mysql/bin/mysqladmin pinglgrep
->"Physical Disk 0:1:2"
->"Physical Disk 0:1:0"
>"Physical Disk 0:1:1"
STRING:
STRING
STRING
---
## Page 272
式监控和调整 Zabbix agentd 为主动模式
主要表现如下。
的时候，由Zabbix server 端去抓取 agent上的数据，Zabbix server 会出现严重的性能问题，
是被动模式，也是默认的一种获取数据的方式。但是，当Zabbix server监控主机数量过多
6.4.5Zabbix的主动模式与被动模式
示命令，也就是客户端系统中可执行的命令，看下面一个例子：
如果为userd时，返回的是内存已经使用的大小。相关语法如下：
存活，则状态将返回1，否则，状态将返回0。
存活状态。
为1，如果不存活，明显mysqld is alive的个数为0，通过这种方法可以来判断MySQL的
-Calive
Zabbix agentd 主动模式的含义是agentd 端主动汇报自己收集到的数据给Zabbix
2.让key 接受参数
当在服务器端添加 item的key为mysql.ping时候，对于Zabbix代理程序，如果MySQL
此例子表示当执行 mysqladmin -uroot ping 命令的时候，如果 MySQL 存活要返回
修改 zabbix_agentd.conf配置文件，主要是如下3个参数：
1．主动模式下 Zabbix agentd的配置参数
所以下面主要从两个方面进行优化，分别是：通过部署多个Zabbix proxy模式做分布
》Web操作很卡，
默认情况下，Zabbix server会直接去每个 agent上抓取数据，这对于Zabbix agent来说，
如果执行 ping[0]，那么将一直返回“0，
其中，key的值在主机系统中必须是唯一的，*代表命令中接受的参数，command表
其中，mode模式就是用户要接受的参数，当为free时，则返回的为内存的剩余大小，
让key也接受参数的方法使item添加时更具备了灵活性，例如，下面这个系统预定义key：
监控告警不及时。
监控图形中图层断裂。
StartAgents=l
ServerActive=172.16.213.235
UserParameter=ping[*],echo $1
UserParameter=key[*],command
vm.memory.size[]
Hostname=172.16.213.231
，容易出现502错误。
，如果执行 ping[aa]，将一直返回‘aal
运维监控利器Zabbix第6章
261
---
## Page 273
262
的监控可以分成两个步骤完成。
自带了MySQL监控的模板，只需要编写一个监控MySQL的脚本即可，所以对MySQL
6.5.1Zabbix监控MySQL应用实战
Zabbix对应用软件的监控其实并不难。
模板文件有些难度，不过网上已经有很多已经写好的模板，可以直接拿来使用，所以，
性能问题解决了。
server的负载，应该会降低不少，在操作上，服务器也不卡了，图层也不裂了，Zabbix的
“Zabbix客户端”改成“Zabbix客户端（主动式）”。
始就是使用主动模式的话，
端的10050端口也关闭了，这里为了兼容被动模式，没有把 StartAgents设为0，如果一开
StartAgents默认为3，要关闭被动模式，设置 StartAgents 为0即可，关闭被动模式后，agent
另一个是编写模板并导入ZabbixWeb。编写自定义监控脚本要根据监控需求定制，而编写
端添加主机时的主机名对应起来，这样Zabbixserver 端接收到数据才能找到对应关系：
高性能Linux服务器运维实战：shell编程、监控告警、性能优化与实战案例
6.5
这样经过3个步骤的操作，就完成了主动模式的切换。调整之后，可以观察乙abbix
ServerActive是指定 agentd收集的数据往哪里发送；Hostmname必须要和 Zabbix Web
这里给出一个线上运行的MySQL 监控脚本 check_mysql，内容如下：
1.Zabbix添加自定义监控MySQL脚本
本节首先要介绍的是Zabbix对MySQL 的监控，这个是最简单的，因为 Zabbix已经
Zabbix对第三方应用软件的监控主要有两个工作难点，
因为收集数据的模式发生了变化，
3.调整模板
》StartPollers=10：把这个Zabbix server主动收集数据进程减少一些。
保证性能。
如果开启了agent 端的主动发送数据模式，还需要在 Zabbix server 端修改如下两个参
2.Zabbixserver端配置调整
MYSQL_PORT='3306!
#端口
MYSQLHOST=127.0.0.1
#主机地址/IP
#!/bin/bash
Zabbix监控MySQL、Apache、Nginx应用实战案例
因此还需要把所有的监控项的监控类型由原来的
一个是编写自定义监控脚本
---
## Page 274
-d"|"-f3
-d"↑"-f3
cut
-d"|"-f3
-d"|"-f3
-d"|"-f3
case $1 in
#获取数据
if[s#-ne"1"];then
#参数是否正确
#数据连接
i
Com_delete)
Com_insert)
Questions)
Com_rollback)
Com_select)
slow_queries)
Com_update)
Uptime)
result=`$(MYsQL_coNN} extended-status Igrep-w"Com_delete"|cut
result=${MYsQL_coNN} extended-status Igrep-w"Com_insert"|cut
reSult=${MYSQL_CONN}
result=$(MYsQL_CONN) extended-status Igrep -w "Com_rollback"|
result=${MYsQL_CONN} extended-status |grep-w"Com_select"|cut
result=${MYsQL_CoNN} status |cut-f5-d":"|cut-f1 -d"o"
result=`${MYsQL_coNN} extended-statusIgrep-w"Com_update"|cut
result=${MYSQL_CONN} status|cut-f2-d":"|cut-f1-d"T"
echo
echo $result
echo
echo $result
Sresult
Sresult
echo Sresult
echo
echo
echo
$result
$result
Sresult
status|cut-f4-d":"|cut-f1-d"s"
运维监控利器Zabbix第6章
263
---
## Page 275