create object
modify object
For our convenience, we require that the body of a new or next
clause contains exactly one positive literal. In examples, we some-
times omit that literal, or write several literals instead, since the
required literal can be equivalently deﬁned by a Datalog clause.
The Datalog fragment of an EON program P is written asbP. We
say that P is safe ifbP is safe, and P is stratiﬁed ifbP is stratiﬁed. In
the sequel, we consider only safe stratiﬁed programs.
2.2 Semantics
We now give an operational semantics for EON programs.
Speciﬁcally, we describe the reduction of an EON program P by a
P
binary relation
a (possibly nondeterministic) transition system over databases.
−→ over databases; thus, an EON program deﬁnes
We ﬁrst describe the semantics of the new operator. The clause
“new B :− R.” is enabled if R evaluates to true in the current
database. Execution of the clause creates a fresh constant c and
adds B(c) to the database, for every B in B.
new B :− R. ∈ P
c is a fresh constant
R ∈ I(bP, DB)
DB+ = {B(c) | B ∈ B}
DB
P
−→ DB ∪ DB+
Next, we describe the semantics of the next operator. The clause
“next B(x), !B′(x) :− R(x).” is enabled if there is some constant
c such that R(c) evaluates to true in the current database. Execution
of the clause modiﬁes the interpretation of some relations in E for
c. Speciﬁcally, it adds B(c) to the database for every B in B and
removes B(c) from the database for every B in B′. Note that if
there are several constants c such that R(c) evaluates to true in the
current database, then execution of the clause non-deterministically
chooses one such c for the update.
next B(x), !B′(x) :− R(x). ∈ P
DB+ = {B(c) | B ∈ B}
DB− = {B(c) | B ∈ B′}
R(c) ∈ I(bP, DB)
DB
P
−→ DB ∪ DB+\DB−
The reﬂexive transitive closure of
P
−→ is written as
P
−→⋆.
2.3 Queries
Queries in EON can include basic (Datalog-style) queries; they
can further use the operator # to sequence such queries.
Q ::=
S
S # Q
EON query
basic query
sequencing
As usual, for our convenience we require that a basic query con-
tains exactly one positive literal; elsewhere, we often write several
literals instead. Let σ range over substitutions of variables by con-
stants. The judgment DB, DB′, σ ⊢P Q means that:
“Starting from a database DB, the program P eventu-
ally reaches a database DB′, satisfying the query Q
with substitution σ".
We ﬁrst describe the semantics of basic queries.
If the initial
database DB evolves to a database DB′ such that Sσ evaluates to
true in DB′, then the program satisﬁes the basic query S with sub-
stitution σ.
DB
P
−→⋆ DB′
DB, DB′, σ ⊢P S
Sσ ∈ I(bP, DB′)
Next, we describe the semantics of sequencing.
If the initial
database DB evolves to a database DB′ such that the basic query
S is satisﬁed with substitution σ, and DB′ evolves to a database
DB′′ such that the query Q is satisﬁed with substitution σ, then the
program satisﬁes the query S # Q with substitution σ.
DB′, DB′′, σ ⊢P Q
DB, DB′, σ ⊢P S
DB, DB′′, σ ⊢P S # Q
3. QUERY EVALUATION IN EON
We now describe how EON queries can be evaluated. Formally,
the query evaluation problem for EON is:
Given an EON program P and an EON query Q, are
there some database DB and substitution σ such that
∅, DB, σ ⊢P Q?
We show that this problem is decidable under some suitable as-
sumptions of monotonicity (see below). The essence of our algo-
rithm is to reduce the EON query evaluation problem to a decidable
satisﬁability problem over Datalog.
Recall that, given a Datalog program F and a database DB,
I(F, DB) denotes the result of evaluating F over DB. Given a pos-
itive literal S, we use the notation DB ⊢F S to indicate that there
is some substitution σ such that I(F, DB) contains Sσ. Now, S is
satisﬁable in F if there exists a database DB such that DB ⊢F S.
The following satisﬁability problem over Datalog is decidable.
THEOREM 1
(A DECIDABLE FRAGMENT OF DATALOG [12]).
Satisﬁability is decidable for safe stratiﬁed Datalog programs with
unary base relations.
Recall that a database is a set of base facts. Given an EON pro-
gram P, we say that a database is reachable in P if it can be reached
from the initial database ∅ by a sequence of transitions deﬁned by
P. Now, the only base facts in any reachable database are over
relations in E . In the sequel, we focus on such databases. In par-
ticular, we view a database DB as a pair (U, I), where U is a set of
constants and I : E → 2U .
Given a database DB = (U, I) and a subset of constants X ⊆ U ,
we deﬁne the restriction of DB to X, denoted DB|X , to be (X, IX),
where IX (B) , I(B)∩X. We say that DB1 ≤ DB2 if there exists
an X such that DB1 = DB2|X .
Now, a positive literal S is monotonic in P if for all DB1 and
DB2, if DB1 ⊢bP S and DB1 ≤ DB2, then DB2 ⊢bP S.
3.1 Basic queries, unguarded transitions
Suppose that we are given a basic query S to evaluate on an
EON program P. We assume that S is monotonic in P. Further,
suppose that all dynamic clauses in P are unguarded. A new clause
is unguarded if its body is a fact (e.g., “True.") in the program. A
next clause is unguarded if the relation in its body is a pure relation.
The concept of a pure relation is deﬁned inductively as follows: a
(unary) relation R is pure if either R ∈ E , or every clause in the
program with R in its head is of the form “R(x) :− L1, . . . , Ln.”,
where each Li is either Ri(x) or !Ri(x) for some pure Ri.
Note that an unguarded new clause is always enabled. Whether
an unguarded next clause is enabled for a constant c depends only
on the value of the relations in E for c.
Now, we evaluate S on P by translating P to a Datalog program
⌊P⌋, and deciding if there exists a database DB such that DB ⊢⌊P⌋
S and DB is reachable in P. The latter problem is reduced to a basic
satisﬁability problem of the form DB ⊢⌊P⌋ ⌊S⌋, by encoding the
reachability condition into ⌊P⌋ and deﬁning ⌊S⌋ to be S augmented
with the reachability condition.
Given a constant c that belongs to a database DB = (U, I), we
deﬁne its atomic state to be the set {B ∈ E | c ∈ I(B)}. We say
that an atomic state X ⊆ E is reachable if there exists a reachable
database DB that contains a constant whose atomic state is X.
LEMMA 1. Given an EON program P in which all dynamic
clauses are unguarded, a database DB is reachable iff all constants
in the database have a reachable atomic state.
THEOREM 2. Given an EON program P in which all dynamic
clauses are unguarded, a monotonic basic query S is true in P iff
the query ⌊S⌋ is satisﬁable in the Datalog program ⌊P⌋.
3.1.1 From EON to Datalog
We now show how reachable atomic states can be encoded in
Datalog. Speciﬁcally, given a EON program P, we deﬁne a set of
Datalog clauses T (P) for a unary relation Reachable, such that
every constant in Reachable has a reachable atomic state, and
every constant that has a reachable atomic state is in Reachable.
Some of these clauses are not safe. Later, we present a clause trans-
formation that uniformly transforms all clauses to ensure safety.
We begin by deﬁning some auxiliary relations. Let E =
{B1, . . . , Bk}. For each Bi (i ∈ {1, . . . , k}), we include the fol-
lowing Datalog clauses, that check whether a pair of constants have
the same value at Bi:
SameBi(x, y)
SameBi(x, y)
:− Bi(x), Bi(y).
:− !Bi(x), !Bi(y).
Now, consider an unguarded new clause of the form:
new Bi1 , . . . ,Bim .
Let {Bj1 , . . . ,Bjn } = E\{Bi1 , . . . , Bim }. We replace this clause
with the following reachability clause in Datalog:
Reachable(x)
:− Bi1 (x), . . . ,Bim (x),
!Bj1 (x), . . . , !Bjn (x).
This clause may be read as follows: a satisfying database for the
transformed Datalog program may contain a constant x whose
atomic state is {Bi1 , . . . ,Bim }. Intuitively, new constants in EON
are represented by existentially quantiﬁed variables in Datalog.
Now, consider an unguarded next clause of the form:
next Bi1 (x), . . . ,Bim (x),
!Bj1 (x), . . . , !Bjn (x)
:− R(x).
Let {Bk1 , . . . , Bkr } = E\{Bi1 , . . . , Bim , Bj1 , . . . , Bjn }. R is
pure; so we replace this clause with the following reachability
clause in Datalog:
Reachable(x)
:−
Reachable(y), R(y),
Bi1 (x), . . . ,Bim (x),
!Bj1 (x), . . . , !Bjn (x),
SameBk1 (x, y), . . . ,SameBkr (x, y).
This clause may be read as follows: a satisfying database for the
transformed Datalog program may contain a constant x whose
atomic state is B ∪ {Bi1 , . . . ,Bim } \ {Bj1 , . . . ,Bjn }, if that
database also contains a constant y that satisﬁes R(y) and has some
atomic state B. Intuitively, the Datalog variables x and y represent
the same EON constant, in possibly different “states", one of which
can be reached from the other.
Finally, the following clause checks whether there is any con-
stant in a satisfying database for the transformed Datalog program
whose atomic state is unreachable:
BadState :− !Reachable(x).
The set of clauses T (P) contains all of the clauses above. Now,
let U ∈ E be a fresh relation, which models the range of substitu-
tions. For any clause C ∈ T (P), we obtain a transformed clause
⌊C⌋ by augmenting the body of C with an additional condition U(x)
for every variable x in C. The clause ⌊C⌋ is guaranteed to be safe.
Now, let ⌊P⌋ = {⌊C⌋ | C ∈ bP ∪ T (P)}. Let ⌊S⌋ be the query
S, ! BadState augmented with an additional condition U(x) for
every variable x in S. We then have the following result.
3.1.2 An optimization
The use of (double) negation to deﬁne the transformed query
⌊S⌋ can lead to potential inefﬁciencies in the satisﬁability algo-
rithm (described in [7]). We can eliminate the use of this negation
by transforming every Datalog clause C in the given program P
as follows: we augment the body of the clause with the condition
Reachable(x) for every variable x in the body. (It is possible to
further optimize this transformation, by adding the condition only
for variables that do not occur in the head of the clause, as long as
we add a similar condition for all variables occurring in S.)
3.2 Basic queries, monotonic transitions
Guarded dynamic clauses do not signiﬁcantly complicate the
transformation. The reachability clause generated for a guarded
dynamic clause now includes the guard (i.e., the literal in the body
of the dynamic clause) in the body of the reachability clause. The
correctness proofs require the guards to be monotonic. Speciﬁcally,
a generalization of Lemma 1 holds true even for programs with
guarded dynamic clauses, as long as the guards are monotonic.
Recall that in the case of unguarded dynamic clauses,
the
Reachable relation depends only on the relations in E , the auxil-
iary relations SameBi, and itself. However, the encoding of guards
in reachability clauses makes the Reachable relation dependent
on other relations mentioned in those guards. If we now do the op-
timization of Section 3.1.2, which adds reachability conditions to
the clauses of the given program, we may introduce cyclic depen-
dences between Reachable and other relations. Thus, we must
verify that the transformed program is stratiﬁed before checking
satisﬁability on the transformed program. Interestingly, it turns out
that the transformed program is stratiﬁed if and only if the guards
are monotonic. This result yields a simple method to test for the
monotonicity of guards.
3.3 Queries with sequencing
Finally, we show how we can handle queries with sequencing.
We assume that every basic query in such queries is monotonic.
Consider the query S # Q. We ﬁrst assume that S and Q share
exactly one variable x. Let Done ∈ E be a fresh relation, and Q
be of the form S1 #
# Sn, for some n ≥ 1. We augment the
original EON program with the following dynamic clause: