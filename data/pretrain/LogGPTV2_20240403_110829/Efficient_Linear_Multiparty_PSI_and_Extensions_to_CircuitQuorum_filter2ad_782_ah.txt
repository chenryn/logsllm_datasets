KMPRT
Ours
4, 1
216
2.47
1.60 (B)
4, 1
216
10.3
7.0 (A)
212
0.28
0.23 (B)
212
2.5
1.9 (A)
220
41.30
23.80 (C)
212
0.39
0.23 (B)
220
108.2
69.6 (C)
212
3.7
2.2 (A)
LAN Setting
220
65.43
25.48 (C)
WAN Setting
212
0.67
0.31 (B)
220
196.2
86.3 (C)
212
4.2
3.0 (A)
5, 2
216
4.03
1.66 (B)
5, 2
216
14.4
7.6 (A)
10, 4
216
6.77
2.48 (B)
10, 4
216
37.6
10.4 (C)
220
98.04
31.45 (C)
212
1.40
0.44 (B)
220
615.4
153.9 (C)
212
6.8
3.3 (A)
15, 7
216
13.32
3.27 (C)
15, 7
216
87.6
15.4 (C)
220
193.90
39.45 (C)
220
1524.5
244.8 (C)
Table 4: Total run-time in seconds of mPSI protocols: KMPRT [51] and Ours. For our protocols, we report the best time among
the three protocols and the label in parenthesis denotes the name of this protocol.
Gbps and round-trip latency of 0.06ms. For WAN setting, we set the
network bandwidth to 200 Mbps and round-trip latency to 96ms.
In this section, 𝑛, 𝑡 and 𝑚 denote the number of parties, cor-
ruption threshold and the size of the input sets respectively. In
our experiments, we consider the following values of (𝑛, 𝑡): (4, 1),
(5, 2), (10, 4) and (15, 7). We note that among these, three settings,
namely, (4, 1), (5, 2), and (15, 7) were considered explicitly in the
experimental analysis of KMPRT [51, Section 7]. We compare the
performance with the implementation of KMPRT provided at [60].
6.1 Communication Comparison of mPSI
In this section, we compare the concrete communication cost of our
most communication frugal mPSI protocol Protocol A with KMPRT
[51]. Table 2 summarizes the overall communication cost of of both
of these protocols. As can be observed from the table, Protocol A is
2.3 − 5.2× more communication efficient than KMPRT protocol9.
Further, as noted earlier, the clients (parties 𝑃2, . . . , 𝑃𝑛) in our
protocol are much more light-weight compared to clients in KMPRT
as illustrated by Table 3. The concrete communication cost of a
client in Protocol A is 2.6 − 6× less than that of KMPRT protocol.
9Protocol A’s implementation builds on the Polynomial based Batch OPPRF’s [65]
implementation at [25] that uses Mersenne prime 261 − 1. We note that this only gives
statistical security of 38 bits for input sets of size 220. To obtain statistical security
of 40 bits, one can implement Protocol A over a field with at least 263 elements, i.e.,
each element is represented using 64 bits. However, in the implementation, since an
element over prime field with Mersenne Prime 261 − 1 is communicated using 64 bits,
the number in the table gives a correct bound on communication of Protocol A with
40 bits of security.
Recall that a client in KMPRT is involved in 2𝑡 + 3 calls to OPPRF
functionality whereas in our protocol a client only makes a single
call to wPSM functionality followed by the interaction in Evaluation
phase (step 4 in Figure 4).
6.2 Run-time Comparison of mPSI
In this section, we compare the run-times of our mPSI protocols
with that of KMPRT [51]. In Table 4, we report the run-time of KM-
PRT along with the run-time of our best performing protocol (i.e.,
Protocol A, Protocol B, or Protocol C as discussed above). For each
entry in Table 4, we report the median value across 5 executions.
Our best protocol achieves a speedup of 1.2 − 4.9× and 1.3 − 6.2×
over KMPRT in LAN and WAN settings respectively. This is because
KMPRT protocol involves execution of 𝑛(𝑡 + 2) − 1 instances of
OPPRF protocol whereas our protocols involve execution of just
𝑛 − 1 wPSM protocols followed by a very efficient Evaluation phase.
In the LAN Setting, Protocol A is the least efficient of our three
mPSI protocols. This is because Protocol A involves expensive com-
putation of polynomial interpolation in contrast to Protocol B and
Protocol C which involve inexpensive hashing computations. Be-
tween Protocol B and Protocol C, there is a trade-off between com-
pute and communication. Protocol B has non-linear (in set-size 𝑚)
communication that starts to dominate as 𝑚 increases. Protocol C
has higher fixed compute but linear communication in 𝑚. Hence,
Protocol C is slower than Protocol B for smaller set size but is faster
as the set size increases.
In the WAN Setting, Protocol A owing to its least concrete com-
munication cost, is the most efficient for small set sizes. But as
Session 4C: Private Set Intersection CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1193𝑛
𝑚
Run-time LAN (s)
Run-time WAN (s)
Total Communication (MB)
Client Communication (MB)
4
216
2.91
13.74
209.86
69.95
212
1.46
7.10
16.98
5.66
218
9.32
34.04
874.23
291.41
212
1.62
6.98
24.64
6.16
5
216
3.10
15.44
290.68
72.67
218
9.49
39.34
1166.28
291.57
212
2.19
7.88
55.44
6.16
10
216
4.12
23.08
667.73
74.19
218
11.27
74.02
2627.01
291.9
212
2.26
8.14
86.24
6.16
15
216
4.54
31.28