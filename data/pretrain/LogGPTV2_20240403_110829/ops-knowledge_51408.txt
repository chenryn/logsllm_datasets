User: I am currently working on exposing data from legacy system over the web. I have a (legacy) server application that sends and receives data over UDP. The software uses UDP to send sequential updates to a given set of variables in (near) real-time (updates every 5-10 ms). thus, I do not need to capture all UDP data -- it is sufficient that the latest update is retrieved.
In order to expose this data over the web, I am considering building a lightweight web server that reads/write UDP data and exposes this data over HTTP.
As I am experienced with Python, I am considering to use it.
The question is the following: how can I (continuously) read data from UDP and send snapshots of it over TCP/HTTP on-demand with Python? So basically, I am trying to build a kind of "UDP2HTTP" adapter to interface with the legacy app so that I wouldn't need to touch the legacy code.
A solution that is WSGI compliant would be much preferred. Of course any tips are very welcome and MUCH appreciated!
Assistant: The software uses UDP to send sequential updates to a given set of variables in (near) real-time (updates every 5-10 ms). thus, I do not need to capture all UDP data -- it is sufficient that the latest update is retrieved

What you must do is this.
Step 1.
Build a Python app that collects the UDP data and caches it into a file.  Create the file using XML, CSV or JSON notation.
This runs independently as some kind of daemon.  This is your listener or collector. 
Write the file to a directory from which it can be trivially downloaded by Apache or some other web server.  Choose names and directory paths wisely and you're done.
Done.
If you want fancier results, you can do more.  You don't need to, since you're already done.
Step 2.  
Build a web application that allows someone to request this data being accumulated by the UDP listener or collector.
Use a web framework like Django for this.  Write as little as possible.  Django can serve flat files created by your listener.
You're done.  Again.
Some folks think relational databases are important.  If so, you can do this.  Even though you're already done.
Step 3.
Modify your data collection to create a database that the Django ORM can query.  This requires some learning and some adjusting to get a tidy, simple ORM model.
Then write your final Django application to serve the UDP data being collected by your listener and loaded into your Django database.