### Static Analysis and Template Extraction

To evaluate the effectiveness of our static analysis, we measure the amount of context it extracts about the strings passed to injection APIs. Our evaluation focuses on three key aspects:

1. **Known Characters in Templates:**
   - For each call site, we calculate the average number of known characters per template.
   - The majority of call sites (over 78.76%) contain at least 10 known characters.
   - In 10,967 call sites (21.24%), no known characters are present, indicating that our approach relies entirely on dynamic information.

2. **Unknown Parts in Templates:**
   - We assess the number of unknown parts (holes) in the extracted templates.
   - As shown in Figure 13a, most call sites have at most one hole, with very few templates containing more than five holes.
   - The presence of a large number of holes is often due to the string being constructed in a loop that appends unknown values. The static analysis unrolls such loops a finite number of times, leading to a higher number of unknown parts.

3. **Number of Extracted Templates:**
   - We measure how many templates the analysis extracts per call site.
   - Since different execution paths can result in different string values at a call site, the analysis may yield multiple templates.
   - Figure 13b indicates that for most call sites, a single template is extracted.

### Reasons for Imprecision

To better understand the sources of imprecision in the static analysis, we analyze the frequency of specific nodes in the template trees:

- **Function Parameters:**
  - 17.48% of all call sites have a template tree with at least one node representing a function parameter.
  - This suggests that an inter-procedural static analysis could potentially collect more context than our current intra-procedural approach.

- **Unmodeled String Operations:**
  - We also measure the occurrence of nodes corresponding to string operations not modeled by the analysis and calls to functions named "escape," "quote," or "sanitize."
  - These nodes appear in only 3.03% of all call sites, reinforcing the observation that sanitization is the exception rather than the rule in npm modules.

### Analysis Efficiency

- **Timeout and Performance:**
  - Our analysis stops after a one-minute timeout. For 96.27% of the 15,604 modules, the analysis completes successfully without hitting the timeout.
  - The average analysis time for these modules is 4.38 seconds, demonstrating the low computational cost of our approach.

### Conclusion

The static analysis is effective for the majority of call sites of injection APIs. It either successfully identifies statically known values or provides enough context to generate meaningful security policies for runtime checks. This confirms our design decision to use a scalable, intra-procedural analysis. The primary reason for its success is that most strings passed to injection APIs are constructed locally and without input-dependent path decisions.

### Runtime Mechanism Evaluation

For evaluating the runtime mechanism, we consider a set of 24 vulnerable modules listed in Figure 14. These include modules reported as vulnerable on the Node Security Platform, modules with vulnerabilities found during our study, and clients of known vulnerable modules.

- **Input Types:**
  - We test each module with both benign and malicious inputs that propagate to the call sites of injection APIs.
  - Benign inputs are derived from module documentation, while malicious inputs are crafted to achieve specific goals, such as adding a property to the global `console` object or creating a file in the filesystem.

- **Injection Vectors:**
  - Injection vectors include module interfaces, network requests, file system reads, and command line arguments.
  - In total, we use 56 benign inputs and 65 malicious inputs.

### False Positives

- **Rate and Causes:**
  - Across the 56 benign inputs, we observe five false positives, resulting in a false positive rate of 8.92%.
  - Three false positives are due to limitations in our static analysis, such as the inability to model certain built-in functions like `Array.map`.
  - The remaining two false positives are caused by the set of safe node types in our runtime mechanism, which may not cover all possible safe AST nodes.

### False Negatives

- **Evaluation Results:**
  - During our evaluation, Synode prevents all attempted injections, resulting in no false negatives.
  - However, in general, false negatives can occur if the static analysis fails to identify highly dynamic sink calls, such as:
    ```javascript
    global["ev"+"al"](userInput);
    ```

### Analysis Running Time

- **Completion Rate:**
  - Our analysis successfully completes for 96.27% of the 15,604 modules without hitting the one-minute timeout.
  - The average analysis time is 4.38 seconds, highlighting the efficiency of our approach.

### Summary

Our approach effectively prevents injections with a reasonably low false positive rate, making it suitable for fully-automated security mechanisms. The static analysis and runtime enforcement work together to provide robust protection against injection attacks.