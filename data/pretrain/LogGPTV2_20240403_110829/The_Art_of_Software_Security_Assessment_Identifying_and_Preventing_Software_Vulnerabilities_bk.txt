   int *w = (int *)packet; 
   unsigned int hdrvar, datasize; 
   /* packet format is hdr var, data size, padding size */ 
   hdrvar = GET32(w); 
   if (hdrvar & FLAG_PADDING) 
       datasize = GET32(w) - GET32(w); 
   else 
       datasize = GET32(w); 
   ... 
} 
Structure Padding 
One somewhat obscure feature of C structures is that structure members don't have 
to be laid out contiguously in memory. The order of members is guaranteed to follow 
the order programmers specify, but structure padding can be used between members 
to facilitate alignment and performance needs. Here's an example of a simple 
structure: 
struct bob 
{ 
    int a; 
    unsigned short b; 
    unsigned char c; 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
302 
}; 
What do you think sizeof(bob) is? A reasonable guess is 7; that's sizeof(a) + 
sizeof(b) + sizeof(c), which is 4 + 2 + 1. However, most compilers return 8 because 
they insert structure padding! This behavior is somewhat obscure now, but it will 
definitely become a well-known phenomenon as more 64-bit code is introduced 
because it has the potential to affect this code more acutely. How could it have a 
security consequence? Consider Listing 6-32. 
Listing 6-32. Structure Padding in a Network Protocol 
struct netdata 
{ 
    unsigned int query_id; 
    unsigned short header_flags; 
    unsigned int sequence_number; 
}; 
int packet_check_replay(unsigned char *buf, size_t len) 
{ 
    struct netdata *n = (struct netdata *)buf; 
    if ((ntohl(n->sequence_number) descptr); 
         free(a->base); 
         free(a); 
         return; 
    } 
    free(a->descptr); 
    free(a->base); 
    free(a); 
    free(b->descptr); 
    free(b->base); 
    free(b); 
    return; 
} 
If the structure padding is different in the two structures, it could cause a double-free 
error to occur. Take a look at Listing 6-34. 
Listing 6-34. Example of Bad Counting with Structure Padding 
struct hdr 
{ 
    int flags; 
    short len; 
}; 
struct hdropt 
{ 
    char opt1; 
    char optlen; 
    char descl; 
}; 
struct msghdr 
{ 
    struct hdr h; 
    struct hdropt o; 
}; 
struct msghdr *form_hdr(struct hdr *h, struct hdropt *o) 
{ 
    struct msghdr *m=xmalloc(sizeof *h + sizeof *o); 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
305 
    memset(m, 0, sizeof(struct msghdr)); 
... 
The size of hdropt would likely be 3 because there are no padding requirements for 
alignment. The size of hdr would likely be 8 and the size of msghdr would likely be 12 
to align the two structures. Therefore, memset would write 1 byte past the allocated 
data with a \0. 
Precedence 
When you review code written by experienced developers, you often see complex 
expressions that seem to be precariously void of parentheses. An interesting 
vulnerability would be a situation in which a precedence mistake is made but occurs 
in such a way that it doesn't totally disrupt the program. 
The first potential problem is the precedence of the bitwise & and | operators, 
especially when you mix them with comparison and equality operators, as shown in 
this example: 
if ( len & 0x80000000 != 0) 
    die("bad len!"); 
if (len  30) 
    snprintf(dst, len - 30, "%s", src) 
The authors intended the following: 
if ((len = getlen()) > 30) 
    snprintf(dst, len - 30, "%s", src) 
However, they got the following: 
if (len = (getlen() > 30)) 
    snprintf(dst, len - 30, "%s", src) 
len is going to be 1 or 0 coming out of the if statement. If it's 1, the second argument 
to snprintf() is -29, which is essentially an unlimited string. 
Here's one more potential precedence error: 
int a = b + c >> 3; 
The authors intended the following: 
int a = b + (c >> 3); 
As you can imagine, they got the following: 
int a = (b + c) >> 3; 
Macros/Preprocessor 
C's preprocessor could also be a source of security problems. Most people are familiar 
with the problems in a macro like this: 
#define SQUARE(x) x*x 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
307 
If you use it as follows: 
y = SQUARE(z + t); 
It would evaluate to the following: 
y = z + t*z + t; 
That result is obviously wrong. The recommended fix is to put parentheses around the 
macro and the arguments so that you have the following: 
#define SQUARE(x) ((x)*(x)) 
You can still get into trouble with macros constructed in this way when you consider 
order of evaluation and side-effect problems. For example, if you use the following: 
y = SQUARE(j++); 
It would evaluate to 
y = ((j++)*(j++)); 
That result is implementation defined. Similarly, if you use the following: 
y = SQUARE(getint()); 
It would evaluate to 
y = ((getint())*(getint())); 
This result is probably not what the author intended. Macros could certainly introduce 
security issues if they're used in way outside mainstream use, so pay attention when 
you're auditing code that makes heavy use of them. When in doubt, expand them by 
hand or look at the output of the preprocessor pass. 
Typos 
Programmers can make many simple typographic errors that might not affect 
program compilation or disrupt a program's runtime processes, but these typos could 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
308 
lead to security-relevant problems. These errors are somewhat rare in production 
code, but occasionally they crop up. It can be entertaining to try to spot typos in code. 
Possible typographic mistakes have been presented as a series of challenges. Try to 
spot the mistake before reading the analysis. 
Challenge 1 
while (*src && left) 
{ 
    *dst++=*src++; 
    if (left = 0) 
        die("badlen"); 
    left--; 
} 
The statement if (left = 0) should read if (left == 0). 
In the correct version of the code, if left is 0, the loop detects a buffer overflow 
attempt and aborts. In the incorrect version, the if statement assigns 0 to left, and 
the result of that assignment is the value 0. The statement if (0) isn't true, so the 
next thing that occurs is the left--; statement. Because left is 0, left-- becomes a 
negative 1 or a large positive number, depending on left's type. Either way, left isn't 
0, so the while loop continues, and the check doesn't prevent a buffer overflow. 
Challenge 2 
int f; 
f=get_security_flags(username); 
if (f = FLAG_AUTHENTICATED) 
{ 
    return LOGIN_OK; 
} 
return LOGIN_FAILED; 
The statement if (f = FLAG_AUTHENTICATED) should read as follows: 
if (f == FLAG_AUTHENTICATED) 
In the correct version of the code, if users' security flags indicate they're 
authenticated, the function returns LOGIN_OK. Otherwise, it returns LOGIN_FAILED. 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
309 
In the incorrect version, the if statement assigns whatever FLAG_AUTHENTICATED 
happens to be to f. The if statement always succeeds because FLAG_AUTHENTICATED is 
some nonzero value. Therefore, the function returns LOGIN_OK for every user. 
Challenge 3 
for (i==5; src[i] && i 0 && len  0 && len  sizeof(dst)) /* check the length 
    die("bad length!"); 
/* length ok */ 
memcpy(dst, src, len); 
The if statement should read like so: 
if (len  sizeof(dst)) /* check the length */ 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
311 
In the correct version of the code, the program checks the length before it carries out 
memcpy() and calls abort() if the length is out of the appropriate range. 
In the incorrect version, the lack of an end to the comment means memcpy() becomes 
the target statement for the if statement. So memcpy() occurs only if the length 
checks fail. 
Challenge 8 
if (len > 0 && len  0 && len  sizeof(dst)) 
    assert("bad length!"); 
/* length ok */ 
memcpy(dst, src, len); 
The Art of Software Security Assessment - Identifying and Preventing Software Vulnerabilities 
312 
The report_magic(1) statement should read like so: 
    // report_magic(1); 
   ; 
In the correct version, the program checks the length before it performs memcpy(). If 
the length is out of the appropriate range, the program sets a flag that causes an 
abort. 