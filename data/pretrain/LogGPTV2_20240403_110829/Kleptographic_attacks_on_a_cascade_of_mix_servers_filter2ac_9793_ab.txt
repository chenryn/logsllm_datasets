i + 1, but remain secret for the external observers.
Now let us describe details of the procedure encoding a, which
has to be transmitted from server i to i+ 1. The technique was used
in [31], in kleptographic black-box design of a symmetric cipher,
and is called the Coupon Collector’s Problem. For each j the server
i changes the value γj = gKi−1,j +ki,j , i.e. the ﬁrst component of
ciphertext (5), by incrementing ki,j in (2) until the equality
(faddress(γj), fvalue(γj)) = (‘, a‘)
(7)
holds for some ‘ ∈ {n − 1, n − 2, . . . , 0}. We call γj proper, if it
satisﬁes property (7).
If b = 2 (i.e. single bits are transmitted in a covered way with
each ciphertext) and the number of ciphertexts N is sufﬁciently
large, then we might modify (6), so that the keys K∗
i are unnec-
essary. The ith mix-server could accept a fraction of γj not satis-
fying (7), i.e. giving (‘0, 1 − a‘0 ) for some ‘0. If for each ‘ such
a fraction is less than a half, then the (i + 1)th server would take
as a‘ the result indicated by the majority value. Even if an ex-
ternal observer would check H1(γj) mod n and H2(γj) mod b,
he would only see different values H2(γj) mod b for γj giving
the same H1(γj) mod n. For large number of arguments γj he
should not be surprised that the numbers of 0 and 1 resulting from
H2(γj) mod b are different.
It is easy to see that for each j the average number of trials re-
quired to ﬁnd a γj fulﬁlling (7) is equal to b (note that exponenti-
ation is performed only in the ﬁrst trial, each next trial requires a
single multiplication). On the other hand, the expected number of
proper γj needed to describe the whole a is equal to n ln n + O(n)
(see [11] for a tight analysis).
Now let us present the attack and actions of the server i:
1. It chooses k  1 still according to the rule (8), but with zi,k = yki,1
i,j for
M for ran-
domly chosen ki,1. Consequently, when the input and output batch
of the server will be put on the BB, Mallet needs at most N trials to
ﬁnd gki,1 = gKi,πi(1) /gKi−1,1. Calculating zi,k = (gki,1 )xM for
(8) Mallet quickly obtains permutation πi by applying consecutive
ki,j to consecutive input onions. If ki,j for j ≥ 2 might be incre-
mented up to some ki,j +(b−1), then the server might additionally
transfer any number from the set {0, . . . , bN−1 − 1}. For exam-
ple, the value of ki,1 might be transmitted in this way, giving the
addressee all exponents ki,j, as in the attack on the PaV cascade.
Since only the ﬁrst onions’ components are used, the above at-
tacks can be applied both to purely re-encryption mix servers, and
to servers with decryption functionality.
Suppose that the RPC is used in veriﬁcation phase. In that case
if for each consecutive pair of servers only one of them is infected,
2‘ links on average will
then after passing 2‘ servers a fraction of 1
be revealed to Mallet!
4.
IMPROVING EFFICIENCY OF A KLEP-
TOGRAPHIC CHANNEL
4.1 Error Correcting Code Technique
The encoding algorithm presented in the previous section as-
sumes that once a proper γj is found it is used. Of course, a klepto-
graphic server could seek for a proper γj containing the still miss-
ing digits of secret a, but this would imply delays that can be de-
tected. Namely, in the algorithms based on the Coupon Collector’s
Problem, collecting the last missing digits (coupons) are the most
costly ones. This is because the probability that for a proper value
of γj the pair (faddress(γj), fvalue(γj)) hits one of the missing
pairs (‘, a‘) decreases with the decrease in the number of missing
digits.
The idea is to skip these costly last steps, and allow the receiver
to substitute the lacking digits with random ones. This introduces
some errors into the transmitted message a. To preserve the ability
to recover a the message is enhanced with some error correcting
code. The question which arises is: whether such a technique might
reduce the effort necessary to complete the message to be sent?
Denote by a0 the message a together with an error correcting
code. To compare effectiveness of the two approaches, we must
assume that the radix has not changed, so we have b-ary code. Let
n0 = blogb a0c + 1, and let the code has ability to repair t errors in
a0. Thus the inequality must hold:
!
  tX
!
´ · (b − 1)i gives the volume of a “sphere”
`t
· (b − 1)i
≤ bn0
(10)
i=0
t
i
.
bn ·
The expressionPt
i=0
i
around each of bn codewords. The sphere has radius t, and every
at-most t-error in a transmitted message is repaired by pointing at
the codeword being the center of the sphere in which the damaged
message occurs. The decoding must be unique, thus the spheres
must be disjoint, which explains the inequality (10). Note that the
minimal distance d between any neighboring codewords must be
at least 2t + 1. Thus we have an [n0, n, d] error correcting code.
If there is an equality in (10), then the code is called perfect, and
indeed, for given n and t the resulting n0 is then of minimal value.
The codes are usually constructed for b = q being (a power of) a
prime. Unfortunately, for such a restriction perfect codes are rare,
for example for b ≥ 3 and t ≥ 7 perfect codes do not exist (cf. [1]).
In fact, all possible parameters [n0, n, d] of perfect q-ary codes are
known (see for example Theorem 7 in [7]).
If we have n0 for which no perfect code exists, we would like
to be able to ﬁnd for a given d a code with the greatest possible
60
Hn, where Hn = Pn
n (i.e. to ﬁnd the optimal code). This general problem is difﬁcult,
and even determining the number A(n0, d) of all codewords of the
optimal code is also hard (cf. [26, Chap. 5], and for q = 2 the paper
[20]). Note that some reverse problem is difﬁcult as well: if we
have a q-ary linear code with given n0 and n, then calculating d
(and as a result, the maximal possible t for this code) is in general
intractable [27, Sect. V], [8].
Let us return to the Coupon Collector’s Problem. The expected
number of proper γj needed to complete message a equals n ·
i is the nth harmonic number (cf. [11,
Sect. 3.4]). On the other hand, it is easy to see that the expected
number of proper γj needed to complete message a0 with at most
t errors equals n0 · (Hn0 − Ht). To give a proof of concept we
have compared these values for Hamming q-ary perfect codes. In
q−1 − m, 3] for
the case of Hamming codes [n0, n, d] = [ qm−1
some m. These codes exist for every q = pr and every m ≥ 2,
where p is a prime and r ≥ 1 [17]. Although for these codes
t = 1, the exemplary results collected in Table 1 indicate that the
attack is more effective when the codes are used. The right hand
q−1 , qm−1
i=1
1
Table 1: A comparison of the expected number n0 · (Hn0 − Ht)
of proper γj needed when a Hamming code is used, with the
expected number n · Hn of proper γj needed when the code is
not used.
n n0 · (Hn0 − Ht) n · Hn blog2(qn − 1)c + 1
q m n0
2 8 255 247
54
7 3
8 3
70
2 10 1023 1013
1305.71
206.854
282.839
6657.89
1503.89
247.073
338.299
7595.86
247
152
210
1013
57
73
column depicts the number of bits of a secret to be transmitted. For
blog2(qn−1)c+1 ≤ 247 the secret might be a compressed point of
some elliptic curve (for publicly known record ECDL solved, see
[3]). In the last row we assume that some element of a multiplica-
tive group is transmitted. The expected number of needed proper
γj expresses the expectation to the size of the batch. To compare
rows, recall that q is equal to the expected number of trials needed
to get an onion yielding proper γj, but only the ﬁrst trial is costly,
the next rely on incrementation of the exponent. Note that as be-
fore, at least the function fvalue should be protected with key K∗
i .
This is because error correcting codes introduce some redundancy
into the message transmitted, and such redundancy must be hidden
from external observers.
4.2 Sorting in the Case of PaV
Now we present some details for an attack on the Prêt à Voter