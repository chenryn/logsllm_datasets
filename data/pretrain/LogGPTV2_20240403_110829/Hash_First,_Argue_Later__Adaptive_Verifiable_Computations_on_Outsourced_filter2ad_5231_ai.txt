i∈[1,n] Ti
i∈[1,n] Ri
x∗
i . By correctness of the XP1 scheme we
e( ˆT , g2) = e(
, U ) e( ˆR, V ) e(ˆc, W )
Next, A(cid:48) computes ˆT ←(cid:81)
have that
x∗
i
i∈[1,n]
i and ˆR ←(cid:81)
(cid:89)
H x∗
i
i
i∈[1,n]
holds. Dividing the two equations above one can see that it holds
T ∗/ ˆT (ˆc/c∗)δ = [(R∗/ ˆR)(c∗/ˆc)γ]v
with the guarantee that the element on the left hand side of the equation is not 1 (by the win-
ning condition introduced in Game 1). Therefore, A(cid:48) computes Z ← R∗/ ˆR(c∗/ˆc)γ and Z(cid:48) ←
T ∗/ ˆT (ˆc/c∗)δ, and returns (Z, Z(cid:48)) ∈ G2
1 as a solution for the Flexible co-CDH assumption. One can
see that, as long as A wins in Game 2, the solution will be valid, as Z(cid:48) = Zv and Z(cid:48) (cid:54)= 1.
By putting together the above claims we have that any p.p.t. A has at most negligible probability
of winning in Game 0.
D.5 Proof of Theorem 5.1
Theorem 5.1. In the random oracle model for H, if hα is an -almost universal hash function,
HP is adaptively sound and hash extractable in publicly veriﬁable (resp. designated veriﬁer) setting,
then HP∗ is sound for outsourcing of hash computations as per Deﬁnition 5.1 in publicly veriﬁable
(resp. designated veriﬁer) setting.
Proof. Assuming H is a random oracle, the proof proceeds in a sequence of games. Let A be the
adversary in Deﬁnition 5.1 and x, σ∗
x, Πh be his forgery.
Game 0: Outsourced Hash Game.
Game 1: Let Aσ be the adversary obtained by taking pp, vp as input, running A, H internally,
and returning σ. Note that Aσ does not take auxiliary input since it takes pp, vp as input
35
and runs from the beginning of the experiment. (In the designated-veriﬁability variant, Aσ
runs HashVerify internally as he is not given vp.)
Game 1 is the same as Game 0, except that for every successful adversary we execute the
challenger together with the knowledge extractor Eσ whose existence is guaranteed by hash
extractability. The game aborts without A winning if Eσ fails to extract a value x(cid:48) from which
we can reconstruct σ.
Game 2: The same as Game 1, except the game aborts if ¬Rh(x(cid:48), α, µ) where α ← H(x, σ) and
µ = hα(x).
Now we prove the following claims.
1. Pr[G0(A) = 1] ≈ Pr[G1(A) = 1].
2. Pr[G1(A) = 1] ≈ Pr[G2(A) = 1].
3. Pr[G2(A)] ≈ 0.
Claim D.3. Pr[G0(A) = 1] ≈ Pr[G1(A) = 1].
Let Aσ be the adversary obtained from A, the challenger, and the random oracle simulation
that takes pp, vp as input, runs these three entities internally, and returns σ. Eσ is guaranteed to
exist for every Aσ by hash extractability of the HP scheme.
Claim D.4. Pr[G1(A) = 1] ≈ Pr[G2(A) = 1].
We can build an adversary AHP to break adaptive soundness of HP scheme for a single relation
using A as follows.
AHP receives pph from his challenger CHP. He ﬁxes Rh as the relation he will forge on, sends
it to CHP and receives back EKh, VKh. He forwards pp = (pph, EKh) and vp = VKh to A. (In the
designated veriﬁer setting AHP receives only pph and EKh from CHP and forwards them to A. He
then replies oracle verify queries of A on x, σ∗
x, Πh by computing α and µ himself and querying
CHP.)
x) and µ = hα(x), AHP sends x(cid:48), α, µ, Πh as his
forgery against CHP.
Claim D.5. Pr[G2(A)] ≈ 0.
x, Πh be A’s forgery. Let α = H(x, σ∗
Let x, σ∗
Since Rh(x(cid:48), α, µ) holds for α ← H(x, σ) µ = hα(x) it must be the case that hα(x) = hα(x(cid:48)).
Since H is a random oracle, A can determine hα only after he chooses x and x(cid:48) to compute σ.
Hence, the probability of the adversary ﬁnding such x and x(cid:48) is  since h is -almost universal hash
function.
We note that all HPE constructions in Section 4 meet the requirements of Theorem 5.1 and can
be used for secure hash outsourcing.
E Accumulate & Prove
In this section, we present a variant of our hash & prove model (and construction) in which the
data is encoded by using an accumulator instead of a hash function. We call schemes following this
approach Accumulate & Prove schemes. The beneﬁt of adopting an accumulator representation
is that the latter enables fast veriﬁable processing of certain, limited, classes of functions. For
36
n(cid:89)
n(cid:88)
example, one can eﬃciently prove and verify arguments on set operations by exploiting the structure
of accumulator [38], with better performance than by relying on a general-purpose VC scheme.
An Accumulate & Prove scheme (that we refer to as HPacc) is deﬁned identically to an HP
scheme except that the hash algorithm computes an accumulator.
In what follows we provide an HPacc construction that works for data encoded using the popular
bilinear accumulator of [37, 38]. The construction is built out of any HP scheme HP and another
HP scheme for multi-exponentiations XP (such as our XP1 and XP2).
(cid:81)n
Accumulators. Accumulators hold ﬁnite subsets {x1, . . . , xn} of Zp with at most n elements. We
i=1(s−xi), where s is usually
consider Bilinear accumulators [37, 38] that are of the form acc(x) = g
kept secret. After replacing s with a formal polynomial variable x, the exponent in acc(x) can be
developed into
(x − xi) =
zi(x)xi−1 + xn
(1)
i=1
i=1
for some coeﬃcients associated to the roots x. Let z be the vector of these coeﬃcients. By deﬁnition,
we can compute acc without knowing s as a multi-exponentiation
n(cid:89)
(Fi−1)zi(x)Fn
i=1
where Fi = g(si). We use acc(Facc, x) to denote this computation where Facc = (g, gs, . . . , gsn).
(Note that Polynomial commitments [32] also ﬁt our approach as they commit to a polynomial
described by coeﬃcients z.)
Techniques for veriﬁably computing accumulators. In this section, we assume that X = Zn
p
but that relations R(x, v ; w) treat x as a set, i.e., they are closed under permutation of the xi in
x. Given a relation R(x, v ; w), our construction composes of two veriﬁcation mechanisms:
1. A mechanism to verify the computation of Ax = acc(Facc, x) from the vector of coeﬃcients
z mentioned above, given its hash σz. This is done by using our HP scheme XP for multi-
exponentiations on the function acc(Facc, x) deﬁned by Facc = (g(si−1))i=1..n+1. So, the compu-
tation of Ax can be proven (and veriﬁed) by letting the prover compute Φacc ← XP.Prove(EKF ,
z, Ax), and the veriﬁer check that
XP.Verify(VKF , σz, Ax, Φacc) = 1.
2. A mechanism to verify that the vector of coeﬃcients z used to compute the hash σz is exactly
the one corresponding to the n-degree polynomial with roots x1, . . . , xn.
Recalling that the goal is to prove validity of R(x, v ; w), this second veriﬁcation mechanism
is obtained by extending the relation R into a relation
R(cid:48)(x, . . . ) = R(z, . . . ) ∧ Coeﬀ(x, z)
where Coeﬀ ensures that x is a set of n elements and z = (z1, . . . , zn) are indeed the coeﬃcients
for the roots x. We propose two ways of encoding Coeﬀ using arithmetic circuits in Zp:
• We can test the polynomial equation (1) above at n+1 distinct points such as x = 0, ..., n
using the relation
R(cid:48)(z, v ; x, w) = R(x, v ; w) ∧(cid:86)n
This relation R(cid:48) can be expressed using n2 − 1 quadratic equations.
37
j=0(eqn (1) with x = j).
(2)
• Alternatively, we can test equation (1) probabilistically at a random point α ∈ Zp. In
order to select this random point, we can use the same idea as for hash outsourcing (see
hα in Section 5), i.e., to rely on a random oracle, H, to achieve public veriﬁability with
an arithmetic circuit, setting α = H(σz, Ax) and using the relation
R(cid:48)(cid:48)(z, v, α ; x, w) = R(x, v ; w) ∧ (eqn (1) with x = α).
(3)
This second relation R(cid:48)(cid:48) can be expressed using 2n − 1 quadratic equations.
Our Accumulate & Prove Construction. We are now ready to describe our accumulate &
prove construction HPacc. Recall, this is deﬁned as HP with the diﬀerence that Hash algorithm
computes an accumulator. Viewed as an accumulator the values x ∈ X now represent sets of
cardinality n.
As mentioned before, we make use of an HP scheme HP and another HP scheme XP for multi-
exponentiation computations. These two HP schemes are assumed to share the same set of param-
eters pp as well as the same hashing algorithm, i.e., HP.Hash(pp,·) = XP.Hash(pp,·).4
Our HPacc is instantiated as follows.
Setup(1λ) generates ppacc consisting of the pp shared between HP and XP together with a vector
of elements Facc = (g, gs, . . . , gsn) for computing accumulators from coeﬃcients z.
Hash(ppacc, x) returns Ax = acc(Facc, x).
KeyGen(ppacc, R) let R(cid:48) be deﬁned as in Equation (2) then
EKR(cid:48), VKR(cid:48) ← HP.KeyGen(pp, R(cid:48));
EKF , VKF ← XP.KeyGen(pp, Facc);
return EKR = (EKR(cid:48), EKF ) and VKR = (VKR(cid:48), VKF );
(In the random oracle variant one builds keys for the relation R(cid:48)(cid:48) instead of R(cid:48).)
Prove(EKR, x, v ; w) computes the coeﬃcients z of the polynomial with roots x, and its hash σz;
the accumulator Ax; and the proofs Π and ΦA:
Ax ← acc(Facc, x);
σz ← HP.Hash(pp, z);
Π ← HP.Prove(EKR(cid:48), z, v ; x, w);
ΦA ← XP.Prove(EKF , z, Ax);
return Πacc = (σz, Π, ΦA);
(Note that in the veriﬁcation both HP and XP use σz ← HP.Hash(pp, z).
In the random
oracle construction it computes α = RO(σz, Ax) and proves relations deﬁned by (3) as Π ←
HP.Prove(EKR(cid:48)(cid:48), z, v, α ; x, w).)
Verify(VKR, Ax, v, Πacc) parses Πacc as (σz, Π, Φacc) and returns 1 if
HP.Verify(VKR(cid:48), σz, v, Π) = 1 ∧ XP.Verify(VKF , σz, Ax, Φacc) = 1
and returns 0 otherwise.
4We note that such a property is indeed achieved by our HPgen construction, which uses the hashing algorithm
of XP.
38
(In the random oracle construction it computes α = RO(σz, Ax) and veriﬁes relation deﬁned
by (3) as
HP.Verify(VKR(cid:48)(cid:48), σz, v, α, Π) = 1.)
We note that Ax in HPacc represents σx when using HP notation.
Security proof. We recall the n-Strong Diﬃe-Hellman assumption and prove security of HPacc.
Assumption 4 (n-Strong Diﬃe-Hellman [14] (n-SDH)). Let G1, G2, GT be cyclic groups of prime
s2, . . . ,
order p generated by g1 and g2 respectively. Given a (n + 3)-tuple of elements (g1, g1
(1/s+c)) ∈ Zp × G1
sn, g2, g2
g1
for a freely chosen c ∈ Zp \ {−s}.
2, for a p.p.t. adversary it is hard to output a tuple (c, g1
s, g1
s) ∈ Gn+1
1 × G2
Theorem E.1. If both HP and XP are adaptively sound and hash extractable, and the n-SDH
assumption holds in G1 then HPacc is adaptively sound and hash extractable.
Proof Outline. The argument is structured in terms of game hops.
Game 0 is the same as Adaptive Forgery Game.
Game 1 Let Az be an adversary that takes pp as input and Facc as auxiliary input. It runs A
from Game 0 and the oracles for KEYGEN and VERIFY internally. Finally, Az outputs σz
and Ez returns z. Note that the auxiliary input of Az is of a very speciﬁc form and we thus
conjecture that it is ‘benign’.
Game 1 is the same as Game 0 except that for every A we run Ez in parallel to the challenger
and we abort if Check(pp, σz) = 1 but σz (cid:54)= Hash(pp, z).
Game 2 is the same as Game 1 except that A aborts if Ax (cid:54)= Facc(z).
Game 3 is the same as Game 2 except that A aborts if ¬∃x, w.R(cid:48)(z, v ; x, w).
Let Gi(A) be the output of Game i run with adversary A. We prove the following claims.
Claim E.1. Pr[G0(A) = 1] ≈ Pr[G1(A) = 1].
Ez must exist since Hash is an extractable hash function.
Claim E.2. Pr[G1(A) = 1] ≈ Pr[G2(A) = 1].
We can build an adversary AXP that breaks adaptive soundness of XP scheme using A as
follows. AXP forwards his pp to A. AXP simulates HP as in the construction, but obtains EKF in
KEYGEN queries using his own oracle. (In the designated veriﬁer case, he uses his own VERIFY
oracle to answer A’s queries to VERIFY.) to simulate XP.Verify. Once A returns a forgery, AXP
returns Facc, z, Ax, Φacc as its forgery. The probability of AXP winning is the same as the diﬀerence
between the success probabilities in the two games.
Claim E.3. Pr[G2(A) = 1] ≈ Pr[G3(A) = 1].
We can build an adversary AHP that breaks adaptive soundness of HP scheme using A as
follows. AHP forwards his pp to A. AHP simulates XP as in the construction, but obtains EKR(cid:48)
in KEYGEN queries using his own oracle. (In the designated veriﬁer case, he uses VERIFY oracle
to reply VERIFY queries.) Once A returns a forgery, AHP returns R(cid:48), z, v, Π as its forgery. The
probability of AHP winning is the same as the diﬀerence between the success probabilities in the
two games.
39
Claim E.4. Pr[G3(A) = 1] ≈ 0.
As the two relations R(cid:48) and Facc(·) hold one can now eﬃciently compute x(cid:48) as the roots of the
polynomial deﬁned by z such that Ax = acc(Facc, x(cid:48)). As we already know from the deﬁnition of
HPacc.Hash, that Ax = acc(Facc, x), either x and x(cid:48) deﬁne the same set, or we found an accumulator
collision. The reduction to the accumulator collision resistance is straight-forward. Given Facc
simulate both proof systems and return x(cid:48), x, Ax as the collision. Accumulator collision resistance
in turn can be reduced to the n-SDH assumption in G1 [14].
40