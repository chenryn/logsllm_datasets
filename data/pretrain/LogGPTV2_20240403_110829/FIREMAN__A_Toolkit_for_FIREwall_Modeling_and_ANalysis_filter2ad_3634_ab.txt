eth2
Y0
Internal Network
eth0
Y
eth1
Z0
eth0
Z
eth2
eth1
Figure 2: Network of ﬁrewalls.
running inside the internal trusted networks, and only lim-
ited accesses are allowed.
Since there exists multiple paths from the Internet to the
internal network, the ﬁltering action taken depends on the
path a packet actually traverses. Although a packet does not
actually choose its data path, the dynamics of the underlying
routing plane may assign different paths for the same set of
packets at different time. Ideally, ﬁrewalls should perform
consistently regardless of the underlying routing decisions.
To guarantee reachability of desired packets, the adminis-
trator must ensure that none of the ﬁrewalls on the path de-
nies them. On the other hand, the administrator must ensure
that no potential path allows prohibited packets to access the
protected network.
3. Misconﬁgurations
A ﬁrewall does not provide security in its own right. The
way the ﬁrewall is conﬁgured determines the overall secu-
rity effectiveness. In this section, we discuss ﬁrewall mis-
conﬁgurations and classify them. Section 3.1 discusses pol-
icy violations, which can be checked against well-deﬁned
policies. Not all misconﬁgurations can be caught by policy
deﬁnitions. In Section 3.2, we discuss inconsistent conﬁg-
urations and how to use these to infer misconﬁgurations.
Section 3.3 discusses some inefﬁcient conﬁgurations that
are not errors, but may still adversely affect the ﬁrewall per-
formance.
The sample scripts used in this paper are written in the
format of:  where src ip and src port denote respectively source
IP address and source port number. Similarly, dst ip and
dst port refer to destination IP address and port number re-
spectively. Both source and destination ports are optional.
The IP addresses used in this paper are written in private IP
address blocks on purpose only to avoid exposing address
information.
3.1. Policy Violations
Administrators often have a high-level policy describing
what should be prohibited (blacklists) or ensured (whitelist)
access to the network. It is crucial that ﬁrewall conﬁgura-
tions exactly reﬂect the security policy. Any nonconform-
ing conﬁgurations may result in undesired blocking, unau-
thorized access, or even the potential for an unauthorized
person to alter security conﬁgurations. Therefore, a ﬁrewall
must be veriﬁed against the policy.
Although policy deﬁnition is subjective to individual in-
stitutions, the network security community has some well-
understood guidelines on ﬁrewall conﬁgurations. From an
external auditor’s point of view, Wool [31] studied 37 con-
ﬁgurations of Check Point’s FireWall-1 product and noticed
12 common ﬁrewall conﬁguration errors. Among them, al-
lowing “any” destination on outbound rules, “any” service
on inbound rules happens to 90% of the conﬁgurations. Al-
lowing NetBIOS and Portmapper/Remote Procedure Call
service is also a common class of errors that exposes the
network to very insecure services. A major number of ﬁre-
walls are not conﬁgured correctly to provide proper protec-
tion. Approximately 46% of the ﬁrewalls are not conﬁgured
with a stealth rule to hide itself, and above 70% of them are
open to insecure management protocols or external man-
agement machines. All these “errors” affect the security of
the entire network and must be carefully checked.
Another source of input for the blacklist is the bogon
list [9], which describes IP blocks or port numbers not cur-
rently allocated by IANA and RIRs plus those reserved for
private or special use. Attackers often use these IP blocks
or ports for DoS attacks, spamming or hacking activities.
Most ﬁrewall administrators would want to ensure that traf-
ﬁc from/to these IP blocks or port numbers are neither ex-
plicitly nor implicitly accepted to reach their networks.
3.2. Inconsistencies
Firewall conﬁgurations represent the administrator’s in-
tention, which should be consistent. Therefore, inconsisten-
cies are often good indicators of misconﬁgurations. Unlike
policy violations, for which there are well-deﬁned refer-
ences (blacklists and whitelists) to compare against, check-
ing for inconsistencies is solely based on the conﬁguration
ﬁles and does not need external input. Inconsistencies hap-
pen at three levels: intra-ﬁrewall, inter-ﬁrewall, and cross-
path.
Proceedings of the 2006 IEEE Symposium on Security and Privacy (S&P’06) 
1081-6011/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 02:48:19 UTC from IEEE Xplore.  Restrictions apply. 
3.2.1 Intra-ﬁrewall Inconsistencies
1.
2.
3.
4.
5.
6.
7.
deny tcp 10.1.1.0/25 any
accept udp any 192.168.1.0/24
deny tcp 10.1.1.128/25 any
deny udp 172.16.1.0/24 192.168.1.0/24
accept tcp 10.1.1.0/24 any
deny udp 10.1.1.0/24 192.168.0.0/16
accept udp 172.16.1.0/24 any
Table 2: Sample script 1.
from certain action. Proper use of these techniques could
result in fewer number of rules. However, these techniques
should be used very consciously. ACLs with generaliza-
tions or correlations can be ambiguous and difﬁcult to main-
tain. If a preceding rule is deleted, the action for some pack-
ets in the intersection will change. On a large and evolv-
ing list of rules, it may be difﬁcult to realize all the related
generalizations and correlations manually. Without a pri-
ori knowledge about the administrators intention, we cannot
concretely tell whether this is a misconﬁguration. There-
fore, we classify them as “warnings.”
1. Shadowing:
refers to the case where all the pack-
ets one rule intends to deny (accept) have been ac-
cepted (denied) by preceding rules. This often re-
veals a misconﬁguration and is considered an “error.”
A rule can be shadowed by one preceding rule that
matches a superset of the packets.
In Table 2, rule
4 is shadowed by rule 2 because every UDP packet
from 172.16.1.0/24 to 192.168.1.0/24 is accepted by
rule 2, which matches any UDP packets destined to
192.168.1.0/24. Alternatively, a rule may also be
shadowed by a set of rules collectively. For example,
rule 5 is shadowed by the combination of rules 1 and
3. Rule 1 denies TCP packets from 10.1.1.0/25, and
rule 3 denies TCP packets from 10.1.1.128/25. Col-
lectively, they deny all TCP packets from 10.1.1.0/24,
which are what rule 5 intends to accept.
2. Generalization: refers to the case where a subset of
the packets matched to this rule has been excluded by
preceding rules. It is the opposite of shadowing and
happens when a preceding rule matches a subset of this
rule but takes a different action. In Table 2, rule 7 is
a generalization of rule 4 because UDP packets from
172.16.1.0/24 and to 192.168.1.0/24 form a subset
of UDP packets from 172.16.1.0/24 (rule 7), yet the
decision for the former is different from the later.
3. Correlation: refers to the case where the current rule
intersects with preceding rules but speciﬁes a differ-
ent action. The predicates1 of these correlated rules
intersect, but are not related by the superset or subset
relations. The decision for packets in the intersection
will rely on the order of the rules. Rules 2 and 6 are
correlated with each other. The intersection of them is
“udp 10.1.1.0/24 192.168.1.0/24,” and the preceding
rule determines the fate of these packets.
Generalization or correlation may not be an error but a
commonly used technique to exclude part of a larger set
1In this context, we view a predicate as both a set of matching packets
and a logical predicate specifying this particular set. We use these two
interpretations interchangeably.
3.2.2 Inter-Firewall Inconsistencies
X0
X1
Z0
W 0
Y 0
1.
2.
1
1.
2.
3.
1.
2.
3.
1.
2.
deny tcp any 10.1.0.0/16
accept tcp any any
accept any any any
deny tcp any 10.0.0.0/8
accept tcp any any
deny udp any 192.168.0.0/16
deny tcp any 10.0.0.0/8
accept tcp any any
deny udp any 192.168.0.0/16
accept tcp any any
accept udp 172.16.0.0/16 192.168.0.0/16
Table 3: Sample script 2.
Inconsistencies among different ﬁrewalls might not be
errors. When a few ﬁrewalls are chained together, a packet
has to survive the ﬁltering action of all the ﬁrewalls on its
path to reach its destination. Therefore, a downstream ﬁre-
wall can often rely on upstream ﬁrewall to achieve policy
conformance and can be conﬁgured more loosely. On the
other hand, a downstream ﬁrewall at the inner perimeter
often needs a tighter security policy. Consider the topol-
ogy in Figure 2 with the conﬁguration scripts in Table 3,
packets destined to 10.0.0.0/8 but not to 10.1.0.0/16, e.g.,
10.2.0.0/16, will be accepted by X0 (rule 2) and therefore
have access to the DMZ. However, they are denied by Z0
(rule 1) to protect the internal network.
Without input from the administrator, the only inter-
ﬁrewall inconsistency we, as tool writer, can classify as
an “error” is shadowed accept rules. By explicitly allow-
ing certain predicates, we infer that the administrator in-
tends to receive these packets. For example, in Table 3,
rule 2 of Y 0 accepts UDP packets from 172.16.0.0/16 to
192.168.0.0/16, yet these packets are ﬁltered by W 0 (rule
3) at the upstream. To the downstream users, this may man-
ifest as a connectivity problem.
Proceedings of the 2006 IEEE Symposium on Security and Privacy (S&P’06) 
1081-6011/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 02:48:19 UTC from IEEE Xplore.  Restrictions apply. 
3.2.3 Cross-Path Inconsistencies
As discussed in Section 2.2, there could exists multiple
data paths from the Internet to the same protected network.
Cross-path inconsistency refers to the case where some
packets denied on one path are accepted through another
path. It depends on the underlying routing table whether
these anomalies are exploitable. However, attacks that af-
fect routing protocols do exists and an attacker needs to
succeed only once. Cross-path inconsistencies may also be
taken for intermittently disrupted services. Packets origi-
nally reaching the network may switch over to another path
that denies such packets because of routing changes.
Consider again the topology in Figure 2 with the con-
ﬁguration scripts in Table 3, paths X → dmz → Z and
W → dmz → Y both deny “udp any 192.168.0.0/16,”
which probably should not be allowed to reach the internal
network. Yet one may also notice that these packets can leak
into the internal network through the path X → dmz → Y .
This path may not always be available since the actual path
is determined by the underlying routing protocol. However,
routing is designed to be adaptive to link failures and heavy
load. In addition, it is relatively easy to inject false routing
messages [8]. A safe ﬁrewall conﬁguration should not rely
on that, and should assume that all paths are topologically
possible.
Checking cross-path inconsistencies based on active test-
ing is very difﬁcult. It may disrupt the production network
since routing tables must be altered to test different sce-
narios. Manually auditing such anomalies is also difﬁcult.
Even for a network of moderate size, the number of possible
paths between two nodes can be large.
3.3. Ineﬃciency
A ﬁrewall needs to inspect a huge number of packets.
Therefore, it is difﬁcult not to be concerned with ﬁrewall
efﬁciency. A lot of work has been dedicated to improve the
ﬁrewall speed through better hardware and software designs
and implementations. To administrators, the most practical
way to improve ﬁrewall efﬁciency is through better conﬁg-
uration of the ﬁrewall.
An efﬁcient ﬁrewall conﬁguration should require the
minimum number of rules, use the least amount of mem-
ory, and incur the least amount of computational load while
achieving the same ﬁltering goals. Although inefﬁciency
does not directly expose a vulnerability, a faster and more
efﬁcient ﬁrewall will encourage ﬁrewall deployment and
therefore make the network safer. In addition, the efﬁciency
of a ﬁrewall can determine a network’s responsiveness to
Denial-of-Service (DoS) attacks.
1.
2.
3.
4.
5.
6.
7.
8.
9.
accept tcp 192.168.1.1/32 172.16.1.1/32
accept tcp 10.0.0.0/8 any
accept tcp 10.2.1.0/24 any
deny tcp any any
deny udp 10.1.1.0/26 any
deny udp 10.1.1.64/26 any
deny udp 10.1.1.128/26 any
deny udp 10.1.1.192/26 any
deny udp any
Table 4: Sample script 3.
3.3.1 Redundancies
Redundancy refers to the case where if a rule is removed,
the ﬁrewall does not change its action on any packets. Re-
ducing redundancy can reduce the total number of rules, and
consequently reduce memory consumption and packet clas-
siﬁcation time [24].
A rule can be considered redundant if the preceding rules
have matched a superset of this rule and speciﬁes the same
action. For example, in Table 4, rule 3 is redundant since
rule 2 has already speciﬁed the same action for all packets
that match rule 3. A rule can also be made redundant by
the subsequent rules. Rules 5, 6, 7 and 8 are all redundant
because if we remove them, these packets are still going to
be denied by rule 9. In fact, for ﬁrewalls with a “deny all”
policy implicitly appended to the end of an ACL, we do not
need rules 4 − 9 altogether.
Redundant accept or deny rules are “errors” within the
same ﬁrewall. This is, however, not true in distributed ﬁre-
walls. A packet must be accepted on all the ﬁrewalls on
its path to reach the destination. Redundant accept rules on
different ﬁrewalls, such as the second rules of X0 and Z0
in Table 3, are both necessary. Redundant deny rules on
different ﬁrewalls are unnecessary, but are often considered
good practice to enhance security. This redundancy pro-
vides an additional line of defense if the outer-perimeter is
compromised.
3.3.2 Verbosities
Verbosity refers to the case where a set of rules may be sum-
marized into a smaller number of rules. For example, rules
5, 6, 7, and 8 in Table 4 can be summarized into a single
rule “deny udp 10.1.1.0/24 any.” Verbosity often happens
in practice when administrators build up the ﬁlter list over
a period of time. Such cases are frequently observed in the
real conﬁgurations we have collected.
Proceedings of the 2006 IEEE Symposium on Security and Privacy (S&P’06) 
1081-6011/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 19,2021 at 02:48:19 UTC from IEEE Xplore.  Restrictions apply. 
4. Analysis Framework of FIREMAN
In this section, we present the framework of FIREMAN
that consists of two phases. First, FIREMAN parses a ﬁre-
wall conﬁguration into an compact representation based on
the operational semantics of a ﬁrewall. An ACL is trans-
lated into a rule graph and distributed ﬁrewalls, with ad-
ditional information about network topology, are translated
into an ACL-tree. We then check for anomalous conﬁgura-
tions based on the rule graph and ACL-tree.
4.1. Parsing and Flow Graph Analysis