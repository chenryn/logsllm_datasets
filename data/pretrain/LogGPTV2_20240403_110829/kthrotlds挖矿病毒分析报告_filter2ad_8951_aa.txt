# kthrotlds挖矿病毒分析报告
##### 译文声明
本文是翻译文章
译文仅供参考，具体内容表达以及含义原文为准。
作者：郑斯碟@默安科技应急响应中心
2019年3月1日，默安科技应急响应中心接到某合作伙伴的求助电话，有主机被病毒感染，经默安科技安全研究员郑斯碟研究分析发现，该病毒为之前的watchdogs的变种，通过Redis未授权访问漏洞及ssh弱口令进行突破植入，随后释放挖矿木马进行挖矿操作，并对内外网主机进行redis漏洞攻击及ssh暴力破解攻击。
## 0x1 病毒特征
要判断是否感染此病毒，可从以下几个方面入手：
  1. 查看root/.ssh/中的密钥信息是否被清空。
  2. 查看计划任务中是否存在以下任务信息
  3. 查看是否有以下进程信息
  4. 查看/usr/sbin目录下是否有kthrotlds文件
  5. 查看/etc/init.d/下是否有netdns文件
  6. 病毒程序执行后会消耗大量的主机cpu资源。
  7. 查看/usr/local/lib/libcset.so
请各位系统维护人员检查各自机子是否有以上特征，如果有以上特征，可联系默安科技安全应急响应中心获取病毒清除工具。
以下是对该病毒的分析过程：
## 0x2 针对kthrotlds的分析：
通过分析发现，该病毒文件还是采用了upx壳，只是对其中的魔数进行了修改：
UPX的魔数是：
该病毒文件的魔数
只要将模数修改一下即可，修改如下：
修复后，使用upx -d 进行脱壳
可以看到，已经脱壳成功。
下面使用ida进行反编译
函数名都是随机字符串，看下字符串，推断程序应该是使用golang写的，和之前的差不多。
所以这里还是要使用之前的那个符号还原脚本对程序中的符号进行还原，脚本地址是：
还原后：
下面开始分析main函数
下面是将kthrotlds通过github_com_hippies_LSD_LSDC_CopyFile函数将/tmp/kthrotlds拷贝到/usr/sbin/kthrotlds中。然后往/etc/init.d/中写入一个名叫netdns的文件，并通过chkconfig命令将netdns添加为开启启动项。
可以发现在etc/init.d目录下确实存在netdns文件。
通过文本查看工具打开这个文件，发现其是一个bash脚本，具体如下：
    #! /bin/bash
    #chkconfig: - 99 01
    #description: kthrotlds daemon
    #processname: /usr/sbin/kthrotlds
    ### BEGIN INIT INFO
    # Provides:     /user/sbin/kthrotlds
    # Required-Start:
    # Required-Stop:
    # Default-Start:        2 3 4 5
    # Default-Stop:         0 1 6
    # Short-Description: kthrotlds deamon
    # Description:          kthrotlds deamon  守护进程
    ### END INIT INFO
    LocalPath="/usr/sbin/kthrotlds"
    name='kthrotlds'
    pid_file="/tmp/.lsdpid"
    stdout_log="/var/log/$name.log"
    stderr_log="/var/log/$name.err"
    get_pid(){
        cat "$pid_file"
    }
    is_running(){
        [ -f "$pid_file" ] &&/usr/sbin/kthrotlds -Pid $(get_pid) > /dev/null 2>&1
    }
    case "$1" in
    start)
        if is_running; then
            echo "Already started"
        else
            echo "Starting $name"
            $LocalPath >>"$stdout_log" 2>> "$stderr_log" &
            echo $! > "$pid_file"
            if ! is_running; then
            echo "Unable to start, see$stdout_log and $stderr_log"
            exit 1
            fi
        fi
    ;;
    stop)
        if is_running; then
            echo -n "Stopping$name.."
            kill $(get_pid)
            for i in {1..10}
            do
                if ! is_running; then
                    break
                fi
                echo -n "."
                sleep 1
            done
            echo
            if is_running; then
                echo "Not stopped; maystill be shutting down or shutdown may have failed"
                exit 1
            else
                echo "Stopped"
                if [ -f "$pid_file"]; then
                    rm "$pid_file"
                fi
            fi
        else
            echo "Not running"
        fi
    ;;
    restart)
        $0 stop
        if is_running; then
            echo "Unable to stop, will notattempt to start"
            exit 1
        fi
        $0 start
    ;;
    status)
        if is_running; then
            echo "Running"
        else
            echo "Stopped"
            exit 1
        fi
    ;;
    *)
    echo "Usage: $0{start|stop|restart|status}"
    exit 1
    ;;
    esac
    exit 0
大致的意思是查看进程列表，如果发现进程kthrotlds被kill掉了，则将其启动。
下面回到kthrolds源码的分析：
紧接着是一些清除操作，这里应该是清除之前版本残留的一些文件：
然后往/usr/local/lib写入licset.c文件，并将其编译为/usr/local/lib/licset.so文件，并将这个so文件设置为预加载动态链接库。
具体的关于libcset.so的分析在文章的后半部分，下面继续分析main函数。
接着是进行计划任务的写入操作，释放挖矿木马ksoftirqds，及更新操作。
以下是其计划任务中写入的命令：
访问：即可获得病毒执行脚本
通过解密其中的base64编码的数据：  