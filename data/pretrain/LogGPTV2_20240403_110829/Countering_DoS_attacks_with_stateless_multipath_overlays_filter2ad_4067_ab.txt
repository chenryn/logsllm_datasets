unlimited amounts of data through the overlay; verifying this
is complicated due to the packet-spreading approach.
• Finally, the selection of the overlay node to forward a packet
through should be as random as possible from the point of
view of an external observer (i.e., an attacker), yet veriﬁable
by individual nodes, to avoid ﬂooding attacks by compro-
mised clients.
In the remainder of this section we describe two protocols: one
used to establish a restricted ticket and secret session-key between
a client and the overlay, and a second protocol used as a stateless
communication protocol that allows overlay nodes to verify the va-
lidity of received packets without requiring maintenance of large
amounts of state.
2.3 Key and Ticket Establishment Protocol
To achieve a stateless communication with the overlay network,
a client has to acquire a ticket, which is then included in all sub-
sequent packets sent through the overlay. As we will see in de-
tail in the next section, the ticket is used by the overlay nodes to
authenticate the user, validate the routing decisions, and prevent
malicious (or subverted) nodes from utilizing a disproportionate
amount of bandwidth. Thus, node authentication and ticket acqui-
sition/maintenance is a key component of our approach. Although
any authentication protocol could be used, most such protocols re-
quire at least two round-trips between the two parties (as well as
tiﬁcate to overlay node A. A redirects the request to B, a randomly
selected overlay node. B treats the certiﬁcate as a random num-
ber, which he UMAC-signs with the shared key KM . The client’s
IP address and the system’s timestamp are the nonce used in the
UMAC operation. B sends the UMAC signature and the nonce to
the client. To prove liveness, the client contacts another randomly
selected overlay node, C, sending its certiﬁcate, the UMAC signa-
ture and the nonce. C validates the authenticity of the UMAC and
redirects the request to D, another randomly selected overlay node.
Finally, D generates a ticket for the client, encrypting it with the
client’s public key (retrieved from the certiﬁcate). In the two-round
protocol, only the last step is computationally expensive (compared
to simple UMAC veriﬁcation). Thus, the two-round-trip protocol,
guarantees client liveness. For the one-round-trip protocol we only
use the ﬁrst and the last communication i.e., from A to D as shown
in Figure 4. Finally, if there is a version mismatch between the list
of overlay nodes’ IP addresses stored locally in the client (commu-
nicated by the client in the ﬁrst message) and the one stored in the
overlay network, a random overlay node, E, is chosen by D to send
the list differences to the client.
2.4 Client Authentication
The ticket obtained from the previous protocol can only be used
by the client to continue the authentication protocol (i.e., prove live-
ness for both the overlay and the client. Once two-party authenti-
cation is completed, the last overlay node provides the client with
a ticket that is not “restricted,” i.e., the corresponding ﬂag inside
the ticket is cleared. The tickets are periodically refreshed, to avoid
situations where a malicious user distributes the session key and
ticket to a large number of zombies that try to access the overlay.
This authentication step can be followed by a secondary authen-
tication phase that uses a Graphic Turing Test (GTT) [21] to discern
the presence of a human at the client node (versus a remotely con-
trolled DDoS zombie). This step can prevent legitimate nodes that
have been subverted by an attacker from being used as entry points
to the overlay, but can only be used for those applications that have
a GUI — such as a web browser. We can implement the secondary
GTT-based authentication by issuing a second restricted ticket after
the completion of the two-phase authentication step (from above),
which only allows client nodes to contact the GTT server. This
server is implemented locally by each overlay node, as was shown
in [18]. Once the GTT step is successfully performed, the GTT
server issues an unrestricted ticket to the client node. The GTT
authentication can be performed periodically (to conﬁrm the con-
tinued presence of a human). Naturally, this step is not applicable
for applications where there is no human being directly controlling
the client, or where displaying a graphic is infeasible or impractical
(or for vision-impaired persons).
2.5 Client-Overlay Communication Protocol
Once the client has received a session key and an unrestricted
ticket, he may start sending packets to the remote destination through
the overlay. Each packet sent by a client to an overlay node con-
tains three overlay-related ﬁelds: the ticket, an authenticator, and a
monotonically increasing sequence number, as shown in Figure 3.
The ticket contains the session key and a sequence range for which
the ticket is valid, as we discussed previously, and is encrypted and
authenticated under a secret key KM , known to all overlay nodes.
Note that these overlay nodes are not user machines, but are hosts
dedicated to offering a DoS protection service.
The sequence number is a 32-bit value that is incremented by the
client for each packet transmitted through the overlay with a given
session key. The client identiﬁer is a random 32-bit value that is se-
Figure 2: Redirection-based authentication and key establishment.
An attacker observing the interactions of a user and the overlay cannot
determine which overlay node(s) to target.
considerable computation). However, an attacker that is observ-
ing communications between the client and the overlay can direct
a congestion-based DoS attack3 against any overlay node that is
contacted by the client for authentication purposes. Since the client
does not yet have a spreading sequence, it seems at ﬁrst impossible
to protect the key establishment phase.
Our proposed approach is to randomly redirect the authentication
request, as shown in Figure 2. Brieﬂy, the client selects an overlay
node at random and sends a packet containing its public key cer-
tiﬁcate and a request to initiate authentication. The receiving node
immediately forwards the request to another overlay node at ran-
dom; thus, an attacker (who cannot react fast enough to prevent a
packet from being forwarded on) does not have a target.
The second overlay node selects a random session key Ku and
creates a ticket for that client. The ticket contains Ku, a range of
packet sequence numbers for which Ku and the ticket are valid, a
randomly selected identiﬁer for the client, the current time-stamp,
and ﬂags indicating that this is a “restricted” ticket (more on this
later), all encrypted and authenticated under KM , a secret key ne-
gotiated periodically (e.g., every few hours) among all overlay nodes
(see Figure 3). The last part of the ticket is a UMAC [6] signa-
ture of the encrypted ticket using KM and a 64-bit nonce, which
consists of the ﬁrst 64 bits of the encrypted ticket. Note that only
overlay nodes can validate and decrypt the ticket. The client’s cer-
tiﬁcate is validated, and a second copy of Ku is independently en-
crypted under the client’s public key. Both operations are relatively
lightweight (compared to operations involving RSA private keys);
as was shown in [14], a node can perform a few thousand public-
key operations (i.e., signature veriﬁcations or public-key encryp-
tions) per second. The ticket and the encrypted session key are
then sent to the client. An extra, optional message can be sent
from the overlay to the client with the list of overlay nodes’ IP ad-
dresses. This one-round-trip protocol is stateless (for the overlay)
and computationally fast, resisting both memory and CPU exhaus-
tion attacks on the overlay nodes.
To make it even more difﬁcult for the attacker to mount a CPU
exhaustion or IP spooﬁng attack, we can add one more round-
trip on the key establishment protocol, forcing the client to send
a UMAC-signed certiﬁcate before generating the ticket (which re-
quires validation of the client certiﬁcate). Figure 4 displays both
the one round-trip and the two round-trip key establishment proto-
col in detail. In the two-round-trip protocol, the client sends his cer-
3Computational DoS attacks can be partially mitigated using proof-
of-work techniques [12, 7].
Figure 3: The layout of the various packets and the ticket used to establish a communication and transmit packets between the client and overlay
nodes. All numbers are in bytes, unless otherwise indicated.
sion key and the sequence number as inputs to a pseudo-random
function (PRF). The output is treated as an index to the list of over-
lay nodes, through which the packet will be routed. The list of
available overlay nodes does not need to change frequently, even if
nodes become unavailable (e.g., for maintenance purposes). There
are various ways a client can obtain the list of overlay nodes. For
example, it can be done the ﬁrst time it connects to the overlay
network by requesting it after the key establishment phase, or by
downloading it independently of the protected communication. Af-
ter the ﬁrst time, the client can maintain the freshness of the list by
comparing the version of his list with the one stored in the overlay,
downloading only the differences of the two versions.
The client then encapsulates the original packet (addressed to
the ﬁnal destination) inside a packet for the overlay node, along
with the information identiﬁed above (ticket, sequence number, au-
thenticator). This packet is forwarded through the overlay to the
appropriate secret servlet, and from there to the ﬁnal destination.
Upon reception of a packet, the overlay node checks the validity
of the ticket. This is a UMAC validation, a fast operation prevent-
ing computational DoS attacks against the overlay nodes. After
validating the authenticity of the ticket, the ticket is decrypted and
the authenticator is veriﬁed. This prevents spooﬁng attacks from
an adversary who obtains a valid ticket and generates packets to
all overlay nodes with randomly selected sequence numbers, thus
preventing the client with the valid ticket to communicate. Further-
more, to detect any replay attacks, an overlay node that receives
such a packet veriﬁes that the sequence number on the packet is
larger than the last sequence number seen from that client by us-
ing the client identiﬁer to index the internal table. The overlay
node also veriﬁes that the sequence number is within the acceptable
range of sequence numbers for this ticket. Finally, it uses the key
and the sequence number along with the PRF to determine whether
the client correctly routed the trafﬁc. If all steps are successful, the
overlay node updates the sequence number table and forwards the
packet to the secret servlet. Packets with lower or equal sequence
numbers are considered duplicates (either accidental reordering or
malicious replays by attackers) and are quietly dropped.
To avoid reuse of the same ticket by multiple DDoS zombies,
the range of valid sequence numbers for the ticket is kept relatively
small (and contained inside the ticket), e.g., 500 packets. Moreover,
the ticket is bound to the client’s IP, since to authenticate the packet
the overlay uses the UMAC including the client’s IP address as part
of the UMAC nonce. In addition, each packet contains a timestamp
with which we can validate the freshness of the ticket. After a
conﬁgurable period of time (e.g., 1 or 2 hours) the overlay expires
the ticket. Overlay nodes that receive valid tickets about to expire
Figure 4: Key & Ticket Establishment protocol: The client sends
node A his certiﬁcate. A immediately redirects the request to B, in the
two-round-trip protocol, or to D for the one-round-trip protocol. The
four-message protocol is more resilient against computational attacks
since it ensures the client’s liveness before generating an encrypted ver-
sion of the ticket. A 5th message is transmitted when the client’s ver-
sion for the list overlay nodes is old.
lected by the overlay node that authenticated the client, and is used
as an index in the table of last-seen sequence numbers per client,
maintained by each overlay node. The authenticator is a message
authentication code (MAC) using a fast transform such as UMAC
and the session key Ku. The UMAC is computed over the whole
packet, which includes the ticket and the sequence number of the
packet. For the UMAC nonce we use the sequence number con-
catenated with the client’s IP address. Thus, the ticket is bound to
a speciﬁc IP address and cannot be distributed to other clients. The
only state each overlay node needs to maintain per client consists of
the client identiﬁer and the last sequence number seen by that par-
ticular client. This state is not network or application related and
is used solely to prevent “replay” attacks. Assuming that both the
client identiﬁer and the sequence number are 32-bit values, each
overlay node needs to maintain only 64 bits of state for each client;
thus, if the overlay could support 1 million active clients (in terms
of network capacity), we will only need 8 MB of state.
A client transmitting a packet through the overlay uses the ses-
simply re-issue a new ticket with the same session key but a new
range of valid sequence numbers. This approach, combined with
the state kept by each node, makes it prohibitive for attackers to
reuse the same ticket from a large number of distinct nodes (each of
which is only transmitting to a speciﬁc overlay node), since the new
valid ticket needs to be continuously propagated to all zombies.
The shared key under which the ticket is encrypted is periodi-
cally established among all overlay nodes, using a group key man-
agement protocol. The precise properties of this protocol are not
relevant to this discussion, and there exist a large number of such
protocols in the research literature.
3.
IMPLEMENTATION
The implementation consists of the code for the overlay nodes,
as well as code running on each client that does the encapsulation
and initial routing. On the client, a routing-table entry redirects all
IP packets destined for the protected servers to a virtual interface,
implemented using the tun pseudo-device driver. This device acts
as a virtual network interface intercepting messages to and from a
real network interface. IP packets sent to the tun0 network interface
can be read by a user process reading the device /dev/tun0. Simi-
larly, if the process writes a complete IP packet to /dev/tun0 this
will appear in the kernel’s IP input queue as if it were coming from
the network interface tun0. Thus, whenever an application on the
client tries to access a protected server, all outgoing trafﬁc is inter-
cepted by the virtual interface. A user-level proxy daemon process
reading from the corresponding device captures each outgoing IP
packet, encapsulates it in a UDP packet along with authentication
information, and sends it to one of the overlay nodes according
to the protocol. The code running on overlay nodes receives these
UDP packets, authenticates and forwards them to the secret servlet,
which forwards them to the ﬁnal destination. There, the packets are
decapsulated and delivered to the original intended recipient (e.g.,
web server). The decapsulation can be done by a separate box or
by the end-server itself. In addition to the decapsulation code on
the overlay nodes, there is also a daemon listening for connection
establishment packets from the clients.
Connection Establishment Phase: When a client attempts to
contact the protected server for the ﬁrst time, it receives a small list
of randomly selected overlay nodes’ IP addresses via regular DNS
name resolution. It selects one of them and transmits a “connection
initiation” packet (shown in Figure 3) to authenticate itself, acquire
a ticket and a session key, and to update its list of overlay nodes.
Thus, for the very ﬁrst IP packet that the proxy daemon on the
client’s host receives for a previously unknown server, it constructs
a connection initiation which it sends to a randomly selected over-
lay node. The connection request is a UDP packet to a well-known
port. It contains the version number of the list of overlay nodes’
IP addresses stored locally, if any, along with its public key Pcl, as
shown in Figure 3. When an overlay node receives such a request,
it forwards it to another node at random.
This second overlay node generates a 256-bit ticket. The ﬁrst
224 bits of the ticket consist of a 128-bit session key Ku, a 64-bit
packet sequence range for which the ticket is valid with the starting
sequence randomly selected, and a 32-bit ﬁeld with the Client ID,
time-stamp and ﬂags that is used also to avoid public-key dictionary
attacks; this part is AES-encrypted using a Master Key KM shared
among overlay nodes. A 32-bit UMAC authenticator is appended,
computed over all ﬁelds in the ticket using again the master key
KM . The ticket, the starting packet sequence and the session key
Ku (encrypted under the client’s public key) are sent to the client.
Another optional packet containing differences of the current list of
the IP addresses of all overlay nodes is also sent to the client, de-
pending on the version indicated in the connection initiation packet.
Packet Transmission Phase: After receiving a session key and
ticket, the client constructs a “forward request” UDP packet con-
taining the packet sequence number, the ticket, and the original IP,
as shown in Figure 3. It then determines which overlay node to
send the packet to by using the session key, the packet sequence
(start sequence plus one for the ﬁrst packet) and the publicly avail-
able sorted list of IP addresses of the overlay nodes. Assuming that
the number of overlay nodes is n, the client computes the index in
the sorted list of IPs as:
index = U M AC(Ku ⊕ sequence number)mod(n)
The receiving overlay node validates the ticket using the ticket
UMAC. Then the ticket is decrypted using Km and the packet au-
thenticity is veriﬁed. The sequence number is compared against
the one stored in the overlay node for this client identiﬁer, if there
is one (otherwise, this is assumed to be a packet from a new client).
If the sequence number on the packet is bigger, the overlay node
stores the new sequence number and checks if the ticket is expired
(i.e., packet sequence > max packet sequence), after decrypting the
ticket. Then, computing the index as above, it checks whether the
packet was correctly routed to this node. If any of the checks fails,
the packet is dropped. Otherwise, the packet is routed to the secret
servlet, and from there to the actual server.
Ticket Renewal Phase: During the packet transmission phase,
overlay nodes may receive requests using valid tickets that are about
to expire. In that case, the overlay node issues a new ticket with the
same session key but larger max sequence number, and sends the
client a connection-request reply packet containing the new ticket.
4. QUANTIFYING ATTACK RESISTANCE
We now evaluate the security of our scheme using a simple an-
alytical model, which we apply to ﬁrst-generation IONs that are
vulnerable to targeted or sweeping attacks. We then quantify the
attack resistance generally offered by IONs using a simple model
of an ISP and typical POP speeds. In the next section we will char-
acterize the impact of our system on latency and throughput in a
series of experiments over the Internet using PlanetLab.
4.1 Impact of Sweeping Attacks
First-generation IONs were geared towards service connection
availability. No provision is made for attacks that cause the user
to reset his connection, either because the overlay node is unre-