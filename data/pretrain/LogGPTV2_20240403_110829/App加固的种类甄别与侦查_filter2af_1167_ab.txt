}
2、app检测是否可以执行在root下才能运行的命令。
3、检测busybox工具是否存在,关于busybox的知识google上一大堆，简单的说BusyBox
是很多标准Linux工具的一个单个可执行实现。BusyBox 包含了一些简单的工具,例如 cat 和 echo,还包含了一些更大、更复杂的工具,例如
grep、find、moun)
public static synchronized boolean checkBusybox() {
try {
Log.i(LOG_TAG, “to exec busybox df”);
String[] strCmd = new String[]{“busybox”, “df”};
ArrayList execResult = executeCommand(strCmd);
if (execResult != null) {
Log.i(LOG_TAG, “execResult=” + execResult.toString());
return true;
} else {
Log.i(LOG_TAG, “execResult=null”);
return false;
}
} catch (Exception e) {
Log.i(LOG_TAG, “Unexpected error – Here is what I know: “
\+ e.getMessage());
return false;
}
}
4、运行su命令
public static synchronized boolean checkGetRootAuth() {
Process process = null;
DataOutputStream os = null;
try {
Log.i(LOG_TAG, “to exec su”);
process = Runtime.getRuntime().exec(“su”);
os = new DataOutputStream(process.getOutputStream());
os.writeBytes(“exit\n”);
os.flush();
int exitValue = process.waitFor();
Log.i(LOG_TAG, “exitValue=” + exitValue);
if (exitValue == 0) {
return true;
} else {
return false;
}
} catch (Exception e) {
Log.i(LOG_TAG, “Unexpected error – Here is what I know: “
\+ e.getMessage());
return false;
} finally {
try {
if (os != null) {
os.close();
}
process.destroy();
} catch (Exception e) {
e.printStackTrace();
}
}
}
5、检测Android 沙盒目录文件或文件夹读取权限（在Android系统中，有些目录是普通用户不能访问的，例如
/data、/system、/etc等；比如微信沙盒目录下的文件或文件夹权限是否正常）
public static synchronized boolean checkAccessRootData() {
try {
Log.i(LOG_TAG, “to write /data”);
String fileContent = “test_ok”;
Boolean writeFlag = writeFile(“/data/su_test”, fileContent);
if (writeFlag) {
Log.i(LOG_TAG, “write ok”);
} else {
Log.i(LOG_TAG, “write failed”);
}
Log.i(LOG_TAG, “to read /data”);
String strRead = readFile(“/data/su_test”);
Log.i(LOG_TAG, “strRead=” + strRead);
if (fileContent.equals(strRead)) {
return true;
} else {
return false;
}
} catch (Exception e) {
Log.i(LOG_TAG, “Unexpected error – Here is what I know: “
\+ e.getMessage());
return false;
}
}
**HOOK检测**
所谓hook技术，就是通过一段代码(反射、代理)侵入到App启动过程中，在原本执行的代码前插入其它的功能。比如：通过hook技术，上传登陆页面的账号密码等。
对于主流hook框架（Xposed、frida、Cydia Substrate），通常有以下三种方式来检测一个App是否被hook:
1、安装目录中是否存在hook工具
private static boolean findHookAppName(Context context) {
PackageManager packageManager = context.getPackageManager();
List applicationInfoList = packageManager
.getInstalledApplications(PackageManager.GET_META_DATA);
for (ApplicationInfo applicationInfo : applicationInfoList) {
if (applicationInfo.packageName.equals(“de.robv.android.xposed.installer”)) {
Log.wtf(“HookDetection”, “Xposed found on the system.”);
return true;
}
if (applicationInfo.packageName.equals(“com.saurik.substrate”)) {
Log.wtf(“HookDetection”, “Substrate found on the system.”);
return true;
}
}
return false;
}
2、存储中是否存在hook安装文件
private static boolean findHookAppFile() {
try {
Set libraries = new HashSet();
String mapsFilename = “/proc/” + android.os.Process.myPid() + “/maps”;
BufferedReader reader = new BufferedReader(new FileReader(mapsFilename));
String line;
while ((line = reader.readLine()) != null) {
if (line.endsWith(“.so”) || line.endsWith(“.jar”)) {
int n = line.lastIndexOf(” “);
libraries.add(line.substring(n + 1));
}
}
reader.close();
for (String library : libraries) {
if (library.contains(“com.saurik.substrate”)) {
Log.wtf(“HookDetection”, “Substrate shared object found: ” + library);
return true;
}
if (library.contains(“XposedBridge.jar”)) {
Log.wtf(“HookDetection”, “Xposed JAR found: ” + library);
return true;
}
}
} catch (Exception e) {
Log.wtf(“HookDetection”, e.toString());
}
return false;
}
3、运行栈中是否存在hook相关类
private static boolean findHookStack() {
try {
throw new Exception(“findhook”);
} catch (Exception e) {
// 读取栈信息
// for(StackTraceElement stackTraceElement : e.getStackTrace()) {
// Log.wtf(“HookDetection”, stackTraceElement.getClassName() + “->”+
// stackTraceElement.getMethodName());
// }
int zygoteInitCallCount = 0;
for (StackTraceElement stackTraceElement : e.getStackTrace()) {
if
(stackTraceElement.getClassName().equals(“com.android.internal.os.ZygoteInit”))
{
zygoteInitCallCount++;
if (zygoteInitCallCount == 2) {
Log.wtf(“HookDetection”, “Substrate is active on the device.”);
return true;
}
}
if (stackTraceElement.getClassName().equals(“com.saurik.substrate.MS$2”)
&& stackTraceElement.getMethodName().equals(“invoked”)) {
Log.wtf(“HookDetection”, “A method on the stack trace has been hooked using
Substrate.”);
return true;
}
if
(stackTraceElement.getClassName().equals(“de.robv.android.xposed.XposedBridge”)
&& stackTraceElement.getMethodName().equals(“main”)) {
Log.wtf(“HookDetection”, “Xposed is active on the device.”);
return true;
}
if
(stackTraceElement.getClassName().equals(“de.robv.android.xposed.XposedBridge”)
&& stackTraceElement.getMethodName().equals(“handleHookedMethod”)) {
Log.wtf(“HookDetection”, “A method on the stack trace has been hooked using
Xposed.”);
return true;
}
}
}
return false;
}
## 查壳脱壳工具的核心原理
**壳的特征与侦查**
壳的特征侦查技术分为两部分，分别是APK中DEX文件与so动态库使用的编译器识别规则，以及软件壳处理目标APK后留下的特征信息。
比较常见的加固厂商特征：
娜迦： libchaosvmp.so , libddog.solibfdog.so
爱加密：libexec.so, libexecmain.so
梆梆： libsecexe.so, libsecmain.so , libDexHelper.so
360：libprotectClass.so, libjiagu.so
通付盾：libegis.so
网秦：libnqshield.so
百度：libbaiduprotect.so
**加壳技术发展**
Dex的加固技术发展
1、 dex整体加固：文件加载和内存加载
2、 函数抽取：在函数粒度完成代码的保护
获取到保护的dex后，函数体的内容是无效的，注意这里说的是无效，而不是无意义。有的app加壳后函数亦然是有意义的，但不是我们想要的。
3、 VMP和DEX2C：Java函数Native化
获取到保护的dex后，函数的属性由Java属性变为native，典型的由数字的onCreate函数Native化。Dex2C则为对Java函数进行语义分析后生成C/C++代码，生成相应的so文件。
so加固的种类
1、基于init、init_array以及JNI_Onload函数的加壳
2、基于自定义linker的加壳
3、加壳技术的识别
**脱壳方式**
动态加载型壳：
动态加载型壳属于第一代壳。静态分析变得无从下手，攻击方还可以以上帝视角来进行动态分析。面对动态分析，原本最直接有效低成本的动态加载也变成最脆弱的一种保护方式。通常只需要附加进程做一个内存漫游搜索dex.035或者甚至直接看Segment名称就能在内存中找到动态加载的dex文件并dump下来，发展到现在，这个办法依然对大部分加固的一代保护有效。
代码抽取型壳：
代码抽取型壳属于第二代壳。它的主要特点是：即使DEX已经加载到内存中，也仍处于加密状态。
真正的代码数据并不与Dex的结构数据存储在一起，就算Dex被完整的扒下来，也无法看到真正的代码。这个保护真正杜绝的了一代保护的致命缺陷，同时也宣告手工脱壳的时代结束了。
Dexhunter 是所有二代壳脱壳机的鼻祖，原理是通过主动加载Dex中的所有类，然后Dump所有方法对应代码区的数据，并将其重建到被抽取之后的 Dex
之中。
此类主动加载脱壳机大概的流程是：
遍历Dex中的所有类 -> 模拟加载类的流程(例如调用 dvmFindClass 等系列函数) -> 解析内存中的数据 -> 在 Dex
文件中填充数据或者重建结构。
代码混淆壳：
代码混淆壳分为java级别的代码混淆和原生程序的代码混淆。而原生程序的代码混淆称之为第三代壳。
代码混淆壳在编译时改写了代码生成的指令，因此分析该程序时谈不上是脱壳，而是对原始指令的还原，或者说是对代码混淆的海源。针对Obfuscator-LLVM的混淆方式，主要的分析方法为指令替换混淆的还原、控制流平坦化混淆的还原、伪照控制流混淆的还原。
## 参考资料