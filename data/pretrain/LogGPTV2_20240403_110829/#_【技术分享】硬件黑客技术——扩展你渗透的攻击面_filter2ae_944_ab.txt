**远程执行代码**
同样，攻击者可以连接外部设备公开的一些的服务，并向其发送精心构造的payload，以便利用其BOF、格式化字符串漏洞等发动攻击。此外，对于这些服务来说，只需通过类似[shodan](https://shodan.com/)这样的搜索引擎就可以轻松将其找出。
**跨站请求伪造（CSRF）**
CSRF漏洞可以在用户的浏览器中连接用于管理设备的基于Web的apps/API（这些apps/API几乎无处不在），然后执行RCE或直接修改设置——这是在基于固件的设备上的一种常见漏洞。为了缓解这种攻击，需要进行CSRF-Token检查，不过完成该项检查需要大量代码，这对于固件芯片来说代价太大了（别忘了，大多数固件芯片的最大存储空间为16Mb）。所以，这个漏洞将来还会非常常见。
**跨站脚本攻击（XSS）**
XSS也是一种糟糕的漏洞，如果能够利用存储式或反射式XSS攻陷设备的话，用户的浏览器以及设备就会随之沦陷。关于XSS的危害，这里就不多做介绍了，因为网上随处可见！并且这种漏洞本身，也是非常常见的！
**文件上传**
各种设备上不仅有噩梦般的CSRF漏洞，并且几乎所有的文件解析也很糟糕；如果新的上市设备提供了文件上传功能的话，那么它很可能含有与本地文件包含、目录遍历有关的漏洞，或含有可以直接黑掉它的漏洞（曾经见到过这样的设备，它允许攻击者以root身份将文件直接解压缩到/目录，包括恶意的/
bin / evil-ELF文件）。
**基于XML/SOAP的攻击**
越来越多的设备正在使用基于移动设备的Android/iOS应用进行设备管理。这些设备虽然听起来很酷，不过，由于开放了基于SOAP/XML/JSON的API来与应用程序通信（很少实现任何身份验证），因此诸如UPnP攻击、枚举、TR069之类的攻击也会随之而来了。
**认证/会话管理问题**
默认登陆凭证无处不在！
并且，在许多使用了某些嵌入式平台的设备上面，类似admin:admin这样可笑的用户名和密码也很常见。更可笑的是，大多数用户甚至可以将密码更改为这些设备名（许多人已经不再使用这些设备——请参阅“云”），因此这也值得注意。同时，验证信息（用户名/电子邮件）枚举攻击也很猖獗，此外还有身份验证绕过漏洞——我记得在一个设备上进行测试时，只需要有一个有效的cookie（您可以通过猜测或暴力方式获取）就可以绕过用户名/密码认证。
**信息泄露**
如果用户的大部分数据都经由某设备（如客户终端设备），万一该设备存在漏洞的话，那么这些数据也会处于风险之中。并且，这些设备还可以为进一步的恶意活动做好准备（转储CC数据，通过网络摄像头查看家里是否有人等）。不要忘了，客户终端一旦沦陷，在上面设置恶意的DNS服务器是非常非常简单的事情——但是，大多数用户（甚至技术精湛的IT人员）是不会注意到这个方面的，从来都不会。
此外，如果设备提供其管辖范围下的服务（SIP/VOIP，FemtoCell或IPTV接入）的访问权限的话，则这些设备上的内部机制一旦公开，就会外泄用于加密的私钥、通用共享密钥或凭证（通常是未加密/未经哈希处理的）、认证和加密访问证书、DRM信息和访问方法，等等。
**“云端”**
除了所有上面介绍的问题（它可能比其他地方处理得更好）外，云服务还面临另一个问题。在这种一夜未眠直到凌晨四点写完，并赶在西弗吉尼亚州最后一个公民投票给民主党时完成更新（与美国有关的笑话……我多么国际化）的混乱情况下，引进现代化的时髦服务也是一件非常糟糕的事情。
我可以说的是，即使用户从地球的另一边（通过互联网）修改了他们的路由器上的防火墙设置，但无法阻止厂商努力“解决”人们未知的问题，从而引入更多的问题。
**硬件方面的问题**
还有一些与硬件设备本身有关的具体问题：
**更多的供应链困扰**
例如，U-Boot就不支持安全引导。早在2005年的时候，ARM处理器就开始支持安全引导模式了，但是直到现有，最常见的引导加载程序也不支持安全引导。这意味着您的引导程序可能无法检查固件是否是恶意的。因此，如果与CSRF漏洞相结合的话，你可以上传一个恶意的固件文件（这一点我会专门写一篇文章加以介绍）。
我们知道，ARM是在许可证模式下销售的，因此许多最便宜的芯片使用的都是旧芯片的设计许可证。所以这个问题跟之前的完全相同——Jazelle模式是一种历史悠久的ARM
exec模式，它支持本机Java字节码执行（是的，你没看错）。后来，它被ARMv7中称为“ThumbEE”的新模式所“替换”，但是在全球范围内，您仍然可以看到数十万颗支持Jazelle的芯片。
**开发用的头文件**
这个问题从一开始就是显而易见的，之所以悬而未决，是因为制作确保“消费者安全”的电路板的成本是非常高昂的。原型设计本身可能就需要几周的时间，而如果再加上创建PCB布局的“安全”版本的耗时，那整体时间就要翻倍了，因此，大多数项目经理都会以成本为由搁置这样的想法。
此外，如果从开发板到生产板只是“省略”了一个连接电阻的话，也算不上欺骗任何人…
**Bootlog神谕**
Bootlog简直是太棒了，其内容之丰富，从便利贴式的注释，到作为[默认Wi-Fi密码的MAC地址](https://twitter.com/LargeCardinal/status/682591420969029632)，应有尽有。它不仅会告诉我们处理器的版本、芯片ID（它们通常被散热器覆盖）、内核版本、精确的软件版本，同时还会告诉我们在/at/on中运行的代码的所有模式。我将来会对bootlog做一些详细的解释，以说明其工作机制。
**看一个简单的实例**
****
我们来看一个简单的例子——许多CPE（消费者设备，对于家用设备来说，包括路由器、机顶盒、无线中继器等）都使用一些基于Linux的操作系统。假设我们已经在该类设备上连接了一个UART
shell。
假设我们知道用于管理设备的Web应用程序的参数列表（借助于Burp
Suite的话，这并非难事），并且有一个python脚本，可以用来遍历它们并注入一个自定义的payload（这很难吗？你可以用google搜啊）——那么，接下来呢？
现在，我们可以使用这个payload：
    ";echo -n "PWNED!" > /dev/ttyS0
它是做什么的？实际上，它会将短语“PWNED！”打印到串行端口（虽然该端口并非总是/dev/ttyS0，但对于Allegrosoft RomPager-esque固件来说通常如此）。也许还应该添加一个计数器，以便让它打印“PWNED! 1”，“PWNED!
2”等等，并打印到屏幕上，从而指出将其输出到哪里了。
去吃午饭吧。
吃完午饭后，你（也许）会从串口发现一些美味的漏洞——有BASH脚本远程命令执行（RCE）漏洞的任何东西都会向串口打印输出PWNED!
X。你刚才发现了一个严重的漏洞。
**那么下一步呢？**
我想知道的是，如果该RCE具有CSRF能力的话，您多久才能将这个“相邻网络RCE”变成“互联网RCE”。果真如此的话，那么可以将其嵌入到一个javascript
payload中，并利用一个非常简单的javascript代码来启动它。
**那么，接下来怎么办？**
从我的角度来看，不停的追问，正是从事硬件黑客的乐趣所在。更多精彩内容，敬请期待。