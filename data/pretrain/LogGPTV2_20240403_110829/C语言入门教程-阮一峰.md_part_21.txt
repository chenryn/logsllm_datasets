puts("Enter a string, please.");
fgets(words, 14, stdin);
puts("This is your string:");
fputs(words, stdout);
上⾯示例中，先⽤ 从 读取⽤户输⼊，然后⽤ 输出到 。
fgets() stdin fputs() stdout
写⼊成功时， 返回⼀个⾮负整数，否则返回 EOF。
fputs()
fwrite() #
⽤来⼀次性写⼊较⼤的数据块，主要⽤途是将数组数据⼀次性写⼊⽂件，适合写⼊⼆进制数据。
fwrite()
它的原型定义在 。
stdio.h
size_t fwrite(const void* ptr, size_t size, size_t nmemb, FILE* fp);
它接受四个参数。
：数组指针。
ptr
：每个数组成员的⼤⼩，单位字节。
size
：数组成员的数量。
nmemb
：要写⼊的⽂件指针。
fp
注意， 原型的第⼀个参数类型是 ，这是⼀个⽆类型指针，编译器会⾃动将参数指针转成
fwrite() void*
类型。正是由于 不知道数组成员的类型，所以才需要知道每个成员的⼤⼩（第⼆个参数）
void* fwrite()
和成员数量（第三个参数）。
函数的返回值是成功写⼊的数组成员的数量（注意不是字节数）。正常情况下，该返回值就是第
fwrite()
三个参数 ，但如果出现写⼊错误，只写⼊了⼀部分成员，返回值会⽐ ⼩。
nmemb nmemb
要将整个数组 写⼊⽂件，可以采⽤下⾯的写法。
arr
fwrite(
arr,
sizeof(arr[0]),
sizeof(arr) / sizeof(arr[0]),
fp
);
上⾯示例中， 是每个数组成员占⽤的字节， 是整个数组的成员数
sizeof(a[0]) sizeof(a) / sizeof(a[0])
量。
下⾯的例⼦是将⼀个⼤⼩为 256 字节的字符串写⼊⽂件。
char buffer[256];
fwrite(buffer, 1, 256, fp);
上⾯示例中，数组 每个成员是 1 个字节，⼀共有 256 个成员。由于 是连续内存复制，所
buffer fwrite()
以写成 也能达到⽬的。
fwrite(buffer, 256, 1, fp)
没有规定⼀定要写⼊整个数组，只写⼊数组的⼀部分也是可以的。
fwrite()
任何类型的数据都可以看成是 1 字节数据组成的数组，或者是⼀个成员的数组，所以 实际上可以
fwrite()
写⼊任何类型的数据，⽽不仅仅是数组。⽐如， 可以将⼀个 Struct 结构写⼊⽂件保存。
fwrite()
fwrite(&s, sizeof(s), 1, fp);
上⾯示例中， 是⼀个 Struct 结构指针，可以看成是⼀个成员的数组。注意，如果 的属性包含指针，
s s
存储时需要⼩⼼，因为保存指针可能没意义，还原出来的时候，并不能保证指针指向的数据还存在。
以及后⾯要介绍的 ，⽐较适合读写⼆进制数据，因为它们不会对写⼊的数据进⾏解
fwrite() fwrite()
读。⼆进制数据可能包含空字符 ，这是 C 语⾔的字符串结尾标记，所以读写⼆进制⽂件，不适合使⽤
\0
⽂本读写函数（⽐如 等）。
fprintf()
下⾯是⼀个写⼊⼆进制⽂件的例⼦。
#include 
int main(void) {
FILE* fp;
unsigned char bytes[] = {5, 37, 0, 88, 255, 12};
fp = fopen("output.bin", "wb");
fwrite(bytes, sizeof(char), sizeof(bytes), fp);
fclose(fp);
return 0;
}
上⾯示例中，写⼊⼆进制⽂件时， 要使⽤ 模式打开，表示⼆进制写⼊。 可以把数据
fopen() wb fwrite()
解释成单字节数组，因此它的第⼆个参数是 ，第三个参数是数组的总字节数
sizeof(char)
。
sizeof(bytes)
上⾯例⼦写⼊的⽂件 ，使⽤⼗六进制编辑器打开，会是下⾯的内容。
output.bin
05 25 00 58 ff 0c
还可以连续向⼀个⽂件写⼊数据。
fwrite()
struct clientData myClient = {1, 'foo bar'};
for (int i = 1; i 
int main(void) {
FILE* fp;
unsigned char c;
fp = fopen("output.bin", "rb");
while (fread(&c, sizeof(char), 1, fp) > 0)
printf("%d\n", c);
return 0;
}
运⾏后，得到如下结果。
5
37
0
88
255
12
feof() #
函数判断⽂件的内部指针是否指向⽂件结尾。它的原型定义在头⽂件 。
feof() stdio.h
int feof(FILE *fp);
接受⼀个⽂件指针作为参数。如果已经到达⽂件结尾，会返回⼀个⾮零值（表示 true），否则返
feof()
回 （表示 false）。
0
诸如 这样的⽂件读取函数，如果返回 EOF，有两种可能，⼀种可能是已读取到⽂件结尾，另⼀种
fgetc()
可能是出现读取错误。 可以⽤来判断到底是那⼀种情况。
feof()
下⾯是通过 判断是否到达⽂件结尾，从⽽循环读取整个⽂件的例⼦。
feof()
int num;
char name[50];
FILE* cfPtr = fopen("clients.txt", "r");
while (!feof(cfPtr)) {
fscanf(cfPtr, "%d%s\n", &num, name);
printf("%d %s\n", num, name);
}
fclose(cfPtr);
上⾯示例通过循环判断 是否读到⽂件结尾，从⽽实现读出整个⽂件内容。
feof()
为真时，可以通过 、 、 函数改变⽂件内部读写位置的指示器，从⽽
feof() fseek() rewind() fsetpos()
清除这个函数的状态。
fseek() #
每个⽂件指针都有⼀个内部指示器（内部指针），记录当前打开的⽂件的读写位置（file position），即下
⼀次读写从哪⾥开始。⽂件操作函数（⽐如 、 、 和 等）都从这个指示
getc() fgets() fscanf() fread()
器指定的位置开始按顺序读写⽂件。
如果希望改变这个指示器，将它移到⽂件的指定位置，可以使⽤ 函数。它的原型定义在头⽂件
fseek()
。
stdio.h
int fseek(FILE* stream, long int offset, int whence);
接受 3 个参数。
fseek()
：⽂件指针。
stream
：距离基准（第三个参数）的字节数。类型为 long int，可以为正值（向⽂件末尾移动）、
offset
负值（向⽂件开始处移动）或 0（保持不动）。
：位置基准，⽤来确定计算起点。它的值是以下三个宏（定义在 ）：
whence stdio.h SEEK_SET
（⽂件开始处）、 （内部指针的当前位置）、 （⽂件末尾）
SEEK_CUR SEEK_END
请看下⾯的例⼦。
fseek(fp, 0L, SEEK_SET);
fseek(fp, 0L, SEEK_END);
fseek(fp, 2L, SEEK_CUR);
fseek(fp, 10L, SEEK_SET);
fseek(fp, -10L, SEEK_END);
上⾯示例中， 的第⼆个参数为 long 类型，所以移动距离必须加上后缀 ，将其转为 long 类型。
fseek() L
下⾯的示例逆向输出⽂件的所有字节。
for (count = 1L; count <= size; count++) {
fseek(fp, -count, SEEK_END);
ch = getc(fp);
}
注意， 最好只⽤来操作⼆进制⽂件，不要⽤来读取⽂本⽂件。因为⽂本⽂件的字符有不同的编
fseek()
码，某个位置的准确字节位置不容易确定。
正常情况下， 的返回值为 0。如果发⽣错误（如移动的距离超出⽂件的范围），返回值为⾮零值
fseek()
（⽐如 )。
-1
ftell() #
函数返回⽂件内部指示器的当前位置。它的原型定义在头⽂件 。
ftell() stdio.h
long int ftell(FILE* stream);
它接受⼀个⽂件指针作为参数。返回值是⼀个 long 类型的整数，表示内部指示器的当前位置，即⽂件开始
处到当前位置的字节数， 表示⽂件开始处。如果发⽣错误， 返回 。
0 ftell() -1L
可以跟 配合使⽤，先记录内部指针的位置，⼀系列操作过后，再⽤ 返回原来的
ftell() fseek() fseek()
位置。
long file_pos = ftell(fp);
fseek(fp, file_pos, SEEK_SET);
下⾯的例⼦先将指示器定位到⽂件结尾，然后得到⽂件开始处到结尾的字节数。
fseek(fp, 0L, SEEK_END);
size = ftell(fp);
rewind() #
函数可以让⽂件的内部指示器回到⽂件开始处。它的原型定义在 。
rewind() stdio.h
void rewind(file* stream);
它接受⼀个⽂件指针作为参数。
基本等价于 ，唯⼀的区别是 没有返回值，⽽且会清除当前
rewind(fp) fseek(fp, 0l, seek_set) rewind()
⽂件的错误指示器。
fgetpos()，fsetpos() #
和 有⼀个潜在的问题，那就是它们都把⽂件⼤⼩限制在 long int 类型能表示的范围内。
fseek() ftell()
这看起来相当⼤，但是在 32 位计算机上，long int 的⻓度为 4 个字节，能够表示的范围最⼤为 4GB。随
着存储设备的容量迅猛增⻓，⽂件也越来越⼤，往往会超出这个范围。鉴于此，C 语⾔新增了两个处理⼤
⽂件的新定位函数： 和 。
fgetpos() fsetpos()
它们的原型都定义在头⽂件 。
stdio.h
int fgetpos(FILE* stream, fpos_t* pos);
int fsetpos(FILE* stream, const fpos_t* pos);