### HTML Form and CSRF Cookie Considerations

The HTML form, i.e., the request body, is not considered in this context. Due to the Same-Origin Policy (SOP) for cookies, the CSRF cookie will always be sent by the victim’s browser. This means that the verification will always succeed, even if the attacker does not supply a CSRF token in the HTTP request.

### Vulnerabilities in CakePHP

A vulnerability [94] in CakePHP exploits the HTTP Method Override feature [59, 62] and a missing check in the routing middleware of the framework. The issue arises because the framework performs CSRF token validation only for unsafe HTTP methods [73]. If an attacker abuses the HTTP Method Override to change the request method to a safe one (or even an arbitrary string), the CSRF verification function is not invoked. Consequently, the request reaches the targeted endpoint without a CSRF token, bypassing the CSRF verification.

### Vulnerabilities in Play Framework

A critical vulnerability in the Play Framework occurs when the developer enables the CORS module. The default configuration of this module sets the `Access-Control-Allow-Origin` (ACAO) HTTP header to reflect the request’s origin via dynamic generation [103]. Additionally, the `Access-Control-Allow-Credentials` (ACAC) header is set to `true` [40, 68]. This combination allows an attacker to send an authenticated GET request on behalf of the victim, read the CSRF token from the HTTP response across origins, and mount a CSRF attack. Another dangerous feature in Play, `bypassCorsTrustedOrigins`, is set to `true` by default. This feature allows the CSRF check to be bypassed if the request’s origin is trusted by the CORS module [68, 70].

### Documentation and API Analysis

#### Quality of the Documentation

In this section, we address Research Question 3 (RQ3) by presenting the results of our documentation analysis.

As outlined in Section 3.5, we evaluate the quality of documentation using six distinct criteria:
1. Presence of CSRF defense name or description.
2. Presence of API specifications.
3. Description of the configuration space.
4. Presence of code examples.
5. Description of cryptographic guarantees.
6. Presence of a general security considerations section.

Ideally, frameworks' documentation should meet all six criteria, but only two frameworks achieve this. Nine frameworks (20.5%) meet at least five of the six criteria. At the other end of the spectrum, six frameworks do not mention anything about CSRF and CSRF defenses. Additionally, seven frameworks fulfill only one out of the six quality criteria, meaning that 13 frameworks (29.6%) provide minimal or no CSRF documentation.

For the remaining 22 frameworks, the documentation contains between two to four of the quality criteria (seven, seven, and eight frameworks, respectively). We also observed that out of all the frameworks that provide CSRF documentation, 12 frameworks do not explain the implemented defense. These frameworks provide only minimal information, mostly focused on how to include the CSRF token in an HTML form or activate the defense. In comparison, the rest of the frameworks explain the defense and available options. Overall, our results suggest that 61.7% of the frameworks do not meet at least half of the quality criteria. This result is alarming, as it indicates that even if the frameworks support CSRF defenses, misconceptions and usability issues may arise as developers try to use these defenses. The complete mapping between web frameworks and documentation content is shown in Table 7 in Appendix A.

#### API Abstraction Analysis

Although our evaluation identified different CSRF defenses, the vast majority of frameworks (i.e., 84%) implement a defense from the Request Unguessability category. The APIs analysis reveals a variety in the semantics and operations, diverging in the integration, configuration, generation, and validation of CSRF tokens. Overall, there is no established consensus in the way unguessable request defenses are exposed to developers.

**Defense Configuration:**
- In total, 11 frameworks have the CSRF defense enabled by default.
- For the rest of the frameworks, developers need to install an external library or enable the defense in a configuration file.
- We observed that 20 frameworks allow developers to configure the CSRF defense. However, the configuration mainly relates to the type of defense to implement (Plain Token or Double Submit) and the cryptographic key. Other features such as the token length, token generation method, signing/encryption of the tokens, and HTTP methods to validate are neither explained nor configurable. As such, developers may be forced to customize the CSRF defense code via "monkey patching" to increase the security guarantees of the defense.

**Token Generation:**
- Our review of the APIs shows that web frameworks provide three distinct ways to add tokens to requests:
  1. By calling the token generation function and arbitrarily placing the token in the request.
  2. Using helpers or pseudo-variables that are interpreted by a template engine when generating the HTML code for the browser.
  3. Using framework-provided special form objects.

- Three frameworks allow calling the token generation function directly.
- 34 frameworks rely on template engines to render CSRF tokens in a form. Among these frameworks, the semantics and operations to use tokens in templates are not uniform. For example, some frameworks require using special keywords to generate the input field that stores the token (e.g., `@csrf` in Laravel). Other frameworks require the developer to create the HTML form and input fields manually and only replace the value attribute with a specific pseudo-variable. Unfortunately, these pseudo-variables are not always directly interpretable by the template engine. In Vert.x-Web, for example, the developer needs to pass the pseudo-variable to the template engine for every HTTP response so that the template engine can recognize it. Other frameworks, e.g., Django or Flask, offer template engines that handle this process automatically.
- Finally, nine frameworks offer special form objects to add the CSRF token, out of which six add the CSRF token automatically in the HTML, while for the rest, the developer needs to add the token manually.

**Token Validation:**
- Web frameworks provide three different techniques to validate the CSRF token:
  1. Calling the CSRF verification function.
  2. Using method decorators.
  3. Automatic.

- Regardless of the technique, the state-changing request is verified before reaching the targeted endpoint.

### Developers Feedback

We notified the affected frameworks about the discovered security risks (by sharing a proof-of-concept exploit) and our findings on the status of the documentation. The summary of our notification campaign is in Table 9.

**Overview:**
- Out of the total 157 notifications, 55 security risks were confirmed by the frameworks’ developers who replied to our report.
- Out of 55, 27 security risks are already patched in eight frameworks (see, e.g., [93], or [94]), and the rest of the confirmed security risks (i.e., 28) are still in the process of being patched.
- 24 out of 157 vulnerability reports are still in the process of being reviewed by the eight affected frameworks (e.g., Pyramid, Hapi, or Laravel).
- For 17 vulnerability reports that affect four frameworks (i.e., CodeIgniter, FuelPHP, Blade, and ServiceStack) and two external libraries (i.e., koa-socket for Koa and swool for Zend), the developers have not replied to our notifications yet.
- Similarly, for 18 security risks that affect four frameworks (i.e., Bottle, Zope, Nancy, and ASP.NET Web Forms), the developers said the code is no longer maintained or replaced by a newer option.
- Finally, for 43 security risks of 19 different frameworks, the frameworks’ developers decided not to take any further action because they either did not confirm the vulnerability or determined that the potential impact of the issue is low.

**Inconsistent Threat Model:**
- When looking at the developers’ feedback over the reported 14 security risks, we observe inconsistent responses about the threat’s validity.
- For 12 out of the 14 reported, at least one developers team did not consider the reported threat a valid concern, indicating that web frameworks’ users should address them.
- Conversely, for 10 out of the 14 reported vulnerabilities, at least one team acknowledged the threat and patched their code.
- Interestingly, for six out of the 14 reported vulnerabilities, one team addressed the threat, while another team did not.

### Discussion

The overarching goal of this study is to identify possible new explanations for a two-decades-old web vulnerability by examining the code and documentation of existing CSRF defenses as implemented by web frameworks. In this section, we distill our main findings, showing that while implementations of CSRF defenses exist, much of their correct and secure implementation depends on developers’ awareness about CSRF attacks, threats to defenses, and specific behaviors of the implementations.

**Who is Responsible:**
- Both our security analysis and developers’ feedback indicate that a large fraction of threats is adequately addressed by web frameworks, showing a rather consistent threat model across various web frameworks.
- However, our results show that for a significant fraction of threats, frameworks’ developers have divergent expectations about who is responsible for addressing them. For example, when we reported the insufficient key randomness security risk to the affected frameworks, CakePHP and Vert.x-Web patched the issue, but other frameworks, such as Flask and Express, questioned their responsibility for checking the developer-provided secret keys’ randomness.
- Another example is the CSRF token verification in Hapi and Masonite, which is disabled by default for unsafe HTTP methods. On the one hand, Masonite decided to patch the issue. On the other hand, Hapi argued that they expect the developer to change the default configuration. While both frameworks acknowledge that insecure default configurations lead to a vulnerability, they do not agree on the responsible party to address it.

**Correct Use Requires Awareness:**
- All frameworks, except for Meteor, require developers to write additional code to protect against CSRF attacks. Meteor does not require that and offers a by-default, cookie-less CSRF defense.
- Even worse, for more than 60% of the CSRF defenses, developers need to enable them explicitly.
- Not all frameworks offer built-in defenses, and for more than a third of the cases, developers must look for an external library by themselves. In most of these cases, frameworks’ documentation provides pointers to libraries implementing a CSRF defense, whereas the remaining ones do not offer such help.

**Secure Defenses Require Diverse Expertise:**
- Even when developers can correctly enable and use CSRF defenses, they need to be well informed about the plethora of threats that might weaken or bypass the defense building blocks.
- Our evaluation identified 14 threats, and while token generation is, in general, the most robust building block, the remaining building blocks are equally exposed to a variety of risks. We mention replay attacks, cookie tossing, and jar overflow among the most concerning ones.

**Incomplete and Inconsistent Documentation:**
- Our qualitative evaluation of the documentation shows that most of the frameworks and libraries have incomplete and inconsistent documentation. Issues range from trivial details such as the name of the implemented defense (e.g., double submit token) or advanced ones such as no code examples showing correct use.
- Even more concerning is the lack of details about the threats considered in this study that can affect the implemented defense’s building blocks. In general, we find that the documentation accompanying web frameworks and libraries does not adequately help developers in raising awareness nor build-up cognition about the many threats that can weaken or bypass CSRF defenses.

**Same-Site Helpful but May Not Completely Cut It:**
- SameSite cookies are relatively new mechanisms that could help protect from CSRF attacks. Our evaluation shows that only ten frameworks and libraries offer SameSite protection.
- However, we point out that SameSite cookies alone may not be sufficient to protect from CSRF attacks. For example, they are not sufficient to protect against a newer variant of CSRF attacks that leverage client-side JavaScript code [89].
- Similarly, when applications misuse GET-based HTTP requests for sensitive state-changing operations, the new default SameSite cookie policy (i.e., Lax) cannot mitigate CSRF attacks [39].
- Additionally, as SameSite can change the behavior of existing web services, developers may relax it on purpose to avoid adapting their code. Finally, SameSite cookies are not fully supported by all programming languages [91]. For example, SameSite cookies are not supported in PHP until PHP 7.3 [65, 67].

**Language-Specific Results:**
- A closer look at our results shows appreciable language-based differences across CSRF implementations. For example, C#-based frameworks come with a built-in CSRF defense, whereas, for other languages, a fraction between 20% to 70% of the frameworks do not offer a built-in defense.
- We also point out that web frameworks and libraries within a language tend to implement the same defense. For example, JavaScript and Java frameworks mostly implement Plain Token, while Python and C# frameworks implement Double Submit. For JavaScript, the reason is that most of the frameworks rely only on two external libraries (i.e., csurf and csrf libraries).
- We also noticed that, in contrast to the vast majority of the web frameworks, most Java frameworks are subject to timing-based side-channel attacks since they use Java’s built-in `equals` function for token comparison. The default behavior of this function does not perform a constant-time comparison (unless overridden). These examples show that the implementation of CSRF defenses may differ among frameworks of different languages.

### Conclusion

In this work, we identified and analyzed all existing CSRF defenses for potential security threats. We performed the first systematic study of the implementation and security guarantees of CSRF defenses in 44 top web frameworks of five popular programming languages. Our results are alarming. We identified 157 security risks affecting 37 frameworks that can be exploited to perform a CSRF attack. We discovered three critical vulnerabilities in CakePHP, Vert.x-Web, and Play that allow the attacker to bypass the CSRF defense. A closer look at the developers’ feedback reveals that, for a considerable fraction of security risks, frameworks have divergent expectations about who is responsible for addressing them. Additionally, we systematically reviewed the CSRF-related documentation and API surface of CSRF defenses, which showed that at least 61.4% of the frameworks do not provide sufficient documentation regarding the CSRF defense. Overall, our research shows that although web frameworks provide developers with the tools to defend against CSRF, their correct and secure implementation too often depends on developers’ awareness and diverse expertise about CSRF attacks, who need to overcome missing and misleading documentation as well as insecure defaults.

### References

[References listed here as provided in the original text]

### Additional Evaluation Details

**Table 7: Mapping between web frameworks and quality of the documentation.**

[n
o
i
t
p]

This table provides a detailed mapping of the web frameworks and the quality of their documentation, as discussed in the previous sections.