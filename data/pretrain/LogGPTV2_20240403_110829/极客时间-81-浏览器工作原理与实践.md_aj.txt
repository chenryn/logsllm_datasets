### 2. 布局计算现在我们有了一棵完整的布局树。那么接下来，就要计算布局树节点的坐标位置了。布局的计算过程非常复杂，我们这里先跳过不讲，等到后面章节中我再做详细的介绍。在执行布局操作的时候，会把布局运算的结果重新写回布局树中，所以布局树既是输入内容也是输出内容，这是布局阶段一个不合理的地方，因为在布局阶段并没有清晰地将输入内容和输出内容区分开来。针对这个问题，Chrome团队正在重构布局代码，下一代布局系统叫LayoutNG，试图更清晰地分离输入和输出，从而让新设计的布局算法更加简单。
## 总结好了，今天正文就到这里，我画了下面这张比较完整的渲染流水线，你可以结合这张图来回顾下今天的内容。![](Images/72f02167f56099d12182180c5fa0753c.png){savepage-src="https://static001.geekbang.org/resource/image/a4/9a/a4a0ea4da58260aafc9aabdd37613f9a.png"}```{=html}```渲染流水线图]{.reference}```{=html}```从图中可以看出，本节内容我们介绍了渲染流程的前三个阶段：DOM生成、样式计算和布局。要点可大致总结为如下：-   浏览器不能直接理解 HTML    数据，所以第一步需要将其转换为浏览器能够理解的 DOM 树结构；-   生成 DOM 树后，还需要根据 CSS 样式表，来计算出 DOM    树所有节点的样式；-   最后计算 DOM 元素的布局信息，使其都保存在布局树中。到这里我们的每个节点都拥有了自己的样式和布局信息，那么后面几个阶段就要利用这些信息去展示页面了，由于篇幅限制，剩下的这些阶段我会在下一篇文章中介绍。
## 思考时间最后，给你留个思考题：如果下载 CSS 文件阻塞了，会阻塞 DOM树的合成吗？会阻塞页面的显示吗？欢迎在留言区与我分享你的想法，也欢迎你在留言区记录你的思考过程。感谢阅读，如果你觉得这篇文章对你有帮助的话，也欢迎把它分享给更多的朋友。![](Images/7e91bd5c116048de87e68468f727fc3c.png){savepage-src="https://static001.geekbang.org/resource/image/3f/cb/3f4d5bec2d5c89600b4628581144d8cb.jpg"}
# 06 \| 渲染流程（下）：HTML、CSS和JavaScript，是如何变成页面的？在[上篇文章](https://time.geekbang.org/column/article/118205)中，我们介绍了渲染流水线中的**DOM生成、样式计算**和**布局**三个阶段，那今天我们接着讲解渲染流水线后面的阶段。这里还是先简单回顾下上节前三个阶段的主要内容：在 HTML页面内容被提交给渲染引擎之后，渲染引擎首先将 HTML 解析为浏览器可以理解的DOM；然后根据 CSS 样式表，计算出 DOM树所有节点的样式；接着又计算每个元素的几何坐标位置，并将这些信息保存在布局树中。
## 分层现在我们有了布局树，而且每个元素的具体位置信息都计算出来了，那么接下来是不是就要开始着手绘制页面了？答案依然是否定的。因为页面中有很多复杂的效果，如一些复杂的 3D 变换、页面滚动，或者使用z-indexing 做 z轴排序等，为了更加方便地实现这些效果，**渲染引擎还需要为特定的节点生成专用的图层，并生成一棵对应的图层树**（LayerTree）。如果你熟悉PS，相信你会很容易理解图层的概念，正是这些图层叠加在一起构成了最终的页面图像。要想直观地理解什么是图层，你可以打开 Chrome的"开发者工具"，选择"Layers"标签，就可以可视化页面的分层情况，如下图所示：![](Images/1faaee02891948fe5dce55b1c7085e63.png){savepage-src="https://static001.geekbang.org/resource/image/e2/c0/e2c917edf5119cddfbec9481372f8fc0.png"}```{=html}```渲染引擎给页面多图层示意图]{.reference}```{=html}```从上图可以看出，渲染引擎给页面分了很多图层，这些图层按照一定顺序叠加在一起，就形成了最终的页面，你可以参考下图：``{=html}![](Images/cb259b3ab3725a1e8833cf96d4cc4e47.png){savepage-src="https://static001.geekbang.org/resource/image/cd/78/cd6aac705501d48bda6e8eebca058b78.png"}```{=html}```图层叠加的最终展示页面]{.reference}```{=html}```现在你知道了**浏览器的页面实际上被分成了很多图层，这些图层叠加后合成了最终的页面**。下面我们再来看看这些图层和布局树节点之间的关系，如文中图所示：![](Images/2523beaa7f11b33329bf5e806646c633.png){savepage-src="https://static001.geekbang.org/resource/image/e8/61/e8a7e60a2a08e05239456284d2aa4061.png"}```{=html}```布局树和图层树关系示意图]{.reference}```{=html}```通常情况下，**并不是布局树的每个节点都包含一个图层，如果一个节点没有对应的层，那么这个节点就从属于父节点的图层**。如上图中的span标签没有专属图层，那么它们就从属于它们的父节点图层。但不管怎样，最终每一个节点都会直接或者间接地从属于一个层。那么需要满足什么条件，渲染引擎才会为特定的节点创建新的层呢？通常满足下面两点中任意一点的元素就可以被提升为单独的一个图层。**第一点，拥有层叠上下文属性的元素会被提升为单独的一层。**页面是个二维平面，但是层叠上下文能够让 HTML 元素具有三维概念，这些 HTML元素按照自身属性的优先级分布在垂直于这个二维平面的 z轴上。你可以结合下图来直观感受下：![](Images/0003fab51b5465697dbffe33ef13c06f.png){savepage-src="https://static001.geekbang.org/resource/image/a0/19/a03eb12053aac1ac496b61a424f20119.png"}```{=html}```层叠上下文示意图]{.reference}```{=html}```从图中可以看出，明确定位属性的元素、定义透明属性的元素、使用 CSS滤镜的元素等，都拥有层叠上下文属性。若你想要了解更多层叠上下文的知识，你可以[参考这篇文章](https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Understanding_z_index/The_stacking_context)。**第二点，需要剪裁（clip）的地方也会被创建为图层。**不过首先你需要了解什么是剪裁，结合下面的 HTML 代码：                 所以元素有了层叠上下文的属性或者需要被剪裁，那么就会被提升成为单独一层，你可以参看下图：         从上图我们可以看到，document 层上有 A 和 B 层，而 B 层之上又有两个图层。这些图层组织在一起也是一颗树状结构。         图层树是基于布局树来创建的，为了找出哪些元素需要在哪些层中，渲染引擎会遍历布局树来创建层树（Update LayerTree）。     在这里我们把 div 的大小限定为 200 \* 200 像素，而 div里面的文字内容比较多，文字所显示的区域肯定会超出 200 \* 200的面积，这时候就产生了剪裁，渲染引擎会把裁剪文字内容的一部分用于显示在div 区域，下图是运行时的执行结果：![](Images/b09b455c3c08b4aa184f3add9f6aa3ed.png){savepage-src="https://static001.geekbang.org/resource/image/6a/0c/6a583733735edc1e4d7946740eb6fc0c.png"}```{=html}```剪裁执行结果]{.reference}```{=html}```出现这种裁剪情况的时候，渲染引擎会为文字部分单独创建一个层，如果出现滚动条，滚动条也会被提升为单独的层。你可以参考下图：![](Images/832e5f86e54f8c3350aaadea2bc3ba02.png){savepage-src="https://static001.geekbang.org/resource/image/7b/97/7b6ceaab23c6c6d8e5930864ff9d7097.png"}```{=html}```被裁剪的内容会出现在单独一层]{.reference}```{=html}```所以说，元素有了层叠上下文的属性或者需要被剪裁，满足这任意一点，就会被提升成为单独一层。
## 图层绘制在完成图层树的构建之后，渲染引擎会对图层树中的每个图层进行绘制，那么接下来我们看看渲染引擎是怎么实现图层绘制的？试想一下，如果给你一张纸，让你先把纸的背景涂成蓝色，然后在中间位置画一个红色的圆，最后再在圆上画个绿色三角形。你会怎么操作呢？通常，你会把你的绘制操作分解为三步：1.  绘制蓝色背景；2.  在中间绘制一个红色的圆；3.  再在圆上绘制绿色三角形。渲染引擎实现图层的绘制与之类似，会把一个图层的绘制拆分成很多小的**绘制指令**，然后再把这些指令按照顺序组成一个待绘制列表，如下图所示：![](Images/a99336cfb7133b97e0fb76fcfd451c52.png){savepage-src="https://static001.geekbang.org/resource/image/40/08/40825a55214a7990bba6b9bec6e54108.png"}```{=html}```绘制列表]{.reference}```{=html}```从图中可以看出，绘制列表中的指令其实非常简单，就是让其执行一个简单的绘制操作，比如绘制粉色矩形或者黑色的线等。而绘制一个元素通常需要好几条绘制指令，因为每个元素的背景、前景、边框都需要单独的指令去绘制。所以在图层绘制阶段，输出的内容就是这些待绘制列表。你也可以打开"开发者工具"的"Layers"标签，选择"document"层，来实际体验下绘制列表，如下图所示：![](Images/894b70d3f33daaba61ef263188348a2f.png){savepage-src="https://static001.geekbang.org/resource/image/30/70/303515c26fcd4eaa9b9966ad7f190370.png"}```{=html}```一个图层的绘制列表]{.reference}```{=html}```在该图中，区域 1 就是 document 的绘制列表，拖动区域 2中的进度条可以重现列表的绘制过程。
## 栅格化（raster）操作绘制列表只是用来记录绘制顺序和绘制指令的列表，而实际上绘制操作是由渲染引擎中的合成线程来完成的。你可以结合下图来看下渲染主线程和合成线程之间的关系：![](Images/38e16e474069bfbfe0e7339d9493a598.png){savepage-src="https://static001.geekbang.org/resource/image/46/41/46d33b6e5fca889ecbfab4516c80a441.png"}```{=html}```渲染进程中的合成线程和主线程]{.reference}```{=html}```如上图所示，当图层的绘制列表准备好之后，主线程会把该绘制列表**提交（commit）**给合成线程，那么接下来合成线程是怎么工作的呢？那我们得先来看看什么是视口，你可以参看下图：![](Images/b23b3f21e49dec5e9c77c79685a05818.png){savepage-src="https://static001.geekbang.org/resource/image/24/72/242225112f2a3ec97e736c960b88d972.png"}```{=html}```视口]{.reference}```{=html}```通常一个页面可能很大，但是用户只能看到其中的一部分，我们把用户可以看到的这个部分叫做**视口**（viewport）。在有些情况下，有的图层可以很大，比如有的页面你使用滚动条要滚动好久才能滚动到底部，但是通过视口，用户只能看到页面的很小一部分，所以在这种情况下，要绘制出所有图层内容的话，就会产生太大的开销，而且也没有必要。基于这个原因，**合成线程会将图层划分为图块（tile）**，这些图块的大小通常是256x256 或者 512x512，如下图所示：![](Images/f54831f7c1381dc7f8a88f058bb1abcf.png){savepage-src="https://static001.geekbang.org/resource/image/bc/52/bcc7f6983d5ece8e2dd716f431d0e052.png"}```{=html}```图层被划分为图块示意图]{.reference}```{=html}```然后**合成线程会按照视口附近的图块来优先生成位图，实际生成位图的操作是由栅格化来执行的。所谓栅格化，是指将图块转换为位图**。而图块是栅格化执行的最小单位。渲染进程维护了一个栅格化的线程池，所有的图块栅格化都是在线程池内执行的，运行方式如下图所示：![](Images/23759da6a2e9549807564bbf5c760293.png){savepage-src="https://static001.geekbang.org/resource/image/d8/20/d8d77356211e12b47bb9f508e2db8520.png"}```{=html}```合成线程提交图块给栅格化线程池]{.reference}```{=html}```通常，栅格化过程都会使用 GPU 来加速生成，使用 GPU生成位图的过程叫快速栅格化，或者 GPU 栅格化，生成的位图被保存在 GPU内存中。相信你还记得，GPU 操作是运行在 GPU 进程中，如果栅格化操作使用了GPU，那么最终生成位图的操作是在 GPU中完成的，这就涉及到了跨进程操作。具体形式你可以参考下图：![](Images/498661c581fe1d1df3eb04a3cabb1cf5.png){savepage-src="https://static001.geekbang.org/resource/image/a8/87/a8d954cd8e4722ee03d14afaa14c3987.png"}```{=html}```GPU 栅格化]{.reference}```{=html}```从图中可以看出，渲染进程把生成图块的指令发送给 GPU，然后在 GPU中执行生成图块的位图，并保存在 GPU 的内存中。