”MySQL DBA工作笔记：数据库管理、架构优化与运维开发
锁一样。
索引来对记录加锁。
角色和这个是类似的。
生活中的红绿灯，一般路灯红绿灯切换是不会马上切换的，而是会转为黄色，转为黄色
被共享锁锁定了，事务B申请写锁的操作会被阻塞。
后
协调者的。
随着数据量的增加，这个代价就会无限放大；在这种情况下，意向锁就是来做这个冲突
断表中的每一行是否被行锁锁住，显然这种方案是不可接受的，因为需要遍历整个表，
制来判断，避免这个冲突，比如我们需要先判断表是否被其他事务用表锁锁定，然后判
括共享锁S 锁定的那一行，这种情况下和事务A持有的行锁是冲突的，就需要有一种机
可以使用lock table xxxx write 的方式锁表），那么理论上它就能修改表中的任意一行，包
行锁 S，即这一行只能读不能写。之后事务B申请整个表的写锁，在（MySQL Server 层
后，会有几秒钟的缓冲时间，而这些就是留给了行人和司机的准备时间，表级意向锁的
如果不通过索引条件检索数据，那么InnoDB 将对表中所有数据加锁，实际效果跟表
·间隙锁（Gap Lock)：对索引项之间的间隙、对第一条记录前的间隙或最后一条记
·行锁（Record Lock）：对索引项加锁，即锁定一条记录；
InnoDB支持如下的三种行锁定方式：
InnoDB 行锁是通过给索引项加锁实现的，如果没有索引，InnoDB 会通过隐藏的聚簇
说完表级意向锁，我们继续来说行锁。
整个表级意向锁的加锁过程是自动完成的，我们可以举个例子来说明下，比如我们
·意向共享锁（IS)：表示事务准备给数据行加入共享锁，也就是说一个数据行加共
而这也是为什么需要表级意向锁的主要原因，InnoDB 有两个表级意向锁：
（2）事务B申请排它锁，但是发现表上已经有意向共享锁，说明表中的某些行已经
（1）事务A必须先申请表的意向共享锁，成功后申请一行的行锁；
所以一个正常的流程就会变为：
在此我们可以设想一个场景：有两个事务A和B，事务A锁住了表中的一行，加了
select * from table_name where.....for update
·排他锁（X)：允许获得排他锁的事务更新数据，但是组织其他事务获得相同数据
select * from table_name where .....lock in share mode
·共享锁（S)：允许一个事务去读一行，阻止其他事务获得相同的数据集的排他锁。
个数据行加排他锁前必须先取得该表的 IX锁。
集的共享锁和排他锁。
意向排他锁（IX）：类似上面，表示事务准备给数据行加入排他锁，说明事务在一
享锁前必须先取得该表的 IS 锁。
---
## Page 299
看到直接声明 share mode 的方式，但是有很多时候会由其他的场景触发，比如对于
场景下，死锁的步骤如下：
机制：wait-for graph 算法。
产生阻塞，如图7-11所示，这是一种经典的死锁检测
兼容的。按照这个思路几乎不用记就能基本理解了。
一部分则是S 和X的兼容性。带着 S 锁和X锁的组合都是互相排斥，而 S 锁之间是互相
锁之间是互相兼容的，这句话很重要。按照这个思路里面一半的内容就明确了。而另外
学会有些迷糊，MySQL 里的锁兼容列表大体是图 7-10 这样的关系，我们需要明确：意向
Lock)。如果一个间隙被事务加了锁，其他事务是不能在这个间隙插入记录的。
选中的索引记录加上行锁（Record Lock），再对索引记录两边的间隙加上间隙锁（Gap
到目前为止，我们也说了几种锁了，这些锁之间是什么样的兼容关系，可能有的同
所以上面的语句特点很明显，插入的数据分别是1和2产生了死锁，我们可能很少
我们来看一个死锁的小例子，在两个会话并发的
然后按照下表 7-5的方式来操作。
首先创建一张表 dtl，语句如下：
此外就是死锁，如果锁不兼容的情况下，通常会
create table dt1 (id int unique）;
Next-key Lock 是行锁与间隙锁的组合，
Next-key Lock：锁定一个范围的记录并包含记录本身。
录后的间隙加锁，
二
时间
T2
X
（排他锁）
快
冲突
select *from dt1 lock in share mode;
insert into dtl values(1);--阻塞
，即锁定一个范围的记录，不包含记录本身；
兼容
S（共享锁）
begin;
冲突
会话
突
容
表7-5
图7-10
：当 InnoDB 扫描索引记录的时候，会首先对
兼容
兼容
IX（意向排他锁）
冲突
冲突
insert into dtl values(2);产生死锁
select *from dtl lock in share mode;
兼容
IS（意向共享锁）
冲突
begin;
会话
图7-11
---
## Page 300
278丨MySQLDBA工作笔记：数据库管理、架构优化与运维开发
update)；加锁的情况如下图 7-12所示。
在此表示感谢。
锁也会有相应的变化，我们在这里来梳理一下，总结一些要点。
7.3.2
duplicate 数据的检查会开启 S 锁。这是比较特别的一点，需要注意。
本小节中部分内容的思路参考了何登成的一篇博文，链接是：htp:/hedengcheng.com/?p=771
我们以 RC 隔离级别为例开始，首先触发一条 SQL（select*from test where id=6 for
mysql> select 
Insert into test values(1,'aa'),(2,'bb'),(3,'cc'),(4,'gg'),(5,'ff'),
Create table test(id int unique key,name 
数据情况如下：
插入测试数据：
比如一张表 test，我们分别创建唯一性索引和主键，
对于唯一性索引和主键，在加锁过程中也存在着较大的差别，在不同的隔离级别下
rows in set (0.00 sec)
id
索引加锁过程的差异
9
5
IDXID
Iname
dd
开6
NAM
from test;
图7-12
8
varchar(30) primary key);
表结构信息为：
￥锁
---
## Page 301
如下图 7-15所示。
所示。
加锁会有2个X锁，一个位于唯一性索引的键值记录，另外一个对应聚簇索引的键值。
程1的存在，会造成更新的冲突。所以我们可以继续做下总结：对于唯一性索引来说，
果线程1没有将主键索引上的记录加锁，那么并发线程2的update 语句就会感知不到线
其实我们可以设想这样一个场景，如图7-13所示。
同时根据得到的 name 列，在主键聚簇索引中将 name='ee'对应的主键索引项加X锁。
：按照这个思路，对于非唯一性索引，也会关联锁定相应的主键聚簇索引项，如图7-14
我们可能会有些疑问，id=6 和 name='ee'是指向同样的记录，要不要分这么清楚，
这种场景略微复杂的一些的是基于 RR 隔离级别，并且是在非唯一性索引的情况下，
如果两个并发线程，线程1通过唯一性索引锁定，线程2 通过主键索引来更新，如
在这种情况下，select 语句会根据 where 条件将唯一性索引id=6 的记录加上X 锁，
唯一性索引
NAME
NAME
ID
并发线程2：Update test set id=10 where name=*ee”
图7-14
图7-13
并发线程1：Select *from test where id=6 forupdate
吊
---
## Page 302
280丨MySQLDBA工作笔记：数据库管理、架构优化与运维开发
还是不够完整，只打印出了等待的锁，而没有持有的锁，有很多业内朋友是通过修改内
没法通过日志体现出来的；还有一点，如果仔细看上面的日志就会发现，事务1的日志
章。我们看到的是最后得到的一个状态信息（类似盖上印章的一瞬间)，而完整的过程是
Transaction 2；这里需要指出，这其实是发生死锁的临界状态的事务信息，就好似一个印
deadlock_detect 是在 MySQL 5.7.15版本之后增加，默认是打开的。
了死锁检测输出日志的参数后得到的。
这个问题就算基本搞明白了。
题的分析就可以通过很多不确定性分析判断，得到确定性的结果，然后分析和预期一致，
问题：通过日志来反推死锁产生的可能场景，然后依次深入，扩展，这样一来，这个问
景，但是总感觉还是有一些欠缺或者不完善的地方。那么我们就换一个思路来分析死锁
7.3.3
任性。
面讲到的间隙锁，从这个执行代价来看，我们是强烈建议表中的索引设计不能太随意和
通常来说，MySQL死锁的日志比较简略：它分为了两个事务，Transaction1和
mysql> show variables like '%dead%';
所以在此我不给出表结构，只给出死锁的日志来。这样一段日志，是在 MySQL 设置
innodb_print_all_deadlocks 是打印死锁日志到错误日志中，而另一个参数 innodb
怎么来分析一个死锁问题呢，我一直在琢磨这个问题，自己也总结了不少出现的场
在 RR隔离级别下，产生的锁的复杂度比RC 要高，会有一种额外的锁，就是我们前
Variable_name
innodb
innodb_deadlock_detect
这样分析一个死锁问题
性索引
NAME
NAME
deadlocks
|Value|
—ON
图7-15
AP锁
---
## Page 303
BE GRANTED)，相关的锁等待为（lock_mode X waiting，Next-key 锁)。
num=10,加锁的对象是索引 num,这个唯一的行锁处于等待状态（WAITING FOR THIS LOCK TO
有1个（tables in use 1)，有2个锁（一个表级意向锁，一个行锁），语句为：delete from dtestl where
其实得到的是不够完整的信息，需要我们不断推导和梳理，有点类似于做完形填空。
核代码来把这个信息补充完整的。
(1)
但是发生死锁的时候是有两个事务互相阻塞，循环形成死锁，所以我们要分析死锁日志，
RECORD LOCKS space id 34 page no 4 n bits 72 index num of table 
MySQLthread id 6，
TRANSACTION
我们可以看到整个事务持续（阻塞）了 46 秒钟，很快就会达到触发超时的阈值，涉及的表
RECORD LOCKS space id 34 page no 4 n bits 72 index num of table ^test`.
2017-09-11T10:07:08.103195Z 6 [Note] InnoDB: *** (1) WAITING FOR THIS LOCK
0:len 4;hex 8000000a;asc
再来看看第二个事务，内容略长一些。
delete from dtestl where num=10
LOCK WAIT 2 lock struct(s),
nysgi
TRANSACTION 2844, ACTIVE 46 sec starting index read
***（1） TRANSACTION:
事务1的日志信息如下，
我们就依次来分析两个事务的日志信息。
len4;
tables
hex
hex
2843，
8000000a;
8000000a;
use
ACTIVE
asc
ocked
asc
asc
92
heapsize
id
3
1136,
lockmode
trx
id
row lock(s)
2843
X
locksrec
第7章MySQL事务和锁丨281
mode
test
TO BE GRANTED:
TOBE
 root updating
but
root update
dtest1
GRANTED:
localhost
.`dtest1`
bits 32
bits
`dtest1
bits
info
32
32
---
## Page 304
282丨MySQL DBA工作笔记：数据库管理、架构优化与运维开发
过这样一个分析能为大家提供一种思路。
可以通过一个案例举一反三，发掘出更多的潜在信息。这个过程也是抛砖引玉，希望通
报错，所以此处只能是 delete 的操作，
操作，也就是日志中的第一部分显示。
下面的分析就很重要了。
引，我们假设为 insert 或者 delete 操作（限定下范围），进一步限定是两个会话中的事务，
样一来insert 之前是有一个事务在做一个和唯一性索引相关的操作，我们梳理一下。
能是其他的事务，不一定是事务1）中会去触发，在事务2中才会持有一个S 锁，所以这
能是一个唯一性索引。
时候，是需要先加一个S锁的，所以由此我们可以进一步推理出这个Num对应的索引可
为什么会是S 锁，事务2中相关的 SQL 是 insert 语句，如果需要进行唯一性冲突检查的
事务持有RecordLock，等待的锁为S 锁。出现S 锁看来是一个突破口，我们就需要明白
mode S waiting)。
（lock_mode Xlocks rec but not gap，no gap lock)；另一部分是等待的锁，锁模式为（lock
事务2中的持有的 S 锁，我们可以从下往上去推理，事务1上面肯定是一个 delete
由此我们可以进一步分析，何时得到的这个S 锁呢，肯定是在另外一个事务（也可
大体我们得到了这样的信息：
由上可知，我们能够通过有限的信息来补足死锁的场景；对于我们学习而言，我们
create table dtestl (id int primary key,num int unique);
建表语句为：
(3）事务 2：insert into dtest1 values(11,10);
（2）事务1:delete from dtest1where num=10;
（1）事务 2：delete from dtestl where num=10;
最后我们给出整个死锁的过程完整过程，如下：
如果在事务2 中先做的是一个 insert 操作，
(3）事务 2：insert into dtestl values(11,10)
（2）事务 1:delete from dtestl where num=10
（1）事务2：insert/delete操作待分析
按照这个方向往下去想，整个死锁的场景应该是下面这样的。
根据持有的S锁我们可以猜测可能是在事务2之前有一
·事务2相关的 SQL：insert into dtest1 values(11,10)。
·事务1相关的 SQL：delete from dtestl where num=10;
可以看到分为两部分内容，
一部分是持有的锁（HOLDSTHELOCK）,锁模式为
一个事务等待的行锁模式为 Next-key Lock，另外一个
显然在事务 2中会直接抛出 duplicate 的
--申请S 锁，产生了循环等待。
--申请X锁，进入锁请求队列。
--record lock。
一个 DML操作阻塞了唯一性索
---
## Page 305
么3条insert会出现死锁呢，我们来模拟下这个场景。
RR 隔离级别都是适用的，也希望大家在学习的过程中也不断总结完善。
家进行对比查阅。
锁的坑都踩一遍，所以在此我整理了一些自己碰到过的死锁案例，整理出来，也方便大
体系，锁的学习也是如此，可能我们了解了原理，但是不能指望在实际工作中把一些死
过快速的模拟让自己熟悉场景。所以方法各有千秋，我们需要通过学习重构自己的知识
清，虽然能够模拟出一些场景来，但是总是有一种隔靴搔痒的感觉，而好处则是可以通
7.4
反过来学习理论。这种方式有一个劣势，那就是基础的概念理解不透而导致学习目标不
接下来我会通过六个场景的案例来复现一下死锁的过程，如无特别说明，对于 RC 和
我有个学习的习惯，有时候也不知道好还是不好，那就是喜欢直接上手练习，然后
LOCK WAIT 2 lock struct(s), heap size 1136, 1 row lock(s), undo log entries 1
mysql tables in use 1,locked 1
TRANSACTION 3858,
2017-08-31T15:19:51.632166Z 4 [Note] InnoDB:
2017-08-31T15:19:51.632123z 4 [Note] InnoDB: Transactions deadlock
如下是死锁日志，并对部分死锁日志做了下解释：
模拟的步骤如下表 7-6所示。