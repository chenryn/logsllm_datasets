result was obtained after 24 hours. We are still investigating to
find whether some crash-inducing inputs we provided also cause
irreparable damage to the device.
When validating the crash reports for the Device ID 3, we
noticed that, after sending the crash-inducing input, the TCP
connection was dropped, and the device response time significantly
increased. We found that this bug, as well as the bug affecting the
Device ID 6, were known vulnerabilities [25].
For Device ID 11 (a popular smart door lock), we noticed that
after around two hours of fuzzing the device became unreachable
for the watchdog device. Even more interestingly, the device then
started to make an intermittent noise, which we realized being
“SOS” encoded in morse code3. We then reset the door lock, and
we observed that it started to show erratic behavior. For example,
we noticed that it was not possible to control it through two
different Android phones anymore: If the lock status was shown
as “online” on one companion app, it would be “unreachable” on
the same companion app on another phone. We are still working
with the vendor to find the root cause of the problem.
We reported our findings to the appropriate manufacturers and,
to the best of our knowledge, all bugs have been fixed.
D. DIANE vs. IoTFuzzer
To compare our approach to IoTFuzzer [25], we contacted the
authors and obtained their tool. We also attempted to purchase the
same devices used to evaluate IoTFuzzer, but we could only obtain
Device 3 and 6, as the remaining ones were only available in China.
IoTFuzzer required manual intervention to be adapted to
different devices and companion apps. In particular, we had to i)
limit the scope of the analysis (i.e., number of hooked functions)
to a subset of Java packages present in the Android apps—to keep
the analysis tractable and avoid crashes—and ii) manually specify
any encryption functions present in the app. After this manual
configuration step, we were able to replicate the results presented
in the original paper for the devices we were able to obtain (Device
3 and Device 6). Additionally, IoTFuzzer is based on TaintDroid,
whose latest release supports up to Android 4.3 (2012). For this
reason, we were not able to analyze Device 10 and Device 11, as
their companion apps require newer Android SDK versions.
Our results are reported in Table III. IoTFuzzer crashed Device
3 and 6 (the two devices used in the original paper) and Device
2, but failed to find any bugs for the other 8 devices.
For Device 2, IoTFuzzer identified 5 functions to fuzz. We
manually analyzed these functions and found that three of them
were false positives, as they were used to save user information
3Audio recording: http://bit.ly/3oWcjgD
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:29:05 UTC from IEEE Xplore.  Restrictions apply. 
492
1
2
3
4
5
6
7
8
9
1
2
3
4
5
6
7
Then, we
proceeded
named
on the Android phone. To confirm our findings, we fuzzed these
functions and observed that none of them generated network traffic.
remaining
to
and
functions,
HouseExtProperty
changeCameraUsernamePassword. While
fuzzing
the HouseExtProperty function for an hour, we discovered
that
the generated messages were directed to the vendor’s
cloud, rather than the actual device, therefore not producing any
meaningful fuzzing input for the IoT device.
fuzz
two
the
The changeCameraUsernamePassword function is,
instead, used to change the credentials on the IoT device. We
fuzzed this function for 24 hours, and IoTFuzzer rediscovered 2
of the 7 bugs that DIANE found on this device.
To understand better why IoTFuzzer missed some of the bugs we
found, we examined changeCameraUsernamePassword
(shown in Figure 4). This function calls the functions
cam.changeUsername and
cam.changePassword
to generate the requests to change the username and password,
respectively (the first argument of these functions represents the
current username of the camera). Also, the variable cam is an
internal structure that the app uses to store the details of the camera
(e.g., the camera model), and its content is not directly influenced
by the data received from the app’s UI. On the other hand, both
newUsr and newPwd contain user data, which is passed through
the app’s UI. As IoTFuzzer fuzzes only the function arguments
that contain user data (when a function is invoked), it fuzzes the
second and third function arguments, but it does not fuzz the first.
Unfortunately, as we explain in detail in Section IV-G, this
camera contains a bug that can be exploited if the request generated
by the companion app contains a username whose length is larger
than a particular buffer size. However, by fuzzing the second
two arguments of changeCameraUsernamePassword
IoTFuzzer
of
cam.changeUsername and cam.changePassword—
newUsr and newPwd respectively—and it does not mutate
their first parameter ( cam.user), which would lead to the
discovery of an additional bug. This case highlights a limitation
of IoTFuzzer’s approach, as it shows that assuming that all the
data being sent to the device comes directly from the app’s UI
is ineffective to find bugs in an IoT device. On the other hand,
our bottom-up approach, which bootstraps its analysis from
sendMessage functions (see Section III), is agnostic with respect
to the sources of input, and, therefore, is more generic.
only mutate
parameter
second
the
In addition, changeCameraUsernamePassword allows
one to modify the credentials only for specific camera models (Line
2, cam.checkCameraModel). This means that IoTFuzzer
cannot effectively fuzz other camera models. By identifying a
fuzzing trigger deeper in the control flow, DIANE, instead, bypasses
this check and is effective independently from the device version.
For Device IDs 7 and 8, IoTFuzzer caused the app to crash
immediately due to the number of hooked functions. We narrowed
the analysis to only the package containing the code to interact
with the device, but the app would crash regardless. Thus, we
could not run IoTFuzzer on these devices.
boolean changeCameraUsernamePassword(Camera
cam, String newUsr, String newPwd) {
if(cam.checkCameraModel()) {
if(cam.user.compareTo(newUsr) != 0)
cam.changeUsername(cam.user, newUsr);
if(cam.pwd.compareTo(newPwd) != 0)
cam.changePassword(cam.user, newPwd);
}
//...
}
Fig. 4. Fuzzing function found by IoTFuzzer for the Insteon camera
(Device ID 2). We report only the relevant code for space reasons.
void
changeCredentials(String newUsr, String newPwd) {
if(this.confirm_credentials()) {
if(!this.get_user().equals(newUsr)
&& !this.get_pwd().equals(newPwd))
this.changeUserAndPwd(newUser, newPwd);
//...
}
}
Fig. 5. Fuzzing function found by IoTFuzzer for the Foscam cameras
companion app (Device IDs 4 and 5).
For Device ID 9, IoTFuzzer identified 3 functions to fuzz.
However, we found these functions to be false positives, as they
were used to log user data on the smartphone.
For Devices IDs 1, 4, and 5 (marked with • in Table III)
IoTFuzzer failed to identify any functions to fuzz. The reason is
that to find a function to fuzz, IoTFuzzer has to first find a data
flow between a UI element of the app and the Android’s socket
send function. However, in these devices the “send” functionality
is implemented in native code (i.e., these devices do not rely
on the Android’s send function). As IoTFuzzer cannot identify
send functions in native code, it failed to identify what UI events
would eventually generate network traffic, and, therefore, it did
not generate any valid fuzzing inputs. DIANE overcomes this
limitation by using dynamic analysis, and find the border functions
that generate network traffic, as explained in Section III-A.
To help IoTFuzzer and have a direct comparison with our
tool, we hard-coded the send functions found by DIANE in
IoTFuzzer, and re-ran the analysis for these devices. For Device
IDs 4 and 5, IoTFuzzer identified one candidate function to fuzz,
which, similarly to Device ID 2, is used by the app to change the
device’s credentials. This function is depicted in Figure 5, and it
implements a check (through confirm_credentials) that
asks the user to provide their credentials in order to proceed. As
a result, fuzzing changeCredentials did not produce any
meaningful input to the camera, as the check would constantly
fail. Instead, DIANE identified as a fuzzing trigger the function
changeUserAndPwd, which is not affected by any checks, and
effectively sends commands to the camera when fuzzed. These
cases highlight another limitation of IoTFuzzer’s approach, as they
show that fuzzing the first function in the app’s control flow that
handles user-provided data is ineffective.
For Device ID 1, IoTFuzzer identified a function called
setUser, which sends the user’s login information to the device.
In this case, this function is guarded by a check that forbids the
user’s password to contain some special characters (e.g., “&”).
We fuzzed this function for 24 hours and we did not register any
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:29:05 UTC from IEEE Xplore.  Restrictions apply. 
493
anomaly in the device. Also in this case, DIANE selected a function
deeper in the control flow of the app, after any client-side checks.
This was necessary to successfully discover a (zero-day) bug.
Overall, DIANE performed as well as IoTFuzzer only in two
cases (Device IDs 3 and 6), and it outperformed IoTFuzzer in all
the other cases—either because IoTFuzzer was unable to identify
any meaningful send functions, or because it did not produce any
crash-inducting input.
This evaluation highlights the importance of carefully selecting
the right function to fuzz within the companion app, and that app-
side sanitization checks hinder the efficacy of a fuzzing campaign.
This issue is exacerbated by the frequency in which app-side
sanitization is present in companion apps. For instance (as shown in
Table II), in our dataset we found that at least 7 out of 11 apps con-
tain sanity checks. We further measure this aspect in Section IV-E.
E. App-side Sanitization and Fuzzing Triggers
App-side Sanitization. To evaluate how common app-side
sanitization code is in companion apps, we first manually
reverse-engineered the 11 companion apps of the IoT devices in
our dataset. As shown in the Sanity Checks column of Table II,
at least 7 out of 11 apps contain sanity checks.
As an additional evaluation of this aspect, we performed a
large-scale study on the presence of app-side sanitization code in
companion apps. For this experiment, we used 2,081 apps, which
we gathered from related work [79]. This dataset is ideal for our
evaluation as it specifically contains Android companion apps
of IoT and smart home devices, which have been collected from
the Google Play Store and manually inspected by the authors of
the related work. To the best of our knowledge, this is the largest
dataset of validated IoT companion apps. Since we did not have
access to all the physical devices that these apps interact with, we
could not run DIANE against them, and, therefore, we implemented
a fully-static automated approach, suitable for a large-scale study.
Specifically, given a companion app, we identified its
sendMessage functions by locating functions that contained I/O
operations (as detailed in Appendix A). We were able to identify
sendMessage functions for 1,304 of the apps (~63%). For the
remaining apps, we were not able to statically identify any network-
related operations, as we could not find, for instance, a socket send
operation. Then, we performed an inter-procedural backward slice
from every argument of each identified sendMessage function, and
considered the instructions in each slice. Finally, we counted the
comparisons against constant data (e.g., using a string comparison
in a if statement) in these slices.
In this experiment, we found that 663 (~51%) companion apps
implement sanitization of the data being sent, and that, on average,
the variables handled by a sendMessage function are affected
by 7 checks across the companion app. To validate these results,
we randomly selected 100 sendMessage functions and found
85 to be true positives, 14 to be false positives (these functions
were sending messages to another Android thread), and for 1 of
them we could not determine its functionality, as it was heavily
obfuscated. Also, we randomly sampled 30 functions that we
detected were applying input sanitization code, and found 29 to be
true positives: the companion app applied checks on the user data.
this experiment
These results show how app-side sanitization code is common
is only an
in companion apps. Note that,
approximation of our approach, which requires the physical
devices to be fully effective. Therefore, these results do not aim
to evaluate our approach, rather they serve as an indication of the
presence of input validation code in mobile apps. Our results are
in line with a recently published study [86].
Fuzzing Triggers. We also evaluated how prevalent fuzzing
triggers are in Android companion apps. As DIANE relies on
dynamic analysis to find fuzzing triggers, we replaced the parts
of our approach that leverage dynamic analysis with symbolic
execution. We used the Java support provided by the angr [71]
tool to symbolically execute the app’s functions in a slice (see
Algorithm 1), so to calculate the Shannon entropy. In particular,
we concretize the input of a function (i.e., its live variables)
with known values, symbolically execute the function, and
observe the values in the output (i.e., its live variables when the
function returns). Then, we replicate our approach explained in
Section III-A, and calculate the difference of entropy introduced
by each function to identify the data-transforming functions.
We sampled 100 apps from the 2,081 aforementioned apps, ran
our analysis, and manually verified the results. For 37 apps, our
analysis found fuzzing triggers, and for the remaining 63, it did not.
We investigated our results and found that our analysis correctly
identified a fuzzing trigger for 25 of the 37 apps, and it produced
false positives in the remaining 12 cases. These false positives were
due to imprecisions in our inter-procedural backward slicer (i.e.,
our static analysis could not find the callers of a given function).
On the other hand, in 63 apps our analysis did not find any
fuzzing trigger because of imprecisions of the symbolic execution.
In fact, to keep the analysis tractable, we symbolically execute every
function up to 10 minutes and follow up to 2 consecutive function
calls (we drop the collected symbolic constraints when a function
call is not followed). As such, when the analysis fails to calculate
the added entropy of a given function, we stop the analysis.
Overall, we found fuzzing triggers for 25% of the analyzed apps.
While this number sufficiently demonstrates that such sweet spots
are, indeed, present in many apps, we highlight that, in our analysis,
this is a lower bound. In fact, our attempt to emulate our approach
using symbolic execution introduces imprecisions that would not
occur when using DIANE together with the real devices. Therefore,
we expect this number to be even higher in practice. This further
emphasizes the need for a system that can identify fuzzing triggers
that are located past client-side checks in the companion apps.
F. DIANE vs. Network-Level Fuzzing
We also compared DIANE to well-known network fuzzers:
BED [2], Sulley [3], uFuzz [13] (UPnP endpoints), and bss [4]
(Bluetooth fuzzer). Table III shows the results of the comparison.
Note that the labels N/A indicate that the corresponding network
fuzzer does not handle the network protocols employed by the
corresponding IoT device.
We configured BED and Sulley as indicated by previous
work [25], and the remaining tools as suggested by their related
web pages. We ran each tool for 24 hours. However, uFuzz
finished its fuzzing cycle before the allocated time, and bss was
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:29:05 UTC from IEEE Xplore.  Restrictions apply. 
494
public static String httpRequest(String req, ...){
// perform the requested HTTP request
}
/* Camera class */
private Result sendCommand(String cmd, TreeMap t){
String fmt = "http://%s/CGIProxy.fcgi?cmd=%s:%s";
toSend = String.format(fmt,CAMERA_ENDPOINT, cmd);
Iterator it = t.keySet().iterator();
while(it.hasNext()) {
String key = (String)it.next();
String val = (String)t.get(key);
toSend
+= "&" + key + "=" + this.encodeUrlParam(val);
}
String encUser = this.encodeUrl(this.user);
String encPwd = this.encodeUrl(this.passwd);
fmt = "&usr=%s&pwd=%s"
toSend += String.format(fmt, encUser, encPwd);
HttpUtil.httpRequest(toSend,"GET",null,10,10);
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
}
}
public boolean
changePassword(String user, String newPwd) {
TreeMap t = new TreeMap();
t.put("usrName", user);