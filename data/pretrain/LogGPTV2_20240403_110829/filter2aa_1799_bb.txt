shown earlier (WaitForSingleObject, etc.) is called on the object.
Methods
One or more routines that the Object Manager calls automatically at certain points in 
Synchronization
to synchronize its execution by waiting for an object to change from one state to another. A thread can 
-
ity to support synchronization is based on three possibilities:
I 
The executive object is a wrapper for a dispatcher object and contains a dispatcher header, a
kernel structure that is covered in the section “Low-IRQL synchronization” later in this chapter.
I 
The creator of the object type requested a default object, and the Object Manager provided one.
I 
The executive object has an embedded dispatcher object, such as an event somewhere inside
when registering the object type (described in Table 8-14).
Object methods
The last attribute in Table 8-22, methods, comprises a set of internal routines that are similar to C++ 
constructors and destructors—that is, routines that are automatically called when an object is created 
or destroyed. The Object Manager extends this idea by calling an object method in other situations 
as well, such as when someone opens or closes a handle to an object or when someone attempts to 
-
pending on how the object type is to be used.
CHAPTER 8 System mechanisms
141
When an executive component creates a new object type, it can register one or more methods with 
The methods that the Object Manager supports are listed in Table 8-23.
TABLE 8-23 Object methods
Method
When Method Is Called
Open
When an object handle is created, opened, duplicated, or inherited
Close
When an object handle is closed
Delete
Before the Object Manager deletes an object
Query name
When a thread requests the name of an object
Parse
When the Object Manager is searching for an object name
Dump
Not used
Okay to close
When the Object Manager is instructed to close a handle
Security
object namespace
-
-
tines would have required the designers of the Object Manager to anticipate all object types. Not only 
would this add extreme complexity to the kernel, but the routines to create an object type are actually 
exported by the kernel! Because this enables external kernel components to create their own object 
types, the kernel would be unable to anticipate potential custom behaviors. Although this functional-
ity is not documented for driver developers, it is internally used by Pcw.sys, Dxgkrnl.sys, Win32k.sys, 
ConnectionPort, NdisCmState, and other objects. Through object-method extensibility, these drivers 
Another reason for these methods is simply to allow a sort of virtual constructor and destructor 
additional actions during handle creation and closure, as well as during object destruction. They even 
allow prohibiting handle closure and creation, when such actions are undesired—for example, the pro-
tected process mechanism described in Part 1, Chapter 3, leverages a custom handle creation method 
to prevent less protected processes from opening handles to more protected ones. These methods 
also provide visibility into internal Object Manager APIs such as duplication and inheritance, which are 
delivered through generic services.
be used to implement a secondary namespace outside of the purview of the Object Manager. In 
-
these methods.
142 
CHAPTER 8 System mechanisms
The Object Manager only calls routines if their pointer is not set to NULL in the type initializer—with 
one exception: the security routine, which defaults to SeDefaultObjectMethod. This routine does not 
need to know the internal structure of the object because it deals only with the security descriptor for the 
not inside the object body. However, if an object does require its own additional security checks, it can 
The Object Manager calls the open method whenever it creates a handle to an object, which it does 
Desktop objects provide an open method. Indeed, the WindowStation object type requires an open 
method so that Win32k.sys can share a piece of memory with the process that serves as a desktop-
related memory pool.
An example of the use of a close method occurs in the I/O system. The I/O manager registers a close 
Object Manager itself can or should do.
The Object Manager calls a delete method, if one is registered, before it deletes a temporary object 
from memory. The memory manager, for example, registers a delete method for the section object 
-
tures the memory manager has allocated for a section are deleted before the section object is deleted. 
-
ings of the memory manager. Delete methods for other types of objects perform similar functions.
The parse method (and similarly, the query name method) allows the Object Manager to relinquish 
Object Manager namespace. When the Object Manager looks up an object name, it suspends its search 
when it encounters an object in the path that has an associated parse method. The Object Manager 
calls the parse method, passing to it the remainder of the object name it is looking for. There are two 
-
resume.doc, the Object Manager traverses its name tree until it reaches the device object named 
HarddiskVolume1. It sees that a parse method is associated with this object, and it calls the method, 
passing to it the rest of the object name it was searching for—in this case, the string docs\resume.doc. 
CHAPTER 8 System mechanisms
143
The security method, which the I/O system also uses, is similar to the parse method. It is called 
change it.
-
has a handle to the Desktop object or objects on which its thread or threads have windows visible. 
Under the standard security model, it is possible for those threads to close their handles to their desk-
tops because the process has full control of its own objects. In this scenario, the threads end up without 
a desktop associated with them—a violation of the windowing model. Win32k.sys registers an okay-to-
close routine for the Desktop and WindowStation objects to prevent this behavior.
Object handles and the process handle table
When a process creates or opens an object by name, it receives a handle that represents its access 
to the object. Referring to an object by its handle is faster than using its name because the Object 
can also acquire handles to objects by inheriting handles at process creation time (if the creator speci-
CreateProcess call and the handle was marked as inheritable, either 
at the time it was created or afterward by using the Windows SetHandleInformation function) or by 
receiving a duplicated handle from another process. (See the Windows DuplicateHandle function.)
All user-mode processes must own a handle to an object before their threads can use the object. 
-
face to reference objects, regardless of their type. Second, the Object Manager has the exclusive right 
to create handles and to locate an object that a handle refers to. This means that the Object Manager 
caller allows the operation requested on the object in question.
144 
CHAPTER 8 System mechanisms
Note Executive components and device drivers can access objects directly because they 
are running in kernel mode and therefore have access to the object structures in system 
memory. However, they must declare their usage of the object by incrementing the refer-
-
tion “Object retention” later in this chapter for more details.) To successfully make use of 
object, and this is not provided for most objects. Instead, device drivers are encouraged to 
although device drivers can get a pointer to the Process object (EPROCESS), the structure is 
opaque, and the Ps*
(such as most executive objects that wrap a dispatcher object—for example, events or mu-
end up calling (such as ZwCreateEvent) and use handles instead of object pointers.
EXPERIMENT: Viewing open handles
handles. (Click on View, Lower Pane View, and then Handles.) Then open a command prompt 
Explorer shows the following:
Now pause Process Explorer by pressing the spacebar or selecting View, Update Speed 
and choosing Pause. Then change the current directory with the cd command and press F5 to 
refresh the display. You will see in Process Explorer that the handle to the previous current direc-
tory is closed, and a new handle is opened to the new current directory. The previous handle is 
highlighted in red, and the new handle is highlighted in green. 
EXPERIMENT: Viewing open handles
handles. (Click on View, Lower Pane View, and then Handles.) Then open a command prompt 
Explorer shows the following:
Now pause Process Explorer by pressing the spacebar or selecting View, Update Speed
and choosing Pause. Then change the current directory with the cd command and press F5 to 
refresh the display. You will see in Process Explorer that the handle to the previous current direc-
tory is closed, and a new handle is opened to the new current directory. The previous handle is 
highlighted in red, and the new handle is highlighted in green. 
CHAPTER 8 System mechanisms
145
can quickly show what handle or handles are being opened but not closed. (Typically, you see 
handle leak.
Resource Monitor also shows open handles to named handles for the processes you select by 
You can also display the open handle table by using the command-line Handle tool from 
object handles located in the handle table for a Cmd.exe process before and after changing 
–a switch is used, which 
displays all the handles in the process, similar to Process Explorer.
C:\Users\aione>\sysint\handle.exe -p 8768 -a users 
Nthandle v4.22 - Handle viewer 
Copyright (C) 1997-2019 Mark Russinovich 
Sysinternals - www.sysinternals.com 
cmd.exe
pid: 8768   type: File
150: C:\Users\Public 
can quickly show what handle or handles are being opened but not closed. (Typically, you see 
handle leak.
Resource Monitor also shows open handles to named handles for the processes you select by 
You can also display the open handle table by using the command-line Handle tool from 
object handles located in the handle table for a Cmd.exe process before and after changing 
–a switch is used, which 
displays all the handles in the process, similar to Process Explorer.
C:\Users\aione>\sysint\handle.exe -p 8768 -a users
Nthandle v4.22 - Handle viewer
Copyright (C) 1997-2019 Mark Russinovich
Sysinternals - www.sysinternals.com
cmd.exe
pid: 8768   type: File
150: C:\Users\Public 
146 
CHAPTER 8 System mechanisms
An object handlehandle table, pointed to by the executive process 
(EPROCESS) block (described in Chapter 3 of Part 1). The index is multiplied by 4 (shifted 2 bits) to make 
is 4, the second 8, and so on. Using handle 5, 6, or 7 simply redirects to the same object as handle 4, 
while 9, 10, and 11 would reference the same object as handle 8.
a handle to, and handle values are aggressively reused, such that the next new handle index will reuse 
a three-level scheme, similar to the way that the legacy x86 memory management unit implemented 
virtual-to-physical address translation but with a cap of 24 bits for compatibility reasons, resulting in a 
-
try layout on Windows. To save on kernel memory costs, only the lowest-level handle table is allocated 
on process creation—the other levels are created as needed. The subhandle table consists of as many 
-
tems, a page is 4096 bytes, divided by the size of a handle table entry (16 bytes), which is 256, minus 1, 
which is a total of 255 entries in the lowest-level handle table. The mid-level handle table contains a full 
page of pointers to subhandle tables, so the number of subhandle tables depends on the size of the 
page and the size of a pointer for the platform. Again using 64-bit systems as an example, this gives 
us 4096/8, or 512 entries. Due to the cap of 24 bits, only 32 entries are allowed in the top-level pointer 
Process
Handle
table
Top-level
pointers
Middle-level
pointers
Subhandle
table
FIGURE 8-33 Windows process handle table architecture.
CHAPTER 8 System mechanisms
147
EXPERIMENT: Creating the maximum number of handles
The test program Testlimit from Sysinternals has an option to open handles to an object until it 
cannot open any more handles. You can use this to see how many handles can be created in a 
single process on your system. Because handle tables are allocated from paged pool, you might 
run out of paged pool before you hit the maximum number of handles that can be created in a 
single process. To see how many handles you can create on your system, follow these steps:
1.
need from https://docs.microsoft.com/en-us/sysinternals/downloads/testlimit.
2.
Run Process Explorer, click View, and then click System Information. Then click the
Memory tab. Notice the current and maximum size of paged pool. (To display the
symbols for the kernel image, Ntoskrnl.exe.) Leave this system information display run-
ning so that you can see pool utilization when you run the Testlimit program.
3.
Open a command prompt.
4.
Run the Testlimit program with the –h switch (do this by typing testlimit –h). When
Testlimit fails to open a new handle, it displays the total number of handles it was able
to create. If the number is less than approximately 16 million, you are probably running
out of paged pool before hitting the theoretical per-process handle limit.
5.
Close the Command Prompt window; doing this kills the Testlimit process, thus closing
all the open handles.
objects are 8-byte aligned, and these bits can be assumed to be 0), and the granted access mask (out of 
which only 25 bits are needed, since generic rights are never stored in the handle entry) combined with 
reference usage count, which we describe shortly. 
Pointer to object header
Access mask
32 bits
Audit on close
Inheritable
Lock
A I
L
No Rights Upgrade
Protect from close
U P Usage Count
FIGURE 8-34 Structure of a 32-bit handle table entry.
EXPERIMENT: Creating the maximum number of handles
The test program Testlimit from Sysinternals has an option to open handles to an object until it 
cannot open any more handles. You can use this to see how many handles can be created in a 
single process on your system. Because handle tables are allocated from paged pool, you might 
run out of paged pool before you hit the maximum number of handles that can be created in a 
single process. To see how many handles you can create on your system, follow these steps:
1.
need from https://docs.microsoft.com/en-us/sysinternals/downloads/testlimit.
2.
Run Process Explorer, click View, and then click System Information. Then click the 
Memory tab. Notice the current and maximum size of paged pool. (To display the 
Memory tab. Notice the current and maximum size of paged pool. (To display the 
Memory
symbols for the kernel image, Ntoskrnl.exe.) Leave this system information display run-
ning so that you can see pool utilization when you run the Testlimit program.
3.
Open a command prompt.
4.
Run the Testlimit program with the –h switch (do this by typing testlimit –h). When 
Testlimit fails to open a new handle, it displays the total number of handles it was able 
to create. If the number is less than approximately 16 million, you are probably running 
out of paged pool before hitting the theoretical per-process handle limit.
5.
Close the Command Prompt window; doing this kills the Testlimit process, thus closing 
all the open handles.
148 
CHAPTER 8 System mechanisms
-
ple, 44 bits are now needed to encode the object pointer (assuming a processor with four-level paging 
and 48-bits of virtual memory), since objects are 16-byte aligned, and thus the bottom four bits can 
that the reference usage count is encoded in the remaining 16 bits next to the pointer, instead of next to 
-
ing 6 bits are spare, and there are still 32-bits of alignment that are also currently spare, for a total of 16 
must now be 53 bits, reducing the usage count bits to only 7.
should expect the bottom bit to normally be set
is, it indicates whether processes created by this process will get a copy of this handle in their handle 
SetHandleInformation
be set with the SetHandleInformation
access rights should be upgraded if the handle is duplicated to a process with higher privileges. 
OBJECT_HANDLE_INFORMATION structure 
that is passed in to APIs such as ObReferenceObjectByHandle, and map to OBJ_INHERIT (0x2), OBJ_
AUDIT_OBJECT_CLOSE (0x4), OBJ_PROTECT_CLOSE (0x1), and OBJ_NO_RIGHTS_UPGRADE (0x8), which 
reference usage count in both the encoding of the pointer 
cached number (based on the number of available bits) of preexisting references as part of each handle 
entry and then adds up the usage counts of all processes that have a handle to the object into the 
-
ences through ObReferenceObject, and the number of cached references for each handle.
-
ing any Windows API that takes a handle as input and ends up converting it into an object—the cached 
number of references is dropped, which is to say that the usage count decreases by 1, until it reaches 
0, at which point it is no longer tracked. This allows one to infer exactly the number of times a given 
The debugger command !trueref, when executed with the -v 
each handle referencing an object and exactly how many times it was used (if you count the number 
CHAPTER 8 System mechanisms
149
System components and device drivers often need to open handles to objects that user-mode 
with. This is done by creating handles in the kernel handle table (referenced internally with the name 
ObpKernelHandleTable), which is associated with the System process. The handles in this table are ac-
cessible only from kernel mode and in any process context. This means that a kernel-mode function 
can reference the handle in any process context with no performance impact. 