func selection324(arr []int,1，r,k int) int {
if 1 == r {
return arr[1]
p:= partition324(arr, 1, r)
if k == p {
---
## Page 430
return arr[p]
} else if k 0 && (1162261467%n == 0)
---
## Page 432
//解法二打表法
func isPowerofThreel(n int) bool {
// 1162261467 is 3∧19, 3^20 is bigger than int
allpowerofThreeMap := map[int]int{1: 1, 3: 3, 9: 9, 27: 27, 81: 81, 243:
243, 729: 729, 2187: 2187, 6561: 6561, 19683: 19683, 59049: 59049, 177147:
177147, 531441: 531441, 1594323: 1594323, 4782969: 4782969, 14348907:
14348907, 43046721: 43046721, 129140163: 129140163, 387420489: 387420489,
1162261467: 1162261467}
_, ok := allpowerofThreeMap[n]
return ok
//解法三循环
func isPowerofThree2(num int) boo1 {
for num >= 3 {
if num%3 == 0 {
num = num / 3
}else{
return false
return num == 1
327.CountofRangeSum
题目
Given an integer array nums , return the number of range sums that lie in [Tower, upper]
inclusive.Range sum s(i , j) is defined as the sum of the elements in nums between indices i
and j (i ≤ j), inclusive.
Note:A naive algorithm of O(n2) is trivial. You MUST do better than that.
Example:
Input: nums = [-2,5,-1], 1ower = -2, upper = 2,
Output:3
Explanation: The three ranges are : [o,0], [2,2], [o,2] and their respective
sums are: -2,-1, 2.
题目大意
给定一个整数数组nums，返回区间和在[lower，upper]之间的个数，包含lower和upper。区间和
S(i,j)表示在nums中，位置从i到j的元素之和，包含i和j(i≤j)。
---
## Page 433
说明：
最直观的算法复杂度是O（n^2)，请在此基础上优化你的算法。
解题思路
·给出一个数组，要求在这个数组中找出任意一段子区间的和，位于[lower,upper]之间。
·这一题可以用暴力解法，2层循环，遍历所有子区间，求和并判断是否位于[lower，upper]之间，
时间复杂度O（n^2）。
·这一题当然还有更优的解法，用线段树或者树状数组，将时间复杂度降为O（nlogn)。题目中要求
1ower ≤ sum(i,j) ≤ upper,sum(i,j) = prefixSum(j) - prefixSum(i-1)，那么
1ower+prefixSum(i-1）≤prefixsum(j）≤upper +prefixSum(i-1)。所以利用前缀和
将区间和转换成了前缀和在线段树中query的问题，只不过线段树中父节点中存的不是子节点的
和，而应该是子节点出现的次数。第二个转换，由于前缀和会很大，所以需要离散化。例如
prefixSum=[-3，-2，-1，0]，用前缀和下标进行离散化，所以线段树中左右区间变成了0-3。
prefixSum =[-3,-2,-1,0]
[-3,0]
[3,2]
[1,0]
[3,3][2,2][1,-1][0,0]
初始化
利用prefixSum下标离散化：
prefixSum =[-3,-2,-1,0]
[0,3]
[0,1]
[2,3]
[0,0]
[1,1]
[2,2]
[3,3]
离散化
Bhalfro
---
## Page 434
·还需要注意一些小细节，prefixSum计算完以后需要去重，去重以后并排序，方便构造线段树的
有效区间。如果不去重，线段树中可能出现非法区间（left>right或者重叠区间。最后一步往线段
树中倒序插入prefixSum的时候，用的是非去重的，插入prefixSum[j]代表sum(i,j)中的]，
例如往线段树中插入prefixSum[5]，代表当前树中加入了j=5的情况。query操作实质是在做
区间匹配，例如当前i循环到1=3，累计往线段树中插入了
prefixSum[5]，prefixSum[4]，prefixSum[3]]，那么query 操作实质是在判断：1ower ≤
sum(i=3,j=3) ≤ upper, 1ower ≤ sum(i=3,j=4) ≤ upper, 1ower ≤ sum(i=3,j=5) ≤
upper，这3个等式是否成立，有几个成立就返回几个，即是最终要求得的结果的一部分。
举个例子，nums=[-3，1,2,-2，2,-1]，prefixSum=[-3，-2，0，-2，0,-1]，去重以后并排
序得到sum=[-3，-2，-1，0]。离散化构造线段树，这里出于演示的方便，下图中就不画出离散
后的线段树了，用非离散的线段树展示：
sum =[-3,-2,-1,0]
prefixSum=[-3,-2,0,-2,0,-1]
[-3,0]
[3,2]
[1,0]
[-3,-3][-2,-2][-1,-1][0,0]
倒序插入1en（prefixSum）-1=prefixSum[5]=-1：
sum =[-3,-2,-1,0]
prefxSum =[-3,-2,0,-2,0,-1]
[-3,0]
[3,2]
[1,0]
[-3,-3][-2,-2][-1,-1][0,0]
Chalfrost
这时候查找区间变为了[-3+prefixSum[5-1]，-1+prefixSum[5-1]]=[-3,-1]，即判
断-3≤sum（5，5）≤-1，满足等式的有几种情况，这里明显只有一种情况，即j=5，也满
足等式，所以这一步res=1。
●倒序插入1en（prefixSum)-2=prefixSum[4]=0：
---
## Page 435
sum =[-3,-2,-1,0]
prefixSum=[-3,-2,0,-2,0,-1]
[3,0]
[3,2]
[1,0]
[3,3] [2,-2] [1,-1] [0,0]
这时候查找区间变为了[-3+prefixSum[4-1]，-1+prefixSum[4-1]]=[-5，-3]，即判
断-5≤sum（4，4，5）≤-3，满足等式的有几种情况，这里有两种情况，即j=4或者j=
5，都不满足等式，所以这一步res=0。
●倒序插入1en（prefixSum)-3=prefixSum[3]=-2：
sum = [-3,-2,-1,0]
prefxSum =[-3,-2,0,-2,0,-1]
[3,0]
[3,2]
[1,0]
[3,3][2,-2][1,-1][0,0]
ehalfrost
这时候查找区间变为了[-3+prefixSum[3-1]，-1+prefixSum[3-1]]=[-3，-1]，即判
断-3≤sum（3，3，4，5）≤-1，满足等式的有几种情况，这里有三种情况，即j=3、j=
4或者j=5，满足等式的有j=3和j=5，即-3≤sum（3，3）≤-1和-3≤sum（3，
5）≤-1。所以这一步res=2。
●倒序插入1en（prefixSum)-4=prefixSum[2]=0:
---
## Page 436
sum =[-3,-2,-1,0]
prefixSum=[-3,-2,0,-2,0,-1]
[3,0]
[3,2]
[1,0]
[3,3] [2,-2] [-1,-1] [0,0]
这时候查找区间变为了[-3+prefixSum[2-1]，-1+prefixSum[2-1]]=[-5，-3]，即判
断-5≤sum（2，2,3，4,5）≤-3，满足等式的有几种情况，这里有四种情况，即j=2、j
=3、j=4或者j=5，都不满足等式。所以这一步res=0。
●倒序插入1en（prefixSum)-5=prefixSum[1]=-2：
sum = [-3,-2,-1,0]
prefixSum =[-3,-2,0,-2,0,-1]
[3,0]
[3,2]
[1,0]
[3,-3] [2,-2] [-1,-1] [0,0]
ehalfrost
这时候查找区间变为了[-3+prefixSum[1-1]，-1+prefixSum[1-1]]=[-6,-4]，即判
断-6≤sum（1，1,2，3，4，5）≤-4，满足等式的有几种情况，这里有五种情况，即j=1、
j=2、j=3、j=4或者j=5，都不满足等式。所以这一步res=0。
●倒序插入1en（prefixSum）-6=prefixSum[0]=-3:
---
## Page 437
sum =[-3,-2,-1,0]
prefixSum=[-3,-2,0,-2,0,-1]
[3,0]
[3,2]
[1,0]
[3,3] [2,2] [1,-1] [0,0]
Shalfros
这时候查找区间变为了[-3+prefixSum[0-1]，-1+prefixSum[0-1]]=[-3，-1]，注意
prefixSum[-1]=0，即判断-3≤sum（0，0,1，2,3,4，5）≤-1，满足等式的有几种情
况，这里有六种情况，即j=0、j=1、j=2、j=3、j=4或者j=5，满足等式
的有j=0、j=1、j=3和j=5，即-3≤sum（0，0）≤-1、-3≤sum（0，1）≤
-1、-3≤sum（0，3）≤-1和-3≤sum（0，5）≤-1。所以这一步res=4。最后的答案
就是把每一步的结果都累加，res=1+0+2+0+0+4=7。
代码
package leetcode
import (
"sort"
"github.com/halfrost/LeetCode-Go/template"
//解法一线段树，时间复杂度o（n1ogn）
func countRangeSum(nums []int, lower int, upper int) int {
if 1en(nums)== 0 {
return 0
st, prefixSum, sumMap, sumArray, res := template.SegmentCountTree{},
make([]int,len(nums)),make(map[int]int, 0)，[]int{}，0
prefixSum[0],sumMap[nums [O]] = nums[0], nums [0]
for i := l; i =i，所以倒序遍历，i从大到小
for i :=len(nums) - 1; i >= 0; i--{
//插入的prefixSum[i]即是j
st. UpdateCount (prefixSum[i])
if i > 0 {
res += st.Query(lower+prefixSum[i-1], upper+prefixSum[i-1])
}else{
res += st.Query(lower, upper)
return res
//解法二暴力，时间复杂度o（n^2）
func countRangeSuml(nums []int, lower int,upper int) int {
res, n := 0, 1en(nums)
for i := 0; i = 1ower {
res++
1
return res
328.OddEvenLinkedList
题目
Given a singly linked list, group all odd nodes together followed by the even nodies. Please note
here we are talking about the node number and not the value in the nodles.
---
## Page 439
You should try to do it in place. The program should run in O(1) space complexity and O(nodes)
time complexity.
Example 1:
Input: 1->2->3>4>5>NULL
0utput: 1->3->5->2->4>NULL
Example 2:
Input: 2>1>3>5>6>4>7>NULL
Output : 2>3>6>7->1>5=>4>NULL
Note:
● The relative order inside both the even and odd groups should remain as it was in the input.
● The first node is considered odd, the second node even and so on ..
题目大意
这道题和第86题非常类型。第86题是把排在某个点前面的小值放在一个链表中，排在某个点后端的大
值放在另外一个链表中，最后2个链表首尾拼接一下就是答案。
解题思路
这道题思路也是一样的，分别把奇数和偶数都放在2个链表中，最后首尾拼接就是答案。
代码
package leetcode
* Definition for singly-linked list.
* type ListNode struct {
val int
Next *ListNode
*/
func oddEvenList(head *ListNode) *ListNode {
oddHead := &ListNode{Val: 0, Next: ni1}
peaHppo =: ppo
evenHead := &ListNode{val: 0, Next: ni1}
even := evenHead
---
## Page 440
count := 1
for head != nil {
if count%2 ==1{
odd.Next = head
odd = odd.Next
}else{
even.Next = head
even = even.Next
head = head.Next
count++
even.Next = ni1
odd.Next = evenHead.Next
return oddHead.Next
329.LongestIncreasingPathinaMatrix
题目
Given an integer matrix, find the length of the longest increasing path.
From each cell, you can either move to four directions: left, right, up or down. You may NOT move
dliagonally or move outside of the boundary (i.e. wrap-around is not allowed).
Example 1:
Input: nums =
[9,9,4] ,
[6,6,8],
[2,1,1]
Output: 4
Explanation: The longest increasing path is [1, 2, 6, 9].
Example 2:
---
## Page 441
Input: nums =
[3,4,5],
[3,2,6],
[2,2,1]
Output: 4
Explanation: The longest increasing path is [3, 4, 5, 6]. Moving diagonally is
not allowed.
题目大意
给定一个整数矩阵，找出最长递增路径的长度。对于每个单元格，你可以往上，下，左，右四个方向移
动。你不能在对角线方向上移动或移动到边界外（即不允许环绕）。
解题思路
·给出一个矩阵，要求在这个矩阵中找到一个最长递增的路径。路径有上下左右4个方向。
·这一题解题思路很明显，用DFS即可。在提交完第一版以后会发现TLE，因为题目给出了一个非
常大的矩阵，搜索次数太多。所以需要用到记忆化，把曾经搜索过的最大长度缓存起来，增加了记