以下是优化后的文本，使其更加清晰、连贯和专业：

---

### 参考文献

[32] H. Han and S. K. Cha. IMF: Inferred Model-Based Fuzzer. *Proceedings of the 24th ACM Conference on Computer and Communications Security (CCS)*, Dallas, TX, Oct.–Nov. 2017.

[33] S. Heelan, T. Melham, and D. Kroening. Automatic Heap Layout Manipulation for Exploitation. *Proceedings of the 27th USENIX Security Symposium (Security)*, Baltimore, MD, Aug. 2018.

[34] S. Heelan, T. Melham, and D. Kroening. Gollum: Modular and Greybox Exploit Generation for Heap Overflows in Interpreters. *Proceedings of the 26th ACM Conference on Computer and Communications Security (CCS)*, London, UK, Nov. 2019.

[35] C. Holler, K. Herzig, and A. Zeller. Fuzzing with Code Fragments. *Proceedings of the 21st USENIX Security Symposium (Security)*, Bellevue, WA, Aug. 2012.

[36] huku. Yet Another Free() Exploitation Technique. *Phrack* 66(6), 2009. [在线访问](http://phrack.org/issues/66/6.html)

[37] K. Istvan. Ptmalloc Fanzine. 2016. [在线访问](http://tukan.farm/2016/07/26/ptmalloc-fanzine/)

[38] jp. Advanced Doug Lea’s Malloc Exploits. *Phrack* 61(6), 2003. [在线访问](http://phrack.org/issues/61/6.html)

[39] S. Y. Kim, S. Lee, I. Yun, W. Xu, B. Lee, Y. Yun, and T. Kim. CAB-Fuzz: Practical Concolic Testing Techniques for COTS Operating Systems. *Proceedings of the 2017 USENIX Annual Technical Conference (ATC)*, Santa Clara, CA, July 2017.

[40] G. Klees, A. Ruef, B. Cooper, S. Wei, and M. Hicks. Evaluating Fuzz Testing. *Proceedings of the 25th ACM Conference on Computer and Communications Security (CCS)*, Toronto, ON, Canada, Oct. 2018.

[41] D. Lea and W. Gloger. A Memory Allocator, 1996.

[42] B. Lee, C. Song, Y. Jang, T. Wang, T. Kim, L. Lu, and W. Lee. Preventing Use-After-Free with Dangling Pointers Nullification. *Proceedings of the 2015 Annual Network and Distributed System Security Symposium (NDSS)*, San Diego, CA, Feb. 2015.

[43] D. Leijen. mimalloc. 2019. [在线访问](https://github.com/microsoft/mimalloc)

[44] Y. Li, B. Chen, M. Chandramohan, S.-W. Lin, Y. Liu, and A. Tiu. Steelix: Program-State Based Binary Fuzzing. *Proceedings of the 11th Joint Meeting of the European Software Engineering Conference (ESEC) and the ACM SIGSOFT Symposium on the Foundations of Software Engineering (FSE)*, Dallas, TX, Oct.–Nov. 2017.

[65] S. Silvestro, H. Liu, T. Liu, Z. Lin, and T. Liu. Guarder: A Tunable Secure Allocator. *Proceedings of the 27th USENIX Security Symposium (Security)*, Baltimore, MD, Aug. 2018.

[66] st4g3r. House of Einherjar - Yet Another Heap Exploitation Technique on GLIBC. 2016. [在线访问](https://github.com/st4g3r/House-of-Einherjar-CB2016)

[67] Trail of Bits. How We Fared in the Cyber Grand Challenge. 2015. [在线访问](https://blog.trailofbits.com/2015/07/15/how-we-fared-in-the-cyber-grand-challenge/)

[68] J. Wang, B. Chen, L. Wei, and Y. Liu. Skyfire: Data-Driven Seed Generation for Fuzzing. *Proceedings of the 38th IEEE Symposium on Security and Privacy (Oakland)*, San Jose, CA, May 2017.

[69] S. Wang and D. Wu. In-Memory Fuzzing for Binary Code Similarity Analysis. *Proceedings of the 32nd IEEE/ACM International Conference on Automated Software Engineering (ASE)*, Urbana-Champaign, IL, Oct.–Nov. 2017.

[70] Y. Wang, C. Zhang, X. Xiang, Z. Zhao, W. Li, X. Gong, B. Liu, K. Chen, and W. Zou. Revery: From Proof-of-Concept to Exploitable. *Proceedings of the 25th ACM Conference on Computer and Communications Security (CCS)*, Toronto, ON, Canada, Oct. 2018.

[71] D. Weston and M. Miller. Windows 10 Mitigation Improvements. *Black Hat USA Briefings (Black Hat USA)*, Las Vegas, NV, Aug. 2016.

[72] T. Xie, Y. Zhang, J. Li, H. Liu, and D. Gu. New Exploit Methods Against Ptmalloc of Glibc. *Trustcom/BigDataSE/ISPA, 2016 IEEE*, pages 646–653. IEEE, 2016.

[73] X. Yang, Y. Chen, E. Eide, and J. Regehr. Finding and Understanding Bugs in C Compilers. *Proceedings of the 2011 ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI)*, San Jose, CA, June 2011.

[74] W. You, P. Zong, K. Chen, X. Wang, X. Liao, P. Bian, and B. Liang. SemFuzz: Semantics-Based Automatic Generation of Proof-of-Concept Exploits. *Proceedings of the 24th ACM Conference on Computer and Communications Security (CCS)*, Dallas, TX, Oct.–Nov. 2017.

[75] M. Zalewski. American Fuzzy Lop. 2014. [在线访问](http://lcamtuf.coredump.cx/afl/)

[76] A. Zeller. Yesterday, My Program Worked. Today, It Does Not. Why? *Proceedings of the 7th European Software Engineering Conference (ESEC) / 7th ACM SIGSOFT Symposium on the Foundations of Software Engineering (FSE)*, Toulouse, France, Sept. 1999.

[77] H. Zhao, Y. Zhang, K. Yang, and T. Kim. Breaking Turtles All the Way Down: An Exploitation Chain to Break Out of VMware ESXi. *Proceedings of the 13th USENIX Workshop on Offensive Technologies (WOOT)*, Santa Clara, CA, USA, Aug. 2019.

[45] LLVM Project. Scudo Hardened Allocator. 2019. [在线访问](https://llvm.org/docs/ScudoHardenedAllocator.html)

[46] K. Lu, M.-T. Walter, D. Pfaff, S. Nürnberger, W. Lee, and M. Backes. Unleashing Use-Before-Initialization Vulnerabilities in the Linux Kernel Using Targeted Stack Spraying. *Proceedings of the 2017 Annual Network and Distributed System Security Symposium (NDSS)*, San Diego, CA, Feb.–Mar. 2017.

[47] Meh. Exim Off-by-One RCE: Exploiting CVE-2018-6789 with Fully Mitigations Bypassing. 2019. [在线访问](https://devco.re/blog/2018/03/06/exim-off-by-one-RCE-exploiting-CVE-2018-6789-en/)

[48] M. Miller. A Snapshot of Vulnerability Root Cause Trends for Microsoft Remote Code Execution (RCE) CVEs, 2006 through 2017. 2018. [在线访问](https://twitter.com/epakskape/status/984481101937651713)

[49] G. Novark and E. D. Berger. DieHarder: Securing the Heap. *Proceedings of the 17th ACM Conference on Computer and Communications Security (CCS)*, Chicago, IL, Oct. 2010.

[50] Offensive Security. Exploit Database - Exploits for Penetration Testers, Researchers, and Ethical Hackers. 2009. [在线访问](https://www.exploit-db.com/)

[51] K. Pei, Y. Cao, J. Yang, and S. Jana. DeepXplore: Automated Whitebox Testing of Deep Learning Systems. *Proceedings of the 26th ACM Symposium on Operating Systems Principles (SOSP)*, Shanghai, China, Oct. 2017.

[52] H. Peng, Y. Shoshitaishvili, and M. Payer. T-Fuzz: Fuzzing by Program Transformation. *Proceedings of the 39th IEEE Symposium on Security and Privacy (Oakland)*, San Francisco, CA, May 2018.

[53] T. Petsios, A. Tang, S. Stolfo, A. D. Keromytis, and S. Jana. Nezha: Efficient Domain-Independent Differential Testing. *Proceedings of the 38th IEEE Symposium on Security and Privacy (Oakland)*, San Jose, CA, May 2017.

[54] T. Petsios, J. Zhao, A. D. Keromytis, and S. Jana. SlowFuzz: Automated Domain-Independent Detection of Algorithmic Complexity Vulnerabilities. *Proceedings of the 24th ACM Conference on Computer and Communications Security (CCS)*, Dallas, TX, Oct.–Nov. 2017.

[55] P. Phantasmagoria. Exploiting the Wilderness. *Vuln-Dev Mailing List*, 2004. [在线访问](http://seclists.org/vuln-dev/2004/Feb/25)

[56] B. Powers, D. Tench, E. D. Berger, and A. McGregor. Mesh: Compacting Memory Management for C/C++ Applications. *Proceedings of the 2019 ACM SIGPLAN Conference on Programming Language Design and Implementation (PLDI)*, Phoenix, AZ, June 2019.

[57] S. Rawat, V. Jain, A. Kumar, L. Cojocar, C. Giuffrida, and H. Bos. VUZZER: Application-Aware Evolutionary Fuzzing. *Proceedings of the 2017 Annual Network and Distributed System Security Symposium (NDSS)*, San Diego, CA, Feb.–Mar. 2017.

[58] D. Repel, J. Kinder, and L. Cavallaro. Modular Synthesis of Heap Exploits. *Proceedings of the ACM SIGSAC Workshop on Programming Languages and Analysis for Security*, Dallas, TX, Oct. 2017.

[59] Rich Felker. musl libc. 2011. [在线访问](https://www.musl-libc.org/)

[60] E. J. Schwartz, T. Avgerinos, and D. Brumley. Q: Exploit Hardening Made Easy. *Proceedings of the 20th USENIX Security Symposium (Security)*, San Francisco, CA, Aug. 2011.

[61] shellphish. how2heap: A Repository for Learning Various Heap Exploitation Techniques. 2016. [在线访问](https://github.com/shellphish/how2heap)

[62] Shellphish. DARPA CGC – Shellphish. 2016. [在线访问](http://shellphish.net/cgc/)

[63] Y. Shoshitaishvili, R. Wang, C. Salls, N. Stephens, M. Polino, A. Dutcher, J. Grosen, S. Feng, C. Hauser, C. Kruegel, and G. Vigna. SoK: (State of) The Art of War: Offensive Techniques in Binary Analysis. *IEEE Symposium on Security and Privacy*, 2016.

[64] S. Silvestro, H. Liu, C. Crosser, Z. Lin, and T. Liu. FreeGuard: A Faster Secure Heap Allocator. *Proceedings of the 24th ACM Conference on Computer and Communications Security (CCS)*, Dallas, TX, Oct.–Nov. 2017.

---

### 附录 A

#### A.1 自定义分配器的安全性

为了进一步评估ARCHEAP的通用性，我们将其应用于DARPA CGC竞赛中实现的所有自定义堆分配器。由于许多挑战共享相同的实现，我们选择了九个独特的分配器进行评估（见表13）。我们实现了一个缺失的API（即`malloc_usable_size()`）来获取已分配对象的大小，并对每个堆分配器运行了24小时的实验。与之前的实验一样，没有提供特定的模型。

ARCHEAP找到了所有测试分配器的利用原语，除了NRFIN_00007，它实现了页面堆。这种分配器在元数据破坏方面看起来是安全的，但由于其内存开销导致内部碎片化而不实用。在这次评估中，我们发现了两个有趣的结果。首先，ARCHEAP为NRFIN_00032找到了利用技术，该分配器有一个堆cookie来防止溢出。尽管基于cookie的保护不能通过堆元数据破坏绕过，但ARCHEAP发现其实现易受整数溢出攻击，并且可以构造两个重叠的块而不会破坏堆cookie。其次，ARCHEAP发现了CROMU_00004中的分配器实现错误，它返回一个已释放或其大小大于请求的块。ARCHEAP成功地构造了一个PoC代码，通过分配比前一个分配更小的块来产生重叠的块。这个实验表明，我们的常见堆设计确实是通用的，即使对于现代和自定义堆分配器也是如此（§2.1）。

#### A.2 HeapHopper中的搜索启发式

我们还评估了HeapHopper支持的所有搜索启发式方法[63]，这些方法可以在没有特定利用信息的情况下应用；例如，我们排除了需要二进制文件中的地址来合并状态的ManualMergepoint策略。结果，我们收集了五种搜索启发式方法：DFS（HeapHopper的默认模式）；Concretizer，它积极地将符号值具体化以减少路径数量；Unique，根据状态的独特性选择状态以获得更好的覆盖率；Stochastic，随机选择下一个要探索的状态；以及Veritesting[5]，通过结合静态和动态符号执行来合并状态以抑制路径爆炸。

不幸的是，如表14所示，这些方法在我们的评估中都没有帮助；默认模式（DFS）显示了最佳性能。首先，这些启发式方法只能帮助缓解，但不能解决HeapHopper的基本问题：路径爆炸和事务组合的指数增长。更重要的是，它们不能像DFS那样利用HeapHopper的具体模型来缓解上述问题。这解释了DFS的最佳性能和Stochastic的最差性能。Veritesting由于其对合并状态中的未定义行为（如NULL引用）处理不当而失败，这些未定义行为在假设内存损坏的任务中很常见。

| 技术 | UBS | HUE | UDF | DFS (默认) | Concretizer | Stochastic | Unique | Veritesting |
|------|-----|-----|-----|-------------|-------------|------------|--------|-------------|
| PN   | ∞   | ∞   | ∞   | 31.4s       | 1.96m       | ∞          | ∞      | 2.02m       |
| HS   | ∞   | ∞   | ∞   | 3.8m        | 2.90h       | ∞          | 2.91h  | ∞           |
| HL   | ∞   | ∞   | ∞   | ∞           | ∞           | ∞          | ∞      | ∞           |
| OC   | ∞   | ∞   | ∞   | ∞           | ∞           | ∞          | ∞      | ∞           |
| OCS  | ∞   | ∞   | ∞   | ∞           | ∞           | ∞          | ∞      | ∞           |
| FD   | 21.8s | 5.25m | ∞   | 51.91s      | ∞           | ∞          | ∞      | ∞           |
| UU   | ∞   | ∞   | ∞   | ∞           | ∞           | ∞          | ∞      | ∞           |
| UB   | ∞   | ∞   | ∞   | ∞           | ∞           | ∞          | ∞      | ∞           |
| HE   | ∞   | ∞   | ∞   | ∞           | ∞           | ∞          | ∞      | ∞           |

表14：使用HeapHopper支持的各种搜索启发式方法的§8.1结果

---

### 新技术
旧技术（Bug + 影响 + 块）

| 技术 | UBS | HUE | UDF | DFS (默认) | Concretizer | Stochastic | Unique | Veritesting |
|------|-----|-----|-----|-------------|-------------|------------|--------|-------------|
| PN   | ∞   | ∞   | ∞   | 31.4s       | 1.96m       | ∞          | ∞      | 2.02m       |
| HS   | ∞   | ∞   | ∞   | 3.8m        | 2.90h       | ∞          | 2.91h  | ∞           |
| HL   | ∞   | ∞   | ∞   | ∞           | ∞           | ∞          | ∞      | ∞           |
| OC   | ∞   | ∞   | ∞   | ∞           | ∞           | ∞          | ∞      | ∞           |
| OCS  | ∞   | ∞   | ∞   | ∞           | ∞           | ∞          | ∞      | ∞           |
| FD   | 21.8s | 5.25m | ∞   | 51.91s      | ∞           | ∞          | ∞      | ∞           |
| UU   | ∞   | ∞   | ∞   | ∞           | ∞           | ∞          | ∞      | ∞           |
| UB   | ∞   | ∞   | ∞   | ∞           | ∞           | ∞          | ∞      | ∞           |
| HE   | ∞   | ∞   | ∞   | ∞           | ∞           | ∞          | ∞      | ∞           |

表14：使用HeapHopper支持的各种搜索启发式方法的§8.1结果

---

### 示例代码

```c
// [前置条件]
//
// // [BUG] 缓冲区溢出
// // [后置条件]
//
malloc(sz) == dst
```

---

希望这些修改能帮助您更好地表达您的内容。如果有任何进一步的需求，请告诉我！