# JOP ROCKET: A Comprehensive Guide

## Gadgets and NOPs
- **Functionally Equivalent NOPs**: These are used to maintain the flow of execution without altering the program's state.
- **Bookkeeping Data Only**: No disassembly is stored; only essential data for tracking is kept.
- **Flexibility in Generation**: Offers a wide range of options for generating JOP gadgets, with customization to tailor the search.
- **Expanding or Narrowing Results**: You can adjust the scope of the results to be more or less inclusive.
- **Data Organization**: The data is not organized or classified, and there is no opcode splitting, which limits the number of JOP gadgets.
- **Time-Consuming Process**: Finding all possible results for different operations can be tedious and time-consuming.
- **Default Operations**: Provides a reasonable default set of operations, and the results can be printed to a CSV file for easier analysis.

## JOP ROCKET - How to Use It

### Overview
- **Static Analysis Tool**: Run from the command line, optimized for Cygwin but compatible with any platform supporting Linux dependencies.
- **Command Line Usage**:
  ```bash
  python prog.py paint.exe
  ```

### Features
- **Output for Offsets**: Useful for ASLR bypasses.
- **Options**:
  - `f`: Change the PE file being analyzed.
  - `r`: Specify target 32-bit registers (e.g., EAX, EBX, ECX).
  - `t`: Set control flow (e.g., JMP, CALL, ALL).
  - `p`: Print options (ALL, by REG, by operation).
  - `d`: Get dispatcher gadgets (by REG or ALL).
  - `D`: Set depth level for dispatcher gadgets.
  - `m`: Extract modules for specified registers.
  - `n`: Change the number of opcodes to disassemble.
  - `l`: Change lines to go back when searching for dispatcher gadgets.
  - `s`: Set scope (executable only or executable and all modules).
  - `g`: Get gadgets ending in specified registers.
  - `G`: Get dispatcher gadgets ending in specified registers.
  - `c`: Clear everything.
  - `k`: Clear selected DLLs.
  - `x`: Exit.

### Download
- **GitHub Repository**:
  ```
  https://github.com/Bw3ll/JOP_ROCKET
  ```

### Usage Workflow
1. **Establish Registers of Interest**:
   - Example: EAX, EBX, All.
2. **Set Scope**:
   - Choose between JMP, CALL, or both.
   - Example: CALL EAX, JMP EAX.
3. **Modules/DLLs**:
   - If using modules or DLLs, extract them.
4. **Run Search**:
   - Type `g` to start the search and classification of JOP gadgets.
5. **Print Results**:
   - Results are printed to the terminal and a file, with numerous areas of classification based on selected registers.
   - Example: Seeking an operation that performs addition on EDX.
6. **Select Desired Operations**:
   - Options include ALL, POP, PUSH, etc.
   - Can print out total numbers of gadgets as a CSV to determine if there are enough for your needs.

### Dispatcher Gadgets
- **Select Registers**:
  - First, select the registers to be searched for.
  - Next, select the registers used for dispatcher gadgets.
- **Printing Sub-Menu**:
  - Use the appropriate option to get dispatcher gadgets.
- **Scarcity**:
  - Dispatcher gadgets are rare, so you may need to increase the depth if not enough are found.
- **Stack Adjustments**:
  - If using the stack for Windows API calls, frequent adjustments may be necessary.
  - Consider using other memory areas under control for parameter setup and stack pivoting.

### Exploit Demonstration
- **Control Points**:
  - Overflow in a string resulting in control over EIP.
  - File supplied and written to memory.
- **Execution Flow**:
  - Initial overflow.
  - JOP setup gadget.
  - JOP chains in a malicious .wav file.
  - NOP sled + shellcode.

### JOP Mechanics
- **Dispatcher Address**:
  - Register: EDX.
- **Dispatch Table Address**:
  - Register: EDI.
- **Dispatcher Gadget Instructions**:
  - ADD EDI,0xC; JMP DWORD PTR [EDI].
- **ESP Location**:
  - 628 bytes after the beginning of the .wav file in memory (0x00436628).

### Dispatch Table
- **Address and Values**:
  - 0x00436038: ED 17 40 00
  - 0x0043603C: 41 41 41 41
  - 0x00436040: 41 41 41 41
  - 0x00436044: E6 15 40 00
  - 0x00436048: 41 41 41 41
  - 0x0043604C: 41 41 41 41
  - 0x00436050: E6 15 40 00
  - 0x00436054: 41 41 41 41
  - 0x00436058: 41 41 41 41
  - 0x0043605C: 61 15 40 00

### Functional Gadgets
- **Example Addresses and Instructions**:
  - 0x00401561: MOV ECX,0x0552A200; ... ; JMP EDX
  - 0x004015E6: ADD ESP, 0x894; ... ; JMP EDX
  - 0x004016ED: MOV ESP,0x00435500; ... ; JMP EDX

### Setting Up the Exploit
- **Initial Overflow**:
  - Directs execution to the setup gadget.
  - Puts the dispatcher address into EDX and the table address into EDI.
- **CALL EDX**:
  - Directs flow to the dispatcher, adhering to the dispatch table.

### Calling Functions with JOP
- **VirtualProtect()**:
  - Used to create RWX memory for shellcode.
  - Violates DEP principles.
- **WriteProcessMemory()**:
  - Used to copy shellcode from the malicious file to the RWX memory created by VirtualProtect().

### Supplying Values for Functions
- **ESP Adjustments**:
  - Minor adjustments needed to PUSH and POP at the right locations.
- **Reused Gadgets**:
  - SUB ESP,0x8 # JMP EDX
  - PUSH EAX # PUSH ECX # ... # JMP EDX
  - MOV ECX,0x0552A200 # ... # JMP EDX
  - ... # POP EAX # ... # JMP EDX
  - ... # XOR ECX, EAX # ... # JMP EDX

### Nuances
- **Dereferencing VirtualProtect() Pointer**:
  - Pointer always at 0x00427008.
  - Dereference to get the real VirtualProtect() address.
- **Fixing EDX After VirtualProtect() Call**:
  - Use a gadget to POP the dispatcher address back into EDX.
- **Using CALL Gadgets**:
  - Account for the return address pushed by the CALL instruction.
- **Getting WriteProcessMemory() Address**:
  - Manually analyze the DLL to find an offset to add to the VirtualProtect() address.
- **JMP to Different Registers**:
  - If a specific gadget uses the wrong register, place the dispatcher address in that register.

### Final Steps
1. **Take a ROCKET ride**.
2. **JOP it**.
3. **Profit**.
4. **Joy?**

Thank you!