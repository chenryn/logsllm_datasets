另一个进程未授权访问。因此，必须对内存进行分段，以确保进程的本地内存不会相互干扰且
确保公共内存区域不受未授权访问。这个扩展超越了运行在主计算机内存中的应用：操作系统
可以使用辅助内存(存储设备)，给出一个较大的主内存池的假象，或者它可以将主内存在用户
间分区，这样每个用户都看到一个内存比真实机器上的内存小的虚拟机。这种情况下可能需要
一些额外的控制。
⑦内存保护方法（考点）
有四种方法来提供内存保护，这样没有用户进程可以无意地或故意地破坏另外一个进程的
地址空间或操作系统本身。
*第一种方法，确保由内核模式系统组件使用的所有系统范围内的数据结构和内存池，只
能在内核模式下访问。因此，用户模式的请求不能访问这些内存页。如果他们试图这样做，硬
件将产生一个错误，随后内存管理器将产生一个访问冲突。在早期的 Windows 操作系统中，例
如 Windows 95 和 Windows, 98，系统地址空间中的某些页可以由用户模式写入，从而使一个
错误的应用程序破坏关键的系统数据结果并导致系统崩溃。一个硬件抽象层(HAL)的实现以及
改进的内存管理技术己经消除了此问题，其结果是，由于这个原因，更近的基于 Windows 的操
作系统不会遇到这种相同类型的行为，例如桌面系统中的 Windows 7 和 8 以及服务器方面的
Windows Senver2008 和 2012。（确保所有的全系统的数据结构和存储器所使用的内核模式系
—255—
统组件池可以访问公在内核模式。）
*在第二个方法中，每个进程有一个单独，私有的地址空间被保护不受属于其它进程的请
求的访问，也有极少数例外。每次当一个请求引用一个地址时，虚拟内存硬件，与内存管理器
一起，干预和转换这个虚拟地址到物理地址。这种控制机制被称为地址空间布局随机化(ASLR)。
ASLR 在很多操作系统平台实现，并允许内存管理器有效的改变，或随机的，进程使用的内存
地址空间地址，其在一个连续的基础上执行。因为像 Windows 7, Windows 8/8.1，和 OpenBSD
这样的操作系统，控制虚拟地址如何转换，一个进程中运行的请求不会不恰当地访问一个属于
另外一个进程的页面。（第个过程有一个单独的，专用地址空间从属于另一个任何请示被访问
受保护过程中，有少数例外。）
*在第三种方法中，大多数现代处理器提供某些形式的硬件或软件控制的内存保护，例如
读或写访问。虽然这种保护机制的实现根据制造商所有不同，它通常被称为数据执行保护
(DEP)。提供的保护的类型取决于处理器。例如，一个内存保护选项是 PAGE_NOACCESS。在这
个区域，一个读取，写入，或执行代码的试图，就会发生访问冲突。DEP 有使某些系统内存区
域对进程的执行不可用的能力，通过标记它们为不可用来实现。这有双重好处，减少由内存管
理器管理的可用内存区域，同时减少可以提供给一个进程在其内执行的可用内存区域。这允许
操作系统进一步优化性能，加快交易速度，以及减少攻击者为了执行攻击可以获取访问的可用
内存空间。（大多数现代处理器提供某种形式的硬件或软件控制的存储器保护功能，如读或写
访问。）
*第四种保护机制使用访问控制列表来保护共享内存对象，当进程试图打开它们的时候，
强制它们接受安全检查。另外一种安全功能涉及映射文件的访问。为了映射一个文件，执行请
求的客体(或用户)必须至少有对底层文件对象的读取访问权限，否则操作将失败。（使用访问
列表来保护共享内存对象，迫使他们接受安全检查时，流程试图打开它们。）
⑧隐蔽信道控制（必考）
隐蔽信道或约束问题是一个没有被安全措施控制的信息流。它是一个通信渠道，允许两个
合作的进程，以一种违反系统安全策略的方式，传递信息。即使存在保护机制，如果未授权信
息用信号机制或其它对象进行传递，那么一个隐蔽信道就可能存在。在应用安全中使用的标准
例子是这样一个情景，一个进程可以被一个程序启动或停止，这个进程的存在可以被另一个应
用检测到。这样，这个进程的存在可以用于，随着时间的推移，发出信号信息。唯一要关注的
信道是违反安全策略的那些；并不必关注那些与合法通信路径并行的信道。虽然每一类隐蔽信
道都有区别，但有一个共同的条件：通过通道发送和接收的对象必须能访问共享资源：
*第一步是识别任何潜在的隐蔽信道；
*第二步是分析这些信道以确定一个信道是否真实地存在；
*接下来的步骤是基于人工检查和适当的测试技术，以验证信道是否创建了安全关注。
⑨编程语言支持
提供程序安全执行的另一个方法是使用一个更安全的编程语言(也被称为强类型)，比如
Java。类型安全的语言或安全语言是一个程序，它永远不会在某些方面出错。确保数组在边界
之内，指针总是有效的，并且代码不能违背变量的类型(例如把代码放在字符串中，然后执行
它)。从安全的角度看，没有指针很重要。通过指针访问内存是导致 C 或 C++程序漏洞(错误)
—256—
和安全问题的一个主要原因。Java 在内部执行了检查，称为静态类型检查，它检查是否一个
操作在执行的时候获得的参数的类型始终正确。
强类型就是编程的语言必须满足高标准的规范要求，如果不是，则被称为弱类型。
B.3 配置管理（CM）作为安全编码的一个方面
对于软件，配置管理(CM)是指监控和管理对程序和文档的变更。
目标是保证完整性，可用性，和所有系统组件的正确版本的使用，例如软件代码，设计文
档，文档，和控制文件。配置管理涉及对系统所做的每一个变更。这包括所有变更的控制，核
查，和审计。
*第一步是确定所做的所有变更。
*控制当对某些类型的文档的所有变更发生时，必须被评审且由授权人员进行批准。
*核查是记录和报告通过任何变更流程对软件或硬件的配置。
*审计允许完成的变更被验证，尤其是确保任何变更不会影响已经建立的安全策略或保护
机制。还有变更计划管理和信息保护管理就不说了。
1.配置管理的类型：
①并发管理(concurrency management)：确保多人从同一库中导出的文件是完全一致的。
②版本管理(versioning)：记录、跟踪、保持文件的各个版本，支持回滚。
③同步控制(synchronization )：在工作需要时同步库中的所有或部分版本。
2.配置管理的过程：
①识别(Identification)：识别并记录每个配置项的功能和物理牲。
②控制((Control)：控制对配置项的变更，从软件库发布配置项的版本。
③状态记录(Status Accounting)：记录变更的处理过程。
④审计(Audit)：控制配置管理过程的质量。
3.软件托管 Software Escrow（考点）
在第七域 F.2 章节讲过了。软件托管协议 Software Escrow Arrangements 是一种特殊的
工具，可以对公司起到保护作用：它避免公司受软件开发商的代码故障的影响，以便为产品提
供足够的支持，还可以防止出现由于开发商破产而造成产品失去技术支持的情况。在软件托管
协议下，开发商将应用程序源代码的副本提供给独立的第三方组织机构。然后，第三方用安全
的方式维护源代码副本备份的更新。这个经常考到，就是要找一个监理人来监督第三方的软件
开发。如果软件开发商倒闭了，我还要用它的源代码里，只能找第三方来要了。
最知名的软件代码托管网站：GitHub。
B.4 代码仓库的安全
软件开发是一个庞大团队的高度协同工作的复杂工程。Github、Bitbucket、和SourceForge
等代码仓库 Code Repositories（有的是开源仓库），可以用作软件代码的核心集中存储，提
供版本控制、缺陷跟踪、网站托管、发布管理、通信等功能，以支持软件开发。
1.API keys
公共基础设施和 IaaS 服务提供商都提供了 API 接口来定制和使用基础服务。当然，这些
—257—
服务是收费的，用于创建服务器的 API key 绑定服务器到一个特定的用户帐户(和信用卡)。如
果开发人员编写代码，包括了 API keys ，然后上传到一个公共的代码仓库，你的收费服务很
可能被黑客利用。
2.GitHub 的安全措施活动
GitHub 是很重要的代码管理系统（托管），它提供的安全措施有：
①物理安全，数据中心的访问仅限于数据中的技术人员和批准的 GitHub 员工，有严格的
访问控制和审计。
②系统安全，系统有完善的安防系统，使用加固、打过补丁的操作系统；专用的防火墙和
VPN 服务；专用的入侵检测；分布式拒绝服务(DDoS)攻击缓解服务等。
③运行安全，所有敏感信息、的安全文档销毁策略；完全文档化的变更管理流程。
④软件安全，我们在 GitHub 聘请了一个 24/7/365 服务器专家团队。
⑤通讯，所有和 GitHub 交换的私有数据总是通过 SSL 传输，通过 SSH 认证。
⑥文件系统和备份，每一行代码至少保存在三个不同的服务器上，包括异地备份。
⑦员工访问，没有任何 GitHub 员工可以访问过私有代码库除。
⑧维护安全，使用速度限制来防范暴力攻击，使用双因素认证。
⑨信用卡安全，不存储任何卡片的信息。
B.5 应用程序编码接口的安全
API 的安全问题主要涉及：
用户认证、用户授权、加密、防止未经授权的访问、问责制和审计。
分层方法是最经典的安全控制方法，互联网访问经常用到，一般分三层：
表示层、业务逻辑层、数据层。
不过数据库管理系统本身提供的安全特性，因为使用了中间层（中间件），而丢失、无效。
业务逻辑层建立的是“虚表”。因为有“中间件”，本身就保护了对数据库的攻击。
1.应用编程接口 API/ Application Programming Interfaces
为了使这些跨站点/跨系统的软件功能正常工作，每套独立软件都要提供应用编程接口，
允许程序开发人员通过函数调用来直接与底层服务进行交互。应用编程接口是物联网(IoT)的
连接器，允许我们的设备可以互相通讯。与此同时，然而，API 是互联网“未知的，看不见的
力量”，因为最终用户并不知道它们的存在。然而，API 无处不在。API 必须被管理和保护。
2.表述性状态转移(REST)representational state transfer API（考点）
REST 是通过 URL 路径元素表达系统中的特定实体的方法；REST 不是一个架构，但它是在
Web 上建立服务的一个架构风格。REST 允许通过简化的 URL 与一个基于 Web 的系统交互，而不
是复杂的请求体或 POST 参数从系统请求特定项。对于涉及 API 安全的安全专业人员来说，广
泛使用的 REST API 才是真正的关键挑战的核心。今天无处不在使用 REST API。关于 web 服务，
符合 REST 约束的 API 称为 REST 风格(RESTful)。
3.基于 REST API 安全建议（建议性的东西都不用细读，一般不考的）
①使用与你的组织部署的任何 web 应用一样的安全机制部署你的 API；例如，如果你是在
web 前端过滤 XSS，你也必须为你的 API 这样做，最好用同样的工具。
—258—
②不要创建和实现你自己的安全解决方案。使用框架或现有的库，其已经过同行评审和测
试。不熟悉设计安全系统的开发者经常产生有缺陷的安全实现，当他们试图自己做的时候，结
果他们使他们的 API 容易受到攻击(记住 Tesla 讨论)。
③除非你的 API 是免费的，只读的公开的 API，不要使用单一的基于键的认证。这是不够
的。你应该添加一个密码要求。
④不要传递未加密的静态密钥。如果你正在使用 HTTP 且通过线路发送，那么请确保你始
终加密它。
⑤理想的情况下，使用基于散列的消息验证码(HMAC)，因为它是最安全的。使用 SHA-2 和
以上；避免用 SHA 和 MD5 因为已知的漏洞和弱点。
4.认证选项
就是实现 REST 安全的 3 种方法，有三种主要方式你需要熟悉：
①基本身份认证 w/TLS。基本身份认证是三个其中最早建立的，因为大多数情况下它可以
在没有额外库下实现。实现基本身份认证需要做的所有事情通常己经包含在你的标准框架或语
言库中。基本身份认证的问题是它是基本的，并且它只提供了可用的通用协议最低级别的安全
选项。没有高级选项使用此协议，所以你只是发送一个 Base64 编码的用户名和密码。如果没
有使用传输层安全协议(TLS)。决不能使用基本身份认证，因为用户名和密码的组合可以很容
易的被解码。
②Oauthl.0。是这三个中最常见的协议。该协议使用一个加密签名(通常是 HMAC-SHA 值，
它组合了令牌秘密，随机数，和其它基于请求的信息。OAuth 1 巨大的优势是你从不直接通过
线路传递令牌秘密，从而彻底消除了可能有人看到传输中的密码。这是三个协议中唯一可以在
没有 SSL 下安全使用的协议，如果传输的是敏感数据，你还应该使用 SSL。不过，这个安全级
别是有代价的：产生和验证签名可能是个复杂的过程。你必须按照严格的步骤，使用特定的散
列算法。这实际上己经不是问题，因为每一个主流编程语言都已经提供了库为你处理这些。
③Oauth2.0。现行规范中删除了签名，所以你不再需要使用加密算法来创建、产生和验证
签名。所有的这些加密现在都是由 TLS 处理，这是必须的。Oauth2 的库没有 Oauthl.0a 的库
那么多，所有集成这个协议到你的 API 可能更具挑战。
B.1 章节讲单点登陆时也提到了 Oauth，它可以用于单点登陆。
此外，像密钥管理互操作系统(KMIP)V1.1 这样的解决方案；客户端证书和 rHTTP 摘要也
可作为创建安全方案的的可能选项来查看。
5.OWASP REST 安全备忘单
当检查基于 REST API 安全需求和关注时，另外一个资源可以考虑的是 OWASP REST 安全备
忘单。一个安全备忘单例子是：
RESTful web 服务应使用基于会话的身份认证，通过一个 POST 建立一个会话令牌或使用
一个 API 密钥作为 POST 体的参数或作为 cookie。用户名和密码，会话令牌，和 API 密钥不应
出现在 URL 中，因为这可能在 web 服务器日志中捕获并使它们内在的有价值。
6.Web 服务的通信
面向服务的软件架构 SOA 常被考到，相关的技术协议都要了解。
①SOAP 简单对象访问协议(Sirrple Object Access Protocol)
—259—
用来描述传递信息的格式。SOAP 是交换数据的一种协议，是一种轻量的、简单的、基于
XML 的协议，用于在 WEB 上交换结构化的和固化的信息。可以和许多因特网协议和格式结合使
用，包括超文本传输协议(HTTP)，简单邮件传输协议(SMTP)，多用途网际邮件扩充协议(MIME)
等。它还支持从消息系统到远程过程调用(RPC)等大量的应用程序。SOAP 使用基于 XML 的数据
结构和超文本传输协议HTTP的组合定义了一个标准的方法来使用Internet上各种不同操作环
境中的分布式对象。