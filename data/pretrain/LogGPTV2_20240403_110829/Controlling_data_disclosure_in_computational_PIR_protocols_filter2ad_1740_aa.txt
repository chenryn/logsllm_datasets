title:Controlling data disclosure in computational PIR protocols
author:Ning Shang and
Gabriel Ghinita and
Yongbin Zhou and
Elisa Bertino
Controlling Data Disclosure in Computational PIR
Ning Shang
Purdue University
West Lafayette, IN, USA
PI:EMAIL
Protocols
Gabriel Ghinita
Purdue University
West Lafayette, IN, USA
PI:EMAIL
Elisa Bertino
Purdue University
West Lafayette, IN, USA
PI:EMAIL
Yongbin Zhou∗
Purdue University
West Lafayette, IN, USA
PI:EMAIL
ABSTRACT
Private Information Retrieval (PIR) protocols allow users to learn
data items stored at a server which is not fully trusted, without dis-
closing to the server the particular data element retrieved. Several
PIR protocols have been proposed, which provide strong guaran-
tees on user privacy. Nevertheless, in many application scenarios it
is important to protect the database as well. In this paper, we inves-
tigate the amount of data disclosed by the the most prominent PIR
protocols during a single run. We show that a malicious user can
stage attacks that allow an excessive amount of data to be retrieved
from the server. Furthermore, this vulnerability can be exploited
even if the client follows the legitimate steps of the PIR protocol,
hence the malicious request can not be detected and rejected by the
server. We devise mechanisms that limit the PIR disclosure to a
single data item.
Categories and Subject Descriptors
H.2.7 [Database Management]: Database Administration—Secu-
rity, integrity, and protection
General Terms
Design, security
Keywords
Data disclosure, private information retrieval, oblivious transfer
1.
INTRODUCTION
Consider the case of a database server that stores information
about diseases and their associated symptoms and publishes the as-
sociated indices for search. Alice, who is experiencing health prob-
lems, wishes to query the server in order to determine a candidate
∗The author is also afﬁliated with Institute of Software, Chinese
Academy of Sciences, Beijing, China.
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
ASIACCS’10 April 13–16, 2010, Beijing, China.
Copyright 2010 ACM 978-1-60558-936-7 ...$10.00.
diagnosis. However, Alice wants to keep her health status private,
so she does not want the server, or some malicious eavesdropper, to
learn the contents of her query. Therefore, Alice should be able to
ﬁnd a possible diagnosis, without the server learning any of Alice’s
symptoms.
Private Information Retrieval (PIR) addresses such application
scenarios. The PIR problem was ﬁrst formulated [4] in the context
of binary data, represented as a bit string X = [x1, . . . , xn]. The
client holds an index i and wishes to privately retrieve the value of
bit xi.
Figure 1: Overview of Computational PIR
PIR has been studied in an information-theoretic setting in which
the adversary possesses unbounded computational power [4, 2],
and in a computational setting where the adversary’s computing
capability is polynomially bounded [6, 3]. While offering stronger
privacy guarantees, information-theoretic PIR protocols are com-
putationally more expensive and need stronger assumptions, which
make them less practical for real-world applications. Computa-
tional PIR (cPIR), on the other hand, is more efﬁcient. cPIR is
outlined in Fig. 1: the client, who wants to ﬁnd the value of the ith
bit of X (i.e., xi), sends an encrypted request q(i) to the server. The
server responds with a value r(X, q(i)), which allows the client to
determine the value xi. It is computationally intractable for an ad-
versary to ﬁnd the value of i, given q(i). Furthermore, the client
can easily determine the value of xi based on the server’s response
r(X, q(i)), using a trapdoor function.
The primary goal of the PIR protocols is to protect the privacy of
the client. However, the database represents an asset for the server.
In traditional database applications, clients are typically billed in
proportion to the amount of transferred data. Designing an effective
billing mechanism is an important concern with PIR applications,
since the server does not learn which particular data item has been
retrieved by the client. Nevertheless, the protocol design should
control the amount of data (e.g., the number of elements) retrieved
during a single PIR request. Otherwise, a malicious client could
abuse the system. Given practical concerns as such, in this paper,
we identify two important classes of attacks that allow clients to
310retrieve excessive information with a single PIR request: redun-
dancy attacks (RA) and subliminal-channel attacks (SCA). The for-
mer class is relevant to protocols that disclose redundant data items
due to their design. The latter class of attacks is more subtle, and
applies to most cPIR protocols that we are aware of.
In the rest of the paper, we analyze the unintended data disclo-
sures during the operation of the two most prominent cPIR proto-
cols ([6, 3]), and propose modiﬁcations that protect server privacy
against both RA and SCA attacks. Speciﬁcally, we focus on se-
curing the protocol in [6], which has been shown previously [5] to
obtain reasonable performance in practice.
2. REVIEW OF EXISTING CPIR PROTO-
COLS
We review the two most prominent solutions for computational
PIR. Section 2.1 presents the KO protocol [6], which is based on
the Quadratic Residuosity Assumption (QRA), whereas Section 2.2
reviews the CMS protocol [3] which relies on the φ-hiding assump-
tion (φHA).
2.1 QRA-based PIR
Consider a large k-bit integer N which is a product of two k
2 -bit
primes q1 and q2, where k is a security parameter. Let Z∗
N = {x ∈
ZN| gcd(N, x) = 1} be the set of positive numbers in ZN which
are relatively prime to N (gcd is the greatest common divisor).
Then, the set of quadratic residues (QR) modulo N is deﬁned as:
QR = {y ∈ Z∗
N|∃x ∈ Z∗
N : y = x2
The complement of QR in Z∗
residues (QNR). Let Z+1
denotes the Jacobi symbol [1]. Then, exactly half of the numbers
in Z+1
N represents the set of quadratic non-
N are in QR, while the other half are in QNR.
N = {y ∈ Z∗
(mod N )}.
N´ = 1}, where ` y
N´
N|` y
The Quadratic Residuosity Assumption (QRA) states that it is
computationally hard to determine whether a given random num-
ber is a quadratic residue (QR) or a quadratic non-residue (QNR)
modulo N , provided that the factorization of N is not known.
Figure 2: Overview of PIR protocol from [6]
As illustrated in Fig. 2, the KO protocol organizes database X
as a t × t square1 matrix M , where t = ⌈√n⌉, such that Mi,j =
x(i−1)·t+j (for ease of presentation, we assume that n is a perfect
square).
When the client wishes to retrieve the data item at index i, it
ﬁrst generates two random k
2 -bit primes q1 and q2 and computes
the modulus N = q1 · q2. Next, the client determines the row
a = ⌈i/t⌉ and the column b = i (mod t) corresponding to xi in
matrix M , and assembles the query q(i) which is a 1 × t array
Y consists of t random k-bit numbers such that QN (yb) = 1, (i.e.,
yb is in QNR), whereas all other elements yj, j 6= b are in QR. The
query Y is sent to the server together with modulus N (note that,
the factorization of N is kept secret).
When the server receives the query, it computes for each row r
of M the product
zr =
t
Yj=1
Mr,j
y
j
(mod N )
and sends the resulting array
Z = [z1 z2 . . . zt]
(2)
(3)
back to the client. Note that, each zr value is a k-bit number ob-
tained by multiplying those yj values for which the corresponding
data bit Ma,b = 1 (i.e., a masked product). Therefore
Ma,b = 1,
0,
za ∈ QNR
za ∈ QR
.
Knowing the factorization of N , the client can efﬁciently check
whether or not za ∈ QR, and learn the value of Ma,b. Note that, in
addition to the requested item Ma,b, the client can use the remain-
ing Z values in order to recover all elements in column b of M , i.e.,
a total of √n data bits.
In [8], a modiﬁcation to the KO protocol is proposed in order to
reduce the amount of data disclosed to the client. However, this
approach is ﬂawed [9], and therefore the claim of the authors in [8]
that redundancy attacks are completely prevented does not hold.
2.2
φ-hiding-based PIR
The more recent work in [3] proposes the CMS protocol which
improves on the asymptotic communication cost of KO. Speciﬁ-
cally, the O(nǫ) bound is reduced to O(logβ n) where β > 1 is a
system parameter.2 CMS relies on the φ-hiding assumption (φHA),
which states that given large composite prime N , it is difﬁcult to
decide (without knowing the factorization of N ) whether a small
prime divides φ(N ), where φ(N ) is the Euler phi function [1] at
N . A prime number p is said to be φ-hidden by N if p|φ(N ).
In the protocol, the client possesses a pseudo-random prime-
sequence generator PG that computes a deterministic sequence of
k-bit primes p1 . . . pn, one for each item in the database. The client
also computes an integer N that hides the prime pi, corresponding
to the item xi that the client wishes to retrieve. As shown in [3],
the probability of N hiding any other prime pj, j 6= i is negligible.
The client also generates a random g ∈ Z∗
N and sends to the server
g, the generator PG and N .
The server computes recursively the following:
v0 = g,
vj = v
xj
j
p
j−1
(mod N ), 1 ≤ j ≤ n
(4)
and returns to the client vn. Note that each vj is obtained by raising
xj
the previous vj−1 to a power equal to the prime p
j . The client
receives from the server the value vn, and determines that
xi = 1,
0,
if vn has a pth
otherwise
i root modulo N
.
(5)
3. EXCESSIVE DISCLOSURE OF DATA IN
Y = [y1, y2, . . . , yt].
(1)
PIR PROTOCOLS
1For brevity of presentation, we only consider square matrices.
Nevertheless, the KO protocol, as well as the vulnerability we will
present in Section 3.1, also apply to general rectangular (i.e., non-
square) matrices.
Real-world database applications of the PIR protocol should en-
able the server to control the number of disclosed items, even if
2According to the authors, a value of β = 8 is suitable in practice.
311the server does not learn which exact items were retrieved. Ideally,
only one single item (the object of the client request) should be re-
vealed by the protocol. Next, we show how a malicious client can
exploit the KO and CMS protocols to gain knowledge on a number
of data items considerably larger than intended by the PIR proto-
cols’ design. In this section, we focus on SCA attacks only. The
RA attack3 for KO is discussed in detail in [9].
3.1 Exploiting KO
As mentioned in Section 2.1, the KO protocol is designed to dis-
close no more than √n data items in a single request. This is al-
ready a large fraction of the database. Still, a malicious client can
stage an attack that can increase the data disclosure even further, by
injecting a subliminal channel within the query message.