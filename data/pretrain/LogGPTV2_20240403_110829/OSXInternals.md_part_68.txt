// Global flags
int trace_enabled = 0;
int set_remove_flag = 1;
// Mapping of kdebug class IDs to class names
const char *KDBG_CLASS_NAMES[256] = {
NULL, // 0
"DBG_MACH", // 1
"DBG_NETWORK", // 2
"DBG_FSYSTEM", // 3
"DBG_BSD", // 4
"DBG_IOKIT", // 5
"DBG_DRIVERS", // 6
"DBG_TRACE", // 7
"DBG_DLIL", // 8
"DBG_SECURITY", // 9
NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
"DBG_MISC", // 20
NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
"DBG_DYLD", // 31
"DBG_QT", // 32
"DBG_APPS", // 33
NULL,
};
// Functions that we implement (the 'u' in ukdbg represents user space)
void ukdbg_exit_handler(int);
void ukdbg_exit(const char *);
void ukdbg_setenable(int);
void ukdbg_clear();
void ukdbg_reinit();
void ukdbg_setbuf(int);
void ukdbg_getbuf(kbufinfo_t *);
void ukdbg_setpidcheck(pid_t, int);
void ukdbg_read(char *, size_t *);
void ukdbg_setreg_valcheck(int val1, int val2, int val3, int val4);
void
ukdbg_exit_handler(int s)
{
exiting = 1;
if (trace_enabled)
ukdbg_setenable(0);
if (pid > 0)
ukdbg_setpidcheck(pid, 0);
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh16A1.htm 20.08.2007
Chapter 6. The xnu Kernel Page 100 of 137
if (set_remove_flag)
ukdbg_clear();
fprintf(stderr, "cleaning up...\n");
exit(s);
}
void
ukdbg_exit(const char *msg)
{
if (msg)
perror(msg);
ukdbg_exit_handler(0);
}
// Enable or disable trace
// enable=1 enables (trace buffer must already be initialized)
// enable=0 disables
void
ukdbg_setenable(int enable)
{
mib[0] = CTL_KERN;
mib[1] = KERN_KDEBUG;
mib[2] = KERN_KDENABLE;
mib[3] = enable;
if ((sysctl(mib, 4, NULL, &oldlen, NULL, 0)  2) {
fprintf(stderr, "usage: %s []\n", PROGNAME);
exit(1);
}
if (argc == 2)
pid = atoi(argv[1]);
code = KDBG_BSD_SYSTEM_CALL_OF_INTEREST;
// Arrange for cleanup
signal(SIGHUP, ukdbg_exit_handler);
signal(SIGINT, ukdbg_exit_handler);
signal(SIGQUIT, ukdbg_exit_handler);
signal(SIGTERM, ukdbg_exit_handler);
kd_buf_memory = malloc(KDBG_SAMPLE_SIZE * sizeof(kd_buf));
if (!kd_buf_memory) {
perror("malloc");
exit(1);
}
ukdbg_clear(); // Clean up related buffers
ukdbg_setbuf(KDBG_SAMPLE_SIZE); // Set buffer for the desired # of entries
ukdbg_reinit(); // Reinitialize the facility
if (pid > 0)
ukdbg_setpidcheck(pid, 1); // We want this pid
// We want this particular BSD system call
ukdbg_setreg_valcheck(BSDDBG_CODE(DBG_BSD_EXCP_SC, code), 0, 0, 0);
ukdbg_setenable(1); // Enable tracing
while (1) {
ukdbg_getbuf(&bufinfo); // Query information
oldlen = bufinfo.nkdbufs * sizeof(kd_buf); // How much to read?
ukdbg_read(kd_buf_memory, &oldlen); // Read that much
count = oldlen;
kd = (kd_buf *)kd_buf_memory;
for (i = 0; i > KDBG_CLASS_SHIFT;
now = kd[i].timestamp & KDBG_TIMESTAMP_MASK;
cpu = (kd[i].timestamp & KDBG_CPU_MASK) >> KDBG_CPU_SHIFT;
if (debugid & DBG_FUNC_START)
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh16A1.htm 20.08.2007
Chapter 6. The xnu Kernel Page 103 of 137
qual = "DBG_FUNC_START";
else if (debugid & DBG_FUNC_END)
qual = "DBG_FUNC_END";
// Note that 'type' should be the system call we were looking for
// (type == BSDDBG_CODE(DBG_BSD_EXCP_SC, code) is true
printf("%lld: cpu %lld %s code %#x thread %p %s\n",
now,
cpu,
(KDBG_CLASS_NAMES[class]) ? KDBG_CLASS_NAMES[class] : "",
type,
(void *)thread,
qual);
}
usleep(KDBG_SAMPLE_INTERVAL);
}
}
$ gcc -Wall -I /path/to/xnu/bsd/ -o kdebug kdebug.c
$ ./kdebug # now use the 'cd' command from another shell
9009708884894: cpu 1 DBG_BSD code 0x40c0030 thread 0x47f9948 DBG_FUNC_START
9009708885712: cpu 1 DBG_BSD code 0x40c0030 thread 0x47f9948 DBG_FUNC_END
^Ccleaning up...
The file /usr/share/misc/trace.codes maps kdebug codes to operation names. It is used by
programs such as sc_usage and latency to display debug codes in human-readable forms.
6.8.7.2. kdebug Entropy Collection
As we noted earlier, the kdebug facility can be enabled to sample system entropy. The samples are
collected in a kernel buffer, which is then copied to user space. These steps occur within a single
sysctl call. Input to this call includes a user buffer for receiving entropy entries, the buffer's size, and a
timeout value. The Mac OS X Security Server (/usr/sbin/securityd) contains a system entropy
management module that uses kdebug entropy collection. It performs the following operations.
It reads the saved entropy file (/var/db/SystemEntropyCache) on startup and seeds the
random number generator (RNG) for initial use.
It periodically calls the kdebug facility to collect and retrieve system entropy, which it uses to
seed the RNG.
It periodically saves the RNG's entropy to the entropy file for use across reboots.
// //src/entropy.cpp
void
EntropyManager::collectEntropy()
{
int mib[4];
mib[0] = CTL_KERN;
mib[1] = KERN_KDEBUG;
mib[2] = KERN_KDGETENTROPY;
mib[3] = 1; // milliseconds of maximum delay
mach_timespec_t timings[timingsToCollect];
size_t size = sizeof(timings);
int ret = sysctl(mib, 4, timings, &size, NULL, 0);
file://C:\Dokumente und Einstellungen\Silvia\Lokale Einstellungen\Temp\~hh16A1.htm 20.08.2007
Chapter 6. The xnu Kernel Page 104 of 137
...
}
The in-kernel handler for the KERN_KDGETENTROPY sysctl calls kdbg_getentropy()
[bsd/kern/kdebug.c], which performs the following operations.
If entropy is already being sampled, it returns EBUSY. This is because there can be at most one
instance of entropy collection in the kdebug facility.
 It uses kmem_alloc() to allocate a kernel buffer large enough to hold the number of entropy
entries requested. If this allocation fails, it returns EINVAL.
If the caller-specified timeout value is less than 10 ms, it alters the timeout to be 10 ms.
 It enables entropy sampling by setting the KDEBUG_ENABLE_ENTROPY bit in the kdebug_enable
variable.
 It calls tsleep() [bsd/kern/kern_synch.c] to sleep for the timeout duration.
 Upon being woken up, it disables entropy sampling by clearing the KDEBUG_ENABLE_ENTROPY
bit in kdebug_enable.
It copies the kernel entropy buffer to the user buffer that was passed in the sysctl call.
 It calls kmem_free() to free the in-kernel entropy buffer.
Enabling entropy collection causes kernel_debug() to collect timestamp entries in the entropy
buffer. Note that this is independent of whether kdebug tracing is enabled or the CHUD hook is
installed.
// bsd/kern/kdebug.c
void
kernel_debug(debugid, arg1, arg2, arg3, arg4, arg5)
{
...
if (kdebug_enable & KDEBUG_ENABLE_ENTROPY) {
// collect some more entropy
if (kd_entropy_index < kd_entropy_count) {
kd_entropy_buffer[kd_entropy_index] = mach_absolute_time();
kd_entropy_index++;
}
// do we have enough timestamp entries to fill the entropy buffer?
if (kd_entropy_index == kd_entropy_count) {