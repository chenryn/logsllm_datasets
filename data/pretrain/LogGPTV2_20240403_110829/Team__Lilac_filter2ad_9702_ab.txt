       first  = Sum([z3_abs(b1 - b2) for b1,b2 in zip(xmm1[:8], xmm2[:8])])
       second = Sum([z3_abs(b1 - b2) for b1,b2 in zip(xmm1[8:], xmm2[8:])])
       return (first, second)
    [0x2DD02F6, 0x2DC02E8, 0x2D802ED, 0x2CE02E2, 0x2C402E2, 0x2D402DB, 0x2D902CD, 0x3110304]
    _results = [
       (0x02dd, 0x02f6),
       (0x02dc, 0x02e8),
       (0x02d8, 0x02ed),
       (0x02ce, 0x02e2),
       (0x02c4, 0x02e2),
       (0x02d4, 0x02db),
       (0x02d9, 0x02cd),
       (0x0311, 0x0304)
    ] [::-1]
    _xmm5s = [
       [0xb8, 0x13, 0x00, 0xcd, 0x10, 0x0f, 0x20, 0xc0, 0x83, 0xe0, 0xfb, 0x83, 0xc8, 0x02, 0x0f, 0x22],
    ]
    for x in _results[:-1]:
       _xmm5s.append(list(map(ord, struct.pack(' 30, char    
实现:(sage 脚本)
    from sage.all import *
    mod = 2**256
    h0 = 45740974929179720441799381904411404011270459520712533273451053262137196814399
    g = 2**168 + 355
    K = 2**256
    base = map(ord, "7feilee"*8)
    N = len(base)
    m = matrix(ZZ, N + 1, N + 2)
    for i in xrange(N):
        ge = pow(g, N-i, mod)
        m[i,0] = ge
        m[i,1+i] = 1
    m[N,0] = mod
    for i in xrange(N+1):
        m[i,0] *= K
    ml = m.LLL()
    ttt = ml.rows()[0]
    print "result:", ttt
    if ttt[0] != 0:
        print "Error"
        exit()
    if not base:
        base = [BASE] * N
    msg = []
    for i in range(N):
        msg.append(base[i] + ttt[1+i])
        if not (0 <= msg[-1] <= 255):
            print "Need more bytes!"
            quit()
    def shitty_hash(msg):
        h = h0
        for i in msg:
            h = (h + i)*g 
            # This line is just to screw you up :))
            h = h & 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff#mod2**256
            #print h
        return h - 0xe6168647f636
    def pure_hash(msg):
        h = 0
        for i in msg:
            h = (h + i)*g 
            # This line is just to screw you up :))
            h = h & 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff#mod2**256
        return h
    print base
    print "m1:", "".join(map(chr, base))
    print hex(shitty_hash(base)), shitty_hash(base)
    print msg
    diff = [i-j for i,j in zip(msg,base)]
    print diff
    print hex(pure_hash(diff))
    print "m2:", "".join(map(chr, msg))
    print hex(shitty_hash(msg)), shitty_hash(msg)
    '''
    result: (0, 2, 10, 0, 14, 12, 6, -9, 5, -1, 10, 14, 7, 4, -7, -9, 1, -6, -11, -2, 4, 5, -9, -3, -7, -12, -18, -2, 9, -6, 20, 14, 3, -2, -10, -11, -8, -11, -4, -3, -3, 8, -2, -2, -7, 10, 1, -7, -6, 1, -3, -11, 0, -2, -2, -13, -3, 0)
    linear combination 1:[55, 102, 101, 105, 108, 101, 101, 55, 102, 101, 105, 108, 101, 101, 55, 102, 101, 105, 108, 101, 101, 55, 102, 101, 105, 108, 101, 101, 55, 102, 101, 105, 108, 101, 101, 55, 102, 101, 105, 108, 101, 101, 55, 102, 101, 105, 108, 101, 101, 55, 102, 101, 105, 108, 101, 101]
    m1: 7feilee7feilee7feilee7feilee7feilee7feilee7feilee7feilee
    0xdc50edf5709e590380c17156e4a9c6bf29938a8926eee56efd3e96e861cf4079L 99651816784432116140389266578054142896984837252368337731439517562844400795769
    linear combination 1+linear combination 2:[57, 112, 101, 119, 120, 107, 92, 60, 101, 111, 119, 115, 105, 94, 46, 103, 95, 94, 106, 105, 106, 46, 99, 94, 93, 90, 99, 110, 49, 122, 115, 108, 106, 91, 90, 47, 91, 97, 102, 105, 109, 99, 53, 95, 111, 106, 101, 95, 102, 52, 91, 101, 103, 106, 88, 98]
    linear combination 2:[2, 10, 0, 14, 12, 6, -9, 5, -1, 10, 14, 7, 4, -7, -9, 1, -6, -11, -2, 4, 5, -9, -3, -7, -12, -18, -2, 9, -6, 20, 14, 3, -2, -10, -11, -8, -11, -4, -3, -3, 8, -2, -2, -7, 10, 1, -7, -6, 1, -3, -11, 0, -2, -2, -13, -3]
    0#pure_hash(linear combination 2 == 0),which cause the collision
    m2: 9pewxk\<eowsi^.g_^jij.c^]Zcn1zslj[Z/[afimc5_oje_f4[egjXb
    dc50edf5709e590380c17156e4a9c6bf29938a8926eee56efd3e96e861cf4079 99651816784432116140389266578054142896984837252368337731439517562844400795769
    '''
    from pwn import *
    import random
    import re
    import libnum
    import string
    from hashlib import *
    import itertools
    context.log_level = "debug"
    io = remote("117.50.1.201",9999)
    io.recv()
    io.sendline("7feilee7feilee7feilee7feilee7feilee7feilee7feilee7feilee")
    io.recvuntil('m2 : ')
    io.sendline("9pewxk\<eowsi^.g_^jij.c^]Zcn1zslj[Z/[afimc5_oje_f4[egjXb")
    io.recv()
    io.recv()
    io.recv()
    '''    '\n'
        "The flag is simple, it is 'the flag' :)) \n"
        'flag{b78017f6-90b1-486b-9f12-67d17cdcbfca}\n'
    '''
`flag:flag{b78017f6-90b1-486b-9f12-67d17cdcbfca}`