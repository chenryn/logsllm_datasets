We introduce tools for smoothing out
lower bound
proofs. They are presented as extensions of the syntax and
semantics but can be encoded within the original calculus.
These encodings, provided in the appendix, preserve posi-
tiveness of processes and are of polynomial size.
Non-deterministic choice. One ﬁrst, classical feature is
non-deterministic choice P + Q deﬁned by semantics
(P ∪ {{P + Q}}, Φ) ε−→
if R ∈ {P, Q}
Boolean guess. We assume that Fc contains two constant
symbols 0 and 1 for booleans. One derivative of the non-
deterministic choice is the boolean guess Choose(x).P de-
ﬁned by two rules, for b ∈ {0, 1}:
Choose(x).P ε−→
(P ∪ {{R}}, Φ)
c P{x (cid:9)→ b}
c
Boolean circuits. Logical gates are boolean functions with
at most
two inputs and two (identical) outputs. Typical
examples are 0, 1, ¬, ∧, ∨ or =. A boolean circuit is an
acyclic graph of gates, each input (resp. output) of a gate
being either isolated or connected to a unique output (resp.
input) of another gate. Such a circuit Γ with m isolated
inputs and n isolated outputs therefore models a function
Γ : Bm → Bn (where B = {0, 1}). We integrate circuits
into the calculus using syntax
x1,··· , xn ← Γ(b1,··· , bm).P
where x1, . . . , xn are variables and b1,··· , bm terms, with
(P ∪ {{P{(cid:10)x (cid:9)→ Γ((cid:10)b↓)}}}, Φ)
(P ∪ {{(cid:10)x ← Γ((cid:10)b).P}}, Φ) ε−→
if Msg((cid:10)b) and (cid:10)b↓ ⊆ B
c
3.3. coNEXP hardness of dynamic equivalences
Let us consider a circuit Γ : {0, 1}m+2 → {0, 1}n+1.
Using binary representation of integers, Γ can be interpreted
as a function (cid:2)Γ(cid:3) : (cid:2)0, 2m−1(cid:3)×(cid:2)1, 3(cid:3) → {0, 1}×(cid:2)0, 2n−1(cid:3).
This way, Γ encodes a CNF formula (cid:2)Γ(cid:3)
ϕ with 2n variables
(cid:10)x = x0,··· , x2n−1 and 2m clauses:
∨ (cid:3)
2m−1(cid:10)
∨ (cid:3)
(cid:2)Γ(cid:3)
(cid:3)
1
i
2
i
3
i
ϕ
((cid:10)x) =
(cid:3)
where
i=0
(cid:3)j
i
(cid:3)j
i
= xk
= ¬xk
if (cid:2)Γ(cid:3)(i, j) = (0, k)
if (cid:2)Γ(cid:3)(i, j) = (1, k)
Rephrasing, (cid:2)Γ(cid:3)(i, j) returns a sign bit and the jth
variable of the ith clause of (cid:2)Γ(cid:3)ϕ.
Lemma 2 (SUCCINCT 3SAT [40]). The following problem
is NEXP-complete:
INPUT: A circuit Γ with m + 2 inputs and n + 1 outputs.
QUESTION: Is the 3SAT-formula (cid:2)Γ(cid:3)ϕ satisﬁable?
Given an instance Γ of this problem, we design F, R
subterm destructor and A and B positive processes such that
A (cid:15)≈t B iff A (cid:15)≈(cid:2) B iff (cid:2)Γ(cid:3)ϕ is satisﬁable.
534
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:38:36 UTC from IEEE Xplore.  Restrictions apply. 
Term algebra. Terms are built over the following signature
F = Fc (cid:7) Fd and rewrite system R:
Fc (cid:2) {0 , 1, Node/2, h/2, hN/2, hB/2}
Fd (cid:2) {π/2, TestN/1, TestB/1}
π(Node(x, y), 0) → x
TestB(hB(0, z)) → 1
π(Node(x, y), 1) → y
TestB(hB(1, z)) → 1
TestN(hN(Node(x, y), z)) → 1
This models argument-testing mechanisms and a binary-
tree datatype. We use syntactic sugar for recursive extrac-
tions: if (cid:3) ∈ T (F,N ∪X 1)(cid:3) is a sequence of terms, the nota-
(cid:2) π(t, b)|(cid:2).
tion t|(cid:2) is inductively deﬁned by t|ε
Reduction. We want to design processes A and B whose
equivalence rephrases to (cid:2)Γ(cid:3)ϕ being falsiﬁed by all valua-
tions of its variables. We manage this using two processes:
1) CheckTree(x) checks whether x is a correct encoding
of a valuation, that is, whether x is a complete binary
tree of height n whose leaves are booleans;
(cid:2) t and t|b·(cid:2)
2) CheckSat(x) checks whether the valuation encoded by
x falsiﬁes (cid:2)Γ(cid:3)ϕ.
A and B are deﬁned in ﬁg. 3 and their equivalence intu-
itively means: “for all terms x, either x is not an encoding
of a valuation or x falsiﬁes a clause of (cid:2)Γ(cid:3)ϕ”. This is for-
malised by two lemmas, where P0 = c(cid:5)h(0, s)(cid:6).c(cid:5)h(1, s)(cid:6):
Lemma 3. Let x be a message which is not complete binary
tree of height n with boolean leaves. Then there exists a
reduction CheckTree(x) ε=⇒c C such that C ≈(cid:2) ({{P0}},∅).
Lemma 4. Let x be a complete binary tree of height n
whose leaves are booleans, and valx the valuation map-
k=1 pk2k−1 of (cid:2)Γ(cid:3)ϕ to
ping the variable number i =
∈ B. If valx does not satisfy (cid:2)Γ(cid:3)ϕ, there exists a
x|p1···pm
reduction CheckSat(x) ε=⇒c C such that C ≈(cid:2) ({{P0}},∅).
These two lemmas are the key ingredients needed to
prove that (cid:2)Γ(cid:3)ϕ is satisﬁable iff A (cid:15)≈t B iff A (cid:15)≈(cid:2) B. Hence:
≈(cid:2) are coNEXP-hard for
Theorem 5. Equiv
subterm destructor rewrite systems and positive processes.
≈t and Equiv
(cid:11)
m
4. A symbolic setting
The main difﬁculty to decidability is the attacker’s abil-
ity to provide inputs with messages of its choice. One
traditionally relies on symbolic techniques, only recording
logical constraints characterising concrete actions. This is
the main ingredient of our decision procedure (section 5).
4.1. Constraints as formulas
We formalise trace constraints by a ﬁrst-order logic
X (cid:20)?
relying on two kinds of atomic formulas:
u =?
u (deduction fact)
v (equation)
where u, v are constructor protocol terms and X ∈ X 2 is a
new type of variable (second-order variable). They are used
and
to model deductive capabilities: X (cid:20)? u intuitively means
that the attacker is able to deduce u. Equations u =? v and
their negations, disequations u (cid:15)=? v, are typically imposed
by conditionals (if u = v then . . . else . . .). A ﬁrst-order
formula over such atoms is simply called a formula. We
see sets of formulas as conjunctions of formulas and vice
versa. Moreover, a substitution {x (cid:9)→ t} is also interpreted
as x =? t.
A formula is to be interpreted through the valuation of
axioms, second-order variables and ﬁrst-order variables. A
valuation of a formula is therefore a triple (Φ, Σ, σ) with
Φ : AX → T (F,N )
Σ : X 2 → T (F,Npub ∪ AX )
σ : X 1 → T (Fc,N )
(frame)
(second-order solution)
(ﬁrst-order solution)
and the satisﬁability relation |= is deﬁned as follows:
(Φ, Σ, σ) |= (X (cid:20)?
(Φ, Σ, σ) |= (u =?
Additionally, we use a form of bookkeeping to record
which knowledge is available to the attacker when perform-
ing a deduction X (cid:20)? u. For that we decompose X 2 into
u) iff Msg(XΣΦ) and XΣΦ↓ = uσ↓
v) iff uσ = vσ
X 2 =
Variables X 2
n points to recipes that only use the ﬁrst n
protocol outputs. Formally speaking, this means that for all
Σ we assume img(Σ|X 2
) ⊆ T (F,Npub ∪ {axi}n
i=0 X 2
X 2
:n
X 2
n∈N
(cid:12)
(cid:13)
=
:i
n
n
i=1).
n
4.2. Semantics with symbolic inputs
In a nutshell, we abstract inputs by variables constrained
by formulas. They are collected into constraint systems:
Deﬁnition 8. A constraint system is a tuple C = (Φ, D, E1):
• Φ = Φ(C) is a frame of constructor protocol terms (not
necessarily closed);
• D = D(C) is a set of deduction facts X (cid:20)? t with
X ∈ X 2|Φ| and t a constructor protocol term;
• E1 = E1(C) is a set of formulas each of the form
j=1 uj (cid:15)=?
vj
∀y1. . . . .∀yk.
u =?
(cid:14)
or
v
p
where uj, vj, u, v are constructor protocol terms and
y1, . . . , yk ∈ X 1. The restriction of E1 to its equalities
is written E1|=.
We call C∅ = (∅,∅,∅) the empty constraint system.
Intuitively, Φ is a frame (with symbolic inputs), D
collects the deductions an attacker has to perform, and
E1 gathers the (dis)equations of the trace. The form of
disequations comes from the requirements that terms are
messages in the concrete semantics. For example, consider
if proj1(x) = y then P else Q
The positive and the negative branches of the test will trigger
x =? (cid:5)y, x
(cid:2)(cid:6)
and
(cid:2)
∀x
. x (cid:15)=? (cid:5)y, x
(cid:2)(cid:6)
535
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:38:36 UTC from IEEE Xplore.  Restrictions apply. 
CheckSat(x)
A
c(x)
+
B
c(x)
+
CheckTree(x)
CheckSat(x)
c(cid:5)h(0, s)(cid:6)
c(cid:5)h(1, s)(cid:6)
CheckTree(x)
CheckSat(x)
CheckTree(x)
Choose(p1, . . . , pm)
b1, (cid:3)1 ← Γ((cid:10)p, 0, 1)
b2, (cid:3)2 ← Γ((cid:10)p, 1, 0)
b3, (cid:3)3 ← Γ((cid:10)p, 1, 1)
⎛
∨
⎝ b1 = x|(cid:2)1
∨
b2 = x|(cid:2)2
b3 = x|(cid:2)3
c(cid:5)h(v, s)(cid:6)
c(cid:5)h(1, s)(cid:6)
v ←
⎞
⎠
+
(cid:11)
n−1
i=0
Choose(p1, . . . , pi)
Choose(p1, . . . , pn)
c(cid:5)hN(x|(cid:10)p, s)(cid:6)
c(cid:5)h(1, s)(cid:6)
c(cid:5)hB(x|(cid:10)p, s)(cid:6)
c(cid:5)h(1, s)(cid:6)
Figure 3: Deﬁnition of the extended processes A and B
(cid:2)
vars(T )↓ = (στ )↓.
Notice in particular that x
is implicitly quantiﬁed exis-
tentially in the ﬁrst formula. As expected, such branching
constraints are closely related to a notion of uniﬁcation:
Deﬁnition 9. Let T = {si, ti}i∈I be terms. A uniﬁer of
E = {si =? ti}i∈I modulo R is a substitution σ such that
1) dom(σ) ⊆ vars(T );
2) for all i ∈ I, siσ↓ = tiσ↓, Msg(siσ) and Msg(tiσ).
A set S of uniﬁers modulo R is said complete when,
for all uniﬁers θ of E, there exist substitutions σ ∈ S and
τ such that θ|
We denote by mguR(E) a complete set of uniﬁers of E,
or simply mguR(s, t) for singletons E = {s =? t}. They
are known computable for (destructor) subterm convergent
rewrite systems using narrowing. This notion is reminiscent
to the classical, syntactic most general uniﬁer mgu(E)
(known computable and unique up to variable renaming).
Example 7. Sticking to our running example, if a ∈ N
mguR(a, sdec(proj1(x), y)) = {{x (cid:9)→ (cid:5)senc(a, y), z(cid:6)}}
However, when unifying t = proj1(x) with itself, as destruc-
tors shall not fail, we do not get the identity substitution but
mguR(t, t) = {{x (cid:9)→ (cid:5)y, z(cid:6)}}
We now have all ingredients to specify the symbolic
semantics. A symbolic process is a pair (P,C), P multiset
of plain processes, C constraint system. Like concrete pro-
cesses, their semantics is given by a transition relation a−→s
where a is either ε or a symbolic action a ∈ As with
, n ∈ N}
As (cid:2) {Y (X), Y (cid:5)axn(cid:6) | X, Y ∈ X 2
Again a−→s is extended to a closure w=⇒s where w is a word
of symbolic actions. The most important rules deﬁning a−→s
are given in ﬁg. 4 (remaining ones in the appendix). The
execution tree of running example P b is given in ﬁg. 5.
536
4.3. Link with concrete semantics
Each symbolic trace abstracts several concrete traces.
The possible concretisations of a symbolic trace are there-
fore the concrete traces compatible with the constraints
of the symbolic process. We model this by the notion of
solution of a constraint system:
Deﬁnition 10. We say that (Σ, σ) is a solution of a con-
straint system C = (Φ, D, E1) when dom(Σ) = vars(D) ∩
X 2, dom(σ) = vars(D) ∩ X 1 and
(Φσ, Σ, σ) |= D ∧ E
1
The substitution σ (resp. Σ) is called the ﬁrst-order (resp.
second-order) solution of C and the set of solutions of C is
denoted Sol (C). C is said satisﬁable when Sol (C) (cid:15)= ∅.
In practice, σ is entirely determined by Σ. Indeed
an invariant—called origination property—veriﬁed by C∅
and preserved by symbolic transitions is that all variables
x ∈ X 1 of Φ(C) have been priorly determined by an input.
Formally, for all axk ∈ dom(Φ(C)) and x ∈ vars(axkΦ(C)):
∃X ∈ X 2
k−1, (X (cid:20)?
x) ∈ D
Using the notion of solution, we can then express the
link between the two semantics: all symbolic traces are con-
cretisable (soundness) and all concrete traces are represented
by a symbolic trace (completeness).
Lemma 6. Let (Ps,C) be a symbolic process. We have
Soundness : if (Ps,C) trs=⇒s (P(cid:2)
(cid:2)↓) trsΣ(cid:2)
(cid:2)) ∈ Sol (C(cid:2)),
(cid:2)↓)
==⇒c (P(cid:2)
sσ