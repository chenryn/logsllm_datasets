                       ->  Sort  
                             Sort Key: t3_2.id  
                             ->  Seq Scan on t3 t3_2  
                 ->  Index Only Scan using t1_pkey on t1 t1_2  
   InitPlan 2 (returns $1)  
     ->  Aggregate  
           ->  Merge Join  
                 Merge Cond: (t2_4.id = t1_4.id)  
                 ->  Merge Join  
                       Merge Cond: (t2_4.id = t3_4.id)  
                       ->  Index Only Scan using t2_pkey on t2 t2_4  
                       ->  Sort  
                             Sort Key: t3_4.id  
                             ->  Seq Scan on t3 t3_4  
                 ->  Index Only Scan using t1_pkey on t1 t1_4  
   ->  Nested Loop  
         ->  Nested Loop  
               ->  Nested Loop  
                     ->  Nested Loop  
                           ->  Nested Loop  
                                 ->  Index Only Scan using t1_pkey on t1 t1_3  
                                       Index Cond: (id = $1)  
                                 ->  Index Only Scan using t2_pkey on t2 t2_3  
                                       Index Cond: (id = $1)  
                           ->  Seq Scan on t3 t3_3  
                                 Filter: (id = $1)  
                     ->  Aggregate  
                           Filter: (max(t1_5.id) = $1)  
                           ->  Merge Join  
                                 Merge Cond: (t2_5.id = t1_5.id)  
                                 ->  Merge Join  
                                       Merge Cond: (t2_5.id = t3_5.id)  
                                       ->  Index Only Scan using t2_pkey on t2 t2_5  
                                       ->  Sort  
                                             Sort Key: t3_5.id  
                                             ->  Seq Scan on t3 t3_5  
                                 ->  Index Only Scan using t1_pkey on t1 t1_5  
               ->  Seq Scan on t3 t3_1  
                     Filter: (id = $1)  
         ->  Index Only Scan using t2_pkey on t2 t2_1  
               Index Cond: (id = $1)  
   ->  Index Only Scan using t1_pkey on t1 t1_1  
         Index Cond: (id = $1)  
(51 rows)  
-- ambigous error  
EXPLAIN (COSTS false) SELECT * FROM t1, s0.t1, t2 WHERE public.t1.id = s0.t1.id AND public.t1.id = t2.id;  
                   QUERY PLAN                      
-------------------------------------------------  
 Merge Join  
   Merge Cond: (t1.id = t2.id)  
   ->  Merge Join  
         Merge Cond: (t1.id = t1_1.id)  
         ->  Index Scan using t1_pkey on t1  
         ->  Index Scan using t1_pkey on t1 t1_1  
   ->  Index Scan using t2_pkey on t2  
(7 rows)  
/*+NestLoop(t1 t2)*/  
EXPLAIN (COSTS false) SELECT * FROM t1, s0.t1, t2 WHERE public.t1.id = s0.t1.id AND public.t1.id = t2.id;  
INFO:  pg_hint_plan: hint syntax error at or near "NestLoop(t1 t2)"  
DETAIL:  Relation name "t1" is ambiguous.  
LOG:  pg_hint_plan:  
used hint:  
not used hint:  
duplication hint:  
error hint:  
NestLoop(t1 t2)  
                   QUERY PLAN                      
-------------------------------------------------  
 Merge Join  
   Merge Cond: (t1.id = t2.id)  
   ->  Merge Join  
         Merge Cond: (t1.id = t1_1.id)  
         ->  Index Scan using t1_pkey on t1  
         ->  Index Scan using t1_pkey on t1 t1_1  
   ->  Index Scan using t2_pkey on t2  
(7 rows)  
/*+Leading(t1 t2 t1)*/  
EXPLAIN (COSTS false) SELECT * FROM t1, s0.t1, t2 WHERE public.t1.id = s0.t1.id AND public.t1.id = t2.id;  
INFO:  pg_hint_plan: hint syntax error at or near "Leading(t1 t2 t1)"  
DETAIL:  Relation name "t1" is ambiguous.  
LOG:  pg_hint_plan:  
used hint:  
not used hint:  
duplication hint:  
error hint:  
Leading(t1 t2 t1)  
                   QUERY PLAN                      
-------------------------------------------------  
 Merge Join  
   Merge Cond: (t1.id = t2.id)  
   ->  Merge Join  
         Merge Cond: (t1.id = t1_1.id)  
         ->  Index Scan using t1_pkey on t1  
         ->  Index Scan using t1_pkey on t1 t1_1  
   ->  Index Scan using t2_pkey on t2  
(7 rows)  
-- identifier length test  
EXPLAIN (COSTS false) SELECT * FROM t1 "123456789012345678901234567890123456789012345678901234567890123" JOIN t2 ON ("123456789012345678901234567890123456789012345678901234567890123".id = t2.id) JOIN t3 ON (t2.id = t3.id);  
                                                  QUERY PLAN                                                    
--------------------------------------------------------------------------------------------------------------  
 Merge Join  
   Merge Cond: ("123456789012345678901234567890123456789012345678901234567890123".id = t3.id)  
   ->  Merge Join  
         Merge Cond: ("123456789012345678901234567890123456789012345678901234567890123".id = t2.id)  
         ->  Index Scan using t1_pkey on t1 "123456789012345678901234567890123456789012345678901234567890123"  
         ->  Index Scan using t2_pkey on t2  
   ->  Sort  
         Sort Key: t3.id  
         ->  Seq Scan on t3  
(9 rows)  
/*+  
Leading(123456789012345678901234567890123456789012345678901234567890123 t2 t3)  
SeqScan(123456789012345678901234567890123456789012345678901234567890123)  
MergeJoin(123456789012345678901234567890123456789012345678901234567890123 t2)  
Set(123456789012345678901234567890123456789012345678901234567890123 1)  
*/  
EXPLAIN (COSTS false) SELECT * FROM t1 "123456789012345678901234567890123456789012345678901234567890123" JOIN t2 ON ("123456789012345678901234567890123456789012345678901234567890123".id = t2.id) JOIN t3 ON (t2.id = t3.id);  
INFO:  unrecognized configuration parameter "123456789012345678901234567890123456789012345678901234567890123"  
LOG:  pg_hint_plan:  
used hint:  
SeqScan(123456789012345678901234567890123456789012345678901234567890123)  
MergeJoin(123456789012345678901234567890123456789012345678901234567890123 t2)  
Leading(123456789012345678901234567890123456789012345678901234567890123 t2 t3)  
not used hint:  
duplication hint:  
error hint:  
Set(123456789012345678901234567890123456789012345678901234567890123 1)  
                                             QUERY PLAN                                               
----------------------------------------------------------------------------------------------------  
 Merge Join  
   Merge Cond: ("123456789012345678901234567890123456789012345678901234567890123".id = t3.id)  
   ->  Merge Join  
         Merge Cond: (t2.id = "123456789012345678901234567890123456789012345678901234567890123".id)  
         ->  Index Scan using t2_pkey on t2  
         ->  Sort  
               Sort Key: "123456789012345678901234567890123456789012345678901234567890123".id  
               ->  Seq Scan on t1 "123456789012345678901234567890123456789012345678901234567890123"  
   ->  Sort  
         Sort Key: t3.id  
         ->  Seq Scan on t3  
(11 rows)  
/*+  
Leading(1234567890123456789012345678901234567890123456789012345678901234 t2 t3)  
SeqScan(1234567890123456789012345678901234567890123456789012345678901234)  
MergeJoin(1234567890123456789012345678901234567890123456789012345678901234 t2)  
Set(1234567890123456789012345678901234567890123456789012345678901234 1)  
Set(cursor_tuple_fraction 0.1234567890123456789012345678901234567890123456789012345678901234)  
*/  
EXPLAIN (COSTS false) SELECT * FROM t1 "1234567890123456789012345678901234567890123456789012345678901234" JOIN t2 ON ("1234567890123456789012345678901234567890123456789012345678901234".id = t2.id) JOIN t3 ON (t2.id = t3.id);  
NOTICE:  identifier "1234567890123456789012345678901234567890123456789012345678901234" will be truncated to "123456789012345678901234567890123456789012345678901234567890123"  
NOTICE:  identifier "1234567890123456789012345678901234567890123456789012345678901234" will be truncated to "123456789012345678901234567890123456789012345678901234567890123"  
NOTICE:  identifier "1234567890123456789012345678901234567890123456789012345678901234" will be truncated to "123456789012345678901234567890123456789012345678901234567890123"  
NOTICE:  identifier "1234567890123456789012345678901234567890123456789012345678901234" will be truncated to "123456789012345678901234567890123456789012345678901234567890123"  
NOTICE:  identifier "1234567890123456789012345678901234567890123456789012345678901234" will be truncated to "123456789012345678901234567890123456789012345678901234567890123"  
NOTICE:  identifier "1234567890123456789012345678901234567890123456789012345678901234" will be truncated to "123456789012345678901234567890123456789012345678901234567890123"  
INFO:  unrecognized configuration parameter "123456789012345678901234567890123456789012345678901234567890123"  
LOG:  pg_hint_plan:  
used hint:  
SeqScan(123456789012345678901234567890123456789012345678901234567890123)  
MergeJoin(123456789012345678901234567890123456789012345678901234567890123 t2)  
Leading(123456789012345678901234567890123456789012345678901234567890123 t2 t3)  
Set(cursor_tuple_fraction 0.1234567890123456789012345678901234567890123456789012345678901234)  
not used hint:  
duplication hint:  
error hint:  
Set(123456789012345678901234567890123456789012345678901234567890123 1)  
                                             QUERY PLAN                                               
----------------------------------------------------------------------------------------------------  
 Merge Join  
   Merge Cond: ("123456789012345678901234567890123456789012345678901234567890123".id = t3.id)  
   ->  Merge Join  
         Merge Cond: (t2.id = "123456789012345678901234567890123456789012345678901234567890123".id)  
         ->  Index Scan using t2_pkey on t2  
         ->  Sort  
               Sort Key: "123456789012345678901234567890123456789012345678901234567890123".id  
               ->  Seq Scan on t1 "123456789012345678901234567890123456789012345678901234567890123"  
   ->  Sort  
         Sort Key: t3.id  
         ->  Seq Scan on t3  
(11 rows)  
SET "123456789012345678901234567890123456789012345678901234567890123" TO 1;  
ERROR:  unrecognized configuration parameter "123456789012345678901234567890123456789012345678901234567890123"  
SET "1234567890123456789012345678901234567890123456789012345678901234" TO 1;  
NOTICE:  identifier "1234567890123456789012345678901234567890123456789012345678901234" will be truncated to "123456789012345678901234567890123456789012345678901234567890123"  
ERROR:  unrecognized configuration parameter "123456789012345678901234567890123456789012345678901234567890123"  
SET cursor_tuple_fraction TO 1234567890123456789012345678901234567890123456789012345678901234;  
ERROR:  1.23457e+63 is outside the valid range for parameter "cursor_tuple_fraction" (0 .. 1)  
-- multi error  
/*+ Set(enable_seqscan 100)Set(seq_page_cost on)*/  
EXPLAIN (COSTS false) SELECT * FROM t1, t2 WHERE t1.id = t2.id;  
INFO:  parameter "enable_seqscan" requires a Boolean value  
INFO:  invalid value for parameter "seq_page_cost": "on"  
LOG:  pg_hint_plan:  
used hint:  
not used hint:  
duplication hint:  
error hint:  
Set(enable_seqscan 100)  
Set(seq_page_cost on)  
              QUERY PLAN                
--------------------------------------  
 Merge Join  
   Merge Cond: (t1.id = t2.id)  
   ->  Index Scan using t1_pkey on t1  
   ->  Index Scan using t2_pkey on t2  
(4 rows)  
-- debug log of candidate index to use IndexScan  
EXPLAIN (COSTS false) SELECT * FROM t5 WHERE t5.id = 1;  
                                       QUERY PLAN                                         
----------------------------------------------------------------------------------------  
 Index Scan using t5_idaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa on t5  
   Index Cond: (id = 1)  
(2 rows)  
/*+IndexScan(t5 t5_id2)*/  
EXPLAIN (COSTS false) SELECT * FROM t5 WHERE t5.id = 1;  
LOG:  available indexes for IndexScan(t5): t5_id2  
LOG:  pg_hint_plan:  
used hint:  
IndexScan(t5 t5_id2)  
not used hint:  
duplication hint:  
error hint:  
          QUERY PLAN             
-------------------------------  
 Index Scan using t5_id2 on t5  
   Index Cond: (id = 1)  
(2 rows)  
/*+IndexScan(t5 no_exist)*/  
EXPLAIN (COSTS false) SELECT * FROM t5 WHERE t5.id = 1;  
LOG:  available indexes for IndexScan(t5):  
LOG:  pg_hint_plan:  
used hint:  
IndexScan(t5 no_exist)  
not used hint:  
duplication hint:  
error hint:  
     QUERY PLAN       
--------------------  
 Seq Scan on t5  
   Filter: (id = 1)  
(2 rows)  
/*+IndexScan(t5 t5_id1 t5_id2)*/  
EXPLAIN (COSTS false) SELECT * FROM t5 WHERE t5.id = 1;  
LOG:  available indexes for IndexScan(t5): t5_id2 t5_id1  
LOG:  pg_hint_plan:  
used hint:  
IndexScan(t5 t5_id1 t5_id2)  
not used hint:  
duplication hint:  
error hint:  
          QUERY PLAN             
-------------------------------  
 Index Scan using t5_id2 on t5  
   Index Cond: (id = 1)  
(2 rows)  
/*+IndexScan(t5 no_exist t5_id2)*/  
EXPLAIN (COSTS false) SELECT * FROM t5 WHERE t5.id = 1;  
LOG:  available indexes for IndexScan(t5): t5_id2  
LOG:  pg_hint_plan:  
used hint:  
IndexScan(t5 no_exist t5_id2)  
not used hint:  
duplication hint:  
error hint:  
          QUERY PLAN             
-------------------------------  
 Index Scan using t5_id2 on t5  
   Index Cond: (id = 1)  
(2 rows)  
/*+IndexScan(t5 no_exist5 no_exist2)*/  
EXPLAIN (COSTS false) SELECT * FROM t5 WHERE t5.id = 1;  
LOG:  available indexes for IndexScan(t5):  
LOG:  pg_hint_plan:  
used hint:  
IndexScan(t5 no_exist5 no_exist2)  
not used hint:  
duplication hint:  
error hint:  
     QUERY PLAN       
--------------------  
 Seq Scan on t5  
   Filter: (id = 1)  
(2 rows)  
-- outer inner  
EXPLAIN (COSTS false) SELECT * FROM t1, t2, t3 WHERE t1.id = t2.id AND t2.val = t3.val AND t1.id   Seq Scan on t3  
   ->  Hash  
         ->  Hash Join  
               Hash Cond: (t2.id = t1.id)  
               ->  Seq Scan on t2  
               ->  Hash  
                     ->  Index Scan using t1_pkey on t1  
                           Index Cond: (id   Seq Scan on t3  
   ->  Hash  
         ->  Hash Join  
               Hash Cond: (t2.id = t1.id)  
               ->  Seq Scan on t2  
               ->  Hash  
                     ->  Index Scan using t1_pkey on t1  
                           Index Cond: (id < 10)  
(10 rows)  
/*+Leading((t1 t2))*/  
EXPLAIN (COSTS false) SELECT * FROM t1, t2, t3 WHERE t1.id = t2.id AND t2.val = t3.val AND t1.id < 10;  
LOG:  pg_hint_plan:  
used hint:  
Leading((t1 t2))  
not used hint:  