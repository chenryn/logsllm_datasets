title:Device Fingerprinting with Peripheral Timestamps
author:John V. Monaco
2022 IEEE Symposium on Security and Privacy (SP)
Device Fingerprinting with Peripheral Timestamps
John V. Monaco
Naval Postgraduate School, Monterey, CA
clock (presumably controlled by the attacker) to compare
measurements against. Recent work however has explored
the use of function execution time within a web browser to
obtain a device ﬁngerprint [9]. This method relies instead on
differences in machine performance without the need for a
reference clock.
We introduce a new method to ﬁngerprint devices based on
the timing of peripheral input events, leveraging differences in
the way various hardware and software components process
keyboard, mouse, and touchscreen input. User input must
pass through a chain of processes that sense and deliver the
events to an application, such as a web browser [10]. This
chain typically includes a microcontroller on the peripheral
device, communication protocol between the peripheral and
host, operating system (OS) scheduler, and browser event loop.
Many of these include low-frequency polling that is driven by
an independent clock from system time.
Device ﬁngerprinting is possible due to unique charac-
teristics in the periodic behavior of hardware and software
components responsible for processing peripheral input. This
includes, for example, the timing of USB polls which originate
from the USB host controller operating off of an independent
clock from the host. The USB host controller regularly queries
USB devices for new events. Low-speed polling occurs at
around 125Hz, although depending on the device it could
be slightly faster or slower. In addition, frequency drift and
variations in the period between polls, i.e., timing jitter, are
observed. Besides USB polling, we ﬁnd a number of other
low-frequency processes that exhibit similar characteristics.
We propose a dual clock model that captures this scenario in
which two clocks are compared through a single time source.
In the dual clock model, a reference clock measures the times
at which a relatively slower subject clock ticks. Robust device
ﬁngerprints are formed from the instantaneous phase of the
subject clock, which reﬂects the precise time at which the ticks
occur relative to the reference. The instantaneous phase seems
to be both device and software dependent, largely capturing
the complete hardware+software stack on a device.
2
1
6
3
3
8
9
.
2
2
0
2
.
4
1
2
6
4
P
S
/
9
0
1
1
.
0
1
:
I
O
D
|
E
E
E
I
2
2
0
2
©
0
0
.
1
3
$
/
2
2
/
9
-
6
1
3
1
-
4
5
6
6
-
1
-
8
7
9
|
)
P
S
(
y
c
a
v
i
r
P
d
n
a
y
t
i
r
u
c
e
S
n
o
m
u
i
s
o
p
m
y
S
E
E
E
I
2
2
0
2
Abstract—Sensing and processing peripheral input is a ubiq-
uitous capability of personal computers. Text entry on physical
and virtual keyboards, mouse pointer motion, and touchscreen
gestures are the primary ways in which users interact with
websites viewed on desktop and mobile devices. Peripheral input
events must pass through a pipeline of hardware and software
processes before they reach the web browser. This pipeline
is device-dependent and often contains low-frequency polling
components, such as USB polling and process scheduling, that
inﬂuence event timing within the web page.
We show that a relatively unique device ﬁngerprint is formed
by the timing of peripheral input events. No special permissions
are required to register callbacks to keyboard, mouse, and
touch events from within a web browser, and the technique
works on both desktop and mobile devices. We propose a dual
clock model
in which both a fast reference clock and slow
subject clock are compared through a single time source. With
this model, the instantaneous phase of the subject clock is
measured and used to construct a phase image. The phase image
is then embedded in a low dimensional feature space using
FPNET, a convolutional neural network designed to extract a
device ﬁngerprint from the instantaneous phase. Performance
is evaluated using a dataset containing 300M keyboard events
collected from over 228k devices observed in the wild. After about
two minutes of typing, a device ﬁngerprint is formed that enables
87.35% veriﬁcation accuracy among a population of 100k devices.
Combined with features that measure user behavior in addition
to device behavior, veriﬁcation accuracy increases to 97.36%.
The methods described have potential as a second authentication
factor, but could also be used to track Internet users.
Index Terms—clock skew; triplet network; Internet privacy;
I. INTRODUCTION
Browser ﬁngerprinting is the practice of measuring device-
speciﬁc attributes from within a web browser to perform
stateless tracking of Internet users [1]. A browser ﬁngerprint
may include many different entropy sources ranging from
software properties, such as User-Agent,
installed plugins,
and timezone, to hardware side effects, such as pixel-level
differences in the way images are rendered [2]. Fingerprint-
ing techniques have been extended to mobile device sensors
which have repeatedly been shown to enable device identiﬁ-
cation [3], [4], [5]. As of 2021, at least one quarter of the
top-10k visited websites implement some form of browser
ﬁngerprinting [6].
Time-based device ﬁngerprinting techniques have evolved
alongside browser ﬁngerprinting [7]. Timekeeping differences
among devices may result from manufacturing inconsisten-
cies as well as environmental conditions. Crystal oscillator
circuits are prone to changes in frequency based on ambient
temperature, which, if under an attacker’s control, could enable
targeted alias resolution [8]. This approach of device ﬁnger-
printing based on clock skew generally requires a reference
Our approach consists of using estimates from the dual
to form a phase image from the peripheral
clock model
timestamps. We show that the phase image simultaneously
captures clock frequency, skew, drift, phase, and jitter (i.e.,
changes in instantaneous phase), all of which contribute to
the device ﬁngerprint. Like face images, phase images are not
directly comparable. A convolutional neural network, FPNET,
embeds the images in a low dimensional feature space that
enables device identiﬁcation and veriﬁcation as well as system
proﬁling, for example predicting device model and OS family.
© 2022, John Monaco. Under license to IEEE.
DOI 10.1109/SP46214.2022.00015
1018
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:57:54 UTC from IEEE Xplore.  Restrictions apply. 
Unlike prior work ([7], [8], and [11]), ﬁne grained clock
behavior is captured by our model. The dual clock model
allows clock properties (e.g., skew, drift, phase,
jitter) to
be measured from a single time source as a result of the
various processes that handle peripheral input being driven
by independent timers. Instantaneous phase, rather than skew
in prior work, reveals idiosyncratic device behaviors in the
presence of low-frequency polling. This approach has wide
applicability: it requires only the ability to measure the time
of peripheral input events. This can be performed from within
a web browser using, e.g., the JavaScript Date API, as no
special permissions are required to register callbacks to DOM
events induced by keyboard, touchscreen, and mouse input.
Our method of ﬁngerprinting scales up to many thousands
of devices. We validate the approach using a corpus with over
300M DOM events captured from over 228k Internet users in
the wild. Relatively unique device ﬁngerprints are formed from
300 keystrokes (600 events), which take about two minutes to
capture. With 10k devices, rank-1 identiﬁcation accuracy is
56.2%, and as population size scales up to 100k it drops to
just 29.7%. Combined with features that capture user behavior
from the same timestamps, rank-1 identiﬁcation rates increase
to 84.6% and 63.1% for 10k and 100k devices, respectively.
A near perfect 1000-fold reduction in population size (98.2%
rank-100 accuracy with 100k devices) is achieved.
The main contributions of this paper include:
• The dual clock model, which enables comparison of two
different clocks through a single time source. The model
assumes a high resolution reference clock that reports the
times at which some lower frequency subject clock ticks.
We show that frequency, skew, drift, phase, and jitter can
all be measured within this model.
• The concept of a phase image that captures ﬁne-grained
clock behaviors and enables device ﬁngerprinting. The
phase image is formed by modular residues of the ob-
served timestamps. A method to calculate the modular
residue with minimal precision loss is introduced.
• FPNET, a convolutional neural network that embeds
the phase images in a low dimensional feature space
to extract device ﬁngerprints. The model architecture
is inspired by face recognition systems but designed
speciﬁcally for phase images.
• Device ﬁngerprinting results on a large dataset contain-
ing 228k desktop and mobile devices observed in the
wild. User+device pairing is performed by combining
the device ﬁngerprints with features that capture user
behavior. The device and user ﬁngerprints are shown to
be independent and signiﬁcantly increase identiﬁcation
accuracy when combined.
Section II provides background on processing peripheral input
and related work; Section III deﬁnes the dual clock model;
Section IV examines the presence of periodic behavior in
a large dataset; Section V describes device ﬁngerprinting
methodology; Section VI contains experimental results; Sec-
tions VII and VIII discuss results and conclude, respectively.
Fig. 1. Time quantization of DOM keydown and keyup events measured
in a web browser using the JavaScript Date API. Gray arrows indicate when
the events are sensed by the keyboard; purple arrows indicate times at which
USB polls return event data; green arrows indicate the times reported by
Date.now() inside callbacks registered to the events.
II. BACKGROUND AND RELATED WORK
A. Input event processing
Document object model (DOM) events form the basis
of interactive and dynamic web pages. User input events
(keydown, keyup, mousemove, etc.) typically originate
in a peripheral device attached to the host. In this section,
we review the main components responsible for processing
peripheral input on personal computers, including desktop,
laptop, and mobile devices. These include:
the peripheral
itself (e.g., keyboard) that polls a sensor for physical changes;
the communication protocol between the peripheral and the
host; the OS scheduler; and the browser event loop. Each
component introduces a delay to the event and in many cases
exhibits periodic behavior driven by some independent clock
running at a lower frequency than the browser timestamps.
This effectively quantizes the event timestamps as measured
in the web browser. This model is shown in Figure 1.
1) Sensor polling: A keydown event begins with the
user physically closing a circuit on the keyboard. Circuits
are arranged in a crossbar switch called a matrix, and the
keyboard microcontroller periodically scans the matrix by
pulsing each column. Matrix scanning occurs at 100-200Hz
on most keyboards [12]. When a closed circuit is detected,
key debouncing is applied which consists of a short timeout
(~5ms) to avoid spurious keystrokes as the switch contacts
bounce open and closed [13]. Both debouncing and matrix
scanning limit the rate at which keyboard events can occur.
Text entry on touchscreen devices, despite implementing
the keyboard in software rather than hardware, also perform
polling to detect keydown and keyup events. The touch
sampling rate is the rate at which the touchscreen can sense
touch events. This is not to be confused with the screen refresh
rate, which may be different than the touch sampling rate. The
latter ranges from 60Hz to 240Hz on newer devices [14].
2) USB and PS/2: The Universal Serial Bus (USB) standard
is the most widely used protocol to connect a human input de-
vice (HID), such as mouse or keyboard, to a host [15]. The vast
majority of USB keyboards and mice are low-speed devices
(USB 1.1) and communicate via interrupt transfers [16]. The
USB host controller regularly polls the HID for new events.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:57:54 UTC from IEEE Xplore.  Restrictions apply. 
1019
USB pollingKeyboard circuit closes               opensDOM keydownDate.now()DOM keyupSubjectclock tickReferenceclock tick˙t1˙t2t1St2St1Rt2RWhen a poll is received, the device will either respond with a
report containing new events or send a NAK packet indicating
nothing to report. Note that because the USB host controller