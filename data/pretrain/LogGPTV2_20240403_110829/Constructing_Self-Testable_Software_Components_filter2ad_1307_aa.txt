# Constructing Self-Testable Software Components

**Authors:**
- Eliane Martins
- Cristina Maria Toyota
- Rosileny Lie Yanagawa

**Affiliation:**
State University of Campinas (Unicamp)
Institute of Computing (IC)
Campinas - SP - Brazil

## Abstract
Component-based software engineering techniques are gaining substantial interest due to their potential to improve productivity and lower development costs of new software applications, while still meeting high reliability requirements. A key step in addressing these high reliability requirements is the reuse of reliable components. For a component to be considered "reliable," it must undergo extensive validation, with testing being the most commonly used validation technique. To ensure that reusable components are well-tested, they must be testable. This paper presents an approach to enhance component testability by integrating testing resources into the component, thereby creating a self-testable component. A prototyping tool, named Concat, was developed to support this approach. The tool is designed for object-oriented (OO) components implemented in C++. Preliminary results from an empirical evaluation of the fault detection effectiveness of the proposed testing approach are also discussed.

**Keywords:** Component testability, design for testability, self-testable component, OO testing

## 1. Introduction
Software components are increasingly popular in the development of new applications, primarily because they can reduce development time and cost by leveraging third-party or commercially available components (COTS). To ensure successful reuse, components must be reliable. One way to guarantee this quality is through extensive validation, with testing being the most common validation technique. Reusable components should be well-tested, as pointed out by various authors [9, 41]. A reusable component should be tested multiple times: by its producers during development or maintenance, and by its consumers every time it is reused. Therefore, testing should not reduce productivity in component-based development. The use of testable components is one means to achieve a well-tested software system while maintaining high reliability.

## 2. Background
This section provides an overview of the concepts and terminology used throughout the paper, concluding with a brief description of a self-testable component.

### 2.1. Components
There are various definitions of software components in the literature. We will use the definition provided by C. Szyperski [32, ch4. I SI]: "A software component is a unit of composition with contractually specified interfaces and explicit context dependencies. It can be deployed independently and is subject to composition by third parties."

In the object-oriented (OO) context, which is our focus, the basic reusable unit is a class. A class can be reused in different ways: by inheritance (as is the case with abstract classes), by parameterization (as is the case with generic or template classes), or by composition (an attribute is declared as a class). Regardless of the reuse mechanism, adequate testing by both producers and consumers is essential for successful reuse.

### 2.2. Software Testing Objectives and Activities
Software testing involves executing code with preselected inputs to reveal faults. A software fault (or bug) is introduced due to errors committed by developers during the development process. Executing faulty software can lead to failures, where the delivered services no longer comply with the specification. When performing testing, the following issues should be considered:

- **Testing Level:** Software systems should go through at least three testing levels: (i) unit testing, where individual components are tested in isolation; (ii) integration testing, where subsystems formed by integrating individually tested components are tested as an entity; and (iii) system testing, where the entire system composed of already tested subsystems is tested. Our focus is on unit testing of components, as this is the first step a user should take before using a component in an application.
- **Test Criteria:** Test input selection is generally guided by criteria derived from an abstract representation of the software (test model). These criteria define the elements of the test model that should be covered by the tests. Commonly used criteria are based on either the implementation or the specification of the software system. Implementation-based (or white-box) testing techniques involve criteria such as covering all nodes of a control flow graph. Specification-based (or black-box) testing techniques involve criteria such as all transitions coverage on a finite state machine. In this study, we use specification-based testing to allow a component’s consumer to test whether the required features are met.
- **Test Case Design:** A test case consists of test inputs and the expected outputs. Test inputs may be obtained according to the testing criteria. The mechanism to produce the expected outputs is the oracle. Various approaches exist for oracle development (see [6, c18] for a survey). In this study, the oracle is based on the component’s contract. Contracts specify what the consumer should do to use a component and what the producer should implement to provide the required services. The design-by-contract method [25, 26] is commonly used to specify contracts in the form of assertions. Assertions can be associated with methods (pre and post conditions) and classes (class invariant). Assertions are used in this study as a partial oracle.
- **Test Support:** It may be necessary to define support for test execution, including test drivers and test stubs. A test driver activates the component under test, providing inputs and other necessary information. A stub is a partial, temporary implementation of a component whose services are used by the component under test. Using a formal specification model can be useful for the automatic construction of drivers and stubs. In this study, we use the component specification to derive test drivers.

### 2.3. Components Testability
According to IEEE std. 610.12 [23], testability can be defined as: "(i) the degree to which a system or component facilitates the establishment of test criteria and the performance of tests to determine whether those criteria have been met. (ii) the degree to which a requirement is stated in terms that permit the establishment of test criteria and the performance of tests to determine whether those criteria have been met." This definition focuses on the ease of establishing test criteria and meeting them, and can be seen as a measure of how hard it is to satisfy a particular testing criterion.

Another definition of testability views it in terms of the ease with which faults are revealed during testing, i.e., the capacity of a system to fail during testing, indicating the presence of faults [36]. Thus, testability can be seen as a measure of the likelihood that a system hides faults during testing.

As noted by various authors [8, 18, 19, 28], a testable software might possess attributes such as observability, controllability, and understandability. Embedding a component's specification and other facilities for monitoring and testing can improve its testability. This is especially true for OO software, where encapsulation and information hiding reduce observability and controllability. Some studies have proposed the use of built-in test capabilities to create self-testable components.

### 2.4. Self-Testable Components
Design for testability (DFT) techniques have been used by integrated circuit (IC) engineers to reduce test costs and effort while achieving the required quality level. DFT techniques involve adding extra pins to an IC to allow access to internal circuit points, enabling the generation of test patterns. Similarly, embedding testing resources within a software component can create a self-testable component. This approach is particularly useful for OO software, where encapsulation and information hiding can make testing more challenging.

## 3. Proposed Approach
In this section, we present an approach for the construction and use of self-testable components. A self-testable component contains, in addition to its implementation, a specification from which test cases can be derived. Our focus in this study is on components that are unique classes. A prototyping tool, named Concat [33], was developed to support some activities of the proposed approach and to demonstrate its feasibility. Concat supports the construction and use of self-testable components implemented with the C++ language.

The text is organized as follows:
- **Section 3** describes the proposed approach.
- **Section 4** presents preliminary results obtained from an empirical evaluation to assess the effectiveness of the test selection technique used.
- **Section 5** compares our approach to related work.
- **Section 6** concludes the text and outlines future work.

## 4. Preliminary Results
Preliminary results from an empirical evaluation of the fault detection effectiveness of the proposed testing approach are discussed in this section.

## 5. Comparison with Related Work
This section compares our approach to some related work in the field.

## 6. Conclusion and Future Work
This section concludes the text and presents some directions for future work.

---

This revised version aims to provide a clear, coherent, and professional presentation of the content.