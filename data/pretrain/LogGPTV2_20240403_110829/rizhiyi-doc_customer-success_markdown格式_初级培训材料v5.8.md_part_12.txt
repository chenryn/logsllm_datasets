串的值
该函数接受一个字符串 以下示例返回" bcd ef"
类型的参数，返回X前 … | eval strv = trim(" bcd ef \t")
trim(X)
后去除空白符的字符串
值
函数接收一个字符串类 以下示例返回GET
upper(X) 型的参数，返回X的大 … | eval strv = upper("Get")
写形式
122
日志学院
该函数对X对应UTC时 以下示例将返回timestamp所表示的时间的小时和
间值格式化为Y具体的 分钟
时间格式 … | eval v = formatdate(timestamp, "HH:mm")
Y的时间格式字符串遵
循
formatdate(X[, Y]) java.text.SimpleDateFor
mat支持的格式，如果
不指定Y，则默认的时
间格式为"yyyy-MM-dd
HH:mm:ss.SSS"，
暂不支持时区的自定义
解析日期时间串为unix 示例：
时间戳 parsedate("28/04/2016:12:01:01""dd/MM/yyyy:HH:m
X为日期的字符串，Y为 m:ss")
日期的格式说明，遵循 parsedate("28/四月/2016", "dd/MMM/yyyy", "zh")
parsedate(X, Y[, Z]) java.text 其中zh表示中文的Locale
.SimpleDateFormat支持
的时间格式，Z为可选
参数，指定Locale，默
认为en（english）
格式化字符串, 提供类 示例：
似printf的功能 format("%.1fMB", rate)
FORMAT，为printf函数 输出速率，rate保留小数点后一位
format(FORMAT, 的format字符串 format("%s => %s", "aa", "bb")
[X...]) 输入"aa => bb"
NOTE:
变量类型和format中%x需要对应正确，否则可能导
致计算失败，而输出空值
函数用于表示当前时 示例: …|eval current_time = now()
间，实际值为搜索请求
收到的时间，在一个请
求中多次调用返回的是
now()
同一个值，值为1970-
01-01:00:00:00到当前时
间的毫秒数，类型为
long
获取字段X的类型 示例：… | eval a_type = typeof(apache.method)
typeof(X)
123
日志学院
支持类型为: long,
double, int, float, short,
string, object, array
如果字段为null，则返
回null
判断字段X是否为数值 示例： … | eval a = isnum(apache.status)
类型，
isnum(X) 对于整数类型或者浮点
型结果都会返回true，
其它返回false
判断字段X是否为字符 示例: …| eval a = isstr(apache.method)
isstr(X)
串类型
字段X必须是时间类 示例：… | eval ts = relative_time(timestamp, "-1d/d")
型，字段Y必须为一个 返回得到timestamp所代表的时间减去1天的毫秒
date math(请参考时间 数，并圆整到0点，即timestamp表示的日期的前
relative_time(X, Y) 格式一节)的相对时间 一天的零点。
值，返回基于时间戳X
的date math的计算结
果
字段X必须是无分类和 示例：…| eval matched =
子网地址扩展(CIDR)， cidrmatch("192.168.1.130/25", "192.168.1.129")'
字段Y为一个IP地址， 将192.168.1.130转换为二进制并保留高位的25
判断IP地址Y的子网地 位，低位设为0得到下限（不包括），对应的ip为
址是否和X匹配 192.168.1.128
cidrmatch(X, Y) 将192.168.1.130转换为二进制保留高位的25位，
低位全部设置为1得到上限（不包括），对应的ip
地址为192.168.1.255
因此ip的范围是(192.168.1.128, 192.168.1.255)
凡落在此范围的ip地址均match成功，因此
matched的值为true
对字段X的值执行URL 示例: … | eval url = urldecode(url)
解码，字段X必须为字
urldecode(X) 符串
NOTE: 目前还不支持指
定字符编码
该函数为任意个参数， ... | eval v=mvappend(initv, "middle")
mvappend(X,...)
参数可以为字符串，多
124
日志学院
值字段，或者单值字段
等
该函数只有一个参数 ... | eval c=mvcount(mvfield)
X，如果X是多值字段，
mvcount(X) 则返回多值字段的值个
数，如果是单值字段，
则返回1，其他返回0
该函数接收一个多值参 ... | eval v=mvdedup(mvfield)
mvdedup(X) 数X，返回字段值消重
后的多值类型
X为类型为多值的参 对mv多值字段进行过滤，仅保留1a的值
mvfilter(X, 数，filterexpr为过滤条 mvfilter(mv, _x == "1a")
filterexpr) 件表达式，其中使用_x
描述X中的单个值
X为多值类型的参数，V ... | eval n=mvfind(mymvfield, "err")
表示需要查找的值，如
mvfind(X,V)
果找到返回对应下表，
否则返回-1
X为多值类型的参数， ... | eval v = mvindex(mv, 10, -1)
如果无end参数，则返
回下表为start的元素，
如果start不合法则返回
null，否则返回从下标
mvindex(X,start[,
start到下标end（不包
end])
括）元素组成列表，如
果下表范围不合法返回
空数组，
NOTE: 数组下表从0开
始
将多值字段X的值使用 eval v = mvjoin(mv, ", ")
mvjoin(X,DELIMITE
分隔符DELEMITER组成
R)
一个字符串
X为多值类型，mapexpr X = ["1", "3", "4"]
为转换的表达式，使用 … | eval x = mvmap(X, tolong(_x) + 2)
mvmap(X,mapexpr
_x表示X中的单个值， 则x = [3, 5, 6]
)
返回的多值类型为X中
的每个元素使用
125
日志学院
mapexpr转换得到的值
组成的多值类型
该函数使用一个数值的 下例返回 1, 3, 5, 7.
区间生成一个多值字 ... | eval mv=mvrange(1,8,2)
段，其中X表示区间起
mvrange(X,Y[,Z])
始值，Y表示区间结束
值（不包括），Z表示
步跳数，默认为1
mvsort(X) 对多值字段进行排序 ... | eval s=mvsort(mv)
X和Y都为多值类型， X = [1, 3, 4, 7]
将X中的第一个元素和 Y = [2, 5, 8]
Y中的第一个元素都转 mvzip(X, Y) = ["1,2", "3,5", "4,8"]
换为字符串，并以Z为
分隔符进行拼接，得到
返回结果多值结果的第
一个元素，类型为字符
mvszip(X,Y[,"Z"]) 串，然后按照同样方法
对X的第二个元素和Y
中的第二个元素进行拼
接，以此类推得到一个
多值的结果。如果X和
Y的长度不等，则当X
或者Y处理完最后一个
元素后不再进行拼接。
X为字符串类型，使用 如X = ":abc::edf: "
字符串SEP分割符对S 则split(X, ":") = ["", "abc", "", "edf", " "]
进行拆分成多值类型，
split(S, SEP)
如果SEP为空字符串，
则S将被拆分为单字组
成的多值类型
案例4：只留下需要的数据
为了找到网站性能瓶颈，您一定会关注很多关键指标，如：一段时间内访问状态对比，流
量趋势、请求平均时间等。我们看一下如何求平均请求时间？以及快速找到大于平均时间
的访问记录都有哪些？
126
日志学院
SPL：stats avg求平均值
appname:nginx AND nginx.request_time:*
| eval new_request_time=todouble(nginx.request_time)
| stats avg(new_request_time)
结果如图：
SPL 说明：
l 您可能发现上面例子中我们使用了todouble 命令首先对nginx.request_time字段进行
了数据类型转换，实际上默认该字段为字符型。该问题可以通过解析过程中解决，具
体方法不再在本文中阐述。Stats 命令我们使用了avg 函数求出一段时间内的平均请
求时间。
SPL：where 过滤项
appname:nginx AND nginx.request_time:*
| eval new_request_time=todouble(nginx.request_time)
| where new_request_time > 0.005
结果如图：
127
日志学院
SPL说明：
l 通过7.2.2得出平均请求时间在0.005，那么通过where 命后您就会看到当前将请求时
间大于0.005所有事件。Where后支持的函数与表达式可以参考eval参数表。那么是
否可以直接将已经提取字段生成二维表关系表呢？在二维表以后如何进行过滤呢？
SPL：table 大道至简一切皆表格
appname:nginx AND nginx.request_time:*
| eval new_request_time=todouble(nginx.request_time)
| table nginx.client_ip.geo.ip, nginx.client_ip.geo.isp, nginx.client_ip.geo.province,
new_request_time, nginx.method,nginx.status
结果如图：
128
日志学院
SPL说明：
l 通过7.2.3实例效果可以看到很多字段与值。通过本例中增加table命令可以直接将所
有事件中需要的字段信息生成二维表。
如果当前我们想对结果的二维表进行过滤可以通过两种方式处理。如：只想查看客户端IP
来自北京地区相关数据。可以使用：
appname:nginx AND nginx.request_time:*
| eval new_request_time=todouble(nginx.request_time)
| table nginx.client_ip.geo.ip, nginx.client_ip.geo.isp, nginx.client_ip.geo.province,
new_request_time, nginx.method,nginx.status
| where nginx.client_ip.geo.province=="北京"
另外一种效率比较高的办法: