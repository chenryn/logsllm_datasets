
Fig. 9. Comparison of CRYLOGGER with 10k, 30k and 50k random stimuli on 150 Android apps. Each graph is an upset plot [53], [54]. The horizontal
bars indicate the number of apps ﬂagged as vulnerable by CRYLOGGER with 10k, 30k and 50k stimuli; the vertical bars indicate the number of apps ﬂagged
as vulnerable by a possible intersection of the approaches (the 3 largest, non-empty intersections are reported). For example, for R-08: 20 apps are considered
vulnerable by all the approaches, 4 apps are ﬂagged as vulnerable by using 30k and 50k stimuli only, and 1 app is considered vulnerable by using 50k stimuli only.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:27:57 UTC from IEEE Xplore.  Restrictions apply. 
1987
Listing 1. Basic
1 public class Test_X {
2
3
4
5
6 }
}
public static void main(String[] args) {
String algorithm = "AES/ECB/PKCS5PADDING";
Cipher c = Cipher.getInstance(algorithm);
public static void main(String[] args) {
String algorithm = "AES/ECB/PKCS5PADDING";
method1(algorithm);
}
public static void method1(String algorithm) {
}
public static void method2(String algorithm) {
Cipher c = Cipher.getInstance(algorithm);
Listing 3. Interprocedural
1 public class Test_X {
2
3
4
5
6
7
8
9
10
11
12 }
method2(algorithm);
}
algorithm = alg;
Listing 5. Field Sensitive
1 public class Test_X {
2
3
4
5
6
7
8
9
10
11
12
13
14 }
}
String algorithm;
public Test_X(String alg) {
}
public method(String alg) {
alg = algorithm;
Cipher c = Cipher.getInstance(alg);
}
public static void main(String[] args) {
Test_X x = new Test_X("AES/ECB/PKCS5PADDING");
x.method("AES/CBC/PKCS5PADDING");
Listing 2. Miscellaneous
1 public class Test_X {
2
3
4
5
6
7
8 }
}
public static void main(String[] args) {
String alg = "AES/ECB/PKCS5PADDING";
// Use of a simple data structure
DataStructure data = new DataStructure(alg);
Cipher c = Cipher.getInstance(data.get());
public static void main(String[] args) {
String alg = "AES/ECB/PKCS5PADDING";
// Conversion to another type
Othertype type = ConvertOtherType(alg);
Cipher c = Cipher.getInstance(data.get());
1 public class Test_X {
2
3
4
5
6
7
8 }
}
Listing 4. Path Sensitive
1 public class Test_X {
2
3
4
5
6
7
8
9 }
}
public static void main(String[] args) {
int choice = 2;
String algorithm = "AES/ECB/PKCS5PADDING";
if (choice > 1)
algorithm = "AES/CBC/PKCS5PADDING";
Cipher c = Cipher.getInstance(algorithm);
public static void main(String[] args) {
method1("AES/ECB/PKCS5PADDING");
}
public static void method1(String algorithm) {
Listing 6. Multiple Classes
1 public class Test_X {
2
3
4
5
6
7
8
9 }
10 public class Test_X {
11
12
13
14 }
}
}
Test_Y y = new Test_Y();
y.method(algorithm);
public static void main(String[] args) {
Listing 7. Argument Sensitive
1 public class Test_X {
2
3
4
5
6
7
8 }
if (condition(args)) {
}
}
algorithm = "AES/CBC/PKCS5PADDING";
Cipher c = Cipher.getInstance(algorithm);
public void method2(String algorithm) {
Cipher c = Cipher.getInstance(algorithm);
Fig. 10. The types of benchmarks that are present in the CryptoAPI-Bench [26]. We highlighted our modiﬁcations to make the benchmarks executable (Section VIII).
The ﬁrst 6 types of benchmarks (basic, miscellaneous, interprocedural, path sensitive, ﬁeld sensitive, multiple classes) were originally proposed in [26]. We added
argument-sensitive tests so that the CryptoAPI-Bench can be used to evaluate dynamic approaches.
1 package com.google.api.client.testing.http;
2 class HttpTesting {
3
4
5
6
static String SIMPLE_URL = "http://google.com"
public HttpTesting() {
GenericUrl url = new GenericUrl(SIMPLE_URL);
} ...
1 package com.adjust.sdk;
2 class AdjustFactory {
3
4
5
6
public static void useTestConnectionOptions() {
con.setHostnameVerifier(new HostnameVerifier() {
public boolean verify(String h, SSLSession s)
{ return true; } ...
Fig. 11. Examples of false positives for rules R-22 and R-24 for CryptoGuard [6].
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:27:57 UTC from IEEE Xplore.  Restrictions apply. 
1988
(a) Original CryptoAPI-Bench [26]
(b) Modiﬁed CryptoAPI-Bench
(c) New Tests
CryptoGuard [6]
CRYLOGGER
Rule ID TP TN FP FN TP TN FN
CryptoGuard [6]
CRYLOGGER
Rule ID TP TN FP FN TP TN FN
CRYLOGGER
Rule ID TP TN FN
R-01
R-02
R-03
R-05
R-07
R-10
R-13
R-16
R-17
R-18
R-19
R-22
R-23
R-24
R-25
R-26
Total
24 1
30 1
1
6
2
5
1
8
7
1
1
5
7
2
13 1
1
1
4
0
2
6
2
7
1
1
3
0
4
0
131 17
4
0
5
0
1
0
1
2
1
0
1
0
1
2
1
1
2
1
0
0
1
1
1
0
1
0
0
0
0
0
0
0
20 7
24 5
0
30 6
0
2
6
0
3
7
0
2
8
0
7
2
0
2
7
0
8
3
0
14 3
0
1
1
0
5
1
0
3
6
0
3
7
0
1
1
0
0
3
0
4
0
0
138 37 0
R-01
R-02
R-03
R-05
R-07
R-10
R-13
R-16
R-17
R-18
R-19
R-22
R-23
R-24
R-25
R-26
Total
4
5
5
1
1
1
1
1
2
0
1
1
1
0
0
0
28 1
0
35 1
0
7
1
0
6
2
2
9
1
0
8
1
0
6
1
2
8
2
1
14 1
1
1
1
0
5
0
1
7
2
0
8
2
0
1
1
0
0
3
0
4
0
0
150 17 24 7
4
24 5
5
30 6
6
1
6
1
3
7
1
2
8
1
7
2
1
2
7
1
8
3
1
14 3
1
1
0
1
5
1
1
3
6
1
3
7
1
1
0
0
3
0
4
0
0
138 41 19
R-04
R-06
R-08
R-09
R-11
R-12
R-14
R-15
R-20
R-21
Total
4
6
6
6
7
1
7
7
5
5
54
2
2
2
2
2
1
2
2
1
1
17
1
1
1
1
1
1
1
1
1
1
10
Fig. 12. Results for the CryptoAPI-Bench [26]. (a) Comparison of CryptoGuard [6] and CRYLOGGER on the original CryptoAPI-Bench. In this case, we made the
benchmarks executable with a dynamic tool by adding a main to all benchmarks. (b) Comparison of CryptoGuard and CRYLOGGER on our modiﬁed version of
the CryptoAPI-Bench. We added tests cases to (i) highlight the problem of false positives (Section IX) and (ii) show the limitations of dynamic approaches in
activating paths that are rarely executed. (c) Benchmarks that we added for the rules supported only by CRYLOGGER on the modiﬁed CryptoAPI-Bench.
Authorized licensed use limited to: Tsinghua University. Downloaded on February 25,2022 at 12:27:57 UTC from IEEE Xplore.  Restrictions apply. 
1989