# 三、AKS 上的应用部署
在本章中，您将在**Azure Kubernetes Service**(**AKS**)上部署两个应用。一个应用由多个部分组成，您将一步一步地构建应用，同时解释它们背后的概念模型。您将能够轻松地调整本章中的步骤，以便在 AKS 上部署任何其他应用。
要部署应用并对其进行更改，您将使用 **YAML** 文件。YAML 是**的递归首字母缩略词，而不是标注语言**。YAML 是一种用于创建配置文件以部署到 Kubernetes 的语言。尽管可以使用 JSON 或 YAML 文件将应用部署到 Kubernetes，但 YAML 是最常用的语言。YAML 之所以受欢迎，是因为与 JSON 或 XML 相比，人类更容易阅读。在这一章和整本书里，你会看到许多 YAML 文件的例子。
在示例留言簿应用的部署过程中，您将看到 Kubernetes 概念的实际应用。您将看到**部署**如何与**副本集**相关联，以及如何与部署的**Pod **相关联。部署是 Kubernetes 中的一个对象，用于定义应用的所需状态。一个**部署**将创建一个复制集。A **复制器 Set** 是 Kubernetes 中的一个对象，保证一定数量的**PODS**始终可用。因此，复制集将创建一个或多个 PODS。pod 是 Kubernetes 中的一个对象，它是一组一个或多个容器。让我们重新审视部署、复制集和单元之间的关系:
![Relationship showing that a deployment creates a replicaset, which in turn creates multiple pods](img/B17338_01_06.jpg)
图 3.1:部署、复制集和单元之间的关系
部署示例应用时，您将使用**服务**对象连接到应用。Kubernetes 中的服务是一个用于向应用提供静态 IP 地址和 DNS 名称的对象。由于 pod 可以被终止并移动到集群中的不同节点，因此服务可以确保您可以连接到应用的静态端点。
您还将使用**配置图**编辑示例应用以提供配置详细信息。配置映射是一个对象，用于向 pods 提供配置详细信息。它允许您将配置设置保留在实际容器之外。然后，您可以通过将配置映射连接到部署，将这些配置详细信息提供给应用。
最后，你将被介绍给 Helm。Helm 是 Kubernetes 的包管理器，有助于简化部署过程。您将使用 Helm 部署一个 WordPress 站点，并了解 Helm 给 Kubernetes 带来的价值。这个 WordPress 安装利用了 Kubernetes 中的持久存储，您将了解到 AKS 中的持久存储是如何设置的。
本章将涵盖以下主题:
*   逐步部署留言簿示例应用
*   完整部署留言簿示例应用
*   使用 Helm 安装复杂的 Kubernetes 应用
我们将从留言簿应用示例开始。
## 逐步部署样例留言簿应用
在本章中，您将部署经典的留言簿示例 Kubernetes 应用。您将主要按照[https://kubernetes . io/docs/教程/无状态-应用/留言簿/](https://kubernetes.io/docs/tutorials/stateless-application/guestbook/) 中的步骤进行一些修改。您将使用这些修改来显示原始示例中没有的其他概念，例如配置映射。
留言簿示例应用是一个简单的多层 web 应用。该应用中的不同层将有多个实例。这对高可用性和可扩展性都是有益的。留言簿的前端是一个无状态应用，因为前端不存储任何状态。后端的 Redis 集群是有状态的，因为它存储了所有的留言簿条目。
在下一章中，您将使用该应用作为独立测试后端和前端扩展的基础。
在开始之前，让我们考虑一下将要部署的应用。
### 介绍应用
该应用存储并显示留言簿条目。例如，你可以用它来记录所有参观你的酒店或餐馆的人的意见。
*图 3.2* 向您展示了应用的高级概述。应用使用 PHP 作为前端。前端将使用多个副本进行部署。该应用使用 Redis 进行数据存储。Redis 是内存中的键值数据库。Redis 最常用作缓存。
![Architecture of the multi-tier guestbook application](img/B17338_03_02.jpg)
图 3.2:留言簿应用的高级概述
我们将通过部署 Redis 主服务器来开始部署这个应用。
### 部署 Redis 主机
在本节中，您将部署 Redis 主服务器。您将了解此部署所需的 YAML 语法。在下一节中，您将对这个 YAML 进行更改。在进行更改之前，让我们从部署 Redis 主服务器开始。
执行以下步骤来完成任务:
1.  Open your friendly Azure Cloud Shell, as highlighted in *Figure 3.3*:
    ![Opening Cloud Shell from the Azure portal](img/B17338_03_03.jpg)
    图 3.3:打开云外壳
2.  If you have not cloned the GitHub repository for this book, please do so now by using the following command:
    git 克隆 https://github . com/PacktPublishing/动手-Kubernetes-on-Azure-第三版/
3.  Change into the directory for Chapter 3 using the following command:
    cd 动手-Kubernetes-On-Azure/chapter 03/
4.  Enter the following command to deploy the master:
    立方结构套用-f redis 主要建置。yaml
    应用下载并开始运行需要一些时间。在您等待的同时，让我们理解您刚刚键入并执行的命令。让我们从探索所使用的 YAML 文件的内容开始(行号用于解释代码片段中的关键元素):
    1 API 版本:apps/v1
    2 种:部署
    3 元数据:
    4 名称:redis master
    5 个标签:
    6 应用:重定向
    7 规格:
    8 选择器:
    9 个匹配标签:
    10 个应用:redis
    11 角色:主人
    12 层:后端
    13 个副本:1 个
    14 模板:
    15 元数据:
    16 个标签:
    17 应用:redis
    18 角色:大师
    19 层:后端
    20 规格:
    21 个容器:
    22 -姓名:主人
    23 图片:k8s gcr . io/redis:e2e
    24 资源:
    25 项请求:
    26 个 CPU:100 米
    27 内存:100 兆
    28 个限制:
    29 个 CPU:250 公尺
    30 内存:1024Mi
    31 个端口:
    32 -容器港口:6379
    让我们逐行深入代码，了解所提供的参数:
    *   **第 2 行**:表示我们正在创建一个部署。正如在*第 1 章，容器和 Kubernetes*的介绍中所解释的，一个部署是一个围绕容器的包装器，使得更新和扩展容器变得容易。
    *   **第 4-6 行**:这里**部署**起了个名字，就是**再版主**。
    *   **第 7-12 行**:这些行让我们指定这个部署将要管理的容器。在本例中，部署将选择并管理标签匹配的所有容器(**应用:redis，角色:master，层:后端**)。前面的标签与第 *14-19* 行提供的标签完全匹配。
    *   **第 13 行**:这一行告诉 Kubernetes，我们正好需要一个正在运行的 Redis 主文件的副本。这是 Kubernetes 声明性质的一个关键方面。您提供了您的应用需要运行的容器的描述(在这种情况下，只有一个 Redis 主容器的副本)，Kubernetes 负责处理它。
    *   **第 14-19 行**:这些行给运行的实例添加标签，这样它就可以被分组并连接到其他 Pod 。我们将在后面讨论它们，看看它们是如何使用的。
    *   **第 22 行**:这一行给舱内的单个容器起了一个名字，就是**大师**。在多容器容器的情况下，容器中的每个容器都需要唯一的名称。
    *   **第 23 行**:该行表示将要运行的容器映像。在这种情况下，是标记有 **e2e** 的 **redis** 映像(成功通过端到端[ **e2e** ]测试的最新 redis 映像)。
    *   **第 24-30 行**:这些行设置了为容器请求的**CPU/内存**资源。Kubernetes 中的请求是对不能被其他 pods 使用的资源的保留。如果这些资源在集群中不可用，pod 将不会启动。在这种情况下，请求是 0.1 CPU，等于 **100m** ，也常被称为 100 毫核。请求的内存为**100 兆字节**，即 104，857，600 字节，等于~105 兆字节。CPU 和内存限制的设置方式类似。限制是容器可以使用的上限。如果你的 Pod 达到了中央处理器的限制，它将被节流，而如果它达到了内存的限制，它将被重启。设置请求和限制是 Kubernetes 的最佳实践。更多信息请参考[https://kubernetes . io/docs/concepts/configuration/manage-compute-resources-container/](https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/)。
    *   **第 31-32 行**:这两行表示容器将在港口 **6379** 停靠。
如您所见，部署的 YAML 定义包含几个设置和参数，Kubernetes 将使用它们来部署和配置您的应用。
#### 注意
Kubernetes YAML 的定义类似于给 Docker 的运行特定容器映像的参数。如果必须手动运行，可以用以下方式定义该示例:
**#运行一个名为 master 的容器，在端口 6379 监听，使用 redis:e2e 镜像，有 1 亿内存和 1 亿 CPU。**
**Docker 运行名称主-p 6379:6379-m 100M-c 100M-d k8s.gcr.io/redis:e2e**
在本节中，您已经部署了 Redis master，并了解了用于创建此部署的 YAML 文件的语法。在下一节中，您将检查部署并了解所创建的不同元素。
### 检查部署
**再主控**部署现在应该完成了。在上一节中打开的 Azure Cloud Shell 中继续，并键入以下内容:
kubectl get all
您应该会得到类似于*图 3.4* 中显示的输出。在您的例子中，pod 和 ReplicaSet 的名称可能在名称的末尾包含不同的标识。如果您没有看到 pod、部署和复制集，请再次运行上一节步骤 4 中解释的代码。
![A list of objects that were created by your deployment](img/B17338_03_04.jpg)
图 3.4:由您的部署创建的对象
您可以看到，您创建了一个名为 **redis-master** 的部署。它控制着一个名为**的复制器。进一步检查，你还会发现复制器正在控制一个 Pod ，**redis-master-f46ff 57 FD-b8cjp**。*图 3.1* 用图形表示了这种关系。**
通过执行**kube CTL description ** 命令可以获得更多细节，如下所示:
忽必烈描述了部署/重定向主体
这将生成如下输出:
![Using the kubectl describe command to fetch the details of the deployment](img/B17338_03_05.jpg)
图 3.5:部署描述
现在，您已经使用默认配置启动了一个 Redis 主服务器。通常，您会使用特定于环境的配置启动应用。
在下一节中，您将熟悉一个名为 ConfigMaps 的新概念，然后重新创建 Redis 主服务器。因此，在继续之前，请清理当前版本，这可以通过运行以下命令来完成:
立方结构删除建置/重新导向主要项目
执行此命令将产生以下输出:
deployment.apps "redis-master "已删除
在本节中，您检查了您创建的 Redis 主部署。您看到了部署与复制集之间的关系，以及复制集与 Pod 之间的关系。在下一节中，您将使用通过配置映射提供的特定于环境的配置来重新创建这个 Redis 主服务器。
### 用构型图重定向大师
之前的部署没有任何问题。在实际的用例中，很少会在没有一些配置设置的情况下启动应用。在这种情况下，您将使用配置图为**重新设置配置设置。**
配置图是一种配置容器的可移植方式，无需为每个环境提供专门的映像。对于需要在容器上设置的数据，它有一个键值对。配置映射用于非敏感配置。Kubernetes 有一个单独的对象叫做**机密**。机密用于包含密码等关键数据的配置。这将在本书*第 10 章【将机密存储在 AKS* 中】中详细探讨。
在本例中，您将创建一个配置映射。在此配置图中，您将配置 **redis-config** 作为键，值为以下两行:
最大内存 2mb
maxmemory-policy allkeys-lru
现在，让我们创建这个配置映射。有两种方法可以创建配置映射:
*   从文件创建配置映射
*   从 YAML 文件创建配置映射
在接下来的两节中，您将探索这两者。
### 从文件创建配置映射
以下步骤将帮助我们从文件创建配置映射:
1.  Open the Azure Cloud Shell code editor by typing **code redis-config** in the terminal. Copy and paste the following two lines and save the file as **redis-config**:
    最大内存 2mb
    maxmemory-policy allkeys-lru
2.  Now you can create the ConfigMap using the following code:
    kubectl create configmap \
    示例-redis-config-from-file = redis-config
    您应该得到如下输出:
    configmap/example-redis-config 已创建
3.  You can use the same command to describe this ConfigMap:
    忽必烈描述了 configmap/example-redis-config
    输出如*图 3.6* 所示:
![Using the kubectl describe command to fetch the description of the ConfigMap](img/B17338_03_06.jpg)
图 3.6:配置图的描述
在本例中，您通过引用磁盘上的文件创建了配置映射。部署配置映射的另一种方法是从 YAML 文件创建它们。让我们在下一节中看看如何做到这一点。
### 从 YAML 文件创建配置映射
在本节中，您将使用 YAML 文件重新创建上一节中的配置映射:
1.  To start, delete the previously created ConfigMap:
    忽必烈删除 configmap/example-redis-config
2.  Copy and paste the following lines into a file named **example-redis-config.yaml**, and then save the file:
    1 堆叠版本:v1
    2 数据:
    3 重定向-配置:|-
    4 最大内存 2mb
    5 maxmemory-policy allkeys-lru
    6 子项:ConfigMap