### 优化后的文本

---

#### 第2章 业务服务监控详解

##### 2.1 文件内容差异对比方法

在进行代码审计或校验备份结果时，经常需要检查文件内容的差异。Python 提供了 `difflib` 模块来实现这一功能。以下是一个示例，展示如何使用 `difflib` 模块比较两个文件的内容，并输出 HTML 格式的比对结果。

```python
import sys

def readfile(filename):
    """
    读取文件并按行分隔
    """
    try:
        with open(filename, 'r') as fileHandle:
            text = fileHandle.read().splitlines()
        return text
    except IOError as error:
        print(f"Read file Error: {error}")
        sys.exit()

if __name__ == "__main__":
    if len(sys.argv) < 3:
        print("Usage: simple3.py filename1 filename2")
        sys.exit()

    textfile1, textfile2 = sys.argv[1], sys.argv[2]
    
    text1_lines = readfile(textfile1)
    text2_lines = readfile(textfile2)

    from difflib import HtmlDiff
    d = HtmlDiff()
    print(d.make_file(text1_lines, text2_lines))
```

运行上述代码后，可以从生成的 HTML 文件中查看 `nginx.conf.v1` 和 `nginx.conf.v2` 配置文件的差异。更多关于 `difflib` 的详细信息可以参考官方文档：[https://docs.python.org/2/library/difflib.html](https://docs.python.org/2/library/difflib.html)

---

##### 2.2 文件与目录差异对比方法

在进行代码审计或校验备份结果时，通常需要检查原始目录和目标目录的一致性。Python 的标准库 `filecmp` 可以满足这一需求。`filecmp` 模块提供了文件、目录及其子目录的差异对比功能，如报告目标目录比原始目录多出的文件或子目录，即使文件同名也会判断是否为同一个文件（基于内容的对比）。

**2.2.1 模块常用方法说明**

- **单文件对比**：`filecmp.cmp(f1, f2[, shallow])`
  - 比较文件 `f1` 和 `f2`，相同返回 `True`，不同返回 `False`。
  - `shallow` 参数默认为 `True`，表示只根据 `os.stat()` 返回的文件基本信息进行对比，忽略文件内容。
  - 示例：
    ```python
    import filecmp
    print(filecmp.cmp('/path/to/file1', '/path/to/file2'))
    ```

- **多文件对比**：`filecmp.cmpfiles(dir1, dir2, filenames)`
  - 比较指定文件名列表中的文件。
  - 返回值为三个列表：匹配的文件、不匹配的文件、无法找到的文件。
  - 示例：
    ```python
    import filecmp
    match, mismatch, errors = filecmp.cmpfiles('/home/test/filecmp/dir1', '/home/test/filecmp/dir2', ['f1', 'f2', 'f3', 'f4', 'f5'])
    print(match, mismatch, errors)
    ```

- **目录对比**：`filecmp.dircmp(a, b[, ignore[, hide]])`
  - 创建一个目录比较对象，`a` 和 `b` 是要比较的目录名。
  - `ignore` 参数用于指定忽略的文件名列表，默认为 `['RCS', 'CVS', 'tags']`。
  - `hide` 参数用于指定隐藏的文件名列表，默认为 `[os.curdir, os.pardir]`。
  - 示例：
    ```python
    import filecmp
    a = '/home/test/filecmp/dir1'
    b = '/home/test/filecmp/dir2'
    dirobj = filecmp.dircmp(a, b, ignore=['test.py'])
    dirobj.report()
    dirobj.report_partial_closure()
    dirobj.report_full_closure()
    print(dirobj.right_list)
    print(dirobj.left_list)
    print(dirobj.common)
    print(dirobj.left_only)
    print(dirobj.right_only)
    print(dirobj.common_dirs)
    print(dirobj.common_files)
    print(dirobj.common_funny)
    print(dirobj.same_files)
    print(dirobj.diff_files)
    print(dirobj.funny_files)
    ```

**2.2.2 实践：校验源与备份目录差异**

有时我们需要确认备份目录与源目录文件是否一致。本示例使用 `filecmp` 模块的 `left_only` 和 `diff_files` 方法递归获取源目录的更新项，再通过 `shutil.copyfile` 和 `os.makedirs` 方法对更新项进行复制，以保持一致性。

```python
#!/usr/bin/env python
import filecmp
import os
import shutil
import re

holderlist = []

def compareme(dir1, dir2):
    """
    递归获取更新项函数
    """
    dircomp = filecmp.dircmp(dir1, dirfrom=dir2)
    only_in_one = dircomp.left_only
    diff_in_one = dircomp.diff_files
    dirpath = os.path.abspath(dir1)
    [holderlist.append(os.path.abspath(os.path.join(dir1, x))) for x in only_in_one]
    [holderlist.append(os.path.abspath(os.path.join(dir1, x))) for x in diff_in_one]
    if len(dircomp.common_dirs) > 0:
        for item in dircomp.common_dirs:
            compareme(os.path.abspath(os.path.join(dir1, item)), os.path.abspath(os.path.join(dir2, item)))
    return holderlist

def main():
    if len(sys.argv) > 2:
        dir1 = sys.argv[1]
        dir2 = sys.argv[2]
    else:
        print(f"Usage: {sys.argv[0]} datadir backupdir")
        sys.exit()

    source_files = compareme(dir1, dir2)
    dir1 = os.path.abspath(dir1)
    if not dir2.endswith('/'):
        dir2 += '/'
    dir2 = os.path.abspath(dir2)
    createdir_bool = False
    destination_files = []
    for item in source_files:
        destination_dir = re.sub(dir1, dir2, item)
        destination_files.append(destination_dir)
        if os.path.isdir(item):
            if not os.path.exists(destination_dir):
                os.makedirs(destination_dir)
                createdir_bool = True
    if createdir_bool:
        destination_files = []
        source_files = compareme(dir1, dir2)
        for item in source_files:
            destination_dir = re.sub(dir1, dir2, item)
            destination_files.append(destination_dir)
    print("Update Item:")
    print(source_files)
    copy_pair = zip(source_files, destination_files)
    for s, d in copy_pair:
        if os.path.isfile(s):
            shutil.copyfile(s, d)

if __name__ == "__main__":
    main()
```

更新源目录 `dir1` 中的 `f4` 和 `code/f3` 文件后，运行程序结果如下：

```bash
# python simple2.py /home/test/filecmp/dir1 /home/test/filecmp/dir2
[/home/test/filecmp/dir1/f4, /home/test/filecmp/dir1/code/f3]
update item:
# python simple2.py /home/test/filecmp/dir1 /home/test/filecmp/dir2
update item:
[]
```

再次运行时已经没有更新项了。更多示例请参考：[http://linuxfreelancer.com/how-do-you-compare-two-folders-and-copy-the-difference-to-a-third-folder/](http://linuxfreelancer.com/how-do-you-compare-two-folders-and-copy-the-difference-to-a-third-folder/)

---

##### 2.3 发送电子邮件模块 smtplib

电子邮件是互联网上最流行的应用之一。在系统管理领域，我们常常使用邮件来发送告警信息、业务质量报表等，以便运维人员第一时间了解业务的服务状态。本节通过 Python 的 `smtplib` 模块来实现邮件的发送功能，模拟一个 SMTP 客户端，通过与 SMTP 服务器交互来实现邮件发送的功能。这类似于 Foxmail 的发邮件功能，在第一次使用之前我们需要配置 SMTP 主机地址、邮箱账号及密码等信息。Python 2.3 或更高版本默认自带 `smtplib` 模块，无需额外安装。

**2.3.1 `smtplib` 模块的常用类与方法**

- **SMTP 类定义**：`smtplib.SMTP([host[, port[, local_hostname[, timeout]]])`
  - 作为 SMTP 构造函数，功能是与 SMTP 服务器建立连接。连接成功后，可以向服务器发送相关请求，如登录、校验、发送、退出等。
  - `host` 参数为远程 SMTP 主机地址，例如 `smtp.163.com`。
  - `port` 为连接端口，默认为 25。
  - `local_hostname` 用于在本地主机的 FQDN（完整的域名）发送 HELO/EHLO（标识用户身份）指令。
  - `timeout` 为连接或尝试超时的时间（秒）。

- **连接远程 SMTP 主机方法**：`SMTP.connect([host[, port]])`
  - 连接远程 SMTP 主机。
  - `host` 为远程主机地址，`port` 为远程主机 SMTP 端口，默认为 25，也可以直接使用 `host:port` 形式表示。

更多关于 `smtplib` 的详细信息可以参考官方文档：[https://docs.python.org/3/library/smtplib.html](https://docs.python.org/3/library/smtplib.html)

---