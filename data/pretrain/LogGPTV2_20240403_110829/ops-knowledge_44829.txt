User: I hope you can help me. 
I have been building this webshop for the company I work for with Django and Lightning Fast Shop. 
It's basically finished now and I have been running it of a virtual ubuntu machine on my PC. Since it got annoying leaving my PC on the entire time, so others could access the site, I wanted to deploy it on a root server. So I got a JiffyBox and installed ubuntu on it. 
I managed to get Gnome working on it and to connect to it with VNC. I then uploaded my finished project via FTP to the server. 
Now I thought I would only need to download Django-LFS, create a new project and replace the project files with my finished ones. 
This worked when I tested it on my virtual machine. 
To my disappointment it did not work on the root server. When I tried running "bin/django runserver" I got an error message saying "bash: bin/django: Permission denied" and when I try it with 'sudo' I get "sudo: bin/django: command not found" 
I then realized that I had downloaded a newer version of Django-LFS and tried it with the same version to no avail. 
I am starting to get really frustrated and would appreciate it very much if somebody could help me with my problem. 
Greetings, Krytos.
Assistant: I know some of this tip can be obvious but never knows:

Do you update all your settings in settings.py ? (paths to static files, path to project...)
Wich server are you using ? django server ? apache ? nginx ?
Do you have permissions over all file in the project ? You should check that the owner of the files is the user you have, not root. If the owner is root you'll have this permissions problem in every file that is owned by root.
Are you using uwsgi ? 
Have you installed all the apps you got in your VM ? 
Have you installed the SAME version you got in your VM ?

When I move a project from VM to real server I go over this steps:

Review settings.py and update paths
Check permissions in the folder that the web server may use
I have a list with the packages and versions in a txt file, let's call it packages.txt
I install all that packages using pip install -r packages.txt
I allways use apache/nginx, so I have to update the virtualhost to the new paths
If I'm using uwsgi, update uwsgi settings

To downgrade some pip packages you may need to delete the egg files, because if you uninstall a package and reinstall it, although your using pip install package==VERSION, if you have a package already downloaded, pip will install this one, even if the VERSION is different.
To check actual version of pip packages use pip freeze
To export all pip packages to a file, to import them in other place: pip freeze > packages.txt nad to install packages from this file pip install -r packages.txt