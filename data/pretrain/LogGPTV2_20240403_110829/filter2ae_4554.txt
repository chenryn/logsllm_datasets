## 前言
前一篇文章介绍了cve-2010-1622漏洞的原理，本篇文章在其基础上介绍下CVE-2022-22965漏洞原理。
## CVE-2022-22965 漏洞影响版本
Spring Framework 5.3.X  set = new HashSet();
            String poc = "class.moduls.classLoader";
            User action = new User();
            processClass(action.getClass().getClassLoader(),set,poc);
        }
            public void processClass(Object instance, java.util.HashSet set, String poc){
            try {
                Class c = instance.getClass();
                set.add(instance);
                Method[] allMethods = c.getMethods();
                for (Method m : allMethods) {
                    if (!m.getName().startsWith("set")) {
                        continue;
                    }
                    if (!m.toGenericString().startsWith("public")) {
                        continue;
                    }
                    Class[] pType  = m.getParameterTypes();
                    if(pType.length!=1) continue;
                    if(pType[0].getName().equals("java.lang.String")||
                            pType[0].getName().equals("boolean")||
                            pType[0].getName().equals("int")){
                        String fieldName = m.getName().substring(3,4).toLowerCase()+m.getName().substring(4);
                        System.out.println(poc+"."+fieldName);
                        //System.out.println(m.getName());
                    }
                }
                for (Method m : allMethods) {
                    if (!m.getName().startsWith("get")) {
                        continue;
                    }
                    if (!m.toGenericString().startsWith("public")) {
                        continue;
                    }
                    Class[] pType  = m.getParameterTypes();
                    if(pType.length!=0) continue;
                    if(m.getReturnType() == Void.TYPE) continue;
                    m.setAccessible(true);
                    Object o = m.invoke(instance);
                    if(o!=null)
                    {
                        if(set.contains(o)) continue;
                        processClass(o, set, poc+"."+m.getName().substring(3,4).toLowerCase()+m.getName().substring(4));
                    }
                }
            } catch (IllegalAccessException | InvocationTargetException x) {
                x.printStackTrace();
            }
        }
运行后确实可以发现有关属性：
## CVE-2022-22965 漏洞修复
spring 修复方法：
通过对比 Spring 5.3.17 和 5.3.18 的版本，可以看到对`CachedIntrospectionResults`构造函数中 Java
Bean 的`PropertyDescriptor`的过滤条件被修改了：当 Java Bean
的类型为`java.lang.Class`时，仅允许获取`name`以及`Name`后缀的属性描述符。在章节`3.2.2
关键点二：JDK版本`中，利用`java.lang.Class.getModule()`的链路就走不通了。
tomcat修复方法：
Tomcat
9.0.62补丁中可以看到对getResource()方法的返回值做了修改，直接返回null。WebappClassLoaderBase即ParallelWebappClassLoader的父类，Web应用部署方式中，利用org.apache.catalina.loader.ParallelWebappClassLoader.getResources()的链路就走不通了。
## 后记
在分析此漏洞的过程中，参考了不少资料，以作者目前的能力来说，看起有关于spring和tomcat的框架部分来说还有点吃力，一些内容也是直接引用的其它师傅的分析结果。CVE-2022-22965漏洞的利用方式还参考了Struts2
S2-020漏洞的利用方法，不得不说还是很精妙的。
## 参考文章
  * [Spring 远程命令执行漏洞（CVE-2022-22965）原理分析和思考](https://paper.seebug.org/1877/)
  * [从零开始，分析Spring Framework RCE](https://www.cnpanda.net/sec/1196.html)