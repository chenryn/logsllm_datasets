title:An integrated approach to cryptographic mitigation of denial-of-service
attacks
author:Jothi Rangasamy and
Douglas Stebila and
Colin Boyd and
Juanma Gonz&apos;alez Nieto
An Integrated Approach to Cryptographic Mitigation of
Denial-of-Service Attacks
Jothi Rangasamy
Douglas Stebila
Colin Boyd
Juan González Nieto
Information Security Institute, Queensland University of Technology,
GPO Box 2434, Brisbane QLD 4001, Australia
{j.rangasamy,stebila,c.boyd,j.gonzaleznieto}@qut.edu.au
ABSTRACT
Gradual authentication is a principle proposed by Mead-
ows as a way to tackle denial-of-service attacks on network
protocols by gradually increasing the con(cid:12)dence in clients
before the server commits resources. In this paper, we pro-
pose an e(cid:14)cient method that allows a defending server to
authenticate its clients gradually with the help of some fast-
to-verify measures. Our method integrates hash-based client
puzzles along with a special class of digital signatures sup-
porting fast veri(cid:12)cation. Our hash-based client puzzle pro-
vides (cid:12)ner granularity of di(cid:14)culty and is proven secure in
the puzzle di(cid:14)culty model of Chen et al. (2009). We inte-
grate this with the fast-veri(cid:12)cation digital signature scheme
proposed by Bernstein (2000, 2008). These schemes can be
up to 20 times faster for client authentication compared to
RSA-based schemes. Our experimental results show that,
in the Secure Sockets Layer (SSL) protocol, fast veri(cid:12)cation
digital signatures can provide a 7% increase in connections
per second compared to RSA signatures, and our integra-
tion of client puzzles with client authentication imposes no
performance penalty on the server since puzzle veri(cid:12)cation
is a part of signature veri(cid:12)cation.
Categories and Subject Descriptors
C.2.4 [Computer-Communication Networks]: Distribut-
ed Systems|Client/Server ; D.4.6 [Operating Systems]:
Security and Protection|Authentication
General Terms
Security
Keywords
Denial-of-Service, Client Puzzles, Bernstein’s Signatures, Se-
cure Sockets Layer (SSL)
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for proﬁt or commercial advantage and that copies
bear this notice and the full citation on the ﬁrst page. To copy otherwise, to
republish, to post on servers or to redistribute to lists, requires prior speciﬁc
permission and/or a fee.
ASIACCS ’11, March 22–24, 2011, Hong Kong, China.
Copyright 2011 ACM 978-1-4503-0564-8/11/03 ...$10.00.
1.
INTRODUCTION
Denial of Service (DoS) attacks are a growing concern as
they aim to disrupt the availability of a target server by
exhausting its resources [8]. Thus, when the end host or
server is under DoS attack, its service will be unavailable to
the legitimate clients. In recent years, several major Internet
e-commerce sites were disabled by DoS attacks. Some of the
victims were eBay, Yahoo, Amazon, and Microsoft’s name
server [20].
Authentication is a promising way to treat DoS attacks by
restricting connections only to authorised users. However,
authentication itself is typically a computationally intensive
process. This means that the authentication protocol can
become a target of DoS attacks as the attackers can cause
the server to perform expensive operations by sending a large
number of (bogus) connection requests. Therefore it can
cause the same problem it aimed to solving [23].
The SSL/TLS protocol1 is the most widely used and trust-
ed protocol for secure transactions for sensitive applications
ranging from on-line banking and stock trading to e-commerce.
A SSL/TLS client is allowed to trigger the SSL/TLS server
to perform an expensive RSA operation. By exploiting this,
an attacker could easily mount a DoS attack on SSL-based
e-commerce sites. On-line shoppers get frustrated and of-
ten leave the site without completing their purchase. It was
estimated that several billion dollars are lost annually in
revenue from e-commerce transactions aborted due to Web
performance issues [10, 30].
1.1 Our contributions
In this work, we present an e(cid:14)cient protocol for stronger
authentication in the presence of denial of service attack-
s. The main motivation for this work is to prevent DoS
attacks on secure web servers by introducing fast-to-verify
authentication measures that reduce the costs incurred by a
defending server and at the same time increase the cost of
mounting an attack.
Finer granularity hash-based client puzzles. We propose a
new client puzzle based on hash functions; our puzzle con-
struction can be seen as a generalisation of the client puzzle
of Aura et al. [3] with (cid:12)ner granularity in the puzzle’s di(cid:14)-
culty. We show that our construction is secure in the Chen
1Secure Sockets Layer (SSL) version 3.1 is known as Trans-
port Layer Security (TLS) version 1.0).
114
et al. model for puzzle di(cid:14)culty [9].
Stronger authentication with fast veri(cid:12)cation signatures.
DoS countermeasures such as client puzzles and cookies give
weak authentication. How can we e(cid:14)ciently achieve stronger
authentication of clients? We propose a gradual authen-
tication protocol which uses client puzzles and signature
schemes for achieving weak and stronger authentication, re-
spectively. By using Bernstein’s fast veri(cid:12)cation digital sig-
nature scheme [5], for which veri(cid:12)cation needs only a few
multi-precision integer operations, a defending server can
verify client signatures with very low cost. We carefully
integrate the weak authentication (client puzzles) with the
strong authentication (digital signatures) such that client
puzzle veri(cid:12)cation adds no cost.
Performance analysis. Although client puzzles have been
known about for some time, there has been very little experi-
ence in using puzzles in practice, particularly in the context
of authenticated key exchange. We have implemented our
techniques to determine the performance improvement that
can be expected in SSL. Our measurements show that our
proposed approach can protect SSL servers e(cid:11)ectively from
DoS attacks that exploit the cost of SSL key agreement.
Outline. In the following sections, we describe our gradual
authentication technique and apply it to the TLS protocol to
overcome DoS attacks. We organise the rest of the paper as
follows: Section 1.2 presents related work, Section 2 presents
our client puzzle and its security analysis, Section 3 provides
the design of our client authentication technique and its per-
formance results, and Section 4 presents performance results
obtained by adding our mechanism to the SSL/TLS proto-
col. Section 5 concludes and discusses future work.
1.2 Background and related work
Throughout this paper, we are interested in DoS attacks
that attempt to consume a server’s limited resources such
as CPU cycles, memory and network bandwidth.
In re-
cent years, a number of techniques, such as client puzzles
and stateless connections, have been proposed for deterring
resource-consuming DoS attacks [2, 14].
Juels and Brainard [14] (cid:12)rst used client puzzles to deter
connection depletion attacks. This lead to the development
of several client puzzles to protect authentication protocols
against DoS attacks [3, 26]. A client puzzle or cryptographic
puzzle is a moderately hard computational problem issued
by a defending server in response to a client request for its
service. The client must return a solution before the server
will continue with the protocol. Puzzles are designed so
that solving a puzzle is an acceptable cost for legitimate
clients but, when trying to establish multiple connections in
parallel, the cost will be a signi(cid:12)cant restraint for attackers.
Stateless connections are another countermeasure proposed
to prevent memory-based DoS attacks [2]. This is imple-
mented normally via the use of cookies, a technique proposed
by Karn [15]. When an authentication protocol is run, the
defending server sends all the session-related information in
the form of a cookie. Getting back the cookie in the nex-
t round of communication indicates to the server that the
client is able to receive messages sent to the IP address from
which the communication was initiated. This also protect-
s the server from memory-based DoS attacks in which the
attacker uses spoofed addresses.
There are very few implementations showing the e(cid:14)cacy
of client puzzles in mitigating DoS attacks available in the
literature. Juels and Brainard used client puzzles to counter
TCP SYN (cid:13)ooding [14]. They mentioned that SSL also
has a similar problem. Wang and Reiter also implemented
client puzzles in the TCP stack to show that their puzzle
auction mechanism incurs a negligible cost [27]. Feng et al.
applied client puzzles at the network layer to deter TCP
SYN (cid:13)ooding [12].
Both cookies and client puzzles can provide a weak form of
authentication, but authentication of the client cannot be ig-
nored altogether and must be completed at some stage in the
protocol execution. To thwart DoS attacks, Meadows sug-
gested starting with weak authentication when the protocol
execution begins and then gradually increasing the strength
of authentication as the protocol runs. This strategy for
balancing authentication and computational expenditure is
called gradual authentication [18, 19].
Protocol designers have tried to reduce the impact of DoS
attacks by implementing several countermeasures as a pream-
ble to the network protocols [25, 16, 22, 7]. Dean and Stub-
ble(cid:12)eld (cid:12)rst used client puzzles to protect TLS [11]. To
the best of our knowledge, we are the (cid:12)rst to present a
countermeasure in the form of digital signatures. This pro-
vides an integrated gradual authentication mechanism that
combines a type of hash-based client puzzles with the pro-
posed signature-based countermeasure within an authenti-
cation process. Our integrated approach only increases the
cost of mounting an attack with client puzzles but adds no
extra cost on the server side to verify puzzle solutions. More-
over if puzzle veri(cid:12)cation fails then the rest of the signature
veri(cid:12)cation is terminated. Although the proposed approach
is suitable in general for key exchange protocols that use
signatures for client authentication, we focus on preventing
DoS attacks on TLS.
2. OUR CLIENT PUZZLE
This section describes our new client puzzle which achieves
both e(cid:14)ciency and (cid:12)ner granularity. Granularity indicates
how well a server can shift from one di(cid:14)culty level to the
next level to impose a reasonable cost on clients. The more
di(cid:14)culty levels in a puzzle scheme, the more (cid:13)exible it is
for the server. The proposed client puzzle is based on the
construction of Aura et al. which is an interactive version
of Back’s proof of work function, Hashcash [4]. We also
discuss brie(cid:13)y Aura et al.’s puzzle, identify its shortcomings
and propose improvements.
Client puzzle of Aura et al. [3]. In 2000, Aura et al. pro-
posed a client puzzle scheme (which we call APuz) based
on the problem of (cid:12)nding partial hash preimage of a pre-
speci(cid:12)ed \target" string of a given length. In their puzzle
protocol, the server sends a periodically generated nonce
NS and the di(cid:14)culty level Q to the client. The client (cid:12)rst
generates his own nonce NC and then (cid:12)nds a required par-
tial collision X such that H(C, NS, NC , X) has the required
number, Q, of zeros in the output. Figure 1 describes the
puzzle APuz of Aura et al.
Note that the probabilities of (cid:12)nding partial collisions for
any Q-bit string and for the Q-bit string 0Q are the same,
provided H is random. Let d be the decimal value of a Q-bit
string: d can be any integer in [0, 2Q (cid:0) 1]. But the reason to
set d to be zero in APuz is that it is simpler and convenient to
compare trial collisions. To date, APuz is the most e(cid:14)cient
client puzzle proposed in the literature requiring just a single
hash computation to verify a puzzle solution.
115
H(C, NS, NC , X) = 000 . . . 000
Y
|
{z
}
H
C
NS
NC
X
Q
{z
}
|
000 . . . 000
Q bits
Y
Q bits
! a cryptographic hash function
! the client identity
! the server nonce
! the client’s nonce
! the puzzle solution
! the puzzle di(cid:14)culty level
! the Q-long string of bits 0
! the rest of the hash value;
can be anything
Figure 1: Client puzzle APuz of Aura et al. [3]
Drawbacks. There are two reasons why we need to im-
prove APuz. The (cid:12)rst reason is that it fails to perform the
functionality of cookies, testing the reachability of the clients
at the claimed address: the server publishes its nonce and
the puzzle di(cid:14)culty level, periodically. Therefore puzzles
are not uniquely generated as there is no client identity in-
volved in puzzle generation. The second reason is that some
puzzles may not have solutions [17]: unlike Juels-Brainard
type puzzles, puzzles are not veri(cid:12)ed during their genera-
tion and hence there is no guarantee that a client will (cid:12)nd
a solution producing the required number of zeros on the
hash output. Moreover, the average time needed to solve
an instance of APuz is exponential in Q, the di(cid:14)culty lev-
el. Hence, it introduces a big gap between the two nearest
di(cid:14)culties.
2.1 Proposed Client Puzzle GPuz
In this section, we provide an idea to address the issues
discussed above. The idea is the following: relax the condi-
tion on a puzzle solution so that the probability of solving
a puzzle can be increased. That is, instead of (cid:12)xing the nu-
merical value of the Q-bit target string as d = 0, we can
relax that the numerical value d of the Q-bit target string
could be anything in [0, D], so that 0 (cid:20) d (cid:20) D < 2Q. Note
that, while the probability of solving a puzzle with the value
of a given target Q-bit string being D is 1
2Q , the probability
of solving a puzzle with the value of target Q-bit string being
d, 0 (cid:20) d (cid:20) D becomes D+1
2Q , assuming the hash function is
an ideal random function. Note that we have only increased
a client’s chance of (cid:12)nding solutions. It is still possible that
the client may not (cid:12)nd solutions within its running time.
For clarity, we (cid:12)x the (cid:12)nal Q-bits of the hash output as
the target string. That is, for a given puzzle with (Q, D), a
solution x should satisfy (h(x) mod 2Q) (cid:20) D. For instance,
if SHA-1 is used and (Q, D) = (32, 65537), then a string x is
a solution, only if (SHA-1(x) mod 232) (cid:20) 65537. Each hash
application outputs a number in the interval [0, 2160 (cid:0) 1]. If
the required part of the output is below the target value,
then a solution is found. If not, the process is repeated by
incrementing x by one. Note that the lower the target value,
the harder the problem solving. Therefore, in addition to Q,
a defending server has one more parameter in D to adjust
the puzzle di(cid:14)culty levels. In this way our method allows
the server to set more di(cid:14)culty levels quite smoothly by
increasing the target space.
116
We now describe our client puzzle, GPuz, that is a gen-
eralisation of APuz. Figure 2 illustrates the proposed puz-
zle. Let IDS and IDC be the identities of the server and
the client, respectively. When a defending server receives a
request for service, it sends a challenge consisting of a pe-
riodically generated server nonce NS, a uniquely generated
challenge Z and the hardness parameters (Q, D).
Once the client has received the challenge it generates a
new nonce, NC , sets M = ZjjNSjjNCjjIDSjjIDC and (cid:12)nds a
partial hash preimage of a Q-bit target string whose integer
value is in the range [0, D]. That is, the client has to (cid:12)nd X
such that H(M, X) mod 2Q (cid:20) D.
Now the client replies with its nonce, NC , and the puzzle
solution X, and the other values it received. Then the server