### D: Commitment Definitions and Protocol

Let us define the following commitments:
- \( D := \text{Com}(0 - a^2) \)
- \( A := \text{Com}(a_0, \ldots, a_{m-1}; r_A) \)
- \( C := \text{Com}\left(\prod_{k=0}^{m-1} (a_k \cdot (1 - 2b_k)); r_D\right) \)

#### Bit Commitment Protocol [10, Fig. 4]

1. **P1** computes...
2. ...
3. ...
4. ...
5. ...
6. **end P1**
7. **P1 → V1**: \( A, C, D \)
8. **V1**: \( x \xleftarrow{\$} \mathbb{F}_q \)
9. **V1 → P1**: \( x \)
10. **P1** computes...
11. ...
12. ...
13. ...
14. **end P1**
15. **P1 → V1**: \( f_0, \ldots, f_{m-1}, z_A, z_C \)
16. **V1** requires...
   - \( B \cdot x^A \stackrel{?}{=} \text{Com}((f_0, \ldots, f_{m-1}); z_A) \)
   - \( C \cdot x^D \stackrel{?}{=} \text{Com}\left(\prod_{k=0}^{m-1} (f_k \cdot (x - f_k)); z_C\right) \)
17. **end V1**

For each \( k \in \{0, \ldots, m-1\} \):
- \( f_i := b_i \cdot x + a_i \)
- \( z_A := r_B \cdot x + r_A \)
- \( z_C := r_C \cdot x + r_D \)

Finally, we state the following lemma:

**Lemma III.5 (Bootle et al. [10, Lem. 1])**. The protocol \( P1, V1 \) is perfectly complete for \( R1 \). If \( \text{Com} \) is (perfectly) binding, then it is (perfectly) (3)-special sound. If \( \text{Com} \) is (perfectly) hiding, then it is (perfectly) special honest verifier zero knowledge.

In practice, we incorporate an additional improvement due to Esgin, Zhao, Steinfeld, Liu, and Liu [15, §1.3]. Specifically, we commit to all 0th-order components in \( A \) (including \( D \)) and to all 1st-order components in \( B \) (including \( C \)). Finally, we eliminate \( z_C \). This technique reduces the proof size and simplifies the verifier's checks.

### B: Overview of Groth–Kohlweiss [9]

We now review Groth and Kohlweiss [9], incorporating ideas from Bootle et al. [10]. These works describe a proof protocol for the relation:
\[ \{(σ, (c_0, \ldots, c_{N-1}); l, r) \mid c_l = \text{Com}(0; r)\} \]
In short, the prover proves that she knows an opening to 0 of a secret element \( c_l \) among a public list of commitments \( (c_0, \ldots, c_{N-1}) \).

The bit commitment protocol above shows that the responses \( f_{k,1} := f_k \) sent by the prover are evaluations at the verifier's challenge \( x \) of linear polynomials \( F_{k,1}(X) = b_k \cdot X + a_k \), where the first-order coefficients \( b_k \) are bits chosen by the prover. The quantities \( f_{k,0} := x - f_k \), which the verifier can also compute, are evaluations at \( x \) of \( F_{k,0}(X) := X - F_{k,1}(X) \), whose first-order coefficients are the logical negations of the \( b_k \).

For each \( i \in \{0, \ldots, N-1\} \), let \( p_i := \prod_{k=0}^{m-1} f_{k, (i)_k} \), where \( (i)_k \) denotes the \( k \)-th bit of \( i \). By the same reasoning, each \( p_i \) is the evaluation at \( x \) of \( P_i(X) := \prod_{k=0}^{m-1} F_{k, (i)_k}(X) \). The key property of the \( P_i(X) \) pertains to their degrees. In fact, by the structure of the \( F_{k,b}(X) \), \( P_i(X) \) is of degree \( m \) (and monic) for one and only one index \( i \) (namely, that \( i \) whose binary representation is \( b_0, \ldots, b_{m-1} \)).

This fact convinces the verifier that the multi-exponentiation is equal to the group product of \( (c_l)^{x^m} \) with further terms depending on lower powers of \( x \). The verifier allows the prover to "cancel out" these lower-order terms by sending additional group elements; the prover must send these before seeing \( x \).

### C: Main Protocol

We fix commitments \( c_0, \ldots, c_{N-1} \), a free permutation \( κ \in S_N \) of order \( o \), and a linear map \( Ξ : \mathbb{F}_q^o \to \mathbb{F}_q^s \). Our main result in this section is a proof of knowledge of an index \( l \), as well as of openings \( r_0, \ldots, r_{s-1} \) to 0 of the image points under \( Ξ \) of the commitments \( c_l, c_{κ(l)}, c_{κ^2(l)}, \ldots, c_{κ^{o-1}(l)} \) represented by \( l \)'s ordered orbit. We represent \( Ξ \) as an \( s \times o \) matrix with entries in \( \mathbb{F}_q \).

Thus, we have the relation:
\[ R_2 = \left\{ (σ, (c_0, \ldots, c_{N-1}), κ, Ξ; l, (r_0, \ldots, r_{s-1})) \mid \left( \text{Com}(0; r_i) \right)_{i=0}^{s-1} = Ξ \cdot \left( c_{κ^j(l)} \right)_{j=0}^{o-1} \right\} \]

**Protocol Many-out-of-many Proof**

1. **P2** computes...
2. ...
3. ...
4. ...
5. **end P2**
6. **P2 → V2**: \( A, B, C, D \)
7. **V2**: \( v \xleftarrow{\$} \mathbb{F}_q \)
8. **V2 → P2**: \( v \)
9. **P2 and V2** evaluate \( (1, v, \ldots, v^{s-1}) \cdot Ξ =: [\xi_0, \ldots, \xi_{o-1}] \)
10. For \( k \in \{0, \ldots, m-1\} \):
    - \( G_k := \prod_{j=0}^{o-1} \left( \xi_j \cdot \text{Com}(0; ρ_k) \right) \cdot \prod_{i=0}^{N-1} c_{κ^{-j}(i), k} \)
11. ...
12. ...
13. **end P2**
14. **P2 → V2**: \( G_0, \ldots, G_{m-1} \)
15. **V2**: \( x \xleftarrow{\$} \mathbb{F}_q \)
16. **V2 → P2**: \( x \)
17. **P2** computes...
18. \( (f_0, \ldots, f_{m-1}, z_A, z_C) \leftarrow P1(x) \)
19. \( z := \sum_{k=0}^{m-1} ρ_k \cdot x^k \)
20. **end P2**
21. **P2 → V2**: \( f_0, \ldots, f_{m-1}, z_A, z_C, z \)
22. **V2** requires...
23. \( V1(σ, B, x, A, C, D, (f_k)_{k=0}^{m-1}, z_A, z_C) \stackrel{?}{=} 1 \)
24. \( \prod_{j=0}^{o-1} \left( \prod_{i=0}^{N-1} c_{p_{κ^{-j}(i)}} \right)^{\xi_j} \cdot x^m \stackrel{?}{=} \text{Com}(0; z) \)
25. **end V2**

### D: Efficiency

We discuss the efficiency of our protocol and argue that it can be computed in quasilinear time for both the prover and the verifier. To facilitate fair comparison, we assume that only "elementary" field, group, and polynomial operations are used.

1. **Analysis of Groth–Kohlweiss [9]**: The prover and verifier may naively compute the polynomials \( P_i(X) \) and the evaluations \( p_i \) in \( O(N \log^2 N) \) and \( O(N \log N) \) time, respectively. We claim that the prover and verifier can compute \( (P_i(X))_{i=0}^{N-1} \) in \( O(N \log N) \) and \( O(N) \) time, respectively. To this end, we sketch an efficient recursive algorithm, which closely evokes those used in bit reversal (see e.g., Jeong and Williams [16]).

   Having constructed the linear polynomials \( F_{k,1}(X) \) and \( F_{k,0}(X) \) for \( k \in \{0, \ldots, m-1\} \), the prover constructs the \( P_i(X) \) using a procedure that arranges the "upward paths" through the \( m \times 2 \) array \( F_{k,b}(X) \) into a binary tree of depth \( m \). Each leaf \( i \) gives the product \( \prod_{k=0}^{m-1} F_{k, (i)_k}(X) = P_i(X) \), which can be written into the \( i \)-th index of a global array. Each edge of this tree represents the multiplication of an \( O(\log N) \)-degree "partial product" by a linear polynomial, leading to a total time complexity of \( O(N \log N) \).

   The verifier of [9] can be implemented in \( O(N) \) time. Indeed, the same binary recursive procedure—applied now to the evaluations \( f_{k,b} \)—takes \( O(N) \) time, as the products do not grow with depth, and each "partial product" can be extended in \( O(1) \) time.