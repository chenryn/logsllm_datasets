𝑘 ∈N*
𝑅
+
[2]
2 (Case 4) + 𝑅
[2]
2 (Case 7)
1 − 𝑄( ¯𝑓
[2]
1,1,2, ¯𝑓
[1]
1,2,2)
𝑅
+
[2]
2 (Case 5) + 𝑅
[2]
2 (Case 8)
1 − 𝑄( ¯𝑓
[2]
1,2,2, ¯𝑓
[1]
1,1,2)
;
.
Notice that the calculation of shared reward of Pool1 when
Pool2 first finds an FPoW is exactly same as the calculation
of shared reward of Pool2 when Pool1 first finds an FPoW
𝑛 ). We can derive the reward of Pool𝑖 in a two-pool
(∑︀ 𝑅[2]
PAW game:
∑︁
𝑛∈N*
∑︁
∑︁
𝑛=2𝑘+1
𝑘 ∈ N
𝑛=2𝑘
𝑘 ∈N*
𝑅[𝑖] =
𝑅[𝑖]
𝑛 =
𝑅[𝑖]
𝑛 +
𝑅[𝑖]
𝑛 .
1,2, ¯𝑓 [𝑖]
¯𝑓 [𝑖]
1,1,2, and ¯𝑓 [𝑖]
1,2,2 can be calculated as:
𝑓 [𝑖]
1 + 𝑓 [𝑖]
1 𝑓 [𝑖]
2
;
2 − 𝑓 [𝑖]
2 − 𝑓 [𝑖]
1 (1 − 𝑓 [1]
3 − 2(𝑓 [1]
2
2𝑓 [𝑖]
(𝑓 [𝑖]
1 + 𝑓 [𝑖]
;
2
2 − 𝑓 [2]
2 ) + 𝑓 [𝑖]
2 + 𝑓 [2]
2 )
2 )(1 − 𝑓 [1]
2 − 𝑓 [2]
3 − 2(𝑓 [1]
2 + 𝑓 [2]
2 )
¯𝑓 [𝑖]
1,2 =
¯𝑓 [𝑖]
1,1,2 =
¯𝑓 [𝑖]
1,2,2 =
2 ) + 𝑓 [𝑖]
2
.
Detailed proof can refer to Theorem 5.1 and Appendix-A.
E PROOF OF THE NASH
EQUILIBRIUM (THEOREM 5.3)
Proof. To prove that there exists a Nash equilibrium, it
suffices to show ∇𝑓 [1] (∇𝑓 [1] 𝑅[1]) < 0 and ∇𝑓 [2] (∇𝑓 [2] 𝑅[2]) <
0 under the following conditions:
Therefore, there exists a unique Nash equilibrium point
since 𝑅[1] and 𝑅[2] are convex functions with 𝑓 [1] and 𝑓 [2]
respectively [36].
0 , 𝑓 [2]
Furthermore, we use Best-response dynamics to find the
Nash equilibrium point. Specifically, we let Pool1 and Pool2
start at (𝑓 [1]
0 ) = ((0, 0), (0, 0)), and adjust 𝑓 [1] and 𝑓 [2]
to maximize 𝑅[1] and 𝑅[2] respectively, till 𝑓 [1] and 𝑓 [2]
converge. For instance, we first update 𝑓 [1]
to maximize 𝑅[1],
1
and then update 𝑓 [2]
to maximize 𝑅[2]. After that, we repeat
1
2 and 𝑅[2] with 𝑓 [2]
the procedures to maximize 𝑅[1] with 𝑓 [1]
2 ,
and so on. At 𝑘-th step, 𝑓 [1]
𝑘 can be represented by:
𝑅[1](𝑓 [1], 𝑓 [2]
𝑘 = arg max
𝑘 and 𝑓 [2]
𝑓 [2]
𝑘−1),
𝑘 = arg max
𝑘 , 𝑓 [2]),
𝑅[2](𝑓 [1]
𝑓 [1]
𝑓 [1]
𝑓 [2]
which is under the constraints in Equation (21).
The Nash equilibrium point will be found when 𝑓 [1] and
𝑓 [2] converge as 𝑘 approaches infinity, which either satisfies
∇𝑓 [1] 𝑅[1] = 0 and ∇𝑓 [2] 𝑅[2] = 0, or a point on a borderline
in Equation (21) which maximizes 𝑅[1] with 𝑓 [1] and 𝑅[2]
(cid:3)
with 𝑓 [2].
F BRIBERY RACING GAME
In our previous analysis, we regard the attacker races with an
“honest” opponent. Now we consider the opponent also carry
out bribery racing to avoid a loss. Suppose two miners 𝑎1 and
𝑎2 fall into the “0-lead” racing situation. When 𝑎2 is aware of
bribes 𝜀1, he will broadcast a transaction 𝑇 𝐴2
𝐵 which transfer
𝜀2 from his mining reward address 𝐴2 to an “anyone-can-
claim” address 𝐵 as bribes. In such scenarios, bribery racing
will become a bribery racing game, and targets (venal miners)
will choose to work on a more profitable branch. Thus, the
probability of all other miners (including targets) follows 𝑎𝑖’s
branch 𝛾𝑖 will be an increasing function with 𝜀𝑖 (more bribes
will bring more targets).
Now we analyze the Nash equilibrium of a bribery racing
game. Since we consider common “0-lead” racing scenarios,
we use the reward of the “forked” block as our objective
function (different from BSM or Bribery PAW which should
use the attacker’s reward as the objective function). The
probability of extending 𝑎𝑖’s branch is 𝛼𝑖 + 𝛾𝑖(1 − 𝛼1 − 𝛼2).
Therefore, 𝑎𝑖’s reward is:
𝑅𝑎𝑖 = (1 − 𝜀𝑖)(𝛼𝑖 + 𝛾𝑖(1 − 𝛼1 − 𝛼2)),
𝑖 ∈ {1, 2}.
We then use Best-response dynamics to find the Nash
equilibrium point. Let 𝑎1 and 𝑎2 start at (𝜀1,0, 𝜀1,0) = (0, 0).
𝑎𝑖 will adjust 𝜀𝑖 to maximize 𝑅𝑎𝑖 as the best response to
the opponent, till 𝑅𝑎1 and 𝑅𝑎2 converge. For example, we
first update 𝜀1,1 to maximize 𝑅𝑎1 , and then update 𝜀2,1
to maximize 𝑅𝑎2 . After that, we repeat the procedures to
maximize 𝑅𝑎1 with 𝜀1,2 and 𝑅𝑎2 with 𝜀2,2, and so on. At
𝑘-th step, 𝜀1,𝑘 and 𝜀2,𝑘 can be represented by:
𝜀1,𝑘 = arg max
𝜀1
𝑅𝑎1 (𝜀1, 𝜀2,𝑘−1),
𝜀2,𝑘 = arg max
𝜀2
𝑅𝑎2 (𝜀1,𝑘, 𝜀2).
(cid:54) 𝛼[1] (cid:54) 1;
(cid:54) 𝛼[2] (cid:54) 1;
2
2
1 , 𝑓 [1]
1 , 𝑓 [2]
0 (cid:54) 𝑓 [1]
0 (cid:54) 𝑓 [2]
𝛼[1] + 𝛼[2] (cid:54) 1;
(cid:54) 1;
0 (cid:54) 𝑐[1]
0 (cid:54) 𝑐[1]
(cid:54) 1.
1 , 𝑐[2]
2 + 𝑐[2]
1
2
(21)
Moreover, a bribery racing game can become more inter-
esting when also considering 𝑎𝑖 as venal miners: 𝑎𝑖 can even
be rewarded when working on the opponent’s branch. For
instance, when 𝑎1 and 𝑎2 pay too much for bribes, they will
consider working on the opponent’s branch when claiming the
bribes becomes more profitable. We can use similar methods
above to analysis this situation and get the same conclusion
in most scenarios.
G BRIBERY FAW/PAW
We discuss strategies to combine bribery racing with FAW/-
PAW attacks.
Out-of-band payment. An attacker first launches FAW/-
PAW against victim pools. When “0-lead” racing occurs (case
4-2 in Section 5.1), the attacker directly pays the owners of
mining capacity (other miners or “cloud mining” services
[25, 28, 32]) to work on the attacker’s branch. The payment
can be made in Bitcoin or any outside (state) currency. Fur-
thermore, bribing through smart contracts [17] can also be
applied to make bribery less visible and difficult to be de-
tected (out-of-band payment can also be used to bribe pool
managers in in-band payment, which will be discussed latter).
Negative-fee mining pool. Negative-fee mining pools
provide pool miners higher rewards than honest mining to
lure miners (bribes) join in the pool [2]. When combined with
FAW attacks, an attacker works as a negative-fee mining
pool manager and announces a higher reward to encourage
miners to join in (i.e., bribing other miners). Meanwhile, the
attacker uses her loyal mining power [7] as infiltration mining
in a victim pool (different from the negative-fee mining pool).
When “0-lead” racing occurs (case 4-2 in Section 5.1), the
attacker can force negative-fee pool miners working on her
branch since she is the pool manager.
In-band payment. We discuss two strategies: bribing
pool manager and Eclipse attacks [11] to launch B-FAW/B-
PAW attacks via in-band payment.
First, an attacker can bribe the pool manager to choose
𝑇 𝐴
𝐵 . When the manager is profit-driven (only cares about the
profit of himself), he may accept the bribes and make all pool
miners encapsulate 𝑇 𝐴
𝐵 . Since the bribery can be done via out-
of-band payment, bribing manager can be hardly detected.
However, victim pool miners can listen to the transactions
and count the number of 𝑇 𝐴
𝐴′ are
received to identify the corrupted manager. Moreover, for
an honest manager, they can reject the bribes and expel the
attacker.
𝐵 when both 𝑇 𝐴
𝐵 and 𝑇 𝐴
Second, an attacker can launch Eclipse attacks to block
the global view of the victim pool manager [11]. With Eclipse
attacks, the attacker can filter out 𝑇 𝐴
𝐴′ to ensure the pool man-
ager only sees 𝑇 𝐴
𝐵 . However, successfully launching Eclipse
attacks against the victim pool requires a non-trivial cost.
Suppose the victim pool manager chooses to record 𝑇 𝐴
𝐵
instead of 𝑇 𝐴
𝐴′ in B-FAW/B-PAW. An attacker will firstly en-
capsulate the bribery transaction 𝑇 𝐴
𝐵 when calculating shares
in her infiltration mining power since “0-lead” racing can only
be caused by the withheld FPoWs. Second, after discovering
an FPoW, the attacker withholds the FPoW, broadcasts 𝑇 𝐴
𝐴′
in the network, and sends 𝑇 𝐴
𝐵 to the (corrupted/eclipsed)
victim pool manager. Third, when other miners find a block,
the attacker immediately submits the withheld FPoW to the
pool manager to cause a fork. Notice that when the next
FPoW is also found by the infiltration mining, the attacker
should submit immediately to the manager immediately to
win in forks as with selfish mining. Therefore, the second
round of infiltration mining does not need to contain bribes.
Let’s first consider “0-lead” racing in B-PAW. We first con-
sider the attacker races with other miners. When the target
accepts the bribes, the attacker’s branch can be extended by
herself, victim pool miners, the target, or 𝛾 portion of other
miners. Second, when the attacker races with the target, her
branch can be extended by herself, victim pool miners, or
𝛾 portion of other miners. In either scenario, the attacker
needs to pay one block of bribes. For other cases (not “0-lead”
racing), the attacker’s reward is the same as the PAW reward.
Therefore, we can derive the attacker’s reward in “0-lead”
racing.
We compare the attacker’s reward with FAW, PAW, and
B-PAW (target accepting bribes) in a specific case, where the
attacker, victim pool, and target with computational power
0.1, 0.2, 0.2 respectively. The attacker will set 𝜀 = 0.02 as
bribes. We show attacker’s RERs in terms of 𝛾 in Fig. 16.
When the attacker chooses a proper 𝜀, the B-PAW reward
will be higher than both PAW and FAW reward.
Figure 16: Attacker’s RERs against one pool with FAW, PAW,
and B-PAW, according to 𝛾 when the attacker, victim pool,
and target with computational power 0.1, 0.2, 0.2 respec-
tively.
H ORIENTED BRIBERY ATTACKS
The original bribery attacks adopt transactions with scripts
allowing anyone to claim the bribes. It may result in many
targets race to claim the funds. A large pool may not willing
to compete with other solo miners for the bribes. Besides,
original bribery attacks cannot control the size of target
pools. To overcome these limitations, we suggest that the
attacker create transactions (𝑇 𝐴
𝐵𝑖 ) to specific targets (𝐵𝑖) in
her private chain and spend the bribes on the public chain.
Since creating a transaction only needs the public key of the
receiver (i.e., hash of 𝐵𝑖’s public key), 𝑇 𝐴
𝐵𝑖 can be created
without the confirmation of 𝐵𝑖. The targets will get the
bribes automatically when the attacker’s branch is selected
as the main chain (without competing with other miners). To
obtain the public key, the attacker can join in the target pool
or just check out the previously mined blocks by the target
(the hash of the public key is included in the transaction
to claim the system reward, and is accessible for anyone).
Attackers can also use the oriented bribery attacks to lure
better targets with higher bribes.
00.10.20.30.40.50.60.70.80.910.511.522.53Extra Relative Revenue (%)B-PAWPAWFAW