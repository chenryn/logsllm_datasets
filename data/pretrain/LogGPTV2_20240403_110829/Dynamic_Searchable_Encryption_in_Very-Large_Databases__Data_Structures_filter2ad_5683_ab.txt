O(m), O(1)
O(r), O(1)
O(r), O(1)
—
—
—
O(|Wid|)
—
O(|Wid|)
O((r log n)/p), O(1)
O(|Wid| + m log n)
O(r/p), O(1)
O(r/p), O(r)
—
—
O((r + dw)/p), O(1) O(|Wid| + m log n)
Fig. 1. Comparison of some SSE schemes. Many leakages can be replaced by upper bounds and some search times assume interaction when the original
paper was non-interactive. Legend: In security, “Ad” means adaptive security, Adro means adaptive security in the random oracle model, and NonAd means
non-adaptive security. Ind Leakage is leakage from encrypted database only. Search comm. is the size of the message sent from client (O(r) from the server
is inherent.) ro means random oracle model, n = # documents, N = !w |DB(w)|, m = |W|, M = maxw |DB(w)|, r = |DB(w)| for the query w, p = #
processors, |Wid| = # keyword changes in an update, EP(Wid) = structural equality pattern of changed keywords (see discussion at the end of Section IV), dw
= the number of times the searched-for keyword has been added/deleted.
RAM move it further towards practicality [11], [20], but it is
far from clear that they are competitive with SSE schemes
at scale as one must implement the plaintext searching as an
abstract RAM program and then run this program underneath
the ORAM scheme without
leaking information, say, via
timing.
ORGANIZATION. Preliminary deﬁnitions are given in Sec-
tion II. Our non-dynamic (i.e., static) SSE constructions are
given in Section III, and the dynamic extensions are given
in Section IV. Finally we report on our implementation in
Section V.
II. DEFINITIONS AND TOOLS
The security parameter is denoted λ. We will use the
standard notions of variable-input-length PRFs and symmetric
encryption schemes (c.f. [16]). For these primitives we make
the simplifying assumption that
their keys are always in
{0, 1}λ, and that key generation for the encryption scheme
picks a random key. Some of our constructions will be ana-
lyzed in the random oracle model [1], with the random oracle
denoted H.
Our constructions will use a symmetric encryption scheme
that
is assumed to have pseudorandom ciphertexts under
chosen-plaintext attack, which we call RCPA security. For-
mally, this says than an adversary cannot distinguish an oracle
returning encryptions of chosen messages from one returning
a random string with length equal to a fresh ciphertext for the
chosen message.1
SSE SCHEMES. We follow the formalization of Curtmola et
al. [7] with some modiﬁcations discussed below. A database
DB = (idi, Wi)d
i=1 is a list of identiﬁer/keyword-set pair-
swhere idi ∈{ 0, 1}λ and Wi ⊆{ 0, 1}∗. When the DB under
consideration is clear, we will write W = "d
i=1 Wi. For a
keyword w ∈ W, we write DB(w) for {idi
: w ∈ Wi}.
We will always use m = |W| and N = !w∈W |DB(w)|
to mean the number of keywords and the total number of
keyword/document matches in DB.
1Our constructions can be proved secure assuming a type of key anonymity
property, but RCPA is simpler and is anyway achieved by many efﬁcient
constructions.
A dynamic searchable symmetric encryption (SSE) scheme
Π consists of an algorithm Setup and protocols Search and
Update between the client and server, all ﬁtting the syntax
below. We assume that the server is deterministic, and that
the client may hold some state between queries. A static SSE
scheme is exactly the same, but with no Update protocol.
Setup takes as input a database DB, and outputs a secret key
K along with an encrypted database EDB. The search protocol
is between a client and server, where the client takes as input
the secret key K and a query w ∈{ 0, 1}∗ and the server takes
as input EDB and the server outputs a set of identiﬁers and the
client has no output. In the Update protocol the client takes
as input a key K, an operation op ∈{ add, del, edit+, edit−},
a ﬁle identiﬁer id, and a set Wid of keywords. These inputs
represent the actions of adding a new ﬁle with identiﬁer id
containing keywords Wid, deleting the ﬁle with identiﬁer id,
or add/removing the keywords in Wid from an existing ﬁle. At
the end of the Update, the server outputs an updated encrypted
database, and the client has no output.
We say that an SSE scheme is correct if the search protocol
returns the (current) correct results for the keyword being
searched (i.e., DB(w)), except with negligible probability.
(More precisely, this should hold for every database DB, after a
polynomially unbounded number of updates. We defer details
to the full version.) To simplify the formalism we ignore the
case where the client attempts to add a ﬁle with an existing
identiﬁer or delete/edit with an identiﬁer that is not present
in DB. Our protocols (and implementations) can handle these
cases cleanly.
DISCUSSION. For simplicity our formalization of SSE does
not model the storage of the actual document payloads. The
SSE literature varies on its treatment of this issue, but in all
cases one can augment the schemes to store the documents
with no additional leakage beyond the length of the payloads.
Compared to others we model also modiﬁcations of documents
(edit+, edit−) in addition to add and delete of complete doc-
uments (add, del) as this can lead to more efﬁcient protocols
with reduced leakage.
The correctness deﬁnition for SSE requires the server to
learn the ids of the results. One could deﬁne correctness to
require the client to learn the ids instead. The two approaches
are essentially equivalent assuming that encrypted documents
3
are of ﬁxed length.
SECURITY. Security [5], [7], [15] follows the real/ideal simula-
tion paradigm and is parametrized by a leakage function L that
describes what a secure protocol is allowed to leak. Formally,
L is a stateful party in an ideal security game, which is deﬁned
below.
Deﬁnition 1: Let Π= ( Setup, Search, Update) be a dy-
namic SSE scheme and let L be a leakage function. For
algorithms A and S, deﬁne games RealΠ
A,S(λ)
as follows:
A(λ) and IdealΠ
RealΠ
A(λ): A(1λ) chooses DB. The game then runs (K, EDB)
← Setup(DB) and gives EDB to A. Then A repeatedly
requests to engage in the Search or Update protocols, where
A picks a client input in. To respond, the game runs the Search
or Update protocol with client input (K, in) and server input
EDB and gives the transcript to A (the server is deterministic
so this constitutes its entire view). Eventually A returns a bit
that the game uses as its own output.
IdealΠ
A,S(λ): A(1λ) chooses DB. The game runs EDB ←
S(L(DB)) and gives EDB to A. Then A repeatedly requests
to engage in the Search or Update protocols, where A picks a
client input in. To respond, the game gives the output of L(in)
to S, which outputs a simulated transcript
that is given to
A. Eventually A returns a bit that the game uses as its own
output.
Π is L-secure against adaptive attacks if for all adversaries
A there exists an algorithm S such that
Pr[RealΠ
A(λ) = 1] − Pr[IdealΠ
A,S(λ) = 1] ≤ neg(λ).
We deﬁne L-security against non-adaptive attacks in the same
way, except that in both games A must choose all of its queries
at the start, L takes them all as input, and S uses the output
of L to generate EDB and the transcripts at the same time.
We also obtain adaptive and non-adaptive security deﬁnitions
for static SSE schemes by disallowing adversary queries for
Update.
DATA STRUCTURES. Our constructions will employ the stan-
dard data structures of lists, arrays, and dictionaries. We
formalize a dictionary data type in detail because its syntax
is relevant
to our security analyses. Below, when we say
label,data, or data structure, we mean bitstring and will treat
them as such in the analysis.
i=1, where each label
An dictionary implementation D consists of four algorithms
Create, Get, Insert, Remove. Create takes a list of label-data
pairs ("i, di)m
is unique, and outputs
the data structure γ. On input γ and a label ", Get(γ, " )
returns the data item with that label. On input γ and (", d),
Insert(γ, (", d)), outputs an updated data structure, that should
contain the new pair. On input γ and ", Remove(γ, " ) outputs
an updated data structure with the pair removed.
We deﬁne correctness in the obvious way, i.e., the output
of Get is always the data with the (unique) label it is given
as input, and that it returns ⊥ when no data with the label is
present.
4
We say that a dictionary implementation is history-
independent if for all lists L the distribution of Create(L)
depends only on the members of L and not their order in the
list. The Create algorithm may be randomized or deterministic
and satisfy history-independence. This simplest way to achieve
it is to sort L ﬁrst, but for large lists this will be infeasible.
We note that we only need the ability to remove data in
some limited uses of dictionaries. In all settings were we need
a very large dictionary, we can use an add-only version of the
data structure.
EXTENSIONS AND GENERALIZATION. Two works [3], [13]
showed that data structures for single-keyword SSE can be
generalized to work for more complex SSE functionalities
and models. Speciﬁcally, [3] shows how to extend SSE data
structures to perform boolean queries on encrypted data (via
the OXT protocol), and [13] further extends this functionality
to more complex multi-user SSE settings. As a result, all
the data structures in this paper, including their associated
operations, their extreme efﬁciency and dynamic (updatable)
capabilities, can be readily used to support these richer func-
tional settings. All that is needed is to extend the data stored in
these data structures from simple document identiﬁers (in the
basic SSE case) to other associated data such as an encrypted
key in the case of multi-client SSE (a key used by clients to
decrypt documents) or protocol-speciﬁc values (such as the
‘y’ value in the OXT protocol from [3]). As a consequence,
our advancement on the practicality and scale of SSE data
structures immediately translates into the ability to support
very large and dynamic databases even for functionalities as
involved as full boolean SSE search in single- and multi-client
SSE settings. We provide concrete evidence of this practical
impact in Section V-E where we report performance numbers
on query execution in these complex settings.
III. STATIC CONSTRUCTIONS
Let D = (Create, Get, Insert, Remove) be a dictionary
implementation, F be a variable-input-length PRF, and Σ=
(Enc, Dec) be a symmetric-key encryption scheme.
BASIC CONSTRUCTION. In Figure 2 we give our ﬁrst and
simplest construction, denoted Πbas. To build the encrypted
database, Setup(DB) chooses a key K and uses it to derive
per-keyword keys for a PRF (to derive pseudorandom labels)
and for encryption (to encrypt the identiﬁers). Then for each
keyword w, it it iterates over the identiﬁers in DB(w). For
each identiﬁer, it computes a pseudorandom label by applying
the PRF to a counter, encrypts the identiﬁer, and adds the
label/ciphertext pair to a list L. After all of the results have
been processed it builds the dictionary γ from L, which
becomes the server’s index. It is important that L is sorted
by the labels before being loaded into the dictionary, or that
the dictionary satisﬁes history independence - Without one of
these, the scheme will leak information about the order in
which the input was processed.
To search for keyword w, the client re-derives the keys for
w and sends them to the server, who re-computes the labels
and retrieves and decrypts the results.
LEAKAGE FUNCTION. The leakage function L for our ﬁrst
construction responds to an initial startup query, and to search
Setup(DB)
1. K $←{ 0, 1}λ allocate list L
2. For each w ∈ W :
K1 ← F (K, 1’w), K2 ← F (K, 2’w)
Initialize counter c ← 0
For each id ∈ DB(w) :
" ← F (K1, c); d ← Enc(K2, id); c++
Add (", d) to the list L (in lex order)
Set γ ← Create(L)
3. Output the client key K and EDB = γ.
Search
Client: On input (K, w),
K1 ← F (K, 1’w), K2 ← F (K, 2’w)
Send (K1, K2) to the server.
Server: For c = 0 until Get returns ⊥,
d ← Get(γ, F (K1, c)); m ← Dec(K2, d)
Parse and output id in each m
Fig. 2. Scheme Πbas.
queries, where its behavior is deﬁned as follows. We describe
the interactive stateful leakage function for the adaptive deﬁni-
tions; The non-adaptive leakage function is the obvious version
that iterates over the queries with the adaptive leakage function.
On initial input DB, L outputs N = !w∈W |DB(w)|, saves
DB and an empty list Qsrch as state. Then, for a search input
w, L increments i, adds (i, w) to Qsrch and outputs DB(w)
and a set sp(w, Qsrch), called the search pattern for w, deﬁned
by
sp(w, Qsrch) = {j : (j, w) ∈ Qsrch}.
The search pattern indicates which other queries were also for
the keyword w, and represents the fact that our scheme will
send the same message when a search is repeated.
We deal with non-adaptive L-security ﬁrst.
Theorem 2: Πbas
is correct and L-secure against non-
adaptive attacks if F is a secure PRF and (Enc, Dec) is RCPA-
secure.
Proof sketch: Without loss of generality we assume an ad-
versary never repeats a query, as this obviously will not help
because our search protocol is deterministic. Correctness holds
because collisions amongst the labels produced by F occur
with negligible probability in a random function and hence
also with the PRF F . To prove non-adaptive security we must
give a simulator that takes as input the leakage output setting
up DB (which is N ) as well as the leakages on each of the
queries (which are just the sets DB(wi) of identiﬁers matching
the i-th query, assuming all queries are unique). We need to
produce the view of the server, which is the EDB data structure
along with the messages from the client from each search.
The simulator iterates over the queries, choosing keys
$←{ 0, 1}λ for the i-th query, and then for each
K i
1, K i
2
id ∈ DB(wi) it computes " and d as speciﬁed in the real
Setup (using K i
2 as K1 and K2), adding each of
the pairs to a list L. Then it adds random label/data pairs
to L (still maintained in lexicographic order) until it has N
total elements, and creates a dictionary γ = Create(L). The
simulator outputs EDB = γ and the transcript for the i query
is (K i
1 and K i
1, K i
2).
A simple hybrid argument shows that the simulator’s output
is indistinguishable from the real server view. The ﬁrst hybrid
shows that selecting each K1, K2 at random is indistinguish-
able from deriving them from K, by the PRF security of F .