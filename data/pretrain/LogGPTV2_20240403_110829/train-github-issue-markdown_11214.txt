The capability has been discussed here and here and here. I would like to see
a built-in way of doing this in the Typescript language itself. Sort of like a
deserializer.
JSON is the language of data. Typescript will have greater adoption if there
is an easy way to 'cast' a JSON string (or the javascript object created from
it) into an instance of a Typescript class. If it is just the javascript
object, it doesn't have methods of the class and items initialized with the
constructor.
In the links above, one challenge is complex classes, ie: instance of Car
class that has instance of Engine class in the same JSON. There is not an
elegant way of doing this. The closest is to adopt a convention for metadata
in the JSON which shows the subclass name. For example, a property like
**name** = "Engine", so the 'deserializer' knows what type of class to
instantiate for the subclass items. One suggestion to make the convention less
arbitrary would be to use metadata that Typescript adds to the javascript when
using Typescript's reflection. If that was the approach, it would probably
make sense to also create a 'serializer' that when stringifying the Typescript
instance, also included the necessary metadata.
Could there be a way to accomplish this with Typescript declaration merging or
mixins?