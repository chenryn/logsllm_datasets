associating size with a pointer is a hard program analysis problem,
currently we solve this challenge manually.
Figure 5 illustrates this process via an example. In the gure, each
oset depicted represents the address oset between the beginning
of a heap object and the current eld in the object. Given the base
address in the snapshot and offset:X, our method can obtain the
corresponding eld value. If the eld is a pointer, its value can be
further dereferenced in the snapshot to locate the next (new) heap
object. Given this new heap object’s base address and offset:Y, a
new eld can be located and so forth.
6 NON-INTERFERENCE CHECKER
In this section, we describe how we detect violations of the non-
interference property between two TCP connections.
6.1 Constructing the attack scenario
To detect violations of the non-interference property between two
connections, we craft an attack scenario that is similar to what
was captured in the illustrative example (Figure 2). The scenario
consists of two servers (Server1 and Sever2), two clients (Client1
and Client2), and an attacker (Figure 6). Both servers and clients
use the same self-contained model from the Model Generator. A
connection between Server1 and Client1, and Server2 and Client2 is
initialized before testing. The two connections are identical except
a specic secret relating to the victim connection. We use the con-
nection between Client1 and Server1 to model the case when the
guessed secret is correct, and use the connection between Client2
and Server2 to model the case when the guessed secret is wrong.
Ideally, to nd all possible side-channel vulnerabilities, the at-
tacker (test-harness) should exhaustively generate all possible in-
put packet sequences, including both spoofed packets (with the IP
address of the victim clients) and packets on its own legitimate con-
nection. Unfortunately, given the unbounded search space, this is
simply infeasible. So our test-harness only enumerates all possible
input packet sequences up to a bound (i.e., performs bounded model
checking). Once the test-harness generates a packet sequence, it
sends the same sequence to both servers. Because only the secret
attribute is dierent for the two victim connections, if the packets
received from the two servers are dierent (including the number
of packets, the pattern/order of received packets, the contents, etc.),
the non-interference property is violated and the secret is leaked.
The counter-example (packets being sent from the attacker) is then
reported as violations by the model checker.
To reduce the eort of the attacker and to make the model more
deterministic, we keep the victim connections “idle” during the
model checking (i.e., neither the victim client or the server will
actively send packets in our model). By doing so, we can be sure
that dierences in the received packet sequence are indeed caused
by the spoofed packet sequence. If the server and client are ac-
tively exchanging packets, it becomes hard to identify a violation
(dierences may simply be due to those exchanges).
6.2 Secrets of interest
Our focus in this work is on identifying side-channel vulnerabilities
that result in the leakage of three specic secret attributes of a
4We set the secret as whether the specic port is being used by the victim connection.
Figure 5: Using oset chains to locate the target variables
during initialization.
executions. Such environmental variables include the entry func-
tion’s arguments, global variables, and heap objects that may be
accessed or reachable by the code extracted above. We point out
that there is no need to initialize local variables or heap objects that
are allocated (and initialized) during the execution of the model.
Manual identication of all the variables that have to be ini-
tialized is not only an onerous task but is also error-prone. Thus,
we develop an automated procedure to initialize them based on a
memory snapshot from a running kernel, which is captured when
the entry function is invoked, Because our standalone model runs
in user-space, values from the snapshot cannot be directly used
as they could be pointers. So our method needs to (1) identify all
accessible variables and their types, (2) locate each target variable
in the snapshot (i.e., determine its address), (3) extract its value
according to its type and size. Finally, this will allow us recreate
the variables and initialize their values in the model checker.
We achieve these goals via a process that is similar to previous
work on recovery of kernel objects from memory snapshots [8].
First, starting from anchor variables (i.e., entry function’s argu-
ments and global variables explicitly referred to in the model), we
use static taint analysis to recursively identify all accessible/reach-
able heap and global objects by following pointers. Due to the exis-
tence of typecasting, we identify pointers in two ways: (1) based
on the variable/eld’s declaration type and (2) based on the use of
the variable/eld.
To locate variables inside the memory snapshot, we maintain the
point-to relationship between kernel objects in a data structure that
we call oset chain, which tracks how each variable is derived from
an anchor variable and the used type associated with the variable.
The oset chain allows us to traverse the snapshot and recover the
corresponding variables.
Once we locate a variable inside the snapshot, we extract its
“initialization” value based on whether it is a pointer or not. For non-
pointer variables, we will directly use its value from the snapshot;
for pointer variables, we will allocate the target variable statically
in the model checker and assign the target object’s address as the
initialization value. One particular challenge in this step is how to
decide the size of the variable if its type is an array with unknown
size. For example, in Linux, the packet header pointer skb->head is
a pointer to an unsigned char, which can be used to visit the packet
payload with a specic oset (via a value of header eld doff). As
packet interactions in TCP connection
normal packet
spoofed packet
secret
Client1
Server1
Scenario1
Scenario2
Attacker
Client2
Server2
secret
Figure 6: Our setup for the scenario relating to non-
interference property verication.
Table 1: The 6 dierent secret settings of interest (The initial
state captures the victim socket state at the server side)
Initial State
secret
SYN-RECEIVED
ESTABLISHED
port no.4
SEQ ACK port no.
SEQ ACK
connection viz., port number, SEQ number, and ACK number. While
there could be other sensitive information (e.g., that reveals the
socket state), we focus on these since they have been shown to
be exploitable for DoS or connection hijacking [7]; however, our
approach can be used to infer the leakage of other secrets.
To formalize, we require our model checker to verify the follow-
ing three properties with respect to non-interference. The sequence
of packets received by the attacker is identical with respect to the
two servers, regardless of :
• The port numbers used in the victim connection;
• The SEQ numbers used in the victim connection; and,
• The ACK numbers appearing in the victim connection.
While previous work only examines if and how these secrets
are leaked when the victim connection is in the ESTABLISHED
state of TCP, we extend the scope to include cases wherein the
victim is in the SYN-RECEIVED state (i.e., during the three way
handshake). This is because in this state, if the attacker can acquire
the information of interest, it can infer whether the client tried to
establish a connection with the server, or even potentially establish
a fake connection itself (by sending a spoofed SYN packet with the
client’s IP address – note that in this case, the SYN-ACK returned
by the server to the victim client is simply dropped). The latter
attack can be serious in practice, since the attacker if successful,
can subsequently inject malicious data on to the server pretending
that the data came from the spoofed client’s IP address. Thus we
have a total of 6 secrets (in the two states combined) listed in Table 1.
6.3 Bounding the input packet sequence
In this work, we focus on the control bits and the secret of interest
(port, SEQ, or ACK number) in the TCP header. All other elds are
xed, and are copied from snapshots from real connections. We
exclude the TCP header options in this work since not all systems
support these. Table 2 captures the bounded input space that the
attacker (test harness) in our scenario, generates. For elds that
have small value ranges, such as the TCP ags, we enumerate all
the possibilities, (except for FIN and congestion related ones). For
elds that have larger value ranges, we determine the range as
described below.
Recall that in our attacker scenario (Figure 6), we use the con-
nection between Client1 and Server1 to model the case when the
guessed secret is correct (the guess will automatically be wrong for
the connection between Client2 and Server2 because the secrets
are dierent). Therefore, for the eld related to a secret of interest,
the value range is decided based on the concrete values from the
connection between Client1 and Server1. Assume that on Client1’s
side, the port number, SEQ number, and ACK number are P, S, and
A, respectively. We will always set the port number of all gener-
ated packets to P, because this allows us to exercise the scenario
where we made a correct guess of the port number of the connec-
tion between Client1 and Server1, and a wrong guess of the port
number of the connection between Client2 and Server2. For the
SEQ number and ACK number, because the TCP stack performs a
range check, we want to simulate cases where the guessed number
is close to, but not equal to the correct number. For this reason, we
enumerate the range [S   2, S + 2] and [A   2, A + 2]. Currently,
we limit these variables to this range, because with our automated
downscaling (of the receive window), the enumerated cases are
enough to explore all three of the following cases with respect to
those numbers: (a) outside the receive window, (b) exact match, and
(c) within the receive window.
We currently limit the range of the payload size to [0, 2]. This
range allows our model transformer to downscale packet size re-
lated checks; yet, it will not signicantly increase the input space
or the state space.
Finally, we determine the packet length through empirical exper-
iments, i.e., given that the ranges of each packet’s elds are xed,
we try to enumerate as many packets as possible until the model
checker either exhausts the memory or takes a prohibitively long
time to nish. On our evaluation platform, we can only enumerate
a maximum packet sequence length of 3.
6.4 Deduplication
Since dierent input sequences can trigger the same vulnerability,
the counter-examples can also be duplicated. To nd distinct vul-
nerabilities, we follow a similar approach as semantic crash bucket-
ing [43]: given a counter-example, we use the branch trace recorded
for the model transformer (§7) to locate the key branch/constraint
that leads to the dierent behavior and “patch” the branch so that
the counter-example will no longer yield the dierent behavior. One
can consider this as the opposite process compared to our model
transformation process. Then, we run all the counter-examples
again. All the other counter-examples that no longer yield the dif-
ferent behavior will be considered to be duplicates.
7 MODEL TRANSFORMER
In this section, we describe how we practically realize the vision
of automated downscaling using an iterative approach. We begin
with a limited input space and execute bounded model checking.
Table 2: Packet elds enumeration ranges. C1 means the corresponding value used by Client1 in our attack scenario. Packet
with IP equal to C1 is spoofed packet, while packet with IP equal to Attk is on attacker’s own connection.
IP
Original range
[0, 2^32)
Bounded range C1/Attk
SEQ Num
[0, 2^32)
[C1-2, C1+2]
ACK Num
[0, 2^32)
[C1-2, C1+2]
Packet Fields
SYN ACK RST PSH URG Payload Size
0/1
0/1
[0-1460)
[0-2]
0/1
0/1
0/1
0/1
0/1
0/1
0/1
0/1
Length of
Packet Sequence
Innite
3
During the process, we log information relating to the code that are
not covered but relate to xed limits (discussed earlier). We then
apply concolic executions to determine how these limits must be
transformed (ipped), to make the code coverage feasible while
adhering to the inherent constraints imposed by the chosen, limited
input space. The transformed model is then re-considered (in the
next iteration) and the process is repeated until we do not nd any
new transformations that can be performed or when we exceed a
pre-specied time limit. We describe these steps in detail below.
7.1 Identifying target branches
Given the above premise, our rst challenge is to locate branches
we aim to ip. To do so, we instrument our model so as to trace
all the branch instructions and dump their conditions during the
model checking phase. Then we parse the trace and look for branch
conditions (a relation operation like ) that have one operand
that varies (e.g., a stateful variable), while the other operand is
always a xed value. Next, we check if both the true branch and
false branch are visited during model checking; if only one branch
is visited, we have found a target branch.
7.2 Determining expected values
After identifying the target branch, the next step is to determine
the expected value. Given that the other operand imposes a range
[l, h], we have two general options: we can either move the xed
value to the other side of the range (> h or < l) or move it to the
middle of the range. In this work, we choose to move the value
to the middle of the range for the following reason. The goal of
the non-interference checker is to nd a behavior that diers be-
tween Server1 and Server2 when handling the same input sequence.
One reason such a dierence can arise is Server1 and Server2 tak-
ing dierent paths at the same branch. For a target branch, the
input sequences we enumerate can only go down one path, with
both servers; otherwise we would have observed these cases. So
if we move the xed operand to the other side of the range, the
input sequence still can only go down only one path, which is not
particularly useful for revealing potential dierent outputs.
7.3 Identifying targets for transformation
The goal of our model transformer is to rewrite the program so that
our limited input packet sequence can visit both the true and false
conditions of a branch. After identifying a target branch, there are
multiple ways to rewrite the program to achieve this goal. One way
is to replace the relational operation with one that compares the
variable operand with a smaller but xed constant. However, this
simple approach could introduce inconsistencies when the operand
with the xed value is derived from one or more program variables
that are also used in other constraints (e.g., branch conditions). To
avoid potential false positives or false negatives introduced by such
inconsistencies, we choose to modify the source variables during
initialization, instead of directly patching the branch.
There are two general approaches to identify the source vari-
able(s), data-ow (taint) analysis and symbolic execution. Because
the source variable(s) could go through a series of operations before