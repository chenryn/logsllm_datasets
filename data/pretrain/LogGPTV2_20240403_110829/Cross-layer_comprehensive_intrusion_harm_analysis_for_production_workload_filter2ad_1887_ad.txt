### Shell to Download and Install the ARK Rootkit

The shell script is designed to download and install the ARK rootkit, which replaces system binaries (e.g., `syslogd`, `login`, `sshd`, `ls`, `ps`, `netstat`, etc.) with backdoored versions. We rely on Intrusion Detection Systems (IDS) to detect modifications of system binaries through integrity checks. 

By leveraging backward system call dependency tracking, tools like PEDA, SHELF [19], and Backtracking [11] can identify `ssh` as the system-object-level intrusion root. However, neither SHELF nor Backtracking can locate the malicious kernel hook modifications introduced by the adore rootkit. Instead, they are only capable of diagnosing the intrusion infection caused by the ARK rootkit due to their system call flow auditing. In contrast, the fine-grained intrusion root identification of PEDA can audit the system calls issued by `ssh` and identify the disk sectors containing the downloaded rootkits (adore and ARK) as taint seeds. By applying dynamic taint tracking and semantics reconstruction, PEDA can capture not only the damage identified by SHELF and Backtracking but also the intrusion harm caused by the kernel hooks modified by the adore rootkit, such as the replaced `sys_write` function.

### 6. Limitations

In this section, we discuss the limitations of the PEDA system. First, the automatic intrusion backtracking is not 100% accurate, especially at the granularity of memory cells or disk sectors. The PEDA system relies on intrusion backtracking to locate the fine-grained intrusion root, which is then provided as a taint seed to the infection analyzer. To reduce false positives in PEDA's intrusion harm analysis results, the intrusion backtracking process involves some human intervention to accurately locate the fine-grained intrusion root.

Second, for replaying the execution of a busy server with a significantly high workload, the amount of non-deterministic events that need to be recorded can be substantial. In such cases, it may not be feasible for PEDA to store a history of events that is much longer than the expected intrusion detection delay. Consequently, if the intrusion is detected long after its occurrence, the first compromised execution cannot be completely replayed due to the removal of old non-deterministic event logs.

### Figure 5: Fine-Grained Intrusion Root Identification

To demonstrate the comprehensiveness and precision of our intrusion analysis, we conducted two case studies of real-life intrusions. Due to page limitations, we present detailed results from the first case study, focusing on fine-grained intrusion root identification and dynamic taint tracking. For the second case, we highlight the advancements of the PEDA system over previous system-call-level intrusion analysis methods.

#### 5.2.1 Case Study 1

**Attack Scenario:**
1. The attacker logs into the server system using an unprivileged user account via SSH.
2. They download a Linux NULL pointer dereference exploit and launch the attack [2] to gain root privileges.
3. The attacker then mails back, examines, and modifies the `syslog.conf` file to redirect system logs to their email account.
4. Finally, they delete all files under the `/var/log/` directory to hide their intrusion footprint.

**Fine-Grained Intrusion Root Identification:**
We assume that the IDS detects the maliciously modified `syslog.conf` file and the missing files under the `/var/log/` directory. These intrusion symptoms are notified to the PEDA system. We start the intrusion root identification from these detected symptoms and trace the automatically-generated dependency graph backward. We tailor the intrusion flows at the system object level from the dependency graph and locate the system-object-level intrusion root, `wget`. Figure 5 illustrates the fine-grained intrusion root identification procedure. We audit the system calls issued by `wget` to identify the buffers containing the intrusion packet. Finally, we obtain the disk sectors used to store the intrusion packet, which serves as a fine-grained taint seed for infection diagnosis.

**Infection Diagnosis:**
To provide sufficient information about the intrusion behavior, including how the intrusion occurs and what has been infected, we perform whole-system dynamic taint tracking from the disk sectors containing the intrusion packet during replay. Due to space limitations, Figure 6 presents only a partial outcome of our infection diagnosis. The rectangles denote memory address spaces or disk sectors on the server system, while the ellipses attached to each rectangle include the OS semantics from our analysis.

### 7. Related Work

First, our fine-grained intrusion root identification is implemented by integrating backward system-object dependency tracking [11] and forward instruction flow taint analysis. This is the first attempt to bridge the gap between forward fine-grained analysis and backward system-object intrusion root identification. As a general intrusion analysis tool, PEDA advances existing system-object-level analysis in terms of intrusion harm comprehensiveness and precision, as shown in our second case study in the evaluation section.

VM replay is a relatively mature technique in the VM industry (e.g., VMware). However, replaying on another heterogeneous VM is less common and presents new challenges, such as device emulation incompatibilities. Aftersight [6] is the first work to address these issues. Below, we discuss the differences between our work and Aftersight.

Aftersight is a generic technology for decoupling dynamic program analysis from execution, enabling instruction-level analyses for various purposes, including bug finding and forensics. Aftersight records program execution and replays it on a separate analysis platform against a set of memory safety guarantee policies. This allows for heavyweight analysis during replay to find serious bugs in large, complex systems like VMware ESX Server and Linux.

In contrast, PEDA focuses on post-mortem intrusion analysis for production workload servers, from intrusion root identification to fine-grained infection diagnosis. The primary challenges for PEDA are to precisely locate the intrusion root object to patch vulnerabilities and to reasonably associate the intrusion root object with the fine-grained taint seed for comprehensive infection diagnosis. Although Aftersight and PEDA share the idea of decoupling analysis from normal execution, they aim at different types of analysis and thus face different design and implementation issues.

PEDA also differs from Aftersight in architecture design. Aftersight migrates guest server systems from a recording platform (VMware Workstation) to an analysis platform (Qemu), while PEDA does so from Xen to Qemu. Since Xen relies on qemu-dm to emulate most devices, PEDA records external inputs to each device and redelivers them during replay. Because VMware and Qemu emulate I/O devices differently, Aftersight records all outputs from each emulated device to the CPU and redelivers them during replay to bypass device emulation incompatibility.

To avoid significant runtime overhead from extensive device output logging, Aftersight adopts a "replay-based replay" approach. It records external inputs to the device during normal execution, logs device outputs to the CPU during the first replay, and finally replays the second recording for analysis. Compared to Aftersight, PEDA's approach to eliminating device emulation incompatibility is more straightforward and efficient for production workload server systems, though less generic.

Other works, such as Repairable File Service [23], Intrusion Recovery [22], and Backtracking [11], also help security administrators with intrusion analysis. These systems log system calls during execution and use them to track the flow/dependency between system objects. However, this coarse-grained dependency tracking often fails to capture the full footprint of an intrusion because attackers can craft programs with direct memory load/store instructions that evade system call-level auditing. PEDA, on the other hand, applies fine-grained instruction flow taint tracking to capture intrusion propagation with both comprehensiveness and precision.

Both Backtracking [11] and PEDA use backward tracking from detected intrusion symptoms to locate the intrusion root. However, Backtracking only identifies the system-object-level intrusion root, typically a process. To provide the infection analyzer with fine-grained taint seeds, PEDA extends Backtracking to "dive" further into memory cells or disk storage segments. This integration allows PEDA to effectively combine backward system object intrusion root identification with forward fine-grained taint analysis.

### 8. Conclusion

PEDA is a systematic approach for post-mortem fine-grained intrusion analysis of production workload servers. It helps security technicians quickly identify the fine-grained intrusion root and precisely pinpoint the infection propagation throughout the server. PEDA effectively decouples the analysis from online server execution by integrating backward system call dependency tracking and forward fine-grained taint analysis. The proposed heterogeneous VM migration significantly reduces the runtime overhead of online server execution. Our evaluation demonstrates PEDA's advantages over existing intrusion analysis systems in terms of efficiency and comprehensiveness. We believe that the comprehensive intrusion analysis functionality of PEDA will have a profound impact on any system recovery framework.

### 9. Acknowledgments

We extend our thanks to our shepherd, Reiner Sailer, for valuable feedback and constructive suggestions. We also thank all the anonymous reviewers for carefully reading the drafts and providing helpful revision comments. This work was supported by AFOSR FA9550-07-1-0527 (MURI), ARO W911NF-09-1-0525 (MURI), NSF CNS-0905131, and AFRL FA8750-08-C-0137.

### 10. References

[1] Intel i/o apic datasheet. http://www.intel.com/design/chipsets/datashts/290566.htm.

[2] Linux null pointer dereference. http://archives.neohapsis.com/archives/fulldisclosure/2009-08/0174.html.

[3] F. Bellard. Qemu, a fast and portable dynamic translator. USENIX Annual Technical Conference, 2005.

[4] T. C. Bressoud and F. B. Schneider. Hypervisor-based fault tolerance. ACM Transactions on Computer Systems, pages 80–107, 1996.

[5] P. M. Chen and B. D. Noble. When virtual is better than real. HotOS, 2001.

[6] J. Chow, T. Garfinkel, and P. M. Chen. Decoupling dynamic program analysis from execution in virtual environments. USENIX Annual Technical Conference, 2008.