### Selected Function: NtAlpcCreatePort

The goal here is not to select a specific set of functions, but rather to make a selection based on some criteria. It's often a good idea to choose functions that are familiar or sound interesting, and then follow a learning path from there.

The list of no-component ALPC functions contains many names with "CompletionList," which may or may not be familiar. The list of Nt ALPC functions, on the other hand, appears more diverse. Based on the Nt component naming convention, these functions are likely gateway functions from user-land to kernel-land. Let's select one of these functions and start the reverse engineering process.

There is no right or wrong in choosing a function. You might be lucky and pick a function that is used in the early stages of an ALPC setup, providing further hints on how to use ALPC. Alternatively, you might unknowingly pick a function that is only used for special ALPC scenarios. The joy of undocumented stuff!

Since we can't know which function is a good starting point, let's choose one that sounds like it is used at the beginning of a process, such as something with "Create" in its name. I'll select `NtAlpcCreatePort`.

### Analyzing NtAlpcCreatePort in Ghidra

Let's open Ghidra and examine the `NtAlpcCreatePort` function within `ntdll.dll`.

#### Initial Analysis in Ghidra
The decompiled code in Ghidra shows a syscall being made with no arguments, and the function returns the integer `0x79`. This looks odd and not very helpful.

#### Verifying with Assembly Code
Double-checking the decompiled code with the actual assembly instructions reveals a different picture. The integer value `0x79` is moved into the EAX register, and then the syscall is made.

#### Verification with IDA Free
To confirm, let's check the same function in IDA Free. The disassembly in IDA Free confirms that the function moves `0x79` into EAX and makes a syscall. This makes more sense.

**Takeaway:** Ghidra is a great tool, but its decompilation feature can sometimes be unreliable, even for simple functions. However, automated decompilation is a significant feature provided for free, so a bit of manual double-checking is acceptable.

We've determined that the `NtAlpcCreatePort` function in `ntdll.dll` calls into kernel mode using the syscall number `0x79` (121 in decimal).

### Next Steps

From here, we have three options to continue:

1. **Head to the Kernel Directly:** Look for a function with a similar name in the kernel. This is the least reliable method.
2. **Lookup the Syscall Number Online:** Find the corresponding kernel function using online resources.
3. **Manually Step Through the Process:** Resolve the syscall number on your host system. This is the most reliable method.

Let's skip the first option and explore the second and third options.

#### Lookup Syscall Number Online
One of the best resources for looking up syscall numbers is [j00ru.vexillium.org/syscalls/nt/64/](https://j00ru.vexillium.org/syscalls/nt/64/). For my Windows 10 20H2 system, this resource points to a kernel function named `NtAlpcCreatePort`.

#### Manually Stepping Through the Syscall
I learned and applied the process from [www.ired.team](http://www.ired.team). Here are the steps:

1. **Set a Breakpoint in ntdll:**
   ```plaintext
   kd:> bp ntdll!NtAlpcCreatePort
   ```

2. **Verify the Breakpoint:**
   ```plaintext
   kd:> bl
   ```

3. **Run the Debuggee Until the Breakpoint is Hit:**
   ```plaintext
   kd:> g
   ```

4. **Ensure We Are at the Correct Location:**
   ```plaintext
   kd:> u .
   ```

5. **Lookup the Offset in the SSDT:**
   ```plaintext
   kd:> dd /c1 kiservicetable+4*0x79 L1
   ```

6. **Check the Address of the Syscall Function:**
   ```plaintext
   kd:> u kiservicetable + (02b62100>>>4) L1
   ```

Using either of these methods, we find that `ntdll!NtAlpcCreatePort` calls into the kernel at `nt!NtAlpcCreatePort`.

### Hunting an ALPC Object

Now that we know we end up calling the kernel in `nt!NtAlpcCreatePort`, let's dive deeper. We can use IDA Free (or Ghidra) to open `ntoskrnl.exe` from the system directory, load Microsoft's public symbols, and find the `NtAlpcCreatePort` function.

Following the initial function calls, we see a call to `ObCreateObjectEx`, which is an ObjectManager (Ob) function to create a kernel object. This suggests that our ALPC object is created here. IDA also indicates the type of object, `AlpcPortObjectType`.

To get a better understanding, let's switch back to WinDbg and set a breakpoint right after the `ObCreateObjectEx` call to inspect the created object.

#### Setting the Breakpoint in WinDbg
```plaintext
kd:> bp /p @$proc fffff803733823c9
```

After setting the breakpoint and running the process, we can find the created ALPC object in the RCX register.

#### Inspecting the ALPC Port Object
We can use the `!object` command to get details about the object, but it won't provide much additional detail because it doesn't know the internal structure. We can check if there is a matching public structure inside the kernel using:
```plaintext
kd:> dt nt!*Alpc*Port
```

This leads us to the `ntkrnlmp!_ALPC_PORT` structure, which seems to be a good match. Applying this structure to our captured ALPC port object, we see that some attributes, like `OwnerProcess`, are empty. This is expected since the object has just been created.

#### Further Initialization
To see the fully initialized ALPC port, we need to jump to a location after all initialization functions are completed. Hereâ€™s what we need to do:

1. **Note Down the ALPC Object Address:**
   - Done: `ffffac0e27ab96e0`

2. **Find the End of the `AlpcpCreateConnectionPort` Function:**
   - Done: Jump to `0xfffff803733823c9`

3. **Jump to This Address Within the Same Process:**
   - Command: `kd:> bp /p @$proc fffff803733823c9`

4. **Re-apply the `_ALPC_PORT` Structure:**
   - Check the ALPC object structure again.

At this point, the ALPC port object should be fully initialized. We can use WinDbg to explore other structures and references linked to this object.

#### Example: Confirming the Owning Process
To confirm that the ALPC port object is owned by the `svchost.exe` process, we can inspect the `_EPROCESS` structure at `ntkrnlmp!_ALPC_PORT + 0x18`.

#### Exploring ALPC Port Attributes
If you want to explore further, you can check the ALPC port attributes assigned to the port object, tracked in the `nt!_ALPC_PORT_ATTRIBUTES` structure at `nt!_ALPC_PORT + 0x100`. Specifically, you can check the Quality of Service (QOS) attribute at `nt!_ALPC_PORT + 0x100 + 0x04`.

If you find an ALPC port object with a QOS impersonation level above `SecurityIdentification`, it could be a target for an impersonation attack, as detailed in my previous post, "Offensive Windows IPC Internals 3: ALPC."

In this case, the QOS level is `SecurityAnonymous`, which is not a high-risk scenario.

### Conclusion

You are now set up to explore and dig into ALPC. The initial steps may be slow, and you will likely take a few wrong turns, but this is part of the learning experience. If you enjoy reading, consider these books to deepen your understanding of Windows internals:

- **Windows Internals Part 1**
- **Windows Internals Part 2**
- **Inside Windows Debugging**
- **Windows Kernel Programming**

Enjoy your journey!