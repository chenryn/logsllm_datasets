                    win=this.balance; //...send everything we've got
                msg.sender.transfer(win);
            }
            if(block.number-lastReseed>1000) //reseed if needed
                reseed(SeedComponents((uint)(block.coinbase), block.difficulty, block.gaslimit, block.timestamp)); //generate a quality random seed
        }
在函数中，我们看到用户必须传入`value >= 0.1
eth`，并且用户还未赢得过奖励。之后合约会将`LuckyNumber`与`luckyNumberOfAddress(msg.sender)`进行比较。倘若两者的值相等，那么记录下该用户的中奖记录并进行【value
* 1.9】的转账奖励（余额不足的将所有余额转入）。
而我们在看`luckyNumberOfAddress`函数。
    function luckyNumberOfAddress(address addr) constant returns(uint n){
            // calculate the number of current address - 50% chance
            n = uint(keccak256(uint(addr), secretSeed)[0]) % 2; //mod 2 returns either 0 or 1
        }
传入一个地址，之后根据传入的地址产生随机数，并%2，得到1或0 。
然后是一个测试函数`forceReseed`。
    function forceReseed() { //reseed initiated by the owner - for testing purposes
            require(msg.sender==owner);
            SeedComponents s;
            s.component1 = uint(msg.sender);
            s.component2 = uint256(block.blockhash(block.number - 1));
            s.component3 = block.difficulty*(uint)(block.coinbase);
            s.component4 = tx.gasprice * 7;
            reseed(s); //reseed
        }
合约创建者在这个函数后面添加了注释`//reseed initiated by the owner - for testing
purposes`。表达用于测试的目的。
然而问题就是出在这个地方。
整体来看，这个合约并没有什么问题。gamble的过程也十分清晰。
然而我们进行一个合约测试。
#### 2 攻击手段分析
我们先看一个测试合约：
    pragma solidity ^0.4.24;
    contract test
    {
        address public addr = 0xa;
        uint    public b    = 555;
        uint256 public c    = 666;
        bytes   public d    = "abcd";
        struct Seed{
            uint256 component1;
            uint256 component2;
            uint256 component3;
            uint256 component4;
        }
        function change() public{
            Seed s;
            s.component1 = 1;
            s.component2 = 2;
            s.component3 = 3;
            s.component4 = 4;
        }
    }
在这个合约中，我们设置了4个变量，而这四个变量均有初始值。之后我们又设置了结构体`Seed`。在这个结构体中拥有四个变量，而我们在`test()`函数中初始化结构体并赋初值，之后我们看看效果。
部署合约：  
查看变量内容:
之后我们调用`change`函数。并查看，发现我们的变量被修改了，而修改的内容就是结构体中的内容。
这就是我们的漏洞所在。
我们的合约中并没有修改变量的值，但是由于solidity机制的问题而导致了变量修改问题。
而这个漏洞对我们上述介绍的蜜罐合约有什么影响呢？我们进行一下测试。
为了方便我们查看测试效果，我们为`LuckyNumber`添加查看函数。
倘若此时`owner`不进行任何操作，任凭用户进行下一步的赌博，那么用户还是有很大的概率获得奖励的。例如：（为了方便演示，我在函数中添加了event事件）
`emit back(msg.sender,win,true);`。
此时我们能够看到，`LuckyNumber`是初始值1 。
之后，我们更换用户进行参与。我们投入1 eth进行竞猜。
第一次：
没有获得奖励，所以1 eth赔进去了。
继续更换用户参与：
直到最后一个用户：
我们得到了奖励金`1900000000000000000 wei`，所以竞猜成功。
而我们大致能够发现，其实我们是拥有很大的概率获得奖励的。这个合约真的就是拼概率的传统赌博合约吗？然而事实并非如此。
根据我们前文所测试的漏洞，这个合约中同样存在恶意篡改的行为。我们发现了合约中其实存在着`结构体`。
而这个结构体在合约中存在修改函数：
所以，如果`owner`调用了此函数，那么会不会发起漏洞从而将竞猜值恶意修改呢？
我们更换地址为owner，并且调用此函数。
我们惊奇的发现，果然此时的竞猜值从1变成了7 。
而我们合约中的判断条件是`luckyNumberOfAddress(msg.sender) ==
LuckyNumber`。而我们函数中`luckyNumberOfAddress(msg.sender)`只能是0或者1两种可能。这里的LuckNumber是7，也就是说无论我们如何竞猜，永远都不会成功。
### 三、赌博？庄家永远更胜一筹
在看完上述的 **高级** 蜜罐后，我们来看一下常规的蜜罐合约。
合约地址为：
    pragma solidity ^0.4.19;
    // CryptoRoulette
    //
    // Guess the number secretly stored in the blockchain and win the whole contract balance!
    // A new number is randomly chosen after each try.
    //
    // To play, call the play() method with the guessed number (1-20).  Bet price: 0.1 ether
    contract CryptoRoulette {
        uint256 private secretNumber;
        uint256 public lastPlayed;
        uint256 public betPrice = 0.1 ether;
        address public ownerAddr;
        struct Game {
            address player;
            uint256 number;
        }
        Game[] public gamesPlayed;
        function CryptoRoulette() public {
            ownerAddr = msg.sender;
            shuffle();
        }
        function shuffle() internal {
            // randomly set secretNumber with a value between 1 and 20
            secretNumber = uint8(sha3(now, block.blockhash(block.number-1))) % 20 + 1;
        }
        function play(uint256 number) payable public {
            require(msg.value >= betPrice && number  lastPlayed + 1 days) {
                suicide(msg.sender);
            }
        }
        function() public payable { }
    }
为什么说蜜罐的owner更胜一筹呢？我们在阅读了合约的所有函数内容后就知道，在合约中的`shuffle()`函数%20，也就意味着它最后的范围是`0~19`，而用户能够传入的数是多少呢？在`play()`函数中，用户需要传入一个`number`，而其规定值
  * 
  * 
**本稿为原创稿件，转载请标明出处。谢谢。**