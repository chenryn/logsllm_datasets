










"








#

$

%




cials, vendors, and other insiders.
‚Ä¢ Protects against retail attacks by insiders when the
attacks do not involve compromising the physical
security of the DRE or the polling place (e.g., by
modifying the hardware or software in the DRE or
tampering with its surrounding environment).
‚Ä¢ Protects against attacks by outsiders, e.g., voters,
involve compromising
when the attacks do not
physical security.
conÔ¨Årmation screen do indeed accurately reÔ¨Çect their in-
tentions; otherwise, we will not be able to make any
guarantees about whether the voter‚Äôs ballot is cast as in-
tended. Despite our reliance on this assumption, we re-
alize it may not hold for all people. Voters are fallible
and not all will properly verify their choices. To put it
another way, our system offers voters the opportunity to
verify their vote. If voters do not take advantage of this
opportunity, we cannot help them. We do not assume
that all voters will avail themselves of this opportunity,
but we try to ensure that those who do, are protected.
We explicitly do not consider the following possible
goals:
4 Architecture
‚Ä¢ Protect against retail attacks by election insiders
and vendors when the attacks do involve compro-
mising physical security.
‚Ä¢ Protect against attacks by outsiders, e.g., voters,
when the attacks do involve compromising physical
security.
On the adversaries that we explicitly do not consider.
We explicitly exclude the last two adversaries above be-
cause we believe that adversaries who can violate the
physical security of the DRE will always be able to sub-
vert the operation of that DRE, no matter how it is de-
signed or implemented. Also, we are less concerned
about physical attacks by outsiders because they are typi-
cally retail attacks: they require modifying each individ-
ual voting machine one-by-one, which is not practical to
do on a large scale. For example, to attack privacy, a
poll worker could mount a camera in the voting booth
or, more challenging but still conceivable, an outsider
could use Tempest technologies to infer a voter‚Äôs vote
from electromagnetic emissions [18, 37]. To attack the
integrity of the voting process, a poll worker with enough
resources could replace an entire DRE with a DRE of
her own. Since this attack is possible, we also do not
try to protect against a poll worker that might selectively
replace internal components in a DRE. We assume elec-
tion ofÔ¨Åcials have deployed adequate physical security to
defend against these attacks.
We assume that operating procedures are adequate to
prevent unauthorized modiÔ¨Åcations to the voting ma-
chine‚Äôs hardware or software. Consequently, the prob-
lem we consider is how to ensure that the original design
and implementation are secure. While patches and up-
grades to the voting system Ô¨Årmware and software may
occasionally be necessary, we do not consider how to se-
curely distribute software, Ô¨Årmware, and patches, nor do
we consider version control between components.
Attentive voters. We assume that voters are attentive.
We require voters to check that the votes shown on the
We focus this paper on our design and implementation
of the ‚Äúactive voting‚Äù phase of the election process (cf.
Figure 1). We choose to focus on this step because we be-
lieve it to be one of the most crucial and challenging part
of the election, requiring interaction with voters and the
ability to ensure the integrity and privacy of their votes.
We remark that we attempt to reduce the trust in the can-
vassing phase by designing a DRE whose output record
is both privacy-preserving (anonymized) and integrity-
protected.
4.1 Architecture motivations
To see how speciÔ¨Åc design changes to traditional vot-
ing architectures can help verify properties, we will go
through a series of design exercises starting from current
DRE architectures and Ô¨Ånishing at our design. The exer-
cises will be motivated by trying to design a system that
clearly exhibits Properties 1 and 2.
Resetting for independence. A traditional DRE, for ex-
ample the Diebold AccuVote-TS, is designed as a single
process. The functions of the DRE‚Äîvalidating the voter,
presenting choices, conÔ¨Årming those choices, storing the
ballot, and administrative functions‚Äîare all a part of the
same address space.
Let us examine one particular strategy we can use to
better verify Property 1 (‚Äúmemorylessness‚Äù), which re-
quires that one voter‚Äôs selections must not inÔ¨Çuence the
voting experience observed by the next voter. Suppose
after every voter has voted, the voting machine is turned
off and then restarted. This is enough to ensure that
the voting machine‚Äôs memory will not contain any in-
formation about the prior voter‚Äôs selections when it starts
up. Of course, the prior voter‚Äôs selections must still be
recorded on permanent storage (e.g., on disk) for later
counting, so we also need some mechanism to prevent
the machine from reading the contents of that storage
medium. One conservative strategy would be to simply
require that any Ô¨Åle the DRE writes to must always be
324
Security ‚Äô06: 15th USENIX Security Symposium
USENIX Association
Figure 2: Our architecture, at an abstract level. For the properties we consider, the VoteSelection module need not be
trusted, so it is colored red.
opened in write-only mode, and should never be opened
for reading. More generally, we can allow the DRE to
read from some Ô¨Åles, such as conÔ¨Åguration Ô¨Åles, as long
as the DRE does not have the ability to write to them.
Thus the set of Ô¨Åles on permanent storage are partitioned
into two classes: a set of read-only Ô¨Åles (which cannot
be modiÔ¨Åed by the DRE), and a set of write-only Ô¨Åles
(which cannot be read by the DRE). To summarize, our
strategy for enforcing Property 1 involves two prongs:
1. Ensure that a reboot is always triggered after a voter
ends their session.
2. Check every place a Ô¨Åle can be opened to ensure
that data Ô¨Åles are write-only, and conÔ¨Åguration Ô¨Åles
are read-only.
There must still be a mechanism to prevent the DRE from
overwriting existing data, even if it cannot read that data.
We introduce a separate component whose sole job is
to manage the reset process. The BallotBox triggers the
ResetModule after a ballot is stored. The reset module
then reboots a large portion of the DRE and manages the
startup process. We use a separate component so that it
is simple to audit the correctness of the ResetModule.
We emphasize this design strategy is not the only way
to verify this particular property. Rather, it is one tech-
nique we can implement that reduces the problem of en-
forcing Property 1 to the problem of enforcing a checklist
of easier-to-verify conditions that sufÔ¨Åce to ensure Prop-
erty 1 will always hold.
Isolation of conÔ¨Årmation process. In considering Prop-
erty 2, which requires the voter‚Äôs consent to cast in order
for the ballot to be stored, we will again see how mod-
ifying the DRE‚Äôs architecture in speciÔ¨Åc ways can help
verify correctness of this property.
The consent property in consideration requires audi-
tors to conÔ¨Ådently reason about the casting procedures.
An auditor (perhaps using program analysis tools) may
have an easier time reasoning about the casting process
if it is isolated from the rest of the voting process.
In
our architecture, we take this approach in combining the
casting and conÔ¨Årmation process, while isolating it from
the vote selection functionality of the DRE. With a care-
ful design, we only need to consider this sub-portion to
verify Property 2.
From our DRE design in the previous section, we in-
troduce a new component, called the VoteConÔ¨Årmation
module. With this change, the voter Ô¨Årst interacts with
a VoteSelection module that presents the ballot choices.
After making their selections, control Ô¨Çow passes to the
VoteConÔ¨Årmation module that performs a limited role:
presenting the voter‚Äôs prior selections and then waiting
for the voter to either 1) choose to modify their se-
lections, or 2) choose to cast their ballot. Since the
VoteConÔ¨Årmation module has limited functionality, it
only needs limited support for GUI code; as we show
in Section 6.1 we can more easily analyze its correctness
since its scope is limited. If the voter decides to modify
the ballot, control returns to the VoteSelection module.
Note the voter interacts with two separate compo-
nents: Ô¨Årst
the VoteSelection component and then
VoteConÔ¨Årmation. There are two ways to mediate the
voter‚Äôs interactions with the two components: 1) endow
each component with its own I/O system and screen;
2) use one I/O system and a trusted I/O ‚Äúmultiplexor‚Äù
to manage which component can access the screen at
a time. The latter approach has a number of favorable
features. Perhaps the most important is that it preserves
the voter‚Äôs experience as provided by existing DRE sys-
tems. A voting machine with two screens requires voters
USENIX Association
Security ‚Äô06: 15th USENIX Security Symposium
325
 
























































 















 







to change their voting patterns, and can introduce the op-
portunity for confusion or even security vulnerabilities.
Another advantage is cost: a second screen adds cost and
complexity. One downside is that we must now verify
properties about the IOMultiplexor. For example, it must
route the input and output to the proper module at the
appropriate times.
In the the Ô¨Ånal piece of our architecture, we introduce
a VoteCore component. After the voter interacts with the
VoteSelection system and then the VoteConÔ¨Årmation
module to approve their selection, the VoteCore compo-
nent stores the ballot on indelible storage in its BallotBox
and then cancels the voter‚Äôs authentication token. Then,
as we described above,
initiates a reset with the
ResetModule to clear the state of all modules.
it
Let us return to our original property: how can we
verify that a ballot can only be cast with the voter‚Äôs ap-
proval? With our architecture, it sufÔ¨Åces to verify that:
1. A ballot can only enter the VoteCore through the
VoteConÔ¨Årmation module.
2. The VoteCore gives the voter the opportunity to re-
view the exact contents of the ballot.
3. A ballot can only be cast if the voter unambiguously
signals their intent to cast.
To prove the last condition, we add hardware to simplify
an auditor‚Äôs understanding of the system, as well as to
avoid calibration issues with the touch screen interface.
A physical cast button, enabled only by the conÔ¨Årma-
tion module, acts as a gate to stop the ballot between the
VoteSelection and VoteCore modules. The software in
the VoteConÔ¨Årmation module does not send the ballot
to the VoteCore until the CastButton is depressed; and,
since it is enabled only in the VoteConÔ¨Årmation module,
it is easy to gain assurance that the ballot cannot be cast
without the voter‚Äôs consent. Section 6.1 will show how
we achieve this property based on the code and architec-
ture.
There is a danger if we must adjust the system‚Äôs ar-
chitecture to meet each particular security property: a
design meeting all security properties may be too com-
plex. However, in Section 8, we discuss other security
properties and sketch how we can verify them with the
current architecture. Isolating the conÔ¨Årmation process
is a key insight that can simplify verifying other prop-
erties. The conÔ¨Årmation process is at the heart of many
properties, and a small, easily understood conÔ¨Årmation
process helps not just in verifying Property 2.
4.2 Detailed module descriptions
Voter authentication. After a voter signs in at a polling
station, an election ofÔ¨Åcial would give that voter a vot-
In our implementation, we use a magnetic
ing token.
stripe card, but the token could also be a smartcard or a
piece of paper with a printed security code. Each voting
token is valid for only one voting machine. To begin vot-
ing, the voter inserts the token into the designated vot-
ing machine. The VoteCore module reads the contents
of the token and veriÔ¨Åes that the token is designated to
work on this machine (via a serial number check), is in-
tended for this particular election, has not been used with
this machine before, and is signed using some public-
key signature scheme. If the veriÔ¨Åcation is successful,
the VoteCore module communicates the contents of the
voting token to the VoteSelection module.
Vote selection. The VoteSelection module parses the
ballot deÔ¨Ånition Ô¨Åle and interacts with the voter, allow-
ing the voter to select candidates and vote on referenda.
The voting token indicates which ballot to use, e.g., a
Spanish ballot if the voter‚Äôs native language is Spanish
or a Democratic ballot if the voter is a Democrat voting
in a primary. The VoteSelection module is intended to
follow the rules outlined in the ballot deÔ¨Ånition Ô¨Åle, e.g.,
allowing the voter to choose up to three candidates or to
rank the candidates in order of preference. Of course, the
VoteSelection module is untrusted and may contain ma-
licious logic, so there is no guarantee that it operates as
intended. The VoteSelection module interacts with the
voter via the IOMultiplexor.
Vote conÔ¨Årmation. After the voter is comfortable with
her votes, the VoteSelection module sends a descrip-
tion of the voter‚Äôs preferences to the VoteConÔ¨Årmation
module. The VoteConÔ¨Årmation module interacts with
the voter via the IOMultiplexor, displaying a summary
screen indicating the current selections and prompting
the voter to approve or reject this ballot. If the voter ap-
proves, the VoteConÔ¨Årmation module sends the ballot
image3 to the VoteCore module so it can be recorded.