# DEEPSEC: Deciding Equivalence Properties in Security Protocols: Theory and Practice

**Authors:** Vincent Cheval, Steve Kremer, Itsaka Rakotonirina  
**Institution:** Inria & LORIA  
**Conference:** 2018 IEEE Symposium on Security and Privacy

## Abstract
Automated verification has become a crucial component in the security evaluation of cryptographic protocols. Recently, significant efforts have been made to extend the existing theory and tool support for reachability properties to the more complex case of equivalence properties. In this paper, we contribute to both the theoretical and practical aspects of this verification problem. We present new complexity results for static equivalence, trace equivalence, and labeled bisimilarity, and provide a decision procedure for these equivalences when the number of sessions is bounded. Our procedure is the first to decide trace equivalence and labeled bisimilarity exactly for a wide range of cryptographic primitives—those that can be represented by a subterm convergent destructor rewrite system. We implemented our procedure in a new tool called DEEPSEC. Extensive experiments show that DEEPSEC is significantly more efficient than other similar tools while also expanding the scope of protocols that can be analyzed.

## 1. Introduction
The use of automated, formal methods has become indispensable for analyzing complex security protocols, such as those for authentication, key exchange, and secure channel establishment. Mature, fully automated tools like AVISPA [11], ProVerif [17], Scyther [33], Tamarin [45], and Maude-NPA [44] operate in symbolic models, rooted in the seminal work by Dolev and Yao [35]. In these models, the attacker has full control over the communication network and unbounded computational power, but cryptography is idealized. This model is well-suited for finding logical flaws in protocols, and these tools have been highly effective in discovering such flaws or proving their absence.

While most works focus on reachability properties, a recent trend is to adapt these tools and the underlying theory to handle the more complex indistinguishability properties. These properties are typically modeled as behavioral equivalences (bisimulation or trace equivalence) in process calculi such as the Spi calculus [6] or the applied pi calculus [5]. A typical example is real-or-random secrecy: after interacting with a protocol, an adversary should be unable to distinguish the real secret used in the protocol from a random value. Privacy-type properties, such as anonymity, vote privacy, and unlinkability, can also be expressed as indistinguishability properties.

### Related Work
The general problem of analyzing security protocols is undecidable, but several decidable subclasses have been identified. While many complexity results are known for reachability properties [36, 42], the case of behavioral equivalences remains largely open. For static equivalence (where the attacker is an eavesdropper and cannot interact with the protocol), the problem has been shown to be PTIME for large classes of cryptographic primitives [3, 27, 29]. For active attackers, bounding the number of protocol sessions often suffices to achieve decidability [42] and is practically relevant, as most real-life attacks require only a small number of sessions.

In this context, Baudet [14] and later Chevalier and Rusinowitch [24] showed that real-or-random secrecy is coNP-complete for cryptographic primitives that can be modeled as subterm convergent rewrite systems. However, these procedures do not allow for else branches and do not verify trace equivalence in full generality. Cheval et al. [23] used Baudet's procedure to verify trace equivalence for determinate processes, but this class is insufficient for most anonymity properties. Decidability results for an unbounded number of sessions have been proposed [26, 25], but with severe restrictions on processes and equational theories.

Several tools exist for verifying equivalence properties. The SPEC tool [46, 47] verifies a sound symbolic bisimulation but is limited to specific cryptographic primitives and does not allow for else branches. The APTE tool [20] covers the same primitives, allows else branches, and decides trace equivalence exactly. The AKISS tool [19] allows for user-defined cryptographic primitives and has partial correctness for primitives modeled by convergent rewrite systems with the finite variant property [28]. However, it only decides trace equivalence for a class of determinate processes; for other processes, it can over- and under-approximate trace equivalence. The SAT-EQUIV tool [30] uses Graph Planning and SAT solving to verify trace equivalence, but it does not guarantee termination and is restricted to pairing and symmetric encryption.

Other tools, such as ProVerif [15], Tamarin [13], and Maude NPA [44], support verification of equivalence properties for an unbounded number of sessions. However, due to the undecidability of the underlying problem, these tools may not terminate. They approximate trace equivalence by verifying diff-equivalence, which is too fine-grained for many examples. Recent improvements to ProVerif [21, 16] help cover more protocols, but general verification of trace equivalence remains out of scope. For instance, the verification of unlinkability in 3G mobile phone protocols by Arapinis et al. [10] required approximations to avoid false attacks. Cortier et al. [31] developed a type system and automated type checker for verifying equivalences, but it only covers a fixed set of cryptographic primitives and verifies an approximated equivalence. Hirschi et al. [38] identified sufficient conditions for verifying unlinkability properties using ProVerif, implemented in the tool Ukano, but it does not verify equivalence properties in general.

### Contributions
We significantly improve the theoretical understanding and practical verification of equivalence properties when the number of protocol sessions is bounded. Even in this setting, the system under study has an infinite state space due to the term algebra modeling cryptographic primitives. Our work targets a wide class of cryptographic primitives that can be represented by a subterm convergent rewriting system. Specifically, we provide:

1. **New Complexity Results**: We present the first tight complexity results for static equivalence (∼), trace equivalence (≈t), and labeled bisimilarity (≈(cid:2)) in the applied pi calculus without any restrictions on the class of protocols (other than bounding the number of sessions). Our results are not restricted to determinate processes, allow for else branches, and do not approximate equivalence.

2. **Decision Procedure**: We introduce a novel procedure for deciding trace equivalence and labeled bisimilarity for the class of cryptographic primitives modeled by a destructor subterm convergent rewrite system. Unlike most other work, our procedure decides equivalences exactly, without approximations. It does not restrict the class of processes (except for replication) or the use of else branches and is correct for any cryptographic primitives that can be modeled by a subterm convergent destructor rewrite system.

3. **Tool Implementation**: We implemented our procedure for trace equivalence in a new tool called DEEPSEC. Although still a prototype, DEEPSEC is carefully engineered. The tool output is available in pretty-printed HTML format and allows stepping through an attack if one is found. DEEPSEC can distribute the computation, exploiting multicore architectures or clusters of computers. We integrated several classical optimizations for trace-equivalence analysis, such as partial order reductions (POR) [12], which significantly reduce the search space, making the tool scale well in practice despite the high theoretical complexity (coNEXP).

Through extensive benchmarks, we compare DEEPSEC to other tools limited to a bounded number of protocol sessions: APTE, SPEC, AKISS, and SAT-EQUIV. DEEPSEC is significantly more efficient—by several orders of magnitude—than APTE, SPEC, and AKISS, even though DEEPSEC covers a strictly larger class of protocols than APTE and SPEC. Its performance is comparable to SAT-EQUIV, which outperforms DEEPSEC when the number of parallel processes increases. This performance gap seems unavoidable as DEEPSEC operates on a much larger class of protocols (more primitives, else branches, no limitation to simple processes, guaranteed termination).

Part of the benchmarks focuses on demonstrating the scalability of the tool when increasing the number of parallel protocol sessions. The other examples include more complex protocols, such as Abadi and Fournet’s anonymous authentication protocol [5], the protocols implemented in the European passport [37], the AKA protocol used in 3G mobile telephony, and the Prêt-à-Voter [43] and Helios [7] e-voting protocols.

Additional details and proofs are provided in the companion technical report [2]. Implementation-related files are freely available at [1].

## 2. Model
We present our model of cryptographic protocols, which is largely inspired by the applied pi calculus [4].

### 2.1. Messages and Cryptographic Primitives
**Data as Terms**: Cryptographic operations are modeled by symbols of fixed arity \( F = \{f/n, g/m, \ldots\} \) forming a finite signature. We partition \( F \) into two sets:
- **Constructors (\( F_c \))**: Model cryptographic constructions (e.g., encryption, signatures, hash).
- **Destructors (\( F_d \))**: Model inversions or operations that may fail depending on the structure of their argument (e.g., decryption, signature verification).

**Example 1**: The signature \( F = F_c \cup F_d \) defined below models standard cryptographic primitives: symmetric encryption (senc and sdec), asymmetric encryption (pk, aenc and adec), concatenation ((cid:5)(cid:6), proj1, and proj2), and hash (h).

\[ F_c = \{senc/2, aenc/2, pk/1, (cid:5)·,·(cid:6)/2, h/1\} \]
\[ F_d = \{sdec/2, adec/2, proj1/1, proj2/1\} \]

Function symbols are naturally applied to arguments. Atomic data, such as communicating channels, randomness, and keys, are modeled by an infinite set of names \( N = \{a, b, c, \ldots\} \). This provides an abstraction of low-level data whose structure is not relevant at the protocol level. Names are partitioned into public and private sets: \( N = N_{pub} \cup N_{prv} \). Terms are defined as the smallest set containing \( N \) and closed under the application of symbols to other terms. For example, if \( k \in N_{prv} \) models a decryption key, \( aenc(m, pk(k)) \) models the ciphertext obtained by encrypting \( m \) with the corresponding public key. The set of terms built from atoms in \( N \) by applying functions in \( F \) is denoted by \( T(F, N) \).

**Behaviors as Rewriting**: The behavior of symbols is modeled by rewriting. We assume an infinite set of variables \( X = \{x, y, z, \ldots\} \) that can be used as atoms in terms. A substitution \( \sigma \) is a mapping from variables to terms, homomorphically extended to a mapping from terms to terms. Postfix notation \( t\sigma \) instead of \( \sigma(t) \) and set notation \( \sigma = \{x_1 \mapsto \sigma(x_1); \ldots; x_n \mapsto \sigma(x_n)\} \) are used. Set operators \( \cup \) and \( \subseteq \) are used for domain extension and the extension ordering, respectively.

A rewriting system \( R \) is a finite binary relation on terms. A pair \( (\ell, r) \in R \) is called a rewriting rule, written \( \ell \rightarrow r \), and assumed to satisfy \( \ell \in T(F, X) \) and \( r \in T(F_c, \text{vars}(\ell)) \). By extension, we use notation \( t \rightarrow s \) ("\( t \) rewrites to \( s \)") when \( t \) and \( s \) are related by the closure of \( R \) under substitution and term context. The reflexive transitive closure of this relation is written \( \rightarrow^* \).

**Example 2**: This rewriting system defines the behaviors of the previously introduced primitives:

\[ sdec(senc(x, y), y) \rightarrow x \]
\[ adec(aenc(x, pk(y)), y) \rightarrow x \]
\[ proj1((cid:5)x, y(cid:6)) \rightarrow x \]
\[ proj2((cid:5)x, y(cid:6)) \rightarrow y \]

The absence of rules for hash \( h \) models one-wayness. Rewriting is Turing-complete, so restrictions are needed for decidability. We consider only convergent systems, ensuring the existence and uniqueness of an irreducible term reachable from \( t \), called its normal form and written \( t \downarrow \). Most of the time, we also work under the assumptions that \( R \) is:
- **Subterm**: For all \( \ell \rightarrow r \in R \), \( r \) is either a strict subterm of \( \ell \) or a ground term.
- **Destructor**: For all \( \ell \rightarrow r \in R \), \( \ell \) is of the form \( g(u_1, \ldots, u_n) \) where \( g \in F_d \) and \( u_i \) is a constructor term.

Subterm convergent rewriting systems, introduced in [3], are classical in protocol analysis and include many standard primitives.

**Sizes**: The size of a term \( t \) (its number of symbols) is written \( |t| \). Some of our complexity results are stated with respect to a succinct representation of terms as DAGs with maximal sharing, which may be exponentially more concise. If \( st(t) \) is the set of subterms of \( t \), \( |t|_{\text{dag}} = |st(t)| \) is the size of its DAG representation. This definition extends to sets and sequences of terms (with common sharing).

### 2.2. Processes
We model protocols as parallel processes that may exchange messages, modeled as terms. Plain processes are defined by the following grammar:

\[ P, Q := 0 \mid \alpha.P \mid P \mid Q \mid !P \mid \nu n. P \mid \text{if } C \text{ then } P \text{ else } Q \]

Where:
- \( 0 \) is the null process.
- \( \alpha.P \) is a prefix, representing an action followed by a process.
- \( P \mid Q \) is a parallel composition.
- \( !P \) is a replication, allowing for an unbounded number of copies of \( P \).
- \( \nu n. P \) is a restriction, binding name \( n \) in \( P \).
- \( \text{if } C \text{ then } P \text{ else } Q \) is a conditional, where \( C \) is a condition on terms.

This grammar allows for a rich and expressive way to model cryptographic protocols.