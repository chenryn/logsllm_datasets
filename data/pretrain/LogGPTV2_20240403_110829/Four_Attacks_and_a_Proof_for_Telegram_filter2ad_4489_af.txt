kk ←$ {0, 1}672 ; mk ←$ {0, 1}320
auth_key_id ← HASH.Ev(hk, kk (cid:107) mk)
(kkI , kkR) ← 𝜙KDF(kk)
(mkI , mkR) ← 𝜙MAC(mk)
keyI ← (kkI , mkI)
keyR ← (kkR , mkR)
(stME,I , stME,R) ←$ ME.Init()
stI ← (auth_key_id, keyI , keyR , stME,I)
stR ← (auth_key_id, keyR , keyI , stME,R)
Return (stI , stR)
Figure 12: Construction of MTProto-based channel CH = MTP-CH[ME, HASH, MAC, KDF, 𝜙MAC, 𝜙KDF, SE] from message encoding
scheme ME, function families HASH, MAC and KDF, related-key-deriving functions 𝜙MAC and 𝜙KDF, and from deterministic
symmetric encryption scheme SE.
CH.Recv(stu, 𝑐, aux)
(auth_key_id, keyu
(kku, mku) ← keyu
(auth_key_id(cid:48), msg_key, 𝑐se) ← 𝑐
If auth_key_id ≠ auth_key_id(cid:48) then
Return (stu,⊥)
𝑘 ← KDF.Ev(kku, msg_key)
𝑝 ← SE.Dec(𝑘, 𝑐se)
msg_key(cid:48) ← MAC.Ev(mku, 𝑝)
If msg_key(cid:48) ≠ msg_key then return (stu,⊥)
(stME, 𝑚) ← ME.Decode(stME, 𝑝, aux)
stu ← (auth_key_id, keyu
, stME)
Return (stu, 𝑚)
, stME) ← stu
, stME)
, keyu
, keyu
in Section IV-A does not appear in the code in Fig. 12, since
each part of auth_key that is used for keying the primitives
can be generated independently. These parts are denoted by
hk, kk and mk. The function 𝜙KDF (resp. 𝜙MAC) is then used
to derive the (related) keys for each user from kk (resp. mk).
CH.Send proceeds by ﬁrst using ME to encode a message
𝑚 into a payload 𝑝. The MAC is computed on this payload to
produce a msg_key, and the KDF is called on the msg_key to
compute the key and IV for symmetric encryption SE, here
abstracted as 𝑘. The payload is encrypted with SE using this
key material, and the resulting ciphertext is called 𝑐se. The
CH ciphertext 𝑐 consists of auth_key_id, msg_key and the
symmetric ciphertext 𝑐se.
CH.Recv reverses the steps by ﬁrst computing 𝑘 from the
msg_key parsed from 𝑐, then decrypting 𝑐se to the payload
𝑝, and recomputing the MAC of 𝑝 to check whether it equals
msg_key. If not, it returns ⊥ (without changing the state) to
signify failure. If the check passes, it uses ME to decode the
payload into a message 𝑚. It is important the MAC check is
performed before ME.Decode is called, otherwise this opens
the channel to attacks – as we show later in Section VI.
Deﬁnition 5. Let ME be a message encoding scheme. Let
HASH be a function family such that {0, 1}992 ⊆ HASH.In.
Let MAC be a function family such that ME.Out ⊆ MAC.In.
Let KDF be a function family such that {0, 1}MAC.ol ⊆
KDF.In. Let 𝜙MAC : {0, 1}320 → MAC.Keys × MAC.Keys and
𝜙KDF : {0, 1}672 → KDF.Keys × KDF.Keys. Let SE be a de-
terministic symmetric encryption scheme with SE.kl = KDF.ol
and SE.MS = ME.Out. Then CH = MTP-CH[ME, HASH, MAC,
KDF, 𝜙MAC, 𝜙KDF, SE] is the channel as deﬁned in Fig. 12, with
CH.MS = ME.MS and CH.SendRS = ME.EncRS.
The message encoding scheme MTP-ME is speciﬁed in
Deﬁnition 6 and Fig. 13. It is a simpliﬁed scheme for strict
in-order delivery without replays (see the full version of this
work for the actual MTProto scheme that permits reordering).
As justiﬁed in Section IV-C, MTP-ME follows the header format
of Table I, but it does not use the server_salt ﬁeld (we deﬁne
salt as ﬁlled with zeros to preserve the ﬁeld order) and we
merge the 64-bit msg_id and 32-bit msg_seq_no ﬁelds into
a single 96-bit seq_no ﬁeld. Note that the internal counters
of MTP-ME wrap around when seq_no “overﬂows” modulo
296, so MTP-ME can only provide encoding integrity against
adversaries that make at most 296 oracle Send queries.
Deﬁnition 6. Let session_id ∈ {0, 1}64 and pb, bl ∈ N.
Then ME = MTP-ME[session_id, pb, bl]
is the message-
𝑖=1{0, 1}8·𝑖,
encoding scheme given in Fig. 13, with ME.MS =224
ME.Out = 𝑖∈N{0, 1}bl·𝑖 and ME.pl(ℓ, 𝜈) = 256 + ℓ +
|GenPadding(ℓ; 𝜈)|.19
=
=
the
The following SHA-1 and SHA-256-based function famil-
ies capture the MTProto primitives that are used to derive
auth_key_id, the message key msg_key and the symmetric
encryption key 𝑘.
Deﬁnition 7. MTP-HASH is
the function family with
MTP-HASH.Keys = {0, 1}1056, MTP-HASH.In = {0, 1}992,
MTP-HASH.ol = 128 and MTP-HASH.Ev(hk, 𝑥) = SHA-1(𝑥[0 :
672] (cid:107) hk[0 : 32] (cid:107) 𝑥[672 : 992] (cid:107) hk[32 : 1056])[96 : 160].
Deﬁnition 8. MTP-MAC is
function family with
{0, 1}∗,
MTP-MAC.Keys
MTP-MAC.ol
=
SHA-256(mku (cid:107) 𝑝)[64 : 192]. We refer to its output as
msg_key.
Deﬁnition 9. MTP-KDF is
function family with
MTP-KDF.Keys = {0, 1}288×{0, 1}288, MTP-KDF.In = {0, 1}128,
MTP-KDF.ol = 2·SHA-256.ol and MTP-KDF.Ev given in Fig. 14.
Since the keys for KDF and MAC in MTProto are not
independent for the two users, we have to work in a related-key
setting. We are inspired by the RKA framework of [36], but
deﬁne our related-key-deriving function 𝜙KDF (resp. 𝜙MAC) to
output both keys at once, as a function of kk (resp. mk). See
Fig. 15 for precise details of 𝜙KDF and 𝜙MAC.
{0, 1}256, MTP-MAC.In
128
and MTP-MAC.Ev(mku, 𝑝)
the
=
We now deﬁne the symmetric encryption scheme.
19The deﬁnition of ME.pl assumes that GenPadding is invoked with the
random coins of the corresponding ME.Encode call. For simplicity, we chose
to not surface these coins in Fig. 13 and instead handle this implicitly.
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:21:42 UTC from IEEE Xplore.  Restrictions apply. 
97
// ℓ ∈224
ME.Init()
𝑁sent ← 0 ; 𝑁recv ← 0
stME,I ← (session_id, 𝑁sent, 𝑁recv)
stME,R ← (session_id, 𝑁sent, 𝑁recv)
Return (stME,I , stME,R)
𝑖=1{0, 1}8·𝑖
GenPadding(ℓ)
ℓ(cid:48) ← bl − ℓ mod bl
bn ←$ {1, · · · , pb}
𝑚 ← 𝑝[256 : 256 + length · 8]
padding ←$ {0, 1}ℓ(cid:48)+bn∗bl
𝑁recv ← (𝑁recv + 1) mod 296
stME,u ← (session_id, 𝑁sent, 𝑁recv) ; Return (stME,u, 𝑚)
Return padding
Figure 13: Construction of a simpliﬁed message encoding scheme for strict in-order delivery ME = MTP-ME[session_id, pb, bl]
for session identiﬁer session_id, maximum padding length (in full blocks) pb, and output block length bl.
ME.Encode(stME,u, 𝑚, aux)
(session_id, 𝑁sent, 𝑁recv) ← stME,u
salt ← (cid:104)0(cid:105)64 ; seq_no ← (cid:104)𝑁sent(cid:105)96
length ← (cid:104)|𝑚|/8(cid:105)32
padding ←$ GenPadding(|𝑚|)
𝑝0 ← salt (cid:107) session_id
𝑝1 ← seq_no (cid:107) length
𝑝2 ← 𝑚 (cid:107) padding ; 𝑝 ← 𝑝0 (cid:107) 𝑝1 (cid:107) 𝑝2
𝑁sent ← (𝑁sent + 1) mod 296
stME,u ← (session_id, 𝑁sent, 𝑁recv)
Return (stME,u, 𝑝)
ME.Decode(stME,u, 𝑝, aux)
If | 𝑝| < 256 then return (stME,u,⊥)
(session_id, 𝑁sent, 𝑁recv) ← stME,u ; ℓ ← | 𝑝| − 256
salt ← 𝑝[0 : 64] ; session_id(cid:48) ← 𝑝[64 : 128]
seq_no ← 𝑝[128 : 224] ;
If (session_id(cid:48) ≠ session_id)∨
(seq_no ≠ 𝑁recv)∨
¬(0 < length ≤ |ℓ| /8) then return (stME,u,⊥)
length ← 𝑝[224 : 256]
// |msg_key| = 128
MTP-KDF.Ev(kku, msg_key)
(kk0, kk1) ← kku ; 𝑘0 ← SHA-256(msg_key (cid:107) kk0)
𝑘1 ← SHA-256(kk1 (cid:107) msg_key) ; 𝑘 ← 𝑘0 (cid:107) 𝑘1 ; Return 𝑘
Figure 14: Construction of function family MTP-KDF.
// |mk| = 320
𝜙MAC(mk)
mkI ← mk[0 : 256]
mkR ← mk[64 : 320]
Return (mkI , mkR)
// |kk| = 672
𝜙KDF(kk)
kkI,0 ← kk[0 : 288]
kkR,0 ← kk[64 : 352]
kkI,1 ← kk[320 : 608]
kkR,1 ← kk[384 : 672]
kkI ← (kkI,0, kkI,1)
kkR ← (kkR,0, kkR,1)
Return (kkI , kkR)
Figure 15: Related-key-deriving functions 𝜙KDF : {0, 1}672 →
MTP-KDF.Keys × MTP-KDF.Keys and 𝜙MAC : {0, 1}320 →
MTP-MAC.Keys × MTP-MAC.Keys.
Deﬁnition 10. Let AES-256 be the standard AES block cipher
with AES-256.kl = 256 and AES-256.ol = 128, and let IGE be
the block cipher mode in Fig. 4. Let MTP-SE = IGE[AES-256].
V. Formal security analysis
We ﬁrst deﬁne the central security notions required from
each of the primitives used in MTP-CH. Then, we state that
MTP-CH satisﬁes correctness, indistinguishability and integrity.
A. Security requirements on standard primitives
1) MTP-HASH is a one-time indistinguishable function
family: We require that MTP-HASH meets the one-time weak
indistinguishability notion (OTWIND) deﬁned in Fig. 16. The
security game Gotwind
HASH,D in Fig. 16 evaluates the function family
HASH on a challenge input 𝑥𝑏 using a secret uniformly random
function key hk. Adversary D is given 𝑥0, 𝑥1 and the output of
HASH; it is required to guess the challenge bit 𝑏 ∈ {0, 1}. The
game samples inputs 𝑥0, 𝑥1 uniformly at random rather than
allowing D to choose them, so this security notion requires
HASH to provide only a weak form of one-time indistinguishab-
ility. The advantage of D in breaking the OTWIND-security
HASH,D]−1. The
of HASH is deﬁned as Advotwind
full version of this work provides a formal reduction from the
HASH (D) = 2·Pr[Gotwind
98
OTWIND-security of MTP-HASH to the one-time PRF-security
of SHACAL-1 (as deﬁned in Section II-B).
Game Gotwind
HASH,D
𝑏 ←$ {0, 1} ; hk ←$ {0, 1}HASH.kl ; 𝑥0 ←$ HASH.In
𝑥1 ←$ HASH.In ; auth_key_id ← HASH.Ev(hk, 𝑥𝑏)
𝑏(cid:48) ←$ D(𝑥0, 𝑥1, auth_key_id) ; Return 𝑏(cid:48) = 𝑏
Figure 16: One-time weak indistinguishability of function
family HASH.
2) MTP-KDF is a PRF under related-key attacks: We require
that MTP-KDF behaves like a pseudorandom function in the
RKA setting (RKPRF) as deﬁned in Fig. 17. The security game
Grkprf
KDF, 𝜙KDF,D in Fig. 17 deﬁnes a variant of the standard PRF
notion allowing the adversary D to use its RoR oracle to
evaluate the function family KDF on either of the two secret,
related function keys kkI, kkR (both computed using related-
key-deriving function 𝜙KDF). The advantage of D in breaking
the RKPRF-security of KDF with respect to 𝜙KDF is deﬁned as
Advrkprf
(D) = 2 · Pr[Grkprf
KDF, 𝜙KDF,D] − 1.
KDF, 𝜙KDF
KDF, 𝜙KDF,D
Game Grkprf
𝑏 ←$ {0, 1} ; kk ←$ {0, 1}672
(kkI , kkR) ← 𝜙KDF(kk)
𝑏(cid:48) ←$ DRoR ; Return 𝑏(cid:48) = 𝑏
Figure 17: Related-key PRF-security of function family KDF
with respect to related-key-deriving function 𝜙KDF.
RoR(u, msg_key)
𝑘1 ← KDF.Ev(kku, msg_key)
If T[u, msg_key] =⊥ then
T[u, msg_key] ←$ {0, 1}KDF.ol
𝑘0 ← T[u, msg_key] ; Return 𝑘𝑏
In Section V-B1 we deﬁne a novel security notion for
SHACAL-2 that roughly requires it to be a leakage-resilient
PRF under related-key attacks; in the full version of this
work we provide a formal reduction from the RKPRF-security
of MTP-KDF to the new security notion. In this context,
“leakage resilience” means that the adversary can adaptively
choose a part of the SHACAL-2 key. However, we limit the
adversary to being able to evaluate SHACAL-2 only on a
single known, constant input (which is IV256, the initial state
of SHA-256). The new security notion is formalised as the
LRKPRF-security of SHACAL-2 with respect to a pair of related-
Authorized licensed use limited to: Tsinghua University. Downloaded on August 07,2022 at 12:21:42 UTC from IEEE Xplore.  Restrictions apply. 
key-deriving functions 𝜙KDF and 𝜙SHACAL-2 (the latter is deﬁned
in Section V-B1).
3) MTP-MAC is collision-resistant under RKA: We require
that collisions in the outputs of MTP-MAC under related
keys are hard to ﬁnd (RKCR), as deﬁned in Fig. 18. The
security game Grkcr
MAC, 𝜙MAC,F in Fig. 18 gives the adversary
F two related function keys mkI, mkR (created by the