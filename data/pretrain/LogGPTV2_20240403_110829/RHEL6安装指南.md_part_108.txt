::: para
了解引导和关闭的过程不仅可以允许对它们进行自定义，也使解决与系统引导和关闭相关的故障的问题变得更简单。
:::
::: section
::: titlepage
# [⁠]{#ch-boot-init-shutdown.html#s1-boot-process-basics}F.1. 引导过程 {.title}
:::
[]{#ch-boot-init-shutdown.html#idm139817202550352 .indexterm}
::: para
下面是引导过程的基本阶段：
:::
::: {.orderedlist xmlns:d="http://docbook.org/ns/docbook"}
1.  ::: para
    系统载入并运行引导装载程序。这个过程的细节取决于系统架构。例如：
    :::
    ::: itemizedlist
    -   ::: para
        BIOS 基于 x86 的系统从主硬盘的 MBR
        里运行第一阶段的引导装载程序，然后再载入另外一个引导装载程序
        [**GRUB**]{.application}。
        :::
    -   ::: para
        基于 UEFI 的 x86 系统挂载了一个包含 [**GRUB**]{.application}
        引导装载程序的 EFI 系统分区，EFI 引导管理者将
        [**GRUB**]{.application} 作为 EFI 应用程序载入并运行。
        :::
    -   ::: para
        POWER  系统服务器挂载一个包含 [**Yaboot**]{.application}
        引导装载程序的 PPC PReP 分区。系统管理服务（System Management
        Service，SMS）引导管理程序载入并运行
        [**yaboot**]{.application}。
        :::
    -   ::: para
        当 IPL 的分区中包含 Red Hat Enterprise Linux 时，IBM System z
        会使用 DASD 或连接 FCP 的设备运行 [**z/IPL**]{.application}
        引导装载程序。
        :::
    :::
2.  ::: para
    引导装载程序将内核载入内存，即依次载入所需模块并将 root
    分区以只读形式挂载。
    :::
3.  ::: para
    内核将引导过程控制转给 `/sbin/init`{.command} 程序。
    :::
4.  ::: para
    `/sbin/init`{.command} 载入所有的服务和用户空间工具，然后挂载
    `/etc/fstab`{.filename} 中列出的所有分区。
    :::
5.  ::: para
    此时会为用户呈现全新引导的 Linux 系统的登录页面。
    :::
:::
::: para
因为对引导过程的配置比关闭过程的配置更为普遍，本章的余下内容将详细讨论引导过程是如何工作的以及如何自定义引导过程使其适应具体需要。
:::
:::
::: section
::: titlepage
# [⁠]{#ch-boot-init-shutdown.html#s1-boot-init-shutdown-process}F.2. 引导过程的详细介绍 {.title}
:::
[]{#ch-boot-init-shutdown.html#idm139817115677872
.indexterm}[]{#ch-boot-init-shutdown.html#idm139817135098544
.indexterm}[]{#ch-boot-init-shutdown.html#idm139817215880192
.indexterm}[]{#ch-boot-init-shutdown.html#idm139817167044656
.indexterm}[]{#ch-boot-init-shutdown.html#idm139817125473568 .indexterm}
::: para
引导过程的开始阶段根据所用硬件平台的不同而不同。但当找到内核并载入引导装载程序后，默认的引导过程在所有构架中都是一样的。本章着重介绍
x86 构架。
:::
::: section
::: titlepage
## [⁠]{#ch-boot-init-shutdown.html#sect-firmware_interface}F.2.1. 固件接口 {.title}
:::
::: section
::: titlepage
### [⁠]{#ch-boot-init-shutdown.html#s2-boot-init-shutdown-bios}F.2.1.1. 使用 BIOS 的 x86 系统 {.title}
:::
[]{#ch-boot-init-shutdown.html#idm139817124078704
.indexterm}[]{#ch-boot-init-shutdown.html#idm139817203703264
.indexterm}[]{#ch-boot-init-shutdown.html#idm139817187294080
.indexterm}[]{#ch-boot-init-shutdown.html#idm139817113547904 .indexterm}
::: para
*基本输入/输出系统（Basic Input/Output
System，BIOS）*是一个固件接口，它不仅控制引导过程的第一个步骤，也提供外部设比的最底层界面。在配备
BIOS 的 x86
系统里，程序被写入到只读的、永久性的内存里，且是一直可用的。当系统引导时，处理器查找系统内存末端的
BIOS 程序并运行它。
:::
::: para
载入后，BIOS
会测试系统，查找并检查周边设备，然后定位可以引导系统的有效设备。通常，它在软驱和光驱中查找可引导介质，如果没有找到，则会在系统硬盘中查找。在大多数情况下，搜索驱动器的顺序是由
BIOS 中的设置控制的，首先是主 IDE 总线中的主 IDE 设备或带有引导标记的
SATA 设备。BIOS 然后将这个设备的第一个扇区的内容装入内存，它被称作
*主引导记录（Master Boot Record）*。MBR 只有 512
个字节大小，它包含了被称作引导装载程序的引导机器的代码指令，以及分区表。BIOS
找到引导装载程序并将其载入内存，BIOS 就会将引导过程的控制权交给该程序。
:::
::: para
第一阶段是 MBR
中的小机器二进制代码。它的唯一作用就是定位第二阶段的引导装载程序（[**GRUB**]{.application}）并将其第一部分在载入内存。
:::
:::
::: section
::: titlepage
### [⁠]{#ch-boot-init-shutdown.html#s2-boot-init-shutdown-uefi}F.2.1.2. 使用 UEFI 的 x86 系统 {.title}
:::
[]{#ch-boot-init-shutdown.html#idm139817195815376
.indexterm}[]{#ch-boot-init-shutdown.html#idm139817125795520
.indexterm}[]{#ch-boot-init-shutdown.html#idm139817187656592 .indexterm}
::: para
象 BIOS 一样，*同一扩展固件接口（Unified Extensible Firmware
Interface，UEFI）*的目的是控制引导过程（通过*引导服务*）并提供系统固件和操作系统（通过*运行时服务*）间的接口。和
BIOS 不同的是，它有自己的独立于 CPU 的架构和设备驱动。UEFI
可以挂载分区并读取某些文件系统。
:::
::: para
当 x86 计算机装备了 UEFI
引导时，接口搜索系统存储里标签为特定*全局唯一标识符（globally unique
identifier，GUID）* (GUID) 的分区，该标签将其标记为*EFI 系统分区（EFI
System Partition，ESP）*。这个分区包含为 EFI
架构编译的应用程序，其中可能包括引导装载程序和工具软件。UEFI
系统包括可以根据缺省配置引导系统、或提示用户选择要引导的操作系统的 *EFI
引导管理程序*。
:::
:::
:::
::: section
::: titlepage
## [⁠]{#ch-boot-init-shutdown.html#s2-boot-init-shutdown-loader}F.2.2. 引导装载程序 {.title}
:::
::: section
::: titlepage
### [⁠]{#ch-boot-init-shutdown.html#s2-boot-init-shutdown-loader-bios}F.2.2.1. 用于 x86 系统的 GRUB 引导装载程序 {.title}
:::
[]{#ch-boot-init-shutdown.html#idm139817210719616
.indexterm}[]{#ch-boot-init-shutdown.html#idm139817215649008
.indexterm}[]{#ch-boot-init-shutdown.html#idm139817188868624 .indexterm}
::: para
对于使用 BIOS 的系统，第一阶段引导装载程序指导系统载入 GRUB
到内存里，而对于装备了 UEFI 的系统来说，则直接从 EFI 系统分区里读取。
:::
::: para
GRUB 的优点是可读取 ext2、ext3 和 ext4
[⁠]{#ch-boot-init-shutdown.html#idm139817167207968}[^\[17\]^](#ch-boot-init-shutdown.html#ftn.idm139817167207968){.footnote
xmlns:d="http://docbook.org/ns/docbook"} 分区并在引导时载入其配置文件
--- `/boot/grub/grub.conf`{.filename}（用于 BIOS）或
`/boot/efi/EFI/redhat/grub.conf`{.filename}（用于
UEFI）。有关如何编辑此文件的详情请参考 [第 E.8 节 "GRUB
菜单配置文件"](#ch-grub.html#s1-grub-configfile){.xref}。
:::
::: {.important xmlns:d="http://docbook.org/ns/docbook"}
::: admonition_header
**重要**
:::
::: admonition
::: para
Red Hat Enterprise Linux 6 中的 [**GRUB**]{.application}
引导装载程序支持 ext2、ext3 和ext4 文件系统。它不支持其他文件系统，比如
VFAT、Btrfs 或者 XFS。另外，[**GRUB**]{.application} 不支持 LVM。
:::
:::
:::
::: para
第二阶段的引导装载程序被载入内存后，它就会为用户显示一个图形页面，页面显示不同的操作系统，或者配置为用于引导的内核（更新内核时，引导装载程序的配置文件会自动进行更新）。在这个页面中，用户可以用箭头键选择要引导的操作系统或内核，并按
[**Enter**]{.keycap}
键。如果不按任何键，引导装载程序将在配置的超时时间后载入默认的选项。
:::
::: para
第二阶段引导装载程序确定使用哪个内核引导后，它就会在 `/boot/`{.filename}
目录中定位相应的内核二进制代码。内核二进制代码是以下面的格式命名的 ---
`/boot/vmlinuz-`{.filename} 文件（其中
``{.filename} 对应引导装载程序中指定的内核版本）。
:::
::: para
关于使用引导装载程序为内核提供命令行参数的操作请参考 [附录 E, *GRUB
引导装载程序*](#ch-grub.html){.xref}。有关在引导装载程序提示符后更改运行级别的详情请参考
[第 E.9 节
"在引导时改变运行级别"](#ch-grub.html#s1-grub-runlevels){.xref}。
:::
::: para
然后，引导装载程序会将一个或多个正确的 *initramfs*
映像载入内存。内核使用 `initramfs`{.filename}
载入引导系统所需要的驱动和程序模块。这在系统使用 SCSI 硬盘或 ext3 或
ext4 文件系统时尤为重要。
:::
::: para
将内核和 `initramfs`{.filename}
映像载入内存后，引导装载程序就会将引导过程的控制权交给内核。
:::
::: para
有关 GRUB 引导装载程序的详情，请参考 [附录 E, *GRUB
引导装载程序*](#ch-grub.html){.xref}。
:::
:::
::: section
::: titlepage
### [⁠]{#ch-boot-init-shutdown.html#s3-boot-init-shutdown-other-architectures}F.2.2.2. 用于其他构架的引导装载程序 {.title}
:::
::: para
内核载入并将引导过程的控制权交给 `init`{.command}
命令后，对于不同构架的机器来说，后面的步骤都是一样的。所以，不同构架机器的引导过程的主要区别在于寻找和装载内核的程序。
:::
::: para
例如：IBM eServer pSeries 构架的机器使用 [**yaboot**]{.application}，而
IBM System z 则使用 z/IPL 引导装载程序。
:::
::: para
请在这个指南有关具体平台的部分查询配置其引导装载程序的信息。
:::
:::
:::
::: section
::: titlepage
## [⁠]{#ch-boot-init-shutdown.html#s2-boot-init-shutdown-kernel}F.2.3. 内核 {.title}
:::
[]{#ch-boot-init-shutdown.html#idm139817117580000
.indexterm}[]{#ch-boot-init-shutdown.html#idm139817193597760 .indexterm}
::: para
载入内核后，它将立刻初始化并配置计算机内存和附加到系统中的各种硬件，其中包括所有的处理器，输入/输出子系统和存储设备。然后，它会在内存中预定的位置寻找压缩的
`initramfs`{.filename} 映像，并将这些映像直接解压到
`/sysroot/`{.filename} 并载入全部所需驱动程序。接下来它会在完成
`initramfs`{.filename} 过程前初始化与该文件系统关联的虚拟设备，比如 LVM
或者软件 RAID，并释放这个磁盘映像占用的所有内存。
:::
::: para
然后内核会创建一个 root 设备，以只读方式挂载 root
分区，并释放所有未使用的内存。
:::
::: para
此时已将内核载入内存并可进行操作。但因为没有用户应用程序允许的系统进行有意义的输入，所以还无法对系统进行很多操作。
:::
::: para
要设置用户环境，内核会执行 `/sbin/init`{.command} 程序。
:::
:::
::: section
::: titlepage
## [⁠]{#ch-boot-init-shutdown.html#s2-boot-init-shutdown-init}F.2.4. `/sbin/init`{.command} 程序 {.title}
:::
[]{#ch-boot-init-shutdown.html#idm139817198770800
.indexterm}[]{#ch-boot-init-shutdown.html#idm139817193923648
.indexterm}[]{#ch-boot-init-shutdown.html#idm139817198798800 .indexterm}
::: para
`/sbin/init`{.command} 程序（也称作
`init`{.command}）协调余下的引导过程并为用户配置环境。
:::
::: para
当 `init`{.command}
命令启动时，它成为系统里所有自动启动程序的父程序或者祖父（grandparent）程序。首先，它运行
`/etc/rc.d/rc.sysinit`{.filename} 脚本设置环境路径、启动
swap、检查文件系统并执行所有系统初始化所需的其他步骤。例如，多数系统会使用时钟，因此
`rc.sysinit`{.filename} 读取 `/etc/sysconfig/clock`{.filename}
配置文件来初始化硬件时钟。另外一个示例是，如果有必须初始化的特殊串口程序，`rc.sysinit`{.filename}
会执行 `/etc/rc.serial`{.filename} 脚本。
:::
::: para
然后 `init`{.command} 命令处理 `/etc/event.d`{.filename}
目录中的任务，这些任务描述了在每个*SysV
初始化运行级别*中应该如何设置系统。运行级别（runlevel）是一个状态或者*模式*，它由
SysV `/etc/rc.d/rc.d/`{.filename} 目录中列出的服务定义，其中 *\*
是运行级别号。有关 SysV init 运行级别的详情，请参考 [第 F.4 节 "SysV
Init
运行级别"](#ch-boot-init-shutdown.html#s1-boot-init-shutdown-sysv){.xref}。
:::
::: para
接下来 `init`{.command}
命令为系统设置源功能库，`/etc/rc.d/init.d/functions`{.filename}，它可配置如何启动、杀死程序以及确定程序的程序号（PID）。
:::
::: para
`init`{.command} 通过在正确 `rc`{.filename} 目录中查找
`/etc/inittab`{.filename} 中指定的运行级别启动所有后台进程。对
`rc`{.filename}
目录编号对应其代表的运行级别。例如：`/etc/rc.d/rc5.d/`{.filename}
是代表运行级别 5 的目录。
:::
::: para
当引导至运行级别 5 时，`init`{.command} 程序会在
`/etc/rc.d/rc5.d/`{.filename} 目录中查看并确定要启动和停止的进程。
:::
::: para
下面是 `/etc/rc.d/rc5.d/`{.filename} 目录内容的示例：
:::
``` screen
K05innd -> ../init.d/innd
K05saslauthd -> ../init.d/saslauthd
K10dc_server -> ../init.d/dc_server
K10psacct -> ../init.d/psacct
K10radiusd -> ../init.d/radiusd
K12dc_client -> ../init.d/dc_client
K12FreeWnn -> ../init.d/FreeWnn
K12mailman -> ../init.d/mailman
K12mysqld -> ../init.d/mysqld
K15httpd -> ../init.d/httpd
K20netdump-server -> ../init.d/netdump-server
K20rstatd -> ../init.d/rstatd