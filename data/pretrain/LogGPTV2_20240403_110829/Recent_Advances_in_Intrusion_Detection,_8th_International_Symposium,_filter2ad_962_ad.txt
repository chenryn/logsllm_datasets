good deployability. Each physical node in the cluster has two AMD Athlon processors
(each with 64K L1 I-cache, 64K D-cache, and 256KB L2 cache), 1GB memory, and
10GB disk space.
4.1 Target Network Space
Using vGrounds, we ﬁrst examine the target network space of Lion worms and Slapper
worms. We are especially interested in the address blocks that a worm tries to avoid.
This information not only exposes the worm author’s knowledge about unallocated
Internet address blocks [2], but also reveals the address blocks that have been “black-
listed” by the black-hat community (for example, the address blocks used for sinkhole
networking [51]).
Lion Worm. The Lion worm “spreads by scanning random class B IP networks for
hosts that are vulnerable to a remote exploit in the BIND name service daemon. Once
it has found a candidate for infection, it attacks the remote machine and, if successful,
downloads and installs a package...” [4]. To create a vGround for the Lion worm, a
system template lion.ext2 is built, containing the vulnerable version of BIND service.
Thanks to vGround’s virtual node optimization techniques, the size of the image is
only 7M . A vGround with more than 1500 virtual nodes (1500 virtual end-hosts in ten
subnets connected by OSPF routers) is deployed on ten physical hosts each supporting
 600
 500
)
5
0
1
 400
l
a
t
o
T
(
s
e
b
o
r
P
f
o
r
e
b
m
u
N
 300
 200
 100
Probing Distribution Based On The First Octet
 700
 600
 500
 400
 300
 200
 100
)
5
0
1
l
a
t
o
T
(
s
e
b
o
r
P
f
o
r
e
b
m
u
N
Probing Distribution Based On The First Octet
 0
 0
 50
 100
 150
The First Octet of IP Address
 200
 250
 0
 0
 50
 100
 150
The First Octet of IP Address
 200
 250
(a) Target network space of Lion worm
(b) Target network space of Slapper worm
Fig. 5. Target network space of Lion worm and Slapper worm
Virtual Playgrounds for Worm Behavior Investigation
11
about 150 virtual nodes. The image ﬁles are efﬁciently generated within 60 seconds
and the vGround is boot-up in less than 90 seconds. In this experiment, we deploy
“seed” Lion worms in ten virtual end-hosts. Over a one-week period, the vGround
automatically collects the traces generated by the kernort logging module embedded in
the 10 infected end hosts. We then extract and aggregate the IP addresses of attempted
targets to show the distribution of Lion worm victims.
Figure 5(a) shows the network distribution of targets probed by the Lion worm, based
on the ﬁrst octet of their IP addresses. The probes are evenly distributed over the range
of [13, 243]. It seems that the Lion worm does not skip private or reserved address
blocks [2]. To verify this observation, we also perform reverse engineering using
objdump [6] on the Lion worm binary, which conﬁrms our observation in vGround.
Slapper Worm. The Slapper worm exploits a buffer overﬂow vulnerability in the
OpenSSL component of SSL-enabled Apache web servers. If successful, the worm can
be used as a back-door to start up a range of Denial-of-Service attacks [5]. The Slapper
worm was captured and thoroughly analyzed by researchers at Symantec [38].
A system template slapper.ext2 contains the vulnerable version of Apache server.
The size of the image is approximately 32M . A vGround of about 1500 virtual nodes is
deployed on 20 physical hosts of the Linux cluster, with each hosting about 75 virtual
nodes. Similar to the Lion worm experiment, we extract the probing trafﬁc from the
Slapper-infected nodes and then plot the target address distribution in Figure 5(b).
Unlike the Lion worm which ignores the reserved IP address ranges, the Slapper
worm deliberately skips certain reserved IP address ranges. The address blocks skipped
reﬂect the global address assignment at the time when the Slapper worm was released.
For example, back then, the address blocks of 082/8 - 088/8 are reserved by IANA
(Internet Assigned Numbers Authority) and therefore skipped by the Slapper worm, as
shown in Figure 5(b). As of today, however, these address blocks are no longer reserved
by IANA [2].
4.2 Propagation Pattern
Understanding a worm’s propagation pattern is important to the design of worm
containment mechanisms. In this experiment, we demonstrate that vGrounds achieve
sufﬁciently large scale to observe a worm’s propagation pattern.
We create a vGround with 1000 vulnerable end-hosts running in 10 networks each
with 100 end hosts (192.168.x.y, x = 1 ··· 10, y = 1 ··· 100). At the beginning, there
is one Slapper-infected “seeding” node (192.168.3.11) in the vGround. We allow the
Slapper worm to propagate in the vGround and the propagation progress is recorded.
Based on the vGround traces, the propagation pattern of Slapper worm can be visualized
in Figure 6. The three sub-ﬁgures show the status of the vGround at three different
time instances: when 2%, 5%, and 10% of the end-hosts in the vGround are infected,
respectively. The x-axis is the third octet of an end-host’s IP, while the y-axis is the
fourth octet. An “X” indicates that the corresponding end-host is infected. The ﬁgure
shows the progress and victim distribution of Slapper worm propagation.
From Figure 6, it can be conjectured that the Slapper worm is using the address-
sweeping strategy when selecting victims: once an address range such as 192.168.0.0/16
12
X. Jiang et al.
Infection Status: 2% are infected
Infection Status: 5% are infected
Infection Status: 10% are infected
 100
 80
 60
 40
 20
Seeding Worm
s
s
e
r
d
d
a
P
I
f
o
t
e
t
c
o
h
t
r
u
o
f
e
h
T
 100
 80
 60
 40
 20
Seeding Worm
s
s
e
r
d
d
a
P
I
f
o
t
e
t
c
o
h
t
r
u
o
f
e
h
T
 100
 80
 60
 40
 20
Seeding Worm
s
s
e
r
d
d
a
P
I
f
o
t
e
t
c
o
h
t
r
u
o
f
e
h
T
 0
 0
 2
 4
The third octet of IP address 
 6
 8
 10
 0
 0
 2
 4
The third octet of IP address 
 6
 8
 10
 0
 0
 2
 4
The third octet of IP address 
 6
 8
 10
(a) When 2% hosts infected
(b) When 5% hosts infected
(c) When 10% hosts infected
Fig. 6. Propagation of Slapper worm w/ address-sweeping (total: 1000 hosts)
is chosen, hosts within the address range will then be sequentially scanned. Figure 6
shows that all the infected nodes are so far in the same subnet. A closer look at the
detailed vGround traces reveals the reason: it takes some time for the seed worm to
“hit” the 192.168.0.0/16 range and start infecting the hosts. The newly spawned worms
will do the same as the seed worm. If one of them hits the same range, it will “sweep”
the IP addresses again in the same sequence (i.e. from 192.168.0.1 to 192.168.254.254).
An analysis of the Slapper worm source code conﬁrms our conjecture.
We note that the scale of the above vGround may not be large enough to observe
other propagation patterns. For example, we synthesize a Slapper worm variant using
the island-hopping strategy [36]. Under this strategy, the seed worm targets the hosts
in its own /16 range with high probability (0.75), and hosts outside the range with
low probability (0.25). The same vGround for the original Slapper is used to run the
Slapper variant. The propagation pattern is visualized in Figure 7. It is clear that the
hosts in the worm’s local range (192.168.0.0/16) are infected randomly instead of
sequentially as in address sweeping. Our vGround traces also indicate that the seed
worm as well as the newly spawned worms will immediately start to infect local hosts,
without the delay (caused by random range selection) observed in address sweeping.
Unfortunately, the “hopping away” behavior (i.e. worms infecting hosts outside the
local range) cannot be observed in the vGround, due to the limited address space
of the vGround. As our solution, we develop a new technique called worm-driven
vGround growth: when a worm’s probing target is generated and the target is not in
the vGround, a new subnet with at least the target host will be dynamically generated
and added to the vGround within seconds. Other techniques such as NAT/reverse-NAT,
Infection Status: 2% are infected
Infection Status: 5% are infected
Infection Status: 10% are infected
 100
 80
 60
 40
 20
s
s
e
r
d
d
a