### Good Deployability
Each physical node in the cluster is equipped with two AMD Athlon processors, each featuring 64K L1 I-cache, 64K D-cache, and 256KB L2 cache. Additionally, each node has 1GB of memory and 10GB of disk space.

### 4.1 Target Network Space
Using vGrounds, we first examine the target network space of the Lion and Slapper worms. Our focus is on the address blocks that these worms avoid. This information not only reveals the worm authors' knowledge of unallocated Internet address blocks [2] but also highlights the address blocks that have been "blacklisted" by the black-hat community (e.g., those used for sinkhole networking [51]).

#### Lion Worm
The Lion worm spreads by scanning random class B IP networks for hosts vulnerable to a remote exploit in the BIND name service daemon. Upon identifying a vulnerable host, it attacks the machine, and if successful, downloads and installs a package [4]. To create a vGround for the Lion worm, a system template named `lion.ext2` was built, containing the vulnerable version of the BIND service. Thanks to vGround's virtual node optimization techniques, the image size is only 7MB. A vGround with over 1500 virtual nodes (1500 virtual end-hosts in ten subnets connected by OSPF routers) was deployed on ten physical hosts, each supporting approximately 150 virtual nodes. The image files were generated within 60 seconds, and the vGround was booted up in less than 90 seconds. In this experiment, we deployed "seed" Lion worms on ten virtual end-hosts. Over a one-week period, the vGround automatically collected traces from the kernort logging module embedded in the 10 infected end-hosts. We then extracted and aggregated the IP addresses of attempted targets to show the distribution of Lion worm victims.

Figure 5(a) shows the network distribution of targets probed by the Lion worm, based on the first octet of their IP addresses. The probes are evenly distributed over the range [13, 243], indicating that the Lion worm does not skip private or reserved address blocks [2]. To confirm this observation, we performed reverse engineering using `objdump` [6] on the Lion worm binary, which corroborated our findings in vGround.

#### Slapper Worm
The Slapper worm exploits a buffer overflow vulnerability in the OpenSSL component of SSL-enabled Apache web servers. If successful, the worm can be used as a backdoor to initiate various Denial-of-Service attacks [5]. The Slapper worm was captured and thoroughly analyzed by researchers at Symantec [38].

A system template `slapper.ext2` contains the vulnerable version of the Apache server. The image size is approximately 32MB. A vGround with about 1500 virtual nodes was deployed on 20 physical hosts of the Linux cluster, with each hosting around 75 virtual nodes. Similar to the Lion worm experiment, we extracted the probing traffic from the Slapper-infected nodes and plotted the target address distribution in Figure 5(b).

Unlike the Lion worm, the Slapper worm deliberately skips certain reserved IP address ranges. The skipped address blocks reflect the global address assignment at the time of the Slapper worm's release. For example, the address blocks 082/8 - 088/8 were reserved by IANA (Internet Assigned Numbers Authority) and thus skipped by the Slapper worm, as shown in Figure 5(b). However, these address blocks are no longer reserved by IANA [2].

### 4.2 Propagation Pattern
Understanding a worm's propagation pattern is crucial for designing effective containment mechanisms. In this experiment, we demonstrate that vGrounds can achieve a sufficiently large scale to observe a worm's propagation pattern.

We created a vGround with 1000 vulnerable end-hosts running in 10 networks, each with 100 end-hosts (192.168.x.y, x = 1...10, y = 1...100). Initially, there was one Slapper-infected "seeding" node (192.168.3.11) in the vGround. We allowed the Slapper worm to propagate, and the propagation progress was recorded. Based on the vGround traces, the propagation pattern of the Slapper worm is visualized in Figure 6. The three sub-figures show the status of the vGround at three different time instances: when 2%, 5%, and 10% of the end-hosts in the vGround were infected, respectively. The x-axis represents the third octet of an end-host's IP, while the y-axis represents the fourth octet. An "X" indicates that the corresponding end-host is infected. The figure illustrates the progress and victim distribution of the Slapper worm propagation.

From Figure 6, it can be inferred that the Slapper worm uses an address-sweeping strategy when selecting victims: once an address range such as 192.168.0.0/16 is chosen, hosts within the address range are sequentially scanned. The figure shows that all infected nodes are in the same subnet. A closer look at the detailed vGround traces reveals that it takes some time for the seed worm to "hit" the 192.168.0.0/16 range and start infecting the hosts. The newly spawned worms follow the same pattern. If one of them hits the same range, it will "sweep" the IP addresses again in the same sequence (i.e., from 192.168.0.1 to 192.168.254.254). An analysis of the Slapper worm source code confirms this behavior.

We note that the scale of the above vGround may not be large enough to observe other propagation patterns. For example, we synthesized a Slapper worm variant using the island-hopping strategy [36]. Under this strategy, the seed worm targets hosts in its own /16 range with high probability (0.75) and hosts outside the range with low probability (0.25). The same vGround for the original Slapper was used to run the Slapper variant. The propagation pattern is visualized in Figure 7. It is clear that the hosts in the worm's local range (192.168.0.0/16) are infected randomly rather than sequentially, as in address sweeping. Our vGround traces also indicate that the seed worm and the newly spawned worms immediately start to infect local hosts without the delay observed in address sweeping.

Unfortunately, the "hopping away" behavior (i.e., worms infecting hosts outside the local range) cannot be observed in the vGround due to the limited address space. To address this, we developed a new technique called worm-driven vGround growth: when a worm's probing target is generated and the target is not in the vGround, a new subnet with at least the target host is dynamically generated and added to the vGround within seconds. Other techniques such as NAT/reverse-NAT can also be employed to expand the vGround's address space.