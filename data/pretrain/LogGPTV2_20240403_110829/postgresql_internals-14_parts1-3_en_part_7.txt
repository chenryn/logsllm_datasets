trackingoperationsoneachrow.
p. Thecurrentimplementationallowsfalsepositives: Postgrecanabortsomeab-
solutely safe transactions that are simply out of luck. Their “luck” depends on
manyfactors,suchasthepresenceofappropriateindexesortheamountof
available,sotheactualbehaviorishardtopredictinadvance.
IfyouusetheSerializablelevel,itmustbeobservedbyalltransactionsoftheap-
plication. When combined with other levels, Serializable behaves as Repeatable
Read without any notice. So if you decide to use the Serializable level, it makes
read sense to modify the default_transaction_isolation parameter value accordingly—
committed eventhoughsomeonecanstilloverwriteitbyexplicitlysettingadifferentlevel.
v. Therearealsootherrestrictions;forexample,queriesrunattheSerializablelevel
cannot be executed on replicas. And although the functionality of this level is
constantly being improved,the current limitations and overhead make it less at-
tractive.
2.4 Which Isolation Level to Use?
ReadCommittedisthedefaultisolationlevelinPostgre,andapparentlyitisthis
levelthatisusedinthevastmajorityofapplications.Thislevelcanbeconvenient
becauseitallowsabortingtransactionsonlyincaseofafailure;itdoesnotabort
anytransactionstopreservedataconsistency.Inotherwords,serializationfailures
cannotoccur,soyoudonothavetotakecareoftransactionretries.
The downside of this level is a large number of possible anomalies, which have
beendiscussedindetailabove.Adeveloperhastokeeptheminmindallthetime
and write the code in a way that prevents their occurrence. If it is impossible to
define all the needed actions in a single  statement, then you have to resort
to explicit locking. The toughest part is that the code is hard to test for errors
64
2.4 WhichIsolationLeveltoUse?
relatedtodatainconsistency;sucherrorscanappearinunpredictableandbarely
reproducibleways,sotheyareveryhardtofixtoo.
The Repeatable Read isolation level eliminates some of the inconsistency prob-
lems,butalas,notallofthem. Therefore,youmustnotonlyrememberaboutthe
remaininganomalies,butalsomodifytheapplicationtocorrectlyhandleserializa-
tionfailures,whichiscertainlyinconvenient.However,forread-onlytransactions
thislevelisaperfectcomplementtotheReadCommittedlevel;itcanbeveryuseful
forcaseslikebuildingreportsthatinvolvemultiplequeries.
Andfinally,theSerializableisolationlevelallowsyounottoworryaboutdatacon-
sistencyatall,whichsimplifieswritingthecodetoagreatextent. Theonlything
requiredfromtheapplicationistheabilitytoretryanytransactionthatisaborted
withaserializationfailure. However,thenumberofabortedtransactionsandas-
sociated overhead can significantly reduce system throughput. You should also
keepinmindthattheSerializablelevelisnotsupportedonreplicasandcannotbe
combinedwithotherisolationlevels.
65
3
Pages and Tuples
3.1 Page Structure
Eachpagehasacertaininnerlayoutthatusuallyconsistsofthefollowingparts:1
• pageheader
• anarrayofitempointers
• freespace
• items(rowversions)
• specialspace
Page Header
Thepageheader islocatedinthelowestaddressesandhasafixedsize. Itstores
p. variousinformationaboutthepage,suchasitschecksumandthesizesofallthe
otherpartsofthepage.
Thesesizescanbeeasilydisplayedusingthepageinspectextension.2 Let’stakea
lookatthefirstpageofthetable(pagenumberingiszero-based):
1 postgresql.org/docs/14/storage-page-layout.html
include/storage/bufpage.h
2 postgresql.org/docs/14/pageinspect.html
66
3.1 PageStructure
=> CREATE EXTENSION pageinspect;
=> SELECT lower, upper, special, pagesize
FROM page_header(get_raw_page('accounts',0));
lower | upper | special | pagesize
−−−−−−−+−−−−−−−+−−−−−−−−−+−−−−−−−−−−
152 | 6904 | 8192 | 8192
(1 row)
0
header
24
anarrayofitempointers
lower
freespace
upper
items
special
specialspace
pagesize
Special Space
Thespecialspaceislocatedintheoppositepartofthepage,takingitshighestad-
dresses.Itisusedbysomeindexestostoreauxiliaryinformation;inotherindexes
andtablepagesthisspaceiszero-sized.
Ingeneral,thelayoutofindexpagesisquitediverse;theircontentlargelydepends
onaparticularindextype. Evenoneandthesameindexcanhavedifferentkinds
of pages: forexample, -trees havea metadata page of a special structure(page
zero)andregularpagesthatareverysimilartotablepages.
Tuples
Rowscontaintheactualdatastoredinthedatabase,togetherwithsomeadditional
information.Theyarelocatedjustbeforethespecialspace.
67
Chapter3 PagesandTuples
Inthecaseoftables,wehavetodealwithrowversionsratherthanrowsbecause
multiversion concurrency control implies having several versions of one and the
same row. Indexes do not use this  mechanism; instead, they have to ref-
erence all the available row versions,falling back on visibility rules to select the
appropriateones.
Both table row versions and index entries are often referred to as tuples. This term is
borrowed from the relational theory—it is yet another legacy of Postgre’s academic
past.
Item Pointers
Thearrayofpointerstotuplesservesasthepage’stableofcontents. Itislocated
rightaftertheheader.
Index entries have to refer to particular heap tuples somehow. Postgre em-
ployssix-bytetupleidentifiers(s)forthispurpose.Eachconsistsofthepage
p. numberofthemainforkandareferencetoaparticularrowversionlocatedinthis
page.
Intheory,tuplescouldbereferredtobytheiroffsetfromthestartofthepage.But
then it would be impossible to movetuples within pages without breaking these
references,whichinturnwouldleadtopagefragmentationandotherunpleasant
consequences.
Forthisreason,Postgreusesindirectaddressing:atupleidentifierreferstothe
correspondingpointernumber,andthispointerspecifiesthecurrentoffsetofthe
tuple. If the tuple is moved within the page,its  still remains the same; it is
enoughtomodifythepointer,whichisalsolocatedinthispage.
Eachpointertakesexactlyfourbytesandcontainsthefollowingdata:
• tupleoffsetfromthestartofthepage
• tuplelength
• severalbitsdefiningthetuplestatus
68
3.2 RowVersionLayout
Free Space
Pagescanhavesomefreespaceleftbetweenpointersandtuples(whichisreflected
inthefreespacemap).Thereisnopagefragmentation: allthefreespaceavailable p.
isalwaysaggregatedintoonechunk.1
3.2 Row Version Layout
Eachrowversioncontainsaheaderfollowedbyactualdata. Theheaderconsists
ofmultiplefields,includingthefollowing:
xmin,xmax representtransactions;theyareusedtodifferentiatebetweenthis
andotherversionsofoneandthesamerow.
infomask providesasetofinformationbitsthatdefineversionproperties.
ctid isapointertothenextupdatedversionofthesamerow.
nullbitmap isanarrayofbitsmarkingthecolumnsthatcancontainvalues.
Asaresult,theheaderturnsoutquitebig: itrequiresatleastbytesforeachtu-
ple,andthisvalueisoftenexceededbecauseofthenullbitmapandthemandatory
paddingusedfordataalignment.Ina“narrow”table,thesizeofvariousmetadata
caneasilybeatthesizeoftheactualdatastored.
Datalayoutondiskfullycoincideswithdatarepresentationin.Thepagealong
with its tuples is read into the buffer cache as is, without any transformations.
That’swhydatafilesareincompatiblebetweendifferentplatforms.2
One of the sources of incompatibility is the byte order. For example,the x ar-
chitectureislittle-endian,z/rchitectureisbig-endian,andhasconfigurable
byteorder.
Anotherreasonisdataalignmentbymachinewordboundaries,whichisrequired
bymanyarchitectures. Forexample,ina-bitxsystem,integernumbers(the
integer type, takes four bytes) are aligned by the boundary of four-byte words,
1 backend/storage/page/bufpage.c,PageRepairFragmentationfunction
2 include/access/htup_details.h
69
Chapter3 PagesandTuples
justlikedouble-precisionfloating-pointnumbers(thedoubleprecisiontype,eight
bytes). Butina-bitsystem,doublevaluesarealignedbytheboundaryofeight-
bytewords.
Dataalignmentmakesthesizeofatupledependentontheorderoffieldsinthe
table.Thiseffectisusuallynegligible,butinsomecasesitcanleadtoasignificant
sizeincrease.Hereisanexample:
=> CREATE TABLE padding(
b1 boolean,
i1 integer,
b2 boolean,
i2 integer
);
=> INSERT INTO padding VALUES (true,1,false,2);
=> SELECT lp_len FROM heap_page_items(get_raw_page('padding', 0));
lp_len
−−−−−−−−
40
(1 row)
Ihaveusedtheheap_page_itemsfunctionofthepageinspectextensiontodisplay
somedetailsaboutpointersandtuples.
InPostgre,tablesareoftenreferredtoasheap. Thisisyetanotherobscuretermthat
hints at the similaritybetween space allocation for tuples and dynamicmemoryalloca-
tion.Someanalogycancertainlybeseen,buttablesaremanagedbycompletelydifferent
algorithms.Wecaninterpretthisterminthesensethat“everythingispiledupintoaheap,”
bycontrastwithorderedindexes.
Thesizeoftherowisbytes. Itsheadertakesbytes,acolumnoftheinteger
typetakesbytes,andbooleancolumnstakebyteeach.Itmakesbytes,and
bytesarewastedonfour-bytealignmentofintegercolumns.
Ifwerebuildthetable,thespacewillbeusedmoreefficiently:
=> DROP TABLE padding;
=> CREATE TABLE padding(
i1 integer,
i2 integer,
b1 boolean,
b2 boolean
);
70
3.3 OperationsonTuples
=> INSERT INTO padding VALUES (1,2,true,false);
=> SELECT lp_len FROM heap_page_items(get_raw_page('padding', 0));
lp_len
−−−−−−−−
34
(1 row)
Another possible micro-optimization is to start the table with the fixed-length
columns that cannot contain  values. Access to such columns will be more
efficientbecauseitispossibletocachetheiroffsetwithinthetuple.1
3.3 Operations on Tuples
Toidentifydifferentversionsofoneandthesamerow,Postgremarkseachof
themwithtwovalues: xminandxmax.Thesevaluesdefine“validitytime”ofeach
rowversion,butinsteadoftheactualtime,theyrelyonever-increasingtransaction
s. p.
Whenarowiscreated,itsxminvalueissettothetransactionofthecom-
mand.
Whenarowisdeleted,thexmaxvalueofitscurrentversionissettothetransaction
ofthecommand.
With a certain degree of abstraction, the  command can be regarded as
two separate operations:  and . First,the xmax value of the current
rowversionissettothetransactionofthecommand. Thenanewver-
sionofthisrowiscreated;itsxminvaluewillbethesameasthexmaxvalueofthe
previousversion.
Nowlet’sgetdowntosomelow-leveldetailsofdifferentoperationsontuples.2
Fortheseexperiments,wewillneedatwo-columntablewithanindexcreatedon
oneofthecolumns:
1 backend/access/common/heaptuple.c,heap_deform_tuplefunction
2 backend/access/transam/README
71
Chapter3 PagesandTuples
=> CREATE TABLE t(
id integer GENERATED ALWAYS AS IDENTITY,
s text
);
=> CREATE INDEX ON t(s);
Insert
Startatransactionandinsertonerow:
=> BEGIN;
=> INSERT INTO t(s) VALUES ('FOO');
Hereisthecurrenttransaction:
=> -- txid_current() before v.13
SELECT pg_current_xact_id();
pg_current_xact_id
−−−−−−−−−−−−−−−−−−−−
776
(1 row)
Todenotetheconceptofatransaction,Postgreusesthetermxact,whichcanbefound
bothinfunctionnamesandinthesourcecode.Consequently,atransactioncanbe
calledxact,,orsimply. Wearegoingtocomeacrosstheseabbreviationsover
andoveragain.
Let’stakealookatthepagecontents. Theheap_page_itemsfunctioncangiveus
alltherequiredinformation,butitshowsthedata“asis,”sotheoutputformatis
abithardtocomprehend:
=> SELECT *
FROM heap_page_items(get_raw_page('t',0)) \gx
−[ RECORD 1 ]−−−−−−−−−−−−−−−−−−−
lp | 1
lp_off | 8160
lp_flags | 1
lp_len | 32
t_xmin | 776
t_xmax | 0
t_field3 | 0
t_ctid | (0,1)
72
3.3 OperationsonTuples
t_infomask2 | 2
t_infomask | 2050
t_hoff | 24
t_bits |
t_oid |
t_data | \x0100000009464f4f
To make it more readable,we can leave out some information and expand a few
columns:
=> SELECT '(0,'||lp||')' AS ctid,
CASE lp_flags
WHEN 0 THEN 'unused'
WHEN 1 THEN 'normal'
WHEN 2 THEN 'redirect to '||lp_off
WHEN 3 THEN 'dead'
END AS state,
t_xmin as xmin,
t_xmax as xmax,
(t_infomask & 256) > 0 AS xmin_committed,
(t_infomask & 512) > 0 AS xmin_aborted,
(t_infomask & 1024) > 0 AS xmax_committed,
(t_infomask & 2048) > 0 AS xmax_aborted
FROM heap_page_items(get_raw_page('t',0)) \gx
−[ RECORD 1 ]−−+−−−−−−−
ctid | (0,1)
state | normal
xmin | 776
xmax | 0
xmin_committed | f
xmin_aborted | f
xmax_committed | f
xmax_aborted | t
Thisiswhathasbeendonehere:
• Thelppointerisconvertedtothestandardformatofatuple: (pagenumber,
pointernumber).
• Thelp_flagsstateisspelledout.Hereitissettothenormalvalue,whichmeans
thatitreallypointstoatuple.
• Of all the information bits, we have singled out just two pairs so far. The
xmin_committedandxmin_abortedbitsshowwhetherthexmintransactionis
73