tion block, respectively. The encryption key for Di is speciﬁed by
κ ∈ K. A is the encrypted ciphertext of the enclosed sensitive data.
Finally, if a certain information block requires proof-of-impression
for its render value A, the ﬁeld τD indicates the nonce token for
this information block, and FD refers to the function to be invoked
with the impression token by the CRYPTON-KERNEL.
3.2 CRYPTON-KERNEL Design
The CRYPTON-KERNEL provides secure processing of sensitive
web content for a CRYPTON-compliant web browser, while never
exposing decrypted data to the browser. As shown in Figure 1,
our solution needs to instrument the untrusted browser, which com-
municates with the CRYPTON-KERNEL running in another process
via IPC channels. We develop a new thin engine called the Thin
Encrypted Memory Interpreter (TEMI) to execute CRYPTON func-
tions over sensitive data. We now present a brief overview of our
solution with a hypothetical example demonstrating protecting sen-
sitive emails in a webmail application.
3The CRYPTON function can also call the enc(data, key)
programmatically to encrypt part of the outputs on demand.
Trusted Operating SystemUntrusted Web BrowserManagerKeyboard EncryptorSecure DisplayJavaScript EngineThin Encrypted Memory Interpreter (TEMI)HTML Parser... other browser componentsNetworkCrypton-KernelInstrumentationIPC ChannelCrypton-Compliant Server1315When the CRYPTON-compliant web browser parses an HTML
document, it encounters the CRYPTON header, functions or infor-
mation blocks. At this time, the browser invokes the CRYPTON-
KERNEL via an IPC interface. Once invoked, the Manager com-
ponent of the CRYPTON-KERNEL processes these special tags, in-
cluding validating their integrity, and retrieving CRYPTON keys via
a secure channel from the server URLs embedded in the CRYPTON
header. The Manager component returns opaque objects to the un-
trusted browser for processed CRYPTONs. These opaque objects
encapsulate encrypted values and metadata such as the correspond-
ing CRYPTON ID and decryption key. They are propagated inter-
nally by the untrusted browser, akin to ordinary browser objects.
(Step A in Figure 2).
The untrusted browser handles the layout of web content, and
composes intermediate constructs for rendering. Another CRYPTON-
KERNEL component, called the Secure Display, intercepts render-
ing requests from the untrusted browser, and converts the layout
constructs into pixel maps written into the GPU buffer. When
opaque objects enclosing encrypted texts traverse through untrusted
code paths in the browser, and ﬁnally reach the Secure Display
component, the Secure Display decrypts them before transform-
ing them into pixel data for the GPU buffer. For example, sensitive
emails in our example are encrypted when they are downloaded
into the browser. When they are being rendered, the Secure Display
component of the CRYPTON-KERNEL decrypts them into plaintext
that is displayed to users (Step B).
To protect user inputs, the Keyboard Encryptor component of
the CRYPTON-KERNEL encrypts all user inputs for the CRYPTON-
enabled webmail application. For example, it encrypts the search
keywords while the user enters them in the untrusted browser. The
resulted opaque object containing the encrypted user inputs is ﬁ-
nally dispatched into the event handler function searchEmail
triggered by a user click on the “Search” button. The webmail
developer marks searchEmail as a CRYPTON function with a
policy κint → κ0, allowing it to decrypt user inputs (such as
search keywords) encrypted with the CRYPTON-KERNEL’s inter-
nal key κint. When searchEmail is invoked, the untrusted
browser transmits the execution to the TEMI, a thin execution envi-
ronment in the CRYPTON-KERNEL. The TEMI decrypts the search
keywords encrypted in the opaque object during the execution of
searchEmail. This allows the function to preprocess the search
terms, such as replacing “+” with “ADD”, and encode the texts.
Then searchEmail constructs an XMLHttpRequest containing
the preprocessed search terms and sends it to the webmail server.
When the webmail server receives the request, it decrypts the search
terms and searches for them in the email database (Step C).
Subsequently, search results are returned to the untrusted browser
in JSON format where innermost email headings are encrypted.
The registered XMLHttpRequest handler function parseJson is
invoked to tokenize and validate the JSON string, and return a com-
posed HTML fragment to be rendered to the user. The email head-
ings in the HTML fragment remain as opaque objects to untrusted
code in the browser, and the Secure Display decrypts them when
rendering the headings for the webmail user (Step D).
3.3 Security Invariants
To protect the conﬁdentiality and integrity of sensitive web con-
tent in an untrusted browser, our solution enforces the following
semantics as security invariants for CRYPTONs.
For information isolation:
P0: Maintaining Syntactic Bindings. A CRYPTON syntacti-
cally binds its elements to each other (such as K to I, P to each Fi
Figure 2: Sequence of Operations in A CRYPTON-Enabled
Webmail Session
and so on) with mentioned keys. These bindings are checked and
enforced throughout the lifetime of the CRYPTON. Authenticated
encryption ensures that any attempt to tamper with such bindings
by malicious code will be prevented.
P1: Secure Storage. All CRYPTON information blocks, func-
tions and intermediate computation by CRYPTON functions is stored
in private memory outside the browser, or encrypted when stored
in memory shared with the browser. The standard guarantees of
authenticated encryption apply to these.
P2: Secrecy of K. The keys K are only stored in the CRYPTON-
KERNEL and not accessible to the CRYPTON-compliant browser.
For controlled operations:
P3: Functional Policy. If a function Fi is bound to a policy
κ → κ(cid:48), then all sensitive data processed by it is decrypted using
κ, and all values written by Fi are encrypted with κ(cid:48), e.g., modiﬁed
global variables, local variables, arguments of calls to untrusted
browser functions, and return values. See P5 as the only exception.
P4: Non-interfering Execution. The execution of two func-
tions F1 and F2 are non-interfering on the CRYPTON-KERNEL, if
they are bound to policies κ1 → κ(cid:48)
2 respectively, and
{κ1, κ(cid:48)
_ → ⊥ output plaintext to the browser4.
P5: Information Release. Only functions bound to policies
1 and κ2 → κ(cid:48)
1} ∩ {κ2, κ(cid:48)
2} = ∅.
For certiﬁed user inputs:
P6: User Input Encryption. User keyboard inputs are en-
crypted with the CRYPTON-KERNEL’s internal key κint, and only
CRYPTON functions bound to policy κint → _ can decrypt the
inputs.
P7: Restricted Keyboard Access. The CRYPTON-KERNEL in-
tercepts all keyboard events before they are delivered to the browser.
4_ denotes any key or ⊥.
Crypton-KernelArequest user inputCTEMISecure Displaydecrypt & draw inbox emailsrender inbox emailsdecrypted user input  construct and render          email headingsreplacement scriptsrender email headingsencrypt user inputBparse crypton headerackencrypted user inputKeyboadEncryptorcall parseJsondecrypt & draw email headingscrypton objectDOS Untrusted Web Browserrequest crypton keysack impression (if PoI is requested)parse crypton info blockWeb Servercrypton keyscall searchEmailparse crypton functioncall ajax_queryManagerlist of encrypted email headings1316Figure 3: TEMI: a Thin Execution Environment for CRYPTON Functions to Access Sensitive Info
For proof of impression:
P8: Proof of Impression. When an information block Di is
rendered, it should be displayed for a certain period of time without
obstruction or overlay by other UI content. The PoI function spec-
iﬁed by the developer is invoked to compute an encrypted message
acknowledging the rendering to the veriﬁer V in a secure channel.
P9: Restricted Display Access. The CRYPTON-KERNEL me-
diates the rendering operations initiated by the browser.
Summary. With these security invariants, CRYPTONs ensure the
conﬁdentiality and integrity of enclosed sensitive data throughout
its lifecycle in untrusted web browsers.
3.4 Key Techniques and Security Analysis
To ensure the security invariants above, the CRYPTON-KERNEL
provides a thin engine for permitted operations on sensitive data,
and interposes browser display and keyboard events to support trusted
paths for display and user inputs.
Thin Encrypted Memory Interpreter. To execute controlled op-
erations on sensitive data, we design the Thin Encrypted Memory
Interpreter (TEMI) — a thin scripting engine. In designing TEMI,
we face a tradeoff between supporting rich functionality and min-
imizing the TCB. A full-ﬂedged JavaScript engine typically has
200,000 (JavaScriptCore) to 400,000 (the V8 engine) LOC. How-
ever, we observe in our case studies that most of potential sensi-
tive data types on the web are integers and strings, such as user
names, passwords, entries in medical records, credit card numbers,
etc. These data types account for only a very small fraction of the
implementation of the JavaScript engine. Of course, these primi-
tive types are aggregated into higher-level abstract data types (such
as arrays, lists, objects, and so on), but much of the logic that op-
erates on the higher-level data types is agnostic or independent of
the inner nested data. By leveraging this observation, we design a
“thin” TEMI that natively supports integers and strings5, which has
a TCB of only 19, 000 lines of code.
The TEMI runs inside the CRYPTON-KERNEL’s process, com-
municating with the process(es) of the untrusted web browser via
IPC messages (shown in Figure 3). The TEMI has a private virtual
register set (for local computation) in its private memory region.
It decrypts sensitive data in opaque objects when they are loaded
into virtual registers, and re-encrypt all values written from virtual
registers to opaque objects, including global variables, arguments,
and return values. By default, the TEMI uses the default CRYP-
TON key κ0 for encryption and decryption; a developer-speciﬁed
policy κ1 → κ2 of a CRYPTON function dictates κ1 used for de-
5including regular expressions and basic indexing operations on
static arrays of integer or string elements.
cryption, and κ2 for encryption (P3)6. A CRYPTON function that
is allowed to disclose information has a policy _ → ⊥ (P5). The
TEMI retrieves CRYPTON keys from the CRYPTON-KERNEL’s pri-
vate memory storing keys transferred from the web server (P2).
During the execution of a CRYPTON-KERNEL function, any ac-
cess to higher-level abstract data types results in an IPC message
to a proxy in the JavaScript engine of the untrusted browser with
opaque objects as arguments. The proxy translates the message
into operations that are executed in the untrusted JavaScript engine.
For operations initiated by the CRYPTON-KERNEL, any string and
integer operation that emerges during execution in the untrusted
JavaScript engine is tunneled back to the CRYPTON-KERNEL for
processing opaque objects. In our running example in Section 3.2,
the parseJson function sends a message to the untrusted browser
to access complex data structures, such as arrays to perform parsing
operations. The execution then switches back to the TEMI when an
Array.toString function is invoked so that operations on sen-
sitive strings can still be processed in the decrypted form. This
unmodiﬁed CRYPTON function runs in our TEMI as it switches
back and forth between the untrusted browser and the CRYPTON-
KERNEL. For data exchange, the TEMI and the untrusted browser
passes integer and string data in the IPC messages, while only pass
references to high-level data structures as they are processed exclu-
sively at the untrusted browser side.
In our design, accessing higher-level data types deﬁned in the
untrusted browser from the TEMI incurs no explicit data leakage,
since all arguments are encrypted (P1). Implicit control ﬂow leak-
age is possible, while we assume it can be largely ignored in le-
gitimate code [15], such as CRYPTON functions. For compatibility
with existing browsers, when one process is running JavaScript, we
halt the other process until the running process returns.
To prevent interference between different CRYPTON functions,
the TEMI executes each CRYPTON function in a separate context,
which is destroyed upon returning of the function (P4). This in-
cludes virtual registers stored in the private memory region, as well
as encrypted intermediate variables written in the shared memory
region. Similar to garbage collectors, the TEMI clears all these
values when a CRYPTON function returns.
Secure Display. The CRYPTON-KERNEL allows automatic de-
cryption of opaque objects when they are being rendered, but pre-
vents untrusted browser code to access the decrypted information.
6Note that in principle it is possible to have explosive volumes of
encrypted data from the computation over mixed sensitive and non-
sensitive data. We did not observe such cases in our experiments
with real-world web applications, where computation over sensi-
tive data does not yield new sensitive data, but just outputs features
or portions of original data.
Untrusted Web BrowserCrypton-KernelTEMIJavaScript EngineStringIntegerArrayStringBoolCollectionFunction...Private Memory RegionOperations on Externally Defined Data StructuresProcess BoundaryData ExchangeOpaque ObjectsPlaintext DataDecrypt on ReadEncrypt on WriteProxy1317The Secure Display component of the CRYPTON-KERNEL can use
sandboxing techniques similar to Google Chrome [5], such as re-
stricted tokens and Windows job and desktop objects on Windows [57]
and seccomp on Linux [56], to intercept untrusted browser’s ac-
cess to the GPU buffer and graphic libraries on the OS (P9). To
render any UI content, the untrusted browser must pass the ren-
dering requests to the Secure Display. The Secure Display in turn
converts web contents and browser widgets into intermediate ren-
dering constructs (such as Glyphs that are basic shapes in text ren-
dering [13]) and sends them to the graphics library for rendering.
During this process, the Secure Display decrypts opaque objects
containing sensitive strings, with the keys speciﬁed in the opaque
objects. To prevent UI obstruction, while rendering such opaque
objects, for t seconds, the Secure Display temporarily suspends
other rendering requests to the same destination GPU buffer lo-
cation. It also invokes the PoI function for the opaque string being
rendered, if applicable. The PoI function then computes an ac-
knowledgement token encrypted with the CRYPTON’s default key
κ0 and sends it to the external veriﬁer (P8).
Keyboard Encryptor. The Keyboard Encryptor interposes on key-
board events from the graphics toolkit that receives keystrokes. It
encrypts each keystroke event with a CRYPTON-KERNEL-speciﬁc
internal key κint before it reaches the web browser code (P6, P7).
Therefore, web applications cannot read the clear-text of user in-
puts unless by calling the CRYPTON functions with a policy like
κint → _. Together with P3, this ensures that keyboard inputs are
protected, and are available only to intended functions.
Resilience against malicious code in web browsers. Although the
CRYPTON-KERNEL closely integrates the untrusted web browser,
the security guarantee ensured by the CRYPTON-KERNEL are inde-
pendent from the untrusted web browser, i.e., all disclosure of the
sensitive information is controlled by CRYPTON functional policy.
To allow non-invasive operations that do not require plaintext,
the encrypted data in CRYPTON information blocks is stored on
the browser’s storage as opaque objects. These objects are pro-
tected by authenticated encryption for their integrity and conﬁden-
tiality. The keys are available only to the CRYPTON-KERNEL. Un-
trusted code has no access to the keys (P2), and thus cannot decrypt
sensitive data, unless by explicitly invoking information releasing
CRYPTON functions (P5). User inputs are automatically encrypted
before they reach the untrusted web browser (P6), so they are un-
der the same protection as sensitive data coming from web servers.
Web servers can also verify whether sensitive messages are prop-
erly displayed via proof of impression (P8).
Although malicious code cannot decrypt the sensitive data in ci-
phertext, it can tamper with it. However, this will be detected by
integrity veriﬁcation built into authenticated encryption. This en-
sures the integrity of all CRYPTONs from the web and sensitive user
inputs at the client.
Attacks on CRYPTON granularity. Our solution enables web servers
to distinguish data from client side at a binary granularity — i.e.,
between authentic user inputs and everything else. Consider the
following attack. Malicious code injected into a webmail applica-
tion can create a fake login box in the victim session. This fake
login box makes the email composing input box appear as its Pass-
word ﬁeld. A victim user may then enter her password into the
fake Password ﬁeld, which is sent to the attacker in an email. This
is an instance of self-exﬁltration attacks [17]. To defeat this attack,
the web server can mark the TO ﬁeld for email recipients as sen-
sitive, and require its value to come from authentic user inputs at
the client side. Therefore, malicious client-side code has no con-
trol over to where the email will be delivered, even if it can trick
the user into entering her password as the email body. However,
our current solution only distinguishes authentic user inputs from
other data. Attackers may still confuse users between the seman-
tics of two CRYPTON-protected user input ﬁelds, such as luring
the user into entering the email body into the TO ﬁeld by phish-
ing [31,72,73]. In certain applications, this could lead to delivering
emails to unintended recipients. However, we believe such attacks
are application-speciﬁc and difﬁcult to launch. Further, extensions
of CRYPTONs with ﬁner-grained isolation can be explored to defeat
such attacks.
3.5 Usability Implications
We discuss the usability implications that may arise from our