8
Gdi32.dll  
User32.dll  
msvcrt.dll  
Ws2_32.dll和wsock32.dll  
wininet.dll  
urlmon.dll  
NTDLL.dll  
有关图形显示的扩展函数库。
这个库的函数可以⽤来创建和操纵windows⽤户的洁⾯组建，例如窗⼝、桌⾯、菜单、消息通知、告警
等等。
包含了c语⾔的标准库函数的执⾏库。
包含⽹络连接相关的函数。
http和ftp协议的⾼级函数。
这是⼀个wininet.dll的包装，它通常⽤来MIME类型连接和下载⽹络内容。
扩展windows本地API函数和⾏为作为在⽤户程序及核之间的转换器。程序通常不会直接从ntdll.dll引⽤
函数；ntdll.dll中的函数通常被间接的被如kernel32.dll的dll调⽤。ntdll.dll中的函数通常都是⽆⽂档的
9
在http://www.pinvoke.net/default.aspx/advapi32.ControlService中可以清楚看到DLL的调⽤实例： 
我们也可以使⽤Dllexp.exe来进⾏分析Dll的导出函数及其虚拟内存地址。 
https://www.nirsoft.net/utils/dll_export_viewer.html 
10
我们还需要明⽩DLL是如何从⽂件夹中被应⽤加载的，在微软的⽂档中我们可以看到关于动态链接库搜
索顺序的⽂章：
简单来说就是：
应⽤程序⾃身⽬录
C:\Windows\System32 
C:\Windows\System 
C:\Windows 
当前⼯作⽬录
系统 PATH 环境变量中的⽬录 
⽤户 PATH 环境变量中的⽬录 
1.4.DLL如何加载 
https://docs.microsoft.com/en-us/windows/win32/dlls/dynamic-link-library-search-order
●
●
●
●
●
●
●
11
同时我们可以看到微软定义了⼀个已知 DLL 列表 
如果 DLL 在运⾏应⽤程序的 Windows 版本的已知 DLL 列表中，则系统使⽤其已知 DLL 的副本（以及已
知 DLL 的依赖 DLL，如果有的话）⽽不是搜索 DLL。 
有关当前系统上已知 DLL 的列表，请参阅以下注册表项：
HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Session Manager\KnownDLLs。 
那么我们可以整理出来流程为：
12
“预搜索”中的位置以绿⾊突出显示，因为它们是安全的（从特权升级的⻆度来看）。如果 DLL 的名称与
已加载到内存中的 DLL 不对应，或者如果它不是已知的 DLL，则开始实际搜索。该程序将⾸先尝试从应
⽤程序的⽬录中加载它。如果成功，则搜索停⽌，否则继续搜索C:\Windows\System32⽂件夹，依此类
推……
Eg:notepad.exe 
DLL 劫持是⼀种常⻅的⾼级攻击技术，可以⽤来提权，维权，绕过应⽤程序⽩名单功能（如 
AppLocker）和钓⻥。从⼴义上讲，DLL 劫持是欺骗合法/受信任的应⽤程序加载任意 DLL。 
2.DLL劫持可能发⽣的⼏个场景 
13
⼀般来说⼀个应⽤在启动的时候都会加载⼀些系统的DLL和⾃身的DLL。 
例如Notepad.exe 
这⾥使⽤Wechat.exe进⾏演示： 
使⽤Process Monitor监测⼀下bthudtask.exe的运⾏，我们可以看到加载了什么DLL。 
2.1.场景1:可以直接劫持某个应⽤的DLL 
14
经过分析我们把⽬标定为dbghelp.dll，这个DLL在微信⾃身的安装⽬录中，并拥有微软的证书。 
那么怎么样证明可以进⾏DLL劫持利⽤？这⾥有⼀个简单的⽅法，直接del这个DLL，如果应⽤启动不起
来或者del之后使⽤Process Monitor监测⼀下来证明这个DLL是否可以利⽤。 
可以利⽤之后导⼊Dllexp.exe看看导出函数 
15
205个函数不是很多,⽅便利⽤我们使⽤AheadLib.exe来⾃动⽣成导出函数吧 
16
然后定位到⼊⼝函数，执⾏我们想要的操作就可以。例如弹计算机
修改dbghelp.dll为dbghelpOrg.dll，然后编译新的dll为dbghelp.dll⼀起复制到原⽬录中 
17
启动wechat.exe就可以看到打开了calc.exe 
在Process Monitor中我们可以看到：加载了我们的DLL 
18
这⾥以360安全卫⼠的360tray.exe为例⼦。 
Eg: 
可以看到加载了不存在的DLL 
2.2.场景2:不存在DLL 劫持 
19
之后的操作跟场景1不同的是我们不⽤导出原来DLL的函数，直接写⼀个新的DLL命名为wow64log.dll复
制进去就可以，在这⾥还是弹calc证明利⽤。 
复制命名好的DLL到⽬标⽬录中 
wow64log.dll与 WoW64 Windows 机制有关，该机制允许在 64 位 Windows 上运⾏ 32 位程序。该⼦
系统会⾃动尝试加载它，但是它不存在于任何公共 Windows 版本中。
C:\Windows\System (Windows 95/98/Me)C:\WINNT\System32 (Windows 
NT/2000)C:\Windows\System32 (Windows XP,Vista,7,8,10)如果是64位⽂件
C:\Windows\SysWOW64
作为管理员，我们可以构造恶意 wow64log.dll ⽂件复制到 System32 。
20
在PROCESS MONITOR中监测360安全卫⼠的主要进程发现我们的恶意DLL加载到了进程内存中，也就
是说漏洞利⽤成功；
21
这⾥以wechat.exe为例⼦，使⽤Process Monitor监测⼀下进程的DLL调⽤。我们把⽬标放在
CRYPTSP.dll中，我们可以看到： 
可以看到wechat.exe先是搜索了微信安装⽬录\WeChat\和\WeChat\[3.7.5.23]\然后
C:\Windows\SysWOW64\中才找到了这个DLL
那么从理论上说我们可以在微信的安装⽬录中放⼀个我们的DLL来给wechat.exe查找到并把我们的dll加
载到进程内存中。
2.3.场景3:DLL 搜索顺序劫持 
22
编译之后复制到微信的安装⽬录中
然后启动wechat.exe,弹出了calc. 
23
同时在Process Monitor看到了Wechat.exe成功加载了我们的DLL 
2.4.其他 
24
WinSxS DLL 替换：将⽬标DLL 的相关WinSxS ⽂件夹中的合法DLL 替换为恶意DLL。通常称为 DLL 侧
加载 。 
相对路径 DLL 劫持：将合法应⽤程序与恶意 DLL ⼀起复制（并可选择重命名）到⽤户可写⽂件夹。 
这⾥不过多讨论。
在渗透测试和APT攻击中对DLL劫持⽐较常⽤的操作就是利⽤来进⾏钓⻥和权限维持了。 
这⾥我们来分析⼀下APT中使⽤的⼿法来更好了解DLL劫持在钓⻥维权中的作⽤。 
Qbot在钓⻥中⼀共会投放以下⽂件： 
3.常⻅的DLL攻击利⽤⼿法 
3.1.DLL 加载劫持进⾏钓⻥维权 
3.1.1.实例1 Qbot(⼜名 Qakbot 或 Pinkslipbot)劫持Calc.exe的
WindowsCodecs.dll 
LNK ⽂件：TXRTN_8468190
WindowsCodecs.dll - Windows ⽂件
Calc.exe - 具有隐藏属性的合法 Windows ⽂件
25
执⾏ LNK ⽂件后，它会启动“Calc.exe”。在执⾏“Calc.exe”时，会加载包含恶意代码的名
为“WindowsCodecs.dll”的⽂件(DLL劫持加载)。然后触发加载真正的⽊⻢⽂件102755.dll。 
在Kaseya的⽊⻢投放的过程中通过投放MsMpEng.exe和mpsvc.dll进⾏利⽤，MsMpEng.exe是属于
Windows Defender⾃动保护服务的核⼼进程，包括在Microsoft AntiSpywaresoftware的⼯具组件中。 
102755.dll - 具有隐藏属性的 Qbot DLL 
3.1.2.实例2 Kaseya 劫持MsMpEng.exe的mpsvc.dll 
26
在启动的过程中会加载mpsvc.dll绕过杀毒软件的监测执⾏恶意代码。 
在LuminousMoth APT针对缅甸交通运输部，缅甸对外经济关系部的钓⻥攻击中我们可以看到：分
别使⽤了sllauncher.exe(APT修改名字为：igfxem.exe”)劫持加载的version.dll和winword.exe劫
持加载的wwlib.dll。其中“version.dll”的⽬的是传播到可移动设备，⽽“wwlib.dll”的⽬的是下载 
Cobalt Strike beacon。 
3.1.3.实例3 LuminousMoth APT劫持多个DLL进⾏利⽤ 
27
在“winword.exe”以加载下⼀阶段wwlib.dll中还会通过添加“Opera Browser Assistant”作为运⾏
键来修改注册表，从⽽在系统启动时使⽤“assist”参数实现持久性和执⾏恶意软件。 
MSDTC 是⼀个 Windows 服务，负责协调数据库（SQL 服务器）和 Web 服务器之间的事务。msdtc 服
务启动时会搜索 3 个 DLL,oci.dll、SQLLib80.dll和xa80.dll，默认情况下 Windows 系统⽬录中不存在这
些 DLL，其中⼀个是名为 oci.dll 的 Oracle 库。恶意 DLL 被放⼊ Windows 系统⽬录并重命名为 oci.dll，
从⽽导致它被 msdtc 服务加载。对应服务为MSDTC，全称Distributed Transaction Coordinator，
Windows系统默认启动该服务 
3.1.4.实例4 ChamelGang APT 劫持MSDTC进⾏维权 
28
那么在劫持了msdtc的DLL情况下，msdtc服务启动下就会加载恶意的DLL达到维权的⽬的。 
 Update.exe是Microsoft Teams 的⼀部分，因此由 Microsoft 签名。 
默认安装会在 Windows 注册表中设置⼀个 Run 键，每次⽤户登录时都会⾃动启动应⽤程序。 
3.1.5.实例5 利⽤劫持Update.exe的CRYPTSP.dll进⾏维权 
3.2.DLL 加载劫持进⾏提权 
29
在任务计划程序服务运⾏中加载了⼀个不存在的DLL 
那么攻击者可以制作⼀个在加载时执⾏代码的特定 DLL 来进⾏利⽤ 
通过分析PATH 环境变量可以发现C:\python27-x64⽂件夹可以写⼊ 
3.2.1 劫持任务计划程序服务加载的WptsExtensions.dll通过 PATH 环境变量
进⾏提权
30
重命名 DLL 为WptsExtensions.dll然后写⼊到⽬标⽬录 
当系统重新启动或服务重新启动时，应⽤程序将以“NT_AUTHORITY\SYSTEM”权限启动 cmd.exe。 
31