The position of any point on Earth can be described as
geodesic data based on diﬀerent reference system. A datum in
WGS84 consists of two angles, expressed in degrees, denoted
latitude and longitude. Latitude describes the north-south
position of a point as the angle between the equatorial plane
(i.e., the plane that intersects Earth through the equator) and
the line between the point and Earth’s center. The value of
latitude is between −90◦ (South pole) and 90◦ (North pole).
Longitude describes the east-west position of a point as the
angle between the plane containing the Prime Meridian and
the line between the point and the Earth’s center. The Prime
Figure 1: Average distance measurement error over
the Mercator, Equidistant Cylindrical and Moll-
weide projections. One party is located at a random
location with latitude 65◦, while the other is 10 km
away, at diﬀerent bearings.
Meridian has longitude 0◦, the values range from −180◦ to
180◦ with negative values to the west of Prime Meridian.
The shortest path between two points on a sphere or an
ellipsoid is along the great circle, i.e., the intersection between
a sphere and a plane which passes through the center of the
sphere. When viewed on a projection, the shortest distance
may appear as a curve – this is why the airplanes trajectories
usually appear as arcs on in-ﬂight maps. Distance between
two points on the Earth ellipsoid can be computed using
Vincenty’s formula [45], or Karney’s algorithm [27]. The
error introduced be these techniques is less than 1 mm [45]
and 15 nm [27] respectively.
Faster – although less accurate – methods for distance
computation exist. We describe three of these methods next.
3.1 Distances over UTM Projection
A straightforward approach to computing distances on
Earth is to transform the problem into computing distances
on a plane. This is done by selecting a projection (e.g., a
map) of Earth’s surface, or part of it. Two points are then
mapped to the projection, where Euclidean distance can be
computed. Although simple, this approach has at least two
important drawbacks. First, two parties willing to measure
their distance must agree on the same projection in order to
properly map their locations. Second, and more importantly,
it introduces errors.
Diﬀerent projections (and projection sizes) have diﬀerent
properties, and lead to diﬀerent distance measurement errors.
Figure 1 illustrates measurement errors on the Mercator,
Equidistant Cylindrical and Mollweide whole Earth projec-
tions, compared to the “exact” distance, computed over the
WGS84 ellipsoid using Vincenty’s formula. All three whole
Earth projections introduce very high average error on the
measured distance. To limit this problem, projections are
usually computed from small slices of Earth, instead of the
0%50%100%0100200300BearingRelative errorMercatorEquidistantMollweide101whole surface. Universal Transversal Mercator (UTM) [8] is
one such projections.
UTM divides Earth’s surface in 60 longitudinal areas,
called zones. The width of each zone is 6◦, with no zone
covering the polar regions. Position of a point is given by
the zone number and its (northing, easting) coordinate pair,
expressed in meters. Northing of a point is the distance on
the projection of the point from the equator, while easting is
the distance of the point from the zone’s central meridian.
For navigational purposes, negative coordinates are avoided
by adding large constants to northing and easting. These
constants are called “false northing” (which corresponds to
10,000 km) and “false easting” (500 km). Negative values do
not pose any problem for distance computation, so we ignore
false northing and false easting in the rest of the paper.
Once two points CA = (xA, yA), CB = (xB, yB) have
been mapped to the same UTM zone, their distance can be
computed as:
DUTM(CA, CB) =(cid:112)(xA − xB)2 + (yA − yB)2
This approach can only be used if both points lay in the
same zone. Therefore, as mentioned in Section 1, UTM
distance should be considered as a baseline for accuracy and
performance.
3.2 Distances over ECEF Coordinate System
The Earth-Centered Earth-Fixed coordinate system uses
cartesian coordinates to describe the position of any point
on Earth. Each location is described using a triplet (x, y, z),
where (0, 0, 0) is the center of Earth’s mass (hence, Earth-
Centered). All coordinates are expressed in meters.
The x, y axes lay on the plane going through the Equator,
with the x axis “pointing” towards the Prime Meridian and
the y axis is oriented to make the system right-handed. The
z axis is oriented towards North Pole. In order to prevent
coordinates on Earth to change with time, the x and y axes
(and thus the whole coordinate system) rotate together with
Earth (hence, Earth-Fixed). Spherical (lat, lon) coordinates
from WGS84, or any other coordinate system, can be easily
converted to ECEF coordinates.
Distance DECEF(CA, CB) between two points CA =
(xA, yA, zA) and CB = (xB, yB, zB) on the great circle can
be computed as:
(xA − xB)2 + (yA − yB)2 + (zA − zB)2
(cid:16)(cid:112)a/(1 − a)
(cid:17)
4R2
a =
c =2 atan
d =Rc
where DECEF(CA, CB) = d.
Value a is the squared Euclidean distance between points
CA and CB (divided by a constant) in three-dimensional
space, i.e., the distance between CA and CB over a straight
line that cuts through Earth. Therefore, in order to compute
the distance on the surface, we derive the central angle c
between CA, Earth’s center, and CB. Finally, the length of
the arc between the two points, represented as d, corresponds
to the distance over the surface. For the angle and arc length
computation, we use a spherical approximation of Earth with
radius R.
3.3 Distances on a Sphere Using Haversine
According to [42], angular distance between two points
(represented as (latitude, longitude) pairs) on a sphere has
been traditionally expressed using the cosine formula. Let
CA = (lat A, lon A) and CB = (lat B, lon B) denote the spher-
ical coordinates of Alice and Bob, respectively. Distance
between CA and CB is computed using the cosine formula
as:
c = cos
−1(sin(lat A) sin(lat B)
+ cos(lat A) cos(lat B) cos(lon A − lon B))
where c is central angle between CA and CB. When used
in conjunction with limited precision arithmetics (e.g., in
privacy-preserving protocols, where precision aﬀects per-
formance), the cosine formula may introduce signiﬁcant
measurement error when two points are in close proxim-
ity. As an example, when Alice and Bob are one kilometer
apart, both on the equator, lon A − lon B ≈ 0.083◦, and
cos(lon A − lon B) ≈ 0.9999999894. Approximating cos(α) to
8 signiﬁcant digits, the resulting distance between Alice and
Bob is zero.
The haversine formula [42] is often used as a replacement
for the cosine formula in order to reduce measurement errors
introduced by cosine of small angles. Haversine, i.e., half the
versed sine, is deﬁned as hav(θ) = (1 − cos(θ))/2.
Let R be the radius of Earth. The haversine formula allows
us to compute the distance DHS(CA, CB) as follows:
+ cos(lat A) cos(lat B)hav(lon A − lon B)
a =hav(lat A − lat B)
(cid:16)(cid:112)a/(1 − a)
(cid:17)
c =2 atan
d =Rc
where DHS(CA, CB) = d. (The meaning of a, c and d is the
same as that in the ECEF formula from Section 3.2.)
Given the trigonometric identity hav(θ) = sin2(θ/2), we
can rewrite the haversine formula in such a way that lat A −
lat B and lon A − lon B are not used as arguments for cosine:
+ cos(lat A) cos(lat B) sin2((lon A − lon B)/2)
a = sin2((lat A − lat B)/2)
(cid:16)(cid:112)a/(1 − a)
(cid:17)
c =2 atan
d =Rc
Therefore, although the cosine and haversine formulas are
mathematically identical, the latter provides better accuracy
with limited machine precision when Alice and Bob are
separated by a small angle.
In the rest of the paper, we use WGS84 as a reference
system for (latitude, longitude) coordinates.
3.4 Proximity Testing
Alice may be interested in determining only if Bob is in
close proximity, i.e., within an arbitrary distance ε. Clearly,
Alice could compute the distance between her and Bob along
Earth’s surface, and then check if it is greater than ε.
For ECEF and haversine distance, however, Alice can use
a simple shortcut; she can convert ε to aε as follows:
a =
(tan 
2R )2
1 + (tan 
2R )2
102This way, aε represents the threshold expressed as straight-
through-Earth distance in the three-dimensional space. Since
the distance between Alice and Bob is a monotonically in-
creasing function of a, we have that a < a ⇐⇒ d < ε.
4. CRYPTOGRAPHIC PRELIMINARIES
We use the term adversary to refer to insiders, i.e., Alice
and Bob. This includes the case when one of the two parties
is compromised. Outside adversaries, e.g., those who can
eavesdrop on the communication channel, are not considered
since their actions can be mitigated via standard network
security techniques.
Our protocols are secure in the presence of semi-honest
(also known as honest-but-curious or passive) participants.
In this model, while participants follow prescribed protocol
behavior, they might try to learn additional information
beyond that obtained during normal protocol execution. For-
mally [13]:
Definition 1. Let P1 and P2 participate in protocol π
that computes function f (in1, in2) = (out1, out2), where ini
and outi denote Pi’s input and output, respectively. Let
VIEWπ(Pi) denote the view of participant Pi during the ex-
ecution of protocol π. More precisely, Pi’s view is formed
by its input, internal random coin tosses ri, and messages
m1, . . ., mt passed between the parties during protocol execu-
tion: VIEWπ(Pi) = (ini, ri, m1, . . ., mt).
We say that protocol π is secure against semi-honest ad-
versaries if for each party Pi there exists a probabilistic poly-
nomial time simulator Si such that:
{Si(ini, fi(in1, in2))} c≡ {VIEWπ(Pi), outi}
where
c≡ denotes computationally indistinguishability.
Homomorphic Encryption. Our constructions use a se-
mantically secure (public key) additively homomorphic en-
cryption scheme. Let(cid:74)m(cid:75) indicate the encryption of message
m using a homomorphic encryption scheme. (To keep no-
tation simple, we omit specifying the public key used for
encryption. All encryptions in our protocols are performed
under Alice’s public key.)
In an additively homomorphic encryption scheme,(cid:74)m1(cid:75) ·
(cid:74)m2(cid:75) =(cid:74)m1 + m2(cid:75), which also implies that(cid:74)m(cid:75)a =(cid:74)m · a(cid:75).
While any encryption scheme with the above properties (such
as the well known Paillier encryption scheme [37]) suﬃces for
the purposes of this work, the construction due to Damg˚ard
et al. [7, 6] (DGK hereafter) is of particular interest here
because it is fast and it produces small ciphertexts. In DGK
a public key consists of (1) a (small, possibly prime) integer
u that deﬁnes the plaintext space; (2) k-bit RSA modulus
N = p · q such that p and q are k/2-bit primes, vp and
vq are t-bit primes, and uvp|(p − 1) and uvq|(q − 1); and
(3) elements g, h ∈ Z∗
N such that g has order uvpvq and h
has order vpvq. Given a message m ∈ Zu, encryption is
performed as(cid:74)m(cid:75) = gmhr mod N , where r ← {0, 1}2.5t. We
refer the reader to [7, 6] for any additional information.
Garbled circuit evaluation. Originated in Yao’s work [48],
garbled circuit evaluation allows two parties to securely eval-
uate any function represented as a boolean circuit. The basic
idea is that, given a circuit composed of gates, Bob creates
a garbled circuit by assigning to each wire two randomly
chosen keys. Bob also encodes gate information in a way
that given keys corresponding to the input wires (encoding
speciﬁc inputs), the key corresponding to the output of the
gate on those inputs can be recovered. Alice then evaluates
the circuit using keys corresponding to inputs of both Alice
and Bob (without learning anything in the process). At
the end, the result of the computation can be recovered by
linking the output keys to the bits which they encode.
Recent literature provides optimizations that reduce com-
putation and communication overhead associated with circuit
construction and evaluation. Kolesnikov and Schneider [29]
describe an optimization that permits XOR gates to be
evaluated for free, i.e., there is no communication overhead
associated with such gates and their evaluation does no in-
volve cryptographic functions. Pinkas et al. [38] additionally
give a mechanism for reducing communication complexity
of binary gates by 25%: now each gate can be speciﬁed
by encoding only three outcomes of the gate instead of all
four. Finally, Kolesnikov et al. [28] improve the complex-
ity of certain commonly used operations such as addition,
multiplication, comparison, etc. by reducing the number
of non-XOR gates: adding two n-bit integers requires 5n
gates, n of which are non-XOR gates; comparing two n-bit
integers requires 4n gates, n of which are non-XOR gates;
and computing the minimum of t n-bit integers (without
the location of the minimum value) requires 7n(t − 1) gates,
2n(t − 1) of which are non-XOR gates.
With the above techniques, evaluating a non-XOR gates
involves one invocation of the hash function. During garbled
circuit evaluation, Alice directly obtains keys corresponding
to the Bob’s inputs from the Bob, and engages in the oblivious
transfer (OT) protocol to obtain keys corresponding to its
own input.
Oblivious Transfer. In 1-out-of-2 Oblivious Transfer, OT 2
1 ,
one party, the sender, has as its input two strings m0, m1
and another party, the receiver, has as its input a bit b. At
the end of the protocol, the receiver learns mb and the sender
learns nothing. Similarly, in 1-out-of-N OT the receiver
obtains one of the N strings held by the sender. There
is a rich body of research literature on OT, and in this
chapter we use its eﬃcient implementation from [35] as well
as techniques from [22] that reduce a large number of OT
protocol executions to κ of them, where κ is the security
parameter.
Discretization. Because our privacy-preserving protocols
are designed to work on integer values, we map each real-
valued protocol input to integers according to the following
formula: discretizee(x) = (cid:98)10e · x + 0.5(cid:99). The e parameter
controls the shift of the decimal point (the choice of appro-
priate values for e is discussed in Section 7). Therefore, the