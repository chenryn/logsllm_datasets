of the Fiat-Shamir heuristic [13].
5. AN EFFICIENT DAKE SCHEME FROM
RING SIGNATURES
While Φdre can be made efﬁcient through the use of interactive
DRE, the resulting protocol requires 9 ﬂows to complete the key
exchange.
In environments with high latency, such an approach
may be undesirable. Additionally, Φdre is a non-contributory key
exchange; the resulting shared secret is chosen entirely by a sin-
gle party (the responder R). Consequently, an adversary that has
corrupted R can cause the initiator I to use an adversarially cho-
sen key. Moreover, while Φdre allows parties to transmit identities
within the protocol, the ideal functionality used by Walﬁsh to prove
the scheme’s security represents a pre-speciﬁed peer key exchange
(i.e., both parties must know the identity of the other participant
before the protocol begins), which fails to capture this feature.
All of these limitations can be overcome by a family of key ex-
changes known as SIGMA (“SIGn-and-MAc”) protocols. First
proposed by Krawczyk [16], SIGMA protocols are contributory
(both parties ensure the randomness and freshness of the resulting
key), consist of only 3 message ﬂows, and permit post-speciﬁed
peers (i.e., the identity of the other party is an output of the pro-
tocol). Canetti and Krawczyk have previously shown that a ba-
sic SIGMA protocol is UC-secure in the FSIG-hybrid model with
adaptive corruptions [7]. Unfortunately, this proof shares the limi-
tations of all proofs in plain UC-based models, including a failure
to model public key directories that are available to the distinguish-
ing environment. Additionally, no SIGMA protocols can match the
strong deniability properties offered by Φdre.
In this section, we make use of ring signatures to construct a new
deniable key exchange protocol, inspired by SIGMA designs, that
Algorithm 1 Ideal functionality F IncProc
post-keia
on receipt of (initiate, sid, I, SKI ) from I:
if (I is “active”) return
Mark I as “active”
Send (initiate, sid, I) to S
on receipt of (establish, sid, R, SKR) from R:
if (I is not “active”) return
if ((R is “active”) || (R is “aborted”)) return
Mark R as “active”
Send (establish, sid, R) to S
k $←− {0, 1}λ
on receipt of (set-key, sid, T, P (cid:48), k(cid:48)) from S:
if (a set-key message was already sent to T ) return
if ((T /∈ {I, R}) || (T is not “active”)) return
Let P ∈ {I, R} such that P (cid:54)= T
if ((P (cid:48) (cid:54)= P ) && (P (cid:48) is uncorrupted)) return
if ((I is corrupt) || (R is corrupt)) {
Send (set-key, sid, P (cid:48), k(cid:48)) to T
} else {
Send (set-key, sid, P, k) to T
}
if (two set-key messages have been sent) Halt
on receipt of (abort, sid, I, R) from S:
if (I is “active”) Send delayed (abort, sid, I) to I
if (R is “active”) {
Mark R as “aborted”
Send delayed (abort, sid, R) to R
on receipt of (incriminate, sid, I, R) from S:
if (already received incriminate message) return
if ((R is “aborted” and honest) && (I is “active”)) {
Execute IncProc(sid, I, R, P KI , P KR, SKR, k)
}
}
offers provably strong security and deniability in the GUC frame-
work. The resulting protocol, RSDAKE, is not a true SIGMA pro-
tocol (since it does not need to use a MAC), but it addresses all of
the aforementioned problems with Φdre.
5.1 Functionality F IncProc
post-keia
keia
post-keia and the design decisions behind it.
Before deﬁning RSDAKE, we begin by formulating an ideal
functionality in the GUC framework that captures the desired prop-
erties. The new functionality, F IncProc
post-keia (post-speciﬁed peer key
exchange with incriminating abort), is given in Algorithm 1. The
name and operation of F IncProc
post-keia is partially based on the F IncProc
functionality deﬁned by Walﬁsh, which was used to prove the se-
curity of Φdre [29]. In the remainder of this section, we discuss the
behavior of F IncProc
To prove the security of SIGMA protocols using the UC frame-
work, Canetti and Krawczyk deﬁned Fpost-ke, an ideal functional-
ity that models a key exchange with post-speciﬁed peers [7]. Like
Fpost-ke, F IncProc
post-keia takes place between an unbounded number of
parties, but each session captures the interaction between only two
of these parties. The ﬁrst party to request a key exchange is sub-
sequently known as I, the initiator. The second party to request
a key exchange is subsequently known as R, the responder. After
both I and R are known, F IncProc
post-keia selects a random shared key
k for the session. The adversary is then given a chance to attempt
to set the output (the shared key and the identity of the other party)
of both I and R. If the adversary has corrupted either party, then
I
R
i $←− {0, 1}λ
(pkI , skI ) ← SigGen()
(rpkI , rskI ) ← RSGen()
Compute gir and erase i
“I” (cid:107) pkI (cid:107) gi (cid:107) rpkI (cid:107) Sig(pkI , skI , gi(cid:107)rpkI )
“R” (cid:107) pkR (cid:107) gr (cid:107) rpkR (cid:107) Sig(pkR, skR, gr(cid:107)rpkR)
(cid:107) RSig(P KR, SKR,{P KI , P KR, rpkI}, “0”(cid:107)“I”(cid:107)pkI(cid:107)pkR)
RSig(P KI , SKI ,{P KI , P KR, rpkR}, “1”(cid:107)“R”(cid:107)pkR(cid:107)pkI )
Figure 2: RSDAKE. The shared secret is gir.
r $←− {0, 1}λ
(pkR, skR) ← SigGen()
(rpkR, rskR) ← RSGen()
Compute gir and erase r
keia , F IncProc
it is given the ability to send an adversarially chosen secret k(cid:48) and
partner identity P to I and R.3 Otherwise, each party is given k
and the true identity of their conversation partner.
Unfortunately, Fpost-ke cannot be realized in the GUC frame-
work in the ¯Gkrk-hybrid model. Similarly to F IncProc
post-keia
must explicitly weaken the deniability of the protocol by allow-
ing for incriminating aborts. Concretely, we allow the adversary to
abort the protocol in order to cause R to output incriminating infor-
mation. The nature of this incriminating information is a parameter
to F IncProc
post-keia in the form of a procedure IncProc, allowing it to be
tailored to the real protocol under consideration. When the adver-
sary S asks F IncProc
post-keia to abort, an instance of IncProc is started.
S cannot cause an uncorrupted R to output a key after the protocol
has aborted, but it may still cause I to output a key by withholding
the abort message sent to I.
post-keia and
F IncProc
keia , it is the initiator I that releases
incriminating information when the protocol aborts.
In contrast,
if the RSDAKE exchange aborts, incriminating information will
be released by the responder R. Additionally, since incriminating
aborts in F IncProc
post-keia occur after R has generated k, IncProc must
also accept k as input.
5.2 RSDAKE
There are several subtle differences between the F IncProc
functionalities. In F IncProc
keia
Our new protocol, RSDAKE, is presented in Figure 2. Each pro-
tocol participant P has a long-term key pair (P KP , SKP ) for a
ring signature scheme, where P KP is publicly known. To begin
a session, the initiator I generates an ephemeral signing key pair
(pkI , skI ), an ephemeral Difﬁe-Hellman public key gi, and a ring
signature key pair (rpkI , rskI ). It sends its identity, its ephemeral
public keys, and a signature of gi(cid:107)rpkI using pkI to R. This signa-
ture binds the ephemeral keys for the different schemes to the same
“master” key pkI. This ﬁrst message is referred to as ψ1.
Responder R performs the same procedure and responds with
pkR, gr, and rpkR. It also performs a ring signature of the two
ephemeral master keys pkI and pkR as well as the identity of I.
The response message is referred to as ψ2. The ring used for this
signature is {P KI , P KR, rpkI}. This ring signature serves the
same purpose as the (traditional) signature and MAC in the ba-
sic SIGMA protocol. An honest I is convinced that R produced
post-keia models a scenario in which the adversary S can com-
3F IncProc
pletely control the value of the shared secret key after corrupting
only one party. In a contributory key exchange, S may not have
full control over this value, but it can still inﬂuence the result.
the signature because it knows that no other parties have access to
SKI or rskI. It also knows that this signature has not been reused
from another session (because it contains pkI and pkR), and that
R believes that it is communicating with the correct partner (be-
cause the signature contains the identity of I). However, this proof
is not transferable to any other party because the signature could
have also been forged by I using SKI.
In the third and ﬁnal step of the protocol, I responds with its own
ring signature of the master ephemeral keys and the identity of R,
computed over the ring {P KI , P KR, rpkR}. This ﬁnal message is
referred to as ψ3. R is convinced of I’s identity, but cannot transfer
this conviction, for the same reasons as before. The resulting shared
secret is gir, as in a standard Difﬁe-Hellman exchange.
Unlike SIGMA protocols, RSDAKE offers ofﬂine repudiation
equal to that of Φdre. Speciﬁcally, anyone can forge a key exchange
(and subsequent conversation) between any two parties I and R us-
ing nothing other than P KI and P KR. An ofﬂine forger is in the
unique position of generating ephemeral keys for both simulated
parties, and so it can compute both ring signatures using rskI and
rskR. Transcripts generated by such a forger are indistinguish-
able from real transcripts due to the security of the ring signature
scheme. If the ring signature scheme provides security under full-
key exposure, this indistinguishability holds even if the long-term
secret keys of both I and R are subsequently compromised.
Assuming the existence of a signature scheme and a ring sig-
nature scheme that is secure under full-key exposure, RSDAKE
GUC-realizes F IncProc
-hybrid model
with fully adaptive corruptions. For brevity, we omit proof of this
claim here; a formal proof can be found in the ﬁrst author’s Mas-
ter’s thesis [27, §3.7.3].
post-keia within the erasure ¯GRSDAKE
krk
6. A NON-INTERACTIVE DAKE
Both Φdre and RSDAKE have a usability limitation: they are
interactive protocols (i.e., they require both parties to be online).
In applications such as secure messaging, the key exchange must
be completed before messages can be transmitted.
In some do-
mains, such as instant messaging, consistent peer availability may
be a valid assumption. However, email and text messaging are two
extremely popular systems in which interactive key exchanges can-
not be used in general. These environments beneﬁt from the use of
non-interactive key exchanges; secure messages can be sent imme-
diately to any peer in the network, irrespective of their connectivity.
TextSecure [19] is a popular secure messaging application for
mobile phones that offers one of the most comprehensive sets of
Algorithm 2 Ideal functionality F IncProc
1psp-keia
on receipt of (establish, sid, I, R, SKR) from R:
on receipt of (solicit, sid, I, SKI ) from I:
if ((I is “active”) || (I is “aborted”)) return
Mark I as “active”; record (initiator, sid, I, SKI )
Send (solicit, sid, I) to S
if ((solicit not received) || (R is “active”)) return
Mark R as “active”; record (responder, sid, R, SKR)
Send (establish, sid, I, R) to S
k $←− {0, 1}λ
on receipt of (set-key, sid, P, k(cid:48)) from S:
if ((k is set) && (P = R || P is corrupt)) {
Send (set-key, sid, I, P, k(cid:48)) to R
if (I is “active”) {
if (R is corrupt) {
Send delayed (set-key, sid, I, P, k(cid:48)) to I
Send (set-key, sid, I, R, k) to R
if (I is “active”) {
Send delayed (set-key, sid, I, R, k) to I
} else {
}
}
}
}
Halt
}
}
on receipt of (abort, sid, I, R) from S:
if (I is “active”) {
Mark I as “aborted”
Send delayed (abort, sid, I, R) to I
on receipt of (incriminate, sid, R) from S:
if (already received incriminate message) return
if ((I is “aborted”) && (R is “active”) && (R is honest)) {
Execute IncProc(sid, I, R, P KI , P KR, SKR, k)
security features [28]. TextSecure currently uses the triple Difﬁe-
Hellman (3-DH) DAKE, but this protocol does not offer online re-
pudiation. In this section, we present a secure and deniable one-
round key exchange protocol that can be used in interactive or non-
interactive settings, with the ultimate goal of improving the denia-
bility of TextSecure.
6.1 Functionality F IncProc
1psp-keia
To prove that our key exchange is secure in the GUC framework,
we must deﬁne an ideal functionality that captures the behavior
of TextSecure. Unfortunately, neither F IncProc
post-keia fully
describe the desired properties.
keia nor F IncProc
In TextSecure, the initiator I begins by uploading “prekeys” to
a central server. A prekey is a set of ephemeral information that
can be used as the ﬁrst ﬂow of a one-round key exchange protocol.
Subsequently, the responder R requests the next available prekey
for I and uses it to complete the key exchange. In practice, the