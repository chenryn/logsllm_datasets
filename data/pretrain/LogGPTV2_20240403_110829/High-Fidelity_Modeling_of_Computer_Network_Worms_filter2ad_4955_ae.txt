Packet-level  modeling  goes  a 
for  many  network  dynamics 
for  many  network  dynamics 
characteristics 
characteristics 
in 
in 
accounting 
and 
and 
accounting 
application
to 
application
to 
accommodate  in  aggregate  methods.
  Emulations
accommodate  in  aggregate  methods.
  Emulations
(traditional & constructive) help enhance the fidelity of
(traditional & constructive) help enhance the fidelity of
packet-level  models 
levels  by
packet-level  models 
levels  by
incorporating actual systems into portions of simulated
incorporating actual systems into portions of simulated
scenarios.    However,  packet-level  simulations  are
scenarios.    However,  packet-level  simulations  are
limited in fidelity by the amount of detail incorporated
limited in fidelity by the amount of detail incorporated
into their models.  Emulations are limited in scalability
into their models.  Emulations are limited in scalability
due  to  the  imperative  for  real-time  execution  to keep
due  to  the  imperative  for  real-time  execution  to keep
up  with  their real-system  components.    In  scenarios
up  with  their real-system  components.    In  scenarios
demanding even higher levels of fidelity at large scale, 
demanding even higher levels of fidelity at large scale, 
alternative methods are needed.
alternative methods are needed.
For  example,  packet-level  simulations  generally  do 
For  example,  packet-level  simulations  generally  do 
not  model  operating  system  effects  such  as  process
not  model  operating  system  effects  such  as  process
scheduling delays.    Other  details  in  worm  behavior,
scheduling delays.    Other  details  in  worm  behavior,
such  as  root  exploits,  are  extremely  hard  to  model  at
such  as  root  exploits,  are  extremely  hard  to  model  at
fine  level  of  detail.    Nevertheless,  researchers  would
fine  level  of  detail.    Nevertheless,  researchers  would
greatly  benefit  from  the  possibility  of  capturing  full
greatly  benefit  from  the  possibility  of  capturing  full
system  effects  at  large-scale.      Execution at  that
system  effects  at  large-scale.      Execution at  that
combination of  fidelity  and  scale  cannot  be  met  by
combination of  fidelity  and  scale  cannot  be  met  by
existing  packet-level  or  emulation  methods. Also,
existing  packet-level  or  emulation  methods. Also,
modeling  at  that  level of  detail  entails  prohibitively
modeling  at  that  level of  detail  entails  prohibitively
expensive  model  development  efforts, which  can
expensive  model  development  efforts, which  can
approach  the  effort  of  building  the real  systems
approach  the  effort  of  building  the real  systems
Proceedings of the 20th Annual Computer Security Applications Conference (ACSAC’04) 
1063-9527/04 $ 20.00 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 11:36:04 UTC from IEEE Xplore.  Restrictions apply. 
themselves.    In  fact,  precisely  this  aspect  (models 
asymptotically  approaching  real  systems)  leads  to  our 
next modeling alternative: a fully virtualized system. 
5.1 Virtualization Technology 
Virtualization is an approach to enabling a software 
system  designed  for  one  platform  to  execute  on  a 
different  platform.    For  example,  while  the  Linux 
operating system (OS) is originally designed to execute 
directly  on  native  hardware,  virtualization  technology 
enables  the  same  OS  to  execute  on  top  of  another 
“host”  OS.    The  host  system  provides  a  virtual 
platform  layer  to  make  the  hosted  system  oblivious  to 
the changed environment.  Virtualization technology is 
recently  gaining  significant  attention,  with  many 
systems  being  virtualized.    For  example,  it  is  now 
possible to boot up multiple Windows OS instances as 
mere  processes  hosted  by  another  Windows  OS 
instance.  Similar capabilities exist for Linux and other 
systems  as  well.    With  optimizations,  virtualized 
systems are achieving acceptable performance. 
5.2 High-Fidelity Models & Virtualization 
In  the  context  of  high-fidelity  computer  worm 
modeling,  virtualization  technology  can  be  applied  to 
circumvent  the  traditional  conflict  between  scalability 
and fidelity.  Imagine an internet that entirely executes 
not  by  real-time  clocks,  but  on  virtual  (simulation) 
clocks.    Such  a  network  not  only  retains  the  highest 
fidelity  level,  but  also  is  de-linked  from  real-time 
completely.  Such a virtual network can be achieved as 
follows.  Network links and routers are modeled using 
traditional  packet-level  (parallel/distributed)  network 
simulators.    End-hosts  are  modeled  as  real  systems 
themselves,  with  full  blown  OS’s,  file  systems,  etc.  
However,  unlike  emulation  systems  that  have  end-
hosts  running  on  real  hardware,  the  end-hosts  are 
executed  in  virtualized  environments.    Since  the  end-
hosts are now under the control of a virtual host, they 
are  not  free-running  anymore,  and  hence  can  be 
controlled  at  will.    Since  the  network  is  executed  as  a 
(packet-level)  simulation,  its  execution  is  also  already 
controllable. 
two 
issues 
leaves 
This  approach 
to  resolve: 
communication and timing.  The first, namely, network 
communication, is easily patched between the network 
simulator  and  the  virtualized  end-hosts  by  converting 
packet exchanges into simulation time-stamped events.  
Events  encapsulate  actual  network  packets.    The 
second issue, namely timing, is more complex.  To be 
able  to  fully  virtualize  the  entire  set  of  network-and-
endhosts, it is necessary to synchronize their execution 
with simulation time.  Without proper synchronization, 
we  would  be  faced  again  with  the  original  real-time 
execution  constraint  of  emulation  systems.    Instead, 
time  advances  would  be  carefully  controlled  by 
simulation  clock.  When  a virtual  OS  instance queries 
for  hardware  clock  value,  the  host  OS  is  made  to 
supply  it  the  simulation  clock  value,  rather  than  the 
real-time clock value.  Elapsed time is estimated using 
similar  techniques  (e.g.,  Direct  Execution[27]).    The 
simulation  clock 
is  synchronized  across  parallel 
network  simulator  and  virtual  system  hosts  using 
standard  parallel/distributed  discrete  event  simulation 
techniques.    The  net  effect  of  these  arrangements  is 
that all components of the entire system are lifted away 
from  real-time  and  placed  on  a  controllable  virtual 
timeline. 
5.3 Related Work 
Recent  emulation  efforts  are  in  fact  moving  in  the 
direction  of  virtualization.    Netbed/EmuLab[2]  has 
recently  added  some  support  for  virtual  nodes[28]  to 
multiplex more than one end-host or router on the same 
physical resource.  Our work differs from virtual nodes 
of  Netbed  in  that  we  are  interested  in  virtualizing  the 
entire  system,  including  the  end-hosts  and  routers.  
This  involves  re-mapping  real-time  of  the  end-hosts 
(virtualized  end-hosts)  to  simulation  time  that  is 
synchronized  with  the  network  (routers).    In  existing 
emulation/live  methods,  end-hosts  are  paced  by  real-
time, whether they are multiplexed or not.  Due to this 
requirement  and  other  reasons,  existing  methods  are 
typically difficult to scale to more than a few hundreds 
of end-hosts. 
5.4
Implementation Systems 
level  of  virtualization 
As  indicated  earlier,  a  range  of  virtualization 
alternatives  is  becoming  available  for  production  use, 
and  any 
(processor,  OS 
sandbox/jail,  etc.)  can  be  chosen.    User  Mode  Linux 
can host multiple Linux instances as processes.  Revirt 
is  an  optimized  Linux  virtualization  system  with  very 
low  overheads.    Other  examples  are  the  VMWare 
virtual  machine  framework  and  the  SIMICS  virtual 
processor-simulator,  both  of  which 
can  boot 
unmodified  OS’s.    Any  of  these  platforms  could  be 
employed to achieve full system virtualization.  When 
they  are  integrated  with  parallel  packet-level  network 
simulators,  unprecedented  level  of  fidelity  is  enabled 
combined with arbitrary scalability for computer worm 
modeling.    While  the  virtualized  systems  can  incur 
significant  memory  and  runtime  overheads, 
they 
represent  the  only  choice  available  when  absolute 
scalability and high-fidelity are essential. 
6 Conclusions and Future Work 
Current  worm  &  network  security  modeling  are 
done  at  either  low  fidelity  or  a  low  scale.    Few  are 
capable of simulating the effects of worms on networks 
of  complex  topologies  at  sufficient  detail  to  capture 
effects such as congestion.  Recent advances in packet-
Proceedings of the 20th Annual Computer Security Applications Conference (ACSAC’04) 
1063-9527/04 $ 20.00 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 11:36:04 UTC from IEEE Xplore.  Restrictions apply. 
level network simulations have enabled the possibility 
of  modeling  worms  at  increased  fidelity.    We  have 
demonstrated  this  aspect  by  developing  packet-level 
worm  models,  and  performing  some  of  the  largest 
packet-level  simulations  of  worm  propagation  to  date.  
Using these models, we are investigating the validation 
of  results  from  epidemic  models,  especially  for 
pathological Malware such as Warhol worms. 
We  have  also  created  a  unique  ability  to  interface 
simulated  nodes  with  real  nodes,  to  exercise  actual 
defense installations with large-scale simulated attacks.  
As  an  application  of  this  approach,  we  are  able  to 
subject  actual  honeypot  installations  to  large-scale 
packet-level  models  of  worm  propagation.    We  are 
exploring  using  this  system  to  test  defenses  such  as 
automated patching of infected hosts. 
For  the  highest  levels  of  modeling  fidelity,  such  as 
those employing full-fledged OS functionality on end-
hosts, we propose an approach using a fully virtualized 
system.    In  this  direction,  we  are  exploring  the  use  of 
User  Mode  Linux  to  run  entire  Linux  instances  in 
large-scale worm experiments. 
7 Acknowledgements 
This  work  has  been  supported  in  part  by  DARPA 
contract  N66001-00-1-8934.    We  would  like  to  thank 
Dr. Richard Fujimoto for supporting this work, and to 
Ram  Kumar  Gandhapuneni  for  initiating  the  million-
node TCP scenario execution. 
8 References 
[1] A. Vahdat, et al., "Scalability and Accuracy in a Large-Scale 
Network Emulator," Operating System Design and 
Implementation (OSDI), 2002. 
[2] B. White, et al., "An Integrated Experimental Environment 
for Distributed Systems and Networks," Fifth Symposium 
on Operating Systems Design and Implementation, 2002. 
[3] R. Durst, et al., "Testing and evaluating computer intrusion 
detection systems," in Communications of the ACM, vol. 42, 
1999, pp. 53-61. 
[4] DETER-Project, "Cyber Defense Technology Experimental 
Research (DETER) Network", 2004/05/31, 
www.isi.edu/deter/.
[5] G. F. Riley, et al., "A Federated Approach to Distributed 
Network Simulation," ACM Transactions on Modeling and 
Computer Simulation, vol. 14, pp. 116-148, 2004. 
[6] B. K. Szymanski, Y. Liu, and R. Gupta, "Parallel Network 
Simulation under Distributed Genesis," 17th Workshop on 
Parallel and Distributed Simulation, 2003. 
[7] K. S. Perumalla, et al., "Scalable RTI-based Parallel 
Simulation of Networks," Workshop on Parallel and 
Distributed Simulation, 2003. 
[8] R. M. Fujimoto, et al., "Large-Scale Network Simulation -- 
How Big?  How Fast?," IEEE/ACM International 
Symposium on Modeling, Analysis and Simulation of 
Computer Telecommunication Systems (MASCOTS), 
2003.
[9] C. Kiddle, et al., "Hybrid Packet/Fluid Flow Network 
Simulation," IEEE/ACM Workshop on Parallel and 
Distributed Simulation (PADS), 2003. 
[10] Y. Guo, W. Gong, and D. Towsley, "Time-Stepped Hybrid 
Simulation for Large Scale Networks," INFOCOM, 2000. 
[11] S. Staniford, V. Paxson, and N. Weaver, "How to Own the 
Internet in Your Spare Time," USENIX Security 
Symposium, 2002. 
[12] M. Liljenstam, et al., "A Mixed Abstraction Level 
Simulation Model of Large-scale Internet Worm 
Infestations," International Symposium on Modeling, 
Analysis and Simulation of Computer and 
Telecommunication Systems (MASCOTS), 2002. 
[13] D. Nicol, M. Liljenstam, and J. Liu, "Multiscale Modeling 
and Simulation of Worm Effects on the Internet Routing 
Infrastructure," International Conference on Modeling 
Techniques and Tools for Computer Performance 
Evaluation (Performance TOOLS), 2003. 
[14] A. Hussain, J. Heidemann, and C. Papadopoulos, "A 
framework for classifying denial of service attacks," 
Applications, technologies, architectures, and protocols for 
computer communications, 2003. 
[15] C. C. Zou, et al., "Monitoring and Early Warning for 
Internet Worms," ACM Conference on Computer and 
Communication Security (CCS), 2003. 
[16] G. F. Riley, "The Georgia Tech Network Simulator 
(GTNetS)", 2004/05/31, 
www.ece.gatech.edu/research/labs/MANIACS/GTNetS/.
[17] G. F. Riley, "PDNS - Parallel/Distributed NS", 
2004/05/31, 
www.cc.gatech.edu/computing/compass/pdns/.
[18] D. Nicol and J. Liu, "Dartmouth Scalable Simulation 
Framework (DaSSF)", 2004/05/31, 
http://www.cs.dartmouth.edu/~jasonliu/projects/ssf/.
[19] Monirul Islam and George F. Riley, Personal 
Communication. 
[20] K. S. Perumalla, et al., "Experiences Applying Parallel and 
Interoperable Network Simulation Techniques in On-Line 
Simulations of Military Networks," 16th Workshop on 
Parallel and Distributed Simulation, 2002. 
[21] J. Zhou, et al., "MAYA: Integrating hybrid network 
modeling to the physical world," ACM Transactions on 
Modeling and Computer Simulation, vol. 14, pp. 149-169, 2004. 
[22] N. Provos, "A Virtual Honeypot Framework," USENIX 
Security Symposium, 2004. 
[23] N. Provos, "Developments of the Honeyd Virtual 
Honeypot", 2004/05/31, http://www.honeyd.org.
[24] Honeypots.Net, "Honeypots, Intrusion Detection, 
Incident Response", 2004/05/31, 
http://www.honeypots.net.
[25] R. Russell, "Netfilter: Firewalling, NAT and Packet-
Mangling for Linux 2.4", 2002/09/20, www.netfilter.org.
[26] R. M. Fujimoto, "Parallel Discrete Event Simulation," 
Communications of the ACM, vol. 33, pp. 30-53, 1990. 
[27] P. Dickens, P. Heidelberger, and D. M. Nicol, "Parallelized 
Direct Execution Simulation of Message-Passing 
Programs," IEEE Transactions on Parallel and Distributed 
Systems, vol. 7, pp. 1090-1105, 1996. 
[28] S. Guruprasad, et al., "Scaling Network Emulation with 
Multiplexed Virtual Resources," SIGCOMM 2003 (Poster 
Abstracts), 2003. 
Proceedings of the 20th Annual Computer Security Applications Conference (ACSAC’04) 
1063-9527/04 $ 20.00 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 25,2021 at 11:36:04 UTC from IEEE Xplore.  Restrictions apply.