As with procedures and templates, when macros are called, you may pass one or more
arguments to them. Doing so allows you to alter the behavior of your macro, changing
the code that it produces. You may, for example, wish to pass the name of a variable
that the macro should use in the code that it generates.
 You should think about arguments passed to macros a little bit differently from
those passed to procedures and templates. For example, a macro parameter’s type
may be int, but in the body of the macro, it’s a NimNode. The following code demon-
strates this:
import macros
macro arguments(number: int, unknown: untyped): untyped =
result = newStmtList()
echo number.treeRepr()
echo unknown.treeRepr()
arguments(71, ["12", "89"])
Compiling this listing will result in the following output:
IntLit 71
Bracket
StrLit 12
StrLit 89
Every macro must 
have a return type.
Every macro must generate a valid 
AST; an empty StmtList node is 
created here to satisfy this rule.
The treeRepr procedure is similar to the 
dumpTree macro; it returns a textual 
representation of a NimNode.
The AST of the first argument passed to the macro: 71
The AST of the second argument 
passed to the macro: ["12", "89"]
Licensed to   
267
Creating a configuration DSL
 There are two things that you need to take away from this example:
 A macro must always have a return type, and it must always return a valid AST,
even if that AST is essentially empty.
 All macro parameters are Nim AST nodes (with the exception of static[T] and
typedesc parameters; you can find information about such special types in the
Nim manual: http://nim-lang.org/docs/manual.html#special-types).
The latter point makes perfect sense because macros already manipulate the AST.
Representing each macro argument as an AST node allows for constructs that ordi-
narily wouldn’t be possible in Nim. One example of this is the following:
arguments(71, ["12", 876, 0.5, -0.9])
This example displays the following AST for the second argument:
Bracket
StrLit 12
IntLit 876
Float64Lit 0.5
Prefix
Ident !"-"
Float64Lit 0.9
Arrays in Nim are homogeneous, so each value that they contain must be of the same
type. Attempting to declare an array with the values "12", 876, 0.5, -0.9 wouldn’t be
possible because the value’s types include string, int, and float. In this case, macros
give greater flexibility, allowing the possibility to use a heterogeneous array construc-
tor when calling macros.
 That should give you a good idea of the basic macro concepts. In the next section,
I’ll show you how to build a configuration DSL. 
9.4
Creating a configuration DSL
Perhaps most usefully, metaprogramming allows you to create a DSL: a language that’s
specialized to a particular application domain. Within the bounds of Nim’s syntax,
you can define very flexible and intuitive languages that make writing software easier.
 For example, you might write a DSL for defining the structure of HTML. Instead of
writing a long, error-prone string literal, you could write something like the following:
html:
head: title("My page")
body: h1("Hello!")
That’s just one example. In this section, I’ll show you how to create a configuration
DSL that will allow you to more easily define the structure of a configuration file and
to read and write configuration files easily. You’ll first see how a typical DSL is repre-
sented in Nim’s AST, and then we’ll look at the AST representation of the desired gen-
erated code. Finally, we’ll look at how to build that AST based on information
specified by the user when they use the DSL.
Licensed to   
268
CHAPTER 9
Metaprogramming
 The DSL that you’ll create as part of this chapter will allow the following code to be
written:
import configurator
config MyAppConfig:
address: string
port: int
var config = newMyAppConfig()
config.load("myapp.cfg")
echo("Configuration address: ", config.address)
echo("Configuration port: ", config.port)
This code defines a simple configuration file named MyAppConfig that stores two
pieces of information: an address that’s a string, and a port that’s an integer. The defi-
nition is initialized using a constructor, and it’s then loaded from a local myapp.cfg
file. The address and port are then accessible as fields and their values are displayed
on the screen.
 Specifying a configuration like this is useful because it streamlines the process of
reading and writing configuration files. There’s only a single place where the configu-
ration file is defined, and that file is very easy to read and understand.
 This DSL will be written as a library named configurator. Let’s get started!
9.4.1
Starting the configurator project
Begin by creating a new configurator directory somewhere on your filesystem. As with
any project, set up a project directory structure containing a src directory and a Nim-
ble file. Remember that you can use the nimble init command to help with this.
Finally, create a configurator.nim file inside the src directory, and open it in your
favorite code editor.
 Macros will be used to implement the configurator DSL, so import the macros
module at the top of your newly created configurator.nim file.
 When working on a DSL, it’s a good idea to start by writing down what you’d like
the language to look like. Chances are that the code you have in mind may not be pos-
sible due to syntax restrictions,2 so it’s a good idea to test your language’s syntax first.
The easiest way to do so is to use the dumpTree macro defined in the macros module.
For example, to test whether the configuration DSL can be used, you can compile the
following:
import macros
dumpTree:
config MyAppConfig:
address: string
port: int
2 These syntax restrictions are often a good thing because they ensure that Nim programmers can always parse
Nim DSLs.
Licensed to   
269
Creating a configuration DSL
The dumpTree macro doesn’t need the code inside it to be defined; the code only
needs to be syntactically valid. If the syntax is correct, you’ll see the compiler output
its AST, and you can be sure that it can be used as a DSL.
 After testing the validity of your DSL, you can write a macro for that DSL and dis-
play the various arguments’ ASTs, as in the following listing.
import macros
macro config(typeName: untyped, fields: untyped): untyped =
result = newStmtList()
echo treeRepr(typeName)
echo treeRepr(fields)
config MyAppConfig:
address: string
port: int
Save this code into configurator.nim and compile the file. You’ll see the following
among the output:
Ident !"MyAppConfig"
StmtList
Call
Ident !"address"
StmtList
Ident !"string"
Call
Ident !"port"
StmtList
Ident !"int"
This gives you an idea of the AST structure that you’ll be working with. Next, it’s time
to decide what code needs to be emitted in order to implement the desired code
logic. To implement the example shown at the start of this section, the macro will
need to create three separate constructs:
 A MyAppConfig object type, to store the configuration data
 A newMyAppConfig constructor procedure that initializes a new MyAppConfig
type
 A load procedure that parses the specified file and then populates the specified
instance of the MyAppConfig object with the information stored in the parsed file
The name of the generated type and constructor procedure depends on the name
specified in the config construction. For the example in listing 9.6, the name speci-
fied in the config construction is MyAppConfig. This name will be used by the macro
for the generated type and for the constructor, which derives its name from the gener-
ated type.
Listing 9.6
A simple config macro
The config 
macro takes a 
type name and 
a list of fields.
Each macro must return a valid 
AST, so create a basic one here.
For now, display the AST of the 
typeName and fields arguments.
Licensed to   
270
CHAPTER 9
Metaprogramming
 The fields included in the generated type will also depend on those specified in
the config construction body. This includes the address string field and the port
int field in listing 9.6.
 The next three sections focus on implementing functionality in the macro to create
the three constructs: an object type, a constructor procedure, and a load procedure. 
9.4.2
Generating the object type
Before you begin to write AST-generation code in the macro, you’ll first need to figure
out what AST you want to generate, which means you need to know the Nim code that
you want the macro to emit.
 Let’s start by writing down the type definition that should be generated by the
config construct. You saw this construct earlier:
config MyAppConfig:
address: string
port: int
The type definition that needs to be generated from this is very simple:
type
MyAppConfig = ref object
address: string
port: int
Two pieces of information specified in the config construct have been used to create
this type definition: the type name MyAppConfig, and the two fields named address
and port.
 Like any code, this code can be represented as an AST, and you need to find out
what that AST looks like in order to generate it. Let’s take a look at the information
that dumpTree shows us about this type definition:
import macros
dumpTree:
type
MyAppConfig = ref object
address: string
port: int
Compiling this code should show the following AST.
StmtList
TypeSection
TypeDef
Ident !"MyAppConfig"
Empty
RefTy
ObjectTy
Listing 9.7
The AST of the MyAppConfig type definition
Empty nodes reserve 
space for extra features 
like generics in the AST.
Licensed to   
271
Creating a configuration DSL
Empty
Empty
RecList
IdentDefs
Ident !"address"
Ident !"string"
Empty
IdentDefs
Ident !"port"
Ident !"int"
Empty
The AST in listing 9.7 contains a large number of Empty nodes. These exist for
optional constructs like generics, in order to ensure that the index position of each
node remains the same. This is important, because navigating an AST is done using
the [] operator and an index, which you’ll see in action later in this chapter.
 Now that you know what the AST that needs to be generated looks like, you can
begin to write code to generate it. In some cases, the macros module contains proce-
dures that make the process of generating an AST for a specific construct easier.
Unfortunately, in this case you’ll need to generate the AST in listing 9.7 manually
using certain primitive procedures because there currently is no type section construc-
tor in the macros module. The following listing shows a procedure that generates a
large chunk of the AST shown in listing 9.7.
proc createRefType(ident: NimIdent, identDefs: seq[NimNode]): NimNode =
result = newTree(nnkTypeSection,
newTree(nnkTypeDef,
newIdentNode(ident),
newEmptyNode(),
newTree(nnkRefTy,
newTree(nnkObjectTy,
newEmptyNode(),
newEmptyNode(),
newTree(nnkRecList,
identDefs
)
)
)
)
)
The code in listing 9.8 creates each node, one by one, manually using the newTree
procedure. It takes a node kind as an argument, together with zero or more child
Listing 9.8
Generating the AST for a type definition
Empty nodes reserve 
space for extra features 
like generics in the AST.
This procedure takes two arguments: an 
identifier that specifies the name of the type 
to define and a list of identifier definitions, 
which includes information about the type’s 
fields. It returns a new NimNode.
Each node is created using the newTree
procedure, which allows children to be
easily added during its creation.
Each child node is given as an 
argument to the outer newTree call.
Certain specialized procedures 
make the process of creating 
nodes easier.
Licensed to   
272
CHAPTER 9
Metaprogramming
nodes. These child nodes are added automatically to the resulting new Nim AST node
returned by newTree.
 Each node kind begins with the nnk prefix. For example, in the procedure’s body,
the first line shows the creation of a nnkTypeSection node. This matches the output of
dumpTree shown in listing 9.7, except that the output doesn’t contain the nnk prefixes.
 Note the striking similarities between the dumpTree output shown in listing 9.7 and
the code in listing 9.8. The way in which the nodes are nested is even the same. The
differences lie in the procedure calls: most of them involve newTree, but there are also
a couple of specialized procedures:
newIdentNode—This procedure takes either a string or a NimIdent argument
and creates an appropriate nnkIdent node out of it. A nnkIdent node can also
be created via newTree, but doing so would be more verbose because the ident
would also need to be assigned. An ident node can refer to any identifier, such
as a variable or procedure name, but, as in this case, it may contain an identifier
that hasn’t been defined yet.
newEmptyNode—This procedure creates a new nnkEmpty node. It’s simply an
alias for newTree(nnkEmpty).
Now let’s look at the createRefType procedure implemented in listing 9.8. It doesn’t
generate the full AST shown in listing 9.7—it misses out on a key part, the identDefs.
Instead, it accepts the identDefs as an argument and assumes that they were gener-
ated somewhere else. A single nnkIdentDefs node represents a field definition,
including the name and type of the field. In order to generate these, let’s define a new
procedure. The next listing shows the toIdentDefs procedure, which converts a list of
call statements to a list of nnkIdentDefs nodes.
proc toIdentDefs(stmtList: NimNode): seq[NimNode] =
expectKind(stmtList, nnkStmtList)
result = @[]
for child in stmtList:
expectKind(child, nnkCall)
result.add(
newIdentDefs(
child[0],
child[1][0]
)
)
Listing 9.9
Converting a list of call statements to a list of nnkIdentDefs nodes
Ensures that the stmtList 
node is of kind nnkStmtList
Initializes the result variable
with an empty sequence
Iterates over all child 
nodes in stmtList
Ensures that the 
child node is of kind 
nnkCall
Adds a nnkIdentDefs node 
to the result sequence
Creates a new nnkIdentDefs node
The field name. The child’s first child, 
such as Call -> Ident !"address".
The field type. The child’s second child’s child, 
such as Call -> StmtList -> Ident !"string".
Licensed to   
273
Creating a configuration DSL
The stmtList argument that will be passed to the toIdentDefs procedure is the sec-
ond argument in the config macro. More to the point, as you saw previously, the AST
of stmtList will look like this:
StmtList
Call
Ident !"address"
StmtList
Ident !"string"
Call
Ident !"port"
StmtList
Ident !"int"
It’s the job of the toIdentDefs procedure to take this AST and convert it to a list of
nnkIdentDefs nodes that matches the ones in listing 9.7. The code is fairly short, but
it could be shortened further at the cost of some error checking.
 The expectKind procedure is used to ensure that the input AST doesn’t contain
any unexpected node kinds. It’s a good idea to use this when writing macros because
sometimes your macro may get an unusual AST. Adding such checks makes debugging
easier and is akin to using the doAssert procedure.
 The conversion process is fairly simple:
1
The statement list node’s children are iterated over.
2
Each child’s children and grandchildren are accessed using the [] operator to
retrieve the two identifiers corresponding to the name and type of the fields.
3
The newIdentDefs procedure is used to create a new nnkIdentDefs node.
4
The new nnkIdentDefs node is added to the result sequence.
Both the conversion and the indexing depend on the structure of the AST. The struc-
ture shouldn’t change unless the user of the configurator library passes something
unexpected in the config macro’s body. Later in this section, you’ll see how this code
reacts to different inputs and how to make the failures more informative.
 You have now defined enough to generate the correct type definition in the
config macro. All you need to do is add a call to createRefType and toIdentDefs:
let identDefs = toIdentDefs(fields)
result.add createRefType(typeName.ident, identDefs)
Add these two lines after the result variable is defined in your macro. Then, at the
end of the macro, add echo treeRepr(result) to display the produced AST. Compile
the code, and your AST should match the one shown in listing 9.7.
 Another way to confirm that the generated AST is correct is to convert it to code
and display that. You can do so by writing echo repr(result) at the end of your file.
After compiling, you should see the following:
type
MyAppConfig = ref object
address: string
port: int
Licensed to   
274
CHAPTER 9
Metaprogramming
That’s the first and most lengthy part of this macro finished! The two remaining parts
shouldn’t take as long. 
9.4.3
Generating the constructor procedure
The config macro can now generate a single type definition, but this type definition
needs a constructor to be usable. This section will show you how to create this very
simple constructor.
 The constructor doesn’t need to do much—it only needs to initialize the reference
object. Because of this, the code that needs to be generated is simple:
proc newMyAppConfig(): MyAppConfig =
new result
You could generate this code much like the type definition in the previous section,
but there’s an easier way. Instead of manually creating the AST for the procedure and
its body, you can use a template. The following code shows the required template.
Add this template just above your config macro in the configurator.nim file:
template constructor(ident: untyped): untyped =
proc `new ident`(): `ident` =
new result
This template creates a new procedure, naming it newIdent, where Ident is the ident
argument passed to the template. The ident argument is also used for the return type
of the created procedure. If you were to call this template via constructor(MyApp-
Config), you’d essentially define the following procedure:
proc newMyAppConfig(): MyAppConfig =
new result
But how can this template be used in the config macro? The answer lies in the getAst
procedure defined in the macros module. This procedure converts the code returned
by a template or a macro into one or more AST nodes.
 Thanks to getAst and the power of templates, you can add result.add
getAst(constructor(typeName.ident)) right after the createRefType call. Your
config macro should now look like the following code listing.
macro config*(typeName: untyped, fields: untyped): untyped =
result = newStmtList()
let identDefs = toIdentDefs(fields)
result.add createRefType(typeName.ident, identDefs)
result.add getAst(constructor(typeName.ident))
Listing 9.10
The config macro
The new call initializes the 