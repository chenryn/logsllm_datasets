Achieved
Need to distribute
recipient
public
keys to senders
Ofﬂine; Recipient
generates the pri-
vate key
Key escrow with
PKG
Need to distribute
PKG parameters to
senders
Need to distribute
per-policy private
keys to recipients
CP-ABE [10,34]
Flexible attribute-
based policy [10]
or
gate
with multi-valued
attributes [34]
AND
Not
Supported
in [10]. Supported
in [34].
Prevented via per-
attribute, per-user
private keys
Key escrow with
PKG
Need to distribute
PKG parameters to
senders
Need to distribute
per-attribute, per-
user private keys to
recipients
Revocation
OCSP/CRLs.
Server
ability
avail-
CA can be largely
ofﬂine
Supported via per-
policy short-lived
keys
PKG needs to be
online to generate
private keys
via
Supported
per-attribute
short-lived keys
PKG needs to be
online to generate
private keys
of users the attribute private keys for individual users will expire
with a distribution that pretty much requires the PKD to be online
at all times to generate and distribute new private keys to the users.
Furthermore, performance requirements for key generation are not
trivial. Using the cp-abe toolkit [10] the average cost for generat-
ing 10 attribute private keys is 2.64 seconds where 3 attributes are
numerical and 7 are boolean. In a system where a single PKG sup-
ports 50,000 users (essentially a medium size organization) with
each user having 10 attributes all with a lifetime of one week (note
that in the absence of revocation all CP-ABE private keys need to
be short lived) it will take a PKG 36 hours to complete one round
of key generation.
Application Analysis For the power grid data sharing applica-
tion we envision one or more KDCs (for fault tolerance and/or load
balancing) being maintained at each of the dozen or so ISOs. These
KDCs will serve hundreds of utilities across the grid with each ISO
focusing more on the tens of utilities in their jurisdiction. Based on
an informal analysis of the data sharing needs in the grid we argue
that each KDC being able to support 510 requests/min is sufﬁcient
to satisfy the requirements. Also, the policy examples discussed in
Section 6 match the kind of policy complexity studied in the perfor-
mance analysis above. However, a formal analysis of data sharing
transaction patterns as well as a more comprehensive performance
analysis taking into account networking and storage components
will be the topic of future work.
9. RELATED WORK
Our work touches upon topics in areas of policy/attribute based
encryption, hidden credentials and policies, cryptographic ﬁle sys-
tems and efﬁcient and effective key management. In Table 3 we
compare the characteristics of several schemes in these areas. These
characteristics are related to the properties discussed in Sections
6 and 7. The schemes that we compare are 1) Certiﬁcate Based
FSGuard [37]
Flexible attribute-
policy.
based
However,
limited
to policies that can
be satisﬁed by the
encrypting entity.
Not supported
Prevented via per-
user
decryption
key distribution
Key escrow with
PKG
Need to distribute
per policy encryp-
tion key to senders
Need to distribute
per-attribute,
private
per-user
keys
(on secure
channel) and per-
policy decryption
keys (on authenti-
cated channels) to
recipients
Supported
per-attribute
short-lived keys
Key/Group Server
needs to be online
to generate private
keys
via
PEAPOD [30]
Flexible attribute-
based policy
IB-mRSA [18]
Recipient Identity
Policy secret from
eavesdroppers, re-
cipients and CA
Vulnerable
Achieved
Need to distribute
attribute
public
keys to senders
Need to distribute
per-attribute, per-
user private keys to
recipients
Not supported
Not applicable be-
cause of mediated
decryption
Key escrow with
CA
Need to distribute
CA parameters to
senders
Ofﬂine; CA gener-
ates the private key
PBES
Flexible
identity,
role, attribute and
context
based
policies
Policy secret from
eavesdroppers and
recipients
Not applicable be-
cause of mediated
decryption
Key escrow with
KDC
Need to distribute
KDC public key to
senders
Mediated decryp-
tion via KDC
Immediate revoca-
tion via CA
CA needs to be on-
line for ciphertext
transformation
Immediate revoca-
tion via Security
Mediator (SEM)
SEM needs to be
online for medi-
ated decryption
Immediate revoca-
tion via KDC.
KDC needs to be
online for medi-
ated decryption
Public Key Infrastructure (PKI), 2) IBE [11], 3) CP-ABE [10, 34],
4) FSGaurd [37], 5) PEAPOD [30], 6) Identity Based mediated
RSA (IB-mRSA) [18] and 7) PBES. In this comparison PKI serves
as a control scheme that essentially provides message secrecy for
two-party message exchange with no policy secrecy. All other 6
schemes provide new functionality over PKI.
From the table we see that CP-ABE, FSGuard, PEAPOD and
PBES provide policy based encryption for multiple recipients, how-
ever, only PBES provides support for context based policies (e.g.,
time of day, location). In terms of policy secrecy only CP-ABE [34],
PEAPOD and PBES provide this property where CP-ABE [34] and
PEAPOD additionally provide policy secrecy against all servers. In
terms of vulnerability to user collusion, which essentially renders a
a scheme insecure, the only vulnerable scheme is PEAPOD. PBES
provides collusion resistance via the use of mediated decryption
that eliminates any partial results at the users.
In terms of end-
to-end encryption all schemes achieve that goal to some extent,
however, IBE, CP-ABE, FSGuard, IB-mRSA and KDC all have
implicit key escrow. In terms of encryption key distribution, IBE,
CP-ABE, IB-mRSA and PBES are all efﬁcient in that they require
the senders to only fetch one public key/parameters per “domain”
while for decryption key distribution most schemes need servers
to distribute the keys or provide mediated decryption. In terms of
revocation PEAPOD, IB-mRSA and PBES provide immediate re-
vocation capability. Furthermore, IBE, IB-mRSA, CP-ABE [14]
and PBES are secure against adaptive chosen ciphertext attacks but
only PBES has a generic construction. PBES provides a generic
construction because it builds on a KEM-DEM scheme [15].
When looking at all these characteristics, PBES is the only scheme
that provides all of the following: ﬂexible policy based encryption
including context-based policies for multiple intended recipients,
message and policy secrecy, support for untrusted repositories and
relays, efﬁcient key management and immediate revocation, and
security against adaptive chosen ciphertext attacks with a generic
construction. Policy secrecy is not provided against the KDC in
PBES but the only schemes that provide such secrecy are PEA-
POD which has collusion problems and CP-ABE [34] which does
not support ﬂexible or context-based policies. PBES also shares the
properties of key escrow and an online nature with some of these
other schemes that may limit its applicability for certain applica-
tions.
Outside of these schemes the work that probably comes clos-
est to ours is the enterprise object encryption architecture proposed
by [22] back in 1994. In their architecture a Key Release Agent
releases decryption keys to users after authentication in a man-
ner similar to that done by KDC in PBES. However, they do not
develop a secure policy based encryption scheme for their archi-
tecture. Additional schemes have been proposed that also share
some of the characteristics discussed in Table 3. [12, 23, 31] pro-
vide message and policy secrecy but they focus on two-party in-
teractions. [2,8,9] only provide message secrecy and focus on two-
party interactions. Key-Policy ABE (KP-ABE) [25] is a dual of CP-
ABE that associates attributes with data and policies with users. At-
tribute certiﬁcates have been proposed for use in conjunction with
PKI identity certiﬁcates [20], however, their use is intended for at-
tribute based access control rather than encryption. [32] expounds
of problems with PKI deployment such as costs of managing end-
entity certiﬁcates and as an alternative suggests the use of Trusted
Third Parties for encryption. [42] promote the idea of a single pub-
lic key per domain (in their case the public key is for a SPKI/SDSI
server) by leveraging symmetric-key based systems such as Ker-
beros.
Recent interest in securing critical infrastructures such as power
grid has led to research activity on various aspects of protect-
ing such infrastructures. Secure and redundant cyber architectures
for critical infrastructure are considered in [41]. Automatic secu-
rity assesment of critical cyber infrastructure is considered in [3].
YASIR [39] protects legacy SCADA communication. The work
closely related to ours, GridStat [27], is a pub/sub system that pro-
vides a low-latency QoS managed communication infrastructure to
enable data sharing for real-time applications. GridStat recognises
the need for communication security in such a system and allows
for publishing encrypted and integrity protected data but it does not
deal with key distribution or management. PBES can potentially be
used to distribute cryptographic keys used in GridStat.
10. CONCLUSION
In this work we develop a Policy Based Encryption System
(PBES) that proposes a solution to a new problem in the area of
policy based encryption and apply it to the data sharing problem
in electricity grids. PBES supports policy based encryption for
multiple recipients, policy secrecy and efﬁcient key management
all with an encryption scheme that is secure against adaptive cho-
sen ciphertext attacks. We develop PBES with the PKEM-DEM
encryption secure against CCA2 adversaries and then develop the
system with untrusted repositories/relays and trusted KDCs. We
study how PBES can address the needs of power grids. We proto-
type the system and demonstrate its performance to be reasonable.
We will release a usable library for PBES in the near future to allow
easy integration with applications.