### LTTP Startup Algorithm - Without Speedup

**Figure 3. LTTP Startup Algorithm - Without Speedup**

1. **Initialization (Init(1))**
   - In this state, the node performs its internal initialization and is not capable of receiving messages from the communication channels. After completing the internal initialization, the node transitions to the next state, i-frame Detection (2).

2. **i-frame Detection (2)**
   - During this state, the node attempts to receive valid messages for a duration of one TDMA round. If it receives a cs-frame, it re-enters state (2), effectively resetting the timer. This ensures that the node will not accept a cs-frame earlier than one TDMA round after a previously sent cs-frame.
   - If an i-frame is received, the node synchronizes with the contained state information and transitions to the Confirmation (3) state.
   - If no message is received within τ_round, the node transitions to the Contention Resolving (5) state.

3. **Confirmation (3)**
   - In this state, the node waits for a second i-frame with corresponding state information, known as tentative integration.
   - If no such i-frame is received within one TDMA round (starting from the first i-frame reception in (2)), the node transitions to the Relax (4) state.
   - If an appropriate i-frame is received, the node transitions to the Sync (9) state.
   - The confirmation process can be generalized to require more than one i-frame for valid state confirmation. However, to tolerate a single failure, one i-frame is sufficient for confirmation.

4. **Relax (4)**
   - This state is entered if the confirmation in (3) fails, possibly due to synchronization with a faulty message in (2). The node waits for a sufficiently long duration (d_relax) without reacting to traffic on the channels before transitioning back to (2).
   - For simplicity, we assume d_relax = τ_slot.

5. **Contention Resolving (5)**
   - In this state, the node sets its local timer to τ_long_startup time units and waits for the reception of messages:
     - If an i-frame is received, the node transitions back to (2).
     - If a cs-frame is received, the node sets its IFC counters (individual frame counters per channel) accordingly. The node then checks if a cs-frame is also received on the other channel within ϕ_inter_channel time units.
     - If no frame is received within τ_long_startup, the node sends a cs-frame itself and enters the Passive Tentative (7) state.
   - The timeout τ_long_startup should be configured as: 
     \[
     \tau_{\text{long-startup}} = 3 \times \tau_{\text{round}} + \tau_{\text{startup}}
     \]
   - The coldstart period τ_coldstart is given by:
     \[
     \tau_{\text{coldstart}} = 2 \times \tau_{\text{round}} + \tau_{\text{long-startup}}
     \]

6. **Active Tentative (6)**
   - In this state, the node executes one tentative TDMA round starting with the first slot in the TDMA schedule. Messages are counted on a per-channel basis using the IFC.
   - When the node receives an ack-frame that matches its local view of the current protocol state, it increments the respective IFC counter(s).
   - If the node reaches its sending slot, it sends an ack-frame on the channels where it received the cs-frame in state (5) and increments the respective IFC counter(s).
   - At the end of the tentative round, the node checks if any IFC counter has reached the minimum sync value. If so, the node transitions to (8). Otherwise, it resets its counters and re-enters (2).
   - The minimum sync value is calculated as:
     \[
     \text{minimum sync} = \left\lceil \frac{n}{2} \right\rceil + 1
     \]
   - Our experiments used a core system of four nodes (minimum sync = 3).

7. **Passive Tentative (7)**
   - This state is similar to (6) but the node does not send in its sending slot and does not increase any IFC counter in its sending slot.

8. **Cleanup (8)**
   - In this state, the node broadcasts i-frames (or cu-frames if the algorithm speedup is used) during a second tentative round.
   - At the end of this round, each node checks if there are at least minimum sync − 1 nodes communicating synchronously to tolerate a fail-silent faulty node that was active during the first tentative round.

9. **Sync (9)**
   - This state represents the synchronous operation of the system, where the node cyclically executes the TDMA schedule.
   - A watchdog algorithm is used to detect loss of synchronization. If the watchdog timer elapses, the node restarts.

### Model-Checking Results

**Figure 4. LTTP – Model-Checking Results for Safe Startup (Property 1) and Timely Startup (Property 2)**

- **Coldstarters**: Nodes configured to send cs-frames.
- **Faulty Node**: Node exhibiting arbitrary failure.
- **Evaluation (Safe Startup and Timely Startup)**: Results of model-checking runs.
- **CPU Time**: Execution time for the model-checking runs.
- **Worst-Case Startup Times (wcsup)**: Derived from counterexamples of the model-checking runs.

| Coldstarters | Faulty | Safe Startup | CPU Time (sec) | Timely Startup | CPU Time (sec) | wcsup (rounds+slots) |
|--------------|--------|--------------|----------------|----------------|----------------|----------------------|
| 1,3,4        | 1      | true         | 1124.58        | true           | 1565.13        | 38+3                 |
| 1,3,4        | 3      | true         | 801.63         | true           | 2172.89        | 27+3                 |
| 1,3,4        | 4      | true         | 1124.58        | true           | 7638.99        | 29+2                 |

### LTTP Startup Speedup

The presented startup algorithm is resource-intensive in terms of TDMA rounds. To address this, we propose using a dedicated "core TDMA round layout" consisting of a limited number of slots (possibly only four) during the coldstart phase. During the integration and sync phases, the node uses the "user TDMA round layout," which is the application-specific schedule. This speedup requires minor changes in the algorithm's state machine: once a node enters the coldstart phase, it stays there until it either receives a sufficient number of cu-frames within a given interval or reaches a specified number of unsuccessful coldstart attempts. CU-frames are broadcasted in the Cleanup (8) state instead of i-frames.

Exhaustive model-checking studies have confirmed the correctness of the speedup approach.

### FlexRay

FlexRay is designed as a general-purpose automotive communication protocol, addressing ultra-high dependable applications such as x-by-wire systems (e.g., brake-by-wire or steer-by-wire). The assessment in this paper is based on the FlexRay 2.0 specification, but the issues identified remain relevant in the FlexRay 2.1 specification.

#### 5.2.1 Algorithm Overview

The FlexRay system model differs from the LTTP system model in the following ways:
- **Minimum Configuration**: FlexRay requires only three nodes for successful startup, using a 1-out-of-2 integration strategy.
- **Slot Occupation**: FlexRay allows a node to occupy more than one slot per round, requiring a semantic filter in guardian instances.
- **Synchronous System**: FlexRay assumes a fully synchronous system, with a predefined absolute time for node participation in startup.
- **Fault Hypothesis**: FlexRay does not specify a fault hypothesis, which is crucial for x-by-wire applications.