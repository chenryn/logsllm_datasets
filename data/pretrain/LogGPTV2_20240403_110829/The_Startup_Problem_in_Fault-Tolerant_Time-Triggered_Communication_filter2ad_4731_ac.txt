(8)
Figure 3. LTTP startup algorithm - without
speedup
Init(1):
In (1) the node performs its internal initialization
and is not able to receive messages from the channels. After
internal initialization the node transits to (2).
i-frame Detection(2): During (2) the node tries to receive
valid messages for a duration of one TDMA round. If it re-
ceives a cs-frame it re-enters (2), which basically means,
that the timer is reset. By doing so, it is guaranteed that
the node will not accept a cs-frame earlier than one TDMA
round after a previously sent cs-frame. If an i-frame is re-
ceived, the node synchronizes on the contained state infor-
mation and transits to (3). If nothing is received for a dura-
tion of τ round , the node transits to (5).
Conﬁrmation(3): Here a node waits for a second i-frame
with corresponding state information to the previous i-
frame; this is called tentative integration.
If during one
TDMA round (which is started with the reception of the ﬁrst
i-frame in (2)) no such i-frame is received the node transits
to (4). If during this duration an appropriate i-frame is re-
ceived, the node transits to (9). This conﬁrmation can be
generalized in a way such that more than one i-frame has to
be received for a valid state conﬁrmation. However, to tol-
erate a single failure one i-frame sufﬁces for conﬁrmation.
Relax(4): The unsuccessful conﬁrmation in (3) can be a
result of the synchronization to a faulty message in (2): the
ﬁrst frame the integrating node received was sent from a
faulty node and contains a faulty state. Since the node syn-
chronizes to this faulty state, following correct messages
will not conﬁrm the integrating node. The purpose of the
Relax(4) state is, to guarantee that the integrating node will
not again synchronize to the message of the same, poten-
tially faulty, sender. Hence, the node waits in relax state
for a sufﬁciently long duration drelax and does not react to
trafﬁc on the channels before it transits back to (2). For
simplicity we assume here that drelax = τ slot .
Contention Resolving(5):
In the Contention Resolv-
ing(5) state a node sets its local timer to τ long−startup time-
units and waits for the reception of messages:
• if an i-frame is received, the node transits back to (2).
• if a cs-frame is received the node sets its IFC coun-
ters, that are individual frame counters (one counter
per channel), accordingly (that means channel individ-
ually to 1 if a cs-frame has been received on the re-
spective channel). The node then checks, whether a
cs-frame is also received on the respective other chan-
nel for ϕinter−channel
timeunits. A message broad-
casted by a node on both channels at the same point in
time will, in general, arrive at the receiver at different
points in time, as the propagation delays on the chan-
nels may be different. ϕinter−channel
is the maximum
If a cs-frame is received on the
inter-channel jitter.
other channel as well, the corresponding IFC is also
set to 1. The node transits to (6) afterwards.
max
max
• if for τ long−startup
i
no frame is received, the node
sends a cs-frame itself and enters (7).
Our model-checking studies showed that the startup
Upon transition to (6) or to (7) the node also sets its local
timing to the start instant of the cs-frame received on the
faster channel, corrected by the propagation delay, or to the
start instant of the cs-frame transmission.
timeout τ long−startup should be conﬁgured to:
= 3 ∗ τ round + τ startup
τ long−startup
(cid:1)
(2)
where τ round is the duration of one TDMA round and
τ startup is a node-unique timeout, speciﬁed as:
i = 0
i > 0
(cid:2)i
j=1 τ slot
j−1
τ startup
i
(3)
=
0
i
i
Note here, that the coldstart period τ coldstart (which is
the minimum duration between two successive coldstart at-
tempts of a node) has to take also the ﬁrst additional tenta-
tive round and the round during integration phase into ac-
count. Hence the coldstart periods are given in by:
= 2 ∗ τ round + τ long−startup
τ coldstart
i
(4)
i
Proceedings of the 2006 International Conference on Dependable Systems and Networks (DSN’06) 
0-7695-2607-1/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:30:08 UTC from IEEE Xplore.  Restrictions apply. 
This algorithm does not specify dedicated listen timeouts
to prevent that recently powered-on nodes cause additional
contentions with previous coldstarters (that are nodes that
sent a cs-frame). This is not needed in a system that:
• is in star topology: only logical contentions may occur
• uses semantic-less coldstart messages: in case of a log-
ical contention, a receiving node will still receive two
equal cs-frames
In systems that are realized in bus-structure dedicated lis-
ten timeout should be speciﬁed: the ﬁrst time a node enters
the coldstart phase will cause the node to wait a listen time-
out that is longer than the maximum coldstart timeout.
The unique startup timeouts implement a contention re-
solving algorithm, which is necessary to guarantee that
there are eventually enough nodes that acknowledge the
coldstarter.
Active Tentative(6): Here the node executes one tenta-
tive TDMA round starting with the ﬁrst slot in the TDMA
schedule. Since one physically faulty component may
present itself as two logically faulty components, by alter-
nately sending messages on only one channel, the messages
have to be counted on a per channel basis using the IFC .
When a node receives an ack-frame that corresponds to its
local view on the current protocol state (that means that the
slot position set in the received frame is equal to the re-
ceiver’s current slot position in the TDMA round layout),
it increments the respective IFC counter(s) by one. If the
node reaches its sending slot in the schedule, the node sends
an ack-frame itself on those channels on which it has re-
ceived the cs-frame in state (5), and increments the respec-
tive IFC counter(s). When the tentative round is ﬁnished,
the node checks whether any of its IFC counters reached
the minimum sync value. If so, the node transits to (8). If
none of the IFC counters has reached the necessary thresh-
old, the node resets its counters and re-enters (2).
The minimum sync value depends on the number of
nodes that are allowed to execute the coldstart phase (the
core system), say n:
minimum sync =
+ 1
(5)
(cid:3) n
(cid:4)
2
The discussion of this value is done in [18], where we
explicitly address a clique resolving algorithm. The Active
Tentative(6) state implicitly incorporates such a function-
ality in order to guarantee that if there exists a non-faulty
node in Sync(9) state, there always exists one other non-
faulty node in Sync(9) state as well. Hence, the non-faulty
nodes are always in majority as only one faulty node may
exist. Our experiments used a core system of four nodes
(minimum sync = 3).
Passive Tentative(7): This state is equal to state (6) with
the exception that a node will not send in its sending slot
and not increase any IFC counter in its sending slot.
Cleanup(8): The cleanup state is a second tentative
round in which i-frames are broadcasted (if the algo-
rithm speedup is used, cu-frames are broadcasted). At the
end of this round, each node checks if there are at least
minimum sync − 1 nodes communicating synchronously,
to tolerate a fail-silent faulty node that was active during the
ﬁrst tentative round.
Sync(9): This is the synchronous operation of the system.
A node cyclically executes the TDMA schedule.
Scenarios are possible in which nodes loose synchro-
nization, e.g. if a system of only two correct nodes and one
faulty node are running in synchronous operation. The loss
of synchronization detected by continuously monitoring the
number of frames received from core nodes. The node ex-
ecutes a watchdog algorithm: upon entering the sync state
a node sets its timer to κunstable rounds. Whenever a node
detects minimum sync nodes in steady state, it feeds the
watchdog timer.
If the watchdog timer elapses, the node
restarts.
5.1.2 Model-Checking Results
Parts of the model-checking results are shown in Figure 4.
The presented results are based on a system of four nodes
and two channels. Due to the computational-intensive pro-
cess of exhaustive model checking, it was not possible to
cover systems with more than four nodes. However, as dis-
cussed in 5.1.3, we are able to restrict the startup process
to a core system of four nodes and have other nodes in the
system integrate only after the core system has successfully
started up.
The ﬁrst column depicts the nodes that are conﬁgured to
send cs-frames (however, all four nodes execute coldstart
phase). The second column names the faulty node. The
faulty node exhibits an arbitrary failure. Columns three and
four show the result of the model-checking run and its ex-
ecution time for the safe startup property, columns ﬁve and
six show these values for the timely startup property. Col-
umn seven shows the worst-case startup times derived from
counterexamples of the model-checking runs. Strategies for
tolerating a faulty channel are given in [14, Sec. 6.6.4]
The model-checking experiments have been done simi-
lar to the approach presented in [19] where we presented
“exhaustive fault simulation” as measure for design and ver-
iﬁcation of faul-tolerant algorithms: a faulty component is
allowed to produce any of the protocol relevant messages
(syntactically and semantically correct or incorrect) at any
point in time of the model execution. As depicted the LTTP
startup algorithm has the desired timeliness and safety prop-
erties. We used the model checker in the design loop of the
algorithm. Some interesting failure scenarios that popped-
up during the design stages of the algorithm as well as de-
tailed descriptions of the worst-case startup times (wcsup)
are given in [14, Sec. 6.6.4].
Proceedings of the 2006 International Conference on Dependable Systems and Networks (DSN’06) 
0-7695-2607-1/06 $20.00 © 2006 IEEE 
Authorized licensed use limited to: Tsinghua University. Downloaded on March 20,2021 at 12:30:08 UTC from IEEE Xplore.  Restrictions apply. 
Safe Startup
Timely Startup
coldstarters
faulty
eval.
cpu time
eval.
cpu time
wcsup
ID
1,3,4
1,3,4
1,3,4
ID
1
3
4
(sec)
1124.58
801.63
1124.58
true
true
true
(sec)
(rounds+slots)
true
true
true
1565.13
2172.89
7638.99
38+3
27+3
29+2
Figure 4. LTTP – model-checking results for safe startup (property 1) and timely startup (property 2)
5.1.3 LTTP startup speedup
The presented startup algorithm is costly in terms of TDMA
rounds. Hence, we propose to use a dedicated TDMA round
layout, a “core TDMA round layout”, that consists only
of a limited number of slots (possibly only four) during
the coldstart phase. During the integration phase and the
sync phase, the node uses the “user TDMA round layout”
which is the application-speciﬁc schedule. This speedup re-
quires minor changes in the algorithm’s state machine: once
a node enters coldstart phase it will stay in this phase un-
til it either receives a sufﬁcient number of cu-frames per a
given interval, or a speciﬁed number of unsuccessful cold-
start attempts has been reached. CU-frames are broadcasted
in Cleanup(8) state instead of i-frames.
Exhaustive model-checking studies also showed the cor-
rectness of the speedup approach.
5.2 FlexRay
FlexRay is intended to serve as a general purpose au-
tomotive communication protocol that addresses ultra-high
dependable applications as well. It is intended for the us-
age of so called x-by-wire applications in the automotive
area, e.g. break-by-wire or steer-by-wire applications. Al-
though the assessment in this paper is based on the FlexRay
2.0 speciﬁcation, the problems found are still open in the
FlexRay 2.1 speciﬁcation.
5.2.1 Algorithm Overview
The FlexRay system model deviates from the system model
in this paper in the following ways.
• FlexRay requires only three nodes as minimum conﬁg-
uration for successful startup: FlexRay is forced to use
a 1-out-of-2 integration strategy.
• FlexRay allows a node to occupy more than one
slot per round: FlexRay requires a semantic ﬁlter in
guardian instances.
• FlexRay assumes a fully synchronous system: the ab-
solute time until a node is able to participate in startup
is assumed to be given.
• FlexRay does not specify a fault hypothesis: for x-by-