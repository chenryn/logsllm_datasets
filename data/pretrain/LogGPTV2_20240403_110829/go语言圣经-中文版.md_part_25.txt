os.RemoveAll(dir)
})
}
// ...do some work…
for _, rmdir := range rmdirs {
rmdir() // clean up
}
你可能会感到困惑，为什么要在循环体中用循环变量d赋值一个新的局部变量，而不是像下面
的代码一样直接使用循环变量dir。需要注意，下面的代码是错误的。
var rmdirs []func()
for _, dir := range tempDirs() {
os.MkdirAll(dir, 0755)
rmdirs = append(rmdirs, func() {
os.RemoveAll(dir) // NOTE: incorrect!
})
}
问题的原因在于循环变量的作用域。在上面的程序中，for循环语句引入了新的词法块，循环
变量dir在这个词法块中被声明。在该循环中生成的所有函数值都共享相同的循环变量。需要
注意，函数值中记录的是循环变量的内存地址，而不是循环变量某一时刻的值。以dir为例，
后续的迭代会不断更新dir的值，当删除操作执行时，for循环已完成，dir中存储的值等于最后
一次迭代的值。这意味着，每次对os.RemoveAll的调用删除的都是相同的目录。
通常，为了解决这个问题，我们会引入一个与循环变量同名的局部变量，作为循环变量的副
本。比如下面的变量dir，虽然这看起来很奇怪，但却很有用。
for _, dir := range tempDirs() {
dir := dir // declares inner dir, initialized to outer dir
// ...
}
这个问题不仅存在基于range的循环，在下面的例子中，对循环变量i的使用也存在同样的问
题：
匿名函数 191
gopl
var rmdirs []func()
dirs := tempDirs()
for i := 0; i < len(dirs); i++ {
os.MkdirAll(dirs[i], 0755) // OK
rmdirs = append(rmdirs, func() {
os.RemoveAll(dirs[i]) // NOTE: incorrect!
})
}
如果你使用go语句（第八章）或者defer语句（5.8节）会经常遇到此类问题。这不是go或
defer本身导致的，而是因为它们都会等待循环结束后，再执行函数值。
匿名函数 192
gopl
5.7. 可变参数
参数数量可变的函数称为为可变参数函数。典型的例子就是fmt.Printf和类似函数。Printf首先
接收一个的必备参数，之后接收任意个数的后续参数。
在声明可变参数函数时，需要在参数列表的最后一个参数类型之前加上省略符号“...”，这表示
该函数会接收任意数量的该类型参数。
gopl.io/ch5/sum
func sum(vals...int) int {
total := 0
for _, val := range vals {
total += val
}
return total
}
sum函数返回任意个int型参数的和。在函数体中,vals被看作是类型为[] int的切片。sum可以接
收任意数量的int型参数：
fmt.Println(sum()) // "0"
fmt.Println(sum(3)) // "3"
fmt.Println(sum(1, 2, 3, 4)) // "10"
在上面的代码中，调用者隐式的创建一个数组，并将原始参数复制到数组中，再把数组的一
个切片作为参数传给被调函数。如果原始参数已经是切片类型，我们该如何传递给sum？只需
在最后一个参数后加上省略符。下面的代码功能与上个例子中最后一条语句相同。
values := []int{1, 2, 3, 4}
fmt.Println(sum(values...)) // "10"
虽然在可变参数函数内部，...int 型参数的行为看起来很像切片类型，但实际上，可变参数函
数和以切片作为参数的函数是不同的。
func f(...int) {}
func g([]int) {}
fmt.Printf("%T\n", f) // "func(...int)"
fmt.Printf("%T\n", g) // "func([]int)"
可变参数 193
gopl
可变参数函数经常被用于格式化字符串。下面的errorf函数构造了一个以行号开头的，经过格
式化的错误信息。函数名的后缀f是一种通用的命名规范，代表该可变参数函数可以接收Printf
风格的格式化字符串。
func errorf(linenum int, format string, args ...interface{}) {
fmt.Fprintf(os.Stderr, "Line %d: ", linenum)
fmt.Fprintf(os.Stderr, format, args...)
fmt.Fprintln(os.Stderr)
}
linenum, name := 12, "count"
errorf(linenum, "undefined: %s", name) // "Line 12: undefined: count"
interfac{}表示函数的最后一个参数可以接收任意类型，我们会在第7章详细介绍。
练习5.15： 编写类似sum的可变参数函数max和min。考虑不传参时，max和min该如何处
理，再编写至少接收1个参数的版本。
练习5.16：编写多参数版本的strings.Join。
练习5.17：编写多参数版本的ElementsByTagName，函数接收一个HTML结点树以及任意数
量的标签名，返回与这些标签名匹配的所有元素。下面给出了2个例子：
func ElementsByTagName(doc *html.Node, name...string) []*html.Node
images := ElementsByTagName(doc, "img")
headings := ElementsByTagName(doc, "h1", "h2", "h3", "h4")
可变参数 194
gopl
5.8. Deferred函数
在findLinks的例子中，我们用http.Get的输出作为html.Parse的输入。只有url的内容的确是
HTML格式的，html.Parse才可以正常工作，但实际上，url指向的内容很丰富，可能是图片，
纯文本或是其他。将这些格式的内容传递给html.parse，会产生不良后果。
下面的例子获取HTML页面并输出页面的标题。title函数会检查服务器返回的Content-Type字
段，如果发现页面不是HTML，将终止函数运行，返回错误。
gopl.io/ch5/title1
func title(url string) error {
resp, err := http.Get(url)
if err != nil {
return err
}
// Check Content-Type is HTML (e.g., "text/html;charset=utf-8").
ct := resp.Header.Get("Content-Type")
if ct != "text/html" && !strings.HasPrefix(ct,"text/html;") {
resp.Body.Close()
return fmt.Errorf("%s has type %s, not text/html",url, ct)
}
doc, err := html.Parse(resp.Body)
resp.Body.Close()
if err != nil {
return fmt.Errorf("parsing %s as HTML: %v", url,err)
}
visitNode := func(n *html.Node) {
if n.Type == html.ElementNode && n.Data == "title"&&n.FirstChild != nil {
fmt.Println(n.FirstChild.Data)
}
}
forEachNode(doc, visitNode, nil)
return nil
}
下面展示了运行效果：
$ go build gopl.io/ch5/title1
$ ./title1 http://gopl.io
The Go Programming Language
$ ./title1 https://golang.org/doc/effective_go.html
Effective Go - The Go Programming Language
$ ./title1 https://golang.org/doc/gopher/frontpage.png
title: https://golang.org/doc/gopher/frontpage.png has type image/png, not text/html
Deferred函数 195
gopl
resp.Body.close调用了多次，这是为了确保title在所有执行路径下（即使函数运行失败）都关
闭了网络连接。随着函数变得复杂，需要处理的错误也变多，维护清理逻辑变得越来越困
难。而Go语言独有的defer机制可以让事情变得简单。
你只需要在调用普通函数或方法前加上关键字defer，就完成了defer所需要的语法。当defer语
句被执行时，跟在defer后面的函数会被延迟执行。直到包含该defer语句的函数执行完毕时，
defer后的函数才会被执行，不论包含defer语句的函数是通过return正常结束，还是由于panic
导致的异常结束。你可以在一个函数中执行多条defer语句，它们的执行顺序与声明顺序相
反。
defer语句经常被用于处理成对的操作，如打开、关闭、连接、断开连接、加锁、释放锁。通
过defer机制，不论函数逻辑多复杂，都能保证在任何执行路径下，资源被释放。释放资源的
defer应该直接跟在请求资源的语句后。在下面的代码中，一条defer语句替代了之前的所有
resp.Body.Close
gopl.io/ch5/title2
func title(url string) error {
resp, err := http.Get(url)
if err != nil {
return err
}
defer resp.Body.Close()
ct := resp.Header.Get("Content-Type")
if ct != "text/html" && !strings.HasPrefix(ct,"text/html;") {
return fmt.Errorf("%s has type %s, not text/html",url, ct)
}
doc, err := html.Parse(resp.Body)
if err != nil {
return fmt.Errorf("parsing %s as HTML: %v", url,err)
}
// ...print doc's title element…
return nil
}
在处理其他资源时，也可以采用defer机制，比如对文件的操作：
io/ioutil
Deferred函数 196
gopl
package ioutil
func ReadFile(filename string) ([]byte, error) {
f, err := os.Open(filename)
if err != nil {
return nil, err
}
defer f.Close()
return ReadAll(f)
}
或是处理互斥锁（9.2章）
var mu sync.Mutex
var m = make(map[string]int)
func lookup(key string) int {
mu.Lock()
defer mu.Unlock()
return m[key]
}
调试复杂程序时，defer机制也常被用于记录何时进入和退出函数。下例中的
bigSlowOperation函数，直接调用trace记录函数的被调情况。bigSlowOperation被调时，
trace会返回一个函数值，该函数值会在bigSlowOperation退出时被调用。通过这种方式， 我
们可以只通过一条语句控制函数的入口和所有的出口，甚至可以记录函数的运行时间，如例
子中的start。需要注意一点：不要忘记defer语句后的圆括号，否则本该在进入时执行的操作
会在退出时执行，而本该在退出时执行的，永远不会被执行。
gopl.io/ch5/trace
func bigSlowOperation() {
defer trace("bigSlowOperation")() // don't forget the
extra parentheses
// ...lots of work…
time.Sleep(10 * time.Second) // simulate slow
operation by sleeping
}
func trace(msg string) func() {
start := time.Now()
log.Printf("enter %s", msg)
return func() {
log.Printf("exit %s (%s)", msg,time.Since(start))
}
}
每一次bigSlowOperation被调用，程序都会记录函数的进入，退出，持续时间。（我们用
time.Sleep模拟一个耗时的操作）
Deferred函数 197
gopl
$ go build gopl.io/ch5/trace
$ ./trace
2015/11/18 09:53:26 enter bigSlowOperation
2015/11/18 09:53:36 exit bigSlowOperation (10.000589217s)
我们知道，defer语句中的函数会在return语句更新返回值变量后再执行，又因为在函数中定义
的匿名函数可以访问该函数包括返回值变量在内的所有变量，所以，对匿名函数采用defer机
制，可以使其观察函数的返回值。
以double函数为例：
func double(x int) int {
return x + x
}
我们只需要首先命名double的返回值，再增加defer语句，我们就可以在double每次被调用
时，输出参数以及返回值。
func double(x int) (result int) {
defer func() { fmt.Printf("double(%d) = %d\n", x,result) }()
return x + x
}
_ = double(4)
// Output:
// "double(4) = 8"
可能doulbe函数过于简单，看不出这个小技巧的作用，但对于有许多return语句的函数而言，
这个技巧很有用。
被延迟执行的匿名函数甚至可以修改函数返回给调用者的返回值：
func triple(x int) (result int) {
defer func() { result += x }()