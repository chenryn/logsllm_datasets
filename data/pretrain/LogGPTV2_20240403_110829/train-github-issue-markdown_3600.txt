So I'm using a custom `usePrevious` hook that returns the 'previous value'
which is as far as I know pretty common practice. It leverages a ref inside
the hook. When I declare a ref inside a functional component and use this in a
`useEffect`, `react-hooks/exhaustive-deps` does not require me to add the ref
to the dependencies list of a `useEffect`, but using `usePrevious` does.
React version: `"react": "^17.0.1",`
## Steps To Reproduce
Link to code example: https://codepen.io/spassvogel/pen/JjbXKJL?editors=1111
    const usePrevious = (value) => {
        const ref = React.useRef();
        React.useEffect(() => {
          ref.current = value;
        }, [value]);
        return ref.current;
    };
    const TestComponent = () => {
      const [state, setState] = React.useState(0);
      const previousState = usePrevious(state)
      React.useEffect(() => {
         console.log('current state', state)
         console.log('previous state', previousState)
      }, [state]); // ESLINT COMPLAINS 
      return null;
    };
## The current behavior
`react-hooks/exhaustive-deps` complains about the dependency list of
`useEffect` is missing `previousState`.
## The expected behavior
`react-hooks/exhaustive-deps` realizes that `usePrevious` is leveraging
`useRef` and thus doesn't need its return value in the dependency list.
A workaround would be to duplicate the code of `usePrevious` in every
component, then `react-hooks/exhaustive-deps` does not complain. but yeah...