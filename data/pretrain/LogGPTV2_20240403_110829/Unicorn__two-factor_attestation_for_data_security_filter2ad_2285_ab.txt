Unicorn requires a setup phase where the PSD is initial-
ized with a long-term authentication credential and correct
measurements of the user’s uApps. This phase requires users
to be diligent, as described below. After this, the regular use
of Unicorn is broken into four steps as described in Figure 1.
In the ﬁrst step, the user uses Unicorn to invoke a uApp on
their computer. Unicorn suspends or terminates the user OS
and invokes the uApp in a Measured Launch Environment
(MLE). The MLE uses trusted computing hardware to per-
form a quote by computing a hash of the uApp and signing
it with a key in the TPM. This quote is then displayed as
a QR-code image on the screen of the user’s computer. In
the second step, the user scans the quote using her PSD,
which then veriﬁes the correctness of the quote. If correct,
the PSD uses the long-term secret to proceed to the third
step, which grants the uApp access to the user’s data and
allows the user to access the remote service if applicable. If
the quote is not correct, indicating tampering of the soft-
ware stack, Unicorn halts and the user will be unable to use
the uApp or access her data. In the ﬁnal step, the user can
terminate the uApp and return to the user OS.
In this phase, the PSD must be securely
Setup phase.
initialized with the two pieces of information: (1) user au-
thentication credentials (e.g., a user ID and high-entropy
secret); and (2) the hashes of the uApp, in the form of ex-
pected PCR values. In addition, if the uApp uses a remote
service, the remote service must be given the public half of
the AIK of the user’s computer. If the uApp accesses en-
crypted data stored on the user’s computer, then a sub-key
of the encryption key must be sealed to the uApp on the
TPM of the user’s computer.
If the user plans to access
their data from more than one computer, then the AIK or
sub-key must be initialized for each such computer. Note
that sharing of AIKs with remote services will mandate a
re-initialization of Unicorn in some cases, including: updat-
19ing or resetting the TPM hardware. For distributing uApps,
vendors may choose any channel, including web download.
However, we assume that the vendor’s copy of a uApp is
malware-free.
It is important that the authentication credentials are not
leaked to an adversary, since this would allow the adversary
to clone the PSD. Similarly, if an adversary is able to modify
the values of the hashes associated with a uApp before they
are saved on the PSD, the adversary will be able to cause
the authentication secret to be used with a tampered uApp.
Finally, if an AIK of a computer other than the user’s is
transmitted to the remote server, or the sub-key of the en-
cryption key for local data is leaked, this would allow the
adversary to access the user data from a computer other
than the user’s.
Unicorn requires an out-of-band secure channel during the
setup phase. For example, in our online banking example
of a uApp with a remote service, the PCR hashes of the
uApp and authentication credentials must be transmitted
through a secure channel. Such a channel might be in-person
registration at a branch or postal mail. In these cases, the
information can be conveniently installed via a QR-coded
image. Similarly, the secure channel can also be used to
transmit a one-time authentication credential, with which
the user may login to the remote service and initialize it with
the AIK public-key(s) of their computer(s). The user must
be diligent throughout this process and not inadvertently
leak their credentials to the adversary, provide the wrong
AIKs to the service, or install the wrong hashes.
Starting a uApp. When invoking a uApp, the user may
choose one of two options as shown in Figure 1: (1) im-
mediate execution of the uApp loader; or (2) save the user
OS and application states into disk using e.g., suspend-to-
disk before executing the uApp loader. The former option
mandates that users will save any unsaved documents before
initiating the switch. The later allows users to resume the
saved environment, but adds the suspend time to switch.
After the user OS has suspended itself to disk (if users
choose this option), it would normally power oﬀ the hard-
ware. To invoke the uApp, we modify the user OS to load
the uApp loader into memory and transfer control to it. The
uApp loader sets up the MLE and then transfers control to
the uApp kernel, which then resets the devices to a known
state, completes its boot process and starts the application
in the uApp. Since the uApp kernel now has control of all
the devices, the entire system acts as a shared platform for
both the user OS and the uApp.
Verifying the uApp. Once the user OS transfers control
to the uApp loader, the loader will take measurements of
itself, the hardware state, the uApp kernel and boot pa-
rameters, and store them in the TPM. The uApp kernel
then measures the entire ﬁle system image it will use be-
fore mounting the image, and also extends the measurement
into the TPM. uApps are immutable so the measurement
of a correct uApp will produce the same value every time.
These measurements are used to attest the state of the soft-
ware platform. This attestation ensures that the uApp has
not been tampered with in anyway.
The exact attestation procedure depends on the uApp be-
ing invoked. For uApps that interact with remote servers,
attestation is performed with both the user’s PSD and the
remote server, while uApps that do not interact with re-
mote servers only require attestation with the PSD. We dis-
cuss diﬀerent attestation and authentication modes in more
detail in Section 3.2.
Switch back to user OS. To return to the user OS, the
uApp kernel loads the image of the user OS kernel into
memory and transfers control to it. Since uApp images are
immutable, any persistent state (e.g., user data) must be
saved outside of the uApp, either on the remote server, or
encrypted and saved on the local disk. After this, when con-
trol is transferred to the user OS kernel, it will load a new
OS instance or restore the suspended image.
Hardening uApps. uApps must be resistant to run time
attacks since a compromise of the uApp after it has loaded
means that the adversary will gain access to the user data.
Several standard mechanisms can be used to harden uApps.
First, uApps should be built with a smaller trusted comput-
ing base (TCB). Unnecessary code and functionality should
be removed as uApps are meant to be task-speciﬁc appli-
ances. Second, uApps can be built on top of hardened oper-
ating systems, such as SELinux, which have stronger access
control mechanisms designed to mitigate attacks. Finally,
the attack surface of a uApp may also be restricted by lim-
iting its functionality. For example, in the case of a banking
uApp, one could restrict the uApp to only be able to con-
nect to IP addresses or domain names belonging to the bank,
or modify the browser to only accept SSL certiﬁcates that
belong to the bank.
Updating uApps. To ﬁx vulnerabilities or to oﬀer new fea-
tures, vendors may distribute updated uApps (a new image
or only the diﬀerences) via any channel, secure or otherwise
(e.g., downloaded from a website). However, measurements
of the new image must be updated securely on user’s PSD.
For example, the PSD client may accept only signed mea-
surements from a vendor (the signature veriﬁcation key is
also stored on the PSD) and only when the updating ver-
sion is newer than the existing one; cf. [26, 34].
3.2 Attestation and Authentication
Unicorn supports two scenarios in which user data may
be stored. The ﬁrst is where the data is stored on a remote
server, such as ﬁnancial information stored on a bank web-
site. The second is where data is stored locally encrypted
on the user’s computer. An example of this might be an
encrypted document repository.
Remote server. Our combined attestation and authenti-
cation protocol is shown in Figure 2. When the uApp is
launched, the client browser loads the remote site over SSL
and initiates attestation (e.g., by sending an attestation re-
quest). The server responds with a random nonce NS, a list
of PCR indices Pi to be included in the TPM quote, and the
server ID (IDS). Let KU be a key that represents the long-
term authentication secret stored on the PSD. The uApp
then retrieves PCR values Pv, generates a quote TQ using
the TPM, and forwards this quote, server ID and nonce to
the PSD. If PSD can verify the quote (with the help of the
pre-stored AIK and expected values of PCRs as indexed by
IDS), it generates an HMAC h of (TQ.IDU .IDS) using KU .
User ID and h are forwarded to the client browser, which
then forwards these values along with the TPM quote to
the server. If the server can verify the quote, and can cal-
culate the same h, access is granted to the user. Note that,
if the PSD has Internet connectivity, it can directly forward
20PSD
NS , IDS , TQ = Pv, {Pv .NS}AIK−1
U
IDU , h = HMACKU {TQ.IDU .IDS}
Veriﬁes TQ
Generates h
uApp OS
Generates
quote TQ
NS, Pi, IDS
Remote server
Generates
nonce NS
TQ, h, IDU
Access grant/deny
Veriﬁes TQ, h
Figure 2: Attestation message ﬂow for remote server. The setup phase initiates the PSD and the remote
server with the shared authentication key KU , AIKU , and expected PCR values.
(TQ, h, IDU ) to the server instead of requiring another PSD-
to-computer communication channel. The remote server will
only accept quotes signed with an AIK private key matching
the AIK public that was registered with it during the setup
phase, preventing access to the user data from any computer
that wasn’t registered during the setup phase. Security of
the protocol remains unaﬀected even if attackers can col-
lect and replay the response from the PSD as the server will
check freshness of its nonce as used in the protocol. The pro-
tocol in Figure 2 does not establish a session key between
the uApp and remote server. We assume that they negotiate
a session key as part of the secure channel setup (e.g., SSL
session key); see e.g., Goldman [9] for alternatives.
One might be concerned that the PSD does not generate
a nonce and send it to the computer, allowing an attacker
with a tampered uApp to replay quotes to the PSD. In this
case, the PSD will generate HMAC of the quote with the
replayed nonce in it. However, the tampered uApp will still
be unable to authenticate to the remote server, since the
server checks freshness of its nonces. On top of the key-
based authentication, an optional password authentication
mechanism may be deployed.
Locally encrypted data. For applications that do not ac-
cess a remote server, there is no party to share the public
AIK with. Instead, we break the key used to encrypt the
user’s data into two sub-keys. One sub-key is stored on the
PSD as the user’s authentication secret, and the other is
sealed in the TPM to the uApp. Unlike the remote server
scenario, the PSD must send a nonce (ND) to prevent re-
play attacks against the quote operation. The PSD’s sub-key
(Kpsd) is released to the uApp application only if the PSD
can verify the quote. See Figure 3.
In this example, we
assume the PSD-to-computer channel is physically secure,
otherwise an attacker may learn Kpsd. When the uApp re-
ceives Kpsd, it will retrieve the sealed part of the encryption
key from the TPM (Ktpm), which will succeed only if the
correct uApp is loaded. The decryption key is then gener-
ated as follows: Kdec = Kpsd ⊕ Ktpm.
4.
IMPLEMENTATION
In this section, we give implementation details of our Uni-
corn prototype, including how we are able to quickly switch
between the user OS and uApp OS, and the implementa-
tions of the uApp OS and our server- and PSD-based at-
testors. Because our prototype is intended more of a proof
PSD
Generates
nonce ND
ND, Pi
TQ = Pv, {Pv .ND}AIK−1
U
uApp OS
Generates
quote TQ
Veriﬁes TQ
Provides Kpsd
Kpsd
Figure 3: Attestation ﬂow for locally encrypted data
of concept than a polished implementation, we relax some of
the security requirements on the components in our Unicorn
implementation for convenience. First, instead of running a
specialized security OS with a minimal TCB, our uApp OS
is based on a stock Ubuntu 10.04 Linux distribution running
the Linux 2.6.34 kernel. This allows us to make use of exist-
ing open source software packages in our prototype. Second,
because we don’t have the means to program and implement
a real security token as our PSD, we implement our PSD as
an application running on an Android smartphone. In real-
ity, there should not be any other applications running on
our PSD that could allow the adversary to gain access to
the authentication secrets.
4.1 Switching between User OS and uApp
Tools used. To implement fast switching between user OS
and uApp, we leverage two components already present in
the Linux kernel – suspend-to-disk and kexec. Suspend-to-
disk enables the kernel to save its running state to a disk
so that the machine may be powered down and then later
resumed back to the same running state. This functionality
can be found on most commodity OSs. Kexec [22] is a fea-
ture in the Linux kernel that can load another kernel into
memory and transfer control to the new kernel. Kexec is
intended to be used during kernel development to invoke a
crash kernel for debugging after a kernel crash. The kernel
image can be loaded into memory and executed immediately,
or at a later time (e.g., when a crash actually happens). Be-
cause kexec transfers control directly to the new kernel, it
does not need to reset the machine and or invoke the BIOS.
21o
o
o
o
/
/
/
/
o
o
/
/
o
o
/
/
User interaction. When the user wishes to invoke a uApp,
she calls a user-space application. First, we use kexec to
load the uApp loader, uApp kernel, initrd and Authenti-
cated Code (AC) module into kernel memory, but we do not
transfer control to the uApp loader yet. We then invoke the
suspend-to-disk operation in the user OS kernel, if the user
chooses to save her OS and application states. The user can
also use kexec to invoke the uApp loader directly without
suspend-to-disk; this enables faster switching at the expense
of not being able to resume the user OS. When suspend-to-
disk is complete, the Linux kernel normally powers down the
machine. We modify the kernel implementation of suspend-
to-disk to instead call a kexec function that transfers control