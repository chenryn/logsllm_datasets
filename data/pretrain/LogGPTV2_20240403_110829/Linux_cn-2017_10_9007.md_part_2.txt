> 
> 如果你支持 [OpenFaaS](https://github.com/alexellis/faas)，希望你能 **星标** [OpenFaaS](https://github.com/alexellis/faas) 的 GitHub 仓库。
> 
> 
> 
登录你的第一个树莓派（你运行 `docker swarm init` 的节点），然后部署这个项目：
```
$ git clone https://github.com/alexellis/faas/
$ cd faas
$ ./deploy_stack.armhf.sh
Creating network func_functions  
Creating service func_gateway  
Creating service func_prometheus  
Creating service func_alertmanager  
Creating service func_nodeinfo  
Creating service func_markdown  
Creating service func_wordcount  
Creating service func_echoit  
```
你的其它树莓派会收到 Docer Swarm 的指令，开始从网上拉取这个 Docker 镜像，并且解压到 SD 卡上。这些工作会分布到各个节点上，所以没有哪个节点产生过高的负载。
这个过程会持续几分钟，你可以用下面指令查看它的完成状况：
```
$ watch 'docker service ls'
ID                  NAME                MODE                REPLICAS            IMAGE                                   PORTS  
57ine9c10xhp        func_wordcount      replicated          1/1                 functions/alpine:latest-armhf  
d979zipx1gld        func_prometheus     replicated          1/1                 alexellis2/prometheus-armhf:1.5.2       *:9090->9090/tcp  
f9yvm0dddn47        func_echoit         replicated          1/1                 functions/alpine:latest-armhf  
lhbk1fc2lobq        func_markdown       replicated          1/1                 functions/markdownrender:latest-armhf  
pj814yluzyyo        func_alertmanager   replicated          1/1                 alexellis2/alertmanager-armhf:0.5.1     *:9093->9093/tcp  
q4bet4xs10pk        func_gateway        replicated          1/1                 functions/gateway-armhf:0.6.0           *:8080->8080/tcp  
v9vsvx73pszz        func_nodeinfo       replicated          1/1                 functions/nodeinfo:latest-armhf  
```
我们希望看到每个服务都显示 “1/1”。
你可以根据服务名查看该服务被调度到哪个树莓派上：
```
$ docker service ps func_markdown
ID                  IMAGE                                   NODE    STATE  
func_markdown.1     functions/markdownrender:latest-armhf   swarm4  Running  
```
状态一项应该显示 `Running`，如果它是 `Pending`，那么镜像可能还在下载中。
在这时，查看树莓派的 IP 地址，然后在浏览器中访问它的 8080 端口：
```
$ ifconfig
```
例如，如果你的 IP 地址是 192.168.0.100，那就访问  。
这是你会看到 FaaS UI（也叫 API 网关）。这是你定义、测试、调用功能的地方。
点击名称为 “func\_markdown” 的 Markdown 转换功能，输入一些 Markdown（这是 Wikipedia 用来组织内容的语言）文本。
然后点击 “invoke”。你会看到调用计数增加，屏幕下方显示功能调用的结果。
![](/data/attachment/album/201710/28/223229fpnm7byd4tx33bbm.png)
### 部署你的第一个 Serverless 功能：
这一节的内容已经有相关的教程，但是我们需要几个步骤来配置树莓派。
#### 获取 FaaS-CLI
```
$ curl -sSL cli.openfaas.com | sudo sh
armv7l  
Getting package https://github.com/alexellis/faas-cli/releases/download/0.4.5-b/faas-cli-armhf  
```
#### 下载样例
```
$ git clone https://github.com/alexellis/faas-cli
$ cd faas-cli
```
#### 为树莓派修补样例模版
我们临时修改我们的模版，让它们能在树莓派上工作：
```
$ cp template/node-armhf/Dockerfile template/node/
$ cp template/python-armhf/Dockerfile template/python/
```
这么做是因为树莓派和我们平时关注的大多数计算机使用不一样的处理器架构。
> 
> 了解 Docker 在树莓派上的最新状况，请查阅： [你需要了解的五件事](https://blog.alexellis.io/5-things-docker-rpi/)。
> 
> 
> 
现在你可以跟着下面为 PC、笔记本和云端所写的教程操作，但我们在树莓派上要先运行一些命令。
* [使用 OpenFaaS 运行你的第一个 Serverless Python 功能](https://blog.alexellis.io/first-faas-python-function)
注意第 3 步：
* 把你的功能放到先前从 GitHub 下载的 `faas-cli` 文件夹中，而不是 `~/functinos/hello-python` 里。
* 同时，在 `stack.yml` 文件中把 `localhost` 替换成第一个树莓派的 IP 地址。
集群可能会花费几分钟把 Serverless 功能下载到相关的树莓派上。你可以用下面的命令查看你的服务，确保副本一项显示 “1/1”：
```
$ watch 'docker service ls'
pv27thj5lftz        hello-python        replicated          1/1                 alexellis2/faas-hello-python-armhf:latest  
```
**继续阅读教程：** [使用 OpenFaaS 运行你的第一个 Serverless Python 功能](https://blog.alexellis.io/first-faas-python-function)
关于 Node.js 或者其它语言的更多信息，可以进一步访问 [FaaS 仓库](https://github.com/alexellis/faas)。
### 检查功能的指标
既然使用 Serverless，你也不想花时间监控你的功能。幸运的是，OpenFaaS 内建了 [Prometheus](https://prometheus.io/) 指标检测，这意味着你可以追踪每个功能的运行时长和调用频率。
#### 指标驱动自动伸缩
如果你给一个功能生成足够的负载，OpenFaaS 将自动扩展你的功能；当需求消失时，你又会回到单一副本的状态。
这个请求样例你可以复制到浏览器中：
只要把 IP 地址改成你的即可。
![](/data/attachment/album/201710/28/223230qnr5rgeg0zgv2erc.png)
```
http://192.168.0.25:9090/graph?g0.range_input=15m&g0.stacked=1&g0.expr=rate(gateway_function_invocation_total%5B20s%5D)&g0.tab=0&g1.range_input=1h&g1.expr=gateway_service_count&g1.tab=0  
```
这些请求使用 PromQL（Prometheus 请求语言）编写。第一个请求返回功能调用的频率：
```
rate(gateway_function_invocation_total[20s])  
```
第二个请求显示每个功能的副本数量，最开始应该是每个功能只有一个副本。
```
gateway_service_count  
```
如果你想触发自动扩展，你可以在树莓派上尝试下面指令：
```
$ while [ true ]; do curl -4 localhost:8080/function/func_echoit --data "hello world" ; done
```
查看 Prometheus 的 “alerts” 页面，可以知道你是否产生足够的负载来触发自动扩展。如果没有，你可以尝试在多个终端同时运行上面的指令。
![](/data/attachment/album/201710/28/223231yf17n5n4a7m4x3no.png)
当你降低负载，副本数量显示在你的第二个图表中，并且 `gateway_service_count` 指标再次降回 1。
### 结束演讲
我们现在配置好了 Docker、Swarm， 并且让 OpenFaaS 运行代码，把树莓派像大型计算机一样使用。
> 
> 希望大家支持这个项目，**星标** [FaaS 的 GitHub 仓库](https://github.com/alexellis/faas)。
> 
> 
> 
你是如何搭建好了自己的 Docker Swarm 集群并且运行 OpenFaaS 的呢？在 Twitter [@alexellisuk](https://twitter.com/alexellisuk) 上分享你的照片或推文吧。
**观看我在 Dockercon 上关于 OpenFaaS 的视频**
我在 [Austin 的 Dockercon](https://blog.alexellis.io/dockercon-2017-captains-log/) 上展示了 OpenFaaS。——观看介绍和互动例子的视频： 
有问题？在下面的评论中提出，或者给我发邮件，邀请我进入你和志同道合者讨论树莓派、Docker、Serverless 的 Slack channel。
**想要学习更多关于树莓派上运行 Docker 的内容？**
我建议从 [你需要了解的五件事](https://blog.alexellis.io/5-things-docker-rpi/) 开始，它包含了安全性、树莓派和普通 PC 间微妙差别等话题。
* [Dockercon tips: Docker & Raspberry Pi](https://blog.alexellis.io/dockercon-tips-docker-raspberry-pi/)
* [Control GPIO with Docker Swarm](https://blog.alexellis.io/gpio-on-swarm/)
* [Is that a Docker Engine in your pocket??](https://blog.alexellis.io/docker-engine-in-your-pocket/)
---
via: 
作者：[Alex Ellis](https://twitter.com/alexellisuk) 译者：[haoqixu](https://github.com/haoqixu) 校对：[wxy](https://github.com/wxy)
本文由 [LCTT](https://github.com/LCTT/TranslateProject) 原创编译，[Linux中国](https://linux.cn/) 荣誉推出