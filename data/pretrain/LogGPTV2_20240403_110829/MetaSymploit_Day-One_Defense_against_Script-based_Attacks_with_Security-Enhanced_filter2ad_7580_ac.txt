pattern extraction, we hook the output APIs that are used
by attack scripts for sending payload.
Starting from the network layer to the application layer
in the OSI model, we keep a list of the output APIs
and their corresponding network protocols from both the
scripting language’s own network library and the built-in
components of the attack framework.
We symbolically extend the output APIs by overrid-
ing their functionality from sending real network packets
to dumping the entire packets locally. By doing so, the
entire network ﬂow sent from the attack script can be
dumped throughout the execution. To keep the semantic
context of each dumped packet, we associate them with
the behavior & constraint log of that execution path, so
that later the payload packets can be identiﬁed and the
extracted patterns can be correlated with the context de-
rived from the log.
In the example script, the hooked
sock.put dumps two packets. With the associated log,
we identify the payload packet for pattern extraction.
Note that as a part of the network protocol APIs, the
output APIs are also behavioral APIs that need to be
logged. In addition, we also include the corresponding
network protocols in the log. Later during signature gen-
eration, the log gives a clear view of which network pro-
tocol is used, and therefore SigGen can apply the correct
packet format when parsing the packet contents.
70  22nd USENIX Security Symposium 
USENIX Association
18: payload=>[]
19: payload=>[,
]
20-22: # Appending concrete substrings
payload => [,
,
]
23: payload => [,
,
,
]
Listing 3: The symbolic string form showing the content of payload
when prep ark5 is executed. Sym Int is a symbolic integer
representing the size of the shellcode.
3.4 Signature Generator
Given the dumped payload packets and the logs as inputs,
SigGen includes three techniques to generate signatures.
3.4.1 Constant Pattern Extracting
In order to generate a signature that can detect a payload
packet, it is necessary to extract a set of constant patterns
that always stay the same across different variations of
the payload. Speciﬁcally, there are three constant pat-
terns that can be extracted: ﬁxed-content pattern, ﬁxed-
length pattern and ﬁxed-offset pattern. For ease of ex-
planation, we ﬁrst present the formal form of a dumped
symbolic attack payload.
Recall that an attack payload is a string of bytes con-
taining both concrete contents (e.g., ﬁxed vulnerable re-
turn address) and variant contents (e.g., arbitrary shell-
code, random padding). When a payload is being com-
posed during the symbolic execution of the attack script,
we use symbolic strings to represent variant contents and
use extended APIs to perform symbolic string opera-
tions, while keeping concrete values and operations as
normal. Thus the dumped payload packet is a big sym-
bolic string composed of a sequence of substrings, where
each substring is either a concrete byte string or a sym-
bolic string by itself. Formally, Ssym = (s1s2 . . .s i . . .s n),
where si ∈ {Scon}∪{Ssym}. In addition, we also embed
 in Ssym to keep the semantics and
the possible length of the string, where the length is ei-
ther a concrete or symbolic integer. As an example, List-
ing 3 shows the contents of the payload when being com-
posed in Lines 18-23 of the example script. The ﬁnal
dumped payload is the same as the one in Line 23.
Fixed-content pattern. This pattern has two types, ei-
ther a simple byte string or a regular expression (regex).
When parsing the payload, for each concrete substring,
we extract it as a byte string pattern, such as the 12-byte
string in the payload of Line 23. For each symbolic sub-
string, if it can be matched by a regex, we extract the
regex as a ﬁxed pattern. If no regex is found, we move
on to the next substring.
In practice, we keep a map-
ping between regex-matchable symbolic labels and the
regexes. Currently, we mainly focus on using regexes on
payload paddings to achieve precise matching. For in-
stance, we map the symbolic label sym rand alpha
to a regex pattern [a-zA-Z].
Fixed-length pattern.
In some cases, although the
contents may vary, their lengths stay the same. Such
case typically happens when using padding to meet the
size requirement. To achieve precise matching, SymEx-
eLayer keeps track of the payload length during the
composition. When parsing the payload, we identify
the symbolic substrings with ﬁxed lengths and extract
them as patterns. When executing the example script
in SymExeLayer, we keep updating the payload length.
Later when parsing  in
the dumped payload, we produce a length-quantiﬁed
regex [a-zA-Z]{2917} as shown in Listing 2.
Fixed-offset pattern. Due to the format of some net-
work protocols, some payloads can be located only after
certain offsets of the packets. For instance, some FTP-
based attack packets have regular FTP commands, fol-
lowed with overlong paths as payloads to launch over-
ﬂow attacks. In such cases, since the network protocol
of the output API is logged, by applying the packet for-
mat of the protocol, we extract the offset of the payload,
which is a pattern for precise matching of the payload
location.
3.4.2 Pattern Reﬁning and Consolidating
As MetaSymploit automatically generates signatures in
a large scale, there are two requirements for the qual-
ity of the signatures. First, we should avoid generating
signatures only having patterns of common benign bytes
or patterns of trivial bytes/regexes, which may otherwise
cause false positive. Second, we should avoid generating
duplicated signatures with the same pattern set, which
may cause useless redundancy and confuse the IDS.
First requirement. When a payload is ﬁnally sent
through the output API, common benign bytes are in-
troduced by network protocols as concrete substrings
in the payload packet, including default protocol bytes
(e.g., “Content-Type:text/html”) and delimiter bytes
(e.g., “\r\n”). To identify them, for each protocol, we
keep a list of benign bytes. Based on the packet format,
we examine the concrete substrings to search for the oc-
currences of benign bytes. If found, we strip the benign
part and focus on the rest bytes for pattern extraction.
In addition, it is also important to avoid generating
signatures only using trivial patterns such as too short
byte string or too general regex patterns. Thus, we set a
USENIX Association  
22nd USENIX Security Symposium  71
threshold of minimum byte string length (e.g., >= 10)
and a list of critical regexes (e.g., NOP regex [\x90]*).
Given a set of extracted patterns, we generate signatures
only if we can ﬁnd at least one pattern whose length
is above the threshold or whose regex is critical. Note
that both the threshold and the critical regex list are
adjustable. Security analysts can also deﬁne different
thresholds and lists for different network protocols.
Second Requirement. Recall that SymExeLayer ex-
plores different execution paths in an attack script and
dumps payloads in each path. Sometimes, two paths
may differ only in a branch that is irrelevant to the pay-
load content, thus ﬁnally composing the same payloads.
Furthermore, two attack scripts may also share the same
patterns. To consolidate the same patterns from different
payloads into one signature, we keep a key-value hash
map where each key is a pattern set and each value is a
set of different payloads with the same pattern set. When
a new payload is parsed, if its pattern set already exists in
the hash map, we add this new payload, particularly its
behavior & constraint log into the corresponding value
set. The payloads and the logs in one set are analyzed
together to generate only one signature.
3.4.3 Pattern Context Deriving
Apart from pattern extraction, it is equally important to
provide the context of the patterns. The pattern context
shows the insight into the attack script, such as what at-
tack behavior and attack payload the patterns represent.
It also gives security analysts the guidance on how to use
the patterns, such as which target version and what OS
environment the patterns can be used to protect.
Therefore, we analyze the behavior & constraint log
to derive the pattern context. Since attack behaviors are
captured as behavioral APIs in the log, we derive the
context by translating the behavioral APIs into human-
readable phrases.
Some APIs have straightforward
names, which can be simply translated into the descrip-
tion phrase (or even directly used), such as probe ver
=> Version Probing. Others may not be intuitive.
Particularly, certain behavior cannot be shown from a
single API but a series of API calls. In such case, we
group these API calls together as one behavioral pattern.
When such pattern is found in the log, we translate it
into the matched behavior name, such as shellcode
+ get target ret => Stack Overflow.
Sometimes, sophisticated attack scripts may have un-
precedented behaviors whose APIs do not match any pat-
terns. In such cases, we keep the derivable context while
highlighting underived behavioral APIs in the log to help
security analysts discover new attack behaviors. In fact,
we use this technique in our prototype to collect patterns.
In regard to attack constraints, since the involved sym-
bolic values represent attack conditions of each execu-
tion path, we retrieve the external source names in the
symbolic labels and bind them with the conditions de-
rived from the constraints (e.g., Target Version: 5).
Finally, when both the extracted pattern set and the
derived context are ready, SigGen combines two together
and generates a signature, which can be used to detect the
payloads associated with this speciﬁc pattern set.
4
Implementation
We implement a prototype of MetaSymploit as a practi-
cal analysis tool targeting the Ruby-based attack frame-
work Metasploit. Given a Metasploit attack script,
our tool quickly analyzes it and automatically generates
Snort rules as signatures that can defend against this spe-
ciﬁc script. Particularly, we developed a lightweight
Ruby symbolic execution engine designed for attack
script analysis. Powered by the engine, we build SymEx-
eLayer on top of the launching platform of Metasploit. In
this section, we ﬁrst describe how the engine is designed
and then explain how to adapt the engine for Metasploit.
4.1 A Lightweight Symbolic Execution En-
gine for Ruby
Traditionally, developing a symbolic execution engine
requires heavy modiﬁcation of the interpreter, which
causes great engineering effort since Ruby has multiple
active versions and interpreters (e.g., 1.8/1.9/2.0). How-
ever, we discover a new way to design a lightweight en-
gine without modifying the interpreter. The engine is de-
veloped purely in Ruby (9.3K SLOC) as a loadable pack-
age compatible with multiple versions of Ruby. Thus it
supports analyzing attack scripts written in different ver-
sions. Speciﬁcally, our engine has two modules: (1) a
symbolic library that introduces rich symbolic support
into Ruby; (2) a symbolic execution tracer that performs
symbolic execution based on the actual script execution.
classes
to hold symbolic values
4.1.1 Library of Symbolic Support
The symbolic library realizes the functionality of
The library introduces
Symbolic API Extension.
symbolic
(e.g.,
SymbolicString, SymbolicInteger). To be
transparent to attack scripts, we develop the same APIs
in the symbolic classes as their concrete counterparts. On
the other hand, we also extend indirect-variant-related
APIs in the concrete classes to support handling sym-
bolic arguments, so that concrete and symbolic objects
can operate with each other.
Notably, SymbolicString class plays the key role
To hold the con-
in representing attack payloads.
72  22nd USENIX Security Symposium 
USENIX Association
tents, SymbolicString has an internal ordered array,
where each item is either a concrete substring, or a sym-
bolic substring with the 
embedded. When a SymbolicString API is called,
it ﬁrst checks whether the original concrete operation is
still applicable to the concrete substrings. If so, the API
uses the original logic in String to operate the concrete
substrings. Otherwise, the API treats the contents as
symbolic substrings, and processes the internal string ar-
ray as symbolic expressions. When a symbolic-extended
String API is called with symbolic arguments, it han-
dles concrete and symbolic substrings in the same way
as above and returns a SymbolicString object.
Later when SymExeLayer is integrated with Metas-
ploit, we further include the symbolic-extended APIs of
Metasploit into the symbolic library.
4.1.2 Symbolic Execution Tracer
The symbolic execution tracer transforms normal script
execution into symbolic execution.
It also realizes the
functionality of Behavior & Constraint logging. To this
end, we develop three techniques based on three ad-
vanced language features in Ruby (& Python3).