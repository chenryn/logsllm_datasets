ν
ν
ν
ν
ν
ν
ν
ν
ν
ν
V [[a2]]V(ν ))]
V [[y]]V(ν ))]
V [[y]]V(ν ))][c ← hiV([[a1]]V (ν ) +#
V [[a2]]V (ν ))][c ← hiV ([[a1]]V(ν ) +#
V [[a2]]V (ν ) +#
V [[a2]]V(ν ) +#
ν[v ← [[a1]]V(ν ) +V [[a2]]V(ν )]
ν[v ← loV([[a1]]V (ν ) +#
ν[v ← loV ([[a1]]V(ν ) +#
ν[v ← loV ([[a1]]V(ν ) +#
ν[v ← [[a1]]V (ν ) −V [[a2]]V (ν )]
ν[v ← [[a1]]V (ν ) ×V [[a2]]V (ν )]
ν[vh ← hiV ([[a1]]V(ν ) ×#
ν[v ← [[a]]V (ν ) ≪V |n|]
ν[vh ← [[a]]V (ν ) ≫V |n|][vl ← ([[a]]V (ν ) ≪V (w −N |n|)) ≫V (w −N |n|)]
ν[vh ← hiV (([[a1]]V (ν ).V[[a2]]V (ν )) ≪V |n|)][vl ← (loV(([[a1]]V(ν ).V[[a2]]V(ν )) ≪V |n|)) ≫V |n|]
V [[a2]]V(ν ))][vl ← loV ([[a1]]V(ν ) ×#
V [[a2]]V (ν ) +#
V [[a2]]V(ν ))]
V [[y]]V (ν ))]
Figure 2: Transition relation bTr for bvCryptoLine.
(cid:40)
(cid:40)
Define ν[v ← d](u) ≜
function [[·]]V (ν ) for variables and atoms as follows.
if u = v
otherwise . Define the semantic
d
ν (u)
[[v]]V(ν ) ≜ ν (v) for v ∈ Var
[[a]]V(ν ) ≜
ν (v)
b
if a is a variable v
if a is a bit-vector b
Consider the transition relation bTr ⊆ bSt × bStmt × bSt defined
=⇒ ν′ denotes (ν, s, ν′) ∈ bTr for ν, ν′ ∈ bSt
s
in Figure 2 where ν
and s ∈ bStmt. Basically, v ← a1 + a2 is addition, c v ← a1 + a2 is
addition with carry bit placed in c, v ← a1 + a2 + y is addition of
atoms plus a variable y, c v ← a1 + a2 + y is addition of atoms plus
a variable y with carry bit placed in c, v ← a1 − a2 is subtraction,
v ← a1 × a2 is multiplication, vh vl ← a1 × a2 is full multiplication,
v ← a ≪ n is left-shifting, vh vl ← a@n is splitting at position n,
and vh vl ← (a1.a2) ≪ n is left-shifting of higher n bits from a2
to a1. The variable y in v ← a1 + a2 + y and c v ← a1 + a2 + y is
intended but not restricted to be carry bits.
A program is a sequence of statements. We denote the empty
program by ϵ.
bProg
::= ϵ | bStmt; bProg
p
Observe that conditional branches are not allowed in our domain
specific language to prevent timing attacks. The semantics of a
program is defined by the relation bTr∗ ⊆ bSt × bProg × bSt where
(ν, ϵ, ν ) ∈ bTr∗ and (ν, s; p, ν′′) ∈ bTr∗ if there is a ν′ with (ν, s, ν′) ∈
bTr and (ν′, p, ν′′) ∈ bTr∗. We write ν
=⇒ ν′ when (ν, p, ν′) ∈ bTr∗.
For specifications, ⊤ denotes the Boolean value tt. We allow two
kinds of specifications, namely algebraic specifications evaluated
on domain Z and range specifications evaluated on domain Vw.
Atomic predicates in an algebraic specification include polynomial
equations e1 = e2 and modular polynomial equations e1 ≡ e2mode3
where ei ∈ bExpa is a polynomial expression for i ∈ {1, 2, 3}. An
algebraic predicate qa ∈ bPreda is then a conjunction of atomic
algebraic predicates.
bExpa
bPreda
::= Z | Var | − bExpa | bExpa + bExpa
| bExpa − bExpa | bExpa × bExpa
::= ⊤ | bExpa = bExpa | bExpa ≡ bExpa mod bExpa
| bPreda ∧ bPreda
Given a state ν ∈ bSt and an expression e ∈ bExpa, [[e]]Z (ν ) denotes
the value of e on ν.
[[n]]Z (ν ) ≜ n for n ∈ Z
[[v]]Z (ν ) ≜ |ν (v)| for v ∈ Var
[[−e]]Z (ν ) ≜ −Z[[e]]Z (ν )
[[e1 + e2]]Z (ν ) ≜ [[e1]]Z (ν ) +Z [[e2]]Z (ν )
[[e1 − e2]]Z (ν ) ≜ [[e1]]Z (ν ) −Z [[e2]]Z (ν )
[[e1 × e2]]Z (ν ) ≜ [[e1]]Z (ν ) ×Z [[e2]]Z (ν )
For an algebraic predicate qa ∈ bPreda, we write Vw |= qa[ν] if
qa evaluates to tt using the evaluation function [[e]]Z (ν ) for every
subexpression e in q.
We admit comparison between atoms in range specifications
as atomic range predicates1. A range predicate qr ∈ bPredr is a
conjunction of atomic range predicates.
bPredr
::= ⊤ | bAtom < bAtom | bAtom ≤ bAtom
| bPredr ∧ bPredr
We use al ◦ a1, a2, . . . , an • ar as a shorthand of the conjunction of
al ◦a1∧al ◦a2∧· · ·∧al ◦an and a1•ar ∧a2•ar ∧· · ·∧an•ar where
◦,• ∈ {<, ≤}. For qr ∈ bPredr and ν ∈ bSt, we write Vw |= qr [ν] if
one of the following holds.
• q is ⊤.
• q is a1 < a2 and [[a1]]V(ν ) <V [[a2]]V(ν ).
• q is a1 ≤ a2 and [[a1]]V (ν ) ≤V [[a2]]V(ν ).
• q is q1 ∧ q2, Vw |= q1[ν], and Vw |= q2[ν].
A predicate q ∈ bPred consists of an algebraic predicate and a
range predicate.
bPred
bSpec
(cid:57)bPredr
::= bPreda(cid:57)
::= (|bPred|)bProg(|bPred|)
For ν ∈ bSt and q ∈ bPred, we write Vw |= q[ν] if q evaluates to tt;
ν is called a q-state. We follow Hoare’s formalism in specifications
of mathematical constructs [23] and call (|q|) p (|q′|) a specification
if q, q′ ∈ bPred, an algebraic specification if q, q′ ∈ bPreda, and
a range specification if q, q′ ∈ bPredr. In (|q|) p (|q′|), q and q′ are
the pre- and post-conditions of p respectively. Given q, q′ ∈ bPred
(q, q′ ∈ bPreda, or q, q′ ∈ bPredr) and p ∈ bProg, (|q|) p (|q′|) is
1In our implementation, comparison between bit-vector expressions is allowed, not
only between atoms.
Session I4:  Verifying CryptoCCS’17, October 30-November 3, 2017, Dallas, TX, USA19761:
2:
3:
4:
5:
r0 ← x0;
r1 ← x1;
r2 ← x2;
r3 ← x3;
r5 ← x4;
6:
7:
8:
9:
10:
r0 ← r0 + 0xF F F F F F F F F F F DA;
r1 ← r1 + 0xF F F F F F F F F F F F E;
r2 ← r2 + 0xF F F F F F F F F F F F E;
r3 ← r3 + 0xF F F F F F F F F F F F E;
r4 ← r4 + 0xF F F F F F F F F F F F E;
Figure 3: Subtraction bSub
11:
12:
13:
14:
15:
r0 ← r0 − y0;
r1 ← r1 − y1;
r2 ← r2 − y2;
r3 ← r3 − y3;
r4 ← r4 − y4;
V [[a2]]V (ν )) = bvw
(0)
radix51(r4, r3, r2, r1, r0)
=radix51(x4, x3, x2, x1, x0) + 2ϱ − radix51(y4, y3, y2, y1, y0)
≡radix51(x4, x3, x2, x1, x0) − radix51(y4, y3, y2, y1, y0) mod ϱ.
V [[a2]]V(ν ) +#
V [[y]]V(ν ))
≜ 0 ≤ x0, x1, x2, x3, x4, y0, y1, y2, y3, y4 ≤ bv64 (251 +Z 215),
q′
a ≜ radix51V(x4, x3, x2, x1, x0) − radix51V(y4, y3, y2, y1, y0) ≡
radix51V (r4, r3, r2, r1, r0) mod ϱ, and q′
r ≜ 0 ≤ r0, r1, r2, r3, r4 <
bv64 (254). The specification of the mathematical construct is there-
fore
(|qa ∧ qr |)
bSub
a ∧ q′
(|q′
r |).
Note that the variables ri’s are added with constants after they
are initialized with xi’s but before yi’s are subtracted from them. It
is not hard to see that
2ϱ = radix51(|0xF F F F F F F F F F F F E|, |0xF F F F F F F F F F F F E|,
|0xF F F F F F F F F F F F E|, |0xF F F F F F F F F F F F E|,
|0xF F F F F F F F F F F DA|)
after tedious computation. Hence
The program in Figure 3 is correct assuming that it is safe. Character-
istics of large Galois fields are regularly exploited in mathematical
constructs for correctness and efficiency. Our domain specific lan-
guage can easily model such specialized programming techniques.
Indeed, the reason for adding constants is to prevent underflow.
If the constants were not added, the subtraction in lines 11 to 15
could give negative and hence incorrect results. We will show how
to prove that the program is safe later.
4 TRANSFORMATION OF SPECIFICATIONS
Given qa, q′
r ∈ bPredr, and p ∈ bProg, we reduce
(cid:57)qr |) p (|q′
the problem of checking |= (|qa(cid:57)
r |) to (1) the entailment
problem of modular polynomial equations over integer variables
proving |= (|qa|) p (|q′
a|) via an intermediate language zCrypto-
Line, (2) a range problem |= (|qr |) p (|q′
r |), and (3) a safety check
of program p. The reduction is carried out by the following three
transformations:
a ∈ bPreda, qr , q′
(cid:57)q′
a(cid:57)
valid (written |= (|q|) p (|q′|)) if for every ν, ν′ ∈ bSt, Vw |= q[ν]
=⇒ ν′ imply Vw |= q′[ν′]. Less formally, |= (|q|) p (|q′|) if
p
and ν
executing p from a q-state always results in a q′-state.
Given a statement s ∈ bStmt and a state ν ∈ bSt, the function
StmtSafe (Algorithm 1) checks if executing s from ν neither over-
flows nor underflows. We call a statement s safe at a state ν if
StmtSafe(s, ν) evaluates to tt. A program p is safe at a state ν,
denote by ProgSafe(p, ν), if (1) p = ϵ, or (2) p = s; pp, StmtSafe(s,
=⇒ ν′ implies ProgSafe(pp, ν′). A
ν) = tt, and for all ν′ ∈ bSt, ν
s
program is safe if it is safe at every state.
match s with
Algorithm 1 Safety Test for Statements
1: function StmtSafe(s, ν)
2:
3:
4:
5:
case v ← a: return tt
case v ← a1 + a2:
return hiV([[a1]]V(ν ) +#
case c v ← a1 + a2: return tt
case v ← a1 + a2 + y:
return hiV ([[a1]]V(ν ) +#
(0)
= bvw
6:
7:
8:
9:
10:
11:
12:
13:
14:
15:
16:
17:
18:
19:
return hiV ([[a1]]V(ν ) −#
return hiV ([[a1]]V(ν ) ×#
case c v ← a1 + a2 + y: return tt
case v ← a1 − a2:
case v ← a1 × a2:
case vh vl ← a1 × a2: return tt
case v ← a ≪ n:
return [[a]]V (ν ) <V (bvw
case vh vl ← a@n: return tt
case vh vl ← (a1.a2) ≪ n:
return [[a1]]V (ν ) <V (bvw
|n| ≤N w
V [[a2]]V (ν )) = bvw
V [[a2]]V(ν )) = bvw
(0)
(0)
(1) ≪V (w −N |n|))
(1) ≪V (w −N |n|))∧
20: end function
Figure 3 gives a simple yet real implementation of subtraction
over GF(ϱ) with a bit-width 64. In the figure, a constant bit-vector
is written in hexadecimal format starting with the prefix 0x and a
number in GF(ϱ) is represented by five bit-vectors each with value
less than or equal to 251 +Z 215. The variables x0, x1, x2, x3, x4 for in-
stance represent radix51(x4, x3, x2, x1, x0) ≜ (251×4)x4+(251×3)x3+
(251×2)x2 + (251×1)x1 + (251×0)x0. The result of subtraction is stored
in the variables r0, r1, r2, r3, r4, which are all required to be in the
range from 0 to 254. Let radix51V (x4, x3, x2, x1, x0) denote the rep-
resentation of radix51(x4, x3, x2, x1, x0) in bExpa. Let qa ≜ ⊤, qr
(2) zCryptoLine. The algebraic specification (|qa|) p (|q′
(1) Static single assignments. The program is transformed
into static single assignments. Variables in pre- and post-
conditions are also renamed (Section 4.1) [4].
a|) in
bvCryptoLine is transformed to a specification in zCryp-
toLine so that the validity of the specification in zCrypto-
Line implies the validity of (|qa|) p (|q′
a|) in bvCryptoLine
if the program p is safe. (Section 4.2).
(3) Modular polynomial equations. Validity of algebraic speci-
fications in zCryptoLine is reduced to the entailment of
modular polynomial equations (Section 4.3) [22].
Session I4:  Verifying CryptoCCS’17, October 30-November 3, 2017, Dallas, TX, USA1977For each transformation, we give an algorithm and establish the
correctness of the algorithm in Coq [12]. Specifically, semantics
for zCryptoLine and validity of specifications in zCryptoLine are
formalized. The correctness of transformations is then certified by
the proof assistant Coq. For static single assignments, we construct
machine-checkable proofs for the soundness and completeness of
the transformation. For modular polynomial equations, another
Coq-certified proof shows the soundness of the transformation
from the validity of the algebraic specification to the entailment
of modular polynomial equations. In the following subsections,
transformations and their correctness are elaborated in details.
4.1 Static Single Assignments
A program is in static single assignment form if every non-input vari-
able is assigned at most once and no input variable is assigned [4].
Our next task is to transform any specification (|q|) p (|q′|) to a spec-
ification of p in static single assignment form for any q, q′ ∈ bPred
and p ∈ bProg. To avoid ambiguity, we consider well-formed pro-
grams where
• for every statement in the program with two lvalues such
as c v ← a1 + a2 + y with lvalues c and v, the two lvalues
are different variables; and
• every non-input program variable must be assigned to a
value before being used.
Our transformation maintains a finite mapping θ from variables
to non-negative integers. For any variable v, vθ (v ) is the most re-
cently assigned copy of v. For any atom a, aθ is vθ (v ) when a is
a variable v, and otherwise is b when a is a constant bit-vector b.
Only the most recent copies of variables are referred in expressions.
Algorithm 2 transforms algebraic expressions with the finite map-
ping θ by structural induction. Integers are unchanged. For each
variable, its most recent copy is returned by looking up the mapping
θ. Other algebraic expressions are transformed recursively.
match e with
Algorithm 2 Static Single Assignment Transformation for Alge-
braic Expressions
1: function SSAExpra(θ, e)
2:
3:
4:
5:
6:
7:
8:
9:
10:
11:
12: end function
case i: return i
case v: return vθ (v )
case −e′: return −SSAExpra(θ, e′)
case e1 + e2:
case e1 − e2:
case e1 × e2:
return SSAExpra(θ, e1) + SSAExpra(θ, e2)
return SSAExpra(θ, e1) − SSAExpra(θ, e2)
return SSAExpra(θ, e1) × SSAExpra(θ, e2)