Since we have yet to see production usage of FQAE, we
emulate the scenario of network administrator querying live
traﬃc based on the production ﬁrewall conﬁgurations ob-
tained from a tier-1 ISP and several campus networks. We
use two approaches to emulate potential ﬂowsets from these
ﬁrewalls.
In the ﬁrst approach, we consider each “LOG”
rule in the conﬁguration ﬁle as a query for statistics. In the
second approach, we consider every ﬁltering rule as a query.
Table 5 presents the number of user queries based on several
ﬁrewall conﬁgurations. One can observe that the number of
queries or disjoint sub-queries are signiﬁcantly smaller than
the number of ﬂows one would observe from traﬃc traces.
Note that such emulation does not fully utilize the capabil-
ity of FQAE to reduce counters as we make a conservative
assumption that every rule corresponds to a query.
One might argue that the number of independent ﬂowsets
generated by n user queries (denoted as m) can also be large.
This is a legitimate concern since m = 2n in the worst case
when every new ﬂowset overlaps with all existing ﬂowsets
(Algorithm 1, line 12). However, we argue that the number
of ﬂowsets cannot be larger than the number of active ﬂows.
One can ensure that every ﬂowset contains at least one active
ﬂow by aggregating ﬂowsets with no active ﬂows into one
large ﬂowset. Furthermore, our study on ﬁlter rules show
that only a small portion of the rules overlaps with other
rules. Consequently, the number of disjoint sub-queries (m)
is only moderately larger than the number of queries (n)
instead of being close to 2m. This is also consistent with
earlier study on ﬁrewall and router conﬁgurations. For a
scenario of 300 queries with every 3 rules overlapping with
each other, the number of disjoint ﬂowsets one has to main-
tain counter for is just 700, which is signiﬁcantly smaller
than the number of ﬂows on most high-speed links.
The reduced number of counters has multiple implications
to the measurement architecture. First, it makes it possi-
ble to store the counters in the faster registers or SRAM.
This is crucial for high-speed network devices. Second, it
reduces the volume of data to be exported. Currently, Cisco
NetFlow imposes a minimum ﬁve minutes interval between
subsequent exports so that the measurement data, probably
coming from multiple vantage points in the network, will not
overload the network. With the reduced number of counters,
one can monitor the network at a higher temporal resolution
and thus be more responsive to any anomalous events.
5.2 Memory Cost of Flowsets
Although FQAE can reduce the number of counters, a le-
gitimate concern is that how much memory one has to spend
for maintaining the underlying data structure of ﬂowsets. To
understand the memory cost associated with a ﬂowset, we
ﬁrst look at a practical scenario of building a ﬂowset repre-
senting all the bogon IP addresses in Figure 9a. We add each
CIDR block in the current bogon list [29] one-by-one using
the “union” operation and plot the corresponding number of
BDD nodes required to represent this ﬂowset (“FQAE”). For
comparison, we plot the cardinality of the ﬂowset and ob-
serve that the cardinality of the ﬂowset increase signiﬁcantly
faster than the number of BDD nodes used to describe it.
Furthermore, we plot the total number of BDD nodes used
to describe each CIDR blocks. Without using FCL, a list
representation of all the CIDR blocks (“BDD w/o FCL”) will
require more than ﬁve times memory. Note that the last bo-
gon entry is 224.0.0.0/3 which could match 229 unique source
IP address, thus the sharp increase in the cardinality of the
ﬂowset at the right end. However, its BDD representation
requires only three nodes. In the case of using FCL to con-
struct the ﬂowset, only one additional node is required.
Figure 9b looks at the number of BDD nodes associated
with randomly generated ﬂowsets. On the X-axis, we vary
s
e
d
o
N
D
D
B
#
600
500
400
300
200
100
0
10
10
FQAE
BDD w/o FCL
Cardinality of FlowSet
x1e+9
1.8
1.6
1.4
1.2
1.0
0.8
s
w
o
l
F
#
0.6
0.4
0.2
60
60
0.0
70
70
30
30
20
20
# Total Bogon Entries
40
40
50
50
s
e
d
o
N
D
D
B
#
1800
1600
1400
1200
1000
800
600
400
200
0
0
(a) Bogons
10
20
30
# Primitives
40
50
60
(b) Random Flowsets
Figure 9: Memory Cost of Flowsets.
the number of primitives used to deﬁne a ﬂowsets. Each
primitive is deﬁned by a two-tuple {sip, dip} with both mask
lengths varying between 7 and 26. We randomly choose set
operators (∩, ∪, \) to join the primitives so that they col-
lectively deﬁnes a non-empty ﬂowset. One can observe that
the maximum number of nodes used to describe a ﬂowset
grows linearly with the number of primitives. This is con-
sistent with our discussion in Section 2.3 and happens when
the BDD representations of the primitives do not share com-
mon path. It is however quite possible for ﬂowsets involving
larger number of primitives to require less number of BDD
nodes. The average number of BDD nodes for a ﬂowset
grows sub-linearly with the number of primitives. Note that
the memory required to deﬁne a ﬂowset depends only on the
primitives and the set operators and is independent of the
traﬃc pattern it measures.
One might notice that we used the number of BDD nodes
instead of the more direct bytes to evaluate memory con-
sumption. This is because there are many BDD packages
with node size varying between 8 and 36 bytes. Our cur-
rent implementation is based on BuDDy [26], which uses 20
bytes per node. We believe that porting ProgME to another
BDD package is easy and will not require any change to its
algorithms. Please refer to [23] for a comprehensive survey
on various BDD packages.
5.3 Accuracy of FQAE
The accuracy of measurement results is of paramount con-
cern for every management application. Existing ﬂow-based
measurement tools use average per-ﬂow error as the pri-
mary measure of accuracy. Facing the challenge posed by
the large number of ﬂows, some recent research propose to
keep counters preferentially for large or long-lived ﬂows while
excluding mice from occupying counters (more details in
Section 6). Such techniques eﬀectively produce biased ﬂow
statistics that results in smaller average error than unbiased
random sampling. Note that unbiased random sampling has
a natural tendency to favor large ﬂows because small ﬂows
have a higher chance not being sampled.
Ideal unbiased
per-ﬂow statistics is only possible when every single ﬂow is
counted. Please refer to [15] for comparison on the average
error using diﬀerent techniques.
(a) Flows
(b) Unbiased
(c) Biased
Figure 10: Flow-based Estimation.
For a management application, lower average error does
not always translate to higher accuracy for the answers to
their queries, which directly aﬀects their decisions and is
more important. Consider the scenario depicted in Fig-
ure 10. The original traﬃc has some elephants and mice
(Figure 10a). Figure 10b presents the ideal measurement
results for the four queries on each quadrant if every sin-
gle ﬂow is recorded. Ignoring mice cause limited errors on
queries dominated by elephants. However, for queries in-
volving mostly mice (the top left quadrant in Figure 10c),
the error can be very high.
Queries dominated by mice do have practical importance
in network planning and monitoring. Typical examples are
ICMP, DNS, and routing traﬃc. Although the absolute vol-
ume of these traﬃc might be small, their relative volume
variation could be a useful indicator for administrators. Bi-
ased statistics that ignores these traﬃc is not suitable for
monitoring mice-dominated traﬃc. More importantly, bi-
ased statistics makes it possible for attackers to evade the
detection of volume-based monitoring tools. An attacker can
generate a large number ﬂows, each with a diﬀerent spoofed
source IP address and small number of packets. Since these
individually small ﬂows are likely to be ignored by both bi-
ased and unbiased per-ﬂow measurement, monitoring tools
based post-processing of these statistics might fail to detect
these kind of attacks.
If there were no memory limitation and statistics could be
maintained for every ﬂow, per-ﬂow statistics could achieve
high per-query accuracy under any traﬃc condition. FQAE
achieves the same eﬀect by counting for each query directly.
The analytical proof is skipped in this paper due to space
limit.
Intuitively, If every single ﬂow is recorded, it does
matter whether post-aggregation or pre-aggregation is used.
5.4 Case Studies on FQAE
In this section, we present two case studies illustrating
how administrators can use FQAE to accomplish their mea-
surement goals. To use FQAE, one need to use FCL to spec-
ify the measurement queries. These two case studies show
that it is not easy to produce the ﬂowset deﬁnitions deﬁning
practical measurement tasks. We also compare FQAE with
the following approaches:
1. Per-Flow : the ideal case that every ﬂow is tracked.
2. Elephant: methods that produce biased statistics that
favors heavy hitters, as discussed in Section 5.3.
3. Superﬂow : In many routers and ﬁrewalls, it is possi-
ble to conﬁgure LOG rules to collect traﬃc statistics
of superﬂows. LOG rules are similar to accept/drop
rules except that its only operation is to increment the
counter when a matching packet is observed. There
is a large amount of research on packet classiﬁers, but
for comparison purposes, we consider the most widely
deployed variation, where a packet traverses through
the rules sequentially until the ﬁrst matching is found.
5.4.1 Deriving Trafﬁc Demand
Our ﬁrst task is to collect traﬃc statistics for deriving
In particular, we
the traﬃc matrix of an ISP backbone.
consider the case that an administrator wants to measure
the traﬃc going through a particular ISP with a list of AS
number Y1, Y2,··· , Yn
5. Such measurement has important
application in traﬃc engineering and network planning.
# Counters Accuracy
Per-Flow
Elephants
Superﬂow
FQAE
106
103
1.7 × 105
1
High
Good
High
High
Table 6: Comparison on Deriving Traﬃc Demand.
The classical approach proposed by Feldmann et al. [16]
is to perform per-ﬂow measurement on ingress router and
then, based the routing table at that moment, aggregate
the ﬂow statistics to ﬁnd traﬃc demands. They also ob-
served that around 1,000 elephants account for about 80%
of the traﬃc demands. Therefore, techniques that ignores
mice should still return suﬃciently good statistics in gen-
eral. One could associate a counter with every routing rule
to collect statistics for each preﬁx (superﬂow) and then per-
form aggregation. However, since current BGP table carries
around 170,000 preﬁxes [34], such approach will generate a
large amount of data.
s
e
d
o
N
D
D
B
#
90000
80000
70000
60000
50000
40000
30000
20000
10000
0
10000
20000
30000
40000
# Total Prefixes
50000
60000
70000
80000
Figure 11: Memory of Preﬁxes
We propose a two-step process to pre-process the routing
table and compute the ﬂowset that will go through AS Y .
First, we process the routing table to ﬁnd all preﬁxes that
contains any of Yi, Y2,··· , Yn in its AS path. Then we use
5The registration of AS number can be found at [31].
FCL to compute the union of the selected preﬁxes to ﬁnd
the ﬂowset. We experiment this approach on the BGP rout-
ing table dumped by the Route Views project [36] and ﬁnd
this approach viable. We identiﬁed 84,312 preﬁxes (among a
total of 188,275 preﬁxes in the routing table) that might tra-
verse through this tier-1 ISP (with 13 AS numbers) on its AS