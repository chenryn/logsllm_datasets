### Version of ShardingSphere
- **Java Version**: 1.8.0_342
- **Full Path**: `/home/peilq_sharding/bisheng-jdk1.8.0_342/bin/java`
- **ShardingSphere Version**: 5.2.2-SNAPSHOT
- **Commit ID**: `dirty-753c0cee8ee6fd3db00536da55b64bc5198a3758`
- **Commit Message**: Optimize `sqlFederationExecutor` init logic when `sqlFederationType` is modified dynamically (Issue #22209)
- **Branch**: `753c0ce`
- **Build Time**: 2022-11-19T10:18:41+0800

### Project Used
- **Project**: ShardingSphere-Proxy

### Expected Behavior
In the federation scenario, after a view is dropped, its information should no longer exist in ZooKeeper, and there should be no duplicate names.

### Actual Behavior
In the federation scenario, even after a view is dropped, its information still exists in ZooKeeper with duplicate names.

### Reason Analysis (If Available)
[Please provide any analysis or insights you have into why this issue might be occurring.]

### Steps to Reproduce the Behavior
To reproduce the behavior, follow these steps using the provided SQL commands:

```sql
gsql -d test_db -p 11000 -r -h 7.212.123.28 -U sharding -W sharding -r -a17.ss 2>&1
```

#### Step 1: Union Operations
- **Step 1.1**: Create a view using `UNION` on the same table.
  ```sql
  CREATE VIEW select_view AS 
  SELECT * FROM t_order WHERE order_id > 2900 
  UNION 
  SELECT * FROM t_order WHERE order_id > 2500 
  ORDER BY order_id;
  -- Query the view
  SELECT * FROM select_view LIMIT 3, 5;
  -- Drop the view
  DROP VIEW select_view;
  ```

- **Step 1.2**: Create a view using `UNION ALL` on the same table.
  ```sql
  CREATE VIEW select_view AS 
  SELECT * FROM t_order WHERE order_id > 2900 
  UNION ALL 
  SELECT * FROM t_order WHERE order_id > 2500 
  ORDER BY order_id;
  -- Query the view
  SELECT * FROM select_view;
  -- Drop the view
  DROP VIEW select_view;
  ```

- **Step 1.3**: Create a view using `UNION DISTINCT` on the same table.
  ```sql
  CREATE VIEW select_view AS 
  SELECT * FROM t_order WHERE order_id > 2900 
  UNION DISTINCT 
  SELECT * FROM t_order WHERE order_id > 2500 
  ORDER BY order_id;
  -- Query the view
  SELECT * FROM select_view;
  -- Drop the view
  DROP VIEW select_view;
  ```

- **Step 1.4**: Create a view using `UNION` with subqueries on the same table.
  ```sql
  CREATE VIEW select_view AS 
  (SELECT * FROM t_order WHERE order_id > 2900) 
  UNION 
  (SELECT * FROM t_order WHERE order_id > 2500 ORDER BY order_id) 
  ORDER BY 1, 2;
  -- Query the view
  SELECT * FROM select_view;
  -- Drop the view
  DROP VIEW select_view;
  ```

- **Step 1.5**: Create a view using `UNION` on multiple sharded tables.
  ```sql
  CREATE VIEW select_view AS 
  SELECT o.order_id, o.user_id FROM t_order o WHERE o.order_id > 2500 
  UNION 
  SELECT i.order_id, i.user_id FROM t_order_item i WHERE i.order_id > 2500 
  ORDER BY order_id LIMIT 5, 5;
  -- Query the view
  SELECT * FROM select_view;
  -- Drop the view
  DROP VIEW select_view;
  ```

- **Step 1.6**: Create a view using `UNION ALL` on a sharded table and a single table.
  ```sql
  CREATE VIEW select_view AS 
  SELECT o.user_id FROM t_order o WHERE o.order_id > 2500 
  UNION ALL 
  SELECT u.user_id FROM t_user u ORDER BY user_id LIMIT 5, 5;
  -- Query the view
  SELECT * FROM select_view;
  -- Drop the view
  DROP VIEW select_view;
  ```

#### Step 2: Intersect Operations
- **Step 2.1**: Create a view using `INTERSECT ALL` on the same table.
  ```sql
  CREATE VIEW select_view AS 
  SELECT * FROM t_order INTERSECT ALL 
  SELECT * FROM t_order ORDER BY order_id LIMIT 5, 5;
  -- Query the view
  SELECT * FROM select_view;
  -- Drop the view
  DROP VIEW select_view;
  ```

- **Step 2.2**: Create a view using `INTERSECT` on the same table.
  ```sql
  CREATE VIEW select_view AS 
  SELECT * FROM t_order WHERE order_id > 2000 
  INTERSECT 
  SELECT * FROM t_order WHERE order_id > 1500 ORDER BY order_id;
  -- Query the view
  SELECT * FROM select_view;
  -- Drop the view
  DROP VIEW select_view;
  ```

- **Step 2.3**: Create a view using `INTERSECT ALL` on multiple sharded tables.
  ```sql
  CREATE VIEW select_view AS 
  SELECT o.order_id, o.user_id FROM t_order o WHERE o.order_id > 2500 
  INTERSECT ALL 
  SELECT i.order_id, i.user_id FROM t_order_item i WHERE i.order_id > 2400 ORDER BY order_id;
  -- Query the view
  SELECT * FROM select_view;
  -- Drop the view
  DROP VIEW select_view;
  ```

- **Step 2.4**: Create a view using `INTERSECT` on multiple sharded tables.
  ```sql
  CREATE VIEW select_view AS 
  SELECT o.order_id, o.user_id FROM t_order o WHERE o.order_id > 2500 
  INTERSECT 
  SELECT i.order_id, i.user_id FROM t_order_item i WHERE i.order_id > 2400 ORDER BY order_id;
  -- Query the view
  SELECT * FROM select_view;
  -- Drop the view
  DROP VIEW select_view;
  ```

- **Step 2.5**: Create a view using multiple `INTERSECT` operations on multiple sharded tables.
  ```sql
  CREATE VIEW select_view AS 
  SELECT o.order_id, o.user_id FROM t_order o WHERE o.order_id > 2500 
  INTERSECT 
  SELECT i.order_id, i.user_id FROM t_order_item i WHERE i.order_id > 2400 
  INTERSECT 
  SELECT i.order_id, i.user_id FROM t_order_item i WHERE i.order_id > 2500 
  INTERSECT 
  SELECT u.user_id FROM t_user u ORDER BY user_id;
  -- Query the view
  SELECT * FROM select_view;
  -- Drop the view
  DROP VIEW select_view;
  ```

#### Step 3: Except Operations
- **Step 3.1**: Create a view using `EXCEPT ALL` on the same table.
  ```sql
  CREATE VIEW select_view AS 
  SELECT * FROM t_order EXCEPT ALL 
  SELECT * FROM t_order WHERE order_id > 1500 ORDER BY order_id;
  -- Query the view
  SELECT * FROM select_view;
  -- Drop the view
  DROP VIEW select_view;
  ```

- **Step 3.2**: Create a view using `EXCEPT` on the same table.
  ```sql
  CREATE VIEW select_view AS 
  SELECT * FROM t_order WHERE order_id > 1500 
  EXCEPT 
  SELECT * FROM t_order WHERE order_id > 2000 ORDER BY order_id;
  -- Query the view
  SELECT * FROM select_view;
  -- Drop the view
  DROP VIEW select_view;
  ```

- **Step 3.3**: Create a view using `EXCEPT ALL` on multiple sharded tables.
  ```sql
  CREATE VIEW select_view AS 
  SELECT o.order_id, o.user_id FROM t_order o WHERE o.order_id > 2500 
  EXCEPT ALL 
  SELECT i.order_id, i.user_id FROM t_order_item i WHERE i.order_id > 2000 ORDER BY order_id;
  -- Query the view
  SELECT * FROM select_view;
  -- Drop the view
  DROP VIEW select_view;
  ```

- **Step 3.4**: Create a view using `EXCEPT` on multiple sharded tables.
  ```sql
  CREATE VIEW select_view AS 
  SELECT o.order_id, o.user_id FROM t_order o WHERE o.order_id > 2600 
  EXCEPT 
  SELECT i.order_id, i.user_id FROM t_order_item i WHERE i.order_id > 2500 ORDER BY order_id;
  -- Query the view
  SELECT * FROM select_view;
  -- Drop the view
  DROP VIEW select_view;
  ```

- **Step 3.5**: Create a view using `EXCEPT ALL` on a sharded table and a single table.
  ```sql
  CREATE VIEW select_view AS 
  SELECT o.user_id FROM t_order o WHERE o.order_id > 2500 
  EXCEPT ALL 
  SELECT u.user_id FROM t_user u ORDER BY user_id;
  -- Query the view
  SELECT * FROM select_view;
  -- Drop the view
  DROP VIEW select_view;
  ```

- **Step 3.6**: Create a view using `EXCEPT` on a sharded table and a single table.
  ```sql
  CREATE VIEW select_view AS 
  SELECT o.user_id FROM t_order o WHERE o.order_id > 1500 
  EXCEPT 
  SELECT u.user_id FROM t_user u WHERE user_id > 5 ORDER BY user_id;
  -- Query the view
  SELECT * FROM select_view;
  -- Drop the view
  DROP VIEW select_view;
  ```

#### Step 4: Minus Operations
- **Step 4.1**: Create a view using `MINUS ALL` on the same table.
  ```sql
  CREATE VIEW select_view AS 
  SELECT * FROM t_order WHERE order_id > 1500 
  MINUS ALL 
  SELECT * FROM t_order WHERE order_id > 1600 ORDER BY order_id;
  -- Query the view
  SELECT * FROM select_view;
  -- Drop the view
  DROP VIEW select_view;
  ```

- **Step 4.2**: Create a view using `MINUS` on the same table.
  ```sql
  CREATE VIEW select_view AS 
  SELECT * FROM t_order WHERE order_id > 2000 
  MINUS 
  SELECT * FROM t_order WHERE order_id > 1500 ORDER BY order_id;
  -- Query the view
  SELECT * FROM select_view;
  -- Drop the view
  DROP VIEW select_view;
  ```

- **Step 4.3**: Create a view using `MINUS ALL` on multiple sharded tables.
  ```sql
  CREATE VIEW select_view AS 
  SELECT o.order_id, o.user_id FROM t_order o WHERE o.order_id > 1500 
  MINUS ALL 
  SELECT i.order_id, i.user_id FROM t_order_item i WHERE i.order_id > 1500 ORDER BY order_id;
  -- Query the view
  SELECT * FROM select_view;
  -- Drop the view
  DROP VIEW select_view;
  ```

- **Step 4.4**: Create a view using `MINUS` on multiple sharded tables.
  ```sql
  CREATE VIEW select_view AS 
  SELECT o.order_id, o.user_id FROM t_order o WHERE o.order_id > 1500 
  MINUS 
  SELECT i.order_id, i.user_id FROM t_order_item i WHERE i.order_id > 1500 ORDER BY order_id;
  -- Query the view
  SELECT * FROM select_view;
  -- Drop the view
  DROP VIEW select_view;
  ```

- **Step 4.5**: Create a view using `MINUS ALL` on a sharded table and a single table.
  ```sql
  CREATE VIEW select_view AS 
  SELECT o.user_id FROM t_order o WHERE o.order_id > 2500 
  MINUS ALL 
  SELECT u.user_id FROM t_user u WHERE u.user_id < 29 ORDER BY user_id;
  -- Query the view
  SELECT * FROM select_view;
  -- Drop the view
  DROP VIEW select_view;
  ```

- **Step 4.6**: Create a view using `MINUS` on a sharded table and a single table.
  ```sql
  CREATE VIEW select_view AS 
  SELECT o.user_id FROM t_order o WHERE o.order_id > 2500 
  MINUS 
  SELECT u.user_id FROM t_user u WHERE u.user_id < 29 ORDER BY user_id;
  -- Query the view
  SELECT * FROM select_view;
  -- Drop the view
  DROP VIEW select_view;
  ```

By following these steps, you should be able to reproduce the issue where view information in ZooKeeper contains duplicate names even after the views are dropped.