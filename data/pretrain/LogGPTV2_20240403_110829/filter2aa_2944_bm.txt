d. The @RolesAllowed annotation determines which roles can all the method.
7
b, c, d, and g. Subject, Resource, Action, and Environment.
8
f. The Policy Administration Point is used to define and manage policies.
Summary
 Users can be collected into groups on an organizational level to make them eas-
ier to administer. LDAP has built-in support for managing user groups.
 RBAC collects related sets of permissions on objects into roles which can then
be assigned to users or groups and later revoked. Role assignments may be
either static or dynamic.
 Roles are often specific to an API, while groups are more often defined stati-
cally for a whole organization.
 ABAC evaluates access control decisions dynamically based on attributes of the
subject, the resource they are accessing, the action they are attempting to per-
form, and the environment or context in which the request occurs (such as the
time or location).
 ABAC access control decisions can be centralized using a policy engine. The
XACML standard defines a common model for ABAC architecture, with sepa-
rate components for policy decisions (PDP), policy information (PIP), policy
administration (PAP), and policy enforcement (PEP).
294
Capability-based security
and macaroons
In chapter 8, you implemented identity-based access controls that represent the
mainstream approach to access control in modern API design. Sometimes identity-
based access controls can come into conflict with other principles of secure API
design. For example, if a Natter user wishes to share a message that they wrote with
a wider audience, they would like to just copy a link to it. But this won’t work unless
the users they are sharing the link with are also members of the Natter social space
it was posted to, because they won’t be granted access. The only way to grant those
users access to that message is to either make them members of the space, which
violates the principle of least authority (because they now have access to all the
messages in that space), or else to copy and paste the whole message into a differ-
ent system. 
This chapter covers
 Sharing individual resources via capability URLs
 Avoiding confused deputy attacks against identity-
based access control
 Integrating capabilities with a RESTful API design
 Hardening capabilities with macaroons and 
contextual caveats
295
Capability-based security
 People naturally share resources and delegate access to others to achieve their
goals, so an API security solution should make this simple and secure; otherwise, your
users will find insecure ways to do it anyway. In this chapter, you’ll implement capability-
based access control techniques that enable secure sharing by taking the principle of
least authority (POLA) to its logical conclusion and allowing fine-grained control over
access to individual resources. Along the way, you’ll see how capabilities prevent a gen-
eral category of attacks against APIs known as confused deputy attacks.
DEFINITION
A confused deputy attack occurs when a component of a system with
elevated privileges can be tricked by an attacker into carrying out actions that
the attacker themselves would not be allowed to perform. The CSRF attacks
of chapter 4 are classic examples of confused deputy attacks, where the web
browser is tricked into carrying out the attacker’s requests using the victim’s
session cookie.
9.1
Capability-based security
A capability is an unforgeable reference to an object or resource together with a set
of permissions to access that resource. To illustrate how capability-based security dif-
fers from identity-based security, consider the following two ways to copy a file on
UNIX1 systems:
cp a.txt b.txt
cat b.txt
The first, using the cp command, takes as input the name of the file to copy and the
name of the file to copy it to. The second, using the cat command, instead takes as
input two file descriptors: one opened for reading and the other opened for writing. It
then simply reads the data from the first file descriptor and writes it to the second.
DEFINITION
A file descriptor is an abstract handle that represents an open file
along with a set of permissions on that file. File descriptors are a type of
capability.
If you think about the permissions that each of these commands needs, the cp com-
mand needs to be able to open any file that you can name for both reading and writ-
ing. To allow this, UNIX runs the cp command with the same permissions as your own
user account, so it can do anything you can do, including deleting all your files and
emailing your private photos to a stranger. This violates POLA because the command
is given far more permissions than it needs. The cat command, on the other hand,
just needs to read from its input and write to its output. It doesn’t need any permis-
sions at all (but of course UNIX gives it all your permissions anyway). A file descriptor
is an example of a capability, because it combines a reference to some resource along
with a set of permissions to act on that resource. 
1 This example is taken from “Paradigm Regained: Abstraction Mechanisms for Access Control.” See http://
mng.bz/Mog7.
296
CHAPTER 9
Capability-based security and macaroons
 Compared with the more dominant identity-based access control techniques dis-
cussed in chapter 8, capabilities have several differences:
 Access to resources is via unforgeable references to those objects that also grant
authority to access that resource. In an identity-based system, anybody can
attempt to access a resource, but they might be denied access depending on
who they are. In a capability-based system, it is impossible to send a request to a
resource if you do not have a capability to access it. For example, it is impossible
to write to a file descriptor that your process doesn’t have. You’ll see in section
9.2 how this is implemented for REST APIs.
 Capabilities provide fine-grained access to individual resources, and often sup-
port POLA more naturally than identity-based systems. It is much easier to dele-
gate a small part of your authority to somebody else by giving them some
capabilities without giving them access to your whole account.
 The ability to easily share capabilities can make it harder to determine who
has access to which resources via your API. In practice this is often true for
identity-based systems too, as people share access in other ways (such as by
sharing passwords).
 Some capability-based systems do not support revoking capabilities after they
have been granted. When revocation is supported, revoking a widely shared
capability may deny access to more people than was intended.
One of the reasons why capability-based security is less widely used than identity-based
security is due to the widespread belief that capabilities are hard to control due to easy
sharing and the apparent difficulty of revocation. In fact, these problems are solved by
real-world capability systems as discussed in the paper Capability Myths Demolished
by Mark S. Miller, Ka-Ping Yee, and Jonathan Shapiro (http://srl.cs.jhu.edu/pubs/
SRL2003-02.pdf). To take one example, it is often assumed that capabilities can be
used only for discretionary access control, because the creator of an object (such as a
file) can share capabilities to access that file with anyone. But in a pure capability system,
communications between people are also controlled by capabilities (as is the ability to
create files in the first place), so if Alice creates a new file, she can share a capability
to access this file with Bob only if she has a capability allowing her to communicate
with Bob. Of course, there’s nothing to stop Bob asking Alice in person to perform
actions on the file, but that is a problem that no access control system can prevent.
A brief history of capabilities
Capability-based security was first developed in the context of operating systems
such as KeyKOS in the 1970s and has been applied to programming languages and
network protocols since then. The IBM System/38, which was the predecessor of the
successful AS/400 (now IBM i), used capabilities for managing access to objects. In
the 1990s, the E programming language (http://erights.org) combined capability-based
security with object-oriented (OO) programming to create object-capability-based security 
297
Capabilities and REST
9.2
Capabilities and REST
The examples so far have been based on operating system security, but capability-
based security can also be applied to REST APIs available over HTTP. For example,
suppose you’ve developed a Natter iOS app that allows the user to select a profile pic-
ture, and you want to allow users to upload a photo from their Dropbox account.
Dropbox supports OAuth2 for third-party apps, but the access allowed by OAuth2
scopes is relatively broad; typically, a user can grant access only to all their files or else
create an app-specific folder separate from the rest of their files. This can work well
when the application needs regular access to lots of your files, but in this case your
app needs only temporary access to download a single file chosen by the user. It vio-
lates POLA to grant permanent read-only access to your entire Dropbox just to upload
one photo. Although OAuth scopes are great for restricting permissions granted to
third-party apps, they tend to be static and applicable to all users. Even if you had a
scope for each individual file, the app would have to already know which file it needed
access to at the point of making the authorization request.2
 To support this use case, Dropbox developed the Chooser and Saver APIs (see https://
www.dropbox.com/developers/chooser and https://www.dropbox.com/developers/
saver), which allow an app developer to ask the user for one-off access to specific files
in their Dropbox. Rather than starting an OAuth flow, the app developer instead calls
an SDK function that will display a Dropbox-provided file selection UI as shown in fig-
ure 9.1. Because this UI is implemented as a separate browser window running on
dropbox.com and not as part of the third-party app, it can show all the user’s files.
When the user selects a file, Dropbox returns a capability to the application that
allows it to access just the file that the user selected for a short period of time (4 hours
currently for the Chooser API).
(or ocaps), where capabilities are just normal object references in a memory-safe OO
programming language. Object-capability-based security fits well with conventional
wisdom regarding good OO design and design patterns, because both emphasize
eliminating global variables and avoiding static methods that perform side effects. 
E also included a secure protocol for making method calls across a network using
capabilities. This protocol has been adopted and updated by the Cap’n Proto (https://
capnproto.org/rpc.html#security) framework, which provides a very efficient binary
protocol for implementing APIs based on remote procedure calls. Capabilities are
also now making an appearance on popular websites and REST APIs.
2 There are proposals to make OAuth work better for these kinds of transactional one-off operations, such as
https:/ /oauth.xyz, but these largely still require the app to know what resource it wants to access before it
begins the flow.
298
CHAPTER 9
Capability-based security and macaroons
The Chooser and Saver APIs provide a number of advantages over a normal OAuth2
flow for this simple file sharing use case:
 The app author doesn’t have to decide ahead of time what resource it needs to
access. Instead, they just tell Dropbox that they need a file to open or to save
data to and Dropbox lets the user decide which file to use. The app never gets
to see a list of the user’s other files at all.
 Because the app is not requesting long-term access to the user’s account, there
is no need for a consent page to ensure the user knows what access they are
granted. Selecting a file in the UI implicitly indicates consent and because the
scope is so fine-grained, the risks of abuse are much lower.
 The UI is implemented by Dropbox and so is consistent for every app and web
page that uses the API. Little details like the “Recent” menu item work consis-
tently across all apps.
For these use cases, capabilities provide a very intuitive and natural user experience
that is also significantly more secure than the alternatives. It’s often assumed that
there is a natural trade-off between security and usability: the more secure a system is,
the harder it must be to use. Capabilities seem to defy this conventional wisdom,
because moving to a more fine-grained management of permissions allows more con-
venient patterns of interaction. The user chooses the files they want to work with, and
Figure 9.1
The Dropbox Chooser UI allows a user to select individual files to share 
with an application. The app is given time-limited read-only access to just the files 
the user selects.
299
Capabilities and REST
the system grants the app access to just those files, without needing a complicated con-
sent process.
DEFINITION
When the permission to perform an action is automatically
granted to all requests that originate from a given environment this is known
as ambient authority. Examples of ambient authority include session cookies
and allowing access based on the IP address a request comes from. Ambient
authority increases the risks of confused deputy attacks and should be
avoided whenever possible.
9.2.1
Capabilities as URIs
File descriptors rely on special regions of memory that can be altered only by privi-
leged code in the operating system kernel to ensure that processes can’t tamper or
create fake file descriptors. Capability-secure programming languages are also able to
prevent tampering by controlling the runtime in which code runs. For a REST API,
this isn’t an option because you can’t control the execution of remote clients, so
another technique needs to be used to ensure that capabilities cannot be forged or tam-
pered with. You have already seen several techniques for creating unforgeable tokens in
chapters 4, 5, and 6, using unguessable large random strings or using cryptographic
Confused deputies and ambient authority
Many common vulnerabilities in APIs and other software are variations on what is
known as a confused deputy attack, such as the CSRF attacks discussed in chapter
4, but many kinds of injection attack and XSS are also caused by the same issue.
The problem occurs when a process is authorized to act with your authority (as your
“deputy”), but an attacker can trick that process to carry out malicious actions. The
original confused deputy (http://cap-lore.com/CapTheory/ConfusedDeputy.html) was
a compiler running on a shared computer. Users could submit jobs to the compiler
and provide the name of an output file to store the result to. The compiler would also
keep a record of each job for billing purposes. Somebody realized that they could pro-
vide the name of the billing file as the output file and the compiler would happily over-
write it, losing all records of who had done what. The compiler had permissions to
write to any file and this could be abused to overwrite a file that the user themselves
could not access.
In CSRF, the deputy is your browser that has been given a session cookie after you
logged in. When you make requests to the API from JavaScript, the browser automat-
ically adds the cookie to authenticate the requests. The problem is that if a malicious
website makes requests to your API, then the browser will also attach the cookie to
those requests, unless you take additional steps to prevent that (such as the anti-
CSRF measures in chapter 4). Session cookies are an example of ambient authority:
the cookie forms part of the environment in which a web page runs and is transpar-
ently added to requests. Capability-based security aims to remove all sources of
ambient authority and instead require that each request is specifically authorized
according to POLA.
300
CHAPTER 9
Capability-based security and macaroons
techniques to authenticate the tokens. You can reuse these token formats to create
capability tokens, but there are several important differences:
 Token-based authentication conveys the identity of a user, from which their per-
missions can be looked up. A capability instead directly conveys some permis-
sions and does not identify a user at all.
 Authentication tokens are designed to be used to access many resources under
one API, so are not tied to any one resource. Capabilities are instead directly
coupled to a resource and can be used to access only that resource. You use dif-
ferent capabilities to access different resources.
 A token will typically be short-lived because it conveys wide-ranging access to a
user’s account. A capability, on the other hand, can live longer because it has a
much narrower scope for abuse.
REST already has a standard format for identifying resources, the URI, so this is the
natural representation of a capability for a REST API. A capability represented as a
URI is known as a capability URI. Capability URIs are widespread on the web, in the
form of links sent in password reset emails, GitHub Gists, and document sharing as in
the Dropbox example.
DEFINITION
A capability URI (or capability URL) is a URI that both identifies
a resource and conveys a set of permissions to access that resource. Typi-
cally, a capability URI encodes an unguessable token into some part of the
URI structure.
To create a capability URI, you can combine a normal URI with a security token.
There are several ways that you can do this, as shown in figure 9.2.
https://api.example.com/resource?tok=abCd9..
https://api.example.com/resource#tok=abCd9..
https://api.example.com/resource/abCd9..
https://PI:EMAIL/resource
The token can be encoded into the resource path . . .
. . . or into the query
parameters or fragment.
You can also encode the token
into the userinfo component.
Figure 9.2
There are many ways to encode a security token into a URI. You can 
encode it into the resource path, or you can provide it using a query parameter. More 
sophisticated representations encode the token into the fragment or userinfo 
elements of the URI, but these require some client-side parsing.
301
Capabilities and REST
A commonly used approach is to encode a random token into the path component
of the URI, which is what the Dropbox Chooser API does, returning URIs like the
following:
https://dl.dropboxusercontent.com/1/view/8ygmwuqzf1l6x7c/ 
➥ book/graphics/CH08_FIG8.2_RBAC.png
In the Dropbox case, the random token is encoded into a prefix of the actual file
path. Although this is a natural representation, it means that the same resource may
be represented by URIs with completely different paths depending on the token, so a
client that receives access to the same resource through different capability URIs may
not be able to tell that they actually refer to the same resource. An alternative is to
pass the token as a query parameter, in which case the Dropbox URI would look like
the following:
https://dl.dropboxusercontent.com/1/view/ 
➥ book/graphics/CH08_FIG8.2_RBAC.png?token=8ygmwuqzf1l6x7c
There is a standard form for such URIs when the token is an OAuth2 token defined
by RFC 6750 (https://tools.ietf.org/html/rfc6750#section-2.3) using the parameter
name access_token. This is often the simplest approach to implement because it
requires no changes to existing resources, but it shares some security weaknesses with
the path-based approach:
 Both URI paths and query parameters are frequently logged by web servers and
proxies, which can make the capability available to anybody who has access to
the logs. Using TLS will prevent proxies from seeing the URI, but a request may
still pass through several servers unencrypted in a typical deployment.
 The full URI may be visible to third parties through the HTTP Referer header
or the window.referrer variable exposed to content running in an HTML
iframe. You can use the Referrer-Policy header and rel=”noreferrer”
attribute on links in your UI to prevent this leakage. See http://mng.bz/1g0g
for details.
 URIs used in web browsers may be accessible to other users by looking at your
browser history.
To harden capability URIs against these threats, you can encode the token into the
fragment component or the URI or even the userinfo part that was originally designed
for storing HTTP Basic credentials in a URI. Neither the fragment nor the userinfo
component of a URI are sent to a web server by default, and they are both stripped
from URIs communicated in Referer headers.
302
CHAPTER 9
Capability-based security and macaroons
CAPABILITY URIS FOR REST APIS
The drawbacks of capability URIs just mentioned apply when they are used as a means
of navigating a website. When capability URIs are used in a REST API many of these
issues don’t apply:
 The Referer header and window.referrer variables are populated by brows-
ers when a user directly navigates from one web page to another, or when one
page is embedded into another in an iframe. Neither of these apply to the typ-
ical JSON responses from an API because these are not directly rendered
as pages.
 Similarly, because users don’t typically navigate directly to API endpoints, these
URIs will not end up in the browser history.
 API URIs are also unlikely to be bookmarked or otherwise saved for a long
period of time. Typically, a client knows a few permanent URIs as entry points to
an API and then navigates to other URIs as it accesses resources. These resource
URIs can use short-lived tokens to mitigate against tokens being leaked in access
logs. This idea is explored further in section 9.2.3.
In the remainder of the chapter, you’ll use capability URIs with the token encoded
into the query parameter because this is simple to implement. To mitigate any threat
from tokens leaking in log files, you’ll use short-lived tokens and apply further protec-
tions in section 9.2.4.
Credentials in URIs: A lesson from history
The desire to share access to private resources simply by sharing a URI is not new.
For a long time, browsers supported encoding a username and password into a HTTP
URL in the form http:/ /alice:PI:EMAIL/resource. When such a link was
clicked, the browser would send the username and password using HTTP Basic
authentication (see chapter 3). Though convenient, this is widely considered to be a
security disaster. For a start, sharing a username and password provides full access
to your account to anybody who sees the URI. Secondly, attackers soon realized that
this could be used to create convincing phishing links such as http:/ /www.google
.com:PI:EMAIL/login.html. An unsuspecting user would see the google
.com domain at the start of the link and assume it was genuine, when in fact this is
just a username and they will really be sent to a fake login page on the attacker’s
site. To prevent these attacks, browser vendors have stopped supporting this URI
syntax and most now aggressively remove login information when displaying or follow-
ing such links. Although capability URIs are significantly more secure than directly
sharing a password, you should still be aware of any potential for misuse if you dis-
play URIs to users.
303
Capabilities and REST
9.2.2
Using capability URIs in the Natter API
To add capability URIs to Natter, you first need to implement the code to create a
capability URI. To do this, you can reuse an existing TokenStore implementation to
create the token component, encoding the resource path and permissions into the
token attributes as shown in listing 9.1. Because capabilities are not tied to an individ-
ual user account, you should leave the username field of the token blank. The token
can then be encoded into the URI as a query parameter, using the standard access
_token field from RFC 6750. You can use the java.net.URI class to construct the
capability URI, passing in the path and query parameters. Some of the capability URIs
you’ll create will be long-lived, but others will be short-lived to mitigate against tokens
being stolen. To support this, allow the caller to specify how long the capability should
live for by adding an expiry Duration argument that is used to set the expiry time of
the token.
 Open the Natter API project3 and navigate to src/main/java/com/manning/
apisecurityinaction/controller and create a new file named CapabilityController.java
with the content of listing 9.1 and save the file.
Pop quiz
1
Which of the following are good places to encode a token into a capability URI?
a
The fragment
b
The hostname
c
The scheme name 
d