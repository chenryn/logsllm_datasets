DCD 0x40106666  
; DATA XREF: f+C 
; 3.14 in IEEE 754 form: 
dword_36C  
DCD 0x51EB851F  
; DATA XREF: f+1A 
dword_370  
DCD 0x40091EB8  
; DATA XREF: f+1C 
Keil 生成的 Thumb 模式程序不支持 NEON 运算和 FPU 浮点运算。Thumb 模式程序使用两个通用的 R
字头寄存器传递双精度浮点型数据。因为不再使用 FPU 的专用指令，所以这类程序必须调用库函数（例如
__aeabi_dmul, __aeabi_ddiv, __aeabi_dadd）“仿真”浮点运算。“仿真”意义上的模拟运算，其速度当然比
不上 FPU 处理器的速度，但是聊胜于无。 
在早年协作处理器还属于昂贵的奢侈品的时候，x86 平台的浮点仿真运算的库函数曾经盛行一时。 
在 ARM 系统里，FPU 仿真处理叫作“软浮点/soft float”或者“armel”，而通过硬件实现的 FPU 指令
叫作“硬浮点/hard float”或“armhf”。 
17.5.4 ARM64: Optimizing GCC (Linaro) 4.9 
这种程序十分短。 
指令清单 17.4  Optimizing GCC (Linaro) 4.9 
f: 
; D0 = a, D1 = b 
  ldr    
d2, .LC25       ; 3.14 
; D2 = 3.14 
  fdiv  
d0, d0, d2 
; D0 = D0/D2 = a/3.14 
  ldr      d2, .LC26       ; 4.1 
; D2 = 4.1 
  fmadd    d0, d1, d2, d0 
; D0 = D1*D2+D0 = b*4.1+a/3.14 
  ret 
; constants in IEEE 754 format: 
.LC25: 
  .word    1374389535      ; 3.14 
  .word    1074339512 
.LC26: 
  .word    1717986918      ; 4.1 
  .word    1074816614 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 17 章  FPU 
195 
17.5.5 ARM64: Non-optimizing GCC (Linaro) 4.9 
指令清单 17.5  Non-optimizing GCC (Linaro) 4.9 
f: 
  sub     sp, sp, #16 
  str     d0, [sp,8]  
; save "a" in Register Save Area 
  str     d1, [sp] 
; save "b" in Register Save Area 
  ldr     x1, [sp,8] 
; X1 = a 
  ldr     x0, .LC25 
; X0 = 3.14 
  fmov    d0, x1 
  fmov    d1, x0 
; D0 = a, D1 = 3.14 
  fdiv    d0, d0, d1 
; D0 = D0/D1 = a/3.14 
  fmov    x1, d0 
; X1 = a/3.14 
  ldr     x2, [sp] 
; X2 = b 
  ldr     x0, .LC26 
; X0 = 4.1 
  fmov    d0, x2 
; D0 = b 
  fmov    d1, x0 
; D1 = 4.1 
  fmul    d0, d0, d1 
; D0 = D0*D1 = b*4.1 
  fmov    x0, d0 
; X0 = D0 = b*4.1 
  fmov    d0, x1 
; D0 = a/3.14 
  fmov    d1, x0 
; D1 = X0 = b*4.1 
  fadd    d0, d0, d1 
; D0 = D0+D1 = a/3.14 + b*4.1 
  fmov    x0,d0   ;\ redundant code 
  fmov    d0,x0   ;/  
  add     sp, sp, 16  
  ret 
.LC25: 
  .word   1374389535  ; 3.14 
  .word   1074339512 
.LC26: 
  .word   1717986918  ; 4.1 
  .word   1074816614 
在没有启用优化功能的情况下，GCC 生成的代码比较拖沓。在上述程序中，不仅出现了没有意义的数
值交换指令，而且还出现了明显多余的指令（例如最后两条 FMOV 指令）。这可能是 GCC 4.9 在编译 ARM64
程序方面尚有不足。 
值得注意的是，ARM64 本身就具备 64 位寄存器，而 D 字头寄存器同样是 64 位寄存器。所以编译器
可以调动通用寄存器 GPR 直接存储双精度浮点数，而不必非得使用本地栈来存储这种数据。毫无疑问，在
32 位 CPU 上，编译器无法使用这种寄存器分配方案。 
建议读者用这个程序进行练习，在不使用 FMADD 之类的新指令的情况下，手动优化上述函数。 
17.5.6 MIPS 
MIPS 平台支持多个（4 个及以下）协作处理器。第 0 个协作处理器专门用于调度其他的协作处理器，
第 1 个协作处理器就是 FPU。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
196 
逆向工程权威指南（上册） 
与 ARM 平台的情形相似，MIPS 的协作处理器不是堆栈机（stack machine），只是 32 个 32 位寄存器
（$F0～$F31）。有关 FPU 各寄存器的介绍，请参见附录 C.1.2 节。在处理 64 位双精度浮点数时，必须使用
一对 32 位 F 字头寄存器。 
指令清单 17.6  Optimizing GCC 4.4.5 (IDA) 
f: 
; $f12-$f13=A 
; $f14-$f15=B 
lui     $v0, (dword_C4 >> 16) 
; ? 
; load low 32-bit part of 3.14 constant to $f0: 
lwc1    $f0, dword_BC 
or      $at, $zero 
; load delay slot, NOP 
; load high 32-bit part of 3.14 constant to $f1: 
lwc1    $f1, $LC0 
lui     $v0, ($LC1 >> 16)  
; ? 
; A in $f12-$f13, 3.14 constant in $f0-$f1, do division: 
div.d   $f0, $f12, $f0 
; $f0-$f1=A/3.14 
; load low 32-bit part of 4.1 to $f2: 
lwc1    $f2, dword_C4 
or      $at, $zero 
; load delay slot, NOP 
; load high 32-bit part of 4.1 to $f3: 
lwc1    $f3, $LC1 
or      $at, $zero 
; load delay slot, NOP 
; B in $f14-$f15, 4.1 constant in $f2-$f3, do multiplication: 
mul.d   $f2, $f14, $f2 
; $f2-$f3=B*4.1 
jr      $ra 
; sum 64-bit parts and leave result in $f0-$f1: 
add.d   $f0, $f2  
  ; branch delay slot, NOP 
.rodata.cst8:000000B8 $LC0: 
  .word 0x40091EB8 
# DATA XREF: f+C 
.rodata.cst8:000000BC dword_BC:  
  .word 0x51EB851F 
# DATA XREF: f+4 
.rodata.cst8:000000C0 $LC1: 
  .word 0x40106666   
# DATA XREF: f+10 
.rodata.cst8:000000C4 dword_C4:  
  .word 0x66666666 
# DATA XREF: f 
需要介绍的指令有： 
 LWC1 把一个 32 位 Word 数据传递给第一个协作处理器(Load Word to Coprocessor 1)。可见，指令
中的 1 指代协作处理器的编号。成对出现的 LWC1 指令可能会被调试程序显示为伪指令 LD。 
 DIV.D、MUL.D、ADD.D 指令是双精度浮点数的除法、乘法和加法运算指令。其后缀“.D”表明数据
类型是 double/双精度浮点。顾名思义，后缀为“.S”的指令则是 single/单精度浮点数据的运算指令。 
文中用问号“？”标出的 LUI 指令应当没有实际意义，可能是编译器生成的异常指令。如果有读者知
道其中奥秘，请发 email 给我。 
17.6  利用参数传递浮点型数据 
本节围绕下述程序进行演示： 
#include  
#include  
int main ()  
{ 
  printf ("32.01 ^ 1.54 = %lf\n", pow (32.01,1.54)); 
  return 0; 
}  
17.6.1 x86 
使用 MSVC 2010 编译上述程序，可得到如下所示的指令。 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
第 17 章  FPU 
197 
指令清单 17.7  MSVC 2010 
CONST    SEGMENT 
__real@40400147ae147ae1 DQ 040400147ae147ae1r    ; 32.01 
__real@3ff8a3d70a3d70a4 DQ 03ff8a3d70a3d70a4r    ; 1.54 
CONST    ENDS 
_main    PROC 
    push   ebp 
    mov    ebp, esp 
    sub    esp, 8  ; 为第 1 个变量分配空间 
    fld    QWORD PTR __real@3ff8a3d70a3d70a4 
    fstp   QWORD PTR [esp] 
    sub    esp, 8  ; 为第 2 个变量分配空间 
    fld    QWORD PTR __real@40400147ae147ae1 
    fstp   QWORD PTR [esp] 
    call   _pow 
    add    esp, 8  ;单个变量的返回地址 
; 栈分配了 8 个字节的空间 
; 运算结果存储于 ST(0)寄存器 
    fstp   QWORD PTR [esp] ;把 ST(0)的值转移到栈，供 printf()调用 
    push   OFFSET $SG2651 
    call   _printf 
    add    esp, 12 
    xor    eax, eax 
    pop    ebp 
    ret    0 
_main    ENDP 
FLD 和 FSTP 指令是在数据段（SEGMENT）和 FPU 的栈间交换数据的指令。FLD 把内存里的数据推
送入 FPU 的栈，而 FSTP 则把 FPU 栈顶的数据复制到内存中。pow()函数是指数运算函数，它从 FPU 的栈
内读取两个参数进行计算，并把运算结果（x 的 y 次幂）存储在 ST(0)寄存器里。之后，printf()函数先从内
存栈中读取 8 个字节的数据，再以双精度浮点的形式进行输出。 
此外，这个例子里还可以直接成对使用 MOV 指令把浮点数据从内存复制到 FPU 的栈里。内存本身就
把浮点数据存储为 IEEE 754 的数据格式，而 pow()函数所需的参数就是这个格式的数据，所以此处没有格
式转换的必要。下一节的例子就会用到这个技巧。 
17.6.2 ARM + Non-optimizing Xcode 4.6.3 (LLVM) (Thumb-2 mode) 
_main 
var_C         
= -0xC 
PUSH  
{R7,LR} 
MOV  
R7, SP 
SUB  
SP, SP, #4 
VLDR  
D16, =32.01 
VMOV  
R0, R1, D16 
VLDR  
D16, =1.54 
VMOV  
R2, R3, D16 
BLX  
_pow 
VMOV  
D16, R0, R1 
MOV  
R0, 0xFC1 ; "32.01 ^ 1.54 = %lf\n" 
ADD  
R0, PC 
VMOV  
R1, R2, D16 
BLX     
_printf 
MOVS  
R1, 0 
STR  
R0, [SP,#0xC+var_C] 
MOV  
R0, R1 
异步社区会员 dearfuture(15918834820) 专享 尊重版权
198 
逆向工程权威指南（上册） 
ADD  
SP, SP, #4 
POP  
{R7,PC} 
dbl_2F90         DCFD 32.01        ; DATA XREF: _main+6 
dbl_2F98         DCFD 1.54         ; DATA XREF: _main+E 
前文介绍过，ARM 系统可以在不借助 D 字头寄存器的情况下，通过一对 R 字头寄存器传递 64 位浮点
数。但是由于我们没有启用编译器的优化选项，所以它还是用 D 字头寄存器传递浮点数。 
从中可以看出，R0 和 R1 寄存器给_pow 函数传递了第一个参数，R2 和 R3 寄存器给函数传递了第二
个参数。函数把计算结果存储在 R0 和 R1 寄存器对。而后_pow 的运算结果再通过 D16 寄存器传递给 R1
和 R2 寄存器，以此向 printf()函数传递参数。 
17.6.3 ARM + Non-optimizing Keil 6/2013 (ARM mode) 
_main 
STMFD  
SP!, {R4-R6,LR} 
LDR   
R2, =0xA3D70A4   
;y 
LDR   
R3, =0x3FF8A3D7 
LDR   
R0, =0xAE147AE1  
;x 
LDR   
R1, =0x40400147 
BL   
pow 
MOV   
R4, R0 
MOV   
R2, R4 
MOV   
R3, R1 
ADR   
R0, a32_011_54Lf  
; "32.01 ^ 1.54 = %lf\n"  
BL   
__2printf 
MOV   
R0, #0 
LDMFD  
SP!, {R4-R6,PC} 
y 
DCD 0xA3D70A4 
; DATA XREF: _main+4 
dword_520 DCD 0x3FF8A3D7  
; DATA XREF: _main+8 
; double x 
x 
DCD 0xAE147AE1  
; DATA XREF: _main+C 
dword_528 DCD 0x40400147  
; DATA XREF: _main+10 
a32_011_54Lf DCB "32.01 ^ 1.54 = %lf",0xA,0 
; DATA XREF: _main+24 
在没有启用优化功能时，编译器只使用了 R-字头寄存器对，没有使用 D-字头寄存器。 
17.6.4 ARM64 + Optimizing GCC (Linaro) 4.9 
指令清单 17.8  Optimizing GCC (Linaro) 4.9 
f: 
  stp  
x29, x30, [sp, -16]! 
  add  
x29, sp, 0 
  ldr  
d1, .LC1 ; load 1.54 into D1 
  ldr  
d0, .LC0 ; load 32.01 into D0 
  bl  
pow 
; result of pow() in D0 
  adrp 
x0, .LC2 
  add  
x0, x0, :lo12:.LC2 
  bl  
printf 
  mov  