### False Negatives (FN)

We observed that almost half of the false negatives, i.e., 405, occurred because the vulnerability resided in dynamically loaded code. For 78 and 7 false negatives, the points-to analysis for DOM queries was not accurate, as the state of the DOM tree and environment variables were necessary for such analysis, respectively. The remaining 350 false negatives stemmed from the fact that the JavaScript program used `setTimeout` and `eval` to generate and execute code at runtime.

### 5.6.2 HPG Construction

JAW-static generated a total of 498,054,077 nodes and 639,323,601 edges for the 4,836 HPGs. This is 10,756,335 nodes (-2.11%) and 13,338,972 edges (-2.04%) fewer than JAW, which includes false negatives. Out of the total missing edges, 1,048,172 are ERDDG edges, which are critical for modeling events, and the remaining 12,290,800 edges are AST, CFG, PDG, and IPCG edges. Additionally, JAW-static misses 16,710 edge properties (set on ERDDG registration edges) that mark whether an event handler has been triggered at runtime, which static analysis does not capture.

In further experiments based on our methodology (§5.1), we logged the fired events that JAW cannot map to their line of code. Across 4,836 HPGs, JAW observed 51,974 events at runtime, of which 34,808 were already marked by static analysis and fired dynamically. The remaining 17,166 events trigger at runtime but are not captured by pure static analysis. Of these 17,166 events, JAW fails to find the corresponding event handlers for 456 events (0.88%), indicating false negative nodes and edges in the HPG. Manual analysis revealed that the majority of cases (387 events) involve the use of `eval` and `setTimeout` functions with dynamically constructed strings to fire events. The remaining 69 events are not mapped due to dynamic loading of code in ways that JAW does not monitor (e.g., loading code from inside iframes).

Finally, we assess the false positive (FP) and false negative (FN) edges introduced by the usage of DOM tree snapshots during points-to analysis of DOM queries. In total, JAW encountered 241,428 DOM query selectors in 4,836 HPGs, of which 127 selectors (0.05%) were imprecisely resolved. To determine the ERDDG dispatch edges, JAW compares the pointers for 87,340 pairs of DOM query selectors. Our evaluation suggests that JAW accurately decides whether to connect or not connect a dispatch edge between the dispatch and registration sites in 87,212 cases (decision accuracy of 99.85%), with 56,923 true positives and 30,289 true negatives. In the remaining 128 cases, JAW's decision to create or not create an edge is inaccurate, resulting in 94 FN and 34 FP edges (decision inaccuracy of 0.15%). Interestingly, we observed that such FP and FN edges may occur for query selectors interpreted within 53.7 milliseconds of page load (on average), with a maximum of 92.5 milliseconds, which is up to ten times lower than the average access time of all query selectors, i.e., 559.2 milliseconds. In this experiment, we used runtime program instrumentation to obtain the ground truth for assessing JAW’s accuracy in HPG construction. However, such techniques come with performance overhead and are poorly suitable for large HPGs (e.g., in model construction and vulnerability detection). We believe the impact of JAW’s FP and FN edges due to DOM snapshots is negligible.

### 6. Discussion

#### Properties of Client-side Forgeable Requests

In this paper, we showed that 82% of web applications have at least one web page with a client-side forgeable request that can be exploited to mount CSRF attacks, suggesting that forgeable requests are prevalent. We also demonstrated that client-side CSRF can be used to mount other attacks, such as XSS and SQLi, which cannot be mounted via traditional attack vectors. The analysis of forgeable requests suggests that some client-side CSRF templates are more prevalent than others; for example, in 28.7% of vulnerable applications, the attacker can overwrite a parameter in the request body.

#### Interesting Properties of Vulnerable Applications

We found that 39 out of 106 targets in our testbed are single-page applications (SPAs), i.e., 36.7%. Manually examining the 87 vulnerable targets, we observed that 44.8% of them are SPAs. Additionally, we found exploits in 17.9% of the tested SPAs (§5.5). This suggests that client-side CSRF instances are more prevalent among SPA applications.

#### Transfer of Control and Runtime Monitoring

Our evaluation shows that dynamic information increases the transfer of control path by 0.26%. Despite its negligibility, our evaluation indicates that dynamic information is fundamental for identifying the forgeable requests in 14 out of 87 vulnerable applications and three out of seven exploitable applications, resulting in an increase of +19.1% and +75%, respectively.

#### Vulnerability Originates from the Same Code

Manual analysis of the 515 forgeable HTTP requests reveals that each vulnerability originates from different copies of the same code used across various pages. The templates for vulnerabilities range from one to four per application, with the majority (78.1%) having only a single template. These facts suggest that developers tend to repeat the same mistakes across different pages.

#### False Positives

Using state values together with traditional static analysis helps remove spurious execution traces (§5.6). Nevertheless, extensive manual verification uncovered that 1 out of 516 requests was a false positive due to inaccurate pointer analysis of the `this` statement in dynamically called functions (see §5.3). We observed that such a request uses data values originating from the DOM tree, meaning that 1 out of 83 requests in the DOM-READ forgeable request category may be a false positive. We plan to address this shortcoming by incorporating call-sensitive resolution of the `this` keyword into JAW in the future.

#### Limitations

The vulnerabilities found in this paper are those captured by our model and traversals. However, it could happen that a forgeable request in the program is not found because the construction of the model is bound by the soundness properties offered by the individual static analysis tools we use for constructing the property graph, e.g., CFG, PDG, etc. Accurately building these models by static analysis is challenging due to the streaming nature of JavaScript programs [43] and JavaScript's dynamic code generation capabilities. We point out that, similar to prior work (e.g., see [46]), JAW extracts the code executed by dynamic constructs, i.e., `eval`, `setTimeout`, and `new Function()`, as long as the string parameter can be reconstructed statically. As future work, we plan to replace our extension with a modified JavaScript engine (e.g., VisibleV8 [54]) to provide better support for reflection and such dynamic constructs, and to minimize the potential side effects of function hooking, especially with respect to event handlers. Furthermore, the vulnerabilities discovered in this paper affect those pages that JAW reached with our crawler. However, crawling is a challenging task (see, e.g., [40, 70]), and JAW may have missed pages with vulnerable code. To increase coverage, we plan to provide support for the smooth integration of other crawlers.

#### Incremental Static Analysis

JAW can reduce the effort required to analyze client-side JavaScript programs by 60% via pre-built symbolic models. When looking at the unique application code, we observe that a large fraction of code is shared between pages. For example, the 4,836 pages contain a total of 104,720 application scripts, of which only 4,559 are unique, suggesting that the shared code of different web pages can be modeled once and reused through incremental program analysis, a problem we plan to address in the future.

#### Vulnerability Disclosure

At the time of writing this paper, we are in the process of notifying the affected vendors about our discovery, following the best practices of vulnerability notification (see [85]).

### 7. Related Work

#### Request Forgery Vulnerabilities

Request forgery is a widely exploited web vulnerability (see, e.g., [23, 25, 26, 27, 32, 51, 88]) that can be divided into two families: SSRF [68] and CSRF [37, 69]. Research in this area has largely focused on request forgery defenses (e.g., [34, 39, 52, 53, 56, 63, 73, 74]), with very few proposing detection techniques that can help the security testing community uncover CSRF exploits (i.e., [37, 69, 77, 86]). Only a fraction of these works, notably Deemon [69] and Mitch [37], went beyond manual inspection by presenting (semi-)automated approaches. In contrast, this paper proposes JAW, a framework to study client-side CSRF vulnerabilities at a large scale based on HPGs and declarative graph traversals.

#### Property Graphs and Vulnerability Detection

Graph-based analysis of source code has a long history and has been considered by several researchers (e.g., [33, 41, 57, 71, 91]). Yamaguchi et al. [91] proposed the notion of CPGs for finding software bugs in C/C++ applications (i.e., a non-web-based execution environment). Backes et al. [33] later extended this idea to detect vulnerabilities in the server-side of PHP web applications. In contrast to these works, our approach adapts the concept of CPGs to the client-side of web applications and extends them with dynamic information, i.e., state values (§3.2). Existing CPGs are poorly suited for large-scale analyses, which is a needed feature to analyze web applications (a web application can have hundreds of pages to analyze, each with thousands of lines of JavaScript code). Backes et al. [33] needed up to 5 days and 7 hours for a single query when analyzing 77M LoC. In comparison, JAW took 3 days (sequential execution) to model and query 228M LoC. This improvement is largely due to the introduction of the new notion of symbolic models for shared third-party code (§5.2). We believe that these contributions are key enablers for using graph-based analyses on web applications at scale.

#### Security Analysis of JavaScript Programs

Over the past years, we have seen different techniques for analyzing JavaScript programs (e.g., [38, 42, 44, 46, 61, 62, 67, 82, 83]). To date, these approaches have been mostly applied to XSS [60, 64, 75, 84] and validation flaws [66, 76, 79, 89, 92]. Most notably, Lekies et al. [60] modified the JavaScript engine in Chromium to enhance it with taint-tracking capabilities and used a crawler that leverages the modified Chromium to detect DOM-based XSS vulnerabilities. Saxena et al. proposed Kudzu [75], a tool that performs dynamic taint-tracking to identify sources and sinks in the current execution using a GUI explorer and then generates XSS exploits by applying symbolic analysis to the detected source-sink data flows. In general, these techniques could be useful for detecting client-side CSRF provided their crawler/GUI-explorer can trigger the executions connecting sources to sinks. However, crawlers/GUI-explorers often fall short of visiting modern web UIs, providing low code coverage compared to static analysis techniques. In contrast to approaches like [60, 75], JAW follows a hybrid approach, addressing shortcomings of JavaScript static analysis such as dynamic loading of script tags and points-to analysis for DOM elements.

### 8. Conclusion

In this paper, we presented JAW, to the best of our knowledge, the first framework for the detection and analysis of client-side CSRF vulnerabilities. At the core of JAW is the new concept of HPG, a canonical, static-dynamic model for client-side JavaScript programs. Our evaluation of JAW uncovered 12,701 forgeable client-side requests affecting 87 web applications. For 203 of them, we created a working exploit against seven applications that can be used to compromise database integrity. We analyzed the forgeable requests and identified 25 different request templates. This work has successfully demonstrated the capabilities of our paradigm for detecting client-side CSRF. In the near future, we intend to use our approach toward additional vulnerability classes.

### Acknowledgments

We would like to thank our shepherd Stefano Calzavara and the anonymous reviewers for their valuable feedback.

### References

[1] Ast-Flow-Graph library. https://www.npmjs.com/package/ast-flow-graph.
[2] Bitnami application catalog. https://bitnami.com/stacks.
[3] Cypher query language. https://neo4j.com/developer/cypher-query-language/.
[4] Dujs library. https://github.com/chengfulin/dujs.
[5] Escontrol library. https://www.npmjs.com/package/escontrol.
[6] Esgraph CFG generator. https://github.com/Swatinem/esgraph.
[7] Esprima. https://esprima.org/.
[8] Function.prototype.apply(). https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply.
[9] Function.prototype.call(). https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call.
[10] Headless chromium. https://chromium.googlesource.com/chromium/src/+/lkgr/headless/README.md.
[11] JavaScript language resources. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Language_Resources.
[12] JQuery library. https://jquery.com/.
[13] Library Detector for chrome. https://www.npmjs.com/package/js-library-detector.
[14] Neo4j graph database. https://neo4j.com.
[15] Selenium browser automation. https://www.selenium.dev.
[16] Selenium IDE. https://www.selenium.dev/projects/ide.
[17] Selenium-python. https://selenium-python.readthedocs.io/index.html.
[18] Styx library. https://www.npmjs.com/package/styx.
[19] Usage statistics of content management systems. https://w3techs.com/technologies/overview/content_management.
[20] window.name API. https://developer.mozilla.org/en-US/docs/Web/API/Window/name.
[21] window.open() API. https://developer.mozilla.org/en-US/docs/Web/API/Window/open.
[22] YUI library. https://yuilibrary.com/.
[23] CSRF: Adding optional two-factor mobile number in Slack, 2016. https://hackerone.com/reports/155774.
[24] Client-side CSRF, 2018. https://www.facebook.com/notes/facebook-bug-bounty/client-side-csrf/2056804174333798/.
[25] Two-factor authentication cross-site request forgery (CSRF) vulnerability in WordPress. CVE-2018-20231, 2018. https://www.privacy-wise.com/two-factor-authentication-cross-site-request-forgery-csrf-vulnerability-cve-2018-20231/.
[26] Account takeover in US Dept of Defense, 2019. https://hackerone.com/reports/410099.
[27] Critical CSRF vulnerability on Facebook, 2019. https://www.acunetix.com/blog/web-security-zone/critical-csrf-vulnerability-facebook/.
[28] Intent to implement and ship: cookies with SameSite by default, 2019. https://groups.google.com/a/chromium.org/forum/#!msg/blink-dev/AknSSyQTGYs/SSB1rTEkBgAJ.
[29] Intent to implement: Cookie SameSite=lax by default and SameSite=none only if secure, 2019. https://groups.google.com/forum/#!msg/mozilla.dev.platform/nx2uP0CzA9k/BNVPWDHsAQAJ.
[30] SameSite cookie attribute, Chromium, Blink, 2020. https://www.chromestatus.com/feature/4672634709082112.
[31] Usage statistics of JavaScript libraries for websites, 2020. https://w3techs.com/technologies/overview/javascript_library.
[32] S. Abdelhaﬁz. SSRF leaking internal Google Cloud data through upload function, 2019. https://hackerone.com/reports/549882.
[33] M. Backes, K. Rieck, M. Skoruppa, B. Stock, and F. Yamaguchi. Efficient and Flexible Discovery of PHP Application Vulnerabilities. In Proceedings of the 2nd IEEE Euro S&P, 2017.
[34] A. Barth, C. Jackson, and J. C. Mitchell. Robust defenses for cross-site request forgery. In CCS, 2008.
[35] A. Barth, J. Weinberger, and D. Song. Cross-Origin JavaScript Capability Leaks: Detection, Exploitation, and Defense. In USENIX Security, 2009.
[36] S. Calzavara, M. Bugliesi, S. Crafa, and E. Stefﬁnlongo. Fine-Grained Detection of Privilege Escalation Attacks on Browser Extensions. In ESOP, 2015.
[37] S. Calzavara, M. Conti, R. Focardi, A. Rabitti, and G. Tolomei. Mitch: A machine learning approach to the black-box detection of CSRF vulnerabilities. In Proceedings of the IEEE Euro S&P, 2019.
[38] S. Chandra, C. S. Gordon, J. Jeannin, C. Schlesinger, M. Sridharan, F. Tip, and Y. Choi. Type Inference for Static Compilation of JavaScript. In ACM SIGPLAN.