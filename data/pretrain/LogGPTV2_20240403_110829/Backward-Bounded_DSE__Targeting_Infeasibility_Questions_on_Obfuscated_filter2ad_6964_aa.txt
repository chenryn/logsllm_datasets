# Title: Backward-Bounded DSE: Addressing Infeasibility in Obfuscated Code

## Authors:
- Sébastien Bardin, CEA, LIST, Gif-Sur-Yvette, France
- Robin David, CEA, LIST, Gif-Sur-Yvette, France
- Jean-Yves Marion, Université de Lorraine, CNRS and Inria, LORIA, France

## Conference:
2017 IEEE Symposium on Security and Privacy

## Abstract:
Software deobfuscation is essential for security analysis, particularly in malware analysis. While traditional static and dynamic methods have limitations, Dynamic Symbolic Execution (DSE) has emerged as a robust alternative. However, DSE primarily addresses feasibility questions, leaving infeasibility questions, such as detecting opaque predicates, unaddressed. We introduce Backward-Bounded DSE, a precise, efficient, and robust method for solving infeasibility questions. This technique has been successfully applied to state-of-the-art packers and government-grade X-Tunnel malware, enabling complete deobfuscation. Additionally, we propose sparse disassembly, a combination of Backward-Bounded DSE and static disassembly, which enhances dynamic disassembly in a guaranteed manner. This work paves the way for robust, efficient, and precise disassembly tools for heavily-obfuscated binaries.

## 1. Introduction

### Context
Obfuscation is a common practice used to protect program functionalities or properties. Although its primary purpose is intellectual property protection, it is often used for malicious activities. Deobfuscation, especially at the binary level, is crucial for reverse-engineering and malware analysis. The first step in deobfuscation is to recover the most accurate control-flow graph (CFG) of the program, which is challenging even for non-obfuscated code due to low-level constructs like indirect jumps and code-data interleaving. For obfuscated code, this task becomes even more difficult.

### Standard Disassembly Approaches
Disassembly methods are typically divided into static and dynamic approaches. Static disassemblers like IDA and Objdump can cover the entire program but are easily misled by obfuscations such as code overlapping, opaque predicates, and call stack tampering. Dynamic analysis, while more robust, only covers a limited number of executions and may miss significant parts of the code. DSE, a formal approach to automatic testing, has been proposed as a more robust and comprehensive alternative for disassembly. However, DSE and dynamic analysis only address feasibility questions, not infeasibility ones.

### Problem
Infeasibility questions, such as verifying that certain events or settings cannot occur, are critical in reverse engineering. These questions are currently a blind spot for both standard and advanced disassembly methods. Dynamic analysis and DSE do not handle infeasibility because they only consider a finite number of paths. Semantic static analysis, while potentially capable of addressing infeasibility, is not yet scalable or robust enough.

### Goal and Challenges
Our goal is to develop an automated, precise, efficient, and robust method for solving infeasibility questions in heavily obfuscated programs. Achieving all these goals simultaneously is particularly challenging.

### Our Proposal
We present Backward-Bounded DSE (BB-DSE), a novel method for solving infeasibility questions. BB-DSE combines key features from formal software verification, such as deductive verification, bounded model checking, and DSE, to achieve precision, efficiency, and robustness.

### Contributions
- **Importance of Infeasibility**: We highlight the significance of infeasibility issues in reverse engineering and the need for automated solutions.
- **Backward-Bounded DSE Algorithm**: We introduce the BB-DSE algorithm, which is precise, efficient, and robust. It can address a wide range of deobfuscation-related questions, such as opaque predicates and call stack tampering.
- **Experimental Evaluation**: We conduct extensive experiments with open-source obfuscators and standard packers, demonstrating the precision and efficiency of our method.
- **Practical Applications**: We present two applications of BB-DSE: deobfuscating the government-grade X-Tunnel malware and proposing sparse disassembly, a combination of BB-DSE and static disassembly.

### Discussion
- **Broader Applicability**: BB-DSE can be useful in other obfuscation contexts, such as flattening and virtualization.
- **Alternative Combinations**: Sparse disassembly can be combined with more advanced static disassembly techniques.
- **Comparison with Forward DSE**: BB-DSE is tailored to infeasibility queries, unlike standard forward DSE.

### Impact
BB-DSE complements existing disassembly approaches by addressing infeasibility questions. This work paves the way for robust, precise, and efficient disassembly tools for obfuscated binaries through the careful combination of static, dynamic, and backward-forward approaches.

## 2. Background

### Obfuscation
Obfuscation techniques aim to hide the real behavior of a program. Some techniques, like virtualization and junk insertion, make instructions harder to understand, while others, such as code overlapping, self-modification, opaque predicates, and call stack tampering, directly hide legitimate instructions. We focus on opaque predicates and call stack tampering.

- **Opaque Predicates**: These always evaluate to the same value, leading the reverser to explore large portions of useless code. For example, the condition \(7y^2 - 1 \neq x^2\) is always false, making the conditional jump never taken.
- **Call Stack Tampering**: This breaks the assumption that a `ret` instruction returns to the instruction following the `call`, luring the reverser into exploring useless code and hiding the real target.

### Disassembly
Disassembly aims to recover executable instructions. Standard approaches include linear sweep, recursive disassembly, and dynamic disassembly.

- **Recursive Disassembly**: Recursively follows possible successors of each instruction but can miss many instructions and be fooled by obfuscations.
- **Linear Sweep**: Decodes all possible instructions linearly but can misinterpret many instructions and miss hidden ones.
- **Dynamic Disassembly**: Retrieves only executed instructions and branches, ensuring soundness but potentially missing significant parts of the code.

### Dynamic Symbolic Execution (DSE)
DSE is a formal technique for systematically exploring program paths. It computes symbolic path predicates and uses SMT solvers to find inputs that exercise specific paths. DSE is correct and robust but suffers from the path explosion problem, limiting its completeness.

## 3. Motivation

Consider the obfuscated pseudo-code in Figure 3, which contains an opaque predicate and a call stack tampering. Traditional methods struggle to handle such infeasibility questions, motivating the need for a new approach like Backward-Bounded DSE.