- https://newrelic.com/
- https://github.com/HXSecurity/DongTai
---
### SAST
`静态应用测试`
静态应用程序安全测试（Static Application Security Testing）技术通常在编码阶段分析应用程序的源代码或二进制文件的语法、结构、过程、接口等来发现程序代码存在的安全漏洞。
**相关资源**
- [analysis-tools-dev/static-analysis](https://github.com/analysis-tools-dev/static-analysis) - A curated list of static analysis (SAST) tools for all programming languages, config files, build tools, and more.
**相关工具**
- Fortify Sca
    - 规则解密
        - 相关文章
            - [fortify规则库解密之旅](https://gv7.me/articles/2019/fortify-rule-library-decryption-process/)
            - [fortify SCA内置规则破解到简单工具开发使用](https://blog.csdn.net/liweibin812/article/details/107242966)
        - 解密工具
            - [liweibin123/fortify](https://github.com/liweibin123/fortify)
- Checkmarx CxSAST
- Synopsys Static Analysis (Coverity)
- [ajinabraham/nodejsscan](https://github.com/ajinabraham/nodejsscan) - nodejsscan is a static security code scanner for Node.js applications.
- [ShiftLeftSecurity/sast-scan](https://github.com/ShiftLeftSecurity/sast-scan) - Scan is a free & Open Source DevSecOps tool for performing static analysis based security testing of your applications and its dependencies. CI and Git friendly.
更多 SAST 工具请参考 [语言安全](../语言安全/语言安全.md)
---
## 空间测绘
- [空间测绘笔记](./空间测绘.md)
---
## 网络
**相关文章**
- [内外网资产对应关系定位 [ 补 ]](https://mp.weixin.qq.com/s/zrJ2yP6B64A-iFnBdea9PQ)
- [基于service的远程主机os识别之抄个痛快](https://mp.weixin.qq.com/s/N0C9e17BgbzDBA4K48n6Kw)
- [使用 DNS-SD 和 SSDP 扫描内网主机](https://paper.seebug.org/1727/)
**TTL 来判断目的主机的操作系统类型**
下面是默认操作系统的 TTL:
```bash
1、WINDOWS NT/2000   TTL:128
2、WINDOWS 95/98     TTL:32
3、UNIX              TTL:255
4、LINUX             TTL:64
5、WIN7              TTL:64
```
**修改本机电脑上面的默认 TTL 值**
通过修改本机上的 TTL 值可以混淆攻击者的判断 (当然, 很少有用户会这么做).TTL 值在注册表的位置是: `HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters` 其中有个 DefaultTTL 的 DWORD 值, 其数据就是默认的 TTL 值了, 我们可以修改 DefaultTTL 里面的 TTL 默认值, 但不能大于十进制的 255.
**资产扫描工具**
- [JE2Se/AssetScan](https://github.com/JE2Se/AssetScan) - 资产探测工具，检测存活，检测风险端口，常规端口，全端口探测等等，对探测的端口的脆弱面进行安全分析进行 - 调用 masscan 端口扫 + 简易漏扫 + 报表生成
- [LangziFun/LangNetworkTopology3](https://github.com/LangziFun/LangNetworkTopology3) - IP/IP 段资产扫描 --> 扫描开放端口识别运行服务部署网站 --> 自动化整理扫描结果 --> 输出可视化报表 + 整理结果 - 本质还是调用 masscan + 生成报表 实际使用效果不佳
- [Router Scan](http://stascorp.com/load/1-1-0-56) - 路由器扫描软件, 但扫 C 段也很有用
- [dilap54/RouterScan-console](https://github.com/dilap54/RouterScan-console) - Router Scan 命令行版
- [TophantTechnology/ARL](https://github.com/TophantTechnology/ARL) -  ARL 资产侦察灯塔系统旨在快速侦察与目标关联的互联网资产，构建基础资产信息库。 协助甲方安全团队或者渗透测试人员有效侦察和检索资产，发现存在的薄弱点和攻击面。
    - [loecho-sec/ARL-Finger-ADD](https://github.com/loecho-sec/ARL-Finger-ADD) - 灯塔指纹添加脚本
- [er10yi/MagiCude](https://github.com/er10yi/MagiCude) - 分布式端口（漏洞）扫描、资产安全管理、实时威胁监控与通知、高效漏洞闭环、漏洞 wiki、邮件报告通知、poc 框架
- [shadow1ng/fscan](https://github.com/shadow1ng/fscan) - 支持主机存活探测、端口扫描、常见服务的爆破、ms17010、redis批量写私钥、计划任务反弹shell、读取win网卡信息、web漏洞扫描等。
---
### IP扫描
当设备连接网络，设备将被分配一个 IP 地址，用作标识。通过 IP 地址，设备间可以互相通讯，如果没有 IP 地址，我们将无法知道哪个设备是发送方，无法知道哪个是接收方。IP 地址有两个主要功能：标识设备或网络和寻址。
常见的 IP 位址分为 IPv4 与 IPv6 两大类，IP 地址由一串数字组成。IPv4 由十进制数字组成，并以点分隔，如：172.16.254.1 ；IPv6 由十六进制数字组成，以冒号分割，如：2001:db8:0:1234:0:567:8:1
**CIDR处理**
- [projectdiscovery/mapcidr](https://github.com/projectdiscovery/mapcidr) - Small utility program to perform multiple operations for a given subnet/CIDR ranges.
- [zhanhb/cidr-merger](https://github.com/zhanhb/cidr-merger) - A simple command line tool to merge ip/ip cidr/ip range, support IPv4/IPv6
- [ffffffff0x/iprange](https://github.com/ffffffff0x/iprange) - 计算 ip 范围,支持 cidr,ip-range 格式的输入
**ip信息查询**
- [zu1k/nali](https://github.com/zu1k/nali)
- [lionsoul2014/ip2region](https://github.com/lionsoul2014/ip2region) - 一个离线IP地址定位库和IP定位数据管理框架
#### ipv4
IPv4 地址是类似 `A.B.C.D` 的格式, 它是 32 位, 用 `.` 分成四段, 用 10 进制表示; 而 IPv6 地址类似 `X:X:X:X:X:X:X:X` 的格式, 它是 128 位的, 用 `:` 分成 8 段, 用 16 进制表示;
**本地单行命令探测**
```bash
# windows
for /l %i in (1,1,255) do @ ping 192.168.1.%i -w 1 -n 1 | find /i "ttl="
# windows
# 把前期在外网搜集到的目标子域列表整理好，拿到内网循环ping，然后把解析到的ip截下来
for /f "delims=" %i in (host.txt) do @ping -w 1 -n 1 %i | findstr /c:"[10." /c:"[192." /c:"[172." >> C:/users/public/out.txt
```
**探测工具**
- [alexxy/netdiscover: netdiscover](https://github.com/alexxy/netdiscover) - 内网中实测效果不好,不建议使用
- [nbtscan - NETBIOS nameserver scanner](http://unixwiz.net/tools/nbtscan.html) - 内网中实测效果不好
- nmap
    ```
    nmap -sP /24
    ```
- [shmilylty/netspy](https://github.com/shmilylty/netspy) - netspy是一款快速探测内网可达网段工具
    ```bash
    netspy -h                   # 查看帮助信息
    netspy icmpspy              # 使用icmpspy模块进行探测
    netspy arpspy -i eth0       # 指定使用eth0网络接口进行arp协议探测
    netspy tcpspy -p 22 -p 3389 # 使用tcpspy模块进行探测
    netspy udpspy -p 53 -p 137  # 使用udpspy模块进行探测
    ```
- fscan
#### ipv6
**相关文章**
- [Who’s Scanning the IPv6 Space? And, Frankly, Why Do We Even Care?](https://www.akamai.com/blog/security-research/vulnerability-scanning-IPv6-why-should-we-care)
#### asn
**相关工具**
- [projectdiscovery/asnmap](https://github.com/projectdiscovery/asnmap)
---
### MAC扫描
MAC 位址，以太网地址或物理地址，它是一个用来确认网络设备位置的位址。
MAC 地址的长度为 48 位 (6 个字节)，通常表示为 12 个 16 进制数，如：00-16-EA-AE-3C-40 就是一个 MAC 地址，其中前 6 位 16 进制数 00-16-EA 代表网络硬件制造商的编号，它由 IEEE(电气与电子工程师协会) 分配，而后 6 位 16 进制数 AE-3C-40 代表该制造商所制造的某个网络产品 (如网卡) 的系列号。只要不更改自己的 MAC 地址，MAC 地址在世界是惟一的。形象地说，MAC 地址就如同身份证上的身份证号码，具有唯一性.
**探测工具**
- [科来 MAC 地址扫描器](http://www.colasoft.com.cn/download/capsa_tool_cmac.php)
- arp-scan
    ```
    arp-scan -l
    ```
---
### 端口扫描
通过对目标地址的 TCP/UDP 端口扫描，确定其开放的服务数量和类型。通过端口扫描，可以基本确定一个系统的基本信息，并且结合测试人员的经验可以确定其可能存在，以及被利用的安全弱点，为进行深层次的渗透提供依据.
**相关文章**
- [Port Scanner Shootout](https://s0cm0nkey.gitbook.io/port-scanner-shootout/)
- [Nmap抓包分析与绕过Windows防火墙扫内网存活主机](https://mp.weixin.qq.com/s/bfmp3oDxqPf1pTjtyKaLSw)
- [征文投稿|安全能力基座Yakit，端口扫描又快又准！](https://mp.weixin.qq.com/s/ZO9hyPsE_ZzQF1C3Fezy7A)
**Tips**
1. 有时候扫描主机会碰到显示大量开放端口, 这种可能都是虚的, 是 waf 在起作用.
2. nmap 在有些场景下不一定能把所有开放端口扫出, 这时候换一个工具说不定有奇效.
**LOL**
```bash
# Linux scanning the 65535 ports
for port in {1..65535};do curl -s http://host:$port;done
for port in {1..65535};do wget -nv http://host:$port;done
# Linux scanning the 65535 ports with raw http request
for port in {1..65535}; do
    echo >/dev/tcp/host/$port &&
        echo "port $port is open" ||
        echo "port $port is closed"
done
# Linux scanning ports
curl http://host:[1-100] 1> 1.txt 2>/dev/null
curl http://host:[8000-9999] 1>> 1.txt 2>/dev/null
```
**端口安全**
- [端口安全](./端口安全.md) - 记录一些端口渗透时的方法和思路
**端口信息**
- [Service Name and Transport Protocol Port Number Registry](https://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.xhtml)
服务器端口的分类
- 公认端口/特权端口 : 0~1023，它们绑定特定的服务，端口的通信明确表明了某种服务的协议。例如：80端口是HTTP服务端口。
- 注册端口 : 1024~49151，它们松散地绑定一些服务，就是说有许多服务绑定于这些端口，这些端口同样用于许多其它的目的
- 动态/私有端口 : 49152~65535，这些端口一般不分配服务，有些较为特殊的程序，特别是木马程序非常喜欢使用这些端口，容易隐蔽。
当然,现实环境中什么端口都有可能承载正常的服务,就比如有人在 8 端口上承载网站
**扫描工具**
- nmap
    - [nmap 笔记](../../安全工具/Nmap.md)
- [masscan](https://github.com/robertdavidgraham/masscan)
    ```bash
    # 常用
    masscan 127.0.0.0/24 -p80,161,443,873,2181,3389,6379,7001,8000,8009,8080,9000,9009,9090,9200,9300,10000,50070 > results.txt
    # 远程登录
    masscan 127.0.0.0/24 -p22,23,3389,5632,5800,5900,5901 > results.txt
    # 文件服务
    masscan 127.0.0.0/24 -p20,21,445,873,2049 > results.txt
    # 数据库
    masscan 127.0.0.0/24 -p1433,1521,3306,4100,5000,5432,5984,6379,11211,27017,27018 > results.txt
    # 单端口扫描
    masscan 127.0.0.0/24 -p443
    # 多端口扫描 扫描 80 或 443 端口的 B 类子网
    masscan 127.0.0.0/24 -p80,443
    # 扫描一系列端口 扫描 22 到 25 端口的 B 类子网
    masscan 127.0.0.0/24 -p22-25
    # 快速扫描
    masscan 127.0.0.0/24 -p80,8000-9000 --rate 100000