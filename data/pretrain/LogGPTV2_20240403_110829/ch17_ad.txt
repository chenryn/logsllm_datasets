磁盘清洁程序
 清洁程序在每个存储节点上运行，并持续读取磁盘上的每个块，从应用程序级别校验和验证内容。虽然 S.M.A.R.T. 状态报告和内部磁盘校验和可能提供了可靠存储介质的错觉，但损坏通常会逃过这些检查，尤其是在数十万或数百万个磁盘的存储群集中。磁盘上的块会悄悄损坏或丢失，磁盘会失败且无法感知，并且 fsync 并不总是奏效。
磁盘清洁程序每天在 Dropbox 查找磁盘上的错误。这些错误触发一个自动机制，该机制可重新复制数据并修复磁盘故障。快速检测和从磁盘损坏中恢复对于实现持久性保证至关重要。回想一下，本章前面给出的 R(loss) 的持久性公式很大程度上依赖于故障的 MTTR。如果 MTTR 估计为 24 小时，但需要一个月才能注意到无故的磁盘损坏，则你的持久性目标将降低几个数量级。索引扫描程序
 索引扫描程序持续遍放顶级存储索引，查找要存储给定块的存储节点集，然后检查每个节点以确保该块存在。扫描程序在存储系统内提供端到端检查，以确保存储元数据与磁盘本身存储的块一致。索引扫描程序本身是一个相当大的系统，总共有数百个进程，每秒产生超过一百万次的检查。
存储监视程序
 构建验证器时，我们面临的一个挑战是，如果编写组件的同一工程师也实现了相应的验证器，他们最终可能会将其任何损坏的假设引入到验证器本身中。我们希望确保我们拥有真正的端到端黑盒覆盖测试，即使工程师误解了 API 接口。
存储监视程序是由一个没有参与构建存储系统本身的 SRE 编写的。它对写入系统的所有块的 1% 进行采样，并尝试在一分钟、一小时、一天、一周和一个月后从存储中取回它们。如果所有其他操作都失败，这个测试仍然能提供全栈验证覆盖率，并提醒我们在块生命周期后期可能出现的任何潜在问题。 
监视器的观察者监视器的观察者
 没有什么比一个无差错的图形更令人欣慰的，尤其是图片中牢牢锁定的水平线，但你怎么知道验证器其实仍在运行？这听起来可能很傻，但从不报告任何错误的验证系统看起来更像是一个根本不工作的验证系统。
在稳定状态下，前面提到的索引扫描程序实际上不会报告任何错误，因为没有任何错误要报告。在系统开发的早期，扫描程序实际上停止了工作，我们花了几天时间才注意到！显然，这是一个问题。未经测试的保护不能保护任何东西。
你应该将验证堆栈与灾难恢复培训结合使用，以确保快速检测到持久性问题、适当的警报触发以及故障转移机制为客户提供持续服务。在我们的生产群集中，这些测试涉及非破坏性更改，如关闭存储节点、数据库失败以及整个群集的流量黑洞。在我们的登台群集中，还涉及更具侵入性的测试，例如手动损坏磁盘上的块或强制从存储节点本身的备份状态恢复元数据。这些测试不仅表明核查系统正在工作，而且使维护人员能够熟练使用恢复机制。自动化
你没有时间照看孩子。
  SRE 可以从事的最高回报的活动之一是投资强大的自动化。但请务必不要自动化得太快：毕竟，在尝试解决问题之前，你需要首先了解问题。但是，几天或几周的自动化工作可以节省几个月的时间。然而，自动化不仅仅是一项效率计划，它还具有一种效率。它对正确性和耐久性有重要影响。
漏洞之窗
    如前所述，MTTR 对持久性有重大影响，因为它定义了后续故障可能导致灾难性事件的漏洞窗口。但是，设置告警阈值的严格程度以及维护人员可以立即响应的事件数是有限制的。需要自动化来实现足够低的响应时间。
 一个说明性示例是将传统的独立磁盘冗余阵列（RAID）阵列与分布式存储系统进行比较，该系统会在磁盘发生故障时自动将数据重新复制到其他节点。对于 RAID 阵列，操作员可能需要几天时间才能在现场出现并替换特定磁盘，而在自动化系统中，此数据可能在少数小时内重新复制。同样的比较也适用于主备份数据库复制：较小的公司通常会要求维护人员在主数据库发生故障时手动触发数据库升级，而在较大的基础结构占用空间中，使用自动工具来确保数据库故障对可用性和持久性的影响保持在最低水平。运维人员疲劳
   运维人员的疲劳是一个真正的问题，因为你的团队如果整天不停地处理故障，他们最终将全部退出。过度警报可能导致警报失效，维护人员最终会忽视真正的问题。我们观察到的情况是，有的人会把 Unix yes 命令的输出传送到命令行工具中，因为该工具询问数百次是否授权了各种维护操作，这就直接失去了询问的意义。
规则和培训只能进行到现在。良好的自动化最终是一个必要因素，使运维人员能够专注于高回报的工作和关键故障，而不是陷入容易出错的繁忙工作。
随着系统规模的扩大，伴随其扩展的操作过程也需要扩展。运行数千个节点的团队不可能在出现小硬件问题或配置问题时手动干预。Dropbox 中的核心系统的管理几乎完全由一个系统自动化，该系统支持插件，用于检测队列内的问题并安全地解决这些问题，并具有广泛的日志记录来分析持久性问题。具有自动修复警报功能的系统需要非常仔细地实施，因为它们能够意外破坏它们旨在保护的基础结构。Dropbox 的自动修复系统受本章前面讨论的相同隔离保护以及严格的速率限制的约束，以确保在运维人员可以干预和恢复之前不执行失控更改。对生产问题的任何趋势实施重大监控也很重要：此类系统很容易通过自动修复问题来隐藏问题，从而掩盖硬件或软件可靠性方面出现的任何负面趋势。
可靠性
 自动化的主要动机是简单的可靠性；因为不如 shell 脚本可靠。不能通过依赖人力的方式持续测试、审核和运行自动化系统。
Dropbox 中的关键自动化系统的一个示例是磁盘修复工作流，如#automatic_disk-remediation_process所示，该工作流旨在安全地管理磁盘故障，而无需人员干预。
自动磁盘修复过程自动磁盘修复过程
当检测到损坏的块或坏扇区等次要磁盘问题时，将从系统中的其他副本中恢复数据并在其他地方重新复制，然后允许存储节点继续运行。此类问题已足够常规，因此除非磁盘故障率开始随时间变化，否则无法证明采取进一步行动有任何的合理性。但是，在出现一定数量的错误后，系统确定磁盘或文件系统存在严重问题，恢复并重新复制磁盘上的数据，然后使用新的干净文件系统重新格式化磁盘。如果此周期多次重复，则磁盘被标记为错误，数据将恢复并重新复制，并为数据中心操作员提交工单以替换物理磁盘。由于数据会立即重新复制，因此物理磁盘的更换随时可能发生，并且通常不频繁大量发生。从机器中取出磁盘后，磁盘将保存一段时间，最后在现场进行物理粉碎。
整个过程是完全自动的，在磁盘从机器物理上拉出之前，无需人工干预。该过程还维护了不允许任何操作员触摸保存关键生产数据的磁盘的不变性。磁盘保留在系统中，直到它们持有的所有数据从其他副本中重建并在其他地方重新复制。投资开发这个自动化系统，可以无缝运行一个巨大的存储系统，只有少数工程师。结论
本章中提出了许多建议，并不是每个公司都需要进行地理分布复制或完成警报自动修复。要记住的重要一点是，麻烦的问题往往不是你期望的磁盘故障或数据库中断，而是没有人看到的黑天鹅事件。复制只是故事的一部分，需要与隔离、保护、恢复和自动化机制相结合。设计系统时，考虑到失败，意味着当下一个未知的无解事件有可能成为下一个不可预见的灾难时，你会在游戏中处于有利位置。   
编者介绍
James Cowling 是 Dropbox 的首席工程师，并担任该项目的技术主管，以构建和部署存储 Dropbox 文件数据的多字节地理分布式存储系统。James 还担任过文件系统和元元存储团队的团队领导。在加入该行业之前，James 在麻省理工学院获得博士学位，专攻大规模分布式交易处理和共识协议。