在处理函数中收到控制权后，系统会收集当前进程上下文并通过`ContextRecord`参数进行传递。使用VEH的反调试代码如下所示：
    LONG CALLBACK ExceptionHandler(PEXCEPTION_POINTERS ExceptionInfo)
    {
        PCONTEXT ctx = ExceptionInfo->ContextRecord;
        if (ctx->Dr0 != 0 || ctx->Dr1 != 0 || ctx->Dr2 != 0 || ctx->Dr3 != 0)
        {
            std::cout Eip += 2;
        return EXCEPTION_CONTINUE_EXECUTION;
    }
    int main()
    {
        AddVectoredExceptionHandler(0, ExceptionHandler);
        __asm int 1h;
        return 0;
    }
这里我们设置了一个VEH处理函数并生成中断（`int
1h`不是必需操作）。当产生中断时，会出现异常，控制权会转给VEH处理函数。如果设置了硬件断点，系统就会终止程序执行。如果没有硬件断点，`EIP`寄存器的值就会加2，以便在`int
1h`指令后继续执行。
**如何绕过**
来观察下涉及到VEH处理函数的调用栈：
    0:000> kn
     # ChildEBP RetAddr  
    00 001cf21c 774d6822 AntiDebug!ExceptionHandler 
    01 001cf26c 7753d151 ntdll!RtlpCallVectoredHandlers+0xba
    02 001cf304 775107ff ntdll!RtlDispatchException+0x72
    03 001cf304 00bf4a69 ntdll!KiUserExceptionDispatcher+0xf
    04 001cfc1c 00c2680e AntiDebug!main+0x59 
    05 001cfc30 00c2665a AntiDebug!invoke_main+0x1e 
    06 001cfc88 00c264ed AntiDebug!__scrt_common_main_seh+0x15a 
    07 001cfc90 00c26828 AntiDebug!__scrt_common_main+0xd 
    08 001cfc98 753e7c04 AntiDebug!mainCRTStartup+0x8 
    09 001cfcac 7752ad1f KERNEL32!BaseThreadInitThunk+0x24
    0a 001cfcf4 7752acea ntdll!__RtlUserThreadStart+0x2f
    0b 001cfd04 00000000 ntdll!_RtlUserThreadStart+0x1b
如上所示，控制权会从`main+0x59`转移到`ntdll!KiUserExceptionDispatcher`。来看下`main+0x59`中负责该操作的具体指令：
    0:000> u main+59 L1
    AntiDebug!main+0x59
    00bf4a69 cd02            int     1
生成中断的指令如上所示。`KiUserExceptionDispatcher`函数是系统从内核模式到用户模式的一个回调函数，函数原型如下所示：
    VOID NTAPI KiUserExceptionDispatcher(
        PEXCEPTION_RECORD pExcptRec, 
        PCONTEXT ContextFrame
    );
我们可以通过`KiUserExceptionDispatcher`函数hook来绕过硬件断点检测，如下所示：
    typedef  VOID (NTAPI *pfnKiUserExceptionDispatcher)(
        PEXCEPTION_RECORD pExcptRec,
        PCONTEXT ContextFrame
        );
    pfnKiUserExceptionDispatcher g_origKiUserExceptionDispatcher = NULL;
    VOID NTAPI HandleKiUserExceptionDispatcher(PEXCEPTION_RECORD pExcptRec, PCONTEXT ContextFrame)
    {
        if (ContextFrame && (CONTEXT_DEBUG_REGISTERS & ContextFrame->ContextFlags))
        {
            ContextFrame->Dr0 = 0;
            ContextFrame->Dr1 = 0;
            ContextFrame->Dr2 = 0;
            ContextFrame->Dr3 = 0;
            ContextFrame->Dr6 = 0;
            ContextFrame->Dr7 = 0;
            ContextFrame->ContextFlags &= ~CONTEXT_DEBUG_REGISTERS;
        }
    }
    __declspec(naked) VOID NTAPI HookKiUserExceptionDispatcher() 
    // Params: PEXCEPTION_RECORD pExcptRec, PCONTEXT ContextFrame
    {
        __asm
        {
            mov eax, [esp + 4]
            mov ecx, [esp]
            push eax
            push ecx
            call HandleKiUserExceptionDispatcher
            jmp g_origKiUserExceptionDispatcher
        }
    }
    int main()
    {
        HMODULE hNtDll = LoadLibrary(TEXT("ntdll.dll"));
        g_origKiUserExceptionDispatcher = (pfnKiUserExceptionDispatcher)GetProcAddress(hNtDll, "KiUserExceptionDispatcher");
        Mhook_SetHook((PVOID*)&g_origKiUserExceptionDispatcher, HookKiUserExceptionDispatcher);
        return 0;
    }
在上述代码中，DRx寄存器的值会在`HookKiUserExceptionDispatcher`函数中重置，也就是说，会在调用VEH处理函数前重置。
###  NtSetInformationThread：从调试器中隐藏线程
在Windows
2000中，出现了传递给`NtSetInformationThread`函数的一个新的线程信息类：`ThreadHideFromDebugger`。这是微软在研究如何防御逆向工程时在Windows中引入的第一个反调试技术，并且这种技术也非常强大。如果某个线程设置了该标志，那么该线程就会停止发送关于调试事件的通知。这些事件包括断点信息以及关于程序完成的通知信息。该标志的值存放于`_ETHREAD`结构的`HideFromDebugger`字段中。
    1: kd> dt _ETHREAD HideFromDebugger 86bfada8
    ntdll!_ETHREAD
       +0x248 HideFromDebugger : 0y1
设置`ThreadHideFromDebugger`的代码如下所示：
    typedef NTSTATUS (NTAPI *pfnNtSetInformationThread)(
        _In_ HANDLE ThreadHandle,
        _In_ ULONG  ThreadInformationClass,
        _In_ PVOID  ThreadInformation,
        _In_ ULONG  ThreadInformationLength
        );
    const ULONG ThreadHideFromDebugger = 0x11;
    void HideFromDebugger()
    {
        HMODULE hNtDll = LoadLibrary(TEXT("ntdll.dll"));
        pfnNtSetInformationThread NtSetInformationThread = (pfnNtSetInformationThread)
            GetProcAddress(hNtDll, "NtSetInformationThread");
        NTSTATUS status = NtSetInformationThread(GetCurrentThread(), 
            ThreadHideFromDebugger, NULL, 0);
    }
**如何绕过**
为了阻止应用程序向调试器隐藏线程信息，我们需要hook `NtSetInformationThread`函数调用。hook代码如下所示：
    pfnNtSetInformationThread g_origNtSetInformationThread = NULL;
    NTSTATUS NTAPI HookNtSetInformationThread(
        _In_ HANDLE ThreadHandle,
        _In_ ULONG  ThreadInformationClass,
        _In_ PVOID  ThreadInformation,
        _In_ ULONG  ThreadInformationLength
        )
    {
        if (ThreadInformationClass == ThreadHideFromDebugger && 
            ThreadInformation == 0 && ThreadInformationLength == 0)
        {
            return STATUS_SUCCESS;
        }
        return g_origNtSetInformationThread(ThreadHandle, 
            ThreadInformationClass, ThreadInformation, ThreadInformationLength
    }
    void SetHook()
    {
        HMODULE hNtDll = LoadLibrary(TEXT("ntdll.dll"));
        if (NULL != hNtDll)
        {
            g_origNtSetInformationThread = (pfnNtSetInformationThread)GetProcAddress(hNtDll, "NtSetInformationThread");
            if (NULL != g_origNtSetInformationThread)
            {
                Mhook_SetHook((PVOID*)&g_origNtSetInformationThread, HookNtSetInformationThread);
            }
        }
    }
在被hook的函数中，如果正确调用的话就会返回`STATUS_SUCCESS`，并且不会将控制权交给原始的`NtSetInformationThread`函数。
###  NtCreateThreadEx
Windows从Vista开始引入了`NtCreateThreadEx`函数，函数原型如下所示：
    NTSTATUS NTAPI NtCreateThreadEx (
        _Out_    PHANDLE              ThreadHandle,
        _In_     ACCESS_MASK          DesiredAccess,
        _In_opt_ POBJECT_ATTRIBUTES   ObjectAttributes,
        _In_     HANDLE               ProcessHandle,
        _In_     PVOID                StartRoutine,
        _In_opt_ PVOID                Argument,
        _In_     ULONG                CreateFlags,
        _In_opt_ ULONG_PTR            ZeroBits,
        _In_opt_ SIZE_T               StackSize,
        _In_opt_ SIZE_T               MaximumStackSize,
        _In_opt_ PVOID                AttributeList
    );
其中最有趣的参数是`CreateFlags`，该参数可以使用如下标志：
    #define THREAD_CREATE_FLAGS_CREATE_SUSPENDED 0x00000001
    #define THREAD_CREATE_FLAGS_SKIP_THREAD_ATTACH 0x00000002
    #define THREAD_CREATE_FLAGS_HIDE_FROM_DEBUGGER 0x00000004
    #define THREAD_CREATE_FLAGS_HAS_SECURITY_DESCRIPTOR 0x00000010
    #define THREAD_CREATE_FLAGS_ACCESS_CHECK_IN_TARGET 0x00000020
    #define THREAD_CREATE_FLAGS_INITIAL_THREAD 0x00000080
如果新线程设置了`THREAD_CREATE_FLAGS_HIDE_FROM_DEBUGGER`标志，那么在创建时就可以向调试器隐藏该线程信息，这与`NtSetInformationThread`函数设置的`ThreadHideFromDebugger`相同。负责安全任务的代码可以在设置`THREAD_CREATE_FLAGS_HIDE_FROM_DEBUGGER`标志的线程中执行。
**如何绕过**
我们可以hook
`NtCreateThreadEx`函数来绕过这种技术，在该函数中重置`THREAD_CREATE_FLAGS_HIDE_FROM_DEBUGGER`。
###  句柄跟踪
从Windows
XP开始，Windows系统就具备跟踪内核对象句柄的机制。当跟踪模式启动后，与句柄所有操作都会被保存到循环缓冲区中，并且当使用不存在的句柄时（比如使用`CloseHandle`函数关闭该句柄），那么就会出现`EXCEPTION_INVALID_HANDLE`异常。如果进程没有通过调试器启动，那么`CloseHandle`函数会返回`FALSE`。基于`CloseHandle`的反调试技术代码如下所示：
    EXCEPTION_DISPOSITION ExceptionRoutine(
        PEXCEPTION_RECORD ExceptionRecord,
        PVOID             EstablisherFrame,
        PCONTEXT          ContextRecord,
        PVOID             DispatcherContext)
    {
        if (EXCEPTION_INVALID_HANDLE == ExceptionRecord->ExceptionCode)
        {
            std::cout  这里大家可以拓展阅读“[How to Reverse Engineer Software (Windows) in a Right
> Way](https://www.apriorit.com/dev-blog/364-how-to-reverse-engineer-software-> windows-in-a-right-way)”这篇文章。
###  调试信息
从Windows
10开始，Windows修改了`OutputDebugString`函数的实现，改成带有特定参数的`RaiseException`调用。因此，现在调试输出异常必须由调试器来处理。
我们可以使用两种异常类型来检测是否存在调试器，分别为`DBG_PRINTEXCEPTION_C`（`0x40010006`）以及`DBG_PRINTEXCEPTION_W`（`0x4001000A`）。
    #define DBG_PRINTEXCEPTION_WIDE_C 0x4001000A
    WCHAR * outputString = L"Any text";
    ULONG_PTR args[4] = {0};
    args[0] = (ULONG_PTR)wcslen(outputString) + 1;
    args[1] = (ULONG_PTR)outputString;
    __try
    {
        RaiseException(DBG_PRINTEXCEPTION_WIDE_C, 0, 4, args);
        printf("Debugger detected");
    }
    __except (EXCEPTION_EXECUTE_HANDLER)
    {
        printf("Debugger NOT detected");
    }
因此，如果异常没有被处理，就意味着没有附加调试器。
`DBG_PRINTEXCEPTION_W`用于宽字符输出，`DBG_PRINTEXCEPTION_C`用于`ansi`字符。这意味着在使用`DBG_PRINTEXCEPTION_C`的情况下，`arg[0]`会保存`strlen()`的结果，而`args[1]`在指向`ansi`字符串（`char
*`）。
## 0x02 总结
本文描述了一系列反逆向工程技术，特别是反调试方法。我们从最简单的技术开始，也介绍了相应的绕过方法。本文并没有覆盖所有技术，还有一些技术大家可以自己进一步研究，比如：
  * 自调试进程
  * 使用`FindWindow`函数的调试器检测技术
  * 基于时间计算的检测技术（参考[这篇文章](https://www.apriorit.com/dev-blog/298-anti-debug-time-plugin)）
  * `NtQueryObject`
  * `BlockInput`
  * `NtSetDebugFilterState`
  * 自修改代码
虽然我们主要关注的是反调试保护方法，还有其他一些反逆向分析方法，包括反转储（anti-dumping）以及混淆技术。
这里我们要再次强调一下，即使最优秀的反逆向分析技术也无法完全避免软件被逆向分析。反调试技术的主要任务是使逆向分析人员操作起来更为复杂，尽可能提高反逆向分析的难度。
## 0x03 参考资料