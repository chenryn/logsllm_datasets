个集合和1个公式。
两个集合如下。
·OpenList:
可到达的格子
·CloseList:
已到达的格子
一个公式如下。
·F=G+H
每一个格子都具有F、G、H这3个属性，就像下图这样。
---
## Page 482
G
H
G：从起点走到当前格子的成本，也就是已经花费了多少步。
H：在不考虑障碍的情况下，从当前格子走到目标格子的距离，也就是
离目标还有多远。
F：G和H的综合评估，也就是从起点到达当前格子，再从当前格子到达
目标格子的总步数。
这些都是什么玩意儿？好复杂啊！
其实并不复杂，我们通过实际场景来
分析一下，你就明白了。
第1步，把起点放入OpenList，也就是刚才所说的可到达格子的集合。
---
## Page 483
OpenList:Grid(1,2)
CloseList:
m
第2步，找出OpenList中F值最小的方格作为当前方格。虽然我们没有直
接计算起点方格的F值，但此时OpenList中只有唯一的方格Grid(1,2)，把
当前格子移出OpenList，放入CloseList。代表这个格子已到达并检查过
了。
OpenList:
Closelist:Grid(1,2)
2
第3步，找出当前方格（刚刚检查过的格子）上、下、左、右所有可到
达的格子，看它们是否在OpenList或CloseList当中。如果不在，则将它
们加入OpenList，计算出相应的G、H、F值，并把当前格子作为它们
的“父节点”。
---
## Page 484
Openlist: Grid(1,1)Grid(0,2) Grid(2,2) Grid[1,3)
CloseList: Grid(1,2)
在上图中，每个格子的左下方数字是G，右下方是H，左上方是F。
我有一点不明白，“父节点”是什
么意思？为什么格子之间还有父子关系？
一个格子的"父节点"代表它的来路，
在输出最终路线时会用到。
---
## Page 485
刚才经历的几个步骤是一次局部寻路
的步骤。我们需要一次又一次重复刚才的第2步和第3步，直到找到
终点为止。
下面进入A星寻路的第2轮操作。
第1步，找出OpenList中F值最小的方格，即方格Grid(2,2)，将它作为当
前方格，并把当前方格移出OpenList，放入CloseList。代表这个格子已
到达并检查过了。
OpenList: Grid(1,1)Grid(0,2)Grid(1,3)
CloseList: Grid(1,2)
Grid(2,2)
第2步，找出当前方格上、下、左、右所有可到达的格子，看它们是否
在OpenList或CloseList当中。如果不在，则将它们加入OpenList，计算
出相应的G、H、F值，并把当前格子作为它们的“父节点”。
---
## Page 486
OpenList: Grid(1,1) Grid(0,2) Grid[1,3) Grid(2,1)  Grid(2,3)
CloseList: Grid(1,2) ^ Gird (2,2)
为什么这一次OpenList只增加了2个新格子呢？因为Grid(3，2）是墙壁，自
然不用考虑，而Grid(1,2)在CloseList中，说明已经检查过了，也不用考
虑。
下面我们进入第3轮寻路历程。
第1步，找出OpenList中F值最小的方格。由于此时有多个方格的F值相
等，任意选择一个即可，如将Grid(2,3)作为当前方格，并把当前方格移
出OpenList，放入CloseList。代表这个格子已到达并检查过了。
OpenList: Grid(1,1)Grid(0,2)Grid(1,3)Grid(2,1)
CloseList: Grid[1,2)  openList = new ArrayList();
17.
ArrayList closeList = new ArrayList();
18.
//把起点加入openList
19.
openList .add(start) ;
20.
//主循环，每一轮检查1个当前方格节点
21.
while (openList.size() > θ) {
22.
//在openList中查找F值最小的节点，将其作为当前方格节
点
23.
Grid currentGrid = findMinGird(openList);
24.
//将当前方格节点从openList中移除
25.
openList.remove(currentGrid);
26.
//当前方格节点进入closeList
27.
closeList.add(currentGrid);
28.
//找到所有邻近节点
---
## Page 492
29.
List neighbors = findNeighbors(currentGrid,
openList, closeList);
30.
for (Grid grid : neighbors){
31.
if (!openList.contains(grid)){
32.
//邻近节点不在openList中，标记"父节点”、G、H、F，并放
入openList
33.
grid.initGrid(currentGrid, end);
34.
openList.add(grid);
35.
36.
}
37.
//如果终点在openList中，直接返回终点格子
38.
for （Grid grid : openList){
39.
if ((grid.x == end.x) &&(grid.y == end.y)） {
40.
return grid;
41.
42.
43.
44.
//openList用尽，仍然找不到终点，说明终点不可到达，返回空
45.
return null;
46.}
47.
48. private static Grid findMinGird(ArrayList openList) {
49.
Grid tempGrid = openList.get(0);
50.
for (Grid grid : openList){
---
## Page 493
51.
if (grid.f  findNeighbors(Grid grid,
List openList, List closeList) {
59.
()>  = >
60.
if
(isValidGrid(grid.x,
grid.y-
1, openList, closeList)){
61.
gridList.add(new Grid(grid.x, grid.y - 1));
62.
63.
if (isValidGrid(grid.x, grid.y+1, openList, closeList))
64.
gridList.add(new Grid(grid.x, grid.y + 1));
65.
66.
if
(isValidGrid(grid.x-
1, grid.y, openList, closeList)) {
67.
gridList.add(new Grid(grid.x - 1, grid.y));
68.
69.
if (isValidGrid(grid.x+1, grid.y, openList, closeList))
70.
gridList.add(new Grid(grid.x + 1, grid.y));
71.
72.
return gridList;
---
## Page 494
73.}
74.
75. private static boolean isValidGrid(int x, int y, List
openList, List closeList) {
76.
//是否超过边界
77.
if (x = MAZE[o].
length）{
78.
return false;
79.
3
80.
//是否有障碍物
81.
if(MAZE[×][y]== 1){
82.
return false;
83.
84.
//是否已经在openList中
85.
if(containGrid(openList，x,y)){
86.
return false;
87.
88.
//是否已经在closeList中
89.
if(containGrid(closeList,x,y)){
90.
return false;
91.
92.
return true;
94.
---
## Page 495
95. private static boolean containGrid(List grids, int x,
96.
for (Grid n :grids){
97.
if （(n.x == x) &&（n.y == y)） {
98.
return true;
'66
}
100.
{
101.
return false;
102.}
103.
104.
static class Grid {
105.
public int x;
106.
public int y;
107.
public int f;
108.
public int g;
109.
public int h;
110.
public Grid parent;
111.
112.
public Grid(int x, int y) {
113.
this.x = x;
114.
this.y = y;
115.
}
116.
117.
public void initGrid(Grid parent, Grid end){
118.
this.parent = parent;
---
## Page 496
119.
if(parent != null){
120.
this.g = parent.g + 1;
121.
}else{
122.
this.g = 1;
123.
{
124.
this.h = Math.abs(this.x - end.x) + Math.
abs(this.y - end.y);
125.
this.f = this.g + this.h;
126.
{
127.}
128.
129.
public static void main(String[] args) {
130.
//设置起点和终点
131.
Grid startGrid = new Grid(2, 1);
132.
Grid endGrid = new Grid(2, 5);
133.
//搜索迷宫终点
134.
Grid resultGrid = aStarSearch(startGrid, endGrid);
135.
//回溯迷宫路径
136.
ArrayList path = new ArrayList();
137.
while (resultGrid != null) {
138.
path.add(new Grid(resultGrid.x, resultGrid.y));
139.
resultGrid = resultGrid.parent;
140.
}
141.
//输出迷宫和路径，路径用*表示
---
## Page 497
142.
for (int i = θ;i< MAZE.length;i++）{
143.
for （int j = θ;j < MAZE[o].length; j++）{
144.
if (containGrid(path,i，j)）{
145.
System.out.print("*，");
146.
}else{
147.
System.out.print(MAZE[i][j] + ",");
148.
149.
150.
System.out.println();
151.
→
152.}
好长的代码啊，不过能勉强看明
白。我要回去完善我的游戏了，嘿嘿..
6.5
如何实现红包算法
6.5.1
一个关于钱的需求
---
## Page 498