CHINE\SOFTWARE\
Classes
Different paths. Usually
\ProgramData\Packages\\
\SystemAppData\Helium\UserClass
es.dat for Centennial
You’ll notice that some of the hives listed in Table 10-5 are volatile and
don’t have associated files. The system creates and manages these hives
entirely in memory; the hives are therefore temporary. The system creates
volatile hives every time it boots. An example of a volatile hive is the
HKLM\HARDWARE hive, which stores information about physical devices
and the devices’ assigned resources. Resource assignment and hardware
detection occur every time the system boots, so not storing this data on disk
is logical. You will also notice that the last three entries in the table represent
virtualized hives. Starting from Windows 10 Anniversary Update, the NT
kernel supports the Virtualized Registry (VReg), with the goal to provide
support for Centennial packaged applications, which runs in a Helium
container. Every time the user runs a centennial application (like the modern
Skype, for example), the system mounts the needed package hives.
Centennial applications and the Modern Application Model have been
extensively discussed in Chapter 8.
EXPERIMENT: Manually loading and unloading
hives
Regedit has the ability to load hives that you can access through its
File menu. This capability can be useful in troubleshooting
scenarios where you want to view or edit a hive from an unbootable
system or a backup medium. In this experiment, you’ll use Regedit
to load a version of the HKLM\SYSTEM hive that Windows Setup
creates during the install process.
1. 
Hives can be loaded only underneath HKLM or HKU, so
open Regedit, select HKLM, and choose Load Hive from
the Regedit File menu.
2. 
Navigate to the %SystemRoot%\System32\Config\RegBack
directory in the Load Hive dialog box, select System, and
open it. Some newer systems may not have any file in the
RegBack folder. In that case, you can try the same
experiment by opening the ELAM hive located in the
Config folder. When prompted, type Test as the name of
the key under which it will load.
3. 
Open the newly created HKLM\Test key and explore the
contents of the hive.
4. 
Open HKLM\SYSTEM\CurrentControlSet\Control\Hivelist
and locate the entry \Registry\Machine\Test, which
demonstrates how the configuration manager lists loaded
hives in the Hivelist key.
5. 
Select HKLM\Test and then choose Unload Hive from the
Regedit File menu to unload the hive.
Hive size limits
In some cases, hive sizes are limited. For example, Windows places a limit
on the size of the HKLM\SYSTEM hive. It does so because Winload reads
the entire HKLM\SYSTEM hive into physical memory near the start of the
boot process when virtual memory paging is not enabled. Winload also loads
Ntoskrnl and boot device drivers into physical memory, so it must constrain
the amount of physical memory assigned to HKLM\SYSTEM. (See Chapter
12 for more information on the role Winload plays during the startup
process.) On 32-bit systems, Winload allows the hive to be as large as 400
MB or half the amount of physical memory on the system, whichever is
lower. On x64 systems, the lower bound is 2 GB.
Startup and the registry process
Before Windows 8.1, the NT kernel was using paged pool for storing the
content of every loaded hive file. Most of the hives loaded in the system
remained in memory until the system shutdown (a good example is the
SOFTWARE hive, which is loaded by the Session Manager after phase 1 of
the System startup is completed and sometimes could be multiple hundreds of
megabytes in size). Paged pool memory could be paged out by the balance
set manager of the memory manager, if it is not accessed for a certain amount
of time (see Chapter 5, “Memory management,” in Part 1 for more details).
This implies that unused parts of a hive do not remain in the working set for a
long time. Committed virtual memory is backed by the page file and requires
the system Commit charge to be increased, reducing the total amount of
virtual memory available for other purposes.
To overcome this problem, Windows 10 April 2018 Update (RS4)
introduced support for the section-backed registry. At phase 1 of the NT
kernel initialization, the Configuration manager startup routine initializes
multiple components of the Registry: cache, worker threads, transactions,
callbacks support, and so on. It then creates the Key object type, and, before
loading the needed hives, it creates the Registry process. The Registry
process is a fully-protected (same protection as the SYSTEM process:
WinSystem level), minimal process, which the configuration manager uses
for performing most of the I/Os on opened registry hives. At initialization
time, the configuration manager maps the preloaded hives in the Registry
process. The preloaded hives (SYSTEM and ELAM) continue to reside in
nonpaged memory, though (which is mapped using kernel addresses). Later
in the boot process, the Session Manager loads the Software hive by invoking
the NtInitializeRegistry system call.
A section object backed by the “SOFTWARE” hive file is created: the
configuration manager divides the file in 2-MB chunks and creates a reserved
mapping in the Registry process’s user-mode address space for each of them
(using the NtMapViewOfSection native API. Reserved mappings are tracked
by valid VADs, but no actual pages are allocated. See Chapter 5 in Part 1 for
further details). Each 2-MB view is read-only protected. When the
configuration manager wants to read some data from the hive, it accesses the
view’s pages and produces an access fault, which causes the shared pages to
be brought into memory by the memory manager. At that time, the system
working set charge is increased, but not the commit charge (the pages are
backed by the hive file itself, and not by the page file).
At initialization time, the configuration manager sets the hard-working set
limit to the Registry process at 64 MB. This means that in high memory
pressure scenarios, it is guaranteed that no more than 64 MB of working set
is consumed by the registry. Every time an application or the system uses the
APIs to access the registry, the configuration manager attaches to the
Registry process address space, performs the needed work, and returns the
results. The configuration manager doesn’t always need to switch address
spaces: when the application wants to access a registry key that is already in
the cache (a Key control block already exists), the configuration manager
skips the process attach and returns the cached data. The registry process is
primarily used for doing I/O on the low-level hive file.
When the system writes or modifies registry keys and values stored in a
hive, it performs a copy-on-write operation (by first changing the memory
protection of the 2 MB view to PAGE_WRITECOPY). Writing to memory
marked as copy-on-write creates new private pages and increases the system
commit charge. When a registry update is requested, the system immediately
writes new entries in the hive’s log, but the writing of the actual pages
belonging to the primary hive file is deferred. Dirty hive’s pages, as for every
normal memory page, can be paged out to disk. Those pages are written to
the primary hive file when the hive is being unloaded or by the Reconciler:
one of the configuration manager’s lazy writer threads that runs by default
once every hour (the time period is configurable by setting the
HKLM\SYSTEM\ CurrentControlSet\Control\Session
Manager\Configuration Manager\RegistryLazyReconcileInterval registry
value).
The Reconciler and the Incremental logging are discussed in the
“Incremental logging” section later in this chapter.
Registry symbolic links
A special type of key known as a registry symbolic link makes it possible for
the configuration manager to link keys to organize the registry. A symbolic
link is a key that redirects the configuration manager to another key. Thus,
the key HKLM\SAM is a symbolic link to the key at the root of the SAM
hive. Symbolic links are created by specifying the REG_CREATE_LINK
parameter to RegCreateKey or RegCreateKeyEx. Internally, the configuration
manager will create a REG_LINK value called SymbolicLinkValue, which
contains the path to the target key. Because this value is a REG_LINK
instead of a REG_SZ, it will not be visible with Regedit—it is, however, part
of the on-disk registry hive.
EXPERIMENT: Looking at hive handles
The configuration manager opens hives by using the kernel handle
table (described in Chapter 8) so that it can access hives from any
process context. Using the kernel handle table is an efficient
alternative to approaches that involve using drivers or executive
components to access from the System process only handles that
must be protected from user processes. You can start Process
Explorer as Administrator to see the hive handles, which will be
displayed as being opened in the System process. Select the System
process, and then select Handles from the Lower Pane View menu
entry on the View menu. Sort by handle type, and scroll until you
see the hive files, as shown in the following screen.
Hive structure
The configuration manager logically divides a hive into allocation units
called blocks in much the same way that a file system divides a disk into
clusters. By definition, the registry block size is 4096 bytes (4 KB). When
new data expands a hive, the hive always expands in block-granular
increments. The first block of a hive is the base block.
The base block includes global information about the hive, including a
signature—regf—that identifies the file as a hive, two updated sequence
numbers, a time stamp that shows the last time a write operation was initiated
on the hive, information on registry repair or recovery performed by
Winload, the hive format version number, a checksum, and the hive file’s
internal file name (for example,
\Device\HarddiskVolume1\WINDOWS\SYSTEM32\CONFIG\SAM). We’ll
clarify the significance of the two updated sequence numbers and time stamp
when we describe how data is written to a hive file.
The hive format version number specifies the data format within the hive.
The configuration manager uses hive format version 1.5, which supports
large values (values larger than 1 MB are supported) and improved searching
(instead of caching the first four characters of a name, a hash of the entire
name is used to reduce collisions). Furthermore, the configuration manager
supports differencing hives introduced for container support. Differencing
hives uses hive format 1.6.
Windows organizes the registry data that a hive stores in containers called
cells. A cell can hold a key, a value, a security descriptor, a list of subkeys, or
a list of key values. A four-byte character tag at the beginning of a cell’s data
describes the data’s type as a signature. Table 10-6 describes each cell data
type in detail. A cell’s header is a field that specifies the cell’s size as the 1’s
complement (not present in the CM_ structures). When a cell joins a hive and
the hive must expand to contain the cell, the system creates an allocation unit
called a bin.
Table 10-6 Cell data types
D
a
t
a 
T
y
St
r
u
ct
u
re 
Description
p
e
T
y
p
e
K
e
y 
c
el
l
C
M
_
K
E
Y
_
N
O
D
E
A cell that contains a registry key, also called a key node. A 
key cell contains a signature (kn for a key, kl for a link node), 
the time stamp of the most recent update to the key, the cell 
index of the key’s parent key cell, the cell index of the subkey-
list cell that identifies the key’s subkeys, a cell index for the 
key’s security descriptor cell, a cell index for a string key that 
specifies the class name of the key, and the name of the key 
(for example, CurrentControlSet). It also saves cached 
information such as the number of subkeys under the key, as 
well as the size of the largest key, value name, value data, and 
class name of the subkeys under this key.
V
al
u
e 
c
el
l
C
M
_
K
E
Y
_
V
A
L
U
E
A cell that contains information about a key’s value. This cell 
includes a signature (kv), the value’s type (for example, REG_ 
DWORD or REG_BINARY), and the value’s name (for 
example, Boot-Execute). A value cell also contains the cell 
index of the cell that contains the value’s data.
B
i
g 
V
al
u
C
M
_
B
I
G
A cell that represents a registry value bigger than 16 kB. For 
this kind of cell type, the cell content is an array of cell indexes 
each pointing to a 16-kB cell, which contains a chunk of the 
registry value.
e 
c
el
l
_
D
A
T
A
S
u
b
k
e
y
-
li
st 
c
el
l
C
M
_
K
E
Y
_I
N
D
E
X
A cell composed of a list of cell indexes for key cells that are 
all subkeys of a common parent key.
V
al
u
e
-
li
st 
c
el
l
C
M
_
K
E
Y
_I
N
D
E
X
A cell composed of a list of cell indexes for value cells that are 
all values of a common parent key.
S
e
c
u
ri
C
M
_
K
E
A cell that contains a security descriptor. Security-descriptor 
cells include a signature (ks) at the head of the cell and a 
reference count that records the number of key nodes that 
share the security descriptor. Multiple key cells can share 
security-descriptor cells.
t
y
-
d
e
s
c
ri
p
t
o
r 
c
el
l
Y
_
S
E
C
U