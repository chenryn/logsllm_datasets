To evaluate the proposed attack, we implement a CNN accelera-
tor [39] in a Xilinx Spartan-6 LX75 FPGA chip [15] on the SAKURA-
G board [18]. This board is designed for the purpose of evaluating
5 POWER EXTRACTION
Ideally, the power collected from the oscilloscope is periodic and its
period shall be same with the clock signal, as the internal activity
is triggered by the clock pulse. The power trace in one period
shall reflect the total power consumed in this cycle. However, this
assumption is not valid due to noises and distortions in the power
collecting procedure. Some of the noise sources can be modeled as
a capacitor-based filter system which blends power consumption of
neighboring cycles and thus makes the raw power trace inaccurate
for pixel inference. In this section, we present an efficient method
to extract real power consumption from the noisy and distorted
power traces.
Power ExtractionPowerTemplateBackgroundDetectionPassive Adversary Attack FlowActive Adversary Attack FlowImage Reconstrution AlgorithmPower Extracted for Training ImageCollected Power TraceTraining Image PixelsRecovered ImagePixel CandidateGenerationRecovered Binary ImageACSAC ’18, December 3–7, 2018, San Juan, PR, USA
L. Wei et al.
5.1 Interference Sources
We illustrate three critical components on the power measurement
path in Fig. 3. Driven by clock pulses, CMOS transistors in the FPGA
used for computation become active and draw current from power
supply. The current is delivered through the power distribution
network which leads to a voltage drop in the power measurement
circuit. The voltage drop is then captured by the oscilloscope’s probe
placed on the power supply line and recorded as the power trace.
Figure 3: Power measurement path in our experiment set-
ting.
All three components incur certain kinds of interference on the
measured power signals. The noise in the measurement of oscil-
loscope is white noise, which mainly comes from environmental
fluctuations.
The adopted FPGA board [19] offers two options for power mea-
surement: we can either directly measure the raw voltage on the
resistor or the amplified signal through an amplifier. It is crucial
for the success of our attack to use the amplified signal as the raw
voltage on the resistor is about several millivolts, which is around
the same level with noise. However, the amplifier circuit is only
able to amplify the AC components of the power traces, which re-
sults in the voltage drop below zero at the end of the power traces,
as illustrated in Fig. 4 (a). The drop not only induces inaccuracies
when we recover the power for each cycle, it also hinders correct
curve-fitting procedure in subsequent procedures. We analyze the
frequency response of the power measurement circuit with a cir-
cuit simulator [16], and find that the whole circuit behaves like a
high-pass filter with the cut-off frequency of around 250Hz.
The exact effect of FPGA’s power distribution network on power
signals is hard to model as we are not knowledgeable about the
design details, but we assume it can be regarded as an RC filter.
This is because power distribution network is often in a tree-like
shape and implemented with metal wires. The distributed wire’s
resistance and the inter-wire capacitance can be regarded as an RC
filter in a lumped model.
5.2 Extraction Methods
For the noise in the oscilloscope measurement procedure, we use
low pass filters to eliminate them. For the distortion from the RC
filters, though techniques directly reversing the distortion effect
exist, they are very sensitive to small deviation [26] in the origi-
nal signal. Thus, they are not applicable to the power traces from
noisy channels. We propose to solve the problem by analyzing the
approximate effect of the RC filters with two dedicated methods:
DC component recovery, power alignment and curve fitting.
Low-Pass Filter: For the noises induced in the oscilloscope mea-
surement, a low-pass filter is enough by filtering out most high-
frequency noises as the low-frequency noises are small compared to
useful signals. We apply a filter whose cut-off frequency is 60MHz
to the acquired power traces and the result is shown in Fig. 4 (b).
DC Component Restoration: For the distortion induced by the
power measurement circuit, we propose to recover the DC compo-
nent. From the simulation result, the cut-off frequency of equivalent
high-pass filter (250Hz) is far lower than the accelerator’s working
spectrum (more than 15kHz, as the total running time is around
70µs). So only the DC component is filtered by the power measure-
ment circuit. To recover it, we obtain the discrete time impulse
response of the power measurement circuit via simulation as fol-
lows:
h(n) =
(1)
0
1
−T
τ e
− nT
τ
if n  0
r(n) = x(n) − n−1
i =0
wherein T stands for the sampling interval and it is 0.4ns in our
case. τ represents the time constant, which is the reciprocal of
the angular cutoff frequency τ = 1
= 640µs. So we propose to
2π f
recover the original power trace by reversing effects of the power
measurement circuit, which can be modelled as x(n) = r(n) ∗ h(n),
using the following formula:
x(i)h(n − i)
(2)
wherein the x(n) represents power samples collected while the r(n)
stands for sample points in the recovered trace.
Power Alignment and Curve Fitting: Though the FPGA’s power
distribution network is also RC-filter-like, it is hard to approximate
it to simple low-pass or high-pass filters as its frequency response
overlaps the spectrum of power traces. Alternatively, based on this
RC filter assumption, we further assume the power trace acquired
per cycle is similar to the capacitor’s charging and discharging
curve. Then we use curve fitting tools to obtain the exact power
consumption in one cycle. In the first step, we need to align the
power trace with the clock signal. A template signal, representing
a typical power trace in one clock cycle as shown in Fig. 4 (c), is
carefully chosen from the filtered power trace manually and we
calculate the Pearson correlation coefficient of the template signal
with each sample point on the original power trace. We choose the
points with maximum coefficients to be the alignment points. The
aligned power trace is shown in Fig. 4 (d).
− t
RC
Vc(t) = Vp(1 − e
For power signals in each cycle, they all rise sharply at first and
then gradually descend, which comes from the charging and dis-
charging of the equivalent capacitor in power distribution network.
Thus, we fit the power curve with capacitor’s charging formula
Vc(t) and discharging formula Vd(t) as follows:
− t
RC ), Vd(t) = Vpe
(3)
in which the Vp represents the final voltage at the charging stage
and the initial voltage in the discharging phase. RC is the product
of equivalent resistance and capacitance of the power distribution
network, also known as RC time constant, represented by τ. The
whole power extraction algorithm is listed in Algorithm 1. Also we
illustrate this procedure in Fig. 4 (e). The algorithm is run cycle-
wise: for each cycle, we estimate optimal Vp and τ from the power
trace using curve fitting function and calculate the trailing power in
subsequent cycles. The final power for current cycle is accumulated
by the power in this cycle and the trailing power. The trailing power
is then subtracted from following power traces. The computation
Real PowerFPGA’s Power Distribuon NetworkPower Measurement CircuitOscilloscopeCollected Power TracePower alignment Curve ﬁngDC component recoveryLow-pass ﬁlterPower Side-Channel Attack on Convolutional Neural Network Accelerators
ACSAC ’18, December 3–7, 2018, San Juan, PR, USA
Figure 4: Power extraction on traces collected.
continues until all aligned cycles are processed. The solid red line
in Fig. 4 (e) shows the optimal curve we find while the dash red
line shows the trailing power for each cycle.
Algorithm 1: Cycle Power Extraction
Input: A vector p containing all sample points in collected
power trace; A set of tuples indicating start and end
indexes for each cycle in the power trace
S = {(ist , ied)j|for j in all cycles}
for each cycle
Output: A vector P containing the real power consumption
1 for j in all aligned cycles do
2
3
4
5
6
7
8 end for
ist , ied ← S[j];
ptr ace ← p[ist : ied];
param ← CurveFitting(ptr ace);
ptr ail ← GenerateTrailingTrace(ptr ace , param);
P[j] ← sum(ptr ace) + sum(ptr ail);
p[ied : ied + len(trailinд)]− = ptailinд;
6 BACKGROUND DETECTION
In this section, we first discuss the intuition of our background
detection attack. Then we introduce the threshold-based attack
method and at last we evaluate it with MNIST datasets [21].
6.1 Intuition
For passive adversaries, the intuition to attack the DNN accelerator
comes from the power model: the power consumption is determined
by the internal activities, especially by those in the convolution
unit which takes the largest portion of power consumption. If the
data inside the convolution unit remain unchanged between cy-
cles, the internal transitions induced are limited. Thus, the power
consumption shall be small. Based on this insight, by observing
the magnitude of power consumption in each cycle, passive adver-
saries can determine whether the related pixels share similar values.
These similar pixels most probably belong to the pure background
of the image. As a result, the silhouette of the foreground object nat-
urally revealed by locating all pixels belonging to background and
the privacy of user’s information may be infringed via adversaries’
visual inspection.
Though many real-world images have a messy background, some
types of privacy-sensitive images happen to contain pure back-
ground, such as medical images from ultrasonography or radiogra-
phy. If the adversaries are able to recover the shape of foreground
object, they may be able to identify the organ being scanned and
thus infer the health condition of a particular patient.
6.2 Attack Method
The basic idea of the attack is to find a threshold to distinguish
cycles processing background pixels based on the magnitude of
power consumption. However, deciding the exact threshold is not
a trivial task as we cannot observe a clear gap in the distribution of
power consumed in each cycle, as shown in histogram in Fig. 5 (a).
We assume the power consumed in cycles processing foreground
pixels are evenly distributed across a large range while the power
consumption of rest cycles aggregates at the bins of smaller values.
So we are expected to observe a peak in cycle counts for smaller
cycle power consumption. In this case, we decide the threshold by
finding the maximal decrease in cycle count:
PT = argmax
P
C(P − B) − C(P)
(4)
wherein the C(·) is the function returning the cycle count for a
particular power consumption, B is the bin size.
After the threshold is determined, we filter out all cycles whose
power consumption is above the threshold. Then we locate all
corresponding pixels for the left cycles. These pixels are regarded
as background pixels and then we can get a black-and-white image
for further examination and analysis.
voltage dropbelow zero0.200.400.600.80(a) Power Trace Collected from oscilloscope(b) Part of Power Trace after low-pass filter(c) Template for cycle alignment(d) Power trace after alignment(e) Curve fitting for power per cycleACSAC ’18, December 3–7, 2018, San Juan, PR, USA
L. Wei et al.
6.3 Evaluation
Experiment Setup: We performed our attack on the CNN accel-
erator used to classify the digits in MNIST datasets. The size of the
images in MNIST datasets is 28×28. The images have a clear black
background which satisfies the pre-requisite of our background
detection method. For the CNN accelerator [39], we set the line size
of the line buffer to 28, input channel to 1 and the kernel size to 3×3
and 5×5. We adopted two models for experiment with their details
shown in Table 1. The only difference between the two models is the
kernel size as it directly determines the number of pixels involved
in the convolution unit and affects the granularity of recovered
images.
Table 1: Binarized CNN Model Details on MNIST datasets
No. of layers
Accuracy on testing sets
Type of 1st layer
Kernel size in 1st layer
No. of kernels in 1st layer
Model 1 Model 2
99.42%
99.27%
Convolution
3 × 3
5 × 5
4
64
We synthesized the CNN accelerator design to FPGA and loaded
the model parameters into the accelerator before the inference
stage. We randomly chose 500 images from the MNIST testing set
to evaluate our attack method. Both models contain 64 different
kernels in the first layer and for each kernel, we recorded the power
trace when the accelerator performed the convolution in the first
layer. As our algorithm recovers the pixel values on a cycle base,
we need to precisely identify the power trace fragment for the
convolution in the first layer. It is trivial to locate the start point on
the power trace and the length of fragment can be determined from
the total clock cycles needed to finish the convolution computation.
Evaluation Metric: We evaluate the quality of recovered images
with two metrics: pixel-level accuracy and recognition accuracy.
Pixel-level accuracy is to evaluate the precision of our attack algo-
rithm and it is defined as follows:
αpixel =
x∈I(cid:74)f (x) = marker(x)(cid:75)/|I|.
(5)
in which x represents a pixel in the targeted image I. f (x) means the
background marker (whether it belongs to background) predicted
by our algorithm while marker(x) represents the correct marker.
For MNIST images, we regard all pixels with value 0 (i.e., pure black
pixel) as the background pixels. We also evaluate the cognitive
quality of the recovered image with recognition accuracy. We feed
every recovered image to a high-accuracy MNIST classification
model and compare the prediction result with its correct label. In the
following experiment, we use a multi-layer perceptron network [12]
with an accuracy of 99.2% as a golden reference to evaluate the
cognitive quality.
Choices of Threshold and Kernel: We show a histogram of
power consumed in each cycle in Fig. 5 (a). In the figure, we draw
the histograms for the power computed with two different kernels
from model 1 and they manifest similar trends: with the increase of
power consumed per cycle, the cycle count rises at first and then
descends sharply at the value of 0.5. After that, the cycle count
Figure 5: (a) Histogram of power consumed per cycle with
two kernels. (b) Accuracy with two kernels on model 1.
gradually decreases and finally reaches 0. Based on the threshold
selection criteria, we choose the threshold at 0.5 for this image.
To demonstrate the importance of threshold choice in the attack,
we recover the silhouette images using various threshold values
from 0.1 to 3.0 with a step size of 0.1 and illustrate the two metrics
in Fig. 5 (b). The pixel-level accuracy is drawn with solid lines while
the recognition accuracy is drawn using the dot-dash lines. We
observe that as the threshold increases, the pixel-level accuracy
increases to its peak value around 85.6% for both kernels at first
and then it gradually decreases to 83.3%. The recognition accuracy
for these two kernels also follows similar trends: they first rise
to its peak accuracy, but they drop significantly as the threshold
increases. For kernel 1, it reaches its peak value 81.6% at threshold
0.5 while for kernel 2, it reaches peak of 81.8% at threshold 0.3.
When the threshold approaches its optimal value, more and more
background pixels are correctly identified, so we observe an increase
in both pixel-level accuracy and recognition accuracy. After the
threshold exceeds the optimal value, the pixel-level accuracy only
drops a little, while the recognition accuracy falls remarkably. This
is because the actual number of foreground pixels is smaller than
the background pixels. When threshold increases, the number of