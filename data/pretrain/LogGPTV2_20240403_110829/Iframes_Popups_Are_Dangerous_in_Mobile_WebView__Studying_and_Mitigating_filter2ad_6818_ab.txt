other. To mitigate the problem, the postMessage mecha-
nism is designed in HTML5.
• Built-in security policies: Several built-in policies are
available. For example, remote web code is not allowed
to create a new sub-frame for loading local ﬁles, and the
main frame is not allowed to load the data scheme URL.
• HTML5 iframe sandbox: The iframe sandbox mechanism
can limit iframes’ abilities, mainly including the enable-
ment of JavaScript, main-frame navigation (“” or “win-
dow.open()”), and popup-creation. Since the security of
the popup behavior is one of our research objectives, we
assume the popup-creation ability is allowed in iframe
sandbox. Thus, in this paper, we mainly consider the abili-
ties related to JavaScript enablement and main-frame nav-
igation.
• Navigation policies: As studied in existing work [11], in
regular browsers, the main frame is often exempt from
strict navigation policies, which means any sub-frame can
directly navigate the main frame by using “” or “win-
dow.open()”. There are several reasons for such a design.
First, this type of navigation is frequently used by benign
web apps, for example, for preventing framing attacks [43].
Second, even though the main frame is navigated, the con-
sequence is quite limited in consideration of the stealth-
iness: any navigation can be explicitly reﬂected by URL
indicators (e.g., the URL address bar).
2.2 WebView and Related Protections
WebView is an embedded, browser-like UI component. An-
droid WebView is equipped with the newest kernel of the
regular browser “Chrome/Chromium”, and performs as pow-
erful as regular browsers.
As discussed in Section 1, there are several inconsistencies
between regular browsers and WebView. First, WebView UI
is like a small and compacted version of a regular browser. It
does not contain several common UI elements, including the
address, tab, title and status bars.
Second, WebView UI is a case of view group, a collection
of multiple Android UI components. More than that, it can
also be added to an existing view group. A view group may
consist of a set of WUIs with the same size. It manages mul-
tiple WUIs with a rendering queue, and only rendering the
foremost WUI to users.
Third, the manners of initializing web content are different.
Compared to regular browsers, which allow users to manu-
ally type the address of a website, WebView initializes web
content through programming APIs (Figure 1), including
• loadUrl(URL/ﬁle/JS): loading content in the main frame;
• loadData(HTML, ...): loading code with the “null” origin;
• loadDataWithBaseURL(origin,HTML,...): loading HTML
code with a speciﬁed origin.
Last, as shown in Figure 1, developers can customize a We-
bView instance through several programming features, such
as settings, and web-mobile bridges. Settings can manage
WebView conﬁgurations, while Web-mobile bridges can link
the web and mobile layers together. Generally, the bridges
include 1) event handlers, which let mobile code handle web
events that occur inside WebView; and 2) JavaScript bridges,
which can allow JavaScript code to directly access mobile
methods.
Furthermore, as shown in Table 2, several programming
features can impact iframe/popup behaviors. To enable the cre-
ation of a popup, the setting SupportMultipleWindows should
be set as true, and the event handler onCreateWindow() is
also required to be implemented and return true. This event
handler should create or open a WUI for rendering this popup,
and also return the WUI to Android. Otherwise, the popup-
creation operation will be ignored. This also means that dif-
ferent popup windows are rendered by different WUIs at one
time. Besides, to support the closure of a WUI, the event
handler onCloseWindow() should be also implemented. Note
that when any web frame, including the main frame, loads
content, the content should be approved by the event handler
“shouldOverrideUrlLoading()”.
Summary of Related Protections. In past years, WebView
security, especially the security of web-mobile bridges, has
drawn more and more attention [12, 16, 21, 27, 30, 33, 34,
50, 53–55]. Several defense solutions [18, 21, 38, 45, 49, 50]
980    28th USENIX Security Symposium
USENIX Association
Table 2: Iframe/Popup-Related Programming Features
Features
Explanation
Content
Settings
Event
Handlers
OpenWindowsAutomatically
SupportMultipleWindows
onCreateWindow()
onCloseWindow()
shouldOverrideUrlLoading()
Enable “window.open()”
Enable the event handler
“onCreateWindow()”
Handle window-creation
Handle window-closure
Handle URL-loading
were proposed to enhance the security of WebView by provid-
ing the security enforcement and access control mechanisms.
However, we ﬁnd they are ineffective against our new attacks.
Section 7 provides a review of these existing work.
2.3 Threat Model
In this paper, we mainly focus on the hybrid app whose We-
bView contains an untrusted sub-frame. In our threat model,
we assume the native or mobile code (e.g., Java code), and
the main frame loaded in its WebView are secure and trusted.
The main frame usually loads web content from the ﬁrst-party
benign domains (e.g., developer.com). For the embedded un-
trusted sub-frames, we mainly consider two possible attack
scenarios:
Network attacks. When the sub-frames use HTTP network,
attackers may perform man-in-the-middle (MITM) attacks
to inject attack code into the sub-frames, and then launch
DCV attacks. Although HTTPS have been widely adopted
in modern web apps, there is still much legacy code using
HTTP.
This scenario is feasible, especially considering many pub-
lic unsafe WiFi hotspots are available [24]. Consider a pos-
sible scenario: attackers may set up a free WiFi hotspot in a
crowded place. Nearby smartphone users may use this WiFi.
If these users open vulnerable apps (e.g.,Facebook and skype)
and click web links, apps’ WebView may load these links. If
the loaded web content embeds iframes/popups using unsafe
network channels (e.g., HTTP), attackers may inject malicious
code into the iframes/popups and launch attacks.
Web attacks. The inclusion of third-party content usually
introduces security implications [26, 36]. Hence, we assume
web attackers may be the owner of a third-party domain
(e.g., ads.com) severing an embedded untrusted iframe/popup.
Our empirical study on a set of popular hybrid apps and mo-
bile websites shows iframes/popups are frequently used to
load third-party content, especially third-party advertising
and tracking content. Existing work has demonstrated that
third-party advertising [28,56] and tracking [14,32,37,42,46]
services often causes serious security concerns. More than
that, as ﬁgured out by existing work [39, 48], a third-party
iframe may even directly work as a malicious entry point for
malware.
This scenario is also possible in practice. For example, as
demonstrated in prior work (e.g., [36]), some domains may
expire, which still commonly occurs in recent years. Attackers
may register and get the control of these domains. If these
domains are embedded by some websites in iframes/popups,
attackers may broadcast these websites to lure users to access
them using corresponding vulnerable apps (e.g., Facebook
or Facebook Messenger). In the vulnerable apps, WebView
may be started, and also access the domains controlled by
attackers. Thus, attackers obtain chances to inject malicious
code and launch attacks.
Furthermore, as discussed in Section 2.1, considering the se-
curity of the popup behavior is one of our research objectives,
we assume the popup-creation ability of an iframe/popup is
enabled in its sandbox attribute.
3 Differential Context Vulnerabilities
In this section, we mainly focus on DCVs, and also explain
why existing defense solutions are ineffective to prevent DCV
attacks. We ﬁrst show the overview of our security study, and
then present the details of each vulnerability. Last, we discuss
the advantages of DCV attacks over existing attacks, also with
the analysis of the root causes of DCVs.
3.1 Study Overview
Guided by the inconsistencies between regular browsers and
WebView (Section 2.2), our security study of iframe/popup
behaviors is mainly concerned with the following three di-
mensions:
The application of common origins. As introduced in Sec-
tion 2.2, WebView content initialization APIs may create the
main frame with common origins, such as “ﬁle://” and “null”.
For example, the invocation
WebView.loadurl(’file:///android_asset/index.html’)
can load a local ﬁle with the origin “ﬁle://”, while Web-
View.loadData() and WebView.loadDataWithBaseURL() may
create a main frame to load web data with the “null” origin.
However, these common origins are not unique for the main
frame, and may be reproduced by untrusted iframes/popups
in their inside sub-frames for launching attacks. More specif-
ically, if an untrusted sub-frame can generate a new nested
sub-frame “Fnested” with above common origins, the untrusted
sub-frame may place its essential attack code inside Fnested to
make risky operations, which are aimed to attack all potential
objectives, including the main frame, other sub-frames, or We-
bView itself. In the attack process, the victims may validate
the operations by checking the corresponding origins. How-
ever, the origin information they can obtain is Fnested’s origin,
rather than the real origin (i.e., the origin of the untrusted
sub-frame). Considering Fnested have the same origin as the
main frame, the origin validation process fails. Finally, the
victims may treat untrusted operations as benign operations
and handled them as usual.
Our study conﬁrms that a sub-frame is not allowed to gen-
erate a new sub-frame with the “ﬁle://” origin, due to built-in
security policies (Section 2.1). However, a nested sub-frame
with a “null” origin can still be generated by using the data
scheme URL (e.g., ...alert(\I am the main frame\’, \’*\’)’...
5 document.body.appendChild(ifrm);
Listing 2: Accessing the Event Handler onJsAlert() in the
Untrusted Iframe/Popup
3.3 WebView UI Redressing Attacks
The root cause of the attacks is that there is no protection on
the WUI rendering order and WebView UI integrity. Hence,
the security risks exist that untrusted iframes/popups can