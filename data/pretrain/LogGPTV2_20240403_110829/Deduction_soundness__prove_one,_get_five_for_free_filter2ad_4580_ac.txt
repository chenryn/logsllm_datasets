if t = gl(cid:3) for some l ∈ labelsA then
return open2(c, L)
1Here we assume that the membership problem is eﬃciently
decidable (since M
has to run in polynomial time). This can
be achieve w.l.o.g. with a suitable encoding for the function
symbols.
(cid:2)
1265else
return (c, t)
(cid:2)
:= open1◦open2. Furthermore we set
(T) := valid1(T)∧ valid2(T) where ∧ is the conjunction.
is a good implementation of the com-
(cid:2)
and consequently open
valid
posed symbolic model M(cid:2)
Checking that I(cid:2)
is a straightforward task.
6. DEDUCTION SOUNDNESS
In this section we recall the notion of deduction soundness
of an implementation with respect to a symbolic model [13].
Informally, the deﬁnition considers an adversary that plays
the following game against a challenger. The challenger
maintains a mapping L between bitstrings and hybrid terms,
as deﬁned in Section 3. Recall that the such mappings are
used to both generate bitstring interpretations for terms,
and also to parse bitstrings as terms (Figures 1,2). Roughly,
the adversary is allowed to request to see the interpretation
of arbitrary terms, and also to see the result of the parsing
function applied to arbitrary bitstrings. Throughout the ex-
ecution the queries that the adversary makes need to satisfy
a predicate valid (which is a parameter of the implementa-
tion). The goal of the adversary is to issue a parse request
such that the result is a term, that is not deducible from
the terms that he had queried in his generate requests: this
illustrates the idea that the adversary, although operating
with bitstrings, is restricting to only performing Dolev-Yao
operations on the bit-strings that it receives.
The details of the game are in Figure 4. Our deﬁnition
departs from the one of [13] in a few technical aspects. First,
we introduce a query init which is used to “initialize” the
execution by, for example, generating (and corrupting) keys.
The introduction of this query allows for a clearer separation
between the phases where keys are created and where they
are used, and allows to simplify and clarify what are valid
interactions between the adversary and the game.
Secondly, we also allow the adversary to issue sgenerate re-
quests: these are generate requests except that the resulting
bitstring is not returned to the adversary. These requests
are a technical necessity that help in later simulations, and
only strengthen the adversary.
Deduction soundness of an implementation I with respect
to a symbolic model M for an implementation is deﬁned by
considering an adversary who plays the game sketched above
against an implementation that mixes I with transparent
functions provided by the adversary. To ensure uniform be-
havior on behalf of the adversary , we introduce a notion of
parametrized transparent functions/models.
Parametrization. A parametrized transparent symbolic
model Mtran(ν) maps a bitstring ν (the parameter) to a
transparent symbolic model. Analogously, a parametrized
transparent implementation Itran(ν) of Mtran maps a bit-
string ν (the parameters) to a transparent implementation
ν where the length of ν is polynomial in the security pa-
rameter. We say that a parameter ν is good if Itran(ν) is a
transparent implementation of Mtran(ν) and meets the re-
quirements of a good implementation (i.e., type-safe, . . . )
from Section 3.
Deduction soundness of an I with respect to M holds
if the adversary cannot win the deduction soundness game
that involves implementation I∪Itran(ν) for M∪Mtran(ν) for
arbitrary transparent models/implementations Mtran,Itran,
and for any parameter ν provided by the adversary.
DSM(ν),I(ν),A(η):
let S := ∅
(set of requested terms)
let L := ∅
(library)
let T := ∅
(trace of queries)
R ← {0, 1}∗
(random tape)
Receive parameter ν from A
on request “init T, H” do
add “init T ” to T
if valid(T) then
let S := S ∪ T
let C := ∅
for each t ∈ T do
(list of replies)
let (c, L) := generateM,R(t, L)
let C := C ∪ {c}
let (c, L) := generateM,R(t, L)
for each t ∈ H do
send C to A
return 0 (A is invalid)
else
on request “sgenerate t” do
if valid(T+“sgenerate t”) then
let (c, L) := generateM,R(t, L)
on request “generate t” do
add “generate t” to T
if valid(T) then
let S := S ∪ {t}
let (c, L) := generateM,R(t, L)
send c to A
return 0 (A is invalid)
else
on request “parse c” do
let (t, L) := parse(c, L)
if S (cid:10)D t then
send t to A
return 1 (A produced non-Dolev-Yao term)
else
Figure 4: Game deﬁning deduction soundness.
Whenever generateM,R(t, L) is called, the require-
ments for t are checked (i.e., all subterms of t with
adversarial labels must already be in L and t does
not contain garbage symbols with honest labels) and
0 is returned if the check fails (i.e., the A is consid-
ered to be invalid).
Definition 2
(Deduction soundness). Let M be a
symbolic model and I be an implementation of M. We say
that I is a deduction sound implementation of M if for
all parametrized transparent symbolic models Mtran(ν) and
for all parametrized transparent implementations Itran(ν) of
Mtran such that (Mtran,Itran) is compatible with (M,I) we
have that
(cid:15)
P
DSM∪Mtran(ν),I∪Itran(ν),A(η) = 1
(cid:16)
1266is negligible for all probabilistic polynomial time (p.p.t.) ad-
versaries A sending only good parameters ν where DS is the
deduction soundness game deﬁned in Figure 4.
7. COMPOSITION THEOREMS
The notion of deduction soundness enjoys the nice prop-
erty of being easily extendable: if an implementation is de-
duction sound for a given symbolic model, it is possible to
add other primitives, one by one, without having to prove
deduction soundness from scratch for the resulting set of
primitives.
In this section we state a couple of composition theorems
that can be used to enrich any deduction sound implemen-
tation with additional primitives. First, we quickly restate
the main composition theorem for public data types from
[13].
Theorem 1. Let M be a symbolic model and I a deduc-
tion sound implementation of M. Furthermore, let Mtran
be a transparent symbolic model and Itran a transparent im-
plementation of Mtran. If (M,I) and and (Mtran,Itran) are
compatible, then I ∪ Itran is a deduction sound implementa-
tion of M ∪ Mtran.
7.1 Signatures
In this section we show that any deduction sound imple-
mentation can be extended by a signature scheme. More
precisely, composition works if we require a strong EUF-
CMA secure signature scheme and enforce static corruption.
The result is again a deduction sound implementation.
We ﬁrst deﬁne the symbolic model (TSIG,≤SIG, ΣSIG,DSIG)
for signatures. The signature ΣSIG features the following
function symbols:
SIG × (cid:4) → τ sig
The randomized function sk of arity τ sk
SIG returns a signing
key. The deterministic function vk of arity τ sk
SIG de-
SIG
rives a veriﬁcation key from a signing key. The randomized
× (cid:4) → τ sig
signing function sig has arity τ sk
SIG and, given a
signing key and a message of type (cid:4), represents a signature
SIG
of that message. To complete the formal deﬁnition we set
the types
SIG → τ vk
→ τ vk
sk : τ sk
SIG
sig : τ sk
vk : τ sk
SIG
SIG
TSIG := {(cid:4), τ sk
SIG, τ vk
SIG, τ sig
SIG
}
All introduced types are direct subtypes of the base type
(cid:4) (this deﬁnes ≤SIG). The deduction system captures the
security of signatures
⎧⎪⎪⎨
⎪⎪⎩
DSIG :=
l()
sk
vk (sk l()) ,
sig
ˆl(sk
l(),m)
m
,
l() m
sk
sig la (sk l(),m)
⎫⎪⎪⎬
⎪⎪⎭
These rules are valid for arbitrary labels l, ˆl ∈ labels and
adversarial labels la ∈ labelsA. Read from top left to bottom
right, the rules capture the intuition that the adversary can
derive veriﬁcation keys from signing keys, that signatures
reveal the message that was signed and that the adversary
can use known signing keys to deduce signatures under those
keys. Although the veriﬁcation key is going to be part of
the computational implementation of a signatures, we don’t
need a rule sig
where adversary knows all veriﬁcation keys.
since we enforce static corruption
ˆl(sk
vk (sk l)
l(),m)
openSIG(c, L)
if c ∈ [[TSIG]] ∩ dom(L) then
return (c, L(c))
else if c = (cid:14)sk , τ sk
return (c, gl(c)
τ sk
else if c = (cid:14)vk , τ vk
SIG
(cid:15) then
SIG
)
(cid:15) then
if ˆsk ∈ dom(L) s.t. ˆsk = (cid:14)vk , sk , τ sk
SIG
(cid:15) then
SIG
return (c, vk ( ˆsk ))
else
return (c, gl(c)
τ vk
SIG
)
else if c = (cid:14)σ, m, vk , τ sig
(cid:15) then
(cid:15), vk ( ˆsk )) ∈ L
SIG
if ((cid:14)vk , τ vk
SIG
and SIG.Vfy(vk , σ, m) = true then
return (c, sig l(c)( ˆsk , m))
else
return (c, gl(c)
τ sig
SIG
)
else
return (c, gl(c)(cid:3) )
Figure 5: Open function for signatures.
We now give a concrete implementation ISIG for signa-
tures. The implementation uses some strongly EUF-CMA
secure signature scheme (SIG.KeyGen, SIG.Sig, SIG.Vfy). As
usual, here SIG.KeyGen is a generation algorithm for key
pairs, SIG.Sig is an signing algorithm and SIG.Vfy is a ver-
iﬁcation algorithm. Note that SIG.Sig is an algorithm that
takes three inputs: the signing key, the message to be signed
and the randomness that is used for signing.2 The com-
putable interpretations of sk , vk , sig are as follows:
• (MSIG sk )(r): Let (vk , sk ) :=SIG.KeyGen (1η, r). Re-
turn (cid:14)vk , sk , τ sk
(cid:15).
SIG
• (MSIG vk )( ˆsk : Parse ˆsk as (cid:14)vk , sk , τ sk
• (MSIG sig)( ˆsk , m; r): Parse ˆsk as (cid:14)vk , sk , τ sk
(cid:15).
SIG.Sig(sk , m, r) and return (cid:14)σ, m, vk , τ sig
(cid:15). Return (cid:14)vk , τ vk
(cid:15). Let σ :=
SIG
SIG
SIG
SIG
(cid:15).
Intuitively, the validSIG predicate guarantees static corrup-
tion of signing keys and that veriﬁcation and signing keys
are only used for signing and veriﬁcation.
Theorem 2. Let M be a symbolic model and I be de-
duction sound implementation of M.
If (MSIG,ISIG) and
(M,I) are compatible, then I ∪ ISIG is a deduction sound
implementation of M ∪ MSIG.
We brieﬂy describe the intuition behind the proof. Let
A be an adversary playing the deduction soundness game.
Assume that A queries “parse c” and c is parsed as a non-
ˆl(sk l(), m)
DY term t that contains a signature sig := sig
and S (cid:8)(cid:10) sig (where S is the list of terms generated for A in
the deduction soundness game). We distinguish two possible
ways the adversary could potentially have learned sig:
If sig was previously generated for A (i.e., sig ∈ st(S)
and ˆl ∈ labelsH), we say that A reconstructed sig. Since
2Since the message m is of basetype, we require a scheme
with message space {0, 1}∗
.
1267signatures and transparent functions do not introduce func-
tion symbols that allow for signatures as input such that
the signature is not derivable from the constructed term, A
must have broken the deduction soundness of I in this case.
Hence, using A, we can construct a successful adversary B
on the deduction soundness of I. B simulates signatures
using transparent functions.
If sig was not previously generated for A (i.e., ˆl ∈ labelsA),
we say that A forged sig. In this case A can be used to break
the strong EUF-CMA security of the signature scheme.
Since reconstructions and forgeries can only occur with
negligible probability the composed implementation I ∪ISIG
is a deduction sound implementation of M ∪ MSIG.
7.2 Secret key encryption
In this section we deﬁne a symbolic model MSKE for se-
cret key encryption and a corresponding implementation
ISKE based on a secure authenticated encryption scheme
(SKE.KeyGen, SKE.Enc, SKE.Dec) [6]. We show that compo-
sition of MSKE and ISKE with any symbolic model M com-
prising a deduction sound implementation I preserves this
property for the resulting implementation, i.e., I ∪ ISKE is a
deduction sound implementation of M ∪ MSKE.
We ﬁrst deﬁne the symbolic model (TSKE,≤SKE, ΣSKE,DSKE)
for secret key encryption. The signature ΣSKE features the
function symbols
kx : τ kx
SKE
× (cid:4) → τ ciphertext
Ex : τ kx
SKE
for x ∈ {h, c}. 3 The randomized functions kh and kc re-
turn honest or corrupted keys respectively. The randomized
function Ex has arity τ kx
and represents
SKE
a ciphertext under the given key. To complete the formal