### Chapter Overview

#### Chapter 5: Exploiting DNS
This chapter introduces you to basic DNS concepts using Go. We will start by performing client operations, such as looking up specific domain records. Then, we will guide you through writing a custom DNS server and a DNS proxy, both of which are useful for command-and-control (C2) operations.

#### Chapter 6: Interacting with SMB and NTLM
In this chapter, we will explore the SMB and NTLM protocols, using them as a basis for discussing protocol implementations in Go. We will use a partial implementation of the SMB protocol to discuss data marshaling and unmarshaling, the usage of custom field tags, and more. Additionally, we will demonstrate how to use this implementation to retrieve the SMB-signing policy and perform password-guessing attacks.

#### Chapter 7: Abusing Databases and Filesystems
Pillaging data is a critical aspect of adversarial testing. Data can be found in various resources, including databases and filesystems. This chapter introduces basic methods for connecting to and interacting with databases across a variety of common SQL and NoSQL platforms. You will learn how to connect to SQL databases, run queries, and search for sensitive information. We will also show you how to traverse filesystems and inspect files for sensitive data.

#### Chapter 8: Raw Packet Processing
We will demonstrate how to sniff and process network packets using the gopacket library, which leverages libpcap. You will learn how to identify available network devices, use packet filters, and process packets. We will then develop a port scanner that can reliably scan through various protection mechanisms, such as syn-flood and syn-cookies, which often cause normal port scans to produce excessive false positives.

#### Chapter 9: Writing and Porting Exploit Code
This chapter focuses on creating exploits. We will begin by creating a fuzzer to discover different types of vulnerabilities. The second half of the chapter discusses how to port existing exploits from other languages to Go. This includes a port of a Java deserialization exploit and the Dirty COW privilege escalation exploit. We will conclude with a discussion on creating and transforming shellcode for use within your Go programs.

#### Chapter 10: Go Plugins and Extendable Tools
We will introduce two methods for creating extendable tools. The first method, introduced in Go version 1.8, uses Go’s native plugin mechanism. We will discuss the use cases for this approach and a second approach that leverages Lua. We will provide practical examples showing how to adopt either approach to perform common security tasks.

#### Chapter 11: Implementing and Attacking Cryptography
This chapter covers the fundamental concepts of symmetric and asymmetric cryptography using Go. We will focus on using and understanding cryptography through the standard Go package. Go uses a native implementation for encryption, making the code easy to navigate, modify, and understand. We will explore the standard library by examining common use cases and creating tools. The chapter will show you how to perform hashing, message authentication, and encryption. Finally, we will demonstrate how to brute-force decrypt an RC2-encrypted ciphertext.

#### Chapter 12: Windows System Interaction and Analysis
In this chapter, we will demonstrate methods for interacting with the Windows native API, explore the syscall package to perform process injection, and learn how to build a Portable Executable (PE) binary parser. The chapter will conclude with a discussion on calling native C libraries through Go’s C interoperability mechanisms.

#### Chapter 13: Hiding Data with Steganography
Steganography involves concealing a message or file within another file. This chapter introduces one variation of steganography: hiding arbitrary data within a PNG image file. These techniques can be useful for exfiltrating information, creating obfuscated C2 messages, and bypassing detective or preventative controls.

#### Chapter 14: Building a Command-and-Control RAT
The final chapter discusses practical implementations of C2 implants and servers in Go. We will leverage the knowledge gained in previous chapters to build a C2 channel. The custom-made C2 client/server implementation will avoid signature-based security controls and attempt to circumvent heuristics and network-based egress controls.

### Go Fundamentals

#### Setting Up Your Development Environment
To get started with Go, you need a functional development environment. In this section, we will guide you through the steps to download and install Go, set up your workspace, and configure necessary environment variables. We will also discuss various options for integrated development environments (IDEs) and some of the standard tooling that comes with Go.

##### Downloading and Installing Go
Start by downloading the appropriate Go binary release for your operating system and architecture from [https://golang.org/dl/](https://golang.org/dl/). Binaries are available for Windows, Linux, and macOS. If your system does not have a precompiled binary, you can download the Go source code from the same link.

Execute the binary and follow the prompts to install the entire set of Go core packages. These packages, or libraries, contain useful code you can use in your Go programs.

##### Setting GOROOT
Next, the operating system needs to know where to find the Go installation. If you installed Go in the default path, such as `/usr/local/go` on a *Nix/BSD-based system, no further action is required. However, if you installed Go in a nonstandard path or on Windows, you need to set the `GOROOT` environment variable to the location of your Go binary.

On Linux or macOS, add the following to your `~/.profile`:
```sh
export GOROOT=/path/to/go
```
On Windows, you can add this environment variable through the System (Control Panel) by clicking the Environment Variables button.

##### Setting GOPATH
You must define an environment variable named `GOPATH` to instruct the Go toolset where your source code, third-party libraries, and compiled programs will reside. This can be any location of your choosing. Once you’ve chosen or created this base workspace directory, create the following three subdirectories within it: `bin`, `pkg`, and `src`.

For example, if you want to place your projects in a directory called `gocode` within your home directory on Linux, set `GOPATH` as follows:
```sh
export GOPATH=$HOME/gocode
```

- The `bin` directory will contain your compiled and installed Go executable binaries.
- The `pkg` directory stores various package objects, including third-party Go dependencies.
- The `src` directory will contain all the source code you write.

After configuring `GOROOT` and `GOPATH`, confirm they are properly set. On Linux and Windows, you can use the `set` command. Also, check that your system can locate the binary and that you have installed the expected Go version with the `go version` command:
```sh
$ go version
go version go1.11.5 linux/amd64
```

##### Choosing an Integrated Development Environment (IDE)
Next, select an IDE in which to write your code. Although an IDE is not required, many offer features that help reduce errors, add version-control shortcuts, and aid in package management. Here are some popular options:

- **Vim Editor**: A versatile, extensible, and open-source text editor. Install the `vim-go` plugin for Go support.
- **GitHub Atom**: A hackable text editor with a large offering of community-driven packages. Use the `go-plus` plugin for dedicated Go support.
- **Microsoft Visual Studio Code (VS Code)**: A feature-rich and easy-to-configure IDE. Use the `vscode-go` extension for Go integration.
- **JetBrains GoLand**: A commercial IDE dedicated to the Go language, offering debugging, code completion, version control, linting, and formatting.

##### Using Common Go Tool Commands
Go ships with several useful commands that simplify the development process. Here are some of the most common ones:

- **`go run`**: Compiles and executes the main package—your program’s entry point. For example:
  ```sh
  $ go run main.go
  ```

- **`go build`**: Compiles your application, including any packages and their dependencies, without installing the results. It creates a binary file on disk but does not execute your program. For example:
  ```sh
  $ go build hello.go
  ```

- **Cross-Compiling**: Allows you to compile your program for different operating systems and architectures. For example, to cross-compile for Linux 64-bit on a macOS system:
  ```sh
  $ GOOS="linux" GOARCH="amd64" go build hello.go
  ```

- **`go doc`**: Lets you interrogate documentation about a package, function, method, or variable. For example:
  ```sh
  $ go doc fmt.Println
  ```

- **`go get`**: Downloads and installs third-party packages. For example:
  ```sh
  $ go get github.com/stacktitan/ldapauth
  ```

By following these steps and using these commands, you will be well-equipped to start developing in Go.