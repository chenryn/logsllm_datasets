‘user xauth t’. The fact is derived from a TE Type Transition Rule. (3)
says ‘user ssh t’ is a SELinux domain. (4) says ‘bin t’ is a SELinux
type. Facts like (3) and (4) are used to enumerate SELinux domains
and types.
Figure 3. Sample Facts of SELinux Policy
(1) aa_capability(’/usr/lib/postfix/master’,
’net_bind_service’).
(2) aa_access_mode(’/usr/lib/postfix/master’,
’/etc/samba/smb.conf’, r(1), w(0),
ux(0), px(0), ix(0), m(0), l(0)).
(1) says the program /usr/lib/postﬁx/master has the capability of
net bind service. (2) says the program can read samba conﬁgure ﬁle
/etc/samba/smb.conf. Facts like (2) deﬁne the privileges of a program
over a certain ﬁle or ﬁle pattern.
Figure 4. Sample Facts of AppArmor Policy
gives some sample Prolog facts of an AppArmor pol-
icy. Our parser for AppArmor policy is based on appar-
mor parser.
4.2 Host Attack Graph Generator
Host Attack Graph Generator takes system facts, a
library of system rules and the attack scenario as input,
and generates the host attack graph. We ﬁrst discuss how
to deﬁne attack states.
In our analysis, the basic unit is a process. The
attack state of a process consists of process attributes
that are related to access control enforcement. Uid
and gid of a process are used in Linux DAC mech-
anism, which is the default mechanism. MAC sys-
tems give additional process attributes.
In SELinux,
the current domain of a process is a security related at-
tribute. Hence the attack state of a process is described
as proc(uid, gid, domain). In AppArmor, an attack state
is represented as proc(uid, gid, proﬁle) where proﬁle is
the proﬁle that conﬁnes the process.
Given the attack state of a process controlled by the
attacker, the privileges available to the attacker is deﬁned
by the policy. For example, under SELinux, a process
with a certain domain can only have a certain set of per-
missions. Permissions also depend on the uid and gid.
Figure 5 gives some relevant predicates to describe such
enforcement.
the fact
can control
In SELinux, we represent
Suppose the attacker controls a process p, she may
exploit or launch a program prog to further control an-
other attack state. We are interested in all the potential
attack states that might be controlled by an attacker.
that
certain attack state
the
attacker
as
se node(proc(uid, gid, domain)).
attacker
controls attack state s1, and after exploiting a program
prog she can control attack state s2, the transition is
represented as se edge(s1, s2, prog). Here se node(·)
and se edge(·,·,·) are both dynamic predicates in
Prolog. The state transition depends on the current
attack state, the compromised program and the policy.
If
the
a
As one example of system rules, we now discuss how
to encode domain transition under SELinux. The logic
to decide domain transition is described in [23], and is
non-trivial. Suppose the current domain is OldDom, the
type of the executable is Type and the new domain is
NewDom. We summarize the logic as follows:
1. If OldDom doesn’t have ﬁle execute permission on
Type, the access is denied.
2. If there is a type transition rule: ‘type transition
dac can execute(Uid, Gid, Program) : Decide if a process with
certain uid and gid can execute a program.
dac execve(Uid, Gid, NewUid, NewGid, Program) : Decide the
new uid and gid of a process after executing a program.
se can execute prog(Domain, Program, NewDomain) : Decide if a
process with certain domain can execute a program, and what the new
domain is after execution.
aa ﬁle privilege(Proﬁle, File, Mode) : Decide if a process with a
certain proﬁle can access a ﬁle with a certain mode, e.g., read, write,
execute.
aa new proﬁle(Proﬁle, Program, NewProﬁle) : Get the new proﬁle
of a process after executing a program. A proﬁle can be ‘none’
meaning there is no proﬁle conﬁning the process.
Figure 5. Sample System Rules
net_init(proc(Uid,Gid,Domain), [Program]) :-
process_networking(Pid),
process_running(Pid, Uid, Gid, Program,
_, _, Domain).
(a) Initial resources:
network
the attacker can connect to the machine from
load_module_goal(proc(0, _Gid, Domain)) :-
se_domain_privilege(domain(Domain), _,
class(capability), op(sys_module)).
(b) Attack objective: to load a kernel module
Figure 7. Predicates for
States and Goal Attack States
Initial Attack
se_can_execute_type(Domain, Type, NewDomain) :-
se_typetrans(old_dom(Domain),
new_dom(NewDomain), type(Type)),
!,
se_domain_privilege(domain(Domain),
type(Type), class(file), op(execute)),
se_domain_privilege(domain(Domain),
type(NewDomain), class(process),
op(transition)),
se_domain_privilege(domain(NewDomain),
type(Type), class(file), op(entrypoint)).
se_can_execute_type(Domain, Type, NewDomain) :-
se_domain_privilege(domain(Domain),
type(Type), class(file), op(execute)),
se_domain_privilege(domain(Domain), type(Type),
class(file), op(execute_no_trans)),
NewDomain = Domain.
return
if s is already a graph node then
Add s as a graph node
if s is a goal attack state then
1: function GENERATE GRAPH NODE(s)
2:
3:
4:
5:
6:
7:
8:
9:
10:
1: function GENERATE HOST ATTACK GRAPH
2:
3:
return
s(cid:48) ← the attack state after executing prog
Add (s, s(cid:48)) as a graph edge with label prog
Generate Graph Node(s(cid:48))
for all Initial attack state s do
Generate Graph Node(s)
for all program prog that s can execute do
Figure 6. Rules for Domain Transition
Figure 8. Algorithm for Host Attack Graph
Generation
OldDom Type: process NewDom’, the access is
granted only when OldDom has process transition
permission on Type and NewDom has ﬁle entry-
point permission on Type. Otherwise the access is
denied. If the access is granted, the process runs on
the domain NewDom after executing the program.
3. If there isn’t such a type transition rule, the ac-
cess is granted only when OldDom has ﬁle exe-
cute no trans permission on Type. Otherwise the
access is denied. If the access is granted, the pro-
cess runs on the original domain OldDom after ex-
ecuting the program.
Using logic programming the domain transition logic
can be encoded naturally. Related Prolog code is shown
in Figure 6.
The initial resources of the attacker can be repre-
sented as a set of initial attack states. Suppose the at-
tacker can connect to the machine from the network, the
initial attack states are encoded in Figure 7(a). Simi-
larly, we use a set of goal attack states to represent the
objective of the attacker. The encoding of the objective
to load a kernel module is depicted in Figure 7(b).
Given the initial attack states and the goal attack
states, we can generate the host attack graph that con-
tains all the potential states that the attacker can control.
The pseudo code is depicted in Figure 8.
4.3 Attack Path Analyzer
Attack Path Analyzer ﬁnds all the minimal attack
paths in a host attack graph. Figure 9 describes the it-
erative algorithm used by Attack Path Analyzer. The al-
gorithm repeatedly updates a set of paths for each node
until all the sets are stablized.
for all initial attack state node v do
repeat
V ← V ∪ vg
for all goal attack state node v do
add an edge from v to vg,
the exploited program for the edge is empty
for all v ∈ V do
MP(v) ← φ
MP(v) ← {φ}
stable ← true
for all e ∈ E do
1: function GENERATE MINIMAL ATTACK PATHS
2:
3:
4:
5:
6:
7:
8:
9:
10:
11:
12:
13:
14:
15:
16:
17:
18:
19:
20:
21:
for all p ∈ MP(e.v1) do
p(cid:48) ← append(p, e)
if ∃p0 ∈ MP(e.v2) s.t. V (p(cid:48)) ⊂ V (p0) then
if not ∃p1 ∈ MP(e.v2) s.t. V (p(cid:48)) ⊃ V (p1) then
Remove all such paths from MP(e.v2)
MP(e.v2) ← MP(e.v2) ∪ {p(cid:48)}
stable ← false
until stable
return MP(vg)
Symbols
V
E
vg
MP
e.v1, e.v2
V (p)
append(p, e)
Meaning
The set of host attack graph nodes
The set of host attack graph edges
The virtual “goal” node added such that each goal
attack state has an edge to vg
MP(v) stores the set of minimal attack paths to
node v
The starting node and ending node of an edge e
The set of all exploited programs along the path p
Append edge e to the end of path p
Figure 9. Minimal Attack Paths Generation
4.4 Tool Status
We have implemented VulSAN in Linux. VulSAN
has been used to evaluate SELinux and AppArmor in
several Linux distributions. We plan to further improve
the tool and release it to the public in the future (possi-
bly under the terms and conditions of the GNU General