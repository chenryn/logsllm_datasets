_wireless, _mdsnresponder or _securityd the kernel exploit payload executed
after exploiting one of the applications usually escalates the privileges of the
running process to those of the root user. Without this step, operations like
remounting the root fi lesystem for write access, or modifying fi les that are owned
by the root user, would not be possible. Both of these are required for the initial
jailbreak installation. Kernel exploits that are used only for untethering after
a reboot are usually already executed as the root user and therefore do not
require this step.
From within the kernel, it very easy to escalate the privileges of the currently
running process. All that is required is modifying the credentials attached to
its proc_t structure. This structure is defi ned as struct proc within the fi le
/bsd/sys/proc_internal.h of the XNU source code. Depending on how the
kernel exploit payload was started, you have different ways to get a pointer to
the proc_t structure of the current process. In many previous public iOS kernel
exploits, different kernel vulnerabilities are used to overwrite the address of a
system call handler inside the system call table. The kernel exploit payload is
then triggered by calling the overwritten system call. In this case, it is trivial
to get access to the proc_t structure, because it is supplied to the system call
handler as its fi rst parameter!
A more generic way to get the address of the proc_t structure is to call the
kernel function current_proc(), which retrieves the address of the structure.
This function is an exported symbol of the kernel and therefore very easy to
fi nd. Because the original kernel exploit can determine the exact kernel v ersion
used, it can hard-code the address of this function into the kernel exploit, because
there is no address randomization inside the kernel.
cc1100..iinndddd 331100 44//1166//22001122 55::4477::4433 PPMM
Chapter 10 n Jailbreaking 311
A third option to retrieve the address of the proc_t structure is to use the
kernel address information leak through the sysctl interface. This technique
was fi rst documented by noir (www.phrack.org/issues.html?issue=60&id=06)
against the OpenBSD kernel and later used by nemo (www.phrack.org/issues.
html?issue=64&id=11) for the XNU kernel. This information leak allows user-
space processes to retrieve the kernel address of the proc_t structure of a process
through a simple sysctl() system call.
After the address of the process’s proc_t structure is retrieved, its p_ucred
member is used to modify the attached ucred structure. This element can be
accessed through the proc_ucred() function, or accessed directly. The disas-
sembly reveals that the offset of the p_ucred fi eld inside the structure is 0x84
in current versions of iOS:
_proc_ucred:
LDR.W R0, [R0,#0x84]
BX LR
The defi nition of the struct ucred is located in the fi le /bsd/sys/ucred.h.
Among other things it contains the different user and group IDs of the identity
owning the process:
struct ucred {
TAILQ_ENTRY(ucred) cr_link; /* never modify this without
KAUTH_CRED_HASH_LOCK */
u_long cr_ref; /* reference count */
struct posix_cred {
/*
* The credential hash depends on everything from this point on
* (see kauth_cred_get_hashkey)
*/
uid_t cr_uid; /* effective user id */
uid_t cr_ruid; /* real user id */
uid_t cr_svuid; /* saved user id */
short cr_ngroups; /* number of groups in advisory list */
gid_t cr_groups[NGROUPS]; /* advisory group list */
gid_t cr_rgid; /* real group id */
gid_t cr_svgid; /* saved group id */
uid_t cr_gmuid; /* UID for group membership purposes */
int cr_flags; /* flags on credential */
} cr_posix;
struct label *cr_label; /* MAC label */
/*
* NOTE: If anything else (besides the flags)
* added after the label, you must change
* kauth_cred_find().
*/
struct au_session cr_audit; /* user auditing data */
};
cc1100..iinndddd 331111 44//1166//22001122 55::4477::4444 PPMM
312 Chapter 10 n Jailbreaking
To escalate the privileges of the identity owning the process, the cr_uid fi eld,
which is located at offset 0x0c, can be set to 0. The offset is 0x0c and not 0x08
as you might expect, because a TAILQ_ENTRY is eight bytes wide. Of course, the
other elements can also be patched. However, once the uid is set to zero the
userspace process can use system calls to change its permissions.
Kernel Patching
The most important part of the kernel-level payload is to apply the kernel-level
patches to the kernel code and data to actually disable the security features, so
that unsigned code can be executed and the device is jailbroken. Throughout
the years, the different jailbreaking groups have all developed their own sets
of patches, therefore most jailbreaks come with different kernel patches, which
sometimes results in different features. The most popular set of kernel patches
was developed by comex and is available in his github datautils0 repository
(https://github.com/comex/datautils0). It is widely used by not only comex’s
own http://jailbreakme.com, but also as a reference by many of those doing
research into the iOS kernel. However, it is unlikely that these patches in this
particular GitHub repository, will be ported to future kernel versions, because
comex took an internship at Apple and most probably had to sign contracts that
stop him from working on future iPhone jailbreaks.
Nevertheless, the following sections introduce you to these patches and
explain the idea behind them, which will enable you to produce your own set
of kernel patches for future versions of iOS.
security.mac.proc_enforce
The sysctl variable security.mac.proc_enforce controls whether MAC poli-
cies are enforced on process operations. When disabled, various process policy
checks and limitations are switched off. For example, limitations exist on the
fork(), setpriority(), kill() and wait() system calls. In addition to that, this
variable controls whether the digital signature of code-signing blobs is validated.
When disabled, it is possible to execute binaries that have code-signing blobs
that have been signed with a wrong key.
In iOS prior to 4.3 this was used as a shortcut in untethering exploits that
were running as root user. They could disable this variable via the sysctl()
system call, which allowed them to execute a binary containing the kernel
exploit. It was not necessary to write the whole kernel exploit using return-
oriented programming as required today. To stop this attack, Apple made the
sysctl variable read only in iOS 4.3.
From within the kernel payload, disabling the variable is not a big problem,
because you can just assign the value 0 to it. The only work required is to deter-
mine the address of the variable in memory. A potential solution is to scan the
cc1100..iinndddd 331122 44//1166//22001122 55::4477::4444 PPMM
Chapter 10 n Jailbreaking 313
sysctl_set segment of the kernel for the defi nition of the sysctl variable
—
and its address. Because this variable is within the data segment of the kernel,
it is always at a static address.
cs_enforcement_disable (kernel)
The source code of the page fault handler, which is contained in the fi le /osfmk/
vm/vm_fault.c, contains a variable called cs_enforcement_disable that controls
whether or not code signing is enforced by the page fault handler. In the iOS
kernel this variable is initialized to 0 by default, which enables the enforcement.
Setting it to a non-zero value, on the other hand, disables the enforcement.
When you look at the code you will see that this variable is used only two
times and both uses are within the vm_fault_enter() function. The following
code is the fi rst location that uses this variable and the code comment explains
in detail what is happening in this piece of code:
/* If the map is switched, and is switch-protected, we must protect
* some pages from being write-faulted: immutable pages because by
* definition they may not be written, and executable pages because
* that would provide a way to inject unsigned code.
* If the page is immutable, we can simply return. However, we can’t
* immediately determine whether a page is executable anywhere. But,
* we can disconnect it everywhere and remove the executable
* protection from the current map.
* We do that below right before we do the
* PMAP_ENTER.
*/
if(!cs_enforcement_disable && map_is_switched &&
map_is_switch_protected && page_immutable(m, prot) &&
(prot & VM_PROT_WRITE))
{
return KERN_CODESIGN_ERROR;
}
As you can see in the code, if the cs_enforcement_disable fl ag is set, the
other condition checks are skipped. The same is true for the code imme-
diately following that checks whether a page is unsigned but wants to
be executable:
if (m->cs_tainted ||
(( !cs_enforcement_disable && !cs_bypass ) &&
(/* The page is unsigned and wants to be executable */
(!m->cs_validated && (prot & VM_PROT_EXECUTE)) ||
/* ... */
(page_immutable(m, prot) && ((prot & VM_PROT_WRITE) || m->wpmapped))
))
)
{
cc1100..iinndddd 331133 44//1166//22001122 55::4477::4444 PPMM
314 Chapter 10 n Jailbreaking
In both cases all protection is disabled when the cs_enforcement_disable
variable is set. Considering that the variable is initialized to 0 and is not written
to at all, we are lucky that it is not optimized away by the compiler. Therefore it
can be patched by the jailbreak, after it has been located inside the kernel binary.
For iOS 5, comex has chosen to no longer patch the variable, but to patch the
code checking it. Patching the code directly is also the way to go if the variable
is no longer used in a future version of iOS.
The kernel patch generator from datautils0 fi nds this check by searching
for the byte pattern:
df f8 88 33 1d ee 90 0f a2 6a 1b 68 00 2b
This disassembles to:
80045730 LDR.W R3, =dword_802DE330
80045734 MRC p15, 0, R0,c13,c0, 4
80045738 LDR R2, [R4,#0x28]
8004573A LDR R3, [R3]
8004573C CMP R3, #0
You can see here that the cs_enforcement_disable variable is located at the
address 0x802DE330, its value is loaded into the R3 register, and then compared
against 0. The easiest way to patch this is to load the value 1 into the R3 register
instead of dereferencing it. This is enough to patch both uses of the variable
in vm_fault_enter(), because the compiler has generated code that does not
reload the variable and instead uses the register cached copy of it.
cs_enforcement_disable (AMFI)
The Apple Mobile File Integrity (AMFI) kernel module, discussed in Chapter 4,
checks for the presence of several arguments. One of these is cs_enforcement_
disable. If it is set, this variable infl uences how the AMFI_vnode_check_exec()
policy handler works. As you can see in the decompiled version of the policy
check, it stops AMFI from setting the CS_HARD and CS_KILL fl ags inside the pro-
cess’s code-signing fl ags:
int AMFI_vnode_check_exec(kauth_cred_t cred, struct vnode *vp, struct label
*label, struct label *execlabel, struct componentname *cnp, u_int *csfl ags)
{
if ( !cs_enforcement_disable )
{
if ( !csfl ags )
Assert(
“/SourceCache/AppleMobileFileIntegrity/AppleMobileFileIntegrity-
79/AppleMobileFileIntegrity.cpp”,
872,
“csfl ags”);
cc1100..iinndddd 331144 44//1166//22001122 55::4477::4444 PPMM
Chapter 10 n Jailbreaking 315
*csfl ags |= CS_HARD|CS_KILL;
}
return 0;
}
If the CS_HARD and CS_KILL fl ags are not set, the code signing is effectively
disabled. It is, however, unclear why the current jailbreaks patch this variable,
because the mac_vnode_check_exec() policy check, which is used inside the
execve() and posix_spawn() system calls, is already disabled by the proc_
enforce patch, as you can see in the following code:
int mac_vnode_check_exec(vfs_context_t ctx, struct vnode *vp,
struct image_params *imgp)
{
kauth_cred_t cred;
int error;
if (!mac_vnode_enforce || !mac_proc_enforce)
return (0);
cred = vfs_context_ucred(ctx);
MAC_CHECK(vnode_check_exec, cred, vp, vp->v_label,
(imgp != NULL) ? imgp->ip_execlabelp : NULL,
(imgp != NULL) ? &imgp->ip_ndp->ni_cnd : NULL,
(imgp != NULL) ? &imgp->ip_csflags : NULL);
return (error);
}
If the proc_enforce fl ag is set to 0, which is done in most public jailbreaks,
the AMFI policy check is not executed at all. Instead, the check returns success.
Hence, this patch is useful only if the proc_enforce fl ag is not touched, which
in some non-public jailbreaks we know of, is the case.
PE_i_can_has_debugger
The iOS kernel exports a function called PE_i_can_has_debugger(). It is used
in various places throughout the kernel and several kernel extensions to deter-
mine whether debugging is allowed. For example, the KDP kernel debugger
cannot be used without this function returning true. Because this function is
not available within the XNU source code, you can read its decompilation here:
int PE_i_can_has_debugger(int *pFlag)
{
int v1; // r1@3
if ( pFlag )
{
if ( debug_enable )
cc1100..iinndddd 331155 44//1166//22001122 55::4477::4444 PPMM
316 Chapter 10 n Jailbreaking
v1 = debug_boot_arg;
else
v1 = 0;
*pFlag = v1;
}
return debug_enable;
}
In jailbreaks before iOS 4.3 this function was patched so that it always returned
true. This seemed to work until we tried to use the KDP kernel debugger.
Setting the debug boot argument resulted in kernel panics in some of the iOS
kernel extensions, because just returning true did not completely emulate
the original function. This is why most current jailbreaks no longer patch the
code of the function, but instead patch the debug_enable variable in memory.
To determine the address of this variable, it is necessary to analyze the code
of the PE_i_can_has_debugger() function. Because this variable is within an
uninitialized data segment of the kernel, this patch can be performed only at
run time. To fi nd the code that initializes this variable during boot, you should
search for the string debug-enabled. It will lead you directly to the code that
copies the value into the variable.
vm_map_enter
When memory is mapped into the address space of a process, the kernel func-
tion vm_map_enter() is called to allocate a range in the virtual address map.
You can trigger this function, for example, by using the mmap() system call. In
the context of a jailbreak, this function is interesting because it enforces the rule
that mapped memory cannot be writable and executable at the same time. The
following code enforces this rule. If you want to see the full code of the func-
tion, have a look into the fi le /osfmk/vm/vm_map.c. As you can see in the code,
the VM_PROT_EXECUTE fl ag is cleared in case the VM_PROT_WRITE fl ag is also set:
kern_return_t vm_map_enter(
vm_map_t map,
vm_map_offset_t *address, /* IN/OUT */
vm_map_size_t size,
vm_map_offset_t mask,
int flags,
vm_object_t object,
vm_object_offset_t offset,
boolean_t needs_copy,
vm_prot_t cur_protection,
vm_prot_t max_protection,
vm_inherit_t inheritance)
{
...
if (cur_protection & VM_PROT_WRITE){
cc1100..iinndddd 331166 44//1166//22001122 55::4477::4444 PPMM
Chapter 10 n Jailbreaking 317