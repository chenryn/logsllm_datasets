Worming through IDEs
David Dworken
`whoami`
●
David Dworken (@ddworken)
●
Security Engineer at Google
○
Standard disclaimer: Opinions expressed are my own
●
Hacking in both senses of the word
○
Writing silly useless but interesting code
○
Breaking serious real code for fun
●
I found and reported 30+ bugs in IDEs over a few month period
○
Note: All bugs in this presentation have either been ﬁxed or declared 
working-as-intended
Why hack developers? 
Production
Why hack developers? 
Production
Where developers think the security boundary is 
Where developers think the security boundary is 
Where IDEs (used to) think the security boundary is 
IDEs are popular!
https://insights.stackoverﬂow.com/survey/2019#technology-_-most-popular-development-environments
VS Code: Trusting Workspace Settings
https://code.visualstudio.com/docs/getstarted/settings
VS Code: Trusting Workspace Settings
Strace is amazing! 
https://strace.io/
Finding bugs with Strace
●
Files that don't exist: `cat /tmp/strace.out | grep ENOENT`
○
Oftentimes ﬁles that don't exist can be used to tweak a conﬁguration and achieve code execution
●
Files that are accessed: `cat /tmp/strace.out | grep open`
○
Knowing what ﬁles are accessed in what order can hint at how a program is processing the input
●
Commands that are run: `cat /tmp/strace.out | grep exec`
○
Look for command injection 
○
Look for ways to achieve code execution using the launched programs (e.g. `__init__.py` ﬁles)
VS Code: Locally resolved node_modules folder
VS Code: Command Injection
https://github.com/microsoft/vscode/blob/c23285f8c8b73228af4cce81721db105542c0cae/extensions/npm/src/features/packageJSONContribution.ts#L258
Visual Studio: Build Conﬁgs
https://docs.microsoft.com/en-us/cpp/build/cmake-projects-in-visual-studio
Note: Visual Studio != Visual Studio Code
Visual Studio: Build Conﬁgs
https://docs.microsoft.com/en-us/cpp/build/cmake-projects-in-visual-studio
Note: Visual Studio != Visual Studio Code
Visual Studio: Build Conﬁgs
https://docs.microsoft.com/en-us/cpp/build/cmake-projects-in-visual-studio
"This is by design, and there is no way to view scripts in 
Visual Studio without also executing them" -Microsoft
Note: Visual Studio != Visual Studio Code
Visual Studio: Similar vuln used in the wild!
https://blog.google/threat-analysis-group/new-campaign-targeting-security-researchers/
Visual Studio: Similar vuln used in the wild!
https://twitter.com/daveaitel/status/1353876096136179718
IntelliJ Vuln: RCE in 2016
http://blog.saynotolinux.com/blog/2016/08/15/jetbrains-ide-remote-code-execution-and-local-ﬁle-disclosure-vulnerability-analysis/
User visits
evil.com
IntelliJ
Open Project
evil.com
Downloads a project
Startup 
Task
Execute
IntelliJ Vuln: RCE in 2016
http://blog.saynotolinux.com/blog/2016/08/15/jetbrains-ide-remote-code-execution-and-local-ﬁle-disclosure-vulnerability-analysis/
IntelliJ Vuln in 2020: Same Vector as 2016
IntelliJ Vuln in 2020: Same Vector as 2016
"However we haven't decided what the ﬁx should be as here 
we need to make a trade-oﬀ between security and 
convenience" -Jetbrains
VIM Vuln from 2019
https://github.com/numirias/security/blob/master/doc/2019-06-04_ace-vim-neovim.md
Notepad Vuln from 2019
https://twitter.com/taviso/status/1133384839321853954
Online IDEs
●
Google Cloud Shell
●
Azure Visual Studio Codespaces
●
AWS Cloud9
●
Github Codespaces
●
Gitpod.io
Online IDEs
●
Google Cloud Shell
●
Azure Visual Studio Codespaces
●
AWS Cloud9
●
Github Codespaces
●
Gitpod.io
Google Cloud Shell: Ruby Language Server 
https://github.com/castwide/solargraph/blob/96bce20d6f3757276b247636895ﬀ0faebf646ad/lib/solargraph/workspace.rb#L165-L173
Google 
Cloud Shell
Eclipse Theia
Theia Ruby 
Extension
Solargraph
Google Cloud Shell: Ruby Language Server 
https://github.com/castwide/solargraph/blob/96bce20d6f3757276b247636895ﬀ0faebf646ad/lib/solargraph/workspace.rb#L165-L173
Google 
Cloud Shell
Eclipse Theia
Theia Ruby 
Extension
Solargraph
Google Cloud Shell: TypeScript Language Server 
https://github.com/castwide/solargraph/blob/96bce20d6f3757276b247636895ﬀ0faebf646ad/lib/solargraph/workspace.rb#L165-L173
AWS Cloud9:  Linting Flags
Github Codespaces: Persisting via Settings Sync
https://github.com/features/codespaces
Github Codespaces: Persisting via Settings Sync
https://github.com/features/codespaces
Github Codespaces: Persisting via Settings Sync
https://github.com/features/codespaces
Writing a worm
Repo 1
Repo 2
Repo 3
Repo 4
Demo
Defenses
https://code.visualstudio.com/docs/editor/workspace-trust
Thank you! 
●
Thank you to Amazon, Eclipse, Github, Gitpod, Google, Jetbrains, Microsoft for 
working with me to address all of these bugs! 
●
POCs: github.com/ddworken/ide-worm 
●
Slides: daviddworken.com/worming-through-ides.pdf
●
Inspiration: 
https://oﬀensi.com/2019/12/16/4-google-cloud-shell-bugs-explained-introduction/
●
Contact Me!
○
PI:EMAIL
○
twitter.com/ddworken
○
keybase.io/dworken
○
linkedin.com/in/ddworken/