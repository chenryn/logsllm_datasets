---
## Page 158
可以通过访问 `http://www.example.net/server-status` 页面来查看 Web 服务器的状态，如图 8-1 所示。假设你的 Web 服务器域名为 `www.example.net`，那么你可以在浏览器中输入该 URL 来加载 `/server-status` 页面。

在状态页上，每个点代表一个 Web 服务器进程，点上的字符表示该进程当前的状态。记分板对于快速了解服务器的运行状况特别有用。记分板中的每个点都对应一个进程，通过观察这些点，可以立即看出 Web 服务器的繁忙程度。页面底部是一个表格，展示了网络流量和每秒响应的 Web 请求数量。

此外，在记分板上方，你会看到一些综合统计信息，包括正在运行的 Apache 版本号、服务器已运行的时间以及所有活动进程的数量等。例如，处于“_”（等待连接）状态的进程表示它们是根据配置文件中的 `MaxClients` 值预先启动的，以准备接收新的服务请求。记分板上还有一些被“.”填充的位置，这表示为新进程预留的空间，其数量取决于配置文件中的设置。

尽管所有这些数据在各种故障排除情况下都非常有用，但记分板尤其方便，因为它可以让你一目了然地了解服务器的当前状态。例如，你可以找到编号为 2-16 的进程，并注意到其中有一个处于 W（发送响应）状态的进程。此外，还可以看到一个处于 K（存活）状态的进程和一个处于 C（清理闲置工作）状态的进程。

### 图8-1 标准的 Apache 状态页
8.5 获取Web服务器统计数据·151

---

## Page 159
152

### 第8章 网站宕机了？追踪Web服务器问题

如果你通过 `curl` 命令访问服务器状态页面，得到的是 HTML 格式的输出信息。然而，如果你将 `auto` 选项传递给服务器状态页，则会得到纯文本格式的输出。这种格式对命令行查询和脚本解析非常有帮助。默认情况下，通过 `curl` 访问服务器状态页时，会返回 HTML 格式的信息。

当你刷新页面时，你会发现记分板上的数据每次请求时都会发生变化。为了持续监控状态页，可以使用 `watch` 命令，它会每 x 秒运行一次指定的命令。例如，如果你想让状态页每 5 秒刷新一次，可以输入：

```bash
$ watch -n 5 'curl http://localhost/server-status?auto'
```

这样，你就可以实时观察到服务器的状态变化。此外，你还可以直接使用 `curl` 命令来获取纯文本格式的输出：

```bash
$ curl http://localhost/server-status?auto
```

输出示例：
```
Scoreboard: wkkwwwwwwwwwwwwwwwwkkkkkw.w.
BusyWorkers: 117586117
BytesPerReq: 116210
BytesPerSec: 40036.7
ReqPerSec: .34452
Uptime: 6801454
PU Load: .0773742
Total Accesses: 2343235
otalkBytes: 265925501
% Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
Dload  Upload   Total   Spent    Left  Speed
0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0
```

8.5 获取Web服务器统计数据·153

---

## Page 160
154

### 8.6 解决常见的Web服务器问题

#### 8.6.1 配置问题

在 Web 服务器上，一个常见且相对简单的问题是配置问题。无论是 Apache 还是 Nginx，都提供了一种方法来检查配置文件的语法。例如，Apache 可以通过 `apache2ctl configtest` 命令来检测配置文件的语法。如果存在语法错误，该命令将指出错误所在的文件和行号，以便于修复。

```bash
$ sudo apache2ctl configtest
Syntax OK
```

Nginx 也提供了类似的语法检查方法，可以使用 `nginx -t` 命令来检查配置文件：

```bash
$ sudo nginx -t
nginx: the configuration file /etc/nginx/nginx.conf syntax is ok
nginx: configuration file /etc/nginx/nginx.conf test failed
```

#### 8.6.2 权限问题

Web 服务器的权限问题也是一个常见的问题。例如，如果你修改了主页 `index.html` 文件的权限，使得任何人都没有读取该文件的权限，那么可能会导致 403 Forbidden 错误。在这种情况下，可以通过 `chmod o+r` 命令来修复这个问题：

```bash
$ chmod o+r /var/www/nginx-default/index.html
```

此外，还需要确保运行 Web 服务器的用户（如 `www-data` 或 `apache`）具有读取文件的权限。可以通过以下命令检查文件权限：

```bash
$ ls -l /var/www/nginx-default/index.html
-rw-r----- 1 root root 1512 2006-08-30 03:39 /var/www/nginx-default/index.html
```

如果发现 `www-data` 用户没有读取权限，可以更改文件的所有者或组所有权：

```bash
$ chown www-data:www-data /var/www/nginx-default/index.html
```

8.6 解决常见的Web服务器问题·155

---

## Page 161
156

#### 8.6.3 高负载

当 Web 服务器性能迟缓或暂时无法提供服务时，首先应检查服务器的负载情况。高负载可能是由多种原因引起的，例如 CPU 密集型任务、RAM 密集型任务或 I/O 密集型任务。可以通过查看 Web 服务器的状态页来确定负载类型。

例如，如果负载是 RAM 密集型的，并且发现越来越多的交换存储空间被使用，那么可能需要调整配置文件中的 `MaxClients` 参数，以避免内存耗尽和交换空间不足的情况。

此外，如果允许日志中启用 DNS 反向解析，Web 服务器进程可能需要在完成请求之前等待每个 DNS 查询的结果，这也可能导致 I/O 饱和。因此，建议禁用 DNS 反向解析以提高性能。

### 8.6 解决常见的Web服务器问题·157

---

## Page 162
158

### 第8章 网站宕机了？追踪Web服务器问题

除了配置和权限问题外，还可能需要诊断 Web 服务器的高负载问题。一旦确认负载过高并且是由 Web 服务器进程引起的问题，就需要进一步确定负载类型并采取相应的措施。

例如，如果负载是 CPU 密集型的，可以考虑优化动态内容生成的代码或增加服务器资源。如果负载是 RAM 密集型的，可以调整 `MaxClients` 参数以减少内存使用。如果负载是 I/O 密集型的，可以优化磁盘 I/O 操作或禁用不必要的日志记录。

总之，通过监控和分析 Web 服务器的状态页，可以有效地诊断和解决许多常见的 Web 服务器问题。