### Circumstances Requiring Device Interactions
In scenarios where a device is compromised or requires a firmware update, the key to managing these situations lies in leveraging the untrusted firmware. This approach involves obtaining cryptographic tokens from the hub, which can prevent forced resets and network interactions at boot time. If the firmware does not cooperate, it will be reset, and gated boot will be invoked, potentially followed by the installation of a firmware patch.

### An Improved Design: CIDER
This section outlines the complete CIDER (Comprehensive IoT Device Enforcement and Recovery) design, addressing the three primary issues of the basic design and summarizing the overall workflow.

#### A. Avoiding Network Interactions at Boot Time
The initial version of gated boot necessitates network contact with the hub each time the device boots, which can significantly extend the boot sequence. However, under normal conditions, this interaction can be offloaded to the firmware, allowing it to overlap hub communication with other tasks or perform it during non-disruptive times.

**BootTicket Mechanism:**
- **Process:**
  1. Gated boot generates a nonce (boot-nonce) and WRLatches it, making it readable but not modifiable by the firmware.
  2. The firmware includes the boot-nonce in a DICE-attested request to the hub for a BootTicket.
  3. If the firmware digest complies with hub policy, the hub signs and sends a BootTicket, including the boot-nonce, to the device.
  4. The firmware saves the BootTicket to unprotected persistent storage.
  5. On the next reset, gated boot verifies the BootTicket's signature and compares the boot-nonce. If valid, it starts the firmware immediately, bypassing the attestation and network interaction.
  6. If the BootTicket is invalid or absent, gated boot reverts to the standard network-based attestation process.

**Security Trade-off:**
- After obtaining a BootTicket, the firmware can survive one more reset even if the hub detects it as outdated or compromised. This risk can be mitigated by shortening the reset trigger timeout.

#### B. Avoiding Uncoordinated Resets at Runtime
Frequent, unexpected resets can disrupt device operations. CIDER introduces an Authenticated Watchdog Timer (AWDT) to manage resets more effectively.

**Authenticated Watchdog Timer (AWDT):**
- **Functionality:**
  - **Initialization:** Gated boot calls `AWDT_Init(T, K)` to start the AWDT, where `T` is the timeout period and `K` is the hub's public key.
  - **Deferral:** The firmware obtains DeferralTickets from the hub to defer the reset. The DeferralTicket includes a nonce, deferral duration, and a signature.
  - **Mechanics:**
    1. The firmware calls `AWDT_GetNonce` and sends a DICE-attested request for a DeferralTicket.
    2. If the hub approves, it issues a DeferralTicket, which the firmware forwards to the AWDT using `AWDT_PutTicket`.
    3. If the hub is unsatisfied, it may coordinate an orderly update and restart with the existing firmware, possibly issuing a shorter-duration DeferralTicket.

**Advantages:**
- Unlike conventional watchdog timers, an AWDT requires authenticated actions, preventing the untrusted firmware from indefinitely delaying resets.

#### C. Isolating the Networking Stack
CIDER isolates the networking stack and control logic into a separate recovery module. This isolation enhances security by protecting CIDER from potential compromises.

**Recovery Module:**
- **Invocation:** Gated boot invokes the recovery module if no valid BootTicket is present.
- **Tasks:**
  - Obtain a BootTicket or firmware update from the hub.
  - Perform DICE attestation of the firmware digest.
  - Save the result to persistent storage and reset the device.

**Security:**
- All network communications are secured with nonces and signatures.

#### D. An Improved Dominance Scheme
Figure 2 summarizes the complete CIDER design, integrating the enhancements described above.

**Workflow:**
- **Reset:**
  - Gated boot initializes DICE, validates and installs any staged firmware updates, and reprovisions CIDER if necessary.
  - If a valid BootTicket is present, CIDER enables the AWDT and transfers control to the firmware.
  - Otherwise, CIDER applies protections and invokes the recovery module.

**Runtime:**
- The firmware periodically interacts with the AWDT and the hub to obtain DeferralTickets and postpone resets.

#### E. Safe Mode
CIDER handles temporary network unavailability by booting into a "safe mode" firmware image, which allows the device to perform offline tasks without compromising its integrity.

**Safe Mode:**
- **Functionality:**
  - Performs essential offline tasks.
  - Disables network and other risky functionalities.
  - Periodically resets to give gated boot another chance to contact the hub.

### Implementation
CIDER has been implemented on three popular IoT platforms:
- **SolidRun HummingBoard Edge (HBE):** High-end, powerful computing board.
- **Raspberry Pi Compute Module 3 (CM3):** Mid-end, generic multi-purpose board.
- **STMicroelectronics Nucleo-L476RG (NL476RG):** Low-end, resource-constrained board.

**Platform-Independent Part:**
- Implemented over a hardware abstraction layer (HAL).
- Consists of approximately 6,300 lines of C code, including a crypto library (3,600 LoC).

**Hub:**
- A simple hub prototype built using Azure Functions, Bouncy Castle, and Azure SQL Database.

**AWDT:**
- Two implementations: 
  1. External hardware attached to the main board.
  2. Software-only solution.

These implementations ensure that CIDER can be deployed across a range of IoT devices, providing robust security and operational efficiency.