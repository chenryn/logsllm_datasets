circumstances such as when the device is indeed compromised
or there is a ﬁrmware update. The key to achieving this will be
to enlist the help of the untrusted ﬁrmware. This help includes
obtaining cryptographic tokens from the hub that allow forced
resets and network interactions at boot time to be avoided.
Failure to cooperate will result in a reset, invocation of gated
boot and, possibly, the installation of a ﬁrmware patch.
V. AN IMPROVED DESIGN
This section presents the complete CIDER design. We
describe how CIDER solves each of the three problems of
the simple design and ﬁnally summarize the overall workﬂow
of CIDER.
A. Avoiding Network Interactions at Boot Time
The basic version of gated boot has to contact the hub over
the network each time the device boots, which can easily add
seconds to an otherwise very fast boot sequence. Fortunately,
the network interaction can be avoided completely under normal
circumstances by ofﬂoading it to the ﬁrmware, which can
overlap hub-communication with other activities, or perform it
at a time when it is not disruptive.
Cooperating ﬁrmware may proactively fetch an authorization
from the hub, named a BootTicket, that allows CIDER to boot
the ﬁrmware directly without contacting the hub during the
next boot. To enable this, gated boot generates a nonce (the
boot-nonce) and WRLatches it, such that the ﬁrmware can
read but not modify it. After control has been transferred
(cid:18)(cid:21)(cid:18)(cid:26)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:53:35 UTC from IEEE Xplore.  Restrictions apply. 
to the ﬁrmware,
the latter includes the boot-nonce in a
DICE-attested request to the hub for a BootTicket. In other
words, the ﬁrmware can request a BootTicket by sending
 signed by the Alias private key as well
as the Alias public key certiﬁcate signed by the DeviceID
private key.
If the ﬁrmware digest is within hub policy, the hub signs
a BootTicket which includes the boot-nonce and sends it to
the device, where the ﬁrmware will save it to unprotected
persistent storage. After the next reset, gated boot will ﬁnd the
BootTicket, verify its signature and compare the boot-nonce
from the BootTicket to the boot-nonce that it had originally
generated and WRLatched the last time it ran. It will also
compare the current ﬁrmware digest with the digest from the
previous boot. If all tests succeed, it will start the ﬁrmware
immediately, omitting the attestation step and the associated
network interaction. Otherwise, or if no BootTicket exists,
gated boot will fall back to the behavior described in the
previous section including a network-based attestation step.
Gated boot replaces the boot-nonce with a new random number
on every boot. Thus, old boot-nonces simply become invalid
and cannot be replayed.
If the ﬁrmware digest does not comply with hub policy, a
new ﬁrmware version must be installed. The hub may choose to
do this in collaboration with the current ﬁrmware. Alternatively,
it may simply refuse to issue a BootTicket which will cause
gated boot to install a new ﬁrmware version at the next reboot
using its own update mechanism.
With this optimization, gated boot will only incur the cost of
network transactions if the previous execution of the ﬁrmware
failed to obtain a valid BootTicket. The latter should only
happen only if 1) the ﬁrmware is uncooperative (either because
of an attack or software failure), 2) the hub refuses to let the
current ﬁrmware version continue its execution on the device
or 3) a prolonged interruption in network connectivity. The
security trade-off of the optimization is that, after obtaining the
BootTicket, the ﬁrmware will be able to survive one more reset,
even if the hub discovers that it is outdated or compromised.
However, this can be compensated by shortening the timeout
period of the reset trigger.
B. Avoiding Uncoordinated Resets at Runtime
As noted in §IV-D, the simple reset trigger can seriously
disrupt the device if it frequently causes unexpected resets.
Here, we describe a reset trigger whose disruption is not worse
than that of a regular software update (e.g., patch Tuesday). For
cooperating devices, resets can be pre-announced and should
only happen when the hub requires a ﬁrmware update but does
not trust the existing ﬁrmware to apply it. We assume this to
be a rare event.
Authenticated watchdog timer (AWDT). We deﬁne an
AWDT as a new abstract hardware device and describe how
CIDER uses an AWDT to implement a reliable, non-disruptive
reset trigger. Since the AWDT is a new device, there is no
off-the-shelf implementation of it. We will present our own
AWDT implementations that repurpose existing hardware in
§VI.
An AWDT is a device that can be programmed to trigger a
reset after a given amount of time unless the reset is deferred
in an authenticated way. Formally, let AWDT_Init(T, K) be
the function that starts the AWDT. The AWDT will trigger a
reset T seconds after AWDT_Init is called. The K parameter is
a public key for signature veriﬁcation. AWDT_Init is a latched
operation. Once AWDT_Init has been called, its effect cannot
be undone nor can it be called again until the next reset.
However, AWDT expiration can be deferred in an authen-
ticated way. If the AWDT is provided with a voucher signed
with the private key that corresponds to the public key K, it will
extend the time-to-reset by the number of seconds stated in the
voucher. We call such a voucher a DeferralTicket. It has three
components: a nonce (to avoid replays), the number of seconds
by which the reset should be deferred and a signature over the
other components. The second AWDT interface AWDT_GetNonce
returns the nonce while the third interface AWDT_PutTicket
hands over a DeferralTicket to the AWDT. AWDT_PutTicket
checks the nonce and the signature on the DeferralTicket
and, if both tests succeed, extends the time-to-reset.
AWDT in CIDER. CIDER gated boot calls AWDT_Init(T, K)
to initialize the reset trigger, where K is the hub public key and
T is an appropriate timeout period (e.g., one day). Once control
has passed to the ﬁrmware, it is the task of the ﬁrmware to
obtain DeferralTickets to prevent the AWDT from resetting
the device. The mechanics of this are analogous to those of
obtaining a BootTicket. The ﬁrmware calls AWDT_GetNonce
and sends a DICE-attested request for a DeferralTicket to
the hub. The hub decides whether to issue a DeferralTicket
based on the ﬁrmware hash and the DeviceID. If the hub is
satisﬁed, it issues a DeferralTicket and sends it to the device.
The ﬁrmware can then forward the ticket to the AWDT by
calling AWDT_PutTicket.
If the hub is dissatisﬁed with the attestation, it may try to
coordinate an orderly update and restart with the existing
ﬁrmware. This could involve issuing it a shorter-duration
DeferralTicket to enable the device to run until the next
convenient time to apply the update and restart the device.
The main difference between an AWDT and a conventional
watchdog timer is the servicing mechanism. Regular watchdog
timers are serviced through unauthenticated software actions
such as writing a constant to a register. In our setting, the
untrusted ﬁrmware can delay the reset from regular watchdog
timers indeﬁnitely by servicing them. In contrast, an AWDT
can only be serviced with the help of a fresh DeferralTicket
issued by the hub.
The gated boot code informs the ﬁrmware about the initial
AWDT time-to-reset. The ﬁrmware can also see the deferral
time in every DeferralTicket it obtains from the hub for the
AWDT. Thus, the ﬁrmware knows when the AWDT will reset
the device and can make appropriate preparations, such as
hibernating itself, putting the environment into a safe state
and/or restarting the device at a time that is least disruptive.
(cid:18)(cid:21)(cid:19)(cid:17)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:53:35 UTC from IEEE Xplore.  Restrictions apply. 
Reset
DICE/
RWLatch
Patch Staged
Yes
Patch Valid
Patch Installer
Yes
No
No
WRLatch
No
Yes
Firmware
Yes
BootTicket
DeferralTicket
Yes
Networking
Recovery
Module
A
W
D
T
No
Fig. 2: An overview of the complete CIDER design. Neither the
ﬁrmware nor the recovery module (with its isolated networking stack)
can compromise the conﬁdentiality and integrity of CIDER.
C. Isolating the Networking Stack
We isolate the networking stack together with a small
amount of control logic into a separate recovery module. The
exact security implications of this step are discussed in §VII.
CIDER gated boot will invoke the recovery module if no valid
BootTicket is present. The task of the recovery module is to
obtain a BootTicket or a ﬁrmware update from the hub.
The recovery module is a separate binary. We isolate it
using the same isolation-in-time mechanism that CIDER uses
to protect itself from the ﬁrmware. Before invoking the recovery
module, CIDER activates all latches and the AWDT, loads the
binary, places its input parameters into memory and transfers
control to it. The input parameters include the digest of the
ﬁrmware as well as a set of DICE credentials for the recovery
module including an Alias key pair.
When invoked, the recovery module performs a DICE
attestation of the ﬁrmware digest to the hub and requests
a BootTicket. If the ﬁrmware digest is in accordance with
hub policy, the hub returns the BootTicket. Otherwise, the
hub sends a ﬁrmware update. Either way, the recovery module
saves the result to persistent storage an returns control to CIDER
gated boot by resetting the device. All network communications
are secured with nonces and signatures.
D. An Improved Dominance Scheme
Figure 2 summarizes the complete CIDER design. It inte-
grates the enhancements described in this section into the basic
design of Figure 1.
After a reset, CIDER gated boot initializes DICE. This
includes reading KPLATFORM, computing the DeviceID and
Alias keys and RWLatching KPLATFORM. If a ﬁrmware update
was staged during the previous run, CIDER will validate and
install it and reset the device. This mechanism can also update
CIDER itself by replacing its binaries or conﬁguration data on
the storage device. This also includes reprovisioning CIDER
with a new hub public key (e.g., to change device ownership)
or with new network credentials.
In the absence of a staged ﬁrmware update, CIDER will
WRLatch its code and data and look for a BootTicket. If a
valid BootTicket is present, CIDER will enable the AWDT and
transfer control to the ﬁrmware. In all other cases, CIDER will
apply the same protections and invoke the recovery module.
During its execution, the ﬁrmware (or possibly the recovery
module) will periodically interact with the AWDT and the hub
to serve the AWDT valid DeferralTickets to postpone the
reset.
E. Safe Mode
Both gated boot and the AWDT assume the ability to
communicate with the hub for BootTicket fetching and AWDT
servicing. However, our threat model allows for the network
to become temporarily unavailable, e.g., because of a DDoS
attack. There are a range of options for CIDER to handle this
case, representing various trade-offs between availability and
integrity. The optimal choice depends on the application. For
example, for pure sensor devices that merely send data to the
hub while having no ofﬂine function, it may be acceptable to
just wait until gated boot can reach the hub again.
For hybrid devices with ofﬂine functionality, booting into
a “safe mode” ﬁrmware image that is stored on the device
and protected by a WRLatch may be the best option. The
safe mode ﬁrmware allows the device to perform its ofﬂine
tasks but does not enable network or other functionality that
could cause the device to be compromised (e.g., by keeping
the network interface controller (NIC) off). For example, safe
mode elevator ﬁrmware may allow the elevator to operate, but
not support remote diagnostics. This does not appear to give
up any functionality since, by assumption, the connection to
the hub is not available. After some time, the AWDT or the
safe mode ﬁrmware itself may reset the device to give gated
boot another opportunity to contact the hub.
VI. IMPLEMENTATION
We have implemented CIDER on three popular IoT plat-
forms:
• SolidRun HummingBoard Edge (HBE), priced ~$240,
representing a high-end, powerful computing board;
• Raspberry Pi Compute Module 3 (CM3), priced ~$35, in
conjunction with the CM3 IO Board ($120), representing
a mid-end, generic multi-purpose board;
• STMicroelectronics Nucleo-L476RG (NL476RG), priced
~$15, representing a low-end, resource-constrained board.
We separated the implementation of CIDER into a platform-
independent part and a hardware abstraction layer (HAL). The
HAL for each platform implements a common interface on the
hardware available on the platform. The platform-independent
part implements the logic ﬂow as described in §V-D over the
HAL interface and consists of about 6,300 lines of C code.
Most of this code is made up by the crypto library (3,600
LoC). We used the digital signature algorithm (Ed25519) and
SHA2-256 components of the formally veriﬁed High-Assurance
Cryptographic Library (HACL) library [34, 43]. We begin by
describing our hub and AWDT implementations which apply to
(cid:18)(cid:21)(cid:19)(cid:18)
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:53:35 UTC from IEEE Xplore.  Restrictions apply. 
all three platforms. After that, we describe the device-speciﬁc
aspects of the implementation for each of our target platforms.
A. Hub
We built a simple hub prototype to test CIDER end-to-end.
The hub prototype consists of 2,500 lines of C# code based
on Azure Functions [44], using the Bouncy Castle crypto
library [45] and Azure SQL Database for state storage [46].
B. AWDT
The AWDT is a new primitive. No existing MCU implements
it. However, we believe that adding such functionality would
be easy. For example, the HBE’s MCU already has all major
building blocks (i.e., TRNG, crypto accelerator, conventional
watchdog timer), and would only require simple control logic
to implement an AWDT.
Not being able to change the MCU, we present
two
alternative AWDT implementations: 1) using simple hardware
that we attach to the main board and 2) using only software.
Hardware AWDT. We implemented an external authenticated