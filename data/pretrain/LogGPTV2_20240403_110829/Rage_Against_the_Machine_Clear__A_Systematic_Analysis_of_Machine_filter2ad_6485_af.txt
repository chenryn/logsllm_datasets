[52] Mozilla. Spectre mitigations for Value type checks - x86 part. https:
//bugzilla.mozilla.org/show_bug.cgi?id=1433111.
[53] Mozilla. Spider Monkey JS:Value.
https://hg.mozilla.org/
mozilla-central/file/tip/js/public/Value.h.
[54] Mozilla. SpiderMonkey IonMonkey documentation.
[55] Ken
Microsoft
Security
Johnson
Analysis
Center
store
https://msrc-blog.microsoft.com/2018/
(MSRC).
bypass.
05/21/analysis-and-mitigation-of-speculative-%
store-bypass-cve-2018-3639/, 2019.
and mitigation of
speculative
Response
[56] Oleksii Oleksenko, Bohdan Trach, Mark Silberstein, and Christof Fet-
zer. Specfuzz: Bringing spectre-type vulnerabilities to the surface. In
USENIX Security 20.
[57] Riccardo Paccagnella, Licheng Luo, and Christopher W Fletcher. Lord
of the ring (s): Side channel attacks on the cpu on-chip ring interconnect
are practical. arXiv preprint arXiv:2103.03443, 2021.
[58] Zhenxiao Qi, Qian Feng, Yueqiang Cheng, Mengjia Yan, Peng Li, Heng
Yin, and Tao Wei. Spectaint: Speculative taint analysis for discovering
spectre gadgets. 2021.
[59] Hany Ragab, Alyssa Milburn, Kaveh Razavi, Herbert Bos, and Cristiano
Giuffrida. CrossTalk: Speculative Data Leaks Across Cores Are Real.
In S&P, May 2021.
[60] Thomas Rokicki, Clémentine Maurice, and Pierre Laperdrix. Sok: In
search of lost time: A review of javascript timers in browsers. In IEEE
EuroS&P’21.
[61] Gururaj Saileshwar, Christopher W Fletcher, and Moinuddin Qureshi.
Streamline: a fast, ﬂushless cache covert-channel attack by enabling
asynchronous collusion. In ASPLOS 2021.
[62] Rahul Saxena and John William Phillips. Optimized rounding in un-
derﬂow handlers, 2001. US Patent 6,219,684.
[63] Michael Schwarz, Moritz Lipp, Daniel Moghimi, Jo Van Bulck, Julian
Stecklina, Thomas Prescher, and Daniel Gruss. ZombieLoad: Cross-
privilege-boundary data sampling. In CCS’19.
[64] Michael Schwarz, Clémentine Maurice, Daniel Gruss, and Stefan Man-
gard. Fantastic timers and where to ﬁnd them: High-resolution microar-
chitectural attacks in javascript. In FC IFCA 17.
[65] Michael Schwarz, Martin Schwarzl, Moritz Lipp, Jon Masters, and
Daniel Gruss. Netspectre: Read arbitrary memory over network. In
ESORICS 19.
[68] Caroline Trippel, Daniel Lustig, and Margaret Martonosi. Meltdown-
prime and spectreprime: Automatically-synthesized attacks exploiting
invalidation-based coherence protocols. arXiv.
[69] Xabier Ugarte-Pedrero, Davide Balzarotti, Igor Santos, and Pablo G
Bringas. Sok: Deep packer inspection: A longitudinal study of the
complexity of run-time packers. In 2015 IEEE S & P.
[70] Google V8. test-jump-table-assembler.cc:220 commit 251fece. https:
//github.com/v8/.
[71] Jo Van Bulck, Daniel Moghimi, Michael Schwarz, Moritz Lippi, Ma-
rina Minkin, Daniel Genkin, Yuval Yarom, Berk Sunar, Daniel Gruss,
and Frank Piessens. Lvi: Hijacking transient execution through mi-
croarchitectural load value injection. In 2020 IEEE S & P 20.
[72] Jo Van Bulck, Frank Piessens, and Raoul Strackx. Nemesis: Studying
microarchitectural timing leaks in rudimentary cpu interrupt logic. In
ACM CCS 2018.
[73] Jo Van Bulck, Frank Piessens, and Raoul Strackx. SGX-step: A Prac-
tical Attack Framework for Precise Enclave Execution Control. In
SysTEX’17.
[74] Stephan van Schaik, Andrew Kwong, Daniel Genkin, and Yuval Yarom.
Sgaxe: How sgx fails in practice.
[75] Stephan van Schaik, Alyssa Milburn, Sebastian Österlund, Pietro Frigo,
Giorgi Maisuradze, Kaveh Razavi, Herbert Bos, and Cristiano Giuffrida.
RIDL: Rogue in-ﬂight data load. In S&P, May 2019.
[76] Stephan van Schaik, Marina Minkin, Andrew Kwong, Daniel Genkin,
and Yuval Yarom. Cacheout: Leaking data on intel cpus via cache
evictions. arXiv preprint.
[77] WebKit. Browserbench. https://browserbench.org.
[78] Oﬁr Weisse, Jo Van Bulck, Marina Minkin, Daniel Genkin, Baris
Kasikci, Frank Piessens, Mark Silberstein, Raoul Strackx, Thomas F
Wenisch, and Yuval Yarom. Foreshadow-ng: Breaking the virtual mem-
ory abstraction with transient out-of-order execution. 2018.
[79] Pawel Wieczorkiewicz. Intel deep-dive: snoop-assisted L1 Data Sam-
pling.
[80] Wenjie Xiong and Jakub Szefer. Survey of transient execution attacks.
arXiv preprint.
[81] Yuval Yarom and Katrina Falkner. Flush+ reload: a high resolution,
low noise, l3 cache side-channel attack. In USENIX Security 14.
[82] Jann Horn Google Project Zero.
4: speculative store bypass.
project-zero/issues/detail?id=1528, 2019.
Speculative execution, variant
https://bugs.chromium.org/p/
A Reversing Memory Disambiguation
To precisely trigger memory disambiguation mispredictions,
it is essential to reverse engineer the predictor and understand
how it can be massaged into the desired state. When exe-
cuting a load operation, the physical addresses of all prior
stores must be known to decide whether the load should be
forwarded the value from the store buffer (store-to-load for-
warding, when the store and the load alias) or served from the
memory subsystem (when they do not). Since these dependen-
cies introduce signiﬁcant bottlenecks, modern processors rely
1466    30th USENIX Security Symposium
USENIX Association
Listing 4 A function to RE the MD predictor. The ﬁrst 10
imuls used to delay the store address computation create the
ideal conditions for mispredictions.
st_ld: ;rdi: store addr, rsi: load addr
%rep 10 ;Trick to delay the store address
imul
%endrep
;Store
mov
;Load
mov
%rep 10 ;Pronounce load timing
imul
%endrep
ret
DWORD [rdi], 0x42
eax, DWORD [rsi]
rdi, 1
eax, 1
Listing 5 Observing the size and behavior of the per-address
saturation counter
uint8_t *mem = malloc(0x1000);
//Ensure that saturing counter is set to 0
for(i=0;
//Make hoisiting possible
for(i=100; i<120; i++) st_ld(mem, mem+64);
//Trigger a memory ordering machine clear
for(i=120; i<130; i++) st_ld(mem, mem)
i<100; i++) st_ld(mem, mem);
on a memory disambiguation predictor to improve common-
case performance. If a load is predicted not to alias preceding
stores, it can be speculatively executed before the prior stores’
addresses are known (i.e., the load is hoisted). Otherwise, the
load is stalled until aliasing information is available.
Partial reverse engineering of the memory disambiguation
unit behavior was presented in [18], based on a (complex)
analysis of Intel patent US8549263B2 [44]. In contrast, we
present a full reverse engineering effort (including features
such as 4k aliasing, ﬂush counter, etc.) entirely based on a
simple implementation—st_ld function in Listing 4. By
surrounding the st_ld function with instrumentation code
to measure the timing and the number of machine clears, we
were able to accurately detect the status of the predictor for
every call to st_ld.
Our ﬁrst experiment, illustrated in Listing 5, is designed
to observe how many missed load hoisting opportunities are
needed to switch the predictor state. As shown in the corre-
sponding plot in Figure 11, after 15 non-aliasing loads, we
observed that subsequent st_ld invocations are faster due to
a correct hoisting prediction. This matches the design sug-
gested in the patent, with the predictor implemented as a 4-bit
saturating counter incremented every time the load does not ul-
timately alias with preceding stores (and reset to 0 otherwise).
Load hoisting is predicted only if the counter is saturated. To
ensure that the hoisting state is reached, we later scheduled
an aliasing load and checked that the load was incorrectly
hoisted by observing a machine clear.
According to the Intel patent [44] there are 64 per-address
predictors (i.e., saturating counters) and the suggested hash-
ing function simply uses the lowest 6 bits of the instruction
pointer of the load. We veriﬁed these numbers using the func-
Figure 11: Timing measurement of the experiment in Listing
5. Orange bar: machine clear memory ordering observed
Listing 6 Snippet observing activation of never-hoisting state
uint8_t *mem = malloc(0x1000);
for(int i=0; i<10; i++)
for(int j=0; j<19; j++)
st_ld(mem, mem+64);
st_ld(mem, mem);
Figure 12: Never-hoisting state. Orange bar: MC observed
tion st_ld_offset, which is an exact copy of the st_ld
function but with a number of nops added in the preamble
(which we change at every run. The goal is to observe if
two unrelated loads in these functions are able to inﬂuence
each other when varying the number of nops. In our tested
CPUs, we observed machine clears when two unrelated loads
in st_ld and st_ld_offset are located exactly 256k bytes
apart in memory (k ∈ N). We used machine clear observations
to detect that the per-address prediction of st_ld was affected
by the execution of st_ld_offset. Our results match the de-
sign suggested in the patent, except we observed 256 (rather
than 64) predictors hashing the lowest 8 bits of the instruc-
tion pointer. With these implementation-speciﬁc numbers, an
attacker can easily mistrain the predictor of a victim load
instruction just with knowledge of its location in memory.
One important additional component of the predictor is the
presence of a watchdog. A never-hoisting global state is used
as a fallback to temporarily disable the predictor when the
CPU has decided it may be counterproductive. To reverse
engineer the behavior, we triggered as many mispredictions
as possible to check if hoisting was eventually disabled. The
resulting code is illustrated in Listing 6 and the numbers in
Figure 12 shows that, after 4 machine clears, the predictor
is disabled. Indeed, even after 19 further non-aliasing loads
(normally abundantly sufﬁcient to switch to a hoisting state),
the execution time of st_ld does not decrease.
We also reversed the conditions under which the watch-
dog is enabled/disabled. The patent suggests the watchdog
USENIX Association
30th USENIX Security Symposium    1467
100105110115120125130i-th call to st_ld050100Clock cycles0102030405060708090100110120i-th call to st_ld0255075100Clock cyclesFigure 13: MCs observed after n independent store-loads
starting from the never-hoisting state
is enabled when the value of a ﬂush counter is smaller than
0, and disabled otherwise. The ﬂush counter is decremented
every MD MC and incremented every n correctly hoisted
loads. To reverse engineer this behavior, we measure how
many MCs can be triggered in a row before the ﬂush counter
is decremented to -1 and thus the predictor is disabled. As
shown in the ﬁgure 13, we never observed more than 4 MCs
in a row. This suggests that the ﬂush counter is a 2-bit sat-
urating counter. The machine clear patterns also reveal the
ﬂush counter is incremented every 64 correctly hoisted loads.
Lastly, since every run starts with the watchdog disabled, our
results show that, to switch from a never-hoisting to a predict-
hoisting state, 15+64 non-aliasing loads are sufﬁcient. The
ﬁrst 15 loads are necessary to bring the per-address predictor
to the hoisting state. The next 64 loads record a would-be
correct prediction of the per-address predictor. After 64 such
(unused) predictions, the ﬂush counter is incremented to leave
the never-hoisting state.
Listing 7 Snippet verifying 4k aliasing-MD unit interaction
//Force no-hoisting prediction
for(i=0;
i<10; i++) st_ld(mem+0x1000, mem+0x1000);
for(i=10; i<20; i++) st_ld(mem+0x2000, mem+0x2000);
//Cause 4k aliasing
for(i=20; i<40; i++) st_ld(mem+0x1000, mem+0x2000);
Figure 14: Timing measurements of Listing 7. Orange: incre-
ment of LD_BLOCKS_PARTIAL.ADDRESS_ALIAS
Finally, we examined the interaction between memory dis-
ambiguation and 4k aliasing. On Intel CPUs, when a store is
followed by a load matching its 4KB page offset, the store-
to-load forwarding (STL) logic forwards the stored value,
and, in case of a false match (4k aliasing), a few-cycle over-
head is needed to re-issue the load [38]. With the help of the
performance counter LD_BLOCKS_PARTIAL.ADDRESS_ALIAS
and the experiment shown in Listing 7, we veriﬁed that 4k
aliasing can only happen when a no-hoist prediction is made
Figure 15: Memory disambiguation unit – simpliﬁed view
as shown in Figure 14. Indeed, STL can be performed only
if the store-load pair is executed in order. Additionally, Fig-
ure 14 shows that 4k aliasing introduces a slight performance
overhead on top of an incorrect no-hoisting guess of the MD
predictor. Figure 15 presents a simpliﬁed view of the reversed
memory disambiguation predictor. In conclusion, an attacker
can precisely mistrain the memory disambiguation predictor
by satisfying only two requirements: (1) knowing the instruc-
tion pointer of the victim load; (2) issuing (in the worst-case
scenario) 15+64=79 non-aliasing store-load pairs to train the
predictor to the hoisting state.
B Root-Causes Description Table
Acronym
Description
BHT
BTB
RSB
MD
NM
DE
UD
GP
AC
SS
PF
PF - U/S Bit
PF - R/W Bit
PF - P Bit
PF - PKU
BR
FP
SMC
XMC
MO
MASKMOV
A/D Bits
TSX
UC
PRM
HW Interrupts
Branch History Table
Branch Target Buffer
Return Stack Buffer
Memory Disabmbiguation Unit
Device Not Available Exception
Divide-by-Zero Exception
Invalid Opcode Exception
General Protection Fault
Alignment Check Exception
Stack Segment Exception
Page Fault
Page Table Entry User/Supervisor Bit PF
Page Table Entry Read/Write Bit PF
Page Table Entry Present Bit PF
Page Table Entry Protection Keys PF
Bound Range Exceeded Exception
Floating Point Assist
Self-Modifying Code
Cross-Modifying Code
Memory Ordering Principles Violation
Masked Load/Store Instruction Assist
Page Table Entry Access/Dirty Bits Assist
Intel TSX Transaction Abort
Uncachable Memory Assist
Processor Reserved Memory Assist
Hardware Interrupts
1468    30th USENIX Security Symposium
USENIX Association
1579143207271335399Number of independent store-loads1234Total measuredMachine Clears0510152025303540i-th call to st_ld5060708090Clock cycles