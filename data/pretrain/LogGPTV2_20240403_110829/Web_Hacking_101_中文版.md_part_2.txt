### 时刻关注 URL 参数的传递与渲染
务必密切关注通过 URL 参数传递并渲染到站点内容中的信息。这些参数可能成为攻击者利用的机会，以欺骗受害者执行恶意操作。

### HTML 注入漏洞总结
HTML 注入向网站和开发者展示了潜在的安全漏洞，因为这种攻击手段可以误导用户，诱使他们提交敏感信息或访问恶意网站，类似于钓鱼攻击。发现此类漏洞不仅需要提交 HTML 代码，还需要了解网站如何处理和渲染输入文本，例如 URI 编码字符。虽然内容伪造与 HTML 注入不完全相同，但它们都涉及将用户的输入反映在网页上，从而对受害者造成影响。因此，攻击者应仔细寻找机会来操纵 URL 参数，使其在网站上被正确渲染。

### HTTP 参数污染 (HPP)
**作者：Peter Yaworski**
**译者：飞龙**
**协议：CC BY-NC-SA 4.0**

#### 描述
HTTP 参数污染（HPP）发生在网站接受用户输入，并将其用于生成发送给其他系统的 HTTP 请求，而未进行适当的输出验证时。这种攻击可以通过服务器端或客户端发起。

例如，在 StackExchange 上，SilverlightFox 提供了一个服务端 HPP 攻击的例子。假设我们有一个网站 `https://www.example.com/transferMoney.php`，它通过 POST 方法接收以下参数：
```
amount=1000&fromAccount=12345
```

当应用程序处理此请求时，会生成一个新的 POST 请求发送给后端系统 `https://backend.example/doTransfer.php`，其中包含固定的 `toAccount` 参数：
```
toAccount=9876&amount=1000&fromAccount=12345
```

如果攻击者修改了发往该网站的 POST 请求，添加一个重复的 `toAccount` 参数：
```
amount=1000&fromAccount=12345&toAccount=99999
```

存在 HPP 漏洞的网站可能会将请求转发给后端系统，如下所示：
```
toAccount=9876&amount=1000&fromAccount=12345&toAccount=99999
```

在这种情况下，由攻击者提供的第二个 `toAccount` 参数会覆盖后端请求，导致资金被转移到攻击者的账户 `99999` 而不是预期的账户 `9876`。

#### 客户端 HPP
另一方面，客户端 HPP 涉及向链接和其他 `src` 属性注入额外的参数。例如，OWASP 给出的一个例子中，假设我们有以下代码：
```html
<a href="http://host/page.php?par=<?php echo htmlspecialchars($_GET['par']); ?>">View Me!</a>
```

这段代码从 URL 接受 `par` 的值，并确保其安全后创建链接。如果攻击者提交了如下请求：
```
http://host/page.php?par=123%26action=edit
```

生成的链接可能变为：
```html
<a href="http://host/page.php?par=123&action=edit">View Me!</a>
```

这会导致应用执行编辑操作而非查看操作。

#### 示例

1. **HackerOne 社交分享按钮**
   - **难度：低**
   - **URL:** `https://hackerone.com/blog/introducing-signal-and-impact`
   - **报告链接:** `https://hackerone.com/reports/105953`
   - **报告日期:** 2015年12月18日
   - **奖金:** $500
   - **描述:** HackerOne 包含用于在社交媒体平台上分享内容的链接，如 Twitter 和 Facebook。这些链接包含特定的参数。攻击者可以在链接中追加另一个 URL 参数，指向任意站点。HackerOne 将这些参数包含在发送给社交媒体平台的 POST 请求中，导致非预期行为。例如，将 URL 修改为：
     ```
     https://hackerone.com/blog/introducing-signal?&u=https://vk.com/durov
     ```
     如果访客点击了这个恶意更新的链接，尝试通过社交媒体分享内容，最终的链接会是：
     ```
     https://www.facebook.com/sharer.php?u=https://hackerone.com/blog/introducing-signal?&u=https://vk.com/durov
     ```
     这里，最后一个 `u` 参数优先级更高，会被 Facebook 使用。

2. **Twitter 取消订阅提醒**
   - **难度：低**
   - **URL:** `twitter.com`
   - **报告链接:** `https://blog.mert.ninja/twitter-hpp-vulnerability/`
   - **报告日期:** 2015年8月23日
   - **奖金:** $700
   - **描述:** 2015年8月，黑客 Mert Tasci 在取消接收 Twitter 提醒时注意到一个有趣的 URL：
     ```
     https://twitter.com/i/u?t=1&cn=bWV&sig=657&iid=F6542&uid=1134885524&nid=22+26
     ```
     他尝试将 `UID` 参数修改为其他用户，但失败了。然后他添加了第二个 `UID` 参数，成功取消了其他用户的邮件提醒，证明 Twitter 存在 HPP 漏洞。

3. **Twitter Web Intents**
   - **难度：低**
   - **URL:** `twitter.com`
   - **报告链接:** `https://ericrafaloff.com/parameter-tampering-attack-on-twitter-web-intents`
   - **报告日期:** 2015年11月
   - **奖金:** 未知
   - **描述:** 根据文档，Twitter Web Intents 提供优化的数据流，用于处理推文和 Twitter 用户的操作。经过充分测试，Eric Rafaloff 发现所有四种 Intent 类型（关注、喜欢、转发和发推）都存在 HPP 漏洞。例如，如果 Eric 创建带有两个 `screen_name` 参数的 URL：
     ```
     https://twitter.com/intent/follow?screen_name=twitter&scnreen_name=erictest3
     ```
     Twitter 会优先处理第二个 `screen_name` 参数，导致用户关注 `erictest3` 而非 `twitter`。

#### 总结
HTTP 参数污染的风险取决于后端所执行的操作以及被污染参数的用途。发现这些漏洞需要丰富的经验，因为网站的后端行为对黑客来说通常是黑盒。社交媒体链接是一个不错的起点，但在测试类似 `UID` 参数替换时，也要考虑到 HPP 的可能性。