.Sp
Open returns nonzero upon success, the undefined value otherwise.  If
the \f(CW\*(C`open\*(C'\fR involved a pipe, the return value happens to be the pid of
the subprocess.
.Sp
If you're running Perl on a system that distinguishes between text
files and binary files, then you should check out \*(L"binmode\*(R" for tips
for dealing with this.  The key distinction between systems that need
\&\f(CW\*(C`binmode\*(C'\fR and those that don't is their text file formats.  Systems
like Unix, Mac \s-1OS\s0, and Plan 9, which delimit lines with a single
character, and which encode that character in C as \f(CW"\en"\fR, do not
need \f(CW\*(C`binmode\*(C'\fR.  The rest need it.
.Sp
When opening a file, it's usually a bad idea to continue normal execution
if the request failed, so \f(CW\*(C`open\*(C'\fR is frequently used in connection with
\&\f(CW\*(C`die\*(C'\fR.  Even if \f(CW\*(C`die\*(C'\fR won't do what you want (say, in a \s-1CGI\s0 script,
where you want to make a nicely formatted error message (but there are
modules that can help with that problem)) you should always check
the return value from opening a file.  The infrequent exception is when
working with an unopened filehandle is actually what you want to do.
.Sp
As a special case the 3 arg form with a read/write mode and the third
argument being \f(CW\*(C`undef\*(C'\fR:
.Sp
.Vb 1
\&    open(TMP, "+>", undef) or die ...
.Ve
.Sp
opens a filehandle to an anonymous temporary file.  Also using \*(L"+', \e$variable) || ..
.Ve
.Sp
Though if you try to re-open \f(CW\*(C`STDOUT\*(C'\fR or \f(CW\*(C`STDERR\*(C'\fR as an \*(L"in memory\*(R"
file, you have to close it first:
.Sp
.Vb 2
\&    close STDOUT;
\&    open STDOUT, '>', \e$variable or die "Can't open STDOUT: $!";
.Ve
.Sp
Examples:
.Sp
.Vb 3
\&    $ARTICLE = 100;
\&    open ARTICLE or die "Can't find article $ARTICLE: $!\en";
\&    while () {...
.Ve
.Sp
.Vb 2
\&    open(LOG, '>>/usr/spool/news/twitlog');     # (log is reserved)
\&    # if the open fails, output is discarded
.Ve
.Sp
.Vb 2
\&    open(DBASE, '+/tmp/Tmp$$")          # $$ is our process id
\&        or die "Can't start sort: $!";
.Ve
.Sp
.Vb 4
\&    # in memory files
\&    open(MEMORY,'>', \e$var)
\&        or die "Can't open memory file: $!";
\&    print MEMORY "foo!\en";                      # output will end up in $var
.Ve
.Sp
.Vb 1
\&    # process argument list of files along with any includes
.Ve
.Sp
.Vb 3
\&    foreach $file (@ARGV) {
\&        process($file, 'fh00');
\&    }
.Ve
.Sp
.Vb 7
\&    sub process {
\&        my($filename, $input) = @_;
\&        $input++;               # this is a string increment
\&        unless (open($input, $filename)) {
\&            print STDERR "Can't open $filename: $!\en";
\&            return;
\&        }
.Ve
.Sp
.Vb 9
\&        local $_;
\&        while () {              # note use of indirection
\&            if (/^#include "(.*)"/) {
\&                process($1, $input);
\&                next;
\&            }
\&            #...                # whatever
\&        }
\&    }
.Ve
.Sp
You may also, in the Bourne shell tradition, specify an \s-1EXPR\s0 beginning
with \f(CW'>&'\fR, in which case the rest of the string is interpreted
as the name of a filehandle (or file descriptor, if numeric) to be
duped (as \fIdup\fR\|(2)) and opened.  You may use \f(CW\*(C`&\*(C'\fR after \f(CW\*(C`>\*(C'\fR,
\&\f(CW\*(C`>>\*(C'\fR, \f(CW\*(C`\*(C'\fR, \f(CW\*(C`+>>\*(C'\fR, and \f(CW\*(C`+&STDOUT"     or die "Can't dup STDOUT: $!";
\&    open OLDERR,     ">&", \e*STDERR or die "Can't dup STDERR: $!";
.Ve
.Sp
.Vb 2
\&    open STDOUT, '>', "foo.out" or die "Can't redirect STDOUT: $!";
\&    open STDERR, ">&STDOUT"     or die "Can't dup STDOUT: $!";
.Ve
.Sp
.Vb 2
\&    select STDERR; $| = 1;      # make unbuffered
\&    select STDOUT; $| = 1;      # make unbuffered
.Ve
.Sp
.Vb 2
\&    print STDOUT "stdout 1\en";  # this works for
\&    print STDERR "stderr 1\en";  # subprocesses too
.Ve
.Sp
.Vb 2
\&    close STDOUT;
\&    close STDERR;
.Ve
.Sp
.Vb 2
\&    open STDOUT, ">&", $oldout or die "Can't dup \e$oldout: $!";
\&    open STDERR, ">&OLDERR"    or die "Can't dup OLDERR: $!";
.Ve
.Sp
.Vb 2
\&    print STDOUT "stdout 2\en";
\&    print STDERR "stderr 2\en";
.Ve
.Sp
If you specify \f(CW'>&=", OLDFH)
.Ve
.Sp
or
.Sp
.Vb 1
\&    open(FH, ">>&=OLDFH")
.Ve
.Sp
Being parsimonious on filehandles is also useful (besides being
parsimonious) for example when something is dependent on file
descriptors, like for example locking using \fIflock()\fR.  If you do just
\&\f(CW\*(C`open(A, '>>&B')\*(C'\fR, the filehandle A will not have the same file
descriptor as B, and therefore flock(A) will not flock(B), and vice
versa.  But with \f(CW\*(C`open(A, '>>&=B')\*(C'\fR the filehandles will share
the same file descriptor.
.Sp
Note that if you are using Perls older than 5.8.0, Perl will be using
the standard C libraries' \fIfdopen()\fR to implement the \*(L"=\*(R" functionality.
On many \s-1UNIX\s0 systems \fIfdopen()\fR fails when file descriptors exceed a
certain value, typically 255.  For Perls 5.8.0 and later, PerlIO is
most often the default.
.Sp
You can see whether Perl has been compiled with PerlIO or not by
running \f(CW\*(C`perl \-V\*(C'\fR and looking for \f(CW\*(C`useperlio=\*(C'\fR line.  If \f(CW\*(C`useperlio\*(C'\fR
is \f(CW\*(C`define\*(C'\fR, you have PerlIO, otherwise you don't.
.Sp
If you open a pipe on the command \f(CW'\-'\fR, i.e., either \f(CW'|\-'\fR or \f(CW'\-|'\fR
with 2\-arguments (or 1\-argument) form of \fIopen()\fR, then
there is an implicit fork done, and the return value of open is the pid
of the child within the parent process, and \f(CW0\fR within the child
process.  (Use \f(CW\*(C`defined($pid)\*(C'\fR to determine whether the open was successful.)
The filehandle behaves normally for the parent, but i/o to that
filehandle is piped from/to the \s-1STDOUT/STDIN\s0 of the child process.
In the child process the filehandle isn't opened\*(--i/o happens from/to
the new \s-1STDOUT\s0 or \s-1STDIN\s0.  Typically this is used like the normal
piped open when you want to exercise more control over just how the
pipe command gets executed, such as when you are running setuid, and
don't want to have to scan shell commands for metacharacters.
The following triples are more or less equivalent:
.Sp
.Vb 4
\&    open(FOO, "|tr '[a-z]' '[A-Z]'");
\&    open(FOO, '|-', "tr '[a-z]' '[A-Z]'");
\&    open(FOO, '|-') || exec 'tr', '[a-z]', '[A-Z]';
\&    open(FOO, '|-', "tr", '[a-z]', '[A-Z]');
.Ve
.Sp
.Vb 4
\&    open(FOO, "cat -n '$file'|");
\&    open(FOO, '-|', "cat -n '$file'");
\&    open(FOO, '-|') || exec 'cat', '-n', $file;
\&    open(FOO, '-|', "cat", '-n', $file);
.Ve
.Sp
The last example in each block shows the pipe as \*(L"list form\*(R", which is
not yet supported on all platforms.  A good rule of thumb is that if
your platform has true \f(CW\*(C`fork()\*(C'\fR (in other words, if your platform is
\&\s-1UNIX\s0) you can use the list form.
.Sp
See \*(L"Safe Pipe Opens\*(R" in perlipc for more examples of this.
.Sp
Beginning with v5.6.0, Perl will attempt to flush all files opened for
output before any operation that may do a fork, but this may not be
supported on some platforms (see perlport).  To be safe, you may need
to set \f(CW$|\fR ($AUTOFLUSH in English) or call the \f(CW\*(C`autoflush()\*(C'\fR method
of \f(CW\*(C`IO::Handle\*(C'\fR on any open handles.
.Sp
On systems that support a close-on-exec flag on files, the flag will
be set for the newly opened file descriptor as determined by the value
of $^F.  See \*(L"$^F\*(R" in perlvar.
.Sp
Closing any piped filehandle causes the parent process to wait for the