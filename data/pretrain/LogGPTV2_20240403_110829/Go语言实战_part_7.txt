所以我们使用了一个空结构来实现Matcher接口。接下来看看匹配器init函数的实现，如代
码清单2-51所示。
代码清单2-51 matchers/rss.go：第63行到第67行
63 // init 将匹配器注册到程序里
64 func init() {
65 var matcher rssMatcher
66 search.Register("rss", matcher)
67 }
就像在默认匹配器里看到的一样，init函数将rssMatcher类型的值注册到程序里，以备
后用。让我们再看一次main.go代码文件里的导入部分，如代码清单2-52所示。
代码清单2-52 main.go：第07行到第08行
07 _ "github.com/goinaction/code/chapter2/sample/matchers"
08 "github.com/goinaction/code/chapter2/sample/search"
main.go代码文件里的代码并没有直接使用任何matchers包里的标识符。不过，我们依旧
需要编译器安排调用 rss.go 代码文件里的 init 函数。在第 07 行，我们使用下划线标识符作为
别名导入 matchers 包，完成了这个调用。这种方法可以让编译器在导入未被引用的包时不报
错，而且依旧会定位到包内的init函数。我们已经看过了所有的导入、类型和初始化函数，现
在来看看最后两个用于实现Matcher接口的方法，如代码清单2-53所示。
代码清单2-53 matchers/rss.go：第114行到第140行
114 // retrieve发送HTTP Get请求获取rss数据源并解码
115 func (m rssMatcher) retrieve(feed *search.Feed) (*rssDocument, error) {
116 if feed.URI == "" {
117 return nil, errors.New("No rss feed URI provided")
118 }
119
120 // 从网络获得rss数据源文档
121 resp, err := http.Get(feed.URI)
122 if err != nil {
123 return nil, err
124 }
125
126 // 一旦从函数返回，关闭返回的响应链接
127 defer resp.Body.Close()
128
129 // 检查状态码是不是200，这样就能知道
130 // 是不是收到了正确的响应
131 if resp.StatusCode != 200 {
132 return nil, fmt.Errorf("HTTP Response Error %d\n", resp.StatusCode)
133 }
134
135 // 将rss数据源文档解码到我们定义的结构类型里
136 // 不需要检查错误，调用者会做这件事
137 var document rssDocument
138 err = xml.NewDecoder(resp.Body).Decode(&document)
139 return &document, err
140 }
方法retrieve并没有对外暴露，其执行的逻辑是从RSS数据源的链接拉取RSS文档。在
第 121 行，可以看到调用了 http 包的 Get 方法。我们会在第 8 章进一步介绍这个包，现在只
需要知道，使用http包，Go语言可以很容易地进行网络请求。当Get方法返回后，我们可以
得到一个指向 Response 类型值的指针。之后会监测网络请求是否出错，并在第 127 行安排函
数返回时调用Close方法。
在第131行，我们检测了Response值的StatusCode字段，确保收到的响应是200。任
何不是200的请求都需要作为错误处理。如果响应值不是200，我们使用fmt包里的Errorf函数
返回一个自定义的错误。最后3行代码很像之前解码JSON数据文件的代码。只是这次使用xml
包并调用了同样叫作NewDecoder的函数。这个函数会返回一个指向Decoder值的指针。之后调
用这个指针的Decode方法，传入rssDocument类型的局部变量document的地址。最后返
回这个局部变量的地址和Decode方法调用返回的错误值。
最后我们来看看实现了Matcher接口的方法，如代码清单2-54所示。
代码清单2-54 matchers/rss.go: 第69行到第112行
69 // Search在文档中查找特定的搜索项
70 func (m rssMatcher) Search(feed *search.Feed, searchTerm string)
([]*search.Result, error) {
71 var results []*search.Result
72
73 log.Printf("Search Feed Type[%s] Site[%s] For Uri[%s]\n",
feed.Type, feed.Name, feed.URI)
74
75 // 获取要搜索的数据
76 document, err := m.retrieve(feed)
77 if err != nil {
78 return nil, err
79 }
80
81 for _, channelItem := range document.Channel.Item {
82 // 检查标题部分是否包含搜索项
83 matched, err := regexp.MatchString(searchTerm, channelItem.Title)
84 if err != nil {
85 return nil, err
86 }
87
88 // 如果找到匹配的项，将其作为结果保存
89 if matched {
90 results = append(results, &search.Result{
91 Field: "Title",
92 Content: channelItem.Title,
93 })
94 }
95
96 // 检查描述部分是否包含搜索项
97 matched, err = regexp.MatchString(searchTerm, channelItem.Description)
98 if err != nil {
99 return nil, err
100 }
101
102 // 如果找到匹配的项，将其作为结果保存
103 if matched {
104 results = append(results, &search.Result{
105 Field: "Description",
106 Content: channelItem.Description,
107 })
108 }
109 }
110
111 return results, nil
112 }
我们从第71行results变量的声明开始分析，如代码清单2-55所示。这个变量用于保存
并返回找到的结果。
代码清单2-55 matchers/rss.go：第71行
71 var results []*search.Result
我们使用关键字var声明了一个值为nil的切片，切片每一项都是指向Result类型值的指
针。Result类型的声明在之前match.go代码文件的第08行中可以找到。之后在第76行，我们
使用刚刚看过的retrieve方法进行网络调用，如代码清单2-56所示。
代码清单2-56 matchers/rss.go：第75行到第79行
75 // 获取要搜索的数据
76 document, err := m.retrieve(feed)
77 if err != nil {
78 return nil, err
79 }
调用retrieve方法返回了一个指向rssDocument类型值的指针以及一个错误值。之后，
像已经多次看过的代码一样，检查错误值，如果真的是一个错误，直接返回。如果没有错误发生，
之后会依次检查得到的 RSS 文档的每一项的标题和描述，如果与搜索项匹配，就将其作为结果
保存，如代码清单2-57所示。
代码清单2-57 matchers/rss.go：第81行到第86行
81 for _, channelItem := range document.Channel.Item {
82 // 检查标题部分是否包含搜索项
83 matched, err := regexp.MatchString(searchTerm, channelItem.Title)
84 if err != nil {
85 return nil, err
86 }
既然document.Channel.Item是一个item类型值的切片，我们在第81行对其使用for
range循环，依次访问其内部的每一项。在第83行，我们使用regexp包里的MatchString
函数，对channelItem值里的Title字段进行搜索，查找是否有匹配的搜索项。之后在第84
行检查错误。如果没有错误，就会在第89行到第94行检查匹配的结果，如代码清单2-58所示。
代码清单2-58 matchers/rss.go：第88行到第94行
88 // 如果找到匹配的项，将其作为结果保存
89 if matched {
90 results = append(results, &search.Result{
91 Field: "Title",
92 Content: channelItem.Title,
93 })
94 }
如果调用 MatchString 方法返回的 matched 的值为真，我们使用内置的 append 函
数，将搜索结果加入到 results切片里。append这个内置函数会根据切片需要，决定是否
要增加切片的长度和容量。我们会在第 4章了解关于内置函数 append的更多知识。这个函
数的第一个参数是希望追加到的切片，第二个参数是要追加的值。在这个例子里，追加到切
片的值是一个指向 Result 类型值的指针。这个值直接使用字面声明的方式，初始化为
Result 类型的值。之后使用取地址运算符（&），获得这个新值的地址。最终将这个指针存
入了切片。
在检查标题是否匹配后，第97行到第108行使用同样的逻辑检查Description字段。最
后，在第111行，Search方法返回了results作为函数调用的结果。
2.5 小结
每个代码文件都属于一个包，而包名应该与代码文件所在的文件夹同名。
Go语言提供了多种声明和初始化变量的方式。如果变量的值没有显式初始化，编译器会
将变量初始化为零值。
使用指针可以在函数间或者goroutine间共享数据。
通过启动goroutine和使用通道完成并发和同步。
Go语言提供了内置函数来支持Go语言内部的数据结构。
标准库包含很多包，能做很多很有用的事情。
使用Go接口可以编写通用的代码和框架。
3
第 3 章 打包和工具链
第3章 打包和工具链
本章主要内容
 如何组织Go代码
 使用Go语言自带的相关命令
 使用其他开发者提供的工具
 与其他开发者合作
我们在第2章概览了Go语言的语法和语言结构。本章会进一步介绍如何把代码组织成包，
以及如何操作这些包。在Go语言里，包是个非常重要的概念。其设计理念是使用包来封装不同
语义单元的功能。这样做，能够更好地复用代码，并对每个包内的数据的使用有更好的控制。
在进入具体细节之前，假设读者已经熟悉命令行提示符，或者操作系统的shell，而且应该已
经在本书前言的帮助下，安装了 Go。如果上面这些都准备好了，就让我们开始进入细节，了解
什么是包，以及包为什么对Go语言的生态非常重要。
3.1 包
所有Go语言的程序都会组织成若干组文件，每组文件被称为一个包。这样每个包的代码都
可以作为很小的复用单元，被其他项目引用。让我们看看标准库中的http包是怎么利用包的特
性组织功能的：
net/http/
cgi/
cookiejar/
testdata/
fcgi/
httptest/
httputil/
pprof/
testdata/
这些目录包括一系列以.go 为扩展名的相关文件。这些目录将实现 HTTP 服务器、客户端、
测试工具和性能调试工具的相关代码拆分成功能清晰的、小的代码单元。以 cookiejar 包为例，
这个包里包含与存储和获取网页会话上的 cookie 相关的代码。每个包都可以单独导入和使用，以
便开发者可以根据自己的需要导入特定功能。例如，如果要实现HTTP客户端，只需要导入http
包就可以。
所有的.go 文件，除了空行和注释，都应该在第一行声明自己所属的包。每个包都在一个单
独的目录里。不能把多个包放到同一个目录中，也不能把同一个包的文件分拆到多个不同目录中。
这意味着，同一个目录下的所有.go文件必须声明同一个包名。
3.1.1 包名惯例
给包命名的惯例是使用包所在目录的名字。这让用户在导入包的时候，就能清晰地知道包名。
我们继续以net/http包为例，在http目录下的所有文件都属于http包。给包及其目录命名
时，应该使用简洁、清晰且全小写的名字，这有利于开发时频繁输入包名。例如，net/http包
下面的包，如cgi、httputil和pprof，名字都很简洁。
记住，并不需要所有包的名字都与别的包不同，因为导入包时是使用全路径的，所以可以区分
同名的不同包。一般情况下，包被导入后会使用你的包名作为默认的名字，不过这个导入后的名字
可以修改。这个特性在需要导入不同目录的同名包时很有用。3.2节会展示如何修改导入的包名。
3.1.2 main 包
在Go语言里，命名为main的包具有特殊的含义。Go语言的编译程序会试图把这种名字的
包编译为二进制可执行文件。所有用Go语言编译的可执行程序都必须有一个名叫main的包。
当编译器发现某个包的名字为main时，它一定也会发现名为main()的函数，否则不会创建
可执行文件。main()函数是程序的入口，所以，如果没有这个函数，程序就没有办法开始执行。
程序编译时，会使用声明main包的代码所在的目录的目录名作为二进制可执行文件的文件名。
命令和包 Go 文档里经常使用命令（command）这个词来指代可执行程序，如命令行应用程序。
这会让新手在阅读文档时产生困惑。记住，在Go语言里，命令是指任何可执行程序。作为对比，
包更常用来指语义上可导入的功能单元。
让我们来实际体验一下。首先，在$GOPATH/src/hello/目录里创建一个叫hello.go的文件，并
输入代码清单3-1里的内容。这是个经典的“Hello World!”程序，不过，注意一下包的声明以及
import语句。
代码清单3-1 经典的“Hello World!”程序
01 package main
fmt包提供了完成
02
03 import "fmt" 格式化输出的功能。
04
05 func main() {
06 fmt.Println("Hello World!")
07 }
获取包的文档 别忘了，可以访问 http://golang.org/pkg/fmt/或者在终端输入godoc fmt来了解更
多关于fmt包的细节。
保存了文件后，可以在$GOPATH/src/hello/目录里执行命令 go build。这条命令执行完
后，会生成一个二进制文件。在UNIX、Linux和Mac OS X系统上，这个文件会命名为hello，
而在 Windows 系统上会命名为 hello.exe。可以执行这个程序，并在控制台上显示“Hello
World!”。
如果把这个包名改为main之外的某个名字，如hello，编译器就认为这只是一个包，而不
是命令，如代码清单3-2所示。
代码清单3-2 包含main函数的无效的Go程序
01 package hello
02
03 import "fmt"
04
05 func main(){
06 fmt.Println("Hello, World!")
07 }