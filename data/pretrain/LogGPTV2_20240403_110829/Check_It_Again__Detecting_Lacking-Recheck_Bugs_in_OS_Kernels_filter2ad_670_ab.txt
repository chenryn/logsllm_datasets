firmed 19 new LRC bugs. We also discuss various strategies
to fix LRC bugs.
In the rest of the paper, we present a study of LRC bugs in §2,
the design of LRSan in §3, its implementation in §4, followed by an
evaluation in §5. We also present some bug-fixing strategies in §6.
We discuss its limitations in §7, related work in §8, and conclude
the paper in §9.
2 A STUDY ON LRC BUGS
Security-checked variables should not be further modified before
their uses; otherwise, they should be rechecked. LRC bugs are the
cases that violate this security policy. More specifically, an LRC
bug occurs when a sequence of three operations are performed
on a critical variable as shown in Figure 1. The first operation
checks the validity of a variable, e.g., a range check or an access-
permission check. The checked variable is then modified either
unintentionally or intentionally. The modification may break the
security property enforced in the first operation. If the modified
variable is used without being rechecked, security issues such as
out-of-bound access or privilege escalation may arise.
A real LRC bug is shown in Figure 2. In this example, LRSan
identifies line 10 and 11 as a security check (see §3.2) and identifies
val as a critical variable (see §3.3). At line 16-19, val is modified
by the thread itself. val is used in the later execution. However, a
recheck against the value of val is absent, leading to an LRC bug.
Note that in this example there is no validation for the variables
used to redefine val.
LRC bugs are usually caused by semantic errors. As will be
discussed in §8, LRC bugs are inherently different from traditional
missing-check bugs [35, 47], double-fetch bugs [16, 33, 41, 46], or
atomicity-violation bugs [14, 15, 20, 27, 42]. We now provide a
formal definition of LRC bugs.
User spaceVarVarOther threadsThread itselfVarSecurity checkModificationUseNo recheckint ret = 0;
...
struct qib_ctxtdata *rcd, unsigned subctxt)
1 /* File: drivers/infiniband/hw/qib/qib_file_ops.c */
2 static int mmap_kvaddr(struct vm_area_struct *vma, u64 pgaddr,
3
4 {
5
6
7
8
9
10
11
12 bail:
13
14 }
if (len > size) {
ret = -EINVAL;
goto bail;
return ret;
}
...
Figure 3: An example of returning a variable that may con-
tain an error code. We need data-flow to tell whether ret may
contain an error code.
Use. We define a use of variable V as an instruction I that takes V
as a “read-only” operand for operations such as changing data and
control flow.
Modification. We define a modification of variable V as a se-
quence of instructions that transform the value set of V into a new
one. That is, after executing the sequence of instructions, the value
set of V becomes [V ′], and [V ′] (cid:44) [V].
Lacking recheck. We define LRC as cases in which the value set
of V (i.e., [V]) is not a subset of Vc (i.e., the valid value set right
after the security check).
2.2 Security Check and Error Code in Linux
As defined in §2.1, a security check is a check that always results
in a terminating execution path if the check fails. The Linux kernel
incorporates a large number of security checks to validate variables
and return value of functions. As the example in Figure 2 shows,
if val  max_len, the error code -EFAULT will be
returned, and the current execution path is terminated.
In fact, returning an error code upon a check failure is a common
programming convention. Error codes are commonly used to solve
the semi-predicate problem [25] in programs, i.e., to signify that
a routine cannot return its normal result. In the C programming
language, error handling is not provided as a language feature.
Developers are responsible for detecting errors and handling them
properly. As such, a programming convention for error handling is
that, for functions or operations that may encounter an error or a
failure at runtime, an error code is assigned to represent the result
of their execution, so that the program can know if something went
wrong and is able to handle it.
In the Linux kernel, most function calls return a particular error
code when an error occurs. The errno.h and errno-base.h header
files define 133 macros (in the latest Linux kernel) for various error
codes. Figure 3 shows an example of using error codes in Linux. The
error code EINVAL is stored in a variable. This error code indicates
that len is a critical variable that requires a size check. We need
data-flow analysis to tell whether ret may contain an error code
upon return. A more common case is directly returning a constant
error code, such as line 11 in Figure 4.
The idea in our automatic inference of a security check is that
error codes shall come with security checks, i.e., an error code shall
be returned if a security check fails. Security checks serve as several
validation purposes: checking permission and parameters before
* new definition, as FLOW_RSS is newer.
*/
1 /* File: net/core/ethtool.c */
2
3 /* If FLOW_RSS was requested then user-space must be using the
4
5
6 /* info.flow_type is identified as a critical variable */
7 if (cmd == ETHTOOL_GRXFH && info.flow_type & FLOW_RSS) {
8
9
10
11
12
13
14 }
15
16 /* info is used */
17 ...
info_size = sizeof(info);
/* info.flow_type may be modified by user race */
if (copy_from_user(&info, useraddr, info_size))
/* Lacking-recheck: a recheck is not enforced */
return -EFAULT;
Figure 4: A simple LRC bug caused by modification from
user race.
executing a function, checking return value or output parameters
after executing a function, and checking the value of a variable
before using it. By identifying error codes and their associated
checks, we are able to automatically find security checks.
To precisely identify security checks based on error codes, we
define the patterns for identifying security checks in Linux.
• There is a conditional statement followed by two branches;
• One branch always returns an error code (condition 1);
• The other branch must have a possibility of not returning
an error code (condition 2).
It is easy to understand condition 1—a check failure should end
up with returning an error code. We define condition 2 based on
our observation that if both branches always return an error code,
current conditional statement is not a security check. In this case,
the actual security check is an earlier conditional statement that has
already decided current conditional statement to return an error
code in its both branches.
2.3 Causes of Modification
In principle, a security-checked variable should not be modified
before being used. However, due to the existence of unusual exe-
cution flows and implicit modification, checked variables may be
modified unintentionally, and thus opens the door for attackers to
bypass security checks via exploiting such variables. In addition, OS
kernels are complex. Semantic and logic errors are likely to happen,
which may lead to unintended modifications to checked variables.
Based on the results reported by LRSan, we study the causes of
modifications and classify them into four categories. While the first
two categories are from passive causes—modifications are issued
by other threads through race conditions, the other two categories
are by active causes—the thread itself issues the modifications due
to semantic or logic errors.
User race. Kernel space frequently exchanges data with user space.
Data resides in user space can be brought into kernel space through
functions such as copy_from_user() and get_user(). Such data can
influence the control flow and data flow, or be used for critical
operations such as memory allocation. Thus, user-supplied data
should be checked. To perform a security check, kernel first copies
the data from user space to kernel space and then inspects its value.
If the data passes the security check, further computation on the
data continues. In practice, for performance reasons, kernel often
* It is an address of a shared data in "sd"
*/
1 /* File: drivers/staging/media/atomisp/pci/atomisp2/atomisp_subdev.c */
2
3 /* The critical variable is the return value of atomisp_subdev_get_rect.
4
5
6
7 /* It is security-checked against NULL */
8 if (!atomisp_subdev_get_rect(sd, cfg, which, pad, target))
9
10
11 /* The address of the shared data is obtained again and returned */
12
13 /* At the same time, it is used---memory read. No recheck enforced */
14
return -EINVAL;
*r = *atomisp_subdev_get_rect(sd, cfg, which, pad, target);
Figure 5: An LRC example in which kernel thread can race
to modify a shared data structure.
first peeks into a small portion of the data set instead of copying
the whole data set. As the example shown in Figure 4, a small field
info.flow_type is first copied in for the check. If the check succeeds,
kernel copies the whole object info in. Otherwise, kernel need not
copy the whole object, which can improve performance. A problem
arises if user space races to modify the value between the two
copies. In Figure 4, user-space code can modify data pointed to by
useraddr in user space, which will further modify info.flow_type
through line 10, violating the check at line 7. Our results show that
user race is the most common cause of LRC bugs.
Kernel race. Race conditions in kernel space may also modify
security-checked variables. OS kernels by their nature need to
provide centralized resource management for all users at the same
time. Therefore, in kernel space, data structures and resources are
widely shared between kernel threads/processes.
According to how the shared data or resource is used across
different threads/processes, there are two cases for kernel race to
cause LRC bugs. The first case is similar to the case in user race,
shared data (e.g., global variables and heap objects) may be copied
and checked, and then copied again. The second copy may modify
the checked value. Since the modification source is from the shared
data, other threads/processes can race to inject malicious values to
the shared data. Therefore, the modification may copy the attacker-
controlled value into the security-checked variable, bypassing the
security check. In the second case, kernel code directly security-
checks shared data and later uses it without any copy. In this case,
other threads can also race to modify the shared data to bypass the
security check. As the example shown in Figure 5, object sd is a
shared data structure in kernel space. atomisp_subdev_get_rect()
returns the address of a field in sd, which is immediately checked
against NULL. However, attackers can race to operate sd and force
the function atomisp_subdev_get_rect() to return NULL, bypassing
the security check and causing a NULL dereference.
Logic errors. Modification caused by kernel race and user race is
passive. That is, the security-checked variable is modified by other
threads. By contrast, the thread itself, due to logic errors, may also
issue problematic modification leading to LRC issues. Our study
reveals that common cases include value updating and resetting.
Value updating is a case in which a security-checked variable is
updated (e.g., through arithmetic operations) along the execution
path. If the update has a logic error, it can cause an invalid value
leading to a check bypass. Value resetting is common in kernel. For
example, based on the type of an object, a security-checked value
may be reset to a corresponding value. Example in Figure 2 shows
that when asoc is not NULL, val is set to the value corresponding
to asoc, which may violate the security check in line 10.
Semantic errors. Semantic errors such as type casting (e.g., cast-
ing a 4-byte integer to an 8-byte integer [44]) and integer over-
flow [6, 43] can also cause modification to a security-checked vari-
able. If such a semantic error can only be triggered with special
inputs on particular program paths, it will be hard to expose the
error during normal execution. We have not yet found any LRC bug
caused by such semantic errors. However, we believe it is possible
given the prevalence of such semantic errors in OS kernels.
Lacking rechecks. We do find evidence that kernel developers
2.3.1
enforce rechecks after potential modification. However, modifica-
tion is often latent, e.g., caused by logic semantic errors, and devel-
opers may not be fully aware of potential race conditions. Rechecks
thus are often missed in practice, as confirmed by the detection
results (see §5.1).
2.4 Security Impact of LRC Bugs
The security impact of LRC bugs is clearly “security check by-
pass.” Taking Figure 4 as an example, a malicious user can race
to change flow_type in user space between line 7 and line 10.
This allows the user to bypass the security check at line 7 and
may cause information leakage because the following function
ops->get_rxnfc() (omitted in the figure) will prepare various data
according to flow_type, and copy the data to user space. This bug
has been fixed in latest Linux kernel. Since the associated security
check is rendered ineffective, LRC bugs can potentially have a seri-
ous security impact. This is especially true if the kernel code that
has the bug is reachable by non-superusers, as is the case in Figure 4.
Depending on the purpose of a security check, an LRC bug can
cause various security issues. Our study reveals that common se-
curity checks include: checking permission and parameters before
executing a function, checking return value or output parameters
after executing a function, and checking the value of a variable
before using it (e.g., pointer dereference). Correspondingly, the LRC
bugs can cause privilege escalation, out-of-bound memory access,
arbitrary kernel memory read/write, information leaks, denial of
service, etc. Therefore, developers should be careful about potential
LRC cases, and it is important for us to detect and fix LRC bugs in
OS kernels.
3 LRSAN
LRSan is the first static-analysis system that aims to detect LRC
bugs in OS kernels. LRSan internally incorporates a precise static-
analysis engine, which employs standard data-flow and control-
flow analyses. LRSan’s static-analysis engine is inter-procedural,
flow sensitive, context sensitive, and field sensitive. On top of the
static-analysis engine, we develop multiple new analysis modules
dedicated for detecting LRC bugs. We now present an overview of
LRSan and the design of its key components.
3.1 Overview of LRSan
Figure 6 shows the overview of LRSan’s structure and work-flow.
LRSan takes as input the compiler intermediate representation (IR),
Figure 6: The structure and work-flow of LRSan.
i.e., LLVM IR, compiled from the kernel source code and auto-
matically detects and reports LRC cases. LRSan’s preprocessing
constructs a global call-graph for inter-procedural analysis, and an-
notates error codes (macros) so that it can recognize them in LLVM
IR. Specifically, LRSan includes four key components: (1) security-
check identification; (2) critical-variable inference; (3) check-use
chain construction; and (4) modification inference.
LRSan first employs error code–based inference (see §3.2) to au-
tomatically identify security checks. Variables associated with the
security checks are then recursively identified as critical variables
(see §3.3). After identifying the critical variables, LRSan identifies
check-use chains (see §3.4) by taint-tracking critical variables start-
ing from the security check. A check-use chain is formed once a
use of a critical variable is found, e.g., being used as an array in-
dex or a function parameter. By constructing the check-use chains,
LRSan significantly reduces its analysis scope, which allows LRSan
to perform precise and expensive analysis to find LRC cases along
check-use chains. LRSan’s current design employs a static data-flow