errors between the throughput achieved from our simple lookup
method and the optimal throughput. Still, it is worth noting that
link-speciﬁc training gets the right answer about 75% of the time
even in 802.11n networks (the equivalent number for 802.11b/g is
90%). Further work is required to identify when link-speciﬁc train-
ing works well and when it does not.
4.4 Correlation of SNR and Throughput
We also investigate the variation in throughput for a given SNR.
This is different from the previous question; here we are interested
in how much the throughput can vary for a particular SNR, not the
potential loss in throughput that we expect to see from our simple
bit rate selection method.
Figure 7 shows the SNR vs.
the median throughput seen by
probes with that SNR in 802.11b/g networks. The mean through-
put increases with the SNR until an SNR of about 30 dB, and then
levels off. These curves track the theoretical SNR-vs-throughput
curves calculated in [13] and [18]. A similar result holds for
802.11n, which we do not show here. Not surprisingly, 802.11n
networks see a higher peak value than the 802.11b/g networks. In
802.11n, the throughput tends to level off around 15dB instead of
30dB. In both cases, the variation (measured in Figure 7 by the up-
per and lower quartiles) is largest in the steepest part of the curves.
4.5 Practical Considerations
Though our primary goal in this section was to examine how
well the SNR could be used in bit rate adaptation algorithms, we
brieﬂy touch on some of the practical considerations of using our
SNR-based look-up tables in the link-speciﬁc case.
)
s
/
t
i
b
M
(
t
u
p
h
g
u
o
r
h
T
 90
 80
 70
 60
 50
 40
 30
 20
 10
 0
1Mbit/s
6Mbit/s
11Mbit/s
12Mbit/s
24Mbit/s
36Mbit/s
48Mbit/s
 0
 10
 20
 30
 40
SNR (dB)
 50
 60
 70
Figure 7: Median throughput versus SNR aggregated across all
links in all 802.11b/g networks. Error bars indicate the upper
and lower quartiles.
4.5.1
802.11b/g
For 802.11b/g, Figure 4 indicates that one bit rate can be used
for each SNR with high accuracy. Because of this result, for each
SNR on a link, only one probe set per day ever needs to be sent3.
Algorithm 1 presents a viable strategy for source s to select a bit
rate to use to send to destination d.
Since we see standard deviation of <10dB for the SNRs on 90%
of links (Figure 2), we do not expect to see many different SNR
values, and thus not to need many different probe sets. Also note
that since each source uses its own look-up tables, there is no need
for coordination amongst nodes.
4.5.2
802.11n
For 802.11n, we envision making a look-up table as described
above, but keeping track of the k best bit rates for each SNR (where
k is small; perhaps two or three). A standard probing algorithm
(for example, SampleRate [4]) could be used in conjunction with
this augmented table, restricting its probes to the bit rates present
for each SNR. This strategy effectively divides bit rate selection
3We say “per day” because we only have one day’s worth of data.
Additionally, it may be worthwhile to send probes more frequently
(e.g., once every hour), in case conditions change drastically.
129Algorithm 1 Bit rate selection for source s sending to destination
d, for 802.11b/g. lookup_table[snr, d] holds the best bit rate for an
SNR snr measured on the link s → d. This algorithm returns the bit
rate for s to use when sending to d.
Measure the SNR snr to d
if lookup_table[snr, d] exists then
r = lookup_table[snr, d]
else
Send a probe set to d
Determine bopt for this probe set
lookup_table[snr, d] = bopt
r = bopt
end if
Return r
into two phases: Finding the k best bit rates for each SNR, which
involves probing at all bit rates, and probing at that restricted set of
bit rates once the k best are found. Algorithm 2 presents a possible
strategy. We refer to full probe sets as ones that send probes at all
bit rates; these are the types probe sets we have discussed thus far.
We refer to restricted probe sets as those that send probes only at
certain bit rates.
Algorithm 2 Bit rate selection for source s sending to destination
d, for 802.11n. lookup_table[snr, d] holds the k best bit rates for
an SNR snr measured on the link s → d. This algorithm returns the
bit rate for s to use when sending to d.
Measure the SNR snr to d
if lookup_table[snr, d] exists then
Let C = lookup_table[snr, d]
Send a restricted probe set to the bit rates in C
Let bopt be the best bit rate in this restricted probe set
r = lookup_table[snr, d]
else
Send a full probe set to d
Determine the k best bit rates in this probe set. Let C be this
set, and let bopt be the best bit rate in this probe set (as before)
lookup_table[snr, d] = C
r = bopt
end if
Return r
The key concern with this algorithm is whether the k best bit
rates in the ﬁrst full probe set are indeed the k bit rates to which
we should restrict future probes. Recall that Figure 5(c) implies
that four bit rates are enough, i.e., that there are no more than four
different values of bopt for each link. However, this does not imply
that the top four bit rates in one probe set comprise the same set as
the four distinct values of bopt
However, we ﬁnd that it is sufﬁcient to send only one full probe
set for each (cid:2)SNR, link(cid:3) pair; the above algorithm performed with
91% accuracy on our data set, for k = 4. Note that this substantially
decreases the overhead of probing. Currently, Meraki sends probes
at 29 of the 802.11n bit rates, and could one day send as many as
64 (the number of bit rates in 802.11n for a particular channel).
Algorithm 2 decreases this number by over 86%.
4.6 Key Take-Aways and Caveats
The results that we have presented in this section are from inter-
AP measurements taken in a static setting with stationary APs. In
these situations, across a wide range of networks, we ﬁnd that per-
link SNR-based training can narrow down the optimal bit rate a
large fraction of the time for both 802.11b/g and 802.11n, verify-
ing the claims of previous small-scale studies. We also found that
the penalty for picking a suboptimal bit rate is small much of the
time for 802.11b/g. It is also important to note that links vary sub-
stantially in the same network and between networks, so training
the SNR-to-rate look-up table on a different link in the same net-
work will be less accurate.
That said, we should note that these ﬁndings regarding per-link
training will not necessarily translate directly for communication
to a client or between two clients, particularly if they are mobile.
Here, link conditions change more frequently and depend on speed,
as previous work has shown. Our results may translate to clients
that are mostly static, but even so one has to consider the fact that
movement in the environment may render even per-link training
less effective than in the inter-AP setting within a mesh network.
5. OPPORTUNISTIC ROUTING
Having studied the performance of bit rate adaptation protocols
in mesh networks, we now turn our attention to the performance
of recently-developed mesh routing protocols. Like bit rate adapta-
tion, routing is a signiﬁcant factor affecting throughput of mesh net-
works. Traditional mesh routing involves ﬁnding a single path be-
tween any source and destination, using a metric like the expected
number of transmissions (ETX) to pick next-hops to each destina-
tion [12]. With ExOR [7] and MORE [9] researchers have pro-
posed using packet-level opportunistic routing protocols that take
advantage of broadcast transmissions and probabilistic receptions
to reduce the number of transmissions needed to transfer packets
between a source and destination (a more detailed description of
these protocols is given in Section 2.3).
To date, these protocols have been evaluated only on relatively
small lab testbeds. With the inter-AP data we have, we can evaluate
these protocols and compare them to traditional routing. The rea-
son is that the reduction in the number of transmitted packets due
to opportunistic routing, to ﬁrst order, depends only on the packet
loss rates between nodes.
For opportunistic routing, we are interested in the performance
of an ideal scheme that incurs no overhead; in this sense, it models
MORE, not ExOR, because of the absence of explicit coordination
in the former. We are interested in quantifying the following: given
each (cid:2)AP1, AP2(cid:3) pair in our data, what is the expected number of
transmissions to send a packet from AP1 to AP2 using opportunistic
routing (ExOR) vs. using a standard routing protocol (ETX). In this
section, we restrict ourselves to data from our 802.11b/g networks,
and use a snapshot of our data, due to processing time.
5.1 Expected Improvements
from Oppor-
tunistic Routing
The right comparison should use a bit rate adaptation method for
traditional routing. However, we also need to consider the bit rate
at which the opportunistic routing protocol operates. This question
is a difﬁcult one because there is no satisfactory bit rate adaptation
protocol available for opportunistic routing. In this section, adopt
a simple approach and calculate the improvements as if the entire
network were operating at the same bit rate; we present the results
for each bit rate separately. In Section 5.4, we turn our attention
to allowing variable bit rates. Though it is likely that different bit
rate adaptation algorithms will affect the throughput of opportunis-
tic routing in different ways, we still expect our results to be highly
instructive and likely to reﬂect the gains one might observe in prac-
tice.
We now have, for each bit rate, a matrix of packet success rates
for each network (one success rate for each link). Given this ma-
130F
D
C
 1
 0.8
 0.6
 0.4
 0.2
 0
 0
1 Mbit/s
6 Mbit/s
11 Mbit/s
12 Mbit/s
24 Mbit/s
36 Mbit/s
48 Mbit/s
 0.2
 0.4
 0.6
 0.8
 1
Fraction Improvement of ExOR over ETX
Figure 8: Improvement (in terms of expected number of trans-
missions needed to send one packet) of opportunistic routing
(ExOR) over one-way ETX (ETX1)
F
D
C
 1
 0.8
 0.6
 0.4
 0.2
 0
 0
1 Mbit/s
6 Mbit/s
11 Mbit/s
12 Mbit/s
24 Mbit/s
36 Mbit/s
48 Mbit/s
 5
 10
 15
 20
Fraction Improvement of ExOR over ETX
Figure 9: Improvement (in terms of expected number of trans-
missions needed to send one packet) of opportunistic routing
(ExOR) over two-way ETX (ETX2)
trix, we can compute the ETX cost for each link (explained below).
With this cost, our standard routing protocol is simply shortest-path
routing using ETX as the metric, and the ETX cost between s and d
under this routing protocol is the sum of the ETX metrics for each
link on the resulting path from s to d.
Calculating the ExOR cost from s to d is only slightly more com-
plicated. First, we determine the set C of neighbors of s that are
closer to d under the ETX metric. If there is no node closer to d,
then ExOR(s → d) is simply ET X(s → d). Otherwise, imagining
that s broadcasts the packet to these nodes, for each node n ∈ C, we
calculate r(n) = the probability that n received the packet and that
no node closer to d also received it. Then,
(1)
ExOR(s → d) = 1 + ∑n∈C r(n)· ExOR(n → d)
1− r(s)
F
D
C
 1
 0.9
 0.8
 0.7
 0.6
 0.5
 0.4
 0.3
 0.2
 0.1
 0
1 Mbit/s
6 Mbit/s
11 Mbit/s
12 Mbit/s
24 Mbit/s
36 Mbit/s
48 Mbit/s
 0
 0.5
 1
 1.5
 2
 2.5
 3
 3.5
Asymmetry of Link
Figure 10: CDF of packet success rate of a link to the packet
success rate on the reverse link. There is some asymmetry,
but not an egregious amount; however, this amount is enough
to lead to a noticeable difference in the expected number of
transmissions for ETX1 (perfect ACK channel) and ETX2. The
asymmetry does not change signiﬁcantly with the bit rate.
1
P(s→d) , where
ETX1 metric, the cost of sending from s to d is
P(s → d) is the delivery probability on the link s → d. ETX2 uses
the packet success rate on the reverse link, which is along the lines
of the metric suggested in the original ETX paper. Under the ETX2
P(s→d)·P(d→s) . It is al-