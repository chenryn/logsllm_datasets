### 4.3 Throughput Errors and Link-Specific Training

We observed discrepancies between the throughput achieved using our simple lookup method and the optimal throughput. However, it is worth noting that link-specific training provides the correct answer approximately 75% of the time in 802.11n networks (this figure is 90% for 802.11b/g networks). Further research is needed to determine the conditions under which link-specific training is effective and when it is not.

### 4.4 Correlation of SNR and Throughput

We also investigated the variation in throughput for a given Signal-to-Noise Ratio (SNR). This differs from the previous analysis, where we focused on the potential loss in throughput due to our simple bit rate selection method. Here, we are interested in how much the throughput can vary for a specific SNR.

Figure 7 shows the relationship between SNR and median throughput for probes in 802.11b/g networks. The mean throughput increases with SNR until it reaches about 30 dB, after which it levels off. These curves align with the theoretical SNR-throughput curves calculated in [13] and [18]. A similar pattern holds for 802.11n networks, though the peak throughput is higher, and the throughput tends to level off around 15 dB instead of 30 dB. In both cases, the variation (as measured by the upper and lower quartiles) is most significant in the steepest part of the curves.

### 4.5 Practical Considerations

While our primary goal was to examine the effectiveness of using SNR in bit rate adaptation algorithms, we also briefly discuss the practical aspects of implementing our SNR-based lookup tables in the link-specific case.

#### 4.5.1 802.11b/g Networks

For 802.11b/g networks, Figure 4 indicates that a single bit rate can be used for each SNR with high accuracy. Consequently, for each SNR on a link, only one probe set per day needs to be sent. Algorithm 1 outlines a viable strategy for a source node \( s \) to select a bit rate for communication with a destination node \( d \).

Given that the standard deviation of SNRs on 90% of links is less than 10 dB (as shown in Figure 2), we do not expect to see many different SNR values, thus reducing the need for multiple probe sets. Additionally, since each source uses its own lookup table, there is no need for coordination among nodes.

**Algorithm 1: Bit Rate Selection for 802.11b/g**

1. Measure the SNR \( snr \) to \( d \).
2. If \( lookup\_table[snr, d] \) exists:
   - Set \( r = lookup\_table[snr, d] \).
3. Else:
   - Send a probe set to \( d \).
   - Determine the optimal bit rate \( bopt \) for this probe set.
   - Update \( lookup\_table[snr, d] = bopt \).
   - Set \( r = bopt \).
4. Return \( r \).

#### 4.5.2 802.11n Networks

For 802.11n networks, we propose maintaining a lookup table that tracks the \( k \) best bit rates for each SNR (where \( k \) is small, typically 2 or 3). A standard probing algorithm, such as SampleRate [4], can be used in conjunction with this augmented table, restricting probes to the bit rates present for each SNR. This approach divides bit rate selection into two phases: finding the \( k \) best bit rates for each SNR through full probing, and then probing at the restricted set of bit rates once the \( k \) best are identified. Algorithm 2 presents a possible strategy.

**Algorithm 2: Bit Rate Selection for 802.11n**

1. Measure the SNR \( snr \) to \( d \).
2. If \( lookup\_table[snr, d] \) exists:
   - Let \( C = lookup\_table[snr, d] \).
   - Send a restricted probe set to the bit rates in \( C \).
   - Determine the optimal bit rate \( bopt \) in this restricted probe set.
   - Set \( r = bopt \).
3. Else:
   - Send a full probe set to \( d \).
   - Determine the \( k \) best bit rates in this probe set. Let \( C \) be this set, and let \( bopt \) be the best bit rate in this probe set.
   - Update \( lookup\_table[snr, d] = C \).
   - Set \( r = bopt \).
4. Return \( r \).

The key concern with this algorithm is whether the \( k \) best bit rates in the first full probe set are indeed the bit rates to which future probes should be restricted. Our data shows that sending only one full probe set for each (SNR, link) pair is sufficient, with the algorithm achieving 91% accuracy for \( k = 4 \). This significantly reduces the overhead of probing, as Meraki currently sends probes at 29 of the 802.11n bit rates and could potentially send up to 64. Algorithm 2 decreases this number by over 86%.

### 4.6 Key Takeaways and Caveats

Our results are based on inter-AP measurements in a static setting with stationary APs. Across a wide range of networks, we found that per-link SNR-based training can effectively narrow down the optimal bit rate a large fraction of the time for both 802.11b/g and 802.11n, validating the claims of previous small-scale studies. We also found that the penalty for selecting a suboptimal bit rate is often small for 802.11b/g. It is important to note that links can vary substantially within and between networks, so training the SNR-to-rate lookup table on a different link in the same network may be less accurate.

However, these findings regarding per-link training may not directly translate to communication with mobile clients, where link conditions change more frequently and depend on speed. Our results may apply to mostly static clients, but even then, environmental changes can reduce the effectiveness of per-link training compared to the inter-AP setting in a mesh network.

### 5. Opportunistic Routing

Having studied the performance of bit rate adaptation protocols in mesh networks, we now turn our attention to the performance of recently developed mesh routing protocols. Like bit rate adaptation, routing is a significant factor affecting the throughput of mesh networks. Traditional mesh routing involves finding a single path between any source and destination, using metrics like Expected Transmission Count (ETX) to pick next-hops to each destination [12]. With ExOR [7] and MORE [9], researchers have proposed using packet-level opportunistic routing protocols that leverage broadcast transmissions and probabilistic receptions to reduce the number of transmissions needed to transfer packets between a source and destination (a more detailed description of these protocols is given in Section 2.3).

To date, these protocols have been evaluated only on relatively small lab testbeds. Using our inter-AP data, we can evaluate these protocols and compare them to traditional routing. The reduction in the number of transmitted packets due to opportunistic routing, to first order, depends only on the packet loss rates between nodes.

For opportunistic routing, we are interested in the performance of an ideal scheme that incurs no overhead; in this sense, it models MORE, not ExOR, because of the absence of explicit coordination in the former. We aim to quantify the following: for each (AP1, AP2) pair in our data, what is the expected number of transmissions to send a packet from AP1 to AP2 using opportunistic routing (ExOR) versus using a standard routing protocol (ETX). In this section, we restrict ourselves to data from our 802.11b/g networks and use a snapshot of our data due to processing time.

### 5.1 Expected Improvements from Opportunistic Routing

The appropriate comparison should use a bit rate adaptation method for traditional routing. However, we must also consider the bit rate at which the opportunistic routing protocol operates. This is a challenging question because there is no satisfactory bit rate adaptation protocol available for opportunistic routing. In this section, we adopt a simple approach and calculate the improvements as if the entire network were operating at the same bit rate, presenting the results for each bit rate separately. In Section 5.4, we will address variable bit rates. Although different bit rate adaptation algorithms may affect the throughput of opportunistic routing differently, we still expect our results to be highly instructive and likely to reflect the gains one might observe in practice.

Given a matrix of packet success rates for each network (one success rate for each link), we can compute the ETX cost for each link. With this cost, our standard routing protocol is simply shortest-path routing using ETX as the metric, and the ETX cost between \( s \) and \( d \) under this routing protocol is the sum of the ETX metrics for each link on the resulting path from \( s \) to \( d \).

Calculating the ExOR cost from \( s \) to \( d \) is only slightly more complicated. First, we determine the set \( C \) of neighbors of \( s \) that are closer to \( d \) under the ETX metric. If there is no node closer to \( d \), then \( ExOR(s \rightarrow d) \) is simply \( ETX(s \rightarrow d) \). Otherwise, imagining that \( s \) broadcasts the packet to these nodes, for each node \( n \in C \), we calculate \( r(n) \) as the probability that \( n \) received the packet and that no node closer to \( d \) also received it. Then,

\[
ExOR(s \rightarrow d) = 1 + \sum_{n \in C} r(n) \cdot ExOR(n \rightarrow d)
\]

**Figure 8: Improvement (in terms of expected number of transmissions needed to send one packet) of opportunistic routing (ExOR) over one-way ETX (ETX1)**

**Figure 9: Improvement (in terms of expected number of transmissions needed to send one packet) of opportunistic routing (ExOR) over two-way ETX (ETX2)**

**Figure 10: Cumulative Distribution Function (CDF) of packet success rate of a link to the packet success rate on the reverse link. There is some asymmetry, but not an egregious amount; however, this asymmetry is enough to lead to a noticeable difference in the expected number of transmissions for ETX1 (perfect ACK channel) and ETX2. The asymmetry does not change significantly with the bit rate.**

In the ETX1 metric, the cost of sending from \( s \) to \( d \) is \( \frac{1}{P(s \rightarrow d)} \), where \( P(s \rightarrow d) \) is the delivery probability on the link \( s \rightarrow d \). ETX2 uses the packet success rate on the reverse link, which is along the lines of the metric suggested in the original ETX paper. Under the ETX2 metric, the cost is \( \frac{1}{P(s \rightarrow d) \cdot P(d \rightarrow s)} \).