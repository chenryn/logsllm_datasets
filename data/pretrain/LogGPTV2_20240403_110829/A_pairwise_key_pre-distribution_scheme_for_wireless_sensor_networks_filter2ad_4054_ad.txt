c
We present the values of ph(1), ph(2), and ph(3) in Fig. 5. From
these ﬁgures, we can observe that ph(1) and ph(2) add up to 1
when τ is large. So the communication overhead is limited to 2
hops when τ is large; when n = 40 and pactual > 0.3, the over-
head is bounded by 3 hops (recall that n is the expected number of
neighbors within wireless communication range of a node).
5.2 Computational Overhead
As indicated in Section 2, it is necessary for nodes to calculate
the common keys by using the corresponding columns of matrix
G. If the Vandermonde matrix is chosen to be the G matrix, the
dominating computation cost in our scheme is due to 2λ modular
multiplications: λ − 1 come from the need to regenerate the corre-
sponding column of G from a seed, the other λ + 1 come from the
inner product of the corresponding row of (DG)T with this col-
umn of G. For example, to regenerate the ﬁrst column of G, which
consists of 1, s, s2, . . ., sλ, a node needs to compute s2, . . ., sλ;
the total number of modular multiplications is λ − 1.
To analyze the computational overhead of these 2λ modular mul-
n=40
n=70
n=100
s
p
o
H
f
o
y
t
i
l
i
b
a
b
o
r
P
1
0.9
0.8
0.7
0.6
0.5
0.4
0.3
0.2
0.1
0
ph(1)
ph(2)
ph(3)
2
3
4
5
6
τ
7
8
9
10
s
p
o
H
f
o
y
t
i
l
i
b
a
b
o
r
P
1
0.9
0.8
0.7
0.6
0.5
0.4
0.3
0.2
0.1
0
ph(1)
ph(2)
ph(3)
2
3
4
5
6
τ
7
8
9
10
s
p
o
H
f
o
y
t
i
l
i
b
a
b
o
r
P
1
0.9
0.8
0.7
0.6
0.5
0.4
0.3
0.2
0.1
0
ph(1)
ph(2)
ph(3)
2
3
4
5
6
τ
7
8
9
10
Figure 5: Communication Overhead Analysis (ω = 50)
6.
IMPROVING SECURITY USING TWO-
HOP NEIGHBORS
In this section we describe a way to further improve the security
of our key pre-distribution scheme. Based on Inequality (4), we
have
)(1 − τ
)··· (1 −
1 − (1 − τ
ω
≥ (N − 1)
(ln(N ) − ln(− ln(Pc))).
ω − 1
τ
ω − τ + 1
)
(12)
nN
Notice that the left side is smaller when ω is larger, and the right
side is smaller when n is larger when other parameters are ﬁxed.
Therefore, when the network size N, the global connectivity Pc,
and τ are ﬁxed, we can select a larger ω if the expected number
of neighbors n increases while still satisfying the above inequal-
ity. We know immediately from Inequality (11) that the larger the
value of ω is, the more resilient the network will be. Therefore,
increasing n can lead to security improvement.
There are two ways to increase n for an existing sensor network:
the ﬁrst is to increase the communication range, but this also in-
creases energy consumption. The second way is to use two-hop
neighbors. A two-hop neighbor of node v is a node that can be
reached via one of v’s one-hop (or direct) neighbors. To send a
message to a two-hop neighbor, v needs to ask its direct neigh-
bor to forward the message. Since the intermediate node only for-
wards the message and does not need to read the contents of the
message, there is no need to establish a secure channel between
the sender and the intermediate node, or between the intermediate
node and the two-hop neighbor. As long as the sender and its two-
hop neighbor can establish a secure channel, the communication
between them will be secured.
If two nodes, i and j, are two-hop neighbors and both of them
carry key information from a common key space, they can ﬁnd a
secret key between themselves using the following approach: First,
they ﬁnd an intermediate node I that is a neighbor to both of them.
Nodes i and j then exchange their identities and public part of key
space information via I. Then, i and j ﬁnd a common key space,
and compute their secret key in that common key space. i and j can
then encrypt any future communication between themselves using
this secret key. Although all future communication still needs to go
through an intermediate node, e.g., I, the intermediate node cannot
decrypt the message because it does not have the key.
boring nodes i and j can be performed based on Geks in the same
way as it is performed based on the original Key-Sharing Graph
Gks. The difference between this scheme and the Gks-based key
agreement scheme is that in the Geks-based key agreement scheme,
some edges along a secure path might be an edge between two-hop
neighbors, thus forwarding is needed.
6.1 Security Improvement
Security can be improved signiﬁcantly if key agreement is based
on Geks. When we treat a two-hop neighbor as a neighbor, the ra-
dius of the range covered by a node doubles, so the area that a node
can cover is increased by four times. Therefore, the expected num-
ber of neighbors n(cid:1)
for each node in Geks is about four times as
large as that in Gks. According to Equations (1) and (2), to achieve
the same connectivity Pc as that of Gks, the value of prequired for
Geks is one fourth of the value of prequired for Gks. Thus, the
value of pactual for Geks is one fourth of the value of pactual for
Gks. As we have already shown, when τ is ﬁxed, the larger the
value of ω is, the smaller the value of pactual is. For example, as-
suming a network size N = 10, 000 and the desirable connectivity
Pc = 0.99999, if we ﬁx τ = 2, we need to select ω = 7 for
the Gks-based key agreement scheme; however, using Geks-based
scheme, we can select ω = 31. The security of the latter scheme
is improved signiﬁcantly. By using Equation (11), there is about
31/7(≈ 4.5) times security improvement of the two-hop-neighbor
scheme over the basic 1-hop-neighbor scheme. Using Equation (9),
we plot the security property of the above two cases in Fig. 6.
1
0.9
0.8
0.7
0.6
0.5
0.4
0.3
0.2
0.1
i
d
e
s
m
o
r
p
m
o
c
s
n
o
i
t
i
a
c
n
u
m
m
o
c
f
o
n
o
i
t
c
a
r
F
0
0
200
400
1−hop−neighbor scheme
2−hop−neighbor scheme
800
600
1400
Number of nodes compromised
1000
1200
1600
1800
2000
After all direct neighbors and two-hop neighbors have estab-
lished secure channels among themselves, the entire network forms
an Extended Key-Sharing Graph Geks, in which two nodes are
connected by an edge if there is a secure channel between them,
i.e. these two nodes (1) have at least one common key space, and
(2) are either direct neighbors or two-hop neighbors. Once we have
formed the Geks, key agreement between any pair of two neigh-
Figure 6: Comparison: The left curve uses the 1-hop-neighbor
scheme (with ω = 7 and τ = 2), and the right curve uses the
2-hop-neighbor scheme (with ω = 31, and τ = 2). Both ﬁgures
achieve the same desirable global connectivity Pc = 0.99999.
6.2 Overhead Analysis
Such security improvement does come with a cost. If the length
(the total number of edges) of a path between two nodes in Geks
is (cid:7), the actual number of hops along this path is larger than (cid:7) be-
cause some edges in Geks connect two two-hop neighbors. For
each node, the number of two-hop neighbors on the average is three
times the number of one-hop neighbors if nodes are uniformly dis-
tributed. Therefore, assuming that the probability of selecting a
two-hop edge and a one-hop edge is the same, for a path of length
∗ (cid:7) = 1.75(cid:7) (note: in
(cid:7), the expected actual length is 3
4
practice, we can achieve better than 1.75(cid:7) because we usually pre-
fer the one-hop edge if both a one-hop edge and a two-hop edge are
candidates for a secure path). Let p(cid:1)
h((cid:7)) be the ph((cid:7)) value of the
two-hop-neighbor scheme and let p(cid:1)(cid:1)
h((cid:7)) be the ph((cid:7)) value of the
basic scheme (only using direct neighbors); assume the maximum
length of the shortest path between two neighbors is L. Therefore,
the ratio between the overhead of the two-hop-neighbor scheme
and that of the basic scheme can be estimated using the following
formula:
∗ 2(cid:7) + 1
4
Relative Overhead =
h((cid:7))
,
(13)
p(cid:1)
h(1) +
(cid:29)L
(cid:29)L
(cid:6)=2 1.75(cid:7) · p(cid:1)
(cid:6)=1 (cid:7) · p(cid:1)(cid:1)
h((cid:7))
where we do not need to multiply ﬁrst term with 1.75 since if two
neighbors share a common key, then the length of path between
them is 1 and is never a two-hop edge. For example, the overhead
ratio of the two schemes used in Fig. 6 is 3.18, namely with 3.18
times more overhead, the resilience can be improved by 4 times.
The communication cost discussed here occurs only during the key
setup phase, so it is a one-time cost. The idea of two-hop neighbors
can be extended to multi-hop neighbors, and the security can be
further improved.
7. CONCLUSIONS
We have presented a new pairwise key pre-distribution scheme
for wireless sensor networks. Our scheme has a number of ap-
pealing properties. First, our scheme is scalable and ﬂexible. For
a network that uses 64-bit secret keys, our scheme allows up to
N = 264 sensor nodes. These nodes do not need to be deployed
at the same time; they can be added later, and still be able to estab-
lish secret keys with existing nodes. Second, compared to existing
key pre-distribution schemes, our scheme is substantially more re-
silient against node capture. Our analysis and simulation results
have shown, for example, that to compromise 10% of the secure
links in the network secured using our scheme, an adversary has to
compromise 5 times as many nodes as he/she has to compromise
in a network secured by Chan-Perrig-Song scheme or Eschenauer-
Gligor scheme. Furthermore, we have also shown that network
resilience can be further improved if we use multi-hop neighbors.
We have conducted a thorough overhead analysis to show the
efﬁciency of our scheme. The communication overhead analysis
has shown that when pactual ≥ 0.33, a node can almost (with very
high probability) reach its neighbor within at most 3 hops. For
the computation overhead, although our scheme involves modular
multiplications, we have shown that the energy cost is about the
same as encrypting a message of length 3200 bits using AES.
8. REFERENCES
[1] Wireless Integrated Network Sensors, University of
California, Available: http://www.janet.ucla.edu/WINS.
[2] I. F. Akyildiz, W. Su, Y. Sankarasubramaniam, and
E. Cayirci. A survey on sensor networks. IEEE
Communications Magazine, 40(8):102–114, August 2002.
[3] R. Anderson and M. Kuhn. Tamper resistance - a cautionary
note. In Proceedings of the Second Usenix Workshop on
Electronic Commerce, pages 1–11, November 1996.
[4] R. Blom. An optimal class of symmetric key generation
systems. Advances in Cryptology: Proceedings of
EUROCRYPT 84 (Thomas Beth, Norbert Cot, and Ingemar
Ingemarsson, eds.), Lecture Notes in Computer Science,
Springer-Verlag, 209:335–338, 1985.
[5] C. Blundo, A. D. Santis, A. Herzberg, S. Kutten, U. Vaccaro,
and M. Yung. Perfectly-secure key distribution for dynamic
conferences. Lecture Notes in Computer Science,
740:471–486, 1993.
[6] D. W. Carman, P. S. Kruus, and B. J. Matt. Constraints and
approaches for distributed sensor network security. NAI Labs
Technical Report #00-010, available at
http://download.nai.com/products/media/nai/zip/nailabs-
report-00-010-ﬁnal.zip,
2000.
[7] H. Chan, A. Perrig, and D. Song. Random key
predistribution schemes for sensor networks. In IEEE
Symposium on Security and Privacy, pages 197–213,
Berkeley, California, May 11-14 2003.
[8] W. Difﬁe and M. E. Hellman. New directions in
cryptography. IEEE Transactions on Information Theory,
22:644–654, November 1976.
[9] W. Du, J. Deng, Y. S. Han, S. Chen, and P. K. Varshney. A
key management scheme for wireless sensor networks using
deployment knowledge. Technical Report, Syracuse
University, July 2003. Available from
http://www.cis.syr.edu/∼wedu/Research/paper/ddhcv03.pdf.
[10] Erd˝os and R´enyi. On random graphs I. Publ. Math.
Debrecen, 6:290–297, 1959.
[11] L. Eschenauer and V. D. Gligor. A key-management scheme
for distributed sensor networks. In Proceedings of the 9th
ACM conference on Computer and communications security,
November 2002.
[12] J. M. Kahn, R. H. Katz, and K. S. J. Pister. Next century
challenges: Mobile networking for smart dust. In
Proceedings of the 5th Annual ACM/IEEE Internation
Conference on Mobile Computing and Networking
(MobiCom), pages 483–492, 1999.
[13] F. J. MacWilliams and N. J. A. Sloane. The Theory of
Error-Correcting Codes. New York, NY: Elsevier Science
Publishing Company, Inc., 1977.
[14] D. Malkhi, M. Reiter, A. Wool, and R. N. Wright.
Probabilistic quorum systems. Information and
Computation, (2):184–206, November 2001.
[15] B. C. Neuman and T. Tso. Kerberos: An authentication
service for computer networks. IEEE Communications,
32(9):33–38, September 1994.
[16] A. Perrig, R. Szewczyk, V. Wen, D. Cullar, and J. D. Tygar.
SPINS: Security protocols for sensor networks. In
Proceedings of the 7th Annual ACM/IEEE Internation
Conference on Mobile Computing and Networking
(MobiCom), pages 189–199, Rome, Italy, July 2001.
[17] W. W. Peterson. Error-Correcting Codes. Cambridge, MA:
Mass. Inst. Tech., second edition, 1972.
[18] R. L. Rivest, A. Shamir, and L. M. Adleman. A method for
obtaining digital signatures and public-key cryptosystems.
Communications of the ACM, 21(2):120–126, 1978.