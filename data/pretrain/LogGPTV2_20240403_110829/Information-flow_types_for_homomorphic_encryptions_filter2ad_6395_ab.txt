Let L be the projection from security types to labels deﬁned by
L(τ∗τ(cid:48)) = L(τ )(cid:117)L(τ(cid:48)), L(Array (τ )) = L(τ ), and L(t((cid:96))) = (cid:96).
We overload ≤ for subtyping on security types (e.g. t((cid:96)) ≤ t((cid:96)(cid:48))
if (cid:96) ≤ (cid:96)(cid:48) ) and as a relation between security types and labels (e.g.
·
t((cid:96)) ≤ (cid:96)). We overload (cid:116) from labels to types (e.g. t((cid:96)(cid:48)) (cid:116) (cid:96)
=
t((cid:96)(cid:48) (cid:116) (cid:96))). Memory policies are functions Γ from variables to se-
curity types. For a given policy Γ, we overload ≤ as a relation be-
tween variables, security types, and labels (e.g. x ≤ (cid:96) if Γ(x) ≤ (cid:96)).
We explain our datatypes for encryptions, but defer their typ-
ing rules to the next sections. Enc τ K represents an encryption
of a plaintext with security type τ; Ke E K and Kd E K represent
encryption and decryption keys, respectively, with a set E that in-
dicates the range of security types τ for the plaintexts that may be
encrypted and decrypted with these keys. This set enables us to
type code that uses the same key for encrypting values of different
types, which is important for efﬁciency.
The key labels K are used to keep track of keys, grouped by
their key-generation commands. In a given program, there should
be only one keypair generation for a given label. These labels are
attached to the types of the generated keypairs, and propagated to
the types of any derived cryptographic materials. They are used to
match the usage of key pairs and to prevent key cycles.
The encryption indexes q are used to distinguish between differ-
ent datatypes for encryptions, for instance when they range over
different groups before and after some homomorphic operations.
In all other cases, we use a single, implicit index q = 0.
Active adversaries For a given α ∈ L, we let α-adversaries range
α = {x | x ≤C α}
over commands A that read variables in a set V C
α = {x | x ≤I α}, that is,
and write variables outside a set V I
rv(A) ⊆ V C
α = ∅. We consider programs ob-
tained by composing commands with diverse levels of trust, in-
cluding any α-adversaries as well as ﬁxed, trusted commands. To
this end, we write P [_] for a command context (with a grammar
obtained from that of P by adding a hole _) and P [P (cid:48)] for the
command obtained by replacing each occurrence of _ with P (cid:48).
α and wv(A) ∩ V I
VAR(cid:96) x : Γ(x)
OP
op : τ1 . . . τn → τ
(cid:96) ei : τi for i = 1..n
(cid:96) op(e1, . . . , en) : τ
SUBE(cid:96) e : τ
τ ≤ τ(cid:48)
(cid:96) e : τ(cid:48)
ASSIGN(cid:96) e : Γ(x)
(cid:96) x := e : L(x)
SEQ(cid:96) P : (cid:96)
(cid:96) P (cid:48) : (cid:96)
(cid:96) P ; P (cid:48) : (cid:96)
PROBFUN
(cid:96) e : Data ((cid:96)) for e ∈ (cid:126)e
Data ((cid:96)) ≤ Γ(x) for x ∈ (cid:126)x
(cid:96) (cid:126)x := f ((cid:126)e) : (cid:96)
COND(cid:96) e : Data ((cid:96))
(cid:96) P (cid:48) : (cid:96)
(cid:96) if e then P else P (cid:48)
(cid:96) P : (cid:96)
: (cid:96)
WHILE
(cid:96) e : Data ((cid:96))
(cid:96) P : (cid:96)
(cid:96) while e do P : (cid:96)
SUBC(cid:96) P : (cid:96)
(cid:96)(cid:48) ≤ (cid:96)
(cid:96) P : (cid:96)(cid:48)
SKIP(cid:96) skip : (cid:62)L
HOLE
(cid:96) _ : (C(α), (cid:62)I )
Figure 2: Non-cryptographic typing rules with policy Γ.
Figure 2 deﬁnes a type system that prevents information ﬂows in
command contexts that do not rely on cryptography: two runs of the
command obtained by inserting α-adversaries, starting with initial
memories that coincide on all variables in V C
α ),
yield ﬁnal memory distributions that also coincide on those vari-
ables. The typing rules are standard, except for Rule HOLE, which
safely accounts for any α-adversary, and Rule PROBFUN, which is
a probabilistic version of OP. In Rule OP, the ﬁrst hypothesis gives
the type signature of op:
α (resp. outside V I
: τ0, τ1 → (τ0 ∗ τ1)
: (τ0 ∗ τ1) → τi
: Array (τ )
: Array (τ ), Data (L(τ )) → τ
op : Data ((cid:96)) ∗ ··· ∗ Data ((cid:96)) → Data ((cid:96))
(cid:104)(cid:105)
()i
[]
cell
update : Array (τ ), τ, Data (L(τ )) → Array (τ )
+ : Array (τ ), τ → Array (τ )
size : Array (τ ) → Data (L(τ ))
We assume that all primitive operations run in polynomial time
in the size of their arguments, and that all primitive probabilistic
functions yield distributions that are polynomial-time samplable.
As we use cryptographic primitives, we assume that they take an
additional parameter included in the initial memory whose length
matches a security parameter η. We overload Pr[(cid:104)P, µ(cid:105); ϕ] to de-
note a probability function parameterized by η. This function is
deemed negligible when, for all c > 0, there exists ηc such that, for
all η ≥ ηc, we have Pr[(cid:104)P, µ(cid:105); ϕ] ≤ η−c.
3. TYPING ENCRYPTIONS
We consider cryptographic algorithms for asymmetric (public
key) encryption. We model them in our language as probabilis-
tic functions Ge, E, and D that meet both functional and security
properties, given below.
DEFINITION 1
(ENCRYPTION SCHEME). Let pubkeys, seck-
eys, plaintexts, and ciphertexts be sets of polynomially-bounded bit-
strings indexed by η. An asymmetric encryption scheme is a triple
of algorithms (Ge,E,D) such that
1. Ge, used for key generation, ranges over pubkeys × seckeys;
2. E, used for encryption, ranges over ciphertexts;
3. D, used for decryption, ranges over plaintexts;
4. for all ke, kd := Ge(), if y := E(m, ke) with m ∈ plaintexts,
then D(y, kd) = m.
Next, we recast the usual game-based deﬁnition of resistance
against chosen plaintext attacks in our setting.
DEFINITION 2
(CPA SECURITY). The scheme (Ge,E,D)
provides indistinguishability against adaptive chosen-plaintexts at-
tacks when, for the commands
·
= if b = 0 then m := E(x0, ke) else m := E(x1, ke)
·
= b := {0, 1}; ke, kd := Ge(); A[E]
E
CPA
and for any polynomials command context A such that b, kd /∈
rv(A) and b, kd, ke, η /∈ wv(A), the advantage of the adversary
deﬁned as |Pr[CPA; b =0 g] − 1
2| is negligible.
The deﬁnition involves an indistinguishability game where the
adversary command A attempts to guess (and write in variable g)
whether the oracle encrypts x0 or x1. This notion of security does
not involve the decryption algorithm. In particular, it does not cover
chosen-ciphertext attacks.
Typing CPA encryptions Figure 3 gives cryptographic rules for
typing the algorithms of a CPA encryption scheme.
In Rule GENE for key generation, the ﬁrst hypothesis requires
that the encryption scheme (implicitly parameterized by the key
label K) be at least CPA secure. The next two hypotheses give
matching encryption-key and decryption-key types to variables ke
and kd, with the same key label K and the same range of plain-
texts E. The constraint τ ≤C (cid:96)d for every type τ ∈ E states that
the decryption key kd is at least as conﬁdential as every plaintext,
thereby preventing conﬁdentiality leaks by key compromise. (The
constraint appears in GENE rather than DECRYPT, to ensure that all
copies of the decryption key are sufﬁciently conﬁdential.)
In Rule ENCRYPT, the ﬁrst three hypotheses bind types to the ci-
phertext y, plaintext e, and key ke involved in the encryption; these
types are related by τ ∈ E and K. The type of y carries two
security labels: (cid:96)y, the level of the encryption, and L(τ ) within
Enc τ K, the level of the encrypted plaintext. The label (cid:96)y in the
typing of ke records an ordinary ﬂow from ke to y: by subtyping,
we must have L(ke) ≤ (cid:96)y. Conversely, there is no constraint on the
ﬂow from e to y, so our typing rule may be sound only with cryp-
tographic assumptions: for conﬁdentiality, this ﬂow reﬂects that
encryption is a form of declassiﬁcation: e can be more conﬁdential
than y. In that case, that is τ (cid:54)≤C y, we say that K declassiﬁes
C(τ ).
For integrity, this ﬂow reﬂects that encryption is also a
form of endorsement: intuitively, y is only a carrier for e, not in
itself an observable outcome of the program; its integrity indicates
that y is the result of a correct encryption, even when e itself is
not trusted. Finally, the disjunction is a robustness condition on the
encryption key, requiring that its integrity be sufﬁcient to protect
the conﬁdentiality of the plaintext. The ﬁrst disjunct excludes that
an α-adversary may affect the encryption key (for instance over-
writing it with a key she knows). The second disjunct states that
the conﬁdentiality protection provided by the key is nil, since an
α-adversary may directly read the plaintext. Hence, in case E con-
tains plaintexts with different levels of secrecy, a key with relatively
low integrity may still be used to encrypt a plaintext with relatively
low conﬁdentiality.
In Rule DECRYPT, the ﬁrst three hypotheses on the left bind types
to the variables x, y, and kd involved in the decryption; these types
are related by τ and K. The label L(x) ﬂows from y to x, as in a
normal assignment. The label (cid:96)d and the hypothesis (cid:96)d ≤I x record
integrity ﬂows from kd to x, as in a normal assignment. Con-
versely, there is no constraint on the conﬁdentiality ﬂow from kd
to the plaintext x, so our typing rule may be sound only with cryp-
tographic assumptions. Informally, this reﬂects that the decrypted
plaintext yield no information on the decryption key itself, thereby
enabling decryptions of plaintexts with different conﬁdentiality lev-
els. When (cid:96)d (cid:54)≤C x, we say that K declassiﬁes C((cid:96)d).
The disjunction deals with the integrity of the ciphertext y and
the decryption key kd, with three cases: either
• both ciphertext and decryption key have high integrity; or
• the plaintext is at least as conﬁdential as the key; or
• cryptographic protection is nil, since an α-adversary may
read the decryption key then decrypt the plaintext.
The ﬁrst case intuitively reﬂects our CPA security assumptions: it
requires that the integrity of the ciphertext and the decryption key
sufﬁces to guarantee a correct decryption.
When y (cid:54)≤I α and (cid:96)d (cid:54)≤C α, the second case covers some
chosen-ciphertext attacks, which may come as a surprise: in that
case, we say that K depends on C(x) and we rely on an additional
safety condition (see also Example 3 and 4). When (cid:96)d (cid:54)≤I α and
(cid:96)d (cid:54)≤C α, the second case also cover compromise of the decryption
key, which may then ﬂow to the decrypted value, as discussed in
Example 2.
Examples We provide a series of examples that illustrate the rel-
ative information-ﬂow security properties of encryptions.
In the
examples, unless speciﬁed otherwise, we assume that α is LH and
ke, kd is a secure keypair, that is, we set L(ke) = LH and L(kd) =
HH and assume that (Ge,E,D) is CPA. We also write for instance
xLH for a variable such that L(xLH) = LH. We ﬁrst encrypt a pair
of mixed integrity into a ciphertext of high integrity:
EXAMPLE 1
(HIGHER-INTEGRITY ENCRYPTIONS).
Consider the command context
ke, kd := Ge(); x := (cid:104)xHH, xHL(cid:105); yLH := E(x, ke); _;
x(cid:48) := D(yLH, kd); x(cid:48)
HH := (x(cid:48))0; x(cid:48)
HL := (x(cid:48))1
Let Γ(x) = Γ(x(cid:48)) = Data (HH) ∗ Data (HL). This command
typechecks; it is safe, inasmuch as the adversary can inﬂuence the
values of xHL, x(cid:48)
HL and of the ciphertext yLH, but not the ﬁnal value
of x(cid:48)
HH.
Encrypting with a low-integrity key clearly leads to conﬁdential-
ity leaks, as the adversary may overwrite the key with its own key
before the encryption. Decrypting with a low-integrity decryption
key may also be problematic, especially when the plaintext is not
secret, as illustrated below:
EXAMPLE 2
(LOW-INTEGRITY KEYS).
Consider the command context
d := k(cid:48)
d; xLL := D(yLH, k(cid:48)(cid:48)
d )
d := kd; yLH := E(1, ke); _;
ke, kd := Ge(); k(cid:48)
d := kd else k(cid:48)(cid:48)
if xHH then k(cid:48)(cid:48)
d and k(cid:48)(cid:48)
We let k(cid:48)
d be low-integrity copies of the decryption key,
d) = L(k(cid:48)(cid:48)
that is L(k(cid:48)
d ) = HL. The command is not typable, and is
actually unsafe, since we may ﬁll the hole with the command k(cid:48)
d :=
d to contain the correct key if and only if xHH (cid:54)= 0, and the
0; thus, k(cid:48)(cid:48)
adversary can ﬁnally compare xLL with 1, the correct decryption,
and infer the conﬁdential value xHH.
GENE
(Ge,E,D) is CPA
Γ(ke) = Ke E K((cid:96)e)
Γ(kd) = Kd E K((cid:96)d)
∀τ ∈ E, τ ≤C (cid:96)d
(cid:96) ke, kd := Ge() : (cid:96)e (cid:117) (cid:96)d
ENCRYPT
Γ(y) = Enc τ K((cid:96)y)
(cid:96) e : τ
τ ∈ E