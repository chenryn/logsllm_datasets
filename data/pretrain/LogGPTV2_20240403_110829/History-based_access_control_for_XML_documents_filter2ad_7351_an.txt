the server only runs the services of our architecture and no other services.
As a result, the only way to attack the document processor is using the
interface that it provides for clients. As mentioned in the previous section,
we require that both the client machine and its user is authenticated with
an authentication mechanism. Thus, we do not regard spooﬁng of clients in
this section.
The attacker can use the interface of the document processor to issue
commands that put the document processor in an unwanted state, e.g., a
crash. These types of attacks exploit ﬂaws of the design or implementation
of the communication protocol. For example, an attacker could send a com-
mand with a parameter outside the speciﬁed range. If such an error is not
handled correctly, it could result in a crash of the corresponding component.
In this case, the attacks aims at the availability of the system. A similar,
but more dangerous type of this attack is to send a parameter consisting of
more data than speciﬁed in the communication protocol. If the protocol is
implemented careless, then the oversized parameter can exceed the size of
the buﬀer where the data is written to and overwrite data on the stack of
the executing program. Therefore, this attack is referred to as buﬀer over-
ﬂow attack [CWP+00, LE01]. This attack can be used to inject executable
code in the binary of the attacked program. This is achieved by overwriting
the return address of the current procedure, because this return address is
stored on the stack too. The new return address points to injected code that
is also part of the oversized parameter. When the current procedures exits
and control ﬂow should be passed to the calling procedure the overwritten
return address is read from the stack and jumped to. At this point the in-
jected code of the attacker is executed. For example, this code can open a
remote login shell. To be able to perform a successful buﬀer overﬂow attack,
the attacked program must be implemented careless by not checking the size
of an input parameter. Using this attack method, the attacker can gain the
permissions of the process that he has attacked. In our case, the attacker
could take control over the document processor, which is able to load and
store documents from the document database. Hence, we must implement
our architecture in a way that it is not vulnerable to buﬀer overﬂows and
maliciously formatted input parameters.
6.1. RISK ANALYSIS
93
Another type of attack aims at the availability of the server by causing
an overload on one component of its components, e.g., by issuing commands
in a high frequency. For example, a legitimate user could request views of
diﬀerent documents several times per second. Since the server must evaluate
the rules to calculate a view, a lot of computational resources of the server
are used for that process. Such an attack can increase the time the server
needs to execute commands for other clients. If this time exceeds a certain
threshold, the performance of the server is not more acceptable and thus it
cannot be used by the other clients. Therefore, such an attack is referred to as
a deny of service (DoS) attack [Nee94]. Since only authorized users are able
to execute all commands of the server, e.g., the calculation of a view, this type
of user has the most potential to perform a DoS attack. Unauthorized users
can try to perform DoS attacks by performing authentication requests in a
high frequency. DoS attacks are diﬃcult to avoid since they use legitimate
commands. One approach to avoid vulnerabilities against DoS attacks is to
limit the frequency of certain resource-intensive commands. For example, we
can deﬁne that at most one view per second can be calculate for a single
authorized user. In this thesis, we will only inspect vulnerabilities against
DoS attacks that are introduced by our components. There are many other
DoS attacks, e.g., attacks that cause a high network traﬃc, that are not
special for our architecture and therefore discussed in the literature, e.g.,
[SKK+97, Mea99, KK03].
Additionally, an attacker can eavesdrop the communication between the
server and the client. Such an attack can aim both at the conﬁdentiality
of the transferred documents and on the authenticity of client and server,
because the attacker can retrieve either the documents or the user credentials
from the transferred data. To prevent this attack, me must encrypt the
communication between client and server, which is a common method to
achieve conﬁdentiality.
Moreover, a legitimate user could edit a document and deny having done
so later. For example, a user could delete important conditions of a contract
or change the amount of money granted to a project in the corresponding doc-
ument. We achieve the non-repudiation of performed operations by logging
them in the history. As a result, we do not need an additional mechanism to
achieve this security goal.
All attacks on the server discussed so far are summarized in Table 6.2
together with the mechanisms that are required to prevent the corresponding
attack.
94
CHAPTER 6. SECURITY ARCHITECTURE
Required mechanism
Attack
Careful implementation
Bad input parameter
Limit rate of certain commands
DoS attack
Encrypt communication
Eavesdrop network communication
Repudiation of performed operations handled by the histories
Table 6.2: Attacks on the server and required mechanisms
6.1.3 Requirements for the Security Architecture
In this section, we present the requirements for the security architecture.
The ﬁrst two requirements apply to any scenario, whereas the requirements
that follow are speciﬁc for our system architecture.
Requirement 1: The operating system is conﬁgured to support only the
minimum set of services and resources. As we have discussed so far, some
of the mechanisms for securing the client must be performed by conﬁguring
the operating system, e.g., conﬁguring it to not swap the memory occupied
by the user interface or disabling the possibility to take digital screen shots.
Moreover, we must conﬁgure the operating system to allow only network
connections to the document processor, which reduces the risk that data is
sent to an unauthorized third party.
Requirement 2: The number of software components of the operating
system is minimal. To reduce the risk of vulnerabilities, it is highly desirable
to employ an operating system that has the minimal set of functions that are
required to execute the user interface, because the chance of vulnerabilities
increases with the complexity of a system. Consequently, we must use a
operating system with the minimal number of user space software and kernel
components, e.g., device drivers. For example, we can use a microkernel-
based operating system and remove not required components from it.
The downside of this approach is that the client machine might by ren-
dered unusable for other software that should be executed on it, because the
operating system that we have installed can be incompatible with this other
software. In the case when the client machine is used to execute only the user
interface this is no problem. But in the other cases, which we think are very
likely, the user either needs a second machine or must reboot the machine to
use the operating system that is compatible with the other applications that
he likes to run.
Requirement 3: Attestation of the client machine. Moreover, we need
6.2. SECURITY MECHANISMS
95
to ensure that the operating system that we have supplied is neither ex-
changed with another operating system nor is its conﬁguration manipulated
to disable the security mechanisms of the security architecture. For that pur-
pose, we will use the mechanisms deﬁned by the Trusted Computing Group
(TCG) and that we have described in Section 2.3. The remote attestation is
a mechanism that allows a remote platform, e.g., the server, to check whether
the system is in the correct state.
Requirement 4: Authenticity of client and server. The user of the
client platform could manipulate his machine to forward an attestation re-
quest to another machine with authentic software. Therefore we must ensure
that the provided conﬁguration values refer to the attested system and that
the authenticity of both client and server is guaranteed.
Requirement 5: Completeness of attestation. The deﬁnition of this
state depends on what is measured on the client side. The usual approach
[SZJvD04] is to calculate the hash value of every executed binary and include
it in the state deﬁnition. As a result, the veriﬁer receives a list of all bina-
ries that have been executed since the last reboot of the machine. However,
this approach has two problems. First, the received list of executed binaries
gives no hint about what was executed after the remote attestation. For
example, a key logger or trojan horse can be started after the remote attes-
tation. Although the malware was located on the client machine at the time
of the remote attestation, it was not detected, because it was executed after
the remote attestation. The second problem is, that using this approach,
only the executable binaries of applications are inspected. Shell scripts and
conﬁguration ﬁles are not included in the measurement. This leads to the
problem, that certain manipulations, e.g., manipulations of the conﬁgura-
tion ﬁles, cannot be detected by this approach. Consequently, we need an
approach that measures the complete system conﬁguration including scripts
and conﬁguration ﬁles.
6.2 Security Mechanisms
As discussed before, we must ensure that the client machine can execute ad-
ditional software, e.g., a web browser or an e-mail client, after the security
mechanisms are applied. This can be a problem when requirements 1 and 2
are fulﬁlled, since they reduce the compatibility of the client machine with
additional software. For this reason, it is desirable to have a diﬀerent oper-
ating system for diﬀerent applications. As a consequence, we need a method
96
CHAPTER 6. SECURITY ARCHITECTURE
to run diﬀerent operating systems on one client machine, which we achieve
by using virtualization techniques and running diﬀerent virtual machines on
a client machine. Each operating system can be executed in a separate vir-
tual machine. Concerning the security of the system, we must ensure that
these virtual machines cannot inﬂuence each other. For example, we must
ensure that malware running in one virtual machine cannot extract conﬁden-
tial data from another virtual machine. We apply an approach for providing
diﬀerent virtual machines [SBHE07] and analyze whether the attacks de-
scribed in Section 6.1 can be solved with this approach. The strong isolation
achieved through virtualization guarantees that diﬀerent virtual machines
cannot inﬂuence each other. The approach [SBHE07], on which we base our
architecture, uses virtualization in combination with the mechanisms deﬁned
by the Trusted Computing Group. It establishes several diﬀerent execution
environments by using various types of virtual machines, which are strongly
isolated from each other. It also provides an abstraction of the underlying
hardware TPM through a virtualized TPM (vTPM) interface. This allows
the diﬀerent virtual machines to use the measurement and reporting facili-
ties of the TPM, thus they beneﬁt from a hardware-based trust anchor. This
approach has the advantage over the others [Bas06] that the binding between
TPM and vTPM is already speciﬁed, which is useful for remote attestation
of virtual machines.
We use this approach to execute the user interface in one such isolated
virtual machine. Other applications are executed in a diﬀerent virtual ma-
chine. Thus, they cannot interfere with the user interface. Figure 6.1 depicts
the approach applied to our system architecture.
Figure 6.1: Security architecture organized in layers
The resulting security architecture consists of components divided into
four protection layers, in which components located on one layer provide
HypervisorTPMHardwareManagement VMOpen VMTrusted VMvTPMUserInterfaceProtection Layer 4Protection Layer 3Protection Layer 2Protection Layer 16.2. SECURITY MECHANISMS
97
security mechanisms to protect the components located on the layer directly
above. In the case of a successful attack on one layer, the layers below can
prevent the attacker from successfully transferring data to another physical
machine. The layers do this by using additional mechanisms that ensure that
data cannot be transferred elsewhere, e.g., by restricting network connections
to the server of the architecture.
These components include three virtual machines, namely the open vir-
tual machine, a management virtual machine and the trusted virtual machine
(TVM). Additionally, a hypervisor partitions the underlying hardware and a
TPM serves as a hardware-based trust anchor. The TPM provides hardware-
based tamper-evident cryptographic functions to protect the software compo-
nents running on the layer directly above from unauthorized manipulations.
Together with remaining hardware components, the TPM forms the lowest
protection layer, more speciﬁcally, protection layer 4.
6.2.1 Protection Layer 4: TPM and Hardware
The TPM is the anchor of trust and the basis for the attestation. We store
several non-migratable client-speciﬁc keys in the TPM, which are used for the
challenge-response authentication with the server. This prevents the cloning
of a client machine and additional attacks on the authenticity of the client
machine. The attacker must perform a local physical attack, e.g., a mechan-
ical or electrical probing attack, to the TPM to extract these keys. Since
the TPM is speciﬁed to be tamper-evident, these attacks are not prevented,
but can be detected afterwards. We assume that the hardware and the TPM
behave as speciﬁed.
6.2.2 Protection Layer 3: Hypervisor and Manage-
ment VM
The hypervisor is the ﬁrst part of protection layer 3 and provides an ab-
straction layer to the underlying hardware. It has privileged access to the
hardware and can grant and revoke resources, e.g., CPU cycles, to and from
the running VMs. This hypervisor provides strong isolation of the virtual
machines, which is the protection mechanism of this layer. It ensures that
diﬀerent virtual machines cannot inﬂuence each other, e.g., by reading each
others memory. In this approach, every virtual machine uses individual vir-
tualized device drivers, which are executed within that VM. The hypervisor
ensures, that these device drivers can only access the memory of the corre-
sponding virtual machine. When running applications of diﬀerent trust levels
98
CHAPTER 6. SECURITY ARCHITECTURE
on a machine without virtualization, an attacker could use a malicious device
driver to gain system wide access, e.g., to read the memory of the user inter-
face and extract the conﬁdential documents. We assume that the hypervisor
and the management VM are set up by a trustworthy system administrator
and that the user of the machine is not able to change this conﬁguration.
Because of its privileged position, the hypervisor needs to be trustworthy,
since it can manipulate the CPU instructions of every virtual machine. We
assume that the hypervisor is trustworthy and therefore guarantees strong
isolation. Currently available virtualization solutions provide strong isola-
tion. However, this still can be circumvented with direct memory access
(DMA) operations [FHN+04]. These operations access the memory without
intervention by the CPU and therefore bypass the hypervisor’s protection
mechanisms. Hypervisors with secure sharing [KZB+91] prevent these at-
tacks, but suﬀer from a high performance overhead, as well as a large trusted
computing base, since the required I/O emulation is moved into the hyper-
visor layer.
The management virtual machine is the second part of protection layer 3.
It is responsible for starting, stopping and conﬁguring the virtual machines.
It is part of this protection layer, since it is closely connected to the hypervisor
and is a privileged VM, which has direct access to the hardware TPM.
6.2.3 Protection Layer 2: Open VM and Trusted VM
This protection layer consists of the open VM and the trusted VM. The open
VM is allowed to run arbitrary software components. It runs applications
with a lower trust level, such as web browsers or oﬃce applications. The
open VM provides the semantics of today’s open machines and therefore
has no additional protection mechanisms for upper layers. Since this virtual
machine is not of interest for our approach, we will not focus on it in the rest
of our work.
The TVM runs the user interface and a tiny OS with a minimal number
of software components, to reduce the possible number of security vulnera-
bilities. This fulﬁlls requirements 1 and 2 without losing the ability to run
other software on the client machine. The tiny OS and the user interface
are part of a virtual appliance (VA), which is a fully pre-installed and pre-
conﬁgured set of software for virtual machines. To ensure that the VA is not
manipulated, the management VM measures its integrity before startup.
The TVM runs in protection layer 2 and provides a virtual TPM (vTPM)
as an additional protection mechanism. The operating system of the TVM
uses this vTPM to protect the user interface running in protection layer 1.
We use this vTPM to perform a complete attestation of the entire hard disk
6.2. SECURITY MECHANISMS
99
of the TVM, to ensure that neither the operating system, its conﬁguration,
nor the user interface running on top of the operating system is manipulated.
As a result, the veriﬁcation of the state of the entire virtual machine requires
only one reference value. This eliminates the need to maintain a large amount
of reference values, which is the main disadvantage of the binary attestation.
Moreover, the server checks in the attestation whether the protection layers
below the operating system, e.g., the hypervisor, are trustworthy. As a result,
this mechanism fulﬁlls Requirement 5. In addition to that, we use the vTPM
to establish an authenticated channel between client and server. We discuss
the corresponding protocol in Section 6.2.5.
The TVM only accepts network requests from the server to reduce the
chance of network attacks. After the booting process, which cannot be inter-
rupted, the operating system of the TVM directly executes the user interface.
As a consequence, the only option for a user to interact with the TVM is
to use the user interface provided by us. This improves the security of the
TVM, since it limits the number of possible attacks.
All I/O interfaces which can be used to extract data from the system
are either blocked or controlled. For example, the management VM ensures
that the hard disk is read only, which prevents an attacker from temporarily
storing conﬁdential data on this disk to extract it afterwards by booting a
diﬀerent operating system. Additionally, the management VM has a conﬁg-
uration ﬁle for the TVM, which deﬁnes that network connections are only
allowed to the server of our system architecture, which inhibits an attacker