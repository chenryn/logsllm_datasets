Postgreacquiressharedlocksonlyforreferentialintegritychecks.Usingthem
inahigh-loadapplicationcanleadtoresourcestarvation,andatwo-levellocking
modelcannotpreventsuchanoutcome.
Let’srecallthestepsatransactionshouldtaketolockarow:
 Ifthexmaxfieldandhintbitsindicatethattherowislockedintheexclusive
mode,acquireanexclusiveheavyweighttuplelock.
 If required,wait for all the incompatible locks to be released by requesting a
lockontheofthexmaxtransaction(orseveraltransactionsifxmaxcontains
amultixact).
 Writeitsownintoxmaxinthetupleheaderandsettherequiredhintbits.
 Releasethetuplelockifitwasacquiredinthefirststep.
Thefirsttwostepsimplythatifthelockingmodesarecompatible,thetransaction
willjumpthequeue.
Let’srepeatourexperimentfromtheverybeginning.
=> TRUNCATE accounts;
247
Chapter13 Row-LevelLocks
=> INSERT INTO accounts(id, client, amount)
VALUES
(1,'alice',100.00),
(2,'bob',200.00),
(3,'charlie',300.00);
Startthefirsttransaction:
=> BEGIN;
=> SELECT txid_current(), pg_backend_pid();
txid_current | pg_backend_pid
−−−−−−−−−−−−−−+−−−−−−−−−−−−−−−−
134991 | 30734
(1 row)
Therowisnowlockedinasharedmode:
=> SELECT * FROM accounts WHERE id = 1 FOR SHARE;
Thesecondtransactiontriestoupdatethesamerow,butitisnotallowed: Share
andNoKeyUpdatemodesareincompatible:
=> BEGIN;
=> SELECT txid_current(), pg_backend_pid();
txid_current | pg_backend_pid
−−−−−−−−−−−−−−+−−−−−−−−−−−−−−−−
134992 | 30805
(1 row)
=> UPDATE accounts SET amount = amount + 100.00 WHERE id = 1;
Waitingforthefirsttransactiontocomplete,thesecondtransactionisholdingthe
tuplelock,justlikeinthepreviousexample:
=> SELECT * FROM locks_accounts WHERE pid = 30805;
pid | locktype | lockid | mode | granted
−−−−−−−+−−−−−−−−−−−−−−−+−−−−−−−−−−−−−−−+−−−−−−−−−−−−−−−−−−+−−−−−−−−−
30805 | relation | accounts | RowExclusiveLock | t
30805 | transactionid | 134991 | ShareLock | f
30805 | transactionid | 134992 | ExclusiveLock | t
30805 | tuple | accounts(0,1) | ExclusiveLock | t
(4 rows)
248
13.4 WaitQueue
T1
Share
ctid
T2 xmin xmax
(0,1) data
T1
tuple(0,1)
Nowletthethirdtransactionlocktherowinasharedmode. Suchalockiscom-
patiblewiththealreadyacquiredlock,sothistransactionjumpsthequeue:
=> BEGIN;
=> SELECT txid_current(), pg_backend_pid();
txid_current | pg_backend_pid
−−−−−−−−−−−−−−+−−−−−−−−−−−−−−−−
134993 | 30876
(1 row)
=> SELECT * FROM accounts WHERE id = 1 FOR SHARE;
Wehavegottwotransactionslockingthesamerow:
=> SELECT * FROM pgrowlocks('accounts') \gx
−[ RECORD 1 ]−−−−−−−−−−−−−−−
locked_row | (0,1)
locker | 2
multi | t
xids | {134991,134993}
modes | {Share,Share}
pids | {30734,30876}
T1
T3
Share
ctid
T2 xmin xmax
(0,1) data
multi
tuple(0,1)
249
Chapter13 Row-LevelLocks
Ifthefirsttransactioncompletesatthispoint,thesecondonewillwakeuptosee
thattherowisstilllockedandwillgetbacktothequeue—butthistimeitwillfind
itselfbehindthethirdtransaction:
=> COMMIT;
=> SELECT * FROM locks_accounts WHERE pid = 30805;
pid | locktype | lockid | mode | granted
−−−−−−−+−−−−−−−−−−−−−−−+−−−−−−−−−−−−−−−+−−−−−−−−−−−−−−−−−−+−−−−−−−−−
30805 | relation | accounts | RowExclusiveLock | t
30805 | transactionid | 134992 | ExclusiveLock | t
30805 | transactionid | 134993 | ShareLock | f
30805 | tuple | accounts(0,1) | ExclusiveLock | t
(4 rows)
Andonlywhenthethirdtransactioncompleteswillthesecondonebeabletoper-
formanupdate(unlessothersharedlocksappearwithinthistimeinterval).
=> COMMIT;
UPDATE 1
=> COMMIT;
Foreignkeychecksareunlikelytocauseanyissues,askeyattributesusuallyremain
unchanged and KeyShare can be used together with No KeyUpdate. But in most
cases,youshouldavoidsharedrow-levellocksinapplications.
13.5 No-Wait Locks
Scommandsusuallywaitfortherequestedresourcestobefreed.Butsometimes
itmakessensetocanceltheoperationifthelockcannotbeacquiredimmediately.
For this purpose, commands like , , and  offer the  clause.
Let’slockarow:
=> BEGIN;
=> UPDATE accounts SET amount = amount + 100.00 WHERE id = 1;
250
13.5 No-WaitLocks
Thecommandwiththeclauseimmediatelycompleteswithanerrorifthe
requestedresourceislocked:
=> SELECT * FROM accounts
FOR UPDATE NOWAIT;
ERROR: could not obtain lock on row in relation "accounts"
Suchanerrorcanbecapturedandhandledbytheapplicationcode.
Theandcommandsdonothavetheclause.Instead,youcan
trytolocktherowusingthecommandandthenupdate
ordeleteitiftheattemptissuccessful.
Insomerarecases,itmaybeconvenienttoskipthealreadylockedrowsandstart
processingtheavailableonesrightaway.Thisisexactlywhatdoeswhen
runwiththeclause:
=> SELECT * FROM accounts
ORDER BY id
FOR UPDATE SKIP LOCKED
LIMIT 1;
id | client | amount
−−−−+−−−−−−−−+−−−−−−−−
2 | bob | 200.00
(1 row)
Inthisexample,thefirst(alreadylocked)rowwasskipped,andthequerylocked
andreturnedthesecondrow.
Thisapproachenablesustoprocessrowsinbatchesorsetupparallelprocessingof p.
eventqueues. However,avoidinventingotherusecasesforthiscommand—most
taskscanbeaddressedusingmuchsimplermethods.
Lastbutnotleast,youcanavoidlongwaitsbysettingatimeout:
=> SET lock_timeout = '1s';
=> ALTER TABLE accounts DROP COLUMN amount;
ERROR: canceling statement due to lock timeout
Thecommandcompleteswithanerrorbecauseithasfailedtoacquirealockwithin
one second. Atimeout can be set not only at the session level,but also at lower
levels,forexample,foraparticulartransaction.
251
Chapter13 Row-LevelLocks
This method prevents long waits during table processing when the command re-
quiringanexclusivelockisexecutedunderload.Ifanerroroccurs,thiscommand
canberetriedafterawhile.
Whilestatement_timeout limitsthetotaltimeofoperatorexecution,thelock_timeout pa-
rameterdefinesthemaximumtimethatcanbespentwaitingonalock.
=> ROLLBACK;
13.6 Deadlocks
A transaction may sometimes require a resource that is currently being used by
another transaction, which, in its turn, may be waiting on a resource locked by
thethirdtransaction,andsoon.Suchtransactionsgetqueuedusingheavyweight
locks.
Butoccasionallyatransactionalreadyinthequeuemayneedyetanotherresource,
so it has to join the same queue again and wait for this resource to be released.
Adeadlock1 occurs: thequeuenowhasacirculardependencythatcannotresolve
onitsown.
Forbettervisualization,let’sdrawawait-forgraph.Itsnodesrepresentactivepro-
cesses,whiletheedgesshownasarrowspointfromtheprocesseswaitingonlocks
tothe processesholding these locks. If the graph has a cycle,that is,anode can
reachitselffollowingthearrows,itmeansthatadeadlockhasoccurred.
Theillustrationshereshowtransactionsratherthanprocesses.Thissubstitutionisusually
acceptable because one transaction is executed by one process,and locks can only be
acquiredwithinatransaction.Butingeneral,itismorecorrecttotalkaboutprocesses,as
somelocksmaynotbereleasedrightawaywhenthetransactioniscomplete.
Ifadeadlockhasoccurred,andnoneofitsparticipantshassetatimeout,transac-
tionswillbewaitingoneachotherforever.That’swhythelockmanager2performs
automaticdeadlockdetection.
However,thischeckrequiressomeeffort,whichshouldnotbewastedeachtimea
lockisrequested(afterall,deadlocksdonothappentoooften). Soiftheprocess
1 postgresql.org/docs/14/explicit-locking#LOCKING-DEADLOCKS.html
2 backend/storage/lmgr/README
252
13.6 Deadlocks
T3
T2
resource3
T1
resource2
resource1
makesanunsuccessfulattempttoacquirealockandfallsasleepafterjoiningthe
queue,Postgreautomaticallysetsatimeoutasdefinedbythedeadlock_timeout 1s
parameter.1 If the resource becomes available earlier—great,then the extra cost
ofthecheckwillbeavoided. Butifthewaitcontinuesafterthedeadlock_timeout
unitsoftime,thewaitingprocesswakesupandinitiatesthecheck.2
Thischeckeffectivelyconsistsinbuildingawait-forgraphandsearchingitforcy-
cles.3 To“freeze”thecurrentstateofthegraph,Postgrestopsanyprocessing
ofheavyweightlocksforthewholedurationofthecheck.
Ifnodeadlocksaredetected,theprocessfallsasleepagain;soonerorlateritsturn
willcome.
Ifadeadlockisdetected,oneofthetransactionswillbeforcedtoterminate,thus
releasingitslocksandenablingothertransactionstocontinuetheirexecution.In
most cases,it is the transaction initiating the check that gets interrupted,but if
thecycleincludesanautovacuumprocessthatisnotcurrentlyfreezingtuplesto
preventwraparound,theserverterminatesautovacuumashavinglowerpriority.
Deadlocksusuallyindicatebadapplicationdesign.Todiscoversuchsituations,you
have two things to watch out for: the server log will contain the corresponding
messages,andthedeadlocksvalueinthepg_stat_databasetablewillbeincreasing.
1 backend/storage/lmgr/proc.c,ProcSleepfunction
2 backend/storage/lmgr/proc.c,CheckDeadLockfunction
3 backend/storage/lmgr/deadlock.c
253
Chapter13 Row-LevelLocks
Deadlocks byRowUpdates
Althoughdeadlocksareultimatelycausedbyheavyweightlocks,itismostlyrow-
levellocksacquiredindifferentorderthatleadtothem.
Supposeatransactionisgoingtotransfer$betweentwoaccounts.Itstartsby
drawingthissumfromthefirstaccount:
=> BEGIN;
=> UPDATE accounts SET amount = amount - 100.00 WHERE id = 1;
UPDATE 1
At the same time, another transaction is going to transfer $ from the second
accounttothefirstone.Itbeginsbydrawingthissumfromthesecondaccount:
=> BEGIN;
=> UPDATE accounts SET amount = amount - 10.00 WHERE id = 2;
UPDATE 1
Nowthefirsttransactionattemptstoincreasetheamountinthesecondaccount
butseesthatthecorrespondingrowislocked:
=> UPDATE accounts SET amount = amount + 100.00 WHERE id = 2;
Thenthesecondtransactiontriestoupdatethefirstaccountbutalsogetslocked:
=> UPDATE accounts SET amount = amount + 10.00 WHERE id = 1;
This circular wait will never resolve on its own. Unable to obtain the resource
withinonesecond,thefirsttransactioninitiatesadeadlockcheckandgetsaborted
bytheserver:
ERROR: deadlock detected
DETAIL: Process 30434 waits for ShareLock on transaction 134999;
blocked by process 30734.
Process 30734 waits for ShareLock on transaction 134998; blocked by
process 30434.
HINT: See server log for query details.
CONTEXT: while updating tuple (0,2) in relation "accounts"
Nowthesecondtransactioncancontinue.Itwakesupandperformsanupdate:
254
13.6 Deadlocks
UPDATE 1
Let’scompletethetransactions.
=> ROLLBACK;
=> ROLLBACK;
Therightwaytoperformsuchoperationsistolockresourcesinthesameorder.For
example,inthisparticularcasetheaccountscouldhavebeenlockedinascending
orderbasedontheirnumbers.
Deadlocks BetweenTwo UPDATE Statements
Insomecasesdeadlocksseemimpossible,andyettheydooccur.
Weusuallyassumethatcommandsareatomic,butisitreallyso? Let’stakea
closerlookat: thiscommandlocksrowsastheyarebeingupdatedrather
thanallatonce,anditdoesnothappensimultaneously.Soifonecommand
modifiesseveralrowsinoneorderwhiletheotherisdoingthesameinadifferent
order,adeadlockcanoccur.
Let’sreproducethisscenario. First,wearegoingtobuildanindexontheamount
column,indescendingorder:
=> CREATE INDEX ON accounts(amount DESC);
Tobeabletoobservetheprocess,wecanwriteafunctionthatslowsthingsdown:
=> CREATE FUNCTION inc_slow(n numeric)
RETURNS numeric
AS $$
SELECT pg_sleep(1);
SELECT n + 100.00;
$$ LANGUAGE sql;
The first  command is going to update all the tuples. The execution plan
reliesonasequentialscanofthewholetable.
255
Chapter13 Row-LevelLocks
=> EXPLAIN (costs off)
UPDATE accounts SET amount = inc_slow(amount);
QUERY PLAN
−−−−−−−−−−−−−−−−−−−−−−−−−−−
Update on accounts
−> Seq Scan on accounts
(2 rows)
Tomakesurethattheheappagestorestherowsinascendingorderbasedonthe
amountcolumn,wehavetotruncatethetableandinserttherowsanew:
=> TRUNCATE accounts;
=> INSERT INTO accounts(id, client, amount)
VALUES
(1,'alice',100.00),
(2,'bob',200.00),
(3,'charlie',300.00);
=> ANALYZE accounts;
=> SELECT ctid, * FROM accounts;
ctid | id | client | amount
−−−−−−−+−−−−+−−−−−−−−−+−−−−−−−−
(0,1) | 1 | alice | 100.00
(0,2) | 2 | bob | 200.00
(0,3) | 3 | charlie | 300.00
(3 rows)
Thesequentialscanwillupdatetherowsinthesameorder(itisnotalwaystrue
p. forlargetablesthough).
Let’sstarttheupdate: