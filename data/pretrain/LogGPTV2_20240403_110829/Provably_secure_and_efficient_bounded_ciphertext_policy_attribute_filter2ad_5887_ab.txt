simplicity, if z is a leaf node, we let att(z) = index(z).
Satisfying an Access Tree. Let T be an access tree
with root r. Tx is a subtree rooted at a node x in T . We
say that, if an attribute set γ satisﬁes the access tree Tx, we
denote Tx(γ) = 1. If x is a non-leaf node, evaluate Tz(γ) for
all children z of node x. Tx(γ) returns 1 if and only if at least
kx children of x return 1. If x is a leaf node, then Tx(γ) = 1
iﬀ att(x) ∈ γ. If an access tree rooted at x is a γ-satisﬁed
tree, then we call the node x as a γ-satisﬁed node. Suppose
T is a γ-satisﬁed tree, we call a subtree of T with root r as
a γ-satisﬁed non-redundant tree, if the cardinality of each
non-leaf node x is equal to x’s threshold value in T and
every node is a satisﬁed node. Let ˆT denote the γ-satisﬁed
non-redundant tree with minimum non-leaf nodes.3
Universal Access Tree. Here, we describe a universal
access tree (Figure 4) with two input parameters d and c.
First, we deﬁne a complete c-ary tree T (cid:48) of height d − 1,
where each node has a threshold value c. Next, c − 1 new
leaf nodes named ”dummy nodes” representing c− 1 dummy
attributes and n new leaf nodes named ”real nodes” repre-
senting n real attributes are attached to each node in T (cid:48).
The resultant tree Tu is called a (d, c)-universal access tree.
Let each node x except root has an index related with its
parent node and att(x) = index(x) if x is a leaf node of a
universal access tree. Here, for all the child nodes of one
non-leaf node x in T , real nodes and dummy nodes will
take indexes from {1,··· , n} and {n + 1,··· , n + c − 1} re-
spectively, and other non-leaf nodes will be indexed from
{n + c,··· , n + 2c − 1}.
Figure 4: Modiﬁed Universal Tree
Bounded Access Tree. We called that T a (d, c)-bounded
access tree if its height d(cid:48) ≤ d, each non-leaf node x in T
has at most c non-leaf child nodes.
Normal Form. Consider a (d, c)-bounded access tree
Tn. We say that Tn exhibits the (d, c)-normal form if (a)
its height d(cid:48) = d, and (b) all the leaf nodes are at depth
d. Any (d, c)-bounded access tree T can be converted to its
normal form without modifying its satisfying logic. (This is
a special technique used in GJPS.)
Map between Access Trees. The map, constructed
from a (d, c)-bounded access tree T to (d, c)-universal ac-
cess tree Tu, is deﬁned in the following way in a top-down
manner. First, the root of T is mapped to the root of
Tu. Now, suppose that x(cid:48) in T is mapped to x in Tu. Let
1,··· , z(cid:48)
cx(cid:48) be the child nodes of x(cid:48). For i ∈ {1,··· , cx(cid:48)},
z(cid:48)
i) ∈ N , set x’s child node z such
if z(cid:48)
that z = map(z(cid:48)
i is a
non-leaf node, set x’s child node z such that z = map(z(cid:48)
i)
i) + n + c − 1. This procedure is
where index(z) = index(z(cid:48)
performed recursively, until each node in T is mapped to a
corresponding node in Tu. Notice that in a (d, c)-bounded
access tree, each non-leaf node x in T have at most c non-leaf
child nodes, this recursive procedure can be terminable.
i) where index(z) = index(z(cid:48)
i);
i is a leaf node att(z(cid:48)
if z(cid:48)
3. DEFINITIONS
In this section, we introduce the deﬁnitions and security
models for bounded ciphertext policy attribute based en-
cryption scheme.
3.1 BCPABE model
3The decryption cost depends on the non-leaf nodes in the
γ-satisﬁed non-redundant tree the decryptor chooses.
Definition 2. A BCPABE scheme includes a tuple of
probabilistic polynomial-time algorithms as follows.
ABCDAB......dumdumdumdumdumdumRABCDdumdumdumdum.....................dc-1c-1c-1c-1c-1AD...AD......346• Setup(d, c) → (PP, MK): On input an implicit se-
curity parameter 1k and two system parameters (d, c),
the setup algorithm Setup outputs a public parameter
PP and a master key MK.
• KGen(γ, MK) → (D): On input an attribute set γ
and a master key MK, the key generation algorithm
KGen outputs a secret key D.
• Enc(PP,T , m) → (E): On input the public parameter
PP, a (d, c)-bounded access tree T and a message m,
the encryption algorithm Enc outputs a ciphertext E.
• Dec(D, E) → (m): On input a secret key D and a
ciphertext E, if the attribute set in D satisﬁes the ac-
cess tree in E, the decryption algorithm Dec decrypts
the ciphertext E and returns a message m; otherwise,
it outputs ”⊥”.
3.2 Security Model for BCPABE
Selective-Tree Model for BCPABE This model was ﬁrst
introduced by GJPS. The analogous selective-ID model lies
in [2, 4, 5, 6]. We say that a BCPABE scheme is secure in
the selective-tree CPA model if no probabilistic polynomial-
time adversary A has a non-negligible advantage in winning
the following game.
Init A chooses an access tree T ∗ that he wishes to be chal-
lenged upon. The challenger runs Setup algorithm and
gives A the resulting public parameter PP. It keeps the cor-
responding master key MK to itself.
Phase 1 A issues queries for secret keys related with many
attribute sets γj, where γj does not satisfy the access tree
T ∗ for all j.
Challenge Once A decides that Phase 1 is over, it outputs
two equal length messages m0, m1 from the message space.
The challenger chooses µ ∈ {0, 1} at random and encrypts
mµ with T ∗. Then, the ciphertext C∗ is given to A.
Phase 2 The same as Phase 1.
Guess A outputs a guess µ(cid:48) ∈ {0, 1} and wins the game if
µ(cid:48) = µ.
2|.
We deﬁne A’s advantage in this game as |Pr[µ(cid:48) = µ] − 1
The selective-tree CPA model can be extended to handle
chosen-ciphertext attacks by allowing for decryption queries
in Phase 1 and Phase 2, denoted as selective-tree CCA model.
4. OUR MAIN CONSTRUCTION
4.1 Basic BCPABE Scheme BCP1
We now proceed the formal description of our ﬁrst scheme
BCP1.
Setup(d, c) This algorithm takes two parameters (d, c) as
its input. Deﬁne a real attribute set U = {1,··· , n} and a
dummy attribute set U∗ = {n + 1,··· , n + c − 1}. Next, we
deﬁne a (d, c)-universal access tree Tu as explained in Section
2.4. (d, c,U,U∗,Tu) are all used in the following algorithms.
Now, the algorithm generates the public parameter for
this scheme. For each real attribute j ∈ U , randomly choose
a set of |ΣTu| numbers {tj,x}x∈ΣTu
from Zp. Further, for
each dummy attribute j ∈ U∗, randomly choose a set of
|ΣTu| numbers {t∗
j,x}x∈ΣTu
from Zp. Finally, randomly choose
y ∈ Zp. The public parameter PP = (cid:104)Y = e(g, g)y,{Tj,x =
j,x = gt∗
(cid:105). The master key
,{T ∗
j,x}j∈U∗,x∈ΣTu
gtj,x}j∈U,x∈ΣTu
,{t∗
j,x}j∈U∗,x∈ΣTu
MK = (cid:104)y,{tj,x}j∈U,x∈ΣTu
(cid:105).
qx(j)
tj,x }j∈γ,x∈ΣTu
KGen(γ, MK) This algorithm takes an attribute set γ ⊆
U and the master key MK as its input, then it outputs a
secret key D which can be used for decrypting a ciphertext
encrypted under a (d, c)-bounded access tree T iﬀ T (γ) = 1.
Now, the algorithm generates the secret key. For each
user, choose a random polynomial qx of degree c− 1 for each
non-leaf node x in the (d, c)-universal access tree. These
polynomials are chosen in a top-down manner, satisfying
qx(0) = qp(x)(index(x)) and qr(0) = y. Once the polynomi-
als have been ﬁxed, it outputs the following secret key D =
(cid:104)γ,{Dj,x = g
(cid:105).
Enc(m, PP,T ) This algorithm takes a message m, the pub-
lic parameter PP and a (d, c)-bounded access tree T as its
input.
Now, to encrypt the message m with the access tree T , the
algorithm ﬁrst sets a map from T to Tu using the method
mentioned in Section 2.4. Then, for each non-leaf node
x ∈ T , it chooses an arbitrary (c − kx)-sized set ωx
4 of
dummy child nodes of x(cid:48) in Tu, x(cid:48) = map(x). After that,
let f (j, x) = 1 if the node x in T has a child node associ-
ated with real attribute j; f (j, x) = 0 otherwise. Then, it
chooses a random value s ∈ Zp and outputs the ciphertext
E = (cid:104)T , E(cid:48) = m · Y s,{Ej,x = T s
j,map(x)}j∈U ,x∈ΣT ,f (j,x)=1,
{E∗
qx(j)
t∗
j,x }j∈U∗,x∈ΣTu
j,map(x)}j∈ωx,x∈ΣT (cid:105).
j,x = T ∗s
,{D∗
j,x = g
Dec(E, D) This algorithm takes a ciphertext E and a secret
key D as its input. If the attribute set γ associated with
D satisﬁes the access tree T in E, the algorithm continues
doing follows; otherwise, output ⊥.
A recursive algorithm DecryptNode(E, D, x) takes the ci-
phertext E, the secret key D and a satisﬁed non-leaf node x
in T as its input and outputs a group element of GT or ⊥.
For each x’s child node z,
(cid:189)
• z is a real node, let j = att(z). Then, we have:
Fx,j = DecryptNode(E, D, x)
=
e(Dj,map(x), Ej,x) = e(g, g)sqmap(x)(j),
⊥,
if j ∈ γ;
otherwise.
• z is a dummy node. j = att(z) ∈ wx. Then we have:
Fx,j = DecryptNode(E, D, x)
= e(D∗
j,map(x), E∗
j,x) = e(g, g)sqmap(x)(j),
From the above procedure, for each non-leaf node x in T ,
if Tx(γ) = 1, we have at least kx + c− kx = c diﬀerent points
Fx,j to compute e(g, g)sqmap(x)(0) using Lagrange interpola-
tion. By recursively executing such procedure in a down-
to-top manner, and ﬁnally, it obtains E(cid:48)(cid:48) = e(g, g)sqr (0) =
e(g, g)sy, where r is the root of T . The decryption algorithm
outputs m = E(cid:48)/E(cid:48)(cid:48).
4.2 Security Proof of BCP1
Theorem 1. If the DBDH assumption holds in (G, GT ),
then scheme BCP1 is selective-tree CPA secure in the stan-
dard model.
Proof. Suppose there exists a polynomial-time adver-
sary A who can attack BCP1 in the selective-tree CPA model
with non-negligible advantage ε. We construct a simulator
S who can distinguish the DBDH tuple from a random tuple
with non-negligible advantage ε
2 .
4w.l.o.g. wx = {n + 1,··· , n + c − kx}.
347∗
j,x =
T
gr∗
j,x ,
Br∗
j,x , otherwise.
if j ∈ wx(cid:48) , x = map(x(cid:48)), x(cid:48) ∈ ΣT ∗ ;
For j ∈ γ,
• c−kx(cid:48) points as qx(j) for the dummy nodes of x, where
j ∈ wx(cid:48) ;
• at most kx(cid:48)−1 points as qx(index(z(cid:48))) if z(cid:48) is a satisﬁed
leaf child node of x(cid:48) or qx(index(z(cid:48)) + n + c − 1) where
z(cid:48) is a satisﬁed non-leaf child node of x(cid:48).
It executes the following steps in Figure 5.
PolySat(Tx, γ, λx) for a satisﬁed node x ∈ ΣT is deﬁned as
follows:
This procedure generates a polynomial qx for a satisﬁed
node x. We have a satisﬁed node x(cid:48) such that map(x(cid:48)) = x.
λx is an integer from Zp. It sets qx(0) = λx, and chooses
c− 1 other points at random to completely ﬁx qx. Thus, for
each j ∈ U ∪ U∗ ∪ {n + c,··· , n + 2c − 1}, we could obtain
qx(j).
It executes the following steps in Figure 6.
 g
 g
g
g
Dj,x =
For j ∈ U∗,
D∗
j,x =
bqx(j)
rj,x = B
bqx(j)
brj,x = g
qx(j)
rj,x ,
qx(j)
rj,x ,
if f (j, x(cid:48)) = 1;
otherwise.
bqx(j)
r∗
j,x = B
bqx(j)
br∗
j,x = g
qx(j)
r∗
j,x ,
qx(j)
r∗
j,x ,
if j ∈ ωx(cid:48) ;
otherwise.
Then, for each non-leaf child node z of x in Tu,
If z is a non-mapped node,
If z is a satisﬁed node,
PolyNotCare(Tz, γ, gqx(index(z)));
PolySat(Tz, γ, qx(index(z)));
PolyUnsat(Tz, γ, gqx(index(z))).
If z is a unsatisﬁed node,
Figure 6: PolySat(Tx, γ, λx)
PolyNotCare(Tx, γ, gλx ) for a non-mapped node x ∈ ΣT is
deﬁned as follows:
This procedure generates a polynomial qx for a non-mapped
It implicitly sets qx(0) = λx, and chooses c − 1
node x.
other points at random to implicitly ﬁx qx. Thus, for j ∈
U ∪ U∗ ∪ {n + c,··· , n + 2c − 1}, we could obtain gqx(j). It
outputs the following secret keys:
1
{Dj,x = g
bqx(j)
brj,x = (gqx(j))
rj,x }j∈γ,{D∗
j,x = g
bqx(j)
br∗
j,x =
1
r∗
j,x }j∈U∗
Then, for each non-leaf child node z of x in Tu, it calls
(gqx(j))
PolyNotCare(Tz, γ, gqx(index(z))).
To give a secret key for an attribute set γ, S ﬁrst runs
PolyUnsat(Tr = T , γ, A). Notice that we implicitly set
y = ab by Y = e(A, B) = e(g, g)y. The secret key corre-
sponding to each non-leaf node is recursively given by the
above three procedures. Finally, it outputs
D = (cid:104)γ,{Dj,x}j∈γ,x∈ΣTu
,{D
j,x}j∈U∗,x∈ΣTu
∗
(cid:105)
Therefore, S can answer each secret key query with an at-
tribute set γ, where T ∗(γ) = 0. The distribution of these
secret keys are identical to those in the real environment.
We ﬁrst let the challenger set the groups G and GT with
an eﬃcient bilinear map e and a generator g. The challenger
ﬂips a fair binary coin ν, outside of S’s view.
If ν = 1,
the challenger sets (g, A, B, C, Z) ∈ Dbdh; otherwise it sets
(g, A, B, C, Z) ∈ Drand.
Init The simulator S runs A. A chooses a challenge (d, c)-
bounded access tree T ∗ it wishes to be challenged upon.
The simulator S sets Y = e(A, B) = e(g, g)ab. Then, S
generates a (d, c)-universal access tree Tu and a map from T ∗
to Tu. Randomly choose {rj,x}j∈U,x∈ΣTu
j,x}j∈U∗,x∈ΣTu
from Zp.
For j ∈ U , x ∈ ΣTu ,
,{r∗
if x = map(x(cid:48)), x(cid:48) ∈ ΣT ∗ , f (j, x(cid:48)) = 1;