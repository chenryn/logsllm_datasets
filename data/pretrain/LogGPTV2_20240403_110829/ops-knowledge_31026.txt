User: 请写一个脚本，用于自动化扩容和缩容Kubernetes集群中的节点，同时保证服务的高可用性。
Assistant: #!/bin/bash

# 扩容节点
scale_out() {

    # 选择扩容节点所在的租户和可用区
    tenant="example-tenant"
    zone="us-east-1b"

    # 为新节点生成唯一的instance id
    instance_id=$(uuidgen)

    # 创建新的云服务器实例
    kubectl create -f - <<EOF
    apiVersion: v1
    kind: Pod
    metadata:
      name: $instance_id
    spec:
      containers:
      - name: node
        image: my-nodejs-app
        resources:
          limits:
            cpu: 500m
            memory: 512Mi
        command: ["/bin/bash", "-c", "node index.js"]
        volumeMounts:
        - name: data
          mountPath: /data
      volumes:
      - name: data
        persistentVolumeClaim:
          claimName: data
    EOF

    # 将新节点添加到集群中作为worker节点
    kubectl label node $instance_id node-role.kubernetes.io/worker=worker

    # 向新节点部署服务
    # ...

    # 启动新节点上的服务
    # ...

    # 等待新节点处于运行状态，直到节点准备好服务
    ready=$(kubectl get pod $instance_id -o jsonpath='{.status.containerStatuses[0].ready}')
    while [[ $ready != "true" ]]; do
        sleep 5
        ready=$(kubectl get pod $instance_id -o jsonpath='{.status.containerStatuses[0].ready}')
    done

    # 让新节点加入到负载均衡器中，保证新节点可以接收流量
    # ...

}

# 缩容节点
scale_in() {

    # 选择缩容节点所在的租户和可用区
    tenant="example-tenant"
    zone="us-east-1b"

    # 获取当前集群中的所有worker节点
    nodes=$(kubectl get nodes -l node-role.kubernetes.io/worker=worker -o jsonpath='{.items[*].metadata.name}')

    # 随机选择一个worker节点进行缩容
    # 这里只是一个示例，实际生产环境可能需要更多的逻辑来选择缩容节点
    node_to_remove=$(echo $nodes | awk '{print $1}')

    # 将缩容节点从负载均衡器中移除，防止新的流量发送到该节点
    # ...

    # 从集群中移除节点
    kubectl drain $node_to_remove --delete-local-data --force --ignore-daemonsets

    # 删除节点
    kubectl delete node $node_to_remove

    # 等待服务数据迁移完成
    # ...

}

# 主函数
main() {

    # 检查当前节点数是否需要扩容或缩容
    current_nodes=$(kubectl get nodes -l node-role.kubernetes.io/worker=worker -o jsonpath='{.items[*].metadata.name}')
    num_nodes=$(echo $current_nodes | wc -w)
    desired_num_nodes=3
    
    if [[ $num_nodes -lt $desired_num_nodes ]]; then
        # 集群需要扩容
        scale_out
    elif [[ $num_nodes -gt $desired_num_nodes ]]; then
        # 集群需要缩容
        scale_in
    else
        # 集群节点数符合预期，无需操作
        echo "No scaling necessary"
    fi
}

main