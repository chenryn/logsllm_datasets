# 【技术分享】教练！那根本不是IO！——从printf源码看libc的IO
|
##### 译文声明
本文是翻译文章，文章来源：安全客
译文仅供参考，具体内容表达以及含义原文为准。
作者：[anciety](http://bobao.360.cn/member/contribute?uid=2806750221)
预估稿费：500RMB
投稿方式：发送邮件至linwei#360.cn，或登陆网页版在线投稿
**前(fei)言(hua)**
****
我们似乎天天都在使用IO，最典型的使用就是printf，scanf，以前我们只知道printf会有格式化字符串漏洞，可是我们并没有怎么深究过IO具体的是怎么回事，以及具体有什么可以攻击的点。
2016 HITCON有一道 house of orange，是一道堪称经典的题目，第一次（或者似乎是第一次？）让我们把攻击的思维往IO
FILE里去考虑，于是我们开始思考libc的虚表的可攻击性，不幸的是，libc的开发人员也很快意识到了这个虚表的问题，在2.24的libc版本中对vtables进行了加固：
    2.24 libc更新日志中的一个内容：
      [20191] stdio: libio: vtables hardening
于是这个方法慢慢变得困难了起来，还好我们的思路不仅仅是这样……
本文主要从经典的虚表原理开始说起，中间补充一下scanf和printf的原理，最后提到一种较新的（或者是我认为较新的？）思路。
**从虚表开始说起**
****
首先我们来看下经典的（虽然似乎是2016之后才流行起来的） **_IO_FILE_plus** 的虚表攻击方式。
**1. _IO_FILE 与 _IO_FILE_plus**
源码永远是回答心中疑问的好老师，首先来看看关于这两个结构体的源码：
    // libio/libio.h _IO_FILE 结构体
    struct _IO_FILE {
      int _flags;       /* High-order word is _IO_MAGIC; rest is flags. */
    #define _IO_file_flags _flags
      /* The following pointers correspond to the C++ streambuf protocol. */
      /* Note:  Tk uses the _IO_read_ptr and _IO_read_end fields directly. */
      char* _IO_read_ptr;   /* Current read pointer */
      char* _IO_read_end;   /* End of get area. */
      char* _IO_read_base;  /* Start of putback+get area. */
      char* _IO_write_base; /* Start of put area. */
      char* _IO_write_ptr;  /* Current put pointer. */
      char* _IO_write_end;  /* End of put area. */
      char* _IO_buf_base;   /* Start of reserve area. */
      char* _IO_buf_end;    /* End of reserve area. */
      /* The following fields are used to support backing up and undo. */
      char *_IO_save_base; /* Pointer to start of non-current get area. */
      char *_IO_backup_base;  /* Pointer to first valid character of backup area */
      char *_IO_save_end; /* Pointer to end of non-current get area. */
      struct _IO_marker *_markers;
      struct _IO_FILE *_chain;
      int _fileno;
    #if 0
      int _blksize;
    #else
      int _flags2;
    #endif
      _IO_off_t _old_offset; /* This used to be _offset but it's too small.  */
    #define __HAVE_COLUMN /* temporary */
      /* 1+column number of pbase(); 0 is unknown. */
      unsigned short _cur_column;
      signed char _vtable_offset;
      char _shortbuf[1];
      /*  char* _save_gptr;  char* _save_egptr; */
      _IO_lock_t *_lock;
    #ifdef _IO_USE_OLD_IO_FILE
    };
以及_IO_FILE_plus：
    // libio/libioP.h
    #define JUMP_FIELD(TYPE, NAME) TYPE NAME
    #define JUMP0(FUNC, THIS) (_IO_JUMPS_FUNC(THIS)->FUNC) (THIS)
    struct _IO_jump_t // 虚表结构体
    {
        JUMP_FIELD(size_t, __dummy);
        JUMP_FIELD(size_t, __dummy2);
        JUMP_FIELD(_IO_finish_t, __finish);
        JUMP_FIELD(_IO_overflow_t, __overflow);
        JUMP_FIELD(_IO_underflow_t, __underflow);
        JUMP_FIELD(_IO_underflow_t, __uflow);
        JUMP_FIELD(_IO_pbackfail_t, __pbackfail);
        /* showmany */
        JUMP_FIELD(_IO_xsputn_t, __xsputn);
        JUMP_FIELD(_IO_xsgetn_t, __xsgetn);
        JUMP_FIELD(_IO_seekoff_t, __seekoff);
        JUMP_FIELD(_IO_seekpos_t, __seekpos);
        JUMP_FIELD(_IO_setbuf_t, __setbuf);
        JUMP_FIELD(_IO_sync_t, __sync);
        JUMP_FIELD(_IO_doallocate_t, __doallocate);
        JUMP_FIELD(_IO_read_t, __read);
        JUMP_FIELD(_IO_write_t, __write);
        JUMP_FIELD(_IO_seek_t, __seek);
        JUMP_FIELD(_IO_close_t, __close);
        JUMP_FIELD(_IO_stat_t, __stat);
        JUMP_FIELD(_IO_showmanyc_t, __showmanyc);
        JUMP_FIELD(_IO_imbue_t, __imbue);
    #if 0
        get_column;
        set_column;
    #endif
    };
    struct _IO_FILE_plus
    {
      _IO_FILE file; // 就是一个libio.h中的_IO_FILE 结构体
      const struct _IO_jump_t *vtable; // 多出一个vtable
    };
我们可以看到 **_IO_FILE_plus** 的组成，其实就是一个 **_IO_FILE**
结构体本身再加上一个跳表，从plus这个名称我们也能看出来，其实这个地方是为了兼容C++，对于C++的对象来说，除了数据以外还有方法，方法的实现是会用到跳表的，为了能够兼容，除了
**_IO_FILE** 本身以外，只能再添加一个跳表，然后使用新的结构体来进行兼容。
事实上在libc内部对于FILE结构体就是用 **_IO_FILE_plus**
来进行表示的，但是对于pwn选手来说，只要有函数指针，就有控制执行流的可能，唯一的问题是，用谁的函数指针？
这个其实并不是一个难事，因为每一个文件一定都有3个FILE，也就是以下三个，我想大家已经不能再熟悉他们了：
    // libio/libio.h
    extern struct _IO_FILE_plus _IO_2_1_stdin_;
    extern struct _IO_FILE_plus _IO_2_1_stdout_;
    extern struct _IO_FILE_plus _IO_2_1_stderr_;
是的，就是stdin,
stdout和stderr，好了，那么这种利用的思路应该就比较明确了：只要我们有办法控制stdin，stdout和stderr的虚表指针，我们就能够在使用到这三个结构体的虚表的时候控制执行流。
不过还有一个小问题，到底在什么时候这些函数指针会被用到？那么让我们继续从输入输出开始说起……
**2. 你不熟悉的scanf和printf**
以下内容源码较长，可能引起不适，请适度观看。为了简单，我们就从printf开始看。首先是printf的入口：
    // stdio-common/printf.c
    int
    __printf (const char *format, ...)
    {
      va_list arg;
      int done;
      va_start (arg, format);
      done = vfprintf (stdout, format, arg);
      va_end (arg);
      return done;
    }
直接移交给了 **vfprintf** ，好吧，再来看 **vfprintf** ：
（觉得代码太长的同学可以直接跳到最后看结论）
    // stdio-common/vfprintf.c
    // 这里好像有一些神奇的地方，我所使用的ubuntu-2.23的libc这里调用的是
    // _IO_vfprintf_internal，不过逻辑似乎没有什么区别
    // 分析整个printf太恐怖了，我们就看%s和%d的实现好了
    // 以下是一开始调用所需要关注的部分
    /* The function itself.  */
    int
    vfprintf (FILE *s, const CHAR_T *format, va_list ap)
    {
      [...]
      // 检查参数
      ARGCHECK (s, format);
      [...]
        if (UNBUFFERED_P (s))
        /* Use a helper function which will allocate a local temporary buffer
           for the stream and then call us again.  */
           // 调用了buffered_vfprintf
        return buffered_vfprintf (s, format, ap);
      [...]
    }
    static int
    internal_function
    buffered_vfprintf (_IO_FILE *s, const CHAR_T *format,
               _IO_va_list args)
    {
      [...]
        /* Initialize helper.  */
        // 设置一个helper结构，这个结构看后文
      helper._put_stream = s;
      [...]
      // 设置好了helper，跳回去
        result = vfprintf (hp, format, args);
      [...]
      return result
    }
    // 好了经过helper的设置，我们又跳回来了，
    /* The function itself.  */
    int
    vfprintf (FILE *s, const CHAR_T *format, va_list ap)
    {
      [...]
      // 一个大do-while来处理格式化字符串
        /* Process whole format string.  */
      do
        {
        // 中间的操作非常的繁重
        // 主要是处理了h，hh等等各种东西
        // 不过格式化字符串本身在这里并不是我们关注的重点，所以我们跳过
        [...]
        // 这里我们需要关注了，这里是在处理好格式化字符串本身的各种东西之后
        // 真正对格式化字符串进行处理，进行输出等等
              /* Process current format.  */
          while (1)
        {
        // 这里其实就是直接用了process_arg，看来还得继续跟一下
          process_arg (((struct printf_spec *) NULL));
          process_string_arg (((struct printf_spec *) NULL));
        LABEL (form_unknown):
          if (spec == L_(''))
            {
              /* The format string ended before the specifier is complete.  */
              __set_errno (EINVAL);
              done = -1;
              goto all_done;
            }
          /* If we are in the fast loop force entering the complicated
             one.  */
          goto do_positional;
        }
        [...]
    }
    // process_arg是个大宏，也非常复杂，还是需要无数简化
    // 下面整个是一个宏，所以忽略一些空格和反斜杠的不完整和错误，这样更为方便阅读
    #define process_arg(fspec)                            