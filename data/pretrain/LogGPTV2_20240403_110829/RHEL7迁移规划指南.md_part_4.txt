::: section
::: titlepage
## []{#chap-Red_Hat_Enterprise_Linux-Migration_Planning_Guide-Major_Changes_and_Migration_Considerations.html#sect-Red_Hat_Enterprise_Linux-Migration_Planning_Guide-Installation-Changes_to_firstboot_Implementation}对首次启动实现的更改 {.title}
:::
在 Red Hat Enterprise Linux 7
中，[**[firstboot]{.application}**]{.strong} 被替换为 Initial Setup
工具（ [**[initial-setup]{.application}**]{.strong}），
以便与新安装程序更好地互操作。基本的
[**[firstboot]{.application}**]{.strong} 功能已移到安装程序和
[**[initial-setup]{.application}**]{.strong} 中。
为 [**[firstboot]{.application}**]{.strong} 编写的第三方模块在 Red Hat
Enterprise Linux 7
中可以继续工作。但是，在以后的版本中，[**[firstboot]{.application}**]{.strong}
将会被弃用。因此，第三方模块的维护者应考虑更新其模块以使用安装程序或
Initial Setup 工具。
:::
::: section
::: titlepage
## []{#chap-Red_Hat_Enterprise_Linux-Migration_Planning_Guide-Major_Changes_and_Migration_Considerations.html#sect-Red_Hat_Enterprise_Linux-Migration_Planning_Guide-Installation-Mount_Behavior}更改了引导时的挂载行为 {.title}
:::
在以前的 Red Hat Enterprise Linux 版本中，无论在 `/etc/fstab`{.literal}
中指定的所有分区是否都可以被挂载，系统都会被引导。这可能会出现系统显示为上线并处于健康状态，但引导时没有需要的分区。
为了防止这种情况的出现，在 Red Hat Enterprise Linux 7 中，如果
`/etc/fstab`{.literal}
中定义的一个分区无法在引导时挂载，引导会失败。如果有分区在无法挂载时不应该导致引导失败，可以在
`/etc/fstab`{.literal} 中使用新的 `nofail`{.literal} 参数进行设置。
``` literallayout
/dev/critical   /critical  xfs  defaults     1 2
/dev/optional   /optional  xfs  defaults,nofail  1 2
```
在这个示例中，挂载到 `/optional`{.literal}
的设备如果无法成功挂载，不会导致引导失败。
:::
::: section
::: titlepage
## []{#chap-Red_Hat_Enterprise_Linux-Migration_Planning_Guide-Major_Changes_and_Migration_Considerations.html#sect-Red_Hat_Enterprise_Linux-Migration_Planning_Guide-System_Management-Changes-to-etc-issue-file}对 /etc/issue 文件的更改 {.title}
:::
在以前的 Red Hat Enterprise Linux 版本中, `/etc/issue`{.literal}
文件包含产品名称和机器的发行号。从 Red Hat Enterprise Linux 7
开始,产品名称和发行号已移到 `/etc/os-release`{.literal} 文件中,
`/etc/issue`{.literal} 的第一行现在包含一个
[**[getty]{.application}**]{.strong} 转义代码
`\S`{.literal}。`\S`{.literal}
转义代码在控制台中扩展,显示产品名称和机器的发行号。代码由
`PRETTY_NAME`{.literal} 变量表示,该变量在 `/etc/os-release`{.literal}
文件中定义。
::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
### 重要 {.title}
对 `\S`{.literal}
转义代码的扩展只能从控制台正常工作。在一个不支持的环境中使用扩展会导致只打印\"\\S\"。
:::
有关 `\S`{.literal} 的详情请参考 [**[agetty]{.application}**]{.strong}
man page。
:::
:::
::: section
::: titlepage
# []{#chap-Red_Hat_Enterprise_Linux-Migration_Planning_Guide-Major_Changes_and_Migration_Considerations.html#sect-Red_Hat_Enterprise_Linux-Migration_Planning_Guide-File_System_Layout}文件系统布局 {.title}
:::
Red Hat Enterprise Linux 7 对文件系统的布局进行了两个主要更改。
::: itemizedlist
-   `/bin`{.literal}、`/sbin`{.literal}、`/lib`{.literal} 和
    `/lib64`{.literal} 目录现在位于 `/usr`{.literal} 目录中。
-   `/tmp`{.literal}
    目录现在可以用作临时文件存储系统（`tmpfs`{.literal}）。
-   `/run`{.literal}
    目录现在用作临时文件存储系统(`tmpfs`{.literal})。现在，应用程序可以使用与使用
    `/var/run`{.literal} 目录相同的方法使用 `/run`{.literal}。
:::
::: section
::: titlepage
## []{#chap-Red_Hat_Enterprise_Linux-Migration_Planning_Guide-Major_Changes_and_Migration_Considerations.html#sect-Red_Hat_Enterprise_Linux-Migration_Planning_Guide-File_System_Layout-New_layout_for_root_file_system}root 文件系统的新布局 {.title}
:::
通常，`/bin`{.literal} 和 `/lib`{.literal}
目录中只包括最小的必要的内容，以避免减慢引导过程。有些工具需要位于
root（`/`{.literal}）级才能挂载 `/usr`{.literal}
分区。这会产生一个情况，其他实用程序会将其内容分散到多个目录级别，例如在
`/bin`{.literal} 和 `/usr/bin`{.literal} 中。
Red Hat Enterprise Linux 7 将
`/bin`{.literal}、`/sbin`{.literal}、`/lib`{.literal} 和
`/lib64`{.literal} 目录移动到 `/usr`{.literal} 中。因为 `/usr`{.literal}
文件系统现在可以由 `initramfs`{.literal} 而不是由 root
级别目录中的实用程序挂载，所以不再需要在两个不同的目录级别间分割软件包内容。这允许一个更小的根文件系统,启用能够更有效地共享磁盘空间的系统,以及更容易维护、更灵活且更安全的系统。
要减少这个更改的影响，以前的 `/bin`{.literal} 目录现在是到
`/usr/bin`{.literal}、`/sbin`{.literal}、到 `/usr/sbin`{.literal}
等的符号链接。
::: section
::: titlepage
### []{#chap-Red_Hat_Enterprise_Linux-Migration_Planning_Guide-Major_Changes_and_Migration_Considerations.html#sect-Red_Hat_Enterprise_Linux-Migration_Planning_Guide-New_layout_for_root_file_system-Preparing_your_file_system_for_upgrade}为升级准备文件系统 {.title}
:::
::: {.warning style="margin-left: 0.5in; margin-right: 0.5in;"}
### 警告 {.title}
请注意,如果 `/usr`{.literal}
位于独立分区中,则无法进行原位升级。如果您决定从独立分区中移出
`/usr`{.literal}，则可能会存在您需要自己承担的风险。
:::
如果 `/var`{.literal} 位于独立分区中,则必须手动将 `/var/run`{.literal}
和 `/var/lock`{.literal} 转换为符号链接：
``` literallayout
# mv -f /var/run /var/run.runmove~
# ln -sfn ../run /var/run
# mv -f /var/lock /var/lock.lockmove~
# ln -sfn ../run/lock /var/lock
```
::: {.important style="margin-left: 0.5in; margin-right: 0.5in;"}
### 重要 {.title}
您必须确定您处理所有与分区方案相关的预升级结果。
:::
准备完成后,请参阅 [Red Hat Enterprise Linux 7
安装指南](https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/Installation_Guide/chap-upgrading-your-current-system.html){.link}
来了解有关执行升级过程的详情。
:::
::: section
::: titlepage
### []{#chap-Red_Hat_Enterprise_Linux-Migration_Planning_Guide-Major_Changes_and_Migration_Considerations.html#sect-Red_Hat_Enterprise_Linux-Migration_Planning_Guide-New_layout_for_root_file_system-Verifying_a_successful_upgrade}验证升级是否成功 {.title}
:::
执行升级过程后，务必要验证升级是否按预期工作。
::: orderedlist
1.  检查是否存在以下符号链接：
    ::: itemizedlist
    -   `/bin`{.literal} 是到 `/usr/bin`{.literal} 的符号链接
    -   `/sbin`{.literal} 是到 `/usr/sbin`{.literal} 的符号链接
    -   `/lib`{.literal} 是到 `/usr/lib`{.literal} 的符号链接
    -   `/lib64`{.literal} 是到 `/usr/lib64`{.literal} 的符号链接
    -   `/var/run`{.literal} 是到 `/run`{.literal} 的符号链接
    -   `/var/lock`{.literal} 是到 `/run/lock`{.literal} 的符号链接
        如果列出的目录是符号链接,如预期一样,则需要两个额外的检查。
    :::
2.  检查以下 find 命令的输出结果：
    ``` literallayout
    # find /usr/{lib,lib64,bin,sbin} -name '.usrmove'
    ```
    这个命令显示的文件或目录无法复制到 `/usr`{.literal}，因为在
    `/usr`{.literal}
    中已存在具有相同名称的文件或目录。您需要手动解决这些命名冲突。
3.  检查以下要保留的文件的目录：
    ::: itemizedlist
    -   `/var/run.runmove~`{.literal}
    -   `/var/lock.lockmove~`{.literal}
    :::
:::
如果列出的任何目录不是符号链接，则需要遵循
["从失败的升级中恢复"一节](#chap-Red_Hat_Enterprise_Linux-Migration_Planning_Guide-Major_Changes_and_Migration_Considerations.html#sect-Red_Hat_Enterprise_Linux-Migration_Planning_Guide-New_layout_for_root_file_system-Recovering_from_a_failed_upgrade "从失败的升级中恢复"){.xref}
中介绍的恢复过程。
:::
::: section
::: titlepage
### []{#chap-Red_Hat_Enterprise_Linux-Migration_Planning_Guide-Major_Changes_and_Migration_Considerations.html#sect-Red_Hat_Enterprise_Linux-Migration_Planning_Guide-New_layout_for_root_file_system-Recovering_from_a_failed_upgrade}从失败的升级中恢复 {.title}
:::
升级过程可能会因为多个原因失败。检查以下命令的输出结果以查看出错信息：
``` literallayout
# dmesg
# journalctl -ab --full
```
如果没有错误信息，请检查：
::: itemizedlist
-   `/`{.literal} 为可写
-   `/usr`{.literal} 为可写
-   `/`{.literal} 有足够的空间
-   `/usr`{.literal} 有足够的空间
-   `/var`{.literal} 在 [**[rhelup]{.application}**]{.strong} 工具中挂载
:::
如果需要进一步的帮助,请联络红帽支持团队。
:::
:::
::: section
::: titlepage
## []{#chap-Red_Hat_Enterprise_Linux-Migration_Planning_Guide-Major_Changes_and_Migration_Considerations.html#sect-Red_Hat_Enterprise_Linux-Migration_Planning_Guide-File_System_Layout-Temporary_storage_space}/tmp 目录的更改 {.title}
:::
Red Hat Enterprise Linux 7 提供了使用 `/tmp`{.literal}
作为临时文件系统(`tmpfs`{.literal})的挂载点的功能。
启用后,这个临时存储就会显示为挂载的文件系统,但会将其内容存储在易变的内存中,而不是保存在持久性存储设备中。`/tmp`{.literal}
中的文件都不会存储在硬盘中,除非内存较低,在这种情况下会使用 swap
空间。这意味着 `/tmp`{.literal} 的内容在重启后不会被保留。
要启用此功能，请执行以下命令：
``` literallayout
# systemctl enable tmp.mount
```