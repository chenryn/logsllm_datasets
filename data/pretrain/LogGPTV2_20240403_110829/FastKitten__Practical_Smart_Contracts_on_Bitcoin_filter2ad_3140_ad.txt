tx.Output: Assign ci coins to TEE
After time τ2 
|b|− k then abort
(cid:46) Else, output penalty transaction
s := terminated
return txout(J ,c,setupFail)
abort
(cid:96)i := Pos(b, txi)
if (cid:96)i  |b|− k then
else if Vrfy(pki;in,σ) (cid:54)= 1 then
delete i from J
delete i from J
return txout(J ,c,abort)
s := terminated
return txout([n],d,outC)
if Pos(b, txchal(i, j,outC,σ)) < |b|− δ− k then
protocol invocation. Thus, it is sufﬁcient to verify that these
transactions are part of a valid block—without downloading
entire blocks, which can be done efﬁciently using simpliﬁed
payment veriﬁcation (SPV). However, SPV libraries can only
prove that a transaction is part of a block on the blockchain,
but they cannot prove that a transaction is not part of any
block. As required by the challenge-response case, we added
an alternative veriﬁcation mode that fully downloads every
block that could potentially contain the transaction and checks
whether its present in any of those blocks.
6.3 Participant Communication
To place the deposits and receive them later, as well for send-
ing input, communication between participants (including the
Operator Q) is needed in the off-chain phase. We secure this
communication using TLS sockets provided by Python. This
transparently encrypts participants’ communication, and thus
ensures input integrity and conﬁdentiality of parties’ messages
towards the operator.
6.4 Enclave Setup
In the FASTKITTEN prototype, we leverage Intel SGX as a
TEE. SGX is a TEE included in recent Intel CPUs which
introduces the concept of isolated hardware enclaves that can
be created and managed using new CPU instructions. SGX
enclaves are even shielded from the operating system; only
the CPU is trusted. To support smart contract execution in
these enclaves we provide a run-time environment based on
Graphene, which replaces the Intel SDK in both the enclave
and the host process. This allows Graphene to transparently
provide services from the untrusted OS (and check the in-
tegrity of the results). To protect the enclave application from
the host process, a manifest has to be provided at enclave
initialization. The manifest includes interfaces, services, and
respective integrity checksums, e.g., hashes of ﬁles the en-
clave requires. Accesses to these ﬁles will be checked against
hashes in the manifest to guarantee integrity.
As depicted by Figure 3, the Execution Facility incorporates
a set of functionalities. For key derivation (genKeys) we lever-
age the rdrand instruction to get high-entropy randomness
inside of the enclave. After checking that txQ (Qdep) is in the
blockchain, the derived private key skT is used to generate
the penalty transaction txp using our Crypto library. txp is
distributed to the other participants over a TLS connection.
Other participants can generate their deposit transactions txi