设备 
  皆有 
    故障! 
全⾯面沦陷:噪声攻击与IOT设备的
10+年年战争 
⽬目录 
概述 
FI 的发展和现状 
FI的实际应⽤用 
FI的预防 
问题在哪? 
const char *PIN = "19379148" 
// Compare the PIN with the correct one  
// Return true if different 
bool comparePIN(char *pin) {
    for (int i=0; i<strlen(pin); i++) { 
        if (pin[i]!=PIN[i]) 
            return true; 
    } 
    return false; 
} 
// Authenticate PIN.  
// Return true if incorrect 
bool pinAuthentication() { 
    char pin[80]; 
    char tmp[80]; 
    bool result=false; 
    printf("Please, introduce PIN\r\n"); 
    gets(pin); 
    result = comparePIN(pin); 
    if (result == false) { 
        sprintf(tmp,"PIN correct\r\n"); 
    } else { 
        sprintf(tmp,"PIN %s is  
                     incorrect\r\n",pin); 
    } 
    printf(tmp); 
    return result;
} 
问题在哪? 
const char *PIN = "19379148" 
// Compare the PIN with the correct one  
// Return true if different 
bool comparePIN(char *pin) {
    for (int i=0; i<strlen(pin); i++) { 
        if (pin[i]!=PIN[i]) 
            return true; 
    } 
    return false; 
} 
// Authenticate PIN.  
// Return true if incorrect 
bool pinAuthentication() { 
    char pin[80]; 
    char tmp[80]; 
    bool result=false; 
    printf("Please, introduce PIN\r\n"); 
    gets(pin); 
    result = comparePIN(pin); 
    if (result == false) { 
        sprintf(tmp,"PIN correct\r\n"); 
    } else { 
        sprintf(tmp,"PIN %s is  
                     incorrect\r\n",pin); 
    } 
    printf(tmp); 
    return result;
} 
问题在哪? 
const char *PIN = "19379148" 
// Compare the PIN with the correct one  
// Return true if different 
bool comparePIN(char *pin) {
    for (int i=0; i<strlen(PIN); i++) { 
        if (pin[i]!=PIN[i]) 
            return true; 
    } 
    return false; 
} 
// Authenticate PIN.  
// Return true if incorrect 
bool pinAuthentication() { 
    char pin[80]; 
    char tmp[80]; 
    bool result=false; 
    printf("Please, introduce PIN\r\n"); 
    fgets(pin,sizeof(pin),stdin); 
    result = comparePIN(pin); 
    if (result == false) { 
        sprintf(tmp,"PIN correct\r\n"); 
    } else { 
        sprintf(tmp,"PIN %s is  
                     incorrect\r\n",pin); 
    } 
    printf("%s",tmp); 
    return result;
} 
它现在是否
安全? 
问题在哪? 
const char *PIN = "19379148" 
// Compare the PIN with the correct one  
// Return true if different 
bool comparePIN(char *pin) {
    for (int i=0; i<strlen(PIN); i++) { 
        if (pin[i]!=PIN[i]) 
            return true; 
    } 
    return false; 
} 
// Authenticate PIN.  
// Return true if incorrect 
bool pinAuthentication() { 
    char pin[80]; 
    char tmp[80]; 
    bool result=false; 
    printf("Please, introduce PIN\r\n"); 
    fgets(pin,sizeof(pin),stdin); 
    result = comparePIN(pin); 
    if (result == false) { 
        sprintf(tmp,"PIN correct\r\n"); 
    } else { 
        sprintf(tmp,"PIN %s is  
                     incorrect\r\n",pin); 
    } 
    printf("%s",tmp); 
    return result;
} 
它现在是否
安全? 
我是谁? 
示例 
故障注入攻击 
电压故障 
5.5V 
100 ms 
1.8V 
5.5V 
100 ms 
1.8V 
电压故障 
5.5V 
100 ms 
1.8V 
5.5V 
100 ms 
1.8V 
故障! 
故障! 
FI如何工作？ 
+5V 
CPU 
GND 
SRAM 
CU 
ALU 
CACHE 
… 
… 
FI如何工作? 
CU 
ALU 
CACHE 
FI如何工作? 
CU 
ALU 
CACHE 
FI如何工作? 
CU 
ALU 
CACHE 
FI如何工作? 
CU 
ALU 
CACHE 
FI如何工作? 
CU 
ALU 
CACHE 
故障! 
设备失灵 
位翻转 
CMP R0,R1 
BNE ERROR 
... 
跳过/破坏指令 
故障的影响 
阻碍读/写 
1 
1 
0 
0 
位翻转 
0 
0 
0 
1 
0 
1 
1 → 0 
1 
0 
1 
0 
0 
0 
1 
1 
位翻转 
0 
0 
0 → 1 
跳过/破坏指令 
const char *PIN = "19379148" 
// Compare the PIN with the correct one  
// Return true if different 
bool comparePIN(char *pin) {
    for (int i=0; i<strlen(PIN); i++) { 
        if (pin[i]!=PIN[i]) 
            return true; 
    } 
    return false; 
} 
// Authenticate PIN.  
// Return true if incorrect 
bool pinAuthentication() { 
    char pin[80]; 
    char tmp[80]; 
    bool result=false; 
    printf("Please, introduce PIN\r\n"); 
    fgets(pin,sizeof(pin),stdin); 
    result = comparePIN(pin); 
    if (result == false) { 
        sprintf(tmp,"PIN correct\r\n"); 
    } else { 
        sprintf(tmp,"PIN %s is  
                     incorrect\r\n",pin); 
    } 
    printf("%s",tmp); 
    return result;
} 
跳过/破坏指令 
 result = comparePIN(pin); 
ldr  r0, [sp, #pin] 
bl
 comparePIN 
str  r0, [sp, #result] 
1 
1 
1 
1 
0 
0 0 0 0 0 0 1 1 0 1 0 
地址 
操作码 
 result = comparePIN(pin); 
 result = pin; 
ldr  r0, [sp, #pin] 
bl
 comparePIN 
str  r0, [sp, #result] 
ldr  r0, [sp, #pin] 
strb r2, [r3, #0]  
str  r0, [sp, #result] 
1 
0 
跳过/破坏指令 
1 
1 
1 
0 
0 0 0 0 0 0 1 1 0 1 0 
地址 
操作码 
跳过/破坏指令 
 result = comparePIN(pin); 
ldr  r0, [sp, #pin] 
bl
 comparePIN 
str  r0, [sp, #result] 
1 
0 
0 
1 
0 
0 0 0 0 0 0 1 0 0 0 1 
地址 
操作码 
 result = comparePIN(pin); 
 comparePIN(pin); 
ldr  r0, [sp, #pin] 
bl
 comparePIN 
str  r0, [sp, #result] 
ldr  r0, [sp, #pin] 
bl
 comparePIN 
asrs r1, r2, #32  
1 
0 
跳过/破坏指令 
0 
0 
1 
0 
0 0 0 0 0 0 1 0 0 0 1 
地址 
操作码 
模块失灵 
位翻转 
CMP R0,R1 
BNE ERROR 
... 
跳过/破坏指令 
故障的影响 
破坏芯片 
阻碍读/写 
FI的发展和现状 
FI 正在成为流行的测试技术! 
但它已经存在很多年了... 
年龄测试! 
这两者之间有什么关系? 
不要在家做这个! 
FI的实际应用 
故障注入规则 #1 
故障注入规则 #2 
10+ 年存在的故障 
绕过身份认证 
   绕过安全启动 
      升级权限 
         复原加密密钥 
 修改安全配置. 
绕过身份认证 
绕过身份认证 
const char *PIN = "19379148" 
// Compare the PIN with the correct one  
// Return true if different 
bool comparePIN(char *pin) {
    for (int i=0; i<strlen(pin); i++) { 
        if (pin[i]!=PIN[i]) 
            return true; 
    } 
    return false; 
} 
// Authenticate PIN.  
// Return true if incorrect 
bool pinAuthentication() { 
    char pin[80]; 
    char tmp[80]; 
    bool result=false; 
    printf("Please, introduce PIN\r\n"); 
    gets(pin); 
    result = comparePIN(pin); 
    if (result == false) { 
        sprintf(tmp,"PIN correct\r\n"); 
    } else { 
        sprintf(tmp,"PIN %s is  
                     incorrect\r\n",pin); 
    } 
    printf(tmp); 
    return result;
} 
绕过身份认证 
统一诊断服务 
统一 
诊断 
服务 
UDS（通用数据系统） 身份认证 
FI 
if (receivedKey != expectedKey)
 not_authenticated(); 
 // Glitch 
else  
 authenticated();   
if (receivedKey != expectedKey)
 not_authenticated();     
else  
 authenticated();   
使用FI绕过UDS认证 
绕过安全启动 