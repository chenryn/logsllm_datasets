                P1 = '%s%s' % (P1, 1)
                P1 = self._double_point(P1)
            else:
                P1 = '%s%s' % (P1, 1)
                P1 = self._add_point(P1, P2)
                P1 = self._convert_jacb_to_nor(P1)
            x = int(P1[0:self.para_len], 16)
            return r == ((e + x) % self.n)
这个验证函数有三个输入：r，s，e，然后这里有一个self._kg ，这个其实就是一个椭圆曲线上的一个乘法，所以P1 = s *
g，g是椭圆曲线上的一个基点，P2 = t * pk ，代码前头有对pk的定义 `self.pk = self._kg(self.sk,
ecc_table['g'])`,所以就是P2 = ((r+s)%n) * sk *
g，接下来的操作不难看出，这里就是两个点相加，这里可以print出来看一下输出，是一个点的坐标的十六进制表示的字符串的拼接，x就是这个点的x坐标。最后是一个判断
r == ((e + x) % self.n)
首先e是固定的 b’Hello, Welcome to
ByteCTF2020!’。我们能操作的就是r和s了，x是一个算出来的坐标，为了让这个判断成立，我们就需要构造我们的输入r，为了构造r得提前算出P1的x坐标，而P1=P1+P2
= s * g + ((r + s)%n) * sk * g。乍一看我们好像陷入了死锁。这里头怎么又出现了r？
换个思路想想，虽然这里的P1是后来根据我们的输入算出来的，但其实我们也可以先固定这个P1。最后再精心构造一下输入，让他正好算出来是这个P1，
所以假设我们已经知道最后的点P1了，就当他是2g好了，这样我们就可以算出x了，有了x，那么r也就固定下来了，那我们就就只需要构造s让它算出这个P1点了。
我们知道，虽然椭圆曲线的加法和乘法不同于普通的四则运算，但是一些运算法则还是适用的，比如分配律、交换律这些，所以式子：P1=P1+P2 = s * g +
((r + s)%n) * sk * g 可以做一些变形，我们已经知道P1=2g了，外加这条曲线的阶是n（我承认我有赌的成分），所以有
其中r确定了，n确定了，只剩sk了，而sk其实也就是相当于这条椭圆曲线的私钥
这是我们得回过头来看最初的sign函数了
    def sign(tsm2):
        data = func.random_hex(len(n)) 
        k1_str = func.random_hex(len(n))
        print(tsm2.send_p1(data, k1_str))
        backdoor = input('backdoor:').strip()
        result = tsm2.output_p1(k1_str, backdoor)
        print(result)
不能再明显了，backdoor都写给你了，显然是要利用这里来整到sk，
data和k1_str都是不可控的随机数，
然后print了send_p1函数的输出，
    def send_p1(self, data, k1_str):
            e = int(data, 16)
            k1 = int(k1_str, 16)
            k1 = k1 % self.n
            R1 = self._kg(k1, self.ecc_table['g']) 
            return '%064x%0128s' % (e, R1)
给的是data和一个R1，R1是k1 * g，是一个曲线上的点，好像没啥用啊，继续看
拿到我们的输入后，程序把k1_str和我们的输入传给了output_p1并给了输出
    def output_p1(self, k1_str, r_s2_s3):
            r = int(r_s2_s3[0:self.para_len], 16)
            s2 = int(r_s2_s3[self.para_len:2 * self.para_len], 16)
            s3 = int(r_s2_s3[2 * self.para_len:], 16)
            k1 = int(k1_str, 16)
            d1 = self.sks
            s = (d1 * k1 * s2 + d1 * s3 - r) % self.n 
            if s == 0 or s == (self.n - r):
                return None
            return '%064x%064x' % (r, s)
给的是r和s，只要s不等于0，s+r不等于n，
其中我们的输入应该是96字节的，分为三段，代表r，s2，s3，
k1是就是k1_str的整型，程序之前生成的，d1是self.sks，这在代码里头是`self.sks =
int(func.random_hex(self.para_len), 16)`也是一个随机数，但是它和sk跟pks有点关系：`self.pks =
pow((self.sk + 1) * self.sks, self.n - 2, self.n) % self.n`
之所以扯到pks，因为程序一进去他就把这个值给我们了啊
    if __name__ == '__main__':
        sk = func.random_hex(len(sm2p256v1_ecc_table['n']))
        tsm2 = TSM2(sk)
        print('pk:%s'   %tsm2.pk)
        print('pks:%064x'%tsm2.pks)
根据pks的生成式子，其中除了sk和sks我们都知道，
所以我们应该就是要利用这个pks，sks来恢复这个sk，但是怎么获得这个sks 也即 d1 呢，
`s = (d1 * k1 * s2 + d1 * s3 - r) % self.n`
让s2=0，s3=1，r=0，这样就能得到 s = d1 % n了
显然d1 
    #!/usr/bin/env sage
    from secret import FLAG
    assert FLAG.startswith(b"X-NUCA{") and FLAG.endswith(b"}")
    def key_gen(bits):
        while True:
            p = random_prime(2**bits)
            q = random_prime(2**bits)
            if p % 4 == 3 and q % 4 == 3:
                break
        if p < q:
            p, q = q, p
        N = p * q
        while True:
            x = getrandbits(bits // 2)
            y = getrandbits(bits // 2)
            if gcd(x, y) == 1 and (x * y) < (int(sqrt(2 * N)) // 12):
                e = randint( int(((p + 1) * (q + 1) * 3 * (p + q) - (p - q) * int(N**0.21)) * y / (x * 3 * (p + q))), int(((p + 1) * (q + 1) * 3 * (p + q) + (p - q) * int(N**0.21)) * y / (x * 3 * (p + q))) )
                if gcd(e, (p + 1) * (q + 1)) == 1:
                    k = inverse_mod(e, (p + 1) * (q + 1))
                    break
        return (N, e, k)
    if __name__ == "__main__":
        bits = 1024
        N, e, _ = key_gen(bits)
        pt = (int.from_bytes(FLAG[:32], 'big'), int.from_bytes(FLAG[32:], 'big'))
        ct = (0, 1)    
        d = (((pt[1])**2 - 1) * inverse_mod(((pt[1])**2 + 1) * (pt[0])**2, N)) % N
        # 2000 years later...:)
        for _ in range(e):
            ct = ( int((ct[0] * pt[1] + ct[1] * pt[0]) * inverse_mod(1 + d * ct[0] * pt[0] * ct[1] * pt[1], N) % N), int((ct[1] * pt[1] + d * ct[0] * pt[0]) * inverse_mod(1 - d * ct[0] * pt[0] * ct[1] * pt[1], N) % N) )
        f = open("output.txt", "wb")
        f.write(str((e, N)).encode() + b'\n')
        f.write(str(ct).encode())
        f.close()
好的，第一题代码量不多，不错不错（嗯？似曾相识，危。。）首先看看他的功能，加密方式是把flag拆成了左右两份，组成一个数对，然后做了e次的操作，得到一个ct数对。这里的e次操作其实就是一个奇异爱德华曲线的一个乘法操作。（题目名不就是weird么？）所以有了e作为加密的公钥，我们自然就要找私钥d，而私钥d，（我承认我有赌的成分）d=inverse(e,(p+1)
* (q+1))，（曾经在一篇paper里看到过一眼，虽然用的并非奇异爱德华曲线）
其中p，q是大数N的一个分解。这里阶的确定不是很严格，但先试试啦。那么要这么试的话就要分解N，那就要看到这个keygen的过程了，这里p，q的生成有一点点小要求，然后就是这个e的生成，为了生成这个e，还特意整了个x，y。最后要求gcd(e,
(p+1) * (q+1))，唉，这，感觉我的猜测是对的好叭。到了这里，，这还不像西湖论剑的那一道题嘛[Wake me until May
ends](https://mp.weixin.qq.com/s?__biz=MzU1MzE3Njg2Mw==&mid=100004157&idx=1&sn=ba121056137afd43cd1768c66f1cad20&chksm=7bf78b4d4c80025b9dec44e9cd33702f2a5174cafb491ddf893e5229e9e5909e1ffda4b550ec&xtrack=1&scene=0&subscene=10000&clicktime=1604313274&enterid=1604313274&ascene=7&devicetype=android-29&version=27001353&nettype=ctnet&abtest_cookie=AAACAA%3D%3D&lang=zh_CN&exportkey=A%2BEVclkqshGGX1AhhJLO4XU%3D&pass_ticket=BxnNKDSg4NDA9EVhX4ioGO7c%2Fv4T%2BEtwsPAmYnDNjByfyEKbNWLjsXUcxQLtmrfk&wx_header=1)。这道题相关的paper提到
如果e满足一定的条件，
那么x，y就会在e/N的连分数上，并且通过x和y可以获得T：p+q的一个近似。
那么回到这道题本身，e的取值
    e = randint( int(((p + 1) * (q + 1) * 3 * (p + q) - (p - q) * int(N**0.21)) * y / (x * 3 * (p + q))), int(((p + 1) * (q + 1) * 3 * (p + q) + (p - q) * int(N**0.21)) * y / (x * 3 * (p + q))) )
这个时候我们就要用到RSA密码系统中用到过的[Factoring with high bits
known](https://www.anquanke.com/post/id/213821)，
显然这里有430bit的不确定位数是满足这个关系的，于是利用这个算法我们最终能成功的分解出p，q来
然后就能算出这个私钥了。
有了私钥了，这个曲线怎么算呢？
    d = (((pt[1])**2 - 1) * inverse_mod(((pt[1])**2 + 1) * (pt[0])**2, N)) % N
        # 2000 years later...:)
    for _ in range(e):
            ct = ( int((ct[0] * pt[1] + ct[1] * pt[0]) * inverse_mod(1 + d * ct[0] * pt[0] * ct[1] * pt[1], N) % N), int((ct[1] * pt[1] + d * ct[0] * pt[0]) * inverse_mod(1 - d * ct[0] * pt[0] * ct[1] * pt[1], N) % N) )
这里有个系数d，首先要计算出这个系数d
这个系数d的计算要利用到题目给的ct，
首先看到扭曲爱德华曲线的定义式
针对这一条曲线的加法公式是
针对这一道题他代码里的那个加法式子，我们会发现，这里相当于是扭曲爱德华曲线的系数a = -d
那么再配上一个坐标(x,y)，我们就能计算出系数d了。
其实这里可以做一个思考，这个系数d是有啥用？
我们看到这个源码里这个系数d的生成代码`d = (((pt[1])**2 - 1) * inverse_mod(((pt[1])**2 + 1) *
(pt[0])**2, N)) % N`
这里pt[0],pt[1]是flag明文前后两段的十进制数表示，所以d是由flag明文决定的。
我们再变换上述扭曲爱德华曲线的方程：
可以发现就是这个生成代码的方程式，pt[1]代表y，pt[0]代表x
所以其实这个系数d的作用就是保证flag所代表的点在这条曲线上。
好了，系数d也算出来了，怎么利用私钥来解密呢？
显然不可能直接利用原来里的这个循环去加上这些点，
信安数基中就提到过的重复倍加算法了解一下咯~
####  解题流程
所以这道题的整个解题流程：
  1. 利用连分数得到x，y（至于怎么确定x，y. 可以根据得到的x，y的bit位数，或者用x，y计算出来的T的bit位数来判断）