我知道的与RMI相关的Everything
RMI (Java Remote Method Invocation) 是Java远程⽅法调⽤，是⼀种允许⼀个 JVM 上的 
object 调⽤另⼀个 JVM 上 object ⽅法的机制。RMI 的本质是通过 socket 编程、Java 序列化
和反序列化、动态代理等实现的。
RMI 涉及注册中⼼、服务端和客户端。注册中⼼、服务端、客户端三者之间通信都会涉及序列
化传输⼆进制数据，有序列化，⾃然就会有反序列化。
先知图镇楼https://xz.aliyun.com/t/2223
⼀、搭建调试环境
1、创建远程⽅法接⼝
import java.rmi.Remote;
1
import java.rmi.RemoteException;
2
3
2、创建远程⽅法接⼝实现类
3、创建注册中⼼，启动 RMI 的注册服务
4、服务端
public interface IService extends Remote {
4
    public String queryName(String no) throws RemoteException;
5
}
6
import java.rmi.RemoteException;
1
import java.rmi.server.UnicastRemoteObject;
2
3
public class ServiceImpl extends UnicastRemoteObject implements IService {
4
5
    public ServiceImpl() throws RemoteException {
6
    }
7
8
    @Override
9
    public String queryName(String no) throws RemoteException {
10
        //方法的具体实现
11
        System.out.println("hello "+ no);
12
        return String.valueOf(System.currentTimeMillis());
13
    }
14
}
15
import java.rmi.RemoteException;
1
import java.rmi.registry.LocateRegistry;
2
import java.rmi.registry.Registry;
3
4
public class register {
5
    public static void main(String[] args) {
6
        Registry registry = null;
7
        try {
8
            registry = LocateRegistry.createRegistry(1099);
9
        } catch (RemoteException e) {
10
            e.printStackTrace();
11
        }
12
        while (true);
13
    }
14
}
15
package rmi;
1
import java.rmi.registry.LocateRegistry;
2
import java.rmi.registry.Registry;
3
import java.rmi.server.UnicastRemoteObject;
4
/**
5
 * @auther Skay
6
 * @date 2021/4/7 17:09
7
5、客户端
⼆、RMI通信流程分析
 * @description
8
 */
9
public class Server {
10
    public static void main(String[] args) {
11
        Registry registry = null;
12
        try {
13
            registry = LocateRegistry.getRegistry("127.0.0.1",1099);
14
            ServiceImpl obj = new ServiceImpl();
15
            IService service = (IService) 
UnicastRemoteObject.exportObject(obj, 0);
16
            registry.bind("vince",service);
17
        } catch (Exception e) {
18
            e.printStackTrace();
19
        }
20
    }
21
}
22
23
import java.rmi.NotBoundException;
1
import java.rmi.RemoteException;
2
import java.rmi.registry.LocateRegistry;
3
import java.rmi.registry.Registry;
4
5
public class Client {
6
    public static void main(String[] args) {
7
        Registry registry = null;
8
        try {
9
            registry = LocateRegistry.getRegistry("127.0.0.1",1099);
10
            IService service = (IService) registry.lookup("vince");
11
            String result = service.queryName("jack");
12
            System.out.println("result from remote : "+result);
13
        } catch (RemoteException e) {
14
            e.printStackTrace();
15
        } catch (NotBoundException e) {
16
            e.printStackTrace();
17
        }
18
    }
19
}
20
⾸先启动注册服务 -> 然后执⾏服务端 -> 最后执⾏客户端
可以发现客户端能够成功调⽤服务端上的⽅法，实现远程⽅法调⽤。
1.UnicastRemoteObject
RMIServer启动时的⼀个⽅法，
其实也可以没有这个⽅法，HelloServce定义时，继承UnicastRemoteObject即可（例⼦中就是
这样），只有经过UnicastRemoteObject处理的对象，才可以被远程⽅法调⽤。
既然只有经过这个类的处理的对象才能被远程⽅法调⽤，看⼀下这⾥⾯做了什么样的处理
HelloService helloService = (HelloService) 
UnicastRemoteObject.exportObject(obj, 0);
1
1)java.rmi.server.UnicastRemoteObject#exportObject(java.rmi.Remote, int)
在该⽅法中，会调⽤⽅法exportObject(Remote obj, UnicastServerRef sref)，其中会new⼀个
UnicastServerRef对象，
进⼊UnicastServerRef类，会发现其⽗类中包含⼀个LiveRef类型的属性：
查看LiveRef源码，看到其中会有⼀个Endpoint类型的属性，并在下⾯的构造⽅法中给其赋值了
⼀个TCPEndpoint类型的对象值：
TCPEndpoint类具有如下属性，主要包含ip地址与port等信息，该信息应该就是导出的远程对象
对应的信息：
总结下 TCPEndpoint 、LiveRef 、UnicastServerRef 、UnicastRef
TCPEndpoint是LiveRef的类属性，⾥⾯有远程对象的信息，
UnicastServerRef是UnocastRef的⼦类
LiveRef存储封装的 ObjID 对象和 TCPEndpoint 对象信息,
LiveRef是UnicastRef构造⽅法的参数，UnicastServerRef回调⽤⽗类的构造⽅法，⾃然就会
new⼀个LiveRef，其中也就包含了TCPEndpoint
2)java.rmi.server.UnicastRemoteObject#exportObject(java.rmi.Remote, 
sun.rmi.server.UnicastServerRef)
这时会判断obj是否为UnicastRemoteObject类型,因为我们定义时继承了
UnicastRemoteObject，所以进⼊逻辑
obj的ref 赋值
3)sun.rmi.server.UnicastServerRef#exportObject(java.rmi.Remote, 
java.lang.Object, boolean)
可以看到会先创建⼀个代理对象,其中handler会包括上⾯创建的LiveRef对象（前⾯也知道了该
对象中包含Endpoint等通信所需信息），因此可以判断在远程调⽤该对象时，客户端获取到的
其实是该代理对象(也就是RemoteObjectInvocationHandler)
4)Target对象的导出
再往下看，会⽣成⼀个Target对象，可以看到该Target对象包含了许多数据（导出的原始对
象，创建的代理对象等）。然后该Target对象⼜被this.ref的exportObject⽅法导出
5)TCPEndpoint的export，listen开启socket通信端⼝
然后该Target对象⼜被this.ref的exportObject⽅法导出,继续跟进，发现进⼊了TCPEndpoint类
中的属性TCPTransport类的export(Target var1)⽅法
sun.rmi.transport.tcp.TCPTransport#exportObject ，其中会执⾏listen()⽅法，该⽅法就是为
导出的对象去开启⼀个socket通信端⼝：
跟⼊listen⽅法如下，⾸先获取TCPEndpoint对象，然后使⽤该对象去创建⼀个socket服务，
 执⾏完上⾯⼀步代码后，发现socket端⼝变成了55821，经过多次测试，发现该值是随机的，
每次运⾏都不⼀样，再下⼀步代码就是开启⼀个单独的线程，来进⾏socket通信.每⼀个导出的
对象都会单独开启⼀个socket，并且⽤⼀个单独的线程来处理socket通信，因此知道服务端不
只是有⼀个Registry监听端⼝，⽽是所有导出对象都会有⼀个监听端⼝，且该端⼝值是随机⽣成
的。 
⾄此，执⾏完毕，打开了socket通信，⽣成的service是 RemoteObjectInvocationHandler ⼀个
代理⽽已 这个步骤可能就是封装到代理⾥，可以看下service
2.LocateRegistry.createRegistry
创建Registry，监听于1099端⼝
直接返回RegistryImpl对象，
跟进去RegistryImpl的构造⽅法
RegistryImpl类的setup(UnicastServerRef var1)⽅法
这时⼜进⼊UnicastServerRef类的exportObject(Remote var1, Object var2, boolean var3)⽅
法，后⾯的流程就跟UnicastRemoteObject.exportObject() 步骤三后⾯的⼀样了。
可以看到这⾥导出的对象是RegistryImpl，期间会执⾏setSkeleton⽅法，该⽅法中会⽣成⼀个
RegistryImpl_Skel对象，猜测该对象就是其他⽂章中经常提到的服务端的skeleton对象，最后
⽣成的RegistryImpl⻓这样。
3.客户端getRegisty()⽅法
LocateRegistry.getRegistry返回的是⼀个代理对象,返回的代理对象为RegistryImpl_Stub类型
4.服务端的bind⽅法
调⽤的是sun.rmi.registry.RegistryImpl_Stub#bind
映⼊眼帘好多writeobject⽅法
5.客户端的lookup⽅法
sun.rmi.registry.RegistryImpl_Stub#lookup
lookup之前执⾏了getRegisty⽅法，返回的是RegistryImpl_Stub对象，所以这⾥的lookup调⽤
的是RegistryImpl_Stub的lookup，我们跟进，已经将关键位置标红
1) ⾸先进⼊UnicastRef类的newCall⽅法
以下为引⽤，原⽂链接找不到了233333
1.⾸先是获取了⼀个TCP连接，可以看到是使⽤LiveRef去创建的连接，在调试
RMIServer时，我们已经知道LiveRef中包含TCPEndpoint属性，其中包含ip与端⼝等通
信信息：
2.再往下⾛，看到new了⼀个StreamRemoteCall对象，进⼊StreamRemoteCall的构造
⽅法，其做了如下操作，往服务端发送了⼀些数据：
2)回到lookup继续往下⾛，执⾏了var3.writeObject（第⼆个框）
这⾥是将lookup⽅法中传递的远程服务的名称，即字符串“Service”进⾏了序列化并发往了服务
端，
3)super.ref.invoke
然后⼜执⾏了super.ref.invoke⽅法，进⼊该⽅法如下，然后继续往下⾛，
通过ref.invoke⽅法处理服务端响应回来的序列化数据。
1.var1.executeCall() StreamRemoteCall类的executeCall
该⽅法就是处理第7步往服务端发送数据后的服务端响应的数据，看到从响应数据中先读取了⼀
个字节，值为81，然后⼜继续读取⼀个字节赋值给var1
下⾯是判断var1的值，为1直接return，说明没问题，如果为2的话，会先对对象进⾏反序列化操
作，然后判断是否为Exception类型（⽹上有关于带回显的攻击RMI服务的exp，它就是将执⾏
完命令后的结果写到异常信息⾥，然后抛出该异常，这样在客户端就可以看到命令执⾏的结果
了，这时得到的var1的值就是2）
当上⼀步var1值为1时，说明没问题，
4)再回到lookup，会执⾏var6.readObject⽅法
将服务端返回的数据反序列化，然后将该对象返回（前⾯我们也知道了，这⾥获取到的其实是⼀
个代理对象）。⾄此，客户端整个请求的过程也梳理完了
6.服务端lookup
客户端在调⽤lookup时，服务端也在调⽤