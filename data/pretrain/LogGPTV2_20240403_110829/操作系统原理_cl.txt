 （b）；
②设a是pi
 中发送m的事件，其邮戳为Tm
 =ci
 （a），b是pj
 中接收m的事件，则定义
例10.4
  图10.16给出了并发进程诸事件，设计逻辑时钟LCp、LCq、LCr。
依据此构造方法得到的时间序列只是一个偏序，并没有对所有的事件排全序，还不能满足应用的需要。所以，还需要对逻辑时种进行全序化的排序。
3．逻辑时钟全序化
从例10.4的解答可看出，所得到的逻辑时钟值是一个偏序，因为有些逻辑时钟值相等。为了能实现逻辑时钟全序化，需要对逻辑时钟值相等的诸事件排一个顺序。方法是在进程集合上定义一个全序。
任取进程集合上的一个全序￡，定义事件集合上的一个全序“⇒”如下：
若a是进程pi
 上的一事件，b是进程pj
 上的一事件，则a⇒b，当且仅当
①ci
 （a）＜ci
 （b）；或
②ci
 （a）=ci
 （b）∧pi
 ￡pj
 （字典序）。
例如，在例10.4中，若定义P＜Q＜R，则有p0
 ⇒q0
 ，p1
 ⇒q1
 ，p2
 ⇒q2
 等。其他逻辑时钟值依事件关系调整。
 10.4.4 分布式事件排序——时间戳算法
L Lamport提出时间戳算法，用逻辑时钟对事件进行排序来解决并发干扰问题，是一个互斥算法。当有多个分布式进程同时对临界资源访问时，该算法可以避免冲突，实现互斥，保证系统的一致性。
互斥算法应满足的条件是：①已获得资源的进程必须在释放资源后，另一个进程才能得到该资源；②不同的请求应按请求产生的顺序获得满足；③若获得资源的每一个进程最终都释放资源，则每个请求最终都能满足。
1．时间戳算法规则
（1）为申请资源，进程pi
 向其他各结点发送Tm
 ∶pi
 的申请报文并将它放入自己的资源申请队列。
（2）进程pj
 收到Tm
 ∶pi
 的申请报文，将它放入自己的资源申请队列，在自己空闲时（pj
 不在临界区，也未发送任何报文）向pi
 发送一个具有时间戳承认报文。
（3）当满足下述两个条件时，进程pi
 获得资源：
①在pj
 的资源申请队列中，Tm
 ∶pi
 排到队首；
②pj
 收到所有其他进程的承认报文，且时间戳均大于Tm
 。
（4）进程pi
 使用完临界资源后，从自己的申请队列中删除Tm
 ∶pi
 的申请报文，并向其他结点发送Tm
 ∶pi
 的释放资源报文。
（5）进程pj
 收到pj
 释放资源报文后，从自己的申请队列中删除Tm
 ∶pi
 的申请报文。
2．算法分析
（1）此算法能保证互斥地进入临界区，且不会发生死锁现象。因为所有请求都按时间戳排全序，保证只有一个请求者排在队首，且收到了所有的承认报文，即只有一个请求能进入临界区。当一个请求者使用完临界资源后，另一个请求者才能进入临界区。
（2）当共享临界资源的进程数为n时，使用此算法完成一次互斥需要发送的报文数为
（n-1）申请报文+（n-1）承认报文+（n-1）释放资源报文=3（n-1）
在L Lamport提出时间戳算法后，有许多学者对该算法进行了改进，主要是减少通信量。在环型结构或逻辑环网情况下，完成一次互斥需要发送的报文数可以大大降低。有兴趣的读者可进一步查阅有关资料，在此不再赘述。
 10.4.5 故障处理与恢复
任何系统故障都是难免的，特别是在分布式系统中情况更为严重。因为分布式系统拥有大量的设备、部件、软件模块，使系统出现故障的概率加大。问题不在于是否出现故障，而在于是否能发现并处理故障，从而保证系统的可靠性，提供分布式系统的健壮性和容错能力。
1．故障检测
在分布式系统中，为了检测故障必须在两两之间进行测试，方法如下。
设A、B两结点之间有一链路，
（1）定期地相互发送消息。
（2）若超时未收到回答，则出现以下三种情况之一：①处理机B出了故障（假设由A发出消息）；②链路B出了故障；③消息从B发出后丢失。
（3）A重发，若A重发若干次（如7次）后仍如此，则排除回答信息丢失的可能。