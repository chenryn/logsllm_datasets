I'm working on a small messaging chat project and using Tornado's WebSocket for communication between the web browser and the server. Everything is functioning well, but I am also using Tornado's integrated web framework. I want to configure my application to run on an Nginx web server with uWSGI. I have read that to integrate Tornado and uWSGI, I need to run the Tornado application in WSGI mode. However, this approach does not support asynchronous methods.

My question is: What is the best way to integrate Tornado's WebSocket with uWSGI? Should I run the Tornado WebSocket separately and configure it in Nginx, independent of the rest of my application?

---

The uWSGI Tornado loop engine is more of a proof of concept and may not be the most reliable solution. Instead, you have two better options:

1. **Native uWSGI WebSocket Support**: uWSGI has built-in support for WebSockets, which can be a more robust and straightforward solution. You can use uWSGI's WebSocket capabilities to handle your WebSocket connections, while still running the rest of your application in WSGI mode.

2. **Nginx Routing to Both uWSGI and Tornado**: Another approach is to configure Nginx to route HTTP requests to uWSGI and WebSocket requests to Tornado. This way, you can leverage the strengths of both technologies. Nginx can act as a reverse proxy, directing traffic appropriately based on the type of request.

Hereâ€™s a brief overview of how you might set up each option:

### Option 1: Native uWSGI WebSocket Support
- Configure uWSGI to handle WebSocket connections.
- Use the `--websocket` option in your uWSGI configuration to enable WebSocket support.
- Ensure your Tornado application is adapted to work with uWSGI's WebSocket implementation.

### Option 2: Nginx Routing to Both uWSGI and Tornado
- Set up Nginx to proxy HTTP requests to uWSGI.
- Set up Nginx to proxy WebSocket requests to Tornado.
- Example Nginx configuration:
  ```nginx
  http {
      upstream uwsgi_app {
          server 127.0.0.1:8000;
      }

      upstream tornado_app {
          server 127.0.0.1:8888;
      }

      server {
          listen 80;

          location / {
              include uwsgi_params;
              uwsgi_pass uwsgi_app;
          }

          location /ws/ {
              proxy_pass http://tornado_app;
              proxy_http_version 1.1;
              proxy_set_header Upgrade $http_upgrade;
              proxy_set_header Connection "Upgrade";
              proxy_set_header Host $host;
          }
      }
  }
  ```

In summary, using native uWSGI WebSocket support or configuring Nginx to route requests to both uWSGI and Tornado are more reliable and flexible solutions compared to using the uWSGI Tornado loop engine.