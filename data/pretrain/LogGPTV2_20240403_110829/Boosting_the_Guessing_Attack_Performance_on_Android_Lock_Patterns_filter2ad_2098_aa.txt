title:Boosting the Guessing Attack Performance on Android Lock Patterns
with Smudge Attacks
author:Seunghun Cha and
Sungsu Kwag and
Hyoungshick Kim and
Jun Ho Huh
Boosting the Guessing Attack Performance on Android
Lock Patterns with Smudge Attacks
Seunghun Cha1, Sungsu Kwag1, Hyoungshick Kim1 and Jun Ho Huh2
1Department of Software, Sungkyunkwan University, Republic of Korea
2Honeywell ACS Labs, Golden Valley, MN USA
{sh.cha, kssu1994, hyoung}@skku.edu
PI:EMAIL
ABSTRACT
Android allows 20 consecutive fail attempts on unlocking a de-
vice. This makes it difﬁcult for pure guessing attacks to crack
user patterns on a stolen device before it permanently locks it-
self. We investigate the effectiveness of combining Markov model-
based guessing attacks with smudge attacks on unlocking Android
devices within 20 attempts. Detected smudges are used to pre-
compute all the possible segments and patterns, signiﬁcantly reduc-
ing the pattern space that needs to be brute-forced. Our Markov-
model was trained using 70% of a real-world pattern dataset that
consists of 312 patterns. We recruited 12 participants to draw the
remaining 30% on Samsung Galaxy S4, and used smudges they left
behind to analyze the performance of the combined attack.
Our results show that this combined method can signiﬁcantly im-
prove the performance of pure guessing attacks, cracking 74.17%
of patterns compared to just 13.33% when the Markov model-based
guessing attack was performed alone—those results were collected
from a naive usage scenario where the participants were merely
asked to unlock a given device. Even under a more complex sce-
nario that asked the participants to use the Facebook app for a few
minutes—obscuring smudges were added as a result—our com-
bined attack, at 31.94%, still outperformed the pure guessing at-
tack at 13.33%. Obscuring smudges can signiﬁcantly affect the
performance of smudge-based attacks. Based on this ﬁnding, we
recommend that a mitigation technique should be designed to help
users add obscurity, e.g., by asking users to draw a second random
pattern upon unlocking a device.
Keywords
Pattern Lock; Guessing Attack; Smudge Attack
1.
INTRODUCTION
To help smartphone users select memorable and secure authen-
tication secrets, in 2008, Google introduced a graphical password
scheme (referred to as “Android pattern lock” or “Android screen
lock pattern”) adopted from “Pass-Go” [20] for Android devices,
which asks users to create and remember a graphical pattern on a
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for proﬁt or commercial advantage and that copies bear this notice and the full cita-
tion on the ﬁrst page. Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior speciﬁc permission
and/or a fee. Request permissions from permissions@acm.org.
ASIA CCS ’17, April 02-06, 2017, Abu Dhabi, United Arab Emirates
© 2017 ACM. ISBN 978-1-4503-4944-4/17/04. . . $15.00
DOI: http://dx.doi.org/10.1145/3052973.3052989
3× 3 grid. This scheme has quickly emerged as the most popular
locking method for Android devices [22]. Many users perceive
patterns as quicker and less error-prone unlocking method than
PIN [23].
It is unclear, however, whether their security is guar-
anteed in practice. Several studies [19, 21] demonstrated that the
space of real patterns might be much smaller than the theoretical
space, making password guessing attacks feasible.
To mitigate guessing attacks, Android only allows up to 20 con-
secutive fail unlock attempts—after 20 consecutive fail attempts,
Android displays the “Too many pattern attempts” error message,
and asks the user to log in with a Google account to unlock the de-
vice. This policy is effective against online guessing attacks, but
might not be sufﬁcient to prevent a well-known side channel attack
called smudge attack [5] that uses ﬁngerprint smudges left behind
on a touchscreen to infer a correct pattern.
Drawing a pattern with an oily ﬁnger leaves smudges on a touch-
screen. Such smudges can provide useful information for efﬁciently
guessing a pattern. Aviv et al. [5] examined the feasibility of this
smudge-based inference attack on the Android lock pattern by test-
ing various experimental conditions (e.g., lighting and camera an-
gles) under which smudge-based inference attacks can easily be
performed. Zezschwitz et al. [24] also showed that the Android
lock pattern was vulnerable to smudge attacks through a lab ex-
periment. Their results indicated that smudge attacks can be effec-
tive in cracking user patterns. However, their security analysis was
mainly based on participants’ self-reported ratings on the possibil-
ity of correctly guessing patterns from looking at smudges. To the
best of our knowledge, there is no previous work that has actually
implemented a fully working smudge attack (or guessing attack)
tool and tested its real performance.
We propose a novel “smudge-supported pattern guessing” (smug)
attack that pre-computes all the possible patterns using detected
smudges, signiﬁcantly reducing the pattern space that needs to be
brute-forced with a guessing attack. To improve practicality of
smudge attacks, we used image processing techniques to automat-
ically detect smudges from a picture of an Android device. De-
tected smudges are used to generate a list of all possible patterns,
and guessing attack is performed within that small pattern space.
To evaluate the effectiveness of smug attack, we ﬁrst constructed
an n-gram Markov model with 219 (70%) of 312 real-world pat-
terns collected through an Android app (only under users’ agree-
ment). Next, we recruited 12 participants, and asked each par-
ticipant to draw 30 patterns randomly selected from the remain-
ing 93 (30%) patterns. Finally, we performed smug attack using
the smudges they left behind. When we asked the participants to
merely unlock a given device, our results showed that smug at-
tacks can signiﬁcantly outperform pure guessing attacks, cracking
74.17% of 360 (= 12× 30) patterns within 20 unlock attempts com-
pared to just 13.33% being cracked when Markov-based guessing
attacks were performed alone. To closely resemble a real-life phone
usage scenario, we also asked them to use the Facebook app for a
few minutes after unlocking a device. Smug attacks still managed
to crack 31.94% of those 360 patterns compared to just 13.33% be-
ing cracked under pure guessing attacks. Hence, we recommend
that a mitigation technique should be designed to help users add
more smudge obscurity by, e.g., drawing a second random pattern.
Our key contributions are summarized as follows:
1. We proposed the combined smug attack, and implemented
the ﬁrst fully automated and working tool that is capable of
performing both smudge and guessing attacks. Using our
tool, 20 possible pattern candidates with high likelihood can
be identiﬁed automatically from a given touchscreen image
(that contains smudges), taking about 18 seconds on aver-
age. This is a signiﬁcant advancement from previous litera-
ture that merely speculated the likely performance of smudge
attacks based on user feedback, and without a real implemen-
tation of smudge attacks or guessing attacks.
2. Using the smug attack tool and real-world pattern datasets,
we evaluated the performance of smudge attacks, dictionary-
based guessing attacks, and the combined smug attacks. We
used the smudges left behind from the participants who were
asked to perform real-world phone usage scenarios such as
using the Facebook app for a few minutes. Our results sug-
gest that smug attacks (with 74.17% attack success rate) sig-
niﬁcantly outperformed dictionary-based pure guessing at-
tacks (13.33%). Even when obscuring smudges were added
under the Facebook usage scenario, smug attacks still showed
a higher attack success rate (31.94%) compared to pure guess-
ing attacks.
3. In contrast to inconclusive ﬁndings from previous literature,
we also identiﬁed limitations of smudge-based attacks through
full implementation and testing them on real-world patterns,
demonstrating that obscuring smudges can signiﬁcantly down-
grade the performance of smudge-based attacks.
4. We explored potential countermeasures to mitigate smudge
attacks and particularly evaluated an obscurity-based miti-
gation technique that helps users to add effective obscuring
smudges, showing that it can signiﬁcantly reduce the per-
formance of smug attacks from 74.17% to 34.44%. Unlike
existing smudge attack mitigation schemes (e.g., [17]), our
recommendation does not require any changes in using an
Android screen lock pattern.
The rest of the paper is structured as follows. Section 2 explains
Android screen lock patterns and attack model. Section 3 describes
smug attack in detail. Section 4 explains how real-world patterns
were collected. Attack optimization techniques are covered in Sec-
tion 5, and attack performance is discussed in Section 6. Mitigation
techniques are discussed in Section 7. We discuss attack limitations
in Section 8. Related work is covered in Section 9, and our conclu-
sions are in Section 10.
2. BACKGROUND
2.1 Android screen lock patterns
Android screen lock pattern is one of the most popularly used
graphical password schemes [2]. A user is asked to choose a se-
cret pattern consisting of consecutive segments (lines connecting
points) on a 3× 3 grid, and in the authentication phase, the user has
to draw that pattern on the grid to unlock the user’s Android device
(see Appendix A). For notational convenience, the following con-
ventions are adopted throughout the paper. The 9 points on the grid
are numbered from 1, starting with the point on the top left corner,
to 9, which is the point on the bottom right corner of the grid. A
“segment” in a pattern is deﬁned as a line that connects two points
together. An Android pattern must consist of at least four points,
and a point cannot be used more than once.
(≈ 218), which is much larger than the password space of 10,000
In theory, the total number of all possible patterns is 389,112
four-digits PINs that are also commonly used to lock phones. De-
spite this relatively larger password space, users still choose weak
patterns that are susceptible to various attacks like guessing at-
tacks [19, 21], smudge attacks [3, 5], sensor-based side channel at-
tacks [6], and shoulder surﬁng attacks [25]. This paper focuses on
evaluating the effectiveness of smudge attacks and guessing attacks
based on real-world datasets and fully automated implementation.
2.2 Attack model and assumptions
This section describes our threat model and assumptions. Peo-
ple often use oily ﬁngers to perform various tasks on their phones,
leaving smudges behind on the touchscreen. Some common tasks
include unlocking phones by drawing a pattern, sending texts, surf-
ing the Internet, playing games, and so on. Oily smudges left be-
hind from multiple tasks would obscure the actual smudge traces
that need to be collected to guess the right screen lock pattern.
Given those challenges, an attacker’s goal is to steal an Android
phone from someone with a high proﬁle (e.g., a celebrity or politi-
cian), use a smart smudge attack to quickly unlock the stolen phone
within 20 attempts, and access his or her conﬁdential data.
Such an attack scenario is becoming popular, and more and more
mobile phone manufacturers are enabling full disk encryption on
their devices to protect user data from strangers and hackers. FBI’s
recent attempt to unlock an iPhone owned by a terrorist is an exam-
ple of this scenario [9]. According to a survey conducted in Lon-
don [8], more than 60,000 mobile devices were left in the back of
taxis during a six month period. This number indicates that a large
number of lost mobile devices could potentially become a target for
smudge attacks and guessing attacks.
The effectiveness of this attack depends on the amount and clar-
ity of smudges remaining on the stolen phone, and how much in-
formation about screen lock patterns is contained in the smudges
left behind. In performing such an attack, we assume that (1) the
attacker is in possession of the victim’s phone for a few minutes,
(2) the phone has sufﬁcient amount of smudges left behind, and
(3) the remaining smudges contain some hint about the actual un-
lock pattern. Those three assumptions are integral when it comes
to implementing a smudge-based attack.
We show that such assumptions may often be reasonable through
the user studies for simulating popular phone usage scenarios pre-
sented in Section 5 and 6.
3. SMUDGE-SUPPORTED PATTERN GUESS-
ING ATTACK
The proposed smudge-supported pattern guessing (smug) attack
combines two techniques: (1) image processing to infer possible
patterns from smudges, and (2) sorting patterns based on the oc-
currence probabilities computed using an n-gram Markov model,
which could be constructed using real-world pattern datasets. When
an attacker feeds in the picture containing Android device’s screen
to the smug attack tool, it automatically analyzes smudges, creates
(a) Input picture
(b) Reference device
(c) Extracted screen
(d) Edge detection
(e) Probabilistic transform
(f) Template grid
(g) Adding the grid
(h) Pattern detection
Figure 1: Overall process for recovering the user’s pattern drawing with its smudges.
segments, and spits out possible patterns. The number of possible
patterns will depend on the clarity and representatives of smudges.
Since Android only allows 20 failed attempts, there is a need of
another smarter mechanism to try out the possible patterns. To that
end, we use an n-gram Markov model to sort possible patterns in
descending order, starting from the pattern with the highest occur-
rence probability. The attack is successful if the correct pattern is
found within 20 guessing attempts and the Android device is un-
locked.
Smug attack involves the following four steps: (i) extracting the
exact touchscreen area from a picture of a target device; (ii) iden-
tifying pattern-relevant smudge objects from the extracted pattern
input area; (iii) generating possible pattern segments from the iden-
tiﬁed smudge objects; (iv) generating possible pattern candidates,
and ordering them in a descending order according to their occur-
rence probabilities. The last step allows the attack to try the most
likely occurring patterns ﬁrst. As for image processing, we used
OpenCV [1], a popular open source computer vision library, to
quickly implement the basic operations used in our smug attack
tool. Each step is described in detail in the following sections.
3.1 Extracting the pattern input area
The obvious ﬁrst step of smug attack is to take a picture of a de-
vice using an optimal camera and light setting. Our recommended
camera and light setting is described in Section 5.2.
Inherently,
the setting can be changed depending on the target device. Fig-
ure 1(a) to (c) show the processes involved in obtaining the exact
touchscreen area from a given picture of an Android device.
First, given a picture of a mobile device (e.g., as shown in Fig-
ure 1(a)), we use an image matching algorithm with reference de-
vice images, such as the Samsung Galaxy S4 image (see Figure 1(b)),
to recognize the device (see the red rectangle in Figure 1(a)). The
most similar reference device image is automatically selected from
a pre-stored set of reference images by measuring the similarities
between images. Once the device object is identiﬁed using a match-
ing reference image, the touchscreen part is automatically cropped
and adjusted using a perspective transform technique to tilt the
touchscreen 60 degrees to the left. Then, the touchscreen is scaled
to a predeﬁned image size (e.g., 810× 1440 pixels). This scaled
and y coordinates of the 3× 3 grid objects. As a result, a “bird’s eye
image is then compared against the reference image to locate the x
view” image of the touchscreen is created as shown in Figure 1(c).
3.2
Identifying smudge objects
In our implementation, the target touchscreen image (i.e., Fig-
ure 1(c)) is ﬁrst binarized to enhance the visibility of smudges of
interest. Canny edge detection [10] is applied to locate the regions
where ﬁngers have touched the screen (see Figure 1(d)). Located
regions are then processed using the probabilistic Hough transfor-
mation [15] to extract the edges of interest (see the red edges in
Figure 1(e)). To locate the exact pattern input area (i.e., where the
pattern-relevant smudges are), we also use a reference image with
the 3× 3 grid (see Figure 1(f))—the center point and radius of each
age by using the Hough circle transform [7]. The computed 3× 3
circle object on the grid can be calculated from this reference im-
grid objects can be incorporated into the captured touchscreen im-
age with smudges (see Figure 1(g)). Finally, we apply our own
heuristic algorithm with the detected red edges to decide whether
there exists a segment between two grid points (see Section 3.3).
Figure 1(h) shows an example of detected segments (yellow lines)
inferred through those processes. Using those detected segments,
a probabilistic password model, such as an n-gram Markov model,
can identify possible and likely pattern candidates.
For the Canny edge detection algorithm, we set the low threshold
value to 10 and the high threshold value to 30. For the probabilistic
Hough transformation, we set the minimum line length to 2 pixels,
the maximum gap to 5 pixels, and the threshold value to 10. It is im-
portant to set appropriate parameter values for ﬁltering valid edges
that are actually relevant to the correct lock pattern. For example,
in the probabilistic Hough transformation, if a threshold value is
too low for edge pixel’s gradient value, we may end up with too
many incorrect/false edges (caused by noise); if a threshold value
is too high, we might miss a few real/true edges relevant to the cor-
rect pattern. Figure 2 shows the effects of threshold values in the
probabilistic Hough transformation. Those parameter values were
determined experimentally with a small number of test samples.
(a) Threshold = 2
(b) Threshold = 200
Figure 2: Effects of threshold values in the probabilistic Hough
transformation.
Before Canny edge detection is complete, several morphological