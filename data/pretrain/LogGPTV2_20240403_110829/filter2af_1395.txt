# Capstone反汇编引擎数据类型及API分析及示例(二)
[Capstone反汇编引擎数据类型及API分析及示例(一)](https://xz.aliyun.com/t/5753
"Capstone反汇编引擎数据类型及API分析及示例")  
上篇分析了Capstone开放的数据类型，下面就来正式看看API吧  
官方开放的API只有二十个左右，但为了能写的更易懂，我将结合实例，分多篇写。  
API中作者将capstone缩写为cs，下面我也用这种方式描述
## API分析
### cs_malloc_t
`void* (CAPSTONE_API *cs_malloc_t)(size_t size);`
cs的动态内存分配，用于
    struct cs_opt_mem {
        cs_malloc_t malloc;
        cs_calloc_t calloc;
        cs_realloc_t realloc;
        cs_free_t free;
        cs_vsnprintf_t vsnprintf;
    } cs_opt_mem;
cs_malloc_t定义于capstone.lib和capstone.dll的cs.c中，  
> 在用户模式下，cs_mem_malloc默认使用系统malloc
>
> Windows driver模式下，`cs_malloc_t cs_mem_malloc = cs_winkernel_malloc;`  
>  cs_winkernel_malloc定义于\capstone-4.0.1\windows\winkernel_mm.c,
实现代码
    void * CAPSTONE_API cs_winkernel_malloc(size_t size)
    {
        // 长度不能分配为0
        NT_ASSERT(size);
        // FP; NonPagedPool用于支持 Windows 7 
    #pragma prefast(suppress : 30030)       // 分配可执行的POOL_TYPE内存
        size_t number_of_bytes = 0;
        CS_WINKERNEL_MEMBLOCK *block = NULL;
        // 特定的值能造成溢出
        // 如果value中的和超出或低于类型容量，函数将返回NULL。
        if (!NT_SUCCESS(RtlSizeTAdd(size, sizeof(CS_WINKERNEL_MEMBLOCK), &number_of_bytes))) {
            return NULL;
        }
        block = (CS_WINKERNEL_MEMBLOCK *)ExAllocatePoolWithTag(
                NonPagedPool, number_of_bytes, CS_WINKERNEL_POOL_TAG);
        if (!block) {
            return NULL;
        }
        block->size = size;
        return block->data;
    }
> OSX kernel模式下，`cs_malloc_t cs_mem_malloc = kern_os_malloc;`，这里暂且不探讨。
### cs_calloc_t
`void* (CAPSTONE_API *cs_calloc_t)(size_t nmemb, size_t size);`
cs申请内存并初始化  
用于`struct cs_opt_mem`，定义于cs.c  
用户模式： `cs_calloc_t cs_mem_calloc = calloc;`,使用系统calloc  
Windows driver模式： `cs_calloc_t cs_mem_calloc = cs_winkernel_calloc;`  
实现代码
    void * CAPSTONE_API cs_winkernel_calloc(size_t n, size_t size)
    {
        size_t total = n * size;
        void *new_ptr = cs_winkernel_malloc(total);
        if (!new_ptr) {
            return NULL;
        }
        return RtlFillMemory(new_ptr, total, 0);
    }
OSX kernel模式： `cs_calloc_t cs_mem_calloc = cs_kern_os_calloc;`  
直接调用kern_os_malloc了
### cs_realloc_t
`void* (CAPSTONE_API *cs_realloc_t)(void *ptr, size_t size);`
cs重新分配内存  
用于`struct cs_opt_mem`，定义于cs.c  
用户模式： `cs_realloc_t cs_mem_realloc = realloc;`,调用系统realloc  
Windows driver模式： `cs_realloc_t cs_mem_realloc = cs_winkernel_realloc;`
实现代码，可以看出是利用cs_winkernel_malloc重新申请
    void * CAPSTONE_API cs_winkernel_realloc(void *ptr, size_t size)
    {
        void *new_ptr = NULL;
        size_t current_size = 0;
        size_t smaller_size = 0;
        if (!ptr) {
            return cs_winkernel_malloc(size);
        }
        new_ptr = cs_winkernel_malloc(size);
        if (!new_ptr) {
            return NULL;
        }
        current_size = CONTAINING_RECORD(ptr, CS_WINKERNEL_MEMBLOCK, data)->size;
        smaller_size = (current_size 
    #include 
    #include "platform.h"
    #include "capstone.h"
    struct platform {
        cs_arch arch;
        cs_mode mode;
        unsigned char* code;
        size_t size;
        const char* comment;
        cs_opt_type opt_type;
        cs_opt_value opt_value;
        cs_opt_type opt_skipdata;
        size_t skipdata;
    };
    static void print_string_hex(unsigned char* str, size_t len)  //输出机器码
    {
        unsigned char* c;
        printf("Code: ");
        for (c = str; c 
    #include 
    #include "platform.h"
    #include "capstone.h"
    static int test()
    {
        return cs_version(NULL, NULL);  
    }
    int main()
    {
        int version = test();
        printf("%X", version);
        return 0;
    }
输出  
示例2，强行修改版本：
    #include 
    #include 
    #include "platform.h"
    #include "capstone.h"
    static int test()
    {
        int ma[] = { 5 };
        int mi[] = { 6 };
        return cs_version(ma, mi);  
    }
    int main()
    {
        int version = test();
        printf("%X", version);
        return 0;
    }
输出：  
可以看到并不能改变
### cs_support
bool CAPSTONE_API cs_support(int query);
用来检查capstone库是否支持参数输入的架构或处于某编译选项  
通过查看源码得知，共有四种查询参数
    bool CAPSTONE_API cs_support(int query)
    {
        if (query == CS_ARCH_ALL)
            return all_arch == ((1 << CS_ARCH_ARM) | (1 << CS_ARCH_ARM64) |
                    (1 << CS_ARCH_MIPS) | (1 << CS_ARCH_X86) |
                    (1 << CS_ARCH_PPC) | (1 << CS_ARCH_SPARC) |
                    (1 << CS_ARCH_SYSZ) | (1 << CS_ARCH_XCORE) |
                    (1 << CS_ARCH_M68K) | (1 << CS_ARCH_TMS320C64X) |
                    (1 << CS_ARCH_M680X) | (1 << CS_ARCH_EVM));
        if ((unsigned int)query < CS_ARCH_MAX)
            return all_arch & (1 << query);
        if (query == CS_SUPPORT_DIET) {
    #ifdef CAPSTONE_DIET
            return true;
    #else
            return false;
    #endif
        }
        if (query == CS_SUPPORT_X86_REDUCE) {
    #if defined(CAPSTONE_HAS_X86) && defined(CAPSTONE_X86_REDUCE)
            return true;
    #else
            return false;
    #endif
        }
        // unsupported query
        return false;
    }
示例1(CS_ARCH_ALL，检查是否支持所有架构)：  
示例2(CS _ARCH_ *，检查是否支持指定架构)  
示例3(检查是否处于DIET编译模式)：  
示例4(检查是否处于X86_REDUCE编译模式)：  
下篇将介绍更多有用的API，望支持