sic block. vip_safe_memory_unlock and vip_safe_memory_lock re-
fer to the opening and closing of the safe memory region with the
MPK instruction, wrpkru.
*
*
*
vip_write(&first->op_last, 8);
vip_write(&first->op_last->op_sibling, 8);
- LISTOP is a sensitive type containing a function pointer.
Thus, its two members, op_last and op_sibling, pointing to
other LISTOP instances are also sensitive data. */
// ...
first->op_last->op_sibling = last->op_first;
// vip_safe_memory_unlock();
//
// vip_safe_memory_lock();
first->op_last = last->op_last;
// vip_safe_memory_unlock();
//
// vip_safe_memory_lock();
first->op_flags |= (last->op_flags & OPf_KIDS);
FreeOp(last);
return (OP*)first;
1 /** == Instrumentation of consecutive writes of sensitive data ==
2
3
4
5 OP *Perl_append_list(pTHX_ I32 type, LISTOP *first, LISTOP *last){
6
7
8
9
10
11
12
13
14
15
16
17
18 }
19 /** == Coalescing permission changes in a basic block ======== */
20 OP *Perl_append_list(pTHX_ I32 type, LISTOP *first, LISTOP *last){
21
22
23
24
25
26
27
28
29
30
31 }
Figure 5: Before (top) and after (bottom) basic block level coalescing
optimization for permission changes in 400.perlbench (Lines 23-28).
vip_write(&first->op_last->op_sibling, 8);
// ...
first->op_last->op_sibling = last->op_first;
// vip_safe_memory_unlock();
//
first->op_last = last->op_last;
//
first->op_flags |= (last->op_flags & OPf_KIDS);
// vip_safe_memory_lock();
FreeOp(last);
return (OP*)first;
vip_write(&first->op_last, 8);
Figure 5 shows an example of an instrumented function from
400.perlbench in SPEC CPU2006, where LISTOP is a sensitive type.
The original instrumentation (top), shows the modification of a sen-
sitive object’s linked list (Lines 7 and 11), which requires opening of
the safe memory region. However, repetitively unlocking and lock-
ing is unnecessary if VIP API calls are consecutive in a basic block. In
this case, there is neither control flow change nor store instructions
capable of corrupting arbitrary memory locations. Therefore, it is
safe to place the locking instrumentation (vip_safe_memory_lock),
which reverts the safe memory permission to read-only, after the
very last VIP API call as shown in Figure 5 (bottom).
Based on this intuition, we introduce a coalescing-safe basic block,
where we can safely coalesce all write instrumentations in a basic
block. All memory writes in a coalescing-safe basic block are guar-
anteed to not be capable of corrupting arbitrary memory locations.
Therefore, a store target address should be limited to one of the
following: (1) a sensitive type that is protected by VIP, (2) a non-
sensitive field of a sensitive type whose address is bounded by the
sensitive type, or (3) a local variable in a safe stack. Consequently,
the safe memory region can safely remain unlocked until the end
of the basic block. Looking at the optimized instrumentation in Fig-
ure 5 (bottom), all intermediary permission changes are removed
and a single lock function is placed at the end of its basic block
(Line 28). This greatly reduces unnecessary permission changes.
7.3 Coalescing Permission Changes within a Function (CFN)
We introduce a coalescing-safe function by extending the notion
of a coalescing-safe basic block to further reduce the MPK permis-
sion change overhead. A function is considered to be coalescing-safe
– i.e., not capable of corrupting arbitrary memory locations – if
it meets three conditions: (1) all basic blocks in the function are
coalescing-safe; (2) it does not contain any indirect calls, and (3)
all direct call targets are coalescing-safe functions. In other words,
all store instructions in the function and all callee functions are
Session 5D: Misc: Android and Vulnerabilities CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea1619register OP *kid;
// ...
if (cUNOPo->op_first) {
if (kid->op_sibling) {
} else {
kid->op_next = o;
// vip_safe_memory_unlock();
// vip_write(&kid->op_next, 8);
// vip_safe_memory_lock();
kid->op_next = LINKLIST(kid->op_sibling);
// vip_safe_memory_unlock();
// vip_write(&kid->op_next, 8);
// vip_safe_memory_lock();
* - OP is a sensitive type containing a function pointer.
* Thus, its member, op_next, pointing to another OP
* is also sensitive data, which needs to be protected. */
o->op_next = LINKLIST(cUNOPo->op_first);
// vip_safe_memory_unlock();
// vip_write(&o->op_next, 8);
// vip_safe_memory_lock();
for (kid = cUNOPo->op_first; kid; kid = kid->op_sibling) {
1 /** == Instrumentation of writing sensitive data ================
2
3
4
5 OP * Perl_linklist(pTHX_ OP *o) {
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32 }
33 /** == Coalescing permission changes in a safe function ======= */
34 OP * Perl_linklist(pTHX_ OP *o) {
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
o->op_next = LINKLIST(cUNOPo->op_first);
// vip_write(&o->op_next, 8);
for (kid = cUNOPo->op_first; kid; kid = kid->op_sibling) {
o->op_next = o;
// vip_write(&o->op_next, 8);
}
// vip_safe_memory_lock();
return o->op_next;
if (kid->op_sibling) {
kid->op_next = LINKLIST(kid->op_sibling);
// vip_write(&kid->op_next, 8);
} else {
kid->op_next = o;
// vip_write(&kid->op_next, 8);
register OP *kid;
// vip_safe_memory_unlock();
// ...
if (cUNOPo->op_first) {
} } }
else {
o->op_next = o;
// vip_safe_memory_unlock();
// vip_write(&o->op_next, 8);
// vip_safe_memory_lock();
}
return o->op_next;
} } }
else {
55 }Figure 6: Before (top) and after (bottom) function level coalescing
of permission changes in 400.perlbench (Lines 36-53).
guaranteed to not be capable of corrupting arbitrary memory loca-
tions. Thus, unlocking and locking instrumentation can be safely
coalesced at the function level.
Figure 6 shows an example of function-level coalescing from
400.perlbench. There are four basic blocks that each instrument
vip_write for the sensitive linked list pointer value (op_next). The
top shows VIP instrumentation before this optimization where each
basic block with vip_write is also fitted with unlocking/locking
safe memory. The bottom shows the same function with the opti-
mization enabled, such that all unlocking/locking of safe memory
in each basic block is removed, and instead a single pair of unlock
and lock is placed at function entry and exit (Lines 36, 53).
7.4 Inlining VIP Functions (INLN)
To minimize instrumentation overhead and eliminate function call
overhead, our instrumentation pass inlines HyperSpace API calls.
Furthermore, we optimized HyperSpace’s API calls specifically for
handling and protecting 8-byte data. This is because most sensitive
data needing protection are usually various pointer types. These
8-byte optimized APIs are inlined using LLVM’s Link Time Opti-
mization (LTO).
7.5 Excluding Objects in Safe Stack (SS)
As discussed in §6, we use SafeStack [75] to protect return addresses
and safe objects that are address-not-taken stack objects. SafeStack
isolates safe objects from all sensitive stack objects that are on
the regular stack. Hence HyperSpace does not need to instrument
any objects on the SafeStack. This helps to reduce performance
overhead especially when a program frequently uses temporary
stack variables that belong to sensitive types.
7.6 Optimizing Safe Memory Access (HGP)
Due to maintaining dual memory regions, HyperSpace experiences
more frequent page faults and higher TLB pressure leading to higher
overhead in accessing memory. To optimize safe memory access,
we utilize huge pages provided by the OS kernel. Compared to the
default 4 KB page size, the huge page configuration uses 2 MB pages
for the safe memory region to reduce the number of page faults
and TLB misses making safe memory access more efficient.
8 Implementation
Our HyperSpace prototype consists of 4300 lines of codes in Linux
Kernel, LLVM, ptmalloc2, and a library to implement the VIP API.
Code instrumentation is done via a Module pass on LLVM 9.0.0
(2516 lines of code). Linux kernel 5.0.0 was modified (378 lines of
code) to initialize the virtual address space of a user process for
VIP by splitting the userspace virtual address into regular and safe
memory regions. Also, we manually instrumented ptmalloc2 (902
lines of code) with VIP primitives to guarantee the integrity of heap
metadata. The VIP library consists of 505 lines of code.
We note that HyperSpace executables are compatible with un-
instrumented shared libraries to a certain extent. Un-instrumented
libraries with read-only operations are fully compatible; accessing
sensitive pointers from un-instrumented libraries will only access
data from the regular memory because there are no VIP primi-
tives. Un-instrumented libraries that perform write operations will
prompt a crash by vip_assert before instrumented code uses the
sensitive pointer as its safe memory counter part cannot be updated
without VIP primitives. If such a use-case is required (i.e., library
code needs to modify a sensitive pointer), the library should be
recompiled with HyperSpace such that it is also instrumented.
9 Evaluation
We first evaluate how effectively HyperSpace can prevent real-
world attacks by enforcing the value invariant property (§9.1). Next,
we evaluate the efficiency of HyperSpace applications described
in §6 using SPEC CPU 2006 and two real-world applications (§9.2).
Lastly, we analyze the impact of our optimization techniques (§9.3)
as well as the memory overhead of HyperSpace.
All applications were run on a 24-core server equipped with two
Intel Xeon Silver 4116 processors (2.10 GHz) and 128GB DRAM. All
benchmarks were compiled with LLVM SafeStack [75]. Additionally,
GNU gold v2.29.1-23.fc28 is used for linking to enable LLVM LTO.
9.1 Security Experiments
We evaluated all security applications described in §6, with three
real-world exploits and six synthesized attacks.
9.1.1 Real-World Exploits We first collected three publicly avail-
able exploits against three vulnerable programs.
Session 5D: Misc: Android and Vulnerabilities CCS ’21, November 15–19, 2021, Virtual Event, Republic of Korea162040
35
30
25
20