r
e
s
b
O
2
r
e
s
U
-
l
a
u
t
c
A
-
g
n
i
y
f
i
r
e
V
1
y
r
r
a
C
-
o
t
-
g
n
i
h
t
o
N
-
g
n
i
s
U
-
n
o
-
t
n
i
a
r
t
s
n
o
C
-
o
N
2
e
c
i
v
e
D
-
e
h
t
2
n
o
i
t
a
c
i
t
n
e
h
t
u
a
e
D
-
c
i
t
a
m
o
t
u
A
Scheme
ZEBRA
Passwords
Proximity-based
Fingerprint
Voice-based
Facial recognition
Keystrokes-based
Pulse-based
= offers the beneﬁt; = almost offers the beneﬁt; no circle= does not
offer the beneﬁt. = better than ZEBRA; = worse than ZEBRA; no
pattern= equivalent to ZEBRA.
1Properties from the UDS framework. 2Additional properties, not in UDS.
bumping) is observed by two different devices and compared
to generate an encryption key or match two devices. In
both these cases, the user must take explicit action, so these
methods are not passive or unobtrusive. Furthermore, the
signals being observed and compared are of the same type –
accelerometer signals. In our work, we have two different
types of signals to correlate – one is from the sensors in the
bracelet and the other is a set of input events on a terminal.
Consider the following two use cases that motivate the
need for ZEBRA.
Sally is a member of clinical staff in a hospital. She walks
to a computer terminal and logs in to update her patient’s
record. She needs some more information from her colleague
to update the record. She steps away to talk to that colleague,
leaving the terminal open because she is planning to come
back and update that record. Sally does not return before
the timeout period expires, so the terminal automatically
logs Sally out. In the meantime another clinician, Tina, logs
into the same terminal and updates a record and leaves,
again forgetting to log out. Soon Sally returns and ﬁnds that
terminal open. She assumes that it is still her account and
her patient’s record, since she was using it earlier. Sally does
not check whether it is indeed her account and her patient,
nor does the system, and she accidentally updates the wrong
patient’s record under Tina’s name. Incidents like these are
not uncommon in hospitals [1], [3].
Claire, a chemical engineer, is authorized to alter the
operation of a drug manufacturing plant using a terminal
linked to the plants SCADA system. After logging in she
gets an emergency call from her sister and walks around a
The closest work is perhaps ‘shake well before use’ [18],
in which a user shakes two devices to generate a shared
encryption key between them. Also similar is the product
Bump [19], wherein users bump their phones to exchange
the same action (shaking or
contacts. In these works,
707
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:00:04 UTC from IEEE Xplore.  Restrictions apply. 
nearby corner to hear her sister better, knowing the terminal
automatically logs out in 15 minutes. Jake, a biomedical
engineer competing with Claire for a promotion, happens by
and notices the open terminal is logged into Claire’s account.
He makes a subtle change in the plants operation that reduces
efﬁciency and gets logged as Claire’s doing, and then quickly
walks away. Claire, the better and more honest engineer is
passed over for promotion in favor of devious Jake because
of her “mistake”. The US Code of Federal Regulations, Title
21, Part 11 requires many FDA-regulated industries such as
drug makers, medical device manufacturers, biotechnology
companies, biologics developers and others to implement
measures to control, monitor and report access to critical
terminal control systems [20], [21]. Terminal timeouts are
an important part of these protections but may be inadequate
to prevent tampering.
3) The bracelet and the terminal are already paired; they
share encryption keys that they can use to secure
their communication. Pairing is a one-time task and
any suitable pairing method may be used [23]. In an
enterprise setting, we assume administrative tools pair
all bracelets with all terminals in a distributed fashion.
4) We assume that all communication between the bracelet
and terminal is secured by other means (e.g., Bluetooth
Low Energy or ANT+ protocols). The terminal does
not communicate wirelessly to untrusted/unknown
bracelets.
5) There exists an initial authentication scheme (e.g.,
username-password) that users use to log in to termi-
nals. Once they log in, ZEBRA continuously veriﬁes
that the current user is the same user who logged in.
Desired properties. We desire ZEBRA to be
III. SYSTEM MODEL
ZEBRA is designed to prevent intentional and accidental
misuse of a user’s account on a terminal. ZEBRA is not
a method for initial authentication; rather, it compliments
any existing initial authentication schemes by providing
continuous authentication and automatic deauthentication.
When a user logs in (e.g., by providing username and
password), ZEBRA continuously authenticates the current
user (i.e., veriﬁes whether the current user is the same user
who logged in), and when a different user starts using the
same terminal while the current user is logged in, ZEBRA
deauthenticates the current user, thereby preventing account
misuse. In this section, we state the assumptions that we
make for ZEBRA, its desired properties, and its adversary
model.
Assumptions. We make the following assumptions.
1) We assume that each user wears a bracelet on the
hand she uses to control the mouse interface. The
bracelet has built-in accelerometer and gyroscope
sensors and a wireless radio (e.g., Bluetooth) that it
uses to communicate with the terminal. Today, many
wrist-worn ﬁtness devices meet these assumptions,
demonstrating that such a device is feasible and can
have long battery life.
2) Each bracelet is associated with a single user, and users
do not share bracelets. This association can be imple-
mented using a variety of approaches. For instance,
one can use a biometric bracelet [22], or a user may
be required to enter a PIN when she puts the bracelet
on to activate it, and the bracelet would deactivate
when it is removed from the wrist or after a period of
time (e.g., 24 hours). This assumption is similar to the
photo ID-cards used by many organizations. In other
instances there might be a biometrically-authenticated
station where employees check out bracelets at the
start of a shift.
1) Continuous: It should continuously authenticate the
current user as long as the user is logged in.
2) Passive: It should not require any explicit user inter-
vention and should not interrupt the user.
3) Unobtrusive: It should be completely unobtrusive and
should not invade the user’s privacy; the user should
be comfortable using the system.
4) Quick: It should be quick to identify when a user other
than the logged-in user starts using the terminal so that
it can deauthenticate the logged-in user to prevent any
access misuse.
5) Accurate: It should not incorrectly deauthenticate a
user nor falsely authenticate a user.
6) User-agnostic: It should not require any user-speciﬁc
training.
Adversary model. We are primarily concerned with the
threat of unauthorized access when the user forgets to log
out when stepping away from the terminal, even if the user
remains in the terminal’s proximity doing other tasks (e.g.,
walking, writing, talking to someone, or working on another
nearby terminal). If the user steps out of the radio’s proximity
range of the terminal one can use proximity-based solutions.
We consider two types of adversaries. First, an innocent
authorized user who wants to use a terminal for her own
task: she ﬁnds an open terminal and uses it, either because
she assumes the logged-in account on the terminal is hers
or because she does not want to do the login step. Second,
a malicious individual wants to use an open (logged-in)
terminal while the already logged-in user is nearby, perhaps
because the logged-in user has privileges desired by the
adversary, or the adversary wants to take action in the name
of the logged-in victim. This adversary may try to observe
and mimic the logged-in user’s hand movements to fool the
terminal into falsely authenticating himself as that user.
IV. APPROACH
In this section we introduce bilateral authentication, com-
pare it with traditional authentication methods, and give an
708
Authorized licensed use limited to: IEEE Xplore. Downloaded on March 18,2021 at 12:00:04 UTC from IEEE Xplore.  Restrictions apply. 
overview of ZEBRA.
A. Bilateral authentication
Traditional user-authentication schemes authenticate a user
by comparing an attribute that the user produces with a
previously stored attribute. For instance, password-based
authentication schemes compare the hash of the user-entered
password with the stored password hash, voice-based authen-
tication schemes compare features of the user’s voice against
stored features of authorized users’ voices, and a keystroke-
based biometric scheme compares keystroke dynamics of the
user with the user’s stored keystroke dynamics.
In our case, bilateral authentication, the user is authenti-
cated by comparing two observations of the same attribute
of the user, measured separately in real-time by two sources
(hence the term bilateral). A related example of a bilateral
authentication method is the ‘same-body authentication’
solution by Cornelius et al. [24]. They measure a user’s
motion using multiple accelerometer sensors placed at
different positions on the body and compare these sensors’
signals (which measure the same attribute, the user’s motion)
to determine whether all the sensors are on the same body.
A general bilateral user-authentication method can be
described as a user-authentication method where an attribute
about the user, a, is observed and measured by two indepen-
dent parties P and Q, where these measured signals could
be the same (as in the above example) or different (as in
ZEBRA) but the user is authenticated only if the two signals
correlate. The attribute a could be physiological (e.g., heart
rate, body temperature), behavioral (e.g., walking, user’s
interaction with device), or environmental (e.g., being in the
same room, radio signal).
There are several beneﬁts of bilateral authentication,
some of which overlap with desired properties identiﬁed
by previous research [16]. These include:
1) No need to store sensitive information in the authenti-
cating device. Although sensitive information can be
stored securely, in practice it is not stored securely,
and when the system is compromised users’ sensitive
information is leaked [25]. By eliminating the need to
store any sensitive information we eliminate this risk.
2) No mental burden on users. Users have to remember
their password if they use a password-based authen-
tication scheme; previous work has shown that users
are not good at remembering passwords and they use
work-arounds to avoid using passwords [4], [8].
In
bilateral authentication there is no secret for users to
remember.
3) No hassle for users over time. Users’ habits and
behaviors change over time, either naturally or due
to an injury or illness. Behavior-based authentication
schemes are susceptible to these changes, and they need
to be re-trained for the user whose behavior changed
over time. Bilateral authentication does not rely on any
709
user-speciﬁc behavior, only on the fact that the user is
doing speciﬁc interactions with the terminal.
4) No hardware modiﬁcations to the terminal, assuming
it has short-range radio such as Bluetooth.
Bilateral authentication, however, cannot always be used
because it is not always possible to monitor the users’
interaction externally. Not all interactions between the user
and desktop involve the dominant hand; notably, periods of
screen reading involve no motion at all. We expect that, much
as with common screen-saver software, users will need to
periodically jiggle the mouse while reading extensively.
B. ZEBRA
ZEBRA provides continuous authentication, that is, it
continuously veriﬁes the identity of the logged-in user.
Although continuous authentication has many uses, it is a
necessary foundation for a smart deauthentication mechanism.
Such a mechanism can automatically take protective action
(such as locking the screen) when another user starts using
a terminal that a previous user had logged in to.
ZEBRA works as follows: Jane, a ZEBRA user, logs in to
the terminal, the terminal connects wirelessly to her bracelet
(because she had paired them earlier, the terminal can look
up her bracelet’s network address, given her username, and
seek that bracelet on the short-range radio connection). The
presence of the bracelet may optionally be required by the
login process, serving as a second-factor token, strengthening
the initial authentication step. We are concerned here with
what happens after login, continuously verifying that Jane
remains the active user of the terminal. As Jane uses the
terminal, the bracelet captures the sensor data (accelerometer
and gyroscope) from Jane’s dominant wrist movement and
sends it to the terminal. From the acceleration data the
terminal receives, it generates, using a classiﬁer, a sequence
of ‘interactions’ (mouse scrolling or typing) that Jane appears
to be doing. The terminal also generates the actual sequence
of interactions, based on the inputs it receives from keyboard
and mouse. By comparing these two sequences of interactions,
the terminal veriﬁes whether the user using the terminal is
Jane, i.e., the one wearing the bracelet.