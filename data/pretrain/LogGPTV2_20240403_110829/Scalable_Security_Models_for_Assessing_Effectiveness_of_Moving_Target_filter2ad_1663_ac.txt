### Different Vulnerabilities [18]–[24]

We analyze Shufﬂe and Diversity using two security metrics (risk and attack cost) via the HARM, as described in Section III. Both Shufﬂe and Diversity can be combined and used together, but this paper does not consider that scenario.

### III. Effective Security Analysis Using Importance Measures

#### A. Network Hardening Using MTD Techniques

There are constraints on the number of applicable defense strategies (e.g., deploying MTD techniques) due to system limitations. Previous work on deploying MTD techniques did not consider these constraints in networked systems [6], [10]–[16], [18], [19], [22]–[24]. In this section, we address the deployment of MTD techniques in a large, networked system where the number of applicable MTD techniques is limited by system constraints. We also demonstrate the effectiveness of using Importance Measures (IMs) for deploying MTD techniques and compare their performance with the Exhaustive Search (ES) method through simulations.

**Network Hardening Based on Important Nodes:**

We focus on securing important nodes in attack paths rather than endpoints (i.e., initial attack points and target nodes) because:
1. In a virtualized system (e.g., cloud), visible components or nodes to the attacker (i.e., initial attack points) may change frequently (e.g., service updates).
2. Assets in the networked system can change, and there may be multiple assets (i.e., multiple target nodes).
3. Target nodes are estimated based on asset values, but it is still challenging to specify targets during an attack.

**Example 1: Address Randomization (AR) Method**

Figure 5 illustrates a simple example in a virtualized system. We assume VM1 is unavailable, the attacker has compromised VM2, and the targets are VM4 and VM5. We use the AR method, one of the Shufﬂe-based MTD techniques [3], [6], [10], where a dotted box represents a VM with AR in use.

- **Figure 5(a)**: Initial attack scenario without any AR.
- **Figure 5(b)**: AR applied to both target nodes VM4 and VM5 (two AR implementations required).
- **Figure 5(c)**: AR applied in the attack path (i.e., to VM3). This is more time-efficient and cost-effective [35], requiring only a single AR implementation. If the AR implementation has associated security costs, applying AR to VM3 is less costly.

**Example 2: OS Diversity Technique**

Figure 6 shows the different effectiveness of securing nodes in a virtualized system. We assume VM4 is down, VM3 is operating on W7, and VM5 is the target. We consider using an OS diversity technique (i.e., backup OS is used).

- **Figure 6(a)**: Initial attack scenario with two attack paths: (i) through VM1 and VM3 to the target, and (ii) through VM2 and VM3 to the target.
- **Figure 6(b)**: Deploying OS diversity on VM2 affects only one attack path.
- **Figure 6(c)**: Deploying OS diversity on VM3 affects both attack paths. More complex diversity assignments can be found in [18].

In a large, networked system with complex topologies, it is difficult to determine which nodes are more important in terms of the number of affected attack paths.

#### B. Deploying MTD Using IMs

In a large, networked system with complex topology, determining which nodes are more important is challenging. One approach is to compute all possible attack scenarios (e.g., via the ES method) to assess node importance, but this has exponential computational complexity. To address this, we use IMs to deploy MTD techniques on important nodes.

**1. Computing the IMs:**

We compute IMs using network centrality measures (NCMs) and security metrics to rank important hosts and vulnerabilities, as in [39]. For the virtualized system shown in Figure 1, we compute NCMs to rank important VMs in the upper layer based on degree, closeness, and betweenness. The order of important VMs is [VM3, VM4, VM1, VM2, VM5]. Vulnerabilities are ranked based on their CVSS Base Score (BS). The order of W7 vulnerabilities is [W74, W71, W72, W73, W75], and the order of REL vulnerabilities is [REL3, REL6, REL4, REL5, REL2, REL1].

| NCM | Degree | Closeness | Betweenness | Rank |
|-----|--------|-----------|-------------|------|
| VM1 | 0.6    | 0.556     | 0.217       | 3    |
| VM2 | 0.4    | 0.714     | 0.083       | 4    |
| VM3 | 0.8    | 0.833     | 0.367       | 1    |
| VM4 | 0.6    | 0.714     | 0.083       | 2    |
| VM5 | 0.4    | 0.556     | 0           | 5    |

**2. Applying Shufﬂe Using IMs:**

We use VM live migration as an example of Shufﬂe, as described in Section II-D. First, we use the ES method to analyze the risk associated with each migration case. The risk formula is defined as in equation (1) [32], where the system risk \( R_{\text{system}} \) is the product of the probability of attack success on node \( i \), \( P_{\text{goal}i} \), and the impact of the attack on node \( i \), \( I_{\text{goal}i} \), where \( i \in N \) and \( N \) is the set of all nodes in the networked system. We use security metrics from Tables II and III to compute the system risk. The system risk is denoted as \( R_{\text{VM}i} \) for the attack scenario when VMi has migrated.

- **Equation (1)**: \( R_{\text{system}} = \sum_{i \in N} P_{\text{goal}i} \times I_{\text{goal}i} \)
- **Equation (2)**: \( R_{\text{VM1}} = \sum_{i \in \text{path}_{\text{VM1}}} P_{\text{RVM1}i} = 1070 \)
- **Equation (3)**: \( R_{\text{VM4}} = \sum_{i \in \text{path}_{\text{VM4}}} P_{\text{RVM4}i} = 480 \)
- **Equation (4)**: \( P_{\text{RVM1}1245} = \sum_{i \in \text{path}} V_{\text{RVM}i} = 40 \)

Table VI summarizes the system risk for each migration case, including the number of attack paths. Selecting VM4 is the most effective VM live migration for the example virtualized system. Using IMs, VM3 has the highest rank, but it cannot be migrated due to system constraints. Therefore, VM4 is chosen, which is equivalent to the ES method. The next available migrations are VM1 and then VM2, showing that IMs can identify important nodes equivalent to the ES method.

| Case No. | Migrated VM | Risk Value | Number of Attack Paths |
|----------|-------------|------------|------------------------|
| 1        | VM1         | 1070       | 26                     |
| 2        | VM2         | 1070       | 26                     |
| 3        | VM4         | 480        | 12                     |

**3. Applying Diversity Using IMs:**

We use OS diversity as an example, as described in Section II-D. Overlapping vulnerability scores from the current OS and the backup OS show no difference in risk analysis. However, each OS requires a different attack pattern, potentially thwarting repeated attacks on the same OS. Instead of analyzing system risk, we compare the increase in attack cost to evaluate OS diversity. Other security metrics reflecting different path information can also be used (e.g., mean time to compromise).

We assume exploiting a VM has an attack cost value of 1, and if the attacker has previously compromised the same OS, the attack cost is reduced to 0.5. We also assume that we can only deploy OS diversity to a single VM for simplicity, but more complex scenarios can be used, as in [18]. We use the same attack scenario as in Figures 5 and 6, with the goal of compromising VM5.

- **Equation (5)**: Initial state attack cost.
- **Equation (6)**: Attack cost of deploying OS diversity to VM1, increasing the total attack cost by two units from the initial state.

This approach demonstrates the effectiveness of using IMs to deploy MTD techniques, providing a more efficient and cost-effective solution compared to the ES method.