下面的例子使用了多个捕获型括号：把Unix中邮箱联系人的alias文件的内容存放在一个字
符串中，数据格式是：
alias PI:EMAIL
alias PI:EMAIL
PI:EMAIL
为了提取每一行中的昵称（alias）和完整地址，我们可以使用m/^aliae\a+（\S+）\8+（.+）/m
（不使用/g）。在listcontext中，返回的序列包括两个元素，例如（'Jeff’，‘jfriedl@regex.
info'）。现在用/g匹配所有这样的组合，得到的序列是：
('Jeff'，'PI:EMAIL'，'Perlbug',
'PI:EMAIL'，'Prez'，'PI:EMAIL')
如果这个序列恰好符合key/value的形式，我们可以直接把它存入一个关联数组（associative
array)。
my &alias = $text =~m/^alias\s+(\S+)\s+(.+)/mg;
返回之后，可以用salias{Jeff}访问·Jeff·的完整地址。
选代匹配：ScalarContext，使用/g
IterativeMntching:Scalar Context,with/g
scalarcontext中，m/.…./g是个特殊的结构。和正常的m/../一样，它只进行-次匹配，但是
和listcontext中的m/…/g一样，它会检查之前匹配的发生位置。每次在scalarcontext中使
用m/…/g一例如在循环中，它会寻找“下一个”匹配。如果失败，就会重置“当前位置
(currentposition）”，于是下一次应用从字符串的开头开始。
这里有个简单的例子：
      =X
$text=~m/\b（[a-z]+\b）/g;
print*The first all-lowercase word:S1\n";
$text=~m/\b([A-Z]+\b)/g;
print*The subsequent all-uppercaseword:$1\n*;
有两次匹配是在scalarcontext中使用/g进行的，结果为：
Thefirstall-lowercaseword:is
The subsequent all-uppercaseword:SILLY
这个位置，在后面寻找大写字母单词。对两个匹配来说，/g都是必须的，这样匹配才能注
---
## Page 339
Match运算符
313
scalarcontext中的/g匹配非常适合用作while循环的条件：
while（$ConfigData =~m/^(\w+）=（.*)/mg）（
my(Skey, Svalue)=($1，$2）;
最终会找到所有的匹配，但是while的循环体是在匹配之间（或者说，在每次匹配之后）
执行。一旦某次匹配失败，结果就是false，然后while循环结束。同样，一旦失败，/g状
态会重置，也就是循环结束之后的/g匹配会从字符串的开头开始。
比较：
while（Stext=~m/（\d+）/）（#很危险！
print "found:$1\n";
和
while（Stext=~m/(\d+)/g）{
print "found:$1\n";
）
唯一的区别是/g，但是这区别不可小视。如果stext包含之前那个IP地址，第二个程序输
出我们期望的结果：
found:64
found: 156
found:215
found:240
相反，第一个程序不断地打印“found：64”，不会终止。不使用/g，就意味着“找到stext
中第一个"（\d+）”，也就是‘64”，无论匹配多少次都是如此。添加/g之后，它变成了“找
到stext中的下一个"（\d+）”，依次找到各个数字。
“当前匹配位置”和posO函数
开始第一次匹配的尝试。这是字符串的属性之一，而与正则表达式无关。在字符串创建或
者修改时，“当前匹配位置”会指向字符申的开头，但是如果/g匹配成功，它就会指向本次
匹配的结束位置。下一次对字符串应用/g匹配时，匹配会从同样的“当前匹配位置”开始。
---
## Page 340
314
第7章：Perl
my $ip = *64.156.215.240";
while ($ip =~m/(\d+)/g）{
printf *found‘$1′ending at location $d\n"，pos($ip);
）
结果是：
found'64'endingat location2
found'156'endingatlocation 6
found'215'endingatlocation10
found'240'endingat location 14
（记住，字符串的下标是从0开始的，所以“location2”就是第3个字符之前的位置）。在
/g匹配成功之后，$+[0）（@+的第一个元素302)就等于目标字符串中的pos。
pos（）函数的默认参数是match运算符的默认参数：变量s_。
预设定字符串的pos
pos（）的真正能力在于，我们可以通过它来指定正则引擎从什么位置开始匹配（当然是针对
/g的下一次匹配）。我在Yahoo!的时候，要处理的Web服务器log文件的格式是，包含32
字节的定长数据，然后是请求的页面，然后是其他信息。提取请求页面的办法是~.（32），
跳过开头的定长数据：
if($1ogline =~m/^.(32}(\S+)/）{
SRequestedPage = $1;
这种硬办法不够美观，而且要强迫正则引擎处理前32个字节。如果我们亲自动手，代码会
好看得多，效率也高得多：
pos($logline) = 32;
#请求页的信息从第33个字符开始...
if($logline =~m/(\S+)/g）(
SRequestedPage = $1;
）
这个程序好些，但还不够好。这个正则表达式从我们规定的位置开始，而在此之前不需要
匹配，这一点与上个程序不同。如果因为某些原因，第32个字符不能由S：匹配，前面那
个程序就会匹配失败，但是新程序因为没有锚定到字符串的特殊位置，会由传动装置启动
驱动过程。也就是说，它会错误地返回一个S+在字符事后面部分的匹配。幸好，在下一
节我们会看到，这个问题很容易修复。
科
---
## Page 341
Match运算符
315
使用\G
pos（Slogline）=32；#设定“当前位置”从第32个字将开始，所以从此处开始匹配..，
if (S1ogline =~m/\G(\S+) /g)
SRequestedPage = $1;
\G告诉传动装置，“不要启动驱动过程，如果在此处匹配不能成功，就报告失败”。
前面几章曾经介绍过G：第3章有简单介绍（130），更复杂的例子在第5章（212）。
请注意，在Perl中，只有G出现在正则表达式开头，而且没有全局性多选结构的情况下，
结果才是可预测的。第6章的优化CSV解析程序的例子中（*271），正则表达式以
\G（？：^1，)…开头。如果更严格的能够匹配，就没必要检查G，所以你可能会把它改
为（？：^1\G，）。不幸的是，在Perl中这样行不通；其结果不可预测（注7）。
使用/gc进行“Tag-team”匹配
正常情况下，m/…/g匹配失败会把目标字符串的pos重置到字符串的开头，但给/g添加/c
之后会造成一种特殊的效果：匹配失败不会重置目标字符串的pos（/c离不开/g，所以我
一般使用/gc）。
m//gc最常见的用法是与\G一起，创建“词法分析器”，把字符串解析为各个记号（token）。
下例简要说明了如何解析Shtm1中的HTML代码：
while（notShtml=~m/\G\z/gc）#在金部检查完之前...
if（Shtml=~m/\G（]+>)/xgc）（print"TAG:$1\n"
elsif （$html =~m/\G（&\w+;）/xgc）（print*NAMED ENTITY:S1\n”)
elsif（$html =~m/\G（&\#\d+;）/xgc）（print*NUMERIC ENTITY:$1\n)
elsif（$html=-m/\G（[^<>&\n]+）/xgc）（printTEXT:$1\n"
elsif（$html=~m/\G\n
/xgc)(print"NEwLINE\n"
elsif ($html =~ m/\G(.
）/xgc){print"ILLEGALCHAR:$1\n"}
else{
die"s0:oops,this shouldn'thappen!";
）
注7：在大多数支持G流派中这样都没有问题，即便如此，我一般也不推荐使用它们，因为把
G放在正则表达式开头带来的收益大于只在某些情况下测试G的收益（246）。
---
## Page 342
316
第7章：Perl
每个正则表达式的粗体部分匹配一种类型的HTML结构。从当前位置开始，依次检查每一
个正则表达式（使用/gc），但是只能在当前位置尝试匹配（因为使用了Gi)。按照顺序依
次检查各个正则表达式，直到找到能够匹配的结构为止，然后报告。之后把shtm1的pos
指向下一个记号的开始，进入下一轮循环的搜索。
循环终止的条件是m/\G\z/gc能够匹配，即当前位置（\G）指向字符串的末尾（\z)。
有一点要注意，每轮循环必须有一个匹配。否则（而且我们不希望退出）就会进入无穷循
环，因为shtml的pos既不会变化也不会重置。对现在的程序来说，最终的else分支永远
不会调用，但是如果我们希望修改这个程序（马上就会这么做），或许会引入错误，所以else
分支是有必要保留的。对目前这个程序来说，如果接收预料之外的数据（例如“<>"），会
在每次遇到预料之外的字符时，就发出一条警报。
另一点需要注意的是各表达式的检查顺序，例如把G（.）作为最后的检查。也可以来看下
面这个识别代码的例子：
Shtml =~m/\G（）/xgcsi
哇，这里使用了5个修饰符！为了正常运行，我们必须把它放在对字符串进行第一次
]+>的匹配之前。否则]+>i会匹配开头的标签，这个表达式就没法运
行了。
第3章还介绍了关于/gc的更高级的例子（132)。
Pos相关问题总结
下面是match运算符与目标字符串的pos之间互相作用的总结：
匹配类型尝试开始位置
匹配成功时的pop值
匹配失败时的pop设定
m/../
字符串起始位置（忽略DOs）
）重置为undef
重置为undef
m/.../g字持串的pos位置
匹配结束位置的偏移值重置为undef
m/.../gc字符事的pos位置
匹配结束位置的偏移值不变
同样，只要修改了字符串，pos就会重置为undef（也就是初始值，指向字符串的起始位置）。
Match运算符与环境的关系
The MatclOperator'sEnoironmental Relations
下面儿节将总结我们已经见到的，match运算符与Peri环境之间的互相影响。
---
## Page 343
Match运算符
317
match运算符的伴随效应
通常，成功匹配的伴随效应比返回值更重要。事实上，在voidcontext中使用match运算符
（这样甚至不必检查返回值），只是为了获取伴随效应（这种情况类似scalarcontext）。下面
总结了成功匹配的伴随效应：
·，匹配之后会设置s1和@+之类变量，供当前语法块内其他代码使用（299）。
·
设置默认正则表达式，供当前语法块内其他代码使用（308）。
样的package中，不调用reset就无法继续匹配（308）。
当然，这些伴随效应只能在匹配成功时发生，不成功的匹配不会影响它们。相反，下面的
伴随效应在任何匹配中都会发生：
·目标字符串的pos会指定或者重置（313)。
如果使用了/o，正则表达式会与这个运算符“融为一体（fuse）”，不会重新求值（evaluate，
352)。
match运算符的外部影响
素：
应用场合context
match运算符的应用场合（scalar、list，或者void）对匹配的进行、返回值和伴随效应
有重要影响。
DOB(….)
目标字符串的pos（由前一次匹配显式或隐式设定）表示下一次/g匹配应该开始的位
置，同时也是G匹配的位置。
联认表达式
如果提供的正则表达式为空，就使用默认的表达式（308）。
study
对匹配的内容或返回值没有任何影响，但如果对目标字符串调用此函数，匹配所花的
时间更少（也可能更多）。参考“Study函数”（359）。
m?..?和reset
m？？运算符有一个看不见的“已/未匹配”状态，在使用m？?匹配或者reset时设
定（308）。
---
## Page 344
318
第7章：Perl
在context中思考（不要忘记context）
在match运算符讲解结束之前，我要提几个问题。尤其是，在while、if和foreach控制
结构中发生变化时，确实需要保持头脑清醒。请问，运行下面的程序会得到什么结果？
while("Larry CurlyMoe"=-m/\w+/g）（
print *WHILE stooge is S&.\n*;
print "\n";
if （*Larry Curly Moe”=~m/\w+/g）{
print *IF stooge is $&.\n";
）
print "\n";
foreach("Larry Curly Moe”=~m/\w+/g）{
print "FOREACH stooge is $&.\n";
）
这有点儿难度，请翻到下页查看答案。
Substitution运算符
TheSubstitution Operator
Perl的substitution运算符s/…/…/不但能够匹配，还能够替换匹配的文字。通常的形式是：
$text=~s/regex/replacement/modifiers
简单来说，regex匹配的文本会替换为replacement的值。如果使用了/g，这个正则表达式
会重复应用到文本中进行匹配，每次匹配的内容都会被替换。
与match操作一样，如果目标字符事在变量s_中，目标运算元和=~都不是必须的。match
运算符可以省略m，而substitution不能省略s。
我们已经看到，match运算符是非常复杂的一一它的工作原理，它的返回值，都取决于它所
在的应用场合，目标字符串的pos，以及使用的修饰符。相反，substitution运算符很简单：
它返回的信息是不变的（表示替换的次数），影响它的修饰符也很好理解。
你可以使用第292页介绍的所有核心修饰符，但是substituion运算符还支持另外两个修饰符，
/g，以及马上将要介绍的/e。
制
---